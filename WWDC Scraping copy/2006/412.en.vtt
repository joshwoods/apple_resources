WEBVTT

00:00:10.340 --> 00:00:12.940
Good afternoon, everyone,
and welcome to the talk

00:00:13.040 --> 00:00:17.490
titled Developing and Porting
UNIX Applications for Mac OS X.

00:00:17.880 --> 00:00:20.540
My name is Kevin Van Vechten,
and I'm the BSD team

00:00:20.540 --> 00:00:22.130
manager here at Apple.

00:00:22.220 --> 00:00:24.580
And today we're going to talk
a little bit about what's new

00:00:24.580 --> 00:00:27.340
in Leopard at the UNIX layer.

00:00:27.410 --> 00:00:30.770
And if you've heard in either
the State of Mac OS X speech

00:00:30.780 --> 00:00:33.930
or some of the kernel speeches,
we've been making a lot of

00:00:33.930 --> 00:00:38.210
changes about supporting UNIX 03,
and we'll go into quite some detail

00:00:38.210 --> 00:00:41.770
about some of those changes and what
you can expect when you're compiling

00:00:41.770 --> 00:00:43.590
your applications for Leopard.

00:00:44.750 --> 00:00:49.290
So, like I just said,
this is about developing

00:00:49.350 --> 00:00:52.650
on Mac OS X's UNIX layer,
and if you're either starting

00:00:52.650 --> 00:00:55.400
new applications from scratch
or porting existing applications

00:00:55.400 --> 00:00:58.470
from other UNIX systems,
I'll talk about some of the things

00:00:58.480 --> 00:01:01.930
that are different and unique about
Mac OS X that you should try to

00:01:02.060 --> 00:01:04.070
take advantage of on our platform.

00:01:04.080 --> 00:01:07.620
We'll also cover the
new features in Leopard.

00:01:07.620 --> 00:01:12.100
And to start that off, open source.

00:01:12.100 --> 00:01:15.900
So virtually all of the UNIX layer
of Mac OS X is open source.

00:01:15.900 --> 00:01:21.170
It's available at the URL up here,
developer.apple.com/opensource,

00:01:21.170 --> 00:01:23.620
and then that links to a
bunch of different pages that

00:01:23.620 --> 00:01:25.420
categorize it by each release.

00:01:25.420 --> 00:01:29.510
And the majority of Apple's original
sources are published under the

00:01:29.510 --> 00:01:34.020
Apple Public Source License 2.0,
which is both an open source

00:01:34.330 --> 00:01:37.980
initiative-approved license
as well as a free software

00:01:37.980 --> 00:01:40.210
foundation-approved license.

00:01:41.150 --> 00:01:43.790
And there's lots of open
source for Mac OS X.

00:01:43.800 --> 00:01:47.370
Since you are probably interested
in running common UNIX applications,

00:01:47.400 --> 00:01:49.580
I just wanted to mention
Fink and DarwinPorts,

00:01:49.580 --> 00:01:54.120
which are two projects
which have thousands of open

00:01:54.190 --> 00:01:55.420
source packages available.

00:01:55.610 --> 00:01:57.450
And actually,
DarwinPorts recently changed

00:01:57.450 --> 00:01:58.550
their name to MacPorts.

00:01:58.600 --> 00:02:01.980
So this URL is a little bit out of date,
but it'll still direct

00:02:02.090 --> 00:02:03.620
you to the right place.

00:02:05.710 --> 00:02:08.600
So on Mac OS X, there are many different
layers to the system.

00:02:08.600 --> 00:02:11.600
At the bottom of this graph here
is this big red area called Kernel.

00:02:11.600 --> 00:02:13.990
Well, we're not going to talk
about the Kernel much today,

00:02:13.990 --> 00:02:16.600
but we will talk about the UNIX layer
that's immediately above it.

00:02:16.600 --> 00:02:18.630
And then the things
higher up on the stack,

00:02:18.680 --> 00:02:23.230
Core Foundation, Carbon, and Cocoa,
again, are higher level than we are

00:02:23.230 --> 00:02:24.600
going to talk about today.

00:02:24.600 --> 00:02:28.700
But all of these things are available
for your applications to use.

00:02:29.510 --> 00:02:32.190
So,
what's new in the UNIX layer on Mac OS X?

00:02:32.200 --> 00:02:35.170
Well, we have native DLopen and DLSim.

00:02:35.200 --> 00:02:38.560
Historically,
Mac OS X didn't have these APIs.

00:02:38.560 --> 00:02:43.230
They were added in, and now in Leopard,
that's actually the official API you

00:02:43.230 --> 00:02:47.570
should be using when you want to
dynamically load a bundle or a library.

00:02:47.580 --> 00:02:51.260
We also have native pull in the kernel.

00:02:51.260 --> 00:02:53.330
It's no longer emulated
in terms of select.

00:02:53.390 --> 00:02:55.240
We have KQs, K events.

00:02:55.240 --> 00:02:58.140
Starting in Tiger,
we had get and set extended

00:02:58.190 --> 00:02:59.320
attributes on files.

00:02:59.500 --> 00:03:03.140
Now we have a lot more 64-bit API.

00:03:03.140 --> 00:03:06.410
In Tiger,
it was just lib system that was 64-bit,

00:03:06.460 --> 00:03:10.010
and Leopard, a lot of our open source
libraries are fully 64-bit.

00:03:11.370 --> 00:03:13.840
There's also more
integration with LaunchD,

00:03:13.840 --> 00:03:15.610
which was introduced in Tiger.

00:03:15.660 --> 00:03:19.440
To the extent now in Leopard,
there's not even a net CRC script,

00:03:19.460 --> 00:03:22.830
so there's a lot of things
that are changing in startup.

00:03:22.990 --> 00:03:25.850
And like I said earlier,
there's a lot of changes

00:03:25.960 --> 00:03:29.560
for UNIX03 behavior,
both at the command line and

00:03:29.650 --> 00:03:32.160
at the API layer in lib system.

00:03:33.420 --> 00:03:36.710
There's also a lot new at the UNIX layer
that isn't going to be covered today,

00:03:36.710 --> 00:03:39.750
but there have been other sessions
and maybe still will be about things

00:03:39.790 --> 00:03:48.140
like toll-free bridging between
scripting languages in Cocoa,

00:03:48.140 --> 00:03:48.140
Ruby on Rails,
and we updated to Apache 2.0.

00:03:49.350 --> 00:03:54.400
So to get started with Mac OS X, well,
startup's quite a bit different

00:03:54.480 --> 00:03:55.570
than other UNIX systems.

00:03:55.630 --> 00:03:57.200
There are no System 5 run levels.

00:03:57.200 --> 00:03:59.640
There's not even an ETSI RC script.

00:03:59.640 --> 00:04:04.480
We do still have ETSI RC.local
for some site-specific actions

00:04:04.480 --> 00:04:05.910
you can run at boot time.

00:04:06.030 --> 00:04:10.010
But we're really trying to move away
from the scripted idea of startup

00:04:10.010 --> 00:04:14.530
and move to a much more dynamic
on-demand way to start things,

00:04:14.530 --> 00:04:16.490
and there'll actually be
a session in this room,

00:04:16.500 --> 00:04:19.500
the next session, on LaunchD,
which would be very interesting

00:04:19.580 --> 00:04:24.860
if you're concerned with the boot
up of the system or just managing

00:04:24.860 --> 00:04:27.630
your UNIX processes in general.

00:04:29.060 --> 00:04:33.880
On Mac OS X, HFS, our file system,
is case-insensitive but case-preserving.

00:04:33.880 --> 00:04:37.180
This is a big difference
from most other UNIX systems.

00:04:37.410 --> 00:04:41.750
However, there is a case-sensitive
variation called HFSX,

00:04:41.750 --> 00:04:47.580
which you can use to format a
separate partition on your drive.

00:04:47.580 --> 00:04:49.720
Or you can even use it
as your boot partition.

00:04:49.720 --> 00:04:54.330
In the disk utility in the installer,
it's possible to select a

00:04:54.330 --> 00:04:58.050
case-sensitive file system.

00:04:58.400 --> 00:05:02.160
We have multiple forks on HFS.

00:05:02.160 --> 00:05:04.680
So there's a resource fork,
there's extended attributes.

00:05:04.680 --> 00:05:09.120
When you're copying files around,
you need to take care to preserve

00:05:09.200 --> 00:05:10.710
those in your applications.

00:05:10.720 --> 00:05:12.450
And there's an API that
will help you do that,

00:05:12.450 --> 00:05:14.220
which I'll talk about a little bit later.

00:05:15.530 --> 00:05:18.480
HFS, unfortunately,
doesn't have any sparse file support,

00:05:18.480 --> 00:05:21.720
which is something that's commonly
used on other UNIX systems.

00:05:21.720 --> 00:05:24.770
And also, starting in Leopard,
the old UNIX file system

00:05:24.770 --> 00:05:26.140
has been deprecated.

00:05:26.140 --> 00:05:29.700
So if you need the case sensitivity,
you really need to use HFSX now.

00:05:29.770 --> 00:05:31.940
It's not possible to use UFS anymore.

00:05:34.570 --> 00:05:39.410
So on Mac OS X we organize things into
the file system hierarchy that you've

00:05:39.540 --> 00:05:41.250
probably seen on other UNIX systems.

00:05:41.300 --> 00:05:49.110
We have /bin/dev/user,
but only visible in the terminal

00:05:49.210 --> 00:05:52.000
application on the command line
or when you SSH into the machine.

00:05:52.040 --> 00:05:55.390
These directories are not visible
by default when you use the finder.

00:05:55.390 --> 00:05:59.400
So this is really kind of the
UNIX support layer of the system,

00:05:59.510 --> 00:06:02.260
but we don't try to
expose this to the users.

00:06:04.350 --> 00:06:06.770
Another thing to point out is
Apple doesn't ship anything

00:06:06.770 --> 00:06:08.130
in the user local directory.

00:06:08.140 --> 00:06:12.140
So if you're an administrator,
you can use that directory for all

00:06:12.140 --> 00:06:16.320
the software you install in your
site that's custom to your machines.

00:06:16.320 --> 00:06:21.240
And of course this is all documented
in the hierarchy man page.

00:06:23.030 --> 00:06:27.470
Mac OS X has a new concept, though,
that's different from other UNIX systems,

00:06:27.480 --> 00:06:29.010
and that's a file system domains.

00:06:29.020 --> 00:06:31.460
And file system domains really
represent a search path for

00:06:31.530 --> 00:06:32.760
resources on the system.

00:06:32.760 --> 00:06:36.730
There's the user domain,
the local domain, the network domain,

00:06:36.780 --> 00:06:38.320
and the system domain.

00:06:38.320 --> 00:06:41.050
And there's an API for iterating
over these domains in the

00:06:41.050 --> 00:06:43.200
NSSystemDirectories.h header file.

00:06:43.200 --> 00:06:45.620
And really,
this is the order of preference where

00:06:45.620 --> 00:06:49.140
when the system's looking for a resource,
it'll try each of these in order

00:06:49.140 --> 00:06:53.170
and see if it can find what
the application's looking for.

00:06:54.490 --> 00:06:58.780
So the system domain is really
for Mac OS X system software.

00:06:58.810 --> 00:07:02.380
And effectively, you should treat it as
being a read-only directory.

00:07:02.690 --> 00:07:05.670
Your application shouldn't be
installing things into /system.

00:07:05.950 --> 00:07:08.840
That should be the domain of
the OS installs from either

00:07:08.840 --> 00:07:10.620
a CD or a software update.

00:07:10.710 --> 00:07:13.660
But the notable exception to this,
of course, is that kernel extensions,

00:07:13.880 --> 00:07:17.110
since they are extending the
underlying system itself,

00:07:17.110 --> 00:07:20.250
do need to go into the /system domain.

00:07:21.600 --> 00:07:23.960
The network domain is where
all of the NFS or other

00:07:23.960 --> 00:07:27.620
network shares are presented,
and it's a place where you can

00:07:27.630 --> 00:07:34.080
put site-wide configurations and
applications so that they're accessible

00:07:34.120 --> 00:07:36.410
to all the machines at a given site.

00:07:37.130 --> 00:07:42.420
The local domain is a bunch of
resources that are stored on a single

00:07:42.440 --> 00:07:47.270
computer that are visible to every
user who's logged into that computer.

00:07:47.330 --> 00:07:51.490
This is where a lot of the power
management settings for the machine go.

00:07:52.150 --> 00:07:55.770
And then finally there's the user domain,
which is the user's home directory.

00:07:55.860 --> 00:08:00.000
And the home directory can contain
all of the per user settings.

00:08:00.000 --> 00:08:02.940
And they are only available
to the current user.

00:08:03.700 --> 00:08:30.800
[Transcript missing]

00:08:31.250 --> 00:08:34.740
So what is the structure of these
individual resources that we do

00:08:34.740 --> 00:08:35.780
store in each of the domains?

00:08:35.900 --> 00:08:37.560
Well, we call them bundles.

00:08:37.560 --> 00:08:41.110
Bundles in the Finder
appear as a single icon.

00:08:41.120 --> 00:08:45.420
They're really file system directories,
though, that can contain many files.

00:08:45.440 --> 00:08:48.540
And they usually have an
extension to indicate what

00:08:48.540 --> 00:08:50.610
type of resource the bundle is.

00:08:50.620 --> 00:08:54.190
A very common one is .app,
which your applications will often have.

00:08:54.240 --> 00:08:56.580
.bundle is kind of a generic bundle.

00:08:56.580 --> 00:08:59.020
.plugin would be a code plugin.

00:08:59.230 --> 00:09:01.840
Dot framework is kind
of a shared library,

00:09:01.880 --> 00:09:04.090
dynamic library.

00:09:04.350 --> 00:09:06.670
The APIs for accessing
bundles at the UNIX layer,

00:09:06.820 --> 00:09:09.920
well, there's really nothing that
is specific toward bundles.

00:09:09.940 --> 00:09:13.670
You either need to use the
POSIX open or read or write,

00:09:13.670 --> 00:09:16.170
close, standard file I/O.

00:09:16.250 --> 00:09:21.140
And there's also the File Traversal API,
FTS, which you can use to enumerate

00:09:21.230 --> 00:09:22.880
what's inside of a bundle.

00:09:22.940 --> 00:09:25.080
But up at a higher layer,
Core Foundation and Cocoa,

00:09:25.130 --> 00:09:29.760
there are actually APIs for
manipulating bundles in terms of URLs.

00:09:29.790 --> 00:09:33.070
And they can also help you find
resources inside of a bundle.

00:09:33.210 --> 00:09:37.320
The generic structure of a bundle is
that there's a contents directory,

00:09:37.320 --> 00:09:39.300
and then under that,
there's a resources directory.

00:09:39.300 --> 00:09:43.250
And that's where things may be like
graphics or sounds or movies or other

00:09:43.260 --> 00:09:48.520
resources that you want to aggregate with
your application or with your library.

00:09:48.990 --> 00:09:51.880
So frameworks are really
dynamic libraries that are

00:09:51.880 --> 00:09:52.960
packaged up as a bundle.

00:09:52.960 --> 00:09:55.740
And this is a concept that's
pretty unique to Mac OS X.

00:09:55.740 --> 00:09:59.100
A framework will have
the dynamic library.

00:09:59.100 --> 00:10:01.260
It'll have header files that
are associated with the library.

00:10:01.260 --> 00:10:03.780
So instead of looking in user
include for header files,

00:10:03.850 --> 00:10:05.940
it'll actually be inside the framework.

00:10:05.940 --> 00:10:09.980
And there's some GCC extensions
that accommodate this.

00:10:09.980 --> 00:10:13.620
Inside your source code,
you can do pound include and then the

00:10:13.620 --> 00:10:17.720
name of a framework slash the name
of a header inside the framework.

00:10:17.720 --> 00:10:21.560
And actually, GCC knows where to find the
frameworks on the system.

00:10:21.580 --> 00:10:24.520
And it'll pick that particular
header out of the framework.

00:10:24.520 --> 00:10:26.580
So even though you won't find
this path anywhere in user

00:10:26.580 --> 00:10:29.870
include or user local include,
it'll find it in the framework path.

00:10:29.900 --> 00:10:33.730
There's a couple flags you can
use on GCC to accomplish this,

00:10:33.790 --> 00:10:37.640
the first of which is dash capital F,
which is similar to the dash

00:10:37.730 --> 00:10:41.010
capital L or dash capital
I flags in GCC on other systems.

00:10:41.010 --> 00:10:44.320
And those, of course,
change the default search path for

00:10:44.320 --> 00:10:46.820
libraries and header files on the system.

00:10:46.820 --> 00:10:49.990
Well,
dash capital F really changes both of

00:10:50.320 --> 00:10:55.250
those concurrently so that the linker
will find the dynamic library portion

00:10:55.250 --> 00:10:59.860
of the framework and the headers of
the framework at compile and link time.

00:10:59.900 --> 00:11:02.850
And then to include a specific
framework in your application,

00:11:02.860 --> 00:11:06.400
dash framework is the
option you should pass.

00:11:06.400 --> 00:11:10.480
And this is really analogous to dash
L on other systems for linking a

00:11:10.480 --> 00:11:13.020
dynamic library into your application.

00:11:15.110 --> 00:11:18.230
So there are some notable
frameworks on Mac OS X that

00:11:18.300 --> 00:11:22.730
provide a lot of the functionality
at the basic layers of the system.

00:11:22.800 --> 00:11:26.440
Some of these are directory service,
disk arbitration, I/O Kit, security,

00:11:26.440 --> 00:11:27.600
and system configuration.

00:11:27.600 --> 00:11:29.870
And I'll go into a little bit
more detail on what each of these

00:11:29.940 --> 00:11:33.910
do and why you might want to
use them in your applications.

00:11:34.670 --> 00:11:38.530
Another big difference about Mac OS X is
that we use the Maco file format.

00:11:38.540 --> 00:11:40.840
This is our executable file format.

00:11:40.840 --> 00:11:43.220
It's roughly analogous to ELF.

00:11:43.360 --> 00:11:46.180
I mean,
they're semantically pretty similar.

00:11:46.180 --> 00:11:50.510
Or, sorry, syntactically pretty similar,
but there are a few semantic

00:11:50.540 --> 00:11:52.170
differences that you should be aware of.

00:11:52.260 --> 00:11:57.060
One is Maco supports universal binaries,
and universal binaries are one

00:11:57.120 --> 00:11:58.680
file with many architectures.

00:11:58.680 --> 00:12:01.880
So it would be possible
to have a file that,

00:12:01.880 --> 00:12:06.090
say, has a PowerPC,
PowerPC 64 architectures

00:12:06.100 --> 00:12:07.660
inside of the single file.

00:12:07.660 --> 00:12:09.600
Really,
up to all four of these architectures

00:12:09.600 --> 00:12:10.820
could be in a single file.

00:12:13.010 --> 00:12:17.940
And Mac OS also has
the concept of bundles,

00:12:17.940 --> 00:12:20.490
which are distinct from libraries.

00:12:20.510 --> 00:12:23.340
And the idea behind a bundle is
that a bundle is intended to be

00:12:23.340 --> 00:12:25.320
loaded by a particular application.

00:12:25.320 --> 00:12:29.280
It's really more of a plug-in than just a
library that could be linked by anything.

00:12:29.280 --> 00:12:32.660
And what this allows
is inside your bundle,

00:12:32.660 --> 00:12:35.480
the linker can resolve up
calls into the application,

00:12:35.480 --> 00:12:38.370
since you know those symbols
will be provided at runtime.

00:12:38.570 --> 00:12:43.240
And so if you compile using GCC and
specify -bundle and -bundle-loader

00:12:43.240 --> 00:12:46.420
in the path to the application that's
responsible for loading the bundle,

00:12:46.440 --> 00:12:51.120
the linker can resolve these symbols
at link time and enforce that,

00:12:51.140 --> 00:12:53.960
yes, these will be present at runtime.

00:12:53.960 --> 00:12:56.160
Whereas a library,
since you don't know specifically

00:12:56.160 --> 00:12:59.490
who's going to be using your library,
you aren't generally

00:12:59.490 --> 00:13:01.700
allowed to make up calls.

00:13:02.130 --> 00:13:04.460
Mako also supports two-level namespaces.

00:13:04.460 --> 00:13:08.560
So in a lot of commercial applications,
plugins are written by a

00:13:08.560 --> 00:13:09.940
variety of third parties.

00:13:09.940 --> 00:13:13.080
And you don't necessarily control
the namespace of what symbols

00:13:13.080 --> 00:13:14.610
are used in each of the plugins.

00:13:14.620 --> 00:13:17.440
And you wouldn't want them
to conflict with one another.

00:13:17.450 --> 00:13:21.440
Well, the two-level namespace means that
each bundle gets its own sub-namespace

00:13:21.460 --> 00:13:22.900
and won't conflict with each other.

00:13:22.900 --> 00:13:27.760
So your third-party developers can have
a lot more flexibility in implementing

00:13:27.890 --> 00:13:30.730
plugins for your application.

00:13:32.120 --> 00:13:34.670
So going back to universal
binaries for a moment,

00:13:34.780 --> 00:13:38.260
again, the idea behind universal binaries
is you have the same set of sources

00:13:38.450 --> 00:13:40.790
that produce the same binary,
but it can run on many

00:13:40.800 --> 00:13:42.490
different architectures.

00:13:42.520 --> 00:13:46.610
And this is accomplished by
passing the -arch flag to GCC.

00:13:46.640 --> 00:13:49.200
So in this example,
we're compiling something with four

00:13:49.200 --> 00:13:54.070
different architectures-- PowerPC,
Intel, and 64-bit for each of those.

00:13:54.230 --> 00:13:57.840
Now, sometimes your code does need to
behave a little bit differently based

00:13:57.840 --> 00:13:59.640
on which architecture you're on.

00:13:59.780 --> 00:14:04.090
And the right way to deal with that is
to look for the preprocessor macros.

00:14:04.160 --> 00:14:07.650
Usually, the difference is only going
to be whether you're expecting

00:14:07.770 --> 00:14:11.360
memory to be laid out in a
big-endian or little-endian format,

00:14:11.360 --> 00:14:13.990
so defining your
C structures and whatnot.

00:14:14.130 --> 00:14:18.460
So you can test for the big-endian
or little-endian preprocessor macros,

00:14:18.460 --> 00:14:22.100
and that will help you lay out your data.

00:14:22.180 --> 00:14:24.750
Also,
if you need to know the size of pointers,

00:14:24.870 --> 00:14:28.140
you can test for the
LP64 preprocessor macro.

00:14:28.150 --> 00:14:29.640
And of course, R64.

00:14:29.680 --> 00:14:33.220
But the big-endian is 64-bit,
which means that all of the types have

00:14:33.220 --> 00:14:36.980
the same size as they historically did,
except longs and pointers

00:14:37.000 --> 00:14:38.780
are now 64 bits long.

00:14:38.820 --> 00:14:43.420
So an int is still 32 bits,
but a long is 64 bits.

00:14:43.700 --> 00:14:46.520
And then if you're doing anything
with actual assembly code and you

00:14:46.520 --> 00:14:49.560
really do need to know specifically
which architecture you're targeting,

00:14:49.560 --> 00:14:51.910
not just the general
features of the architecture,

00:14:52.050 --> 00:14:55.590
you can test for one of
these individual macros,

00:14:55.590 --> 00:15:01.770
whether it's PPC or PPC64, R386 or X8664.

00:15:03.370 --> 00:15:09.240
So another important hint is to
always use GCC as your linker driver.

00:15:09.250 --> 00:15:11.880
When you want to create a
library or an executable,

00:15:11.900 --> 00:15:15.680
really you should let GCC go ahead
and create that final result and

00:15:15.680 --> 00:15:18.360
not rely on invoking LD directly.

00:15:18.470 --> 00:15:20.920
For one reason,
there's two different linkers.

00:15:20.920 --> 00:15:23.340
There's LD and LD64,
and you don't want to have to

00:15:23.380 --> 00:15:26.240
manage which one's the right one
to use and which circumstances.

00:15:26.250 --> 00:15:30.520
And so basically,
it can lead to incorrect results

00:15:30.660 --> 00:15:33.380
if you try to do the linking
manually for universal binaries.

00:15:33.380 --> 00:15:37.090
And we really recommend
using the GCC linker driver.

00:15:38.460 --> 00:15:41.950
So the dynamic linker on
Mac OS X is known as DYLD.

00:15:42.000 --> 00:15:45.270
And as I mentioned before,
DLopen is the native API to use

00:15:45.450 --> 00:15:50.010
for dynamically loading extra
bundles into your application.

00:15:50.190 --> 00:15:54.000
DLopen compatibility was
introduced in Panther,

00:15:54.000 --> 00:15:57.010
which became native in Tiger,
and now in Leopard really

00:15:57.010 --> 00:15:58.180
is the preferred solution.

00:15:58.180 --> 00:16:02.500
So the other API for loading
in Maco bundles is deprecated,

00:16:02.500 --> 00:16:05.020
and you should be using DLopen.

00:16:05.020 --> 00:16:11.320
It's also possible to get DLopen
functionality on 10.2 using the DLopen,

00:16:11.320 --> 00:16:14.180
I'm sorry, the DLcompat library.

00:16:14.180 --> 00:16:18.360
So if your application needs to work
all the way back on older systems,

00:16:18.360 --> 00:16:21.530
you're going to have to investigate a
way to use this compatibility library.

00:16:21.540 --> 00:16:27.510
And there's some details about that
in technical Q&A article QA 1180.

00:16:30.080 --> 00:16:33.330
So I'm going to dive down into the
Mac OS X API now and talk a little

00:16:33.330 --> 00:16:36.050
bit about those frameworks that
I highlighted earlier and why you might

00:16:36.090 --> 00:16:38.700
want to use them in your applications.

00:16:40.640 --> 00:16:43.610
So there's the main
library on the system,

00:16:43.680 --> 00:16:44.980
userlib/libsystem.

00:16:44.990 --> 00:16:48.530
And that contains basically all
of the UNIX and POSIX APIs that

00:16:48.660 --> 00:16:50.800
you'd find on other systems.

00:16:50.800 --> 00:16:52.220
It's a single library.

00:16:52.220 --> 00:16:55.220
We have symlinks and userlib so
that you don't have to change all

00:16:55.220 --> 00:16:56.740
of your make files in most cases.

00:16:56.740 --> 00:17:01.260
So if you're used to link against
libm or libdl or libpthread,

00:17:01.260 --> 00:17:03.740
well, those symlinks will all
resolve into libsystem.

00:17:03.740 --> 00:17:06.270
But really, on Mac OS X,
all of those libraries are

00:17:06.300 --> 00:17:09.100
concatenated into one big library.

00:17:10.600 --> 00:17:12.300
Directory service is a framework.

00:17:12.300 --> 00:17:16.160
It's unique to Mac OS X.

00:17:16.480 --> 00:17:21.470
And it also works in combination
with some of our info APIs,

00:17:21.550 --> 00:17:24.880
getAddrInfo, getPwInt, getGrInt.

00:17:25.160 --> 00:17:29.300
So when you're looking up user group
or host information on Mac OS X,

00:17:29.540 --> 00:17:32.000
it actually communicates
behind the scenes with the

00:17:32.030 --> 00:17:36.120
Directory Service Framework to get the
information from a variety of sources,

00:17:36.120 --> 00:17:40.520
whether that's locally on the machine,
from LDAP, from Active Directory,

00:17:40.520 --> 00:17:44.640
or from Bonjour,
which means that while on other systems,

00:17:44.640 --> 00:17:47.520
a lot of times it's necessary
to maybe establish a specific

00:17:47.520 --> 00:17:51.410
connection to LDAP to get
information out of the LDAP server.

00:17:51.420 --> 00:17:53.460
On Mac OS X,
that's all handled transparently.

00:17:53.560 --> 00:17:56.170
If you do a standard group
lookup or user lookup,

00:17:56.270 --> 00:18:01.390
it'll grab the information from LDAP if
the machine's configured to use LDAP.

00:18:03.510 --> 00:18:07.270
Another big change in Leopard is that
Directory Service subsumed LookupD.

00:18:07.430 --> 00:18:11.570
So in past releases of Mac OS X,
LookupD was a daemon that handled

00:18:11.890 --> 00:18:13.980
caching all of this information.

00:18:14.210 --> 00:18:17.160
But now that's been consolidated
into Directory Service,

00:18:17.180 --> 00:18:20.390
and that one daemon handles
all of the user group and

00:18:20.390 --> 00:18:23.300
domain lookups on the system.

00:18:23.480 --> 00:18:27.860
The transition away from NetInfo
will actually be complete in Leopard.

00:18:27.860 --> 00:18:31.160
We've been moving that direction
over the past several releases,

00:18:31.160 --> 00:18:34.880
but the big push is in Leopard,
and we do not expect to have NetInfo

00:18:34.960 --> 00:18:37.140
shipping when Leopard's final.

00:18:38.400 --> 00:18:43.090
This means that NetInfoD, NICL,
and iUtil, the two utilities you use

00:18:43.090 --> 00:18:46.760
for manipulating NetInfo,
won't be found on Leopard.

00:18:46.760 --> 00:18:50.260
And so you need to migrate all
of the scripts and application

00:18:50.310 --> 00:18:54.000
usage of these commands over to
use a new command called DSCL.

00:18:54.000 --> 00:18:57.740
Now, DSCL has been present on the system,
I believe, ever since 10.3.

00:18:57.740 --> 00:19:00.200
So you do have a backward compatibility.

00:19:00.200 --> 00:19:03.740
You know, you can switch over to this
and your application will

00:19:03.770 --> 00:19:05.470
still run on older systems.

00:19:05.740 --> 00:19:10.020
But again, NICL and iUtil won't be
around when Leopard ships.

00:19:11.960 --> 00:19:17.240
There's also some alternative graphical
methods for changing the user and

00:19:17.240 --> 00:19:18.440
group information on the system.

00:19:18.440 --> 00:19:21.780
You need to enable the root user,
if that's something you want to do,

00:19:21.780 --> 00:19:25.300
in the directory utility application,
which is found in the utilities folder.

00:19:25.300 --> 00:19:31.820
Or, now you can control-click the list of
users in the accounts preference panel.

00:19:31.820 --> 00:19:34.940
And by control-clicking a user,
it'll bring up an advanced panel

00:19:34.950 --> 00:19:37.920
where you can set different
attributes like the UID of the user

00:19:37.920 --> 00:19:39.800
or the default group of the user.

00:19:40.960 --> 00:19:43.150
So the NetInfo Manager,
as you may have noticed,

00:19:43.150 --> 00:19:45.160
is no longer present in the Leopard Seed.

00:19:48.030 --> 00:19:51.500
Disk arbitration is a framework
which manages the appearance and

00:19:51.500 --> 00:19:55.490
disappearance of disks on the system,
as well as the mounting and unmounting

00:19:55.490 --> 00:19:57.500
of the logical volumes on those disks.

00:19:57.500 --> 00:20:00.670
This is important, of course,
if you're going to be

00:20:00.670 --> 00:20:02.740
dealing with external media.

00:20:02.740 --> 00:20:06.200
And also, disk arbitration can notify
your application via callbacks

00:20:06.200 --> 00:20:07.600
when these events occur.

00:20:07.600 --> 00:20:09.720
And we really do encourage
a callback model,

00:20:09.720 --> 00:20:11.830
not a polling model, for applications.

00:20:12.000 --> 00:20:16.240
So you should be using these
frameworks to register for the events,

00:20:16.280 --> 00:20:18.010
and then you'll be notified
when something of interest

00:20:18.010 --> 00:20:19.120
happens to your application.

00:20:20.960 --> 00:20:24.980
I/O Kit is our framework for dealing
with low-level device drivers.

00:20:24.980 --> 00:20:29.740
It's really a more complete view
into the hardware of the system

00:20:29.740 --> 00:20:31.390
than you can get from SlashDev.

00:20:31.400 --> 00:20:35.170
We do have a SlashDev,
which has a lot of the common devices

00:20:35.170 --> 00:20:38.690
you would see on other UNIX systems,
but it's a subset of the

00:20:38.690 --> 00:20:42.150
hardware that's available,
and I don't believe there's

00:20:42.230 --> 00:20:45.880
any way to get to some
hardware through DashDev alone.

00:20:45.880 --> 00:20:48.300
You really need to use
I/O Kit to get a complete view.

00:20:49.220 --> 00:20:51.260
And once again,
I/O Kit does offer callbacks,

00:20:51.320 --> 00:20:55.620
so you can register for notification
when devices appear and disappear on the

00:20:55.620 --> 00:20:58.660
system and deal with that interactively.

00:21:00.350 --> 00:21:05.260
The Security Framework is API for
managing authorization credentials,

00:21:05.310 --> 00:21:07.730
whether that's passwords
to your mail server,

00:21:07.830 --> 00:21:09.980
to a website,
or anything else you might need to

00:21:09.980 --> 00:21:12.970
store a password or a private key for.

00:21:12.980 --> 00:21:17.890
The Security Framework does encrypt
this information in the key chain,

00:21:17.910 --> 00:21:22.480
which means it's a safe place to
store your sensitive information.

00:21:22.520 --> 00:21:26.380
And it also has another half to it,
which is the Authorization API,

00:21:26.560 --> 00:21:29.580
which helps you decide which
users are authorized to perform

00:21:29.580 --> 00:21:31.820
which tasks on the system.

00:21:31.820 --> 00:21:33.240
And it's a rights-based system.

00:21:33.240 --> 00:21:36.670
It's something that will prompt the
user for a password if the user isn't

00:21:36.800 --> 00:21:39.560
currently authenticated with the system.

00:21:39.640 --> 00:21:41.760
And it also allows for
administrator control.

00:21:41.760 --> 00:21:45.380
It's possible to override the
default settings as to which users

00:21:45.400 --> 00:21:47.230
are allowed to perform which rights.

00:21:47.310 --> 00:21:52.760
So instead of making your application,
say, a set UID executable or kind of

00:21:53.010 --> 00:21:56.940
hard-coding privilege based on the
UID or the GID of the application,

00:21:56.960 --> 00:21:58.860
we'd really encourage you
to use the security API.

00:21:58.860 --> 00:22:02.760
Specifically,
the authorization API they're in.

00:22:02.780 --> 00:22:08.100
And go for a rights-based system that
will allow finer-grained control of

00:22:08.250 --> 00:22:12.870
what users are allowed to perform
which activities on the system.

00:22:13.870 --> 00:22:20.140
The System Configuration Framework is an
API that lets you read and set different

00:22:20.220 --> 00:22:23.920
machine-specific configuration settings,
whether that's power management

00:22:24.000 --> 00:22:29.220
settings for the machine,
or also we have network settings

00:22:29.220 --> 00:22:31.260
that are affected by this.

00:22:31.260 --> 00:22:34.940
One of the big APIs we have
is the Reachability API,

00:22:34.950 --> 00:22:39.340
and this is a high-level mechanism
for you to determine whether a certain

00:22:39.360 --> 00:22:41.110
network address is routable or not.

00:22:41.220 --> 00:22:43.900
It doesn't actually go out and
attempt to connect to the address,

00:22:43.900 --> 00:22:47.210
but it makes a best guess as to
whether it's even worth trying

00:22:47.210 --> 00:22:48.990
to connect to that machine.

00:22:49.000 --> 00:22:52.630
So it can see, for example, that, oh,
there aren't any Ethernet

00:22:52.630 --> 00:22:56.820
interfaces currently configured,
or there's no wireless available.

00:22:56.820 --> 00:23:00.680
But when one of these comes online,
you can register for a callback again

00:23:00.680 --> 00:23:04.530
and get notifications of network state
changes to decide whether you should

00:23:04.530 --> 00:23:07.660
re-evaluate your network connections,
see if there's any connections that

00:23:07.660 --> 00:23:11.200
no longer make sense to maintain,
or whether you should perhaps, you know,

00:23:11.220 --> 00:23:13.540
try to re-initiate a connection
you previously had because the

00:23:13.590 --> 00:23:14.870
network's come back online.

00:23:14.880 --> 00:23:17.700
And this is a key part of
mobility-aware applications.

00:23:17.700 --> 00:23:20.820
As I'm sure you know,
a very large percentage of the

00:23:20.820 --> 00:23:25.170
hardware that Apple sells is portable,
and portables tend to change their

00:23:25.240 --> 00:23:27.440
network environment very frequently.

00:23:27.480 --> 00:23:30.700
And so it's really great when
applications can take advantage

00:23:30.940 --> 00:23:33.890
of this to be more adaptive
of changes in the network.

00:23:36.700 --> 00:23:40.120
Another API we offer on
Mac OS X is the Notify API.

00:23:40.150 --> 00:23:43.090
And this is a simple,
lightweight notification mechanism

00:23:43.460 --> 00:23:47.180
that's really analogous to UNIX signals.

00:23:47.290 --> 00:23:50.680
It has multiple delivery
mechanisms in your code.

00:23:50.710 --> 00:23:53.980
You can either select
on a file descriptor,

00:23:54.010 --> 00:23:55.900
and when that file
descriptor becomes readable,

00:23:55.900 --> 00:24:00.310
that means you have a
notification pending.

00:24:00.370 --> 00:24:02.860
You can also receive
notifications via Mach ports,

00:24:02.860 --> 00:24:04.750
so it can tie into your run loop.

00:24:04.900 --> 00:24:08.620
UNIX signals can be used
to deliver notifications,

00:24:08.640 --> 00:24:10.780
as well as you can just
do synchronous polling,

00:24:10.780 --> 00:24:13.830
though of course we
discourage you to do that.

00:24:14.150 --> 00:24:17.600
But the notification mechanism,
basically it's a named string.

00:24:17.600 --> 00:24:19.140
That's the notification.

00:24:19.160 --> 00:24:21.800
And if multiple
notifications are received,

00:24:21.820 --> 00:24:25.640
they all get consolidated
into one event that's raised,

00:24:25.650 --> 00:24:27.860
the same way that a
UNIX signal would behave.

00:24:27.910 --> 00:24:30.640
But there's a much larger
namespace with notifications

00:24:30.640 --> 00:24:32.020
than there are with UNIX signals.

00:24:32.020 --> 00:24:34.610
So this is why it's our
preferred mechanism for sending

00:24:34.810 --> 00:24:36.720
information between processes.

00:24:36.720 --> 00:24:40.060
So instead of sending a
SIGTERM or a SIG-- well,

00:24:40.060 --> 00:24:41.570
I guess a SIGHUP is what I meant to say.

00:24:41.600 --> 00:24:44.540
Instead of sending a SIGHUP to
an application to let it know to

00:24:44.540 --> 00:24:48.520
reload its configuration files,
we'd really rather send a

00:24:48.520 --> 00:24:52.860
specific notification that meant
reload your configuration files,

00:24:52.860 --> 00:24:56.830
instead of overloading the
terminology of what a SIGHUP means.

00:24:56.960 --> 00:24:59.940
So you can see information
about Notify in the notify.h

00:24:59.940 --> 00:25:02.290
header file in user include.

00:25:03.670 --> 00:25:07.320
Another new API which we've made
public for Leopard is Copyfile.

00:25:07.500 --> 00:25:11.280
And Copyfile is an API that lets
you deal with extended attributes.

00:25:11.330 --> 00:25:14.840
It will automatically
create Apple double files.

00:25:14.840 --> 00:25:18.820
Apple double files, I'm sure you've seen,
are the dot underbar files that contain

00:25:18.820 --> 00:25:23.670
resource fork and extended attribute
information on file systems which do not

00:25:23.810 --> 00:25:28.490
support extended attributes natively.

00:25:28.610 --> 00:25:32.040
So, for example,
if you have a sample JPEG that you've

00:25:32.040 --> 00:25:34.830
written an EA to and copy it over to,
say,

00:25:34.840 --> 00:25:39.360
an NFS volume that's backed by something
that doesn't support extended attributes,

00:25:39.380 --> 00:25:42.200
you'll see a dot
underbar sample dot JPEG.

00:25:42.280 --> 00:25:45.170
Well, Copyfile takes care of all the
details of splitting the single

00:25:45.270 --> 00:25:46.660
file into two different files.

00:25:46.740 --> 00:25:49.820
And it'll also take care of all
the details of taking those two

00:25:49.930 --> 00:25:53.590
files and reconsolidating them
into a single file when you copy

00:25:53.810 --> 00:25:55.900
back to a file system like HFS.

00:25:55.960 --> 00:25:58.500
And this is what we use by CP, MV,
and HFS.

00:25:58.710 --> 00:26:14.630
And you should look in user include
copyfile.h for details on using this API.

00:26:15.900 --> 00:26:18.060
Another thing I wanted to
mention is for a while now

00:26:18.060 --> 00:26:20.560
we've supported X11 on Mac OS X.

00:26:20.560 --> 00:26:23.490
Probably the most important
thing to keep in mind is that

00:26:23.570 --> 00:26:25.060
this is an optional install.

00:26:25.060 --> 00:26:29.260
Not all Mac OS X installations
will have X11,

00:26:29.260 --> 00:26:33.400
so it's something you really should
be testing for in your application

00:26:33.400 --> 00:26:37.010
so you can gracefully handle
whether or not X11 is present.

00:26:39.580 --> 00:26:41.200
Now I'm going to talk a
little bit about Xcode,

00:26:41.200 --> 00:26:44.570
which is our developer tools.

00:26:44.620 --> 00:26:46.480
Xcode is also an optional install.

00:26:46.510 --> 00:26:49.880
So not every Mac OS X system
out there has a C compiler,

00:26:49.940 --> 00:26:51.960
which is quite a bit different
than most other UNIXes.

00:26:51.960 --> 00:26:55.120
Usually you can assume that there
will be a C compiler on the system,

00:26:55.180 --> 00:26:58.760
but on Mac OS X this isn't
necessarily the case.

00:26:58.930 --> 00:27:02.250
Xcode is based largely
on the GNU tool chain.

00:27:02.270 --> 00:27:06.130
There's a lot of common utilities
that you'll see elsewhere-- GCC,

00:27:06.130 --> 00:27:09.490
GDB, Make, GLIB Tool, AutoConf, Automake.

00:27:09.500 --> 00:27:14.000
And there's a very large list,
and it's fairly standard stuff.

00:27:14.600 --> 00:27:17.690
But there are some differences about
how we develop our software and how we'd

00:27:17.760 --> 00:27:20.600
like you to develop software on Mac OS X.

00:27:20.640 --> 00:27:22.560
The main difference is SDKs.

00:27:22.560 --> 00:27:27.180
SDKs are a collection of headers and
libraries for a particular release,

00:27:27.240 --> 00:27:31.320
and they're all bundled
up in an SDK directory.

00:27:31.320 --> 00:27:33.560
And you can have several
SDKs installed on the system.

00:27:33.570 --> 00:27:37.350
And by selecting a particular
SDK to compile against,

00:27:37.360 --> 00:27:43.870
you're indicating which features
of the operating system the

00:27:43.870 --> 00:27:44.800
software should be using.

00:27:44.800 --> 00:27:48.120
So for example,
you may be running on a Leopard system,

00:27:48.120 --> 00:27:50.980
but you want your
software to work on Tiger.

00:27:50.980 --> 00:27:56.000
Well, you'd need to use the
Mac OS 10.4 SDK to do that.

00:27:56.890 --> 00:27:59.580
SDKs are also necessary
for universal binaries.

00:27:59.600 --> 00:28:03.510
I'm sure you've seen a lot of
literature on universal binaries.

00:28:03.520 --> 00:28:09.830
Well, most PowerPC systems out there,
they don't have any Intel architectures

00:28:09.830 --> 00:28:13.050
in the dynamic libraries,
so linking will fail unless

00:28:13.050 --> 00:28:15.970
you're actually using the
SDK to compile your application.

00:28:15.980 --> 00:28:20.600
SDKs are accomplished by some
GCC and Linker extensions.

00:28:21.600 --> 00:28:27.530
The first extension is --i sysroot,
which sets the SDK root,

00:28:27.590 --> 00:28:30.630
and basically whenever a
header file is looked up or a

00:28:30.630 --> 00:28:34.090
dynamic library is looked for,
this path is prepended to

00:28:34.090 --> 00:28:38.480
the paths that are opened,
and so you're really limiting your

00:28:38.480 --> 00:28:41.560
search to the Mac OS SDK that was chosen.

00:28:41.560 --> 00:28:48.140
And there's also a similar Linker flag,
the --syslibroot flag,

00:28:48.140 --> 00:28:51.910
which again tells the Linker that
it should only be looking for

00:28:51.910 --> 00:28:54.910
libraries inside of this SDK.

00:28:56.520 --> 00:29:00.020
Something very closely related
to SDKs is deployment targets.

00:29:00.020 --> 00:29:03.410
And deployment targets let you declare
what your target environment is.

00:29:03.680 --> 00:29:07.760
So for example,
you can declare that the minimum

00:29:07.760 --> 00:29:11.160
version of Mac OS X that you would
like this application to run on is,

00:29:11.160 --> 00:29:13.320
say, Mac OS 10.4.

00:29:13.390 --> 00:29:15.500
And this will provide some
temporal scoping of the

00:29:15.500 --> 00:29:17.080
symbols in the header files.

00:29:17.210 --> 00:29:21.870
So functions which have not yet been
declared in 10.4-- maybe they're new

00:29:21.870 --> 00:29:27.030
in 10.5-- they won't appear in the
header files when you specify this flag.

00:29:27.060 --> 00:29:30.310
On the other hand,
if something that was used in

00:29:30.350 --> 00:29:35.850
10.2 and was used in 10.3 and
has now been deprecated in 10.4,

00:29:36.020 --> 00:29:39.440
since you're setting your
minimum version to a system

00:29:39.450 --> 00:29:41.740
that has the deprecated symbols,
it'll actually give

00:29:41.740 --> 00:29:43.480
you a warning and say,
you really shouldn't be

00:29:43.480 --> 00:29:44.980
using these symbols anymore.

00:29:45.100 --> 00:29:48.390
You should use this new API that we have.

00:29:48.430 --> 00:29:51.950
Those are really legacy interfaces.

00:29:52.160 --> 00:29:56.050
And this used to be done by
setting the Mac OS X deployment

00:29:56.110 --> 00:29:59.620
target environment variable,
but now you should be using this

00:29:59.730 --> 00:30:04.760
-m macosx-version-min GCC argument.

00:30:04.800 --> 00:30:08.860
But they both really
have the same net result.

00:30:08.900 --> 00:30:11.620
And you can look in the availability
macros header file to see what all

00:30:11.620 --> 00:30:15.360
the different preprocessor macros
are for warning you about deprecated

00:30:15.360 --> 00:30:19.500
interfaces or scoping interfaces
that haven't been defined yet in that

00:30:19.570 --> 00:30:20.930
particular version of the system.

00:30:24.420 --> 00:30:31.020
So GCC has also changed in
Tiger and in Leopard now.

00:30:31.220 --> 00:30:34.180
GCC 4 is used more predominantly.

00:30:34.180 --> 00:30:37.640
And GCC 4 has support
for 128-bit long doubles.

00:30:37.760 --> 00:30:42.770
In earlier versions of GCC,
long doubles were only 64-bit.

00:30:42.820 --> 00:30:48.390
And since a lot of standard I/O and other
lib system interfaces used long doubles,

00:30:48.430 --> 00:30:51.980
we had to pull some tricks to maintain
compatibility with older applications,

00:30:51.980 --> 00:30:55.750
which were compiled with 64-bit long
double support and new applications

00:30:55.870 --> 00:31:00.130
compiled with GCC 4 that have
128-bit long double support.

00:31:00.320 --> 00:31:04.810
And the system and compiler decides
which of these to choose based on

00:31:04.810 --> 00:31:08.710
that Mac OS X deployment target that
I was talking about a moment ago.

00:31:08.830 --> 00:31:13.340
So if your deployment target is greater
than 10.4 and you're using GCC4,

00:31:13.340 --> 00:31:17.250
then functions with long double
arguments will get suffixed

00:31:17.260 --> 00:31:21.080
with $LDBL128 behind the scenes.

00:31:21.080 --> 00:31:22.860
You don't need to do
it in your source code,

00:31:22.860 --> 00:31:23.830
but it happens.

00:31:23.860 --> 00:31:27.810
And if you were to do a dump of
all the symbols in your executable,

00:31:27.810 --> 00:31:29.800
you'd actually see this.

00:31:30.070 --> 00:31:34.000
Now what this means is applications
compiled in this way won't work

00:31:34.000 --> 00:31:35.540
on earlier versions of Mac OS X.

00:31:35.540 --> 00:31:37.570
Like,
you wouldn't really be able to run this,

00:31:37.570 --> 00:31:39.660
say, on Jaguar.

00:31:40.000 --> 00:31:45.910
However, when the deployment target
is set to below 10.4 on

00:31:46.050 --> 00:31:51.220
applications compiled with GCC4,
then it's set to $LONG-DOUBLE-STUB,

00:31:51.280 --> 00:31:53.920
and that causes some
magic to get invoked,

00:31:54.010 --> 00:31:58.640
and this actually gives you
compatibility back toward Mac OS 10.3.9,

00:31:58.640 --> 00:32:00.650
but I don't think it'll
work on any earlier systems.

00:32:00.660 --> 00:32:03.120
So really,
if you're compiling using GCC4,

00:32:03.120 --> 00:32:05.880
you should be targeting 10.3.9 or later.

00:32:05.880 --> 00:32:12.200
And also, in this case,
the GCC linker driver will implicitly

00:32:12.200 --> 00:32:15.830
link in the system stub's static archive,
which has the magic for

00:32:16.000 --> 00:32:18.760
that LONG-DOUBLE-STUB,
which is another reason why you should

00:32:18.760 --> 00:32:22.250
be using the GCC linker drivers,
because a lot of times the GCC linker

00:32:22.300 --> 00:32:25.340
driver has some smarts like this
in it that wouldn't be immediately

00:32:25.340 --> 00:32:28.400
obvious if you were to try to link
object files together yourself.

00:32:31.040 --> 00:32:35.520
So, I'd like to take the rest of the
time of the talk to talk about what

00:32:35.520 --> 00:32:40.310
we've changed to support UNIX 03
in the UNIX layer of Mac OS X.

00:32:43.680 --> 00:32:48.360
We are more standards compliant than
we had been in previous releases,

00:32:48.410 --> 00:32:53.320
which hopefully will make it easier for
you to port UNIX software to Mac OS X.

00:32:53.580 --> 00:32:56.880
However, this did have some impact on
source and binary compatibility,

00:32:56.890 --> 00:33:00.280
and I'll talk about how we addressed
this impact and what you need to

00:33:00.280 --> 00:33:02.860
look out for in your applications.

00:33:03.390 --> 00:33:06.650
First,
a brief discussion of the commands.

00:33:06.860 --> 00:33:10.000
Some of the command line tools
have changed their arguments and

00:33:10.000 --> 00:33:15.650
how they behave based on what's
required by the UNIX03 specification.

00:33:16.160 --> 00:33:19.630
UNIX03 behavior is the
default in Leopard,

00:33:19.630 --> 00:33:22.000
but the prior behavior was
kept when it didn't conflict.

00:33:22.120 --> 00:33:24.440
So a great example of
this is the PS command.

00:33:24.440 --> 00:33:29.050
The UNIX03 standard only dictates
what happens when PS is invoked with a

00:33:29.050 --> 00:33:31.060
dash before the rest of its arguments.

00:33:31.100 --> 00:33:37.930
So in that case, if you do, say, -u,
that has the UNIX03 behavior,

00:33:38.350 --> 00:33:41.100
whereas if you were relying on
the old BSD behavior before,

00:33:41.100 --> 00:33:44.930
if you omit the dash,
it continues to do the BSD behavior

00:33:44.930 --> 00:33:47.970
if you just were to do,
say, PSu.

00:33:48.490 --> 00:33:54.070
You can also disable the UNIX03
behavior by setting a command

00:33:54.070 --> 00:33:56.000
mode environment variable.

00:33:56.000 --> 00:33:59.900
The command mode is unset,
but the default is equivalent

00:33:59.900 --> 00:34:02.440
to being set to UNIX 2003.

00:34:02.740 --> 00:34:05.370
However, if you were to set the
command mode to legacy,

00:34:05.390 --> 00:34:11.000
then it will hopefully disable all of the
new changes in the command line tools,

00:34:11.000 --> 00:34:13.160
and the command line tools will
continue to parse their arguments

00:34:13.200 --> 00:34:17.190
like they did on Tiger and on
earlier versions of the system.

00:34:18.450 --> 00:34:22.480
For source compatibility,
there's a global flag,

00:34:22.580 --> 00:34:26.130
this Darwin UNIX03 preprocessor macro.

00:34:26.170 --> 00:34:28.470
And this flag is on by
default for Leopard.

00:34:28.550 --> 00:34:31.020
So if you're compiling
your software for Leopard,

00:34:31.250 --> 00:34:35.290
you will get the interfaces
that are UNIX03 compliant.

00:34:36.030 --> 00:34:40.240
I should point out that the 64-bit
libraries on Leopard have this

00:34:40.240 --> 00:34:42.040
flag on implicitly by default.

00:34:42.180 --> 00:34:46.790
There is no legacy non-UNIX03

00:34:47.200 --> 00:35:08.000
[Transcript missing]

00:35:08.330 --> 00:35:11.360
However,
in order to maintain compatibility

00:35:11.470 --> 00:35:13.960
for your applications that you
might be building on Leopard but

00:35:14.090 --> 00:35:17.750
want to deploy on Tiger or Panther,
we will have this off by

00:35:17.750 --> 00:35:23.610
default if you're either using,
say, the 10.4 SDK or the 10.3 SDK.

00:35:23.720 --> 00:35:28.570
Or if you've set the Mac OS X deployment
target to one of those earlier versions,

00:35:28.570 --> 00:35:33.880
it will disable the Darwin UNIX 03 macro,
and you'll get the legacy behavior.

00:35:34.530 --> 00:35:37.210
And if you're looking for what
this macro actually does and

00:35:37.300 --> 00:35:42.520
where it's defined and tested for,
that's in the sys.cdefs.h header file.

00:35:44.480 --> 00:35:51.240
So it's also important to notice that
we're doing the same type of trick.

00:35:51.310 --> 00:35:54.720
We're doing the $UNIX2003
at the end of a symbol,

00:35:54.720 --> 00:35:58.000
which is put there by a preprocessor
macro in the header files.

00:35:58.000 --> 00:36:03.000
What this means is implicit declarations
of functions do not get this suffix.

00:36:03.000 --> 00:36:07.140
And if you are relying on an
implicit declaration of a function,

00:36:07.140 --> 00:36:11.520
you might end up using the legacy
version of the function unintentionally

00:36:11.520 --> 00:36:15.930
and mix and match legacy and
non-legacy functions in your code.

00:36:15.940 --> 00:36:18.390
So it's very important that
you do include all the header

00:36:18.490 --> 00:36:23.400
files that are needed to declare
the various APIs that you use.

00:36:23.400 --> 00:36:27.660
And the best way to accomplish this
is to warn on missing prototypes.

00:36:27.760 --> 00:36:30.210
So there's some GCC commands
that I've listed,

00:36:30.220 --> 00:36:34.920
"-w all "-w missing prototypes".
And if you use those when

00:36:35.010 --> 00:36:37.920
compiling this example,
it will warn you that there is an

00:36:37.950 --> 00:36:41.000
implicit declaration of some commands.

00:36:41.520 --> 00:36:45.280
And say, of some functions,
putenv and getenv.

00:36:45.280 --> 00:36:48.700
And the right thing to do is include the
header file which these are found in.

00:36:48.700 --> 00:36:53.710
I believe in this case,
that would be the unistd.h header file.

00:36:53.760 --> 00:36:59.300
And then you will get the right
suffixing through the preprocessor logic.

00:37:01.150 --> 00:37:06.950
So it's also possible to
opt out of Darwin UNIX 03.

00:37:07.310 --> 00:37:11.720
When you're compiling on Leopard,
so you have a 10.5 deployment target,

00:37:11.720 --> 00:37:14.340
and you also define this
non-standard source macro,

00:37:14.340 --> 00:37:19.520
it'll actually opt you out
of the UNIX 03 behavior.

00:37:19.520 --> 00:37:22.360
However, non-standard source is
not available on 64-bit,

00:37:22.360 --> 00:37:24.690
because like I said,
64-bit has been UNIX 03

00:37:24.690 --> 00:37:26.980
since the beginning,
so there's no way to

00:37:26.980 --> 00:37:28.640
disable that behavior.

00:37:28.640 --> 00:37:30.110
That's the only behavior
that's available.

00:37:32.420 --> 00:37:34.800
As far as binary
compatibility is concerned,

00:37:35.000 --> 00:37:38.300
all applications compiled before
Leopard should remain unaffected

00:37:38.300 --> 00:37:41.390
because they don't have any of these
new symbols that are being used by them.

00:37:41.420 --> 00:37:44.990
All the functions that had
changed in behavior were suffixed

00:37:44.990 --> 00:37:47.440
with $UNIX2003 internally.

00:37:47.440 --> 00:37:51.680
And what this means is that an
application compiled on Leopard

00:37:51.700 --> 00:37:56.800
that's run on Tiger might be using
some of these Darwin UNIX2003 symbols,

00:37:56.800 --> 00:37:59.730
which aren't defined on
earlier versions of Mac OS X.

00:37:59.740 --> 00:38:01.870
So it's not likely to run.

00:38:01.990 --> 00:38:05.220
In this example here,
I'm trying to run an application

00:38:05.220 --> 00:38:08.640
that was compiled on Leopard
back on a Panther machine,

00:38:08.640 --> 00:38:11.540
and you'll see there's a
reference to an undefined symbol.

00:38:11.540 --> 00:38:15.650
In this case,
it couldn't find the UNIX2003

00:38:15.650 --> 00:38:18.400
version of the set env variable.

00:38:18.400 --> 00:38:22.370
So this really makes it important to be
accurate in which Mac OS X deployment

00:38:22.370 --> 00:38:24.220
target and which SDKs you use.

00:38:24.220 --> 00:38:27.430
If you want your software to run
on earlier versions of Mac OS X,

00:38:27.430 --> 00:38:31.360
you really need to be explicit about
declaring that during compile time.

00:38:33.980 --> 00:38:35.520
So what are these
changes that we've made?

00:38:35.520 --> 00:38:37.410
Why did we have to suffix the functions?

00:38:37.420 --> 00:38:41.730
Well, one of the main changes is
that the error nodes change.

00:38:41.780 --> 00:38:46.970
Things that historically succeeded
might now start returning errors,

00:38:47.340 --> 00:38:50.980
because the UNIX03 standard is a little
bit more strict about what arguments

00:38:51.060 --> 00:38:53.360
different functions can accept.

00:38:53.360 --> 00:38:55.750
And you'll see some of the
stricter argument validation in

00:38:55.810 --> 00:39:01.930
functions like mmap and select,
sigpause, setRlimit, and unsetenv.

00:39:02.410 --> 00:39:06.650
It's also important to note that
the eop_not_sup and e_not_sup

00:39:06.700 --> 00:39:09.200
erinos are now distinct values.

00:39:09.260 --> 00:39:13.320
So eop_not_sup really
pertains to socket operations,

00:39:13.380 --> 00:39:17.980
whereas e_not_sup is the more generic,
not supported erino.

00:39:17.980 --> 00:39:20.990
In the past, we had those defined to
the same numeric value.

00:39:21.000 --> 00:39:22.680
Now they're two distinct values.

00:39:22.860 --> 00:39:26.960
And so most often,
you will need to change any occurrences

00:39:26.960 --> 00:39:32.300
of eop_not_sup to e_not_sup in order
to test for that error condition.

00:39:34.650 --> 00:39:38.600
Some of the other changes
include that fputs now returns

00:39:38.670 --> 00:39:42.180
the number of characters
successfully written on success.

00:39:42.260 --> 00:39:44.410
In the past, it had only returned zero.

00:39:44.630 --> 00:39:47.610
Now it returns what characters
were actually written,

00:39:47.750 --> 00:39:51.350
which means sometimes code that
was testing for zero will think

00:39:51.420 --> 00:39:53.880
that the call failed when,
in fact, it really did succeed.

00:39:53.900 --> 00:39:57.150
However,
in both the legacy and the new behavior,

00:39:57.270 --> 00:39:58.820
they'll return negative one on error.

00:39:58.840 --> 00:40:01.610
So really,
the correct thing to do is to test

00:40:01.610 --> 00:40:03.780
for negative one as the result.

00:40:04.950 --> 00:40:09.330
Another big change is that open
will now change the controlling

00:40:09.340 --> 00:40:12.960
terminal of a process if you open a
device which is a terminal device.

00:40:12.960 --> 00:40:17.280
And you can disable this by
passing the additional O underbar

00:40:17.280 --> 00:40:21.520
no CTTY flag to open to say no,
do not change the controlling terminal

00:40:21.570 --> 00:40:23.440
when opening a terminal device.

00:40:25.250 --> 00:40:29.120
Another change we noticed that affected
a lot of programs was that putenv

00:40:29.240 --> 00:40:31.710
no longer copies its input buffer.

00:40:31.940 --> 00:40:34.010
This means that when you
pass a pointer to putenv,

00:40:34.010 --> 00:40:36.020
it just puts that pointer
directly in the environment.

00:40:36.020 --> 00:40:39.440
And if you ever subsequently
free or change that string,

00:40:39.440 --> 00:40:41.420
it's going to change
it in the environment,

00:40:41.420 --> 00:40:45.580
or it'll make the pointer
invalid if you free it.

00:40:45.770 --> 00:40:48.680
This is actually consistent with
the behavior that's found on Linux.

00:40:48.680 --> 00:40:50.940
So if you're porting
Linux applications to Mac OS X,

00:40:50.940 --> 00:40:54.120
you shouldn't run into any problems here,
because that's how that's behaved.

00:40:54.350 --> 00:40:57.760
But BSD systems historically
made a copy of the input buffer.

00:40:57.880 --> 00:41:02.280
So you're going to need to either use
setenv if that's the behavior you want,

00:41:02.340 --> 00:41:07.210
or make sure to manage
your buffers differently.

00:41:07.300 --> 00:41:09.080
unsetenv changed as well.

00:41:09.080 --> 00:41:14.030
It no longer parses the input string
looking for an embedded equals sign.

00:41:14.220 --> 00:41:16.860
So if you have an equals
sign in your string now,

00:41:16.860 --> 00:41:20.610
it actually interprets that as literally
part of the environment variable name,

00:41:20.610 --> 00:41:23.080
and will look for that
environment variable.

00:41:24.560 --> 00:41:25.750
The M-map changed.

00:41:25.880 --> 00:41:32.170
The flags parameter now must specify
either map private or map shared.

00:41:32.290 --> 00:41:34.760
Previously,
we allowed those to be omitted,

00:41:34.940 --> 00:41:38.430
but you really must decide
between one or the other and

00:41:38.430 --> 00:41:41.090
make sure that flag is specified.

00:41:41.160 --> 00:41:47.580
The size of the region you're
M-mapping must not be 0,

00:41:47.610 --> 00:41:52.280
and the offset needs to be a multiple
of the page size of the system.

00:41:52.280 --> 00:41:54.590
And luckily,
there's an easy call you can make,

00:41:54.640 --> 00:41:58.530
the sysconf with sc page size as a
constant will return the page size.

00:41:58.540 --> 00:42:02.060
You need to make sure your
offsets are a multiple of that.

00:42:03.130 --> 00:42:04.750
SigPause changed.

00:42:04.770 --> 00:42:08.040
SigPause now takes a signal value,
not a signal mask.

00:42:08.040 --> 00:42:11.010
And this is a little bit of a tricky one,
because sometimes you won't

00:42:11.060 --> 00:42:14.480
notice a problem until runtime,
and sometimes not even then,

00:42:14.480 --> 00:42:17.680
depending on what values
you're passing in.

00:42:17.750 --> 00:42:21.710
But if you want to work with masks,
you really should be

00:42:21.710 --> 00:42:24.950
using the SigSuspend API,
not SigPause.

00:42:25.330 --> 00:42:29.890
Select now limits the number of file
descriptors that you can be waiting for.

00:42:29.920 --> 00:42:34.090
They must not be greater
than the FD set size.

00:42:34.750 --> 00:42:38.080
So you either need to use
a smaller number of file

00:42:38.080 --> 00:42:41.040
descriptors when passing the,
you know, sorry.

00:42:41.040 --> 00:42:42.950
You need to use a smaller
number of file descriptors on

00:42:42.950 --> 00:42:46.230
the first argument of SELECT,
or you can define the Darwin Unlimited

00:42:46.290 --> 00:42:49.410
SELECT preprocessor macro,
which will allow the

00:42:49.410 --> 00:42:51.850
historic SELECT behavior.

00:42:52.540 --> 00:42:57.620
Set RLimit no longer accepts some of
the values that it historically did.

00:42:57.620 --> 00:43:03.460
For example, the number of files can no
longer be set to RLim infinity.

00:43:03.460 --> 00:43:05.960
You need to now set it
to a specific value.

00:43:05.960 --> 00:43:11.270
We'd recommend the minimum value of
either the OpenMax constant or the

00:43:11.270 --> 00:43:14.440
RLimMax value that you currently have.

00:43:17.800 --> 00:43:20.760
Set P group no longer
takes any arguments,

00:43:20.780 --> 00:43:23.170
so you should use set PG ID instead.

00:43:23.400 --> 00:43:25.950
And this is, again,
a thing that we would catch

00:43:25.950 --> 00:43:28.600
very easily if you are including
the proper header file.

00:43:28.600 --> 00:43:30.400
You'll see the prototypes mismatch.

00:43:30.400 --> 00:43:32.720
But if you're relying on
an implicit declaration,

00:43:32.750 --> 00:43:35.560
the compiler probably won't
warn you about this change.

00:43:35.560 --> 00:43:39.220
And it would probably go unnoticed
because there would be some

00:43:39.290 --> 00:43:42.520
extra arguments for the function,
but it wouldn't pay

00:43:42.520 --> 00:43:46.280
attention to them and then,
of course, wouldn't behave as you

00:43:46.280 --> 00:43:46.590
would expect it to.

00:43:47.710 --> 00:43:50.850
There are some structure
changes to data structures.

00:43:50.940 --> 00:43:54.370
Most notably,
the ucontext structure is now opaque.

00:43:54.380 --> 00:43:57.160
So you should use the
ucontext_t structure,

00:43:57.290 --> 00:44:00.680
which is defined in sys/ucontext.h.

00:44:00.730 --> 00:44:05.700
And the IPC perm structure has
some members which were renamed.

00:44:05.700 --> 00:44:11.870
So if you see compile time errors about
fields not existing in a structure,

00:44:11.870 --> 00:44:15.500
it's likely related to
one of these two changes.

00:44:16.200 --> 00:44:19.040
There are also some namespace conflicts.

00:44:19.120 --> 00:44:25.610
We've changed things like port T and
port NULL to be prefixed with Mach.

00:44:25.700 --> 00:44:28.940
So if you're working with Mach ports,
you're going to want to call it Mach port

00:44:29.010 --> 00:44:32.070
T or Mach port NULL as your constant.

00:44:33.400 --> 00:44:37.240
Now we've documented these
changes and we're continuing

00:44:37.240 --> 00:44:40.960
to enhance our documentation,
so I encourage you if you've run into any

00:44:41.010 --> 00:44:45.060
sort of compile time errors or runtime
errors that you weren't seeing before to

00:44:45.060 --> 00:44:46.920
check out the man page for that function.

00:44:46.920 --> 00:44:52.640
And in all cases we want to have
both the prototype of the new UNIX 03

00:44:52.640 --> 00:44:57.750
conforming function and the legacy
function that you would find on historic

00:44:57.790 --> 00:45:01.480
versions of Mac OS X in the man page.

00:45:01.480 --> 00:45:04.230
So you can compare, see what's changed,
see what you need to do in

00:45:04.230 --> 00:45:06.350
your program to adapt to that.

00:45:06.380 --> 00:45:09.890
Again, if you're getting error no's
that you didn't use to get,

00:45:10.100 --> 00:45:12.310
please check the man page,
see if there's an additional

00:45:12.320 --> 00:45:16.040
restriction on some of the arguments
that you're passing into the function.

00:45:16.110 --> 00:45:19.710
And when the changes were
relatively significant,

00:45:19.710 --> 00:45:24.010
we're going to add in legacy
sections to the man page to discuss

00:45:24.180 --> 00:45:26.510
in depth what the changes were.

00:45:27.050 --> 00:45:31.140
So for more information,
you can always contact Ernie,

00:45:31.140 --> 00:45:34.220
our product marketing contact.

00:45:34.220 --> 00:45:38.610
And we also have a lot of notes
that are available linked to

00:45:38.610 --> 00:45:43.050
this session on the ADC website,
so you can download some information

00:45:43.050 --> 00:45:46.320
there that details some of the changes
that I've described in this session.

00:45:46.320 --> 00:45:50.260
And we'll be keeping these notes
up to date as we run across more

00:45:50.320 --> 00:45:53.130
issues in the development of Leopard.