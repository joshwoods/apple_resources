WEBVTT

00:00:10.390 --> 00:00:12.180
Hello everybody and
welcome to session 216.

00:00:12.250 --> 00:00:15.610
I'm Nick Burns as the
voice of God just said.

00:00:17.280 --> 00:00:20.080
I work on GLSL and the
OpenGL team at Apple.

00:00:20.080 --> 00:00:22.180
It's really fun, really exciting.

00:00:22.260 --> 00:00:25.440
I hope you guys can learn
something from it today.

00:00:25.570 --> 00:00:29.580
So, before we get started,
the next slide that I'm going to

00:00:29.580 --> 00:00:31.860
show you is a GLSL vertex shader.

00:00:31.860 --> 00:00:33.750
We're going to delve right into it.

00:00:33.890 --> 00:00:36.140
Now, a lot of you may not
understand this at first,

00:00:36.270 --> 00:00:38.940
but I hope after this session,
you will understand what's going on.

00:00:38.960 --> 00:00:42.080
So, bam!

00:00:42.400 --> 00:00:46.700
Here is a rather simple
GLSL vertex shader.

00:00:47.360 --> 00:00:50.700
For those who are not familiar with GLSL,
you may not understand

00:00:50.700 --> 00:00:53.850
what the words attribute,
uniform and varying mean.

00:00:53.960 --> 00:00:59.120
Well, those are just qualifiers that
qualify the vertex B variable,

00:00:59.120 --> 00:01:00.460
weight, text score.

00:01:00.460 --> 00:01:01.700
I didn't name these variables.

00:01:01.730 --> 00:01:04.450
Somebody else did.

00:01:04.450 --> 00:01:04.450
Anyway.

00:01:04.790 --> 00:01:07.010
So hopefully at the end of this session,
beginners will understand

00:01:07.130 --> 00:01:08.690
this a little bit more.

00:01:08.740 --> 00:01:11.350
Anyway, let's go on.

00:01:12.690 --> 00:01:17.910
So, many of you are probably
wondering what GLSL is.

00:01:18.030 --> 00:01:20.950
So, for a very simple,
quick introduction,

00:01:20.950 --> 00:01:24.900
GLSL allows you to program the GPU to
replace certain parts of the pipeline

00:01:24.900 --> 00:01:28.440
that I will show you later and
actually put your own control in there.

00:01:28.640 --> 00:01:32.150
So you can do your own operations
instead of the fixed function TCL and

00:01:32.150 --> 00:01:36.290
fixed function fragment processing,
you can do pretty much whatever you want,

00:01:36.350 --> 00:01:37.700
experiment, have fun.

00:01:37.700 --> 00:01:41.020
We'll talk about this a little
bit more and show you some demos.

00:01:41.020 --> 00:01:41.710
Just to get you started,

00:01:42.530 --> 00:01:47.240
So GLSL is the path forward for OpenGL.

00:01:47.320 --> 00:01:52.910
OpenGL ES 2.0 is very shader-centric.

00:01:52.910 --> 00:01:55.380
So why don't we go on and
see what it's all about.

00:01:55.390 --> 00:01:58.370
Maybe it's cool, maybe it's not.

00:01:58.370 --> 00:01:58.370
We'll see.

00:01:59.370 --> 00:02:00.960
Hopefully, hopefully cool.

00:02:01.010 --> 00:02:03.460
So what you'll learn,
what I hope you'll learn in this session,

00:02:03.690 --> 00:02:06.620
for the beginners among us,
I hope you'll start to

00:02:06.690 --> 00:02:08.310
understand what GLSL is.

00:02:08.630 --> 00:02:16.620
I'll give you a quick introduction
and I'll point you to some references

00:02:16.690 --> 00:02:17.790
and some examples that we have that
are already on the seed and they've

00:02:17.790 --> 00:02:17.790
been out there since Xcode 2.3.

00:02:18.830 --> 00:02:21.590
I will give you some hints
for working with hardware.

00:02:21.710 --> 00:02:23.220
Hardware is fun to work with.

00:02:23.270 --> 00:02:24.360
Think of it that way.

00:02:24.400 --> 00:02:29.350
It's not hard and mean and punch
you in the stomach and the back,

00:02:29.410 --> 00:02:30.000
those types of things.

00:02:30.000 --> 00:02:33.690
Anyway, I'll give you some tips and
tricks to keep yourself alive

00:02:33.690 --> 00:02:35.430
when you're working with hardware.

00:02:35.610 --> 00:02:38.540
And lastly,
I'll hand off to Raav from ATI,

00:02:38.740 --> 00:02:42.070
who will present the Toy Shop demo and
some of the technologies behind it,

00:02:42.120 --> 00:02:45.800
such as the HLSL to GLSL conversion.

00:02:53.990 --> 00:02:55.030
What are shaders?

00:02:55.160 --> 00:02:57.400
Shaders are made up of a few parts.

00:02:57.450 --> 00:02:59.400
They're encapsulated within objects.

00:02:59.460 --> 00:03:01.900
We have shader objects and
we have program objects.

00:03:01.900 --> 00:03:08.010
And these objects take certain inputs,
they produce certain outputs,

00:03:08.120 --> 00:03:09.840
and you can replace certain
bits of the pipeline,

00:03:09.930 --> 00:03:11.900
which I will show you later, I promise.

00:03:11.900 --> 00:03:16.440
The inputs to the vertex shader are
vertices that aren't transformed

00:03:17.050 --> 00:03:19.900
and some uniform values such as
any uniforms that you provide,

00:03:19.900 --> 00:03:23.550
generic ones,
or the built-in ones that are provided

00:03:23.550 --> 00:03:27.750
by the fixed function pipeline,
matrices,

00:03:28.110 --> 00:03:31.000
and other fun uniforms and such.

00:03:31.010 --> 00:03:34.040
There are also attributes
for vertex data.

00:03:34.040 --> 00:03:39.040
Any data that you want to
pass in with the vertices,

00:03:39.040 --> 00:03:45.190
such as weighting for vertices
for vertex skinning and a

00:03:45.190 --> 00:03:46.230
whole bunch of other stuff,
you can use them for generic purposes.

00:03:46.230 --> 00:03:46.230
We'll go into that a
little bit more later.

00:03:46.750 --> 00:03:50.600
Vertex Shaders produce outputs,
transformed vertices.

00:03:50.640 --> 00:03:53.360
Seeing as it replaced the
fixed function pipeline,

00:03:53.530 --> 00:03:56.370
you have to actually do what
the fixed function pipeline did.

00:03:56.520 --> 00:04:00.700
It took vertices in, transformed them,
did some lighting calculations,

00:04:00.770 --> 00:04:05.300
interpolated some values across
variances for the fragment shader.

00:04:05.430 --> 00:04:08.080
So you just have to do
the work that it did,

00:04:08.220 --> 00:04:11.420
or whatever work you want to do,
and then it just goes on

00:04:11.420 --> 00:04:12.650
to the fragment shader.

00:04:12.720 --> 00:04:15.850
So the fragment shader then takes
these vertices that are transformed

00:04:16.010 --> 00:04:19.470
and variances that were interpolated
across the face of the polygon

00:04:19.600 --> 00:04:22.200
and outputs a fragment color,
a fragment depth,

00:04:22.260 --> 00:04:25.340
whatever you want to the frame buffer
and any associated depth buffers,

00:04:25.340 --> 00:04:27.270
anything attached to it.

00:04:28.090 --> 00:04:30.520
The program object is just
an encapsulator for the

00:04:30.520 --> 00:04:32.560
vertex and fragment shaders.

00:04:32.650 --> 00:04:33.750
It's not very complicated.

00:04:33.760 --> 00:04:37.430
It's just a way for the programmer
to access GLSL in a very easy,

00:04:37.430 --> 00:04:38.160
intuitive way.

00:04:38.160 --> 00:04:40.310
So we'll go into this a little bit more,
but first let's go with

00:04:40.310 --> 00:04:41.440
a more realistic example.

00:04:41.460 --> 00:04:44.860
You've been giving me, say,
all these fancy words like attribute

00:04:44.860 --> 00:04:47.190
and varying and uniform and ooh.

00:04:48.300 --> 00:04:52.370
So here is the fixed function pipeline.

00:04:52.660 --> 00:04:54.000
I'll build it slowly.

00:04:54.160 --> 00:04:55.760
You've probably seen
this from the Red Book.

00:04:55.910 --> 00:04:58.140
So let's take a look, Sean.

00:04:58.160 --> 00:05:02.590
As I said before, we have incoming vertex
data and pixel data.

00:05:03.580 --> 00:05:09.000
This is then transformed and lit
by the vertex processing stage.

00:05:09.470 --> 00:05:12.760
The values that are produced from the
vertex processing stage are interpolated

00:05:12.830 --> 00:05:15.350
across the face of the polygon,
sent to the fragment stage,

00:05:15.430 --> 00:05:19.570
which then rasterizes and produces
the fragments that go to the frame

00:05:19.570 --> 00:05:21.400
buffer and other stuff happens to.

00:05:21.400 --> 00:05:23.400
But we're not concerned
with that right now.

00:05:23.510 --> 00:05:25.390
You can't program that yet.

00:05:25.920 --> 00:05:29.190
The vertex shader replaces the
transform clipping and lighting stage,

00:05:29.190 --> 00:05:32.660
like I said before,
and the fragment shader replaces

00:05:32.660 --> 00:05:34.360
the rasterization stage.

00:05:34.620 --> 00:05:37.180
So you can control the
rasterization aspects,

00:05:37.210 --> 00:05:40.240
the transformation aspects,
you can do a whole bunch of,

00:05:40.280 --> 00:05:43.940
just a world of effects and cool
things like you saw in my colleague

00:05:43.940 --> 00:05:47.500
Alex Eddy's demos and whatnot.

00:05:47.530 --> 00:05:49.600
And if any of you have tried Showpiece,
it's there too,

00:05:49.650 --> 00:05:50.920
along with a bunch of cool teapots.

00:05:51.110 --> 00:05:52.700
None of those bunnies.

00:05:52.730 --> 00:05:55.760
This is a zero bunny demonstration here.

00:05:55.770 --> 00:05:56.930
No bunnies.

00:05:57.090 --> 00:05:59.880
I'm not harming any bunnies either, so...

00:06:01.090 --> 00:06:03.840
But there are giant lizards, okay?

00:06:03.880 --> 00:06:07.160
If you're gonna kill the bunnies,
you have to get giant lizards instead.

00:06:07.300 --> 00:06:12.040
So here is a nice giant gecko
lizard-y thingy from Modo.

00:06:12.060 --> 00:06:14.640
They provided this nice image for us.

00:06:14.700 --> 00:06:15.490
Why don't we take a look at it?

00:06:15.520 --> 00:06:19.210
This is a more realistic example instead
of attributes and vertices and blah,

00:06:19.210 --> 00:06:19.900
blah, blah.

00:06:20.010 --> 00:06:24.200
So here we have a mesh that
has some texture coordinates.

00:06:24.250 --> 00:06:26.140
Why don't we put the mesh on it?

00:06:26.210 --> 00:06:30.070
Here you can see the scope of how
many vertices we have in this case.

00:06:30.100 --> 00:06:33.060
I mean, there are probably thousands
of vertices for this scene.

00:06:33.090 --> 00:06:35.290
I haven't counted each one of them up,
but if one of you guys want to do that

00:06:35.300 --> 00:06:38.960
and give me the number in a second,
go for it.

00:06:39.020 --> 00:06:42.060
Now, why don't we zoom in a little bit?

00:06:42.160 --> 00:06:44.390
Take a look at his palette here.

00:06:45.210 --> 00:06:50.060
You can see that you have
a lot of vertices that are

00:06:50.060 --> 00:06:52.800
getting transformed here,
and there are also a lot more

00:06:52.800 --> 00:06:54.900
fragments and vertices in this case.

00:06:55.060 --> 00:06:58.200
So why don't we take a
little closer look here.

00:06:58.290 --> 00:07:01.900
So keep in mind that the vertex shader is
going to be running once per each vertex.

00:07:02.000 --> 00:07:05.060
So whatever you write to replace
the vertex shader portion of

00:07:05.210 --> 00:07:09.900
the pipeline will be run once
per all these thousand vertices.

00:07:10.060 --> 00:07:13.400
Now let's get an idea of where the
scope hits for fragment shaders.

00:07:13.540 --> 00:07:14.260
Zoom in a little bit.

00:07:14.410 --> 00:07:16.000
Okay, there we go.

00:07:16.220 --> 00:07:21.030
Now, you can see a nicely pixelated
version of this triangle on the

00:07:21.030 --> 00:07:23.490
palette of this giant gecko.

00:07:24.030 --> 00:07:27.660
Why don't we take a look at how many
fragments potentially are in this,

00:07:27.660 --> 00:07:30.170
at least in one scan line.

00:07:30.340 --> 00:07:32.070
So here you can get,
maybe you'll get an idea of

00:07:32.080 --> 00:07:37.400
how many fragments are actually
being rasterized for this gecko.

00:07:39.860 --> 00:07:41.250
As I said before,
there are probably thousands

00:07:41.280 --> 00:07:42.450
of vertices in this scene.

00:07:42.620 --> 00:07:44.680
Well,
there are probably millions of fragments.

00:07:44.730 --> 00:07:47.230
A thousand times the number
of vertices in this scene.

00:07:47.400 --> 00:07:49.760
The fragment shader is going to
be run once per each of those.

00:07:49.820 --> 00:07:52.850
The variances are going to be
interpolated for each fragment.

00:07:52.940 --> 00:07:56.030
So any of the varying output values,
such as text coordinates,

00:07:56.030 --> 00:07:58.920
that's why you can see the texture
varying instead of just like

00:07:58.990 --> 00:08:01.520
one solid color per triangle.

00:08:01.670 --> 00:08:03.380
It actually varies across
the face of the polygon.

00:08:03.380 --> 00:08:04.940
It does that with
variances and text cords.

00:08:05.040 --> 00:08:07.200
So why don't we take a look at that,
shall we?

00:08:07.260 --> 00:08:09.550
Ooh, look at this snazzy blue line.

00:08:12.930 --> 00:08:16.190
So, now you get a little
introduction of what GLSL is,

00:08:16.270 --> 00:08:17.790
you probably want to know
where you can actually use it.

00:08:17.790 --> 00:08:19.800
Well, it turns out it's actually
been around since Tiger.

00:08:19.800 --> 00:08:23.510
So, take a look in Tiger, use it,
try it out.

00:08:23.990 --> 00:08:29.460
There you have GLSL 1.10 and in Leopard,
we plan on getting OpenGL 2.1

00:08:29.460 --> 00:08:32.800
support along with GLSL 1.2.

00:08:32.800 --> 00:08:36.260
Well, GLSL 1.2 has just been
recently announced,

00:08:36.300 --> 00:08:38.800
that's why it's not
in the seed right now.

00:08:38.800 --> 00:08:44.150
There's a lot of work for me to do and
I'll try to get it done for you people.

00:08:46.360 --> 00:08:48.940
Now you get an idea of where
it's all-- what's all going

00:08:48.940 --> 00:08:50.130
on and where it's supported.

00:08:50.340 --> 00:08:52.700
Why don't we just jump into a little,
small, simple demo.

00:08:52.700 --> 00:08:54.700
This is the Hello GLSL demo.

00:08:54.700 --> 00:08:58.100
We will hopefully have it
available soon for developers on

00:08:58.100 --> 00:09:02.700
a-- on the developer examples,
maybe with the next release of Xcode.

00:09:02.700 --> 00:09:04.700
We'll figure that whole thing out later.

00:09:04.700 --> 00:09:08.700
So now I want to switch to that machine.

00:09:08.700 --> 00:09:09.660
There we go.

00:09:09.660 --> 00:09:10.690
No, wrong machine.

00:09:10.700 --> 00:09:13.690
Uh, this is A.

00:09:14.100 --> 00:09:15.700
There we go.

00:09:16.620 --> 00:09:17.410
Lots of fun demos.

00:09:17.650 --> 00:09:20.040
All right,
let's take a look at Hello GLSL.

00:09:20.040 --> 00:09:23.380
Right now, I am drawing a triangle,
just a blue triangle.

00:09:23.380 --> 00:09:25.420
Nothing fancy, and it's blue.

00:09:25.810 --> 00:09:29.150
Nobody really likes blue,
especially this shade of blue.

00:09:29.780 --> 00:09:32.040
Don't know what Kent was thinking.

00:09:32.080 --> 00:09:34.400
Anyway, so here's our blue triangle.

00:09:34.400 --> 00:09:36.340
This is going through the
fixed function pipeline,

00:09:36.370 --> 00:09:38.700
just drawing a triangle, nothing fancy.

00:09:38.710 --> 00:09:40.710
Now I'm going to press space.

00:09:40.940 --> 00:09:41.410
Boom.

00:09:41.730 --> 00:09:42.850
Now we're using a shader.

00:09:42.990 --> 00:09:44.940
Now we're not doing anything
really fancy with the shader,

00:09:44.940 --> 00:09:49.940
but you can see that we're perturbing the
colors of this triangle using varings.

00:09:50.010 --> 00:09:53.140
So why don't we delve into this
a little bit more and switch

00:09:53.140 --> 00:09:56.510
back to the other machine.

00:09:58.000 --> 00:10:02.080
Um, switch back to the other machine.

00:10:02.220 --> 00:10:04.140
Slides, please.

00:10:10.410 --> 00:10:14.620
All right.

00:10:14.620 --> 00:10:15.640
Now you saw that simple example.

00:10:15.640 --> 00:10:18.760
Let's go in behind the scenes
a little bit and I'll show you

00:10:18.760 --> 00:10:21.080
what's actually going on here.

00:10:22.140 --> 00:10:24.600
So you've seen the triangle.

00:10:24.650 --> 00:10:28.680
You saw how it went from that
blue to an awesome multicolored

00:10:28.850 --> 00:10:30.000
psychedelic triangle.

00:10:30.010 --> 00:10:31.990
How do we actually do that?

00:10:32.030 --> 00:10:35.700
Let's take a look at the steps that
are required to get GLSL into your

00:10:35.700 --> 00:10:41.000
application and then go through how to
actually do each of those six steps.

00:10:41.000 --> 00:10:43.890
The first step you're going
to want to do to get GLSL in,

00:10:44.090 --> 00:10:46.000
please check for extensions.

00:10:46.000 --> 00:10:47.000
You have to do this.

00:10:47.000 --> 00:10:50.990
Make sure the extension that you want
is on the renderer that you have chosen.

00:10:51.050 --> 00:10:54.980
If you don't do this,
you will... stuff bad will happen.

00:10:54.980 --> 00:10:57.000
Bad.

00:10:57.000 --> 00:10:58.600
Check for extensions.

00:10:59.030 --> 00:11:00.660
Then we want to make some shaders.

00:11:00.680 --> 00:11:03.000
The shaders that we used
for that Hello GLSL example,

00:11:03.050 --> 00:11:05.510
I'll show you and walk you
through them step by step.

00:11:05.690 --> 00:11:13.160
Next we'll show how to compile them,
link them, and use them at the end.

00:11:14.740 --> 00:11:17.100
Here is the vertex shader
that was used for Hello GLSL.

00:11:17.100 --> 00:11:18.440
It's really not very complicated.

00:11:18.440 --> 00:11:20.560
It's actually simpler than
the one you saw before.

00:11:20.590 --> 00:11:23.170
It has variances like
we were talking about.

00:11:23.430 --> 00:11:27.160
And you'll notice that we
have a varying VEC3 color.

00:11:27.160 --> 00:11:30.500
That's the output of this vertex
shader to the fragment shader.

00:11:30.620 --> 00:11:36.260
So this color will be interpolated
across the fragments of the polygon.

00:11:37.090 --> 00:11:38.950
You'll see that we have
a function called main.

00:11:39.000 --> 00:11:41.600
That main will be
executed for each vertex.

00:11:41.740 --> 00:11:45.040
Keep that in mind if you have
a really vertex-heavy or really

00:11:45.040 --> 00:11:46.640
vertex-not-heavy application.

00:11:46.860 --> 00:11:47.920
Same for the fragment shader.

00:11:47.980 --> 00:11:50.110
We'll go into that a
little bit more later.

00:11:51.280 --> 00:11:55.510
Now, you can see that the color is a
function of the incoming vertex value.

00:11:55.510 --> 00:12:00.080
Now, the vertices in that example
went from 0 to 1 and 0 to 1.

00:12:00.120 --> 00:12:07.000
That's why we saw colors, you know,
going in, in this case, red and blue.

00:12:08.440 --> 00:12:12.630
And lastly, we transform the position,
like I said we had to do before,

00:12:12.630 --> 00:12:15.150
and put that into-- we
transform the incoming vertex

00:12:15.250 --> 00:12:16.570
and put that into GL position.

00:12:16.580 --> 00:12:18.790
That's the output position of this.

00:12:18.950 --> 00:12:21.580
I'll show you some more
examples of this later,

00:12:21.580 --> 00:12:21.580
but--

00:12:22.170 --> 00:12:23.510
That's that for now.

00:12:23.710 --> 00:12:25.160
Now, the Fragment Shader is even simpler.

00:12:25.350 --> 00:12:27.060
It's just one line.

00:12:27.130 --> 00:12:29.720
It takes the incoming varying
value from the Vertex Shader,

00:12:29.720 --> 00:12:31.660
interpolated it across
the face of the polygon,

00:12:31.710 --> 00:12:33.520
and puts it into the Fragment Color.

00:12:33.580 --> 00:12:38.160
That might sound all fancy and crazy,
but it's just setting a color.

00:12:38.230 --> 00:12:41.360
But it does it once per fragment,
keep in mind.

00:12:42.320 --> 00:12:43.690
Now we have some shaders.

00:12:43.790 --> 00:12:44.740
Two awesome shaders.

00:12:45.000 --> 00:12:46.200
Three lines total.

00:12:46.200 --> 00:12:47.130
Wow.

00:12:47.380 --> 00:12:48.590
Let's compile these shaders, shall we?

00:12:48.680 --> 00:12:51.940
Let's make some shader objects, use them,
and draw that awesome

00:12:51.940 --> 00:12:53.950
little triangle that we saw.

00:12:54.080 --> 00:12:57.350
So in order to compile your shaders,
all you have to really do

00:12:57.470 --> 00:13:00.560
is send the source to GL,
tell it to compile your shader,

00:13:01.410 --> 00:13:02.800
That's pretty much it.

00:13:02.800 --> 00:13:05.440
Check for some errors and be a nice,
good GL citizen.

00:13:05.460 --> 00:13:09.930
Next,
we want to set up the program object.

00:13:10.880 --> 00:13:12.460
First, we create a program object.

00:13:12.490 --> 00:13:15.320
Then we attach both vertex and
fragment shader that we just compiled

00:13:15.320 --> 00:13:16.650
previously to this program object.

00:13:16.730 --> 00:13:21.300
This allows us to easily use
this GLSL program that we made.

00:13:21.320 --> 00:13:24.360
It'll activate it when we turn it on,
and it will deactivate

00:13:24.360 --> 00:13:26.090
it when we turn it off.

00:13:27.320 --> 00:13:29.160
Next, we want to link the program.

00:13:29.170 --> 00:13:31.190
This is even easier than the other steps.

00:13:31.200 --> 00:13:34.200
Just link.

00:13:34.200 --> 00:13:35.200
Check for errors again.

00:13:35.330 --> 00:13:37.500
Make sure everything's hunky-dory.

00:13:38.250 --> 00:13:41.280
Lastly,
now that we have this awesome shader,

00:13:41.280 --> 00:13:44.000
compiled, linked,
we've got a program object,

00:13:44.050 --> 00:13:47.560
everything's all together,
let's use it and draw a triangle.

00:13:47.640 --> 00:13:49.630
So all you have to do
is use program object,

00:13:49.670 --> 00:13:54.560
the program object you just made,
draw some triangle, GLBegin, GLVertex,

00:13:54.740 --> 00:13:57.200
or use a VBO.

00:13:57.710 --> 00:14:00.050
It will be activated and replace
those portions of the fixed function

00:14:00.170 --> 00:14:01.990
pipeline that I showed you earlier.

00:14:02.110 --> 00:14:04.500
Then when you're done,
deactivate the shader.

00:14:04.640 --> 00:14:05.980
That's it.

00:14:08.500 --> 00:14:10.340
I showed you in the original
shader that I didn't really go

00:14:10.340 --> 00:14:14.200
over in the Hello GLSL example
are the Uniform and Attribute API.

00:14:14.200 --> 00:14:17.180
So you can set the
generic uniform values,

00:14:17.180 --> 00:14:20.100
basically constants in your program.

00:14:20.490 --> 00:14:23.860
To do this,
you just have to make a uniform in your

00:14:23.860 --> 00:14:25.350
shader like the original one showed.

00:14:25.410 --> 00:14:29.080
So it would be like uniform float A.

00:14:29.130 --> 00:14:34.870
Now here, you would just go get
uniform location of A.

00:14:35.210 --> 00:14:38.140
Then it gives you the location,
which would be some number.

00:14:38.300 --> 00:14:38.960
You don't really care.

00:14:39.110 --> 00:14:40.340
Don't look at the numbers.

00:14:40.580 --> 00:14:45.160
Behind the scenes, you know,
ignore the number.

00:14:45.210 --> 00:14:47.190
And then you just set the
value of that uniform.

00:14:47.300 --> 00:14:50.300
So in this case, it's setting a vec4,
but you could set other values.

00:14:50.390 --> 00:14:53.880
Please look at the uniform
API in the orange book.

00:14:54.080 --> 00:14:56.710
Similarly, you do the same type of
thing with attributes,

00:14:56.740 --> 00:14:59.080
except attributes are per vertex data.

00:15:04.200 --> 00:15:13.000
[Transcript missing]

00:15:16.800 --> 00:15:23.000
[Transcript missing]

00:15:27.900 --> 00:15:41.400
[Transcript missing]

00:15:44.700 --> 00:16:15.400
[Transcript missing]

00:16:20.630 --> 00:16:31.790
www.nickbruns.com/subs.htm
www.nickbruns.com/subs.htm

00:16:31.790 --> 00:16:31.790
www.nickbruns.com/subs.htm

00:25:13.800 --> 00:26:38.000
[Transcript missing]