WEBVTT

00:00:10.290 --> 00:00:12.590
Good morning.

00:00:12.610 --> 00:00:16.860
So, as Heather said,
I'm the middleware manager of Xcode.

00:00:16.860 --> 00:00:20.230
I manage things like the project model,
the build system,

00:00:20.240 --> 00:00:25.240
the distributed builds environment,
what we like to think of as

00:00:25.320 --> 00:00:27.860
the Chewy Center of Xcode.

00:00:28.250 --> 00:00:30.960
And the agenda today.

00:00:30.960 --> 00:00:32.400
You've seen a lot of demos this week.

00:00:32.460 --> 00:00:33.640
You've seen a lot of shiny stuff.

00:00:33.760 --> 00:00:34.990
This isn't about shiny stuff.

00:00:35.070 --> 00:00:37.840
This is about working
with large projects,

00:00:37.920 --> 00:00:44.900
working with complex projects,
managing them, dealing with them,

00:00:44.900 --> 00:00:44.900
and making them, well,
making it so you can ship your products.

00:00:45.110 --> 00:00:47.770
I'd like to get through the content
relatively quickly because I can

00:00:47.770 --> 00:00:50.700
imagine there will be some questions
that will fall out from this.

00:00:50.810 --> 00:00:53.380
So what really is a complex project?

00:00:53.470 --> 00:00:56.470
It's any project where you've got
multiple targets or you may have

00:00:56.470 --> 00:00:59.460
multiple projects with dependencies.

00:00:59.460 --> 00:01:01.340
You may have automated test suites.

00:01:01.340 --> 00:01:04.170
Maybe you've got some external
stuff that's part of your build

00:01:04.320 --> 00:01:07.500
that Xcode isn't designed to manage.

00:01:07.500 --> 00:01:10.480
You might have packaging and distribution
infrastructure and you're probably

00:01:10.480 --> 00:01:13.990
going to be using revision control
and it's probably just going to be

00:01:13.990 --> 00:01:17.290
managing more than the project itself.

00:01:18.090 --> 00:01:21.650
And, you know,
if your project has a framework target

00:01:21.750 --> 00:01:25.610
or it's used by an app target or an app
target and some automator actions or

00:01:25.680 --> 00:01:29.990
spotlight actions or things like that,
you really have a complex project.

00:01:30.060 --> 00:01:33.480
Even if you build them separately,
it's still complex.

00:01:33.920 --> 00:01:37.930
So let's have a look at a
typical complex project.

00:01:37.970 --> 00:01:40.100
I grabbed the
Adobe open-source libraries,

00:01:40.100 --> 00:01:43.360
which was very kind of them
to make available to us.

00:01:43.460 --> 00:01:49.600
And this is a project that has-- well,
it's got a bunch of project files,

00:01:49.600 --> 00:01:50.900
as you can see here.

00:01:51.010 --> 00:01:53.240
It's got a lot of configuration files.

00:01:53.240 --> 00:01:55.980
If we look at the project itself,
you'll see that it's actually quite

00:01:56.060 --> 00:01:59.170
the deep hierarchy of projects in here.

00:01:59.350 --> 00:02:01.250
If I dive into here,
you'll see this opens up.

00:02:01.330 --> 00:02:03.530
And I see more projects in here.

00:02:03.580 --> 00:02:05.980
I dive into there,
and it opens up some more projects.

00:02:06.110 --> 00:02:08.300
I mean,
you can see there's a lot of stuff here.

00:02:08.500 --> 00:02:11.720
And it's all using dependencies
and everything else to

00:02:11.720 --> 00:02:13.320
build this one from above.

00:02:13.420 --> 00:02:15.330
You'll see that there's a
lot of configuration files

00:02:15.380 --> 00:02:17.150
in here at different levels.

00:02:17.200 --> 00:02:19.770
And some of these configuration
files are actually referring to a

00:02:19.840 --> 00:02:22.540
common directory of configurations.

00:02:22.650 --> 00:02:24.140
So there's a lot of stuff going on.

00:02:24.200 --> 00:02:28.380
And this is not that atypical
as a product evolves.

00:02:28.430 --> 00:02:31.200
So if I can have the slides, please.

00:02:33.770 --> 00:02:36.030
So the first step,
let's talk about configuring

00:02:36.050 --> 00:02:37.630
and controlling the project.

00:02:37.660 --> 00:02:41.820
Glad I only have one demo
because that's a lot of exercise.

00:02:42.980 --> 00:02:47.300
So configuring the project-- you
can use the configuration files.

00:02:47.300 --> 00:02:50.390
They're just key value
pairs of build settings.

00:02:50.450 --> 00:02:53.250
And it's really a great place
to gather the policy and

00:02:53.290 --> 00:02:56.560
configuration all in one place.

00:02:56.770 --> 00:03:00.730
And you can use it to, say,
set organizational policies.

00:03:00.790 --> 00:03:04.020
So if your organization wants
warnings at a certain level or

00:03:04.020 --> 00:03:07.590
wants a certain optimization style,
stick it in the config file.

00:03:08.090 --> 00:03:10.900
They can be applied to
multiple projects and targets.

00:03:10.900 --> 00:03:12.840
You can use what we call
up and over references.

00:03:12.900 --> 00:03:17.020
All that means is that a reference to a
file outside of your project directory.

00:03:17.060 --> 00:03:19.760
So you can share these
across multiple projects.

00:03:19.850 --> 00:03:21.420
They can include each other.

00:03:21.460 --> 00:03:23.250
So you can have a baseline
configuration and then,

00:03:23.250 --> 00:03:26.930
say, have a debug and a release and
a profiling and whatever other

00:03:26.940 --> 00:03:29.500
configurations you want to lay on top.

00:03:29.500 --> 00:03:32.890
Some people are using configurations
where they have a demo and a production

00:03:32.890 --> 00:03:38.000
configuration where the demo version
just if-defs out a whole bunch of code.

00:03:38.040 --> 00:03:39.380
And some examples.

00:03:39.380 --> 00:03:41.480
This is actually from Adobe's
open source libraries.

00:03:41.480 --> 00:03:43.130
This is their debug configuration.

00:03:43.300 --> 00:03:45.340
So you can see it's
setting the symbol levels,

00:03:45.360 --> 00:03:50.480
optimization levels,
setting the target variant, et cetera.

00:03:51.540 --> 00:03:57.740
So, one thing we added in Xcode 3.0 is
architecture-specific build settings.

00:03:57.740 --> 00:04:01.170
And what these allow is for you to have
a build setting that's specific to a

00:04:01.220 --> 00:04:06.780
particularly targeted architecture,
be it, say, PPC64, I386.

00:04:06.780 --> 00:04:10.450
And you use these, well, first,
you have to make sure your project

00:04:10.450 --> 00:04:12.630
is set up for 3.0 compatibility.

00:04:12.830 --> 00:04:16.770
There's now a compatibility pane
in the project settings window,

00:04:16.770 --> 00:04:20.130
and in there,
you can select what compatibility

00:04:20.130 --> 00:04:21.900
level you want Xcode to run at.

00:04:22.020 --> 00:04:25.050
If you select 2.4,
then Xcode 3.0 will make sure your

00:04:25.090 --> 00:04:26.560
project's compatible with 2.4.

00:04:26.560 --> 00:04:30.340
If you turn it on to 3.0,
then you can use this feature.

00:04:30.630 --> 00:04:34.670
So what you do is you use the little
action menu down at the bottom there to

00:04:34.670 --> 00:04:39.310
basically add an architecture-specific
setting for your particular setting,

00:04:39.310 --> 00:04:41.440
in this case the auto vectorization.

00:04:41.740 --> 00:04:45.340
And you can see once that happens,
it actually adds a little

00:04:45.340 --> 00:04:49.620
sub-item in there which has the
architecture-specific setting.

00:04:49.620 --> 00:04:51.610
Very handy.

00:04:52.030 --> 00:04:54.970
So moving on to revision control systems.

00:04:55.300 --> 00:04:57.400
So use them.

00:04:57.580 --> 00:05:01.020
Even when you're doing loan development,
use them.

00:05:01.040 --> 00:05:05.210
It's a documented timeline
of your project's evolution.

00:05:05.340 --> 00:05:09.220
They're typically-- you can think of
them as a specialized file system.

00:05:09.340 --> 00:05:13.170
For teams, it's a brilliant way to figure
out who to blame when something

00:05:13.650 --> 00:05:19.180
explodes and to watch the history
of your project over time.

00:05:19.240 --> 00:05:20.990
And there's some terms
that come along with this.

00:05:21.020 --> 00:05:22.820
There's importing,
which is just throwing a bunch

00:05:22.820 --> 00:05:25.980
of stuff into the revision
control system for control by it.

00:05:26.170 --> 00:05:27.560
There's checkout.

00:05:27.560 --> 00:05:31.270
There's cutting branches,
which we'll get into in just a second.

00:05:31.360 --> 00:05:34.040
Committing, committing your changes back
to the revision control system,

00:05:34.100 --> 00:05:36.980
setting up that history,
making sure the changes are tracked.

00:05:37.040 --> 00:05:38.230
And updating.

00:05:38.300 --> 00:05:42.740
Now, with a revision control system,
first, use one.

00:05:42.740 --> 00:05:44.040
I can't reiterate this enough.

00:05:44.120 --> 00:05:46.960
Even on your machine for your
own throwaway projects as you're

00:05:47.020 --> 00:05:49.960
experimenting with Leopard,
use revision control.

00:05:50.040 --> 00:05:51.860
It's incredibly easy to--
you can set up a subversion

00:05:51.860 --> 00:05:53.340
repository on your own machine.

00:05:53.360 --> 00:05:58.280
It's just SVN admin create some path,
and you're done.

00:05:58.280 --> 00:06:01.360
These are critical to effective
team interaction and to the

00:06:01.360 --> 00:06:05.030
management of very large projects.

00:06:05.060 --> 00:06:07.030
Can't say that enough.

00:06:07.320 --> 00:06:12.420
And it is, again-- can't say it enough--
use it for solo development.

00:06:12.460 --> 00:06:16.470
And it really simplifies the maintenance
versus the release versus the

00:06:16.470 --> 00:06:19.180
pie-in-the-sky future development stuff.

00:06:19.210 --> 00:06:20.800
Because you can use these branches.

00:06:20.800 --> 00:06:24.190
So you can have your maintenance
release ongoing while your

00:06:24.390 --> 00:06:26.280
production release is ongoing.

00:06:26.280 --> 00:06:28.680
And then you can use the
features of the revision control

00:06:28.690 --> 00:06:31.130
system to merge between them.

00:06:31.210 --> 00:06:33.740
I'm not going to go into a huge
amount of depth on how to do that,

00:06:33.870 --> 00:06:36.530
because all of the revision
control systems out there have been

00:06:36.650 --> 00:06:38.130
documented to death on the internet.

00:06:38.140 --> 00:06:42.580
And about 40 seconds in Google will
reveal everything you need to know.

00:06:43.030 --> 00:06:45.620
For Subversion and CVS,
there are excellent open

00:06:45.620 --> 00:06:48.480
source public domain books
available-- not public domain,

00:06:48.500 --> 00:06:52.480
but open source-- that
are evolving constantly.

00:06:53.000 --> 00:06:57.000
So the other fun part of
Revision Control is that

00:06:57.000 --> 00:07:00.330
it can protect you against,
shall we say,

00:07:00.390 --> 00:07:03.300
creative coding catastrophes,
things that might happen

00:07:03.300 --> 00:07:05.000
at 4:00 in the morning.

00:07:05.070 --> 00:07:06.740
So you can really,
you can like cut a branch

00:07:06.820 --> 00:07:07.930
and just go wild on that.

00:07:07.990 --> 00:07:12.580
Do a lot of experimentation.

00:07:12.580 --> 00:07:12.580
If it doesn't work out, throw it away.

00:07:12.580 --> 00:07:12.580
No harm done.

00:07:12.850 --> 00:07:18.290
And it's important to note that revision
control is a catalyst for process,

00:07:18.340 --> 00:07:20.800
but they don't dictate process.

00:07:20.890 --> 00:07:23.900
So even though we call it
an SCM system in Xcode,

00:07:24.070 --> 00:07:26.250
which implies process, it's not.

00:07:26.430 --> 00:07:27.720
It's revision control.

00:07:27.760 --> 00:07:29.760
It's just a history.

00:07:29.910 --> 00:07:35.040
So they work well with whatever
process you might want to use,

00:07:35.070 --> 00:07:38.710
except for, of course,
the chaotic development process,

00:07:38.710 --> 00:07:38.710
which I wouldn't recommend.

00:07:39.000 --> 00:07:44.860
So, out of the box, Xcode supports three
revision control systems.

00:07:44.860 --> 00:07:48.600
We have CVS, which is really just broken,
old, antiquated,

00:07:48.600 --> 00:07:50.770
and don't use it unless you have to.

00:07:50.900 --> 00:07:53.900
It's the COBOL of RCS.

00:07:53.900 --> 00:07:56.170
It needs to go away.

00:07:56.200 --> 00:07:59.730
There's Perforce, and, well,
touching on that,

00:07:59.750 --> 00:08:03.260
the reason why CVS needs to
go away is because it doesn't

00:08:03.270 --> 00:08:04.480
do atomic transactions.

00:08:04.500 --> 00:08:06.000
And what does that mean?

00:08:06.000 --> 00:08:07.800
That means when you're sitting
on the beach somewhere,

00:08:07.800 --> 00:08:09.290
and you've done your
emergency maintenance,

00:08:09.370 --> 00:08:13.900
and you've just patched five files,
and you're doing the commit across a,

00:08:13.900 --> 00:08:17.420
I don't know, a 14.4 modem, effectively,
three of the files go

00:08:17.420 --> 00:08:19.550
into the repository,
and you get hit by a wave,

00:08:19.550 --> 00:08:21.600
and your laptop's now dead.

00:08:21.600 --> 00:08:24.740
You've just committed
three of five changes with,

00:08:24.740 --> 00:08:28.780
well, yeah, you've only committed
part of the changes.

00:08:28.800 --> 00:08:32.180
And CVS lets you get away with that.

00:08:32.320 --> 00:08:34.400
No real revision control system does.

00:08:34.400 --> 00:08:37.100
So, yeah, don't use it.

00:08:37.100 --> 00:08:40.690
Perforce, commercial product,
excellent support.

00:08:40.700 --> 00:08:44.100
There tends to be more of a kind of
a dictating of process that comes

00:08:44.100 --> 00:08:47.900
out of the Perforce community than
I've seen with CVS and Subversion,

00:08:47.900 --> 00:08:51.980
but I know a lot of people that
swear by it and use it a lot.

00:08:52.010 --> 00:08:54.400
So, you know, great alternative.

00:08:54.400 --> 00:08:57.510
And finally, there's Subversion,
which was designed from the

00:08:57.510 --> 00:08:58.940
ground up to replace CVS.

00:08:59.000 --> 00:09:04.300
It was, as they put it, quite succinctly,
it's like CVS without the suck.

00:09:04.510 --> 00:09:09.020
And it defaults to not
corrupting your files,

00:09:09.330 --> 00:09:10.600
unlike CVS.

00:09:10.600 --> 00:09:14.030
And it's quite well designed,
very popular, and has excellent

00:09:14.060 --> 00:09:16.100
opportunities for extension.

00:09:16.100 --> 00:09:19.400
And it's Apple's RCS system
of choice these days.

00:09:19.400 --> 00:09:22.450
So, well,
eat your own dog food tends to be

00:09:22.450 --> 00:09:27.500
the best tasting dog food as opposed
to stuff made for other people.

00:09:27.510 --> 00:09:30.090
So, as you can imagine,
we're doing a lot of

00:09:30.090 --> 00:09:32.630
work with Subversion,
and you will see it's

00:09:32.670 --> 00:09:34.200
supported very well.

00:09:34.200 --> 00:09:36.600
So why Subversion?

00:09:36.620 --> 00:09:38.000
It's the atomic transactions.

00:09:38.000 --> 00:09:41.100
That's really a big part of it.

00:09:41.100 --> 00:09:42.570
I can't, you know, again,
this is another,

00:09:42.650 --> 00:09:44.660
I can't reiterate enough.

00:09:44.870 --> 00:09:47.800
When you go to commit a
change across five files,

00:09:47.800 --> 00:09:52.190
that should be an atomic one
single change in terms of

00:09:52.190 --> 00:09:54.030
how you conceptualize it.

00:09:54.320 --> 00:09:56.350
And Subversion does do that.

00:09:56.550 --> 00:09:59.580
It also has zero cost branching,
which is just brilliant.

00:09:59.650 --> 00:10:04.100
What that means is that when
you cut a branch in the server,

00:10:04.100 --> 00:10:06.500
it comes back almost immediately.

00:10:06.500 --> 00:10:09.590
It doesn't take any additional
disk space to speak of.

00:10:09.600 --> 00:10:12.780
It's only when you start making
changes on that branch that it actually

00:10:12.780 --> 00:10:14.800
starts making copies of the files.

00:10:14.800 --> 00:10:17.760
And this allows for all kinds
of development processes that

00:10:17.760 --> 00:10:21.650
are critical on large projects,
like, for example, the ability to do what

00:10:21.710 --> 00:10:25.500
are called task branches,
which is when you as an engineer cut a

00:10:25.500 --> 00:10:29.110
branch specifically to perform a task,
get to the end of it, checking in,

00:10:29.110 --> 00:10:31.430
checking out, doing whatever you need
to do along the way,

00:10:31.500 --> 00:10:36.500
and then you reintegrate that change
back into the mainline branch.

00:10:36.590 --> 00:10:39.880
Vastly reduces risk overall,
because you don't have a lot

00:10:39.880 --> 00:10:43.200
of your complex changes being
interleaved with everyone else's.

00:10:43.200 --> 00:10:47.570
And actually, it makes the history of the
mainline trunk easier to read.

00:10:47.950 --> 00:10:50.560
And again,
excellent automation opportunities,

00:10:50.560 --> 00:10:51.740
which we'll get to.

00:10:51.740 --> 00:10:54.050
And, you know, it doesn't corrupt things.

00:10:54.050 --> 00:10:55.770
It's cool.

00:10:56.070 --> 00:10:59.890
So in Xcode 3.0,
we are improving the SCM,

00:10:59.890 --> 00:11:01.140
or we call it SCM.

00:11:01.140 --> 00:11:04.090
It's really a revision
control experience.

00:11:04.230 --> 00:11:08.100
In particular, we've added a manager for
different repository connections.

00:11:08.240 --> 00:11:12.040
As you can see by the little green dot,
it actually validates the connection,

00:11:12.040 --> 00:11:15.700
and you can go to it and see if you can
talk to that repository from whatever

00:11:15.700 --> 00:11:17.740
network connection you happen to be on.

00:11:17.970 --> 00:11:21.060
Once you have connections
configured in here,

00:11:21.130 --> 00:11:25.620
you can actually then go
to the repository browser.

00:11:25.660 --> 00:11:28.460
Oh, and we also integrate SSH agents,
so you don't have to

00:11:28.460 --> 00:11:29.860
deal with that anymore.

00:11:29.860 --> 00:11:31.360
Yeah.

00:11:31.360 --> 00:11:32.990
Thank you.

00:11:33.300 --> 00:11:36.550
Um,
the repository browser lets you actually

00:11:36.550 --> 00:11:40.740
browse the live repository on the server.

00:11:40.740 --> 00:11:45.740
Amazingly enough, Tom, who wrote this,
made it work with CVS as well.

00:11:45.750 --> 00:11:47.390
So you can actually
browse the repository,

00:11:47.390 --> 00:11:51.980
find exactly what you want to check out
and then check it out to your local area.

00:11:51.980 --> 00:11:54.650
At that point in time,
it will also open or offer to open any

00:11:54.660 --> 00:11:56.860
Xcode projects that were checked out.

00:11:56.880 --> 00:12:01.200
So it also sets what we call
the project source root path.

00:12:01.200 --> 00:12:02.200
Now what is that?

00:12:02.200 --> 00:12:07.500
This is a concept that we're
adding in 3.0 that basically sets a

00:12:07.500 --> 00:12:10.400
directory as the root of your project.

00:12:10.400 --> 00:12:13.520
So everything in that directory
and below is considered to be a

00:12:13.520 --> 00:12:16.920
part of the project regardless of
whether or not it's referenced by

00:12:16.990 --> 00:12:18.940
any of the Xcode projects inside.

00:12:18.940 --> 00:12:24.480
And we're moving to basing the revision
control operations off that root

00:12:24.480 --> 00:12:28.120
path so you don't have to worry about
anymore making sure every single

00:12:28.210 --> 00:12:30.980
file is referenced in Xcode even
if it's something that should never

00:12:30.980 --> 00:12:32.150
be built as a part of your product.

00:12:32.200 --> 00:12:33.200
.

00:12:33.780 --> 00:12:39.520
And we will be continuing to
refine this from now until GM.

00:12:40.190 --> 00:12:45.290
So, one of the great features of revision
control systems is that you can

00:12:45.290 --> 00:12:48.220
take action as changes happen.

00:12:48.860 --> 00:12:53.700
And really, what this allows is it allows
the revision control system to

00:12:53.700 --> 00:12:57.060
be the foundation for software
configuration management or

00:12:57.060 --> 00:13:00.900
source configuration management,
which means you can have it do

00:13:00.900 --> 00:13:06.220
things and take action and validate
your changes as they're happening.

00:13:06.240 --> 00:13:10.190
The hooks for this kind of stuff
is configured on the server side.

00:13:10.240 --> 00:13:15.200
So this is not something that Xcode--
you do anything about in Xcode.

00:13:15.380 --> 00:13:19.500
You configure the hooks on the server
side in the repository configuration.

00:13:19.510 --> 00:13:23.040
And you can have hooks that
will take action before or

00:13:23.040 --> 00:13:24.960
after a change is committed.

00:13:24.960 --> 00:13:27.340
In Subversion, there's also hooks for
all kinds of things,

00:13:27.340 --> 00:13:28.680
like changing properties.

00:13:28.820 --> 00:13:30.370
Because in Subversion,
you can have all kinds of

00:13:30.380 --> 00:13:32.200
properties associated with files.

00:13:32.290 --> 00:13:34.980
Or locking and unlocking,
things like that.

00:13:35.120 --> 00:13:38.630
But what happens is that when, say,
in this case,

00:13:38.630 --> 00:13:43.420
I had a hook configured to detect
any line of code that was an

00:13:43.420 --> 00:13:47.420
NS log and disallow the commit,
because I don't want NS logs

00:13:47.420 --> 00:13:50.980
in my production code,
Xcode will actually show the error

00:13:51.020 --> 00:13:56.280
panel and give you information as to why
that hook was fired and what happened.

00:13:56.290 --> 00:13:59.860
There's also post-commit hooks,
which can do things like sending an

00:13:59.860 --> 00:14:04.530
email after every action or every commit.

00:14:04.700 --> 00:14:07.630
This is an example of making
an RSS feed of every commit

00:14:07.710 --> 00:14:12.020
to your Subversion repository.

00:14:12.200 --> 00:14:15.350
The actual files for this,
the SVN to RSS and PI RSS,

00:14:15.490 --> 00:14:18.330
the URLs are at the end
of the presentation,

00:14:18.330 --> 00:14:20.890
and these are all publicly available.

00:14:20.950 --> 00:14:25.380
And it's just a matter of modifying
the post-commit script that's

00:14:25.380 --> 00:14:29.980
included with Subversion to add
that block of code at the bottom

00:14:29.980 --> 00:14:32.500
to invoke the SVN to RSS module.

00:14:32.540 --> 00:14:36.550
This is pretty cool,
because this gives you an actual

00:14:36.550 --> 00:14:40.250
subscribable in mail or Safari feed
of all the changes in your project.

00:14:41.440 --> 00:14:45.930
So the other thing you can do, though,
is you can have the commit

00:14:45.930 --> 00:14:47.370
hooks trigger build bots.

00:14:47.610 --> 00:14:50.750
Now, build bots are really cool,
because what they do is they'll

00:14:50.750 --> 00:14:53.380
go out and they'll check
out all your source code.

00:14:53.440 --> 00:14:56.620
And then they'll go and they'll
build all the project or projects,

00:14:56.620 --> 00:14:59.420
and then you can configure them
to run all your unit tests,

00:14:59.420 --> 00:15:01.820
run performance tests, things like that.

00:15:01.830 --> 00:15:04.460
And there's a couple of
build bots out there.

00:15:04.460 --> 00:15:08.250
There's build bot itself,
buildbot.sourceforge.net, I think.

00:15:08.260 --> 00:15:09.290
No.

00:15:09.320 --> 00:15:09.710
I don't remember.

00:15:09.740 --> 00:15:11.280
Anyway,
search for build bot and go get it.

00:15:11.300 --> 00:15:13.660
There's also cruise control.

00:15:13.660 --> 00:15:16.120
There's the URL at the end
of the presentation as well.

00:15:16.120 --> 00:15:18.670
There's cruise control,
which is another one for

00:15:18.670 --> 00:15:21.030
continuous integration,
which tends to be used

00:15:21.130 --> 00:15:24.070
by Java developers,
but it's not really specific to it.

00:15:24.070 --> 00:15:28.230
Continuous integration is the
notion that after every commit,

00:15:28.230 --> 00:15:29.650
you build and test.

00:15:29.650 --> 00:15:34.130
And what this allows you to do, though,
is you can automate the testing across

00:15:34.130 --> 00:15:36.580
multiple systems and architectures.

00:15:36.580 --> 00:15:38.480
And as you can imagine,
once you have a complex

00:15:38.560 --> 00:15:41.100
project like this,
like the Adobe Open Source Libraries

00:15:41.100 --> 00:15:41.280
or whatever,
you can do a lot of things.

00:15:41.300 --> 00:15:42.580
And you can do a lot of
things with your applications.

00:15:42.580 --> 00:15:46.290
Being able to automatically
trigger testing across a panther,

00:15:46.290 --> 00:15:48.960
leopard,
and tiger on potentially multiple

00:15:48.960 --> 00:15:51.720
architectures is incredibly valuable.

00:15:51.730 --> 00:15:53.380
It's a great time saver.

00:15:53.380 --> 00:15:55.780
In particular,
it means that you can very quickly

00:15:55.780 --> 00:15:58.970
pinpoint the exact change or window
of changes that happened in the

00:15:58.970 --> 00:16:02.640
repository that broke something
or caused a performance regression.

00:16:04.120 --> 00:16:06.370
And they're often triggered
after every commit,

00:16:06.370 --> 00:16:08.900
though, of course,
if you're in active development

00:16:08.910 --> 00:16:11.540
with a large project that
takes a long time to build,

00:16:11.700 --> 00:16:19.610
you'll probably want to put a mechanism
in so you can coalesce the changes

00:16:19.610 --> 00:16:19.610
and only have it fire once every,
say, three hours or something like that.

00:16:19.870 --> 00:16:22.490
So this is an example of a build bot.

00:16:22.560 --> 00:16:25.290
This is the WebKit's build bot,
and this was not a very good

00:16:25.290 --> 00:16:27.700
day to take a screenshot,
unfortunately.

00:16:27.700 --> 00:16:34.680
So anyway, it gives a one-stop console
for multiple build trains.

00:16:34.700 --> 00:16:38.700
Normally the changes column would
have people's names in them.

00:16:38.700 --> 00:16:41.700
It would be the last commit made.

00:16:41.700 --> 00:16:45.700
It doesn't here because this was taken
during WWDC and they're all here.

00:16:45.820 --> 00:16:49.700
So you can see things like
post-commit PowerPC Mac OS X,

00:16:49.700 --> 00:16:51.700
post-commit leaks PowerPC Mac OS X.

00:16:51.700 --> 00:16:55.580
So they have multiple different kinds
of tests they run after every commit.

00:16:55.750 --> 00:16:58.700
You can see how long it takes
to build any of these things,

00:16:58.700 --> 00:17:00.900
so you can actually see, "Oh, wow,
I made a change to the project and

00:17:00.910 --> 00:17:04.810
now my build time doubled." You can
quickly click through to see the

00:17:04.810 --> 00:17:08.500
actual failures and click through
to find the actual build numbers,

00:17:08.500 --> 00:17:09.580
things like that.

00:17:09.720 --> 00:17:12.700
As you can imagine,
this saves them a lot of time.

00:17:12.780 --> 00:17:15.700
They're so oriented to performance.

00:17:15.700 --> 00:17:19.360
It makes it very easy for them to
quickly pinpoint what changes caused

00:17:19.360 --> 00:17:21.640
a particular performance regression.

00:17:21.700 --> 00:17:23.700
Now, moving on.

00:17:23.700 --> 00:17:25.380
Like I said,
I'm going to get through this

00:17:25.380 --> 00:17:26.700
quick so we have lots of Q&A.

00:17:28.520 --> 00:17:32.060
So you got your build bots,
you got your revision control systems,

00:17:32.100 --> 00:17:33.500
you got your other things.

00:17:33.560 --> 00:17:37.620
What about making the
builds themselves go faster?

00:17:37.700 --> 00:17:39.740
Xcode includes distributed builds.

00:17:39.760 --> 00:17:41.760
It includes two kinds
of distributed builds.

00:17:41.760 --> 00:17:49.870
There's disk CC for casual ad hoc,
no administrative overhead builds,

00:17:50.040 --> 00:17:52.700
but very limited scalability.

00:17:52.700 --> 00:17:54.400
As you can see, it flattens out.

00:17:54.470 --> 00:17:55.560
It's the blue line.

00:17:55.630 --> 00:17:58.450
Then there's DNB,
or dedicated network builds.

00:17:58.560 --> 00:18:02.540
Requires some administration up front,
but with extreme scalability.

00:18:02.540 --> 00:18:06.500
We've scaled it through 30 machines,
and we will continue throwing more

00:18:06.500 --> 00:18:09.770
machines at it until it levels off,
figure out why it's leveling off,

00:18:09.840 --> 00:18:13.600
and then throw more machines at it
once we get it to scale some more.

00:18:13.700 --> 00:18:16.610
So this graph here sees
that at two volunteers,

00:18:16.820 --> 00:18:20.100
meaning two machines
contributing to the build,

00:18:20.100 --> 00:18:21.580
they're about the same.

00:18:21.690 --> 00:18:24.100
Disk CC scales a little
better in the beginning,

00:18:24.100 --> 00:18:26.040
up to about eight or 10 machines.

00:18:26.240 --> 00:18:27.370
These are Intel machines.

00:18:27.410 --> 00:18:29.630
On PowerPC, it's about six.

00:18:29.730 --> 00:18:32.200
And then after that, DNB keeps scaling.

00:18:32.340 --> 00:18:34.360
Disk CC kind of flattens out.

00:18:34.360 --> 00:18:37.260
It even starts slowing down eventually.

00:18:38.610 --> 00:18:42.210
So, some details on this,
because choosing between

00:18:42.210 --> 00:18:45.130
the two is important,
and you probably want to make the

00:18:45.130 --> 00:18:46.840
choice once and stick with it.

00:18:46.890 --> 00:18:51.610
DiskCC, really easy to use,
but has some limitations.

00:18:51.660 --> 00:18:54.700
In particular,
this CC works by pre-compiling all the

00:18:54.700 --> 00:18:57.040
source files on your local machine.

00:18:57.280 --> 00:19:01.000
And then sending that gigantic
resulting source file over the network

00:19:01.000 --> 00:19:05.380
to some random remote volunteer,
which will then do the compilation.

00:19:05.430 --> 00:19:07.780
That means it's very
sensitive to network speed,

00:19:07.780 --> 00:19:11.560
and as you can imagine,
if you're trying to precompile, say,

00:19:11.560 --> 00:19:14.550
12 files because you've got
six builders that each want

00:19:14.550 --> 00:19:18.120
to build two things at once,
your local machine very

00:19:18.120 --> 00:19:19.810
quickly becomes a bottleneck.

00:19:19.920 --> 00:19:22.350
And your local machine needs
to be effectively the most

00:19:22.430 --> 00:19:24.870
powerful computer in the network.

00:19:25.080 --> 00:19:28.860
But it's very easy to set up and use,
which may be, you know, tempting.

00:19:28.960 --> 00:19:34.000
And there are some extreme
compatibility requirements with it.

00:19:34.000 --> 00:19:37.640
Each machine must be running
the same version of the OS,

00:19:37.700 --> 00:19:40.480
not just like 10.4.7,
but the little build number

00:19:40.480 --> 00:19:41.480
that you'll see in the panel.

00:19:42.700 --> 00:19:45.520
They need to be running
the exact same compiler,

00:19:45.720 --> 00:19:49.230
same build number of the compiler,
and that's because of the precompiled

00:19:49.240 --> 00:19:50.670
header compatibility issues.

00:19:50.670 --> 00:19:53.770
And all the machines have
to be the same architecture,

00:19:53.770 --> 00:19:56.350
again, because of precompiled headers.

00:19:56.980 --> 00:20:04.190
Now, dedicated network builds,
on the other hand, harder to set up,

00:20:04.190 --> 00:20:04.190
but great scalability.

00:20:04.910 --> 00:20:09.130
Each builder needs to have a static
IP address or a resolvable name.

00:20:09.290 --> 00:20:12.100
We don't support Bonjour with it,
and that's because of

00:20:12.100 --> 00:20:13.750
the way the cache works.

00:20:13.870 --> 00:20:16.180
The builders need to be stable,
meaning you don't want to have

00:20:16.180 --> 00:20:18.230
a pool of builders where some
of them come and go a lot,

00:20:18.260 --> 00:20:23.330
because it'll cause a lot
of cache flashing if you do.

00:20:23.330 --> 00:20:23.330
However,

00:20:23.450 --> 00:20:27.870
It's designed to minimize the network
traffic required between your machine,

00:20:28.100 --> 00:20:32.230
the one doing the building,
and the building volunteers.

00:20:32.420 --> 00:20:36.090
And it's really designed so that
you can be sitting on that beach,

00:20:36.090 --> 00:20:38.440
and now with iChat's
little background thing,

00:20:38.440 --> 00:20:41.830
still look like you're in the office,
and be sitting on something like

00:20:41.830 --> 00:20:45.240
an ADSL or an airport connection
and do those builds effectively

00:20:45.240 --> 00:20:47.260
on dedicated network builds.

00:20:47.280 --> 00:20:49.480
However,
it uses more disk space on the builders,

00:20:49.520 --> 00:20:51.680
so that's something to keep in mind.

00:20:51.710 --> 00:20:54.330
And the local machine really is
nothing more than a glorified

00:20:54.450 --> 00:20:57.140
file server at that point in time,
so you can actually effectively

00:20:57.140 --> 00:20:58.410
use the machine for other things.

00:20:58.510 --> 00:21:03.570
We get a lot of reports with disk CC that
when they're doing builds with disk CC,

00:21:03.670 --> 00:21:07.170
the local machine is really
kind of doggy and chugging,

00:21:07.170 --> 00:21:09.980
and that just doesn't happen with D&B.

00:21:09.980 --> 00:21:11.760
Now,
we'll get into the cache in a minute.

00:21:11.900 --> 00:21:15.300
The compatibility requirements
are that all machines must

00:21:15.300 --> 00:21:18.270
be the same architecture,
same CPU architecture,

00:21:18.270 --> 00:21:21.540
and all machines need to have
a similar version of OS X,

00:21:21.540 --> 00:21:25.440
meaning that it'll generally
work with 10.4.6 and 10.4.7,

00:21:25.620 --> 00:21:29.900
but not 10.4.7 and 10.5,
Or with 10.5 and say 10.5.1,

00:21:29.900 --> 00:21:32.110
whenever that would happen.

00:21:32.720 --> 00:21:35.860
So, we should talk about the
caching in DNB for a minute.

00:21:36.170 --> 00:21:41.460
What it's actually doing is when it
runs the compiler on the remote machine,

00:21:41.460 --> 00:21:45.930
it does it in a true-rooted file system
that has a special file system underneath

00:21:45.930 --> 00:21:49.600
that mirrors all the files from your
local machine out to that machine.

00:21:49.600 --> 00:21:53.440
So it's exactly like you were running
the compiler on your local machine,

00:21:53.440 --> 00:21:55.600
it just happens to be somewhere else.

00:21:55.600 --> 00:21:57.590
But it goes beyond that.

00:21:57.590 --> 00:22:01.390
The way the caching actually works
is that every machine in the build

00:22:01.390 --> 00:22:06.490
farm is sort of responsible for
a subset of the overall files.

00:22:06.600 --> 00:22:09.710
And they'll talk with each
other to resolve the cache hits

00:22:09.800 --> 00:22:11.600
or misses amongst each other.

00:22:11.650 --> 00:22:14.980
So what this means is that actually
every file in the build only has to be

00:22:14.980 --> 00:22:17.420
copied from your local machine once,
if at all.

00:22:17.600 --> 00:22:20.810
And the "if at all" part is that, say,
you have the same version

00:22:20.810 --> 00:22:23.600
of lib system on your local
machine as the remote machine.

00:22:23.600 --> 00:22:25.600
The remote machine is smart enough
to get it from the local machine.

00:22:25.600 --> 00:22:27.410
So it's a simple file system then.

00:22:27.660 --> 00:22:31.600
And the builders, like I said,
they mirror the files between each other.

00:22:31.630 --> 00:22:34.710
And the cache is
organized by file content,

00:22:34.710 --> 00:22:35.600
not path.

00:22:35.600 --> 00:22:38.710
So if I'm building something
by a DNB and my path is,

00:22:38.710 --> 00:22:42.740
you know, volumes, data, sources, blah,
blah, blah, blah, blah,

00:22:42.880 --> 00:22:48.600
and Andy's building something and it's,
you know, users, Andy, something else,

00:22:48.600 --> 00:22:50.970
the cache is still going to be
warmed up by both of us and we're

00:22:50.970 --> 00:22:53.600
still going to take advantage of
each other warming that cache.

00:22:53.600 --> 00:22:53.600
So, that's the way it works.

00:22:53.600 --> 00:22:55.600
So, that's the way it works.

00:22:55.600 --> 00:22:57.600
Cache warm up can take
a little bit of time.

00:22:57.600 --> 00:23:01.600
We see continued speed
ups after 10 builds.

00:23:01.600 --> 00:23:05.600
And we're reengineering this for Leopard.

00:23:05.600 --> 00:23:09.330
We did this in 2.3,
but we were limited by some of the

00:23:09.420 --> 00:23:11.600
limitations in the file systems on Tiger.

00:23:11.600 --> 00:23:15.390
And they've gotten a
lot better in Leopard.

00:23:15.640 --> 00:23:17.590
And DNB is improving accordingly.

00:23:17.600 --> 00:23:23.590
It also uses the FSEvents stuff to
monitor changes in the local file system.

00:23:23.710 --> 00:23:25.600
So if you added a source
file and hit save,

00:23:25.600 --> 00:23:27.600
that will automatically
invalidate the cache as needed.

00:23:29.300 --> 00:23:30.600
So it's pretty neat stuff.

00:23:30.600 --> 00:23:35.720
And this is really to illustrate, DistCC,
you need a supercomputer on your desktop,

00:23:35.750 --> 00:23:38.720
and the builders,
it's less critical what they are.

00:23:38.790 --> 00:23:41.890
It's great for an ad hoc network
or like office network where,

00:23:41.900 --> 00:23:44.420
you know,
you could have finances computers

00:23:44.420 --> 00:23:47.490
be contributing to compilations,
things like that.

00:23:47.760 --> 00:23:51.540
Whereas D&B,
you want that rack of XSERVs,

00:23:51.540 --> 00:23:55.600
or we're using racks of Mac Minis,
actually, the Core Duo Mac Minis.

00:23:55.600 --> 00:23:58.730
You want that, you want it with a fast
network between those machines,

00:23:58.740 --> 00:24:02.700
but you don't care so much about
the connection back to your machine.

00:24:03.440 --> 00:24:08.120
So, with that said,
how do you architect or construct or

00:24:08.120 --> 00:24:14.300
organize a project to take maximum
advantage of distributed builds?

00:24:14.310 --> 00:24:18.300
And one of the issues
with the build system,

00:24:18.300 --> 00:24:20.730
and like I said on the slide,
we don't really like it,

00:24:20.860 --> 00:24:24.300
but it's the way it is today and we're
looking to fix it sometime in the future,

00:24:24.300 --> 00:24:28.130
is that the only thing that gets
parallelized in a distributed build

00:24:28.130 --> 00:24:31.580
is the compilation of source files,
not targets and not

00:24:31.580 --> 00:24:33.300
projects at this time.

00:24:33.300 --> 00:24:37.210
So the more source files
you have per target,

00:24:37.210 --> 00:24:40.930
the more parallelization you will see.

00:24:41.610 --> 00:24:44.530
And DistCC,
it's going to top out at about

00:24:44.550 --> 00:24:46.500
10 simultaneous compile jobs.

00:24:46.520 --> 00:24:49.360
So if you have 20 or 30
source files per target,

00:24:49.390 --> 00:24:51.560
DistCC will do pretty good with that.

00:24:51.560 --> 00:24:55.680
D&B continues scaling at least 30,
so it's going to take more advantage

00:24:55.680 --> 00:24:59.480
of that and get more source files
per target the better off you are.

00:25:01.610 --> 00:25:04.040
So, bringing it all together.

00:25:04.070 --> 00:25:06.740
Like I said,
I was going to whip through this.

00:25:06.870 --> 00:25:08.510
So, complex projects.

00:25:08.760 --> 00:25:10.770
They're not bad, they're just inevitable.

00:25:10.900 --> 00:25:12.500
You're going to be dealing with them.

00:25:12.500 --> 00:25:18.650
Use those configurations to optimize
the type of the product build.

00:25:18.990 --> 00:25:23.600
Per architecture build settings,
they're great when you need them.

00:25:23.600 --> 00:25:26.070
In general,
I would recommend just avoiding

00:25:26.070 --> 00:25:29.710
them just because it makes testing
that much more interesting.

00:25:30.210 --> 00:25:35.400
You use the revision control systems and
use them to track your changes over time.

00:25:35.500 --> 00:25:39.660
Use some of these additional automated
tools to help you to validate and

00:25:39.820 --> 00:25:42.090
guarantee project quality over time.

00:25:42.100 --> 00:25:45.440
Distributed builds:
You can use the distributed

00:25:45.460 --> 00:25:46.980
builds to make things go faster.

00:25:47.100 --> 00:25:51.650
Every architecture you build for
adds one compile process or one

00:25:51.650 --> 00:25:54.100
compiler invocation per file.

00:25:54.100 --> 00:26:00.100
If you have 20 source files per target
and you turn on Build 4 Away Universal,

00:26:00.240 --> 00:26:05.090
that's going to be 80.

00:26:05.100 --> 00:26:07.150
App data, though,
don't worry about the size of

00:26:07.150 --> 00:26:10.100
the binaries because the app data
is still going to outweigh them.

00:26:10.100 --> 00:26:11.990
It's just not going to
be that big of a deal.

00:26:12.100 --> 00:26:16.060
And with that,
here's a bunch more information.

00:26:16.090 --> 00:26:19.920
You can always contact, well,
I don't think that email

00:26:19.920 --> 00:26:22.380
address is going to work,
Matt.

00:26:27.050 --> 00:26:32.680
Yeah, so Matt will come up and say
his email address or something.

00:26:32.890 --> 00:26:38.710
The Subversion site and repositories,
they're excellent.

00:26:38.930 --> 00:26:42.660
There's lots of scripts in
the Hook scripts directories

00:26:42.710 --> 00:26:44.890
in the Subversion repository.

00:26:45.010 --> 00:26:49.660
All kinds of different things you
can use to automate your stuff with.

00:26:49.750 --> 00:26:52.570
Xcode itself has the Xcode
build command line tool for

00:26:52.660 --> 00:26:54.610
building products and projects.

00:26:54.730 --> 00:26:58.790
It can set the target and
the target configuration,

00:26:58.790 --> 00:27:00.480
things like that.

00:27:00.480 --> 00:27:02.720
So it's very easy to
plug that into stuff.

00:27:02.800 --> 00:27:04.440
There's the Build Bot.

00:27:04.440 --> 00:27:07.410
The other Build Bot that
I mentioned was Cruise Control.

00:27:07.480 --> 00:27:08.860
So look up Cruise Control.

00:27:08.860 --> 00:27:12.130
Actually, better yet,
look up Cruise Control and Martin Fowler

00:27:12.130 --> 00:27:15.420
because he did a wonderful write-up
on continuous integration and using

00:27:15.420 --> 00:27:21.250
Build Bots to sort of keep the
complexity of your project under control.

00:27:21.270 --> 00:27:23.810
And documentation, sample code,
other resources that the

00:27:23.810 --> 00:27:24.800
developer about Apple.com has.

00:27:24.800 --> 00:27:28.800
So there's a lot of stuff
that you can do with it.

00:27:28.800 --> 00:27:31.720
I think it's a great way to get your