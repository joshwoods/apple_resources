WEBVTT

00:00:10.180 --> 00:00:12.100
Hi, everyone.

00:00:12.100 --> 00:00:13.540
Welcome to our session.

00:00:13.540 --> 00:00:17.740
My name is Sayli,
and Brad Ford and I are going to be

00:00:17.740 --> 00:00:22.840
your tour guides for the next one hour
as we go on a whirlwind tour through

00:00:22.840 --> 00:00:24.990
the land of modern QuickTime audio.

00:00:25.000 --> 00:00:28.650
That's me, Sayli.

00:00:32.090 --> 00:00:37.500
So, a quick preview of what we'll
be covering in this session.

00:00:37.500 --> 00:00:43.080
We'll start with a general overview of
QuickTime Audio and its capabilities

00:00:43.080 --> 00:00:47.900
and contrast this a little bit
with what Core Audio has to offer.

00:00:48.080 --> 00:00:52.160
Because often when you're writing
your audio-based applications,

00:00:52.230 --> 00:00:56.130
one of the first questions you
face during development time is,

00:00:56.130 --> 00:00:59.860
"What set of APIs should I use?"
Hopefully this session gives

00:00:59.860 --> 00:01:03.550
you a little more information
to make a better decision.

00:01:04.650 --> 00:01:09.950
Next, as you know, QuickTime is a rather
mature piece of software,

00:01:09.970 --> 00:01:14.840
and over the years, we've had the need to
deprecate certain APIs.

00:01:14.840 --> 00:01:18.840
With some other APIs,
although we've not deprecated them,

00:01:18.840 --> 00:01:24.190
we highly discourage the use of
them just because there's newer,

00:01:24.190 --> 00:01:26.860
smarter,
better ways of doing the same thing.

00:01:26.860 --> 00:01:29.200
So in this section,
we'll talk about what's

00:01:29.320 --> 00:01:32.930
deprecated and ill-advised,
and then we'll steer you towards

00:01:32.930 --> 00:01:34.960
what we'd rather have you use.

00:01:36.750 --> 00:01:40.580
And finally, we'll cover some new
features in QuickTime Audio.

00:01:40.580 --> 00:01:45.720
These were either introduced
in QuickTime 7.1 or Leopard.

00:01:46.860 --> 00:01:52.670
So starting with our overview,
QuickTime is a layer based

00:01:52.800 --> 00:01:53.900
on top of Core Audio.

00:01:53.900 --> 00:02:01.450
So it uses Core Audio's audio units,
the audio converter, the output unit,

00:02:01.470 --> 00:02:03.580
et cetera, in its signal processing.

00:02:03.580 --> 00:02:09.640
But what QuickTime adds on top is a sort
of value that you can see in terms of

00:02:09.640 --> 00:02:14.800
built-in capabilities that are really
useful for multimedia applications.

00:02:15.380 --> 00:02:20.210
QuickTime provides a really rich
file and data format and some other

00:02:21.060 --> 00:02:26.060
built-in capabilities that I'll get into
more detail in the next four slides.

00:02:28.650 --> 00:02:32.250
So starting with import,
QuickTime transparently opens a

00:02:32.250 --> 00:02:34.960
really wide range of containers.

00:02:34.960 --> 00:02:39.660
These include not only QuickTime's
own .mov multimedia container,

00:02:39.660 --> 00:02:45.550
but that second sub-bullet down there is
all the formats supported by Core Audio.

00:02:45.580 --> 00:02:49.640
So QuickTime uses Core Audio's
audio file format APIs,

00:02:49.650 --> 00:02:55.340
and also some other formats such as DV,
AVI, that Core Audio does not support,

00:02:55.350 --> 00:03:01.190
and then a whole host of third-party
formats such as DivX and Windows Media.

00:03:01.310 --> 00:03:05.680
This is because QuickTime's import
architecture is completely expandable

00:03:06.120 --> 00:03:08.020
using third-party components.

00:03:08.020 --> 00:03:13.040
On the data format side,
QuickTime decodes, again,

00:03:13.040 --> 00:03:17.420
a whole host of containers and
also supports third-party decoders.

00:03:17.590 --> 00:03:21.200
So if you use QuickTime's

00:03:21.400 --> 00:03:24.600
QuickTime Audio APIs,
you get all this rich file and

00:03:24.600 --> 00:03:27.600
data format support for free,
just out of the box.

00:03:27.600 --> 00:03:30.120
So if that's something
useful for your application,

00:03:30.120 --> 00:03:33.080
then QuickTime Audio APIs are
definitely the way to go.

00:03:35.520 --> 00:03:39.560
On the playback side,
QuickTime gives you all that.

00:03:39.590 --> 00:03:43.680
Multimedia synchronization that
helps you sync audio with video.

00:03:43.700 --> 00:03:44.940
Media time scaling.

00:03:44.940 --> 00:03:50.280
This is where during editing,
when you edit media in QuickTime,

00:03:50.280 --> 00:03:53.350
you can assign rate and
duration to your media.

00:03:53.630 --> 00:03:57.100
What this means is during playback,
rate scalers can be

00:03:57.180 --> 00:03:58.500
applied to your media.

00:03:58.540 --> 00:04:03.400
And if you have two tracks that have
media that contain different durations,

00:04:03.400 --> 00:04:05.480
you can fit those together.

00:04:05.580 --> 00:04:10.820
Then also we have some built-in
capabilities for pitch and rate control.

00:04:10.850 --> 00:04:14.320
And using the rate changes
preserve pitch property,

00:04:14.320 --> 00:04:18.960
you can get the non-Chipmunk-style
audio during rate changes.

00:04:19.260 --> 00:04:21.910
There's volume and spectral metering.

00:04:22.150 --> 00:04:24.790
And QuickTime does movie-level mixing.

00:04:24.810 --> 00:04:28.620
So if you have multiple tracks,
multiple audio tracks in your movie,

00:04:28.680 --> 00:04:31.900
QuickTime will handle the
mixing of all these together.

00:04:31.920 --> 00:04:34.940
And QuickTime also does
channel layout-based mixing.

00:04:34.940 --> 00:04:38.000
So if you have, say,
5.1 content and you're

00:04:38.000 --> 00:04:40.360
playing it to a device that's,
say, stereo,

00:04:40.410 --> 00:04:43.780
QuickTime can do that mixing for you.

00:04:45.430 --> 00:04:49.520
In QuickTime 7,
we introduced a new set of APIs called

00:04:49.540 --> 00:04:51.300
the Movie Audio Extraction APIs.

00:04:51.300 --> 00:04:57.140
And this is a way for you to suck
raw PCM data out of the movie.

00:04:57.140 --> 00:05:03.300
You can consider this as your one-stop
shop for getting decompressed,

00:05:03.530 --> 00:05:05.360
mixed movie audio samples.

00:05:05.360 --> 00:05:09.610
And these APIs are thread-safe,
which means you can perform

00:05:09.610 --> 00:05:11.820
extraction on a worker thread.

00:05:12.540 --> 00:05:16.480
And provided the audio codecs,
the underlying audio codecs that

00:05:16.480 --> 00:05:18.160
you're using are thread-safe.

00:05:18.160 --> 00:05:24.280
And this set of APIs gives
you a sort of a convenience.

00:05:24.280 --> 00:05:28.150
It takes you a layer higher than, say,
the audio converter.

00:05:28.320 --> 00:05:34.030
QuickTime deals with all the intricacies
and the details that are related with

00:05:34.130 --> 00:05:38.780
mixing and converting of audio and
abstracts your application away from this

00:05:38.880 --> 00:05:42.340
so that you don't have to go down to,
say, the level of the audio converter

00:05:42.340 --> 00:05:46.020
and do any of the mixing yourself
or the decoding yourself.

00:05:46.030 --> 00:05:48.330
So that's a huge gain.

00:05:50.200 --> 00:05:53.720
Just as with Decode,
QuickTime can encode a

00:05:53.720 --> 00:05:55.210
whole host of data formats.

00:05:55.280 --> 00:06:00.200
And with AAC and AMR,
license is required if you're

00:06:00.610 --> 00:06:02.180
doing the encode on Windows.

00:06:02.180 --> 00:06:07.160
And then we have a very useful,
the standard audio compression component

00:06:07.160 --> 00:06:12.160
and its APIs that Brad will get into
much greater detail in a later section.

00:06:12.160 --> 00:06:15.740
But these are a way to very
easily configure compression

00:06:15.740 --> 00:06:17.530
settings during export.

00:06:19.020 --> 00:06:22.460
And again, QuickTime writes to a
whole host of containers,

00:06:22.470 --> 00:06:28.960
and QuickTime's playback and export
and extraction paths are all the same,

00:06:28.960 --> 00:06:32.020
so this means what you
hear is what you get.

00:06:32.050 --> 00:06:35.140
And finally,
QuickTime APIs are multi-platform,

00:06:35.140 --> 00:06:37.580
so you can use them on Windows.

00:06:38.780 --> 00:06:42.740
So that's all the good
stuff about QuickTime Audio,

00:06:42.820 --> 00:06:47.210
but it might be the case that the
application that you're writing is

00:06:47.210 --> 00:06:50.960
very audio-centric or audio-only.

00:06:50.960 --> 00:06:55.700
Maybe you're not really caring about,
say, video synchronization.

00:06:55.700 --> 00:06:59.920
You don't really care much about
file and data format support.

00:06:59.920 --> 00:07:03.520
Maybe you're writing a very specific
signal processing application.

00:07:03.660 --> 00:07:05.670
In that case,
Core Audio is a better choice for

00:07:05.670 --> 00:07:11.620
you because basically it provides a
lot greater control on the underlying

00:07:11.950 --> 00:07:15.320
processing units than QuickTime Audio.

00:07:15.320 --> 00:07:18.920
And in general, it has a lot more
audio-specific capabilities than

00:07:18.920 --> 00:07:20.760
QuickTime Audio can provide.

00:07:20.760 --> 00:07:26.560
So a way of thinking of this could be if
you need multimedia presentation support,

00:07:26.630 --> 00:07:30.560
file and data format support,
QuickTime Audio is more the

00:07:30.920 --> 00:07:33.070
kind of APIs you'd want to use.

00:07:33.530 --> 00:07:37.460
If it's more signal processing specific,
not really related to video,

00:07:37.460 --> 00:07:39.900
Core Audio APIs might be a better choice.

00:07:39.900 --> 00:07:45.600
That sort of concludes this first
section of the QuickTime Audio overview.

00:07:45.600 --> 00:07:50.680
And I'm now going to hand it to Brad,
where he'll talk about deprecated APIs.

00:07:50.680 --> 00:07:52.120
But don't worry, I'll be back.

00:07:58.760 --> 00:08:00.000
Thanks, Sayli.

00:08:00.170 --> 00:08:04.350
And thank you all for sticking it
out with us this late in the day.

00:08:04.520 --> 00:08:09.380
It is the last session of the day,
and I'll try not to get too punchy.

00:08:11.430 --> 00:08:16.420
API best practices is
a nice way of saying,

00:08:16.450 --> 00:08:19.810
"Stay away from these
APIs that will hurt you."

00:08:21.290 --> 00:08:24.210
So first let me ask a
philosophical question,

00:08:24.210 --> 00:08:26.230
and maybe I could ask you all
to write a little mini essay

00:08:26.230 --> 00:08:28.480
on this of 500 words or less.

00:08:28.510 --> 00:08:31.230
What is QuickTime to you?

00:08:31.700 --> 00:08:34.400
I guess the answer might be different
depending on how much pain you've

00:08:34.460 --> 00:08:38.540
gone through through the years,
what level of APIs you've used.

00:08:38.880 --> 00:08:43.610
It's either suited all your needs,
some of your needs, or been woefully

00:08:43.610 --> 00:08:45.240
inadequate in some areas.

00:08:45.270 --> 00:08:48.650
One thing we can say
about QuickTime is that

00:08:49.540 --> 00:08:53.500
It is 15 years old,
and that might give a perception

00:08:53.500 --> 00:08:56.440
of QuickTime as a whole,
as a framework,

00:08:56.440 --> 00:08:57.940
as something looking like this.

00:08:58.060 --> 00:09:02.970
This should be rehashed to you if you
were here for session 212 this morning.

00:09:02.970 --> 00:09:04.060
That's okay.

00:09:04.060 --> 00:09:05.990
Seeing it a second time is good for you.

00:09:06.020 --> 00:09:11.800
Underneath it says, big, bloated, crufty,
and difficult to use.

00:09:12.520 --> 00:09:16.610
That's the perception that one
can receive when you say that a

00:09:16.610 --> 00:09:20.790
piece of software is 15 years old,
because as we know, in software years,

00:09:20.790 --> 00:09:22.600
15 years is like 90.

00:09:22.600 --> 00:09:26.140
But this is, in fact, a myth,
and I'm going to debunk that myth,

00:09:26.150 --> 00:09:28.690
and I'm going to tell
you why it's not true.

00:09:28.700 --> 00:09:32.450
The truth is, QuickTime is modern,
very modern.

00:09:32.480 --> 00:09:35.980
Our audio engine,
which this talk is about audio,

00:09:36.020 --> 00:09:39.920
so I'll just focus on the
audio section of QuickTime.

00:09:39.920 --> 00:09:42.450
The engine was entirely
rewritten in version 212.

00:09:42.520 --> 00:09:44.990
It was rewritten in version 7.0,
and that was two years or

00:09:45.050 --> 00:09:46.190
less than two years ago.

00:09:46.200 --> 00:09:50.410
And it sits atop Core Audio,
which is a very recent architecture

00:09:50.420 --> 00:09:56.360
and provides low latency and
sample accurate audio rendering.

00:09:56.360 --> 00:10:00.260
So the audio engine in QuickTime is
very modern and very good.

00:10:00.300 --> 00:10:02.520
It's built atop Core Audio.

00:10:02.520 --> 00:10:06.660
The only thing that's really old
about QuickTime are the interfaces

00:10:06.660 --> 00:10:10.540
you use to perform the tasks
that you're used to performing.

00:10:10.540 --> 00:10:12.500
And there's a good reason for that.

00:10:12.520 --> 00:10:17.520
People that have used our
functions for years and years,

00:10:17.520 --> 00:10:19.520
we consider that a contract
with those developers.

00:10:19.520 --> 00:10:24.890
And we go through long API approval
processes internally before

00:10:24.890 --> 00:10:26.510
we unleash something on you.

00:10:26.520 --> 00:10:29.520
We want to make sure
that we get it right,

00:10:29.520 --> 00:10:33.520
because we intend to live with APIs that
we publish for a very long time.

00:10:33.520 --> 00:10:36.520
And so we think long and hard
before we deprecate something,

00:10:36.520 --> 00:10:39.380
because we don't want to
leave people stranded.

00:10:39.640 --> 00:10:41.800
But we do take API deprecation seriously.

00:10:41.800 --> 00:10:46.940
When it's appropriate,
we feel it is necessary and good

00:10:46.940 --> 00:10:53.880
and right to deprecate needed
APIs so that our outer shell matches

00:10:54.090 --> 00:10:59.040
the cleanliness and beautifulness
of our internal workings.

00:10:59.740 --> 00:11:02.900
We are modernizing our
API as well as our internals.

00:11:03.080 --> 00:11:04.980
This is an ongoing process.

00:11:04.980 --> 00:11:07.700
We talked to you this morning
about movie audio extraction,

00:11:07.730 --> 00:11:12.170
audio context inserts,
and some of these other newer interfaces

00:11:12.280 --> 00:11:17.860
that are absolutely bright and shiny
and new great ways to do things.

00:11:17.860 --> 00:11:22.580
So what we want to do in this
section is just tell you which of

00:11:22.780 --> 00:11:28.360
the five million APIs to not use
and which of those are good to use.

00:11:30.570 --> 00:11:34.940
So, Sound Manager is deprecated
officially in Leopard.

00:11:34.950 --> 00:11:37.810
They've been saying it on the
Core Audio list for about two years now,

00:11:37.810 --> 00:11:41.190
but I think they really
mean business this time.

00:11:41.200 --> 00:11:44.150
What does this mean
for you and your code?

00:11:44.190 --> 00:11:46.370
In the area of Codex,

00:11:46.590 --> 00:11:50.390
And I'm only going to
speak to codec writers.

00:11:50.470 --> 00:11:55.230
If you write sound codecs,
if you've written SCOMs in the past,

00:11:55.310 --> 00:11:58.850
sound compressor decomponents,
know that these are deprecated

00:11:59.080 --> 00:12:02.200
and you should be writing audio
encoder components instead.

00:12:02.200 --> 00:12:03.990
This should not come
as a surprise to you.

00:12:05.110 --> 00:12:06.650
The same goes for SDECs.

00:12:06.650 --> 00:12:09.980
They are deprecated in Leopard,
and you should be writing

00:12:09.980 --> 00:12:11.600
audio decoders instead.

00:12:11.600 --> 00:12:16.570
Don't be alarmed by this if you're
worried about compatibility with

00:12:16.570 --> 00:12:19.660
applications that use Sound Manager.

00:12:19.660 --> 00:12:24.170
There is a compatibility
layer built atop ADECs and

00:12:24.220 --> 00:12:27.370
AINC components called the SMAC.

00:12:27.410 --> 00:12:31.360
So if you write an AINC or an ADEC,
you'll still be compatible with

00:12:31.360 --> 00:12:33.390
apps that use Sound Manager.

00:12:33.400 --> 00:12:39.880
It's just that it will... only expose
interface that's acceptable for

00:12:39.910 --> 00:12:47.490
Sound Manager to or one channel of audio
and sample rates less than 64 kilohertz.

00:12:48.930 --> 00:12:51.890
Direct user access to codec
components is discouraged.

00:12:52.030 --> 00:12:55.370
So I was speaking to codec writers
in the first part because we believe

00:12:55.370 --> 00:12:58.740
at this point you should not,
in any of your code,

00:12:58.740 --> 00:13:03.810
need to open a component on a
codec component for any reason.

00:13:04.380 --> 00:13:08.460
We think that any operation
that you would perform

00:13:08.460 --> 00:13:12.860
querying a component directly,
you can now use the Audio Converter

00:13:12.940 --> 00:13:14.770
API to do the same thing.

00:13:14.780 --> 00:13:18.640
Whether it be to get the magic cookie,
the channel layout,

00:13:18.640 --> 00:13:23.010
various information about the formats
that are acceptable for the codec,

00:13:23.120 --> 00:13:26.080
we think you can use the
Audio Converter for that.

00:13:26.080 --> 00:13:29.700
If you disagree with me,
please come and talk to us afterwards

00:13:29.770 --> 00:13:34.000
and tell us why you think you still
need to dip down to the codec interface.

00:13:34.380 --> 00:13:35.600
as a user.

00:13:38.230 --> 00:13:40.560
Next up, conversion.

00:13:40.650 --> 00:13:45.140
Sound converter is really the knife in
the chest for sound manager deprecation.

00:13:45.140 --> 00:13:51.510
Many people just love hanging on to
that sound converter because it's

00:13:51.510 --> 00:13:53.180
served us well for so many years.

00:13:53.200 --> 00:13:55.630
It is deprecated too.

00:13:55.850 --> 00:14:00.960
Your choices are: use Audio Converter,
which has a very similar interface.

00:14:01.020 --> 00:14:03.700
It's in the Audio Toolbox framework.

00:14:03.700 --> 00:14:10.800
Or, if you can release your app with
QuickTime 7.1 or later compatibility,

00:14:10.900 --> 00:14:13.330
we highly recommend use of
the SC Audio Compression

00:14:13.420 --> 00:14:17.810
APIs because they give you an
audio converter-style interface,

00:14:17.840 --> 00:14:22.830
they give you high-resolution audio,
mixing, and they give you windows.

00:14:23.760 --> 00:14:29.000
That being Windows,
like Microsoft Windows.

00:14:29.030 --> 00:14:34.790
One thing we've seen people do in
the past is a sort of combination

00:14:34.810 --> 00:14:41.200
of get media sample plus sound
converter fill buffer in order

00:14:41.200 --> 00:14:44.730
to get PCM audio out of a file.

00:14:45.300 --> 00:14:48.060
This is not the correct way to do it.

00:14:48.120 --> 00:14:48.990
Let me tell you why.

00:14:48.990 --> 00:14:53.830
If you're familiar with movies,
the QuickTime architecture,

00:14:53.910 --> 00:14:55.600
a movie has tracks.

00:14:55.600 --> 00:14:57.320
Tracks have media.

00:14:57.320 --> 00:15:00.400
Media have samples, media samples.

00:15:00.400 --> 00:15:04.950
If you need to drill down to the
media sample layer to get a sample

00:15:05.140 --> 00:15:09.820
out of a QuickTime movie and then
decompress it yourself manually

00:15:09.820 --> 00:15:16.300
using sound converter fill buffer,
you're not getting a mix of the

00:15:16.300 --> 00:15:17.890
audio across multiple tracks.

00:15:18.040 --> 00:15:22.030
And you're also preventing us
from doing interesting things with

00:15:22.190 --> 00:15:25.900
the media samples in the media.

00:15:25.910 --> 00:15:30.180
You might be making incorrect
assumptions about how we're

00:15:30.180 --> 00:15:31.400
going to lay out the media.

00:15:31.400 --> 00:15:35.950
And so it's much better if you can
use movie audio extraction instead.

00:15:36.000 --> 00:15:38.610
The same goes for put
movie into typed handle.

00:15:38.700 --> 00:15:40.550
Also,
it's been around for a long time and

00:15:40.550 --> 00:15:45.200
people have been using this method
to sort of do a mini encode or a

00:15:45.260 --> 00:15:50.300
mini decode of some number of samples
from a source movie and to put them

00:15:50.300 --> 00:15:52.570
into an uncompressed buffer of audio.

00:15:52.640 --> 00:15:55.320
This is discouraged as well
because it's a lot slower.

00:15:55.410 --> 00:15:58.900
It incurs a penalty of set
up and tear down that movie

00:15:58.900 --> 00:16:00.660
audio extraction does not.

00:16:00.730 --> 00:16:05.500
So please, please, please use movie audio
extraction for getting PCM audio

00:16:05.680 --> 00:16:07.950
out of a QuickTime movie.

00:16:11.180 --> 00:16:12.600
Audio Mixing.

00:16:12.600 --> 00:16:14.610
Hopefully most of you didn't
need to do audio mixing

00:16:14.650 --> 00:16:16.340
directly with the Sound Manager.

00:16:16.340 --> 00:16:18.540
Sound Mixer is deprecated.

00:16:18.540 --> 00:16:21.680
We found that usually people
weren't using this interface

00:16:21.680 --> 00:16:23.020
because there wasn't,
frankly,

00:16:23.150 --> 00:16:26.420
there wasn't that much mixing to do
since it only supported stereo and mono.

00:16:27.050 --> 00:16:30.850
And you could get at the Sound Mixer
by going through Sound Converter.

00:16:30.850 --> 00:16:34.640
But if you were using it,
know that your alternative now is

00:16:34.660 --> 00:16:37.240
to use a mixer audio unit instead.

00:16:37.240 --> 00:16:38.850
They come in three flavors.

00:16:38.850 --> 00:16:42.520
There's a stereo mixer, a 3D mixer,
and a matrix mixer.

00:16:42.520 --> 00:16:45.730
Use whichever one is
appropriate for your needs.

00:16:50.300 --> 00:16:53.880
In the area of movie export,
I'm not going to talk about

00:16:53.880 --> 00:16:57.370
specific sound manager
portions that are deprecated,

00:16:57.690 --> 00:17:01.980
but more along the lines of you
should understand what's happening

00:17:01.980 --> 00:17:05.830
under the covers when you perform
a movie export using QuickTime's

00:17:05.830 --> 00:17:09.350
APIs like export movie to data ref.

00:17:09.420 --> 00:17:13.140
The old style of export is discouraged.

00:17:13.140 --> 00:17:15.630
So you might ask,
how do I know if I'm doing an old

00:17:15.630 --> 00:17:17.720
style export or a new style export?

00:17:18.280 --> 00:17:24.320
You are using old style export if
you open up an export component that

00:17:24.320 --> 00:17:27.160
is a spit-type component explicitly.

00:17:27.160 --> 00:17:30.490
For instance,
if you're going to do some setup on it,

00:17:30.500 --> 00:17:33.780
you're going to pass some atom
container of settings to it.

00:17:33.860 --> 00:17:38.530
And then you take that previously
configured export component and

00:17:38.530 --> 00:17:42.840
you pass it to an export API such
as movie export to data ref.

00:17:42.880 --> 00:17:48.170
You are getting the old style path,
whether you knew it or not.

00:17:48.240 --> 00:17:51.690
This is discouraged because
it's using sound converters and

00:17:51.690 --> 00:17:55.960
other sound manager interfaces
underneath which are now deprecated.

00:17:55.960 --> 00:17:58.700
That means that we're not going
to maintain that code path.

00:17:58.840 --> 00:18:01.790
Well, we maintain it,
but we don't want to make fixes there.

00:18:01.800 --> 00:18:04.100
We want to be working in the new world.

00:18:04.160 --> 00:18:07.290
So you should opt in for the
new style of export instead.

00:18:07.360 --> 00:18:08.870
What do you have to do?

00:18:08.960 --> 00:18:11.790
Well,
if you don't do what I just described,

00:18:11.790 --> 00:18:15.770
if you don't open up that spit
component explicitly and you just

00:18:15.770 --> 00:18:19.820
pass null as the last parameter
to one of these movie export APIs,

00:18:19.820 --> 00:18:20.950
you're covered.

00:18:21.050 --> 00:18:24.160
You're automatically getting
the new style export.

00:18:24.310 --> 00:18:29.800
If you need to continue to do this to
open up an export component explicitly,

00:18:29.970 --> 00:18:33.560
then you need to make one additional
API call if you're not already doing so.

00:18:33.750 --> 00:18:37.900
Call QT set component property on
that export component instance and

00:18:37.900 --> 00:18:42.200
tell it that you want to opt in
for high resolution audio features.

00:18:42.200 --> 00:18:42.800
It's kind of small.

00:18:42.800 --> 00:18:44.440
I don't know if you can read it.

00:18:44.450 --> 00:18:49.060
I think we have a competition
in QuickTime for the longest

00:18:49.060 --> 00:18:50.960
constant in the world.

00:18:51.000 --> 00:18:52.360
We're getting close.

00:18:52.360 --> 00:18:57.680
KQT movie exporter property ID underscore
enable high resolution audio features.

00:18:59.660 --> 00:19:01.690
Next up is Capture.

00:19:01.840 --> 00:19:05.180
Sound input components
are deprecated in Leopard,

00:19:05.180 --> 00:19:06.860
and you have several choices instead.

00:19:06.860 --> 00:19:11.820
If you are at the Core Audio level,
you can use an AU-HAL audio unit.

00:19:11.830 --> 00:19:13.140
It does the same thing.

00:19:13.140 --> 00:19:16.780
You could also use the
Core Audio interfaces directly,

00:19:16.780 --> 00:19:19.810
but they are a little bit
more difficult to use,

00:19:19.850 --> 00:19:23.540
and so I think the Core Audio team
would agree with me.

00:19:23.540 --> 00:19:26.520
You want to be at the
AU-HAL audio unit level instead.

00:19:27.560 --> 00:19:32.010
If you want to do synchronization
with video as you're doing Capture

00:19:32.010 --> 00:19:36.860
and you like the sequence grabber,
then know that the sound media

00:19:36.860 --> 00:19:40.780
type SG channel is deprecated
because it uses a sound input

00:19:40.780 --> 00:19:42.740
component underneath the covers.

00:19:42.740 --> 00:19:47.530
Instead, you should be using the newer
SG audio media type SG channel,

00:19:47.530 --> 00:19:51.150
which, not surprisingly,
uses an AU-HAL audio unit

00:19:51.150 --> 00:19:53.020
underneath the covers.

00:19:53.020 --> 00:19:54.640
But the preferred method to use,
and we really, really want to use it,

00:19:54.640 --> 00:19:55.520
is the Sound Input Component.

00:19:55.520 --> 00:19:57.140
The preferred method to use,
and we really,

00:19:57.140 --> 00:20:01.160
really want to push this point,
is that QtKit Capture in Leopard

00:20:01.180 --> 00:20:04.730
is the way to go for Capture,
if you can.

00:20:04.740 --> 00:20:06.810
It's a higher level interface.

00:20:06.810 --> 00:20:10.500
It's a very clean interface,
so it might not allow all of the

00:20:10.500 --> 00:20:15.260
kind of fine-grained control that
you're used to with Sequence Grabber,

00:20:15.260 --> 00:20:20.350
but this is an API set that's still
actively being defined and pursued,

00:20:20.350 --> 00:20:23.620
and so now is the time
to provide feedback.

00:20:23.620 --> 00:20:25.410
It's available on your Leopard.

00:20:25.520 --> 00:20:26.060
It's available on your Leopard disks.

00:20:26.060 --> 00:20:30.520
Look at the QtKit Capture
APIs and let us know.

00:20:30.520 --> 00:20:34.160
Provide us feedback with what you think
is missing so that you can transition

00:20:34.160 --> 00:20:37.800
off the Sequence Grabber as soon as
it makes sense for your application.

00:20:41.500 --> 00:20:45.650
In the area of playback,
sound output device components or

00:20:45.650 --> 00:20:49.400
SDEV components are deprecated.

00:20:49.490 --> 00:20:54.740
Many of you found out about this in
QuickTime 7.0 when we just stopped

00:20:54.740 --> 00:20:58.400
playing to them and started playing
to Core Audio HAL devices instead.

00:20:58.400 --> 00:21:01.200
Sort of rude of us at the time,
but we're telling you now

00:21:01.200 --> 00:21:03.400
officially that they're deprecated.

00:21:03.400 --> 00:21:07.400
If you need to write
an audio device driver,

00:21:07.400 --> 00:21:13.380
the correct way to do it on OS X is
to write a Core Audio HAL plug-in

00:21:13.390 --> 00:21:18.280
in user space or a KEXT driver
at the kernel level.

00:21:18.400 --> 00:21:23.150
However, we're finding that most people
weren't writing SDEVs because they

00:21:23.150 --> 00:21:25.230
needed to write a device driver.

00:21:25.680 --> 00:21:31.370
They were doing it as a sort of hackery,
trickery way to get uncompressed

00:21:31.420 --> 00:21:33.400
PCM samples out the end of the day.

00:21:33.400 --> 00:21:36.400
So, we're trying to get rid of
QuickTime's audio rendering chain.

00:21:36.550 --> 00:21:38.350
Well, that of course is deprecated.

00:21:38.460 --> 00:21:42.400
Don't try to use an SDEV for
real-time effects insertion.

00:21:42.490 --> 00:21:45.180
Instead,
we have a new way of doing it in Leopard

00:21:45.300 --> 00:21:50.300
called the Qt Audio Context Inserts,
which Sayli will be telling you about

00:21:50.300 --> 00:21:52.400
in great detail in just a few minutes.

00:21:53.830 --> 00:21:54.740
Sound description handles.

00:21:54.760 --> 00:21:58.600
So thus ends our section
on Sound Manager proper,

00:21:58.600 --> 00:22:03.030
I wanted to inform you about a
couple other interfaces in regard to

00:22:03.070 --> 00:22:08.360
QuickTime Audio that you should steer
away from or know some caveats about.

00:22:08.360 --> 00:22:11.300
And one of them is sound
description handles.

00:22:11.300 --> 00:22:13.140
They come in three versions now.

00:22:13.140 --> 00:22:16.050
That's a lot of versions
to say the same thing.

00:22:16.090 --> 00:22:20.920
They can be very confusing to
directly access the various fields

00:22:20.920 --> 00:22:22.530
in sound description handles.

00:22:22.720 --> 00:22:24.700
We want to discourage
you from doing that.

00:22:24.810 --> 00:22:30.680
Instead, we introduced in QuickTime 7.0 a
suite of accessor methods called

00:22:31.110 --> 00:22:35.380
the Qt Sound Description functions.

00:22:35.420 --> 00:22:37.020
And there are five of them.

00:22:37.110 --> 00:22:40.790
Qt Sound Description, Get Property Info,
Get Property, Set Property.

00:22:41.030 --> 00:22:46.550
That's how you find out about the format
as an Audio Stream Basic Description,

00:22:46.550 --> 00:22:49.360
Channel Layout, Magic Cookie, et cetera.

00:22:49.370 --> 00:22:51.550
You create a sound description.

00:22:51.740 --> 00:22:54.830
Not by saying new handle and then
filling in the fields yourself,

00:22:54.830 --> 00:22:57.920
but by using Qt Sound Description,
Create.

00:22:57.930 --> 00:23:01.750
And if you want to convert between one
version of sound description and another,

00:23:02.030 --> 00:23:06.250
please use Qt Sound Description Convert,
rather than trying to do

00:23:06.250 --> 00:23:08.550
the conversion manually.

00:23:10.990 --> 00:23:12.240
Media handler calls.

00:23:12.240 --> 00:23:19.350
In the older QuickTime world,
a lot of functionality was gotten

00:23:19.350 --> 00:23:22.410
to directly by going down to the
media handler and making calls

00:23:22.490 --> 00:23:23.780
directly on the media handler.

00:23:23.780 --> 00:23:26.630
So on the left side here,
we have the don'ts,

00:23:26.660 --> 00:23:29.480
and on the right side, we have the do's.

00:23:31.830 --> 00:23:35.780
Instead of going down to the media level,
we now have introduced track level,

00:23:35.780 --> 00:23:42.270
or in some case, movie level,
properties to do the same thing.

00:23:42.280 --> 00:23:44.530
And the reason you don't
want to go down to,

00:23:44.690 --> 00:23:48.440
say, media set volume rather than
set track audio gain is that

00:23:48.600 --> 00:23:54.990
the media set volume call has...

00:23:55.380 --> 00:23:57.090
has worse parameters.

00:23:57.090 --> 00:24:02.750
It takes a short instead of a float,
so you have less granularity and less

00:24:02.790 --> 00:24:06.440
resolution in making your volume changes.

00:24:06.440 --> 00:24:10.230
Instead of a range of 0 to 255,
when you use the new one,

00:24:10.230 --> 00:24:14.700
you can go from 1.0 down
to 0.0 in floating point.

00:24:14.700 --> 00:24:19.140
So take a look at all of those
functions and please transition

00:24:19.140 --> 00:24:20.600
over to the track level.

00:24:21.240 --> 00:24:26.040
And in two cases there,
the movie level property calls

00:24:26.040 --> 00:24:28.110
rather than the media handler calls.

00:24:31.530 --> 00:24:33.770
Load Movie into RAM is
sort of a special case,

00:24:33.770 --> 00:24:39.080
but I wanted to bring it up because
it's been somewhat problematic in code

00:24:39.080 --> 00:24:42.300
that people have talked to us about
on the QuickTime API list recently.

00:24:42.300 --> 00:24:47.550
Load Movie into RAM was a
really great idea in OS 9.

00:24:47.560 --> 00:24:51.800
Remember when you had those apps
that you could do Command-I on,

00:24:51.800 --> 00:24:56.490
and then up would pop that window
where you could allot memory to an app,

00:24:56.590 --> 00:25:00.500
and you could boost it all the way
up and give an app lots of memory?

00:25:01.520 --> 00:25:06.150
Well, in modern OSes like we have
today with OS X and Windows,

00:25:06.150 --> 00:25:09.900
with virtual memory systems,
it's ill-advised to call Load Movie into

00:25:09.900 --> 00:25:14.240
RAM because you're just going to
be paging out that memory anyway,

00:25:14.240 --> 00:25:16.600
so you're not gaining anything by it.

00:25:16.630 --> 00:25:21.480
It is ill-advised when working with
audio media to use Load Movie into RAM,

00:25:21.540 --> 00:25:27.500
and we also want to discourage
using the preload bit on audio

00:25:27.500 --> 00:25:30.590
tracks to do the same thing.

00:25:32.790 --> 00:25:37.600
So that concludes the section on
deprecation and best practices.

00:25:37.610 --> 00:25:43.420
Let's transition over to the new
APIs in QuickTime 7.1 and Leopard,

00:25:43.420 --> 00:25:47.140
first of which is
SC Audio Compression APIs.

00:25:47.140 --> 00:25:50.250
We touched on these briefly
this morning in session 212.

00:25:50.580 --> 00:25:51.640
Where are they?

00:25:51.640 --> 00:25:55.930
They're in the QuickTime 7.1 SDK,
or I believe it's now called

00:25:55.930 --> 00:25:59.670
the QuickTime 7.1.2 SDK.

00:25:59.700 --> 00:26:01.750
It was released earlier this week.

00:26:01.760 --> 00:26:07.090
If you go to the web and you
download Xcode 2.4 developer tools,

00:26:07.090 --> 00:26:11.030
you will get the
QuickTime 7.1 SDK for the Mac,

00:26:11.140 --> 00:26:16.390
and it's also available as
the Windows QuickTime 7.1 SDK.

00:26:18.280 --> 00:26:22.310
The SC Audio Compression APIs are
available on Mac and Windows.

00:26:22.520 --> 00:26:26.100
You can find the prototypes
in QuickTimeComponents.h,

00:26:26.350 --> 00:26:31.050
and you can find sample code
in SC Audio Compress and WACtv.

00:26:31.100 --> 00:26:33.100
WACtv has been out for a year.

00:26:33.100 --> 00:26:36.100
SC Audio Compress was just
released earlier this week.

00:26:36.120 --> 00:26:40.530
It's on your seed example CD,
and it should be live on the

00:26:40.530 --> 00:26:44.910
developer.apple.com site as well now.

00:26:46.190 --> 00:26:48.680
What are the SC Audio Compression APIs?

00:26:48.740 --> 00:26:51.620
Well,
SC Audio Compression is a component.

00:26:51.800 --> 00:26:53.760
You open it using the
Component Manager API,

00:26:53.760 --> 00:26:55.000
like open a component.

00:26:55.000 --> 00:26:57.900
It's of type SCDI and Audi.

00:26:57.900 --> 00:27:02.540
It's been around for about two years now,
but we've just beefed it up with the

00:27:02.540 --> 00:27:04.990
ability to do encodes and decodes.

00:27:05.000 --> 00:27:08.000
It is a modern replacement
for Sound Converter.

00:27:08.000 --> 00:27:11.160
So now we can finally answer
people's questions on the API list

00:27:11.160 --> 00:27:15.070
when they tell us that they want
to use Sound Converter and we say,

00:27:15.070 --> 00:27:18.510
"Don't use Sound Converter,
use Audio Converter," and they say,

00:27:18.510 --> 00:27:21.800
"But I want my code to run on
Windows." You can finally say,

00:27:21.800 --> 00:27:26.510
"Oh, okay,
use SC Audio Compression APIs instead."

00:27:28.010 --> 00:27:32.040
Another great thing about it is that if
you've used Audio Converter before and

00:27:32.080 --> 00:27:36.430
you're familiar with the interfaces,
you'll be right at home because

00:27:36.430 --> 00:27:40.890
it uses an Audio Converter fill
complex buffer style interface.

00:27:40.920 --> 00:27:44.720
The equivalent in the
SC Audio Compression APIs is

00:27:44.720 --> 00:27:46.900
called SC Audio Fill Buffer.

00:27:47.050 --> 00:27:48.900
Let me give you a demo.

00:27:48.900 --> 00:27:51.510
This is a demo I showed this morning too.

00:27:52.190 --> 00:27:56.050
Let's go over to the demo machine.

00:27:56.120 --> 00:27:59.770
So I have here a build of Leopard.

00:28:03.790 --> 00:28:07.050
And I'm going to open
up a QuickTime movie.

00:28:07.160 --> 00:28:11.080
This is of a recital that
I gave two weeks ago,

00:28:11.180 --> 00:28:11.580
Sunday.

00:28:11.690 --> 00:28:16.430
I'm going to play a little bit of this.

00:28:25.600 --> 00:28:31.160
So it's a solo guitar track.

00:28:31.210 --> 00:28:37.440
The first thing I do after a concert
is get a call from my mom saying,

00:28:37.480 --> 00:28:38.080
how did it go?

00:28:38.080 --> 00:28:42.900
And after the call usually comes a
request for the audio of the concert.

00:28:42.900 --> 00:28:46.480
And so I have to send her
audio of what I just played.

00:28:46.480 --> 00:28:50.530
And it usually is too big to go over
the internet without compressing it.

00:28:50.600 --> 00:28:55.270
So I go into my
QuickTime Pro Save Exported

00:28:55.350 --> 00:28:57.020
File As dialog.

00:28:57.500 --> 00:29:00.860
and I compress it to something.

00:29:00.920 --> 00:29:03.040
This is the point where
usually people get really,

00:29:03.040 --> 00:29:07.150
really confused because
it's just option overload.

00:29:07.210 --> 00:29:11.930
You've got, I don't know, what is it,
10 now formats to choose from,

00:29:11.940 --> 00:29:16.000
lots of channel layouts to choose from,
lots of sample rates,

00:29:16.000 --> 00:29:17.740
and all of these various settings.

00:29:17.870 --> 00:29:24.820
So it might not be intuitive to the
audio newbie which combination of

00:29:24.820 --> 00:29:27.500
parameters is the correct one for export.

00:29:27.640 --> 00:29:31.090
So one thing that we added with
the help of SC Audio Compression

00:29:31.190 --> 00:29:35.100
APIs in Leopard is a preview
function in QuickTime Player.

00:29:35.100 --> 00:29:38.000
So these two new,
these buttons are new down here.

00:29:38.140 --> 00:29:43.550
They let you loop a 10-second segment
of the source movie and listen to it as

00:29:43.550 --> 00:29:47.500
you apply these settings in real time,
and it will update the sound.

00:29:47.500 --> 00:29:51.310
So you can just sort of listen
to the trade-offs between

00:29:51.310 --> 00:29:54.680
quality and file size as you go,
and then pick the right one

00:29:54.790 --> 00:29:57.730
for your particular situation.

00:29:58.010 --> 00:30:00.640
So I'm going to go ahead and play
around with this a little bit.

00:30:00.650 --> 00:30:08.820
♪ ♪ Can we turn it up a little bit?

00:30:22.200 --> 00:30:34.600
[Transcript missing]

00:30:39.900 --> 00:30:43.900
And I can compare that to the source at
any time by toggling back to play source.

00:30:43.900 --> 00:30:48.800
Here are how much of the highs
I'm missing out on if I go

00:30:48.800 --> 00:30:52.370
down to 16 kilobits per second.

00:30:57.110 --> 00:31:01.180
So there it is,
SC Audio preview in QuickTime Player.

00:31:01.180 --> 00:31:03.010
Let's go back to slides.

00:31:08.360 --> 00:31:10.950
How did we do that?

00:31:11.030 --> 00:31:12.910
There's the dialog on the top.

00:31:13.120 --> 00:31:17.740
That is a client of the
SC Audio compression component.

00:31:17.770 --> 00:31:22.590
The SC Audio compression component
has a list of properties.

00:31:22.690 --> 00:31:26.800
So all of that UI was built
from that list of properties.

00:31:26.830 --> 00:31:30.470
You could build your own UI if you
didn't want to use that stock UI,

00:31:30.470 --> 00:31:33.520
if you don't like it for some reason.

00:31:33.540 --> 00:31:38.690
And so you get callbacks when
any of those properties change.

00:31:38.810 --> 00:31:41.770
If you have registered
listener callbacks,

00:31:41.990 --> 00:31:46.280
you're told, say, when the current
compression type changes.

00:31:46.290 --> 00:31:48.730
Underneath the covers,
you'll see there's an SC Audio fill

00:31:48.740 --> 00:31:51.370
buffer call in the middle.

00:31:51.720 --> 00:31:56.330
We know about the source movie,
so we use movie audio extraction to get

00:31:56.330 --> 00:32:00.100
the raw PCM samples mixed from the movie.

00:32:00.190 --> 00:32:04.930
We run them through SC Audio Fill Buffer,
applying the current output settings,

00:32:04.960 --> 00:32:09.100
and then write a new destination
QuickTime movie using Add Media Sample 2,

00:32:09.250 --> 00:32:13.560
and then use QuickTime's built-in
playback mechanism to just

00:32:13.560 --> 00:32:15.720
task the movie and idle it.

00:32:17.840 --> 00:32:19.550
How does it work?

00:32:19.600 --> 00:32:23.870
I just told you about what's
happening outside of the SC Audio box,

00:32:23.870 --> 00:32:26.150
but here's what's happening inside.

00:32:26.220 --> 00:32:29.670
When you call SC Audio Fill Buffer,
you're providing buffers of

00:32:29.670 --> 00:32:32.920
audio in the source format,
and you're getting them out

00:32:32.920 --> 00:32:34.460
in the destination format.

00:32:34.510 --> 00:32:39.810
Internally, we use an audio converter
for decode if necessary.

00:32:40.180 --> 00:32:43.460
There are opt-outs for
all of these things.

00:32:43.640 --> 00:32:48.700
Next, we place a matrix mixer audio unit
for mixing if a mix is desired.

00:32:48.870 --> 00:32:53.150
So if we're going from
N channels to M channels,

00:32:53.210 --> 00:32:55.940
we'll insert a matrix mixer.

00:32:55.970 --> 00:33:00.680
It also internally uses another audio
converter for ENCODE if necessary.

00:33:00.920 --> 00:33:04.300
So it's sort of similar to
Sound Converter in that it does

00:33:04.300 --> 00:33:07.510
mixing unlike the Audio Converter.

00:33:08.830 --> 00:33:09.720
Why would we want this?

00:33:09.910 --> 00:33:14.340
Well, hopefully it's self-evident by now.

00:33:14.390 --> 00:33:17.000
We needed something to replace
Sound Converter on Windows.

00:33:17.000 --> 00:33:18.700
That was a big reason.

00:33:18.700 --> 00:33:21.680
It enables cross-platform decode,
compress, and transcode.

00:33:21.680 --> 00:33:25.180
It provides value over the
audio converter alone because

00:33:25.180 --> 00:33:26.650
it can do this mixing.

00:33:26.690 --> 00:33:30.980
It has a very nice,
totally property-driven interface,

00:33:31.000 --> 00:33:34.120
and if that stock dialog
is enough for you,

00:33:34.120 --> 00:33:35.590
go ahead and use it.

00:33:35.670 --> 00:33:37.690
You call SC Request Image Settings.

00:33:39.940 --> 00:33:43.940
Here's the sort of general overview
for how you would program it.

00:33:43.960 --> 00:33:46.610
You open it up, the component instance.

00:33:46.640 --> 00:33:53.590
You can configure the output format,
input format, or the list of compressors

00:33:53.680 --> 00:33:56.890
and sample rates,
et cetera, that you want to see in the

00:33:56.890 --> 00:34:00.500
lists by using this suite of
QT get component property,

00:34:00.500 --> 00:34:05.260
set component property,
and look in QuickTimeComponents.h

00:34:05.260 --> 00:34:06.880
and search for SC Audio.

00:34:06.880 --> 00:34:09.910
You'll see a list of about 30
different constants that you

00:34:09.930 --> 00:34:11.460
can use to set for properties.

00:34:11.460 --> 00:34:16.190
After you've configured it with
the input and output formats,

00:34:16.220 --> 00:34:18.300
and that's the minimum
config that you need,

00:34:18.300 --> 00:34:21.330
you can start calling
SC Audio fill buffer repeatedly

00:34:21.340 --> 00:34:23.520
and get those samples out of it.

00:34:23.660 --> 00:34:27.060
It is a pull mechanism
just as Audio Converter is.

00:34:28.490 --> 00:34:30.400
Here's what the APIs look like.

00:34:30.440 --> 00:34:35.000
SC Audio Fill Buffer has exactly the
same parameters past the first one,

00:34:35.000 --> 00:34:36.420
which is a component instance.

00:34:36.420 --> 00:34:39.150
It's exactly the same
parameters as you would see in

00:34:39.150 --> 00:34:40.800
Audio Converter Fill Complex Buffer.

00:34:40.800 --> 00:34:43.920
Down at the bottom,
you'll see a type def of the

00:34:43.920 --> 00:34:47.470
SC Audio Input Data Proc,
which again has exactly the same

00:34:47.470 --> 00:34:52.020
parameters as the Audio Converter's
Input Data Proc for Fill Complex Buffer.

00:34:52.020 --> 00:34:54.700
And there's an additional
call in the middle there,

00:34:54.710 --> 00:34:55.670
SC Audio Reset.

00:34:56.390 --> 00:34:59.940
If you've finished your
compression and you want to,

00:34:59.940 --> 00:35:03.180
say,
jump to a different point in the file,

00:35:03.180 --> 00:35:09.280
you would call SC Audio Reset to empty
out any latent samples in the chain.

00:35:13.220 --> 00:35:17.210
The contract for SC Audio Fill Buffer's
input data proc is identical

00:35:17.210 --> 00:35:18.340
to audio converters.

00:35:18.340 --> 00:35:20.400
Let me just review that for a second.

00:35:20.550 --> 00:35:25.510
So again, you call SC Audio Fill Buffer,
and then on the opposite side,

00:35:25.510 --> 00:35:30.210
you've registered an input data
proc that will be called to provide

00:35:30.210 --> 00:35:32.550
samples in the source format.

00:35:33.200 --> 00:35:38.010
You fill buffer for some number of
packets in the destination format,

00:35:38.010 --> 00:35:42.370
and when your input data proc is called,
it will be called for some

00:35:42.370 --> 00:35:43.940
other number of packets.

00:35:44.000 --> 00:35:46.400
It might be the same or it
might be different than what

00:35:46.400 --> 00:35:48.710
you pulled for in fill buffer.

00:35:48.970 --> 00:35:53.800
And in that input proc,
you may provide exactly that number

00:35:53.800 --> 00:36:00.480
of packets that it requested,
or you can provide fewer or more or none.

00:36:00.940 --> 00:36:06.420
You signal temporary underrun by
returning an error from the input proc.

00:36:06.420 --> 00:36:09.140
And if you want to signal
that you are out of data,

00:36:09.140 --> 00:36:13.620
you will never get any more data,
you set all of the buffer pointers in the

00:36:13.620 --> 00:36:18.780
audio buffer list to null and set number
of packets to zero in the input proc.

00:36:18.780 --> 00:36:21.140
And it might call you about six
or seven extra times saying,

00:36:21.140 --> 00:36:22.120
"Are you really out?

00:36:22.270 --> 00:36:23.220
Are you really out?

00:36:23.220 --> 00:36:25.640
Is this really the end?" And each
time you do the same thing

00:36:25.640 --> 00:36:27.770
and then it stops calling you.

00:36:28.600 --> 00:36:34.770
Let's give you a demo of how to program
with the SC Audio Compression APIs.

00:36:35.500 --> 00:36:39.620
Associated with this session,
you'll find on your Leopard

00:36:39.620 --> 00:36:43.470
example CDs a sample application
called SC Audio Compress.

00:36:43.500 --> 00:36:47.360
This isn't quite as sexy as the player
preview that I showed you earlier.

00:36:47.360 --> 00:36:48.780
It's just a command line utility.

00:36:48.780 --> 00:36:49.540
Sorry.

00:36:52.680 --> 00:36:59.360
But it's nonetheless very useful
because it boils a compression using

00:36:59.360 --> 00:37:04.400
QuickTime from start to finish down
to less than 1,500 lines of code.

00:37:04.550 --> 00:37:09.590
So we have--I've pre-built it here
just to show you what it looks like,

00:37:09.700 --> 00:37:11.320
the parameters to it.

00:37:11.570 --> 00:37:17.770
When you invoke SC Audio Compress,
you need to provide it a -i and an input

00:37:17.770 --> 00:37:21.710
file and then -o and an output file.

00:37:22.180 --> 00:37:25.230
And then it pops up the
dialog that you saw before.

00:37:25.350 --> 00:37:26.970
You select an output format.

00:37:26.980 --> 00:37:30.860
It performs the compression
and writes it to a new file.

00:37:30.860 --> 00:37:39.170
It can accept any audio file or movie,
and it can write to a CAF file

00:37:39.170 --> 00:37:41.540
or a movie or raw PCM.

00:37:41.660 --> 00:37:44.940
So let's go ahead and
give a demo of that.

00:37:46.020 --> 00:37:49.400
I've got that same content from before.

00:37:49.500 --> 00:37:52.070
So I'll say -i

00:37:52.790 --> 00:38:00.250
Natalia Excerpt - O and I'll write
it out to some temporary location.

00:38:02.400 --> 00:38:07.030
Okay, now notice there is no preview
button and play source button.

00:38:07.030 --> 00:38:09.300
You might ask why.

00:38:09.300 --> 00:38:11.320
Go ahead and ask.

00:38:12.190 --> 00:38:15.840
Well, because this sample is
shipping now and works with the

00:38:15.940 --> 00:38:20.730
QuickTime that's already shipping,
the...

00:38:21.400 --> 00:38:24.200
QuickTime that I showed you earlier
is the one that's shipping in Leopard.

00:38:24.200 --> 00:38:27.400
This one is compatible
with QuickTime 7.1.

00:38:27.400 --> 00:38:28.700
That's why you don't
see those two buttons.

00:38:30.820 --> 00:38:34.320
So I'll go ahead and
pick some output format.

00:38:34.320 --> 00:38:36.980
Many of you might be interested
to know that we now are

00:38:37.360 --> 00:38:40.860
going to put FLAC in Leopard.

00:38:40.980 --> 00:38:45.130
That's been a highly
sought-after lossless format.

00:38:45.260 --> 00:38:49.000
So I'll compress to FLAC, say OK.

00:38:49.820 --> 00:38:55.040
It compresses it, and then I'll go ahead
and open the result.

00:39:00.000 --> 00:39:03.930
and amazingly,
it's a movie with flack in it.

00:39:03.940 --> 00:39:08.760
Okay,
so let's look at the code very briefly.

00:39:11.740 --> 00:39:13.760
I don't want to spend too much time,
but I do want to just

00:39:13.890 --> 00:39:14.880
show you how to read it.

00:39:14.940 --> 00:39:21.960
It's very non-intuitively
read from bottom to top.

00:39:23.300 --> 00:39:25.560
So when you're starting
looking at this file,

00:39:25.560 --> 00:39:26.910
it's all just one file.

00:39:26.910 --> 00:39:30.580
Start at the very bottom where
main is and work your way up.

00:39:30.580 --> 00:39:34.800
And you'll see the
list of tasks in order.

00:39:34.800 --> 00:39:38.310
It opens the source file,
it configures std audio,

00:39:38.310 --> 00:39:42.240
then it opens the destination file,
then it calls SC audio

00:39:42.240 --> 00:39:44.180
fill buffer repeatedly.

00:39:44.880 --> 00:39:48.480
So it's not only a good sample for
learning about SC audio fill buffer,

00:39:48.480 --> 00:39:53.540
it's also good for learning how to
read audio files using the audio file

00:39:53.540 --> 00:39:57.990
API and how to write using the audio file
API and how to read using QuickTime and

00:39:57.990 --> 00:39:59.900
how to write using QuickTime.

00:39:59.900 --> 00:40:01.550
Okay, let's go back to slides.

00:40:08.420 --> 00:40:10.940
Okay, I think I just covered all of that.

00:40:11.020 --> 00:40:14.270
It uses specifically
Audio--Add Media Sample To to

00:40:14.270 --> 00:40:15.790
do the writing to movie.

00:40:16.030 --> 00:40:21.000
It uses audio file write packets
to do the writing to a CAF file.

00:40:21.120 --> 00:40:23.430
Here's what it looks like graphically.

00:40:23.510 --> 00:40:25.900
SC Audio fill buffer is in the middle.

00:40:25.910 --> 00:40:30.600
That's performing the decode, mix,
or encode.

00:40:31.070 --> 00:40:36.960
SC Audio Input Dataproc is providing
the buffers in the source format,

00:40:36.960 --> 00:40:40.800
and those are acquired either
using the audio file API,

00:40:40.800 --> 00:40:44.430
if it happens to be a
.aif or a .wav or a .caf.

00:40:46.200 --> 00:40:52.010
Uh, or it uses--it defaults back to the
QuickTime APIs to open the movie and then

00:40:52.020 --> 00:40:57.600
uses Movie Audio Extraction Fill Buffer
to acquire samples using that path.

00:40:57.600 --> 00:41:00.560
And then on the output side,
it uses audio file write

00:41:00.560 --> 00:41:04.600
packets to write a CAF file,
or if you specified .mov

00:41:04.600 --> 00:41:07.940
as the output format,
it will use Add Media Sample

00:41:07.940 --> 00:41:10.160
To to write the output format.

00:41:10.810 --> 00:41:13.900
With that, I'm going to turn it back to
Sayli to talk more about the

00:41:13.940 --> 00:41:16.760
new APIs in 7.1 and Leopard.

00:41:25.320 --> 00:41:28.890
So moving along with our
discussion of new APIs,

00:41:28.890 --> 00:41:31.020
we have pitch control.

00:41:31.040 --> 00:41:35.580
About two years ago,
we showcased this pitch control

00:41:35.770 --> 00:41:36.860
through our QuickTime player.

00:41:36.860 --> 00:41:40.580
And if you ever opened
up the AV Controls panel,

00:41:40.580 --> 00:41:42.180
you know you can control the pitch.

00:41:42.180 --> 00:41:46.360
But we hadn't really given
a public interface for this.

00:41:46.360 --> 00:41:49.810
So we've finally done
that as per your request.

00:41:49.860 --> 00:41:55.020
So in new in QuickTime 7.1,
you can control the pitch of the movie.

00:41:55.060 --> 00:41:56.340
How do you do it?

00:41:56.340 --> 00:41:58.340
It's just one simple property.

00:41:58.340 --> 00:42:02.420
It's get set and listenable on the movie.

00:42:02.440 --> 00:42:09.200
And what it will do is control the pitch
of the audio of all the tracks that are

00:42:09.200 --> 00:42:12.600
mixing into that movie audio context.

00:42:12.610 --> 00:42:17.700
This means that currently it will not
support pitch for tracks such as MPEGs,

00:42:17.700 --> 00:42:21.150
streaming, or music,
because they don't mix into

00:42:21.160 --> 00:42:23.530
the movie audio context.

00:42:24.030 --> 00:42:27.750
One thing to note is that the movie
that you're working with needs

00:42:27.800 --> 00:42:29.200
to have been opened with this.

00:42:29.270 --> 00:42:34.020
Rate changes preserves pitch property,
and that's because setting that

00:42:34.020 --> 00:42:36.480
property creates a time pitch unit.

00:42:36.680 --> 00:42:39.890
QuickTime creates a time pitch
unit for the movie underneath,

00:42:39.890 --> 00:42:42.880
and you need that to exist
to make the pitch changes.

00:42:42.880 --> 00:42:46.910
And the unit for this pitch
shift is in terms of sense.

00:42:47.600 --> 00:42:53.500
So setting a value of 100 means that
you're raising the pitch by a semitone,

00:42:53.500 --> 00:42:58.480
and so useful values would be
between plus or minus 1,200 because

00:42:58.480 --> 00:43:00.540
that's an octave up or down.

00:43:03.680 --> 00:43:07.930
Next, we have a set of properties that
help you to control the render

00:43:08.110 --> 00:43:13.740
quality of the audio units that
QuickTime is using in its render path.

00:43:13.860 --> 00:43:19.060
And this is useful because often
you have to make a trade-off between

00:43:19.060 --> 00:43:21.680
render quality and CPU performance.

00:43:21.680 --> 00:43:24.900
And by controlling this,
if you're on a low-end machine,

00:43:24.900 --> 00:43:28.460
you can choose to use a
slightly lower render quality

00:43:28.460 --> 00:43:30.480
if you're on a high-end machine.

00:43:30.720 --> 00:43:33.620
And you can afford the CPU usage.

00:43:33.620 --> 00:43:35.300
You can set a higher quality.

00:43:35.300 --> 00:43:38.790
In particular,
that time pitch unit that I just

00:43:38.790 --> 00:43:45.270
mentioned uses extremely different
algorithms when functioning in

00:43:45.270 --> 00:43:47.460
the low and the high qualities.

00:43:47.460 --> 00:43:51.690
In the case of the low quality,
it's using a time domain algorithm,

00:43:51.780 --> 00:43:55.720
and in the higher quality,
it's using a frequency domain.

00:43:55.720 --> 00:44:02.250
And by default,
we haven't set... This unit to function

00:44:02.250 --> 00:44:05.140
in the high quality frequency domain.

00:44:05.180 --> 00:44:10.270
So the only way you can access this is
by setting the render quality to high.

00:44:10.280 --> 00:44:15.080
This is again new in QuickTime 7.1.

00:44:15.400 --> 00:44:20.770
And you can use-- you can set this
property either during movie playback

00:44:20.830 --> 00:44:23.500
or extraction or during export.

00:44:23.500 --> 00:44:27.730
And note that when you set it for export,
you're setting the render quality

00:44:27.850 --> 00:44:29.520
for all the units in the chain.

00:44:29.520 --> 00:44:33.890
So this is your one-step solution
for controlling the quality.

00:44:34.100 --> 00:44:39.140
And the constants are all the constants
that are defined in Core Audio,

00:44:39.140 --> 00:44:42.480
and one additional constant,
which is the playback default constant.

00:44:42.480 --> 00:44:48.970
And you set this to kind of reset your
units to a default optimal value that

00:44:49.080 --> 00:44:51.180
QuickTime chooses for all the units.

00:44:55.580 --> 00:44:58.820
The media optimization properties.

00:44:58.820 --> 00:45:04.900
This is a way in which your applications
can allow QuickTime's importers to

00:45:04.900 --> 00:45:08.440
perform import in an optimized fashion.

00:45:08.440 --> 00:45:13.850
And when QuickTime optimizes media,
it might so happen that it'll create

00:45:13.850 --> 00:45:19.510
movie structures or layout media in
a fashion that's different from what

00:45:19.510 --> 00:45:22.310
it used to in previous versions.

00:45:22.340 --> 00:45:26.560
But this shouldn't affect you
because by setting this property,

00:45:26.610 --> 00:45:30.830
you're sort of implicitly agreeing
with QuickTime and saying that

00:45:30.890 --> 00:45:34.500
I'm going to treat your movie
structures as an abstraction.

00:45:34.500 --> 00:45:39.110
I'm not going to delve into the internals
or make any sorts of assumptions.

00:45:39.110 --> 00:45:43.860
I'm going to access this movie structure
through QuickTime's high-level APIs.

00:45:43.860 --> 00:45:46.680
And what does this get you?

00:45:46.720 --> 00:45:50.940
Well, for one, you can get the VBR-style
import behavior.

00:45:50.940 --> 00:45:52.840
Just to give you a little
bit of... background.

00:45:52.840 --> 00:45:59.430
Right now, QuickTime's MP3 importer,
by default, when it encounters VBR media,

00:45:59.430 --> 00:46:03.660
does not create accurate
VBR-style sample tables.

00:46:03.680 --> 00:46:07.590
And this is because of
compatibility reasons.

00:46:07.600 --> 00:46:11.700
When we tried to do this,
we broke certain older applications that

00:46:11.840 --> 00:46:16.970
were making implicit assumptions about
how the movie structures are laid out.

00:46:17.000 --> 00:46:22.880
If you remember Brad talking about
the get media sample... Yeah.

00:46:22.880 --> 00:46:25.960
...and the sound converter
combination that we highly discourage,

00:46:25.960 --> 00:46:28.070
these applications were doing that.

00:46:28.180 --> 00:46:31.190
They were basically delving
deep into the movies,

00:46:31.190 --> 00:46:34.200
tracks, media,
getting at the samples and doing

00:46:34.200 --> 00:46:36.530
their own decoding and whatsoever.

00:46:39.300 --> 00:46:43.830
Because such applications exist,
we can't change the default behavior,

00:46:43.950 --> 00:46:47.320
but if you're a new modern
application and you want to

00:46:47.380 --> 00:46:51.790
opt into this VBR style import,
which is the more accurate import

00:46:51.800 --> 00:46:56.280
and helps you to eliminate dropouts
and helps you to synchronize better,

00:46:56.280 --> 00:47:01.040
then you set this property to let
QuickTime know that you'd like it so.

00:47:01.040 --> 00:47:06.310
And in the future,
we can add other kinds of optimization.

00:47:06.380 --> 00:47:14.340
For example, we could import movies at
the time scale of the audio,

00:47:14.340 --> 00:47:19.740
and this helps sample accuracy,
and you get this for free

00:47:19.740 --> 00:47:22.390
if you've already opted in.

00:47:22.570 --> 00:47:26.600
This is new in Leopard,
and the two properties that

00:47:26.600 --> 00:47:30.380
are new are one works with
the new movie from properties,

00:47:30.380 --> 00:47:35.940
and the new movie from properties is
the preferred way of opening a movie,

00:47:35.940 --> 00:47:39.390
but you can also,
if you for some reason have to deal

00:47:39.390 --> 00:47:44.480
directly with the importer component,
you can use the other property

00:47:44.480 --> 00:47:48.020
and call it right after
you've opened the component,

00:47:48.020 --> 00:47:50.640
but before you do any sort of import.

00:47:53.350 --> 00:47:55.990
So those three were just
some quick new properties.

00:47:56.070 --> 00:48:01.670
I'd like to now move on to
the Audio Context Insert APIs.

00:48:05.300 --> 00:48:11.780
QuickTime has for many years
had a story for video effects.

00:48:11.780 --> 00:48:16.940
We've had a video effects architecture,
but we haven't had any corresponding

00:48:16.940 --> 00:48:18.770
story on the audio side.

00:48:18.780 --> 00:48:26.090
There's not really been any way
to get at the synchronized audio.

00:48:27.230 --> 00:48:31.180
QuickTime's audio context has
been pretty much of a black box

00:48:31.180 --> 00:48:33.700
that you couldn't really access.

00:48:33.700 --> 00:48:40.100
Sometimes we got questions as to
how do we perform custom processing,

00:48:40.100 --> 00:48:43.550
and the easiest solution, well,
the only solution we could

00:48:43.550 --> 00:48:47.140
give you was get at the audio
using movie audio extraction,

00:48:47.140 --> 00:48:49.460
do your custom processing,
but after that,

00:48:49.590 --> 00:48:51.110
you're kind of on your own.

00:48:51.120 --> 00:48:56.580
You have to deal with the synchronization
beyond that custom processing point.

00:48:56.740 --> 00:48:59.360
So essentially,
we were asking you to write your

00:48:59.360 --> 00:49:04.490
own mini QuickTime playback engine,
and that was kind of a difficult

00:49:04.490 --> 00:49:08.160
solution and not something we
should have expected you to do.

00:49:08.160 --> 00:49:12.780
So these insert APIs are trying
to make that job easier for you,

00:49:12.780 --> 00:49:18.280
and what they are is a way for you
to slot in a custom processing unit

00:49:18.300 --> 00:49:20.370
into QuickTime's rendering chain.

00:49:20.380 --> 00:49:25.440
And once you're slotted in there,
you could either perform,

00:49:26.340 --> 00:49:32.310
add custom effects like do
mixing or perform any kind of,

00:49:32.310 --> 00:49:36.940
add a filter or whatever,
or you could not manipulate the data,

00:49:36.940 --> 00:49:41.500
but just watch the synchronized data
fly by and do data visualization.

00:49:43.990 --> 00:49:50.110
You can insert an effect during
real-time rendering to an output device,

00:49:50.110 --> 00:49:55.090
and you can also do this
during movie audio extraction.

00:49:55.500 --> 00:50:00.500
And this insert API is completely
compatible with audio units.

00:50:00.500 --> 00:50:05.560
It's driven by callbacks,
so it can work really easily

00:50:05.560 --> 00:50:09.100
if the kind of processing you
do is done using audio units,

00:50:09.130 --> 00:50:11.480
but it doesn't limit you
to using audio units.

00:50:11.490 --> 00:50:15.620
So you can do your own custom processing,
or if you're on Windows,

00:50:15.760 --> 00:50:18.440
do use direct show filters, et cetera.

00:50:21.570 --> 00:50:25.340
So audio context inserts,
but what exactly is the audio context?

00:50:25.340 --> 00:50:29.780
So let's review that a little
bit and also look at how data

00:50:29.780 --> 00:50:33.010
flows in QuickTime's path.

00:50:33.230 --> 00:50:34.890
AudioPath.

00:50:34.950 --> 00:50:39.980
So every device on the system has
this concept of a device context.

00:50:39.980 --> 00:50:43.230
It's not something you
actually can get at,

00:50:43.230 --> 00:50:44.520
but it exists.

00:50:44.520 --> 00:50:51.700
And generally, when you open a movie,
the movie just plays to the

00:50:51.850 --> 00:50:53.960
default device and all is well.

00:50:53.960 --> 00:50:57.560
But you might want to play the
movie to a different device.

00:50:57.580 --> 00:51:03.080
And the way you do that is create
a context from this device context.

00:51:03.100 --> 00:51:05.870
And associate a movie with it.

00:51:05.960 --> 00:51:09.980
So a movie audio context is kind
of considered as a connection

00:51:09.980 --> 00:51:12.100
between a movie and a device.

00:51:12.100 --> 00:51:18.740
And if you're not doing real-time
playback but doing extraction instead,

00:51:18.740 --> 00:51:23.960
what you'd be playing to is this
abstract notion of an extraction context.

00:51:24.020 --> 00:51:28.000
Again, you can't really get at this,
but this is what exists under the hood.

00:51:30.020 --> 00:51:35.130
If the movie has multiple tracks,
then audio from those tracks gets

00:51:35.130 --> 00:51:39.500
mixed into a movie mix before
it's sent to device or before it's

00:51:39.580 --> 00:51:41.060
sent to the extraction context.

00:51:41.060 --> 00:51:46.340
Now, this mix we refer to
as a movie summary mix.

00:51:46.340 --> 00:51:50.800
And the sample rate, it is PCM audio.

00:51:50.800 --> 00:51:54.380
Its sample rate is equal to
the rate of the highest sample

00:51:54.750 --> 00:51:56.550
rate amongst the tracks.

00:51:57.060 --> 00:52:04.390
And its channel layout is a layout
that gets created by mixing like

00:52:04.390 --> 00:52:05.870
channels of the tracks together.

00:52:05.880 --> 00:52:08.890
So if that didn't make sense,
this picture might help you.

00:52:08.900 --> 00:52:13.830
Here you see three tracks,
and you can see that the lefts and

00:52:13.830 --> 00:52:15.880
the rights are mixing together.

00:52:15.880 --> 00:52:22.500
And the movie summary mix is that
column you see in the middle.

00:52:22.710 --> 00:52:25.280
So where do the inserts fit in?

00:52:25.350 --> 00:52:28.400
They fit in right there.

00:52:28.450 --> 00:52:32.760
The input to the insert
is the movie summary mix.

00:52:32.810 --> 00:52:34.840
And generally,
when you're writing your insert,

00:52:34.840 --> 00:52:40.210
you want to try and process the
data with the channel layout

00:52:40.220 --> 00:52:41.750
equal to the movie summary mix.

00:52:41.800 --> 00:52:45.880
But sometimes, depending on what
processing you're doing,

00:52:45.920 --> 00:52:50.210
it might be the case that you are
constrained by what you can deal

00:52:50.210 --> 00:52:52.610
with in terms of in and out layouts.

00:52:52.710 --> 00:52:54.860
In that case,
when you register the insert,

00:52:55.060 --> 00:52:58.780
you let QuickTime know what you
expect as the input channel layout.

00:52:58.890 --> 00:53:02.920
And QuickTime will do a mix for you.

00:53:02.920 --> 00:53:06.620
So the summary mix gets mixed into
the mix that you're expecting.

00:53:06.730 --> 00:53:09.010
And then the data gets handed to you.

00:53:09.160 --> 00:53:13.490
You do your processing and then
hand the data back to QuickTime,

00:53:13.580 --> 00:53:17.580
which then gets sent to either the
device or the extraction context.

00:53:17.810 --> 00:53:23.260
So it's important to note here that
if you're working with a movie that

00:53:23.260 --> 00:53:30.190
has created a summary mix of 5.1,
but your insert or its internal

00:53:30.220 --> 00:53:35.170
processing can only do a stereo to stereo

00:53:35.270 --> 00:53:39.200
Effect, then you're constraining what's
being sent to the device.

00:53:39.200 --> 00:53:42.680
So stereo content will
be sent to the device.

00:53:43.930 --> 00:53:47.380
I'd like to now do a
demo of an application.

00:53:47.490 --> 00:53:52.600
It's a client application of the inserts,
and...

00:53:52.930 --> 00:53:58.270
It uses all these insert APIs and
implements the callbacks needed.

00:54:10.270 --> 00:54:13.880
That's just a movie of Brad playing
his guitar while four Brads

00:54:13.880 --> 00:54:20.500
playing their guitars because
you can never have too many Brads.

00:54:23.660 --> 00:54:25.800
I'm going to open up the inserts panel.

00:54:25.800 --> 00:54:32.320
What you see here in the top box is the
movie summary mix that I just mentioned.

00:54:32.320 --> 00:54:35.350
And I'd like to mention
here that we have,

00:54:35.350 --> 00:54:40.510
in QuickTime 7.1,
made two more properties public that help

00:54:40.540 --> 00:54:43.520
you get at the movie and the devices mix.

00:54:43.520 --> 00:54:48.600
So you can get at the movie summary mix,
and that's the property I've used

00:54:48.690 --> 00:54:50.920
to get the movie summary mix.

00:54:50.970 --> 00:54:56.230
And here you see, well, it's a stereo...

00:54:56.580 --> 00:55:01.700
Studio Content, 32-bit floor and with a
sample rate of 48 kilohertz.

00:55:01.700 --> 00:55:05.940
At the bottom is what the
device is configured to.

00:55:05.940 --> 00:55:13.280
And this particular application is using
audio units for its internal processing.

00:55:13.280 --> 00:55:17.140
And out here is a cool
unit called the filter.

00:55:17.140 --> 00:55:21.640
If you like how this looks,
you can get at it and it's code

00:55:21.710 --> 00:55:24.500
in the Core Audio developer SDK.

00:55:24.500 --> 00:55:27.280
So I will now configure my insert.

00:55:27.330 --> 00:55:31.640
I'm going to select a layout,
and I'm going to try and select

00:55:31.640 --> 00:55:36.110
a layout that is consistent
with the movie summary mix,

00:55:36.200 --> 00:55:38.410
so in this case, stereo.

00:55:39.300 --> 00:55:43.730
And my insert is pretty much
good to go at this point,

00:55:43.860 --> 00:55:47.640
so if I play,
it's going to be included in the

00:55:47.640 --> 00:55:52.930
QuickTime signal processing path.

00:55:58.500 --> 00:56:02.170
So here I'm varying some parameters
of this filter and as you can

00:56:02.170 --> 00:56:07.710
see the effects are being applied
real time while playing back.

00:56:09.100 --> 00:56:14.660
Let's do another unit, say the pitch.

00:56:26.600 --> 00:56:39.600
[Transcript missing]

00:56:42.270 --> 00:56:45.920
What's going on here is the
insert that's configured here

00:56:46.190 --> 00:56:50.200
is going to be inserted in the
extraction that we set up over here.

00:56:50.270 --> 00:56:58.680
And so up here you see that it's set to
extract to a default layer of stereo,

00:56:58.680 --> 00:57:00.690
and it's going to...

00:57:00.940 --> 00:57:24.890
Extract the entire file.

00:57:24.890 --> 00:57:24.890
And if I were to hit export,
I'd get an option to save

00:57:24.890 --> 00:57:24.890
it to a certain file,
but for just to save some time,

00:57:24.890 --> 00:57:24.890
I'm going to just preview this.

00:57:24.890 --> 00:57:24.890
But know that this preview isn't
doing playback through QuickTime.

00:57:24.890 --> 00:57:24.890
It's actually previewing the
extracted samples after the insert

00:57:24.890 --> 00:57:24.890
has been applied to the extraction.

00:57:24.890 --> 00:57:24.890
So if I play that...

00:57:29.700 --> 00:57:35.070
The pitch parameter has been
applied and you can see the effect.

00:57:36.600 --> 00:57:41.160
Just an idea of the kinds of things
you can do with these inserts APIs.

00:57:41.170 --> 00:57:45.760
And like I said, this is a really simple
application that uses audio units,

00:57:45.770 --> 00:57:48.400
but you can roll in all
your custom processing.

00:57:48.400 --> 00:57:52.210
Could we switch back to slides?

00:58:00.500 --> 00:58:03.920
If you were to do this,
what were the steps involved

00:58:03.920 --> 00:58:05.660
in setting all this up?

00:58:05.660 --> 00:58:09.600
The first thing you'd want to do
is query the movie's summary mix.

00:58:09.600 --> 00:58:12.150
This, as I said,
is for you to find out whether

00:58:12.250 --> 00:58:16.300
you can deal with the mix
that the movie is creating.

00:58:16.820 --> 00:58:20.840
So after you've queried the summary mix,
you try and see whether you can

00:58:20.920 --> 00:58:24.630
process that mix as an input mix.

00:58:26.000 --> 00:58:32.500
If you create a context for
the default audio device using,

00:58:32.500 --> 00:58:35.590
or whatever device you need
to play it back to using the

00:58:35.590 --> 00:58:40.660
create context for audio device,
and you pass in a device UID,

00:58:40.660 --> 00:58:42.940
and what you get back is a context.

00:58:43.680 --> 00:58:48.420
Once you have this context, you, well,
first you register your

00:58:48.570 --> 00:58:50.510
insert with that context.

00:58:50.510 --> 00:58:54.650
And the function you use to do that
is the register insert function,

00:58:54.650 --> 00:58:57.120
and you provide some
registration information that

00:58:57.120 --> 00:59:00.920
I'll get into some more detail,
but here's your chance to provide

00:59:00.920 --> 00:59:04.910
your in and out layouts that you
support and addresses to callbacks

00:59:04.920 --> 00:59:07.080
that you will be implementing.

00:59:09.870 --> 00:59:15.700
So this context with the insert
register in it is then set on a movie.

00:59:15.700 --> 00:59:18.660
If you already have a movie open,
then you just do a set

00:59:18.760 --> 00:59:19.860
movie audio context.

00:59:19.860 --> 00:59:24.320
If you're creating a new movie,
you can send it to the

00:59:24.320 --> 00:59:28.700
new movie from properties,
pass in this audio

00:59:28.840 --> 00:59:31.430
context to that function.

00:59:31.790 --> 00:59:35.850
So those are the only five
steps that are really needed,

00:59:35.850 --> 00:59:39.610
and you're good to go after that point,
and QuickTime's going to

00:59:39.610 --> 00:59:43.640
make calls to your callbacks,
and you're in the chain at that point.

00:59:43.680 --> 00:59:46.360
So what are the callbacks
that you need to implement?

00:59:46.360 --> 00:59:47.180
There's three.

00:59:47.180 --> 00:59:50.760
You need to implement a reset callback,
a process data,

00:59:50.910 --> 00:59:55.690
which is your render callback,
and an optional finalized callback.

00:59:55.760 --> 01:00:00.940
So the reset callback is called right
in the beginning during initialization.

01:00:01.620 --> 01:00:04.010
And this is where

01:00:04.400 --> 01:01:21.700
[Transcript missing]

01:01:21.900 --> 01:01:26.360
The reset callback also gets
called every time there's an

01:01:26.360 --> 01:01:28.300
interruption in the render chain.

01:01:28.330 --> 01:01:31.790
And this is--so in addition
to that format negotiation,

01:01:32.030 --> 01:01:36.580
this is the right place to
reset any of your buffers if you

01:01:36.580 --> 01:01:38.290
have latency to clear them out.

01:01:38.350 --> 01:01:42.590
If you're using audio units underneath,
here's your place to reset those units.

01:01:42.720 --> 01:01:46.950
Basically clear any kind of state
that you may be holding onto.

01:01:47.880 --> 01:01:52.360
The process data callback is called
per buffer of audio rendered.

01:01:52.360 --> 01:01:55.520
QuickTime hands you input audio.

01:01:55.520 --> 01:01:58.530
You do your processing and
hand it back to QuickTime.

01:01:58.540 --> 01:02:04.510
And note that this callback is made on
the high-priority audio rendering thread,

01:02:04.510 --> 01:02:06.940
so you want to be really zippy.

01:02:06.940 --> 01:02:10.320
You want to avoid making
memory allocations.

01:02:11.340 --> 01:02:16.020
You want to avoid CF operations because
invariably they take spin locks,

01:02:16.040 --> 01:02:22.870
and in general you want to be quick
about doing things in this render call.

01:02:23.770 --> 01:02:28.700
One thing I didn't mention is that
QuickTime does not implement any

01:02:28.700 --> 01:02:31.070
kind of bypass for your insert.

01:02:31.080 --> 01:02:35.060
So if your client application
does offer a bypass option,

01:02:35.070 --> 01:02:40.860
then you need to still stay true
to the contract that has been

01:02:40.860 --> 01:02:44.580
set regarding your output layout.

01:02:44.700 --> 01:02:47.460
So even if you don't do
any processing of audio,

01:02:47.460 --> 01:02:50.950
if you've said that you're
going to take in a stereo

01:02:51.380 --> 01:02:54.690
input and create a quad output,
you still need to be

01:02:54.690 --> 01:02:59.640
doing that kind of mixing,
even in the bypassed state.

01:03:02.410 --> 01:03:05.080
And the finalized callback is optional.

01:03:05.140 --> 01:03:09.020
It gets called whenever the audio
context is going to go away,

01:03:09.040 --> 01:03:14.670
either because the movie was closed
or if it's movie audio extraction,

01:03:14.720 --> 01:03:16.400
the context was reset.

01:03:16.400 --> 01:03:19.440
And this is a signal
from QuickTime saying,

01:03:19.440 --> 01:03:21.920
no more callbacks are going
to be made to your insert.

01:03:21.920 --> 01:03:26.810
And that's a good place to
sort of let go of any resources

01:03:26.900 --> 01:03:28.360
that you may be holding onto.

01:03:28.360 --> 01:03:31.460
If you're, again,
using audio units underneath,

01:03:31.460 --> 01:03:35.030
that's a good place to
close those components.

01:03:37.340 --> 01:03:41.050
So I mentioned this registration
information and that struct,

01:03:41.050 --> 01:03:44.740
and that struct looks exactly like that.

01:03:44.740 --> 01:03:46.000
Let's start from the bottom.

01:03:46.000 --> 01:03:48.940
We have the three callbacks,
so you provide addresses

01:03:48.950 --> 01:03:50.430
to those three callbacks.

01:03:50.720 --> 01:03:55.340
Then you provide information about
your input and output channel layouts,

01:03:55.370 --> 01:04:01.050
and the first parameter is the user
data which is sent to-- it's sent as a

01:04:01.050 --> 01:04:04.390
first parameter to your three callbacks.

01:04:06.430 --> 01:04:10.140
Here's a bit of code following the
same steps that we went through.

01:04:10.140 --> 01:04:14.720
So in step number one,
you query the movie audio context,

01:04:14.720 --> 01:04:18.000
and like I said,
you query the movie's summary

01:04:18.000 --> 01:04:21.830
layout and summary ASBD,
and like I said,

01:04:21.890 --> 01:04:24.860
we have a new property that
you can use to do that.

01:04:24.920 --> 01:04:27.980
Then there's a bit of
pseudo-code in step number two,

01:04:27.980 --> 01:04:29.820
but that's the general idea.

01:04:29.820 --> 01:04:35.700
You would try and see if you can handle
the layout and the summary mix that

01:04:35.930 --> 01:04:40.460
the movie is claiming to be creating,
and if not,

01:04:40.460 --> 01:04:47.120
then you get the right in-and-out
layouts that your insert can process.

01:04:49.850 --> 01:04:55.550
Then you fill out your structure.

01:04:55.550 --> 01:04:55.550
That's pretty self-explanatory.

01:04:56.440 --> 01:04:59.790
In step number four,
you create an audio context.

01:04:59.840 --> 01:05:03.640
Now, here we're creating a context
for the default device,

01:05:03.640 --> 01:05:09.180
so we're passing a UID of null,
and we get back a new audio context.

01:05:09.340 --> 01:05:14.790
We then register our insert with that
context in step number five and then

01:05:14.800 --> 01:05:18.310
set it on the movie in step number six.

01:05:20.540 --> 01:05:24.440
So we just went over the steps
involved in getting hooked

01:05:24.500 --> 01:05:26.730
into QuickTime's playback path.

01:05:26.840 --> 01:05:30.340
But like I said,
you could also insert your

01:05:30.340 --> 01:05:34.840
custom processing in QuickTime's
movie audio extraction path.

01:05:34.930 --> 01:05:39.200
And the way to do this
is slightly different,

01:05:39.200 --> 01:05:44.060
but very intuitive if you've been working
with the movie audio extraction APIs,

01:05:44.060 --> 01:05:49.710
which is first thing you do is begin
a movie audio extraction session.

01:05:49.710 --> 01:05:55.580
You would query the extraction layout to
see if your insert can deal with that.

01:05:56.560 --> 01:05:58.840
You then set any
properties that you need.

01:05:58.840 --> 01:06:01.520
These might be the start and
stop times of the extraction,

01:06:01.520 --> 01:06:05.640
the layout that you might extract to,
etc.

01:06:05.750 --> 01:06:09.340
But the property that is of
importance in this discussion

01:06:09.340 --> 01:06:14.120
is the register insert property,
and what you provide to this property

01:06:14.120 --> 01:06:20.330
is the struct that we went through,
the register info registry structure.

01:06:20.570 --> 01:06:24.180
QuickTime Registry Infrastructure.

01:06:24.200 --> 01:06:31.240
And then once you're configured,
the fill buffer call can be made,

01:06:31.270 --> 01:06:36.200
and this is where your reset and
process data callbacks are called.

01:06:36.240 --> 01:06:38.920
And once you're ready to end the session,
you call end,

01:06:38.920 --> 01:06:43.180
and that's where your finalized
cleanup callback is called.

01:06:43.860 --> 01:06:47.960
So the only new piece of code here
is the setting of one property,

01:06:47.960 --> 01:06:51.670
and what you provide is
that registry info struct.

01:06:54.970 --> 01:06:58.180
A few things to note when
you're working with inserts.

01:06:58.270 --> 01:07:01.900
One, you can have only one
insert per audio context.

01:07:01.900 --> 01:07:06.850
So if you want to add multiple effects,
you would want to create, say,

01:07:06.900 --> 01:07:12.410
a graph of your own on your end,
but on the QuickTime side,

01:07:12.530 --> 01:07:14.390
it's just one insert.

01:07:16.310 --> 01:07:18.640
QuickTime will not work
with protected content,

01:07:18.640 --> 01:07:23.150
so if you have movies with some
tracks that have protected content,

01:07:23.210 --> 01:07:27.070
the call to register insert will fail.

01:07:30.100 --> 01:07:37.520
and you must be ready to process at
whatever sample rate audio is given

01:07:37.520 --> 01:07:39.230
to you during the reset callback.

01:07:39.240 --> 01:07:48.100
Well, I sort of showed you in the data
flow diagram that what you get is the

01:07:48.100 --> 01:07:51.460
sample rate of the movie summary mix,
but QuickTime is free to

01:07:51.460 --> 01:07:54.600
optimize that and change that,
so you shouldn't be making any

01:07:54.600 --> 01:07:58.440
assumptions about that and should
be able to deal with the sample rate

01:07:58.440 --> 01:08:02.700
given to you and not change it when
you're doing your own processing.

01:08:05.120 --> 01:08:09.950
And that was it regarding
the audio context inserts,

01:08:09.950 --> 01:08:12.550
and in general,
that's the end of the session.

01:08:12.580 --> 01:08:16.320
But I'd like to do a quick summary
of what we've learned today.

01:08:16.350 --> 01:08:20.990
We started with a quick overview of
QuickTime Audio and its capabilities,

01:08:20.990 --> 01:08:23.270
and hopefully you have a
better understanding of what

01:08:23.390 --> 01:08:26.850
QuickTime Audio is good at so
that you can make a better choice

01:08:26.960 --> 01:08:30.180
between that and Core Audio's APIs.

01:08:30.620 --> 01:08:32.420
We went over some best practices.

01:08:32.420 --> 01:08:35.340
Sound managers,
sound converter are deprecated.

01:08:35.340 --> 01:08:40.490
We'd like you to use the sound
description accessor functions

01:08:40.500 --> 01:08:45.680
instead of dealing with the sound
description handles directly.

01:08:45.680 --> 01:08:50.840
And movie audio extraction is the
new way to go to get at PCM data.

01:08:50.840 --> 01:08:55.820
And then we covered various new
properties and two main APIs.

01:08:56.900 --> 01:09:00.060
There's the standard audio
compression component and its APIs and

01:09:00.130 --> 01:09:02.240
the audio context insert APIs.

01:09:02.240 --> 01:09:05.280
And that's it for the session.

01:09:06.920 --> 01:09:10.720
That's some documentation that flew by.