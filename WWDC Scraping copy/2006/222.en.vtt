WEBVTT

00:00:11.580 --> 00:00:16.100
I'm Dave Howell,
an engineer working on FxPlug in

00:00:16.170 --> 00:00:17.900
the Pro Apps department at Apple.

00:00:17.900 --> 00:00:21.850
We're going to talk today
about the FxPlug SDK,

00:00:21.940 --> 00:00:27.660
which we introduced at WWC last
year and at NAB before that.

00:00:27.760 --> 00:00:31.100
We're going to talk about how you write
FxPlugs and introduce some new features

00:00:31.100 --> 00:00:37.410
in the new version that's coming out,
FxPlug 1.1.

00:00:39.310 --> 00:00:43.490
Now,
the FxPlug SDK is a plug-in architecture

00:00:43.800 --> 00:00:47.700
specifically for making image
processing and visual effects plug-ins.

00:00:47.740 --> 00:00:55.560
Oh, that's so much better.

00:01:01.970 --> 00:01:09.620
The Apple Pro Apps team put
together FxPlug and first introduced

00:01:09.640 --> 00:01:12.140
it in Motion 2.0 last year.

00:01:12.140 --> 00:01:15.460
And soon we'll add
support in Final Cut also.

00:01:15.460 --> 00:01:17.350
And we're actually going to
show you a little bit about

00:01:17.350 --> 00:01:19.300
what that's going to look like.

00:01:21.550 --> 00:01:28.400
The reasons that we developed FxPlug as
a new plug-in architecture last year was,

00:01:28.400 --> 00:01:31.960
first of all,
to be able to define what features

00:01:31.960 --> 00:01:35.170
we have and to add new features
to a plug-in spec that enhanced

00:01:35.170 --> 00:01:39.280
our apps that were specifically
designed for our own applications.

00:01:39.280 --> 00:01:41.650
And would also enable you as plug-in
developers to take advantage of

00:01:41.650 --> 00:01:45.430
the fact that this is running
on one platform and you can use

00:01:45.430 --> 00:01:51.330
MacÂ OS concepts like Core Image and
Quartz Composer and QuickTime and

00:01:51.400 --> 00:01:54.550
Interface Builder and so on.

00:01:54.570 --> 00:01:59.240
And in fact, for custom UI,
you can use NSViews and Cocoa to

00:01:59.240 --> 00:02:02.290
simplify the user interface.

00:02:04.910 --> 00:02:08.400
And another reason was we wanted
to add hardware acceleration,

00:02:08.470 --> 00:02:11.300
and we were the first
plug-in architecture.

00:02:11.300 --> 00:02:15.440
FxPlug was the first plug-in architecture
to add hardware acceleration so that you

00:02:15.440 --> 00:02:21.030
can run effects on OpenGL or accelerated
by Core Image or Quartz Composer.

00:02:21.110 --> 00:02:26.740
And it also, when new hardware comes out,
it lets us take advantage of things

00:02:26.740 --> 00:02:29.310
like universal binaries quickly.

00:02:30.350 --> 00:02:34.800
Now, why would you want to write an
FxPlug as a plug-in developer?

00:02:34.890 --> 00:02:36.640
First of all,
and maybe the biggest reason for some,

00:02:36.640 --> 00:02:42.380
is that there are over 600,000 registered
users of the apps that host FxPlugs.

00:02:42.380 --> 00:02:46.610
Another one is that your plug-ins
can really shine in FxPlug because

00:02:46.610 --> 00:02:48.800
of the hardware acceleration.

00:02:49.740 --> 00:02:53.250
Some of the plug-ins that we
demoed last year had been plug-ins

00:02:53.250 --> 00:02:57.400
in other architectures before,
and when they ported to FxPlug,

00:02:57.400 --> 00:03:00.550
they got several times speed
improvement in the rendering.

00:03:00.560 --> 00:03:04.530
Another thing, as I mentioned,
was your custom UI can be done in Cocoa,

00:03:04.560 --> 00:03:07.820
which is just,
it'll speed up your development times.

00:03:07.840 --> 00:03:11.300
On-screen controls in
Motion can be done with OpenGL,

00:03:11.300 --> 00:03:16.280
and we'll talk a little bit about
differences between Final Cut and Motion,

00:03:16.280 --> 00:03:18.460
but one that I'll mention here
is that the on-screen controls

00:03:18.600 --> 00:03:19.560
won't be in the next version.

00:03:19.740 --> 00:03:22.740
They're the final cut,
but are still supported in Motion,

00:03:22.740 --> 00:03:25.270
and they're accelerated by OpenGL.

00:03:25.900 --> 00:03:30.040
And as I mentioned, universal binaries.

00:03:30.040 --> 00:03:33.750
Without support for universal binaries,
you would have to run a host app

00:03:33.750 --> 00:03:37.020
in Rosetta to support a plug-in,
and you just wouldn't want to see

00:03:37.040 --> 00:03:38.300
that performance in a pro app.

00:03:38.300 --> 00:03:42.830
Another feature that we've added that
I think is compelling for plug-in

00:03:42.830 --> 00:03:45.760
developers is support for YUV plus alpha.

00:03:45.760 --> 00:03:51.400
This is the YCBCR with alpha
formats that Final Cut uses.

00:03:52.220 --> 00:03:56.610
We had RGBA and ARGB in 1.0,
but this is new.

00:03:56.620 --> 00:04:00.420
And also floating point pixels,
which we have already had.

00:04:00.420 --> 00:04:01.420
What's new?

00:04:01.420 --> 00:04:04.360
I've indicated in yellow some of
the things that are new features.

00:04:04.360 --> 00:04:08.050
And the floating point pixels we've had,
but now we have floating

00:04:08.050 --> 00:04:09.510
point YUV as well.

00:04:10.920 --> 00:04:17.110
I'd like to have Vijay Sundaram
come up and demo the forthcoming

00:04:17.110 --> 00:04:20.920
version of Final Cut and show you
what FxPlugs will look like in there.

00:04:20.920 --> 00:04:22.980
He's a technical lead
on the Final Cut team.

00:04:22.980 --> 00:04:25.020
Over to Vijay.

00:04:25.040 --> 00:04:29.060
Thank you very much, Dave,
and welcome everybody to the session.

00:04:29.060 --> 00:04:32.860
I'm going to give you a quick
demonstration on a future

00:04:32.860 --> 00:04:36.670
release of Final Cut Pro,
but I wanted to talk to you a little

00:04:36.670 --> 00:04:42.540
bit about the fact that writing
FxPlugs for Final Cut Pro entails a few

00:04:42.600 --> 00:04:44.520
things that people should be aware of.

00:04:44.520 --> 00:04:48.720
First off, as Dave mentioned,
there's software and hardware support.

00:04:48.720 --> 00:04:54.210
Now, it's important that a plug-in allow
for both hardware and software

00:04:54.210 --> 00:04:58.690
support because our users typically
tend to work on the high-end

00:04:58.770 --> 00:05:01.300
towers as well as the MacBook Pros.

00:05:01.300 --> 00:05:07.260
So if you're taking advantage of a,
you know, high-end GPU on the towers,

00:05:07.310 --> 00:05:11.590
you want to give them a software solution
so that they can also use the plug-ins

00:05:11.590 --> 00:05:14.200
on a system like the MacBook Pro.

00:05:14.200 --> 00:05:19.080
32-bit float support is being introduced
for Final Cut Pro in the YUV space.

00:05:19.170 --> 00:05:24.140
This is a native space for Final Cut Pro,
so there's no need for you to

00:05:24.140 --> 00:05:27.510
go and change from YUV to RGB,
and it helps in performance,

00:05:27.530 --> 00:05:31.620
which will allow your users to
be able to be more responsive

00:05:31.620 --> 00:05:32.950
with the plug-ins itself.

00:05:33.000 --> 00:05:34.800
On-screen controls.

00:05:34.800 --> 00:05:39.100
They have been there for Motion,
and they are not available

00:05:39.110 --> 00:05:40.200
for Final Cut Pro.

00:05:40.200 --> 00:05:42.960
So what you want to do is,
if you have a lot of plug-ins

00:05:42.960 --> 00:05:45.570
that have on-screen controls,
you want to be able to make sure

00:05:45.570 --> 00:05:50.410
that you use the controls that are
inherent inside of FCP to be able

00:05:50.410 --> 00:05:54.000
to give them the equivalent of
going and using the plug-in in the

00:05:54.000 --> 00:05:55.790
Motion app as well as in Final Cut Pro.

00:05:55.800 --> 00:05:58.230
Pixel aspect ratio is very important.

00:05:58.330 --> 00:06:01.200
This is important because
Final Cut Pro users tend to

00:06:01.200 --> 00:06:04.600
use a lot of different media,
and therefore, tend to use,

00:06:04.820 --> 00:06:06.800
a lot of different pixel aspect ratios.

00:06:06.830 --> 00:06:10.390
And it's very important for your
plug-ins to be able to respect

00:06:10.390 --> 00:06:15.420
this value as it comes in to you,
so that it looks correct as far as

00:06:15.420 --> 00:06:19.800
the user is concerned when using your
plug-in instead of Final Cut Pro.

00:06:19.800 --> 00:06:22.800
As I said, native YUV support is new.

00:06:22.800 --> 00:06:25.800
There are two flavors
that we have of YUV.

00:06:25.800 --> 00:06:29.800
For 8-bit, we use R408, and for 32-bit,
we use R40FL.

00:06:29.800 --> 00:06:32.290
These two color spaces,
more information about

00:06:32.290 --> 00:06:32.800
it will be available.

00:06:32.800 --> 00:06:34.800
It's currently available, actually.

00:06:34.800 --> 00:06:38.790
And Dave will, in his presentation,
tell you where you can get a link

00:06:38.790 --> 00:06:42.790
to what these spaces look like
and more information regarding it.

00:06:42.800 --> 00:06:50.800
And finally, I was talking about support
for software-based FX plugs.

00:06:50.800 --> 00:06:55.430
And we've introduced FX bitmaps as
row bytes instead of just packed

00:06:55.430 --> 00:07:00.280
data so that it's easy for you to
be able to get the data and use it

00:07:00.280 --> 00:07:03.780
natively instead of converting it and
unpacking it and things like that.

00:07:03.800 --> 00:07:06.110
So having said that,
I'm going to show you a quick

00:07:06.110 --> 00:07:10.800
demonstration on my machine over here of
FX plugs running inside of Final Cut Pro.

00:07:10.800 --> 00:07:13.800
So could we switch machines, please?

00:07:17.380 --> 00:07:22.990
Okay, so what happens when you first...

00:07:24.320 --> 00:07:27.640
install your plugin.

00:07:27.640 --> 00:07:31.300
Your plugin will actually show
up inside of the effects tab.

00:07:31.530 --> 00:07:34.070
Typically, if you have a filter,
for example,

00:07:34.070 --> 00:07:37.430
this one where it says examples
would be your company name and

00:07:37.480 --> 00:07:41.240
you would have all of your filters
show up inside of that bin.

00:07:41.240 --> 00:07:43.990
Remember that we not only
allow you support for filters,

00:07:43.990 --> 00:07:47.420
we also allow you support for
gradients and transitions.

00:07:47.420 --> 00:07:52.300
So there's two more types of
filters that you can create.

00:07:52.400 --> 00:07:54.190
This particular example
is a simple method.

00:07:54.190 --> 00:07:56.310
It's actually in the 1.0 plugin.

00:07:56.310 --> 00:08:00.210
What I'm trying to show you here is
that we have backward compatibility with

00:08:00.210 --> 00:08:02.640
plugins that are built in FX bug 1.0.

00:08:02.640 --> 00:08:07.850
So if you already have plugins,
what you want to do is when the

00:08:07.850 --> 00:08:13.710
future version comes out is to test it
thoroughly and make sure that it actually

00:08:13.760 --> 00:08:17.610
works and fits within the FCP workflow
that a user is accustomed to.

00:08:17.610 --> 00:08:20.040
So in this particular case,
I'm going to show you that

00:08:20.040 --> 00:08:20.850
-- it brings up the flip.

00:08:20.850 --> 00:08:22.610
I'm going to show you that
-- it brings up the flip.

00:08:22.640 --> 00:08:26.570
filters for that.

00:08:28.010 --> 00:08:32.320
This plug-in also shows you
that we support custom controls.

00:08:32.390 --> 00:08:36.400
So this is important because you
will be able to now add your own

00:08:36.400 --> 00:08:40.120
specific custom controls that are
specific to your plug-ins and have

00:08:40.120 --> 00:08:41.900
it supported within Final Cut Pro.

00:08:41.920 --> 00:08:43.060
And this plug-in will actually work.

00:08:43.120 --> 00:08:48.840
So if you were to take
the 1.0 and compile it,

00:08:48.860 --> 00:08:51.460
you'll be able to actually bring
it inside of Final Cut Pro and

00:08:51.470 --> 00:08:53.190
see that it actually works.

00:08:53.220 --> 00:08:55.610
Also, as I was talking about,

00:08:56.190 --> 00:09:00.380
This is a very simple filter
that we're using over here.

00:09:00.380 --> 00:09:03.850
And it actually uses core image to
be able to change the Luma values

00:09:03.920 --> 00:09:05.280
and works in the native YUV support.

00:09:05.280 --> 00:09:08.930
So there's no conversion
going from RGB to YUV.

00:09:08.940 --> 00:09:12.380
And that gives you a lot of performance
and user experience gets better because

00:09:12.390 --> 00:09:15.800
the user responsiveness can get better
since the performance is better.

00:09:15.820 --> 00:09:18.810
Okay, so...

00:09:19.940 --> 00:09:25.780
The other thing that I wanted to be
able to show you is that we've actually,

00:09:25.830 --> 00:09:30.440
to be able to demonstrate this,
have been able to port some of our

00:09:30.440 --> 00:09:32.780
motion FxPlugs instead of Final Cut Pro.

00:09:32.780 --> 00:09:36.070
And I'm going to pick a
very simple example here,

00:09:36.070 --> 00:09:41.620
like Compound Blur, for example,
and remove this filter here.

00:09:43.580 --> 00:09:51.360
So anybody who's used Motion before will
probably be familiar with this plug-in.

00:09:51.360 --> 00:09:53.380
And as you can see,
it just automatically shows

00:09:53.430 --> 00:09:54.770
up inside of Final Cut Pro.

00:09:54.780 --> 00:09:58.550
These plug-ins that were
developed with the FxPlug 1.0

00:09:58.550 --> 00:10:02.660
SDK in Motion now automatically
come up inside of Final Cut Pro.

00:10:02.660 --> 00:10:07.260
So that's pretty much my demo as
far as Final Cut Pro is concerned.

00:10:07.260 --> 00:10:12.030
And I thought I'd show you a quick
thing and my editorial prowess over

00:10:12.090 --> 00:10:17.500
here where I've put everything together
so that you can see all this work.

00:10:17.500 --> 00:10:19.280
Can I get the audio too, please?

00:11:02.660 --> 00:11:07.960
So I'm sure you guys are all
excited to learn more about this

00:11:07.960 --> 00:11:12.000
API and how you can create plug-ins
for Final Cut Pro and Motion.

00:11:12.000 --> 00:11:15.450
And remember,
these plug-ins now have two hosts

00:11:15.450 --> 00:11:18.420
inside of this Final Cut Studio suite.

00:11:18.420 --> 00:11:23.480
And as Dave mentioned,
there are 600,000 plus registered users,

00:11:23.480 --> 00:11:28.120
so you have a big customer base
that you can now bring together.

00:11:28.120 --> 00:11:29.140
Thanks a lot, Dave.

00:11:29.190 --> 00:11:30.150
I'll give it back to him.

00:11:34.720 --> 00:11:38.400
So we'll talk a little bit about
how to write a FxPlug plug-in.

00:11:38.400 --> 00:11:41.980
What I'll do right now is just
go over the five simple steps.

00:11:41.980 --> 00:11:46.600
You go into Xcode and say New Project and
choose from the list of Xcode templates

00:11:46.600 --> 00:11:49.050
and choose one of our FxPlug templates.

00:11:49.050 --> 00:11:53.380
Then you create unique IDs so that
your plug-in can be differentiated from

00:11:53.410 --> 00:11:55.980
other plug-ins that have been installed.

00:11:55.980 --> 00:11:59.550
Customize the source code,
which I'll kind of gloss over for

00:11:59.550 --> 00:12:03.340
the moment because we'll spend
a lot of time on that later.

00:12:04.700 --> 00:12:08.840
Reinstall your plug-in and test
it in Motion and Final Cut.

00:12:08.840 --> 00:12:15.330
So for each of those steps, the usual,
you use in the standard Apple plug-ins

00:12:15.330 --> 00:12:18.890
section of the Xcode templates,
you'll see a project

00:12:18.930 --> 00:12:22.260
template for FxPlug Filter,
one for FxPlug Generator,

00:12:22.260 --> 00:12:27.110
and now with 1.1,
we're adding FxPlug Transition as well.

00:12:27.110 --> 00:12:30.310
So just choose one of
those and give it a name.

00:12:30.550 --> 00:12:32.450
and you'll see your project.

00:12:32.530 --> 00:12:35.640
Now, what I have here is a
pretty simple example.

00:12:35.640 --> 00:12:39.280
The FxPlug filter example
just has two source files,

00:12:39.280 --> 00:12:44.640
a .h and a .m file and Info.plist that
is what describes the plug-ins

00:12:44.640 --> 00:12:47.490
so that the host applications
can enumerate plug-ins without

00:12:47.600 --> 00:12:49.400
actually having to load their code.

00:12:50.320 --> 00:12:54.120
And then of course localizable
strings are in there as well.

00:12:54.120 --> 00:12:57.180
And that's really it for the samples.

00:12:57.180 --> 00:12:59.070
And there's not much source code in
them either so you can really get

00:12:59.110 --> 00:13:02.300
started and hook into your own code.

00:13:02.360 --> 00:13:05.470
If you're trepidatious
about going to Objective-C,

00:13:05.470 --> 00:13:09.390
I mean the fact is that the filters
pretty much do the main bulk of the

00:13:09.390 --> 00:13:13.920
Objective-C stuff you need to do and
you can call your own C functions or

00:13:13.920 --> 00:13:16.600
C++ functions directly from there.

00:13:16.770 --> 00:13:19.660
The next step you do is
to choose unique IDs,

00:13:19.660 --> 00:13:22.520
and this is sort of a
wonky little detail,

00:13:22.520 --> 00:13:25.580
but don't forget it,
because the first time that you

00:13:25.590 --> 00:13:29.190
create a plug-in from one of these
templates and don't change the UUID,

00:13:29.230 --> 00:13:30.360
it may load.

00:13:30.360 --> 00:13:32.930
But the second time, then you'll have two
plug-ins with the same ID,

00:13:32.930 --> 00:13:35.000
and they'll conflict,
and all hell will break loose,

00:13:35.000 --> 00:13:36.310
and you don't want to see it.

00:13:37.360 --> 00:13:41.140
So inside your Info.plist,
there are a couple of places

00:13:41.140 --> 00:13:42.880
where the UUIDs show up.

00:13:42.940 --> 00:13:45.370
One of them is the group,
which is the category that

00:13:45.370 --> 00:13:46.760
your plug-in falls into.

00:13:46.760 --> 00:13:48.580
You actually get to,
in your plug-in bundle,

00:13:48.580 --> 00:13:50.980
you get to define a list of
groups and a list of plug-ins.

00:13:50.980 --> 00:13:54.720
If you're just doing one,
you'll just have a single group in here,

00:13:54.720 --> 00:13:56.950
and it just defines a name and a UUID.

00:13:56.980 --> 00:13:59.580
So you modify that UUID with a new one.

00:13:59.580 --> 00:14:04.400
You do that typically by going into
Terminal and typing UUID gen and copying

00:14:04.400 --> 00:14:06.960
the result and pasting it into here.

00:14:07.360 --> 00:14:09.360
I'll show you a shortcut
for that in a minute.

00:14:09.360 --> 00:14:14.360
And then that UUID that you just
created and just pasted into there,

00:14:14.360 --> 00:14:17.280
you'll paste it in again for
the plug-in that belongs to the

00:14:17.280 --> 00:14:18.850
group that you just defined.

00:14:18.860 --> 00:14:23.660
So for each plug-in that you have here,
you'll have a name and a class name,

00:14:23.700 --> 00:14:27.860
a display name, the group UUID,
and then the plug-in UUID.

00:14:27.860 --> 00:14:31.380
So you also need to
modify the plug-in's UUID.

00:14:32.110 --> 00:14:34.960
Here's a tip for doing that.

00:14:34.960 --> 00:14:37.600
This is described in
the FxPlug SDK overview,

00:14:37.600 --> 00:14:38.710
so you don't have to memorize it.

00:14:38.760 --> 00:14:43.330
But if you create an Xcode
script and install that,

00:14:43.490 --> 00:14:47.300
this one that's shown here lets
me just press Command-Shift-U.

00:14:47.300 --> 00:14:50.100
So I select one of the UUIDs,
I press this keystroke,

00:14:50.100 --> 00:14:54.430
and it generates a UUID right there
by doing this UUID gen command.

00:14:54.440 --> 00:14:56.400
It's a great time-saver.

00:14:58.440 --> 00:15:01.630
The other thing is that this
step is pretty easy because

00:15:01.670 --> 00:15:05.020
when you look at the Info.plist,
there's a comment above each UUID saying,

00:15:05.020 --> 00:15:05.840
don't forget to change this.

00:15:05.840 --> 00:15:08.570
You can see that some of our
developers ran into this and

00:15:08.600 --> 00:15:10.820
were asking me questions,
and so that's why I go

00:15:10.830 --> 00:15:12.000
over this in such detail.

00:15:12.000 --> 00:15:15.370
In customizing the source code,
there's two simple things you have to do.

00:15:15.440 --> 00:15:19.000
You have to edit the parameter list,
which is where you declare

00:15:19.000 --> 00:15:22.960
your list of parameters,
and edit your render method or methods.

00:15:22.960 --> 00:15:28.340
Your methods for rendering
can be just CPU or just GPU.

00:15:28.420 --> 00:15:29.360
You can do both.

00:15:29.420 --> 00:15:32.840
I highly recommend doing both,
especially now that Final Cut is

00:15:32.840 --> 00:15:39.260
out because some rendering paths
will normally go in hardware,

00:15:39.260 --> 00:15:42.260
and some will be faster in software,
and the app will decide which one's best.

00:15:42.260 --> 00:15:45.180
If you're playing out to video,
for example,

00:15:45.180 --> 00:15:49.400
it's going to need to recompress a frame,
so it needs to read back

00:15:49.400 --> 00:15:52.840
a texture from the card,
and this takes time,

00:15:52.840 --> 00:15:55.710
so they'll opt to do software
rendering most of the time,

00:15:55.720 --> 00:15:58.000
unless you say that you
only do hardware rendering.

00:15:58.000 --> 00:16:00.990
Then they would do it that way,
but try to implement both

00:16:01.160 --> 00:16:04.500
because you'll get better
performance in some circumstances,

00:16:04.500 --> 00:16:06.860
and your users will be happier,
and you'll make more money,

00:16:06.860 --> 00:16:07.790
and everything will be good.

00:16:07.840 --> 00:16:14.020
Then just build your plugin,
and wherever it shows up,

00:16:14.020 --> 00:16:18.720
you'll need to either copy it each
time into one of these locations,

00:16:18.720 --> 00:16:23.340
library, plugin, fxplug, or library,
plugins, fxplug in your home directory,

00:16:23.340 --> 00:16:27.000
but I usually use a symbolic
link to point to that,

00:16:27.000 --> 00:16:27.580
so I just install this.

00:16:27.580 --> 00:16:31.440
I install the symbolic link once,
and then every time that I build it,

00:16:31.440 --> 00:16:32.920
it picks up the change.

00:16:32.930 --> 00:16:37.280
You'll still need to relaunch the
host app after building your plugin,

00:16:37.340 --> 00:16:39.590
and be sure to test in
both Motion and Final Cut,

00:16:39.600 --> 00:16:42.680
and if you have an old version
of one or a newer version of one,

00:16:42.680 --> 00:16:46.710
have them all and test on everything
because there will be differences.

00:16:47.100 --> 00:16:51.120
Since introducing FxPlug,
we've had quite a number of

00:16:51.120 --> 00:16:55.710
developers begin to write plug-ins,
and some of them have released them,

00:16:55.710 --> 00:16:57.560
and some of them announced them
and are going to release them.

00:16:57.560 --> 00:17:04.140
And I want to bring up one particular
one that I think typifies both the power

00:17:04.370 --> 00:17:09.300
of FxPlug and its custom UIs and the
kind of complex things that you can do.

00:17:09.300 --> 00:17:14.760
And it also represents an opportunity
for plug-in developers to write plug-ins

00:17:14.760 --> 00:17:20.500
that plug into his sort of plug-in
architecture that sits on top of FxPlug,

00:17:20.500 --> 00:17:21.290
or below it.

00:17:21.300 --> 00:17:26.990
Anyway, so here's Gabriel de Simone from
Noise Industries to talk

00:17:26.990 --> 00:17:29.680
about the FXFactory FxPlug.

00:17:29.700 --> 00:17:30.810
Gabriel de Simone: Thank you, Dave.

00:17:32.600 --> 00:17:33.600
Thank you.

00:17:33.600 --> 00:17:34.600
Good morning, everyone.

00:17:34.600 --> 00:17:37.570
So what I'm going to show you
this morning is our new product

00:17:37.570 --> 00:17:39.600
under development for FxPlug.

00:17:39.600 --> 00:17:42.640
And as you've just learned,
it'll be working the same in

00:17:42.640 --> 00:17:44.600
both Motion and Final Cut Pro.

00:17:44.600 --> 00:17:51.590
So let me start off with
a couple of plug-ins.

00:17:51.600 --> 00:17:51.600
I have my little sequence here.

00:17:52.830 --> 00:18:00.620
So, as you've just learned from Vijay,
the filters will appear in the same

00:18:00.620 --> 00:18:04.080
place where you're used to seeing
your current plug-ins that you

00:18:04.080 --> 00:18:05.280
may be shipping for Final Cut Pro.

00:18:05.280 --> 00:18:07.170
So, in our case,
we've created a little category

00:18:07.180 --> 00:18:08.360
called Noise Industries.

00:18:08.360 --> 00:18:09.830
These are some of our test plug-ins.

00:18:09.830 --> 00:18:11.960
This is called Watercolor.

00:18:15.900 --> 00:18:20.240
I'm going to just play with a couple of
filter parameters just to show you the

00:18:20.240 --> 00:18:23.320
kind of funky effects that we can do.

00:18:23.460 --> 00:18:25.640
So you've seen plug-ins before,
obviously.

00:18:25.640 --> 00:18:28.440
If you're a member of this crowd,
you've probably shipped plug-ins for

00:18:28.440 --> 00:18:32.010
either Final Cut Pro or other hosts.

00:18:32.080 --> 00:18:34.810
This is another one called
Threshold Posterized.

00:18:34.890 --> 00:18:37.340
So since you're kind of
used to seeing plug-ins,

00:18:37.340 --> 00:18:39.500
I'm going to jump straight
to the beef of the product,

00:18:39.500 --> 00:18:44.510
which is actually a separate
application called FX Factory.

00:18:45.400 --> 00:18:50.280
And this is sort of new from anything
that you've seen in this market.

00:18:50.870 --> 00:18:54.740
What you see here in the main window
is actually a list of effects packs.

00:18:54.980 --> 00:18:57.330
The little box on the left

00:18:57.520 --> 00:19:00.000
Just represent a bunch of plug-ins.

00:19:00.000 --> 00:19:02.790
There could be one,
there could be hundreds in it.

00:19:02.900 --> 00:19:05.710
And what I can do is actually
the best part about the product,

00:19:05.780 --> 00:19:07.390
you can actually inspect these plug-ins.

00:19:07.390 --> 00:19:11.540
So I'm going to double-click it,
or click the button.

00:19:17.900 --> 00:19:19.520
There you go.

00:19:19.580 --> 00:19:23.070
So what you see here,
by opening that FxPlug,

00:19:23.320 --> 00:19:27.140
what you're seeing is the contents of it,
which is plug-ins.

00:19:27.360 --> 00:19:28.240
There's a category.

00:19:28.240 --> 00:19:32.700
You can go in and change the category
name for localization purposes.

00:19:32.700 --> 00:19:36.050
You may go in and change
the name of the plug-ins.

00:19:36.140 --> 00:19:39.360
But where things get really interesting
is that everything that you would

00:19:39.360 --> 00:19:44.070
normally be able to do just in the code,
you can do via this UI and sort

00:19:44.080 --> 00:19:46.130
of play around with the plug-ins.

00:19:46.240 --> 00:19:48.850
So what you see here is the basic
information about the plug-in name,

00:19:48.850 --> 00:19:50.820
author, and copyright information.

00:19:50.850 --> 00:19:54.560
I'm going to skip the rendering part
and get back to it in just a minute.

00:19:54.840 --> 00:19:56.450
The next tab is the parameters.

00:19:56.480 --> 00:19:59.250
And what these are,
these are the parameters that will appear

00:19:59.290 --> 00:20:01.500
in the UI in Final Cut Pro in motion.

00:20:01.540 --> 00:20:02.850
This list is not static.

00:20:02.880 --> 00:20:06.860
In other words,
I can play around with the parameters

00:20:06.970 --> 00:20:09.020
that you would see in the host.

00:20:09.120 --> 00:20:11.110
For instance,
the watercolor filter that I just showed

00:20:11.290 --> 00:20:13.100
you obviously has this list of parameter.

00:20:13.100 --> 00:20:15.400
And as you can see,
you can tweak what the default

00:20:15.400 --> 00:20:18.690
values of the parameters,
the default values for the sliders,

00:20:18.780 --> 00:20:21.570
or create new UI widgets.

00:20:21.680 --> 00:20:24.330
But obviously,
the reason why this is very powerful

00:20:24.370 --> 00:20:27.380
is that FxFactor is different
from any other plug-in you've

00:20:27.380 --> 00:20:28.520
seen before for another reason.

00:20:28.520 --> 00:20:34.700
The usual development method for
shipping plug-ins has been that you,

00:20:34.700 --> 00:20:37.120
as you've seen,
you just create an Xcode template,

00:20:37.120 --> 00:20:42.100
add in your code, and compile it,
and you ship it, which is,

00:20:42.100 --> 00:20:44.020
in our point of view, rather slow.

00:20:44.020 --> 00:20:47.780
So what we've done is leverage some
technologies that are really amazing

00:20:47.790 --> 00:20:49.800
technologies that are part of OS X.

00:20:50.360 --> 00:20:54.480
So what you'll see here in the
rendering portion is an edit button.

00:20:54.480 --> 00:20:56.830
And by clicking it,
I'm going to do it for

00:20:56.840 --> 00:20:59.200
the watercolor filter,
for instance,

00:20:59.340 --> 00:21:01.420
it brings up a quartz composition.

00:21:01.420 --> 00:21:04.600
So each one of our plug-ins renders
through a quartz composition.

00:21:04.600 --> 00:21:08.600
You might have seen Quartz Composer in
many of the other sessions here at WWDC.

00:21:08.720 --> 00:21:12.510
And what this represents,
this is a node-based compositing engine

00:21:12.510 --> 00:21:14.930
for people who are not familiar with it.

00:21:14.980 --> 00:21:19.390
These are called patches,
and by feeding various kinds of inputs,

00:21:20.320 --> 00:21:22.830
generating outputs and passing
them onto the next patch,

00:21:22.860 --> 00:21:25.310
you basically have your
rendering pipeline.

00:21:25.320 --> 00:21:27.630
So as you can see,
a watercolor effect is a

00:21:27.630 --> 00:21:30.630
medium complexity plug-in.

00:21:30.710 --> 00:21:32.640
There are some color controls,
hue adjustments,

00:21:32.670 --> 00:21:35.710
all the way to the rendering phase.

00:21:35.910 --> 00:21:39.560
So in the limited time that we have,
I'm just going to show you a few tricks.

00:21:39.590 --> 00:21:45.010
So another plug-in that we have
is called the comic book plug-in.

00:21:45.010 --> 00:21:48.800
And suppose that I wanted
to use that plug-in,

00:21:48.800 --> 00:21:50.530
but I just don't like
certain parts about it.

00:21:50.580 --> 00:21:51.760
Well, normally, you're out of luck.

00:21:51.760 --> 00:21:53.740
If you're the developer,
you can code a new plug-in.

00:21:53.740 --> 00:21:57.300
If you're a user, you're forced to just
wait for the next update.

00:21:58.020 --> 00:22:00.790
In the case of FxFactory,
you can just come in here and say,

00:22:00.790 --> 00:22:02.560
please duplicate this plug-in.

00:22:02.560 --> 00:22:04.840
It creates a comic book 2 plug-in.

00:22:04.840 --> 00:22:10.140
And just by clicking Edit, I can say,
well, the comic book plug-in happens

00:22:10.220 --> 00:22:11.750
to do some half-toning.

00:22:11.750 --> 00:22:14.440
It uses a dot screen core image unit.

00:22:14.480 --> 00:22:17.300
So I can come in here and say,
show me the half-toning

00:22:17.300 --> 00:22:18.760
effects that you have.

00:22:18.770 --> 00:22:22.820
And I can drag a circular screen,
for instance.

00:22:24.580 --> 00:22:29.700
I'm going to pipe the output and
the inputs in the right place,

00:22:29.700 --> 00:22:31.900
and I can just remove that dot screen.

00:22:31.900 --> 00:22:35.100
And just to make it
customizable by the user,

00:22:35.100 --> 00:22:36.780
I'm going to publish certain inputs.

00:22:36.880 --> 00:22:39.890
This is a terminology that,
unless you're familiar

00:22:39.890 --> 00:22:42.810
with Course Composer,
may be a bit new to you.

00:22:43.440 --> 00:22:47.850
When you publish one of the inputs,
what it means is that input

00:22:47.850 --> 00:22:51.360
will be available to the user,
to the host application.

00:22:51.360 --> 00:22:53.700
So I publish just the center,
and we're going to publish

00:22:53.750 --> 00:22:57.840
the width and the sharpness.

00:22:58.750 --> 00:22:59.560
And it's as simple as this.

00:22:59.630 --> 00:23:03.050
I'm going to click Save, Quit,
apply my changes.

00:23:03.290 --> 00:23:06.460
And what you see here now is that
the UI has sort of changed because

00:23:06.470 --> 00:23:12.450
I've obviously messed around
with the plug-in parameters.

00:23:12.450 --> 00:23:12.450
So I'm going to--

00:23:12.610 --> 00:23:13.600
I've created a few.

00:23:13.600 --> 00:23:19.700
I've added, obviously,
a new center parameter.

00:23:19.700 --> 00:23:21.290
I'm going to make them
into a point parameter.

00:23:21.290 --> 00:23:23.400
And via this UI,
you can set where the default

00:23:23.400 --> 00:23:24.780
location of that parameter will be.

00:23:24.800 --> 00:23:28.340
And you can see that the FxFactory
actually created automatically

00:23:28.340 --> 00:23:30.260
the other two parameters for me.

00:23:30.260 --> 00:23:34.690
So just by clicking Save and
restarting Final Cut Pro,

00:23:34.740 --> 00:23:39.670
we're going to test our new plug-in.

00:23:45.100 --> 00:23:50.310
This shows the tremendous opportunity,
really, of Quartz Composer as an OS-level

00:23:50.310 --> 00:23:54.100
technology that's available at the
OS level that incorporates Core Image,

00:23:54.100 --> 00:23:55.440
JavaScript.

00:23:55.440 --> 00:23:58.380
There's all sort of new features
coming in for Leopard that

00:23:58.380 --> 00:23:59.700
you might want to look at.

00:24:01.310 --> 00:24:02.860
So this is the sequence again.

00:24:02.860 --> 00:24:07.020
And if you look at the effect palette,
you go under a category.

00:24:07.400 --> 00:24:11.920
You'll see that there is
now a Comic Book 2 plug-in.

00:24:11.920 --> 00:24:15.170
So let me just drag it over our clip.

00:24:15.740 --> 00:24:21.190
And although it might be a
little hard for you to see it,

00:24:21.490 --> 00:24:23.790
it's actually using a half-toning

00:24:24.510 --> 00:24:29.560
circular half toning instead of
the previous core image effect.

00:24:29.560 --> 00:24:33.370
How hard is it to create
plugins with this procedure?

00:24:33.370 --> 00:24:36.430
I've shown you how you can
take an existing one just

00:24:36.430 --> 00:24:38.320
by clicking the edit button.

00:24:38.320 --> 00:24:42.510
Well, as effect developers,
what you will find yourself doing is take

00:24:42.580 --> 00:24:44.880
existing compositions and create plugins.

00:24:44.880 --> 00:24:48.060
We obviously don't have the time
to create a new one from scratch,

00:24:48.060 --> 00:24:50.320
but I've taken a few of the
compositions that you might

00:24:50.320 --> 00:24:54.220
have seen around using WWDC.

00:24:54.220 --> 00:24:57.800
This is the Jumping
Peter Graffagnino composition.

00:24:57.800 --> 00:25:00.660
And because this is going to be the
most useful plugin you've ever seen,

00:25:00.670 --> 00:25:03.960
I'm just going to make a new
Final Cut Pro plugin out of it.

00:25:03.960 --> 00:25:06.030
And obviously going to be a generator.

00:25:06.030 --> 00:25:10.600
I'm going to delete
that background color.

00:25:10.600 --> 00:25:13.140
I'm just going to save it.

00:25:13.140 --> 00:25:20.590
And perhaps just publish one
parameter just to show you the...

00:25:21.410 --> 00:25:25.490
The automatic plug-in creation.

00:25:25.530 --> 00:25:27.060
Color.

00:25:27.120 --> 00:25:31.790
And the way it works is you just
click the new plug-in button.

00:25:32.890 --> 00:25:36.670
Click and choose your composition.

00:25:36.770 --> 00:25:41.330
It guesses automatically whether it
should be a generator or other things

00:25:41.400 --> 00:25:43.460
based on the composition parameters.

00:25:43.460 --> 00:25:47.820
And this is the default value for the
only parameter that this plug-in has.

00:25:47.840 --> 00:25:49.440
I also downloaded
something off the internet.

00:25:51.050 --> 00:25:55.300
This is a FxPlug called
a Fireworks plug-in.

00:25:55.370 --> 00:25:57.300
It's a generator.

00:25:57.300 --> 00:26:02.580
And obviously in this case,
if we're planning to use it

00:26:02.580 --> 00:26:08.200
inside Motion or Final Cut Pro,
we might want to customize

00:26:08.200 --> 00:26:11.120
the background color,
both here and from Motion so that you

00:26:11.120 --> 00:26:11.120
can overlay it over an existing track.

00:26:11.120 --> 00:26:11.120
And this is actually-- ah.

00:26:12.320 --> 00:26:12.660
There you go.

00:26:12.660 --> 00:26:15.030
We'll do it from FXFactory.

00:26:15.080 --> 00:26:19.810
So I'm going to create a
new plug-in with Fireworks.

00:26:22.110 --> 00:26:30.990
Fireworks 2.

00:26:30.990 --> 00:26:30.990
I'm just going to hit save and
again restart Final Cut Pro.

00:26:33.720 --> 00:26:37.500
And you will see that we've
just created another plug-in.

00:26:37.500 --> 00:26:40.610
This is a very powerful concept
because you may be used to development

00:26:40.610 --> 00:26:43.980
schedules that mean the coding,
the learning the SDK,

00:26:43.980 --> 00:26:46.160
and all the testing process.

00:26:46.160 --> 00:26:49.380
And you should start,
if you're interested in the product,

00:26:49.380 --> 00:26:53.800
you should start thinking of your plug-in
in terms of intellectual property.

00:26:53.800 --> 00:26:57.360
That the intellectual property
of your effects aren't really in

00:26:57.360 --> 00:27:02.800
the parameter UI or in loading
and unloading your plug-ins and

00:27:02.800 --> 00:27:06.400
learning the SDK specific details.

00:27:06.400 --> 00:27:10.200
So I'm going to show you in here,
oh it's a generator,

00:27:10.200 --> 00:27:13.400
so we'll look under the
generators category.

00:27:13.400 --> 00:27:19.350
And there it is,
the Jumping Peter generator.

00:27:23.860 --> 00:27:24.030
There it is.

00:27:24.110 --> 00:27:28.980
This is obviously a very useful plug-in,
so we're planning to sell it.

00:27:29.370 --> 00:27:32.480
And to go back to my discussion
about intellectual property,

00:27:32.480 --> 00:27:36.570
what FXFactory allows you to do
is to concentrate on the aspects

00:27:36.590 --> 00:27:39.240
of your plug-ins that are really
specific to what you're delivering.

00:27:39.240 --> 00:27:42.250
You can create a course composition,
you can write new core image

00:27:42.250 --> 00:27:44.750
units that will allow you to
deliver to the user only the

00:27:44.830 --> 00:27:46.760
component that's really important.

00:27:46.760 --> 00:27:49.710
And with FXFactory,
just create a plug-in really,

00:27:49.710 --> 00:27:50.650
really fast.

00:27:50.720 --> 00:27:52.860
What's even better with Leopard,
of course,

00:27:52.860 --> 00:27:54.640
Composer is introducing plug-ins.

00:27:55.740 --> 00:27:57.710
So within the course
composer composition,

00:27:57.710 --> 00:28:00.790
you can have some more custom code,
not just core image units,

00:28:00.910 --> 00:28:04.550
and have your development
schedule virtually halved or

00:28:04.580 --> 00:28:06.830
turn it from months into days.

00:28:06.940 --> 00:28:07.130
All right.

00:28:07.160 --> 00:28:09.320
Thank you for your attention.

00:28:09.320 --> 00:28:09.850
Back to Dave.

00:28:09.860 --> 00:28:15.280
Back to slides, please.

00:28:20.000 --> 00:28:22.120
Okay, so what's new in FxPlug 1.1?

00:28:22.130 --> 00:28:23.700
There's a few things.

00:28:23.700 --> 00:28:27.800
There are some new protocols that
we've introduced that are all,

00:28:27.880 --> 00:28:31.420
they have the suffix
underscore V2 on them,

00:28:31.420 --> 00:28:33.100
and we'll talk about them a little later.

00:28:33.100 --> 00:28:36.100
There's a new parent
protocol called FxBaseEffect.

00:28:36.100 --> 00:28:39.330
Now that we're adding transition,
I've decided to take all of the

00:28:39.360 --> 00:28:43.930
common methods that both the filters
and generators were defining and

00:28:43.950 --> 00:28:45.700
put them in a parent protocol.

00:28:47.160 --> 00:28:50.820
This actually simplifies things
a little bit for your development

00:28:50.820 --> 00:28:52.730
and for understanding the SDK.

00:28:52.970 --> 00:28:58.830
And a plug-in now can return a
properties dictionary that describe

00:28:58.890 --> 00:29:04.220
its requirements and capabilities.

00:29:04.690 --> 00:29:08.220
For transitions,
we've added the SMPTE wipe code

00:29:08.220 --> 00:29:11.240
equivalents so that when we're
writing an EDL or edit decision list,

00:29:11.240 --> 00:29:16.460
we can write down the number
for the wipe code that you've

00:29:16.510 --> 00:29:17.550
specified for your transition.

00:29:17.580 --> 00:29:20.060
And we've added an
FX transition protocol.

00:29:20.060 --> 00:29:22.890
As I said,
we have universal binary support,

00:29:22.890 --> 00:29:27.960
which actually came out in FxPlug 1.0.3,
but that was since last WWDC,

00:29:27.970 --> 00:29:29.980
so I thought I'd bring it up.

00:29:30.560 --> 00:29:32.560
We've added string parameters,
which we're mysteriously

00:29:32.560 --> 00:29:35.740
missing from 1.0,
and added some new bitmap features

00:29:35.740 --> 00:29:40.310
that I alluded to before in
the YUV and floating point YUV,

00:29:40.370 --> 00:29:41.950
and also robots.

00:29:45.830 --> 00:29:52.740
Now,
when you write a plug-in with a 1.1 SDK,

00:29:52.740 --> 00:29:59.640
it should work in both older hosts,
meaning Motion 2, or a newer host,

00:29:59.670 --> 00:30:02.380
unless you're using some
of the new features.

00:30:02.380 --> 00:30:04.880
And then they'll only work in a
host that actually supports them.

00:30:04.880 --> 00:30:08.710
And you'll be able to query
dynamically whether features are

00:30:08.710 --> 00:30:11.980
available and fall back to a different
behavior if they're not available,

00:30:11.980 --> 00:30:17.680
or you can opt for your plug-in not to
be registered at all if you use dynamic

00:30:17.680 --> 00:30:19.600
registration if a feature's missing.

00:30:19.600 --> 00:30:26.030
You may require a certain host API,
and it might not be there.

00:30:26.110 --> 00:30:30.070
But existing plug-ins that you
wrote with FxPlug 1.0 will continue

00:30:30.180 --> 00:30:31.970
to work in new hosts as well.

00:30:32.380 --> 00:30:34.840
But you should still test them.

00:30:34.940 --> 00:30:40.060
So for the _v2 protocols,
these are child protocols.

00:30:40.080 --> 00:30:44.740
And they inherit all of the methods
defined by the parent protocol.

00:30:44.740 --> 00:30:48.440
So when we had before an
FX parameter retrieval API,

00:30:48.520 --> 00:30:52.140
we've added an FX parameter
retrieval API v2 that inherits all

00:30:52.150 --> 00:30:55.630
the old methods and adds one more,
which is get string parameter value.

00:30:55.680 --> 00:30:59.780
So the trick here is that if you
don't need to use string parameters,

00:30:59.780 --> 00:31:04.370
use the 1.0 protocol so that
you'll still run in an old host.

00:31:04.430 --> 00:31:07.990
If you do need string parameters,
use the new one.

00:31:08.070 --> 00:31:11.760
And you request a host API.

00:31:11.760 --> 00:31:14.140
So if it's not there,
you can choose not to

00:31:14.200 --> 00:31:15.140
use a string parameter.

00:31:15.140 --> 00:31:17.360
Maybe you can use a number,
depending on what you're doing.

00:31:17.360 --> 00:31:22.020
Or maybe you can use a custom parameter.

00:31:23.210 --> 00:31:26.940
And one thing to
remember is when you use,

00:31:26.940 --> 00:31:31.490
when you require an _v2 parameter,
remember to list it in your Info.plist.

00:31:31.550 --> 00:31:34.600
There's a list of all the
host APIs that you need.

00:31:34.600 --> 00:31:36.500
It's the protocol names.

00:31:36.590 --> 00:31:41.500
Remember to add this so that
we'll know not to load you

00:31:41.500 --> 00:31:43.660
if this protocol is missing.

00:31:43.660 --> 00:31:46.050
That's if you require the v2 protocol.

00:31:46.190 --> 00:31:48.420
Put it in your plist.

00:31:48.590 --> 00:31:50.590
And as I said,
use the base protocols if you

00:31:50.600 --> 00:31:52.210
don't need the new features.

00:31:52.730 --> 00:31:55.760
Now,
the FXBaseEffectParent protocol defines

00:31:55.760 --> 00:32:00.840
these common methods that had been
in filters and generators before.

00:32:00.840 --> 00:32:03.340
There's one that says whether
your plug-in varies over time.

00:32:03.340 --> 00:32:05.840
There's one that you use
to add your own parameters.

00:32:05.930 --> 00:32:11.610
One where you get notified
when a parameter value changes,

00:32:11.760 --> 00:32:12.840
if you care.

00:32:12.840 --> 00:32:16.470
And one where you're asked
to return your properties.

00:32:16.730 --> 00:32:19.760
And the generator, filter,
and transition protocols all

00:32:19.760 --> 00:32:22.130
derive from that base effect.

00:32:23.280 --> 00:32:26.130
And here's the properties
dictionary that I mentioned.

00:32:26.190 --> 00:32:28.420
There are a few keys
that we have in there.

00:32:28.420 --> 00:32:29.360
All the keys are optional.

00:32:29.360 --> 00:32:32.120
And if they're missing,
they imply a default value

00:32:32.120 --> 00:32:34.220
that's documented in the headers.

00:32:34.220 --> 00:32:38.540
So, for example,
there's one that says may remap time.

00:32:38.540 --> 00:32:42.720
And if that key is missing,
we'll assume that you may remap time,

00:32:42.720 --> 00:32:44.440
which means that we have to be ready.

00:32:44.440 --> 00:32:47.280
We can't assume that the frames
you're going to operate on are

00:32:47.280 --> 00:32:51.170
the ones at the time when you're
going to render your output.

00:32:53.200 --> 00:32:55.190
So,
I'm going to start with the first one.

00:32:55.340 --> 00:32:58.020
In some cases,
you won't need to look at these at all,

00:32:58.020 --> 00:33:01.520
but in others, things like Preserves,
Alpha, Mayweather Map Time,

00:33:01.520 --> 00:33:03.320
and Pixel Independent,
you can get better performance

00:33:03.320 --> 00:33:08.220
by setting these flags.

00:33:10.610 --> 00:33:13.150
As I said before,
the SMPTE wipe codes are only

00:33:13.150 --> 00:33:16.600
relevant for transitions,
and they're in the properties dictionary.

00:33:16.600 --> 00:33:20.730
So I wanted to put up an example of a
properties method that just shows you

00:33:20.730 --> 00:33:25.890
just build a dictionary with objects
for all these keys and return it.

00:33:26.050 --> 00:33:31.390
A 1.0 FxPlug won't implement this method,
but that's fine.

00:33:31.400 --> 00:33:36.270
If you try to build your plug-in that
you wrote with the FxPlug 1.0 spec,

00:33:36.320 --> 00:33:39.880
you'll see an error about this
method not being implemented,

00:33:39.880 --> 00:33:42.830
but it'll actually still work.

00:33:43.080 --> 00:33:47.280
But do implement your
properties dictionary.

00:33:47.420 --> 00:33:49.850
The transition protocol is
similar to the FX filter,

00:33:49.850 --> 00:33:52.490
but obviously has two
inputs instead of one input,

00:33:52.490 --> 00:33:54.540
an A and B input,
and also a time fraction

00:33:54.570 --> 00:33:55.960
that goes between 0 and 1.

00:33:55.960 --> 00:34:04.840
So at 0, input A is used, and at 1.0,
input B is used by convention.

00:34:04.840 --> 00:34:08.390
And the new plug-ins will
be universal binaries.

00:34:08.450 --> 00:34:12.250
So I set up the projects,
the Xcode templates,

00:34:12.270 --> 00:34:17.980
so that if you build the debug version,
that is the development target,

00:34:17.980 --> 00:34:20.120
you'll get native builds.

00:34:20.120 --> 00:34:21.950
So whichever machine you're on,
it'll build that.

00:34:21.950 --> 00:34:24.910
And the deployment builds
a universal binary.

00:34:26.850 --> 00:34:29.290
And string parameters,
there are three new methods

00:34:29.370 --> 00:34:30.360
for string parameters.

00:34:30.360 --> 00:34:32.880
And if you happen to be working
around the lack of a string parameter

00:34:32.880 --> 00:34:35.840
by using a custom parameter in 1.0,
you'll probably be thrilled

00:34:35.840 --> 00:34:36.860
that we've added these.

00:34:36.860 --> 00:34:38.410
But I'm just going to go right past them.

00:34:38.420 --> 00:34:46.880
The new bitmap features,
the primary one is the two R408 and R4FL.

00:34:46.880 --> 00:34:48.990
If you're familiar with these, great.

00:34:48.990 --> 00:34:52.490
If you're not, they're documented in one
of the IceFlow articles.

00:34:52.490 --> 00:34:54.740
I'll have a link to
that later on in this.

00:34:56.470 --> 00:35:00.160
The letters to the IceFlow number 19,
where they talk about the

00:35:00.160 --> 00:35:02.040
YCBCR stuff that was added
to QuickTime a long time ago.

00:35:02.040 --> 00:35:04.470
Also, we added row-byte support.

00:35:04.520 --> 00:35:07.070
Previously,
row-bytes was always the width times

00:35:07.220 --> 00:35:09.030
the size of the pixels in bytes.

00:35:09.090 --> 00:35:12.170
But now that can vary,
which is great for performance.

00:35:13.720 --> 00:35:17.260
You'll never get bitmaps with any
of these new interesting features

00:35:17.260 --> 00:35:21.690
unless you set the appropriate
values in your properties dictionary

00:35:21.690 --> 00:35:23.290
saying that you need them.

00:35:23.320 --> 00:35:26.100
That's for backward
compatibility with old plug-ins.

00:35:28.090 --> 00:35:33.240
Now, back to the sort of the
foundations of what an FxPlug is.

00:35:33.240 --> 00:35:35.320
An FxPlug is a ProPlug.

00:35:35.320 --> 00:35:40.620
And a ProPlug is our
own flavor of NSBundle.

00:35:40.620 --> 00:35:48.880
And a ProPlug is defined by its
conformance to a plug-in protocol.

00:35:48.880 --> 00:35:53.880
And the other protocols involved in
a ProPlug are host API protocols.

00:35:53.880 --> 00:35:56.860
So these are the equivalents to
a callback suite or a callback

00:35:56.860 --> 00:36:00.690
in another architecture.

00:36:00.920 --> 00:36:06.260
What you do if you want to call back to a
method is you request a host API object.

00:36:06.350 --> 00:36:10.820
This is what you call an object that
conforms to a host API protocol.

00:36:10.820 --> 00:36:15.000
And if you get that,
then you can call the methods in it.

00:36:15.000 --> 00:36:18.650
If it's not available because, say,
you're running on an older host,

00:36:18.650 --> 00:36:21.180
then you have to fall
back to other behavior.

00:36:21.720 --> 00:36:28.400
Now, the ProPlug host API access and so
on and registration is all handled

00:36:28.400 --> 00:36:29.990
by the PluginManager framework.

00:36:29.990 --> 00:36:33.920
And there are only a couple of
methods you need to worry about,

00:36:33.980 --> 00:36:36.740
and one of those you'll never use unless
you're doing dynamic registration.

00:36:36.740 --> 00:36:43.970
So basically,
just look at the FxPlug SDK overview,

00:36:43.970 --> 00:36:43.970
and it'll tell you what you
need to know about this.

00:36:44.490 --> 00:36:46.460
Most of you,
probably almost all of you are by now

00:36:46.460 --> 00:36:49.700
familiar with Objective-C protocols,
but just in case you aren't,

00:36:49.800 --> 00:36:53.780
maybe you've been doing plug-ins for a
while and haven't had to get into that,

00:36:53.780 --> 00:36:58.400
but they're similar to C++ mix-in
inheritance or to Java interfaces.

00:36:58.400 --> 00:37:00.520
And a really simple one is shown here.

00:37:00.520 --> 00:37:03.190
It's a protocol that's
actually from our SDK,

00:37:03.280 --> 00:37:05.220
and it just defines one method.

00:37:05.220 --> 00:37:10.220
And what that means is that if you define
a class that conforms to this protocol,

00:37:10.300 --> 00:37:12.700
you have to implement this method.

00:37:12.700 --> 00:37:13.660
That's all there is to it.

00:37:15.810 --> 00:37:19.000
I alluded to inheritance of protocols.

00:37:19.000 --> 00:37:22.500
Like classes,
a protocol can inherit methods

00:37:22.500 --> 00:37:23.600
from a parent protocol.

00:37:23.600 --> 00:37:27.720
Here's an example of a parent
protocol defining method 1 and a

00:37:27.720 --> 00:37:32.180
child protocol that inherits method
1 but also defines a method 2.

00:37:34.660 --> 00:37:37.890
We'll talk a little bit about
the APIs in the FxPlug SDK,

00:37:37.890 --> 00:37:40.970
not in extreme depth,
but enough to give you a feel for

00:37:41.060 --> 00:37:43.400
it and sort of overall overview.

00:37:43.400 --> 00:37:48.020
You define your parameters by
implementing an add parameters method.

00:37:48.020 --> 00:37:52.010
And here's an example of one
that just adds a floating point

00:37:52.010 --> 00:37:56.020
slider and a point parameter,
a 2D point parameter.

00:37:56.020 --> 00:37:59.600
You can see that what we
do is we get the FxPlug,

00:37:59.600 --> 00:38:06.480
I'm sorry, FxParameterCreation API,
and we get the object Parm ID from that.

00:38:06.480 --> 00:38:11.590
And if it's there,
then we add parameters.

00:38:12.860 --> 00:38:16.600
And here are the types, really quickly,
the types of parameters that we support.

00:38:16.600 --> 00:38:18.940
Our floating point slider.

00:38:19.280 --> 00:38:21.670
and an integer slider,
same thing but quantized

00:38:21.700 --> 00:38:25.640
to integral values,
and a toggle button or checkbox,

00:38:25.640 --> 00:38:27.640
an angle slider.

00:38:27.890 --> 00:38:32.910
Two flavors of colors,
RGB colors and ARGB colors.

00:38:33.640 --> 00:38:36.980
and 2D Point, which is an interesting one
because it implies a sort

00:38:37.080 --> 00:38:39.040
of custom on-screen control.

00:38:39.040 --> 00:38:42.090
Whenever you have a 2D Point,
you'll have a little crosshair at

00:38:42.110 --> 00:38:43.490
the default value for the point.

00:38:43.500 --> 00:38:46.000
But you can also control
them with other controls,

00:38:46.000 --> 00:38:48.630
depending on the application you're in.

00:38:48.930 --> 00:38:53.590
and pop-up menus that let you
define an array of Unicode

00:38:53.590 --> 00:38:56.270
strings for the menu items.

00:38:56.540 --> 00:39:01.210
and an image well,
which is the way that your plug-in can

00:39:01.210 --> 00:39:03.500
refer to other tracks or imported media.

00:39:03.500 --> 00:39:07.250
The user can just drag a piece of media
onto that or can drag another clip

00:39:07.410 --> 00:39:09.800
from another track onto an image well.

00:39:09.800 --> 00:39:12.420
Or it can also be a still image.

00:39:12.420 --> 00:39:15.890
And if none of those work for you,
you can always define a custom

00:39:15.890 --> 00:39:17.880
parameter and draw any crazy
stuff you want in there.

00:39:17.880 --> 00:39:23.380
And some people will use those just for
drawing their logo and if somebody clicks

00:39:23.380 --> 00:39:29.250
on that it'll bring up a dialogue panel,
but others will do much more

00:39:29.300 --> 00:39:31.840
creative things with it and
do color mixers or whatever.

00:39:31.840 --> 00:39:37.230
The group parameter won't be in
the next version of Final Cut,

00:39:37.280 --> 00:39:40.240
but it's in motion.

00:39:40.250 --> 00:39:44.030
And we have a couple of
optional types that happen to be

00:39:44.030 --> 00:39:46.570
supported in motion in Final Cut,
but who knows,

00:39:46.580 --> 00:39:48.950
some host might not support them.

00:39:48.970 --> 00:39:53.210
The two of them are histogram.

00:39:54.810 --> 00:39:57.640
and Gradient.

00:39:57.640 --> 00:39:58.450
And Gradient's pretty useful.

00:39:58.450 --> 00:40:04.700
The histogram is fairly specific
for the motion histogram FxPlug,

00:40:04.700 --> 00:40:06.200
but I think the Gradient is useful.

00:40:06.200 --> 00:40:07.700
It's a 1D Gradient.

00:40:07.700 --> 00:40:10.310
When you get the values
for the parameters,

00:40:10.320 --> 00:40:14.210
you use the FX parameter retrieval API,
and there's a method for

00:40:14.210 --> 00:40:16.400
each type of parameter,
and you just call those

00:40:16.400 --> 00:40:17.700
to get the values.

00:40:17.700 --> 00:40:20.720
And similarly for setting,
there's something called the

00:40:20.720 --> 00:40:24.390
FX parameter setting API,
and you call the appropriate methods.

00:40:24.900 --> 00:40:29.520
I'll talk a little bit
about custom parameter UI.

00:40:29.610 --> 00:40:31.560
Any parameter can have a custom UI.

00:40:31.560 --> 00:40:33.250
It doesn't have to be a
custom parameter type.

00:40:33.320 --> 00:40:34.600
It could be a checkbox.

00:40:34.600 --> 00:40:37.690
And instead of a checkbox,
you might have wanted to define

00:40:37.690 --> 00:40:39.700
your own more beautiful control.

00:40:41.330 --> 00:40:46.240
A custom parameter can be
any subclass of NSView.

00:40:46.240 --> 00:40:50.560
You can use Interface Builder to
create that so that it'll scale with

00:40:50.610 --> 00:40:54.970
proportional sizing and all that,
and to sort of ease development.

00:40:54.970 --> 00:40:57.300
Or you can make it
programmatically from scratch.

00:40:59.900 --> 00:41:07.000
In your custom parameter
UI's NSView subclass,

00:41:07.000 --> 00:41:10.080
you'll get events just
like any other NSView.

00:41:10.080 --> 00:41:13.790
And if you want to add
a pop-up menu in there,

00:41:13.790 --> 00:41:18.620
a contextual menu, you either call set
menu or menu for event,

00:41:18.620 --> 00:41:20.980
just like you would
with any other NSView.

00:41:20.980 --> 00:41:23.190
And you'll find this very familiar if
you've been doing Cocoa programming.

00:41:23.200 --> 00:41:26.380
And of course, you can get key, mouse,
scroll wheel events,

00:41:26.380 --> 00:41:32.820
pen pressure and angle and eraser
information and all that stuff.

00:41:32.820 --> 00:41:36.840
And if you get an event,
you'll probably want to change a value

00:41:36.840 --> 00:41:41.430
on some parameter or change state
or change whether or not a parameter

00:41:41.430 --> 00:41:44.000
is hidden or something interesting.

00:41:44.000 --> 00:41:47.200
And to do that,
you need to use this action API,

00:41:47.260 --> 00:41:49.780
the custom parameter action API.

00:41:49.940 --> 00:41:52.000
Which is pretty simple.

00:41:52.000 --> 00:41:54.900
It's just you call a,
I think I've got my slides out of order,

00:41:54.900 --> 00:41:58.380
but the start action method
you call before accessing any

00:41:58.380 --> 00:42:01.900
parameters and an action afterward.

00:42:01.900 --> 00:42:05.790
And that just makes sure that the host
application has everything in the state

00:42:05.870 --> 00:42:08.020
it needs to get to your parameter values.

00:42:09.040 --> 00:42:15.630
Now, the way that you assign a
custom parameter UI is to,

00:42:15.710 --> 00:42:19.040
when you create the parameter and you
have a set of flags that you can turn on,

00:42:19.040 --> 00:42:22.060
they're just bit fields,
you set the custom UI flag.

00:42:22.060 --> 00:42:24.890
And then if you've
implemented the protocol,

00:42:24.890 --> 00:42:28.760
which you should,
the custom parameter view host protocol,

00:42:28.760 --> 00:42:32.890
that simply asks you to
return the subclass of NSView,

00:42:32.890 --> 00:42:34.880
an object of that class.

00:42:36.220 --> 00:42:38.590
And whoops.

00:42:38.640 --> 00:42:44.490
One other method that's in the
Action API is the current time method.

00:42:44.540 --> 00:42:49.580
And you'll use this not just
for doing custom parameter UI,

00:42:49.580 --> 00:42:52.230
but also for on-screen controls.

00:42:52.290 --> 00:42:54.990
And there may be other instances
where you need to get the current

00:42:54.990 --> 00:42:55.950
time and you aren't handed it.

00:42:55.960 --> 00:42:57.980
In most cases,
like when it's time to render,

00:42:57.980 --> 00:42:59.090
you'll be given the current time.

00:42:59.110 --> 00:43:00.600
So you won't have an issue with that.

00:43:00.600 --> 00:43:03.410
But if you're doing
something non-standard,

00:43:03.490 --> 00:43:05.930
communicating with another application,
I don't know, opening up a separate

00:43:05.930 --> 00:43:08.390
window or something,
you'll need that.

00:43:09.060 --> 00:43:14.880
And you do need to call the start action
and end action before getting that.

00:43:15.300 --> 00:43:19.340
Another thing to remember is that if you
implement the custom view host protocol,

00:43:19.340 --> 00:43:22.960
don't forget to add it to your list
of protocols that you implement.

00:43:23.000 --> 00:43:25.840
So in this case,
we have a generator that conforms to

00:43:25.840 --> 00:43:29.180
FX generator and to the view host.

00:43:30.540 --> 00:43:34.350
Now, custom parameter types, which are,
of course, distinct,

00:43:34.350 --> 00:43:39.180
because you can have a custom
parameter type with no UI,

00:43:39.180 --> 00:43:42.640
which might be a hidden one
that doesn't appear at all,

00:43:42.640 --> 00:43:47.450
or you can have a custom
UI with standard parameter type.

00:43:48.300 --> 00:43:54.150
So when you make a custom parameter type,
you define a class and create a default

00:43:54.160 --> 00:43:56.920
value that's a member of this class.

00:43:56.980 --> 00:43:59.720
I'm using the MyData class for this.

00:43:59.720 --> 00:44:02.640
And make that your default value.

00:44:02.640 --> 00:44:05.880
And from that,
the host app will know what

00:44:05.880 --> 00:44:08.500
the class of your objects are.

00:44:08.500 --> 00:44:10.200
Some restrictions about it.

00:44:10.200 --> 00:44:12.810
We don't, at this point,
support animation of

00:44:12.810 --> 00:44:14.380
custom parameter types.

00:44:14.380 --> 00:44:20.540
They have a value that... stays
from one keyframe linearly.

00:44:20.540 --> 00:44:23.880
It's just not linearly interpolated,
but it's flat until the next,

00:44:23.910 --> 00:44:26.120
like a stair-step function,
until the next keyframe.

00:44:26.120 --> 00:44:29.780
So you should set the
flag not animatable.

00:44:29.780 --> 00:44:32.980
Although, even if you don't set that,
we'll know not to animate it.

00:44:33.040 --> 00:44:34.240
But who knows what will
happen in the future.

00:44:34.240 --> 00:44:35.320
So you should set that.

00:44:35.320 --> 00:44:38.870
And then the second thing is
that the object needs to conform

00:44:38.870 --> 00:44:41.280
to the NSCoding protocol,
which means you have to

00:44:41.280 --> 00:44:42.120
implement two methods.

00:44:42.120 --> 00:44:47.600
You need to implement
encodeWithCoder and initWithCoder,

00:44:47.600 --> 00:44:52.090
which is your way of... serializing
and unflattening custom data types,

00:44:52.120 --> 00:44:53.630
custom objects.

00:44:53.700 --> 00:44:55.850
The other thing is that you
have to do keyed coding in

00:44:55.850 --> 00:44:57.310
your NSCoding implementation.

00:44:57.310 --> 00:45:00.360
It's possible to do NSCoding another way,
but you need to do it this way,

00:45:00.360 --> 00:45:02.770
which means you have to
use encodeObjectForKey

00:45:02.770 --> 00:45:06.110
and decodeObjectForKey,
which is just an implementation

00:45:06.110 --> 00:45:08.040
detail of how we support this.

00:45:08.080 --> 00:45:09.880
Here's an example of that.

00:45:09.940 --> 00:45:15.130
Again,
this is in the FXplug SDK overview.

00:45:15.600 --> 00:45:17.860
Now, rendering.

00:45:17.980 --> 00:45:22.680
There are two types of image,
and they both inherit from

00:45:22.680 --> 00:45:24.420
the FxImage base class.

00:45:24.490 --> 00:45:27.000
You won't create an FxImage directly.

00:45:27.000 --> 00:45:29.740
You'll either create an
FxBitmap or an FxTexture.

00:45:29.740 --> 00:45:32.890
And a bitmap, of course,
is a RAM-based thing where you

00:45:32.890 --> 00:45:37.190
can poke the pixels in software,
and FxTexture is an OpenGL pbuffer.

00:45:41.380 --> 00:45:50.160
The FX bitmap in 1.0, FxPlug 1.0,
had 8-bit ARGB, 16-bit, and 32-bit.

00:45:50.240 --> 00:45:51.460
The 32-bit is the float.

00:45:51.460 --> 00:45:58.090
And we've added now the 8-bit
integer R408 and 8-bit float R4FL.

00:45:58.090 --> 00:46:01.870
And here's the link to that,
but if you just search for IceFlow 19,

00:46:01.870 --> 00:46:03.160
you'll find it too.

00:46:05.180 --> 00:46:10.490
And all of our bitmaps
use pre-multiplied alpha.

00:46:10.830 --> 00:46:15.040
And now if you've set the flag in your
property saying that you support it,

00:46:15.040 --> 00:46:17.700
they may have interesting row bytes too.

00:46:19.590 --> 00:46:23.340
FX textures are, again,
they're P buffers,

00:46:23.340 --> 00:46:28.200
and you'll always need to ask for
the coordinates for the texture.

00:46:28.200 --> 00:46:32.340
And they're really just thin
wrappers for the textures in OpenGL,

00:46:32.340 --> 00:46:34.430
so you can do things that you
could do with other textures.

00:46:34.440 --> 00:46:36.860
You can do bind and enable.

00:46:36.860 --> 00:46:40.240
You can get the ID of it and
do OpenGL operations on it.

00:46:40.300 --> 00:46:43.560
And those, again, like the bitmaps,
are pre-multiplied alpha.

00:46:45.870 --> 00:46:49.880
Now, I won't go deeply into retiming,
but basically,

00:46:49.880 --> 00:46:54.030
when you're told to render in a
filter-- we only have this in filters,

00:46:54.030 --> 00:46:55.760
not in generators or transitions.

00:46:55.890 --> 00:46:57.940
They wouldn't make any
sense in a generator,

00:46:57.940 --> 00:47:00.360
and in transitions, well,
it's just not there.

00:47:00.480 --> 00:47:06.850
And what it lets you do is request
an input image at some time other

00:47:06.850 --> 00:47:10.230
than the rendered output time.

00:47:10.320 --> 00:47:12.440
You don't need to do anything
special to do that for other

00:47:12.520 --> 00:47:14.050
parameter types besides images.

00:47:14.060 --> 00:47:18.630
They're special because
they have to be loaded and,

00:47:18.840 --> 00:47:25.890
and So we ask for those specifically
and use a host protocol to get them.

00:47:25.900 --> 00:47:27.450
The other ones,
when you get a parameter value,

00:47:27.450 --> 00:47:31.740
you say get value for parameter at time.

00:47:31.740 --> 00:47:33.890
So that's explicit.

00:47:34.060 --> 00:47:36.850
Now, we have four methods for
getting a filtered or

00:47:36.850 --> 00:47:40.780
unfiltered image at some time.

00:47:41.500 --> 00:47:45.730
A filtered or unfiltered image,
meaning that if you're the fourth

00:47:45.780 --> 00:47:50.370
filter applied to some input,
you can get it without those other

00:47:50.380 --> 00:47:52.130
three or with those other three applied.

00:47:52.140 --> 00:47:54.930
If you want the raw pixels,
you can get them too.

00:47:55.180 --> 00:48:01.370
And you can get your input image
as a bitmap or as a texture.

00:48:03.750 --> 00:48:07.540
Now, on-screen controls, as I mentioned,
the point parameter is sort of a

00:48:07.540 --> 00:48:09.760
trivial example of an on-screen control.

00:48:09.760 --> 00:48:11.780
But you can draw anything
in your on-screen control.

00:48:11.780 --> 00:48:14.970
You can completely obscure the
canvas and draw your own canvas

00:48:14.970 --> 00:48:16.500
that does something interesting.

00:48:16.500 --> 00:48:19.630
You can do a split screen where
we use our image for half and a

00:48:19.630 --> 00:48:21.700
modified image for the other half.

00:48:21.770 --> 00:48:22.870
You can do all kinds of
crazy stuff in there.

00:48:22.880 --> 00:48:27.960
A fairly simple but pretty example
is the Motion Kaleidoscope Filter,

00:48:27.960 --> 00:48:34.900
which does an angle control or an
arc control as an on-screen control,

00:48:34.900 --> 00:48:36.560
all drawn with OpenGL primitives.

00:48:36.560 --> 00:48:39.040
And for the moment,
they're only in motion.

00:48:44.050 --> 00:48:46.940
Now,
when you draw your on-screen control,

00:48:47.020 --> 00:48:49.980
you can assume that the, well,
first of all,

00:48:50.000 --> 00:48:52.930
that you're operating on a texture
because you're using OpenGL,

00:48:52.930 --> 00:48:57.560
that the image has already been rendered
and that you're rendering on top of that.

00:48:57.560 --> 00:49:00.590
You're compositing over the
top of the frame and the

00:49:00.660 --> 00:49:02.680
canvas and that sort of thing.

00:49:02.980 --> 00:49:04.950
And you can choose your
drawing coordinates.

00:49:04.980 --> 00:49:08.220
You can switch coordinates between
one of these and one of the others.

00:49:08.220 --> 00:49:10.120
There's object coordinates, window,
and document,

00:49:10.120 --> 00:49:12.110
which are documented in the overview.

00:49:12.110 --> 00:49:19.540
And use the OpenGL anti-aliasing
to make nice edges.

00:49:20.680 --> 00:49:24.590
For on-screen controls,
we have our own methods

00:49:24.680 --> 00:49:26.650
for getting events,
not the NS event.

00:49:26.700 --> 00:49:27.400
And they're very simple.

00:49:27.400 --> 00:49:30.600
They're just your mouse
and keyboard events,

00:49:30.600 --> 00:49:34.600
not the tablet pressure and so on.

00:49:34.690 --> 00:49:38.600
And you can set parameters
based on these inputs,

00:49:38.600 --> 00:49:43.440
and you can use the action -- you should
use the action start -- the start action

00:49:43.440 --> 00:49:49.580
and end action methods before and after
modifying parameter state or value.

00:49:51.640 --> 00:49:58.050
For selections on the on-screen controls,
we use this OpenGL thing that you

00:49:58.050 --> 00:49:59.520
might or might not be familiar with.

00:49:59.520 --> 00:50:01.180
It's the GL Select Mode.

00:50:01.240 --> 00:50:05.100
So what you can do is implement one
drawing method for both rendering and

00:50:05.260 --> 00:50:07.280
for defining your selection areas.

00:50:07.280 --> 00:50:12.370
If you draw a part of your screen
while you're in Select Mode,

00:50:12.670 --> 00:50:15.720
that creates a selectable shape.

00:50:15.720 --> 00:50:19.520
And when the user clicks in one of those,
the app will -- the host app,

00:50:19.570 --> 00:50:23.780
Motion specifically will use
OpenGL to figure out which shape

00:50:23.840 --> 00:50:26.660
was clicked in for its hit testing.

00:50:26.660 --> 00:50:29.700
But you don't load textures for this,
and you don't need to do

00:50:29.700 --> 00:50:34.150
anti-aliasing because each pixel is
either on or off for hit testing.

00:50:34.230 --> 00:50:37.100
And if you have different
parts of your controls,

00:50:37.100 --> 00:50:40.110
you draw them each with
a different selection ID,

00:50:40.160 --> 00:50:43.610
and that's how Motion can
differentiate the different parts.

00:50:46.330 --> 00:50:51.700
To summarize, Final Cut Pro support
for FxPlugs is coming.

00:50:51.700 --> 00:50:53.150
That's probably the big news.

00:50:53.340 --> 00:50:55.550
Although we've mentioned
it last year too,

00:50:55.600 --> 00:50:58.480
but now it's even closer
than it was last year.

00:50:58.480 --> 00:51:00.840
And the new features,
the biggest new features

00:51:00.840 --> 00:51:03.340
are the transitions,
the new bitmap features,

00:51:03.370 --> 00:51:05.490
and string parameters.

00:51:06.040 --> 00:51:10.430
And you should join the
Pro Apps Dev mail list.

00:51:10.620 --> 00:51:14.000
In the past,
we've had people just send to a group

00:51:14.030 --> 00:51:18.230
address we have at Apple that some of the
motion engineers and Final Cut engineers

00:51:18.240 --> 00:51:21.560
and FxPlug people look at.

00:51:21.560 --> 00:51:24.880
But it's a private thing,
so none of the other developers can

00:51:24.880 --> 00:51:26.940
see your question or the answers.

00:51:26.940 --> 00:51:29.460
And if you want private communication,
that's still the best way to go.

00:51:29.460 --> 00:51:32.490
But we want to try to
open up this mail list.

00:51:32.490 --> 00:51:36.630
Just go to the Apple mail list
server and sign yourself up.

00:51:36.630 --> 00:51:38.800
And you can read other
people's responses,

00:51:38.800 --> 00:51:41.090
and you can search them later to
see if a question you're about

00:51:41.140 --> 00:51:42.460
to ask has already been answered.

00:51:42.460 --> 00:51:47.460
I think that'll help getting
some information flow going.

00:51:47.460 --> 00:51:53.520
And do optimize for software and
hardware rendering paths and test in

00:51:53.520 --> 00:51:57.450
each of the different host applications.

00:51:58.340 --> 00:52:02.360
For any additional information,
as I said, there's the SDK mail group

00:52:02.360 --> 00:52:06.370
for private communications,
and there's the mail list for

00:52:06.370 --> 00:52:08.520
sort of group-wide discussion.

00:52:10.030 --> 00:52:15.480
and you can contact me or
you can contact the groups.

00:52:15.480 --> 00:52:20.620
And the documentation is up on the web.

00:52:20.620 --> 00:52:23.060
And also if you go to
Apple Developer Connection,

00:52:23.100 --> 00:52:28.900
search for downloads and watch for the
announcement about the FxPlug SDK 1.1.

00:52:28.900 --> 00:52:31.330
It will be up there real soon now.

00:52:31.330 --> 00:52:35.810
And you will be able to download
that and look through it.

00:52:35.820 --> 00:52:38.270
Now you won't be able to actually
test any of the new features

00:52:38.350 --> 00:52:41.330
until the new Final Cut is out.

00:52:41.330 --> 00:52:45.660
But you'll be able to read
through and you can implement,

00:52:45.660 --> 00:52:47.290
just not access the new features.

00:52:47.290 --> 00:52:48.620
And you can test in motion.