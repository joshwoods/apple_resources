WEBVTT

00:00:10.180 --> 00:00:14.620
Hi, welcome everybody.

00:00:14.740 --> 00:00:16.980
I'm Ken Greenbaum and I'm
going to be joined in a little

00:00:16.980 --> 00:00:19.790
bit by two of my colleagues,
David and Frank,

00:00:19.810 --> 00:00:22.980
and we're going to be talking about
high-performance QuickTime video.

00:00:22.980 --> 00:00:24.290
Thank you all.

00:00:24.290 --> 00:00:28.820
I know it's late in the week and
it's also late in the day and

00:00:28.820 --> 00:00:31.700
it's right before the beer bash.

00:00:32.360 --> 00:00:35.310
So we're going to try
to be quick with this.

00:00:35.440 --> 00:00:40.740
We're going to not do a QA afterwards,
try to get you all onto campus.

00:00:40.740 --> 00:00:45.020
And on campus you can track us down
and you can also track us down tomorrow

00:00:45.020 --> 00:00:47.750
at the lab which begins at 10 o'clock.

00:00:50.140 --> 00:00:52.940
So this is what we're
going to talk about today.

00:00:52.940 --> 00:00:55.740
Of course, you all came here to
see the cool new stuff,

00:00:55.760 --> 00:00:58.600
and we'll show you some
of the cool new things.

00:00:58.600 --> 00:01:01.700
You've seen some of it already,
and we're going to talk about

00:01:01.700 --> 00:01:03.950
how that applies to QuickTime.

00:01:04.420 --> 00:01:07.110
So what's new with QuickTime and Leopard?

00:01:07.240 --> 00:01:07.900
64-bit.

00:01:07.900 --> 00:01:11.840
We're going to tell you how
QuickTime and 64-bit get along.

00:01:11.840 --> 00:01:14.600
We're going to show you some
Quartz Composer integration.

00:01:14.790 --> 00:01:16.820
We're going to talk about some
new features in QuickTime,

00:01:16.820 --> 00:01:19.750
most notably Aperture Mode.

00:01:20.090 --> 00:01:25.500
And we're going to talk about
QuickTime and Core Animation integration.

00:01:26.220 --> 00:01:29.080
For those of you who were just
at the previous talk on QtKit,

00:01:29.090 --> 00:01:32.970
you've heard an awful lot about QtKit,
but we're going to talk

00:01:32.970 --> 00:01:34.670
about it a little bit more.

00:01:35.550 --> 00:01:39.980
And maybe most importantly,
we're going to talk about how as

00:01:39.980 --> 00:01:43.960
developers you want to position
yourselves with QuickTime.

00:01:44.100 --> 00:01:47.560
So we're going to talk about
QuickTime strategy and also best

00:01:47.680 --> 00:01:50.660
practices for developing for QuickTime.

00:01:52.920 --> 00:01:55.350
First strategy.

00:01:55.480 --> 00:02:00.780
So as you know, QuickTime's been around
for a long while now.

00:02:00.870 --> 00:02:04.810
Because of that,
some of the APIs reflect that age.

00:02:04.870 --> 00:02:09.250
The good news is that all the old code,
or at least most of it,

00:02:09.250 --> 00:02:10.940
can continue to run.

00:02:11.310 --> 00:02:12.320
And that's a wonderful thing.

00:02:12.320 --> 00:02:16.670
It means that if you have old code bases,
you can still maintain them.

00:02:16.850 --> 00:02:20.420
It's important to remember
while some of the APIs are old,

00:02:20.690 --> 00:02:23.800
QuickTime internals are
remarkably new really.

00:02:23.800 --> 00:02:24.700
They're modern.

00:02:24.940 --> 00:02:29.240
Much of the video and
audio in QuickTime 7.

00:02:31.210 --> 00:02:34.790
So if you're using those new APIs,
you really get the benefits

00:02:34.800 --> 00:02:39.130
of all the new technologies
we've been delivering in OS X.

00:02:39.130 --> 00:02:42.960
And you also can take advantage of
the new features that you've heard

00:02:43.040 --> 00:02:45.240
about this week in terms of Leopard.

00:02:45.940 --> 00:02:48.790
It's important to remember
that if you use the new APIs,

00:02:48.790 --> 00:02:50.580
you're going to get the
highest performance,

00:02:50.610 --> 00:02:52.990
you're going to get integration
with these new features,

00:02:52.990 --> 00:02:56.410
and moving forward,
it's going to be the safest place

00:02:56.410 --> 00:02:58.570
to be for your applications.

00:03:01.640 --> 00:03:06.020
So first, let's talk about
QuickTime in 64-bit mode.

00:03:06.390 --> 00:03:09.620
So again,
if you were just here at the session,

00:03:09.620 --> 00:03:13.830
Tim told you a lot about it,
but this will be a brief review.

00:03:13.970 --> 00:03:20.170
So we consider QuickTime to be a bridge
between the 64-bit and 32-bit worlds.

00:03:21.880 --> 00:03:25.880
So maybe I should ask,
how many people are planning to

00:03:25.880 --> 00:03:28.680
develop applications or maybe
currently developing applications

00:03:28.680 --> 00:03:32.700
involving video and 64-bit?

00:03:33.260 --> 00:03:35.430
Okay, there are actually a surprising
number of hands that came up.

00:03:35.500 --> 00:03:39.410
I would love it if you folk came up,
not afterwards,

00:03:39.410 --> 00:03:41.930
but tomorrow or at the beer
bash and tell me what all

00:03:41.980 --> 00:03:43.780
you're planning to do with that.

00:03:43.820 --> 00:03:48.140
So for those who haven't
really considered 64-bit yet,

00:03:48.400 --> 00:03:49.950
64-bit is great.

00:03:49.950 --> 00:03:51.770
It's really great if you need it.

00:03:51.800 --> 00:03:56.660
It's especially nice,
the LP64-bit mode really means

00:03:56.660 --> 00:04:01.060
that you have long pointers,
pointers point to 64-bit values.

00:04:01.480 --> 00:04:05.230
It means you can memory
map just huge data files.

00:04:05.230 --> 00:04:07.320
It's really important for the sciences.

00:04:07.410 --> 00:04:09.450
But there's a question.

00:04:09.450 --> 00:04:12.720
Once you have these huge databases,
how do you share them

00:04:12.720 --> 00:04:13.720
with your colleagues?

00:04:13.720 --> 00:04:17.770
It's simply impossible to copy
and share those databases.

00:04:17.810 --> 00:04:22.560
Well, we think one thing that you can
do is actually output analysis

00:04:22.770 --> 00:04:27.170
to QuickTime movie files and
then trade the movie files.

00:04:29.040 --> 00:04:34.080
So for those of you who were at
Bertrand's State of the Union,

00:04:34.110 --> 00:04:36.640
how many people were at
the State of the Union?

00:04:36.680 --> 00:04:38.540
Okay, that's quite a few people.

00:04:38.540 --> 00:04:38.960
I wasn't.

00:04:39.070 --> 00:04:41.560
I was busy preparing for these.

00:04:41.840 --> 00:04:42.710
So I'm not sure.

00:04:42.840 --> 00:04:45.890
I know that he showed a demo.

00:04:45.940 --> 00:04:47.440
This is the demo.

00:04:47.440 --> 00:04:51.270
This is still from the demo.

00:04:51.270 --> 00:04:51.270
Pretty much it uses

00:04:53.730 --> 00:04:58.820
Very large database, molecular data,
and it renders that to

00:04:58.820 --> 00:05:00.170
a QuickTime movie file.

00:05:00.260 --> 00:05:03.160
So this is sort of the kind of
process that we're talking about.

00:05:03.230 --> 00:05:05.530
But I'm not sure if he showed
you the QuickTime movie

00:05:05.540 --> 00:05:07.640
that was generated from it.

00:05:07.780 --> 00:05:09.190
We're going to show it to you.

00:05:09.280 --> 00:05:13.180
Or if this is not the actual one,
this is one that's similar.

00:05:13.280 --> 00:05:15.760
So it's pretty cool.

00:05:15.830 --> 00:05:19.290
And of course, easy to trade this around,
impossible to trade

00:05:19.300 --> 00:05:23.070
that original data set,
or at least very challenging to.

00:05:24.550 --> 00:05:26.740
So 64-bit and QuickTime.

00:05:26.770 --> 00:05:31.460
It's really important to
remember that QtKit is the

00:05:31.460 --> 00:05:33.670
64-bit interface for QuickTime.

00:05:33.780 --> 00:05:37.000
This is your entree
into the 64-bit world.

00:05:37.020 --> 00:05:43.880
And there's not going to be 64-bit
support for the present C APIs.

00:05:46.290 --> 00:05:51.190
So in terms of QtKit,
the 64-bit API is identical

00:05:51.380 --> 00:05:53.760
to the 32-bit API.

00:05:53.890 --> 00:05:55.110
Let's take a quick look.

00:05:55.280 --> 00:05:58.910
So new in Leopard,
there's a new function in it to

00:05:58.910 --> 00:06:04.370
writable data that allows you
to instance a movie in memory.

00:06:05.100 --> 00:06:07.660
But the rest of this should
be familiar to you folk.

00:06:07.710 --> 00:06:13.570
To add a frame of video to
a movie you call add image.

00:06:13.730 --> 00:06:17.840
To play the resulting movie,
you call play on it.

00:06:17.860 --> 00:06:21.740
So very similar to what you'd
expect if you were already using

00:06:21.790 --> 00:06:26.730
QtKit and hopefully something
easy to use if you begin using it.

00:06:26.920 --> 00:06:30.520
So next we're going to talk about
Quartz Composer integration.

00:06:30.540 --> 00:06:34.640
So Quartz Composer is great.

00:06:34.640 --> 00:06:36.750
We've seen and heard a lot about it.

00:06:36.870 --> 00:06:38.240
We've seen the demos.

00:06:38.260 --> 00:06:41.500
Hopefully you attended
some of the sessions even.

00:06:41.560 --> 00:06:43.280
It's been around for a while now.

00:06:43.280 --> 00:06:44.280
He released it with Tiger.

00:06:46.330 --> 00:06:48.190
But in this talk,
we're going to briefly talk

00:06:48.250 --> 00:06:52.410
about how to integrate Quartz
Composer and QuickTime together.

00:06:52.620 --> 00:06:55.560
And there are two things
that make that possible.

00:06:55.630 --> 00:07:01.200
The first is that Quartz Composer itself
ships with a QuickTime movie node.

00:07:01.200 --> 00:07:05.300
And that's your way to get
QuickTime movies into your composition.

00:07:05.300 --> 00:07:09.910
And you can have any number of those,
as we'll demonstrate in a little bit.

00:07:09.940 --> 00:07:13.320
And then the second part maybe
is a little more esoteric,

00:07:13.570 --> 00:07:19.350
that there's actually a Quartz Composer
QuickTime component and importer.

00:07:20.710 --> 00:07:24.330
So using those things are what
allow us to do some of the

00:07:24.330 --> 00:07:27.380
really cool forms of integration
that we're going to demonstrate.

00:07:27.380 --> 00:07:31.440
So Quartz Composer compositions
are actually what we call

00:07:31.440 --> 00:07:35.060
first-class QuickTime media types,
which means that we can bring

00:07:35.060 --> 00:07:37.890
those directly into the movies
and we can treat them as if

00:07:37.980 --> 00:07:39.290
they're just another movie track.

00:07:39.300 --> 00:07:40.580
And that's pretty cool.

00:07:40.580 --> 00:07:44.360
Also,
the Quartz Composer QuickTime importer

00:07:44.520 --> 00:07:48.970
is what allows us to take a
Quartz Composer composition,

00:07:48.970 --> 00:07:54.000
a QTZ file, and basically drag it into
QT Player and have it play.

00:07:54.020 --> 00:07:59.900
And that's also what allows us to play
compositions within our slide sets.

00:08:02.270 --> 00:08:06.080
So Quartz Composer makes for a
very interesting video source.

00:08:06.120 --> 00:08:09.990
It's computer graphics,
and computer graphics by

00:08:09.990 --> 00:08:11.660
nature are very flexible.

00:08:11.810 --> 00:08:16.420
So Quartz Composer is actually
resolution independent,

00:08:16.420 --> 00:08:21.330
and it's resolution independent
in terms of time as well as space.

00:08:21.380 --> 00:08:24.680
Quartz Composer supports alpha channels,
which are really great

00:08:24.780 --> 00:08:27.610
because as you know,
those really come in handy when it's

00:08:27.610 --> 00:08:29.970
time to composite things together.

00:08:30.620 --> 00:08:32.850
Quartz Composer is
Core Image accelerated,

00:08:32.850 --> 00:08:37.790
and that means you can do all sorts
of wonderful things in real time.

00:08:38.210 --> 00:08:43.280
And of course, Quartz Composer has a
very interesting model,

00:08:43.400 --> 00:08:47.560
a filter graph that allows
you to create compositions

00:08:47.560 --> 00:08:51.540
and edit existing compositions
without requiring programming.

00:08:51.590 --> 00:08:55.800
So that allows people who are maybe
more artistic than programmers to be

00:08:55.800 --> 00:08:58.620
able to create new content and effects.

00:08:58.690 --> 00:09:00.750
And we're really happy about that.

00:09:00.910 --> 00:09:04.870
But with all this great
flexibility come challenges.

00:09:05.020 --> 00:09:07.840
Right now,
Quartz Composer only understands

00:09:07.910 --> 00:09:09.560
what we call square pixels.

00:09:09.630 --> 00:09:14.510
And we'll talk a lot more about
pixel aspect ratios in a little bit.

00:09:14.920 --> 00:09:17.620
But for now,
remember that Quartz Composer doesn't

00:09:17.620 --> 00:09:20.450
really understand video right now.

00:09:20.670 --> 00:09:25.630
In a similar way,
Quartz Composer doesn't understand what

00:09:25.660 --> 00:09:29.280
an interlaced movie format is or video.

00:09:29.740 --> 00:09:35.460
So right now, we have to do some things
to work around those issues,

00:09:35.470 --> 00:09:37.800
and you also have to be aware
of where those might pop up.

00:09:37.870 --> 00:09:40.010
And we'll talk about some of that.

00:09:41.190 --> 00:09:42.270
So it's very interesting.

00:09:42.450 --> 00:09:46.900
There's this interesting circular
kind of relationship in terms

00:09:47.010 --> 00:09:49.380
of who hosts who in this case.

00:09:49.440 --> 00:09:53.380
You can actually take a
QuickTime movie and put it inside

00:09:53.380 --> 00:09:58.240
a Quartz Composer composition via
those nodes we were talking about.

00:09:58.300 --> 00:10:00.810
Or you can take--

00:10:01.370 --> 00:10:04.960
A Quartz Composer track and put
it inside a QuickTime movie.

00:10:04.960 --> 00:10:07.500
And we're going to show you
a demonstration of that.

00:10:07.500 --> 00:10:10.020
And then I think the most
exciting things are what I'm

00:10:10.020 --> 00:10:14.350
calling these compound situations
that are a combination of both.

00:10:16.570 --> 00:10:20.190
So first we're going to talk
about QuickTime track in a movie.

00:10:20.470 --> 00:10:23.610
I didn't take the time out of
the talk to give a demo of this,

00:10:23.610 --> 00:10:27.890
but this is what it would look like if
we took Quartz Composer composition and

00:10:27.890 --> 00:10:30.700
dragged it into the QuickTime player.

00:10:31.270 --> 00:10:35.090
So this works again because
of the component importer

00:10:35.100 --> 00:10:37.320
that we already talked about.

00:10:37.320 --> 00:10:39.940
And the next points are very important.

00:10:40.020 --> 00:10:44.300
That it's actually QuickTime that's
imposing the frame dimensions,

00:10:44.300 --> 00:10:48.120
the frame times,
and the frame rates on the composition.

00:10:48.120 --> 00:10:53.400
So that's what's changing the nature of
the composition from being this computer

00:10:53.400 --> 00:10:58.240
graphics run as fast as you can kind of
world into something that's much more

00:10:58.290 --> 00:11:01.090
similar to what we expect from video.

00:11:02.480 --> 00:11:06.410
And a very nice feature of this is
once you've brought it into QuickTime,

00:11:06.410 --> 00:11:11.650
then you can export the result into
any QuickTime supported movie format.

00:11:11.750 --> 00:11:16.000
So you went from having this composition,
computer graphics, to having something

00:11:16.000 --> 00:11:17.340
that's actually video.

00:11:17.430 --> 00:11:20.510
So this is your print to video function.

00:11:23.130 --> 00:11:27.970
So we're going to talk about use of
Quartz Composer as an overlay track.

00:11:28.040 --> 00:11:31.740
But first, let's talk a little bit about
what's significant about using

00:11:31.800 --> 00:11:34.000
these Quartz Composer compositions.

00:11:34.440 --> 00:11:38.840
The composition is, really,
a description of animation.

00:11:38.850 --> 00:11:42.640
And that description doesn't
change with respect to length.

00:11:42.760 --> 00:11:44.040
It's the same.

00:11:44.040 --> 00:11:49.480
And most of that size tends to be
the actual media that's included.

00:11:49.580 --> 00:11:51.720
So in a little bit we're
going to show you a demo.

00:11:51.720 --> 00:11:53.660
It's going to have a bouncing cue.

00:11:53.980 --> 00:11:55.020
That's what I mean by media.

00:11:55.020 --> 00:11:58.230
That's something that's
imported into Quartz Composer.

00:11:58.360 --> 00:12:01.080
And that takes up a whole lot
of space of that composition.

00:12:01.250 --> 00:12:05.700
But we could display that bouncing
cue for one second or 100 hours,

00:12:05.700 --> 00:12:07.840
and the composition is the same length.

00:12:07.890 --> 00:12:11.980
So if you add that into your movie,
you sort of get that almost for free.

00:12:11.990 --> 00:12:15.380
It averages out to nothing.

00:12:17.050 --> 00:12:19.700
You can use this overlay
technique for a lot of things,

00:12:19.850 --> 00:12:23.030
crawls, titles,
all sorts of fancy things.

00:12:23.210 --> 00:12:28.700
I'm just going to show you a very,
very simple example of it.

00:12:28.760 --> 00:12:31.390
Can we cut to the demo machine, please?

00:12:43.810 --> 00:12:47.000
So if you notice there's a bouncing
cue in the lower right hand corner.

00:12:47.000 --> 00:12:50.290
And that's the composition.

00:12:52.630 --> 00:12:56.340
And we could do anything that was
much more fancy or much subtler,

00:12:56.340 --> 00:12:59.500
but this is what we did in this case.

00:12:59.500 --> 00:13:02.900
I think you get the idea.

00:13:03.000 --> 00:13:05.000
Can we go back to slides please?

00:13:11.560 --> 00:13:14.660
So what exactly went on?

00:13:14.800 --> 00:13:17.200
First of all,
there was no programming required.

00:13:17.320 --> 00:13:19.940
We created a composition,
and we added the

00:13:20.000 --> 00:13:21.680
composition to the movie.

00:13:21.730 --> 00:13:23.360
This is how it works.

00:13:23.430 --> 00:13:27.730
This is the Quartz Composer interface,
probably you've seen before.

00:13:27.880 --> 00:13:29.360
This is the image that we imported.

00:13:29.380 --> 00:13:31.580
In this case, this is our cue.

00:13:31.930 --> 00:13:36.000
Here are a couple that handle the
spatial transformation that's happening.

00:13:36.060 --> 00:13:38.950
This is a node that handles timing.

00:13:40.450 --> 00:13:43.440
And you'll see in the lower
left-hand corner the result.

00:13:43.470 --> 00:13:47.520
And if you notice, the cue is on the
checkerboard background.

00:13:47.560 --> 00:13:49.990
And that's how we do the overlay.

00:13:52.260 --> 00:13:55.350
In terms of the QuickTime movie
this was brought into,

00:13:55.350 --> 00:13:59.160
we already had the movie
in QuickTime Player.

00:13:59.200 --> 00:14:02.300
Then we brought up the property panel.

00:14:02.350 --> 00:14:05.280
You can see we selected,
there's a new track,

00:14:05.330 --> 00:14:07.300
the Quartz Composer track.

00:14:08.630 --> 00:14:11.350
We specify the size of it.

00:14:11.450 --> 00:14:12.840
We put it on-- I don't
know if you can see it,

00:14:12.850 --> 00:14:16.240
but this is the very first layer,
layer negative 1.

00:14:16.330 --> 00:14:20.140
And then in terms of transparency,
we choose alpha.

00:14:20.620 --> 00:14:22.780
And that's as simple as it gets.

00:14:22.880 --> 00:14:26.330
Let's talk about the compound scenario.

00:14:26.440 --> 00:14:31.380
So this is where things get very,
very interesting.

00:14:31.510 --> 00:14:36.340
Our users are used to
seeing very flashy content.

00:14:36.450 --> 00:14:39.580
They see it produced on TV,
and they really expect it from

00:14:39.580 --> 00:14:41.770
all of us in our applications.

00:14:41.860 --> 00:14:46.290
And we think that this type of
integration is one way to produce it.

00:14:47.290 --> 00:14:49.720
So pretty much what we
have is a composition.

00:14:49.820 --> 00:14:53.910
The composition has multiple
QuickTime nodes in it.

00:14:55.470 --> 00:14:59.880
The QuickTime movie basically
brings that in as a track.

00:14:59.880 --> 00:15:04.640
Or if you're dealing with an application,
it can integrate the Quartz

00:15:04.660 --> 00:15:06.980
Composer via Visual Context.

00:15:07.450 --> 00:15:11.390
That application can programmatically
control the composition.

00:15:11.390 --> 00:15:14.040
So in this example coming up,
we don't do this.

00:15:14.080 --> 00:15:16.480
But if we wanted to,
we could programmatically

00:15:16.480 --> 00:15:19.790
change the video content,
trigger the switching to go on,

00:15:19.880 --> 00:15:21.340
do these type of things.

00:15:21.340 --> 00:15:27.000
But as we have the caveats,
there are concerns that we have to have.

00:15:27.020 --> 00:15:32.590
And that is that you want your true
video content to match the content that

00:15:32.590 --> 00:15:35.810
is being produced by Quartz Composer.

00:15:36.650 --> 00:15:40.440
So just for example,
you may have to de-interlace

00:15:40.440 --> 00:15:44.000
the movie content before it
comes into Quartz Composer.

00:15:44.180 --> 00:15:48.670
That is, if your movie content started
out being interlaced content.

00:15:49.030 --> 00:15:54.120
And you might have to re-interlace that
as it comes out of Quartz Composer just

00:15:54.120 --> 00:15:59.450
so it looks the same as the native video.

00:15:59.510 --> 00:16:02.570
Let's see the demo.

00:16:02.670 --> 00:16:04.310
Please can we switch-- oh,
you're ahead of me.

00:16:04.340 --> 00:16:05.760
Thank you.

00:16:14.820 --> 00:16:18.230
So here we're switching
entirely too fast back and forth

00:16:18.650 --> 00:16:20.980
between two pieces of video.

00:16:20.980 --> 00:16:24.270
And you can see that it
has a very nice effect,

00:16:24.370 --> 00:16:26.640
3D effect.

00:16:26.680 --> 00:16:28.200
So you can do these things and more.

00:16:28.280 --> 00:16:33.100
Let's go back to slides, please.

00:16:38.740 --> 00:16:40.960
So in terms of references,
this is where you can

00:16:40.960 --> 00:16:42.520
go for more information.

00:16:42.790 --> 00:16:48.270
There's the QCTV example,
and there's a very nice tech note as

00:16:48.270 --> 00:16:50.790
well that has more information on this.

00:16:52.480 --> 00:16:53.910
Aperture Modes.

00:16:54.010 --> 00:16:57.650
This is a new feature in QuickTime 7.1.

00:16:58.430 --> 00:17:03.570
And it's a feature that requires
a little bit of motivation.

00:17:03.570 --> 00:17:08.530
So let's talk about why
aperture modes are necessary.

00:17:09.220 --> 00:17:14.150
Video and computer graphics
are inherently different,

00:17:14.150 --> 00:17:17.220
or at least they have very
different backgrounds.

00:17:18.800 --> 00:17:23.790
Video started out in
terms of an analog world.

00:17:23.790 --> 00:17:27.370
In computers, at least what we think
of as modern computers,

00:17:27.370 --> 00:17:27.370
are digital.

00:17:27.580 --> 00:17:29.800
So the first concept we're
going to talk about is this

00:17:29.800 --> 00:17:32.360
concept of pixel aspect ratio.

00:17:32.400 --> 00:17:36.550
And sometimes we call that PASP,
and now you know what that means.

00:17:36.660 --> 00:17:39.600
So computers were designed
to have square pixels.

00:17:39.880 --> 00:17:40.320
Why?

00:17:40.390 --> 00:17:42.990
It just makes sense mathematically.

00:17:43.140 --> 00:17:47.700
Things render more or less properly
when your pixels are square.

00:17:47.860 --> 00:17:52.400
And when I say square,
I mean they have a ratio of their

00:17:52.520 --> 00:17:55.400
height to width that's equal to one.

00:17:56.400 --> 00:17:59.210
Video, as I mentioned,
is an analog thing,

00:17:59.210 --> 00:18:00.980
or at least it started out that way.

00:18:01.050 --> 00:18:03.000
No concept of pixels at all.

00:18:03.130 --> 00:18:06.300
Pretty much you had analog lines.

00:18:06.470 --> 00:18:12.740
And you didn't start associating pixels
with video until we started digitizing.

00:18:12.800 --> 00:18:39.500
[Transcript missing]

00:18:40.590 --> 00:18:42.310
Next, clean aperture.

00:18:42.480 --> 00:18:45.500
We also call that clap.

00:18:45.620 --> 00:18:50.500
So computers were designed to
display all of their pixels.

00:18:50.630 --> 00:18:54.380
There are none that are
hidden or invisible.

00:18:55.030 --> 00:18:59.840
TVs, also being analog devices,
were designed to hide pixels.

00:18:59.870 --> 00:19:04.820
Basically, 5% to 10% of the video
image was purposely hidden

00:19:04.890 --> 00:19:07.110
behind the plastic bezel.

00:19:07.150 --> 00:19:08.150
That's all by design.

00:19:08.160 --> 00:19:12.760
So there has to be some way that we can
describe the nature of our video content,

00:19:12.830 --> 00:19:17.620
which part was intended to be seen and
which part wasn't intended to be seen.

00:19:18.150 --> 00:19:21.780
The part that's not intended to
be seen contains all sorts of

00:19:21.870 --> 00:19:26.290
mistakes and bloopers and things
that we really don't want to see.

00:19:27.470 --> 00:19:30.730
So these aperture modes,
these concepts were defined

00:19:30.740 --> 00:19:34.680
in SMPTE 187 back in 1995.

00:19:34.680 --> 00:19:36.840
These are the concepts
that we're dealing with.

00:19:36.880 --> 00:19:41.440
Pixel aspect ratio, clean aperture,
production aperture,

00:19:41.450 --> 00:19:43.040
edge processing region.

00:19:43.070 --> 00:19:45.120
We'll talk about those.

00:19:45.110 --> 00:19:47.890
What's important from the
QuickTime perspective is that

00:19:48.090 --> 00:19:53.210
things like PASP and CLAP should be
identified with your video content.

00:19:53.210 --> 00:19:56.170
And we do that by tagging the movies.

00:19:57.930 --> 00:20:02.990
There's also Aperture Mode APIs that
we've added to QuickTime.

00:20:03.070 --> 00:20:07.620
And pretty much that allows you as
the developer to tell QuickTime how

00:20:07.620 --> 00:20:09.600
to deal with these values.

00:20:09.600 --> 00:20:13.600
And I'll give you
examples of those as well.

00:20:13.740 --> 00:20:16.710
We have four supported aperture modes.

00:20:16.800 --> 00:20:18.300
The first is classic.

00:20:18.320 --> 00:20:20.000
This is really what you're used to.

00:20:20.030 --> 00:20:24.570
You get all the pixels and there's
no aspect ratio correction.

00:20:24.860 --> 00:20:27.520
The next is Clean, Clean Aperture Mode.

00:20:27.590 --> 00:20:31.300
This is really what your
end user probably expects.

00:20:31.460 --> 00:20:34.430
We do all the processing,
we only show what we

00:20:34.430 --> 00:20:37.350
call the clean pixels,
and we do perform

00:20:37.350 --> 00:20:39.400
aspect ratio correction.

00:20:39.510 --> 00:20:45.270
The next two are really intended for
probably professional video editors.

00:20:45.510 --> 00:20:50.540
In one case, we perform the aspect ratio
correction and show all the pixels.

00:20:50.600 --> 00:20:53.790
In another case,
we don't do any corrections at all.

00:20:53.900 --> 00:20:56.470
We don't alter the signal.

00:20:57.120 --> 00:20:59.870
So this is an example of DV.

00:21:00.230 --> 00:21:02.000
It's what we all are used to seeing.

00:21:02.040 --> 00:21:04.430
And we're so used to seeing it
that we probably don't even notice

00:21:04.430 --> 00:21:09.160
anymore on the left and right edges
there are these vertical bars.

00:21:09.170 --> 00:21:13.070
And if you look at this blow up,
you'll see that those vertical

00:21:13.100 --> 00:21:16.300
bars are more complicated,
that there's no fewer than

00:21:16.420 --> 00:21:20.890
eight columns of pixels that
are somehow bad or peculiar.

00:21:20.910 --> 00:21:22.200
They're off.

00:21:22.210 --> 00:21:25.600
And really this is because the
codec doesn't define that area.

00:21:27.190 --> 00:21:30.050
We're not supposed to display these.

00:21:32.350 --> 00:21:34.030
So these are the modes again.

00:21:34.130 --> 00:21:35.710
This is also from DV.

00:21:35.760 --> 00:21:38.180
It's a specially prepared signal.

00:21:38.520 --> 00:21:42.840
In this mode, where we're conforming
aperture to encoded pixels,

00:21:42.880 --> 00:21:47.680
we don't provide any pixel
aspect ratio correction.

00:21:47.890 --> 00:21:53.110
So I believe you should be able to
see that the circle in the center

00:21:53.500 --> 00:21:55.570
isn't so much a circle as it is oval.

00:21:55.580 --> 00:21:57.420
It should appear to be very wide.

00:21:57.440 --> 00:22:01.280
Also, there are these fuchsia
bars on either side.

00:22:01.420 --> 00:22:05.500
To make the circle or lack of
circularity a little apparent,

00:22:05.500 --> 00:22:07.890
we can measure the dimensions.

00:22:08.180 --> 00:22:13.800
And we can see that it's 390
pixels wide and 345 tall.

00:22:13.820 --> 00:22:17.130
And interestingly enough,
that's an 11 to 10 ratio.

00:22:17.360 --> 00:22:20.170
And we're going to see those
numbers come back again.

00:22:21.300 --> 00:22:27.590
If we correct the pixel
aspect ratio by conforming the

00:22:27.590 --> 00:22:27.590
aperture mode to production,

00:22:28.760 --> 00:22:32.100
Then we get back to something that
hopefully appears round to you.

00:22:32.190 --> 00:22:37.040
And you can see that when we measured it,
it's 354 by 354.

00:22:38.850 --> 00:22:42.950
When we correct pass and clap,
we're actually conforming the

00:22:42.950 --> 00:22:48.100
aperture mode to clean aperture,
and we're getting back to the 640 by

00:22:48.100 --> 00:22:51.110
480 dimensions that we know and love.

00:22:51.140 --> 00:22:53.510
You can see that the
vertical bars are gone,

00:22:53.510 --> 00:22:57.320
and hopefully things appear
to be round as they should be.

00:22:59.440 --> 00:23:03.890
So this is another way to look at it
using an object we're all familiar with.

00:23:03.980 --> 00:23:06.990
So in this case,
the edge processing region are those

00:23:06.990 --> 00:23:10.670
areas that didn't get chocolate
coated and really that's just a

00:23:10.670 --> 00:23:14.460
manufacturing defect that none of
you were supposed to be exposed to.

00:23:14.480 --> 00:23:17.600
The clean aperture,
really the material that we

00:23:17.630 --> 00:23:21.020
all want to have is that nice
chocolate area in the center.

00:23:22.170 --> 00:23:26.130
When we set QuickTime to
the clean aperture mode,

00:23:26.130 --> 00:23:30.000
you only get the chocolaty goodness,
all those other things go away.

00:23:33.290 --> 00:23:36.740
So for those of you who are interested,
these are the values that we are

00:23:36.820 --> 00:23:39.030
currently using in QuickTime.

00:23:39.030 --> 00:23:43.560
And we've been using these in terms
of the QuickTime codecs for some time.

00:23:47.190 --> 00:23:50.350
If you want to experiment
with your own content,

00:23:50.350 --> 00:23:56.310
you can bring up the content in the
QuickTime Player property panel.

00:23:56.460 --> 00:24:00.920
You can select the movie,
presentation tab,

00:24:02.450 --> 00:24:06.130
Click the conform aperture mode to,
and there's a drop down for

00:24:06.260 --> 00:24:07.700
the four aperture modes.

00:24:07.740 --> 00:24:11.100
So you can see what these
things actually look like.

00:24:11.840 --> 00:24:14.570
There's an available API that we're
going to talk about in a moment.

00:24:14.930 --> 00:24:18.090
There's both a C API and Apple Script.

00:24:19.110 --> 00:24:22.150
So next I'd like to briefly
talk to you about tagging.

00:24:22.420 --> 00:24:26.530
Failure to tag your content is the
number one source of basically image

00:24:26.540 --> 00:24:30.710
quality problems that are reported to us.

00:24:31.500 --> 00:24:40.200
Tagging really is used to allow you,
the developer of content,

00:24:40.200 --> 00:24:40.200
to describe to QuickTime what
is the nature of the content.

00:24:41.800 --> 00:24:45.770
If those tags aren't provided,
then QuickTime disables most

00:24:45.770 --> 00:24:47.540
of the advanced features.

00:24:47.600 --> 00:24:50.890
You don't get aspect ratio correction,
no clean aperture,

00:24:51.200 --> 00:24:53.350
and other things that we're
not going to talk about today,

00:24:53.430 --> 00:24:55.200
like color correction, are all disabled.

00:24:55.200 --> 00:24:59.870
This causes QuickTime to basically guess
your intentions if it's not tagged.

00:24:59.900 --> 00:25:03.590
So it's guessing that means that
you're likely not going to get the

00:25:03.590 --> 00:25:05.680
results that you want or intend.

00:25:06.940 --> 00:25:11.910
There's a programmatic interface for
attaching your tags to your movies.

00:25:11.910 --> 00:25:14.460
And you can look at these
tags using dumpster that we're

00:25:14.460 --> 00:25:16.130
going to do very quickly.

00:25:16.240 --> 00:25:19.080
So hopefully you all have been
exposed to Dumpster before.

00:25:19.200 --> 00:25:21.570
If not, you can download it.

00:25:21.910 --> 00:25:25.260
In this case,
we're looking at the sample description.

00:25:25.260 --> 00:25:28.490
You can see there's values for pass,
but in this case,

00:25:28.490 --> 00:25:32.310
you can see that same 10 to
11 ratio as we saw before.

00:25:32.420 --> 00:25:36.070
You can also see that there's a
clean aperture mode that's set.

00:25:36.460 --> 00:25:38.840
and the dimensions.

00:25:38.890 --> 00:25:43.750
On the second area in the track,
you can see that there

00:25:43.750 --> 00:25:47.700
are these three values,
the clean aperture dimensions,

00:25:47.700 --> 00:25:53.160
the production aperture dimensions,
and the tracking coded dimensions.

00:25:53.220 --> 00:25:56.680
And those are all computed
based on those other values.

00:26:00.220 --> 00:26:02.400
This is a very quick look at the API.

00:26:02.520 --> 00:26:04.470
The first two calls are optional.

00:26:04.660 --> 00:26:09.890
Basically allows you to add an
image description for PASP and CLAP.

00:26:11.330 --> 00:26:14.560
The second call,
Generate Movie Aperture Mode Dimension,

00:26:14.590 --> 00:26:18.420
either will use those values or
it'll query those from the codec.

00:26:19.000 --> 00:26:24.950
Codecs that are PASP and CLAP aware
will provide those dimensions for you

00:26:24.960 --> 00:26:26.910
if you don't declare them yourself.

00:26:28.710 --> 00:26:32.580
And then finally,
you can set the aperture mode

00:26:32.680 --> 00:26:37.040
using the QuickTime property API.

00:26:39.350 --> 00:26:45.570
So keep in mind the new
codecs are Aperture aware.

00:26:46.160 --> 00:26:50.760
QuickTime will default to
the classic behavior if your

00:26:50.800 --> 00:26:53.200
movie content's not tagged.

00:26:53.450 --> 00:26:55.890
And as developers,
you really should remove any

00:26:56.320 --> 00:27:01.500
workarounds you might have to have
corrected the aspect ratio yourself.

00:27:01.580 --> 00:27:05.560
Please adopt these modes, excuse me,
Aperture Mode APIs,

00:27:05.560 --> 00:27:08.110
and be sure to tag all your content.

00:27:09.700 --> 00:27:14.450
So next, I turn over to David Eldred.

00:27:14.460 --> 00:27:15.460
Thank you, David.

00:27:15.510 --> 00:27:16.860
Thanks.

00:27:16.860 --> 00:27:18.650
Thanks a lot, Ken.

00:27:20.810 --> 00:27:25.830
So an important part of any modern,
any high performance video

00:27:25.830 --> 00:27:28.240
pipeline is a modern codec.

00:27:28.240 --> 00:27:34.900
And modern codecs introduce all sorts of,
introduce a new set of concerns.

00:27:34.930 --> 00:27:38.720
So as new codecs are developed,
they're always adding a bunch of

00:27:38.720 --> 00:27:42.570
new tricks in order to advance or
increase the compression without

00:27:42.620 --> 00:27:46.600
decreasing the quality of your video.

00:27:46.600 --> 00:27:49.800
And a huge number of these tricks
are completely internal to the codec.

00:27:49.800 --> 00:27:54.800
They have no impact on you as an end
user or as a developer or anything.

00:27:54.800 --> 00:27:58.230
But there's a few tricks that they
use that actually do require some

00:27:58.250 --> 00:28:02.070
change in behavior in your application,
depending on how you

00:28:02.090 --> 00:28:04.190
interact with QuickTime.

00:28:04.810 --> 00:28:08.140
But it's important to note that if you
stick to the higher level interfaces,

00:28:08.210 --> 00:28:12.360
things like QtKit,
things like in Carbon using

00:28:12.360 --> 00:28:17.040
the movie and track level APIs,
these will actually hide all

00:28:17.040 --> 00:28:18.610
of these complexities from you.

00:28:18.780 --> 00:28:20.760
You don't have to worry about a thing.

00:28:20.850 --> 00:28:27.040
And there's also some things
like using the clipboard for cut,

00:28:27.040 --> 00:28:29.030
copy, and paste.

00:28:29.030 --> 00:28:29.460
It hides the complexities
of movie editing from you.

00:28:29.770 --> 00:28:32.460
But not everyone has this luxury.

00:28:32.480 --> 00:28:34.880
And in order to understand
these complexities I'm talking

00:28:34.880 --> 00:28:37.740
about a little bit more,
we're going to just take a quick look

00:28:37.740 --> 00:28:43.840
at some aspects of video compression.

00:28:44.900 --> 00:28:48.640
Simplest forms of compression
tend to involve just key frames.

00:28:48.690 --> 00:28:51.860
Every single frame of video is
compressed as its own image.

00:28:51.870 --> 00:28:56.340
There's no dependencies on other images.

00:28:56.340 --> 00:28:58.250
These are also called iframes.

00:28:58.290 --> 00:29:01.140
And as you can see in this,
it's very simple.

00:29:01.140 --> 00:29:07.560
Say you want to display frame
number four in this sequence.

00:29:07.570 --> 00:29:10.960
All you'd have to do is decode
and display frame number four.

00:29:10.970 --> 00:29:12.660
It's that easy.

00:29:12.670 --> 00:29:16.900
But codec developers
have-- they're smart folks.

00:29:16.920 --> 00:29:19.480
They realize that there's a lot
of information that's similar

00:29:19.520 --> 00:29:21.400
between these different frames.

00:29:21.420 --> 00:29:26.300
And so that's where this whole
idea of difference frames comes in.

00:29:26.600 --> 00:29:30.460
With difference frames,
individual frames of video depend upon

00:29:30.460 --> 00:29:33.260
earlier displayed frames of video.

00:29:33.360 --> 00:29:37.120
So doing this,
you get much better compression,

00:29:37.120 --> 00:29:39.520
and there's a few
complexities that are added.

00:29:39.660 --> 00:29:43.010
And difference frames
are also called P-frames.

00:29:43.250 --> 00:29:47.300
So looking at our same sequence,
the first frame,

00:29:47.340 --> 00:29:49.710
we still want to compress
that as an iframe.

00:29:49.820 --> 00:29:52.290
It's completely self-contained.

00:29:52.410 --> 00:29:56.970
But the next frame in the sequence,
it's basically just that iframe

00:29:56.970 --> 00:29:59.100
but with a tiny bit of car added.

00:29:59.100 --> 00:30:03.010
And so if you keep on
describing that section,

00:30:03.010 --> 00:30:06.520
most of it in terms
of the previous frame,

00:30:06.520 --> 00:30:10.290
you only have to add the small amount
of information required for that car.

00:30:10.770 --> 00:30:15.360
And similarly,
frame number three is actually an

00:30:15.360 --> 00:30:17.110
awful lot like frame number two.

00:30:17.140 --> 00:30:18.840
So describing in terms
of frame number two,

00:30:18.840 --> 00:30:22.450
but that bit of car that was
added is shifted to the left

00:30:22.450 --> 00:30:24.730
and a new strip of car is added.

00:30:24.830 --> 00:30:27.770
And so on for the rest of
the frames in the movie.

00:30:27.890 --> 00:30:33.930
They're all described in
terms of the previous frame.

00:30:33.930 --> 00:30:35.080
And you can see we get much
better compression this way.

00:30:36.000 --> 00:30:41.440
But clever codec designers,
they see that the first frame and

00:30:41.440 --> 00:30:45.360
the final frame of this sequence
actually contain basically all

00:30:45.360 --> 00:30:47.080
of the information we want.

00:30:47.110 --> 00:30:51.190
And describing the frames in
between those two points in terms

00:30:51.200 --> 00:30:55.990
of those two frames will make
a huge difference in compression.

00:30:56.780 --> 00:31:00.050
So that means that the frames in
the middle of the sequence will

00:31:00.050 --> 00:31:04.200
depend upon an earlier displayed
frame and a later displayed frame.

00:31:04.230 --> 00:31:06.600
This is bidirectional prediction.

00:31:06.650 --> 00:31:09.780
And using this,
you can get better compression.

00:31:09.880 --> 00:31:12.200
Random access is a
little bit complicated,

00:31:12.250 --> 00:31:14.960
and these bidirectionally
predicted frames,

00:31:14.990 --> 00:31:17.300
they're also called B-frames.

00:31:17.730 --> 00:31:20.940
So looking at that same sequence,
we once again would like to display

00:31:20.940 --> 00:31:23.770
that first frame as an iframe.

00:31:24.570 --> 00:31:29.750
But instead of going on to
the second displayed frame,

00:31:29.770 --> 00:31:38.570
we want to go on to the
final frame in the sequence.

00:31:38.570 --> 00:31:38.570
And we'll encode that frame as
a difference frame or a P frame

00:31:38.570 --> 00:31:38.570
based on that first frame.

00:31:39.410 --> 00:31:43.390
And then, using these two frames,
we're able to describe

00:31:43.480 --> 00:31:45.160
each frame in between.

00:31:45.260 --> 00:31:49.480
So frame number two is basically the
first frame plus the car that was added

00:31:49.480 --> 00:31:52.260
in the final frame shifted to the right.

00:31:52.470 --> 00:31:55.100
And same for frame number two.

00:31:55.170 --> 00:31:59.360
And frame number three-- well, sorry,
off by one.

00:31:59.380 --> 00:32:01.480
And frame number five.

00:32:02.550 --> 00:32:06.180
And you can see we get much
better compression this way.

00:32:06.210 --> 00:32:09.340
So it's all very interesting,
but what does it really

00:32:09.340 --> 00:32:11.450
mean inside of QuickTime?

00:32:11.730 --> 00:32:15.510
So this means that each frame of video,
each video sample could

00:32:15.660 --> 00:32:18.620
have a distinct display,
decode and display time.

00:32:18.640 --> 00:32:21.350
Previously,
frames of video would just have

00:32:21.420 --> 00:32:23.420
a single time attached to them.

00:32:23.420 --> 00:32:25.070
That's the display time.

00:32:25.080 --> 00:32:29.240
But now,
things are a little more complicated.

00:32:29.240 --> 00:32:33.750
So in our previous example,
I love this sequence,

00:32:33.760 --> 00:32:38.880
the first frame has a decode
and display time of zero.

00:32:38.880 --> 00:32:44.280
And it's important to note that frames
are stored in the movie in decode order.

00:32:44.280 --> 00:32:46.860
So we're going to look
at them in that way.

00:32:48.290 --> 00:32:52.500
So the next frame in decode order is
actually the final frame in the sequence.

00:32:52.600 --> 00:32:56.960
So it's got a decode time of
10 and a display time of 50.

00:32:57.980 --> 00:33:03.690
And then all of our
B-frames are in order,

00:33:03.690 --> 00:33:09.210
one after the other, display times 20,
30, 40-- sorry, decode times 20, 30, 40,

00:33:09.210 --> 00:33:10.080
and 50.

00:33:10.110 --> 00:33:16.130
And their display times are 10, 20, 30,
and 40.

00:33:16.280 --> 00:33:22.090
Inside the QuickTime file,
the display time is generally stored

00:33:22.160 --> 00:33:24.200
as an offset from the decode time.

00:33:24.350 --> 00:33:28.170
So this offset for the
first frame would be zero.

00:33:28.180 --> 00:33:30.530
The offset for the
second frame would be 40.

00:33:30.710 --> 00:33:33.720
And for each following frame,
all of these B frames,

00:33:33.720 --> 00:33:35.700
the offset is negative 10.

00:33:35.700 --> 00:33:40.850
And this is sort of how you figure
out that frames are reordered.

00:33:40.930 --> 00:33:44.100
If you ever have negative offsets,
there's frame reordering.

00:33:45.320 --> 00:33:48.160
So that's what it means for QuickTime,
but what it really means for you

00:33:48.160 --> 00:33:53.660
is we have a bunch of APIs that
are a little bit ambiguous.

00:33:53.710 --> 00:33:57.900
So we've updated a ton of APIs in
the media and the sample level

00:33:57.980 --> 00:34:00.630
in order to disambiguate things.

00:34:00.730 --> 00:34:05.230
Things like getMediaNextInterestingTime,
very simple,

00:34:05.240 --> 00:34:09.710
getMediaNextInterestingDecodeTime,
getMediaNextInterestingDisplayTime.

00:34:09.830 --> 00:34:14.940
Same for getMediaDuration,
both a decode and a display variation.

00:34:15.230 --> 00:34:17.180
addMediaSample.

00:34:17.180 --> 00:34:21.160
That previously took a single
timestamp for that media sample.

00:34:21.170 --> 00:34:25.060
Now you can have two timestamps,
the decode and the display time.

00:34:25.060 --> 00:34:28.110
So we've had to add addMediaSample too.

00:34:28.560 --> 00:34:31.910
And this is just a small sampling
of the APIs that have changed at

00:34:31.910 --> 00:34:35.670
the media and sample level in order
to accommodate these frames with

00:34:36.180 --> 00:34:38.100
distinct decode and display times.

00:34:38.100 --> 00:34:43.050
It's very important to note here that
the track and movie level APIs that are

00:34:43.050 --> 00:34:45.080
very similar to these are unchanged.

00:34:45.280 --> 00:34:49.200
They assume you're talking about
display time and there's really nothing

00:34:49.500 --> 00:34:52.100
else that makes sense at that level.

00:34:52.110 --> 00:34:57.800
So get movie next interesting time
is still the only way to query

00:34:57.800 --> 00:35:00.140
movie for that sort of value.

00:35:00.750 --> 00:35:03.740
And if you were to use
one of these old APIs,

00:35:03.910 --> 00:35:07.910
get media next interesting time
on an H264 movie or another

00:35:07.910 --> 00:35:11.540
movie that has reordered content,
you would get an error back.

00:35:11.590 --> 00:35:13.810
So if you haven't
switched to the new APIs,

00:35:13.810 --> 00:35:16.120
I hope you're ready to deal with errors.

00:35:19.050 --> 00:35:21.860
So that's a little talk about those APIs.

00:35:21.990 --> 00:35:24.680
We've introduced a bunch of
other APIs in order to deal

00:35:24.800 --> 00:35:26.550
with modern codecs like this.

00:35:26.600 --> 00:35:30.580
There's a whole set of new compressor
and decompressor interfaces.

00:35:30.600 --> 00:35:33.200
These have been around
for a little while,

00:35:33.200 --> 00:35:37.640
but these allow you to write your
own codecs that implement B-frames.

00:35:37.640 --> 00:35:44.490
You can get off of GWorlds,
and you can do multi-pass compression.

00:35:44.520 --> 00:35:47.140
You can have a codec that
supports multi-pass compression.

00:35:48.160 --> 00:35:50.350
And we have some fantastic sample code.

00:35:50.360 --> 00:35:52.020
It's this example IPB codec.

00:35:52.060 --> 00:35:54.810
And suggest all codec
writers check it out.

00:35:54.860 --> 00:35:57.660
And please come and visit
us in the lab tomorrow.

00:35:57.660 --> 00:35:58.800
Find us at the beer bash.

00:35:58.860 --> 00:36:02.160
Track us down if you're
interested in codec writing and

00:36:02.160 --> 00:36:03.810
you want some help with this.

00:36:06.640 --> 00:36:10.680
So we had these old
decompression sequence APIs.

00:36:10.880 --> 00:36:12.810
Those didn't deal well with B-frames.

00:36:12.870 --> 00:36:16.080
They were very G-World based.

00:36:16.550 --> 00:36:20.360
And so we have the new decompression
session APIs that replace them.

00:36:20.360 --> 00:36:23.890
Get you off of G-Worlds,
get you off of QuickDraw,

00:36:23.890 --> 00:36:27.810
compatible with the old
codecs as well as new codecs.

00:36:27.830 --> 00:36:31.740
So if you're currently using
the decompression sequence APIs,

00:36:31.740 --> 00:36:35.310
it's a great idea to switch
to decompression sessions.

00:36:36.930 --> 00:36:41.770
And we've got some sample code,
the movie video chart sample code,

00:36:41.770 --> 00:36:43.910
which I believe is
linked to this session,

00:36:44.220 --> 00:36:47.610
which demonstrates the usage
of decompression sessions.

00:36:49.070 --> 00:36:52.240
And we updated decompression sequences,
so now we've got,

00:36:52.280 --> 00:36:55.060
we definitely had to update
compression sequences.

00:36:55.230 --> 00:36:57.500
Sequences are bad, sequences are old.

00:36:57.550 --> 00:36:58.940
Use sessions.

00:36:59.060 --> 00:37:04.600
We've got compression sessions now,
allow you to do GWorld-free compression.

00:37:04.640 --> 00:37:09.000
You pack things into CVPixel buffers
and you get pixel buffers out.

00:37:09.000 --> 00:37:11.250
I mean,
the way these work is you open up a

00:37:11.250 --> 00:37:18.480
compression session and you're gonna feed
it your frames in display order and it's

00:37:18.480 --> 00:37:20.800
gonna hold on to some amount of them.

00:37:20.800 --> 00:37:25.290
And when it's ready to output frames,
it'll call your output callback

00:37:25.300 --> 00:37:29.800
and it'll give you these encoded
frames out in decode order.

00:37:29.800 --> 00:37:33.380
And since they're in decode order,
they're ready to insert into your

00:37:33.600 --> 00:37:35.710
media or do whatever you want with.

00:37:36.260 --> 00:37:40.960
and supports frame reordering,
it supports multi-pass.

00:37:41.200 --> 00:37:42.710
Check it out.

00:37:44.860 --> 00:37:49.960
And with that,
I'd actually like to go to a demo.

00:37:49.980 --> 00:38:00.200
And the demo is-- so we're going to
look at how to use a movie export in

00:38:00.200 --> 00:38:05.240
order to export iPod-compatible video.

00:38:05.920 --> 00:38:08.360
And where's my mouse?

00:38:08.390 --> 00:38:09.380
There it is.

00:38:09.730 --> 00:38:11.990
I'm going to do iPod compatible export.

00:38:12.220 --> 00:38:14.850
And we're going to do it without
presenting-- show you how to

00:38:14.860 --> 00:38:18.190
do that without presenting
any UI to the end user.

00:38:18.250 --> 00:38:21.540
And so you can integrate this
into your own application.

00:38:21.650 --> 00:38:25.890
So the way we're going to do this,
and just as an example-- so we've

00:38:26.310 --> 00:38:29.680
got this beautiful app here.

00:38:29.680 --> 00:38:35.110
Just for fun, we're going to add a
little Core Image effect.

00:38:36.730 --> 00:38:38.720
You get the idea.

00:38:39.270 --> 00:38:43.430
The way that we do this iPod
export is we're gonna-- you need

00:38:43.500 --> 00:38:45.940
to at least once invoke this--

00:38:46.320 --> 00:38:49.700
We're using the MPEG-4 exporter.

00:38:49.700 --> 00:38:52.200
And you need to open this dialog.

00:38:52.200 --> 00:38:57.220
And we're going to choose
iPod-compatible settings.

00:38:57.220 --> 00:38:59.830
If you're interested in
getting the details of this,

00:38:59.840 --> 00:39:01.170
it can help you out.

00:39:01.200 --> 00:39:05.760
But you have to make sure
we're doing H.264 video.

00:39:05.760 --> 00:39:10.940
To be conservative,
we're going to choose 500 kilobits.

00:39:11.080 --> 00:39:14.060
We'll let it do automatic keyframing.

00:39:16.200 --> 00:39:19.900
The important thing is to make sure
that we're baseline compatible.

00:39:19.900 --> 00:39:22.280
And we'll let it do
multi-pass compression.

00:39:23.910 --> 00:39:26.800
When I click OK here,
it's not going to do the export.

00:39:26.940 --> 00:39:31.320
All I've done is invoke that dialog
and save its settings off to an Atom

00:39:31.320 --> 00:39:33.800
container inside my application.

00:39:33.800 --> 00:39:36.200
And I'm not going to
do an export with them.

00:39:36.200 --> 00:39:39.150
Then I've closed that exporter component.

00:39:40.520 --> 00:39:43.160
And you could do that in
some other application,

00:39:43.160 --> 00:39:48.090
save these settings off, you know,
inside your application and never--

00:39:48.220 --> 00:39:51.950
and then use those settings as
we're going to do over here,

00:39:52.100 --> 00:39:59.210
apply them without any interaction with
the user to another export component.

00:40:02.730 --> 00:40:07.000
So, I can't see that too well,
but I'm going to give,

00:40:07.010 --> 00:40:10.950
all I'm going to do is present,
save dialogue.

00:40:11.180 --> 00:40:19.040
Click Save and I do-- so it's going to go
ahead and do some multi-pass export here.

00:40:19.040 --> 00:40:26.140
And it's rendering this to the
screen as it's doing the export,

00:40:26.140 --> 00:40:30.810
doing core image effects on top
of it and all that crazy stuff.

00:40:30.810 --> 00:40:30.810
And then this application reads
that buffer back from the screen.

00:40:32.380 --> 00:40:35.990
And there's my exported movie.

00:40:36.060 --> 00:40:40.420
Should work on your iPod.

00:40:41.360 --> 00:40:49.180
And I'm going to really quickly
show you the code that's doing--

00:40:49.180 --> 00:40:57.160
that's both invoking the first export
dialog where I save off the settings,

00:40:57.160 --> 00:41:00.330
but that's the code that you
actually probably wouldn't

00:41:00.330 --> 00:41:00.330
want in your final application.

00:41:00.330 --> 00:41:00.330
And then I'll show you the export that--

00:41:01.460 --> 00:41:07.640
So, first thing you have to do is
actually open an export component.

00:41:07.730 --> 00:41:11.190
Here I'm opening an
MPEG-4 export component.

00:41:11.720 --> 00:41:17.510
And so this is the call where
I'm actually invoking the dialog.

00:41:17.590 --> 00:41:21.860
So just going to do movie
export do user dialog.

00:41:21.890 --> 00:41:23.870
That presents the UI.

00:41:23.980 --> 00:41:27.540
And then when the UI is dismissed,
when the user clicks the OK button,

00:41:27.630 --> 00:41:30.600
the application continues here.

00:41:30.640 --> 00:41:34.500
And we do a movie export get
settings as Atom Container call.

00:41:34.520 --> 00:41:37.420
And in this case, in the application,
we're just saving this

00:41:37.420 --> 00:41:40.110
off to a global variable,
the export settings.

00:41:40.260 --> 00:41:44.330
But you could have this saved
off inside your application and

00:41:44.330 --> 00:41:48.330
never have to do any of this.

00:41:50.340 --> 00:41:54.920
And so this is the function that
actually gets called when you

00:41:55.070 --> 00:41:57.780
click the export to iPod button.

00:41:58.400 --> 00:42:05.270
And it is going to, just like before,
we open up an MPEG-4 export component.

00:42:07.370 --> 00:42:12.100
But then I'm going to call movie export
set settings from Atom Container.

00:42:12.240 --> 00:42:13.060
Very simple.

00:42:13.310 --> 00:42:16.810
And that just sucks in those
same settings that we had before,

00:42:16.810 --> 00:42:19.840
just as if the user had
entered them themselves.

00:42:20.370 --> 00:42:25.920
And, yeah, then the important thing here
is we're doing a movie export

00:42:25.920 --> 00:42:28.120
from procedures to DataRef.

00:42:28.130 --> 00:42:33.280
And the rest of the stuff going
on in this demo is all about all

00:42:33.450 --> 00:42:37.520
of the complications involved with
pulling the data back from the

00:42:37.520 --> 00:42:38.820
screen after it's been rendered.

00:42:38.820 --> 00:42:43.100
If you're interested in that,
you can look at that some more.

00:42:43.100 --> 00:42:48.100
But it's not really the critical part of
the demo as far as the iPod is concerned.

00:42:48.140 --> 00:42:51.490
But there's that demo.

00:42:51.530 --> 00:42:53.700
Back to slides.

00:42:55.510 --> 00:42:59.320
And so with that,
I think I'm done and I'd like to

00:42:59.320 --> 00:43:02.500
bring Frank Doepke up here to talk
to you more about the video pipeline.

00:43:03.280 --> 00:43:04.500
Thank you, David.

00:43:09.230 --> 00:43:10.450
Good afternoon.

00:43:10.470 --> 00:43:12.380
I know everybody wants
to get to the beer bash,

00:43:12.380 --> 00:43:15.190
but be aware there will be plenty of
water bottles and broccoli will also be

00:43:15.190 --> 00:43:16.730
available for you who are really hungry.

00:43:18.210 --> 00:43:21.620
So I'm here to talk a little
bit about the video pipeline.

00:43:21.630 --> 00:43:23.100
You know that we-- oops, sorry.

00:43:23.100 --> 00:43:24.340
I pressed the wrong button.

00:43:24.350 --> 00:43:27.900
There we go, video pipeline.

00:43:27.900 --> 00:43:31.140
With QuickTime 7,
we opened up the pipeline for you so that

00:43:31.140 --> 00:43:35.000
you can actually access the frames before
they actually go up to the display.

00:43:35.000 --> 00:43:36.800
You're not just rendering
to a G world anymore.

00:43:36.800 --> 00:43:40.380
You can now go in and access the frames,
draw them yourselves,

00:43:40.380 --> 00:43:43.690
do all kinds of crazy
stuff with those frames.

00:43:43.970 --> 00:43:46.340
To do that, we use a visual context.

00:43:46.450 --> 00:43:47.160
And there are two.

00:43:47.160 --> 00:43:48.730
And there's been some confusion.

00:43:48.900 --> 00:43:50.680
So let me talk a little bit
about the difference between

00:43:50.730 --> 00:43:52.870
these two visual contexts.

00:43:52.980 --> 00:43:56.560
So first of all,
we have the OpenGL visual context.

00:43:56.580 --> 00:43:59.230
The frames are uploaded
as textures to the screen,

00:43:59.330 --> 00:44:02.200
and so you get a fast playback.

00:44:02.430 --> 00:44:05.760
This is when you want to render to the
screen or you want to preview a movie.

00:44:05.760 --> 00:44:10.550
That's when you use the
OpenGL Visual Context.

00:44:10.660 --> 00:44:13.400
And then we have a pixel
buffer visual context.

00:44:13.410 --> 00:44:15.660
This one is kind of like for
your off-screen rendering,

00:44:15.660 --> 00:44:19.620
when you did in the past create an
off-screen G world rendered into that.

00:44:19.630 --> 00:44:22.800
What this means actually is that
all the pixels are in main memory.

00:44:22.800 --> 00:44:24.760
And so you can access them,
do whatever you want

00:44:24.760 --> 00:44:25.680
with them in main memory.

00:44:25.680 --> 00:44:28.130
They are not uploaded
to the graphics card.

00:44:28.690 --> 00:44:34.030
And those are the two main contexts
that you actually want to use.

00:44:34.290 --> 00:44:37.700
We do have some sample code also
out on the website that shows you

00:44:37.700 --> 00:44:39.750
the differences between those two.

00:44:39.900 --> 00:44:42.170
But as you, for those who were in
the Qt Kit session heard,

00:44:42.170 --> 00:44:44.880
there's the new use actually of
the Visual Context and that is

00:44:44.980 --> 00:44:47.200
together with the Capture API.

00:44:47.300 --> 00:44:51.000
With the Capture API,
we want to replace the sequence grabber.

00:44:51.100 --> 00:44:55.650
So we have new ways of capturing
movie and actually accessing it

00:44:55.650 --> 00:44:57.600
through the Visual Context pipeline.

00:44:57.670 --> 00:44:59.590
So you don't have to deal
with G-Worlds anymore.

00:44:59.620 --> 00:45:01.690
It's much more modern interface.

00:45:01.770 --> 00:45:04.390
Tim gave you all the goodies
what we have with this part.

00:45:04.440 --> 00:45:07.800
I want to just focus on the use
together with the Visual Context.

00:45:07.910 --> 00:45:11.190
You can record from more than
one destination and also work

00:45:11.210 --> 00:45:13.680
from more than one camera.

00:45:13.870 --> 00:45:15.410
So with that,
I would like to give you a little

00:45:15.410 --> 00:45:21.540
demo of the Live Video Mixer 3
that uses the new Visual Context.

00:45:28.100 --> 00:45:38.240
So you've seen the live video
mixer in the past already and

00:45:38.240 --> 00:45:42.940
what we taught him as a new trick
here is that we have video in,

00:45:42.940 --> 00:45:47.810
so I'll just grab some video
material for the first two channels.

00:45:53.700 --> 00:45:55.700
And so I can start play this now.

00:45:55.700 --> 00:45:57.280
And you can already see me
there in the bottom of the

00:45:57.280 --> 00:45:58.940
corner where I'm actually here.

00:45:58.940 --> 00:46:02.430
So I can make now the appropriate
comments to this game of

00:46:02.430 --> 00:46:04.460
pool here in the background.

00:46:04.460 --> 00:46:07.700
So let me position myself a
little bit correctly here.

00:46:07.700 --> 00:46:09.820
So you can move it around.

00:46:11.500 --> 00:46:17.170
So I can go up into this corner and say
yes that the player is using that pointy

00:46:17.170 --> 00:46:21.380
stick to what the experts call the ball,
I think.

00:46:21.380 --> 00:46:24.570
And let's also bring in here we have,
of course, the other frame,

00:46:24.570 --> 00:46:28.000
the other camera angle
we can bring this in.

00:46:28.000 --> 00:46:32.680
And this is just using now
the new QtKit capture API.

00:46:32.680 --> 00:46:35.630
When you look into the sample code of it,
you will actually see that

00:46:35.940 --> 00:46:38.960
the rendering part of it,
I simply have to subclass my rendering

00:46:38.960 --> 00:46:42.260
of the regular movie and it looks very,
very similar.

00:46:42.260 --> 00:46:44.380
The only thing I don't have to
do is actually do the play part.

00:46:44.380 --> 00:46:49.460
So everything else for the rendering
is using the same OpenGL code for it

00:46:49.460 --> 00:46:51.640
to render these core video frames.

00:46:51.640 --> 00:46:54.050
On the step,
I would like to go back to slides,

00:46:54.050 --> 00:46:54.690
please.

00:47:00.540 --> 00:47:03.640
Next thing, you heard a lot about
Core Animation already.

00:47:03.760 --> 00:47:06.440
So Core Animation also
works great with QuickTime.

00:47:06.600 --> 00:47:10.190
You can use this for compositing and

00:47:10.370 --> 00:47:13.120
So you heard Core Animation is new
in Leopard and it makes it really,

00:47:13.120 --> 00:47:16.200
really easy to do composite and
all kinds of effects in your UI.

00:47:16.200 --> 00:47:20.600
And it really gives your
applications a new kick.

00:47:20.680 --> 00:47:24.290
And one of the things, for instance,
that was really, really tough in the

00:47:24.290 --> 00:47:26.660
past was when you had,
for instance, your movies,

00:47:26.660 --> 00:47:31.360
you want to play them in the background
of whatever you do in your application,

00:47:31.360 --> 00:47:35.640
it was very difficult to get like
AppKit controls on top of it because you

00:47:35.640 --> 00:47:39.940
used an OpenGL context and AppKit did not
work very well with that on top of it.

00:47:40.300 --> 00:47:42.860
So this has changed now
when you use Core Animation.

00:47:42.860 --> 00:47:45.500
And let me give you a little
demo of that part as well.

00:47:57.630 --> 00:48:01.360
So I have a little sample
app here that plays a movie.

00:48:01.360 --> 00:48:04.840
And what I can do now here-- so
I can actually fade that movie a

00:48:04.840 --> 00:48:06.260
little bit into the background.

00:48:06.260 --> 00:48:09.880
You see regular app kit controls
right here in the corner.

00:48:11.500 --> 00:48:13.840
We're going to play some
very saddened movie music.

00:48:13.840 --> 00:48:17.510
And we can play some funky effects
that makes us look really groovy.

00:48:19.400 --> 00:48:21.390
Our boss is very happy
about that music as well,

00:48:21.390 --> 00:48:26.560
so we seem to use some frequency levels
and let's just compose it on top of it.

00:48:27.200 --> 00:48:30.200
Of course, we can make this look a
little more spacey in general.

00:48:30.200 --> 00:48:33.720
Since it's already late in the day,
the eyes are getting a little blurry.

00:48:36.000 --> 00:48:38.640
I can also do some live
resizing with this part.

00:48:38.640 --> 00:48:40.240
And this is all done
through Core Animation.

00:48:40.240 --> 00:48:45.910
And this is almost shocking how little
code was needed to do this kind of stuff.

00:48:48.100 --> 00:48:52.190
Enough of that music.

00:48:52.190 --> 00:48:54.170
Can we go back to the slides, please?

00:48:55.260 --> 00:48:58.330
What I would like to mention
is that the Live Video Mixer

00:48:58.330 --> 00:49:02.820
3 as well as this LayerKit,
sorry, that was a little blooper there.

00:49:02.820 --> 00:49:04.300
It's actually called Core Animation now.

00:49:04.300 --> 00:49:06.750
We used to call it LayerKit,
but you find it actually

00:49:06.750 --> 00:49:08.160
under the LK QuickTime demo.

00:49:08.160 --> 00:49:10.350
They are both associated
with the session,

00:49:10.350 --> 00:49:13.970
so you can download their sample
code and already play around with it.

00:49:18.190 --> 00:49:21.340
So next we want to talk a little
bit about the performance.

00:49:21.340 --> 00:49:25.700
So I'm not under commission
based here to sell you,

00:49:25.700 --> 00:49:30.430
OK, what's the most fanciest API that you
can use that has clear code on it?

00:49:30.820 --> 00:49:34.940
We want to actually direct you
towards using the correct API.

00:49:35.050 --> 00:49:37.960
Because there's been a lot of confusion
because we have different sets of it,

00:49:37.960 --> 00:49:40.760
and what is the right
thing for me to use?

00:49:40.800 --> 00:49:43.080
So if you simply want
to play back a movie,

00:49:43.080 --> 00:49:44.940
you're fine in just using QtKit.

00:49:45.010 --> 00:49:48.220
It works in all cases,
and it will just play back your movie.

00:49:48.270 --> 00:49:50.350
You don't have access
to the video pipeline,

00:49:50.350 --> 00:49:54.380
but well, you just said,
I just want to play back that movie.

00:49:54.730 --> 00:49:57.310
If you want to have access to
the pipeline and do something a

00:49:57.310 --> 00:50:01.500
little bit more fancy with it,
you have the choice of using OpenGL.

00:50:01.530 --> 00:50:03.830
And this gives you a very
broad hardware support.

00:50:03.850 --> 00:50:08.850
Everything that runs with
Quartz Extreme can run with

00:50:08.860 --> 00:50:12.220
the Qt OpenGL Visual Context.

00:50:12.310 --> 00:50:15.160
And you can do, of course,
all the 3D stuff that everybody does.

00:50:15.200 --> 00:50:17.060
But you can also use it
just for compositing.

00:50:17.060 --> 00:50:18.930
That's what I've shown
in the live video mixer.

00:50:19.020 --> 00:50:20.590
And you see you can also use masks.

00:50:20.650 --> 00:50:24.090
So you can get some really
interesting even video compositing

00:50:24.160 --> 00:50:25.620
effects done just in OpenGL.

00:50:25.620 --> 00:50:28.000
And it's actually not really too hard.

00:50:28.030 --> 00:50:29.620
And then, of course, we have Core Image.

00:50:29.650 --> 00:50:32.560
As David already showed in his example,
it's very simple to use

00:50:32.560 --> 00:50:34.460
some very easy effects.

00:50:34.560 --> 00:50:37.610
And also together with Core Animation,
you have some really

00:50:37.610 --> 00:50:39.150
nice effect machinery.

00:50:39.220 --> 00:50:43.410
There are plenty of plugins also
available to extend this machinery,

00:50:43.410 --> 00:50:46.570
but you need, of course,
Core Image capable hardware.

00:50:46.750 --> 00:50:52.070
And every product actually that
Apple ships today has the support for

00:50:52.650 --> 00:50:54.920
Core Image right on the graphics card.

00:50:54.920 --> 00:50:57.260
You can also, of course,
use Core Image on the CPU,

00:50:57.260 --> 00:51:00.740
but you might not get the performance
that you actually expected.

00:51:03.090 --> 00:51:07.130
Now, when we talk about performance,
the important part is actually to

00:51:07.130 --> 00:51:10.500
look at how can we measure or look
at the performance in the moment

00:51:10.500 --> 00:51:14.400
when we actually have a playback
problem that we are dropping frames.

00:51:14.400 --> 00:51:14.740
Why?

00:51:14.760 --> 00:51:17.850
So there are, of course,
the OpenGL tools.

00:51:17.850 --> 00:51:20.880
For those who deal with OpenGL,
you're definitely familiar with it

00:51:20.880 --> 00:51:22.780
using the profiler and the debugger.

00:51:22.780 --> 00:51:24.930
But we also have an old friend,
Quartz Debug,

00:51:24.970 --> 00:51:26.520
that learned some new tricks.

00:51:26.970 --> 00:51:28.980
Because Quartz Debug allows
you now to look into what

00:51:28.980 --> 00:51:30.280
you can do with Core Image.

00:51:30.280 --> 00:51:33.730
It actually shows you what's
going on in your CI context.

00:51:33.780 --> 00:51:36.540
You can actually see which
filters are actually applied so

00:51:36.550 --> 00:51:38.270
that there's no surprises there.

00:51:38.320 --> 00:51:42.620
And you can actually judge
how long did a filter take.

00:51:42.680 --> 00:51:47.760
So that is important for you because not
every filter has the same complexity.

00:51:47.870 --> 00:51:50.690
So when it runs on the graphic card,
some of them take definitely more

00:51:50.690 --> 00:51:54.100
resources and take definitely longer,
and that can cause you to drop frames.

00:51:54.160 --> 00:51:56.800
Of course, the image size has
something to do with it.

00:51:56.800 --> 00:51:59.040
So you need to judge that.

00:51:59.080 --> 00:52:02.220
And just to show you actually
how to use Quartz Debug,

00:52:02.220 --> 00:52:03.850
I would like to give you
a short demo of that.

00:52:10.000 --> 00:52:16.900
[Transcript missing]

00:52:19.420 --> 00:52:20.940
Again, our CR Video Demo GL.

00:52:20.940 --> 00:52:23.550
I changed a little bit to use
just a very simple filter here,

00:52:23.550 --> 00:52:26.840
and that is a CPR tone filter.

00:52:26.840 --> 00:52:30.080
And let me launch Quartz Debug now.

00:52:31.560 --> 00:52:35.810
What you don't see because unfortunately
we can't mirror here is I go into the

00:52:35.880 --> 00:52:39.170
tools menu and show the window list.

00:52:39.530 --> 00:52:43.170
And then I get a list actually
that you see right here of all the

00:52:43.170 --> 00:52:45.430
clients that are actually running.

00:52:45.490 --> 00:52:49.160
So now I have to actually
glance a little bit here.

00:52:49.360 --> 00:52:52.830
So this is my CR Video Demo
GL and I can actually see what's

00:52:52.830 --> 00:52:54.060
happening in that context.

00:52:54.060 --> 00:52:58.060
So let me just actually step
through a few frames here.

00:52:59.140 --> 00:53:00.890
And I can see actually
what did render here.

00:53:00.940 --> 00:53:05.110
So now I can open this context and...

00:53:05.290 --> 00:53:10.430
On the bottom part I can see, okay,
this was the filter that rendered.

00:53:10.440 --> 00:53:14.640
When I look at the performance side,
I can actually see when I start

00:53:14.670 --> 00:53:18.310
sampling and render a few frames.

00:53:23.300 --> 00:53:24.610
I should be able to see some time.

00:53:24.710 --> 00:53:25.900
Actually, there we go.

00:53:26.020 --> 00:53:29.540
You can see the accumulated time
actually that was used by that filter

00:53:29.540 --> 00:53:31.800
during the time that you were sampling.

00:53:31.800 --> 00:53:33.440
You can see how many
pixels ran through it.

00:53:33.440 --> 00:53:35.080
There seems to be a little problem here.

00:53:35.100 --> 00:53:39.980
I have no numbers,
but technically it would work.

00:53:39.980 --> 00:53:44.300
And you can actually
see also the throughput,

00:53:44.300 --> 00:53:46.010
which is important for you to
know how many megapixels per

00:53:46.010 --> 00:53:46.010
second actually ran through this.

00:53:46.740 --> 00:53:50.070
So this is new in Quartz debug on Leopard
and this is a great tool for you to find

00:53:50.070 --> 00:53:53.530
out when you use Core Image actually
what is really the performance hit

00:53:53.580 --> 00:53:55.690
that I take when I use some filters.

00:53:55.700 --> 00:53:59.700
And with that I would like to
go back to the slides please.

00:53:59.700 --> 00:54:00.700
Thank you.

00:54:06.800 --> 00:54:08.580
So those are the tools.

00:54:08.650 --> 00:54:11.400
Somebody's falling over there.

00:54:11.430 --> 00:54:14.260
But there's no substitute
for actual testing.

00:54:14.280 --> 00:54:17.990
If you target a specific hardware,
you need to test on it.

00:54:18.100 --> 00:54:21.280
So there's a lot of differences
actually in the capabilities of the GPU,

00:54:21.300 --> 00:54:22.980
meaning the graphic cards.

00:54:23.010 --> 00:54:25.690
There's a lot of differences
also in what the CPU can do.

00:54:25.780 --> 00:54:30.180
And now that we have also both platforms,
we definitely have to look into that.

00:54:30.210 --> 00:54:34.060
And those are the main components
that definitely impact how

00:54:34.190 --> 00:54:37.330
quickly frames get decoded,
how quickly they can get rendered,

00:54:37.340 --> 00:54:38.420
and which filters.

00:54:38.420 --> 00:54:40.840
You want to take that call?

00:54:40.850 --> 00:54:41.410
Okay, thanks.

00:54:44.580 --> 00:54:49.260
Then of course there are
memory considerations as well.

00:54:49.320 --> 00:54:52.120
When you have low memory,
you will not be able to hold as

00:54:52.120 --> 00:54:55.040
many frames in memory and that
definitely drops your performance.

00:54:55.110 --> 00:54:58.610
And if you run multiple streams,
the disk performance is

00:54:58.610 --> 00:55:01.040
also very important because
when your hard disk is slow,

00:55:01.040 --> 00:55:02.800
you will not be able to
access that many frames.

00:55:02.800 --> 00:55:06.090
So you have to look also like
in sampling those parts in your

00:55:06.090 --> 00:55:08.370
application when you run into this.

00:55:08.620 --> 00:55:10.930
Now, saying that you have to test
on all these configurations,

00:55:10.930 --> 00:55:13.110
I mean, of course,
I encourage you to buy every single

00:55:13.110 --> 00:55:14.800
computer that you can get your hands on.

00:55:14.820 --> 00:55:16.760
But to make it a little
bit easier for you,

00:55:16.760 --> 00:55:19.240
we also have the compatibility
lab in Cupertino.

00:55:19.240 --> 00:55:22.600
And for all the ADC Premier and
Select members that can go there,

00:55:22.600 --> 00:55:23.980
there are some free
cookies that are here.

00:55:23.980 --> 00:55:26.560
And they can test on every configuration.

00:55:26.560 --> 00:55:29.670
And then you know at least, well,
before I ship it to my customer,

00:55:29.740 --> 00:55:30.530
it is running.

00:55:30.540 --> 00:55:32.680
So come to Cupertino.

00:55:32.680 --> 00:55:35.180
It's actually much warmer than
it is here in the city right now.

00:55:38.240 --> 00:55:41.830
Let's summarize of what we really want
you to take away from this presentation.

00:55:41.860 --> 00:55:48.340
First of all,
Quartz Composer loves QuickTime and

00:55:48.340 --> 00:55:50.330
QuickTime loves Quartz Composer.

00:55:50.340 --> 00:55:53.700
So do some creative things by
mixing those together and create

00:55:53.700 --> 00:55:56.660
some new material that you actually
have not never done before.

00:55:56.660 --> 00:56:00.190
So that opens up really new
alleys and fancy movies.

00:56:00.260 --> 00:56:02.890
Then of course look at the tags.

00:56:02.890 --> 00:56:06.180
So you saw we really want the
chocolate of the Cocchione.

00:56:06.960 --> 00:56:07.920
Leave the crumbs out.

00:56:07.930 --> 00:56:10.500
So make sure that you only
get the clean aperture.

00:56:10.500 --> 00:56:13.460
And then of course circles
deserve to be circles.

00:56:13.460 --> 00:56:15.380
Make sure that you get
your aspect ratio right.

00:56:15.380 --> 00:56:18.740
Otherwise things look stretched
and we don't want that.

00:56:19.170 --> 00:56:22.690
Then as David said, there's a new order,
so frames can be not in linear

00:56:22.690 --> 00:56:24.280
order in your files anymore.

00:56:24.280 --> 00:56:26.800
For that,
make sure that you use the latest APIs.

00:56:26.800 --> 00:56:30.400
Use the compression session,
the decompression session APIs.

00:56:30.400 --> 00:56:35.220
Sequences are outdated, and TV as well,
and API as well.

00:56:35.820 --> 00:56:38.120
And then of course,
look at all the new things

00:56:38.120 --> 00:56:38.990
that we have in Neppert.

00:56:39.020 --> 00:56:41.300
Play around with the QtKit part.

00:56:41.300 --> 00:56:43.440
Play around also with the core animation.

00:56:43.470 --> 00:56:48.430
And QuickTime is a great mix in media
that you can use with those kind of

00:56:48.430 --> 00:56:51.410
new technologies that we have there.

00:56:55.790 --> 00:56:58.830
As Ken already mentioned
in the beginning,

00:56:58.830 --> 00:57:01.670
QuickTime has already some
years under its belt and

00:57:01.670 --> 00:57:03.540
therefore it has lots of APIs.

00:57:03.640 --> 00:57:06.430
Some of them are not really
the ones that we want you to

00:57:06.430 --> 00:57:08.080
use in today's application.

00:57:08.280 --> 00:57:11.540
They will work,
but they are not as good anymore.

00:57:11.650 --> 00:57:16.690
So use the modern interfaces and
please move away from G-Worlds.

00:57:17.150 --> 00:57:20.950
QuickTime had used a lot of
QuickDraw stuff in the past,

00:57:20.950 --> 00:57:22.400
but that is the past.

00:57:22.490 --> 00:57:25.530
QuickDraw is deprecated,
so you really want to move away

00:57:25.590 --> 00:57:27.530
from G-Worlds wherever you can.

00:57:28.020 --> 00:57:29.880
Now,
where do you find modern sample codes?

00:57:29.910 --> 00:57:34.900
You can go to our website and Ed Agarberg
was great in writing some very simple

00:57:34.900 --> 00:57:39.140
but down to the point sample codes
that help you to use all the new stuff.

00:57:39.350 --> 00:57:41.400
Then, of course,
look at the live video mixer.

00:57:41.590 --> 00:57:44.640
Look also at the CR Video Demo
GL that we have on your lab red disk

00:57:44.640 --> 00:57:46.780
and you can play around with those.

00:57:46.780 --> 00:57:50.100
Those are really the best
practices as we can suggest today.

00:57:51.890 --> 00:57:55.160
Now, since there is so much in QuickTime,
I know that a lot of you go out and find,

00:57:55.160 --> 00:57:59.300
okay, I need to do this and let me
Google basically for some specific stuff.

00:57:59.300 --> 00:58:01.730
And, well,
you find some sample code and that

00:58:01.730 --> 00:58:04.190
might not be really appropriate anymore.

00:58:04.200 --> 00:58:06.940
So, if you see some sample code
that's been written and it

00:58:06.940 --> 00:58:09.850
starts with like 19-something,
that might be a little

00:58:09.850 --> 00:58:10.960
bit outdated already.

00:58:10.960 --> 00:58:13.180
If it's written in Pascal,
I would definitely stay

00:58:13.180 --> 00:58:14.400
away from that already.

00:58:15.400 --> 00:58:18.720
If it was targeted for something
that we had before OS X,

00:58:18.720 --> 00:58:20.560
yeah, stay away from those.

00:58:20.560 --> 00:58:24.450
Those might not drag you into
the correct stuff anymore by,

00:58:24.450 --> 00:58:26.960
well, because they simply didn't
know about our new APIs.