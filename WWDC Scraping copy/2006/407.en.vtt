WEBVTT

00:00:13.220 --> 00:00:16.780
All right, ladies and gentlemen,
thank you all for coming today.

00:00:16.980 --> 00:00:20.130
Good to see you up bright
and early in the morning.

00:00:21.850 --> 00:00:22.820
I'm up awake.

00:00:22.830 --> 00:00:26.350
We are going to be talking about Bonjour,
and we're going to be talking

00:00:26.350 --> 00:00:27.520
about four things today.

00:00:27.550 --> 00:00:30.920
We'll start off with a recap,
because I'm sure most of you in

00:00:30.920 --> 00:00:33.680
the audience know what Bonjour is,
but not all of you will know

00:00:33.680 --> 00:00:35.120
the details of how it works.

00:00:35.280 --> 00:00:36.960
So we'll start with that.

00:00:36.980 --> 00:00:42.220
Then I'm going to tell you about
what's new in Leopard and other news.

00:00:42.230 --> 00:00:43.680
I'll show a few demos.

00:00:43.800 --> 00:00:46.460
I know you all expect by now
to see a few cool demo toys,

00:00:46.580 --> 00:00:48.240
and I won't be disappointing you.

00:00:48.240 --> 00:00:51.880
And then I'm finally going to run
through setting up wide very bonjour,

00:00:51.880 --> 00:00:54.690
because that's the question we get a lot.

00:00:55.790 --> 00:00:58.380
So, the recap.

00:00:58.680 --> 00:01:07.620
Bonjour is about using TCP/IP and
Ethernet and Airport 802.11 Wireless,

00:01:07.630 --> 00:01:11.300
but with the ease of use
that we expect of USB.

00:01:11.340 --> 00:01:15.610
Ethernet cables can be 100 meters
long instead of 5 meters with USB.

00:01:15.690 --> 00:01:18.240
You can connect hundreds or
thousands of devices to Ethernet.

00:01:18.340 --> 00:01:20.180
The speeds go up to gigabit.

00:01:20.430 --> 00:01:23.360
Clearly, there are big benefits there.

00:01:23.420 --> 00:01:28.850
By solving the ease of use,
we make that possible to use Ethernet

00:01:28.850 --> 00:01:33.970
really as a viable substitute for
products that today would use USB or

00:01:33.970 --> 00:01:36.650
FireWire or Bluetooth or IRDA.

00:01:37.320 --> 00:01:38.900
So why Bonjour?

00:01:38.980 --> 00:01:42.530
We want to make network
products that are a joy to use,

00:01:42.720 --> 00:01:44.200
not a frustration.

00:01:44.220 --> 00:01:46.900
And I have a real story
to tell you today.

00:01:47.050 --> 00:01:51.970
A friend of mine bought a USB printer,
wanted to put it on the network because

00:01:52.030 --> 00:01:56.470
he has more than one computer at home,
and he was in Fry's Electronics,

00:01:56.670 --> 00:02:00.800
and he saw the Apple Airport Express base
station was there for $130,

00:02:00.920 --> 00:02:04.120
but next to it was another
company's print server for $80.

00:02:04.120 --> 00:02:06.880
And he told me afterwards
he felt really foolish.

00:02:06.910 --> 00:02:08.060
He said he should know better.

00:02:08.250 --> 00:02:08.960
He knows me.

00:02:09.010 --> 00:02:10.600
He knows about Bonjour.

00:02:10.640 --> 00:02:15.080
But he bought the $80 one.

00:02:15.460 --> 00:02:17.300
I'm not going to name the company.

00:02:17.320 --> 00:02:19.320
Don't want to be picking on
anybody in particular here.

00:02:19.330 --> 00:02:23.400
But it took him five hours
to get this thing set up.

00:02:23.400 --> 00:02:27.310
And he went through-- well, for a start,
it had a wizard that

00:02:27.310 --> 00:02:28.180
only runs on Windows.

00:02:28.320 --> 00:02:31.400
So he runs his Windows machine,
and he goes through all the steps.

00:02:31.400 --> 00:02:35.910
And first thing it does is destroy
all of his network settings and

00:02:35.910 --> 00:02:37.880
change them to something else.

00:02:37.880 --> 00:02:42.660
And then he goes through all the steps,
and the screen says, failed.

00:02:42.670 --> 00:02:45.090
Maybe you have a firewall.

00:02:45.840 --> 00:02:50.160
So he thinks, well, I do have a firewall.

00:02:50.160 --> 00:02:52.110
I don't see why it would
block outgoing connections,

00:02:52.210 --> 00:02:53.230
but maybe.

00:02:53.240 --> 00:02:53.740
Maybe.

00:02:53.740 --> 00:02:57.380
So he disables the firewall
and does the whole thing again.

00:02:57.380 --> 00:02:59.300
And it still says failed.

00:02:59.300 --> 00:03:02.200
And this guy's a smart guy.

00:03:02.200 --> 00:03:04.920
His time is worth more than $10 an hour.

00:03:04.930 --> 00:03:06.860
So why did he buy this product?

00:03:06.860 --> 00:03:10.000
And I think partly it's
because we're all optimists.

00:03:10.070 --> 00:03:13.080
To use computer products today,
you really have to be an optimist.

00:03:13.080 --> 00:03:16.100
You have to be expecting
things to go well.

00:03:16.100 --> 00:03:21.100
And at no point in that setup wizard did
it tell him-- they should have signs,

00:03:21.110 --> 00:03:24.690
like when you're at Disneyland,
that says, only five more hours

00:03:24.690 --> 00:03:26.500
to go from this point.

00:03:28.120 --> 00:03:31.870
But of course, they don't even know that,
because they don't know how many

00:03:31.960 --> 00:03:35.370
dead ends and failures and reboots
and restarts and uninstalls and

00:03:35.370 --> 00:03:40.000
reinstalls you're going to go
through before you get it to work.

00:03:40.040 --> 00:03:42.160
So after spending five
hours getting it set up,

00:03:42.160 --> 00:03:44.000
he then wanted to print from his Mac.

00:03:44.150 --> 00:03:46.880
And in the 300-page manual,
there was nothing about the Mac,

00:03:47.060 --> 00:03:51.020
but he went on the web and he
found this 11-page addendum for

00:03:51.220 --> 00:03:53.000
how to set it up with the Mac.

00:03:53.040 --> 00:03:58.000
And it just goes on, page after page,
little circles and arrows,

00:03:58.000 --> 00:04:02.750
and click the plus button, and type in.

00:04:02.730 --> 00:04:06.970
L1 for the name, and L1 for the queue,
and L1 for the location,

00:04:07.090 --> 00:04:09.300
and on and on and on.

00:04:09.300 --> 00:04:11.520
And then you have to
click Installable Options.

00:04:11.530 --> 00:04:14.980
And then you have to go and edit the
name and location you just set up.

00:04:15.000 --> 00:04:21.470
The location has to be the IP address
with IP underscore at the start of it.

00:04:21.670 --> 00:04:23.240
You have to give it a manual IP address.

00:04:23.330 --> 00:04:26.840
The device doesn't do DHCP,
because if it did DHCP,

00:04:26.840 --> 00:04:29.190
it would get a random address each time.

00:04:29.230 --> 00:04:32.740
And then how would you know
what address to print to?

00:04:32.810 --> 00:04:36.320
So the user of this has got to
understand IP addresses and subnets.

00:04:36.340 --> 00:04:39.390
And they've got to know how to assign
an address that's on their subnet,

00:04:39.390 --> 00:04:42.730
but not one that's going to be
assigned by their DHCP server.

00:04:42.930 --> 00:04:45.270
This is just horrible.

00:04:45.550 --> 00:04:48.970
This company is torturing
their customers.

00:04:49.200 --> 00:04:50.540
They won't put up with it forever.

00:04:50.780 --> 00:04:56.200
So when he called me about 11
o'clock and gave me this tale of woe,

00:04:56.200 --> 00:05:00.480
I decided,
out of honest scientific curiosity,

00:05:00.490 --> 00:05:02.760
to go and see what the
Apple experience would be.

00:05:02.760 --> 00:05:11.300
I took my AirPort Express,
and we went around to his house,

00:05:11.300 --> 00:05:13.830
plugged it in.

00:05:13.830 --> 00:05:13.830
I went file print in Safari, and

00:05:14.080 --> 00:05:16.500
So no printer selected.

00:05:16.530 --> 00:05:21.680
I joined the right airport network,
and there's the printer.

00:05:21.720 --> 00:05:23.940
Total time from plugging
in to the paper coming out,

00:05:24.000 --> 00:05:27.050
90 seconds.

00:05:30.260 --> 00:05:31.780
He said, well, what about Windows?

00:05:31.790 --> 00:05:33.640
We downloaded Bonjour for Windows.

00:05:33.640 --> 00:05:35.140
No restart required.

00:05:35.140 --> 00:05:36.440
Ran the printer setup wizard.

00:05:36.490 --> 00:05:37.760
Found the printer.

00:05:37.770 --> 00:05:42.100
Total time from download to paper
coming out of the printer-- 90 seconds.

00:05:42.410 --> 00:05:46.000
So it took him three minutes to get
this thing working on Mac and Windows.

00:05:46.190 --> 00:05:51.170
So that's the lesson for all of you
here making hardware products and

00:05:51.170 --> 00:05:54.090
software products that do networking.

00:05:54.480 --> 00:06:00.680
The status quo may have been acceptable
to computer geeks in the past,

00:06:00.780 --> 00:06:02.420
but it is a brick wall.

00:06:02.420 --> 00:06:07.890
It's a barrier to growing this
market to a larger audience.

00:06:08.410 --> 00:06:09.330
So this is the goal.

00:06:09.340 --> 00:06:10.420
We all know what we want.

00:06:10.420 --> 00:06:14.180
And there are products out there
today that demonstrate that.

00:06:14.220 --> 00:06:18.040
How do you achieve this
in your network products?

00:06:18.070 --> 00:06:20.480
There are three technologies,
and they're intentionally very,

00:06:20.480 --> 00:06:21.230
very simple.

00:06:21.260 --> 00:06:25.500
I won't go into them in great detail,
because we've covered that in

00:06:25.500 --> 00:06:28.180
previous WWDC presentations.

00:06:28.290 --> 00:06:31.650
But the summary is,
link local addressing gets

00:06:31.660 --> 00:06:35.140
your device an address,
even if there isn't a DHCP server,

00:06:35.160 --> 00:06:38.180
or it's misconfigured or defective.

00:06:38.230 --> 00:06:42.100
Multicast DNS lets you look at
names when there isn't a DNS server,

00:06:42.230 --> 00:06:43.640
or it's misconfigured.

00:06:43.690 --> 00:06:47.750
Or maybe there is a DNS server,
but you as the user don't have access

00:06:47.750 --> 00:06:52.260
to actually be editing the configuration
and putting names into that DNS.

00:06:52.290 --> 00:06:55.640
And then the third layer
is service discovery,

00:06:55.680 --> 00:06:58.720
where you don't even have to know
the name of the device in advance,

00:06:58.780 --> 00:07:01.040
because you can browse
the network and say,

00:07:01.060 --> 00:07:02.440
I want to print.

00:07:02.570 --> 00:07:05.700
Who out there can give me that service?

00:07:09.530 --> 00:07:13.900
From a software perspective,
if you're writing applications,

00:07:13.920 --> 00:07:16.660
if you are offering a
service on the network,

00:07:16.690 --> 00:07:19.900
you use the Bonjour operation
register--DNS service,

00:07:19.900 --> 00:07:24.290
register service--and that
advertises your service on the

00:07:24.290 --> 00:07:26.250
network so that clients can find it.

00:07:26.500 --> 00:07:28.400
On the client side,
you have two operations.

00:07:28.400 --> 00:07:32.380
You browse to get the list of services,
and when the user picks one,

00:07:32.380 --> 00:07:36.460
you resolve to translate that
name service into its current

00:07:36.460 --> 00:07:38.400
IP address and port number.

00:07:38.540 --> 00:07:41.850
In a world of DHCP and
self-assigned link local addresses,

00:07:41.920 --> 00:07:44.480
addresses can change,
and that's why resolve

00:07:44.480 --> 00:07:47.110
is a separate step,
because the name stays the same,

00:07:47.120 --> 00:07:49.380
but the address may
change from day to day.

00:07:51.790 --> 00:07:54.310
So we have two flavors of Bonjour.

00:07:54.340 --> 00:07:58.180
We have the LinkLocal
Bonjour and the WideArea Bonjour.

00:07:58.190 --> 00:08:01.020
What characterizes the
LinkLocal Bonjour is that

00:08:01.020 --> 00:08:02.660
it's absolutely bulletproof.

00:08:02.680 --> 00:08:05.450
There is nothing to configure,
so it can't go wrong.

00:08:05.580 --> 00:08:06.540
It's your safety net.

00:08:06.540 --> 00:08:09.880
When all of the networking is broken,
Bonjour is there.

00:08:09.890 --> 00:08:12.920
And if your device is
configured through a web page,

00:08:12.930 --> 00:08:16.270
it's the bootstrap that lets the
user get to it to configure it

00:08:16.280 --> 00:08:18.700
to fix whatever the problem is.

00:08:18.730 --> 00:08:22.920
WideArea Bonjour uses
exactly the same register,

00:08:22.920 --> 00:08:27.300
browse,
resolve APIs that you use with LinkLocal.

00:08:27.330 --> 00:08:31.560
But by using a DNS server as
a central aggregation point,

00:08:31.570 --> 00:08:36.540
it scales beyond the physical link
to quite literally the entire planet.

00:08:36.550 --> 00:08:39.480
Last year when I was in London and
I was collaborating on some

00:08:39.480 --> 00:08:42.860
documents with Mark Krockmull,
we used SubEtherEdit,

00:08:42.860 --> 00:08:44.920
the multi-user document editor.

00:08:44.940 --> 00:08:48.770
And we were 5,000 miles apart,
but our shared documents appeared

00:08:48.770 --> 00:08:51.820
in each other's Bonjour list because
it was using WideArea Bonjour.

00:08:52.050 --> 00:08:56.730
And that was the standard SubEtherEdit
unmodified inheriting the benefits of

00:08:56.730 --> 00:08:59.790
WideArea Bonjour through the same APIs.

00:09:03.010 --> 00:09:08.140
By now, Bonjour is something
that's readily available.

00:09:08.140 --> 00:09:11.000
It's not something off in the
future the way it was when we

00:09:11.000 --> 00:09:13.280
first announced it four years ago.

00:09:13.290 --> 00:09:16.740
It's been on Mac OS for several releases.

00:09:16.740 --> 00:09:19.980
Bonjour for Windows is
on its fourth release.

00:09:20.120 --> 00:09:24.120
There are Apple and other open
source third-party implementations

00:09:24.120 --> 00:09:25.800
for the Unix platforms.

00:09:25.830 --> 00:09:29.360
There are new implementations
for little embedded devices.

00:09:29.360 --> 00:09:33.820
And you can get Apple source
code from Darwin and use

00:09:33.820 --> 00:09:36.810
that for whatever you want.

00:09:37.800 --> 00:09:43.100
In terms of Apple software,
if it does networking, it uses Bonjour.

00:09:43.160 --> 00:09:47.610
And it has become so much woven
into the Apple DNA now that nobody

00:09:47.880 --> 00:09:52.100
would consider making a networking
product that didn't use Bonjour.

00:09:52.100 --> 00:09:55.870
When somebody talks about networking,
they don't have to say TCP and

00:09:55.870 --> 00:09:58.250
IP and ARP and Ethernet,
and they don't have

00:09:58.250 --> 00:09:59.770
to say Bonjour either.

00:10:01.120 --> 00:10:02.760
Lots and lots of third-party products.

00:10:02.760 --> 00:10:04.920
I haven't tried to list all of them,
but just a selection of

00:10:04.920 --> 00:10:06.200
some of my favorites.

00:10:06.310 --> 00:10:09.430
Toast will share your
DVD burner over the network.

00:10:09.440 --> 00:10:11.730
So from any machine,
you can burn to any other

00:10:11.740 --> 00:10:14.140
machine's DVD burner.

00:10:14.250 --> 00:10:18.260
SubEtherEdit-- really, really excellent
multi-user document editor.

00:10:18.270 --> 00:10:23.200
And the real cleverness there is how
they solved user interface issues

00:10:23.200 --> 00:10:26.740
of having multiple people editing
simultaneously so that as I'm typing,

00:10:26.740 --> 00:10:29.000
you can be correcting
my spelling mistakes.

00:10:29.040 --> 00:10:32.750
Bonjour is really just a tiny,
tiny aspect of that product.

00:10:32.980 --> 00:10:36.910
But in many ways,
it's kind of the lubricant in the

00:10:36.910 --> 00:10:41.700
machinery without which it would be
much harder to make the wheels turn.

00:10:45.950 --> 00:10:50.720
When it comes to hardware, obviously,
desktop Macs, laptop Macs,

00:10:50.920 --> 00:10:54.080
Apple base stations,
anything Apple does that has

00:10:54.170 --> 00:10:56.140
TCP/IP networking does Bonjour.

00:10:56.140 --> 00:10:59.620
And if Apple brings out future
products that do networking,

00:10:59.620 --> 00:11:01.440
you can be sure they'll
do Bonjour as well.

00:11:01.660 --> 00:11:05.720
When it comes to third-party products,
every printer from every

00:11:05.720 --> 00:11:09.460
major printer manufacturer,
if it does networking, it does Bonjour.

00:11:09.510 --> 00:11:10.690
We have network cameras.

00:11:10.870 --> 00:11:11.940
We have home gateways.

00:11:11.940 --> 00:11:15.000
I'm going to show you one today.

00:11:15.020 --> 00:11:18.340
all of these products you've
probably seen yourself

00:11:19.560 --> 00:11:25.380
If you are advertising or
discovering a network protocol,

00:11:25.380 --> 00:11:29.740
you should register that type at
dnssd.org to make sure that it's

00:11:29.740 --> 00:11:31.050
unique and no one else uses it.

00:11:31.080 --> 00:11:32.260
And this is just a sample.

00:11:32.260 --> 00:11:36.180
Last time I looked, there were over 300
service types in that list.

00:11:36.300 --> 00:11:40.010
Some of them are very widely used,
like HTTP is implemented and

00:11:40.010 --> 00:11:44.060
advertised by lots of devices
that have web servers in them.

00:11:44.130 --> 00:11:45.840
Some of them are very specific.

00:11:45.890 --> 00:11:50.890
A multiplayer game where your program
is the only implementation of that game,

00:11:50.890 --> 00:11:54.370
you have a service type there
that's exclusive to you and

00:11:54.370 --> 00:11:56.100
only used by your client.

00:11:56.760 --> 00:11:58.830
So here's an example.

00:11:58.890 --> 00:12:06.960
There's an open source software voice
over IP PBX program called Asterisk,

00:12:06.960 --> 00:12:10.330
which is very popular on Linux and OS X.

00:12:10.520 --> 00:12:16.300
And the latest version of Asterisk
advertises its settings using Bonjour.

00:12:16.320 --> 00:12:19.020
And there's a tool I'm showing
you here called John's Phone Tool,

00:12:19.050 --> 00:12:21.320
which is a dialer that runs on the Mac.

00:12:21.330 --> 00:12:24.900
And this is the original
screen where you set it up.

00:12:24.930 --> 00:12:28.500
You have to put in the IP address
and the core idea and the context.

00:12:28.500 --> 00:12:31.400
And I don't know what
any of that stuff means.

00:12:31.440 --> 00:12:35.770
Well, in the latest version,
there's a tab, Automatic Configuration.

00:12:35.940 --> 00:12:37.900
When you click that,
it just all goes away.

00:12:37.920 --> 00:12:39.390
You click on the menu.

00:12:39.410 --> 00:12:42.680
It shows you the list of available
Asterisk servers on the network.

00:12:42.720 --> 00:12:46.020
And from the text record
advertised by those servers,

00:12:46.040 --> 00:12:48.380
it auto-configures all
the necessary parameters.

00:12:48.380 --> 00:12:52.570
So all you need is a username, password,
pick the server, and you're connected.

00:12:52.780 --> 00:12:58.740
Now, on a desktop machine with
a keyboard and a mouse,

00:12:58.780 --> 00:13:03.960
configuring complicated stuff is a pain,
but it's not impossible.

00:13:05.580 --> 00:13:10.180
This thing looks like a cell phone,
but it's actually not a cell phone.

00:13:10.450 --> 00:13:14.660
It's a 802.11 Wi-Fi phone.

00:13:14.720 --> 00:13:19.600
And this uses the standard voice over
IP protocols that asterisk support.

00:13:19.650 --> 00:13:23.700
And configuring IP addresses and subnet
masks and all that nonsense on this

00:13:23.820 --> 00:13:26.010
little keyboard is next to impossible.

00:13:26.150 --> 00:13:33.760
So Hitachi are going to be shipping the
next model of this phone with Bonjour.

00:13:33.820 --> 00:13:36.640
And there's a lot of demand
from their resellers in Europe,

00:13:36.640 --> 00:13:40.190
actually, for this one, the WIP5000,
that they're sick of the

00:13:40.190 --> 00:13:41.040
pain of setting it up.

00:13:41.190 --> 00:13:45.490
So we may even see a firmware
update to add Bonjour to this phone.

00:13:50.010 --> 00:13:52.540
So now some reminders for developers.

00:13:52.610 --> 00:13:55.450
Common mistakes we see.

00:13:55.710 --> 00:13:57.480
Link local addressing
is really important.

00:13:57.640 --> 00:14:02.340
Time and time again, we hear people say,
we love Bonjour, we love the discovery,

00:14:02.340 --> 00:14:04.990
we love the browsing,
but our customers will

00:14:04.990 --> 00:14:06.780
always have a DHCP server.

00:14:06.820 --> 00:14:11.580
And the problem there
is the optimism again.

00:14:11.620 --> 00:14:13.860
We're assuming everything will go right.

00:14:13.900 --> 00:14:16.680
And when things don't go right,
that's when the customer

00:14:16.680 --> 00:14:19.440
gets really frustrated,
and that's when it's most important

00:14:19.790 --> 00:14:22.840
that we do everything that we
can to help things go smoothly

00:14:22.840 --> 00:14:25.190
and get them out of that mess.

00:14:25.250 --> 00:14:28.500
IPv6 has link local addressing
as part of the standard protocol.

00:14:28.500 --> 00:14:32.180
So if you do v6,
you almost certainly have that for free.

00:14:32.220 --> 00:14:37.410
I realize a lot of hardware devices
today don't support IPv6 yet

00:14:37.410 --> 00:14:39.990
for memory resource constraints.

00:14:40.150 --> 00:14:44.150
So if you only do v4,
then do IPv4 link local addressing.

00:14:44.420 --> 00:14:47.500
And it really isn't as hard, I think,
as people imagine.

00:14:47.500 --> 00:14:53.020
And here is one example of how
you might do just a quick and

00:14:53.020 --> 00:14:55.840
dirty link local addressing,
good enough to be a safety net

00:14:56.150 --> 00:14:58.100
to get the device on the network.

00:14:58.130 --> 00:15:03.520
Take your standard DHCP client code,
but make it time out after five seconds.

00:15:03.570 --> 00:15:08.220
So it says discover, discover, discover,
no answer from the server.

00:15:08.220 --> 00:15:09.940
Well, it pretends there was an answer.

00:15:09.940 --> 00:15:13.120
You just build a fake
ACK packet in memory,

00:15:13.140 --> 00:15:18.810
put a random address in the packet,
and pass it back up to the stack and say,

00:15:18.810 --> 00:15:21.280
yes, I got an address from the server.

00:15:21.280 --> 00:15:26.700
And the high levels of the stack
will then configure that address.

00:15:26.700 --> 00:15:30.880
If it's a proper implementation of DHCP,
it will check using ARP to make

00:15:30.880 --> 00:15:33.000
sure that address is not in use.

00:15:33.000 --> 00:15:36.260
And if it finds it's in use,
it will send a DHCP decline

00:15:36.280 --> 00:15:38.720
to the server saying,
bad address, give me a different one.

00:15:38.790 --> 00:15:41.640
Well, for link local address,
you can make the decline a no-op because

00:15:41.640 --> 00:15:43.640
you have no server to send it to.

00:15:43.640 --> 00:15:45.680
You just go back around
the loop and try again.

00:15:45.690 --> 00:15:48.900
Discover, discover, discover, time out,
pick a new random address.

00:15:48.900 --> 00:15:52.120
And developers sometimes
ask how long this will take.

00:15:52.170 --> 00:15:54.440
They're worried it might take
a long time to get an address.

00:15:54.530 --> 00:15:57.940
But remember,
there are 65,000 link local addresses,

00:15:57.940 --> 00:16:00.060
and typically two devices on the network.

00:16:00.100 --> 00:16:03.220
So the likelihood of you having
to try even more than once to

00:16:03.220 --> 00:16:05.200
get an address is pretty small.

00:16:05.200 --> 00:16:09.320
And if the alternative is
this or not working at all,

00:16:09.360 --> 00:16:13.570
clearly this is definitely a
superior solution and almost no work.

00:16:13.580 --> 00:16:16.850
So please, if you're making a product,
don't skip the link local addressing.

00:16:16.960 --> 00:16:17.980
Thank you.

00:16:18.420 --> 00:16:23.110
Another solution you can use,
which is used by some devices

00:16:23.160 --> 00:16:27.890
like this Axis camera,
is

00:16:28.440 --> 00:16:30.100
They configure two addresses.

00:16:30.130 --> 00:16:32.060
And if you're using something
like embedded Linux,

00:16:32.090 --> 00:16:34.730
this is very, very easy to do.

00:16:36.270 --> 00:16:38.860
In their manual--because
historically they had a fixed

00:16:38.920 --> 00:16:42.200
factory default IP address,
and the manual tells people to use that,

00:16:42.200 --> 00:16:44.790
and it tells people to
reconfigure their PC,

00:16:44.790 --> 00:16:47.350
very much like my print server story,
to be on the right subnet with

00:16:47.350 --> 00:16:49.190
the factory default and blah,
blah, blah.

00:16:49.370 --> 00:16:52.450
And they didn't want to have to
reprint the manual in the short term,

00:16:52.450 --> 00:16:54.200
so they give it two addresses.

00:16:54.200 --> 00:16:57.200
So it has a link local address,
which you can discover with Bonjour,

00:16:57.200 --> 00:16:59.200
and if you're doing
it the old manual way,

00:16:59.200 --> 00:17:01.100
then the other address is there as well.

00:17:01.330 --> 00:17:06.290
So you don't have to have a big
flag day and uproot everything

00:17:06.290 --> 00:17:08.200
and change all your documentation.

00:17:08.200 --> 00:17:12.480
It's possible to add this while
supporting the old way at the same time.

00:17:13.780 --> 00:17:17.200
Another plea to all your
hardware developers out there:

00:17:17.300 --> 00:17:19.040
use Power over Ethernet.

00:17:19.100 --> 00:17:27.700
When Power over Ethernet first came out,
it cost thousands of dollars for a hub.

00:17:27.720 --> 00:17:32.700
This is the Netgear hub for
under $99 now if you shop around.

00:17:32.700 --> 00:17:35.640
It's eight ports,
four are powered and four are not,

00:17:35.710 --> 00:17:37.700
which makes perfect
sense for the home user,

00:17:37.710 --> 00:17:41.760
because you don't need power to your Mac,
you don't need power to your

00:17:41.760 --> 00:17:44.980
cable modem or your DSL modem,
so four powered ports is

00:17:44.980 --> 00:17:48.700
ideal for running a few things
like an airport base station,

00:17:48.700 --> 00:17:51.610
a PoE camera, something like that.

00:17:51.700 --> 00:17:56.310
Netgear does a 16-port version
with eight powered for $200,

00:17:56.310 --> 00:17:59.690
24 ports and 12 powered for $300.

00:17:59.790 --> 00:18:03.700
So Power over Ethernet is really
now affordable for consumers,

00:18:03.700 --> 00:18:09.700
and it erases really that last--
There's a reason to prefer USB,

00:18:09.700 --> 00:18:11.660
because USB gives you
ease of use and power.

00:18:11.730 --> 00:18:14.700
And now with Bonjour and
Power over Ethernet,

00:18:14.700 --> 00:18:16.700
Ethernet gives you ease of use and power.

00:18:16.730 --> 00:18:21.010
So we can now start making network
products that are as convenient and

00:18:21.020 --> 00:18:23.690
easy to use as last year's USB products.

00:18:26.140 --> 00:18:29.760
When you've made your product,
run the conformance test.

00:18:29.770 --> 00:18:32.760
That's a great tool for
finding common coding mistakes,

00:18:33.010 --> 00:18:35.970
which are corner cases you
may not have thought to test,

00:18:36.070 --> 00:18:38.280
but they're corner cases
customers might run into.

00:18:38.280 --> 00:18:40.600
So it's good to test those and fix them.

00:18:40.630 --> 00:18:44.250
After you've done that, for no charge,
send in the results of

00:18:44.260 --> 00:18:47.010
the conformance test,
and you can license the

00:18:47.010 --> 00:18:49.000
Bonjour logo to go on the box.

00:19:11.310 --> 00:19:11.310
And that badge on your box is kind
of--we will never see product makers

00:19:11.310 --> 00:19:11.310
put a sticker on the box that says,
"We'll waste five hours of your

00:19:11.310 --> 00:19:11.310
time." But this logo is the "We'll not
waste five hours of your time" badge.

00:19:11.310 --> 00:19:11.310
So we encourage you to put that
on your products so the customers

00:19:11.310 --> 00:19:11.310
know what they're looking for.

00:19:11.900 --> 00:19:16.290
You can also, for no charge,
license Bonjour for Windows to put

00:19:16.290 --> 00:19:21.210
on the CD or for download so that
your Windows customers get the

00:19:21.290 --> 00:19:23.400
benefits of this ease of use as well.

00:19:23.550 --> 00:19:26.540
Because we understand that when
you're doing engineering work

00:19:26.540 --> 00:19:31.380
to put this in your hardware,
the management people often say, "Well,

00:19:31.460 --> 00:19:34.070
this doesn't benefit the
bulk of our customers." Well,

00:19:34.150 --> 00:19:36.920
with Bonjour, it benefits everybody
with Bonjour for Windows.

00:19:37.070 --> 00:19:38.790
You can license that for no charge.

00:19:38.800 --> 00:19:42.420
And when you install that,
you get the Bonjour icon in

00:19:42.420 --> 00:19:46.170
the Internet Explorer toolbar,
just like you do in Safari.

00:19:46.400 --> 00:19:49.300
You click it, you see the same list
of discovered web pages.

00:19:49.300 --> 00:19:52.580
So if you've got a product
with an embedded web server

00:19:52.580 --> 00:19:55.830
as its user interface,
advertise it with Bonjour.

00:19:55.990 --> 00:19:59.350
Ship Bonjour for Windows and
Mac and Windows users get the

00:19:59.440 --> 00:20:02.540
convenience of just discover it,
click it, connect,

00:20:02.610 --> 00:20:05.110
don't care what the IP address is.

00:20:05.440 --> 00:20:09.700
If you're making
Windows application software

00:20:09.700 --> 00:20:14.550
using the Bonjour APIs on Windows,
contact us and let us know.

00:20:14.640 --> 00:20:20.020
We are currently talking to some
PC vendors about bundling Bonjour for

00:20:20.020 --> 00:20:24.620
Windows pre-installed on their PCs,
because they're tired of the grief

00:20:24.620 --> 00:20:26.430
their customers go through as well.

00:20:26.590 --> 00:20:30.900
So if you've got cool software
products for Windows that use Bonjour,

00:20:30.930 --> 00:20:31.900
let us know.

00:20:31.930 --> 00:20:35.780
And there might be opportunities
there for bundling a demo

00:20:35.930 --> 00:20:42.260
version of your product
pre-installed on these Windows PCs.

00:20:42.290 --> 00:20:45.910
Right, what's new since we met last?

00:20:47.640 --> 00:20:50.180
A lot of you won't care a lot about this,
but those of you who do

00:20:50.180 --> 00:20:51.830
care probably care a lot.

00:20:52.150 --> 00:20:56.520
You will have heard this week
that the Multicast DNS Responder,

00:20:56.520 --> 00:21:01.020
Darwin Project, the Bonjour code is now
licensed under Apache 2.0,

00:21:01.070 --> 00:21:04.990
which fits in a lot better with
companies who have products where

00:21:04.990 --> 00:21:09.510
the rest of the code is licensed
under BSD or GPL or Apache.

00:21:09.810 --> 00:21:12.850
They now don't have to learn
a different license and try

00:21:12.850 --> 00:21:14.540
to work out how it fits in.

00:21:15.930 --> 00:21:18.690
We have a new feature, Private DNS.

00:21:19.080 --> 00:21:23.930
When you're using wide-area DNS,
it works like standard

00:21:23.980 --> 00:21:30.200
DNS today in Tiger,
which is DNS is a public database.

00:21:30.200 --> 00:21:33.730
Ignoring issues like VPN and
encryption with standard DNS,

00:21:33.810 --> 00:21:37.400
anybody can do a query and
everybody gets the same answer.

00:21:37.400 --> 00:21:40.680
And one question we heard
from some developers was,

00:21:40.680 --> 00:21:45.890
"What about privacy?" When I go around
the world and dynamically update my

00:21:45.890 --> 00:21:51.170
host name to different IP addresses,
some kind of cyberstalker could be

00:21:51.200 --> 00:21:54.800
looking at my IP address and see,
"Now it's at San Jose Airport.

00:21:54.800 --> 00:21:56.630
Now it's at the W Hotel in New York.

00:21:56.780 --> 00:22:01.700
Now it's in London." So we're adding
a feature where only authorized

00:22:01.700 --> 00:22:04.000
clients can do a DNS query.

00:22:04.000 --> 00:22:08.990
This is an extension to standard DNS,
but if you care about that issue,

00:22:09.280 --> 00:22:12.000
this is a feature that will
be available in Leopard.

00:22:12.000 --> 00:22:13.070
Yeah.

00:22:14.920 --> 00:22:18.200
For those of you who are
implementing your own implementations

00:22:18.200 --> 00:22:22.040
from the specifications,
instead of using the Darwin code,

00:22:22.300 --> 00:22:25.600
we have updated the specifications.

00:22:25.690 --> 00:22:27.190
These are getting pretty mature now.

00:22:27.440 --> 00:22:29.680
There aren't major
differences from last year,

00:22:29.890 --> 00:22:33.450
and in fact,
I predict by the end of this year,

00:22:33.460 --> 00:22:34.800
these drafts will be stable enough.

00:22:34.870 --> 00:22:36.920
There'll really be no
more changes to make,

00:22:36.920 --> 00:22:39.950
and these probably will start
getting RFC numbers on them.

00:22:41.800 --> 00:22:46.600
Application programming-- when
we shipped Bonjour in 10.2,

00:22:46.600 --> 00:22:49.520
you could program it from C--
there was core foundation,

00:22:49.520 --> 00:22:52.670
there was code code-- but basically,
C APIs.

00:22:53.890 --> 00:22:59.170
In 10.3 and 10.4, we added Java APIs for
the Java programmers.

00:22:59.800 --> 00:23:03.870
And in the Leopard build
that you all got this week,

00:23:03.960 --> 00:23:06.010
we have two new things.

00:23:06.060 --> 00:23:10.100
The Java APIs included the
standard register-browse-resolve,

00:23:10.150 --> 00:23:14.070
but what they didn't include was
one particular call to register

00:23:14.080 --> 00:23:16.250
specific individual records.

00:23:16.490 --> 00:23:18.320
That was in the C API, but not Java.

00:23:18.530 --> 00:23:19.300
We had requests.

00:23:19.300 --> 00:23:20.230
We've added that.

00:23:20.400 --> 00:23:24.270
We also added Ruby language bindings.

00:23:24.430 --> 00:23:30.900
And those of you who have used Ruby will
know what a powerful language this is.

00:23:30.900 --> 00:23:33.790
There's an interesting story
here about how this came to be.

00:23:33.950 --> 00:23:36.580
A couple of years ago,
I was talking--giving a

00:23:36.580 --> 00:23:40.320
tutorial at the O'Reilly
Open Source Conference in Portland,

00:23:40.320 --> 00:23:44.400
Oregon, and a couple of Ruby developers
were in the tutorial,

00:23:44.580 --> 00:23:47.630
and they got excited about Bonjour,
and we went to the bar

00:23:47.630 --> 00:23:51.400
afterwards and had a drink,
and two hours later,

00:23:51.400 --> 00:23:55.400
we had working Bonjour APIs for Ruby.

00:23:55.440 --> 00:23:58.600
And in fact, their first attempt at it,
they kind of hit some brick

00:23:58.600 --> 00:24:01.500
walls and struggled a bit,
and that was when they called me

00:24:01.500 --> 00:24:03.770
and asked if I'd mind helping them,
and of course,

00:24:03.770 --> 00:24:05.900
I was completely happy to do that.

00:24:05.930 --> 00:24:09.340
And the mistake they made was
they'd failed to understand the

00:24:09.340 --> 00:24:10.900
asynchronous nature of Bonjour.

00:24:10.900 --> 00:24:13.250
And I mention this because
this is an important lesson

00:24:13.250 --> 00:24:14.810
for everybody writing software.

00:24:14.890 --> 00:24:20.940
It's a very, very common mistake for
developers to write code where

00:24:22.000 --> 00:24:25.920
you start browsing the network,
and you wait for 10 seconds,

00:24:26.000 --> 00:24:31.790
and you show some stupid animation like
a flashlight sweeping back and forth.

00:24:32.930 --> 00:24:36.140
And then after 10 seconds,
you show what you found.

00:24:36.160 --> 00:24:39.160
And at that instant,
the list is already becoming out of date

00:24:39.270 --> 00:24:41.400
because you're not updating it anymore.

00:24:41.410 --> 00:24:43.660
And that is just a
horrible user interface.

00:24:43.740 --> 00:24:44.960
Don't do that.

00:24:44.970 --> 00:24:47.560
All of the Bonjour operations
are asynchronous.

00:24:47.750 --> 00:24:50.120
You do the call,
and it returns immediately.

00:24:50.150 --> 00:24:53.000
And then as the results are found,
your asynchronous callback

00:24:53.000 --> 00:24:56.280
routine will be called saying,
add this printer, add this printer.

00:24:56.280 --> 00:24:57.450
Oh, remove that one.

00:24:57.460 --> 00:24:58.420
It's gone away.

00:24:58.460 --> 00:24:59.850
And your list updates live.

00:25:00.720 --> 00:25:04.270
So what that means is that you can
have the list of services on the screen

00:25:04.770 --> 00:25:09.660
in typically a tenth of a second,
faster than the user can tell.

00:25:09.690 --> 00:25:12.360
But if a new printer
appears 30 seconds from now,

00:25:12.370 --> 00:25:13.940
don't make them click a refresh button.

00:25:14.100 --> 00:25:15.740
It just appears in the list.

00:25:15.770 --> 00:25:16.530
Printer goes away.

00:25:16.540 --> 00:25:17.530
It disappears from the list.

00:25:17.550 --> 00:25:19.880
That's the experience we want.

00:25:19.880 --> 00:25:23.460
And the Ruby guys said, aha,
now we get it.

00:25:23.580 --> 00:25:24.630
And they quickly redid it.

00:25:24.630 --> 00:25:27.300
And they came up with this
amazingly elegant API.

00:25:28.540 --> 00:25:29.960
And I want to show a
little bit of real code.

00:25:29.960 --> 00:25:34.650
We had a summer intern
working with the NFS group.

00:25:34.740 --> 00:25:38.060
And those of you who went to the
NFS session will know that they have

00:25:38.120 --> 00:25:41.490
a new feature called executable maps,
where instead of having a

00:25:41.490 --> 00:25:44.860
static text file listing the
NFS service that you want to mount,

00:25:44.860 --> 00:25:48.440
it will actually execute a script
to find the list of servers.

00:25:48.440 --> 00:25:50.320
And the manager of that
group said to the intern,

00:25:50.410 --> 00:25:52.480
you think you could do
something with Bonjour.

00:25:52.480 --> 00:25:55.370
And this is not a code snippet.

00:25:55.370 --> 00:26:01.760
This is actually the entire program
to do Bonjour browsing for NFS with

00:26:01.760 --> 00:26:04.160
executable maps in Leopard.

00:26:04.160 --> 00:26:06.510
And there's actually two programs here.

00:26:07.130 --> 00:26:08.610
So this is the first one.

00:26:08.610 --> 00:26:12.840
If you run the script with no arguments,
then it does a browse call.

00:26:12.840 --> 00:26:17.670
And you see it says dnssd.browse
arguments do result.

00:26:17.670 --> 00:26:22.530
That thing after the do result looks
like the body of a statement in C,

00:26:22.590 --> 00:26:25.930
like an if or a for loop
or something like that.

00:26:25.930 --> 00:26:28.300
But actually in Ruby, it's not.

00:26:28.360 --> 00:26:31.640
That is an argument that's
passed to the function.

00:26:31.640 --> 00:26:33.930
You can pass executable
code as an argument.

00:26:33.930 --> 00:26:38.110
And what that function does is
every time it finds a result,

00:26:38.170 --> 00:26:39.630
it executes that code.

00:26:39.630 --> 00:26:42.490
And what that code does
is print out the result.

00:26:42.500 --> 00:26:46.140
And the program that's running
the script reads from standard

00:26:46.140 --> 00:26:49.110
out and gets the list of servers.

00:26:49.520 --> 00:26:52.480
So that's how you get the list
that's dynamically discovered.

00:26:52.480 --> 00:26:56.800
When you mount one of the servers,
it runs a script with an argument.

00:26:56.820 --> 00:27:00.220
And in this case,
the script calls resolve,

00:27:00.220 --> 00:27:05.170
looks up the address,
and returns nfs://hostname:port/path,

00:27:05.170 --> 00:27:07.210
and you mount the server.

00:27:07.470 --> 00:27:11.720
So that's the kind of thing
you can do with five minutes of

00:27:11.720 --> 00:27:13.840
Ruby programming using Bonjour.

00:27:13.870 --> 00:27:21.360
And that is on your WWDC Leopard
build that you have.

00:27:21.410 --> 00:27:26.120
Now, for the final version of Leopard,
we're considering some other things.

00:27:26.110 --> 00:27:30.200
And I'd like to get some
feedback from you guys here.

00:27:30.510 --> 00:27:33.900
Who would like to see
Python support for Bonjour?

00:27:34.920 --> 00:27:35.890
Thank you.

00:27:35.900 --> 00:27:38.250
And you're allowed to
vote for more than one.

00:27:38.320 --> 00:27:39.170
What about Pearl?

00:27:39.240 --> 00:27:41.290
Do we have

00:27:41.800 --> 00:27:43.200
OK.

00:27:43.290 --> 00:27:45.080
We're also open to other suggestions.

00:27:45.080 --> 00:27:48.530
If you have ideas for other languages
that you use that you'd like to

00:27:48.530 --> 00:27:52.400
be able to access Bonjour from,
come to the microphones or come

00:27:52.400 --> 00:27:55.490
and meet us at the Plugfest
tonight and let us know.

00:27:56.310 --> 00:27:59.570
And remember, this is open source,
so you're welcome to write the code

00:27:59.570 --> 00:28:01.670
yourself and contribute it as well.

00:28:01.730 --> 00:28:03.140
And in fact,
that's what happened with Ruby.

00:28:03.140 --> 00:28:04.270
We didn't write that code.

00:28:04.280 --> 00:28:07.210
The Ruby developers wrote that,
and now it made it

00:28:07.300 --> 00:28:08.800
into the Leopard build.

00:28:09.390 --> 00:28:12.980
Little glimpse of what we're
planning to do in the future.

00:28:13.030 --> 00:28:18.020
What we have for you today in the
WWDC build is a pretty neat feature,

00:28:18.060 --> 00:28:23.570
and that's IPv4 link local addressing
simultaneously on all interfaces.

00:28:23.660 --> 00:28:25.980
I've said before that
I'm a big fan of v6,

00:28:25.980 --> 00:28:29.080
and I encourage you to do v6,
but we accept that today's

00:28:29.110 --> 00:28:33.160
reality is that a lot of devices,
a lot of hardware devices,

00:28:33.240 --> 00:28:34.530
don't yet do v6.

00:28:34.790 --> 00:28:37.740
And one of the limitations of
v4 is if you have Ethernet,

00:28:37.750 --> 00:28:41.920
an AirPort, an IP over FireWire,
in Tiger, only the first one in the list

00:28:41.920 --> 00:28:43.580
gets a link local address.

00:28:43.640 --> 00:28:47.130
So you plug in a FireWire cable, sure,
you've got IP over FireWire,

00:28:47.160 --> 00:28:49.570
but you don't have an
address on that cable.

00:28:49.620 --> 00:28:51.600
You only have a v6 address.

00:28:51.710 --> 00:28:53.600
So in Leopard, we fixed that.

00:28:53.600 --> 00:28:56.590
We actually are able to configure
link local addresses simultaneously

00:28:56.600 --> 00:28:58.600
on all interfaces that need them.

00:28:58.740 --> 00:29:01.800
And when you connect to
a link local address,

00:29:01.800 --> 00:29:06.580
it will actually ARP on all interfaces
to see where that device is.

00:29:06.830 --> 00:29:11.600
Now, because link local addresses are,
as the name implies, link local,

00:29:11.800 --> 00:29:15.070
there is a possibility of a conflict
there that two devices may have the

00:29:15.070 --> 00:29:17.600
same address on different interfaces.

00:29:17.600 --> 00:29:19.600
But there are 65,000.

00:29:19.600 --> 00:29:22.600
So that's a very rare likelihood.

00:29:22.600 --> 00:29:24.500
And as I said,
it's a situation in Tiger where

00:29:24.500 --> 00:29:25.580
it doesn't work at all.

00:29:25.600 --> 00:29:29.600
In Leopard,
you've got a 99.9% chance of it working.

00:29:29.600 --> 00:29:33.520
As an additional precaution,
in the very rare case that

00:29:33.610 --> 00:29:36.780
you do get a conflict,
the Mac actually takes precautions

00:29:37.160 --> 00:29:39.600
to try to avoid that happening.

00:29:39.600 --> 00:29:42.760
When you connect your FireWire
device or your Ethernet cable

00:29:42.760 --> 00:29:45.970
or you join the AirPort network,
when the device probes to

00:29:45.970 --> 00:29:49.620
see if its address is in use,
if the Mac has seen that same address

00:29:49.620 --> 00:29:53.460
in use on a different interface,
then it will deny the probe.

00:29:53.600 --> 00:29:56.600
So it won't force any device
to change its address,

00:29:56.600 --> 00:29:58.910
but when devices are probing,
it will try to encourage them to

00:29:59.000 --> 00:30:00.550
pick non-overlapping addresses.

00:30:00.600 --> 00:30:03.500
So the net result of this is
you can just plug the cables

00:30:03.500 --> 00:30:06.490
together however you want,
and it will work by magic.

00:30:08.220 --> 00:30:13.580
Future plans we have-- right now,
the Bonjour APIs, register, browse,

00:30:13.580 --> 00:30:15.530
resolve, are all completely independent.

00:30:15.540 --> 00:30:17.280
You do the call,
and you get back a socket

00:30:17.840 --> 00:30:19.390
that delivers the events.

00:30:19.540 --> 00:30:23.560
We've had requests from several
developers who are advertising

00:30:23.990 --> 00:30:27.080
hundreds of services that they
don't want hundreds of sockets.

00:30:27.270 --> 00:30:30.560
So we're working on extending the
API to let you share one socket

00:30:30.990 --> 00:30:36.130
for aggregating all of the events
coming back from multiple operations.

00:30:36.980 --> 00:30:40.420
Right now in Tiger,
if you use wide-area Bonjour to

00:30:40.420 --> 00:30:45.410
advertise a service on your computer,
MDS Responder will talk to your

00:30:45.410 --> 00:30:49.330
local NAT gateway and set up an
inbound port mapping for that service,

00:30:49.340 --> 00:30:52.490
because there's no point advertising
it globally if you're behind a

00:30:52.610 --> 00:30:54.490
NAT gateway and people can't reach you.

00:30:54.580 --> 00:30:59.270
We've had requests from developers
to expose that functionality

00:30:59.410 --> 00:31:03.190
as an API in its own right,
because maybe they're not wanting

00:31:03.220 --> 00:31:05.620
to use wide-area Bonjour for
this particular application.

00:31:05.620 --> 00:31:09.120
If they're writing a multiplayer
game that has its own game arena,

00:31:09.140 --> 00:31:14.300
then they just want to
get the port mapping.

00:31:14.420 --> 00:31:15.830
All right, we have some support for that.

00:31:15.910 --> 00:31:18.910
That's something that we're hoping to do.

00:31:18.920 --> 00:31:24.470
And the final thing that fits into
this whole picture is if you have a

00:31:24.550 --> 00:31:28.580
machine at home and it's advertising
with a wide area of Bonjour and it

00:31:28.580 --> 00:31:32.640
has a nap mapping so you can reach it,
then if it's sleeping,

00:31:32.710 --> 00:31:34.560
you can't reach it.

00:31:34.660 --> 00:31:39.560
So we're working on a system where when
you try to connect to a home machine,

00:31:39.560 --> 00:31:43.470
your airport base station will
recognize that you're accessing a

00:31:43.470 --> 00:31:47.060
machine that's sleeping and will
send the wake-on-land magic packet

00:31:47.060 --> 00:31:50.880
to wake that device up for you,
all transparently, automatically,

00:31:50.920 --> 00:31:52.600
with the existing Bonjour APIs.

00:31:52.600 --> 00:31:53.800
If you advertise...

00:31:57.610 --> 00:32:00.900
If you advertise a service
using the register call,

00:32:00.900 --> 00:32:04.920
then those records are automatically
transferred to the sleep proxy so

00:32:04.920 --> 00:32:08.100
that it knows the service you're
advertising and what machine has to

00:32:08.120 --> 00:32:10.230
be woken up to provide that service.

00:32:10.800 --> 00:34:43.900
[Transcript missing]

00:34:50.230 --> 00:34:57.640
So first obvious thing is it
advertises its presence with Bonjour,

00:34:57.700 --> 00:35:00.720
as you'd expect.

00:35:01.200 --> 00:35:07.240
But the other neat thing they did,
which I didn't expect--and it's always

00:35:07.240 --> 00:35:12.330
fun when people do creative things
that I hadn't thought of--is they said,

00:35:12.340 --> 00:35:16.440
what about people who don't
have Bonjour web browsers?

00:35:16.540 --> 00:35:19.910
So they actually have a Bonjour browser
built into the base station.

00:35:19.950 --> 00:35:23.460
So if you're using
some other web browser,

00:35:23.480 --> 00:35:25.860
as long as you know the
IP address of the base station,

00:35:25.860 --> 00:35:28.450
which is, of course, a burden,
but as long as you know that

00:35:28.490 --> 00:35:31.520
one piece of information,
you can click on Local Services,

00:35:31.520 --> 00:35:35.840
and it shows you what is discovered
on the network using Bonjour.

00:35:35.930 --> 00:35:41.350
So you can buy these gateways
right now from Ruckus.

00:35:41.480 --> 00:35:46.260
The version with Bonjour will probably
be shipping two to three months.

00:35:46.300 --> 00:35:51.370
Something you can buy today is these
little network cameras from Axis.

00:35:51.770 --> 00:35:56.550
And when I showed my demo four years ago,
the camera was big and bulky,

00:35:56.550 --> 00:35:59.540
and the image quality wasn't good,
and the frame rate wasn't good,

00:35:59.540 --> 00:36:01.870
and of course,
the set of experience was a nightmare

00:36:01.870 --> 00:36:04.980
because they didn't have Bonjour,
and they were expensive.

00:36:04.980 --> 00:36:08.880
And how things have
changed in a few years.

00:36:08.880 --> 00:36:10.080
The camera now is tiny.

00:36:10.080 --> 00:36:13.680
It's about half the size
of a deck of playing cards.

00:36:13.680 --> 00:36:17.520
It does 30 frames per second at 640, 480.

00:36:17.520 --> 00:36:19.650
It's got really good image quality,
really,

00:36:19.650 --> 00:36:21.390
really good low-light performance.

00:36:21.540 --> 00:36:24.380
In fact, let's try connecting to that.

00:36:24.430 --> 00:36:25.770
You can see.

00:36:25.950 --> 00:36:28.770
So even in this low light, I mean,
I can barely see you guys,

00:36:28.900 --> 00:36:31.620
but this camera, can see perfectly well.

00:36:34.400 --> 00:36:36.800
And of course, it shows up with Bonjour.

00:36:36.800 --> 00:36:38.380
I don't know what its IP address is.

00:36:38.380 --> 00:36:40.260
I don't care what its IP address is.

00:36:40.260 --> 00:36:46.710
And for a few dollars more,
they have a version with wireless.

00:36:50.710 --> 00:36:52.840
with no Ethernet cable.

00:36:52.860 --> 00:36:58.070
And I think we've got a lot of
wireless networking going on here,

00:36:58.130 --> 00:37:01.770
but pretty good frame rate on
the wireless version as well.

00:37:01.920 --> 00:37:08.730
So I'm really excited to see these
things that I imagined four years ago,

00:37:08.990 --> 00:37:12.240
and now they're
commonplace retail devices.

00:37:12.310 --> 00:37:16.510
OK, so let's switch back to the slides.

00:37:20.480 --> 00:37:25.540
So I have shown lots of
Bonjour devices that are small.

00:37:25.570 --> 00:37:26.830
This is pretty small.

00:37:27.070 --> 00:37:30.700
Apple Base Station is pretty small,
including the power supply.

00:37:30.710 --> 00:37:33.280
This is the site player, Telnet.

00:37:33.600 --> 00:37:37.270
Serial port in this side advertises it
as Telnet service out on the ethernet.

00:37:37.400 --> 00:37:43.180
So you can find it in terminal on OS X,
go to connect to server.

00:37:43.360 --> 00:37:44.880
USB print server from IOgear.

00:37:45.080 --> 00:37:45.980
That's pretty small.

00:37:46.030 --> 00:37:48.620
In fact, the power brick is
bigger than the product.

00:37:48.670 --> 00:37:53.980
But we have a new winner, and that is--

00:37:54.440 --> 00:38:00.910
I film, and they have made about 10 of
these prototype alpha hardware,

00:38:00.910 --> 00:38:02.070
and I got mine this week.

00:38:02.240 --> 00:38:04.340
So I've got a treat for you guys today.

00:38:04.340 --> 00:38:09.330
This is the first time this
has ever been seen in public,

00:38:09.330 --> 00:38:09.330
and--

00:38:10.030 --> 00:38:16.630
This is a one-gigabyte SD card,
standard kind of thing that

00:38:16.640 --> 00:38:18.550
we have in digital cameras.

00:38:18.570 --> 00:38:23.500
It's about the size of a postage stamp,
about not much thicker.

00:38:23.540 --> 00:38:30.540
But as well as being a gigabyte SD card,
this has a processor, and RAM, and ROM,

00:38:30.540 --> 00:38:35.850
and 802.11g, 45 megabit wireless.

00:38:38.470 --> 00:38:44.900
So because I only just got this,
I actually haven't had

00:38:44.900 --> 00:38:45.840
much time to try this.

00:38:45.840 --> 00:38:47.800
So this is going to be a
bit of a Hail Mary demo.

00:38:47.800 --> 00:38:49.110
I'm going to take this card.

00:38:49.220 --> 00:38:51.450
I'm going to stick it in my camera.

00:39:01.200 --> 00:39:03.020
And let's switch back
to the demo machine.

00:39:03.120 --> 00:39:10.700
Let's try this.

00:39:16.790 --> 00:39:20.900
So what this card is doing is
the processor noticed that a file

00:39:20.900 --> 00:39:22.290
was written to the file system.

00:39:22.520 --> 00:39:23.530
It powers up the wireless.

00:39:23.540 --> 00:39:24.980
It looks for a network.

00:39:25.010 --> 00:39:27.750
It looks for a machine to talk to.

00:39:27.810 --> 00:39:31.400
And it transfers the
photograph that was just taken.

00:39:31.530 --> 00:39:36.470
And we should see--

00:40:09.220 --> 00:40:16.180
So you guys probably wonder
if this is a real live demo.

00:40:16.240 --> 00:40:19.850
So to prove it's real,
can you put your hands in the air?

00:40:19.870 --> 00:40:22.120
We'll try that again.

00:40:22.120 --> 00:40:23.220
All right.

00:40:23.250 --> 00:40:24.810
And to the left.

00:40:24.920 --> 00:40:30.090
And to the right.

00:40:32.780 --> 00:40:35.520
All right, so we'll see how long
those take to show up.

00:40:35.540 --> 00:40:41.200
I think there's a lot of
wireless traffic here today,

00:40:41.220 --> 00:40:43.000
which might be--

00:40:52.300 --> 00:40:54.760
Oh, so one last question.

00:40:54.760 --> 00:40:56.720
If you'd like one of these
wireless cards in your camera,

00:40:56.720 --> 00:40:59.460
raise your hands.

00:40:59.460 --> 00:41:00.960
I'll pass that on to the makers.

00:41:00.960 --> 00:41:05.560
Now, I should emphasize,
this is this year's blue

00:41:05.630 --> 00:41:07.820
sky vision of the future.

00:41:07.820 --> 00:41:11.020
I can't predict when this might
make it into retail products.

00:41:11.020 --> 00:41:13.600
You can see from that card,
it's a prototype card.

00:41:13.600 --> 00:41:15.660
Doesn't even have a label on it yet.

00:41:15.700 --> 00:41:17.620
So it probably won't be this year.

00:41:17.620 --> 00:41:25.570
But I'm really hoping that next year,
this thing should be a standard product.

00:41:25.830 --> 00:41:29.740
People have done cameras
with Wi-Fi before,

00:41:29.940 --> 00:41:32.770
but they've always been
clunky and hard to use.

00:41:33.210 --> 00:41:36.890
And it's what people call
the dancing bear syndrome,

00:41:37.250 --> 00:41:41.740
which is that when you
see a bear dancing,

00:41:41.740 --> 00:41:45.190
you're not expected to be
impressed by how well it dances.

00:41:45.190 --> 00:41:45.190
You're expected to be impressed
that it dances at all.

00:41:45.350 --> 00:41:47.600
And we need to get beyond
the dancing bear syndrome.

00:41:47.860 --> 00:41:50.810
And I believe that this
product-- plug it in the camera,

00:41:50.840 --> 00:41:53.760
snap the picture,
and it's in iPhoto-- this is

00:41:53.760 --> 00:42:00.220
what we need to do to make
these kind of products useful.

00:42:01.210 --> 00:42:04.940
The mistake that people make--and a
friend of mine is setting up his print

00:42:04.940 --> 00:42:09.460
server--after the five-hour struggle,
he then wasn't really likely

00:42:09.460 --> 00:42:15.760
to return it to Frize because,
well, it's working now, so why return it?

00:42:16.110 --> 00:42:20.170
And the mistake people make is that they
assume that setup is a one-time task,

00:42:20.260 --> 00:42:20.970
but it isn't.

00:42:20.970 --> 00:42:23.100
You get a new computer,
you have to set it up.

00:42:23.100 --> 00:42:26.100
You switch ISPs, you have to set it up.

00:42:26.100 --> 00:42:28.530
A visitor comes to your house
and wants to print something.

00:42:28.530 --> 00:42:30.100
You have to set up their computer.

00:42:30.230 --> 00:42:33.100
You have a power failure,
and the stupid box loses its brain

00:42:33.100 --> 00:42:35.090
and forgets all its settings.

00:42:35.120 --> 00:42:36.100
You have to set it up again.

00:42:36.100 --> 00:42:39.460
And I'm sure all of us have got
some piece of hardware lying

00:42:39.460 --> 00:42:43.030
around at home that used to work,
and something went wrong,

00:42:43.090 --> 00:42:46.050
and we just haven't found
the time to fix it again.

00:42:46.160 --> 00:42:53.070
So the setup experience is important
not just for out-of-the-box,

00:42:53.180 --> 00:42:55.050
but for continuing use and to
give the products a new life.

00:42:55.110 --> 00:42:57.560
To give the products a
continuing life every time you

00:42:57.560 --> 00:42:59.030
want to use it for something.

00:42:59.080 --> 00:43:02.640
To be able to do what I did
here--stick it in the camera,

00:43:02.640 --> 00:43:05.090
shoot a picture,
and have it work in 30 seconds.

00:43:05.100 --> 00:43:08.090
That's what it takes to make
really compelling products.

00:43:08.100 --> 00:43:10.790
So let's go back to the slides, please.

00:43:14.390 --> 00:43:15.720
All right.

00:43:15.790 --> 00:43:19.380
So our last little section
here is wide-area Bonjour.

00:43:19.620 --> 00:43:21.600
We've had a lot of interest
in wide-area Bonjour,

00:43:21.600 --> 00:43:23.620
and people ask,
how can I experiment with this?

00:43:23.620 --> 00:43:26.560
How can I set it up and
play with it myself?

00:43:26.650 --> 00:43:32.630
So wide-area Bonjour is built using the
standard Berkeley Internet Name daemon.

00:43:32.710 --> 00:43:36.660
We have an extensions daemon that
Apple wrote that implements some

00:43:36.660 --> 00:43:38.490
of the non-standard features.

00:43:38.500 --> 00:43:42.060
Long-lived queries allow you to
do a query to the server saying,

00:43:42.060 --> 00:43:43.360
I'm looking for printers.

00:43:43.390 --> 00:43:45.990
But rather than polling the
server repeatedly to find out

00:43:46.060 --> 00:43:48.550
if there are new printers,
you do a long-lived query

00:43:48.550 --> 00:43:51.340
and tell the server,
here's my question.

00:43:51.340 --> 00:43:54.040
And if the answer changes, let me know.

00:43:54.490 --> 00:43:57.550
Update leases are something that
arguably should have been in the

00:43:57.670 --> 00:44:00.300
standard DNS update specification.

00:44:00.360 --> 00:44:02.460
And that is,
when you do a dynamic update to

00:44:02.600 --> 00:44:06.240
put your address in the server,
there's no garbage collection.

00:44:06.300 --> 00:44:10.130
If you unplug your machine and walk away,
that record stays there forever.

00:44:10.190 --> 00:44:12.500
Update leases are very
much like DHCP leases.

00:44:12.580 --> 00:44:15.940
There's a lifetime on the record,
and if you don't refresh it, it expires.

00:44:16.230 --> 00:44:20.510
Private DNS is the third new feature
that I already told you about.

00:44:20.760 --> 00:44:23.380
Now, you can set up all these
text files by hand,

00:44:23.430 --> 00:44:25.700
but I'm going to show you
a different way today.

00:44:25.750 --> 00:44:30.240
And if you don't know anything about
DNS and you've never done it before,

00:44:30.270 --> 00:44:32.580
and you value time at
more than $15 an hour,

00:44:32.650 --> 00:44:35.660
then this might be a useful
little simple tool to buy.

00:44:35.730 --> 00:44:40.150
And this gives you a nice graphical
interface for setting up your DNS server.

00:44:40.240 --> 00:44:44.940
And in the latest release this week,
he added the Bonjour button.

00:44:44.980 --> 00:44:47.410
And when you click that,
a sheet comes down,

00:44:47.570 --> 00:44:50.580
you fill in the settings,
and you have a wide-area Bonjour server.

00:44:50.580 --> 00:44:51.830
Let's switch to the demo machine.

00:44:51.920 --> 00:44:58.710
It's cutedgesystems.com.

00:45:06.420 --> 00:45:10.720
So what I'm going to do here is
we're going to fill in the template.

00:45:10.720 --> 00:45:15.450
And we're going to make a
fake domain called home.

00:45:15.790 --> 00:45:20.940
And because we want normal
DNS queries to work,

00:45:20.950 --> 00:45:23.310
we're going to tell it that--

00:45:24.030 --> 00:45:26.620
Any queries it can't answer,
it should forward.

00:45:26.620 --> 00:45:32.560
And you can find that out
if you type scutil --dns.

00:45:32.560 --> 00:45:35.860
It gives you a list of your machine's
currently configured DNS service.

00:45:35.860 --> 00:45:39.770
If you've learned them from DHCP and
you take the first address in that

00:45:39.810 --> 00:45:42.600
list and put that in as the forwarder.

00:45:42.680 --> 00:45:45.050
We need a name server
for our fake domain,

00:45:45.060 --> 00:45:45.760
and that will be me.

00:45:45.760 --> 00:45:48.000
We'll call it ns.home.

00:45:48.080 --> 00:45:50.900
So that means we need
to make a host name.

00:45:51.060 --> 00:45:55.680
Click plus, ns.home, IP address.

00:45:55.680 --> 00:45:57.380
Well, that's my IP address.

00:45:57.380 --> 00:46:01.040
We can find that by typing ifconfig.

00:46:01.040 --> 00:46:06.000
And there is my IP address.

00:46:06.050 --> 00:46:08.270
So let's paste that in.

00:46:08.960 --> 00:46:12.210
And that's all we need to
set up the name server.

00:46:12.220 --> 00:46:13.740
Let's create a Bonjour service.

00:46:13.740 --> 00:46:19.970
When you click the plus button,
it puts in a template.

00:46:20.300 --> 00:46:22.510
So here we have HTTP.

00:46:22.520 --> 00:46:25.420
Here's the name it will appear as.

00:46:25.770 --> 00:46:29.580
The target service being advertised
doesn't have to be on this machine.

00:46:29.600 --> 00:46:32.060
You can advertise services
that exist anywhere.

00:46:32.250 --> 00:46:35.560
So here we're going to use
apple.com as the web page.

00:46:35.570 --> 00:46:36.350
Let's close that.

00:46:36.460 --> 00:46:37.800
Let's start the DNS server.

00:46:37.800 --> 00:46:42.980
What did I miss?

00:46:45.140 --> 00:46:47.040
Oh, retry.

00:46:47.070 --> 00:46:48.630
I think I erased that by mistake.

00:46:48.770 --> 00:46:50.290
So we start the DNS.

00:46:50.400 --> 00:46:54.370
We run Safari.

00:46:54.370 --> 00:46:54.370
And--

00:46:55.330 --> 00:46:57.180
And this is when we run normal Safari.

00:46:57.180 --> 00:46:59.160
We're using--this is
linked local Bonjour,

00:46:59.170 --> 00:47:00.720
and this is what it found.

00:47:00.750 --> 00:47:07.090
Now, if we go into the network settings,
and we tell my machine--and you

00:47:07.150 --> 00:47:10.100
can do this on any client machine,
and those of you in the audience,

00:47:10.100 --> 00:47:11.860
you can try this out as well.

00:47:11.900 --> 00:47:17.220
Join the Metro Flex NAT network,
and you want to set your

00:47:17.220 --> 00:47:20.940
DNS server to be 135,
which is this machine.

00:47:20.950 --> 00:47:23.770
Add home as a search domain.

00:47:24.200 --> 00:47:27.360
And now, when we look in Safari,

00:47:31.400 --> 00:47:35.120
Our wide-area page has been
advertised and discovered in Safari.

00:47:35.190 --> 00:47:38.000
So I did that live on stage.

00:47:38.000 --> 00:47:40.750
With DNS Enabler,
you can set up your own wide-area

00:47:40.850 --> 00:47:44.380
Bonjour server in about 60 seconds.

00:47:45.010 --> 00:47:47.500
Now understand this is just for testing.

00:47:47.520 --> 00:47:50.360
Nobody else in the rest of the
world knows about that server,

00:47:50.360 --> 00:47:54.640
which is why I had to manually put
the IP address in as my DNS server.

00:47:54.640 --> 00:47:57.020
And clearly this doesn't scale.

00:47:57.020 --> 00:47:59.120
If every organization
in the world did this,

00:47:59.120 --> 00:48:02.350
you have a list this long of
manual IP addresses to put in.

00:48:02.590 --> 00:48:05.600
So this is a way to experiment.

00:48:05.600 --> 00:48:09.150
When you're happy with it
and you see how it works,

00:48:09.160 --> 00:48:14.480
the next step is to get a sub-domain
delegated to you from your parent

00:48:15.080 --> 00:48:17.870
domain or register your own domain.

00:48:17.960 --> 00:48:19.380
There are many ways to do this.

00:48:19.410 --> 00:48:22.580
But what I just showed you here
is an easy way to experiment.

00:48:22.580 --> 00:48:28.910
And what we realized is we had been
unconsciously assuming that the

00:48:28.990 --> 00:48:33.090
people setting up wide area bonjour
would be the DNS administrators.

00:48:33.260 --> 00:48:35.860
And they would be completely
comfortable with running DNS and know

00:48:35.860 --> 00:48:37.600
how to do it and add a few records.

00:48:37.620 --> 00:48:41.350
But what we actually found is that
the people who are enthusiastic

00:48:41.700 --> 00:48:43.780
about wide area bonjour are you guys.

00:48:43.780 --> 00:48:46.430
In the room now,
which is not necessarily the

00:48:46.530 --> 00:48:49.130
people running the company's
DNS server right now.

00:48:49.280 --> 00:48:52.550
So you guys have to be able to
go to the DNS guys and explain

00:48:52.560 --> 00:48:54.030
what you want done and why.

00:48:54.170 --> 00:48:58.290
So this test setup is an easy
way for you to try it out,

00:48:58.290 --> 00:49:01.880
get comfortable with it,
so that you are then equipped to go

00:49:01.880 --> 00:49:05.560
and sell the idea to the operations
people running the DNS server.

00:49:05.640 --> 00:49:09.250
Let's go back to the slides, please.

00:49:13.360 --> 00:49:16.090
So, time to wrap up.

00:49:16.510 --> 00:49:20.660
If you want more information,
Craig Keithley is our evangelist.

00:49:20.690 --> 00:49:24.460
There is plenty of
information on the web page.

00:49:26.510 --> 00:49:29.580
Last year,
I wrote a book because one of the things

00:49:29.650 --> 00:49:33.310
that I realized--Tim O'Reilly said to me,

00:49:33.690 --> 00:49:38.040
If you try to evangelize this
technology by explaining it in

00:49:38.040 --> 00:49:40.840
person one company at a time,
you're going to spend the

00:49:40.840 --> 00:49:41.700
rest of your life doing it.

00:49:41.770 --> 00:49:43.710
So you need to reach a bigger audience.

00:49:43.830 --> 00:49:47.840
So that was why I wrote this book,
so that when people say, "I love Bonjour.

00:49:47.840 --> 00:49:48.510
It sounds great.

00:49:48.620 --> 00:49:52.110
Where do I start?" I can
hand them a copy of the book.

00:49:52.420 --> 00:49:58.920
And when I originally wrote it,
I was a bit worried that it was too thin.

00:49:58.920 --> 00:50:01.800
It's only 250 pages,
and I kept trying to think

00:50:01.880 --> 00:50:03.230
of more stuff to write.

00:50:03.270 --> 00:50:07.270
And then somebody pointed out to me that,
in fact, that's the point of Bonjour.

00:50:07.560 --> 00:50:11.080
Everything you need to know
about it is in 250 pages,

00:50:11.080 --> 00:50:13.560
and its simplicity is its great strength.

00:50:13.690 --> 00:50:16.490
So I actually checked at
Stasis up the road here,

00:50:16.490 --> 00:50:19.680
just up on Market,
turn right about four blocks.

00:50:19.680 --> 00:50:21.750
They have copies in stock,
so if you want something to

00:50:21.760 --> 00:50:25.240
read on the airplane going home,
you can pick up a copy there.

00:50:25.380 --> 00:50:28.400
In fact, they have an end cap display,
which is really cool.

00:50:28.450 --> 00:50:31.320
I've never had an end cap
display in a bookshop before.

00:50:32.410 --> 00:50:36.610
Come to our Plugfest tonight
at the Apple Campus Bash.

00:50:36.620 --> 00:50:40.160
If you've got hardware
devices you want to try out,

00:50:40.160 --> 00:50:45.100
debug, have help troubleshooting,
or just cool stuff you want to show us,

00:50:45.190 --> 00:50:52.330
or even if you don't have devices,
if you just want to come along and have

00:50:52.330 --> 00:50:54.890
a chat and socialize with the team,
we would love to see you in the

00:50:54.890 --> 00:50:54.890
piano bar at the Apple Campus.

00:50:56.230 --> 00:51:00.640
So, summary to take away
from today's session.

00:51:00.650 --> 00:51:03.200
Bonjour is really, really easy to adopt.

00:51:03.240 --> 00:51:06.200
It's a few lines of code in Ruby.

00:51:06.200 --> 00:51:09.430
If you're putting in a hardware device,
especially if you run embedded

00:51:09.490 --> 00:51:13.160
Linux or a similar platform like that,
you grab the Darwin code, you type make,

00:51:13.210 --> 00:51:15.830
it works,
you take the rest of the afternoon off.

00:51:15.880 --> 00:51:19.880
I've personally been on site at more than
one company where we do exactly that.

00:51:19.880 --> 00:51:22.240
We check out the code, we build it,
it works first time,

00:51:22.280 --> 00:51:25.270
we check it into their CVS server,
and then it's done.

00:51:25.320 --> 00:51:27.330
We tell management it's
showing up in Safari,

00:51:27.330 --> 00:51:29.820
it's showing up in Explorer,
and that's all it takes.

00:51:29.880 --> 00:51:33.880
It makes your products easy
and reliable and a pleasure

00:51:34.180 --> 00:51:36.330
to use instead of a torment.

00:51:36.330 --> 00:51:38.330
And it's free from Apple.

00:51:38.440 --> 00:51:42.980
So, I hope with the demos I've showed you
today and some of this cool hardware,

00:51:43.130 --> 00:51:49.260
I've inspired you to make cool
hardware products that use Bonjour,

00:51:49.620 --> 00:51:51.240
cool software that uses Bonjour.

00:51:51.240 --> 00:51:56.120
If you're the users of network products
today that you wish to use Bonjour,

00:51:56.120 --> 00:51:59.800
then tell those companies
that you want them to do that.

00:51:59.800 --> 00:52:04.360
Tell them to look on the
web page for documentation,

00:52:04.360 --> 00:52:06.790
contact Apple, get a copy of the book.