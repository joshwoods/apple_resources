WEBVTT

00:00:10.250 --> 00:00:11.180
Hello there.

00:00:11.450 --> 00:00:16.220
This is session 126, Optimizing
Performance Through Testing and Tracking.

00:00:16.220 --> 00:00:20.210
My name is Vicki Murley,
and I work in the platform experience

00:00:20.210 --> 00:00:22.500
group at Apple on performance.

00:00:22.500 --> 00:00:25.120
So let's get right into it here.

00:00:25.120 --> 00:00:28.720
When most people talk about
optimizing performance,

00:00:28.720 --> 00:00:32.680
what they're really kind of talking
about is the very conventional,

00:00:32.680 --> 00:00:35.800
very sort of typical,
retroactive approach.

00:00:36.360 --> 00:00:38.920
And what I mean when I say that is,
you know,

00:00:38.920 --> 00:00:40.940
we sort of all know how it works.

00:00:40.940 --> 00:00:42.220
We're all developers here.

00:00:42.220 --> 00:00:47.730
The software is almost finished,
but it takes 10 seconds to launch.

00:00:47.800 --> 00:00:51.060
Or maybe it, you know,
consumes lots of memory.

00:00:51.060 --> 00:00:56.280
Or I'm using it,
something just doesn't quite feel right.

00:00:56.300 --> 00:00:58.980
So what happens is,
you notice these really

00:00:58.980 --> 00:01:02.800
terrible problems,
and you turn to the wonderful tools

00:01:02.800 --> 00:01:05.700
that we ship in the developer folder.

00:01:06.360 --> 00:01:10.710
Such as, you know, Shark, Sampler,
Malik Debug, etc., etc.

00:01:10.840 --> 00:01:13.830
And you try to fix, you know, the very,
very worst problems that

00:01:13.830 --> 00:01:14.870
you may have noticed.

00:01:15.020 --> 00:01:19.390
So this is kind of how it typically goes,
at least in my experience.

00:01:19.400 --> 00:01:23.230
This isn't really the best idea.

00:01:23.340 --> 00:01:26.330
For one reason, you know,
a lot of the time,

00:01:26.330 --> 00:01:31.070
the time that you need to fix these
pretty bad performance problems isn't

00:01:31.080 --> 00:01:33.070
necessarily built into the schedule.

00:01:33.160 --> 00:01:36.320
As I mentioned before,
we all know how it goes.

00:01:36.340 --> 00:01:37.900
You're working on a small team.

00:01:37.980 --> 00:01:39.990
You're trying to get
all your features in.

00:01:40.180 --> 00:01:41.770
You're trying to get all your bugs fixed.

00:01:41.840 --> 00:01:45.190
Even if you have built some time
in at the end of the schedule to

00:01:45.190 --> 00:01:49.510
specifically think about performance,
often that time can be sort of overridden

00:01:49.760 --> 00:01:53.460
by your bug fixing time or that last
feature that you're trying to get in.

00:01:53.520 --> 00:01:56.930
So what ends up happening is,
you fix only the worst

00:01:56.930 --> 00:01:59.510
of the worst problems,
if even that.

00:01:59.600 --> 00:02:02.150
You may end up fixing nothing at all.

00:02:02.240 --> 00:02:06.100
So instead of this sort
of old conventional,

00:02:06.100 --> 00:02:09.380
retroactive approach that
lots of people are used to,

00:02:09.420 --> 00:02:12.190
there is actually a
different kind of approach,

00:02:12.230 --> 00:02:15.260
and that is more of a sort
of proactive approach.

00:02:15.300 --> 00:02:20.920
With this approach, you sort of very,
very early in the development process get

00:02:20.990 --> 00:02:23.860
a basic version of your software working.

00:02:24.050 --> 00:02:26.600
And at that point,
you decide that you need

00:02:26.600 --> 00:02:32.820
to decide what to measure,
find a super easy way to measure, test,

00:02:32.820 --> 00:02:35.890
and monitor the results.

00:02:36.130 --> 00:02:40.500
So the tools that you use here are a
lot different from the set of profiling

00:02:40.500 --> 00:02:42.600
tools that we mentioned earlier.

00:02:42.770 --> 00:02:46.240
In most cases,
you're going to be deciding what to test,

00:02:46.250 --> 00:02:48.900
so the tools are going
to be defined by you.

00:02:49.000 --> 00:02:51.830
That's not to say that you
can't use any of the system

00:02:51.840 --> 00:02:56.180
tools that we ship on Mac OS X,
but, you know, for the most part,

00:02:56.350 --> 00:03:00.160
you're thinking about things before
the fact as opposed to afterwards,

00:03:00.160 --> 00:03:02.850
so tools are defined by you.

00:03:03.500 --> 00:05:05.300
[Transcript missing]

00:05:05.720 --> 00:05:07.400
Why should you even
care about performance?

00:05:07.400 --> 00:05:09.640
You know, you're developing software,
working hard.

00:05:09.640 --> 00:05:12.700
Well, first of all,
one reason you should care is because

00:05:12.700 --> 00:05:14.300
your competition probably cares.

00:05:14.300 --> 00:05:18.820
If you're developing a piece of
software or an application that is

00:05:18.820 --> 00:05:24.420
pretty much on par in terms of features
and functionality as your competitor,

00:05:24.420 --> 00:05:28.590
Performance can give you that leg
up to make your app sort of stand

00:05:28.590 --> 00:05:30.880
out and be better than the rest.

00:05:32.050 --> 00:05:37.020
Also, provide a great user experience on
Mac OS X and customer satisfaction.

00:05:37.020 --> 00:05:40.190
You know, people use your product,
find it enjoyable,

00:05:40.190 --> 00:05:43.170
have confidence in your brand,
and want to buy more stuff

00:05:43.170 --> 00:05:44.320
from you down the road.

00:05:45.800 --> 00:07:04.500
[Transcript missing]

00:07:04.900 --> 00:07:08.200
All right, getting started.

00:07:08.260 --> 00:07:09.280
You're starting out.

00:07:09.300 --> 00:07:11.600
You decide, OK,
I'm going to try this out.

00:07:11.600 --> 00:07:13.160
Where do I even begin?

00:07:13.450 --> 00:07:16.840
First thing that you want to do
is sort of decide what to test,

00:07:16.980 --> 00:07:20.080
find an easy way to measure,
and set some goals.

00:07:20.260 --> 00:07:25.260
So let's look at deciding what to
test in a little more in-depth.

00:07:25.650 --> 00:07:29.570
First of all, this may seem obvious,
but I just wanted to point it out anyway.

00:07:29.760 --> 00:07:33.570
You should always, always,
always consider launch time.

00:07:33.900 --> 00:07:39.180
Clicking that icon in the dock or in
the finder is really your user's first

00:07:39.180 --> 00:07:42.700
interaction with your application.

00:07:42.740 --> 00:07:46.640
If you're taking more than three
bounces to launch in the dock,

00:07:46.820 --> 00:07:50.380
that is not going to be a good scenario.

00:07:50.610 --> 00:07:53.680
I know this happens all over the place.

00:07:53.870 --> 00:07:59.770
Apple applications aren't excluded,
but when an application like this laggard

00:07:59.790 --> 00:08:05.260
here takes about 10 seconds to launch,
what's going on there?

00:08:05.260 --> 00:08:10.200
It's almost personally
offensive to me to see that.

00:08:10.200 --> 00:08:13.130
One reason it's so offensive is
because launch time is probably one

00:08:13.150 --> 00:08:15.100
of the easiest things you can measure.

00:08:15.100 --> 00:08:19.120
You can just mock up a little script,
spit out a log, you're good to go.

00:08:19.120 --> 00:08:20.670
You're measuring launch time.

00:08:20.680 --> 00:08:21.680
Boom.

00:08:21.680 --> 00:08:24.060
Doesn't take long at all.

00:08:24.060 --> 00:08:26.260
Secondly,
you're going to be looking around,

00:08:26.260 --> 00:08:29.370
deciding what to test,
and you're going to see that, hey,

00:08:29.380 --> 00:08:30.440
you know, there are some bad things.

00:08:30.440 --> 00:08:33.520
There are some benchmarks out there,
some benchmarks available.

00:08:33.520 --> 00:08:35.320
Be careful.

00:08:35.320 --> 00:08:40.990
Improving the floating point operation
from spec is not necessarily going to

00:08:40.990 --> 00:08:44.160
make Safari load web pages any faster.

00:08:44.160 --> 00:08:47.270
It's kind of will make you seem
like you're making progress,

00:08:47.320 --> 00:08:49.670
but really,
when you're looking at these sort

00:08:49.680 --> 00:08:52.920
of existing benchmarks out there,
you have to evaluate their

00:08:52.920 --> 00:08:56.250
relevance and investigate them
thoroughly to see if they apply to

00:08:56.390 --> 00:08:58.170
what you're actually trying to do.

00:09:00.480 --> 00:09:04.480
So instead of sort of using
these existing benchmarks,

00:09:04.620 --> 00:09:10.940
one really great idea is to sort of
focus on the most frequent and important

00:09:10.950 --> 00:09:12.860
user actions for your application.

00:09:12.860 --> 00:09:17.440
You might even put this in terms
of sort of your flagship feature.

00:09:17.440 --> 00:09:20.360
For Safari, we're loading web pages.

00:09:20.360 --> 00:09:21.470
Not that complicated.

00:09:21.480 --> 00:09:29.390
If you're an RSS reader, you want to,
you know, read and render RSS feeds.

00:09:29.560 --> 00:09:32.980
If you're a photo browser,
you want to load and display photos.

00:09:32.980 --> 00:09:36.060
What is the purpose of your application?

00:09:36.060 --> 00:09:39.000
That is the thing that
you want to focus on here.

00:09:42.350 --> 00:09:46.160
Before I get started about, you know,
deciding,

00:09:46.320 --> 00:09:49.690
talking about how to create your
test and how to define your test,

00:09:49.690 --> 00:09:52.600
I wanted to point out you're
going to be testing often,

00:09:52.600 --> 00:09:55.690
very often,
probably more than you're used to.

00:09:55.700 --> 00:09:59.460
And for this reason,
the test that you create to test

00:09:59.460 --> 00:10:05.140
performance should be incredibly,
incredibly, incredibly easy to use.

00:10:05.680 --> 00:10:12.280
First of all,
it should be accessible to every

00:10:12.890 --> 00:10:22.900
engineer who is working on the project,
and it should be accessible to

00:10:22.900 --> 00:10:25.390
everyone who is working on the project.

00:10:26.320 --> 00:10:32.590
Secondly, you do not want to have a long,
complicated setup process.

00:10:32.700 --> 00:10:34.360
It should be one time.

00:10:34.380 --> 00:10:35.710
You never have to do it again.

00:10:35.780 --> 00:10:37.800
It shouldn't take that long.

00:10:37.800 --> 00:10:39.890
Easy is the key here.

00:10:40.230 --> 00:10:43.860
To execute things, it should just be one
click or one command.

00:10:43.930 --> 00:10:47.710
And lastly, the test should not
take that long to run.

00:10:47.730 --> 00:10:51.400
If I am trying to make a code
change and test performance in the

00:10:51.400 --> 00:10:55.540
process of making that code change,
I don't want to say, all right,

00:10:55.540 --> 00:10:57.250
I've got my change ready.

00:10:57.420 --> 00:10:59.220
Now I'm going to test performance.

00:10:59.440 --> 00:11:01.660
Three hours later, I'll have the result.

00:11:01.700 --> 00:11:02.750
It's absolutely unacceptable.

00:11:02.840 --> 00:11:04.760
No one's going to run a tool like that.

00:11:04.790 --> 00:11:07.060
No one changing the
code wants to do that.

00:11:07.200 --> 00:11:11.800
So make sure the total time that
it takes to run the test is low.

00:11:13.760 --> 00:11:15.080
Got my change ready.

00:11:15.120 --> 00:11:16.980
Now I'm going to test Performance.

00:11:17.020 --> 00:11:19.300
Three hours later, I'll have the result.

00:11:19.300 --> 00:11:20.480
It's absolutely unacceptable.

00:11:20.480 --> 00:11:21.800
No one's going to run a tool like that.

00:11:21.800 --> 00:11:24.380
No one changing the
code wants to do that.

00:11:24.380 --> 00:11:28.230
So make sure the total time that
it takes to run the test is low.

00:11:43.600 --> 00:11:46.890
So that was a really great thing
for us to focus on because we

00:11:46.890 --> 00:11:51.130
found that by focusing on time,
as opposed to focusing on time

00:11:51.130 --> 00:11:55.940
and memory or time and whatever,
if time got worse,

00:11:55.950 --> 00:11:58.840
then that could indicate
a larger problem.

00:11:58.840 --> 00:12:02.400
Maybe we slowed down today and
that's because we have a horrible

00:12:02.440 --> 00:12:04.760
memory leak or something like that.

00:12:04.760 --> 00:12:08.170
So if you're on a small team looking
to get up and running quickly,

00:12:08.400 --> 00:12:11.640
time is a great thing to focus on first.

00:12:12.530 --> 00:12:15.860
So time is a really great thing
for us to focus on because we

00:12:15.860 --> 00:12:20.210
found that by focusing on time,
as opposed to focusing on time

00:12:20.330 --> 00:12:24.840
and memory or time and whatever,
if time got worse,

00:12:24.840 --> 00:12:27.960
then that could indicate
a larger problem.

00:12:28.140 --> 00:12:31.190
Maybe we slowed down today and
that's because we have a horrible

00:12:31.290 --> 00:12:33.740
memory leak or something like that.

00:12:33.740 --> 00:12:35.410
So if you're on a small team looking
to get up and running quickly,

00:12:35.410 --> 00:12:35.410
time is a great thing to focus on first.

00:12:38.980 --> 00:12:39.660
Hi, hi, thanks.

00:12:39.660 --> 00:12:44.140
The Safari page load test is really
a great example of the things

00:12:44.140 --> 00:12:45.870
Vicki has been talking about.

00:12:45.880 --> 00:12:46.440
It's a test.

00:12:46.460 --> 00:12:50.500
It's simple, easy to run,
built right into the application.

00:12:50.500 --> 00:12:53.320
It gives you test results back very,
very quickly.

00:12:53.320 --> 00:12:55.140
So I'd like to give you a look.

00:12:56.160 --> 00:12:58.200
Now,
when I say that the page load test is

00:12:58.200 --> 00:13:02.240
built into every version of Safari,
I really do mean every version of Safari,

00:13:02.240 --> 00:13:05.160
including the ones if you've
got a laptop out there.

00:13:05.160 --> 00:13:06.890
You've got the page load test.

00:13:06.890 --> 00:13:08.790
It actually ships out on the DVD.

00:13:08.830 --> 00:13:12.190
Now,
the one thing you need to do to enable

00:13:12.190 --> 00:13:15.280
it is turn on the Safari debug menu.

00:13:15.280 --> 00:13:19.340
Now, if you're not familiar with this,
you can just turn it on with

00:13:19.340 --> 00:13:21.290
a simple default right there.

00:13:21.320 --> 00:13:24.060
If you can't read that,
you can just search in

00:13:24.080 --> 00:13:26.040
Google Safari debug menu.

00:13:26.160 --> 00:13:27.220
You'll find out how to do this.

00:13:27.250 --> 00:13:32.200
And so now that I've turned this on,
I launch Safari, and you'll notice now at

00:13:32.200 --> 00:13:35.360
the end of the menu bar,
I've got this new menu,

00:13:35.360 --> 00:13:39.190
which has a number of interesting
features in it that we used

00:13:39.640 --> 00:13:41.460
over time to develop Safari.

00:13:41.460 --> 00:13:45.330
And some interesting things
that let you look at DOM trees,

00:13:45.410 --> 00:13:48.010
render trees, and things like that.

00:13:48.050 --> 00:13:51.980
Well, one of the things over here is
the Safari page load test window.

00:13:51.980 --> 00:13:53.840
So for bring this up,
it brings up this very,

00:13:53.920 --> 00:13:54.860
very simple window.

00:13:56.160 --> 00:13:59.710
With a list of URLs in it,
and all I need to do to get

00:13:59.710 --> 00:14:03.510
it going is click start,
and it'll go through and load

00:14:03.630 --> 00:14:06.320
all of the web pages in the list.

00:14:06.360 --> 00:14:09.110
Now, you know,
one of the things about the

00:14:09.470 --> 00:14:13.390
Safari page load test is,
you know, when I say it's simple to use,

00:14:13.390 --> 00:14:17.060
well, it really must be simple,
because here I am trying

00:14:17.060 --> 00:14:18.920
to think of what to say.

00:14:18.920 --> 00:14:20.080
I don't want to mess up or whatever.

00:14:20.080 --> 00:14:21.920
I can still run the page load test.

00:14:21.920 --> 00:14:26.090
So it really is just that
simple to get going and use.

00:14:26.160 --> 00:14:28.880
Now,
now that it's actually finished running,

00:14:28.890 --> 00:14:31.410
I want to point out that
just down here at the bottom,

00:14:31.410 --> 00:14:33.390
I know it's a little
bit difficult to see,

00:14:33.390 --> 00:14:36.430
but there's just one number here,
just one line of information

00:14:36.430 --> 00:14:38.180
down here in the lower right.

00:14:38.180 --> 00:14:41.510
And this is the one number
that we use to really,

00:14:41.510 --> 00:14:45.870
you know, as our takeaway from
running the page load test.

00:14:45.890 --> 00:14:49.400
It's one number,
which is just a little statistical work,

00:14:49.400 --> 00:14:53.240
which is how long did it take to
load each one of those web pages.

00:14:53.240 --> 00:14:57.690
So now if I go again,
it's actually... 317 milliseconds.

00:14:57.750 --> 00:15:00.740
If we kind of go and take a look,
we can see, yeah, it's a, you know,

00:15:00.740 --> 00:15:02.440
sort of about that fast.

00:15:02.560 --> 00:15:08.730
So now, you know,
about the page load test and, you know,

00:15:08.730 --> 00:15:10.570
how it becomes useful to us.

00:15:10.580 --> 00:15:12.950
Well, one of the thing,
one of the big characteristics

00:15:12.990 --> 00:15:14.310
about it is that it's done.

00:15:14.310 --> 00:15:15.280
It exists.

00:15:15.280 --> 00:15:20.470
When I, you know, I, you know,
set about writing this tool, well,

00:15:20.610 --> 00:15:24.510
you know, I think the, you know,
a kind of the engineer tendency might be,

00:15:24.600 --> 00:15:26.140
well, I'm going to go and I'm going
to make this whole engine.

00:15:26.160 --> 00:15:28.000
And I'll have this infrastructure
and I'll have these pieces.

00:15:28.000 --> 00:15:31.300
I have this database and this test
suite and everything like that.

00:15:31.550 --> 00:15:33.860
Well, you know,
something like that might never

00:15:33.860 --> 00:15:37.290
get done because of the press of
the other work that you need to do.

00:15:37.490 --> 00:15:38.830
And so I just coded this up.

00:15:38.840 --> 00:15:41.640
It took, you know,
a day or two to get this going.

00:15:41.660 --> 00:15:45.300
The fact that it's built in, you know,
Vicky, you know, quite, quite honestly,

00:15:45.320 --> 00:15:47.020
now we've discovered it over time.

00:15:47.020 --> 00:15:48.840
It's a really virtue to
have this thing built in.

00:15:48.840 --> 00:15:52.700
But honestly, I've got to tell you,
I was just too lazy to kind

00:15:52.700 --> 00:15:55.940
of make a framework and expose
APIs and make a separate test.

00:15:56.160 --> 00:15:57.840
Program and things like that.

00:15:57.970 --> 00:16:00.790
So I just built it into the
Safari application because it was

00:16:00.790 --> 00:16:03.980
the easiest way to get at the guts
of Safari and get it to go to another

00:16:03.980 --> 00:16:05.960
URL once it was done loading one.

00:16:05.960 --> 00:16:07.840
But it actually turns
out to be this great,

00:16:07.940 --> 00:16:10.510
great benefit because now if
you've got the source code,

00:16:10.520 --> 00:16:11.640
you've got the test.

00:16:11.640 --> 00:16:14.100
You don't have to worry about
gathering up a different piece.

00:16:15.770 --> 00:16:18.300
And as you can see, again,
as I've already pointed out,

00:16:18.340 --> 00:16:21.990
it's easy to run and that it
produces this one key result when

00:16:21.990 --> 00:16:24.820
you're done that allows you very,
very quickly,

00:16:24.820 --> 00:16:27.180
if you've made a code change,
this is really one of

00:16:27.180 --> 00:16:28.320
the ways how we use it.

00:16:28.360 --> 00:16:31.940
As we go and make a code change
and we're ready to check it in,

00:16:31.940 --> 00:16:33.530
run the page load test.

00:16:33.620 --> 00:16:35.320
You saw it's simple, quick,
and easy to do.

00:16:35.320 --> 00:16:37.420
So now I've made that code change.

00:16:37.420 --> 00:16:40.540
I can now confirm that it
doesn't hurt performance.

00:16:42.120 --> 00:16:45.970
Or maybe it did hurt performance and boy,
I'd better not check that in or else,

00:16:46.150 --> 00:16:47.790
you know,
Vicki will tell you a little bit

00:16:47.790 --> 00:16:49.430
about how we handle regressions.

00:16:49.440 --> 00:16:52.250
But, you know, it just saves you a lot
of trouble to go back and,

00:16:52.250 --> 00:16:54.140
you know,
later try to figure out where the

00:16:54.140 --> 00:16:57.210
regression may be kept into the
tree if you didn't run the test.

00:16:57.220 --> 00:17:02.820
And so one of the other things that
it does is it lets you experiment.

00:17:02.820 --> 00:17:06.750
If you've got a code change and maybe you
go and you're focusing in on performance,

00:17:06.750 --> 00:17:09.900
you say, well, I'm going to try to
speed up page rendering.

00:17:09.900 --> 00:17:12.020
I'm going to try to speed
up HTML performance.

00:17:12.130 --> 00:17:12.760
I'm going to try to speed
up HTML performance.

00:17:12.840 --> 00:17:15.230
And so you can go and make
that change and then very,

00:17:15.230 --> 00:17:18.400
very quickly turn it around and
see whether or not that code change

00:17:18.400 --> 00:17:20.670
actually did what you intended it to do.

00:17:20.810 --> 00:17:24.770
And so just kind of in closing up,
I mean, the page load test has been,

00:17:24.770 --> 00:17:27.690
you know, really,
really the essential tool that

00:17:27.750 --> 00:17:31.450
we've used over the years to
improve page load performance.

00:17:31.460 --> 00:17:35.120
Just simple, easy to run,
gives us that one result that we can

00:17:35.140 --> 00:17:39.100
compare to results that have come
before and really lets us track and

00:17:39.210 --> 00:17:41.680
keep our eyes on making the changes.

00:17:42.120 --> 00:17:43.180
making the browser faster.

00:17:43.180 --> 00:17:43.880
So that's it.

00:17:44.140 --> 00:17:44.390
Thank you.

00:17:51.400 --> 00:17:54.160
Okay, thanks Ken.

00:17:54.160 --> 00:17:56.250
The two things that I want
to stress about this,

00:17:56.450 --> 00:18:01.170
about the page load test, A,
it took a day and a half to code up

00:18:01.170 --> 00:18:06.160
and we're using it five years later,
and B, it's extremely easy to use.

00:18:06.160 --> 00:18:09.400
If it hadn't been easy to use,
no one would be using it today.

00:18:09.500 --> 00:18:13.310
You know, made back in 2001,
we're still using it today.

00:18:13.400 --> 00:18:14.450
Super useful.

00:18:14.450 --> 00:18:14.500
Okay.

00:18:15.430 --> 00:18:18.780
So once you've got your tool together,
you can think about setting some goals.

00:18:18.780 --> 00:18:23.400
And one way to think about this is to
compare directly with your competitors.

00:18:23.440 --> 00:18:28.100
For us, this meant comparing against
Mozilla-based browsers,

00:18:28.100 --> 00:18:31.260
like at the time it was Camino,
now it's Firefox, and Mac IE,

00:18:31.260 --> 00:18:36.440
which had the largest browser
share on the Mac at the time.

00:18:36.440 --> 00:18:37.820
Hard to believe, but true.

00:18:39.080 --> 00:18:44.110
We were lucky in that we found a sort
of networked version of the page load

00:18:44.110 --> 00:18:47.880
test where we could compare directly
in other browsers with the same test,

00:18:48.030 --> 00:18:50.960
but a lot of the time,
that's not going to be possible.

00:18:50.960 --> 00:18:54.120
So hand timings are sometimes necessary.

00:18:54.130 --> 00:18:57.840
It sounds like a pain, but really,
it's something that you do once,

00:18:57.980 --> 00:19:00.790
you have the baseline,
you're not trying to get

00:19:00.790 --> 00:19:03.380
a super exact number,
you're just trying to see

00:19:03.380 --> 00:19:05.310
if you're in the ballpark.

00:19:05.390 --> 00:19:09.300
Also, if you have a tool that's built
directly into the software,

00:19:09.300 --> 00:19:12.020
you can't build that tool right
into your competitor's software.

00:19:12.020 --> 00:19:16.580
So, as I said,
hand timings are sometimes necessary,

00:19:16.580 --> 00:19:19.020
but luckily,
you only have to do them once.

00:19:19.020 --> 00:19:20.970
So, yeah.

00:19:21.100 --> 00:21:15.900
[Transcript missing]

00:21:16.490 --> 00:21:18.970
So, just to go over what
we just talked about,

00:21:19.080 --> 00:21:23.580
you want to decide what to test,
find an easy way to measure,

00:21:23.690 --> 00:21:25.180
and set some goals.

00:21:25.460 --> 00:21:28.940
That's kind of how you're going to
get started with this whole thing.

00:21:29.140 --> 00:21:32.040
Once you have all those things done,
it's time to test.

00:21:32.080 --> 00:21:35.650
As I mentioned before,
you're going to be testing pretty often,

00:21:35.650 --> 00:21:38.770
but if you've kind of followed
the principles and practices

00:21:38.820 --> 00:21:40.800
that we've set out so far,
you're going to have a tool

00:21:40.800 --> 00:21:41.850
that's really easy to use.

00:21:41.980 --> 00:21:43.210
So it's not going to
be as bad as you think.

00:21:43.220 --> 00:21:46.670
In this section,
we're going to talk about when to test,

00:21:46.720 --> 00:21:49.720
checkpoint testing,
and your test environment

00:21:49.720 --> 00:21:51.580
that you may want to set up.

00:21:52.890 --> 00:21:55.040
So first of all, when should I test?

00:21:55.180 --> 00:21:56.050
I have this tool.

00:21:56.310 --> 00:21:59.580
Well,
you should really test before committing

00:22:00.020 --> 00:22:02.800
any code changes to the repository.

00:22:03.000 --> 00:22:05.790
Like I said, this may sound like a pain,
but if you've got a tool

00:22:05.790 --> 00:22:09.520
that's super easy to run,
there's really no reason not to.

00:22:09.680 --> 00:22:13.250
Not just code changes that
may affect performance either.

00:22:13.490 --> 00:22:17.300
Any code change, test them all.

00:22:18.040 --> 00:22:21.960
Of course, this includes during
new feature development.

00:22:21.960 --> 00:22:25.200
Feature development is the
worst time for bad performance

00:22:25.200 --> 00:22:30.480
regression sneaking into your code,
so you definitely want to test then.

00:22:30.480 --> 00:22:33.880
And lastly,
for those rare occasions when each

00:22:33.880 --> 00:22:38.690
individual engineer may forget to test
before checking in their code change,

00:22:38.690 --> 00:22:42.100
it's sometimes a good idea,
it's usually a good idea to set up a

00:22:42.100 --> 00:22:46.920
dedicated test machine where you can
build the source on a daily basis,

00:22:47.000 --> 00:22:50.200
test things out,
and see what the results are.

00:22:50.200 --> 00:22:54.320
So let's talk about that
daily testing for a second.

00:22:54.320 --> 00:22:57.070
Everyone is going to be running
the performance test before

00:22:57.100 --> 00:23:00.160
they're checking in code,
but sometimes it's useful to have

00:23:00.170 --> 00:23:02.020
this sort of safety net as well.

00:23:02.020 --> 00:23:06.600
So you have to think about what kind
of environment do I want to use?

00:23:06.600 --> 00:23:10.370
For us, it was really useful to
choose a slow machine.

00:23:10.440 --> 00:23:15.070
At the time when we started this,
the 800 megahertz iMac was sort of

00:23:15.120 --> 00:23:17.400
the standard level consumer machine.

00:23:17.400 --> 00:23:23.000
That's G4, iMac 800 megahertz, very slow.

00:23:23.000 --> 00:23:26.190
And what we learned was, as time went on,
different engineers on the

00:23:26.190 --> 00:23:30.220
team would get new hardware,
and Dave would say, "Hey,

00:23:30.220 --> 00:23:35.400
I totally tested performance before
I checked in this code change.

00:23:35.400 --> 00:23:38.640
I have a dual 2 gigahertz
G5," or whatever.

00:23:38.640 --> 00:23:41.530
And I'd be able to say, "Well,
you know what?

00:23:41.680 --> 00:23:44.740
I do see a performance regression
on the old slow iMac." So,

00:23:44.740 --> 00:23:45.680
and then you have to think about
what you're going to do with that.

00:23:45.680 --> 00:23:47.590
And that was very helpful for us.

00:23:47.640 --> 00:23:50.720
It helped us identify those super
small regressions that we didn't

00:23:50.810 --> 00:23:52.640
want to let slip through the cracks.

00:23:55.110 --> 00:23:58.110
In addition,
you also want to make sure that

00:23:58.110 --> 00:24:03.000
the environment you set up is
really a controlled environment.

00:24:03.000 --> 00:24:06.490
By that,
I mean that you want to eliminate

00:24:06.590 --> 00:24:10.630
any variants that may creep in
during testing in order to understand

00:24:10.680 --> 00:24:12.090
the results that you're seeing.

00:24:13.070 --> 00:24:17.260
What I mean by that is, I test on Monday.

00:24:17.410 --> 00:24:18.640
I test on Tuesday.

00:24:18.850 --> 00:24:20.150
We look 5% slower.

00:24:20.150 --> 00:24:22.050
The number is 5% higher.

00:24:22.050 --> 00:24:24.660
Am I seeing a genuine
performance regression,

00:24:24.660 --> 00:24:27.120
or am I seeing, oh,
Spotlight was running,

00:24:27.120 --> 00:24:28.570
or something like that?

00:24:31.220 --> 00:24:35.080
Really, to make this work,
you're going to want to aim for a

00:24:35.160 --> 00:24:40.190
variance of about 1%. If you don't
achieve 1%, you're going to miss those

00:24:40.190 --> 00:24:45.560
small 2% and 3% gains that you might get,
which could really add up over time

00:24:45.560 --> 00:24:47.990
to a big performance improvement.

00:24:48.280 --> 00:24:50.680
So in terms of setting up
this controlled environment,

00:24:50.680 --> 00:24:53.120
there's a few big ones
and a few small ones.

00:24:53.120 --> 00:24:56.540
First of all, Spotlight, it's a huge one.

00:24:56.540 --> 00:24:59.190
If your app doesn't depend on it,
turn it off.

00:24:59.300 --> 00:25:03.480
Demons on the system, again,
if your software doesn't depend on it,

00:25:03.480 --> 00:25:05.000
turn that off as well.

00:25:05.000 --> 00:25:08.600
Network activity,
if your app doesn't depend on it,

00:25:08.600 --> 00:25:09.440
it can go.

00:25:09.440 --> 00:25:13.920
This is an interesting one because it
also sort of illustrates the point that

00:25:13.920 --> 00:25:16.220
you can also set up a closed network.

00:25:16.560 --> 00:25:21.200
It's not to say that you have to
eliminate all network activity entirely,

00:25:21.200 --> 00:25:24.080
but you do need to create
a sort of consistent,

00:25:24.300 --> 00:25:26.020
controlled environment.

00:25:27.670 --> 00:25:32.520
We also found that sometimes inconsistent
user settings could cause variance.

00:25:32.690 --> 00:25:37.530
Bookmark files of different size,
history files of different sizes could

00:25:37.530 --> 00:25:40.000
have varying impacts on performance.

00:25:40.090 --> 00:25:43.460
And we wanted to know exactly what
we were looking at every single day.

00:25:43.670 --> 00:25:46.780
Like I said,
is this a genuine performance regression

00:25:46.840 --> 00:25:48.850
or did the history file get bigger?

00:25:48.990 --> 00:25:51.090
So wipe those out every time.

00:25:51.220 --> 00:25:55.420
And lastly, you know,
beyond the sort of big three and,

00:25:55.420 --> 00:25:59.660
you know, the user settings,
it's really a sort of iterative

00:25:59.660 --> 00:26:01.480
and investigative process.

00:26:01.690 --> 00:26:04.890
You're going to be running this test,
checking out the results.

00:26:05.070 --> 00:26:07.090
You may see a little bit
of variance here and there,

00:26:07.200 --> 00:26:08.900
and it'll take a little
bit of investigation.

00:26:09.010 --> 00:26:12.800
Maybe there's some variance in the
code that's running in your app,

00:26:12.870 --> 00:26:15.780
et cetera, et cetera,
but you can narrow those

00:26:15.780 --> 00:26:17.390
things down over time.

00:26:18.120 --> 00:26:22.140
So, once you have a controlled
environment set up,

00:26:22.140 --> 00:26:24.950
you can start tracking your results.

00:26:25.010 --> 00:26:26.960
Once you have your test set up,
you can start tracking your results.

00:26:27.040 --> 00:26:31.950
By this, you may be thinking, okay,
now's the time when we're going

00:26:31.950 --> 00:26:34.650
to start creating charts or,
you know,

00:26:34.740 --> 00:26:38.000
getting a database together or whatever,
but that's not what we're

00:26:38.000 --> 00:26:39.330
going to talk about.

00:26:39.360 --> 00:26:43.710
Really, there are only three numbers
that you really care about.

00:26:43.750 --> 00:26:47.680
Yesterday's number, today's number,
and your goal.

00:26:48.000 --> 00:26:51.680
I tested yesterday,
or I tested before my code change.

00:26:51.680 --> 00:26:55.180
I tested today,
or I tested after my code change.

00:26:55.180 --> 00:26:57.380
Am I faster, or am I slower?

00:26:57.380 --> 00:27:00.880
You can make this work on
a change-by-change basis.

00:27:00.880 --> 00:27:02.770
The test is super easy to run.

00:27:02.770 --> 00:27:04.540
We saw the page load test.

00:27:04.540 --> 00:27:07.170
And, you know, of course you want to keep
your goal in mind because you

00:27:07.170 --> 00:27:08.430
want to know how close you are.

00:27:08.650 --> 00:27:12.150
But, you know, it's not to say that
charting your results or,

00:27:12.150 --> 00:27:14.880
you know,
graphs or anything like that are not

00:27:14.880 --> 00:27:17.420
useful because they most certainly are.

00:27:18.000 --> 00:27:20.490
Especially to the people who
are managing your project.

00:27:20.680 --> 00:27:23.900
But for you as a developer,
when you're thinking about performance,

00:27:23.920 --> 00:27:27.500
you know,
this is a pretty easy way to do things.

00:27:28.210 --> 00:27:31.800
When you're looking at yesterday's
number versus today's number,

00:27:31.800 --> 00:27:35.530
or sort of pre-change
versus post-change number,

00:27:35.540 --> 00:27:39.060
it's an interesting thing to
actually look at the percentage

00:27:39.060 --> 00:27:42.270
delta as opposed to the raw number.

00:27:42.470 --> 00:27:47.140
You may say, OK, well,
I only slowed down by 10 milliseconds.

00:27:47.370 --> 00:27:48.730
Whatever, no problem.

00:27:48.870 --> 00:27:51.740
But 10 milliseconds,
if your test only takes

00:27:51.790 --> 00:27:54.970
100 milliseconds to run,
that's a 10% regression.

00:27:55.080 --> 00:27:56.890
So that's huge.

00:27:57.620 --> 00:28:01.700
Lastly, it's often useful to
compare against a baseline.

00:28:01.820 --> 00:28:05.440
Let's say your variance in your
test is around like 2 or 3 percent,

00:28:05.640 --> 00:28:10.080
and so you're testing on a daily basis,
and you see maybe a 2 percent

00:28:10.080 --> 00:28:12.510
change here and there,
and you think, oh,

00:28:12.510 --> 00:28:14.120
it must be just variance, whatever.

00:28:14.440 --> 00:28:16.460
If it's not variance,
and it turns out to be

00:28:16.460 --> 00:28:19.560
a genuine regression,
these things can stack up over time.

00:28:19.560 --> 00:28:23.690
So it's a good idea to know your
starting point and sort of make

00:28:23.890 --> 00:28:28.070
sure that you don't go above
a certain baseline over time.

00:28:28.080 --> 00:28:31.460
And of course, that baseline has to be
adjusted here and there,

00:28:31.520 --> 00:28:34.220
but it's a great idea to
sort of guard against those,

00:28:34.220 --> 00:28:37.830
you know, sort of small little one-off
slowdowns that may creep in if

00:28:37.910 --> 00:28:39.840
you're not watching closely.

00:28:39.840 --> 00:28:44.420
So for testing,
we want to test before committing.

00:28:44.450 --> 00:28:50.990
So before committing any code change,
set up a safety net, and lastly,

00:28:50.990 --> 00:28:53.490
stay vigilant.

00:28:53.740 --> 00:28:55.790
Now, we have our tool together.

00:28:56.010 --> 00:28:59.740
We've been testing our
faces off all the time.

00:28:59.740 --> 00:29:04.120
When I check in a code change,
we're testing daily.

00:29:04.120 --> 00:29:06.810
It's not that hard because it's
built right into the software.

00:29:07.000 --> 00:29:11.700
But what happens when we have
a performance regression?

00:29:11.730 --> 00:29:14.600
Well, in this section,
we're going to talk about some

00:29:14.600 --> 00:29:16.520
tips for handling regressions.

00:29:16.540 --> 00:29:21.350
And we're also going to talk about the
lessons that we learned over time in

00:29:21.480 --> 00:29:23.980
dealing with these sorts of things.

00:29:23.980 --> 00:29:27.960
So when it comes to handling
performance regressions,

00:29:27.990 --> 00:29:30.240
there's really only one
tip that you need to know.

00:29:30.310 --> 00:29:34.610
And that is that you should have zero
tolerance for performance regressions.

00:29:34.770 --> 00:29:38.160
So what do I mean exactly
when I say zero tolerance?

00:29:38.330 --> 00:29:42.130
Well, for us on the Safari team,
it meant that if we

00:29:42.130 --> 00:29:45.540
came in in the morning,
tried out our safety net,

00:29:45.560 --> 00:29:48.020
and saw that we were
slower than the day before,

00:29:48.210 --> 00:29:52.120
the source tree was closed
until that problem was resolved.

00:29:52.140 --> 00:29:57.010
So then what we would do is start
looking at all the code changes

00:29:57.010 --> 00:30:01.060
that occurred in the last 24 hours.

00:30:01.270 --> 00:30:03.480
Sometimes you can look
through that list and say,

00:30:03.500 --> 00:30:07.590
oh, I think it might be this one that has
to do with text layout or this one

00:30:07.590 --> 00:30:09.390
that has to do with image rendering.

00:30:09.540 --> 00:30:11.260
Seems like that could impact performance.

00:30:11.480 --> 00:30:14.000
But a lot of times,
this just turned out to be

00:30:14.000 --> 00:30:16.080
a plain old binary search.

00:30:16.330 --> 00:30:18.780
Build the tree at one point in time.

00:30:18.780 --> 00:30:19.680
Test.

00:30:19.690 --> 00:30:21.160
Check the result.

00:30:21.190 --> 00:30:22.580
Build at another point in time.

00:30:22.700 --> 00:30:23.650
Test again.

00:30:23.770 --> 00:30:27.920
And that was the way that we were able to
find the specific code change that caused

00:30:27.920 --> 00:30:29.820
the regression that we were looking for.

00:30:29.980 --> 00:30:34.020
So what would typically happen is,
as I said, you come in in the morning,

00:30:34.080 --> 00:30:37.100
run the test, see a regression.

00:30:37.100 --> 00:30:39.420
And then maybe I'd send out
a little email that says,

00:30:39.500 --> 00:30:42.790
hey, everybody,
there's been a performance regression.

00:30:42.820 --> 00:30:44.200
Just wanted to let you know.

00:30:44.370 --> 00:30:48.290
I'm working to track it down,
but the tree's closed for now.

00:30:48.590 --> 00:30:51.070
Cheers, Vicki.

00:30:52.040 --> 00:30:55.130
Nine minutes later,
I would get this sort of thing.

00:30:55.140 --> 00:30:58.550
Hey, is the tree open yet?

00:30:58.920 --> 00:31:03.730
Nineteen minutes later, hey,
when's the tree going to be open?

00:31:03.840 --> 00:31:06.240
Hey, I have these bug fixes in my tree.

00:31:06.240 --> 00:31:09.750
I totally would like to
check them in sometime soon.

00:31:09.870 --> 00:31:10.210
What's up?

00:31:10.310 --> 00:31:11.950
Is the tree open?

00:31:12.080 --> 00:31:14.800
An hour later,
people start to get a little ticked off.

00:31:14.800 --> 00:31:18.800
I hate you, you know, was pretty typical.

00:31:18.800 --> 00:31:26.320
I didn't want to put that up there, but,
you know, people start to get crazy.

00:31:28.100 --> 00:31:32.030
So, you know, for me,
sending out this email, this was kind of,

00:31:32.180 --> 00:31:36.890
you know, hard to deal with, but luckily,
I had the backing of the boss plus 15.

00:31:36.900 --> 00:31:40.880
So you can see how that really helped.

00:31:40.980 --> 00:31:44.180
What happens is, you know,
we have sort of this

00:31:44.180 --> 00:31:46.140
zero tolerance policy.

00:31:46.140 --> 00:31:47.440
The source tree is closed.

00:31:47.440 --> 00:31:49.560
People are upset.

00:31:49.560 --> 00:31:50.640
Let's just say upset.

00:31:50.640 --> 00:31:53.120
They want the tree open again.

00:31:53.120 --> 00:31:56.870
So what ends up happening is a
performance regression becomes a

00:31:56.870 --> 00:31:59.330
sort of all-hands-on-deck scenario.

00:31:59.340 --> 00:32:04.140
And it's amazing when you have, you know,
three or five or seven really

00:32:04.140 --> 00:32:06.700
smart people looking at a problem.

00:32:06.700 --> 00:32:09.520
It can get solved very, very quickly.

00:32:09.520 --> 00:32:12.620
A matter of, you know, minutes at times.

00:32:12.620 --> 00:32:15.600
So that worked out really well for us.

00:32:15.600 --> 00:32:18.120
Secondly, no exceptions.

00:32:18.120 --> 00:32:21.860
Oh,
I moved us over to using this new API.

00:32:22.300 --> 00:32:24.160
Oh, I added this feature or whatever.

00:32:24.300 --> 00:32:26.780
No, no, no exceptions.

00:32:27.410 --> 00:32:30.300
So in dealing with these
performance regressions over

00:32:30.300 --> 00:32:32.310
years and years and years,
there were a lot of

00:32:32.310 --> 00:32:33.270
things that we learned.

00:32:33.280 --> 00:32:37.460
First of all,
we learned that fixing a performance

00:32:37.530 --> 00:32:42.660
problem is easier and more effective
when you know the exact cause.

00:32:42.660 --> 00:32:44.300
We have all these code changes.

00:32:44.300 --> 00:32:45.940
This is the one.

00:32:45.960 --> 00:32:48.300
This one, I don't know where it is.

00:32:48.300 --> 00:32:49.150
This is it.

00:32:49.310 --> 00:32:52.530
But anyway, what I mean is,
you saw before we started doing

00:32:52.530 --> 00:32:56.570
the binary search to find out which
code change caused the problem.

00:32:57.570 --> 00:33:01.180
Once that's identified,
I know exactly what to do to speed it up.

00:33:01.280 --> 00:33:04.680
Or maybe I know exactly what I did wrong
to make it slow in the first place.

00:33:04.680 --> 00:33:07.400
So that's one huge benefit.

00:33:07.400 --> 00:33:11.140
The second great benefit is,
if you're not looking at the exact

00:33:11.140 --> 00:33:16.200
code change that caused the problem,
what you end up doing is you sort of say,

00:33:16.200 --> 00:33:17.240
okay, we're slower.

00:33:17.240 --> 00:33:20.390
Let me run shark or
whatever during the test,

00:33:20.390 --> 00:33:23.220
and I'll just knock off the top thing.

00:33:23.220 --> 00:33:26.700
Well, that sort of knocking off the
top thing should really be saved.

00:33:26.920 --> 00:33:29.490
I mean, not saved,
but it's really useful to do

00:33:29.530 --> 00:33:31.800
that at a time when you're
really focusing on performance.

00:33:31.800 --> 00:33:35.510
If you do that,
sort of knock off the top thing

00:33:35.510 --> 00:33:41.080
instead of knocking off your
change that caused the regression,

00:33:41.080 --> 00:33:43.780
the change that caused the
regression is still in the tree,

00:33:43.830 --> 00:33:45.020
making things slower.

00:33:45.020 --> 00:33:46.060
And that's bad.

00:33:48.100 --> 00:33:52.370
Secondly,
we learned that the complexity of

00:33:52.370 --> 00:33:56.000
the problem increases as time passes.

00:33:56.010 --> 00:34:00.700
And when I say that, I mean that,
you know, I check in code that slows

00:34:00.700 --> 00:34:03.120
everything down and nobody notices.

00:34:03.120 --> 00:34:06.590
So then Ken checks in code
that relies on my code.

00:34:06.640 --> 00:34:09.840
And then John checks in code
that relies on Ken's code,

00:34:09.840 --> 00:34:11.420
which relies on my code.

00:34:11.420 --> 00:34:16.580
And as time wears on,
by time I don't mean weeks, I mean a day.

00:34:16.580 --> 00:34:20.070
You know, it becomes harder and harder
to sort of extricate that

00:34:20.070 --> 00:34:21.970
problem from your source code.

00:34:21.970 --> 00:34:27.130
Solving those problems
quickly was huge for us.

00:34:27.640 --> 00:34:32.290
Thirdly, I mentioned before,
you are going to spend, if you're lucky,

00:34:32.290 --> 00:34:34.720
some time actually
optimizing performance.

00:34:34.720 --> 00:34:38.560
And you want those intentional
optimizations to actually be meaningful.

00:34:38.660 --> 00:34:43.070
By that, I mean, okay,
let's say I looked at the page load

00:34:43.070 --> 00:34:46.400
test and I made it almost 30% faster.

00:34:46.400 --> 00:34:49.490
And then we're watching
performance on a daily basis,

00:34:49.510 --> 00:34:50.610
so it stays low.

00:34:50.620 --> 00:34:53.380
If I'm not watching performance,
you could end up with

00:34:53.380 --> 00:34:54.600
something like this.

00:34:54.600 --> 00:34:58.120
Your 30% optimization,
let's say each one of those

00:34:58.120 --> 00:35:00.100
dots corresponds to a week.

00:35:00.100 --> 00:35:04.440
The optimization that you may
have spent four weeks doing is

00:35:04.440 --> 00:35:06.900
gone in about a month and a half.

00:35:06.900 --> 00:35:09.730
And those dots that are
going upward there aren't

00:35:09.890 --> 00:35:11.820
necessarily huge regressions.

00:35:11.980 --> 00:35:14.300
They all denote a 5% regression.

00:35:14.300 --> 00:35:16.550
So it can really creep up on you.

00:35:16.550 --> 00:35:19.210
That's why you want to be watching.

00:35:20.740 --> 00:35:22.960
Next, this one's kind of interesting too.

00:35:22.960 --> 00:35:27.420
We also learned that by not slowing down,
we actually got faster by

00:35:27.450 --> 00:35:28.880
not doing any work at all.

00:35:28.880 --> 00:35:32.390
You may fix a bug and actually
be fixing a performance problem,

00:35:32.390 --> 00:35:35.930
or you may fix a bug that has nothing
at all to do with performance,

00:35:36.020 --> 00:35:40.310
and your code change just happens
to make things like 2 or 3% faster.

00:35:41.120 --> 00:35:43.650
So,
if you're not sort of watching things,

00:35:43.650 --> 00:35:46.950
this is sort of the data or the
graph that you would never see.

00:35:46.970 --> 00:35:49.750
Like, one day we got a little bit faster,
but then the next two days

00:35:49.770 --> 00:35:52.050
we got a little bit slower,
and then we got faster again,

00:35:52.050 --> 00:35:53.040
and then we got slower.

00:35:53.040 --> 00:35:58.180
Well, if we're watching every day,
and we're guarding against these sort of

00:35:58.240 --> 00:36:02.480
2 or 3% regressions that can creep in,
our graph is going to

00:36:02.480 --> 00:36:04.100
look more like this.

00:36:04.100 --> 00:36:08.150
This is that same graph with all
of those little upticks eliminated.

00:36:08.180 --> 00:36:11.000
And the result is a 10% performance.

00:36:11.070 --> 00:36:13.120
So, we're going to be able to fix a
bug that has nothing at all to

00:36:13.120 --> 00:36:15.320
do with performance gain without
really doing anything at all.

00:36:15.320 --> 00:36:16.590
And that was really helpful to us.

00:36:17.500 --> 00:36:22.600
Another thing, I mentioned this before,
new features do not have

00:36:22.600 --> 00:36:25.040
to impact performance.

00:36:25.040 --> 00:36:28.720
It's really easy to say, "Well,
I added more code.

00:36:28.720 --> 00:36:33.710
I added this functionality," etc.,
etc., but those new features,

00:36:34.020 --> 00:36:36.400
there's no reason they
should impact performance.

00:36:36.430 --> 00:36:40.550
If you've really, really,
really investigated and done

00:36:40.730 --> 00:36:45.270
everything you can to make sure that
your changes are having as small of

00:36:45.270 --> 00:36:48.020
an impact as possible on performance,
then one thing that you

00:36:48.020 --> 00:36:53.080
might want to consider is,
let's say my change impacted performance

00:36:53.080 --> 00:36:56.660
by 20%. I went and looked at it.

00:36:56.740 --> 00:36:57.980
I fixed a bunch of things up.

00:36:58.140 --> 00:37:01.640
Now it's like 5%. I still have
that 5% regression in the tree,

00:37:01.640 --> 00:37:06.210
so what I might want to do is go and
try to speed something else up by 5%.

00:37:06.670 --> 00:37:12.630
You want to keep that baseline steady,
even when you're adding features.

00:37:13.240 --> 00:37:15.580
Lastly, this was also very important.

00:37:15.580 --> 00:37:17.250
No sacred cows.

00:37:17.260 --> 00:37:21.060
Everyone sort of has that
piece of code on their project.

00:37:21.060 --> 00:37:23.900
Maybe you bought the
code from another vendor,

00:37:23.900 --> 00:37:28.010
or it's that code that that super
smart guy wrote like two years ago,

00:37:28.010 --> 00:37:32.400
and no one has touched it since then,
and everyone's kind of, you know,

00:37:32.510 --> 00:37:33.450
scared of it.

00:37:33.540 --> 00:37:35.180
You should dive right in there.

00:37:35.180 --> 00:37:39.100
That part of the code is
not immune to being slow,

00:37:39.240 --> 00:37:40.420
basically.

00:37:40.420 --> 00:37:42.160
So don't be afraid of it.

00:37:44.430 --> 00:37:49.820
So, just to sort of recap what we went
over with performance regressions,

00:37:49.820 --> 00:37:54.170
do your best to adhere to a zero
tolerance policy and remember

00:37:54.380 --> 00:37:57.610
all the things that we talked
about are lessons learned.

00:37:59.210 --> 00:38:02.030
So, you know,
we went through all this stuff.

00:38:02.030 --> 00:38:03.680
What actually happened?

00:38:03.680 --> 00:38:04.840
Did it actually work?

00:38:05.110 --> 00:38:06.800
Well, absolutely it did.

00:38:07.020 --> 00:38:10.550
You know,
if we look at JavaScript performance

00:38:10.750 --> 00:38:16.100
during Safari 1.0 development,
we improved, we made it 16 times faster.

00:38:16.100 --> 00:38:17.540
It's a lot faster.

00:38:20.600 --> 00:38:24.850
For HTML load speed,
we made it 10 times faster.

00:38:24.850 --> 00:38:26.500
Incredibly fast.

00:38:26.500 --> 00:38:32.160
When we went from Safari 1.0 on
Jaguar to Safari 1.1 on Panther,

00:38:32.160 --> 00:38:35.040
we got 30% faster.

00:38:35.040 --> 00:38:37.580
And that was sort of without even trying.

00:38:37.580 --> 00:38:41.570
This was one of those scenarios where
we were just sort of checking in

00:38:41.570 --> 00:38:44.440
little 2 and 3% speedups inadvertently.

00:38:44.440 --> 00:38:48.080
And over time, you know,
each release is a year.

00:38:48.080 --> 00:38:49.980
Over time, those really stacked up
with us doing a lot of work.

00:38:50.600 --> 00:38:51.910
And we were doing almost no work at all.

00:38:51.910 --> 00:38:56.210
I actually remember, you know,
Panther coming out and sort of reading

00:38:56.210 --> 00:39:01.200
the feedback online and people said,
wow, you know, Safari feels a lot faster.

00:39:01.200 --> 00:39:02.620
And that was great.

00:39:02.660 --> 00:39:06.490
So, in closing, you really can,
I hope I've gotten it

00:39:06.490 --> 00:39:10.260
across to you today,
that you really can develop high

00:39:10.260 --> 00:39:15.920
performance software by following a
few simple principles and practices.

00:39:15.920 --> 00:39:20.500
You do a little bit of work up front
and get some vigilant testing in there.

00:39:20.600 --> 00:39:23.660
And, you know, also,
all the things that we've talked

00:39:23.750 --> 00:39:26.940
about today are simple enough
that you can sort of leave this

00:39:27.050 --> 00:39:29.030
talk and actually start today.

00:39:29.030 --> 00:39:31.450
So, that's it.