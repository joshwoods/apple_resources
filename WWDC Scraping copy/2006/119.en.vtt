WEBVTT

00:00:10.430 --> 00:00:15.050
Good morning and welcome to session 119,
Creating Great Automator Actions:

00:00:15.050 --> 00:00:15.800
The Basics.

00:00:15.850 --> 00:00:18.500
I'm Todd Fernandez,
the Automator Engineering Manager,

00:00:18.500 --> 00:00:22.330
and I'm really excited to get
things kicked off this morning.

00:00:23.500 --> 00:00:25.340
I'm going to give you
a brief introduction,

00:00:25.360 --> 00:00:27.510
get you excited about
creating Automator actions,

00:00:27.510 --> 00:00:31.140
and then turn things over to
members of my team who will teach

00:00:31.140 --> 00:00:35.020
you everything you need to know
about creating great actions.

00:00:35.120 --> 00:00:38.660
Making the right decisions about what
kind of actions to create and then

00:00:38.660 --> 00:00:42.090
how to create them in the best way,
following guidelines we recommend so

00:00:42.090 --> 00:00:46.550
that they behave consistently with other
actions that exist on the platform,

00:00:46.550 --> 00:00:49.860
making them much easier for
users to adopt them and integrate

00:00:50.020 --> 00:00:51.650
them into their workflows.

00:00:53.110 --> 00:00:55.260
So at the outset,
I want to emphasize that this session

00:00:55.260 --> 00:01:00.000
is focusing on Mac OS X 10.4 Tiger,
what you can do today to create

00:01:00.080 --> 00:01:03.780
great Automator actions and
ship them for your customers.

00:01:03.940 --> 00:01:08.510
At 2:00 this afternoon in this very room,
we'll have another session on advanced

00:01:08.510 --> 00:01:12.460
topics that will focus more on the new
features we're introducing in Leopard,

00:01:12.610 --> 00:01:15.610
some of which you may have
seen me demo on Monday.

00:01:15.780 --> 00:01:18.420
So that you can begin planning ahead
for adopting those features for your

00:01:18.420 --> 00:01:20.810
actions that will ship with Leopard.

00:01:23.050 --> 00:01:26.810
So to get started, I wanted to try to
review where we've been,

00:01:26.810 --> 00:01:29.890
what's happened since the last
time we were here together,

00:01:29.920 --> 00:01:31.850
a little over a year ago.

00:01:32.160 --> 00:01:36.050
We had just shipped the initial
version of Automator in Tiger,

00:01:36.050 --> 00:01:40.290
and we had a number of goals that we were
trying to achieve by creating Automator.

00:01:41.160 --> 00:01:44.700
First of all, we wanted to make it easier
for users of all kinds,

00:01:44.700 --> 00:01:46.950
whether they're developers
or just ordinary users,

00:01:46.950 --> 00:01:49.460
or maybe even your grandma,
to use automation to make

00:01:49.460 --> 00:01:51.780
their lives simpler and easier.

00:01:51.920 --> 00:01:54.870
More specifically for you,
we wanted to make it easier for

00:01:54.870 --> 00:01:58.800
you to create new automation tools
in whichever language you prefer.

00:01:58.800 --> 00:02:01.210
So if you want to use AppleScript,
use AppleScript.

00:02:01.300 --> 00:02:03.800
If you want to use Objective-C,
use Objective-C.

00:02:03.800 --> 00:02:10.660
And if you want to use Perl or
Python or any other language you like,

00:02:10.910 --> 00:02:14.310
you can do that and
create great new tools.

00:02:14.500 --> 00:02:16.170
And finally,
we want to be able to tie all this

00:02:16.300 --> 00:02:20.900
together and make all these new tools
work seamlessly and efficiently together.

00:02:21.010 --> 00:02:24.720
So again, reinforcing our first goal,
making it easier for users of

00:02:24.720 --> 00:02:26.600
all kinds to use automation.

00:02:26.760 --> 00:02:28.600
So how did we do?

00:02:31.970 --> 00:02:38.190
Well, we had one big vote of confidence
from the editors of Macworld,

00:02:38.190 --> 00:02:38.190
who...

00:02:38.250 --> 00:02:43.700
awarded us an Editor's Choice Award for
Best Productivity Software last year.

00:02:44.380 --> 00:02:48.040
So that was very nice of them,
and I can reinforce that with some of

00:02:48.040 --> 00:02:49.760
the words from one of those editors.

00:02:49.800 --> 00:02:53.680
I think this makes it clear that they
believe that we achieved our first goal.

00:02:53.740 --> 00:02:55.090
But enough tooting our own horn.

00:02:55.170 --> 00:02:57.670
What about our goal for you?

00:02:59.030 --> 00:03:01.840
Here I really want to thank you
because your response has been

00:03:01.840 --> 00:03:05.500
overwhelming and we're thrilled to
have over more than 2,000 actions that

00:03:05.500 --> 00:03:09.800
have been released in the 16 months
since we released Automator in Tiger.

00:03:09.890 --> 00:03:10.790
So thank you very much.

00:03:10.790 --> 00:03:12.800
We really appreciate the support.

00:03:17.630 --> 00:03:19.780
In fact,
this is just a sampling of some of

00:03:19.780 --> 00:03:23.300
the many applications that now ship
with built-in Automator actions,

00:03:23.300 --> 00:03:27.500
and we certainly hope to see some of your
applications join this exclusive club.

00:03:27.500 --> 00:03:31.530
In fact, Apple itself is beginning to do
this with some of the applications

00:03:31.590 --> 00:03:34.230
it ships outside of Mac OS X,
such as Aperture and

00:03:34.360 --> 00:03:37.020
Soundtrack Pro and Keynote,
and we certainly encourage

00:03:37.020 --> 00:03:38.380
you to continue to do this.

00:03:38.500 --> 00:03:41.630
Beyond specific applications,
we've also seen a great number

00:03:41.820 --> 00:03:44.630
of websites that have sprung
up to create a great community

00:03:44.760 --> 00:03:48.920
and ecosystem around Automator,
making it easy for users to find

00:03:48.920 --> 00:03:52.410
new actions and information about
how to use them and incorporate

00:03:52.410 --> 00:03:54.100
them into their workflows.

00:03:54.580 --> 00:03:57.870
As a great example of this,
some of you may have gone to the

00:03:57.870 --> 00:04:00.500
Apple Design Awards last night
where we presented the inaugural

00:04:00.500 --> 00:04:03.300
Best Mac OS X Workflow Award.

00:04:03.420 --> 00:04:06.650
And we were very pleased
to see Ben Waldie,

00:04:06.650 --> 00:04:11.260
whose website was appearing there,
was given the award for a great

00:04:11.260 --> 00:04:14.640
set of over 50 actions that target
some of the biggest apps on the

00:04:14.640 --> 00:04:18.150
platform and work very well together.

00:04:18.260 --> 00:04:22.810
Here's a screenshot of the winning
workflow that takes photos from iPhoto

00:04:22.810 --> 00:04:27.670
and real estate listing information
from a FileMaker Pro database and uses

00:04:27.670 --> 00:04:31.460
InDesign to lay that information out in
a really beautiful real estate catalog

00:04:31.500 --> 00:04:33.960
that can be printed or posted on the web.

00:04:34.150 --> 00:04:36.730
So again, congratulations to Ben.

00:04:38.760 --> 00:04:42.910
So, if I haven't convinced you already,
why should you join this party

00:04:43.220 --> 00:04:46.700
and create actions for your
application or technology?

00:04:46.850 --> 00:04:48.610
Well, for one thing,
if you're an application developer,

00:04:48.700 --> 00:04:50.930
you can use the same tools
that you're familiar with for

00:04:50.930 --> 00:04:53.700
building your application:
Xcode and Interface Builder.

00:04:53.700 --> 00:04:56.200
And of course,
you can reuse a lot of the same code

00:04:56.260 --> 00:04:58.530
that you use within your application.

00:05:00.310 --> 00:05:02.870
One of the things we've seen with
Automator is many of you create very

00:05:03.000 --> 00:05:08.500
powerful applications which can be
intimidated for less sophisticated users.

00:05:08.700 --> 00:05:11.970
For example,
like the insides of this MacBook Pro.

00:05:12.430 --> 00:05:16.920
However, what you can do by exposing that
powerful technology in a well-designed,

00:05:16.920 --> 00:05:21.420
well-crafted set of simpler,
easier-to-understand Automator actions

00:05:21.700 --> 00:05:25.300
is that you can make that technology
more approachable for ordinary users,

00:05:25.510 --> 00:05:29.280
thereby widening your
audience for your software.

00:05:29.590 --> 00:05:33.610
I'm sure none of you are interested in
selling more copies of your software.

00:05:34.400 --> 00:05:37.380
And finally,
once you attract those new customers,

00:05:37.380 --> 00:05:39.570
by encouraging them to
integrate your application into

00:05:39.570 --> 00:05:42.740
their automation solutions,
you're helping them to make your

00:05:42.740 --> 00:05:45.800
application essential to them,
because they will not want to

00:05:45.910 --> 00:05:49.470
go back to doing things by hand
once they've automated a process.

00:05:49.630 --> 00:05:52.280
And finally,
and of course most importantly,

00:05:52.400 --> 00:05:54.970
you'd be associating
with the coolest icon.

00:05:55.970 --> 00:05:58.000
and Otto does his pirouette there.

00:05:58.050 --> 00:06:00.540
So without any further ado,
now that I hope you're really excited

00:06:00.540 --> 00:06:03.700
about creating actions and learning
everything you need to know to do that,

00:06:03.750 --> 00:06:06.400
I'm going to turn things over to
a great addition to the Automator

00:06:06.510 --> 00:06:09.020
team since the last time we met,
who is responsible for some

00:06:09.020 --> 00:06:11.120
of the great new features
that are available on Leopard,

00:06:11.130 --> 00:06:12.280
such as workflow variables.

00:06:12.280 --> 00:06:15.350
So please join me in
welcoming Emilie Kim.

00:06:22.700 --> 00:06:23.700
I'm Emilie.

00:06:23.910 --> 00:06:26.300
Let's create great Automator actions.

00:06:26.310 --> 00:06:29.960
But first, let's all make sure
we're on the same page.

00:06:30.130 --> 00:06:31.700
What is Automator?

00:06:31.700 --> 00:06:36.630
Automator is an application which allows
you to create automated workflows.

00:06:36.630 --> 00:06:39.700
A workflow is a process
of attaining a goal.

00:06:39.700 --> 00:06:43.800
An example of such a workflow
might be something like if

00:06:43.880 --> 00:06:47.360
I had my camera over here,
and I wanted to take the photos

00:06:47.450 --> 00:06:52.700
from my camera and send them all
the way over here to my grandma.

00:06:52.700 --> 00:06:58.280
Now, that's a workflow,
and Automator allows me to automate this.

00:06:58.800 --> 00:07:03.290
Actions make up the pieces of a workflow,
and this is what you use to build it.

00:07:03.380 --> 00:07:05.920
So in our example workflow,
with sending the photos from

00:07:05.920 --> 00:07:09.780
my camera to my grandmother,
our actions might be something like

00:07:09.980 --> 00:07:14.650
getting the photos off of my camera
and putting them onto my computer.

00:07:14.790 --> 00:07:18.300
After that,
maybe I want to rename these photos,

00:07:18.370 --> 00:07:21.300
and then I'll want to scale them
before I send them to my grandma,

00:07:21.300 --> 00:07:23.880
because she's still on dial-up,
so she needs smaller

00:07:23.960 --> 00:07:25.610
versions of these pictures.

00:07:26.100 --> 00:07:29.600
Automator currently ships with a very
large set of actions provided for you by

00:07:29.600 --> 00:07:32.770
Apple to help you create your workflows,
but if these were all the

00:07:32.770 --> 00:07:35.590
actions you ever needed,
we wouldn't be here.

00:07:35.680 --> 00:07:38.810
So we've also provided you
with a set of tools you can

00:07:38.810 --> 00:07:40.840
use to create your own actions.

00:07:40.910 --> 00:07:44.230
And that's what we're
going to learn today.

00:07:45.780 --> 00:07:49.870
It's extremely important we know
how to create great actions because,

00:07:49.920 --> 00:07:53.040
as you can see,
actions make up the pieces of a workflow.

00:07:53.190 --> 00:07:57.090
Without great actions,
we can't have great workflows.

00:07:57.170 --> 00:08:00.930
So what would happen if there
was no scale images action?

00:08:01.220 --> 00:08:06.000
Grandma can't receive my photos because
they're too big and she becomes sad.

00:08:06.060 --> 00:08:09.390
So, as you can see,
it's extremely important that we

00:08:09.390 --> 00:08:14.660
have all the actions that we can use
so we can create great workflows.

00:08:15.920 --> 00:08:20.040
So, what are we going to talk about
today so we can accomplish this goal?

00:08:20.040 --> 00:08:22.030
We're going to first
learn how actions work.

00:08:22.180 --> 00:08:25.940
What are the parts of an action and
how do they interact with each other?

00:08:25.970 --> 00:08:29.240
We're going to learn how to create
the action project in Xcode,

00:08:29.280 --> 00:08:31.980
and then we're going to learn
how to implement the action,

00:08:32.000 --> 00:08:35.160
build the user interface,
as well as set the action properties

00:08:35.160 --> 00:08:39.830
so the user has the best possible
experience for using actions.

00:08:39.880 --> 00:08:45.700
After that, we're going to build, test,
debug, install, and use the action,

00:08:45.700 --> 00:08:48.430
which is much easier done than said.

00:08:49.490 --> 00:08:51.640
So, how about actions?

00:08:51.710 --> 00:08:54.330
There are three actions you can create.

00:08:54.500 --> 00:08:58.120
The first type of action
is an AppleScript action.

00:08:58.120 --> 00:09:00.280
This is written in AppleScript.

00:09:00.390 --> 00:09:03.740
The second type of action you
can create is a Cocoa action,

00:09:03.740 --> 00:09:06.000
and this is written in Objective-C.

00:09:06.140 --> 00:09:09.270
The third type of action
is a shell script action,

00:09:09.270 --> 00:09:11.500
which can be done in the
scripting language of your choice.

00:09:11.660 --> 00:09:15.920
For example, Bash, Python, Ruby,
or even Perl, which you'll see later

00:09:15.920 --> 00:09:17.300
on in this session.

00:09:18.010 --> 00:09:21.330
Actions can be standalone,
meaning they rely on the technology of

00:09:21.480 --> 00:09:26.670
the code to perform their functionality,
or they can target an application.

00:09:26.940 --> 00:09:30.730
If the action targets an application,
the application must either

00:09:31.200 --> 00:09:37.650
have a scripting interface,
provide APIs, or be a command line tool

00:09:37.810 --> 00:09:41.290
for the action to be able to
interact with it from Automator.

00:09:42.710 --> 00:09:45.350
So, in case none of you
have seen this before,

00:09:45.480 --> 00:09:46.950
this is what Automator looks like.

00:09:47.030 --> 00:09:50.590
Is there anyone,
this is your first time seeing Automator?

00:09:52.460 --> 00:09:54.400
Okay, well that's alright.

00:09:54.400 --> 00:09:58.990
To make sure we're all on the same page,
let's take a closer look at Automator.

00:09:59.600 --> 00:10:03.590
So here we have the library view,
which is where the user could browse

00:10:03.680 --> 00:10:06.260
by application for your action.

00:10:06.280 --> 00:10:11.270
In the middle, we have the action column,
where the user can find the

00:10:11.270 --> 00:10:14.080
action they're looking for,
and then they can add the

00:10:14.080 --> 00:10:17.150
action to the workflow view,
and this is their workflow.

00:10:17.380 --> 00:10:20.170
So now let's take a
closer look at the action.

00:10:20.720 --> 00:10:24.150
The Action is made up
of three distinct parts.

00:10:24.150 --> 00:10:26.360
The first part is the code.

00:10:26.430 --> 00:10:27.940
That's the thing we all know how to do.

00:10:27.990 --> 00:10:29.600
That's the easy part.

00:10:29.720 --> 00:10:32.600
As you saw earlier,
the code can be done in three ways.

00:10:32.600 --> 00:10:37.600
It can be in AppleScript, Objective-C,
or the scripting language of your choice.

00:10:37.700 --> 00:10:39.540
On top of that,
we have the user interface.

00:10:39.640 --> 00:10:42.950
This is what the user deals
with when they're using your

00:10:42.950 --> 00:10:44.600
action within Automator.

00:10:44.600 --> 00:10:47.600
And then, sandwiching that,
we have the action properties,

00:10:47.600 --> 00:10:51.700
which you can set to ensure the user
has the best possible experience.

00:10:52.260 --> 00:10:56.440
and then when you put all that together,
you have your action.

00:10:56.440 --> 00:10:58.600
But who really cares
about all the other stuff?

00:10:58.600 --> 00:10:59.320
Let's get to the code.

00:10:59.470 --> 00:11:00.730
That's the exciting part.

00:11:00.910 --> 00:11:04.930
So I'm going to invite Todd back
up on stage for a quick demo.

00:11:11.930 --> 00:11:14.500
Thank you, Emilie.

00:11:14.600 --> 00:11:17.270
So the first thing I'd like to show
you is just how easy it is to create

00:11:17.330 --> 00:11:19.520
a simple action using AppleScript.

00:11:19.530 --> 00:11:21.500
It's so easy even a manager can do it.

00:11:21.530 --> 00:11:25.280
Although, I guess I haven't done it yet,
so that remains to be seen.

00:11:25.360 --> 00:11:29.230
So the hard part is really thinking about
what you want to do with your action.

00:11:29.370 --> 00:11:31.820
So in this particular case,
I want to create a simple action

00:11:31.970 --> 00:11:36.150
that takes text as input and
uses Mac OS X's text-to-speech

00:11:36.230 --> 00:11:38.480
technology to read it back to me.

00:11:38.530 --> 00:11:43.720
So within Xcode, I'm going to use the new
Project Assistant to create my project.

00:11:43.740 --> 00:11:47.090
And as we can see, if I zoom in here,

00:11:48.100 --> 00:11:53.220
You can see that the action projects are
right there at the top where they belong.

00:11:53.300 --> 00:11:55.660
And they're in fact
three different types,

00:11:55.660 --> 00:11:59.040
as Emilie has already explained:
AppleScript, Cocoa,

00:11:59.150 --> 00:12:02.300
Definition Bundle you can
hear about at 2 o'clock,

00:12:02.300 --> 00:12:04.560
and ShellScript Automator Actions.

00:12:04.640 --> 00:12:06.830
But I want to create
an AppleScript action,

00:12:06.830 --> 00:12:09.360
and let's zoom back out
so we don't get whiplash.

00:12:09.580 --> 00:12:15.170
So we click Next to create our project,
and my lovely assistant has

00:12:15.170 --> 00:12:18.320
typed in my name already,
So we're going to create an

00:12:18.330 --> 00:12:19.870
action called speak text.

00:12:21.170 --> 00:12:23.560
The assistant creates the
project from the template,

00:12:23.590 --> 00:12:24.450
and this is what I get.

00:12:24.520 --> 00:12:28.310
So let me arrange things here
so we can work and give you

00:12:28.460 --> 00:12:30.100
a little tour of the project.

00:12:30.220 --> 00:12:32.030
Most importantly,
again as Emilie pointed out,

00:12:32.030 --> 00:12:34.170
we're going to start off with
just dealing with the code.

00:12:34.470 --> 00:12:38.500
In this case, main.AppleScript.

00:12:39.310 --> 00:12:41.400
And before I get to the details,
let me show you a few other

00:12:41.400 --> 00:12:43.900
things in the resources.

00:12:43.900 --> 00:12:47.300
One important point here to mention
is that an AppleScript action is

00:12:47.360 --> 00:12:49.900
really an AppleScript Studio action.

00:12:50.020 --> 00:12:52.500
And, okay,
I guess this is time for a commercial.

00:12:52.500 --> 00:12:56.200
I will be giving a hands-on session
on AppleScript Studio tomorrow

00:12:56.200 --> 00:13:00.890
afternoon at 3:30,
so perhaps I'll see you there as well.

00:13:01.240 --> 00:13:02.990
The important point being
here that I'm showing the

00:13:02.990 --> 00:13:05.260
AppleScript Studio dictionary,
which can be very useful as

00:13:05.260 --> 00:13:07.740
you're working with your actions.

00:13:07.890 --> 00:13:11.070
And the main.nib is where your
actions user interface is defined,

00:13:11.070 --> 00:13:14.530
but we're not going to add any user
interface in this particular demo.

00:13:14.670 --> 00:13:17.030
So let's return to our script.

00:13:17.330 --> 00:13:21.940
As we see, we have a single method here,
a handler in AppleScript,

00:13:22.000 --> 00:13:22.990
the onRun handler.

00:13:23.200 --> 00:13:26.430
This is the code that is called
by Automator when it runs

00:13:26.460 --> 00:13:29.300
your action within a workflow.

00:13:29.370 --> 00:13:31.800
And it passes you two
pieces of information.

00:13:31.830 --> 00:13:34.750
It passes the input,
which is the output of the

00:13:34.880 --> 00:13:38.580
previous action in the workflow,
and the parameters,

00:13:38.640 --> 00:13:43.060
which are a block of information based
on the user interface choices the user

00:13:43.060 --> 00:13:47.460
has made in your action's user interface,
so that you can make the appropriate

00:13:47.500 --> 00:13:49.280
choices within your code.

00:13:49.390 --> 00:13:51.500
But again, we have no user interface
in this first demo,

00:13:51.500 --> 00:13:54.090
so we're just going
to focus on the input.

00:13:54.470 --> 00:13:58.970
And a good habit to get into is to
return the input that you're given

00:13:59.470 --> 00:14:01.130
if you're not actually changing it.

00:14:01.130 --> 00:14:03.120
And of course,
since we're just reading this text back,

00:14:03.280 --> 00:14:05.760
we're not going to change it,
so we're going to just

00:14:05.760 --> 00:14:07.580
return it as we got it.

00:14:08.110 --> 00:14:10.970
And it turns out,
given that this is AppleScript,

00:14:10.970 --> 00:14:13.510
a very high-level,
powerful scripting language

00:14:13.540 --> 00:14:16.400
that gives you all the power
of the OS in a few keystrokes,

00:14:16.600 --> 00:14:21.270
all I need to do to read the
text is type nine characters,

00:14:21.510 --> 00:14:23.350
say input.

00:14:24.900 --> 00:14:26.560
That's it.

00:14:26.580 --> 00:14:28.700
Let's see how far we've gotten here.

00:14:28.780 --> 00:14:31.600
So I'm going to hit Build and Go,
which compiles my action

00:14:31.680 --> 00:14:34.720
and launches Automator,
passing the newly built action

00:14:34.720 --> 00:14:36.050
to it on the command line.

00:14:36.180 --> 00:14:38.160
This makes the development
process very similar to

00:14:38.230 --> 00:14:39.780
building a regular application.

00:14:39.780 --> 00:14:43.390
You don't need to install the
action every time you make a change.

00:14:44.080 --> 00:14:48.060
And we see this funny-looking
primary application here and

00:14:48.210 --> 00:14:50.360
speak text with the wrong icon.

00:14:50.560 --> 00:14:51.500
Hmm.

00:14:51.830 --> 00:14:53.700
Perhaps we still have
some more work to do.

00:14:53.870 --> 00:14:55.200
But, well, we'll be brave.

00:14:55.200 --> 00:14:59.830
Let's pull out a pre-canned workflow
that's got some text in it already

00:15:00.930 --> 00:15:02.500
and add my new action to it.

00:15:02.500 --> 00:15:05.310
And as we see,
we haven't configured the UI,

00:15:05.380 --> 00:15:06.780
so let's hide that.

00:15:07.000 --> 00:15:08.840
Let's see how well this works.

00:15:08.900 --> 00:15:12.080
Automator is a fantastic
boon to Mac users,

00:15:12.140 --> 00:15:13.600
not just the geeks.

00:15:13.660 --> 00:15:16.240
It's a gift to ordinary users.

00:15:16.320 --> 00:15:18.800
I never get tired of hearing that.

00:15:19.380 --> 00:15:22.030
We'll stop tooting our own horn soon,
believe me,

00:15:22.040 --> 00:15:25.300
but that's from Andy Anotko's review
after he released Automator and Tiger.

00:15:25.300 --> 00:15:26.460
So that's great, we're done.

00:15:26.690 --> 00:15:27.800
Fantastic.

00:15:27.950 --> 00:15:29.700
Now I know what you're
thinking to yourself.

00:15:29.830 --> 00:15:33.050
Okay Todd, well if that's how easy it is,
why are we having a

00:15:33.170 --> 00:15:34.500
whole session on this?

00:15:34.720 --> 00:15:38.350
Well, let's do a little bit more testing,
which I'm sure you all do

00:15:38.350 --> 00:15:40.100
with your applications.

00:15:40.270 --> 00:15:43.160
What happens if we
don't give it any input?

00:15:44.870 --> 00:15:45.920
Well, that's not so cool.

00:15:45.920 --> 00:15:49.030
We should probably just fail silently.

00:15:49.030 --> 00:15:52.580
And let's see, what happens if we pass
something in that's not text,

00:15:52.890 --> 00:15:57.270
like a file name, or a file path instead?

00:15:57.930 --> 00:15:59.270
Hmm, another error.

00:15:59.570 --> 00:16:03.070
Well, you might think that's OK,
because we're not passing a text.

00:16:03.340 --> 00:16:05.800
But Automator shows it as a match.

00:16:05.960 --> 00:16:06.400
Let's see.

00:16:06.400 --> 00:16:11.040
Well, we've also got the
shipping speak text here.

00:16:11.190 --> 00:16:13.470
Does it work in that case?

00:16:15.300 --> 00:16:21.560
Users S119 Documents Demo 1 Geek:
Gift.Text Clipping So that

00:16:21.560 --> 00:16:23.200
works with the shipping version.

00:16:23.200 --> 00:16:26.200
How does that,
why does my action not work?

00:16:26.200 --> 00:16:28.200
Well, apparently I'm not done yet.

00:16:28.200 --> 00:16:30.410
We've had at least one code problem.

00:16:30.410 --> 00:16:32.200
We're not handling null input.

00:16:32.200 --> 00:16:35.200
And this seems to be an
action properties problem,

00:16:35.200 --> 00:16:39.200
because as you see the shipping
action has text defined as its input,

00:16:39.530 --> 00:16:43.190
where my version of the
action has anything.

00:16:43.410 --> 00:16:47.710
Hmm,
I guess it's not as easy as we thought.

00:16:48.430 --> 00:16:51.370
So now that I've shown you
in quite graphic detail that

00:16:51.490 --> 00:16:54.280
it's not quite that easy,
let me turn it back over to Emilie

00:16:54.350 --> 00:16:58.410
to teach you everything else you need
to know about creating great actions.

00:17:04.000 --> 00:17:11.800
[Transcript missing]

00:17:12.090 --> 00:17:15.520
So, as you can see,
Todd's action has a few

00:17:15.520 --> 00:17:18.170
problems here and there,
but being a manager,

00:17:18.220 --> 00:17:21.690
Todd wants us to add new features
before we actually fix the bugs.

00:17:21.770 --> 00:17:25.830
So, we're going to take a look at adding
a user interface to our action first,

00:17:25.960 --> 00:17:28.800
before we go and fix the
problems he introduced.

00:17:28.900 --> 00:17:31.620
So, we're going to talk about the
user interface of an action,

00:17:31.620 --> 00:17:35.900
and as you saw in Todd's demo,
this is also known as the main.nib file.

00:17:36.000 --> 00:17:38.970
So, we're going to open up this file
in Interface Builder and add

00:17:38.970 --> 00:17:40.730
our user interface elements.

00:17:40.930 --> 00:17:44.110
So, here is what our Action View looks
like in Interface Builder.

00:17:44.280 --> 00:17:48.260
We've added a text label called
"voice" to label our pop-up button,

00:17:48.280 --> 00:17:50.670
which contains a list of
voices that we have on the

00:17:50.680 --> 00:17:52.700
system that we can speak with.

00:17:53.220 --> 00:17:57.470
We then go to the Bindings Inspector of
Interface Builder and we have bound,

00:17:57.500 --> 00:17:59.970
in this case,
the selected object for the pop-up

00:17:59.970 --> 00:18:02.100
button to the key chosen voice.

00:18:02.100 --> 00:18:07.100
This allows the pop-up button in our
user interface to talk with our code.

00:18:07.100 --> 00:18:10.100
If you want a more
dynamic user interface,

00:18:10.100 --> 00:18:14.100
you can use AppleScript Studio Handlers
to populate your user interface

00:18:14.100 --> 00:18:17.100
and Todd will explain more
about that in his next demo.

00:18:17.100 --> 00:18:21.930
So we've added a pop-up button to this,
but what else can we add?

00:18:22.430 --> 00:18:25.510
Actually, you can add any element you
have in Interface Builder to

00:18:25.510 --> 00:18:30.160
your actions user interface,
including the AM Path pop-up button,

00:18:30.160 --> 00:18:33.080
which is in the Automator palette,
which allows the user to select a path.

00:18:33.150 --> 00:18:36.870
This is used very often in Automator
actions that ship with Automator,

00:18:36.870 --> 00:18:39.560
so I would encourage you
to take a look at that.

00:18:40.120 --> 00:18:42.840
So, let's go over some guidelines
when creating your user

00:18:42.840 --> 00:18:44.730
interface for your action.

00:18:44.910 --> 00:18:48.740
First and most importantly is to
maintain a consistent look and feel.

00:18:48.790 --> 00:18:51.930
Many developers create actions
and we want the user to have

00:18:51.940 --> 00:18:55.340
a good experience when using
Automator with all of these actions.

00:18:55.470 --> 00:18:58.390
So it's essential that you
maintain a consistent look

00:18:58.430 --> 00:19:00.220
and feel to encourage this.

00:19:00.440 --> 00:19:03.320
Additionally,
minimizing vertical space is extremely

00:19:03.320 --> 00:19:06.600
important because as you can see,
when users add actions to a workflow,

00:19:06.600 --> 00:19:08.400
they stack on top of each other.

00:19:08.490 --> 00:19:12.400
So it's very important that the user
has as much vertical space as possible.

00:19:12.400 --> 00:19:15.400
You also want to give the user feedback.

00:19:15.400 --> 00:19:18.460
For example, if your action adds text
to the end of a file name,

00:19:18.510 --> 00:19:21.220
you might want to give the user an
example of what their file name will look

00:19:21.220 --> 00:19:24.390
like after it goes through your action.

00:19:24.760 --> 00:19:27.190
For examples of actions which
follow these guidelines,

00:19:27.240 --> 00:19:30.100
you can look at the actions that
currently ship with Automator.

00:19:30.190 --> 00:19:33.270
And if you want the complete guidelines,
you can read the Automator

00:19:33.270 --> 00:19:34.510
Programming Guide.

00:19:34.700 --> 00:19:38.690
So, we've talked about how to add
a user interface to our action,

00:19:38.720 --> 00:19:41.000
and we've gotten the feature
Todd wants us to add.

00:19:41.240 --> 00:19:44.770
So now we can go back and fix
some of the bugs that he had.

00:19:44.880 --> 00:19:46.640
So to do this,
we're going to take a look at setting

00:19:46.710 --> 00:19:48.980
the action properties of an action.

00:19:49.040 --> 00:19:51.470
There are four properties
you can set for an action.

00:19:51.560 --> 00:19:55.060
You have the parameters,
the input and output of an action,

00:19:55.110 --> 00:19:57.290
the required resources,
and the warnings you

00:19:57.290 --> 00:19:58.670
can set for your action.

00:19:58.760 --> 00:20:02.280
You can set all this in the target
inspector in the action project.

00:20:02.420 --> 00:20:04.950
So let's first take a
look at the parameters.

00:20:05.100 --> 00:20:08.420
To set the parameters,
you connect basically the user

00:20:08.420 --> 00:20:10.850
interface element to your code.

00:20:10.910 --> 00:20:13.870
In this case, this is the pop-up button,
and it connects to

00:20:13.870 --> 00:20:15.900
chosen voice in our code.

00:20:16.520 --> 00:20:18.900
To set this,
you would go to the target inspector

00:20:18.900 --> 00:20:23.050
and select the parameters section and
you can see here we have chosen voice as

00:20:23.120 --> 00:20:27.850
type string and we have no default value
since we already populated the menu.

00:20:28.200 --> 00:20:30.490
More generally though,
if you have user interface elements

00:20:30.550 --> 00:20:33.990
you want to connect through parameters,
if you had a text field,

00:20:33.990 --> 00:20:37.390
you would want to set its type to string,
and you can also set a default value,

00:20:37.400 --> 00:20:40.570
which first shows up when
the user loads your action.

00:20:40.700 --> 00:20:43.640
If you have an AMPath pop-up button,
which I mentioned earlier

00:20:43.640 --> 00:20:46.300
in the Automator palette,
you would also set its type to string

00:20:46.300 --> 00:20:49.550
and you could have it start out with,
say, pictures.

00:20:50.440 --> 00:20:54.000
If you had a pop-up menu
index bound to your parameter,

00:20:54.010 --> 00:20:56.250
you would bind it to the integer
and you could set it to 2,

00:20:56.370 --> 00:20:57.510
for example.

00:20:57.510 --> 00:21:00.530
Or if you had a checkbox,
its type would be Boolean.

00:21:00.800 --> 00:21:02.190
So now that we've talked
about the parameters,

00:21:02.270 --> 00:21:04.800
let's take a look at the input
and output types for an action.

00:21:04.940 --> 00:21:06.880
This is especially important
because as you can see,

00:21:06.910 --> 00:21:09.900
Todd's action didn't quite
work with files and folders.

00:21:10.050 --> 00:21:11.790
So let's find out why.

00:21:11.900 --> 00:21:14.760
Here you can see the input
and the output for an action.

00:21:14.760 --> 00:21:17.800
But first let's focus on the input.

00:21:17.800 --> 00:21:19.990
In the target inspector,
you can see that there are many

00:21:19.990 --> 00:21:23.800
options you can use when specifying
the input for your action.

00:21:23.800 --> 00:21:25.800
So let's take a closer look.

00:21:25.800 --> 00:21:29.770
First you can see acceptable input
types that your action can take in.

00:21:29.790 --> 00:21:32.810
These are UTI strings and
you can actually set multiple

00:21:32.810 --> 00:21:35.230
input types for your action.

00:21:35.350 --> 00:21:40.140
You can also just say whether your
action requires input or whether it's

00:21:40.140 --> 00:21:44.920
optional and whether your input should
be a list of items or a single item.

00:21:44.930 --> 00:21:48.540
An Automator will take care
of these conversions for you.

00:21:49.600 --> 00:21:51.800
So that wasn't a very
exciting example of input,

00:21:51.870 --> 00:21:54.440
speak text, so let's take a look at
a more exciting example:

00:21:54.650 --> 00:21:56.380
New Mail Message.

00:21:56.520 --> 00:21:59.800
As you can see,
New Mail Message has multiple input types

00:22:00.090 --> 00:22:01.770
and it has the optional box checked.

00:22:01.900 --> 00:22:06.010
So let's take a closer look at
what having multiple types entails.

00:22:06.190 --> 00:22:11.540
New Mail Message can accept two types:
alias objects and text objects.

00:22:11.540 --> 00:22:14.840
If you send in alias objects,
which are essentially files and folders,

00:22:14.920 --> 00:22:18.590
into New Mail Message,
you see a connection here showing

00:22:18.770 --> 00:22:21.330
files and folders connection.

00:22:21.400 --> 00:22:25.420
This tells Automator to send in files
and folders to New Mail Message,

00:22:25.420 --> 00:22:28.800
and then New Mail Message says,
"I'm going to set these as the

00:22:28.800 --> 00:22:31.180
attachments to my message."

00:22:31.520 --> 00:22:34.600
New Mail Message also
accepts text objects,

00:22:34.600 --> 00:22:38.020
which are text, and if you send these
into New Mail Message,

00:22:38.100 --> 00:22:40.850
the connection shows up as text,
and that gets set as the

00:22:40.930 --> 00:22:42.140
body for the message.

00:22:42.160 --> 00:22:45.150
So this is what having
multiple input types entails.

00:22:45.300 --> 00:22:49.390
But it's extremely important to know that
your actions code is what takes care of

00:22:49.460 --> 00:22:51.560
what to do with different input types.

00:22:51.560 --> 00:22:54.330
So in New Mail Message's code,
it would say if the input

00:22:54.330 --> 00:22:57.120
is files and folders,
set them as the attachments,

00:22:57.240 --> 00:23:01.400
and if the input is text,
then set it as the body of the message.

00:23:02.670 --> 00:23:04.690
So, now let's take a look
at the optional box.

00:23:04.750 --> 00:23:06.440
But to fully understand
what this box does,

00:23:06.640 --> 00:23:09.590
let's uncheck it first
and see what happens.

00:23:09.620 --> 00:23:12.000
If you then add new mail
message to your workflow,

00:23:12.000 --> 00:23:16.090
you see this red text at the top that
says "Files and Folders". This indicates

00:23:16.130 --> 00:23:17.600
that there is a broken connection.

00:23:17.860 --> 00:23:21.370
This is not a good experience because
you should be able to create just

00:23:21.490 --> 00:23:23.590
a blank message without any input.

00:23:23.600 --> 00:23:27.840
So, if we check the optional box,
we can see that now we have the

00:23:27.840 --> 00:23:32.110
option to either use the results from
a previous action if there is one,

00:23:32.110 --> 00:23:34.320
or we can just ignore the
results altogether and just

00:23:34.320 --> 00:23:36.640
create a blank message.

00:23:37.580 --> 00:23:39.130
So,
now that we've talked about the input,

00:23:39.170 --> 00:23:40.480
let's take a look at the output.

00:23:40.680 --> 00:23:42.190
This is very similar to the input.

00:23:42.420 --> 00:23:45.060
In the target inspector
you can set its properties,

00:23:45.060 --> 00:23:49.440
and it is also done by UTI types,
and you can have output as a

00:23:49.500 --> 00:23:51.890
list of items or a single item.

00:23:52.370 --> 00:23:54.800
So, we've talked a lot about
the input and output,

00:23:54.800 --> 00:23:56.720
so what are some guidelines
you should follow?

00:23:56.790 --> 00:24:00.200
You should make your input and
output types as specific as possible.

00:24:00.260 --> 00:24:02.580
In Todd's case,
he started out with his input and

00:24:02.580 --> 00:24:06.240
output types as AppleScript objects,
and if he's paying attention,

00:24:06.310 --> 00:24:09.280
he'll know that he has to change
them to AppleScript text objects

00:24:09.380 --> 00:24:11.880
for his action to work correctly.

00:24:12.700 --> 00:24:15.690
Additionally, if your action doesn't
actually need input,

00:24:15.750 --> 00:24:19.350
what you should do is leave the
types as general as possible and then

00:24:19.350 --> 00:24:22.710
simply return the input as the output.

00:24:23.060 --> 00:24:25.640
You can also specify
multiple input types,

00:24:25.650 --> 00:24:27.350
as you saw with New Mail Message.

00:24:27.390 --> 00:24:30.780
It's important to remember that it's
your code that deals with what to

00:24:30.840 --> 00:24:32.900
do with these multiple input types.

00:24:32.900 --> 00:24:36.780
You might be asking yourself,
"I'm supposed to make my input

00:24:36.780 --> 00:24:40.890
types as specific as possible,
and I can specify multiple input types.

00:24:40.900 --> 00:24:44.630
Does that mean if I wanted
SpeakText to accept text,

00:24:44.850 --> 00:24:47.930
files and folders, and URLs,
would I have to specify both

00:24:47.930 --> 00:24:51.000
the AppleScript versions and
the Cocoa versions and all

00:24:51.000 --> 00:24:52.890
of that?" The answer is no.

00:24:52.920 --> 00:24:53.820
You don't have to do this.

00:24:53.900 --> 00:24:57.890
In fact, all you have to do is set your
input type to a text object.

00:24:57.930 --> 00:25:02.900
To understand why this happens,
let's take a look at conversion actions.

00:25:02.900 --> 00:25:08.010
Here we have files and folders
being passed into SpeakText as text,

00:25:08.040 --> 00:25:11.900
and we see a connection here:
files and folders to text.

00:25:11.900 --> 00:25:14.990
So, what's going on here?

00:25:15.320 --> 00:25:17.980
In between these two actions,
there is a conversion action

00:25:18.300 --> 00:25:23.110
which converts files and folders
to their textual representation,

00:25:23.180 --> 00:25:26.520
which is then what
SpeakText uses to speak it.

00:25:27.070 --> 00:25:31.940
So, this is why conversion actions allow
the files and folders to be passed

00:25:31.960 --> 00:25:36.210
into an action which only accepts text,
and it will still work.

00:25:36.440 --> 00:25:39.740
So,
conversion actions glue actions together.

00:25:39.740 --> 00:25:42.040
They're added invisibly
and automatically,

00:25:42.040 --> 00:25:44.180
so you actually don't even
have to worry about it,

00:25:44.180 --> 00:25:45.390
and neither do your users.

00:25:45.400 --> 00:25:49.350
There are many built-in conversion
actions which ship with Automator,

00:25:49.390 --> 00:25:52.510
so that's why all the
actions we provide work,

00:25:52.510 --> 00:25:55.490
but if you have your own custom data
types that you use in your actions,

00:25:55.490 --> 00:25:59.220
you need to create your own conversion
actions so your data types can play well

00:25:59.370 --> 00:26:01.400
with the other actions in Automator.

00:26:01.440 --> 00:26:04.410
And to learn more about this,
I encourage you to come to the advanced

00:26:04.410 --> 00:26:06.400
session this afternoon at 2 in this room.

00:26:07.880 --> 00:26:09.640
So we've talked a lot
about the input and output.

00:26:09.640 --> 00:26:12.710
Now let's make sure the user
has a good experience when,

00:26:12.820 --> 00:26:15.160
for example,
if you have an application that needs

00:26:15.160 --> 00:26:18.680
to be on the system for your action,
such as iPhoto.

00:26:18.760 --> 00:26:21.510
So to do this,
you could set the required resources.

00:26:21.810 --> 00:26:24.150
And if the user tries to add
your action and they don't

00:26:24.260 --> 00:26:26.480
have iPhoto on their system,
they would be presented

00:26:26.480 --> 00:26:29.690
with a sheet such as this,
telling them that the action

00:26:29.690 --> 00:26:31.200
might not work correctly.

00:26:31.240 --> 00:26:34.260
To set the required resources,
you again go into the target

00:26:34.510 --> 00:26:37.210
inspector and you can set the
required resource by application

00:26:37.940 --> 00:26:41.710
or by creator code or by file.

00:26:41.840 --> 00:26:44.500
This is to make sure your user
has the best possible experience

00:26:44.520 --> 00:26:47.680
in case they don't have that
application on their system.

00:26:48.130 --> 00:26:50.660
To also make sure that the
user has the best possible

00:26:50.660 --> 00:26:53.140
experience in using your action,
you want to set the

00:26:53.140 --> 00:26:54.390
warnings for your action.

00:26:54.480 --> 00:26:57.490
In case your action makes
changes to a user's input,

00:26:57.560 --> 00:27:00.150
you'll want to let them know
with a sheet such as this,

00:27:00.160 --> 00:27:04.290
saying that their images might be
changed if it goes through this action.

00:27:04.910 --> 00:27:08.690
So, again to the target inspector
and let's look at these options.

00:27:08.690 --> 00:27:11.940
There are three warning levels
you can set for your action.

00:27:12.110 --> 00:27:14.140
The first one is Safe.

00:27:14.170 --> 00:27:16.700
This is the default warning
level and an example of this

00:27:16.700 --> 00:27:18.150
might be copy finder items.

00:27:18.270 --> 00:27:21.810
This certainly doesn't
change the user's input,

00:27:21.810 --> 00:27:24.310
so this is a safe warning level.

00:27:24.550 --> 00:27:27.600
The second type of warning
level is reversible.

00:27:27.630 --> 00:27:32.790
And this basically means that the user
can take back the changes that they made

00:27:32.960 --> 00:27:34.710
after sending it through your action.

00:27:34.910 --> 00:27:37.090
An example of this might be flip images.

00:27:37.330 --> 00:27:39.980
If the user passes some
photos through flip images,

00:27:40.000 --> 00:27:42.020
if they don't like the results,
they can just send them back

00:27:42.100 --> 00:27:45.020
through flip images and they'd
be back to the way they were.

00:27:45.080 --> 00:27:47.040
When the user tries to add
flip images to their workflow,

00:27:47.210 --> 00:27:49.080
they would see a warning
sheet which looked like this,

00:27:49.250 --> 00:27:52.560
encouraging them to copy their
files just in case before they

00:27:52.680 --> 00:27:54.500
send it through flip images.

00:27:54.790 --> 00:27:57.690
The third warning level is Irreversible.

00:27:57.810 --> 00:28:00.300
An example of this might be crop images.

00:28:00.450 --> 00:28:03.000
If you accidentally cropped
yourself out of your wedding photos,

00:28:03.000 --> 00:28:05.970
it would be extremely difficult
to re-crop yourself back into them

00:28:05.970 --> 00:28:07.690
just by sending it through again.

00:28:07.700 --> 00:28:10.590
So, you want to make sure that
the user is aware of this,

00:28:10.590 --> 00:28:13.590
and auto is badged with a large
warning icon indicating that

00:28:13.730 --> 00:28:15.700
there are irreversible changes.

00:28:15.700 --> 00:28:18.570
You should back up your data first.

00:28:18.910 --> 00:28:22.190
You can also set the message in
the Action Property Inspector that

00:28:22.190 --> 00:28:25.610
is displayed in the sheet,
and the Action Bundle ID which

00:28:25.720 --> 00:28:28.750
you would recommend the user
add before they add your action.

00:28:28.800 --> 00:28:31.800
You can also set the text
of the button which says,

00:28:31.800 --> 00:28:36.800
"Yes, please add copy files before this
action so my data is preserved."

00:28:36.800 --> 00:28:40.860
And you can also set the text for,
"No, I like to live dangerously.

00:28:40.860 --> 00:28:45.080
Crop away." So, we've seen all these
Action Properties now,

00:28:45.090 --> 00:28:47.800
and your action works great as an action.

00:28:47.800 --> 00:28:50.800
But what about within
the context of Automator?

00:28:50.800 --> 00:28:52.800
So,
let's take a look now at the Library view

00:28:52.800 --> 00:28:56.800
and see what we can do to make sure the
user can find your action to use it.

00:28:57.460 --> 00:29:01.800
So, you can see you can set the
action name and the icon name.

00:29:01.850 --> 00:29:04.380
You can also set the application
that your action lives in,

00:29:04.440 --> 00:29:06.100
so if the user is
browsing for your action,

00:29:06.100 --> 00:29:07.300
they can find it.

00:29:07.300 --> 00:29:11.240
The description for your action,
as well as the category and keywords for

00:29:11.310 --> 00:29:13.300
your action if the user is searching.

00:29:13.300 --> 00:29:16.510
So, for example,
keywords for a speak text action

00:29:16.590 --> 00:29:20.970
might be something like "say",
"speech", "speak", and "text".

00:29:21.400 --> 00:29:24.360
So, we've seen a lot about
setting the action properties,

00:29:24.360 --> 00:29:26.420
but these are extremely
important because as you can see,

00:29:26.440 --> 00:29:28.300
Todd's first demo had a lot of problems.

00:29:28.300 --> 00:29:33.580
So, I'll invite Todd back up on stage and
see if he's learned anything since then.

00:29:39.850 --> 00:29:44.100
Actually, can we still have slides,
please?

00:29:44.210 --> 00:29:47.090
So I guess we know who's
bucking for a promotion.

00:29:49.300 --> 00:29:51.730
So as Emilie explained,
I'm going to see if I can do a little

00:29:51.730 --> 00:29:54.770
bit better with configuring all my
action properties now that she's

00:29:54.910 --> 00:29:57.580
taught me what I need to know to do so.

00:29:58.160 --> 00:30:02.370
And that new feature I just had to have,
I need to be able to control what

00:30:02.380 --> 00:30:04.610
voice is used to read back my text.

00:30:04.610 --> 00:30:08.270
So we're going to add a pop-up
button to our user interface.

00:30:08.640 --> 00:30:10.490
And finally,
we're going to use AppleScript and

00:30:10.530 --> 00:30:13.850
AppleScript Studio to implement the
behavior of our user interface and

00:30:13.850 --> 00:30:16.600
the runtime behavior of the action.

00:30:16.600 --> 00:30:20.110
So, please, to the demo machine.

00:30:20.560 --> 00:30:23.200
Let's see if I can do a
little bit better this time.

00:30:23.400 --> 00:30:27.310
So let's erase the evidence of my shame.

00:30:31.200 --> 00:30:33.630
and start from this version.

00:30:33.630 --> 00:30:38.680
So let me bring up the Target Inspector.

00:30:39.910 --> 00:30:43.500
As we can see,
hopefully we can see that I've already

00:30:43.500 --> 00:30:45.380
configured quite a few of these.

00:30:45.380 --> 00:30:48.450
I've got my name set properly,
the application group where

00:30:48.450 --> 00:30:52.800
the action will appear,
category and icon name.

00:30:52.960 --> 00:30:57.800
My input is set to text object,
the way it should be apparently,

00:30:57.890 --> 00:31:00.020
as is the output.

00:31:01.000 --> 00:31:02.220
And here are my parameters.

00:31:02.270 --> 00:31:05.200
Now,
I need to add a parameter to hold the

00:31:05.290 --> 00:31:09.570
value that the user selects in the
pop-up button that chooses the voice.

00:31:09.580 --> 00:31:10.900
So let's go ahead and do that.

00:31:10.900 --> 00:31:14.260
I can add a new parameter
by clicking the plus button.

00:31:14.260 --> 00:31:18.970
And let's call it "Chosen
Voice". And Emilie showed

00:31:18.970 --> 00:31:21.690
it with no default value,
but in fact I have an

00:31:21.690 --> 00:31:24.900
overwhelmingly favorite voice,
Zarvox.

00:31:24.900 --> 00:31:25.900
I'm sure you share my opinion.

00:31:25.900 --> 00:31:29.120
So I actually want everyone that
uses my action to have to switch

00:31:29.260 --> 00:31:30.900
away from my favorite voice.

00:31:30.900 --> 00:31:33.920
So I'm going to add a default value.

00:31:36.970 --> 00:31:37.900
Excellent.

00:31:37.900 --> 00:31:40.150
So we'll see when I finally build
and run my action whether or

00:31:40.150 --> 00:31:42.710
not I've gotten all the action
properties configured correctly,

00:31:42.720 --> 00:31:43.900
but I believe I have.

00:31:43.900 --> 00:31:47.900
So let's move on to our user interface,
our main.nib.

00:31:47.950 --> 00:31:50.010
And by double-clicking
on this in the project,

00:31:50.010 --> 00:31:53.160
it will open it up in Interface Builder,
our other development tool that

00:31:53.160 --> 00:31:56.900
we need to use to create actions,
at least actions with user interfaces.

00:31:56.900 --> 00:32:01.530
So this is what you get when you create
a new project out of the template.

00:32:01.890 --> 00:32:06.700
And I'm just going to co-opt
that text to add our voice label.

00:32:06.760 --> 00:32:08.020
And let's see, what do we need?

00:32:08.020 --> 00:32:10.880
We need a pop-up button.

00:32:11.590 --> 00:32:15.080
One of the user interface guidelines
is that you should use small

00:32:15.080 --> 00:32:16.500
controls in Automator actions.

00:32:16.500 --> 00:32:19.540
So let's go ahead and use the inspector
over here on the right to set the

00:32:19.690 --> 00:32:22.820
size of my pop-up button to small.

00:32:23.600 --> 00:32:27.030
and use the Aqua guidelines
to line it up with my label.

00:32:27.120 --> 00:32:29.480
And finally,
let's add in a progress indicator so

00:32:29.510 --> 00:32:34.240
that the user gets some visual feedback
as we're populating our pop-up button.

00:32:34.310 --> 00:32:37.410
And one important thing that
I occasionally forget is that

00:32:37.410 --> 00:32:40.780
I don't want my progress indicator
to appear when it's not running,

00:32:40.840 --> 00:32:45.700
so I want to uncheck this display when
stopped attribute in the inspector.

00:32:47.040 --> 00:32:48.660
And let's clean up our pop-up menu.

00:32:48.660 --> 00:32:50.270
We don't need these items.

00:32:50.270 --> 00:32:53.860
And let's just have a default
item of loading as we're

00:32:53.970 --> 00:32:56.880
populating our pop-up button.

00:32:57.620 --> 00:33:00.010
Let's get this lined up.

00:33:00.790 --> 00:33:04.430
Another design guideline is to
have a 10 pixel border on all

00:33:04.510 --> 00:33:07.100
sides of our action controls.

00:33:07.210 --> 00:33:12.910
And I'm getting those guides by holding
down the Option key with my left hand,

00:33:12.960 --> 00:33:16.180
which you cannot see,
but it's really there.

00:33:17.490 --> 00:33:20.200
All right, so now we've got our
user interface laid out.

00:33:20.300 --> 00:33:21.900
Let's save our changes.

00:33:21.950 --> 00:33:24.220
But there are a few more
things we need to do.

00:33:24.340 --> 00:33:27.530
We mentioned AppleScript Studio,
and I actually want to use

00:33:27.530 --> 00:33:31.540
AppleScript Studio to populate
our pop-up menu with all the

00:33:31.610 --> 00:33:33.830
voices available on the system.

00:33:33.940 --> 00:33:37.450
So in order to do that,
I need to attach some handlers to

00:33:37.450 --> 00:33:41.870
these items and also name them so
I can refer to them in my code.

00:33:42.020 --> 00:33:44.520
So I'm going to switch in the
Inspector from the Attributes

00:33:44.940 --> 00:33:48.740
pane down to the AppleScript pane,
which is used for AppleScript Studio.

00:33:48.810 --> 00:33:55.000
And I want to name my pop-up button
"Voice," hopefully for obvious reasons.

00:33:55.230 --> 00:33:58.800
And let's name my progress
indicator "Loading."

00:33:59.710 --> 00:34:00.590
Excellent.

00:34:00.700 --> 00:34:04.330
Now the final thing I need
to do is attach a handler,

00:34:04.370 --> 00:34:08.090
an AppleScript Studio handler,
which will contain the code that gets run

00:34:08.230 --> 00:34:11.600
when my action is loaded into a workflow.

00:34:11.600 --> 00:34:14.260
So I'm going to do that by
attaching it to the view,

00:34:14.440 --> 00:34:17.770
which you can get by either clicking
on the background in the window

00:34:17.860 --> 00:34:19.600
or down here in my main view.

00:34:19.600 --> 00:34:23.380
One other thing that I'll point out here,
this AppleScript info object was

00:34:23.380 --> 00:34:26.600
added when I started adding names
to my user interface elements.

00:34:26.600 --> 00:34:30.700
So that stores all the
studio connections.

00:34:31.000 --> 00:34:34.110
So the handler I want
to add is AwakeFromNib.

00:34:34.260 --> 00:34:38.320
This handler is called when my
action is added to the workflow and

00:34:38.360 --> 00:34:40.810
its nib is loaded from its bundle.

00:34:41.350 --> 00:34:43.600
This is another important point.

00:34:43.650 --> 00:34:47.310
When you're adding behavior
using Studio to your action,

00:34:47.310 --> 00:34:50.840
you want to add it to a secondary script,
a UI script,

00:34:50.920 --> 00:34:55.590
not the main script which holds the
runtime behavior of your action.

00:34:55.600 --> 00:34:57.170
You want to keep them cleanly separated.

00:34:57.570 --> 00:35:00.170
And that's what I'll show you today.

00:35:01.870 --> 00:35:04.700
So once I've attached
that handler to my view,

00:35:04.700 --> 00:35:09.200
I'm going to click the New button to
create a new script to associate with it.

00:35:09.230 --> 00:35:13.120
And I'm going to create a text
script called UI.AppleScript.

00:35:13.120 --> 00:35:16.020
And as we see,
it appears down here in my inspector,

00:35:16.020 --> 00:35:17.120
automatically selected.

00:35:17.120 --> 00:35:22.470
So this has bound the view of my
action to the Awake from Nib handler,

00:35:22.470 --> 00:35:25.520
which will be tied to UI.AppleScript.

00:35:25.590 --> 00:35:27.860
So again, let me save my Nib changes.

00:35:27.880 --> 00:35:31.870
And before I go any further,
I have one more thing to do.

00:35:32.770 --> 00:35:35.460
This will be shown again
in the other demos,

00:35:35.460 --> 00:35:38.280
but we're also going to use
Cocoa bindings to actually read the

00:35:38.350 --> 00:35:42.490
value that the user has selected in
the pop-up button and transfer it to my

00:35:42.490 --> 00:35:46.240
script via the parameter that I added,
that chosen voice parameter.

00:35:46.430 --> 00:35:51.540
So I select the pop-up button and
bring up the bindings inspector.

00:35:52.000 --> 00:35:57.340
I'm going to bind to the selected value,
the actual value showing in the menu.

00:35:57.360 --> 00:36:01.590
And I want to bind that to
my chosen voice parameter.

00:36:02.260 --> 00:36:03.730
and it's just that easy.

00:36:04.040 --> 00:36:08.900
So, when the user now modifies
that pop-up button,

00:36:08.910 --> 00:36:12.330
it will save their choice
into that parameter so that

00:36:12.330 --> 00:36:14.040
I can read it from my code.

00:36:14.120 --> 00:36:17.300
So in order to do that,
let's switch back here.

00:36:19.410 --> 00:36:22.330
And once you've associated
a script with a handler,

00:36:22.330 --> 00:36:25.900
you can simply click the Edit button,
which will switch me back into Xcode and

00:36:25.910 --> 00:36:30.960
insert a template for that handler into
my script so that I can implement it.

00:36:31.050 --> 00:36:32.090
And this is what it looks like.

00:36:32.110 --> 00:36:36.700
So here's my UI.apple script
with my Awake from Nib handler.

00:36:36.890 --> 00:36:39.940
And so you don't have to watch me type,
I'm going to bring up some text

00:36:39.940 --> 00:36:42.550
clippings to build my action.

00:36:43.550 --> 00:36:45.760
So the first thing I want
to do is some housekeeping,

00:36:45.760 --> 00:36:48.860
which won't be as useful as
it might be for a larger,

00:36:48.860 --> 00:36:51.600
more complex action,
but I want to give you some good

00:36:51.600 --> 00:36:53.760
guidelines on how to get started.

00:36:53.790 --> 00:36:57.450
This will be increasingly useful
as you add more complicated user

00:36:57.450 --> 00:36:59.640
interface elements in your action.

00:36:59.680 --> 00:37:03.360
So I'm going to set up some properties
to hold references to the different

00:37:03.470 --> 00:37:05.000
elements of my user interface.

00:37:06.740 --> 00:37:09.700
I've attached the Awake from
NibHandler to the view of the action,

00:37:09.700 --> 00:37:14.140
so I know that the object that's passed
into it is in fact that content view.

00:37:14.200 --> 00:37:17.150
And then I can get its super view,
which is the overall

00:37:17.150 --> 00:37:22.240
action view reference,
and from that get my action parameters.

00:37:22.260 --> 00:37:24.810
AppleScript Studio allows you
to actually call Cocoa methods,

00:37:24.850 --> 00:37:28.400
so this is actually calling the
method action on the action view

00:37:28.660 --> 00:37:33.060
to get a reference to the action,
and then I can get its parameters.

00:37:34.070 --> 00:37:38.120
Now let's get to more interesting code.

00:37:38.240 --> 00:37:42.680
What we want to do is
when we load our action,

00:37:42.680 --> 00:37:45.580
we want to start the progress
indicator so the user gets some

00:37:45.690 --> 00:37:50.600
visual feedback and then populate our
menu with the system voices available.

00:37:50.710 --> 00:37:53.510
And of course after we do that we
want to stop the progress indicator.

00:37:53.730 --> 00:37:55.100
So that's what these three lines do.

00:37:55.100 --> 00:37:57.610
We're going to start
the progress indicator,

00:37:57.700 --> 00:37:59.380
load our menu, and then stop.

00:37:59.520 --> 00:38:01.230
Now I know what you're thinking,
"Oh that manager,

00:38:01.230 --> 00:38:03.620
he's forgotten he's got a handler
there he hasn't implemented."

00:38:03.830 --> 00:38:08.600
Well let's put that in as well.

00:38:08.730 --> 00:38:11.820
And let me walk you
quickly through this code.

00:38:14.520 --> 00:38:17.520
This is less interesting because this
is highly specific to speak text.

00:38:17.600 --> 00:38:21.400
This is where your application
logic or action logic would go.

00:38:21.520 --> 00:38:26.180
But we're going to again use call method
to read from the NSSpeechSynthesizer

00:38:26.180 --> 00:38:30.710
class the available voices,
get their names,

00:38:31.190 --> 00:38:35.840
Clean the menu out and add a new
menu item for each voice name.

00:38:35.930 --> 00:38:38.740
And finally,
set the current menu item to the current

00:38:38.740 --> 00:38:42.810
choice of the user or the system default
if they haven't made a choice yet.

00:38:43.160 --> 00:38:46.900
So that's the code we need for
our Actions user interface.

00:38:47.000 --> 00:38:50.390
We also, I think,
need to do a little bit better with

00:38:50.510 --> 00:38:53.020
the runtime behavior so that we
avoid some of those other problems

00:38:53.180 --> 00:38:55.220
that we saw in my first attempt.

00:38:55.350 --> 00:38:58.230
So again,
this is what we get out of the template.

00:39:00.620 --> 00:39:05.090
Let's try a more sophisticated version.

00:39:05.230 --> 00:39:08.300
So the first thing,
this first line is of great interest.

00:39:08.400 --> 00:39:12.990
This is in fact how you read a
parameter from the parameters block.

00:39:13.160 --> 00:39:16.090
Again, that's my chosen voice parameter
that the user will set by

00:39:16.090 --> 00:39:19.410
interacting with the pop-up button,
and the binding will write the

00:39:19.410 --> 00:39:21.100
value into the parameters block.

00:39:21.210 --> 00:39:25.180
So I can set my AppleScript chosen_voice
variable to that value

00:39:25.380 --> 00:39:27.690
and use it within my code.

00:39:28.210 --> 00:39:33.250
So I'm going to verify that the voice is
installed and then iterate through a list

00:39:33.380 --> 00:39:38.780
of text that may have been passed in,
speaking each one using the chosen voice.

00:39:38.820 --> 00:39:41.110
And then again,
returning my input because

00:39:41.110 --> 00:39:42.370
I'm not changing it.

00:39:43.050 --> 00:39:47.550
And again, we've got that getNames,
which is just a method to get a

00:39:47.550 --> 00:39:50.800
list of the available voice names.

00:39:50.800 --> 00:39:53.580
So let's make sure we implement that.

00:39:54.540 --> 00:40:00.250
Again, using the CALL method to call the
Cocoa class NSSpeechSynthesizer.

00:40:00.860 --> 00:40:02.790
So let's see, have I forgotten anything?

00:40:02.810 --> 00:40:03.700
No, I don't think so.

00:40:03.700 --> 00:40:07.190
Let's build and go and see
how well I've done this time.

00:40:11.860 --> 00:40:13.640
Hmm.

00:40:13.710 --> 00:40:16.240
I guess this is time for a joke.

00:40:16.250 --> 00:40:18.150
No.

00:40:19.140 --> 00:40:20.340
I know you would have loved it.

00:40:20.350 --> 00:40:22.800
You can imagine the funniest
joke you've ever heard.

00:40:22.800 --> 00:40:24.190
So, you know what?

00:40:24.340 --> 00:40:25.500
I made you listen to that already.

00:40:25.500 --> 00:40:28.500
Let's try something a
little bit more classic.

00:40:28.780 --> 00:40:30.020
So let's find my action.

00:40:30.020 --> 00:40:33.600
As we can see,
it now has the right icon and

00:40:33.600 --> 00:40:35.900
its description is filled out.

00:40:36.020 --> 00:40:39.890
And as you can see,
this is my action because it's Xarvox!

00:40:40.860 --> 00:40:43.510
So, you know what,
I'm not going to make you

00:40:43.830 --> 00:40:44.700
listen to the whole thing.

00:40:44.700 --> 00:40:47.300
So let's... I mean,
Lincoln was a great writer,

00:40:47.300 --> 00:40:48.700
but time is limited.

00:40:48.700 --> 00:40:52.140
Four or seven years ago our
fathers brought forth on

00:40:52.140 --> 00:40:55.730
this continent a new nation.

00:40:57.460 --> 00:40:59.400
I'm feeling more patriotic already.

00:40:59.420 --> 00:41:02.480
Alright, well that's great,
but my first version worked that well.

00:41:02.680 --> 00:41:04.400
Let's see how else it works.

00:41:04.400 --> 00:41:06.400
Let's try no input.

00:41:06.400 --> 00:41:09.400
Okay, well now I just fail silently.

00:41:09.840 --> 00:41:13.400
And let's try files and folders.

00:41:13.450 --> 00:41:16.400
Now that you can see that I'm
specifying the input correctly.

00:41:16.990 --> 00:41:23.910
Users s119 documents demo1git
gift.txt clippe And in fact,

00:41:23.910 --> 00:41:27.400
let's verify that some more behavior
that you may not have seen before.

00:41:27.400 --> 00:41:31.380
Automator allows the user to
specify that they want to actually

00:41:31.420 --> 00:41:34.510
have the user interface presented
to them when the workflow runs,

00:41:34.510 --> 00:41:36.400
so they can make a choice at that time.

00:41:36.400 --> 00:41:39.360
So let's say that whenever
I want some text to be read back,

00:41:39.460 --> 00:41:42.220
I want to actually pick
my voice at the time.

00:41:42.400 --> 00:41:45.400
So I'm going to check
show action when run.

00:41:46.080 --> 00:41:48.790
And in that case, I get

00:41:48.970 --> 00:41:51.390
The UI of the action
when the workflow runs,

00:41:51.410 --> 00:41:55.100
and I can choose a different voice,
though it pains me to do so.

00:41:55.150 --> 00:42:01.370
Users S119 documents demo
1 geek gift.txt clipping.

00:42:01.760 --> 00:42:04.740
Wow, that's awesome.

00:42:04.770 --> 00:42:07.200
And as you can see,
the voice has picked up the

00:42:07.200 --> 00:42:09.080
change that I made at runtime.

00:42:09.170 --> 00:42:12.260
So it looks like my action
is behaving correctly.

00:42:12.260 --> 00:42:17.120
I think that I deserve a round of
applause from at least Emilie for--

00:42:21.640 --> 00:42:22.570
Back to slides, please.

00:42:22.600 --> 00:42:30.950
So just to sum up what you just learned,
we learned how to set action properties

00:42:31.290 --> 00:42:35.480
and make sure that our action looks and
behaves correctly as the user interacts

00:42:35.490 --> 00:42:37.340
with it within the Automator UI.

00:42:37.450 --> 00:42:40.330
We learned how to add a user interface,
not a super complicated one,

00:42:40.380 --> 00:42:43.760
but it really is the same process for
any other user interface element that

00:42:43.760 --> 00:42:48.280
you want to select from IB's palette
and add to your actions user interface.

00:42:48.340 --> 00:42:53.590
And then we learned how to bind the
value that the user chooses in the

00:42:53.590 --> 00:42:59.040
interface to our code and make use of
it within our action runtime logic.

00:42:59.040 --> 00:43:01.000
And finally,
we learned a little bit about how to

00:43:01.100 --> 00:43:04.840
attach AppleScript Studio handlers to
make our interface a bit more dynamic,

00:43:04.870 --> 00:43:07.370
in this particular case,
to load our pop-up menu

00:43:07.370 --> 00:43:08.800
with the system voices.

00:43:08.830 --> 00:43:11.350
And if you are interested in learning
more about AppleScript Studio,

00:43:11.350 --> 00:43:15.240
again, I encourage you to attend my
hands-on session tomorrow afternoon.

00:43:15.290 --> 00:43:17.850
And with that,
I'm very pleased to introduce

00:43:18.000 --> 00:43:20.860
another new member of the
Automator team since last we met,

00:43:21.120 --> 00:43:23.510
Brooke Callahan, again,
responsible for some of the

00:43:23.510 --> 00:43:26.180
great new features in Leopard,
the Watch Me Do action.

00:43:26.200 --> 00:43:28.470
So please welcome Brooke.

00:43:34.140 --> 00:43:35.340
Thanks, Todd.

00:43:35.540 --> 00:43:38.980
So, hi everybody, I'm Brooke,
and I'm going to talk to you about

00:43:39.330 --> 00:43:41.100
writing Automator actions in Cocoa.

00:43:41.100 --> 00:43:44.100
Good news is, not a whole lot different.

00:43:44.250 --> 00:43:47.100
But first we've got to talk
about the Automator framework.

00:43:47.220 --> 00:43:51.090
In the Automator framework there are
a few classes to represent actions.

00:43:51.150 --> 00:43:54.100
There's AM action,
the abstract superclass.

00:43:54.100 --> 00:43:57.150
AM bundle action,
this is what you would inherit from if

00:43:57.150 --> 00:43:59.100
you were writing an action in Cocoa.

00:43:59.100 --> 00:44:01.690
And then there's also
AM AppleScript action,

00:44:01.690 --> 00:44:04.220
which you saw earlier,
and AM ShellScript action,

00:44:04.220 --> 00:44:06.100
which you'll see in a little bit.

00:44:07.340 --> 00:44:10.410
But for right now,
let's take a look at BC Speak Text,

00:44:10.420 --> 00:44:14.270
which is the action
that I wrote in Cocoa.

00:44:14.610 --> 00:44:18.560
So, first I'm going to show
you the action properties,

00:44:18.570 --> 00:44:23.600
which there's very little difference
between the different action types.

00:44:23.680 --> 00:44:27.160
And then the code itself,
which you're going to notice

00:44:27.160 --> 00:44:30.600
there's a lot less of,
and the user interface.

00:44:30.600 --> 00:44:33.350
So, can we switch to demo, please?

00:44:41.700 --> 00:44:50.210
So here's my project that I created using
the Cocoa Automator Action template.

00:44:52.300 --> 00:44:57.930
In the target inspector here,
we see there's one change

00:44:57.980 --> 00:45:01.160
from Todd's actions,
and that's that the principal

00:45:01.160 --> 00:45:02.940
class is BCSpeakText.

00:45:03.220 --> 00:45:06.160
When you're writing an
Automator action using Cocoa,

00:45:06.170 --> 00:45:10.200
you'd create your own
subclass of amBundleAction,

00:45:10.230 --> 00:45:13.900
and any time you change the name,
you must also change the name here,

00:45:13.910 --> 00:45:16.490
or else your action just won't work.

00:45:19.340 --> 00:45:27.040
The other two changes are the input and
output are now com.apple Cocoa.string.

00:45:27.370 --> 00:45:32.850
This is so that I don't have to unpack
the NSApple event descriptor myself,

00:45:32.900 --> 00:45:36.060
and it'll just give me a string as input.

00:45:43.370 --> 00:45:47.120
For the code itself,
I've defined two methods,

00:45:47.150 --> 00:45:52.190
one returning an array of voices that
I can bind to in my user interface.

00:45:54.410 --> 00:45:56.660
and another one, RunWithInput.

00:45:56.660 --> 00:45:59.610
This is the method that you'd--

00:45:59.760 --> 00:46:06.080
Implement yourself to define what
Automator is going to do when you run it.

00:46:06.150 --> 00:46:10.000
It's the same thing as the on-button
handler that Todd implemented earlier.

00:46:12.590 --> 00:46:16.340
Now in the main.nib,
there's no AppleScript info

00:46:16.340 --> 00:46:20.670
because I'm not binding into any...

00:46:21.650 --> 00:46:23.960
AppleScript Method Handlers.

00:46:24.020 --> 00:46:27.500
Instead, I have this Voices Controller

00:46:30.880 --> 00:46:34.880
Which is bound to that
voices method I showed you.

00:46:35.880 --> 00:46:40.800
And I have the pop-up button
with its content array bound into

00:46:40.820 --> 00:46:46.000
the voices controller and the
content values bound to the voice

00:46:46.700 --> 00:46:49.290
name of the dictionaries in that

00:46:50.290 --> 00:46:52.360
A Ray Controller.

00:46:52.380 --> 00:46:54.700
And then also the same
thing that Todd had,

00:46:54.700 --> 00:46:58.770
I had the selected value
bound to the chosen voice.

00:46:58.950 --> 00:47:04.590
One small change here though is that
since I have yet another feature,

00:47:04.790 --> 00:47:09.690
I have the multiple values placed,
well basically I have all these

00:47:09.690 --> 00:47:13.020
fields filled out as system voice
and this is basically all my error

00:47:13.020 --> 00:47:16.440
checking in case something goes wrong,
someone messes with the

00:47:17.030 --> 00:47:18.700
workflow file in some way.

00:47:18.700 --> 00:47:24.700
I will have a default value show
up instead of having an error.

00:47:24.700 --> 00:47:30.700
So, with that said, let's test it.

00:47:34.700 --> 00:47:39.640
Back to the getting spirit,
break and dress.

00:47:46.380 --> 00:47:48.410
And so you can see it's my action now.

00:47:48.500 --> 00:47:50.920
It has the system voice.

00:47:50.950 --> 00:47:52.720
I didn't explain to you
what this was earlier,

00:47:52.720 --> 00:47:57.940
but it's essentially the voice that you
set in system preferences so that any

00:47:58.240 --> 00:48:00.820
time the system needs to talk to you.

00:48:01.110 --> 00:48:02.940
It will use that voice.

00:48:03.090 --> 00:48:06.680
Four score and seven years ago
our fathers brought forth on

00:48:06.680 --> 00:48:09.240
this continent a new nation.

00:48:09.600 --> 00:48:11.600
Okay.

00:48:11.600 --> 00:48:16.670
So back to slides.

00:48:23.050 --> 00:48:27.760
We saw the differences between
AppleScript and Cocoa actions that the,

00:48:27.760 --> 00:48:31.960
really the only difference
between the InfoP-List,

00:48:31.960 --> 00:48:37.000
the configuration of the action is the
principal class and the input and output.

00:48:37.060 --> 00:48:39.300
And the input and output you
don't necessarily need to change

00:48:39.300 --> 00:48:42.500
if you like unpacking Apple and
Event descriptors yourself.

00:48:42.590 --> 00:48:45.590
The code itself,
if you're implementing in Cocoa,

00:48:45.590 --> 00:48:46.960
can be much more terse.

00:48:47.000 --> 00:48:51.340
You don't have to write nearly
as much and the user interface

00:48:51.810 --> 00:48:54.820
can be completely done using
bindings if you'd like.

00:48:54.820 --> 00:48:57.980
So now with that, I'd like to introduce,
well,

00:48:58.010 --> 00:49:03.020
I'd like Emilie to come back up and show
you how to make your action complete.

00:49:08.620 --> 00:49:10.930
So we just saw a lot of great demos.

00:49:11.080 --> 00:49:14.260
First we saw Todd fix up
his action in AppleScript,

00:49:14.260 --> 00:49:16.840
and then we saw Brooke's
great action in Cocoa.

00:49:16.900 --> 00:49:20.560
And you can see that setting your action
properly and carefully can definitely

00:49:20.560 --> 00:49:22.430
make your action a whole lot better.

00:49:22.570 --> 00:49:25.100
So now that we've seen
these two great demos,

00:49:25.100 --> 00:49:26.860
how do we make it complete?

00:49:26.910 --> 00:49:30.180
Well, first we need to test and
debug just a little bit.

00:49:30.310 --> 00:49:32.450
I know we all like to think
we write perfect code,

00:49:32.450 --> 00:49:34.600
but every once in a
while there's a few bugs.

00:49:34.690 --> 00:49:37.220
So in the demos that we saw,
Todd and Brooke were

00:49:37.290 --> 00:49:38.720
both using build and go.

00:49:38.880 --> 00:49:40.560
But if you're having
problems in your code,

00:49:40.600 --> 00:49:44.730
you can also do build and debug and
use the debugger of your choice.

00:49:44.840 --> 00:49:49.490
From Xcode 2.1 and onward,
in all the action templates,

00:49:49.490 --> 00:49:52.770
we have a command line tool called amlin,
which is automatically run

00:49:52.770 --> 00:49:54.120
when you build your action.

00:49:54.210 --> 00:49:57.660
This is essentially a verification
tool which checks for errors in

00:49:57.660 --> 00:50:01.240
both your user interface file as
well as your action properties.

00:50:01.310 --> 00:50:02.880
So now we've cleaned up our action.

00:50:03.050 --> 00:50:03.530
It runs.

00:50:03.590 --> 00:50:04.030
It builds.

00:50:04.130 --> 00:50:04.600
And we think it's fine.

00:50:04.670 --> 00:50:05.260
It's great.

00:50:05.260 --> 00:50:07.120
And we add it to the workflow,
and it's not doing

00:50:07.120 --> 00:50:08.280
quite what we expected.

00:50:08.280 --> 00:50:10.540
So to debug it once
it's in your workflow,

00:50:10.540 --> 00:50:15.580
you can add view results actions
both before and after your action so

00:50:15.580 --> 00:50:19.240
you can see what the input is coming
into your action as well as what your

00:50:19.240 --> 00:50:21.180
action is returning as its output.

00:50:21.180 --> 00:50:23.620
And I'll take this moment
to mention that in Leopard,

00:50:23.650 --> 00:50:25.690
we have a new result,
which I implemented.

00:50:25.840 --> 00:50:29.620
So I encourage you to come to the session
this afternoon and take a look at it.

00:50:29.710 --> 00:50:33.300
Additionally, you can also add an Ask for
Confirmation action to your workflow

00:50:33.300 --> 00:50:36.490
so you can pause or cancel the
execution of the workflow if you see

00:50:36.590 --> 00:50:38.780
that something isn't going correctly.

00:50:39.090 --> 00:50:42.120
So, we've tested our action,
we've debugged it, everything's great.

00:50:42.210 --> 00:50:44.300
So now let's install the action.

00:50:44.370 --> 00:50:47.940
Actions that ship with the OS live
in System Library Automator,

00:50:48.070 --> 00:50:52.500
but your actions should live in the
appropriate Library/Automator folder.

00:50:52.570 --> 00:50:55.450
Additionally,
if your action is part of an application,

00:50:55.520 --> 00:50:57.810
it should live in your
Applications Bundle.

00:50:57.990 --> 00:51:01.050
So if you've been paying attention,
you'll remember that there are

00:51:01.050 --> 00:51:05.140
three types of Automator actions,
and we took a look at AppleScript and

00:51:05.140 --> 00:51:09.860
we took a look at Objective-C,
but what about the last one, ShellScript?

00:51:09.980 --> 00:51:12.480
And that's because I've
saved the best for last,

00:51:12.480 --> 00:51:15.760
and so we're going to take a
look at ShellScript actions now.

00:51:15.900 --> 00:51:19.890
So we're going to see a Perl action
that I've written called GeekText,

00:51:19.890 --> 00:51:23.900
and you might be able to
guess what this will do.

00:51:24.040 --> 00:51:28.600
So we're going to learn how the
user interface doesn't vary,

00:51:28.600 --> 00:51:31.150
essentially,
from both AppleScript actions

00:51:31.150 --> 00:51:32.830
and Cocoa actions,
and then we're going to take

00:51:32.860 --> 00:51:33.900
a quick look at the code.

00:51:33.900 --> 00:51:37.320
So switch to demo, please.

00:51:47.330 --> 00:51:50.360
So here's the GeekText project
that I've created.

00:51:50.370 --> 00:51:53.140
And I did this by, again,
going to the Assistant and

00:51:53.270 --> 00:51:58.200
creating a shell script action.

00:51:58.200 --> 00:51:58.200
And when you do so,

00:52:01.430 --> 00:52:04.390
type in Dvorak,
so Cordy is very slow for me.

00:52:04.400 --> 00:52:12.580
So when you first create
your shell script action,

00:52:12.580 --> 00:52:16.340
you'll see that here you have to set what
you're going to write your action in.

00:52:16.340 --> 00:52:19.720
So in my case, I had said it's a Perl.

00:52:19.740 --> 00:52:21.380
But we don't really
care about this project.

00:52:21.380 --> 00:52:23.420
Let's take a look at
the Geek Text project.

00:52:23.520 --> 00:52:29.230
So the user interface,
we see that here I have my pop-up.

00:52:29.700 --> 00:52:34.750
Found its selected tag to the key level.

00:52:35.020 --> 00:52:39.390
And so that isn't any different from
the other actions that you already saw.

00:52:39.440 --> 00:52:43.700
And then in my script file,
I have this set to Perl,

00:52:43.710 --> 00:52:48.900
and here is where I grab the value
of the binding that I had set.

00:52:48.940 --> 00:52:52.200
And the bindings are passed
in as environment variables,

00:52:52.200 --> 00:52:55.100
so you just get your environment
variables as you would with the

00:52:55.100 --> 00:52:58.700
scripting language of your choice,
and you have your bindings.

00:52:59.420 --> 00:53:03.740
So let's take a look and see
what this action will do,

00:53:03.790 --> 00:53:06.400
in case you haven't
figured it out already.

00:53:10.520 --> 00:53:12.800
Keep remembering that
favorite joke of yours.

00:53:12.800 --> 00:53:15.440
All right.

00:53:15.440 --> 00:53:18.620
So.

00:53:20.090 --> 00:53:23.290
Here, my action is living in Terminal
because it was a shell script action,

00:53:23.290 --> 00:53:25.600
but of course you can change
that in the action properties.

00:53:25.600 --> 00:53:28.000
So, here's my action.

00:53:28.000 --> 00:53:31.510
My lead level is Noob,
and you can see I have example text

00:53:31.600 --> 00:53:33.600
that I implemented with Studio Handlers.

00:53:33.600 --> 00:53:38.550
And let's see what
happens when I run this.

00:53:41.480 --> 00:53:42.160
Great.

00:53:42.230 --> 00:53:43.390
Looks awesome.

00:53:43.510 --> 00:53:45.340
Totally legible.

00:53:45.390 --> 00:53:48.500
Let's change it to Leet.

00:53:48.760 --> 00:53:52.040
Okay,
but I think I'm an uber-leet hacksaw,

00:53:52.280 --> 00:53:54.390
so let's see it again.

00:53:55.150 --> 00:53:57.060
Wow.

00:53:57.140 --> 00:53:59.950
Well, but, you know, that wasn't enough,
so let's see what

00:53:59.950 --> 00:54:03.860
happens if we speak this.

00:54:05.970 --> 00:54:07.890
We'll use our Vox.

00:54:07.900 --> 00:54:19.270
F0, 2, 5, 0, 23, 4, 53, 33, 34, 25, 490

00:54:19.410 --> 00:54:21.880
Tifferifferiffer 490.

00:54:21.960 --> 00:54:23.280
That's great.

00:54:23.500 --> 00:54:25.860
Alright, back to slides please.

00:54:31.220 --> 00:54:32.280
So, what did you learn?

00:54:32.440 --> 00:54:34.280
Well,
first you learned that when you translate

00:54:34.360 --> 00:54:37.800
the Gettysburg Address to Geek Text,
it sounds like "tifferifferiffer."

00:54:37.910 --> 00:54:42.630
You also learned how to set the shebang,
which was setting sh to Perl,

00:54:42.630 --> 00:54:45.230
and you learned how to
implement the action in Perl.

00:54:45.330 --> 00:54:47.900
You also learned how to
extract the bindings,

00:54:48.050 --> 00:54:50.460
but not only that,
you learned how to extract the bindings

00:54:50.530 --> 00:54:52.840
with any shell scripting language,
not just Perl,

00:54:52.890 --> 00:54:55.800
because they're just passed
in as environment variables.

00:54:56.000 --> 00:54:59.340
So, now that we've covered
AppleScript actions,

00:54:59.480 --> 00:55:03.330
Cocoa actions, and Shell script actions,
let's step back and take a look at

00:55:03.380 --> 00:55:04.810
what we've learned in this session.

00:55:04.900 --> 00:55:07.900
Well, we started out with what
Automator actions are.

00:55:07.900 --> 00:55:12.070
We learned about the types of actions
and the parts of the actions and

00:55:12.100 --> 00:55:13.900
how they interact with each other.

00:55:13.900 --> 00:55:16.900
After that, we learned why actions
are extremely important.

00:55:16.900 --> 00:55:19.900
We learned that if we
want great workflows,

00:55:19.900 --> 00:55:22.900
we first need great actions,
and if you want to put a new face

00:55:22.900 --> 00:55:25.920
on your application's technology,
then creating great Automator

00:55:25.920 --> 00:55:27.900
actions is very important.

00:55:27.900 --> 00:55:30.830
We then learned how to create
the action projects and how to

00:55:30.830 --> 00:55:32.900
implement an AppleScript action.

00:55:32.900 --> 00:55:35.100
After that,
we designed a little bit of the

00:55:35.100 --> 00:55:38.800
user interface for an action,
and then we set the action properties.

00:55:38.890 --> 00:55:42.900
We then saw how to implement
a Cocoa action and build,

00:55:42.900 --> 00:55:47.180
test, run, and install an action, which,
as you saw, was easier done than said,

00:55:47.180 --> 00:55:50.180
and how to implement a Perl action,
and now we know how to create

00:55:50.180 --> 00:55:51.900
great Automator actions.

00:55:51.900 --> 00:55:57.900
Well, to me, that looks an awful lot
like we just did a workflow.

00:55:57.900 --> 00:56:01.020
We started out with what
Automator actions are,

00:56:01.020 --> 00:56:03.900
and then we went all the
way through these steps,

00:56:03.900 --> 00:56:06.170
and we ended up,
we now know how to create

00:56:06.170 --> 00:56:07.900
great Automator actions.

00:56:07.900 --> 00:56:12.440
So you can see how having the right
steps in your workflow is extremely

00:56:12.440 --> 00:56:15.880
essential to creating a great workflow.

00:56:16.030 --> 00:56:19.860
So that's why we need you to go out
and create great Automator actions.

00:56:20.700 --> 00:56:23.560
So, for next steps,
you can of course read the documentation,

00:56:23.560 --> 00:56:25.000
but who wants to do that?

00:56:25.000 --> 00:56:29.600
So take a look at the example projects
also in Developer Examples Automator.

00:56:29.810 --> 00:56:33.710
There is the advanced topics session
this afternoon at 2 in this room,

00:56:33.820 --> 00:56:37.350
and you can also come to the lab
after that at 3:30 where the Automator

00:56:37.350 --> 00:56:39.600
team will be more than happy to
answer all of your questions.

00:56:39.600 --> 00:56:44.590
And after that, just write and ship great
actions for people to use.

00:56:44.600 --> 00:56:47.980
So for related sessions,
you can attend any of

00:56:47.980 --> 00:56:49.600
these great sessions.

00:56:49.600 --> 00:56:53.450
And for more information,
you can contact Sal Segoian,

00:56:53.620 --> 00:56:55.600
our Automator Product Manager.

00:56:55.600 --> 00:56:57.870
Or if you want to learn
how to write bad actions,

00:56:57.890 --> 00:57:01.600
you can contact Todd Fernandez,
the Automator Engineering Manager.

00:57:01.600 --> 00:57:05.260
You can also email the Automator
Developers mailing list or go to the

00:57:05.260 --> 00:57:07.600
developer website for more resources.