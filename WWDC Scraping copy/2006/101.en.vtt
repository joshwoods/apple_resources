WEBVTT

00:00:10.550 --> 00:00:12.660
Good morning.

00:00:12.670 --> 00:00:13.640
My name is Chris Parker.

00:00:13.640 --> 00:00:16.790
I work in the Cocoa frameworks team,
and I'm glad you could all join

00:00:16.790 --> 00:00:19.880
me here at 9 in the morning
for What's New in Cocoa.

00:00:19.880 --> 00:00:22.260
So let's get started.

00:00:22.260 --> 00:00:24.670
We have a number of new things going on.

00:00:24.670 --> 00:00:29.320
We've made a lot of changes for 64-bit
and for resolution independence,

00:00:29.320 --> 00:00:32.590
so you heard Simon Patience
and Peter Graffagnino talk

00:00:32.590 --> 00:00:34.460
about those yesterday.

00:00:35.040 --> 00:00:37.810
We have a lot of new behaviors
for existing API as usual,

00:00:37.810 --> 00:00:40.890
a bunch of new API and some new
controls and things like that that

00:00:40.920 --> 00:00:42.660
we're going to show you today.

00:00:42.660 --> 00:00:46.240
So let's start with some
discussion about 64-bit.

00:00:46.240 --> 00:00:48.780
Simon told everybody
yesterday that in Tiger,

00:00:48.780 --> 00:00:51.760
all the lower level system
libraries were 64-bit,

00:00:51.760 --> 00:00:53.860
and now in Leopard we're moving up.

00:00:53.860 --> 00:00:56.250
So the frameworks now
are going to be 64-bit,

00:00:56.250 --> 00:00:58.900
and we've made some changes
throughout Foundation and

00:00:58.900 --> 00:01:00.510
the kit to facilitate this.

00:01:00.520 --> 00:01:03.140
So we've updated our
collections in 64-bit.

00:01:03.140 --> 00:01:05.000
They can hold many more objects.

00:01:05.000 --> 00:01:10.050
We've added some new types and new
methods to deal with the wider word size,

00:01:10.050 --> 00:01:14.230
and we've also provided some
conversion scripts for you.

00:01:14.240 --> 00:01:16.850
So if you look around in
your developer folder,

00:01:16.850 --> 00:01:20.840
you'll find some scripts to do some
conversion of types and methods.

00:01:20.840 --> 00:01:23.570
You'll also find some
verifier for NSCoders,

00:01:23.570 --> 00:01:27.350
so we're going to try and help you
get your archiving right in both

00:01:27.350 --> 00:01:30.030
the 32-bit and the 64-bit world.

00:01:30.040 --> 00:01:34.420
We've also removed some
classes in the kit.

00:01:34.420 --> 00:01:34.520
And sometimes we'll have to
do some work on the code,

00:01:34.520 --> 00:01:34.680
but we're going to try and help you
get your archiving right in both

00:01:34.680 --> 00:01:35.020
the 32-bit and the 64-bit world.

00:01:35.020 --> 00:01:38.100
So we've pulled out NS Menu View.

00:01:38.100 --> 00:01:40.730
We've pulled out
NS Movie and NS Movie View,

00:01:40.730 --> 00:01:45.840
and those have been deprecated in favor
of the 64-bit stuff that's in QtKit.

00:01:45.860 --> 00:01:50.070
QuickDraw, you saw yesterday,
QuickDraw has been completely deprecated,

00:01:50.090 --> 00:01:51.860
so NS QuickDraw View is gone.

00:01:51.860 --> 00:01:55.980
And NS, the Simple Horizontal Typesetter,
that's been deprecated

00:01:55.980 --> 00:01:57.380
for a little while.

00:01:57.380 --> 00:01:59.840
We're actually pulling that out
of the kit in 64-bit as well.

00:01:59.840 --> 00:02:03.190
And the new typesetter APIs are
what you should be looking at.

00:02:05.010 --> 00:02:07.880
We've taken individual methods
here and there out for 64-bit.

00:02:07.880 --> 00:02:10.970
We've taken advantage of this
opportunity for binary compatibility to

00:02:10.990 --> 00:02:12.180
be able to pull some of that stuff out.

00:02:12.180 --> 00:02:14.150
So some deprecated methods are gone.

00:02:14.180 --> 00:02:18.170
We've also made a lot of changes
for resolution independence.

00:02:18.220 --> 00:02:20.640
The work started in
Tiger for developer testing,

00:02:20.640 --> 00:02:22.380
so when you fire up
Quartz Debug in Leopard,

00:02:22.380 --> 00:02:24.220
you'll be able to see some new behaviors.

00:02:24.220 --> 00:02:26.860
Most of the standard controls
now draw in high res,

00:02:26.860 --> 00:02:30.340
so when you scale your
UI up at 1.5x or 2x,

00:02:30.340 --> 00:02:32.190
there'll be a nice crisp button.

00:02:32.230 --> 00:02:34.220
There'll be good crisp text in the menus.

00:02:34.220 --> 00:02:36.200
And outlines for all the controls.

00:02:36.220 --> 00:02:38.630
We've worked on a lot of
the standard images now are

00:02:38.630 --> 00:02:42.320
available in high resolution,
so if you ask for a named image,

00:02:42.320 --> 00:02:45.220
you're going to get a nice big scalable
image that will get displayed correctly.

00:02:45.220 --> 00:02:49.210
We've addressed a lot of the problems
with non-integral scaling that we had.

00:02:49.250 --> 00:02:53.220
Scrolling now works a whole lot
better when you're scrolling in views.

00:02:53.220 --> 00:02:55.570
And some of the table view
stuff has been fixed for row

00:02:55.650 --> 00:02:57.220
alignment in high resolution.

00:02:57.220 --> 00:03:00.210
So there are a lot of other changes here.

00:03:00.220 --> 00:03:02.220
They're all in the release notes.

00:03:02.220 --> 00:03:04.220
I could talk for a long time about this.

00:03:04.220 --> 00:03:07.220
But we do have a few other
talks for you to go to for this.

00:03:07.220 --> 00:03:11.510
So right here in this room at 10:30,
the Taking Advantage of

00:03:11.510 --> 00:03:13.220
Leopard features in Cocoa talk.

00:03:13.220 --> 00:03:17.220
And in the marina later
today is a 64-bit overview.

00:03:17.220 --> 00:03:20.370
And those two talks will cover
a lot of the stuff in more

00:03:20.370 --> 00:03:22.220
detail here than I can here.

00:03:22.220 --> 00:03:26.220
So let's just get started right
with the stuff in the app kit.

00:03:26.220 --> 00:03:31.220
You saw Peter Graffagnino talk
about the cinematic experience.

00:03:31.220 --> 00:03:33.220
And part of that is using core animation.

00:03:33.220 --> 00:03:36.640
What we're doing is we're going to
incorporate a lot of these core animation

00:03:36.640 --> 00:03:39.220
capabilities directly into the app kit.

00:03:39.300 --> 00:03:44.200
So NSView subtrees can be automatically
mirrored into the core animation layers.

00:03:44.220 --> 00:03:47.320
So if you've been looking at the
core animation API on Leopard,

00:03:47.320 --> 00:03:50.220
you'll see that there's this idea
of a layer that each view will have.

00:03:50.220 --> 00:03:54.220
And we're also adopting the implied
animation model that's there.

00:03:54.220 --> 00:03:56.650
So you'll be able to do some very
similar things where you set an

00:03:56.650 --> 00:03:58.200
attribute and just have it happen.

00:03:58.220 --> 00:04:02.220
This also means that we can add new
appearance attributes to NSView.

00:04:02.350 --> 00:04:05.220
So there will be some new
things you can do with views.

00:04:05.220 --> 00:04:08.220
And it's all to make
animation easier in Cocoa.

00:04:08.220 --> 00:04:11.220
So we don't like writing lots of
code any more than you guys do.

00:04:11.220 --> 00:04:13.670
So we're going to try and compress
down how much code everybody

00:04:13.670 --> 00:04:17.220
has to write to get really good
eye-popping animations into this.

00:04:17.220 --> 00:04:22.220
So the way you turn on the layers for
a view is you call set wants layer yes.

00:04:22.220 --> 00:04:25.180
And that takes the entire
view subtree and makes it core

00:04:25.180 --> 00:04:27.220
animation capable effectively.

00:04:27.220 --> 00:04:31.220
So we've introduced this idea of
an animator proxy for the object.

00:04:31.220 --> 00:04:33.320
So before if you called
set frame on a view,

00:04:33.390 --> 00:04:35.220
it would happen automatically.

00:04:35.220 --> 00:04:38.440
Now what you'll do is you'll
ask for the view's animator and

00:04:38.650 --> 00:04:40.220
then call set frame on that.

00:04:40.220 --> 00:04:44.220
And that makes it happen using
the core animation effects.

00:04:44.700 --> 00:04:47.700
If you need to do longer
durations than the default,

00:04:47.700 --> 00:04:51.590
or if you want to group multiple
things into a single animation effect,

00:04:51.590 --> 00:04:53.200
you'll use an NSAnimationContext.

00:04:53.200 --> 00:04:55.660
This is a similar idea
to an NSGraphicsContext.

00:04:55.710 --> 00:04:58.030
You begin a grouping,
in the current context

00:04:58.030 --> 00:05:00.530
you set the duration,
and then you do things

00:05:00.530 --> 00:05:01.690
like set the frame.

00:05:01.700 --> 00:05:06.200
And then when you call end grouping,
that touches off the animation.

00:05:07.310 --> 00:05:09.580
The new NSView properties,
things like the layers

00:05:09.580 --> 00:05:11.700
are an obvious property,
but this will include

00:05:11.750 --> 00:05:15.620
things like alpha value,
the view, the shadows, compositing,

00:05:15.620 --> 00:05:19.670
origin, frame, the bounds,
all of that stuff is all controllable

00:05:19.820 --> 00:05:21.840
by this new animator proxy idea.

00:05:21.840 --> 00:05:27.280
And again, I could talk for a long time,
but we have a Cocoa Animation Techniques

00:05:27.280 --> 00:05:29.560
talk in Knob Hill on Wednesday.

00:05:29.560 --> 00:05:32.720
And if you'd like to learn more
about using the Core Animation stuff

00:05:32.720 --> 00:05:35.150
in Cocoa and how all this
stuff works just by turning

00:05:35.150 --> 00:05:38.680
on the LayerKit stuff in Cocoa,
that's where you should go.

00:05:38.680 --> 00:05:42.070
And I'm going to ask
Doug Davidson to come up,

00:05:42.070 --> 00:05:43.950
and he's going to talk about
some stuff that we've been

00:05:43.950 --> 00:05:45.030
working on for Cocoa Text.

00:05:50.000 --> 00:05:51.340
Thank you, Chris.

00:05:51.450 --> 00:05:56.370
Let me just go over to
the demo machine here.

00:05:56.420 --> 00:05:59.390
Now, from time to time over
the last few years,

00:05:59.390 --> 00:06:01.600
people would come up
to me and they'd say,

00:06:01.600 --> 00:06:08.300
"Now, the Cocoa Tech system is great,
but why does it slow down

00:06:08.300 --> 00:06:09.390
so much when I try to load
in my 50 megabyte log file?"

00:06:10.500 --> 00:06:13.230
I have to say, well, you know,
it's not really designed for that.

00:06:13.260 --> 00:06:15.490
And some of them will say,
so redesign it.

00:06:15.500 --> 00:06:18.500
That would take a long time.

00:06:18.500 --> 00:06:21.470
Well, for Leopard, we've had a long time.

00:06:21.550 --> 00:06:25.850
And anything over a year is a
long time for an OS release,

00:06:25.850 --> 00:06:27.450
don't you think?

00:06:33.100 --> 00:06:34.140
: Hello, everyone.

00:06:34.200 --> 00:06:36.630
I'm Chris Parker,
and I'm going to talk about the new

00:06:36.630 --> 00:06:38.330
features in the Cocoa framework.

00:06:38.330 --> 00:06:42.210
This talk provides an overview of new
features and important changes introduced

00:06:42.210 --> 00:06:44.010
in the Cocoa frameworks in Leopard.

00:06:44.010 --> 00:06:45.450
Learn about the exciting
developments in AppKit,

00:06:45.450 --> 00:06:45.450
Core Data, Foundation,
and other related frameworks on Mac OS X,

00:06:45.450 --> 00:06:45.450
and get pointers to other sessions
that cover the changes in more detail.

00:06:45.450 --> 00:06:45.450
Learn about the exciting
developments in AppKit,

00:06:45.450 --> 00:06:45.450
Core Data, Foundation,
and other related frameworks on Mac OS X,

00:06:45.450 --> 00:06:45.450
and get pointers to other sessions
that cover the changes in more detail.

00:06:55.100 --> 00:06:56.320
So let's go back to the slides.

00:06:56.340 --> 00:07:04.710
And let me talk about what we've
done to make this possible.

00:07:04.720 --> 00:07:07.240
Well, first of all,
we've rewritten a large

00:07:07.240 --> 00:07:09.090
chunk of the text system.

00:07:09.180 --> 00:07:11.770
More important for you,
we've added a new option

00:07:12.230 --> 00:07:15.300
to NSLayoutManager called
non-contiguous layout.

00:07:15.540 --> 00:07:18.180
What this does is it means
that when it's turned on,

00:07:18.180 --> 00:07:20.620
any portion of the
document can be laid out,

00:07:20.620 --> 00:07:24.920
regardless of whether previous portions
have been laid out previously or not.

00:07:25.910 --> 00:07:28.390
And as you can see,
this does have significant performance

00:07:28.400 --> 00:07:30.450
benefits for large documents.

00:07:30.760 --> 00:07:32.040
However, this is an option.

00:07:32.040 --> 00:07:33.430
It's not on by default.

00:07:33.430 --> 00:07:34.280
You have to turn it on.

00:07:34.280 --> 00:07:38.720
The reason is that it also produces
some significant behavioral changes

00:07:38.790 --> 00:07:40.890
to the NSLayoutManager APIs.

00:07:41.160 --> 00:07:45.370
Now, if you are using
NSLayoutManager only indirectly,

00:07:45.450 --> 00:07:49.280
say via NSTextView,
then you can probably just turn

00:07:49.440 --> 00:07:51.900
it on without any problems.

00:07:52.030 --> 00:07:54.440
If you are using
NSLayoutManager directly,

00:07:54.440 --> 00:07:57.260
however,
you probably will have to do some work to

00:07:57.260 --> 00:07:59.900
modify your code in order to adopt this.

00:07:59.900 --> 00:08:04.820
For TextEdit,
I think it was just a one-line change.

00:08:05.140 --> 00:08:11.620
When Xcode adopted this,
they had to do significantly more work,

00:08:11.620 --> 00:08:14.470
but not too bad, I think.

00:08:14.900 --> 00:08:18.640
Now along with this comes some
new NSLayoutManager methods.

00:08:18.660 --> 00:08:21.760
Of course,
there's a flag to turn it on or off.

00:08:21.760 --> 00:08:26.300
And because of these behavioral changes,
we also have some new methods that

00:08:26.300 --> 00:08:30.220
allow you to explicitly specify and
force glyph generation or layout for

00:08:30.230 --> 00:08:32.400
specific portions of the document.

00:08:33.460 --> 00:08:36.960
We've also taken this opportunity
to do some cleanup on our API to

00:08:36.960 --> 00:08:41.240
fill in some holes and add some
new methods to make things simpler.

00:08:41.240 --> 00:08:44.290
For the details of the new
methods and behavioral changes,

00:08:44.290 --> 00:08:47.980
go to the AppKit release notes and
look at the NSLayoutManager header.

00:08:47.980 --> 00:08:49.620
It's all specified there.

00:08:51.620 --> 00:08:54.700
So what else do we have for you?

00:08:54.750 --> 00:08:58.510
Well, as you know,
the Cocoa Tech System imports and

00:08:58.510 --> 00:09:05.040
exports a variety of document formats,
HTML, Word doc format, and so forth.

00:09:05.040 --> 00:09:08.320
There's been a lot of talk recently
about some new document formats.

00:09:08.360 --> 00:09:11.860
So I'm pleased to be able
to say that in Leopard,

00:09:11.880 --> 00:09:16.070
the Cocoa Tech System will
import and export both the Oasis

00:09:16.070 --> 00:09:21.480
Open Document format used by
OpenOffice 2 and the ECMA Office 2.

00:09:21.500 --> 00:09:27.080
There's also the Office Open XML format
used by Office 2007.

00:09:28.200 --> 00:09:31.850
The support for this is on the
system that you've received.

00:09:31.990 --> 00:09:35.130
It is currently still
somewhat preliminary.

00:09:35.130 --> 00:09:38.440
In the case of Office OpenXML,
necessarily so because the

00:09:38.440 --> 00:09:40.050
standard is not yet finalized.

00:09:40.080 --> 00:09:45.090
And also there's an important caveat,
and that is that the Office 2007

00:09:45.090 --> 00:09:49.720
betas don't use a standard format,
they use a non-standard variant.

00:09:49.720 --> 00:09:52.300
We can handle it, but anyway,
the details for this are

00:09:52.300 --> 00:09:53.640
also in the release notes.

00:09:53.640 --> 00:09:55.050
You can take a look at that.

00:09:55.620 --> 00:09:59.770
And you can try this out in TextEdit,
a system you have.

00:10:00.710 --> 00:10:03.600
What else is on the
system you've received?

00:10:03.600 --> 00:10:07.800
We have a number of smaller
additions to the tech system APIs.

00:10:07.800 --> 00:10:12.540
A number of people have asked for
more control over the spell checker,

00:10:12.550 --> 00:10:16.790
and in particular over the dotted
underlined misspelling indicator,

00:10:16.860 --> 00:10:19.750
where it gets shown,
and we've added that for you.

00:10:19.750 --> 00:10:23.070
We have a number of new methods
for controlling temporary

00:10:23.100 --> 00:10:25.260
attributes on the layout manager.

00:10:25.260 --> 00:10:30.220
And the layout manager has a new
method to make it much easier to get

00:10:30.230 --> 00:10:34.180
access to insertion points in the text,
in particular to get bulk

00:10:34.180 --> 00:10:35.560
access to many at once.

00:10:35.560 --> 00:10:39.880
And there are a number of other new
bulk methods from the layout manager.

00:10:39.880 --> 00:10:44.380
Text views now have tool tips
for links to automatically show

00:10:44.390 --> 00:10:46.290
the destination of the link.

00:10:46.290 --> 00:10:47.310
And a lot more.

00:10:47.310 --> 00:10:51.150
Take a look at the
Reese notes again for details.

00:10:51.150 --> 00:10:51.150
Chris Parker, Doug Davidson

00:10:52.150 --> 00:10:54.390
In addition,
there are some new features that are

00:10:54.390 --> 00:10:59.260
not enabled on the C that you have
that are planned for levered final.

00:10:59.260 --> 00:11:03.120
Among these are grammar checking
to go along with spell checking,

00:11:03.120 --> 00:11:08.260
inline editing of
images attached in text,

00:11:08.300 --> 00:11:12.640
courtesy of ImageKit, smart quotes,
automatic conversion of

00:11:12.640 --> 00:11:17.030
straight quotes to curly quotes,
and automatic detection of

00:11:17.030 --> 00:11:20.020
URLs and text conversion to links.

00:11:20.180 --> 00:11:23.770
All of these, of course,
on an opt-in basis.

00:11:24.310 --> 00:11:28.240
There is one more thing I want
to mention that's not perhaps

00:11:28.240 --> 00:11:31.060
directly relevant to Cocoa,
and that is that there is a new

00:11:31.060 --> 00:11:35.000
public framework in Leopard at
the Carbon level called Core Text.

00:11:35.000 --> 00:11:38.160
This was private in Tiger,
now public in Leopard.

00:11:38.160 --> 00:11:42.300
This is essentially a modern
replacement for Atsui,

00:11:42.370 --> 00:11:47.160
and it provides very low-level
line layout information.

00:11:47.160 --> 00:11:49.730
The Cocoa text system has been
using it to get its low-level

00:11:49.730 --> 00:11:51.280
line information since Tiger.

00:11:53.120 --> 00:11:56.660
Probably most of you will never need to
use it because you have Cocoa APIs like

00:11:56.660 --> 00:11:58.460
NSLayoutManager to get this information.

00:11:58.460 --> 00:12:00.900
But if you've ever had
occasion to use Atsui,

00:12:00.900 --> 00:12:02.980
you should take a look at Core Text.

00:12:02.980 --> 00:12:04.300
It's a lot easier to use.

00:12:04.300 --> 00:12:07.100
For starters,
it's based on attributed strings,

00:12:07.110 --> 00:12:09.060
just like the Cocoa text system.

00:12:09.060 --> 00:12:12.080
And there is a talk on this,
I believe it's on Thursday.

00:12:12.080 --> 00:12:19.020
And now I'd like to bring Chris back
up to continue talking about AppKit.

00:12:26.620 --> 00:12:27.600
Thank you, Doug.

00:12:27.600 --> 00:12:30.040
We've got some new controls and
some new behaviors in the kit,

00:12:30.040 --> 00:12:33.590
and since Doug started out with a demo,
I thought I would also.

00:12:33.590 --> 00:12:38.390
So, one of the things that
we've been working on here,

00:12:38.390 --> 00:12:42.530
if I could have this demo machine,
please, is...

00:12:43.500 --> 00:12:45.960
I'm trying to improve some of the
things about the menuing system.

00:12:45.960 --> 00:12:49.130
So here I have just an
application that you might whip

00:12:49.130 --> 00:12:51.490
together in Interface Builder.

00:12:51.600 --> 00:12:52.800
It has a help menu.

00:12:52.800 --> 00:12:55.500
We see that the search menu
is automatically in there.

00:12:55.500 --> 00:12:59.620
You know, the window menu,
the normal stuff.

00:12:59.860 --> 00:13:02.850
Let me go down here to the
application menu and if we look

00:13:02.920 --> 00:13:09.070
at this "What's This?" menu,
we've made a few changes.

00:13:09.880 --> 00:13:15.680
You can now put arbitrary
views in NS Menu items.

00:13:21.200 --> 00:13:24.050
On the top here there's a
garden variety text view.

00:13:24.050 --> 00:13:27.840
We have a button and an indeterminate
progress indicator and a circular

00:13:27.880 --> 00:13:29.690
slider there at the far right.

00:13:29.800 --> 00:13:35.120
That spinning put any crazy view is a Qt,
is a Quartz Composer composition.

00:13:35.290 --> 00:13:41.930
And this last view down here,
well you can, oh, I moved away.

00:13:41.930 --> 00:13:43.530
There we go.

00:13:43.530 --> 00:13:43.530
You can actually,
I'm going to show you a little bit of a

00:13:47.400 --> 00:13:49.400
I played this for hours for a while.

00:13:49.400 --> 00:13:50.960
This was just great.

00:13:50.960 --> 00:13:53.990
So that's what we've done for menus.

00:13:53.990 --> 00:13:55.340
If I could have the slides back, please.

00:13:59.700 --> 00:14:01.920
I'm on NS Menu Item,
and the way you do this is you

00:14:01.980 --> 00:14:06.670
basically set up your view the way
you'd like and call setView on it.

00:14:07.300 --> 00:14:08.680
There's no step three, right?

00:14:08.690 --> 00:14:12.860
It's create your view, call set view,
you're done.

00:14:13.050 --> 00:14:15.420
Menu items with views don't do things
like draw their title or state,

00:14:15.420 --> 00:14:18.540
so everything gets assigned
to your view for drawing.

00:14:18.540 --> 00:14:20.660
You'll get mouse events and
things like that normally,

00:14:20.660 --> 00:14:22.430
but you won't necessarily be
able to get keyboard events,

00:14:22.430 --> 00:14:22.780
right?

00:14:22.780 --> 00:14:25.890
So we're tracking the menu
for keyboard equivalents,

00:14:25.890 --> 00:14:27.780
but not directly in the view.

00:14:27.780 --> 00:14:30.100
So there are a few restrictions,
but you should be able to play

00:14:30.110 --> 00:14:32.440
with it and figure out exactly
what you'll be able to do.

00:14:34.800 --> 00:14:36.520
We've added some new delegate
methods to NS Menu also,

00:14:36.520 --> 00:14:38.930
so when you're mousing over the menus,
you'll be able to get more information

00:14:38.930 --> 00:14:39.890
about what the user's doing.

00:14:39.900 --> 00:14:40.980
You'll get a delegate callback.

00:14:40.980 --> 00:14:42.290
Menu will open just before it pops open.

00:14:42.290 --> 00:14:43.220
Menu did close.

00:14:43.220 --> 00:14:46.970
It will highlight item as the user
scrolls through it just before that

00:14:46.970 --> 00:14:49.120
highlight comes up on the menu item.

00:14:51.440 --> 00:14:54.120
We've also introduced a new
class called NS Rule Editor.

00:14:54.120 --> 00:14:58.040
So you've seen males rules filter.

00:14:58.040 --> 00:15:04.270
You set up slices that
match various... Criteria,

00:15:04.270 --> 00:15:05.680
and then the rules are filtered here.

00:15:05.680 --> 00:15:07.190
We've added this directly to the kit.

00:15:07.200 --> 00:15:08.790
So it supports nesting of rules.

00:15:08.830 --> 00:15:11.470
It's a delegate-based API,
so you'll assign a delegate to it,

00:15:11.470 --> 00:15:13.680
and then this control will
ask your delegate about what

00:15:13.680 --> 00:15:14.880
it should be displaying.

00:15:16.120 --> 00:15:18.990
It's also bindings compatible,
so you should be able to just wire one

00:15:18.990 --> 00:15:22.200
of these things right up and bind to
your controller object directly in IB.

00:15:23.540 --> 00:15:25.950
If it's something that it
can generate a predicate for,

00:15:26.000 --> 00:15:26.620
it will do so.

00:15:26.620 --> 00:15:29.920
So you can actually get NS predicates
automatically out of this thing.

00:15:30.840 --> 00:15:32.800
And it's fully localizable,
so all of the things that you see

00:15:32.800 --> 00:15:37.120
in a rule editor can be completely
localized through a clever plist

00:15:37.120 --> 00:15:39.120
mechanism that we've set up.

00:15:39.120 --> 00:15:41.240
So this is what it looks like.

00:15:42.850 --> 00:15:45.840
All right, so this particular one
is a compound rule.

00:15:45.840 --> 00:15:49.460
Any of the following are true,
and the name would contain an image,

00:15:49.460 --> 00:15:52.180
and the kind is of any
image that's of type TIF.

00:15:53.420 --> 00:15:55.770
And this has the same plus and
minus buttons on the far side,

00:15:55.770 --> 00:15:57.860
so you can add and remove slices,
and you'll be able to

00:15:57.860 --> 00:15:59.270
completely configure this.

00:16:00.360 --> 00:16:02.160
So NS Rule Editor is now
available for you in this.

00:16:02.800 --> 00:16:04.550
the kid.

00:16:09.060 --> 00:16:10.690
So there's a special subclass to this.

00:16:10.730 --> 00:16:14.220
We figure that people are going to be
doing a lot of things with filtering of,

00:16:14.300 --> 00:16:16.470
for instance,
their core data applications

00:16:16.480 --> 00:16:17.130
and stuff like that.

00:16:17.160 --> 00:16:20.790
So we've added NSPredicateEditor as
a special subclass of NSRuleEditor.

00:16:20.790 --> 00:16:23.460
So rows get populated directly
from its object value,

00:16:23.460 --> 00:16:27.230
and the control's object value for a
predicate editor is an NSPredicate.

00:16:28.280 --> 00:16:31.450
So there's a helper class called
NSPredicateEditorRowTemplate,

00:16:31.450 --> 00:16:34.990
and that maps between the elements of
the predicate and the things that are

00:16:34.990 --> 00:16:37.040
displayed in the predicate editor.

00:16:37.040 --> 00:16:41.440
And this is completely configurable also
programmatically or in Interface Builder.

00:16:41.440 --> 00:16:44.000
So if you've looked at
the new Interface Builder,

00:16:44.000 --> 00:16:47.970
there's a control in the library there
that's one of these rule editors.

00:16:47.970 --> 00:16:50.260
And it uses target action to
talk about all the changes.

00:16:50.260 --> 00:16:52.060
So this will go right
up the responder chain,

00:16:52.060 --> 00:16:53.140
if you like, also.

00:16:55.560 --> 00:16:58.140
We've been spending a lot of time
also on TableView and OutlineView.

00:16:58.240 --> 00:17:00.110
And there's some new
features available in there.

00:17:00.170 --> 00:17:01.430
Type to select now.

00:17:01.440 --> 00:17:04.990
If you've got your
TableView set up and you type.

00:17:05.700 --> 00:17:07.380
You can type to select.

00:17:07.380 --> 00:17:10.480
The disabled state now works
as the way you'd expect.

00:17:10.480 --> 00:17:12.600
There's also some new APIs for
hit testing and tracking,

00:17:12.600 --> 00:17:15.300
so you'll get better control in
the table view and the outline

00:17:15.300 --> 00:17:17.970
view of what's happening in your
sliders and things like that,

00:17:17.970 --> 00:17:22.260
and a new full width look,
and that looks like this.

00:17:22.260 --> 00:17:25.320
Right, so the full width look here
goes all the way across.

00:17:25.450 --> 00:17:29.130
You see that favorite things
group is a full width cell

00:17:29.130 --> 00:17:32.020
that goes all the way across,
and you don't see the check

00:17:32.020 --> 00:17:33.430
boxes and things like that.

00:17:33.480 --> 00:17:39.810
I typed to select Kosh here,
and we've got some

00:17:39.850 --> 00:17:44.020
Other controls in there that
we'll see what we can do with

00:17:44.020 --> 00:17:45.660
some API for those in a minute.

00:17:45.660 --> 00:17:47.520
You can control cell tracking now.

00:17:47.540 --> 00:17:51.670
So if you return a no from this method,
outline view should track

00:17:51.670 --> 00:17:55.100
cell for table column item,
that actually turns off tracking

00:17:55.100 --> 00:17:56.990
for that particular thing.

00:17:56.990 --> 00:18:00.870
If you return yes from this,
now you can actually track

00:18:00.870 --> 00:18:03.320
independently of item selection.

00:18:04.720 --> 00:18:10.130
And so the combination of this and some
other API allows you to be able to grab

00:18:10.130 --> 00:18:14.010
a slider that's in a cell in a row,
and it doesn't change the

00:18:14.010 --> 00:18:16.180
selection of the table view.

00:18:16.180 --> 00:18:19.480
So there's some behaviors here
now that you can change without

00:18:19.480 --> 00:18:21.620
having to do too much subclassing.

00:18:21.620 --> 00:18:23.610
We've also added NSPathControl.

00:18:23.620 --> 00:18:27.360
And this easily allows you to
represent a path and its components.

00:18:27.360 --> 00:18:30.290
There are three different styles,
the standard path style,

00:18:30.290 --> 00:18:33.100
the navbar style, and a popup style.

00:18:33.100 --> 00:18:36.180
And you can also filter the
permitted types in this.

00:18:36.180 --> 00:18:39.840
And I actually have a demo of this also,
if I could have the

00:18:39.840 --> 00:18:41.680
demo machine back here.

00:18:42.610 --> 00:18:46.160
So here's the path control demo.

00:18:46.160 --> 00:18:50.000
And this is the pop-up flavor here,
where if I click on the

00:18:50.000 --> 00:18:54.650
temperature converter menu,
this pops up the regular demo.

00:18:55.300 --> 00:18:58.230
This is a list here of the path
that it takes to get there.

00:18:58.300 --> 00:19:00.300
All of the display icons are correct.

00:19:00.300 --> 00:19:05.300
This will be localized into the
user's system folders localization.

00:19:05.300 --> 00:19:07.300
You can choose different folders here.

00:19:07.300 --> 00:19:09.300
You can turn this menu off if you like.

00:19:09.300 --> 00:19:11.510
The standard look is a
little more interesting.

00:19:11.570 --> 00:19:18.780
You've probably seen this
directly in the finder.

00:19:18.780 --> 00:19:19.040
As I resize this,
the path elements shrink.

00:19:21.000 --> 00:19:24.000
And if I get it really small here
and start mousing over these things,

00:19:24.000 --> 00:19:28.420
it will do the same animations.

00:19:31.000 --> 00:19:35.290
So Navbar style, this may look familiar
to you a little bit.

00:19:35.300 --> 00:19:38.490
It has the same look
that the iTunes one does,

00:19:38.550 --> 00:19:38.990
right?

00:19:39.010 --> 00:19:42.000
So this has the same behaviors
as I mouse over things.

00:19:42.000 --> 00:19:43.680
They expand.

00:19:43.680 --> 00:19:45.530
As I make it bigger, it resizes.

00:19:45.640 --> 00:19:52.510
And these are all set up to
do things like drag elements

00:19:52.510 --> 00:19:53.520
out directly as a drag source,
and they can also accept

00:19:53.800 --> 00:19:55.420
Oh, that wacky Mighty Mouse.

00:19:55.480 --> 00:19:59.540
You can also accept drags and just drag
something into it and it automatically

00:19:59.540 --> 00:20:02.020
will grab the path from that.

00:20:02.030 --> 00:20:05.320
So that's the path control,
the new path control in Leopard.

00:20:12.400 --> 00:20:14.610
Again, I could spend a lot of
time talking about this.

00:20:14.840 --> 00:20:17.440
We have another talk about it,
Beyond Buttons and Sliders,

00:20:17.440 --> 00:20:21.800
right here tomorrow morning at 10:30,
where a lot of these controls will

00:20:21.800 --> 00:20:25.800
be talked about and some other stuff
in TableView and things like that.

00:20:25.800 --> 00:20:28.400
So please come by if you'd
like to learn more about that.

00:20:28.400 --> 00:20:31.390
We've added support for
drawing gradients in the kit.

00:20:31.390 --> 00:20:35.400
So being able to have a color
gradient with multiple color stops.

00:20:35.400 --> 00:20:40.330
These are linear or radial,
so you can draw off a radius if you want.

00:20:40.400 --> 00:20:42.820
And it was colors at
locations color space.

00:20:42.910 --> 00:20:46.430
So you give us an array of colors,
and then locations is an array

00:20:46.430 --> 00:20:49.480
of CG floats from 0 to 1,
0.0 to 1.0,

00:20:49.480 --> 00:20:53.360
and those represent the inflection
points for the color stops.

00:20:53.400 --> 00:20:58.070
And you can draw linear gradients or
radial gradients and that interesting

00:20:58.070 --> 00:21:02.400
one there is drawing Bezier Path Angle,
and that looks like this.

00:21:02.400 --> 00:21:05.190
So if you've set up a Bezier Path with
a bunch of disconnected elements,

00:21:05.190 --> 00:21:07.840
you can tell it to draw the gradient
underneath it and it takes care of

00:21:07.840 --> 00:21:09.270
doing all that clipping for you.

00:21:09.430 --> 00:21:12.400
So some of the work you may
have been doing to do this

00:21:12.580 --> 00:21:14.400
is now right in NSGradient.

00:21:14.400 --> 00:21:17.390
So that's a really
boring screenshot I know.

00:21:17.480 --> 00:21:20.370
So we've set up new
stuff for tracking areas.

00:21:20.500 --> 00:21:25.400
So you may remember in Tiger we've
got some ways to do mouse tracking.

00:21:25.400 --> 00:21:28.580
We've set up a new model for this,
and this takes some of what we do

00:21:28.660 --> 00:21:32.400
today in Tracking Rects already and
then adds some new properties to it.

00:21:32.400 --> 00:21:37.880
So initWithRectOptionsOwnerUserInfo,
this guy will set up a tracking area

00:21:37.880 --> 00:21:38.400
for you and you can decide whether you
want a tracking area for this or not.

00:21:38.400 --> 00:21:42.950
You can decide whether you want mouse
entered and exited events or mouse

00:21:42.970 --> 00:21:45.400
moved events and also cursor updates.

00:21:45.400 --> 00:21:48.400
And those are all passed in as options.

00:21:48.400 --> 00:21:51.400
You can also specify when
the tracking area is active.

00:21:51.400 --> 00:21:54.390
Only when the app is the first
responder or when it's a key window,

00:21:54.390 --> 00:21:58.400
when it's in the active app
or if it's always tracking.

00:21:58.400 --> 00:21:59.400
And there's some additional behavior.

00:21:59.400 --> 00:22:01.310
You can start out inside
and things like that,

00:22:01.400 --> 00:22:04.400
but the really big one is
this invisible rect one.

00:22:04.400 --> 00:22:09.280
And that will take care of... So you
set up some tracking areas and you

00:22:09.280 --> 00:22:12.400
scroll those tracking areas off
of your view using a scroll view.

00:22:12.400 --> 00:22:16.400
It will take care of automatically
disabling those tracking areas for you.

00:22:16.400 --> 00:22:18.560
And then when they come
back into the visible area,

00:22:18.560 --> 00:22:20.400
we'll re-enable them automatically.

00:22:20.400 --> 00:22:22.400
So all this code that you guys
have been writing goes away.

00:22:27.300 --> 00:22:29.520
We've also added full
screen mode to NSView.

00:22:29.550 --> 00:22:38.770
So if you saw one of the demos yesterday,
Andres, hit a button and the thing went

00:22:38.770 --> 00:22:40.240
into total full screen mode.

00:22:40.300 --> 00:22:42.880
That's this API:
enter full screen mode with options,

00:22:42.880 --> 00:22:45.590
exit full screen mode with
options and whether or not the

00:22:45.590 --> 00:22:47.190
view is in the full screen mode.

00:22:47.300 --> 00:22:51.120
And you can set up animations for this
to be able to do transitions from the

00:22:51.120 --> 00:22:53.300
windowed mode into full screen mode.

00:22:53.300 --> 00:22:56.300
You can opt into it for all
settings and things like that.

00:22:56.300 --> 00:22:59.300
This is a really powerful but really
simple API to get that kind of effect.

00:22:59.300 --> 00:23:02.300
And we're really happy to
be able to add that also.

00:23:02.300 --> 00:23:06.250
Andres' demo,
you may have seen it with the picture

00:23:06.270 --> 00:23:09.300
browser using a thing called GridView.

00:23:09.300 --> 00:23:15.290
And there is a class in the kit now for
that and that's bindings compatible.

00:23:15.320 --> 00:23:17.300
It uses NSViews and the NSView has
a class called GridView.

00:23:17.300 --> 00:23:20.300
And it's a core animation behavior
that we've seen for core animation.

00:23:20.300 --> 00:23:23.280
And this thing can be completely
wired up in interface builder.

00:23:23.320 --> 00:23:27.300
So you'll set up a small prototype view,
wire it up to your controller,

00:23:27.380 --> 00:23:30.650
hook the thing up to the GridView,
and it takes care of laying these

00:23:30.650 --> 00:23:33.300
things out and filling out each
of those views as it draws them.

00:23:33.300 --> 00:23:36.990
And it also takes care of layout
as you expand and contract.

00:23:39.600 --> 00:23:42.290
We made a lot of changes for
uniform type identifiers in the kit.

00:23:42.360 --> 00:23:45.260
So there's new support for NSDocument,
NSDocumentController,

00:23:45.260 --> 00:23:47.820
the OpenPanel and SafePanel, Workspace,
Pasteboard.

00:23:47.820 --> 00:23:52.160
All of these classes now have much
better support for UTIs in Leopard.

00:23:52.160 --> 00:23:54.780
And there are some other
sessions about this.

00:23:54.780 --> 00:23:56.890
Unfortunately,
I don't have the information,

00:23:57.010 --> 00:24:00.140
but there's a lot of information,
a lot of information in the release notes

00:24:00.140 --> 00:24:03.640
on this about how to use it and how the
filtering works and things like that.

00:24:03.650 --> 00:24:06.550
And we're really encouraging people
to use UTIs because they work really

00:24:06.550 --> 00:24:09.500
well with Spotlight and a bunch of
other technologies on our system.

00:24:11.440 --> 00:24:14.030
So we're going to move
down now into Foundation,

00:24:14.040 --> 00:24:17.840
and with all of these new
machines that are coming out

00:24:17.840 --> 00:24:19.990
with all kinds of processors,
it's a little more interesting to be able

00:24:19.990 --> 00:24:21.100
to find out how many are in the machine.

00:24:21.100 --> 00:24:25.410
We've added to NSProcessInfo
the processor count method,

00:24:25.430 --> 00:24:28.390
and you'll see this type NSUInteger.

00:24:28.400 --> 00:24:30.210
This is a cover type for us.

00:24:30.210 --> 00:24:34.400
It's 32 bits and 32 bits
and 64 bits in 64-bit,

00:24:34.400 --> 00:24:38.200
and this allows us to be able to write
the same code in both 32-bit and 64-bit.

00:24:38.220 --> 00:24:41.700
This processor count method
returns the number of processors

00:24:41.700 --> 00:24:43.240
that are in the machine.

00:24:43.240 --> 00:24:45.720
So in 64-bit,
we had a lot of room for lots of

00:24:45.720 --> 00:24:47.800
processors to come up eventually.

00:24:47.800 --> 00:24:49.800
How many active processors?

00:24:49.800 --> 00:24:52.190
You can turn processors on and off.

00:24:52.230 --> 00:24:54.980
Most of our users don't do this,
but sometimes it's handy to be able

00:24:55.040 --> 00:24:57.880
to test things in a uniprocessor
or multiprocessor environment,

00:24:57.880 --> 00:24:59.820
and that's the active processor count.

00:24:59.820 --> 00:25:02.180
So we've put those on NSProcessInfo.

00:25:02.180 --> 00:25:05.320
But with all of these processors
that are now in the machine,

00:25:05.320 --> 00:25:08.180
we do want to help you guys
take the best advantage.

00:25:08.180 --> 00:25:11.380
So we're adding some
new methods to NSThread.

00:25:11.460 --> 00:25:14.460
Some methods to find the main thread.

00:25:14.460 --> 00:25:17.520
This class method for isMainThread
tells you whether or not the thread

00:25:17.610 --> 00:25:19.460
you're running in is the main thread.

00:25:19.460 --> 00:25:21.450
You can get a reference
to the main thread.

00:25:21.470 --> 00:25:25.670
There's an instance method now
that also tells you whether the

00:25:25.670 --> 00:25:28.350
instance you have is the main thread.

00:25:28.510 --> 00:25:30.460
And you can set the stack
size of the thread now.

00:25:30.460 --> 00:25:32.500
So if you need a thread with
a much bigger stack size,

00:25:32.540 --> 00:25:35.460
you're able to do that just before
you touch the thread execution off.

00:25:35.570 --> 00:25:37.460
And you can also initialize
the thread without starting it.

00:25:37.460 --> 00:25:41.550
So sometimes it's handy to be
able to initialize these things,

00:25:41.550 --> 00:25:43.370
but not touch the
operation off until later.

00:25:43.460 --> 00:25:46.460
And that's what this init and
initWithTargetSelectorObject do.

00:25:46.460 --> 00:25:49.460
And those help us do some other things.

00:25:49.460 --> 00:25:51.460
You can control thread execution now.

00:25:51.460 --> 00:25:54.960
We've added some new API to tell
you whether or not a thread is

00:25:54.960 --> 00:25:59.570
executing or whether it's finished,
whether it's cancelled,

00:25:59.570 --> 00:26:01.460
and then cancelStart and main here.

00:26:01.460 --> 00:26:04.560
And these are some new methods
to really try and help you

00:26:04.720 --> 00:26:06.700
parallelize what you're doing.

00:26:06.700 --> 00:26:08.700
So you override main to
do most of your work.

00:26:08.700 --> 00:26:12.670
And then you guys will have to maintain
the isExecuting and isFinished state.

00:26:12.700 --> 00:26:14.700
Cancel is an advisory state.

00:26:14.700 --> 00:26:18.700
So what will happen is somebody will
call cancel on your NSThread instance.

00:26:18.700 --> 00:26:22.700
And then your main will check to see
whether or not cancel has been called.

00:26:22.700 --> 00:26:26.040
And then you can elect whether you're
going to exit by returning or throwing

00:26:26.040 --> 00:26:28.700
an exception or however you're going
to get out of this particular method.

00:26:28.760 --> 00:26:30.700
This is not the same.

00:26:30.700 --> 00:26:32.700
If you're familiar with the
POSIX PthreadCancellation idea,

00:26:32.700 --> 00:26:34.690
this is not the same as that.

00:26:34.730 --> 00:26:35.700
Right?

00:26:35.700 --> 00:26:39.680
You can't cancel a Pthread out from under
us and expect things to work that way.

00:26:39.750 --> 00:26:43.700
So Foundation and Cocoa don't support
the POSIX PthreadCancellation model.

00:26:45.180 --> 00:26:48.360
We now have a method to execute
stuff on a specific thread.

00:26:48.430 --> 00:26:52.130
So earlier we introduced
perform select our main thread.

00:26:52.910 --> 00:26:54.400
This is now perform on any thread.

00:26:54.400 --> 00:26:57.280
So if you have a thread instance,
you can tell it to do something.

00:26:57.280 --> 00:26:58.840
PerformSelectorOnThreadWithObject.

00:26:58.840 --> 00:27:02.380
So now PerformSelectorOnMainThread
is really just a special

00:27:02.420 --> 00:27:03.930
case of this method for us.

00:27:04.110 --> 00:27:05.670
And we've also provided a convenience.

00:27:05.710 --> 00:27:08.860
You can run a single method
in a background thread.

00:27:08.870 --> 00:27:13.410
So PerformSelectorOnBackgroundWithObject,
that just fires off a thread,

00:27:13.580 --> 00:27:16.660
does the selector with that object,
and ends.

00:27:16.660 --> 00:27:19.070
So you can fire off a
thread really easily.

00:27:23.780 --> 00:27:25.200
This is now perform on any thread.

00:27:25.200 --> 00:27:28.080
So if you have a thread instance,
you can tell it to do something.

00:27:28.080 --> 00:27:29.640
PerformSelectorOnThreadWithObject.

00:27:29.640 --> 00:27:33.110
So now PerformSelectorOnMainThread
is really just a special

00:27:33.200 --> 00:27:34.880
case of this method for us.

00:27:34.880 --> 00:27:36.500
And we've also provided a convenience.

00:27:36.500 --> 00:27:39.640
You can run a single method
in a background thread.

00:27:39.660 --> 00:27:44.210
So PerformSelectorOnBackgroundWithObject,
that just fires off a thread,

00:27:44.210 --> 00:27:47.450
does the selector with that object,
and ends.

00:27:47.460 --> 00:27:49.850
So you can fire off a
thread really easily.

00:27:53.700 --> 00:27:57.020
And this operation talked
about dependencies.

00:27:57.030 --> 00:27:59.100
So I'm going to talk about
dependencies a little bit.

00:27:59.100 --> 00:28:02.920
You can add an operation as a dependency
of another operation or remove it.

00:28:03.030 --> 00:28:04.950
You can find out what
the dependencies are.

00:28:05.040 --> 00:28:07.510
There's some other state you can find
out about whether or not it's ready.

00:28:07.530 --> 00:28:12.520
An operation is ready if all of its
dependencies have fired off and are done.

00:28:12.590 --> 00:28:14.660
And operations can have priorities.

00:28:14.720 --> 00:28:17.140
So you can set the priority
on a particular operation.

00:28:17.260 --> 00:28:19.000
And then when you put it
into an operation queue,

00:28:19.000 --> 00:28:22.760
the queue is going to take care of
managing all those things automatically.

00:28:22.810 --> 00:28:23.230
Right?

00:28:23.700 --> 00:28:26.900
So the NSOperationQueue is pretty simple.

00:28:26.900 --> 00:28:28.300
You just add an operation to it.

00:28:28.300 --> 00:28:30.300
And then it takes care
of when it's got time,

00:28:30.300 --> 00:28:32.800
it's going to go off and fire
off-- it might fire off a thread,

00:28:32.810 --> 00:28:33.420
it might not.

00:28:33.420 --> 00:28:36.680
It's going to just take care of executing
all the operations that you put in

00:28:36.680 --> 00:28:38.940
it in priority order automatically.

00:28:39.010 --> 00:28:41.320
So you can also cancel
all the operations,

00:28:41.340 --> 00:28:43.410
hang around until the
operations are finished,

00:28:43.570 --> 00:28:45.580
and change the concurrent
operation count.

00:28:45.580 --> 00:28:48.910
So we try to pick a sane default
based on what the machine

00:28:48.910 --> 00:28:50.290
configuration looks like.

00:28:50.320 --> 00:28:53.420
But if you discover through your own
profiling that you need to change that,

00:28:53.450 --> 00:28:54.830
this is the API you'd use.

00:28:54.900 --> 00:28:58.060
So this gives you an easy way to be able
to encapsulate all that threading stuff

00:28:58.060 --> 00:29:02.190
and really take advantage of the extra
processors that are now in our machines.

00:29:03.500 --> 00:29:05.220
Here is a multi-threading in Cocoa talk.

00:29:05.220 --> 00:29:07.000
So if you'd like to
learn more about this,

00:29:07.000 --> 00:29:09.380
there will be some demos and more
explanation about what's going

00:29:09.380 --> 00:29:12.260
on here tomorrow at 5:00 PM.

00:29:12.450 --> 00:29:17.450
So that'll be a good one to go to
if you're having a lot of threading

00:29:17.480 --> 00:29:20.780
things going on in your application.

00:29:20.830 --> 00:29:23.270
We've added NS condition.

00:29:24.340 --> 00:29:25.600
Well, sort of added.

00:29:25.720 --> 00:29:27.530
This is a Pthread style
condition variable.

00:29:27.690 --> 00:29:33.040
So NSConditionLock has the test
directly in the condition lock.

00:29:33.070 --> 00:29:35.350
This actually moves
it outside the object.

00:29:35.350 --> 00:29:39.240
So you'll typically take the lock,
hang around while the test is true,

00:29:39.270 --> 00:29:42.960
and then do your work and signal
when you're done and unlock it.

00:29:42.960 --> 00:29:46.960
And this actually shows up
in the headers in Leopard,

00:29:46.960 --> 00:29:50.220
but it's been around since 10.0.

00:29:50.220 --> 00:29:50.280
So you'll be able to use
this in Tiger if you need to.

00:29:52.220 --> 00:29:54.860
You'll notice that there have been
a bunch of Objective-C changes,

00:29:54.860 --> 00:29:57.860
and you heard about properties
and some other things,

00:29:57.860 --> 00:29:59.240
and we'll talk a little
bit about those here,

00:29:59.240 --> 00:30:05.250
but some of the big hitters are the
at-defs directive has been deprecated,

00:30:05.250 --> 00:30:08.510
so you won't be able to use at-defs to
be able to get it to embed structure

00:30:08.600 --> 00:30:10.540
information right into your code.

00:30:10.540 --> 00:30:12.220
You'll have to interrogate
that with the API.

00:30:12.820 --> 00:30:14.620
PoseAs has been deprecated.

00:30:14.620 --> 00:30:19.150
The Objective-C runtime has provided
some new API to do the kinds of things

00:30:19.150 --> 00:30:23.840
that people were doing with PoseAs,
so this will not be available as

00:30:23.840 --> 00:30:26.600
a supported mechanism much longer.

00:30:26.600 --> 00:30:27.910
There's new garbage collection stuff.

00:30:27.910 --> 00:30:29.980
We'll talk a little bit about some
of the garbage collection things

00:30:29.980 --> 00:30:31.650
that we've done in Foundation,
and some new language

00:30:31.650 --> 00:30:32.720
features and runtime API.

00:30:32.720 --> 00:30:37.130
There are two Objective-C talks,
one in Marina at 3.30

00:30:37.130 --> 00:30:39.910
and then at 5 today,
so if you'd like to

00:30:39.910 --> 00:30:42.640
learn more about that,
please do.

00:30:42.800 --> 00:30:46.260
Here's what we've been doing
in Foundation and Cocoa,

00:30:46.260 --> 00:30:47.010
though.

00:30:47.010 --> 00:30:49.250
We've made a lot of
additional enhancements for

00:30:49.250 --> 00:30:51.800
garbage collection in Cocoa,
so if you'd like to try it out,

00:30:51.800 --> 00:30:54.910
you can just turn it
on with -f object CGC,

00:30:54.910 --> 00:30:56.800
or you can just check the box in Xcode,
right?

00:30:56.800 --> 00:31:00.080
So you'll be able to run
your app's garbage collected

00:31:00.080 --> 00:31:01.800
on Leopard to try it out.

00:31:01.800 --> 00:31:04.170
There is a class now
called NSGarbageCollector,

00:31:04.170 --> 00:31:07.320
and if you need more information
about what the collector is doing

00:31:07.320 --> 00:31:10.800
or being able to turn things on and
off in your app while it's running,

00:31:10.800 --> 00:31:11.770
you can go here.

00:31:11.810 --> 00:31:12.800
So, let's go ahead and run it.

00:31:12.800 --> 00:31:15.590
So, this class method defaultCollector
will return nil if you're not

00:31:15.590 --> 00:31:18.470
running garbage collected,
and it will return a default

00:31:18.480 --> 00:31:20.800
instance of the collector if you are.

00:31:20.800 --> 00:31:25.030
And you can turn collecting on and off,
find out if it's actually running,

00:31:25.030 --> 00:31:26.750
you can collect if needed.

00:31:26.810 --> 00:31:29.800
You can also disable the
collector on a per-pointer basis,

00:31:29.800 --> 00:31:33.310
so if you know you're getting - if
you have particular semantics that

00:31:33.310 --> 00:31:37.990
you need to fake the collector out,
you can do it with this API.

00:31:38.700 --> 00:32:45.800
[Transcript missing]

00:32:46.830 --> 00:32:48.380
You saw about properties, right?

00:32:48.380 --> 00:32:50.600
So here's a person object
that's been declared with a

00:32:50.600 --> 00:32:53.380
number of different properties,
a birthday, a first name, a last name,

00:32:53.380 --> 00:32:54.240
and a full name.

00:32:54.240 --> 00:32:59.170
This first property is by ref,
so that's actually holding

00:32:59.170 --> 00:33:02.060
the direct pointer reference.

00:33:02.090 --> 00:33:03.590
If you call the setter,
it will just replace

00:33:03.670 --> 00:33:04.660
the pointer directly.

00:33:04.660 --> 00:33:06.690
The second one here is a by copy.

00:33:06.690 --> 00:33:11.350
These are actually copied in and out,
so the accessors that are synthesized

00:33:11.350 --> 00:33:15.740
will depend on what keyword you put
there in that second slot there.

00:33:16.250 --> 00:33:19.400
And this read-only property is
one that really has no Ivar.

00:33:19.400 --> 00:33:22.330
It's sort of, it's set up,
you would just return the concatenation

00:33:22.340 --> 00:33:24.260
of first name and last name,
for instance.

00:33:25.870 --> 00:33:29.660
These are all strongly typed,
and you can also specify your own getters

00:33:29.840 --> 00:33:34.220
and setters right here in the declaration
so that if what the runtime is doing

00:33:34.220 --> 00:33:37.440
doesn't fit your needs or if you're
retrofitting this into existing code,

00:33:37.600 --> 00:33:38.910
you can specify those.

00:33:38.920 --> 00:33:43.010
Those will get called automatically.

00:33:47.140 --> 00:33:50.230
- Enumeration,
we've made some changes for enumeration,

00:33:50.230 --> 00:33:52.640
and one of the things that
you saw was this one here,

00:33:52.640 --> 00:33:55.520
we have an array with
an object enumerator,

00:33:55.530 --> 00:34:03.480
and we're doing something with it,
and this all condenses down to this.

00:34:03.480 --> 00:34:03.480
So for item in some array.

00:34:05.800 --> 00:34:10.580
This actually is much faster,
it turns out,

00:34:10.600 --> 00:34:12.620
and your objects can participate in this.

00:34:12.620 --> 00:34:15.050
It doesn't just have to
be Foundation built-in

00:34:15.060 --> 00:34:16.680
collections that do this.

00:34:16.680 --> 00:34:19.020
If you go ahead and
look at nsinumerator.h,

00:34:19.020 --> 00:34:21.690
you'll see this protocol,
NSFastEnumeration.

00:34:21.700 --> 00:34:27.190
This count by enumerating with state
objects count allows you to be able

00:34:27.260 --> 00:34:29.140
to fill in the enumeration state.

00:34:29.140 --> 00:34:32.110
The Objective-C enumeration
behavior will kick in,

00:34:32.120 --> 00:34:35.470
and this reduces enumeration
overhead significantly.

00:34:35.620 --> 00:34:37.390
So before,
while we were calling next object,

00:34:37.390 --> 00:34:39.540
or behind the scenes,
you were calling object at index.

00:34:39.540 --> 00:34:42.400
This gets us down to less than
one method call per object.

00:34:42.400 --> 00:34:44.830
So if you've been seeing
in your code where your

00:34:44.830 --> 00:34:47.610
enumeration is taking some time,
and you're spending a lot of

00:34:47.610 --> 00:34:49.800
time on object-c message send,
this can get you out of it.

00:34:49.860 --> 00:34:53.120
It turns out this is much, much faster.

00:34:53.120 --> 00:34:55.650
So if you have a Tiger machine around,
you might want to compare it.

00:34:55.650 --> 00:34:56.350
It might be a little fun.

00:34:57.750 --> 00:35:01.710
Now that we have four-way universal
binaries and a bunch of different

00:35:01.780 --> 00:35:04.730
architectures to have to code for,
we've added some code to

00:35:04.730 --> 00:35:07.590
NSBundle to be able to get some more
information about what's happening.

00:35:07.660 --> 00:35:11.060
So you can pre-flight a bundle,
and this means that the bundle machinery

00:35:11.060 --> 00:35:15.240
is going to go and look at that bundle
and do everything right up until linking

00:35:15.240 --> 00:35:19.190
that bundle into your executable,
and tell you whether or not something

00:35:19.590 --> 00:35:21.850
looks like it's able to be loaded or not.

00:35:21.880 --> 00:35:24.930
And this is pre-flight and return error,
returns an NSError by reference.

00:35:25.600 --> 00:35:27.810
And the same thing for loading a bundle,
except that'll actually

00:35:27.860 --> 00:35:28.670
go ahead and load it.

00:35:28.740 --> 00:35:31.080
You can get better errors back now.

00:35:31.080 --> 00:35:36.580
So you might have a PowerPC application,
and somebody's written an

00:35:36.580 --> 00:35:40.630
i3d6 plugin for your app,
and you won't be able to load that in,

00:35:40.630 --> 00:35:41.060
right?

00:35:41.060 --> 00:35:42.910
So you want to be able to
put a meaningful error in

00:35:42.910 --> 00:35:44.890
front of your user that says,
oh, you know,

00:35:44.890 --> 00:35:48.140
I can't load this because it's not
the right type for this computer.

00:35:48.140 --> 00:35:50.940
You should get a new version of
the plugin or something like that.

00:35:50.980 --> 00:35:53.620
And those errors are all
in foundationerrors.h.

00:35:53.620 --> 00:35:55.560
And, you know, not loadable.

00:35:55.600 --> 00:35:57.360
Architecture mismatch,
that kind of thing.

00:35:57.420 --> 00:36:01.070
So these are a good way to be able
to get good errors in front of

00:36:01.070 --> 00:36:03.500
your users for bundle situations.

00:36:03.500 --> 00:36:05.380
What architectures are in a bundle?

00:36:05.380 --> 00:36:06.720
This just returns an NSArray.

00:36:06.720 --> 00:36:08.960
Executable architectures
returns an NSArray.

00:36:08.960 --> 00:36:12.790
And we've predefined some NSNumbers here
for the different architecture types.

00:36:12.800 --> 00:36:16.260
So you can find out what's actually in
that bundle without having to go through

00:36:16.260 --> 00:36:20.520
and use the DL open APIs and things like
that and try to walk the Mach headers.

00:36:20.520 --> 00:36:22.040
We'll just do all that work for you.

00:36:24.260 --> 00:36:26.550
There are some new
changes to NSPredicate.

00:36:26.550 --> 00:36:29.700
The contains in between predicate
operators are new ways to do

00:36:29.770 --> 00:36:31.350
comparisons in your predicates.

00:36:31.430 --> 00:36:35.150
And there's also an optimization for
evaluating a predicate multiple times.

00:36:35.160 --> 00:36:37.840
So if you have a single predicate
that you keep evaluating with a bunch

00:36:38.050 --> 00:36:42.200
of different variable substitutions,
you do multiple different things,

00:36:42.200 --> 00:36:46.080
you can use this method evaluate
with object substitution variables,

00:36:46.080 --> 00:36:49.580
and that's going to take care of
caching everything it can to make

00:36:49.580 --> 00:36:52.100
your predicate evaluation much faster.

00:36:54.780 --> 00:36:57.450
NSExpression also, new expression types.

00:36:57.460 --> 00:37:01.750
There's a subquery expression,
which allows you to not have to

00:37:01.800 --> 00:37:06.560
multiply evaluate an expression
in order to get an answer.

00:37:06.560 --> 00:37:09.940
The aggregate expression type, unions,
intersections, minus.

00:37:09.940 --> 00:37:12.840
These all let Core Data generate
lots better SQL.

00:37:12.840 --> 00:37:15.100
So if you can adopt some of these,
you may actually get better

00:37:15.100 --> 00:37:16.600
performance out of your Core Data app.

00:37:16.710 --> 00:37:20.160
And there's also one for using your
own functions for predicate evaluation.

00:37:20.160 --> 00:37:22.890
So you provide a function to
the NSFunction expression type,

00:37:22.890 --> 00:37:23.360
and you can actually do that.

00:37:23.390 --> 00:37:26.240
You can actually set up your own
function for it to return yes

00:37:26.240 --> 00:37:27.340
or no for the predicate stuff.

00:37:27.340 --> 00:37:30.950
So that allows you some flexibility in

00:37:31.400 --> 00:37:38.840
We've made some changes to
copy behavior in collections.

00:37:38.860 --> 00:37:42.390
In Tiger, immutable collections
performed a deep copy.

00:37:42.390 --> 00:37:45.190
We got some bugs on this
and people noticed it.

00:37:45.210 --> 00:37:49.310
It's a problem because items
in a collection may not conform

00:37:49.310 --> 00:37:51.900
to the NS copying protocol.

00:37:51.900 --> 00:37:52.860
So what happens?

00:37:52.860 --> 00:37:56.530
You try to copy one of these things
and an exception gets thrown and nuts,

00:37:56.530 --> 00:37:57.900
now you're out of luck.

00:37:57.900 --> 00:38:02.210
In Leopard, all the immutable collections
now shallow copy by default.

00:38:02.290 --> 00:38:06.070
So this is a little more performant and,
oh, you filed that bug.

00:38:07.820 --> 00:38:09.960
We've put in a link check,
and we do this a lot.

00:38:09.960 --> 00:38:13.230
We've put in a link check for
Tiger applications to get Tiger behavior,

00:38:13.230 --> 00:38:16.150
so we're not going to surprise any
of your apps that are running on

00:38:16.170 --> 00:38:18.880
Leopard that were compiled on Tiger,
hopefully.

00:38:18.880 --> 00:38:22.640
But we do want to make sure
that this gets noticed because

00:38:22.640 --> 00:38:24.580
it may change some things.

00:38:24.580 --> 00:38:28.000
If you were relying on code
like this to get a deep copy,

00:38:28.110 --> 00:38:31.680
that's not going to happen anymore,
unfortunately.

00:38:31.680 --> 00:38:34.620
NSArray deep copy,
some array copy with zone null,

00:38:34.620 --> 00:38:38.420
now is going to do a shallow copy
when you relink your code on Leopard.

00:38:38.420 --> 00:38:41.320
There's an easy way to fix this, though.

00:38:41.320 --> 00:38:44.570
If you call init with
array copy items yes,

00:38:44.720 --> 00:38:48.630
that works on both Tiger and
Leopard the same way.

00:38:48.640 --> 00:38:52.080
So this is a drop-in replacement for that
if you were expecting deep copy behavior.

00:38:53.410 --> 00:38:57.780
So that's the collections
copy behavior stuff.

00:38:57.810 --> 00:39:01.240
We've also made some
changes for enumeration.

00:39:01.240 --> 00:39:08.420
So for id item in some mutable array,
using the new for loop syntax,

00:39:08.510 --> 00:39:12.560
we go through and find out if some
item is equal to another item,

00:39:12.560 --> 00:39:14.870
and then we remove it
from some mutable array.

00:39:16.750 --> 00:39:20.680
So we're enumerating the
same mutable collection that

00:39:20.680 --> 00:39:21.720
we're removing things from.

00:39:21.720 --> 00:39:25.270
We're mutating and enumerating
the same collection.

00:39:25.930 --> 00:39:29.170
I was going to have Malcolm read this
because apparently he wrote this line,

00:39:29.170 --> 00:39:33.580
but it's not safe to modify a mutable
collection while enumerating through it.

00:39:33.580 --> 00:39:36.320
Some enumerators may currently allow
enumeration of collections modified,

00:39:36.320 --> 00:39:41.060
but this behavior is not guaranteed
to be supported in the future.

00:39:42.820 --> 00:39:45.970
Future is now.

00:39:45.970 --> 00:39:48.950
For code linked on Leopard,
this will throw an exception.

00:39:48.970 --> 00:39:52.110
Part of the fast enumeration
stuff that we did allows us to

00:39:52.110 --> 00:39:54.320
be able to detect this condition.

00:39:54.340 --> 00:39:58.510
So this actually helped us find
some relatively tricky bugs.

00:39:58.510 --> 00:40:01.960
So they may be running
around in your code as well.

00:40:01.990 --> 00:40:03.900
If you relink your code on
Leopard and you're doing this,

00:40:03.900 --> 00:40:05.040
it will throw.

00:40:05.040 --> 00:40:07.440
So this is much safer now.

00:40:07.440 --> 00:40:10.150
And if your objects are participating
in the fast enumeration stuff,

00:40:10.150 --> 00:40:14.670
it is vitally important that they don't
do any modifications themselves either.

00:40:15.350 --> 00:40:17.550
The way to fix this, fortunately,
it's simple.

00:40:17.550 --> 00:40:18.800
Array copy.

00:40:18.800 --> 00:40:22.390
Just make a copy of the mutable array,
enumerate that,

00:40:22.420 --> 00:40:24.510
and then modify the original.

00:40:24.510 --> 00:40:26.960
Pretty easy to get out of.

00:40:27.480 --> 00:40:31.410
Sometimes you do this and you find that
some other code was jumping off and then

00:40:31.410 --> 00:40:34.000
coming back and modifying the original.

00:40:34.000 --> 00:40:36.270
So it may not be quite
as obvious as this,

00:40:36.270 --> 00:40:39.140
but it works out to be
pretty easy to chase down.

00:40:40.520 --> 00:40:47.040
There are a number of other
frameworks that have Objective-C APIs,

00:40:47.040 --> 00:40:50.690
and they work very well with Cocoa.

00:40:50.720 --> 00:40:52.140
Core animation you heard about.

00:40:52.140 --> 00:40:56.130
This is what's being used to produce all
those nice cinematic experiences that

00:40:56.130 --> 00:40:59.290
Peter's talking about in his graphics
in the State of the Union address.

00:40:59.300 --> 00:41:02.640
It's part of Quartz Core,
so if you're already linking Quartz Core,

00:41:02.640 --> 00:41:05.580
you've got this available to you already.

00:41:05.580 --> 00:41:07.790
And this is the underlying
machinery for NSVU animation.

00:41:07.800 --> 00:41:10.550
So just like Cortex,
if you need to drop down to that because

00:41:10.550 --> 00:41:14.080
you have really specialized needs,
you can drop down to Core animation,

00:41:14.080 --> 00:41:15.180
but hopefully you won't have to.

00:41:15.180 --> 00:41:18.020
Hopefully we've done all of the
heavy lifting for you for NSVUs.

00:41:18.460 --> 00:41:21.260
And this takes care of all the
hardware and things like that

00:41:21.300 --> 00:41:24.310
and handles text and timings,
but we do all that too.

00:41:26.300 --> 00:41:29.200
ImageKit now is a
sub-framework of Quartz,

00:41:29.200 --> 00:41:33.180
and that actually includes the
image browsing and choosing stuff,

00:41:33.200 --> 00:41:35.760
and image filtering and
image filter choosing.

00:41:35.760 --> 00:41:39.160
So the effects that you see in
things like PhotoBooth where it

00:41:39.230 --> 00:41:41.700
displays a bunch of images and it
applies each filter and sequence,

00:41:41.710 --> 00:41:42.840
that's what this API does.

00:41:42.880 --> 00:41:50.540
And this also provides support for
things like slideshows and image editing.

00:41:50.540 --> 00:41:52.500
So this will do some very basic
image editing right in your

00:41:52.800 --> 00:41:57.040
The new publish and subscribe framework
is a new public framework in Leopard,

00:41:57.040 --> 00:41:59.770
and this is a high-level RSS abstraction.

00:41:59.830 --> 00:42:02.790
This is the stuff that Safari and
Mail are using to do their parsing.

00:42:02.800 --> 00:42:07.250
And publication over the local network,
and you can subscribe to things,

00:42:07.300 --> 00:42:10.970
and this will take care of making
sure you know when things are

00:42:10.970 --> 00:42:12.800
updated and stuff like that.

00:42:12.800 --> 00:42:14.800
There's also a new Calendar Store API.

00:42:14.800 --> 00:42:19.800
So if you've been dying to get access
to iCal's calendar information,

00:42:19.800 --> 00:42:22.800
they're providing it now in Leopard.

00:42:22.800 --> 00:42:26.100
And this provides access to all
the account appointments and

00:42:26.100 --> 00:42:29.300
to-dos and things like that,
and attendees for meetings that's

00:42:29.300 --> 00:42:30.800
tied in with your address book.

00:42:30.940 --> 00:42:33.580
Different kinds of events,
one-shot events, recurring events,

00:42:33.580 --> 00:42:34.800
alarms, all that stuff.

00:42:34.800 --> 00:42:39.800
So you can get direct access to that
information from Calendar Store.

00:42:39.800 --> 00:42:41.800
Core Data has been doing
a lot of work on this.

00:42:42.800 --> 00:42:45.680
They've done a lot of
work in the last year,

00:42:45.830 --> 00:42:49.800
and they've introduced
APIs to do schema evolution.

00:42:49.800 --> 00:42:52.800
So as your data set changes...

00:42:56.200 --> 00:42:58.490
Hopefully you've specified
enough information,

00:42:58.490 --> 00:43:00.880
but it will automatically
migrate those files over.

00:43:00.880 --> 00:43:04.220
A new Atomic Store API,
you'll be able to write your own

00:43:04.220 --> 00:43:07.840
Atomic Stores for Core Data to use.

00:43:07.870 --> 00:43:11.950
So if you have your custom format,
you want to use HTML to store your stuff,

00:43:11.950 --> 00:43:14.480
whatever it is,
as long as you can read it in and

00:43:14.480 --> 00:43:17.440
write it out in a single thing,
new Atomic Store API.

00:43:17.440 --> 00:43:20.560
New Predicates and Expressions,
we talked about those a little earlier.

00:43:20.560 --> 00:43:23.620
Some improved fetching options
and better performance.

00:43:23.960 --> 00:43:26.810
If you want to hear more about these,
there are three Core Data sessions,

00:43:26.820 --> 00:43:29.440
and it looks like they're all right here.

00:43:29.440 --> 00:43:33.320
Today at 5, tomorrow at 9,
and tomorrow at 2.

00:43:33.320 --> 00:43:40.200
So if you're doing a Core Data app,
you should probably come to that also.

00:43:40.200 --> 00:43:44.700
You also saw some of the new things in
Interface Builder 3 during the demo.

00:43:44.700 --> 00:43:47.090
The new document view has been improved.

00:43:47.100 --> 00:43:49.480
There's that new inspector
window with the library,

00:43:49.480 --> 00:43:52.920
the connections heads-up display,
and a new plugin API.

00:43:53.720 --> 00:43:55.710
And the big hitter, I think,
if you write your own

00:43:55.710 --> 00:43:58.590
controls and things like that,
it's much easier to write plugins

00:43:58.590 --> 00:44:01.780
now that participate in Interface
Builder and just drag them in and

00:44:01.780 --> 00:44:05.200
out and set up your own palettes
and things like that right in IB.

00:44:05.200 --> 00:44:07.770
So two IB sessions,
Integrating Custom Views

00:44:07.770 --> 00:44:09.380
with Interface Builder.

00:44:09.380 --> 00:44:13.520
That's in the Marina, Friday at 9,
and Interface Builder Techniques,

00:44:13.520 --> 00:44:14.670
Wednesday at 5.

00:44:14.680 --> 00:44:17.880
So if you are interested in writing
your own controls and having to

00:44:17.880 --> 00:44:20.740
participate in Interface Builder,
here's the talk to go to.

00:44:20.740 --> 00:44:22.900
We have a lot more information.

00:44:23.480 --> 00:44:25.230
Sit up here and talk all week.

00:44:25.240 --> 00:44:26.680
God, I hope not.

00:44:26.720 --> 00:44:30.510
Derek Horn is our
Application Frameworks Evangelist.

00:44:30.560 --> 00:44:32.500
You can reach him at Derek at Apple.com.

00:44:32.500 --> 00:44:34.810
There's a lot of
documentation and sample code,

00:44:34.920 --> 00:44:36.800
things like that, other resources.

00:44:36.800 --> 00:44:40.210
Our release notes, obviously, on the DVD.

00:44:40.220 --> 00:44:44.980
And we will be in the
AppKit Lab Thursday at 2.

00:44:44.980 --> 00:44:46.720
That's downstairs.

00:44:46.720 --> 00:44:48.740
I think it's on that
side of the building.

00:44:48.740 --> 00:44:51.400
And to answer questions,
if you bring your code by,

00:44:51.470 --> 00:44:52.960
we can take a look at that.

00:44:53.240 --> 00:44:54.240
work through stuff.