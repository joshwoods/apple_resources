WEBVTT

00:00:10.650 --> 00:00:13.200
I'm Todd Fernandez,
the Automation Tools Manager,

00:00:13.340 --> 00:00:15.400
and I'm the lucky guy that gets
to work with the talented men

00:00:15.400 --> 00:00:18.910
and women of the AppleScript and
Automator engineering teams.

00:00:19.800 --> 00:00:23.300
So by way of introduction,
I've been racking my brain.

00:00:23.300 --> 00:00:28.380
I know that many of you may be new to
WWDC and new to AppleScript Studio.

00:00:28.380 --> 00:00:31.650
And I've been trying to think of
appropriate metaphors to explain to

00:00:31.650 --> 00:00:34.540
you really what is AppleScript Studio.

00:00:35.340 --> 00:00:40.570
Well, is AppleScript Studio simply
AppleScript going really fast?

00:00:40.800 --> 00:00:43.280
All right, not so much.

00:00:43.540 --> 00:00:45.430
Let me try again.

00:00:46.300 --> 00:00:49.670
is AppleScript Studio AppleScript that's
spent a lot of time

00:00:49.670 --> 00:00:51.830
in the gym pumping up?

00:00:52.710 --> 00:00:53.830
No, not really.

00:00:53.840 --> 00:01:02.780
Well, the way I like to think about
AppleScript Studio is as the link between

00:01:02.830 --> 00:01:06.620
AppleScript and Automator and Cocoa.

00:01:06.800 --> 00:01:10.900
So that if you know AppleScript--
who knows AppleScript?

00:01:11.210 --> 00:01:14.730
And you want to create Automator Actions,
Cocoa applications,

00:01:14.790 --> 00:01:18.570
or simply put a beautiful
Aqua interface on your existing scripts,

00:01:18.890 --> 00:01:21.600
AppleScript Studio can be
a great place to start.

00:01:21.660 --> 00:01:24.790
And I'm glad you're
here to make that start.

00:01:25.440 --> 00:01:28.990
And you want to create Automator Actions,
Cocoa applications,

00:01:28.990 --> 00:01:32.770
or simply put a beautiful
Aqua interface on your existing scripts,

00:01:32.770 --> 00:01:33.490
AppleScript Studio can be a

00:01:33.670 --> 00:01:36.980
Well, there are a number of technologies
and tools that really make

00:01:37.060 --> 00:01:38.370
up AppleScript Studio.

00:01:38.570 --> 00:01:40.790
First of which, of course,
is AppleScript, which is the language in

00:01:40.790 --> 00:01:44.140
which you'll write your
AppleScript Studio applications.

00:01:44.190 --> 00:01:52.380
Next is the AppleScript Kit framework,
which is really the link between

00:01:52.380 --> 00:01:53.560
the AppleScript code you write
and the user interface elements

00:01:53.560 --> 00:01:53.560
that it's going to control.

00:01:54.260 --> 00:01:56.370
AppleScript Kit Framework
is what translates those

00:01:56.530 --> 00:01:58.990
AppleScript calls that you make
into the appropriate Cocoa calls,

00:01:59.000 --> 00:02:01.300
which is the next technology
making up AppleScript Studio.

00:02:01.300 --> 00:02:06.050
When we talk about the tools,
we're using the same tools that you

00:02:06.050 --> 00:02:11.580
use to create your Cocoa applications
using Objective-C or C++ or C or

00:02:11.580 --> 00:02:13.080
whatever language you're using.

00:02:13.080 --> 00:02:17.450
Interface Builder to layout and
design and build our user interface.

00:02:17.520 --> 00:02:21.390
And in talking about Studio,
then to attach handlers to give behavior

00:02:21.440 --> 00:02:23.580
to those user interface elements.

00:02:24.270 --> 00:02:28.780
and also name them to make them easier
to refer to from your Studio code.

00:02:28.970 --> 00:02:32.560
And we use Xcode,
our integrated development environment,

00:02:32.560 --> 00:02:35.830
to edit and debug our scripts,
and view the dictionary for

00:02:35.830 --> 00:02:38.890
AppleScript Kit and any scriptable
applications that you want to

00:02:38.890 --> 00:02:41.570
control from your Studio application.

00:02:43.710 --> 00:02:46.000
So I've already covered
some of the common uses,

00:02:46.000 --> 00:02:49.670
but why would you choose
AppleScript Studio?

00:02:50.340 --> 00:02:52.900
Well, AppleScript's a really
high-level scripting language,

00:02:52.900 --> 00:02:55.000
and that, along with its automatic
memory management,

00:02:55.000 --> 00:02:57.080
make it really great
for rapid prototyping.

00:02:57.250 --> 00:03:00.500
You can do a lot with
just a little bit of code.

00:03:00.680 --> 00:03:03.900
And moving on from a prototype,
AppleScript Studio works really

00:03:03.900 --> 00:03:05.350
well with other supported languages.

00:03:05.400 --> 00:03:07.780
And in fact, we'll see that a bit later.

00:03:07.860 --> 00:03:10.520
So it makes it easy for you to
prototype using AppleScript Studio,

00:03:10.520 --> 00:03:13.180
and then decide over time to
re-implement parts of your

00:03:13.290 --> 00:03:17.110
application using Objective-C,
for example.

00:03:17.420 --> 00:03:20.870
And again, there are a number of uses
that we've seen developers

00:03:20.920 --> 00:03:23.700
use AppleScript Studio for.

00:03:23.820 --> 00:03:27.720
For sysadmins to take their
Unix tools and scripts and put

00:03:27.720 --> 00:03:30.950
a nice user interface on them,
and do the same for any

00:03:31.240 --> 00:03:33.180
existing AppleScripts.

00:03:33.240 --> 00:03:37.120
To build an application that may control
one or more scriptable applications.

00:03:37.130 --> 00:03:39.380
And of course,
to create automator actions.

00:03:39.410 --> 00:03:41.330
I'm not going to talk any
more about automator actions,

00:03:41.410 --> 00:03:44.160
but hopefully those of you
interested in that came to one or

00:03:44.160 --> 00:03:46.260
more of the sessions yesterday.

00:03:48.450 --> 00:03:52.120
So this is a hands-on session,
and I've provided you with session

00:03:52.120 --> 00:03:54.890
materials for each of the three
sample projects we'll build today,

00:03:55.300 --> 00:03:58.130
including milestones for each
step that we'll complete,

00:03:58.130 --> 00:04:01.360
a detailed outline that covers
every step we'll follow,

00:04:01.480 --> 00:04:04.380
including all of the source necessary,
and finally,

00:04:04.470 --> 00:04:07.140
text clippings with all the source
that you'll need so you can easily

00:04:07.200 --> 00:04:10.560
drag the source into Xcode as we build.

00:04:10.590 --> 00:04:12.100
And you have a couple of options.

00:04:12.130 --> 00:04:16.000
You can build the application with me,
which I certainly hope you'll do.

00:04:16.040 --> 00:04:21.470
You can simply open up the milestone that
I'm working on up here and follow along.

00:04:21.650 --> 00:04:25.560
Or you can just watch and experiment
later with the sample projects.

00:04:25.680 --> 00:04:29.440
But again, I hope you decide to go ahead
and build along with me,

00:04:29.450 --> 00:04:31.550
which will make this a
hands-in-the-air session.

00:04:31.560 --> 00:04:36.020
So I'll be checking in with you regularly
to make sure that I'm not going too fast.

00:04:36.110 --> 00:04:37.760
So please raise your
hand if you're with me,

00:04:37.760 --> 00:04:40.980
if you see what I have on
my screen on your screen.

00:04:41.110 --> 00:04:42.800
And we'll do this together.

00:04:42.970 --> 00:04:45.940
So what are we going
to do together today?

00:04:45.980 --> 00:04:50.140
Well, you may have heard of these books
that will get you from your couch

00:04:50.140 --> 00:04:52.360
to running a marathon in six months.

00:04:52.410 --> 00:04:54.520
Well,
we obviously don't have six months today.

00:04:54.670 --> 00:04:58.940
So I thought we'd do "Couch to
Studio Developer in 60 Minutes." Now,

00:04:58.940 --> 00:05:00.320
I know what you're thinking.

00:05:00.360 --> 00:05:01.400
But don't worry.

00:05:01.420 --> 00:05:03.280
I have a training plan.

00:05:03.390 --> 00:05:07.300
First, we're going to walk.

00:05:07.540 --> 00:05:09.370
And then we'll run.

00:05:10.800 --> 00:05:11.290
That's it.

00:05:11.380 --> 00:05:12.800
That's my training plan.

00:05:12.800 --> 00:05:14.780
Wait, I want to make sure you got this.

00:05:14.810 --> 00:05:17.800
So first we're going to walk,
and then we'll run.

00:05:17.800 --> 00:05:19.750
So what do I mean by that?

00:05:20.100 --> 00:05:22.560
Well, of course, walking, hello world.

00:05:22.920 --> 00:05:25.070
But I think I've got something that'll
be a little bit more interesting than

00:05:25.070 --> 00:05:27.800
your average run-of-the-mill hello world.

00:05:27.800 --> 00:05:28.740
And then we'll run.

00:05:28.800 --> 00:05:32.800
We'll create a complete Cocoa application
using AppleScript Studio.

00:05:32.800 --> 00:05:35.800
Now, I think I know what's
in some of your minds.

00:05:35.800 --> 00:05:37.800
Some of you more experienced
studio developers,

00:05:37.800 --> 00:05:39.800
or those of you already
in good studio shape,

00:05:39.800 --> 00:05:41.690
are thinking I may be
in the wrong session.

00:05:41.830 --> 00:05:43.660
There's not really anything here for me.

00:05:43.800 --> 00:05:45.800
I don't think so.

00:05:45.800 --> 00:05:48.800
Because once we can run,
and those fast learners among

00:05:48.800 --> 00:05:51.600
you can then join those in
good studio shape already,

00:05:51.800 --> 00:05:54.380
we're going to pole vault.

00:05:54.970 --> 00:05:57.740
We're going to use AppleScript Studio to
add some functionality to an

00:05:57.740 --> 00:06:01.900
existing Objective-C application,
in fact, TextEdit.

00:06:02.030 --> 00:06:04.690
So I think there's
something here for everyone.

00:06:04.850 --> 00:06:07.050
So let's get started running.

00:06:08.460 --> 00:06:12.040
And our first project is Hello World.

00:06:12.080 --> 00:06:14.740
We're going to get you
off the couch right now.

00:06:14.800 --> 00:06:17.940
I know it's late in the week,
and I'm almost certain I'm

00:06:17.940 --> 00:06:19.890
more tired than any one of you.

00:06:20.000 --> 00:06:22.180
So we can do this together.

00:06:22.230 --> 00:06:23.460
We're going to start crawling.

00:06:23.490 --> 00:06:25.160
Don't worry.

00:06:25.480 --> 00:06:28.780
We're going to start by creating
a new Studio application.

00:06:28.850 --> 00:06:31.210
We're going to add a
button to the main window,

00:06:31.210 --> 00:06:35.090
which when clicking,
will get our Hello World,

00:06:35.090 --> 00:06:39.040
and implement that behavior and
build and run our application.

00:06:39.200 --> 00:06:42.800
So please switch to the demo machine,
and we'll get started.

00:06:46.300 --> 00:06:51.700
[Transcript missing]

00:06:52.170 --> 00:06:53.480
Just enough for a water break.

00:06:53.520 --> 00:06:55.880
All right, so to get started,
we need Xcode.

00:06:56.040 --> 00:07:01.440
So you can find that in Developer,
Applications.

00:07:02.190 --> 00:07:04.740
And you can double-click
it to launch Xcode.

00:07:04.740 --> 00:07:06.620
And while you're there,
you might want to launch

00:07:06.620 --> 00:07:09.580
Interface Builder 2,
because we're going to need that.

00:07:10.800 --> 00:07:13.320
So coming back into Xcode,
the place you want to start

00:07:13.370 --> 00:07:16.600
is its new project assistant,
which you can get to from the File menu,

00:07:16.630 --> 00:07:18.630
New Project.

00:07:20.390 --> 00:07:22.940
And let me zoom in here.

00:07:23.060 --> 00:07:25.210
So you can see the application projects.

00:07:25.260 --> 00:07:27.640
And I know I made the same joke
yesterday in the Automator session,

00:07:27.640 --> 00:07:32.060
but the Studio projects are right there
near the top two where they belong.

00:07:32.130 --> 00:07:33.400
So everybody see this on their screen?

00:07:33.400 --> 00:07:35.780
You see the new project assistant?

00:07:36.860 --> 00:07:39.480
OK, a smattering of hands.

00:07:39.600 --> 00:07:41.310
So let me zoom back out.

00:07:41.410 --> 00:07:44.160
And let's do that a couple times.

00:07:44.190 --> 00:07:45.270
That's fun.

00:07:45.400 --> 00:07:47.630
So there are three
different Studio templates.

00:07:47.750 --> 00:07:50.520
The AppleScript application template,
which is what we're

00:07:50.520 --> 00:07:51.460
going to build right now.

00:07:51.460 --> 00:07:54.320
But there are also an
AppleScript document-based application,

00:07:54.320 --> 00:07:57.380
which gives you some additional
behaviors for an application

00:07:57.460 --> 00:08:00.550
that has multiple documents,
like TextEdit.

00:08:00.660 --> 00:08:04.040
And a droplet,
which is an application that is run by

00:08:04.040 --> 00:08:08.020
dragging some files in Finder onto it,
that it will then do something with.

00:08:08.090 --> 00:08:11.160
But again, we're going to create an
AppleScript application.

00:08:11.640 --> 00:08:14.940
So I select that template and click Next.

00:08:15.050 --> 00:08:17.980
And I'm going to call my project Hello.

00:08:18.270 --> 00:08:21.520
And a note here, I would advise you,
if you are following along,

00:08:21.580 --> 00:08:25.290
to please name things as I do,
because then you'll see exactly

00:08:25.380 --> 00:08:26.740
what you're building on my screen.

00:08:26.740 --> 00:08:31.900
And also, if you're using the milestones,
everything will work correctly.

00:08:31.990 --> 00:08:35.110
And I'm going to put my
project in documents.

00:08:37.300 --> 00:08:39.320
And once I've named my
project and chosen a location,

00:08:39.320 --> 00:08:43.780
I'm going to click Finish to actually
create the project from the template.

00:08:43.910 --> 00:08:47.560
So let's give ourselves a
bit more room to work with.

00:08:49.770 --> 00:08:55.360
And let me give you a brief tour
of an AppleScript Studio project.

00:08:55.410 --> 00:08:57.980
We have one or more scripts
in the scripts group.

00:08:57.980 --> 00:09:02.450
In this case, you get a single script
named after your application.

00:09:02.560 --> 00:09:04.940
And we'll get back to that in a moment.

00:09:04.960 --> 00:09:07.300
In resources,
we have a couple of interesting things.

00:09:07.300 --> 00:09:12.160
One is the AppleScript Kit dictionary,
which I will show you later.

00:09:12.210 --> 00:09:14.640
And the main menu.nib,
which is what defines our

00:09:14.640 --> 00:09:17.740
application's user interface,
just as it does for any

00:09:17.740 --> 00:09:19.520
other Cocoa application.

00:09:20.110 --> 00:09:22.570
So let's go ahead and
double-click mainmenu.nib,

00:09:22.570 --> 00:09:27.030
and what that's going to do is open
up the nib file in Interface Builder.

00:09:30.300 --> 00:09:34.560
And hopefully you see
something like this.

00:09:34.690 --> 00:09:39.820
So I'm going to close the menu bar,
because we don't need that for this demo.

00:09:39.820 --> 00:09:43.060
And under Tools,
we're going to show the inspector.

00:09:43.490 --> 00:09:48.720
Because we'll need that to interact
with our user interface elements.

00:09:48.890 --> 00:09:50.500
So what were we building?

00:09:50.510 --> 00:09:51.400
Oh yes, hello world.

00:09:51.540 --> 00:09:54.590
We want to add a button to our window.

00:09:55.870 --> 00:09:59.630
So this is the Interface Builder
palette from which we can get all

00:09:59.630 --> 00:10:02.800
the user interface elements that
we want to add to our application.

00:10:02.920 --> 00:10:04.500
So I don't see any buttons here.

00:10:04.570 --> 00:10:06.600
However,
I happen to know that this control

00:10:06.600 --> 00:10:10.060
here is the controls with the buttons,
because it has a button on it.

00:10:10.140 --> 00:10:12.300
It's funny how we do that.

00:10:12.440 --> 00:10:15.630
So please grab the button from there,
just the standard button,

00:10:15.630 --> 00:10:18.730
and drag it over somewhere
in the middle of your window.

00:10:18.910 --> 00:10:21.710
And those of you ready for
something slightly more advanced,

00:10:21.750 --> 00:10:24.400
if you hold down the Option key,
you get these handy guides so that

00:10:24.400 --> 00:10:29.990
if you are extremely picky like me,
you can center your button.

00:10:30.620 --> 00:10:33.800
Oh, and I can go the wrong way, too.

00:10:33.820 --> 00:10:36.320
I feel so much happier now.

00:10:37.680 --> 00:10:42.040
And if you double-click the button label,
we can rename the button Hello.

00:10:42.490 --> 00:10:45.950
And hit Return to exit Edit Mode.

00:10:46.090 --> 00:10:46.310
Great.

00:10:46.460 --> 00:10:48.320
We've got our button in our window.

00:10:48.370 --> 00:10:51.280
When we click it,
it's going to say something.

00:10:51.360 --> 00:10:51.960
Well, OK.

00:10:51.960 --> 00:10:54.160
Well, we need to add that behavior, too.

00:10:54.280 --> 00:10:57.870
So while we've got the
Hello button selected,

00:10:58.320 --> 00:11:00.960
Let's look over at the inspector,
and we see that it says

00:11:00.960 --> 00:11:04.590
NSButtonInspector so that we
know that we've got our button.

00:11:05.060 --> 00:11:08.600
And there are a number of different
panes of the inspector that allow

00:11:08.600 --> 00:11:14.220
us to inspect and modify different
attributes of our user interface element.

00:11:14.310 --> 00:11:17.560
So what we want to do is come
down to the AppleScript pane.

00:11:17.610 --> 00:11:20.990
This is the
AppleScript Studio pane in reality.

00:11:23.560 --> 00:11:27.480
And here, we can name our objects
and attach handlers,

00:11:27.500 --> 00:11:29.300
which are really just
functions or methods.

00:11:29.300 --> 00:11:32.090
You use the name of your choice,
but in Studio,

00:11:32.090 --> 00:11:34.020
we typically call them handlers.

00:11:34.070 --> 00:11:36.180
And there are a number of suites
of different handlers dealing

00:11:36.260 --> 00:11:40.320
with different aspects of the
particular user interface element.

00:11:40.400 --> 00:11:43.220
But this is a button,
and we're not getting too fancy yet.

00:11:43.220 --> 00:11:46.230
We're still crawling or walking,
as the case may be.

00:11:46.310 --> 00:11:51.340
So right now, all we need to do is click
on the clicked handler.

00:11:51.380 --> 00:11:54.060
And those of you paying close
attention will notice that down

00:11:54.060 --> 00:11:59.660
here in the main window of my nib,
I got this AppleScript info object.

00:11:59.720 --> 00:12:06.180
That object is what keeps track of all
the names and Studio relationships.

00:12:06.640 --> 00:12:10.080
So that you don't-- you want
to take very good care of that.

00:12:10.150 --> 00:12:12.100
If you delete that,
you'll lose all of the names

00:12:12.100 --> 00:12:15.250
and connections from your
user interface elements.

00:12:15.420 --> 00:12:17.870
So coming back to the inspector,
we've attached this

00:12:17.870 --> 00:12:20.950
handler to the object,
but we also need to attach it to a

00:12:20.970 --> 00:12:24.180
script where we're going to implement
the behavior that we want to happen

00:12:24.180 --> 00:12:26.440
when the user clicks that button.

00:12:26.520 --> 00:12:29.840
So what we need to do is
click on a script down here,

00:12:29.840 --> 00:12:33.670
and we'll put it in
our hello.AppleScript.

00:12:33.830 --> 00:12:37.450
Those of you using an older version of
Xcode may notice that that doesn't look

00:12:37.450 --> 00:12:39.680
like a radio button on your screen.

00:12:39.680 --> 00:12:41.310
It looks like a checkbox.

00:12:41.470 --> 00:12:45.830
Well, you have me to thank for that,
that now it looks like a radio button.

00:12:45.860 --> 00:12:47.680
Thank you.

00:12:49.100 --> 00:12:51.800
because it is a radio button.

00:12:51.850 --> 00:12:53.860
All right, now let's save our nib.

00:12:53.920 --> 00:12:58.280
And we can do that from File, Save,
or Command-S,

00:12:58.370 --> 00:13:00.140
for those of you who prefer the keyboard.

00:13:00.330 --> 00:13:03.780
I know you're out there, Dvorak or not.

00:13:04.530 --> 00:13:05.260
Yeah, I know.

00:13:05.310 --> 00:13:07.500
He gets an applause every time,
and I didn't get one here.

00:13:07.720 --> 00:13:09.900
But I am not typing Dvorak,
I have to confess.

00:13:09.990 --> 00:13:12.210
I don't want to take cheap applause.

00:13:12.300 --> 00:13:14.730
Well, OK, I will if you really want to.

00:13:14.830 --> 00:13:16.810
So now that we've saved our nib,
what I'm going to do is

00:13:17.000 --> 00:13:20.370
click the Edit button,
which is going to transfer us back

00:13:20.450 --> 00:13:24.240
into Xcode and insert a template
for the clicked handler that we've

00:13:24.240 --> 00:13:27.560
just attached in our script so
that we can easily implement it.

00:13:27.700 --> 00:13:30.320
So let's go ahead and
click the Edit button.

00:13:30.380 --> 00:13:35.220
And we see we're back in Xcode,
and we've now got the onClicked template.

00:13:35.350 --> 00:13:38.510
So I'm going to just hit
Return to get rid of that

00:13:38.700 --> 00:13:40.110
is a great comment.

00:13:40.240 --> 00:13:43.200
That's what it was,
because we won't need that anymore.

00:13:43.290 --> 00:13:45.000
And let's see,
what do we want to have happen

00:13:45.000 --> 00:13:47.080
when the button is clicked?

00:13:47.840 --> 00:13:49.780
We want to say hello world.

00:13:49.900 --> 00:13:54.940
So AppleScript has a scripting
edition called DisplayDialog.

00:13:55.060 --> 00:13:55.920
Well, you know what?

00:13:56.090 --> 00:13:56.870
That's kind of boring.

00:13:56.880 --> 00:13:58.260
You can do that in any hello world.

00:13:58.280 --> 00:14:00.480
This is AppleScript.

00:14:00.520 --> 00:14:02.660
As I mentioned before,
high-level scripting language that

00:14:02.660 --> 00:14:05.230
gives you the power of the OS,
the power of Mac OS X with

00:14:05.280 --> 00:14:06.780
just a few keystrokes.

00:14:06.850 --> 00:14:09.490
Let's do something a little bit more fun.

00:14:09.600 --> 00:14:12.910
Say hello.

00:14:13.260 --> 00:14:13.700
Well, you know what?

00:14:13.800 --> 00:14:16.050
I think we can do better
than just Hello World,

00:14:16.050 --> 00:14:16.440
too.

00:14:16.500 --> 00:14:20.120
I happen to know that
next door is session 524,

00:14:20.200 --> 00:14:22.340
something about XSAN.

00:14:22.500 --> 00:14:25.890
I'm sure it's a great session,
but let's see if we can

00:14:25.940 --> 00:14:27.360
get their attention.

00:14:27.360 --> 00:14:33.550
Let's say hello session 524.

00:14:36.180 --> 00:14:38.960
Now,
to get the nice formatting in our script,

00:14:39.100 --> 00:14:40.640
we can compile the script.

00:14:40.790 --> 00:14:44.010
And we can do that from the Build menu.

00:14:44.130 --> 00:14:47.480
Or again, there's a keyboard shortcut,
Command-K.

00:14:47.520 --> 00:14:49.110
And that gives us our formatting.

00:14:49.170 --> 00:14:51.000
Let's go ahead and save our script.

00:14:51.190 --> 00:14:54.060
So in order to have the proper effect,
of course, I hope there are some

00:14:54.060 --> 00:14:54.970
of you building along.

00:14:55.190 --> 00:14:58.320
Or you can open up the Step 1 milestone.

00:14:58.440 --> 00:14:59.600
We need to do this in unison.

00:14:59.790 --> 00:15:01.000
So I'll count down.

00:15:01.000 --> 00:15:03.100
We'll do this on three.

00:15:03.100 --> 00:15:05.300
And in fact, we need to build and run
our application first,

00:15:05.330 --> 00:15:06.180
don't we?

00:15:06.450 --> 00:15:09.890
So to build and run your application,
we're going to click the Build and

00:15:09.930 --> 00:15:13.810
Go button in the toolbar,
which will compile our script

00:15:13.810 --> 00:15:16.540
and launch our application.

00:15:17.500 --> 00:15:21.300
So does everybody have their
Hello World program up with their button?

00:15:21.300 --> 00:15:26.000
Let's get our cursor over the button,
and I'll count down.

00:15:26.000 --> 00:15:26.880
On three.

00:15:26.880 --> 00:15:28.120
One.

00:15:28.120 --> 00:15:29.520
Two.

00:15:29.520 --> 00:15:31.020
Two and a half.

00:15:31.140 --> 00:15:33.330
Stay with me here.

00:15:33.340 --> 00:15:34.600
Three.

00:15:34.600 --> 00:15:35.950
Four.

00:15:42.290 --> 00:15:44.660
It's that kind of teamwork
that makes this thing great.

00:15:44.850 --> 00:15:45.210
You know what?

00:15:45.380 --> 00:15:45.800
Thank you.

00:15:45.800 --> 00:15:46.840
I'll applaud you.

00:15:53.560 --> 00:15:55.690
Great, so that was Hello World.

00:15:55.780 --> 00:15:58.260
But we can do a little
bit more with that.

00:15:58.380 --> 00:16:02.280
So click the Stop button back in Xcode,
or you can simply select Quit from

00:16:02.280 --> 00:16:05.270
your application menu of Hello.

00:16:05.840 --> 00:16:08.180
Let's do something a little different.

00:16:08.230 --> 00:16:11.300
Let's go ahead and use Display Dialog.

00:16:11.420 --> 00:16:13.490
And again, I'm sorry,
I should have mentioned this before,

00:16:13.490 --> 00:16:20.440
but in your Hello Studio milestones,
you'll find text clippings,

00:16:20.540 --> 00:16:23.200
which if you get up,
you'll be able to just simply

00:16:23.200 --> 00:16:25.330
drag the code into Xcode.

00:16:25.630 --> 00:16:29.360
So if you grab and drag the step
one clicked handler text clipping

00:16:29.490 --> 00:16:32.220
into your clicked handler,
that has all the code I'm

00:16:32.450 --> 00:16:34.340
going to show you right now.

00:16:34.410 --> 00:16:37.220
So I'm going to go ahead and live
dangerously and try to type it,

00:16:37.220 --> 00:16:39.700
though, and see how successful I am.

00:16:39.780 --> 00:16:41.980
So Display Dialogs in
AppleScript Scripting Edition,

00:16:41.980 --> 00:16:45.550
that will put up a simple dialogue
with the text that you pass into it.

00:16:45.750 --> 00:16:53.180
So let's try current time colon space,
close quotes, ampersand,

00:16:53.180 --> 00:16:56.770
which allows us to concatenate strings.

00:16:57.020 --> 00:17:00.940
And let's use another scripting addition,
do shell script,

00:17:01.070 --> 00:17:06.170
which takes a string and will
actually execute that using the shell.

00:17:06.760 --> 00:17:09.260
So we were not going to get too fancy.

00:17:09.340 --> 00:17:11.180
We'll just do shell script date.

00:17:11.480 --> 00:17:14.210
And again, we can compile that.

00:17:15.250 --> 00:17:18.160
And save our script.

00:17:18.290 --> 00:17:20.720
And again,
you can simply drag in the step one,

00:17:20.720 --> 00:17:25.220
click handler text clipping if you wish,
and uncomment that line.

00:17:25.290 --> 00:17:28.050
And when you've got that ready,
you can hit build and go.

00:17:28.150 --> 00:17:31.410
Let's launch our second
version of Hello World.

00:17:32.040 --> 00:17:34.450
And whenever you're ready,
click the button,

00:17:34.450 --> 00:17:38.040
and you'll see we get a nice
dialogue with the current date.

00:17:38.080 --> 00:17:40.340
Now, that's not terribly exciting,
except for those

00:17:40.440 --> 00:17:41.480
sysadmins in the audience.

00:17:41.600 --> 00:17:46.170
The light bulb should be going on that
you can take any script you want and

00:17:46.170 --> 00:17:50.880
use something similar to that to put
a nice user interface on top of it.

00:17:50.980 --> 00:17:55.130
So hopefully you're already
thinking of the many uses you can--

00:17:55.580 --> 00:17:56.140
make of this.

00:17:56.260 --> 00:18:01.700
So let's go ahead and cancel or click
OK and quit our application again.

00:18:02.190 --> 00:18:04.900
And let's take this-- do one more thing.

00:18:04.970 --> 00:18:08.430
We talked about using Studio to
control other applications and

00:18:08.430 --> 00:18:11.180
build that into our application.

00:18:11.550 --> 00:18:14.320
So let's do "Hello World" one more way.

00:18:15.030 --> 00:18:18.310
Let's tell application-- well,
you can actually shortcut

00:18:18.440 --> 00:18:21.270
tell app text edit.

00:18:23.320 --> 00:18:28.790
new line and make new document,
which just simply tells TextEdit

00:18:28.950 --> 00:18:30.970
to create a new document.

00:18:32.640 --> 00:18:37.680
And set the content-- I'm sorry,
it set the text of the front

00:18:38.280 --> 00:18:45.970
document to hello world.

00:18:47.390 --> 00:18:52.680
And set the content-- I'm sorry,
it set the text of the front

00:18:52.680 --> 00:18:53.760
document to hello world.

00:18:54.670 --> 00:18:56.000
And then type end.

00:18:56.070 --> 00:18:59.540
And if you compile, TextEdit will launch.

00:18:59.590 --> 00:19:00.940
And you'll get the nice formatting.

00:19:00.940 --> 00:19:02.140
It'll expand application.

00:19:02.140 --> 00:19:04.170
It'll add the tell to the end.

00:19:04.250 --> 00:19:06.970
This is a point to mention
that AppleScript has this nice

00:19:07.100 --> 00:19:08.270
feature of doing tell blocks.

00:19:08.430 --> 00:19:11.060
You can address many commands
without having to do tell

00:19:11.060 --> 00:19:14.180
application foo repeatedly.

00:19:15.700 --> 00:19:21.160
So let's go ahead and save our script,
and go ahead and build and go again.

00:19:21.200 --> 00:19:23.850
And now when you click the Hello button,

00:19:24.190 --> 00:19:26.000
You should get a new document
and text edit that says,

00:19:26.010 --> 00:19:29.300
"Hello, world." So again,
this shows you just a very simple

00:19:29.300 --> 00:19:33.020
example of how you can quickly
build an application that controls

00:19:33.060 --> 00:19:35.680
other scriptable applications.

00:19:37.810 --> 00:19:39.450
All right, can we go back to slides,
please?

00:19:39.540 --> 00:19:44.410
Slides, please.

00:19:45.320 --> 00:19:46.700
Thank you.

00:19:46.800 --> 00:19:48.190
So what have we learned already?

00:19:48.260 --> 00:19:50.920
We've learned how to create a
new AppleScript application.

00:19:51.080 --> 00:19:53.470
We've added behavior to the
user interface elements,

00:19:53.590 --> 00:19:54.760
a button in this case.

00:19:54.860 --> 00:19:57.640
And we know how to build
and test our application.

00:19:57.740 --> 00:19:59.240
So we're not on our knees anymore.

00:19:59.240 --> 00:20:00.550
We're walking.

00:20:00.700 --> 00:20:05.090
In week two, we're feeling a little bit
better about being off our couch.

00:20:05.150 --> 00:20:06.660
Let's get a little fancier.

00:20:06.710 --> 00:20:08.780
We're going to add some more
user interface elements,

00:20:08.900 --> 00:20:10.340
a text field.

00:20:10.450 --> 00:20:13.770
We're going to name our interface
elements and learn how to write

00:20:13.910 --> 00:20:16.420
code that addresses them by name.

00:20:16.810 --> 00:20:20.590
We're going to update our click handler
to do something a little bit different,

00:20:20.830 --> 00:20:25.040
and add a new handler to our text field,
again, to get some additional behavior.

00:20:25.140 --> 00:20:27.730
And finally, I'm going to show you that
your Studio applications are

00:20:27.730 --> 00:20:30.900
automatically scriptable,
and I'll show you how to use that as

00:20:30.900 --> 00:20:34.530
a good testing and debugging tool,
and can also help you to explore

00:20:34.530 --> 00:20:38.220
other Studio applications
you might be working with.

00:20:38.380 --> 00:20:40.820
So please, back to demo.

00:20:44.760 --> 00:20:52.720
All right, so let's quit our-- quit
text edit and quit hello.

00:20:55.050 --> 00:20:58.010
And let's open up our
main menu.nib again,

00:20:58.010 --> 00:21:01.490
or simply switch back to Interface
Builder if you still had it open.

00:21:01.780 --> 00:21:02.740
So what were we going to do?

00:21:02.740 --> 00:21:05.670
We're going to add a
text field to our window.

00:21:05.820 --> 00:21:08.160
So we're going to switch our palette.

00:21:08.420 --> 00:21:13.390
And you can see this text view
here is the Cocoa Text Controls.

00:21:13.670 --> 00:21:17.110
And we're just going to grab
a standard NSText field and

00:21:17.160 --> 00:21:19.680
drag it over to our window.

00:21:20.850 --> 00:21:22.340
There we go.

00:21:22.460 --> 00:21:25.400
And we can double-click this,
just like the button,

00:21:25.400 --> 00:21:27.080
and enter some default text.

00:21:27.300 --> 00:21:31.130
And again, hit Return to exit edit mode.

00:21:31.940 --> 00:21:34.880
And if you don't still have the
AppleScript pane open in your inspector,

00:21:34.880 --> 00:21:37.250
please open to the AppleScript pane.

00:21:37.410 --> 00:21:42.800
And I mentioned that we're going to
name our user interface elements.

00:21:42.880 --> 00:21:45.870
So let's name our text field "Message."

00:21:49.210 --> 00:21:54.790
And let's click on the button
and name the button Hello.

00:21:54.920 --> 00:21:59.100
And one more important step,
because as I'll explain in a moment,

00:21:59.120 --> 00:22:04.740
the elements work in a containment
hierarchy within a Studio application.

00:22:04.740 --> 00:22:09.350
So let's click away, just on the window,
away from the button or the text field.

00:22:09.640 --> 00:22:14.240
Or you can click on the window down
here in the main menu.nib window.

00:22:14.560 --> 00:22:16.820
You'll see that gives us the
inspector for the NSWindow.

00:22:16.820 --> 00:22:20.020
So let's name our window main.

00:22:20.070 --> 00:22:23.780
Seems obvious, but stick with me.

00:22:23.780 --> 00:22:26.730
All right, so what did we want to do?

00:22:27.330 --> 00:22:30.900
We wanted to update our click handler
so something a little different happens

00:22:30.900 --> 00:22:32.120
when the user clicks the button.

00:22:32.200 --> 00:22:33.740
So let's switch back to Xcode.

00:22:33.740 --> 00:22:36.440
If it's visible behind,
you can click there or

00:22:36.440 --> 00:22:38.520
just click in the dock.

00:22:38.760 --> 00:22:42.380
Let's erase the code for text edit.

00:22:42.480 --> 00:22:44.780
And if you don't have the
text clippings up yet,

00:22:44.780 --> 00:22:48.170
now would be a good time to get them up,
because we're going to drag the step

00:22:48.330 --> 00:22:52.130
two clicked handler over to implement

00:22:54.200 --> 00:22:55.360
The new version of RxClicked Handler.

00:22:55.360 --> 00:22:56.440
Just one line of code.

00:22:56.440 --> 00:22:58.340
Let me walk you through this.

00:22:58.450 --> 00:23:00.690
So again, we're going to say--

00:23:01.640 --> 00:23:03.640
And what we're going to do
is we're going to read the

00:23:03.640 --> 00:23:06.740
content of text field message.

00:23:06.920 --> 00:23:11.420
Again, message is the name we just gave
the text field in Interface Builder.

00:23:11.430 --> 00:23:12.610
And which text field?

00:23:12.810 --> 00:23:15.180
Well,
the text field that's in Window Main.

00:23:15.530 --> 00:23:19.320
So text field message of Window Main.

00:23:19.550 --> 00:23:20.510
It's just that easy.

00:23:20.710 --> 00:23:25.680
You start with the window and work
backwards to get to the user interface

00:23:25.680 --> 00:23:27.220
element that you want to access.

00:23:27.250 --> 00:23:30.940
It could be nested eight levels deep
if you've got all sorts of table views

00:23:31.000 --> 00:23:33.800
and text and boxes and what have you.

00:23:33.930 --> 00:23:36.970
None of you would design a UI like that,
would you?

00:23:37.870 --> 00:23:38.470
Good.

00:23:38.980 --> 00:23:41.700
Actually, that was not the response
I was hoping for.

00:23:41.750 --> 00:23:43.760
I'm a little concerned now.

00:23:43.810 --> 00:23:46.690
Maybe we need a UI design
session tomorrow.

00:23:47.660 --> 00:23:53.100
OK, well,
let's save the script and build and go.

00:23:54.830 --> 00:23:59.940
Now we have the text field in our window,
and we've got the button.

00:24:00.040 --> 00:24:01.360
But you've already
heard it say-- actually,

00:24:01.360 --> 00:24:02.520
you haven't heard it say hello world.

00:24:02.620 --> 00:24:04.700
So go ahead and click the button.

00:24:05.040 --> 00:24:06.120
Wow, that's loud.

00:24:06.350 --> 00:24:09.350
Let me try not to burst our eardrums.

00:24:10.190 --> 00:24:14.400
And more interestingly,
if you type in something

00:24:14.400 --> 00:24:16.620
else-- This is the test.

00:24:16.690 --> 00:24:19.540
You'll see that the button,
when we click it,

00:24:19.540 --> 00:24:23.480
it reads the value of the text
field and says it allowed.

00:24:23.530 --> 00:24:26.220
I should have thought this
through a little bit more.

00:24:29.150 --> 00:24:30.930
I'm glad to hear you
all having so much fun.

00:24:31.090 --> 00:24:31.600
Excellent.

00:24:31.770 --> 00:24:35.430
See, I knew you were going to love
training for the marathon.

00:24:36.710 --> 00:24:38.700
Of course, we'll do yodeling later.

00:24:38.700 --> 00:24:41.900
OK, so please quit hello again.

00:24:41.900 --> 00:24:44.740
Let's do something a little
bit slightly more fancy.

00:24:44.740 --> 00:24:47.510
Let's switch back to our nib file.

00:24:48.130 --> 00:24:51.600
And that was fun,
but how about we update the

00:24:51.600 --> 00:24:55.150
application so that when we
edit the text in the text field,

00:24:55.520 --> 00:24:58.750
it sets the label of the button?

00:24:59.880 --> 00:25:00.540
And actually, you know what?

00:25:00.610 --> 00:25:02.340
Before we do that,
let's go back to Xcode.

00:25:02.340 --> 00:25:05.600
Because I happen to know the answer,
but you may not know,

00:25:05.730 --> 00:25:10.770
how do I refer to the
label of the button?

00:25:11.060 --> 00:25:12.220
Is it called label?

00:25:12.220 --> 00:25:13.040
Is it name?

00:25:13.040 --> 00:25:14.360
What is it?

00:25:14.470 --> 00:25:17.490
Well, in order to figure that out,
you can read the dictionary

00:25:17.490 --> 00:25:19.240
for AppleScript Kit.

00:25:19.280 --> 00:25:20.900
And to do that,
all you need to do is select

00:25:20.900 --> 00:25:22.890
appleScriptkit.sdef in your project.

00:25:23.000 --> 00:25:25.420
We provide it for you
there in the template.

00:25:25.540 --> 00:25:27.760
And what are we-- buttons.

00:25:27.880 --> 00:25:30.900
So all we need to do is type in button.

00:25:32.100 --> 00:25:34.330
Hit return-- oh, actually,
we don't have-- and the easiest

00:25:34.330 --> 00:25:37.130
way to find the button class,
which is what we're interested in,

00:25:37.130 --> 00:25:38.220
is to then sort by kind.

00:25:38.220 --> 00:25:40.510
And there it is right at the top.

00:25:41.200 --> 00:25:44.720
And if we look down here,
we see all the properties for button,

00:25:44.720 --> 00:25:47.040
as well as its inheritance hierarchy.

00:25:47.170 --> 00:25:50.010
So the property specific to a button,
title.

00:25:50.310 --> 00:25:52.210
That sounds promising.

00:25:52.330 --> 00:25:55.980
So we actually want to set
the title of the button to

00:25:55.980 --> 00:25:57.620
the content of the text field.

00:25:57.620 --> 00:26:02.850
And I kind of snuck that by you before,
so let's look at text field, too,

00:26:02.850 --> 00:26:04.200
while we're here.

00:26:05.470 --> 00:26:07.510
Look at the text field class.

00:26:07.740 --> 00:26:11.320
So as we notice here,
there's no content property here.

00:26:11.320 --> 00:26:13.070
So how did that work?

00:26:13.350 --> 00:26:16.150
Well,
objects in AppleScript Studio inherit

00:26:16.220 --> 00:26:19.460
behavior from their superclasses.

00:26:19.550 --> 00:26:22.610
And a text field is a control.

00:26:23.600 --> 00:26:26.680
So we can see that, in fact,
every control has a content property.

00:26:26.680 --> 00:26:31.560
So that's, in fact,
why the content of the text field works.

00:26:32.510 --> 00:26:35.200
All right,
now let's go back to our nib file.

00:26:35.280 --> 00:26:39.970
Now, after that little digression
about properties and dictionaries,

00:26:40.030 --> 00:26:42.190
let's make our button wider.

00:26:42.790 --> 00:26:44.650
Because I know you're going to
want to type in lots and lots

00:26:44.740 --> 00:26:46.550
of text in your text field.

00:26:46.640 --> 00:26:50.380
So you can do that just by
grabbing the resize indicators.

00:26:50.400 --> 00:26:55.690
And let's resize our text field to match
and use the Aqua Guidelines to do so.

00:26:57.190 --> 00:26:59.700
And let's see,
what we need to do is-- what

00:26:59.700 --> 00:27:03.980
we want to happen is when the
user finishes editing the text,

00:27:04.040 --> 00:27:06.500
we want to update the
title of the button.

00:27:06.680 --> 00:27:09.040
So let's attach a new handler.

00:27:09.150 --> 00:27:11.420
Strangely enough,
there's an editing suite.

00:27:11.640 --> 00:27:13.800
So disclose that.

00:27:13.890 --> 00:27:16.000
And let's attach the end editing.

00:27:16.000 --> 00:27:20.900
So this handler will be called when the
user finishes editing in the text field,

00:27:20.900 --> 00:27:22.100
leaves edit mode.

00:27:22.190 --> 00:27:26.140
And again, that just attaches the handler
to the user interface element,

00:27:26.140 --> 00:27:27.080
the text field.

00:27:27.220 --> 00:27:30.050
We also need to attach it to our script.

00:27:31.200 --> 00:27:33.190
And that's all we need
to do in the Nib file.

00:27:33.310 --> 00:27:35.580
So let's again save.

00:27:35.620 --> 00:27:38.110
And when we click the Edit button again,
we're going to switch back to

00:27:38.110 --> 00:27:41.970
Xcode and get a new template
for the end editing handler.

00:27:43.060 --> 00:27:47.440
So there is a text clipping for
the implementation of this handler,

00:27:47.440 --> 00:27:49.520
step two, end editing handler.

00:27:49.560 --> 00:27:50.610
But I'm feeling lucky.

00:27:50.670 --> 00:28:00.620
So let's set the title of
button hello to the content.

00:28:00.730 --> 00:28:03.310
And I've already made a mistake.

00:28:05.610 --> 00:28:08.970
Again, we need to make sure we reference
the object using the full

00:28:08.970 --> 00:28:10.320
hierarchy up to the window.

00:28:10.320 --> 00:28:16.190
So it's button hello of window
main to the content of-- and here,

00:28:16.270 --> 00:28:21.180
you might think that I'm going to copy
and paste the text field of window main.

00:28:21.510 --> 00:28:25.540
But I don't need to do that in this case,
because as you see, each handler has an

00:28:25.770 --> 00:28:28.680
argument passed into it,
the object.

00:28:28.830 --> 00:28:31.800
How do you know which object that is,
do you ask?

00:28:32.240 --> 00:28:34.420
It's the object that you
attach the handler to,

00:28:34.450 --> 00:28:36.050
in this case, the text field.

00:28:36.370 --> 00:28:42.240
So in fact, what I can do is the
content of the object.

00:28:44.750 --> 00:28:46.460
So let's save that script.

00:28:46.510 --> 00:28:50.150
Again, that should be the code that
you got with the text clipping,

00:28:50.150 --> 00:28:52.790
otherwise I'm about to
be very disappointed.

00:28:53.250 --> 00:28:56.290
And let's hit build and go to
build and run our application.

00:28:56.510 --> 00:28:59.600
So we've got our wider
user interface elements.

00:28:59.760 --> 00:29:06.210
And if we hit return in our text field,
you should see the button update.

00:29:14.540 --> 00:29:17.940
This is really, really, really long.

00:29:18.010 --> 00:29:22.490
Yes it is, and I won't torment you
any further with that.

00:29:24.160 --> 00:29:27.540
But you're apparently
going to torment me.

00:29:27.570 --> 00:29:29.850
I suppose I asked for that.

00:29:33.970 --> 00:29:38.260
So there's one more-- boy,
you did take me literally when I said

00:29:38.260 --> 00:29:40.460
name everything the way I name things.

00:29:40.600 --> 00:29:42.290
Wow,
I didn't realize I had this much power.

00:29:42.300 --> 00:29:44.770
What can I tell you to do next?

00:29:45.150 --> 00:29:48.530
I won't exploit my apparent
control over the audience.

00:29:48.880 --> 00:29:52.020
What I would like to show you, though,
is how you can use Script Editor to

00:29:52.070 --> 00:29:55.550
script this application and
dynamically interact with it.

00:29:55.630 --> 00:29:59.610
So please launch Script Editor,
which I have in my doc and which

00:29:59.610 --> 00:30:01.600
you all should have in your doc,
too.

00:30:01.640 --> 00:30:05.950
If you don't, you can find it in
applications/applescript.

00:30:06.620 --> 00:30:08.700
And again,
there's a text clipping for this portion.

00:30:08.700 --> 00:30:12.590
If you drag the Step 2
Hello Test Script text

00:30:12.690 --> 00:30:15.100
clipping into Script Editor,
you'll get something like

00:30:15.380 --> 00:30:17.370
what I'm about to do.

00:30:17.800 --> 00:30:22.880
So we can do tell app hello,
our application.

00:30:23.390 --> 00:30:24.300
What do we want to do?

00:30:24.300 --> 00:30:27.860
Well, we might not remember what we
named the user interface elements,

00:30:27.860 --> 00:30:31.360
so we could do something
like get every window.

00:30:31.410 --> 00:30:34.170
And we need to remember
to end our tell block.

00:30:36.450 --> 00:30:38.240
And I just compiled.

00:30:38.280 --> 00:30:40.700
And let's go ahead and run.

00:30:40.740 --> 00:30:43.850
And you should see that
there's one window,

00:30:44.000 --> 00:30:45.920
window ID 1 of application hello.

00:30:46.050 --> 00:30:49.460
Well, that's good, because we have one
window in our application.

00:30:49.560 --> 00:30:53.740
But you may still be skeptical that
I'm actually talking to my application.

00:30:55.270 --> 00:31:00.640
Let's get every control of every
window and go ahead and run that.

00:31:00.790 --> 00:31:04.190
And we see the window has
a button and a text field.

00:31:04.560 --> 00:31:08.850
Well, that sounds like our application,
but you still might be skeptical.

00:31:09.020 --> 00:31:11.000
So let's get--

00:31:11.900 --> 00:31:17.700
[Transcript missing]

00:31:18.360 --> 00:31:20.180
of Window 1.

00:31:20.360 --> 00:31:24.640
So I'll just do things in many different
ways as you can in AppleScript,

00:31:24.720 --> 00:31:29.370
but Window 1 and
First Window are equivalent.

00:31:29.610 --> 00:31:33.300
Let's go ahead and run that,
and we see that we get-- well,

00:31:33.300 --> 00:31:34.780
you might not be able to see that.

00:31:34.800 --> 00:31:36.900
Let's zoom in quickly.

00:31:37.050 --> 00:31:41.200
That, in fact,
I get the title of the button.

00:31:41.260 --> 00:31:42.670
And in fact, it's even better than that.

00:31:42.710 --> 00:31:45.810
I can tell the button--

00:31:47.450 --> 00:31:51.980
To perform action,
which will essentially tell the

00:31:51.980 --> 00:31:54.530
user interface element to do
whatever it's supposed to do.

00:31:54.770 --> 00:31:57.540
For a button, click.

00:31:57.630 --> 00:32:02.720
So if I run that... This is really,
really, really long.

00:32:04.570 --> 00:32:07.140
And in fact,
we can do this by using the name.

00:32:07.140 --> 00:32:12.370
So button hello of window main.

00:32:14.290 --> 00:32:17.950
This is really, really, really long.

00:32:18.110 --> 00:32:18.250
DAVID J.

00:32:18.250 --> 00:32:19.000
So you have your choice.

00:32:19.000 --> 00:32:21.100
If you don't happen to know
what all the names are of a

00:32:21.100 --> 00:32:23.510
particular Studio application,
you can simply explore.

00:32:23.520 --> 00:32:26.860
Get every window, get every control,
get every button,

00:32:26.950 --> 00:32:31.510
and address them by name, or not by name,
by position or ID.

00:32:31.810 --> 00:32:34.080
If you built the application
yourself and you know that the

00:32:34.080 --> 00:32:37.990
text field is named Message,
you can reference by name.

00:32:38.150 --> 00:32:43.630
And this can be a great way to debug
your applications and test them out.

00:32:43.900 --> 00:32:47.310
And in order so that you don't
think that the "this is really,

00:32:47.310 --> 00:32:50.100
really, really long" is applying
to this sample project,

00:32:50.160 --> 00:32:52.880
let's move back to slides.

00:32:58.550 --> 00:32:59.200
So what have we learned?

00:32:59.200 --> 00:33:02.260
And I hear some of you still
out on another training run.

00:33:02.300 --> 00:33:04.820
We've learned how to use
Studio's containment hierarchy

00:33:04.820 --> 00:33:08.020
to reference the user interface
elements in our application.

00:33:08.040 --> 00:33:10.630
We learned how to read the
dictionary to learn how to reference

00:33:10.630 --> 00:33:13.250
the user interface elements,
their properties,

00:33:13.270 --> 00:33:15.900
and their relationships,
their inheritance.

00:33:15.950 --> 00:33:18.100
We learned how to control
user interface elements to

00:33:18.100 --> 00:33:21.050
get them to interact together,
to have the text field influence

00:33:21.140 --> 00:33:23.720
the button and the button
read from the text field.

00:33:23.760 --> 00:33:26.010
And we learned how to script the
application as a great way to

00:33:26.010 --> 00:33:28.850
test and debug our application.

00:33:29.000 --> 00:33:30.880
So now we're running.

00:33:31.440 --> 00:33:32.160
It feels good.

00:33:32.400 --> 00:33:34.900
We're feeling the burn.

00:33:34.930 --> 00:33:37.120
Let's move on to something a
little bit more substantial.

00:33:37.120 --> 00:33:39.200
We're ready for some
longer training runs.

00:33:39.230 --> 00:33:44.640
And now we're going to build a complete
Studio application called Processes.

00:33:45.560 --> 00:33:49.540
And this is the remainder
of our training schedule.

00:33:49.570 --> 00:33:52.220
It looks like a lot,
but let's start at the beginning.

00:33:52.240 --> 00:33:55.410
Let me show you the application
we're going to build.

00:33:55.850 --> 00:33:58.630
It's a simple process
manager application,

00:33:58.630 --> 00:34:01.940
roughly similar to Activity Monitor,
but it doesn't do everything

00:34:01.940 --> 00:34:03.860
Activity Monitor does,
and it does some things that

00:34:03.990 --> 00:34:04.920
Activity Monitor doesn't.

00:34:04.940 --> 00:34:07.830
It uses a number of
AppleScript Studio features,

00:34:07.830 --> 00:34:10.450
data representation,
we're going to have a table

00:34:10.450 --> 00:34:13.700
view that has sortable columns,
we're going to have a toolbar.

00:34:13.700 --> 00:34:18.180
We'll also have an idle handler to
refresh our view whenever the user,

00:34:18.180 --> 00:34:20.260
however often the user wants.

00:34:20.640 --> 00:34:22.600
And we'll also add drag and drop support.

00:34:22.860 --> 00:34:27.770
All great features that you might want
to have in your particular application.

00:34:27.780 --> 00:34:29.910
So let me show it to you.

00:34:29.960 --> 00:34:34.440
And if you'd like to follow along,
you can look in your milestones.

00:34:34.440 --> 00:34:36.660
Let me clean up here a bit.

00:34:36.720 --> 00:34:37.930
Here we go.

00:34:40.100 --> 00:34:44.080
If you find the processes
step 9 milestone,

00:34:44.080 --> 00:34:46.840
that is the completed project,

00:34:48.270 --> 00:34:53.080
And within it, there is a compiled binary
that's already built.

00:34:53.090 --> 00:34:53.650
Oh, I'm sorry.

00:34:53.780 --> 00:34:56.260
Please switch back to the demo machine.

00:34:57.840 --> 00:35:00.200
fooled you there, didn't I?

00:35:00.210 --> 00:35:03.200
Thank you for the assistance
from the peanut gallery.

00:35:05.100 --> 00:35:07.080
So let's go ahead and launch processes.

00:35:07.220 --> 00:35:09.380
Step nine,
this is the completed application.

00:35:09.430 --> 00:35:10.200
And here it is.

00:35:10.430 --> 00:35:14.520
So we see all the processes that
are currently running on my system.

00:35:14.930 --> 00:35:18.870
And if I bring up Finder window
with some more applications,

00:35:18.870 --> 00:35:21.850
you can see that I can drag
and drop more applications,

00:35:21.900 --> 00:35:23.840
and it will go ahead and launch them.

00:35:23.870 --> 00:35:25.860
Just kind of a bogus feature,
but we had to work drag and

00:35:25.880 --> 00:35:28.100
drop support in somewhere.

00:35:29.340 --> 00:35:33.690
And we can do multiple selections
and hide them and show them.

00:35:38.200 --> 00:35:43.790
We can inspect them and get
nice properties windows.

00:35:45.480 --> 00:35:48.340
And we can sort the columns.

00:35:48.370 --> 00:35:51.220
We can configure our toolbar.

00:35:51.830 --> 00:35:54.420
Just like any other Cocoa application.

00:35:54.550 --> 00:35:57.820
So I'm sure that I've forgotten
to demo a great feature that the

00:35:57.820 --> 00:36:01.410
engineer who actually built the sample
project spent long hours working on,

00:36:01.410 --> 00:36:03.940
and I'm sure he'll tell
me about it afterwards.

00:36:03.990 --> 00:36:07.340
Nevertheless, let's press on.

00:36:07.410 --> 00:36:09.550
Back to slides, please.

00:36:16.220 --> 00:36:17.640
So we're going to run.

00:36:17.670 --> 00:36:20.020
We need to get some training runs in,
otherwise that marathon's

00:36:20.090 --> 00:36:21.600
just not going to work.

00:36:21.730 --> 00:36:23.910
But I know that you guys are
going to do your training runs

00:36:23.990 --> 00:36:26.790
because you're a great audience.

00:36:26.860 --> 00:36:30.800
Okay, yeah, I'm sucking up a little bit,
but... I know you're

00:36:30.800 --> 00:36:31.600
out there practicing.

00:36:31.600 --> 00:36:32.940
Now we're in month five.

00:36:33.190 --> 00:36:36.200
We've skipped ahead a little bit,
in the interest of time.

00:36:36.240 --> 00:36:37.900
And we're going to
jump--you guys are so great,

00:36:37.900 --> 00:36:40.000
we're going to jump right to step eight.

00:36:40.060 --> 00:36:42.290
We're going to add the idle handler,
and we're going to add

00:36:42.290 --> 00:36:43.500
the drag-and-drop support.

00:36:43.590 --> 00:36:46.790
But you do have all the other milestones,
so I encourage you to work through

00:36:46.790 --> 00:36:49.280
them at your leisure later on.

00:36:50.700 --> 00:36:52.940
So first,
we're going to add the idle handler.

00:36:52.990 --> 00:36:55.280
And in order to do that,
we're going to attach the

00:36:55.280 --> 00:36:57.670
handler to the application,
its files owner object,

00:36:57.780 --> 00:36:59.140
which I'll show you.

00:36:59.200 --> 00:37:03.320
We're going to attach a choose menu item
handler to the pop up button in the lower

00:37:03.320 --> 00:37:05.760
left-hand corner of our user interface.

00:37:05.800 --> 00:37:09.830
We'll build and run and test the
handler to make sure it works properly.

00:37:09.940 --> 00:37:12.370
So what I'm going to do,
and what you should do,

00:37:12.510 --> 00:37:15.570
is find the step seven
milestone for processes,

00:37:15.570 --> 00:37:17.720
and we'll start building from there.

00:37:17.750 --> 00:37:21.230
The milestones are numbered so that
they are the completion of that step.

00:37:21.500 --> 00:37:25.200
So we'll pretend we did
steps one through seven.

00:37:25.240 --> 00:37:26.340
Now we're going to move on to step eight.

00:37:26.480 --> 00:37:29.380
So please, back to demo.

00:37:31.930 --> 00:37:33.820
Let's see,
what kind of an opening should-- no,

00:37:33.820 --> 00:37:34.310
I'm sorry.

00:37:34.470 --> 00:37:37.340
I got distracted.

00:37:37.340 --> 00:37:39.980
Let's see, I'm going to do what
I just asked you to do.

00:37:39.980 --> 00:37:44.900
I'm going to open up the
Processes Step 7 project.

00:37:44.960 --> 00:37:47.450
Let's give ourselves some more room.

00:37:50.740 --> 00:37:53.320
And open up our editor by grabbing
the split feed down there.

00:37:53.320 --> 00:37:56.190
I snuck that one by you before, too.

00:37:56.500 --> 00:38:01.660
And what we wanted to do is
open up our main menu.nib.

00:38:01.780 --> 00:38:05.020
Again, similarly to how we built
the Hello World application,

00:38:05.020 --> 00:38:06.640
we're running,
but maybe we're not running

00:38:06.640 --> 00:38:07.890
as much faster as we thought.

00:38:08.070 --> 00:38:10.140
Or maybe we were running faster before.

00:38:10.250 --> 00:38:11.360
Quite a conundrum.

00:38:11.410 --> 00:38:15.830
Let's double-click the nib file and
open it up in Interface Builder.

00:38:15.900 --> 00:38:19.140
You should have something
that looks like that.

00:38:19.250 --> 00:38:21.960
Looks like the application
we demoed a short time ago.

00:38:22.090 --> 00:38:24.750
And what we want to do
is add an idle handler.

00:38:24.940 --> 00:38:28.700
And what we want to do is add that
handler to the files owner object,

00:38:28.860 --> 00:38:32.980
which you can select down here
in the main menu.nib window.

00:38:33.000 --> 00:38:36.840
And again, we'll switch over to the
AppleScript pane in the inspector.

00:38:36.900 --> 00:38:41.320
We can see we already have a number of
handlers attached from the earlier steps.

00:38:42.490 --> 00:38:46.520
And the idle handler is
under the application suite.

00:38:46.650 --> 00:38:50.670
So we can just click it to attach
it to the files on our object.

00:38:50.880 --> 00:38:55.760
And because we already have the launched
handler attached to the processes script,

00:38:55.760 --> 00:38:58.730
we don't need to click that radio button.

00:38:58.800 --> 00:39:01.110
I'm so glad it's a radio button now.

00:39:02.130 --> 00:39:04.100
And let's see,
we need to do one more thing in the nib.

00:39:04.230 --> 00:39:10.080
We need to select our pop-up button and
attach the Choose Menu Item handler,

00:39:10.080 --> 00:39:14.820
which strangely enough,
is under the Menu Suite.

00:39:14.920 --> 00:39:18.170
So that this handler, again,
will be called when the user clicks on

00:39:18.170 --> 00:39:20.940
the pop-up button and makes a selection.

00:39:22.110 --> 00:39:26.330
And finally, we need to attach that
to our processes script.

00:39:26.440 --> 00:39:28.970
So let's go ahead and save your nib.

00:39:29.440 --> 00:39:32.350
And click Edit to, again,
take us back into Xcode,

00:39:32.350 --> 00:39:36.040
open up our script,
and add templates for those two

00:39:36.040 --> 00:39:38.190
new handlers we've attached.

00:39:40.090 --> 00:39:42.400
clear the comments.

00:39:42.470 --> 00:39:45.340
For those of you, again,
not as familiar with AppleScript,

00:39:45.340 --> 00:39:49.550
you'll note that a block comment can
be done with open paren asterisk and

00:39:49.550 --> 00:39:53.390
then close with an asterisk close paren,
or a single line comment

00:39:53.390 --> 00:39:54.910
with two hyphens.

00:39:55.440 --> 00:39:56.690
I'll just sprinkle this stuff in.

00:39:56.840 --> 00:39:58.400
Don't worry.

00:39:58.430 --> 00:40:03.460
Let's open the script clippings
for the processes outline.

00:40:04.430 --> 00:40:05.590
And we're in step eight.

00:40:05.730 --> 00:40:09.000
And let's implement
the idle handler first.

00:40:09.040 --> 00:40:11.650
Try dragging over that clipping.

00:40:11.900 --> 00:40:14.400
And while we're there,
let's go ahead and bring over

00:40:14.400 --> 00:40:17.110
the Choose Menu Item Code,
too.

00:40:18.050 --> 00:40:20.410
And again,
you can compile with Command-K to

00:40:20.410 --> 00:40:23.320
get the nice formatting
and make it easier to read.

00:40:23.360 --> 00:40:25.870
And in the idle handler--

00:40:26.100 --> 00:40:29.430
In this line, this is again very similar
to reading the title from our

00:40:29.430 --> 00:40:33.510
button in our Hello Project,
we're going to read out the name of

00:40:33.510 --> 00:40:36.500
the menu item that the user selected.

00:40:36.620 --> 00:40:40.450
And if it's not update manually--
I guess I didn't actually

00:40:40.520 --> 00:40:41.610
show you that pop-up before.

00:40:41.620 --> 00:40:44.370
That's the feature that I'll
get talked to about later.

00:40:44.480 --> 00:40:46.460
There's update every minute,
update every three minutes,

00:40:46.540 --> 00:40:49.610
update every five minutes, and so on.

00:40:49.770 --> 00:40:52.040
We'll read the value that the user chose.

00:40:52.140 --> 00:40:58.000
And then if it's not update manually--
so if the user does want the data

00:40:58.000 --> 00:41:01.900
to refresh every so long interval--

00:41:02.710 --> 00:41:06.270
will call a method
called update processes.

00:41:06.370 --> 00:41:09.160
And finally,
something important for an idle handler,

00:41:09.220 --> 00:41:13.260
the return value is actually
the interval with which the idle

00:41:13.260 --> 00:41:16.880
handler will execute in seconds.

00:41:16.940 --> 00:41:19.560
So you might be wondering
where that's coming from.

00:41:19.620 --> 00:41:21.980
The answer is we haven't
added it to the code yet.

00:41:22.080 --> 00:41:24.680
So let's use the function pop-up,
which works just as well with

00:41:24.680 --> 00:41:29.260
AppleScript as it does with any of the
other supported languages in Xcode.

00:41:29.490 --> 00:41:33.050
And select the second property,
current process selection,

00:41:33.060 --> 00:41:35.170
to take us to the top of the file.

00:41:35.530 --> 00:41:38.960
And there's another text clipping,
Step 8 Property,

00:41:38.960 --> 00:41:41.450
which we can just drag in there.

00:41:42.350 --> 00:41:45.550
to define our idleVal property
and give it a default value,

00:41:45.560 --> 00:41:47.160
here 60 seconds.

00:41:47.250 --> 00:41:50.120
However, in the interest of time,
so that you can actually

00:41:50.120 --> 00:41:54.060
see this working,
let's change that to five seconds.

00:41:54.240 --> 00:41:56.590
Trust me, you'll be happy later.

00:41:57.870 --> 00:42:00.690
And let's go back to our idle handler.

00:42:00.810 --> 00:42:02.360
So we talked about that code.

00:42:02.590 --> 00:42:07.380
Immediately beneath it, or if it's not,
you can again use the pop-up menu,

00:42:07.380 --> 00:42:10.270
is our choose menu item handler.

00:42:10.570 --> 00:42:12.490
And the first thing we're
going to do is verify that,

00:42:12.490 --> 00:42:16.290
in fact, that was attached to the object,
which in this particular case is not

00:42:16.300 --> 00:42:20.200
necessary because the pop-up menu
is the only object we've attached

00:42:20.340 --> 00:42:21.620
to choose menu item handler to.

00:42:21.620 --> 00:42:24.500
But as you get more user
interface elements in your script,

00:42:24.530 --> 00:42:26.560
that becomes more important.

00:42:27.000 --> 00:42:30.560
We're again going to read the name of
the pop-up that the pop-up's set to,

00:42:30.730 --> 00:42:35.930
and then just simply have a
set of if-then-elses to set

00:42:35.940 --> 00:42:37.460
the appropriate interval.

00:42:37.520 --> 00:42:41.470
And again,
let's change update every minute to

00:42:41.960 --> 00:42:45.260
set the idle vowel to five seconds,
again, in the interest of time so we

00:42:45.260 --> 00:42:47.540
don't have to sit here and you
don't have to listen to my jokes,

00:42:47.540 --> 00:42:51.280
which I'm sure you'd be
frightened of at this point.

00:42:53.390 --> 00:42:57.090
All right, and those of you paying
close attention-- oh,

00:42:57.090 --> 00:42:59.000
no, we do have update
processes in here already.

00:42:59.030 --> 00:42:59.820
Great.

00:42:59.850 --> 00:43:05.330
Let's save our script and build and go.

00:43:07.930 --> 00:43:12.040
We should build and run
our processes application.

00:43:12.120 --> 00:43:15.120
Here it is,
like we saw earlier in the demo.

00:43:15.200 --> 00:43:19.390
And we're set to update manually,
so we're not updating.

00:43:19.920 --> 00:43:22.960
Let's go ahead and set--

00:43:23.430 --> 00:43:25.560
The update every minute.

00:43:25.590 --> 00:43:30.370
And as we see, you may see, the

00:43:31.330 --> 00:43:34.640
Status bar is firing every five seconds.

00:43:34.660 --> 00:43:37.850
And in fact,
if we zoom out so you don't get--

00:43:38.910 --> 00:43:43.690
is a great example of how
AppleScript Studio can help you to turn

00:43:43.690 --> 00:43:54.990
a script into a full-fledged application.

00:43:55.700 --> 00:43:57.600
Excellent.

00:43:57.600 --> 00:44:00.920
I think we're going to finish
in a group in our marathon.

00:44:00.950 --> 00:44:02.220
All right.

00:44:02.240 --> 00:44:04.680
Let's go ahead and quit processes.

00:44:04.820 --> 00:44:07.750
And back to slides, please.

00:44:10.770 --> 00:44:13.830
So in just a few minutes,
you learned how to add an idle

00:44:13.860 --> 00:44:16.100
handler to your application,
and also how to implement

00:44:16.100 --> 00:44:17.990
a pop-up button.

00:44:18.540 --> 00:44:21.180
Where did that hyphen come from?

00:44:21.210 --> 00:44:24.640
Man, can't trust anybody anymore.

00:44:24.820 --> 00:44:28.240
All right, so let's move on to our final
step of our processes project.

00:44:28.290 --> 00:44:31.940
We're going to add drag and drop support,
that awesome feature which you'd

00:44:31.940 --> 00:44:34.620
want in any process monitor
application of being able to drag

00:44:34.620 --> 00:44:37.110
an application on to launch it.

00:44:40.660 --> 00:44:43.290
So what you can do is,
if you've been building along with me,

00:44:43.290 --> 00:44:45.490
you can continue with the
project we've been working on,

00:44:45.570 --> 00:44:47.880
or you can simply open up
the step eight milestone,

00:44:47.970 --> 00:44:51.540
which will get you right up to
the point where we're about to go.

00:44:51.590 --> 00:44:54.300
To add drag and drop support,
what we're going to do is register

00:44:54.300 --> 00:44:58.120
for the file names drag types,
because the only kinds of drags

00:44:58.130 --> 00:45:00.880
we want to handle are files.

00:45:01.490 --> 00:45:05.620
We want to add a drop handler to handle
the actual drop to the table view,

00:45:05.630 --> 00:45:07.670
because we don't want
to support drops on,

00:45:07.670 --> 00:45:08.600
say, the pop-up button.

00:45:08.600 --> 00:45:11.220
We just want to support
drops on the table view.

00:45:11.270 --> 00:45:14.880
And then we'll build and run and
verify that our application is now

00:45:14.880 --> 00:45:17.980
accepting drops on its table view.

00:45:18.060 --> 00:45:20.400
So please switch back to demo.

00:45:26.530 --> 00:45:30.230
And since we're already in Xcode,
let's add the code first.

00:45:30.370 --> 00:45:34.530
So please use the function pop-up to
switch to the Awake from Nib handler,

00:45:34.800 --> 00:45:39.660
which at this point in our
training is fairly long.

00:45:39.710 --> 00:45:42.520
But we want to go down to the end of it.

00:45:42.780 --> 00:45:47.350
We can see that this else clause
is for the table view object,

00:45:47.350 --> 00:45:50.230
which is where we want to
register the drag types.

00:45:50.380 --> 00:45:54.340
So right before the final end if,
you can make some room and

00:45:54.340 --> 00:45:56.340
bring up your clippings again.

00:45:56.390 --> 00:45:58.940
And the step nine,
awake from nib clipping,

00:45:59.000 --> 00:46:01.130
is what we need here.

00:46:02.810 --> 00:46:04.140
Let me compile that.

00:46:04.230 --> 00:46:07.670
So all we're doing is telling the object,
which in this case is the table view,

00:46:07.820 --> 00:46:11.640
to register drag types file names,
because those are the only drag

00:46:11.700 --> 00:46:13.230
types that we want to handle.

00:46:17.430 --> 00:46:20.460
And let's switch back to our nib file,
mainmenu.nib.

00:46:20.460 --> 00:46:27.110
And what we want to do is attach
a handler to the table view,

00:46:27.110 --> 00:46:29.710
so I've clicked on the table view.

00:46:30.210 --> 00:46:34.040
But those of you paying close attention
will notice that my inspector says,

00:46:34.040 --> 00:46:35.660
I've got a scroll view.

00:46:35.730 --> 00:46:37.520
How can this be?

00:46:37.600 --> 00:46:40.070
Well, this is a handy thing that
you need to be aware of.

00:46:40.260 --> 00:46:42.310
The table view is
embedded in a scroll view.

00:46:42.380 --> 00:46:45.200
So in fact, I need to double click.

00:46:45.660 --> 00:46:49.370
And you can see the highlighting
is different in the window itself,

00:46:49.370 --> 00:46:51.780
and my inspector says I've
got the table view now.

00:46:51.780 --> 00:46:53.110
Excellent.

00:46:53.120 --> 00:46:56.040
So what we want to do
is add a drop handler.

00:46:56.040 --> 00:46:57.940
Can anyone guess where
the drop handler is?

00:46:57.980 --> 00:46:58.460
Which suite?

00:47:00.010 --> 00:47:01.490
Thank you.

00:47:01.580 --> 00:47:03.260
Not a plant.

00:47:03.270 --> 00:47:06.100
Let's go ahead and
click the drop handler.

00:47:07.410 --> 00:47:10.110
And as we can see, we've already attached
handlers to this object,

00:47:10.230 --> 00:47:13.340
so we don't need to set the script again.

00:47:13.340 --> 00:47:14.790
It's already set.

00:47:14.970 --> 00:47:16.890
Save our nib.

00:47:17.180 --> 00:47:20.290
And let's go ahead and click the
Edit button again to switch back to our

00:47:20.290 --> 00:47:24.640
script and get our drop handler template.

00:47:24.720 --> 00:47:25.710
Remove our comment.

00:47:25.920 --> 00:47:28.990
And the final text
clipping for this project,

00:47:29.260 --> 00:47:30.480
step nine, drop handler.

00:47:30.480 --> 00:47:33.030
You can drag right in there.

00:47:34.100 --> 00:47:36.040
Again,
we can compile to get the formatting.

00:47:36.040 --> 00:47:38.510
And let me walk you
quickly through this code.

00:47:38.740 --> 00:47:42.070
So one of the important things about
a drop handler is that the return

00:47:42.070 --> 00:47:47.140
value from it tells the application
whether the drag was successful or not.

00:47:47.310 --> 00:47:49.610
So did we drag something
that wasn't a file,

00:47:49.740 --> 00:47:50.780
say a folder?

00:47:50.930 --> 00:47:54.040
Because if we drag
something that's not a file,

00:47:54.040 --> 00:47:58.060
we want to get the nice animation
of the folder being rejected,

00:47:58.100 --> 00:48:01.190
because otherwise it might try again.

00:48:01.830 --> 00:48:05.600
But if we do get file names dropped,
we don't want that animation.

00:48:05.600 --> 00:48:08.660
We want it to look nice,
like the drop succeeded, which, in fact,

00:48:08.660 --> 00:48:09.500
it has.

00:48:09.600 --> 00:48:13.150
So in order to do get that behavior,
we need to return true or false,

00:48:13.190 --> 00:48:15.440
depending on whether
the drag was successful.

00:48:15.540 --> 00:48:19.710
So I define and initialize my
drag succeeded variable here.

00:48:21.350 --> 00:48:24.260
I read the types that are on
the pasteboard and check to see

00:48:24.260 --> 00:48:29.760
if there are any objects on the
pasteboard of type file names.

00:48:29.810 --> 00:48:33.390
If so, I read them from the pasteboard

00:48:34.400 --> 00:48:39.690
And if I have any, then I'm just going to
repeat through them,

00:48:39.910 --> 00:48:40.800
check their kind.

00:48:40.800 --> 00:48:44.410
If they're an application,
I'm going to launch them.

00:48:44.600 --> 00:48:48.320
And say that I found an app in this drop.

00:48:48.460 --> 00:48:50.000
If that's the case,
then we're going to go ahead

00:48:50.000 --> 00:48:52.040
and update the processes list,
our table view,

00:48:52.040 --> 00:48:55.650
so that we refresh and show the
new application that just launched.

00:48:55.770 --> 00:49:00.210
And finally, set our drag succeeded
variable-- variable,

00:49:00.210 --> 00:49:00.820
not valuable.

00:49:00.950 --> 00:49:02.620
It is a valuable variable, though.

00:49:02.820 --> 00:49:04.970
Say that five times fast.

00:49:06.430 --> 00:49:08.500
meaning that our drop was successful.

00:49:08.560 --> 00:49:10.930
And finally, we'll return that variable.

00:49:11.070 --> 00:49:14.290
So if we didn't have any applications,
we'll return false,

00:49:14.410 --> 00:49:18.810
which is what I initialized it to at
the beginning of the drop handler.

00:49:19.020 --> 00:49:22.740
So we'll save that and go
ahead and hit Build and Go.

00:49:24.020 --> 00:49:25.450
Here's our application again.

00:49:25.810 --> 00:49:31.640
So let's go ahead and bring up Finder
again and drag some applications onto it.

00:49:32.340 --> 00:49:33.500
And they launch.

00:49:33.520 --> 00:49:35.720
Great.

00:49:35.750 --> 00:49:38.800
But those of you who want to
write great applications know

00:49:38.800 --> 00:49:40.300
you need to do negative testing,
too.

00:49:40.340 --> 00:49:43.300
So let's try dragging a folder on there.

00:49:45.100 --> 00:49:48.210
didn't like it, and if you saw,
I don't think there's a way

00:49:48.300 --> 00:49:51.330
for me to slow this down,
but I do get the animation

00:49:51.340 --> 00:49:53.880
of the drag being rejected,
which hopefully you see in your

00:49:54.180 --> 00:49:57.410
versions of the application.

00:49:57.520 --> 00:50:00.660
What happens when you
drag a folder and a file,

00:50:00.660 --> 00:50:01.500
you ask?

00:50:02.910 --> 00:50:06.000
I'll leave that to you.

00:50:06.020 --> 00:50:07.700
Excellent.

00:50:07.760 --> 00:50:10.030
Back to slides, please.

00:50:14.100 --> 00:50:15.160
All right, so what have we learned?

00:50:15.160 --> 00:50:17.590
We just learned how to add drag
and drop support to a table view,

00:50:17.730 --> 00:50:22.100
which again, can be very useful in many
types of applications.

00:50:22.150 --> 00:50:24.290
And we've completed our first marathon.

00:50:24.360 --> 00:50:26.410
Congratulations.

00:50:30.830 --> 00:50:33.550
But it seems to me there was
something else that we were going

00:50:33.620 --> 00:50:35.980
to do once we learned to run.

00:50:36.750 --> 00:50:39.420
So let's pole vault.

00:50:39.450 --> 00:50:43.780
Let's do something a little trickier,
because just running, that's great.

00:50:43.810 --> 00:50:45.890
But marathons are passe now.

00:50:45.900 --> 00:50:47.600
We're well beyond that.

00:50:47.620 --> 00:50:48.750
We've got a new training schedule.

00:50:48.770 --> 00:50:51.190
We're going to write TextEdit.

00:50:51.850 --> 00:50:52.980
OK, not really.

00:50:53.040 --> 00:50:58.400
I'm going to demo TextEdit Plus,
and then I'll show you how to add the new

00:50:58.400 --> 00:51:00.030
behavior to it that we're going to do.

00:51:00.300 --> 00:51:02.890
So what new behavior are we going to add?

00:51:03.760 --> 00:51:06.030
Well,
I actually want to do a survey here.

00:51:06.050 --> 00:51:10.310
How many of you know that TextEdit
has a document properties inspector?

00:51:11.410 --> 00:51:12.040
That's what I thought.

00:51:12.170 --> 00:51:12.800
Oh, I'm sorry.

00:51:12.800 --> 00:51:13.750
There is one hand back there.

00:51:13.850 --> 00:51:15.060
Congratulations.

00:51:15.170 --> 00:51:19.080
Well, we're going to enhance the
feature you didn't know exists.

00:51:19.140 --> 00:51:21.480
We're going to add some additional
document properties using

00:51:21.480 --> 00:51:22.990
AppleScript Studio to text edit.

00:51:23.110 --> 00:51:26.000
We're going to add counts for characters,
words, and paragraphs,

00:51:26.000 --> 00:51:29.140
which can be very useful if you need
to get that story in on deadline.

00:51:29.140 --> 00:51:31.770
It's got to be 500 words.

00:51:32.780 --> 00:51:36.830
So let me demo the product and show
you that mysterious document properties

00:51:36.840 --> 00:51:39.540
inspector that you've never seen before.

00:51:39.600 --> 00:51:40.840
Back to demo, please.

00:51:40.840 --> 00:51:46.590
Let me clean up a bit.

00:51:46.790 --> 00:51:50.130
I don't think we have time
for a game of chess today.

00:51:54.970 --> 00:51:58.000
And in fact, what you want to do is run
the version of TextEdit.

00:51:58.010 --> 00:52:00.700
And if you have the
normal TextEdit running,

00:52:00.700 --> 00:52:02.490
you might want to quit
it to avoid confusion.

00:52:02.660 --> 00:52:06.750
I know you can keep track of two
different copies of the same application,

00:52:06.830 --> 00:52:08.040
but humor me.

00:52:08.110 --> 00:52:11.840
From TextEdit plus step two,
choose TextEdit and launch it,

00:52:11.880 --> 00:52:14.680
if you want to take a look with me.

00:52:15.050 --> 00:52:16.950
And let's get an interesting
document in there.

00:52:17.090 --> 00:52:21.690
So you can open up any of the
outlines from any of the milestones.

00:52:21.750 --> 00:52:24.270
They each have an RTF outline.

00:52:25.620 --> 00:52:28.360
Wow, that's some performance.

00:52:28.420 --> 00:52:31.760
And I know you've been dying to know,
where is that document properties,

00:52:31.760 --> 00:52:32.250
Inspector?

00:52:32.290 --> 00:52:35.670
Well, it's under the File menu,
Show Properties.

00:52:36.010 --> 00:52:38.980
As we can see down here at the bottom,
we've got this new statistics pane.

00:52:38.980 --> 00:52:42.080
Of course, it's not new to any of you
who've never seen this before,

00:52:42.080 --> 00:52:44.480
but the normal text edit
doesn't have that there.

00:52:44.500 --> 00:52:45.260
Believe me.

00:52:45.290 --> 00:52:47.200
You can check it out later yourself.

00:52:47.240 --> 00:52:51.170
And if we remove a bunch of text from
this file and click the Update button,

00:52:51.170 --> 00:52:53.430
we'll see that the numbers change.

00:52:54.060 --> 00:52:55.240
So great, that's what we're going to do.

00:52:55.240 --> 00:52:58.300
We're going to add this
bottom statistics box to the

00:52:58.430 --> 00:53:00.920
Text Edit's document inspector.

00:53:00.960 --> 00:53:02.900
Go ahead and quit Text Edit.

00:53:02.950 --> 00:53:05.390
And back to slides, please.

00:53:09.020 --> 00:53:11.720
So the first step to do this
is to prepare the project.

00:53:11.860 --> 00:53:14.640
There are a few housekeeping
items that you need to do on your

00:53:14.640 --> 00:53:18.560
Cocoa project to enable it to
work with AppleScript Studio code.

00:53:18.640 --> 00:53:20.800
So that's what we're going to do first.

00:53:21.130 --> 00:53:25.880
What we're going to do is add a new
AppleScript text file to hold our script.

00:53:25.920 --> 00:53:28.100
And then we need to add a new
build phase to our project's

00:53:28.210 --> 00:53:31.620
target so that that script is
compiled when we build our project.

00:53:31.640 --> 00:53:34.140
And of course, we need to add that
file to the build phase.

00:53:34.210 --> 00:53:37.130
Finally,
in order for Studio to work within

00:53:37.210 --> 00:53:40.180
this scriptable application,
we need to make a few minor

00:53:40.310 --> 00:53:44.120
changes to its scripting
dictionary to tie things together.

00:53:44.380 --> 00:53:46.200
So let me show you how to do that.

00:53:46.430 --> 00:53:48.360
Demo, please.

00:53:54.700 --> 00:53:56.120
Thank you.

00:53:56.600 --> 00:53:58.770
So in this case,
what you want to do is open up the

00:53:58.870 --> 00:54:06.060
TextEdit Plus Starter project in the
.xcode project in that milestone project.

00:54:06.090 --> 00:54:08.580
Let's give ourselves some room again.

00:54:10.940 --> 00:54:15.590
And what we want to do is just click
anywhere there in the TextEdit group

00:54:15.670 --> 00:54:17.460
over here where the source files are.

00:54:17.490 --> 00:54:20.670
And we're going to use the Xcode--
we used the new project assistant

00:54:20.780 --> 00:54:22.440
in the first hands-on project.

00:54:22.470 --> 00:54:24.430
In this one,
we're going to use the new file assistant

00:54:24.450 --> 00:54:27.100
to add our new AppleScript file.

00:54:27.150 --> 00:54:30.090
So here it is, a file, new file.

00:54:30.410 --> 00:54:33.000
And there are two different types
of AppleScript script files.

00:54:33.000 --> 00:54:36.100
We're going to create a
new AppleScript text file.

00:54:36.200 --> 00:54:38.870
Again,
right there at the top where they belong.

00:54:39.600 --> 00:54:44.180
And let's name this-- again,
humor me here-- testAS,

00:54:44.180 --> 00:54:48.770
with the AS in caps, .AppleScript.

00:54:49.240 --> 00:54:50.940
Everyone see that?

00:54:51.020 --> 00:54:53.270
All right, I just wanted to zoom again.

00:54:53.360 --> 00:54:58.120
And click Finish to add the
new script file to our project.

00:54:58.270 --> 00:55:00.870
Here it is in the Groups and Files pane.

00:55:01.270 --> 00:55:04.320
All right, well, now we've added the
script to our project,

00:55:04.320 --> 00:55:06.810
we need to make sure it gets
compiled when we build our project.

00:55:07.000 --> 00:55:09.840
So let's go down to
Targets and disclose that,

00:55:09.840 --> 00:55:12.450
and select our TextEdit target.

00:55:12.910 --> 00:55:17.070
If we go up to the Project menu,
we want to add a new build phase.

00:55:17.410 --> 00:55:18.580
There are several choices.

00:55:18.650 --> 00:55:23.720
What we want to do is select
New Compile AppleScripts Build Phase,

00:55:23.780 --> 00:55:27.770
which, strangely enough,
will compile AppleScripts.

00:55:28.200 --> 00:55:30.020
So select that.

00:55:30.120 --> 00:55:33.410
And you can just close the
Inspector pane that comes up.

00:55:33.960 --> 00:55:37.740
Now that we have our build phase,
you can disclose the text

00:55:37.890 --> 00:55:39.130
edit target so you can see it.

00:55:39.160 --> 00:55:42.790
We've got this compile
AppleScript build phase down here.

00:55:43.110 --> 00:55:47.340
Grab your text--the new
testas.applescript file and drag

00:55:47.340 --> 00:55:52.440
it down so that bar appears beneath
"compile AppleScripts" and drop.

00:55:52.590 --> 00:55:55.600
And you should see a 1 appear next to
"compile AppleScripts," and you can

00:55:55.600 --> 00:55:58.740
tell if you've done it correctly if you
click on "compile AppleScripts" and you

00:55:58.740 --> 00:56:01.400
just see "testas.applescript" up there.

00:56:01.560 --> 00:56:04.310
Hopefully that's what everyone sees now.

00:56:05.030 --> 00:56:05.540
Excellent.

00:56:05.680 --> 00:56:11.520
So the last step to prepare our project
is to click on the Resources group.

00:56:11.580 --> 00:56:14.420
And we're going to select
the TextEdit.ScriptSuite,

00:56:14.720 --> 00:56:17.540
which defines TextEdit's
scripting dictionary.

00:56:17.590 --> 00:56:21.410
And we need to make three modifications
here to tie AppleScript Studio in

00:56:21.410 --> 00:56:24.580
and AppleScript Kit more accurately.

00:56:25.680 --> 00:56:29.360
So what we need to do is
change the superclass of the

00:56:29.400 --> 00:56:31.520
NSApplication and document classes.

00:56:31.790 --> 00:56:35.160
And there are text
clippings for this as well.

00:56:40.100 --> 00:56:42.900
You can see that this is
NSCoreSuite.nsApplication.

00:56:42.910 --> 00:56:47.250
We need to change that to an
AppleScriptKit version of NSApplication.

00:56:47.470 --> 00:56:51.040
And we've got
step1.nsApplicationSuperclass.

00:56:51.130 --> 00:56:55.200
So we change it to
ASKApplicationSuite.nsApplication.

00:56:55.280 --> 00:57:00.030
And similarly for the Document class
and the TextStorageType.

00:57:00.240 --> 00:57:03.260
Again, we're going to be changing--
replacing these with their

00:57:03.260 --> 00:57:05.180
AppleScript Studio equivalents.

00:57:05.200 --> 00:57:08.690
So for the Document superclass,
we're gonna drag Step 1,

00:57:08.690 --> 00:57:11.200
Document superclass.

00:57:11.380 --> 00:57:13.310
There it is.

00:57:14.190 --> 00:57:16.350
And for text storage type,
we're going to drag that

00:57:16.460 --> 00:57:19.100
to text storage type.

00:57:19.150 --> 00:57:22.070
Again,
replacing the NS core suite with the

00:57:22.070 --> 00:57:25.320
appropriate AppleScript kit suite.

00:57:25.520 --> 00:57:27.720
And save our changes.

00:57:28.920 --> 00:57:31.900
Now, what I would suggest you
do is build your project.

00:57:32.010 --> 00:57:35.280
But we're not going to build and go,
because none of these changes that we've

00:57:35.280 --> 00:57:38.310
just done actually change anything yet.

00:57:38.390 --> 00:57:40.260
But it will take a moment
for TextEdit to build.

00:57:40.420 --> 00:57:44.090
So while that's happening,
back to slides, please.

00:57:48.920 --> 00:57:51.900
Now, what I would suggest you
do is build your project.

00:57:51.900 --> 00:57:54.520
But we're not going to build and go,
because none of these

00:57:54.750 --> 00:57:57.800
So the next step, of course,
is to add that additional functionality.

00:57:57.830 --> 00:58:02.370
We're going to implement the new document
properties that we talked about earlier.

00:58:02.800 --> 00:58:05.670
So we're going to add an open
handler to the window so that when

00:58:05.670 --> 00:58:09.790
the user selects that mysterious
feature that no one knows about,

00:58:09.790 --> 00:58:14.200
the panel will open and the
properties will be updated.

00:58:14.220 --> 00:58:16.330
And also,
we had an update button in there

00:58:16.370 --> 00:58:18.920
so that the user can dynamically
click that button and update the

00:58:19.020 --> 00:58:20.020
properties whenever they like.

00:58:20.140 --> 00:58:24.400
So we need to add a clicked handler,
just like we did in Hello Studio.

00:58:24.520 --> 00:58:26.910
We need to implement those
handlers and finally build and

00:58:26.920 --> 00:58:29.340
run and test our application.

00:58:29.430 --> 00:58:31.030
So let's go ahead and do that.

00:58:31.080 --> 00:58:33.160
Back to demo, please.

00:58:37.720 --> 00:58:42.220
So what we need to do is open the nib
file that contains that properties panel,

00:58:42.280 --> 00:58:45.340
and we can find it in
the interfaces group.

00:58:45.390 --> 00:58:48.620
There it is right at the top,
documentproperties.nib.

00:58:48.650 --> 00:58:51.580
You can again double-click on that
to open it up in Interface Builder.

00:58:51.580 --> 00:58:54.660
Let's arrange the windows
so we can see them all.

00:58:54.700 --> 00:58:58.000
As we can see, we've already laid out
the statistics area,

00:58:58.100 --> 00:59:00.780
so we don't all have to do a lot of
dragging and clicking to get all those

00:59:00.880 --> 00:59:04.250
text fields lined up correctly and named.

00:59:04.700 --> 00:59:09.400
And what we need to do is add a
clicked handler to the Update button.

00:59:09.600 --> 00:59:12.370
Again, we'll need to switch back
to the AppleScript pane.

00:59:12.530 --> 00:59:15.140
I've clicked on my button,
and now I'm inspecting it.

00:59:15.140 --> 00:59:17.310
I can see it's the NSButton inspector.

00:59:17.520 --> 00:59:19.940
And just like in the first
Studio application you

00:59:19.940 --> 00:59:22.300
may have ever written,
we're going to attach the clicked

00:59:22.300 --> 00:59:26.160
handler and attach it to our script.

00:59:28.520 --> 00:59:32.900
The other thing we need to do is
attach the open handler to our window.

00:59:32.900 --> 00:59:37.870
So again, we can click on the background
or click here in the panel.

00:59:38.690 --> 00:59:42.520
And if I can remember
where this is-- yes,

00:59:42.740 --> 00:59:46.780
there it is, in the Windows suite,
the open handler.

00:59:46.840 --> 00:59:49.070
And again, we've already got a handler
attached to the script.

00:59:49.180 --> 00:59:51.360
It's already selected.

00:59:51.530 --> 00:59:54.530
So those are the only nib
changes we need to make.

00:59:55.170 --> 00:59:56.580
Let's go ahead and save our nib.

00:59:56.830 --> 01:00:00.140
And once more,
click the Edit button to take us back to

01:00:00.140 --> 01:00:04.370
Xcode and give us our handler templates.

01:00:05.080 --> 01:00:09.760
We'll remove the comments and
go back to our text clippings.

01:00:09.790 --> 01:00:12.540
As we see,
we've got a step two clicked handler.

01:00:12.570 --> 01:00:14.960
Let's go ahead and drag that in.

01:00:15.000 --> 01:00:17.990
And an open handler,
and let's drag that in.

01:00:21.270 --> 01:00:24.320
And go ahead and compile
to get the formatting,

01:00:24.320 --> 01:00:26.280
or you can just save,
which will also compile.

01:00:26.340 --> 01:00:28.290
Let me walk you through this code.

01:00:28.500 --> 01:00:32.800
So the open handler is attached to
the window so that we know that the

01:00:32.980 --> 01:00:34.960
object in this case is the window.

01:00:35.270 --> 01:00:38.790
And we want to tell the window
to clear the contents of each

01:00:38.910 --> 01:00:41.400
text field for our accounts.

01:00:41.460 --> 01:00:44.190
And then we're going to call
a handler to actually populate

01:00:44.280 --> 01:00:46.790
the text fields of that window.

01:00:47.900 --> 01:00:49.710
Again,
this handler will be called when the

01:00:49.710 --> 01:00:53.080
properties window is opened by the user.

01:00:53.150 --> 01:00:57.550
When the user clicks the button,
we want to get the window of the object.

01:00:57.660 --> 01:00:59.480
And this is, again,
another property that you could

01:00:59.480 --> 01:01:03.340
look up in the dictionary that
controls have a window property.

01:01:03.440 --> 01:01:06.120
So we can get the window of the button.

01:01:06.370 --> 01:01:08.830
And then let's show you
another feature of AppleScript,

01:01:08.850 --> 01:01:10.520
that you have exception handling.

01:01:10.520 --> 01:01:14.330
So you can do a try block to
try populating the text fields.

01:01:14.440 --> 01:01:17.610
And then if there's any kind of error,
you can do something.

01:01:17.620 --> 01:01:20.630
In this case,
we're just going to log an error message.

01:01:21.390 --> 01:01:24.610
And again, we're going to just populate
the text fields whenever

01:01:24.740 --> 01:01:26.480
the user clicks that button.

01:01:27.440 --> 01:01:29.420
So let's go ahead and build and go.

01:01:29.420 --> 01:01:33.120
And if you haven't saved your script yet,
please do.

01:01:33.140 --> 01:01:33.660
Oh, yes.

01:01:33.900 --> 01:01:34.270
You know what?

01:01:34.370 --> 01:01:35.790
I was already thinking about that.

01:01:36.000 --> 01:01:37.480
Thank you.

01:01:37.500 --> 01:01:39.660
That's not going to work too well.

01:01:39.690 --> 01:01:41.600
We have one more text clipping.

01:01:41.660 --> 01:01:46.340
Helpfully entitled, step two,
rest of code.

01:01:46.370 --> 01:01:48.540
No wonder I forgot it.

01:01:49.590 --> 01:01:52.180
It's just not memorable enough.

01:01:52.350 --> 01:01:54.880
So let's go ahead and compile that.

01:01:55.000 --> 01:01:58.180
So let's start with populate text fields.

01:01:58.230 --> 01:01:59.270
We're first, again,
we're going to do this

01:01:59.370 --> 01:02:00.100
within a try block.

01:02:00.240 --> 01:02:02.220
We're going to tell the
progress indicator next to

01:02:02.220 --> 01:02:03.870
the Update button to start.

01:02:04.160 --> 01:02:06.700
And again,
it's the same containment hierarchy.

01:02:06.800 --> 01:02:09.680
We've got the progress
indicator of the box.

01:02:09.740 --> 01:02:12.450
Here's three levels now of the window.

01:02:12.690 --> 01:02:14.840
We just tell it to start.

01:02:15.030 --> 01:02:18.380
We're going to get the
account information by

01:02:18.380 --> 01:02:20.660
calling this other handler,
which we have already added,

01:02:20.660 --> 01:02:23.790
if you'll note,
but I'll show it to you in a moment.

01:02:24.120 --> 01:02:28.710
And then we're going to set the contents
of the text field to those count values,

01:02:29.050 --> 01:02:31.730
tell the progress indicator to stop.

01:02:31.830 --> 01:02:33.530
That's it.

01:02:33.820 --> 01:02:38.840
The Doc Count Handler actually
scripts TextEdit itself to get the

01:02:38.840 --> 01:02:43.030
complete text from the front document,
and then calculate our character

01:02:43.030 --> 01:02:47.240
word and paragraph quantities,
and then construct a record that

01:02:47.240 --> 01:02:49.740
will pass back to the caller.

01:02:49.750 --> 01:02:50.230
Excellent.

01:02:50.270 --> 01:02:53.300
Well,
now I think we're ready to build and go.

01:02:53.330 --> 01:02:56.560
I was just checking to see if
you were paying attention before.

01:02:56.660 --> 01:03:00.000
So let's go ahead and open a
document that's got some text in it,

01:03:00.340 --> 01:03:02.850
and open our properties.

01:03:03.080 --> 01:03:03.310
Great.

01:03:03.500 --> 01:03:06.350
Let's make sure it's
actually working dynamic.

01:03:06.520 --> 01:03:08.480
And click on the Update button.

01:03:08.480 --> 01:03:11.540
We see our progress
indicator briefly come on,

01:03:11.580 --> 01:03:15.140
and the counts update.

01:03:15.190 --> 01:03:16.340
Well, there you have it.

01:03:16.360 --> 01:03:18.610
Back to slides, please.

01:03:23.440 --> 01:03:27.060
So let me just sum up about everything
that we've learned today in walking,

01:03:27.060 --> 01:03:28.700
running, and pole vaulting.

01:03:28.750 --> 01:03:30.300
You've learned a lot
about AppleScript Kit.

01:03:30.470 --> 01:03:34.600
We've worked with table views,
data sources, toolbars, idle handlers,

01:03:34.600 --> 01:03:36.680
drag and drop support, buttons.

01:03:36.890 --> 01:03:39.740
OK, well, yes, that was fairly obvious.

01:03:39.800 --> 01:03:41.360
In Interface Builder,
we've built our user

01:03:41.360 --> 01:03:42.630
interface in various forms.

01:03:42.690 --> 01:03:43.810
We've built new ones.

01:03:43.890 --> 01:03:46.040
We've updated existing nibs.

01:03:46.120 --> 01:03:50.180
We've learned how to control the
different user interface elements.

01:03:50.240 --> 01:03:52.850
We've attached lots of handlers
to the user interface elements to

01:03:52.850 --> 01:03:54.860
give them interesting behaviors.

01:03:54.940 --> 01:03:57.550
And within Xcode,
we've learned to create a new project,

01:03:57.840 --> 01:04:00.660
add a new file to a project,
how to actually write

01:04:00.740 --> 01:04:02.680
the code and compile.

01:04:02.790 --> 01:04:06.430
And we've learned how to add additional
functionality to a Cocoa application

01:04:06.430 --> 01:04:08.480
using AppleScript Studio.

01:04:10.700 --> 01:04:52.000
[Transcript missing]

01:04:57.180 --> 01:04:59.180
So again, the lab is immediately
following the session.

01:04:59.180 --> 01:05:02.300
We'll be making our
way over there shortly.

01:05:02.400 --> 01:05:05.240
If you have comments or
would like more information,

01:05:05.240 --> 01:05:06.950
Sal Segoian,
who's been prompting me from the

01:05:06.950 --> 01:05:10.140
audience whenever I forget something,
is our product manager.

01:05:10.180 --> 01:05:11.930
I'm the engineering manager.

01:05:12.070 --> 01:05:16.770
And we have a mailing list that you can
subscribe to and help each other out.

01:05:16.800 --> 01:05:19.870
And we monitor it as well,
that Apple hosts.

01:05:20.010 --> 01:05:23.460
And the conference website
has all the sample code.

01:05:23.460 --> 01:05:25.980
If you didn't download it
and work through it today,

01:05:25.980 --> 01:05:29.600
the references to the documentation,
and lots of other resources.