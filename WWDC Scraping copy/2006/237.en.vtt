WEBVTT

00:00:10.620 --> 00:00:11.740
Well, welcome everybody.

00:00:11.740 --> 00:00:15.430
This is the last session of the day and
we're going to talk about CUPS today.

00:00:15.450 --> 00:00:17.380
My name is Michael Sweet.

00:00:17.440 --> 00:00:20.640
I'm actually the guy behind
just about everything in CUPS.

00:00:20.640 --> 00:00:22.830
I have my own company,
it's Easy Software Products,

00:00:22.830 --> 00:00:29.420
and Apple uses me and licenses our
technology to make Mac OS printing

00:00:29.530 --> 00:00:31.680
work as well as it does.

00:00:32.470 --> 00:00:35.500
I want to start off by saying thank you.

00:00:35.570 --> 00:00:39.310
Everybody that's ever worked
on printing in Mac OS X has

00:00:39.310 --> 00:00:41.150
given us plenty of feedback.

00:00:41.250 --> 00:00:45.030
The things that you're doing in
printing on Mac OS X are incredible,

00:00:45.150 --> 00:00:47.380
and the envy of everybody
else in the open source world.

00:00:47.380 --> 00:00:49.550
So, thank you.

00:00:53.890 --> 00:00:56.490
To give some background on
CUPS before we get into the new

00:00:56.490 --> 00:01:02.170
stuff that's in the leopard seed,
we developed CUPS back in 1997.

00:01:02.300 --> 00:01:05.140
Basically,
we were doing Linux printing and

00:01:05.140 --> 00:01:10.740
UNIX printing for a long time and found
that what was there was pretty lacking.

00:01:10.800 --> 00:01:13.130
We were trying to find a way
to print a document and it

00:01:13.130 --> 00:01:14.400
was pretty hard to do that.

00:01:14.460 --> 00:01:17.870
You could spool a file and you might be
able to do some filtering of that data,

00:01:17.910 --> 00:01:20.690
but you really didn't have any
notion of a document or printer

00:01:20.690 --> 00:01:23.790
options and each of the operating
systems did their own thing.

00:01:23.820 --> 00:01:25.480
There was no commonality there.

00:01:25.480 --> 00:01:28.390
As a solution vendor,
there was just no way for us to support

00:01:28.390 --> 00:01:30.790
all of those different operating systems.

00:01:30.800 --> 00:01:33.720
In 1997, we just started doing CUPS.

00:01:33.720 --> 00:01:38.730
IPP, the Internet Printing Protocol,
was something that was just coming out.

00:01:38.800 --> 00:01:43.520
We decided to go with IPP and
design a really state-of-the-art

00:01:43.520 --> 00:01:45.800
printing system for UNIX.

00:01:45.800 --> 00:01:49.690
We provide CUPS under the GPL and
LGPL and Apple also licenses

00:01:49.690 --> 00:01:53.790
it so you guys can do pretty
much anything you want with CUPS.

00:01:53.800 --> 00:01:57.720
If you go on the CUPS website,
there's a lot of free stuff that

00:01:57.720 --> 00:02:01.420
you can add to the CUPS that
comes with Mac OS X to do things

00:02:01.420 --> 00:02:06.690
like printer accounting and
various other interesting stuff.

00:02:08.420 --> 00:02:11.390
Now, if you look at the history
of CUPS on Mac OS X,

00:02:11.640 --> 00:02:16.370
we joined the scene on 10.2 in Jaguar,
and there's been a steady

00:02:16.370 --> 00:02:21.760
progression of new versions as
new releases of Mac OS X came out.

00:02:21.950 --> 00:02:26.740
The Leopard C that you have has
the equivalent of CUPS 1.2.1 on it,

00:02:26.920 --> 00:02:29.860
and I'm sure as we go forward
there'll be newer versions.

00:02:30.040 --> 00:02:36.730
You can get the latest Mac OS X version
of CUPS on the CUPS website.

00:02:36.920 --> 00:02:39.480
That's something that we produce
that Apple doesn't support,

00:02:39.480 --> 00:02:41.500
but it's available if you
want to do some testing,

00:02:41.500 --> 00:02:42.860
even on Tiger.

00:02:42.860 --> 00:02:45.890
CUPS is, it's worth mentioning,
CUPS is the standard

00:02:45.890 --> 00:02:48.800
printing system on Linux,
and it's available on all

00:02:48.800 --> 00:02:50.190
the commercial Unixes.

00:02:50.190 --> 00:02:53.100
It's available on the BSDs
through the ports system.

00:02:53.100 --> 00:02:56.160
And just pretty much everybody
that really needs to do any

00:02:56.240 --> 00:02:58.100
kind of printing uses CUPS now.

00:02:58.320 --> 00:02:59.860
And my company does sell a lot
of the products that we have.

00:02:59.860 --> 00:03:02.790
We have all CUPS support,
CUPS consulting, driver writing services,

00:03:02.820 --> 00:03:03.360
and so forth.

00:03:03.360 --> 00:03:07.260
So if you need something
beyond what you get from Apple,

00:03:07.260 --> 00:03:09.800
we're available to fill the gap.

00:03:10.620 --> 00:03:14.820
Now CUPS itself is organized
around a scheduler program.

00:03:14.900 --> 00:03:19.140
If you look in the process list,
you'll see User Espen CUPS-D.

00:03:19.270 --> 00:03:21.870
We chose this kind of
architecture because it's simple

00:03:22.030 --> 00:03:25.840
and fast and very portable.

00:03:26.140 --> 00:03:28.980
On Mac OS X, it started on demand by
the launch D service,

00:03:28.980 --> 00:03:31.240
unless you're sharing printers,
in which case it actually has

00:03:31.240 --> 00:03:32.760
to run to share those printers.

00:03:32.790 --> 00:03:35.890
And the program itself is
very lightweight because

00:03:36.050 --> 00:03:36.960
it doesn't do a whole lot.

00:03:37.000 --> 00:03:39.150
It keeps track of the printers
that are on the system and the

00:03:39.210 --> 00:03:42.550
jobs that have been queued up,
but when it actually goes to do any work,

00:03:42.650 --> 00:03:46.540
it runs other programs to do that for it.

00:03:46.570 --> 00:03:50.940
Because of various security needs
for authentication and so forth,

00:03:50.970 --> 00:03:53.550
it has to run as a root user,
but whenever it can,

00:03:53.550 --> 00:03:55.790
it runs the other programs,
the helper programs,

00:03:55.820 --> 00:03:57.540
as an unprovenced user.

00:03:57.540 --> 00:04:01.230
And on Mac OS X,
that's the LP user account.

00:04:01.250 --> 00:04:03.840
Your applications,
whether you know it or not,

00:04:03.910 --> 00:04:05.900
are talking IPP to the scheduler.

00:04:05.990 --> 00:04:08.970
So when you go to print a file,
it's an IPP request, print job,

00:04:09.000 --> 00:04:11.960
and it actually spools
up the file for printing.

00:04:12.220 --> 00:04:14.550
Similarly,
when you go to show the printer

00:04:14.550 --> 00:04:18.650
dialogue and get the print settings,
it uses HTTP to get the PPD file

00:04:18.740 --> 00:04:20.760
that's associated with that printer.

00:04:20.780 --> 00:04:25.920
And, you know, as an aside,
the printers in Mac OS X and in CUPS use

00:04:26.110 --> 00:04:30.900
PostScript printer description files,
whether it's a PostScript printer or not.

00:04:30.900 --> 00:04:37.000
It's a de facto standard
description format for printing.

00:04:37.000 --> 00:04:38.990
So, you know,
if you're using PostScript printers

00:04:39.000 --> 00:04:41.000
in the industry,
you know,

00:04:41.000 --> 00:04:42.400
you use it for PostScript printers,
why not use it for

00:04:42.400 --> 00:04:43.630
non-PostScript printers too?

00:04:43.640 --> 00:04:47.550
And, you know, we just display all the
printer features from that.

00:04:48.510 --> 00:04:51.430
From the architecture,
you'll see an application

00:04:51.430 --> 00:04:54.710
can talk through Cocoa,
through the Print Manager API,

00:04:54.710 --> 00:04:58.290
or to CUPS, and all of that layers
through to get through to the

00:04:58.310 --> 00:05:01.860
scheduler using IPP and HTTP.

00:05:02.100 --> 00:05:05.060
Both the scheduler and the
application use the CUPS API,

00:05:05.060 --> 00:05:07.240
and if you were to look
at the scheduler code,

00:05:07.240 --> 00:05:10.380
you'll notice that most of the calls
it's making are the same calls that

00:05:10.380 --> 00:05:12.590
your application would be making.

00:05:14.420 --> 00:05:17.630
Now, once you submit a job for
printing from the print dialog,

00:05:17.810 --> 00:05:23.920
it gets stored in a spool file on disk
in the spool directory for the scheduler,

00:05:23.920 --> 00:05:27.640
and then it goes out to look what it
needs to do to actually print the job.

00:05:27.640 --> 00:05:31.510
There are several programs that
will get run for a print job.

00:05:31.540 --> 00:05:36.030
They're kind of classified as filters,
drivers, port monitors,

00:05:36.060 --> 00:05:39.960
which are something new in CUPS 1.2,
and backends that actually

00:05:39.960 --> 00:05:41.330
communicate with the printer.

00:05:41.340 --> 00:05:46.070
It runs the programs it needs to
to get the document file into a

00:05:46.070 --> 00:05:51.060
format the printer will accept,
and once it does that,

00:05:51.110 --> 00:05:52.650
your file gets actually printed.

00:05:52.680 --> 00:05:55.890
Once the job's been printed,
it removes the spool job file

00:05:56.010 --> 00:05:57.660
and moves on to the next one.

00:05:57.680 --> 00:06:01.760
For security reasons,
we run all the filters, drivers,

00:06:01.760 --> 00:06:05.660
and port monitors as the LP user,
so they can't actually do

00:06:05.660 --> 00:06:07.320
something to the system.

00:06:07.340 --> 00:06:09.840
But the backends
sometimes do run as root,

00:06:09.840 --> 00:06:11.340
because they may need
some sort of backup.

00:06:11.340 --> 00:06:13.440
So you can use some sort
of privileged resource,

00:06:13.450 --> 00:06:15.430
and we'll get into that
a little bit later,

00:06:15.430 --> 00:06:19.320
is how you can control whether
it's run as LP or as root.

00:06:20.340 --> 00:06:25.590
Now if we show it graphically,
an application submits a document and

00:06:25.590 --> 00:06:28.110
then CUPS runs a series of filters.

00:06:28.250 --> 00:06:35.430
So for a PDF document you might see
CGPDF to raster or CGPDF to PS that's

00:06:35.480 --> 00:06:39.260
run to convert that into an intermediate
format that the print driver can handle.

00:06:39.300 --> 00:06:43.720
The print driver is run for printers
that need more processing than say

00:06:43.720 --> 00:06:48.300
a PostScript printer where it could
take the PostScript data directly.

00:06:49.490 --> 00:06:52.570
And then the port monitor does
any additional encoding for the

00:06:52.570 --> 00:06:54.290
interface that you're using.

00:06:54.300 --> 00:06:58.780
So for example with a PostScript printer
you might use BCP or TBCP to

00:06:58.780 --> 00:07:02.300
encode the print data so you
can print raw binary data.

00:07:02.300 --> 00:07:08.300
It could also be used for doing
1284 packet framing and so forth.

00:07:08.300 --> 00:07:12.160
All that gets piped into the
back end which then communicates

00:07:12.160 --> 00:07:15.300
with the printer and the printer
starts printing something out.

00:07:15.300 --> 00:07:18.300
Now in CUPS 1.2 we also
have back channel support.

00:07:18.300 --> 00:07:23.490
So if the printer goes back and says
hey something's gone wrong or I'm low

00:07:23.490 --> 00:07:28.430
on ink or the paper tray is empty,
the back end can feed that data back

00:07:28.430 --> 00:07:31.300
to the port monitor and the driver.

00:07:31.300 --> 00:07:36.610
So either one of those can actually
handle the back channel data and actually

00:07:36.640 --> 00:07:39.300
inform the user what's gone wrong.

00:07:41.250 --> 00:07:45.590
Now beyond the local printing scenario,
printer sharing is very common.

00:07:45.600 --> 00:07:48.320
You have a laptop,
you have a desktop machine,

00:07:48.320 --> 00:07:51.580
a wireless network,
all that stuff at home.

00:07:51.580 --> 00:07:55.360
Or in the office environment,
you have a centralized print server,

00:07:55.360 --> 00:07:57.520
and you have all the client
machines you want to print to it.

00:07:57.580 --> 00:08:01.260
CUPS was designed from the
ground up to make that simple.

00:08:01.260 --> 00:08:05.380
Previously,
you'd have to manually add remote

00:08:05.380 --> 00:08:10.090
printers on a client machine,
and if you have 1,000 client machines,

00:08:10.180 --> 00:08:11.810
you've got to do that 1,000 times.

00:08:11.820 --> 00:08:14.830
We didn't want that to be the
user experience with CUPS.

00:08:14.840 --> 00:08:20.780
So from the very beginning,
we've had this idea that a CUPS server,

00:08:20.780 --> 00:08:23.000
the scheduler,
can simply share out its printers,

00:08:23.000 --> 00:08:25.500
and the clients will
automatically see those printers.

00:08:25.500 --> 00:08:27.860
In CUPS,
a server is just any system that's

00:08:27.860 --> 00:08:29.700
sharing one or more printers.

00:08:29.720 --> 00:08:33.740
So if you aren't sharing printers,
it's not visible to the network.

00:08:35.360 --> 00:08:40.080
What happens is the clients will forward
the jobs that are printed on the local

00:08:40.080 --> 00:08:43.440
application to the remote system,
wait for it to complete

00:08:43.440 --> 00:08:46.180
on the remote system,
and then remove its local copy.

00:08:46.210 --> 00:08:49.190
So if something goes wrong on the server,
your job isn't lost.

00:08:49.200 --> 00:08:52.200
It'll just get reprinted when
that printer comes back up.

00:08:52.200 --> 00:08:55.820
And something that's really unique
to CUPS is this notion of automatic

00:08:55.860 --> 00:08:58.200
load balancing and fail-safe printing.

00:08:58.200 --> 00:09:01.550
If you have more than one server
providing access to the same

00:09:01.550 --> 00:09:05.320
printer or even different printers
with the same capabilities,

00:09:05.440 --> 00:09:08.790
CUPS can automatically merge those,
or you can do it manually,

00:09:08.790 --> 00:09:11.810
so that you have a
round-robin printing approach,

00:09:11.920 --> 00:09:16.260
printer pooling, that when you print
to a particular queue,

00:09:16.260 --> 00:09:19.880
it goes to the next available
printer in that class.

00:09:20.200 --> 00:09:23.470
And if one of the servers goes down,
it automatically switches to another

00:09:23.590 --> 00:09:25.190
server to get that job printed.

00:09:25.200 --> 00:09:28.200
So it's very popular among
our enterprise customers.

00:09:28.200 --> 00:09:30.280
obviously you don't see
it too much in the home.

00:09:32.080 --> 00:09:36.450
And to show it graphically,
the scheduler on the client will

00:09:36.450 --> 00:09:40.530
run the IPP backend to communicate
with the scheduler on the server

00:09:40.680 --> 00:09:42.040
and get the print job done.

00:09:42.040 --> 00:09:44.440
And then the scheduler on
the server sends back a

00:09:44.440 --> 00:09:47.810
message to the client saying,
"This job is printed." And the

00:09:47.820 --> 00:09:53.560
IPP backend then informs
the scheduler on the client,

00:09:53.560 --> 00:09:53.560
"This job is completed.

00:09:53.560 --> 00:09:53.560
You can remove it."

00:09:55.860 --> 00:10:00.530
Now, in order to find these printers,
we actually have two different sharing

00:10:00.530 --> 00:10:03.700
protocols that are supported on Mac OS X.

00:10:03.700 --> 00:10:04.700
The first one is Bonjour.

00:10:04.700 --> 00:10:08.700
It's a lot newer and
it's available in Tiger.

00:10:08.700 --> 00:10:13.620
And basically,
it allows you to do it on the cheap.

00:10:13.710 --> 00:10:16.790
You can advertise that you
have a resource available,

00:10:16.800 --> 00:10:18.700
but until somebody
asks for that resource,

00:10:18.810 --> 00:10:21.700
it doesn't actually clutter up
the network with any packets.

00:10:21.700 --> 00:10:25.320
The other real advantage with
the Bonjour sharing is it doesn't

00:10:25.320 --> 00:10:28.700
depend on any infrastructure,
such as a domain name server.

00:10:28.700 --> 00:10:34.930
So if you have a home system
set up and you're calling it

00:10:34.930 --> 00:10:39.700
Mac Pro and you have your MacBook,
you can look at MacPro.local

00:10:39.700 --> 00:10:42.870
and it doesn't matter what
IP address has been assigned to it,

00:10:42.870 --> 00:10:43.700
it'll find it.

00:10:43.700 --> 00:10:45.690
Whereas with a traditional
managed network,

00:10:45.700 --> 00:10:48.540
you've got to know the IP address
or the fully qualified domain

00:10:48.540 --> 00:10:49.700
name or that sort of stuff.

00:10:49.700 --> 00:10:51.700
So Bonjour is really good.

00:10:51.700 --> 00:10:54.700
It's really great for the
unmanaged network situation,

00:10:54.700 --> 00:10:57.700
and it's really great when you don't
want to have a lot of network traffic.

00:10:57.700 --> 00:11:02.700
It's a default in Leopard,
and please test it out.

00:11:02.700 --> 00:11:06.620
On the other side of things
is our original CUPS protocol.

00:11:06.700 --> 00:11:09.860
It's what the Bonjour folks
would call chatty,

00:11:09.880 --> 00:11:12.700
in that it broadcasts
periodically to say,

00:11:12.760 --> 00:11:17.090
"I have these printers available," and
then expects the client systems on that

00:11:17.090 --> 00:11:20.690
network to pick up on that information
and then make it available to the user.

00:11:20.700 --> 00:11:22.700
It's a default in Tiger.

00:11:22.700 --> 00:11:24.690
It's still available in
Leopard if you need it.

00:11:24.700 --> 00:11:28.700
It's the only protocol that's supported
on non-Mac OS X clients at this time.

00:11:28.700 --> 00:11:33.340
And we find it most useful when
you have managed networks and large

00:11:33.340 --> 00:11:37.370
numbers of printers because the current
Bonjour implementation doesn't scale

00:11:37.370 --> 00:11:39.700
beyond about 300 printers on a server.

00:11:39.700 --> 00:11:41.700
And I'll show this a little graphically.

00:11:41.700 --> 00:11:45.700
The Bonjour printer sharing,
the client systems will send out a query,

00:11:45.700 --> 00:11:49.650
"I'm looking for a printer," and then
the server system's going to respond,

00:11:49.700 --> 00:11:53.500
"I have these printers," and then you'd
see it in the printer browser and select

00:11:53.690 --> 00:11:56.700
the printers that you want to use.

00:11:56.700 --> 00:11:58.700
The CUPS printer sharing architecture
is a little bit different,

00:11:58.700 --> 00:12:01.700
where the server system just announces,
"Hey, everybody,

00:12:01.700 --> 00:12:04.020
I've got all these printers,"
and then expects anybody that's

00:12:04.020 --> 00:12:08.700
on that network to listen and to
keep track of that information.

00:12:10.730 --> 00:12:12.630
Now,
when you're supporting non-CUPS printers,

00:12:12.630 --> 00:12:16.640
you're still back to that old, okay,
now I have to point it at the

00:12:16.660 --> 00:12:19.440
server and set up the remote queue.

00:12:19.440 --> 00:12:23.130
We do support that, though,
because we have a lot of customers

00:12:23.130 --> 00:12:25.120
that work with legacy clients.

00:12:25.120 --> 00:12:29.180
On the Windows side,
you can print via IPP or Samba,

00:12:29.180 --> 00:12:30.860
the SMB protocol.

00:12:30.860 --> 00:12:33.320
Both methods require a
Windows printer driver,

00:12:33.320 --> 00:12:37.970
and we do have a CUPS specific driver for
Windows available on the CUPS website.

00:12:37.990 --> 00:12:42.520
And you use several different
programs to access that.

00:12:42.520 --> 00:12:45.140
On the Samba side,
you use CUPS@SMB as a command

00:12:45.280 --> 00:12:48.550
line utility or the new web
interface to export your

00:12:48.560 --> 00:12:51.010
printers to the Windows clients.

00:12:51.050 --> 00:12:53.740
And for the Windows side,
if you're going to use IPP,

00:12:53.740 --> 00:12:58.340
we actually have a free Windows client
that you can download that will use

00:12:58.390 --> 00:13:01.250
IPP and that same CUPS driver to print.

00:13:03.060 --> 00:13:07.900
For the Samba method, you'll see the
Windows Print Service communicate

00:13:08.000 --> 00:13:11.210
with Samba via SMB,
and then Samba via the CUPS API will

00:13:11.210 --> 00:13:14.800
talk IPP to the scheduler to
actually get the job printed.

00:13:15.000 --> 00:13:19.320
It also does print status, printer lists,
and all that sort of

00:13:19.320 --> 00:13:21.170
stuff via that same API.

00:13:22.960 --> 00:13:27.250
For a Unix client,
you're going to use the LPD protocol.

00:13:27.260 --> 00:13:29.290
We have what we call
a mini-daemon program.

00:13:29.290 --> 00:13:30.800
It's CUPS LPD.

00:13:30.800 --> 00:13:33.490
It's normally run from
XINETD in the open source world,

00:13:33.500 --> 00:13:35.800
and that's what you get with Tiger.

00:13:35.800 --> 00:13:41.170
But in Leopard, we're now using LaunchD,
just the nice common server

00:13:41.670 --> 00:13:43.770
starter for Mac OS X.

00:13:43.780 --> 00:13:48.820
And basically, it handles all of the
LPD protocol stuff and converts

00:13:48.820 --> 00:13:51.260
it into IPP for the scheduler.

00:13:52.430 --> 00:13:55.820
Unix clients will typically use
an interface script or some other

00:13:55.820 --> 00:13:59.640
application-defined print driver
and send text or postscript,

00:13:59.640 --> 00:14:02.460
and then the Mac system can
interpret that and get it into

00:14:02.480 --> 00:14:04.920
something the print driver can print.

00:14:05.260 --> 00:14:08.760
Worth noting here is that the options,
because LPD doesn't

00:14:08.790 --> 00:14:11.660
support passing of options,
you have to specify them with

00:14:11.660 --> 00:14:16.050
the LP options command or in 1.2,
the LP admin command,

00:14:16.050 --> 00:14:20.780
so that the defaults are there for
whatever you want those users to do.

00:14:21.690 --> 00:14:23.540
And again, a little graphic.

00:14:23.540 --> 00:14:29.680
The UNIX Print Spooler will talk via
LPD to the CUPS daemon there for LPD.

00:14:29.840 --> 00:14:31.990
It will use the CUPS API to
talk to the scheduler,

00:14:32.110 --> 00:14:34.500
get the job printed,
show the printer status,

00:14:34.550 --> 00:14:36.310
all those sorts of things.

00:14:37.800 --> 00:16:19.000
[Transcript missing]

00:16:20.280 --> 00:16:23.050
Now, as a user,
there's two main things that you're

00:16:23.050 --> 00:16:27.200
going to see as improvements in 1.2.

00:16:27.200 --> 00:16:30.190
The first one is that printer
sharing works a whole lot better.

00:16:30.450 --> 00:16:32.800
Before,
every time you rebooted your system,

00:16:32.800 --> 00:16:35.150
you'd kind of start from scratch.

00:16:35.190 --> 00:16:37.860
Your shared printers would
appear and disappear,

00:16:37.860 --> 00:16:40.700
and it just wasn't a
great user experience.

00:16:40.770 --> 00:16:45.340
So you've added a cache to that
that keeps those printers available,

00:16:45.340 --> 00:16:49.190
so you don't have that
disappearing printer problem.

00:16:49.200 --> 00:16:52.700
But if you do change networks,
you go to an internet cafe or something,

00:16:52.820 --> 00:16:55.350
then any of those shared
printers from the previous

00:16:55.370 --> 00:16:57.200
network are going to disappear.

00:16:57.200 --> 00:17:01.940
On the printer setting side of things,
we now support PPD files

00:17:01.960 --> 00:17:04.180
with multiple languages.

00:17:04.180 --> 00:17:07.900
So for you driver developers,
this means you can ship one

00:17:07.980 --> 00:17:14.190
PPD to support 20 languages,
and you can have the same PPD support

00:17:14.290 --> 00:17:18.170
users with reading different languages.

00:17:18.240 --> 00:17:20.290
So you can have a printer that's
going to be able to read the same

00:17:20.290 --> 00:17:21.500
language as you do in your office.

00:17:21.600 --> 00:17:23.270
Somebody reads French,
somebody reads English,

00:17:23.280 --> 00:17:24.130
somebody does German.

00:17:24.130 --> 00:17:26.810
You don't have to decide on a common one,
English, just because that's the only

00:17:26.870 --> 00:17:28.200
one that you can all agree on.

00:17:28.200 --> 00:17:31.170
You can actually all have
the language of your choice.

00:17:31.200 --> 00:17:35.370
The generic PostScript printer
PPD that's included with the

00:17:35.490 --> 00:17:40.200
Leopard seed does include languages
for all the supported locales,

00:17:40.200 --> 00:17:45.210
and whenever you install a printer,
you plug it in, it's now going to use

00:17:45.210 --> 00:17:47.190
the correct language.

00:17:47.200 --> 00:17:53.200
And support all of them rather
than just the default language.

00:17:53.200 --> 00:17:58.000
When you do the options in your driver,
you can now provide custom options

00:17:58.010 --> 00:18:00.170
without writing a custom PDE.

00:18:00.400 --> 00:18:04.900
The crux of this is basically
we have certain developers

00:18:04.900 --> 00:18:10.160
where you need a passcode or a
type in option for a watermark.

00:18:10.200 --> 00:18:13.980
And I'll show examples of those in a
little bit that you don't just want

00:18:13.980 --> 00:18:16.200
to have a bunch of standard choices.

00:18:16.200 --> 00:18:18.200
You want to actually have
the user type those in.

00:18:18.330 --> 00:18:21.070
So you can now do that,
and the user will now have the

00:18:21.070 --> 00:18:25.190
ability to select that without
having to go to a separate PDE panel.

00:18:27.020 --> 00:18:29.080
Now, if you're an administrator,
we've added a whole

00:18:29.100 --> 00:18:30.840
bunch of stuff for you.

00:18:30.870 --> 00:18:33.690
The biggest one,
the number one that we kept getting

00:18:33.690 --> 00:18:35.890
requests for was IP version 6 support.

00:18:35.900 --> 00:18:40.460
It's flung through the whole system,
and the only thing that doesn't

00:18:40.460 --> 00:18:44.900
use IP version 6 right now is
the CUPS protocol for browsing,

00:18:44.900 --> 00:18:48.900
but if you use the Bonjour,
you get IP version 6 there.

00:18:48.900 --> 00:18:51.680
We also added support for
automatic SSL detection,

00:18:51.690 --> 00:18:54.830
so instead of having a separate
port number for your encrypted

00:18:55.040 --> 00:18:59.160
versus non-encrypted traffic,
you can now do it over

00:18:59.160 --> 00:19:03.100
the same port number,
so you get the advantages of the

00:19:03.100 --> 00:19:07.680
automatic upgrade to encrypted status,
whether you're on a web

00:19:07.720 --> 00:19:09.970
browser or in a CUPS client.

00:19:10.310 --> 00:19:14.720
For printer sharing,
we now support server-side

00:19:14.760 --> 00:19:17.010
defaults and timeouts.

00:19:17.580 --> 00:19:22.400
So when you're configuring
your printers on the server,

00:19:22.440 --> 00:19:28.170
you can actually say the default for
the page label or for the job hold

00:19:28.170 --> 00:19:30.410
until is now this specific value.

00:19:30.460 --> 00:19:33.470
That gets out to all the clients,
so they immediately

00:19:33.580 --> 00:19:35.180
will use that as well.

00:19:35.810 --> 00:19:37.810
Previously,
you would have to run LP options on

00:19:37.810 --> 00:19:43.200
every system and hope that those options
would be honored in all applications.

00:19:43.200 --> 00:19:48.550
The timeout allows you to specify
a different browse timeout with

00:19:48.570 --> 00:19:51.200
the CUPS browsing protocol.

00:19:51.200 --> 00:19:53.080
And basically, before,
you'd have to change the

00:19:53.080 --> 00:19:54.200
timeout on every client.

00:19:54.200 --> 00:19:58.560
Now you can just change it on the server
to what's appropriate for that server,

00:19:58.560 --> 00:20:01.830
and the clients will use that
timeout when they're figuring

00:20:01.860 --> 00:20:03.890
out when to get rid of a printer.

00:20:04.370 --> 00:20:08.790
The last thing here on the slide is
SNMP based network printer detection.

00:20:09.260 --> 00:20:12.300
What's in 1.2 is the first attempt.

00:20:12.300 --> 00:20:16.060
We have a lot of feedback and
I encourage you to provide more

00:20:16.060 --> 00:20:21.050
feedback if you don't see your point
being made in the bug database.

00:20:22.300 --> 00:20:25.080
But basically now it will
find any printer that uses

00:20:25.080 --> 00:20:30.050
the host MIB and automatically
show it in the web interface,

00:20:30.050 --> 00:20:34.300
in the GUIs, and on the command line when
you want to find a printer.

00:20:34.300 --> 00:20:39.310
We're going to be updating it
some more to deal with some edge

00:20:39.310 --> 00:20:45.300
cases and also to not advertise a
printer via both Bonjour and SNMP.

00:20:45.480 --> 00:20:48.210
Because of that, we're looking at this as
a supplement to Bonjour.

00:20:48.310 --> 00:20:50.160
All the printers don't support it,
so we still want to give

00:20:50.160 --> 00:20:51.260
the user a chance to use it.

00:20:51.330 --> 00:20:53.660
We want to give the user the ability to
find their printers easily rather than

00:20:53.660 --> 00:20:57.300
going to the printer and hitting the
test page on the printer to get that.

00:20:57.300 --> 00:21:01.300
The local device detection all
works in with this as well.

00:21:01.300 --> 00:21:04.980
So basically any new printer that
gets added on the network or on the

00:21:04.980 --> 00:21:07.300
local machine is detected by CUPS now.

00:21:09.230 --> 00:21:14.460
So, you saw the printer browser on the
previous presentation if you were here.

00:21:14.620 --> 00:21:19.270
Basically, you can now see all the
printers for individual

00:21:19.270 --> 00:21:21.500
protocols or for all protocols.

00:21:21.610 --> 00:21:23.730
You can filter and search and everything.

00:21:23.860 --> 00:21:30.410
This is all made possible by all of the
infrastructure in CUPS to find devices.

00:21:33.200 --> 00:21:36.850
Now, if you're a power user or an
administrator that has to manage

00:21:36.860 --> 00:21:41.410
a lot of different systems,
you may have looked at the web interface.

00:21:41.440 --> 00:21:44.630
It's pretty much the one that everybody
depends on in the open source world,

00:21:44.630 --> 00:21:48.430
but it's something that's available
if you're going to want to use it.

00:21:48.440 --> 00:21:53.190
I'm going to show you some of the
new features in the web interface.

00:21:53.570 --> 00:21:56.540
Big things we have new online
help systems searchable and

00:21:56.600 --> 00:21:59.940
you can extend it if you like.

00:21:59.940 --> 00:22:03.180
All of the pages are searchable,
pageable,

00:22:03.180 --> 00:22:06.180
and you can change the order of things.

00:22:06.180 --> 00:22:08.460
Because of the new network
printer discovery support,

00:22:08.460 --> 00:22:14.260
we can now support things like add this
printer and it will add the printer.

00:22:14.260 --> 00:22:17.550
And over the years we've gotten the same
question from many different people.

00:22:17.550 --> 00:22:18.700
How do I turn on debugging?

00:22:18.810 --> 00:22:20.830
How do I allow people
to print to my system?

00:22:20.930 --> 00:22:22.260
How do I enable sharing?

00:22:22.590 --> 00:22:25.110
Those are now just check
boxes that you can do and will

00:22:25.280 --> 00:22:27.680
automatically set those things up.

00:22:27.710 --> 00:22:30.710
And finally,
we're now integrated better with Samba.

00:22:30.720 --> 00:22:33.110
So instead of having to
use the command line,

00:22:33.130 --> 00:22:37.160
you can do it all from the web interface
and you get all the same benefits.

00:22:39.540 --> 00:22:43.350
Now, the help system is pretty basic.

00:22:43.460 --> 00:22:45.380
You have a search bar at the top.

00:22:45.600 --> 00:22:48.700
You have a topic section on the side.

00:22:48.860 --> 00:22:52.500
And every time you go into a document,
that expands and shows you the

00:22:52.600 --> 00:22:58.150
current documents table of contents,
the current section,

00:22:58.150 --> 00:22:59.460
what documents are in it,
and all the sections that are available.

00:23:00.310 --> 00:23:04.120
Now, the help system is pretty basic.

00:23:04.120 --> 00:23:06.260
You have a search bar at the top.

00:23:06.260 --> 00:23:09.520
You have a topic section on the side.

00:23:09.520 --> 00:23:12.690
And every time you go into a document,
that expands and shows

00:23:12.740 --> 00:23:16.210
you the current documents,
table of contents, the current section,

00:23:16.320 --> 00:23:20.070
what documents are in it,
and all the sections that are available.

00:23:30.200 --> 00:23:33.930
Printers is a button that
says export printer to Samba.

00:23:34.130 --> 00:23:37.300
And basically, that's the equivalent of
the CUPS add SMB command,

00:23:37.300 --> 00:23:39.000
but through the web interface.

00:23:39.020 --> 00:23:43.020
Gives you a nice little list of printers,
and you can export all

00:23:43.080 --> 00:23:44.800
of them if you'd like.

00:23:44.900 --> 00:23:50.850
There's direct access now via HTTP to the
CUPSd.conf file and all the log files.

00:23:50.920 --> 00:23:54.900
They are also access controlled,
so if you want only people

00:23:54.900 --> 00:23:57.110
that have certain privileges,
they will get a challenge for

00:23:57.110 --> 00:23:58.900
the password and all that stuff.

00:23:58.900 --> 00:24:02.910
And you can limit it to only your
network or particular IPs if you

00:24:02.910 --> 00:24:04.830
would like to do it that way.

00:24:04.900 --> 00:24:07.900
Right underneath that
is the simple settings,

00:24:07.900 --> 00:24:09.750
and right now there's five items there.

00:24:10.170 --> 00:24:12.820
Just to run through them quick,
show the printers that are

00:24:12.820 --> 00:24:14.900
available on other servers,
that's a default.

00:24:14.900 --> 00:24:17.900
Share the printers that I've got.

00:24:18.090 --> 00:24:21.900
Allow other users to cancel your jobs.

00:24:21.900 --> 00:24:25.640
Allow remote administration,
so if you want to set up a

00:24:25.690 --> 00:24:28.900
bunch of servers and have them
allow remote administration,

00:24:28.900 --> 00:24:31.880
you just check that and then, you know,
that's the only change you need to do.

00:24:31.960 --> 00:24:34.890
And then the last one,
enable debug logging,

00:24:34.890 --> 00:24:37.900
allows you to track down
problems more easily.

00:24:37.930 --> 00:24:39.900
And if you're doing tech
support for your team,

00:24:39.900 --> 00:24:41.870
and you have a lot of users and they
don't know why things aren't working,

00:24:41.910 --> 00:24:44.890
you can just say, "Click on this and then
we'll look at the log file."

00:24:47.340 --> 00:24:50.740
Now, underneath the printers there,
you have the standard operations,

00:24:50.740 --> 00:24:53.700
but then it also shows you
when it finds new devices.

00:24:53.700 --> 00:24:57.590
And the way it does this is it goes out,
sees what devices are available,

00:24:57.590 --> 00:25:01.660
and sees what devices have been added,
and then gives you the list of stuff

00:25:01.660 --> 00:25:05.960
that hasn't been added that actually
has a make and model associated with it.

00:25:05.960 --> 00:25:08.300
Each one will have a
little button that says,

00:25:08.310 --> 00:25:11.300
"Add this printer."
When you click on that,

00:25:11.300 --> 00:25:15.360
it takes you right to the
make and model selection page,

00:25:15.360 --> 00:25:18.350
and it'll preselect the driver
if you have it available.

00:25:18.360 --> 00:25:21.160
It chooses the best
match for the printer.

00:25:21.160 --> 00:25:24.660
You click "Add Printer," and
you get your printer page.

00:25:24.660 --> 00:25:27.990
So it's very quick to
add network printers now.

00:25:28.390 --> 00:25:32.290
Similar experience in Mac OS X,
and we're trying to have

00:25:32.290 --> 00:25:36.670
feature parity between the GUI,
the command line, and the web interface.

00:25:36.720 --> 00:25:39.670
So I think we're getting
a lot closer with that.

00:25:40.110 --> 00:25:44.190
As you notice in here,
the job information for a

00:25:44.260 --> 00:25:48.240
particular printer is now
searchable and pageable as well.

00:25:48.240 --> 00:25:50.450
There aren't any jobs in
this particular screenshot.

00:25:50.460 --> 00:25:54.580
And we've also added the ability
to show the completed jobs,

00:25:54.710 --> 00:25:57.510
the active jobs,
and all jobs in the system.

00:25:57.670 --> 00:26:00.090
So as soon as you click
on Show Completed Jobs,

00:26:00.090 --> 00:26:04.370
it'll show you from the most
recent to the least recent.

00:26:04.460 --> 00:26:07.400
You click on Active Jobs,
it shows you the next job that's

00:26:07.400 --> 00:26:12.380
going to be printed and all jobs,
it does so as well.

00:26:14.690 --> 00:26:17.780
Now, we've had a lot of requests
from people saying,

00:26:17.780 --> 00:26:21.690
"I want to not stop the printer
when something goes wrong

00:26:21.720 --> 00:26:25.840
talking to it." So we've added
per-printer error policies.

00:26:25.840 --> 00:26:31.090
This feature is probably going
to be expanded again in CUPS 1.3.

00:26:31.180 --> 00:26:33.830
We have three basic policies right now.

00:26:33.980 --> 00:26:37.120
You can stop the printer, the default,
and that's what we did before.

00:26:37.300 --> 00:26:40.090
You can tell it to retry the job,
and the way that works is

00:26:40.160 --> 00:26:41.640
just like with a fax queue.

00:26:41.710 --> 00:26:44.840
It'll keep retrying for a certain
number of times at a certain interval,

00:26:44.840 --> 00:26:46.830
and when it finally
can't get to the printer,

00:26:46.840 --> 00:26:49.240
it'll give up on it and cancel the job.

00:26:49.320 --> 00:26:51.230
Or you can just say,
"Cancel the job right away.

00:26:51.240 --> 00:26:53.830
I don't want the queue to
fill up." So that's available

00:26:53.830 --> 00:26:55.050
through the web interface.

00:26:55.140 --> 00:26:58.650
It's available through the command line,
and you can set it to any

00:26:58.840 --> 00:27:00.970
one of those three right now.

00:27:01.140 --> 00:27:02.980
There'll be more later.

00:27:03.450 --> 00:27:06.960
Another common complaint has
been that you can't configure

00:27:07.390 --> 00:27:10.060
what individual users can do.

00:27:10.080 --> 00:27:12.260
Over the years,
people have gotten in the habit

00:27:12.260 --> 00:27:16.400
of putting in location lines
in their Cupsd.conf and saying,

00:27:16.420 --> 00:27:20.440
OK, for this web interface
task to start a printer,

00:27:20.490 --> 00:27:23.890
I want to have this
particular set of permissions.

00:27:23.930 --> 00:27:26.500
And the problem with that is only
applied to the web interface.

00:27:26.500 --> 00:27:29.270
It didn't affect the
command line or the GUI.

00:27:29.380 --> 00:27:33.400
So what we've done is we've
come up with a replacement for

00:27:33.400 --> 00:27:35.710
that mechanism called policies.

00:27:35.910 --> 00:27:38.790
And what you basically do is
you create a policy with a name,

00:27:38.820 --> 00:27:43.110
and then you use all the
same sort of location-based

00:27:43.400 --> 00:27:48.440
access control lines-- allow,
deny, require, and so forth-- for

00:27:48.440 --> 00:27:50.540
individual IPP operations.

00:27:50.690 --> 00:27:52.740
So you can say,
I want all users to be able to

00:27:52.740 --> 00:27:55.050
print and start and stop printers,
but I don't want them to

00:27:55.060 --> 00:27:56.760
be able to add a printer.

00:27:56.780 --> 00:27:59.130
Now,
each printer can have its own policy.

00:27:59.380 --> 00:28:02.700
And then there's a default policy that's
used for the server-level operations,

00:28:02.700 --> 00:28:05.090
such as adding and deleting printers.

00:28:06.240 --> 00:28:09.650
Now, we have a little sample policy,
really simple.

00:28:09.800 --> 00:28:13.240
Only thing we want to do is
limit send document to the person

00:28:13.340 --> 00:28:14.710
that actually created the job.

00:28:14.740 --> 00:28:17.290
So we don't want somebody
piggybacking on somebody else's jobs,

00:28:17.440 --> 00:28:19.660
but other than that,
they can do just about

00:28:19.660 --> 00:28:20.940
anything they want.

00:28:21.120 --> 00:28:25.470
So you put this in the CUPSd.com file,
which you could do

00:28:25.470 --> 00:28:29.770
through the web interface,
and then select that policy

00:28:29.830 --> 00:28:30.860
for that particular printer,
which you can also do

00:28:30.860 --> 00:28:30.860
from the web interface.

00:28:31.970 --> 00:28:36.380
We get a lot of questions on
the CUPS forums about the log

00:28:36.380 --> 00:28:39.900
messages that they're seeing in
the access log in particular.

00:28:40.040 --> 00:28:42.810
Why do I see a post every five seconds?

00:28:42.980 --> 00:28:44.880
Any number of things.

00:28:44.930 --> 00:28:46.900
And you just don't know
what's going on there.

00:28:46.950 --> 00:28:50.840
Well, we extended the access log format a
little bit to add the IPP operation

00:28:50.930 --> 00:28:55.890
and status code from that operation
to any posts that are IPP operations.

00:28:55.900 --> 00:29:00.820
So now, if you look in your access log,
you'll see get default and

00:29:00.890 --> 00:29:03.840
get printers and so forth and
whatever status they return.

00:29:03.930 --> 00:29:07.360
So you know kind of what's going
on in the system without having

00:29:07.360 --> 00:29:09.400
to delve into the error log file.

00:29:10.380 --> 00:29:14.430
If you're supporting LPD clients,
we now support banner pages and

00:29:14.460 --> 00:29:19.470
multi-file LPD jobs are now created
as a single CUPS or IPP job rather

00:29:19.470 --> 00:29:22.350
than a series of individual ones.

00:29:22.440 --> 00:29:27.810
That should make things work a whole lot
more consistently within your environment

00:29:27.810 --> 00:29:33.460
and that way too you don't have people's
jobs getting mixed in with others.

00:29:35.670 --> 00:29:38.690
And if you're trying to track
jobs on multiple servers,

00:29:38.690 --> 00:29:40.740
we've added two new
attributes to handle that.

00:29:40.930 --> 00:29:42.870
One is the job UUID attribute.

00:29:43.080 --> 00:29:49.600
It's UUID as defined by the RFC.

00:29:49.690 --> 00:29:52.370
Basically,
it gives you a unique ID to track

00:29:52.470 --> 00:29:56.340
that job throughout the network,
over the Internet, anywhere the job goes,

00:29:56.400 --> 00:30:00.000
it's included in any transactions.

00:30:00.060 --> 00:30:03.380
The other attribute is the
job actual printer URI,

00:30:03.390 --> 00:30:06.800
and the difference between that
and the job printer URI is that it

00:30:06.800 --> 00:30:11.200
actually corresponds to the printer
that printed the job versus printing

00:30:11.200 --> 00:30:16.090
to a class and then it gets sent
off to some other printer or server.

00:30:18.910 --> 00:30:23.980
For you CUPS developers,
general improvements in all of the APIs,

00:30:24.060 --> 00:30:25.900
they're all now thread-safe.

00:30:25.900 --> 00:30:30.210
We added thread safety fairly late
in the 1.2 development process,

00:30:30.330 --> 00:30:34.330
but it's been in various states
in Tiger as well and 1.1.

00:30:34.480 --> 00:30:38.100
And basically, now whenever you're doing
a threaded application,

00:30:38.110 --> 00:30:42.820
you can feel pretty safe that
you're not going to have any issues.

00:30:42.970 --> 00:30:46.690
The only thing you have to be
careful about is if you're sharing

00:30:46.760 --> 00:30:50.280
data structures between threads,
that we don't guarantee that thread

00:30:50.280 --> 00:30:56.000
safety just for function calls and
using your own connections and so forth.

00:30:56.250 --> 00:31:00.930
For URIs, we found that, you know,
every release we would come out

00:31:00.930 --> 00:31:06.010
with a new rev of the URI APIs,
and we finally came up with a generic

00:31:06.010 --> 00:31:09.990
enough API that will work for all
special cases that we could come up with.

00:31:10.090 --> 00:31:12.800
So you want to look at
the HTTP Assemble URI,

00:31:12.800 --> 00:31:16.210
and separate URI APIs if
you're going to be dealing with

00:31:16.220 --> 00:31:17.690
printer URIs in particular.

00:31:17.700 --> 00:31:19.900
They handle all of the
internationalization issues

00:31:19.900 --> 00:31:26.400
with doing percent encoding for
international characters in the URIs,

00:31:26.400 --> 00:31:31.100
any specific issues
with encoding for you.

00:31:31.100 --> 00:31:34.310
And when you pull them apart,
you can also specify that

00:31:34.310 --> 00:31:39.170
you want certain parts of the
URI encoded or decoded as needed.

00:31:39.310 --> 00:31:42.700
They also support some error checking,
so if you have a URI,

00:31:42.700 --> 00:31:44.870
you're not sure about,
you can use the separate

00:31:44.870 --> 00:31:48.300
URI API to validate that URI,
and we use that within

00:31:48.300 --> 00:31:50.900
CUPS pretty extensively.

00:31:50.900 --> 00:31:55.700
There's new address APIs to handle
all the different address formats.

00:31:55.700 --> 00:31:58.090
Previously,
we just did IP version 4 throughout,

00:31:58.090 --> 00:32:01.670
and it was pretty limiting,
so we came up with a generic address

00:32:01.840 --> 00:32:05.700
structure that encapsulated all
the formats that we support and

00:32:05.700 --> 00:32:07.900
in the future that we could add.

00:32:07.900 --> 00:32:12.600
So if you're doing any kind of
address manipulation with CUPS,

00:32:12.630 --> 00:32:13.600
use these APIs.

00:32:13.600 --> 00:32:14.510
They'll save you a lot of time.

00:32:14.630 --> 00:32:18.100
They handle IP version 4, version 6,
and domain sockets right now.

00:32:18.100 --> 00:32:20.720
And if in the future we come
up with some other network

00:32:20.720 --> 00:32:24.560
protocol that we need to support,
that'll get rolled into that

00:32:24.560 --> 00:32:27.100
without any changes to your code.

00:32:27.300 --> 00:32:32.900
We're also in the process of making
the HTTP type structure private.

00:32:32.900 --> 00:32:37.000
In the 1.2, it is still available,
but it's historically been

00:32:37.000 --> 00:32:40.200
marked as a private structure,
but just in the public header.

00:32:40.200 --> 00:32:42.500
Because of the changes we
had to make for large-scale,

00:32:42.500 --> 00:32:45.580
large file support,
while we've been able to keep

00:32:45.730 --> 00:32:51.000
the structure binary compatible,
for application developers,

00:32:51.000 --> 00:32:53.260
as we go forward,
we want to make sure that you

00:32:53.320 --> 00:32:57.290
can just keep coding to the
interface and not to the structure.

00:32:57.430 --> 00:33:00.670
So there's new accessor APIs for
all of the data that's in

00:33:00.670 --> 00:33:02.450
the connection structure.

00:33:02.590 --> 00:33:05.600
Use those instead of
accessing it directly.

00:33:05.830 --> 00:33:08.560
We've had some problems on the
open source side with that,

00:33:08.650 --> 00:33:12.400
but I think it should
be pretty well resolved.

00:33:12.400 --> 00:33:16.100
On the IPP side,
there's new convenience APIs for

00:33:16.100 --> 00:33:17.880
creating attributes and requests.

00:33:17.900 --> 00:33:23.890
If you're doing a lot of attribute
creation or request creation,

00:33:23.900 --> 00:33:27.860
you'll probably find that using those new
functions will save you a lot of code.

00:33:27.900 --> 00:33:31.590
The IPP new request
function is part of that,

00:33:31.590 --> 00:33:34.400
and when we switched to using
that within the CUPS source tree,

00:33:34.400 --> 00:33:36.390
we cut down about 1,200 lines of code.

00:33:36.400 --> 00:33:38.390
So a pretty significant savings.

00:33:38.400 --> 00:33:43.810
One of the nice things in CUPS 1.2
is now you get an actual error

00:33:43.810 --> 00:33:46.780
message along with the status code.

00:33:46.860 --> 00:33:49.790
That's exposed with the
CUPS last error string API.

00:33:49.800 --> 00:33:54.300
So anytime you do an IPP request,
it will set the CUPS last error

00:33:54.300 --> 00:33:59.310
and CUPS last error string value,
and you can use that rather than trying

00:33:59.430 --> 00:34:03.580
to fish through the attributes to find
the status message attribute and display

00:34:03.660 --> 00:34:06.300
an actual error message to the user.

00:34:06.300 --> 00:34:08.300
Now instead of just
client error not found,

00:34:08.300 --> 00:34:12.200
you're going to see
printer foo doesn't exist.

00:34:14.410 --> 00:34:17.720
IPP notifications are something
that the printer working group has

00:34:17.720 --> 00:34:20.300
been developing for quite some time.

00:34:20.300 --> 00:34:25.260
They finally got standardized last
year and basically it was one of

00:34:25.260 --> 00:34:30.030
the big features that we wanted to
get into CUPS 1.2 because it gets

00:34:30.030 --> 00:34:35.290
away from polling for status to
notify me when something has changed.

00:34:36.400 --> 00:34:38.250
Excuse me.

00:34:38.430 --> 00:34:42.540
The way it's implemented in CUPS is
that we have a series of notifier

00:34:42.540 --> 00:34:49.270
helper programs that are run to deliver
any event messages to the recipient.

00:34:49.290 --> 00:34:53.770
We include an email
notifier with CUPS 1.2.

00:34:53.850 --> 00:34:58.050
But because in the Mac OS world,
you're typically using some

00:34:58.050 --> 00:35:02.020
sort of a POP or IMAP account,
it's not all that useful unless

00:35:02.020 --> 00:35:04.310
you have your own mail server.

00:35:04.470 --> 00:35:08.810
There's a mailto.conf file that
you can look at that defines all of

00:35:08.810 --> 00:35:11.800
the configuration options for that.

00:35:11.800 --> 00:35:15.600
Once it's configured,
it works really well.

00:35:15.630 --> 00:35:20.270
Because there's no way to use that
standard email notification mechanism,

00:35:20.470 --> 00:35:23.950
there's no user interface
exposed in Mac OS X.

00:35:24.080 --> 00:35:30.640
But a PDE can add the notify events
and notify recipient URI attributes in

00:35:30.740 --> 00:35:37.920
your print settings to actually get a
notification created with the print job.

00:35:37.920 --> 00:35:42.650
This might be used for communicating
with your own desktop application

00:35:42.650 --> 00:35:46.650
that is providing some additional
feedback to the user to do manual

00:35:46.650 --> 00:35:49.490
duplexing or something of that nature.

00:35:49.760 --> 00:35:54.510
In order to support notifiers,
we have two APIs,

00:35:54.610 --> 00:35:56.420
notify subject and notify text.

00:35:56.590 --> 00:35:58.990
They give you a standard message
that you can feed to the user

00:35:59.550 --> 00:36:01.840
based on an event message.

00:36:02.060 --> 00:36:05.700
And that, combined with writing a little
notifier program that goes in

00:36:05.770 --> 00:36:09.480
the directory called notifier,
you can actually have your

00:36:09.480 --> 00:36:12.170
own notifiers communicate
with the user in various ways,

00:36:12.170 --> 00:36:16.230
instant messaging, paging,
whatever the case may be.

00:36:17.870 --> 00:36:23.400
For the PPD API, and that's now more
exposed in the top levels,

00:36:23.590 --> 00:36:26.940
there's a new function to handle
the multi-language PPD files.

00:36:27.080 --> 00:36:31.090
You run PPD localize,
and it localizes the PPD file to

00:36:31.090 --> 00:36:33.800
your current language preference.

00:36:49.780 --> 00:36:49.800
And we decided on using UTF-8 throughout
because it's nice and compatible

00:36:49.800 --> 00:36:49.800
with the ISO Latin one and so forth
that's normally used in the PPD world.

00:36:49.800 --> 00:36:49.800
And it's compact enough
for what we need it for.

00:36:50.540 --> 00:36:53.660
For the custom PPD options,
there's some new

00:36:53.660 --> 00:36:55.610
functions to access those.

00:36:55.950 --> 00:36:59.490
We modeled it off of the custom
page size mechanism that's

00:36:59.490 --> 00:37:01.800
already present in the PPD spec.

00:37:02.180 --> 00:37:03.800
And you can do integers, read, and paste.

00:37:04.800 --> 00:37:06.690
So we have fields, curves, dimensions,
strings, passcodes, and passwords.

00:37:06.810 --> 00:37:07.800
Some of those are new.

00:37:07.800 --> 00:37:11.790
The passcodes, passwords,
and curves are non-standard

00:37:11.790 --> 00:37:15.310
extensions to the Adobe spec,
but basically allow you to

00:37:15.310 --> 00:37:16.800
have different kinds of input.

00:37:17.610 --> 00:37:22.290
The curve is just a standard power
curve that you could drag and

00:37:22.290 --> 00:37:24.770
have the user select that way.

00:37:24.790 --> 00:37:28.800
And then the passcodes and passwords
are non-visible text fields.

00:37:28.800 --> 00:37:32.790
Passcodes for numeric stuff,
passwords for alphanumeric.

00:37:34.910 --> 00:37:37.070
What we're recommending to
developers is use these in

00:37:37.070 --> 00:37:38.800
conjunction with standard options.

00:37:38.800 --> 00:37:43.790
So for example, a watermark option,
you might have draft, confidential,

00:37:43.790 --> 00:37:46.800
and so forth standard options,
and then provide a custom option

00:37:46.800 --> 00:37:48.800
where they can enter their own text.

00:37:49.900 --> 00:37:52.800
There's new APIs to access the
options and the parameters,

00:37:52.800 --> 00:37:56.800
and each of the options can have one
or more parameters associated with it.

00:37:56.800 --> 00:37:59.300
You'll see that in a sec.

00:37:59.690 --> 00:38:04.780
Now, here's an example of a custom
option that uses PGL to implement

00:38:04.780 --> 00:38:06.840
a passcode feature on a printer.

00:38:06.990 --> 00:38:11.010
Now, as you can see,
we have the normal option code in the

00:38:11.010 --> 00:38:13.770
PPD file for that passcode option.

00:38:14.100 --> 00:38:20.420
And there's four standard options:
none for no code, and then 1111, 2222,

00:38:20.420 --> 00:38:21.620
and 3333.

00:38:21.920 --> 00:38:25.240
Obviously, users don't necessarily want
to use those passcodes because

00:38:25.240 --> 00:38:28.630
they're not particularly secure,
and if everybody's using the same one,

00:38:28.630 --> 00:38:29.840
then what's the point?

00:38:29.840 --> 00:38:38.840
So you add the custom JCL passcode option
in there to specify the command to run.

00:38:38.840 --> 00:38:42.840
And if you notice in there,
there is a backslash 1 in that code.

00:38:42.840 --> 00:38:46.840
That's used to substitute the
value in for the PGL option.

00:38:46.840 --> 00:38:50.840
The param custom JCL passcode
line just gives you the parameter

00:38:50.840 --> 00:38:52.840
for this particular option.

00:38:52.840 --> 00:38:56.430
Since this one, we just need one option,
we just have one line.

00:38:57.580 --> 00:39:00.250
In code, you just pass it through.

00:39:00.300 --> 00:39:03.240
It's the option name equals custom.value.

00:39:03.400 --> 00:39:07.450
So if you have 8675 for the passcode,
you'd use JCL passcode

00:39:07.560 --> 00:39:10.400
equals custom.8675.

00:39:10.400 --> 00:39:13.970
And in your CUPS API,
you'd add the option or use parse

00:39:13.970 --> 00:39:18.400
options to grab out a string,
say, from the command line,

00:39:18.400 --> 00:39:21.400
and put that into an option string,
which then gets passed into a print job.

00:39:21.400 --> 00:39:25.620
Similar things happen on
the print manager side.

00:39:26.700 --> 00:39:29.920
For PostScript custom option,
it works a little bit different

00:39:30.150 --> 00:39:34.190
because with PostScript options,
the values actually get pushed on the

00:39:34.340 --> 00:39:38.600
stack and then the code gets executed
to pull those options off the stack.

00:39:38.600 --> 00:39:42.930
It's the same way that the custom
page size works and we just decided

00:39:42.930 --> 00:39:45.600
to stick with that to be consistent.

00:39:45.760 --> 00:39:47.600
Here we have a watermark option.

00:39:47.600 --> 00:39:50.600
You have none and draft of
the two standard options.

00:39:50.600 --> 00:39:56.210
You have the custom code which will pull
the string off of the stack and put it

00:39:56.210 --> 00:39:58.600
into a CUPS string one page attribute.

00:39:58.720 --> 00:40:04.600
And then the parameter for that is a
text string from zero to 32 characters.

00:40:06.540 --> 00:40:09.690
Again, we use the option name
equals custom.value.

00:40:09.990 --> 00:40:12.160
If you have a value
that contains a space,

00:40:12.160 --> 00:40:15.020
like top space secret,
you'd put the value in quotes.

00:40:15.200 --> 00:40:19.400
So watermark text equals, quote,
custom.top space secret, quote.

00:40:19.400 --> 00:40:23.280
And again, in the application code,
it works exactly the same,

00:40:23.710 --> 00:40:26.230
including the single
quotes around the value,

00:40:26.430 --> 00:40:30.200
and just pass that
through in the print job.

00:40:31.060 --> 00:40:35.530
Now, a more complex example,
and this is kind of contrived,

00:40:35.530 --> 00:40:42.200
but say you have a control to control
the overall gamma and density of

00:40:42.310 --> 00:40:45.860
the output to make it lighter,
darker, and so forth.

00:40:46.200 --> 00:40:49.760
Have three standard options here,
and then the custom page size--

00:40:49.760 --> 00:40:55.040
custom code here actually pulls
two values off of the stack.

00:40:55.040 --> 00:40:56.160
We define two parameters.

00:40:56.250 --> 00:40:58.360
One's called gamma,
and one's called density.

00:40:58.490 --> 00:41:02.660
And the value of the index 1 and
index 2 defines the order that

00:41:02.700 --> 00:41:04.660
they're pushed on the stack.

00:41:06.880 --> 00:41:10.650
For multi-valued options,
you actually use curly braces around it

00:41:10.650 --> 00:41:13.240
and then you use the named parameters.

00:41:13.360 --> 00:41:17.130
So you'd use gamma density
equals gamma equals 1.0,

00:41:17.140 --> 00:41:23.160
density equals 0.5 in curly braces
to specify that compound value.

00:41:23.410 --> 00:41:26.510
Again, same thing on the CUPS code.

00:41:28.980 --> 00:41:32.940
If you're developing a printer driver
or a back end that talks to a printer,

00:41:32.940 --> 00:41:35.080
you can now do back channel data.

00:41:35.080 --> 00:41:40.180
And the way we've implemented it is
as a non-blocking pipe between the

00:41:40.180 --> 00:41:42.760
back channel and the filters upstream.

00:41:42.900 --> 00:41:45.900
There's two functions to
actually access this information.

00:41:45.900 --> 00:41:51.900
Back channel read reads the data from
the back end into the driver or filter,

00:41:52.010 --> 00:41:55.900
and back channel write writes it from
the back end to the driver or filter.

00:41:55.900 --> 00:41:57.550
There's a timeout in
there so you can say,

00:41:57.640 --> 00:41:59.840
"If I don't get a response
back within one second,

00:41:59.900 --> 00:42:01.900
then this printer doesn't
support back channel data,

00:42:01.900 --> 00:42:04.860
so I'll use the unidirectional
mode of my driver."

00:42:05.370 --> 00:42:08.820
If you're doing anything with
PostScript or JCL options

00:42:08.820 --> 00:42:12.720
in your own drivers,
there's a PPD emit JCL end which

00:42:12.720 --> 00:42:18.180
handles any cleanup PGL that needs to
be put out for a particular printer.

00:42:18.300 --> 00:42:22.130
And then the emit string which is
a more general purpose function

00:42:22.130 --> 00:42:26.410
for actually collecting all of the
options for a particular section and

00:42:26.410 --> 00:42:30.100
putting them into a string that then
you can put in memory or send out to

00:42:30.170 --> 00:42:32.300
a file or send out to the printer.

00:42:32.300 --> 00:42:36.320
And we use this with a new
PostScript filter in CUPS to better

00:42:36.330 --> 00:42:42.290
support different page layout options and
get things out to the printer correctly.

00:42:44.960 --> 00:42:48.730
If you're doing a raster driver,
we've expanded the amount of information

00:42:48.730 --> 00:42:51.710
that's put in the page header,
largely in response to

00:42:51.710 --> 00:42:55.500
the Gutenprint folks,
but this will be useful for everybody,

00:42:55.500 --> 00:42:56.140
I think.

00:42:56.140 --> 00:42:59.820
There's a borderless scaling factor
attribute that's in there that

00:42:59.820 --> 00:43:05.140
corresponds to the scaling factor
that was used for a borderless print.

00:43:05.390 --> 00:43:09.630
That comes from Tiger and has been
forwarded into the raster format,

00:43:09.640 --> 00:43:12.120
so now you don't have to
guess at what value was used.

00:43:12.230 --> 00:43:13.140
It's in there.

00:43:13.320 --> 00:43:15.440
Similarly,
we've added floating point page

00:43:15.650 --> 00:43:19.610
sizes and imageable areas so that
if you have a page size that is

00:43:19.690 --> 00:43:23.640
not an integral number of points,
you can actually get the actual

00:43:23.650 --> 00:43:27.030
dimensions at a much better resolution.

00:43:27.140 --> 00:43:31.140
And if you have letter and letter
full bleed and the sizes are the same,

00:43:31.140 --> 00:43:33.140
well, you can get the size name now.

00:43:33.140 --> 00:43:37.140
It tells you it's letter
or letter.fullbleed.

00:43:37.290 --> 00:43:40.330
There's marker type and rendering
intent string options that you

00:43:40.330 --> 00:43:42.140
can control that in your driver.

00:43:42.140 --> 00:43:45.030
You're going to be using a
particular set of inks or you're

00:43:45.030 --> 00:43:47.140
using a particular rendering model.

00:43:47.140 --> 00:43:50.240
That information can be passed
through and would be passed

00:43:50.400 --> 00:43:53.360
through from a client as well,
so you don't have to

00:43:53.360 --> 00:43:55.080
depend on a PDE for that.

00:43:55.210 --> 00:44:00.170
And then there's general purpose integer,
real, and string attributes that

00:44:00.200 --> 00:44:02.080
you can use for anything.

00:44:03.600 --> 00:44:06.500
In order to support this,
we have three new APIs.

00:44:06.600 --> 00:44:09.200
The first one is most useful
if you're doing a RIP.

00:44:09.340 --> 00:44:11.660
It's CUPS Raster Interpret PPD.

00:44:11.660 --> 00:44:15.060
It takes the commands and stuff that
are in the PPD and the options that

00:44:15.060 --> 00:44:19.540
the user specified and generates a
page header from that that you can use.

00:44:19.570 --> 00:44:23.150
It also has a callback interface
so that if the user is asking for

00:44:23.150 --> 00:44:26.430
something that the RIP doesn't support,
you can say hey, wait a minute,

00:44:26.480 --> 00:44:27.450
I need to fix this.

00:44:27.680 --> 00:44:35.800
And the Interpret PPD function then
handles that situation for you.

00:44:35.930 --> 00:44:40.180
The Raster Read Header 2 and Raster
Write Header 2 functions do the new

00:44:40.180 --> 00:44:45.620
CUPS Raster format header so that you
get all of the extended page attributes.

00:44:45.870 --> 00:44:50.350
If you don't use these, the old APIs,
Read Header and Write Header,

00:44:50.350 --> 00:44:55.780
automatically handle expanding and
dropping the data that you don't need.

00:44:57.960 --> 00:45:01.280
Something new in CUPS 1.2 is
the port monitor interface.

00:45:01.510 --> 00:45:06.230
Previously, you'd have generic filters,
then a print driver filter,

00:45:06.330 --> 00:45:08.140
and then talk directly to the back end.

00:45:08.140 --> 00:45:10.270
And if you wanted anything
special to happen between

00:45:10.270 --> 00:45:12.830
that driver and the back end,
you had to write a new back end.

00:45:12.900 --> 00:45:16.900
Now we have a port monitor interface
that sticks between the driver and

00:45:16.900 --> 00:45:21.890
the back end so that if you need to
do any special protocol conversions

00:45:21.900 --> 00:45:28.900
such as TBCP or BCP or 1284 packet
encoding or anything of that nature,

00:45:28.900 --> 00:45:30.070
you can put it there.

00:45:30.150 --> 00:45:36.830
I also recommend if any of your users
do any kind of raw printing that you

00:45:36.830 --> 00:45:40.130
use this to do printer accounting,

00:45:40.340 --> 00:45:43.880
ink monitoring, that sort of thing,
there rather than in the

00:45:43.880 --> 00:45:47.100
driver because it will give
you a better user experience.

00:45:47.100 --> 00:45:52.160
In order to support different port
monitors for different interfaces,

00:45:52.250 --> 00:45:55.360
we have a new attribute
you can specify in the PPD,

00:45:55.360 --> 00:45:59.100
CUPS Port Monitor,
and basically in this example here,

00:45:59.100 --> 00:46:01.640
you can say when I'm talking
via socket connection,

00:46:01.640 --> 00:46:05.660
I need to use TBCP because it
isn't an 8-bit clean channel,

00:46:05.660 --> 00:46:08.780
but when I'm going via USB,
I don't need anything.

00:46:10.000 --> 00:46:14.470
And we have TBCP and
BCP port monitors in CUPS.

00:46:16.480 --> 00:46:19.150
When you're running as a back-end,
previously you always

00:46:19.150 --> 00:46:20.390
ran as the root user.

00:46:20.390 --> 00:46:22.240
We've changed that in 1.2.

00:46:22.240 --> 00:46:27.330
It's probably the only incompatible
change from a program standpoint.

00:46:27.810 --> 00:46:31.860
Basically, if the back-end has
world execute privileges,

00:46:31.910 --> 00:46:33.320
it gets run as LP.

00:46:33.470 --> 00:46:35.290
If it doesn't, it gets run as root.

00:46:35.390 --> 00:46:40.480
So if you're shipping a driver right now
or back-end that needs to run as root,

00:46:40.500 --> 00:46:44.400
just change the driver to
have mode 700 in your package,

00:46:44.620 --> 00:46:47.880
and that will work for
both tiger and leopard.

00:46:48.000 --> 00:48:18.900
[Transcript missing]

00:48:20.380 --> 00:48:24.080
The backends,
when you're advertising your device,

00:48:24.100 --> 00:48:28.860
you can now include the 1284
device ID in your advertisement.

00:48:29.130 --> 00:48:31.300
This allows for better
automatic driver selection.

00:48:31.300 --> 00:48:34.360
We know that if a printer
has a certain device ID,

00:48:34.460 --> 00:48:37.260
it corresponds to this
exact driver on the system.

00:48:37.400 --> 00:48:39.540
So I encourage you,
if you're doing your own backends,

00:48:39.540 --> 00:48:41.020
add support for that if you can.

00:48:41.360 --> 00:48:44.490
All of the standard
CUPS backends do that now.

00:48:44.970 --> 00:48:50.620
And instead of getting a static
snapshot of what the devices were

00:48:50.640 --> 00:48:54.640
when you booted the system or
when you first requested the list,

00:48:54.680 --> 00:48:59.540
we now run the backends every time
somebody asks for a list of devices.

00:48:59.690 --> 00:49:02.590
So in the web interface,
you go to the admin page,

00:49:02.600 --> 00:49:04.000
ask for the devices.

00:49:04.000 --> 00:49:06.200
You go to add a printer
in your printer browser,

00:49:06.200 --> 00:49:07.300
it asks for devices.

00:49:07.420 --> 00:49:12.160
So keep in mind that your backend
might be run more frequently in

00:49:12.160 --> 00:49:15.170
the discovery mode than originally.

00:49:15.320 --> 00:49:19.040
Because we don't keep track of the
devices that are available on the

00:49:19.040 --> 00:49:24.140
system beyond when somebody asks for it,
we now only validate that the URI is

00:49:24.240 --> 00:49:30.970
compliant with the corresponding RFCs and
the scheme is registered as a backend.

00:49:33.150 --> 00:49:38.510
So keep in mind that your back end
might be run more frequently in

00:49:38.720 --> 00:49:41.910
the discovery mode than originally.

00:49:41.920 --> 00:49:45.080
Because we don't keep track of the
devices that are available on the

00:49:45.080 --> 00:49:49.850
system beyond when somebody asks for it,
we now only validate that the URI is

00:49:49.860 --> 00:49:52.940
compliant with the corresponding RFCs.

00:49:52.940 --> 00:49:56.780
And the scheme is
registered as a back end.

00:50:03.170 --> 00:50:06.670
So you can't use this to
dynamically control what options

00:50:06.670 --> 00:50:08.180
are available all the time.

00:50:08.310 --> 00:50:12.690
But it can give you a snapshot
when you first add the device.

00:50:12.720 --> 00:50:17.540
If you're going to update your PPD,
you can do that from your port monitor,

00:50:17.540 --> 00:50:21.500
your back end, or your driver,
and enable certain options.

00:50:21.500 --> 00:50:23.400
It's got the duplexer now,
or it doesn't have the duplexer,

00:50:23.400 --> 00:50:25.700
and that sort of thing.

00:50:25.730 --> 00:50:28.780
What we're going to use it for
in the Gutenprint drivers is

00:50:28.840 --> 00:50:30.710
to provide virtual drivers.

00:50:30.750 --> 00:50:33.590
And basically,
the Gutenprint drivers are capable of

00:50:33.810 --> 00:50:36.010
generating their own PPD files already.

00:50:36.020 --> 00:50:38.690
We've been doing that for many years now.

00:50:38.750 --> 00:50:41.660
But generating static files
that can then be distributed,

00:50:41.660 --> 00:50:44.240
now we'll be able to do a
driver interface that lists

00:50:44.240 --> 00:50:47.010
all the drivers in there,
and then just provide the one

00:50:47.020 --> 00:50:48.100
that you're actually going to use.

00:50:48.230 --> 00:50:54.200
So it'll save 50,000 files and many
megabytes of disk space that way.

00:50:54.320 --> 00:50:58.500
You can also use it for grabbing
PPD files over the network,

00:50:58.500 --> 00:51:01.300
doing all sorts of dynamic stuff.

00:51:01.300 --> 00:51:03.060
It's a very general purpose interface.

00:51:03.120 --> 00:51:06.760
And we look forward to seeing
what people do with it.

00:51:06.890 --> 00:51:08.920
There's a helper program
called CUPS Driver D.

00:51:08.920 --> 00:51:13.240
You'll see whenever somebody's asking
for the list of PPDs on the system.

00:51:13.280 --> 00:51:18.560
And it's now responsible for
handling the PPD database that used

00:51:18.620 --> 00:51:20.090
to be managed by the scheduler.

00:51:20.180 --> 00:51:25.480
So you'll notice that things moved
around a little bit that way.

00:51:25.900 --> 00:51:30.690
So for CUPS 1.3,
which is the next major release,

00:51:30.700 --> 00:51:33.060
that's where we're going to
get Kerberos support in there.

00:51:33.230 --> 00:51:35.390
It's scheduled for release in October.

00:51:35.440 --> 00:51:39.860
So I know I say sometimes we're
going to have a release out in

00:51:39.860 --> 00:51:41.800
a few weeks or a few months.

00:51:41.800 --> 00:51:44.750
We've actually changed our whole
development process from the lessons

00:51:44.760 --> 00:51:48.550
we learned in 1.2 to say we're
not going to try to lump in 90

00:51:48.550 --> 00:51:50.740
new features into a minor release.

00:51:50.740 --> 00:51:54.300
We're going to do one or two,
and maybe a few of the little ones there.

00:51:55.830 --> 00:52:00.500
But we get them out more frequently,
and there's less code churn between them.

00:52:00.500 --> 00:52:04.300
So as you're upgrading,
you're not going to notice sudden

00:52:04.300 --> 00:52:07.460
huge changes that are going to
completely disrupt your lives.

00:52:07.520 --> 00:52:10.390
So we're going to get
the 1.3 out in October,

00:52:10.390 --> 00:52:12.780
and we'll have the Kerberos support.

00:52:12.780 --> 00:52:15.870
There's actually one of the Samba
developers that's doing it as a

00:52:15.870 --> 00:52:20.110
Google Summer of Code project for us,
and he did Kerberos support in Samba.

00:52:20.120 --> 00:52:22.820
So we're very confident that's
going to come off very well,

00:52:22.890 --> 00:52:25.140
and that you can actually
look at his progress.

00:52:25.800 --> 00:52:27.840
So we're going to have the 1.3
version of Kerberos support in

00:52:27.870 --> 00:52:29.200
the CUPS Subversion Repository.

00:52:29.230 --> 00:52:31.260
So we want to get your involvement.

00:52:31.270 --> 00:52:35.560
We have a web page that handles the bug
reports and feature requests for CUPS,

00:52:35.650 --> 00:52:37.770
and there's a roadmap page there.

00:52:37.790 --> 00:52:41.560
So if you're at all interested
in shaping the future of CUPS,

00:52:41.560 --> 00:52:43.050
please go to our site.

00:52:43.050 --> 00:52:45.090
Please provide your feedback.

00:52:45.230 --> 00:52:49.810
If you're running into problems,
feel free to file bug reports with us.

00:52:49.880 --> 00:52:51.900
If it's something that's
really Apple-specific,

00:52:52.010 --> 00:52:53.340
definitely file it with them.

00:52:53.340 --> 00:52:55.780
But we're interested in
knowing about problems as well.

00:52:55.800 --> 00:52:59.510
And we can just keep working like
we have been for the last four

00:52:59.510 --> 00:53:01.710
years and make CUPS even better.

00:53:03.650 --> 00:53:06.970
If you're familiar with the
CUPS book that's currently out,

00:53:07.000 --> 00:53:11.600
it's got a big squid on the
front and there were some various

00:53:11.600 --> 00:53:14.980
allusions in that to printing.

00:53:14.980 --> 00:53:19.470
We're coming out with a new CUPS book,
something that we're publishing,

00:53:19.470 --> 00:53:20.860
and no more squids.

00:53:20.860 --> 00:53:24.590
Just nice clean cover
with the CUPS mascot.

00:53:24.640 --> 00:53:27.480
It's going to cover all of the
new stuff in 1.2 and beyond.

00:53:27.530 --> 00:53:32.440
It's also going to cover the CUPSDDK,
ESP Go script, Gutenprint and so forth.

00:53:32.440 --> 00:53:35.400
And we've organized it
differently so that it's more

00:53:35.800 --> 00:53:39.190
about I want to get this done,
so here's the steps to get that done

00:53:39.190 --> 00:53:41.360
and then here's why these steps work.

00:53:41.360 --> 00:53:45.270
So it's a much more effective, I think,
manual for learning how to use

00:53:45.270 --> 00:53:47.660
CUPS than the previous book.

00:53:47.770 --> 00:53:51.390
That's also available in October.

00:53:51.480 --> 00:53:54.750
CUPS resources, you have the website,
the forms and mailing

00:53:54.870 --> 00:53:56.560
lists are available there.

00:53:56.560 --> 00:53:59.500
The CUPS books are available there.

00:53:59.500 --> 00:54:02.220
The feature request page is there
and the source code is there.

00:54:02.220 --> 00:54:05.560
So you can go and
download the source code,

00:54:05.640 --> 00:54:12.260
download the universal package for
Mac OS X Tiger and just have fun.

00:54:13.580 --> 00:54:16.420
If you're doing something
for Mac OS X specifically,

00:54:16.420 --> 00:54:18.740
there's the Apple bug reporting page.

00:54:18.740 --> 00:54:20.470
Make use of it when you find a bug.

00:54:20.520 --> 00:54:22.410
We can't fix bugs we don't know about.

00:54:22.560 --> 00:54:24.920
And the printing list,
if you have questions,

00:54:24.920 --> 00:54:28.500
especially if you're developing software,
this list is great.

00:54:28.500 --> 00:54:31.430
I'm there and a lot of the
Apple developers are there helping out,

00:54:31.490 --> 00:54:35.500
answering questions about the
printing system and how to do things.

00:54:35.500 --> 00:54:37.790
And finally,
the open source printing page,

00:54:37.900 --> 00:54:41.670
that's where you get the actual copy of
this CUPS source code that's included

00:54:41.670 --> 00:54:43.500
with a particular Mac OS X release.

00:54:43.740 --> 00:54:48.450
And if you want to rebuild it
yourself and play around with it,

00:54:48.490 --> 00:54:52.420
start there because there are differences
between the standard CUPS software

00:54:52.500 --> 00:54:55.500
and CUPS.org and what Apple provides.

00:54:55.500 --> 00:54:59.730
Mainly, as we're syncing things up,
they're a little bit

00:54:59.730 --> 00:55:01.940
further ahead than we are.

00:55:03.230 --> 00:55:05.840
As a developer,
there's online documentation now.

00:55:05.850 --> 00:55:08.810
All the APIs are documented with
online help on the web interface,

00:55:08.970 --> 00:55:10.440
so bookmark that.

00:55:10.450 --> 00:55:13.130
And we have a driver developer kit.

00:55:13.140 --> 00:55:15.160
If you're writing a
printer driver for CUPS,

00:55:15.190 --> 00:55:17.220
this is what you should be using,
whether you're using it for

00:55:17.220 --> 00:55:20.400
your actual printer driver or
just generating the PPD files.

00:55:20.400 --> 00:55:25.150
We have utilities now to actually merge
multiple single-language PPD files

00:55:25.260 --> 00:55:28.800
into a single multi-language PPD file.

00:55:29.010 --> 00:55:34.150
So if you're even not going to
use the PPD compiler in the DDK,

00:55:34.150 --> 00:55:39.300
but you want to do stuff and
support Mac OS X more quickly,

00:55:39.300 --> 00:55:40.200
use this utility.

00:55:40.200 --> 00:55:42.640
It'll save you a whole bunch of time,
and you can move on to

00:55:42.690 --> 00:55:44.230
more exciting things.

00:55:44.340 --> 00:55:48.900
There's standard drivers for
PCL and Epson printers in the DDK.

00:55:48.900 --> 00:55:52.180
If you have a multifunction
device that just uses one

00:55:52.180 --> 00:55:55.600
of those standard languages,
you can use those drivers freely.

00:55:55.600 --> 00:55:56.580
They're GPLed.

00:55:56.740 --> 00:55:58.700
And support them without
a whole lot of trouble.

00:55:58.700 --> 00:56:00.740
Without a whole lot of work,
you just have to write a

00:56:00.740 --> 00:56:03.490
little device description file,
and it'll create a PPD for you,

00:56:03.490 --> 00:56:06.000
and you'll be up and printing.

00:56:06.000 --> 00:56:10.000
For us, it takes the driver development
time from months to a few days.