WEBVTT

00:00:10.350 --> 00:00:13.860
This is session 152, Cocoa Tips, Tricks,
and Debugging Techniques.

00:00:13.860 --> 00:00:15.640
My name's Ken Ferrry.

00:00:15.710 --> 00:00:18.760
I'm a software engineer on
the Cocoa Frameworks team.

00:00:18.920 --> 00:00:21.300
And again, thank you for coming.

00:00:26.470 --> 00:00:31.550
So the overall goal for this talk
is that I would like you to be able

00:00:31.550 --> 00:00:35.360
to come to a greater understanding
of sort of the Cocoa mindset,

00:00:35.360 --> 00:00:39.580
the worldview that we have,
because we do have a worldview.

00:00:39.580 --> 00:00:41.950
And if you properly understand it,
it's pretty easy to

00:00:41.950 --> 00:00:43.140
work with our framework.

00:00:43.140 --> 00:00:45.140
So you can sort of
predict how things behave.

00:00:45.140 --> 00:00:48.030
And when you look at a new API, you say,
OK, I know how that works.

00:00:48.040 --> 00:00:51.630
And when you're writing your own code,
similarly, you can write it in our style.

00:00:51.630 --> 00:00:55.170
So when you're reading it in six months,
you can still understand it.

00:00:56.400 --> 00:00:57.930
But that's a little general.

00:00:57.930 --> 00:01:00.700
So how are we actually going
to try to address this?

00:01:00.700 --> 00:01:02.550
There are a couple different ways.

00:01:02.580 --> 00:01:04.850
First of all,
I'm going to try to show you just

00:01:04.850 --> 00:01:06.820
some sort of snippets of code,
small,

00:01:07.170 --> 00:01:11.390
interesting bits that you can find in the
framework that you might or might not run

00:01:11.390 --> 00:01:13.910
into yourself but are good to know about.

00:01:13.920 --> 00:01:16.470
And hopefully,
understanding some of these issues

00:01:16.470 --> 00:01:19.860
will help you to sort of solidify
the edges again on your understanding

00:01:19.860 --> 00:01:21.500
of the framework as a whole.

00:01:21.500 --> 00:01:24.140
However,
I can't really cover too many snippets

00:01:24.140 --> 00:01:25.930
like that in an hour-long talk.

00:01:26.400 --> 00:01:29.350
So most of the talk is not
going to be that exactly.

00:01:29.370 --> 00:01:33.420
It's going to be how you
would discover such little

00:01:33.420 --> 00:01:34.920
interesting tidbits on your own.

00:01:34.940 --> 00:01:37.680
So it's going to be covering
the documentation a little bit,

00:01:37.800 --> 00:01:40.960
F script,
which is an interesting environment

00:01:40.960 --> 00:01:42.770
for Cocoa programming that you
may or may not be aware of,

00:01:42.840 --> 00:01:45.200
and GDB,
which you almost certainly are aware of.

00:01:45.260 --> 00:01:47.430
It's the debugger installed
with your developer tools.

00:01:47.440 --> 00:01:50.860
For the tidbits,
which I'm calling case studies up here,

00:01:50.870 --> 00:01:53.550
that's going to be sort
of mixed throughout the

00:01:53.610 --> 00:01:55.420
entire talk to some degree.

00:01:55.420 --> 00:01:56.320
We're just going to see.

00:01:56.430 --> 00:01:58.500
While we're doing
something with F script,

00:01:58.500 --> 00:02:00.330
say,
we'll find a few interesting bits that

00:02:00.460 --> 00:02:02.360
I think are interesting by themselves.

00:02:02.360 --> 00:02:05.780
But we're mostly going to see those as a
part of everything else that we're doing.

00:02:05.780 --> 00:02:08.530
But first,
I do want to go through one particular

00:02:08.530 --> 00:02:12.460
case study in a fair bit of depth,
just maybe as a warm-up a little bit,

00:02:12.460 --> 00:02:17.320
and it is also a little bit interesting,
though maybe a little bit surprising.

00:02:17.320 --> 00:02:23.560
And that is trying to implement in
an NSL subclass the copy method.

00:02:25.520 --> 00:02:28.910
So the reason I bring this up is because,
unfortunately, like I said,

00:02:28.920 --> 00:02:30.200
we try to be very consistent.

00:02:30.200 --> 00:02:32.460
We try to follow the
principle of least surprise.

00:02:32.460 --> 00:02:36.240
But it's a sizable framework,
and there are a few spots that don't

00:02:36.240 --> 00:02:38.340
behave the way you might expect.

00:02:38.340 --> 00:02:40.250
And this is unfortunately one of them.

00:02:40.410 --> 00:02:43.860
So here we have a cell
subclass called fancy cell.

00:02:43.860 --> 00:02:45.280
There's not much to it.

00:02:45.280 --> 00:02:46.580
I'm sure it draws something beautiful.

00:02:46.660 --> 00:02:48.780
But in terms of instance variables,
it just has one additional

00:02:48.780 --> 00:02:51.720
instance variable,
which is a fancy color of some sort.

00:02:52.740 --> 00:02:56.520
And we implemented a copy
with zone method like this.

00:02:56.520 --> 00:02:59.600
So all we did is we
overrode copy with zone.

00:02:59.600 --> 00:03:03.060
We called super to let cell do whatever
it thought was appropriate for copying.

00:03:03.060 --> 00:03:07.800
And then we took our fancy color and
set it into the new copy of the cell.

00:03:07.800 --> 00:03:12.120
Unfortunately, this is not good code.

00:03:12.140 --> 00:03:13.580
This will probably crash.

00:03:13.580 --> 00:03:15.380
Some of you might be
looking and thinking,

00:03:15.380 --> 00:03:17.220
oh, I can see something wrong with that.

00:03:17.300 --> 00:03:18.490
That looks like a latent bug.

00:03:18.500 --> 00:03:19.750
But it's not just latent.

00:03:19.760 --> 00:03:21.550
This is probably a crashing bug.

00:03:21.820 --> 00:03:23.210
If the copying method ever gets called.

00:03:23.240 --> 00:03:25.310
If you want to try to figure this out,
figure it out quick,

00:03:25.310 --> 00:03:26.990
because I'm just about
to tell you what it is.

00:03:27.060 --> 00:03:32.180
Can you say that again?

00:03:32.200 --> 00:03:34.830
Is it because we're
trying to make an image?

00:03:37.820 --> 00:03:41.320
He's asking if it has something to
do with mutability and immutability,

00:03:41.330 --> 00:03:43.020
and the answer is no, it does not.

00:03:43.110 --> 00:03:46.660
So good try, though,
and you had to do it quickly.

00:03:46.660 --> 00:03:50.660
So the problem is that there
is a function defined in

00:03:50.890 --> 00:03:55.940
Cocoa called NSCopyObject,
which is somewhat unique and

00:03:56.150 --> 00:04:00.640
does not behave the way most
things in the app kit behave.

00:04:00.640 --> 00:04:04.900
So what it does is it creates a
complete memory copy of an object.

00:04:04.900 --> 00:04:09.730
If you have an object whose
instance variables take 100k,

00:04:09.730 --> 00:04:15.560
say, then what you do when you call
NSCopyObject is it will create a new

00:04:15.560 --> 00:04:19.740
block of memory of the appropriate size,
and it will just, as bytes,

00:04:19.740 --> 00:04:22.440
take the first one and
just smash it over,

00:04:22.740 --> 00:04:24.900
which is obviously kind of fast.

00:04:24.900 --> 00:04:29.570
But there are things that happen
with this that are very surprising

00:04:29.570 --> 00:04:30.620
from a Cocoa perspective.

00:04:30.640 --> 00:04:34.190
So in particular,
you don't generally expect your

00:04:34.190 --> 00:04:38.420
superclass to be able to have
any effect on your own variables.

00:04:38.790 --> 00:04:41.320
It just doesn't have any
way to reference them.

00:04:41.320 --> 00:04:42.740
It doesn't know they exist.

00:04:42.790 --> 00:04:45.540
But in this particular case,
it will manage to modify them,

00:04:45.540 --> 00:04:47.160
and that can cause some trouble.

00:04:47.250 --> 00:04:49.490
I do want to mention that
this is documented well.

00:04:49.590 --> 00:04:54.320
We'll cover that later as part of
when we try to debug our issues,

00:04:54.400 --> 00:04:55.250
sort of.

00:04:55.330 --> 00:04:59.780
But I don't want you to think that this
is just something completely mysterious.

00:05:00.150 --> 00:05:01.900
So what happens in this particular case?

00:05:01.900 --> 00:05:07.500
The first thing we did, again,
is we called the super,

00:05:07.620 --> 00:05:10.060
and we said copy with zone,
which is going to create a new

00:05:10.060 --> 00:05:11.770
instance and partially initialize it.

00:05:11.830 --> 00:05:15.260
So that is, it's going to initialize
it to the NSCell level.

00:05:15.340 --> 00:05:18.200
But among other things,
because of this call to NSCopy object,

00:05:18.220 --> 00:05:20.300
which NSCell uses-- maybe
I didn't mention that yet.

00:05:20.420 --> 00:05:26.900
It's actually the only place
NSCopy object is used in our code.

00:05:26.900 --> 00:05:29.710
It's going to have the effect of
doing what I wrote at the very top.

00:05:29.790 --> 00:05:32.500
You can think of it as saying,
just going directly to the

00:05:32.500 --> 00:05:35.510
instance variable and setting
the fancy color in the copy to be

00:05:35.510 --> 00:05:37.140
the fancy color in the original.

00:05:37.140 --> 00:05:39.240
In particular, though,
it doesn't retain it,

00:05:39.290 --> 00:05:41.640
because it doesn't know
enough to retain the objects.

00:05:41.640 --> 00:05:43.250
It's just copying them as bytes.

00:05:43.350 --> 00:05:46.660
So if we look at the
set fancy color method,

00:05:46.660 --> 00:05:49.060
and this is a properly
implemented accessor,

00:05:49.100 --> 00:05:52.790
the first thing it does is it
checks if the color coming in to

00:05:52.790 --> 00:05:56.100
the copied cell is the same as
the color that's already there.

00:05:56.120 --> 00:05:58.680
And if it is, it just bails out and
does nothing at all.

00:05:58.760 --> 00:06:02.120
And it is actually going to be
the same because of this NSCopy

00:06:02.120 --> 00:06:08.060
object method that was invoked by a
function that was called by NSCell.

00:06:08.650 --> 00:06:12.490
So again, somehow in the copy,
we're going to end up with

00:06:12.510 --> 00:06:15.790
the fancy color will be set,
but it was never retained.

00:06:16.450 --> 00:06:18.480
So indeed,
when we go look at our dealloc method,

00:06:18.600 --> 00:06:21.110
it's going to release the color,
which is appropriate,

00:06:21.110 --> 00:06:22.780
but there's no balancing retain.

00:06:22.780 --> 00:06:27.440
So that is very likely eventually
going to cause a crash,

00:06:27.440 --> 00:06:30.070
provided anybody ever actually
tries to copy the cell.

00:06:30.080 --> 00:06:34.010
There now are a few things
to think about with that.

00:06:34.020 --> 00:06:35.560
So first of all,
the crash is going to be delayed.

00:06:35.560 --> 00:06:37.790
We're not really sure when it's
going to happen because we just had

00:06:37.790 --> 00:06:41.290
this memory management issue where
when the copy gets deallocated,

00:06:41.290 --> 00:06:44.840
the color will get
released an extra time.

00:06:44.960 --> 00:06:46.280
That might deallocate the color.

00:06:46.280 --> 00:06:48.220
That might just drop its
release count by one.

00:06:48.220 --> 00:06:50.140
Hard to say exactly.

00:06:50.140 --> 00:06:52.900
Now,
a secondary issue that you might want

00:06:52.900 --> 00:06:57.510
to think about is that you might say,
well, it doesn't really matter to me if

00:06:57.520 --> 00:07:01.620
this copy method doesn't work because
I'm never going to copy the cell.

00:07:01.620 --> 00:07:04.990
But now this is an interesting
thing about frameworks in general

00:07:05.010 --> 00:07:08.390
is that you kind of can't make
that kind of decision because you

00:07:08.400 --> 00:07:11.800
pass the cell off to the framework,
say if you put it in a table view,

00:07:11.800 --> 00:07:13.800
and the framework kind of runs the show.

00:07:13.920 --> 00:07:15.980
We'll do all sorts of stuff with it,
and you can't guarantee.

00:07:15.980 --> 00:07:20.460
Because NSCell implements NSCopying,
it's your responsibility

00:07:20.460 --> 00:07:22.140
to do it in subclasses.

00:07:22.160 --> 00:07:25.720
And in fact, NSTableView will copy cells
for you whenever you click one.

00:07:25.720 --> 00:07:27.280
That's whenever you click a cell.

00:07:27.280 --> 00:07:30.640
That is sort of an implementation
detail for NSTableView.

00:07:30.640 --> 00:07:32.750
It's not the kind of
thing you want to rely on,

00:07:32.750 --> 00:07:34.990
but it'll happen,
and it will make a difference

00:07:34.990 --> 00:07:38.230
in this particular circumstance
if you made this other mistake.

00:07:38.320 --> 00:07:42.150
If you do everything perfectly,
then no problems.

00:07:42.180 --> 00:07:43.340
OK.

00:07:43.340 --> 00:07:43.720
So.

00:07:43.720 --> 00:07:43.900
OK.

00:07:43.920 --> 00:07:47.420
So basically what happens if we end up,
if we run this, we put it in table view,

00:07:47.420 --> 00:07:48.740
we see the table view,
it looks all great.

00:07:48.740 --> 00:07:50.160
We click it twice, and it crashes.

00:07:50.160 --> 00:07:53.360
And the crash, oh, sorry.

00:07:53.360 --> 00:07:56.960
First, I do want to say,
so that seemed very unfortunate.

00:07:56.960 --> 00:07:58.660
So what is it that we
should be doing instead?

00:08:01.060 --> 00:08:04.650
The answer is that in the
copy with zone method,

00:08:04.730 --> 00:08:06.720
it's not a good idea to call accessors.

00:08:06.720 --> 00:08:10.540
You really want to go directly to
the instance variables and set them.

00:08:10.540 --> 00:08:14.000
This looks a little funny to
a Cocoa programmer at first.

00:08:14.000 --> 00:08:17.140
So this is another one of these defining
the edges where figuring out exactly

00:08:17.230 --> 00:08:18.860
what it is you're supposed to be doing.

00:08:18.860 --> 00:08:22.280
This looks funny because usually we
don't use that dereferencing operator,

00:08:22.360 --> 00:08:24.000
the arrow, at all.

00:08:24.000 --> 00:08:27.680
And we certainly usually wouldn't
use it on an object other than self.

00:08:28.040 --> 00:08:30.240
But if you think about it,
this actually is

00:08:30.240 --> 00:08:31.560
appropriate in this case.

00:08:31.670 --> 00:08:33.200
Let's think about a slightly
different case first.

00:08:33.270 --> 00:08:35.610
Let's think about it in a knit method.

00:08:36.260 --> 00:08:39.410
People,
a lot of people are sort of aware that

00:08:39.450 --> 00:08:43.040
it's a bad idea to call accessor methods,
or at least public accessor

00:08:43.040 --> 00:08:44.640
methods from an init method.

00:08:44.640 --> 00:08:48.020
The issue there is that the object
has only been partially initialized if

00:08:48.040 --> 00:08:50.020
you're in the middle of an init method.

00:08:50.020 --> 00:08:53.160
And if you call out to a
public method like an accessor,

00:08:53.180 --> 00:08:58.160
then subclassers have to somehow
be aware that they might get,

00:08:58.160 --> 00:09:03.800
their code might be running when the
object is not fully constructed yet.

00:09:03.800 --> 00:09:07.460
So you generally want to avoid
that kind of assumption at all.

00:09:07.520 --> 00:09:08.380
I hope that makes sense.

00:09:08.380 --> 00:09:10.790
So in an init method,
you generally also want to go

00:09:10.800 --> 00:09:12.960
directly to the instance variables.

00:09:12.960 --> 00:09:17.640
Now the thing is that a copy with zone
really is the init method for the copy.

00:09:17.640 --> 00:09:22.490
It looks a little bit different because
it's not self that we're initializing,

00:09:22.490 --> 00:09:23.480
it's the copy.

00:09:23.480 --> 00:09:25.790
But we're not violating
encapsulation here.

00:09:25.790 --> 00:09:27.000
It's the same class.

00:09:27.000 --> 00:09:29.080
We already have complete knowledge of it.

00:09:29.080 --> 00:09:31.150
It's not,
usually the reason why you don't

00:09:31.180 --> 00:09:32.960
want to use that dereferencing
operator is because you're

00:09:32.960 --> 00:09:36.930
destroying your encapsulation
And that's not true in this case.

00:09:37.060 --> 00:09:42.480
So that's why that is both why
this is going to work in this case.

00:09:42.480 --> 00:09:45.830
I mean, you can just see we sort of
explicitly set the fancy color to

00:09:45.880 --> 00:09:47.620
be a copy of our original color.

00:09:47.620 --> 00:09:49.940
But it's also just good in general.

00:09:49.940 --> 00:09:52.750
So if we had been writing the
copy with zone method with

00:09:52.750 --> 00:09:55.130
exactly the right pattern,
then we wouldn't have

00:09:55.130 --> 00:09:56.190
even noticed this issue.

00:09:56.200 --> 00:09:59.520
So I think it's good to notice the
issue because then it won't bite

00:09:59.520 --> 00:10:01.420
you when you're not expecting it.

00:10:01.520 --> 00:10:05.050
Okay, so a little bit of advice here
regarding some of what we've just seen.

00:10:05.520 --> 00:10:07.320
So don't use NSCopyObject.

00:10:07.320 --> 00:10:12.980
It does behave the way we generally
don't expect as Cocoa programmers.

00:10:12.980 --> 00:10:16.580
And there's some,
I think it's understandable

00:10:16.580 --> 00:10:18.510
to kind of want to use it.

00:10:18.600 --> 00:10:20.300
When you find something
that behaves a little oddly,

00:10:20.300 --> 00:10:21.860
you say, oh, that's really interesting.

00:10:21.860 --> 00:10:23.040
And I think this is interesting.

00:10:23.040 --> 00:10:26.460
I think NSCopyObject is kind of,
you know, it's worth knowing about.

00:10:26.480 --> 00:10:29.800
But it's definitely for
very specialized use cases.

00:10:29.800 --> 00:10:32.540
And generally,
when you find one of these sort

00:10:32.540 --> 00:10:35.370
of corners in the framework,
what you really want to do is just,

00:10:35.520 --> 00:10:36.520
stay the heck away.

00:10:36.520 --> 00:10:40.680
The important thing is knowing where
the corners are so you can do that.

00:10:40.770 --> 00:10:44.420
Okay, but more important than that,
really,

00:10:44.420 --> 00:10:49.200
is to say that you don't want to say, oh,
NSCell is using NSCopyObject,

00:10:49.200 --> 00:10:51.500
so I don't really have to
copy any of my scalers.

00:10:51.500 --> 00:10:52.500
It's going to handle it for me.

00:10:52.520 --> 00:10:57.930
That's not a good idea at all
because we might change this.

00:10:57.940 --> 00:11:00.390
It really would be kind
of nice to change it,

00:11:00.390 --> 00:11:03.350
I think, because of the sort of
behaviors I'm talking about.

00:11:03.440 --> 00:11:04.530
But there are other trade-offs.

00:11:04.620 --> 00:11:05.300
Okay.

00:11:05.550 --> 00:11:07.520
So, we do care quite a bit
about binary compatibility.

00:11:07.520 --> 00:11:09.520
Certainly,
something that people in this room want.

00:11:09.520 --> 00:11:11.510
They want to see the framework improve.

00:11:11.590 --> 00:11:13.520
They also want to see when they have
an application that works on Tiger,

00:11:13.520 --> 00:11:15.510
they want to see it work on Leopard.

00:11:15.600 --> 00:11:19.060
So, we do have to pick and choose
a little bit where we try

00:11:19.060 --> 00:11:20.510
to make these improvements.

00:11:20.580 --> 00:11:22.520
In this case,
if we were going to change it,

00:11:22.520 --> 00:11:26.520
we'd have to do something where
it only changes for applications

00:11:26.520 --> 00:11:28.520
that are recompiled on Leopard.

00:11:28.790 --> 00:11:31.480
Because, and we would mark this
in our release notes.

00:11:31.530 --> 00:11:33.520
I'll talk about that a little bit later.

00:11:33.960 --> 00:11:36.620
Because, because, because,
it's too big of a change.

00:11:36.620 --> 00:11:40.010
It's too easy to accidentally
rely on this working.

00:11:40.120 --> 00:11:41.560
In fact, we've done it ourselves.

00:11:41.560 --> 00:11:42.700
That's where I ran into this.

00:11:42.700 --> 00:11:45.380
That's how I know about it.

00:11:45.520 --> 00:11:48.260
So what does the crash
actually look like?

00:11:48.260 --> 00:11:51.600
The reason I want to bring this up is
because you look at the-- so this is what

00:11:51.600 --> 00:11:56.570
you get if you create such an object and
then click on it twice in a table view.

00:11:56.940 --> 00:12:00.220
This, at first glance,
to some programmers might look like, oh,

00:12:00.220 --> 00:12:02.920
it's an AppKit bug,
because you look at the call stack

00:12:02.920 --> 00:12:04.710
and there's no client code at all.

00:12:04.720 --> 00:12:06.400
It's all completely internal.

00:12:06.400 --> 00:12:08.430
But you can see that
that wasn't the case.

00:12:08.560 --> 00:12:11.040
There was something that
was wrong in client code,

00:12:11.150 --> 00:12:14.620
but it was passed off to the framework,
and the error didn't manifest

00:12:14.620 --> 00:12:16.100
until a little bit later.

00:12:16.780 --> 00:12:20.430
First of all, for a recently experienced
Cocoa programmer,

00:12:20.430 --> 00:12:22.800
it is fairly clear what happened here.

00:12:22.800 --> 00:12:25.300
This looks like a prematurely
deallocated object.

00:12:25.300 --> 00:12:28.360
Let's discuss how you recognize
that case a little bit.

00:12:28.440 --> 00:12:31.100
First of all, if you see crashes in
an obse message send,

00:12:31.100 --> 00:12:33.730
it's almost always a
prematurely deallocated object,

00:12:33.730 --> 00:12:36.330
just because if there are
bugs in an obse message send,

00:12:36.330 --> 00:12:38.400
we're going to find them pretty fast.

00:12:38.430 --> 00:12:45.060
Another way you're going
to see it is XC bad access.

00:12:45.060 --> 00:12:50.210
That means you're trying to... get at
some bit of memory that you cannot,

00:12:50.210 --> 00:12:51.650
or you're trying to access
something you can't,

00:12:51.700 --> 00:12:55.240
and often that's going to be a
prematurely deallocated object.

00:12:55.320 --> 00:12:58.680
Perhaps a slightly more interesting one,
well, not that those aren't interesting,

00:12:58.680 --> 00:13:00.640
but this one's interesting because
it's a little bit stranger looking,

00:13:00.680 --> 00:13:05.940
is that if you see really odd-looking
selector not recognized messages,

00:13:06.000 --> 00:13:09.140
if you get something like this,
you say NS sound doesn't respond

00:13:09.140 --> 00:13:11.840
to the table view object value
for table column row method.

00:13:11.840 --> 00:13:16.390
If this shows up in your console,
you might say, yeah, good question.

00:13:16.420 --> 00:13:17.420
Good work there.

00:13:17.420 --> 00:13:18.420
It really doesn't.

00:13:18.420 --> 00:13:21.370
But why is this in my console?

00:13:21.440 --> 00:13:25.690
And what happens here is that
if you have an object that

00:13:25.690 --> 00:13:29.730
gets prematurely deallocated,
that same memory may be reused

00:13:29.730 --> 00:13:31.420
for an entirely different object.

00:13:31.420 --> 00:13:34.490
But in this case,
it would be that your data source,

00:13:34.500 --> 00:13:39.350
which is not retained by the table view,
somehow got prematurely deallocated.

00:13:39.420 --> 00:13:42.910
The space was reused for a sound,
but the table view was still pointing,

00:13:42.910 --> 00:13:44.420
had the same pointer in it.

00:13:44.420 --> 00:13:45.420
So it tried to send.

00:13:45.420 --> 00:13:48.420
This data source message to the sound.

00:13:48.420 --> 00:13:51.870
So what you would take away from that
particular message is that you have

00:13:51.870 --> 00:13:55.400
a there's a problem with the memory
management for your data source.

00:13:56.930 --> 00:13:59.740
Okay, so how would we go about
debugging this though?

00:13:59.740 --> 00:14:02.100
If you go back to that backtrace,
it's a little bit mysterious.

00:14:02.100 --> 00:14:03.540
It's just there's this crash.

00:14:03.540 --> 00:14:06.680
We know that an object was
prematurely deallocated,

00:14:06.680 --> 00:14:08.210
but we do not know
what the object is yet.

00:14:08.250 --> 00:14:11.710
So there is a nice tool that's
definitely worth knowing about,

00:14:11.710 --> 00:14:15.820
which is the NSZombiesEnabled
environment variable.

00:14:15.820 --> 00:14:18.440
So let's talk about that for a minute,
and let's talk about what it does.

00:14:18.440 --> 00:14:20.900
So if you set this environment variable,
which I'll show you in a minute,

00:14:20.950 --> 00:14:24.200
objects will never
actually be deallocated.

00:14:24.200 --> 00:14:25.360
They will be zombified.

00:14:25.360 --> 00:14:28.650
So it will mark,
instead of actually freeing

00:14:28.650 --> 00:14:33.420
any particular object,
when it gets down to the dialog method,

00:14:33.420 --> 00:14:36.590
it will instead mark it as something
that was supposed to have been freed,

00:14:36.590 --> 00:14:38.180
a zombie.

00:14:38.180 --> 00:14:41.280
And then if you ever try to message it,
you'll get an error.

00:14:41.400 --> 00:14:42.620
It won't crash anymore.

00:14:42.620 --> 00:14:46.440
You'll get a log, and it'll give you some
interesting information.

00:14:46.440 --> 00:14:48.420
It is also just worth mentioning.

00:14:48.420 --> 00:15:15.300
So if you go back to the NSString,
it's going to really be

00:15:15.300 --> 00:15:16.430
a core foundation object.

00:15:16.520 --> 00:15:17.620
Though if you subclass it,
it's going to be a

00:15:17.620 --> 00:15:18.420
core foundation object.

00:15:18.440 --> 00:15:22.460
The point is that NSZombieEnabled will
never catch those bridged objects.

00:15:22.460 --> 00:15:27.520
So when you create a standard NSString,
you need to use CFZombieLevel

00:15:27.600 --> 00:15:30.000
to catch that particular case.

00:15:31.480 --> 00:15:32.830
Okay, but anyway,
let's just see how this works.

00:15:32.900 --> 00:15:34.140
So we would go to Xcode.

00:15:34.140 --> 00:15:36.990
We would create,
you get this if you control

00:15:36.990 --> 00:15:39.100
click on the executable in Xcode.

00:15:39.100 --> 00:15:41.230
You get a chance to set
environment variables.

00:15:41.240 --> 00:15:43.000
You would set NSZombie enabled to yes.

00:15:43.000 --> 00:15:44.450
You run the app.

00:15:44.550 --> 00:15:46.120
Like I said,
it's not going to crash anymore.

00:15:46.120 --> 00:15:48.240
Instead, we get a log in the console.

00:15:48.240 --> 00:15:51.030
It says selector release sent
to a deallocated instance of

00:15:51.110 --> 00:15:52.920
class NS calibrated RGB color.

00:15:52.920 --> 00:15:54.480
So now we have more information.

00:15:54.540 --> 00:15:57.320
Now we don't just know that an
object was prematurely deallocated.

00:15:57.320 --> 00:15:59.450
We also know what kind of object it was.

00:15:59.530 --> 00:16:00.020
It was a color.

00:16:00.650 --> 00:16:02.280
So we might start wondering
about that fancy color.

00:16:02.280 --> 00:16:04.260
But it gives us a little
bit more information.

00:16:04.260 --> 00:16:08.780
It tells us to set a breakpoint and
has NSZombie release to debug it.

00:16:08.840 --> 00:16:10.120
We set that breakpoint.

00:16:10.120 --> 00:16:11.240
Here's what we get.

00:16:11.320 --> 00:16:15.080
Not only is it a color,
but the color we're finding is getting,

00:16:15.080 --> 00:16:19.300
we're trying to message it
within fancy cell dealloc.

00:16:19.390 --> 00:16:22.060
So now we're totally sure
because there's only one thing

00:16:22.060 --> 00:16:24.440
we're trying to message there,
and that is our fancy color.

00:16:24.440 --> 00:16:26.220
So we're pretty sure what's going on.

00:16:26.220 --> 00:16:29.620
We screwed up the memory
management for the color.

00:16:29.760 --> 00:16:31.080
OK, that's great.

00:16:31.080 --> 00:16:36.260
But we're still a little confused
because we don't know why it's wrong.

00:16:36.260 --> 00:16:37.620
So what are we going to do?

00:16:37.800 --> 00:16:40.800
And the answer is, in this case,
that we're going to go

00:16:40.800 --> 00:16:41.720
for the documentation.

00:16:41.840 --> 00:16:45.200
So when you know it's a
memory management error,

00:16:45.200 --> 00:16:47.780
one of the nice things about
Cocoa's memory management-- well,

00:16:47.780 --> 00:16:49.240
classic memory management now.

00:16:49.240 --> 00:16:50.860
Garbage collection would be even easier,
of course,

00:16:50.870 --> 00:16:55.720
in this case-- is that we tend to
isolate our memory management code.

00:16:55.720 --> 00:16:59.060
So in the case of the cell subclass,
chances are the only places where

00:16:59.060 --> 00:17:03.450
retain or release are ever sent
are going to be in the init method,

00:17:03.450 --> 00:17:06.940
the copy method, the dealloc method,
and the accessors.

00:17:06.940 --> 00:17:08.430
So we can kind of go through those.

00:17:08.500 --> 00:17:09.860
We can say,
I know the init method's right.

00:17:09.860 --> 00:17:11.000
I know the dealloc method's right.

00:17:11.020 --> 00:17:11.990
There's nothing to it.

00:17:12.120 --> 00:17:13.240
I know my accessor's right.

00:17:13.240 --> 00:17:16.210
And at some point, we're going to say,
OK, well, by process of elimination,

00:17:16.210 --> 00:17:17.830
I thought I knew how
to write a copy method,

00:17:17.980 --> 00:17:20.860
but I guess I didn't.

00:17:20.860 --> 00:17:22.800
Or maybe you just start looking
through documentation again.

00:17:22.800 --> 00:17:25.120
Anyway, the place where you go,
first of all,

00:17:25.120 --> 00:17:28.080
is you go to the NSCopying protocol.

00:17:28.080 --> 00:17:28.920
You read through that.

00:17:28.960 --> 00:17:30.200
You don't see any information.

00:17:30.200 --> 00:17:34.040
So you go up to the conceptual doc level,
and you start to read through that.

00:17:34.040 --> 00:17:35.900
And indeed, if you look,
there's a whole section

00:17:35.900 --> 00:17:38.570
implementing option copy,
and there's a major heading which

00:17:38.570 --> 00:17:40.780
talks specifically about NSCopyObject.

00:17:40.780 --> 00:17:44.320
It says-- this is the first sentence,
I think, in the section-- you must

00:17:44.470 --> 00:17:46.680
consider the possibility that
the superclass implementation

00:17:47.040 --> 00:17:49.180
uses the NSCopyObject function.

00:17:49.190 --> 00:17:53.760
So in some sense, we all should have read
that documentation.

00:17:53.760 --> 00:17:55.780
We probably mostly have.

00:17:55.780 --> 00:17:58.040
But I, at least, didn't remember it.

00:17:58.240 --> 00:17:58.860
Why didn't I remember?

00:17:58.860 --> 00:18:01.990
Probably because I read that
NSCopying information within the

00:18:01.990 --> 00:18:03.510
first few weeks of Cocoa programming.

00:18:03.680 --> 00:18:05.380
And at the time,
I didn't realize that that

00:18:05.380 --> 00:18:06.740
was at all interesting.

00:18:06.740 --> 00:18:11.440
I couldn't distinguish between that
and the more usual Cocoa patterns,

00:18:11.440 --> 00:18:13.760
which I was also learning at the time.

00:18:14.340 --> 00:18:15.780
Okay, but that is very typical.

00:18:15.780 --> 00:18:19.170
So I do want to emphasize now,
I think for some of the people

00:18:19.190 --> 00:18:21.410
who have been around for a while,
some people tend to think of our

00:18:21.410 --> 00:18:22.960
documentation as not being so great.

00:18:23.060 --> 00:18:26.260
For a while, it had a lot of things like
documentation forthcoming,

00:18:26.280 --> 00:18:28.080
or was it description forthcoming?

00:18:28.140 --> 00:18:29.470
I'm not quite sure now.

00:18:29.520 --> 00:18:30.440
Okay.

00:18:30.440 --> 00:18:33.980
Anyway,
but that's really not true anymore.

00:18:33.980 --> 00:18:37.180
The documentation is very
solid and tells you pretty much

00:18:37.370 --> 00:18:38.980
everything you need to know.

00:18:38.980 --> 00:18:41.220
But one thing we don't document,
to my knowledge,

00:18:41.220 --> 00:18:43.680
is sort of how you go about
using the documentation.

00:18:43.680 --> 00:18:44.750
There is a pattern to it.

00:18:44.750 --> 00:18:47.380
For an experienced Cocoa developer,
you always want to go for

00:18:47.380 --> 00:18:48.950
the API documentation first.

00:18:48.950 --> 00:18:51.620
If you have a string question,
go look at the NSString docs.

00:18:51.680 --> 00:18:54.290
When that fails you,
or when you don't see what you

00:18:54.290 --> 00:18:56.930
want to know at that point,
you want to go up and read

00:18:56.930 --> 00:19:00.070
the conceptual documentation,
typically linked at the top

00:19:00.070 --> 00:19:02.020
of the API documentation file.

00:19:02.020 --> 00:19:04.220
And then once you've read
through any information that

00:19:04.220 --> 00:19:06.960
looks relevant at that level,
that's when you want to go to Google.

00:19:06.960 --> 00:19:09.290
That's when you want to start
searching the mailing list,

00:19:09.290 --> 00:19:10.910
trying to find some good information.

00:19:10.990 --> 00:19:13.660
It is worth noting also, though,
for people who are

00:19:13.660 --> 00:19:16.520
somewhat more new to Cocoa,
it's not really worth reading the

00:19:16.520 --> 00:19:20.290
API documentation until you understand
our four or five sort of design patterns

00:19:20.730 --> 00:19:23.090
that are used just absolutely everywhere.

00:19:23.090 --> 00:19:26.000
You have to understand our
memory management scheme,

00:19:26.000 --> 00:19:28.750
you have to understand delegates,
notifications,

00:19:28.830 --> 00:19:30.410
just a few things like that.

00:19:30.410 --> 00:19:32.980
Last,
I did want to mention the release notes.

00:19:32.980 --> 00:19:35.880
In the AppKit group,
we absolutely assume that you're

00:19:35.880 --> 00:19:38.660
reading our release notes,
because there are going

00:19:38.660 --> 00:19:41.130
to be changes that we,
when we do make a change,

00:19:41.130 --> 00:19:43.640
like I was mentioning with NSString,
we're going to be doing a lot of changes.

00:19:43.640 --> 00:19:46.280
So if you have a nice copy object where
there's a chance that it could break you

00:19:46.320 --> 00:19:49.920
if you recompile your app on Leopard,
that is, the release notes are where

00:19:49.920 --> 00:19:51.660
that information is going to be.

00:19:51.660 --> 00:19:53.600
So that is sort of required reading.

00:19:56.300 --> 00:19:59.260
Okay, that is all I have to
say about NSCOPY Object.

00:19:59.320 --> 00:20:02.900
So now I'm going to go on
and the documentation too.

00:20:02.900 --> 00:20:05.130
So now we're going to go on and
talk about F-Script a little bit.

00:20:05.310 --> 00:20:09.980
So F-Script is a tool which you
may or may not be familiar with,

00:20:10.140 --> 00:20:12.860
but it is an aid for this talk anyway.

00:20:12.860 --> 00:20:16.520
It's many things,
but for this talk I want to talk

00:20:16.550 --> 00:20:21.250
about it as an aid for debugging
your Objective-C application

00:20:21.250 --> 00:20:25.290
and exploring Cocoa and learning
how to use the framework.

00:20:25.290 --> 00:20:25.290
So

00:20:25.500 --> 00:20:28.780
So certainly a lot of authoring
an app is exploration.

00:20:28.780 --> 00:20:32.790
So you have something you want to do,
and you don't know how to do it.

00:20:33.350 --> 00:20:35.740
What do you do when you're
in this circumstance?

00:20:35.740 --> 00:20:37.740
The first thing you want to
do is go to the documentation,

00:20:37.840 --> 00:20:40.080
but then you probably do want
to run some sort of experiments.

00:20:40.080 --> 00:20:42.210
You want to solidify that
knowledge one way or another.

00:20:42.450 --> 00:20:46.060
A lot of people will go write a
small Objective-C test application

00:20:46.060 --> 00:20:48.750
just to exercise their knowledge.

00:20:48.810 --> 00:20:51.320
That's a good thing to do.

00:20:51.320 --> 00:20:54.040
Another alternative, though,
is to use something like F-Script.

00:20:54.040 --> 00:20:58.740
F-Script is a runtime
interactive scripting language

00:20:58.740 --> 00:21:00.090
that lets you work with Cocoa.

00:21:00.090 --> 00:21:01.720
It's really a lot like Objective-C.

00:21:01.720 --> 00:21:04.360
It's designed for use with Cocoa.

00:21:04.450 --> 00:21:07.360
It has no life outside of Cocoa.

00:21:07.360 --> 00:21:08.960
It looks a lot like
Objective-C without brackets.

00:21:08.960 --> 00:21:10.420
We're going to demo it,
and we're going to look at

00:21:10.420 --> 00:21:12.170
the syntax a little bit.

00:21:12.180 --> 00:21:14.810
But like I said, the really interesting
part is that it's very,

00:21:14.810 --> 00:21:19.400
very runtime, and it lets you add your
Objective-C object model.

00:21:19.420 --> 00:21:20.860
It's free and open source.

00:21:20.860 --> 00:21:21.980
It's BSD licensed.

00:21:21.980 --> 00:21:25.190
The author is Philippe Mougin,
who is in the audience

00:21:25.220 --> 00:21:27.760
somewhere here today.

00:21:31.800 --> 00:21:33.100
You can take a bow
afterwards or something,

00:21:33.100 --> 00:21:35.700
I guess.

00:21:35.700 --> 00:21:37.430
And it's really a pretty good tool.

00:21:37.460 --> 00:21:40.610
So mostly what I want to do
is demo it for you and talk

00:21:40.610 --> 00:21:41.880
about while I'm demoing it.

00:21:41.950 --> 00:21:45.160
But I don't want to get lost,
so I do have to give you a

00:21:45.160 --> 00:21:47.090
little bit of a syntax primer.

00:21:47.980 --> 00:21:49.660
As I said,
it really looks a lot like Objective-C.

00:21:49.660 --> 00:21:50.520
There's a few differences.

00:21:50.520 --> 00:21:55.380
So in Objective-C, we surround message
invocations with brackets.

00:21:55.430 --> 00:21:58.680
In F-Script,
you don't need to type anything there.

00:21:58.680 --> 00:22:01.310
If you need to disambiguate
the order of message sends,

00:22:01.310 --> 00:22:02.700
you can use parentheses.

00:22:02.700 --> 00:22:06.790
But in circumstances where it's not
required and there's a precedence rule,

00:22:06.790 --> 00:22:09.510
then you just don't need
to type anything at all.

00:22:09.550 --> 00:22:12.140
For assignment,
you don't use equals operator.

00:22:12.140 --> 00:22:14.000
You use the colon equals operator.

00:22:14.000 --> 00:22:14.740
No big deal.

00:22:14.740 --> 00:22:15.870
For string literals,
instead of using at quotes,

00:22:15.940 --> 00:22:16.620
you don't use equals operator.

00:22:16.620 --> 00:22:17.450
You use the colon equals operator.

00:22:17.450 --> 00:22:17.880
No big deal.

00:22:17.900 --> 00:22:19.740
For string literals,
instead of using at quotes,

00:22:19.740 --> 00:22:20.760
you use single quotes.

00:22:20.790 --> 00:22:23.900
And everything in F-Script is an object.

00:22:23.930 --> 00:22:25.600
They're all basically typed id.

00:22:25.630 --> 00:22:29.310
So we don't bother to
declare variable types.

00:22:29.400 --> 00:22:31.200
There's no utility to it.

00:22:34.680 --> 00:22:40.280
OK, so if I could have the demo machine,
I'd like to show this off a little bit.

00:22:40.280 --> 00:22:43.840
What we're going to do is
we're going to use everybody's

00:22:43.960 --> 00:22:48.100
favorite demo application,
which is TextEdit.

00:22:48.350 --> 00:22:54.210
And we're going to say,
suppose that we are interested in,

00:22:54.300 --> 00:22:56.600
for some reason,
programmatically adding an image

00:22:56.600 --> 00:23:00.630
to this menu item right here,
this automatic menu item.

00:23:00.640 --> 00:23:02.890
Okay, now the reason why we're
bothering to do this,

00:23:02.890 --> 00:23:05.290
why we're bothering to experiment
with this at all is that we went

00:23:05.290 --> 00:23:07.980
and looked at documentation,
and we noticed that it actually

00:23:07.980 --> 00:23:12.190
says that the set image method on
NSPopupButton doesn't do anything.

00:23:12.200 --> 00:23:16.680
And that's because the image
actually comes from the menu items,

00:23:16.680 --> 00:23:18.140
which are inside.

00:23:18.300 --> 00:23:21.360
So rather than setting the image
on the pop-up button itself,

00:23:21.450 --> 00:23:23.710
we're going to get its first
menu item and set an image there.

00:23:23.720 --> 00:23:27.760
Okay, but first of all,
so you might notice that TextEdit looks

00:23:27.760 --> 00:23:30.520
a little tiny bit different than usual.

00:23:30.520 --> 00:23:33.000
It has an extra menu up there, FSA.

00:23:33.000 --> 00:23:36.220
That stands for F-Script Anywhere,
which is to say that it's

00:23:36.220 --> 00:23:39.400
running in your application as
opposed to its own application.

00:23:39.400 --> 00:23:41.880
Now,
an interesting feature of this is that

00:23:41.880 --> 00:23:44.140
I did not alter the TextEdit project.

00:23:44.200 --> 00:23:47.340
The Xcode project has not been modified.

00:23:47.540 --> 00:23:48.400
There are no extra nibs.

00:23:48.400 --> 00:23:50.100
I didn't programmatically add this menu.

00:23:50.100 --> 00:23:54.180
It was injected at
runtime using Mach inject.

00:23:54.180 --> 00:23:57.420
So this is actually kind of nice
because it lets you work with your

00:23:57.420 --> 00:24:00.980
application without messing with
your Xcode project whatsoever.

00:24:00.980 --> 00:24:02.340
You can be sure you're not messing it up.

00:24:02.420 --> 00:24:04.880
You're just doing some debugging
or exploration or something.

00:24:04.880 --> 00:24:06.300
So anyway, let's pull this up.

00:24:06.430 --> 00:24:12.260
So I was telling you that it was in
some way interactive and runtime.

00:24:12.260 --> 00:24:15.230
And what I mean by that is here
we have a flashing cursor prompt.

00:24:15.240 --> 00:24:16.760
If I type NSImage.

00:24:17.180 --> 00:24:18.640
Well, it does something or other.

00:24:18.640 --> 00:24:24.180
That's actually printing the description
method for the NSImage class object.

00:24:24.220 --> 00:24:29.340
And if I say image named exactly
as I did in the sample before.

00:24:29.340 --> 00:24:31.190
If I can type.

00:24:31.200 --> 00:24:32.610
Okay.

00:24:34.440 --> 00:24:39.470
Well, we just printed out an image.

00:24:39.610 --> 00:24:42.530
And at this point,
I almost want to stop and just

00:24:42.570 --> 00:24:46.280
look at this for a minute,
because it's pretty great.

00:24:46.280 --> 00:24:48.620
We're just completely
working with Cocoa Runtime.

00:24:48.620 --> 00:24:50.350
There was no need to
compile anything at all.

00:24:50.440 --> 00:24:52.240
And this is completely a
feature of Objective-C.

00:24:52.240 --> 00:24:53.360
It's just so dynamic.

00:24:53.360 --> 00:24:55.980
And we all know that,
but it just becomes so much more obvious

00:24:55.980 --> 00:24:58.170
when you start working with it like this.

00:24:58.260 --> 00:25:01.200
You realize it hardly
even needs to be compiled.

00:25:01.200 --> 00:25:05.440
It's faster if it's compiled,
but we can do pretty much

00:25:05.440 --> 00:25:07.420
everything we want at runtime.

00:25:07.600 --> 00:25:10.080
So let's go ahead and give this a name.

00:25:10.080 --> 00:25:15.940
I'm going to call that app icon and use
the colon equals operator to assign.

00:25:15.990 --> 00:25:19.900
And now if I refer to that,
I have this icon here.

00:25:20.180 --> 00:25:21.980
So let's go ahead and try to set this.

00:25:22.000 --> 00:25:25.790
So this is the interpreter
that I mentioned before,

00:25:25.880 --> 00:25:30.160
but there is a second
component to F-Script-- well,

00:25:30.210 --> 00:25:34.300
second in some sense--
which is the object browser.

00:25:34.520 --> 00:25:35.680
So this is pretty good.

00:25:35.760 --> 00:25:38.790
So right here we have something
in this leftmost column,

00:25:38.790 --> 00:25:39.620
which is App Icon.

00:25:39.620 --> 00:25:41.920
If I click on it, what are we seeing?

00:25:41.980 --> 00:25:46.110
We're seeing lots of
properties of that image.

00:25:46.550 --> 00:25:49.250
Furthermore, if we go down,
we're not just seeing properties,

00:25:49.280 --> 00:25:50.140
we're seeing methods.

00:25:50.140 --> 00:25:54.770
And if I were to click on one of these,
it will actually invoke the method.

00:25:54.770 --> 00:25:57.780
So hasAlpha is true for this image.

00:26:00.900 --> 00:26:01.960
You may be used to this sort of thing.

00:26:01.960 --> 00:26:04.420
This is somewhat similar
to the DOM browser that you

00:26:04.420 --> 00:26:06.670
might use for web development,
or it's a little bit similar to

00:26:06.670 --> 00:26:08.940
the Accessibility Inspector that
comes installed in the machine if

00:26:08.940 --> 00:26:10.000
you're doing accessibility work.

00:26:10.080 --> 00:26:13.630
But this is obviously sort
of explicitly for Cocoa.

00:26:13.640 --> 00:26:19.380
We're looking at the Cocoa object
hierarchy as opposed to the accessibility

00:26:19.380 --> 00:26:20.590
hierarchy or as opposed to the DOM.

00:26:20.600 --> 00:26:22.380
Anyway, so this is pretty good, too.

00:26:22.380 --> 00:26:24.560
I'm going to click the
Select View button,

00:26:24.560 --> 00:26:27.870
which allows me to go over and just
click on the pop-up button over here,

00:26:27.880 --> 00:26:29.330
and now I get a pointer to it.

00:26:31.040 --> 00:26:32.470
Uh...

00:26:33.060 --> 00:26:36.940
So I could name this variable,
I could name a pop-up, this object,

00:26:37.150 --> 00:26:39.140
and if I were to go over
here and print it out,

00:26:39.140 --> 00:26:42.040
now I have a pointer to the
pop-up that I can work with.

00:26:42.040 --> 00:26:43.100
But I'm not even going to do that.

00:26:43.100 --> 00:26:44.860
So first I'm going to verify
what we saw in the documentation.

00:26:44.860 --> 00:26:48.170
I'm going to call setImage
here with the app icon,

00:26:48.270 --> 00:26:50.080
and we expect nothing.

00:26:50.170 --> 00:26:52.500
"And, oh, we actually got something.

00:26:52.600 --> 00:26:54.540
So it removed the title.

00:26:54.540 --> 00:26:57.220
And I do know what's going on here.

00:26:57.220 --> 00:26:59.100
That was a little bit of a setup.

00:26:59.140 --> 00:27:01.280
What happened is that the
pop-up button happens to be

00:27:01.350 --> 00:27:03.740
configured for NSImage only.

00:27:03.920 --> 00:27:08.530
So when it has an image and a title,
it tries to--

00:27:08.820 --> 00:27:10.530
"Not use the title at all.

00:27:10.830 --> 00:27:14.100
But unfortunately in this case it
won't display the image either.

00:27:14.100 --> 00:27:15.850
So that should have restarted.

00:27:20.500 --> 00:27:21.500
Okay.

00:27:21.500 --> 00:27:26.380
Let's try to fix that up quickly.

00:27:28.830 --> 00:27:29.300
"Is that better?

00:27:29.310 --> 00:27:30.500
Okay, that's a little better.

00:27:30.510 --> 00:27:31.640
All right.

00:27:31.730 --> 00:27:32.200
So moving on.

00:27:32.200 --> 00:27:35.500
So now we're going to try to do it
the way we were intended to do it.

00:27:35.870 --> 00:27:36.360
Oh, I'm sorry.

00:27:36.360 --> 00:27:37.220
I meant to mention.

00:27:37.220 --> 00:27:44.330
So we have this large list over here,
which is a little bit hard to

00:27:44.330 --> 00:27:46.780
manage in some ways just because
there's so much information.

00:27:46.780 --> 00:27:46.780
But if we click over
here in the search field,

00:27:46.780 --> 00:27:46.780
we can filter it.

00:27:46.890 --> 00:27:50.500
So if I type image,
we're only seeing properties and

00:27:50.500 --> 00:27:53.540
methods that have image in the name.

00:27:53.800 --> 00:27:56.940
If I type menu,
we're only going to see the menu items.

00:27:56.940 --> 00:28:00.620
If I go over here and set
the image for this menu item,

00:28:03.980 --> 00:28:04.820
Then there it is.

00:28:04.840 --> 00:28:06.020
Oh,
but that was a little bit interesting,

00:28:06.030 --> 00:28:06.280
too.

00:28:06.280 --> 00:28:09.220
We see that as it happens,
a menu item's not going to

00:28:09.220 --> 00:28:11.020
resize an image for you.

00:28:11.070 --> 00:28:12.500
OK, so that was interesting information.

00:28:12.500 --> 00:28:14.720
That may or may not have
just saved us a recompile,

00:28:14.770 --> 00:28:17.900
because now we know that we
have to size the image first.

00:28:17.980 --> 00:28:20.410
So if we take our app icon--

00:28:21.010 --> 00:28:24.360
and we call setSize.

00:28:24.370 --> 00:28:25.860
This is-- I'll cover this in a minute.

00:28:25.860 --> 00:28:28.090
This is one of the slightly
unfortunate features about F-Script.

00:28:28.170 --> 00:28:29.710
It can't deal with any C types.

00:28:29.870 --> 00:28:32.640
So if you want to pass
something around like a size,

00:28:32.680 --> 00:28:35.780
there are a few extensions to create one.

00:28:40.310 --> 00:28:43.570
OK, that sets its size.

00:28:43.690 --> 00:28:44.980
We can see it printed out there.

00:28:44.980 --> 00:28:46.620
The size is 13 by 13.

00:28:46.620 --> 00:28:48.410
By the way, also note the image reps.

00:28:48.420 --> 00:28:51.290
Oftentimes with images,
it actually can be quite useful to be

00:28:51.290 --> 00:28:53.490
able to see what the image reps are.

00:28:53.640 --> 00:28:56.820
Let's clear that and set
it to the app icon again.

00:28:56.830 --> 00:28:58.900
And this time it worked.

00:29:04.400 --> 00:29:05.460
Okay, can I have the slides back, please?

00:29:05.460 --> 00:29:10.880
All right,
so let's go through that a little bit.

00:29:10.910 --> 00:29:13.450
Let's think about what we just
saw and what was good about it,

00:29:13.450 --> 00:29:14.610
what we really gained.

00:29:14.620 --> 00:29:17.960
So we were just using
point-and-click debugging.

00:29:17.960 --> 00:29:21.340
You saw I clicked this browse button,
and I clicked on the pop-up button,

00:29:21.340 --> 00:29:23.590
and I was able to work
with the pop-up button.

00:29:23.640 --> 00:29:24.710
What was so good about that?

00:29:24.960 --> 00:29:26.660
Well, for one thing,
we didn't have to chase

00:29:26.660 --> 00:29:27.800
down the relevant code.

00:29:28.020 --> 00:29:30.010
We were also able to tell
what the relevant code was.

00:29:30.070 --> 00:29:32.560
I don't know if you noticed,
but the class name for that pop-up button

00:29:32.560 --> 00:29:37.480
was "Encoding Pop-up Button." So if
I find that I do need to alter the code,

00:29:37.480 --> 00:29:38.760
I know where to go.

00:29:39.000 --> 00:29:46.960
This is a good time saver.

00:29:46.960 --> 00:29:46.960
When you just need to
work with something,

00:29:46.960 --> 00:29:46.960
you don't necessarily
need its source code.

00:29:47.200 --> 00:29:49.500
slightly more subtle point,
we don't end up making as many

00:29:49.500 --> 00:29:52.280
assumptions about the state of an
object when we work with F script as we

00:29:52.280 --> 00:29:54.120
do when we're usually debugging things.

00:29:54.120 --> 00:29:58.030
Normally we get into a situation where
we say I know how this is configured

00:29:58.620 --> 00:30:02.300
because I configured it back here so
that's probably how what it is now.

00:30:02.310 --> 00:30:05.530
But you don't really know if it might
have changed in the interim and you

00:30:05.530 --> 00:30:06.950
have to sort of reason about it.

00:30:06.950 --> 00:30:09.990
If you're using something like F script
you don't know why an object is

00:30:10.050 --> 00:30:13.860
configured the way it is necessarily but
you know exactly how it is configured.

00:30:13.860 --> 00:30:16.710
You can just look at its properties
and see what it is right now.

00:30:16.930 --> 00:30:18.480
Also good when something goes wrong.

00:30:18.480 --> 00:30:20.190
You load up F script and
you say oh why isn't,

00:30:20.190 --> 00:30:21.180
what's wrong there?

00:30:21.180 --> 00:30:21.970
Why don't I see text?

00:30:22.070 --> 00:30:24.420
Oh because my text is the
empty string for some reason.

00:30:24.440 --> 00:30:26.550
Okay so somebody set
it to the empty string.

00:30:26.610 --> 00:30:29.480
You saw the way I was using
the search field up there.

00:30:29.570 --> 00:30:32.950
That can be a good way to avoid sort
of unnecessary in some circumstances

00:30:32.950 --> 00:30:34.290
trips to the documentation.

00:30:34.290 --> 00:30:38.570
An example of that might be if
you have a window that you're

00:30:38.570 --> 00:30:40.520
moving around for some reason.

00:30:40.700 --> 00:30:42.230
Well if you're

00:30:42.700 --> 00:32:56.400
[Transcript missing]

00:32:57.170 --> 00:33:00.340
OK, so let's just do a few other
quick little things that are

00:33:00.340 --> 00:33:01.520
sort of interesting with this.

00:33:01.540 --> 00:33:04.070
So can I have the demo
machine back again?

00:33:06.300 --> 00:33:09.380
Okay, so if you've been reading
our documentation,

00:33:09.380 --> 00:33:12.390
you know that we have sort
of this interesting concept,

00:33:12.400 --> 00:33:13.360
which is the field editor.

00:33:13.360 --> 00:33:17.120
The field editor is a text field object.

00:33:17.120 --> 00:33:21.270
It's actually sort of kind of
dumb or dumber than you'd think.

00:33:21.280 --> 00:33:22.700
It doesn't really do text layout.

00:33:22.700 --> 00:33:24.020
It doesn't do text editing.

00:33:24.020 --> 00:33:27.280
It doesn't do very much at all
other than just sort of contain.

00:33:27.280 --> 00:33:30.810
But whenever there is real
text editing to be done,

00:33:30.810 --> 00:33:33.920
a field editor object,
which is a text view,

00:33:33.920 --> 00:33:35.710
gets swapped in on top.

00:33:36.200 --> 00:33:39.460
So it's sort of very transparent,
but when I change between fields here,

00:33:39.460 --> 00:33:43.350
what the documentation would have
you believe is that there is a

00:33:43.350 --> 00:33:48.010
single shared text view that's
being used in different places.

00:33:48.020 --> 00:33:50.260
Well,
we can at least sort of start to at least

00:33:50.300 --> 00:33:52.560
believe the documentation a little bit.

00:33:52.680 --> 00:33:55.630
If I go over here and click with
F-Script on the second field,

00:33:55.640 --> 00:33:59.300
which is not the one which has focus,
I see that it's an NSText field.

00:33:59.300 --> 00:34:02.780
But if I click on the first one,
it's a text view.

00:34:02.780 --> 00:34:06.100
So yeah, there's a field editor there,
and it sort of demonstrates.

00:34:06.100 --> 00:34:07.930
extremely different.

00:34:08.070 --> 00:34:11.880
And we can see, for example,
if we were to go get the

00:34:11.880 --> 00:34:15.700
delegate of the text view,
we'd find that it was the original field.

00:34:15.700 --> 00:34:17.070
So that's the way that gets set up.

00:34:17.140 --> 00:34:18.960
Okay, that's interesting.

00:34:18.960 --> 00:34:22.340
And then a question I had
a few months ago was,

00:34:22.340 --> 00:34:27.460
how about for non-editable text
fields but selectable text fields?

00:34:27.460 --> 00:34:29.940
It seems like selection is a little
too complicated for something

00:34:29.940 --> 00:34:31.160
like a text field to handle.

00:34:31.160 --> 00:34:32.860
So is that handled by the field editor?

00:34:33.440 --> 00:34:35.020
Well, let's find out.

00:34:35.070 --> 00:34:37.940
So I'm going to click over
here on this text field,

00:34:37.940 --> 00:34:40.860
which is not editable,
but for purposes of the demonstration,

00:34:40.860 --> 00:34:42.260
I want to make it editable.

00:34:42.260 --> 00:34:46.000
So the first thing we're going
to do is call set editable,

00:34:46.000 --> 00:34:50.110
and F-Script uses true instead of yes,
and now it is editable,

00:34:50.110 --> 00:34:52.020
so I can select in there.

00:34:52.200 --> 00:34:52.700
Okay.

00:34:52.700 --> 00:34:55.030
Thank you.

00:34:58.300 --> 00:35:00.680
So now I'll select again
and the question is,

00:35:00.750 --> 00:35:02.800
is it a text field or is it a text view?

00:35:02.800 --> 00:35:03.670
And view.

00:35:04.040 --> 00:35:06.540
Okay, that uses the field editor.

00:35:06.540 --> 00:35:06.770
Now we know.

00:35:08.250 --> 00:35:13.660
Not necessarily again, I mean, I'm not,
again, you don't necessarily want to rely

00:35:13.660 --> 00:35:15.820
on the things you find this way,
but it's really a good way to

00:35:15.820 --> 00:35:17.260
further your Cocoa understanding.

00:35:17.260 --> 00:35:19.460
Can I have the slides back, please?

00:35:24.080 --> 00:35:26.210
Okay, yeah, which is exactly what I want
to talk about right now.

00:35:26.240 --> 00:35:29.130
So let's speak about encapsulation,
which you may be wondering about

00:35:29.140 --> 00:35:30.240
a little bit given some of this.

00:35:30.280 --> 00:35:33.730
So it's very, very white box,
which is to say you can just

00:35:33.730 --> 00:35:36.080
see everything about everything.

00:35:36.080 --> 00:35:36.900
Nothing is hidden.

00:35:36.900 --> 00:35:38.060
Very nice for debugging.

00:35:38.060 --> 00:35:39.750
Let's you figure out what's going on.

00:35:39.790 --> 00:35:43.130
Not so nice for a few other reasons,
especially from our point of view.

00:35:43.140 --> 00:35:46.080
You're going to see private
methods when you do this.

00:35:46.080 --> 00:35:49.000
F-Script cannot distinguish between
public methods and private methods.

00:35:49.520 --> 00:35:51.500
Basically,
the point here is that we treat

00:35:51.940 --> 00:35:54.660
developers with a lot of respect,
and Objective-C treats

00:35:54.860 --> 00:35:56.110
developers with a lot of respect.

00:35:56.330 --> 00:35:58.310
There is no such thing as a
private method in Objective-C.

00:35:58.440 --> 00:36:00.680
All there is is a method that we
haven't bothered to tell you about.

00:36:04.790 --> 00:36:06.970
That doesn't mean that
you should use them.

00:36:07.040 --> 00:36:08.730
In fact, it means the opposite.

00:36:08.730 --> 00:36:11.210
It means that you have a
strong responsibility to

00:36:11.210 --> 00:36:14.240
respect the encapsulation
boundaries that we have set up,

00:36:14.240 --> 00:36:17.280
and it's in everybody's best
interest that you do so.

00:36:17.280 --> 00:36:18.540
You want us to improve the frameworks.

00:36:18.660 --> 00:36:20.960
You also don't want your programs to
crash when they're run on Leopard.

00:36:20.960 --> 00:36:22.960
Basically,
the only way that we can make that

00:36:22.960 --> 00:36:25.670
work is if you agree to adhere
to the contract that we set up.

00:36:25.760 --> 00:36:30.290
But this just becomes very,
very obvious with F-Script,

00:36:30.290 --> 00:36:32.080
so don't overdo it.

00:36:32.810 --> 00:36:34.820
You can get excited and you
can see what's going on.

00:36:34.820 --> 00:36:35.170
That's great.

00:36:35.180 --> 00:36:36.630
There's nothing wrong
with understanding Cocoa.

00:36:36.710 --> 00:36:40.280
But you need to keep a very clear
division between what you understand

00:36:40.280 --> 00:36:43.830
and what's sort of understood by
your code at any particular time.

00:36:46.490 --> 00:36:49.960
OK, let's go very quickly through some
things the interpreter is not good for,

00:36:49.960 --> 00:36:54.680
just lest you think it's panacea.

00:36:54.750 --> 00:36:58.080
Actually, I may not pronounce it right.

00:36:58.080 --> 00:37:00.400
So it's not very good for anything
you have to do multiple times.

00:37:00.400 --> 00:37:02.130
So every time the
application gets launched.

00:37:02.200 --> 00:37:04.440
Not good for unit tests,
because they won't get run.

00:37:04.510 --> 00:37:07.080
Or rather, it's not good in situations
where you might use unit tests.

00:37:07.080 --> 00:37:09.150
If you want to
interactively check things,

00:37:09.150 --> 00:37:09.890
that's great.

00:37:10.030 --> 00:37:13.340
But it's not going to get automatically
run every time your app is compiled.

00:37:13.420 --> 00:37:20.220
So it's not good for unit
testing when used in this way.

00:37:20.240 --> 00:37:23.710
I just wanted to point out that there
wasn't support for creating classes

00:37:23.710 --> 00:37:25.200
in Fscript until fairly recently.

00:37:25.270 --> 00:37:29.150
I think really what this tells you is
that it's not that useful in a way.

00:37:29.480 --> 00:37:32.090
It's nice to have support
for creating classes.

00:37:32.220 --> 00:37:34.890
But Fscript got on for years
and years and years without it.

00:37:34.920 --> 00:37:37.940
And that's just because it's not trying
to replace the Objective-C model.

00:37:38.040 --> 00:37:38.750
It's using it.

00:37:38.900 --> 00:37:40.240
It's just part of it.

00:37:40.240 --> 00:37:41.470
Oh, I did want to mention that.

00:37:41.520 --> 00:37:44.510
So another alternative to
Fscript is-- PyOpc and Python,

00:37:44.600 --> 00:37:45.740
things like that.

00:37:45.860 --> 00:37:51.580
They fulfill a lot of the same--
they help in a lot of the same ways.

00:37:51.580 --> 00:37:54.240
I wanted to cover Fscript maybe
because I think it's great.

00:37:54.270 --> 00:37:56.750
And also because it's
not as well covered,

00:37:56.750 --> 00:37:58.530
I think, as PyOpc.

00:37:58.960 --> 00:38:02.260
But that has many of the same benefits.

00:38:02.310 --> 00:38:05.020
OK, like I said,
when you're working with non-objects,

00:38:05.020 --> 00:38:06.600
Fscript's not so great.

00:38:06.600 --> 00:38:08.810
It doesn't have any concept of C at all.

00:38:08.820 --> 00:38:09.900
So you can't call functions.

00:38:09.950 --> 00:38:12.750
And if you need to create structs,
there have been additions

00:38:12.760 --> 00:38:13.340
made to Fscript.

00:38:13.340 --> 00:38:14.330
They'll let you do that.

00:38:14.380 --> 00:38:16.230
Things like sizes, as you saw.

00:38:16.250 --> 00:38:18.900
Stepping through long
sequences of function calls.

00:38:18.920 --> 00:38:19.750
I guess you could do it.

00:38:19.920 --> 00:38:22.900
You could always paste some code
over and go through one by one line.

00:38:22.900 --> 00:38:23.860
But it's not so great.

00:38:23.860 --> 00:38:25.600
Maybe you want to use
GDB for that instead.

00:38:25.600 --> 00:38:28.150
It's better for high-level
interaction bugs.

00:38:28.230 --> 00:38:30.280
Memory management is just
very naive reference counting.

00:38:30.280 --> 00:38:31.800
So you might have been wondering
what was going on there.

00:38:31.800 --> 00:38:34.620
I was just leaking when we
were running those demos.

00:38:34.620 --> 00:38:37.780
But what happens is that whenever
you name an object in Fscript,

00:38:37.860 --> 00:38:39.400
that sends it a retain message.

00:38:39.400 --> 00:38:43.890
If you ever assign something else to
that name or assign nil to the name,

00:38:43.890 --> 00:38:45.370
that will release it.

00:38:45.460 --> 00:38:46.740
Okay, that's fine.

00:38:46.740 --> 00:38:48.730
That will sort of tend to keep
things around for as long as

00:38:48.730 --> 00:38:49.900
you want for the most part.

00:38:49.920 --> 00:38:52.190
It will also tend to leak
in a lot of circumstances.

00:38:52.210 --> 00:38:54.550
If you ever end up with a cycle,
it's never going away.

00:38:54.870 --> 00:38:57.080
But it's just not that big a
deal because we're generally,

00:38:57.080 --> 00:38:59.340
at least the way I was using it here,
we're not sort of doing real

00:38:59.350 --> 00:39:00.280
programming with Fscript.

00:39:00.280 --> 00:39:02.900
We're just exploring.

00:39:02.900 --> 00:39:07.480
Okay, sometimes Fscript can change
the behavior of your app.

00:39:07.590 --> 00:39:10.030
This actually happens in TextEdit,
which is one of the reasons

00:39:10.030 --> 00:39:11.840
I was using it as an example,
actually.

00:39:11.840 --> 00:39:14.550
Fscript has a save
method that comes from,

00:39:14.550 --> 00:39:19.160
I think, Smalltalk,
that it adds as an NSObject category.

00:39:19.160 --> 00:39:23.660
Well, it happens that TextEdit
uses save as the action,

00:39:23.660 --> 00:39:24.820
that the save menu item.

00:39:24.820 --> 00:39:25.640
is connected to.

00:39:25.640 --> 00:39:27.750
So basically,
the responder chain gets all screwed

00:39:27.750 --> 00:39:29.240
up and you can't save documents.

00:39:29.240 --> 00:39:31.550
So, not so good.

00:39:31.560 --> 00:39:32.920
Hopefully,
it won't happen in your own apps,

00:39:32.920 --> 00:39:34.670
but you definitely don't want
to get fooled if it does.

00:39:34.700 --> 00:39:35.930
But like I said,
since you're not actually

00:39:35.930 --> 00:39:37.940
adding it to the Xcode project,
it's not a permanent problem.

00:39:37.940 --> 00:39:42.230
And I do still want to emphasize,
using Fscript makes you a

00:39:42.260 --> 00:39:44.660
sophisticated programmer.

00:39:44.660 --> 00:39:47.480
And you cannot start using
all the private stuff that you

00:39:47.480 --> 00:39:49.030
are probably going to find.

00:39:49.040 --> 00:39:53.560
Okay, just a quick note on
installation and getting started.

00:39:53.560 --> 00:39:54.250
There's not much to it.

00:39:54.340 --> 00:39:55.150
You have to drag that.

00:39:55.260 --> 00:39:56.760
This is what the bundle,
the package looks like

00:39:56.760 --> 00:39:57.360
when you download it.

00:39:57.460 --> 00:40:00.240
You need to drag the framework
out to your frameworks folder,

00:40:00.330 --> 00:40:01.240
say in your library.

00:40:01.450 --> 00:40:03.940
Then you want to click
on either Fscript.app.

00:40:03.940 --> 00:40:06.470
That'll just bring up an
interpreter where you can

00:40:06.470 --> 00:40:08.040
start working with the system.

00:40:08.290 --> 00:40:12.260
Or for the kind of things we're doing,
where you're actually using

00:40:12.260 --> 00:40:14.860
it to debug your existing app,
that's where you want

00:40:14.860 --> 00:40:15.790
to use Fscript anywhere.

00:40:15.880 --> 00:40:17.740
That'll show you how to
inject it into your own app.

00:40:17.750 --> 00:40:20.890
And you can set it up so it injects
automatically every time the app is run,

00:40:21.390 --> 00:40:23.810
which gives you good debugging.

00:40:23.880 --> 00:40:28.300
Okay, so let us go on to sort of
the last section of our talk,

00:40:28.450 --> 00:40:30.020
which is GDB.

00:40:32.120 --> 00:40:37.720
So GDB is the debugger that
comes with your developer tools.

00:40:37.780 --> 00:40:41.420
And it definitely fulfills a different
niche than the interpreters do.

00:40:41.420 --> 00:40:43.210
And that's actually one
of the great things,

00:40:43.210 --> 00:40:47.620
I think, about these tools,
because they do complement each other.

00:40:47.620 --> 00:40:50.050
Sorry,
I did want to say that it's good when you

00:40:50.400 --> 00:40:52.980
end up wanting to go down into a method,
when you say,

00:40:52.980 --> 00:40:56.530
this particular method does not work,
as opposed to the way these methods

00:40:56.530 --> 00:40:57.780
are wired together does not work.

00:40:57.870 --> 00:40:59.280
That's when you want to use GDB.

00:40:59.310 --> 00:41:02.180
Or maybe once you've narrowed
the problem down a little bit.

00:41:02.180 --> 00:41:05.550
OK, so I'm not going to
cover GDB a whole lot.

00:41:05.620 --> 00:41:07.660
But in particular,
since the Xcode guys are

00:41:07.660 --> 00:41:10.460
mostly interested in talking
about GDB within Xcode,

00:41:10.460 --> 00:41:13.260
just for variety,
let's talk about GDB not

00:41:13.260 --> 00:41:15.910
from within Xcode,
using Xcode's console,

00:41:16.200 --> 00:41:19.460
which gets you something a lot
closer to command line GDB.

00:41:19.460 --> 00:41:20.860
Definitely also useful.

00:41:20.860 --> 00:41:25.330
A lot of people I know really only
use this mode of working with GDB.

00:41:25.360 --> 00:41:27.280
I pretty much only use this mode, though.

00:41:27.280 --> 00:41:30.310
I really do like a lot of
the new features in Xcode.

00:41:30.440 --> 00:41:33.620
So for people who aren't aware of it,
I think it's worth looking at.

00:41:33.650 --> 00:41:36.310
But since this is a Cocoa Talk,
I want to talk about some of

00:41:36.310 --> 00:41:39.490
the things that are really
specific to Cocoa about it.

00:41:39.600 --> 00:41:47.800
Print Objects If you find yourself typing
in GDB things like "nslog_perend @% @,

00:41:47.930 --> 00:41:53.760
object_perend," you
don't need to do that.

00:41:53.760 --> 00:41:55.690
I'm not quite sure how
people find these things.

00:41:55.690 --> 00:41:57.110
I think I just stumbled on it.

00:41:57.160 --> 00:41:58.310
But there's a P-O.

00:41:58.320 --> 00:42:02.120
If you just say P-O object in GDB,
that'll print it out.

00:42:02.120 --> 00:42:06.200
I'm sure a lot of people know that,
but I bet a lot of people don't.

00:42:06.200 --> 00:42:09.890
You can also set variables in a debugger,
sort of debugger-level variables,

00:42:09.890 --> 00:42:13.660
as opposed to things you already have
space allocated for in your source.

00:42:13.660 --> 00:42:14.540
That's used.

00:42:14.540 --> 00:42:17.840
Set $VARIABLE_NAME equals
something or other.

00:42:17.840 --> 00:42:20.740
And you can set breakpoints
from the command line as well.

00:42:20.740 --> 00:42:21.600
And this is the syntax.

00:42:21.600 --> 00:42:23.740
So either break on a function,
for example,

00:42:23.740 --> 00:42:27.500
or break on our standard way of
writing out an Objective-C method.

00:42:27.520 --> 00:42:33.410
So dash or plus if it's a class method,
brackets, class name, method name, colon,

00:42:33.420 --> 00:42:35.320
and colons as appropriate.

00:42:35.320 --> 00:42:38.470
Ken Ferrry Print Objects Okay, so, uh...

00:42:38.750 --> 00:42:41.430
In particular, there are,
for working with Cocoa,

00:42:41.630 --> 00:42:44.760
some breakpoints that a lot of
people like to set all the time,

00:42:44.760 --> 00:42:47.300
at least some of them,
because they almost

00:42:47.300 --> 00:42:48.760
always signal app error.

00:42:48.760 --> 00:42:50.900
If you ever see an
exception raised in Cocoa,

00:42:50.900 --> 00:42:53.070
it always means something has gone wrong.

00:42:53.080 --> 00:42:55.820
This is something that people from other
languages like Java or Python don't

00:42:55.820 --> 00:42:58.820
necessarily realize about Cocoa,
but the way we use exceptions is that

00:42:58.820 --> 00:43:00.680
they always signal programmer error.

00:43:01.250 --> 00:43:04.600
You will not even see exceptions
raised and caught internally to

00:43:04.660 --> 00:43:06.560
the frameworks that we create.

00:43:06.560 --> 00:43:09.950
You won't see that within GapKit or
anything like that at all.

00:43:09.960 --> 00:43:13.620
If you ever see an exception raised,
it means something has gone wrong.

00:43:13.660 --> 00:43:15.860
So it's a good idea to
put a breakpoint on that.

00:43:15.910 --> 00:43:19.180
Now, you do also need to put a
breakpoint on obse exception throw.

00:43:19.180 --> 00:43:22.290
This is because there's a
language extension made,

00:43:22.290 --> 00:43:26.200
maybe in the 10.2 timeframe,
the at throw directive,

00:43:26.200 --> 00:43:29.470
which basically just brought
exception support down to the

00:43:29.470 --> 00:43:31.080
language level instead of being done.

00:43:31.260 --> 00:43:32.200
So you can do that at the Cocoa level.

00:43:32.200 --> 00:43:35.110
But it doesn't go through
quite the same path yet.

00:43:35.200 --> 00:43:37.190
We'd like to make it go
through the same path,

00:43:37.230 --> 00:43:39.200
but it doesn't today,
so you need to set two breakpoints.

00:43:39.200 --> 00:43:42.630
AutoZone resurrect.

00:43:43.200 --> 00:43:46.670
So this is a new breakpoint
that you want to set if you're

00:43:46.670 --> 00:43:47.860
working with garbage collection.

00:43:47.860 --> 00:43:53.280
So we already talked about zombies,
which is one way objects fail to die.

00:43:53.280 --> 00:43:55.100
Unfortunately,
there's also resurrection now,

00:43:55.100 --> 00:43:56.820
so we're sort of going through
all these possibilities.

00:43:56.820 --> 00:43:59.380
But resurrection is a lot
less nice than zombies.

00:43:59.380 --> 00:44:01.780
Resurrection occurs when
there's an object which has

00:44:01.780 --> 00:44:05.720
been marked for deletion,
but has somehow been added

00:44:05.720 --> 00:44:09.200
to an object which is live,
and then suddenly is

00:44:09.200 --> 00:44:10.390
supposed to be live again.

00:44:10.400 --> 00:44:11.800
That's very bad for our collector.

00:44:12.120 --> 00:44:14.400
I won't go into that
too much because Blaine,

00:44:14.400 --> 00:44:17.680
I think, did actually a pretty nice
job of covering this in his

00:44:17.680 --> 00:44:20.160
garbage collection talk,
and it was packed,

00:44:20.250 --> 00:44:21.160
so I bet you were all there.

00:44:21.240 --> 00:44:26.580
Now, unfortunately,
this doesn't... In our own testing,

00:44:26.670 --> 00:44:29.260
we found that at the moment,
at least in your seed,

00:44:29.260 --> 00:44:32.320
the AutoZone resurrect does
not catch all of the GC errors

00:44:32.320 --> 00:44:33.180
that you might hope it would.

00:44:33.180 --> 00:44:36.500
So another good breakpoint
to set is malloc printf.

00:44:36.600 --> 00:44:39.440
That's when you see messages
logged in the console,

00:44:39.440 --> 00:44:41.740
and this will show you what's
going on in some cases.

00:44:42.120 --> 00:44:45.240
You probably don't want to
set that one all the time.

00:44:46.010 --> 00:44:48.350
Okay,
so another nice thing that you can do

00:44:48.360 --> 00:44:55.590
in the console in GDB that you cannot
do right now in the UI is print out...

00:44:56.000 --> 00:45:11.300
[Transcript missing]

00:45:11.940 --> 00:45:13.900
So it does happen that if you
set a breakpoint on one of

00:45:13.900 --> 00:45:17.460
those internal app get methods,
even though you can't say po self,

00:45:17.500 --> 00:45:19.660
because there's no local
variable named self,

00:45:19.720 --> 00:45:22.160
you can still figure out
how to print that out.

00:45:22.160 --> 00:45:23.260
You can print out all your parameters.

00:45:23.260 --> 00:45:26.780
So up here what I have on the slide is,
oh, sorry,

00:45:27.030 --> 00:45:32.610
and the way that works basically is
that the compiler has conventions for

00:45:32.610 --> 00:45:36.260
how it passes arguments to a function.

00:45:36.600 --> 00:45:39.870
So when a function gets invoked, so okay,
so execution jumps to that point,

00:45:39.870 --> 00:45:42.700
but it has to know where to find
the arguments to the function.

00:45:42.700 --> 00:45:45.940
And that all has to be documented
or else things don't work right.

00:45:45.940 --> 00:45:46.780
And it is documented.

00:45:46.780 --> 00:45:48.180
I have the full URL at the bottom.

00:45:48.180 --> 00:45:50.420
It's different on
different architectures.

00:45:50.490 --> 00:45:53.260
It's also different with
different argument types.

00:45:53.260 --> 00:45:56.840
What I put on the board here is
for when all your argument types

00:45:56.840 --> 00:45:59.000
are all objects and returns too.

00:45:59.000 --> 00:46:01.260
But it's still very useful.

00:46:01.260 --> 00:46:05.160
And even if you're not going to
memorize all of the documentation

00:46:05.160 --> 00:46:08.350
for how the calling can work,
so how you would print everything out,

00:46:08.490 --> 00:46:09.420
you don't really need to.

00:46:09.420 --> 00:46:11.720
I mean, even just what I put up
here is pretty useful.

00:46:11.720 --> 00:46:16.320
So on PowerPC, you find your arguments
in registers usually.

00:46:16.320 --> 00:46:18.510
So self is always going to be in $R3.

00:46:18.510 --> 00:46:21.460
This is only when you
break on the method itself.

00:46:21.550 --> 00:46:23.440
Since it's a register,
it'll get changed in the

00:46:23.530 --> 00:46:24.390
course of the method.

00:46:24.390 --> 00:46:26.390
But at the beginning, that's where it is.

00:46:26.440 --> 00:46:30.080
The first Objective-C argument
you're going to find in R5,

00:46:30.080 --> 00:46:34.420
and then more arguments 6 through 10,
and the result is in R3.

00:46:36.480 --> 00:46:39.420
So it's not actually exactly the same,
but in this case, it's the same.

00:46:39.420 --> 00:46:43.950
X86-64, similarly,
arguments are passed in registers.

00:46:44.050 --> 00:46:47.360
You kind of see the odd
one out here is on I386.

00:46:47.360 --> 00:46:50.770
If you want to print out your
arguments in methods where

00:46:50.770 --> 00:46:53.060
you don't have the source,
it's quite a bit different.

00:46:53.170 --> 00:46:57.310
The reason here is that I386 doesn't
have very many registers to work with,

00:46:57.310 --> 00:47:01.270
so arguments are passed on the stack.

00:47:01.510 --> 00:47:04.360
We don't need to go into it too much,
I don't think.

00:47:04.360 --> 00:47:05.740
This is just sort of
the magic invocation.

00:47:05.740 --> 00:47:11.180
Everything is off by an
offset from this EBP register.

00:47:11.180 --> 00:47:13.760
The nice thing about this, though,
is that actually on all

00:47:13.760 --> 00:47:16.450
the other architectures,
you have to break right at

00:47:16.560 --> 00:47:20.980
the beginning of the method if
you want to see the arguments.

00:47:20.980 --> 00:47:23.460
If you go down,
then they're no longer going to be valid.

00:47:23.460 --> 00:47:26.070
But on I-386,
because it's sort of on the stack,

00:47:26.070 --> 00:47:27.040
it's permanent.

00:47:27.040 --> 00:47:31.190
And you can see it throughout the
entire implementation of the method.

00:47:31.430 --> 00:47:34.610
Okay.

00:47:35.030 --> 00:47:36.520
Let's go back to the
machine for a minute.

00:47:36.520 --> 00:47:39.490
This is an i386 machine,
and I just wanted to

00:47:39.490 --> 00:47:41.020
show you how this works.

00:47:46.560 --> 00:47:52.040
So I just launched
TextEdit in debugging mode,

00:47:52.050 --> 00:47:54.750
and I'm going to pull up the console.

00:47:55.840 --> 00:47:58.920
Okay, we're going to set a
breakpoint as we discussed.

00:47:58.920 --> 00:48:01.660
Oops, I need to pause it first.

00:48:01.700 --> 00:48:03.380
I think I can do that now with Control-C.

00:48:05.180 --> 00:48:09.870
I'm going to set the breakpoint on,
since we were looking at it before,

00:48:09.960 --> 00:48:12.020
NSL set image, colon, like that.

00:48:12.020 --> 00:48:13.310
OK.

00:48:13.380 --> 00:48:14.330
So that's a breakpoint.

00:48:14.330 --> 00:48:16.140
I'm going to continue.

00:48:16.200 --> 00:48:17.100
Go back to TextEdit.

00:48:17.100 --> 00:48:19.680
Let's pull up a Preferences panel.

00:48:19.680 --> 00:48:22.190
I happen to know this is
going to trigger the method.

00:48:22.190 --> 00:48:23.800
So we just hit the breakpoint.

00:48:23.800 --> 00:48:24.830
There's no source.

00:48:24.830 --> 00:48:27.230
We're still going to
print everything out.

00:48:28.660 --> 00:48:34.930
So, PO, Print Object, again, star,
id star, oops.

00:48:35.880 --> 00:48:41.360
of, now it was $EBP plus 8.

00:48:41.630 --> 00:48:48.820
Hi, I'm Ken Ferrhy,
and I'm a developer at GDB.

00:48:48.820 --> 00:48:58.580
I'm going to talk about how to
manage your application with GDB.

00:48:58.580 --> 00:48:58.580
In this case,
I'm going to talk about how to

00:48:58.580 --> 00:48:58.580
manage your application with GDB.

00:48:58.580 --> 00:48:58.580
I'm going to talk about how to
manage your application with GDB.

00:48:58.580 --> 00:48:58.580
In this case,
I'm going to talk about how to

00:48:58.580 --> 00:48:58.580
manage your application with GDB.

00:48:59.420 --> 00:49:03.490
Every object is off by
an offset from this EBP,

00:49:03.490 --> 00:49:04.910
and they're all sort of sequential.

00:49:04.980 --> 00:49:10.660
So because that first self
object takes four bytes,

00:49:10.740 --> 00:49:15.980
Since we're on a 32-bit machine,
if we add 12 to this,

00:49:16.110 --> 00:49:17.320
we're going to get the next argument.

00:49:17.320 --> 00:49:19.630
Now, the next argument is...

00:49:21.110 --> 00:49:26.690
In Objective-C,
when we make method calls,

00:49:26.700 --> 00:49:31.600
those translate down to C calls that
have an implicit extra two parameters.

00:49:31.600 --> 00:49:33.600
The first one is the self object.

00:49:33.600 --> 00:49:34.590
It's really just a local variable.

00:49:34.590 --> 00:49:36.030
There's nothing special about self.

00:49:36.160 --> 00:49:41.100
And the second one is _cmd,
which identifies the current selector.

00:49:41.290 --> 00:49:45.160
But we're going to print that out,
so we'll do NSSelector from String.

00:49:47.890 --> 00:49:53.360
"And we'll go over here and... oh,
I screwed something up."

00:49:53.710 --> 00:49:55.360
Oh, it wasn't an id.

00:49:55.420 --> 00:50:05.240
Okay, I may be out of luck here,
but I'm going to have to reset.

00:50:08.220 --> 00:50:18.810
What do you know?

00:50:19.290 --> 00:50:19.290
Okay.

00:50:19.290 --> 00:50:19.290
Am I in a reasonable place now?

00:50:19.290 --> 00:50:19.290
Yeah, probably.

00:50:19.290 --> 00:50:19.290
I should have read the message.

00:50:21.020 --> 00:50:23.610
Okay, that's a little weird.

00:50:23.810 --> 00:50:28.550
Okay, so that probably means that we
actually need to finish the...

00:50:35.310 --> 00:50:36.680
Yeah, it's still, uh, oh, geez.

00:50:36.680 --> 00:50:39.560
Let's just not do that one.

00:50:39.560 --> 00:50:44.600
I'm restarting this now.

00:50:45.170 --> 00:50:47.800
Anyways, that works perfectly fine if you
don't get yourself all confused.

00:50:55.600 --> 00:50:57.610
But we did want to show the
argument to this one also,

00:50:57.610 --> 00:50:59.440
which is what I'm going to do now.

00:50:59.440 --> 00:51:02.080
And that's going to be
at abp plus 8 plus 4,

00:51:02.150 --> 00:51:05.580
brought us up to 12,
plus another 4 for the selector,

00:51:06.030 --> 00:51:08.200
brings us up to 16.

00:51:10.790 --> 00:51:12.600
There it is.

00:51:12.640 --> 00:51:13.110
And it's null.

00:51:13.280 --> 00:51:14.300
It's nil.

00:51:14.390 --> 00:51:16.480
So that can also be
interesting information.

00:51:16.480 --> 00:51:21.220
Often passing nil to something
in Cocoa is a mistake.

00:51:21.220 --> 00:51:22.880
Probably not in this case, though.

00:51:22.880 --> 00:51:24.720
Certainly sending an
image to be nil is OK.

00:51:24.770 --> 00:51:27.590
OK, can we go back to the slides, please?

00:51:32.120 --> 00:51:33.720
That is actually most of my talk.

00:51:33.820 --> 00:51:37.160
So I just have a few other
things I want to mention to you.

00:51:37.180 --> 00:51:39.980
I do think it's a good idea to
just sort of try to figure out

00:51:39.980 --> 00:51:42.150
how everything works in Cocoa,
even if you're not going

00:51:42.150 --> 00:51:43.060
to use it in your code.

00:51:43.060 --> 00:51:44.640
I mean,
it's definitely nice to understand

00:51:44.640 --> 00:51:45.700
how the framework works.

00:51:45.860 --> 00:51:48.680
A few interesting experiments
you can run for yourself.

00:51:48.680 --> 00:51:52.030
Why don't you write a little app that
catches and logs all notifications?

00:51:52.080 --> 00:51:56.650
If you register on the object nil
for the notification with name nil,

00:51:56.650 --> 00:51:58.570
that'll just catch everything.

00:51:58.580 --> 00:51:59.910
I've certainly written such an app.

00:51:59.920 --> 00:52:02.520
I know Malcolm Crawford mentioned
to me that he's written such an app.

00:52:02.520 --> 00:52:03.540
Lots of people have.

00:52:03.540 --> 00:52:04.520
It's very useful.

00:52:04.570 --> 00:52:07.550
Another thing you can do that's
sort of-- just to see what's flying

00:52:07.860 --> 00:52:09.540
around while your app is running.

00:52:09.560 --> 00:52:13.040
Another thing you can do is set
the nstraceEvent user default.

00:52:13.040 --> 00:52:15.620
This will let you see what's
going on with events in your app.

00:52:15.620 --> 00:52:18.780
Again, not the kind of thing that you
want to be relying on necessarily,

00:52:18.780 --> 00:52:22.260
but it's very instructive just to
understand how this is all working.

00:52:22.270 --> 00:52:25.550
Now here's another little tidbit,
I suppose, which is that when you want to

00:52:25.560 --> 00:52:29.390
set a user default in your app,
you don't have to go to the command

00:52:29.390 --> 00:52:32.010
line or to your plist to do that.

00:52:32.300 --> 00:52:36.010
What you can do is in Xcode,
if you pass the arguments dash

00:52:36.520 --> 00:52:39.060
and then the name of the default
and then the argument yes,

00:52:39.060 --> 00:52:43.650
like this, so dash nstraceEvents yes as
an argument to your executable,

00:52:43.650 --> 00:52:45.920
it will get pushed into NSUserDefaults.

00:52:45.920 --> 00:52:48.260
This is a service that
NSApplication provides to you.

00:52:48.270 --> 00:52:49.950
Works for all defaults.

00:52:50.060 --> 00:52:53.130
So that's how I'd recommend
doing that in this case.

00:52:53.140 --> 00:52:54.700
That's all I have to say about that.

00:52:54.700 --> 00:52:56.290
And so we're down to the conclusion.

00:52:56.490 --> 00:53:00.520
The conclusion is, like I said,
please work with this stuff.

00:53:00.640 --> 00:53:02.730
Try to develop your mindset.

00:53:02.750 --> 00:53:05.680
Understand how everything works
together so you can write your own

00:53:05.680 --> 00:53:08.950
code in the same style as we do so
that we can understand your code,

00:53:08.960 --> 00:53:10.160
you can understand our code.

00:53:10.160 --> 00:53:11.940
Everything just works together great.

00:53:11.940 --> 00:53:13.620
You've got various resources.

00:53:13.620 --> 00:53:14.610
You have documentation.

00:53:14.620 --> 00:53:17.430
I wanted to point out Fscript because,
again, I think a lot of people

00:53:17.460 --> 00:53:18.130
don't know about it.

00:53:18.270 --> 00:53:20.850
GDB, more people know about,
but they almost certainly don't

00:53:20.850 --> 00:53:22.490
know about all its features.

00:53:22.520 --> 00:53:24.560
And there's just all sorts
of good stuff available.

00:53:24.560 --> 00:53:27.930
So have fun.

00:53:35.340 --> 00:53:37.450
If you want some more information,
you can talk to Derek Horn,

00:53:37.450 --> 00:53:40.420
who is our application
frameworks evangelist.

00:53:40.450 --> 00:53:42.820
I wanted to point out the
APKIT API documentation,

00:53:42.820 --> 00:53:46.020
because that's where I said is
always the first place to start.

00:53:46.040 --> 00:53:49.130
There is an excellent,
excellent technical note,

00:53:49.470 --> 00:53:51.270
which I probably should
have mentioned before this,

00:53:51.310 --> 00:53:53.350
which is Mac OS X debugging magic.

00:53:53.410 --> 00:53:56.610
It's just an amazing amount
of information just about all

00:53:56.610 --> 00:54:01.120
sorts of previously undocumented
tricks that you can use.

00:54:01.120 --> 00:54:02.670
Fscript is at Fscript.org.

00:54:02.750 --> 00:54:06.420
Philippe can also tell you more
about that to flag him down.

00:54:06.420 --> 00:54:08.260
And debugging with GDB is
a nice little tutorial.