WEBVTT

00:00:10.730 --> 00:00:11.530
Good morning.

00:00:11.550 --> 00:00:14.420
I'm Anders on the Xcode team.

00:00:14.450 --> 00:00:19.360
And welcome to this hands-on session,
306, Creating Complex Xcode Projects.

00:00:19.550 --> 00:00:22.200
This morning we're going to explore
some of the more advanced features

00:00:22.200 --> 00:00:25.720
in Xcode that will help you deal
with complexity in your projects.

00:00:25.730 --> 00:00:28.120
And it is a hands-on session.

00:00:28.230 --> 00:00:30.540
The information about
materials online are here.

00:00:30.540 --> 00:00:33.580
Even if you don't have that
downloaded and ready to go,

00:00:33.580 --> 00:00:37.630
I'm sure you'll get a lot out of
the session just by following along.

00:00:37.660 --> 00:00:40.950
Again, my name is Anders.

00:00:41.000 --> 00:00:45.060
And this is a hands-on session,
but I want to start out with a little

00:00:45.060 --> 00:00:46.700
bit of theory for a few minutes.

00:00:46.700 --> 00:00:50.200
So we'll make sure that we're on
the same page with the concepts.

00:00:50.200 --> 00:00:51.220
So first of all, why?

00:00:51.260 --> 00:00:52.360
Why have this session?

00:00:52.420 --> 00:00:56.360
Well, Xcode has a lot of features
to make it pretty simple to

00:00:56.360 --> 00:00:57.620
get started with the project.

00:00:57.620 --> 00:00:59.320
We have a lot of good project templates.

00:00:59.320 --> 00:01:02.820
There are even more in the Leopard
preview than there were in Tiger.

00:01:02.900 --> 00:01:05.910
And many things are
fairly straightforward.

00:01:06.020 --> 00:01:10.160
But there are also a lot of more subtle
features that are really useful once

00:01:10.160 --> 00:01:11.600
your project gets more complicated.

00:01:11.620 --> 00:01:14.050
So we're going to talk
a little bit about that.

00:01:15.320 --> 00:01:17.710
First of all, though,
what would make a project complex?

00:01:17.880 --> 00:01:20.580
Well, some of the things are
shown on the slide.

00:01:20.580 --> 00:01:23.200
You might have lots of different
cross-project references.

00:01:23.200 --> 00:01:26.200
You might have custom targets,
custom shell scripts.

00:01:26.200 --> 00:01:28.870
You may even have a custom
build rule that maps your custom

00:01:28.870 --> 00:01:31.500
file type to your own compiler,
that kind of thing.

00:01:31.580 --> 00:01:35.800
These are some of the things that would
indicate a project is a little bit more

00:01:35.800 --> 00:01:40.410
complicated and can take advantage of
some of these more advanced features.

00:01:40.680 --> 00:01:43.440
So what we're going to go through
is we're going to take a project,

00:01:43.440 --> 00:01:46.240
a sample project,
and just do a series of transformations

00:01:46.240 --> 00:01:48.950
to it that illustrate some of these
features and help you to see how to

00:01:48.950 --> 00:01:50.600
apply those in your own projects.

00:01:50.600 --> 00:01:53.600
We're going to start off by
talking about build settings.

00:01:53.600 --> 00:01:56.050
Pretty simple topic,
but there are some nuances there

00:01:56.050 --> 00:01:57.600
that you can take advantage of.

00:01:57.600 --> 00:02:01.760
We're going to talk a little bit about
connecting multiple projects together.

00:02:01.910 --> 00:02:04.600
And then how to embed a framework
inside of an application,

00:02:04.600 --> 00:02:06.540
which is something that a
lot of people want to do.

00:02:06.600 --> 00:02:08.700
And then finally,
we're going to talk a little bit

00:02:08.700 --> 00:02:11.600
about building deployment products,
in this case a disk image.

00:02:11.600 --> 00:02:13.590
So let's start off with build settings.

00:02:13.590 --> 00:02:15.570
Well, pretty simple, right?

00:02:15.640 --> 00:02:18.590
Debugging equals yes,
debug format equals dwarf,

00:02:18.600 --> 00:02:19.600
those kinds of things.

00:02:19.600 --> 00:02:24.310
But there is a fairly powerful feature
in that you can substitute any value

00:02:24.310 --> 00:02:26.580
in a build setting that you want.

00:02:26.600 --> 00:02:27.840
This can also be pretty simple.

00:02:27.880 --> 00:02:29.580
Product name can include
the version number,

00:02:29.580 --> 00:02:30.600
those kinds of things.

00:02:30.600 --> 00:02:33.340
One thing I wanted to point out here,
which I've seen a lot of questions

00:02:33.360 --> 00:02:36.600
about on the mailing lists,
is that Xcode itself,

00:02:36.630 --> 00:02:40.600
uses the same sort of make
style notation with parentheses,

00:02:40.600 --> 00:02:43.520
$x, as you see here,
to expand the value of

00:02:43.520 --> 00:02:44.600
another build setting.

00:02:44.600 --> 00:02:48.200
But if you are doing
custom shell scripts,

00:02:48.200 --> 00:02:53.570
then keep in mind that the syntax you use
would be the one for that shell script.

00:02:53.600 --> 00:02:57.600
So in the case of the shell itself,
you would use $brace.

00:02:57.600 --> 00:03:03.740
This is particularly important where
you're typing shell code into Xcode,

00:03:03.740 --> 00:03:06.600
because Xcode just invokes the
shell and passes it to the shell.

00:03:06.600 --> 00:03:08.600
So it passes down whatever text you type.

00:03:08.600 --> 00:03:12.730
Xcode does pass the environment,
the build settings in the environment,

00:03:12.730 --> 00:03:16.600
because that's the
lingua franca of scripts.

00:03:16.600 --> 00:03:20.040
So Python and Ruby and all these
shell scripts that you might invoke

00:03:20.040 --> 00:03:24.220
as part of your build process,
they typically all have access

00:03:24.220 --> 00:03:26.590
to the Unix environment.

00:03:26.670 --> 00:03:29.600
And so Xcode uses that to
pass down the build settings.

00:03:29.600 --> 00:03:31.600
Build settings, again,
are things like the product name,

00:03:31.600 --> 00:03:34.600
things like the path where you
want to output your product,

00:03:34.600 --> 00:03:35.580
those kinds of things.

00:03:35.600 --> 00:03:38.600
It's an open-ended naming scheme,
so you can come up with your own names,

00:03:38.600 --> 00:03:40.910
you know, my compiler settings,
and you can reference that from

00:03:40.910 --> 00:03:42.590
one of the standard build settings.

00:03:42.600 --> 00:03:47.600
They're organized into precedence levels,
as you might imagine and probably know.

00:03:47.600 --> 00:03:50.590
And here briefly are
the precedence levels.

00:03:50.600 --> 00:03:54.600
We have the environment variables
that Xcode inherits are at the bottom.

00:03:54.600 --> 00:03:58.700
So this is typically stuff like home,
right, which is something that's

00:03:58.700 --> 00:04:00.430
set for any time you log in.

00:04:00.570 --> 00:04:02.520
Above that come the built-in defaults.

00:04:02.590 --> 00:04:05.450
There are certain defaults for whether
a certain warning is turned on or off.

00:04:05.450 --> 00:04:07.460
There are certain default
build directories.

00:04:07.560 --> 00:04:11.260
One of the defaults is that the
suffix for an application is .app.

00:04:11.310 --> 00:04:12.800
So that's built-in.

00:04:12.890 --> 00:04:15.290
Above that are the Xcode
preferences themselves.

00:04:15.390 --> 00:04:18.090
You can say that you want
a certain source tree,

00:04:18.130 --> 00:04:20.170
which is just a location on your disk.

00:04:20.260 --> 00:04:23.270
You define this in the
preference panel on Xcode,

00:04:23.330 --> 00:04:26.730
and you have access to it
through your build settings.

00:04:27.820 --> 00:04:29.590
Project settings come above that.

00:04:29.640 --> 00:04:32.100
These are what you set in the
info panel for the project,

00:04:32.100 --> 00:04:34.900
the blue project icon up at
the top of the project window.

00:04:34.970 --> 00:04:36.560
An example would be the project version.

00:04:36.560 --> 00:04:39.300
If you have a marketing version,
that's typically the same for

00:04:39.300 --> 00:04:40.840
all the targets in your project.

00:04:40.920 --> 00:04:44.130
So you would set that in the
project itself and not ones

00:04:44.130 --> 00:04:46.100
for each individual target.

00:04:46.930 --> 00:04:50.050
Target settings come above that,
and that would include

00:04:50.090 --> 00:04:51.270
things like a product name.

00:04:51.340 --> 00:04:53.880
If you have three targets
in your application,

00:04:53.890 --> 00:04:56.320
in your project,
and each of those targets

00:04:56.320 --> 00:04:59.640
builds a separate application,
each would have a separate name.

00:04:59.640 --> 00:05:01.980
So that's an example of the
kind of setting that goes at

00:05:01.980 --> 00:05:03.440
the target settings level.

00:05:03.440 --> 00:05:06.920
You could set the value of
any setting at any level,

00:05:06.920 --> 00:05:09.740
but some make more sense than others.

00:05:09.980 --> 00:05:12.140
And above that are the
temporary overrides.

00:05:12.140 --> 00:05:15.140
One doesn't always think about this,
but anything you pass on the

00:05:15.140 --> 00:05:19.600
command line to Xcode build
actually overrides anything.

00:05:19.600 --> 00:05:23.780
So this is just like in Make or in
Ant or any of these other build systems.

00:05:24.350 --> 00:05:27.260
So, again,
the president is as high as the lowest.

00:05:27.260 --> 00:05:29.730
And this is just briefly to
make sure we're on the same

00:05:29.750 --> 00:05:30.880
page here before the hands-on.

00:05:30.900 --> 00:05:35.590
Build configurations are sets
of customized build settings.

00:05:35.600 --> 00:05:38.660
So I might say that these
three settings make up what's

00:05:38.660 --> 00:05:40.400
special about my debug build.

00:05:40.400 --> 00:05:43.400
And these other three settings make up
what's special about my release build.

00:05:43.400 --> 00:05:45.390
Typically,
you would turn off debugging for release,

00:05:45.390 --> 00:05:47.690
you would turn it on for debug, etc.

00:05:47.700 --> 00:05:51.650
And they consist of a name,
which is unique within the project and

00:05:51.650 --> 00:05:53.390
shared by all targets in the project.

00:05:54.300 --> 00:05:56.560
New projects, as you may know,
come with a debug and a

00:05:56.570 --> 00:05:57.890
release pre-configured.

00:05:57.900 --> 00:06:00.750
Here again, it's an open-ended scheme,
so you can create any

00:06:00.750 --> 00:06:01.890
names that you want.

00:06:01.900 --> 00:06:05.900
And the key thing to remember, though,
is only one is active at a time.

00:06:05.900 --> 00:06:08.900
You're either building for debug
or for release at any given time.

00:06:08.900 --> 00:06:11.900
You can build for one first
and then for the other.

00:06:11.910 --> 00:06:14.900
That's particularly easy with the
Xcode build command line tool.

00:06:14.960 --> 00:06:17.500
But at any given time,
you're only building

00:06:17.500 --> 00:06:18.890
for one or the other.

00:06:19.650 --> 00:06:23.260
And these build configurations,
you can set them in the Xcode GUI,

00:06:23.370 --> 00:06:27.030
but what's actually very convenient
and what's new in Xcode 2.3,

00:06:27.140 --> 00:06:31.580
which almost all of you already have,
I think, that was last year,

00:06:31.580 --> 00:06:35.000
is to be able to define style sheets,
which are just text files where

00:06:35.000 --> 00:06:36.200
you define these build settings.

00:06:36.200 --> 00:06:39.720
That can be really nice because
we support comments in there.

00:06:39.720 --> 00:06:42.600
We also let you check them
because they're just text files.

00:06:42.600 --> 00:06:45.300
You can check them into an SEM system
and keep track of them very easily.

00:06:45.940 --> 00:06:50.520
And also,
you can use include syntax to include

00:06:50.520 --> 00:06:51.970
the contents of one and the other.

00:06:51.980 --> 00:06:54.660
So they're really like style
sheets for build settings,

00:06:54.680 --> 00:06:57.020
and they can define any
setting at all in there.

00:06:57.020 --> 00:06:59.000
We'll see that in the
hands-on in a little bit.

00:06:59.020 --> 00:07:02.600
They're, again,
great for factoring out settings that are

00:07:02.600 --> 00:07:05.890
common across a large number of projects,
which is why it applies

00:07:05.890 --> 00:07:07.180
to the complex projects.

00:07:07.180 --> 00:07:10.850
If you have 15 interrelated projects and
you have a setting like the copyright

00:07:10.860 --> 00:07:13.520
string that's common to all of them,
you might want to factor that

00:07:13.520 --> 00:07:15.700
out into a build setting,
into a build context.

00:07:15.700 --> 00:07:17.790
You can also use the build
configuration file and reference

00:07:17.790 --> 00:07:19.200
that file from all those projects.

00:07:19.200 --> 00:07:22.510
And a tip here is it's actually
easy to select a bunch of build

00:07:22.510 --> 00:07:25.490
settings in the inspector,
and then you can just drag

00:07:25.500 --> 00:07:28.990
them off in a text file,
and they show up as X equals Y pairs.

00:07:29.030 --> 00:07:33.960
And that's a great way to start
populating your XC config file.

00:07:34.310 --> 00:07:37.060
How does that fit into the
precedent stack we talked about?

00:07:37.060 --> 00:07:39.780
I've called out here the
target project settings because

00:07:39.790 --> 00:07:41.360
that's where they fit in.

00:07:41.460 --> 00:07:44.340
Specifically,
we slide those apart and the

00:07:44.340 --> 00:07:48.100
target settings can have an
XC config file that it's based on.

00:07:48.170 --> 00:07:51.470
So what you do is you say, well,
my target has its own settings,

00:07:51.470 --> 00:07:54.100
but it's also based on
this other style sheet.

00:07:54.210 --> 00:07:56.070
And the same thing at the project level.

00:07:56.140 --> 00:07:58.100
So that's how the
inheritance works there.

00:07:58.100 --> 00:08:01.730
The target settings will override what's
in the style sheet for the target and

00:08:01.730 --> 00:08:04.100
then that in turn overrides the project,
etc.

00:08:04.100 --> 00:08:09.810
So something to keep in mind as
we're editing these projects.

00:08:10.190 --> 00:08:14.340
Value substitution is more powerful
than you might at first think about,

00:08:14.340 --> 00:08:17.010
in particular because you can
construct the name of a build

00:08:17.010 --> 00:08:18.900
setting through substitution.

00:08:18.990 --> 00:08:22.460
So here is a small example where
we're actually constructing our own

00:08:22.460 --> 00:08:26.300
build setting called other C flags,
GCC3 and 4.

00:08:26.380 --> 00:08:28.200
We're setting,
Xcode knows nothing about those,

00:08:28.200 --> 00:08:33.180
we're setting the standard one to just
choose the value of one or two of those,

00:08:33.280 --> 00:08:36.400
one of the two at build time.

00:08:36.470 --> 00:08:40.100
So this is pretty powerful,
you can do this with any setting at all.

00:08:40.100 --> 00:08:43.500
You can make it conditional on
the context in which it's invoked.

00:08:43.570 --> 00:08:47.220
And the message there again
is that the expansion,

00:08:47.220 --> 00:08:51.500
the substitution happens as it's
needed and it happens repeatedly,

00:08:51.580 --> 00:08:54.230
meaning that the same expression
can evaluate to different

00:08:54.230 --> 00:08:55.780
things in different contexts.

00:08:55.850 --> 00:09:00.680
For example, if you create a build rule
to process an input file,

00:09:00.740 --> 00:09:04.040
the expression that evaluates the
name of the input file will be

00:09:04.040 --> 00:09:06.100
different for every time it's invoked.

00:09:06.100 --> 00:09:08.210
It's a simple case of that.

00:09:09.150 --> 00:09:11.160
So build settings on
the knobs and switches,

00:09:11.200 --> 00:09:13.100
build configurations,
group them together into

00:09:13.100 --> 00:09:16.040
sort of logical collections,
and build phases are the steps

00:09:16.040 --> 00:09:17.600
you go through when you build,
right?

00:09:17.600 --> 00:09:20.280
So just copying headers,
processing resources,

00:09:20.280 --> 00:09:21.130
those kinds of things.

00:09:21.200 --> 00:09:23.870
Some of them are very flexible
and are used in particular

00:09:23.880 --> 00:09:28.270
for complicated projects,
like the copy arbitrary files phase,

00:09:28.270 --> 00:09:32.060
where you can just copy any file or
folder from any place to another.

00:09:32.090 --> 00:09:33.540
And also to run a custom script.

00:09:33.570 --> 00:09:35.050
This doesn't have to be a shell script.

00:09:35.060 --> 00:09:37.140
You could type the name of
any interpreter you want,

00:09:37.170 --> 00:09:38.740
Perl, Python, Ruby, whatever.

00:09:38.740 --> 00:09:43.400
So you can actually tie in very nicely
if you have some custom scripts.

00:09:43.800 --> 00:09:45.800
So that's a bit about build settings.

00:09:45.800 --> 00:09:48.280
We'll talk briefly about
managing multiple projects.

00:09:48.280 --> 00:09:51.480
Well, why have multiple projects, right?

00:09:51.480 --> 00:09:54.300
Obviously, if I have 20 projects,
that's more complicated than 10.

00:09:54.300 --> 00:09:56.970
Well, if you think about coding,
it's not necessarily the case.

00:09:56.970 --> 00:10:00.860
You could have, you know,
one function that's just really gnarly,

00:10:00.860 --> 00:10:03.790
but if you split it up,
then you could actually

00:10:03.810 --> 00:10:05.110
achieve some simplicity.

00:10:05.190 --> 00:10:06.190
So that's one thing.

00:10:06.190 --> 00:10:09.760
It's also easy to reuse if you have a
framework or library containing some

00:10:09.770 --> 00:10:11.730
common functionality for your company.

00:10:11.730 --> 00:10:14.570
You may want to split that out,
not into just a separate target,

00:10:14.570 --> 00:10:17.090
but even a separate framework,
because you could mail it to

00:10:17.170 --> 00:10:21.370
somebody or check that in separately
to an SCM system or whatever.

00:10:21.380 --> 00:10:26.770
And you can refactor an existing project
to split it out into sub-projects,

00:10:26.770 --> 00:10:31.220
but you could also separate them out
from the start if you know that you're

00:10:31.220 --> 00:10:32.930
going to have a reusable framework.

00:10:32.970 --> 00:10:36.840
It's a good idea, because it doesn't mean
that you have to reuse it.

00:10:36.840 --> 00:10:39.060
You can still use it just
for that one other project.

00:10:39.080 --> 00:10:42.040
And the way we do this is
with the project references.

00:10:42.050 --> 00:10:45.160
Just like any other file reference,
you just reference another project,

00:10:45.160 --> 00:10:50.510
and you can set some options,
per-user options on the project,

00:10:50.510 --> 00:10:54.760
or you can set them for all users,
as we'll show in the hands-on.

00:10:54.760 --> 00:10:59.640
One of the things to think about when
using multiple projects is that Xcode,

00:10:59.640 --> 00:11:03.720
it works best if you have
a shared build location.

00:11:03.720 --> 00:11:07.030
There are several ways to set that,
and we'll explore one that you may not

00:11:07.030 --> 00:11:08.760
have tried that's particularly useful.

00:11:08.760 --> 00:11:12.360
This means that all the sub-projects
will put their own sub-projects

00:11:12.360 --> 00:11:12.360
in the same sub-project.

00:11:12.360 --> 00:11:12.720
So if you have a project
that's a common location,

00:11:12.720 --> 00:11:13.490
you can set that as a common location,
and you can set that

00:11:13.490 --> 00:11:14.270
as a common location,
and you can set that

00:11:14.270 --> 00:11:14.760
as a common location,
and you can set that

00:11:14.760 --> 00:11:16.280
as a common location,
where they can be found by Xcode,

00:11:16.280 --> 00:11:19.150
by the other projects.

00:11:19.200 --> 00:11:22.690
And one great way to do that is
to set that in an XC config file.

00:11:22.690 --> 00:11:24.040
We're going to see that.

00:11:25.400 --> 00:11:26.650
Embedding tools and frameworks.

00:11:26.710 --> 00:11:27.690
Why would you want to do that?

00:11:27.780 --> 00:11:31.800
Well, one thing is that,
if you remember back in 1984,

00:11:31.800 --> 00:11:34.580
you could actually take the
Mac Paint icon and drag it

00:11:34.580 --> 00:11:36.880
off onto another disk and
you could actually run it.

00:11:36.990 --> 00:11:38.940
And it's a great thing for users.

00:11:39.030 --> 00:11:42.940
If you have an app that's simple
enough where you don't have to install

00:11:42.940 --> 00:11:46.250
kernel extensions and things like that,
where you can actually embed all

00:11:46.250 --> 00:11:49.000
the resources inside the app,
including frameworks and

00:11:49.000 --> 00:11:51.740
tools and those things,
that's a great thing for

00:11:51.740 --> 00:11:53.610
users because it's simple.

00:11:53.620 --> 00:11:56.850
You can install it simply,
you can uninstall it simply,

00:11:56.850 --> 00:11:59.620
and you can upgrade it
just by replacing the icon.

00:11:59.620 --> 00:12:04.570
So there are some benefits to doing that,
if you can do that in your case.

00:12:04.620 --> 00:12:08.420
How that works under the hood
is that normally frameworks

00:12:08.420 --> 00:12:10.050
are looked up by path.

00:12:10.050 --> 00:12:13.220
For all the system frameworks,
that's an absolute path: system, library,

00:12:13.220 --> 00:12:14.620
frameworks, app kit, that kind of thing.

00:12:14.620 --> 00:12:17.620
But there are two special prefixes.

00:12:17.620 --> 00:12:19.590
One is @executable_path.

00:12:19.630 --> 00:12:21.620
We're going to talk about
this in the hands-on.

00:12:21.620 --> 00:12:25.620
That has been there since
the first days of Mac OS X.

00:12:25.620 --> 00:12:29.160
The other one is @loaderpath,
which is new in Tiger and also,

00:12:29.160 --> 00:12:30.620
of course, works in Leopard.

00:12:30.710 --> 00:12:35.620
And that actually lets you not only
be relative to the main application,

00:12:35.620 --> 00:12:38.620
but relative to whoever is
linking against the framework.

00:12:38.620 --> 00:12:40.620
So you could actually embed a
framework inside of a bundle,

00:12:40.620 --> 00:12:42.950
or you can embed a framework
inside of another framework without

00:12:42.980 --> 00:12:44.620
knowing where the application lives.

00:12:44.740 --> 00:12:48.520
There is also... Thank you.

00:12:48.700 --> 00:12:50.620
There is also a tool
called install_name_tool.

00:12:50.620 --> 00:12:55.180
Which is a command line tool that
lets you get at the real details

00:12:55.330 --> 00:12:57.620
of how a framework is built.

00:12:57.620 --> 00:12:59.580
You can actually change
the name after the fact.

00:12:59.620 --> 00:13:01.900
It's easier to change
it before you build it,

00:13:01.900 --> 00:13:03.610
as we're going to do in the demo.

00:13:03.620 --> 00:13:07.390
And the thing about how this works
is that the framework contains the

00:13:07.390 --> 00:13:09.580
name of where it's going to be found.

00:13:09.620 --> 00:13:12.620
The application copies that
when you link against it.

00:13:12.620 --> 00:13:15.130
The framework,
the application copies that

00:13:15.130 --> 00:13:16.620
path into the application.

00:13:16.620 --> 00:13:18.530
And then at runtime,
the application will use that

00:13:18.530 --> 00:13:19.560
to look up the framework.

00:13:19.620 --> 00:13:21.330
of the framework.

00:13:22.660 --> 00:13:24.430
And you can embed various things.

00:13:24.440 --> 00:13:26.240
That's for frameworks
and dynamic libraries.

00:13:26.240 --> 00:13:28.600
You can, of course,
also embed tools and scripts and

00:13:28.600 --> 00:13:32.000
all kinds of other things that
your application needs to run.

00:13:32.000 --> 00:13:36.130
And you can embed them, as I said,
into applications and also

00:13:36.130 --> 00:13:37.960
frameworks and plugins.

00:13:38.000 --> 00:13:40.400
Don't embed the system frameworks,
though.

00:13:40.400 --> 00:13:42.660
I mean, that might be obvious,
but it's not a good idea to

00:13:42.660 --> 00:13:44.600
embed something like Foundation,
right?

00:13:44.600 --> 00:13:47.200
We want to be able to update that when
the next version of Mac OS X comes out.

00:13:47.200 --> 00:13:49.440
And I'm sure there are some
licensing issues there,

00:13:49.440 --> 00:13:49.800
too.

00:13:49.800 --> 00:13:51.790
So, something to think about.

00:13:52.600 --> 00:13:57.590
Okay, so that was a little bit of theory
to make sure we're on the same page.

00:13:57.590 --> 00:13:59.600
Let's go to the demo
machine for hands-on,

00:13:59.600 --> 00:14:01.890
and let's try this out.

00:14:06.870 --> 00:14:08.100
Okay, great, we're live.

00:14:08.150 --> 00:14:14.400
So hopefully most of you have downloaded
the materials for this class here.

00:14:14.400 --> 00:14:18.370
Let's go ahead and double-click
the disk image here.

00:14:18.430 --> 00:14:24.560
This is the disk image that's posted on
the developer.apple.com/wwdc2006 as an

00:14:24.560 --> 00:14:27.800
associated material for this session.

00:14:27.800 --> 00:14:29.580
We have here a top-level folder.

00:14:29.580 --> 00:14:31.740
I'm just going to double-click on that.

00:14:31.740 --> 00:14:34.800
I'm going to put this in list mode
just to make it a little bit easier.

00:14:34.800 --> 00:14:37.800
And sorry if the type is too small here.

00:14:37.800 --> 00:14:40.790
I'll read the names that I'm selecting
here for those of you in the back.

00:14:40.800 --> 00:14:42.850
I'm going to expand the first milestone.

00:14:42.850 --> 00:14:45.720
There are five milestones and
then the complete one here.

00:14:45.800 --> 00:14:50.790
Under the first milestone,
that's actually our starting point.

00:14:50.910 --> 00:14:52.760
And there is this little
project called GlutMech.

00:14:52.810 --> 00:14:55.800
Now Glut is an OpenGL utility
toolkit that's open source.

00:14:55.800 --> 00:14:57.800
We ship some developer examples.

00:14:57.800 --> 00:15:01.620
What I did was I took one of the examples
out of just developer examples and

00:15:01.620 --> 00:15:03.800
I actually pared it down a little bit.

00:15:03.800 --> 00:15:05.800
It had lots of targets
and demos all in it.

00:15:05.800 --> 00:15:10.790
I just focused on one of them just to
make things simple for this session.

00:15:10.800 --> 00:15:16.800
So if you all have opened the
Creating Complex Projects folder here,

00:15:16.800 --> 00:15:20.760
let's go ahead and take the
GlutMech project folder underneath

00:15:20.760 --> 00:15:24.790
the Complex Projects one and
drag that off to the desktop.

00:15:24.800 --> 00:15:26.800
And the other ones are milestones.

00:15:26.800 --> 00:15:27.360
As we're going to do that,
we're going to take the GlutMech project

00:15:27.370 --> 00:15:27.800
folder and drag it off to the desktop.

00:15:27.800 --> 00:15:30.800
And as we do various things
to this project this morning,

00:15:30.800 --> 00:15:33.800
I've saved snapshots of exactly
what the project state is.

00:15:33.800 --> 00:15:36.800
So if you fall behind at any point,
you can just grab one of them.

00:15:36.800 --> 00:15:40.110
I'll announce when we get to the
milestones and just copy that over and

00:15:40.110 --> 00:15:43.800
then start and catch up from that point.

00:15:43.800 --> 00:15:47.460
There is one other folder here
that contains useful materials,

00:15:47.460 --> 00:15:50.760
which is Other,
Creating Complex Projects, Other.

00:15:50.850 --> 00:15:53.250
I'm going to go ahead and
double click on that and then

00:15:53.250 --> 00:15:54.800
put that into list mode also.

00:15:54.800 --> 00:15:56.780
This contains some code clippings.

00:15:56.800 --> 00:15:59.530
This session would be about twice
as long if we had to type in and

00:15:59.530 --> 00:16:02.800
get correct all the stuff that we're
going to do to this project here.

00:16:02.800 --> 00:16:07.800
So for some of the things that involve
source code changes and scripts,

00:16:07.800 --> 00:16:11.700
I've actually precooked those
into little code clippings.

00:16:11.800 --> 00:16:16.800
So what I'm going to do
here is just on my machine,

00:16:16.800 --> 00:16:19.800
turn the toolbar off because I have a
little bit of a smaller resolution here.

00:16:19.800 --> 00:16:23.800
I'm going to go ahead and
put the folder into the dock.

00:16:23.800 --> 00:16:25.800
That's a good idea here.

00:16:25.800 --> 00:16:28.880
This is the folder containing
the other resources,

00:16:28.880 --> 00:16:30.800
again, out of the disk image.

00:16:30.800 --> 00:16:32.680
I'm going to do that just
because we're going to refer

00:16:32.680 --> 00:16:35.800
to that from time to other,
and then that's an easy way to get to it.

00:16:35.800 --> 00:16:39.800
I'm going to do the same with
the copy of the project glutmech

00:16:39.800 --> 00:16:41.800
that we put on the desktop.

00:16:42.950 --> 00:16:45.800
So those of you who are following
along in your PowerBooks here,

00:16:45.800 --> 00:16:50.400
do you have the Gluckmeck project
and the other resources in?

00:16:50.400 --> 00:16:51.400
Okay.

00:16:51.400 --> 00:16:53.000
This is again in the disk image.

00:16:53.060 --> 00:16:57.170
If you look in the disk image,
there's a top-level folder.

00:16:57.380 --> 00:17:03.600
And under that top-level
folder are all the milestones.

00:17:03.600 --> 00:17:08.690
And what I did was I grabbed the
GlutMec project out of milestone one.

00:17:08.880 --> 00:17:15.680
And I also grabbed the Complex Projects
underbar other folder underneath

00:17:15.960 --> 00:17:18.650
there and I put that in the doc.

00:17:20.120 --> 00:17:23.860
So we're going to open
up the GlutMech project.

00:17:23.860 --> 00:17:27.220
And this is a demo that shows
a little mech kind of a thing.

00:17:27.220 --> 00:17:31.340
I guess it's a robot of
some kind on the screen.

00:17:31.350 --> 00:17:33.400
Let's go ahead and double
click and open the project.

00:17:33.400 --> 00:17:35.530
And this will launch Xcode.

00:17:35.710 --> 00:17:40.000
And we're going to see my
network connection went down.

00:17:40.000 --> 00:17:41.170
No, it's up.

00:17:41.220 --> 00:17:43.750
Okay,
so this opens the project on the screen.

00:17:43.760 --> 00:17:45.880
We just close the
finder window behind it.

00:17:45.930 --> 00:17:48.410
So right now,
this is just showing the project.

00:17:48.410 --> 00:17:51.800
I'm using the default Xcode layout,
but I've increased the font size a bit.

00:17:51.800 --> 00:17:55.020
It will, of course,
look different on your screen

00:17:55.030 --> 00:17:57.030
if you've customized Xcode.

00:17:57.040 --> 00:17:59.350
We see here that there is a debug.

00:17:59.420 --> 00:18:02.300
If you can see this,
a debug configuration by default.

00:18:02.300 --> 00:18:03.560
A couple of source files.

00:18:03.610 --> 00:18:04.960
Let's go ahead and build and run this.

00:18:04.960 --> 00:18:06.560
And just to see what we have here.

00:18:06.560 --> 00:18:08.000
A little bit of a demo.

00:18:08.000 --> 00:18:08.720
Okay, cool.

00:18:08.750 --> 00:18:10.330
We can have some shading.

00:18:10.380 --> 00:18:13.780
Turns out you can hit the arrow
keys and rotate left and right.

00:18:13.840 --> 00:18:15.600
But it just kind of sits there, right?

00:18:15.600 --> 00:18:17.480
So we'd like to move this
thing around a little bit.

00:18:17.600 --> 00:18:19.520
So let's see here.

00:18:19.670 --> 00:18:24.740
First of all, we're going to go ahead and
create an XC config file for this.

00:18:24.740 --> 00:18:27.150
So far, I haven't made any
changes to the project,

00:18:27.150 --> 00:18:27.650
right?

00:18:27.700 --> 00:18:29.400
So now begins the fun.

00:18:29.480 --> 00:18:34.460
So let me first show,
if I double click on the project

00:18:35.060 --> 00:18:39.640
icon and then go to the build tab,
I see the build settings that

00:18:39.640 --> 00:18:42.490
are already set up for this
project at the project level.

00:18:42.500 --> 00:18:45.300
So these are the ones that
all the targets would inherit.

00:18:45.300 --> 00:18:49.170
So again, you can double click on
the project icon itself,

00:18:49.170 --> 00:18:50.290
the blue one.

00:18:50.300 --> 00:18:52.300
Everybody with me so far?

00:18:52.300 --> 00:18:54.300
Okay.

00:18:54.300 --> 00:18:56.290
Here we see all the build settings.

00:18:56.300 --> 00:18:58.900
This will look a bit different
if you're on Leopard Preview.

00:18:58.900 --> 00:19:02.200
We actually have some nice little banners
in between the different sections now.

00:19:02.200 --> 00:19:04.220
So it's a bit easier to find.

00:19:04.360 --> 00:19:07.290
You can see the customized
ones are in bold.

00:19:07.350 --> 00:19:10.640
And you see things like the SDK,
which are typically set at the

00:19:10.650 --> 00:19:15.000
project level because typically all
the targets in the project would be

00:19:15.000 --> 00:19:15.000
using either 10.4 or 10.3 or 10.5.

00:19:15.000 --> 00:19:18.170
or whatever you choose as your target.

00:19:19.190 --> 00:19:21.930
Similarly,
if I open up the target itself,

00:19:21.930 --> 00:19:23.950
I can double-click on it here.

00:19:24.080 --> 00:19:26.330
These are the settings
at the target level.

00:19:26.330 --> 00:19:29.530
And I see here, for example,
the product name is one of

00:19:29.530 --> 00:19:33.180
the typical things that is
customized at the target level.

00:19:33.200 --> 00:19:35.210
Because typically,
if I have different apps

00:19:35.210 --> 00:19:38.040
or different frameworks,
they'll have different names.

00:19:38.810 --> 00:19:42.720
And what I mentioned was that underneath
this level we can actually slide in

00:19:42.720 --> 00:19:48.300
the style sheet that we can reuse
in different projects or targets.

00:19:48.380 --> 00:19:51.060
So to do that,
I can go to the File menu and

00:19:51.060 --> 00:19:53.580
go ahead and choose New File.

00:19:53.860 --> 00:19:57.180
And then if you scroll down to the
bottom of the alert panel here,

00:19:57.180 --> 00:20:01.260
or the dialog box,
you see under the Xcode heading,

00:20:01.260 --> 00:20:04.100
there is configuration settings file.

00:20:04.170 --> 00:20:08.070
So again, I went to the file menu
and I just said new file.

00:20:08.240 --> 00:20:12.020
And then scroll down to the bottom and
we have the configuration settings file.

00:20:12.220 --> 00:20:13.860
Everybody with me?

00:20:13.860 --> 00:20:14.900
Okay.

00:20:14.900 --> 00:20:16.980
I'm going to choose next.

00:20:17.150 --> 00:20:21.020
And you can give any name
you want to this file.

00:20:21.060 --> 00:20:21.780
It doesn't really matter.

00:20:21.780 --> 00:20:23.700
I'm going to call it common settings.

00:20:23.730 --> 00:20:25.540
You can call it anything you like.

00:20:25.540 --> 00:20:29.860
I'm going to uncheck the checkbox
for adding it to the glutmack

00:20:29.860 --> 00:20:32.210
target because I want to add
it to the project as a whole.

00:20:32.210 --> 00:20:35.610
I want to base the project
on the settings file.

00:20:36.010 --> 00:20:41.800
So we uncheck the checkbox for
the target and we click finish.

00:20:41.880 --> 00:20:44.290
So this gives me now an empty text file.

00:20:44.290 --> 00:20:49.400
This is where I could prototype
by opening an inspector,

00:20:49.400 --> 00:20:52.140
selecting a bunch of settings
and drag them off into here.

00:20:52.140 --> 00:20:56.900
But I've actually prepared a little
clipping that's fairly heavily commented.

00:20:57.950 --> 00:21:00.700
So at this point,
if you go back down into your

00:21:00.700 --> 00:21:04.840
doc and click on the folder
where we put the resources,

00:21:04.900 --> 00:21:07.530
the Creating Complex Projects
underbar other,

00:21:07.530 --> 00:21:10.900
which contains the
resources for this session.

00:21:10.920 --> 00:21:14.750
Under the code clippings,
you'll find the code clipping

00:21:14.790 --> 00:21:18.900
number one contains the
contents of this XC config file.

00:21:19.070 --> 00:21:23.890
So the easiest way in this session
here is to just click and drag.

00:21:23.900 --> 00:21:25.900
So I'm clicking and
dragging the clipping here.

00:21:26.900 --> 00:21:29.810
So I'm going to bring it over to the text
field in Xcode in the text editor here.

00:21:29.890 --> 00:21:33.750
And you'll see the little plus icon.

00:21:33.900 --> 00:23:22.300
[Transcript missing]

00:23:22.400 --> 00:24:26.000
[Transcript missing]

00:24:26.130 --> 00:24:29.940
So we populated our XC config file here.

00:24:29.940 --> 00:24:31.090
I'm going to choose save.

00:24:31.090 --> 00:24:33.400
So go ahead and choose save.

00:24:33.590 --> 00:24:36.540
Flea you've all caught
up with me at this point.

00:24:36.540 --> 00:24:38.640
And if not, we're going to get to
milestone two here in a bit.

00:24:38.670 --> 00:24:41.590
So don't worry about that.

00:24:41.730 --> 00:24:43.060
I'm going to go ahead and close this.

00:24:43.060 --> 00:24:44.620
So far I've just created this file.

00:24:44.620 --> 00:24:47.600
I haven't yet told
Xcode where to use that.

00:24:47.970 --> 00:24:52.180
To do that, I'm going to open up the
info panel on the project.

00:24:52.270 --> 00:24:56.520
So we can select the project,
and then you can use any of the

00:24:56.520 --> 00:24:57.910
ways to open the info panel.

00:24:57.930 --> 00:25:00.510
Click on the info toolbar,
or if you want,

00:25:00.550 --> 00:25:04.960
you can just double-click on this,
and that opens the info panel.

00:25:05.060 --> 00:25:09.020
So we're choosing show
info on the project.

00:25:09.090 --> 00:25:10.670
And we looked at this before.

00:25:10.780 --> 00:25:15.120
This just shows the customized
settings and the inherited ones.

00:25:15.100 --> 00:25:18.520
The bottom here is probably hard to
see because it doesn't actually scale.

00:25:18.520 --> 00:25:21.990
I'm not running Leopard here,
so I don't have the

00:25:21.990 --> 00:25:24.440
resolution-dependent UI.

00:25:24.440 --> 00:25:27.640
There's another entry now that
shows up in the pop-up down here.

00:25:27.640 --> 00:25:31.060
When I add an XC config file,
Xcode notices that,

00:25:31.060 --> 00:25:36.400
and it will show that in the
pop-up for the info panel.

00:25:36.400 --> 00:25:39.680
And so now I can say that instead
of being based on no style sheet,

00:25:39.680 --> 00:25:44.420
I'm actually based on the
common setting style sheet here.

00:25:44.420 --> 00:25:47.220
So I'm going to go ahead
and do that and close this.

00:25:47.230 --> 00:25:51.840
And actually, if I choose info again,
you'll see that the path has now changed

00:25:51.840 --> 00:25:56.050
for the output location to reflect
this sum root variable that I set.

00:25:56.050 --> 00:25:59.310
Now it's going to go into this Xcode
builds directory that I just created,

00:25:59.310 --> 00:26:00.630
or that I just specified.

00:26:00.630 --> 00:26:03.000
Xcode's going to create
it for me when I build.

00:26:04.600 --> 00:26:07.520
So that's really all we have to do,
but we can't really tell

00:26:07.580 --> 00:26:09.840
that we're using it yet,
so we're going to open

00:26:09.860 --> 00:26:10.730
up the source code now.

00:26:10.740 --> 00:26:13.000
And now comes the first source code edit.

00:26:13.000 --> 00:26:15.900
We defined this preprocessor
setting in this XC config file,

00:26:15.900 --> 00:26:17.500
so let's go ahead and use it.

00:26:17.500 --> 00:26:21.420
And I have, ahead of time,
figured out where the

00:26:21.420 --> 00:26:23.500
line number should be.

00:26:23.500 --> 00:26:26.850
So go ahead and open up the other
folder for the resources again,

00:26:26.850 --> 00:26:28.490
the code clippings folder.

00:26:28.500 --> 00:26:30.490
I'll keep referring to this
code clippings folder again,

00:26:30.500 --> 00:26:31.500
or the other folder.

00:26:31.520 --> 00:26:35.310
So good idea to put that in
the doc if you haven't already,

00:26:35.380 --> 00:26:38.450
just so we can get back
to it really quickly.

00:26:38.500 --> 00:26:42.470
And let's go ahead and add some code now.

00:26:42.520 --> 00:26:46.490
And to make this simple,
I'm going to specify the line number.

00:26:46.500 --> 00:26:49.740
It's real simple if you use
the find menu and then choose

00:26:49.740 --> 00:26:53.390
go to line at the bottom here,
because then we can actually jump to a

00:26:53.390 --> 00:26:55.490
particular line number pretty simply.

00:26:55.500 --> 00:26:58.430
This go to panel has a radio button.

00:26:58.530 --> 00:27:00.500
You can choose to jump to
a character offset or line.

00:27:00.500 --> 00:27:01.500
Please make sure that you're not going
to be able to see the line number.

00:27:01.500 --> 00:27:04.320
And make sure that it's set
on line so that you don't jump

00:27:04.320 --> 00:27:06.470
to character position 1730.

00:27:06.500 --> 00:27:11.890
We're going to go to line
1730 and click select.

00:27:12.160 --> 00:27:16.020
And then you should see this
call to glut create menu and then

00:27:16.020 --> 00:27:17.780
this pound if def animation here.

00:27:17.780 --> 00:27:19.780
Are you with me so far?

00:27:19.780 --> 00:27:23.290
Okay.

00:27:25.970 --> 00:27:28.910
At line 1730,
I'm going to take clipping number 2.

00:27:28.910 --> 00:27:32.750
Again, I'm just clicking down on
clipping number 2 and hovering,

00:27:32.750 --> 00:27:34.970
and then just holding
the mouse button down,

00:27:34.970 --> 00:27:35.290
right?

00:27:35.310 --> 00:27:38.840
And I get the plus sign,
the green plus sign on my cursor

00:27:38.840 --> 00:27:43.450
here telling me that it's going
to drop the text in there.

00:27:43.500 --> 00:27:45.700
I'm going to go ahead and
position the... If you notice,

00:27:45.700 --> 00:27:48.750
the insertion point actually follows
me around as I'm dragging the mouse.

00:27:48.760 --> 00:27:52.490
I'm still holding the cursor down,
the mouse button down,

00:27:52.590 --> 00:27:54.700
and the insertion point is
following me around under the

00:27:54.740 --> 00:27:55.990
cursor with the green plus.

00:27:56.040 --> 00:27:58.320
A lot going on here.

00:27:58.410 --> 00:28:01.790
In front of line 1730,
I'm going to let go of the mouse button,

00:28:01.790 --> 00:28:03.990
and it's going to just add
the contents of that clipping.

00:28:04.010 --> 00:28:07.030
So in your code, you would obviously type
this kind of stuff in,

00:28:07.100 --> 00:28:09.920
but I just wanted to make it a
bit simpler here and cut down

00:28:09.920 --> 00:28:11.700
on the potential for error.

00:28:11.700 --> 00:28:15.630
So what I'm doing here is I'm just using
this preprocessor macro that I set in

00:28:15.630 --> 00:28:17.850
my build setting in my XC config file.

00:28:17.860 --> 00:28:18.600
Pretty simple.

00:28:18.600 --> 00:28:22.300
But it still shows how to use some
of these complex features together.

00:28:22.300 --> 00:28:23.060
Okay.

00:28:23.060 --> 00:28:25.160
I'm just going to go ahead
and click build and go,

00:28:25.160 --> 00:28:28.660
and it's going to ask me to save.

00:28:28.820 --> 00:28:31.670
And then it's starting
up the GlutMag here.

00:28:31.700 --> 00:28:35.360
And I have some network
timeout on this machine here.

00:28:35.360 --> 00:28:36.650
I had this a little bit earlier.

00:28:36.850 --> 00:28:39.240
There we go.

00:28:39.560 --> 00:28:45.110
What it did now was to just add a little
menu item that just shows this version.

00:28:45.190 --> 00:28:48.440
So 0.1 pre-alpha.

00:28:48.440 --> 00:28:50.400
So it's the same thing as before.

00:28:50.400 --> 00:28:52.910
But one interesting thing
is that the XC config file,

00:28:52.910 --> 00:28:55.980
as you would imagine,
is tied into the dependency analysis.

00:28:55.980 --> 00:29:00.000
So you just go ahead and quit
here and click quit from the menu.

00:29:00.000 --> 00:29:02.540
You get the menu in this
little app by just clicking.

00:29:02.540 --> 00:29:04.280
You don't have to
right-click or anything.

00:29:04.280 --> 00:29:07.040
It's a little bit non-standard.

00:29:07.040 --> 00:29:10.000
But it's a demo app.

00:29:10.000 --> 00:29:13.990
Now what I'm going to go ahead and do
is go ahead and close the source code.

00:29:14.430 --> 00:29:18.840
And let's double-click to open up the
common settings configuration file again.

00:29:18.840 --> 00:29:23.270
So this is just the file that we
created earlier with the code in it.

00:29:23.430 --> 00:29:25.300
And I'm just going to change
my string here now to say,

00:29:25.300 --> 00:29:28.300
well, I've done some work and, you know,
I feel good about this.

00:29:28.300 --> 00:29:31.290
This is a version 0.2 pre-alpha, right?

00:29:31.300 --> 00:29:35.300
So we're still not quite ready to ship,
but almost getting there, right?

00:29:35.300 --> 00:29:39.320
So I just made one change to the,
not the source code file,

00:29:39.320 --> 00:29:41.300
but the build settings file.

00:29:41.320 --> 00:29:43.320
And I click Build and Go.

00:29:43.350 --> 00:29:46.100
Click Yes to save.

00:29:48.510 --> 00:29:51.940
And then Xcode builds
it and runs it again.

00:29:51.960 --> 00:29:55.410
And now when I open up the menu,
of course, it says version 0.2 pre-alpha.

00:29:55.480 --> 00:29:59.330
So the XC config file is
considered to be a source file,

00:29:59.380 --> 00:30:00.430
just like any.

00:30:00.450 --> 00:30:04.440
And when you make changes to it,
that affects the dependency analysis.

00:30:04.440 --> 00:30:10.440
Because it's a style sheet file,
and if you base the entire project on it,

00:30:10.440 --> 00:30:13.500
of course, if you make a change,
you may have to recompile a lot of

00:30:13.500 --> 00:30:16.400
different files if they all get affected.

00:30:16.560 --> 00:30:19.290
So we've actually reached milestone two.

00:30:19.390 --> 00:30:23.040
We've created now a XeConfig file.

00:30:23.170 --> 00:30:25.320
We've populated it with
some interesting settings,

00:30:25.320 --> 00:30:30.000
such as setting a preprocessor macro
and setting the shared build location.

00:30:30.030 --> 00:30:33.060
And then we've shown how that
gets used in the code and how that

00:30:33.060 --> 00:30:34.920
ties into the dependency analysis.

00:30:35.020 --> 00:30:38.330
So onward to milestone two.

00:30:38.410 --> 00:30:42.470
And if you fell behind there,
you can just go ahead and drag

00:30:42.510 --> 00:30:45.550
milestone two now out of the disk image.

00:30:45.610 --> 00:30:48.060
If you go back down to
the disk image here,

00:30:48.060 --> 00:30:50.930
you'll find again all
the milestones are there.

00:30:51.110 --> 00:30:51.950
Let me show you here.

00:30:52.040 --> 00:30:54.630
So, milestone two,
at this point you would

00:30:54.630 --> 00:30:56.240
take the GlutMec project.

00:30:56.270 --> 00:30:59.700
That's exactly the state that
I've arrived at now as we've

00:30:59.700 --> 00:31:02.640
gone through this transformation.

00:31:03.110 --> 00:31:05.580
Okay, so now let's make it a
little bit more interesting.

00:31:05.630 --> 00:31:08.240
We're going to go ahead
and create another project,

00:31:08.240 --> 00:31:11.230
or take another project,
in this case an open source project,

00:31:11.270 --> 00:31:14.010
a pretty nifty one,
and then what we want to do is to

00:31:14.020 --> 00:31:18.120
connect that into our demo and then
show how to link against that and

00:31:18.120 --> 00:31:20.100
embed that and take advantage of that.

00:31:20.100 --> 00:31:22.620
And again, what we want to do is to make
this robot get some life,

00:31:22.670 --> 00:31:23.100
right?

00:31:23.100 --> 00:31:24.100
It's just kind of sitting
up there right now.

00:31:24.100 --> 00:31:27.210
So that's the project for
the end of the day here,

00:31:27.210 --> 00:31:29.100
for the end of the session.

00:31:29.220 --> 00:31:31.480
So to do that,
I'm going to leave the GlutMec

00:31:31.480 --> 00:31:35.100
project window where it is,
just in the upper left corner here.

00:31:35.100 --> 00:31:38.690
Let's go back down to
the other folder again,

00:31:38.690 --> 00:31:41.080
the one I keep referring to.

00:31:41.160 --> 00:31:45.100
That's what contains all the ingredients
here if this was a cooking show.

00:31:45.100 --> 00:31:50.100
This would be sort of the row of
bowls of ready-made things here.

00:31:50.100 --> 00:31:55.020
Is everybody back down to
this other folder here?

00:31:55.100 --> 00:31:56.100
Okay.

00:31:56.100 --> 00:31:58.100
There is a disk image
which contains the project.

00:31:58.100 --> 00:31:59.100
Okay.

00:31:59.100 --> 00:32:04.850
So this is an open source project that
you can find on the -- there's a link

00:32:04.880 --> 00:32:07.100
to the Pixel Ballistics website here.

00:32:07.100 --> 00:32:09.410
It's a great little project,
and just go ahead and

00:32:09.410 --> 00:32:11.100
double-click on the disk image.

00:32:11.100 --> 00:32:13.080
It's the exact disk
image from their site,

00:32:13.100 --> 00:32:17.070
and I encourage you all to go to that
site and read up more about this.

00:32:17.190 --> 00:32:20.830
What I'm going to do in this case is
to go ahead and do what you would do

00:32:20.830 --> 00:32:25.350
in your own project to leverage this,
take the source code and

00:32:25.440 --> 00:32:28.100
incorporate it with your project.

00:32:28.100 --> 00:32:31.100
So if you have a separate subproject,
just to keep it separate,

00:32:31.100 --> 00:32:33.920
so if there is an update to this other
project or if you make changes that you

00:32:33.920 --> 00:32:37.980
want to contribute back to the community,
we should keep it separate from the

00:32:37.980 --> 00:32:40.100
project that we're working on here.

00:32:40.100 --> 00:32:44.470
So there are a couple of different
ways to get back to the source

00:32:44.750 --> 00:32:47.100
folder for my GlutMec project.

00:32:47.100 --> 00:32:50.110
I have here now the original
for the Lua project,

00:32:50.110 --> 00:32:53.100
and I want to get back
to the GlutMec project.

00:32:53.100 --> 00:32:57.100
One nifty way you might not know about
is to go back to the title bar here.

00:32:57.100 --> 00:33:01.100
So if you hold down the command key
and you click the left mouse button,

00:33:01.100 --> 00:33:07.080
and then you'll see here the whole
ancestry of where the project lives.

00:33:07.100 --> 00:33:10.100
I can actually just select the project
folder here and open that in the finder.

00:33:10.100 --> 00:33:15.220
So that's a fairly neat way to go back
to the finder view of the project folder

00:33:15.410 --> 00:33:18.100
that not all of you might know about.

00:33:18.100 --> 00:33:23.000
So on the left here now I have
my GlutMec source code project.

00:33:23.310 --> 00:33:25.830
On the right, I have the disk image.

00:33:25.830 --> 00:33:29.520
And hopefully you all have caught
up with me at this point here.

00:33:29.640 --> 00:33:34.390
Again, the Lua disk image with the
source folder in the top level.

00:33:34.570 --> 00:33:38.770
I'm just going to create in my project,
go ahead and from the file

00:33:38.770 --> 00:33:40.630
menu we say new folder.

00:33:40.690 --> 00:33:42.610
I'm just going to call mine subprojects.

00:33:42.770 --> 00:33:44.700
You don't actually have
to create a new folder.

00:33:44.760 --> 00:33:50.490
You can call it anything you like just
to keep things organized a little bit.

00:33:50.560 --> 00:33:54.050
So we've all created the
extra subprojects folder

00:33:54.050 --> 00:33:56.450
here in the GlutMech project.

00:33:56.510 --> 00:33:58.690
Double click on that.

00:33:59.070 --> 00:34:01.150
And then we have an empty folder.

00:34:01.270 --> 00:34:04.530
Let's go ahead and take
the source code for Lua.

00:34:04.900 --> 00:34:08.350
And this is a distribution of Lua,
I should say, that has the standard Lua,

00:34:08.350 --> 00:34:12.880
which is a little embeddable scripting
language used by actually a lot of

00:34:12.900 --> 00:34:15.340
different software systems these days.

00:34:15.430 --> 00:34:17.390
Pretty popular and gaining popularity.

00:34:17.390 --> 00:34:19.890
This also contains an
Objective-C bridge for that,

00:34:19.900 --> 00:34:20.900
which is pretty nice.

00:34:20.900 --> 00:34:25.200
You can translate from plists into Lua
scripts and all that kind of stuff.

00:34:25.370 --> 00:34:29.030
I'm just going to rename my
source folder here to be Lua.

00:34:29.140 --> 00:34:30.130
You don't have to do that.

00:34:30.140 --> 00:34:32.060
It doesn't really matter.

00:34:32.160 --> 00:34:36.370
Okay,
I like to keep things neat and tidy here.

00:34:37.060 --> 00:34:39.690
If you double-click on
the Lua folder we copied,

00:34:39.840 --> 00:34:44.000
you'll see that there is already a Lua
OBSI Bridge Xcode project in there.

00:34:44.000 --> 00:34:47.000
This may not have been the
case for other open source.

00:34:47.000 --> 00:34:50.000
There may have been a Makefile in there,
there may have been

00:34:50.000 --> 00:34:51.000
other kinds of things.

00:34:51.000 --> 00:34:57.000
Xcode lets you create targets that
wrap Makefiles in an Xcode target,

00:34:57.000 --> 00:35:00.000
that wrap Ant files and
other kinds of build systems.

00:35:00.000 --> 00:35:02.230
In this case,
I wanted to show an example of

00:35:02.230 --> 00:35:04.000
a nicely configured project.

00:35:04.000 --> 00:35:06.000
It's already available on the web here.

00:35:06.000 --> 00:35:10.000
I'm going to double-click and
get the Lua OBSI Bridge project.

00:35:10.000 --> 00:35:11.990
I'm going to drag it
over to the right here.

00:35:12.000 --> 00:35:14.110
So at this point,
we have our two projects open,

00:35:14.110 --> 00:35:15.980
but they're not yet connected, right?

00:35:16.080 --> 00:35:18.400
What we did was we copied
the source code for the Lua

00:35:18.400 --> 00:35:21.980
project into the main project,
and we've opened them up,

00:35:22.000 --> 00:35:25.700
but they're not yet connected.

00:35:26.160 --> 00:35:31.280
So, I want to show a couple of things
about this project as it came

00:35:31.490 --> 00:35:34.100
pre-configured from the website.

00:35:34.100 --> 00:35:38.860
If I click on "Get Info" here,
go ahead and select the

00:35:38.860 --> 00:35:44.100
top-level project here icon,
the blue icon, and then click "Info".

00:35:44.100 --> 00:35:50.090
Under the "Configurations" tab,
if you click on "Configurations" here,

00:35:50.870 --> 00:35:54.570
You'll see that there are already
three configurations set up.

00:35:54.570 --> 00:35:57.190
And there's actually one set
up for embedding already,

00:35:57.200 --> 00:36:01.400
but I want to debug this and go
ahead and embed the debug version.

00:36:01.400 --> 00:36:03.780
So I'm going to edit that one.

00:36:03.900 --> 00:36:08.860
Multiple projects work a lot better
if you have the same names for your

00:36:08.860 --> 00:36:13.790
configurations for the different
projects that are involved.

00:36:13.800 --> 00:36:17.260
You can call them anything you like,
but it works better if you

00:36:17.260 --> 00:36:19.890
have to set up fewer things if
they're all called the same,

00:36:19.890 --> 00:36:21.790
because Xcode will
automatically find them.

00:36:21.800 --> 00:36:23.750
So I'm going to go ahead and rename this.

00:36:23.830 --> 00:36:27.800
Go ahead and double-click on the
configuration called Development.

00:36:27.800 --> 00:36:33.290
I'm just going to type
Debug here with a capital D.

00:36:33.620 --> 00:36:37.020
And similarly, we're going to rename
deployment to release.

00:36:37.270 --> 00:36:42.600
If you create a new project
in Xcode 2.3 or 2.4 or 3.0,

00:36:42.600 --> 00:36:45.630
it will already come with
debug and release by default.

00:36:45.740 --> 00:36:49.240
But older versions of Xcode
and project builder before it

00:36:49.240 --> 00:36:53.630
would have created development
and deployment configurations.

00:36:54.370 --> 00:37:00.420
So now we've renamed the deployment,
the development to debug and the

00:37:00.420 --> 00:37:03.120
deployment configuration to release.

00:37:03.220 --> 00:37:05.940
This doesn't change the actual
settings that are contained in them,

00:37:05.940 --> 00:37:08.180
just the name of them.

00:37:09.240 --> 00:37:15.320
So now we've renamed the deployment,
the development to debug and the

00:37:15.330 --> 00:37:18.040
deployment configuration to release.

00:37:18.040 --> 00:37:20.840
This doesn't change the actual
settings that are contained in them,

00:37:20.840 --> 00:37:23.080
just the name of them.

00:37:39.220 --> 00:37:40.820
command line tool.

00:37:40.820 --> 00:37:43.630
And then finally,
an aggregate target that actually is

00:37:43.630 --> 00:37:46.850
set up to depend on the other four,
which is just a way to

00:37:46.850 --> 00:37:49.050
build them all together.

00:37:49.240 --> 00:37:53.240
Let's go ahead and inspect
the framework target.

00:37:53.250 --> 00:37:57.310
And to do that,
we're going to go ahead and just

00:37:57.310 --> 00:38:02.890
click on the LuaObsi Bridge framework
target underneath my targets here.

00:38:03.400 --> 00:38:19.100
[Transcript missing]

00:38:19.280 --> 00:38:23.090
I'm going to choose
Customize Settings here.

00:38:23.170 --> 00:38:28.160
Now, I'm running Xcode 2.3 on
Tiger here just to sort of show the

00:38:28.160 --> 00:38:29.540
baseline that will support this.

00:38:29.540 --> 00:38:31.630
In other words,
you don't actually need any of

00:38:31.630 --> 00:38:34.200
the software that we've made
available at this conference,

00:38:34.200 --> 00:38:38.380
Xcode 2.4 or Leopard Preview,
in order to apply all these

00:38:38.380 --> 00:38:40.200
things on your own projects.

00:38:40.200 --> 00:38:45.200
If you are running Leopard Preview,
this is called User-Defined Settings.

00:38:45.200 --> 00:38:47.200
The Customize Settings is called
User-Defined Settings now.

00:38:47.200 --> 00:38:50.200
We felt that was probably a
little bit clearer of a name.

00:38:50.360 --> 00:38:55.190
This again just shows all the bold ones,
all the ones that are set at this level.

00:38:55.210 --> 00:38:58.500
The other ones shown are the ones
that are inherited from those

00:38:58.500 --> 00:39:03.740
lower levels on the diagram,
or the stack that I had on the slide.

00:39:05.350 --> 00:39:10.160
What we see here is that
there are some absolute paths,

00:39:10.160 --> 00:39:12.390
but these are not actually absolute.

00:39:12.400 --> 00:39:15.280
If I double-click on this,
it actually shows me that

00:39:15.280 --> 00:39:18.240
this is a build setting,
source root in this case,

00:39:18.250 --> 00:39:20.020
that's being expanded.

00:39:20.020 --> 00:39:25.340
And it's just that the value I see is
the one that will actually get used.

00:39:25.350 --> 00:39:28.230
If I move the project, this would change.

00:39:29.120 --> 00:39:49.990
The installation directory is
an add executable underbar path.

00:39:49.990 --> 00:39:49.990
This is a variable for the
dynamic loader at runtime.

00:39:49.990 --> 00:39:49.990
The add executable path is the thing
that gets replaced with whatever place

00:39:49.990 --> 00:39:49.990
your application happens to live.

00:39:50.290 --> 00:39:55.630
This application uses @executablepath,
which works way back on Mac OS X.

00:39:55.670 --> 00:39:59.430
I'm going to change this to @loaderpath,
which is the newer one that

00:39:59.430 --> 00:40:03.360
works on Tiger and later,
which lets the framework

00:40:03.450 --> 00:40:06.510
be embedded into anything,
not just an application,

00:40:06.580 --> 00:40:09.400
into another framework, into a plugin,
etc.

00:40:11.520 --> 00:40:14.570
To do that, I just double-click on this.

00:40:14.620 --> 00:40:24.110
If you double-click on the name here,
I get a sheet that comes down.

00:40:24.110 --> 00:40:24.110
I don't know if everybody can read that.

00:40:24.920 --> 00:40:30.940
I'm going to type in @loader_path
instead of @executable_path.

00:40:30.940 --> 00:40:33.960
So I'm not changing the slashes
or the dot dots or anything.

00:40:33.960 --> 00:40:37.460
I'm just typing the word loader
as opposed to executable.

00:40:37.510 --> 00:40:40.310
And the subtle difference there
being the executable is the main

00:40:40.360 --> 00:40:42.180
program for your application.

00:40:42.240 --> 00:40:48.520
The loader is whatever Mako image is
loading this other embedded thing,

00:40:48.530 --> 00:40:51.880
whether that's a dynamic library
or an executable or anything.

00:40:51.880 --> 00:40:53.380
So it's more general purpose.

00:40:55.050 --> 00:40:58.690
Okay, so I've changed the
installation directory.

00:40:59.320 --> 00:41:11.840
From @executable_path/.../frameworks
to @loader_path/.../frameworks.

00:41:11.840 --> 00:41:15.310
And I'm going to show you a
little bit what this means on

00:41:15.310 --> 00:41:16.840
the disk a little bit later on.

00:41:16.840 --> 00:41:20.460
Many of you, I'm sure,
know the dot dot and the shell

00:41:20.460 --> 00:41:23.040
notation means to go up one directory.

00:41:23.040 --> 00:41:26.340
So what this does is it goes up one
directory out of where the executable

00:41:26.340 --> 00:41:29.300
lives in your application wrapper.

00:41:29.360 --> 00:41:33.020
and then down into a new
directory called frameworks.

00:41:34.210 --> 00:41:37.230
There is one more thing
I want to do here,

00:41:37.230 --> 00:41:41.080
and that is that we added an
XEConfig file to the main project,

00:41:41.080 --> 00:41:44.340
and one of the things I mentioned
was that you can use that to share

00:41:44.340 --> 00:41:46.100
settings between different projects.

00:41:46.100 --> 00:41:49.620
So we're going to do that here
by just adding the same file,

00:41:49.640 --> 00:41:53.060
a reference to the same file,
into this Lua project.

00:41:53.100 --> 00:41:56.040
So we'll have both projects
referencing the same underlying

00:41:56.040 --> 00:41:58.100
style sheet of settings,
if you will.

00:41:58.100 --> 00:42:00.090
There are many ways to do this.

00:42:00.100 --> 00:42:02.100
You probably know you
can use the project.

00:42:02.100 --> 00:42:07.180
You can say, let's see,
maybe it's not project.

00:42:07.180 --> 00:42:07.180
Huh.

00:42:07.650 --> 00:42:10.930
I always context click,
that's why I don't know these things.

00:42:10.970 --> 00:42:15.150
I can right click on the project
and there's the Add submenu.

00:42:15.230 --> 00:42:16.660
I personally just find
that more convenient.

00:42:16.660 --> 00:42:18.400
I can add using existing files.

00:42:18.400 --> 00:42:20.400
I'm going to show you something
you might not know actually.

00:42:20.400 --> 00:42:23.120
I can just take the reference
over in my main project.

00:42:23.210 --> 00:42:25.400
Again, my main project is on the left.

00:42:25.500 --> 00:42:27.700
The Lua project is on the right.

00:42:27.770 --> 00:42:33.780
Just go ahead and make the XEConfig
file that you created earlier,

00:42:33.780 --> 00:42:37.800
go ahead and make sure that shows
up here in the main project.

00:42:37.850 --> 00:42:39.990
I'm just going to drag
this over and just drop it.

00:42:40.060 --> 00:42:41.890
And you see the plus sign showed up.

00:42:41.920 --> 00:42:44.300
I'll do that again a bit
slower so you can see.

00:42:44.300 --> 00:42:47.100
I'm just going to grab the
common settings XEConfig file,

00:42:47.220 --> 00:42:50.600
drag it over to the other project,
the Lua project.

00:42:50.690 --> 00:42:54.470
Because the green little plus
icon shows up on the pointer,

00:42:54.560 --> 00:42:57.830
the mouse pointer here,
it means that I'm going

00:42:57.830 --> 00:42:59.530
to copy a reference.

00:42:59.630 --> 00:43:02.860
In this case, I'm dragging the reference,
not the file itself.

00:43:02.930 --> 00:43:06.930
So I'm going to copy the reference,
but both copies are going to

00:43:06.960 --> 00:43:09.100
point to the same file on disk.

00:43:09.430 --> 00:43:12.040
So that means that I can define
my settings just once and

00:43:12.040 --> 00:43:14.560
reuse them in both projects.

00:43:14.580 --> 00:43:18.240
So let go of the mouse and now
we get the same sheet that we

00:43:18.240 --> 00:43:19.780
get whenever we add a file.

00:43:19.940 --> 00:43:24.300
I'm going to choose not to copy
the item into the Lua project.

00:43:24.340 --> 00:43:26.980
And of course that's because
we want to share this one file.

00:43:26.980 --> 00:43:30.070
So make sure the copy items is unchecked.

00:43:30.250 --> 00:43:34.950
I want the text encoding to be UTF-8,
just to be sure I can

00:43:34.950 --> 00:43:38.900
type any kind of script,
any kind of characters

00:43:38.900 --> 00:43:40.200
into the names there.

00:43:40.200 --> 00:43:45.200
I'm going to uncheck all of the
targets that were checked by default.

00:43:45.200 --> 00:43:49.240
Xcode by default will check
the target that is capable,

00:43:49.240 --> 00:43:52.200
the first target that is capable
of accepting a file of this type.

00:43:52.200 --> 00:43:56.680
We're going to uncheck this because
we don't actually want to copy the

00:43:56.680 --> 00:43:59.090
XC config file into the framework.

00:43:59.210 --> 00:44:01.180
We want to just base the project on it.

00:44:01.200 --> 00:44:04.570
Uncheck copy items,
uncheck all the targets,

00:44:04.570 --> 00:44:07.100
set the text encoding to UTF-8.

00:44:07.100 --> 00:44:10.710
Does everybody's panel look like this?

00:44:10.980 --> 00:44:13.880
Those who are still with me.

00:44:13.940 --> 00:44:15.780
And we click Add.

00:44:15.820 --> 00:44:19.600
So now we've just added another
reference to the same file.

00:44:20.100 --> 00:44:24.490
And now, we can go ahead and build this,
but to show you something

00:44:24.490 --> 00:44:26.820
even more interesting,
I'm actually going to go ahead

00:44:26.890 --> 00:44:28.000
and go to the next milestone.

00:44:28.010 --> 00:44:29.500
We haven't yet built the project.

00:44:29.500 --> 00:44:32.000
We haven't yet connected
the projects together.

00:44:32.000 --> 00:44:36.000
So right now we have, again,
the GlutMAC application project,

00:44:36.000 --> 00:44:37.000
just the same mold as before.

00:44:37.000 --> 00:44:39.820
We've now copied our
Lua project in there,

00:44:39.830 --> 00:44:43.000
configured it,
set it up to use the same style sheet,

00:44:43.000 --> 00:44:45.320
the same config file,
and so it's going to inherit the

00:44:45.320 --> 00:44:48.990
same settings as the other project,
but they're not yet linked together.

00:44:49.000 --> 00:44:55.000
So now we're at milestone three,
and anybody who ran into trouble there,

00:44:55.000 --> 00:44:59.670
you can start now with
milestone three if you want.

00:45:01.670 --> 00:45:04.120
Milestone 3 contains both
of these projects underneath

00:45:04.220 --> 00:45:07.200
the main source folder.

00:45:07.200 --> 00:45:08.960
So now let's link them together.

00:45:08.960 --> 00:45:11.740
Let's take the main project,
we take the Lua project,

00:45:11.740 --> 00:45:13.680
we connect them together.

00:45:13.680 --> 00:45:15.280
So to do that,
I'm going to use another little

00:45:15.280 --> 00:45:16.970
trick that you may not know about.

00:45:17.120 --> 00:45:19.720
This is the sort of
advanced trick session here.

00:45:19.720 --> 00:45:27.990
So if you go to the Lua Bridge project,
just click and press on the icon here,

00:45:27.990 --> 00:45:30.780
the blue project icon.

00:45:30.780 --> 00:45:37.140
This now results in a reference to
the project coming under my mouse.

00:45:37.140 --> 00:45:39.730
So now I can take this one and
just drag and drop it underneath.

00:45:39.730 --> 00:45:44.960
Let me put it under the frameworks phase,
the frameworks group of my main project.

00:45:44.960 --> 00:45:45.950
So everybody see that?

00:45:45.950 --> 00:45:47.860
I just clicked and
pressed on the title bar.

00:45:47.860 --> 00:45:50.320
Again, you can go to the finder,
you can find the project

00:45:50.320 --> 00:45:51.900
icon and drag it that way.

00:45:51.940 --> 00:45:55.260
It doesn't really matter.

00:45:55.260 --> 00:45:58.860
Now I'm going to go ahead
and release the mouse button.

00:45:58.860 --> 00:46:04.800
And again I get this add project,
add to project sheet.

00:46:04.800 --> 00:46:07.100
Again, I want to make sure the
copy items is unchecked.

00:46:07.100 --> 00:46:09.060
I don't want to make another
copy of the Lua project.

00:46:09.100 --> 00:46:11.770
I just want to link them.

00:46:11.780 --> 00:46:14.220
Text encoding in this case
actually doesn't really matter.

00:46:14.220 --> 00:46:15.560
Xcode handles that on its own.

00:46:15.560 --> 00:46:17.750
It does use UTF-8 for projects.

00:46:17.750 --> 00:46:20.670
You can have anything you
like in a target name,

00:46:20.670 --> 00:46:21.840
any kind of a language.

00:46:21.840 --> 00:46:28.840
I'm going to uncheck the
target checkbox here again.

00:46:28.840 --> 00:46:32.100
We're going to go ahead and set up the
target to link against the framework,

00:46:32.100 --> 00:46:35.400
but I want to show you how to
do that in a different way.

00:46:35.400 --> 00:46:38.400
So uncheck copy items,
make sure the text,

00:46:38.400 --> 00:46:41.640
well actually you can leave
the text encoding alone,

00:46:41.640 --> 00:46:44.600
and uncheck the target checkbox.

00:46:44.600 --> 00:46:46.510
And then click add.

00:46:46.510 --> 00:46:47.510
Okay?

00:46:47.510 --> 00:46:47.510
So now

00:46:47.700 --> 00:46:53.520
So now, this blue icon here
hopefully shows up well.

00:46:53.670 --> 00:46:58.020
If I disclose the blue icon,
you see now these targets again that

00:46:58.020 --> 00:46:59.930
are produced by this sub-project.

00:46:59.940 --> 00:47:01.850
They're shown in red because
they haven't been built yet.

00:47:01.860 --> 00:47:03.190
They don't exist on disk yet.

00:47:03.220 --> 00:47:05.940
So they'll turn black again
once we build the project.

00:47:05.940 --> 00:47:09.820
So we could go back to the Lua project
here and click build and build it.

00:47:09.970 --> 00:47:12.940
But because we're going to
treat this as a sub-project,

00:47:12.940 --> 00:47:15.360
we'd rather just set up the
whole chain so that the Lua

00:47:15.360 --> 00:47:16.930
project is built automatically.

00:47:16.940 --> 00:47:21.720
So what we're going to do
here is to open up the target,

00:47:21.720 --> 00:47:26.770
the GlutMech target underneath
the main project here.

00:47:26.940 --> 00:47:30.170
You'll see this build phase that
I talked about before called

00:47:30.170 --> 00:47:31.940
link binary with libraries.

00:47:31.940 --> 00:47:32.930
That's the last step here.

00:47:32.940 --> 00:47:35.240
So what I'm going to do is
just click and drag on the

00:47:35.290 --> 00:47:38.940
first of these red icons here,
the Lua-Odyssey Bridge Framework.

00:47:38.940 --> 00:47:44.590
And again, I got that by twisting open
the blue project icon here.

00:47:45.500 --> 00:47:48.620
So I'm going to just drag and drop that.

00:47:48.650 --> 00:47:52.680
So now I've configured the
demo application to link

00:47:52.680 --> 00:47:58.360
against this framework,
the product of this sub-target here.

00:47:58.600 --> 00:47:59.600
So that's one thing.

00:47:59.600 --> 00:48:01.830
I want my application to link against it.

00:48:01.910 --> 00:48:06.150
But I also want to embed a copy.

00:48:06.390 --> 00:48:11.770
And so to do that,
I go ahead and I select the target,

00:48:11.950 --> 00:48:16.220
the GlutMech target,
and I go ahead and choose Add.

00:48:16.220 --> 00:48:19.700
I'm doing this in the context menu now.

00:48:19.700 --> 00:48:21.410
And say New Build Phase.

00:48:21.480 --> 00:48:24.160
I'm going to create one of these
Copy Files build phases that let me

00:48:24.160 --> 00:48:27.560
copy arbitrary files to arbitrary
locations because what we're going

00:48:27.560 --> 00:48:30.700
to do is we're going to take the
framework and we're going to just

00:48:30.700 --> 00:48:33.170
copy it into the application wrapper.

00:48:33.480 --> 00:48:40.500
Okay, so that created a new copy files
phase at the bottom of my list here.

00:48:40.830 --> 00:48:44.670
And it also opens up the
inspector because odds are I'm

00:48:44.670 --> 00:48:46.340
going to want to configure it.

00:48:46.340 --> 00:48:46.620
And I do.

00:48:46.620 --> 00:48:50.310
The destination can be an absolute
path or it can be expressed

00:48:50.310 --> 00:48:52.200
in terms of build settings.

00:48:52.220 --> 00:48:55.640
We have a list of particularly
popular destinations,

00:48:55.680 --> 00:48:58.120
one of which is frameworks.

00:48:58.130 --> 00:49:02.510
So this refers to a frameworks
subfolder inside your application

00:49:02.970 --> 00:49:06.510
wrapper which relates to the add
loader path that we had before.

00:49:06.540 --> 00:49:11.260
If you remember we went dot dot to go up
one level and then down into frameworks.

00:49:11.350 --> 00:49:13.850
So this is the corresponding part here.

00:49:13.930 --> 00:49:18.500
We're saying the framework is
going to show up one level up

00:49:18.500 --> 00:49:21.770
from the executable and then down
into the framework subfolder.

00:49:21.770 --> 00:49:25.260
And here we're actually configuring it
to copy it into the framework subfolder.

00:49:25.260 --> 00:49:27.180
Those two need to match.

00:49:28.300 --> 00:49:30.990
I'm going to close the info window.

00:49:31.280 --> 00:49:34.950
And then,
so far the copy files phase is empty.

00:49:35.030 --> 00:49:42.130
We're just going to take the same icon
as before under the blue LuaObsi bridge

00:49:42.190 --> 00:49:46.690
project reference here that's disclosed.

00:49:46.700 --> 00:49:48.650
We see the four targets.

00:49:48.710 --> 00:49:52.880
Just going to copy that,
drag that down into the copy files phase.

00:49:52.970 --> 00:49:55.100
So now, that's the second step, right?

00:49:55.100 --> 00:49:57.480
So we made the application
link against the framework.

00:49:57.550 --> 00:50:01.720
We made the application copy
the framework into itself.

00:50:02.430 --> 00:50:05.740
And the third thing is we want
the Lua framework to be built

00:50:05.840 --> 00:50:08.630
whenever we build the application.

00:50:09.120 --> 00:50:11.900
Okay, to do that,
we open up the info panel.

00:50:11.900 --> 00:50:15.400
I'm just going to double-click
on the GlutMech target.

00:50:15.450 --> 00:50:18.900
And here I see the direct dependencies,
meaning these are the other things

00:50:18.990 --> 00:50:21.340
that this target directly depends on.

00:50:21.390 --> 00:50:25.630
And whatever those in turn depend on,
of course, I indirectly depend on.

00:50:25.680 --> 00:50:29.000
So I click the plus
button at the bottom here.

00:50:31.300 --> 00:50:35.390
I can give you some time to bring up
this panel and click the plus button.

00:50:35.430 --> 00:50:39.920
Now a sheet comes down and the sheet
shows me all the targets in my own

00:50:39.920 --> 00:50:44.300
project that I could depend on that
would not create a circular reference.

00:50:44.300 --> 00:50:46.010
So if a target is missing
from there and you say,

00:50:46.010 --> 00:50:47.290
"Hmm, I wonder why," right?

00:50:47.290 --> 00:50:51.300
One reason might be that it would
create a circular reference.

00:50:51.510 --> 00:50:54.540
Depending on the version of Xcode,
it might actually show a dimmed,

00:50:54.540 --> 00:50:58.110
I think it does in newer versions,
which is sort of more useful.

00:50:58.330 --> 00:51:01.750
What I see here, though,
is also I see my project

00:51:01.750 --> 00:51:04.190
references and I disclose this.

00:51:04.680 --> 00:51:08.290
Again, I can see the products
built by those projects,

00:51:08.290 --> 00:51:09.300
those sub-projects.

00:51:09.300 --> 00:51:13.400
So again, we pick our old friend here,
the Lua-Obs-Ubridge framework,

00:51:13.400 --> 00:51:16.290
and we click "Add to Target."
So now we've done all three.

00:51:16.320 --> 00:51:18.260
We made the application
link against the framework.

00:51:18.310 --> 00:51:21.300
We've set up the application to
copy the framework into itself.

00:51:21.300 --> 00:51:26.700
And we've set up the application
target to depend on the up-to-date

00:51:26.700 --> 00:51:28.300
state of the application.

00:51:28.460 --> 00:51:31.300
And we've set up the application
to build the framework target.

00:51:31.300 --> 00:51:35.730
So now all we have to do is
say "Build and Go." So I don't

00:51:35.730 --> 00:51:38.300
know if you noticed here,
but on the right-hand side,

00:51:38.300 --> 00:51:42.160
it's actually building now the other
project because they're connected

00:51:42.160 --> 00:51:44.300
now and we set up the dependency.

00:51:44.300 --> 00:51:46.290
And we have a build failure.

00:51:46.320 --> 00:51:47.970
What happened?

00:51:48.820 --> 00:51:50.520
Hmm.

00:51:50.570 --> 00:51:51.570
I wonder what we did.

00:51:51.710 --> 00:51:57.740
So let's go ahead and make sure that
we set up the build configuration.

00:51:57.740 --> 00:51:59.140
We forgot one step, didn't we?

00:51:59.240 --> 00:52:02.400
Remember how I added the
XC config file to the subproject?

00:52:02.400 --> 00:52:06.900
Well, sure, that means that the
subproject has access to it.

00:52:06.900 --> 00:52:09.040
But we didn't actually
tell Xcode to use it yet,

00:52:09.040 --> 00:52:12.420
because we might want to use it for the
target or for the project or wherever.

00:52:12.420 --> 00:52:16.320
So what we have to do is to go back
and we have to say that the Lua

00:52:16.320 --> 00:52:18.680
project is based on the common setting.

00:52:18.700 --> 00:52:23.180
So let's go back to the Lua project.

00:52:23.220 --> 00:52:26.100
What I did here, if you didn't see it,
was I double-clicked on

00:52:26.110 --> 00:52:29.700
the very top level icon,
just the one that represents the project.

00:52:29.700 --> 00:52:34.520
At the very bottom here,
it should say based on common settings.

00:52:34.520 --> 00:52:38.060
Common settings should show
up because we already added

00:52:38.060 --> 00:52:40.210
that reference to the project.

00:52:41.310 --> 00:52:45.550
So now, if we go back to our
main application demo,

00:52:45.550 --> 00:52:47.940
and the demo gods are with me,
or the hands-on gods are with me,

00:52:47.940 --> 00:52:54.990
I guess, we'll see it linking,
and we'll see it starting it up.

00:52:58.200 --> 00:52:59.820
Okay, there we go.

00:52:59.820 --> 00:53:00.340
What's this?

00:53:00.360 --> 00:53:01.700
It's still just sitting there.

00:53:01.700 --> 00:53:02.800
Well, okay, so great.

00:53:02.800 --> 00:53:04.950
We actually have the application
linking us to framework,

00:53:04.950 --> 00:53:07.810
embedding against the framework,
but we're not actually calling it yet.

00:53:07.880 --> 00:53:09.180
So that's the last step.

00:53:09.260 --> 00:53:11.200
That's actually the easy part.

00:53:11.200 --> 00:53:15.200
So let's go ahead and quit this.

00:53:15.200 --> 00:53:18.500
I wanted to show you quickly though,
if we go up to products,

00:53:18.500 --> 00:53:20.200
this is not a step that we do.

00:53:20.200 --> 00:53:21.200
You don't have to follow
this if you don't want to.

00:53:21.200 --> 00:53:23.880
I just wanted to show,
I'm going to select the product

00:53:23.910 --> 00:53:27.050
here in the Glut products.

00:53:27.220 --> 00:53:29.280
I'm going to choose reveal and finder.

00:53:29.280 --> 00:53:32.170
This gets me to where it got
built in the build folder.

00:53:32.210 --> 00:53:35.340
And you'll see that LuaObsi bridge
is sitting right next to it because

00:53:35.340 --> 00:53:37.200
we defined the shared build folder.

00:53:37.200 --> 00:53:40.160
If I show package contents
on this application here,

00:53:40.160 --> 00:53:42.650
you'll see,
I'm going to put it in list mode,

00:53:42.650 --> 00:53:44.150
makes it easier to see.

00:53:44.190 --> 00:53:49.790
Under contents, we have Mac OS,
which is a standard Mac OS X way

00:53:49.790 --> 00:53:51.170
of packaging an application.

00:53:51.200 --> 00:53:54.190
The executable lives down
here in the Mac OS folder.

00:53:54.210 --> 00:53:56.200
The dot dot gets us up one level.

00:53:56.200 --> 00:53:59.200
Out of the Mac OS folder
and into contents.

00:53:59.200 --> 00:54:02.200
And then the framework part
gets us down into the framework.

00:54:02.200 --> 00:54:04.690
So this is what Mac OS X does
when it actually goes to try

00:54:04.690 --> 00:54:06.200
to find this Lua framework.

00:54:06.200 --> 00:54:08.200
It says, okay, loader path,
and then dot dot up,

00:54:08.200 --> 00:54:09.200
and then down into frameworks.

00:54:09.200 --> 00:54:12.100
And down in the frameworks,
we find now the Lua

00:54:12.100 --> 00:54:14.200
framework that got embedded.

00:54:14.200 --> 00:54:14.710
So great.

00:54:14.950 --> 00:54:16.200
Everything looks good on disk.

00:54:16.200 --> 00:54:18.960
Let's modify the code.

00:54:19.390 --> 00:54:21.300
And this is actually milestone four now.

00:54:21.300 --> 00:54:22.800
So we've reached milestone four.

00:54:22.800 --> 00:54:26.290
If you didn't follow,
you can go ahead and

00:54:26.320 --> 00:54:30.140
copy milestone four out,
and I've set the project up

00:54:30.180 --> 00:54:33.180
to be exactly like it is here.

00:54:34.500 --> 00:54:38.640
So, I'm just going to close a couple
of these folders just to get us

00:54:38.640 --> 00:54:40.450
back to a fairly clean state.

00:54:40.470 --> 00:54:43.650
And...

00:54:44.340 --> 00:54:47.160
Now let's go ahead and modify the code.

00:54:47.410 --> 00:54:49.260
There's just one source
file in this demo,

00:54:49.260 --> 00:54:50.260
which is pretty simple.

00:54:50.410 --> 00:54:52.420
So just double-click on it.

00:54:52.660 --> 00:54:55.640
This is the one we modified
before to add our menu item.

00:54:55.680 --> 00:54:58.090
Now we're going to make a couple of edits
to make things a bit more interesting.

00:54:58.100 --> 00:55:02.930
Again, if you click on the doc and you
go to your resources folder,

00:55:02.940 --> 00:55:07.640
you'll find clippings 3, 4, 5, and 6,
and we're going to put those

00:55:07.640 --> 00:55:08.890
into various places in the code.

00:55:08.900 --> 00:55:11.140
So this is not as tricky as it sounds.

00:55:11.140 --> 00:55:14.700
I put the line number actually
in the name of each clipping,

00:55:14.700 --> 00:55:16.700
so this should be pretty straightforward.

00:55:16.700 --> 00:55:21.550
Just position the window so that the
resources folder is available here

00:55:21.550 --> 00:55:24.400
and the source code is also available.

00:55:24.400 --> 00:55:26.160
It should be easier for you
because you have a smaller

00:55:26.160 --> 00:55:27.250
typeface probably than I do.

00:55:27.300 --> 00:55:29.000
You can fit more on the screen.

00:55:29.000 --> 00:55:32.680
Under the Find menu, choose Go to Line.

00:55:33.300 --> 00:55:36.690
And then make sure it's online.

00:55:36.770 --> 00:55:39.200
The first one is line 63.

00:55:39.250 --> 00:55:41.580
I'm going to select that.

00:55:41.970 --> 00:55:43.660
And again,
these line numbers are part of the name

00:55:43.660 --> 00:55:47.410
of the clipping in the file system,
so you should be able to catch up

00:55:47.410 --> 00:55:49.200
if you fall a little bit behind.

00:55:49.300 --> 00:55:51.510
Here again,
I'm just going to take each clipping

00:55:51.510 --> 00:55:53.110
and just insert it at that line.

00:55:53.180 --> 00:55:56.520
So line 63 means insert it
at the beginning of line 63,

00:55:56.520 --> 00:55:58.470
the way I have the insertion point here.

00:55:58.690 --> 00:55:59.520
And I just let go.

00:55:59.590 --> 00:56:02.510
This just includes the headers
from the embedded framework.

00:56:02.580 --> 00:56:04.550
Pretty simple stuff.

00:56:05.120 --> 00:56:08.000
I'm going to go to line 1744.

00:56:08.090 --> 00:56:10.620
Again, I'm reading this from
the name of the clipping.

00:56:10.650 --> 00:56:15.230
So, if you are a few seconds behind,
then just read it from

00:56:15.230 --> 00:56:15.960
the name of the clipping.

00:56:15.980 --> 00:56:18.870
This is the main part here.

00:56:19.100 --> 00:56:19.930
I just wrote this.

00:56:19.960 --> 00:56:24.580
Just took an hour or so to
write a little bit of code.

00:56:24.580 --> 00:56:26.140
I'm not going to explain
it in particular now,

00:56:26.140 --> 00:56:27.630
but it's pretty heavily commented.

00:56:27.690 --> 00:56:31.090
It's specific to the Lua open
source framework that we're using.

00:56:31.100 --> 00:56:34.180
If you're embedding something else,
you would, of course,

00:56:34.180 --> 00:56:35.100
have your own code here.

00:56:35.100 --> 00:56:39.590
So this is just to make things a little
bit more interesting for the demo.

00:56:40.350 --> 00:56:44.860
Clipping 5 is at 1852.

00:56:44.890 --> 00:56:47.530
And this is just-- now we've
added the pound includes.

00:56:47.570 --> 00:56:50.060
We've added some extra functions
that we'll call our framework

00:56:50.060 --> 00:56:51.110
and do something interesting.

00:56:51.160 --> 00:56:54.380
What I'm actually doing is I'm going
to be calling this little Lua script.

00:56:54.380 --> 00:56:55.420
It's a scripting language, right?

00:56:55.420 --> 00:56:58.560
So I'll be calling this little script
every time through the animation loop,

00:56:58.650 --> 00:57:02.070
because we want to move these
arms of this robot and whatnot.

00:57:02.090 --> 00:57:05.120
And if you were developing a game,
you would, of course,

00:57:05.120 --> 00:57:06.060
be checking for hit testing.

00:57:06.060 --> 00:57:07.290
And did somebody fire a rocket?

00:57:07.300 --> 00:57:09.030
That kind of stuff.

00:57:09.600 --> 00:59:37.300
[Transcript missing]

00:59:38.980 --> 00:59:39.740
We're not quite done.

00:59:39.740 --> 00:59:42.060
We're going to do one
more interesting thing.

00:59:42.060 --> 00:59:44.270
Can I have the slides, please?

00:59:47.040 --> 00:59:48.130
Okay, great.

00:59:48.170 --> 00:59:52.000
So that was a little bit about showing
you a bit how to use some build settings,

00:59:52.040 --> 00:59:54.220
something you might not know,
set an Xe config file,

00:59:54.290 --> 00:59:58.160
share it among multiple projects,
take two projects, connect them together,

00:59:58.160 --> 01:00:00.520
and set it up so that one
builds a framework and the

01:00:00.520 --> 01:00:01.600
other one embeds it in it.

01:00:01.600 --> 01:00:04.000
That's pretty straightforward.

01:00:04.000 --> 01:00:08.000
One of the things that's interesting
is when it gets to deployment.

01:00:08.000 --> 01:00:09.990
Well, now, okay,
so now you've worked on this,

01:00:09.990 --> 01:00:12.710
you've written, you know,
100,000 lines of script code

01:00:12.770 --> 01:00:15.950
that does all kinds of advanced
artificial intelligence for the game.

01:00:16.000 --> 01:00:20.000
You want to ship this out to
customers or beta testers or whatnot.

01:00:20.000 --> 01:00:22.080
One good way to do that
is to use a disk image,

01:00:22.080 --> 01:00:24.000
and we'll show how to automate that.

01:00:24.000 --> 01:00:27.030
You saw a great demo actually on Monday,
I think,

01:00:27.080 --> 01:00:32.000
which was to use an automated workflow
to tie into Xcode to build a disk image.

01:00:32.000 --> 01:00:33.000
That's a great way to do it.

01:00:33.000 --> 01:00:36.980
That does mean that you have to
invoke the workflow manually.

01:00:36.990 --> 01:00:40.620
You can set up a target to actually
build the disk image automatically,

01:00:40.620 --> 01:00:43.000
too, so that's another way to do it.

01:00:43.250 --> 01:00:45.000
And why use disk images?

01:00:45.000 --> 01:00:50.000
Well, if you have a simple enough
product that you're deploying,

01:00:50.000 --> 01:00:53.000
such as just an application
or a couple of applications,

01:00:53.000 --> 01:00:57.000
it's a great thing to use a disk image.

01:00:57.000 --> 01:00:59.610
One is that Mac OS X applications
are wrapped,

01:00:59.610 --> 01:01:02.000
so they're actually a tree of folders.

01:01:02.000 --> 01:01:04.980
You can't really send that
across the Internet too well.

01:01:05.000 --> 01:01:08.000
So, you know, enough said.

01:01:08.000 --> 01:01:10.000
Disk images survive transport
across the Internet.

01:01:10.000 --> 01:01:12.590
And something you might have seen
in third-party applications is you

01:01:12.590 --> 01:01:14.000
can have a custom background image.

01:01:14.000 --> 01:01:16.990
You can have a custom background
image and custom colors and layout.

01:01:17.050 --> 01:01:21.980
And also, you can actually -- I've even
seen a Sim link or an alias to

01:01:21.980 --> 01:01:26.000
the application folder and a
little background image that says,

01:01:26.000 --> 01:01:29.000
like, you know,
"Drag this icon over here," right?

01:01:29.000 --> 01:01:32.980
So that's a pretty simple thing for
a user to see when installing it.

01:01:34.070 --> 01:01:35.870
So, how do we create these?

01:01:35.940 --> 01:01:37.560
Well, there's a GUI tool which is great.

01:01:37.610 --> 01:01:39.100
It's called Disk Utility.

01:01:39.110 --> 01:01:41.600
It lets you just select a folder
and create a disk image from it.

01:01:41.600 --> 01:01:44.100
But there's also a command line tool,
and that's what's interesting

01:01:44.120 --> 01:01:45.370
from an Xcode perspective,
right?

01:01:45.450 --> 01:01:51.680
Because Xcode is pretty much tuned
to invoking command line tools

01:01:51.830 --> 01:01:54.500
from various scripts and targets,
etc.

01:01:54.600 --> 01:01:57.680
There's this tool called HDI Util,
which I forget what

01:01:57.680 --> 01:02:01.590
the HDI stands for now,
but I'm sure probably many of you know.

01:02:01.590 --> 01:02:05.000
It's called HDI Util,
and there's a man page for it.

01:02:05.000 --> 01:02:07.360
I'm just going to show a
little bit of how to use that,

01:02:07.360 --> 01:02:10.030
and I'm sure there are other
tools as well and scripts

01:02:10.050 --> 01:02:11.600
that people have written.

01:02:11.600 --> 01:02:13.580
Custom targets are perfect for this.

01:02:13.580 --> 01:02:15.860
A custom target is just
a black box that says,

01:02:15.980 --> 01:02:18.440
you know what,
instead of building an application

01:02:18.440 --> 01:02:21.600
or framework or whatnot,
let's just invoke this script.

01:02:21.600 --> 01:02:23.600
It could be Ruby or Perl
or Python or anything.

01:02:23.600 --> 01:02:23.600
And it's a very simple way to do that.

01:02:23.600 --> 01:02:23.600
You can just click on it,
and it's going to give you

01:02:23.600 --> 01:02:23.600
a little bit of information.

01:02:23.600 --> 01:02:23.600
You can also see that it's
a little bit of a manual,

01:02:23.600 --> 01:02:23.600
and it's going to give you a
little bit of information about

01:02:23.600 --> 01:02:23.600
what you're going to be doing.

01:02:23.600 --> 01:02:26.890
And you can go ahead and do
anything and see what it does,

01:02:26.890 --> 01:02:30.320
and then it comes back to Xcode and says,
yep, I'm done.

01:02:30.320 --> 01:02:35.110
And this is really a great tie-in if you
have very custom things you want to do.

01:02:35.330 --> 01:02:40.580
And let's go back to the hands-on
and then go actually do it.

01:02:40.630 --> 01:02:43.320
So if I could have the demo machine,
please.

01:02:44.310 --> 01:02:45.700
You know, a guy is still standing here.

01:02:45.700 --> 01:02:47.860
Well, we need to improve that script.

01:02:47.970 --> 01:02:51.440
He should have gone off and hunted
down some other robots by now.

01:02:51.590 --> 01:02:54.180
Okay, so let's quit this.

01:02:54.200 --> 01:02:56.980
I'm now starting out with Milestone 5,
so even if you haven't followed

01:02:57.030 --> 01:02:58.970
anything up to this point,
you can still start

01:02:59.080 --> 01:03:00.400
with just Milestone 5.

01:03:00.400 --> 01:03:03.500
Just drag the GlutMech project
out and you could be with

01:03:03.500 --> 01:03:05.200
me for the home run here.

01:03:05.340 --> 01:03:08.190
So we have our GlutMech project.

01:03:08.200 --> 01:03:12.070
I could even close the Lua project
on the right here because my main

01:03:12.080 --> 01:03:14.150
project is still referencing it.

01:03:14.220 --> 01:03:15.940
Xcode will open it in the background.

01:03:15.940 --> 01:03:18.200
It won't open the UI for
it unless you ask for it,

01:03:18.200 --> 01:03:21.050
but it will open the project in the
background and build it and whatnot.

01:03:21.200 --> 01:03:23.190
And any errors will show
up in the main project.

01:03:25.100 --> 01:03:29.990
What I want to do is to create this
target to produce a disk image.

01:03:30.020 --> 01:03:36.000
So we select the target here,
the targets smart group.

01:03:36.000 --> 01:03:39.100
I'm going to go ahead
and use context menu.

01:03:39.100 --> 01:03:40.810
You can use the project menu if you want.

01:03:40.840 --> 01:03:42.240
Just create a new target.

01:03:42.240 --> 01:03:45.350
I'm going to say add new target.

01:03:45.820 --> 01:03:52.290
And we see all kinds of different
target templates that Xcode provides.

01:03:52.290 --> 01:03:58.560
Up at the top, we see some special ones,
which are sort of oddball cases,

01:03:58.560 --> 01:04:01.920
but very useful ones,
especially for complex projects.

01:04:02.100 --> 01:04:04.360
The fourth one there is
a shell script target.

01:04:04.540 --> 01:04:06.250
It's a little bit of a misnomer,
I suppose.

01:04:06.260 --> 01:04:08.580
It comes preconfigured
for a shell script,

01:04:08.640 --> 01:04:10.060
actually shell script.

01:04:10.120 --> 01:04:11.260
It could be actually any script.

01:04:11.260 --> 01:04:14.310
You can modify that to run any
script that you might already have

01:04:14.310 --> 01:04:18.250
in any interpreted language that
you can run from the command line.

01:04:18.260 --> 01:04:21.980
Go ahead and select shell
script target and click next.

01:04:22.050 --> 01:04:25.260
We get to name our target
and call it anything.

01:04:25.260 --> 01:04:28.260
I'm going to call mine create disk image.

01:04:28.260 --> 01:04:30.260
I couldn't think of
anything funny for that one,

01:04:30.260 --> 01:04:32.260
so I'm going to go ahead
and just be boring.

01:04:32.260 --> 01:04:34.260
We're going to add it
to the GlutMag project.

01:04:34.260 --> 01:04:36.260
If we had more than
one project open here,

01:04:36.260 --> 01:04:39.210
we would see everything in the list,
all of them.

01:04:39.370 --> 01:04:41.220
But we just have the one,
so we're just going to create it there.

01:04:41.270 --> 01:04:46.260
Now you see that it showed up
underneath the GlutMag target.

01:04:46.260 --> 01:04:47.250
It has a different icon.

01:04:47.260 --> 01:04:50.200
It just has a generic target icon
because it's a generic target.

01:04:50.260 --> 01:04:53.570
It does whatever our
script tells it to do.

01:04:54.060 --> 01:04:59.590
Xcode opened the info
panel for us right away.

01:04:59.690 --> 01:05:02.460
We're going to take that opportunity
to go ahead and set up the dependency.

01:05:02.500 --> 01:05:05.560
What we want,
and this is the nice thing with using

01:05:05.560 --> 01:05:08.250
the targets and dependencies here,
we want to set up our disk

01:05:08.320 --> 01:05:10.990
image target so that it depends
on the application target,

01:05:10.990 --> 01:05:13.990
which if you remember,
still depends on the Lua target.

01:05:14.020 --> 01:05:17.760
So we have this little three-step
chain of targets all depending

01:05:17.820 --> 01:05:19.400
on each other in a chain.

01:05:19.400 --> 01:05:22.120
So whenever I update the disk image,
it's going to first see

01:05:22.120 --> 01:05:24.350
if the app is up to date,
and that's going to first see

01:05:24.350 --> 01:05:25.520
if the framework is up to date.

01:05:25.640 --> 01:05:27.000
So that's pretty nice.

01:05:27.000 --> 01:05:29.400
So click on the plus button.

01:05:29.400 --> 01:05:33.000
Now we see that the GlutMAC target
shows up as a possible dependency,

01:05:33.000 --> 01:05:35.500
as do all the ones in the subproject.

01:05:35.500 --> 01:05:38.590
We're just going to
pick the GlutMAC target,

01:05:38.590 --> 01:05:43.500
the one from our project itself,
and click Add Target.

01:05:43.500 --> 01:05:47.970
So right now we have,
we're inspecting the

01:05:48.100 --> 01:05:49.300
Create Disk Image target.

01:05:49.300 --> 01:05:52.230
We're going to go ahead and
change target to new one,

01:05:52.320 --> 01:05:56.900
and we have it set up to
depend on the application.

01:05:56.900 --> 01:06:01.860
And then I'm going to go ahead
and disclose this target,

01:06:01.910 --> 01:06:03.810
and I see that it's set up
to depend on the application,

01:06:03.810 --> 01:06:04.380
which I just did.

01:06:04.400 --> 01:06:06.890
And there's a script phase here,
a run script phase.

01:06:06.900 --> 01:06:10.190
I'm going to go ahead
and double-click that.

01:06:10.220 --> 01:06:13.000
And by default,
it's set up to invoke /bin/sh,

01:06:13.000 --> 01:06:19.200
which is the standard system shell,
and shell script goes here.

01:06:19.200 --> 01:06:20.800
So I'm going to run a little script here.

01:06:20.800 --> 01:06:21.750
I'm going to go ahead and select.

01:06:21.800 --> 01:06:25.830
Let's go ahead and select and
delete everything in that right now.

01:06:26.000 --> 01:06:29.450
Because we have our
last and final clipping,

01:06:29.590 --> 01:06:33.740
is number 7, if you go back down
to the doc or to your,

01:06:33.740 --> 01:06:38.980
wherever you put your other resources
folder here that I said we'd be

01:06:39.440 --> 01:06:41.750
mentioning over and over again.

01:06:41.780 --> 01:06:47.540
Take Clipping, Code Clipping 7,
click and drag, and you drop it on top

01:06:47.540 --> 01:06:49.380
of this script phase.

01:06:49.380 --> 01:06:51.690
And we get the script.

01:06:51.690 --> 01:06:53.580
It looks a little bit hairy right now.

01:06:53.580 --> 01:06:55.880
I've written this to
be fairly bulletproof.

01:06:55.900 --> 01:07:00.420
And you can look at it later if you want.

01:07:00.420 --> 01:07:02.970
It removes a whole bunch of things
that might have been there from

01:07:02.970 --> 01:07:03.890
before and cleans everything up.

01:07:03.910 --> 01:07:06.310
And then it creates a new
little structure to mirror

01:07:06.310 --> 01:07:07.900
what's going to be on the disk.

01:07:07.900 --> 01:07:12.840
And then it uses HDI Util Create,
as you can see here.

01:07:12.900 --> 01:07:16.900
And finally, the exit dollar parenthesis
is actually a subtle thing.

01:07:16.900 --> 01:07:22.860
Xcode says build succeeded if the script
you invoke returns exit code zero.

01:07:22.970 --> 01:07:25.900
That's a convention in the
terminal layer of the Xcode.

01:07:25.900 --> 01:07:26.900
And that's what we're going to do.

01:07:26.900 --> 01:07:27.890
We're going to do a
command line utilities.

01:07:27.970 --> 01:07:30.900
Exit code zero means all OK, no problem.

01:07:30.900 --> 01:07:32.860
Anything else means
something bad happened.

01:07:32.960 --> 01:07:35.900
So if your script returns zero,
Xcode is going to say, OK,

01:07:35.900 --> 01:07:36.880
that succeeded.

01:07:36.900 --> 01:07:41.850
So if you invoke a subscript, a subshell,
that returns something non-zero,

01:07:41.930 --> 01:07:43.690
but then you return zero,
Xcode is not going to

01:07:43.690 --> 01:07:44.900
know about that subshell.

01:07:44.900 --> 01:07:46.900
It's just going to say, OK, zero,
everything's fine.

01:07:46.900 --> 01:07:52.890
So by saying exit dollar parenthesis,
this is shell script notation.

01:07:52.890 --> 01:07:54.900
It just says, well,
whatever the last guy said,

01:07:54.900 --> 01:07:54.900
I'm going to pass it on to you.

01:07:54.900 --> 01:07:58.330
So if the creation fails,
we will actually be able

01:07:58.410 --> 01:08:02.900
to pass that back to Xcode,
who can show that to you as an error.

01:08:02.900 --> 01:08:05.900
So that's kind of a useful tip.

01:08:05.900 --> 01:08:11.490
OK, so now we just have to make the
create disk image target active.

01:08:11.700 --> 01:09:28.700
[Transcript missing]

01:09:38.400 --> 01:12:24.400
[Transcript missing]

01:12:24.850 --> 01:12:29.390
There's no Q&A because
this is a hands-on session,

01:12:29.540 --> 01:12:32.050
but I invite you to come
down to the Mac OS X lab.

01:12:32.060 --> 01:12:34.700
I'm going to be going down
there right after this session.

01:12:34.700 --> 01:12:37.590
For some of these kinds of cases
involving complex projects,

01:12:37.590 --> 01:12:40.870
it's sometimes better just to be able
to take a look at the project and

01:12:40.870 --> 01:12:42.700
the particular situation you have.

01:12:42.700 --> 01:12:46.000
I'm going to be down in
the Mac OS X open lab,

01:12:46.000 --> 01:12:49.410
the Xcode lab,
and I will be down there until

01:12:49.410 --> 01:12:51.700
a little bit after lunch.

01:12:51.700 --> 01:12:56.110
So please feel free to come down
and bring your PowerBooks and

01:12:56.120 --> 01:13:00.700
we'll get your questions answered
and look at your particular case.

01:13:00.700 --> 01:13:03.560
I also would refer you to
our developer tools software

01:13:03.570 --> 01:13:06.690
evangelist for any other questions,
Matthew Formica.

01:13:06.700 --> 01:13:07.690
You have his email address there.

01:13:07.740 --> 01:13:11.700
Again, if you didn't download the
samples and follow along,

01:13:11.700 --> 01:13:19.080
they're all available on the
developer.apple.com/wwc2006 website

01:13:19.090 --> 01:13:20.700
associated with this session.

01:13:20.700 --> 01:13:24.700
This is session 306,
creating complex projects.

01:13:24.700 --> 01:13:27.700
So if you didn't follow along today,
you can download the disk image

01:13:27.700 --> 01:13:32.980
with all the milestones and I put a
readme in there showing what exactly

01:13:33.070 --> 01:13:34.700
we did to the project at each stage.

01:13:34.700 --> 01:13:37.700
So you can learn from that.

01:13:37.700 --> 01:13:40.700
There are also two great sessions
that are going to be coming.

01:13:40.700 --> 01:13:43.700
One is the, of course,
the developer feedback forum.

01:13:43.700 --> 01:13:48.220
Always love to hear what you guys
think we should be doing and what we're

01:13:48.230 --> 01:13:49.700
doing right and what we can work on.

01:13:49.700 --> 01:13:51.700
And that's on Friday.

01:13:51.700 --> 01:13:55.790
And there's also the accelerating
development of complex projects session,

01:13:55.790 --> 01:13:57.700
which a colleague of mine
is going to be holding.

01:13:57.700 --> 01:13:59.680
That's on Friday.

01:13:59.740 --> 01:14:02.700
I think that's actually the last
session slot of the conference,

01:14:02.700 --> 01:14:06.610
but there'll be a very
worthwhile one to go to.