WEBVTT

00:00:13.840 --> 00:00:14.700
Good afternoon.

00:00:14.770 --> 00:00:24.560
I'm Tim Hatcher, and welcome to
Advanced Web Kit Integration.

00:00:24.560 --> 00:00:27.570
Today we're going to talk about
some novel uses of WebKit,

00:00:27.570 --> 00:00:29.850
some key APIs that you
need to know about,

00:00:29.850 --> 00:00:34.370
what's new in Leopard, and Tim Omernick,
my colleague, is going to talk to you

00:00:34.370 --> 00:00:36.320
about plug-ins later on.

00:00:37.260 --> 00:00:40.440
So let's talk about some
novel uses of Web Kit.

00:00:40.540 --> 00:00:42.520
First, there's Safari.

00:00:42.580 --> 00:00:47.050
Probably the most un-novel
use of Web Kit there could be.

00:00:47.060 --> 00:00:48.160
It's just a browser.

00:00:48.180 --> 00:00:53.450
Out of the box, Web Kit behaves just
like it would in Safari.

00:00:54.150 --> 00:00:57.300
Two years ago,
we released Web Kit as an API that

00:00:57.300 --> 00:01:00.620
you guys can use in your application.

00:01:00.620 --> 00:01:04.980
And there's been many uses
of Web Kit since then.

00:01:04.980 --> 00:01:07.150
And here's just a few of them.

00:01:08.200 --> 00:01:13.260
Out of this, you'll see some trends,
such as chat applications.

00:01:13.330 --> 00:01:18.020
Pretty near and dear to my heart,
as some of you might know.

00:01:18.340 --> 00:01:22.000
But chat applications really
can take advantage of what

00:01:22.000 --> 00:01:24.060
Web Kit as an API has to offer.

00:01:24.250 --> 00:01:29.110
You can do advanced styling,
you can append and modify content live.

00:01:29.200 --> 00:01:32.200
It's really what a chat
application needs to do,

00:01:32.200 --> 00:01:36.290
and that's what Web Kit lets
you do right out of the box.

00:01:36.930 --> 00:01:40.350
Another great category of
these applications that are the

00:01:40.370 --> 00:01:43.860
family of Web Kit applications
are web development tools.

00:01:43.960 --> 00:01:48.650
This makes a lot of sense because
you're using the same technology

00:01:48.660 --> 00:01:52.900
that Safari uses to display
the content to the end user.

00:01:53.160 --> 00:01:59.360
And some examples:
SandVox from Corellia and Xile Scope.

00:02:01.160 --> 00:02:05.660
One other key application that you
want to do a live preview of that's

00:02:05.730 --> 00:02:10.260
kind of picked up on Web Kit in
recent years is blog editors.

00:02:10.360 --> 00:02:15.940
There's a lot of blog editors that
use Web Kit to style and display

00:02:16.090 --> 00:02:20.020
a live preview of exactly what
you're going to post on your blog.

00:02:20.060 --> 00:02:24.300
So you can see it,
and you can exactly see how it's going

00:02:24.310 --> 00:02:27.140
to look when the user goes to your site.

00:02:28.300 --> 00:02:32.340
So out of these applications,
who all of you are using

00:02:32.340 --> 00:02:34.590
Web Kit in your application?

00:02:34.630 --> 00:02:36.480
Let's see some hands.

00:02:36.590 --> 00:02:38.470
That's great.

00:02:39.700 --> 00:02:46.460
So hopefully today you can take the
knowledge you've learned and go back and

00:02:46.460 --> 00:02:52.400
start using Web Kit in unique ways such
as these applications and find new ways

00:02:52.400 --> 00:02:57.940
to use Web Kit and integrate it more
with your application to show content,

00:02:57.940 --> 00:03:01.740
to show styles,
to show previews of things that

00:03:01.740 --> 00:03:04.680
you want your users to know about.

00:03:04.680 --> 00:03:06.500
It doesn't have to be web-related.

00:03:06.500 --> 00:03:09.810
Your application can be
just a regular application,

00:03:09.810 --> 00:03:13.100
a Cocoa application,
and you use Web Kit in one little

00:03:13.100 --> 00:03:15.320
piece for a registration pane.

00:03:15.320 --> 00:03:18.900
You can use Web Kit in a lot of places,
and hopefully with what

00:03:18.900 --> 00:03:21.840
I'm going to talk about,
I'll help you start using

00:03:21.840 --> 00:03:23.390
Web Kit in those ways.

00:03:25.800 --> 00:03:30.460
So some key Web Kit APIs that
you want to know about.

00:03:30.460 --> 00:03:36.720
These are fundamental pieces that you'll
want to know if you're going to start

00:03:36.720 --> 00:03:39.600
using Web Kit in a normal application.

00:03:39.600 --> 00:03:43.140
Most of you probably aren't going to
go out and make a new web browser.

00:03:43.140 --> 00:03:47.170
Safari's the best one, of course.

00:03:48.500 --> 00:03:50.820
I want to know about the
Document Object Model.

00:03:50.820 --> 00:03:53.650
Not a whole lot of you probably
have used the Document Object Model,

00:03:53.660 --> 00:03:57.500
unless you have a lot of
history with web development.

00:03:57.500 --> 00:04:00.340
So I'm going to go over the
Document Object Model a little bit.

00:04:00.340 --> 00:04:03.680
So what is the Document Object Model?

00:04:03.680 --> 00:04:07.800
Every web page has a
structure of HTML and content.

00:04:07.800 --> 00:04:12.900
When that gets parsed by Web Kit,
it turns it into what's called the DOM.

00:04:12.900 --> 00:04:16.580
And this is a standard set up by the W3C.

00:04:16.580 --> 00:04:21.040
And it allows you to interact and
programmatically change or access

00:04:21.040 --> 00:04:24.180
anything that's in that HTML file.

00:04:24.180 --> 00:04:27.340
So it's a tree-based structure.

00:04:27.340 --> 00:04:31.370
And you can access it from
JavaScript or Objective-C.

00:04:32.600 --> 00:04:35.560
So I mentioned it was
a tree-based structure.

00:04:35.560 --> 00:04:39.930
Here are some of the key properties
and methods that you're going

00:04:39.940 --> 00:04:44.020
to be using when you're using
the DOM to access this structure,

00:04:44.020 --> 00:04:48.480
such as parent node, next sibling,
child nodes.

00:04:48.480 --> 00:04:53.430
So you can traverse and modify
the tree with these other methods,

00:04:53.430 --> 00:04:55.540
insert, append, remove.

00:04:55.730 --> 00:04:58.510
Very common names,
and these are all standard

00:04:58.520 --> 00:05:00.620
names set up by the W3C.

00:05:00.750 --> 00:05:04.060
And the names are used in
JavaScript in Objective-C,

00:05:04.060 --> 00:05:08.880
so if you're used to it in JavaScript,
you can just use it in Objective-C.

00:05:09.530 --> 00:05:11.640
So those were the node properties.

00:05:11.650 --> 00:05:14.830
You can also access a
special type of node,

00:05:14.840 --> 00:05:15.900
which is the document.

00:05:15.900 --> 00:05:18.360
It's the main node of the tree.

00:05:18.690 --> 00:05:23.450
It's what you use to get access to
everything else that's in that tree.

00:05:23.770 --> 00:05:26.340
So you can get access
to the document element,

00:05:26.340 --> 00:05:28.920
which is going to be your HTML element.

00:05:28.980 --> 00:05:31.480
You can get access to the title,
the body.

00:05:31.660 --> 00:05:36.110
You can also get access to style
sheets and use the style sheet DOM.

00:05:36.400 --> 00:05:40.010
Some other methods that you'll be
using all the time from the document

00:05:40.100 --> 00:05:45.590
are getElementById and createElement
if you're modifying the DOM.

00:05:45.680 --> 00:05:47.520
So let's talk about some of those.

00:05:47.700 --> 00:05:53.150
Here's an example in JavaScript using
createElement and createTextNode,

00:05:53.150 --> 00:05:56.550
and I just append it simply to the body.

00:05:57.490 --> 00:06:02.340
And you ask a document to
create a new element for you,

00:06:02.360 --> 00:06:06.820
and you pass in a tag name,
and create a text node based on a string,

00:06:06.920 --> 00:06:09.100
and then you can append it.

00:06:10.210 --> 00:06:12.540
So here's the same
example in Objective-C,

00:06:12.540 --> 00:06:14.210
no JavaScript included.

00:06:14.300 --> 00:06:18.360
So you can do the exact
same thing in Objective-C.

00:06:18.360 --> 00:06:22.300
And this has been available since Tiger,
and it's also available in

00:06:22.300 --> 00:06:24.020
the 10.3.9 update in Panther.

00:06:24.020 --> 00:06:27.300
So you can really use
Objective-C DOM access in

00:06:27.300 --> 00:06:29.740
your Web Kit applications now.

00:06:29.740 --> 00:06:33.680
And it's really great
for optimized code paths.

00:06:33.940 --> 00:06:37.840
And as you can see,
we're using the same naming

00:06:37.840 --> 00:06:40.940
schemes as the JavaScript access.

00:06:40.940 --> 00:06:45.000
So it's all the standard
names from the W3C.

00:06:45.000 --> 00:06:49.190
And you can see the JavaScript and
Objective-C are very similar,

00:06:49.190 --> 00:06:52.470
just syntactical
differences in the language.

00:06:56.160 --> 00:06:59.980
So I talked a little bit
about adding content,

00:07:00.130 --> 00:07:04.480
making new DOM nodes,
doing things like that.

00:07:05.150 --> 00:07:08.440
What if you have some HTML that
comes in over the wire,

00:07:08.440 --> 00:07:12.490
like in a chat application,
or some other text that

00:07:12.490 --> 00:07:14.600
you read from the disk,
but you can't point

00:07:14.740 --> 00:07:15.870
Web Kit directly at it?

00:07:15.940 --> 00:07:23.940
Here's some ways to inject and
read in HTML directly from the DOM.

00:07:23.940 --> 00:07:28.710
It's an extension set up by
Microsoft in their Internet Explorer,

00:07:28.740 --> 00:07:32.400
but all browsers have
added inner HTML support.

00:07:33.020 --> 00:07:36.500
You can get access to the HTML text,
and you can also set

00:07:36.500 --> 00:07:37.760
it using this property.

00:07:37.760 --> 00:07:42.800
So here's an example that
gets an element by ID,

00:07:42.800 --> 00:07:46.960
like I said, the preferred way of getting
access to an element very quickly.

00:07:48.950 --> 00:07:53.650
Tim Hortons, and I'm changing the inner
HTML to say hello WWDC in bold.

00:07:54.000 --> 00:07:57.040
And that'll be parsed,
and here's an example of

00:07:57.040 --> 00:07:59.800
what it would look like if
I re-serialized the DOM back out.

00:07:59.800 --> 00:08:05.990
It would have the new HTML injected
inside and replacing everything

00:08:05.990 --> 00:08:07.990
that's inside that div.

00:08:09.140 --> 00:08:16.630
So that's how you use the DOM to
modify what's in a web view.

00:08:16.650 --> 00:08:20.410
So let's give a demo on that.

00:08:20.690 --> 00:08:22.270
I have an Xcode project.

00:08:22.340 --> 00:08:25.500
Like I said,
chat applications have started using this

00:08:25.860 --> 00:08:28.620
almost exclusively in their web view.

00:08:28.710 --> 00:08:32.610
So I'm going to give you a little
demo of a simple chat application.

00:08:32.680 --> 00:08:35.830
It's written in a few hundred lines.

00:08:35.970 --> 00:08:38.420
It doesn't do any network or anything.

00:08:38.420 --> 00:08:42.480
It just locally echoes
everything to the web view.

00:08:42.600 --> 00:08:45.250
So I have an HTML file.

00:08:45.900 --> 00:08:49.180
: I'm Tim Omernick, and it's part of my
application resources.

00:08:49.300 --> 00:08:53.060
I also have some supporting
CSS and JavaScript.

00:08:53.750 --> 00:08:57.600
And in my nib,
I just have my web view wired up,

00:08:57.600 --> 00:09:01.610
and I also have a text input field.

00:09:01.990 --> 00:09:05.650
All very simple and common
for a chat application.

00:09:05.730 --> 00:09:07.970
So let's look at the code.

00:09:09.600 --> 00:09:14.970
In my Nib,
I have this class set up as an instance,

00:09:15.130 --> 00:09:19.180
and in the Awake from Nib,
I just tell the WebView to

00:09:19.180 --> 00:09:20.600
load a document.

00:09:20.710 --> 00:09:24.810
And there's many ways to tell
WebKit to load an HTML file.

00:09:25.070 --> 00:09:26.600
This is the preferred way.

00:09:26.600 --> 00:09:28.040
You're using a request.

00:09:28.140 --> 00:09:33.070
There's other ways to load a string,
but if you can really load from a disk,

00:09:33.080 --> 00:09:35.070
that's the best approach.

00:09:35.920 --> 00:09:43.170
So I have send chat message hooked
up to the action of my text field.

00:09:43.240 --> 00:09:48.180
And what I want to do in this is
make a new DOM element that then gets

00:09:48.180 --> 00:09:52.600
appended at the bottom of the HTML file.

00:09:52.600 --> 00:10:00.220
So here's the structure that I'm going
to be creating in code using DOM calls.

00:10:00.220 --> 00:10:04.030
So I put this little comment here
to give me a guide on what the

00:10:04.030 --> 00:10:08.790
HTML is actually going to look like,
what my goal is.

00:10:08.900 --> 00:10:12.340
So whenever you're accessing the DOM,
you're probably going

00:10:12.340 --> 00:10:13.690
to use the document.

00:10:13.760 --> 00:10:16.110
You always need the document,
so you might as well just

00:10:16.140 --> 00:10:22.460
assign it to a local variable
or a class instance variable.

00:10:23.200 --> 00:10:27.880
So, like I showed in the earlier example,
I can create an element,

00:10:27.940 --> 00:10:30.600
and in this case, I'm creating a div.

00:10:30.730 --> 00:10:35.040
A div in HTML is
basically a simple block.

00:10:35.040 --> 00:10:39.140
So if you need to do any blocks,
you want to use a div,

00:10:39.330 --> 00:10:42.390
and I'll show that in my demo.

00:10:43.900 --> 00:10:46.280
message element.

00:10:46.280 --> 00:10:50.890
One thing I'll talk about a little later,
but this is using a style class.

00:10:50.900 --> 00:10:56.690
I have this style message
set up in my CSS file.

00:10:58.790 --> 00:11:05.800
Div will now use this style that
I have loaded in my HTML file.

00:11:08.980 --> 00:11:13.040
One other thing that's common in a
chat application is to have a username.

00:11:13.120 --> 00:11:17.530
So I'm going to create a
new element that's a span.

00:11:17.620 --> 00:11:22.720
And a span is an inline element,
so text will flow next to it.

00:11:22.820 --> 00:11:25.440
I'm also going to set
a class name for user,

00:11:25.440 --> 00:11:28.250
and that's defined in my CSS file.

00:11:28.290 --> 00:11:30.530
I'm also going to set the text content.

00:11:30.660 --> 00:11:34.030
This can be whatever the
username of the local user is.

00:11:34.040 --> 00:11:37.390
In this case, it's Xenon,
which is my nickname.

00:11:37.850 --> 00:11:42.390
I'm also going to create a DOM text node,
and you do that just like an element,

00:11:42.530 --> 00:11:46.380
talking to the document
to get a text node.

00:11:46.380 --> 00:11:49.240
You might be familiar
with core foundation.

00:11:49.240 --> 00:11:54.180
Every time you ask for create,
you have to then release an element.

00:11:54.180 --> 00:11:55.070
Not so in the DOM.

00:11:55.080 --> 00:11:59.170
The DOM has some conflicting naming
schemes compared to core foundation,

00:11:59.170 --> 00:12:02.200
which most of you are familiar with.

00:12:02.200 --> 00:12:04.760
When you ask a document
to create a text node,

00:12:04.760 --> 00:12:06.930
we return you an auto-released version.

00:12:07.060 --> 00:12:10.200
The document is really
holding onto that for you,

00:12:10.230 --> 00:12:10.660
too.

00:12:10.660 --> 00:12:12.690
You don't need to release it.

00:12:12.690 --> 00:12:14.830
It's part of the document.

00:12:17.020 --> 00:12:18.630
So I have the text of my message.

00:12:18.640 --> 00:12:20.990
I just pulled that out of the text field.

00:12:21.060 --> 00:12:24.780
Now I'm going to combine those
two and append that in order,

00:12:24.780 --> 00:12:29.500
the username and then the text message,
to the message element,

00:12:29.500 --> 00:12:34.680
which wraps everything based on the
little template that I was using.

00:12:34.680 --> 00:12:40.300
So I have my message element,
my username element, my cool message,

00:12:40.300 --> 00:12:45.900
and those are all our children
of the message element.

00:12:45.900 --> 00:12:48.230
So that's where this happens.

00:12:48.860 --> 00:12:52.130
We also now have the capability
in Leopard to add event

00:12:52.140 --> 00:12:53.700
listeners through Objective-C.

00:12:53.700 --> 00:12:56.620
I'll talk about this a little bit later.

00:12:57.430 --> 00:13:02.220
Now we have our message element
that contains the username and text.

00:13:02.320 --> 00:13:05.800
So now I want to append that
to the body of the document.

00:13:05.890 --> 00:13:09.390
And in most chat applications,
you want to scroll down,

00:13:09.390 --> 00:13:11.130
so you would do this code.

00:13:11.200 --> 00:13:14.060
I'm not going to talk
a whole lot about that.

00:13:14.790 --> 00:13:16.700
and then reset the input field.

00:13:16.790 --> 00:13:19.880
So let's see how this works.

00:13:20.680 --> 00:13:21.330
Bring up.

00:13:21.370 --> 00:13:26.300
I have a simple chat application here
with the focus on the text field.

00:13:26.300 --> 00:13:28.100
And my background of
the document is blue,

00:13:28.100 --> 00:13:30.100
and there's nothing
loaded in the document.

00:13:30.100 --> 00:13:34.080
So I can type in a couple messages,
and you'll see it gets

00:13:34.080 --> 00:13:36.730
appended as you would expect.

00:13:36.800 --> 00:13:41.550
And Web Kit handles all the resizing,
just like an HTML file.

00:13:41.550 --> 00:13:44.150
You don't have to worry about
doing all the drawing code.

00:13:44.160 --> 00:13:48.920
Notice in my DOM,
I'm not telling it how to draw.

00:13:48.920 --> 00:13:50.570
That's part of the CSS.

00:13:50.600 --> 00:13:56.300
Which you should go out and learn
if you're going to be using Web Kit.

00:13:56.400 --> 00:13:58.860
I'm not going to go over
how the CSS syntax defines

00:13:58.860 --> 00:14:00.480
how the look and feel is.

00:14:00.480 --> 00:14:05.260
But CSS and HTML are fundamental
things that you'll need to

00:14:05.260 --> 00:14:07.190
know when using Web Kit.

00:14:07.500 --> 00:14:09.140
So that's a simple chat application.

00:14:09.140 --> 00:14:12.580
And if I put more messages,
it auto-scrolls to the bottom.

00:14:12.740 --> 00:14:18.420
So that's how you append
live content to a web view.

00:14:18.430 --> 00:14:20.360
Back to slides.

00:14:25.700 --> 00:14:28.900
So I talked about style a little bit.

00:14:28.900 --> 00:14:30.720
I was using class name.

00:14:30.850 --> 00:14:34.010
There's other ways to access the style,
but I'm mainly going to

00:14:34.010 --> 00:14:35.410
talk about class name.

00:14:35.500 --> 00:14:38.940
You can also get access to
the style property and modify

00:14:39.020 --> 00:14:40.990
properties individually.

00:14:42.380 --> 00:14:44.960
Classes are the best way to go.

00:14:45.120 --> 00:14:53.440
Here's an example that defines a couple
CSS rules on things you can append

00:14:53.440 --> 00:14:56.080
and tell your div or element to use.

00:14:56.080 --> 00:14:59.840
Here's an example in Objective-C.

00:14:59.840 --> 00:15:01.860
I get an element by ID.

00:15:01.860 --> 00:15:04.680
Again, the best way to do element access.

00:15:06.040 --> 00:15:12.120
Use the setClassName property or method,
and now I'm telling this div or

00:15:12.880 --> 00:15:16.320
element to use the class name hot.

00:15:16.340 --> 00:15:22.010
So now it's going to inherit
those CSS rules that are

00:15:22.010 --> 00:15:25.490
defined in my style sheet.

00:15:26.850 --> 00:15:31.560
You can also, confusing,
but you can do this.

00:15:31.670 --> 00:15:33.800
The class name is not
just a singular name.

00:15:33.800 --> 00:15:38.360
You can supply a space-separated
list of names to use.

00:15:38.360 --> 00:15:45.060
So now this header headline will inherit
from both hot and large style rules.

00:15:45.060 --> 00:15:51.550
So now the color is going to be red,
bold, and 20 pixels tall.

00:15:51.840 --> 00:15:54.760
You can see the benefit of doing this.

00:15:54.760 --> 00:15:59.260
So let me show you a demo using
the same chat application.

00:15:59.260 --> 00:16:01.160
Back to the demo.

00:16:03.400 --> 00:16:06.580
So here's the chat window that I have up.

00:16:06.690 --> 00:16:10.750
And remember that event listener
that I added to the code.

00:16:12.860 --> 00:16:16.540
I'm listening for click events,
and I've registered this

00:16:16.550 --> 00:16:19.180
class as an event listener.

00:16:19.180 --> 00:16:24.060
And to do that in Objective-C,
you need to conform to the

00:16:24.060 --> 00:16:26.090
DOM event listener protocol.

00:16:26.350 --> 00:16:32.250
And the only thing defined in this
protocol is the handle event method.

00:16:32.420 --> 00:16:36.150
I'm listening for click events,
and I've registered this

00:16:36.150 --> 00:16:38.780
class as an event listener.

00:16:38.780 --> 00:16:39.310
And to do that in Objective-C,
you need to conform to the

00:16:39.310 --> 00:16:39.310
DOM event listener protocol.

00:16:39.310 --> 00:16:39.310
And the only thing defined in this
protocol is the handle event method.

00:16:39.610 --> 00:16:43.350
I'm listening for click events,
and I've registered this

00:16:43.350 --> 00:16:45.970
class as an event listener.

00:16:45.980 --> 00:16:50.860
And to do that in Objective-C,
you need to conform to the

00:16:50.860 --> 00:16:53.060
DOM event listener protocol.

00:16:53.060 --> 00:16:59.060
And the only thing defined in this
protocol is the handle event method.

00:17:06.060 --> 00:17:09.420
And you can get access to the
DOM element that was clicked by

00:17:09.430 --> 00:17:11.550
asking the event for its target.

00:17:11.610 --> 00:17:13.350
It's as simple as that.

00:17:13.510 --> 00:17:20.350
And now I can use the set class name to
modify the style of what was clicked.

00:17:20.430 --> 00:17:25.710
And in my style sheet,
I have a special rule

00:17:25.860 --> 00:17:29.800
Tim O' That I use alongside of
message that changes the background

00:17:29.800 --> 00:17:32.360
color of anything that's clicked.

00:17:32.360 --> 00:17:36.530
So a way to flag a message or
do other actions style-wise to

00:17:36.530 --> 00:17:38.830
the message that was clicked.

00:17:38.900 --> 00:17:41.420
So let's see that in the example.

00:17:41.420 --> 00:17:45.690
So I can click on any of these
elements and the style changes

00:17:45.700 --> 00:17:50.770
and updates and WebView re-renders
that information based on the new

00:17:50.770 --> 00:17:53.820
style rules that I've passed in.

00:17:55.800 --> 00:17:57.920
So back to the slides.

00:18:02.300 --> 00:18:07.090
So class name is really the best
way to take advantage of style

00:18:07.090 --> 00:18:10.140
sheet manipulation in Web Kit.

00:18:10.140 --> 00:18:12.230
You don't want to be in the
business of modifying and

00:18:12.230 --> 00:18:14.440
adding properties on the fly.

00:18:14.440 --> 00:18:16.380
You can do that,
and there are certain cases

00:18:16.380 --> 00:18:20.650
where you want to do that,
and I'll show you more about that later.

00:18:20.750 --> 00:18:24.940
But if you have a set of rules that
you want to apply to an element,

00:18:24.940 --> 00:18:27.860
going back and forth
between different looks,

00:18:27.940 --> 00:18:30.300
you want to switch the class names.

00:18:30.300 --> 00:18:34.260
And that's the quickest way because
Web Kit can cache that rule,

00:18:34.260 --> 00:18:37.170
and it doesn't have to
reparse the CSS every time.

00:18:39.810 --> 00:18:43.830
So now we're going to talk
about WebView delegate methods.

00:18:43.880 --> 00:18:47.320
WebView is full of delegates.

00:18:47.330 --> 00:18:51.880
Normally, you only have one delegate in
your Cocoa or AppKit class.

00:18:51.950 --> 00:18:57.660
But WebView has so many delegate methods,
we broke it up into five logical groups.

00:18:57.690 --> 00:19:01.810
And those are user interface, frame load,
resource load,

00:19:01.950 --> 00:19:06.320
policy delegate for navigation changes,
and the editing delegate,

00:19:06.320 --> 00:19:08.210
which we added recently.

00:19:09.300 --> 00:19:16.000
[Transcript missing]

00:19:16.300 --> 00:19:22.150
Using these delegate methods,
I really didn't show in the demo.

00:19:22.220 --> 00:19:24.710
Can we switch back to the demo?

00:19:29.300 --> 00:19:32.020
In my WebView,
I haven't turned off anything.

00:19:32.020 --> 00:19:37.000
So notice the context menu
still shows a context menu.

00:19:37.020 --> 00:19:41.630
And I can drag in an HTML file,
and WebView will then

00:19:41.720 --> 00:19:44.700
change to show that file.

00:19:44.700 --> 00:19:47.530
But in your application,
you probably don't

00:19:47.530 --> 00:19:51.410
want to do any of that,
because you don't want people to be

00:19:51.410 --> 00:19:54.860
modifying what's being displayed.

00:19:55.140 --> 00:19:57.970
So can we switch back to the slides?

00:19:59.500 --> 00:20:03.380
So one thing you want to
do is prevent page changes.

00:20:03.380 --> 00:20:07.120
When a file is dragged or a link
is clicked in your web view,

00:20:07.160 --> 00:20:12.170
you want to handle those differently
in an application versus a web browser.

00:20:12.500 --> 00:20:16.940
So you want to override or
define this delegate method,

00:20:16.940 --> 00:20:20.060
this policy delegate method.

00:20:20.590 --> 00:20:26.190
And you want to get the
URL that we pass in.

00:20:26.800 --> 00:20:33.570
You can then check the schema or
URL for the types you want to allow.

00:20:33.680 --> 00:20:36.110
And on the previous slide,
it told you you want to

00:20:36.110 --> 00:20:38.290
allow the about blank URL.

00:20:38.310 --> 00:20:42.600
That's if you're using load
HTML string or load HTML data.

00:20:42.600 --> 00:20:45.160
Those are memory loads.

00:20:45.160 --> 00:20:48.210
They don't have any
URL associated with them.

00:20:48.380 --> 00:20:52.040
So Web Kit's just going to
use the about blank URL.

00:20:52.040 --> 00:20:56.430
So you want to allow that if
you're using any of those APIs.

00:20:57.300 --> 00:21:01.310
In my example, I used a URL and told
it to load it from disk,

00:21:01.480 --> 00:21:05.200
which is the preferred way of
loading content into a web view.

00:21:05.300 --> 00:21:10.930
So you can check and allow the
files that you expect to be loaded.

00:21:11.050 --> 00:21:16.360
And you should also pass off any
URLs that you don't want to handle

00:21:16.430 --> 00:21:21.900
by sending that through NS Workspace.

00:21:22.900 --> 00:21:24.160
Listener ignore.

00:21:24.160 --> 00:21:27.100
We pass in a listener object
to these delegate methods,

00:21:27.110 --> 00:21:31.120
and if you say listener ignore,
then the WebView will not

00:21:31.120 --> 00:21:33.340
load any of that content.

00:21:33.340 --> 00:21:37.740
Calling listener use will actually
tell WebView to display that content,

00:21:37.800 --> 00:21:41.710
which I do in these other two examples.

00:21:43.300 --> 00:21:45.940
So I talked about context menus also.

00:21:45.940 --> 00:21:50.590
In my example, I had a reload menu,
and that would actually reload the

00:21:50.590 --> 00:21:53.530
WebView back to its original state.

00:21:54.500 --> 00:21:57.960
You probably don't want any
of your users doing that.

00:21:57.960 --> 00:22:02.100
It's probably handy for you to do
when you're developing or testing,

00:22:02.110 --> 00:22:04.480
but you don't want that
in your shipping product.

00:22:04.500 --> 00:22:10.470
So you can use this UI delegate to
change or modify or totally suppress

00:22:10.470 --> 00:22:13.500
the context menu that shows up.

00:22:13.640 --> 00:22:17.340
And by default,
Web Kit will show like a reload, a back,

00:22:17.340 --> 00:22:18.500
and a forward.

00:22:18.500 --> 00:22:22.500
It also shows you copy and paste,
which you probably want to keep.

00:22:22.500 --> 00:22:27.540
But you want to totally suppress
anything that you don't want to

00:22:27.540 --> 00:22:30.590
show up for your shipping product.

00:22:31.420 --> 00:22:33.600
So that's some of the
WebView delegate methods,

00:22:33.600 --> 00:22:38.080
just a few of the key ones that
you want to implement if you

00:22:38.080 --> 00:22:43.810
are actually using WebView in a
way that's not like a browser.

00:22:44.810 --> 00:22:47.620
Now let's talk about
the Web Scripting API.

00:22:47.730 --> 00:22:49.900
This has been a little
confusing for people,

00:22:49.900 --> 00:22:55.000
so I want to clarify what
exactly you can do with this API.

00:22:55.210 --> 00:22:59.440
The general sense of what it
allows you to do is bridge

00:22:59.500 --> 00:23:05.400
objects from Objective-C to
JavaScript and back and forth.

00:23:05.660 --> 00:23:09.810
So you can call a method
on your Objective-C class,

00:23:09.810 --> 00:23:13.590
and you can also call a
function back into JavaScript.

00:23:14.440 --> 00:23:18.470
There's some required methods
that you need to implement.

00:23:18.620 --> 00:23:21.160
The documentation is a
little confusing on this,

00:23:21.180 --> 00:23:25.290
but you need to implement these methods,
or your bridged objects

00:23:25.290 --> 00:23:28.020
will not work in JavaScript.

00:23:28.020 --> 00:23:31.280
So isSelector excluded from JavaScript?

00:23:31.280 --> 00:23:32.640
IsKey excluded from JavaScript?

00:23:32.660 --> 00:23:37.560
The selector means is this
JavaScript method excluded,

00:23:37.560 --> 00:23:41.440
or is this key,
meaning a property that's going

00:23:41.440 --> 00:23:43.580
to be exposed into JavaScript.

00:23:43.580 --> 00:23:47.260
And you want to return no from
any of these methods that you

00:23:47.270 --> 00:23:52.800
want to actually expose that
selector or key to JavaScript.

00:23:52.800 --> 00:23:55.590
And you don't need to
worry about calling super.

00:23:57.720 --> 00:23:59.460
So here's an example.

00:23:59.460 --> 00:24:02.450
I have a simple class that
just has a my action that

00:24:02.450 --> 00:24:05.080
I want to expose to JavaScript.

00:24:05.080 --> 00:24:07.860
And in this case, I need to return no.

00:24:07.860 --> 00:24:12.670
So I want to tell that script,
that object to expose

00:24:12.670 --> 00:24:15.560
my action to JavaScript.

00:24:15.560 --> 00:24:19.000
And if I have a property
name that's in my class,

00:24:19.000 --> 00:24:22.600
I can expose that in the is key excluded.

00:24:22.600 --> 00:24:26.940
That gets exposed as a
property in JavaScript.

00:24:28.640 --> 00:24:32.550
So the default names are kind of ugly.

00:24:32.550 --> 00:24:36.150
When going from Objective-C to
JavaScript syntax,

00:24:36.150 --> 00:24:38.360
Objective-C has a lot of colons.

00:24:38.440 --> 00:24:42.230
It's not your typical language
where everything is passed

00:24:42.240 --> 00:24:43.770
in as an argument list.

00:24:43.810 --> 00:24:46.420
Objective-C spaces them out with colons.

00:24:46.780 --> 00:24:50.090
So if you have a selector
that has three arguments,

00:24:50.090 --> 00:24:52.350
you really want to clean that up.

00:24:52.430 --> 00:24:55.810
By default,
it's going to look very ugly like this,

00:24:55.810 --> 00:24:59.840
where you have underscores,
and that's not a common practice

00:24:59.840 --> 00:25:02.600
or look in the JavaScript language.

00:25:02.600 --> 00:25:08.400
So you really want to change it
and make it a more terse name and

00:25:08.440 --> 00:25:12.210
common name to be used in JavaScript.

00:25:12.280 --> 00:25:15.430
And this looks a lot better
and is more familiar to those

00:25:15.530 --> 00:25:19.350
that... use JavaScript daily.

00:25:21.300 --> 00:25:26.040
So now that we have our methods and
properties exposed to JavaScript,

00:25:26.090 --> 00:25:29.870
you want to bind that
when the page loads.

00:25:29.870 --> 00:25:35.970
And you typically bind it as an
object that is on the window object.

00:25:35.970 --> 00:25:39.400
And anything on the
window object is implied.

00:25:39.400 --> 00:25:45.760
So if I give it a key name of sprite,
it's really window.sprite.

00:25:45.760 --> 00:25:48.140
But you can also refer
to it as just sprite.

00:25:48.140 --> 00:25:50.690
That's a thing you can do in JavaScript.

00:25:51.450 --> 00:25:56.680
So in this example, I'm using the
Windows Script Object Available

00:25:57.600 --> 00:26:02.940
delegate method to bind any of
my Objective-C objects to their

00:26:03.390 --> 00:26:06.140
JavaScript counterpart names.

00:26:06.140 --> 00:26:12.710
And in this case, I allocate a sprite,
set it using simple set value for key.

00:26:12.900 --> 00:26:16.120
And the key is, like I said,
going to be the name on the

00:26:16.120 --> 00:26:20.370
Windows Script object that you
can access through JavaScript.

00:26:24.240 --> 00:26:28.140
I've talked about exposing
Objective-C to JavaScript.

00:26:28.170 --> 00:26:31.880
What about the other way around,
where you want to get access

00:26:31.880 --> 00:26:35.830
to anything that's already in
JavaScript from Objective-C?

00:26:35.920 --> 00:26:39.430
You can do that using
the WebScript object,

00:26:39.430 --> 00:26:45.210
and that's what encapsulates every
JavaScript object and function.

00:26:45.500 --> 00:26:50.990
If you do an evaluate web script,
this will return you a web

00:26:51.000 --> 00:26:55.220
script object of the result,
which could be a string,

00:26:55.220 --> 00:26:57.240
it could be an object.

00:26:57.240 --> 00:27:00.500
And every WebView has a
Windows script object,

00:27:00.500 --> 00:27:04.780
and every web frame has
a document DOM object,

00:27:04.780 --> 00:27:08.880
which is under the hoods
a web script object,

00:27:08.880 --> 00:27:12.310
which maps to the JavaScript class.

00:27:12.800 --> 00:27:14.250
So here's an example.

00:27:14.280 --> 00:27:17.460
I get the Windows script
object from the web view,

00:27:17.480 --> 00:27:18.940
and I call evaluateWebScript.

00:27:18.940 --> 00:27:23.730
And this just treats the string
just like it was any other script

00:27:23.730 --> 00:27:27.840
that I might have quick access to.

00:27:27.840 --> 00:27:30.680
If it's a function that
takes no parameters,

00:27:30.680 --> 00:27:32.080
this is fine to use.

00:27:32.260 --> 00:27:37.550
But really, the preferred way to do any
JavaScript access is using the new,

00:27:37.730 --> 00:27:43.830
which is available in Tiger and Panther,
callWebScript method with arguments.

00:27:43.830 --> 00:27:47.360
And this is quick and very direct.

00:27:47.410 --> 00:27:50.110
It doesn't have to parse the script.

00:27:50.110 --> 00:27:52.780
It just calls the method directly.

00:27:52.780 --> 00:27:56.850
So you want to get the
Windows script object.

00:27:56.950 --> 00:27:59.780
You can ask for another object.

00:27:59.780 --> 00:28:02.240
In this case, I'm getting the MyScript.

00:28:02.240 --> 00:28:07.010
So I'm going to get my sprite
off of the Windows script object.

00:28:07.010 --> 00:28:09.720
And then I can set up my arguments.

00:28:09.720 --> 00:28:13.960
And the arguments are passed
in as an NSArray in the order

00:28:13.960 --> 00:28:16.470
that JavaScript expects it.

00:28:16.900 --> 00:28:22.960
Then you just call web script method,
and you pass in the name,

00:28:23.090 --> 00:28:26.120
no curly braces or
parentheses or anything,

00:28:26.120 --> 00:28:30.470
just the name of the function that
you're calling on that object,

00:28:30.470 --> 00:28:32.370
and any arguments you want to pass in.

00:28:32.380 --> 00:28:35.600
You can pass in nil if you
don't have any arguments.

00:28:35.600 --> 00:28:39.170
And that's the fastest and
most direct way to access

00:28:39.180 --> 00:28:41.660
JavaScript from Objective-C.

00:28:42.910 --> 00:28:46.320
So that's the web scripting interface.

00:28:46.320 --> 00:28:51.300
Now I'm going to hand it over-- actually,
I'm going to talk to you

00:28:51.300 --> 00:28:54.160
what's new in Leopard.

00:28:56.100 --> 00:28:59.030
We've added a lot of cool
new things in Leopard.

00:28:59.060 --> 00:29:01.120
If you've attended any
of the previous sessions,

00:29:01.120 --> 00:29:03.620
such as Safari for
Web Content Developers,

00:29:03.700 --> 00:29:06.780
you've heard what we've
added to the engine.

00:29:06.780 --> 00:29:11.800
The same sort of applies
to the Cocoa APIs.

00:29:11.800 --> 00:29:18.460
One new thing we've added is the
ability to have transparent web views.

00:29:18.460 --> 00:29:22.240
This is a popular request where
you want content to be able

00:29:23.660 --> 00:29:27.840
to see through the content,
or dashboard is already using

00:29:27.840 --> 00:29:31.800
this for the rounded corners,
being able to have drop shadows

00:29:31.800 --> 00:29:35.720
that blend in with the background,
and poking holes through your window.

00:29:35.720 --> 00:29:41.920
You can now do that with Web Kit using
the setDrawsBackground method,

00:29:41.940 --> 00:29:44.890
and that will prevent Web Kit from
drawing any background if

00:29:44.890 --> 00:29:46.580
the page doesn't specify one.

00:29:48.880 --> 00:29:53.130
You can also now access node
layout metrics of the DOM objects.

00:29:53.220 --> 00:29:56.530
We added this for the
Web Inspector primarily.

00:29:56.650 --> 00:30:01.520
It's really good for debugging,
but it's also handy if you need to show

00:30:01.590 --> 00:30:07.580
anything that's overlaid the WebView,
such as a child window.

00:30:07.720 --> 00:30:12.040
That's how we do the red
outline in the Web Inspector.

00:30:12.090 --> 00:30:15.890
It's a child window that
draws over top of the WebView,

00:30:15.890 --> 00:30:20.600
and the correct location that we get
from the DOM node about is layout.

00:30:20.600 --> 00:30:25.070
And that's very useful if you
need to do any matching of

00:30:25.070 --> 00:30:28.200
native content with your WebView.

00:30:30.320 --> 00:30:34.100
You can also now get access
to the match CSS rules,

00:30:34.120 --> 00:30:38.640
and this is handy if any
of you have ever tried to

00:30:38.700 --> 00:30:42.740
Get access to CSS rules through
the style sheets and digging

00:30:42.740 --> 00:30:47.240
through each one that you might
have specified in a style sheet.

00:30:47.350 --> 00:30:50.700
You really don't know which
ones apply to an element.

00:30:50.780 --> 00:30:56.700
Now you can pass an element and find
out a list of rules that actually apply,

00:30:56.700 --> 00:31:03.530
and you can then modify those rules and
manipulate them as you would expect.

00:31:04.650 --> 00:31:08.340
Like I showed you earlier,
we now have Objective-C DOM-less

00:31:08.340 --> 00:31:09.620
event listeners.

00:31:09.740 --> 00:31:14.670
So you can register yourself
as a native Objective-C class

00:31:14.930 --> 00:31:19.080
to listen for click events,
double click events, mouse move,

00:31:19.080 --> 00:31:19.810
mouse drag.

00:31:19.820 --> 00:31:25.410
That's all happening inside the
Objective-C or inside the Web Kit DOM.

00:31:25.570 --> 00:31:29.650
So you don't have to drop down into
JavaScript like you might have had to do

00:31:29.660 --> 00:31:31.850
before just to get those basic events.

00:31:31.920 --> 00:31:36.470
you can now do that with
native code and objective C.

00:31:38.820 --> 00:31:40.560
XPath Expressions.

00:31:40.560 --> 00:31:45.700
You can now evaluate XPath in the
Objective-C DOM on a document.

00:31:45.700 --> 00:31:50.300
So you can ask for, with an expression,
get a list of nodes that

00:31:50.300 --> 00:31:51.740
match in that document.

00:31:51.740 --> 00:31:55.990
And that's very useful if you
need access to multiple nodes.

00:31:56.050 --> 00:31:58.400
I talked about get element by ID.

00:31:58.400 --> 00:32:01.740
That's really useful if you're
only getting access to one node.

00:32:01.740 --> 00:32:04.760
But if you have a list of
nodes in a structured document

00:32:04.760 --> 00:32:07.800
that you need access to,
you should use an XPath.

00:32:07.800 --> 00:32:10.760
and you can get to those very quick.

00:32:12.520 --> 00:32:16.860
We've also beefed up
our DOM level 3 support.

00:32:16.860 --> 00:32:20.830
We've added a lot of new
properties based on the W3C spec.

00:32:20.950 --> 00:32:23.700
There's some that we
haven't gotten around to,

00:32:23.700 --> 00:32:29.930
but most of those are now available
through Objective-C and JavaScript.

00:32:30.000 --> 00:32:33.710
So I want to give you a demo
of transparent web views.

00:32:36.180 --> 00:32:42.050
Using my same chat application,
I'll bring up

00:32:43.320 --> 00:33:07.460
: I'm going to start the demo again.

00:33:07.460 --> 00:33:07.460
And like I had before,
just a normal chat message.

00:33:07.460 --> 00:33:07.460
I also added some JavaScript that brings
up a handy little preference for the user

00:33:07.460 --> 00:33:07.460
to change the opacity of the WebView.

00:33:07.460 --> 00:33:07.480
So now my WebView is poking
through to the background.

00:33:22.890 --> 00:33:22.890
So, I have some objectives,
just like everything else.

00:33:22.890 --> 00:33:22.890
I have some opaque areas,
which is the chat message,

00:33:22.890 --> 00:33:22.890
but the background is poking through.

00:33:22.890 --> 00:33:22.890
So, how did I do that?

00:33:25.530 --> 00:33:30.170
I'm using a new property that we've
added that is proprietary to WebKit,

00:33:30.170 --> 00:33:33.100
so it has the WebKit prefix.

00:33:33.180 --> 00:33:36.600
And it's a background composite mode,
similar to all the composite

00:33:36.600 --> 00:33:38.430
modes you're used to in Quartz.

00:33:38.550 --> 00:33:41.910
You can specify them for the
background image to draw with.

00:33:42.080 --> 00:33:47.000
And in this case, I'm using clear and
specifying just any ping,

00:33:47.000 --> 00:33:51.610
and it's going to clear
everything in the backing store.

00:33:52.570 --> 00:33:57.900
And to do that, you need to set up your
window to be non-opaque.

00:33:58.080 --> 00:34:02.930
So I did that in Awake from Nib,
if some of you noticed that earlier.

00:34:05.180 --> 00:34:06.130
That's fine.

00:34:06.200 --> 00:34:09.600
I'm making a clear
hole in the background.

00:34:09.600 --> 00:34:12.710
What about the color that
I'm changing on top of that?

00:34:12.890 --> 00:34:16.570
I made a fixed position element,
and I'm not going to go into the

00:34:16.570 --> 00:34:20.740
details of fixed position elements,
but it just sits there and

00:34:20.740 --> 00:34:23.240
doesn't change when scrolled.

00:34:23.300 --> 00:34:26.950
So it stays in that position
over top of everything,

00:34:27.060 --> 00:34:31.080
and it's actually a z-index
order behind everything.

00:34:31.300 --> 00:34:37.850
It just has an RGBA value,
and I'm starting it out as no opacity.

00:34:37.890 --> 00:34:41.790
But my slider takes care of that.

00:34:42.250 --> 00:34:48.190
And I have some JavaScript that gets
called every time the slider is called.

00:34:48.290 --> 00:34:52.750
And I'm using the same APIs I talked
about in the web scripting interface to

00:34:52.840 --> 00:34:55.640
actually call back into my Objective-C.

00:34:55.640 --> 00:35:00.310
I could easily do this style
change of changing the color

00:35:00.310 --> 00:35:07.770
directly in Objective-C,
but I'm actually calling it back into the

00:35:07.770 --> 00:35:12.790
Objective-C class to change the color.

00:35:16.500 --> 00:35:19.040
The call is actually in here.

00:35:19.300 --> 00:35:23.500
The JavaScript is irrelevant,
so ignore that previous.

00:35:23.660 --> 00:35:27.210
So, I'm actually calling into
my chat controller and

00:35:27.210 --> 00:35:29.290
telling it to adjust opacity.

00:35:31.080 --> 00:35:39.350
And you can see I'm using the web
scripting APIs to expose Adjust Opacity,

00:35:39.680 --> 00:35:44.510
changing the Adjust Opacity name to
get rid of the trailing underscore

00:35:44.510 --> 00:35:46.990
that comes from that colon.

00:35:47.400 --> 00:35:54.090
And the adjust opacity method simply
gets the background element by ID,

00:35:54.200 --> 00:35:59.520
makes a new CSS value
for the background color,

00:35:59.520 --> 00:36:05.700
but it takes the opacity and makes a
new value based on the slider value.

00:36:05.700 --> 00:36:11.170
And I simply set the property
for the background color on the

00:36:11.650 --> 00:36:14.490
background element style property.

00:36:15.200 --> 00:36:20.480
So that's how you get the effect of
poking and seeing through the web view.

00:36:20.480 --> 00:36:22.620
So back to slides.

00:36:28.920 --> 00:36:31.400
Now I'm going to hand
it over to Tim Omernick,

00:36:31.400 --> 00:36:35.680
and he's going to talk to you about
what's new in our plug-in APIs.

00:36:42.860 --> 00:36:44.390
Thank you, Tim.

00:36:44.450 --> 00:36:46.950
Can you guys hear me OK?

00:36:47.040 --> 00:36:49.750
So I'm Tim Omernick,
and I'd like to talk to you

00:36:49.750 --> 00:36:53.610
for a few minutes about plug-in
APIs and what's new in Leopard.

00:36:56.000 --> 00:36:58.670
I'm not going to talk too much
about how to create a plug-in.

00:36:58.680 --> 00:37:01.640
We've gone over that in
previous WWDC sessions.

00:37:01.640 --> 00:37:03.600
But I'd like to give a
little bit of an overview,

00:37:03.600 --> 00:37:07.420
in case you don't really
know anything about plug-ins.

00:37:07.430 --> 00:37:10.330
So what can a plug-in do?

00:37:10.500 --> 00:37:14.000
The right question is,
what can't Web Kit do?

00:37:14.110 --> 00:37:19.280
Web Kit's very good at displaying HTML,
parsing CSS, and running JavaScript.

00:37:19.340 --> 00:37:21.870
It does those things very, very well.

00:37:21.940 --> 00:37:24.020
But it can't really do much more.

00:37:24.060 --> 00:37:25.170
And that's where plug-ins come in.

00:37:25.180 --> 00:37:28.460
If you need to extend
your Web Kit applications'

00:37:28.500 --> 00:37:31.600
rendering capabilities,
or even provide capabilities

00:37:31.600 --> 00:37:35.330
that aren't graphical in nature,
you might consider making a plug-in.

00:37:36.850 --> 00:37:38.560
So some examples of plug-ins.

00:37:38.560 --> 00:37:41.470
We have QuickTime to
handle QuickTime content.

00:37:41.480 --> 00:37:45.400
There's a Quartz Composer plug-in
to handle Quartz Composer.

00:37:45.400 --> 00:37:50.320
There's various PDF plug-ins,
both Apple and third party.

00:37:50.320 --> 00:37:53.560
You can also write a plug-in to
handle your own content type.

00:37:54.360 --> 00:37:56.810
Plug-ins don't just work in Web Kit,
they also work in

00:37:56.900 --> 00:38:01.590
Firefox and other browsers,
as well as in the dashboard environment.

00:38:03.600 --> 00:38:06.300
So Web Kit understands
two kinds of plug-ins.

00:38:06.390 --> 00:38:09.820
There are Web Kit plug-ins,
which are great,

00:38:09.840 --> 00:38:11.660
because they're Cocoa-based.

00:38:11.740 --> 00:38:13.670
They're designed with Web Kit in mind.

00:38:13.860 --> 00:38:16.100
A Web Kit plug-in is just an NS view.

00:38:16.160 --> 00:38:22.140
You can use all of the same technologies
that you're familiar with-- App Kit and

00:38:22.270 --> 00:38:23.560
Core Graphics-- to do your drawing,
et cetera.

00:38:24.630 --> 00:38:27.440
The one caveat, though,
is that Web Kit plug-ins

00:38:27.480 --> 00:38:30.730
only work in Web Kit-based
applications and in Dashboard.

00:38:30.800 --> 00:38:36.880
So if you need your plug-in to work in
Firefox or Opera or another browser,

00:38:36.880 --> 00:38:39.340
this is not really an option.

00:38:40.800 --> 00:38:42.700
We also support Netscape plug-ins.

00:38:42.730 --> 00:38:45.180
These are the cross-browser plug-ins.

00:38:45.210 --> 00:38:46.690
These work in all browsers.

00:38:46.810 --> 00:38:51.000
These are a little bit harder to
create because they're based on Carbon.

00:38:53.130 --> 00:38:56.680
Again,
what kind of plug-in should I create?

00:38:56.710 --> 00:38:58.740
Well,
if I'm making a Web Kit application,

00:38:58.740 --> 00:39:01.590
and I just need one specific
piece of functionality that

00:39:01.670 --> 00:39:07.180
Web Kit does not provide by default,
I would use a Web Kit plug-in.

00:39:07.340 --> 00:39:10.110
Or if you're making a dashboard widget,
that is just a fantastic

00:39:10.110 --> 00:39:11.460
use for a Web Kit plug-in.

00:39:11.490 --> 00:39:14.680
Again, if your plug-in needs
to run in any browser,

00:39:14.780 --> 00:39:17.800
Netscape plug-ins are
really your only option.

00:39:20.420 --> 00:39:21.890
OK, creating a Web Kit plug-in.

00:39:21.900 --> 00:39:23.560
I'm not going to get into this too much.

00:39:23.560 --> 00:39:28.060
I wanted to let you know that in Leopard,
we have an Xcode project template.

00:39:28.060 --> 00:39:31.200
So now you can go to New Project and
select Web Kit plug-in.

00:39:31.200 --> 00:39:33.070
Easy as that.

00:39:35.880 --> 00:39:39.390
and I wanted to remind you about two
pieces of sample code that we have,

00:39:39.420 --> 00:39:43.030
Web Kit Movie Plugin and
Netscape Movie Plugin.

00:39:45.050 --> 00:39:47.150
So I'd like to give you
a demo of a plug-in.

00:39:47.210 --> 00:39:49.310
This is an interesting Web Kit plug-in.

00:39:49.320 --> 00:39:54.210
It's interesting to me because--
could we switch to the demo?

00:39:54.700 --> 00:39:56.370
Thanks.

00:39:56.430 --> 00:40:00.460
This is interesting to me because
most people think of plug-ins as

00:40:00.460 --> 00:40:04.320
these rectangular regions that
draw something on a web page.

00:40:04.330 --> 00:40:06.850
And this isn't that kind of plug-in.

00:40:13.000 --> 00:40:15.280
I just want to make sure my volume is OK.

00:40:15.500 --> 00:40:21.530
So here I have a web page with some
input fields and some text and stuff.

00:40:21.570 --> 00:40:23.390
Looks pretty basic.

00:40:23.420 --> 00:40:27.390
I sure like being inside
this fancy computer.

00:40:31.900 --> 00:40:34.620
So if you're familiar
with web development,

00:40:34.720 --> 00:40:37.480
you might know that that's not something
you can normally do on a web page.

00:40:37.480 --> 00:40:40.340
You can't normally just speak text.

00:40:40.340 --> 00:40:42.690
Another example,
I have a little mouse-over effect.

00:40:42.820 --> 00:40:44.520
Wowee.

00:40:44.520 --> 00:40:46.360
Wowee.

00:40:48.700 --> 00:40:52.580
And this is kind of an interesting
application for this technology.

00:40:52.580 --> 00:40:55.110
This is sort of like
an auditory tool tip.

00:40:55.200 --> 00:40:58.980
When I click in this text field,
it's going to give me spoken instructions

00:40:58.980 --> 00:41:01.100
about what to do with that field.

00:41:01.100 --> 00:41:05.500
You can imagine this being useful for
people who aren't very computer savvy,

00:41:05.500 --> 00:41:08.160
or perhaps people who are sight impaired.

00:41:08.210 --> 00:41:12.700
Please type in the name of your
favorite carbonated beverage.

00:41:12.700 --> 00:41:14.020
OK.

00:41:14.060 --> 00:41:16.580
So how does that work?

00:41:16.590 --> 00:41:18.710
Let's look at our HTML here.

00:41:19.370 --> 00:41:20.900
Pretty simple.

00:41:21.060 --> 00:41:25.600
We have an embed here,
where we put the plug-in in the page.

00:41:25.680 --> 00:41:28.640
Make note of the fact that
we give it a unique ID,

00:41:28.640 --> 00:41:31.260
so that we can reference it later.

00:41:32.030 --> 00:41:35.250
And then we have our various examples.

00:41:35.310 --> 00:41:38.410
You'll notice in my CSS here,
my speech plug-in has a

00:41:38.410 --> 00:41:40.570
width and height of zero.

00:41:41.150 --> 00:41:42.300
That's kind of weird for a plug-in.

00:41:42.300 --> 00:41:44.340
That basically means that the
plug-in isn't going to draw.

00:41:44.370 --> 00:41:46.920
It's zero-sized.

00:41:47.040 --> 00:41:51.330
The plug-in is intended to just
sit in the page and provide a

00:41:51.740 --> 00:41:54.230
service to the rest of the page.

00:41:55.410 --> 00:41:58.660
And here in my JavaScript,
I have to find two functions.

00:41:58.680 --> 00:42:03.550
One of them takes some text,
gets the plug-in element by its ID,

00:42:03.550 --> 00:42:07.170
and then calls a function on it.

00:42:12.320 --> 00:42:14.350
So the code is pretty simple.

00:42:14.550 --> 00:42:18.240
Here we just create a plug-in view.

00:42:18.240 --> 00:42:19.580
Start up the speech synthesizer.

00:42:19.580 --> 00:42:22.060
This is all just built-in Cocoa stuff.

00:42:22.060 --> 00:42:24.810
Release the speech synthesizer.

00:42:24.890 --> 00:42:28.850
Here's my startSpeakingString function,
the Objective-C version of it.

00:42:28.870 --> 00:42:32.070
It just passes the string off
to the speech synthesizer.

00:42:33.500 --> 00:42:36.100
You'll see here,
these might look familiar from Tim's

00:42:36.110 --> 00:42:38.530
presentation a few minutes ago.

00:42:38.560 --> 00:42:41.540
This is how I expose the start
speaking string and stop speaking

00:42:41.540 --> 00:42:46.540
string methods to JavaScript.

00:42:46.540 --> 00:42:47.140
And that's it.

00:42:47.250 --> 00:42:49.590
Can we switch back to slides?

00:42:54.600 --> 00:42:55.760
So that was a Web Kit plug-in.

00:42:55.760 --> 00:43:00.140
That just gives you an idea of an
interesting way that you can use

00:43:00.140 --> 00:43:04.740
plug-ins in your application that
you might not have thought of before.

00:43:04.740 --> 00:43:06.240
So.

00:43:07.300 --> 00:43:10.350
Let's talk about Netscape plug-ins.

00:43:10.450 --> 00:43:16.740
This is an old API that was
designed to support plug-ins

00:43:16.750 --> 00:43:19.010
that can run in any browser.

00:43:19.320 --> 00:43:21.100
It's a fine API.

00:43:21.100 --> 00:43:21.800
It works great.

00:43:21.800 --> 00:43:23.670
All the major plug-ins
are using this today.

00:43:23.870 --> 00:43:26.300
It has some problems, though.

00:43:26.300 --> 00:43:27.490
It's a little bit outdated.

00:43:27.500 --> 00:43:30.260
It was designed a really, really,
really long time ago.

00:43:30.260 --> 00:43:35.680
And the state of the Mac has changed
since this API was first developed.

00:43:41.840 --> 00:43:45.040
So I've been talking to some
plug-in developers who are pretty

00:43:45.120 --> 00:43:47.560
frustrated with the situation.

00:43:47.560 --> 00:43:49.870
And here's what they tell me
they want to be able to do

00:43:49.950 --> 00:43:51.520
with their Netscape plug-ins.

00:43:53.820 --> 00:43:56.180
You might have heard about
our 64-bit announcement.

00:43:56.180 --> 00:43:59.460
All of our frameworks in
Leopard are now 64-bit.

00:43:59.920 --> 00:44:04.030
This means that in theory you
can create a 64-bit plug-in.

00:44:04.090 --> 00:44:07.720
The problem with that though is of course
there is no 64-bit version of Quick Draw.

00:44:07.780 --> 00:44:12.010
So if you want to
create a 64-bit plug-in,

00:44:12.020 --> 00:44:15.570
you're going to need an alternative
API if you want to get anything

00:44:15.570 --> 00:44:18.050
on screen or even loaded at all.

00:44:18.390 --> 00:44:20.800
If you want to draw with
any sort of performance,

00:44:20.800 --> 00:44:23.540
this is a little bit exaggerated.

00:44:24.070 --> 00:44:28.760
But I wanted to get the point across
that if you're using Quick Draw to draw,

00:44:28.760 --> 00:44:29.550
that's fine.

00:44:29.610 --> 00:44:32.690
It's not going anywhere for now,
but we're not improving it.

00:44:32.700 --> 00:44:34.090
We're not making Quick Draw any better.

00:44:34.100 --> 00:44:38.350
So if you really want that
high-performance drawing,

00:44:38.350 --> 00:44:41.400
Quick Draw is not really the answer.

00:44:42.090 --> 00:44:44.820
Developers want interesting
effects like shadows,

00:44:44.880 --> 00:44:50.190
transparency,
cool sort of rotation scaling effects.

00:44:50.700 --> 00:44:53.260
And that's kind of a biggie, 3D.

00:44:53.340 --> 00:44:56.390
These are all very,
very hard to do with Quick Draw.

00:45:00.360 --> 00:45:04.170
So we happen to have a couple of
technologies available for you.

00:45:04.280 --> 00:45:08.030
We are bringing Core Graphics
and OpenGL support down into the

00:45:08.130 --> 00:45:11.830
Netscape Plugin API so that you
can actually use Core Graphics and

00:45:11.830 --> 00:45:14.180
OpenGL to draw your plug-in content.

00:45:20.240 --> 00:45:22.240
So how do you actually use this new API?

00:45:22.250 --> 00:45:25.930
Well, we've proposed an extension to
the existing Netscape plugin

00:45:25.930 --> 00:45:28.200
API called Plugin Drawing Models.

00:45:28.240 --> 00:45:31.700
And the way it works is when
your plugin is initialized,

00:45:31.720 --> 00:45:35.780
it tells the browser which kind of
graphics context it would like to use,

00:45:35.850 --> 00:45:39.590
whether it's Core Graphics, OpenGL,
or Quick Draw.

00:45:41.700 --> 00:45:45.660
To actually use it in your plug-in,
you have to pick the drawing

00:45:45.660 --> 00:45:47.560
model in your NPP new function.

00:45:47.560 --> 00:45:51.550
This is sort of your
plug-in init function.

00:45:52.120 --> 00:45:55.750
The basic process is that you
ask the browser if it supports

00:45:55.750 --> 00:45:59.520
Core Graphics or whatever drawing
model you're interested in,

00:45:59.520 --> 00:46:01.240
in this case Core Graphics.

00:46:01.310 --> 00:46:03.780
If the browser does not support the
drawing models that you're interested in,

00:46:03.790 --> 00:46:07.400
you can return an error so
that your plug-in doesn't load.

00:46:07.400 --> 00:46:10.510
If the browser does support the plug-in
drawing model that you're interested in,

00:46:10.540 --> 00:46:14.030
you can use set value to set it.

00:46:14.380 --> 00:46:16.410
Simple as that.

00:46:17.830 --> 00:46:19.500
Okay, so what does that actually do?

00:46:19.500 --> 00:46:22.800
Well, if you've written a
Netscape plug-in before,

00:46:22.800 --> 00:46:25.500
you might be familiar with
this NP port structure.

00:46:25.660 --> 00:46:30.930
This is used to indicate to the
plug-in which graphics context,

00:46:30.980 --> 00:46:33.060
which Quick Draw port your
plug-in should draw into,

00:46:33.100 --> 00:46:36.390
as well as where in the
port it should draw.

00:46:36.410 --> 00:46:38.370
In a Quick Draw-less environment,
that's obviously not a

00:46:38.370 --> 00:46:41.420
very appropriate structure,
so we've introduced a new type,

00:46:41.430 --> 00:46:43.970
NP-CG context.

00:46:46.660 --> 00:46:51.040
So the way you actually use that is
when you're handling your update event,

00:46:51.040 --> 00:46:54.700
you would just assume that the
NP Windows port structure is actually

00:46:54.700 --> 00:46:58.950
an NP CG context instead of an NP port.

00:47:02.750 --> 00:47:05.280
So drawing with OpenGL is very similar.

00:47:05.280 --> 00:47:07.270
You just ask if the browser supports it.

00:47:07.290 --> 00:47:08.900
You set it.

00:47:11.920 --> 00:47:16.490
In this case, there's another type,
npglcontext, that gives you access to a

00:47:16.490 --> 00:47:19.070
cglcontext and the window.

00:47:19.160 --> 00:47:23.510
And in your handle update event,
the browser actually sets up the port

00:47:23.590 --> 00:47:24.760
before it calls into your plug-in.

00:47:24.780 --> 00:47:27.590
So pretty much you can
just start making GL calls,

00:47:27.590 --> 00:47:29.370
and everything will just show up.

00:47:32.320 --> 00:47:37.860
So OpenGL windowed versus windowless.

00:47:38.960 --> 00:47:41.870
OpenGL is really interesting because
there are sort of two uses for it.

00:47:42.100 --> 00:47:44.500
You can use OpenGL to
generate these really,

00:47:44.500 --> 00:47:48.020
really awesome fancy effects, you know,
with shaders and all sorts of

00:47:48.120 --> 00:47:49.670
interesting options and stuff.

00:47:49.730 --> 00:47:53.710
Or you can use OpenGL to get really,
really fast graphics,

00:47:53.780 --> 00:47:57.070
get hardware-accelerated
litting and such.

00:47:57.380 --> 00:48:01.530
So we actually let you pick
which mode of operation you want.

00:48:01.570 --> 00:48:04.300
By default, plug-ins are windowed,
meaning that they're

00:48:04.300 --> 00:48:07.620
hardware accelerated,
and they can't layer inside the page.

00:48:07.680 --> 00:48:10.300
They just basically
float above the browser.

00:48:10.300 --> 00:48:13.950
But this is by far the
more high performance path,

00:48:13.950 --> 00:48:15.920
so this is on by default.

00:48:16.240 --> 00:48:19.140
: OpenGL plug-ins can
optionally be windowless,

00:48:19.190 --> 00:48:22.280
meaning that they're rendered off-screen.

00:48:22.280 --> 00:48:24.830
This eliminates your hardware
acceleration capabilities,

00:48:24.940 --> 00:48:28.470
but the benefit is that you
get transparency and layering

00:48:28.470 --> 00:48:30.340
and interesting effects.

00:48:31.000 --> 00:48:33.500
The way you actually set that,
this is not a new API,

00:48:33.500 --> 00:48:36.430
it's just something that we
never really implemented before.

00:48:36.890 --> 00:48:40.670
But you use NPP set value,
or NPN set value with the

00:48:40.670 --> 00:48:42.730
plugin window bool variable.

00:48:43.350 --> 00:48:48.420
Set it to false if you
want windowless mode.

00:48:48.480 --> 00:48:49.610
That's not actually a typo.

00:48:49.800 --> 00:48:53.020
I'm casting false to avoid pointer.

00:48:53.110 --> 00:48:55.100
I know, it's really weird.

00:48:55.100 --> 00:48:57.850
That's just how the
Netscape plugin API works.

00:48:59.640 --> 00:49:02.590
So if you want to learn more
about these drawing models,

00:49:02.590 --> 00:49:04.140
we've updated our NP API header.

00:49:04.340 --> 00:49:06.700
You can find that in
the Web Kit framework.

00:49:06.750 --> 00:49:08.700
We also have two pieces of
sample code that we're going

00:49:08.700 --> 00:49:09.670
to make available to you.

00:49:09.730 --> 00:49:12.430
They're not online yet,
but they will be shortly.

00:49:12.490 --> 00:49:15.940
Netscape Core Graphics Plugin
and Netscape OpenGL Plugin.

00:49:15.960 --> 00:49:19.730
I'm actually going to give you
a demo of the OpenGL plugin.

00:49:19.780 --> 00:49:21.660
And here it is.

00:49:21.750 --> 00:49:24.110
Can you switch to the demo?

00:49:34.600 --> 00:49:43.700
[Transcript missing]

00:49:47.650 --> 00:49:50.350
So you can see my
cheesy 3D rotating cube.

00:49:50.470 --> 00:49:53.350
It's all lit with GL lights and all that.

00:49:53.360 --> 00:49:55.970
This is actually a windowless plug-in,
meaning that it's being

00:49:55.970 --> 00:49:56.940
software rendered.

00:49:56.940 --> 00:50:01.510
And you can see that the
background is transparent,

00:50:01.510 --> 00:50:04.640
so it's layering over the text correctly.

00:50:04.670 --> 00:50:09.300
I've set this HTML up such that
the text is below the plug-in,

00:50:09.320 --> 00:50:12.480
and the plug-in is
below this Safari icon.

00:50:12.550 --> 00:50:15.000
And when I scroll,
the cube is just going to stay

00:50:15.000 --> 00:50:18.360
still just to show you how it can
layer with other page elements.

00:50:18.360 --> 00:50:21.000
This is something that you
just couldn't do before.

00:50:31.300 --> 00:50:32.300
Okay.

00:50:32.570 --> 00:50:36.190
The code, actually,
I guess I can show you.

00:50:36.190 --> 00:50:39.300
It's pretty similar to what
you saw up on the slides.

00:50:39.300 --> 00:50:43.390
Here in my NPP new, whoops.

00:50:46.700 --> 00:50:52.650
I ask if the browser supports OpenGL,
and then I pick the OpenGL drawing model.

00:50:52.720 --> 00:50:57.830
This plug-in can actually run in
both windowed and windowless mode.

00:50:58.000 --> 00:51:02.650
So you can see us setting
the window variable there.

00:51:02.820 --> 00:51:05.160
And then in my handle update event,

00:51:06.450 --> 00:51:09.410
You can see that I just go
straight into making OpenGL calls.

00:51:09.520 --> 00:51:14.770
I set up my GL, set up the lights,
clear the background, all of that.

00:51:14.790 --> 00:51:17.780
That's a really inefficient
way to draw a cube,

00:51:17.780 --> 00:51:17.910
I

00:51:20.600 --> 00:51:23.430
One more thing I wanted to show you.

00:51:23.480 --> 00:51:25.780
If I go in my HTML here,

00:51:35.100 --> 00:51:35.100
And change this, this is my reference to
my plug-in and my HTML.

00:51:35.100 --> 00:51:35.100
I can just get rid of
this wmod=transparent.

00:51:36.600 --> 00:51:40.820
That's how my plug-in switches
between windowed and windowless mode.

00:51:40.820 --> 00:51:44.470
And then when I go and
actually open this in Safari,

00:51:45.040 --> 00:51:47.120
You can see that it's
switched to windowed mode,

00:51:47.120 --> 00:51:48.570
and it floats above everything else.

00:51:48.620 --> 00:51:50.140
But this is actually
hardware accelerated,

00:51:50.180 --> 00:51:54.180
so you're getting a
much higher frame rate.

00:51:54.190 --> 00:51:56.130
Can I switch back to slides?

00:52:02.110 --> 00:52:07.520
Okay, so that was plug-in drawing models,
and I hope that you're inspired to take

00:52:07.550 --> 00:52:09.720
advantage of those APIs now in Leopard.

00:52:09.720 --> 00:52:12.430
There's one more
API I wanted to talk about.

00:52:12.560 --> 00:52:13.870
This is a pretty exciting one.

00:52:13.870 --> 00:52:14.830
It's pretty cool.

00:52:14.840 --> 00:52:18.070
Plug-ins now in Leopard are
able to access and manipulate

00:52:18.070 --> 00:52:19.700
their own DOM elements.

00:52:21.190 --> 00:52:22.790
That sounds like techno mumbo jumbo.

00:52:22.800 --> 00:52:23.730
What does that actually mean?

00:52:23.730 --> 00:52:27.860
Well, a DOM or a plug-in can do really,
really interesting things.

00:52:27.860 --> 00:52:32.150
It's no longer just this fixed rectangle
on a page that's told to render in

00:52:32.150 --> 00:52:34.280
some location and look some way.

00:52:34.280 --> 00:52:37.410
It can actually fully integrate
with the rest of its document.

00:52:37.410 --> 00:52:40.540
It can do really interesting things,
like move itself or resize itself.

00:52:40.710 --> 00:52:44.220
It can access its own CSS properties,
set its own CSS properties,

00:52:44.220 --> 00:52:47.210
like opacity and borders
and outlines and such.

00:52:47.310 --> 00:52:50.560
You can do things like making
the text in the plug-in.

00:52:50.560 --> 00:52:53.160
If your plugin draws text,
you can make it match the text

00:52:53.160 --> 00:52:54.890
in the surrounding document.

00:52:56.940 --> 00:53:04.740
The way you use this is we have a
web-- when your plug-in is created,

00:53:04.740 --> 00:53:07.290
it's passed an arguments dictionary.

00:53:07.310 --> 00:53:10.520
This is for a Web Kit plug-in.

00:53:10.560 --> 00:53:14.860
One of the arguments that you get is
a web plug-in containing element key.

00:53:14.860 --> 00:53:17.900
This is actually a DOM element
that you can manipulate using

00:53:17.900 --> 00:53:21.370
the same APIs that Tim Hatcher
talked about a few minutes ago.

00:53:22.760 --> 00:53:26.870
We also have support for this
API on the Netscape side.

00:53:26.940 --> 00:53:29.020
This uses the NP Object Runtime API.

00:53:29.020 --> 00:53:32.200
I'm not going to get into that now,
but there's plenty of documentation

00:53:32.200 --> 00:53:34.160
available for that online.

00:53:34.270 --> 00:53:37.260
You can also see our NP Runtime header.

00:53:37.360 --> 00:53:40.740
The way you use it on the Netscape
side is to just get the value for the

00:53:40.740 --> 00:53:43.120
plug-in element NP Object variable.

00:53:43.260 --> 00:53:48.170
So I wanted to show you a demo of that.

00:53:54.000 --> 00:53:56.280
So this is a Web Kit plug-in.

00:53:56.290 --> 00:53:58.460
I'll show you my code first.

00:53:58.480 --> 00:54:00.200
It's pretty basic.

00:54:01.410 --> 00:54:03.990
You can see here in my
plug-in view with arguments,

00:54:04.030 --> 00:54:06.310
I save the arguments that
are passed to my plug-in.

00:54:06.540 --> 00:54:08.650
That'll be important later.

00:54:09.920 --> 00:54:13.520
I'm not going to get too much into how
this thing draws or actually magnifies,

00:54:13.520 --> 00:54:15.000
does its thing.

00:54:15.000 --> 00:54:15.880
It's not too important.

00:54:15.930 --> 00:54:16.760
It's not too relevant.

00:54:16.840 --> 00:54:19.590
What I wanted to show you, though,
is this -- you know what?

00:54:19.590 --> 00:54:23.970
This is going to make a lot more
sense if I just show you first.

00:54:28.180 --> 00:54:30.960
So here's my plug-in.

00:54:30.970 --> 00:54:37.370
You can see that I can click it
and drag it around on the page.

00:54:43.630 --> 00:54:44.320
So that's pretty cool.

00:54:44.320 --> 00:54:45.560
How does that actually work?

00:54:45.560 --> 00:54:48.650
How does the plug-in move
itself around on the page?

00:54:49.050 --> 00:54:53.170
Well, you can see in my view's
mouse-dragged method,

00:54:53.170 --> 00:54:58.310
I get that containing element,
and I get its CSS style object.

00:54:58.380 --> 00:55:00.340
This is a really powerful
object to have access to,

00:55:00.350 --> 00:55:02.800
because you can set things
like top and left to move the

00:55:02.880 --> 00:55:04.860
plug-in around on the page.

00:55:04.920 --> 00:55:08.580
So you can see here that I get
the property left from the style.

00:55:09.700 --> 00:55:12.920
Add the horizontal mouse movement,
and then just set the

00:55:12.920 --> 00:55:15.140
value back on the property.

00:55:15.140 --> 00:55:17.020
And I do that again for the top.

00:55:17.020 --> 00:55:19.220
And that's really it.

00:55:19.220 --> 00:55:23.130
Next slide, please.

00:55:28.840 --> 00:55:32.780
Okay, so that's all I wanted to
talk to you about today.

00:55:32.840 --> 00:55:35.680
If you want more information
about this session or plug-ins

00:55:35.680 --> 00:55:38.710
or Web Kit in general,
you can talk to Mark Malone.

00:55:38.720 --> 00:55:42.380
He's our
Internet Technologies Evangelist.

00:55:42.380 --> 00:55:45.370
If you want documentation,
you can look on the WWDC site or

00:55:45.370 --> 00:55:48.210
just in general developer.apple.com.

00:55:48.300 --> 00:55:51.590
I also wanted to point you
at the Netscape or Gecko

00:55:51.590 --> 00:55:55.160
plug-in API documentation.

00:55:55.800 --> 00:55:59.260
I'll just leave it up there so you can
write down the URL if you're interested.

00:55:59.280 --> 00:56:00.550
I'm not going to read it to you.

00:56:00.560 --> 00:56:08.090
I see this guy writing it down,
so I'm just going to

00:56:08.100 --> 00:56:10.310
wait for him to finish.

00:56:16.270 --> 00:56:19.770
So I also wanted to invite
you to come down to our lab.

00:56:19.800 --> 00:56:22.040
It's immediately after this session.

00:56:22.120 --> 00:56:24.540
Please come down if you have
any questions about plug-ins

00:56:24.540 --> 00:56:26.490
or about WebKit in general.

00:56:26.620 --> 00:56:29.160
A lot of the Safari and WebKit team
are going to be down there.

00:56:29.160 --> 00:56:31.550
So just follow us right down.