WEBVTT

00:00:10.430 --> 00:00:14.630
Good afternoon everybody and welcome
to Streamlining Your Workflow.

00:00:14.630 --> 00:00:15.360
I'm Chris Espinosa.

00:00:15.360 --> 00:00:19.900
I'm the User Experience Manager in
the Developer Tools Group at Apple.

00:00:19.900 --> 00:00:23.320
And I have one and only one
objective for this session today,

00:00:23.320 --> 00:00:28.030
which is to highlight the new Xcode
features that help speed your work.

00:00:28.120 --> 00:00:31.820
You saw a quick demo of them yesterday
in Ted Goldstein's keynote presentation.

00:00:31.900 --> 00:00:37.590
I'm going to take you in-depth to the
new features in Xcode 3.0 in Leopard.

00:00:38.210 --> 00:00:41.260
Let's talk about your
Xcode workflow before,

00:00:41.260 --> 00:00:45.350
from Xcode 1.0 all the
way on to Xcode 2.4.

00:00:45.380 --> 00:00:48.460
I've had a fairly simple workflow.

00:00:51.720 --> 00:00:55.320
You acquire a project,
which usually means going to the terminal

00:00:55.710 --> 00:01:00.330
and connecting to your subversion or
CVS repository and checking it out,

00:01:00.540 --> 00:01:04.200
or maybe you drag something down
using the finder from a server.

00:01:04.200 --> 00:01:09.450
Then you edit it in the editor,
and that's worked pretty well.

00:01:10.290 --> 00:01:13.280
And then you build it and you
get a build products window,

00:01:13.280 --> 00:01:16.780
a build results window on top of
your editor window and then you

00:01:16.870 --> 00:01:20.240
can find your errors and warnings.

00:01:20.940 --> 00:01:23.820
And then once you get your
errors and warnings resolved,

00:01:23.850 --> 00:01:27.740
you debug and you step
through in the debug window.

00:01:28.200 --> 00:01:32.600
And then at some point you rewrite
your code and then you have to

00:01:32.720 --> 00:01:36.980
reconfigure using... then to rewrite
your code you do some research,

00:01:37.000 --> 00:01:38.970
you need to bring up the
documentation window.

00:01:39.140 --> 00:01:40.700
Notice where your code is.

00:01:40.740 --> 00:01:46.050
It's now buried beneath level
after level after level of window.

00:01:46.430 --> 00:01:48.860
And then you reconfigure your project.

00:01:49.100 --> 00:01:53.800
You set your build settings,
you bring up the build inspectors,

00:01:53.840 --> 00:01:58.130
they're covering up your text file,
and then at some point,

00:01:58.160 --> 00:02:01.360
if you want to restore because you've
completely messed things up and you

00:02:01.360 --> 00:02:03.690
need to go back to the beginning,
you've got to go all the way

00:02:03.690 --> 00:02:06.270
back to the finder and get this
copy that you saved on disk.

00:02:07.560 --> 00:02:12.860
We want to cut through all of this
and help you focus on your work.

00:02:12.860 --> 00:02:17.360
The really only two things
we're doing in Xcode 3.0:

00:02:17.660 --> 00:02:21.500
focusing on your work,
which means bringing the tools

00:02:21.500 --> 00:02:25.550
to you right where your source
code is when you need them,

00:02:25.800 --> 00:02:29.420
and second is finding and
filtering so that when you do go to

00:02:29.420 --> 00:02:32.330
another window to find something,
you can get there fast without

00:02:32.330 --> 00:02:33.880
a lot of scrolling around.

00:02:33.880 --> 00:02:37.340
And everything we're going to show you
today helps you focus on your work.

00:02:37.360 --> 00:02:40.110
work and find and filter.

00:02:50.280 --> 00:02:55.540
So, the focus is on your editor
and it doesn't matter whether

00:02:55.540 --> 00:02:59.250
you're a one window or a many
windows kind of programmer.

00:02:59.250 --> 00:03:03.900
We're pretty much eliminating that
war by bringing all of the tools you

00:03:03.900 --> 00:03:07.530
need right into your editor window,
whether it's separate or

00:03:07.530 --> 00:03:09.200
whether it's embedded.

00:03:09.200 --> 00:03:12.420
If you're editing,
we're going to bring you tools that

00:03:12.420 --> 00:03:16.620
focus on your code and help you show
you what you're working on in code

00:03:16.620 --> 00:03:19.030
focus and code folding in the editor.

00:03:20.300 --> 00:03:23.370
When you're building,
we will bring you your errors and

00:03:23.370 --> 00:03:27.960
warnings right to the line of code on
which they occur instead of putting them

00:03:27.960 --> 00:03:32.260
in a separate window where you have to
navigate to different files according to

00:03:32.260 --> 00:03:38.880
where your errors and warnings are rather
than dealing with your warnings where

00:03:38.880 --> 00:03:38.880
they sit in the file you're working on.

00:03:40.560 --> 00:03:43.830
When you're debugging,
we will bring you the debug information

00:03:44.050 --> 00:03:48.130
right there into your text file
in terms of stepping information,

00:03:48.290 --> 00:03:52.380
breakpoint information,
and debug symbolic information right

00:03:52.380 --> 00:03:54.500
there in the text file where you work.

00:03:54.760 --> 00:03:58.190
This is what we mean
by focus on your work.

00:03:58.550 --> 00:04:02.850
So let's work through these four
phases of streamlining your workflow.

00:04:02.980 --> 00:04:08.460
First, acquisition of a product,
of a project, and editing that project.

00:04:08.630 --> 00:04:13.510
The first step to streamlining project
acquisition is that we've built

00:04:13.930 --> 00:04:18.720
repository management right into
the Xcode user interface for CVS,

00:04:18.990 --> 00:04:23.550
Subversion, and Perforce.

00:04:25.850 --> 00:04:29.430
You don't have to use a different tool,
you don't have to use the

00:04:29.430 --> 00:04:34.270
command line in order to connect
to or browse a repository,

00:04:34.380 --> 00:04:37.050
to import a new project
into a repository,

00:04:37.190 --> 00:04:41.560
to export a project from a repository
into a plain project on disk,

00:04:41.760 --> 00:04:45.900
to find different versions or
tags of a project in a repository,

00:04:46.230 --> 00:04:50.200
or to create a new tag or
version in a repository.

00:04:50.330 --> 00:04:53.420
All of these are handled in
one window built into Xcode and

00:04:53.460 --> 00:04:55.160
we're going to show that to you.

00:05:00.510 --> 00:05:02.890
Second thing is
streamlining source editing.

00:05:02.900 --> 00:05:07.000
Once you have your project and
once you're working on your source,

00:05:07.040 --> 00:05:11.430
we're doing a lot to make editing
faster and more intuitive.

00:05:11.590 --> 00:05:14.950
You saw in the demo yesterday that
we're handling large files much,

00:05:14.970 --> 00:05:15.940
much better.

00:05:16.340 --> 00:05:21.650
We can open and scroll to the bottom of
a very large file in a few seconds where

00:05:21.650 --> 00:05:23.840
it used to take us 30 or 40 seconds.

00:05:23.840 --> 00:05:27.880
It's not just improvements in Xcode but
some improvements in Coco's underlying

00:05:28.230 --> 00:05:30.350
text classes that allow us to do that.

00:05:30.410 --> 00:05:34.430
We're also improving the syntax
coloring so you see more vividly

00:05:34.430 --> 00:05:37.710
on your screen what's a method,
what's a function call,

00:05:37.710 --> 00:05:40.880
what's a constant,
not just a bunch of black text on a

00:05:40.880 --> 00:05:46.360
white background with occasional pragmas
or macros or comments in one color.

00:05:46.360 --> 00:05:51.030
We're helping you get unneeded
detail out of the way by letting you

00:05:51.200 --> 00:05:55.820
focus on the particular nested block
of code that you're working on and

00:05:56.080 --> 00:06:00.180
dimming back other things and seeing
the block structure of your program

00:06:00.180 --> 00:06:02.190
regardless of your indentation style.

00:06:02.190 --> 00:06:05.580
I'm sure most of you have had the
experience of getting somebody else's

00:06:05.600 --> 00:06:11.860
file and seeing what curious indentation
paradigms that other people tend to use.

00:06:12.210 --> 00:06:15.660
Sometimes you really can't
figure out what brace matching

00:06:15.660 --> 00:06:20.460
style or what indentation style,
one tab plus two spaces for this level,

00:06:20.460 --> 00:06:21.590
they may use.

00:06:21.590 --> 00:06:25.210
You can ignore all of that by
using the code focus mechanism in

00:06:25.300 --> 00:06:29.700
Xcode 3.0 to see what the block
structure is quickly and easily.

00:06:30.130 --> 00:06:37.450
You can also use code folding to
move extraneous code out of the way

00:06:37.460 --> 00:06:41.640
and just collapse it so that you can
see just what you're looking for,

00:06:41.640 --> 00:06:46.070
just the function names,
just the code without the comments,

00:06:46.070 --> 00:06:49.190
or just the function
that you're looking for.

00:06:54.890 --> 00:06:57.130
So to demo these features,
we're going to bring up

00:06:57.130 --> 00:06:58.100
Dave Ewing of our group.

00:06:58.340 --> 00:07:02.850
He has done most of the work on
the Xcode editor and he's going

00:07:02.850 --> 00:07:05.350
to talk you through the demo.

00:07:06.700 --> 00:07:09.600
Thanks, Chris.

00:07:09.600 --> 00:07:10.500
I didn't do all the work.

00:07:10.630 --> 00:07:12.460
There's a lot of other
people involved here.

00:07:12.460 --> 00:07:16.040
Well, the first thing we're going to do,
well, we want to spend most of our

00:07:16.040 --> 00:07:18.670
time in the text editor because
that's where the focus is,

00:07:18.670 --> 00:07:20.820
but you can't get to text
without having a project.

00:07:20.920 --> 00:07:26.820
You can't get to a project
these days without having it

00:07:26.940 --> 00:07:29.800
in a source code repository,
so the new source code

00:07:29.800 --> 00:07:29.800
repository management feature.

00:07:32.730 --> 00:07:36.870
And this is in the
Xcode preferences where,

00:07:36.960 --> 00:07:41.440
could you put the demo machine
on the monitor up here?

00:07:41.440 --> 00:07:44.320
Or I can just look back
there all the time,

00:07:44.320 --> 00:07:45.040
right?

00:07:45.040 --> 00:07:47.120
So that one's not set up.

00:07:51.040 --> 00:07:53.600
Well, if we had the repository
set up on that machine,

00:07:53.640 --> 00:07:55.170
which it was set up moments ago.

00:07:56.970 --> 00:07:59.210
Sorry, we're starting with
setting up the repository.

00:07:59.350 --> 00:08:00.580
Oh, well, let's start.

00:08:00.700 --> 00:08:03.770
So you can go ahead and click
the plus button down below here

00:08:04.490 --> 00:08:05.920
and point to the directory.

00:08:06.130 --> 00:08:08.540
In this case,
we have a repository set up on this

00:08:08.650 --> 00:08:13.200
machine in the file system so we
can use a file URL to get to it.

00:08:13.320 --> 00:08:15.770
You have to name the repository.

00:08:15.900 --> 00:08:19.070
Here he's going to type in a file URL.

00:08:19.140 --> 00:08:23.030
Let's see if he types well.

00:08:24.210 --> 00:08:27.170
And you can see down below there's
a little status that tells you

00:08:27.390 --> 00:08:29.590
it's evaluating what he's doing.

00:08:29.670 --> 00:08:35.170
So once he gets to the right place,
SVN repository.

00:08:37.170 --> 00:08:39.450
And look,
it says connected to the repository.

00:08:39.450 --> 00:08:43.190
So good,
we can do that through the preferences.

00:08:43.190 --> 00:08:46.560
And then in the SEM menu,
we can bring up the browser.

00:08:46.680 --> 00:08:49.840
So this repository has the
AppKit examples imported into it.

00:08:50.050 --> 00:08:53.490
You can click through these folders
here and see the source code.

00:08:53.530 --> 00:08:56.490
Browsing is very quick.

00:08:56.490 --> 00:09:00.990
We also have this other project
that we imported called Xjournal.

00:09:00.990 --> 00:09:03.140
And let's go ahead and
check that one out.

00:09:03.140 --> 00:09:06.370
We'll just put it on the desktop.

00:09:10.260 --> 00:09:13.880
And you can see it's the little
spinny wheel there is spinning.

00:09:13.880 --> 00:09:14.840
It takes a few seconds.

00:09:14.840 --> 00:09:19.200
There's about 45 megabytes
of stuff in the project.

00:09:19.250 --> 00:09:23.010
And when it's done checking it out,
it notices that there's an Xcode project

00:09:23.100 --> 00:09:25.740
sitting there at the top level and it,
you know,

00:09:25.800 --> 00:09:28.200
helpfully offers to open it for you.

00:09:28.200 --> 00:09:30.990
So let's go ahead and open the project.

00:09:33.990 --> 00:09:34.900
So here's a new project.

00:09:34.990 --> 00:09:37.580
We'll make things a little bigger
so we can get to the text editor.

00:09:37.660 --> 00:09:43.880
And the first thing we
want to show you is,

00:09:43.880 --> 00:09:49.190
well, the first thing we want to
do is put a file in there.

00:09:50.880 --> 00:09:53.640
And we'll open the main
document window for this,

00:09:53.640 --> 00:09:56.260
the source code for the
document window here.

00:09:56.260 --> 00:09:59.290
The first thing you notice is that it's
a lot more colorful than it used to be.

00:09:59.340 --> 00:10:03.170
Now it turns out that, you know,
as the freight train that is

00:10:03.170 --> 00:10:09.090
Mac OS X was moving along towards WWDC,
they make you stop and make

00:10:09.090 --> 00:10:10.600
a DVD to give to you guys.

00:10:10.680 --> 00:10:13.290
Well, we didn't stop working just
because we built a DVD.

00:10:13.360 --> 00:10:18.580
So this feature that shows source
code coloring of indexed symbols is

00:10:18.580 --> 00:10:21.970
something that's not on your disk,
but it is something that will be

00:10:22.060 --> 00:10:23.550
in the final version of Xcode 3.0.

00:10:23.610 --> 00:10:28.320
So we're coloring index symbols,
so classes, type defs,

00:10:28.380 --> 00:10:32.180
preprocessor macros, method calls.

00:10:32.600 --> 00:10:35.830
And it can differentiate between those
symbols that are in your project and

00:10:35.830 --> 00:10:40.260
those that are external to your project,
so framework symbols.

00:10:40.260 --> 00:10:43.340
So the next thing we want to do
here is show you a little bit of

00:10:43.340 --> 00:10:43.360
a demo of what we're doing here.

00:10:43.440 --> 00:10:47.690
show you one of the new
features in Code Sense.

00:10:47.950 --> 00:10:54.920
So Xcode 2.0 had two ways
of doing code completion.

00:10:54.920 --> 00:10:57.940
One is the next completion that
would cycle through the best

00:10:57.940 --> 00:11:01.720
guesses that the editor had for you,
and the other one would

00:11:01.910 --> 00:11:03.560
bring up the pop-up list.

00:11:03.720 --> 00:11:06.280
Well, we wanted to do something that
was a little more similar,

00:11:06.280 --> 00:11:08.900
a little more familiar to
people that was a lot like

00:11:09.150 --> 00:11:11.280
what's done in Mail and Safari.

00:11:11.410 --> 00:11:16.450
So with automatic completion turned on,
you can type right in your editor,

00:11:16.450 --> 00:11:20.990
and if we type a few characters there,
it'll offer to complete the rest

00:11:21.120 --> 00:11:23.540
of the word right where you are.

00:11:23.610 --> 00:11:26.060
And you can hit the tab
key to finish completion.

00:11:26.060 --> 00:11:29.090
You don't have to hit a next
completion key or whatever.

00:11:29.100 --> 00:11:31.790
The tab key is just too convenient.

00:11:32.030 --> 00:11:37.460
So there we typed "for" and it
offered to complete format string.

00:11:37.460 --> 00:11:39.340
Let's go ahead and complete that.

00:11:39.410 --> 00:11:41.140
And we'll do a little bit more.

00:11:41.140 --> 00:11:42.640
Let's--

00:11:43.090 --> 00:11:45.330
So in demos you always duplicate
the line above because that's

00:11:45.330 --> 00:11:48.240
the easiest thing to do.

00:11:48.240 --> 00:11:49.500
So let's see.

00:11:49.500 --> 00:11:51.950
So when there's, you can see there's a
little selection there.

00:11:51.960 --> 00:11:53.520
There's a selection.

00:11:53.520 --> 00:11:58.680
So what happens is it's guessing the
most likely completion for you and when

00:11:58.680 --> 00:12:01.560
it selects a little bit at the end,
what that means is that

00:12:01.560 --> 00:12:03.020
part is actually unique.

00:12:03.020 --> 00:12:05.560
So if you hit the tab key
it will complete to that.

00:12:05.560 --> 00:12:08.550
NSUserDefaults of course is
a class that it knows about,

00:12:08.550 --> 00:12:11.090
but there's also this
NSDefaultsController

00:12:11.090 --> 00:12:12.540
class that it knows about.

00:12:12.650 --> 00:12:14.960
Let's go ahead and bring up
the completion list for that.

00:12:14.960 --> 00:12:17.780
And you can move around with
the arrow keys to complete.

00:12:17.780 --> 00:12:19.210
So this list is still there.

00:12:19.210 --> 00:12:20.340
It's still useful.

00:12:20.340 --> 00:12:22.690
So if you don't really know
what the name of things are,

00:12:22.690 --> 00:12:26.050
you can bring up the list
and backspace and type and

00:12:26.050 --> 00:12:30.620
find what you're looking for.

00:12:30.620 --> 00:12:32.870
So he's doing a little bit
more here to complete the line.

00:12:35.710 --> 00:12:39.670
So we're doing next completion now,
right?

00:12:39.940 --> 00:12:40.700
Mm-hmm.

00:12:40.700 --> 00:12:45.120
So if you type a character
and you just want to cycle,

00:12:45.120 --> 00:12:49.700
you want to quickly insert
the most likely completion,

00:12:49.830 --> 00:12:50.680
you hit next completion.

00:12:50.730 --> 00:12:51.680
So it's in the edit menu.

00:12:51.720 --> 00:12:55.580
It's control period is the
default key binding for it.

00:12:55.710 --> 00:12:59.680
And it will just cycle through a
list of the most likely completions.

00:12:59.770 --> 00:13:01.700
And you can go ahead and type right away.

00:13:01.700 --> 00:13:05.670
You don't have to hit tab key
to finish that completion.

00:13:09.990 --> 00:13:11.500
All right.

00:13:11.500 --> 00:13:15.440
So let's... Oh, he's completing.

00:13:15.510 --> 00:13:18.440
Oh, we can of course complete
inside strings too.

00:13:18.440 --> 00:13:25.250
So it knows about the
words that are in the file.

00:13:29.310 --> 00:13:30.400
And we're going to delete that.

00:13:30.460 --> 00:13:34.550
So let's go ahead and show one
of the perhaps most underused

00:13:34.690 --> 00:13:38.830
feature of code completion,
and that's text macros.

00:13:39.070 --> 00:13:41.700
So let's go ahead and type the word for.

00:13:41.710 --> 00:13:46.040
Now, the most likely completion here is
actually going to be format string

00:13:46.240 --> 00:13:47.540
because it's a local variable.

00:13:47.600 --> 00:13:51.790
So if you hit next completion,
it should complete to format string.

00:13:52.450 --> 00:13:54.350
There we go, it has format string there.

00:13:54.540 --> 00:13:57.130
But we also have some text
macros in there for for loops.

00:13:57.250 --> 00:14:00.400
So go ahead and hit
next completion again.

00:14:00.450 --> 00:14:02.540
Here's a placeholder for a for loop.

00:14:02.760 --> 00:14:04.400
And do another one.

00:14:04.420 --> 00:14:10.370
Let's say here's one that actually
puts a loop around an NSArray.

00:14:10.400 --> 00:14:14.800
We need to change that one for
Objective-C 2.0 now that you don't

00:14:14.800 --> 00:14:17.250
have to do all this extra code.

00:14:17.610 --> 00:14:21.260
And let's go ahead and delete
that little bit of code.

00:14:24.400 --> 00:14:28.400
And select those,
the if-else blocks there.

00:14:28.460 --> 00:14:31.750
So the other cool thing about
text macros is that they can wrap

00:14:31.750 --> 00:14:33.850
around the current selection.

00:14:33.930 --> 00:14:37.980
So if you go up into the Edit menu
and down into Insert Text Macro

00:14:38.060 --> 00:14:42.140
and the set of ones for C,
there's an if block down there.

00:14:42.200 --> 00:14:45.280
Let's go ahead and,
the farther one down below.

00:14:45.290 --> 00:14:47.700
That's a pound if block,
so that's a pre-processed statement.

00:14:47.700 --> 00:14:52.160
That works too, but for the demo,
what it does.

00:14:52.160 --> 00:14:53.300
I want to do this pound if block.

00:14:53.300 --> 00:14:56.810
He likes that one.

00:14:56.920 --> 00:14:59.360
So you can insert a
pre-processed macro around it,

00:14:59.390 --> 00:15:01.960
so you want to delete some code.

00:15:05.510 --> 00:15:11.990
And there we've inserted the if block,
or the preprocessor block.

00:15:15.490 --> 00:15:17.090
All right.

00:15:17.180 --> 00:15:20.700
Okay, so he's taking a snapshot.

00:15:20.780 --> 00:15:23.300
We're going to talk about snapshots
a little later in the show,

00:15:23.300 --> 00:15:25.560
but in preparation for that,
we want to take some snapshots.

00:15:25.630 --> 00:15:29.670
I think most of you probably saw
Ted's keynote where they showed

00:15:29.670 --> 00:15:30.890
a little bit about snapshots.

00:15:30.910 --> 00:15:35.190
It's a way to get back to previous
versions of your entire project.

00:15:35.300 --> 00:15:39.460
Okay, so the next thing we're
going to show is --

00:15:40.370 --> 00:15:42.310
Well, let's see.

00:15:42.360 --> 00:15:44.060
It's code focus.

00:15:44.060 --> 00:15:47.100
So we have this method here
called commit sheet and it's,

00:15:47.130 --> 00:15:48.460
oh, 100 lines longer.

00:15:48.460 --> 00:15:50.710
So why don't you scroll down
a little bit so we can see a

00:15:50.710 --> 00:15:52.300
little bit more of the method.

00:15:52.410 --> 00:15:54.260
And you can see there's
a lot of if statements.

00:15:54.260 --> 00:15:58.330
It's not always easy to see exactly
the structure of the file though.

00:15:58.330 --> 00:16:05.290
So the new feature in Xcode 3.0 to
help you with this is code focus.

00:16:05.400 --> 00:16:07.910
And the way you get to it is
by hovering over this little

00:16:07.910 --> 00:16:09.480
ribbon on the left-hand side.

00:16:10.330 --> 00:16:13.800
And when you do that, it grays out.

00:16:13.800 --> 00:16:15.240
It's a little hard to see on the screen.

00:16:15.240 --> 00:16:17.770
You guys have the software so
you can look at it at home,

00:16:17.770 --> 00:16:19.330
of course, or in the audience.

00:16:19.370 --> 00:16:23.420
But as you hover over,
it's actually animating that block and

00:16:23.420 --> 00:16:26.000
it's got a little balance animation.

00:16:26.050 --> 00:16:27.670
I can see it from up here.

00:16:27.770 --> 00:16:30.090
You guys probably can't see it.

00:16:30.790 --> 00:16:33.580
So that lets you focus in.

00:16:33.580 --> 00:16:35.370
You can scroll around
a little bit in that.

00:16:35.370 --> 00:16:40.120
If you use the mouse wheel,
you can scroll down and see what

00:16:40.310 --> 00:16:42.760
little bit of code is highlighted.

00:16:42.970 --> 00:16:43.900
So that's good.

00:16:43.900 --> 00:16:48.070
I mean, that helps you see the overall
structure of that or little parts of the

00:16:48.200 --> 00:16:51.740
structure of the routine because you're,
you know, what's in the view.

00:16:51.740 --> 00:16:56.670
But sometimes the routine's big and you
want to see the overall structure of it.

00:16:56.790 --> 00:16:58.840
So the way to do that
is with code folding.

00:16:58.840 --> 00:17:02.390
You can hide portions of it,
sub-portions, blocks of your code.

00:17:02.440 --> 00:17:06.510
Let's go back up to the
beginning of that method.

00:17:09.220 --> 00:17:13.110
And when you're hovering over that,
you'll notice that the folding

00:17:13.110 --> 00:17:14.710
ribbon there changes a little.

00:17:14.720 --> 00:17:18.310
There's a downward and
upward pointing triangle.

00:17:18.360 --> 00:17:20.680
And if you click,
it'll actually collapse.

00:17:20.840 --> 00:17:23.200
So it's collapsed the whole method there.

00:17:23.240 --> 00:17:27.960
Let's go ahead and expand that again
and go down to the first if block.

00:17:28.370 --> 00:17:29.300
Right there at the top.

00:17:29.300 --> 00:17:30.700
Go ahead and collapse that.

00:17:30.760 --> 00:17:34.700
And let's collapse the next else if,
and the next else if,

00:17:34.970 --> 00:17:36.300
and the next else if.

00:17:36.610 --> 00:17:38.770
And you can see that this
routine has actually got a

00:17:38.780 --> 00:17:40.510
pretty simple overall structure.

00:17:40.530 --> 00:17:44.300
See the little pound warning up there?

00:17:44.300 --> 00:17:46.110
We could really clean this up.

00:17:46.170 --> 00:17:50.870
I guess maybe you should be
doing that a little differently,

00:17:50.870 --> 00:17:51.250
eh?

00:17:51.470 --> 00:17:55.220
Okay, another thing you can do is you
can hide all of your functions.

00:17:55.220 --> 00:17:56.210
You can collapse all of them.

00:17:56.320 --> 00:18:00.680
So let's go ahead and just use
a contextual menu for that.

00:18:00.680 --> 00:18:00.680
So if you control-click.

00:18:01.600 --> 00:18:06.600
On the Code Folding menu down inside
it says Fold All Method and Functions.

00:18:06.680 --> 00:18:08.600
So go ahead and do that.

00:18:08.610 --> 00:18:11.920
And you can see they're all
gone and you can just see the

00:18:11.920 --> 00:18:14.680
methods you're interested in.

00:18:15.310 --> 00:18:20.960
That's something that people have
been asking for a couple of years now.

00:18:20.960 --> 00:18:25.820
So we're very pleased to be
bringing it to you finally.

00:18:26.720 --> 00:18:28.880
That one's a little uninteresting.

00:18:28.890 --> 00:18:34.250
Let's go ahead and unfold all of
them inside of the contextual menu.

00:18:37.700 --> 00:18:39.240
And fold all.

00:18:39.270 --> 00:18:41.600
Up above.

00:18:41.700 --> 00:18:42.600
Okay, well let's go ahead.

00:18:42.600 --> 00:18:45.790
So fold one of those methods.

00:18:46.850 --> 00:18:49.170
Any way you please.

00:18:49.250 --> 00:18:51.640
So the other thing is there's
that little placeholder there,

00:18:51.640 --> 00:18:52.890
the ellipses inside of the box.

00:18:53.010 --> 00:18:56.340
You can double click on
that and it unfolds too.

00:18:56.380 --> 00:18:58.560
So don't just have to use the ribbon.

00:18:58.560 --> 00:19:03.750
There's keyboard equivalents for
all of these menu commands now.

00:19:05.130 --> 00:19:08.240
Okay, so let's show one more
thing with code folding.

00:19:08.240 --> 00:19:15.650
So let's go ahead and go up to the
top of that file and double click.

00:19:15.650 --> 00:19:15.650
There's...

00:19:16.370 --> 00:19:21.540
A method for you, LJ or a class.

00:19:21.540 --> 00:19:21.540
There you go.

00:19:21.540 --> 00:19:21.540
LJ.

00:19:22.540 --> 00:19:25.900
So we brought up this header file here.

00:19:25.900 --> 00:19:30.630
And it's full of documentation comments,
which is really great, and we love them,

00:19:30.630 --> 00:19:34.490
and we want you to use them,
and we want to use them more than we do.

00:19:34.670 --> 00:19:38.850
But sometimes when you just want to
see the methods that are in the file,

00:19:39.000 --> 00:19:40.820
they're kind of in the way.

00:19:40.830 --> 00:19:47.260
So we also have a menu command
to hide all the block comments.

00:19:47.260 --> 00:19:51.740
And so now you can just see the methods
without any of that extra stuff.

00:19:54.800 --> 00:20:13.300
[Transcript missing]

00:20:17.610 --> 00:20:19.820
So find and replace.

00:20:19.840 --> 00:20:22.580
Obviously you'd want it
to unfold what you get to.

00:20:22.580 --> 00:20:27.040
So here it unfolded the method,
it unfolded the method below.

00:20:27.120 --> 00:20:30.500
So it automatically unfolds to
get you where you need to be.

00:20:30.500 --> 00:20:33.500
Okay.

00:20:33.740 --> 00:20:36.370
Thanks Dave.

00:20:43.120 --> 00:20:46.010
So obviously there are a lot of
new features and functions in

00:20:46.020 --> 00:20:48.860
there and there are obviously
new controls and preferences

00:20:49.230 --> 00:20:51.000
for controlling those functions.

00:20:51.100 --> 00:20:55.230
We will have controls for setting your
syntax coloring in the final product.

00:20:55.370 --> 00:20:58.670
The syntax coloring, as Dave said,
isn't in the preview that you have,

00:20:58.670 --> 00:21:00.890
but it'll be in the final product.

00:21:01.040 --> 00:21:04.990
There are controls for showing or
hiding the code folding ribbon.

00:21:05.000 --> 00:21:09.440
It's actually called the code
sidebar in the version you have

00:21:09.440 --> 00:21:12.000
in the CodeSense preferences.

00:21:12.030 --> 00:21:16.710
There are preferences for CodeSense
code completion for whether to

00:21:16.710 --> 00:21:22.000
automatically complete inline and if so,
to do so with a delay or without a delay.

00:21:22.000 --> 00:21:25.000
Those are in the CodeSense
preference panel.

00:21:25.000 --> 00:21:29.640
And there are some other controls
about code folding in the text editing

00:21:29.640 --> 00:21:33.000
and indentation preference panes.

00:21:34.040 --> 00:21:39.290
So let's talk about the next phase
of streamlining your workflow.

00:21:39.300 --> 00:21:41.480
Streamlining building and debugging.

00:21:41.870 --> 00:21:45.340
Building and debugging have
been vexing for people not

00:21:45.340 --> 00:21:48.300
only because they take so long,
but because they require so

00:21:48.490 --> 00:21:50.290
much window manipulation.

00:21:50.500 --> 00:21:53.480
Bringing this window up,
bringing that window up,

00:21:53.500 --> 00:21:57.360
it's hard to see your errors and
enough text at the same time in

00:21:57.360 --> 00:21:59.500
order to get a sense of context.

00:21:59.660 --> 00:22:04.300
Sometimes when you're building Universal,
you get two errors in every file,

00:22:04.300 --> 00:22:07.090
so you get twice as many
errors to wander through.

00:22:07.270 --> 00:22:10.020
And then in debugging,
you're constantly switching back and

00:22:10.020 --> 00:22:16.450
forth between your application under test
and your software to trace through it.

00:22:16.630 --> 00:22:19.690
There's going to be an entire
session on debugging coming up later.

00:22:19.700 --> 00:22:21.830
I strongly recommend you go to that.

00:22:21.890 --> 00:22:24.510
They're going to go through a
lot more of the steps there.

00:22:24.830 --> 00:22:27.330
But we're going to talk a little
bit here about streamlining,

00:22:27.380 --> 00:22:28.660
building, and debugging.

00:22:28.700 --> 00:22:32.300
The first thing is that we have
introduced message bubbles,

00:22:32.300 --> 00:22:34.670
a kind of annotation to your source code.

00:22:34.700 --> 00:22:38.700
This is a generic architecture that we're
going to use a lot more in the future.

00:22:38.700 --> 00:22:42.160
Initially, it's for errors, warnings,
and breakpoints.

00:22:42.420 --> 00:22:46.640
And what it allows us to do is to take
an external data source of anything

00:22:46.640 --> 00:22:50.890
that pertains to your text file,
anything that can give us line and column

00:22:51.020 --> 00:22:55.710
information about text in your sources,
and we can inject it right in the source

00:22:55.860 --> 00:22:57.900
in a seamless and transparent way.

00:22:57.920 --> 00:23:01.840
So that you can scroll through it,
you can codefold over it,

00:23:01.920 --> 00:23:04.820
you can do anything you like,
and that the annotations,

00:23:04.820 --> 00:23:07.900
the message bubbles,
are not saved to your backing file,

00:23:07.900 --> 00:23:11.900
but instead are metadata that
come from some other source.

00:23:11.900 --> 00:23:16.740
So it lets us give you an overlay of
information on top of your source code,

00:23:16.900 --> 00:23:19.900
especially information that's
kind of ephemeral or transitory,

00:23:19.900 --> 00:23:20.880
like warnings.

00:23:20.960 --> 00:23:22.790
You want them there when you fix them.

00:23:22.900 --> 00:23:24.900
You want them to go away.

00:23:24.900 --> 00:23:27.100
So you just want a way to
see them in your source code.

00:23:27.130 --> 00:23:31.080
source code, and then when they're fixed,
to just go away.

00:23:31.290 --> 00:23:35.800
We have really worked on
the workflow of building and

00:23:35.800 --> 00:23:37.680
debugging with message bubbles.

00:23:37.680 --> 00:23:40.480
We have wired up the
next build warning error,

00:23:40.490 --> 00:23:45.010
previous build warnings error,
so it will step through every error and

00:23:45.010 --> 00:23:49.320
warning in your project and bring up the
right file and scroll you right to the

00:23:49.320 --> 00:23:52.600
position and show you the text of the
error right there along with your source

00:23:52.600 --> 00:23:54.390
code so you don't have to go anywhere.

00:23:54.390 --> 00:23:57.390
Just one key, command equals,
will take you quickly through all

00:23:57.390 --> 00:23:59.050
of the warnings in your project.

00:23:59.460 --> 00:24:02.900
We've really worked on streamlining
the workflow of building and debugging.

00:24:02.900 --> 00:24:07.820
We have a streamlined debugging
model where not only are the debug

00:24:07.830 --> 00:24:12.050
window and the console window and the
standard I/O window now all unified

00:24:12.050 --> 00:24:16.310
so that they're all the same thing,
but also the debug and run

00:24:16.310 --> 00:24:19.140
commands are the same thing.

00:24:19.200 --> 00:24:22.950
If you have breakpoints on,
command Y debugs.

00:24:22.950 --> 00:24:27.720
If you have breakpoints off,
command Y just runs your application.

00:24:27.720 --> 00:24:29.620
Un-command key, it does what you want.

00:24:31.950 --> 00:24:34.730
When you're debugging,
we try to keep you in your

00:24:34.850 --> 00:24:36.920
source code as much as possible.

00:24:36.920 --> 00:24:42.170
So we have the debug bar at the top
of any source code window that you're

00:24:42.170 --> 00:24:45.800
debugging and it has all of the basic
controls you need for debugging.

00:24:45.800 --> 00:24:48.510
You can step, you can pause,
you can continue,

00:24:48.510 --> 00:24:51.810
you can look at your stack frame
and you can navigate to other

00:24:51.810 --> 00:24:55.300
stack frames or other threads
right there in your source code.

00:24:55.500 --> 00:24:59.320
And you have the basic debug
information in a message bubble

00:24:59.320 --> 00:25:01.500
right there in your source code.

00:25:01.700 --> 00:25:04.990
Right now only the enable/disable
checkbox is operative,

00:25:05.170 --> 00:25:09.160
but we'll have essentially the
full breakpoint interface right

00:25:09.160 --> 00:25:10.300
there in your source file.

00:25:10.300 --> 00:25:14.780
So you can stop, expand the bubble,
set breakpoint conditions,

00:25:14.780 --> 00:25:18.950
put in breakpoint actions, for example,
to evaluate something on a

00:25:18.970 --> 00:25:21.940
breakpoint or print a log message,
and do it right in your source

00:25:22.070 --> 00:25:24.630
code without having to go to a
separate breakpoints window or

00:25:24.670 --> 00:25:26.030
the separate debugger window.

00:25:26.200 --> 00:25:29.290
We can also show you the value
of variables in the data tips,

00:25:29.680 --> 00:25:33.760
which are not just tool tips,
but they are a completely

00:25:33.880 --> 00:25:38.430
hierarchically structured inspector
of your program's data space

00:25:38.430 --> 00:25:39.990
right there in your text editor.

00:25:40.000 --> 00:25:43.000
I think you're going
to be amazed by this.

00:25:43.520 --> 00:25:48.010
So Dave's going to come up again and
we're going to show you message bubbles,

00:25:48.150 --> 00:25:50.880
the debug strip, and data tips.

00:25:51.130 --> 00:25:53.220
All right, well,
we need to build the project.

00:25:53.220 --> 00:25:53.600
Ah.

00:25:53.780 --> 00:25:56.860
Which I gratefully forgot to
do before I left the stage.

00:25:57.080 --> 00:25:58.590
Luckily.

00:25:58.730 --> 00:26:00.190
Luckily, these are fast machines.

00:26:00.270 --> 00:26:02.300
This is a dual-core power
PC and it's quite fast.

00:26:02.300 --> 00:26:04.560
Yep, that's right.

00:26:04.920 --> 00:26:06.200
So did we build?

00:26:06.250 --> 00:26:07.100
We are building.

00:26:07.100 --> 00:26:10.240
Okay,
so this project is actually two projects.

00:26:10.240 --> 00:26:16.000
There's a framework project that has 30,
40 files in it or so.

00:26:16.000 --> 00:26:19.400
And then there's the project itself,
the main application.

00:26:19.400 --> 00:26:22.390
So it takes a second to build.

00:26:27.050 --> 00:26:30.360
Oh, build succeeded,
but there's warnings.

00:26:30.430 --> 00:26:32.500
How did that happen?

00:26:32.550 --> 00:26:33.800
Turns out there were
warnings ahead of time.

00:26:33.800 --> 00:26:36.080
There's a lot of pound
warnings in this project.

00:26:36.080 --> 00:26:37.760
We also made a little modification.

00:26:37.760 --> 00:26:42.270
So let's go ahead and go to
the next build error warning,

00:26:42.270 --> 00:26:43.890
command equals.

00:26:46.110 --> 00:26:48.880
And it takes you right to that warning.

00:26:48.900 --> 00:26:52.100
Little hard to see,
these are optimized for a regular screen,

00:26:52.280 --> 00:26:55.000
not for display up on the big wall.

00:26:55.000 --> 00:26:59.470
Let's go ahead and go down
through a few more warnings here.

00:27:01.710 --> 00:27:06.830
Keep going, let's get back into the
XJ document file again.

00:27:06.970 --> 00:27:09.340
Detect Music Now.

00:27:09.340 --> 00:27:14.390
So this particular method
is inside of this file.

00:27:14.740 --> 00:27:17.790
So why don't you go ahead
and fold all the methods.

00:27:23.970 --> 00:27:25.800
And just so you know,
when you're folding methods,

00:27:25.800 --> 00:27:28.800
if you're inside of a method currently,
it doesn't fold that method for you.

00:27:28.800 --> 00:27:32.770
It figures you're trying
to hide the other stuff.

00:27:32.880 --> 00:27:35.420
So let's go down and see
if we can find that method,

00:27:35.420 --> 00:27:37.530
detect music now.

00:27:40.500 --> 00:27:44.900
And there it is down at the bottom.

00:27:44.900 --> 00:27:46.250
And we want to move that.

00:27:46.370 --> 00:27:50.100
So since we've folded,
it's a lot easier to find the method.

00:27:50.100 --> 00:27:51.520
We can just drag it up to the top.

00:27:51.580 --> 00:27:55.440
We'll put it somewhere above
that particular method,

00:27:55.520 --> 00:27:59.090
perhaps even near the top of the file.

00:27:59.310 --> 00:27:59.790
There we go.

00:27:59.970 --> 00:28:02.090
And we can build again.

00:28:04.440 --> 00:28:06.160
and the warning is gone.

00:28:06.160 --> 00:28:09.540
So, all right.

00:28:09.540 --> 00:28:10.540
So let's see.

00:28:10.540 --> 00:28:13.480
We want to do some debugging.

00:28:13.760 --> 00:28:19.390
So let's go to the control
text and editing method.

00:28:21.700 --> 00:28:22.660
There we go.

00:28:22.720 --> 00:28:24.260
Let's go ahead and set a breakpoint.

00:28:24.350 --> 00:28:26.930
Actually, before we do that,
let's go up into the

00:28:26.930 --> 00:28:28.580
file navigator there.

00:28:28.580 --> 00:28:32.280
There's a pop-up menu over to
the right that will allow us to

00:28:32.280 --> 00:28:35.480
hide those errors and warnings.

00:28:35.500 --> 00:28:37.940
So we don't need to have them there.

00:28:37.970 --> 00:28:39.900
You can hide them.

00:28:39.900 --> 00:28:42.200
They do remain hidden
once you've hidden them.

00:28:42.270 --> 00:28:45.570
And let's go ahead and show breakpoints.

00:28:47.010 --> 00:28:48.050
So here it is in line.

00:28:48.330 --> 00:28:51.780
So it turns out actually the auto
continue checkbox also works.

00:28:52.020 --> 00:28:53.140
Both checkboxes work.

00:28:53.340 --> 00:28:59.420
The condition text field does
not work at the moment for these.

00:28:59.420 --> 00:29:02.190
But I guess let's go ahead and debug.

00:29:09.410 --> 00:29:11.140
So we'll bring up Xjournal here.

00:29:11.310 --> 00:29:13.610
I don't know if we explained this.

00:29:13.680 --> 00:29:17.120
It's actually an editor for
live journal blog posts.

00:29:17.120 --> 00:29:18.940
We don't need that particular window.

00:29:18.940 --> 00:29:26.920
We want to go in and add
a new entry to our blog.

00:29:26.920 --> 00:29:31.180
And we'll add a name to the music field.

00:29:33.300 --> 00:29:36.000
and it'll hit the breakpoint.

00:29:36.000 --> 00:29:40.750
So, we're here in the debugger,
but we're really just here in the editor,

00:29:40.750 --> 00:29:41.420
aren't we?

00:29:41.420 --> 00:29:46.610
So this bar at the top of the text view
there has all the information you need.

00:29:46.740 --> 00:29:49.740
It's got a threads pop-up on the left.

00:29:49.740 --> 00:29:51.940
You can see there's
multiple threads there.

00:29:51.960 --> 00:29:54.400
It's got the stack
trace over on the right.

00:29:54.470 --> 00:29:59.410
Let's go ahead and go down to one
of the other methods and back up.

00:30:00.210 --> 00:30:02.970
and all the buttons to continue, pause,
all that sort of stuff,

00:30:02.970 --> 00:30:04.060
the standard stuff.

00:30:04.060 --> 00:30:05.820
You can get to the console
window right from here.

00:30:09.120 --> 00:30:13.280
So let's go ahead and
look at a notification.

00:30:13.400 --> 00:30:15.300
So we have data tips, right?

00:30:15.510 --> 00:30:18.390
Now you've seen these
in other IDEs perhaps.

00:30:18.450 --> 00:30:21.340
I've seen them in other IDEs certainly.

00:30:21.390 --> 00:30:22.870
And usually they're very simple.

00:30:23.080 --> 00:30:27.520
They just have a little tool tip
that describes the basic information.

00:30:27.680 --> 00:30:28.640
But that's not enough.

00:30:28.740 --> 00:30:31.210
I mean structures are big.

00:30:31.210 --> 00:30:34.270
They have lots of stuff in them.

00:30:34.270 --> 00:30:34.270
So let's go ahead and over...

00:30:34.550 --> 00:30:36.800
A notification actually
doesn't have much in it,

00:30:36.800 --> 00:30:37.340
does it?

00:30:37.340 --> 00:30:39.500
It has an "is a" field and that's it.

00:30:39.640 --> 00:30:41.800
Well, in order,
a lot of Objective-C objects and

00:30:41.890 --> 00:30:46.730
in fact core foundation objects
as well have description methods.

00:30:47.160 --> 00:30:49.740
So you can get to that description
method if you move over.

00:30:49.740 --> 00:30:53.400
The two upward and downward pointing
triangles brings up a contextual menu.

00:30:53.880 --> 00:30:57.280
And let's go ahead and print the
description into the console.

00:30:57.410 --> 00:30:59.900
So this is a way to get that
information in the console.

00:30:59.900 --> 00:31:04.110
The console will always be a
useful feature in the debugger.

00:31:04.410 --> 00:31:07.460
You can do a lot of your
stuff inside the editor,

00:31:07.470 --> 00:31:10.520
but really there's so much there in GDB.

00:31:10.520 --> 00:31:13.080
Sorry, we just kind of love it.

00:31:13.110 --> 00:31:16.560
It's a little weird.

00:31:16.940 --> 00:31:20.800
So let's go ahead and look at
something a little more interesting.

00:31:20.800 --> 00:31:22.000
NS Text Field is a good one.

00:31:22.000 --> 00:31:24.520
So hover over the little
triangle on the left.

00:31:24.520 --> 00:31:25.590
It brings up the field.

00:31:25.600 --> 00:31:29.590
Let's go up to the underscore
bounds field at the very top.

00:31:29.940 --> 00:31:32.620
and hover over that triangle over there.

00:31:32.620 --> 00:31:38.600
It actually gave you a description of it,
but you can go down multiple levels.

00:31:38.920 --> 00:31:40.840
and just get to anything you want to see.

00:31:41.120 --> 00:31:44.790
So you don't have to have that field
taking up your whole window all the time.

00:31:44.800 --> 00:31:46.800
When you need to look at
the value of something,

00:31:46.850 --> 00:31:49.480
you hover over it and get to it.

00:31:49.520 --> 00:31:51.910
But it's not just for variables.

00:31:51.910 --> 00:31:55.880
Let's go ahead and select a--

00:31:56.120 --> 00:31:57.090
Arrange down there.

00:31:57.130 --> 00:31:57.700
Yeah, self-entry.

00:31:57.700 --> 00:31:59.300
That's a good place to go.

00:31:59.300 --> 00:32:03.380
So we can also evaluate
expressions in these fields.

00:32:03.380 --> 00:32:06.990
So if you hover over them,
it knows that the expression looks

00:32:07.050 --> 00:32:09.910
a little dangerous so it doesn't
automatically evaluate that,

00:32:10.080 --> 00:32:12.100
but it puts up this little info button.

00:32:12.100 --> 00:32:15.520
If you click on the info button,
then it will bring up the field and

00:32:15.520 --> 00:32:17.600
then you can go down and inspect it.

00:32:19.300 --> 00:32:21.740
If it's an expression that it
doesn't know how to evaluate,

00:32:21.740 --> 00:32:23.800
it doesn't end up bringing up the field.

00:32:23.800 --> 00:32:25.150
So we need to give some feedback.

00:32:25.270 --> 00:32:27.920
In the final version,
we'll do a little bit better job of that.

00:32:28.080 --> 00:32:30.620
But right now,
you can actually evaluate all

00:32:30.920 --> 00:32:32.500
sorts of expressions there.

00:32:32.500 --> 00:32:34.440
You don't need this separate
expressions window either.

00:32:34.440 --> 00:32:37.100
All right, let's see.

00:32:37.100 --> 00:32:40.530
I think that's probably good.

00:32:40.530 --> 00:32:41.520
Yeah.

00:32:41.610 --> 00:32:43.510
Thanks, Dave.

00:32:51.100 --> 00:35:26.400
[Transcript missing]

00:35:28.130 --> 00:35:29.750
Thank you, Chris.

00:35:29.830 --> 00:35:31.390
OK,
I'd like to show you a little bit about

00:35:31.390 --> 00:35:36.340
the research assistant and the new
features in the documentation window.

00:35:36.560 --> 00:35:42.440
But let's first look at how you
got to documentation in Xcode 2.0.

00:35:42.580 --> 00:35:50.540
The fastest way to get from an
API in your code editor to the

00:35:50.540 --> 00:35:53.540
documentation is Option-double-click.

00:35:53.740 --> 00:35:55.820
So if we could do that.

00:35:55.920 --> 00:35:59.560
And you see, as Chris pointed out,
the documentation window takes

00:35:59.570 --> 00:36:03.870
you right where you want to be,
but it obscures the work

00:36:03.940 --> 00:36:06.140
that you were currently in.

00:36:06.140 --> 00:36:09.090
So the lighter weight solution
is to bring up the research

00:36:09.340 --> 00:36:12.320
assistant in Xcode 3.0.

00:36:12.440 --> 00:36:18.000
You can get there from the Help menu,
or you can get there with a toolbar item.

00:36:18.120 --> 00:36:20.350
So if we can bring that up.

00:36:20.550 --> 00:36:24.050
Okay, the research assistant is
this small window that,

00:36:24.050 --> 00:36:27.080
as Chris said,
hovers on the screen and listens to

00:36:27.080 --> 00:36:29.450
your selection in the code editor.

00:36:29.990 --> 00:36:34.840
As you click around in your code,
you can see how it updates to show you

00:36:34.840 --> 00:36:41.520
what the current selection is and gives
you some information on that selection.

00:36:41.660 --> 00:36:44.820
So if you twist open
a few of those slices,

00:36:44.820 --> 00:36:49.160
we can see a little bit more
of what it's showing you.

00:36:50.020 --> 00:36:55.390
OK, and if you would select a few
of the methods and classes and

00:36:55.390 --> 00:36:57.500
show them how it's updating.

00:36:57.660 --> 00:37:01.620
So you can see that the
Research Assistant offers a variety

00:37:01.620 --> 00:37:05.580
of information on the selected API.

00:37:05.580 --> 00:37:09.620
Let's take a closer look
at exactly what that is.

00:37:09.730 --> 00:37:13.280
Starting at the top,
there are three lines of links.

00:37:13.280 --> 00:37:18.520
The top one is a link to that
API documentation itself.

00:37:18.520 --> 00:37:21.100
And clicking that would
be equivalent to option

00:37:21.100 --> 00:37:23.210
double-clicking in your code editor.

00:37:23.240 --> 00:37:25.660
It takes you right to that reference.

00:37:25.660 --> 00:37:29.640
The next line down takes you
to the enclosing document.

00:37:29.640 --> 00:37:32.850
The document, in this case,
the class documentation

00:37:32.860 --> 00:37:37.120
for that string class.

00:37:37.120 --> 00:37:40.410
If you were looking at a method,
this would be the class

00:37:40.460 --> 00:37:42.480
that contains that method.

00:37:42.480 --> 00:37:47.140
And the next link down is to the
header file that declares that API.

00:37:47.200 --> 00:37:49.520
Clicking that will bring
up the header file,

00:37:49.520 --> 00:37:55.490
just as you would bring it up by command
double-clicking in the code editor.

00:37:55.820 --> 00:37:58.930
And below those three links
we've got a series of slices,

00:37:58.930 --> 00:38:04.940
each one dedicated to a specific topic,
declaration, abstract.

00:38:05.020 --> 00:38:12.210
And if you twist open a couple more
like related API and sample code,

00:38:13.270 --> 00:38:17.650
Now, this is data-driven and
it's a work in progress.

00:38:17.770 --> 00:38:20.120
We have a lot of entries
for certain slices,

00:38:20.120 --> 00:38:21.860
other ones we're working on.

00:38:21.990 --> 00:38:26.580
For example, the sample code,
we have a few entries,

00:38:26.770 --> 00:38:31.200
but we'll be working on that over
time and it'll become a lot more

00:38:31.200 --> 00:38:35.160
valuable by the release of Xcode 3.0.

00:38:35.160 --> 00:38:39.800
Another area that's quite helpful
is look at that availability slice.

00:38:39.800 --> 00:38:46.340
It tells you when an API became available
in Mac OS X and if you would select

00:38:46.340 --> 00:38:51.680
that font method near the bottom,
it also tells you about

00:38:51.680 --> 00:38:55.000
APIs that have become deprecated.

00:38:55.080 --> 00:38:58.380
So if you'd open that slice,
it tells you not only that

00:38:58.380 --> 00:39:02.410
the method is deprecated,
but it gives you a reference

00:39:02.450 --> 00:39:06.570
to the replacement API.

00:39:11.020 --> 00:39:15.750
We really hope that that will help you
bring your projects up to date and make

00:39:15.750 --> 00:39:20.870
sure when you're creating a new project
that you don't use deprecated APIs.

00:39:20.880 --> 00:39:28.720
So that's the way the research assistant
can bring targeted information to you.

00:39:28.850 --> 00:39:32.830
But sometimes, as Chris was saying,
you need to get to the documentation

00:39:32.830 --> 00:39:34.920
so you can browse and search it.

00:39:35.010 --> 00:39:38.430
And for that we have the
documentation window.

00:39:38.510 --> 00:39:41.900
It looks very much like
it did in Xcode 2.0,

00:39:42.180 --> 00:39:44.200
but the plumbing's all new.

00:39:44.250 --> 00:39:49.680
It's all core data driven and the
metadata is in core data stores.

00:39:49.800 --> 00:39:51.550
So what does that mean to you?

00:39:51.680 --> 00:39:56.300
Well, the first thing you can see is on
the left at the top under Apple,

00:39:56.300 --> 00:40:03.650
there are two documentation sets instead
of the one that you had in Xcode 2.0.

00:40:03.660 --> 00:40:08.880
And we're going to be breaking
out further documentation sets.

00:40:08.930 --> 00:40:12.800
We no longer require one
monolithic documentation set.

00:40:12.880 --> 00:40:15.960
In this case,
we broke out the Java documentation

00:40:15.960 --> 00:40:18.340
set from the rest.

00:40:18.340 --> 00:40:18.840
And now we have two.

00:40:18.930 --> 00:40:22.300
We'll have others by ship.

00:40:22.440 --> 00:40:27.530
Now, as Chris clicks between
those two documentation sets,

00:40:27.560 --> 00:40:32.430
you'll see that the API list
updates to show you just what's

00:40:32.470 --> 00:40:32.700
available in that documentation set.

00:40:32.700 --> 00:40:33.450
So that's the first thing you need to do.

00:40:33.460 --> 00:40:39.090
And then the second thing
you need to do is you need to

00:40:39.090 --> 00:40:39.090
go to the documentation set.

00:40:39.090 --> 00:40:39.090
So this

00:40:39.290 --> 00:40:43.040
Configuring your work environment,
you'll be able to download and install

00:40:43.150 --> 00:40:47.540
just the documentation sets you want
and your searches will be just on those

00:40:47.750 --> 00:40:50.400
APIs that are relevant to your project.

00:40:50.440 --> 00:40:57.260
Okay, another piece that's new is we've
introduced one more type of search.

00:40:57.260 --> 00:41:01.110
We had API search, which you saw here,
full-text search that's

00:41:01.110 --> 00:41:02.610
been around for a while.

00:41:02.710 --> 00:41:04.250
Now we have title search.

00:41:04.250 --> 00:41:07.150
And I think this is going
to be very valuable,

00:41:07.150 --> 00:41:12.240
especially if you're looking into
documentation for a new technology

00:41:12.460 --> 00:41:15.300
like Core Data or Objective C2.

00:41:15.300 --> 00:41:20.170
You can quickly narrow from the
3,000 plus documents down to,

00:41:20.170 --> 00:41:26.320
in that case, just the primary entry
point for Objective C2.

00:41:26.340 --> 00:41:30.890
So those are the two new features of
documentation access in Xcode 2.0.

00:41:30.890 --> 00:41:32.960
3.0, eh?

00:41:32.960 --> 00:41:33.460
3.0.

00:41:33.470 --> 00:41:34.460
3.0.

00:41:34.460 --> 00:41:39.550
And we're still refining them,
so if you have comments and suggestions,

00:41:39.710 --> 00:41:40.590
please let us know.

00:41:40.590 --> 00:41:42.760
We want to make sure
it works well for you.

00:41:42.990 --> 00:41:44.600
Thank you.

00:41:49.250 --> 00:41:51.790
Thank you, Matt.

00:41:51.800 --> 00:41:55.440
So we're on the last phase of
our streamlining journey back

00:41:55.440 --> 00:42:01.380
to the beginning where we give
up and acquire another project.

00:42:02.050 --> 00:42:04.590
Project configuration.

00:42:04.810 --> 00:42:09.060
This is where a lot of people
unfortunately spend most or

00:42:09.350 --> 00:42:12.850
far too much of their time,
is changing build settings so that

00:42:12.920 --> 00:42:14.770
their project actually builds.

00:42:14.960 --> 00:42:18.150
Finding the right build setting
among the myriad settings we have

00:42:18.290 --> 00:42:19.990
has been a historical problem.

00:42:20.210 --> 00:42:24.150
Well, we've made some significant changes
in the build settings inspector

00:42:24.180 --> 00:42:27.250
for Xcode 3.0 using some new
technology that's in Leopard and

00:42:27.250 --> 00:42:28.540
I think you're going to love it.

00:42:28.660 --> 00:42:32.100
We have added searching and sorting
to the build setting inspector.

00:42:32.100 --> 00:42:36.360
We have added built-in per architecture
build settings so you don't have

00:42:36.360 --> 00:42:42.060
to synthesize your own separate
build settings for PowerPC and 386.

00:42:44.300 --> 00:42:47.570
Which is going to become increasingly
important as you now have four

00:42:47.580 --> 00:42:51.140
architectures to build for,
not just two.

00:42:51.140 --> 00:42:53.780
We support the research assistant
for build settings so you can get

00:42:53.780 --> 00:42:57.890
the same kind of documentation on
build settings that you have on APIs.

00:42:57.890 --> 00:43:01.100
And just incidentally,
we now support code completion of

00:43:01.220 --> 00:43:05.540
build settings in XC config files
so you don't have to go back to the

00:43:05.540 --> 00:43:08.100
documentation and copy and paste.

00:43:09.520 --> 00:43:12.550
Now one of the big things about
project configuration is that it makes

00:43:12.800 --> 00:43:17.280
changes in your project file and your
project file is hidden and opaque.

00:43:17.360 --> 00:43:20.720
And it's very hard to see what
changes you've made and the changes

00:43:20.720 --> 00:43:23.840
you make often break things,
so you have to roll back to

00:43:23.960 --> 00:43:26.520
the previous version and often
you just do it blindly saying,

00:43:26.520 --> 00:43:30.190
"Oh, I've screwed this up, throw it away,
go back to the backup."

00:43:30.400 --> 00:43:31.790
Backup and Restore.

00:43:31.800 --> 00:43:34.930
We have added built-in
backup and restore to Xcode.

00:43:35.210 --> 00:43:38.200
You've seen the snapshots
I've been taking all along.

00:43:38.230 --> 00:43:42.870
You can go back and look at those
individual snapshots over time to see

00:43:42.980 --> 00:43:47.080
the changes you've made and diff them,
not only diffing your

00:43:47.080 --> 00:43:50.080
source code changes,
but nib file changes and

00:43:50.250 --> 00:43:54.810
project file changes as well to
see what changes you've made.

00:43:54.810 --> 00:43:54.810
Now the...

00:43:56.520 --> 00:44:01.400
The Snapshot File window is
not as whizzy as Time Machine.

00:44:01.400 --> 00:44:03.400
I apologize.

00:44:03.400 --> 00:44:07.400
We don't have an animated Starfield
background on our Restore window.

00:44:07.400 --> 00:44:11.390
But very simply, every time you make a
snapshot it goes in the list.

00:44:11.390 --> 00:44:15.380
And you can pick one from a list
and go back and restore to it.

00:44:15.440 --> 00:44:18.400
So if you know what you want to do,
go back to a certain point in time,

00:44:18.400 --> 00:44:21.390
a date,
before or after a certain operation,

00:44:21.400 --> 00:44:24.400
you can do that with one click.

00:44:24.400 --> 00:44:28.540
If you want to see what the changes were,
you can look at the file list

00:44:28.540 --> 00:44:32.380
and then see a comparison on
a file-by-file basis as well.

00:44:32.480 --> 00:44:34.720
To show you both of those,
I'm bringing up

00:44:34.720 --> 00:44:36.390
Scott Tooker of our group.

00:44:40.900 --> 00:44:42.170
Thanks, Chris.

00:44:42.180 --> 00:44:46.040
One thing I wanted to clarify is we
actually do have searching in Xcode 2.0.

00:44:46.040 --> 00:44:48.230
It's not as good as in 3.0
for the build settings.

00:44:48.440 --> 00:44:51.790
One new feature that we're not showing
you today that I would encourage people

00:44:51.800 --> 00:44:56.640
to try out though is we do support
type completion for include statements.

00:44:57.350 --> 00:45:00.120
So anyway, so we've shown you a
lot about the editor.

00:45:00.180 --> 00:45:02.400
And so now what we want to
do is turn your focus to

00:45:02.420 --> 00:45:03.820
actually the target inspector.

00:45:03.820 --> 00:45:07.840
Because this is where-- you don't tend to
spend a lot of time there all the time,

00:45:07.860 --> 00:45:10.570
but you tend to deep dive
into it every once in a while,

00:45:10.640 --> 00:45:12.800
because you need to get your
project building or you want

00:45:12.800 --> 00:45:15.860
to change what architecture,
you want to change something about it,

00:45:15.860 --> 00:45:17.320
set up or release, build, et cetera.

00:45:17.420 --> 00:45:20.210
So we wanted to make a lot of
changes that would make it a

00:45:20.210 --> 00:45:23.450
lot easier for you to get to
information quickly and efficiently.

00:45:23.540 --> 00:45:27.890
So one of the first things you'll notice
is that we put the categories-- we

00:45:27.940 --> 00:45:31.420
pulled them out of the categories pop-up,
and we put them right into the table.

00:45:31.430 --> 00:45:32.840
And so now we actually
have an outline view.

00:45:32.840 --> 00:45:34.090
You can collapse categories.

00:45:34.100 --> 00:45:38.960
It's much easier to see just the
build settings you want to look at.

00:45:39.370 --> 00:45:42.200
Now the next thing I should show you is
that even though it's an outline view,

00:45:42.200 --> 00:45:45.160
we still support the
searching and filtering.

00:45:45.160 --> 00:45:49.900
So for example,
type debug and I see just the build

00:45:49.900 --> 00:45:53.910
settings that deal with debug,
but they're still grouped by category.

00:45:54.040 --> 00:45:56.040
So once again,
you can just focus in on one

00:45:56.120 --> 00:46:00.180
category and it's much easier to see.

00:46:02.180 --> 00:46:03.690
Now if we go ahead and
look at the filter field,

00:46:03.710 --> 00:46:04.690
we've also improved that.

00:46:04.780 --> 00:46:08.760
Previously in Xcode 2,
what we did is we allowed you to just

00:46:08.760 --> 00:46:14.160
search on an amalgam of the description,
the name, and the effective value.

00:46:14.270 --> 00:46:17.570
Now we also let you search on
the definition and the category,

00:46:17.570 --> 00:46:20.210
but in addition,
we also added the menu so you can

00:46:20.210 --> 00:46:22.270
just search on one of those criteria.

00:46:22.500 --> 00:46:24.560
And so we think that's going
to be a lot better for people

00:46:24.560 --> 00:46:25.940
when they want to find things.

00:46:25.940 --> 00:46:27.600
For example, warnings.

00:46:27.740 --> 00:46:30.180
You can see here we're just
looking at the one group.

00:46:30.180 --> 00:46:32.090
the one category.

00:46:34.750 --> 00:46:38.020
So actually let's go back and one more
thing I wanted to say is that we've

00:46:38.020 --> 00:46:42.760
replaced the categories pop-up if
you use Xcode 2 with the show pop-up.

00:46:42.760 --> 00:46:47.000
And we got rid of all the category items
because they weren't needed anymore,

00:46:47.030 --> 00:46:49.610
but we still have,
you can show all settings,

00:46:49.660 --> 00:46:53.190
settings defined at this level
and user-defined settings.

00:46:54.800 --> 00:46:58.660
So for example, here are all the settings
set in this project.

00:46:58.800 --> 00:47:01.520
So let's go back to all settings.

00:47:01.640 --> 00:47:06.090
In the search pop-up,
if you can select category,

00:47:09.390 --> 00:47:12.080
and type in "warnings."
So you see here now,

00:47:12.080 --> 00:47:14.040
we're just looking at one category.

00:47:14.070 --> 00:47:15.440
And it's great.

00:47:15.500 --> 00:47:17.970
In this case, we can see all the
settings here on one thing.

00:47:18.100 --> 00:47:20.940
But it's kind of hard to
see exactly what I have set.

00:47:20.980 --> 00:47:22.370
They're kind of spaced apart.

00:47:22.380 --> 00:47:23.470
They're not grouped together.

00:47:23.480 --> 00:47:25.520
It would be great to group
them together to get them

00:47:25.520 --> 00:47:26.780
more organized by their value.

00:47:26.920 --> 00:47:30.660
Well, in Xcode 3,
now you can click on the Value column,

00:47:30.690 --> 00:47:31.360
and there they are.

00:47:31.540 --> 00:47:32.780
They're all grouped at the top.

00:47:32.780 --> 00:47:34.430
You can see exactly what you have set.

00:47:34.500 --> 00:47:37.980
And if you want to go back to
grouping by alphabetical titles,

00:47:38.160 --> 00:47:40.320
you can just click on the titles.

00:47:40.400 --> 00:47:45.440
And the nice thing is that if we turn
off the warnings and show you everything,

00:47:45.440 --> 00:47:50.490
we actually keep these grouped by
category as you're sorting on them.

00:47:50.780 --> 00:47:54.550
So for example, if he clicks on Value,
you'll notice that we're still

00:47:54.610 --> 00:47:57.160
keeping the categories grouped
for you to make it really easy to

00:47:57.160 --> 00:47:59.530
understand what you're looking at.

00:48:01.190 --> 00:48:04.190
So if we look now down at the bottom,
what we used to have is we

00:48:04.190 --> 00:48:07.330
used to have an edit button
and a plus and a minus button.

00:48:07.440 --> 00:48:08.810
And there were more things
that we needed to add.

00:48:08.900 --> 00:48:11.140
For example,
the per architecture settings

00:48:11.710 --> 00:48:13.270
that Chris talked about.

00:48:13.520 --> 00:48:18.300
So what we decided to do is
when you have an item selected,

00:48:18.300 --> 00:48:23.500
we just wanted to have one kind
of pop-up menu that you could use

00:48:23.580 --> 00:48:26.390
to act on that selected setting.

00:48:26.420 --> 00:48:27.590
So for example,
here if we look at the prefix file,

00:48:29.180 --> 00:48:30.520
prefix header, sorry.

00:48:30.600 --> 00:48:32.630
And if you go ahead and click,
you'll see that now there are a number

00:48:32.650 --> 00:48:35.260
of-- click on the menu and there's
a number of options you can do.

00:48:35.280 --> 00:48:36.910
You can edit and delete.

00:48:37.120 --> 00:48:40.760
You could edit that setting, for example,
and that will bring up the sheet.

00:48:40.780 --> 00:48:42.800
And you can type in things here.

00:48:42.920 --> 00:48:45.340
At this time,
you could also go there and you could

00:48:45.420 --> 00:48:47.670
delete the setting defined at this level.

00:48:47.780 --> 00:48:50.660
You could also add
per-architecture settings and

00:48:50.660 --> 00:48:53.340
add per-user defined settings.

00:48:53.340 --> 00:48:55.780
One note about per-architecture settings.

00:48:55.780 --> 00:48:57.350
We'll be talking about this
more in other sessions,

00:48:57.360 --> 00:49:00.890
but I should note that we actually
look at the build setting and we will

00:49:00.890 --> 00:49:04.090
either have it enabled or disabled
depending on what the build setting is.

00:49:04.210 --> 00:49:06.020
So we don't allow you to set
a per-architecture setting

00:49:06.020 --> 00:49:08.200
when it makes no sense.

00:49:09.710 --> 00:49:14.420
So if we actually go and
select Prefix Header,

00:49:14.460 --> 00:49:19.100
we're now using the new AppKit style
of editing in tables and outline views.

00:49:19.100 --> 00:49:21.960
All you need to do is select
and click in the cell you want

00:49:21.960 --> 00:49:23.040
to edit and you're right in.

00:49:23.040 --> 00:49:27.070
It's very Finder-like, it's very simple,
and we think you'll really like it.

00:49:27.730 --> 00:49:31.480
So in doing all this,
we also realized that we really wanted

00:49:31.560 --> 00:49:35.510
to expand the kind of help information
that we had for build settings.

00:49:35.580 --> 00:49:39.450
And that little split view we
had just wasn't going to cut it.

00:49:39.480 --> 00:49:41.380
There was just too much
we wanted to show you,

00:49:41.380 --> 00:49:44.160
too much we wanted to link back to,
and we wanted more structure.

00:49:44.420 --> 00:49:47.160
So what we did instead is we just
got on the research assistant train.

00:49:47.160 --> 00:49:50.750
And so now you can click on research
assistant and we'll actually track

00:49:50.750 --> 00:49:52.460
with the selected build setting.

00:49:52.760 --> 00:49:55.490
And you can see right now,
just as a beginning,

00:49:55.490 --> 00:49:57.580
we show you the actual build setting.

00:49:57.600 --> 00:50:01.820
So you can see the name and an abstract,
the help text description.

00:50:01.850 --> 00:50:04.500
But in the future,
we definitely want to flesh that out

00:50:04.500 --> 00:50:08.060
with both deprecation information,
related build settings,

00:50:08.070 --> 00:50:10.360
related documentation,
even potentially sample code.

00:50:16.160 --> 00:50:20.040
So I've been at Xcode a long time.

00:50:20.040 --> 00:50:23.420
I actually worked on
Project Builder before Xcode,

00:50:23.450 --> 00:50:24.760
before Project Builder
with Xcode or whatever.

00:50:24.760 --> 00:50:27.970
But one of the things we did when
we moved to Xcode is we started

00:50:28.000 --> 00:50:29.720
showing you effective values.

00:50:30.120 --> 00:50:33.690
And this was great because you could see
what things were going to actually be.

00:50:33.930 --> 00:50:35.300
It was much,
in some ways it was much better

00:50:35.300 --> 00:50:36.460
than showing the definitions.

00:50:36.510 --> 00:50:39.820
But the flip side was there were times
when you wanted to see the definitions

00:50:39.880 --> 00:50:43.060
because either it was clearer because
of the structure or you may have had

00:50:43.060 --> 00:50:44.870
one build setting related to another.

00:50:45.510 --> 00:50:47.600
And while it's true that
when you edit you can see the

00:50:47.600 --> 00:50:51.170
definition of what you're editing,
that isn't really useful when you want to

00:50:51.170 --> 00:50:52.900
see all your settings kind of in context.

00:50:52.900 --> 00:50:56.600
So now what you can do is you can
control click on the table itself

00:50:56.600 --> 00:50:58.590
and we give you two new options.

00:50:58.590 --> 00:51:00.190
The first is show definitions.

00:51:00.250 --> 00:51:03.340
What this allows you to do if you
select it is that we'll actually change

00:51:03.340 --> 00:51:06.120
over and show you all the definitions.

00:51:06.300 --> 00:51:09.350
And you'll notice that we've also
gone through and made the pop-ups

00:51:09.350 --> 00:51:11.470
and the checkboxes strings.

00:51:11.470 --> 00:51:14.400
And while it doesn't work in
the preview you have right now,

00:51:14.920 --> 00:51:17.580
the intention for the GM is that
you would also be able to set

00:51:17.700 --> 00:51:20.890
things like pop-ups and strings
to other build setting values.

00:51:20.890 --> 00:51:25.780
So you can get some of the value
of config files where you could set

00:51:26.060 --> 00:51:29.910
a yes or no value to another build
setting right in the inspector.

00:51:29.920 --> 00:51:33.300
The other thing we added was we added
the ability to show you the raw names

00:51:33.300 --> 00:51:37.030
because sometimes you're dealing with
a config file where you need to pass

00:51:37.030 --> 00:51:39.090
something to Xcode build or a script.

00:51:39.110 --> 00:51:43.170
And so now you can do show setting names
and we actually show you the settings.

00:51:44.380 --> 00:51:46.720
So the nice thing is is that
during all of this research

00:51:46.720 --> 00:51:48.560
assistance is still working for you.

00:51:48.680 --> 00:51:52.210
So if you get confused by the raw name
and you know it by the title or you know

00:51:52.210 --> 00:51:55.040
it by the title but not the raw name you
can always look at research assistant

00:51:55.040 --> 00:51:57.750
and it will have all the information.

00:52:00.040 --> 00:52:01.970
So let's go ahead.

00:52:01.990 --> 00:52:03.130
I think we wanted to change.

00:52:03.140 --> 00:52:04.220
Did you change the build setting?

00:52:04.280 --> 00:52:04.720
Yeah.

00:52:04.770 --> 00:52:06.190
Excellent.

00:52:06.290 --> 00:52:10.340
So one of the other problems is that when
you go in and you change build settings,

00:52:10.370 --> 00:52:11.320
sometimes it's kind of hard.

00:52:11.320 --> 00:52:12.940
You're going through,
you're trying a bunch of stuff,

00:52:12.970 --> 00:52:14.020
and you're like, oh, that worked.

00:52:14.050 --> 00:52:15.320
Oh, that gave me the result I wanted.

00:52:15.340 --> 00:52:16.920
That didn't quite work.

00:52:17.010 --> 00:52:18.550
And you might want to go back and forth.

00:52:18.690 --> 00:52:20.680
And so that's where snapshots
can be really useful.

00:52:20.680 --> 00:52:24.470
So what we've been doing this
whole time is doing a bunch of

00:52:24.470 --> 00:52:28.400
snapshots just to kind of show you
what the possibilities are here.

00:52:28.400 --> 00:52:30.160
And you'll notice here
with the snapshot windows,

00:52:30.160 --> 00:52:31.570
we have a list of the snapshots.

00:52:31.610 --> 00:52:33.570
And they each have a
name that you can set.

00:52:33.630 --> 00:52:35.600
In fact,
we can rename this one right now to say,

00:52:35.600 --> 00:52:37.100
made build setting change.

00:52:37.210 --> 00:52:38.270
You can also provide comments.

00:52:38.480 --> 00:52:42.580
And we also give you the date and
where it was actually archived.

00:52:42.650 --> 00:52:44.230
So let's go ahead and
choose one of these.

00:52:44.240 --> 00:52:47.510
And we're going to want to-- after he.

00:52:48.250 --> 00:52:49.820
So let's go choose one.

00:52:49.850 --> 00:52:51.450
We can go ahead and
we can show the files.

00:52:51.680 --> 00:52:58.400
Now, as you've probably seen in
some of the other demos,

00:52:59.360 --> 00:53:04.510
Once Chris decides which one he
wants to look at... This one.

00:53:05.100 --> 00:53:07.340
We can actually look at the
different types of files.

00:53:07.470 --> 00:53:09.810
And what you may have seen in the
demos before is that not only can

00:53:09.860 --> 00:53:13.980
we show you differences here with
like header files and source files,

00:53:14.030 --> 00:53:16.870
is we can also show nib files and
more importantly for this demo,

00:53:17.040 --> 00:53:19.500
we can show you the project file changes.

00:53:19.670 --> 00:53:23.390
So for example,
here's a .m file and you can see this

00:53:23.390 --> 00:53:26.000
is where we actually moved some code.

00:53:26.000 --> 00:53:30.210
We also did some white space
changing when we put in the F1.

00:53:32.420 --> 00:53:34.720
So if we go ahead and we
look at the PBX project,

00:53:34.720 --> 00:53:35.760
you see, there we go.

00:53:35.760 --> 00:53:38.990
There's where Chris added
in his new warning.

00:53:39.060 --> 00:53:41.480
And we think this will be really
helpful because one of the things that

00:53:41.480 --> 00:53:44.730
we're working hard to do is we want to
make it really easy to understand what

00:53:44.850 --> 00:53:48.290
changes you're making to your project
and how those are affecting you.

00:53:48.350 --> 00:53:52.100
And while this isn't the complete answer,
we hope this is a step along the

00:53:52.210 --> 00:53:56.280
way to getting to a clearer Xcode,
a little bit that's more transparent

00:53:56.280 --> 00:53:57.960
and easier for you to use.

00:53:58.180 --> 00:54:02.300
And then finally, yes, I know Chris,
I know, we want to restore.

00:54:02.300 --> 00:54:06.100
So if you've ever reverted a project,
one thing to note about restore is this

00:54:06.100 --> 00:54:09.000
is going to go back and that's not a bug,
it's actually intentional.

00:54:09.000 --> 00:54:11.880
Just like when we revert a project,
we're tearing down the project

00:54:11.930 --> 00:54:13.480
entirely and we're bringing it back up.

00:54:13.480 --> 00:54:15.860
And see, there it is.

00:54:16.040 --> 00:54:21.770
Thank you, Scott.

00:54:29.500 --> 00:54:33.600
We've made a couple of other workflow
improvements that you may enjoy in

00:54:33.600 --> 00:54:36.500
the course of working on Xcode 3.0.

00:54:36.500 --> 00:54:39.700
We'll probably make more
before we get to the final.

00:54:39.700 --> 00:54:41.900
We've got a little time
before Leopard ships.

00:54:42.020 --> 00:54:44.000
We need to get the bugs
out of this version.

00:54:44.000 --> 00:54:46.240
Obviously,
it's a developer preview and we

00:54:46.240 --> 00:54:49.400
have to smooth off some of the
rough edges on what we've done,

00:54:49.440 --> 00:54:51.390
but we also want to do a
little bit more for you.

00:54:53.350 --> 00:54:58.150
We have added a project compatibility
setting in the project Git info box.

00:54:58.230 --> 00:55:00.910
On any project,
you can set whether you want this to

00:55:01.010 --> 00:55:05.300
be an Xcode 3.0 project or whether
you want it to be compatible with 2.x.

00:55:05.300 --> 00:55:10.710
And if you set it compatible with 2.x,
anytime you use a 3.0 feature

00:55:10.710 --> 00:55:15.040
that won't work on 2.x,
an alert box will come up and tell

00:55:15.040 --> 00:55:19.540
you that you can change the project
compatibility to 3.0 and take the

00:55:19.560 --> 00:55:21.400
change or you can cancel the change.

00:55:21.400 --> 00:55:24.870
So you know if you're making a change,
that will make your project

00:55:24.870 --> 00:55:26.760
incompatible with 2.x.

00:55:26.760 --> 00:55:31.520
That's going to be even more important
when we get 2.x running on Leopard,

00:55:31.520 --> 00:55:35.870
so you can have Xcode 2.x and
Xcode 3.0 running side by side,

00:55:35.880 --> 00:55:38.000
sharing the same projects.

00:55:39.400 --> 00:55:41.540
Second thing is,
you saw a little bit of it,

00:55:41.540 --> 00:55:45.800
we can now search in nib files
in the Project Find dialog.

00:55:45.850 --> 00:55:50.910
If you have key value coding
constants in your nib files,

00:55:50.910 --> 00:55:52.690
Project Find will find them as well.

00:55:52.700 --> 00:55:57.080
So if you're looking for a method name,
the nib files are completely indexed

00:55:57.240 --> 00:56:01.860
and anything you can find in the index,
you can find in Project Find and

00:56:01.860 --> 00:56:04.400
that includes nib files.

00:56:04.420 --> 00:56:07.010
We've added a recent files menu.

00:56:11.310 --> 00:56:14.190
Now this is under a user default.

00:56:14.300 --> 00:56:17.580
You go to the expert preferences setting
and you read the first line there and

00:56:17.580 --> 00:56:18.990
it will tell you how to turn it on.

00:56:19.000 --> 00:56:20.190
I won't.

00:56:20.250 --> 00:56:24.650
This is the standard Cocoa recent files
manual and you'll find that for program

00:56:24.650 --> 00:56:27.160
editing it is to some degree suboptimal.

00:56:27.380 --> 00:56:29.120
Cocoa throttles it to 10 entries.

00:56:29.200 --> 00:56:35.290
You can set another standard NS document
defaults right to increase it to 50,

00:56:35.290 --> 00:56:37.200
but every file you touch
will be put in here.

00:56:37.200 --> 00:56:40.200
We're going to do a better job
on this by the release product,

00:56:40.200 --> 00:56:43.360
but in case you want a
recent files menu in Xcode,

00:56:43.360 --> 00:56:47.980
you can in Xcode 3.0,
you can turn on this expert preference

00:56:47.980 --> 00:56:50.430
and get the recent files menu in Xcode.

00:56:50.690 --> 00:56:55.200
We've also fixed the doc menu so
that you can pop up the doc menu and

00:56:55.200 --> 00:56:59.640
you get the full list of projects
and windows inside your doc menu,

00:56:59.790 --> 00:57:02.310
just like any other application.

00:57:04.940 --> 00:57:08.440
These are minor workflow improvements,
but from the email I see and from

00:57:08.440 --> 00:57:12.600
the duplicate bug reports I process,
these things are just annoying people

00:57:12.600 --> 00:57:16.910
and we want to get as many annoying
things as we can out of the way.

00:57:16.990 --> 00:57:20.830
To streamline your workflow:
acquiring and editing projects,

00:57:20.850 --> 00:57:24.180
building and debugging,
rewriting and researching,

00:57:24.200 --> 00:57:26.380
reconfiguring and
restoring your projects,

00:57:26.410 --> 00:57:30.180
we want to allow you to focus on your
work and to find and filter to get

00:57:30.180 --> 00:57:32.180
to the information you need quickly.