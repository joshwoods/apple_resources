WEBVTT

00:00:11.000 --> 00:00:12.650
Good morning everyone.

00:00:12.650 --> 00:00:16.300
Welcome to session 203,
an introduction to ImageKit.

00:00:16.300 --> 00:00:19.900
My name is Werner Neubrand and
I'm one of the ImageKit engineers.

00:00:20.310 --> 00:00:22.500
Throughout this session we
want to cover a couple of

00:00:22.500 --> 00:00:27.750
questions like what is ImageKit,
why is Apple doing something like that,

00:00:27.810 --> 00:00:31.690
and how can you use it,
and how did we implement it?

00:00:31.920 --> 00:00:34.040
So ImageKit,
to answer the first question,

00:00:34.040 --> 00:00:39.760
is really a new framework that we are
going to introduce in Mac OS X Leopard.

00:00:39.820 --> 00:00:44.780
It's an image handling framework,
so everything related to images

00:00:45.100 --> 00:00:48.110
might fit into this new framework.

00:00:48.250 --> 00:00:52.530
Well,
if you look at today's digital content,

00:00:52.570 --> 00:00:53.750
we see actually more and more.

00:00:53.770 --> 00:00:55.340
So we see more and more images.

00:00:55.400 --> 00:00:58.100
There are more and more digital cameras.

00:00:58.150 --> 00:01:01.160
Cell phones are capable of taking images.

00:01:01.260 --> 00:01:05.780
Even on the iPod you can store
your digital images and look at

00:01:05.780 --> 00:01:08.990
those and work with them later on.

00:01:09.460 --> 00:01:14.100
In addition to the digital content,
we also see more and more

00:01:14.100 --> 00:01:15.800
digital applications.

00:01:15.830 --> 00:01:19.890
Like if you look at our
iLife Suite and Aperture,

00:01:20.030 --> 00:01:21.340
for example.

00:01:21.370 --> 00:01:22.440
But there's much more.

00:01:22.440 --> 00:01:25.770
I mean all the hundreds of
applications that are out there,

00:01:25.770 --> 00:01:32.880
like shareware to full-blown
packages that deal with images.

00:01:33.500 --> 00:01:38.270
So we were asking ourselves,
like inside Apple,

00:01:38.430 --> 00:01:43.720
we have applications that
do have common needs.

00:01:44.100 --> 00:01:46.210
And what are these common needs?

00:01:46.350 --> 00:01:49.880
Well, one is really finding
and browsing images.

00:01:50.250 --> 00:01:54.300
So if you look at iPhoto,
iPhoto is capable of handling,

00:01:54.300 --> 00:01:58.100
similar to Aperture,
a large set of images.

00:01:58.110 --> 00:02:00.870
And the user wants to browse these.

00:02:00.980 --> 00:02:05.560
You want to display all the images
as thumbnails in a very efficient,

00:02:05.640 --> 00:02:07.400
fast way.

00:02:07.400 --> 00:02:10.710
And ideally, that should be easy to use.

00:02:11.060 --> 00:02:13.080
And even if you look at
the new mail application,

00:02:13.080 --> 00:02:18.500
the new mail application with the create
stationary function has a way to import

00:02:18.690 --> 00:02:25.580
to browse iPhoto library and again,
one need is you have a lot of images,

00:02:25.660 --> 00:02:27.440
you want to browse those.

00:02:27.930 --> 00:02:33.720
Another thing that they have in common
is that you display a single image

00:02:33.890 --> 00:02:36.200
and you want to edit the single image.

00:02:36.350 --> 00:02:42.690
So images, and we are relying with
this new framework ImageKit,

00:02:42.690 --> 00:02:49.800
we are relying on ImageIO that
was introduced in Mac OS X Tiger.

00:02:49.800 --> 00:02:53.780
So this great framework deals
with all kind of image formats.

00:02:54.060 --> 00:03:00.310
So JPEG to TIFF, GIF, and even RAW files.

00:03:01.430 --> 00:03:06.060
Now, applications like, again, aperture,
eye photo,

00:03:06.060 --> 00:03:11.590
and even the free preview application
allow you to display these images.

00:03:11.590 --> 00:03:16.210
And not only displaying,
but you can also do editing.

00:03:16.410 --> 00:03:19.030
It could be in a very limited way.

00:03:19.220 --> 00:03:22.960
Preview has just a couple of
sliders where you can change a

00:03:22.960 --> 00:03:27.300
couple of parameters to actually
see eye core image filters.

00:03:27.300 --> 00:03:33.890
Or more advanced editing
in aperture and eye photo.

00:03:35.280 --> 00:03:40.700
Now, if we look at these two basic needs,

00:03:40.960 --> 00:03:43.030
This actually might
be a great book title.

00:03:43.250 --> 00:03:44.440
Actually, it is out there.

00:03:44.440 --> 00:03:45.290
You can buy it.

00:03:45.400 --> 00:03:50.000
But I think it's not a great idea
to let you and also us inside

00:03:50.090 --> 00:03:53.300
Apple reinvent the wheel again and again.

00:03:53.440 --> 00:03:58.210
So really we want to
create a set of functions,

00:03:58.240 --> 00:04:04.300
set of components that might be reusable
throughout different applications.

00:04:04.480 --> 00:04:07.660
And really bundle all
these things together.

00:04:07.660 --> 00:04:12.450
So create something that
can be used throughout,

00:04:12.850 --> 00:04:16.300
within Apple and hopefully
within your application.

00:04:17.600 --> 00:04:23.430
Now, the new ImageKit framework is
based on known and existing and

00:04:23.430 --> 00:04:25.740
new technologies within Apple.

00:04:25.880 --> 00:04:30.250
So we are using Quartz, OpenGL,
Core Image, and the wonderful new

00:04:30.270 --> 00:04:32.410
Core Animation framework.

00:04:33.120 --> 00:04:37.090
If you look at the overall picture,
I guess like we are part

00:04:37.090 --> 00:04:40.480
of graphics and media,
so we are sitting on top of all

00:04:40.480 --> 00:04:42.940
these and using those services.

00:04:42.990 --> 00:04:47.830
But we're also using a lot of the
application frameworks like Cocoa and

00:04:47.880 --> 00:04:51.850
all our new APIs are Objective-C based.

00:04:53.150 --> 00:04:55.950
If we look at the different
components that we have,

00:04:55.950 --> 00:04:59.330
again, looking at the different needs,
looking at the different components,

00:04:59.370 --> 00:05:03.910
well, the first component we
have is an image view.

00:05:04.120 --> 00:05:06.840
If we look at the different
components that we have,

00:05:06.840 --> 00:05:10.200
again, looking at the different needs,
looking at the different components,

00:05:10.240 --> 00:05:14.820
well, the first component we
have is an image view.

00:05:27.770 --> 00:05:30.540
If we look at the different
components that we have,

00:05:30.590 --> 00:05:33.940
again, looking at the different needs,
looking at the different components,

00:05:33.940 --> 00:05:38.520
well, the first component we
have is an image view.

00:05:40.570 --> 00:05:45.810
We do support, and if you look at all our
new MacBook Pros or MacBooks,

00:05:45.810 --> 00:05:47.860
they all come with a built-in eyesight.

00:05:47.950 --> 00:05:49.260
So we do support that as well.

00:05:49.300 --> 00:05:57.500
So applications today like Address Book,
iChat, Access Panel, and so on,

00:05:57.500 --> 00:06:00.940
they all use this built-in camera.

00:06:00.940 --> 00:06:04.600
But in the past,
they had all their own implementation.

00:06:05.990 --> 00:06:10.640
So now with ImageKit,
we can all come back and produce a lot

00:06:10.800 --> 00:06:14.600
of code throughout these applications,
but also make it available to

00:06:14.630 --> 00:06:19.600
you so very easily you can take
advantage of a picture taker.

00:06:20.240 --> 00:06:27.200
Then the slideshow which was built in to
make OS X Tiger and used by various apps.

00:06:27.200 --> 00:06:31.200
We also make that as part
of the ImageKit framework.

00:06:31.200 --> 00:06:33.510
And actually we have a couple of others.

00:06:34.250 --> 00:06:38.120
So let's look at the overall picture.

00:06:38.120 --> 00:06:41.000
We merge all these things,
all these components,

00:06:41.030 --> 00:06:44.630
put that into the ImageKit,
and let's go to the first component,

00:06:44.640 --> 00:06:46.160
the image view.

00:06:47.300 --> 00:06:49.480
The image view,
the definition could be like an

00:06:49.480 --> 00:06:54.800
image view object displays a single
image in a frame and can optionally

00:06:54.800 --> 00:06:56.900
allow a user to drag in an image.

00:06:56.920 --> 00:06:59.960
Well, this might sound familiar to
you because if you look at the

00:06:59.960 --> 00:07:05.560
definition of an NS image view,
it's very similar.

00:07:05.630 --> 00:07:08.830
So what is different?

00:07:08.910 --> 00:07:12.060
First of all, we are

00:07:12.280 --> 00:07:17.160
On purpose not using NSImage as
an initializer to that image view.

00:07:17.190 --> 00:07:28.190
We are using CG ImageRef and metadata and
the properties or you pass in the URL.

00:07:30.170 --> 00:07:33.920
We have additional functions that a
regular image viewer does not have,

00:07:33.920 --> 00:07:38.540
like support for zoom and rotation.

00:07:38.800 --> 00:07:43.630
and we do handle user selections
for copying and cropping.

00:07:43.720 --> 00:07:47.940
And you can be sure that we will have
a little bit more whatever tiger,

00:07:47.940 --> 00:07:50.180
sorry, whatever leopard ships.

00:07:52.380 --> 00:07:56.600
So the current choices that you
have today for displaying images

00:07:56.630 --> 00:08:03.870
is NSImageView in a regular
UI window or panel that you have

00:08:03.990 --> 00:08:05.820
where you display an icon or so.

00:08:05.880 --> 00:08:08.240
Then NSImageView is
actually the perfect choice.

00:08:08.260 --> 00:08:13.210
It's robust, it's lightweight,
and you were using that in the past,

00:08:13.420 --> 00:08:14.720
great.

00:08:14.790 --> 00:08:19.520
If you have no need to edit the image or
zoom or manipulate the image otherwise,

00:08:19.550 --> 00:08:21.500
NSImageView is perfect.

00:08:21.670 --> 00:08:27.160
You could do your own window class
and do everything on your own.

00:08:27.200 --> 00:08:30.070
But really with Leopard we
want to give you a third choice

00:08:30.250 --> 00:08:36.010
and use the IKImageView that,
as you will see, will be very easy to use

00:08:36.540 --> 00:08:38.870
and it's quite powerful.

00:08:40.200 --> 00:08:44.140
So the APIs that we
have for this new class,

00:08:44.370 --> 00:08:46.860
one is setting the image.

00:08:46.860 --> 00:08:51.880
Well, as I mentioned before,
we rely on you passing in a CG image

00:08:51.940 --> 00:08:57.880
ref and property dictionary,
basically the metadata for that image.

00:08:57.890 --> 00:08:59.440
Where do you get those from?

00:08:59.450 --> 00:09:02.620
Very easy, you get those from ImageIO.

00:09:04.280 --> 00:09:09.890
For certain type of files,
it could make sense to use a URL.

00:09:10.670 --> 00:09:12.590
And actually you can
do that with all files,

00:09:12.590 --> 00:09:16.540
but it makes a lot of sense
to do that with raw images.

00:09:16.650 --> 00:09:23.150
The reason for that is that there can be
some special raw processing can be done

00:09:23.480 --> 00:09:27.700
even before getting to the CG image ref.

00:09:27.820 --> 00:09:31.640
So you're losing a little bit

00:09:32.010 --> 00:09:36.760
The internal magic whenever you just
create the CG image first and then

00:09:36.820 --> 00:09:39.600
pass in the image with the dictionary.

00:09:39.650 --> 00:09:44.400
So ideally for raw files I would
highly recommend to use the URL.

00:09:46.390 --> 00:09:48.910
Now, there should also be a
way to get back the image,

00:09:48.910 --> 00:09:49.800
and you do that.

00:09:49.800 --> 00:09:53.910
In this case,
you always get back a CG image ref.

00:09:54.540 --> 00:09:58.740
And you can ask for the
metadata for that image.

00:09:58.770 --> 00:10:02.730
And both of these, again,
put that into a CG image

00:10:02.770 --> 00:10:09.980
destination method and use image
I/O to write it out to disk.

00:10:11.420 --> 00:10:13.150
The image has some properties.

00:10:13.160 --> 00:10:15.540
The image view has some properties.

00:10:15.650 --> 00:10:21.680
Now look at that declaration and really
we are using with this new class also new

00:10:21.680 --> 00:10:26.140
features of the objective C2O language.

00:10:26.210 --> 00:10:31.450
So we're using property,
which means that in order to access,

00:10:31.450 --> 00:10:33.790
like for example, the delegate,
you could just do

00:10:34.180 --> 00:10:36.340
view.delegate equal to this.

00:10:36.360 --> 00:10:39.920
Or in order to get it,
you can say my delegate

00:10:39.920 --> 00:10:42.200
equal to view.delegate.

00:10:42.230 --> 00:10:47.810
Or hiding behind this is really
also accesses like you can ask

00:10:47.910 --> 00:10:50.640
for the delegate or set delegate.

00:10:50.780 --> 00:10:53.570
You'll see that in the
sample code in a little bit.

00:10:54.290 --> 00:10:56.150
So we have a delegate,
we have a zoom factor,

00:10:56.210 --> 00:10:58.500
and rotation angle.

00:10:58.590 --> 00:11:01.230
And we have a couple of actions.

00:11:01.350 --> 00:11:06.610
Actions are related to
zooming and rotation.

00:11:06.730 --> 00:11:08.670
So there's for example an
easy way to do a zoom to fit.

00:11:08.840 --> 00:11:13.520
Just one single call and the view
will make sure that the image

00:11:13.520 --> 00:11:17.960
that you passed in will just
display in a zoom to fit mode.

00:11:19.120 --> 00:11:22.460
And we do support a couple of tools.

00:11:22.550 --> 00:11:24.660
This number is like the
basic set right now,

00:11:24.660 --> 00:11:28.540
and we may have more
tool modes in the future.

00:11:28.570 --> 00:11:31.500
And again,
the current tool mode is a property.

00:11:31.570 --> 00:11:35.660
So it can query the mode
or set it very easily.

00:11:35.830 --> 00:11:40.440
And mainly we have the move
tool so you can pan around.

00:11:40.590 --> 00:11:43.670
You have a selection
tool for doing copies.

00:11:43.850 --> 00:11:46.480
We have a selection
tool for doing a crop.

00:11:46.740 --> 00:11:49.180
The UI is slightly different,
as you will see in a bit.

00:11:49.400 --> 00:11:55.090
And we do support an
easy way to do rotation.

00:11:56.050 --> 00:12:00.060
So actually let me go to the
demo machine and show you

00:12:00.060 --> 00:12:03.100
this IK image view in action.

00:12:08.200 --> 00:12:22.000
[Transcript missing]

00:12:44.510 --> 00:12:53.070
Okay, we have the same thing on demo A,
if you could fix demo C.

00:12:53.660 --> 00:12:57.220
So let me start with
a simple application.

00:12:57.230 --> 00:13:02.380
And we display an image that
we have in the resource,

00:13:02.380 --> 00:13:07.800
or actually in the bundle
path of that application.

00:13:08.170 --> 00:13:13.660
You see we have zooming
and a kind of really smooth

00:13:14.450 --> 00:13:19.410
animation do that and internally as you
can imagine we are using the new core

00:13:19.420 --> 00:13:25.660
animation classes and so it's very easy
to do this with coordination because

00:13:25.660 --> 00:13:29.660
actually the the code that I need to
write in order to do this this this

00:13:29.660 --> 00:13:34.530
animated zoom is nothing so all I have
to do is like I have a start state

00:13:34.530 --> 00:13:40.580
a gold state and basically set the
the frame to a new value and what will

00:13:40.580 --> 00:13:43.890
happen is it does it automatically.

00:13:44.840 --> 00:13:56.150
So very easy to do this.

00:14:04.000 --> 00:14:06.760
Now we can go back to the machine.

00:14:06.790 --> 00:14:14.360
So again, the animation for this
really comes for free.

00:14:14.360 --> 00:14:17.920
There's no code to write,
and it just happens automatically.

00:14:18.060 --> 00:14:23.770
And then we have the 90-key rotations.

00:14:23.980 --> 00:14:29.210
We have the panning tool,
we have a selection tool.

00:14:29.370 --> 00:14:34.130
To do a copy and a
selection tool to do a crop.

00:14:34.150 --> 00:14:36.220
You see we have a slight
different user interface.

00:14:36.220 --> 00:14:39.630
Again, these things are all done
using core animation.

00:14:39.640 --> 00:14:41.970
So that simply means that when
I switch the tool-- now watch

00:14:42.040 --> 00:14:44.640
this-- it really fades out slightly.

00:14:44.640 --> 00:14:46.540
And again, there's no magic behind that.

00:14:46.540 --> 00:14:49.880
It's just switching the tool mode,
get rid of a layer,

00:14:49.880 --> 00:14:52.650
and the animation happens automatically.

00:14:52.760 --> 00:14:59.720
And then we thought it would be nice
to have a kind of nice rotation mode.

00:15:00.050 --> 00:15:04.140
And we do display an overhead display.

00:15:04.140 --> 00:15:07.500
We display the current
rotation angle and the delta.

00:15:07.590 --> 00:15:12.120
And you see when I rotate the image,
the overall image size grows

00:15:12.150 --> 00:15:14.410
because we do not want to crop.

00:15:14.710 --> 00:15:20.060
And again, just another core animation
layer in the back shows us if we

00:15:20.060 --> 00:15:24.700
would save the image right now,
we would get an image of that size,

00:15:24.700 --> 00:15:27.690
so the overall size.

00:15:28.010 --> 00:15:37.720
And nice thing is also like if I do this
and do a copy and would launch preview,

00:15:37.720 --> 00:15:37.720
it

00:15:42.000 --> 00:15:47.760
Do here a new from clipboard, then yes,
I do get an alpha image.

00:15:47.760 --> 00:15:51.080
So we do the right thing
in this case as well.

00:15:54.900 --> 00:16:00.270
Okay, so let's look at how much code
is really involved in doing this.

00:16:00.450 --> 00:16:03.830
Well, it's only a single file
and that's about all it is.

00:16:03.950 --> 00:16:08.390
Well, this is just the collapsed state.

00:16:10.010 --> 00:16:12.890
Let's look what's really behind it.

00:16:13.020 --> 00:16:16.900
So on the wake from Nib,
what we do is we get

00:16:16.900 --> 00:16:19.900
our path to the image.

00:16:19.990 --> 00:16:26.170
We create the URL and do a
self-open image with an URL.

00:16:26.280 --> 00:16:28.890
And then we do some customization.

00:16:29.010 --> 00:16:33.500
For example, and here again,
look at the new Objective-C 2.0 syntax

00:16:33.500 --> 00:16:38.630
where we do set the current tool mode
and the delegate using the dot notation.

00:16:39.760 --> 00:16:46.600
Opening an image URL is not too
complicated because we are using ImageIO.

00:16:46.600 --> 00:16:50.220
So what we do is create an
image source with the URL.

00:16:50.730 --> 00:16:54.040
Then ask the image source
to create an image at index.

00:16:54.060 --> 00:16:59.490
If you get that image,
then we want to copy the properties.

00:16:59.870 --> 00:17:02.920
And actually for later on,
we also get the type.

00:17:03.050 --> 00:17:04.550
So that's your T-type.

00:17:04.660 --> 00:17:09.200
For example, public.tiff.

00:17:10.900 --> 00:17:17.260
And if we got the image,
then we want to update the image

00:17:17.260 --> 00:17:20.650
view and update the window title.

00:17:21.780 --> 00:17:26.540
So that's all it takes
to display the image.

00:17:26.560 --> 00:17:29.380
Now, a couple of things.

00:17:29.400 --> 00:17:31.420
The tool mode

00:17:34.190 --> 00:17:38.090
When I select one of
the segmented controls,

00:17:38.120 --> 00:17:44.350
it's very easy to set because
all I have to do is directly set

00:17:44.350 --> 00:17:49.620
the tool mode and the view will
update and do the right thing.

00:17:49.750 --> 00:17:54.370
And this here is just a test whether
we do the tool mode setting from a

00:17:54.370 --> 00:17:57.770
menu or segmented control directly.

00:17:58.630 --> 00:18:04.100
Zooming is also not too complicated
because all we do is like,

00:18:04.160 --> 00:18:09.040
K0 is a zoom out,
so we just change the zoom factor,

00:18:09.070 --> 00:18:12.810
zoom in the same, actual size,
just a single method call,

00:18:12.900 --> 00:18:15.870
and zoom to fit,
just a single method call.

00:18:16.150 --> 00:18:19.590
And one thing I didn't show you is really
we do also support the open panel so you

00:18:19.640 --> 00:18:22.390
can open an image directly if you want.

00:18:23.490 --> 00:18:27.000
An interesting way is,
an interesting method that

00:18:27.000 --> 00:18:28.640
I want to show you is this.

00:18:28.680 --> 00:18:32.990
Because right now we have no
automatic resizing the image

00:18:33.310 --> 00:18:35.630
whenever the window size changes.

00:18:35.730 --> 00:18:38.540
So what did I have to do
in order to make that work?

00:18:38.630 --> 00:18:44.900
Well, in theory I just have to call
image view "zoom to fit".

00:18:45.400 --> 00:18:47.420
But you see I'm doing a little bit more.

00:18:47.420 --> 00:18:48.780
So what is all that?

00:18:48.900 --> 00:18:53.840
This is actually just telling
the core animation framework,

00:18:53.840 --> 00:18:55.620
do not animate this.

00:18:55.740 --> 00:19:00.130
Because there are cases where you
want to change a state from A to

00:19:00.130 --> 00:19:02.700
B and you do not want any animations.

00:19:03.390 --> 00:19:07.170
And that's basically what you will
see whenever you resize the window.

00:19:07.350 --> 00:19:14.240
If the view would resize with animation,
it would look really odd a little bit.

00:19:15.130 --> 00:19:17.390
Okay, so that's the image view.

00:19:17.390 --> 00:19:22.290
Now back to the presentation.

00:19:25.320 --> 00:19:27.200
Let's look at the image edit panel.

00:19:27.200 --> 00:19:32.340
The edit panel is just
a regular NS panel.

00:19:32.340 --> 00:19:37.200
It's a floating panel that
handles image adjustments.

00:19:37.440 --> 00:19:43.630
And the current version just displays
the sliders and fields that we are

00:19:43.630 --> 00:19:47.270
using in the current version of preview.

00:19:49.700 --> 00:19:53.660
The panel has a second mode,
second tab that you can go into

00:19:54.150 --> 00:19:56.990
to display an effect script.

00:19:57.220 --> 00:20:02.140
So we have an image effect picker
where you can just select a couple of,

00:20:02.140 --> 00:20:07.910
or an effect of a predefined one
and then apply that to the image.

00:20:08.970 --> 00:20:12.600
And the last tab is for metadata.

00:20:12.690 --> 00:20:16.550
So it's an easy way to display metadata,
especially useful whenever you have

00:20:16.620 --> 00:20:20.640
images from digital cameras that
really have a bunch of metadata.

00:20:20.720 --> 00:20:25.610
Or whenever you decide to
really use IPTC tags inside

00:20:26.070 --> 00:20:28.720
the image to add keywords.

00:20:28.790 --> 00:20:31.550
So you can very easily access that.

00:20:31.960 --> 00:20:34.950
Now the nice thing,
the Edit Panel works very easily,

00:20:34.990 --> 00:20:37.910
seamlessly with Nike ImageView.

00:20:38.360 --> 00:20:42.780
Or works with anything that you
have that just implements an image

00:20:42.840 --> 00:20:47.080
edit panel data source protocol.

00:20:47.760 --> 00:20:52.410
And it's fairly easy to use because
in case of the IK image view,

00:20:52.410 --> 00:20:55.690
all you have to do is set one property.

00:20:56.580 --> 00:21:00.500
For example,
open the panel on a double click

00:21:00.570 --> 00:21:06.180
and whenever you use that property,
then double clicking on the image

00:21:06.180 --> 00:21:08.330
will just bring up the image panel.

00:21:10.110 --> 00:21:13.100
If you want to do it manually,
you can very easily do that.

00:21:13.110 --> 00:21:17.390
And all it takes is you get a
shared instance of the Edit Panel,

00:21:17.390 --> 00:21:20.430
you set the data source.

00:21:21.130 --> 00:21:25.370
And then he would say,
make key and order front,

00:21:25.370 --> 00:21:28.200
and then you would see the panel.

00:21:31.490 --> 00:21:33.750
For the data source,
there are a couple of methods

00:21:33.790 --> 00:21:35.470
that you have to implement.

00:21:35.610 --> 00:21:37.970
Actually, two are required.

00:21:38.110 --> 00:21:42.470
One is you have to be able
to return the entire image.

00:21:42.860 --> 00:21:48.870
And you have to accept a new image,
ideally with metadata.

00:21:49.420 --> 00:21:55.050
Optional methods are:
if you're dealing with very large images

00:21:55.690 --> 00:22:00.120
and you want to use the effects picker,
then if you already have a

00:22:00.230 --> 00:22:03.940
thumbnail within your application,
then we would just ask you,

00:22:03.940 --> 00:22:08.190
"Give me the thumbnail of this
minimum size." And if you have it,

00:22:08.200 --> 00:22:08.530
fine.

00:22:08.650 --> 00:22:14.640
If not, then we would just fall back
taking the entire image and scale

00:22:14.640 --> 00:22:14.640
it down and we will display it.

00:22:16.080 --> 00:22:22.500
And ideally you would also implement
the image properties method

00:22:23.050 --> 00:22:26.750
because then whenever we go to the

00:22:26.800 --> 00:22:41.700
[Transcript missing]

00:22:44.160 --> 00:22:48.700
So the same application and there's
only one line code change in this app.

00:22:48.700 --> 00:22:51.340
And that's basically
whenever I double click,

00:22:51.340 --> 00:22:53.620
we will bring up this panel.

00:22:53.620 --> 00:22:57.820
Now this panel just does
some basic corrections.

00:22:57.820 --> 00:23:00.260
And I guess for this one,
it's pretty good to see

00:23:00.260 --> 00:23:02.400
the sharpness working.

00:23:02.400 --> 00:23:09.260
And yes, you can do all kind of image
manipulations directly in here.

00:23:09.260 --> 00:23:16.670
Or you can switch to the effects
panel and pick a predefined one.

00:23:17.660 --> 00:23:23.090
And here you see we have just
a minimum set of metadata.

00:23:23.430 --> 00:23:26.590
Again, if this image would have come
from your digital camera,

00:23:26.620 --> 00:23:31.020
there's probably a rich set
of metadata like camera model

00:23:31.020 --> 00:23:33.210
and all these kind of things.

00:23:33.900 --> 00:23:40.100
So this is fairly easy to use and
might be quite handy to have this.

00:23:40.240 --> 00:23:45.220
And so we actually were thinking also,
where else can we use it?

00:23:45.310 --> 00:23:51.910
And let me quickly open TextEdit.

00:23:52.360 --> 00:23:55.010
So regular text edit,
I drag in an image and again,

00:23:55.010 --> 00:23:59.260
wouldn't it be nice if I could do some
basic image manipulation in a text edit?

00:23:59.870 --> 00:24:04.260
Actually,
in the hopefully shipping version

00:24:04.260 --> 00:24:10.370
of Leopard we will have that
and we will have things like,

00:24:10.430 --> 00:24:14.020
yeah, I can rotate and again here we
do get some animation that we

00:24:14.180 --> 00:24:18.500
probably do not want so we should
take that off and disable core

00:24:18.500 --> 00:24:21.300
animation to animate the moving.

00:24:22.300 --> 00:24:27.890
And yes, I can go in and I should
be able to do a crop,

00:24:27.890 --> 00:24:34.420
get the image and I should also be able
to do some manipulation directly within

00:24:34.560 --> 00:24:39.780
text edits and that should just work.

00:24:42.060 --> 00:24:43.900
Okay, back to the slides please.

00:24:43.910 --> 00:24:51.170
And now it's time to talk about image
browser and I hand over to Thomas.

00:24:58.110 --> 00:25:00.300
THOMAS GOSSINS: OK,
so I'm Thomas Goossens,

00:25:00.320 --> 00:25:04.040
and I'm working on the
ImageBrother for ImageKit.

00:25:04.150 --> 00:25:09.740
So the ImageBrother is a view
to display and to browse images.

00:25:09.970 --> 00:25:16.140
So displaying images is a usual task
needed by a lot of applications.

00:25:16.150 --> 00:25:21.200
For instance, on Mac,
applications like Spotlight, iPhoto,

00:25:21.280 --> 00:25:24.680
Aperture, of course, and also Mail,
Preview,

00:25:24.690 --> 00:25:30.620
Media Browser for iLife and Pro Apps,
and a lot of third-party applications,

00:25:30.620 --> 00:25:35.220
they sometimes need to
browse and to find images.

00:25:35.490 --> 00:25:40.320
So in the past, if you wanted to browse
images in your app,

00:25:40.330 --> 00:25:44.210
you had to create your own browser.

00:25:44.390 --> 00:25:47.700
And it needed a lot of code
and efforts to do that.

00:25:47.790 --> 00:25:50.790
So with this new image browser, you

00:25:51.030 --> 00:25:55.680
We provide a simple class to
developers who want to browse

00:25:55.680 --> 00:25:58.640
images in their application.

00:25:59.540 --> 00:26:04.730
So the image browser lays
out images within a grid,

00:26:04.730 --> 00:26:10.980
and then users can scroll and zoom in,
zoom out to browse the content.

00:26:11.160 --> 00:26:16.380
This view supports selection,
so users can select one or

00:26:16.380 --> 00:26:21.400
more images with keyboard or
with a graphical selection.

00:26:21.610 --> 00:26:27.000
And the API provides simple
delegate methods to ease the

00:26:27.000 --> 00:26:29.440
drag and drop implementation.

00:26:29.530 --> 00:26:33.380
So it's really easy to create
a simple application where

00:26:33.380 --> 00:26:37.500
users can select pictures,
drag images from the browser,

00:26:37.500 --> 00:26:42.020
or drop images into the browser,
or simply use the drag and drop to

00:26:42.020 --> 00:26:45.750
reorder images inside the browser.

00:26:46.590 --> 00:26:51.440
So here is the appearance
of the image browser.

00:26:51.470 --> 00:26:57.960
In this screenshot,
it displays images with outline, shadows,

00:26:58.000 --> 00:27:00.040
titles, and subtitles.

00:27:00.050 --> 00:27:03.970
But in fact,
the appearance is really customizable.

00:27:04.170 --> 00:27:07.410
You can, for instance,
choose the decorations you want to see.

00:27:07.410 --> 00:27:09.880
So, for instance,
remove shadows or outlines.

00:27:09.900 --> 00:27:13.440
You can also remove titles and subtitles.

00:27:13.760 --> 00:27:18.560
You can change colors for text,
background, outlines, selections.

00:27:18.590 --> 00:27:22.230
And you can also adjust the
margins if you want to see

00:27:22.230 --> 00:27:25.470
more images at the same time,
for instance.

00:27:26.410 --> 00:27:32.790
So there is a lot of implementations of
similar views and developers are always

00:27:32.940 --> 00:27:40.400
facing the same issues when they want to
handle large amounts of images and keep

00:27:40.400 --> 00:27:44.470
good performances and high image quality.

00:27:45.520 --> 00:27:48.580
In fact,
this kind of views are hard to make

00:27:48.580 --> 00:27:55.080
efficient because it needs a lot of
code to create efficient image caching,

00:27:55.190 --> 00:28:00.640
thumbnails with multiple resolutions,
threads for rendering images

00:28:00.680 --> 00:28:03.850
with the best quality,
and a lot of details

00:28:04.040 --> 00:28:08.070
like events handling,
selection, drag and drop, auto scroll,

00:28:08.240 --> 00:28:13.040
accessibility,
and a lot of important details like that.

00:28:13.910 --> 00:28:17.770
So with this image browser,
we want to provide through a simple

00:28:17.820 --> 00:28:26.590
API an efficient and generic browser
that can handle large amounts of images.

00:28:27.140 --> 00:28:33.360
And to be generic and flexible,
the API uses a data source mechanism

00:28:34.130 --> 00:28:37.620
similar to the NS TableView API.

00:28:38.570 --> 00:28:44.380
So the data source is an object
implemented by the client of the API,

00:28:44.380 --> 00:28:48.360
and its role is to provide
the content to display.

00:28:48.390 --> 00:28:52.060
So concretely,
the image browser will ask the images to

00:28:52.060 --> 00:28:55.830
layout and to display to the data source.

00:28:56.020 --> 00:29:03.200
And when the client of the API wants the
image browser to reflect the changes,

00:29:03.340 --> 00:29:07.900
You just have to invoke reload data
and then the image browser will

00:29:07.980 --> 00:29:14.170
automatically reflect the changes
and display the new image set.

00:29:14.430 --> 00:29:18.520
And the data source protocol of the
ImageBrother is really easy to implement

00:29:19.390 --> 00:29:22.290
as only two methods are required.

00:29:22.740 --> 00:29:30.080
So first, like for a usual NS table view,
the image browser needs to know how many

00:29:30.220 --> 00:29:34.660
images it has to lay out and to display.

00:29:35.020 --> 00:29:40.060
So this is done by returning
the image count in number

00:29:40.070 --> 00:29:43.090
of items in image browser.

00:29:43.260 --> 00:29:47.380
And then for each index,
the image browser will ask for an

00:29:47.380 --> 00:29:51.350
object that represents each item.

00:29:51.830 --> 00:29:55.300
So in the second step,
this item object needs to

00:29:55.300 --> 00:29:58.290
respond to these three methods.

00:29:58.610 --> 00:30:03.420
First,
Image UID is an identifier that has to

00:30:03.420 --> 00:30:07.300
be different for each different images.

00:30:07.400 --> 00:30:12.720
It can be, for instance,
an absolute file path, a URL,

00:30:12.720 --> 00:30:15.540
a database index, or anything else.

00:30:15.560 --> 00:30:20.000
It just has to be different
for each different images.

00:30:20.500 --> 00:30:26.530
Then, image representation type and image
representation make the integration

00:30:26.530 --> 00:30:31.270
of the image browser easier as it
lets developers to choose their

00:30:31.520 --> 00:30:37.740
favorite image representation in a
large set of possible representations.

00:30:37.930 --> 00:30:44.580
For instance,
if an item represents a file path or URL,

00:30:44.580 --> 00:30:48.120
you can just return this file
path or this URL and the image

00:30:48.120 --> 00:30:54.310
browser will do the job to load
it and display it when needed.

00:30:54.410 --> 00:31:01.350
However, if an item has no file
path and/or no URL,

00:31:01.410 --> 00:31:04.550
you can here choose the
image representation,

00:31:04.550 --> 00:31:08.750
your favorite image representation,
so you can just return either

00:31:08.750 --> 00:31:12.420
an NSImage or CGImageRef or
another image representation.

00:31:12.550 --> 00:31:15.620
So here,
this is more flexible and you can choose

00:31:15.620 --> 00:31:18.350
your favorite image representation.

00:31:18.430 --> 00:31:24.750
And also, if you know that an item is
a movie or a QC composition,

00:31:24.750 --> 00:31:28.740
you can just specify it and then
the image browser will display a

00:31:28.740 --> 00:31:35.700
play control under the items so that
users know this item can be played.

00:31:36.820 --> 00:31:41.230
So the ImageBrowser supports
this kind of format.

00:31:41.350 --> 00:31:45.320
So for this kind of media,
you can just return a path

00:31:45.740 --> 00:31:50.140
or an instance of this media,
and the ImageBrowser will be able to lay

00:31:50.140 --> 00:31:53.530
out and display and manage it for you.

00:31:53.770 --> 00:31:57.990
However, if you want to browse
another kind of media,

00:31:57.990 --> 00:32:03.530
you will have to convert it to an image
or one of these media on your side

00:32:03.880 --> 00:32:06.620
before giving it to the image browser.

00:32:06.690 --> 00:32:11.100
For instance,
if you want to browse HTML documents,

00:32:11.610 --> 00:32:16.810
You will have to create previews of
each HTML file on your site and then

00:32:17.000 --> 00:32:20.850
provide images to the image browser.

00:32:20.960 --> 00:32:24.420
So now, let me show you a demo.

00:32:24.820 --> 00:32:27.530
So hopefully it will work.

00:32:27.610 --> 00:32:30.620
Switch on computer A.

00:32:32.110 --> 00:32:33.530
Hey, it works.

00:32:33.560 --> 00:32:35.960
Cool.

00:32:36.050 --> 00:32:41.050
So here I have a sample application
which demonstrates a really

00:32:41.070 --> 00:32:43.920
basic use of the image browser.

00:32:44.010 --> 00:32:51.420
So here I can add images by drag and
drop or with the open panel here.

00:32:51.620 --> 00:32:55.320
And in fact, when I do that,
I just add the selected

00:32:55.540 --> 00:32:59.460
file path to my data source,
which is just, in fact,

00:32:59.570 --> 00:33:01.800
a simple NSMutable array.

00:33:01.840 --> 00:33:05.990
Then I ask the image browser
to reflect my changes.

00:33:06.500 --> 00:33:11.060
So you can see that first it
displays some placeholders and

00:33:11.090 --> 00:33:16.040
the image browser automatically
starts to import the images.

00:33:16.160 --> 00:33:20.160
So then I can scroll down a bit
and you can see that the new

00:33:20.160 --> 00:33:25.400
images that appear while scrolling
are automatically imported.

00:33:26.410 --> 00:33:31.640
Then I can select a picture,
for instance, and start zooming zoom out.

00:33:31.650 --> 00:33:32.430
Okay.

00:33:32.520 --> 00:33:35.480
And so you can see that the image
browser takes care of keeping

00:33:35.480 --> 00:33:38.770
the focus on the selected image.

00:33:40.400 --> 00:33:43.170
So internally,
the ImageBrowser uses thumbnails

00:33:43.180 --> 00:33:50.060
with multiple resolutions to have
good performances while zooming.

00:33:50.090 --> 00:33:56.610
And also, when I stop to move,
there is a thread that takes

00:33:56.710 --> 00:34:00.160
care of rendering the images
with the best quality.

00:34:00.360 --> 00:34:04.700
So these two techniques guarantee
we have both the best performances,

00:34:04.710 --> 00:34:07.750
but also the best image quality.

00:34:09.620 --> 00:34:12.430
Then I can customize the appearance.

00:34:12.510 --> 00:34:19.150
I can remove shadow or add outlines,
add titles and subtitles.

00:34:19.150 --> 00:34:21.780
So here with the selection.

00:34:22.590 --> 00:34:30.240
I can also minimize margins if I want
to see more images at the same time.

00:34:30.240 --> 00:34:33.180
So here I can have more images.

00:34:34.400 --> 00:34:36.090
OK.

00:34:36.180 --> 00:34:40.000
And I can also change
colors if I want to have,

00:34:40.000 --> 00:34:42.120
for instance, a more pro app look.

00:34:42.390 --> 00:34:49.990
So here I change colors for
outlines and selection and also

00:34:49.990 --> 00:34:53.270
background and placeholders.

00:34:55.190 --> 00:34:59.370
Okay, so let's get the first appearance.

00:34:59.370 --> 00:35:03.260
And now to illustrate the
data source mechanism,

00:35:03.330 --> 00:35:05.920
I added here a search field.

00:35:05.950 --> 00:35:09.900
And when I add a letter in it,
I just filter my data source.

00:35:10.170 --> 00:35:12.510
So just filter my NSMutable array.

00:35:12.620 --> 00:35:16.590
And I just keep the items that
match my search field value.

00:35:16.660 --> 00:35:19.540
So for instance, if I add a L,

00:35:19.780 --> 00:35:25.560
OK, you can see that the image browser
reflects the changes of my data source.

00:35:25.880 --> 00:35:30.920
And it can also compute the differences
between the previous state of the data

00:35:31.000 --> 00:35:35.940
source and the next step of the data
source and animate the transition.

00:35:35.990 --> 00:35:38.890
For instance, I write Leopard.

00:35:40.330 --> 00:35:45.300
Okay,
I can zoom in to see my layer-pal image.

00:35:45.300 --> 00:35:47.340
Can remove my letters.

00:35:47.340 --> 00:35:53.160
And recover my previous images.

00:35:54.900 --> 00:35:58.780
And in fact,
all operations applied on the data

00:35:58.790 --> 00:36:01.630
source are handled in the same way.

00:36:01.740 --> 00:36:05.050
So for instance,
if I remove items from my data

00:36:05.050 --> 00:36:10.490
source array and then ask the image
browser to reflect my changes,

00:36:10.720 --> 00:36:15.340
it will animate the
transitions automatically.

00:36:16.630 --> 00:36:18.440
And that's the same for reordering.

00:36:18.590 --> 00:36:24.290
So if I just move items from my data
source array to another location,

00:36:24.320 --> 00:36:28.590
it can animate the transition like that.

00:36:32.200 --> 00:36:37.300
[Transcript missing]

00:36:37.500 --> 00:36:41.440
So you have seen how the
image browser handles images,

00:36:41.440 --> 00:36:46.120
but you can also handle
other kinds of media.

00:36:46.160 --> 00:36:49.110
So here I can add some movies.

00:36:50.730 --> 00:36:53.460
Okay, quick time.

00:36:53.510 --> 00:36:57.620
So here there is a play
control under the items.

00:36:57.690 --> 00:37:01.030
So you can directly click
on the play button here,

00:37:01.030 --> 00:37:05.430
and it starts to play the movie
directly inside the browser.

00:37:05.440 --> 00:37:06.740
So it's very practical.

00:37:06.740 --> 00:37:10.940
You don't have to switch to another
application to play the movie.

00:37:10.950 --> 00:37:17.310
And you can also click on a second movie,
and it automatically stops the previous

00:37:17.310 --> 00:37:20.080
one to avoid potential sound mixing.

00:37:20.140 --> 00:37:22.940
So you don't have to stop
the previous one manually.

00:37:22.940 --> 00:37:25.250
It's done automatically.

00:37:27.240 --> 00:37:30.370
Okay,
that's the same for QC compositions.

00:37:30.400 --> 00:37:36.520
So here are some QC compositions.

00:37:36.560 --> 00:37:41.680
Okay, so I can select one, zoom in,
and play the QC composition

00:37:41.680 --> 00:37:44.820
directly inside the image browser.

00:37:44.860 --> 00:37:48.860
So that's the same,
you can play another one,

00:37:48.860 --> 00:37:51.080
and this one for instance.

00:37:51.080 --> 00:37:55.340
Okay, and so you can continue, of course,
to browse while playing.

00:37:56.550 --> 00:37:58.700
And if you click in the background,
it stops.

00:37:58.700 --> 00:38:05.910
The browser also handles PDF.

00:38:09.300 --> 00:38:15.400
So here it uses, in this sample,
it uses the first page

00:38:15.400 --> 00:38:16.660
story as the preview.

00:38:16.750 --> 00:38:20.520
So you can see here are some PDF.

00:38:20.850 --> 00:38:26.820
And if an item is not an image,
not a PDF, not a quiz composition,

00:38:26.820 --> 00:38:32.600
and not a movie, then the ImageBrother
uses Icon3f as a fallback.

00:38:32.800 --> 00:38:36.410
So for instance,
if I add my application folder here,

00:38:36.410 --> 00:38:43.510
which doesn't contain any images,
it will use the same icons as a finder.

00:38:43.760 --> 00:38:45.700
So you can use, for instance,
the image browser to

00:38:45.700 --> 00:38:47.800
browse some applications.

00:38:47.840 --> 00:38:54.510
And here you can use the search
field to look for a cool application.

00:38:54.520 --> 00:38:57.580
Maybe the best one is Calculator.

00:38:59.120 --> 00:39:02.500
So you can zoom in, zoom out, of course,
and you can configure the

00:39:02.500 --> 00:39:03.360
double-click behavior.

00:39:03.360 --> 00:39:10.520
So here, just to launch the application,
then remove my letters and find

00:39:10.520 --> 00:39:13.720
my application folder like this.

00:39:15.810 --> 00:39:22.030
And now just a last example just
to show that the ImageBrowser can

00:39:22.030 --> 00:39:24.490
handle large amounts of images.

00:39:24.490 --> 00:39:30.840
So here I have a small library of images.

00:39:31.050 --> 00:39:35.210
I have almost 6,000 images.

00:39:35.680 --> 00:39:41.690
So I can scroll very smoothly,
select a picture, zoom in,

00:39:41.690 --> 00:39:44.100
zoom out very quickly.

00:39:44.110 --> 00:39:48.310
And in fact, so here is a small library,
but the image browser

00:39:48.310 --> 00:39:51.880
supports 250,000 images.

00:39:51.880 --> 00:39:55.430
I tried more,
but my hardware was full then, so.

00:39:56.360 --> 00:39:58.950
It should support your
entire library of images.

00:39:59.000 --> 00:40:04.550
So now go back to the slides, please.

00:40:11.460 --> 00:40:16.920
So to sum up,
the image browser will provide a simple

00:40:16.920 --> 00:40:22.800
API to browse large amounts of images,
movies, and more.

00:40:22.800 --> 00:40:26.090
So you can use this image
browser very easily.

00:40:26.240 --> 00:40:32.340
So now I would like to introduce
another component of ImageKit.

00:40:32.430 --> 00:40:36.270
You already know this component,
and you have all already been using

00:40:36.510 --> 00:40:38.400
this component since a long time.

00:40:38.580 --> 00:40:41.670
But now it will be public for Leopard.

00:40:42.030 --> 00:40:45.530
So this component is the picture taker.

00:40:45.610 --> 00:40:52.420
So picture taker is a simple panel
that you can use to choose an image

00:40:52.470 --> 00:40:58.950
or take a picture and crop images
to usually create body pictures.

00:40:59.240 --> 00:41:05.600
So it is a very simple interface
where users can choose an image on

00:41:05.600 --> 00:41:09.360
his hard drive or take a snapshot.

00:41:09.390 --> 00:41:14.390
And then there is a tool to zoom in,
zoom out, and move the image to adjust

00:41:14.390 --> 00:41:16.310
the area that will crop.

00:41:16.500 --> 00:41:21.850
So you have seen this
picture taker in iChat,

00:41:21.850 --> 00:41:26.400
address book, MacBuddy, account press,
and server kit.

00:41:26.400 --> 00:41:29.620
But now we have just one
common implementation,

00:41:29.620 --> 00:41:34.700
and we have a simple API for developers.

00:41:35.920 --> 00:41:39.200
So the API is very short and very simple.

00:41:39.220 --> 00:41:43.460
And so here is a sample
code that illustrates that.

00:41:43.610 --> 00:41:49.780
So in this sample code, it uses its name,
ImagePicker, for some historical reasons.

00:41:50.000 --> 00:41:56.960
But in the Leopold,
it will be renamed to PictureTaker.

00:41:56.990 --> 00:42:00.320
So first,
you will have to retrieve an instance of

00:42:00.320 --> 00:42:06.380
the PictureTaker here using ImagePicker
class methods of the IKImagePicker class.

00:42:06.410 --> 00:42:12.270
And once you have this instance,
you just have to invoke BeginImagePicker

00:42:12.270 --> 00:42:14.860
with delegate on a selector.

00:42:14.890 --> 00:42:18.520
And this will launch
the PictureTaker panel.

00:42:18.570 --> 00:42:22.120
And when it's done,
the PictureTaker will invoke your

00:42:22.120 --> 00:42:24.650
selector on your delegate object.

00:42:24.800 --> 00:42:29.750
And that's usually where you
retrieve the output image to update

00:42:29.750 --> 00:42:32.690
your interface or do what you want.

00:42:33.970 --> 00:42:37.660
So yes, dirty jump to the demo.

00:42:37.660 --> 00:42:39.610
So computer, OK.

00:42:39.690 --> 00:42:44.580
So with the same application,
jump on the picture taker.

00:42:44.980 --> 00:42:45.630
Example.

00:42:45.750 --> 00:42:49.830
So here I have a usual image view.

00:42:49.830 --> 00:42:53.240
And when I click on it,
I invoke BigID ImagePicker

00:42:53.240 --> 00:42:57.890
with Delegate and that launch
the picture take your panel.

00:42:58.290 --> 00:43:01.000
So here is the picture taker panel.

00:43:01.010 --> 00:43:07.700
I can zoom in, zoom out,
move the image to adjust the crop area.

00:43:07.710 --> 00:43:12.580
I have here a choose button where
I can choose an image on disk.

00:43:12.750 --> 00:43:18.140
So let's choose an image here.

00:43:18.190 --> 00:43:22.900
OK, so there's a lot of images,
so open panel takes some time.

00:43:23.390 --> 00:43:26.780
Okay, so here's another image.

00:43:26.830 --> 00:43:31.490
I can take a picture using
this camera button here.

00:43:31.510 --> 00:43:35.710
So there's a countdown
and a flash at the end.

00:43:38.200 --> 00:43:40.100
Can zoom in, zoom out.

00:43:40.100 --> 00:43:41.390
And then validate.

00:43:41.690 --> 00:43:44.890
And when I validate,
the picture taker invokes my

00:43:45.040 --> 00:43:48.670
selector on my delegate object,
and that's where I retrieve

00:43:48.800 --> 00:43:52.460
the output image and update
my NS image view like this.

00:43:52.460 --> 00:43:55.100
So here is the crop result.

00:43:55.100 --> 00:43:59.090
So go back to the slides, please.

00:44:00.550 --> 00:44:07.020
So you have seen how to use the
picture takeer panel as a panel,

00:44:07.020 --> 00:44:11.950
but you can also use it as a sheet
or start with a recent pop-up menu.

00:44:12.290 --> 00:44:15.740
For instance,
iChat illustrates this kind of usage.

00:44:15.850 --> 00:44:20.760
So the picture taker manages
a recent list for you.

00:44:20.950 --> 00:44:25.290
So this recent list contains
your last edited crop.

00:44:25.950 --> 00:44:29.130
So, one more time,
it's really easy to use.

00:44:29.260 --> 00:44:32.080
If you use the rest of
our previous sample code,

00:44:32.100 --> 00:44:35.060
it's still the same,
and you just have to choose one

00:44:35.060 --> 00:44:39.650
of these three methods to launch
the picture taker as a panel,

00:44:39.680 --> 00:44:43.170
as a sheet,
or with the rest on the pop-up menu.

00:44:43.490 --> 00:44:48.640
So I just want to show
the recent pop-up menu.

00:44:51.500 --> 00:44:53.340
So, recent pop-up, okay.

00:44:53.410 --> 00:44:56.220
So here is the recent pop-up menu.

00:44:56.220 --> 00:44:58.840
It contains my last edited crop.

00:44:58.900 --> 00:45:06.530
So you can click on an icon and
you can see my previous crop.

00:45:07.020 --> 00:45:11.000
And you can also read it a previous
crop and in that case you start

00:45:11.090 --> 00:45:15.450
from the original image but with
the previous crop parameters.

00:45:16.000 --> 00:45:20.530
So you can just update the previous
crop by for instance zooming a bit,

00:45:20.530 --> 00:45:27.050
validate again,
and it updates my previous crop.

00:45:28.120 --> 00:45:32.550
And now something that
we will add in LeapHard.

00:45:32.640 --> 00:45:37.640
We want to add the capability
to add some effects,

00:45:37.640 --> 00:45:42.710
some filters applied on the image.

00:45:43.150 --> 00:45:45.680
So this is just a prototype for now.

00:45:45.880 --> 00:45:49.360
So it will-- your UI may
change a bit and be as well.

00:45:49.360 --> 00:45:55.990
So here, just to show an example,
so here is an effect button.

00:45:56.000 --> 00:45:59.200
And by clicking on it,
it will bring a kind of

00:45:59.200 --> 00:46:01.370
effect picture like that.

00:46:01.390 --> 00:46:03.700
Yeah, that's nice.

00:46:03.700 --> 00:46:04.110
And--

00:46:05.070 --> 00:46:10.440
And so you can select an effect,
for example, sepia here.

00:46:10.470 --> 00:46:13.920
You can continue, of course,
to adjust the crop area.

00:46:13.960 --> 00:46:19.490
And these effects are non-destructive,
so you can revert to the

00:46:19.500 --> 00:46:25.840
original image at will or
choose another effect like this.

00:46:25.960 --> 00:46:27.940
Continue to scroll.

00:46:27.960 --> 00:46:32.680
And you can also take a
picture with an effect applied.

00:46:32.750 --> 00:46:34.750
So OK.

00:46:36.130 --> 00:46:39.370
Okay, so that's not my real face.

00:46:39.450 --> 00:46:45.460
So I can of course remove my
effect or choose another effect,

00:46:45.550 --> 00:46:49.020
for instance this one,
and then validate and I will

00:46:49.080 --> 00:46:52.820
have my cropped image with
my filters applied on it.

00:46:52.820 --> 00:46:56.570
So go back to the slides.

00:47:02.170 --> 00:47:08.910
So the picture taker panel
is a really simple UI,

00:47:09.110 --> 00:47:13.070
both for users who want to use
it and for developers who want to

00:47:13.080 --> 00:47:15.780
integrate it in their application.

00:47:15.780 --> 00:47:17.380
Now I pass back to Werner.

00:47:17.380 --> 00:47:18.800
Thanks.

00:47:24.000 --> 00:47:26.100
Okay, so what components are missing?

00:47:26.140 --> 00:47:28.390
One of them is slideshow.

00:47:28.390 --> 00:47:31.000
And you may know slideshow
really from Tiger.

00:47:31.080 --> 00:47:33.890
The slideshow was used in
applications like Preview,

00:47:33.890 --> 00:47:37.370
Mail, Spotlight,
and even Finder was using it.

00:47:37.750 --> 00:47:40.040
Interesting thing was really,
like we got a lot of bugs

00:47:40.040 --> 00:47:42.910
against preview saying,
well, preview in full screen mode

00:47:42.910 --> 00:47:45.390
should do this and this,
or this and this,

00:47:45.510 --> 00:47:47.340
or does not handle that and that.

00:47:47.420 --> 00:47:48.480
Actually, it was not part of preview.

00:47:48.480 --> 00:47:50.110
It was really an own framework.

00:47:50.270 --> 00:47:51.820
Back then it was private,
and we really want to

00:47:51.820 --> 00:47:54.650
make it public in Leopard.

00:47:54.790 --> 00:47:57.240
So the goal is, make it simple.

00:47:57.490 --> 00:48:02.800
So the tiger version was using
images and was also supporting PDFs.

00:48:02.960 --> 00:48:06.790
What about the other stuff
like HTML and all that?

00:48:06.910 --> 00:48:09.300
Actually for Leopard we
have a solution for that.

00:48:09.380 --> 00:48:12.600
We are going to use the
new QuickLook framework.

00:48:12.670 --> 00:48:17.800
And the one version of the slideshow
on the seat actually does support that.

00:48:17.870 --> 00:48:21.520
So you can actually pass in an
HTML file or a text file and

00:48:21.520 --> 00:48:23.980
slideshow should do the right thing.

00:48:24.820 --> 00:48:29.500
The data that you pass in can be
really passed in in different formats.

00:48:29.660 --> 00:48:36.920
NSURL, a file path, an NSImage, PDF page,
and actually many more.

00:48:38.010 --> 00:48:41.880
The protocol that we are
going to use is very simple,

00:48:41.880 --> 00:48:44.790
very similar to an
NS TableView data source or the

00:48:44.860 --> 00:48:47.910
IK Image Browser data source.

00:48:49.190 --> 00:48:51.890
So for the API,
it's actually very simple.

00:48:51.900 --> 00:48:56.390
It's like you get a shared
instance of the slideshow.

00:48:56.730 --> 00:49:01.220
In order to start and stop the slideshow,
well, at least you should start it.

00:49:01.250 --> 00:49:06.500
The user may stop it with the cancel
button on the overhead display.

00:49:07.100 --> 00:49:12.080
In order to start it,
you have to pass in an instance of the

00:49:12.080 --> 00:49:15.000
data source and a couple of options.

00:49:15.000 --> 00:49:17.000
Why do you need options?

00:49:17.000 --> 00:49:21.000
Well, for example, you could say, well,
start the slideshow with a given index.

00:49:21.000 --> 00:49:24.980
You don't have to start
with the beginning of your

00:49:24.980 --> 00:49:27.000
array of files or images.

00:49:27.000 --> 00:49:31.480
Or you could say,
use the slideshow in autoplay

00:49:31.520 --> 00:49:34.750
mode with a given autoplay delay.

00:49:35.000 --> 00:49:40.720
So you have an influence, I mean,
you have a way to override that.

00:49:42.140 --> 00:49:45.000
There are a couple of methods
that might be quite handy.

00:49:45.000 --> 00:49:47.600
One, for example, is the reload data.

00:49:47.830 --> 00:49:52.240
And you can think of it
like if you would browse,

00:49:52.300 --> 00:49:58.310
want to display in a slideshow,
something that really,

00:49:58.400 --> 00:50:00.960
at the beginning of the slideshow,
does not know how many

00:50:00.960 --> 00:50:02.600
images you would have.

00:50:04.020 --> 00:50:07.760
For example,
you are browsing a webpage and you want

00:50:07.760 --> 00:50:10.810
to display images from there directly.

00:50:10.990 --> 00:50:13.050
So in the middle you could say, well,
reload data,

00:50:13.050 --> 00:50:17.660
so update the image count or item count.

00:50:17.660 --> 00:50:21.660
And if you want to use, for example,
the image I/O progressive

00:50:21.660 --> 00:50:23.840
loading of a file,
of an image,

00:50:23.840 --> 00:50:31.050
you can also use that and then update
a given image of the slideshow.

00:50:31.960 --> 00:50:35.240
As a data source,
you can always query the slideshow.

00:50:35.240 --> 00:50:39.190
What is the current
image or item on display?

00:50:40.020 --> 00:50:46.260
And slideshow does support
exporting to another application.

00:50:46.380 --> 00:50:50.310
Currently, the tiger version and the
first implementation of the

00:50:50.310 --> 00:50:54.240
leopard one does support iPhoto.

00:50:54.350 --> 00:50:57.390
So if you have iPhoto
installed on your system,

00:50:57.390 --> 00:51:00.860
we will display an
extra iPhoto item icon.

00:51:00.950 --> 00:51:06.250
And you, by clicking on that,
can add the current image

00:51:06.630 --> 00:51:09.270
to the iPhoto library.

00:51:11.710 --> 00:51:15.040
The slideshow data source protocol
is hopefully very simple because all

00:51:15.040 --> 00:51:19.490
you have to do is you have to specify
the number of items and you have to

00:51:19.590 --> 00:51:23.470
respond to give me the item at index.

00:51:24.500 --> 00:51:27.160
And as you can see here,
we're just getting back an ID.

00:51:27.160 --> 00:51:32.570
So as I mentioned before,
you can pass back a CG image ref,

00:51:32.570 --> 00:51:38.600
or an NS image, or URL, or a string,
a path, or a PDF page.

00:51:39.810 --> 00:51:43.120
There are some optional methods.

00:51:43.120 --> 00:51:46.010
Some of them are just
delegate notifications where,

00:51:46.010 --> 00:51:47.580
for example,
you will get notified when the

00:51:47.580 --> 00:51:49.680
slideshow is about to start,
when it will start,

00:51:49.680 --> 00:51:54.730
or when the slideshow did stop,
or change the current index.

00:51:55.480 --> 00:52:00.720
And what's also quite handy to use is,
and for you to implement,

00:52:00.720 --> 00:52:03.560
would be the name of
slideshow item at index.

00:52:03.590 --> 00:52:07.510
Reason for that is whenever
you're using like an NSImage

00:52:07.520 --> 00:52:11.550
or a CGImageRef as your item,
then that item does not

00:52:11.600 --> 00:52:12.500
contain any metadata.

00:52:12.520 --> 00:52:14.520
For example, it doesn't contain a name.

00:52:14.560 --> 00:52:18.240
And in our index mode,
we really want to display all the names.

00:52:18.380 --> 00:52:24.000
So that's an easy way, convenient way,
to use one of those data types, NSImage,

00:52:24.000 --> 00:52:25.080
CGImageRef.

00:52:25.120 --> 00:52:28.350
and still have the name on display.

00:52:29.730 --> 00:52:33.290
And then the slideshow will also ask
you if you implement this method,

00:52:33.420 --> 00:52:38.810
should I enable the export
to an application button?

00:52:39.660 --> 00:52:44.710
If you do not implement that method,
then if iPhoto is installed,

00:52:44.710 --> 00:52:49.700
we actually will enable that
button automatically for you.

00:52:49.790 --> 00:52:52.520
And actually,
let me do a demo of the slideshow.

00:53:00.490 --> 00:53:04.200
Okay, so I can start a small application.

00:53:04.200 --> 00:53:09.930
It just shows you how to use a
slideshow in kind of different ways.

00:53:10.150 --> 00:53:16.000
First way is what we do is we
pass in a URL to a PDF file.

00:53:16.010 --> 00:53:18.460
As you can see,
the PDF file is displayed and

00:53:19.190 --> 00:53:22.650
this is done using PDFKit and
actually I switched to the index

00:53:22.690 --> 00:53:23.980
mode and we get only one page.

00:53:24.000 --> 00:53:26.000
Why is that?

00:53:26.000 --> 00:53:28.880
Well, I was just passing in an NSURL.

00:53:28.880 --> 00:53:32.730
In that case, in that mode,
we would take just the first

00:53:32.730 --> 00:53:36.000
page but I can still go
through the entire document.

00:53:36.000 --> 00:53:41.000
You can zoom up, go down, and quit.

00:53:41.000 --> 00:53:45.000
If I would pass individual pages,

00:53:45.850 --> 00:53:50.270
To that, we should see the same document.

00:53:50.420 --> 00:53:52.880
But now when I go to the index mode,
we really get all the pages.

00:53:52.880 --> 00:53:54.900
So we get thumbnails of all the pages.

00:53:55.010 --> 00:54:00.320
And we do this using, again,
core animation.

00:54:00.320 --> 00:54:08.000
And we can scroll up, scroll down,
select the one page,

00:54:08.000 --> 00:54:08.770
and go back to the image.

00:54:08.770 --> 00:54:08.770
Actually, to that PDF page.

00:54:09.360 --> 00:54:13.060
Now what works for PDF pages
works also for images.

00:54:13.060 --> 00:54:17.160
And the small demo app is just
reusing a couple of images that

00:54:17.160 --> 00:54:19.200
you usually have on your disk.

00:54:19.200 --> 00:54:22.490
It's just like a couple
of screen saver images.

00:54:22.590 --> 00:54:26.960
So we can specify, oh,
let me start the slideshow

00:54:26.960 --> 00:54:29.480
with just 50 images.

00:54:29.480 --> 00:54:29.480
Now,

00:54:29.980 --> 00:54:33.800
We can manually go back and forth
and you see one minor change

00:54:33.870 --> 00:54:36.900
we did is really when you use
the key forward and backward,

00:54:36.900 --> 00:54:41.300
we are not bringing up the head-up
display again because that was

00:54:41.380 --> 00:54:43.040
kind of complained in the past.

00:54:43.060 --> 00:54:45.440
If you want to do a presentation
using the slideshow,

00:54:45.440 --> 00:54:47.500
you would always get
that panel showing up.

00:54:47.580 --> 00:54:52.180
So back forward is really done
now without bringing this up.

00:54:52.220 --> 00:54:54.370
Now let's go to the index mode.

00:54:54.420 --> 00:54:59.800
And first again you see we
do handle way more images.

00:54:59.900 --> 00:55:01.040
Thank you.

00:55:01.460 --> 00:55:06.220
Again, there's not that many,
so maybe we should go back and do this.

00:55:06.240 --> 00:55:09.270
Okay, let's try, I don't know, 200.

00:55:10.500 --> 00:55:17.120
And now if we go to the index mode,
you see it's pretty fast to bring it up,

00:55:17.120 --> 00:55:19.640
but for those images
that are not loaded yet,

00:55:19.710 --> 00:55:24.140
you will see we display a
placeholder and a spinning animated

00:55:24.200 --> 00:55:26.110
progress indicator in there.

00:55:26.330 --> 00:55:31.380
This is all done using core animation
and as Peter was showing yesterday,

00:55:31.380 --> 00:55:33.300
like transitions between

00:55:34.140 --> 00:55:37.790
These different images,
they are all very smooth,

00:55:37.870 --> 00:55:40.380
very nicely using core animation.

00:55:40.530 --> 00:55:43.490
Nothing special to implement.

00:55:43.490 --> 00:55:47.820
It's really cool, really nice feature.

00:55:52.140 --> 00:55:54.320
And again,
this should really scale pretty well,

00:55:54.320 --> 00:55:58.510
so if I would do this same
thing with a thousand images,

00:55:58.700 --> 00:56:01.120
hopefully we get the same experience.

00:56:01.300 --> 00:56:06.350
It should really come up
pretty quickly and yeah,

00:56:06.350 --> 00:56:07.600
it should update.

00:56:07.750 --> 00:56:11.510
Go to the end, go to the top.

00:56:12.360 --> 00:56:18.460
So this really nicely animated and again,
if you look at the code for

00:56:18.460 --> 00:56:22.420
implementing this slideshow feature,
you would be surprised.

00:56:22.420 --> 00:56:29.620
It's shockingly little code that's
needed due to a core animation.

00:56:29.620 --> 00:56:33.470
OK, so let's quit that and
go back to the slides,

00:56:33.470 --> 00:56:34.370
please.

00:56:40.830 --> 00:56:43.620
Now the next component is
really something that a lot of

00:56:43.710 --> 00:56:45.440
developers have to deal with.

00:56:45.490 --> 00:56:50.650
Like you would use the image browser
to browse the whole set of images.

00:56:50.840 --> 00:56:53.840
You would then open an
image up in a window.

00:56:53.960 --> 00:56:57.500
You may do some manipulation,
and then you want to save it.

00:56:57.760 --> 00:57:02.510
Now, for doing the save,
you really want to present a little bit

00:57:02.510 --> 00:57:05.040
more than just a standard save panel.

00:57:05.040 --> 00:57:09.220
What you really want to do is you want to
present the different file formats that

00:57:09.220 --> 00:57:14.590
your application does support and maybe a
couple of options for these file formats.

00:57:14.700 --> 00:57:21.340
For example, whenever you are going to
save an image as a TIFF,

00:57:21.340 --> 00:57:21.340
you may want to specify the compression.

00:57:21.570 --> 00:57:25.660
You want to have a quality
slider for JPEG files.

00:57:25.660 --> 00:57:29.210
You want to have, for example,
an encrypt or not box

00:57:29.640 --> 00:57:32.400
when saving to PDF file.

00:57:33.030 --> 00:57:35.260
Now, again,
instead of reinventing the wheel

00:57:35.260 --> 00:57:39.120
and letting all pieces within
Apple and also your applications

00:57:39.590 --> 00:57:45.600
do it again over and over,
we decided to have support

00:57:45.600 --> 00:57:47.980
for that within ImageKit.

00:57:48.010 --> 00:57:51.340
And the usage is straightforward.

00:57:51.340 --> 00:57:55.740
It's basically an
IK Save Options class that you have.

00:57:55.970 --> 00:57:59.720
And you would initialize that
class with image properties

00:57:59.930 --> 00:58:02.950
and a UT type for your image.

00:58:03.340 --> 00:58:04.460
You T-tap for your image.

00:58:04.560 --> 00:58:06.660
We did that actually
in the first example.

00:58:06.780 --> 00:58:08.970
So we got it from ImageIO.

00:58:09.130 --> 00:58:13.890
It's needed so that we can bring
up the safe panel with whatever

00:58:14.070 --> 00:58:16.190
the original image was set to.

00:58:16.190 --> 00:58:20.670
So if you open a JPEG,
you probably want to use JPEG as the

00:58:20.670 --> 00:58:23.800
initial setting in the safe panel.

00:58:24.900 --> 00:58:27.380
Once you have this
IK Save Options initialized,

00:58:27.520 --> 00:58:33.130
then all you have to do is you have
to attach it to a regular save panel.

00:58:33.290 --> 00:58:36.060
If you have a document-based
application method called,

00:58:36.060 --> 00:58:38.830
I guess it's prepare save panel,
where you would do that,

00:58:38.830 --> 00:58:43.210
you get passed in a save panel,
so you would just initialize

00:58:43.260 --> 00:58:46.400
this IK Save Options,
attach it to the save panel.

00:58:46.480 --> 00:58:49.700
If it's a non-document-based application,
then all you have to do

00:58:49.700 --> 00:58:54.700
is create a save panel,
get the standard one,

00:58:54.770 --> 00:58:59.630
and attach the save options to it.

00:58:59.730 --> 00:59:05.010
And then whenever you are done,
the user is done using it, clicks OK,

00:59:05.190 --> 00:59:10.820
then you can query the image properties,
you can query the image UT type

00:59:11.040 --> 00:59:15.200
that the user has chosen,
and you get back a dictionary

00:59:15.200 --> 00:59:17.890
with other user selections.

00:59:18.020 --> 00:59:24.570
For example, in case of So let me quickly
show you how this works.

00:59:26.630 --> 00:59:30.120
We go back to our standard
application and what we do is,

00:59:30.120 --> 00:59:38.750
okay, let's do this and let's rotate it a
little bit and now we want to save it.

00:59:39.170 --> 00:59:45.100
Now we see the original image was a JPEG,
so this here comes up with JPEG setting.

00:59:45.160 --> 00:59:46.700
I'm going to go to the desktop.

00:59:46.800 --> 00:59:48.500
So we could save it as a JPEG.

00:59:48.570 --> 00:59:52.430
But what's actually more fun in this
case is really save it into an image

00:59:52.430 --> 00:59:54.800
format that does support alpha.

00:59:54.850 --> 01:00:01.000
So either let's choose
PNG and we save the image.

01:00:01.080 --> 01:00:04.200
And we got an earring PNG.

01:00:04.200 --> 01:00:07.980
If we double click on that,
we should get it in preview exactly

01:00:07.980 --> 01:00:09.900
the same way you would expect it.

01:00:09.970 --> 01:00:12.000
And yes, it does have the alpha.

01:00:12.000 --> 01:00:13.480
You don't have to worry about that.

01:00:13.610 --> 01:00:15.680
This is fully supported.

01:00:15.800 --> 01:00:18.200
And let's quickly look
at the code for that.

01:00:18.200 --> 01:00:21.010
It's really not that complicated.

01:00:24.720 --> 01:00:31.590
So, you have to implement in
our... So this is just the same

01:00:31.590 --> 01:00:36.210
standard file that we had before.

01:00:36.210 --> 01:00:36.210
And...

01:00:36.700 --> 01:00:41.980
And what we have to do
is on the save list,

01:00:42.090 --> 01:00:46.440
we get the standard NS save panel.

01:00:46.620 --> 01:00:49.330
We create our save options.

01:00:49.990 --> 01:00:54.860
Pass in the UD type that
we got from ImageIO.

01:00:54.930 --> 01:00:59.460
Then we tell the save options,
add yourself to the-- as an

01:00:59.460 --> 01:01:02.920
accessory view to the save panel.

01:01:03.120 --> 01:01:05.600
And then we just run the save panel.

01:01:05.650 --> 01:01:06.800
That's straightforward.

01:01:06.920 --> 01:01:09.290
Not a lot of code to write.

01:01:10.420 --> 01:01:15.700
Here's a little bit more
on the actual saving part.

01:01:15.750 --> 01:01:21.860
And the actual saving part is done
only if the OK button is pressed.

01:01:21.930 --> 01:01:26.300
And then we ask our image view,
give me back the current image.

01:01:26.430 --> 01:01:30.660
If we have the image,
then we use ImageIO to .

01:01:30.720 --> 01:01:32.440
So how are we doing that?

01:01:32.480 --> 01:01:35.060
Get the path.

01:01:35.940 --> 01:01:42.700
From the sheet, create a URL,
create a CG image destination ref,

01:01:42.730 --> 01:01:45.330
initialize that with the URL.

01:01:45.500 --> 01:01:50.900
If we have an image destination ref,
then what we do is we

01:01:51.500 --> 01:01:55.790
Create a dictionary with the
current image properties that we

01:01:55.900 --> 01:01:58.400
got back from the save options.

01:01:58.430 --> 01:02:03.110
In this case we want to say,
we really want to save it with alpha.

01:02:05.260 --> 01:02:10.570
Then we add the image to
the CG image destination.

01:02:10.990 --> 01:02:14.340
And then we call finalize.

01:02:14.360 --> 01:02:17.690
Release the image
destination and that's it.

01:02:17.740 --> 01:02:22.350
That's all it takes to
save into any file format.

01:02:22.560 --> 01:02:24.260
So ImageIO takes care of all that.

01:02:24.370 --> 01:02:29.300
Important thing really is you
have to specify the UT type.

01:02:29.320 --> 01:02:32.800
And again, you get that in the
current user selection.

01:02:35.340 --> 01:02:41.170
And, yeah, you can now support all image
file formats that ImageO supports.

01:02:41.300 --> 01:02:43.450
Back to the slides, please.

01:02:46.640 --> 01:02:49.230
And there's a little
bit more to ImageKit,

01:02:49.230 --> 01:02:52.550
but actually the next one,
the filter browser,

01:02:52.900 --> 01:02:58.640
is something where we go really
deep into core image support,

01:02:58.740 --> 01:03:05.310
where we have a way to specify,
to select one of the really large

01:03:05.470 --> 01:03:09.160
amount of core image filters.

01:03:09.220 --> 01:03:11.900
And actually it's not
only just picking one,

01:03:11.900 --> 01:03:17.180
but also picking one and allowing
you to display and actually

01:03:17.180 --> 01:03:20.200
modify the core image filter.

01:03:20.280 --> 01:03:22.990
But this is really covered
not as part of ImageKit,

01:03:23.100 --> 01:03:29.200
it's, I highly recommend session 210,
developing with core image.

01:03:30.410 --> 01:03:32.560
So now we're at the end
of this presentation.

01:03:32.560 --> 01:03:39.750
I just want to point out any questions
related to 2D and 3D graphics,

01:03:40.060 --> 01:03:42.390
please send them over to Alan.

01:03:43.510 --> 01:03:46.130
I want to point out we
have our core animation and

01:03:46.130 --> 01:03:47.970
ImageKit lab this afternoon.