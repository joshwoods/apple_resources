WEBVTT

00:00:11.400 --> 00:00:14.300
Welcome to session 112,
Safari and WebKit for

00:00:14.300 --> 00:00:16.320
Web Content Developers.

00:00:16.360 --> 00:00:19.590
That means you widget developers too.

00:00:20.360 --> 00:00:21.700
I'm Adele Peterson.

00:00:21.730 --> 00:00:24.500
I'm an engineer on the
Safari and WebKit team.

00:00:24.530 --> 00:00:26.770
A little bit later,
we'll be hearing from my colleague,

00:00:26.770 --> 00:00:28.680
Beth Dakin.

00:00:29.220 --> 00:00:33.550
Today we're going to talk about
how you can take advantage of new

00:00:34.020 --> 00:00:39.080
features in Safari and WebKit and new
technologies that we've gone to support.

00:00:43.580 --> 00:00:46.260
There are three main topics
that we're going to cover today.

00:00:46.320 --> 00:00:50.670
The first is JavaScript capabilities,
including built-in language

00:00:50.670 --> 00:00:54.120
features and XML technologies.

00:00:54.300 --> 00:00:58.170
The second is graphics,
specifically scalable

00:00:58.170 --> 00:01:01.190
vector graphics and canvas.

00:01:01.300 --> 00:01:05.210
And lastly, style,
specifically resolution

00:01:05.210 --> 00:01:08.720
independence and CSS3.

00:01:10.120 --> 00:01:13.120
But first,
before we get into all of that,

00:01:13.120 --> 00:01:16.780
we're going to have a
little bit of a review.

00:01:18.060 --> 00:01:23.100
I'd like to talk to you guys about
best practices for web compatibility.

00:01:23.100 --> 00:01:27.580
So I was talking to a friend recently
who's a web developer and she was telling

00:01:27.580 --> 00:01:33.000
me about how she spends hours and hours
getting her websites to be pixel perfect,

00:01:33.000 --> 00:01:36.020
to get the behavior just right.

00:01:36.020 --> 00:01:40.050
And then she goes to test her site in
other browsers and discovers she has many

00:01:40.050 --> 00:01:45.500
more hours of work ahead of her to get it
to work in as many browsers as possible.

00:01:45.500 --> 00:01:48.240
So this is a pretty common
problem for web developers.

00:01:48.240 --> 00:01:52.390
So we want to give you a few tips on
how to get a leg up and increase your

00:01:52.390 --> 00:01:55.690
chances of working in more web browsers.

00:01:56.130 --> 00:01:59.540
So the first thing that I want
to recommend to you is that you

00:01:59.540 --> 00:02:01.280
all do a little bit of research.

00:02:01.320 --> 00:02:03.700
Google is your friend,
and there's lots of sites out there

00:02:03.700 --> 00:02:08.040
that can help you find information
about how different browsers behave.

00:02:08.200 --> 00:02:10.020
Specifically,
there's a great resource out there

00:02:10.080 --> 00:02:13.880
called Quirks Mode at quirksmode.org
that has these great compatibility

00:02:13.920 --> 00:02:17.960
tables to show you different
behavior in different browsers.

00:02:18.250 --> 00:02:23.640
And that will give you some information
about how the browsers actually do work.

00:02:23.670 --> 00:02:26.800
But if you want to find
out how they should work,

00:02:26.820 --> 00:02:29.610
you may want to take a look at
the World Wide Web Consortium

00:02:29.650 --> 00:02:31.470
website at w3.org.

00:02:31.760 --> 00:02:35.070
And there you'll find
specifications for HTML,

00:02:35.070 --> 00:02:39.390
CSS, SVG, and other technologies.

00:02:41.800 --> 00:02:44.160
So the second thing that I'd
like to recommend is that

00:02:44.160 --> 00:02:45.950
you all use standards mode.

00:02:46.250 --> 00:02:48.840
And to do that,
use a document type declaration

00:02:48.840 --> 00:02:50.740
that will trigger standards mode.

00:02:50.760 --> 00:02:53.380
Now for those of you who don't know,

00:02:53.570 --> 00:02:57.130
In standards mode,
most browsers will interpret your code

00:02:57.180 --> 00:03:00.500
in the same standards-compliant way.

00:03:00.640 --> 00:03:05.400
So this will greatly increase your
chances of working cross-browser.

00:03:06.140 --> 00:03:11.130
So unless you're out there writing
1990s-style old school HTML,

00:03:11.130 --> 00:03:16.660
you probably want to avoid those browser
quirks that existed for that old code.

00:03:16.840 --> 00:03:19.770
So use a doc type like the
one I'm going to show you here

00:03:20.370 --> 00:03:22.880
to trigger standards mode,
and you'll increase your chances

00:03:22.880 --> 00:03:25.450
of working in more modern browsers.

00:03:27.800 --> 00:03:31.000
Lastly,
I recommend that you validate your code.

00:03:31.050 --> 00:03:32.600
There are some great tools out there.

00:03:32.600 --> 00:03:36.090
Specifically,
there's a few validators at the

00:03:36.090 --> 00:03:39.320
W3C website that will help you
find common problems in your code.

00:03:39.320 --> 00:03:42.660
Things like misnested tags,
or a misenclosed tag,

00:03:42.660 --> 00:03:44.520
or the incorrect casing.

00:03:44.520 --> 00:03:47.110
Things that your eyes might
glaze over as you review your

00:03:47.110 --> 00:03:48.910
website for the gazillionth time.

00:03:48.920 --> 00:03:51.920
These are just automated tools to
help you find these problems quickly.

00:03:54.300 --> 00:03:57.720
So those are three simple things that
you can do to give yourself a leg up

00:03:57.870 --> 00:03:59.700
in the whole web compatibility game.

00:03:59.720 --> 00:04:04.310
Research, use standards mode,
and validate your code.

00:04:05.900 --> 00:04:12.550
OK, so now that we got the
basics out of the way,

00:04:12.550 --> 00:04:12.550
let's talk about JavaScript capabilities.

00:04:16.180 --> 00:04:18.900
So the things that I'm going to tell
you about today can be basically

00:04:18.900 --> 00:04:20.960
broken up into two different sections.

00:04:21.030 --> 00:04:22.980
First, built-in language features.

00:04:22.980 --> 00:04:26.080
These are the types of things that
you can use as you're building a

00:04:26.080 --> 00:04:28.640
JavaScript library or a framework.

00:04:28.670 --> 00:04:32.860
And also, client-side XML processing.

00:04:32.860 --> 00:04:38.960
These are things that fit right
into the whole Ajax story as far

00:04:38.960 --> 00:04:40.800
as making dynamic content from
JavaScript using XML technologies.

00:04:42.180 --> 00:04:45.520
So the first thing that I want to tell
you about is called getters and setters.

00:04:45.550 --> 00:04:49.240
This is a really cool way that you
can add active properties to objects.

00:04:49.510 --> 00:04:50.960
So what does that mean?

00:04:50.960 --> 00:04:53.950
Well, it means that you can make
your properties behind the

00:04:54.080 --> 00:04:56.550
scenes act like functions.

00:04:56.690 --> 00:04:59.340
So let me show you an
example of how that works.

00:04:59.340 --> 00:05:02.480
So in this example,
we have a circle object.

00:05:02.490 --> 00:05:05.680
It has a radius property
and two functions set on it,

00:05:05.710 --> 00:05:09.440
getDiameter and setDiameter
that do some basic math.

00:05:09.440 --> 00:05:13.370
Now, getDiameter and setDiameter,
it might be nice if the

00:05:13.370 --> 00:05:15.000
diameter was just a property.

00:05:15.050 --> 00:05:18.170
From the caller's perspective,
the caller doesn't really care what

00:05:18.170 --> 00:05:19.800
goes on in getDiameter and setDiameter.

00:05:19.910 --> 00:05:22.220
It just wants to get and set.

00:05:22.990 --> 00:05:25.550
So in this example,
you can see how diameter

00:05:25.630 --> 00:05:27.360
can be used as a property.

00:05:27.370 --> 00:05:31.150
And you still might want to do
that same math behind the scenes.

00:05:31.980 --> 00:05:33.900
So here's how that works.

00:05:33.990 --> 00:05:38.630
Here I've defined a circle object with
a radius property and two functions,

00:05:38.700 --> 00:05:41.710
a get function and a set function,
where the name of that

00:05:41.780 --> 00:05:45.700
function is the name of the
property that I'm going to use.

00:05:45.720 --> 00:05:48.000
Now you'll see here that the
content of those functions is

00:05:48.120 --> 00:05:49.860
fairly simple in this example.

00:05:49.880 --> 00:05:52.020
This actually gives you a lot of power.

00:05:52.040 --> 00:05:55.640
You could add validation code
there so that no one could

00:05:55.750 --> 00:05:57.700
set a negative diameter.

00:05:57.730 --> 00:06:01.670
Or you could add type checking or
even make this a read-only property by

00:06:01.850 --> 00:06:04.360
leaving out the set function altogether.

00:06:04.450 --> 00:06:07.500
So this gives you a lot of
control from behind the scenes,

00:06:07.520 --> 00:06:11.830
and it can still appear as if
diameter is just a property.

00:06:14.610 --> 00:06:17.720
So you can add these active
properties to any object.

00:06:17.760 --> 00:06:23.230
And from the
JavaScript library perspective,

00:06:23.230 --> 00:06:30.250
you're giving your caller--
you're letting your caller sort

00:06:30.250 --> 00:06:30.300
of ignore all the dirty work
that's done behind the scenes.

00:06:30.300 --> 00:06:30.300
And you can organize that in a
pretty cool and powerful way.

00:06:31.280 --> 00:06:33.200
OK, moving on.

00:06:33.200 --> 00:06:36.840
So the next thing I want to tell
you about is called DOM prototypes.

00:06:36.870 --> 00:06:42.140
This is a way for you to make DOM object
prototypes available for modification.

00:06:42.240 --> 00:06:44.420
So why would you want to
do something like this?

00:06:44.440 --> 00:06:50.060
Well, I'm going to show you an example,
and let's set up a little situation here.

00:06:50.110 --> 00:06:54.370
OK, so let's say you start a new
job for a company that involves

00:06:54.860 --> 00:06:56.760
dealing with a lot of legacy code.

00:06:56.770 --> 00:07:01.730
And the programmer before you designed
this whole web application only for IE.

00:07:02.000 --> 00:07:05.560
So there's IE-specific extensions
sprinkled all throughout the code.

00:07:05.580 --> 00:07:07.340
Now,
you could go through and you could find

00:07:07.340 --> 00:07:11.270
every instance of these IE-specific
extensions and replace them with

00:07:11.270 --> 00:07:15.160
standard calls that will work in
browsers like Safari and Firefox.

00:07:15.200 --> 00:07:20.040
But using DOM prototypes,
you can actually add that IE-specific

00:07:20.040 --> 00:07:25.720
functionality onto your objects
so that they can be accessible.

00:07:25.800 --> 00:07:39.000
[Transcript missing]

00:07:40.080 --> 00:07:41.260
So here's how you do it.

00:07:41.330 --> 00:07:45.860
You'll see at the top here we
have node.prototype.attachEvent.

00:07:45.900 --> 00:07:49.340
I'm just finding this function on the
node prototype so that this will be

00:07:49.340 --> 00:07:51.760
available for all nodes in your document.

00:07:51.830 --> 00:07:57.100
There's some very simple code here
that does a little string magic

00:07:57.100 --> 00:08:01.940
on the arguments and then passes
them right on to addEventListener.

00:08:02.060 --> 00:08:04.060
So you could add this
onto your prototype,

00:08:04.130 --> 00:08:09.210
and then any caller that calls
attachEvent will work in browsers

00:08:09.210 --> 00:08:12.760
like Safari and Firefox just by
calling the addEventListener function

00:08:13.130 --> 00:08:16.470
through this prototype addition.

00:08:16.800 --> 00:08:20.540
So again, this gives you a lot of power.

00:08:20.570 --> 00:08:24.910
And like Keanu,
you can bend objects to your will.

00:08:27.350 --> 00:08:32.890
OK, so the next technology I want to tell
you about is called XSLT Processor.

00:08:33.250 --> 00:08:35.860
Now,
this is a JavaScript object that lets

00:08:35.860 --> 00:08:39.680
you use XSLT transformations from script.

00:08:39.780 --> 00:08:43.560
So many of you may be familiar with
XSLT as a way to apply transforms

00:08:43.560 --> 00:08:47.500
to XML data as you're setting
up your data on your server.

00:08:47.540 --> 00:08:49.860
But this is a way you
can do that on the fly.

00:08:49.900 --> 00:08:54.930
And this technology is already in use for
things like Google Maps and Zillow.com

00:08:55.270 --> 00:09:00.120
to do the map markers on the fly.

00:09:00.520 --> 00:09:02.580
So here's an example of how that works.

00:09:02.590 --> 00:09:06.880
So let's say you have your data and
your style sheet both on the server.

00:09:06.940 --> 00:09:11.850
And you use something from script
like XML HTTP request to get

00:09:11.950 --> 00:09:15.840
that data into documents that
you can access from JavaScript.

00:09:16.080 --> 00:09:20.920
So in script, you go and create an
XSLT processor object.

00:09:20.980 --> 00:09:25.280
And that object allows you to specify
a style sheet and then apply that

00:09:25.410 --> 00:09:30.220
style sheet to a document and have
that transformed document or document

00:09:30.320 --> 00:09:34.020
fragment write available from script.

00:09:34.150 --> 00:09:37.780
So you could apply your
XSLT transformation in script and

00:09:37.780 --> 00:09:43.290
then append your document fragment
to a different part of your page.

00:09:43.380 --> 00:09:47.640
So this allows you to really
mix it up a little bit as far as

00:09:47.720 --> 00:09:50.820
XSLT goes and do things on the fly.

00:09:51.010 --> 00:09:55.460
And this fits right into the
whole Ajax Web 2.0 story.

00:09:55.460 --> 00:09:58.610
It just gives you another
technology that you can use.

00:09:59.750 --> 00:10:03.880
So lastly, I want to tell you about
our support for XPath.

00:10:03.900 --> 00:10:07.620
This is a way you can use XPath
queries right from JavaScript.

00:10:07.710 --> 00:10:12.150
Some of you who have used
XSLT may be familiar with using

00:10:12.270 --> 00:10:16.940
XPath as a way to navigate your
XSLT and your XML documents.

00:10:16.970 --> 00:10:20.800
Well, now you can use that directly to
navigate your HTML documents and

00:10:20.800 --> 00:10:23.970
any other XML documents in Safari.

00:10:24.500 --> 00:10:27.820
So let me show you an example of how
that could be beneficial as opposed

00:10:27.920 --> 00:10:30.960
to just using standard DOM calls.

00:10:31.040 --> 00:10:35.810
So in this example, we have a document,
and we have a few different

00:10:35.810 --> 00:10:37.780
divs in our document.

00:10:37.940 --> 00:10:43.500
Specifically, we want to find all the
divs that have foo class.

00:10:43.500 --> 00:10:47.500
Now, you could find these by
walking your DOM tree,

00:10:47.510 --> 00:10:49.670
inspecting each element,
seeing if it's a div,

00:10:49.810 --> 00:10:53.000
seeing if it has that class,
and a few different functions.

00:10:53.030 --> 00:10:55.870
But using an XPath query,
you can do this in sort of

00:10:55.870 --> 00:10:58.250
a short and concise way.

00:10:59.440 --> 00:11:03.320
Basically, you define a query,
you evaluate that query,

00:11:03.360 --> 00:11:05.160
and you manipulate the result.

00:11:05.300 --> 00:11:08.580
So on the first line here,
you'll see the XPath query.

00:11:08.580 --> 00:11:10.620
And even if you're not
familiar with XPath,

00:11:10.650 --> 00:11:12.200
it's very simple syntax.

00:11:12.230 --> 00:11:15.920
We're looking for all divs
of the class foo class.

00:11:15.930 --> 00:11:18.200
On the second line,
you'll see we evaluate that

00:11:18.200 --> 00:11:20.460
query and store the result,
which is something

00:11:20.460 --> 00:11:22.360
called an XPath result.

00:11:22.380 --> 00:11:25.260
And once we have that XPath result,
there are lots of things

00:11:25.260 --> 00:11:26.120
we can do with it.

00:11:26.120 --> 00:11:29.130
But in this example,
we're using a call called iterate

00:11:29.220 --> 00:11:31.240
next on that XPath result.

00:11:31.370 --> 00:11:33.680
And basically,
with just a few lines of code,

00:11:33.680 --> 00:11:36.860
we can iterate through all these
divs of foo class in the document and

00:11:36.960 --> 00:11:39.190
perform whatever we want on those divs.

00:11:39.500 --> 00:11:41.340
Here, I'm just displaying the inner text.

00:11:41.360 --> 00:11:43.680
But you can do anything you want.

00:11:45.850 --> 00:11:48.350
So just three simple
steps-- creating a query,

00:11:48.420 --> 00:11:52.390
evaluating it,
and manipulating that result.

00:11:53.060 --> 00:11:57.280
So those are just a few technologies that
you can add to your tool belt and use

00:11:57.400 --> 00:12:03.440
as you're creating JavaScript libraries
and Ajax applications.

00:12:03.500 --> 00:12:06.180
Check them out and see
if they'll work for you.

00:12:07.930 --> 00:12:13.140
OK, so next I want to talk a
little bit about graphics,

00:12:13.200 --> 00:12:18.520
specifically scalar vector
graphics and canvas.

00:12:21.900 --> 00:12:23.520
SVG, scalable vector graphics.

00:12:23.520 --> 00:12:24.540
What is it?

00:12:24.550 --> 00:12:27.170
Well, it's an XML language
for defining graphics.

00:12:27.500 --> 00:12:34.560
So you define all your circles and lines
and paths and fills all within XML.

00:12:34.560 --> 00:12:38.050
Because it's XML,
you have a document object model.

00:12:38.060 --> 00:12:44.220
Because you have a DOM,
JavaScript can manipulate

00:12:44.220 --> 00:12:46.850
that DOM and create animations
and modifications on the fly.

00:12:47.300 --> 00:12:53.960
And right there in the name,
scalable vector graphics are scalable.

00:12:53.990 --> 00:12:54.300
Yay!

00:12:56.910 --> 00:12:59.680
And this will be important in
the future as more and more

00:12:59.680 --> 00:13:03.450
browsers have support for SVG,
and we're looking for

00:13:03.450 --> 00:13:04.960
a scalable solution.

00:13:05.580 --> 00:13:09.640
So SVG is what I like to
call an emerging technology.

00:13:09.740 --> 00:13:10.740
So what does that mean?

00:13:10.950 --> 00:13:13.980
Well, SVG has actually been around
for a really long time,

00:13:14.030 --> 00:13:16.850
but we're just starting to
see it come into its own,

00:13:16.850 --> 00:13:17.580
I think.

00:13:17.580 --> 00:13:20.490
Safari has recently added
this native SVG support,

00:13:20.490 --> 00:13:23.600
and you're starting to see
more and more complete native

00:13:23.600 --> 00:13:25.400
support in other browsers.

00:13:25.400 --> 00:13:28.730
But previously,
you could only view SVG content using

00:13:28.730 --> 00:13:32.580
a plugin like the Adobe SVG plugin,
and that limited the scope of

00:13:32.640 --> 00:13:34.930
what you could really do with SVG.

00:13:34.940 --> 00:13:38.180
So you're starting to see,
as browsers add this native support,

00:13:38.180 --> 00:13:40.520
more and more powerful
applications of SVG.

00:13:40.520 --> 00:13:43.020
So how do you create SVG content?

00:13:43.020 --> 00:13:46.990
Well, there's a few really easy ways
and a few more difficult ways.

00:13:47.530 --> 00:13:52.890
Graphics programs like Adobe Illustrator
and the open source Inkscape allow

00:13:52.890 --> 00:13:55.450
you to just export right to SVG.

00:13:55.470 --> 00:13:58.520
So anything that you can create
in these graphics applications,

00:13:58.680 --> 00:13:59.900
you export right to SVG.

00:14:01.480 --> 00:14:03.970
Now,
for those of you who love to write XML,

00:14:03.970 --> 00:14:07.280
you can hand roll your content
using the SVG language.

00:14:07.280 --> 00:14:10.620
The W3C has that specification
right on their website,

00:14:10.730 --> 00:14:16.630
and there's some great demos out there
and tutorials to help you get started.

00:14:18.090 --> 00:14:20.020
So like I said before,
I think what you're going to start

00:14:20.170 --> 00:14:24.240
to see in the future is more and more
complete native support in browsers.

00:14:24.280 --> 00:14:26.930
And as that happens,
you're going to see it sort

00:14:27.060 --> 00:14:29.300
of spread like wildfire,
I think.

00:14:29.360 --> 00:14:31.430
So let me show you a demo of
how this can be really powerful.

00:14:31.430 --> 00:14:36.160
Demo?

00:14:41.400 --> 00:14:42.490
All righty.

00:14:42.660 --> 00:14:47.610
So SVG is available in the
Leopard preview that you all have,

00:14:47.680 --> 00:14:49.580
and it's also available
in the WebKit nightlies,

00:14:49.580 --> 00:14:52.060
which we'll talk a little
bit more about later.

00:14:52.060 --> 00:14:57.200
So how many of you have played
with the World Clock Widget?

00:14:57.270 --> 00:14:58.240
Anyone?

00:14:58.590 --> 00:14:59.220
Anyone?

00:14:59.220 --> 00:15:00.820
It's pretty hot.

00:15:03.600 --> 00:15:10.110
So I made a little demo in SVG that
resembles the World Clock widget,

00:15:10.200 --> 00:15:12.600
and I think it's pretty cool.

00:15:12.730 --> 00:15:15.960
So some of you may not know this,
but the rotating hands

00:15:15.960 --> 00:15:18.540
in the World Clock widget
were made using Canvas.

00:15:18.640 --> 00:15:22.150
So I'm going to show you how to do
that in SVG and how easy it can be.

00:15:22.260 --> 00:15:27.480
All right, so here's my clock.

00:15:27.480 --> 00:15:29.480
Ooh.

00:15:31.530 --> 00:15:36.140
OK, so let's check it out a
little bit and watch it scale,

00:15:36.170 --> 00:15:41.500
watch how it doesn't lose any
of its detail and keeps ticking.

00:15:41.520 --> 00:15:43.080
OK.

00:15:43.880 --> 00:15:48.380
So you're actually going to be surprised
at how little code this took to work.

00:15:48.430 --> 00:15:51.500
It took me one morning when
I was just messing around

00:15:51.500 --> 00:15:53.360
to get this up and running.

00:15:53.360 --> 00:15:57.460
And I think you guys will
find this pretty exciting.

00:15:57.510 --> 00:15:59.600
Let's take a look at it.

00:16:00.840 --> 00:16:04.180
Okay, so here we go here.

00:16:04.180 --> 00:16:08.500
I want to have you guys take note
that in the body's onload handler,

00:16:08.500 --> 00:16:10.030
I call start clock.

00:16:10.090 --> 00:16:12.840
We'll look at that in a
minute to see what that does.

00:16:12.920 --> 00:16:15.780
Here comes the SVG goodness.

00:16:15.780 --> 00:16:19.560
Here I've defined a linear gradient
that I'm going to use later to

00:16:19.560 --> 00:16:21.660
make the sexy black background.

00:16:25.340 --> 00:16:29.890
Here I draw the clock using a circle.

00:16:29.980 --> 00:16:32.510
There's my gradient.

00:16:32.520 --> 00:16:36.750
I draw the numbers on the
clock using some magic numbers.

00:16:37.210 --> 00:16:41.470
And here I draw the hands with
a few polygons and some circles

00:16:41.470 --> 00:16:42.870
for the center of the clock.

00:16:42.890 --> 00:16:47.690
What I want you to take note of here is
that I gave each of these polygons an ID,

00:16:47.690 --> 00:16:49.690
hours hand, minutes hand,
and seconds hand,

00:16:49.760 --> 00:16:51.540
so I can get to those elements later.

00:16:51.540 --> 00:16:54.990
Now, when I first drew these,
I had them drawing pointed

00:16:55.410 --> 00:16:58.980
straight up so that I could
rotate them however I want them.

00:16:58.980 --> 00:17:01.150
And if I weren't ever
going to start the clock,

00:17:01.150 --> 00:17:03.230
they would all just be drawn straight up.

00:17:03.320 --> 00:17:06.180
Okay, so let's take a look
at the JavaScript here.

00:17:07.470 --> 00:17:11.460
Start clock updates the clock and
then calls set interval so that

00:17:11.460 --> 00:17:13.590
update clock gets called every second.

00:17:13.640 --> 00:17:16.620
There are other ways you could do this,
but this was the easiest.

00:17:16.700 --> 00:17:21.880
Update clock gets the current date
and time and calls a function called

00:17:21.880 --> 00:17:25.450
rotate hands with the current hours,
minutes, and seconds.

00:17:25.460 --> 00:17:26.910
Oops.

00:17:26.920 --> 00:17:31.900
Okay, rotate hands is actually
a fairly short function.

00:17:31.900 --> 00:17:37.110
Here, I store the minutes hand,
hours hand, and seconds hand.

00:17:37.180 --> 00:17:40.880
I can also use the seconds hand by
calling get element by ID and storing

00:17:40.880 --> 00:17:42.900
those in a variable and variables.

00:17:42.960 --> 00:17:48.860
And then I do just a little bit of
math to calculate the correct angle.

00:17:48.860 --> 00:17:53.450
I construct a string using this
rotate function and the angle

00:17:53.570 --> 00:17:58.590
I've calculated centered around
the center point of the clock.

00:17:59.960 --> 00:18:04.840
And then, with these three lines of code,
I rotate to the correct position.

00:18:04.880 --> 00:18:09.370
I set the attribute transform
with my rotate function,

00:18:09.370 --> 00:18:10.320
and that's it.

00:18:10.390 --> 00:18:11.260
That's all I need to do.

00:18:11.260 --> 00:18:14.660
It does that every second,
and that's how I have a working clock.

00:18:14.800 --> 00:18:18.480
So in about 20 lines of code here,
I have a pretty kick-ass looking clock.

00:18:18.520 --> 00:18:23.030
Let's take a look.

00:18:27.500 --> 00:18:29.500
Let's go back to the slides.

00:18:29.500 --> 00:18:33.110
Slides, please.

00:18:38.750 --> 00:18:43.450
So I highly recommend you check that
out and see what it can do for you.

00:18:43.480 --> 00:18:44.690
OK.

00:18:44.870 --> 00:18:49.830
So next, let's talk about Canvas and the
changes we've made to Canvas.

00:18:51.780 --> 00:18:53.660
So for those of you who
aren't familiar with it,

00:18:53.840 --> 00:18:57.310
canvas is a way you can dynamically
render scriptable bitmaps.

00:18:57.510 --> 00:19:00.330
Define a canvas element,
and then you can draw into

00:19:00.630 --> 00:19:03.600
that bitmap any time you like.

00:19:04.410 --> 00:19:07.540
So the canvas element has
an interesting history.

00:19:07.550 --> 00:19:11.260
This is an element we
introduced in Safari 2.0,

00:19:11.280 --> 00:19:13.840
and it was used in tons
of widgets out there.

00:19:13.840 --> 00:19:18.540
And because it became so popular,
it was adopted by other browser engines.

00:19:18.560 --> 00:19:20.460
And because other browser
engines adopted it,

00:19:20.460 --> 00:19:23.680
and it was so popular,
we worked with the What Working group

00:19:23.790 --> 00:19:26.180
to define a specification.

00:19:26.360 --> 00:19:28.770
So through all of this,
we decided that there were

00:19:28.890 --> 00:19:31.300
a few improvements that
we could make to Canvas.

00:19:31.300 --> 00:19:34.970
And I want to make sure that you guys
know about those improvements so that not

00:19:34.970 --> 00:19:38.400
only can you take full advantage of them,
but you can make sure to update

00:19:38.400 --> 00:19:42.290
your widgets and your websites to
work well within these improvements.

00:19:42.990 --> 00:19:45.710
OK, the first improvement that I'm
going to tell you about is that

00:19:45.710 --> 00:19:48.220
Canvas now supports fallback content.

00:19:48.250 --> 00:19:53.200
And for you, this means that a close
tag is now required.

00:19:53.750 --> 00:19:57.460
So in this example,
between your begin tag and your end tag,

00:19:57.460 --> 00:19:59.880
there's some alternate content
that browsers that don't

00:19:59.980 --> 00:20:03.550
support the canvas element,
like IE, will display.

00:20:03.640 --> 00:20:07.990
So this gives you an opportunity
to provide that alternate content.

00:20:08.970 --> 00:20:11.930
And if you don't provide an end tag,
we won't know where that

00:20:11.930 --> 00:20:13.110
fallback content ends.

00:20:13.270 --> 00:20:16.050
So include your close tag.

00:20:16.780 --> 00:20:19.800
All right, next,
the size of the bitmap for the

00:20:19.890 --> 00:20:23.540
canvas element does not have to
be the same size of the element.

00:20:23.540 --> 00:20:24.360
This is a change.

00:20:24.360 --> 00:20:28.380
So what this means for you is that width
and height attributes need to be defined.

00:20:28.440 --> 00:20:31.540
So in this example,
I've defined a width and

00:20:31.540 --> 00:20:35.680
height of 150 and 150,
and that defines the size of the bitmap.

00:20:35.680 --> 00:20:39.180
But you can define an entirely
different size in CSS for what

00:20:39.180 --> 00:20:41.040
you want the element to draw in.

00:20:41.040 --> 00:20:46.590
So for this 150 by 150 bitmap,
you could define an entirely

00:20:46.590 --> 00:20:46.650
different size in CSS for what
you want the element to draw in.

00:20:46.750 --> 00:20:58.790
So for this 150 by 150 bitmap,
you could define an entirely

00:20:58.790 --> 00:21:09.430
different size in CSS for what
you want the element to draw in.

00:21:09.650 --> 00:21:14.390
OK, next, drawing into the canvas bitmap
is no longer tied to rendering.

00:21:14.730 --> 00:21:18.080
This was a common request we heard that
people wanted to be able to draw into the

00:21:18.400 --> 00:21:20.430
bitmap before layout had even occurred.

00:21:20.610 --> 00:21:25.980
So what this means is that if you're
expecting the bitmap to be clear,

00:21:26.150 --> 00:21:28.160
you're going to have
to clear it yourself.

00:21:28.160 --> 00:21:31.670
There were some instances before
where a rendering change would

00:21:31.800 --> 00:21:34.660
cause the bitmap to clear,
and that doesn't happen anymore.

00:21:34.830 --> 00:21:40.340
So go ahead and use this clear act
function to clear the bitmap yourself.

00:21:41.210 --> 00:21:45.640
OK, lastly, functions like fill, stroke,
and clip no longer clear

00:21:45.640 --> 00:21:47.270
the path when they're done.

00:21:47.410 --> 00:21:50.040
So this means that you need
to add a begin path call

00:21:50.040 --> 00:21:52.020
before describing a new path.

00:21:52.070 --> 00:21:52.910
Makes sense, right?

00:21:53.160 --> 00:21:56.080
So just before you go
to draw that new path,

00:21:56.110 --> 00:21:57.660
add begin path.

00:21:57.800 --> 00:22:00.960
So those are the improvements
that we have added to Canvas.

00:22:01.050 --> 00:22:03.380
And I highly recommend that you
check out your current widgets

00:22:03.460 --> 00:22:08.420
and websites and make sure that
they work with these improvements.

00:22:08.620 --> 00:22:11.930
So just to wrap up the graphics section,
we talked a little bit about

00:22:11.930 --> 00:22:18.460
scalable vector graphics,
which is an XML language that provides

00:22:18.460 --> 00:22:22.990
that-- for which the graphics that
you draw exist in that XML document,

00:22:23.010 --> 00:22:24.820
so you can modify it later.

00:22:24.900 --> 00:22:27.870
And for canvas,
it's the scriptable bitmap

00:22:28.090 --> 00:22:30.470
where you draw into it,
and then that data only

00:22:30.560 --> 00:22:32.380
exists as those pixels.

00:22:32.500 --> 00:22:35.520
So please take a look at the
improvements to canvas and the

00:22:35.520 --> 00:22:40.230
power of SVG and see how that fits
into your current web development.

00:22:41.210 --> 00:22:44.490
So I'd like to invite my colleague
Beth Dakin up here to tell

00:22:44.490 --> 00:22:46.980
you a little bit about style.

00:22:54.500 --> 00:22:56.960
Thanks, Adele.

00:22:56.980 --> 00:22:58.200
Hi, everybody.

00:22:58.300 --> 00:23:00.380
Let's talk about style.

00:23:00.900 --> 00:23:03.960
So there are two main things that
I want to talk to you all about today.

00:23:04.120 --> 00:23:06.480
First,
creating high definition web content.

00:23:06.480 --> 00:23:09.490
We think this is going to be a really
important thing in the coming years as

00:23:09.490 --> 00:23:11.830
resolution independence really takes off.

00:23:11.970 --> 00:23:14.800
And secondly,
I want to talk to you about CSS3.

00:23:14.960 --> 00:23:16.880
Specifically,
I want to tell you about some

00:23:16.880 --> 00:23:20.330
cool new properties that we've
implemented in our browser that we

00:23:20.330 --> 00:23:21.710
want you all to take advantage of.

00:23:21.790 --> 00:23:25.190
Some of them will be really helpful in
creating high definition web content,

00:23:25.310 --> 00:23:29.660
and all of them are really helpful
for making your sites look awesome.

00:23:29.890 --> 00:23:33.150
So first, let's talk about creating
high definition web content.

00:23:33.290 --> 00:23:36.020
So if you all were at
Bertrand's keynote yesterday,

00:23:36.020 --> 00:23:40.580
you heard Peter Graffagnino talking about
resolution independence and how that's

00:23:40.680 --> 00:23:42.950
something we really want for Mac OS X.

00:23:43.050 --> 00:23:47.910
So that's sort of what's inspiring this
whole high definition web content thing.

00:23:48.050 --> 00:23:51.910
Because as we're making our
operating system take advantage of

00:23:51.910 --> 00:23:55.690
these extra pixels and the details
that you can gain from them,

00:23:55.820 --> 00:23:58.560
we want you all to be able to
do the same with your websites,

00:23:58.560 --> 00:24:00.710
because this is a really great
opportunity to have your sites

00:24:00.710 --> 00:24:06.040
and widgets look even more
incredible on certain displays.

00:24:06.130 --> 00:24:09.860
So before we talk about creating
high definition web content,

00:24:09.870 --> 00:24:12.120
let's do a little bit of a review
so that we're all on the same

00:24:12.180 --> 00:24:14.280
page with resolution independence.

00:24:14.300 --> 00:24:17.100
Let's talk about what it is,
how it will affect your

00:24:17.100 --> 00:24:21.560
existing web content,
and finally, why you should care at all.

00:24:21.760 --> 00:24:26.430
So first things first,
what is resolution independence anyway?

00:24:26.780 --> 00:24:30.330
Okay, so I had this 15-inch
PowerBook that I was using for

00:24:30.330 --> 00:24:31.560
a while for a couple years.

00:24:31.560 --> 00:24:32.540
It was a great machine.

00:24:32.570 --> 00:24:33.420
I totally loved it.

00:24:33.420 --> 00:24:34.240
It was awesome.

00:24:34.240 --> 00:24:37.640
But then a couple months ago,
I upgraded to a MacBook Pro.

00:24:37.640 --> 00:24:41.880
So there are a lot of obvious
differences between these two machines.

00:24:41.880 --> 00:24:43.880
You know, my MacBook Pro is way faster.

00:24:43.880 --> 00:24:44.910
It's Intel inside.

00:24:44.910 --> 00:24:46.360
It was really exciting.

00:24:46.360 --> 00:24:49.190
But the very first thing that
I noticed as a difference when

00:24:49.200 --> 00:24:52.880
I turned on my new machine is that
everything was a little bit smaller.

00:24:53.120 --> 00:24:55.420
And sure enough,
another difference between these

00:24:55.420 --> 00:24:58.580
two machines is that even though
they both have 15-inch screens,

00:24:58.600 --> 00:25:00.920
my MacBook Pro has a
slightly better resolution.

00:25:00.920 --> 00:25:04.240
Now, I'm sure you've all experienced
this to a certain extent.

00:25:04.240 --> 00:25:07.740
Maybe you've even used one of those
really tricked-out monitors on a

00:25:07.740 --> 00:25:10.000
PC with an incredibly high resolution.

00:25:10.050 --> 00:25:12.290
You have these small little
texts that's hard to see,

00:25:12.300 --> 00:25:13.600
but you have all this space.

00:25:13.680 --> 00:25:17.160
But even if you haven't experienced that,
I'm sure that you can imagine that if

00:25:17.160 --> 00:25:21.760
we keep going down this road of creating
higher and higher resolution hardware

00:25:21.760 --> 00:25:24.120
without doing anything to ourselves,
we're going to end up with a software.

00:25:24.190 --> 00:25:27.220
Soon everything is just going to be
itty-bitty little dots on the screen,

00:25:27.220 --> 00:25:28.930
and you'll barely be
able to see it at all.

00:25:29.120 --> 00:25:32.480
So the idea behind resolution
independence is that there's

00:25:32.480 --> 00:25:35.230
more than one thing that you can
gain from these extra pixels.

00:25:35.320 --> 00:25:37.720
You can gain real estate,
which you're already getting,

00:25:37.720 --> 00:25:39.200
but you can also gain detail.

00:25:39.490 --> 00:25:42.570
Everything should be able to be
whatever size you want it to be,

00:25:42.700 --> 00:25:45.100
and you should be able to choose
to get extra detail from these

00:25:45.150 --> 00:25:46.520
pixels if that's what you want.

00:25:46.620 --> 00:25:50.220
So let's talk a little bit about some
of the jargon you're going to hear me

00:25:50.220 --> 00:25:52.200
and other people saying about this.

00:25:52.310 --> 00:25:54.820
First, DPI stands for dots per inch.

00:25:54.820 --> 00:25:57.400
A lot of you probably
know this already anyway.

00:25:57.830 --> 00:26:01.920
This is the idea that there's
hardware that's being created

00:26:01.920 --> 00:26:03.720
with more and more dots per inch.

00:26:03.840 --> 00:26:05.810
More dots, basically.

00:26:05.830 --> 00:26:10.180
So, *audience laughs*

00:26:10.510 --> 00:26:13.720
Mac OS X has had this
historical assumption that

00:26:13.720 --> 00:26:18.070
you're operating at 72 DPI,
regardless of the actual

00:26:18.070 --> 00:26:19.940
DPI of your device.

00:26:19.990 --> 00:26:23.020
So another thing you'll hear
me saying a lot is a scale

00:26:23.030 --> 00:26:25.730
factor or a device pixel ratio.

00:26:25.920 --> 00:26:28.460
So this is, again,
the idea with resolution independence,

00:26:28.460 --> 00:26:31.200
you can apply a scale factor to your UI.

00:26:31.200 --> 00:26:34.860
And this is based on this
historical 72 DPI assumption,

00:26:34.860 --> 00:26:40.220
so that 72 DPI corresponds
to a 1.0 scale factor.

00:26:40.390 --> 00:26:41.150
All right.

00:26:41.280 --> 00:26:45.010
So what does this mean in terms of
where the scale factor comes from?

00:26:45.010 --> 00:26:47.580
A little bit of math for you.

00:26:47.580 --> 00:26:49.540
You have 72 DPI.

00:26:49.540 --> 00:26:51.400
It corresponds to a 1.0 scale factor.

00:26:51.400 --> 00:26:55.660
So let's say you have
a 1600 by 1200 display.

00:26:55.660 --> 00:26:58.020
Let's say it's 15 inches, whatever.

00:26:58.800 --> 00:27:01.400
You know,
it's this really high-resolution screen,

00:27:01.400 --> 00:27:02.390
but everything's too small.

00:27:02.490 --> 00:27:03.500
You're not really happy.

00:27:03.500 --> 00:27:08.440
You wish that it looked like it did on
your old-school 1024 by 768 display.

00:27:08.440 --> 00:27:10.040
You wish everything were the same size.

00:27:10.100 --> 00:27:13.410
So in order to achieve that,
you would have to apply a

00:27:13.410 --> 00:27:19.800
very memorable scale factor,
1600 divided by 1024 equals 1.5625,

00:27:19.800 --> 00:27:23.600
to the user interface of your new
high-resolution device so that

00:27:23.960 --> 00:27:28.000
everything would be the same size
as it was on your old device.

00:27:28.180 --> 00:27:28.780
But of course, you would have to apply a
very memorable scale factor.

00:27:28.800 --> 00:27:32.900
you would be gaining detail
from all of these extra pixels.

00:27:33.440 --> 00:27:36.790
All right, how will this affect your
existing web content?

00:27:36.920 --> 00:27:40.910
The first thing that I need
to stress here is that a PX,

00:27:40.910 --> 00:27:44.760
the pixels that you specify
in your style sheets,

00:27:44.810 --> 00:27:48.220
do not correspond to actual
pixels on the device.

00:27:48.240 --> 00:27:50.250
One PX is not a device pixel.

00:27:50.430 --> 00:27:51.760
They're not the same thing.

00:27:51.770 --> 00:27:56.460
OK, so what is a CSS pixel if it's
not the same as one of the

00:27:56.470 --> 00:28:00.790
little dots on your device that
you're getting more and more of?

00:28:00.950 --> 00:28:03.340
It's a relative unit inside the web view.

00:28:03.390 --> 00:28:05.820
Though it is not specified
in any standards,

00:28:05.820 --> 00:28:09.350
it is agreed upon by all
browsers that 96 of these

00:28:09.400 --> 00:28:12.020
CSS pixels correspond to one inch.

00:28:12.070 --> 00:28:14.140
The idea here is that you
have these absolute units,

00:28:14.250 --> 00:28:16.970
such as the inch,
and you want them to look something

00:28:16.970 --> 00:28:20.310
like an inch in real life as you
move between different devices.

00:28:20.410 --> 00:28:22.240
So obviously,
if you have an inch specified

00:28:22.240 --> 00:28:25.420
in your style sheet on a really,
really low resolution device,

00:28:25.520 --> 00:28:28.270
it's going to be represented
by a different number of actual

00:28:28.270 --> 00:28:32.360
pixels on the screen than it will
have to be represented on a very,

00:28:32.360 --> 00:28:33.800
very high resolution device.

00:28:33.800 --> 00:28:37.260
But you still want it to look
something like an inch in both spaces.

00:28:37.290 --> 00:28:41.500
And in order for the entire internet
and the web not to completely

00:28:41.610 --> 00:28:45.140
misrender between these devices,
you need to have a consistent

00:28:45.140 --> 00:28:49.040
relationship between your
CSS pixel and your absolute units,

00:28:49.070 --> 00:28:51.820
such as the inch, that always need to
look roughly the same.

00:28:52.030 --> 00:28:54.640
So therefore,
96 CSS pixels equals one inch.

00:28:54.780 --> 00:28:57.490
That's the relationship
that has been established.

00:28:57.750 --> 00:28:58.500
Finally, we scale them for you.

00:28:58.500 --> 00:28:59.820
We scale them for you.

00:28:59.820 --> 00:29:02.540
You don't need to worry about
changing your style sheets,

00:29:02.550 --> 00:29:05.040
the numbers and measurements
that you've specified,

00:29:05.080 --> 00:29:08.520
to account for resolution independence,
because it's all being taken

00:29:08.640 --> 00:29:09.770
care of for you in WebKit.

00:29:09.880 --> 00:29:11.000
The same things will work.

00:29:11.000 --> 00:29:14.800
They'll just scale up
as you want them to.

00:29:14.810 --> 00:29:17.370
All right, so why do you care?

00:29:18.170 --> 00:29:21.670
So as I was just explaining,
for the most part, it's all automatic.

00:29:21.930 --> 00:29:23.680
Your text is going to look awesome.

00:29:23.800 --> 00:29:27.090
We've put a lot of work into WebKit and
the other parts of Mac OS X so

00:29:27.120 --> 00:29:29.170
that as everything scales up,
it's going to have incredible

00:29:29.170 --> 00:29:30.410
detail and just look fantastic.

00:29:30.460 --> 00:29:34.010
So text, text decoration,
all of that stuff looks fantastic.

00:29:34.130 --> 00:29:35.950
Form controls look impeccable.

00:29:35.950 --> 00:29:39.920
Borders, basically everything that
WebKit draws looks amazing.

00:29:39.920 --> 00:29:42.090
So...

00:29:43.370 --> 00:29:45.910
So there are some things
that WebKit doesn't draw,

00:29:46.000 --> 00:29:46.350
really.

00:29:46.360 --> 00:29:47.500
It displays.

00:29:47.590 --> 00:29:55.430
And probably the most notable
example of that are images.

00:29:55.650 --> 00:29:58.460
If an image is not a
high resolution image,

00:29:58.500 --> 00:30:01.020
WebKit can't make it look
like a high resolution image.

00:30:01.130 --> 00:30:06.060
So the idea of making high definition
web content really comes back to images.

00:30:06.120 --> 00:30:09.220
There's a good analogy here
to be had with television.

00:30:09.400 --> 00:30:13.300
So you have your old TV,
you watch your shows on it, it's great,

00:30:13.300 --> 00:30:14.120
it's fine.

00:30:14.280 --> 00:30:17.710
You decide to upgrade, though,
to a high definition television.

00:30:17.910 --> 00:30:22.320
You can view the same content on your
new fancy high resolution display.

00:30:22.410 --> 00:30:25.610
And it looks pretty much like
it did on your old television.

00:30:25.860 --> 00:30:27.700
Maybe it even looks a little bit better.

00:30:27.820 --> 00:30:31.680
But there is some content that's
made specifically for this device,

00:30:31.680 --> 00:30:36.180
content that really takes
advantage of the hardware,

00:30:36.330 --> 00:30:38.470
specifically HDTV.

00:30:39.030 --> 00:30:40.900
This content just looks incredible.

00:30:40.940 --> 00:30:44.900
Your old content will work fine,
but you have an opportunity here to

00:30:45.020 --> 00:30:48.590
take advantage of the extra pixels
that you're being given and make

00:30:48.590 --> 00:30:53.430
your web content look even more
incredible than it ever did before,

00:30:53.430 --> 00:30:55.210
just like HDTV.

00:30:55.540 --> 00:30:59.120
So again, in terms of creating high
resolution web content,

00:30:59.120 --> 00:31:02.850
it comes down to finding ways to
integrate high resolution images

00:31:02.850 --> 00:31:04.610
and artwork into your web content.

00:31:04.700 --> 00:31:07.420
So that's what I'm going to talk
about for the rest of our time talking

00:31:07.420 --> 00:31:10.310
about high definition web content.

00:31:11.170 --> 00:31:14.340
All right, so earlier Adele was
telling you all about SVG.

00:31:14.560 --> 00:31:16.740
You know, it scales,
so you might be thinking,

00:31:16.790 --> 00:31:20.140
this could be a great solution
for high-definition web content.

00:31:20.140 --> 00:31:23.940
It will look fine on regular devices.

00:31:23.940 --> 00:31:26.580
It will scale up perfectly
with other devices,

00:31:26.670 --> 00:31:29.240
so you don't need to worry about it.

00:31:29.260 --> 00:31:31.550
So in a lot of ways,
this is a great idea.

00:31:31.940 --> 00:31:36.400
But there are some problems with
SVG and other scalable vector graphics,

00:31:36.410 --> 00:31:39.780
such as PDF, at least right now,
so that it's not really

00:31:39.780 --> 00:31:41.290
a great solution today.

00:31:41.410 --> 00:31:44.500
For instance,
there is the image tag problem.

00:31:44.620 --> 00:31:49.460
Safari is the only browser that supports
PDF as the valid source of an image tag.

00:31:49.600 --> 00:31:53.050
So if you use PDFs, it would only work in
Safari with your image tags.

00:31:53.210 --> 00:31:56.160
Safari and Firefox,
neither of them support SVG as

00:31:56.190 --> 00:31:58.620
a valid source for an image tag.

00:31:58.800 --> 00:32:01.520
So basically what this means is
that to integrate these image

00:32:01.630 --> 00:32:04.630
formats into your web content,
you would have to completely

00:32:04.630 --> 00:32:05.750
abolish the image tag.

00:32:05.880 --> 00:32:07.570
This would be a whole
lot of work for you,

00:32:07.700 --> 00:32:11.630
So it's really not terribly ideal,
at least right now.

00:32:11.630 --> 00:32:13.360
What's more,
it wouldn't work in old versions of

00:32:13.430 --> 00:32:15.780
browsers that currently support SVG.

00:32:15.820 --> 00:32:18.270
Won't work in browsers that
don't support SVG at all.

00:32:18.540 --> 00:32:21.100
And even though this might
be a great solution someday,

00:32:21.140 --> 00:32:23.780
it will never be a very good
solution for photographs.

00:32:23.800 --> 00:32:28.110
Vector graphics just aren't the
best format for photographs.

00:32:28.200 --> 00:32:30.840
So resolution-independent
images might work great for

00:32:30.840 --> 00:32:36.160
high-definition web content someday,
and we think that they will, but not yet.

00:32:36.740 --> 00:32:39.990
All right, so what about just using
high resolution images?

00:32:40.120 --> 00:32:43.000
What about replacing all of the
artwork that you currently have

00:32:43.000 --> 00:32:46.680
in your web content just with high
resolution versions of the same thing?

00:32:46.780 --> 00:32:48.980
So in a lot of ways,
this seems like a great idea.

00:32:48.980 --> 00:32:50.460
It's a simple bait and switch.

00:32:50.460 --> 00:32:52.860
You just create high resolution
versions of your artwork,

00:32:52.980 --> 00:32:56.060
replace the little paths that
you have in your content.

00:32:56.060 --> 00:32:57.710
It's fine, right?

00:32:57.950 --> 00:33:00.870
Well, see,
there are some problems here also.

00:33:00.970 --> 00:33:06.040
Primarily, these high resolution
images tend to be huge.

00:33:06.170 --> 00:33:07.300
They're big files.

00:33:07.500 --> 00:33:09.440
You're going to have
everybody downloading them,

00:33:09.440 --> 00:33:13.710
even people who can't take advantage of
all of the extra detail that you get,

00:33:13.710 --> 00:33:17.150
people who don't have high
resolution devices to view them on.

00:33:17.280 --> 00:33:19.720
So everyone's going to be
downloading these huge images.

00:33:19.720 --> 00:33:21.330
You're going to have to store them all.

00:33:21.430 --> 00:33:23.220
Basically,
it's going to increase bandwidth.

00:33:23.340 --> 00:33:25.120
It's going to make things slower.

00:33:25.170 --> 00:33:29.110
It's going to clog the tubes.

00:33:29.510 --> 00:33:36.370
So we've talked about two solutions
that aren't going to work.

00:33:36.550 --> 00:33:39.640
So why don't we talk
about something that will?

00:33:39.940 --> 00:33:45.340
This is an idea that we've come up with
called the resolution-determined image.

00:33:45.340 --> 00:33:47.720
The idea here is that you
could have images available

00:33:48.020 --> 00:33:50.640
of different resolutions.

00:33:51.100 --> 00:33:53.800
And you could have a style
sheet in which you specify

00:33:53.800 --> 00:33:56.070
exactly what you have available.

00:33:56.170 --> 00:33:59.160
And then the style sheet is
smart enough to know which

00:33:59.160 --> 00:34:01.720
one to display in the browser.

00:34:01.810 --> 00:34:04.440
This can be achieved
with CSS3 media queries.

00:34:04.500 --> 00:34:07.320
And I'll be talking about
specifically how to do this later,

00:34:07.360 --> 00:34:13.390
but the idea here is that the resolution
of the device that is viewing the content

00:34:13.470 --> 00:34:18.050
and the scale factor that is applied to
it determines which image you select,

00:34:18.050 --> 00:34:20.950
which image is downloaded by the user,
and which image they end

00:34:21.100 --> 00:34:22.430
up seeing in their browser.

00:34:22.550 --> 00:34:25.080
So it's a resolution-determined image.

00:34:25.170 --> 00:34:29.510
CSS3 media queries give you a way
to conditionally include certain

00:34:29.650 --> 00:34:33.120
style rules based on characteristics
of the device that's viewing them.

00:34:33.190 --> 00:34:35.630
And we'll get to how to
do that in a little bit.

00:34:35.710 --> 00:34:39.520
Another thing is that we've extended
the DOM so that you can access the

00:34:39.650 --> 00:34:44.640
device pixel ratio through your
JavaScript with window.devicepixelratio.

00:34:44.800 --> 00:34:47.250
So this is pretty cool.

00:34:47.390 --> 00:34:49.080
This has some obvious applications.

00:34:49.080 --> 00:34:53.330
In that,
if you're setting the source of an image

00:34:53.670 --> 00:34:57.760
tag or an image through your JavaScript,
then you can obviously select a

00:34:57.760 --> 00:35:02.040
higher resolution image if you know
that you have a scale factor applied.

00:35:02.150 --> 00:35:04.240
But you all know the power of JavaScript.

00:35:04.240 --> 00:35:05.940
You can do crazy things with it.

00:35:05.940 --> 00:35:09.980
You could render an entirely different
web page if you wanted if somebody were

00:35:09.980 --> 00:35:11.760
viewing it with a scale factor applied.

00:35:11.760 --> 00:35:13.800
And why you would want to do that,
I'm not sure.

00:35:13.800 --> 00:35:14.660
But you can.

00:35:14.860 --> 00:35:17.970
So this is a really powerful tool,
and we want you all to know about

00:35:17.970 --> 00:35:19.060
it and take advantage of it.

00:35:19.090 --> 00:35:20.900
If you want.

00:35:21.090 --> 00:35:23.730
So for creating high
definition web content,

00:35:23.840 --> 00:35:26.450
we think this is going to be really
important in the coming years.

00:35:26.750 --> 00:35:29.860
And this is an ongoing discussion
we want to keep having with other

00:35:29.860 --> 00:35:33.090
browser vendors and people like
yourselves about the best way to do it.

00:35:33.170 --> 00:35:35.280
But right now,
we think that some great ways to do

00:35:35.280 --> 00:35:38.560
it are to use resolution determined
images and to take advantage of

00:35:38.560 --> 00:35:42.920
the fact that you can access the
device pixel ratio through the DOM.

00:35:42.920 --> 00:35:47.320
That is something, by the way,
that is currently an extension

00:35:47.320 --> 00:35:49.270
that we've applied to Safari,
and we're pushing it

00:35:49.270 --> 00:35:51.760
into standardization,
much like we did with Canvas,

00:35:51.870 --> 00:35:56.110
so that hopefully it will soon be
implemented in other browsers as well.

00:35:56.490 --> 00:35:57.750
All right.

00:35:57.880 --> 00:36:00.340
Let's talk about CSS3.

00:36:00.490 --> 00:36:03.970
I'm going to show you how to do some
of these high definition web content

00:36:03.970 --> 00:36:06.480
things at the beginning of this section,
too.

00:36:06.640 --> 00:36:09.410
So first, a little bit about CSS3.

00:36:09.760 --> 00:36:12.770
It's a specification being
developed by the W3C.

00:36:13.030 --> 00:36:15.260
It is broken up into modules.

00:36:15.580 --> 00:36:17.160
Most of them are still drafts.

00:36:17.270 --> 00:36:20.080
So what that means is that
they can still change.

00:36:20.230 --> 00:36:22.640
And for that reason,
for the properties that

00:36:22.640 --> 00:36:26.510
we've implemented from CSS3,
we've appended the -webkit prefix.

00:36:26.660 --> 00:36:28.820
This is a pretty standard
thing to do in browsers.

00:36:29.010 --> 00:36:33.270
For instance, in Firefox,
they append the -moz prefix to things

00:36:33.320 --> 00:36:34.760
that are still in the draft stage.

00:36:34.890 --> 00:36:38.000
It's just us saying that we know
that this could still change.

00:36:38.080 --> 00:36:41.450
And once the specification
gets beyond the draft stage,

00:36:41.510 --> 00:36:44.750
we'll make sure we match what
the final situation is with the

00:36:44.860 --> 00:36:46.860
whole thing and remove the prefix.

00:36:47.040 --> 00:36:50.390
So let's get into the properties.

00:36:50.530 --> 00:36:53.120
First, background size.

00:36:53.120 --> 00:36:55.840
For those of you who have used
a background image before,

00:36:55.870 --> 00:36:58.700
you know that when you
use a background image,

00:36:58.730 --> 00:37:03.200
there is no way to specify what size
you want one tile of that image to be.

00:37:03.310 --> 00:37:05.240
Of course, not without background size.

00:37:05.320 --> 00:37:08.140
With the image tag,
you can specify a width and height

00:37:08.140 --> 00:37:11.480
as attributes so that regardless
of the intrinsic size of the image,

00:37:11.620 --> 00:37:15.670
you could have it appeared, shrunken,
or scaled up in your content,

00:37:15.670 --> 00:37:16.740
whatever you want.

00:37:16.790 --> 00:37:21.190
So this is sort of a way to do that
same thing with your background images.

00:37:21.610 --> 00:37:23.500
Here's an example of
how you would use it.

00:37:23.670 --> 00:37:28.200
Background size expects two values,
lengths or percentages, usually.

00:37:28.230 --> 00:37:30.840
If you give them lengths,
like pixel units,

00:37:30.960 --> 00:37:33.740
it will obviously appear
that specific length.

00:37:33.800 --> 00:37:36.210
With percentages,
you're saying that you want one tile

00:37:36.500 --> 00:37:40.740
of this background image to take
up the given percentage of whatever

00:37:40.770 --> 00:37:42.880
space this background image is tiling.

00:37:42.880 --> 00:37:46.740
So here I'm saying that I want my image,
cupcake.ping,

00:37:46.830 --> 00:37:51.610
to take up exactly 50% of the background
horizontally and exactly 50% of the

00:37:51.890 --> 00:37:55.340
background vertically for one tile,
which means that I want the

00:37:55.340 --> 00:37:57.180
image to appear four times.

00:37:57.360 --> 00:38:00.090
So here's what it looks like in Safari.

00:38:00.130 --> 00:38:03.760
And now Firefox does not
yet support background size,

00:38:03.900 --> 00:38:05.530
although they will soon, I'm sure.

00:38:05.750 --> 00:38:10.390
So here's what it looks like in Firefox,
where the cupcake is its intrinsic size.

00:38:10.490 --> 00:38:13.560
So another really cool thing
about background size is that it

00:38:13.910 --> 00:38:15.680
will always hold onto this rule.

00:38:15.840 --> 00:38:18.000
So here I've specified
the rule on the body.

00:38:18.260 --> 00:38:23.050
So as I grow and shrink my web view,
as I shrink my Safari window,

00:38:23.050 --> 00:38:25.540
the size of my body is going to change.

00:38:25.670 --> 00:38:28.320
But this 50%/50% will always hold.

00:38:28.530 --> 00:38:29.570
So here I've grown it.

00:38:29.740 --> 00:38:32.680
And so as I grew my window,
I still have exactly

00:38:32.680 --> 00:38:34.500
four cupcakes in Safari.

00:38:34.530 --> 00:38:37.460
Again, in Firefox,
it's still its intrinsic size.

00:38:37.610 --> 00:38:40.290
Here I've shrunk it,
so I have squishy cupcakes.

00:38:40.380 --> 00:38:42.900
If you didn't want to have
the squishy cupcake effect,

00:38:42.910 --> 00:38:45.900
you could specify auto
for one of the two values,

00:38:45.900 --> 00:38:47.520
either horizontal or vertical.

00:38:47.540 --> 00:38:52.410
And that-- that dimension would assume
whatever value it needed to in order to

00:38:52.410 --> 00:38:54.380
maintain the aspect ratio of the image.

00:38:54.550 --> 00:38:58.160
And here in Firefox,
we just have the tops of cupcakes.

00:38:58.470 --> 00:39:04.700
So let's talk about how this can be
applied to high definition web content.

00:39:04.910 --> 00:39:09.920
So I mentioned earlier that high
resolution images are often really huge.

00:39:10.060 --> 00:39:13.600
And earlier I meant it in
terms of their size in memory.

00:39:13.600 --> 00:39:16.070
But I also mean it in
terms of their size.

00:39:16.180 --> 00:39:18.040
They're often these really huge images.

00:39:18.190 --> 00:39:21.320
So you might have-- you might have
a high resolution image that you

00:39:21.320 --> 00:39:25.080
want to use as a background image
that's tiling a smaller space.

00:39:25.090 --> 00:39:27.310
And so background size is
really useful for that.

00:39:27.410 --> 00:39:31.600
Here I have an image, peacock high res,
that is a really huge image.

00:39:31.600 --> 00:39:33.550
It's something like 1,600 by 1,200.

00:39:33.680 --> 00:39:38.210
But I'm saying I want it to fit in a
div that has a width of 480 pixels.

00:39:38.240 --> 00:39:41.510
And I don't want a squishy peacock,
so I've specified auto

00:39:41.970 --> 00:39:44.180
in my vertical direction.

00:39:44.340 --> 00:39:46.100
So here's what it looks like in Safari.

00:39:46.100 --> 00:39:50.450
Again, it's shrunk down the image so that
it fits nicely into your small div.

00:39:50.520 --> 00:39:53.170
And just to show you what this
looks like without background size,

00:39:53.450 --> 00:39:55.140
here's what it looks like in Firefox.

00:39:55.150 --> 00:39:59.520
You may recognize this as the upper
left hand corner of our peacock,

00:39:59.520 --> 00:40:04.560
the first 480 pixels horizontally
and however much vertically.

00:40:04.810 --> 00:40:07.720
So again,
this is another reason why just replacing

00:40:07.720 --> 00:40:11.680
all the artwork in your web content
with high resolution versions of the

00:40:11.680 --> 00:40:13.430
same thing is not a great solution.

00:40:13.680 --> 00:40:18.020
Because you're going to run into
edge cases like this where you-- just

00:40:18.330 --> 00:40:21.940
specifying width and height doesn't work,
like with background images.

00:40:22.110 --> 00:40:25.410
So let's talk about using
the same example with a

00:40:25.410 --> 00:40:28.890
resolution determined image,
CSS3 media queries.

00:40:28.990 --> 00:40:30.890
I mentioned these earlier.

00:40:30.980 --> 00:40:34.720
Again, this is the idea that you can have
rules in your style sheet that

00:40:34.720 --> 00:40:38.630
will apply conditionally based
on characteristics of the device

00:40:38.770 --> 00:40:40.410
that is viewing the web content.

00:40:40.490 --> 00:40:43.080
So you can query about different
characteristics of the device,

00:40:43.150 --> 00:40:45.350
for instance,
the width and height of the viewport,

00:40:45.350 --> 00:40:46.640
the screen dimensions.

00:40:46.690 --> 00:40:47.380
You could create a style.

00:40:47.410 --> 00:40:50.240
You could create a style rule
that applies only if you're

00:40:50.240 --> 00:40:52.110
printing to screen at all,
so that if you were

00:40:52.180 --> 00:40:54.550
printing the content to,
say, a printer,

00:40:54.560 --> 00:40:56.960
the style rule would not apply.

00:40:57.040 --> 00:40:59.180
We've extended the things
that you can query about to

00:40:59.330 --> 00:41:03.540
include the device pixel ratio,
so that you can apply a rule based only

00:41:03.720 --> 00:41:06.010
if you have a scale factor applied.

00:41:06.630 --> 00:41:08.820
So here's how to use this.

00:41:08.820 --> 00:41:12.130
You'll recognize the top part
of this as pretty much the same

00:41:12.260 --> 00:41:15.840
style rule that I had previously,
except I'm saying that I want

00:41:15.840 --> 00:41:19.470
to use a low resolution version
of my peacock as the default.

00:41:19.500 --> 00:41:22.790
This version of the peacock
is actually the exact size to

00:41:22.930 --> 00:41:24.420
fit in the background image.

00:41:24.700 --> 00:41:29.180
So it's what you would be doing now if
you had a background image like this.

00:41:29.180 --> 00:41:33.510
But then I've specified a media query
below it that says that if I have a user

00:41:33.510 --> 00:41:38.120
scale factor applied of two or greater,
I want to instead choose to include a

00:41:38.240 --> 00:41:40.690
high resolution version of the image.

00:41:40.770 --> 00:41:42.800
So here's what it looks like
normally in Safari again.

00:41:42.860 --> 00:41:43.850
Looks the same.

00:41:44.010 --> 00:41:46.240
But look, now it works in Firefox too.

00:41:46.290 --> 00:41:47.430
Yay.

00:41:47.830 --> 00:41:53.230
So now the next screenshot
I'm going to show you is the

00:41:53.350 --> 00:41:56.910
same content in Firefox with a
scale factor applied to my UI.

00:41:57.220 --> 00:41:59.200
So I've applied a 2.0 scale factor.

00:41:59.200 --> 00:42:02.290
You can all do this in Quartz
debug now on your tiger machines or

00:42:02.290 --> 00:42:03.920
your leopard machines if you want.

00:42:04.030 --> 00:42:07.150
So everything just looks big
because it's being viewed on

00:42:07.300 --> 00:42:09.350
not a high resolution display.

00:42:09.440 --> 00:42:11.360
So here's what it looks like in Firefox.

00:42:11.370 --> 00:42:12.420
You know, it looks fine.

00:42:12.460 --> 00:42:15.190
It's the same image,
sort of stretched up a little bit.

00:42:15.410 --> 00:42:18.560
But here's what it looks like in Safari.

00:42:18.890 --> 00:42:19.640
How much better is that?

00:42:19.640 --> 00:42:20.480
Wait, you want to see that again?

00:42:20.700 --> 00:42:24.620
Hold on.

00:42:26.550 --> 00:42:28.660
So without the media query,
Safari would look the

00:42:28.740 --> 00:42:30.050
same as Firefox would.

00:42:30.300 --> 00:42:34.030
But Safari understands the media query,
so it's able to understand

00:42:34.030 --> 00:42:37.560
to choose the high resolution
version of the image instead.

00:42:37.700 --> 00:42:41.630
And it's really taking advantage of
the extra pixels that we have because

00:42:41.630 --> 00:42:43.580
we have a scale factor applied.

00:42:44.130 --> 00:42:47.470
All right, let's move on and talk
about something else,

00:42:47.470 --> 00:42:48.560
border radius.

00:42:48.560 --> 00:42:53.190
So I'm sure you all use the internet,
and you've noticed probably that there

00:42:53.190 --> 00:42:55.650
are rectangles all over the internet.

00:42:55.650 --> 00:42:59.140
But sometimes you don't want
just a regular rectangle.

00:42:59.140 --> 00:43:02.120
You want a rectangle
that has rounded corners.

00:43:02.120 --> 00:43:06.400
And so if any of you have created
web content that has rounded corners,

00:43:06.400 --> 00:43:09.640
you probably know that it's
kind of a pain in the ass.

00:43:09.640 --> 00:43:13.300
You have to do all kinds of
fancy things with images.

00:43:13.300 --> 00:43:15.460
It's really hard.

00:43:15.590 --> 00:43:19.300
So border radius is a much easier
way to achieve that same thing.

00:43:19.380 --> 00:43:22.200
It's a much easier way to get nice,
rounded corners on any of

00:43:22.200 --> 00:43:24.180
your rectangular elements.

00:43:24.200 --> 00:43:27.320
So we ran into a use
case for this ourselves.

00:43:27.330 --> 00:43:30.040
I'm sure you all
recognize our error page.

00:43:30.050 --> 00:43:34.190
When we were going through and assessing
all of the artwork that we have as

00:43:34.270 --> 00:43:37.680
a part of our application so that we
could get high resolution versions of

00:43:37.800 --> 00:43:43.960
it for a resolution-independent world,
we saw that we were doing our error

00:43:44.070 --> 00:43:45.380
page with all of these images.

00:43:45.380 --> 00:43:48.850
And it seemed really ridiculous to
get high resolution images of these

00:43:48.870 --> 00:43:51.080
little lines and tiny little corners.

00:43:51.160 --> 00:43:53.840
So we decided to do it
with border radius instead.

00:43:53.860 --> 00:43:55.920
And so this is actually
done with border radius.

00:43:55.920 --> 00:43:57.230
It looks exactly the same.

00:43:57.330 --> 00:43:59.660
I'd show you a before and after,
but there's really no point,

00:43:59.680 --> 00:44:00.840
because it looks the same.

00:44:00.900 --> 00:44:04.510
So here's your before and after.

00:44:04.700 --> 00:44:08.860
Basically, border radius expects you
to specify two values.

00:44:08.910 --> 00:44:11.800
You pretend you have a rectangle
with an ellipse in each corner,

00:44:11.840 --> 00:44:14.740
and you specify the horizontal
radius of the ellipse and the

00:44:14.740 --> 00:44:16.240
vertical radius of the ellipse.

00:44:16.300 --> 00:44:19.280
This gives you a lot of flexibility with
the kind of curves that you can get.

00:44:19.340 --> 00:44:21.400
You can also have each of your
corners have different curves,

00:44:21.530 --> 00:44:24.280
but most of the time you
probably aren't going to do that.

00:44:24.280 --> 00:44:27.150
So here's a really simple
example of how to use this.

00:44:27.310 --> 00:44:29.420
This is if you had a circle
in each corner with a

00:44:29.440 --> 00:44:32.560
horizontal and vertical radius,
both of 60 pixels.

00:44:32.600 --> 00:44:35.680
And here you have a nice, beautiful,
rounded rectangle.

00:44:35.710 --> 00:44:36.170
Yay.

00:44:40.340 --> 00:44:42.940
OK, a few more properties,
or maybe this is the last one.

00:44:42.970 --> 00:44:44.140
I forget.

00:44:44.290 --> 00:44:45.680
Border image.

00:44:45.840 --> 00:44:50.460
So border image gives you an
easy way to use an image as

00:44:50.700 --> 00:44:53.130
the border of your element.

00:44:53.200 --> 00:44:56.650
What you do is you take an image
that you want to use as the border,

00:44:56.790 --> 00:45:01.060
and you specify four values that
cut your image up into nine pieces.

00:45:01.190 --> 00:45:05.620
The first one is how far down the image
you want the border on the top to be.

00:45:05.690 --> 00:45:09.400
And then you specify the right,
the bottom, and the left.

00:45:09.440 --> 00:45:12.290
And this, as you can see,
breaks your image up into nine pieces.

00:45:12.580 --> 00:45:14.900
You have your edges, your corners,
and your middle.

00:45:14.940 --> 00:45:17.800
And they'll all be either stretched
or tiled in their respective

00:45:18.410 --> 00:45:22.030
parts of your element that you're
specifying border image on.

00:45:22.280 --> 00:45:25.510
And here's a simple
example of how to do that.

00:45:25.530 --> 00:45:30.670
I said that I want those lines to come
in 25% of the image in each direction.

00:45:30.790 --> 00:45:31.700
And there it is.

00:45:31.700 --> 00:45:33.480
I've been framed.

00:45:34.160 --> 00:45:39.290
OK, so we've talked about high
definition web content in CSS3.

00:45:39.470 --> 00:45:41.780
We think that other browsers
are going to-- well,

00:45:41.780 --> 00:45:45.740
we know that other browsers are going
to start or continue implementing CSS3.

00:45:45.740 --> 00:45:48.040
So soon these properties
will be available in a lot

00:45:48.040 --> 00:45:49.160
of other places as well.

00:45:49.420 --> 00:45:51.420
A lot of other browsers
are working on them.

00:45:51.470 --> 00:45:54.650
We think that they're really
powerful for creating high

00:45:54.660 --> 00:45:58.560
definition web content in some cases,
and in general, just making your existing

00:45:58.560 --> 00:46:01.740
web content totally hot.

00:46:01.910 --> 00:46:06.440
So we've covered all our main topics
here-- JavaScript capabilities,

00:46:06.440 --> 00:46:07.740
graphics, and style.

00:46:07.760 --> 00:46:09.260
Hopefully you've learned a few things.

00:46:09.260 --> 00:46:10.990
There was a lot we talked about today.

00:46:11.090 --> 00:46:15.300
But you can't leave yet,
because there is one more thing.

00:46:15.400 --> 00:46:17.170
So--

00:46:17.200 --> 00:46:20.280
Those of you who have been
following our open source

00:46:20.280 --> 00:46:23.590
project know about this already,
so it's not as exciting for you,

00:46:23.590 --> 00:46:25.280
but it's still pretty damn cool.

00:46:25.280 --> 00:46:28.530
We have some new tools
under construction.

00:46:28.560 --> 00:46:32.460
Our open source project gives us the
ability to sort of have these works

00:46:32.460 --> 00:46:35.780
in progress that we can put out there,
so these are all available

00:46:35.780 --> 00:46:38.290
through our nightlies,
nightly.webkit.org.

00:46:38.310 --> 00:46:40.460
I strongly encourage you
all to check them out.

00:46:40.460 --> 00:46:44.490
And so the first thing I want to tell
you about is our new Web Inspector.

00:46:45.490 --> 00:46:47.260
This is really awesome.

00:46:47.260 --> 00:46:49.260
People have been wanting one
of these in Safari for a while.

00:46:49.260 --> 00:46:51.360
It gives you a really
great way to walk your DOM,

00:46:51.360 --> 00:46:53.170
see all of the style
rules that are applied,

00:46:53.260 --> 00:46:53.260
different metrics.

00:46:53.260 --> 00:46:55.390
It's really great for
debugging your content,

00:46:55.390 --> 00:46:59.260
and also just for seeing how people
did cool things on other sites.

00:46:59.260 --> 00:47:01.260
It's really handy.

00:47:01.260 --> 00:47:03.720
Also,
we were able to get this really custom,

00:47:03.910 --> 00:47:08.280
beautiful look out of it because our
Web Inspector itself is created mostly

00:47:08.280 --> 00:47:12.260
with HTML and CSS and JavaScript,
and we think it looks pretty great.

00:47:12.260 --> 00:47:14.260
We think it's pretty awesome.

00:47:15.260 --> 00:47:19.430
We also would like to tell you
about our new JavaScript debugger,

00:47:19.430 --> 00:47:20.260
Dracera.

00:47:20.260 --> 00:47:24.260
This is taking advantage
of the same-- Yay!

00:47:24.260 --> 00:47:25.260
Finally!

00:47:29.340 --> 00:47:32.940
This is taking advantage of the same
JavaScript debugging capabilities

00:47:32.980 --> 00:47:35.230
that we made available for Dashcode.

00:47:35.340 --> 00:47:37.870
But we thought maybe you'd want
to debug your other WebKit apps,

00:47:37.900 --> 00:47:38.060
too.

00:47:38.060 --> 00:47:41.780
So now you can debug through Safari,
and you can attach Dracera to

00:47:41.780 --> 00:47:44.670
any of your WebKit apps and
debug your web content there.

00:47:44.930 --> 00:47:46.560
You can set breakpoints, step through.

00:47:46.600 --> 00:47:47.760
It's pretty great.

00:47:47.810 --> 00:47:50.400
And now I would like to
call upon my colleague,

00:47:50.400 --> 00:47:55.410
Alice Liu, who is going to give you a
demo of how to use these tools.

00:48:03.300 --> 00:48:04.840
Hi, thanks, Beth.

00:48:04.910 --> 00:48:08.560
Hi, I'm Alice Liu,
and I'm also a Safari engineer.

00:48:08.620 --> 00:48:12.300
Beth just told you about a couple of
debugging tools that we've released

00:48:12.300 --> 00:48:14.420
in our WebKit open source project.

00:48:14.440 --> 00:48:17.690
And they were developed by
another Safari engineer,

00:48:17.740 --> 00:48:19.160
Tim Hatcher.

00:48:19.160 --> 00:48:22.300
I'm going to tell you a little
bit about how to use them

00:48:22.870 --> 00:48:25.390
Demo machine, please.

00:48:25.430 --> 00:48:28.300
Oh, we're already here.

00:48:28.330 --> 00:48:28.640
OK.

00:48:29.130 --> 00:48:33.700
So the Web Inspector can provide
you a wealth of information about

00:48:33.700 --> 00:48:36.680
your document all in one place.

00:48:37.720 --> 00:48:42.280
To get to it,
I'm going to go to a web page

00:48:42.530 --> 00:48:45.050
that I think is pretty cool.

00:48:46.110 --> 00:48:52.050
And all we do is we pick something
on the page and we Control-click

00:48:52.200 --> 00:48:53.310
and we say Inspect Element.

00:48:53.310 --> 00:48:56.550
And this is going to bring
up the Web Inspector.

00:48:56.620 --> 00:48:58.090
That's hot.

00:48:59.000 --> 00:49:05.520
So here's a web inspector,
and in this window here--

00:49:05.520 --> 00:49:06.500
can you see that well?

00:49:06.500 --> 00:49:08.110
Let me see.

00:49:10.860 --> 00:49:12.670
Okay.

00:49:12.940 --> 00:49:15.490
So, sorry.

00:49:15.540 --> 00:49:15.780
Okay.

00:49:15.890 --> 00:49:16.140
All right.

00:49:16.140 --> 00:49:16.630
We'll stay here.

00:49:16.630 --> 00:49:19.710
So this is a web inspector,
and in this window here

00:49:19.740 --> 00:49:21.480
is your document markup.

00:49:21.540 --> 00:49:25.470
And if I click on one of these nodes,
it's going to highlight the

00:49:25.470 --> 00:49:27.660
corresponding node over here.

00:49:27.660 --> 00:49:30.700
So let's pick something like...

00:49:30.760 --> 00:49:33.820
This Div intro,
and it's going to highlight the

00:49:33.820 --> 00:49:36.190
intro for us in a red outline.

00:49:36.280 --> 00:49:40.050
So let's see that again for another Div.

00:49:40.130 --> 00:49:42.290
I'm going to pick the next one,
which is this one.

00:49:42.320 --> 00:49:47.040
So I really like this feature because
it gives me a great visual connection

00:49:47.040 --> 00:49:51.140
between my document markup and
how it's laid out on the page.

00:49:51.140 --> 00:49:56.780
So if you have kind of messy code,
it's going to really help you in finding

00:49:56.780 --> 00:49:59.910
out where your things are and stuff.

00:50:00.360 --> 00:50:02.930
Also,
it's great for finding out how other

00:50:03.520 --> 00:50:07.140
people's websites are laid out as well.

00:50:07.170 --> 00:50:13.710
Okay, so down here we have different tabs
for different types of information.

00:50:13.720 --> 00:50:17.600
So in the node panel,
we're given node information

00:50:17.600 --> 00:50:21.980
such as element attributes
and links and namespaces.

00:50:21.980 --> 00:50:24.800
So I'm going to,
this is a good debugging tool,

00:50:24.840 --> 00:50:28.150
so I'm going to debug
something about this web page.

00:50:28.220 --> 00:50:30.940
I actually like... how these links look.

00:50:30.940 --> 00:50:32.150
They're kind of nice.

00:50:32.180 --> 00:50:35.180
So let's find out what's behind them.

00:50:35.180 --> 00:50:38.740
So they turn colors
when I hover over them.

00:50:38.740 --> 00:50:40.150
Let's find out more about them.

00:50:40.210 --> 00:50:43.980
I'm going to inspect this
element by control clicking on

00:50:43.980 --> 00:50:46.020
it and choosing inspect element.

00:50:46.180 --> 00:50:49.010
And then it jumps right to it.

00:50:49.180 --> 00:50:53.170
So node information,
the href is articles.

00:50:53.320 --> 00:50:55.180
Next we have style.

00:50:55.180 --> 00:50:56.180
I'll come back to that in a second.

00:50:56.180 --> 00:51:00.400
Over here in metrics,
we are given the margin, border,

00:51:00.400 --> 00:51:01.560
and padding radius.

00:51:01.560 --> 00:51:04.050
Let me zoom in on that for you.

00:51:04.060 --> 00:51:07.140
So that's nice, right?

00:51:07.700 --> 00:51:13.060
And then, over in properties,
we've got all the

00:51:13.060 --> 00:51:15.510
JavaScript properties and their values.

00:51:15.650 --> 00:51:17.860
So let's go back to style.

00:51:17.890 --> 00:51:21.280
Over here in style,
we have a wealth of style information.

00:51:22.360 --> 00:51:27.570
So if we have computed style highlighted,
what we're told down here is

00:51:27.830 --> 00:51:31.470
all the style properties that
are actually applied in the end.

00:51:31.470 --> 00:51:35.800
And in this window,
we have all the other style rules,

00:51:35.800 --> 00:51:39.680
and they're listed in the order in
which they're imported and applied.

00:51:39.680 --> 00:51:45.890
So we've got this asterisk rule,
it sets some values, and as we go down,

00:51:45.930 --> 00:51:49.040
we see other properties listed.

00:51:49.040 --> 00:51:52.980
If your properties have a
strike through through them,

00:51:52.980 --> 00:51:55.810
it means that they're overridden
by another rule after it.

00:51:55.820 --> 00:51:58.920
So we can see that color
and border-bottom have been

00:51:58.920 --> 00:52:00.820
overruled by something else.

00:52:01.220 --> 00:52:05.780
Here's border-color,
something else color, yeah, there we go.

00:52:05.990 --> 00:52:10.200
So let me do this again.

00:52:13.000 --> 00:52:15.530
And we actually have one more rule.

00:52:15.720 --> 00:52:16.870
So here's the hover rule.

00:52:16.880 --> 00:52:18.890
And this is why it looks so cool.

00:52:19.200 --> 00:52:21.460
So basically, when I hover over it,
I find out that, oh,

00:52:21.500 --> 00:52:23.040
the color turns black.

00:52:23.040 --> 00:52:26.660
The background color is set also,
and we add a border bottom.

00:52:26.660 --> 00:52:31.940
So that's just how those
links are implemented.

00:52:32.010 --> 00:52:34.380
So that's the Web Inspector.

00:52:34.380 --> 00:52:38.100
And we know that it's going to
help you debug your websites,

00:52:38.240 --> 00:52:42.040
how they look,
and also help you investigate other

00:52:42.170 --> 00:52:45.250
people's websites that you admire.

00:52:53.200 --> 00:52:57.980
OK, so the next tool I'm going to show
you is our JavaScript debugger.

00:52:58.040 --> 00:53:02.780
So we know that many of you have been
wanting a good JavaScript debugging

00:53:02.870 --> 00:53:04.700
solution for quite a while.

00:53:04.700 --> 00:53:08.360
And recently,
there have been two additions to this

00:53:08.360 --> 00:53:11.010
area for you web content developers.

00:53:11.010 --> 00:53:14.940
One is Dashcode,
which is available on your Leopard CD.

00:53:14.940 --> 00:53:19.340
And the other one is Rosera,
which is our open source solution.

00:53:19.340 --> 00:53:23.180
They both take advantage
of the same technology.

00:53:23.200 --> 00:53:28.200
That we enhance JavaScript core
to enable this debugging.

00:53:28.200 --> 00:53:35.380
Rosera actually has the advantage that
it can attach to any WebKit application.

00:53:35.400 --> 00:53:37.860
So that means that it's
not just for Safari,

00:53:37.860 --> 00:53:40.400
it's for your WebKit application as well.

00:53:40.420 --> 00:53:46.570
So I'm going to show you how to use
Rosera with a very simple example.

00:53:50.010 --> 00:53:52.970
So Drisera I have in the doc here.

00:53:53.120 --> 00:53:55.660
And when you launch Drisera,
it will ask you to attach

00:53:55.740 --> 00:53:58.280
to a WebKit application.

00:53:58.280 --> 00:53:59.620
And right now, I only have one running.

00:53:59.670 --> 00:54:04.580
But in this window is where you would
also see your WebKit application.

00:54:04.680 --> 00:54:05.840
So we'll attach to WebKit.

00:54:05.840 --> 00:54:11.590
Let me just rearrange my windows here.

00:54:15.110 --> 00:54:18.260
And I have a canned demo here.

00:54:18.430 --> 00:54:22.840
So this is a really simple
just arithmetic demo.

00:54:22.840 --> 00:54:25.750
So let's use 10 and 5.

00:54:25.940 --> 00:54:30.080
And 10 divided by 5, that works.

00:54:30.080 --> 00:54:32.590
10 times 5 works.

00:54:32.850 --> 00:54:35.150
10 minus 5 works.

00:54:35.580 --> 00:54:37.840
But 10 plus 5 doesn't work.

00:54:37.930 --> 00:54:42.210
So I'm going to debug this 10 plus 5.

00:54:42.390 --> 00:54:46.420
Over here in the Drisera window,
the Drisera window should actually

00:54:46.420 --> 00:54:47.380
look pretty familiar to you.

00:54:47.380 --> 00:54:50.150
It kind of looks like Xcode,
and because of this,

00:54:50.220 --> 00:54:52.250
it should be intuitive for you to use.

00:54:52.300 --> 00:54:54.380
So here's a gutter,
and we can set breakpoints.

00:54:54.380 --> 00:54:58.720
And over here is a
drop-down window for files.

00:54:58.720 --> 00:55:01.940
I'm going to go over here,
and I'm going to set a breakpoint

00:55:01.940 --> 00:55:03.520
in the onClick handler.

00:55:03.520 --> 00:55:06.870
Let me show you this,
just so you can see that.

00:55:06.970 --> 00:55:08.100
So here's onClick.

00:55:08.750 --> 00:55:12.460
So Drisera has the advantage of
being able to set breakpoints

00:55:12.460 --> 00:55:17.620
in inline JavaScript and
not just within script tags.

00:55:18.950 --> 00:55:21.330
Okay, so I set the breakpoint.

00:55:21.360 --> 00:55:21.860
We're going to start.

00:55:21.880 --> 00:55:27.610
Okay,
I have broke in the onClick handler,

00:55:27.610 --> 00:55:29.000
and we're going to step in.

00:55:29.000 --> 00:55:32.080
Also, just like Xcode,
if you want to remove breakpoints,

00:55:32.080 --> 00:55:33.300
you just drag it out.

00:55:33.340 --> 00:55:38.410
So let's step into this function,
calculate.

00:55:39.040 --> 00:55:41.020
And let's step over.

00:55:41.020 --> 00:55:43.790
Result is 0.

00:55:43.820 --> 00:55:47.060
Operand 1 is set.

00:55:47.060 --> 00:55:48.660
Operand 2 is set.

00:55:48.660 --> 00:55:50.420
And operator is set.

00:55:50.490 --> 00:55:53.500
So we're going to fall
into the case of the plus.

00:55:53.500 --> 00:55:57.660
And we see that the
result ends up to be 105.

00:55:57.760 --> 00:56:02.380
So basically,
my mistake is in my code here.

00:56:02.440 --> 00:56:05.740
Something cool about Josera,
the JavaScript debugger,

00:56:05.740 --> 00:56:07.780
is we have a console here.

00:56:07.780 --> 00:56:13.020
And the console is able to
execute any JavaScript expression.

00:56:13.090 --> 00:56:16.100
So I can check values.

00:56:16.100 --> 00:56:16.780
Sorry.

00:56:16.780 --> 00:56:19.280
Let me show you closer.

00:56:20.700 --> 00:56:22.740
Oops.

00:56:22.740 --> 00:56:22.990
OK.

00:56:23.250 --> 00:56:24.770
Result is 105.

00:56:24.930 --> 00:56:25.990
So this is a mistake.

00:56:26.130 --> 00:56:28.050
So I need to fix this.

00:56:28.420 --> 00:56:31.740
And the console will let
you try out fixes before you

00:56:31.740 --> 00:56:32.610
actually change your code.

00:56:32.700 --> 00:56:33.970
So let's try something.

00:56:34.040 --> 00:56:37.970
I think what I want to do is-- I guess
I could do something like parsing.

00:56:38.730 --> 00:56:45.300
Op1 plus parseInt Op2.

00:56:45.300 --> 00:56:47.200
And it's 15, which is what we wanted.

00:56:47.270 --> 00:56:51.660
So this is exactly what I should
do instead of just plus.

00:56:51.900 --> 00:56:57.090
So this is just a little taste
of how Drisera can improve your

00:56:57.090 --> 00:57:00.320
JavaScript debugging workflow.

00:57:00.320 --> 00:57:05.120
And that's about it, I guess.

00:57:05.120 --> 00:57:06.920
Let me close this up.

00:57:17.100 --> 00:57:19.100
Can you get the slide machine, please?

00:57:19.100 --> 00:57:21.100
Okay.

00:57:21.100 --> 00:57:32.220
So, just a little reminder that these
open source debugging tools are

00:57:32.220 --> 00:57:34.100
actually still under development.

00:57:34.100 --> 00:57:38.720
And what that means for you is
that we actually want to invite

00:57:38.720 --> 00:57:42.090
you to come and try them out,
to file bugs on them,

00:57:42.270 --> 00:57:46.100
file enhancements that you
think could help the product.

00:57:46.270 --> 00:57:49.100
And if you're daring enough,
you can submit patches, too.

00:57:49.100 --> 00:57:52.100
So, this is just the nature of
our open source project.

00:57:52.100 --> 00:57:59.200
And you can try both the
Web Inspector and Drisera if you download

00:57:59.200 --> 00:58:02.100
the Nightly at nightly.webkit.org.

00:58:02.100 --> 00:58:04.850
And basically,
more info about these tools

00:58:04.980 --> 00:58:07.960
are available at our website,
webkit.org.

00:58:08.100 --> 00:58:11.090
And please file bugs
under those components.

00:58:11.100 --> 00:58:11.980
Thank you.