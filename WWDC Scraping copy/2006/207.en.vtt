WEBVTT

00:00:14.510 --> 00:00:19.400
My name is Alessandro Sabatelli and I'm
a Quartz Composer motion graphic artist.

00:00:19.420 --> 00:00:22.400
Today we'll be going through
two hands-on tutorials.

00:00:22.400 --> 00:00:24.520
The first one will be covering
some of the fundamentals of

00:00:24.530 --> 00:00:26.400
working with Quartz Composer.

00:00:26.400 --> 00:00:28.360
We'll be looking at things
like the coordinate system,

00:00:28.500 --> 00:00:32.400
how to approach animation,
and working with groups of elements.

00:00:32.550 --> 00:00:35.510
And in our second tutorial we'll
be looking at how you can use

00:00:35.510 --> 00:00:37.400
Quartz Composer in production.

00:00:37.400 --> 00:00:39.940
So some of the things we'll
be covering there are particle

00:00:39.940 --> 00:00:44.350
systems and how to apply effects
to different areas of your graph.

00:00:44.840 --> 00:00:47.420
First thing that you'll need to do
is launch the Quartz Composer editor.

00:00:47.590 --> 00:00:50.080
If you're on Leopard,
this is in Developer Applications

00:00:50.080 --> 00:00:52.850
Quartz Composer,
and on Tiger, Developer Applications

00:00:52.850 --> 00:00:54.700
Graphics Tools Quartz Composer.

00:00:54.820 --> 00:00:57.400
You'll notice we got a
little bit of a bump here,

00:00:57.400 --> 00:00:59.480
and we have a new icon.

00:01:00.720 --> 00:01:04.340
So, this is the first composition
we'll be building.

00:01:04.660 --> 00:01:08.950
Multiple elements animating
some nice little reflections.

00:01:08.950 --> 00:01:12.310
And this is a group of elements.

00:01:13.700 --> 00:01:17.440
So again, if you're coming in late,
please have the assets

00:01:17.440 --> 00:01:19.010
for today's session.

00:01:19.330 --> 00:01:24.300
connect.apple.com/wwdc2006/sessions207.ph
p.

00:01:24.300 --> 00:01:27.680
Everybody got that?

00:01:38.930 --> 00:01:43.620
All right,
if I could have demo one please.

00:01:43.620 --> 00:01:45.080
We'll get started on our tutorial.

00:01:45.080 --> 00:01:50.310
So I'm going to launch Quartz Composer,
which I've put handily in my dock.

00:01:51.490 --> 00:01:53.560
Hey, if this is the first time you're
launching Quartz Composer,

00:01:53.560 --> 00:01:55.090
you'll notice that we
have a new assistant.

00:01:55.110 --> 00:02:02.720
I'm going to go ahead and cancel that,
close the getting started, and file new.

00:02:04.800 --> 00:02:07.570
And here we have our editor
window and our viewer window.

00:02:07.580 --> 00:02:11.320
So I'm going to just get that set
up for you guys so you can see.

00:02:16.150 --> 00:02:20.490
I'm going to adjust my preferences
so we have a little bit more

00:02:20.490 --> 00:02:23.330
contrast in our workspace.

00:02:23.970 --> 00:02:26.600
So what you just noticed was
the workspace change in color,

00:02:26.600 --> 00:02:29.140
that's the place where we do most
of our work in Quartz Composer.

00:02:29.140 --> 00:02:31.940
To the left of that we
have a patch library,

00:02:31.940 --> 00:02:35.050
and above that we have a search
field for the patch library.

00:02:35.130 --> 00:02:37.980
We also have a viewer,
and this is where Quartz Composer

00:02:37.990 --> 00:02:39.700
is going to be doing its drawing.

00:02:40.250 --> 00:02:42.960
And you'll notice here in
the toolbar of our editor,

00:02:42.960 --> 00:02:45.830
if you do not have your viewer,
we have a viewer button and you can

00:02:45.830 --> 00:02:47.940
press that to launch your viewer.

00:02:48.780 --> 00:02:51.170
So what you'll immediately notice
is that our viewer has a white

00:02:51.220 --> 00:02:54.150
and gray checked background,
and that means we're not doing

00:02:54.150 --> 00:02:56.950
anything within the viewer currently.

00:02:58.440 --> 00:03:00.580
So most of the time what we
need to do first is we need to

00:03:00.630 --> 00:03:02.860
clear the screen once per frame.

00:03:02.910 --> 00:03:09.230
So I'm going to search in my search
field here for clear and drag a

00:03:09.230 --> 00:03:13.440
clear patch out onto my workspace.

00:03:13.450 --> 00:03:16.320
And for those of you familiar
with Quartz Composer or who went

00:03:16.320 --> 00:03:20.900
to Pierre's session yesterday,
a patch is basically a type of function.

00:03:21.140 --> 00:03:22.630
There are two types of patches.

00:03:22.700 --> 00:03:26.520
There's those which take
data in and process it,

00:03:26.530 --> 00:03:28.170
and there are those
which draw to the screen.

00:03:28.280 --> 00:03:30.400
The clear patch is one
which draws to the screen.

00:03:30.540 --> 00:03:32.780
You'll notice that our
viewer is now black.

00:03:32.810 --> 00:03:36.660
We're clearing the screen or drawing
to the screen once per frame.

00:03:36.690 --> 00:03:40.470
And patches which draw to the screen
have this special enable port.

00:03:40.480 --> 00:03:43.720
If I hover over it,
I can see that the value is set to true.

00:03:43.810 --> 00:03:47.740
If I were to double click on the
input port and set the value to false,

00:03:47.760 --> 00:03:49.160
we'd no longer be clearing the screen.

00:03:49.160 --> 00:03:52.670
So I'm going to go ahead and
re-enable that by setting it to true.

00:03:52.860 --> 00:03:55.290
You should all have a black viewer.

00:03:55.760 --> 00:04:00.460
So what we need to do first in
decomposing this problem is look

00:04:00.460 --> 00:04:04.260
at each of the things that we need
to do in a step-by-step fashion.

00:04:04.320 --> 00:04:08.300
So the first thing that we need to
do is draw something to the screen.

00:04:09.490 --> 00:04:13.490
So if you can go to the assets
folder for today's session,

00:04:13.490 --> 00:04:16.430
if you go to QC Fundamentals,

00:04:18.330 --> 00:04:22.440
And in the assets folder there,
we have a peter.png.

00:04:22.440 --> 00:04:27.830
So just so you guys know,
we also have some milestones set forth.

00:04:28.020 --> 00:04:31.860
And these are steps which I'll be taking
you through throughout the tutorial.

00:04:31.860 --> 00:04:33.980
So if at any point in
time you do get lost,

00:04:34.010 --> 00:04:35.600
feel free to start up
from one of these steps.

00:04:35.600 --> 00:04:38.140
And you'll know where I'm
at because periodically I'll

00:04:38.190 --> 00:04:39.510
be saving to the desktop.

00:04:40.230 --> 00:04:42.730
So in the assets folder
of QC Fundamentals,

00:04:42.730 --> 00:04:45.280
we have peter.png.

00:04:45.340 --> 00:04:48.960
If you take that and drag
that into your workspace,

00:04:49.560 --> 00:04:53.640
You may think that what we're going to do
is immediately we'll have drawn an image.

00:04:53.690 --> 00:04:56.900
But actually this is just another
patch which is outputting an image,

00:04:56.910 --> 00:05:00.170
and what we need to do is
display that image on a surface.

00:05:00.230 --> 00:05:04.920
So if you search for "sprite", we'll
be using a sprite to display our image.

00:05:05.300 --> 00:05:08.560
And drag Sprite out onto the workspace.

00:05:08.710 --> 00:05:14.000
And connect the output image of
Peter to the input image of our Sprite.

00:05:14.120 --> 00:05:19.120
And there we have Peter,
who's looking a little bit larger.

00:05:19.120 --> 00:05:23.110
As you can see.

00:05:23.560 --> 00:05:26.360
And in actuality,
Peter is not this large.

00:05:26.480 --> 00:05:30.660
Peter is a healthy man.

00:05:30.720 --> 00:05:35.010
So the reason why Peter is
looking large here is because

00:05:36.000 --> 00:05:40.200
Our sprite is square and our
Peter image is non-square.

00:05:40.200 --> 00:05:42.640
And you can see the size of
the Peter image if you hover

00:05:42.640 --> 00:05:44.300
over the output port of Peter.

00:05:44.430 --> 00:05:48.370
You'll notice that it says 174 by 334.

00:05:49.180 --> 00:05:52.680
And this is the actual
pixel size of our image.

00:05:52.700 --> 00:05:55.860
And what we need to do is get
our sprite to be a little bit

00:05:55.860 --> 00:05:57.690
more correctly proportioned.

00:05:57.820 --> 00:06:02.280
So if you were to select your
sprite and go to the inspector,

00:06:03.210 --> 00:06:08.100
Under input parameters,
you can control the width.

00:06:08.160 --> 00:06:10.220
So if I were to drag
this counterclockwise,

00:06:10.220 --> 00:06:12.570
I can get Peter super skinny.

00:06:13.000 --> 00:06:15.200
Or a little bit, yeah.

00:06:15.200 --> 00:06:18.620
But if we wanted to exactly
proportion this sprite,

00:06:18.650 --> 00:06:23.160
what we can do, new in Leopard,
is we can enter an expression

00:06:23.160 --> 00:06:26.560
directly in the width field here.

00:06:26.720 --> 00:06:33.670
So this is 174 divided by 334,
and that is .521.

00:06:34.240 --> 00:06:41.400
So if you're in Tiger,
just go ahead and type 0.521.

00:06:41.400 --> 00:06:44.360
And you will have a correctly
proportioned sprite.

00:06:44.450 --> 00:06:48.590
So now we have
Peter displayed on our viewer.

00:06:49.490 --> 00:06:53.880
And you may notice that he's
wearing a leopard print shirt.

00:06:53.950 --> 00:06:58.560
And I had actually asked for a picture
of a running leopard from marketing,

00:06:58.590 --> 00:07:00.800
but apparently that was not attainable.

00:07:00.850 --> 00:07:06.290
So what I did was I went ahead and put,
or upgraded Peter's style.

00:07:11.000 --> 00:07:19.970
Okay, so I'm going to save that
to my desktop as 1-sprite.

00:07:23.720 --> 00:07:26.840
Okay, so the next thing we're gonna do,
or we're gonna look at in

00:07:26.840 --> 00:07:30.730
approaching this visual problem
is how to get the reflection.

00:07:31.090 --> 00:07:33.750
And in order to get the reflection,
we're simply going to take our original

00:07:33.750 --> 00:07:35.580
image and flip it over the X axis.

00:07:35.630 --> 00:07:38.000
The X axis runs horizontally.

00:07:38.010 --> 00:07:43.420
And we're going to do that to a sprite,
the surface which we're going to

00:07:43.420 --> 00:07:45.600
be displaying this reflection on.

00:07:45.770 --> 00:07:50.590
So we can just go ahead and select
our first sprite and option drag.

00:07:50.590 --> 00:07:53.140
You'll see a green plus.

00:07:53.770 --> 00:07:55.480
and release.

00:07:55.550 --> 00:07:57.830
And what you'll immediately notice
is that Peter's gone and he's been

00:07:57.830 --> 00:08:02.080
replaced by this white rectangle,
and that is because we

00:08:02.080 --> 00:08:06.580
are now drawing a sprite,
which is a copy of our original sprite,

00:08:06.580 --> 00:08:10.470
which is correctly proportioned on top
of our sprite which was drawing Peter.

00:08:10.470 --> 00:08:14.480
And the reason that we know it's on
top is because patches which draw to

00:08:14.480 --> 00:08:16.710
the screen have a rendering order.

00:08:16.710 --> 00:08:20.480
So, our first patch, the clear patch,
is rendering first,

00:08:20.480 --> 00:08:23.560
then we're drawing the sprite
which is textured with Peter,

00:08:23.560 --> 00:08:27.400
and then we have our third sprite
which is yet to be textured.

00:08:27.400 --> 00:08:31.240
So, if you go ahead and connect
Peter output image to the input

00:08:31.240 --> 00:08:34.640
image on our second sprite,
we're more or less back where we started,

00:08:34.640 --> 00:08:38.300
except now we're actually
drawing Peter on two sprites.

00:08:38.850 --> 00:08:41.890
So we're going to adjust
our second sprite by again

00:08:41.930 --> 00:08:44.200
rotating it over the X axis.

00:08:44.200 --> 00:08:48.880
So if you open up the inspector,
go to input parameters,

00:08:48.880 --> 00:08:52.120
X rotation and drag that clockwise.

00:08:52.140 --> 00:08:53.790
This is going to take a
long time to get to 180.

00:08:53.800 --> 00:08:56.420
So just as a tip,
what you can do is hold down shift

00:08:56.860 --> 00:08:59.270
to increase the increment here.

00:09:00.370 --> 00:09:03.540
And I'll need you to just
go ahead and type 180.

00:09:03.580 --> 00:09:06.180
So now we have Peter upside down.

00:09:10.850 --> 00:09:14.080
So in order for this to be a reflection,
what we need to do is

00:09:14.080 --> 00:09:15.160
shift this down in Y.

00:09:15.190 --> 00:09:18.720
And we need to shift this down by
the height of our original image.

00:09:18.750 --> 00:09:21.230
And that was one, if you recall.

00:09:21.320 --> 00:09:26.800
So if you were to grab Y position and
go counterclockwise to negative one,

00:09:26.800 --> 00:09:32.170
we now have a reflection of Peter.

00:09:33.770 --> 00:09:39.950
And we're going to adjust the
color so that this is a non-perfect

00:09:40.290 --> 00:09:43.930
reflection to something like that.

00:09:47.850 --> 00:09:50.140
So now we have Peter and his reflection.

00:09:50.140 --> 00:09:55.960
And I'm gonna save that as a milestone.

00:09:56.220 --> 00:10:01.360
Save as to reflection.

00:10:04.020 --> 00:10:08.300
All right, so now that we have this image
being displayed on a sprite and

00:10:08.300 --> 00:10:11.320
another image being the reflection,
what we're going to look

00:10:11.320 --> 00:10:12.690
at is how to animate this.

00:10:12.830 --> 00:10:16.350
And animation in Quartz
Composer can be accomplished

00:10:16.360 --> 00:10:19.780
in a number of different ways,
but all of them work in

00:10:19.780 --> 00:10:21.140
basically the same way.

00:10:21.140 --> 00:10:24.040
And what they do is you end up
with a patch that references

00:10:24.090 --> 00:10:25.740
time and outputs a number.

00:10:25.740 --> 00:10:29.560
So this number will be
varying based on the time.

00:10:29.640 --> 00:10:34.600
And the patch which we're going to be
using today is the interpolation patch.

00:10:34.660 --> 00:10:41.330
So if you search for interpolation
and drag interpolation out,

00:10:42.860 --> 00:10:45.500
And what we can immediately do
is connect interpolation to the

00:10:45.500 --> 00:10:49.640
X position of our first sprite and
the X position of our second sprite.

00:10:49.720 --> 00:10:53.510
And what you'll see is we have
Peter moving from the center

00:10:53.520 --> 00:10:55.720
of the screen to the right.

00:10:57.250 --> 00:11:01.360
I'm going to look at the inspector
for our interpolation patch.

00:11:01.360 --> 00:11:05.100
The first thing I'm going to do
is rename the interpolation patch.

00:11:05.100 --> 00:11:06.360
This is just good practice.

00:11:06.360 --> 00:11:09.430
It's basically like commenting
your code or as low level as

00:11:09.430 --> 00:11:11.380
naming your functions or methods.

00:11:11.380 --> 00:11:13.080
It's pretty important,
especially if you want

00:11:13.310 --> 00:11:17.000
help on the developer list,
which I encourage you to do.

00:11:17.000 --> 00:11:19.400
So interpolation X.

00:11:22.230 --> 00:11:27.030
And if I were to look at the input
parameters for Interpolation X,

00:11:27.030 --> 00:11:29.820
you'll notice that the start value is 0,
the end value is 1,

00:11:29.820 --> 00:11:31.040
and the duration is 1.

00:11:31.040 --> 00:11:34.330
So what this means is that over a second,
this patch is going to be

00:11:34.370 --> 00:11:41.200
producing or interpolating between
a number 0 and 1 over one second.

00:11:41.860 --> 00:11:45.840
And the repeat mode is set to loop,
so this number will just be looping.

00:11:45.880 --> 00:11:47.780
And the interpolation is linear.

00:11:47.870 --> 00:11:50.440
So as you can see,
Peter is moving in a linear fashion from

00:11:50.440 --> 00:11:52.800
the center of the screen to the right.

00:11:52.930 --> 00:11:54.280
And so what is zero and one?

00:11:54.280 --> 00:11:57.250
And you may be asking yourself
what these numbers actually mean,

00:11:57.250 --> 00:11:59.830
and what we're doing is we're
animating within the Quartz

00:11:59.830 --> 00:12:01.510
Composer coordinate system.

00:12:01.650 --> 00:12:05.720
So I put together actually a little
patch so I can show you and talk to you

00:12:05.720 --> 00:12:08.450
a little bit about the coordinate system.

00:12:11.160 --> 00:12:14.650
So here we have our Quartz
Composer coordinate system.

00:12:14.730 --> 00:12:18.220
So as you'll recall, when we rotated the
sprite over the x-axis,

00:12:18.240 --> 00:12:23.000
that the x-axis is the horizontal one
and the y-axis is the vertical one.

00:12:23.210 --> 00:12:28.180
Our X axis goes from -1 on
the left to +1 on the right.

00:12:28.190 --> 00:12:32.500
Our Y axis is variable,
which you can see here.

00:12:32.590 --> 00:12:36.490
If I change the aspect ratio
of our rendering destination,

00:12:36.500 --> 00:12:39.180
you'll notice the number on the left,
being the width,

00:12:39.220 --> 00:12:42.610
remains a 2 and the height is changing.

00:12:43.810 --> 00:12:47.160
So this is very important because
what this allows you to do is create

00:12:47.160 --> 00:12:49.100
content for varying destinations.

00:12:49.110 --> 00:12:52.560
So say for your computer or
for somebody else's computer,

00:12:52.580 --> 00:12:56.690
for different installations
or whatever you want to do.

00:12:56.700 --> 00:13:00.140
So the important thing to recall
here is that the width always

00:13:00.140 --> 00:13:02.380
remains 2 and the height changes.

00:13:02.530 --> 00:13:03.450
I can show you that.

00:13:03.510 --> 00:13:07.930
I have a little coordinate
of where my mouse is.

00:13:07.970 --> 00:13:12.200
And you can see that it goes from
negative one to positive one in X,

00:13:12.240 --> 00:13:16.000
and one half the height to
negative one half the height.

00:13:20.060 --> 00:13:25.730
Okay, so here we are,
Peter starting at the center, 00,

00:13:25.730 --> 00:13:29.340
and moving to the right, 10.

00:13:30.280 --> 00:13:33.070
So what we need to do is get
Peter to move from off-screen

00:13:33.070 --> 00:13:34.240
left to off-screen right.

00:13:34.320 --> 00:13:37.700
So in our inspector for
our interpolation X patch,

00:13:37.710 --> 00:13:42.480
under input parameters,
I'm going to set the start value to -2.5.

00:13:42.780 --> 00:13:46.020
and the end value to 2.5.

00:13:46.100 --> 00:13:50.780
So Peter is now flying across
the screen at a brisk pace.

00:13:50.830 --> 00:13:53.580
So what we can do is change
the duration at which this

00:13:53.630 --> 00:13:55.560
interpolation is interpolating.

00:13:55.560 --> 00:13:58.020
So I'm gonna change
that to three seconds.

00:13:58.100 --> 00:14:02.980
And we now have Peter moving at a more
reasonable rate from left to right.

00:14:08.200 --> 00:14:15.200
[Transcript missing]

00:14:17.400 --> 00:14:18.590
All right,
the next thing that we're going to

00:14:18.590 --> 00:14:22.510
look at is adding some animation
to Peter's Y position to get him

00:14:22.510 --> 00:14:25.080
to bounce from left to right.

00:14:25.160 --> 00:14:27.820
And we can do that with
another interpolation patch.

00:14:27.840 --> 00:14:31.680
So search for interpolation and
drag an interpolation patch.

00:14:31.710 --> 00:14:33.880
Add on to the workspace.

00:14:33.890 --> 00:14:38.240
Again, the first thing I'm going to do
here is change the name or the title

00:14:38.240 --> 00:14:42.420
of the patch to interpolation Y.

00:14:43.000 --> 00:14:45.650
And what I'm going to do is I'm going
to connect that to my first sprite,

00:14:45.660 --> 00:14:49.410
but not to my second sprite immediately,
and that'll become apparent in a

00:14:49.410 --> 00:14:51.350
second for the reasoning behind that.

00:14:51.400 --> 00:14:53.420
But here we have Peter.

00:14:53.420 --> 00:14:57.070
Again, by default,
the interpolation is interpolating

00:14:57.070 --> 00:15:00.560
between 0 and 1 over 1 second,
so his Y position is

00:15:00.560 --> 00:15:02.460
changing over 1 second.

00:15:06.050 --> 00:15:10.590
And as I mentioned,
patches which we use for

00:15:10.590 --> 00:15:13.350
animation reference time.

00:15:14.180 --> 00:15:18.370
And in this case,
our interpolation patch is

00:15:18.410 --> 00:15:21.180
referencing time to produce a
value which changes over time.

00:15:21.180 --> 00:15:24.960
And what it's actually doing is it's
interpolating between the two values,

00:15:24.960 --> 00:15:27.590
and by default it's interpolating
in a linear fashion.

00:15:27.600 --> 00:15:30.160
So what we want to do is we want
to change the way it's actually

00:15:30.160 --> 00:15:32.070
interpolating between these numbers.

00:15:32.100 --> 00:15:34.560
So by default,
the interpolation patch has a

00:15:34.620 --> 00:15:38.140
few built-in interpolation modes,
which you can see in the input

00:15:38.360 --> 00:15:40.100
parameters of the inspector.

00:15:40.100 --> 00:15:41.100
There's quite a few.

00:15:41.100 --> 00:15:45.100
But what we actually want is
a custom interpolation curve.

00:15:45.100 --> 00:15:48.600
So if you go to the settings pane
of our interpolation Y patch and go

00:15:48.600 --> 00:15:51.530
to Customize Interpolation Curve,

00:15:51.750 --> 00:15:56.350
Add a point somewhere in the
middle and then drag the point on

00:15:56.350 --> 00:15:59.050
the upper right all the way down.

00:16:01.140 --> 00:16:03.440
And I can adjust this curve
so there's a little bit more

00:16:03.440 --> 00:16:06.740
acceleration on the outset.

00:16:06.780 --> 00:16:10.180
And we now have Peter bouncing
from left to right.

00:16:11.790 --> 00:16:17.860
So the next thing that we want to do
is get his reflection bouncing as well.

00:16:17.860 --> 00:16:22.160
So if some of you may have jumped the gun
and connected this to your second sprite

00:16:22.160 --> 00:16:24.160
as well and you did not want to do that.

00:16:24.160 --> 00:16:25.680
And the reason why you
didn't want to do that,

00:16:25.680 --> 00:16:29.290
as you recall,
we had shifted our reflection down in Y.

00:16:29.460 --> 00:16:31.890
So what we need to do is we
actually need to modulate the

00:16:31.890 --> 00:16:34.780
output of our interpolation Y so it
makes sense for our second sprite.

00:16:34.880 --> 00:16:37.090
So not only do we need to take
the value coming out of the

00:16:37.110 --> 00:16:41.510
interpolation Y and shift it down one,
we also need to flip it over,

00:16:41.510 --> 00:16:44.180
and we'll be inverting the number
by multiplying by negative one,

00:16:44.180 --> 00:16:49.180
so that as our original image bounces up,
our reflection bounces down.

00:16:49.180 --> 00:16:53.160
So we end up with this kind
of bouncing reflection.

00:16:53.270 --> 00:16:56.470
So in order to modulate the
output of our interpolation Y,

00:16:56.470 --> 00:16:58.770
we can get a math patch.

00:16:59.210 --> 00:17:02.130
And just like it's named,
it allows you to do simple

00:17:02.220 --> 00:17:04.700
mathematical operations.

00:17:04.700 --> 00:17:08.600
So as I mentioned before,
we'll need two operations.

00:17:08.600 --> 00:17:12.340
So in the settings for the math patch,
go ahead and click the plus

00:17:12.340 --> 00:17:14.900
for the number of operations.

00:17:16.070 --> 00:17:21.310
And in the Inspector pane,
under Input Parameters, set

00:17:21.700 --> 00:17:28.310
The operation one to multiply,
operand one to negative one,

00:17:28.940 --> 00:17:33.900
Operation 2 to subtract
and operand 2 to 1.

00:17:33.900 --> 00:17:37.030
So if we now were to connect the
output of our interpolation Y patch

00:17:37.100 --> 00:17:41.350
to the initial value of our math
patch and the output of that to

00:17:41.350 --> 00:17:44.690
our Y position of our sprite,
what we'll get is this

00:17:44.690 --> 00:17:45.960
bouncing reflection.

00:17:45.990 --> 00:17:47.940
And again,
recall the reason why that's working

00:17:47.940 --> 00:17:51.700
is because we're taking our value,
which is going like this,

00:17:51.750 --> 00:17:54.500
and we're inverting it
so it's going like this,

00:17:54.530 --> 00:17:55.700
and then we're shifting it down.

00:17:55.720 --> 00:17:58.850
So it's literally doing what
you're seeing on the screen.

00:18:01.450 --> 00:18:06.840
So here we have Peter bouncing
most jovially from off-screen

00:18:06.840 --> 00:18:10.990
left to off-screen right,
along with a reflection.

00:18:13.500 --> 00:18:21.200
[Transcript missing]

00:18:28.680 --> 00:18:32.340
So now that we looked a
little bit at animation,

00:18:32.340 --> 00:18:37.000
we're going to look at how to animate
groups of elements in Quartz Composer.

00:18:37.050 --> 00:18:39.040
And again,
there's a number of ways you can do that,

00:18:39.050 --> 00:18:42.100
but what we'll be using
today is the iterator.

00:18:43.110 --> 00:18:45.480
So the iterator,
just like a for loop for those

00:18:45.490 --> 00:18:49.120
of you with a little bit of
a programming background,

00:18:49.220 --> 00:18:53.960
what it allows you to do is it allows
you to execute part of your graph a

00:18:53.960 --> 00:18:56.630
certain number of times per frame.

00:18:58.910 --> 00:19:00.370
And the way that we do that is
the iterator is a special type

00:19:00.380 --> 00:19:03.320
of patch known as a macro patch,
and a macro patch allows you to take

00:19:03.350 --> 00:19:05.210
other patches and put it inside of it.

00:19:05.360 --> 00:19:08.840
So anything that's inside of this
iterator patch is going to be executed

00:19:08.840 --> 00:19:10.780
a certain number of times per frame.

00:19:10.800 --> 00:19:13.860
So what we're going to do is we're going
to take everything that we just built,

00:19:13.890 --> 00:19:17.460
our interpolations, our two sprites,
our math, and our original image,

00:19:17.460 --> 00:19:20.600
and we're going to put that inside
of an iterator and execute that a

00:19:20.600 --> 00:19:22.060
certain number of times per frame.

00:19:22.060 --> 00:19:26.800
So that'll give us a certain number
of Peters bouncing from left to right.

00:19:26.820 --> 00:19:29.530
So if you search for iterator,

00:19:30.930 --> 00:19:34.380
And drag the iterator macro
patch out onto our workspace,

00:19:34.380 --> 00:19:37.300
you'll notice that the
corners are square.

00:19:37.410 --> 00:19:40.800
And that is because macro
patches have square corners.

00:19:40.980 --> 00:19:43.790
It's just a little bit of a visual cue.

00:19:44.410 --> 00:19:47.140
So what you can do is
select our interpolations,

00:19:47.250 --> 00:19:49.990
Peter, Math, and our two sprites.

00:19:50.220 --> 00:19:52.950
And edit, cut.

00:19:53.010 --> 00:19:55.240
Everything's gone away.

00:19:55.310 --> 00:19:58.420
Go inside our iterator patch
by double clicking on it,

00:19:58.420 --> 00:20:00.690
and edit, paste.

00:20:00.930 --> 00:20:02.970
So it looks like we're
right back where we started,

00:20:02.970 --> 00:20:06.360
but instead what we're actually
doing is we're drawing 10 of these,

00:20:06.360 --> 00:20:08.250
one on top of the other.

00:20:09.120 --> 00:20:11.380
And the reason why I know
it's 10 is because the default

00:20:11.380 --> 00:20:16.760
settings for our iterator patch,
the number of iterations is set to 10.

00:20:16.790 --> 00:20:20.100
So within an iterator patch,
just like a for loop,

00:20:20.110 --> 00:20:24.440
what we need to do is not specify
how these iterations are the same,

00:20:24.450 --> 00:20:26.300
but we need to specify
how they're different.

00:20:26.300 --> 00:20:29.540
And the way that we differentiate
iterations within a for loop or our

00:20:29.540 --> 00:20:32.190
iterator is by using the current index.

00:20:32.390 --> 00:20:36.820
And you can access the current index
by using the iterator variables tool.

00:20:36.870 --> 00:20:43.140
Which if you search for iterator,
and drag that out onto the workspace,

00:20:43.920 --> 00:20:47.160
It has three output ports:
the current index, the current position,

00:20:47.160 --> 00:20:49.550
and the number of iterations.

00:20:49.690 --> 00:20:52.260
So the current position,
just so you know,

00:20:52.260 --> 00:20:56.550
is the normalized index between 0 and 1,
1 inclusive.

00:20:56.650 --> 00:20:59.130
So we'll be using that today.

00:21:02.400 --> 00:21:03.310
So what I'm going to do is I'm
going to take the current position,

00:21:03.310 --> 00:21:06.400
which again, the normalized index,
0 to 1, 1 inclusive,

00:21:06.410 --> 00:21:10.040
and I'm going to rearrange it so that
it goes between negative 2 and 0,

00:21:10.040 --> 00:21:12.460
and I'm going to apply that
to the Z position of our

00:21:12.460 --> 00:21:14.240
sprite and sprite reflection.

00:21:14.250 --> 00:21:17.200
And what we'll end up with
is the first iteration,

00:21:17.200 --> 00:21:21.770
or iteration 0, being at negative 2,
and then going all the way

00:21:21.780 --> 00:21:24.880
forward to 0 with 10 iterations.

00:21:24.890 --> 00:21:28.280
So I'm going to be using the new
mathematical expression patch.

00:21:28.630 --> 00:21:30.860
For those of you in Tiger,
you can simply use a math patch.

00:21:30.860 --> 00:21:34.200
And what you'll need to do is have,
with your two operations,

00:21:34.200 --> 00:21:38.030
you're going to multiply
by 2 and subtract by 2.

00:21:38.250 --> 00:21:40.590
But the mathematical expression
allows me to do that in a little

00:21:40.600 --> 00:21:44.690
bit more of an intuitive way,
which is easily traced through as well.

00:21:44.890 --> 00:21:49.520
So if I were to go to the settings
pane of our inspector and type

00:21:49.520 --> 00:21:56.920
current position times two minus two.

00:21:56.920 --> 00:22:02.390
And connect the current
position to the inspector.

00:22:04.690 --> 00:22:10.120
And I'm going to connect that to the
Z position of both of our sprites.

00:22:10.210 --> 00:22:14.070
And now we have Peter bouncing from
left to right at 10 different Z depths.

00:22:14.240 --> 00:22:16.680
What you'll immediately notice
is that it appears as if the

00:22:16.680 --> 00:22:19.200
Peter image is on a black background.

00:22:19.260 --> 00:22:22.440
In actuality,
this Peter image has an alpha channel,

00:22:22.440 --> 00:22:24.860
but what we need to do in order to
take advantage of that is adjust

00:22:24.940 --> 00:22:27.080
the blending mode on our sprites.

00:22:27.160 --> 00:22:30.740
So if I were to directly double click
on the blending input port and set

00:22:30.740 --> 00:22:36.720
the blending mode from none to over,
and do the same on our reflection,

00:22:37.740 --> 00:22:42.160
We now have Peter with a clean edge,
bouncing from left to right

00:22:42.160 --> 00:22:43.840
at 10 different Z depths.

00:22:46.670 --> 00:22:52.150
So again, what we did here is we simply
differentiated the behavior of

00:22:52.150 --> 00:22:59.580
our subgraph by using the index
of our iteration or our iterator.

00:22:59.640 --> 00:23:05.790
So I'm going to save that as five.

00:23:13.270 --> 00:23:15.190
Okay.

00:23:15.250 --> 00:23:18.870
So the next thing that we're going
to look at is differentiating

00:23:18.870 --> 00:23:24.960
the X position of each of these
sprites and their reflections.

00:23:25.010 --> 00:23:29.000
And in order to do that,
it's the same thing basically.

00:23:31.120 --> 00:23:33.010
But what I need to do
in order to do that,

00:23:33.180 --> 00:23:37.110
right now our X position is being
driven by this interpolation X,

00:23:37.110 --> 00:23:39.980
and each one of these iterations
is getting the same value.

00:23:40.050 --> 00:23:44.420
What I need this to do,
recall that patches which animate

00:23:44.420 --> 00:23:49.180
in Quartz Composer produce
numbers which depend on the time.

00:23:49.310 --> 00:23:53.210
What we need to do is change the time
which each of these patches references,

00:23:53.210 --> 00:23:55.460
and we're going to change it
in a way that's based on the

00:23:55.460 --> 00:23:58.170
index within our iterator.

00:23:58.830 --> 00:24:01.960
So patches which reference
time have this special menu,

00:24:02.040 --> 00:24:04.620
if you were to Control-click
on our interpolation X,

00:24:04.640 --> 00:24:06.640
named Time Base.

00:24:06.670 --> 00:24:11.230
And what this allows you to do, again,
is manually control the time

00:24:11.230 --> 00:24:13.770
which this patch references.

00:24:13.910 --> 00:24:16.950
So by default, this is set to parent,
and this is referencing the time

00:24:16.950 --> 00:24:20.060
which our iterator patch is providing.

00:24:20.090 --> 00:24:24.040
And the iterator patch is providing
a time which is also set to parent.

00:24:24.080 --> 00:24:27.760
So it's actually looking
at the root time base.

00:24:27.790 --> 00:24:31.450
So there's one time, basically,
for this entire composition.

00:24:31.730 --> 00:24:34.270
But what we want to do is
control the time which our

00:24:34.270 --> 00:24:36.320
interpolation X references manually.

00:24:36.530 --> 00:24:39.260
So we'll set our time base to external.

00:24:39.260 --> 00:24:41.590
And you'll immediately notice
that everything is gone.

00:24:41.600 --> 00:24:44.160
And the reason is because
if I were to look at the

00:24:44.180 --> 00:24:48.280
inspector for our interpolation,
under Input Parameters,

00:24:48.280 --> 00:24:54.190
there's a new input port,
or a new input here named Patch Time,

00:24:54.190 --> 00:24:56.500
which I can now control manually.

00:24:56.500 --> 00:24:56.720
I can get Peter to do all this.

00:24:56.720 --> 00:25:00.110
to do all kinds of fun stuff.

00:25:02.670 --> 00:25:05.920
So what I'm actually doing is
I am changing the time which the

00:25:05.920 --> 00:25:07.300
interpolation X is referencing.

00:25:07.300 --> 00:25:09.540
At this case,
it's referencing some number

00:25:09.820 --> 00:25:11.150
around one and a half.

00:25:11.160 --> 00:25:14.980
So this, recall that our
interpolation is just simply,

00:25:14.980 --> 00:25:16.980
in this case,
interpolating between negative

00:25:16.990 --> 00:25:19.890
2.5 and 2.5 over three seconds.

00:25:20.000 --> 00:25:23.920
It's also looping,
so if I were to go past three,

00:25:23.940 --> 00:25:28.260
we'd start again back on
the left at negative 2.5.

00:25:32.300 --> 00:25:36.440
So what I'm going to do is I'm
going to modulate the time,

00:25:36.450 --> 00:25:39.230
or the patch time,
that the interpolation X is

00:25:39.230 --> 00:25:44.590
referencing based on the index
within the iterator patch.

00:25:44.790 --> 00:25:48.170
So the first thing I'm going to do is
I'm going to search for patch time.

00:25:48.490 --> 00:25:50.640
I need something to modulate.

00:25:50.650 --> 00:25:52.480
In this case,
it'll be the patch time of the

00:25:52.550 --> 00:25:54.720
parent patch or the iterator.

00:25:54.890 --> 00:25:57.010
So if I were to directly
connect this back to the patch

00:25:57.050 --> 00:26:00.080
time of our interpolation X,
we'd be more or less back

00:26:00.100 --> 00:26:03.140
where we started with the
Peters bouncing from left to right.

00:26:03.200 --> 00:26:09.000
But now I have this parameter exposed,
so I can modulate that.

00:26:11.160 --> 00:26:15.880
And I'm simply going to use
a math patch to add an offset

00:26:16.320 --> 00:26:19.090
based on the current index.

00:26:19.790 --> 00:26:24.810
So if I were to connect the patch time
to the initial value of our math patch,

00:26:24.830 --> 00:26:27.190
and the output of our math
patch to the patch time,

00:26:27.190 --> 00:26:31.020
nothing has changed because by
default we're simply adding zero.

00:26:32.310 --> 00:26:34.760
So what I'm going to do is I'm simply
going to connect the current position

00:26:34.940 --> 00:26:39.060
from our iterator variables to operand1.

00:26:39.080 --> 00:26:44.120
And you'll immediately notice is that
now each of our successive Peters,

00:26:44.130 --> 00:26:47.040
again recall that they're starting
at negative two and coming forward,

00:26:47.040 --> 00:26:51.660
so each successive one is
offset by some number close to

00:26:51.730 --> 00:26:54.780
point one in their patch time.

00:26:54.800 --> 00:26:57.230
So what you get is this
kind of diagonal row of

00:26:57.340 --> 00:26:59.810
Peters bouncing from left to right.

00:27:00.400 --> 00:27:03.600
So as exciting as that is,
what we'll need to do in order to

00:27:03.600 --> 00:27:07.140
add a little bit more variability
to this example is randomize

00:27:07.140 --> 00:27:10.470
the position based on the index.

00:27:11.600 --> 00:27:17.300
So search for random and drag
that patch out onto our workspace.

00:27:17.300 --> 00:27:22.360
And what random does is it'll simply
produce a continuously variable number,

00:27:22.360 --> 00:27:26.000
or an animating number,
between the min and the max over time.

00:27:26.000 --> 00:27:27.800
The key word here is time.

00:27:27.800 --> 00:27:30.380
The random patch is
referencing a time base.

00:27:30.380 --> 00:27:34.190
So what I'm going to do is I'm
going to externalize that time base.

00:27:34.390 --> 00:27:38.020
And I'm going to, more or less,
look up into this random patch

00:27:38.100 --> 00:27:40.760
based on the current index.

00:27:41.580 --> 00:27:46.730
So if I were to connect current index
to the patch time of the random,

00:27:46.730 --> 00:27:50.500
and connect the output of the
random patch to operand one,

00:27:50.560 --> 00:27:56.620
what we now have is a group of Peters,
each one with a random offset per

00:27:56.620 --> 00:27:59.410
index added to our patch time.

00:28:00.850 --> 00:28:02.820
And in actuality,
what we need to do is we need to set

00:28:02.820 --> 00:28:06.810
our max value of our random patch
to the duration of our interpolation

00:28:06.810 --> 00:28:08.480
to get a more even distribution.

00:28:08.650 --> 00:28:13.660
So if I set the max value of
our random patch to three,

00:28:13.680 --> 00:28:18.300
we now have a more or less evenly
distributed group of feeders bouncing

00:28:18.300 --> 00:28:21.110
from left to right at different z-depths.

00:28:28.070 --> 00:28:31.190
And what some of you may notice,
if you have a keen eye,

00:28:31.200 --> 00:28:34.060
is that this pattern
is actually repeating.

00:28:34.100 --> 00:28:36.280
And the reason why it's repeating,
recall that our

00:28:36.280 --> 00:28:40.120
interpolation is set to loop,
and that our random patch is actually

00:28:40.150 --> 00:28:45.660
outputting the same number for
each iteration within our iterator.

00:28:45.690 --> 00:28:48.420
And that's because the time which
it's referencing is actually

00:28:48.420 --> 00:28:50.160
based on the current index.

00:28:50.200 --> 00:28:53.040
Now if we wanted that changing,
we could do some other kind of math and

00:28:53.040 --> 00:28:57.140
add some patch time the same way that
we're adding patch time to our random.

00:28:57.260 --> 00:29:00.190
But for this example,
this should suffice.

00:29:01.250 --> 00:29:04.990
The next thing that we're going to
look at is randomizing the bounce

00:29:05.090 --> 00:29:07.360
for each one of these iterations.

00:29:07.410 --> 00:29:10.370
And we can do that using
the exact same technique.

00:29:10.450 --> 00:29:14.890
So what I'm going to do is I'm going
to select my interpolation Y patch.

00:29:15.380 --> 00:29:20.700
Control click on that and set
the time base to external.

00:29:20.900 --> 00:29:23.360
So we now have our Peters sliding
from left to right.

00:29:23.360 --> 00:29:25.360
This should be familiar by now.

00:29:25.550 --> 00:29:28.800
And I can control them patch
time manually and get them

00:29:28.800 --> 00:29:32.310
to do this hover type thing.

00:29:33.260 --> 00:29:37.330
And you can simply connect
the output of our math patch,

00:29:37.330 --> 00:29:40.140
which is the patch time with
a random offset per index,

00:29:40.140 --> 00:29:43.080
to the patch time of our interpolation Y.

00:29:44.450 --> 00:29:49.440
You should now have Peters randomly
bouncing with random offsets in

00:29:49.600 --> 00:29:54.760
X from off-screen left to off-screen
right at different Z depths.

00:29:56.060 --> 00:30:02.900
And I'm going to save that as 6 final.

00:30:02.900 --> 00:30:08.310
Go full screen on that
so you guys can see it.

00:30:15.670 --> 00:30:17.600
So if we could go to slides please.

00:30:17.600 --> 00:30:27.400
Alright, some of the things that you
learned and some things to remember

00:30:27.400 --> 00:30:30.580
in this first tutorial is that
the Quartz Composer coordinate

00:30:30.580 --> 00:30:32.400
system is resolution independent.

00:30:32.400 --> 00:30:35.950
This means, again,
is that the Quartz Composer coordinate

00:30:36.000 --> 00:30:39.700
system uses units and not pixels,
and the reason why is so that we can

00:30:39.790 --> 00:30:42.080
display on differing output destinations.

00:30:42.900 --> 00:30:46.090
The other thing to remember is that you
need to pay attention to rendering order.

00:30:46.100 --> 00:30:48.830
If some of you jumped the gun and
ended up clearing at some point

00:30:48.830 --> 00:30:52.100
after which you were drawing,
you will not see anything.

00:30:52.110 --> 00:30:56.100
And it may seem a little
abstract or maybe it's concrete,

00:30:56.100 --> 00:30:58.980
but basically you need to
erase first and then draw.

00:31:00.930 --> 00:31:04.300
The other thing to remember here is
that you can control the time for

00:31:04.850 --> 00:31:06.800
patches which reference the time.

00:31:06.800 --> 00:31:11.940
This allows you to do interesting things,
particularly within an iterator,

00:31:11.940 --> 00:31:16.350
such as reference a time which
is based on the current index.

00:31:17.500 --> 00:31:23.600
Okay, so for our second tutorial we'll
be looking at how you can use

00:31:23.600 --> 00:31:26.400
Quartz Composer in production.

00:31:26.480 --> 00:31:30.690
So you might recall from Steve's
keynote that he presented the backup,

00:31:30.810 --> 00:31:33.840
the new backup system,
and the backmost layer

00:31:33.840 --> 00:31:36.600
of that backup system,
of the backup animation was

00:31:36.600 --> 00:31:38.400
done using Quartz Composer.

00:31:38.400 --> 00:31:42.660
So recall that this is a spiral
galaxy looking kind of thing and

00:31:42.660 --> 00:31:46.400
there's a galactic core in the
center and some stars flying out.

00:31:46.400 --> 00:31:49.020
So what we're going to do in
this tutorial is we're going to

00:31:49.020 --> 00:31:53.220
look at how you would approach
something like this and do an

00:31:53.280 --> 00:32:00.400
approximation of how we actually
built this for the backup system.

00:32:00.400 --> 00:32:06.400
So if I could have demo one please.

00:32:06.520 --> 00:32:15.400
I'm going to create a new file.

00:32:15.400 --> 00:32:18.510
And get set up.

00:32:26.640 --> 00:32:28.710
All right, so old news,
the first thing that we need

00:32:28.780 --> 00:32:30.600
to do is clear the screen.

00:32:30.600 --> 00:32:42.080
So let's get a clear patch,
clear the screen.

00:32:42.540 --> 00:32:44.990
The next thing that we're going
to do in decomposing this problem

00:32:45.180 --> 00:32:48.860
is we're going to look at the most
prominent element of this scene,

00:32:48.860 --> 00:32:51.980
this being the swirling galactic cloud.

00:32:52.020 --> 00:32:54.990
So in order to accomplish that,
the first thing that we need is some

00:32:54.990 --> 00:32:57.600
kind of evolving or billowing cloud.

00:32:57.640 --> 00:33:01.110
And we can get something pretty
quickly by using the particle system.

00:33:01.260 --> 00:33:05.030
So if you search for particle
system and drag a particle

00:33:05.030 --> 00:33:08.160
system out onto the workspace,

00:33:09.200 --> 00:33:11.880
If you went to Pierre's session,
you'll have a brief overview

00:33:11.880 --> 00:33:14.900
of a particle system,
but for those of you who haven't,

00:33:14.960 --> 00:33:20.400
particle system basically defines a
group of points evolving over time,

00:33:20.400 --> 00:33:24.090
and each one of these points is birthed,
lives for a certain amount of time,

00:33:24.140 --> 00:33:25.720
and then dies and is reborn.

00:33:25.870 --> 00:33:33.480
And the motion which these points move
at in space is defined by the input

00:33:33.480 --> 00:33:33.480
parameters of our particle system.

00:33:33.970 --> 00:33:37.370
And our particle system allows us
to display a whole bunch of images,

00:33:37.370 --> 00:33:41.040
in this case on these white squares
which are always facing the camera.

00:33:41.120 --> 00:33:44.100
So the first thing that we're going to
need to do is texture these squares.

00:33:44.170 --> 00:33:48.550
So if you go to the assets
folder for the galaxy,

00:33:52.230 --> 00:33:55.590
There is an image in there named Cloud.

00:33:55.660 --> 00:33:59.010
Let's drag Cloud onto our workspace.

00:34:00.450 --> 00:34:04.150
and connect the output of
the cloud image to the input

00:34:04.160 --> 00:34:06.470
image of our particle system.

00:34:06.960 --> 00:34:11.260
So you should all see a whole bunch
of clouds kind of flying around.

00:34:11.260 --> 00:34:14.500
And just like with Peter,
these are on a black background because

00:34:14.500 --> 00:34:16.810
we need to adjust the blending mode.

00:34:17.520 --> 00:34:22.810
So double click on the blending mode
and set the mode from none to add,

00:34:22.810 --> 00:34:26.030
because we're looking for a
more additive effect here.

00:34:27.780 --> 00:34:31.580
And we're now going to look at setting
up the parameters of our particle system

00:34:31.580 --> 00:34:36.780
to get it to behave in a way which is a
little bit more like a billowing cloud.

00:34:37.450 --> 00:34:43.150
So I'm going to adjust the input
parameters of our particle system.

00:34:45.410 --> 00:34:48.850
So if you guys just follow along,
I will explain what I'm doing

00:34:48.900 --> 00:34:51.080
after I set all of our parameters.

00:34:51.200 --> 00:34:54.990
So the first thing that I'm going
to do is I'm going to set the color.

00:34:56.170 --> 00:34:59.160
I'm going to go for
something like a sea green,

00:34:59.190 --> 00:35:00.540
something over here.

00:35:00.540 --> 00:35:05.570
And then I'm going to adjust the opacity.

00:35:08.050 --> 00:35:14.700
- Something like 20%. Going to
set the X min velocity to

00:35:14.700 --> 00:35:19.900
negative 0.0 or negative 0.5.

00:35:20.150 --> 00:35:26.430
The X max velocity to 0.5,
the Y min velocity to -0.5,

00:35:26.430 --> 00:35:32.920
the Y max velocity to 0.5,
the Z min and Z max velocity to 0,

00:35:35.260 --> 00:35:39.100
The min size to 0.05.

00:35:39.100 --> 00:35:39.940
Whoops.

00:35:39.940 --> 00:35:46.390
And the max size to 0.075.

00:35:46.900 --> 00:35:48.160
Lifetime you can leave it to.

00:35:48.160 --> 00:35:53.510
We're going to change
our size delta to 0.15.

00:35:55.410 --> 00:36:00.610
Our opacity delta to minus .125.

00:36:01.110 --> 00:36:02.870
And our attraction to zero.

00:36:03.060 --> 00:36:06.500
So I'll zoom in on that
so you guys can see that.

00:36:09.200 --> 00:36:17.200
Alessaandro Sabatelli: Okay,
so let's look at what I did

00:36:17.200 --> 00:36:18.560
to define this behavior.

00:36:18.560 --> 00:36:22.260
So now that we have this billowing
cloud just kind of flying outwards,

00:36:22.260 --> 00:36:26.720
and again, recall this is just one image,
and what we're doing is we're

00:36:26.750 --> 00:36:29.030
modifying this image over time.

00:36:29.760 --> 00:36:32.480
So what we did was we set
the initial velocity vector.

00:36:32.520 --> 00:36:35.210
So when each one of
these particles is born,

00:36:35.210 --> 00:36:37.700
it is born with an
initial velocity vector.

00:36:37.740 --> 00:36:41.310
So in this case I'm defining a min and
max in the three different dimensions,

00:36:41.330 --> 00:36:42.610
x, y, and z.

00:36:42.920 --> 00:36:46.270
Recall that the z is zero,
so what we're doing is we're generating a

00:36:46.270 --> 00:36:52.200
velocity vector randomly on a flat plane,
which is pointing somewhere within

00:36:52.200 --> 00:36:55.900
negative 0.5 to positive 0.5 in x and y.

00:36:55.910 --> 00:36:58.720
So what we get are these
particles that are kind of flying

00:36:58.720 --> 00:37:00.480
outwards from a central point.

00:37:01.290 --> 00:37:07.450
When each one of these particles is born,
we're saying that we want it to be,

00:37:07.450 --> 00:37:10.290
or have a size,
which is somewhere between

00:37:10.290 --> 00:37:13.300
0.05 and 0.075 units.

00:37:13.300 --> 00:37:18.680
It's going to live for two seconds,
and over those two seconds the size is

00:37:18.680 --> 00:37:25.200
going to change by 0.15 units per second,
and the opacity is going to change

00:37:25.200 --> 00:37:29.300
by -0.125 per second as well.

00:37:29.320 --> 00:37:33.380
So what we get are these things
flying out randomly from the center,

00:37:33.450 --> 00:37:37.200
and as they fly out,
they're growing and fading out.

00:37:37.300 --> 00:37:40.360
And that's exactly what
you see in the viewer.

00:37:43.260 --> 00:37:45.780
So the next thing that we're going
to look at is how to add a little

00:37:45.780 --> 00:37:49.210
bit of a galactic swirl to this.

00:37:52.120 --> 00:37:57.000
One way that we can do that in Quartz
Composer is by leveraging Core Image.

00:37:57.000 --> 00:37:59.440
For those of you
unfamiliar with Core Image,

00:37:59.530 --> 00:38:05.800
Core Image allows you to filter
or process pixels in a very

00:38:05.930 --> 00:38:09.000
efficient and optimized way.

00:38:09.000 --> 00:38:13.000
What we need to do is we need to
pass a Core Image filter an image,

00:38:13.000 --> 00:38:18.000
have it operate on that image,
and then display that image on a surface.

00:38:18.120 --> 00:38:22.000
So right now we have a particle system
which is being rendered to the screen.

00:38:22.000 --> 00:38:26.390
In order to render this to an image,
what we need is a special macro

00:38:26.390 --> 00:38:29.050
patch called render an image.

00:38:29.600 --> 00:38:35.170
So if you search for render an image,
you might want to search for

00:38:35.540 --> 00:38:37.940
render generator as a shortcut.

00:38:37.940 --> 00:38:39.420
And here's our render an image.

00:38:39.460 --> 00:38:42.200
Again, a macro patch, square,

00:38:43.430 --> 00:38:47.620
And what we're going to do is simply
select our particle system in our cloud,

00:38:47.620 --> 00:38:48.960
edit cut,

00:38:50.030 --> 00:38:54.360
Go inside our render an
image by double-clicking it.

00:38:54.420 --> 00:38:58.060
And because we're going to
be generating an image here,

00:38:58.060 --> 00:39:00.700
the first thing we need to do,
just like when we're generating

00:39:00.700 --> 00:39:03.050
an image on the viewer,
is we need to clear this

00:39:03.140 --> 00:39:04.650
image once per frame.

00:39:05.150 --> 00:39:10.970
So I'm going to search for clear,
drag clear out onto the workspace,

00:39:10.970 --> 00:39:12.760
and edit paste.

00:39:12.830 --> 00:39:15.240
For those of you that jumped
the gun and pasted your particle

00:39:15.240 --> 00:39:17.380
system and then cleared,
recall that you're drawing

00:39:17.380 --> 00:39:19.660
and then erasing the screen
and you won't see anything.

00:39:19.660 --> 00:39:22.660
So what you need to do is
change the rendering order.

00:39:22.660 --> 00:39:25.250
So for those of you that did that,
you can simply the rendering

00:39:25.260 --> 00:39:27.120
layer to one instead of two.

00:39:27.120 --> 00:39:29.700
So then you'll be clearing and
drawing your particle system.

00:39:37.540 --> 00:39:37.540
So I'm going to do that.

00:39:38.960 --> 00:39:40.960
So onto the workspace.

00:39:41.030 --> 00:39:43.760
Here's our familiar white square.

00:39:43.810 --> 00:39:48.420
Connect the output of the render an image
to the input image port of our sprite.

00:39:48.480 --> 00:39:52.910
And it'll look a little squished,
same reason as Peter being squished.

00:39:53.180 --> 00:39:56.770
The aspect ratio,
or the proportions of the image which

00:39:56.770 --> 00:39:59.910
we're generating by our render an image,
is not square.

00:39:59.920 --> 00:40:02.320
And you can see this by hovering
over the output image port.

00:40:02.360 --> 00:40:06.150
And you'll notice it says 512 by 384.

00:40:08.450 --> 00:40:12.690
What you'll also notice
is that new in Leopard,

00:40:12.690 --> 00:40:15.860
our viewer has a size
displayed directly on it,

00:40:15.860 --> 00:40:18.260
which happens to be 512 by 384.

00:40:18.260 --> 00:40:19.370
This is not a coincidence.

00:40:19.460 --> 00:40:21.640
By default,
the render an image is producing

00:40:21.640 --> 00:40:24.390
an image which is sized to
the rendering destination.

00:40:24.640 --> 00:40:29.440
So in order to some cycles when
processing our core image filter,

00:40:29.480 --> 00:40:33.190
what we're going to do is
fix the size of our image.

00:40:34.070 --> 00:40:37.570
So new in Leopard,
you can dynamically change the size of

00:40:37.570 --> 00:40:40.800
your render and image by just simply
double-clicking these input ports.

00:40:40.820 --> 00:40:43.050
But if you're on Tiger,
you can go to the settings

00:40:43.940 --> 00:40:49.940
pane of our set the width to
512 and the height to 512.

00:40:50.040 --> 00:40:53.130
So we now have a correctly
proportioned image,

00:40:53.140 --> 00:40:55.200
which we're displaying on a square.

00:40:55.240 --> 00:41:00.170
And I'm going to set the
size of my sprite to be 2.5.

00:41:00.290 --> 00:41:05.520
So we're more or less
back where we started,

00:41:05.550 --> 00:41:11.200
except now, just like with time,
we can modulate this image in line.

00:41:11.210 --> 00:41:14.720
So in order to do that,
I'm going to need you to get

00:41:14.720 --> 00:41:16.710
the spin distortion asset.

00:41:19.320 --> 00:41:20.600
from the QC Galaxy.

00:41:20.600 --> 00:41:25.600
So within Assets,
there is a galaxyassets.qtz.

00:41:25.660 --> 00:41:28.340
If you double click on that,
you can just close the

00:41:28.340 --> 00:41:30.880
viewer or wait for it.

00:41:31.670 --> 00:41:33.880
- Fun little animation in there.

00:41:33.920 --> 00:41:36.400
But what we need is the spin distortion.

00:41:37.450 --> 00:41:39.790
So if you select that,

00:41:42.500 --> 00:41:46.900
I'm going to minimize this to the dock.

00:41:47.000 --> 00:41:49.700
We're going to need
that a little later on.

00:41:49.700 --> 00:41:51.980
And I'm going to edit paste.

00:41:51.980 --> 00:41:54.240
So here is our spin distortion.

00:41:54.240 --> 00:41:57.990
And as I mentioned,
Core Image comes with something

00:41:58.100 --> 00:42:01.180
like 150 built-in filters.

00:42:01.230 --> 00:42:05.940
But for this particular project,
as you'd guess, we had to write our own.

00:42:05.940 --> 00:42:11.310
So spin distortion leverages
Core Image using the Core Image kernel

00:42:11.380 --> 00:42:13.620
patch in Quartz Composer.

00:42:13.620 --> 00:42:15.050
You can see this kernel patch.

00:42:15.050 --> 00:42:17.370
Let me clean up a little bit.

00:42:18.120 --> 00:42:27.590
If you go to the settings
inspector on the kernel,

00:42:27.590 --> 00:42:27.590
after carefully reading our disclaimer,
which I'm sure all of you will do,

00:42:28.320 --> 00:42:31.080
We have our spin distortion kernel.

00:42:31.100 --> 00:42:32.800
Exercise up to the reader
if you guys want to look

00:42:32.860 --> 00:42:34.440
through that on your own time.

00:42:34.560 --> 00:42:37.150
But basically what we're going to do is
we're going to take an image in and we're

00:42:37.160 --> 00:42:39.710
going to add some kind of spin to it.

00:42:41.660 --> 00:42:44.600
And in order to accomplish that,
I'm going to route our image

00:42:44.670 --> 00:42:47.640
through the spin distortion filter.

00:42:47.640 --> 00:42:50.750
And here we have a spinning gas cloud.

00:42:54.970 --> 00:42:55.900
Thank you.

00:42:55.900 --> 00:43:01.420
So it's going kind of fast,
which would be an

00:43:01.420 --> 00:43:03.790
insane amount of backup.

00:43:04.350 --> 00:43:06.560
So what we can do is a similar technique.

00:43:06.560 --> 00:43:09.060
We're going to be modulating
the time which our render

00:43:09.060 --> 00:43:10.740
and image is referencing.

00:43:10.910 --> 00:43:14.540
Recall that our particle system
is animating based on time.

00:43:14.570 --> 00:43:16.240
Its time base is set to parent.

00:43:16.340 --> 00:43:18.520
The parent in this case
is the render and image.

00:43:18.540 --> 00:43:20.860
So what we can do is just
simply externalize the time

00:43:20.860 --> 00:43:23.170
base of our render and image.

00:43:25.620 --> 00:43:26.660
Again, it's black.

00:43:26.660 --> 00:43:29.540
If you were to go to input parameters,
we have this patch time,

00:43:29.540 --> 00:43:36.740
and you can simply play around all
day long by scratching our time here.

00:43:36.980 --> 00:43:42.620
But what we're gonna need
is a patch time patch.

00:43:43.910 --> 00:43:46.830
So drag patch time out.

00:43:46.860 --> 00:43:50.900
And you can connect that to the
patch time of our render and image.

00:43:50.900 --> 00:43:56.890
We'll need a math patch
to modulate this number.

00:44:05.550 --> 00:44:08.300
Connect that to the initial value.

00:44:08.340 --> 00:44:10.900
Connect that to patch time.

00:44:10.940 --> 00:44:13.840
And we're simply going to,
in the inspector pane,

00:44:13.860 --> 00:44:17.540
under input parameters,
set our operation one to multiply

00:44:18.200 --> 00:44:21.580
and set it to something like 0.05.

00:44:21.650 --> 00:44:24.950
So now we have this
slowly evolving gas cloud.

00:44:27.420 --> 00:44:30.200
Connect that to the initial value.

00:44:30.210 --> 00:44:32.800
Connect that to patch time.

00:44:32.800 --> 00:44:35.740
And we're simply going to,
in the inspector pane,

00:44:35.740 --> 00:44:40.060
under input parameters,
set our operation one to multiply

00:44:40.060 --> 00:44:43.520
and set it to something like 0.05.

00:44:43.540 --> 00:44:46.670
So now we have this
slowly evolving gas cloud.

00:44:57.420 --> 00:44:59.840
of everything that we had selected,

00:45:02.500 --> 00:45:08.380
And I'm going to name that Spiral Galaxy.

00:45:10.230 --> 00:45:13.680
So now we're simply clearing the
screen and drawing the spiral galaxy.

00:45:13.700 --> 00:45:18.780
The next thing that we're gonna look at
is adding this kind of blown out center,

00:45:18.780 --> 00:45:20.440
which is our galactic core.

00:45:20.460 --> 00:45:26.900
And I have pre-assembled
that in our assets folder.

00:45:34.500 --> 00:45:35.400
Oh, sorry.

00:45:35.400 --> 00:45:39.900
That is in the Galaxy Assets Composition.

00:45:41.030 --> 00:45:45.190
So select the Sun macro and edit copy.

00:45:45.440 --> 00:45:52.190
Going to re-minimize that and edit paste.

00:45:55.480 --> 00:45:57.180
So now we have a blown out center.

00:45:57.200 --> 00:46:01.580
And if you were to look in Sun Macro,
we're simply displaying an image,

00:46:01.580 --> 00:46:04.140
which is this radial
gradient on a sprite,

00:46:04.140 --> 00:46:06.020
which we've named Sun.

00:46:06.050 --> 00:46:08.260
So pretty easy.

00:46:10.420 --> 00:46:13.800
The next thing that we're going to grab
from our Galaxy assets is the stars.

00:46:13.800 --> 00:46:22.840
So select the stars macro patch, edit,
copy, and paste.

00:46:25.960 --> 00:46:32.230
Close that, and you'll now see some
stars flying out at us.

00:46:32.230 --> 00:46:32.230
And if you were to look inside
of the stars macro patch,

00:46:32.480 --> 00:46:35.100
We have a particle system which we've
configured a little differently.

00:46:35.100 --> 00:46:38.790
Now what we're doing is we're
generating a random velocity

00:46:38.790 --> 00:46:41.690
vector within this cone,
which is kind of coming out at us,

00:46:41.690 --> 00:46:44.080
so we get these stars flying out at us.

00:46:44.170 --> 00:46:48.780
And I'm also modulating the patch time
here to slow this entire thing down.

00:46:49.110 --> 00:46:50.000
And that's really it.

00:46:50.000 --> 00:46:53.300
So we have these stars flying
out at us over this galactic

00:46:53.440 --> 00:46:55.910
core with this spinning galaxy.

00:47:00.900 --> 00:47:06.800
I'm going to save that as Galaxy.

00:47:06.830 --> 00:47:09.920
So I'll go full screen
so you guys can see that.

00:47:14.220 --> 00:47:16.420
So obviously there was a
lot more tweaking that went

00:47:16.420 --> 00:47:18.420
into the final product,
but this should give you an

00:47:18.420 --> 00:47:22.950
idea of how you can approach
production using Quartz Composer.

00:47:22.960 --> 00:47:27.510
So if we can go back to slides please.

00:47:38.000 --> 00:47:41.750
Slides.

00:47:42.140 --> 00:47:44.850
Thank you.

00:47:45.340 --> 00:47:48.650
Okay, some of the things that we learned
in this last tutorial is that you

00:47:48.650 --> 00:47:53.500
can use a render an image macro patch
to post-process areas of your graph.

00:47:53.500 --> 00:47:56.220
So simply put them inside of our
render an image and then you can

00:47:56.310 --> 00:48:00.540
leverage core image to apply filters
and effects to areas of your graph.

00:48:00.540 --> 00:48:03.940
We also looked a little bit in
both of these tutorials on how to

00:48:03.940 --> 00:48:06.360
approach visual problem solving.

00:48:06.960 --> 00:48:10.190
Basically what you need to do is
decompose your problem into smaller

00:48:10.190 --> 00:48:12.580
steps just like everything else.

00:48:12.620 --> 00:48:16.250
Some people seem to have difficulty
in applying this to visual problems,

00:48:16.250 --> 00:48:17.960
but it's really the same thing.

00:48:17.960 --> 00:48:21.900
So recall in the first tutorial
our final product was a whole

00:48:22.030 --> 00:48:25.590
group of Peters bouncing from
left to right at different depths

00:48:25.680 --> 00:48:27.100
in an all randomized fashion.

00:48:27.100 --> 00:48:30.820
This may seem kind of daunting at first,
but the first thing that we did was we

00:48:30.820 --> 00:48:34.360
simply displayed our image on the screen,
added a reflection,

00:48:34.360 --> 00:48:38.260
then we got this animating and
then applied or then exploded

00:48:38.360 --> 00:48:40.600
this into a group of elements.

00:48:40.600 --> 00:48:43.000
And the last thing to remember
when working in Quartz

00:48:43.000 --> 00:48:44.240
Composer is to have fun.

00:48:44.240 --> 00:48:47.220
What we're working in is an
environment where we don't

00:48:47.220 --> 00:48:52.280
have to deal with this compile,
test, you know, run cycle.

00:48:52.280 --> 00:48:55.780
We simply can build things,
drop patches directly on our workspace,

00:48:55.780 --> 00:48:59.160
get immediate visual feedback
and learn from there.

00:48:59.160 --> 00:49:02.080
So it's this two-fold process
where you're experimenting,

00:49:02.080 --> 00:49:04.510
learning and also you can
use this in production.

00:49:04.780 --> 00:49:07.150
and get specific results.

00:49:08.510 --> 00:49:11.900
So for more information you
can contact Alan Schaffer,

00:49:11.900 --> 00:49:13.960
who is our graphics evangelist.

00:49:14.100 --> 00:49:17.060
But it looks like we have some time,
so what I'm going to do is

00:49:17.060 --> 00:49:19.560
completely decimate our galaxy.

00:49:19.680 --> 00:49:23.630
So if we can go back
to the demo one please.

00:49:27.870 --> 00:49:31.160
So if you have any questions,
please come to our lab later on during

00:49:31.170 --> 00:49:33.940
the day and I can help you directly.

00:49:34.430 --> 00:49:37.480
Since we have time,
I'll show you a little bit how

00:49:37.480 --> 00:49:39.830
I work inside of Quartz Composer.

00:49:40.600 --> 00:49:42.100
So here we have our galaxy.

00:49:42.180 --> 00:49:46.290
So what I'm going to do is I'm going to
take our galaxy and kind of add a little

00:49:46.290 --> 00:49:48.740
bit of a different stylistic view to it.

00:49:48.740 --> 00:49:53.960
I'm going to go for something late 70s,
early 80s, so it's in a wild style

00:49:53.960 --> 00:49:55.640
or something like that.

00:49:55.730 --> 00:49:59.890
And we'll get our thing to look a little
bit more like some kind of style machine.

00:50:00.260 --> 00:50:04.680
So the first thing I'm going to change
is the look of our spiral galaxy.

00:50:04.680 --> 00:50:10.750
So I'm going to go inside of my spiral
galaxy and look for some patches.

00:50:11.530 --> 00:50:15.260
And inside of our render an image,
we're displaying our particle system.

00:50:15.460 --> 00:50:19.310
So I'm going to replace our
cloud with a radial gradient.

00:50:19.530 --> 00:50:23.530
This is a core image, radial gradient.

00:50:24.150 --> 00:50:27.790
And I'm going to set my color to
have an opacity of zero so it's

00:50:27.790 --> 00:50:30.400
automatically cropped and as a
result the radial gradient will

00:50:30.490 --> 00:50:35.610
produce an image of fixed size as
opposed to an image of infinite size.

00:50:37.110 --> 00:50:40.750
And I'm simply going to connect
this to the input image.

00:50:40.820 --> 00:50:44.450
This is immediately going to blow out
because our color one is completely

00:50:44.450 --> 00:50:47.080
white and completely opaque.

00:50:47.130 --> 00:50:50.200
So I'm going to immediately
adjust my color.

00:50:50.250 --> 00:50:52.350
Let's see, that's right.

00:50:52.560 --> 00:50:56.560
So I'm going to generate
a random color per frame,

00:50:56.640 --> 00:50:58.980
per particle as they're birthed.

00:50:59.020 --> 00:51:01.860
Going to search for HSL,
which is the hue saturation

00:51:01.920 --> 00:51:04.170
luminance color generator.

00:51:04.320 --> 00:51:08.710
For those of you that don't know,
this allows you to define a

00:51:08.790 --> 00:51:13.550
color simply based on the hue
saturation and luminance dimensions.

00:51:13.980 --> 00:51:20.810
And I'm going to connect that to color,
adjust my alpha, my luminosity.

00:51:21.350 --> 00:51:25.270
What I want to do is I want to
modulate the hue randomly per frame,

00:51:25.290 --> 00:51:28.230
so I can use a random patch to do that.

00:51:29.870 --> 00:51:32.490
And I'm going to set
the variability to zero,

00:51:32.500 --> 00:51:35.750
so we produce a random number per frame.

00:51:36.080 --> 00:51:37.390
And connect that to Hue.

00:51:37.530 --> 00:51:40.700
So what we'll now get is as
these particles are birthed,

00:51:40.760 --> 00:51:42.630
we're gonna get a random Hue value.

00:51:42.880 --> 00:51:46.180
You can see here's the Hue,
randomly changing per frame.

00:51:46.350 --> 00:51:50.330
If I were to look at the particle system,
you'll notice

00:51:51.740 --> 00:51:56.150
That this color well is
changing rather rapidly,

00:51:56.150 --> 00:52:00.490
and we'll start to see some colors
kind of flying out of our galaxy.

00:52:05.070 --> 00:52:07.170
Sure.

00:52:07.770 --> 00:52:10.590
By default,
as an optimization inside of Core Image,

00:52:10.590 --> 00:52:15.050
what it'll do is it'll automatically
set the DOD of your image to be

00:52:15.060 --> 00:52:18.000
wherever there is opaque pixels.

00:52:18.000 --> 00:52:22.160
So if you had an opaque
black that went on forever,

00:52:22.160 --> 00:52:23.990
it goes on forever.

00:52:24.000 --> 00:52:26.930
So you would have an image of
infinite dimensions which you would

00:52:26.930 --> 00:52:29.190
need to crop with a Core Image crop.

00:52:33.560 --> 00:52:36.560
Okay, so now we have these colors
kind of flying out at us.

00:52:36.600 --> 00:52:41.880
What I'm gonna do is increase
the speed here a little bit.

00:52:42.620 --> 00:52:43.430
Something like.

00:52:43.440 --> 00:52:46.500
So you'll immediately
notice that we got a jump,

00:52:46.520 --> 00:52:50.270
and that's because we
literally jumped in time.

00:52:58.100 --> 00:53:01.190
And what I can do is because this
is inside of a render and image,

00:53:01.190 --> 00:53:05.020
I can apply other core image filters.

00:53:05.020 --> 00:53:07.890
So I could do something like edges.

00:53:19.210 --> 00:53:22.580
So now we have some kind of
edge effect on top of our kind

00:53:22.580 --> 00:53:26.360
of modulated soft color galaxy.

00:53:33.500 --> 00:53:54.000
[Transcript missing]

00:54:10.140 --> 00:54:11.400
That's kind of interesting looking.

00:54:11.400 --> 00:54:14.000
So now I'm going to look
at changing the stars.

00:54:14.000 --> 00:54:27.630
And what I'm going to use is inside
of the assets folder for QC Galaxy.

00:54:28.220 --> 00:54:33.240
I added this little RTF file
with some stars in it.

00:54:33.240 --> 00:54:35.490
So I'm going to select one of them.

00:54:36.550 --> 00:54:39.260
And these are from iTunes.

00:54:39.280 --> 00:54:43.820
And I'm going to use an
image with string patch.

00:54:43.870 --> 00:54:47.890
And this is simply given a
string going to produce an image.

00:54:50.500 --> 00:54:53.220
So I'm going to paste that in here.

00:54:53.220 --> 00:54:56.600
Set our stars.

00:54:56.600 --> 00:54:59.600
So you'll immediately notice
that they look a little chunky,

00:54:59.610 --> 00:55:03.060
and that's because we're
producing a very small image,

00:55:03.080 --> 00:55:07.590
in this case 22 by 32 pixels,
and displaying it rather

00:55:07.590 --> 00:55:08.940
largely on the screen.

00:55:08.950 --> 00:55:14.940
So what we can do is
change the font size.

00:55:14.940 --> 00:55:14.940
It's a little bit cleaner.

00:55:16.990 --> 00:55:19.050
Maybe we want more particles.

00:55:19.120 --> 00:55:23.580
I'm going to set that to 128.

00:55:23.660 --> 00:55:25.790
Lots of stars.

00:55:30.800 --> 00:55:36.070
And I can modulate the
color of these as well.

00:55:36.080 --> 00:55:40.820
So I can just go back
to my Spiral Galaxy,

00:55:40.820 --> 00:55:42.630
copy this.

00:55:50.900 --> 00:55:54.900
I'll just set that as the color
of my stars as they're birthed.

00:55:54.900 --> 00:56:02.020
There we go.

00:56:14.800 --> 00:56:19.800
So now we have some kind of bad 70s,
80s nightmare.

00:56:19.800 --> 00:56:27.080
And I will go full screen.

00:56:34.680 --> 00:56:41.600
So it looks like we still have some time,
so we can do a little Q&A if you'd like.

00:56:41.600 --> 00:56:46.320
Shall we go back to slides please?

00:56:51.540 --> 00:56:54.440
Recall that we have some labs coming up.

00:56:54.440 --> 00:57:00.490
We have one tonight and we have a Quartz
Composer lab specifically tomorrow.

00:57:00.590 --> 00:57:02.810
And there is also a
Core Image lab tomorrow.