WEBVTT

00:00:20.120 --> 00:00:23.450
Workflow changes with
streamlined debugging.

00:00:23.560 --> 00:00:26.340
We're going to talk about how you
can interact with your application,

00:00:26.340 --> 00:00:30.450
debug it, without Xcode becoming active
using the debugger HUD,

00:00:30.540 --> 00:00:33.340
which is short for Heads-Up Display.

00:00:33.730 --> 00:00:37.680
And then we'll do a little technology
preview with something called Rewind.

00:00:37.720 --> 00:00:39.950
You can guess what that might be.

00:00:40.040 --> 00:00:43.510
And then we'll talk about what
debugging with Dwarf means.

00:00:45.880 --> 00:00:50.070
Since we last met,
we've made a number of improvements,

00:00:50.070 --> 00:00:53.110
which are now in Xcode 2.3 and 2.4.

00:00:53.190 --> 00:00:56.800
The first are C++ template breakpoints.

00:00:59.330 --> 00:01:02.500
We also introduced a pending
breakpoint indicator.

00:01:02.580 --> 00:01:07.300
We now color the breakpoint
indicator orange in 2.3 and 2.4.

00:01:07.360 --> 00:01:10.160
When you've asked for
a breakpoint to be set,

00:01:10.230 --> 00:01:13.880
but GDB hasn't located the
symbols for that yet either,

00:01:13.950 --> 00:01:16.220
the symbols haven't been loaded,

00:01:17.650 --> 00:01:19.560
That's basically usually
whenever it happens.

00:01:19.620 --> 00:01:22.500
When the symbols haven't been loaded,
then the breakpoint hasn't been set yet.

00:01:22.520 --> 00:01:24.920
Or you don't have those symbols.

00:01:24.940 --> 00:01:28.920
That's another way that that
breakpoint wouldn't be set.

00:01:29.730 --> 00:01:32.190
We also have registers
in the variable view.

00:01:32.290 --> 00:01:35.170
They're always there now,
before they were just there when

00:01:35.170 --> 00:01:36.860
you were in your disassembly.

00:01:36.960 --> 00:01:38.970
And they also show up in
the expressions window,

00:01:39.040 --> 00:01:41.950
if you'd like to show
them in a separate window.

00:01:44.570 --> 00:01:48.450
And we now remember which
format you've chosen.

00:01:48.580 --> 00:01:50.200
So if you have a variable
and you want to display it as

00:01:50.200 --> 00:01:53.930
binary and you choose binary,
we now remember which function that

00:01:53.950 --> 00:01:56.000
was and which variable name it was.

00:01:56.050 --> 00:01:59.730
And we'll try and restore that the
next time you're in the same location.

00:02:01.090 --> 00:02:04.260
And we also published a
data formatter example,

00:02:04.260 --> 00:02:08.230
much requested, and you can find this up
on Developer Connection.

00:02:08.290 --> 00:02:10.760
It's a good way to figure out
how to go about writing your

00:02:10.760 --> 00:02:14.380
own custom data formatter so
that for your own custom types,

00:02:14.380 --> 00:02:17.570
a summary will display
in the variable view.

00:02:19.150 --> 00:02:23.060
Now let's talk about
streamlined debugging.

00:02:23.130 --> 00:02:25.300
With streamlined debugging,

00:02:26.830 --> 00:02:34.040
The goal here is to make debugging
much more immediate and accessible.

00:02:34.130 --> 00:02:39.560
And to do this,
we've introduced build and go.

00:02:39.560 --> 00:02:47.980
What build and go does is
we've now merged build and run.

00:02:49.860 --> 00:02:53.770
The other part of streamlining
the debugging experience is

00:02:53.820 --> 00:02:57.820
with merging the run log and the
standard I/O log and the console

00:02:57.900 --> 00:03:00.870
log functionality into one window.

00:03:03.030 --> 00:03:05.660
Third way is with the debugger bar.

00:03:05.710 --> 00:03:09.400
The debugger bar and the data tips
allow you to debug your application

00:03:09.400 --> 00:03:10.900
directly in the file editor.

00:03:10.900 --> 00:03:14.900
So you don't have to go to any dedicated
windows like the debugger window

00:03:15.000 --> 00:03:17.230
in order to debug your application.

00:03:18.860 --> 00:03:23.400
Now the main message with Build and
Go is that you're always debuggable.

00:03:23.500 --> 00:03:26.110
No matter how you start up,
you can always click pause

00:03:26.260 --> 00:03:29.270
or enable your breakpoints,
and then you can end up in the

00:03:29.270 --> 00:03:35.470
debugger to go through your code,
view your variables, that sort of thing.

00:03:35.550 --> 00:03:38.420
Again, there is no more run and debug.

00:03:38.650 --> 00:03:41.190
There's just go.

00:03:41.260 --> 00:03:42.960
And you can go with your
breakpoints enabled,

00:03:43.010 --> 00:03:46.060
or you can go with your
breakpoints disabled.

00:03:48.050 --> 00:03:52.700
Now when your breakpoints are
disabled or turned off and you go,

00:03:52.750 --> 00:03:54.650
Xcode basically just
launches your program.

00:03:54.670 --> 00:03:58.870
It comes up immediately,
so you launch it from Finder.

00:03:59.370 --> 00:04:02.090
Now you can go back and if you
decide you want your breakpoints

00:04:02.220 --> 00:04:05.920
enabled so you can hit them,
you go back into Xcode and you

00:04:05.920 --> 00:04:07.480
can click turn on breakpoints.

00:04:10.070 --> 00:04:13.240
or you can click pause and then we'll
automatically attach the debugger

00:04:13.240 --> 00:04:14.500
and show you exactly where you are.

00:04:18.200 --> 00:04:21.730
Now for the console,
we've replaced the run log

00:04:21.740 --> 00:04:23.680
and the standard I/O log.

00:04:23.770 --> 00:04:26.480
So now you don't need to go to
any special window in order to

00:04:26.480 --> 00:04:28.440
interact with your application.

00:04:28.530 --> 00:04:31.380
So if your application takes
input on the standard in,

00:04:31.460 --> 00:04:34.290
you can simply go type in the console.

00:04:35.170 --> 00:04:36.720
You're saying, well,
how do I talk to the debugger?

00:04:36.720 --> 00:04:39.020
Well,
you don't need to talk to the debugger

00:04:39.020 --> 00:04:40.770
until you actually pause the application.

00:04:40.780 --> 00:04:45.600
And so then we'll show the debugger
prompt to give you an indication when

00:04:45.660 --> 00:04:47.690
your typing is going to the debugger.

00:04:49.330 --> 00:04:51.950
And you can also choose various
colors and fonts to help

00:04:52.060 --> 00:04:53.120
differentiate those states.

00:04:53.200 --> 00:04:57.190
And that's all on the Xcode
preferences under debugging.

00:05:00.020 --> 00:05:03.900
Now the next item is the debugger bar.

00:05:03.900 --> 00:05:06.900
It's this little piece up here
that we've added to the file

00:05:06.900 --> 00:05:10.650
editor after you click "Go."

00:05:11.510 --> 00:05:16.600
So during your normal editing sequence,
this won't be there.

00:05:16.720 --> 00:05:20.390
But as soon as you click Go,
this appears.

00:05:21.600 --> 00:05:25.050
On the left, we have a pop-up that lets
you select between different

00:05:25.130 --> 00:05:27.000
threads in your program.

00:05:27.100 --> 00:05:32.180
And on the right is a stack pop-up,
so you can go between your stack frames.

00:05:33.730 --> 00:05:39.440
And in the middle, starting on the left,
we have... You can turn

00:05:39.560 --> 00:05:41.470
your breakpoints on and off.

00:05:41.950 --> 00:05:43.580
And then we have the
Continue and Pause button.

00:05:43.700 --> 00:05:45.670
Continue and Pause are now one item.

00:05:45.770 --> 00:05:48.470
They're one menu item,
and they're also one button.

00:05:48.510 --> 00:05:54.160
So currently, we're now paused,
and it's showing you the Continue icon.

00:05:54.200 --> 00:05:54.840
Click Continue.

00:05:54.960 --> 00:05:57.020
It'll switch to Pause.

00:05:57.280 --> 00:06:01.350
Next to that, we've got Step Over,
Step Into, Step Out.

00:06:01.940 --> 00:06:04.830
And then the last two
are show debugger window.

00:06:04.910 --> 00:06:08.240
So let's say you want to go to the
debugger window rather than debugging

00:06:08.450 --> 00:06:11.590
in the particular file you were editing.

00:06:11.690 --> 00:06:15.910
Click that, and you get the full
debugger window experience.

00:06:16.130 --> 00:06:18.100
Next to that is the console button.

00:06:18.100 --> 00:06:20.140
So if you want to jump
immediately to the console,

00:06:20.140 --> 00:06:22.200
you can click that button there.

00:06:24.200 --> 00:06:25.640
Now data tips.

00:06:25.660 --> 00:06:28.180
How many people have been wanting
this for a really long time?

00:06:28.200 --> 00:06:32.190
A lot of people.

00:06:35.920 --> 00:06:37.880
Here's your data tip.

00:06:38.220 --> 00:06:40.950
Now, as you hover over a variable,
we'll show the data tip

00:06:41.110 --> 00:06:41.980
for that variable value.

00:06:42.000 --> 00:06:46.130
Then, as you hover over it,
each of the turndowns will

00:06:46.160 --> 00:06:49.000
automatically turn that down for you,
so you don't have to click on it.

00:06:49.000 --> 00:06:51.440
If you want to close it,
you have to explicitly click on it.

00:06:52.880 --> 00:06:56.450
Next to that, our little up/down arrow,
which we'll go over later in the demo,

00:06:56.460 --> 00:07:00.000
which brings down a contextual
menu that will let you actually

00:07:00.000 --> 00:07:02.340
do things like print the object,
and then the console will

00:07:02.340 --> 00:07:03.380
come forward automatically.

00:07:03.400 --> 00:07:07.890
Now let's do a demo.

00:07:22.010 --> 00:07:25.260
We'll open our demo application here.

00:07:25.260 --> 00:07:27.720
And we'll go up and turn
off our breakpoints.

00:07:27.750 --> 00:07:30.760
And we'll simply click Build and Go.

00:07:32.020 --> 00:07:34.700
Our application comes up.

00:07:34.740 --> 00:07:37.680
We can interact with it.

00:07:37.680 --> 00:07:39.000
It launched very quickly.

00:07:39.000 --> 00:07:42.600
Now we can go back and say, you know,
I want to see what's happening.

00:07:42.600 --> 00:07:45.300
I remember I had some breakpoints on.

00:07:45.370 --> 00:07:47.420
We can go back here, click.

00:07:48.680 --> 00:07:51.140
Our breakpoints are now enabled.

00:07:51.220 --> 00:07:53.800
So now when we go back
to our application,

00:07:53.880 --> 00:07:55.830
we hit our breakpoint.

00:07:57.180 --> 00:07:59.870
Here we see we have our debugger
bar with the threads pop up.

00:08:00.040 --> 00:08:02.900
Currently we only have one thread.

00:08:02.960 --> 00:08:08.610
And we can also navigate to
other places in the stack easily.

00:08:10.880 --> 00:08:12.660
This doesn't have to be
in the embedded editor.

00:08:12.660 --> 00:08:15.840
This can be in any separate
editor window you might have open.

00:08:17.900 --> 00:08:21.300
If you want to debug your
code right in the file editor,

00:08:21.340 --> 00:08:23.540
this is how you do it.

00:08:23.570 --> 00:08:25.440
Then of course we've got
the Continue button here,

00:08:25.440 --> 00:08:27.620
and we can step over.

00:08:28.250 --> 00:08:30.440
Now let's look at the data tips.

00:08:30.500 --> 00:08:33.800
So as I hover over self,
we get a data tip.

00:08:33.820 --> 00:08:37.570
And I can drill down into it just by
hovering over the little turn down area.

00:08:37.670 --> 00:08:40.350
That automatically drills down in.

00:08:40.370 --> 00:08:42.840
And then we can start to see,
notice on the far right,

00:08:43.010 --> 00:08:46.020
our data formatters that would
normally show up in the debugger

00:08:46.020 --> 00:08:49.380
window in the summary column are
now showing up in our data tip.

00:08:51.230 --> 00:08:54.920
So we can drill all the
way down to this NS point.

00:08:54.960 --> 00:08:58.550
And if we want to go up and close this,
I have to click.

00:08:58.700 --> 00:09:00.640
and then it closes that data tip.

00:09:00.660 --> 00:09:02.980
That keeps your window from getting
too cluttered up and lets you go

00:09:03.040 --> 00:09:05.160
back if you've drilled down too far.

00:09:07.070 --> 00:09:10.220
Now this little icon here,
the up/down arrow,

00:09:10.220 --> 00:09:15.000
indicates that you can left click on
that and get a little contextual menu.

00:09:15.080 --> 00:09:17.810
So here I can choose print description.

00:09:20.490 --> 00:09:22.440
And then our window pops up,
and here's the description

00:09:22.440 --> 00:09:25.710
for our SKT rectangle object.

00:09:30.170 --> 00:09:34.950
Now the other thing we get in
Data Tips are some debugger controls.

00:09:35.030 --> 00:09:37.350
You'll notice that I'm
hovering over the gutter here,

00:09:37.350 --> 00:09:39.550
and I get a little continue icon.

00:09:39.620 --> 00:09:42.300
Now if I were to click on that,
that would basically do an

00:09:42.300 --> 00:09:44.440
automatic continue to here.

00:09:44.520 --> 00:09:48.270
So immediately continue to this line,
I'll click it now.

00:09:48.360 --> 00:09:51.280
We see we jumped down to that line,
so I didn't have to do step, step,

00:09:51.310 --> 00:09:54.250
step in order to get to this line.

00:09:54.260 --> 00:09:59.090
So it's a way to easily get through
your code without lots of button clicks.

00:09:59.970 --> 00:10:02.740
Now the next way you can
navigate through your code is if

00:10:02.740 --> 00:10:05.620
I hover over this method call,
we'll see that I get a

00:10:05.620 --> 00:10:07.600
step in icon on the left.

00:10:07.720 --> 00:10:10.560
And when I click that,
I'll automatically go to the next

00:10:10.560 --> 00:10:13.780
line and step into that method.

00:10:13.780 --> 00:10:15.090
Like this.

00:10:16.430 --> 00:10:20.280
So no more having to step
down and then do a step in.

00:10:20.280 --> 00:10:22.150
It just happens.

00:10:28.060 --> 00:10:32.580
Now as I hover over the gutter of
the beginning of the method call,

00:10:32.710 --> 00:10:34.600
we see that I get the step out icon.

00:10:34.670 --> 00:10:37.160
So if I've stepped into something
and I want to step out quickly,

00:10:37.320 --> 00:10:40.840
all I have to do is go to the beginning
of the method and click step out.

00:10:41.050 --> 00:10:43.420
And now I'm back where I began.

00:10:45.710 --> 00:10:48.730
Now if the stepping controls are
getting in your way for some reason,

00:10:48.730 --> 00:10:53.830
you can go up and you can toggle them
to the second mode of the data tips,

00:10:53.830 --> 00:10:57.560
which just does the value pop-ups.

00:11:01.620 --> 00:11:03.960
Let's go look at the
preferences which have changed.

00:11:04.010 --> 00:11:08.920
So now that we just
have Go under debugging,

00:11:09.210 --> 00:11:11.670
We now have a pop-up on what to do on Go.

00:11:11.730 --> 00:11:13.710
So this is currently set to do nothing.

00:11:13.770 --> 00:11:17.610
So Xcode will just leave all
your windows the way they were.

00:11:18.600 --> 00:11:22.270
You can also choose to show the console.

00:11:22.310 --> 00:11:26.010
So every time you click go,
this means the console will pop up.

00:11:26.260 --> 00:11:28.810
And then you can do the same
for if you like working in

00:11:28.810 --> 00:11:31.800
the debugger all the time,
you can choose show debugger

00:11:31.800 --> 00:11:34.150
or show console in debugger.

00:11:38.870 --> 00:11:41.180
Now, if I want to see the
full debugger window,

00:11:41.180 --> 00:11:45.030
I can simply click on
the Show Debugger window.

00:11:45.090 --> 00:11:46.440
And here I have it collapsed.

00:11:46.460 --> 00:11:48.590
We can open that up.

00:11:52.900 --> 00:11:56.660
You can step as you normally would.

00:11:56.800 --> 00:11:59.560
Now if I actually go and
I close the editor here,

00:11:59.570 --> 00:12:04.110
Xcode is smart enough to know, "Hey,
I need to show where you are in one of

00:12:04.310 --> 00:12:09.050
the other open editors so it'll find
the first one." So if I do a step over,

00:12:09.190 --> 00:12:11.960
we see that our other editor
is showing where the PC is

00:12:11.960 --> 00:12:13.740
and showing the current code.

00:12:13.740 --> 00:12:17.210
So you can use the debugger window
as kind of like a big inspector,

00:12:17.210 --> 00:12:20.240
if you like,
if you actually go and close the

00:12:20.240 --> 00:12:22.240
editor in the debugger window.

00:12:22.240 --> 00:12:25.100
Now let's go back to slides.

00:12:33.450 --> 00:12:36.250
So now let's talk about the debugger HUD.

00:12:36.350 --> 00:12:38.510
This is going to let you
interact with your application

00:12:38.620 --> 00:12:41.000
without Xcode becoming active.

00:12:41.060 --> 00:12:44.740
So you'll actually be able to debug,
step through your code,

00:12:44.780 --> 00:12:49.840
look at variable values using all the
elements that we've just introduced.

00:12:51.270 --> 00:12:53.150
So it's a floating window, obviously.

00:12:53.270 --> 00:12:56.480
It floats way high above everything else.

00:12:56.480 --> 00:12:59.460
It even floats up above
the dashboard widgets,

00:12:59.460 --> 00:13:04.090
which may or may not be useful,
but it's kind of interesting.

00:13:04.170 --> 00:13:06.390
And Xcode does not become active.

00:13:06.390 --> 00:13:09.480
So you're interacting
with your application.

00:13:09.550 --> 00:13:13.800
You can do things like debug
app will become active,

00:13:13.850 --> 00:13:15.830
that sort of thing.

00:13:16.670 --> 00:13:19.700
And of course it lets you do all your
stepping because it's got the file

00:13:19.700 --> 00:13:22.220
editor right in the debugger window.

00:13:22.940 --> 00:13:26.420
And of course,
you can view your variable values.

00:13:26.530 --> 00:13:28.700
So here's the HUD in the run mode.

00:13:28.730 --> 00:13:30.670
Nice small little widget.

00:13:30.700 --> 00:13:33.060
You can stop your application.

00:13:33.100 --> 00:13:35.020
You can pause.

00:13:35.920 --> 00:13:41.110
You can click the Next button,
which will take you to Xcode.

00:13:41.660 --> 00:13:44.260
And then the last button
there on the right enables

00:13:44.260 --> 00:13:46.740
and disables your breakpoints.

00:13:46.740 --> 00:13:50.780
So you can have a set of breakpoints
that you have enabled and disabled,

00:13:50.780 --> 00:13:52.840
and this will turn them on and off.

00:13:52.840 --> 00:13:55.820
So the actual state of your
breakpoints doesn't change.

00:13:55.820 --> 00:13:58.560
You just aren't actually
hitting any of them.

00:13:58.560 --> 00:14:02.120
So we've gone and it's as though you went
and typed disable on the GDB console,

00:14:02.120 --> 00:14:04.120
if you're familiar with that.

00:14:05.670 --> 00:14:08.550
And then as the HUD switches
to the pause mode,

00:14:08.570 --> 00:14:13.500
it expands, shows you the file editor,
shows you your code or disassembly

00:14:13.500 --> 00:14:15.600
depending on where you are.

00:14:15.830 --> 00:14:21.600
And then you have the familiar debugger
bar and you can use your data tips.

00:14:21.600 --> 00:14:26.590
And now Andreas will give us
a demo of the debugger HUD.

00:14:30.990 --> 00:14:33.520
So I wasn't really planning
on being here today,

00:14:33.530 --> 00:14:37.190
but if you saw my demo on Monday,
then you saw that it didn't

00:14:37.240 --> 00:14:38.500
quite work the last part.

00:14:38.500 --> 00:14:40.080
So of course, I couldn't let that stand.

00:14:40.080 --> 00:14:43.760
And I just want to make sure
that I give the demo once.

00:14:43.790 --> 00:14:46.790
So we're on the demo machine.

00:14:46.880 --> 00:14:48.040
Here's my little project.

00:14:48.040 --> 00:14:50.710
It's this Core Recipes project again.

00:14:50.860 --> 00:14:52.250
And this time I can run it.

00:14:52.260 --> 00:14:55.400
And if the demo gods are with me,
I now have data in it too.

00:14:55.490 --> 00:14:58.030
So that works, yes.

00:15:01.900 --> 00:15:05.660
So here's my full screen mode again.

00:15:05.660 --> 00:15:08.080
Now I can actually step away
from my machine and go in the

00:15:08.190 --> 00:15:10.900
kitchen and prepare my recipe.

00:15:11.000 --> 00:15:13.360
But we wanted to debug this.

00:15:13.360 --> 00:15:18.660
So here's the little menu item to
bring up the debugger heads-up display.

00:15:19.270 --> 00:15:24.340
And if I go back into my application and
actually activate full screen mode again,

00:15:24.340 --> 00:15:27.390
you can see that the debugger
just floats over my window,

00:15:27.390 --> 00:15:30.110
even over full screen mode,
and it's right here accessible to me.

00:15:30.120 --> 00:15:32.120
The other thing that's great
about it is that it's so small,

00:15:32.120 --> 00:15:32.510
right?

00:15:32.550 --> 00:15:35.580
So it doesn't interfere
much with the screen estate.

00:15:35.580 --> 00:15:38.470
So like Chris explained,
I can now go and turn on my breakpoints,

00:15:38.470 --> 00:15:39.260
for example.

00:15:39.260 --> 00:15:41.280
And I've set two breakpoints here.

00:15:41.280 --> 00:15:43.610
The first one,
when I drop out of full screen mode.

00:15:44.550 --> 00:15:46.040
So let me press my button.

00:15:46.040 --> 00:15:49.900
And as you can see, the debugger has now
expanded nicely here.

00:15:49.900 --> 00:15:51.460
It's still floating above my window.

00:15:51.460 --> 00:15:53.820
I can use stepping.

00:15:53.820 --> 00:15:56.850
I can still use data tips,
all the nice little things.

00:15:56.860 --> 00:16:00.420
And the key is, like Chris said,
we don't interfere with the

00:16:00.420 --> 00:16:01.860
events of the application.

00:16:01.860 --> 00:16:05.150
So this debugger is now running
without actually stealing or changing

00:16:05.150 --> 00:16:08.230
the event flow in the application
you are debugging right now.

00:16:08.260 --> 00:16:10.160
So let me go ahead and continue.

00:16:10.160 --> 00:16:15.380
And the other breakpoint I said is,
on the method,

00:16:15.490 --> 00:16:19.380
on a notification that is invoked
when my application gets activated.

00:16:19.420 --> 00:16:21.680
And that is, for example,
one of the things you couldn't

00:16:21.690 --> 00:16:24.910
debug before without the HUD,
because when you hit a breakpoint

00:16:24.910 --> 00:16:28.710
and application will activate,
then you had to drop back into Xcode,

00:16:28.860 --> 00:16:30.800
and that deactivated the
app you were debugging.

00:16:30.840 --> 00:16:31.840
Of course, that didn't work.

00:16:31.880 --> 00:16:34.070
So let me just drop into Finder here.

00:16:34.080 --> 00:16:36.120
And I'll click back into my application.

00:16:36.380 --> 00:16:39.320
And as you can see,
the debugger HUD again comes up.

00:16:39.530 --> 00:16:44.160
I can again step, I can use data tips,
all the other little things, continue,

00:16:44.600 --> 00:16:45.790
and now I'm back into my application.

00:16:45.800 --> 00:16:47.240
So that's the demo.

00:16:47.240 --> 00:16:51.700
The nice thing is that it's very small,
it doesn't interfere much

00:16:51.700 --> 00:16:55.300
with your application,
it stays on top of even full screen mode,

00:16:55.300 --> 00:16:57.920
and it doesn't interfere with the
event flow in your application.

00:16:57.940 --> 00:17:00.630
So this really allows you to debug
things that you couldn't debug before.

00:17:00.640 --> 00:17:01.880
Thanks.

00:17:08.680 --> 00:17:10.310
We can go back to slides.

00:17:10.310 --> 00:17:11.060
Thank you, Andreas.

00:17:11.180 --> 00:17:11.670
It worked great.

00:17:11.760 --> 00:17:16.110
And now we'll have a little
technology preview with Dr.

00:17:16.110 --> 00:17:17.060
Stan Shebs.

00:17:17.080 --> 00:17:18.560
Come on, Stan.

00:17:24.930 --> 00:17:30.040
Hello everybody.

00:17:30.040 --> 00:17:30.040
Hey, did you give me that?

00:17:30.040 --> 00:17:30.040
Hey, Chris, Chris, Chris, Chris.

00:17:32.650 --> 00:17:35.520
My mental powers are not
enough to work this from afar.

00:17:35.520 --> 00:17:37.220
Anyway...

00:17:39.450 --> 00:17:43.120
So this is a kind of an unusual thing.

00:17:43.200 --> 00:17:45.700
First of all,
I'd like to make a correction here that

00:17:45.700 --> 00:17:50.040
should read Frank middle initial n.

00:17:50.040 --> 00:17:51.330
OK, say it out.

00:17:51.430 --> 00:17:53.530
Say it too quickly.

00:17:54.500 --> 00:18:01.560
Okay,
so rewinding is about a situation where,

00:18:01.560 --> 00:18:04.580
say, you're stepping along in
your code and you overshoot.

00:18:04.580 --> 00:18:07.480
You're doing stepovers and you
realize you really wanted to do

00:18:07.480 --> 00:18:09.300
a step into and you went too far.

00:18:10.680 --> 00:18:14.790
So the normal thing you would
do these days is you start your

00:18:14.900 --> 00:18:17.310
program over from the beginning.

00:18:17.370 --> 00:18:22.140
Another thing that some people
do is they drag the PC back.

00:18:22.210 --> 00:18:24.780
How many people actually do this?

00:18:24.890 --> 00:18:26.160
Ah, okay.

00:18:26.290 --> 00:18:27.760
Yes, there are a few perverts.

00:18:27.900 --> 00:18:34.790
Yes, you're violating just about every
invariant you can think of by doing it,

00:18:34.790 --> 00:18:37.020
and sometimes it works.

00:18:37.220 --> 00:18:40.000
So anyway, so we actually were
thinking about this and say,

00:18:40.000 --> 00:18:42.020
well, what would be a better solution?

00:18:42.020 --> 00:18:46.990
And so what we have worked up is
what has come to be called Rewind.

00:18:47.070 --> 00:18:48.740
I actually wanted to
call it Time Machine,

00:18:48.740 --> 00:18:50.040
but they told me it was taken.

00:18:50.040 --> 00:18:54.090
And then I wanted to call it X-Ray,
and that was taken too.

00:18:54.100 --> 00:18:56.890
So we got left with Rewind.

00:18:59.170 --> 00:19:02.720
So it basically consists of
the ability to run the program

00:19:02.720 --> 00:19:04.860
backwards a limited amount.

00:19:04.860 --> 00:19:11.570
You turn it on with a checkbox
in the general preferences.

00:19:12.930 --> 00:19:17.290
And then to actually do it,
there's a button up in the top next

00:19:17.330 --> 00:19:21.170
to continue just called rewind.

00:19:21.290 --> 00:19:24.730
So now let's take a look
at how that actually works.

00:19:26.350 --> 00:19:28.520
This is a carefully
selected demo machine.

00:19:28.520 --> 00:19:36.200
I sprinkled with oil from an IBM 704
power capacitor and sang a Bono song

00:19:36.420 --> 00:19:42.190
and hopefully it will actually run.

00:19:43.220 --> 00:19:47.080
Okay, so we have a good old sketch again.

00:19:47.080 --> 00:19:51.350
And we're going to draw a few rectangles.

00:19:52.880 --> 00:19:56.360
Select them all and
then we'll align them.

00:19:56.380 --> 00:19:58.920
Now we just happen to
have a breakpoint here,

00:19:59.010 --> 00:20:01.590
but we know the code's perfect, so...

00:20:01.960 --> 00:20:06.610
Now,
left alignment isn't what it could be.

00:20:06.610 --> 00:20:10.520
Good enough for Vista, perhaps,
but I think we'd like

00:20:10.590 --> 00:20:11.280
to do a little better.

00:20:14.300 --> 00:20:26.610
But it is kind of mysterious, you know,
so let's backpedal here in the

00:20:26.610 --> 00:20:26.610
application and then ask for...

00:20:26.820 --> 00:20:30.660
Alignment again, stop at our conveniently
located breakpoint,

00:20:30.660 --> 00:20:34.690
just happens to be in the
align left edges method.

00:20:35.350 --> 00:20:39.350
And we'll do single steps.

00:20:39.350 --> 00:20:41.910
Everything highlights as it should be.

00:20:43.110 --> 00:20:43.660
That's interesting.

00:20:43.660 --> 00:20:45.340
These two values should be the same.

00:20:45.380 --> 00:20:46.970
We go down and look at a
source code and it says,

00:20:46.990 --> 00:20:49.530
you know,
there's a routine in there called funky.

00:20:49.540 --> 00:20:51.760
That's got to be a bad sign.

00:20:53.680 --> 00:20:56.600
So, we go to our handy rewind button.

00:20:57.100 --> 00:20:57.750
Boop.

00:20:57.750 --> 00:20:58.600
Gone backwards.

00:20:58.600 --> 00:21:01.600
PC went up rather than down.

00:21:01.600 --> 00:21:04.770
And that's good enough to
get us into a step into,

00:21:04.770 --> 00:21:07.600
and voila, we're now inside Funky.

00:21:15.560 --> 00:21:17.840
So we can now step along and observe.

00:21:17.840 --> 00:21:20.000
It is kind of interesting that
there's a factorial function

00:21:20.000 --> 00:21:21.630
in left edge alignment.

00:21:22.370 --> 00:21:25.090
What's that all about?

00:21:25.860 --> 00:21:27.300
Now, Rewind will work in here.

00:21:27.300 --> 00:21:32.710
We can go back and go back out and
see the variables get uninitialized.

00:21:33.460 --> 00:21:35.720
This is,
we know it's a technology preview

00:21:35.730 --> 00:21:40.420
because it would be really stylish
to do the undone variables in red,

00:21:40.420 --> 00:21:42.290
but that's not happening.

00:21:43.680 --> 00:21:50.220
We can continue forward and see,
observe the code has done the

00:21:50.280 --> 00:21:52.760
same thing as it did before.

00:21:53.000 --> 00:21:57.070
So that's Rewind.

00:21:57.310 --> 00:21:59.400
Go back to the slides, please.

00:22:05.900 --> 00:22:09.340
Okay, now let's talk about
how this really works.

00:22:09.450 --> 00:22:11.640
Okay,
it's not quite as magical as it appears.

00:22:11.680 --> 00:22:16.160
It's basically we record the
program's registers and memories

00:22:16.160 --> 00:22:18.780
after you do steps and continues.

00:22:18.780 --> 00:22:23.490
And right now in the preview version,
it's actually done by brute force.

00:22:23.610 --> 00:22:26.880
We actually call fork and
save away the child process,

00:22:26.880 --> 00:22:28.560
kind of put it to sleep.

00:22:28.560 --> 00:22:31.480
And then when we want to
get the old state back,

00:22:31.510 --> 00:22:34.530
when you click the rewind button,
we just take the old state,

00:22:34.550 --> 00:22:35.520
copy it back in.

00:22:36.570 --> 00:22:38.660
So...

00:22:40.610 --> 00:22:41.690
Hey, I said it was brute force.

00:22:41.700 --> 00:22:46.850
It does mean you can look at everything.

00:22:46.850 --> 00:22:49.860
I mean, it is actually your entire
old state of the program.

00:22:49.860 --> 00:22:52.540
So you can look at globals,
you can look at locals,

00:22:52.540 --> 00:22:54.200
you can look at backtraces.

00:22:54.200 --> 00:22:57.430
Much more complete than
dragging the PC back.

00:22:59.230 --> 00:23:01.770
However, it doesn't roll back
the rest of the system.

00:23:01.780 --> 00:23:04.090
It's just the internal
state of your own program.

00:23:04.100 --> 00:23:06.130
Everything is tied to
the registers and memory.

00:23:06.160 --> 00:23:10.060
In a lot of cases, that actually turned
out to be good enough,

00:23:10.130 --> 00:23:13.560
and you can actually single step forward,
continue, rewind a little bit more,

00:23:13.560 --> 00:23:17.170
as you saw in the demo,
and most of the time it works.

00:23:17.180 --> 00:23:22.890
Some caveats to know about this,
it can only undo what you did.

00:23:22.900 --> 00:23:27.650
And so, for instance,
if I continue forward by 10,000 lines,

00:23:27.990 --> 00:23:29.860
I can't step back by one line.

00:23:29.920 --> 00:23:33.150
I have to jump back and
then continue forward,

00:23:33.160 --> 00:23:35.820
or step forward 10,000 lines,
or run forward to a

00:23:35.820 --> 00:23:37.380
breakpoint or whatever.

00:23:37.380 --> 00:23:40.500
I am limited to undoing whatever I did.

00:23:41.960 --> 00:23:45.730
The only thing that really works
totally reliably is to rewind

00:23:45.760 --> 00:23:47.820
and re-step through computation.

00:23:47.820 --> 00:23:52.110
It's always reliable to rewind.

00:23:52.110 --> 00:23:55.300
It's the stepping forward
again that's problematic.

00:23:55.300 --> 00:23:59.980
Things that won't happen,
it'll do a system call a second time.

00:24:00.000 --> 00:24:03.800
If the system call is, say,
get a random number, well,

00:24:03.930 --> 00:24:05.980
you probably get a
different random number.

00:24:05.980 --> 00:24:06.660
It's okay.

00:24:08.190 --> 00:24:11.720
If the running forward was, say,
to open a file,

00:24:11.720 --> 00:24:15.040
the system actually thinks
the file's already open.

00:24:15.100 --> 00:24:18.440
So probably running forward
again a second time will say,

00:24:18.540 --> 00:24:21.500
hey, the file's already open,
and the code will start going

00:24:21.500 --> 00:24:23.600
through a different path
than it did the first time.

00:24:23.620 --> 00:24:26.840
So at that point,
things can get a little strange.

00:24:26.840 --> 00:24:30.660
Surprisingly, printf,
rerunning through printf

00:24:30.660 --> 00:24:33.090
usually does the right thing.

00:24:33.100 --> 00:24:37.260
But we've also seen internal
error messages out of VM allocate.

00:24:38.280 --> 00:24:42.740
Which is just not the level we
want to hear from when we're

00:24:43.080 --> 00:24:45.740
debugging a printf program.

00:24:45.740 --> 00:24:49.400
Shared memory,
we don't do anything special

00:24:49.420 --> 00:24:51.530
for shared memory yet.

00:24:51.660 --> 00:24:54.610
So if you have several applications
writing into the same space

00:24:54.940 --> 00:24:58.840
and you rewind one of them,
you'll end up copying back the old

00:24:58.840 --> 00:25:03.720
memory state into the shared block,
and the other programs will have to

00:25:03.720 --> 00:25:07.760
make what they will of the shared
memory being at some previous state.

00:25:08.020 --> 00:25:08.340
date

00:25:09.970 --> 00:25:13.900
Anything external, state change, no,
this really isn't time machine.

00:25:13.900 --> 00:25:16.200
It's not going to call
files back from the dead.

00:25:16.200 --> 00:25:20.140
And it's not going to call back
email messages that you wish you

00:25:20.140 --> 00:25:22.530
hadn't sent or anything like that.

00:25:22.600 --> 00:25:27.740
Now that said,
we actually are experimenting with the

00:25:27.740 --> 00:25:31.400
ability to flip back a window state.

00:25:31.460 --> 00:25:36.680
You can do interesting things with the
core graphics buffers in the windows.

00:25:36.680 --> 00:25:38.680
Hey, they're just blocks of memory,
right?

00:25:38.680 --> 00:25:39.870
We copy blocks of memory.

00:25:39.900 --> 00:25:43.010
So, but I didn't dare show that.

00:25:43.090 --> 00:25:48.310
And then finally,
this whole thing is memory intensive.

00:25:48.310 --> 00:25:52.070
Now, the only, because we're doing fork
and fork is copy on write,

00:25:52.130 --> 00:25:56.480
we're only actually making copies,
you know, sort of incrementally making

00:25:56.480 --> 00:25:58.740
copies of blocks that are touched.

00:25:58.740 --> 00:26:02.170
So, you know, if you're, if you step,
single step forward,

00:26:02.170 --> 00:26:05.580
it's really not using any more
physical blocks of memory.

00:26:05.580 --> 00:26:08.840
But if you're, say, you know,
running Photoshop, you know,

00:26:08.840 --> 00:26:09.870
on big images,
you're actually using a lot of memory.

00:26:09.900 --> 00:26:12.370
So, you know, if you're,
if you're running a lot of

00:26:12.370 --> 00:26:15.310
images forward a long ways,
you know, you will end up tying up

00:26:15.310 --> 00:26:16.580
a lot of blocks in VM.

00:26:17.000 --> 00:26:19.290
So that's where Rewind is.

00:26:19.300 --> 00:26:23.060
We're about at the stage where the
arm is twitching and the monster

00:26:23.060 --> 00:26:24.530
has yet to actually walk around.

00:26:24.540 --> 00:26:28.840
But we want everybody to give it a try.

00:26:28.840 --> 00:26:30.080
It's in your DVD.

00:26:30.080 --> 00:26:32.850
And let us know how it
actually works for you,

00:26:32.850 --> 00:26:37.380
whether it's real useful or not useful,
or if it erased all your files.

00:26:40.930 --> 00:26:44.160
So with that,
we'll send you back to Chris and

00:26:44.160 --> 00:26:45.480
we'll talk about real stuff again.

00:26:51.500 --> 00:26:53.750
Stan?

00:26:54.140 --> 00:26:57.380
Now let's talk about DWARF and
what does this mean for you?

00:26:57.380 --> 00:27:03.210
We introduced DWARF in Xcode 2.3 and of
course it's supported in 2.4 as well.

00:27:03.940 --> 00:27:04.800
What does it stand for?

00:27:04.900 --> 00:27:06.560
Well, as you can see,
it stands for Debug with

00:27:06.600 --> 00:27:09.340
Arbitrary Record Format.

00:27:09.340 --> 00:27:13.840
I'm told that they came up with
this after choosing the name.

00:27:15.340 --> 00:27:16.440
So what is DWARF?

00:27:16.440 --> 00:27:20.310
It's an industry standard
debug symbols format.

00:27:20.810 --> 00:27:23.820
It also uses variable
size binary encoding,

00:27:23.820 --> 00:27:27.540
and it's a structure of
interlinked and shared descriptors.

00:27:28.910 --> 00:27:31.250
Those all happen to be advantages.

00:27:31.280 --> 00:27:33.650
It's an advantage that
it's an industry standard.

00:27:33.740 --> 00:27:35.710
Other people are using it.

00:27:36.950 --> 00:27:39.810
It also provides better
debugger fidelity for C++.

00:27:40.020 --> 00:27:45.530
For instance, support for namespaces and
allows breakpoints and templates.

00:27:47.390 --> 00:27:52.480
And the debug executable files are also
smaller on our platform when we use Dorf.

00:27:53.070 --> 00:27:55.220
How do we get more with less?

00:27:55.270 --> 00:27:58.630
Well, part of that's the variable
size binary encoding.

00:28:00.430 --> 00:28:03.570
and also Dwarf will enable
future capabilities with its

00:28:03.610 --> 00:28:06.120
expandable infrastructure.

00:28:09.500 --> 00:28:13.170
In Xcode 3.0 and on Leopard,
Dwarf is the actively

00:28:13.170 --> 00:28:15.090
supported symbol format.

00:28:15.270 --> 00:28:18.120
Stabs will be supported as is,
and you should also be able

00:28:18.150 --> 00:28:20.310
to mix the two as well.

00:28:21.300 --> 00:28:25.260
It's the default for new targets
that you create in Xcode 3.0.

00:28:25.260 --> 00:28:28.760
So if you open your project now that
you've been working on in Xcode 3.0,

00:28:28.760 --> 00:28:29.740
we don't change it.

00:28:29.760 --> 00:28:30.360
Nothing changes.

00:28:30.360 --> 00:28:33.010
You still use stabs.

00:28:33.190 --> 00:28:36.770
Now if you create a new target,
then we'll go ahead and you'll be

00:28:36.770 --> 00:28:42.570
using the Dwarf symbol format for any
build products built by that target.

00:28:44.120 --> 00:28:48.490
Now, if you're using GCC from the command
line or make files for any open source

00:28:48.500 --> 00:28:54.430
projects you might be working on,
-g will still generate stabs.

00:28:54.540 --> 00:29:00.510
You have to use -g dwarf -2
to generate dwarf symbols.

00:29:02.610 --> 00:29:05.200
Build configuration debug.

00:29:05.300 --> 00:29:09.890
The debug information format is
obviously set to just plain DWARF.

00:29:12.360 --> 00:29:17.800
The debug information is no longer linked
directly into the executable or library.

00:29:18.210 --> 00:29:21.240
We keep the deepdwarf information
stays in the object files.

00:29:21.240 --> 00:29:26.270
This speeds up linking because the
linker doesn't have to copy all that

00:29:26.270 --> 00:29:30.630
information out of the .o files and
put it in the executable or library.

00:29:33.390 --> 00:29:35.680
And it also keeps the debug
information out of the address

00:29:35.690 --> 00:29:37.140
space of your application.

00:29:37.220 --> 00:29:39.890
So if any of you had really
large applications with

00:29:39.970 --> 00:29:43.530
lots of debugging symbols,
those debugging symbols aren't

00:29:43.530 --> 00:29:46.240
loaded in when you actually
go and run your application.

00:29:46.300 --> 00:29:49.300
Those are kept in the .o files.

00:29:49.340 --> 00:29:53.100
And GDB knows how to find those
because there's a debug map in your

00:29:53.150 --> 00:29:55.630
executable that points back to them.

00:29:56.700 --> 00:29:59.020
Of course,
this means you can't delete your .o

00:29:59.030 --> 00:30:03.800
files or objects if you want to keep
debugging that particular application

00:30:03.800 --> 00:30:07.990
with the debug build configuration.

00:30:10.020 --> 00:30:14.040
Now when you switch your build
configuration to release,

00:30:14.040 --> 00:30:16.540
and you've created a
new target in Xcode 3.0,

00:30:16.560 --> 00:30:19.110
you get DWARF with DSIM.

00:30:19.210 --> 00:30:24.210
DSIM file is a lot like the
XSIM file in Code Warrior.

00:30:27.160 --> 00:30:30.230
And typically you really only do
this with the release build because

00:30:30.330 --> 00:30:34.440
generating that DSIM file takes a while,
takes a lot of resources and time,

00:30:34.520 --> 00:30:37.620
and you don't want to be doing that
when you're in your development cycle.

00:30:37.660 --> 00:30:41.680
So that's why when your
build configuration is debug,

00:30:41.790 --> 00:30:47.000
we just choose dwarf and we leave
all those symbols in the .o files.

00:30:48.830 --> 00:30:52.800
So as I said, DSIM file,
it's an archive that contains the

00:30:52.940 --> 00:30:56.300
fully linked DWARF information
for your executable.

00:30:56.300 --> 00:30:58.650
This means you can go and you can
throw away all your build products,

00:30:58.750 --> 00:31:01.220
all those .o files,
and you just have to keep

00:31:01.390 --> 00:31:03.200
this one file archive around.

00:31:03.220 --> 00:31:05.820
So when you do a beta release
or something like that and you

00:31:05.820 --> 00:31:09.070
want to strip your executable,
you can do that, and then you just keep

00:31:09.160 --> 00:31:10.100
the DSIM file around.

00:31:10.100 --> 00:31:13.400
You'll be able to
regenerate your backtraces.

00:31:15.110 --> 00:31:20.070
Those DSIM files also contain a unique
identifier inside the file that matches

00:31:20.070 --> 00:31:22.160
the UUID that's inside the executable.

00:31:24.670 --> 00:31:29.700
Now, the DSIM file is created by a
utility called DSIMUtil that's run

00:31:29.700 --> 00:31:33.280
on your unstripped executable and
with all those DATO files with your

00:31:33.280 --> 00:31:34.870
dwarf information still around.

00:31:34.880 --> 00:31:39.360
It goes through and it links
all that information together,

00:31:39.360 --> 00:31:40.120
as I said before.

00:31:43.230 --> 00:31:46.210
And as I said,
you can strip your executable

00:31:46.270 --> 00:31:49.940
and ship it off to somebody,
and they won't see your symbols.

00:31:50.780 --> 00:31:53.130
However, the DSIM file,
whenever you're going back to

00:31:53.210 --> 00:31:59.540
use GDB on that executable,
in order for GDB to find the DSIM file,

00:31:59.540 --> 00:32:02.460
it has to be located next to the
executable that you're debugging.

00:32:06.090 --> 00:32:10.090
So here's a pretty little graph that's
going to show you what happens when

00:32:10.090 --> 00:32:11.770
you have the debug build configuration.

00:32:11.900 --> 00:32:14.450
It goes through,
your source code's compiled,

00:32:14.520 --> 00:32:15.950
and your .o files with Dwarf.

00:32:16.040 --> 00:32:19.080
The link happens,
you have your executable,

00:32:19.080 --> 00:32:21.710
it has a UUID in there,
and the debug map,

00:32:21.780 --> 00:32:24.120
which is actually smaller than that,
but the word's pretty large,

00:32:24.120 --> 00:32:28.600
points back to your .o files,
which has all the Dwarf information.

00:32:30.760 --> 00:32:34.650
Now when you switch to the
release build configuration,

00:32:34.650 --> 00:32:36.900
a lot of this is going to look similar.

00:32:37.100 --> 00:32:38.280
But as you know,
whenever you have a different

00:32:38.360 --> 00:32:42.720
build configuration in Xcode,
all the build products are put

00:32:42.720 --> 00:32:43.760
into a different directory.

00:32:43.760 --> 00:32:48.090
So you can have your debug builds
and your optimized release builds,

00:32:48.090 --> 00:32:51.800
and they'll be in two separate spaces,
so you can switch back and forth between

00:32:51.850 --> 00:32:53.150
them without having to do a clean.

00:32:53.160 --> 00:32:57.570
So here we see we've gone through,
we've built optimized Dorf

00:32:58.580 --> 00:33:02.360
information in the .o files,
and the debug map points back to them.

00:33:03.480 --> 00:33:07.650
The next thing that
happens is DSIMUtil is run.

00:33:08.680 --> 00:33:11.550
It goes through,
does a link of all the dwarf information

00:33:11.600 --> 00:33:13.260
in the .os and creates the DSIM file.

00:33:13.260 --> 00:33:15.490
And the UID matches the executable.

00:33:15.500 --> 00:33:20.470
And this is what happens automatically
for you when you choose the release

00:33:20.470 --> 00:33:22.640
build configuration in Xcode 3.0.

00:33:25.070 --> 00:33:28.090
Now the next step is currently
manual in the seed you have,

00:33:28.090 --> 00:33:33.190
and that is to actually go through and
strip the executable of the debug map.

00:33:33.570 --> 00:33:38.190
You won't have any debugging information
that points back to your .o files.

00:33:38.190 --> 00:33:42.600
And this you should be able to safely
give away to your customers and users,

00:33:42.600 --> 00:33:43.930
that sort of thing.

00:33:46.490 --> 00:33:48.600
Now there are some tools for
working with dwarf information.

00:33:48.600 --> 00:33:50.840
The first is DwarfDump.

00:33:50.840 --> 00:33:53.920
It dumps the various dwarf sections
in all sorts of gory detail that

00:33:53.940 --> 00:33:56.240
most of you may not ever want to see.

00:33:56.240 --> 00:33:59.500
And you can also search
through that dwarf information.

00:33:59.570 --> 00:34:02.620
For instance, you can pass it an address,
and it'll go through and figure out

00:34:02.620 --> 00:34:05.400
which function that address is at.

00:34:06.510 --> 00:34:10.240
And you can also do things like
regular expression searches

00:34:10.260 --> 00:34:11.490
throughout all the Dorf symbols.

00:34:11.510 --> 00:34:15.390
So that can be a handy utility
which you might want to check out.

00:34:15.900 --> 00:34:17.970
Then of course, DSIMUtil.

00:34:18.110 --> 00:34:19.860
That's the thing that we've
talked about that goes through

00:34:19.860 --> 00:34:23.220
and creates the DSIM archive.

00:34:23.790 --> 00:34:27.770
It goes through and it also uniques
the symbols as it's doing all this,

00:34:27.820 --> 00:34:30.160
which helps keep the size down.

00:34:30.900 --> 00:34:32.600
There's also A to S.

00:34:32.630 --> 00:34:34.520
In the current seed,
A to S does not currently

00:34:34.520 --> 00:34:38.800
work with your DSIM files,
but we expect it to in the GM.

00:34:38.800 --> 00:34:43.780
That'll let you go through and
symbolicate your backtrace.

00:34:43.780 --> 00:34:43.790
Basically, with A to S,

00:34:44.340 --> 00:34:48.900
pointed at an executable,
and then you point it at your symbols,

00:34:48.920 --> 00:34:51.740
and you pass it an address,
and it'll return back which

00:34:51.740 --> 00:34:55.170
function that address is at.

00:34:58.280 --> 00:35:01.100
We talked about the future
expandability of Dwarf.

00:35:01.110 --> 00:35:04.730
Well,
we foresee having better C++ support.

00:35:04.770 --> 00:35:09.300
We also foresee having better
debugging of optimized code.

00:35:09.420 --> 00:35:12.210
For instance, handling inline functions.

00:35:12.470 --> 00:35:14.790
will be able to tell,
have the compiler generate

00:35:14.870 --> 00:35:18.890
symbols that will let us know
when we're in an inline function,

00:35:19.030 --> 00:35:21.700
and then we can actually
reflect that in the stack trace.

00:35:21.700 --> 00:35:25.670
So the stack trace will look like
you've stepped into a function when

00:35:25.690 --> 00:35:27.820
that function is in fact inlined.

00:35:29.360 --> 00:35:32.000
We'll also be able to track
variable motion better.

00:35:32.000 --> 00:35:35.050
For instance,
in your optimized code or just as

00:35:35.150 --> 00:35:39.030
you go further into your functions,
variables can be moved

00:35:39.090 --> 00:35:39.940
in and out of registers.

00:35:39.940 --> 00:35:44.400
And we'll be able to track that better
to give you more accurate information.

00:35:44.990 --> 00:35:49.050
And of course, more accurate backtraces,
which everyone loves.

00:35:49.140 --> 00:35:50.970
And much, much more.

00:35:51.740 --> 00:35:56.430
Now let's do a demo of generating
a dwarf DSIM file and stripping

00:35:56.600 --> 00:35:58.600
it and looking at the symbols.

00:35:58.630 --> 00:36:01.000
We can switch to the demo machine.

00:36:10.890 --> 00:36:11.820
So here's Sketch again.

00:36:11.930 --> 00:36:15.620
I'm going to change the active
build configuration to release,

00:36:15.640 --> 00:36:18.240
and I'll build that.

00:36:18.260 --> 00:36:22.120
And while that's building,
we can go off and look at the target.

00:36:24.600 --> 00:36:27.730
I'll filter on debug,
and we see that the debug information

00:36:27.740 --> 00:36:31.060
format is in fact Dwarf with DSIM file.

00:36:32.720 --> 00:36:35.750
And I've also checked
generate debug symbols,

00:36:35.780 --> 00:36:37.850
which is not something
that you've usually done in

00:36:37.850 --> 00:36:41.200
previous versions of Xcode.

00:36:41.220 --> 00:36:46.590
Usually you just build your release with
optimization and no debugging symbols.

00:36:46.780 --> 00:36:48.960
Now we encourage you to actually
generate that information

00:36:48.960 --> 00:36:51.450
so you get the DSIM files.

00:36:52.990 --> 00:36:58.520
You also notice that strip debug
symbols during copy is checked.

00:36:58.660 --> 00:37:01.200
Now, if you just do a build from Xcode,
we don't actually go ahead

00:37:01.200 --> 00:37:03.300
and do that last strip.

00:37:03.330 --> 00:37:05.390
You have to run Xcode build
from the command line with

00:37:05.390 --> 00:37:09.680
the build action of install,
and then that last strip will

00:37:09.680 --> 00:37:12.980
actually happen automatically.

00:37:13.040 --> 00:37:15.610
So it looks like our build succeeded.

00:37:18.520 --> 00:37:22.520
Go browse into our build directory.

00:37:22.570 --> 00:37:24.410
Here's release.

00:37:24.450 --> 00:37:25.350
Here's our sketch.

00:37:25.470 --> 00:37:27.620
So we'll drag that out.

00:37:27.770 --> 00:37:31.370
Now I'm going to go
delete the build products.

00:37:31.410 --> 00:37:35.010
And just so you believe me,
I'll empty the trash too.

00:37:38.100 --> 00:37:39.460
We'll run Sketch.

00:37:39.460 --> 00:37:44.620
And now I'm going to crash Sketch because
it doesn't like drawing circles.

00:37:47.190 --> 00:37:49.900
We'll generate the report,
and we see that, hey,

00:37:49.900 --> 00:37:52.900
we still have a little
bit of information here.

00:37:52.960 --> 00:37:56.700
This information in the backtrace--
so we still see some method calls

00:37:56.700 --> 00:38:00.280
into some of our custom code,
SKT graphic view.

00:38:01.070 --> 00:38:02.980
And this information is
actually information that's

00:38:03.040 --> 00:38:05.110
still in the debug map,
because we haven't stripped

00:38:05.170 --> 00:38:06.690
our executable yet.

00:38:10.030 --> 00:38:13.390
But you'll notice that there isn't
any line number information there.

00:38:13.550 --> 00:38:15.050
So how do we go about finding that?

00:38:15.080 --> 00:38:20.110
Well, we can use GDB here.

00:38:23.550 --> 00:38:25.500
I'll tell it to run with
the sketch on our desktop.

00:38:25.500 --> 00:38:34.440
Now we can do info line star,
which is important,

00:38:34.510 --> 00:38:36.680
and pass it the address.

00:38:39.930 --> 00:38:42.440
And we see, hey,
we couldn't-- it was looking

00:38:42.550 --> 00:38:45.420
for the object files.

00:38:45.430 --> 00:38:50.610
Well, that's because the DSIM file wasn't
located next to the executable.

00:38:51.320 --> 00:38:56.040
Now let's go ahead and drag down.

00:38:56.040 --> 00:38:57.850
Copy this over here.

00:39:03.900 --> 00:39:10.160
We'll run GDB again on our sketch
now that our DSIM file is in place.

00:39:10.160 --> 00:39:15.160
And we'll run our command info
line star past the address.

00:39:15.220 --> 00:39:21.200
And we see this maps to
line 345 of our sources.

00:39:25.580 --> 00:39:27.820
So now let's look at an example,
add an example,

00:39:27.820 --> 00:39:32.220
where we actually strip the executable.

00:39:32.240 --> 00:39:34.520
So I'm going to trash this.

00:39:37.370 --> 00:39:43.370
And now we're going to run
strip minus X on Sketch.

00:39:49.160 --> 00:39:54.920
Now when we run Sketch and
cause it to crash,

00:39:56.260 --> 00:39:59.200
We get another crash report.

00:39:59.260 --> 00:40:04.160
And you'll notice that it now
says that we crashed in start.

00:40:04.220 --> 00:40:06.110
What's this about?

00:40:07.940 --> 00:40:11.240
If we look over here,
we actually had our symbol information.

00:40:11.440 --> 00:40:15.040
Well,
what will happen when backtracers are

00:40:15.040 --> 00:40:19.100
being generated is that it'll keep
looking until it finds a symbol name.

00:40:19.160 --> 00:40:21.620
So since we stripped out everything,

00:40:22.290 --> 00:40:24.270
It'll go through as it's
generating the backtrace,

00:40:24.270 --> 00:40:26.170
look through everything,
it'll find the symbol start.

00:40:26.190 --> 00:40:27.470
So that's what it'll report.

00:40:27.480 --> 00:40:31.810
So if you're ever confused,
some symbol looks like it's

00:40:31.950 --> 00:40:35.410
really where it shouldn't be,
that's probably what's happening is

00:40:35.410 --> 00:40:38.510
you don't have any symbols and that's
the first symbol that was found when

00:40:38.510 --> 00:40:40.220
the backtrace was being generated.

00:40:46.300 --> 00:40:52.720
So now we can go and make sure
our DSIM file is next to Sketch.

00:40:56.640 --> 00:40:58.600
We can run GDB on Sketch again.

00:40:58.600 --> 00:41:05.360
And we can do an info line,
and there we see that it again

00:41:05.510 --> 00:41:07.670
bound the right line number.

00:41:13.030 --> 00:41:16.240
And now I'll show you what happens
if you have your script executable

00:41:16.240 --> 00:41:18.630
and you try and do the same thing.

00:41:25.140 --> 00:41:27.380
So if the executable
is completely stripped,

00:41:27.390 --> 00:41:30.640
it'll say no line number information
was found for that address.

00:41:30.640 --> 00:41:32.780
So there you see that.

00:41:34.130 --> 00:41:35.860
We've stripped our application.

00:41:35.880 --> 00:41:38.100
It doesn't even have the debug map in it.

00:41:38.160 --> 00:41:42.260
So there's very little the
user can find out about your

00:41:42.260 --> 00:41:44.750
application without the symbols.

00:41:44.830 --> 00:41:49.090
Now let's go back to the slides.

00:41:49.210 --> 00:41:51.570
If we can go back to the slides, please.

00:41:54.450 --> 00:41:58.030
So now we have some hot tips for you.

00:41:58.260 --> 00:42:01.560
Now that GDB supports namespaces,
you need to specify the

00:42:01.560 --> 00:42:05.370
namespace when you're setting
a symbolic breakpoint in C++.

00:42:05.430 --> 00:42:09.720
So in this case, mine::testing.

00:42:12.700 --> 00:42:18.200
[Transcript missing]

00:42:18.810 --> 00:42:21.490
If somebody generates an executable
on their machine and they have a

00:42:21.490 --> 00:42:27.420
different path to .o files or sources,
you can actually use this command

00:42:27.420 --> 00:42:31.370
in GDB to map the parts of the path
that don't match on their machine to

00:42:31.370 --> 00:42:33.740
where they're located on your machine.

00:42:33.740 --> 00:42:35.100
So that should make things much nicer.

00:42:35.100 --> 00:42:39.300
You don't have to specify
lots of dir commands.

00:42:40.330 --> 00:42:43.730
Since this is a mapping that maps
part of a path to another path,

00:42:43.730 --> 00:42:46.670
you don't have to specify
dir like you would for every

00:42:46.670 --> 00:42:50.460
single directory underneath,
since the root is what you're replacing,

00:42:50.460 --> 00:42:53.390
and it'll find everything under
that as long as everything

00:42:53.390 --> 00:42:55.400
else is in the same location.

00:42:57.490 --> 00:43:00.590
Don't use dwarf with
DSIM for development.

00:43:00.600 --> 00:43:01.140
It's slow.

00:43:01.140 --> 00:43:06.360
We've had some people that have
chosen this when they were first

00:43:06.360 --> 00:43:11.050
exploring dwarf with Xcode 2.3,
and you really just want to stick with

00:43:11.190 --> 00:43:15.200
leaving your dwarf information in the .o
files when you're doing your development.

00:43:15.200 --> 00:43:17.890
Use dwarf with DSIM when
you're doing a release,

00:43:17.890 --> 00:43:20.440
your nightly builds, that sort of thing.

00:43:23.420 --> 00:43:27.280
Second hot tip is,
since your release builds

00:43:27.280 --> 00:43:30.600
are now more debuggable,
we're generating the dwarf information,

00:43:30.600 --> 00:43:38.280
if your PC error was hopping around,
that's almost 99.9999% sure that

00:43:38.280 --> 00:43:39.860
you're debugging optimized code.

00:43:39.860 --> 00:43:42.590
Just keep that in mind.

00:43:44.310 --> 00:43:47.430
So today we've shown you new ways
you can debug your application

00:43:47.460 --> 00:43:50.970
using the debugger HUD,
debugging directly in the

00:43:51.070 --> 00:43:53.570
editor with the debugger bar.

00:43:54.280 --> 00:43:57.200
We've shown you how to work with
Dwarf files and Dwarf symbols.

00:43:57.280 --> 00:44:00.200
We hope that you'll all
try this out immediately.

00:44:00.200 --> 00:44:02.190
Move on over to Dwarf.

00:44:02.230 --> 00:44:04.200
It's nice and comfy.

00:44:04.290 --> 00:44:06.200
And we've given you a small
taste of future directions

00:44:06.200 --> 00:44:08.200
with technology like Rewind.

00:44:10.450 --> 00:44:14.410
For more information,
you can contact Matt Formica.

00:44:14.510 --> 00:44:16.380
And of course, we've got documentation,
sample code,

00:44:16.380 --> 00:44:18.850
and other resources on the WWDC website.