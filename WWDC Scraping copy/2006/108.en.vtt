WEBVTT

00:00:10.930 --> 00:00:13.140
Good morning, everybody.

00:00:13.140 --> 00:00:16.240
Welcome to session 108,
Taking Advantage of Spotlight.

00:00:16.240 --> 00:00:19.250
My name is Jonah Petri,
and I'm an engineer

00:00:19.250 --> 00:00:20.660
on the Spotlight team.

00:00:20.660 --> 00:00:24.320
And today, we're going to be taking
you through a few things.

00:00:24.320 --> 00:00:25.480
We've got a lot to cover.

00:00:25.480 --> 00:00:27.260
So here's what we're going to do.

00:00:27.260 --> 00:00:30.090
The first thing we're going
to cover is Spotlight,

00:00:30.090 --> 00:00:32.930
a little bit of an update on
what we have in Leopard and

00:00:32.980 --> 00:00:35.040
some review of our existing API.

00:00:35.040 --> 00:00:38.110
We're going to cover document lineage,
which is a new feature that

00:00:38.170 --> 00:00:39.640
we are trying out in Leopard.

00:00:40.140 --> 00:00:43.870
We're also going to cover Quick Look,
which is a way to preview

00:00:43.870 --> 00:00:46.000
your custom document formats.

00:00:46.000 --> 00:00:48.570
And you're also going
to cover Spotlight Help,

00:00:48.580 --> 00:00:52.080
which is a way for you to index
features of your application.

00:00:52.080 --> 00:00:54.520
So let's get started.

00:00:54.520 --> 00:00:57.920
So with Spotlight in Leopard,
we wanted to extend

00:00:57.920 --> 00:00:59.780
what we'd done in Tiger.

00:00:59.780 --> 00:01:03.950
And in order to do that,
we decided that the first thing we wanted

00:01:03.950 --> 00:01:06.320
to do was to show some recent items.

00:01:06.370 --> 00:01:11.380
And the first thing that you see
when you bring up the up the window.

00:01:11.380 --> 00:01:15.340
We show you the five most
recent items in every category.

00:01:15.340 --> 00:01:18.060
So those would be the five most
recent documents or the five most

00:01:18.060 --> 00:01:21.620
recent images that you've looked at,
for instance.

00:01:21.620 --> 00:01:26.380
We also wanted to cover a little
bit more advanced searching.

00:01:26.380 --> 00:01:29.650
There were many requests that people
really wanted to get a little bit more

00:01:29.650 --> 00:01:32.240
precisely at the documents they wanted.

00:01:32.240 --> 00:01:35.640
And so we've put this advanced
search interface-- let me blow

00:01:35.640 --> 00:01:38.260
that up a little so you can see it.

00:01:38.260 --> 00:01:45.460
What this allows you to do is specify
arbitrary attributes to search on.

00:01:45.460 --> 00:01:50.020
And it also lets you do more
full Boolean searching in the UI.

00:01:50.020 --> 00:01:55.770
You can see here that the search that
I've done is for items on my computer

00:01:55.780 --> 00:02:00.240
where either the keywords contain
yellow or the keywords contain green.

00:02:00.280 --> 00:02:04.570
And I found some images where
there's maybe a green snake and maybe

00:02:04.570 --> 00:02:06.500
something about Yellowstone Park.

00:02:06.620 --> 00:02:08.240
So we think this allows you to do that.

00:02:08.240 --> 00:02:10.590
And you can also do some more powerful
searching and maybe get at the

00:02:10.590 --> 00:02:14.070
documents that you want more precisely.

00:02:14.170 --> 00:02:16.900
We've also allowed you to do
server searching in Spotlight.

00:02:16.900 --> 00:02:19.530
This means that anything that you're
connected-- any Leopard servers

00:02:19.600 --> 00:02:23.180
that you're connected to over AFP,
and that includes personal file sharing,

00:02:23.280 --> 00:02:28.530
you can search by selecting the
Servers tab in the Where pop-up.

00:02:28.540 --> 00:02:32.310
And that Where pop-up appears
when you press the Custom button

00:02:32.310 --> 00:02:34.280
in the Spotlight window.

00:02:34.670 --> 00:02:38.200
Another thing that we've put into
Spotlight is integrated previews.

00:02:38.200 --> 00:02:40.200
So let's say you're browsing
around a couple images.

00:02:40.200 --> 00:02:45.030
You can see I used that advanced
search UI again to search for things

00:02:45.030 --> 00:02:46.660
where the keywords contain leopard.

00:02:46.660 --> 00:02:48.790
And I've got a bunch of
pictures of leopards,

00:02:48.800 --> 00:02:51.540
but I can't really tell if
that's the one that I want.

00:02:51.570 --> 00:02:54.830
So we allow you now to pop up
sort of an integrated preview,

00:02:54.830 --> 00:02:58.660
and this uses the QuickLook architecture
that you'll see later,

00:02:58.660 --> 00:03:04.340
to preview your documents in line
without opening the application.

00:03:04.340 --> 00:03:10.100
So we've added a very often-requested
feature for an advanced query syntax.

00:03:10.100 --> 00:03:14.010
This is just an example,
but we let you do arbitrary,

00:03:14.040 --> 00:03:19.440
true and false, and Boolean expressions,
and we also allow you to search

00:03:19.440 --> 00:03:23.080
specific attributes in the query syntax.

00:03:23.080 --> 00:03:26.440
This syntax might be somewhat
familiar to those of you who've

00:03:26.540 --> 00:03:28.770
used Google or other search engines.

00:03:28.770 --> 00:03:31.130
It's sort of an evolved language there.

00:03:31.130 --> 00:03:34.080
So this example I'm
showing how to search for,

00:03:34.080 --> 00:03:38.320
anything that matches tiger,
where the kind is not an image.

00:03:38.320 --> 00:03:42.580
And so I've come up with a movie,
and maybe some email messages,

00:03:42.580 --> 00:03:44.820
and some PDF documents.

00:03:44.900 --> 00:03:47.820
We also allow you to do
arbitrary Boolean searches.

00:03:47.820 --> 00:03:49.820
So this is an example with or.

00:03:49.820 --> 00:03:52.820
You can also use and,
and you can also use parentheses.

00:03:52.820 --> 00:03:56.820
So this is I'm finding anything that's
a PDF or that has the keyword leopard.

00:03:56.910 --> 00:04:03.760
Sort of a strange search maybe,
but that's just a good example of an or.

00:04:03.820 --> 00:04:07.250
So we've taken the UI definitely places,
and we've got further to go with

00:04:07.250 --> 00:04:08.790
that before we ship leopard.

00:04:08.860 --> 00:04:14.150
But what we need from you most of all
is we need to allow the user to search

00:04:14.150 --> 00:04:15.820
your document formats more richly.

00:04:15.820 --> 00:04:18.800
And we need you to allow them
to preview them more richly.

00:04:18.850 --> 00:04:20.720
And in order to do that,
we have to understand

00:04:20.720 --> 00:04:21.810
your document format.

00:04:21.820 --> 00:04:24.820
And for that, you need to tell us a
little bit about that.

00:04:24.820 --> 00:04:27.910
And the way that you tell us
about your document format is

00:04:27.910 --> 00:04:29.820
by writing a spotlight plugin.

00:04:29.820 --> 00:04:33.560
And the way that these things
work is these are CFPlugins that

00:04:33.560 --> 00:04:36.810
sit on your hard drive,
and they declare to us, spotlight,

00:04:36.810 --> 00:04:40.560
a set of handled file formats
in the form of UTI types.

00:04:40.560 --> 00:04:44.250
And when they're called,
they extract metadata from a given

00:04:44.260 --> 00:04:47.560
file and allow us to add that
metadata to the spotlight index.

00:04:47.560 --> 00:04:50.560
And so we're going to go over
how to build one of these.

00:04:50.560 --> 00:04:53.560
But some first, some general rules.

00:04:53.560 --> 00:04:55.560
If you're going to be
building a spotlight plugin,

00:04:55.560 --> 00:04:58.560
you should publish metadata
that facilitates user searches.

00:04:58.560 --> 00:05:02.070
Some published metadata that
the user might search for.

00:05:02.090 --> 00:05:03.280
Sort of obvious.

00:05:03.300 --> 00:05:07.290
Also, allow for richer previews of the
documents using the metadata.

00:05:07.290 --> 00:05:12.550
So make sure you publish authors or
keywords or these sorts of things that

00:05:12.550 --> 00:05:16.080
the user might see in a preview of their
document to understand that that really

00:05:16.090 --> 00:05:19.300
was the document that they were looking
for or maybe to compare two documents.

00:05:19.300 --> 00:05:25.300
Please don't use your spotlight importer
as a database for your private data.

00:05:25.300 --> 00:05:27.130
That just slows down
everybody else's searches,

00:05:27.180 --> 00:05:30.060
and we're not really guaranteeing that
you're going to get everything back,

00:05:30.060 --> 00:05:31.280
so it's just not a good idea.

00:05:31.310 --> 00:05:31.600
Also,
please don't use your spotlight importer

00:05:31.600 --> 00:05:31.820
as a database for your private data.

00:05:31.820 --> 00:05:32.130
That just slows down
everybody else's searches,

00:05:32.130 --> 00:05:32.600
and we're not really guaranteeing that
you're going to get everything back,

00:05:32.610 --> 00:05:33.040
so it's just not a good idea.

00:05:33.040 --> 00:05:36.200
Also, please don't use it for icon
previews or other blobs of

00:05:36.200 --> 00:05:38.040
data that it can't be searched.

00:05:38.170 --> 00:05:41.460
Also, remember that too much
noise can confuse the user,

00:05:41.460 --> 00:05:44.040
so be judicious in what data you publish.

00:05:44.040 --> 00:05:47.110
Also, there's no user interface
allowed in these things.

00:05:47.110 --> 00:05:49.580
We disallow connections
to the Windows Server,

00:05:49.580 --> 00:05:52.930
and so you won't be able to pop
up any authentication dialogs.

00:05:53.950 --> 00:05:56.690
or any other kind of UI, for that matter.

00:05:56.750 --> 00:05:58.980
So now that we've gone over some rules,
let's take a look at what these

00:05:59.030 --> 00:06:00.880
things are actually composed of.

00:06:01.030 --> 00:06:05.750
Metadata in the Spotlight system is
in terms of attributes and values.

00:06:05.970 --> 00:06:08.490
There are many predefined attributes
that you can take advantage of,

00:06:08.490 --> 00:06:11.290
and we urge you to take advantage
of these because it allows for

00:06:11.360 --> 00:06:13.410
richer previewing between documents.

00:06:13.480 --> 00:06:15.300
Some of the predefined
attributes you see there,

00:06:15.300 --> 00:06:18.620
we cover title, authors, keywords,
projects.

00:06:18.680 --> 00:06:23.150
There's also document type-specific
attributes such as pixel height

00:06:23.150 --> 00:06:25.860
or width or maybe audio bit rate.

00:06:25.920 --> 00:06:27.940
And you can look at the
full list of attributes.

00:06:27.940 --> 00:06:30.860
There are many, many,
many of them in mditem.h,

00:06:30.900 --> 00:06:34.600
and that's in the metadata framework
under the core services framework.

00:06:35.410 --> 00:06:38.020
We also allow you to store
localized attributes.

00:06:38.020 --> 00:06:41.640
These are attributes that appear
differently to different users depending

00:06:41.640 --> 00:06:43.430
on their current language settings.

00:06:43.520 --> 00:06:48.690
For instance, an application's name might
be localized in multiple,

00:06:48.700 --> 00:06:52.050
in different localizations,
and you might want to store

00:06:52.050 --> 00:06:53.800
that in the display name.

00:06:53.800 --> 00:06:57.170
And so you can see here that you
can use a CFDictionary with key

00:06:57.170 --> 00:06:59.300
value pairs for each language code.

00:06:59.400 --> 00:07:02.410
And in this example,
I'm using address book,

00:07:02.410 --> 00:07:07.200
and you can see that we've localized
it in German and English and Italian.

00:07:07.210 --> 00:07:10.760
And you can also see that the
empty string is used as a default

00:07:10.760 --> 00:07:14.450
localization to fall back on in
case the user is using a language

00:07:14.500 --> 00:07:16.850
that you have not localized for.

00:07:16.920 --> 00:07:21.900
So, we also ship many pre-built
importers on the system.

00:07:21.900 --> 00:07:25.390
So if your application deals in
terms of one of these document types,

00:07:25.390 --> 00:07:26.990
you may not have any work to do.

00:07:27.110 --> 00:07:29.400
We ship, you know,
you can see this is not an exhaustive,

00:07:29.400 --> 00:07:31.890
list, I don't think,
but it covers a lot of

00:07:31.890 --> 00:07:32.800
different data types.

00:07:32.800 --> 00:07:35.100
So you might want to look to
see if you're already covered.

00:07:35.100 --> 00:07:37.150
Maybe you don't have any work.

00:07:37.310 --> 00:07:40.500
But I suspect that many of you
that have a custom format have not,

00:07:40.690 --> 00:07:42.430
we've not written an
importer that covers it yet.

00:07:42.530 --> 00:07:46.580
So here's the steps that you
need to do to write an importer.

00:07:46.580 --> 00:07:50.590
The first step you need is to start with
the Spotlight plugin template in Xcode,

00:07:50.590 --> 00:07:53.420
then edit the Info.plist that
comes with the plugin,

00:07:53.490 --> 00:07:55.820
implement the
getMetadataForFile function,

00:07:55.820 --> 00:07:57.600
and then install your importer.

00:07:57.600 --> 00:08:00.780
And please test it a little bit
before you release it on the world.

00:08:03.020 --> 00:08:06.510
So the Spotlight plugin template
in Xcode is pretty easy to find.

00:08:06.510 --> 00:08:08.130
You can see it right up there.

00:08:08.130 --> 00:08:09.880
It's in the new project dialog.

00:08:09.910 --> 00:08:12.880
And this lays down a lot of
pre-built glue code for you that

00:08:12.880 --> 00:08:15.080
you basically don't need to touch.

00:08:15.080 --> 00:08:20.220
Stuff that's sometimes easy to get wrong,
and we've just done the work for you.

00:08:20.300 --> 00:08:22.660
So please take advantage of that.

00:08:24.200 --> 00:08:27.420
Once you've done that,
edit the Info.plist.

00:08:27.420 --> 00:08:32.270
The key that you need to pay
attention to the most is the

00:08:32.270 --> 00:08:35.800
UTI type that your importer handles,
and that's declared in the

00:08:35.800 --> 00:08:37.020
LSItemContentTypes key.

00:08:37.020 --> 00:08:41.120
This is a pretty well-commented XML file,
so you should see where everything goes.

00:08:41.120 --> 00:08:46.140
You should list your UTI or
UTIs that your document importer

00:08:46.140 --> 00:08:48.460
is going to cover there.

00:08:48.780 --> 00:08:52.280
It's also possible to
define your UTI here,

00:08:52.280 --> 00:08:55.280
but we really urge you to
define your UTI in your

00:08:55.280 --> 00:08:58.930
applications P-list if possible,
because UTIs are fairly

00:08:58.930 --> 00:09:01.570
mature at this point,
and that's really the proper

00:09:01.570 --> 00:09:03.130
place to be putting them.

00:09:03.140 --> 00:09:06.710
Once you've done that,
edit the other informational fields

00:09:06.710 --> 00:09:10.470
like bundle name and version,
and be careful not to just use your

00:09:10.490 --> 00:09:14.880
search and replace for everything
com.apple to com.yourcompany,

00:09:14.880 --> 00:09:18.140
because there are some fields
that need to be com.apple.

00:09:18.780 --> 00:09:19.870
Look in the P list.

00:09:19.880 --> 00:09:21.140
Don't use the big hammer.

00:09:21.140 --> 00:09:22.160
Just tread carefully.

00:09:24.030 --> 00:09:26.320
Then once you've done that,
implement the code.

00:09:26.420 --> 00:09:28.820
There's this stubbed-out function
that comes with the template,

00:09:28.830 --> 00:09:29.840
getMetadataForFile.

00:09:29.840 --> 00:09:33.900
You're passed a path to the file that we
want you to extract the metadata from,

00:09:33.900 --> 00:09:37.540
as well as a CFMutable dictionary
to add the attributes to.

00:09:37.540 --> 00:09:41.570
Please be careful to extract
the metadata efficiently.

00:09:41.570 --> 00:09:46.420
Be aware that your metadata plugin
is being run in the background while

00:09:46.420 --> 00:09:49.190
the user may be using their machine.

00:09:49.940 --> 00:09:52.840
And so you don't want to have an
impact on the user experience.

00:09:52.840 --> 00:09:55.640
So you have to be careful
in terms of CPU usage,

00:09:55.640 --> 00:09:59.470
disk usage, memory footprint,
and all other sorts of

00:09:59.470 --> 00:10:02.920
performance-related considerations.

00:10:02.920 --> 00:10:06.230
Once you've done that,
please install your importer.

00:10:06.230 --> 00:10:08.320
You can install it in two places.

00:10:08.320 --> 00:10:11.270
We allow you to install
it in Library Spotlight,

00:10:11.280 --> 00:10:16.220
which would be where you would put it
if you were doing a standalone importer.

00:10:16.220 --> 00:10:21.920
Or maybe if you wanted to put it there
as part of... a larger install package.

00:10:22.080 --> 00:10:24.970
We also allow you to put
it within your application.

00:10:25.060 --> 00:10:27.850
This is useful for drag installs,
or it's actually a little

00:10:27.850 --> 00:10:29.260
bit more friendly overall.

00:10:29.260 --> 00:10:31.780
So we like to recommend
that you do that if you can.

00:10:31.840 --> 00:10:34.960
So the precedence that
importers are loaded in,

00:10:34.960 --> 00:10:38.530
and first one wins, by the way,
is Library Spotlight,

00:10:38.530 --> 00:10:42.940
then the system-installed importers
in System Library Spotlight,

00:10:42.940 --> 00:10:45.680
and then your app-bundled importers.

00:10:45.760 --> 00:10:49.520
Once you've done that,
you should be able to run your importer.

00:10:49.940 --> 00:10:52.790
And test to make sure that new
documents that are created are

00:10:52.800 --> 00:10:54.560
actually imported properly.

00:10:54.560 --> 00:10:56.640
So a couple tips.

00:10:56.740 --> 00:10:58.700
Please use the standardized
attribute names.

00:10:58.720 --> 00:11:03.090
This really does allow
for users to more...

00:11:03.770 --> 00:11:08.300
Richly compare documents between each
other and also search more precisely.

00:11:08.300 --> 00:11:10.600
Take advantage of the text content.

00:11:10.610 --> 00:11:13.940
This is really useful for
contents of text documents,

00:11:13.940 --> 00:11:16.860
as you can see from the label,
but it also might be used for things

00:11:16.860 --> 00:11:19.970
that you might not have thought of,
like maybe the comments

00:11:20.060 --> 00:11:23.270
field in a calendar event,
in a calendaring program.

00:11:23.280 --> 00:11:26.310
Or maybe if you have large
collections of song lyrics.

00:11:26.390 --> 00:11:28.290
All of those can go in that field.

00:11:29.340 --> 00:11:32.330
Another tip is to, if you can,
delete the schema.xml and

00:11:32.330 --> 00:11:34.700
schema.strings if you don't need them.

00:11:34.720 --> 00:11:38.260
You'll see in those files the
types of things that they cover.

00:11:38.260 --> 00:11:41.820
It has to do with advanced attributes,
I'm sorry, custom attributes,

00:11:41.820 --> 00:11:44.300
as well as defining
custom document types.

00:11:44.300 --> 00:11:47.540
But if you haven't edited those,
chances are you can just delete them.

00:11:47.560 --> 00:11:51.790
And please check your
performance with mdimport-p.

00:11:51.800 --> 00:11:54.980
mdimport is a tool that we ship that
allows you to test your importers.

00:11:54.980 --> 00:11:58.780
You can type mdimport and then a file
name and it will import that file.

00:11:59.300 --> 00:12:01.130
It's a command line tool, by the way.

00:12:01.230 --> 00:12:05.090
And the -p option allows you to
give it a folder hierarchy of files

00:12:05.140 --> 00:12:07.730
and it will import that entire
folder hierarchy and then report

00:12:07.820 --> 00:12:09.240
performance statistics for you.

00:12:09.270 --> 00:12:12.280
We really want you to be careful
about performance because these

00:12:12.280 --> 00:12:15.500
things really do impact user
perceived performance on the system.

00:12:15.540 --> 00:12:18.020
So again, a couple things to be aware of.

00:12:18.120 --> 00:12:22.620
Please be aware of how much
memory and CPU you're using.

00:12:22.630 --> 00:12:25.430
And don't allocate huge
buffers just to read large,

00:12:25.430 --> 00:12:27.870
large,
large amounts of data only to pick out

00:12:27.870 --> 00:12:30.200
a small section to use for the metadata.

00:12:30.280 --> 00:12:33.320
Please don't blindly reuse your code.

00:12:33.320 --> 00:12:36.960
We do encourage you to reuse your code,
but be aware if it's going to inflate

00:12:37.040 --> 00:12:40.460
hundreds and hundreds and hundreds
of objects into the system only to

00:12:40.460 --> 00:12:43.600
extract a small amount of metadata
that may have a large impact.

00:12:43.620 --> 00:12:48.480
And the reason really why we want you
to be careful about your performance is

00:12:48.530 --> 00:12:53.420
that if we're importing - if we're doing
an initial scan of the user's drive,

00:12:53.420 --> 00:12:57.750
you may have thousands of documents
of your document type on the

00:12:57.750 --> 00:13:02.320
user's drive and you have to scale
your importer to those thousands

00:13:02.350 --> 00:13:05.400
and thousands of documents
without hurting the user too much.

00:13:05.440 --> 00:13:09.260
So just please be aware of
performance in this case.

00:13:10.520 --> 00:13:14.860
So, if you have a custom file format,
please write an importer.

00:13:14.860 --> 00:13:19.480
This will really help us integrate your
documents into Spotlight and it will

00:13:19.480 --> 00:13:23.690
help the users find your documents and
they'll thank you for that for sure.

00:13:23.700 --> 00:13:27.960
Otherwise, please put useful metadata
into your documents.

00:13:27.960 --> 00:13:31.630
This allows us to present richer
previews to the user and if you're going

00:13:31.630 --> 00:13:34.730
to use our APIs to present previews,
it allows you to present

00:13:34.740 --> 00:13:36.560
richer previews to the user.

00:13:36.820 --> 00:13:40.080
Please preserve metadata
in existing file formats.

00:13:40.080 --> 00:13:43.410
And what I mean by this is, let's say,
by way of example,

00:13:43.440 --> 00:13:48.120
you're writing OpenOffice and you're
opening up Microsoft Word documents.

00:13:48.120 --> 00:13:52.140
If the user has bothered to enter
an author or a title or comments

00:13:52.140 --> 00:13:56.340
into the document properties window,
when you're reading in that

00:13:56.420 --> 00:14:00.100
file and writing it out again,
take care to preserve those

00:14:00.100 --> 00:14:02.200
so that we don't lose those.

00:14:03.140 --> 00:14:06.160
Because that's really user data
and please don't lose user data,

00:14:06.160 --> 00:14:07.500
I guess, is the message.

00:14:07.500 --> 00:14:09.650
And please come visit us in the lab.

00:14:09.680 --> 00:14:14.070
Many people last year came to our
importer session and then came over

00:14:14.070 --> 00:14:18.690
to the lab and had a draft of their
importer written before they left.

00:14:18.720 --> 00:14:20.930
And so we really think that
we can help you and we're

00:14:20.930 --> 00:14:22.380
happy to help you with this.

00:14:22.380 --> 00:14:26.300
So, next.

00:14:29.670 --> 00:14:33.600
We're going to do a quick overview
of the Spotlight API before we

00:14:33.600 --> 00:14:34.680
move on to document lineage.

00:14:34.680 --> 00:14:38.820
So, what do we allow you to
do with the Spotlight API?

00:14:38.820 --> 00:14:42.620
Well, first we allow you to
access metadata for a file.

00:14:42.620 --> 00:14:45.710
This is useful if you want to
throw up a properties dialog

00:14:45.710 --> 00:14:47.300
or maybe a get info panel.

00:14:47.300 --> 00:14:52.540
And the way that you do this is
using the MD item ref object.

00:14:52.540 --> 00:14:56.880
And you can look up the MD item ref
API reference in the documentation.

00:14:56.880 --> 00:14:57.720
It's pretty thorough.

00:14:58.280 --> 00:15:01.660
An MD item ref in this case represents
a file in the metadata database.

00:15:01.660 --> 00:15:06.490
And you can ask it about its title or
its subjects or its keyword or project,

00:15:06.540 --> 00:15:08.630
whatever metadata it has on it.

00:15:10.450 --> 00:15:12.400
So in order to retrieve
metadata from a file,

00:15:12.400 --> 00:15:13.940
there are three simple steps.

00:15:13.940 --> 00:15:16.600
The first, you have to create an
MD item ref for the file.

00:15:16.600 --> 00:15:19.670
Then you have to obtain a list
of available attributes and

00:15:19.710 --> 00:15:21.160
then retrieve the metadata.

00:15:21.160 --> 00:15:23.310
I'm going to walk you
through this pretty quickly.

00:15:23.320 --> 00:15:26.780
So MD item create is the function
you use to create an MD item.

00:15:26.780 --> 00:15:27.200
Surprise.

00:15:27.200 --> 00:15:31.490
And you use a CFString to
represent the path to the item.

00:15:31.500 --> 00:15:35.610
Once you have your item ref there,
you call MD item copy attribute

00:15:35.610 --> 00:15:40.700
names to get the list of names of
attributes that that MD item ref

00:15:40.700 --> 00:15:45.010
has and then call MD item copy
attributes to get out a CFDictionary of

00:15:45.010 --> 00:15:46.470
attribute names to values.

00:15:48.800 --> 00:15:50.460
And that's going to look
something like this.

00:15:50.460 --> 00:15:53.360
Now, of course,
some of you may be saying, well,

00:15:53.360 --> 00:15:55.680
that's all well and good,
but that's not very pretty.

00:15:55.680 --> 00:15:57.080
I can't show that to the user.

00:15:57.080 --> 00:16:00.460
They'll say, KMDItemContent,
what the heck is that?

00:16:00.500 --> 00:16:05.130
So we also allow you to get
pretty localized display

00:16:05.130 --> 00:16:07.730
names for the attributes.

00:16:07.820 --> 00:16:10.740
And the way that you do that,
what I mean by that is

00:16:10.740 --> 00:16:14.040
instead of KMDItemAuthors,
you can get authors.

00:16:14.800 --> 00:16:17.180
And in order to get that,
you use mdschema.copyDisplayName

00:16:17.260 --> 00:16:17.980
for attribute.

00:16:17.980 --> 00:16:21.370
We also allow you to get localized
descriptions of the attributes.

00:16:21.420 --> 00:16:24.440
And you please use
mdschema.copyDisplayDescription

00:16:24.440 --> 00:16:25.460
for attribute.

00:16:25.460 --> 00:16:28.370
And that will return something
like localized name of the file for

00:16:28.370 --> 00:16:31.960
KMDItemDisplayName in case the user wants
to get a little bit more explanation

00:16:31.960 --> 00:16:34.000
about what this attribute really means.

00:16:36.010 --> 00:16:38.980
So that's how you retrieve metadata.

00:16:38.980 --> 00:16:40.920
Now on to what we really
built Spotlight for,

00:16:40.920 --> 00:16:42.970
which was searching.

00:16:43.380 --> 00:16:45.170
There's a couple ways
to implement search.

00:16:45.250 --> 00:16:46.760
The first is really simple.

00:16:46.810 --> 00:16:47.860
It's a one-liner in code.

00:16:47.860 --> 00:16:51.390
It allows you to open the Spotlight
window and present it as if the user

00:16:51.540 --> 00:16:55.000
had typed that search string that you
provide into the Spotlight window.

00:16:55.000 --> 00:16:57.340
This is very fast to implement.

00:16:57.340 --> 00:17:01.780
The second is to use the
AppKit-level NSMetadata Query API.

00:17:01.780 --> 00:17:07.420
This is a Cocoa API that's
bindable and works very nicely if

00:17:07.420 --> 00:17:09.780
you are using that level of API.

00:17:09.780 --> 00:17:13.860
We also allow you to use a core
foundation-level MD Query API.

00:17:13.860 --> 00:17:16.870
That's the lowest-level API and
the one that I'm going to be going

00:17:16.870 --> 00:17:19.810
into the most depth for here,
but please come to us with

00:17:19.810 --> 00:17:21.690
any questions that you have.

00:17:21.800 --> 00:17:23.480
So opening the Spotlight window.

00:17:23.480 --> 00:17:26.770
Like I said, this is a one-liner,
H-I search window show with

00:17:26.770 --> 00:17:27.820
just a string to search.

00:17:27.820 --> 00:17:30.180
And this will open the Spotlight
window as if the user had

00:17:30.180 --> 00:17:31.620
just typed it in themselves.

00:17:31.620 --> 00:17:34.610
This is great if you want
really simple integration.

00:17:34.610 --> 00:17:37.240
You can see this in
TextEdit and AddressBook.

00:17:37.300 --> 00:17:40.260
And this is good to just present
a quick search to the user if you

00:17:40.260 --> 00:17:43.780
think that's a convenient thing
for that point in your application.

00:17:43.780 --> 00:17:46.730
The disadvantage to this is that you
have no possible interaction with

00:17:46.730 --> 00:17:48.230
the Spotlight window after this.

00:17:48.230 --> 00:17:49.590
It's sort of fire and forget.

00:17:49.590 --> 00:17:54.120
The search is up and you can't figure
out what the user chose or what they

00:17:54.120 --> 00:17:56.640
might have done with the result set.

00:17:56.660 --> 00:17:58.970
So if you want to do any of that,
you have to use one

00:17:58.970 --> 00:18:00.100
of the other two APIs.

00:18:00.100 --> 00:18:03.400
The first one I'm going to talk
about is the NSMetadataQuery API.

00:18:03.400 --> 00:18:07.250
This uses NSPredicate,
which some of you may be familiar with,

00:18:07.250 --> 00:18:11.200
which is an expression evaluating
true or false across the entire

00:18:11.200 --> 00:18:13.280
set of objects on your system.

00:18:13.780 --> 00:18:17.600
And this finds the files matching
the provided predicate and also does

00:18:17.600 --> 00:18:21.770
things like stores the results and
groups the results by their attributes

00:18:21.770 --> 00:18:25.080
and also is a bindable model object,
as I mentioned.

00:18:25.080 --> 00:18:29.070
So you can just hook this right up in
Interface Builder and very quickly have

00:18:29.070 --> 00:18:31.440
a working Spotlight searching window.

00:18:33.250 --> 00:18:35.530
So a couple more details.

00:18:35.630 --> 00:18:39.800
You can also iterate this manually
if you don't want to use bindings.

00:18:39.800 --> 00:18:43.250
The results are available by using
these result count and result at index.

00:18:43.280 --> 00:18:46.480
And you could imagine a for loop that
iterates the result set pretty quickly.

00:18:46.480 --> 00:18:49.850
And this NS Metadata Query
also has a value list.

00:18:49.860 --> 00:18:52.490
And what I mean by this is
that this allows you to say,

00:18:52.510 --> 00:18:56.700
hey, my 15 documents that were a result
of my search only have three authors.

00:18:56.700 --> 00:18:58.560
So what are those three authors?

00:18:59.430 --> 00:19:04.520
Or I have 250 MP3s that match my search,
but they cover three genres.

00:19:04.610 --> 00:19:08.320
And so you could list the genres
in sort of an iTunes-esque view.

00:19:08.320 --> 00:19:15.290
So this allows you to quickly evaluate
certain statistics about your result set.

00:19:15.350 --> 00:19:17.780
And you can sort also.

00:19:17.780 --> 00:19:20.090
So also very useful.

00:19:20.140 --> 00:19:22.920
And you can group them by
their attributes values.

00:19:22.920 --> 00:19:26.430
So you can ask for, given a genre,
show me the list of MP3s within

00:19:26.430 --> 00:19:28.610
this search that match that genre.

00:19:29.420 --> 00:19:31.920
So onto the MD Query API.

00:19:31.920 --> 00:19:35.160
So the key object to be aware
of here is the MD Item Ref,

00:19:35.170 --> 00:19:36.840
which we covered before.

00:19:36.890 --> 00:19:40.700
In this case, it also represents a
result from the query.

00:19:40.700 --> 00:19:44.380
And an MD Query Ref,
which represents a query string,

00:19:44.380 --> 00:19:48.150
as well as the results that
resulted from that query.

00:19:50.300 --> 00:19:53.660
So the query language that we
use for the MD Query API is a

00:19:53.660 --> 00:19:55.860
simple C-like expression language.

00:19:55.860 --> 00:20:00.700
You see the attributes are on the left
and the expressions are on the right.

00:20:00.700 --> 00:20:02.770
In this case,
I'm searching for anything whose

00:20:02.770 --> 00:20:05.970
content type is public.rtf.

00:20:06.200 --> 00:20:09.370
This will be pretty familiar
to any of you that use C,

00:20:09.380 --> 00:20:11.280
which I assume is all of you.

00:20:11.280 --> 00:20:14.520
We allow you to use strings
and numbers and dates.

00:20:14.520 --> 00:20:16.000
We support many operators.

00:20:16.000 --> 00:20:18.340
For strings,
we have equals and not equals,

00:20:18.340 --> 00:20:21.520
and star can be used as a
wildcard in your patterns.

00:20:21.520 --> 00:20:24.150
And for numbers and dates,
we support all the sorts of arithmetic

00:20:24.200 --> 00:20:27.580
operators that you might expect.

00:20:27.580 --> 00:20:31.100
We also allow you to do logical
groupings and/or parentheses,

00:20:31.100 --> 00:20:32.320
also logical not.

00:20:32.320 --> 00:20:38.760
And another little detail is that star
can be used to mean any metadata if

00:20:38.760 --> 00:20:41.920
it's on the left side of the expression.

00:20:41.930 --> 00:20:44.840
Here's an example where
star matches Boston.

00:20:44.840 --> 00:20:49.350
And what this will find is any
items whose metadata matches Boston.

00:20:51.870 --> 00:20:54.040
So once we've covered that,
there's a couple things you can

00:20:54.040 --> 00:20:55.640
do with string match modifiers.

00:20:55.640 --> 00:20:57.620
This is specific to string matching.

00:20:57.620 --> 00:20:59.260
You can't use this for
number matching or anything.

00:20:59.260 --> 00:21:04.030
And we use this because exact match
is often not what users expect.

00:21:04.030 --> 00:21:06.640
There are three supported
modifiers that you can use.

00:21:06.640 --> 00:21:09.780
The first is C,
and this means that the comparison

00:21:09.790 --> 00:21:11.900
is done case-insensitively.

00:21:11.900 --> 00:21:15.820
This means that text edit, all lowercase,
would match text edit, uppercase.

00:21:17.000 --> 00:21:20.960
D also similarly means
diacritic insensitive.

00:21:20.990 --> 00:21:26.210
So resume without any diacritic
marks will match resume

00:21:26.330 --> 00:21:27.920
with the accents on both Es.

00:21:27.960 --> 00:21:30.180
The third one is a little more subtle.

00:21:30.180 --> 00:21:32.960
It's W,
and this means word-based matching.

00:21:32.960 --> 00:21:35.960
This means that we compare the
pattern that you provided against

00:21:35.960 --> 00:21:40.860
each word in the value list of
the item that we're evaluating.

00:21:40.980 --> 00:21:43.780
So in this case,
utility would match disk utility because

00:21:43.780 --> 00:21:45.960
there's a word that looks like utility.

00:21:45.960 --> 00:21:45.960
But parity is important.

00:21:45.960 --> 00:21:45.960
So if you're using a word
that looks like utility,

00:21:45.960 --> 00:21:45.960
you're going to have to match it with the
value of the item that you're evaluating.

00:21:45.960 --> 00:21:45.960
So in this case,
utility would match disk utility because

00:21:45.960 --> 00:21:45.960
there's a word that looks like utility.

00:21:45.960 --> 00:21:45.960
But parity is important.

00:21:45.960 --> 00:21:45.960
So if you're using a word
that looks like utility,

00:21:45.960 --> 00:21:45.960
you're going to have to match
disk utility with the value of

00:21:45.960 --> 00:21:45.960
the item that you're evaluating.

00:21:45.960 --> 00:21:48.460
but Paris would not match comparison.

00:21:48.460 --> 00:21:51.240
Even though Paris is in there
in the middle of the word,

00:21:51.250 --> 00:21:52.410
it's not a whole word itself.

00:21:52.460 --> 00:21:57.840
And the W modifier is implied
for KMDAtemTextContent in

00:21:57.840 --> 00:22:00.580
Tiger as well as in the developer
preview that you have today,

00:22:00.580 --> 00:22:03.320
but it might not be so in the future,
so be aware of that when you're

00:22:03.410 --> 00:22:04.550
structuring your queries.

00:22:04.600 --> 00:22:07.190
So here's a couple example queries.

00:22:07.200 --> 00:22:08.380
The first one's pretty easy.

00:22:08.380 --> 00:22:11.120
This is just find all documents
where the number of pages is

00:22:11.120 --> 00:22:12.120
greater than or equal to 100.

00:22:12.120 --> 00:22:14.560
You can also search in arrays.

00:22:14.720 --> 00:22:17.960
We have array-valued
attributes in Spotlight.

00:22:17.960 --> 00:22:21.460
So in this case,
KMDAtemAuthors is an array-valued type.

00:22:21.550 --> 00:22:22.960
You can have many authors for a document.

00:22:22.960 --> 00:22:29.560
So this will find any item where one
or more of the authors is Jonah Petri.

00:22:29.560 --> 00:22:35.680
So the way that we decide if something
matches or not in an array situation is

00:22:35.680 --> 00:22:39.020
if any of the items in the array match,
then we consider the whole

00:22:39.110 --> 00:22:40.680
attribute to have matched.

00:22:40.680 --> 00:22:43.640
And the bottom one is the
typical Spotlight menu query.

00:22:43.640 --> 00:22:46.700
If you typed... WWDC into
the Spotlight menu,

00:22:46.700 --> 00:22:49.040
this is the query it would produce.

00:22:49.040 --> 00:22:50.510
So let me walk you through
this pretty quickly.

00:22:50.540 --> 00:22:57.360
The star on the left, remember,
means search all metadata for WWDC star,

00:22:57.360 --> 00:23:02.540
so any words that start with WWDC,
and CDW, so case-insensitive,

00:23:02.540 --> 00:23:04.730
diacritic-insensitive, and word-based.

00:23:04.740 --> 00:23:07.440
And also the same thing for text content.

00:23:07.510 --> 00:23:09.640
Text content is not implied by star.

00:23:09.640 --> 00:23:13.840
That's a little subtle,
but you can see that in any

00:23:13.840 --> 00:23:14.480
of the queries that we have.

00:23:14.480 --> 00:23:17.240
So this is basically what
the Spotlight menu does.

00:23:17.240 --> 00:23:22.070
So this is basically going to
find any document where WWDC is

00:23:22.100 --> 00:23:26.480
the start of any word anywhere,
which is sort of why Spotlight is cool.

00:23:26.480 --> 00:23:28.470
So here's a couple more queries.

00:23:28.580 --> 00:23:30.480
Just quickly, I'm not going to spend
much more time on this,

00:23:30.480 --> 00:23:33.480
but this is maybe to whet your appetite
for what you can do in your app.

00:23:33.480 --> 00:23:37.040
So here's a query that will find all
images with a DPI of greater than or

00:23:37.040 --> 00:23:39.480
equal to 300 and have an alpha channel.

00:23:39.480 --> 00:23:42.480
Maybe you've got a 3D app and
you're looking for textures.

00:23:42.480 --> 00:23:44.360
The second one will find
all the sound effects,

00:23:44.410 --> 00:23:47.360
matching thunder from one
to five seconds in duration.

00:23:47.360 --> 00:23:50.360
Good for an audio editing app, right?

00:23:51.650 --> 00:23:56.470
All right, so hopefully that gave you
some incentive to use this API.

00:23:56.550 --> 00:23:57.900
So on to how to actually use it.

00:23:57.920 --> 00:24:00.850
The first thing you need to do
is to create an MD Query ref,

00:24:00.850 --> 00:24:03.360
then register a callback
for your updates,

00:24:03.360 --> 00:24:05.030
and then execute the query.

00:24:05.040 --> 00:24:07.690
Creating an MD Query ref is pretty easy.

00:24:07.800 --> 00:24:12.040
MD Query create with the query
string as the second parameter.

00:24:14.310 --> 00:24:19.520
Then register a callback for
these specific notifications.

00:24:19.520 --> 00:24:24.730
There are three notifications that
Spotlight sends to the Notification

00:24:24.770 --> 00:24:27.020
Center as it evaluates the query.

00:24:27.020 --> 00:24:29.780
The first one is the KMD Query
Progress Notification,

00:24:29.790 --> 00:24:33.120
and this is sent while results
are being gathered by the server.

00:24:33.120 --> 00:24:36.250
The second one is the KMD Query
Did Finish Notification,

00:24:36.250 --> 00:24:39.180
and this is sent once when
the query is completed.

00:24:39.460 --> 00:24:42.260
And the third one is the
KMD Query Did Update Notification,

00:24:42.260 --> 00:24:44.750
and this lets you know that
some aspect of the query has

00:24:44.770 --> 00:24:46.460
updated after it's finished.

00:24:46.460 --> 00:24:49.430
This is only really sent when
you've asked that the query update

00:24:49.570 --> 00:24:52.680
you after it's finished with
its initial results gathering.

00:24:52.680 --> 00:24:55.310
One thing to be aware of
is that new in Leopard,

00:24:55.370 --> 00:24:58.920
because we're allowing these
servers and other high-latency

00:24:58.920 --> 00:25:03.270
sources to be searched,
it's possible to get updates on

00:25:03.270 --> 00:25:08.760
your query before some stores
in your query have finished.

00:25:09.360 --> 00:25:11.280
So this shouldn't matter
to too many people,

00:25:11.370 --> 00:25:12.500
but just be aware of that.

00:25:12.580 --> 00:25:14.400
And again,
that update notification is only

00:25:14.400 --> 00:25:15.720
sent when you've asked for it.

00:25:15.800 --> 00:25:19.090
And the way you ask for it is
while you execute the query,

00:25:19.110 --> 00:25:21.440
calling mdquery execute.

00:25:21.480 --> 00:25:25.800
You can see there,
we had our query ref from before.

00:25:25.800 --> 00:25:29.060
And the first parameter is
the query you want to execute,

00:25:29.070 --> 00:25:31.120
and the second parameter has these flags.

00:25:31.120 --> 00:25:35.190
And if you pass the
KMD Query Synchronous flag,

00:25:35.220 --> 00:25:39.260
that means the call is going to block
until all the query results are done.

00:25:39.260 --> 00:25:42.560
Or otherwise,
it would return immediately and only

00:25:42.560 --> 00:25:45.260
do the notification callbacks for you.

00:25:45.410 --> 00:25:49.260
The other flag you can pass is
the KMD Query Wants Updates.

00:25:49.260 --> 00:25:52.010
And that's the one I mentioned
before that means that your

00:25:52.010 --> 00:25:55.060
query is going to be live,
meaning that if the user creates a

00:25:55.060 --> 00:25:58.110
new document that matches your query,
you will get notified that a

00:25:58.110 --> 00:25:59.260
new document has been added.

00:25:59.260 --> 00:26:03.260
Or if the user alters a document such
that it doesn't match your query anymore,

00:26:03.260 --> 00:26:06.540
that document will fall out of
the result set and you'll get one

00:26:06.540 --> 00:26:08.430
of these update notifications.

00:26:08.700 --> 00:26:11.700
So the way that you iterate
the result set is pretty easy.

00:26:11.700 --> 00:26:15.220
You call mdQueryGetResultsCount,
and that will return a count

00:26:15.230 --> 00:26:17.180
for how many results there are.

00:26:17.200 --> 00:26:23.240
Then you call mdQueryGetResultAtIndex
inside a for loop to get

00:26:23.330 --> 00:26:27.140
each item in the query,
and then you process the items

00:26:27.160 --> 00:26:30.080
probably using the MD item
API as we discussed before.

00:26:31.180 --> 00:26:35.830
There's one thing to be thinking about
when you're doing this is that if you're

00:26:35.950 --> 00:26:40.420
doing this on a thread separate from
the one that the query is running on,

00:26:40.420 --> 00:26:43.940
you have to be careful
about thread safety.

00:26:43.940 --> 00:26:46.950
And the way that we allow you
to do this is that we have

00:26:47.110 --> 00:26:51.160
these... So what I mean by that,
actually, is that the results that can

00:26:51.160 --> 00:26:54.680
change out from under you,
and this is not a thread-safe object.

00:26:54.680 --> 00:27:00.100
We're not going to try to, I don't know,
have this count update all the time.

00:27:00.520 --> 00:27:02.760
It's just, you know,
you have to be careful.

00:27:02.760 --> 00:27:05.240
And so the way that we allow
you to be careful is we have

00:27:05.240 --> 00:27:07.920
this mdQueryDisableUpdates
and mdQueryEnableUpdates

00:27:07.920 --> 00:27:09.360
calls that you can make.

00:27:09.360 --> 00:27:11.920
And if you bracket your
loop with these calls,

00:27:11.920 --> 00:27:16.430
you can be sure that the result set won't
be changing while you're iterating it.

00:27:16.500 --> 00:27:21.040
So that's how you
prevent threading errors.

00:27:22.750 --> 00:27:26.410
So a couple things that you can do
with mdquery that are sort of advanced.

00:27:26.480 --> 00:27:30.050
The first thing you can do
is you can use search scopes.

00:27:30.110 --> 00:27:34.580
And this scopes your search to a specific
subdirectory or set of subdirectories.

00:27:34.620 --> 00:27:36.580
That's mdquery/searchscope.

00:27:37.130 --> 00:27:38.340
You can also do sorting.

00:27:38.340 --> 00:27:39.940
All this is covered in the API,
by the way.

00:27:39.980 --> 00:27:43.920
Please come and see us in the
lab if I'm going too fast.

00:27:44.190 --> 00:27:46.060
You can also use sorting,
and that's the fourth

00:27:46.190 --> 00:27:48.010
parameter MDQuery creates,
you can see there,

00:27:48.030 --> 00:27:50.540
is a CFRARef of attribute names.

00:27:50.590 --> 00:27:54.810
And it's also possible if simple
ascending search is not what you want,

00:27:54.810 --> 00:27:57.880
to provide your own custom
sort comparator using

00:27:57.890 --> 00:27:59.750
MDQuery set sort comparator.

00:27:59.980 --> 00:28:02.670
The other thing that you can do with
the sorted attributes is that you

00:28:02.670 --> 00:28:04.420
can use them to prefetch attributes.

00:28:04.470 --> 00:28:07.550
This is very good for performance if
you know that you're going to be getting

00:28:07.550 --> 00:28:10.790
at these attributes to use them every
single time you go through your array.

00:28:10.800 --> 00:28:14.580
What I mean by that is that if you
were going to be using MD item copy

00:28:14.580 --> 00:28:19.540
attributes to copy the attributes out of
your item as you're processing each one,

00:28:19.540 --> 00:28:24.100
each call that you do with that
involves a message down to the Spotlight

00:28:24.100 --> 00:28:26.700
server and all the way back up to you.

00:28:26.700 --> 00:28:28.500
That can be very performance intensive.

00:28:28.500 --> 00:28:33.300
If you use your sort attributes
as prefetched attributes,

00:28:33.300 --> 00:28:36.520
you can basically avoid that
round trip and it's very,

00:28:36.520 --> 00:28:38.860
very fast to get at these attributes.

00:28:38.860 --> 00:28:42.580
The way you get at the
prefetched attributes is using,

00:28:42.700 --> 00:28:46.450
when you're in your for loop,
use MD query get attribute

00:28:46.520 --> 00:28:48.540
value of result at index.

00:28:48.540 --> 00:28:51.730
It's kind of a mouthful,
but that'll return you, in this case,

00:28:51.780 --> 00:28:55.560
the KMDI item content type if you had
added that to your sort attributes.

00:28:55.560 --> 00:28:56.680
You can see there.

00:28:56.700 --> 00:29:00.690
value is now, say, public.data.

00:29:01.560 --> 00:29:04.290
So some quick performance tips,
how to make Spotlight the

00:29:04.290 --> 00:29:05.690
fastest you can in your app.

00:29:05.790 --> 00:29:07.940
The data store is optimized
for the typical Spotlight menu

00:29:07.940 --> 00:29:09.260
case that we went over before.

00:29:09.260 --> 00:29:12.990
Case and diacritic
insensitive search is fast.

00:29:12.990 --> 00:29:15.640
Word prefix search is fast,
and that means you have a

00:29:15.660 --> 00:29:18.280
star on the end of the word,
not at the beginning.

00:29:18.280 --> 00:29:21.030
And the word-based search is fast.

00:29:21.030 --> 00:29:23.830
So that query that we went over
for WWDC for the Spotlight menu

00:29:23.840 --> 00:29:26.530
case before is a very fast query,
and if you structure your

00:29:26.530 --> 00:29:29.440
queries after this query,
I think you'll find that you get very

00:29:29.470 --> 00:29:31.480
good performance out of Spotlight.

00:29:31.500 --> 00:29:34.340
If you're not finding good
performance out of Spotlight,

00:29:34.390 --> 00:29:36.500
maybe you're doing some of these things.

00:29:36.500 --> 00:29:39.270
The first thing to be aware of
is that file system attributes

00:29:39.270 --> 00:29:40.840
are not indexed by Spotlight.

00:29:40.840 --> 00:29:44.090
Now,
those are the ones that start kmditemfs.

00:29:44.130 --> 00:29:46.980
Maybe kmditemfs name is a good example.

00:29:46.980 --> 00:29:50.000
These are not indexed,
which means that we have to fall

00:29:50.000 --> 00:29:53.970
back to a traditional file system
walk to find these things for you.

00:29:53.970 --> 00:29:56.880
So if you were searching
for kmditemfs name,

00:29:56.880 --> 00:30:01.280
maybe you should be searching
for kmditem display name instead.

00:30:01.500 --> 00:30:06.160
The other thing to be aware of is
that path scoping can be very slow,

00:30:06.170 --> 00:30:11.300
because we have to resolve the path
for every item before we can check

00:30:11.320 --> 00:30:15.380
to see if it's in that subdirectory
hierarchy that you provided.

00:30:15.380 --> 00:30:20.270
And you may think that you're doing us a
favor by scoping to a small subdirectory,

00:30:20.280 --> 00:30:23.770
but really check your
performance with the whole drive,

00:30:23.770 --> 00:30:26.400
because that actually may be faster.

00:30:26.400 --> 00:30:29.200
The exception to this rule
is a little counterintuitive.

00:30:29.200 --> 00:30:34.170
The scoping to... a query to the root
of a volume is actually very fast.

00:30:34.180 --> 00:30:36.600
So just something to be aware of.

00:30:36.620 --> 00:30:40.840
And if you're having any
performance problems with Spotlight,

00:30:40.840 --> 00:30:43.860
or if you just want some advice,
please come to the lab,

00:30:43.860 --> 00:30:44.960
because we're happy to help you.

00:30:47.700 --> 00:30:51.430
So now I'm going to quickly cover
document lineage and what this is.

00:30:51.450 --> 00:30:54.100
This is a new feature that
we're trying out for Leopard.

00:30:54.100 --> 00:30:57.730
And this is a way for you
to find multiple copies of a

00:30:57.730 --> 00:31:00.200
document within your system.

00:31:00.960 --> 00:31:04.770
And what I mean by way of example is,
let's say I'm writing a novel.

00:31:04.780 --> 00:31:08.010
And so I've got this novel
that I'm typing up in TextEdit.

00:31:08.010 --> 00:31:09.500
And I'm writing and I'm
writing and I'm writing.

00:31:09.500 --> 00:31:11.250
And I decide, hey, this is pretty good.

00:31:11.250 --> 00:31:13.200
Let me call this my first draft.

00:31:13.200 --> 00:31:17.520
And so I do a save as in
the TextEdit interface.

00:31:17.520 --> 00:31:20.050
And I save another copy of my document.

00:31:20.050 --> 00:31:22.390
And I call it finished first draft.

00:31:22.490 --> 00:31:24.220
Well,
now I have two copies of this document.

00:31:24.220 --> 00:31:25.700
Maybe they're different.

00:31:25.700 --> 00:31:28.020
Maybe I continue to
work on my first copy.

00:31:28.020 --> 00:31:32.160
And then maybe I decide I want
to send my finished first draft

00:31:32.160 --> 00:31:34.050
to my editor for her to look at.

00:31:34.050 --> 00:31:35.520
And so I email it to her.

00:31:35.520 --> 00:31:36.800
And it comes back.

00:31:36.800 --> 00:31:39.670
And now I've got a third
copy with her comments.

00:31:39.770 --> 00:31:43.820
And so you can see this sort of workflow
develops a family of documents that

00:31:43.850 --> 00:31:45.810
aren't exact copies of each other.

00:31:45.810 --> 00:31:47.360
But they're definitely related.

00:31:47.360 --> 00:31:51.750
And even further than that,
maybe I've integrated those

00:31:51.750 --> 00:31:55.800
changes from the commented first
draft into my original document.

00:31:55.800 --> 00:31:58.320
And so you can see there's
this complicated relationship

00:31:58.320 --> 00:31:59.900
in this document family.

00:31:59.900 --> 00:32:02.840
And we really think it's going
to be great if users could find

00:32:02.840 --> 00:32:05.030
these documents as a family,
as a group.

00:32:05.080 --> 00:32:08.320
And we want to enable this in Leopard.

00:32:08.420 --> 00:32:17.370
But what we need to enable it is
a little bit of help from you.

00:32:17.370 --> 00:32:17.370
And what I mean by that is that

00:32:17.600 --> 00:32:21.650
We need some help from you in the
Save As case or when you are moving

00:32:21.650 --> 00:32:26.090
documents around in a way that we
can't understand implicitly from

00:32:26.090 --> 00:32:27.390
what you're doing on the file system.

00:32:27.400 --> 00:32:31.740
And so in order to get this cooperation,
we built it into NSDocument.

00:32:31.740 --> 00:32:34.900
So if you're using NSDocument
for your application,

00:32:34.900 --> 00:32:36.600
you are basically all set.

00:32:36.660 --> 00:32:39.490
If you want to get this
functionality in the Leopard preview,

00:32:39.490 --> 00:32:41.080
you have to turn on this default.

00:32:41.140 --> 00:32:44.100
Defaults write dash G.

00:32:44.100 --> 00:32:47.180
NSDocument should write lineages, yes.

00:32:47.500 --> 00:32:50.460
And come see us in the lab if
you want to work with this.

00:32:50.460 --> 00:32:54.060
In other cases,
we need you to use the MDLineage

00:32:54.060 --> 00:32:57.980
APIs in order to mark this file
as needing lineage tracking.

00:32:59.670 --> 00:33:05.320
And the way that you do that,
for instance, in the initial save case,

00:33:05.320 --> 00:33:10.040
is you need to create a lineage for
the document using MDLineageCreate,

00:33:10.040 --> 00:33:13.480
and that will create a new lineage,
a new unique lineage for this document.

00:33:13.480 --> 00:33:16.110
And then you set it on the
file that you just wrote out.

00:33:16.120 --> 00:33:19.080
And please do this only
for user documents.

00:33:19.080 --> 00:33:22.760
We've tried opting everything in
the system into the lineage system,

00:33:22.780 --> 00:33:26.840
but it ends up being a pretty big burden,
so we don't really want to do that.

00:33:28.040 --> 00:33:31.960
So if you're saving a user document,
do something like this to mark the

00:33:31.960 --> 00:33:34.260
file as belonging to this new lineage.

00:33:34.320 --> 00:33:37.520
And then that lineage will track the
file as it moves around in the system.

00:33:37.540 --> 00:33:42.110
The other time that we need your
help is if you're doing a save as.

00:33:42.140 --> 00:33:45.190
We need to mark this new file
that's been created somewhere on

00:33:45.200 --> 00:33:48.440
the file system as being related
to the original file in order for

00:33:48.440 --> 00:33:50.260
them to be found as a group later.

00:33:50.260 --> 00:33:55.900
And the way that you do that is that you
use MDLineageCreate branch from file.

00:33:56.560 --> 00:34:00.840
To create a new lineage that is marked
as a branch from the original file.

00:34:00.840 --> 00:34:03.980
And then you set that new
lineage on the document.

00:34:03.980 --> 00:34:08.500
And this will allow us later
to mark these in the UI somehow

00:34:08.500 --> 00:34:10.840
as being related to each other.

00:34:12.190 --> 00:34:14.100
And allow users to find them.

00:34:14.100 --> 00:34:18.300
So, as I said before,
NSDocument has full-lineage

00:34:18.460 --> 00:34:20.700
support built into it,
so if you're using that,

00:34:20.700 --> 00:34:22.100
you don't need to worry about this.

00:34:22.100 --> 00:34:28.470
If you're not using NSDocument and
you're doing safe-save style writing

00:34:28.520 --> 00:34:31.940
out of documents where you write
out a temp file and then you move

00:34:31.940 --> 00:34:37.280
it over the file that was originally
there so that you have atomic saves,

00:34:37.280 --> 00:34:40.100
please use this FSReplaceObject API.

00:34:40.100 --> 00:34:43.160
And the reason that you might want
to use this is that not only will it

00:34:43.160 --> 00:34:46.480
preserve the lineage on the document,
but it will also preserve

00:34:46.480 --> 00:34:50.320
other things on the document,
such as other extended attributes or

00:34:50.450 --> 00:34:54.100
access control lists that may be set.

00:34:54.120 --> 00:34:57.340
And I know a lot of you have written
your own code because we haven't provided

00:34:57.340 --> 00:35:00.070
a function that did just this before,
but this is really good that we're

00:35:00.070 --> 00:35:01.100
providing this now in Leopard.

00:35:01.100 --> 00:35:07.100
This works for document bundles as well
as documents as well as plain files.

00:35:07.100 --> 00:35:08.100
And it basically works as atomically
similar to what we're doing in the API.

00:35:08.100 --> 00:35:15.040
And so you don't really have to
figure any of this stuff out anymore.

00:35:15.160 --> 00:35:18.280
If you want more information on that,
come to the lab and we can

00:35:18.280 --> 00:35:20.090
direct you to the right person.

00:35:20.120 --> 00:35:23.630
But if you can't use either of these,
then you've got to manually

00:35:23.630 --> 00:35:25.100
maintain the lineage.

00:35:25.150 --> 00:35:29.100
And the way that you do that is
just another little lineage API.

00:35:29.100 --> 00:35:32.510
If you're writing out your temp file,
before you move it

00:35:32.510 --> 00:35:36.100
over the original file,
call MDLineageCreateFromFile.

00:35:36.100 --> 00:35:39.300
This will copy the lineage
off of the existing file,

00:35:39.300 --> 00:35:42.090
the old file that
hasn't been deleted yet.

00:35:42.240 --> 00:35:47.190
And then once you've moved the file over,
call MDLineageSetOnFile,

00:35:47.190 --> 00:35:49.500
which will replace the lineage
on the new file with the

00:35:49.500 --> 00:35:51.100
lineage of the original file.

00:35:51.100 --> 00:35:55.060
And that will maintain the lineage
and allow these documents to

00:35:55.060 --> 00:35:57.100
be found as a family later on.

00:35:57.100 --> 00:35:59.670
So I think the bottom line
for that is if you can,

00:35:59.670 --> 00:36:02.770
please use FSReplaceObject
or NSDocument because it does

00:36:02.770 --> 00:36:04.100
all of this for you for free.

00:36:04.100 --> 00:36:08.760
But we want to provide these APIs so that
you can do it in your app if you've got

00:36:08.760 --> 00:36:11.100
your own custom code that's doing saving.

00:36:12.280 --> 00:36:16.270
So with that,
I'm going to turn this over to

00:36:16.270 --> 00:36:20.320
Toby for a look at Quick Look.

00:36:25.650 --> 00:36:27.600
Thanks, Jonah.

00:36:27.630 --> 00:36:29.480
Hi, I'm Toby Paterson.

00:36:29.480 --> 00:36:34.490
I manage the Quick Look team,
and unsurprisingly,

00:36:34.500 --> 00:36:36.980
I'm going to tell you a little
bit about Quick Look today.

00:36:36.980 --> 00:36:40.700
So we're going to cover the
basic architecture of Quick Look.

00:36:40.700 --> 00:36:44.140
We're going to talk about a
little bit of terminology.

00:36:44.140 --> 00:36:46.820
We're going to find out what
a Quick Look plugin does

00:36:46.820 --> 00:36:48.350
and how you can write one.

00:36:49.220 --> 00:36:51.050
First, what is Quick Look?

00:36:51.100 --> 00:36:55.070
Quick Look is a technology for
providing document previews that

00:36:55.120 --> 00:36:57.200
we're building into Leopard.

00:36:57.200 --> 00:37:00.840
You saw an introduction to the
Quick Look preview panel if you were

00:37:00.870 --> 00:37:04.400
at the keynote session yesterday,
the State of the Union.

00:37:04.400 --> 00:37:07.770
We're going to talk a little
bit about what goes behind that,

00:37:07.840 --> 00:37:11.720
how we start with the document,
feed it into the Quick Look system,

00:37:11.720 --> 00:37:14.620
and pop it out the end
in the preview panel.

00:37:14.620 --> 00:37:19.200
The goal of Quick Look is to
help you find your documents.

00:37:19.220 --> 00:37:20.080
We're going to talk about how
to build documents more quickly.

00:37:20.080 --> 00:37:23.870
And to that end,
we're building the panel into Spotlight,

00:37:23.870 --> 00:37:26.500
into Time Machine, and into Finder.

00:37:26.500 --> 00:37:29.650
There's other places where
Quick Look can help out.

00:37:29.720 --> 00:37:32.940
If you're using File Sync
to synchronize your iDisk on

00:37:33.020 --> 00:37:37.110
.Mac with your local computer,
then occasionally you may notice that

00:37:37.110 --> 00:37:41.030
you get conflicts if you modify the
same file on two different computers.

00:37:41.040 --> 00:37:45.210
Quick Look can help provide more
information in the conflict resolver

00:37:45.300 --> 00:37:47.720
panel than we give you today in Tiger.

00:37:49.700 --> 00:37:53.800
So we kind of bandied the term previews
about a little bit generically,

00:37:53.800 --> 00:37:58.500
but we actually have two very specific
definitions that we talk about.

00:37:58.500 --> 00:38:02.330
A thumbnail is a static image
that gives you a hint as to

00:38:02.330 --> 00:38:04.610
the contents of the document.

00:38:04.770 --> 00:38:08.150
It's not too rich,
but it provides a bit more information

00:38:08.260 --> 00:38:10.170
than just the document icon.

00:38:10.450 --> 00:38:14.080
Thumbnails are used inside a Spotlight.

00:38:14.080 --> 00:38:16.450
In the results list,
we display the little icon

00:38:16.600 --> 00:38:17.960
next to all of the items.

00:38:17.960 --> 00:38:22.400
And if you click on the info button,
we expand inline to give you

00:38:22.400 --> 00:38:25.560
a larger icon and present a
little bit more information,

00:38:25.560 --> 00:38:27.920
a little bit more metadata
about the document.

00:38:28.240 --> 00:38:32.460
Finder, of course,
uses thumbnails inside in the icon view.

00:38:32.460 --> 00:38:36.560
A preview is designed to
give the user a more faithful

00:38:36.560 --> 00:38:39.390
representation of the document.

00:38:39.390 --> 00:38:43.920
It's a richer format, PDF,
QuickTime movies, etc.

00:38:43.920 --> 00:38:47.190
We want the user to be able to
navigate through their document.

00:38:47.270 --> 00:38:50.730
If it's a keynote presentation,
we want them to be able to navigate

00:38:50.740 --> 00:38:54.640
through the slides to find exactly
the one that they're looking for.

00:38:54.640 --> 00:38:56.480
But we draw the line at editing.

00:38:56.480 --> 00:38:58.210
If you want to edit it, you open it up.

00:38:58.220 --> 00:39:05.180
Previews are displayed in the context
of the QuickLook preview panel.

00:39:06.000 --> 00:41:24.800
[Transcript missing]

00:41:25.170 --> 00:41:27.690
So, the alternative,
if you don't want to pay the

00:41:27.760 --> 00:41:31.010
cost of those trade-offs,
or if your document is not a bundle,

00:41:31.090 --> 00:41:33.290
is that you can write a
Quick Look plugin to create

00:41:33.810 --> 00:41:37.330
thumbnails and previews on demand.

00:41:37.560 --> 00:41:40.380
A Quick Look plugin is a CFPlugin.

00:41:40.380 --> 00:41:41.410
It implements a simple interface.

00:41:41.490 --> 00:41:44.810
There's two functions:
one to create a thumbnail,

00:41:44.810 --> 00:41:46.490
one to create a preview.

00:41:46.500 --> 00:41:50.480
And you use API in the
Quick Look framework to provide those

00:41:50.570 --> 00:41:53.490
thumbnails and previews to the client.

00:41:53.720 --> 00:41:57.120
Your plugin is loaded into
the Quick Look Daemon.

00:41:57.120 --> 00:42:00.090
The Quick Look Daemon serves to
provide a bit of a sandbox for you.

00:42:00.090 --> 00:42:02.490
No offense,
but we don't particularly want

00:42:02.490 --> 00:42:05.490
to load all of your code and all
of your libraries into Finder,

00:42:05.490 --> 00:42:08.520
into Spotlight, into Time Machine,
into all of these places.

00:42:08.800 --> 00:42:11.390
And you probably don't want to
be running in there yourself.

00:42:11.400 --> 00:42:14.480
It's a little bit hostile if
everybody's all packing in there,

00:42:14.480 --> 00:42:17.280
competing for resources,
so on and so forth.

00:42:17.280 --> 00:42:20.810
So we've created this Quick Look Daemon
that will fire up to load your

00:42:20.810 --> 00:42:23.590
plugin and run you in a safe,
known environment.

00:42:23.600 --> 00:42:27.900
When somebody comes along and asks
for a thumbnail or for a preview,

00:42:27.940 --> 00:42:31.110
we'll find your plugin,
we'll load your plugin,

00:42:31.110 --> 00:42:34.680
and we'll ask it to give us
a thumbnail or a preview.

00:42:36.520 --> 00:42:39.740
So, how do you write a Quick Look plugin?

00:42:39.740 --> 00:42:41.700
There's four basic steps.

00:42:41.700 --> 00:42:45.820
You start with the Xcode template,
you edit the Info.plist,

00:42:45.820 --> 00:42:49.490
you implement the generate thumbnail,
generate preview functions,

00:42:49.590 --> 00:42:50.640
and you install your plugin.

00:42:50.640 --> 00:42:53.010
If you've written a
Spotlight plugin before,

00:42:53.010 --> 00:42:55.140
this should be pretty familiar for you.

00:42:55.140 --> 00:42:57.170
The actual mechanism is identical.

00:42:59.700 --> 00:43:02.880
So let's start with the Xcode template.

00:43:02.880 --> 00:43:06.690
We provide a basic boilerplate for
you so that all you need to do is just

00:43:06.690 --> 00:43:08.400
go and fill in some of the blanks.

00:43:08.400 --> 00:43:13.390
The boilerplate has an Info.plist,
it's got an implementation of Ion Known,

00:43:13.390 --> 00:43:16.340
all of the factory methods,
so on and so forth.

00:43:16.790 --> 00:43:18.720
There's two blanks that
you have to fill in.

00:43:18.720 --> 00:43:22.640
The first of these is the
Info.plist to associate your

00:43:22.640 --> 00:43:25.110
plugin with your document type.

00:43:25.170 --> 00:43:28.900
So you just specify one or more
UTIs in the LS item content

00:43:28.970 --> 00:43:31.580
types there in your Info.plist.

00:43:31.620 --> 00:43:34.940
The next blanks that you have
to fill in are the two simple

00:43:34.990 --> 00:43:39.180
functions to create a thumbnail
and to create a preview on demand.

00:43:39.180 --> 00:43:42.710
We give you the URL of the
document that we're asking for

00:43:42.710 --> 00:43:46.210
a preview or thumbnail for,
content type.

00:43:46.260 --> 00:43:46.460
We give you the URL of the
document that we're asking for

00:43:46.460 --> 00:43:46.680
a preview or thumbnail for,
content type.

00:43:46.720 --> 00:43:50.800
of the document and a few other
options in the case of a thumbnail.

00:43:50.800 --> 00:43:53.670
How big do we want the thumbnail to be?

00:43:54.500 --> 00:43:58.430
You then turn around when we call
you and use the Quick Look framework

00:43:58.810 --> 00:44:02.630
to provide us with your
thumbnails or with your previews.

00:44:02.740 --> 00:44:06.480
In the case of the thumbnail,
if you've got a CG image ref somewhere,

00:44:06.480 --> 00:44:09.090
if you're using Core Image or
something like that to produce it,

00:44:09.190 --> 00:44:11.950
you can just give us the image directly.

00:44:12.080 --> 00:44:15.270
Alternatively,
we can give you a CG context into

00:44:15.270 --> 00:44:17.950
which you can do all of your drawing.

00:44:18.040 --> 00:44:21.720
When you're done your drawing,
you call flush context on up,

00:44:21.810 --> 00:44:25.710
and that's your cue to us to tell
us that the thumbnail's done.

00:44:25.860 --> 00:44:29.970
We can take that, create an image,
and pass it off to the client.

00:44:30.100 --> 00:44:33.900
Similarly, for previews,
there's two functions to create a

00:44:33.900 --> 00:44:35.960
CG context into which you can draw.

00:44:35.960 --> 00:44:40.290
The first of these creates an image,
and that's an image context.

00:44:40.350 --> 00:44:44.260
That's appropriate if your document's
just sort of a single-page type of thing.

00:44:44.260 --> 00:44:48.540
Alternatively, if you're something like
Keynote or OmniGraffle where

00:44:48.540 --> 00:44:51.400
you can create multiple pages,
you use the PDF.

00:44:51.400 --> 00:44:54.810
You can create a PDF context
and use the usual begin page,

00:44:54.820 --> 00:44:57.840
end page,
and create a multi-page document.

00:44:58.380 --> 00:45:00.810
You get your context,
you do your drawing into it,

00:45:00.810 --> 00:45:04.270
just like normal, and when you're done,
you flush the context.

00:45:04.280 --> 00:45:06.880
That tells us to take the preview,
package it up,

00:45:06.880 --> 00:45:09.180
and deliver it off to the preview panel.

00:45:11.220 --> 00:45:12.190
Installing your plugin?

00:45:12.190 --> 00:45:13.600
Also pretty straightforward.

00:45:13.600 --> 00:45:17.080
We use launch services so you can
stick it in a well-known location,

00:45:17.080 --> 00:45:19.580
like Library Quick Look if
you don't have an application.

00:45:19.580 --> 00:45:22.260
If you have an application,
we encourage you just to stick

00:45:22.260 --> 00:45:24.720
it in the application bundle,
as Jonah suggested for

00:45:24.720 --> 00:45:26.020
the Spotlight plugins.

00:45:26.020 --> 00:45:30.290
Now that being said,
that's actually not working right now.

00:45:30.300 --> 00:45:35.440
So in the seed build that you have today,
you need to explicitly tell us where to

00:45:35.500 --> 00:45:40.060
look for that preview using the default
that you can see on the screen there.

00:45:40.060 --> 00:45:41.890
Don't worry too much about the details.

00:45:41.900 --> 00:45:44.200
In the sample code
associated with this session,

00:45:44.200 --> 00:45:47.180
we've got a sample of
a Quick Look plugin,

00:45:47.190 --> 00:45:50.550
which documents in pretty good
detail what you need to do to get

00:45:50.550 --> 00:45:52.620
yourself up and running with this.

00:45:54.440 --> 00:45:57.190
I'm going to talk a little bit
about some advanced stuff now.

00:45:57.200 --> 00:46:01.320
Canceling requests, concurrency,
and a nod towards performance.

00:46:01.320 --> 00:46:04.860
Canceling requests is
pretty straightforward.

00:46:04.860 --> 00:46:08.420
Let's say the user's opened
up the Finder window,

00:46:08.420 --> 00:46:11.180
Finder's come off and asked
us for 10,000 thumbnails,

00:46:11.180 --> 00:46:13.120
and then the user closes the window.

00:46:14.300 --> 00:46:16.690
We've got our own fairly
advanced request management,

00:46:16.760 --> 00:46:19.980
so we're not going to fire off
all 10,000 requests at once,

00:46:19.980 --> 00:46:25.470
but we do try and sort of manage
multiple ones a handful at a time

00:46:25.480 --> 00:46:28.780
just to get greater parallelism.

00:46:28.780 --> 00:46:35.110
If your thumbnail generation or if your
preview generation takes a bit of time,

00:46:35.200 --> 00:46:39.210
there's ways that you can
either poll us to find out

00:46:39.210 --> 00:46:44.880
whether it's actually worthwhile
continuing to do the... request.

00:46:44.940 --> 00:46:47.650
Alternatively,
you can receive an asynchronous

00:46:47.700 --> 00:46:50.870
notification by implementing
two optional methods in the

00:46:50.980 --> 00:46:54.310
QuickLook plugin interface,
which we'll call out of band in

00:46:54.310 --> 00:46:57.420
another thread to let you know,
hey, pack up, go home,

00:46:57.490 --> 00:46:59.500
nobody's interested anymore.

00:46:59.500 --> 00:47:03.170
Out of the box, we're going to assume
you're not reentrant.

00:47:03.170 --> 00:47:05.260
It's just the safe thing to do.

00:47:05.280 --> 00:47:07.700
We would very much like
you to be reentrant,

00:47:07.700 --> 00:47:10.970
and so if you are,
just add this key into your Info.plist,

00:47:11.080 --> 00:47:14.280
and that tells us that we
can run multiple instances.

00:47:14.280 --> 00:47:16.940
If you're plugin in the
same QuickLook daemon,

00:47:16.940 --> 00:47:19.150
that's going to help the throughput.

00:47:19.250 --> 00:47:23.090
It's going to reduce the system overhead,
and everybody's going to be

00:47:23.090 --> 00:47:25.210
happier in the end because of that.

00:47:25.280 --> 00:47:30.310
Conversely, we assume the frameworks
that you use are reentrant.

00:47:30.460 --> 00:47:33.280
Now, in the event that you're
using a framework that other

00:47:33.280 --> 00:47:37.080
generators might likely be using,
which are not reentrant,

00:47:37.080 --> 00:47:41.370
you need to tell us about that by adding
this needs-to-be-run-in-the-main-thread

00:47:41.370 --> 00:47:43.120
key into your Info.plist.

00:47:43.160 --> 00:47:46.160
And that's our cue to know
that we should only run you

00:47:46.160 --> 00:47:50.020
in your own quick look daemon,
and we won't load you up with anyone

00:47:50.020 --> 00:47:52.130
else who has a similar flag set.

00:47:55.350 --> 00:48:00.320
On the performance front,
thumbnails need to be really, really,

00:48:00.320 --> 00:48:01.580
really fast.

00:48:01.590 --> 00:48:04.300
If it takes a long time
to generate thumbnails,

00:48:04.370 --> 00:48:05.490
we're going to make finder wait.

00:48:05.530 --> 00:48:07.470
Users are going to get aggravated.

00:48:07.510 --> 00:48:09.000
Everybody's unhappy.

00:48:09.000 --> 00:48:11.910
So you need to make a trade-off
there between the quality of the

00:48:11.910 --> 00:48:15.180
thumbnail that you generate and
the time it takes to generate it.

00:48:16.170 --> 00:48:19.000
Previews, on the other hand,
they just need to be fast.

00:48:19.000 --> 00:48:22.270
We're not going to fire off
hundreds of these simultaneously.

00:48:22.270 --> 00:48:24.920
It's usually done in
response to a user action.

00:48:24.920 --> 00:48:29.410
The Quick Look preview panel itself
supports asynchronous loading.

00:48:29.410 --> 00:48:32.420
So we can do that in the background,
but you still,

00:48:32.440 --> 00:48:35.800
you don't want to make the user
wait too long staring at the

00:48:35.800 --> 00:48:38.060
spinning progress button there.

00:48:38.060 --> 00:48:41.480
And so we think concurrency
is a good thing.

00:48:41.480 --> 00:48:46.040
We encourage you to support parallel
requests by being reentrant.

00:48:46.060 --> 00:48:50.230
Asynchronous cancellation so
that we can stop things when

00:48:50.320 --> 00:48:52.010
we don't need them anymore.

00:48:52.020 --> 00:48:55.220
So just a quick recap here then.

00:48:55.220 --> 00:48:56.560
The things you should remember.

00:48:56.560 --> 00:49:00.180
There's two kinds of Quick Look previews,
thumbnails and previews in

00:49:00.180 --> 00:49:01.960
varying degrees of richness.

00:49:01.960 --> 00:49:06.440
The native Quick Look preview
types that we support are images,

00:49:06.440 --> 00:49:11.640
text, PDF, HTML, rich text,
QuickTime movies, QuickTime audio.

00:49:11.640 --> 00:49:14.180
You can pre-generate your
previews and your thumbnails

00:49:14.420 --> 00:49:16.040
into your Quick Look previews.

00:49:16.060 --> 00:49:18.060
You can pre-generate
your document bundle.

00:49:18.060 --> 00:49:22.050
Or you can write a Quick Look plugin
to generate them on demand.

00:49:22.220 --> 00:49:26.140
So with that,
I'm going to hand over to Christy Warren,

00:49:26.140 --> 00:49:28.020
who's going to tell you
about Spotlight for help.

00:49:28.300 --> 00:49:29.820
Thank you.

00:49:36.420 --> 00:49:38.460
Thank you, Toby.

00:49:38.490 --> 00:49:40.540
I'm here to talk about
Spotlight for Help.

00:49:40.620 --> 00:49:44.440
How many of you attended the
State of the Union yesterday?

00:49:44.460 --> 00:49:46.260
About half of you.

00:49:46.320 --> 00:49:47.530
I'm Christy Warren.

00:49:47.530 --> 00:49:49.890
I'm the lead engineer on this feature.

00:49:49.980 --> 00:49:51.100
And what is Spotlight for Help?

00:49:51.190 --> 00:49:53.260
Well, it's a shortcut to the UI.

00:49:53.350 --> 00:49:57.060
It lets you access and invoke your
user interface via text search.

00:49:57.160 --> 00:50:01.580
How many of you have launched like
Photoshop or Pages or Word and couldn't

00:50:01.620 --> 00:50:06.120
find that menu right away and had
to go hunting through your menu bar?

00:50:07.640 --> 00:50:11.920
Or dug through preferences.

00:50:11.940 --> 00:50:14.380
I know I can set the
font inside a BB Edit,

00:50:14.380 --> 00:50:16.650
but for the life of me,
I can't find where to

00:50:16.720 --> 00:50:18.260
find that default font.

00:50:18.340 --> 00:50:21.220
So there's all this
great UI I want to use,

00:50:21.300 --> 00:50:22.860
but I can't find it.

00:50:22.910 --> 00:50:26.730
So we made this tool that lets you--

00:50:27.000 --> 00:50:28.000
Find it!

00:50:28.000 --> 00:50:33.820
Now, this works for menus out of the
box for both Carbon and Cocoa.

00:50:33.820 --> 00:50:37.490
Let me give you a quick
demo before we go on.

00:50:39.770 --> 00:50:42.320
So here's this novel that Jonah started.

00:50:42.550 --> 00:50:43.820
It was a dark and stormy night.

00:50:43.820 --> 00:50:48.780
And I'm going to continue with,
he looked at me, but then I go, you know,

00:50:48.780 --> 00:50:51.460
maybe I have a spelling problem here.

00:50:51.460 --> 00:50:55.540
So I'm going to go to, I could go hunting
through the menus going,

00:50:55.540 --> 00:50:58.200
hmm, where's the spelling commands?

00:50:58.200 --> 00:51:02.680
Or I could click here and bring
up our new search the UI field.

00:51:03.510 --> 00:51:08.560
And here if I type in spelling,
it'll populate the list below with

00:51:08.560 --> 00:51:10.350
various commands for spelling.

00:51:10.360 --> 00:51:14.980
And if I arrow down,
it'll indicate where it is in the UI.

00:51:14.980 --> 00:51:18.200
And as I arrow through,
it'll select different items.

00:51:18.200 --> 00:51:21.240
So in this case, I want to do spelling.

00:51:21.240 --> 00:51:23.850
And I hit enter.

00:51:24.230 --> 00:51:25.630
And it'll bring up the spelling dialing.

00:51:25.670 --> 00:51:29.380
So it's not only a way to find your UI,
it lets you access and

00:51:29.380 --> 00:51:31.130
execute it very quickly.

00:51:31.160 --> 00:51:35.200
So those of you who are keyboard jockeys
could have a lot of fun with this.

00:51:35.260 --> 00:51:38.210
So let's go back to the slides.

00:51:42.850 --> 00:51:46.120
Spotlight, for help,
goes beyond just searching menus.

00:51:46.120 --> 00:51:50.240
It can actually search your entire UI,
your preferences panels, windows,

00:51:50.350 --> 00:51:55.170
palettes, anything in your application,
with some restrictions,

00:51:55.170 --> 00:51:57.100
which we're going to deal with later.

00:51:57.100 --> 00:52:01.630
Developer adoption is
required to search other UI,

00:52:01.630 --> 00:52:02.740
however.

00:52:02.740 --> 00:52:05.280
So at a minimum,
you need to run this analysis tool

00:52:05.280 --> 00:52:09.360
and generate a custom index that's
built and stored with your application.

00:52:09.960 --> 00:52:12.010
This builds a persistent
model of your UI,

00:52:12.010 --> 00:52:14.310
and it can be used to
uncover these deeply buried

00:52:14.420 --> 00:52:16.230
features in your application.

00:52:18.070 --> 00:52:21.540
So to create an index,
you run your application under Xcode,

00:52:21.610 --> 00:52:25.160
and there's a new item in the
debug menu called Run Executable

00:52:25.250 --> 00:52:26.700
and Index UI for Help.

00:52:26.720 --> 00:52:32.940
For this seed version,
it doesn't do anything yet, but for GM,

00:52:32.940 --> 00:52:35.480
it'll actually do the
application probing.

00:52:35.480 --> 00:52:37.210
I'm going to give you a
preview of that right now.

00:52:37.240 --> 00:52:40.640
So please switch to the demo machine.

00:52:51.360 --> 00:52:56.200
So here's a little application I wrote
that gives some examples of hidden UI.

00:52:56.210 --> 00:52:59.970
I don't recommend you
design your app like this,

00:52:59.970 --> 00:53:02.030
with a lot of ugly controls and stuff.

00:53:02.320 --> 00:53:04.660
But stuff like this happens.

00:53:04.660 --> 00:53:09.820
Here's a tab view that mirrors a
preference panel in some applications.

00:53:09.840 --> 00:53:12.380
There's a top-level tab
view that you can select.

00:53:12.440 --> 00:53:14.720
And there's even a nested tab view.

00:53:14.750 --> 00:53:17.720
So how am I going to find my way around?

00:53:17.760 --> 00:53:19.710
So I'm going to quit that.

00:53:20.200 --> 00:53:24.760
And in Xcode,
I'm going to use our-- where is it?

00:53:24.760 --> 00:53:28.940
Under Debug,
Run Executable and Index UI for Help.

00:53:28.940 --> 00:53:32.360
And when I select that,
it's going to launch our application.

00:53:32.360 --> 00:53:34.980
And look, I'm not doing anything.

00:53:36.880 --> 00:53:39.670
What it does is it enumerates
all the visible UI,

00:53:39.680 --> 00:53:41.300
which starts with the menu bar.

00:53:41.340 --> 00:53:45.580
And for every menu item,
it fires off that menu item and sees

00:53:45.580 --> 00:53:48.650
if a window appears or something
else interesting that it can explore.

00:53:48.660 --> 00:53:51.500
In this case,
it found this tab view window,

00:53:51.500 --> 00:53:54.720
and it's going through and
trying all the things to see

00:53:54.720 --> 00:53:56.210
if they bring up other dialogs.

00:53:56.230 --> 00:53:58.740
So it can do a complete
search of your application.

00:53:58.740 --> 00:54:01.600
So it's running through.

00:54:01.600 --> 00:54:04.510
It'll finish in a second.

00:54:09.690 --> 00:54:14.360
And now that it's done,
we'll quit the app.

00:54:14.370 --> 00:54:17.470
And you'll see down here,
it added a file to your project.

00:54:17.530 --> 00:54:19.440
This is the index file.

00:54:19.540 --> 00:54:22.000
And this will get automatically
built with your application and

00:54:22.000 --> 00:54:23.840
stored in the resource bundle.

00:54:23.940 --> 00:54:26.020
So it's fairly easy to do.

00:54:26.020 --> 00:54:30.010
And now when we run the
application again...

00:54:38.770 --> 00:54:44.620
Now if I type "help" and I type,
let's say the word "common,"

00:54:44.690 --> 00:54:46.940
you'll see various entries came up.

00:54:46.940 --> 00:54:51.060
And if I arrow through them now,
you saw it brought up the window

00:54:51.060 --> 00:54:54.980
without doing anything and
pointed me to one of the controls,

00:54:54.980 --> 00:54:55.910
"common."

00:54:56.720 --> 00:54:58.800
Now it went to another one, another one.

00:54:58.800 --> 00:55:03.260
Now it brought up the other window,
and it'll even go within the tab

00:55:03.260 --> 00:55:06.000
view and reveal these things.

00:55:10.880 --> 00:55:12.800
So, I think that's pretty cool.

00:55:12.800 --> 00:55:19.050
Alright, let's go back to slides.

00:55:22.620 --> 00:55:26.830
So what do you need to do in order
to create an index for your app?

00:55:26.950 --> 00:55:29.960
Well,
you need to be friendly to the indexer.

00:55:30.120 --> 00:55:32.490
You need to make your
application accessible.

00:55:32.650 --> 00:55:37.360
And this has benefits beyond just
supporting Spotlight for help.

00:55:37.360 --> 00:55:42.820
It helps users that may have difficulty
using computers in various ways.

00:55:43.060 --> 00:55:46.750
And if you have a Carbon app,
there's two things we want you to do,

00:55:46.760 --> 00:55:51.380
which is to modernize event
handling and to move to HIView.

00:55:52.220 --> 00:55:54.240
So support help indexing,
there's kind of two issues

00:55:54.240 --> 00:55:55.280
you need to deal with.

00:55:55.440 --> 00:55:58.080
One is dangerous UI.

00:55:58.450 --> 00:56:01.480
Here I have my household application,
and it gives me three options.

00:56:01.480 --> 00:56:04.440
Erase my hard disk, launch rockets,
or open the doggy door.

00:56:04.440 --> 00:56:07.170
Well, clearly,
when I'm running this app analyzer,

00:56:07.200 --> 00:56:08.980
I don't want to do the first two.

00:56:08.980 --> 00:56:12.800
So we need a way to disable
that kind of UI temporarily

00:56:12.800 --> 00:56:15.360
while the analysis is going on.

00:56:15.360 --> 00:56:18.780
Another related thing is,
most apps launch,

00:56:18.780 --> 00:56:23.830
they put up a default document,
and that's kind of what we expect.

00:56:24.440 --> 00:56:27.310
If you put up a gallery or license
screens or something like that,

00:56:27.320 --> 00:56:30.560
we need a way to temporarily
not do that and put up a

00:56:30.560 --> 00:56:32.280
default document window instead.

00:56:34.250 --> 00:56:36.060
So how can we do this?

00:56:36.170 --> 00:56:40.760
Well, one simplistic way is we can
create a help index compile flag

00:56:40.950 --> 00:56:44.360
and use this flag to conditionally
compile out undesired code.

00:56:44.360 --> 00:56:49.170
However,
this is clumsy to test and maintain.

00:56:49.570 --> 00:56:53.550
So we decided to help you and
give you some Apple events in

00:56:53.550 --> 00:56:56.500
Core Event Class Apple Event.

00:56:56.500 --> 00:57:01.630
And these are sent, when the app launches
under this analyzer,

00:57:01.660 --> 00:57:04.490
it'll tell it to set up for app
analysis and you can respond to this,

00:57:04.500 --> 00:57:07.500
turn off all the undesirable UI.

00:57:07.500 --> 00:57:11.160
And then at the end it'll tell you
that it's done with this so you can

00:57:11.170 --> 00:57:13.490
restore your app to its normal state.

00:57:14.500 --> 00:57:19.800
And how many of you used
Apple Events before?

00:57:19.800 --> 00:57:21.120
Just a few of you?

00:57:21.190 --> 00:57:24.920
Well, the good news is this is all
the code you need in order to

00:57:24.920 --> 00:57:27.100
do this if you're a Cocoa app.

00:57:27.100 --> 00:57:30.430
You basically get a shared
Apple Event handler and you

00:57:30.430 --> 00:57:34.280
wire up selectors and targets
to handle these two events.

00:57:34.280 --> 00:57:38.770
So you could literally copy this code
as boilerplate and paste your code into

00:57:38.770 --> 00:57:41.140
the handle setup and handle finish.

00:57:42.180 --> 00:57:42.710
And you're done.

00:57:42.830 --> 00:57:46.050
You can do all your work from here.

00:57:47.600 --> 00:57:51.500
Now for accessibility,
one of the trickiest parts

00:57:51.500 --> 00:57:56.200
is many UI don't have
strings associated with them,

00:57:56.260 --> 00:57:58.160
such as a text field.

00:57:58.240 --> 00:58:02.960
In these cases,
when you search for "author," you

00:58:02.960 --> 00:58:07.500
would like it to allow you to go
right to that text field rather than

00:58:07.650 --> 00:58:11.090
have it highlight the word "author,"
because that's not very helpful.

00:58:11.180 --> 00:58:16.820
So we can figure this out for
simple cases such as a text field

00:58:16.820 --> 00:58:20.900
immediately to the right of the string.

00:58:21.000 --> 00:58:23.210
However, to work well,
you should implement these

00:58:23.210 --> 00:58:26.600
two accessibility attributes:
the title_UI_element attribute and the

00:58:26.600 --> 00:58:29.140
serves_as_title_for_UI_element attribute.

00:58:29.210 --> 00:58:34.730
And this will be good for users
who need accessibility as well.

00:58:35.200 --> 00:58:42.440
Now, to improve indexing, out of the box,
if I search for "spell," it'll find

00:58:42.450 --> 00:58:45.080
only the words containing "spelling."

00:58:45.300 --> 00:58:48.920
However, to give us more stuff to search,
if you implement these attributes,

00:58:48.920 --> 00:58:51.680
like the description attribute,
then we can search anything

00:58:51.860 --> 00:58:53.580
within that description.

00:58:53.580 --> 00:58:56.520
And that's very helpful.

00:58:56.540 --> 00:58:58.820
So for details on how
to get accessibility,

00:58:58.820 --> 00:59:01.040
please visit this link.

00:59:02.190 --> 00:59:05.450
So for Carbon,
if you want this app analyzer

00:59:05.460 --> 00:59:07.780
to work with your app,
you're going to need to modernize

00:59:07.780 --> 00:59:09.730
your event handling a little bit.

00:59:09.770 --> 00:59:12.190
The problem is if you
just do getNextEvent,

00:59:12.360 --> 00:59:16.170
handle the event yourself,
and process it,

00:59:16.310 --> 00:59:19.400
We don't get a chance to kind
of see what's going on and make

00:59:19.400 --> 00:59:24.040
the deductions we need to do
in order to build our index.

00:59:24.070 --> 00:59:28.120
So you should either do run
application event loop or install

00:59:28.120 --> 00:59:31.100
event handlers on menu item selection.

00:59:31.180 --> 00:59:34.400
And you can see this at this site.

00:59:34.460 --> 00:59:35.970
Finally,

00:59:36.400 --> 00:59:40.040
If you move your app to HIView,
we will get higher fidelity

00:59:40.040 --> 00:59:41.520
indexing of the UI.

00:59:41.520 --> 00:59:44.520
For example, those tab views and stuff
that we saw for Cocoa,

00:59:44.520 --> 00:59:46.950
that only works for Cocoa.

00:59:47.300 --> 00:59:50.300
But, you know, easily,
but if you implement HIB, you know,

00:59:50.440 --> 00:59:53.100
in the future as we move on,
we'll be able to do that for

00:59:53.100 --> 00:59:54.340
your Carbon apps as well.

00:59:54.340 --> 00:59:58.040
So please, you know, consider doing this.

00:59:59.670 --> 01:00:01.710
So to wrap up,
Spotlight for Help is a new

01:00:01.710 --> 01:00:03.520
way to access and learn the UI.

01:00:03.520 --> 01:00:07.060
It works your Carbon and
Cocoa out of the box,

01:00:07.060 --> 01:00:10.790
and hopefully this is a very
modest effort that you have to

01:00:10.790 --> 01:00:13.190
do to allow you to search other
UI within your application.

01:00:13.200 --> 01:00:16.800
So please run the tool and generate
a custom index when it's available,

01:00:16.800 --> 01:00:21.020
and implement some basic availability and
play well with the indexer if you can.

01:00:24.360 --> 01:00:28.380
So to wrap up, we have a call for action.

01:00:28.440 --> 01:00:31.950
If you have a custom document format,
please write a Spotlight plugin

01:00:31.950 --> 01:00:34.770
and a Quick Look plugin so you
can work with those cool new UIs.

01:00:34.780 --> 01:00:38.170
If you are not an
NS document-based application,

01:00:38.170 --> 01:00:41.150
you know,
you have a custom document type,

01:00:41.150 --> 01:00:46.680
please adopt the document and lineage
APIs and at minimum use FS Replace object

01:00:46.680 --> 01:00:50.840
so that we can track all the metadata
and other information as we go along.

01:00:51.300 --> 01:00:54.220
And adopt Spotlight
for help in your users.

01:00:54.220 --> 01:00:56.900
If you do all these things,
your users will love you.

01:00:56.900 --> 01:00:58.280
Thank you very much.

01:01:08.010 --> 01:01:10.820
So we have these two
labs tomorrow at 5:00 PM,

01:01:10.820 --> 01:01:14.520
and we have one on Thursday at 2:00 PM.

01:01:14.760 --> 01:01:18.460
And you can contact Matthew Formica
for more information.

01:01:18.460 --> 01:01:19.520
He's our evangelist.

01:01:19.610 --> 01:01:19.980
Thank you.