WEBVTT

00:00:10.390 --> 00:00:11.300
Good morning.

00:00:11.300 --> 00:00:14.980
I'm happy to be here to tell you
all about the Leopard Server and

00:00:14.980 --> 00:00:16.370
how it's an excellent web platform.

00:00:16.390 --> 00:00:19.320
It's got an unprecedented level
of integration between Apache,

00:00:19.320 --> 00:00:20.660
MySQL, and PHP.

00:00:20.670 --> 00:00:23.030
So let me get right to it.

00:00:24.420 --> 00:00:31.220
I'm a senior engineer in the server
and storage technologies group.

00:00:31.220 --> 00:00:33.970
This session is for anyone with
an interest in web server on

00:00:33.970 --> 00:00:35.270
our Leopard Server platform.

00:00:35.660 --> 00:00:38.450
Server administrators,
because we're going to be talking about

00:00:38.450 --> 00:00:40.510
our server administration application.

00:00:40.530 --> 00:00:42.760
Web application developers,
we've got some very

00:00:42.760 --> 00:00:43.400
exciting things there.

00:00:43.400 --> 00:00:48.650
And database administrators,
we're focusing on MySQL database server.

00:00:49.970 --> 00:00:54.610
I'm going to tell you about some of the
general platform architecture issues,

00:00:54.610 --> 00:00:57.040
talk specifically about Apache, PHP.

00:00:57.590 --> 00:01:00.150
I'm going to talk about scalability
because the emphasis has

00:01:00.300 --> 00:01:02.900
previously been on development.

00:01:02.900 --> 00:01:05.890
But we're very interested now in
the deployment of web services.

00:01:05.890 --> 00:01:08.910
So we have some scalability
solutions for you here that

00:01:08.910 --> 00:01:10.890
we're excited to tell you about.

00:01:10.900 --> 00:01:13.870
MySQL and Ruby on Rails are
now on our platform.

00:01:13.900 --> 00:01:18.300
And we have some special guests here,
so we're going to have an extended

00:01:18.300 --> 00:01:21.320
Q&A to take advantage of the opportunity.

00:01:21.590 --> 00:01:25.160
These special guests,
William Rowe representing Apache,

00:01:25.170 --> 00:01:30.340
Rasmus Lierdorf representing PHP,
and John David Duncan representing MySQL.

00:01:30.340 --> 00:01:32.940
We're very happy they could take
the time to come here and join us,

00:01:33.040 --> 00:01:36.630
and we're very happy for their
contributions to the open source

00:01:36.770 --> 00:01:38.300
portfolio of projects that are out there.

00:01:38.300 --> 00:01:42.810
These are some of the most important
open source projects that we have.

00:01:43.310 --> 00:01:46.800
So first some background about
web platform architectures.

00:01:46.800 --> 00:01:51.180
You typically, the simplest case,
the sort of degenerate case,

00:01:51.180 --> 00:01:52.420
is serving static web pages.

00:01:52.420 --> 00:01:56.100
That's not very interesting,
but it's sort of the step zero.

00:01:56.100 --> 00:01:58.820
A front end web server
serving static content.

00:01:58.820 --> 00:02:04.520
It gets a little more interesting
when you add serving dynamic content,

00:02:04.600 --> 00:02:09.140
serving data from the file system,
servicing put requests

00:02:09.140 --> 00:02:11.580
instead of just get requests.

00:02:12.300 --> 00:02:16.380
And as your sophistication
level increases,

00:02:16.500 --> 00:02:21.920
it's common to add a
database manager to the mix.

00:02:22.980 --> 00:02:25.580
And it gets really interesting
when there's too much load

00:02:25.580 --> 00:02:26.930
to handle on one machine.

00:02:27.000 --> 00:02:30.770
In that case, you typically set up some
sort of a proxy mechanism,

00:02:30.960 --> 00:02:35.450
a load balancing mechanism so that you
can offload some of the requests from the

00:02:35.450 --> 00:02:39.180
primary machine to secondary requests,
or offload the request to

00:02:39.240 --> 00:02:41.900
secondary servers on the same host.

00:02:41.980 --> 00:02:45.740
So there's a proxy mechanism for that.

00:02:47.930 --> 00:02:52.350
These technologies for web
services fall into clusters,

00:02:52.380 --> 00:02:53.760
I guess you could say.

00:02:53.910 --> 00:02:57.800
LAMP is probably the one that
has the most recognizable name,

00:02:57.800 --> 00:03:01.800
Linux, Apache, MySQL, PHP,
or maybe sometimes Perl.

00:03:01.800 --> 00:03:07.800
But there's also a J2EE cluster,
sort of a Java enterprise cluster.

00:03:07.800 --> 00:03:12.050
And then of course,
Microsoft has its own view of the

00:03:12.050 --> 00:03:14.800
world with their .NET architecture.

00:03:14.800 --> 00:03:17.570
And Apple has its own
solution in this space,

00:03:17.580 --> 00:03:19.800
as for many years, WebObjects.

00:03:19.800 --> 00:03:22.930
These are just different
ways of packaging.

00:03:28.450 --> 00:03:32.180
So we believe that our platform
now with Leopard Server has the

00:03:32.180 --> 00:03:34.980
strongest web stack available.

00:03:34.980 --> 00:03:41.480
Not only does it have web objects,
but it has Mac OS X, underlying platform,

00:03:41.480 --> 00:03:44.540
Apache, MySQL, PHP.

00:03:44.540 --> 00:03:48.120
It has load balancing, it has Mongrel,
it has Ruby on Rails.

00:03:48.120 --> 00:03:53.060
It has our world class graphic user
interface for administering the web

00:03:53.060 --> 00:03:55.840
service and the things related to it.

00:03:55.840 --> 00:03:58.650
And it has 64 bit support,
so if you want to run your

00:03:58.720 --> 00:04:03.980
services in 64 bit mode,
you have that option now.

00:04:03.980 --> 00:04:07.750
So let me go into some detail
about this platform integration.

00:04:09.340 --> 00:04:15.300
Apache, you have your choice
of Apache 1.3 or 2.2.

00:04:15.610 --> 00:04:19.800
PHP,
you have your choice of PHP 4 or PHP 5.

00:04:19.800 --> 00:04:23.630
We have a portfolio of
scalability solutions.

00:04:23.730 --> 00:04:26.490
We have language plugins
that I'll be talking about.

00:04:26.490 --> 00:04:29.300
We have FastCGI and
we have Load Balancer.

00:04:29.300 --> 00:04:32.460
We have the spectrum of
scalability solutions.

00:04:32.980 --> 00:04:36.820
We have a plan for Leopard to
upgrade MySQL to version 5 and

00:04:36.820 --> 00:04:40.950
I'll be telling you about some
of the features of MySQL 5.

00:04:40.990 --> 00:04:44.860
We have Ruby on Rails and we have
the Mongrel Web Server which really

00:04:44.860 --> 00:04:46.920
works nicely with Ruby on Rails.

00:04:46.920 --> 00:04:50.290
The last bullet here though
is perhaps the most important.

00:04:50.290 --> 00:04:52.880
It's running on top of
our Mac OS X platform.

00:04:53.690 --> 00:04:57.330
This is a rock solid, Unix based,
secure platform.

00:04:57.340 --> 00:05:01.600
It has a server administration
applications and it has 64 bit support.

00:05:01.670 --> 00:05:06.240
And the message that you should take away
from here is this is all pre-installed,

00:05:06.240 --> 00:05:08.240
it's all integrated,
you don't have to download

00:05:08.240 --> 00:05:09.200
this and download that.

00:05:09.210 --> 00:05:13.240
You certainly can of course,
but we want to make it so easy to use out

00:05:13.250 --> 00:05:18.110
of the box that you can just turn it on
and have access to all these services.

00:05:19.350 --> 00:05:23.100
So I mentioned the two versions
of Apache and two versions of PHP.

00:05:23.100 --> 00:05:31.080
We give you a primary flavor with
Apache 2 and the PHP 5 module.

00:05:31.130 --> 00:05:35.740
We also give you the legacy flavor
with Apache 1.3 and the PHP 4 module.

00:05:35.810 --> 00:05:41.730
And of course, either of these or both of
these can talk to PHP 5.

00:05:41.810 --> 00:05:45.150
A little bit more about Apache now.

00:05:47.400 --> 00:05:50.290
We know that some of our customers
require the legacy web server.

00:05:50.300 --> 00:05:53.300
We can't force them to move to Apache 2.

00:05:53.300 --> 00:05:55.200
There are various reasons.

00:05:55.200 --> 00:05:57.300
First of all, it's good enough for
a lot of applications.

00:05:57.300 --> 00:06:00.240
It's running about two-thirds
of the world's web servers.

00:06:00.360 --> 00:06:05.050
It has enough features for most users,
will probably for some time to come.

00:06:05.140 --> 00:06:09.050
And the thing that is going to keep
some customers on that platform,

00:06:09.110 --> 00:06:13.740
and something that we certainly respect,
is that some of the third party

00:06:13.840 --> 00:06:18.300
Apache plug-in modules have not
been ported to the Apache 2 API.

00:06:18.420 --> 00:06:21.660
So we respect that requirement
and we're going to support

00:06:21.770 --> 00:06:24.800
Apache 1.3 in Leopard Server.

00:06:26.400 --> 00:06:32.050
But we know that most of our customers
will prefer the leading edge web server.

00:06:32.320 --> 00:06:39.980
So we offer Apache 2.2 as the default
and primary web server on Leopard Server.

00:06:40.090 --> 00:06:44.080
It has built in memory caching,
it supports large file downloads,

00:06:44.180 --> 00:06:49.780
it has support for 64 bit executing
that continues to improve.

00:06:49.870 --> 00:06:51.340
It's much easier to piece together.

00:06:51.340 --> 00:06:54.760
The webdav and SSL modules are
now bundled with it instead

00:06:54.760 --> 00:06:56.740
of being separate installs.

00:06:56.740 --> 00:07:01.030
And perhaps most importantly,
the Apache organization, very energetic,

00:07:01.200 --> 00:07:04.840
very capable organization,
they're putting their resources into

00:07:04.840 --> 00:07:06.460
the future as we would expect them to.

00:07:06.460 --> 00:07:09.810
They're adding new
features to the Apache,

00:07:09.810 --> 00:07:13.790
to the trunk version,
and they're backporting most

00:07:13.790 --> 00:07:16.450
of those to the 2.x series.

00:07:16.460 --> 00:07:19.380
Of course,
Apache 1.3 is out there as I mentioned,

00:07:19.380 --> 00:07:25.220
and it will continue to be supported
with security fixes and major bug fixes.

00:07:25.220 --> 00:07:26.920
But the real action is
in the Apache 2 world,

00:07:26.920 --> 00:07:31.000
so that's where we're putting
our resources as well.

00:07:32.100 --> 00:07:35.100
So some detail about this Apache 2.

00:07:35.130 --> 00:07:39.030
It has an improved architecture
relative to Apache 1.

00:07:39.030 --> 00:07:41.540
They basically rewrote it from
the ground up is what I understand

00:07:41.540 --> 00:07:46.780
and it shows because the feature
set is really growing rapidly.

00:07:47.450 --> 00:07:52.290
One of the key features of Apache 2
is it supports different MPM or

00:07:52.290 --> 00:07:55.560
multi-process model options.

00:07:55.650 --> 00:08:00.090
So you can have a threaded version
or a pre-forked version which

00:08:00.090 --> 00:08:03.280
doesn't use threads but rather
uses processes to serve multiple

00:08:03.280 --> 00:08:05.400
requests like Apache 1 did.

00:08:05.540 --> 00:08:09.400
And we looked at these alternatives
and we looked at the threading,

00:08:09.400 --> 00:08:14.130
not so much the threading of
PHP but some of the libraries that

00:08:14.270 --> 00:08:16.400
different PHP extensions depend on.

00:08:16.400 --> 00:08:22.250
Until those are universally thread safe
and until we become more comfortable

00:08:22.250 --> 00:08:27.520
with the threaded implementation
of those versions on our platform,

00:08:27.540 --> 00:08:30.400
we're going with the
pre-fork model of Apache 2.

00:08:30.400 --> 00:08:34.400
Which, as I said,
it's similar to the Apache 1.

00:08:34.400 --> 00:08:35.400
In some ways it's a less
than a pre-forked version.

00:08:35.400 --> 00:08:40.400
It's a less drastic transition from
Tiger to Leopard because of this.

00:08:40.400 --> 00:08:45.970
And we will continue to look at the
libraries that PHP needs in order

00:08:45.970 --> 00:08:51.400
to consider sometime in the future
switching to one of the threaded models.

00:08:51.400 --> 00:08:55.400
Perhaps the worker MPM, perhaps the event
MPM which is coming along.

00:08:55.400 --> 00:08:57.400
So for now you have the pre-fork model.

00:08:57.400 --> 00:09:02.980
And this evolved Apache 2 API.

00:09:03.600 --> 00:09:08.280
It does require porting of modules,
but it has a bucket brigade model which

00:09:08.280 --> 00:09:13.990
allows those modules to participate
more closely in the processing of

00:09:14.110 --> 00:09:18.070
requests and to gain access to the
request as it works its way through

00:09:18.070 --> 00:09:22.250
Apache with more comprehensive control.

00:09:25.450 --> 00:09:27.160
More details about Apache 2.

00:09:27.160 --> 00:09:29.650
It allows more flexible deployment.

00:09:29.730 --> 00:09:35.330
It separates the proxy mechanism
from the caching mechanism.

00:09:35.330 --> 00:09:39.400
So now you can administer the
memory cache or the disk cache,

00:09:39.440 --> 00:09:42.960
the HTTP 1.1 compliant memory cache.

00:09:43.020 --> 00:09:45.100
That's turned on by default.

00:09:45.170 --> 00:09:48.940
You may notice that the web
proof cache is no longer part

00:09:49.250 --> 00:09:51.760
of the picture with Apache 2.

00:09:51.760 --> 00:09:52.790
Apache 2 has its own
built in memory cache.

00:09:52.950 --> 00:09:57.630
Improved proxy mechanism allows load
balancing as well and we are very excited

00:09:57.630 --> 00:10:00.610
about the load balancing mechanism,
and I'll be talking about that

00:10:00.610 --> 00:10:01.890
and showing you that a bit later.

00:10:01.920 --> 00:10:05.860
Finally Apache 2 as I mentioned
has improved 64 bit support.

00:10:05.930 --> 00:10:08.500
It has this support mainly
by improvements in the

00:10:08.760 --> 00:10:12.900
Apache portable runtime layer,
the layer that sits underneath Apache.

00:10:12.900 --> 00:10:17.900
And protects it from the details of what
particular machine it is running on.

00:10:18.900 --> 00:10:23.400
So we're excited about the
performance opportunities that

00:10:23.520 --> 00:10:25.900
are available with 64 bit.

00:10:28.900 --> 00:10:33.810
So Apple has for many years had its own
set of authentication and authorization

00:10:33.940 --> 00:10:35.800
modules running within Apache 1.

00:10:35.800 --> 00:10:41.880
These generally allow you to
authenticate someone who's,

00:10:42.320 --> 00:10:45.970
a user who's defined in the directory
rather than being defined in a file like

00:10:45.970 --> 00:10:48.160
an htaccess file or an htdigest file.

00:10:48.290 --> 00:10:49.960
We let you get these
out of the directory,

00:10:50.060 --> 00:10:51.800
the open directory.

00:10:51.970 --> 00:10:55.790
And we've ported all those to Apache 2,
the basic authentication module.

00:10:55.790 --> 00:10:59.580
And in that particular case we added
authentication caching because it

00:10:59.580 --> 00:11:06.040
really speeds up performance for certain
network based users where the user

00:11:06.040 --> 00:11:10.800
has to go to the network to authenticate
as opposed to being a local user.

00:11:10.910 --> 00:11:15.310
That can take several tenths of a second
per authentication so by adding the

00:11:15.430 --> 00:11:17.800
caching we have really sped that up.

00:11:17.800 --> 00:11:20.800
Digest authentication,
we've not only ported that but

00:11:20.800 --> 00:11:20.800
we've re-ported it to the server.

00:11:20.800 --> 00:11:24.710
We've ported it to the server
but we've re-implemented it

00:11:24.730 --> 00:11:26.800
on top of mod auth digest.

00:11:26.840 --> 00:11:30.220
Apple's authentication module
for digest used to be implemented

00:11:30.220 --> 00:11:33.800
on top of the older mod digest
but now there's mod auth digest.

00:11:33.800 --> 00:11:36.300
It was experimental with
Apache 1 but now it's a fully

00:11:36.300 --> 00:11:38.800
supported module in Apache 2.

00:11:38.800 --> 00:11:43.050
So we have re-hosted our implementation
that supports directory based

00:11:43.050 --> 00:11:45.800
authentication on top of mod auth digest.

00:11:45.800 --> 00:11:47.800
And finally we've ported our Kerberos.

00:11:47.800 --> 00:11:49.800
The Kerberos authentication
was new in Tiger with Apache 1.

00:11:49.800 --> 00:11:54.800
And that is now available
with Apache 2.2 as well.

00:11:56.800 --> 00:11:59.350
Moving on to some additional
modules that Apple has written to

00:11:59.350 --> 00:12:01.940
extend the functionality of Apache.

00:12:02.090 --> 00:12:04.920
There's the web based
searching of local documents,

00:12:04.960 --> 00:12:08.300
spotlight connection, we've ported that.

00:12:08.400 --> 00:12:12.540
The Mod Bonjour to allow the
website to register itself and

00:12:12.550 --> 00:12:16.930
be browsable by Safari on the
network without typing a URL,

00:12:17.070 --> 00:12:19.250
that's ported.

00:12:19.370 --> 00:12:22.660
The secure realms,
we expect that that will be fixed

00:12:22.660 --> 00:12:24.600
inside of the Apache 2 core.

00:12:24.710 --> 00:12:32.500
The deal there is that in a case
sensitive file system like HFS,

00:12:32.620 --> 00:12:37.200
there's a potential security exposure
if we didn't have this module,

00:12:37.300 --> 00:12:41.900
where a user could bypass
the security realm by typing

00:12:41.900 --> 00:12:45.790
the URL with a variant case,
typing an uppercase X instead of

00:12:45.890 --> 00:12:47.340
a lowercase X to get around this.

00:12:47.420 --> 00:12:49.820
Well,
Mod HFS blocks that and we expect that

00:12:49.820 --> 00:12:53.490
that will not be necessary with Apache 2,
because they are doing some good

00:12:53.490 --> 00:12:57.950
work to handle canonicalized
file names in Apache 2,

00:12:57.950 --> 00:13:02.160
so we expect that that will
be unnecessary in the future.

00:13:02.360 --> 00:13:07.030
The next module grouping is mod
encoding and a customized version

00:13:07.030 --> 00:13:09.840
of mod_dav called mod_dav encoding.

00:13:09.840 --> 00:13:12.880
We've replaced that,
actually we've sort of evolved

00:13:12.890 --> 00:13:17.280
that with Apache 2 to do the same
thing that it did back in Tiger.

00:13:17.420 --> 00:13:20.670
And what it does,
it allows you to access the web_dav

00:13:20.670 --> 00:13:25.390
with file names that are fully
internationalized instead of requiring a

00:13:25.460 --> 00:13:28.300
specific ASCII or Latin style characters.

00:13:28.360 --> 00:13:32.360
And finally,
we had mod_mac_binary which used to

00:13:32.360 --> 00:13:36.740
allow you to type a URL slash dot
bin and that would automatically

00:13:36.740 --> 00:13:38.450
mac binary encode the download.

00:13:38.450 --> 00:13:43.770
We don't see a demand for that anymore
so we did not port that over to Apache 2.

00:13:45.700 --> 00:13:49.140
So we give you your choice now.

00:13:49.210 --> 00:13:50.810
If you've attended some
of the other sessions,

00:13:50.810 --> 00:13:55.380
the server overview yesterday,
you saw that we have two kinds of

00:13:55.380 --> 00:13:58.400
clean installs now with Leopard Server.

00:13:58.400 --> 00:14:02.540
We have a clean install,
an advanced clean install,

00:14:02.540 --> 00:14:05.690
and we have a standard clean install.

00:14:05.780 --> 00:14:08.150
So when you did a clean
install for Tiger,

00:14:08.150 --> 00:14:14.200
that was very similar to what we now
call the advanced install experience.

00:14:14.210 --> 00:14:17.280
But we've given you,
for people who don't need all

00:14:17.280 --> 00:14:21.200
these decisions to be made,
who just want to have a turnkey system

00:14:21.200 --> 00:14:24.420
with a small number of services,
we have now something

00:14:24.420 --> 00:14:26.200
called a standard install.

00:14:26.200 --> 00:14:30.020
So you don't get Apache 1,
you don't get PHP 4,

00:14:30.200 --> 00:14:34.200
you don't get any config translation
from Apache 1 to Apache 2.

00:14:34.270 --> 00:14:38.690
It gives you just a very simple,
basic Apache 2 service.

00:14:41.580 --> 00:14:46.050
How do we make both versions of Apache 1
and Apache 2 coexist in the file system?

00:14:46.220 --> 00:14:48.030
We just simply segregate them.

00:14:48.130 --> 00:14:54.370
If you're familiar with Panther or Tiger,
you saw Opt Apache 2,

00:14:54.370 --> 00:14:59.210
which contained a sort of evaluation
version of Apache 2.0 off to the

00:14:59.210 --> 00:15:01.630
side in its own subdirectory.

00:15:01.780 --> 00:15:05.130
We've now integrated, obviously,
Apache 1 and Apache 2

00:15:05.130 --> 00:15:06.520
into the file system.

00:15:06.550 --> 00:15:10.680
They coexist and as you see on the slide,
they just have different file names.

00:15:11.650 --> 00:15:16.420
different different names for folders
and files and binaries and so on so

00:15:16.420 --> 00:15:20.160
if you've if you've got an apache one
configuration and you don't want to undo

00:15:20.160 --> 00:15:23.970
all the virtual hosts that you've created
and all the security realms that you've

00:15:23.970 --> 00:15:28.880
set up all the special configurations
that you've taken care of in apache 1 on

00:15:28.880 --> 00:15:35.920
tiger we provide you an automated way to
translate that from apache 1 to apache 2.

00:15:36.080 --> 00:15:39.190
there are some syntax differences
between apache 1 and apache 2.

00:15:39.190 --> 00:15:43.380
we have a little ruby script that manages
that for you so when the administrator

00:15:43.380 --> 00:15:47.080
is ready i mean you can you can do a
clean install or you can do an upgrade

00:15:47.160 --> 00:15:50.640
install and pick apache 1 and stay with
it for as long as you run leopard server

00:15:50.640 --> 00:15:57.930
but when you decide to make the change
we trigger this translation script and

00:15:58.370 --> 00:16:01.540
And I'll show you how that
works in a few minutes.

00:16:01.540 --> 00:16:05.810
One thing to note about
this translation process,

00:16:05.870 --> 00:16:09.040
it's a little bit dangerous to
translate people's config files.

00:16:09.040 --> 00:16:11.040
And we do not do that irreversibly.

00:16:11.040 --> 00:16:16.040
We leave the old configuration
unmodified in place.

00:16:16.040 --> 00:16:20.120
And we also provide a log because
not all translations are going to

00:16:20.120 --> 00:16:22.240
succeed if you do certain things.

00:16:22.240 --> 00:16:25.490
We try to support all the different
things that we anticipate,

00:16:25.590 --> 00:16:29.440
but we know that administrators will do
things that none of us can anticipate

00:16:29.440 --> 00:16:31.700
with a script to translate config files.

00:16:31.790 --> 00:16:36.090
So we provide a log that you can
use to go back and look and piece

00:16:36.100 --> 00:16:41.490
together what happened during the
translation attempt and recover.

00:16:44.330 --> 00:16:49.100
So this is a view of one of the panels
of the Service Configuration Assistant.

00:16:49.140 --> 00:16:52.000
And it's a very simple panel.

00:16:52.000 --> 00:16:55.820
It just gives you a choice
between Apache 1 and Apache 2.

00:16:55.930 --> 00:17:00.890
So when you select in this
user interface Apache 2.2 and

00:17:00.890 --> 00:17:05.680
you're already running Apache 1,
it will run the script transparently

00:17:05.770 --> 00:17:07.440
and you'll be translated.

00:17:07.580 --> 00:17:10.980
And if it fails, the little button

00:17:11.310 --> 00:17:14.830
If it fails to do the translation,
the button won't change to 2.2,

00:17:14.830 --> 00:17:16.240
it'll stay on 1.3.

00:17:16.240 --> 00:17:19.980
And that'll be the cue that you need
to go look at your log files and see

00:17:19.980 --> 00:17:22.050
why the translation did not occur.

00:17:22.180 --> 00:17:24.970
And then at some later date
you can do the translation

00:17:24.970 --> 00:17:26.650
and hopefully it will work.

00:17:26.860 --> 00:17:30.010
But we expect that for the overwhelming
majority of configurations the

00:17:30.010 --> 00:17:35.560
translation will simply work and you
can run Apache 2.2 when you're ready.

00:17:35.910 --> 00:17:37.960
So now I mentioned
scalability a bit earlier,

00:17:37.960 --> 00:17:41.100
I'm going to give you some
detail about that now.

00:17:41.180 --> 00:17:43.670
We know that scalability

00:17:45.630 --> 00:17:58.230
The first thing that comes to mind is to,
instead of running a CGI script

00:17:58.820 --> 00:18:01.980
separate from Apache,
to put the processing for that

00:18:02.010 --> 00:18:03.480
language inside of Apache.

00:18:03.570 --> 00:18:05.480
That's what ModPerl and ModPHP do.

00:18:05.550 --> 00:18:10.050
They speed up the execution of
Perl and PHP dramatically by

00:18:10.050 --> 00:18:13.400
putting it right inside Apache.

00:18:13.400 --> 00:18:13.400
You don't have to start
up a separate process.

00:18:13.890 --> 00:18:18.300
Another mechanism for scalability
that was kind of popular in the mid

00:18:18.300 --> 00:18:24.390
90s or late 90s and is getting some
renewed interest now is FastCGI.

00:18:24.500 --> 00:18:30.600
So we give you ModFastCGI on Leopard
Server and we also provide the various

00:18:30.600 --> 00:18:35.490
libraries and bindings that things need
in order to take advantage of that.

00:18:36.140 --> 00:18:38.860
Finally,
there's a much more mature and much

00:18:38.860 --> 00:18:44.100
more powerful scalability mechanism,
the reverse proxy mechanisms.

00:18:44.100 --> 00:18:48.730
And ModProxy Balancer,
now for the first time with Apache 2.2,

00:18:48.930 --> 00:18:53.800
enables us to really manage that
and it's very powerful and we'll

00:18:53.800 --> 00:18:55.870
show you a bit of that later.

00:18:56.970 --> 00:19:00.150
So let me talk about these languages
that can be embedded into Apache,

00:19:00.160 --> 00:19:04.190
or that are candidates anyway,
for embedding into Apache.

00:19:06.440 --> 00:19:08.540
First, PHP.

00:19:08.540 --> 00:19:11.570
We're putting PHP 5 on Leopard Server.

00:19:11.570 --> 00:19:16.150
It has quite a few
features relative to PHP 4.

00:19:16.130 --> 00:19:21.220
Maybe the best one is the better object
model that you can take advantage of.

00:19:21.220 --> 00:19:25.680
There's improved error handling,
more flexibility when talking to MySQL,

00:19:25.710 --> 00:19:30.650
improved XML, better performance,
the Zend engine has been improved,

00:19:30.810 --> 00:19:35.160
and the language has some nice
features that make writing

00:19:35.200 --> 00:19:39.580
and reading code easier,
exceptions and iterators.

00:19:44.100 --> 00:19:49.330
If you have PHP 4 scripts,
there are several options that you have.

00:19:49.430 --> 00:19:52.830
Most of them will just work in a PHP 5.

00:19:52.920 --> 00:19:58.560
And if for some reason you want to,
you know, you may have valid reasons

00:19:58.560 --> 00:20:01.720
for staying with Apache 1.3,
PHP 4 is available in the

00:20:01.780 --> 00:20:03.940
Apache 1.3 side of things.

00:20:03.960 --> 00:20:10.400
And I think a final option is that
PHP 5 has this PHP 4 compatibility mode,

00:20:10.450 --> 00:20:17.060
so if you set this Zen Z1 compatibility
mode directive in your PHP.ini file,

00:20:17.060 --> 00:20:22.780
that should allow PHP 4 script
to run with full PHP 4 script.

00:20:22.800 --> 00:20:26.770
So you can have PHP 4 compatibility
even though it's being interpreted

00:20:26.770 --> 00:20:28.380
by the PHP 5 Apache module.

00:20:29.900 --> 00:20:33.060
Next, Perl.

00:20:33.060 --> 00:20:37.510
We have Perl version
5.8.8 on the platform now,

00:20:37.510 --> 00:20:41.830
and we have a plugin for Apache 1
and a plugin for Apache 2.

00:20:41.870 --> 00:20:47.480
So Perl is going to be fully
supported for Leopard Server for

00:20:47.480 --> 00:20:49.830
both platform variants.

00:20:51.140 --> 00:20:54.040
Python is fully supported
on the platform.

00:20:54.040 --> 00:20:57.760
We do not have a mod Python plugin.

00:20:57.760 --> 00:21:01.240
One reason is that Apache 2.2
is not supported by the

00:21:01.240 --> 00:21:03.270
existing stable mod Python.

00:21:03.270 --> 00:21:05.880
We're looking at how that evolves.

00:21:05.880 --> 00:21:10.640
And if it does evolve to be a
stable mod Python for Apache 2.2,

00:21:10.640 --> 00:21:14.070
we will look closely at
putting that on our platform.

00:21:14.090 --> 00:21:18.520
It's important to note that we have
added to the underlying Python language,

00:21:18.520 --> 00:21:20.530
we added a couple of plugins.

00:21:20.530 --> 00:21:25.450
A SQLite plugin, a plugin that allows
XML parsing to be easier,

00:21:25.450 --> 00:21:30.370
and a plugin that lets you get
at Apple's extended file system

00:21:30.370 --> 00:21:34.100
attributes like file system ACLs,
for example.

00:21:36.160 --> 00:21:39.640
So the last language
I'll cover here is Ruby.

00:21:39.640 --> 00:21:43.340
We have 1.8.4 on Leopard at this point.

00:21:43.340 --> 00:21:45.940
We have not incorporated mod Ruby.

00:21:45.940 --> 00:21:52.290
We believe that the people who run
Ruby are more interested in the proxy

00:21:52.290 --> 00:21:57.330
based options for scalability rather
than having a mod Ruby built into Apache.

00:21:57.360 --> 00:22:00.940
So I'll be talking about
the proxy based options.

00:22:00.940 --> 00:22:05.150
There are bindings for
fast CGI so you can achieve

00:22:05.150 --> 00:22:08.290
scalability for Ruby applications.

00:22:08.850 --> 00:22:10.880
and David Schmuck,
and the team that's been working

00:22:10.910 --> 00:22:12.300
on this project for a long time.

00:22:12.300 --> 00:22:15.700
And finally, and perhaps most exciting,
is we have the Mongrel Web Server,

00:22:15.700 --> 00:22:27.600
which is written mostly in Ruby,
but pieces that are really,

00:22:27.600 --> 00:22:30.320
the HTTP parser part is written in C.

00:22:30.460 --> 00:22:35.490
It's a very fast, very nice web server,
it's very new, but it's on your platform,

00:22:35.500 --> 00:22:37.620
and I'll be talking more
about Mongrel in a bit.

00:22:40.360 --> 00:22:44.040
Mongrel is one of several
web server choices.

00:22:44.280 --> 00:22:46.700
Most of these are on our platform.

00:22:46.700 --> 00:22:51.170
Let's talk about different web servers
and their different attributes.

00:22:51.560 --> 00:22:53.160
Apache is the known quantity here.

00:22:53.160 --> 00:22:59.090
It's got some happy dogs and some
unhappy dogs as you see in this graphic.

00:22:59.170 --> 00:23:00.840
It's not lightweight by any means.

00:23:00.840 --> 00:23:04.920
It's not easy to configure,
except to the extent of course that

00:23:04.920 --> 00:23:08.470
in our graphic user interface we
hide a lot of the gory details of

00:23:08.470 --> 00:23:11.250
configuring Apache from administrators.

00:23:11.300 --> 00:23:14.970
But as a standalone web server,
Apache is not known to

00:23:15.000 --> 00:23:19.040
be easy to configure,
whereas it is a scalable, mature,

00:23:19.040 --> 00:23:21.190
and very flexible web server.

00:23:21.560 --> 00:23:24.900
Light PPD, another option for people.

00:23:24.900 --> 00:23:27.480
It's not currently
installed on our platform.

00:23:27.570 --> 00:23:31.240
It's not the most mature and it's
not nearly as easy to configure

00:23:31.240 --> 00:23:33.640
as some of these other options.

00:23:33.820 --> 00:23:38.130
Webbrick comes with Ruby on
Rails and it may not be as scalable,

00:23:38.130 --> 00:23:41.500
but as you see,
you see how it stacks up relative

00:23:41.500 --> 00:23:43.540
to these other web servers.

00:23:44.260 --> 00:23:47.380
But the thing we are most
excited about is Mongrel.

00:23:47.410 --> 00:23:50.200
It's only a disadvantage right now
that we can see is that it's new,

00:23:50.280 --> 00:23:53.150
but aside from that it's very flexible,
very scalable,

00:23:53.150 --> 00:23:56.230
it was written mainly to be fast,
and it was written to

00:23:56.230 --> 00:23:59.580
be easy to configure,
and because it's so natural for

00:23:59.580 --> 00:24:03.430
Ruby on Rails and because we're
very excited about the amount

00:24:03.430 --> 00:24:09.920
of interest in Ruby on Rails,
we've added Mongrel to your platform.

00:24:09.920 --> 00:24:10.500
So, Leopard Server now contains Mongrel.

00:24:11.510 --> 00:24:14.150
A little bit more about it.

00:24:14.240 --> 00:24:18.400
It's really perfectly suited for
Ruby on Rails web applications.

00:24:18.400 --> 00:24:19.900
It's gaining a lot of support.

00:24:19.950 --> 00:24:22.040
It's bundled as a gem,
which is how you bundle

00:24:22.080 --> 00:24:23.390
extensions to Ruby.

00:24:23.450 --> 00:24:26.560
And this is the version that
we have on our platform.

00:24:28.820 --> 00:24:34.060
So another scalability option is
FastCGI or Fast Common Gateway Interface.

00:24:34.060 --> 00:24:35.940
I mentioned this was
sort of a 90s technology.

00:24:35.940 --> 00:24:39.940
It's interesting again for a lot of
people because it's a way to talk

00:24:39.940 --> 00:24:44.790
to web applications and people with
Ruby on Rails and other web based

00:24:44.940 --> 00:24:47.510
applications have been using it so that

00:24:47.830 --> 00:24:50.040
Basically what it does,
as the graphic shows,

00:24:50.050 --> 00:24:55.250
it allows you to keep a daemon
running and talk to that daemon from

00:24:55.250 --> 00:25:00.000
Apache instead of having a CGI launching
every time a request comes in.

00:25:00.010 --> 00:25:04.210
So it's a form of a fast CGI protocol.

00:25:04.730 --> 00:25:08.630
And we pre-install ModFastCGI on
the platform now so you

00:25:08.630 --> 00:25:10.350
can use that if you want.

00:25:11.200 --> 00:25:16.200
But the most exciting one is
this balancing architecture.

00:25:16.200 --> 00:25:20.090
Yak, yak, yak, I need water.

00:25:25.610 --> 00:25:28.030
So this works in a couple ways.

00:25:28.280 --> 00:25:34.580
The web interface, Apache 2,
using Mod Proxy Balancer as sort

00:25:34.580 --> 00:25:37.210
of the switching point here,
it farms requests out

00:25:37.310 --> 00:25:40.070
to multiple instances,
either running on one machine

00:25:40.520 --> 00:25:42.280
or running on a bank of,
you could have a bank

00:25:42.330 --> 00:25:44.150
of XSERVs in a closet,
providing these web

00:25:44.150 --> 00:25:45.760
applications on the back end.

00:25:46.580 --> 00:25:50.920
They could also be running web objects,
so Mod Proxy Balancer is a crucial

00:25:50.920 --> 00:25:55.670
mechanism now going forward
for balancing requests across

00:25:55.670 --> 00:25:58.200
multiple web objects servers.

00:26:00.790 --> 00:26:04.270
This is a screenshot from Server Admin.

00:26:04.320 --> 00:26:07.400
It's not on the DVD that you have,
it's too new.

00:26:07.400 --> 00:26:12.340
This is part of the
Server Admin web application.

00:26:12.780 --> 00:26:16.650
and it shows a panel that's brand new.

00:26:16.680 --> 00:26:19.820
It's on the per virtual host section.

00:26:19.860 --> 00:26:23.700
It's called the proxy, the reverse proxy.

00:26:23.750 --> 00:26:27.800
You have for many years been able to
manage a conventional or forward proxy

00:26:27.800 --> 00:26:31.390
and you can still do that with server
admin on a global basis but we've

00:26:31.390 --> 00:26:36.300
added it as a capability on a virtual
host basis to manage reverse proxy.

00:26:36.450 --> 00:26:41.110
So how does it look up close?

00:26:41.230 --> 00:26:51.060
A checkbox to enable it,
a path that indicates where

00:26:51.490 --> 00:26:52.330
in the URL space are requests
coming to trigger the proxying.

00:26:53.060 --> 00:26:55.530
and the,
probably the most important section

00:26:55.530 --> 00:26:58.480
is this table in the middle,
the Balancer members.

00:26:58.570 --> 00:27:01.060
So these are the things,
these are the URLs of

00:27:01.120 --> 00:27:02.720
back end web services.

00:27:02.720 --> 00:27:05.980
In this case they're running on
the same machine at 127.0.0.1,

00:27:06.020 --> 00:27:11.170
just listening on different ports,
multiple rails applications

00:27:11.170 --> 00:27:11.170
running on the same machine.

00:27:12.350 --> 00:27:16.200
And if you want to
edit one of these URLs,

00:27:16.230 --> 00:27:19.590
you get a sheet that drops down,
and you can configure

00:27:19.590 --> 00:27:22.920
that specific member,
change its URL.

00:27:23.310 --> 00:27:26.420
And by the way,
we discovered these by way of Bonjour.

00:27:26.450 --> 00:27:30.120
So we've tweaked Mongrel a little
bit to register with Bonjour,

00:27:30.120 --> 00:27:34.390
and we have a Bonjour browser built
into the backend of Server Admin Web.

00:27:34.460 --> 00:27:38.620
So this pop-up,
which shows URL candidates,

00:27:38.620 --> 00:27:41.430
is populated by way of Bonjour.

00:27:42.890 --> 00:27:45.150
And finally,
the checkbox at the bottom of this new

00:27:45.150 --> 00:27:48.890
panel in Server Admin to manage proxies,
reverse proxies.

00:27:49.010 --> 00:27:52.230
This checkbox, Allow Dynamic Balancer
Administration via Web.

00:27:52.230 --> 00:27:57.690
This enables administrator access
with proper authentication to this,

00:27:57.800 --> 00:28:01.460
which is a special URL,
something something slash

00:28:01.460 --> 00:28:02.880
balancer dash manager.

00:28:02.880 --> 00:28:07.940
This is a panel provided by Apache in
their mod proxy balancer module and

00:28:07.940 --> 00:28:11.550
it lets you dynamically configure
these things that we've talked about.

00:28:11.550 --> 00:28:17.170
So if you click on one of the URLs,
you'll get the ability to

00:28:17.170 --> 00:28:19.380
edit the details about that.

00:28:19.380 --> 00:28:23.370
That's actually the balancer
group that we see editing here.

00:28:23.800 --> 00:28:26.600
So characteristics of the
Balancer Group like a session ID,

00:28:26.600 --> 00:28:28.760
timeout and so on.

00:28:28.760 --> 00:28:32.830
And if you,
actually that's actually a better

00:28:32.850 --> 00:28:35.630
view of what I just talked about.

00:28:37.300 --> 00:28:41.710
If you select a specific worker,
one of these 127.001

00:28:41.720 --> 00:28:44.530
balancer members or workers,

00:28:44.730 --> 00:28:46.350
You get this panel.

00:28:46.370 --> 00:28:49.840
It lets you control the load factor
and that's kind of a cool thing.

00:28:49.960 --> 00:28:52.140
And that was also on
our server admin panel.

00:28:52.230 --> 00:28:55.790
If you decide that one server is
more capable or more deserving

00:28:55.910 --> 00:28:58.990
or should be punished more,
you can give it more load.

00:28:59.060 --> 00:29:03.850
And you can say give 90% of the
load to this member of the group,

00:29:03.890 --> 00:29:07.890
give 10% of the load to this
other member of the group.

00:29:07.940 --> 00:29:12.070
That's especially useful if you
have your balancer group distributed

00:29:12.070 --> 00:29:14.290
across multiple physical machines.

00:29:16.100 --> 00:29:18.390
Now a bit about MySQL.

00:29:18.390 --> 00:29:25.250
We're going to cover some of the new
features and talk about 64-bit MySQL.

00:29:26.000 --> 00:29:29.170
So MySQL 5 adds quite a few new features.

00:29:29.210 --> 00:29:32.710
Tiger, as you know, contained MySQL 4.1.

00:29:35.400 --> 00:30:44.900
[Transcript missing]

00:30:45.430 --> 00:30:47.730
And the reason that that's so
appealing is because of the

00:30:47.730 --> 00:30:50.000
new features that MySQL 5 has.

00:30:50.140 --> 00:30:54.120
Stored procedures,
here's a hello world script that's

00:30:54.120 --> 00:30:57.390
written as a MySQL stored procedure.

00:30:59.910 --> 00:31:03.770
Here's an example of a trigger so you
can watch what's happening to a table

00:31:03.840 --> 00:31:08.030
and take some action when something,
in this case, before an insert happens

00:31:08.030 --> 00:31:09.680
on this account table.

00:31:09.710 --> 00:31:12.470
It will start calculating a sum.

00:31:14.150 --> 00:31:19.500
A view is simply a shorthand way of,
it's like a handle for a query.

00:31:19.640 --> 00:31:24.100
So in this case,
or a handle for a part of a query.

00:31:24.110 --> 00:31:26.860
So in this case the bottom
line is select star from v,

00:31:26.860 --> 00:31:31.450
where v is sort of the view or
handle for a lengthier query,

00:31:31.580 --> 00:31:33.490
a select statement.

00:31:34.770 --> 00:31:40.590
The last thing about MySQL is that it
is now manageable within Server Admin.

00:31:40.590 --> 00:31:45.700
So, MySQL is a fully supported service
within the Server Admin application.

00:31:45.710 --> 00:31:49.530
No more stand alone,
separate MySQL Manager application,

00:31:49.640 --> 00:31:51.900
which you could only use locally.

00:31:51.900 --> 00:31:54.810
It's now part of Server Admin,
therefore it uses our

00:31:54.810 --> 00:31:58.780
authentication mechanism,
our model, our nice user interface,

00:31:58.780 --> 00:31:59.700
and it's usable remotely.

00:31:59.700 --> 00:32:03.690
And it manages the pre-installed
MySQL as it always has.

00:32:05.570 --> 00:32:10.700
So now I'm going to introduce my
fellow software engineer Lionel Desai.

00:32:10.700 --> 00:32:16.110
He will tell us about 64-bit
MySQL performance and some of the

00:32:16.110 --> 00:32:19.890
things that we've learned about that.

00:32:24.580 --> 00:32:26.350
Thank you.

00:32:26.380 --> 00:32:27.210
So I'm Lionel.

00:32:27.350 --> 00:32:31.210
I helped out a bit with the MySQL thing.

00:32:32.270 --> 00:32:33.780
So what is DemoBath?

00:32:33.960 --> 00:32:38.360
Demo is basically to showcase the
flexibility of 64-bit MySQL and

00:32:38.360 --> 00:32:42.240
the performance that you can gain
when you use this flexibility.

00:32:42.740 --> 00:32:44.900
The basic,
or the main advantage that everyone

00:32:44.900 --> 00:32:47.880
knows about moving to a 64-bit
process model is that you have a

00:32:47.880 --> 00:32:49.700
larger process virtual address space.

00:32:49.700 --> 00:32:51.270
What does that mean?

00:32:51.320 --> 00:32:55.380
Basically you get an
easier access to a really,

00:32:55.380 --> 00:32:57.990
really large amount of physical memory.

00:32:58.290 --> 00:33:02.320
So the server that I'll be using,
for example, has 8 gigabytes of memory.

00:33:02.620 --> 00:33:05.680
Why did we choose MySQL to
do the 64-bit demo?

00:33:05.890 --> 00:33:08.960
MySQL ships with a number of
caches and somewhere around,

00:33:08.960 --> 00:33:14.000
I think, version 4 and onwards,
MySQL ships with a query cache.

00:33:14.200 --> 00:33:18.010
The main job of this query cache
is to cache the query statement

00:33:18.070 --> 00:33:20.200
and the associated result set.

00:33:20.200 --> 00:33:22.140
There are two limits you need
to know about this query cache.

00:33:22.200 --> 00:33:25.200
One is the query cache size,
which is self-explanatory.

00:33:25.200 --> 00:33:28.200
It's the size of the query cache.

00:33:28.200 --> 00:33:31.410
And then there's the query cache limit,
which basically dictates the

00:33:31.410 --> 00:33:35.110
maximum size of a result set
associated with a single query.

00:33:35.210 --> 00:33:38.100
So, you know, a single query doesn't
just blow your query cache.

00:33:38.190 --> 00:33:41.670
But since we want to keep the demo small,
I'll be running the same query,

00:33:41.670 --> 00:33:43.200
a simple select query, twice.

00:33:43.200 --> 00:33:50.200
And so I'm going to set the query
cache limits to the query cache size.

00:33:50.410 --> 00:33:55.280
So let's start with... MySQL 32-bit.

00:33:58.810 --> 00:34:05.600
And I'll just show you the config file.

00:34:05.650 --> 00:34:09.640
As you can see, on the left hand side,
the query cache is set to 32 meg.

00:34:09.640 --> 00:34:11.300
The query cache limit is set to 32 meg.

00:34:11.300 --> 00:34:15.430
The config file I'm
using is the my-huge.cnf.

00:34:15.590 --> 00:34:19.240
It ships standard with MySQL,
and this machine has enough RAM,

00:34:19.240 --> 00:34:24.560
8 gigabytes, as I said earlier,
to support this configuration.

00:34:24.570 --> 00:34:25.800
Nothing much has changed.

00:34:25.820 --> 00:34:27.590
Here it is.

00:34:28.740 --> 00:34:38.710
And I'm going to run a simple monitor
script over here to show what we can see.

00:34:38.850 --> 00:34:39.920
There we started.

00:34:39.920 --> 00:34:42.180
And I'll start the query.

00:34:42.180 --> 00:34:44.750
And I'll show you what
the query looks like.

00:34:46.410 --> 00:34:48.920
The query is a simple Connect query.

00:34:49.000 --> 00:34:52.370
As you can see, select nothing big.

00:34:53.760 --> 00:34:54.380
Ah, OK.

00:34:54.530 --> 00:34:57.160
So being a simple select query,
if you look carefully,

00:34:57.160 --> 00:34:59.900
you'll see that the query
cache size is decreasing,

00:34:59.930 --> 00:35:02.980
and you have a query cache insert.

00:35:03.120 --> 00:35:06.440
So basically,
for statically served web pages,

00:35:06.440 --> 00:35:07.720
this is a good thing, right?

00:35:07.890 --> 00:35:09.040
The query cache is full.

00:35:09.090 --> 00:35:12.400
Next time around,
you'll get a faster result.

00:35:12.430 --> 00:35:15.940
This query should last somewhere
around less than a minute.

00:35:16.030 --> 00:35:19.220
Oh, yeah, that's the MySQL D and
the PHP CP utilization.

00:35:19.220 --> 00:35:20.760
Look at the virtual size of MySQL.

00:35:20.760 --> 00:35:23.500
It's 537 meg, not big enough.

00:35:23.700 --> 00:35:26.160
So there we are, 35 seconds.

00:35:26.190 --> 00:35:28.570
But what's strange about this table?

00:35:28.910 --> 00:35:31.270
It was reducing, it went reducing,
suddenly the query

00:35:31.270 --> 00:35:33.060
cache size rolled over,
it's 32 meg again.

00:35:33.200 --> 00:35:35.120
Query cache inserts, deleted, it's zero.

00:35:35.260 --> 00:35:36.560
What happened?

00:35:36.560 --> 00:35:39.480
I'll start the query again just to see.

00:35:40.040 --> 00:35:42.470
It was reducing, it went reducing,
suddenly the query

00:35:42.470 --> 00:35:44.300
cache size rolled over,
it's 32 meg again.

00:35:44.300 --> 00:35:46.350
Query cache inserts, deleted, it's zero.

00:35:46.450 --> 00:35:47.760
What happened?

00:35:47.760 --> 00:35:50.680
I'll start the query again just to see.

00:36:05.780 --> 00:36:08.130
It was reducing, it went reducing,
suddenly the query

00:36:08.180 --> 00:36:10.000
cache size rolled over,
it's 32 meg again.

00:36:10.000 --> 00:36:12.100
Query cache inserts, deleted, it's zero.

00:36:12.100 --> 00:36:13.460
What happened?

00:36:13.460 --> 00:36:15.290
I'll start the query again just to see.

00:36:15.610 --> 00:36:17.970
It was reducing, it went reducing,
suddenly the query

00:36:17.970 --> 00:36:19.720
cache size rolled over,
it's 32 meg again.

00:36:19.820 --> 00:36:21.900
Query cache inserts, deleted, it's zero.

00:36:21.900 --> 00:36:23.240
What happened?

00:36:23.260 --> 00:36:26.180
I'll start the query again just to see.

00:36:37.350 --> 00:36:39.910
Okay,
and I'll start the same query again.

00:36:39.910 --> 00:36:43.440
And I will start this.

00:36:44.000 --> 00:36:46.140
One thing that you didn't notice is this.

00:36:46.190 --> 00:36:48.660
I have set the query cache
limit to 4 gigabytes.

00:36:48.810 --> 00:36:50.900
The query cache size to 4 gigabytes.

00:36:50.900 --> 00:36:52.560
I have 8 gigs of RAM.

00:36:52.560 --> 00:36:55.400
This is not even counting
the other cache sizes.

00:36:55.480 --> 00:36:56.910
So what does the virtual
memory look like?

00:36:57.040 --> 00:36:58.790
Oh, 8.12 gigabytes.

00:36:58.970 --> 00:37:00.930
That's what MySQL is doing.

00:37:01.050 --> 00:37:04.940
And you can see the query
cache size is decreasing.

00:37:05.250 --> 00:37:08.340
The query cache insert has been done.

00:37:08.350 --> 00:37:08.600
Let's see how much time it takes.

00:37:08.600 --> 00:37:08.600
This is the first time around.

00:37:09.720 --> 00:37:12.440
should be approximately the same,
maybe a little bit more because

00:37:12.440 --> 00:37:15.330
of the overhead of 64 bit,
but nothing big.

00:37:15.340 --> 00:37:17.550
Yeah, pretty much the same.

00:37:17.570 --> 00:37:19.900
OK, second time around.

00:37:29.960 --> 00:37:33.760
Wow, MySQLD, down by 50% CPU utilization.

00:37:33.950 --> 00:37:37.020
PHP, up by 50% CPU utilization.

00:37:37.370 --> 00:37:39.430
And we have a hit in the query cache.

00:37:39.720 --> 00:37:41.140
What happened?

00:37:41.140 --> 00:37:43.400
So we expect the time to go down,
definitely.

00:37:43.400 --> 00:37:45.290
But this is a classic
producer-consumer problem,

00:37:45.370 --> 00:37:45.820
right?

00:37:45.820 --> 00:37:51.330
Your consumer can run only as fast
as the producer can produce data.

00:37:51.330 --> 00:37:51.330
26 seconds.

00:37:52.640 --> 00:37:56.490
So in this case,
just doing a clever tweak over here,

00:37:56.490 --> 00:38:02.870
I was able to get a 50% reduction in
CPU utilization and a 25% reduction in

00:38:03.000 --> 00:38:06.190
the time taken to execute the query.

00:38:06.760 --> 00:38:11.320
Many of you will say this is, you know,
basically just a skewed up benchmark.

00:38:11.340 --> 00:38:11.990
It's 32 meg.

00:38:11.990 --> 00:38:15.150
I could have set the query cache size
to one gigabyte in 32-bit MySQL and

00:38:15.150 --> 00:38:16.840
I would have got similar results,
probably better.

00:38:16.840 --> 00:38:17.710
You're right.

00:38:17.740 --> 00:38:19.570
But how high are you going to go?

00:38:19.590 --> 00:38:23.240
On a 32-bit system,
even with 16 gigabytes of RAM,

00:38:23.240 --> 00:38:27.460
you cannot keep increasing the
query cache size or any cache size.

00:38:27.500 --> 00:38:28.940
You have the stack segment.

00:38:29.010 --> 00:38:30.470
You have the text segment.

00:38:30.470 --> 00:38:31.920
You have the data segments.

00:38:31.940 --> 00:38:35.350
You have whatever MySQL is going
to allocate other than that.

00:38:36.000 --> 00:38:39.310
The most in practice I've been able
to push up the query cache size,

00:38:39.310 --> 00:38:40.790
the most is two gigabytes.

00:38:40.790 --> 00:38:43.990
On an eight gig system,
I cannot use more than that.

00:38:43.990 --> 00:38:45.640
So that seems unfair.

00:38:45.640 --> 00:38:50.460
I'll switch over the slide.

00:38:50.460 --> 00:38:52.130
Yeah.

00:38:57.690 --> 00:39:00.260
So this is what you saw, right?

00:39:00.330 --> 00:39:03.930
And the next slide.

00:39:04.190 --> 00:39:06.470
Should everyone switch to 64-bit?

00:39:06.540 --> 00:39:07.810
Probably, probably not.

00:39:07.950 --> 00:39:11.220
What you need to be aware of,
64-bit is not a magic bullet.

00:39:11.230 --> 00:39:13.180
It comes with its overheads.

00:39:13.180 --> 00:39:15.060
Your pointer variables are larger.

00:39:15.150 --> 00:39:17.260
Your long variables
are going to be larger.

00:39:17.330 --> 00:39:18.660
Your cache footprint is larger.

00:39:18.860 --> 00:39:20.930
Your process image size is larger.

00:39:21.150 --> 00:39:22.930
But you need to evaluate 64-bit.

00:39:23.040 --> 00:39:26.350
You need to look at your
application and your application

00:39:26.350 --> 00:39:31.690
with MySQL and try to leverage
this additional power that you get.

00:39:31.710 --> 00:39:36.380
The theoretical limit is as
far as your machine can handle.

00:39:36.430 --> 00:39:38.220
That's a great place to be in.

00:39:38.230 --> 00:39:39.460
Thank you.

00:39:44.820 --> 00:39:46.400
Thanks Lionel.

00:39:46.400 --> 00:39:49.490
That's really good solid evidence that
for administrators who want to have

00:39:49.540 --> 00:39:53.830
a choice to optimize their systems,
they now have this tool in their arsenal,

00:39:53.880 --> 00:39:55.480
the 64-bit services.

00:39:56.310 --> 00:39:58.820
Next, I'm going to bring up Dr.

00:39:58.820 --> 00:40:02.270
Ernie Prabhakar to talk
about Ruby on Rails.

00:40:02.690 --> 00:40:04.450
All right, thank you all very much.

00:40:04.530 --> 00:40:07.620
We're very excited with the
inclusion of Ruby All Rails.

00:40:07.620 --> 00:40:11.000
How many people have been doing at
least a little bit with Ruby On Rails?

00:40:11.010 --> 00:40:13.800
How many people have never
heard of Ruby two years ago?

00:40:13.800 --> 00:40:16.820
Yeah,
and so it's a really interesting thing.

00:40:16.820 --> 00:40:19.750
And as most of you know,
the Rails community have been very

00:40:19.750 --> 00:40:22.760
aggressive adopters of Mac OS X,
and the Mac community has also

00:40:22.990 --> 00:40:26.720
been very excited about embracing
the power of Ruby on Rails.

00:40:26.970 --> 00:40:29.780
And with Mac OS X and
Leopard and Leopard Server,

00:40:29.780 --> 00:40:33.850
we're really trying to make it even
easier to develop full-flown web

00:40:33.850 --> 00:40:36.820
applications and not just develop them,
but also deploy them,

00:40:36.820 --> 00:40:39.330
which has historically been
a greater challenge in the

00:40:39.330 --> 00:40:41.160
web development community.

00:40:41.160 --> 00:40:43.440
And in order to demonstrate
the power of this,

00:40:43.440 --> 00:40:46.170
we were gonna bring up a trained monkey
to show you that they could build a

00:40:46.170 --> 00:40:49.600
Rails application in five minutes,
but we thought that would be too easy,

00:40:49.630 --> 00:40:51.610
so we're gonna have a
marketing person build a

00:40:51.610 --> 00:40:54.160
Rails application in a few seconds.

00:40:54.250 --> 00:40:57.740
So this is Leopard Server,
and I'm just gonna go ahead,

00:40:57.740 --> 00:41:00.680
and as you know,
Rails uses a generational approach

00:41:00.680 --> 00:41:02.780
where it generates scaffolds and code.

00:41:02.780 --> 00:41:05.500
Now, this is not the evil code
generation which creates code

00:41:05.500 --> 00:41:07.080
you cannot look at or touch.

00:41:07.080 --> 00:41:10.280
It's the good code generation that
gives you a starting place to build

00:41:10.280 --> 00:41:12.700
your own application functionality.

00:41:12.740 --> 00:41:16.900
So I'm gonna create a Rails application
that I'm gonna label cars.

00:41:17.230 --> 00:41:20.500
And this creates a bunch of files for me,
and if I open that up

00:41:20.540 --> 00:41:22.210
in the finder I can see

00:41:24.190 --> 00:41:26.300
and David P.

00:41:26.300 --> 00:41:31.220
I'll go ahead and change into there.

00:41:31.220 --> 00:41:35.220
And then I'll run a generator
and I'll create my model objects.

00:41:35.220 --> 00:41:38.510
And Rails subscribes to the model
view controller paradigm that's very

00:41:38.560 --> 00:41:40.680
popular in web objects and Cocoa.

00:41:40.920 --> 00:41:43.760
And it'll build my model objects for me.

00:41:43.840 --> 00:41:48.350
Actually, I should build a model
object for the car.

00:41:48.940 --> 00:41:52.200
and that creates a series of files
including this thing called a migration.

00:41:52.200 --> 00:41:55.620
In order to make it very
easy to work with databases,

00:41:55.620 --> 00:41:58.450
Rails uses the concept of a migration,
not just for translating

00:41:58.450 --> 00:42:01.330
between one schema and another,
but also in creating the

00:42:01.330 --> 00:42:02.840
schemas in the first place.

00:42:02.890 --> 00:42:09.340
So what I'm gonna go ahead and
do is go into the database.

00:42:09.800 --> 00:42:23.600
[Transcript missing]

00:42:23.800 --> 00:42:27.610
If people can read that or not,
let me just bring up a font

00:42:27.610 --> 00:42:31.220
panel and make that a little
easier for people to see.

00:42:36.300 --> 00:42:40.110
If people can read that or not,
let me just bring up a font

00:42:40.110 --> 00:42:43.270
panel and make that a little
easier for people to see.

00:42:44.100 --> 00:43:57.500
[Transcript missing]

00:43:57.600 --> 00:44:20.000
[Transcript missing]

00:44:21.450 --> 00:44:28.580
And that'll give me a URL and
I will go ahead and bring that up,

00:44:28.680 --> 00:44:33.060
pull that into my web browser,
and you'll see here I've got

00:44:33.170 --> 00:44:34.420
my basic web application.

00:44:34.420 --> 00:44:37.930
You can see here it's
running on Mac OS X Server.

00:44:38.200 --> 00:44:40.760
And then I can go ahead and go
to my new controller that was

00:44:40.760 --> 00:44:42.650
automatically generated for me.

00:44:42.650 --> 00:44:45.070
And I have my full blown web
application running in Ruby on

00:44:45.070 --> 00:44:47.100
Rails on Mac OS X Server.

00:44:47.250 --> 00:44:49.430
And to show you that I can
generate real code in that,

00:44:49.560 --> 00:44:53.260
I'll go ahead and create
my own favorite car.

00:44:54.740 --> 00:44:59.120
And that's being built automatically
and you can do all your standard CRUD,

00:44:59.230 --> 00:45:02.490
create, retrieve, update,
delete operations directly using

00:45:02.490 --> 00:45:06.110
the scaffold and then I can go
in and modify the RHTML templates

00:45:06.810 --> 00:45:12.460
to add specific lookup and
HTML wizardry or Ajax functionality.

00:45:12.460 --> 00:45:15.860
Or I can edit the Ruby files
in the backend to do business

00:45:15.930 --> 00:45:17.580
logic of various kinds.

00:45:17.580 --> 00:45:20.050
Now this is the development side and
this is what has made Rails such a

00:45:20.070 --> 00:45:22.200
popular web application framework.

00:45:22.200 --> 00:45:25.040
And with tools like TextMate
and things like that,

00:45:25.040 --> 00:45:27.200
it's made it a very popular
tool on the Macintosh for

00:45:27.200 --> 00:45:29.140
developing Rails applications.

00:45:29.140 --> 00:45:31.450
Historically though,
people who had to deploy

00:45:31.450 --> 00:45:33.720
Rails applications had to
use various different tools

00:45:33.720 --> 00:45:35.260
and various other platforms.

00:45:35.260 --> 00:45:38.090
What we've done with
Mac OS X Server is make it as easy

00:45:38.160 --> 00:45:42.860
to deploy Rails applications as it
is to develop Rails applications.

00:45:42.900 --> 00:45:45.300
So what I'm gonna do is show you
the new feature of Server Admin

00:45:45.300 --> 00:45:47.680
that Al just talked about and I've
never used this before so let's

00:45:47.680 --> 00:45:51.660
see how well it works in real time.

00:45:51.660 --> 00:45:55.620
And you may need to walk me through--

00:45:55.990 --> 00:46:01.460
My web server here, let's see,
we have our web server,

00:46:01.460 --> 00:46:06.210
we have our settings,
and we have... So I saw an invalid

00:46:06.280 --> 00:46:08.550
serial number message there.

00:46:08.550 --> 00:46:11.930
Let's switch to the backup
demo machine if we can.

00:46:11.940 --> 00:46:13.640
That's our laptop.

00:46:13.670 --> 00:46:17.180
This is demo 3, I believe it is.

00:46:17.420 --> 00:46:19.600
- Okay, there we go.

00:46:19.600 --> 00:46:23.410
So, let's go back to the beginning.

00:46:26.000 --> 00:46:27.200
Up to my demo here.

00:46:27.200 --> 00:46:30.700
And so we have enabled the
reverse proxy and we want it to

00:46:30.700 --> 00:46:33.000
be on the cars application path.

00:46:33.000 --> 00:46:36.640
And let's go ahead and press
the plus button which should

00:46:36.700 --> 00:46:39.050
bring up our server URL browser.

00:46:40.910 --> 00:46:45.580
and we'll see here... So you're not
running Mongrel on this machine,

00:46:45.640 --> 00:46:46.440
so let's start Mongrel.

00:46:46.440 --> 00:46:51.990
Oh, okay,
so I'll go ahead and start Mongrel Rails.

00:46:53.970 --> 00:46:58.680
Tell it to start and I'll
give it a separate port so

00:46:58.680 --> 00:47:01.190
I can find it easily enough.

00:47:03.480 --> 00:47:05.520
So it's bringing up Mongrels in
a port and we've added a five

00:47:05.520 --> 00:47:09.890
line patch to Mongrel Rails to
allow it to register on Bonjour.

00:47:09.970 --> 00:47:11.580
And we'll be sharing that with
the Mongrels community if they

00:47:11.580 --> 00:47:15.100
want to pick that up since there's
very good Ruby bindings for

00:47:15.100 --> 00:47:18.240
Bonjour and Bonjour now that it's
Apache licensed should be available

00:47:18.240 --> 00:47:21.100
on even more platforms going forward.

00:47:21.170 --> 00:47:24.460
And then with that,
then I can go ahead and

00:47:24.600 --> 00:47:27.980
bring up my proxy and

00:47:28.400 --> 00:47:30.640
It might need a minute or a
refresh in order to find it.

00:47:30.640 --> 00:47:33.260
Okay, we've got a second to refresh.

00:47:33.280 --> 00:47:35.590
Build the suspense.

00:47:35.770 --> 00:47:39.880
And there is my server URL.

00:47:39.950 --> 00:47:43.950
And let's bring up another window.

00:47:49.470 --> 00:47:54.530
And having a second proxy since you can't
do proxy balancing with only one proxy.

00:47:54.530 --> 00:47:55.310
And that's all there is to it.

00:47:55.340 --> 00:47:56.400
There's nothing fancy I have to do.

00:47:56.400 --> 00:47:58.830
I just give it a different
argument to the mongrel rails.

00:47:58.930 --> 00:48:02.260
The exact same web server I'm using
for my development and testing purposes

00:48:02.280 --> 00:48:05.950
I can use as my gateway for proxying,
making it very easy to do

00:48:05.950 --> 00:48:08.280
debugging and evaluation.

00:48:08.410 --> 00:48:13.120
And if I go ahead and search
here and give it a few seconds,

00:48:13.120 --> 00:48:16.590
let's see how long it
takes for that to show up.

00:48:18.750 --> 00:48:19.960
And there we go.

00:48:20.190 --> 00:48:22.680
Both proxies are sitting there live.

00:48:22.700 --> 00:48:29.650
Let me go ahead and save that.

00:48:29.710 --> 00:48:32.650
And then bring up my web browser.

00:48:34.800 --> 00:48:37.630
In this case now,
I'm not going to go to the,

00:48:37.630 --> 00:48:41.200
specify a port number,
I'm just going to go directly to

00:48:41.200 --> 00:48:46.510
my standard Apache web server,
which is running on Mac OS X Server.

00:48:47.960 --> 00:48:49.920
And we see it there,
and then I just go ahead and

00:48:49.920 --> 00:48:52.180
tell it to go to the cars path.

00:48:52.190 --> 00:48:55.750
And let me bring up,
move my proxies side by side so

00:48:55.810 --> 00:48:58.010
you can see what they're doing.

00:49:10.650 --> 00:49:16.990
And when I hit that URL,
you'll see it first hits one,

00:49:17.950 --> 00:49:19.750
And it should be, and then the other.

00:49:19.750 --> 00:49:25.740
So you can see that as we switch back
and forth between repeated instances,

00:49:25.740 --> 00:49:28.340
we are automatically with essentially
zero effort setting up a fully

00:49:28.340 --> 00:49:32.900
distributed multi-host web application
server in a matter of minutes using

00:49:32.900 --> 00:49:34.530
Ruby on Rails on Mac OS X Server.

00:49:34.630 --> 00:49:36.650
Thank you.

00:49:42.100 --> 00:49:43.530
and I'll just go right into
the next slide and show you

00:49:43.540 --> 00:49:44.670
so we can introduce David.

00:49:44.670 --> 00:49:45.780
All right.

00:49:45.780 --> 00:49:47.600
Are the slides OK?

00:49:47.600 --> 00:49:49.770
Oh, yes.

00:49:50.980 --> 00:49:55.430
We're now going to have a
special surprise for you.

00:49:55.550 --> 00:49:59.040
Creator of Ruby on Rails,
David Heinemeier Hansson is

00:49:59.160 --> 00:50:03.310
going to be giving us a brief
video presentation here.

00:50:05.370 --> 00:50:08.530
Hi everybody,
my name is David Heinemeier Hansson.

00:50:08.530 --> 00:50:12.230
I am the creator of Ruby on
Rails and I'm a partner at web

00:50:12.230 --> 00:50:15.580
application firm 37signals.

00:50:15.580 --> 00:50:20.650
I'm here today in absence, kind of,
to talk to you about

00:50:21.190 --> 00:50:23.300
Ruby on Rails in Leopard.

00:50:23.330 --> 00:50:26.600
First a moment or two
about Ruby on Rails,

00:50:26.600 --> 00:50:31.530
how we've gotten to where we are and
the kind of success we're seeing.

00:50:31.540 --> 00:50:38.020
Ruby on Rails is of course a web
application framework built for

00:50:38.120 --> 00:50:44.300
developers who enjoy beautiful code
and like to take pride in what they do.

00:50:44.460 --> 00:50:47.480
And quite a few developers
seem to have picked up on

00:50:47.480 --> 00:50:51.300
that notion of beautiful code,
motivation and happiness.

00:50:51.300 --> 00:50:53.300
So far we've had a lot of
success with Ruby on Rails.

00:50:53.300 --> 00:50:58.300
We've had over half a million
downloads of the Ruby on Rails system.

00:50:58.390 --> 00:51:03.040
And that's of course drawn in
a lot of excellent support from

00:51:03.040 --> 00:51:09.270
other areas of the industry,
especially from publishers.

00:51:09.300 --> 00:51:14.270
The first Ruby on Rails book,
Agile Web Development with Rails,

00:51:14.350 --> 00:51:21.300
has already sold over,
I think it's almost 50,000 copies by now.

00:51:21.300 --> 00:51:23.160
Which is pretty amazing.

00:51:23.360 --> 00:51:25.820
And it's been around
for a little unknown,

00:51:25.820 --> 00:51:29.320
at least at the time,
language like Ruby and even

00:51:29.320 --> 00:51:33.300
less so something like Rails.

00:51:33.450 --> 00:51:38.860
But the success of that book and other
books in the same vein has brought

00:51:38.860 --> 00:51:44.120
on amazing publisher support from
people like Tim O'Reilly and most of

00:51:44.120 --> 00:51:47.290
the other major publishers out there.

00:51:47.320 --> 00:51:49.940
So we're seeing a lot of uptake among
regular programmers who are just

00:51:49.980 --> 00:51:51.300
trying to get their hands on Ruby.

00:51:51.300 --> 00:51:52.220
And that's a big thing.

00:51:52.300 --> 00:51:55.510
And we're seeing a lot of programmers
who are just picking up Ruby on

00:51:55.510 --> 00:51:57.300
Rails because they really like it.

00:51:57.340 --> 00:52:01.270
And we're seeing a lot of awareness
being spread from all of these books

00:52:01.270 --> 00:52:06.300
being published and all of the articles
we're seeing and so on and so forth.

00:52:06.300 --> 00:52:10.370
And I think that's a really
interesting notion and plays

00:52:10.420 --> 00:52:15.440
very well with the recent,
or perhaps not so recent,

00:52:15.610 --> 00:52:20.300
but enormously strong uptake of
the Apple development platform

00:52:20.300 --> 00:52:21.300
within programming circles.

00:52:21.300 --> 00:52:23.300
And especially within
web programming circles.

00:52:23.300 --> 00:52:28.610
I see a lot of similarities between
the reasons why people choose to

00:52:28.610 --> 00:52:34.300
use a Mac and the reasons for why
people choose to use Ruby and Rails.

00:52:34.390 --> 00:52:38.270
And I think a part of that is just
the same sense of shared aesthetics.

00:52:38.300 --> 00:52:44.290
Apple cares deeply about the user
experience of the systems they build.

00:52:44.410 --> 00:52:48.240
And we've kind of tried to take
the same kind of mentality,

00:52:48.240 --> 00:52:50.300
the same kind of consumer.

00:52:50.300 --> 00:52:51.300
It just works.

00:52:51.300 --> 00:52:55.300
Everything is included in the
box approach to web development.

00:52:55.300 --> 00:52:59.540
Which, at least in the past,
used to be way more of a geeky,

00:52:59.540 --> 00:53:04.190
engineering, it has to be hard to be
right approach to things.

00:53:04.300 --> 00:53:10.090
So it's really quite natural for
us in the Ruby and Rails camp to

00:53:10.090 --> 00:53:17.290
see Apple as something that's very
similar to what it is that we're doing.

00:53:17.350 --> 00:53:23.300
And thus it's also that much more...
rewarding to see Apple today.

00:53:23.300 --> 00:53:28.300
And yesterday announced that Ruby and
Rails is going to ship in Lepid.

00:53:28.300 --> 00:53:34.300
Both the client and the server versions
as part of the development toolkit.

00:53:35.750 --> 00:53:40.320
And just as an example of how
the uptake of Apple is within

00:53:40.320 --> 00:53:46.700
the Ruby and Rails community,
all of the 12 core contributors

00:53:46.700 --> 00:53:50.110
to Rails are running on Macs.

00:53:50.110 --> 00:53:56.720
And the vast majority of all developers
so far who've been picking up Ruby and

00:53:56.720 --> 00:53:58.190
Rails have been running on Macs too.

00:53:58.320 --> 00:54:02.530
We recently held the
RailsConf conference in Chicago and

00:54:02.530 --> 00:54:09.770
I think we had something like a 95%
adoption of Apple in the audience.

00:54:09.770 --> 00:54:14.560
So really, really strong Apple commitment
from within the Rails camp.

00:54:14.560 --> 00:54:21.610
So that of course makes us all the more
happy to see Apple re-prossecate and ship

00:54:21.610 --> 00:54:25.320
Rails with the next upcoming OS release.

00:54:25.360 --> 00:54:32.660
So the parts of dealing with integration
i was excited about it is that

00:54:33.790 --> 00:54:38.530
Apple is not just choosing to jump on
Ruby on Rails and just throw it in there,

00:54:38.550 --> 00:54:40.290
and then you can figure out the rest.

00:54:40.320 --> 00:54:46.580
They're actually actively engaged in
picking the best practices of right now.

00:54:46.580 --> 00:54:50.560
What is the preferred way of
getting Ruby on Rails up and running

00:54:50.560 --> 00:54:54.900
in both development environment
and in a deployment situation?

00:54:54.900 --> 00:54:59.680
And that's something recently
in the Rails community have

00:54:59.680 --> 00:55:02.010
started to focus a lot on.

00:55:02.410 --> 00:55:05.960
There's a new Ruby-based
web server called Mongrel,

00:55:06.040 --> 00:55:09.980
which is showing a whole new way
for us in terms of how do we get

00:55:09.980 --> 00:55:11.520
these services up and running.

00:55:11.540 --> 00:55:15.960
It used to be in the past that fast
CGI and similar somewhat outdated

00:55:16.520 --> 00:55:22.000
protocols were necessary in order to get
the speed we needed for Ruby on Rails.

00:55:22.020 --> 00:55:27.370
But Mongrel is just as fast as fast CGI,
and it's much easier to deal

00:55:27.370 --> 00:55:30.260
with because it's just all HTTP.

00:55:30.780 --> 00:55:34.550
And that's the big message that we
want to send out and help spread

00:55:34.910 --> 00:55:39.230
is that HTTP doesn't necessarily
just need to be an external format.

00:55:39.240 --> 00:55:43.090
It can also be an excellent way
of communicating inside of your

00:55:43.090 --> 00:55:45.780
application between various components.

00:55:45.780 --> 00:55:50.910
So the fact that Lepid ships with
Apache 2.2 and the Mach proxy

00:55:50.910 --> 00:55:54.080
balancer plays right into that vision.

00:55:54.080 --> 00:55:57.560
It plays right into the vision
that proxies are the way to go.

00:55:57.560 --> 00:56:00.230
HTTP is the new pipe.

00:56:00.570 --> 00:56:04.040
Not just for the external web,
but for the internal web as well.

00:56:04.040 --> 00:56:09.350
And thanks to all the work the
guys at Apple have been doing for

00:56:09.660 --> 00:56:16.020
making this a lot easier to set up,
it also drastically reduces the barriers

00:56:16.020 --> 00:56:23.140
of entry for setting up a world-class,
scalable cluster for a Rails application.

00:56:23.140 --> 00:56:26.270
It makes it much easier for
somebody to take something

00:56:26.500 --> 00:56:30.020
they've developed on their own,
throw it on.

00:56:30.260 --> 00:56:33.650
And then they can just go and get it up
and running in a Mac box and get it up

00:56:33.660 --> 00:56:37.850
and running in something that's just as
good as all the huge deployments we've

00:56:37.850 --> 00:56:38.630
been seeing of Ruby and Rails so far.

00:56:38.640 --> 00:56:41.880
That has really been a sore
point for Rails for some time.

00:56:41.880 --> 00:56:46.050
The fact that we make
development so incredibly easy,

00:56:46.290 --> 00:56:50.700
and then you get shell shock
basically when you try to jump back

00:56:50.710 --> 00:56:52.560
in the old world of deployment.

00:56:52.560 --> 00:56:55.900
Because deployment on Rails is
in some parts just as deployment

00:56:55.900 --> 00:56:57.440
on every other platform.

00:56:57.440 --> 00:56:59.180
Terribly complicated.

00:57:00.000 --> 00:57:04.390
So the fact that we now have Mongrel,
the fact that Apple and others

00:57:04.390 --> 00:57:10.660
are doing such great work of
endorsing this vision of HTTP being

00:57:10.660 --> 00:57:15.420
the premier way of getting your
application up and running internally,

00:57:15.420 --> 00:57:16.520
is just awesome.

00:57:16.520 --> 00:57:21.770
So hopefully all of this support in Lepid
will mean that even more people will

00:57:21.770 --> 00:57:24.560
pick up Rails development on the Mac.

00:57:24.600 --> 00:57:30.740
And it'll hopefully also mean that
Apple will get more... limelight

00:57:30.740 --> 00:57:32.040
in the deployment scenario.

00:57:32.040 --> 00:57:35.220
So far there hasn't been too
many deployments of major

00:57:35.220 --> 00:57:37.300
Rails applications on Apple hardware.

00:57:37.300 --> 00:57:41.250
But thanks to the new XSERVs,
which proved to be an excellent

00:57:41.290 --> 00:57:44.580
performance to price ratio,
and also thanks to the

00:57:44.650 --> 00:57:47.260
new features in Lepid,
I'm really hoping that we're

00:57:47.260 --> 00:57:52.300
going to see a lot more uptake on
deployment on the Lepid server.

00:57:52.300 --> 00:57:56.880
So with that,
I'd just like to end my little speech

00:57:56.880 --> 00:57:59.480
here and say thank you all for coming.

00:57:59.480 --> 00:58:00.900
Thank you all for coming to this session.

00:58:00.940 --> 00:58:05.880
And thank you for showing interest in
web development on the Apple computer.

00:58:05.880 --> 00:58:10.360
And thanks to Apple for being
such a great support of the

00:58:10.380 --> 00:58:12.740
Ruby on Rails framework.

00:58:12.740 --> 00:58:13.830
Thanks and enjoy the conference.

00:58:22.900 --> 00:58:24.390
So now we're ready for some QA.

00:58:24.400 --> 00:58:27.070
We'd like to thank David Heinemeier
Hansson for providing that video for

00:58:27.070 --> 00:58:30.260
us and we're very happy that he's
as enthusiastic about the platform.