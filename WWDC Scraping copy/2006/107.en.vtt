WEBVTT

00:00:11.940 --> 00:00:12.660
I'm Peter Bierman.

00:00:12.660 --> 00:00:14.890
I work on the Installation
and Setup group.

00:00:14.890 --> 00:00:19.190
I'm going to be talking to you today
about software installation strategies.

00:00:19.790 --> 00:00:22.460
Now,
I'm going to mostly be covering MacÂ OSÂ X,

00:00:22.460 --> 00:00:25.200
10.4, Tiger,
because all of you are hoping

00:00:25.200 --> 00:00:26.640
to ship your application soon.

00:00:26.700 --> 00:00:28.660
I'm going to be covering
creating PackageMaker,

00:00:28.700 --> 00:00:31.690
creating packages with
a new tool we've got,

00:00:31.740 --> 00:00:32.700
PackageMaker 3.0.

00:00:32.700 --> 00:00:34.700
It's brand new, coming out in Leopard.

00:00:34.700 --> 00:00:36.590
We're hoping to have
it also run on Tiger.

00:00:36.700 --> 00:00:39.630
I'm going to cover various ways to
deliver your software to your customers,

00:00:39.710 --> 00:00:41.700
things the installer can do.

00:00:41.700 --> 00:00:44.610
I'm going to go over a
bunch of installer features,

00:00:44.680 --> 00:00:48.690
some of the more confusing things that
people have asked us questions about.

00:00:48.860 --> 00:00:50.560
And to do this,
I'm going to break down the

00:00:50.560 --> 00:00:53.280
topic into four major sections.

00:00:53.320 --> 00:00:55.150
I'm going to talk about
creating your software,

00:00:55.280 --> 00:00:57.970
creating your packages,
delivering those packages,

00:00:58.060 --> 00:01:00.650
installing the packages, and upgrading.

00:01:00.750 --> 00:01:03.580
So let's talk first
about creating packages.

00:01:04.620 --> 00:01:07.880
First,
the reason you create packages is to walk

00:01:07.890 --> 00:01:10.000
the user through the install process.

00:01:10.170 --> 00:01:13.360
A lot of users are somewhat
intimidated by installing software,

00:01:13.360 --> 00:01:16.620
by modifying their machine,
and an installer package

00:01:16.890 --> 00:01:20.700
gives you the opportunity to
present this task in an easy,

00:01:20.780 --> 00:01:24.130
hand-holding kind of method,
where the user sees each step,

00:01:24.130 --> 00:01:28.240
they expect what's happening,
they know what to do next.

00:01:28.500 --> 00:01:31.360
The installer also has a bunch of
features related to some of the

00:01:31.360 --> 00:01:34.340
more advanced techniques getting
software onto the user's machine.

00:01:34.340 --> 00:01:36.620
For example,
the installer can allow the user to

00:01:36.720 --> 00:01:40.280
authenticate as an administrator,
and you can install files as root,

00:01:40.280 --> 00:01:43.050
which the user wouldn't
normally be able to do.

00:01:43.310 --> 00:01:46.910
The installer also has the ability
to find relocated files if the user

00:01:46.910 --> 00:01:49.390
drags their application somewhere
else after they've installed it.

00:01:49.450 --> 00:01:51.460
The next version of your
installer can find that,

00:01:51.460 --> 00:01:54.720
install it where they chose to put it,
and there's a bunch of other features.

00:01:54.780 --> 00:01:58.220
So, to create packages,
the first step is you

00:01:58.380 --> 00:02:00.230
need to get organized.

00:02:00.230 --> 00:02:03.000
You need to know what you
want to present to the user.

00:02:03.000 --> 00:02:05.840
You need to know what software you're
actually going to put on the user's

00:02:05.840 --> 00:02:09.100
machine and make sure that it is what
you want to put on the user's machine.

00:02:09.100 --> 00:02:10.690
Every file is where it's supposed to be.

00:02:10.750 --> 00:02:12.350
Every permission is set the right way.

00:02:12.920 --> 00:02:15.420
So, you want to check those things out
before you create your packages.

00:02:15.420 --> 00:02:18.110
And finally,
you want to take note of any special

00:02:18.110 --> 00:02:22.280
requirements your software has,
things that you're going to check for the

00:02:22.280 --> 00:02:26.070
user before they install and inform them,
hey, you actually need an iSight

00:02:26.070 --> 00:02:28.310
camera to install this or it's
not going to be very useful,

00:02:28.310 --> 00:02:29.160
things like that.

00:02:31.090 --> 00:02:33.940
So the first step is to use PackageMaker.

00:02:33.980 --> 00:02:38.680
Now, in Leopard, I mentioned earlier,
we're introducing new PackageMaker 3.0.

00:02:38.880 --> 00:02:40.000
It's great.

00:02:40.040 --> 00:02:43.090
It's vastly improved over the
previous versions of PackageMaker.

00:02:43.280 --> 00:02:46.260
Earlier versions of PackageMaker were
more like a property list editor.

00:02:46.470 --> 00:02:48.720
They exposed all the features
of the installer in terms

00:02:48.820 --> 00:02:51.290
of checkboxes and pop-ups,
but it didn't really put it

00:02:51.370 --> 00:02:53.840
together in terms of what you
were trying to accomplish.

00:02:53.840 --> 00:02:56.840
The new version of PackageMaker
is much more workflow oriented.

00:02:56.910 --> 00:03:00.200
It lets you start with your software,
give it to PackageMaker,

00:03:00.200 --> 00:03:02.670
and PackageMaker gives you packages.

00:03:02.980 --> 00:03:05.940
So to see that, we're going to start out
with a demonstration.

00:03:05.980 --> 00:03:07.330
I'd like to introduce Sean Kelly.

00:03:07.410 --> 00:03:09.700
He's the engineer that's been
working on PackageMaker so

00:03:09.700 --> 00:03:11.820
hard for the last year or so.

00:03:12.090 --> 00:03:14.620
And Sean, let's see it.

00:03:14.970 --> 00:03:15.700
Thank you, Peter.

00:03:15.810 --> 00:03:18.190
Could we switch to the demo machine?

00:03:18.620 --> 00:03:19.630
Good morning, everybody.

00:03:19.780 --> 00:03:20.960
My name is Sean Kelly.

00:03:21.080 --> 00:03:23.500
I work on PackageMaker at Apple.

00:03:23.600 --> 00:03:25.500
In today's demo,
we'll create an installer

00:03:25.500 --> 00:03:28.610
for three items,
two applications, and a widget,

00:03:28.610 --> 00:03:30.500
along with some interface resources.

00:03:30.520 --> 00:03:32.510
So let's get started.

00:03:33.670 --> 00:03:35.690
As Peter suggested,
I've gathered the items

00:03:35.690 --> 00:03:38.820
for my installation,
the two applications, and the widget,

00:03:38.820 --> 00:03:40.600
along with my interface resources.

00:03:40.600 --> 00:03:44.360
So,
we'll launch the new PackageMaker 3.0,

00:03:44.360 --> 00:03:47.770
a new document will be created,
and the Install Properties

00:03:47.830 --> 00:03:49.040
dialog will appear.

00:03:49.040 --> 00:03:52.220
This dialog drives much of
PackageMaker's behavior.

00:03:52.220 --> 00:03:56.620
The Organization field is used to
pre-populate your package identifiers,

00:03:56.620 --> 00:03:59.530
while the Target determines
what PackageMaker will build.

00:03:59.540 --> 00:04:02.940
If you target Leopard,
you'll get the new Flat packages,

00:04:03.440 --> 00:04:06.690
while if you target Tiger or Panther,
you'll get the old Bundle

00:04:06.690 --> 00:04:07.980
packages or Meta packages.

00:04:07.980 --> 00:04:11.860
So today,
we'll build the WWDC Demo Installer.

00:04:11.860 --> 00:04:14.820
It's from Apple, and we'll target Tiger.

00:04:17.400 --> 00:04:21.860
This item up in the upper left corner,
which says WWDC Demo,

00:04:21.930 --> 00:04:23.820
represents your installation as a whole.

00:04:23.820 --> 00:04:26.980
So metadata,
such as your title and your description,

00:04:26.980 --> 00:04:30.010
if you need to set requirements,
you can do that here as well.

00:04:30.020 --> 00:04:33.490
To add items into PackageMaker,
you can just drag them

00:04:33.490 --> 00:04:35.270
into the Contents area.

00:04:35.280 --> 00:04:39.500
We'll see that PackageMaker has figured
out that Sketch is an application,

00:04:39.500 --> 00:04:41.940
and it's filled in some
default information for you,

00:04:41.960 --> 00:04:43.420
such as an install location.

00:04:43.660 --> 00:04:45.800
It's pulled the version
number out of the bundle.

00:04:45.800 --> 00:04:49.860
It's given you a package identifier,
a recommended authorization level.

00:04:49.860 --> 00:04:51.340
It's made it relocatable.

00:04:53.600 --> 00:04:57.290
If we go into the Contents tab,
PackageMaker will pull up

00:04:57.400 --> 00:05:00.000
the contents of your package,
and you'll be able to edit

00:05:00.000 --> 00:05:01.740
the ownership and permissions.

00:05:01.740 --> 00:05:05.230
It's very important that these be
correct and be how you want them to be

00:05:05.240 --> 00:05:07.840
on your user system when you install.

00:05:07.930 --> 00:05:10.780
Fortunately,
PackageMaker makes this easy for you.

00:05:10.780 --> 00:05:13.480
If you use the
Apply Recommendations button,

00:05:13.530 --> 00:05:18.400
PackageMaker will scan the contents of
your package and your install location,

00:05:18.400 --> 00:05:23.860
and apply the ownership and permissions
that meet our best practices guidelines.

00:05:23.870 --> 00:05:27.190
Now,
before we add the other content items,

00:05:28.260 --> 00:05:32.960
I want to show you one of
the features of PackageMaker.

00:05:33.010 --> 00:05:35.520
Instead of you having to
decide if you want a package,

00:05:35.520 --> 00:05:38.860
a meta package, or a distribution,
PackageMaker will figure that out

00:05:39.000 --> 00:05:41.990
for you based on your configuration.

00:05:42.070 --> 00:05:44.220
In Leopard,
we've introduced a new feature

00:05:44.430 --> 00:05:47.720
called Install Domains,
which allow you to install in the

00:05:47.920 --> 00:05:50.850
user's directory or on the system.

00:05:50.990 --> 00:05:53.680
Now, this only works in distributions.

00:05:53.760 --> 00:05:57.970
So if you turn any of these domains on,
you'll see that PackageMaker has changed

00:05:57.970 --> 00:06:00.900
your installation into a distribution.

00:06:01.680 --> 00:06:06.600
So now we'll add our other content items,
and again, we can just drag them in.

00:06:06.640 --> 00:06:11.260
And we'll see that PackageMaker
has figured out some default

00:06:11.260 --> 00:06:13.340
information for the widget as well.

00:06:13.380 --> 00:06:18.730
Now, of course, you can change any of
this to however you want.

00:06:18.860 --> 00:06:22.600
If you make any settings that
PackageMaker thinks will cause problems,

00:06:22.660 --> 00:06:25.120
it will give you a
warning during the build.

00:06:25.210 --> 00:06:27.370
So now we'll set our interface resources.

00:06:27.460 --> 00:06:31.060
We'll go into the properties
of the install as a whole,

00:06:31.100 --> 00:06:35.290
and we'll use the Edit Interface button,
which will bring up the Interface Editor,

00:06:35.420 --> 00:06:37.880
which is what you see is
what you get interface.

00:06:37.930 --> 00:06:40.170
What you configure here is
exactly what the user will

00:06:40.200 --> 00:06:42.810
see during their installation.

00:06:42.890 --> 00:06:45.670
So to add your resources,
you choose which one you want

00:06:45.860 --> 00:06:48.480
from the list on the left,
and then you drag your

00:06:48.480 --> 00:06:51.330
files into PackageMaker.

00:06:51.410 --> 00:06:56.360
So today we have a welcome
or an introduction.

00:06:56.770 --> 00:07:00.520
We have a read me.

00:07:00.520 --> 00:07:03.030
and we have a license.

00:07:05.750 --> 00:07:11.330
So if we build our package,
we'll save it onto the desktop.

00:07:17.230 --> 00:07:18.960
And we'll open it in the installer.

00:07:18.960 --> 00:07:21.760
And we see we have our
interface resources,

00:07:21.760 --> 00:07:27.260
our welcome, our readme, our license,
which the user has to agree to.

00:07:27.270 --> 00:07:29.300
And if we continue
through the installation,

00:07:29.310 --> 00:07:32.560
our applications will be
installed into /applications and

00:07:32.560 --> 00:07:35.880
the widget into library widgets.

00:07:36.430 --> 00:07:39.840
So before I turn it back to Peter,
I want to show you one more feature

00:07:39.840 --> 00:07:41.600
that we've introduced in PackageMaker.

00:07:41.730 --> 00:07:46.300
We've added an extensive
verification process into the build.

00:07:46.400 --> 00:07:50.700
So to show you that,
I'll open a document that I've

00:07:50.710 --> 00:07:53.840
created for the installation
that we just walked through,

00:07:53.840 --> 00:07:56.600
except that I've seeded
it with some errors.

00:07:56.670 --> 00:07:59.590
So if we build this...

00:08:02.000 --> 00:08:06.140
We'll see that PackageMaker comes
up with some errors and warnings.

00:08:06.140 --> 00:08:08.940
If we expand one of these,
we'll see what the errors are,

00:08:08.940 --> 00:08:11.880
and we'll also see these
magnification buttons.

00:08:11.910 --> 00:08:14.380
If we click one of those,
PackageMaker will change

00:08:14.470 --> 00:08:17.210
back to the main interface,
and it'll spotlight the exact

00:08:17.210 --> 00:08:21.580
item in the interface where
you need to make your changes.

00:08:27.200 --> 00:08:33.160
You can then bring up the Build Results
window from the Project menu,

00:08:33.170 --> 00:08:35.120
and you get the same interface.

00:08:35.120 --> 00:08:37.940
And you can click through
all of your errors,

00:08:37.940 --> 00:08:41.100
and then just click through in the
interface and make your changes.

00:08:41.100 --> 00:08:44.010
So that's a brief introduction
to PackageMaker 3.0,

00:08:44.010 --> 00:08:46.100
and I'm going to turn it back to Peter.

00:08:52.600 --> 00:08:57.710
Thanks, Sean.

00:08:57.910 --> 00:09:01.220
That's a vast improvement over
earlier versions of PackageMaker,

00:09:01.220 --> 00:09:03.640
and I think you can see that our
investment in PackageMaker over the

00:09:03.640 --> 00:09:05.600
last few years is really paying off.

00:09:05.600 --> 00:09:08.410
We're committed to continuing to
improve PackageMaker to support

00:09:08.750 --> 00:09:12.590
features as we add them to the
installer and make it easier for you

00:09:12.680 --> 00:09:15.600
to make packages using our tools.

00:09:15.650 --> 00:09:17.600
So that's creating packages.

00:09:17.830 --> 00:09:20.630
Let's talk now about delivering packages.

00:09:21.420 --> 00:09:25.130
Now, packages in MacÂ OSÂ X are bundles.

00:09:25.290 --> 00:09:28.900
That means they're directories with
other directories and files inside them.

00:09:29.010 --> 00:09:31.590
And that means that generally when
you distribute them to your customers

00:09:31.880 --> 00:09:34.530
over the Internet or via email,
you have to wrap them in

00:09:34.630 --> 00:09:37.060
another container like a
zip file or a disk image.

00:09:37.120 --> 00:09:40.550
Also, in Leopard, in 10.5,
we're going to be introducing a solution

00:09:40.550 --> 00:09:43.140
to this that doesn't involve containers,
flat packages,

00:09:43.290 --> 00:09:44.990
and I'll talk a little bit about that.

00:09:46.640 --> 00:09:48.000
First, zip files.

00:09:48.010 --> 00:09:51.240
Now,
zip files are really easy to understand.

00:09:51.260 --> 00:09:54.300
You just go to the Finder,
click on an object in the Finder,

00:09:54.300 --> 00:09:59.150
select it, Control-click or right-click
if you have a two-button mouse,

00:09:59.150 --> 00:10:05.080
and you see the Create Archive command
there in the Finder's contextual menu.

00:10:05.720 --> 00:10:10.120
The Finder will create you a zip
archive of whatever you have selected.

00:10:10.120 --> 00:10:13.000
Now, the zip archive,
when the user double-clicks it,

00:10:13.000 --> 00:10:15.560
it'll just expand back into
whatever it was before.

00:10:15.560 --> 00:10:18.590
So, there's no opportunity for you
to add additional user interface

00:10:18.590 --> 00:10:21.230
explaining to the user what
they're supposed to do next.

00:10:21.260 --> 00:10:23.370
There's no way for you to
add a license agreement,

00:10:23.370 --> 00:10:24.910
any other sorts of instructions.

00:10:24.950 --> 00:10:26.560
It's just what you see is what you get.

00:10:26.590 --> 00:10:28.940
One file, multi-files in, one file out.

00:10:30.490 --> 00:10:32.780
Next step up from that
is to use a Disk Image.

00:10:32.890 --> 00:10:36.960
Now, Disk Images are the recommended
way of delivering your software's

00:10:37.070 --> 00:10:40.400
simple applications to customers,
as we currently document them.

00:10:40.400 --> 00:10:43.720
Disk Images support a lot
of file system features,

00:10:43.720 --> 00:10:47.400
because they are, in a simple sense,
a file system.

00:10:47.430 --> 00:10:50.400
They handle resource forks, for example,
but not special authorization.

00:10:50.400 --> 00:10:53.450
They won't ask the user to
authenticate as an admin so that

00:10:53.450 --> 00:10:55.210
they can install things as root.

00:10:55.400 --> 00:10:58.180
But Disk Images do support a
few installer-related features,

00:10:58.180 --> 00:11:02.520
like the ability to display a license
agreement or have a background image,

00:11:02.520 --> 00:11:04.510
which you can use to
kind of inform the user,

00:11:04.510 --> 00:11:07.940
"Hey, you should probably do this."
A good example of that,

00:11:07.940 --> 00:11:11.180
here we see a screenshot
of the Firefox Disk Image,

00:11:11.420 --> 00:11:14.400
and on the left side of that
you see the Firefox application.

00:11:14.400 --> 00:11:16.110
And in the background,
there's a background picture

00:11:16.360 --> 00:11:18.570
that's meant to imply to the user
that they're supposed to drag

00:11:18.570 --> 00:11:20.400
Firefox into their applications folder.

00:11:20.400 --> 00:11:24.400
Now, all of you probably understand that.

00:11:24.400 --> 00:11:27.400
I would wonder how many of
our users understand that.

00:11:27.400 --> 00:11:33.400
So this may confuse novice users,
but it is a pretty good user experience

00:11:33.400 --> 00:11:36.400
in terms of the user can control what's
installed and where it's installed.

00:11:36.400 --> 00:11:40.230
To find out more about Disk Images,
you can look at the Disk Images man page,

00:11:40.270 --> 00:11:41.400
which is HDI util.

00:11:41.400 --> 00:11:44.390
Now, there are improved Disk Images.

00:11:44.450 --> 00:11:46.400
These are called
Internet-enabled Disk Images.

00:11:46.460 --> 00:11:49.370
And these will automatically,
when downloaded by Safari,

00:11:49.400 --> 00:11:54.410
mount themselves, extract their content,
unmount themselves,

00:11:54.410 --> 00:11:56.390
and move the Disk Image file
to the trash.

00:11:56.510 --> 00:11:59.400
If the contents are an
individual installer package,

00:11:59.400 --> 00:12:01.850
that will be opened in the installer,
and the user will go straight from

00:12:01.850 --> 00:12:05.400
clicking on a link in their web
page to being in the installer.

00:12:05.400 --> 00:12:07.400
That's an improvement.

00:12:07.410 --> 00:12:11.390
And it's such an improvement that we'd
like to support that directly in Leopard

00:12:11.520 --> 00:12:13.400
without having to use Disk Images at all.

00:12:13.400 --> 00:12:16.360
But until then, to see how to do this,
you can look again at

00:12:16.450 --> 00:12:18.890
the HDI util man page,
and the command itself is

00:12:18.890 --> 00:12:22.400
HDI util Internet-enabled,
and then your Disk Image.

00:12:23.270 --> 00:12:26.660
So those two things sort of reveal
one of the flaws in the installer,

00:12:26.660 --> 00:12:31.200
one of the areas where it doesn't
quite allow the seamless integration

00:12:31.200 --> 00:12:33.500
between the web and installing software.

00:12:33.500 --> 00:12:37.920
And so to rectify that, in Leopard,
in 10.5, we're introducing flat packages.

00:12:37.920 --> 00:12:41.190
Now, flat packages are just
like our regular packages.

00:12:41.200 --> 00:12:45.350
They have the same file name extension,
.pkg, .mpkg,

00:12:45.350 --> 00:12:47.840
but they are an individual file.

00:12:47.840 --> 00:12:48.540
They're not a directory.

00:12:48.540 --> 00:12:50.410
The file format is ZAR.

00:12:50.420 --> 00:12:53.940
This is an open source project
that's been worked on by a bunch of

00:12:53.940 --> 00:12:58.290
former and current Apple employees,
and it's not limited to the Macintosh.

00:12:58.300 --> 00:13:00.720
The goal, actually,
of the ZAR project is to support

00:13:00.720 --> 00:13:03.530
creating archives that support
all of the extended file system

00:13:03.620 --> 00:13:07.030
attributes of all of the various
operating systems that are out there.

00:13:07.060 --> 00:13:09.790
In particular,
it makes a good mesh for what we

00:13:09.790 --> 00:13:13.440
want to do with the installer,
so we use the file directly.

00:13:13.440 --> 00:13:17.000
The single flat file can
contain one or many packages,

00:13:17.000 --> 00:13:19.010
and this enables a
feature that we'll talk,

00:13:19.050 --> 00:13:21.230
we'll cover in even more detail,
in our other session on

00:13:21.230 --> 00:13:23.530
Thursday afternoon called
Quick Start Installs.

00:13:25.240 --> 00:13:28.170
So that's delivering
packages to your customers.

00:13:28.270 --> 00:13:30.710
Let's talk about what happens
when the user gets your package

00:13:30.910 --> 00:13:33.030
and now goes to install it.

00:13:33.230 --> 00:13:34.720
So what can the installer do?

00:13:34.900 --> 00:13:38.040
Well, some of the most significant
features of the installer are these.

00:13:38.090 --> 00:13:41.020
The installer can find
relocatable software.

00:13:41.300 --> 00:13:43.090
The installer can enforce requirements.

00:13:43.250 --> 00:13:44.730
The installer can allow customization.

00:13:44.730 --> 00:13:46.480
The user can pick some
parts of your software,

00:13:46.480 --> 00:13:46.960
but not others.

00:13:46.960 --> 00:13:51.580
And the installer also supports custom
plugins that you can create and give

00:13:51.580 --> 00:13:54.280
the installer a unique user experience.

00:13:54.790 --> 00:13:56.770
So, relocatable software,
what do I mean by that?

00:13:56.930 --> 00:14:00.470
Well, on a Macintosh,
applications don't have any particular

00:14:00.470 --> 00:14:02.690
need to run from any particular location.

00:14:02.690 --> 00:14:05.080
Most users are used to seeing
all of their applications

00:14:05.080 --> 00:14:07.230
in the Applications folder,
but there's also the

00:14:07.230 --> 00:14:10.320
Applications Utilities folder,
and you might have noticed that a lot of

00:14:10.470 --> 00:14:14.090
Apple's applications actually run out of
a Core Services folder somewhere else.

00:14:14.820 --> 00:14:16.560
So, that's how we ship the OS.

00:14:16.560 --> 00:14:20.890
Users are free to configure their
Applications folder however they'd like.

00:14:21.010 --> 00:14:22.540
Maybe they want an
Internet Utilities folder,

00:14:22.550 --> 00:14:24.090
maybe they have a
Graphic Utilities folder,

00:14:24.090 --> 00:14:25.930
maybe they just have a
big mess on their desktop.

00:14:25.940 --> 00:14:28.890
Whatever they have,
this is the Macintosh ease of use.

00:14:29.110 --> 00:14:32.180
The user is in charge of their machine,
they can do what they

00:14:32.300 --> 00:14:33.860
want with their machine.

00:14:33.860 --> 00:14:37.060
And so, it's important for you
to support this ability.

00:14:37.080 --> 00:14:39.920
Now, to do that, in the past,
it's been very difficult.

00:14:39.920 --> 00:14:43.310
It's involved writing what's
called a Token Definitions PList.

00:14:43.380 --> 00:14:44.760
Now, it's just PackageMaker.

00:14:44.820 --> 00:14:46.110
It's just a checkbox.

00:14:46.120 --> 00:14:48.970
You don't have to do
hardly anything else.

00:14:49.720 --> 00:14:52.210
So the next feature of the
installer that people frequently

00:14:52.210 --> 00:14:53.190
encounter are requirements.

00:14:53.240 --> 00:14:56.880
Requirements are merely the way
for the installer to tell the user,

00:14:56.880 --> 00:14:59.320
hey, you're not actually
ready for this software.

00:14:59.320 --> 00:15:00.830
You need more hard drive space.

00:15:00.910 --> 00:15:02.740
I mean, there's enough hard drive
space to install the software,

00:15:02.740 --> 00:15:04.880
but then it's going to go and
create 5 gigabytes of images,

00:15:04.880 --> 00:15:07.160
and so you probably want
to have space beforehand.

00:15:07.160 --> 00:15:09.380
So you can check for supported hardware.

00:15:09.380 --> 00:15:11.680
Does your application need
an iSight video camera?

00:15:11.680 --> 00:15:15.940
You can check for which volume the
user's going to install your software on.

00:15:16.040 --> 00:15:19.510
Maybe the user is going to install
your app on their other operating

00:15:19.590 --> 00:15:21.400
system that's on a different volume.

00:15:21.400 --> 00:15:23.460
Here you see a bunch of volumes,
and none of them are allowed.

00:15:23.460 --> 00:15:24.700
They all have a little stop sign.

00:15:26.850 --> 00:15:29.630
Now there's also the
Custom Install Panel in the installer,

00:15:29.630 --> 00:15:32.570
and this is an opportunity
for you to provide optional

00:15:32.950 --> 00:15:34.540
content for the user to install.

00:15:34.540 --> 00:15:38.920
You may have noticed Leopard and
Tiger and all of the OS releases

00:15:38.920 --> 00:15:43.020
before it have a fairly
extensive Custom Install Panel,

00:15:43.020 --> 00:15:45.860
where, for example,
you may choose not to install

00:15:45.860 --> 00:15:49.900
every font that we provide or all
three gigabytes of printer drivers.

00:15:49.920 --> 00:15:54.250
Using the Custom Install Panel,
you can give the user these choices,

00:15:54.250 --> 00:15:57.580
and they can choose not to install them,
or you can also set up

00:15:57.580 --> 00:16:00.240
what the defaults are,
and you can dynamically control those

00:16:00.240 --> 00:16:03.290
defaults based on the hardware that
the user is actually installing on

00:16:03.290 --> 00:16:05.180
or other software that's installed.

00:16:05.180 --> 00:16:08.970
So you have control over the enabled,
selected, and visible state of every item

00:16:08.970 --> 00:16:10.570
in that Custom Install Panel.

00:16:12.770 --> 00:16:15.210
Finally,
another major feature that the installer,

00:16:15.210 --> 00:16:17.130
we've been asked about a lot,
are installer plugins.

00:16:17.160 --> 00:16:21.650
Now, installer plugins are the ability
for you to insert your own panel into

00:16:21.700 --> 00:16:23.140
the flow of panes in the installer.

00:16:23.140 --> 00:16:25.450
You can, for example,
ask for a serial number or

00:16:25.450 --> 00:16:26.980
registration information.

00:16:26.980 --> 00:16:31.880
But the key to remember when dealing with
plugins is that the user can bypass them.

00:16:31.900 --> 00:16:34.620
The user doesn't have to use a
package to install your software.

00:16:34.620 --> 00:16:37.770
They can take the package apart
themselves and get the software that way.

00:16:37.780 --> 00:16:40.260
They could have gotten it
from a server somewhere.

00:16:40.620 --> 00:16:43.960
Or maybe there's a system administrator
that's trying to install your software

00:16:43.960 --> 00:16:46.380
on a thousand machines at once,
and they really don't want to have

00:16:46.440 --> 00:16:48.660
to go through the installer and type
in a serial number into each panel.

00:16:48.660 --> 00:16:52.590
So it's important that you don't depend
on your installer plugin as a critical

00:16:52.590 --> 00:16:54.560
part of installing your software.

00:16:54.560 --> 00:16:57.510
It's merely an opportunity for
the user to perform some task when

00:16:57.510 --> 00:16:59.520
they're in the mindset of installing.

00:17:01.190 --> 00:17:02.560
So how do you use these features?

00:17:02.560 --> 00:17:05.100
I'm going to go into a
little bit of detail here.

00:17:05.220 --> 00:17:08.390
First, we're going to talk about
enforcing requirements.

00:17:08.910 --> 00:17:12.580
So requirements themselves are
generally written as little

00:17:12.580 --> 00:17:15.650
snippets of JavaScript that live
inside the distribution script,

00:17:15.700 --> 00:17:17.830
which is an XML file inside your package.

00:17:17.860 --> 00:17:20.400
Now, this is all 10.4 Tiger technology.

00:17:20.400 --> 00:17:22.050
Last year, we were talking about it,
I think,

00:17:22.120 --> 00:17:24.360
for the first or maybe the second time,
and it was brand new,

00:17:24.360 --> 00:17:25.780
and we were encouraging people to use it.

00:17:25.950 --> 00:17:26.940
Now it's here.

00:17:26.940 --> 00:17:28.700
Most of our customers have Tiger.

00:17:28.700 --> 00:17:30.000
This is something you can depend on.

00:17:30.000 --> 00:17:33.140
The advantage of writing your
requirement checks in JavaScript is

00:17:33.140 --> 00:17:36.260
that you're not running an arbitrary
executable as soon as the user

00:17:36.260 --> 00:17:37.980
double-clicks on your package.

00:17:38.360 --> 00:17:41.210
If you don't use the JavaScript ability
to write requirements,

00:17:41.210 --> 00:17:43.580
the user's going to see a
little warning sheet that says,

00:17:43.700 --> 00:17:46.120
Hey, this package might be dangerous,
and you don't want that.

00:17:46.170 --> 00:17:49.670
So these requirements,
they have access to system configuration

00:17:49.670 --> 00:17:54.100
information through our JavaScript APIs,
and they can block or warn for the

00:17:54.100 --> 00:17:56.490
whole install or specific volumes.

00:17:58.480 --> 00:18:00.850
These two requirement checks are
generally called the installation

00:18:00.890 --> 00:18:02.020
check and the volume check.

00:18:02.200 --> 00:18:05.100
The installation check, like I said,
warns for the entire install.

00:18:05.260 --> 00:18:07.990
The volume check checks for volumes.

00:18:08.250 --> 00:18:10.980
PackageMaker gets you started
writing requirement checks.

00:18:11.030 --> 00:18:14.230
PackageMaker 3.0 has a fairly
simple requirements editor.

00:18:14.370 --> 00:18:20.120
It lets you select from a fairly
extensive list of example requirements.

00:18:20.120 --> 00:18:22.030
Does this machine have
a certain amount of RAM?

00:18:22.040 --> 00:18:24.150
Does this machine have a certain
amount of hard drive space?

00:18:24.370 --> 00:18:27.300
Does this machine have a certain
node in the I/O registry?

00:18:27.370 --> 00:18:29.380
But generally,
when you write a requirement,

00:18:29.430 --> 00:18:31.500
you're going to reuse it
elsewhere in your package.

00:18:31.540 --> 00:18:34.420
You're going to have both a volume check,
and you might have something

00:18:34.420 --> 00:18:35.550
in the custom install panel.

00:18:35.720 --> 00:18:37.960
And so for these more
complicated interactions,

00:18:38.010 --> 00:18:40.300
you're going to go directly
to the distribution script,

00:18:40.300 --> 00:18:42.370
which is inside the package.

00:18:43.030 --> 00:18:46.360
So to demonstrate that,
both the requirement editing ability

00:18:46.400 --> 00:18:49.000
in PackageMaker and how to get
directly to the distribution script,

00:18:49.000 --> 00:18:50.110
I'm going to go back to Sean.

00:18:50.320 --> 00:18:51.790
Sean?

00:18:52.480 --> 00:18:53.130
Thank you, Peter.

00:18:53.250 --> 00:18:55.930
Could we switch to the demo machine,
please?

00:18:56.080 --> 00:18:59.400
So in this demo,
we'll add some simple requirements to

00:18:59.400 --> 00:19:03.420
a Sketch package using PackageMaker,
and then we'll dig inside the

00:19:03.420 --> 00:19:07.630
package and show you how to
modify those requirements by hand.

00:19:07.900 --> 00:19:12.300
So I have a PackageMaker document
that I've created for Sketch.

00:19:12.520 --> 00:19:17.940
We'll launch that,
and we'll go into the Requirements tab,

00:19:17.990 --> 00:19:20.980
and we'll add one requirement.

00:19:22.190 --> 00:19:24.830
We'll see from this list that
PackageMaker provides a number

00:19:24.830 --> 00:19:26.500
of built-in requirements.

00:19:26.500 --> 00:19:31.620
In this demo, we'll check that 64-bit
instructions are available.

00:19:31.760 --> 00:19:36.500
We'll see are 64-bit instructions
available is equal to true,

00:19:36.630 --> 00:19:39.180
and then we can provide a message
that will be shown to the user

00:19:39.240 --> 00:19:40.810
should this requirement fail.

00:19:40.820 --> 00:19:46.410
So we'll say 64-bit
instructions required.

00:19:49.650 --> 00:19:53.340
This software needs 64-bit instructions.

00:19:53.400 --> 00:19:55.340
We'll save our requirement.

00:19:55.480 --> 00:19:57.520
You can add as many
requirements as you want.

00:19:57.740 --> 00:19:59.720
PackageMaker will add
all of them together.

00:19:59.720 --> 00:20:03.610
It will also determine if they should
be volume checks or installation checks.

00:20:03.620 --> 00:20:07.170
In addition, you can specify whether a
requirement is required,

00:20:07.170 --> 00:20:09.700
meaning that if the
requirement does not pass,

00:20:09.700 --> 00:20:12.350
the installation will not
be allowed to proceed,

00:20:12.360 --> 00:20:14.750
or optional,
meaning that the user will only

00:20:14.750 --> 00:20:16.930
be warned about the requirement.

00:20:16.930 --> 00:20:18.930
In this case, we'll make it required.

00:20:20.190 --> 00:20:25.660
So we'll build our package onto the
desktop and run it in the installer.

00:20:29.150 --> 00:20:32.380
And we'll see that this machine
does not have 64-bit instructions,

00:20:32.420 --> 00:20:35.300
so the installation is
not allowed to proceed.

00:20:35.860 --> 00:20:38.390
Now, as Peter mentioned,
there might be situations where you

00:20:38.390 --> 00:20:40.450
need to modify the requirements by hand.

00:20:40.680 --> 00:20:43.860
In order to do that,
you should navigate to

00:20:43.860 --> 00:20:45.700
the package in the Finder.

00:20:45.910 --> 00:20:50.400
You can Control-click and
do Show Package Contents,

00:20:50.550 --> 00:20:54.690
and inside of the contents directory
is the distribution.dist file,

00:20:54.810 --> 00:20:56.870
which is an XML and JavaScript file.

00:20:57.100 --> 00:20:59.820
We'll open that in a text editor.

00:21:04.910 --> 00:21:09.890
Now the important pieces in here for this
demo are the installation check element,

00:21:10.020 --> 00:21:13.060
which has a script attribute
that specifies which

00:21:13.090 --> 00:21:14.600
JavaScript function to call.

00:21:14.600 --> 00:21:18.740
If this function returns true,
then the installation check will pass.

00:21:18.740 --> 00:21:21.220
If it returns false,
then the installation check will fail.

00:21:21.240 --> 00:21:25.850
So PackageMaker has created a
function called PMInstallCheck,

00:21:25.850 --> 00:21:30.000
which uses sysctl to check
for 64-bit operations.

00:21:30.280 --> 00:21:34.800
If it returns false,
then the installation check will fail.

00:21:34.880 --> 00:21:38.870
If the installation check returns false,
then the installation check will fail.

00:21:38.880 --> 00:21:40.830
And with that,
I'll turn it back to Peter to

00:21:41.020 --> 00:21:42.320
provide some more details.

00:21:44.920 --> 00:21:44.920
Thanks, Sean.

00:21:50.890 --> 00:21:52.840
So those are package requirements.

00:21:52.840 --> 00:21:55.640
As you can see, PackageMaker, again,
makes this much easier

00:21:55.640 --> 00:21:56.310
than it used to be.

00:21:56.760 --> 00:21:58.630
However, requirements are code.

00:21:58.630 --> 00:22:01.810
And generally,
when an application writes code for you,

00:22:01.810 --> 00:22:04.260
you're probably going to want to
understand what that code is doing,

00:22:04.260 --> 00:22:06.840
and you're going to want to look at it,
edit it yourself, tweak it.

00:22:07.300 --> 00:22:09.600
So I'm going to talk about
this in a little more detail.

00:22:09.600 --> 00:22:12.630
As Sean showed you,
there's the InstallationCheck element.

00:22:12.630 --> 00:22:14.780
This is similar to the
VolumeCheck element,

00:22:14.780 --> 00:22:16.920
or how requirements are used elsewhere.

00:22:16.920 --> 00:22:21.510
It has a script attribute,
which essentially is the contents of

00:22:21.510 --> 00:22:26.300
that attribute are a JavaScript function,
or a function call.

00:22:26.300 --> 00:22:29.490
Any snippet of JavaScript,
they can be true, false, one, zero.

00:22:29.490 --> 00:22:31.680
In this case,
we're having it call the function

00:22:31.680 --> 00:22:33.720
that's defined in the script element.

00:22:33.720 --> 00:22:35.800
In the script element,
there can be one or more script

00:22:35.800 --> 00:22:37.220
elements in your distribution.

00:22:37.300 --> 00:22:40.910
script,
and they contain all your JavaScript.

00:22:41.070 --> 00:22:45.200
So in this case, we're using the built-in
JavaScript objects that

00:22:45.330 --> 00:22:46.180
the installer provides.

00:22:46.190 --> 00:22:49.030
Now, you may be familiar with
JavaScript in other contexts,

00:22:49.030 --> 00:22:50.480
like web pages, obviously.

00:22:50.520 --> 00:22:53.990
And in the context of a web page,
JavaScript has access to

00:22:54.060 --> 00:22:57.660
information about the web page
that's provided by the web browser.

00:22:57.680 --> 00:23:00.120
In the installer, it's very similar,
except for we're not providing you

00:23:00.120 --> 00:23:01.330
any information about web pages.

00:23:01.430 --> 00:23:04.810
We're providing you information about
the system and the installer's runtime.

00:23:04.960 --> 00:23:07.690
So you can see we provided some
things like a log command that lets

00:23:07.780 --> 00:23:09.090
you write to the installer log.

00:23:09.280 --> 00:23:13.740
We also provide access to the I/O Kit,
I/O Registry, sysctl, Gestalt,

00:23:14.020 --> 00:23:15.840
several other system functions
that let you find out

00:23:15.920 --> 00:23:17.260
information about the machine.

00:23:17.260 --> 00:23:20.460
Now, you may be wondering, OK,
now my JavaScript can run,

00:23:20.460 --> 00:23:22.620
and it can find out all this
information about the machine.

00:23:22.620 --> 00:23:24.460
Isn't that some sort of security risk?

00:23:24.480 --> 00:23:27.010
Well, in fact, it's not,
because your JavaScript can learn as

00:23:27.010 --> 00:23:29.640
much as it would like about the machine,
but it can't do anything

00:23:29.650 --> 00:23:31.660
with that information other
than tell the installer,

00:23:31.660 --> 00:23:33.840
essentially, yes or no, you can install.

00:23:33.970 --> 00:23:36.280
We don't allow your
JavaScript to write to files.

00:23:36.300 --> 00:23:38.190
We don't allow your JavaScript to
write to the network.

00:23:38.400 --> 00:23:39.150
It's not a question of value.

00:23:39.240 --> 00:23:40.380
It's not a question of
blocking these things.

00:23:40.380 --> 00:23:41.590
There's just no way to do it.

00:23:41.650 --> 00:23:44.480
There's no API within
the JavaScript sandbox.

00:23:44.480 --> 00:23:45.300
So it's pretty safe.

00:23:47.570 --> 00:23:50.620
So here we see, again,
another example of the installation

00:23:50.620 --> 00:23:52.500
check that Sean showed earlier.

00:23:52.520 --> 00:23:54.520
Mine's a little different.

00:23:54.550 --> 00:23:57.040
Mine's going to check the amount of
RAM that's available on the machine.

00:23:57.040 --> 00:24:00.320
Again,
it's going to use sysctl to find out the

00:24:00.320 --> 00:24:02.330
physical amount of memory in the machine.

00:24:02.340 --> 00:24:04.620
It's going to compare
that to 4 gigabytes.

00:24:04.660 --> 00:24:08.590
And it's going to set some values
in this global variable that,

00:24:08.600 --> 00:24:11.070
again, is one of the variables
that the installer runtime

00:24:11.070 --> 00:24:12.370
provides to your JavaScript.

00:24:12.440 --> 00:24:14.240
And in this case, it's myResult.

00:24:14.510 --> 00:24:17.530
And myResult has some attributes-- type,
title, and message.

00:24:17.730 --> 00:24:19.660
The type, in this case,
is going to tell the installer that

00:24:19.660 --> 00:24:22.740
this particular installation check
is not going to stop the install.

00:24:22.800 --> 00:24:24.740
It's just going to warn the user.

00:24:24.760 --> 00:24:26.110
And the title is going to be warning.

00:24:26.190 --> 00:24:28.280
This is going to be
the sheet that appears.

00:24:28.330 --> 00:24:32.260
And the message is going to be,
this package requires 4 gigabytes of RAM.

00:24:32.290 --> 00:24:34.320
That would be a pretty
weird thing to check for,

00:24:34.320 --> 00:24:36.660
but it makes a good example.

00:24:36.680 --> 00:24:39.280
In this case, my installation check is
going to return false.

00:24:39.510 --> 00:24:42.240
And that's going to cause any
other things that have been chained

00:24:42.240 --> 00:24:45.600
together with this particular snippet
of JavaScript to not be executed.

00:24:45.600 --> 00:24:48.860
So the first one that fails is
essentially setting the global variable

00:24:48.860 --> 00:24:51.840
for what should appear in the UI,
and then saying, OK, stop.

00:24:51.850 --> 00:24:53.800
Don't do any more checks.

00:24:54.610 --> 00:24:56.800
And what that looks like is this.

00:24:56.800 --> 00:24:58.180
You see a dialog.

00:24:58.220 --> 00:25:00.720
The installer says, "Warning,
package requires 4 gigabytes

00:25:00.720 --> 00:25:04.610
of RAM." And in this case,
they can hit OK and continue.

00:25:05.430 --> 00:25:07.020
So those are requirements.

00:25:07.210 --> 00:25:10.760
And related requirements are
the Custom Install Panel.

00:25:11.020 --> 00:25:13.830
Now, you may be asking yourself,
how are requirements related

00:25:13.840 --> 00:25:15.180
to the Custom Install Panel?

00:25:15.240 --> 00:25:18.100
Well,
in earlier versions of the installer,

00:25:18.130 --> 00:25:21.390
you created your user interface
in the Custom Install Panel by how

00:25:21.390 --> 00:25:23.530
your packages related to each other.

00:25:23.670 --> 00:25:26.120
The titles of your packages were
the things that would appear

00:25:26.210 --> 00:25:28.840
in the Custom Install Panel,
and they may or may not be selected,

00:25:28.840 --> 00:25:30.510
depending on flags in the packages.

00:25:30.530 --> 00:25:33.540
And this became very difficult,
because each package actually

00:25:33.540 --> 00:25:35.620
contained information about
some of the other packages.

00:25:35.770 --> 00:25:37.040
And so they weren't independent.

00:25:37.110 --> 00:25:40.690
They started being tied
together in weird ways.

00:25:41.100 --> 00:25:45.350
So what we did in Tiger is we completely
redid how the Custom Install Panel works

00:25:45.520 --> 00:25:47.160
when you're using a distribution script.

00:25:47.380 --> 00:25:49.090
And when you're using
a distribution script,

00:25:49.090 --> 00:25:52.260
you get complete control over
what appears in this panel.

00:25:52.300 --> 00:25:55.910
You get to select what choices
are that are given to the user.

00:25:56.070 --> 00:25:58.400
These are the individual line
items in the Custom Install Panel.

00:25:58.580 --> 00:26:03.420
And you get to select how particular
packages map to those choices.

00:26:03.460 --> 00:26:05.640
You can have choices
represent zero packages,

00:26:05.660 --> 00:26:07.710
or you can have choices
represent hundreds of packages.

00:26:07.740 --> 00:26:09.280
It's up to you.

00:26:09.970 --> 00:26:12.960
And those choices,
you get control over the selected,

00:26:13.030 --> 00:26:16.770
enabled, and visible states using, again,
JavaScript, which ties us back to

00:26:16.770 --> 00:26:17.720
the requirement checks.

00:26:19.400 --> 00:26:21.140
So choices can interact with each other.

00:26:21.180 --> 00:26:23.770
Much like JavaScript requirement
checks can find out

00:26:23.850 --> 00:26:26.840
information about the computer,
about what software is installed,

00:26:26.900 --> 00:26:29.950
your choices have snippets of
JavaScript that can find out the

00:26:30.070 --> 00:26:32.790
current state of other choices,
can find out the current state of

00:26:32.790 --> 00:26:35.750
installed software via receipts,
et cetera.

00:26:35.860 --> 00:26:39.910
So you can set up UI that says, well,
if the user picks this choice,

00:26:39.930 --> 00:26:41.930
say my application,
then they're also allowed

00:26:41.930 --> 00:26:42.940
to install my font.

00:26:42.990 --> 00:26:44.950
But they're not allowed to
install the font unless they

00:26:44.960 --> 00:26:46.880
also install the application.

00:26:47.590 --> 00:26:48.680
So here we see an example.

00:26:48.860 --> 00:26:53.460
What I've got is a screenshot here of a
sort of manufactured custom install panel

00:26:53.490 --> 00:26:55.760
where I've got four different choices.

00:26:55.760 --> 00:26:58.920
And what I've done is I've set the
selected and enabled states for

00:26:58.990 --> 00:27:03.150
these choices to map to sort of
four choices as the user sees them.

00:27:03.150 --> 00:27:06.950
And so you see selected, optional,
required, and prohibited.

00:27:06.960 --> 00:27:09.620
And these are kind of the four
major states that you might

00:27:09.620 --> 00:27:12.740
consider your software to be in
when the user is in this panel.

00:27:12.740 --> 00:27:16.350
There are other states,
but you don't want to get into them.

00:27:17.500 --> 00:27:20.720
So selected and optional is something
the user is allowed to pick from.

00:27:20.720 --> 00:27:21.750
Has the user picked it?

00:27:21.850 --> 00:27:22.280
It's selected.

00:27:22.280 --> 00:27:22.730
Have they not?

00:27:22.730 --> 00:27:23.390
Well, it's optional.

00:27:23.390 --> 00:27:24.370
They're not going to install it.

00:27:24.450 --> 00:27:27.020
Required and prohibited,
equally self-explanatory.

00:27:27.020 --> 00:27:31.580
Now, this particular example,
I've got a choice up on the screen,

00:27:31.580 --> 00:27:35.090
the source code in the
XML that sets its attributes.

00:27:35.250 --> 00:27:36.380
Its ID is just D.

00:27:36.380 --> 00:27:38.140
Its title is prohibited.

00:27:38.220 --> 00:27:40.700
Its selected attribute is false.

00:27:40.700 --> 00:27:43.670
And its enabled state is connected
to a JavaScript function,

00:27:43.780 --> 00:27:45.710
again, just like requirement checks.

00:27:45.800 --> 00:27:48.660
This JavaScript function is going
to check to see if today is Friday.

00:27:48.660 --> 00:27:51.780
Today is not Friday,
so the item is prohibited.

00:27:53.690 --> 00:27:55.920
Now,
these attributes are re-evaluated often.

00:27:56.030 --> 00:27:58.820
They're re-evaluated every time
the user clicks on something

00:27:58.830 --> 00:28:00.600
in the Custom Install panel.

00:28:00.750 --> 00:28:03.600
Some of them are provided
to be evaluated less often.

00:28:03.600 --> 00:28:06.290
For example,
we give you three attributes that you

00:28:06.290 --> 00:28:09.720
can set that set the initial state,
and they're only evaluated the very first

00:28:09.800 --> 00:28:14.140
time the user enters the panel or when
the user switches back to Easy Install.

00:28:15.020 --> 00:28:17.970
Now, one of the things,
one of the responsibilities

00:28:18.460 --> 00:28:21.800
of this is that you have to
preserve the user's intent.

00:28:21.940 --> 00:28:25.580
Because you can set the selected state,

00:28:26.010 --> 00:28:28.640
You can change the selected state
even though the user thinks that

00:28:28.640 --> 00:28:30.300
they've changed the selected state.

00:28:30.400 --> 00:28:34.400
If you have an enabled control,
and then the user selects it,

00:28:34.580 --> 00:28:36.980
and then you unselect it,
they're going to be like, what the heck?

00:28:37.120 --> 00:28:38.090
I just clicked on that.

00:28:38.120 --> 00:28:39.620
Why is it unclicking?

00:28:39.730 --> 00:28:42.140
So to explain this in
a little more detail,

00:28:42.140 --> 00:28:44.580
I'm going to bring up the demo machine.

00:28:46.600 --> 00:28:51.340
Let's go ahead and show
you one of these choices.

00:28:51.490 --> 00:28:55.260
So what I've got here are
two distribution scripts

00:28:55.330 --> 00:28:56.730
just in their bare form.

00:28:56.890 --> 00:28:59.180
You can actually launch
the installer this way.

00:28:59.190 --> 00:29:03.800
And I'm going to bring one
of them up in TextEdit,

00:29:03.820 --> 00:29:09.570
my text editor of choice,
and make it a little bigger.

00:29:13.170 --> 00:29:15.810
And so what I've got here is just
enough of a distribution script

00:29:15.940 --> 00:29:18.170
to make the installer happy.

00:29:18.170 --> 00:29:21.910
And you see I've got the-- this
is the custom install panel.

00:29:21.960 --> 00:29:24.700
It's going to have four choices in it.

00:29:24.750 --> 00:29:26.980
My first choice is going
to be an application.

00:29:27.020 --> 00:29:28.980
My second choice is going to be a font.

00:29:29.150 --> 00:29:32.740
And my other two choices are just
there so I have something to click on.

00:29:34.150 --> 00:29:38.570
So if I launch the installer and
navigate to the Custom Install panel,

00:29:38.900 --> 00:29:42.160
what we see here is my app and my font.

00:29:42.410 --> 00:29:46.200
So the font, the enabled state is false,
and that's as we expect, it's false.

00:29:46.230 --> 00:29:51.120
And the selected state is set to be equal
to the application's selected state.

00:29:51.240 --> 00:29:54.370
So this choices variable is
a global variable provided by

00:29:54.370 --> 00:29:56.130
the installer in JavaScript.

00:29:56.210 --> 00:30:00.330
And you can see the state of any of
the attributes of the app choice.

00:30:00.440 --> 00:30:03.960
So if I unclick the app,
the font unclicks.

00:30:03.980 --> 00:30:06.840
And they'll follow each
other very clearly.

00:30:06.970 --> 00:30:10.200
Selecting other things doesn't
have any effect on that.

00:30:10.400 --> 00:30:14.140
Now let's say I want to make it so that
the user can optionally install the font.

00:30:14.210 --> 00:30:17.370
They don't want necessarily--
I want the font to become selected

00:30:17.380 --> 00:30:19.570
if the user clicks on the app,
but then the user can

00:30:19.590 --> 00:30:21.040
unselect it if they want.

00:30:21.200 --> 00:30:23.090
So to do that--

00:30:24.810 --> 00:30:30.700
I want to tie the enabled state to
the application's enabled state.

00:30:30.790 --> 00:30:33.200
So this is very similar.

00:30:33.230 --> 00:30:36.700
I'll make it nice and big again.

00:30:36.830 --> 00:30:40.250
Close that installer and bring
up this distribution script.

00:30:42.600 --> 00:30:46.020
And so here we have the enabled state
of the font is going to be equal

00:30:46.080 --> 00:30:48.360
to the selected state of the app.

00:30:48.380 --> 00:30:51.560
And the selected state of the
font is going to be equal to

00:30:51.560 --> 00:30:54.360
something a little more complicated.

00:30:54.360 --> 00:30:56.480
I'll try to make that a little bigger.

00:31:01.280 --> 00:31:05.280
So when I click on the app,
the font becomes

00:31:05.590 --> 00:31:08.680
unselected and unenabled.

00:31:08.920 --> 00:31:11.600
And if I click on the app again,
the font is now available.

00:31:11.640 --> 00:31:13.190
I can click on it.

00:31:13.300 --> 00:31:17.950
I can only click on it
if the app is selected.

00:31:19.060 --> 00:31:21.900
What I've got here is
this My Choice Selected.

00:31:22.140 --> 00:31:26.700
And if I take this out,
you'll see why it's necessary.

00:31:28.150 --> 00:31:34.090
Now what happens with this is that the
app and the font are still connected.

00:31:34.090 --> 00:31:36.550
It appears to work correctly.

00:31:36.550 --> 00:31:37.610
It appears to be what I want.

00:31:37.660 --> 00:31:41.420
But if I select the app, and now, okay,
well, I don't want the font.

00:31:41.430 --> 00:31:42.900
Oh, but I do want this other thing.

00:31:42.900 --> 00:31:45.170
Oh, wait, now I got the font again.

00:31:45.180 --> 00:31:46.870
Oh, I don't want the font,
but I do want this other thing.

00:31:46.870 --> 00:31:48.590
Hey, I said I didn't want the font.

00:31:49.510 --> 00:31:52.700
So what's going on here is that
every time I click on something,

00:31:52.700 --> 00:31:56.580
the selected state of the font is
becoming the selected state of the app.

00:31:56.650 --> 00:31:59.330
Now, it's not happening when
I click on the font,

00:31:59.330 --> 00:32:01.250
because that could lead to loops.

00:32:01.340 --> 00:32:05.410
So we don't evaluate the font's choice
attributes when you click on it.

00:32:05.440 --> 00:32:09.080
The important thing to take away
from this is that if you want

00:32:09.080 --> 00:32:12.960
to enforce a particular setting,
it's important that you also

00:32:12.960 --> 00:32:16.680
make the enabled state false,
or make sure that you take into

00:32:16.720 --> 00:32:18.900
account the user selection.

00:32:19.340 --> 00:32:21.810
Which is available by looking
directly at the choice itself.

00:32:21.860 --> 00:32:28.250
Okay,
so I'm going to go back to the slides.

00:32:35.080 --> 00:32:36.650
So that's the Custom Install Panel.

00:32:36.670 --> 00:32:40.300
The Custom Install Panel can be as easy
or as complicated as you'd like it to be,

00:32:40.310 --> 00:32:41.910
as you see.

00:32:43.800 --> 00:32:46.900
For example,
if you look at Leopard's Install CD,

00:32:46.930 --> 00:32:50.560
you can look at the distribution
script for the install CD itself,

00:32:50.660 --> 00:32:51.680
or I guess it's a DVD now.

00:32:51.720 --> 00:32:56.120
And in that is a very
complicated custom install panel.

00:32:56.120 --> 00:32:59.760
There are, for example,
15 different localizations.

00:32:59.760 --> 00:33:01.860
I guess the Leopard
seed is only in English,

00:33:01.860 --> 00:33:03.730
but Tiger is a good example of this.

00:33:04.200 --> 00:33:06.820
And we make it so that you have
to install localizations that

00:33:06.900 --> 00:33:09.940
you've installed previously,
because we don't want you to upgrade

00:33:09.940 --> 00:33:13.490
from 10.4 to 10.5 and find out that
now if you try to run in Japanese,

00:33:13.490 --> 00:33:15.880
nothing works because you
only have 10.4 Japanese,

00:33:15.880 --> 00:33:17.800
but you have 10.5 everything else.

00:33:17.800 --> 00:33:21.550
This is the kind of detail that we want
you to put into your custom install

00:33:21.550 --> 00:33:23.820
panel if you really go whole hog with it.

00:33:23.900 --> 00:33:27.190
Now, you can get a lot more information
about how the installer is

00:33:27.190 --> 00:33:29.220
evaluating these choice attributes.

00:33:29.300 --> 00:33:32.980
There's a secret installer
flag here you see.

00:33:33.400 --> 00:33:36.570
If you use the defaults command,
you can turn on the debug engine,

00:33:36.570 --> 00:33:39.690
and all of that information will
appear in the installer log,

00:33:39.690 --> 00:33:41.880
and it will tell you, hey,
I'm evaluating this one,

00:33:41.880 --> 00:33:43.940
and it changed that,
and so I had to reevaluate this,

00:33:43.940 --> 00:33:46.960
and it can be pretty confusing,
but it can also be pretty illuminating.

00:33:49.010 --> 00:33:52.860
So, that's the Custom Install Panel and
requirements.

00:33:52.890 --> 00:33:56.280
Done in JavaScript, XML,
it's pretty easy once

00:33:56.320 --> 00:33:57.640
you get to understand it.

00:33:57.670 --> 00:33:59.550
Next feature, Installer Plugins.

00:34:00.850 --> 00:34:05.100
I mentioned earlier installer plugins
are the ability to insert your own user

00:34:05.100 --> 00:34:07.200
interface into the installer's flow.

00:34:07.260 --> 00:34:10.780
These sequence of panels that the
installer usually presents are Welcome,

00:34:10.780 --> 00:34:14.530
Read Me, License, Target Select,
and then Custom Install.

00:34:14.830 --> 00:34:17.290
If you'd like to insert a panel,
for example,

00:34:17.300 --> 00:34:20.840
registration or enter a serial number,
you can do that using

00:34:20.840 --> 00:34:22.360
an installer plugin.

00:34:23.740 --> 00:34:27.200
Now, installer plugins consist
of sections and panes.

00:34:27.200 --> 00:34:30.680
Sections are the things that you see
on the left side of the installer.

00:34:30.680 --> 00:34:33.350
They are the bullet items
as the installer proceeds.

00:34:33.350 --> 00:34:37.500
Panes are the actual content that
you see on each of these panels.

00:34:37.500 --> 00:34:40.460
And so a particular section is
allowed to have more than one pane.

00:34:40.460 --> 00:34:43.970
You can have a registration section,
for example, that shows up as a single

00:34:43.970 --> 00:34:45.900
bullet item on the left,
registration,

00:34:45.970 --> 00:34:49.280
and that has three or four pages of,
you know, tell me about your mother,

00:34:49.280 --> 00:34:51.930
tell me about your family,
tell me about your dog.

00:34:51.930 --> 00:34:53.190
Your users will love that.

00:34:55.790 --> 00:34:57.320
So here you see an installer section.

00:34:57.350 --> 00:34:59.820
I've highlighted the little bullets
I was talking about on the left.

00:34:59.960 --> 00:35:04.460
This is an example we provide of entering
a name accompanying serial number.

00:35:05.960 --> 00:35:08.720
So we had another example
that we did last year where we

00:35:08.720 --> 00:35:11.690
actually inserted a web view,
and so you could create a

00:35:11.690 --> 00:35:13.660
late-breaking news panel,
for example,

00:35:13.660 --> 00:35:17.200
that would download the README for this
particular version and tell the user,

00:35:17.200 --> 00:35:18.820
hey, this one's got a bug.

00:35:18.820 --> 00:35:20.810
Go get that other one.

00:35:24.280 --> 00:35:27.160
These have, again,
a section on the left that

00:35:27.320 --> 00:35:29.110
shows different panes.

00:35:29.210 --> 00:35:31.080
You can have more than one
section in your plugin.

00:35:31.080 --> 00:35:33.490
You can have as many
sections as you'd like.

00:35:33.590 --> 00:35:37.730
So to create an installer plugin,
there's an Xcode template.

00:35:37.780 --> 00:35:41.140
This is as simple as launching Xcode,
creating a new project,

00:35:41.150 --> 00:35:44.420
and picking from that big window of
example templates that Apple provides,

00:35:44.560 --> 00:35:46.520
there's an installer plugin template.

00:35:46.590 --> 00:35:49.780
And this links you against the
installer plugins framework,

00:35:49.840 --> 00:35:54.000
which includes classes that implement the
installer section and the installer pane.

00:35:54.150 --> 00:35:56.870
The cool thing about this is that
these classes that are already

00:35:56.870 --> 00:35:59.160
there for you do 98% of the work.

00:35:59.210 --> 00:36:02.170
All you have to do is subclass them
and override a couple of methods

00:36:02.450 --> 00:36:04.040
to control what you want to do.

00:36:04.080 --> 00:36:07.180
Particularly, you can control whether
your section appears at all.

00:36:07.180 --> 00:36:09.160
You can have a shouldLoadSection,
I believe,

00:36:09.160 --> 00:36:14.040
is the method that maybe you don't need
to do registration in some circumstances,

00:36:14.040 --> 00:36:18.850
or maybe your plugin doesn't appear
if certain hardware is missing.

00:36:18.940 --> 00:36:23.070
So to show this in more detail,
I'm going to go back to the demo machine.

00:36:28.600 --> 00:36:33.020
Shortly,
on the worldwide Developer Connect site,

00:36:33.210 --> 00:36:35.200
we're going to have this sample.

00:36:35.200 --> 00:36:38.330
And this was written by one of our
engineers just a few months ago.

00:36:38.590 --> 00:36:40.770
And hopefully,
it illustrates a lot more of the

00:36:40.770 --> 00:36:45.640
standard features that you make use of
when dealing with installer plugins.

00:36:45.770 --> 00:36:48.240
So I'm going to launch Xcode real quick.

00:36:50.590 --> 00:36:52.840
Now,
let me show you before I get into this.

00:36:52.910 --> 00:36:56.380
If you create a new project,
you see this window here.

00:36:58.370 --> 00:37:02.410
And all the way down the bottom,
standard Apple plugins.

00:37:02.570 --> 00:37:04.440
Thank you, Expose.

00:37:05.790 --> 00:37:06.830
Standard Apple plugins, where'd it go?

00:37:07.020 --> 00:37:07.460
There it is.

00:37:07.460 --> 00:37:08.540
Installer plugins right there.

00:37:08.540 --> 00:37:11.600
So this would be how you would
create one from scratch using Xcode.

00:37:11.600 --> 00:37:14.610
I'm going to start with a project
that's already here because it's got

00:37:14.610 --> 00:37:16.260
a little more things set up for me.

00:37:17.930 --> 00:37:19.520
So first I'm just going to
show you what this looks like.

00:37:19.520 --> 00:37:20.940
I've already built it.

00:37:20.950 --> 00:37:22.380
I'm going to launch the installer.

00:37:22.380 --> 00:37:26.100
And first thing we see is a
kind of scary-looking message

00:37:26.210 --> 00:37:27.240
that most users won't read.

00:37:27.360 --> 00:37:28.120
They'll just hit Continue.

00:37:28.120 --> 00:37:32.460
And this message says that as
soon as I run this package,

00:37:32.470 --> 00:37:34.670
some code is going to run.

00:37:34.670 --> 00:37:35.560
And it's not Apple's code.

00:37:35.560 --> 00:37:36.370
It's not the installer.

00:37:36.370 --> 00:37:36.990
It's your code.

00:37:37.580 --> 00:37:40.210
And so this is somewhat dangerous,
and we hope to have some

00:37:40.300 --> 00:37:42.020
solutions for this in the future.

00:37:42.020 --> 00:37:46.780
But until then, the user clicks Continue,
and they are now seeing

00:37:46.780 --> 00:37:48.580
a regular installer.

00:37:48.580 --> 00:37:51.620
And it has a section here, Registration.

00:37:51.620 --> 00:37:55.200
And if I continue,
we see a registration information.

00:37:55.220 --> 00:37:58.740
So I say, I'm Peter Bierman,
and I work for Apple,

00:37:58.740 --> 00:38:02.910
and my serial number is 123456789.

00:38:02.910 --> 00:38:04.470
And look at that.

00:38:04.470 --> 00:38:05.760
Oh, it's not valid.

00:38:05.760 --> 00:38:07.560
Maybe I need DAS.

00:38:07.580 --> 00:38:08.710
Maybe I need DASH, like it tells me I do.

00:38:08.720 --> 00:38:10.860
Oh, it's all better.

00:38:10.940 --> 00:38:11.350
Okay.

00:38:11.350 --> 00:38:13.130
So that's what we're
trying to build here.

00:38:16.200 --> 00:38:18.930
Not sure why that's happening?

00:38:19.140 --> 00:38:22.460
So here's our sample plug-in project.

00:38:22.570 --> 00:38:26.220
Now the key pieces here are-- this is,
I think, the bulk of our source code.

00:38:26.250 --> 00:38:29.410
This is the registration pane.

00:38:30.280 --> 00:38:33.200
And there's a big license here.

00:38:33.250 --> 00:38:36.210
And it has a header.

00:38:38.230 --> 00:38:40.160
The header's very small,
and the important thing here is that

00:38:40.160 --> 00:38:43.510
our registration pane object is a
subclass of the installer pane object.

00:38:43.580 --> 00:38:46.920
And then we've added a few
IB outlets for our own nib.

00:38:49.510 --> 00:38:55.090
So our registration pane subclass
here has a bunch of methods that

00:38:55.910 --> 00:39:00.540
basically take care of housekeeping
for what this panel wants to do.

00:39:00.700 --> 00:39:02.840
For example,
when I tried to exit the pane and

00:39:02.840 --> 00:39:05.590
my serial number wasn't valid,
it checked to see if my

00:39:05.610 --> 00:39:06.960
serial number was valid.

00:39:06.960 --> 00:39:09.260
And if that was no,
it updated the button state.

00:39:09.260 --> 00:39:13.800
And the button state
here was setNextEnabled.

00:39:13.800 --> 00:39:15.880
So this is a method
provided by the installer.

00:39:15.880 --> 00:39:18.480
You could set whether or not
the user is allowed to continue.

00:39:21.080 --> 00:39:23.920
You can see it was checking to see if
it was trying to continue or go back,

00:39:23.930 --> 00:39:26.150
so it only checked if
I was trying to go forward,

00:39:26.310 --> 00:39:27.880
and then it put up an alert sheet.

00:39:27.990 --> 00:39:30.160
Otherwise, it said, "Yeah,
you can exit the pane,

00:39:30.280 --> 00:39:32.100
and the installer takes
care of the rest." So,

00:39:32.100 --> 00:39:36.470
this plugin that you just saw,
very simple plugin, is something like,

00:39:36.530 --> 00:39:39.360
what, I don't know, 40 lines of code?

00:39:39.440 --> 00:39:42.090
I think you can handle that.

00:39:42.190 --> 00:39:44.420
We'll take a quick look at the nib.

00:39:45.400 --> 00:39:46.680
NIB, also very simple.

00:39:46.920 --> 00:39:48.900
All it is is the content
area of the installer.

00:39:48.900 --> 00:39:51.400
You don't have to provide any
of the standard user interface

00:39:51.400 --> 00:39:53.100
that the installer ships with.

00:39:53.290 --> 00:39:56.710
The files owner is set to
be an installer section,

00:39:56.710 --> 00:40:01.870
and in that, there's an outlet first pane
that tells--you can have multiple

00:40:01.870 --> 00:40:04.700
NIBs and tells your section which
pane is going to load first,

00:40:04.700 --> 00:40:07.570
and from there,
the installer's off and running.

00:40:08.410 --> 00:40:12.410
Finally,
when you actually create your plugin,

00:40:12.510 --> 00:40:14.860
your plugin is going to end
up in a plugins folder inside

00:40:14.860 --> 00:40:16.650
your package contents folder.

00:40:16.840 --> 00:40:21.200
And there's an installer section's
plist that lets you control where

00:40:21.500 --> 00:40:25.020
your plugin appears relative to
the other panels of the installer,

00:40:25.020 --> 00:40:29.370
and of course,
the plugin itself that Xcode built.

00:40:29.500 --> 00:40:32.280
And those are installer plugins.

00:40:32.330 --> 00:40:34.210
Go back to the slides.

00:40:40.460 --> 00:40:43.980
So, installer plugins,
sort of a powerful ability for you to

00:40:44.030 --> 00:40:45.670
customize the installer's user interface.

00:40:45.670 --> 00:40:48.890
They allow users to perform all
of their setup in one place.

00:40:49.170 --> 00:40:52.290
Users are sitting down and saying, hey,
I'm installing software,

00:40:52.290 --> 00:40:54.020
I've got this task I'm
trying to accomplish,

00:40:54.020 --> 00:40:55.900
I want to, you know,
open the box and put the CD in

00:40:55.900 --> 00:40:57.380
and install the software,
and okay,

00:40:57.380 --> 00:41:00.180
I'll get my registration done and
I'll type in my serial number.

00:41:00.180 --> 00:41:03.180
These are all things that
the user wants to do once.

00:41:03.180 --> 00:41:05.910
So if the user is doing it once,
doing it in the installer,

00:41:05.910 --> 00:41:06.730
it makes sense.

00:41:07.140 --> 00:41:09.180
On the other hand,
there are people out there

00:41:09.180 --> 00:41:11.750
that are doing automated setup.

00:41:12.180 --> 00:41:15.090
The process that your user is
performing once in their living room,

00:41:15.090 --> 00:41:17.290
where they want to get everything
done and then be done with it,

00:41:17.350 --> 00:41:20.180
is a little different than the
process that a system is performing,

00:41:20.180 --> 00:41:22.540
say, in Maine,
where they're installing on

00:41:22.540 --> 00:41:24.360
something like 15,000 iBooks.

00:41:24.460 --> 00:41:27.830
They don't want to sit at
the installer 15,000 times.

00:41:27.880 --> 00:41:30.920
So, keep automated setup in mind.

00:41:30.920 --> 00:41:34.480
Your plugin should essentially work by
collecting information from the user

00:41:34.540 --> 00:41:37.860
and setting that aside in a cookie
for your application to find later.

00:41:38.060 --> 00:41:40.090
If your application
doesn't find that cookie,

00:41:40.090 --> 00:41:43.160
your application should probably
provide the same user experience,

00:41:43.300 --> 00:41:46.190
the opportunity to license or
register itself at that point.

00:41:46.220 --> 00:41:48.920
Installer plugins are a convenience.

00:41:48.920 --> 00:41:51.550
They are not meant to be
a gatekeeper of any sort.

00:41:53.420 --> 00:41:56.670
So those are the features that the
user deals with in the installer when

00:41:56.670 --> 00:41:58.400
they are installing your software.

00:41:58.450 --> 00:42:01.810
What do you have to worry about
when you're thinking about upgrades?

00:42:02.320 --> 00:42:05.860
Now, all of you are working
to ship great software,

00:42:06.060 --> 00:42:07.070
I hope.

00:42:07.200 --> 00:42:09.700
And all of you are hoping that
your software is so great,

00:42:09.700 --> 00:42:12.440
you're going to have a version 2,
a version 3, a version 4.

00:42:12.560 --> 00:42:14.610
You're going to take over the world.

00:42:14.850 --> 00:42:17.150
You should be thinking about
that now when you're creating

00:42:17.260 --> 00:42:19.890
your installer packages,
because the installer uses

00:42:19.890 --> 00:42:23.090
upgrades to add new files,
to replace existing files,

00:42:23.170 --> 00:42:27.030
to remove obsolete files-- that's a
key-- and to provide a receipt trail

00:42:27.390 --> 00:42:33.660
so that the user who has installed your
software and all the other software

00:42:33.660 --> 00:42:37.070
on their machine knows what they've
done and can look at it later and say,

00:42:37.070 --> 00:42:37.070
hey, did something go wrong here,
or did I do that?

00:42:37.660 --> 00:42:42.040
Now, the best way to deal with preparing
for upgrades is to start by

00:42:42.040 --> 00:42:43.610
using a multi-package install.

00:42:43.630 --> 00:42:46.790
And a multi-package install
allows you to divide your content

00:42:46.790 --> 00:42:48.400
up into independent parts.

00:42:48.400 --> 00:42:51.570
You can have, say, an application,
and a framework, and a font,

00:42:51.750 --> 00:42:53.480
and these each live in separate packages.

00:42:53.480 --> 00:42:57.300
And they each have separate versions,
and they each have separate package IDs,

00:42:57.300 --> 00:43:00.620
so the installer knows of each of
these things as separate things.

00:43:00.640 --> 00:43:02.970
And when you upgrade each of them,
you can say, well,

00:43:03.090 --> 00:43:04.940
I only really need to change the font.

00:43:05.350 --> 00:43:07.490
And the installer will only compare
the new font to the old font,

00:43:07.490 --> 00:43:09.540
and will only remove the
files that are appropriate.

00:43:09.540 --> 00:43:14.040
This is also the basis for how you
set up the custom install panel.

00:43:14.060 --> 00:43:16.430
Now, it used to be that you had to
create multiple packages to

00:43:16.430 --> 00:43:19.600
use the custom install panel,
and the packages themselves contained

00:43:19.710 --> 00:43:21.500
this presentation information.

00:43:21.500 --> 00:43:24.650
Now, the packages no longer contain
the presentation information,

00:43:24.660 --> 00:43:27.790
but the custom install panel
still eventually evaluates

00:43:27.790 --> 00:43:31.190
down to particular choices,
and particular choices evaluate

00:43:31.190 --> 00:43:32.860
down to particular packages.

00:43:33.000 --> 00:43:37.820
You can't have choices say, hey,
install just part of this package.

00:43:39.810 --> 00:43:42.910
So, when dealing with upgrades,
another thing you have to worry

00:43:43.020 --> 00:43:44.190
about are the installer scripts.

00:43:44.230 --> 00:43:46.960
Now, installer scripts,
another feature of the installer,

00:43:46.960 --> 00:43:51.240
you can create scripts that run
before or after files are installed,

00:43:51.240 --> 00:43:55.650
and the scripts can be configured to run
either for plain installs or upgrades.

00:43:55.940 --> 00:43:57.820
So, there's a lot of power here.

00:43:57.930 --> 00:44:00.790
You could, in fact,
install all of your software from

00:44:00.890 --> 00:44:04.400
the installer script if you wanted,
and I know a lot of you have perhaps

00:44:04.630 --> 00:44:08.080
written packages that delete files
or add files from installer scripts,

00:44:08.110 --> 00:44:10.950
and we want to warn you not to do
that because installer scripts,

00:44:10.960 --> 00:44:13.560
in general, are going to make
uninstall more difficult,

00:44:13.560 --> 00:44:16.100
and this is an important
feature we've heard a lot about,

00:44:16.100 --> 00:44:18.050
and we really would like to pursue it.

00:44:19.520 --> 00:44:23.440
So do use installer scripts to
do things like start services.

00:44:23.490 --> 00:44:27.500
If I install a new program
and it needs a daemon to run,

00:44:27.540 --> 00:44:30.800
then great, when my install is finished,
a post-install script,

00:44:30.850 --> 00:44:33.640
spawning that daemon and getting it
going so that everything's just working,

00:44:33.640 --> 00:44:36.290
I don't need to reboot, that's ideal.

00:44:36.500 --> 00:44:39.210
Use an installer script to
import modified preference files.

00:44:39.310 --> 00:44:41.700
If you've got a complicated
project and version 2 of this

00:44:41.850 --> 00:44:45.090
project doesn't actually know how
to read version 1's preferences,

00:44:45.240 --> 00:44:48.720
which is unusual, but it does happen,
you can use an installer script

00:44:48.860 --> 00:44:52.150
to import the version 1 preference
file and chew it up and turn it

00:44:52.200 --> 00:44:55.760
into a version 2 preference file,
so the user doesn't lose anything.

00:44:55.760 --> 00:44:59.580
But don't use installer scripts
to create or delete files.

00:44:59.580 --> 00:45:01.630
When you do that,
the installer is unaware of

00:45:01.630 --> 00:45:02.840
what your script has done.

00:45:02.850 --> 00:45:05.500
And so the installer doesn't
know that that file was removed.

00:45:05.500 --> 00:45:07.300
The installer doesn't know
if that file was there.

00:45:07.300 --> 00:45:09.020
The installer's never heard of that file.

00:45:09.020 --> 00:45:13.670
And so if the installer were to provide
system verification or an audit trail,

00:45:13.680 --> 00:45:16.840
that's all under the radar of
the installer at that point.

00:45:16.840 --> 00:45:18.710
And most importantly,
don't use your installer scripts

00:45:18.710 --> 00:45:20.780
to modify the installer's receipts.

00:45:20.780 --> 00:45:22.890
That's sort of like deleting files,
but even worse.

00:45:22.900 --> 00:45:24.750
Now the installer has
lost part of its brain.

00:45:24.920 --> 00:45:26.160
You've given it a lobotomy.

00:45:26.160 --> 00:45:29.740
This may be useful for you to
figure out how to make your

00:45:29.740 --> 00:45:31.400
packages upgrade correctly.

00:45:31.400 --> 00:45:34.160
But trust me, that's not what you want
to do in the long run.

00:45:34.160 --> 00:45:38.180
You're just sort of adding to chaos.

00:45:38.930 --> 00:45:42.320
So another feature of the installer,
particularly relevant to upgrades,

00:45:42.340 --> 00:45:44.690
and this is new in Leopard,
are patch packages.

00:45:44.700 --> 00:45:47.900
Now this is something that we've had
available in Software Update for a while.

00:45:47.900 --> 00:45:50.080
You've probably seen that
when you download 10.4.7

00:45:50.180 --> 00:45:53.150
and you already have 10.4.6,
the download size is a lot

00:45:53.360 --> 00:45:55.560
smaller than if you have 10.4.5.

00:45:55.600 --> 00:45:59.440
And that's because what Apple does
is offer a patch package for the

00:45:59.640 --> 00:46:03.100
most recent Software Update to
the one we're just shipping,

00:46:03.650 --> 00:46:06.890
and a delta,
or rather a combo package that includes

00:46:07.080 --> 00:46:09.810
everything if you're installing
on anything earlier than that.

00:46:09.840 --> 00:46:14.360
Now patch packages require
particular software to already exist.

00:46:14.460 --> 00:46:18.140
By definition, all they do is add things
to what's already there.

00:46:18.140 --> 00:46:20.390
So they're just the delta
between what was there before

00:46:20.510 --> 00:46:21.800
and what you want there now.

00:46:21.800 --> 00:46:24.500
Because of this,
they specify strict requirements.

00:46:24.560 --> 00:46:27.600
They have a checksum for the files
that they're going to install over,

00:46:27.600 --> 00:46:31.320
and they have other requirements to
make sure they can only be installed

00:46:31.320 --> 00:46:33.360
if all of the prerequisites are met.

00:46:33.600 --> 00:46:36.490
Now the cool thing about patch packages,
and I mentioned this

00:46:36.490 --> 00:46:38.400
a little bit earlier,
this is a Leopard feature,

00:46:38.400 --> 00:46:42.900
that combined with distribution
scripts and flat packages,

00:46:42.900 --> 00:46:46.800
patch packages give us a feature that
we call Quick Start Network Installs,

00:46:47.170 --> 00:46:49.730
where I showed you earlier,
I was giving the example

00:46:49.730 --> 00:46:51.790
of the requirement checks,
and I ran a distribution

00:46:51.790 --> 00:46:54.470
script in the installer,
and you saw that distribution script

00:46:54.470 --> 00:46:56.100
was only like a page in TextEdit.

00:46:56.100 --> 00:46:58.100
It was maybe 10K.

00:46:58.100 --> 00:47:01.000
You can take a distribution
script and send it to the user

00:47:01.000 --> 00:47:02.990
over the internet as a bare file,
and that provides you

00:47:02.990 --> 00:47:03.540
with a patch package.

00:47:03.540 --> 00:47:06.910
It provides the entire user experience,
and this can download

00:47:06.910 --> 00:47:10.540
packages using flat packages,
and can download patch packages.

00:47:10.560 --> 00:47:14.280
And so now the user can get version
two of your software using nothing

00:47:14.280 --> 00:47:17.460
more than a 50K web download,
and then the minimum amount of download

00:47:17.520 --> 00:47:19.430
to get the rest of your software.

00:47:19.620 --> 00:47:22.860
We're going to cover this in a lot
more detail on Thursday at 2:00 PM in,

00:47:22.860 --> 00:47:24.540
I think, Mission?

00:47:24.540 --> 00:47:26.450
No, Presidio.

00:47:26.580 --> 00:47:28.020
And so that's going to be
a really exciting session.

00:47:28.050 --> 00:47:30.280
I hope to see you all there.

00:47:30.720 --> 00:47:31.810
Upgrades.

00:47:31.810 --> 00:47:33.040
Wrapping this up.

00:47:33.040 --> 00:47:34.500
Upgrades the best practices.

00:47:34.900 --> 00:47:37.070
Create fine-grain packages.

00:47:37.210 --> 00:47:38.260
This helps the installer.

00:47:38.260 --> 00:47:41.020
The installer is more efficient with
more packages than it used to be.

00:47:41.020 --> 00:47:42.310
It helps receipts.

00:47:42.310 --> 00:47:44.930
Use proper versions in your packages.

00:47:45.340 --> 00:47:48.690
The package version is not the
same as your application version.

00:47:48.700 --> 00:47:53.210
Now, this is an area where even the new
PackageMaker can't really help.

00:47:53.380 --> 00:47:55.470
It provides a suggestion,
and it actually grabs the

00:47:55.470 --> 00:47:58.020
version of your software out
of your application and says,

00:47:58.100 --> 00:47:59.840
hey, the version of your package
should probably be the same.

00:47:59.840 --> 00:48:01.620
I'd advise you that
that's a little bit risky,

00:48:01.620 --> 00:48:04.420
because there will be times that you
ship a new version of your package.

00:48:04.430 --> 00:48:05.900
Maybe there's a bug in your package.

00:48:05.900 --> 00:48:08.420
Maybe you got a requirement check wrong,
and you want to roll out a

00:48:08.420 --> 00:48:09.860
new version of your package.

00:48:09.860 --> 00:48:11.590
Is that a new version
of your application?

00:48:11.610 --> 00:48:12.990
That's probably not.

00:48:13.460 --> 00:48:16.460
So keep these things separate,
or at the very least,

00:48:16.460 --> 00:48:18.960
keep very close watch over what they are.

00:48:18.980 --> 00:48:21.840
The installer itself doesn't
care about package versions,

00:48:21.840 --> 00:48:23.020
even when upgrading.

00:48:23.020 --> 00:48:25.290
It doesn't care if one version
is bigger or smaller or letters

00:48:25.290 --> 00:48:26.380
or numbers or any of that.

00:48:26.500 --> 00:48:28.600
But there are other
parts of the installer,

00:48:28.600 --> 00:48:31.500
for example,
your scripts or the custom install panel,

00:48:31.500 --> 00:48:35.370
where some of the logic you write to say,
is this an upgrade or not,

00:48:35.590 --> 00:48:37.640
does care whether one number
is greater than another.

00:48:37.660 --> 00:48:42.400
So I strongly advise you to use regular
just numbers and decimal points.

00:48:42.580 --> 00:48:44.420
Keep consistent package IDs.

00:48:44.450 --> 00:48:46.380
Don't change your package
ID with each release.

00:48:46.590 --> 00:48:48.940
For example, don't put your version
number in your package ID.

00:48:48.940 --> 00:48:52.080
The package ID is how the installer
knows how to do an upgrade.

00:48:52.090 --> 00:48:55.560
It looks and says, hey,
this package is package ID foo.

00:48:55.560 --> 00:48:57.840
Did I ever install package ID foo before?

00:48:57.840 --> 00:48:59.750
And if it did,
it finds that in the receipts,

00:48:59.750 --> 00:49:00.920
and it does a comparison.

00:49:00.920 --> 00:49:03.140
It says, these are the files
that used to be in foo.

00:49:03.140 --> 00:49:05.220
These are the files
that are in foo today.

00:49:05.220 --> 00:49:07.750
And it uses that information
to decide which files to

00:49:07.750 --> 00:49:09.370
delete and which files to add.

00:49:09.660 --> 00:49:13.000
If you delete receipts,
or if you change package IDs,

00:49:13.000 --> 00:49:15.390
you subvert this mechanism,
and the installer slowly gets

00:49:15.390 --> 00:49:18.070
confused and thinks that either
more is installed than really is,

00:49:18.070 --> 00:49:19.790
or less is installed than really is.

00:49:19.790 --> 00:49:23.490
And we want to make it possible for the
user to look at the installer's database

00:49:23.490 --> 00:49:25.500
to see how their system is configured.

00:49:25.500 --> 00:49:28.670
So we trust you to provide
useful and valid information.

00:49:28.680 --> 00:49:31.750
Finally, all of that boils down
to inform the installer.

00:49:31.750 --> 00:49:32.680
Don't bypass it.

00:49:32.720 --> 00:49:37.120
Don't work around it, because really,
you're working around your customers.

00:49:37.120 --> 00:49:39.180
Your customers want to know
what's on their machine.

00:49:39.600 --> 00:49:42.480
They want to be able to see,
did I install this correctly?

00:49:42.510 --> 00:49:45.130
We might provide other features
in the future that check to see if

00:49:45.230 --> 00:49:46.720
things are still installed correctly.

00:49:46.740 --> 00:49:50.460
And so the more and the more accurate
information you provide the installer,

00:49:50.490 --> 00:49:53.430
the more powerful we can make it.

00:49:53.560 --> 00:49:55.450
So those are upgrades.

00:49:58.330 --> 00:50:01.600
To summarize the entire presentation,
we want you to pick

00:50:01.600 --> 00:50:02.800
your delivery mechanism.

00:50:02.800 --> 00:50:07.800
You've got disk images, zip files,
and starting in 10.5, flat packages.

00:50:07.860 --> 00:50:11.300
Think about what your customer wants
in their installation experience.

00:50:11.300 --> 00:50:13.540
Are they the kind of customer
that understands disk

00:50:13.540 --> 00:50:15.060
images and drag installs?

00:50:15.080 --> 00:50:16.300
Then that's what you should provide.

00:50:16.470 --> 00:50:20.310
If your customer wants more
of a handheld experience,

00:50:20.310 --> 00:50:21.970
use the installer.

00:50:22.170 --> 00:50:24.280
Start using PackageMaker 3.0.

00:50:24.310 --> 00:50:26.030
PackageMaker 3.0, new in Leopard.

00:50:26.180 --> 00:50:29.710
We've put a huge amount of work into it,
and we're really happy with it.

00:50:29.810 --> 00:50:32.100
Support relocatable applications.

00:50:32.130 --> 00:50:34.930
Apple themselves has been kind of
sketchy about this in the past.

00:50:35.160 --> 00:50:38.320
A lot of it has been because how
difficult it's been to create

00:50:38.600 --> 00:50:41.570
the file that the installer needs
that understands how to find your

00:50:41.570 --> 00:50:43.580
application on the hard drive.

00:50:43.590 --> 00:50:46.780
With PackageMaker 3,
it will create this very difficult to

00:50:46.780 --> 00:50:50.160
understand file that works on 10.4,
and it will create this new syntax

00:50:50.230 --> 00:50:54.340
that we're introducing in 10.5 that
we'll cover in more detail on Thursday.

00:50:54.540 --> 00:50:59.490
Much easier to support this both at
the low level and at the high level.

00:50:59.800 --> 00:51:01.560
Create packages for
each of your components.

00:51:01.640 --> 00:51:06.260
Fine-grained packages allow you easier
control in the custom install panel,

00:51:06.290 --> 00:51:07.340
make the installer more efficient.

00:51:07.340 --> 00:51:09.120
Don't trick the installer.

00:51:09.120 --> 00:51:10.200
Don't hack receipts.

00:51:10.200 --> 00:51:11.460
Don't delete receipts.

00:51:11.720 --> 00:51:14.780
Library receipts, it's our database.

00:51:14.780 --> 00:51:16.800
It's not meant for
people to play around in.

00:51:16.840 --> 00:51:19.630
And don't create or remove
files using scripts.

00:51:19.630 --> 00:51:22.410
Again, don't trick the installer.

00:51:23.440 --> 00:51:24.980
Finally, send us your feedback.

00:51:24.980 --> 00:51:27.280
We have a whole lot of
new features in Leopard.

00:51:27.280 --> 00:51:29.720
We're going to have an entire
another session on Thursday.

00:51:29.720 --> 00:51:31.310
I mentioned this a couple times.

00:51:31.310 --> 00:51:35.040
That session is going to be nothing but
new features in Leopard in the installer.

00:51:35.040 --> 00:51:36.930
So, we want you to play with those.

00:51:36.940 --> 00:51:38.170
Tell us how they work.

00:51:38.170 --> 00:51:41.260
Tell us if they meet your needs,
and send us your feedback,

00:51:41.260 --> 00:51:45.020
ideally as soon as possible,
because the sooner we hear that feedback,

00:51:45.020 --> 00:51:48.210
the quicker we can roll those
changes into Leopard and get them

00:51:48.210 --> 00:51:50.660
perhaps out with 10.5 itself.

00:51:52.830 --> 00:51:57.300
So, to learn more about all this stuff,
we have two lab sessions this week.

00:51:57.300 --> 00:51:58.890
We have one this afternoon at 2:00 PM.

00:51:58.890 --> 00:52:00.700
I think that's pretty
much after this session.

00:52:00.730 --> 00:52:04.310
We have another one Thursday at 5:00,
which will be after

00:52:04.310 --> 00:52:05.940
our other presentation.

00:52:06.380 --> 00:52:09.020
We have a bunch of documentation
that's available on the Internet.

00:52:09.080 --> 00:52:11.100
We have a brand new
software delivery guide.

00:52:11.100 --> 00:52:14.020
This was just produced by our
Technical Publications Department.

00:52:14.020 --> 00:52:18.000
It covers all of the things I've covered
in this talk and a whole bunch more.

00:52:18.000 --> 00:52:20.320
And it's available at the
URL that you see up there.

00:52:20.320 --> 00:52:22.640
We also have the Installer Release Note.

00:52:22.720 --> 00:52:26.110
This goes into detail about the
syntax for distribution scripts

00:52:26.120 --> 00:52:29.880
and the JavaScript APIs that are
available inside the Installer.

00:52:29.880 --> 00:52:33.090
And that Release Note is available
both on the Internet and it's installed

00:52:33.090 --> 00:52:36.140
as part of the developer tools in
the standard Release Note area.

00:52:38.100 --> 00:52:39.500
We also have a public mailing list.

00:52:39.620 --> 00:52:40.610
This has really taken off.

00:52:40.750 --> 00:52:42.410
We introduced this, I think,
about a year ago.

00:52:42.410 --> 00:52:46.040
Several dozen developers
working on their packages,

00:52:46.040 --> 00:52:46.890
working on their products.

00:52:46.890 --> 00:52:49.200
Not a very high traffic mailing list.

00:52:49.230 --> 00:52:51.480
It's not like people are
making new packages every day.

00:52:51.480 --> 00:52:54.920
But when people run into little glitches
with the installer or they want to know,

00:52:55.040 --> 00:52:58.610
hey, how did this work on 10.3
versus 10.4 versus 10.5,

00:52:58.610 --> 00:53:02.440
this broad collection of people helping
each other is really an improvement.

00:53:03.220 --> 00:53:06.060
And finally,
there's the example distribution script

00:53:06.090 --> 00:53:09.890
that's used to install the OS itself,
which is on the installer DVD at

00:53:10.180 --> 00:53:14.960
systeminstallationpackages.osinstallmpack
agecontentsosinstall.dist.