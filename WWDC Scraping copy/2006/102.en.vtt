WEBVTT

00:00:11.360 --> 00:00:12.200
Good morning.

00:00:12.200 --> 00:00:12.700
Thank you for being here.

00:00:12.700 --> 00:00:13.800
My name is John Comiskey.

00:00:13.800 --> 00:00:18.520
I'm an engineer in the AppleScript group,
and my job is to help people make

00:00:18.520 --> 00:00:20.790
their applications scriptable.

00:00:24.080 --> 00:00:27.840
There may be some of you that
support a Carbon application.

00:00:27.840 --> 00:00:30.270
The stuff that we're going to
be talking about today applies

00:00:30.270 --> 00:00:34.680
equally to both Carbon and Cocoa,
but the Carbon usage requires

00:00:34.680 --> 00:00:35.600
a little bit of setup.

00:00:35.600 --> 00:00:38.620
So if you are in that situation,
please come and find us in our lab

00:00:38.620 --> 00:00:41.100
immediately after this session,
and we'll help you

00:00:41.100 --> 00:00:42.410
take care of that part.

00:00:42.430 --> 00:00:45.360
After that,
everybody can use Cocoa scripting.

00:00:47.490 --> 00:00:49.700
So what we're going to talk about today,
several topics.

00:00:49.770 --> 00:00:53.220
Why should your
application be scriptable?

00:00:53.580 --> 00:00:57.160
How do you start by
designing a dictionary?

00:00:57.290 --> 00:01:01.430
The importance of logging
what your program does.

00:01:01.630 --> 00:01:05.390
Then we're going to cover a few topics
in basic scriptability for those of

00:01:05.390 --> 00:01:07.300
you that are just getting started.

00:01:07.380 --> 00:01:10.190
And for a few of you that I've
seen before and are getting

00:01:10.190 --> 00:01:12.520
into more advanced topics,
we're going to cover an

00:01:12.530 --> 00:01:14.480
advanced topic in scriptability.

00:01:14.570 --> 00:01:17.150
And then at the end,
we're going to talk about the

00:01:17.390 --> 00:01:20.490
importance of testing your
application with scriptability

00:01:20.490 --> 00:01:22.550
and testing your scriptability.

00:01:23.580 --> 00:01:27.080
But first,
we're going to talk about figure skating.

00:01:27.140 --> 00:01:29.330
I don't know anything
about figure skating,

00:01:29.410 --> 00:01:33.680
which is why I was really surprised
to come in one morning and see this,

00:01:33.680 --> 00:01:38.770
that my boss wanted me to revolutionize
print media coverage of international

00:01:38.770 --> 00:01:40.800
pairs figure skating competition.

00:01:40.800 --> 00:01:44.040
And I had absolutely
no idea how to do that.

00:01:44.040 --> 00:01:47.550
So I rubbed my eyes, I shook my head,
and I took another look.

00:01:47.550 --> 00:01:49.570
And it was really more like this.

00:01:49.570 --> 00:01:53.380
I was supposed to implement a
scriptable object model in Aperture.

00:01:53.420 --> 00:01:56.660
Aperture was a new product,
hadn't even been released yet.

00:01:56.660 --> 00:02:02.400
It's the first pro app from Apple to come
out with scriptability in first release.

00:02:02.400 --> 00:02:05.420
And myself and James Dempsey,
you may have seen James yesterday

00:02:05.560 --> 00:02:08.680
performing an original
composition on the guitar.

00:02:08.680 --> 00:02:13.930
He and I sat down together and
put scriptability into Aperture.

00:02:15.100 --> 00:02:20.660
And this turned out to be very
beneficial for a group of people.

00:02:20.920 --> 00:02:23.500
There's a photographer, Vincent Laforet.

00:02:23.720 --> 00:02:26.400
He used to work for the New York Times,
and now he works independently.

00:02:26.400 --> 00:02:30.200
And he drew the assignment to
go to the Olympics in Turin.

00:02:30.800 --> 00:02:33.160
and to cover the pairs figure skating.

00:02:33.240 --> 00:02:35.470
He knew that the way
the competition worked,

00:02:35.500 --> 00:02:37.830
there's several minutes of skating,
then there's just a brief

00:02:37.910 --> 00:02:41.890
interlude between skaters,
and then another pair goes out there.

00:02:42.140 --> 00:02:45.420
He had to make a decision
what to do with his time.

00:02:45.430 --> 00:02:49.550
It's very difficult for a photographer
to shoot an event and to also

00:02:50.070 --> 00:02:54.000
upload his pictures into a computer,
do some editing, do some selecting,

00:02:54.000 --> 00:02:58.120
move the best pictures on through the
workflow so that they can be published,

00:02:58.120 --> 00:02:59.860
and then get back to the skating.

00:02:59.860 --> 00:03:01.960
He knew he wouldn't be able to do that.

00:03:01.960 --> 00:03:04.470
He knew he would miss something,
and he didn't want to miss anything.

00:03:04.470 --> 00:03:06.710
And it's a good thing that he didn't.

00:03:08.210 --> 00:03:12.260
So what he did is he took Aperture,
which is a scriptable product,

00:03:12.260 --> 00:03:14.810
and he built some automation around it.

00:03:14.810 --> 00:03:17.700
He would take the magnetic
card out of his camera,

00:03:17.700 --> 00:03:21.600
put it into his laptop at ringside,
image capture would come up,

00:03:21.660 --> 00:03:24.300
and start running an automator workflow.

00:03:24.300 --> 00:03:27.770
The automator workflow would
take the pictures off the card,

00:03:27.770 --> 00:03:30.980
bring them into Aperture,
create thumbnails for them,

00:03:30.980 --> 00:03:33.980
take those thumbnails and
put them in a folder that was

00:03:33.980 --> 00:03:36.050
accessible across the network.

00:03:36.700 --> 00:03:39.680
When that happened, his editor,
who was over at the Kodak

00:03:39.690 --> 00:03:44.940
Pavilion in another part of Turin,
had folder actions on that folder.

00:03:44.940 --> 00:03:47.780
So as soon as the pictures arrived,
he was notified that there

00:03:47.780 --> 00:03:49.210
was work there for him to do.

00:03:50.580 --> 00:03:53.700
He loaded those pictures
into Aperture again,

00:03:53.720 --> 00:03:56.590
went through the thumbnails,
and picked out the best shots,

00:03:56.600 --> 00:03:59.600
the ones that he knew
they wanted to publish.

00:03:59.640 --> 00:04:02.680
Then he'd run another Automator workflow,
which would go back to

00:04:02.680 --> 00:04:07.840
the computer at rink side,
grab the full size image of that picture,

00:04:07.900 --> 00:04:11.310
pull it over to the Kodak Center,
where he could crop it, edit it,

00:04:11.490 --> 00:04:15.790
do whatever fix-ups he needed to do,
and drop it in another folder where

00:04:16.170 --> 00:04:18.900
another scriptable application,
a transmit from a third-party

00:04:18.900 --> 00:04:23.320
vendor like you guys,
took that photo and sent

00:04:23.320 --> 00:04:25.370
it via FTP to New York.

00:04:25.870 --> 00:04:30.760
And Vincent captured probably the
moment of the pair skating competition.

00:04:30.760 --> 00:04:34.690
Rene Anouilh and Jack Baldwin are
the American skaters,

00:04:34.710 --> 00:04:37.210
and although they finished seventh,
they did something that no

00:04:37.210 --> 00:04:38.520
one else had ever done before.

00:04:38.520 --> 00:04:42.880
They successfully completed a throw
triple axel in international competition.

00:04:42.880 --> 00:04:45.960
It's never been done before,
it's never been done since,

00:04:45.960 --> 00:04:48.720
and it's probably going
to be the new standard.

00:04:48.720 --> 00:04:51.000
If you can't do a throw triple axel,
you're not going to

00:04:51.010 --> 00:04:52.140
be a competitive pair.

00:04:52.770 --> 00:04:56.750
Vincent got that shot,
got it to his editor, got it to New York.

00:04:56.750 --> 00:05:03.630
So with the help of Aperture, Transmit,
Automator, Folder Actions, AppleScript,

00:05:03.630 --> 00:05:08.430
the internet, and Nine Time Zones,
he was able to get that picture

00:05:08.430 --> 00:05:11.540
published in the morning paper
in New York before it showed up

00:05:11.590 --> 00:05:13.590
in the afternoon papers in Turin.

00:05:13.600 --> 00:05:17.760
Meanwhile, all the other photographers
were jumping on motor scooters,

00:05:17.760 --> 00:05:20.180
running across town
to the Kodak Pavilion,

00:05:20.180 --> 00:05:22.420
frantically editing their photos.

00:05:22.900 --> 00:05:28.420
Vincent was able to scoop everybody else,
and he was able to do

00:05:28.420 --> 00:05:30.980
it by using automation.

00:05:33.360 --> 00:05:38.260
So this is actually not
Jack Baldwin and Renee Inouye.

00:05:38.260 --> 00:05:42.370
This is Tatiana Tamianina
and Maxim Maranin.

00:05:42.380 --> 00:05:45.330
They're the gold medalists from Turin.

00:05:46.880 --> 00:05:49.910
So that's a little lesson in
why you want to be scriptable.

00:05:50.110 --> 00:05:51.010
You have a decision to make.

00:05:51.070 --> 00:05:53.340
Should you spend your time on
scriptability or something else?

00:05:53.340 --> 00:05:56.790
I want to convince you to spend
your time on scriptability because

00:05:56.790 --> 00:05:58.860
scriptability is something else.

00:06:00.960 --> 00:06:02.340
When you make your
application scriptable,

00:06:02.340 --> 00:06:03.670
you get to join a club.

00:06:03.770 --> 00:06:05.140
It's not a fancy, exclusive club.

00:06:05.140 --> 00:06:06.770
Anybody that does the work can get in.

00:06:06.770 --> 00:06:09.230
And the club's been
around for a long time.

00:06:09.230 --> 00:06:11.410
You've been able to use
AppleScript since System 7.

00:06:11.410 --> 00:06:14.400
But since then,
we've done a few other things.

00:06:14.400 --> 00:06:16.900
AppleScript Studio came
along a few years ago,

00:06:16.900 --> 00:06:20.650
which allowed you to make real
applications out of your AppleScripts,

00:06:20.650 --> 00:06:23.390
to put real user interfaces on them,
package them,

00:06:23.390 --> 00:06:26.430
and distribute them to your end
users so that they could use

00:06:26.560 --> 00:06:30.060
the power of AppleScript in a
nicely packaged application.

00:06:31.320 --> 00:06:34.740
More recently,
we came out with Automator,

00:06:35.240 --> 00:06:38.500
which is automation for the rest of us.

00:06:38.530 --> 00:06:41.950
For people who are not programmers
or who do not feel comfortable

00:06:41.950 --> 00:06:45.360
writing scripting languages,
they can use Automator to

00:06:45.610 --> 00:06:48.950
drive all the same scriptable
programs that AppleScript does,

00:06:48.950 --> 00:06:50.750
but it's a lot easier for them.

00:06:50.930 --> 00:06:52.860
All they need to know
is what they want to do,

00:06:52.860 --> 00:06:54.090
not exactly how to do it.

00:06:54.090 --> 00:07:00.510
And if you were at the
developer technologies event,

00:07:00.520 --> 00:07:00.540
you could use Automator to
drive all the same scriptable

00:07:00.540 --> 00:07:00.540
programs that AppleScript does,
but it's a lot easier for them.

00:07:00.540 --> 00:07:00.540
All they need to know
is what they want to do,

00:07:00.540 --> 00:07:00.540
not exactly how to do it.

00:07:01.210 --> 00:07:03.100
Excuse me.

00:07:03.100 --> 00:07:06.130
If you were at the
Developer Technologies preview yesterday,

00:07:06.280 --> 00:07:08.240
you heard about Scripting Bridge.

00:07:08.240 --> 00:07:09.000
What's that?

00:07:09.000 --> 00:07:12.410
Well, come back at 5 o'clock
to see the Controlling

00:07:12.460 --> 00:07:14.720
Scriptable Application session.

00:07:14.720 --> 00:07:20.620
Scripting Bridge is a very interesting
piece that completes the puzzle.

00:07:20.620 --> 00:07:26.960
We'll allow one Cocoa application to
drive another Cocoa application to use

00:07:27.020 --> 00:07:29.670
its objects as if it were their own.

00:07:30.650 --> 00:07:32.320
There's more reasons why
you might want to make your

00:07:32.390 --> 00:07:34.090
application scriptable as well.

00:07:34.260 --> 00:07:35.560
First is loyal customers.

00:07:35.590 --> 00:07:39.080
Once your application is in
somebody's automated workflow,

00:07:39.110 --> 00:07:41.660
there's very little chance that they
will ever get rid of your application.

00:07:41.660 --> 00:07:43.960
They may dabble with your
competitor's product,

00:07:44.090 --> 00:07:46.350
they may use it for a few things,
but whenever they do

00:07:46.350 --> 00:07:49.490
that automated workflow,
they're going to use your product.

00:07:49.500 --> 00:07:51.780
I see Joe Pizzillo is in the back there.

00:07:51.780 --> 00:07:52.560
Hi, Joe.

00:07:52.560 --> 00:07:56.660
He came to our Making Your App Scriptable
session two years ago,

00:07:56.660 --> 00:08:00.120
and he brought his product
Anthracite from Medify,

00:08:00.120 --> 00:08:00.520
his company.

00:08:00.600 --> 00:08:03.380
And we started working
on making it scriptable.

00:08:03.400 --> 00:08:06.340
We met again last year,
and he was very nearly done,

00:08:06.340 --> 00:08:08.550
and we polished off a few rough edges.

00:08:08.550 --> 00:08:11.560
And now he's back again,
and we're going to talk about

00:08:11.560 --> 00:08:13.350
recordability this week.

00:08:13.420 --> 00:08:15.740
Joe has found that our story is true.

00:08:15.740 --> 00:08:20.240
When people start using your application
in their automated workflows,

00:08:20.240 --> 00:08:23.420
they're locked in,
and they never get rid of it.

00:08:23.420 --> 00:08:25.950
And he's seen sales go,
as he said last night,

00:08:26.080 --> 00:08:30.110
through the roof because of the
scriptability of his application.

00:08:31.690 --> 00:08:33.600
You can also let your
customers set the agenda.

00:08:33.600 --> 00:08:38.230
You can't possibly anticipate everything
that they're going to want to do,

00:08:38.230 --> 00:08:41.250
but you can give them some tools
to construct their own solutions.

00:08:41.360 --> 00:08:44.980
An example of that is,
you've certainly heard of OmniOutliner.

00:08:44.980 --> 00:08:46.840
It's an excellent outlining program.

00:08:47.470 --> 00:08:51.090
Well, there's another product
called Kinkless GTD.

00:08:51.100 --> 00:08:53.420
Kinkless GTD is an AppleScript.

00:08:53.570 --> 00:08:57.660
It's a very complex and powerful
AppleScript that implements a

00:08:57.660 --> 00:09:01.560
system for getting things done,
hence the name GTD.

00:09:01.560 --> 00:09:05.960
It's essentially an application
built on top of another application.

00:09:05.960 --> 00:09:11.830
The power of object model scriptability
allowed Kinkless GTD to build a whole

00:09:11.910 --> 00:09:14.900
new product on top of OmniOutliner.

00:09:15.470 --> 00:09:20.220
Now, both OmniOutliner and Kinkless
GTD are benefiting in sales from

00:09:20.220 --> 00:09:22.930
this synergy that they've created.

00:09:22.930 --> 00:09:25.910
You can create synergy with
other applications from your

00:09:26.050 --> 00:09:27.400
own house or from others.

00:09:28.400 --> 00:09:31.720
The last thing that we really
think is important is testing.

00:09:31.900 --> 00:09:34.500
It's the most immediate
benefit that you get.

00:09:34.560 --> 00:09:37.030
As soon as you make your
application scriptable,

00:09:37.120 --> 00:09:38.920
it's instantly easier to test.

00:09:38.920 --> 00:09:43.400
My testers wouldn't be able to do
what they do without AppleScript.

00:09:45.080 --> 00:09:47.490
An example of this is,
I'm sure you're familiar with

00:09:47.490 --> 00:09:49.000
the Microsoft Office suite.

00:09:49.000 --> 00:09:53.460
Its scripting dictionary is fantastic.

00:09:53.640 --> 00:09:57.020
They've covered all the bases.

00:09:57.020 --> 00:09:57.520
They've touched every
part of their program.

00:09:57.520 --> 00:10:01.970
There's hardly anything that you can do
in Word or Excel or PowerPoint that you

00:10:02.070 --> 00:10:04.590
cannot also do through scriptability.

00:10:05.270 --> 00:10:07.610
The irony of this is they
did it all for testing.

00:10:07.610 --> 00:10:10.630
They weren't even going to
release it to their end users.

00:10:10.630 --> 00:10:12.320
They did it all for testing.

00:10:12.890 --> 00:10:16.520
Only because your friend and I,
Sal Segoian, saw this in operation

00:10:16.520 --> 00:10:20.200
in their labs and said,
"You have to get this to your customers.

00:10:20.200 --> 00:10:23.430
You absolutely have to."
That's the reason why the

00:10:23.490 --> 00:10:28.080
Microsoft Office suite has such rich,
powerful object model scripting.

00:10:28.120 --> 00:10:29.220
They did it for themselves.

00:10:29.220 --> 00:10:30.680
They did it for their testers.

00:10:30.680 --> 00:10:32.570
Now, it's a big part of their product.

00:10:35.840 --> 00:10:37.360
How to get started.

00:10:37.380 --> 00:10:41.640
We always encourage people to
start with dictionary design.

00:10:41.640 --> 00:10:43.870
It's the route from which
everything else flows.

00:10:43.870 --> 00:10:45.530
It tells you how to write your code.

00:10:45.530 --> 00:10:50.240
It tells you how the scripters
are going to write their code.

00:10:50.240 --> 00:10:54.450
And it's very important to spend
time upfront on dictionary design.

00:10:54.450 --> 00:10:57.300
It'll solve lots of problems for you.

00:10:57.300 --> 00:11:01.960
You might feel a little trepidation
when you do dictionary design that

00:11:02.050 --> 00:11:07.140
your application's too big and that
you've made too many things scriptable.

00:11:07.150 --> 00:11:08.110
That's okay.

00:11:08.400 --> 00:11:12.220
Draw a nice line around what you
think you can accomplish in the first

00:11:12.220 --> 00:11:14.190
release and go ahead and do that.

00:11:15.560 --> 00:11:18.340
And then that'll give you
a roadmap for your future.

00:11:18.400 --> 00:11:21.550
The importance of designing an entire
dictionary before you start is you

00:11:21.550 --> 00:11:23.680
won't paint yourself into any corners.

00:11:23.720 --> 00:11:27.260
You won't realize a year from now, oh my,
I should have done this a different way.

00:11:27.260 --> 00:11:28.720
It would have been a lot easier.

00:11:28.720 --> 00:11:31.470
If you visualize your
entire object model first,

00:11:31.470 --> 00:11:33.650
you can avoid some of those problems.

00:11:33.720 --> 00:11:36.340
And if you want to do that,
and if you want to do it right,

00:11:36.360 --> 00:11:39.810
we've got a couple of things that you
can look at that will help you out.

00:11:39.840 --> 00:11:43.330
The scripting interface guidelines,
Chris Neville made sure that these

00:11:43.380 --> 00:11:45.050
are very complete and up to date.

00:11:45.610 --> 00:11:48.710
They're published as
Tech Note number 2106.

00:11:48.780 --> 00:11:51.380
And they guide you in
a certain direction.

00:11:51.380 --> 00:11:55.650
They tell you that you should be
providing tools for your end users rather

00:11:55.650 --> 00:11:58.300
than trying to solve individual problems.

00:11:58.300 --> 00:12:02.300
Your list of to-dos will just keep
growing and growing and growing if

00:12:02.300 --> 00:12:04.640
you try to solve individual problems.

00:12:04.640 --> 00:12:08.880
But if you give your scripters tools
to solve the problems themselves,

00:12:08.880 --> 00:12:12.470
you can spend a lot more of your
time on more productive ends.

00:12:12.550 --> 00:12:14.080
So you empower your users.

00:12:14.220 --> 00:12:15.480
You don't have to do all the work.

00:12:15.480 --> 00:12:18.100
trying to anticipate what they need
you give them the power to solve their

00:12:18.160 --> 00:12:22.130
own problems also by following the
guidelines you'll be more consistent

00:12:22.180 --> 00:12:25.460
and you'll interoperate better
with other applications because

00:12:25.650 --> 00:12:28.900
you'll be speaking the same language

00:12:29.610 --> 00:12:32.050
One of the toughest parts
of designing a dictionary is

00:12:32.070 --> 00:12:33.740
assigning the four byte codes.

00:12:33.740 --> 00:12:37.530
The four byte codes are the
actual medium of exchange,

00:12:37.530 --> 00:12:38.740
program to program.

00:12:38.840 --> 00:12:40.260
The scripter never sees them.

00:12:40.420 --> 00:12:42.590
Once you assign them,
you probably never see them unless

00:12:42.590 --> 00:12:44.000
you're doing some debugging.

00:12:44.000 --> 00:12:46.220
But it's important that
you pick the right ones.

00:12:46.220 --> 00:12:48.980
And we've finally done
something to help you out.

00:12:49.490 --> 00:13:08.860
Cheryl Evie put together a web page
with about 3,000 four byte codes

00:13:08.860 --> 00:13:08.860
and the matching human terminology.

00:13:08.860 --> 00:13:08.860
The rules are simple.

00:13:08.860 --> 00:13:08.860
If you use the same human terminology,
use the four byte code

00:13:08.860 --> 00:13:08.860
that's already being used.

00:13:08.860 --> 00:13:08.860
And vice versa,
if you use the same four byte code,

00:13:08.860 --> 00:13:08.860
it should mean the same human term.

00:13:08.860 --> 00:13:08.980
And you can look things up there.

00:13:08.980 --> 00:13:12.010
The best way to find this is
just go to the developer website,

00:13:12.010 --> 00:13:15.340
search for Apple event codes,
and the first thing on the list should

00:13:15.410 --> 00:13:17.140
be this page of four byte codes.

00:13:18.620 --> 00:13:21.410
I strongly encourage you to consult
that before you release your

00:13:21.610 --> 00:13:23.240
scriptability for the first time.

00:13:23.240 --> 00:13:24.880
It can save you lots of headaches.

00:13:28.210 --> 00:13:32.460
Every time I talk to people about
putting scriptability in their app,

00:13:32.460 --> 00:13:34.980
I talk to them about logging.

00:13:35.240 --> 00:13:40.830
Cocoa Scripting uses your
application as a set of callbacks.

00:13:40.830 --> 00:13:44.820
And whenever AppleScript needs
something from your application,

00:13:44.950 --> 00:13:49.080
Cocoa Scripting will route that to
a particular method on a particular

00:13:49.410 --> 00:13:51.770
object and ask for that information.

00:13:52.000 --> 00:13:54.040
After you get used to it,
it's all very logical and

00:13:54.120 --> 00:13:55.500
it all makes perfect sense.

00:13:55.500 --> 00:13:58.150
But when you're first getting started,
it's difficult to learn just

00:13:58.640 --> 00:14:01.730
exactly what Cocoa Scripting is
going to do and just exactly what

00:14:01.740 --> 00:14:03.450
it's going to do next after that.

00:14:03.510 --> 00:14:08.340
So I strongly encourage people to put a
logging mechanism into their application

00:14:08.340 --> 00:14:10.860
so that they can follow this activity.

00:14:11.300 --> 00:14:14.890
In the past, I've shown just a really
simple logging mechanism.

00:14:14.910 --> 00:14:15.740
It's a macro.

00:14:15.740 --> 00:14:18.070
There's a switch that
turns it on and off.

00:14:18.090 --> 00:14:22.330
I've got two of them in case I want to
provide a little bit of extra information

00:14:22.330 --> 00:14:24.260
besides just a logging string.

00:14:24.260 --> 00:14:28.790
But even just a logging string that says,
I'm here, is probably going to cover

00:14:29.130 --> 00:14:30.530
most of what you need.

00:14:30.540 --> 00:14:34.220
But with the help of Brook Callahan,
there's been a huge leap

00:14:34.220 --> 00:14:36.320
forward in logging technology.

00:14:36.320 --> 00:14:39.220
I've now got a much
more complicated macro.

00:14:39.220 --> 00:14:44.800
But this macro puts interesting
information into the console log,

00:14:45.040 --> 00:14:48.740
like the file name, the line number,
the function that's being executed,

00:14:48.740 --> 00:14:51.570
and then any other information that
you tack on to the end of that.

00:14:51.620 --> 00:14:54.660
Whether you choose the
simple or the complex,

00:14:54.660 --> 00:14:56.510
it doesn't matter.

00:14:56.520 --> 00:14:59.750
As long as you have a way of
figuring out where your program's

00:14:59.880 --> 00:15:03.410
been and what it's done and how it's
interacting with Cocoa Scripting,

00:15:03.410 --> 00:15:05.890
then you'll learn a lot about
how Cocoa Scripting works

00:15:05.890 --> 00:15:07.360
and what it expects from you.

00:15:11.470 --> 00:15:17.030
This is a sample script
that matches our demo today.

00:15:17.080 --> 00:15:17.840
Or no, it doesn't.

00:15:17.840 --> 00:15:19.220
It's from System Events.

00:15:19.290 --> 00:15:22.350
And all it does is it finds out whether
the script menu is enabled or not.

00:15:22.420 --> 00:15:25.630
And you'll see at the bottom that
there's a couple of sample log entries

00:15:25.720 --> 00:15:27.450
that come back when you do this.

00:15:27.610 --> 00:15:32.330
And in there,
the file name is highlighted.

00:15:32.620 --> 00:15:35.750
The line number that
you're executing is noted.

00:15:35.820 --> 00:15:38.980
The function that is
being called is there.

00:15:39.290 --> 00:15:43.910
And a little bit of extra information,
which is the input to this method,

00:15:43.910 --> 00:15:44.940
is also shown.

00:15:45.190 --> 00:15:47.380
This is going to be invaluable if
you're trying to figure out what

00:15:47.460 --> 00:15:51.520
your program is doing and why it
might not be doing things right.

00:15:54.700 --> 00:15:59.630
We want to introduce people who
are new to scriptability to some of

00:15:59.630 --> 00:16:04.600
the simple things and how to do the
easy first steps to get started.

00:16:04.750 --> 00:16:07.970
So we're going to have a
demo of basic scriptability.

00:16:10.310 --> 00:16:12.650
But before I get to that,
I'm going to tell you a little bit about

00:16:12.650 --> 00:16:13.640
something we're not going to cover.

00:16:13.640 --> 00:16:15.700
Element accessors are very important.

00:16:15.840 --> 00:16:20.440
Element accessors allow
Cocoa Scripting to get at the

00:16:20.440 --> 00:16:22.080
objects in your application.

00:16:22.080 --> 00:16:27.120
In AppleScript, objects are things
inside of other things.

00:16:27.120 --> 00:16:29.360
It's a hierarchical
containment relationship.

00:16:29.360 --> 00:16:32.280
So in order to get, say,
a document from your application,

00:16:32.280 --> 00:16:36.020
and then a paragraph from your document,
and then a word from that paragraph,

00:16:36.140 --> 00:16:38.440
you're going to need element accessors.

00:16:38.950 --> 00:16:40.930
There's several different kinds.

00:16:40.940 --> 00:16:44.580
The most basic one accesses the
entire collection all at once.

00:16:44.580 --> 00:16:48.670
So if you said, get every document,
a documents method would be called.

00:16:48.870 --> 00:16:52.240
If you said, get every graphic,
a graphics method like this

00:16:52.240 --> 00:16:54.220
one up here would be called.

00:16:54.220 --> 00:16:58.840
And your job at that time is to return
an array with the entire set of objects.

00:16:58.880 --> 00:17:02.270
This might not be the best way
for your application to work.

00:17:02.370 --> 00:17:05.010
If you've got a very large
collection of objects,

00:17:05.100 --> 00:17:08.810
or if it's difficult to assemble
them all in one place at one time,

00:17:08.820 --> 00:17:11.480
you might want to use some
of these other methods.

00:17:11.480 --> 00:17:14.060
You can get at an individual
object by its index,

00:17:14.060 --> 00:17:16.560
you can get at an individual
object by its name,

00:17:16.560 --> 00:17:19.680
and you can get at an individual
object by a unique ID.

00:17:19.680 --> 00:17:23.770
If you support a large database,
you might want to use these more

00:17:23.770 --> 00:17:28.320
efficient accessors to get at that
stuff so you don't have to constantly

00:17:28.320 --> 00:17:33.480
take the entire million record database
and send it back to Cocoa Scripting.

00:17:35.950 --> 00:17:37.730
For managing elements,
you're going to need to be

00:17:37.830 --> 00:17:39.540
able to create and delete them.

00:17:39.650 --> 00:17:44.400
So there's two different ways to
insert objects into your collection.

00:17:44.400 --> 00:17:48.740
The first method up here is a method
where the order doesn't matter.

00:17:48.740 --> 00:17:50.820
Sometimes things have a natural order.

00:17:50.820 --> 00:17:53.190
If you make a new window, for instance,
you're always going to

00:17:53.280 --> 00:17:54.350
want to make it in front.

00:17:54.390 --> 00:17:57.250
You don't want to make a new window
in the back where nobody can see it.

00:17:58.520 --> 00:18:00.610
But if, for instance,
you do want to make a new window in

00:18:00.610 --> 00:18:02.700
the back where nobody can see it,
the second method will

00:18:02.700 --> 00:18:03.620
allow you to do that.

00:18:03.690 --> 00:18:08.020
It'll make the window and it'll insert
it in the collection at a specific index.

00:18:08.020 --> 00:18:11.950
Eventually, you're going to need
to get rid of things.

00:18:11.950 --> 00:18:15.320
The method here,
remove from graphics at index,

00:18:15.550 --> 00:18:20.420
is the method that you'd use to
remove a graphic from the connection.

00:18:22.390 --> 00:18:26.800
You'll want to provide both insertion
and deletion accessors for any

00:18:26.800 --> 00:18:31.510
objects that you know the users are
going to want to create and delete.

00:18:31.520 --> 00:18:37.000
And every good scriptable
object has an object specifier.

00:18:37.020 --> 00:18:40.360
In order to get back to that
object a second and a third time,

00:18:40.360 --> 00:18:42.660
it needs to be able to
describe itself somehow.

00:18:42.660 --> 00:18:46.120
So every scriptable object that
you create should have an object

00:18:46.160 --> 00:18:50.040
specifier method on it that returns a
description of how to get to this object.

00:18:50.290 --> 00:18:54.810
So, for instance,
Word 5 of Paragraph 3 of Document 1.

00:18:54.880 --> 00:18:58.620
That will take you back to the
same place over and over again.

00:18:58.620 --> 00:19:02.550
And so your objects need to be able
to identify themselves in this way.

00:19:04.300 --> 00:19:09.460
What we are going to talk about in
our little demo today is properties.

00:19:09.540 --> 00:19:13.840
Property accessors are methods
of a scriptable object,

00:19:13.900 --> 00:19:16.920
and they're pretty simple.

00:19:16.920 --> 00:19:21.580
If you're familiar with KVC and KVO,
they follow the same naming pattern.

00:19:21.580 --> 00:19:25.070
These are the accessors that
get the name of an object and

00:19:25.070 --> 00:19:27.180
can set the name of that object.

00:19:27.240 --> 00:19:30.680
If you're using KVC and
KVO for other purposes,

00:19:30.680 --> 00:19:33.580
you may already have a lot of
these accessors in your program.

00:19:34.330 --> 00:19:37.620
then it's just a matter of defining
your dictionary to get access to them.

00:19:39.380 --> 00:19:44.410
So now I'm going to do a short demo
on logging and basic scriptability.

00:19:53.350 --> 00:19:58.820
This is the Sketch application,
which is part of our sample

00:19:58.820 --> 00:20:03.600
code available on developer.com,
and we've made some modifications to it.

00:20:03.820 --> 00:20:06.130
First thing I've done is
I've added this header file,

00:20:06.220 --> 00:20:09.100
which has got my logging macro in it,
and you can see I've turned

00:20:09.100 --> 00:20:11.370
the master switch on,
so whatever I do,

00:20:11.370 --> 00:20:14.670
the logging is going to happen,
and I'll be able to see what's

00:20:14.670 --> 00:20:17.490
happening while I'm running my program.

00:20:19.120 --> 00:20:21.570
One of the things that people
forget to do is to make

00:20:21.570 --> 00:20:23.480
their preferences scriptable.

00:20:23.640 --> 00:20:26.150
We have a tendency to think the users
are going to set the preferences

00:20:26.150 --> 00:20:29.030
once and then forget about them,
and that's largely true.

00:20:29.030 --> 00:20:31.860
But there are other groups of
people that are interested in this.

00:20:31.980 --> 00:20:34.280
Your own testers, for instance,
will love you if you make

00:20:34.390 --> 00:20:35.760
the preferences scriptable.

00:20:35.760 --> 00:20:39.320
They need to set up multiple
machines multiple times every day,

00:20:39.320 --> 00:20:43.050
and if there's an automated way to do it,
that's great for them.

00:20:43.540 --> 00:20:46.640
Other people that like this are
anyone that administers a large

00:20:46.640 --> 00:20:49.860
group of machines at a school or
in a lab and needs to go around

00:20:49.860 --> 00:20:53.480
and set the preferences on a dozen
different machines all at once.

00:20:53.540 --> 00:20:56.440
They'll like having
scriptable preferences.

00:20:56.440 --> 00:20:59.850
So Sketch, as it turns out,
only has two preferences.

00:20:59.850 --> 00:21:04.470
One is a checkbox to say whether or not
it should be auto-saving the document,

00:21:04.470 --> 00:21:07.680
and the second is an integer
that tells the interval at

00:21:07.700 --> 00:21:12.370
which to save the document,
and we're going to make those scriptable.

00:21:13.230 --> 00:21:15.630
So you can see here,

00:21:15.810 --> 00:21:20.640
I've got my method that gets
the autosave state and tells

00:21:20.640 --> 00:21:24.190
me what it's set to right now.

00:21:24.290 --> 00:21:27.000
And I've got a second method
to set the autosave state.

00:21:27.130 --> 00:21:29.840
So now we've got a read/write property.

00:21:31.390 --> 00:21:35.940
Also down here, we've got another pair
of matching accessors,

00:21:36.000 --> 00:21:41.980
one to get the autosave interval and
the other to set the autosave interval.

00:21:42.760 --> 00:21:45.370
I've been telling people,
including earlier today,

00:21:45.490 --> 00:21:49.970
that if you're using KVC and KVO,
you're a jump ahead.

00:21:49.980 --> 00:21:53.180
And this illustrates
one of the reasons why.

00:21:53.180 --> 00:21:57.490
The only thing that I have to do to
make this work is to talk to the shared

00:21:57.540 --> 00:22:01.340
user defaults controller and say,
I want to set this value,

00:22:01.340 --> 00:22:02.980
auto-saving delay.

00:22:04.560 --> 00:22:07.820
The rest of Sketch is hooked up
with Cocoa Bindings so that the

00:22:07.820 --> 00:22:11.720
feedback to the user is automatic
and you don't have to do anything.

00:22:11.720 --> 00:22:14.370
So if you're using technologies
like Cocoa Bindings,

00:22:14.370 --> 00:22:17.310
making your application
scriptable gets even easier.

00:22:24.740 --> 00:22:24.930
So we're going to run this.

00:22:32.400 --> 00:22:37.180
I'm going to run an
AppleScript to show how it works.

00:22:37.180 --> 00:22:38.800
So these are the sketch preferences.

00:22:38.800 --> 00:22:40.800
Like I said, there's only two.

00:22:40.820 --> 00:22:46.470
And right now, autosave is off,
and the interval is set to the default,

00:22:46.470 --> 00:22:46.470
which is 60 seconds.

00:22:50.330 --> 00:22:53.600
Our script is going to change those
values and then change them back

00:22:53.610 --> 00:22:55.410
just for purposes of demonstration.

00:22:55.540 --> 00:22:57.750
This is a good example of
a round trip test that puts

00:22:57.840 --> 00:22:59.020
things back the way it was.

00:22:59.190 --> 00:23:02.900
You're going to want to use those
because it simplifies your testing.

00:23:03.330 --> 00:23:07.260
So you can see, every time I click run
on the AppleScript,

00:23:07.510 --> 00:23:11.060
the state of the preferences changes,
and the visual feedback

00:23:11.060 --> 00:23:12.120
to the user is automatic.

00:23:12.230 --> 00:23:16.710
All we're doing is talking to the
permanent store of the preferences,

00:23:16.790 --> 00:23:19.130
and Cocoa Bindings
takes care of the rest.

00:23:19.130 --> 00:23:23.100
We didn't have to write any code to
get this visual feedback to work.

00:23:28.400 --> 00:23:41.190
And here's what's
happening with our logging.

00:23:41.190 --> 00:23:41.190
We find that the SDF parsing is stricter
in Leopard than it was in Tiger.

00:23:41.940 --> 00:23:45.100
Here's an example of
autosave being turned on,

00:23:45.100 --> 00:23:47.340
autosave being turned off,
and as you can see,

00:23:47.340 --> 00:23:48.870
I repeated that process twice.

00:23:49.000 --> 00:23:50.460
And this is all in the log.

00:23:50.600 --> 00:23:56.490
So now we know what Cocoa Scripting
did and how our program reacted to it.

00:23:59.070 --> 00:24:03.520
Another thing that people
sometimes forget to do is to

00:24:03.520 --> 00:24:07.700
make the selection scriptable.

00:24:08.180 --> 00:24:12.210
It's important to have a scriptable
selection for a couple of reasons.

00:24:12.340 --> 00:24:15.390
Script menu is one of them.

00:24:15.800 --> 00:24:34.700
[Transcript missing]

00:24:36.430 --> 00:24:39.650
The selection is going to return
an array of all the objects that

00:24:39.650 --> 00:24:41.840
are selected at the present time.

00:24:41.840 --> 00:24:43.170
But we want more than that.

00:24:43.170 --> 00:24:47.200
We want to be able to find out if
an individual graphic is selected,

00:24:47.200 --> 00:24:49.920
and this accessor will
allow you to do that.

00:24:49.920 --> 00:24:52.960
And most importantly,
we want to actually be

00:24:52.960 --> 00:24:54.740
able to select things.

00:24:54.740 --> 00:24:59.430
So this final accessor will allow
you to turn selection on and off.

00:25:16.490 --> 00:25:27.720
So if we bring Sketch forward and
we put some graphics in the window,

00:25:27.790 --> 00:25:31.690
and I'll select two of them and
leave two of them unselected.

00:25:36.930 --> 00:25:41.780
So the easiest and the most direct
way of demonstrating this is to

00:25:41.780 --> 00:25:44.450
just go ahead and get the selection.

00:25:46.480 --> 00:25:49.610
And this would be the first line
of a script menu script to get

00:25:49.710 --> 00:25:53.320
the selection from Document 1 and
then do some kind of action on it.

00:25:53.370 --> 00:25:57.230
So we can see that it tells us that
Graphic 1 and Graphic 4 in the window

00:25:57.230 --> 00:25:59.770
are the ones that are currently selected.

00:26:00.450 --> 00:26:05.540
We also want to be able to
get at the property that

00:26:06.670 --> 00:26:06.670
tells us whether an individual

00:26:36.040 --> 00:26:37.180
Whether an individual
graphic is selected,

00:26:37.180 --> 00:26:37.180
and we can do that as well.

00:26:37.180 --> 00:26:37.180
And one of the most powerful parts
of this is the ability to use

00:26:37.180 --> 00:26:37.180
selection as part of a who's clause.

00:26:37.180 --> 00:26:37.180
So if you want to find every blue
rectangle who's selected as true,

00:26:37.180 --> 00:26:37.180
you can do something like that.

00:26:37.180 --> 00:26:37.180
And again,
your users can use this to construct

00:26:37.180 --> 00:26:37.180
automator actions and script menu scripts
that will help them get their work done.

00:26:38.550 --> 00:26:45.820
And we've made this all
read-write so that we can--

00:26:48.600 --> 00:26:55.950
We've made this all read/write so that
we can actually change the selection.

00:26:55.950 --> 00:26:55.950
And I've got a little

00:26:56.200 --> 00:26:59.190
We have a little junior animation
here that we'll show you.

00:26:59.300 --> 00:27:02.000
We can control the selection
from AppleScript now,

00:27:02.000 --> 00:27:04.200
as well as just asking about it.

00:27:04.200 --> 00:27:10.340
And that's our demonstration
of simple scriptability.

00:27:12.000 --> 00:27:13.650
This is where you should start.

00:27:13.720 --> 00:27:17.300
Just make a few things scriptable,
make a few properties of the application,

00:27:17.380 --> 00:27:19.640
get the selection,
start with something like this,

00:27:19.660 --> 00:27:24.080
and you'll already have something
that'll be useful to your users,

00:27:24.080 --> 00:27:26.360
and then you can build on that.

00:27:27.310 --> 00:27:31.060
So what you just saw is we showed
you the results of the logging,

00:27:31.180 --> 00:27:34.440
how you can tell how Cocoa Scripting
is calling your application,

00:27:34.570 --> 00:27:37.570
and we've shown you how to
write accessors that get and

00:27:37.620 --> 00:27:39.470
set some simple properties.

00:27:40.580 --> 00:27:44.490
There's been a lot of
development in Cocoa Scripting

00:27:44.730 --> 00:27:48.500
in the past couple of years,
and there's new capabilities.

00:27:48.650 --> 00:27:52.640
One of the things that we've been asking
you to do is to migrate your scriptable

00:27:52.700 --> 00:27:57.070
applications from Script Suite and
Script Terminology files to SDEF files.

00:27:57.600 --> 00:28:02.600
And the reason you'll want to do
that is the SDF format allows you to

00:28:02.600 --> 00:28:06.960
define a much richer dictionary with
a lot more information in it that

00:28:06.960 --> 00:28:12.310
will help your scripters use your
application and get at the power of it.

00:28:12.470 --> 00:28:14.080
In order to do that,
you're going to have to

00:28:14.080 --> 00:28:16.280
register an Apple event handler,
which is something you

00:28:16.280 --> 00:28:17.150
never had to do before.

00:28:17.250 --> 00:28:19.940
Cocoa Scripting took care
of all of that for you.

00:28:20.030 --> 00:28:23.930
And this is the handler that
you're going to want to register.

00:28:24.490 --> 00:28:27.570
You need to put this somewhere
very early in your program.

00:28:27.700 --> 00:28:32.920
In the application delegate,
application will finish launching is

00:28:32.980 --> 00:28:37.310
a good place for it because that means
it'll get executed before the first

00:28:37.410 --> 00:28:39.800
event arrives in your application.

00:28:39.800 --> 00:28:42.430
And since the first event
might be this very event,

00:28:42.430 --> 00:28:45.020
you're going to want to
get that in there early.

00:28:46.390 --> 00:28:48.670
The important pieces
of information in here,

00:28:48.860 --> 00:28:50.760
this call will register any handler.

00:28:50.760 --> 00:28:55.030
The important pieces of information
in here are these two four byte codes,

00:28:55.030 --> 00:28:56.010
ASCR and GSDF.

00:28:56.010 --> 00:28:58.820
Those are the ones that say
I'm interested in the event

00:28:58.850 --> 00:29:01.880
when I am asked to get the SDF.

00:29:01.880 --> 00:29:06.760
I want to handle that myself instead
of letting Cocoa Scripting handle it.

00:29:07.120 --> 00:29:09.350
When you register this handler,
you also have to define

00:29:09.350 --> 00:29:10.490
the handler itself.

00:29:10.490 --> 00:29:14.390
This call has to go somewhere
and you have to return the proper

00:29:14.390 --> 00:29:17.900
data so that the script editor
can display your dictionary and so

00:29:17.900 --> 00:29:21.000
Cocoa Scripting can dispatch your events.

00:29:21.180 --> 00:29:25.150
And the prototype for that event
and the prototype for that handler

00:29:25.150 --> 00:29:27.000
is going to look like this.

00:29:27.020 --> 00:29:32.400
And that handleGetSdef event was one
of the operands to the previous call.

00:29:35.730 --> 00:29:39.700
Why would you want to have,
why would you want to

00:29:39.710 --> 00:29:43.680
handle the processing of the
SDEF dictionary yourself?

00:29:43.840 --> 00:29:45.290
Well, SDEF dictionaries are static.

00:29:45.290 --> 00:29:48.330
Each application is allowed one.

00:30:08.090 --> 00:30:08.090
And that may not work for you.

00:30:08.090 --> 00:30:08.090
You may need to do something
more elaborate than that.

00:30:08.090 --> 00:30:08.090
If, for instance,
you have a plugin architecture and you

00:30:08.090 --> 00:30:08.090
want those plugins to also be scriptable,
you're going to have to provide

00:30:08.090 --> 00:30:08.090
the dictionary yourself.

00:30:08.090 --> 00:30:08.090
Cocoa Scripting is not going
to be able to piece your

00:30:08.090 --> 00:30:08.090
dictionary together for you.

00:30:08.220 --> 00:30:12.750
I've created, by agreement with myself,
a simple plugin architecture that

00:30:12.870 --> 00:30:18.650
allows me to add capabilities
to Sketch with external plugins.

00:30:18.660 --> 00:30:21.430
And it consists of a few simple rules.

00:30:21.500 --> 00:30:24.740
First, it's going to be a Cocoa bundle
like any other Cocoa bundle,

00:30:24.740 --> 00:30:26.780
but it's going to have
a different extension.

00:30:26.780 --> 00:30:29.980
It's going to have Sketch plugin as its
extension so that I can pick it out from

00:30:29.980 --> 00:30:33.860
any other plugins that may be around and
make sure I use it for the right purpose.

00:30:33.860 --> 00:30:37.040
And it's got to go in one of
three particular locations.

00:30:37.040 --> 00:30:40.640
The user has an application
support directory,

00:30:40.640 --> 00:30:42.730
and he can put it in there.

00:30:42.800 --> 00:30:45.710
If you are going to provide
these plugins with an installer,

00:30:45.760 --> 00:30:49.340
you might want to put them in
the machine location and the

00:30:49.340 --> 00:30:55.100
application support directory there
so that all users can get at them.

00:30:55.100 --> 00:30:58.370
Or if you want to couple this plugin
tightly with your application for

00:30:58.450 --> 00:31:02.900
purposes of drag and drop installing,
you can actually put the plugin

00:31:02.900 --> 00:31:05.280
inside the application itself.

00:31:07.220 --> 00:31:10.150
And again, by agreement with myself,
I decided that my plugin

00:31:10.150 --> 00:31:12.060
architecture would have two calls.

00:31:12.060 --> 00:31:16.400
The first plugin did load gets
called at the same time application

00:31:16.710 --> 00:31:19.030
will finish launching is called.

00:31:19.030 --> 00:31:22.760
And if you have any upfront
initialization that you need to do

00:31:22.760 --> 00:31:26.670
before the first event comes in,
this is the place to put it.

00:31:26.670 --> 00:31:30.490
If, for instance, you wanted to register
yet another event handler,

00:31:30.490 --> 00:31:31.710
you'd do that here.

00:31:32.510 --> 00:31:35.740
Eventually, either the script editor or
Cocoa Scripting will call

00:31:35.740 --> 00:31:38.950
and ask for your dictionary,
and you need to provide it at that

00:31:38.950 --> 00:31:42.330
time so that the dictionary can be
displayed and so the Apple events

00:31:42.330 --> 00:31:44.040
can be dispatched properly.

00:31:44.040 --> 00:31:47.790
And that call will come in at
a method called SDef paths,

00:31:47.800 --> 00:31:52.360
and all that you have to do is pass
back an array of the file paths where

00:31:52.360 --> 00:31:57.400
your dictionary definitions are,
and you can have as many as you want.

00:31:59.270 --> 00:32:03.280
So I'm going to do another demo of
implementing a dynamic dictionary

00:32:04.040 --> 00:32:07.000
and a plug-in architecture.

00:32:26.310 --> 00:32:31.880
In this case, I do have to go in and
modify an existing file,

00:32:32.060 --> 00:32:34.650
and that's the drawAppDelegate.

00:32:35.010 --> 00:32:38.440
And in the
applicationWillFinishLaunching method,

00:32:38.440 --> 00:32:42.390
I've made some changes.

00:32:46.800 --> 00:33:09.000
[Transcript missing]

00:33:09.900 --> 00:33:35.100
[Transcript missing]

00:33:36.680 --> 00:33:40.390
And at that same time,
I have also registered

00:33:40.390 --> 00:33:41.920
a handler for the event.

00:33:42.080 --> 00:33:45.600
So when the script editor or
Cocoa Scripting wants my dictionary,

00:33:45.710 --> 00:33:48.010
it will come to me here.

00:33:52.300 --> 00:34:00.070
In another file, I have my subroutines,
and this is the load plugin subroutine.

00:34:00.460 --> 00:34:04.170
And you can see what is happening
here is just arbitrarily the

00:34:04.310 --> 00:34:09.060
first dictionary in the collection
is being selected as the base,

00:34:09.060 --> 00:34:14.860
and then I'm looping to add
the other dictionaries to it.

00:34:18.420 --> 00:34:22.740
So I'm looping through the plugin paths,
grouping them all together

00:34:22.740 --> 00:34:25.380
into one big dictionary,
making that the return

00:34:25.380 --> 00:34:27.880
value for the event handler,
and sending it back.

00:34:31.920 --> 00:34:35.460
So let's run this.

00:34:35.560 --> 00:34:40.590
The plugin that I've chosen to
make is a verb handler that we've

00:34:40.590 --> 00:34:43.180
used before to align objects.

00:34:43.200 --> 00:34:46.180
Align is a command in
the Sketch menu bar,

00:34:46.210 --> 00:34:48.180
but it's not available through scripting.

00:34:48.200 --> 00:34:53.210
So what we've done is we've added
the align command as a plugin.

00:34:56.170 --> 00:35:01.280
So if we have a number of
graphics in the window,

00:35:19.650 --> 00:35:22.100
We've got a number of
graphics in the window.

00:35:22.110 --> 00:35:26.600
We can say through scriptability that
we want to align their vertical centers,

00:35:26.620 --> 00:35:29.470
which should make them all
line up in a nice neat row.

00:35:29.600 --> 00:35:32.630
Then we're going to delay for three
seconds and then we're going to

00:35:32.630 --> 00:35:34.530
align the horizontal centers as well.

00:35:34.600 --> 00:35:37.180
So when we're done,
all these graphics should be centered,

00:35:37.180 --> 00:35:38.510
one right on top of the other.

00:35:38.600 --> 00:35:43.790
And there they are.

00:35:46.340 --> 00:35:49.310
We can see that our graphics have
all been rearranged so that one

00:35:49.310 --> 00:35:51.730
lays right on top of the other.

00:35:57.200 --> 00:36:00.360
So that's a brief demonstration
of the kind of thing you can

00:36:00.360 --> 00:36:02.060
do with a dynamic dictionary.

00:36:02.060 --> 00:36:04.800
Can we have the slides back again?

00:36:04.850 --> 00:36:06.620
Thank you.

00:36:07.480 --> 00:36:11.040
So that's a demonstration of the kind
of thing that you can do with a dynamic

00:36:11.040 --> 00:36:15.200
dictionary and using a dynamic dictionary
to create a plugin architecture.

00:36:15.200 --> 00:36:19.280
You can extend an existing application,
add capabilities to it,

00:36:19.390 --> 00:36:22.940
and then ship that plugin separately
or as part of the application itself.

00:36:22.950 --> 00:36:25.490
If you're interested in
doing these kinds of things,

00:36:25.490 --> 00:36:27.170
we can help you out here this week.

00:36:27.290 --> 00:36:33.700
We can meet with you in the lab and
make sure that your application can

00:36:33.700 --> 00:36:33.700
handle what it is you want to do.

00:36:37.740 --> 00:36:39.780
can't stress testing enough.

00:36:39.800 --> 00:36:43.800
Testing is the only way you're going
to make sure your scriptability works,

00:36:43.800 --> 00:36:46.880
and it's also one of the great
benefits of scriptability.

00:36:46.920 --> 00:36:52.730
Your model objects can be
exercised rapidly and repeatedly

00:36:53.520 --> 00:36:57.910
through AppleScript in a way
that a human tester can't.

00:36:57.910 --> 00:37:01.930
And you want to make sure that
that capability is available

00:37:01.930 --> 00:37:04.130
to whoever does the testing.

00:37:04.130 --> 00:37:07.290
If you've got professional testers,
we have two very good ones,

00:37:07.290 --> 00:37:10.270
John Coelho and Doug Korns
do our testing for us.

00:37:10.420 --> 00:37:14.240
They love testing AppleScript because
all of their tests are automated.

00:37:14.240 --> 00:37:16.880
And if you have testers and
you want them to love you,

00:37:16.880 --> 00:37:19.220
you'll make your application scriptable.

00:37:19.220 --> 00:37:22.990
If you don't have testers,
then it's even more important to make

00:37:23.030 --> 00:37:27.420
your application scriptable because
you're doing all of this yourself,

00:37:27.430 --> 00:37:31.250
and you want to spend more time
making your application better,

00:37:31.250 --> 00:37:32.590
not just testing it.

00:37:32.590 --> 00:37:37.090
So when you put your tests together,
I want you to be very thorough.

00:37:37.610 --> 00:37:42.480
Send your code through every
path that it can possibly take.

00:37:42.480 --> 00:37:44.820
When you get elements,
you should get every element and

00:37:44.820 --> 00:37:47.520
call that collection accessor
that we talked about before.

00:37:47.520 --> 00:37:49.220
Make sure that that works.

00:37:49.220 --> 00:37:52.520
But you should also access
all of your elements by name,

00:37:52.520 --> 00:37:55.180
by ID,
and by index if they're all applicable

00:37:55.220 --> 00:37:59.970
because you want to make sure that those
more efficient accessors get called or,

00:37:59.970 --> 00:38:02.920
if you didn't code the
more efficient accessors,

00:38:02.920 --> 00:38:05.840
that the built-in support
from Cocoa Scripting is

00:38:05.910 --> 00:38:07.520
satisfactory for your person.

00:38:07.520 --> 00:38:13.620
So when you get into very large
collections that you need to

00:38:13.690 --> 00:38:17.360
have the efficiency accessors.

00:38:20.570 --> 00:38:24.890
You're going to want to get at the
elements in various other ways as well.

00:38:25.070 --> 00:38:28.740
AppleScript has some names built into
it for the first and last element.

00:38:28.740 --> 00:38:32.500
Some element just selects
something randomly.

00:38:32.500 --> 00:38:34.740
You want to test all of that
and make sure that that works.

00:38:34.740 --> 00:38:35.920
Negative indices work.

00:38:35.920 --> 00:38:38.420
They count backwards from
the end of the collection.

00:38:38.420 --> 00:38:40.590
You want to test those and
make sure that they work.

00:38:40.650 --> 00:38:42.950
And the most important, whose clauses.

00:38:42.950 --> 00:38:46.650
Whose clauses are part of the
really great power of AppleScript.

00:38:46.700 --> 00:38:49.570
You absolutely want to
make sure that those work.

00:38:49.640 --> 00:38:51.450
Put together some simple whose clauses.

00:38:51.450 --> 00:38:53.820
Put together some really
complicated whose clauses.

00:38:53.820 --> 00:38:56.090
Make sure that you get the
results that you expect.

00:38:56.150 --> 00:38:58.340
And when you get these results,
save them.

00:38:58.340 --> 00:39:01.570
Keep them somewhere so that the
next time you change your program,

00:39:01.570 --> 00:39:04.290
you can run your scripts again,
you can get the results,

00:39:04.400 --> 00:39:07.100
and you can make sure
that they haven't changed.

00:39:07.100 --> 00:39:09.370
Or, if you really did want
something to change,

00:39:09.370 --> 00:39:11.550
that you got the change
you were expecting.

00:39:13.540 --> 00:39:15.390
You want to be able to
make and delete elements.

00:39:15.400 --> 00:39:18.210
You want to call those insertion
and deletion accessors and make

00:39:18.300 --> 00:39:20.000
sure that they work correctly.

00:39:20.000 --> 00:39:23.280
You want to make sure that the rest
of the collection functions properly

00:39:23.280 --> 00:39:26.150
after an element's been deleted,
that there isn't some kind

00:39:26.260 --> 00:39:28.390
of hole in your collection
that doesn't work anymore.

00:39:28.390 --> 00:39:31.190
So you're going to want
to make and delete.

00:39:31.400 --> 00:40:01.200
[Transcript missing]

00:40:01.890 --> 00:40:05.840
When you do your testing,
you want to set up some repeatable tests.

00:40:05.840 --> 00:40:09.650
So I suggest that you do a get
set reset operation on all of

00:40:09.650 --> 00:40:12.000
your read write properties.

00:40:12.170 --> 00:40:14.440
Change the value,
change it back so that the next

00:40:14.520 --> 00:40:17.240
time you come and run this test,
you'll get the same results.

00:40:17.300 --> 00:40:21.200
You won't constantly be toggling
between two different sets of results.

00:40:21.340 --> 00:40:25.990
You want to test edge cases.

00:40:25.990 --> 00:40:25.990
You want to make sure that

00:40:26.240 --> 00:40:29.460
Values that are right up to the
edge of what works work properly.

00:40:29.460 --> 00:40:31.960
So you might want to set the
width of a graphic to zero,

00:40:31.960 --> 00:40:35.260
and then what you should see on
the screen is a straight line

00:40:35.470 --> 00:40:37.480
instead of an oval or a rectangle.

00:40:37.480 --> 00:40:40.870
And you also want to purposely create
error cases in your tests and make

00:40:40.940 --> 00:40:43.900
sure that they get handled correctly,
that meaningful error

00:40:43.900 --> 00:40:46.850
messages get passed back,
and that the program continues to

00:40:46.850 --> 00:40:50.650
function correctly even after an
error has been made by the scripter.

00:40:53.250 --> 00:40:56.980
When you add commands to your dictionary,
you're going to want

00:40:57.020 --> 00:40:58.700
to test those yourself.

00:40:58.740 --> 00:41:01.350
The commands that you add to the
dictionary are your value added.

00:41:01.390 --> 00:41:04.150
The standard suite verbs
are very powerful and can do

00:41:04.150 --> 00:41:07.350
most of what you need to do,
but your application does at least

00:41:07.410 --> 00:41:10.380
one thing that nobody else can do,
and you'll be adding an

00:41:10.380 --> 00:41:12.580
AppleScript command to get at that.

00:41:12.600 --> 00:41:15.340
You want to test those and make
sure that they work perfectly,

00:41:15.350 --> 00:41:17.360
because that's really your signature.

00:41:17.360 --> 00:41:18.600
That's your value added.

00:41:20.390 --> 00:41:23.820
You want to test these commands
in a couple of different ways.

00:41:23.820 --> 00:41:26.140
You want to take the default
values for everything.

00:41:26.140 --> 00:41:28.140
Don't provide any of
the optional parameters.

00:41:28.140 --> 00:41:30.460
Make sure that something
reasonable happens.

00:41:30.460 --> 00:41:31.420
Make new circle.

00:41:31.420 --> 00:41:32.770
What's that going to do?

00:41:32.770 --> 00:41:34.900
Is it going to make a
circle whose radius is zero?

00:41:34.900 --> 00:41:36.940
Is it going to put that
circle at the origin?

00:41:36.940 --> 00:41:39.830
If that's the behavior that you want,
make sure that that's the

00:41:39.900 --> 00:41:41.090
behavior that you get.

00:41:41.090 --> 00:41:44.140
Then you want to come back a
second time and you want to specify

00:41:44.140 --> 00:41:47.520
every parameter and make sure that
combinations of parameters work

00:41:47.520 --> 00:41:49.380
the way that they're supposed to.

00:41:49.960 --> 00:41:53.220
Again, you're going to want to test your
edge cases and your error cases.

00:41:53.220 --> 00:41:56.310
Drive things right up to the
limit and make sure they work.

00:41:56.380 --> 00:42:00.000
Then take one step over the limit and
make sure that you get a reasonable

00:42:00.020 --> 00:42:03.980
response and the program continues
to perform properly after that.

00:42:06.210 --> 00:42:10.340
The last thing that you want to do
is add some real-world use cases.

00:42:10.340 --> 00:42:13.780
An excellent example is Kinkless GTD.

00:42:13.780 --> 00:42:17.340
Whenever Omni changes Outliner,
I'm sure they must test Kinkless

00:42:17.340 --> 00:42:20.580
GTD because if they were to break that,
that would be very bad for

00:42:20.580 --> 00:42:22.110
two different companies.

00:42:23.100 --> 00:42:26.130
So you want to find out what your users
are doing with your scriptability.

00:42:26.130 --> 00:42:27.640
Monitor feedback sources.

00:42:27.640 --> 00:42:31.590
If you have a chat list or an email list
and people are sending AppleScripts back

00:42:31.600 --> 00:42:35.740
and forth and you see a dozen different
AppleScripts that all do the same thing,

00:42:35.740 --> 00:42:39.810
make that part of your testing because
your customers are dependent upon it.

00:42:40.530 --> 00:42:43.420
Also, it may be a hint that you need
a new feature in your app.

00:42:45.040 --> 00:42:46.950
And you want to make
these tests repeatable.

00:42:46.960 --> 00:42:49.520
You want to retain your prior results.

00:42:49.520 --> 00:42:53.620
You want to be able to compare the
results of one invocation to another.

00:42:53.620 --> 00:42:56.820
Make sure that if you got a change,
it was the change that you wanted.

00:42:56.820 --> 00:42:59.130
And if you see a change
that you didn't want,

00:42:59.130 --> 00:43:02.970
then you've detected a regression
and you can go back in and fix that.

00:43:05.840 --> 00:43:09.700
So what we've talked about today,
we've talked a little about why you

00:43:09.700 --> 00:43:12.160
want your application to be scriptable.

00:43:12.170 --> 00:43:14.930
We've talked about the importance
of doing your dictionary design

00:43:15.040 --> 00:43:17.890
upfront and getting that right.

00:43:18.100 --> 00:43:21.300
The importance of logging the activity
of your application so you can learn

00:43:21.300 --> 00:43:25.320
how Cocoa Scripting works and what
it expects from your application.

00:43:25.460 --> 00:43:29.140
A few basic steps in how to
get started in scriptability.

00:43:29.220 --> 00:43:32.570
One of the more advanced up-to-date
topics that's available in Leopard

00:43:32.840 --> 00:43:34.680
that was not available before.

00:43:34.770 --> 00:43:38.710
And the importance of testing your
app thoroughly so that you can detect

00:43:38.810 --> 00:43:43.080
regressions and so that you can
support your customer's usage patterns.

00:43:44.740 --> 00:43:48.780
The sample code that I was working on
is available at the developer site,

00:43:48.780 --> 00:43:52.650
and those other resources,
the scripting interface guidelines

00:43:52.800 --> 00:43:57.940
and the page of 4-byte codes are also
available at the developer website.

00:43:59.180 --> 00:44:00.780
We've got some labs.

00:44:00.850 --> 00:44:04.000
Immediately after this one, we've got,
immediately after this session,

00:44:04.000 --> 00:44:06.190
we've got the
Make Your Application Scriptable Lab.

00:44:06.220 --> 00:44:07.480
I'll be there.

00:44:07.480 --> 00:44:10.710
The whole Automator
AppleScript team will be there,

00:44:10.710 --> 00:44:15.190
and we'll help you get started in
making your application scriptable.

00:44:15.190 --> 00:44:17.440
I'll be here all day today
and all day tomorrow,

00:44:17.440 --> 00:44:20.400
and if anybody needs for me to
come back on Thursday and Friday,

00:44:20.400 --> 00:44:21.390
I'll do that too.

00:44:21.400 --> 00:44:24.760
I want somebody to leave here at the
end of the week with a scriptable

00:44:24.760 --> 00:44:28.220
application that they didn't have
when they came here on Monday.

00:44:29.810 --> 00:44:34.280
The AppKit Lab is on Thursday,
and there you'll be able to talk

00:44:34.280 --> 00:44:37.840
to the engineer who's responsible
for Cocoa Scripting itself.

00:44:37.840 --> 00:44:39.480
He unfortunately can't be here.

00:44:39.480 --> 00:44:41.070
He's giving another session right now.

00:44:41.140 --> 00:44:45.130
But if you have specific questions
about how Cocoa Scripting works

00:44:45.130 --> 00:44:48.790
and why it's expecting certain
things of your application,

00:44:48.790 --> 00:44:51.360
you might want to talk
to him on Thursday.

00:44:51.360 --> 00:44:53.320
I can help you contact him.

00:44:55.130 --> 00:44:58.030
If you have questions
after you leave here today,

00:44:58.150 --> 00:45:02.000
you can send messages to Sal Segoian,
our product manager.

00:45:02.000 --> 00:45:04.020
You may very well know him already.

00:45:04.020 --> 00:45:08.610
He's a great advocate of scriptability
and will help you get your job done,

00:45:08.610 --> 00:45:10.490
make your app scriptable.

00:45:10.840 --> 00:45:12.270
My boss is Todd Fernandez.

00:45:12.280 --> 00:45:15.480
He's the boss of the entire
Automator and AppleScript group,

00:45:15.540 --> 00:45:18.650
and he can make sure that you get
the answers that you need and put

00:45:18.710 --> 00:45:20.780
you in contact with the right people.

00:45:20.780 --> 00:45:25.200
The right people may very well be
other AppleScript implementers,

00:45:25.200 --> 00:45:30.110
and they exchange ideas on the
AppleScript implementers mailing list.

00:45:30.110 --> 00:45:32.280
Some of you may have already
used that yourselves.

00:45:32.280 --> 00:45:33.930
It's a great source of information.

00:45:33.930 --> 00:45:35.360
It's a great source of ideas.