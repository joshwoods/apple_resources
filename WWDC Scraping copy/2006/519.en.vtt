WEBVTT

00:00:10.400 --> 00:00:13.400
My name is Daryl Lee and I'm the
WebObjects Engineering Manager.

00:00:13.430 --> 00:00:15.600
And I'm just curious,
because this is a huge crowd,

00:00:15.600 --> 00:00:18.800
how many of you have actually
used WebObjects before?

00:00:18.800 --> 00:00:20.480
Wow.

00:00:20.480 --> 00:00:21.100
I'm impressed.

00:00:21.100 --> 00:00:22.520
You guys have really showed up today.

00:00:22.520 --> 00:00:24.810
That's great.

00:00:25.060 --> 00:00:31.760
And who has used Web 2.0 or is
currently-- who is using Web 2.0 or

00:00:31.760 --> 00:00:35.500
building Web 2.0-like applications
or even knows what Web 2.0 is?

00:00:35.510 --> 00:00:37.910
OK,
so there's a few of you guys out there.

00:00:38.120 --> 00:00:43.040
So what I'd like to do is actually split
today's session into a couple parts.

00:00:43.090 --> 00:00:47.060
First part, we'll do a lot of fun stuff,
talk about Web 2.0, what's in Web 2.0,

00:00:47.210 --> 00:00:50.040
how you can use WebObjects to
build Web 2.0 applications.

00:00:50.320 --> 00:00:53.530
And then we'll take the second half
to talk about more current things,

00:00:53.530 --> 00:00:55.830
what's going on in the
Leopard time frame,

00:00:56.050 --> 00:01:01.270
what was just released this last week,
and what you can expect in the future.

00:01:03.180 --> 00:01:06.940
So I've got a couple things just
to keep you in your seats here.

00:01:06.980 --> 00:01:08.400
And I want to show you a teaser demo.

00:01:08.400 --> 00:01:09.730
Hopefully it's all good.

00:01:09.740 --> 00:01:12.350
We had a little problem with the demo
machine getting it all set up here.

00:01:12.360 --> 00:01:15.400
But I want to tease you with a demo.

00:01:15.410 --> 00:01:19.140
And then if you guys are really nice,
and maybe some people will have

00:01:19.230 --> 00:01:20.980
a little surprise at the end.

00:01:20.990 --> 00:01:24.250
And maybe you guys might
have some fun with that too.

00:01:24.410 --> 00:01:29.090
So can we pop to the demo
machine really quickly?

00:01:29.140 --> 00:01:31.190
The D machine?

00:01:36.050 --> 00:01:39.930
Okay, so this is a little
summer intern project.

00:01:39.960 --> 00:01:41.950
Oops.

00:01:47.100 --> 00:01:48.100
Oops.

00:01:48.100 --> 00:01:49.100
There we go.

00:01:49.100 --> 00:01:50.100
Okay, reload.

00:01:50.100 --> 00:01:55.380
So this is a little intern project,
or summer intern here, Chuck,

00:01:55.430 --> 00:01:56.640
wrote this summer.

00:01:56.780 --> 00:02:03.100
I just thought I'd give you a quick
taste of it and give you a quick tour.

00:02:03.100 --> 00:02:05.040
It's a real fun photo browsing app.

00:02:05.040 --> 00:02:07.440
You can see it's really interactive.

00:02:07.440 --> 00:02:13.280
There's this really nice thumbnail
bar and all kinds of features in here.

00:02:13.280 --> 00:02:16.030
By the end of this session,
you'll get an idea of how to

00:02:16.170 --> 00:02:20.800
use WebObjects to build an app
like this or some techniques.

00:02:20.800 --> 00:02:23.300
And we'll dig a little bit
deeper in a little while.

00:02:23.300 --> 00:02:26.030
So this will hopefully keep
your butts in the seats and

00:02:26.030 --> 00:02:29.740
interested in listening to me.

00:02:29.740 --> 00:02:31.700
Okay, back to slides.

00:02:45.130 --> 00:02:50.090
Okay, so what I want to get into is
actually talk about the definition

00:02:50.210 --> 00:02:53.980
of Web 2.0 and the Zen of Web 2.0.

00:02:53.980 --> 00:02:56.930
When I looked and searched on Google,
I looked at Wikipedia,

00:02:56.930 --> 00:02:58.400
what is in Web 2.0?

00:02:58.400 --> 00:03:00.980
There really wasn't a definitive spec.

00:03:01.040 --> 00:03:05.440
W3C hasn't really pushed
anything specifically what this,

00:03:05.530 --> 00:03:06.960
what's in Web 2.0.

00:03:06.960 --> 00:03:10.420
And so what I did find was
a lot of interesting quotes,

00:03:10.420 --> 00:03:12.610
and I thought I'd share them with

00:03:12.900 --> 00:03:19.260
So ZDNet had a bunch of fun articles and
one of them said Web 2.0 is an attitude,

00:03:19.300 --> 00:03:20.300
not a technology.

00:03:20.320 --> 00:03:23.120
So I'm not sure what to do with it,
but you have to be in the right frame

00:03:23.120 --> 00:03:24.660
of mind to build a Web 2.0 application.

00:03:27.060 --> 00:03:30.840
Web 2.0 is about giving up control
and setting your data free,

00:03:30.840 --> 00:03:32.780
so it's quite metaphysical, you know?

00:03:35.910 --> 00:03:39.210
And this next one kind of connected
a little bit more with me when

00:03:39.210 --> 00:03:42.500
data interface and metadata
no longer go hand in hand.

00:03:42.500 --> 00:03:46.300
Okay, so they're not buddies anymore,
but it sounded like a more model view

00:03:46.300 --> 00:03:51.870
controller kind of data pattern that
you guys might be more familiar with.

00:03:52.060 --> 00:03:56.580
So, okay, so that's something that's
in the Web 2.0 space.

00:03:56.580 --> 00:04:00.370
I saw another thing about the
Web 2.0 conference last year,

00:04:00.370 --> 00:04:03.220
and they did this big
brainstorming session,

00:04:03.220 --> 00:04:06.040
and they threw all these terminologies,
these concepts,

00:04:06.130 --> 00:04:07.500
technologies on the board.

00:04:07.500 --> 00:04:10.160
They said,
"This is what's in Web 2.0." And I found

00:04:10.160 --> 00:04:14.140
this image on the net of this guy
who actually etched a PowerBook,

00:04:14.140 --> 00:04:18.510
and they put all that
terminology on the PowerBook.

00:04:18.610 --> 00:04:21.850
And so there is Web 2.0
right there in front of you.

00:04:21.860 --> 00:04:25.820
So I'd love to have the PowerBook,
but I don't know if I bind

00:04:25.840 --> 00:04:28.560
everything that's on that book.

00:04:29.840 --> 00:04:34.450
So instead of just going
into all that terminology,

00:04:34.450 --> 00:04:39.790
let's talk about what are some
benchmark Web 2.0 applications,

00:04:39.790 --> 00:04:42.940
or what are people actually
trying to build nowadays.

00:04:42.960 --> 00:04:47.080
And a couple of years ago,
Google Maps really started this craze.

00:04:47.080 --> 00:04:52.360
It was about searching for data
that you're interested in and

00:04:52.360 --> 00:04:54.180
displaying it in new interactive ways.

00:04:54.180 --> 00:04:56.450
In this case, it was putting it on a map.

00:04:56.470 --> 00:04:57.820
And you could interact with the map.

00:04:57.820 --> 00:04:59.720
You could drag the map around.

00:04:59.760 --> 00:05:02.850
And you could search for pizza
plate joints and find all the

00:05:02.850 --> 00:05:05.900
pizza joints within five miles
and have it displayed on the map.

00:05:05.980 --> 00:05:07.330
And people thought that was really cool.

00:05:07.490 --> 00:05:09.350
And you didn't need a full page refresh.

00:05:09.470 --> 00:05:15.870
So this really started off this
craze of more interactive browsing.

00:05:16.280 --> 00:05:20.630
So another thing that people are
doing lately is mashing up data.

00:05:20.800 --> 00:05:23.790
And what I mean by that is
taking data from different data

00:05:23.830 --> 00:05:27.720
sources and presenting them
in new ways and custom ways.

00:05:27.830 --> 00:05:31.860
And what you're seeing right
behind me is a virtual shopping

00:05:31.860 --> 00:05:35.110
tour of the Notting Hill district.

00:05:35.130 --> 00:05:38.260
And what makes this unique is that
if you look right in the center,

00:05:38.260 --> 00:05:41.120
there is a Google Map embedded
in there with some custom

00:05:41.340 --> 00:05:43.250
views and waypoints in there.

00:05:43.300 --> 00:05:45.600
So they're getting their
mapping service from Google.

00:05:45.600 --> 00:05:48.300
Then they're pulling-- if
you look in the right corner,

00:05:48.300 --> 00:05:51.980
they're pulling weather data
and some sights and sounds of

00:05:51.990 --> 00:05:53.820
the actual shopping district.

00:05:53.820 --> 00:05:55.560
And that's coming from
a different service.

00:05:55.560 --> 00:05:58.840
And then they're combining that
with their custom image data,

00:05:58.840 --> 00:06:02.100
which I think you're seeing there with
the Duke of Wellington and other stuff.

00:06:02.100 --> 00:06:07.100
So it's the combining of all
different types of data sources into

00:06:07.100 --> 00:06:11.430
new and interesting applications
and ways of presenting data.

00:06:12.930 --> 00:06:15.600
So how many people are
familiar with Flickr?

00:06:15.600 --> 00:06:18.350
Or any kind of thing like Wikipedia,
YouTube?

00:06:18.350 --> 00:06:20.040
These things are just
the craze right now,

00:06:20.180 --> 00:06:24.240
which is a real collaborative experience.

00:06:24.240 --> 00:06:28.850
The users and the internet
community in general are defining

00:06:29.140 --> 00:06:31.970
things and sharing their content.

00:06:31.980 --> 00:06:34.400
In Flickr,
what you can do is upload a photo.

00:06:34.540 --> 00:06:36.450
You can have people comment on it.

00:06:36.530 --> 00:06:37.670
They can rate it.

00:06:37.740 --> 00:06:39.360
You can tag it with different keywords.

00:06:39.900 --> 00:06:42.250
I can say, here's my image of an iPod.

00:06:42.250 --> 00:06:45.310
It's from Apple, and it's really cool.

00:06:45.320 --> 00:06:50.870
So this is a new craze that a lot
of these sites are jumping onto.

00:06:54.390 --> 00:06:58.060
Now, people are taking this whole
Web 2.0 and building application,

00:06:58.060 --> 00:07:01.490
desktop applications into the
browsers to a new level now.

00:07:01.500 --> 00:07:05.110
And this interactivity,
and they're building typical desktop

00:07:05.180 --> 00:07:07.170
applications into the browser.

00:07:07.200 --> 00:07:13.690
So, Rightly has actually built a
Word replacement in the browser.

00:07:13.700 --> 00:07:16.260
And I think recently
Google bought Rightly.

00:07:16.260 --> 00:07:21.320
But what's interesting about this is that
people can collaborate distributively.

00:07:21.540 --> 00:07:23.850
And what I mean by that is you
can have someone working on the

00:07:23.850 --> 00:07:28.060
same document that's in Tokyo,
in New York, in Paris at the same time.

00:07:28.060 --> 00:07:30.470
They can merge the changes
and make the revisions,

00:07:30.560 --> 00:07:32.140
and everybody gets updated.

00:07:32.140 --> 00:07:35.720
And so there's a lot of stuff going on in
the server to keep everybody synced up.

00:07:35.770 --> 00:07:39.080
So, we think that's really cool.

00:07:39.080 --> 00:07:43.760
But people have even been going farther,
and they're getting this brushed metal,

00:07:43.760 --> 00:07:48.940
really embedding full-featured
apps like Outlook Express.

00:07:48.940 --> 00:07:51.260
And Zimbra did this pretty well.

00:07:51.540 --> 00:07:54.640
And they got a lot of buzz last
year in the Web 2.0 conference,

00:07:54.690 --> 00:07:55.820
and they won a lot of awards for this.

00:07:55.900 --> 00:07:59.750
And so, as you can see,
they've embedded what really looks

00:07:59.980 --> 00:08:02.530
like a full-featured mail client.

00:08:02.620 --> 00:08:04.040
There's calendaring in there.

00:08:04.210 --> 00:08:07.220
There are RSS readers in there.

00:08:07.330 --> 00:08:11.540
And they also do a lot of extra
things to scrape data from your emails

00:08:11.540 --> 00:08:13.940
and such to add more context to it.

00:08:13.940 --> 00:08:17.260
So, like, if you had a UPS package and
you had a tracking number,

00:08:17.260 --> 00:08:19.580
they could actually
add more context to it.

00:08:19.660 --> 00:08:20.890
So.

00:08:21.540 --> 00:08:24.480
That's like the gold standard right now.

00:08:24.480 --> 00:08:25.800
Zimbra is getting a lot of buzz.

00:08:27.210 --> 00:08:29.670
And finally,
I want to just share with you a real fun

00:08:29.770 --> 00:08:33.940
one that I found out about the other day,
which was this Flyakite OS X.

00:08:33.940 --> 00:08:38.070
And what someone actually did was
use JavaScript to make a Finder-like

00:08:38.250 --> 00:08:40.390
experience within the web browser.

00:08:40.400 --> 00:08:42.220
It's a little strange here,
but as you can see,

00:08:42.320 --> 00:08:43.620
there are stickies available.

00:08:43.620 --> 00:08:48.140
It has a hierarchical browsing
of a pseudo file system there.

00:08:48.140 --> 00:08:52.390
They have an iTunes-like app in
there and system preferences,

00:08:52.390 --> 00:08:53.340
et cetera.

00:08:53.560 --> 00:08:58.060
So people are taking this whole
interactivity level to a new level.

00:08:58.060 --> 00:09:00.760
So I thought I'd share that with you.

00:09:02.950 --> 00:09:06.860
So what I want to do is just boil
down some of the concepts out there

00:09:07.370 --> 00:09:10.080
that we saw in that PowerBook to some
things that I think are interesting.

00:09:10.080 --> 00:09:13.500
And I bet you a lot of you
guys have heard of AJAX.

00:09:13.500 --> 00:09:15.820
I mean,
who hasn't heard of the buzzword AJAX?

00:09:15.820 --> 00:09:18.700
Asynchronous Java and XML.

00:09:18.700 --> 00:09:25.040
People are really using this kind
of development pattern to fetch

00:09:25.040 --> 00:09:31.140
small chunks of data or UI bits and
dynamically change their UI on the fly.

00:09:31.140 --> 00:09:37.610
So traditional Web 1.0 apps,
you had to do a full page refresh to

00:09:37.660 --> 00:09:41.080
write new data into your web page.

00:09:41.080 --> 00:09:45.840
But what people are doing now is
pulling in small chunks and then

00:09:45.840 --> 00:09:51.080
manipulating the DOM tree to actually
insert this data into the UI.

00:09:53.110 --> 00:09:55.830
Other things that people are doing a lot,
and I'm sure you've heard of a lot,

00:09:55.840 --> 00:10:02.260
is syndication and leveraging
things like Atom and RSS to

00:10:02.260 --> 00:10:05.920
publish and subscribe to data.

00:10:06.780 --> 00:10:09.860
People are also trying to find new
ways to make their data public.

00:10:09.920 --> 00:10:15.460
So a number of years ago,
WSDL and that type of web service

00:10:15.460 --> 00:10:21.730
was supposed to free up people's
data and actually allow people

00:10:21.730 --> 00:10:23.160
to share data more freely.

00:10:23.280 --> 00:10:26.210
But actually what it's done is
it's been so complex that a lot

00:10:26.210 --> 00:10:27.860
of people haven't jumped in.

00:10:27.990 --> 00:10:31.760
And so people are looking for
simpler ways to access data,

00:10:31.800 --> 00:10:36.440
provide interfaces,
whether it be JavaScript or Flex or any

00:10:36.440 --> 00:10:41.510
number of lower or simpler SOAP objects.

00:10:42.060 --> 00:10:46.160
And as I mentioned earlier,
Flickr and Wikipedia and other stuff

00:10:46.200 --> 00:10:51.900
are doing tagging and collaborative and
matching up data in different new ways.

00:10:51.910 --> 00:10:54.790
And finally,
I just wanted to mention microformats

00:10:54.790 --> 00:10:56.400
is becoming pretty popular.

00:10:56.400 --> 00:10:59.330
And what that is actually
doing is embedding structured

00:10:59.330 --> 00:11:00.900
data within your Web page.

00:11:00.900 --> 00:11:03.900
Yahoo recently said they're
going to support microformats.

00:11:04.150 --> 00:11:09.190
And so that'll be an interesting
way to present your data and

00:11:09.250 --> 00:11:11.780
pass data to the clients.

00:11:13.100 --> 00:11:18.270
So, what technology do I need to learn
or do I have to have in my toolbox

00:11:18.340 --> 00:11:19.850
to actually build a Web 2.0 app?

00:11:19.860 --> 00:11:23.200
Now, if you look right behind me,
there is nothing new there.

00:11:23.200 --> 00:11:24.730
There is absolutely nothing new.

00:11:24.740 --> 00:11:29.060
XML Soap,
been around for the last 10 or 12 years.

00:11:29.060 --> 00:11:31.460
JavaScript, 10 or 12 years.

00:11:31.460 --> 00:11:34.240
I think it's only being used in new ways.

00:11:34.280 --> 00:11:38.560
And I think about six years ago,
XML HTTP request object

00:11:38.610 --> 00:11:41.940
was kind of introduced,
I think, in IE.

00:11:42.630 --> 00:11:47.250
And that is being leveraged in
the AJAX style of architecture.

00:11:47.260 --> 00:11:51.120
And then JSON,
JavaScript Object Notation,

00:11:51.120 --> 00:11:53.520
is also something people
are leveraging more,

00:11:53.520 --> 00:11:59.300
which is a way to optimize passing
data from the server to the client.

00:11:59.830 --> 00:12:04.980
Adam Spex, they're quite straightforward
and pretty simple to learn.

00:12:04.980 --> 00:12:06.790
Those aren't that new either.

00:12:06.850 --> 00:12:09.730
It's been around at
least four years or more,

00:12:09.730 --> 00:12:10.700
five years.

00:12:10.880 --> 00:12:14.100
CSS, DHTML, that's not new.

00:12:14.280 --> 00:12:18.730
And REST, ideas of REST services,
which are just a new way

00:12:18.730 --> 00:12:23.050
to interface into data,
those aren't new either.

00:12:25.600 --> 00:13:50.600
[Transcript missing]

00:13:52.810 --> 00:13:56.300
So what I thought I'd start doing
is just show you guys a few building

00:13:56.300 --> 00:14:00.770
blocks and how to build and start
off with Syndication and show you how

00:14:00.770 --> 00:14:06.420
to build a really reusable RSS feed
and an Atom feed and just give you

00:14:06.420 --> 00:14:11.920
ideas on how to break those down into
components and use WoE XML nodes as

00:14:11.940 --> 00:14:15.600
your base components to build a feed.

00:14:15.600 --> 00:14:18.150
So can we move over to the demo machine?

00:14:22.320 --> 00:14:24.440
This one right here.

00:14:27.050 --> 00:14:28.000
I need to switch it?

00:14:28.000 --> 00:14:29.000
Yeah.

00:14:29.030 --> 00:14:30.000
Okay.

00:14:30.000 --> 00:14:34.930
So let me fire this up really quickly.

00:14:38.880 --> 00:14:42.040
So we like Eclipse at Apple,
and we like Xcode,

00:14:42.090 --> 00:14:44.830
but I thought I'd demo in both worlds.

00:14:44.860 --> 00:14:50.060
So you're going to get a
mixture of both IDEs here.

00:14:52.300 --> 00:14:55.940
And all right.

00:14:55.940 --> 00:14:57.580
It's taking a minute or two to come up.

00:14:57.580 --> 00:15:02.620
So other things when you're thinking
about building a syndicated feed

00:15:02.820 --> 00:15:05.110
is to leverage direct actions.

00:15:05.180 --> 00:15:11.140
Syndicated feeds do not need to
have state associated with it.

00:15:11.150 --> 00:15:16.780
It does not need to have a session
associated necessarily with it.

00:15:16.820 --> 00:15:21.470
So let me just fire up my app really
quick and give you guys a preview.

00:15:23.200 --> 00:15:28.400
Alright, so I've got a basic feed,
lots of cool stuff here.

00:15:28.400 --> 00:15:31.600
There is one data source and
here's another data source.

00:15:31.600 --> 00:15:34.600
So what I've, I'll get into the details
a little bit more,

00:15:34.600 --> 00:15:40.050
but it's really easy to build any type
of data source or feed components that

00:15:40.050 --> 00:15:43.100
can be mapped to a different data source.

00:15:44.570 --> 00:15:49.940
So I've mapped one data source to this
Atom feed and my initial RSS feed,

00:15:49.950 --> 00:15:53.020
and then I've actually created
a different data source for

00:15:53.020 --> 00:15:55.820
this alternative data feed.

00:15:55.820 --> 00:15:58.820
And it's all dynamic.

00:15:58.840 --> 00:16:02.810
So let's just add something,
Project Wonder.

00:16:04.050 --> 00:16:06.800
3.0 came out today.

00:16:06.910 --> 00:16:10.710
Let me just put a link
in here really quick.

00:16:14.560 --> 00:16:17.300
That's really cool.

00:16:17.320 --> 00:16:20.600
I submit that.

00:16:20.630 --> 00:16:24.940
As you can see, in my RSS feed,
it's updated dynamically.

00:16:24.950 --> 00:16:29.890
And here in my Atom feed,
it updated dynamically.

00:16:29.990 --> 00:16:34.100
So I just wanted to show how
easy it is to actually put

00:16:34.140 --> 00:16:36.510
something together like this.

00:16:36.710 --> 00:16:39.780
If you look at the left gutter here,
I broke down the spec into

00:16:39.900 --> 00:16:43.620
their base components,
each entity component,

00:16:43.620 --> 00:16:47.110
and used WillXML nodes to represent that.

00:16:47.160 --> 00:16:53.320
And you can actually dynamically,
codelessly bind these components up to

00:16:53.450 --> 00:16:56.880
your display group or your data source.

00:16:56.880 --> 00:17:05.010
So I think that just gives you
a flavor of how to build a feed.

00:17:05.760 --> 00:17:09.760
Here's my two RSS feeds,
and basically I just bound those same

00:17:09.830 --> 00:17:12.120
components to different data sources.

00:17:12.120 --> 00:17:16.280
So hopefully that gives you a quick idea.

00:17:16.280 --> 00:17:18.740
I'm not going to give a complete
hands-on demo on how that works,

00:17:18.760 --> 00:17:22.320
but you can definitely come and
ask me at one of the sessions or

00:17:22.320 --> 00:17:27.050
the labs or the feedback forum
for more information about this.

00:17:27.060 --> 00:17:29.910
So back to the keynote slides.

00:17:39.570 --> 00:17:45.610
So one thing I mentioned earlier was
about open APIs and actually sharing

00:17:45.610 --> 00:17:52.730
APIs or data or client libraries amongst
the community and then allowing them

00:17:52.730 --> 00:17:56.390
to leverage that and map new types of
data or information on top of that.

00:17:56.780 --> 00:18:01.080
And so what I wanted to do is experiment
and show you guys how to make a

00:18:01.350 --> 00:18:08.220
reusable component that wraps all this,
an API of a Web 2.0 type of library

00:18:08.220 --> 00:18:14.960
and then allow you to share or give you
an idea of how to make that component

00:18:15.000 --> 00:18:20.870
codeless so people can just bind to
various options in that component and not

00:18:21.040 --> 00:18:26.760
have to recompile and not have to write
any code or have any inherent knowledge.

00:18:26.780 --> 00:18:32.760
So what I did was actually take
the Yahoo Maps API and I combined

00:18:33.030 --> 00:18:39.490
it with some of our WebObjects
componentness and repurposed that

00:18:39.930 --> 00:18:42.910
and pushed that to the client.

00:18:42.930 --> 00:18:45.350
So this is just a quick
diagram of what is going on.

00:18:47.750 --> 00:18:50.570
Let me just jump in really
quickly to the demo and show

00:18:50.570 --> 00:18:53.450
you how that kind of might work.

00:18:59.650 --> 00:19:02.500
So let me start it.

00:19:02.520 --> 00:19:05.350
I call this my Will Map container.

00:19:07.670 --> 00:19:10.600
And what you're going to see
here is a real basic map.

00:19:10.600 --> 00:19:15.450
There's not anything that interesting,
except maybe there's a navigation

00:19:15.450 --> 00:19:17.350
window in the corner there.

00:19:17.660 --> 00:19:22.820
But I want to really customize this and
make it more interesting and put some

00:19:22.830 --> 00:19:27.040
data on there and have some fun with it.

00:19:27.040 --> 00:19:30.950
So let's go drop in and let me just
show you the component really quickly.

00:19:32.720 --> 00:19:36.280
So I created this
WoW Map Container component,

00:19:36.280 --> 00:19:40.310
and I dropped it in here
to my main component.

00:19:40.890 --> 00:19:42.600
So there's my WOMAP container.

00:19:42.620 --> 00:19:47.040
And then there are a whole bunch
of bindings available here.

00:19:47.050 --> 00:19:48.170
Is it draggable?

00:19:48.340 --> 00:19:49.240
What's the height?

00:19:49.310 --> 00:19:52.730
Let's change zoom levels,
latitude and longitude for

00:19:52.730 --> 00:19:54.350
where it's centered and stuff.

00:19:54.430 --> 00:20:00.500
And so what I can do is actually
modify these bindings on the fly.

00:20:00.550 --> 00:20:04.030
So what I'd like to do is add
some interesting waypoints.

00:20:05.400 --> 00:20:17.000
[Transcript missing]

00:20:18.510 --> 00:20:22.000
And a great thing about
WebObjects is actually that we

00:20:22.000 --> 00:20:23.200
have a rapid turnaround mode.

00:20:23.340 --> 00:20:27.990
And so if you don't actually
change any of the Java source code,

00:20:28.070 --> 00:20:31.590
you can modify your components
and then just do a page refresh,

00:20:31.590 --> 00:20:33.330
which I'm going to do right now.

00:20:33.850 --> 00:20:36.800
And boom, you're seeing my changes
updated really quickly.

00:20:36.990 --> 00:20:40.120
Now we're drawing a bunch
of custom waypoints up here.

00:20:40.170 --> 00:20:42.070
And the zoom level's changed.

00:20:42.120 --> 00:20:44.800
And I'm waiting for some of the
other stuff to show up here.

00:20:44.910 --> 00:20:45.360
There we go.

00:20:45.360 --> 00:20:53.980
I mapped it to a feed that shows the
state parks within the California.

00:20:54.030 --> 00:20:56.200
And here are some traffic feeds here,
too.

00:20:56.200 --> 00:21:00.590
So there's an accident on Marsh Road,
in case any of you guys

00:21:00.660 --> 00:21:02.470
are driving down that way.

00:21:02.640 --> 00:21:05.700
Okay, so that's just a flavor.

00:21:05.700 --> 00:21:08.800
What's great about this is,
as you notice,

00:21:08.860 --> 00:21:12.070
I just changed bindings right here,
and we always encourage

00:21:12.070 --> 00:21:13.570
reusable components.

00:21:13.580 --> 00:21:16.950
And this component can be
shareable with your colleagues,

00:21:16.950 --> 00:21:20.620
and they won't have to know, okay,
what's the JavaScript API call

00:21:20.620 --> 00:21:25.290
to actually turn on these
options within Yahoo Maps?

00:21:25.320 --> 00:21:26.420
What do I have to do?

00:21:26.420 --> 00:21:27.710
What do I have to learn?

00:21:27.710 --> 00:21:29.460
How much docs do I have to read?

00:21:29.460 --> 00:21:32.220
All I have to do is actually
look at your bindings here.

00:21:32.680 --> 00:21:37.840
And they'll have an easy access,
or it's really pretty

00:21:37.840 --> 00:21:40.990
obvious what those things do.

00:21:42.360 --> 00:21:45.540
So like I said,
there's no innate need to know

00:21:45.540 --> 00:21:50.360
the internals if you wrap some
of these Web 2.0 APIs correctly.

00:21:51.640 --> 00:21:54.900
Okay, so the next thing I wanted to
do was actually do a little

00:21:54.900 --> 00:21:57.900
bit more server-side crunching.

00:21:57.900 --> 00:22:01.110
And I thought about, okay, well,
let's combine some of the

00:22:01.110 --> 00:22:05.370
syndication aspects of the
Web 2.0 API or specification,

00:22:05.400 --> 00:22:11.880
and let's go scrape a bunch of RSS feeds
and data mine it for data or information.

00:22:12.460 --> 00:22:15.840
And then let's dynamically
pull that back and forth,

00:22:15.840 --> 00:22:21.190
update that on our WebObjects server,
and put that data into a database.

00:22:21.300 --> 00:22:25.200
And while we're scraping that data,
geocode that information,

00:22:25.200 --> 00:22:28.390
so add some geocoding context to it.

00:22:29.200 --> 00:22:32.280
And then on the client,
present in a new way

00:22:32.410 --> 00:22:35.960
using Yahoo Maps again,
because that's pretty interesting,

00:22:35.960 --> 00:22:39.810
and put a new kind of customized
look and feel of the app and

00:22:39.810 --> 00:22:40.790
the interactivity of the app.

00:22:40.840 --> 00:22:43.940
So if I can jump to the
demo machine really quickly,

00:22:43.940 --> 00:22:45.820
and we can talk about this.

00:22:52.710 --> 00:22:58.760
So I call my app the
Woe Rentals Application.

00:22:58.760 --> 00:23:01.400
And Woe Rentals Housing.

00:23:01.530 --> 00:23:05.980
So what you're going to see is
I've customized my map even more.

00:23:05.980 --> 00:23:10.810
And what happened there was the
WebObjects server had scraped

00:23:10.810 --> 00:23:12.980
a bunch of Craigslist feeds.

00:23:12.980 --> 00:23:17.840
And it data-mined the
rental information for it,

00:23:17.910 --> 00:23:19.060
for rental housing.

00:23:19.060 --> 00:23:22.220
And then we geocoded it.

00:23:22.220 --> 00:23:25.220
And then we displayed
the data in a custom way.

00:23:25.220 --> 00:23:27.980
In this case,
we found all the image data.

00:23:27.980 --> 00:23:32.940
And we added a little bit more
context to the waypoints and such.

00:23:32.940 --> 00:23:36.330
And as you can see,
now I have a really quick and

00:23:36.790 --> 00:23:40.720
dirty kind of rentals application
where you can get an idea,

00:23:40.720 --> 00:23:49.490
give a geographic context to all this
scraped information from the feed.

00:23:49.790 --> 00:23:55.840
Other things you can do is talk
back to the server and let's just...

00:23:56.500 --> 00:24:01.200
Look for only places in
San Francisco and we can go over here,

00:24:01.200 --> 00:24:07.080
we can zoom in a little
bit more and take a look.

00:24:10.240 --> 00:24:12.310
We're pulling from Yahoo Maps,
so it might be a little bit

00:24:12.310 --> 00:24:16.790
slower here over our network here.

00:24:18.230 --> 00:24:22.460
Anyways,
so every time I change this search,

00:24:22.460 --> 00:24:26.930
we're actually going back and forth with
WebObjects server using XMLHB requests

00:24:26.960 --> 00:24:34.990
to fetch small chunks of data and
display those small waypoints there.

00:24:35.320 --> 00:24:38.560
Hopefully that gives you an
idea of how you might want

00:24:38.560 --> 00:24:43.500
to integrate with other APIs,
how WebObjects might be in the back end.

00:24:43.560 --> 00:24:44.540
I'm only giving you a flavor.

00:24:44.640 --> 00:24:47.300
I don't think this is
not a hands-on session,

00:24:47.300 --> 00:24:49.430
so I'm not going to dig
into all the details,

00:24:49.800 --> 00:24:55.140
but it's pretty straightforward
to build something like this.

00:24:55.170 --> 00:24:58.550
So can we switch back
to the keynote slides?

00:25:02.200 --> 00:25:04.830
So what I created was a kind
of a server-side aggregator.

00:25:04.980 --> 00:25:12.340
I used EOF a bunch to actually
save my data that has been geocoded

00:25:12.340 --> 00:25:14.680
and then actually query on it.

00:25:14.680 --> 00:25:18.520
And I used direct actions quite
heavily because it was the

00:25:18.520 --> 00:25:20.820
simplest way to implement this.

00:25:20.820 --> 00:25:24.350
You don't need a lot of sessionful,
kind of stateful information

00:25:24.350 --> 00:25:26.280
to be contained in here.

00:25:26.280 --> 00:25:31.200
So hopefully you get an idea of
how to build an app like this.

00:25:31.200 --> 00:25:32.490
So.

00:25:33.240 --> 00:25:38.150
Our summer intern this year,
he was given the project of, of course,

00:25:38.150 --> 00:25:39.620
using WebObjects.

00:25:39.910 --> 00:25:42.360
He had to make something
really cool and interactive,

00:25:42.360 --> 00:25:46.140
so we wanted a nice Web 2.0 app
that showed off some of the best

00:25:46.190 --> 00:25:48.100
of what people are doing out there.

00:25:48.100 --> 00:25:51.780
And so it needed to
be really interactive,

00:25:51.880 --> 00:25:56.300
a lot of user input,
and a real snappy interface.

00:25:56.300 --> 00:25:58.750
And of course,
since our fearless leader always talks

00:25:58.750 --> 00:26:02.280
about having insanely great apps,
we thought it should be insanely cool.

00:26:02.280 --> 00:26:05.870
So if we can switch to the
demo machine really quick.

00:26:09.800 --> 00:26:14.440
Okay,
so the demo machine to the left here.

00:26:21.590 --> 00:26:23.270
So I'll just log into
our app really quick.

00:26:23.420 --> 00:26:28.940
I really didn't give you guys that
much of a tour earlier of this app.

00:26:28.940 --> 00:26:31.820
Let me show you some things
that you might not have seen,

00:26:31.830 --> 00:26:36.000
which is if I scroll quick enough,
this scroll bar is actually lazy

00:26:36.000 --> 00:26:37.120
loading all these thumbnails.

00:26:37.120 --> 00:26:42.080
And we're using a lot of XMLHPU requests
to fetch small chunks or batch

00:26:42.110 --> 00:26:45.240
chunks of data over to the client.

00:26:46.600 --> 00:26:51.840
Other things that are really fun with
this app is that it's got a nice little

00:26:51.840 --> 00:26:57.250
zoom mode so I can actually look at
the pixel level almost at the Eiffel

00:26:57.250 --> 00:27:02.590
Tower and see what people are looking at.

00:27:02.590 --> 00:27:02.590
If I pop out of that,

00:27:03.530 --> 00:27:10.600
Let's go, another fun feature is a
fine feature we have here.

00:27:11.210 --> 00:27:15.910
If I type tree, it's slowly narrowing
down my search query.

00:27:15.970 --> 00:27:21.150
So it's actually doing a query back
and forth to the server to update

00:27:21.150 --> 00:27:25.910
the information that it needs to
display here for this thumbnail bar,

00:27:25.910 --> 00:27:27.510
or image bar.

00:27:32.660 --> 00:27:37.400
Another fun thing we did was actually
add keywords to all our data.

00:27:37.400 --> 00:27:40.910
So let me just do an info on...

00:27:41.700 --> 00:28:00.300
[Transcript missing]

00:28:03.800 --> 00:28:05.180
Oh, whoops, OK.

00:28:05.180 --> 00:28:06.480
I had something.

00:28:06.480 --> 00:28:10.580
OK, there we go.

00:28:10.800 --> 00:28:12.760
I want you to change some ratings here.

00:28:12.790 --> 00:28:15.260
So as you can see,
this is a big round trip.

00:28:15.260 --> 00:28:20.380
And we're broadcasting notifications any
time the data updates from our WebObjects

00:28:20.380 --> 00:28:27.500
server that's talking with direct actions
back and forth to our data source.

00:28:28.830 --> 00:28:32.140
Okay, so we thought that was fun,
but we want even more interactivity.

00:28:32.140 --> 00:28:36.520
So we thought that chatting would be fun.

00:28:36.670 --> 00:28:40.210
So let me say hi to Chuck here.

00:28:49.830 --> 00:28:53.300
And so what we're also doing is just
doing a lot of round-tripping to

00:28:53.330 --> 00:28:57.090
our WebObjects server for this chat.

00:28:57.530 --> 00:29:00.230
Distributely, and as you can see,
we're not doing page refreshes.

00:29:00.370 --> 00:29:03.180
Only that window is
updating in small chunks.

00:29:09.650 --> 00:29:11.620
Okay, so let me just resize here.

00:29:11.620 --> 00:29:12.560
Oops.

00:29:12.560 --> 00:29:16.000
There we go.

00:29:16.100 --> 00:29:19.270
So anyways, it's a very fun,
interactive app.

00:29:19.360 --> 00:29:22.740
And what I want to show
you really quickly,

00:29:22.740 --> 00:29:27.410
if we can go back to slides, is that...

00:29:39.900 --> 00:29:45.300
[Transcript missing]

00:29:45.690 --> 00:29:47.360
So if you go to the lab
or something like that,

00:29:47.360 --> 00:29:49.140
I'm sure Chuck will be
happy to show it to you.

00:29:49.140 --> 00:29:50.350
He's very enthusiastic.

00:29:50.400 --> 00:29:52.420
Yeah, maybe.

00:29:52.420 --> 00:29:56.680
So I'll just reiterate what
I was talking about before.

00:29:56.680 --> 00:30:01.580
Each one of these UI components
is actually working independently,

00:30:02.170 --> 00:30:06.850
and it's doing its own chatting
back and forth to the WebObjects

00:30:06.850 --> 00:30:11.210
server independently and
fetching in chunks of data,

00:30:11.660 --> 00:30:16.000
updating,
and notifying various other parts of

00:30:16.100 --> 00:30:19.000
the client that need updating that

00:30:19.170 --> 00:30:24.860
That's just an idea of how to
make a dynamic app and maybe

00:30:24.860 --> 00:30:28.690
a flavor of what you probably
want to do in a Web 2.0 world.

00:30:29.060 --> 00:30:33.910
Okay, so that was our quick overview
of WebObjects and Web 2.0,

00:30:34.030 --> 00:30:36.000
but we also have a lot
of other ground to cover,

00:30:36.000 --> 00:30:38.890
which is actually what's
coming up in WebObjects.

00:30:38.900 --> 00:30:42.590
So, I'd like to talk about transitions.

00:30:42.600 --> 00:30:45.720
And, yeah.

00:30:49.570 --> 00:30:52.840
We as Apple are, you know, we're looking,
I'm sure you guys have

00:30:52.840 --> 00:30:54.980
seen certain notices,
I think we'll address

00:30:54.980 --> 00:30:57.170
that a little bit later,
but we're also looking

00:30:57.170 --> 00:31:00.980
for new ways to actually,
I think, in the next year or two,

00:31:00.980 --> 00:31:04.190
to work a little bit more closer
with you as a community into

00:31:04.690 --> 00:31:09.000
extending WebObjects and bolting
on functionality to WebObjects.

00:31:09.060 --> 00:31:13.130
And we're also trying to bring WebObjects
more to the center of the Java world,

00:31:13.210 --> 00:31:15.430
and we have some initiatives to do that.

00:31:15.520 --> 00:31:18.490
So, what's new in WebObjects?

00:31:18.580 --> 00:31:21.410
So, earlier this week,
Xcode 2.4 came out,

00:31:21.410 --> 00:31:23.020
and we can talk about that.

00:31:23.040 --> 00:31:26.900
For Leopard, we have quite a bit
of deployment changes,

00:31:26.900 --> 00:31:30.820
so the way you might deploy an
app with an Apache 1.3 server

00:31:30.820 --> 00:31:33.740
on 10 server has changed.

00:31:33.740 --> 00:31:38.660
And, you know,
some of that is due to Apache 2 becoming

00:31:38.660 --> 00:31:42.400
the default web server on our platform.

00:31:42.400 --> 00:31:47.050
We're actually planning to open up
a lot of specifications to you guys.

00:31:47.660 --> 00:31:48.760
And I'll talk about that in a minute.

00:31:48.760 --> 00:31:51.200
We're bringing an ant build system.

00:31:51.200 --> 00:31:56.250
So, I don't know if you guys are
going to be happy about that.

00:31:59.470 --> 00:32:04.510
And there are also some support
changes we'll talk about.

00:32:04.860 --> 00:32:07.000
So Xcode 2.4.

00:32:07.030 --> 00:32:11.970
So to achieve the most backwards
compatibility with our runtime libraries,

00:32:11.970 --> 00:32:17.750
we use a JDK 1.5 compiler,
but we made all of our projects

00:32:17.780 --> 00:32:21.650
compile with the source 1.4,
target 1.4 flag.

00:32:21.700 --> 00:32:25.550
So we think that as far as
backwards compatibility,

00:32:25.560 --> 00:32:28.220
this is the best way to protect you guys.

00:32:28.370 --> 00:32:31.020
and in the future.

00:32:31.250 --> 00:32:35.730
We made a lot of Xcode compatibility
fixes to make sure that IDE and

00:32:35.740 --> 00:32:39.940
all the apps are talking
correctly and working correctly.

00:32:40.220 --> 00:32:43.170
And then there is a
security fix in there.

00:32:43.280 --> 00:32:46.560
One thing our security team
actually asked us to do was

00:32:46.700 --> 00:32:48.420
turn OpenBase off by default.

00:32:48.490 --> 00:32:52.420
So release the release notes about that.

00:32:52.520 --> 00:32:56.770
So I don't know if you
should clap for that.

00:32:58.170 --> 00:33:02.850
So as far as Leopard goes,
we're making large deployment changes.

00:33:02.900 --> 00:33:05.530
I'd really encourage you
guys to go to the WebObjects

00:33:05.540 --> 00:33:07.370
deployment session tomorrow.

00:33:07.550 --> 00:33:10.500
There's going to be a lot
of good content in there.

00:33:10.500 --> 00:33:13.000
I'll just go through a
little high-level overview.

00:33:13.000 --> 00:33:18.390
We're bringing non-blocking I/O,
so a lot of the well-worker threads

00:33:18.410 --> 00:33:21.440
that you're used to working with
or are used to in that environment

00:33:21.440 --> 00:33:22.970
are not going to be necessary.

00:33:23.090 --> 00:33:27.140
So look,
we're using a standard Java stack,

00:33:27.230 --> 00:33:30.260
the non-blocking I/O stack,
for processing our

00:33:30.360 --> 00:33:32.240
request response loops.

00:33:32.380 --> 00:33:36.110
So tomorrow we'll have
more information on that.

00:33:36.440 --> 00:33:38.940
We're also providing a
new monitoring solution.

00:33:38.940 --> 00:33:42.840
So we're actually trying to move to JMX,
which is a more standard

00:33:42.840 --> 00:33:46.580
Java-like way of monitoring
and managing your applications.

00:33:46.610 --> 00:33:48.670
So a lot of people have already asked me,
OK,

00:33:48.670 --> 00:33:51.520
so how do I actually monitor these apps?

00:33:51.520 --> 00:33:53.560
If you look at the next bullet,
Java Monitor is not going

00:33:53.560 --> 00:33:55.480
to be what we're going to be
encouraging people to use.

00:33:55.590 --> 00:34:02.750
Well, JConsole is part of the default
distribution in the JVM.

00:34:03.330 --> 00:34:06.780
There are also a huge number of open
source projects that allow you to

00:34:06.780 --> 00:34:08.640
do JMX monitoring and management.

00:34:08.640 --> 00:34:11.460
So you can find out more
about that tomorrow.

00:34:11.460 --> 00:34:15.800
And then Apache 2 is
going to be supported.

00:34:15.800 --> 00:34:17.500
And we're going to have a new way.

00:34:17.500 --> 00:34:21.800
There's not going to be a mod
WebObjects module anymore.

00:34:21.800 --> 00:34:25.590
And we're going to use the
standard Apache mod proxy balancer.

00:34:25.610 --> 00:34:28.480
So definitely get some more
information on that tomorrow.

00:34:32.110 --> 00:34:36.830
So another initiative that we have
is actually opening up as much of our

00:34:36.890 --> 00:34:43.570
specifications as possible and giving you
guys some tool sets to extend WebObjects,

00:34:43.600 --> 00:34:47.910
build new apps or technologies
or tools on top of it.

00:34:48.030 --> 00:34:52.300
So our first step today was
actually posting the WoE component

00:34:52.300 --> 00:34:56.420
bundle specification and
the EO model specification.

00:34:56.420 --> 00:34:57.520
Those are in draft form.

00:34:57.520 --> 00:34:59.860
They're available at the
URL above for this session.

00:34:59.860 --> 00:35:01.820
We'll make them public later.

00:35:02.000 --> 00:35:03.030
Thank you.

00:35:06.450 --> 00:35:09.400
The other thing, in order to support some
of those specifications,

00:35:09.400 --> 00:35:14.900
is we're planning to release
the WoE Component Parsing Code.

00:35:15.000 --> 00:35:19.030
And that will be just available
to everybody in developer

00:35:19.030 --> 00:35:20.890
examples to play with.

00:35:20.900 --> 00:35:26.090
It will hopefully enable you guys
to consume WoE Components easier

00:35:26.430 --> 00:35:29.370
and do interesting things with them.

00:35:30.050 --> 00:35:39.130
Since this Eclipse project entity
modeler is actually already parsing

00:35:39.130 --> 00:35:43.510
EO model components or bundles,
we're actually encouraging people to

00:35:43.510 --> 00:35:48.940
look at that because I think they do a
pretty good job as far as showing how

00:35:48.940 --> 00:35:53.100
to parse EO model components or bundles.

00:35:53.500 --> 00:35:56.150
Another request we've had for
quite a number of years is,

00:35:56.150 --> 00:35:58.930
can you guys give us
the Java U UtilSource?

00:35:58.940 --> 00:36:00.920
And I don't know how
many of you use that,

00:36:00.940 --> 00:36:04.960
but it's a real convenient
utility for exporting and

00:36:04.960 --> 00:36:06.380
importing data from databases.

00:36:06.380 --> 00:36:11.000
And it's a little switchblade knife of
doing a lot of different kinds of things.

00:36:11.000 --> 00:36:13.000
So we thought we'd throw that out there.

00:36:13.000 --> 00:36:14.120
We had a number of requests for that.

00:36:14.160 --> 00:36:18.270
And we think that that will help people
that want to bolt on functionality to

00:36:18.270 --> 00:36:20.530
their apps to do more stuff with that.

00:36:21.340 --> 00:36:23.320
And of course, I mentioned Java Monitor.

00:36:23.320 --> 00:36:27.940
So we're providing the source on
disk with the developer tools.

00:36:28.000 --> 00:36:32.080
And we've heard a lot of requests
over the years that you want the

00:36:32.080 --> 00:36:37.460
source so that you can customize
Monitor or WOTASD for your deployment

00:36:37.460 --> 00:36:39.290
environment or specific needs.

00:36:39.310 --> 00:36:44.470
So we're giving you that stack to
play with and do what you want with.

00:36:44.560 --> 00:36:47.790
We're also encouraging you to
check out our new stack and new

00:36:47.790 --> 00:36:50.040
way of deploying on 10th server.

00:36:50.040 --> 00:36:51.280
So there's a lot.

00:36:51.300 --> 00:36:53.810
options available to you guys.

00:37:00.300 --> 00:37:03.620
So as I mentioned, the build system,
we're really interested in

00:37:03.620 --> 00:37:07.480
leveraging Ant and using a
more Java-like build system.

00:37:07.480 --> 00:37:11.210
Many of you weren't so enthusiastic
about the Jam build system,

00:37:11.220 --> 00:37:13.640
and so we're making that move this year.

00:37:13.640 --> 00:37:18.150
And we're trying to make the build
system compatible with other IDEs,

00:37:18.150 --> 00:37:22.720
so we'll try to support as best as
possible the integration aspects.

00:37:22.880 --> 00:37:26.030
So if you want to use
Eclipse or NetBeans,

00:37:26.030 --> 00:37:31.080
et cetera, to build your WebObjects apps,
we're trying to provide that integration.

00:37:31.080 --> 00:37:35.500
And of course, that means that the old
build system is deprecated,

00:37:35.520 --> 00:37:38.390
but we're not going to
remove it from disk,

00:37:38.540 --> 00:37:41.210
so there'll be a long transition
period where you guys don't have

00:37:41.220 --> 00:37:44.240
to migrate your apps right away,
but we're really encouraging you to.

00:37:48.940 --> 00:37:51.860
So a lot of this openness and
what we're trying to do is

00:37:51.860 --> 00:37:53.500
actually prop up you guys.

00:37:53.520 --> 00:37:56.920
And we're really trying to
help these projects especially,

00:37:56.960 --> 00:37:59.880
because we think they're
doing a really great job.

00:37:59.890 --> 00:38:02.540
I don't know how many of you
use WoeLips or WoeProject,

00:38:02.540 --> 00:38:05.730
but it's really cool.

00:38:09.460 --> 00:38:13.450
Rule Modeler, people think it's a great
replacement for Rule Editor,

00:38:13.450 --> 00:38:15.890
and we'd like to encourage the
further development of that.

00:38:15.950 --> 00:38:19.860
And then there's a recent
application or plug-in to

00:38:19.900 --> 00:38:24.400
Will Lips called Entity Modeler,
and we think it's a really

00:38:24.400 --> 00:38:27.300
full-featured modeling plug-in.

00:38:27.300 --> 00:38:28.530
So we'll talk about that in a minute.

00:38:28.540 --> 00:38:31.830
And then Project Wonder, of course,
has just been a great

00:38:31.830 --> 00:38:33.540
support to the community.

00:38:33.540 --> 00:38:37.260
And a lot of Apple engineers have
contributed to that in the past,

00:38:37.290 --> 00:38:39.980
and we're encouraging
you guys to look at that,

00:38:40.010 --> 00:38:40.600
too.

00:38:40.600 --> 00:38:45.750
So what I'd like to do right now is
actually bring Mike Schrag up here.

00:38:45.760 --> 00:38:47.360
He did the Entity Modeler.

00:38:55.670 --> 00:38:58.560
So I'm going to see if we can take
the picture here because I don't know

00:38:58.560 --> 00:39:05.190
what better way for the mailing list
to see that it's not actually dead.

00:39:10.540 --> 00:39:12.740
Demo machine number two.

00:39:12.740 --> 00:39:14.520
Yeah, thank you.

00:39:14.520 --> 00:39:18.620
So what's that?

00:39:23.790 --> 00:39:24.700
No problem.

00:39:24.700 --> 00:39:28.640
All right.

00:39:28.640 --> 00:39:30.870
So what is Entity Modeler?

00:39:30.920 --> 00:39:34.330
I'm going to equip the Eclipse
that they're running and run the

00:39:34.470 --> 00:39:36.570
24 hours ago build of Eclipse.

00:39:36.620 --> 00:39:38.730
So we get the...

00:39:39.190 --> 00:39:40.220
Latest and greatest.

00:39:40.220 --> 00:39:44.930
For people that have
been around for the past,

00:39:44.980 --> 00:39:47.600
oh, say, 10 years,
you may be familiar with EOModeler.

00:39:47.600 --> 00:39:51.350
And you may be familiar with the fact
that EOModeler may not have actually

00:39:51.350 --> 00:39:53.440
changed much in those 10 years.

00:39:53.440 --> 00:39:56.910
And it carries around several
bugs that may not have really

00:39:56.910 --> 00:39:58.940
changed much in 10 years.

00:39:58.940 --> 00:40:07.090
So at the Will Lips Project,
Will Lips Project Enterprises,

00:40:07.210 --> 00:40:12.520
we basically were looking at what
were our options going forward because

00:40:12.590 --> 00:40:16.940
we'd like to provide better support
because obviously things like EOModeler

00:40:16.940 --> 00:40:21.440
app being deprecated and things
moving towards the Xcode plugin and,

00:40:21.530 --> 00:40:26.500
of course,
demo guides being what they are.

00:40:26.520 --> 00:40:28.500
That's a whole new one.

00:40:28.940 --> 00:40:29.780
That's not even our fault.

00:40:29.810 --> 00:40:31.770
Talk to the eclipse people on that one.

00:40:35.150 --> 00:40:36.700
Of course, yes.

00:40:36.770 --> 00:40:39.890
All right.

00:40:39.930 --> 00:40:41.250
We'll take two there.

00:40:41.470 --> 00:40:46.050
So what we basically wanted to do
was provide some mechanism to support

00:40:46.090 --> 00:40:48.100
EO model editing inside of Eclipse.

00:40:48.100 --> 00:40:50.560
And they're just going to make
me jump through hoops here,

00:40:50.560 --> 00:40:51.290
aren't they?

00:40:59.400 --> 00:41:00.300
Take three.

00:41:00.300 --> 00:41:05.220
The other nice thing at WoLips,
we don't have to care about things

00:41:05.220 --> 00:41:10.690
like release cycles and code quality
necessarily as much as Apple might.

00:41:10.800 --> 00:41:14.950
We just fixed this and put out
the fix later today for that.

00:41:15.000 --> 00:41:17.020
Oh, nice rendering bugs there.

00:41:17.020 --> 00:41:22.140
All right,
so for anyone who has not seen Eclipse,

00:41:22.140 --> 00:41:24.900
this is what Eclipse looks
like when you open it up in the

00:41:24.900 --> 00:41:26.460
traditional Java perspective.

00:41:26.460 --> 00:41:30.560
And the way that Eclipse is configured
is the concept of perspectives and views,

00:41:30.560 --> 00:41:33.670
where perspectives are sort
of collections of related

00:41:34.100 --> 00:41:35.600
views of your project.

00:41:35.600 --> 00:41:38.080
And so one of the new
perspectives that's in here,

00:41:38.080 --> 00:41:41.530
if you notice this icon up here,
is the entity modeler perspective.

00:41:41.540 --> 00:41:44.280
So I have a project here
called Secret Santa,

00:41:44.280 --> 00:41:49.200
which is actually an app that my
family uses to manage Secret Santa.

00:41:49.200 --> 00:41:53.800
And so you see in the
Java package perspective,

00:41:53.800 --> 00:41:58.340
or Java package explorer view,
the Secret Santa EO model here

00:41:58.340 --> 00:41:59.740
that has the entities inside of it.

00:41:59.870 --> 00:42:03.480
We actually are parsing these
things so we can actually tell

00:42:03.480 --> 00:42:05.500
you that this is actually an
entity and this is an EO model.

00:42:05.500 --> 00:42:09.720
If I were to actually open this,
if you used Eclipse before,

00:42:09.720 --> 00:42:09.880
you would see that this
is actually an entity.

00:42:09.880 --> 00:42:12.900
So if you know the open EO model,
there's now an open entity modeler.

00:42:12.900 --> 00:42:16.080
And so, yes, I always wanted to.

00:42:16.080 --> 00:42:19.920
This is entity modeler.

00:42:19.920 --> 00:42:23.320
This may look somewhat
familiar for people who have

00:42:23.320 --> 00:42:25.460
used EO modeler in the past.

00:42:25.500 --> 00:42:28.760
In fact,
the icons may look very familiar to you.

00:42:30.500 --> 00:42:35.400
and in fact, if you were TMD5 some,
the icons would look really familiar.

00:42:35.400 --> 00:42:39.880
So,
what we really wanted to do was provide

00:42:39.970 --> 00:42:41.720
a full replacement for EOModeler.

00:42:41.720 --> 00:42:45.400
I started out saying, all right, well,
I'll just kind of do the things

00:42:45.400 --> 00:42:49.100
that I use because I really
wanted an EOModeler replacement.

00:42:49.100 --> 00:42:51.750
But very quickly,
I started getting emails from

00:42:51.780 --> 00:42:54.760
people from all over saying,
well, what about stored procedures?

00:42:54.760 --> 00:42:55.980
You don't support stored procedures.

00:42:55.980 --> 00:42:58.080
And what about fetchbacks
with stored procedures?

00:42:58.080 --> 00:42:59.230
You don't support those.

00:42:59.460 --> 00:43:01.490
So, before long,
it basically was the full

00:43:01.490 --> 00:43:02.840
EOModeler replacement.

00:43:02.840 --> 00:43:06.500
So, the organization of this
is slightly different.

00:43:06.500 --> 00:43:09.800
Inside of Eclipse,
or inside of EOModeler and Xcode,

00:43:09.800 --> 00:43:11.300
you have the concept of inspector panels.

00:43:11.300 --> 00:43:14.130
It's not really a very common
idiom inside of Eclipse.

00:43:14.180 --> 00:43:16.590
Inside of Eclipse,
we have these sort of property

00:43:16.590 --> 00:43:18.260
panels and these other views.

00:43:18.260 --> 00:43:21.810
So, this is actually a properties view,
just like properties view inside

00:43:21.880 --> 00:43:24.140
of the other perspectives,
but with some custom

00:43:24.140 --> 00:43:27.220
contributed inspector views,
essentially.

00:43:27.220 --> 00:43:31.900
And so, when I select an EOModel,
I see my adapter configuration and I can

00:43:31.900 --> 00:43:36.110
get user info and I select an entity,
I get all of the things you would expect.

00:43:36.180 --> 00:43:40.640
So, some of the things that I'll
assume that you pretty much know

00:43:40.640 --> 00:43:41.940
how EOModeler basically works.

00:43:41.940 --> 00:43:45.480
So, I won't go over the little stuff,
but I'll show you some of the things

00:43:45.480 --> 00:43:46.670
that we do a little bit differently.

00:43:46.740 --> 00:43:49.650
One of the big ones is prototype support.

00:43:49.770 --> 00:43:52.260
If you've used prototype
support inside of EOModeler,

00:43:52.260 --> 00:43:54.300
you know that it has some issues.

00:43:54.460 --> 00:43:59.460
In particular, my most hated one,
I call the brown column of death.

00:43:59.460 --> 00:44:02.780
Inside of EOModeler,
if you change your prototype,

00:44:02.780 --> 00:44:06.020
you lose your column name in EOModeler.

00:44:06.140 --> 00:44:09.260
You don't lose your column
name in entity modeler.

00:44:09.260 --> 00:44:11.260
It stays.

00:44:12.600 --> 00:44:16.450
One of the other things,
if you happen to use Project Wonder,

00:44:16.450 --> 00:44:20.950
for instance,
we support the prototype naming

00:44:20.950 --> 00:44:24.420
scheme and resolution for those
that appears inside of ER model,

00:44:24.420 --> 00:44:26.400
or sorry, Project Wonder.

00:44:26.400 --> 00:44:29.620
For instance, ER prototypes and your
ER front-based JDBC prototypes,

00:44:29.620 --> 00:44:32.080
we find those and actually
hook those up properly.

00:44:32.080 --> 00:44:35.270
If you notice my,
actually let me select one of the,

00:44:35.270 --> 00:44:40.080
you notice this ID is of type integer
because I'm on front-based right now.

00:44:41.000 --> 00:44:48.630
If I were to go into my adapter
and change this over to Oracle.

00:44:49.120 --> 00:44:50.640
and TabOut.

00:44:50.640 --> 00:44:54.140
I come back and you notice
that changed to number.

00:44:54.140 --> 00:44:58.250
We dynamically resolve
prototypes in the fly.

00:45:01.600 --> 00:46:28.500
[Transcript missing]

00:46:28.940 --> 00:46:31.720
What we do is basically,
that's much faster than

00:46:31.750 --> 00:46:33.680
I thought it would be.

00:46:33.680 --> 00:46:36.640
On the fly, we take all of the JAR files
that comprise your project

00:46:36.640 --> 00:46:37.510
and all their dependencies.

00:46:37.520 --> 00:46:41.170
We find all the EO models in that,
and we find all of the WebObjects

00:46:41.170 --> 00:46:43.600
JAR files you point to,
and all the plugins that you point to,

00:46:43.600 --> 00:46:44.620
more importantly.

00:46:44.810 --> 00:46:49.300
We actually SQL generate using the exact
same plugins that you get at runtime.

00:46:49.300 --> 00:46:52.800
This SQL generation here matches
exactly your SQL generation at runtime,

00:46:52.800 --> 00:46:55.940
which is not necessarily
true in old EO Modeler.

00:46:55.940 --> 00:47:01.360
You get kind of a weird Java 1.1
JDBC old SQL generation.

00:47:01.380 --> 00:47:03.500
That's a particularly nice feature.

00:47:03.500 --> 00:47:06.650
In addition,
there's some ways you can hook into

00:47:06.700 --> 00:47:09.140
this process and actually tweak.

00:47:09.200 --> 00:47:13.460
You can catch delegate events
before we generate SQL.

00:47:14.340 --> 00:47:17.580
You can mess with the model
in memory to do custom things.

00:47:17.580 --> 00:47:20.460
After we generate SQL,
you can grab it and actually

00:47:20.460 --> 00:47:24.520
literally inject your own SQL into
this flow on a per-project basis.

00:47:24.520 --> 00:47:27.840
You can literally drop a Java file in
your project that implements a particular

00:47:27.840 --> 00:47:29.640
interface that we hook into on the fly.

00:47:29.640 --> 00:47:32.830
That is SQL generation.

00:47:32.920 --> 00:47:37.050
One of the other big ones is
Java source code generation.

00:47:37.050 --> 00:47:43.080
In EO Modeler, they have their own custom
method of generating Java.

00:47:43.880 --> 00:47:45.880
We actually use EO Generator.

00:47:45.890 --> 00:47:47.880
For anyone who has not
looked at EO Generator,

00:47:47.880 --> 00:47:49.020
I highly recommend it.

00:47:49.020 --> 00:47:52.870
That's rubicode.com.

00:47:52.900 --> 00:47:56.200
It's basically a much,
much more advanced templating system for

00:47:56.200 --> 00:48:01.040
generating Java files based on EO Models.

00:48:01.060 --> 00:48:04.920
In this case,
one of the paradigms in Eclipse is sort

00:48:04.920 --> 00:48:08.060
of incremental on-the-fly building.

00:48:08.060 --> 00:48:11.520
We sort of support that same concept,
which you can turn on and

00:48:11.520 --> 00:48:13.420
off if you don't like it.

00:48:13.420 --> 00:48:15.210
In EO Modeler, you can actually build a
project on your project,

00:48:15.210 --> 00:48:17.460
this billing workspace,
and it actually figures out which

00:48:17.530 --> 00:48:20.190
EO Generator configurations are
associated with this model and

00:48:20.190 --> 00:48:20.270
auto-builds everything all the
way down on all your dependent

00:48:20.270 --> 00:48:20.420
projects that might depend on this.

00:48:20.420 --> 00:48:32.120
For instance,
if I go and add a new attribute here,

00:48:32.120 --> 00:48:32.120
I can see that I have
a new attribute here.

00:48:32.870 --> 00:48:41.600
So, tell it this is a Boolean,
call it new attribute, column name.

00:48:41.600 --> 00:48:46.680
I always forget which ones are editable,
which ones aren't.

00:48:49.980 --> 00:48:58.140
And when I save now, which didn't save my
column because I was in it.

00:48:58.140 --> 00:49:01.970
So one of the things we hook into the
new Jface data bindings in Eclipse,

00:49:01.970 --> 00:49:06.760
which is a brand new specification that's
not actually public in Eclipse yet,

00:49:06.760 --> 00:49:09.240
and so it has some issues.

00:49:09.240 --> 00:49:12.820
So when I save, it now auto-EO generates,
and if I actually go

00:49:12.820 --> 00:49:17.080
and look at the code,
this on the fly generated code and

00:49:17.080 --> 00:49:21.740
changed the methods which now are a
compiler because I have things that are,

00:49:21.740 --> 00:49:25.090
you know, my EO generator file specifies
sort of pseudo-constructors.

00:49:25.250 --> 00:49:28.170
So it's showing me that I had a
new not null field that now has

00:49:28.170 --> 00:49:31.580
to be added to this so that the
Java file is totally on the fly,

00:49:31.610 --> 00:49:35.360
Eclipse is refreshed automatically,
and so everything is just

00:49:35.360 --> 00:49:36.740
sort of kept in sync.

00:49:36.740 --> 00:49:40.130
So and of course I closed my model.

00:49:43.190 --> 00:49:46.680
So the big takeaway here
is this is open source.

00:49:46.680 --> 00:49:49.210
It's available now in beta form.

00:49:49.320 --> 00:49:53.790
We've had several people with
fairly complicated models

00:49:53.890 --> 00:49:58.330
actually hitting this thing.

00:49:58.410 --> 00:49:59.800
Thanks, Alan.

00:49:59.800 --> 00:50:03.440
And so it seems to be
fairly robust at this point.

00:50:03.440 --> 00:50:05.440
I actually use it on my own models.

00:50:05.440 --> 00:50:09.190
So I do eat my own dog food also,
except I used it two weeks

00:50:09.190 --> 00:50:10.540
ago when it destroyed things.

00:50:10.540 --> 00:50:14.630
So I encourage you to give it a try.

00:50:14.640 --> 00:50:16.920
If you haven't tried Eclipse,
give that a try.

00:50:16.920 --> 00:50:19.040
Contribute to the source.

00:50:19.040 --> 00:50:22.340
Objectstyle.org slash woelips is
the wiki page that has all the

00:50:22.410 --> 00:50:24.190
information you need to get it.

00:50:25.220 --> 00:50:28.120
And get on the mailing list,
submit requests for features.

00:50:28.120 --> 00:50:33.000
We are perfectly happy
to add new features in.

00:50:33.000 --> 00:50:35.480
Some of the things we have planned,
index support.

00:50:35.480 --> 00:50:37.640
One of the big missing things in
NeoModeler is you can't define an

00:50:37.640 --> 00:50:38.920
index other than your primary key.

00:50:38.920 --> 00:50:43.070
Entity Modeler in the relatively
near-term future will add support

00:50:43.070 --> 00:50:47.900
for defining arbitrary indexes for
multiple columns on all your entities.

00:50:47.900 --> 00:50:52.280
Some of the other things are hooking
into the refactoring system in Eclipse.

00:50:52.340 --> 00:50:54.260
You notice I have these class names here.

00:50:55.160 --> 00:50:58.400
When I change a class name in Eclipse,
it would be very nice to actually

00:50:58.410 --> 00:51:01.550
contribute to the refactoring and
automatically update my model so

00:51:01.560 --> 00:51:03.430
it reflects those changes as well.

00:51:03.510 --> 00:51:07.540
And hook into EOGenerator to be able to
update my underscore versions of those.

00:51:07.540 --> 00:51:09.880
So some of those things
we have planned also.

00:51:09.910 --> 00:51:12.160
And any other ideas,
things that you're sick of

00:51:12.160 --> 00:51:15.670
NeoModeler doing or not doing,
let us know and we'll be happy to do it.

00:51:15.760 --> 00:51:18.470
So one of the last things I just
wanted to point out is Apple has been

00:51:18.470 --> 00:51:20.200
really cool about supporting this.

00:51:20.200 --> 00:51:24.160
We've gotten direct support
from WoW developers and the

00:51:24.520 --> 00:51:28.690
release of those specifications,
which they're really nice to give

00:51:28.690 --> 00:51:31.000
us sort of pre-releases of to see,
oh, hey,

00:51:31.000 --> 00:51:33.140
there are keys in NeoModeler files
that are 10 years old that aren't

00:51:33.140 --> 00:51:34.800
used anymore that we need to support.

00:51:34.880 --> 00:51:37.460
So Apple's been great.

00:51:37.500 --> 00:51:39.790
And I think all of these recent
announcements are really exciting.

00:51:39.800 --> 00:51:42.120
So again, WoW is not dead.

00:51:42.140 --> 00:51:42.920
Thank you.

00:51:48.300 --> 00:51:49.300
Thanks, Mike.

00:51:49.300 --> 00:51:54.140
So what I'd like to
do-- that's great stuff.

00:51:54.140 --> 00:51:56.740
We're really happy about
what Mike's been doing.

00:51:56.750 --> 00:51:59.410
And we encourage you guys
to check out the projects.

00:51:59.450 --> 00:52:01.490
What I'd like to do is
actually invite Max Muller up

00:52:01.880 --> 00:52:04.360
to talk about Project Wonder.

00:52:09.820 --> 00:52:11.360
As Daryl mentioned,
my name is Max Muller.

00:52:11.460 --> 00:52:14.480
I am the manager of the content
engineering group within the Music Store.

00:52:14.480 --> 00:52:17.990
And it is amazing how fast time flies.

00:52:18.000 --> 00:52:20.810
So in 2001,
I announced on behalf of NetStructure

00:52:20.820 --> 00:52:23.530
that we were open sourcing
two of our base frameworks,

00:52:23.570 --> 00:52:25.320
ER Extensions and ER Direct Web.

00:52:25.320 --> 00:52:28.890
So six months later,
Project Wonder was born on SourceForge

00:52:28.890 --> 00:52:30.840
to host those two frameworks.

00:52:30.840 --> 00:52:34.570
And here we are five years
later with over 30 frameworks.

00:52:35.380 --> 00:52:40.150
And with the help of Mike and Andrew,
who have just done amazing,

00:52:40.260 --> 00:52:44.020
amazing jobs on enhancing,
there's now close to 900

00:52:44.130 --> 00:52:45.820
commits just since January.

00:52:45.820 --> 00:52:52.030
So they've done an amazing job bringing
all sorts of things from SAP integration,

00:52:52.030 --> 00:52:57.650
IAM integration, Apache 2.2 work,
and most recently, essentially,

00:52:57.730 --> 00:53:00.300
the rule modeler and the AJAX support.

00:53:00.300 --> 00:53:02.630
So for those of you who
are interested in AJAX,

00:53:02.680 --> 00:53:05.290
the AJAX frameworks have
all of kind of the basics.

00:53:05.380 --> 00:53:07.580
So we have the base integration
with WebObjects in there.

00:53:07.580 --> 00:53:10.980
So JS proxies,
essentially the draggable actions,

00:53:10.980 --> 00:53:15.930
and just provides a really great
framework for building your AJAX work on.

00:53:15.940 --> 00:53:18.260
And it comes with a very cool demo.

00:53:18.260 --> 00:53:21.420
So I highly, highly suggest that those of
you who are interested in the

00:53:21.420 --> 00:53:23.190
AJAX work essentially check it out.

00:53:23.260 --> 00:53:26.430
Likewise, Andrew recently announced
on the mailing list,

00:53:26.430 --> 00:53:29.910
and it's official today,
that essentially the 3.0 version

00:53:29.910 --> 00:53:31.630
of Project Wonder is now out.

00:53:31.680 --> 00:53:33.580
And yes.

00:53:35.380 --> 00:53:37.150
No.

00:53:37.700 --> 00:53:40.070
Andrew and co.

00:53:40.540 --> 00:53:44.340
So that basically-- I won't go through
all the enhancements that it adds,

00:53:44.340 --> 00:53:47.680
but it adds stuff like
JDBC connection pooling,

00:53:47.740 --> 00:53:49.260
cursor support.

00:53:49.310 --> 00:53:53.320
It adds some of the AJAX stuff and a
number of other slew of enhancements.

00:53:53.320 --> 00:53:55.910
So go and check out the
latest release there.

00:53:55.920 --> 00:53:59.160
There's a lot of stuff
that is very relevant.

00:53:59.200 --> 00:54:01.740
So for those of you who
are new to WebObjects,

00:54:01.780 --> 00:54:05.010
Project Wonder also essentially
has a lot of great example code and

00:54:05.010 --> 00:54:09.540
was written by people who really
understand the technology well.

00:54:09.560 --> 00:54:12.010
Now I'm not just saying that
because I'm a committer,

00:54:12.020 --> 00:54:16.040
and there's a lot of my code out there,
but where I'm also a user.

00:54:16.060 --> 00:54:18.840
So within the Music Store,
we're all essentially WebObjects,

00:54:18.890 --> 00:54:20.720
Project Wonder.

00:54:20.720 --> 00:54:25.060
So if you browse the Music Store and
languages other than English,

00:54:25.080 --> 00:54:28.520
and UK English does count,
then you're going through essentially

00:54:28.540 --> 00:54:31.260
all the localization extensions
within the Wonder framework.

00:54:31.300 --> 00:54:34.740
If you received a receipt
email from the Music Store,

00:54:34.910 --> 00:54:37.600
and I hope all of you have
and received many of them,

00:54:37.600 --> 00:54:41.120
then you basically were going
through an ERC mail message.

00:54:41.120 --> 00:54:45.060
So we've basically leveraged it heavily
within the Music Store development,

00:54:45.060 --> 00:54:51.660
and it's obviously very robust and
fully featured from our perspective.

00:54:51.660 --> 00:54:55.340
Likewise, about 20% of our developers are
actually committers within Wonder,

00:54:55.340 --> 00:54:59.420
and regularly essentially contribute
back bug fixes and enhancements

00:54:59.510 --> 00:55:02.960
to the actual Wonder frameworks.

00:55:03.480 --> 00:55:05.330
Likewise,
we also work very closely with Beryl's

00:55:05.400 --> 00:55:08.880
group for essentially looking at
some of the new stuff within the NIO,

00:55:08.880 --> 00:55:11.770
looking at essentially the deployment,
some of the enhancements we

00:55:11.770 --> 00:55:15.000
can do around the deployment,
as well as contributing back bug fixes.

00:55:15.000 --> 00:55:17.470
So within the next release,
you'll be getting a lot of essentially

00:55:17.470 --> 00:55:21.780
the stuff that we basically found
and enhanced within the base product.

00:55:21.780 --> 00:55:23.890
And earlier this year,
thanks to a lot of the help

00:55:23.990 --> 00:55:27.120
from the Woe Lips group,
we now have the Music Store completely

00:55:27.120 --> 00:55:29.730
building in AMP,
and our developers are split about

00:55:29.820 --> 00:55:34.620
50/50 in IntelliJ and Eclipse,
and just actually in the past year,

00:55:34.620 --> 00:55:39.730
we've been basically playing around with
Entity Modeler and loading up a number of

00:55:39.730 --> 00:55:42.300
models from essentially the Music Store.

00:55:42.320 --> 00:55:45.060
And we basically take
advantage of all the tricks,

00:55:45.100 --> 00:55:49.080
the inheritance, both vertical,
horizontal, prototyping,

00:55:49.080 --> 00:55:51.940
all the kind of bells and whistles,
cross-model relationships.

00:55:51.960 --> 00:55:54.240
And it's actually been working
out rather well for us.

00:55:54.240 --> 00:55:57.900
So we hope to essentially have
been moved over on that front.

00:55:57.920 --> 00:56:00.360
And with that,
I will turn it back over to Daryl.

00:56:00.420 --> 00:56:04.510
DARYL FOX: Thanks.

00:56:07.410 --> 00:56:08.850
- So yeah,
we're really happy about what's going on

00:56:08.880 --> 00:56:13.850
in Project Wonder and we use it heavily
within Apple and we're really excited

00:56:13.860 --> 00:56:15.030
about a lot of the developments in there.

00:56:15.110 --> 00:56:19.540
So what I'd like to move on now
is actually invite my boss up,

00:56:19.600 --> 00:56:22.000
Francois, some of you might remember
him from the past,

00:56:22.010 --> 00:56:24.990
but he's the Java and
WebObjects Technologies Manager.

00:56:25.120 --> 00:56:27.620
- Hello, my man.

00:56:32.860 --> 00:56:34.240
Hello, my name is Francois Jouaux.

00:56:34.240 --> 00:56:39.960
I manage the Java and WebObjects
engineering teams at Apple.

00:56:40.020 --> 00:56:42.390
I've been with WebObjects since 1995.

00:56:42.550 --> 00:56:46.640
Actually, yeah, 1995,
the original WebObjects engineering team.

00:56:46.640 --> 00:56:49.590
And since that,
there's hardly a day when I don't have

00:56:49.590 --> 00:56:55.170
a new idea on how to use WebObjects or
-- and there is not yet a technology

00:56:55.170 --> 00:57:00.120
that has stumbled WebObjects,
prevented WebObjects

00:57:00.310 --> 00:57:03.650
prevented us to use WebObjects
to take advantage of it.

00:57:03.760 --> 00:57:07.400
Well,
they always call me for the hard part.

00:57:07.470 --> 00:57:09.280
Let's get to it.

00:57:09.750 --> 00:57:10.650
What the future holds.

00:57:10.720 --> 00:57:14.570
So let's talk about JDKs,
the Java Bridge,

00:57:14.640 --> 00:57:17.480
Iokoko Client and Java Client,
and the WebObjects tools.

00:57:21.160 --> 00:57:24.820
I thought I would quote Carl Gretton,
and we stumbled on this quote

00:57:24.930 --> 00:57:28.050
yesterday on the mailing list,
and it's a perfect summary of what

00:57:28.050 --> 00:57:30.280
we're going to be dealing with today.

00:57:31.910 --> 00:57:33.600
The Objective-C Java bridge is old.

00:57:33.600 --> 00:57:34.920
It has served its purpose.

00:57:35.030 --> 00:57:44.460
It was built on the original JDK from
Sun and it suffers many flaws.

00:57:44.570 --> 00:57:46.580
It's time to move on.

00:57:47.100 --> 00:57:48.040
JDK support.

00:57:48.220 --> 00:57:51.860
So as you've heard,
we are moving to JDK 1.5 since

00:57:51.990 --> 00:57:55.130
the OS is already on Java 2.0 SE5.

00:57:55.150 --> 00:58:00.530
This means that in Leopard,
the baseline will be 1.5.

00:58:00.940 --> 00:58:07.200
And we will be supporting
Java 1.5 for WebObjects.

00:58:07.290 --> 00:58:13.160
One of the reasons is that the necessary
JMX specifications that we want to,

00:58:13.160 --> 00:58:18.740
the dependencies we want to introduce
are in 1.5 JMX specifications.

00:58:19.480 --> 00:58:24.480
And as soon as Java SE 6 is available,
we will also support it.

00:58:28.000 --> 00:58:29.440
Cocoa Java.

00:58:29.440 --> 00:58:33.130
What does that mean for the
different versions of Xcode?

00:58:33.140 --> 00:58:38.360
In Xcode, in the Xcode 2.x family,
you have today all these

00:58:38.600 --> 00:58:42.000
possibilities for Java bridge
and Cocoa Java development.

00:58:42.000 --> 00:58:44.910
Project creation,
building existing projects,

00:58:44.910 --> 00:58:49.740
adding new bridge classes and so on,
and running Cocoa Java applications.

00:58:49.740 --> 00:58:54.800
In Xcode 3.0,
product creation will be gone and

00:58:54.800 --> 00:59:01.010
you will not be able to create new
Java bridge applications from scratch.

00:59:01.060 --> 00:59:05.370
You will be able to build existing
projects but not bridge new classes.

00:59:05.370 --> 00:59:07.550
Take Cocoa classes,
bridge them into Java.

00:59:07.570 --> 00:59:11.090
I don't think many people have
ever been doing this because

00:59:11.090 --> 00:59:13.110
it's a complicated process.

00:59:13.250 --> 00:59:15.440
But this is gone.

00:59:15.580 --> 00:59:19.970
So in Leopard, your bridge application
will still be running.

00:59:19.970 --> 00:59:22.650
You should not create new ones.

00:59:25.760 --> 00:59:27.630
The alternatives to Cocoa Java.

00:59:27.740 --> 00:59:30.490
The advice, again,
is to not create new bridge

00:59:30.490 --> 00:59:33.890
classes today in Nextcode 2.4.

00:59:33.890 --> 00:59:36.000
Use JNI to access native code from Java.

00:59:36.120 --> 00:59:37.920
This is a sure and trusted way to do it.

00:59:38.010 --> 00:59:42.780
That's what we are doing when we are
implementing Java on top of Mac OS X.

00:59:44.160 --> 00:59:50.090
Use Cocoa for your GUI applications or
Swing if you want to stick with Java,

00:59:50.110 --> 00:59:52.280
but do not mix and match.

00:59:52.400 --> 00:59:58.060
The Cocoa APIs exposed in Java have
been stalled for at least two releases.

00:59:58.380 --> 01:00:01.280
You don't have access to
the latest goodies there,

01:00:01.330 --> 01:00:04.320
and you should take advantage of them.

01:00:05.800 --> 01:00:10.840
Objective-C, not 0.2,
but 2.0 is available.

01:00:10.850 --> 01:00:14.040
And it has many Java-like
language features,

01:00:14.070 --> 01:00:18.270
garbage collection properties,
new for loops.

01:00:18.340 --> 01:00:21.760
And I encourage you to look
at this language as well.

01:00:22.520 --> 01:00:24.400
And it adds hooks for script bridging.

01:00:24.400 --> 01:00:27.120
If you ever wanted to
implement your own data bridge,

01:00:27.120 --> 01:00:27.570
have fun.

01:00:27.680 --> 01:00:28.060
Go for it.

01:00:28.080 --> 01:00:32.630
We tried.

01:00:35.650 --> 01:00:36.800
IOCoco Java.

01:00:36.800 --> 01:00:46.270
So IOCoco Java was introduced in the
early 2000s and was meant to provide a

01:00:46.270 --> 01:00:49.870
Cocoa frontend for WebObjects server.

01:00:50.130 --> 01:00:54.890
The story,
since it is partly built on the bridge,

01:00:54.940 --> 01:00:56.650
the story is similar here.

01:00:56.650 --> 01:00:59.430
In Xcode 3.0,
you will not be able to create

01:00:59.430 --> 01:01:02.290
new Iokoko Java applications,
but you will be able to

01:01:02.290 --> 01:01:03.690
build existing projects.

01:01:03.690 --> 01:01:06.440
And the runtime will stay
available on Leopard.

01:01:06.440 --> 01:01:09.420
I don't know how many Iokoko
Java applications are out there.

01:01:09.420 --> 01:01:11.300
One.

01:01:11.300 --> 01:01:12.680
Okay.

01:01:12.680 --> 01:01:13.310
Shipping.

01:01:13.310 --> 01:01:14.510
Well, it's shipping.

01:01:14.510 --> 01:01:15.800
It will keep shipping.

01:01:15.800 --> 01:01:19.440
And it will keep working.

01:01:23.150 --> 01:01:25.420
This brings us to
WebObjects Cocoa Java Tools.

01:01:25.420 --> 01:01:31.180
Actually, did I have-- maybe
missing something here.

01:01:31.230 --> 01:01:32.470
WebObjects Cocoa Java Tools.

01:01:32.590 --> 01:01:34.980
So many of our developer tools,
unfortunately,

01:01:34.980 --> 01:01:38.380
were built on top of the Java bridge.

01:01:38.380 --> 01:01:43.340
This led to a lot of pain
and trouble for my team.

01:01:43.350 --> 01:01:46.340
As Cocoa was moving forward,
as Xcode was moving forward,

01:01:46.340 --> 01:01:51.210
we've had to go through really convoluted
paths to keep the tools working.

01:01:51.230 --> 01:01:56.630
Today, I am announcing that the
following tools are deprecated.

01:01:56.630 --> 01:02:02.420
EOModeler, WebObjects Builder,
Rule Editor, Roa Launcher,

01:02:02.600 --> 01:02:04.160
and the Web Services Assistant.

01:02:08.940 --> 01:02:13.080
Some slides are messed up
by Javaclient compatibility.

01:02:13.080 --> 01:02:16.780
This is similar to Iokoko Java.

01:02:16.920 --> 01:02:24.050
Since it is built on the bridge,
we need to deprecate product creation,

01:02:24.060 --> 01:02:26.880
but your applications will keep running.

01:02:29.440 --> 01:02:31.860
Alternatives to EO-Cocoa
Java on Java Client.

01:02:32.180 --> 01:02:34.830
Do not write new projects
using deprecated frameworks,

01:02:34.930 --> 01:02:38.280
client frameworks,
which are JavaEO-Cocoa,

01:02:38.280 --> 01:02:44.140
JavaEO application, distribution,
generation, and the interface frameworks,

01:02:44.480 --> 01:02:46.660
either for Cocoa or Swing.

01:02:46.740 --> 01:02:52.840
Use Cocoa and Core Data on the client,
or use Swing and the EO-Java frameworks.

01:02:52.960 --> 01:02:57.680
Use pure web services to communicate
with the WebObjects server.

01:02:57.780 --> 01:03:00.750
This should bring you in line much
more with what the industry is doing.

01:03:00.850 --> 01:03:05.790
These were really proprietary
communication mechanisms,

01:03:05.860 --> 01:03:07.700
and they were very hard to move forward.

01:03:07.700 --> 01:03:13.690
So let's get back to the WebObjects
tools that are duplicated.

01:03:15.630 --> 01:03:20.670
The EA Modeler and its plugins
should be replaced by Entity Modeler.

01:03:20.760 --> 01:03:22.440
You've seen the demo of Entity Modeler.

01:03:22.690 --> 01:03:24.500
There are very few things missing.

01:03:24.500 --> 01:03:26.270
I could think of maybe two.

01:03:26.330 --> 01:03:27.490
The diagram view.

01:03:27.490 --> 01:03:30.860
It's good to show to your boss,
but I have never really seen the

01:03:30.860 --> 01:03:32.730
usability of the diagram view.

01:03:32.730 --> 01:03:36.490
You're going to do it anyway, so.

01:03:40.850 --> 01:03:44.130
and reverse engineering,
and that I know is coming.

01:03:44.140 --> 01:03:46.040
That is very important.

01:03:46.790 --> 01:03:51.570
WebObjects Builder is
replaced by WoeLips.

01:03:51.630 --> 01:03:55.610
Most of the hardcore developers
that were building components

01:03:55.700 --> 01:04:01.370
were using WoeLips anyway,
or a pure text-based editor

01:04:01.520 --> 01:04:02.920
for the Woe components.

01:04:02.970 --> 01:04:07.480
WoeLips have syntax coloring and a
lot of goodies that it gets for free

01:04:07.630 --> 01:04:10.950
from Eclipse for editing components.

01:04:11.050 --> 01:04:15.560
Rule Editor is superseded
by Rule Modeler.

01:04:17.260 --> 01:04:22.570
Web Services Assistant should
also be replaced by Role Modeler.

01:04:22.570 --> 01:04:24.000
And our Launcher is just dropping off.

01:04:29.980 --> 01:04:33.920
So in summary,
this is all about getting more

01:04:33.920 --> 01:04:35.110
engaged with the community.

01:04:35.280 --> 01:04:37.720
We are moving forward with
the WebObjects runtime.

01:04:37.910 --> 01:04:44.380
Our skills are mostly at the runtime
level to try to improve the pipeline

01:04:44.660 --> 01:04:50.240
between the web server and the
application server and give you all

01:04:50.240 --> 01:04:55.080
the building blocks to build the best
components and the best models as well

01:04:55.110 --> 01:05:01.500
as foundation classes that are closer
to the Java-based foundation classes.

01:05:01.500 --> 01:05:05.780
We would like to help open and
community--help the creation

01:05:05.780 --> 01:05:07.760
of open community-led tools.

01:05:07.760 --> 01:05:13.220
We want to expose our formats,
no more proprietary formats,

01:05:13.220 --> 01:05:20.800
and provide more example code for the
pieces that people still rely on but that

01:05:20.800 --> 01:05:25.100
we have decided to move further from,
beyond.

01:05:25.100 --> 01:05:28.170
We will ensure compatibility
between runtime on these open tools

01:05:28.170 --> 01:05:31.140
we have talked or demoed today.

01:05:31.140 --> 01:05:36.080
And the good news for Xcode is that end
support is going to be the main way for

01:05:36.080 --> 01:05:39.770
both Java and WebObjects development,
the main build system,

01:05:39.930 --> 01:05:44.390
and that should allow your team members
to pick and choose between any of

01:05:44.390 --> 01:05:47.460
the different ideas that support end.

01:05:50.540 --> 01:05:53.980
As a summary, well, Daryl,
this is your show.

01:05:54.010 --> 01:05:55.470
Summarize.

01:05:55.470 --> 01:05:56.680
Thank you.

01:06:04.360 --> 01:06:06.860
What we talked about today,
we talked about how to use WebObjects

01:06:06.860 --> 01:06:09.900
to build Web 2.0 applications,
and we think it's a great

01:06:09.900 --> 01:06:13.600
platform and great foundation to
build cool Web 2.0 applications.

01:06:13.600 --> 01:06:20.590
We also talked about just helping you
guys build cool apps and allowing you to

01:06:20.590 --> 01:06:26.110
extend the WebObjects-based technology
and do interesting things with it.

01:06:26.190 --> 01:06:28.300
And we think,
looking at this turnout today,

01:06:28.360 --> 01:06:30.460
that there's a lot of
interest in doing this,

01:06:30.460 --> 01:06:32.840
and there's a lot of
energy in the community.

01:06:34.420 --> 01:06:38.030
and of course we have a lot of
great Leopard improvements and

01:06:38.030 --> 01:06:40.880
I would encourage you to look or go
to the deployment session tomorrow.

01:06:40.880 --> 01:06:44.680
There's a lot of good stuff to learn
about and find out what's coming.

01:06:44.680 --> 01:06:46.540
So thank you for coming.

01:06:46.540 --> 01:06:51.380
One more thing I have is I think
we have a little bit of Q&A time.

01:06:51.380 --> 01:06:57.150
So if anybody has a good question and
doesn't flail us or anything like that,

01:06:57.250 --> 01:07:00.920
I've got some t-shirts up here in
front that I'll throw out to you guys.