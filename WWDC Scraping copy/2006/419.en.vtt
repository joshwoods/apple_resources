WEBVTT

00:00:10.260 --> 00:00:11.630
Well, good morning, everyone.

00:00:11.750 --> 00:00:20.720
Welcome to the ultimate session of
WWDC 2006 on X.509 certificates.

00:00:21.100 --> 00:00:22.220
Thanks for coming.

00:00:22.220 --> 00:00:23.760
Thanks for making it this far.

00:00:23.760 --> 00:00:24.560
It's been quite a week.

00:00:28.180 --> 00:00:29.440
My name is Ken McLeod.

00:00:29.440 --> 00:00:34.870
I work in the data security group,
which is part of CoreOS at Apple.

00:00:35.430 --> 00:00:39.040
And today's session is
all about certificates,

00:00:39.040 --> 00:00:42.480
and we'll kind of be focusing
on digital identities,

00:00:42.480 --> 00:00:46.200
using certificates as your identity,
and how you get an identity,

00:00:46.350 --> 00:00:49.730
how you find one, and how you use one.

00:00:49.960 --> 00:00:53.190
Another important thing we'll be
covering is the idea of a preferred

00:00:53.370 --> 00:00:56.930
identity or preferred certificate,
and how you figure out what the

00:00:56.930 --> 00:01:01.380
user's preferred cert is in the
case where they have more than one.

00:01:01.660 --> 00:01:04.780
And finally, a very big one here.

00:01:05.030 --> 00:01:08.710
There are big changes in Leopard on
how certificates are actually trusted.

00:01:08.830 --> 00:01:11.350
So be sure to stick around for that one.

00:01:11.520 --> 00:01:15.210
I'll be covering a little bit
about the built-in facilities and

00:01:15.210 --> 00:01:19.200
functions in Mac OS X for actually
doing things with identities,

00:01:19.200 --> 00:01:21.490
signing, encryption, and authentication.

00:01:21.680 --> 00:01:25.320
And then we'll round this out just by
briefly talking about some of the new

00:01:25.320 --> 00:01:28.920
functionality that's in Common Crypto.

00:01:30.480 --> 00:01:33.710
So first off, what is an identity?

00:01:33.930 --> 00:01:38.200
This is a term that's like key or some
of the other words that are thrown

00:01:38.200 --> 00:01:40.370
around that get overloaded a lot.

00:01:40.610 --> 00:01:43.430
And when we talk about an
identity in this session,

00:01:43.430 --> 00:01:47.300
in the kind of public key
infrastructure sense of an identity,

00:01:47.300 --> 00:01:50.460
an identity is just a
certificate and a private key,

00:01:50.590 --> 00:01:52.980
the combination of those two things.

00:01:53.300 --> 00:01:55.870
The private key is
something that the user has,

00:01:55.870 --> 00:01:59.340
something that you have,
and the certificate half of the

00:01:59.380 --> 00:02:05.200
identity is issued to you to identify
you as the holder of that key.

00:02:05.200 --> 00:02:09.340
And it also has a function
of being able to limit or set

00:02:09.340 --> 00:02:11.760
out what the key is used for.

00:02:14.430 --> 00:02:16.200
Identities are contained in keychains.

00:02:16.230 --> 00:02:19.510
Now, a keychain, as you probably know,
is the standard repository on

00:02:19.510 --> 00:02:23.640
Mac OS X for things of a secret
nature that you want to keep secret,

00:02:23.640 --> 00:02:25.740
like your keys and
cryptographic material.

00:02:25.740 --> 00:02:28.680
So you can store these in a
standard file-based keychain.

00:02:28.680 --> 00:02:32.210
You can store them in a token,
like a smart card,

00:02:32.210 --> 00:02:36.400
and if that token has a token
D module that supports it.

00:02:36.420 --> 00:02:39.920
We had sessions earlier in the week
that if you didn't manage to catch them,

00:02:39.990 --> 00:02:42.120
you can check out on the DVDs afterwards.

00:02:42.960 --> 00:02:45.720
But they're available in tokens.

00:02:45.720 --> 00:02:49.160
They're also,
if you have a LDAP directory,

00:02:49.160 --> 00:02:51.890
you can put the certificate
portion of the identity out

00:02:51.890 --> 00:02:53.660
there as part of a user's record.

00:02:53.660 --> 00:02:56.770
If you have the user certificate
or the user SMI certificate

00:02:56.770 --> 00:03:00.260
attributes of a user record,
identities can be stored there.

00:03:03.440 --> 00:03:06.070
This is kind of an important idea,
and I'll come back to

00:03:06.070 --> 00:03:07.120
it again in this talk.

00:03:07.120 --> 00:03:10.680
I'm one user,
but I can have more than one identity.

00:03:10.680 --> 00:03:13.810
I can have different names that I use.

00:03:13.810 --> 00:03:15.170
I can have different email addresses.

00:03:15.210 --> 00:03:18.180
The obvious example is I have a
different identity for my work

00:03:18.180 --> 00:03:21.410
stuff than I do for stuff that's
personal and stuff that's at home,

00:03:21.410 --> 00:03:23.780
and different email addresses for those.

00:03:23.980 --> 00:03:28.550
But I could also have the same exact
name and same exact email address,

00:03:28.570 --> 00:03:30.740
but issued from different authorities.

00:03:30.740 --> 00:03:33.260
So work can issue me two
different certificates,

00:03:33.320 --> 00:03:36.420
or I can get one from an
outside certificate authority.

00:03:36.420 --> 00:03:40.790
And I can also have different identities
that look the same in every way,

00:03:40.790 --> 00:03:43.680
except they allow me
to do different things.

00:03:43.680 --> 00:03:46.250
So one identity might
let me sign my email,

00:03:46.250 --> 00:03:49.890
and another one might let me
log in or encrypt something.

00:03:52.670 --> 00:03:56.990
How do I get an identity and establish
myself with my digital identity?

00:03:57.000 --> 00:04:00.720
Well, identities come from what's
called a certificate authority.

00:04:00.850 --> 00:04:04.290
And at the very fundamental
sense of a certificate authority,

00:04:04.290 --> 00:04:08.120
a certificate authority is a
special kind of certificate that's

00:04:08.120 --> 00:04:10.650
allowed to sign other certificates.

00:04:10.650 --> 00:04:12.760
So it issues certs from there.

00:04:12.760 --> 00:04:15.630
But there's a lot more to being
a certificate authority than

00:04:15.630 --> 00:04:17.660
just having that kind of cert.

00:04:17.660 --> 00:04:20.490
You need to keep track of all
the certificates that you issue.

00:04:20.640 --> 00:04:23.980
And there's some, you know,
policies and things to follow

00:04:24.100 --> 00:04:25.690
and things to be aware of there.

00:04:25.960 --> 00:04:28.150
For example,
every certificate you issue as

00:04:28.150 --> 00:04:31.670
a certificate authority has to
have a different serial number.

00:04:31.670 --> 00:04:34.380
And so you need some way
of keeping track of that.

00:04:34.380 --> 00:04:37.520
So there's generally two
ways to go about this.

00:04:37.590 --> 00:04:40.220
You can either go to one of
the traditional certificate

00:04:40.220 --> 00:04:42.470
authorities like VeriSign or,
you know,

00:04:42.470 --> 00:04:47.680
any of the number--numerous others
and request a certificate yourself.

00:04:47.680 --> 00:04:49.250
But you can also create one.

00:04:49.320 --> 00:04:51.740
And you can do that
quite easily on Mac OS X.

00:04:51.910 --> 00:04:54.800
And I'll get into that and show you how

00:04:55.050 --> 00:04:58.150
So first let's cover how
you normally do this with a

00:04:58.180 --> 00:05:00.400
traditional certificate authority.

00:05:00.400 --> 00:05:01.690
We have a user, Bob.

00:05:01.890 --> 00:05:03.900
He's the typical sample user.

00:05:03.900 --> 00:05:05.950
And Bob wants to get a digital identity.

00:05:05.950 --> 00:05:09.770
So he goes to the certificate
authority's website with his browser.

00:05:09.770 --> 00:05:13.500
And there's a little bit of an
arcane HTML tag that is on the

00:05:13.500 --> 00:05:17.630
certificate authority's web
page that lets the browser know,

00:05:17.630 --> 00:05:22.260
hey, you need to generate a key pair
for Bob here on his computer.

00:05:22.260 --> 00:05:24.720
And so the browser goes and does that.

00:05:24.900 --> 00:05:30.130
And then it bundles up the public
component of that key pair into something

00:05:30.140 --> 00:05:32.940
called a certificate signing request.

00:05:32.940 --> 00:05:35.950
And that CSR gets sent
off with the public key,

00:05:35.950 --> 00:05:38.910
the thing that doesn't
need to be kept secret,

00:05:38.910 --> 00:05:41.420
off to the certificate authority.

00:05:41.420 --> 00:05:46.150
And the certificate authority takes
its special CACERT and signs that

00:05:46.150 --> 00:05:50.370
request or issues a certificate
to that public key for Bob.

00:05:50.370 --> 00:05:55.490
And hopefully it also checks
out the CSR and makes sure

00:05:55.510 --> 00:05:57.230
that Bob is who he says he is.

00:05:57.360 --> 00:06:01.040
Usually what happens is they just
check to see that Bob has paid.

00:06:01.040 --> 00:06:05.410
At the end of this process,
the CA issues the CERT to Bob.

00:06:05.510 --> 00:06:09.340
Bob can either pull it down
by going to the web page or

00:06:09.410 --> 00:06:11.630
he can get it through email.

00:06:11.630 --> 00:06:13.260
That's often done.

00:06:13.260 --> 00:06:15.880
And it ends up on Bob's computer.

00:06:16.120 --> 00:06:19.800
And now Bob has the certificate
and the private key.

00:06:19.970 --> 00:06:24.860
And to gather the combination of
those two things is his identity.

00:06:24.860 --> 00:06:26.270
Kennedy.

00:06:27.000 --> 00:06:28.960
There's an alternate method
that's sometimes used.

00:06:29.020 --> 00:06:33.170
We see this done in enterprise and
government kind of installations

00:06:33.170 --> 00:06:36.560
where Bob doesn't start this process.

00:06:36.560 --> 00:06:42.170
The authority actually generates
the key pair and issues the

00:06:42.170 --> 00:06:45.040
certificate to the end user.

00:06:45.040 --> 00:06:48.900
And typically the way this is
done is either with a token,

00:06:48.900 --> 00:06:54.130
where the key is actually on the token,
or bundled up in what's

00:06:54.130 --> 00:06:57.650
called a PKCS12 file,
which is the standard kind of

00:06:57.720 --> 00:07:01.040
container for secret information
like keys and certificates.

00:07:01.040 --> 00:07:05.130
So Bob can take that container
and import it to his computer,

00:07:05.240 --> 00:07:07.880
and then he has his identity there.

00:07:07.880 --> 00:07:11.770
We don't usually recommend this
way because Bob doesn't have

00:07:11.870 --> 00:07:13.760
control of his private key.

00:07:13.760 --> 00:07:17.890
It's held onto by the authority,
but if the situation requires it,

00:07:17.890 --> 00:07:19.980
you can set things up that way.

00:07:19.980 --> 00:07:23.380
A better way to do it, of course,
is to issue... a token like a

00:07:23.380 --> 00:07:28.080
smart card where the private
key never leaves that token.

00:07:28.800 --> 00:07:33.090
So, like I just finished saying,
the standard way to move an identity,

00:07:33.100 --> 00:07:36.960
if you already have one,
is in the form of a PKCS12 file.

00:07:36.960 --> 00:07:38.680
We fully support importing those.

00:07:38.680 --> 00:07:43.540
We can also import separately if you
have the certificate or the private key.

00:07:43.540 --> 00:07:45.880
Those can be imported separately.

00:07:45.880 --> 00:07:46.800
They don't have to be together.

00:07:46.800 --> 00:07:51.740
The way to do this is, for an end user,
using keychain access.

00:07:51.740 --> 00:07:53.620
It's in the utilities folder.

00:07:53.620 --> 00:07:56.780
They can choose the import from the menu,
or they can just

00:07:56.780 --> 00:07:58.680
double-click a PKCS12 file.

00:07:58.700 --> 00:08:00.100
And it prompts them to add it.

00:08:00.140 --> 00:08:03.720
There's a couple other options
for getting your identity in.

00:08:03.720 --> 00:08:08.200
You can use the user bin security
tool with the import command.

00:08:08.200 --> 00:08:11.580
And that allows you to
import from a P12 file.

00:08:11.580 --> 00:08:16.760
You can also use the underlying API,
which is set keychain item import.

00:08:16.760 --> 00:08:22.290
Now, that's been there in Tiger,
and has a variety of options in the

00:08:22.290 --> 00:08:26.620
parameter list for specifying what
kind of thing you're importing.

00:08:26.620 --> 00:08:28.680
So, you can import a P12 container.

00:08:28.700 --> 00:08:33.600
If you have, for example, SSH keys,
someone was asking me about,

00:08:33.600 --> 00:08:34.520
you can import those.

00:08:34.580 --> 00:08:38.170
If you have them in OpenSSL format,
you can import those.

00:08:42.060 --> 00:08:45.600
So that's the existing
identity part of things.

00:08:45.660 --> 00:08:49.950
But what if I want to set up
my own certificate authority

00:08:50.530 --> 00:08:52.490
and do this process myself?

00:08:52.800 --> 00:08:54.780
Well, Mac OS X lets you.

00:08:54.830 --> 00:08:56.010
There's three steps to it.

00:08:56.140 --> 00:08:58.760
And this is just a broad,
general overview.

00:08:58.760 --> 00:09:02.140
You start by defining a
certificate authority,

00:09:02.140 --> 00:09:05.250
your special CA certificate.

00:09:05.570 --> 00:09:08.040
You'll need some policies in place,
as I mentioned,

00:09:08.040 --> 00:09:11.560
for tracking the certificates
you issue from that.

00:09:11.770 --> 00:09:13.600
But then you can issue
either with that route,

00:09:13.600 --> 00:09:19.000
or you can issue a special set of
intermediate certs that will issue

00:09:19.290 --> 00:09:22.160
certificates from that as well.

00:09:22.210 --> 00:09:27.900
And the last point is a problem that
a number of people have had up to now.

00:09:27.960 --> 00:09:33.230
And that's the question of how do you
get that root certificate distributed

00:09:33.320 --> 00:09:36.020
to your users in a trusted way?

00:09:36.020 --> 00:09:41.380
How can they trust the certificate
that is issuing identities?

00:09:41.400 --> 00:09:43.750
So we'll go over all of that.

00:09:44.450 --> 00:09:48.060
On Mac OS X,
there's essentially two ways to go.

00:09:48.320 --> 00:09:52.400
We ship OpenSSL,
and the OpenSSL command has a set

00:09:52.400 --> 00:09:56.840
of X.509 functions that allow you
to set up a certificate authority.

00:09:57.070 --> 00:09:59.640
Now, if any of you have
actually ever done this,

00:09:59.800 --> 00:10:03.510
you know it's not something
you can do in an hour or so.

00:10:03.690 --> 00:10:05.960
It's got a little bit
of a learning curve,

00:10:05.960 --> 00:10:09.830
because there's a number of configuration
options that you have to set up and

00:10:09.880 --> 00:10:14.350
config files to set up the various
extensions that you need in your

00:10:14.370 --> 00:10:16.970
certificates that you're issuing.

00:10:17.800 --> 00:10:21.100
In Mac OS X,
we have a much easier way of doing this,

00:10:21.120 --> 00:10:22.930
and it's called Certificate Assistant.

00:10:23.030 --> 00:10:25.990
Now, Certificate Assistant has
been in there since Tiger,

00:10:25.990 --> 00:10:29.570
and it's been kind of hidden away,
because it's under a menu

00:10:29.570 --> 00:10:31.380
item in Keychain Access.

00:10:31.550 --> 00:10:34.630
You have to kind of go looking for it,
but it is there,

00:10:34.750 --> 00:10:39.320
and it provides a real simplified way
of walking you through the process of

00:10:39.600 --> 00:10:41.820
setting up a certificate authority.

00:10:42.760 --> 00:10:45.810
So it kind of looks like the
panel there in the picture,

00:10:45.860 --> 00:10:49.250
just a series of questions that
it will ask you step by step

00:10:49.360 --> 00:10:52.820
to fill out information that it
needs to create the authority,

00:10:52.820 --> 00:10:56.100
and then subsequently to issue
certificates from that authority.

00:10:56.100 --> 00:10:59.120
Now,
Certificate Assistant will allow you to

00:10:59.270 --> 00:11:04.030
directly issue certificates on a machine,
but it's also much more useful

00:11:04.040 --> 00:11:07.660
in an organizational setup
to issue certs via email.

00:11:07.660 --> 00:11:12.720
And so what that allows you to
do is take requests from users.

00:11:12.720 --> 00:11:16.740
And remember a few slides ago,
we talked about that request where a user

00:11:16.760 --> 00:11:19.040
in their browser will send you a CSR.

00:11:19.040 --> 00:11:22.670
So Certificate Assistant can
take that CSR and process it and

00:11:22.670 --> 00:11:26.650
actually walk you through issuing
a certificate to your user.

00:11:26.660 --> 00:11:30.060
You can use Certificate Assistant to
request a certificate from

00:11:30.060 --> 00:11:34.170
other traditional authorities,
perhaps a higher-up certificate

00:11:34.280 --> 00:11:37.070
authority in your own organization.

00:11:37.080 --> 00:11:41.980
It will allow you to be
a sub-CA as one example.

00:11:41.980 --> 00:11:45.990
And then there's some built-in
utilities in Certificate Assistant that

00:11:45.990 --> 00:11:50.160
lets you look at certificates and
evaluate them for trustworthiness.

00:11:52.220 --> 00:11:55.670
In Leopard, there's two new features
to certificate assistant.

00:11:55.800 --> 00:11:59.400
The first one is something
called invitations.

00:11:59.560 --> 00:12:05.040
And an invitation is essentially just
an email that is a way of allowing

00:12:05.130 --> 00:12:08.510
you to introduce the fact that you're
setting up a certificate authority,

00:12:08.510 --> 00:12:12.670
and a way for that user to trust the
root certificate that you've created.

00:12:12.860 --> 00:12:15.640
And it's a bootstrapping
process that involves,

00:12:15.640 --> 00:12:20.830
if you have an existing source of trust,
if you're already signing emails,

00:12:20.830 --> 00:12:24.450
and you have a certificate
that is on the user's machines,

00:12:24.450 --> 00:12:27.940
and they can see that the email
comes from you and is signed,

00:12:28.070 --> 00:12:31.000
the email can include
the root certificate,

00:12:31.000 --> 00:12:36.130
and the process of trust is
kind of bootstrapped that way.

00:12:36.550 --> 00:12:39.890
The other thing in Leopard that
Certificate Assistant can do is generate

00:12:39.890 --> 00:12:41.600
a website for you automatically.

00:12:41.810 --> 00:12:45.300
So it can set this up,
and it's a place for your users

00:12:45.320 --> 00:12:49.460
to go and click a button and say,
"I want a cert from your certificate

00:12:49.570 --> 00:12:55.400
authority," and that process
is taken care of automatically.

00:12:55.950 --> 00:12:59.150
So since the word management
was in this session title,

00:12:59.320 --> 00:13:01.750
I would be very remiss if
I didn't talk about the entire

00:13:01.750 --> 00:13:02.890
lifecycle of the certificate.

00:13:02.900 --> 00:13:07.020
So we made it easy to create them,
and that's all fully supported.

00:13:07.020 --> 00:13:10.940
But the other thing that you'll
have to do in the lifecycle of a

00:13:10.940 --> 00:13:13.090
cert very often is to revoke it.

00:13:13.200 --> 00:13:17.270
For example, if an employee leaves your
company or if the certificate

00:13:17.530 --> 00:13:20.470
has been compromised in some way,
you need a way to do that.

00:13:21.130 --> 00:13:26.340
The two mechanisms for revocation,
the standard mechanisms, are certificate

00:13:26.360 --> 00:13:31.160
revocation lists and OCSP,
or the Online Certificate

00:13:31.160 --> 00:13:31.990
Status Protocol.

00:13:32.040 --> 00:13:34.410
So first, the CRLs.

00:13:34.500 --> 00:13:38.620
We have a tool in the system,
User Bin CRL Refresh.

00:13:38.620 --> 00:13:43.610
And its purpose in life is to go out,
and whenever it sees a certificate

00:13:43.610 --> 00:13:48.030
that it needs to evaluate,
and that certificate has information

00:13:48.080 --> 00:13:52.410
about where to go to get that CRL,
it will go out and cache

00:13:52.410 --> 00:13:55.870
those for as long as the
CRL says that that's allowable,

00:13:55.880 --> 00:13:58.850
and have that and manage
that on the system for you.

00:13:58.880 --> 00:14:04.400
So when system processes that work with
certificates under the hood call SecTrust

00:14:04.400 --> 00:14:08.680
Evaluate in order to determine whether
or not the certificate is trusted,

00:14:08.680 --> 00:14:12.600
it takes into account the CRL,
if that's appropriate,

00:14:12.600 --> 00:14:16.660
and determines whether to trust it
based on whether it's been revoked.

00:14:16.700 --> 00:14:20.340
And that kind of gets messy.

00:14:20.960 --> 00:14:25.280
So we're talking about revoking, say,
80,000 certificates,

00:14:25.480 --> 00:14:28.780
because that's an awfully big
list of things to download.

00:14:28.800 --> 00:14:32.560
So OCSP kind of is an
alternative to that,

00:14:32.630 --> 00:14:36.500
that lets you go out, talk to the server,
and ask it about one

00:14:36.500 --> 00:14:38.670
particular certificate.

00:14:38.830 --> 00:14:42.090
Again, the location of that server is
something that's specified in the

00:14:42.090 --> 00:14:44.150
certificate when you issue it.

00:14:44.430 --> 00:14:50.470
So we have a tool, user has been OCSPD,
that you may see running after a

00:14:50.480 --> 00:14:52.780
certificate evaluation has taken place.

00:14:52.950 --> 00:14:57.640
And its purpose in life is to
go out and ask that OCSP server,

00:14:57.640 --> 00:15:00.320
is the certificate still valid?

00:15:00.760 --> 00:15:06.500
In terms of setting up a CRL list,
there's currently no way

00:15:06.500 --> 00:15:07.930
on Mac OS X to do that.

00:15:07.940 --> 00:15:10.930
Other third parties
provide ways of doing that.

00:15:10.960 --> 00:15:14.230
We know it's an important area,
and we certainly have it

00:15:14.230 --> 00:15:16.770
on our radar to look at,
but can't promise anything

00:15:16.770 --> 00:15:18.100
in the Leopard timeframe.

00:15:18.100 --> 00:15:22.290
In OCSP land,
you can use OpenSSL in server mode

00:15:22.560 --> 00:15:25.820
to run an OCSP server yourself.

00:15:26.930 --> 00:15:32.220
Again, there's no other support
beyond that in terms of being

00:15:32.220 --> 00:15:33.810
the server portion of that.

00:15:36.600 --> 00:15:40.240
So now let's talk about
how you find an identity.

00:15:40.290 --> 00:15:44.450
When you need to use an identity,
there's a lot of considerations.

00:15:44.650 --> 00:15:48.370
The obvious ones you think of, well,
you know, I need my identity,

00:15:48.370 --> 00:15:49.800
I'll look it up by name.

00:15:49.840 --> 00:15:52.670
Or I need something that
I'm going to use for email,

00:15:52.670 --> 00:15:56.320
so I'll look up the identity
by the email address.

00:15:56.380 --> 00:15:59.410
But there's quite a few other
constraints beyond that that

00:15:59.450 --> 00:16:00.710
typically come into play.

00:16:00.880 --> 00:16:06.200
And an obvious one is in
TLS or SSL authentication,

00:16:06.200 --> 00:16:11.160
the server may be set up so
that it only accepts certain

00:16:11.160 --> 00:16:15.730
identities that are issued by,
for example, its own infrastructure and

00:16:15.730 --> 00:16:17.840
its own certificate authority.

00:16:18.010 --> 00:16:21.140
There's also usage considerations.

00:16:21.170 --> 00:16:24.140
I may need an identity
that can only do signing,

00:16:24.640 --> 00:16:26.780
and I have to ignore the encryption ones.

00:16:26.780 --> 00:16:30.130
The policy may require that
I need an identity that allows

00:16:30.140 --> 00:16:31.840
me to do authentication.

00:16:31.840 --> 00:16:37.130
So these are all considerations,
and of course, last but not least,

00:16:37.130 --> 00:16:39.740
the user may have a preference.

00:16:39.740 --> 00:16:44.270
If more than one certificate
is possible to use,

00:16:44.270 --> 00:16:47.200
the user may want to pick one.

00:16:48.130 --> 00:16:51.960
Now, it's really not good behavior
to just blindly find the first

00:16:52.080 --> 00:16:54.570
identity that matches and use that.

00:16:54.570 --> 00:16:58.360
Now, having said that,
Apple actually does that in some places,

00:16:58.360 --> 00:17:00.920
and we know it's wrong,
and we're fixing it.

00:17:01.030 --> 00:17:01.950
It's a bug.

00:17:03.460 --> 00:17:08.740
So when you're looking up an identity,
the primary API that you're going

00:17:08.740 --> 00:17:12.110
to use is SecIdentitySearchCreate.

00:17:12.160 --> 00:17:14.640
That sets up a search for an identity.

00:17:14.830 --> 00:17:18.190
And it's an iterative API,
which means you get one back at a time.

00:17:18.330 --> 00:17:21.610
If you want the next one,
you call copyNext again,

00:17:21.610 --> 00:17:24.900
and it gives you back the
next one that matches.

00:17:25.030 --> 00:17:29.480
The unfortunate thing about this API is
that it has a limitation that you can

00:17:29.480 --> 00:17:31.880
only look up identities by a key usage.

00:17:31.880 --> 00:17:34.620
So you often get more
than one that match,

00:17:34.620 --> 00:17:37.820
and if we remember
back to the last slide,

00:17:37.820 --> 00:17:39.400
there's a lot of other considerations.

00:17:39.400 --> 00:17:43.010
You need to look at the issuer,
you need to look at the name,

00:17:43.010 --> 00:17:45.220
all these things have to match.

00:17:45.220 --> 00:17:48.530
So it's a little bit
limited in that respect,

00:17:48.680 --> 00:17:53.240
but you deal with it generally
by asking the user once to pick,

00:17:53.820 --> 00:17:55.570
because the user usually
knows what's best.

00:17:55.620 --> 00:17:58.800
In Leopard, we're trying to address
this problem for you.

00:17:58.800 --> 00:18:04.140
We have an API that we're working on,
SecIdentitySearchCreateWithAttributes.

00:18:04.140 --> 00:18:09.370
And so all of those attributes that you
actually need to make an intelligent

00:18:09.370 --> 00:18:13.560
search for that identity that you need,
you can pass to that API,

00:18:13.560 --> 00:18:16.080
and it kind of gets you out
of the business of having

00:18:16.080 --> 00:18:19.140
to do the post-filtering on
the identities afterwards.

00:18:19.140 --> 00:18:23.630
And SecItemCopyMatching
is another new API.

00:18:23.640 --> 00:18:24.960
It's the API we're
working on for Leopard.

00:18:24.960 --> 00:18:28.260
And that will give you back
all of the identities at once.

00:18:28.260 --> 00:18:31.320
Instead of being iterative,
you can get them all back in an array.

00:18:31.320 --> 00:18:32.440
Now, why would you want to do that?

00:18:32.600 --> 00:18:35.890
Well, the obvious use for that is you
need to ask the user which one

00:18:35.920 --> 00:18:39.640
you'd like to present them a list
of all of the identities at once.

00:18:39.640 --> 00:18:41.090
So that's it.

00:18:44.010 --> 00:18:49.760
So the user wants to have a
way of picking an identity,

00:18:49.780 --> 00:18:55.360
and you need to have that
identity preference remembered.

00:18:55.410 --> 00:18:58.050
And what an identity preference is,
or a certificate preference,

00:18:58.060 --> 00:18:59.650
is just a mapping.

00:18:59.660 --> 00:19:04.100
It maps a particular
certificate to a particular use.

00:19:04.100 --> 00:19:08.540
And the use is specified by a name,
which can be either like a URI,

00:19:08.540 --> 00:19:13.690
if I'm going to a particular website,
or it can be my email address if

00:19:13.690 --> 00:19:16.680
I'm using the certificate for SMIME.

00:19:16.680 --> 00:19:18.780
And it's mapped also to the key usage.

00:19:18.780 --> 00:19:21.260
So, for example, signing or encryption.

00:19:23.100 --> 00:19:26.860
So these certificate preference items
are just standard keychain items.

00:19:27.030 --> 00:19:29.760
They're stored in the keychain,
and they're actually in use.

00:19:29.910 --> 00:19:34.870
You may have seen these already in Tiger,
because encrypted iChat will

00:19:34.930 --> 00:19:38.140
store an identity preference item
in your keychain that points to

00:19:38.140 --> 00:19:40.030
the certificate to use for iChat.

00:19:40.240 --> 00:19:46.970
And likewise, Safari, when it's using
SSL client-side authentication,

00:19:46.970 --> 00:19:48.790
will create one of these items
for the website you're visiting.

00:19:49.000 --> 00:19:52.180
The thing about having them in the
keychain is that you automatically

00:19:52.180 --> 00:19:56.340
get syncing between machines,
so you don't have to worry about that.

00:19:56.390 --> 00:19:59.820
The actual contents of the
identity preference item,

00:19:59.900 --> 00:20:03.470
the attributes of the item,
are still kind of in flux,

00:20:03.490 --> 00:20:06.420
so don't go mucking
around with them directly.

00:20:06.420 --> 00:20:10.660
Use the APIs that I'm going to
talk about here when you need to

00:20:10.660 --> 00:20:13.370
work with those preference items.

00:20:13.400 --> 00:20:15.360
And here are the APIs.

00:20:16.260 --> 00:20:20.700
When you're looking for whether or not
a user has a preference for an identity,

00:20:20.700 --> 00:20:22.850
you'll call secIdentityCopyPreference.

00:20:22.860 --> 00:20:24.750
And this is new for Leopard.

00:20:24.760 --> 00:20:32.500
secIdentityCopyPreference takes a
given name or URI and a key usage,

00:20:32.500 --> 00:20:36.350
those things that were mapped,
as we saw earlier, to the certificate.

00:20:36.360 --> 00:20:41.130
And if the user has set the preference,
you'll get back the preferred identity.

00:20:41.140 --> 00:20:43.960
If they haven't set one, it returns nil.

00:20:43.960 --> 00:20:48.020
The converse of this,
of course... is secIdentitySetPreference.

00:20:48.090 --> 00:20:51.300
So when a user actually
does specify an identity,

00:20:51.340 --> 00:20:52.260
you can call this.

00:20:52.470 --> 00:20:56.920
It will set the preference,
which will then be picked up later on.

00:20:58.290 --> 00:21:02.270
If you're looking for someone
else's preferred certificate,

00:21:02.300 --> 00:21:03.540
there's a separate API to call.

00:21:03.540 --> 00:21:05.800
That's sex certificate copy preference.

00:21:05.960 --> 00:21:08.250
Now, how do you know what someone
else's preference is?

00:21:08.350 --> 00:21:10.980
Well, typically,
when you get an email from them,

00:21:11.220 --> 00:21:14.090
it's part of the CMS message,
the signed message,

00:21:14.090 --> 00:21:15.690
that includes their certificate.

00:21:15.790 --> 00:21:17.540
And of course,
you've seen their certificate

00:21:17.540 --> 00:21:19.920
show up in your key chain,
but you never had a way until

00:21:19.920 --> 00:21:23.920
now to actually find out which
one the user prefers to use.

00:21:24.150 --> 00:21:27.550
So this is the API to
call to find that out.

00:21:27.660 --> 00:21:31.430
And of course, it has a converse as well,
which is sex certificate set preference,

00:21:31.560 --> 00:21:33.070
which allows you to set that preference.

00:21:35.610 --> 00:21:38.270
So this slide here is the
single most important slide,

00:21:38.270 --> 00:21:39.620
I think, of the entire talk.

00:21:39.760 --> 00:21:44.440
So be sure, if you take away nothing
else from the session,

00:21:44.540 --> 00:21:46.690
pay attention to this.

00:21:47.110 --> 00:21:50.720
In the world of Tiger, up to now,
there's been a single source

00:21:50.750 --> 00:21:52.440
of trust for certificates.

00:21:52.550 --> 00:21:55.030
And that source is a
special keychain file,

00:21:55.210 --> 00:21:56.710
X.509 anchors.

00:21:56.830 --> 00:21:59.500
You've all seen it if you
looked at keychain access.

00:21:59.500 --> 00:22:02.880
That's kind of a standard
system-provided list of the

00:22:02.880 --> 00:22:05.490
certificates that are trusted.

00:22:05.720 --> 00:22:08.600
In order to get any new
certificates trusted,

00:22:08.600 --> 00:22:12.160
for example,
your own organization's root CA cert,

00:22:12.160 --> 00:22:15.810
you have to add that to
the X.509 Anchors database.

00:22:15.820 --> 00:22:19.660
And in order to do that,
you have to be an administrator on Tiger.

00:22:21.900 --> 00:22:23.740
But not anymore.

00:22:23.940 --> 00:22:29.000
In Leopard, X.509 Anchors is still there,
but it's deprecated.

00:22:29.000 --> 00:22:32.420
It's no longer the source of trust,
and we recommend that you don't touch it.

00:22:32.420 --> 00:22:34.290
It's just there to look at.

00:22:35.890 --> 00:22:38.710
If you're going to be providing
new routes on the system,

00:22:38.740 --> 00:22:43.400
we recommend that they go into
the system keychain instead.

00:22:44.060 --> 00:22:48.600
Apple will still be shipping a set of
root certificates that are trusted.

00:22:48.600 --> 00:22:52.950
That'll go in system root
certificates instead of X.509 anchors.

00:22:52.960 --> 00:22:57.790
And the idea behind system root
certificates instead of X.509 anchors,

00:22:57.790 --> 00:22:59.140
why the name change?

00:22:59.140 --> 00:23:03.360
Well, this is an immutable set of certs.

00:23:03.360 --> 00:23:06.090
This can get shipped with
the operating system.

00:23:06.100 --> 00:23:10.670
This can be updated with software updates
without any fear of trampling over your

00:23:10.670 --> 00:23:12.790
trust settings or roots you've added.

00:23:13.800 --> 00:23:16.300
But it's kind of the base level.

00:23:16.300 --> 00:23:18.790
It's the stock level of trust,
and it can be overridden

00:23:18.790 --> 00:23:19.790
by an administrator.

00:23:19.800 --> 00:23:25.190
So at the administrator level,
they can provide a set of roots

00:23:25.190 --> 00:23:30.340
and a set of trust settings
that say these are also trusted,

00:23:30.340 --> 00:23:33.800
or they're trusted instead,
or I don't want to trust some of

00:23:33.840 --> 00:23:36.120
the certs that Apple has provided.

00:23:37.800 --> 00:23:43.040
And finally, a user can specify what
routes they want to trust.

00:23:43.040 --> 00:23:49.390
They can specify, as well as routes,
certificates further down the hierarchy.

00:23:49.480 --> 00:23:52.690
For example,
I don't necessarily want to trust

00:23:52.720 --> 00:23:57.500
a big certificate authority's
certificate that's issuing

00:23:57.500 --> 00:24:00.080
thousands of certs to who knows who.

00:24:00.080 --> 00:24:03.930
I would like to trust the actual
certificate that I know to be valid

00:24:04.330 --> 00:24:06.550
without trusting the rest of them.

00:24:06.600 --> 00:24:10.240
So all of that is permitted
at the user level.

00:24:10.240 --> 00:24:13.660
With one caveat,
the administrator in a secure

00:24:13.660 --> 00:24:18.370
environment can actually turn that off,
and so there's only a system and an

00:24:18.370 --> 00:24:22.860
admin level of trust without taking
into account the user's level.

00:24:22.860 --> 00:24:25.710
But by default,
users have complete control over

00:24:25.710 --> 00:24:27.880
whether or not they trust things.

00:24:30.520 --> 00:24:33.320
So let's say you're a
certificate authority.

00:24:33.580 --> 00:24:38.800
You've used Certificate Assistant to
set up a root certificate,

00:24:38.820 --> 00:24:39.890
and you're issuing certificates.

00:24:39.900 --> 00:24:44.530
And you want other people
to trust your root.

00:24:44.840 --> 00:24:46.310
Well, that's asking a lot.

00:24:46.340 --> 00:24:51.340
It implies a lot of
responsibility on your part.

00:24:51.340 --> 00:24:55.030
Like I said before,
you have to have policies in place to

00:24:55.530 --> 00:25:00.380
control who you're issuing certificates
to and know how to review them.

00:25:00.400 --> 00:25:02.520
You can't provoke them if necessary.

00:25:02.700 --> 00:25:06.510
Especially important is you have
to really secure your private key,

00:25:06.510 --> 00:25:08.860
the one that's issuing
other certificates.

00:25:08.910 --> 00:25:12.050
Because if somebody else gets that,
they can obviously issue

00:25:12.050 --> 00:25:15.280
rogue certificates,
and it looks like they're trusted.

00:25:15.280 --> 00:25:19.380
Well, you need to take all these
things into consideration.

00:25:19.380 --> 00:25:23.950
But of course, you don't have to root,
or you don't have to set the level of

00:25:23.950 --> 00:25:26.520
trust at the root anymore in Leopard.

00:25:26.520 --> 00:25:30.380
As I said, you can just trust a
particular certificate,

00:25:30.380 --> 00:25:30.380
and you can't just set the level of
trust at the root anymore in Leopard.

00:25:30.410 --> 00:25:32.240
So you can't have a certificate
that you're interested in trusting

00:25:32.290 --> 00:25:33.400
without the rest of the hierarchy.

00:25:33.400 --> 00:25:35.060
I'll show you how that
works in a little bit.

00:25:35.070 --> 00:25:35.880
We'll have a demo.

00:25:37.140 --> 00:25:40.380
Now there's obviously some big
implications here for people that are

00:25:40.380 --> 00:25:43.220
setting up machines and organizations.

00:25:43.340 --> 00:25:45.610
Right now,
you're probably writing scripts

00:25:45.820 --> 00:25:49.200
or installers that add your root
certificate to X.509 anchors,

00:25:49.200 --> 00:25:51.630
because that's the
standard way to trust it.

00:25:51.860 --> 00:25:58.580
So you'll still need to do that if you're
supporting Tiger and the earlier world.

00:25:58.620 --> 00:26:02.230
On 10.5, that's not going to be enough.

00:26:02.470 --> 00:26:07.700
You'll also need to specify that the root
certificate you're adding is trusted.

00:26:07.750 --> 00:26:09.700
Well, how do you do that?

00:26:09.700 --> 00:26:16.400
The easy way is to use a new command in
user bin security called addTrustedCert.

00:26:16.480 --> 00:26:18.970
And if you're calling
this function as root,

00:26:19.090 --> 00:26:24.680
you just pass it the cert,
and it adds it, and it's trusted.

00:26:24.790 --> 00:26:25.530
Done.

00:26:25.750 --> 00:26:31.270
You can also call this as the user,
and it will require authentication

00:26:31.280 --> 00:26:32.600
in order to make that change.

00:26:32.700 --> 00:26:34.500
Again, we'll see that in a minute.

00:26:34.880 --> 00:26:39.580
So how does this happen
typically in workflow?

00:26:39.700 --> 00:26:41.700
Well,
if you have an untrusted certificate,

00:26:41.700 --> 00:26:45.700
the first time something that needs
to use that certificate encounters it,

00:26:45.700 --> 00:26:49.660
and it sees that it's
not previously trusted,

00:26:49.730 --> 00:26:52.700
it's going to need to ask
and make a trust decision.

00:26:52.700 --> 00:26:55.700
If you're a user,
you can trust just that.

00:26:55.700 --> 00:26:59.700
You can trust that certificate for
that particular use and for that user.

00:26:59.700 --> 00:27:02.700
If you're an admin user,
you can extend that a bit.

00:27:02.700 --> 00:27:05.700
You can trust the
certificate for all users.

00:27:05.700 --> 00:27:10.710
There's a variety of things that you
can only trust it for particular use,

00:27:10.710 --> 00:27:11.690
let's say.

00:27:11.700 --> 00:27:15.700
I only want this trusted for signing
operations and never for encryption.

00:27:16.020 --> 00:27:19.770
All that level of control is available.

00:27:20.030 --> 00:27:22.920
Now, you can control that by editing
those settings in Keychain Access.

00:27:22.920 --> 00:27:27.690
You're probably familiar with that view
on the right there of the certificate.

00:27:27.690 --> 00:27:32.160
And all of those pop-ups now to let
you set trust are actually hooked in,

00:27:32.160 --> 00:27:35.700
and they're part of the
system's trust evaluation.

00:27:35.700 --> 00:27:40.470
You can use, as I mentioned,
the security tool and add trusted

00:27:40.470 --> 00:27:44.160
cert to do that explicitly,
kind of out of band,

00:27:44.160 --> 00:27:46.280
if you need to set that up.

00:27:47.160 --> 00:27:51.000
The function that underlies all
of that is set trust settings.

00:27:51.040 --> 00:27:54.160
Set trust settings is extremely flexible.

00:27:54.160 --> 00:27:56.800
You can look at the header.

00:27:56.800 --> 00:28:00.060
It's actually not on the slide,
but it's in trust settings

00:28:00.060 --> 00:28:01.720
in the security framework.

00:28:01.720 --> 00:28:06.950
When you make this call, obviously,
it requires authentication of some sort,

00:28:06.950 --> 00:28:11.520
because otherwise you could go in
and trust anything you wanted to.

00:28:11.520 --> 00:28:14.420
So, at the very least,
you're going to need, as a user,

00:28:14.420 --> 00:28:17.140
to enter your password
here to change anything.

00:28:17.160 --> 00:28:20.120
anything.

00:28:20.130 --> 00:28:21.960
But you get to do this as the user.

00:28:22.120 --> 00:28:24.180
It doesn't require the
admin to come over,

00:28:24.210 --> 00:28:26.870
unless, of course, as I mentioned,
you're in a controlled environment

00:28:27.440 --> 00:28:30.810
and you need to disable that
and only have the administrator

00:28:31.240 --> 00:28:32.160
be able to change those.

00:28:32.160 --> 00:28:35.020
And the way to do that is
with the security tool again.

00:28:35.020 --> 00:28:38.430
There is a user trust settings
enable command that lets

00:28:38.570 --> 00:28:40.250
you toggle that on and off.

00:28:42.090 --> 00:28:47.200
So I need to talk a little bit
about user trust and trust settings.

00:28:47.270 --> 00:28:52.140
They sound the same,
but they're quite different.

00:28:52.270 --> 00:28:57.070
User trust is something that has been
around for at least two releases now,

00:28:57.070 --> 00:29:00.940
since Panther, in the sec-trust.h header.

00:29:01.080 --> 00:29:05.990
And this was a way of letting you set
kind of an advisory preference as to,

00:29:05.990 --> 00:29:08.470
as a user, I don't trust this.

00:29:08.510 --> 00:29:09.450
I always trust it.

00:29:09.460 --> 00:29:11.280
I never want to trust it.

00:29:11.370 --> 00:29:14.760
The problem, though,
with that API is that

00:29:14.770 --> 00:29:16.060
it was only advisory.

00:29:16.160 --> 00:29:20.520
It was unsecured, so it didn't require a
password to change that.

00:29:20.590 --> 00:29:25.920
And so typically,
the calls that are made when you're

00:29:25.920 --> 00:29:30.000
using certificates in the system
end up calling sec-trust-evaluate.

00:29:30.120 --> 00:29:34.130
And sec-trust-evaluate did not
take that setting into account

00:29:34.550 --> 00:29:36.440
because it was unsecured.

00:29:36.480 --> 00:29:39.780
Now, there are certain applications
on the system that went

00:29:39.780 --> 00:29:40.600
ahead and looked at that.

00:29:40.700 --> 00:29:44.460
And used it as a supplemental preference.

00:29:44.590 --> 00:29:47.080
For example,
I think VPN client is an example

00:29:47.080 --> 00:29:49.380
of an application that did that.

00:29:49.380 --> 00:29:51.730
Safari is an application
that did not do that.

00:29:51.920 --> 00:29:54.270
So you probably noticed
that even though you said,

00:29:54.270 --> 00:29:57.370
always trust this,
you keep getting dialogues in Safari.

00:29:57.550 --> 00:30:00.320
Well,
that's changed with set-trust-settings.

00:30:00.350 --> 00:30:03.810
Because set-trust-settings is a
secured preference and requires

00:30:03.810 --> 00:30:06.850
authentication to change,
sec-trust-evaluate now

00:30:06.960 --> 00:30:08.530
takes that into account.

00:30:08.750 --> 00:30:09.960
And we'll show a demo in a minute.

00:30:09.960 --> 00:30:12.750
That lets you see how that works.

00:30:13.090 --> 00:30:18.580
If you're still calling set-user-trust,
the old API, it's now just a shim.

00:30:18.580 --> 00:30:20.290
And it's calling through to the new API.

00:30:20.330 --> 00:30:25.160
So you'll automatically get the
behavior of the new API on Leopard.

00:30:27.800 --> 00:30:29.360
And finally,
when we're talking about trust settings,

00:30:29.360 --> 00:30:34.440
you can spend a lot of time setting up
a machine just the way you like it with,

00:30:34.660 --> 00:30:37.520
you know, I trust these,
and I don't trust these,

00:30:37.520 --> 00:30:40.500
and I want to trust this for signing,
and I don't want to trust

00:30:40.500 --> 00:30:41.770
it for anything else.

00:30:43.260 --> 00:30:45.320
You know, once you've gone to all that
work and set up a machine,

00:30:45.320 --> 00:30:48.790
you want a way of replicating that,
and there is an API that will

00:30:48.790 --> 00:30:52.850
take a particular domain,
for example, all my user trust settings,

00:30:52.850 --> 00:30:56.460
and put them into a blob,
a nice CFDataRef that I can take

00:30:56.460 --> 00:31:00.920
to another system and replicate
those trust settings elsewhere.

00:31:01.340 --> 00:31:04.830
Now, of course, like the other APIs,
this requires authentication,

00:31:04.830 --> 00:31:08.490
because you wouldn't want just anyone
going along and doing that to you.

00:31:10.020 --> 00:31:12.240
The converse of this, of course,
is import external data.

00:31:12.770 --> 00:31:15.350
You can import your own data,
and then you can import your

00:31:15.350 --> 00:31:17.970
own data into a specific domain,
and then have your trust

00:31:17.970 --> 00:31:19.240
settings set up again.

00:31:19.920 --> 00:31:23.230
So with that,
let me show you a quick demo of this.

00:31:29.050 --> 00:31:32.090
Okay, so the first thing I'll
do is fire up Safari.

00:31:32.200 --> 00:31:35.560
And because the network
was acting up on me,

00:31:35.560 --> 00:31:40.740
I decided to set up my own web
server here on my local machine.

00:31:40.740 --> 00:31:42.350
So I've got Apache running.

00:31:42.360 --> 00:31:44.930
This is just a standard kind of,
you know,

00:31:44.990 --> 00:31:47.680
SSL requiring Apache installation here.

00:31:47.680 --> 00:31:49.730
I'm running it on local host.

00:31:49.770 --> 00:31:50.960
So I'll go there.

00:31:52.170 --> 00:31:56.720
And the first thing I see is a
dialogue that you have all seen before.

00:31:56.760 --> 00:32:00.460
It can't verify the identity of
this website that I'm going to.

00:32:00.460 --> 00:32:02.300
Well, why not?

00:32:02.420 --> 00:32:03.430
We can inspect that.

00:32:03.430 --> 00:32:07.480
And in fact, you know,
I just set up my own root

00:32:07.480 --> 00:32:10.850
cert here on this machine,
and the system doesn't trust it,

00:32:10.900 --> 00:32:12.140
and nor should it.

00:32:12.200 --> 00:32:15.270
And I issued myself a cert to local host.

00:32:18.440 --> 00:32:21.180
On Tiger, and previously,
if you didn't want to

00:32:21.270 --> 00:32:24.140
see this dialogue again,
there was only one way to go.

00:32:24.470 --> 00:32:27.800
You had to take the root certificate.

00:32:28.100 --> 00:32:31.950
test CA or whatever your
company's root certificate was,

00:32:31.950 --> 00:32:36.300
and you had to import that into
X.509 Anchors as an administrator.

00:32:36.300 --> 00:32:38.380
So if you weren't an admin user,
you had to get the admin

00:32:38.380 --> 00:32:40.880
to do this for you.

00:32:40.880 --> 00:32:42.940
But with trust settings, you

00:32:43.420 --> 00:32:47.960
I can decide to only trust that
particular certificate that was issued.

00:32:47.960 --> 00:32:49.540
I don't want to trust TestCA.

00:32:49.540 --> 00:32:52.550
I don't know what other things
it might issue in the future.

00:32:52.560 --> 00:32:58.110
In fact, there was a few well-publicized
cases this year of CAs that had

00:32:58.110 --> 00:33:01.120
issued certificates to phishers.

00:33:01.140 --> 00:33:06.030
And they'd issued them to some name
that was just a few characters off of,

00:33:06.030 --> 00:33:08.040
say, a banking site name.

00:33:08.460 --> 00:33:12.520
And these all were perfectly
legitimate certificates,

00:33:12.550 --> 00:33:16.050
and the system trusted them because
they were issued by a trusted route.

00:33:16.080 --> 00:33:21.680
So I don't necessarily know what else
TestCA is going to issue in the future.

00:33:21.680 --> 00:33:23.040
So I don't want to trust it right now.

00:33:23.040 --> 00:33:26.890
I just want to go to this particular
web page and be done with it.

00:33:26.990 --> 00:33:29.080
So I can continue.

00:33:31.020 --> 00:33:33.020
And remember, authentication is
required to change this,

00:33:33.020 --> 00:33:35.340
but this time around,
I don't have to be an

00:33:35.340 --> 00:33:36.520
admin user to change this.

00:33:36.520 --> 00:33:40.100
I just get asked for my
local account password,

00:33:40.270 --> 00:33:42.640
my password, to make changes here.

00:33:42.650 --> 00:33:44.780
So I'll enter it.

00:33:47.600 --> 00:33:50.620
And I'm into the site,
and I can see the little icon up here

00:33:50.900 --> 00:33:55.090
that shows me I've made a SSL connection,
and that particular

00:33:55.090 --> 00:33:56.770
certificate is trusted.

00:33:57.760 --> 00:34:04.350
So the acid test, of course,
is what happens if I quit Safari here

00:34:04.390 --> 00:34:08.170
and twiddle my thumbs and then come
back later on and I fire it up again

00:34:08.470 --> 00:34:10.940
and I want to go to that same site?

00:34:11.650 --> 00:34:14.970
So let's go there.

00:34:15.120 --> 00:34:18.360
And it just goes there because
the cert is already trusted.

00:34:18.410 --> 00:34:20.920
Now,
if I were to log in as a different user,

00:34:20.970 --> 00:34:24.030
that would be a different story
because only this user has

00:34:24.070 --> 00:34:25.680
trusted that particular cert.

00:34:25.870 --> 00:34:29.390
And let's take a look at what
that actually did under the hood.

00:34:29.550 --> 00:34:32.230
Here is keychain access.

00:34:32.370 --> 00:34:37.090
And I see in here that I have
that certificate that I just

00:34:37.150 --> 00:34:38.970
trusted in my keychain.

00:34:39.200 --> 00:34:40.170
I can look at the details.

00:34:40.280 --> 00:34:44.490
But what I really want to show
you is the trust settings.

00:34:44.770 --> 00:34:48.410
This is the same API that's been in
Tiger and you're probably familiar with.

00:34:48.450 --> 00:34:49.840
It's not the final API.

00:34:49.840 --> 00:34:51.320
We're still working on this.

00:34:51.380 --> 00:34:57.260
None of the UI changes have actually made
it into the developer seat at this point.

00:34:57.280 --> 00:35:01.250
But the real thing to note here
is the fact that I'm only trusting

00:35:02.000 --> 00:35:07.810
this for a particular policy,
SSL, and just general X.509 operations,

00:35:07.810 --> 00:35:11.090
but I'm not trusting
it for anything else.

00:35:11.180 --> 00:35:17.110
So the amount of granularity and control
I have is a lot finer than saying,

00:35:17.120 --> 00:35:21.190
oh, I trust the very root and
everything under it that it does.

00:35:23.040 --> 00:35:25.890
So while we're in Keychain Access,
let me look at some of

00:35:25.890 --> 00:35:26.960
my other keychains here.

00:35:26.960 --> 00:35:31.300
And over here on the left,
I have a category called My Certificates.

00:35:31.300 --> 00:35:34.590
Now, that's just showing
your digital identities,

00:35:34.590 --> 00:35:38.110
the things that are a
certificate plus a private key.

00:35:38.110 --> 00:35:43.190
Other interfaces call it
Your Certificates or Digital Identities,

00:35:43.190 --> 00:35:46.590
different terminology for the same thing.

00:35:46.600 --> 00:35:52.510
But I have one here issued to,
this is actually my .Mac cert for iChat.

00:35:52.550 --> 00:35:54.720
And I have a few others here.

00:35:54.720 --> 00:35:57.770
If I narrow it down,
I can see that I've got one

00:35:57.860 --> 00:36:01.170
issued to this identity,
which is security dev

00:36:01.170 --> 00:36:03.080
that I sometimes go by.

00:36:03.080 --> 00:36:07.360
And this identity, of course,
which I use at work, it's a test CA.

00:36:07.360 --> 00:36:11.010
So keep that in mind as I go back here.

00:36:11.010 --> 00:36:16.350
I've set up this web server up
here to also require SSL clans.

00:36:16.600 --> 00:36:20.540
And I can see that I've got
a lot of authentication when

00:36:20.540 --> 00:36:22.670
I go to a particular page.

00:36:22.670 --> 00:36:22.670
Now, when I do that,

00:36:23.750 --> 00:36:24.400
What happened here?

00:36:24.400 --> 00:36:25.860
Well, let's step back a minute.

00:36:25.860 --> 00:36:27.300
I clicked there.

00:36:27.300 --> 00:36:29.320
I requested that page
from the web server.

00:36:29.320 --> 00:36:33.320
The web server said, ah, to get here,
you need to authenticate.

00:36:33.320 --> 00:36:35.860
You need to send me a client identity.

00:36:35.860 --> 00:36:38.190
And what did Safari do?

00:36:38.200 --> 00:36:42.080
Well, it happily went ahead
and did that search.

00:36:42.080 --> 00:36:47.990
So it called secidentitysearchcreate and
did exactly what I just told you to do.

00:36:48.130 --> 00:36:50.360
But it stopped,
and it didn't look for any

00:36:50.360 --> 00:36:52.290
more other than the first one.

00:36:52.300 --> 00:36:54.300
So it's sending the wrong one.

00:36:54.300 --> 00:36:55.930
And we know this is a bug.

00:36:55.930 --> 00:36:57.620
We're working to fix it.

00:36:57.730 --> 00:36:59.870
But let's just say maybe it got it right.

00:36:59.870 --> 00:37:02.820
So I'm going to say, OK,
go ahead and try to use that.

00:37:02.870 --> 00:37:04.120
Well, it failed.

00:37:04.120 --> 00:37:08.900
And the reason it failed is because my
web server won't accept the .mac cert.

00:37:08.900 --> 00:37:10.960
It's set up to accept an Apple cert.

00:37:10.960 --> 00:37:17.040
So I get a panel here that shows
me the different identities that

00:37:17.050 --> 00:37:19.890
I have and lets me pick one.

00:37:19.890 --> 00:37:22.280
So I'm going to pick one that
I know will actually let me in.

00:37:22.300 --> 00:37:24.470
And I'll say continue.

00:37:24.470 --> 00:37:30.800
And now we see that Safari is actually
using that identity that I picked.

00:37:30.900 --> 00:37:32.930
And I can click there.

00:37:32.930 --> 00:37:37.240
And it lets me into the
secure area of the site.

00:37:37.250 --> 00:37:40.390
Well,
what did that do back in Keychain Access?

00:37:40.390 --> 00:37:41.690
Let's take a look.

00:37:41.700 --> 00:37:46.990
Now, in addition to that certificate,
I've got an identity preference item.

00:37:47.010 --> 00:37:51.360
And if you'll notice,
the identity preference maps to a URI.

00:37:51.520 --> 00:37:55.150
So that particular web page
that I went to is mapped to

00:37:55.150 --> 00:37:57.620
my identity for that web page,
Canva Cloud.

00:37:57.620 --> 00:38:02.710
And so I can use the APIs to look that
up and pick the right one in the future.

00:38:02.720 --> 00:38:07.000
So with that,
if we can go back to the slides here.

00:38:15.550 --> 00:38:17.640
I want to talk about
what you can actually do.

00:38:18.020 --> 00:38:20.420
That was obviously an
example of using identities.

00:38:20.530 --> 00:38:22.980
But there's some new stuff in
Leopard that's pretty exciting.

00:38:23.200 --> 00:38:25.950
And one of those things is the
ability to sign and encrypt

00:38:25.970 --> 00:38:27.560
messages with identities.

00:38:27.730 --> 00:38:31.340
We have a new call that can
do that in one function call,

00:38:31.400 --> 00:38:33.480
and that's called CMS Encode.

00:38:33.700 --> 00:38:36.070
CMS Encode,
you'll find that in the security

00:38:36.070 --> 00:38:40.010
framework in CMS Encoder,
is kind of a one-shot thing where you

00:38:40.010 --> 00:38:42.180
need to sign or encrypt something.

00:38:42.510 --> 00:38:43.840
You've already looked up your identity.

00:38:43.840 --> 00:38:44.800
You know how to do that.

00:38:44.830 --> 00:38:47.210
So you can pass that in as the signer.

00:38:47.210 --> 00:38:49.820
And you know how to find
other people's certificates.

00:38:49.820 --> 00:38:51.240
There's a preference thing.

00:38:51.240 --> 00:38:52.360
There's a lookup for that.

00:38:52.520 --> 00:38:56.240
If you have sex certificate references,
you pass those in for the people that

00:38:56.480 --> 00:38:58.540
are the recipients of this message.

00:38:58.540 --> 00:39:00.330
And it just works.

00:39:02.280 --> 00:39:04.000
The thing I just showed you, obviously,
was client-side

00:39:04.000 --> 00:39:06.040
authentication via TLS SSL.

00:39:06.040 --> 00:39:10.360
Under the covers, Safari, of course,
is using Secure Transport.

00:39:10.360 --> 00:39:14.080
And Secure Transport has an API call,
SSL Set Certificate,

00:39:14.080 --> 00:39:18.740
that actually takes the certificate
that it looked up using those identity

00:39:18.740 --> 00:39:23.980
APIs and sets it on the SSL connection,
and that's used as the client identity.

00:39:25.540 --> 00:39:27.540
Now, obviously, this isn't everything.

00:39:27.540 --> 00:39:31.230
You can get lower-level
access to the actual client.

00:39:31.750 --> 00:39:33.860
So,
you can call your key and certificate,

00:39:33.860 --> 00:39:36.670
given an identity,
by calling some of these accessors here

00:39:36.750 --> 00:39:38.570
that are in the Sec Identity header.

00:39:38.570 --> 00:39:40.860
Copy Certificate will
give you a certificate,

00:39:40.860 --> 00:39:44.180
and Copy Private Key will give you a
reference to the key that you can use

00:39:44.240 --> 00:39:46.520
in other cryptographic operations.

00:39:47.240 --> 00:39:51.960
So, both of those headers will provide
you the ability to go lower than

00:39:51.960 --> 00:39:53.960
that down to the CSSM layer.

00:39:53.960 --> 00:39:57.800
CSSM, of course, is part of CDSA,
all these acronyms,

00:39:57.800 --> 00:40:00.740
the Common Security Services Manager.

00:40:01.430 --> 00:40:05.080
a set of APIs there.

00:40:05.910 --> 00:40:07.260
We saw this dialogue before.

00:40:07.260 --> 00:40:12.470
This is the dialogue that Safari put up,
and it's called SF Choose Identity Panel.

00:40:12.480 --> 00:40:17.180
This is kind of the standard way of
choosing an identity on Mac OS X.

00:40:17.180 --> 00:40:20.540
It's perfectly available for
your applications to use.

00:40:20.560 --> 00:40:25.240
It's in security interface,
the framework there, and the header is

00:40:25.240 --> 00:40:27.620
sfchooseidentitypanel.h.

00:40:27.620 --> 00:40:31.550
This is either, in two flavors,
a modal dialogue or a sheet,

00:40:31.550 --> 00:40:33.370
depending on your needs.

00:40:34.200 --> 00:40:36.620
There's also a Carbon interface
available to this.

00:40:36.620 --> 00:40:38.140
It's kind of hidden away.

00:40:38.140 --> 00:40:42.260
It's down in the security HI framework,
and I don't believe it's

00:40:42.260 --> 00:40:43.400
included by default.

00:40:43.400 --> 00:40:45.740
You'd have to go in and
manually add the header.

00:40:45.740 --> 00:40:50.520
The Carbon interface lags
the Cocoa by a little bit.

00:40:50.520 --> 00:40:55.480
There's not as much granularity or
flexibility in terms of what you can set,

00:40:55.500 --> 00:40:59.400
but it is there,
and we're working on bringing that

00:40:59.400 --> 00:41:02.300
up to speed with the Cocoa version.

00:41:05.770 --> 00:41:08.200
If you don't have to
put up a modal dialog,

00:41:08.280 --> 00:41:09.580
that is always better.

00:41:09.820 --> 00:41:13.000
If you can use a pop-up menu
and give the user a list that

00:41:13.000 --> 00:41:16.610
they don't have to wait and stop
everything they're doing to pick it,

00:41:16.700 --> 00:41:18.470
but if they can kind
of pick it out of band,

00:41:18.470 --> 00:41:21.360
for example,
if you're composing a mail message,

00:41:21.490 --> 00:41:24.080
you may want to have a pop-up there.

00:41:24.300 --> 00:41:26.070
Not that there is one
in the developer seed,

00:41:26.170 --> 00:41:32.090
but that's just an example of, you know,
a better way of picking an identity.

00:41:32.300 --> 00:41:35.580
If there is a preferred identity,
and you know there is because you've

00:41:35.580 --> 00:41:40.180
called SecIdentityCopyPreference,
then you can set that as the default

00:41:40.180 --> 00:41:43.350
choice if you're presenting a list
of possible identities to the user.

00:41:45.360 --> 00:41:49.540
And of course,
another big scenario here is you need to

00:41:49.540 --> 00:41:51.140
ask trust questions from time to time.

00:41:51.140 --> 00:41:55.390
This is the same panel that Safari put up
when it couldn't verify my certificate.

00:41:55.420 --> 00:41:57.050
What do I do now?

00:41:57.060 --> 00:42:02.000
And this is the standard what
do I do now dialog in OS X.

00:42:02.000 --> 00:42:03.670
Obviously, Safari uses it.

00:42:03.760 --> 00:42:05.100
It's used elsewhere in the system.

00:42:05.100 --> 00:42:08.480
And it's available for your apps to use,
too.

00:42:08.480 --> 00:42:10.120
It's in security interface.

00:42:10.120 --> 00:42:13.270
Again,
it's either a modal dialog or a sheet.

00:42:13.680 --> 00:42:17.680
And there is a Carbon interface
available in the same location.

00:42:20.200 --> 00:42:24.700
So the final thing I'm going to
talk about today is common crypto.

00:42:24.760 --> 00:42:27.940
And this was covered a little
bit in Conrad's session earlier,

00:42:27.960 --> 00:42:31.520
but I just want to touch on it briefly
in case you didn't get to that session.

00:42:31.590 --> 00:42:37.850
These are API functions for various
commonly used cryptographic utilities.

00:42:37.990 --> 00:42:40.400
What we discovered when we
were putting this together,

00:42:40.400 --> 00:42:45.150
and we did a code review of OS X,
I think in the Tiger time frame,

00:42:45.320 --> 00:42:49.750
is that a lot of different projects
had the same code everywhere.

00:42:49.760 --> 00:42:54.740
They had copies of the SHA-1 and the
MD5 hashing algorithms in their code.

00:42:54.740 --> 00:42:56.560
And this was littered everywhere.

00:42:56.740 --> 00:43:00.240
And we wanted to collect that all
into one place and have a nice,

00:43:00.250 --> 00:43:04.310
easy to use,
available set of APIs in a standard

00:43:04.310 --> 00:43:07.320
location for your apps to use as well.

00:43:07.440 --> 00:43:11.620
And that standard location is
user include common crypto.

00:43:11.850 --> 00:43:17.120
The implementation is in lib system,
so your applications automatically

00:43:17.120 --> 00:43:19.420
get it when they're built,
you just have to include

00:43:19.420 --> 00:43:21.560
the header files.

00:43:21.590 --> 00:43:24.120
In Tiger and later,
the digest algorithms are there.

00:43:24.120 --> 00:43:27.700
So for example,
I mentioned MD5 and SHA-1,

00:43:27.700 --> 00:43:32.020
and there's the various
other flavors of SHA,

00:43:32.020 --> 00:43:33.600
the secure hash algorithm.

00:43:33.650 --> 00:43:37.430
But in Leopard,
what's been added to that is the

00:43:37.890 --> 00:43:43.250
ability to have symmetric encryption
and also some HMAC algorithms there.

00:43:43.640 --> 00:43:47.970
So obviously, one thing that people like
to use is AES encryption,

00:43:47.970 --> 00:43:50.080
that's kind of the encryption standard.

00:43:50.080 --> 00:43:52.270
So that algorithm is available.

00:43:52.410 --> 00:43:56.290
And as we improve its performance,
if you're using that

00:43:56.290 --> 00:43:58.990
common crypto version,
you get the performance

00:43:58.990 --> 00:44:00.700
improvements as well on it.

00:44:00.800 --> 00:44:03.180
So for more information
on these functions,

00:44:03.180 --> 00:44:04.540
there are man pages.

00:44:04.590 --> 00:44:07.550
And they are listed there.

00:44:07.920 --> 00:44:13.000
Man-CC Crypto for the crypto functions,
Man-CC SHA for the digest functions,

00:44:13.000 --> 00:44:15.200
and MD5 for the MD5 digests.

00:44:17.900 --> 00:44:18.640
What did we talk about?

00:44:18.640 --> 00:44:19.940
What should we take away here?

00:44:19.940 --> 00:44:26.020
First of all, just remember,
a user can have more than one identity,

00:44:26.020 --> 00:44:27.460
and that's a key point.

00:44:27.510 --> 00:44:31.620
So your application should support
that and ask the user to choose

00:44:31.620 --> 00:44:33.980
if there's some kind of ambiguity.

00:44:33.980 --> 00:44:36.690
You have a way to look for
the preferred identity,

00:44:36.690 --> 00:44:38.520
the one that the user said to use.

00:44:38.520 --> 00:44:40.260
So there's APIs to do that.

00:44:40.290 --> 00:44:44.140
You have Certificate Assistant if
you want to be in the business of

00:44:44.140 --> 00:44:47.770
setting yourself up as a certificate
authority and issue certificates.

00:44:47.800 --> 00:44:50.240
certificates to your users?

00:44:50.720 --> 00:44:54.480
Then of course, the thing I said was
something not to forget.

00:44:54.700 --> 00:44:57.000
Don't rely on X.509 anchors anymore.

00:44:57.030 --> 00:45:01.570
It is not the source
of trust after Tiger.

00:45:02.080 --> 00:45:05.820
If you're needing to provide, you know,
if you need to do

00:45:05.820 --> 00:45:09.120
anything with identities,
the place to look is

00:45:09.120 --> 00:45:10.160
the security framework.

00:45:10.380 --> 00:45:13.820
That's got all of the API access
functionality in its headers.

00:45:13.820 --> 00:45:18.240
The security interface framework
is there for the UI portions.

00:45:18.240 --> 00:45:21.860
So all of that is there available
for your application to use.

00:45:21.860 --> 00:45:26.900
In addition to those panels I showed you,
also the certificate view itself is in

00:45:26.900 --> 00:45:31.440
there and public and available to display
the contents of a single certificate.

00:45:32.930 --> 00:45:36.790
So the last point, obviously,
is that if you need

00:45:36.800 --> 00:45:40.960
encryption algorithms,
there's no reason to roll your own.

00:45:40.960 --> 00:45:43.380
We have optimized versions.

00:45:43.380 --> 00:45:45.420
We have them there in Common Crypto.

00:45:45.420 --> 00:45:46.300
They're ready to use.

00:45:46.390 --> 00:45:50.910
So for more information on this stuff,

00:45:52.300 --> 00:45:55.460
The first place to go, obviously,
is the developer website.

00:45:55.460 --> 00:45:58.650
They have a security web page,
and there's links on there to all

00:45:58.650 --> 00:46:02.780
the documentation we have and various
other good sites and places to go.

00:46:02.780 --> 00:46:08.100
Get on the CDSA mailing list, the
Common Data Security Architecture mailing

00:46:08.100 --> 00:46:10.840
list,
if you are interested in this,

00:46:10.840 --> 00:46:14.290
because the data security team is
hanging out there and ready to help

00:46:14.290 --> 00:46:16.150
answer your questions if we can.

00:46:16.480 --> 00:46:20.790
The final place to look if you are
an organization and you want Apple to

00:46:20.790 --> 00:46:25.080
ship your root certificate that
you've created is the Apple Root

00:46:25.200 --> 00:46:30.030
Certificate Authority site,
and that's off of www.apple.com.

00:46:30.040 --> 00:46:33.800
You see the link there if you
need more information on that.

00:46:36.260 --> 00:46:40.580
And finally, for all things certificate,
you can contact Craig,

00:46:40.770 --> 00:46:45.600
the go-to guy for security
and various other things.