WEBVTT

00:00:10.660 --> 00:00:14.360
Welcome to WebKit's
Open Source Anniversary.

00:00:14.400 --> 00:00:15.350
I'm Geoff Garen.

00:00:15.360 --> 00:00:18.720
I'm an engineer on the
WebKit team at Apple.

00:00:24.830 --> 00:00:27.490
Thank you, Mom.

00:00:27.540 --> 00:00:30.400
I'm going to cover three topics today.

00:00:30.480 --> 00:00:32.320
One, the year in review.

00:00:32.410 --> 00:00:36.500
It's been 15 software updates
and one major OS release here at

00:00:36.500 --> 00:00:40.000
WWDC since we started developing
WebKit out in the open.

00:00:40.000 --> 00:00:43.890
And I think this is a really great
opportunity to take a step back

00:00:43.930 --> 00:00:48.220
and look at some of the things we
accomplished over the last year.

00:00:48.900 --> 00:00:50.990
Two, getting involved.

00:00:51.000 --> 00:00:56.450
Whether you're elite C++ hacksaw
who pones noobs for a living,

00:00:57.070 --> 00:01:01.240
or a web developer or a simple end user,
we have a very clear set of steps

00:01:01.240 --> 00:01:05.300
that you can take to get involved in
the project and the community very

00:01:05.300 --> 00:01:08.900
quickly and easily to suit your needs.

00:01:09.540 --> 00:01:11.160
Finally, three, where we're going.

00:01:11.360 --> 00:01:14.840
For many of you,
that's what you come to WWDC to learn.

00:01:14.910 --> 00:01:17.560
And so we'll try to tell you some of
the directions that we're trying to

00:01:17.560 --> 00:01:21.300
take the WebKit Open Source project in,
and some of the things

00:01:21.300 --> 00:01:23.320
we're trying to accomplish.

00:01:23.400 --> 00:01:26.350
So, let's get started with
the Year in Review.

00:01:29.700 --> 00:01:33.220
Like I said, a year ago is when we began
the WebKit Open Source project.

00:01:33.280 --> 00:01:36.690
And at that time,
this is what the WebKit development

00:01:36.730 --> 00:01:38.110
team looked like.

00:01:38.460 --> 00:01:41.560
A group of very talented
and dedicated engineers,

00:01:41.560 --> 00:01:43.980
but all in Cupertino, California.

00:01:44.070 --> 00:01:49.180
Today, the WebKit team looks like this.

00:01:49.180 --> 00:01:57.390
So you can see we have more dots.

00:02:01.630 --> 00:02:05.700
We've grown both in
number and in diversity,

00:02:05.730 --> 00:02:08.960
and that's had a very important
influence on the project,

00:02:09.080 --> 00:02:10.590
and I'll talk about that
more in just a minute.

00:02:12.750 --> 00:02:16.560
Now, throughout my presentation today,
it's important for you to bear in

00:02:16.560 --> 00:02:20.520
mind what I mean when I talk about
the things that we have accomplished.

00:02:20.590 --> 00:02:23.910
I'm not just talking about the things
that Apple developers have done,

00:02:23.910 --> 00:02:27.700
but rather all of the developers working
on the WebKit open source project.

00:02:27.770 --> 00:02:32.450
That includes developers here at Apple,
but also private volunteers who get

00:02:32.460 --> 00:02:36.260
involved because there are certain
bugs in WebKit that really bug them,

00:02:36.330 --> 00:02:38.760
or because they want to be a
part of a really interesting

00:02:38.890 --> 00:02:40.440
software development process.

00:02:40.540 --> 00:02:45.110
And it also includes employees
at other companies like Google,

00:02:45.110 --> 00:02:50.000
Backbase, Corellia Software, Nokia,
other companies that are interested

00:02:50.000 --> 00:02:53.520
also in making WebKit the best
web rendering engine that it

00:02:53.520 --> 00:02:55.780
can be for their own purposes.

00:02:55.850 --> 00:02:57.860
So I'll try to give specific
credit where it's due,

00:02:57.860 --> 00:03:00.500
but always bear in mind that the
things I talk about today are

00:03:00.500 --> 00:03:03.570
things that we've all done together.

00:03:05.560 --> 00:03:09.260
So let's talk in bare numbers about
some of the things that we've done

00:03:09.260 --> 00:03:11.270
over the year as the project has grown.

00:03:11.280 --> 00:03:14.070
And let's begin with bug reports.

00:03:14.500 --> 00:03:18.690
767 people contributed bug reports
to our open source bug reporting

00:03:18.690 --> 00:03:20.190
database over the last year.

00:03:20.410 --> 00:03:23.840
That's two new bug reporters per day.

00:03:24.730 --> 00:03:30.230
They contributed a
whopping 4,188 bug reports.

00:03:30.420 --> 00:03:35.050
And about 66% of those were
contributed by non-Apple employees.

00:03:35.110 --> 00:03:38.420
So you can see there's a lot of
activity in this public bug database,

00:03:38.420 --> 00:03:41.300
both by Apple employees
and by public contributors.

00:03:41.300 --> 00:03:46.270
Okay, so WebKit has bugs.

00:03:46.270 --> 00:03:47.300
That's good to know.

00:03:47.360 --> 00:03:50.200
Not great to know, but good to know.

00:03:50.200 --> 00:03:53.190
Let's see what we've
been doing about that.

00:03:54.300 --> 00:03:58.620
Over the last year,
78 people contributed code changes

00:03:58.620 --> 00:04:01.300
to the WebKit open source project.

00:04:01.300 --> 00:04:06.120
They contributed a
whopping 3,826 changes,

00:04:06.170 --> 00:04:09.300
which is more than 10 per day.

00:04:09.300 --> 00:04:14.300
And just over 20% of those changes
were by non-Apple employees.

00:04:14.300 --> 00:04:17.590
So really great activity there as well.

00:04:18.290 --> 00:04:22.500
Now, more important to me as a developer,
but not necessarily as flashy,

00:04:22.610 --> 00:04:24.120
are regression tests.

00:04:24.220 --> 00:04:26.580
Because no matter how
great our code is today,

00:04:26.680 --> 00:04:30.190
it's very important that we ensure
we don't make the same silly mistake

00:04:30.330 --> 00:04:33.300
tomorrow that we made yesterday.

00:04:33.380 --> 00:04:36.770
So at the beginning of the project,
we had 700 regression tests that we

00:04:36.830 --> 00:04:41.810
would run every time we made a code
change to search for regressions.

00:04:41.900 --> 00:04:45.590
Today, we have 7,000.

00:04:45.890 --> 00:04:49.660
So the SETI at Home project may be a
bit of an exaggeration of the power

00:04:49.660 --> 00:04:52.570
with which we search for regressions,
but it's important to bear in

00:04:52.570 --> 00:04:55.490
mind that in only one year,
we've grown by an order

00:04:55.490 --> 00:04:56.640
of magnitude there.

00:04:59.660 --> 00:05:03.550
Let me give you a few examples of some
of the higher level projects and features

00:05:03.850 --> 00:05:06.950
that all these changes have added up to.

00:05:07.610 --> 00:05:10.400
First, SVG, Scalable Vector Graphics.

00:05:10.540 --> 00:05:12.880
If you attended WebKit for
Web Content Developers,

00:05:12.880 --> 00:05:15.970
you know a lot about how this works,
but I'd like to cover the

00:05:15.970 --> 00:05:17.500
development side of things.

00:05:17.500 --> 00:05:22.360
SVG began, the engine itself began,
inside the KDE repository

00:05:22.360 --> 00:05:24.000
as a project there.

00:05:24.010 --> 00:05:26.990
Then,
WebKit open source developers integrated

00:05:26.990 --> 00:05:30.430
that engine into the WebKit rendering
and layout engine so that it could

00:05:30.430 --> 00:05:32.500
actually be a part of web pages.

00:05:32.500 --> 00:05:36.290
And that's what you see on
the leopard's seed today.

00:05:37.160 --> 00:05:40.900
XPath is a search querying language
for the Document Object Model,

00:05:40.900 --> 00:05:45.230
and there was a very similar
development process there.

00:05:45.350 --> 00:05:48.360
Improved right-to-left text.

00:05:49.600 --> 00:05:52.710
For us native English speakers,
this may not seem like such a big

00:05:52.710 --> 00:05:55.600
deal because we never notice it.

00:05:55.600 --> 00:05:58.350
However,
you may be surprised to learn that

00:05:58.440 --> 00:06:02.640
the most glowing review ever written
about a piece of Macintosh software

00:06:02.640 --> 00:06:05.270
was not written by Walt Mossberg.

00:06:06.400 --> 00:06:11.090
Rather, it was written by a
Middle Eastern Mac user group when

00:06:11.090 --> 00:06:15.350
they first tried a WebKit nightly build
and saw the incredible improvements

00:06:15.410 --> 00:06:16.680
made to right-to-left text.

00:06:16.680 --> 00:06:18.180
You should have seen this letter.

00:06:18.180 --> 00:06:20.440
They offered to send us flowers.

00:06:20.440 --> 00:06:21.840
I promise you they did.

00:06:21.840 --> 00:06:23.780
They invited us over to
their homes for dinner.

00:06:23.780 --> 00:06:25.310
They asked us if we were single.

00:06:25.310 --> 00:06:26.310
It was incredible.

00:06:31.430 --> 00:06:33.840
So there you have it, right to left text.

00:06:33.850 --> 00:06:37.430
And that's one of the great benefits
of having developers who use

00:06:37.460 --> 00:06:38.860
that kind of language every day.

00:06:38.920 --> 00:06:41.100
JavaScript getters and setters.

00:06:41.100 --> 00:06:43.340
This is a method for data abstraction.

00:06:43.400 --> 00:06:45.680
If you're building
libraries for JavaScript,

00:06:45.700 --> 00:06:46.910
it really helps with that.

00:06:46.940 --> 00:06:51.060
And finally, many, many CSS features.

00:06:51.060 --> 00:06:55.020
And I'm just going to breeze
through a few of them right now.

00:06:55.020 --> 00:06:57.560
They are media queries, HSL colors,
resize cursor, background size,

00:06:57.560 --> 00:07:00.490
background origin, border radius,
border image, overflow X and overflow Y.

00:07:07.800 --> 00:07:11.200
We've also added some developer features,
web developer features,

00:07:11.200 --> 00:07:16.880
and WebKit and Cocoa developer features
through the open source database.

00:07:17.220 --> 00:07:19.460
The Web Inspector,
which you may have seen earlier

00:07:19.460 --> 00:07:21.260
and hopefully you've tried it out.

00:07:21.410 --> 00:07:25.720
This enables you to see an
element in the web page from

00:07:25.720 --> 00:07:27.100
the perspective of the engine.

00:07:27.100 --> 00:07:29.920
So you can understand the
style that we've applied to it,

00:07:30.000 --> 00:07:33.750
the style that we applied and then
unapplied because it was overridden,

00:07:33.750 --> 00:07:37.440
the metrics of the element on the page,
JavaScript properties,

00:07:37.440 --> 00:07:40.100
custom properties that
you've set on the element,

00:07:40.430 --> 00:07:44.610
everything you need to know about how
the engine understands your web page.

00:07:45.810 --> 00:07:49.940
We've also added a JavaScript API that
you can use on the Leopard Seed.

00:07:50.070 --> 00:07:53.430
JavaScript Core is now a first
class framework on Mac OS X so that

00:07:53.440 --> 00:07:57.390
you can embed JavaScript in your
applications and script them using

00:07:57.390 --> 00:07:59.440
JavaScript just like we do in WebKit.

00:08:05.680 --> 00:08:09.370
and finally a JavaScript debugger
that we call Dracera.

00:08:09.470 --> 00:08:12.620
Now the Web Inspector and the
JavaScript debugger are a really

00:08:12.620 --> 00:08:15.590
compelling example of the kind
of synergy that can develop

00:08:15.770 --> 00:08:18.080
in an open source process.

00:08:18.080 --> 00:08:21.400
We have this guy on our team,
Tim Hatcher.

00:08:21.400 --> 00:08:21.400
He's right there.

00:08:23.820 --> 00:08:26.340
And he used to be a web developer,
so he has a very strong

00:08:26.340 --> 00:08:29.490
understanding of the kinds of tools
you need to get that job done.

00:08:29.500 --> 00:08:31.320
At the same time,
he has a great talent for

00:08:31.360 --> 00:08:33.510
user interface design,
which is one of the many

00:08:33.510 --> 00:08:35.760
reasons we hired him,
and you can see that here.

00:08:35.760 --> 00:08:40.560
But we tend to work him like a dog on a
little something I like to call leopard.

00:08:40.560 --> 00:08:46.300
And so he doesn't have as much time to
devote to these tools as he would like.

00:08:46.340 --> 00:08:48.970
He checked the tools into
the open source repository,

00:08:48.970 --> 00:08:51.590
and now a number of other
people are contributing fixes

00:08:51.590 --> 00:08:54.230
and enhancements to them,
and they're really coming along.

00:08:54.240 --> 00:08:56.460
They haven't yet shipped
as an Apple product,

00:08:56.460 --> 00:08:58.880
but they are available in
the open source repository,

00:08:58.900 --> 00:09:00.970
and they're really useful already.

00:09:00.980 --> 00:09:01.790
Really great stuff.

00:09:05.280 --> 00:09:09.790
Now, I want to give you a high level
understanding of why all of the

00:09:09.790 --> 00:09:13.470
contributions that you make are
so important and the influence

00:09:13.610 --> 00:09:15.820
that they have on Mac OS X.

00:09:15.820 --> 00:09:22.190
So in the spirit of Conan O'Brien's
"If They Made It," I've developed

00:09:22.190 --> 00:09:25.640
some artist's renderings of
what Mac OS X would look like

00:09:25.920 --> 00:09:28.580
without open source contributors.

00:09:28.590 --> 00:09:31.680
So here is Safari today,
and here is what Safari would look

00:09:31.720 --> 00:09:34.630
like without open source contributors.

00:09:35.270 --> 00:09:36.840
Not too good.

00:09:37.000 --> 00:09:39.340
Of course we know that not
only Safari uses WebKit,

00:09:39.420 --> 00:09:41.930
many applications throughout
the system use WebKit.

00:09:41.930 --> 00:09:44.430
And so here's Mail today.

00:09:44.430 --> 00:09:49.200
And here's what Mail would look like
without open source contributors.

00:09:49.200 --> 00:09:50.570
Dashboard.

00:09:50.570 --> 00:09:54.970
Dashboard without open
source contributors.

00:09:55.340 --> 00:10:03.190
And finally, here is Darren Adler,
manager of the Safari and WebKit team.

00:10:05.320 --> 00:10:11.440
And here is what Darren Adler would look
like without open source contributors.

00:10:13.830 --> 00:10:16.460
So we don't want that.

00:10:16.690 --> 00:10:19.560
It's important for you to understand
that the contributions you make,

00:10:19.670 --> 00:10:22.830
while they have a substantial
influence on Mac OS X,

00:10:22.970 --> 00:10:26.440
also have influence beyond Mac OS X.

00:10:26.480 --> 00:10:28.180
KDE is one example.

00:10:28.300 --> 00:10:31.560
KDE developers have recently
announced the Unity project,

00:10:31.620 --> 00:10:35.600
which will attempt to reunite all of
the work that we've been doing over the

00:10:35.600 --> 00:10:40.380
past few years on WebKit with KHTML,
the engine from which

00:10:40.390 --> 00:10:42.400
WebKit originally derived.

00:10:42.960 --> 00:10:44.560
Nokia is another example.

00:10:44.700 --> 00:10:49.500
Nokia's phones use WebKit as the
engine inside their web browser.

00:10:49.500 --> 00:10:53.250
And Nokia developers have been working
very hard to integrate the WebKit version

00:10:53.250 --> 00:10:59.100
that they use with the version that
we release and call Tip of Tree.

00:10:59.100 --> 00:11:02.170
So the statistics that I gave you earlier
about all the development work going

00:11:02.170 --> 00:11:06.310
into WebKit didn't even include the
incredible efforts by KDE developers

00:11:06.310 --> 00:11:08.180
and Nokia developers right now.

00:11:08.180 --> 00:11:12.020
And you can imagine how much
larger those numbers will be if we

00:11:12.280 --> 00:11:15.910
continue to move forward together
and merge our source trees.

00:11:18.650 --> 00:11:20.960
So that was the year in review.

00:11:21.000 --> 00:11:23.390
Now,
hopefully you're excited about WebKit and

00:11:23.540 --> 00:11:26.980
let me show you how you can get involved
in a way that's tailored to your needs.

00:11:29.730 --> 00:11:32.660
The main tool that you need
is our developer website,

00:11:32.760 --> 00:11:35.230
webkit.opendarwin.org.

00:11:35.310 --> 00:11:38.660
There you'll find instructions for
all of the things that I'm going to

00:11:38.660 --> 00:11:43.020
tell you about and demo for you today,
and also all of the URLs that

00:11:43.020 --> 00:11:46.940
you won't be able to write down
while I'm skipping through them.

00:11:47.790 --> 00:11:50.520
The most important tool is
our public source repository,

00:11:50.520 --> 00:11:53.790
our public Subversion repository,
where you can get the code

00:11:53.790 --> 00:11:55.040
and do what you like with it.

00:11:55.120 --> 00:11:56.760
This is a change from last year.

00:11:56.760 --> 00:12:00.490
Last year we were using CVS,
and this year, Subversion.

00:12:03.300 --> 00:12:06.070
We have a developer mailing list to
which you can address your questions

00:12:06.070 --> 00:12:09.240
to the field of WebKit developers
if you're working on a part of the

00:12:09.350 --> 00:12:12.410
project and you would like their input.

00:12:13.700 --> 00:12:34.900
[Transcript missing]

00:12:36.150 --> 00:12:39.740
Finally, we have a public bug database,
bugzilla.opendarwin.org,

00:12:39.920 --> 00:12:43.380
where you can contribute those
bugs that we like but do not

00:12:43.380 --> 00:12:46.330
love and track them in the open.

00:12:48.420 --> 00:12:51.840
An interesting bit of news here is
that we're going to move all of our

00:12:51.890 --> 00:12:55.210
tools into a new unified domain name,
WebKit.org,

00:12:55.220 --> 00:12:57.570
which should make things simpler
and clearer for everybody.

00:12:57.580 --> 00:13:01.090
The old domain names will
continue to forward to WebKit.org,

00:13:01.130 --> 00:13:03.800
so it's nothing that
you need to worry about.

00:13:03.800 --> 00:13:05.030
It will be a seamless transition.

00:13:05.040 --> 00:13:07.710
But soon,
you'll be able to use WebKit.org instead,

00:13:07.710 --> 00:13:10.470
which should make your lives easier,
and ours too.

00:13:13.340 --> 00:13:16.490
We have some new tools this year that
I'm really excited about that we didn't

00:13:16.490 --> 00:13:18.000
have at last year's presentation.

00:13:18.000 --> 00:13:20.700
And I don't really know how we
ever did development without them,

00:13:20.790 --> 00:13:21.380
frankly.

00:13:21.380 --> 00:13:25.420
First,
Nightly Builds at nightly.webkit.org.

00:13:25.440 --> 00:13:29.020
There you can download a bundle
with a pre-built package of the

00:13:29.090 --> 00:13:31.350
latest and greatest in WebKit.

00:13:31.360 --> 00:13:35.290
If you double-click the bundle,
it will launch your system

00:13:35.290 --> 00:13:37.440
Safari using the newest WebKit.

00:13:37.440 --> 00:13:40.510
So you can test out your website
and see what it will look like

00:13:40.510 --> 00:13:42.250
on the next version of Mac OS X.

00:13:43.330 --> 00:13:46.090
Or you can just see what's been
happening in our development process

00:13:46.100 --> 00:13:48.820
and test out some of the new stuff
that wasn't available before,

00:13:48.820 --> 00:13:49.900
like SVG.

00:13:49.900 --> 00:13:52.980
An important thing to understand
about the Nightly Builds is that

00:13:52.980 --> 00:13:54.880
they're entirely self-contained.

00:13:54.880 --> 00:13:58.030
You download the bundle,
you launch Safari with it,

00:13:58.050 --> 00:14:01.620
and then when you're done,
you quit Safari, throw the bundle away,

00:14:01.620 --> 00:14:03.640
and your system is totally unaffected.

00:14:03.640 --> 00:14:07.670
So it's a very risk-free way to try
out the latest and greatest in WebKit.

00:14:09.350 --> 00:14:12.060
Another thing you can use the nightlies
for is tracking down a regression.

00:14:12.060 --> 00:14:15.930
You can check out a window of time,
say a month worth of nightly builds,

00:14:15.930 --> 00:14:18.400
and figure out where a portion
of your website or something that

00:14:18.400 --> 00:14:19.990
you're working on started to break.

00:14:22.390 --> 00:14:25.400
We also have a build bot
at build.webkit.org that

00:14:25.400 --> 00:14:28.480
routinely checks out the code,
runs all of our regression tests,

00:14:28.600 --> 00:14:30.110
and lets us know if
something's gone wrong.

00:14:30.120 --> 00:14:33.240
The build bot is a great way to
get started in the project if you

00:14:33.240 --> 00:14:36.870
haven't done coding in WebKit before,
because routinely there will be

00:14:36.870 --> 00:14:40.120
someone who forgets to run the
test before making a code change,

00:14:40.120 --> 00:14:41.660
and so the bot will be red,
and it will say that

00:14:41.670 --> 00:14:42.630
something has broken.

00:14:42.640 --> 00:14:45.880
If you go back in time,
you can look at exactly what code

00:14:45.970 --> 00:14:49.840
change caused something to fail,
and a very small regression

00:14:49.840 --> 00:14:53.670
test that has started to fail,
and try to work back exactly why

00:14:53.670 --> 00:14:57.320
that piece of code affected this
test and what has gone wrong.

00:14:59.680 --> 00:15:03.830
Finally, we have online change
tracking at track.webkit.org,

00:15:03.830 --> 00:15:08.160
which is basically a web interface
to our Subversion repository.

00:15:08.180 --> 00:15:11.330
It allows you to do a lot of powerful
browsing of the source and of the

00:15:11.430 --> 00:15:15.380
history of the source without having
to check out your own repository.

00:15:15.590 --> 00:15:18.860
Now all of these tools I've mentioned
here were actually contributed by

00:15:18.860 --> 00:15:21.320
someone who is not an Apple employee.

00:15:21.350 --> 00:15:24.390
And so they're another example
of how you can get involved in

00:15:24.390 --> 00:15:27.840
the project and the community,
even if you're not actually

00:15:27.840 --> 00:15:28.780
hacking on the engine.

00:15:28.780 --> 00:15:31.550
These are, you know,
Perl and Python and all kinds of

00:15:31.690 --> 00:15:35.340
stuff that I would never touch,
but you might, and that would be great.

00:15:38.430 --> 00:15:41.240
So I mentioned that it really is
easy to download and build the code.

00:15:41.260 --> 00:15:44.400
And in the spirit of reading Rainbow,
don't just take my word for it.

00:15:44.410 --> 00:15:46.440
Kevin Decker is going to demo it for you.

00:15:46.470 --> 00:15:49.320
You may remember that last year,
Kevin was tasked with proving that it's

00:15:49.350 --> 00:15:54.520
easy to use WebKit by building a web
browser with WebKit in under 60 seconds.

00:15:54.580 --> 00:15:57.790
So this year, continuing the tradition,
Kevin will prove that it's easy to

00:15:57.790 --> 00:16:02.760
download and build the WebKit source
by doing so using only his mouse.

00:16:02.790 --> 00:16:05.360
Kevin.

00:16:06.080 --> 00:16:07.070
Thanks, Geoff.

00:16:11.050 --> 00:16:15.840
So, I can only use my mouse.

00:16:15.840 --> 00:16:19.240
So I'm going to open Safari and
we're going to go to webkit.open.org,

00:16:19.240 --> 00:16:20.030
which is here.

00:16:20.270 --> 00:16:22.300
And the first step to
actually getting the code,

00:16:22.300 --> 00:16:26.080
believe it or not,
is clicking on getting the code.

00:16:26.080 --> 00:16:27.440
So I'll click getting the code.

00:16:27.480 --> 00:16:28.780
And there's three steps here.

00:16:28.910 --> 00:16:32.000
Now these three steps,
the first step is to install Subversion.

00:16:32.000 --> 00:16:35.460
And if you have Leopard right now,
you already have Subversion.

00:16:35.460 --> 00:16:38.420
If you have Tiger and don't
have Subversion installed,

00:16:38.420 --> 00:16:39.600
you need to install Subversion.

00:16:39.660 --> 00:16:42.640
But this machine has Subversion,
so I'm going to skip that step.

00:16:42.700 --> 00:16:46.830
Next step is to open Terminal,
which I'll do here.

00:16:47.230 --> 00:16:48.380
Cool?

00:16:48.380 --> 00:16:51.860
And lastly, I'm going to copy this
command right here,

00:16:51.860 --> 00:16:56.180
svncheckout, because I can't type.

00:16:56.490 --> 00:16:58.970
And I'm going to paste
this into terminal.

00:17:00.900 --> 00:17:01.650
Okay, cool.

00:17:01.980 --> 00:17:04.460
I'll hide this Safari window here.

00:17:04.460 --> 00:17:07.050
So everything is being
checked out right now,

00:17:07.050 --> 00:17:11.660
not just the engine and its sources,
but all the scripts and all the tests.

00:17:11.660 --> 00:17:14.200
I mean, it's kind of like those
cable TV premium packages.

00:17:14.270 --> 00:17:15.980
It's like you're getting everything.

00:17:15.980 --> 00:17:19.580
And it doesn't just say fast
because it's going by fast.

00:17:19.580 --> 00:17:22.380
These are actually all the layout tests.

00:17:25.810 --> 00:17:26.800
Nice.

00:17:26.800 --> 00:17:30.500
Thank you.

00:17:30.500 --> 00:17:32.420
So that, by the way,
has nothing to do with

00:17:32.420 --> 00:17:34.120
checking out the sources.

00:17:34.120 --> 00:17:36.020
So that's okay.

00:17:36.020 --> 00:17:40.400
So these are checking out, but you know,
you guys saw Time Machine,

00:17:40.400 --> 00:17:42.610
and that was all about
going back in time.

00:17:42.610 --> 00:17:45.250
But as exciting as it is to
watch these tests check out,

00:17:45.250 --> 00:17:49.080
I really don't want to sit up here on
stage while I'm being hammered on IRC.

00:17:49.080 --> 00:17:53.470
So we're going to actually,
through the magic of WWC and TV,

00:17:53.470 --> 00:17:55.780
we're going to fast forward through time.

00:17:55.800 --> 00:17:57.800
And look at this.

00:17:57.800 --> 00:17:59.750
We're done checking out.

00:17:59.820 --> 00:18:03.870
So we've checked out the code.

00:18:05.230 --> 00:18:06.440
So now we've checked out the code.

00:18:06.440 --> 00:18:08.620
It'd be cool if we
actually built the code.

00:18:08.640 --> 00:18:10.700
So we'll go back.

00:18:11.620 --> 00:18:15.240
And I'll just click on Building WebKit.

00:18:15.460 --> 00:18:16.640
And there's two ways you can build.

00:18:16.670 --> 00:18:19.280
You can build with
debug and without debug.

00:18:19.320 --> 00:18:20.930
And let me explain what this means.

00:18:21.020 --> 00:18:24.250
If you build with debug,
debug means you're going to be slower

00:18:24.310 --> 00:18:25.540
and you're going to crash more.

00:18:25.590 --> 00:18:27.780
And you may say to yourself, self,
why would I want to

00:18:27.840 --> 00:18:30.160
crash more and be slower?

00:18:30.320 --> 00:18:33.460
Well, the answer is crashing in this
case is good because these

00:18:33.530 --> 00:18:35.640
actually compile with assertions.

00:18:35.760 --> 00:18:39.970
And assertions catch problems that may
have no obvious or visible symptom.

00:18:40.110 --> 00:18:43.260
And so when that happens,
that's good because we can

00:18:43.330 --> 00:18:44.930
prevent major problems.

00:18:45.130 --> 00:18:48.300
So in fact, if you ever wonder if you
hit one of these assertions,

00:18:48.300 --> 00:18:50.720
if you look at the crash
report and look at the address,

00:18:50.720 --> 00:18:52.440
it will say 0xBadBeef.

00:18:52.600 --> 00:18:54.240
You will know you've hit an assertion.

00:18:54.260 --> 00:18:56.220
In this case,
I actually wanted to build a debug

00:18:56.220 --> 00:18:59.400
version because a little bit later,
we're going to be doing some debugging.

00:18:59.420 --> 00:19:02.100
So I'm going to choose debug.

00:19:02.120 --> 00:19:04.590
So I'll just paste this in here.

00:19:06.050 --> 00:19:13.570
And now we're going to build
a debug version of WebKit.

00:19:14.670 --> 00:19:16.950
This computer is all fast and all,
but still,

00:19:16.950 --> 00:19:19.180
it's not as fast as those cooking shows.

00:19:19.180 --> 00:19:20.700
But is it?

00:19:20.700 --> 00:19:24.380
So again,
through the magic of TV and WWDC,

00:19:24.380 --> 00:19:29.240
we're going to fast forward
and be done with this.

00:19:29.240 --> 00:19:31.800
Check that out.

00:19:31.840 --> 00:19:33.920
Latest Intel processors.

00:19:34.910 --> 00:19:38.270
So now we have this built, let's run it.

00:19:38.410 --> 00:19:40.700
And so I'll go back to Safari.

00:19:40.740 --> 00:19:43.080
I promise you,
I have not used the keyboard.

00:19:43.200 --> 00:19:44.780
And I'll click on Building WebKit.

00:19:44.830 --> 00:19:46.740
And there's a script right here.

00:19:46.810 --> 00:19:50.860
Normally you would keep this in the dock,
but in this case I'm going to copy it.

00:19:50.920 --> 00:19:52.300
Paste this guy.

00:19:52.340 --> 00:19:55.760
I'm going to also quit Safari too,
just so you can see the difference.

00:19:55.810 --> 00:19:57.400
Paste.

00:19:57.400 --> 00:19:58.560
And now this is running.

00:19:58.560 --> 00:20:03.630
And so we're now running with your
Safari and /Applications Safari app with

00:20:03.630 --> 00:20:07.880
the latest and greatest bits from WebKit.

00:20:07.910 --> 00:20:11.900
And that's just how -- if I can do
this with one hand with my mouse,

00:20:11.900 --> 00:20:15.110
imagine what you can do with two hands.

00:20:15.160 --> 00:20:16.140
That's it.

00:20:17.980 --> 00:20:20.140
Thanks, Geoff.

00:20:23.270 --> 00:20:25.600
You're welcome.

00:20:25.600 --> 00:20:28.160
Slides, please.

00:20:28.180 --> 00:20:32.170
So let's talk about what you'll find
when you download the WebKit source.

00:20:32.400 --> 00:20:35.160
I'm going to cover the major folders
that are of importance to you.

00:20:35.200 --> 00:20:38.500
There are some that I'm leaving out,
not really that important,

00:20:38.500 --> 00:20:40.980
and you probably won't
have to deal with them.

00:20:41.010 --> 00:20:44.320
JavaScript Core is the
JavaScript Core framework on Leopard.

00:20:44.320 --> 00:20:47.020
It's where we store the
JavaScript engine and a little bit of

00:20:47.120 --> 00:20:50.820
the WebKit Cocoa WebScript Object API.

00:20:50.950 --> 00:20:53.780
Now you may be wondering why we
have something as high level as a

00:20:53.850 --> 00:20:58.420
Cocoa API with something as low level
as the bits of the JavaScript engine.

00:20:58.460 --> 00:21:00.890
And I'll let you in on a little secret.

00:21:02.030 --> 00:21:05.400
We wonder that too sometimes.

00:21:05.500 --> 00:21:08.300
One of the projects that you can get
involved with if you're a Cocoa developer

00:21:08.300 --> 00:21:13.800
is moving that code up into WebKit with
the rest of the API where it belongs.

00:21:14.020 --> 00:21:16.660
Layout tests is where you'll
find all of our regression tests.

00:21:16.780 --> 00:21:21.450
It's named layout tests because we
created it in the halcyon days of old

00:21:21.460 --> 00:21:25.140
where the only regressions that we needed
to test for were actual layout problems.

00:21:25.140 --> 00:21:29.950
Now in the Web 2.0, AJAX, DHTML world,
many web pages are entirely

00:21:29.950 --> 00:21:34.430
generated by JavaScript and so our
regression tests are a little more

00:21:34.440 --> 00:21:36.810
complicated from time to time.

00:21:37.120 --> 00:21:40.780
WebCore is where you'll
find the meat of our engine.

00:21:40.780 --> 00:21:43.540
There you'll find the document engine,
the rendering engine,

00:21:43.540 --> 00:21:45.260
and the platform layer.

00:21:45.280 --> 00:21:48.130
Since this is the meat of everything,
I'm going to go into more

00:21:48.150 --> 00:21:50.090
detail here in just a minute.

00:21:50.480 --> 00:21:53.570
WebKit is where you'll find
the Cocoa WebKit API and a

00:21:53.640 --> 00:21:54.560
little bit of the loader.

00:21:54.560 --> 00:21:57.170
Once again,
we sometimes wonder what the loader

00:21:57.170 --> 00:21:58.940
is doing mixed in with the WebKit API.

00:21:58.940 --> 00:22:02.650
And you can help us move that code
down into WebCore with the rest

00:22:02.650 --> 00:22:04.600
of the engine where it belongs.

00:22:06.320 --> 00:22:08.750
WebKit site is our website,
which is also open source,

00:22:08.820 --> 00:22:10.820
webkit.opendarwin.org.

00:22:10.820 --> 00:22:13.230
And earlier this year,
we had an open source contributor

00:22:13.230 --> 00:22:14.840
revamp the site with a facelift.

00:22:14.870 --> 00:22:16.200
It looks a lot better now, as you saw.

00:22:16.200 --> 00:22:19.330
So that's yet another way you can
become involved in the community,

00:22:19.330 --> 00:22:21.940
even if you're not necessarily
hacking on the code.

00:22:23.450 --> 00:22:26.900
WebKit Tools is where you'll find useful
scripts in your development process.

00:22:26.900 --> 00:22:29.300
Build WebKit is the tool
that Kevin just used.

00:22:29.440 --> 00:22:31.740
Run WebKit tests will run
all of the regression tests.

00:22:31.740 --> 00:22:34.240
There are some other interesting
ones in there as well.

00:22:36.480 --> 00:22:39.070
So I promised I would go into
more detail about the WebCore

00:22:39.100 --> 00:22:41.000
Engine and let's do that now.

00:22:41.050 --> 00:22:44.780
I'd like to give you a pictorial
overview of the different

00:22:44.920 --> 00:22:46.890
components inside the Engine.

00:22:47.690 --> 00:22:51.520
DOM is the Document Object Model,
which is the heart of the WebCore engine.

00:22:51.690 --> 00:22:54.560
There you'll find all of the
basic operations on a document

00:22:54.620 --> 00:22:57.040
as defined by the W3C standard.

00:22:57.120 --> 00:22:59.980
So the idea of what a node is,
what an element is,

00:22:59.980 --> 00:23:04.470
how to iterate through nodes,
all of that is inside DOM.

00:23:04.570 --> 00:23:07.720
Building on top of DOM and
extending it are XML,

00:23:07.720 --> 00:23:11.450
HTML, and SVG, which are themselves
Document Object Models,

00:23:11.570 --> 00:23:14.410
probably things you're
already familiar with.

00:23:15.220 --> 00:23:18.220
Alongside that we have CSS,
Cascading Style Sheets,

00:23:18.220 --> 00:23:21.840
which defines all the styles in your
document and how they apply based on the

00:23:21.870 --> 00:23:25.610
structure of the document and certain
attributes of nodes inside the document.

00:23:27.540 --> 00:23:29.400
Underneath everything
is the platform layer,

00:23:29.400 --> 00:23:32.420
which we use for platform abstraction.

00:23:32.420 --> 00:23:35.720
For example, in the case of an image,
the platform layer would handle loading

00:23:35.870 --> 00:23:39.620
the image over the network or from disk
and decoding it and storing it in memory.

00:23:39.620 --> 00:23:44.080
Because it's platform independent,
we don't use something like NSImage

00:23:44.080 --> 00:23:48.260
because that wouldn't be useful
on platforms like KDE and Nokia.

00:23:50.200 --> 00:23:53.400
The Platform layer also contains
elements that you might not traditionally

00:23:53.400 --> 00:23:56.050
think of as platform abstraction,
like representing a point on

00:23:56.050 --> 00:23:57.190
the screen or a rectangle.

00:23:57.190 --> 00:24:01.040
There again we use our own data
structures rather than NSPoint or NSRect,

00:24:01.080 --> 00:24:02.990
for example.

00:24:03.790 --> 00:24:05.800
So there you have everything
we need in the Engine to

00:24:05.810 --> 00:24:08.010
represent a web page in memory.

00:24:08.130 --> 00:24:13.160
On top of these components,
we build two key software components.

00:24:13.280 --> 00:24:16.160
One, the rendering engine.

00:24:16.160 --> 00:24:19.250
The rendering engine will merge
the structure of the document

00:24:19.460 --> 00:24:22.750
with the style that applies
to it and lay everything out,

00:24:22.750 --> 00:24:25.620
determining position, width, height, etc.

00:24:25.740 --> 00:24:28.590
And finally,
paint everything to the screen.

00:24:28.900 --> 00:24:32.460
The second component we have
sitting on top of the document

00:24:32.570 --> 00:24:34.140
are the language bindings.

00:24:34.230 --> 00:24:37.060
Currently we support
JavaScript and Objective-C.

00:24:37.160 --> 00:24:40.440
Web developers will be familiar
with the JavaScript bindings,

00:24:40.640 --> 00:24:43.880
which is the way you
script a page on the web.

00:24:43.880 --> 00:24:46.500
And WebKit developers will be familiar
with the Objective-C bindings,

00:24:46.500 --> 00:24:50.920
which is the way you access
the document through Cocoa.

00:24:50.920 --> 00:24:55.230
There are three key things that I want
you to understand about this model.

00:24:55.530 --> 00:24:58.560
One, the language bindings and
the rendering engine share

00:24:58.560 --> 00:25:00.400
the same underlying document.

00:25:00.400 --> 00:25:03.600
This is why, for example,
in the case of an input element,

00:25:03.600 --> 00:25:06.250
if you change the contents of
the element using JavaScript,

00:25:06.290 --> 00:25:08.210
you'll see that change on the screen.

00:25:08.220 --> 00:25:11.270
Similarly,
if the user types into the input element,

00:25:11.280 --> 00:25:15.760
changing its contents on the screen,
you'll see that change in JavaScript.

00:25:15.800 --> 00:25:18.760
This is not because JavaScript and
the rendering engine are

00:25:18.760 --> 00:25:21.540
talking to each other,
as much as it is because they

00:25:21.540 --> 00:25:23.580
share the same underlying data.

00:25:23.580 --> 00:25:28.230
And so if one changes that data,
the other sees the change.

00:25:28.690 --> 00:25:33.070
The second thing you need to understand
is that the language bindings are

00:25:33.110 --> 00:25:35.590
distinct from the underlying document.

00:25:35.600 --> 00:25:38.070
So if you reference the
document in JavaScript,

00:25:38.150 --> 00:25:42.810
say you use the document variable,
we'll create a JavaScript object with

00:25:42.810 --> 00:25:44.600
a reference to the underlying document.

00:25:44.610 --> 00:25:48.120
But the two objects are distinct and the
JavaScript object will simply forward

00:25:48.120 --> 00:25:53.170
requests for properties and functions
to the underlying document object model.

00:25:53.940 --> 00:25:59.640
Finally, you need to understand that the
JavaScript binding layer in WebCore

00:25:59.970 --> 00:26:03.900
is distinct from the JavaScript engine
that lives in JavaScript Core.

00:26:03.900 --> 00:26:06.990
We'll receive bug reports
that say things like,

00:26:06.990 --> 00:26:09.890
"You know, I tried to use attach
event from JavaScript.

00:26:09.920 --> 00:26:11.880
It didn't work in Safari,
so there's a bug in your

00:26:11.890 --> 00:26:14.800
JavaScript engine." And you know what,
maybe you should try using

00:26:14.800 --> 00:26:18.280
SpiderMonkey instead,
which will fix all of your compatibility

00:26:18.280 --> 00:26:22.690
problems and also make really
cute puppies rain from the sky.

00:26:23.890 --> 00:26:26.100
Now, this is a misunderstanding.

00:26:26.190 --> 00:26:28.520
First of all,
cute puppies don't rain from the sky,

00:26:28.520 --> 00:26:31.340
they grow on trees.

00:26:31.800 --> 00:26:35.480
Secondly,
whether WebKit supports AttachEvent

00:26:35.480 --> 00:26:39.520
has as little to do with the
JavaScript engine as it has to

00:26:39.520 --> 00:26:41.520
do with the Objective-C runtime.

00:26:41.520 --> 00:26:44.940
The key question is whether the
Document Object Model provides

00:26:44.950 --> 00:26:46.860
an interface for AttachEvent.

00:26:46.860 --> 00:26:50.000
So the JavaScript engine knows
how to ask WebCore for AttachEvent

00:26:50.000 --> 00:26:52.610
when you use it in your web page,
but if WebCore doesn't

00:26:52.610 --> 00:26:55.600
support that interface,
the engine throws an exception,

00:26:55.600 --> 00:26:57.200
as it should.

00:26:58.420 --> 00:27:01.880
So let me give you a specific example of
an image element on a web page and how

00:27:01.880 --> 00:27:04.700
it maps to the structure I've described.

00:27:04.850 --> 00:27:08.370
Inside the Document Object Model,
you would have the image element itself.

00:27:08.560 --> 00:27:10.900
Here we have a picture of a cat.

00:27:11.210 --> 00:27:14.950
In CSS, I can style that element,
and I've given it a 10 pixel

00:27:14.950 --> 00:27:18.910
border because in preparation
for WWDC and making up my slides,

00:27:18.920 --> 00:27:21.910
I've learned that borders
make everything prettier.

00:27:23.140 --> 00:27:26.700
In the platform layer,
we would handle loading kitty.jpg

00:27:26.700 --> 00:27:30.340
from disk or over the network,
decoding that JPEG image,

00:27:30.380 --> 00:27:32.690
and storing it away in memory.

00:27:33.780 --> 00:27:36.770
Inside the rendering engine,
we would merge the document with

00:27:36.780 --> 00:27:39.300
the style that's been applied to it,
give the cat a border,

00:27:39.300 --> 00:27:40.200
and paint it to the screen.

00:27:40.200 --> 00:27:44.180
And finally,
in the bindings layers is where

00:27:44.390 --> 00:27:48.260
we would create objects when you
reference the document from the

00:27:48.420 --> 00:27:50.180
programming language of your choice.

00:27:50.180 --> 00:27:52.510
In JavaScript,
the familiar get element by ID,

00:27:52.510 --> 00:27:55.240
and in Objective-C,
the structure is very similar.

00:27:57.980 --> 00:27:59.550
So here's the overview again.

00:27:59.700 --> 00:28:02.380
Let me show you where each of these
parts of the engine live on disk

00:28:02.890 --> 00:28:08.260
and in our Xcode projects which
map to the disk file structure.

00:28:10.740 --> 00:28:14.420
The DOM is stored in the
DOM folder inside WebCorp.

00:28:14.430 --> 00:28:20.840
XML, HTML, and SVG are in XML, HTML,
and KSVG2, which is a little divergent.

00:28:20.840 --> 00:28:22.130
We should probably just call it SVG.

00:28:22.140 --> 00:28:24.720
But we've kept the name to keep
the name that they use inside

00:28:24.790 --> 00:28:27.650
KDE for source compatibility.

00:28:28.020 --> 00:28:40.720
CSS is in CSS.

00:28:40.720 --> 00:28:41.190
Platform in platform.

00:28:41.190 --> 00:28:41.990
You're probably noticing a pattern here.

00:28:42.090 --> 00:28:42.550
Rendering in rendering.

00:28:42.560 --> 00:28:43.610
And finally,
the language bindings are in bindings.

00:28:43.610 --> 00:28:44.990
Bindings.js for JavaScript and
bindings.objc for Objective-C.

00:28:44.990 --> 00:28:46.150
So we really do try hard to make
this mapping of where things are

00:28:46.150 --> 00:28:47.190
and what they do very clear to you,
because that way it's

00:28:47.190 --> 00:28:48.630
clear to us as well,
and we all have to work in this code.

00:28:50.670 --> 00:28:52.910
So I'm going to invite Kevin to
the stage again to show you all

00:28:52.910 --> 00:28:55.630
these different parts of the
engine with a very simple web page.

00:28:55.770 --> 00:28:59.260
And this time, he gets to use both the
keyboard and the mouse.

00:28:59.290 --> 00:29:00.770
Kevin.

00:29:04.830 --> 00:29:06.790
Thank you.

00:29:06.930 --> 00:29:08.700
Okay.

00:29:08.700 --> 00:29:11.990
So the reason why we want to show
this to you is because if you've

00:29:12.000 --> 00:29:14.710
never worked on a web browser before,
you know, you may think it's this,

00:29:14.710 --> 00:29:17.060
you know, it works in mysterious ways.

00:29:17.060 --> 00:29:18.600
Sometimes we do too.

00:29:18.600 --> 00:29:23.460
But no, really, things happen in a very
methodical and logical process.

00:29:23.460 --> 00:29:26.550
And it helps when you're first
starting to get familiar,

00:29:26.550 --> 00:29:27.640
to learn the code.

00:29:27.640 --> 00:29:29.560
It helps to see how things work.

00:29:29.560 --> 00:29:32.400
And I kind of want to show you that now.

00:29:32.400 --> 00:29:34.780
So I'm going to show you how to do that.

00:29:34.990 --> 00:29:37.310
Lots of stuff are in the debugger.

00:29:38.390 --> 00:29:42.590
Running our built WebKit.

00:29:42.590 --> 00:29:45.060
So I'll click on Debug here.

00:29:45.150 --> 00:29:46.800
This is the project.

00:29:46.800 --> 00:29:49.110
Make this a little easier to see.

00:29:51.290 --> 00:29:55.350
Running our built WebKit.

00:29:55.500 --> 00:29:58.000
So I'll click on Debug here.

00:29:58.000 --> 00:29:59.540
This is the project.

00:29:59.770 --> 00:30:02.010
Make this a little easier to see.

00:30:06.650 --> 00:30:10.830
So here's the WebKit site,
but I want to show you this page.

00:30:10.920 --> 00:30:12.190
This is Geoff-- this is not my cat.

00:30:12.230 --> 00:30:14.920
This is Geoff's pet cat.

00:30:15.190 --> 00:30:19.080
And it's cute and all,
but this is a very simple web page.

00:30:19.080 --> 00:30:20.600
It has an image and it has some text.

00:30:20.700 --> 00:30:23.100
And of course,
there's more complicated web pages,

00:30:23.210 --> 00:30:25.290
but this is going to
illustrate the point nicely.

00:30:25.580 --> 00:30:28.160
I'm going to show you what
the source looks like.

00:30:29.000 --> 00:30:29.780
You should be able to see that.

00:30:29.940 --> 00:30:30.600
Cool.

00:30:30.600 --> 00:30:33.600
And so you have an image tag,
there's some rendering that goes on,

00:30:33.600 --> 00:30:35.960
and then there's JavaScript.

00:30:36.090 --> 00:30:40.000
And so what I want to do is I want to,
since I've never done this before,

00:30:40.140 --> 00:30:42.910
I want to step through,
I want to set breakpoints

00:30:43.320 --> 00:30:44.940
on key parts of the engine.

00:30:45.060 --> 00:30:46.950
In this case,
it looks like we have an image.

00:30:47.080 --> 00:30:51.960
So let's look in the code and
let's see what images look like.

00:30:51.960 --> 00:30:55.300
Let me close this guy out of the way.

00:30:55.710 --> 00:30:57.640
So I'm just going to
type in the word image.

00:30:57.710 --> 00:30:59.210
You get a whole bunch of stuff.

00:30:59.510 --> 00:31:03.400
But in particular,
when you go back to this page right here,

00:31:03.400 --> 00:31:04.800
we have an image tag.

00:31:04.940 --> 00:31:08.560
So I'm probably going to
want an HTML image element.

00:31:08.660 --> 00:31:11.280
So I'm going to set a
breakpoint on its constructor,

00:31:11.430 --> 00:31:13.200
HTML image element.

00:31:13.200 --> 00:31:13.910
And you know what?

00:31:14.060 --> 00:31:15.580
Here's actually two constructors.

00:31:15.770 --> 00:31:18.320
And I don't know which
one's going to get called,

00:31:18.390 --> 00:31:19.220
but that's OK.

00:31:19.420 --> 00:31:21.180
One of them will.

00:31:21.250 --> 00:31:24.010
And we'll just see what happens.

00:31:24.460 --> 00:31:26.960
And I also want to set,
Geoff talked about rendering,

00:31:26.960 --> 00:31:29.260
so I click on rendering.

00:31:29.260 --> 00:31:31.830
And here's,
instead of seeing a whole list of image,

00:31:31.890 --> 00:31:35.500
of things that relate to images,
here's renderImage.cpp.

00:31:35.500 --> 00:31:39.430
So this is the renderer for images.

00:31:39.600 --> 00:31:43.500
So I'll click on render and I'll
set a breakpoint on its constructor.

00:31:43.500 --> 00:31:48.830
And lastly, in binding,
jsHTMLImageElement.

00:31:48.940 --> 00:31:53.510
And what this is,
is when you set a breakpoint on this,

00:31:53.520 --> 00:31:56.780
on its constructor,
when you reference an object,

00:31:56.780 --> 00:31:59.720
when you reference anything
in HTML from JavaScript,

00:31:59.780 --> 00:32:01.390
that creates this binding.

00:32:01.390 --> 00:32:03.000
In this case, we have an image element.

00:32:03.000 --> 00:32:05.620
But the same, it's called js and then
the name of the element.

00:32:05.620 --> 00:32:07.510
But if we were dealing
with an embed or an object,

00:32:07.530 --> 00:32:09.020
you would see the same thing there.

00:32:09.600 --> 00:32:12.080
So I set a breakpoint on that.

00:32:12.080 --> 00:32:13.840
And now I want to go
back to my page here.

00:32:13.840 --> 00:32:16.780
I think this is the old Safari.

00:32:18.000 --> 00:32:20.390
And now I'll refresh.

00:32:20.490 --> 00:32:23.080
And now it looks like we
caught this in the debugger.

00:32:23.080 --> 00:32:26.890
So what's really important to look at
when you're first learning how to do this

00:32:26.890 --> 00:32:28.960
stuff is look at the sequence of events.

00:32:29.030 --> 00:32:30.770
Look at this backtrace right here.

00:32:30.780 --> 00:32:36.500
You can see the sequence of events on
how we get from an image tag in HTML,

00:32:36.500 --> 00:32:40.640
you know, from just a separate --
from a page to an image,

00:32:40.640 --> 00:32:43.060
how an image element is created.

00:32:43.150 --> 00:32:44.720
And so that's the first step.

00:32:44.720 --> 00:32:48.120
Now we attach a renderer to that.

00:32:48.120 --> 00:32:51.330
So as Geoff said, now that you've created
that image element,

00:32:51.420 --> 00:32:53.820
the renderer needs to know about that
because ultimately somebody is going

00:32:53.820 --> 00:32:55.500
to have to paint those bits on screen.

00:32:55.500 --> 00:32:59.000
And that's going to be the renderer,
renderer side.

00:32:59.000 --> 00:33:03.680
And finally we have JS --
this is the binding.

00:33:03.680 --> 00:33:07.340
So we hit these -- that's
the sequence of events.

00:33:07.340 --> 00:33:08.970
And I could go back in here.

00:33:09.060 --> 00:33:10.890
And then there's Geoff's -- okay.

00:33:12.550 --> 00:33:14.500
I actually want to have
some fun with this.

00:33:14.660 --> 00:33:21.200
So I'm going to take this cat and
I want to go back to this page.

00:33:21.360 --> 00:33:24.580
And you can see where we said
kitty.source equals kitty.jpg.

00:33:24.870 --> 00:33:26.920
And often when you're
working on the engine,

00:33:26.920 --> 00:33:30.000
it helps just to set
variables to something else,

00:33:30.000 --> 00:33:31.750
change a value and see what happens.

00:33:31.780 --> 00:33:35.260
It's a very helpful step in
not only learning the code,

00:33:35.330 --> 00:33:37.320
but also debugging problems.

00:33:37.490 --> 00:33:41.280
So I have an image element,
and I'm setting its source attribute.

00:33:41.330 --> 00:33:45.680
So I'll look back in HTML image element.

00:33:46.870 --> 00:33:48.240
Right here.

00:33:48.270 --> 00:33:52.240
And I'm going to look for a set source,
which should be right here.

00:33:52.240 --> 00:33:54.280
Set source.

00:33:54.910 --> 00:33:57.500
And I'm going to set a
break point on this now.

00:33:57.530 --> 00:34:00.680
And I'll go back, refresh this guy.

00:34:02.470 --> 00:34:05.620
So here is the actual
HTML image element constructor.

00:34:05.670 --> 00:34:08.220
Now it's being attached to a renderer.

00:34:08.220 --> 00:34:10.530
Here's where we reference
it from JavaScript.

00:34:10.580 --> 00:34:11.700
So far, so good.

00:34:11.700 --> 00:34:14.520
And now we've just caught the set source.

00:34:14.520 --> 00:34:18.170
So in the code that we just saw,
that's where we say

00:34:18.170 --> 00:34:21.420
kitty.source equals kitty.jpg.

00:34:21.420 --> 00:34:23.880
But let's change this to another kitty.

00:34:23.880 --> 00:34:27.780
So I'm going to open up the console here.

00:34:27.780 --> 00:34:30.240
And the first thing I'm going
to do is make this bigger so

00:34:30.290 --> 00:34:32.020
everyone can see what I'm typing.

00:34:32.050 --> 00:34:33.030
That should be pretty good.

00:34:33.120 --> 00:34:34.030
So this is a concept.

00:34:34.040 --> 00:34:37.060
So I'm just going to say,
first I'm going to print

00:34:37.060 --> 00:34:39.710
the existing value,
print value.ascii.

00:34:39.960 --> 00:34:43.180
And now I can see it's kitty.jpg.

00:34:43.210 --> 00:34:45.120
So I'm going to change
this to another cat.

00:34:45.210 --> 00:34:53.460
So I'm going to say setValue
= string UglyKitty.jpg.

00:34:54.880 --> 00:34:56.850
Oh, it's ugly.

00:34:56.910 --> 00:35:02.600
And now, just so you can see,
I'll print value now and

00:35:02.600 --> 00:35:04.180
we'll see what it looks like.

00:35:04.180 --> 00:35:06.760
So you can indeed see now
the value has changed.

00:35:06.800 --> 00:35:10.220
So we've directly manipulated
the contents of memory here.

00:35:10.240 --> 00:35:12.100
So I'll click continue.

00:35:12.100 --> 00:35:17.000
And my friends,
this is Geoff's cat without open source.

00:35:17.690 --> 00:35:21.790
So that's just, you know,
this is a simple example.

00:35:22.230 --> 00:35:24.100
Okay, I gotta get this off screen.

00:35:24.100 --> 00:35:28.090
This is a...

00:35:30.720 --> 00:35:34.340
This is a simple example,
but it illustrates how valuable it

00:35:34.340 --> 00:35:38.820
is if you just want to dive right in
to set breakpoints on constructors

00:35:38.890 --> 00:35:43.220
and just look at the sequence events,
look at backtraces, see how things tick.

00:35:43.230 --> 00:35:47.800
And it's quite easy and fun
to actually hack on WebKit.

00:35:47.900 --> 00:35:49.890
So back to you, Geoff.

00:35:56.900 --> 00:36:00.620
It's not my cat.

00:36:00.620 --> 00:36:04.130
OK, so here's the file system
we were looking at before.

00:36:04.220 --> 00:36:06.750
Kevin took the stage.

00:36:06.750 --> 00:36:10.680
And what he showed you inside
the document object model was

00:36:10.680 --> 00:36:12.610
HTML image element dot CPP.

00:36:12.630 --> 00:36:14.000
So that's in the HTML folder.

00:36:14.000 --> 00:36:19.820
The JavaScript wrapper and bindings
JS was JS HTML image element dot CPP.

00:36:19.910 --> 00:36:22.340
And as he mentioned,
we follow this pattern often.

00:36:22.340 --> 00:36:25.140
So for an embed element,
you'd have HTML embed element

00:36:25.140 --> 00:36:26.660
and JS HTML embed element.

00:36:26.760 --> 00:36:29.110
The H1 that you saw,
the heading element that

00:36:29.120 --> 00:36:31.900
you saw on the Web page,
that's HTML heading element,

00:36:31.900 --> 00:36:34.080
JS HTML heading element, et cetera.

00:36:34.200 --> 00:36:39.000
And finally, in the rendering layer,
we showed you render image dot CPP.

00:36:39.180 --> 00:36:42.750
You'll notice that we didn't
touch the Objective C bindings,

00:36:42.780 --> 00:36:46.860
SVG, XML, the platform layer,
but they follow a very similar structure.

00:36:46.860 --> 00:36:49.210
And you can try that out on
your own if you want to download

00:36:49.210 --> 00:36:51.420
and build WebKit over lunch,
set some breakpoints,

00:36:51.420 --> 00:36:52.370
see how things work.

00:36:52.410 --> 00:36:54.490
We have a lab later
today that I'll show you.

00:36:54.490 --> 00:36:57.160
And you can come to the lab and
ask us questions about things

00:36:57.160 --> 00:36:58.750
that didn't make sense to you.

00:36:58.810 --> 00:37:02.660
So that's getting involved.

00:37:02.670 --> 00:37:06.080
Now let's talk about the
about where we're going.

00:37:08.110 --> 00:37:12.720
First, we're trying to develop a new look
for the WebKit open source project.

00:37:12.820 --> 00:37:15.160
Historically,
WebKit has been tied to Safari,

00:37:15.190 --> 00:37:19.500
but even if that strong
tie was once appropriate,

00:37:19.500 --> 00:37:20.940
it really isn't anymore.

00:37:20.940 --> 00:37:23.950
First of all,
many different applications use WebKit,

00:37:23.950 --> 00:37:25.020
not just Safari.

00:37:25.020 --> 00:37:27.280
Some of the applications I showed you,
Dashboard and Mail,

00:37:27.330 --> 00:37:28.940
but many others as well.

00:37:28.940 --> 00:37:32.760
iWeb, Aperture uses WebKit,
many applications.

00:37:33.020 --> 00:37:33.690
First, we're trying to develop a new look
for the WebKit open source project.

00:37:33.690 --> 00:37:34.100
Historically,
WebKit has been tied to Safari,

00:37:34.100 --> 00:37:34.520
but even if that strong
tie was once appropriate,

00:37:34.520 --> 00:37:34.760
it really isn't anymore.

00:37:35.460 --> 00:37:36.580
In addition,
WebKit is an open source project,

00:37:36.580 --> 00:37:37.470
and Safari is an Apple application.

00:37:37.470 --> 00:37:38.220
The tie isn't appropriate there.

00:37:38.330 --> 00:37:39.420
In addition,
WebKit is an open source project,

00:37:39.420 --> 00:37:40.730
and Safari is an Apple application.

00:37:42.350 --> 00:37:45.700
We really want to throw off some of
the old cruft and give WebKit its

00:37:45.700 --> 00:37:48.780
own image that conveys that it
is this open source project,

00:37:48.790 --> 00:37:51.650
that it's a system framework,
and that it's used in many

00:37:51.690 --> 00:37:54.940
other projects as well,
KDE and Nokia, for example.

00:37:56.280 --> 00:37:58.720
Let me tell you about a few of the
projects that we're trying to work

00:37:58.720 --> 00:38:01.830
on with WebKit over the next year.

00:38:02.530 --> 00:38:03.860
Compatibility and standards.

00:38:03.970 --> 00:38:06.820
WebKit is a web browsing engine,
so it's important that it's

00:38:06.820 --> 00:38:08.690
able to browse the web.

00:38:08.690 --> 00:38:12.370
And that means both support for ancient
websites that are written in funny ways

00:38:12.660 --> 00:38:16.940
and modern websites that are written
according to standards that try to

00:38:17.010 --> 00:38:21.480
close the divide between web browser
developers and web application developers

00:38:21.550 --> 00:38:25.980
by giving a clear definition of how the
web browser can be expected to behave.

00:38:26.740 --> 00:38:27.820
Performance.

00:38:27.820 --> 00:38:29.400
Once again,
because WebKit is used all the time

00:38:29.420 --> 00:38:31.480
by so many different applications,
it's really important

00:38:31.570 --> 00:38:32.280
for it to be snappy.

00:38:32.280 --> 00:38:35.170
And for similar reasons,
we're working on stability.

00:38:35.170 --> 00:38:37.360
It's important for WebKit not to crash.

00:38:39.940 --> 00:38:40.990
Developer Tools.

00:38:40.990 --> 00:38:45.180
Our belief here is that the more that we
work to support developers with WebKit,

00:38:45.180 --> 00:38:47.790
the more that they will
work to make sure that their

00:38:48.110 --> 00:38:49.750
websites behave well in WebKit.

00:38:51.870 --> 00:38:53.520
SVG, Scalable Vector Graphics.

00:38:53.520 --> 00:38:58.710
We've done a lot of work here and you can
see and view SVG documents inside WebKit,

00:38:58.720 --> 00:39:01.290
but there are a lot of parts
of the SVG specification that

00:39:01.290 --> 00:39:02.810
we have not yet implemented.

00:39:02.820 --> 00:39:06.790
Some interesting transformations
and scaling operations that we

00:39:06.790 --> 00:39:08.920
need to add to fully support SVG.

00:39:11.170 --> 00:39:13.430
IDL, this is an interesting one.

00:39:13.430 --> 00:39:17.100
IDL stands for Interface
Declaration Language.

00:39:17.100 --> 00:39:19.800
And the goal here,
as I showed you before,

00:39:19.800 --> 00:39:22.330
we have the document object
model and then a number of

00:39:22.330 --> 00:39:23.750
language bindings for it.

00:39:23.820 --> 00:39:26.400
And right now we write
all of that by hand.

00:39:26.400 --> 00:39:29.020
It would be really neat if we could,
in one file,

00:39:29.130 --> 00:39:32.690
describe the interface that the
document object makes available

00:39:32.690 --> 00:39:36.080
and then automatically generate
bindings to other languages

00:39:36.080 --> 00:39:38.260
like JavaScript and Objective-C.

00:39:38.760 --> 00:39:41.030
Currently,
we do that for most of JavaScript,

00:39:41.050 --> 00:39:41.800
but not all.

00:39:41.800 --> 00:39:44.040
And we don't do it at
all for Objective-C.

00:39:44.040 --> 00:39:47.900
And we'd like to work to move everything
over to IDL so that we can add things

00:39:47.900 --> 00:39:52.600
to the document object model much more
easily and in a less error-prone fashion.

00:39:55.600 --> 00:39:58.520
So if you're interested in working
on some of these projects and

00:39:58.520 --> 00:40:00.920
you get involved and you're not
exactly sure what's going on,

00:40:00.920 --> 00:40:05.050
a quick thing that you can do is
ask for help on IRC and Kevin's

00:40:05.050 --> 00:40:09.670
going to show you how to do that.

00:40:12.900 --> 00:40:17.050
So the IRC program we use on
the Safari team is Colloquy,

00:40:17.250 --> 00:40:19.870
also written by that
guy right over there.

00:40:19.870 --> 00:40:19.870
Wave.

00:40:21.400 --> 00:40:22.980
You can use any IRC client.

00:40:22.980 --> 00:40:26.710
The IRC server is irc.freenode.net.

00:40:26.920 --> 00:40:28.780
And the channel, guess what?

00:40:28.860 --> 00:40:29.550
It's the channel WebKit.

00:40:29.620 --> 00:40:33.030
So I'm going to just connect on,
I should be connected to IRC,

00:40:33.050 --> 00:40:35.540
but I'm going to join the channel here.

00:40:39.190 --> 00:40:40.100
WebKit.

00:40:40.100 --> 00:40:44.290
And so here we are.

00:40:44.310 --> 00:40:45.320
We're on IRC right now.

00:40:45.320 --> 00:40:46.100
There's 77 people.

00:40:46.100 --> 00:40:53.110
Oh my God, you're right, we are.

00:40:57.700 --> 00:41:04.200
[Transcript missing]

00:41:05.130 --> 00:41:07.320
So, you know,
it's a little flavorful right now,

00:41:07.320 --> 00:41:08.930
but really, guys, it's a lot of fun.

00:41:08.940 --> 00:41:10.050
You never know what you're going to get.

00:41:10.380 --> 00:41:11.360
Thank God this is NDA.

00:41:13.900 --> 00:41:20.420
But you know, this guy Tim, uh...

00:41:21.300 --> 00:41:23.150
This guy Tim is right here.

00:41:23.450 --> 00:41:23.890
Hey Tim.

00:41:23.890 --> 00:41:26.980
Wait, this isn't the keynote.

00:41:28.850 --> 00:41:30.800
DRM is yours.

00:41:30.800 --> 00:41:37.840
So I'm going to say, Tim,
what is a good bug I can work

00:41:37.840 --> 00:41:41.270
on with the Web Inspector?

00:41:44.940 --> 00:41:47.490
And so, good question, let me see.

00:41:47.770 --> 00:41:50.140
Try searching Mozilla, yeah.

00:41:51.770 --> 00:41:53.790
So here's the bug I can work on.

00:41:53.830 --> 00:41:58.060
So IRC is really cool because
you can have very interesting

00:41:58.060 --> 00:42:00.920
conversations at all times,
night and day.

00:42:00.920 --> 00:42:02.960
I mean, people from all over
the world work on this.

00:42:02.960 --> 00:42:05.120
And our internet's a little slow.

00:42:05.120 --> 00:42:06.500
Well, here it came up.

00:42:06.590 --> 00:42:09.010
But if there's something
that you want to tackle,

00:42:09.010 --> 00:42:12.950
whether you want to work on a regression,
a reduction, or you want to fix a patch,

00:42:12.950 --> 00:42:15.840
or you just want to talk and meet
the people behind this stuff,

00:42:15.920 --> 00:42:18.620
they're really smart and
they're a lot of fun.

00:42:18.620 --> 00:42:20.700
I highly encourage you to get on IRC.

00:42:21.700 --> 00:42:26.180
And like I said, if you have questions,
don't spend hours noodling on it.

00:42:26.180 --> 00:42:26.880
Just ask.

00:42:26.880 --> 00:42:30.210
And chances are there's
someone who can help you out.

00:42:30.270 --> 00:42:33.560
So I'm afraid to look
back what's on IRC here.

00:42:38.100 --> 00:42:46.900
[Transcript missing]

00:42:57.410 --> 00:43:01.830
So, let me show you who can help
you when you get on IRC,

00:43:01.830 --> 00:43:03.250
depending on what you're working on.

00:43:03.280 --> 00:43:07.820
For everything,
there's always Darren and other maché.

00:43:07.820 --> 00:43:09.560
That's Darren Adler,
whose picture you've seen,

00:43:09.560 --> 00:43:11.480
and Maché Stachowiak.

00:43:11.570 --> 00:43:15.350
Those are the managers of the Safari and
WebKit team and the WebKit engine team.

00:43:15.360 --> 00:43:17.530
If you're working on
layout and rendering,

00:43:17.530 --> 00:43:19.410
the people to talk to you are Hyatt.

00:43:19.440 --> 00:43:20.760
That's Dave Hyatt.

00:43:20.760 --> 00:43:21.700
You may have heard of him.

00:43:21.700 --> 00:43:22.540
He's kind of famous.

00:43:23.620 --> 00:43:29.760
Death Bacon is Beth Dakin, and Mitts,
Mitts Petal,

00:43:29.760 --> 00:43:31.420
Dan Bernstein I talked about earlier.

00:43:31.420 --> 00:43:32.510
They can help you with that.

00:43:33.700 --> 00:43:36.780
For the DOM and JavaScript, there's me.

00:43:36.780 --> 00:43:38.100
I've always wanted my name in lights.

00:43:38.100 --> 00:43:40.720
Anders Ka is Anders Carlsen.

00:43:40.720 --> 00:43:43.600
And finally, AP,
I'm going to do my best here.

00:43:43.600 --> 00:43:45.650
Alexei, proshkur yarkov.

00:43:45.660 --> 00:43:48.090
Thank you.

00:43:53.000 --> 00:43:56.480
SVG, there's MacDome, Eric Seidel,
who is an Apple veteran.

00:43:56.480 --> 00:43:59.650
And also, the two other names there
are actually the original

00:43:59.650 --> 00:44:03.330
developers of the KDE SVG engine,
at least two of them.

00:44:03.330 --> 00:44:06.250
And they hang out in our channel a lot,
and so they can obviously help you with

00:44:06.310 --> 00:44:07.900
some of the internals of that engine.

00:44:09.290 --> 00:44:15.530
For form controls and editing,
we have Adele Peterson and Justin Garcia.

00:44:15.660 --> 00:44:19.280
Some of the tools I mentioned earlier,
Xenon is Tim Hatcher.

00:44:19.280 --> 00:44:22.070
He developed the original
Web Inspector and the

00:44:22.070 --> 00:44:22.950
JavaScript debugger.

00:44:22.960 --> 00:44:26.100
And some of those other tools,
the Nightly Builds, for example,

00:44:26.100 --> 00:44:27.960
that was B-Dash, who is Mark Rowe.

00:44:27.980 --> 00:44:31.790
Mark Rowe, by the way,
also registered the WebKit.org domain,

00:44:31.790 --> 00:44:33.520
which we did not register.

00:44:33.520 --> 00:44:37.080
And so he's been really kind
helping us out with that.

00:44:37.100 --> 00:44:40.110
And for Bugzilla,
questions about bugs and how to file bugs

00:44:40.110 --> 00:44:42.150
and what kind of information we need.

00:44:42.680 --> 00:44:46.980
Alice Liu, Altha, who's Altha?

00:44:47.080 --> 00:44:50.660
Sorry, Yustavok, and finally,
Dave Kilzer.

00:44:53.050 --> 00:44:55.980
For more information on this session,
you can contact Mark Malone, who is our

00:44:55.980 --> 00:44:58.750
Internet Technologies Evangelist.

00:45:00.360 --> 00:45:01.950
And we also have a lab later today.

00:45:01.960 --> 00:45:03.480
That's the WebKit and Safari lab.

00:45:03.540 --> 00:45:07.400
It's in Mac OS X Lab C at 3:30.

00:45:07.820 --> 00:45:10.660
So just to close up here,
three things to take away.

00:45:10.790 --> 00:45:12.580
One, we've accomplished a lot together.

00:45:12.580 --> 00:45:15.340
15 software updates,
one major OS release,

00:45:15.340 --> 00:45:18.780
hundreds of contributors,
thousands of bugs and bug fixes.

00:45:18.780 --> 00:45:21.600
It's been a great year and I hope
it's another great year this year.

00:45:23.890 --> 00:45:27.210
Two, it's easy to get involved if
you want to hack on the engine,

00:45:27.240 --> 00:45:29.530
if you're a web developer,
if you're just an end user and you

00:45:29.530 --> 00:45:32.820
want to try out the nightly builds,
we try to make it as easy as possible.

00:45:32.820 --> 00:45:35.450
Our website has instructions for
everything and many of the things

00:45:35.450 --> 00:45:38.510
you can do using only your mouse.

00:45:38.800 --> 00:45:41.590
Finally,
this is the session that doesn't end.

00:45:41.590 --> 00:45:43.080
If your question doesn't
get answered today,

00:45:43.080 --> 00:45:45.790
if you don't have time to check out
the source over lunch and you end up

00:45:45.790 --> 00:45:48.580
going home and working with it later,
we're always on IRC.

00:45:48.580 --> 00:45:50.450
It's a part of our workflow every day.

00:45:50.450 --> 00:45:52.270
And so we'd love to see you there.