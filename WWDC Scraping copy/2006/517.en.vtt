WEBVTT

00:00:11.350 --> 00:00:12.990
Welcome, everyone.

00:00:13.000 --> 00:00:15.520
As I said a couple years ago,
it's practically impossible to give a

00:00:15.520 --> 00:00:19.550
very dynamic and thrilling presentation
after the great Steve Heyman.

00:00:19.550 --> 00:00:21.240
Alas, here we are.

00:00:21.240 --> 00:00:23.090
My name is Mike Bombich.

00:00:23.200 --> 00:00:25.920
I am a systems engineer with Apple.

00:00:25.920 --> 00:00:27.710
I've been...

00:00:33.560 --> 00:00:35.600
I've been with Apple for four years.

00:00:35.730 --> 00:00:40.890
For those of you that don't know me,
I've got a sick obsession with

00:00:40.890 --> 00:00:43.590
Mac OS X deployment technologies.

00:00:43.590 --> 00:00:45.890
And one of those is, of course, NetBoot.

00:00:45.940 --> 00:00:49.160
And that's what we're
here to talk about today,

00:00:49.160 --> 00:00:52.500
especially in the context
of large networks.

00:00:54.340 --> 00:00:57.070
In a nutshell,
NetBoot is a collection of server

00:00:57.070 --> 00:01:02.460
services that allow a client machine
to discover and boot from a disk image

00:01:02.460 --> 00:01:04.420
that's kept on that Mac OS X Server.

00:01:04.420 --> 00:01:08.930
That's a really basic
overview of what NetBoot is.

00:01:08.940 --> 00:01:11.940
If you're not familiar with it,
I encourage you to take a look at

00:01:11.940 --> 00:01:16.070
the Mac OS X Server documentation,
the system image documentation at the

00:01:16.110 --> 00:01:18.640
Apple Server documentation website.

00:01:18.640 --> 00:01:21.890
I also encourage you to take a
look at the Boot PD man page.

00:01:22.030 --> 00:01:25.220
There's a lot of really good
technical detail about how NetBoot

00:01:25.220 --> 00:01:27.240
works on Mac OS X Server in there.

00:01:27.240 --> 00:01:31.350
The rest of this presentation, though,
is like drinking through a fire hose.

00:01:31.360 --> 00:01:36.910
So if you're not more familiar with that,
hang on to your seat.

00:01:39.680 --> 00:01:43.250
In order to get a really good
idea of how to leverage NetBoot

00:01:43.250 --> 00:01:46.490
technology on a large network,
it helps to have a really

00:01:46.500 --> 00:01:49.100
in-depth understanding of how
the NetBoot process works.

00:01:49.100 --> 00:01:52.710
Today I'm going to break down,
I'm going to talk about the server

00:01:52.710 --> 00:01:56.090
services that are involved with
NetBoot on Mac OS X Server and

00:01:56.170 --> 00:01:58.340
some of the NetBoot support files.

00:01:58.380 --> 00:02:02.180
I'm going to break down NetBoot
into four distinct stages based

00:02:02.180 --> 00:02:06.080
upon what you see when you're
sitting at a NetBooting client.

00:02:06.720 --> 00:02:11.870
I'm going to go into some really detail
on the BSDP exchange between a client

00:02:11.870 --> 00:02:13.840
and a server during the NetBoot process.

00:02:13.860 --> 00:02:17.590
And then I'll wrap up the last three
stages of the NetBoot process by talking

00:02:17.700 --> 00:02:21.800
about the role of those NetBoot support
files in the rest of the boot process.

00:02:23.690 --> 00:02:26.020
With that under your belt,
I'll hand it over to Joel Rennich

00:02:26.060 --> 00:02:29.930
with Apple and Gavin Cook of Genentech
to talk about how they've used

00:02:29.940 --> 00:02:33.000
NetBoot in real world scenarios.

00:02:33.000 --> 00:02:34.990
So with the intro done,
let's go ahead and dig in.

00:02:35.000 --> 00:02:37.030
This is going to be a lot of fun.

00:02:37.240 --> 00:02:41.200
Server admin can be a little
deceiving when it comes to

00:02:41.200 --> 00:02:42.420
enabling the NetBoot service.

00:02:42.420 --> 00:02:46.160
It's not actually just one service
that you're enabling when you

00:02:46.160 --> 00:02:48.090
click on that start service button.

00:02:48.090 --> 00:02:51.380
There are several different services
that are enabled in the background

00:02:51.380 --> 00:02:53.100
and configured on Mac OS X Server.

00:02:53.840 --> 00:02:58.690
For starters, the BootPS launch daemon is
initiated by LaunchD and loaded

00:02:58.690 --> 00:03:01.360
to listen for traffic on port 67.

00:03:01.360 --> 00:03:03.130
That's the BootP port.

00:03:03.190 --> 00:03:07.690
BootPD is the daemon that's launched
when traffic is received on this

00:03:07.770 --> 00:03:12.650
port to communicate with a client
that's issuing a DHCP or BSDP request.

00:03:12.940 --> 00:03:18.460
TFTP, or Trivial File Transfer Protocol,
is the protocol that's used by clients

00:03:18.520 --> 00:03:20.900
to download the NetBoot support files.

00:03:21.070 --> 00:03:25.900
NFS is used to mount
the NetBoot disk image.

00:03:25.900 --> 00:03:30.400
Some people choose to use HTTP in
networks where NFS is not a good choice.

00:03:30.510 --> 00:03:33.870
And finally,
in the case of diskless NetBoot,

00:03:33.870 --> 00:03:37.660
AFP is used to attach
that NetBoot shadow file.

00:03:39.180 --> 00:03:41.760
In order for a client to
boot from a NetBoot server,

00:03:41.880 --> 00:03:44.520
that client needs
basically a NetBoot set,

00:03:44.540 --> 00:03:49.160
which is just a folder of five files that
reside on your NetBoot NFS SharePoint.

00:03:49.160 --> 00:03:53.200
In that folder,
there's the nbimageinfo.plist.

00:03:53.250 --> 00:03:55.680
This is a NetBoot set configuration file.

00:03:55.680 --> 00:03:59.940
It contains details like a unique
identifier for that NetBoot set.

00:03:59.990 --> 00:04:03.680
It contains the name of the NetBoot set,
where various files within

00:04:03.680 --> 00:04:05.460
the NetBoot set are located.

00:04:05.460 --> 00:04:07.120
They can be on other servers,
for example.

00:04:07.860 --> 00:04:11.420
And then what architectures are
supported by that NetBoot set,

00:04:11.430 --> 00:04:14.090
and what hardware can
actually use that NetBoot set.

00:04:14.100 --> 00:04:15.840
There's a disk image file.

00:04:15.900 --> 00:04:20.060
This is just a disk image of a fully
configured Mac OS X installation

00:04:20.070 --> 00:04:24.550
for the case of standard NetBoot,
or a disk image of, for example,

00:04:24.550 --> 00:04:26.870
the Mac OS X installation DVD.

00:04:28.570 --> 00:04:29.860
There's a booter file.

00:04:29.860 --> 00:04:31.290
This is your secondary loader.

00:04:31.480 --> 00:04:35.700
This is just a bridge between the
firmware of the machine and the

00:04:35.700 --> 00:04:37.160
executed kernel of the machine.

00:04:37.160 --> 00:04:39.950
This kick starts the NetBoot process.

00:04:40.100 --> 00:04:42.280
Mach.macosx is your kernel file.

00:04:42.280 --> 00:04:45.460
This is what you would find
at mock_kernel at the root

00:04:45.460 --> 00:04:47.080
level of the file system.

00:04:47.360 --> 00:04:51.540
Mach.macosx.mkext is your
kernel extension cache.

00:04:51.540 --> 00:04:56.060
Basically, that's just a cache of drivers
that the client needs to be able

00:04:56.060 --> 00:05:01.050
to boot from a disk image that's
hosted on a network server.

00:05:01.460 --> 00:05:05.110
So these last three files are
responsible for the most primitive

00:05:05.110 --> 00:05:06.340
part of the boot process.

00:05:06.340 --> 00:05:09.560
They really communicate with
all the pieces of the hardware

00:05:09.560 --> 00:05:11.660
at the very lowest level.

00:05:11.660 --> 00:05:13.690
So it really should come as no
surprise that these last three

00:05:13.690 --> 00:05:14.990
files are architecture specific.

00:05:15.070 --> 00:05:20.390
You may have noticed that the 10.4.4
server admin update allows you to NetBoot

00:05:20.470 --> 00:05:23.680
Intel clients from your Mac OS X Server.

00:05:23.680 --> 00:05:27.400
And basically the way this works is
that the architecture specific files,

00:05:27.410 --> 00:05:30.390
if they're PowerPC,
they can either exist at the

00:05:30.400 --> 00:05:33.440
root level of your NetBoot set
or in a folder labeled PPC,

00:05:33.440 --> 00:05:36.960
or for the Intel architecture
specific files,

00:05:36.960 --> 00:05:40.640
they need to be located
in a folder called I386,

00:05:40.640 --> 00:05:42.030
as you can see in the screenshot here.

00:05:47.720 --> 00:05:51.670
When you NetBoot a client,
the first thing you see is a

00:05:51.670 --> 00:05:55.550
flashing globe that is replaced
with the Apple logo and the

00:05:55.550 --> 00:05:56.910
spinning globe beneath it.

00:05:57.160 --> 00:06:00.610
That spinning globe is eventually
replaced with a progress indicator

00:06:00.610 --> 00:06:02.640
that you would see on any typical boot.

00:06:02.820 --> 00:06:05.460
And eventually you see a blue
screen indicating that the

00:06:05.460 --> 00:06:06.840
Windows Server has loaded.

00:06:06.960 --> 00:06:11.980
And finally you see either a login
window or the installer interface.

00:06:12.760 --> 00:06:17.240
We can use these visual indicators
to actually break down the

00:06:17.510 --> 00:06:19.860
NetBoot process into four stages.

00:06:20.150 --> 00:06:21.600
First of all,
why would we want to do this?

00:06:21.600 --> 00:06:26.340
Well, NetBoot involves a whole slew of
communication protocols and different

00:06:26.340 --> 00:06:28.290
services hosted on different machines.

00:06:28.290 --> 00:06:31.890
Who here has had a NetBoot problem?

00:06:32.750 --> 00:06:34.490
Okay.

00:06:34.990 --> 00:06:38.080
More often than not,
it's actually your network.

00:06:38.080 --> 00:06:40.210
And I'll tell you why in a little bit.

00:06:40.230 --> 00:06:43.660
But by breaking down the NetBoot
process into four stages,

00:06:43.660 --> 00:06:47.360
using those visual indicators as cues,
we can really get a better

00:06:47.530 --> 00:06:48.930
grip on troubleshooting.

00:06:48.930 --> 00:06:51.290
For example,
if my machine is stuck at the

00:06:51.290 --> 00:06:54.650
blinking globe and it never proceeds,
I know that I'm in the

00:06:54.650 --> 00:06:57.120
DHCP and BSDP exchange,
and maybe there's a

00:06:57.120 --> 00:06:59.160
problem with that exchange.

00:06:59.170 --> 00:07:01.640
So I can use some specific
troubleshooting tools

00:07:01.770 --> 00:07:02.680
to dig into that issue.

00:07:02.700 --> 00:07:22.160
So I can use some specific
troubleshooting tools

00:07:22.540 --> 00:07:32.680
to dig into that issue.

00:07:32.700 --> 00:07:49.510
So I can use some specific
troubleshooting tools

00:07:49.510 --> 00:07:57.570
to dig into that issue.

00:08:02.090 --> 00:08:04.640
So the first stage of
the NetBoot process,

00:08:04.640 --> 00:08:08.890
the blinking globe, is initiated by,
first of all,

00:08:08.890 --> 00:08:13.200
the firmware determines that our
boot device is a NetBoot disk image.

00:08:13.220 --> 00:08:18.190
So the first thing that firmware
does is it sends out a DHCP discover.

00:08:18.890 --> 00:08:23.030
This initiates the
BSDP and DHCP exchange.

00:08:23.040 --> 00:08:26.140
This is actually the most important part,
the most important stage

00:08:26.140 --> 00:08:27.400
of the NetBoot process.

00:08:27.400 --> 00:08:30.290
This is where the client gets
all of its information about how

00:08:30.290 --> 00:08:32.040
to boot from our network server.

00:08:32.040 --> 00:08:34.990
This is also the stage
that most frequently fails,

00:08:35.110 --> 00:08:36.940
especially on a large network.

00:08:37.040 --> 00:08:41.050
You have to do some specific router
configuration to make this work,

00:08:41.120 --> 00:08:43.080
quote unquote, out of the box.

00:08:43.940 --> 00:08:46.830
So I want to go into a little
more detail in this particular

00:08:46.830 --> 00:08:48.340
part of the NetBoot stage.

00:08:48.340 --> 00:08:52.580
And actually,
I want to first give you a 30,000

00:08:52.580 --> 00:08:56.900
foot overview of what kind of
happens between the server and the

00:08:57.090 --> 00:09:00.120
client during this initial exchange.

00:09:00.160 --> 00:09:02.030
But I want to do it for
two different scenarios.

00:09:02.030 --> 00:09:05.240
In our first scenario,
the client has never NetBooted before.

00:09:05.240 --> 00:09:08.920
The client has never indicated a
preference for a specific NetBoot set.

00:09:08.960 --> 00:09:12.340
In the second scenario,
we do have a preference.

00:09:12.380 --> 00:09:13.250
Either the client has booted from
our network server or the client

00:09:13.330 --> 00:09:13.920
has booted from our network server.

00:09:13.940 --> 00:09:16.260
Either the client has booted from
that NetBoot server before or we've

00:09:16.260 --> 00:09:20.090
gone into the startup disk pref pane
and actually chosen a NetBoot set.

00:09:20.110 --> 00:09:23.010
The exchange between the client and
server is actually quite different

00:09:23.180 --> 00:09:24.840
in these two different scenarios.

00:09:24.860 --> 00:09:28.560
So in our first scenario,
our initial boot sequence,

00:09:28.560 --> 00:09:32.260
the client issues via
broadcast a DHCP discover.

00:09:32.300 --> 00:09:36.160
Our DHCP server responds with an offer.

00:09:36.160 --> 00:09:41.150
We request,
and the DHCP acknowledges that request.

00:09:41.160 --> 00:09:43.470
This is a standard DHCP exchange.

00:09:43.880 --> 00:09:45.880
There's nothing special about it here.

00:09:45.910 --> 00:09:49.500
Not having received a response
from any NetBoot servers yet,

00:09:49.500 --> 00:09:52.380
our client now goes
into a collection mode.

00:09:52.390 --> 00:09:57.650
It issues a BSDP informed list via
the broadcast address to get a list of

00:09:57.650 --> 00:10:02.720
NetBoot servers that are out there on the
network that have a NetBoot set for me.

00:10:02.830 --> 00:10:04.910
I'll play the client.

00:10:05.610 --> 00:10:10.760
Our NetBoot server responds,
if it has a NetBoot set for our client,

00:10:10.800 --> 00:10:11.490
with a BSDP ACK list.

00:10:11.590 --> 00:10:18.230
I'm a NetBoot server and I've got
this list or this NetBoot set for you.

00:10:18.450 --> 00:10:22.490
After a selection process,
the client issues a BSDP-informed

00:10:22.860 --> 00:10:24.950
select to the NetBoot server.

00:10:25.180 --> 00:10:28.250
And the server responds with
our really juicy packet,

00:10:28.280 --> 00:10:31.070
the BSTP Act Select,
which contains all the information

00:10:31.070 --> 00:10:34.610
our client needs to actually
boot from the NetBoot server.

00:10:34.810 --> 00:10:36.620
And then the client will
go ahead and start the next

00:10:36.660 --> 00:10:39.300
phase of the NetBoot process.

00:10:40.380 --> 00:10:44.160
So that's how it works for a client
that has never NetBooted before.

00:10:44.300 --> 00:10:45.490
What if we do have a preference?

00:10:45.580 --> 00:10:49.880
What if I want to boot from
a specific NetBoot image?

00:10:49.910 --> 00:10:54.880
And more importantly,
where could I even store that preference?

00:10:54.880 --> 00:10:58.320
If you think about it, we have this thing
called diskless NetBoot.

00:10:58.360 --> 00:11:02.630
And if I don't have a disk in my machine,
how do I store a preference

00:11:02.630 --> 00:11:06.950
for what NetBoot server I want
for this specific client?

00:11:07.030 --> 00:11:09.580
We could store it in firmware,
but that would be kind of

00:11:09.670 --> 00:11:12.310
complicated from a UI perspective.

00:11:12.380 --> 00:11:17.390
But what we actually do is the NetBoot
preference is stored at the server

00:11:17.710 --> 00:11:19.640
in the NetBoot bindings database.

00:11:19.660 --> 00:11:26.150
This is a flat file located at var
db bsdpd_clients at the server.

00:11:26.160 --> 00:11:29.880
And the server will create a
record for a client any time it

00:11:29.880 --> 00:11:32.520
receives a bsdp_informed_select.

00:11:32.600 --> 00:11:35.210
So there's actually two different
times that we'll get that

00:11:35.300 --> 00:11:38.280
bsdp_informed_select from a client.

00:11:38.300 --> 00:11:40.460
We saw one in the last slide.

00:11:40.460 --> 00:11:41.940
I pulled the machine out of the box.

00:11:41.940 --> 00:11:43.320
I held down the N key.

00:11:43.320 --> 00:11:45.300
It went through the
DHCP and bsdp_exchange.

00:11:45.300 --> 00:11:48.520
And the last thing the client
sent was a bsdp_ax_select.

00:11:48.520 --> 00:11:54.340
My client implicitly selected the default
boot image ID on my NetBoot server.

00:11:54.440 --> 00:11:57.940
So the other place that this can happen
is there's actually a bsdp client built

00:11:57.940 --> 00:11:59.880
into the startup disk preference pane.

00:11:59.880 --> 00:12:01.900
When you open up the startup
disk preference pane,

00:12:01.900 --> 00:12:05.080
and there's NetBoot servers available,
you notice that, first of all,

00:12:05.080 --> 00:12:08.020
the startup disk preference pane
will issue a bsdp_informed_select.

00:12:08.110 --> 00:12:09.100
form list.

00:12:09.100 --> 00:12:13.040
And all of the NetBoot servers within
range will issue a list of all of

00:12:13.050 --> 00:12:17.460
the NetBoot images that they have to
offer for that client's architecture.

00:12:17.460 --> 00:12:20.460
You then click on one,
and startup disk preference pane

00:12:20.460 --> 00:12:23.700
sends out a bsdp_informed_select.

00:12:23.700 --> 00:12:26.820
And the NetBoot server will create
a binding for that client in

00:12:26.830 --> 00:12:29.730
that NetBoot bindings database.

00:12:30.010 --> 00:12:34.130
So it's important to point out both
of these scenarios because if you

00:12:34.130 --> 00:12:38.180
were to pull a machine out of the box,
hold down the N key,

00:12:38.250 --> 00:12:40.770
boot from your default NetBoot set,

00:12:41.310 --> 00:12:43.360
Go on about your business.

00:12:43.360 --> 00:12:46.040
And then go to Server Admin
and change your default

00:12:46.160 --> 00:12:48.370
NetBoot set to something else.

00:12:48.370 --> 00:12:51.660
And then go back to that client,
hold down the N key.

00:12:51.660 --> 00:12:52.280
What's it going to do?

00:12:52.340 --> 00:12:56.750
It's going to boot from the previous
default NetBoot set because that

00:12:56.750 --> 00:12:59.510
client had implicitly made a selection.

00:12:59.620 --> 00:13:02.120
It had made a preference
for that NetBoot set.

00:13:02.140 --> 00:13:04.300
So that tends to confuse some people.

00:13:04.300 --> 00:13:08.360
You can actually hold down Option N on
the new Intel Macs to boot from the real

00:13:08.360 --> 00:13:11.180
default NetBoot set to ignore the BSL.

00:13:11.200 --> 00:13:12.880
Go on about your business.

00:13:12.880 --> 00:13:15.840
And then go to Server Admin
and change your default

00:13:15.840 --> 00:13:17.810
NetBoot set to something else.

00:13:17.810 --> 00:13:20.960
And then go back to that client,
hold down the N key.

00:13:20.960 --> 00:13:21.830
What's it going to do?

00:13:21.830 --> 00:13:21.830
It's going to boot from the previous
default NetBoot set because that

00:13:21.830 --> 00:13:21.830
client had implicitly made a selection.

00:13:21.830 --> 00:13:21.830
It had made a preference
for that NetBoot set.

00:13:21.830 --> 00:13:21.830
So that tends to confuse some people.

00:13:21.830 --> 00:13:21.830
You can actually hold down Option N on
the new Intel Macs to boot from the real

00:13:21.830 --> 00:13:21.830
default NetBoot set to ignore the BSL.

00:13:22.300 --> 00:13:25.330
So if I do have a preference,
my client is going to send

00:13:25.330 --> 00:13:28.840
out that DHCP discover,
just like it did before via broadcast.

00:13:28.840 --> 00:13:30.740
The DHCP server is going
to pick up on that.

00:13:30.790 --> 00:13:34.650
But now my NetBoot server is saying, hey,
I've got a record for this client

00:13:34.710 --> 00:13:36.400
in my NetBoot bindings database.

00:13:36.400 --> 00:13:40.280
It's going to respond with
a BSDP offer immediately.

00:13:40.440 --> 00:13:42.440
And of course,
this has to occur via broadcast,

00:13:42.450 --> 00:13:44.770
because our client doesn't
have an IP address yet.

00:13:44.930 --> 00:13:47.900
The client's going to go ahead
and request that IP address,

00:13:47.950 --> 00:13:48.970
get an act from the server.

00:13:48.980 --> 00:13:51.970
And now, because I have everything I need
to start the NetBoot process

00:13:52.100 --> 00:13:55.590
from my BSDP offer packet,
I'm going to go ahead and immediately

00:13:55.600 --> 00:13:58.160
initiate the NetBoot process.

00:13:58.500 --> 00:14:02.400
So those are the two phases of NetBoot.

00:14:02.400 --> 00:14:04.520
And that's the 30,000 foot overview.

00:14:04.520 --> 00:14:06.540
That was the easy part.

00:14:06.610 --> 00:14:08.520
So now you're stuck.

00:14:08.520 --> 00:14:09.460
Now you're stuck.

00:14:09.460 --> 00:14:13.080
You're at the flashing globe,
and you can't figure out why

00:14:13.080 --> 00:14:14.420
you're not getting past it.

00:14:14.420 --> 00:14:16.560
You're stuck somewhere in
the middle of this process.

00:14:16.560 --> 00:14:20.850
What can we do to get more
information about what is passing

00:14:20.850 --> 00:14:22.600
between the client and the server?

00:14:22.600 --> 00:14:25.210
How can we get more details on this?

00:14:26.460 --> 00:14:30.480
Hands down, one of the easiest
things that you can do.

00:14:30.480 --> 00:14:32.200
Oh, that's beautiful.

00:14:32.210 --> 00:14:34.550
I've never seen it that big.

00:14:35.690 --> 00:14:37.680
One of the easiest things that
you can do is a packet trace.

00:14:37.680 --> 00:14:39.840
This is a very simple thing.

00:14:39.840 --> 00:14:42.990
You can tell how simple it is
based on that tcpdump command.

00:14:43.230 --> 00:14:45.940
And you can do that at the server and
you can see all of the packets fly

00:14:45.940 --> 00:14:51.780
between your client and the DHCP server
and your client and the NetBoot server.

00:14:52.030 --> 00:14:57.120
And if we pick this apart,
we can see the IP header, the UDP header,

00:14:57.130 --> 00:15:01.360
our RFC951 standard
DHCP packet information,

00:15:01.360 --> 00:15:03.530
a little magic cookie that says
that the rest of this packet

00:15:03.610 --> 00:15:09.130
is our DHCP vendor options,
and our BSDP vendor options are stuck

00:15:09.130 --> 00:15:11.200
in there in a little opaque value.

00:15:11.200 --> 00:15:15.020
Now,
I got really good at reading hexadecimal.

00:15:15.020 --> 00:15:18.200
In fact, I printed out a little cheat
sheet and taped it to my desk.

00:15:18.210 --> 00:15:20.310
My wife called me a geek.

00:15:20.810 --> 00:15:22.670
and I think we're all there though.

00:15:22.930 --> 00:15:25.520
For those that aren't really
good with the hexadecimal,

00:15:25.560 --> 00:15:28.490
there's a little bit of ASCII on
the right there that we can read

00:15:28.490 --> 00:15:30.900
some things like the boot file,
the server name.

00:15:31.300 --> 00:15:35.110
And we can maybe try and discern
what kind of information is passing

00:15:35.120 --> 00:15:37.380
between the client and the server.

00:15:37.410 --> 00:15:42.860
Decoding those vendor options,
especially the BSTP vendor options,

00:15:42.860 --> 00:15:47.800
could be a real challenge if this
was the approach that we took.

00:15:47.800 --> 00:15:49.020
So there's actually an easier way.

00:15:49.620 --> 00:15:53.060
If you recall,
Boot PD is the server process

00:15:53.060 --> 00:15:58.660
that responds to DHCP and
BSTP requests from our client.

00:15:58.770 --> 00:16:02.950
If we unload that Boot PS launch
daemon and then load

00:16:03.510 --> 00:16:07.180
Boot PD manually in verbose mode,
we can actually get a lot more

00:16:07.250 --> 00:16:12.730
information about the communication
between the client and the server.

00:16:12.950 --> 00:16:15.460
You can use these commands
to put it into verbose mode.

00:16:15.460 --> 00:16:17.240
Don't forget to take
it out of verbose mode,

00:16:17.240 --> 00:16:20.340
otherwise you will have NetBoot problems.

00:16:20.420 --> 00:16:24.070
And then, so,
I don't want to give away too much yet.

00:16:24.100 --> 00:16:27.860
The next several slides,
what I've done is I've

00:16:27.860 --> 00:16:30.750
taken my boot PD server,
I put it into verbose mode,

00:16:30.790 --> 00:16:33.220
and I netbooted one client
against my netboot server.

00:16:33.220 --> 00:16:35.960
And then I'm going to see
all of the communication,

00:16:35.960 --> 00:16:38.620
one packet at a time,
between the client and the server,

00:16:38.620 --> 00:16:41.800
and then I went ahead and color-coded
things and broke it down a little bit to

00:16:41.800 --> 00:16:46.580
make what is very dry a little bit more
interesting and a little more digestible.

00:16:46.580 --> 00:16:51.210
So in our first packet,
our client issues that DHCP discover

00:16:51.220 --> 00:16:52.510
out to the broadcast address.

00:16:52.520 --> 00:16:56.940
Boot PD, sitting on port 67, says, hey,
there's a client request,

00:16:57.000 --> 00:17:01.070
and it parses all of that hexadecimal,
all of that information,

00:17:01.100 --> 00:17:06.080
and spits out our DHCP information,
the standard RFC 951 stuff.

00:17:06.200 --> 00:17:09.180
I cut some of it off here because
it's not particularly interesting,

00:17:09.180 --> 00:17:11.190
and I needed some space in my slide.

00:17:11.200 --> 00:17:15.100
Our DHCP vendor options,
we've got some interesting things here.

00:17:15.100 --> 00:17:16.810
The message type is discover.

00:17:16.820 --> 00:17:19.400
We've got a parameter request list,
client identifier,

00:17:19.400 --> 00:17:23.050
vendor class identifier,
and then our vendor-specific options,

00:17:23.100 --> 00:17:24.070
our BSDP stuff.

00:17:24.100 --> 00:17:29.340
And then Boot PD further breaks that
down by parsing out the BSDP options.

00:17:29.360 --> 00:17:31.280
So we see lots of information here.

00:17:31.280 --> 00:17:34.240
We see exactly what conversation
our client and our server

00:17:34.320 --> 00:17:35.450
are starting to have.

00:17:35.500 --> 00:17:38.810
In the red there is what you
normally see in the system log.

00:17:39.040 --> 00:17:41.860
Raise your hand if you've ever tried
to use the Boot PD messages in system

00:17:41.860 --> 00:17:43.410
log to actually troubleshoot NetBoot.

00:17:44.690 --> 00:17:49.200
Okay, that's great because that's
kind of a waste of time.

00:17:49.200 --> 00:17:53.340
It's interesting,
but it's not actually very useful,

00:17:53.340 --> 00:17:54.360
and it shouldn't be.

00:17:54.360 --> 00:17:59.190
We shouldn't typically dump debug
information into System Log.

00:18:00.730 --> 00:18:06.260
So BootPD sees this packet and
it actually recognizes it as a

00:18:06.270 --> 00:18:10.910
BSTP discoverer in addition to a
DHCP discoverer because our client passed

00:18:10.910 --> 00:18:12.890
on two critical pieces of information.

00:18:12.900 --> 00:18:16.890
Our client passed on that vendor
class identifier saying that I am an

00:18:16.890 --> 00:18:19.900
Apple Boot Service Discovery Protocol
client.

00:18:19.920 --> 00:18:25.160
My architecture is I386 and my
hardware identifier that I pulled

00:18:25.170 --> 00:18:28.540
out of firmware is MacBook Pro 1.1.

00:18:29.220 --> 00:18:33.760
I've also asked for two specific
vendor options from the NetBoot server.

00:18:33.760 --> 00:18:36.790
I've asked the server to identify
itself using that vendor class

00:18:36.790 --> 00:18:41.260
string and I've also asked for
some specific BSTP parameters.

00:18:44.780 --> 00:18:48.750
In this case, my NetBoot server is not
providing the DHCP service.

00:18:49.020 --> 00:18:54.540
So while that packet was interesting,
I'm going to show it to you and parse it.

00:18:54.710 --> 00:18:55.920
Boot PD is not going to respond to it.

00:18:55.920 --> 00:18:59.320
It's just going to ignore it because
we're not providing that DHCP service.

00:18:59.470 --> 00:19:03.140
In a case like this, I like to also do a
TCP dump at the same time.

00:19:03.230 --> 00:19:05.500
I don't run the DHCP server.

00:19:05.600 --> 00:19:08.090
Joel down the hall runs the DHCP server.

00:19:08.120 --> 00:19:10.170
And he's kind of shady.

00:19:10.650 --> 00:19:15.200
So I want to make sure that my
DHCP server is giving my client

00:19:15.200 --> 00:19:20.450
an IP address in that offer
and a pingable domain gateway.

00:19:21.740 --> 00:19:24.560
Our client is going to
respond with a DHCP request.

00:19:24.570 --> 00:19:25.630
This is going to go out via broadcast.

00:19:25.750 --> 00:19:28.640
So again, my Boot PD server is going
to see that client request.

00:19:28.640 --> 00:19:32.920
Again, this is interesting insofar
as it's coming in on port 67.

00:19:32.920 --> 00:19:34.770
But again,
I'm going to ignore this because

00:19:34.840 --> 00:19:36.620
I'm not providing the DHCP service.

00:19:36.620 --> 00:19:38.590
And further,
I'm not the server identifier

00:19:38.590 --> 00:19:40.170
that's mentioned in this packet.

00:19:40.170 --> 00:19:42.060
So I'm not supposed to respond to this.

00:19:42.060 --> 00:19:44.890
So I'll just log this and move on.

00:19:46.000 --> 00:19:47.860
Again, back to our TCP dump output.

00:19:48.090 --> 00:19:50.320
I get a DHCP ACK from my DHCP server.

00:19:50.320 --> 00:19:55.250
So I should have some confidence at this
point that the DHCP portion of the first

00:19:55.250 --> 00:19:58.000
stage of NetBoot is working properly.

00:19:58.000 --> 00:20:00.580
My client should have a
configured network interface.

00:20:04.970 --> 00:20:07.960
Not having received anything from
a NetBoot server at this point,

00:20:08.010 --> 00:20:10.120
my client is now going to
go into collection mode.

00:20:10.190 --> 00:20:14.490
It's going to issue a BSTP inform
out to the broadcast address.

00:20:15.950 --> 00:20:19.290
and it's going to ask for a list
of the NetBoot servers out there.

00:20:19.350 --> 00:20:22.000
It's a very simple request.

00:20:22.810 --> 00:20:24.460
Before the NetBoot
server simply responds,

00:20:24.460 --> 00:20:27.040
though, the NetBoot server is going
to qualify this client.

00:20:27.040 --> 00:20:30.770
If you've ever looked in server admin,
you see you can set up a NetBoot filter.

00:20:30.850 --> 00:20:32.930
You can filter out specific
clients to prevent them from

00:20:32.990 --> 00:20:33.880
booting from your server.

00:20:33.880 --> 00:20:37.930
The first thing that BootPD does is it
determines if this client's MAC address,

00:20:37.940 --> 00:20:41.430
its client identifier,
is in one of these NetBoot filters.

00:20:41.440 --> 00:20:43.770
If it is, it'll just ignore the packet.

00:20:43.780 --> 00:20:46.880
If not, it's going to go ahead and loop
through each enabled NetBoot set

00:20:46.900 --> 00:20:48.820
and further qualify this client.

00:20:48.820 --> 00:20:51.980
First, does this NetBoot set support
this client's architecture?

00:20:52.410 --> 00:20:56.160
Is this client's system
ID supported by this NetBoot set?

00:20:56.400 --> 00:20:59.220
Both of those pieces of information,
BootPD is going to pull out

00:20:59.220 --> 00:21:02.990
of that nbimageinfo.plist
file from that NetBoot set.

00:21:05.280 --> 00:21:08.590
It's also going to check to see that
there is a booter file for this client.

00:21:08.600 --> 00:21:09.860
This one's a little obscure.

00:21:09.860 --> 00:21:11.350
It seems like an odd requirement.

00:21:11.360 --> 00:21:14.570
But BootPD will actually look to
see if that booter file exists

00:21:14.570 --> 00:21:16.510
for this client's architecture.

00:21:16.530 --> 00:21:18.420
And if it doesn't,
even if the NetBoot set says it

00:21:18.420 --> 00:21:21.220
supports that client architecture,
it's not going to respond.

00:21:21.220 --> 00:21:23.890
So if for whatever reason
there isn't a booter set,

00:21:23.950 --> 00:21:27.920
Joel deleted it from my server,
then our server's not going to respond.

00:21:28.400 --> 00:21:31.620
And finally,
BootPD will determine if this

00:21:31.620 --> 00:21:35.770
NetBoot set is the default NetBoot
set for this client's architecture.

00:21:35.770 --> 00:21:37.330
This isn't a requirement.

00:21:37.460 --> 00:21:38.470
It is optional.

00:21:38.480 --> 00:21:40.770
But if you have several different
NetBoot sets that meet the

00:21:40.770 --> 00:21:43.270
criteria for your client,
by specifying a default NetBoot set,

00:21:43.290 --> 00:21:45.040
you're going to reduce some ambiguity.

00:21:45.040 --> 00:21:48.610
You can be sure that your client
is getting the right NetBoot set.

00:21:51.930 --> 00:21:58.350
So our server will issue a BSDP Act List,
which includes two important

00:21:58.350 --> 00:22:01.060
pieces of information,
the default boot image ID that

00:22:01.060 --> 00:22:03.850
it's providing to the client,
and then server priority,

00:22:03.900 --> 00:22:06.130
which I'll talk about next.

00:22:06.580 --> 00:22:09.080
Our client is also going to
qualify the servers that respond.

00:22:09.080 --> 00:22:10.660
It won't just pick the
first one that responds.

00:22:10.720 --> 00:22:14.210
It actually issues that BSDP-informed
list several times to make sure that

00:22:14.210 --> 00:22:18.830
it gets a very thorough list of NetBoot
servers that are out there and the

00:22:18.910 --> 00:22:21.600
default images that they're hosting.

00:22:21.720 --> 00:22:25.350
Once it gets that thorough list,
it's going to pick the NetBoot server

00:22:25.650 --> 00:22:28.800
and the default NetBoot set on that
server that has the lowest load,

00:22:28.800 --> 00:22:30.200
that has the least load.

00:22:30.240 --> 00:22:33.810
And it does that by using that server
priority tag that it gets from that

00:22:33.810 --> 00:22:35.980
last packet from the NetBoot server.

00:22:35.980 --> 00:22:38.420
What that is,
is basically just a number of clients

00:22:38.420 --> 00:22:41.910
that are in that NetBoot bindings
database for that NetBoot server.

00:22:41.920 --> 00:22:44.610
So if server A has three
clients bound to it,

00:22:44.820 --> 00:22:47.000
server B has five,
we're going to go ahead and

00:22:47.000 --> 00:22:50.380
pick server A because presumably
there's fewer clients actually

00:22:50.380 --> 00:22:52.090
NetBooting from server A.

00:22:52.100 --> 00:22:54.500
So this is an important point.

00:22:54.500 --> 00:22:57.540
If you're doing some stuff
with load balancing and you're

00:22:57.540 --> 00:23:01.970
getting some odd results,
say you've got no clients

00:23:02.120 --> 00:23:04.520
booting from one server and
like 50 from another server,

00:23:04.520 --> 00:23:08.870
you may need to clear out that
BSDPD clients file because that contains

00:23:08.870 --> 00:23:11.990
some information about previous clients
that had booted from that server.

00:23:15.640 --> 00:23:17.260
Finally, our client has made a choice.

00:23:17.260 --> 00:23:19.640
It's going to issue a
BSTP-informed select,

00:23:19.640 --> 00:23:22.720
indicating that it's selecting.

00:23:22.720 --> 00:23:26.610
It's going to indicate a specific
server identifier and that default image

00:23:26.900 --> 00:23:29.550
ID that was provided from that server.

00:23:30.110 --> 00:23:32.620
Finally,
our server issues a BSTP Act Select.

00:23:32.840 --> 00:23:34.340
This, of course, is the juiciest packet.

00:23:34.340 --> 00:23:35.990
It's got all sorts of information.

00:23:36.110 --> 00:23:39.700
We've got a TFTP path to our boot file,
that booter.

00:23:39.840 --> 00:23:43.010
We've got a root path,
which is the NFS or HTTP path

00:23:43.080 --> 00:23:45.000
to our NetBoot disk image.

00:23:45.140 --> 00:23:48.700
And then we've got, of course,
that selected boot image ID again.

00:23:48.820 --> 00:23:52.390
And we also have a name that
we can assign to ourselves when

00:23:52.400 --> 00:23:54.510
we get into the boot process.

00:23:54.700 --> 00:23:56.930
At this point,
the client has all of the information

00:23:56.930 --> 00:24:00.400
that it needs to move on to the
next phase of the NetBoot process.

00:24:00.400 --> 00:24:03.620
We're done with the BSTP exchange.

00:24:04.580 --> 00:24:06.880
This is where we see the
Apple logo and the spinning globe.

00:24:06.880 --> 00:24:10.960
This is where the client will
download those NetBoot support files.

00:24:11.570 --> 00:24:15.430
The first thing that happens here is
firmware will take that boot file path

00:24:15.740 --> 00:24:21.640
from our BSTP X select packet and it will
download the booter and execute that.

00:24:21.760 --> 00:24:24.340
As soon as it executes the booter,
firmware is done with the machine.

00:24:24.340 --> 00:24:28.050
Firmware is going to unload so it
can hand off all of the resources

00:24:28.540 --> 00:24:30.060
back to the rest of the OS.

00:24:30.060 --> 00:24:33.530
And booter will assume control
of the rest of the boot process.

00:24:34.360 --> 00:24:37.860
Booter is then going to
determine the TFTP path to the

00:24:37.860 --> 00:24:40.260
other NetBoot support files,
the kernel and the

00:24:40.280 --> 00:24:41.860
kernel extension cache.

00:24:41.860 --> 00:24:43.500
It's then going to download those.

00:24:45.960 --> 00:24:51.240
Finally, the booter will execute and then
transition control to the kernel.

00:24:51.240 --> 00:24:54.780
And that's really all there is to this
particular stage of the NetBoot process.

00:24:54.790 --> 00:24:57.490
During this stage,
that spinning globe is kind

00:24:57.650 --> 00:25:01.760
of a progress indicator,
indicating that you're

00:25:01.760 --> 00:25:04.390
downloading files via TFTP.

00:25:05.860 --> 00:25:08.340
The next stage, of course,
we see that progress indicator.

00:25:08.480 --> 00:25:12.390
This is where the client is
loading our NetBoot support files.

00:25:13.050 --> 00:25:15.430
Again, the kernel has control
of the system here.

00:25:15.620 --> 00:25:18.750
The kernel is going to replace
that spinning globe with the

00:25:18.750 --> 00:25:22.910
progress indicator that we usually
see when we boot up Mac OS X.

00:25:23.150 --> 00:25:26.690
The kernel will then attempt to load
the kernel extension cache because we

00:25:26.730 --> 00:25:31.400
need some very basic driver support
for accessing the network and mounting

00:25:31.400 --> 00:25:34.000
a disk image over that network.

00:25:34.190 --> 00:25:38.040
Once we've loaded that extension cache,
we're going to attempt to

00:25:38.040 --> 00:25:42.510
mount the NetBoot disk image
either via HTTP or NFS.

00:25:43.520 --> 00:25:45.890
These are two very important things
because you can tell just based on

00:25:45.970 --> 00:25:48.780
these steps that occur two things
that could happen in this process.

00:25:48.780 --> 00:25:52.630
If we've got a bad KEXT cache or we've
got a KEXT cache for an inappropriate

00:25:52.720 --> 00:25:57.030
architecture or inappropriate hardware,
you might get a kernel panic here when

00:25:57.040 --> 00:25:59.220
the kernel tries to load that cache.

00:25:59.220 --> 00:26:02.310
This happens all the time
when you get that new Mac Pro,

00:26:02.310 --> 00:26:05.710
you try to fire it up from your
old NetBoot image and it instantly

00:26:06.200 --> 00:26:10.200
kernel panics right after you get
that spinning progress indicator.

00:26:10.200 --> 00:26:13.380
That's because you need to update
your kernel extension cache or

00:26:13.380 --> 00:26:13.380
update your kernel extension cache.

00:26:13.400 --> 00:26:15.010
So you can't just create
a new NetBoot set.

00:26:15.010 --> 00:26:20.390
People also see problems here when
they attempt to mount that NetBoot disk

00:26:20.390 --> 00:26:24.220
image over NFS and they've either got
ports blocked or NFS isn't even running

00:26:24.220 --> 00:26:25.930
on their server for some odd reason.

00:26:25.930 --> 00:26:30.940
So if we succeed in these two steps,
we've got a set of drivers and we've

00:26:30.940 --> 00:26:34.980
got a mounted root file system,
we're ready to roll.

00:26:34.980 --> 00:26:38.640
The kernel is going to go ahead and
execute launchd and launchd is going to

00:26:38.640 --> 00:26:42.280
initiate the rest of the boot process
by firing off the ETSI RC script.

00:26:44.540 --> 00:26:48.130
In the case of a standard NetBoot,
the RC script is also going to

00:26:48.180 --> 00:26:49.980
execute the RC.Netboot script.

00:26:50.030 --> 00:26:54.620
This script is responsible for attaching
a shadow file to our NetBoot disk image.

00:26:54.620 --> 00:26:57.330
If you've ever looked at
the NFS configuration for

00:26:57.330 --> 00:27:00.070
your NetBoot SharePoint,
you may have noticed that

00:27:00.190 --> 00:27:03.620
it's exported to world,
but it's exported as read-only.

00:27:03.620 --> 00:27:05.840
This, of course, is a pillar of NetBoot.

00:27:05.840 --> 00:27:08.590
I want a bulletproof disk
that I can NetBoot my clients,

00:27:08.660 --> 00:27:11.960
they can make whatever changes they want,
and I can just reboot that to

00:27:11.960 --> 00:27:13.150
wipe out all those changes.

00:27:13.160 --> 00:27:15.920
That's because those changes
aren't occurring at the server,

00:27:15.950 --> 00:27:18.280
those changes are occurring
in that shadow file.

00:27:20.160 --> 00:27:22.480
Typically,
I'm going to look to the first local

00:27:22.480 --> 00:27:26.070
hard drive to create that NetBoot shadow
file because of performance reasons.

00:27:26.080 --> 00:27:31.200
It's much faster to make a lot of
small writes to that local disk.

00:27:31.220 --> 00:27:35.000
In the case of diskless NetBoot, though,
in some areas, perhaps, say,

00:27:35.000 --> 00:27:38.370
the United States government that
has very sensitive information

00:27:38.370 --> 00:27:41.770
and they don't want anything ever
written to an internal drive,

00:27:41.770 --> 00:27:44.320
they actually remove the drives
altogether from those systems.

00:27:45.090 --> 00:27:48.460
In that case, I don't have that internal
drive available to me.

00:27:48.460 --> 00:27:54.440
I'm going to use a network
SharePoint to create that shadow file.

00:27:54.480 --> 00:27:58.200
And the way that I do that is,
one thing I didn't tell you before,

00:27:58.340 --> 00:28:01.460
is that BSDP X select packet
that I got from the server

00:28:01.460 --> 00:28:03.310
is actually stored in RAM.

00:28:03.340 --> 00:28:07.200
And there's tons of information in it,
a little bit more than I was

00:28:07.200 --> 00:28:09.350
forthcoming in that last slide.

00:28:09.360 --> 00:28:14.490
We also have a shadow mount path,
which is an AFP path.

00:28:15.130 --> 00:28:20.850
Including a username and a dynamically
generated temporary password,

00:28:20.970 --> 00:28:26.930
a server address,
and the AFP SharePoint that I can use.

00:28:27.060 --> 00:28:29.150
I'm going to go ahead and
mount that SharePoint,

00:28:29.190 --> 00:28:32.560
and then I'm going to use the shadow
file path parameter out of my NetBoot

00:28:32.570 --> 00:28:37.620
packet to determine where on that
SharePoint I can create my shadow file.

00:28:37.760 --> 00:28:40.630
So,
assuming all of this occurs correctly,

00:28:40.710 --> 00:28:44.940
I should have a mounted file system
that appears to me as read-right.

00:28:44.940 --> 00:28:49.070
And I can go ahead and conclude
the rest of the boot process,

00:28:49.140 --> 00:28:53.230
which is characterized by the
loading of the Windows server

00:28:53.230 --> 00:28:55.360
and our sweet little dock.

00:28:58.030 --> 00:29:00.920
So I hope from this that you've
learned that there are some

00:29:00.940 --> 00:29:03.900
challenges to the NetBoot process,
but by breaking it down

00:29:03.900 --> 00:29:07.110
into specific stages,
you can really--

00:29:07.180 --> 00:29:12.830
Pick specific troubleshooting methods
and not just try all of them or go about

00:29:12.860 --> 00:29:15.340
like a chicken with its head cut off.

00:29:15.390 --> 00:29:20.940
Most notably, like DHCP,
BSTP also uses extensively broadcast.

00:29:20.940 --> 00:29:24.800
Joel will talk a little bit more
about how this can be overcome.

00:29:24.840 --> 00:29:29.540
But if you don't configure your
routers to pass on these broadcast

00:29:29.610 --> 00:29:32.300
packets to your NetBoot server,
well, the very first stage of NetBoot

00:29:32.390 --> 00:29:36.980
is going to fail if you attempt
to NetBoot across subnets.

00:29:37.340 --> 00:29:40.200
Again,
several communication protocols are used,

00:29:40.390 --> 00:29:43.000
often from several different servers,
managed by several different people.

00:29:43.000 --> 00:29:47.310
So not only are there technical issues
with managing several different servers,

00:29:47.350 --> 00:29:50.790
but there's often political
issues that you have to deal with.

00:29:50.890 --> 00:29:53.710
Of course, you all are going to
have to work those out.

00:29:53.760 --> 00:29:56.090
And finally, DHCP is a requirement.

00:29:56.090 --> 00:29:59.200
On large networks,
this should be a no-brainer.

00:29:59.200 --> 00:30:03.460
Raise your hand if you manually configure
IP addresses for 15,000 machines.

00:30:03.460 --> 00:30:08.760
But there are certain cases at
Penn State University that are forced

00:30:08.970 --> 00:30:12.270
to use manual IP address allocation.

00:30:12.280 --> 00:30:16.060
This is actually potentially solvable,
I learned just in the

00:30:16.060 --> 00:30:17.430
last couple of days.

00:30:17.430 --> 00:30:21.480
As of right now, DHCP is a requirement,
but that is something that

00:30:21.480 --> 00:30:23.680
hopefully we can move on from.

00:30:23.760 --> 00:30:26.300
So now that you all
are experts on Netboot,

00:30:26.310 --> 00:30:30.230
I'm going to go ahead and hand the
reins over to Joel Rennich to talk

00:30:30.230 --> 00:30:32.810
about how he's used Netboot in Japan.

00:30:38.950 --> 00:30:41.780
Thank you, Mike.

00:30:41.930 --> 00:30:44.100
Joel Rennich with Apple Enterprise.

00:30:44.100 --> 00:30:48.300
And I won't do any packets.

00:30:49.200 --> 00:30:52.560
and David We're done with packets.

00:30:52.560 --> 00:30:55.320
So first I want to talk
about some NetBoot fallacies.

00:30:55.320 --> 00:30:58.660
Over the years some myth and other
stuff of NetBoot has come up and so

00:30:58.660 --> 00:31:03.580
sometimes people think it's a little
different than what it really is.

00:31:03.580 --> 00:31:06.070
You don't need a DHCP and
NetBoot on the same box.

00:31:06.070 --> 00:31:09.470
We haven't done that
since colored plastic.

00:31:09.510 --> 00:31:13.120
So once we moved into the whites
and the blacks and the silver cases,

00:31:13.280 --> 00:31:16.850
you don't need to have your NetBoot
and your DHCP server on the same box.

00:31:16.850 --> 00:31:18.860
So don't worry about that.

00:31:18.860 --> 00:31:20.680
You don't need an Apple DHCP server.

00:31:20.730 --> 00:31:22.860
As Mike talked about, any DHCP will do.

00:31:22.870 --> 00:31:24.830
We don't care where it comes from.

00:31:24.920 --> 00:31:28.220
We just add some extra stuff
afterwards once you've already

00:31:28.220 --> 00:31:30.260
got the IP address that you need.

00:31:30.260 --> 00:31:35.460
So no,
you don't need an Apple DHCP server.

00:31:35.460 --> 00:31:37.570
Another fallacy is that the
larger the NetBoot image,

00:31:37.610 --> 00:31:39.840
the longer it's going to take to boot,
the longer it's going

00:31:39.840 --> 00:31:41.640
to take to use stuff.

00:31:41.640 --> 00:31:43.800
No, that's really not the case.

00:31:43.830 --> 00:31:45.930
That one kind of surprised me,
but we found with very,

00:31:46.000 --> 00:31:50.620
very large NetBoot images that since the
NetBoot client only grabs what it needs,

00:31:50.620 --> 00:31:53.910
who cares if you've got 30 gigs sitting
there on the server on that disk image?

00:31:54.090 --> 00:31:55.780
We'll only need the pieces that we use.

00:31:55.800 --> 00:32:00.460
It's not like we're transferring the
whole file down to the NetBoot client.

00:32:00.460 --> 00:32:02.890
Size really doesn't matter.

00:32:02.890 --> 00:32:04.140
Just keep that in mind.

00:32:04.730 --> 00:32:08.320
Another issue that a lot of
people thought you could only

00:32:08.320 --> 00:32:10.260
have 16 NFSD processes running.

00:32:10.290 --> 00:32:14.600
Obviously NetBoot heavily leverages
NFS if you're using NetBoot over NFS.

00:32:14.600 --> 00:32:18.970
And in the server admin GUI you
could only set 16 of these in there.

00:32:19.120 --> 00:32:20.400
That was kind of a bug.

00:32:20.600 --> 00:32:22.940
It was a little UI limitation.

00:32:23.200 --> 00:32:25.720
So you could actually go into
NetInfo and actually edit one of

00:32:25.820 --> 00:32:27.230
the config files to up that up.

00:32:27.270 --> 00:32:29.600
Or now starting with 10.4.7
I think we fixed that.

00:32:29.730 --> 00:32:33.140
So you should be able to put
upwards of a lot more into there.

00:32:33.560 --> 00:32:36.400
NetBoot Server needs to be on
the same subnet as the client's

00:32:36.400 --> 00:32:38.160
is not necessary whatsoever.

00:32:38.160 --> 00:32:41.120
So you can use some stuff
called a DHCP helper,

00:32:41.360 --> 00:32:43.680
or you can actually statically
assign it if you wanted to.

00:32:43.680 --> 00:32:45.360
DHCP helper is much, much easier.

00:32:45.360 --> 00:32:48.300
And I even have a little graphic that
kind of shows you how this works.

00:32:48.300 --> 00:32:50.030
And you've got your iMacs up there.

00:32:50.030 --> 00:32:51.920
And you've got a switch.

00:32:51.920 --> 00:32:54.140
Typically this is done in the switch,
sometimes in the router.

00:32:54.140 --> 00:32:58.060
If you have a layer 3 switch,
a DHCP helper is going to allow

00:32:58.060 --> 00:33:01.500
you to broadcast DHCP requests
to different subnets.

00:33:01.980 --> 00:33:05.240
And it's typically used so that you can
put your DHCP servers on the other side

00:33:05.240 --> 00:33:06.390
of the building or something like that.

00:33:06.460 --> 00:33:11.260
But you can also use that exact
same technique or tool to broadcast

00:33:11.400 --> 00:33:13.890
boot P requests for the BSDP stuff.

00:33:13.960 --> 00:33:14.520
All right.

00:33:14.710 --> 00:33:17.240
So in this case,
the clients go off and they

00:33:17.240 --> 00:33:18.870
fire off DHCP requests.

00:33:18.960 --> 00:33:23.180
And that gets echoed to both the
DHCP servers and to the NetBoot servers.

00:33:23.220 --> 00:33:25.520
And then each one responds
with what it needs.

00:33:25.520 --> 00:33:27.310
The DHCP gives DHCP information.

00:33:27.310 --> 00:33:29.610
The NetBoot gives NetBoot
information there.

00:33:31.710 --> 00:33:34.810
If you were here at WWDC last year,
you probably heard us talk a little

00:33:34.820 --> 00:33:37.070
bit about a bank in Tokyo that
we've been doing some work with.

00:33:37.070 --> 00:33:40.040
There are some people in the audience
who are even very involved in this.

00:33:40.040 --> 00:33:43.480
So hopefully I don't get anything wrong,
because I only go there on weekends now.

00:33:43.480 --> 00:33:45.280
So I wanted to give you some ideas.

00:33:45.280 --> 00:33:47.630
This is a fairly large
NetBoot environment.

00:33:47.630 --> 00:33:50.580
So I'll give you some numbers
about how we're doing stuff,

00:33:50.580 --> 00:33:52.640
where all the pieces fit together.

00:33:52.640 --> 00:33:57.520
I've been accused by a fellow presenter
that this is in the PowerPoint 2.0 style,

00:33:57.520 --> 00:33:58.760
that it's very fast.

00:33:58.760 --> 00:34:00.730
So we'll see if you stay with me.

00:34:00.830 --> 00:34:05.590
So 1,500 is the number of NetBoot
clients that they're using right now.

00:34:05.590 --> 00:34:09.560
They're going to scale that up to
2,500 over the next couple of months,

00:34:09.560 --> 00:34:12.540
and that's about full,
2,500 Netbooting iMacs.

00:34:12.720 --> 00:34:16.260
And they use one Netboot image.

00:34:16.260 --> 00:34:20.340
So all 2,500 are using one Netboot image.

00:34:20.340 --> 00:34:21.990
Cool stuff.

00:34:21.990 --> 00:34:25.330
That image is 15 gigs.

00:34:26.270 --> 00:34:31.510
15 gigs of space on there is the
NetBoot image for all those 2500 iMacs.

00:34:31.930 --> 00:34:36.730
150 to 200,
the number of NetBoot clients per server.

00:34:36.970 --> 00:34:39.700
All right,
so tweaking out the NFSD processes,

00:34:39.730 --> 00:34:42.410
doing some other stuff,
getting more servers in there as

00:34:42.540 --> 00:34:44.570
possible when you need to scale up more.

00:34:44.580 --> 00:34:48.500
But it's been very solid and a
very good technology to work with.

00:34:48.810 --> 00:34:52.850
120 seconds is a typical boot process.

00:34:52.950 --> 00:34:55.650
So not nearly as fast as you
would be off a local drive,

00:34:55.750 --> 00:34:56.700
but that makes sense.

00:34:56.940 --> 00:34:59.150
Still not too annoying.

00:34:59.580 --> 00:35:02.290
There are some things that you can
do that can severely degrade that.

00:35:02.390 --> 00:35:05.590
So hopefully you don't do those
things like mess with your network,

00:35:05.740 --> 00:35:07.820
remove your DHCP servers
and things like that.

00:35:07.910 --> 00:35:08.980
Helps you out a lot.

00:35:09.040 --> 00:35:11.060
10 minutes.

00:35:12.870 --> 00:35:16.920
Time to Netboot 250 Netboot
systems at the same time.

00:35:16.920 --> 00:35:18.610
That was kind of fun when
we first started off.

00:35:18.610 --> 00:35:21.000
We grabbed a whole floor of iMacs,
used ARD,

00:35:21.050 --> 00:35:23.020
and booted them all at the same time.

00:35:23.060 --> 00:35:26.620
And this big startup chime kind
of echoed throughout the floor.

00:35:27.540 --> 00:35:29.750
So when you hit them all at the
same time and you really kind of

00:35:29.750 --> 00:35:32.770
hammer the two Netboot servers that
we had supporting these 250 clients,

00:35:32.790 --> 00:35:34.900
it took about 10 minutes
from start to finish.

00:35:34.900 --> 00:35:36.450
A lot of machines started up early.

00:35:36.450 --> 00:35:38.850
Some machines took the full
10 minutes to go there.

00:35:38.850 --> 00:35:41.840
So just keep that in mind that if you
ever had to restart them all at once,

00:35:41.850 --> 00:35:44.040
it's going to be a lot
longer than individually.

00:35:45.850 --> 00:35:51.650
40 kilometers, which is about 24.8 miles,
is the length between one of

00:35:51.650 --> 00:35:54.160
the data centers and where
some of the clients are.

00:35:54.160 --> 00:35:57.200
We are actually Netbooting
across WAN links.

00:35:57.200 --> 00:36:00.300
WAN links in this case
is like gigabit fiber.

00:36:00.300 --> 00:36:02.500
That's a little misleading.

00:36:02.500 --> 00:36:07.060
However, they boot off that connections
without even knowing that

00:36:07.460 --> 00:36:09.970
they're booting off across town.

00:36:09.990 --> 00:36:12.530
There are, however,
some remote sites that

00:36:12.530 --> 00:36:14.180
have a 50 megabit link.

00:36:15.030 --> 00:36:16.490
To some of the branch offices.

00:36:16.490 --> 00:36:21.240
And we were very hesitant about this,
but they are Netbooting off those links.

00:36:21.240 --> 00:36:22.490
Not a whole lot of machines.

00:36:22.490 --> 00:36:25.550
We just have a couple in each of the
branch offices that are doing this.

00:36:25.620 --> 00:36:28.490
But they do go over 50 megabit links,
and they're usable.

00:36:28.530 --> 00:36:29.530
They're not speedy.

00:36:29.580 --> 00:36:32.020
They take longer to boot up
and some of the other stuff,

00:36:32.080 --> 00:36:32.990
but they can do it.

00:36:33.060 --> 00:36:35.790
This kind of shocked our
Netboot engineering group that

00:36:35.900 --> 00:36:39.100
they were even doing that,
let alone that it was working.

00:36:39.100 --> 00:36:40.390
12 hours.

00:36:40.390 --> 00:36:44.140
Important,
important thing to keep in mind.

00:36:44.140 --> 00:36:47.120
Because that's the time of the
flight from Chicago to Tokyo.

00:36:47.120 --> 00:36:50.370
And since I've been almost
commuting with some of the other

00:36:50.430 --> 00:36:54.540
people that have been out there,
you understand that pretty well.

00:36:54.560 --> 00:36:57.840
So here's a little picture of
one of the floors full of IMAX.

00:36:57.840 --> 00:36:59.120
They look all pretty.

00:36:59.120 --> 00:37:00.930
This is a little older picture.

00:37:00.930 --> 00:37:02.120
These are the G5s.

00:37:02.120 --> 00:37:04.950
They're transitioning to
all intels to keep it all in

00:37:04.960 --> 00:37:06.960
one processor architecture.

00:37:06.960 --> 00:37:08.520
A typical kind of desk there.

00:37:08.630 --> 00:37:11.620
Some pieces there,
a little eyesight in all the machines.

00:37:13.360 --> 00:37:17.680
And a really kind of messy but hard
to get any less complex than this kind

00:37:17.680 --> 00:37:20.340
of topographical map of their network.

00:37:20.390 --> 00:37:24.420
We were going to point some things out,
but I think it has more effect

00:37:24.420 --> 00:37:27.970
if you just kind of stare at
it and look at all the lines.

00:37:28.240 --> 00:37:31.900
The graphics guy was like, yeah,
we could highlight some of this stuff,

00:37:32.040 --> 00:37:32.900
but that'd be tough.

00:37:32.900 --> 00:37:36.960
So the idea here, though,
is that all the iMacs are NetBooting.

00:37:36.960 --> 00:37:41.080
We've got an Active Directory environment
set up in the Kerberos cross realm.

00:37:41.080 --> 00:37:43.220
Open Directory is the top dog in this.

00:37:43.220 --> 00:37:46.910
We have some Oracle Documentum
Red Hat clients all using

00:37:47.250 --> 00:37:49.460
LDAP through Open Directory.

00:37:49.460 --> 00:37:52.170
Home shares on OS X servers.

00:37:52.310 --> 00:37:54.560
We're probably looking at
some other stuff for that.

00:37:54.960 --> 00:37:58.260
NetBoot servers, LDAP management,
Kerberos authentication,

00:37:58.260 --> 00:38:00.920
kind of the whole ball of wax,
which would have been

00:38:00.920 --> 00:38:02.120
hard enough to begin with.

00:38:02.200 --> 00:38:05.310
But now that you throw in NetBooting,
it really becomes interesting.

00:38:05.320 --> 00:38:08.920
But some very cool stuff so far.

00:38:08.920 --> 00:38:09.990
Things have been going pretty well there.

00:38:10.040 --> 00:38:13.460
So some ideas of a practical
NetBoot application.

00:38:14.930 --> 00:38:18.660
So next I'm going to hand it off to
Gavin Cook from Genentech to talk about

00:38:18.660 --> 00:38:21.070
some of the stuff that he's doing.

00:38:26.900 --> 00:38:28.080
Thanks, Joel.

00:38:28.150 --> 00:38:32.820
So I'm Gavin Cook,
Macintosh Systems Architect at Genentech.

00:38:32.840 --> 00:38:38.380
And building on what Mike kind of showed,
we've basically extended

00:38:38.490 --> 00:38:43.010
NetBoot so we could use NetBoot
as a method for distributing

00:38:43.010 --> 00:38:46.160
10.4 out to all of our users.

00:38:46.890 --> 00:38:51.950
We use NetBoot to roll out 10.4
because it allows us to basically

00:38:51.950 --> 00:38:55.240
build a virtual upgrade CD,
but instead of having to go

00:38:55.310 --> 00:38:59.850
replicate thousands of these CDs,
or actually would be DVDs at this stage,

00:38:59.850 --> 00:39:06.260
or in the past we'd use FireWire drives
with a team of techs that would go out,

00:39:06.260 --> 00:39:10.740
meet with the customer, oh,
the customer didn't show up, oh, no,

00:39:10.740 --> 00:39:13.850
this is a bad time,
and got this new surprise meeting.

00:39:13.860 --> 00:39:20.330
It took us forever to get 10.3 rolled
out due to these little unseen incidents.

00:39:20.340 --> 00:39:23.990
We'd spent so much time scheduling
people and getting things

00:39:23.990 --> 00:39:26.640
set up for the right time,
people would miss.

00:39:26.640 --> 00:39:27.710
So this was great.

00:39:27.710 --> 00:39:30.650
This allowed us to just
basically give it to the users.

00:39:30.650 --> 00:39:32.880
They could run it when they needed to.

00:39:32.880 --> 00:39:36.400
I was able to get it so it's
more convenient for them,

00:39:36.400 --> 00:39:39.740
cost us less money,
we had less staff involved.

00:39:39.790 --> 00:39:41.580
It was a really good upgrade.

00:39:41.580 --> 00:39:43.840
It also gives us a lot of flexibility.

00:39:43.840 --> 00:39:46.080
It's just a little bit more
control than the default

00:39:46.080 --> 00:39:48.250
network install technique does.

00:39:48.350 --> 00:39:50.880
We're basically using a true NetBoot.

00:39:51.170 --> 00:39:53.120
We're loading a new OS.

00:39:53.210 --> 00:39:57.070
We've completely tuned and
customized that OS that we boot,

00:39:57.200 --> 00:40:01.680
and then that OS is essentially doing
an upgrade of the user's system.

00:40:01.680 --> 00:40:06.630
So we're kind of running with no backups,
no net, as it were.

00:40:06.650 --> 00:40:09.180
It worked out really well.

00:40:12.530 --> 00:40:18.270
What we did to extend this is we've built
a custom AppleScript Studio application

00:40:18.490 --> 00:40:20.820
that we pass out to the
users from our web server.

00:40:20.820 --> 00:40:22.290
They download it.

00:40:22.290 --> 00:40:25.420
It's basically a single
button for the most part.

00:40:25.440 --> 00:40:29.590
And it connects up to the NetBoot system.

00:40:29.590 --> 00:40:30.710
I'll kind of go through that.

00:40:31.140 --> 00:40:34.320
We're also using PHP scripts in
the back end to manage the client

00:40:34.460 --> 00:40:37.860
connections and to get a picture
of how many clients are connecting,

00:40:37.900 --> 00:40:39.680
where they're connecting to.

00:40:39.680 --> 00:40:43.380
All the PHP scripts manage
the whole flow of the system.

00:40:43.380 --> 00:40:46.680
MySQL database to store
the session information.

00:40:46.680 --> 00:40:49.520
We're tracking what
clients are upgrading,

00:40:49.520 --> 00:40:53.810
what they're upgrading from,
how long it took them to upgrade.

00:40:53.810 --> 00:40:57.400
And that data just ran
all over the place.

00:40:57.460 --> 00:41:00.500
We had some systems that
I think are fastest.

00:41:01.170 --> 00:41:04.980
Complete from beginning to end system,
I'm sure it was a desktop,

00:41:05.130 --> 00:41:07.330
was I think 12 minutes.

00:41:07.410 --> 00:41:08.090
Blew me away.

00:41:08.100 --> 00:41:12.240
And then another system we had
I think ran out the worst I think

00:41:12.240 --> 00:41:14.520
I saw was about 45 minutes.

00:41:14.590 --> 00:41:16.940
So I'm assuming that was
probably an older iMac.

00:41:18.630 --> 00:41:24.370
We're using a custom local.rc in
the shell level that basically

00:41:24.380 --> 00:41:29.280
once that system boots up,
we're booted off the NetBoot image,

00:41:29.280 --> 00:41:36.330
we're able to use that custom local.rc
file to basically start communicating

00:41:36.330 --> 00:41:39.610
back up to the PHP scripts in MySQL.

00:41:41.520 --> 00:41:42.290
Actually, sorry.

00:41:42.300 --> 00:41:46.450
We also did a custom startup
item that would install

00:41:46.450 --> 00:41:48.340
additional packages that we had.

00:41:48.340 --> 00:41:51.800
So we have some management
stuff we wanted to use.

00:41:51.800 --> 00:41:56.660
We also wanted to get everybody up to
10.4.4 at the time is what we're using.

00:41:56.700 --> 00:42:00.000
We're upgrading that now to go to 10.4.7.

00:42:00.020 --> 00:42:04.920
So we have this final round that
kind of does some light housekeeping.

00:42:07.300 --> 00:43:51.800
[Transcript missing]

00:43:52.260 --> 00:43:55.820
We're also checking the system
specs to be sure they have an

00:43:55.820 --> 00:43:58.640
Ethernet network connection,
to be sure they have power,

00:43:58.670 --> 00:44:01.360
to be sure they have enough RAM,
enough free hard drive space.

00:44:01.360 --> 00:44:05.440
Putting this client in allows us
to do so much more than what we can

00:44:05.440 --> 00:44:07.760
just do by holding down the N key.

00:44:07.760 --> 00:44:10.590
We're able to do a lot of
preliminary stuff before we

00:44:10.590 --> 00:44:12.570
just throw them onto this image.

00:44:12.650 --> 00:44:16.430
So it allows us to be sure that that
system is really ready to handle

00:44:16.430 --> 00:44:18.350
what we're about to do with it.

00:44:19.900 --> 00:44:22.430
Again, as I mentioned,
this integrates the NetBoot

00:44:22.430 --> 00:44:27.060
sessions with the PHP MySQL server
and setting the firmware,

00:44:27.060 --> 00:44:28.920
just the whole network thing.

00:44:28.960 --> 00:44:30.060
Can't stress that enough.

00:44:31.810 --> 00:44:35.290
So basically once you download
this little application,

00:44:35.320 --> 00:44:37.420
you launch it,
this is what it will look like.

00:44:37.510 --> 00:44:39.130
Ask for your admin password.

00:44:39.400 --> 00:44:42.800
All of our local users are admins
so they can install their own apps.

00:44:42.800 --> 00:44:48.750
Essentially you need admin privileges on
that system in order to set the firmware.

00:44:48.890 --> 00:44:51.290
So if you don't have
that on your systems,

00:44:51.290 --> 00:44:55.920
that could be a stepping little thing
you have to get over a little harder.

00:44:57.050 --> 00:45:00.640
Basically,
it checks to be sure you have power.

00:45:00.750 --> 00:45:02.780
In the case of a laptop,
you might not have a

00:45:02.780 --> 00:45:05.070
power source connected,
so it'll ask you to connect

00:45:05.130 --> 00:45:08.060
it to a power adapter,
and then you quit and try again.

00:45:08.060 --> 00:45:10.720
Let's say you don't have
a network connection,

00:45:10.720 --> 00:45:12.520
so we've got to have Ethernet.

00:45:12.520 --> 00:45:14.130
Please connect Ethernet.

00:45:14.130 --> 00:45:15.000
Try again.

00:45:15.000 --> 00:45:16.700
Oh, you're trying to be sneaky.

00:45:16.730 --> 00:45:17.880
You're on wireless.

00:45:17.880 --> 00:45:19.140
It's not going to work.

00:45:19.140 --> 00:45:20.340
Got to have Ethernet.

00:45:20.340 --> 00:45:21.100
Try again.

00:45:22.890 --> 00:45:24.440
Basically,
if you get through all this stuff,

00:45:24.440 --> 00:45:28.300
we've also checked the system's RAM,
we've checked the available disk space,

00:45:28.300 --> 00:45:29.960
you're ready to upgrade.

00:45:29.980 --> 00:45:33.550
We tell the users this is going
to take from 30 to 50 minutes,

00:45:33.610 --> 00:45:37.120
just because we really want to
set the expectation a lot higher,

00:45:37.120 --> 00:45:39.560
and then we can be so
much faster than that,

00:45:39.560 --> 00:45:41.520
they'll just be so impressed.

00:45:43.560 --> 00:45:47.200
We really, in testing this,
we found that we had a huge issue,

00:45:47.330 --> 00:45:50.350
not with our servers and
how big we made our servers,

00:45:50.350 --> 00:45:54.340
or how many servers we had,
or how many clients, it was really about

00:45:54.340 --> 00:45:55.780
the client on the end.

00:45:55.800 --> 00:46:00.130
So, in a very, you know...

00:46:00.660 --> 00:46:03.620
Simple environment where
all systems are the same,

00:46:03.670 --> 00:46:08.520
similar to what Joel was working with,
that's going to be a lot tighter number.

00:46:08.520 --> 00:46:11.830
You can really have a much better
idea of what that picture looks like.

00:46:11.850 --> 00:46:16.450
In an environment where you're completely
heterogeneous and you have anything from,

00:46:16.450 --> 00:46:19.610
you know, the old colored plastic
all the way on up,

00:46:19.620 --> 00:46:21.650
it can really be a challenge.

00:46:21.650 --> 00:46:24.130
And so we wanted to set the
user expectation with that.

00:46:25.640 --> 00:46:30.130
Basically, once the client reboots,
it's going to go into the NetBoot image,

00:46:30.130 --> 00:46:31.830
it will be installing Tiger.

00:46:31.830 --> 00:46:35.380
Once you're done with that,
it's going to restart again,

00:46:35.380 --> 00:46:39.040
and then we throw up a custom
display screen that just basically

00:46:39.160 --> 00:46:40.840
has a progress indicator.

00:46:40.840 --> 00:46:43.610
They never see the OS,
and it says installing

00:46:43.610 --> 00:46:45.220
additional packages.

00:46:45.220 --> 00:46:48.850
So instead of seeing the Macintosh
is booting and you have the

00:46:48.960 --> 00:46:52.590
little progress indicator,
we kind of hijacked that whole

00:46:52.670 --> 00:46:54.610
thing with a custom RC file.

00:46:55.440 --> 00:46:58.290
And that allows us to install
these additional packages kind

00:46:58.290 --> 00:47:01.250
of very cleanly without the
user having to interact with it.

00:47:01.340 --> 00:47:03.550
So once you press restart,
you can basically walk

00:47:03.590 --> 00:47:05.880
away from your system,
and you come back in an hour

00:47:05.890 --> 00:47:08.790
after a meeting or something,
you're going to have a new OS.

00:47:11.750 --> 00:47:14.980
Really our big concern was our network.

00:47:14.980 --> 00:47:18.460
We wanted to protect the network and
protect the bandwidth of the network.

00:47:18.610 --> 00:47:24.230
We're basically running one gigabit links
from all of our edge routers and switches

00:47:24.470 --> 00:47:26.200
back up to the core of the network.

00:47:26.220 --> 00:47:31.390
So we're very concerned about having,
you know, every subnet we can basically

00:47:31.390 --> 00:47:33.920
have up to like 240 systems.

00:47:33.920 --> 00:47:38.570
255, but yeah, we've got some devices.

00:47:40.580 --> 00:47:44.810
So we really wanted to ensure
that we're not going to flood that

00:47:44.810 --> 00:47:48.420
connection and affect the network
performance for all of the other users.

00:47:48.420 --> 00:47:54.250
So really the big focus for our system
was shaping the network traffic.

00:47:54.670 --> 00:47:59.360
Each client will be copying the full
2.5 gig image during the upgrade

00:47:59.360 --> 00:48:00.920
because you're installing the OS.

00:48:01.010 --> 00:48:02.920
Everything on there is
going to get touched.

00:48:02.920 --> 00:48:06.800
We placed our servers really in
areas of high Mac concentration.

00:48:06.800 --> 00:48:10.990
We ran a number of network scans where
we're basically analyzing how many

00:48:10.990 --> 00:48:15.300
Macs we had on different subnets,
set a percentage to each of those areas,

00:48:15.300 --> 00:48:18.480
and that's how we picked
where to put our servers.

00:48:18.480 --> 00:48:22.650
The server name is basically based
off the building that they serve

00:48:22.650 --> 00:48:26.920
and we kind of use Zen as our
prefix for the whole system because

00:48:26.930 --> 00:48:28.720
we want it to be very smooth.

00:48:28.720 --> 00:48:32.670
And so everything would be like Zen 1,
Zen 5.

00:48:33.530 --> 00:48:37.400
Then we also place two servers in our
data center to serve the other buildings.

00:48:37.400 --> 00:48:41.530
Again, similar to Joel's environment,
we're booting that,

00:48:41.540 --> 00:48:44.680
basically our data centers
over a dark fiber WAN link,

00:48:44.720 --> 00:48:46.740
so no problems with that.

00:48:46.870 --> 00:48:47.510
Works really well.

00:48:47.540 --> 00:48:52.910
This is a picture of the environment.

00:48:53.080 --> 00:48:55.400
You can see that at the top
we have that Zen server,

00:48:55.400 --> 00:48:59.710
which is basically our database server
running the PHP scripts and the MySQL.

00:48:59.820 --> 00:49:02.290
It manages the entire process.

00:49:02.290 --> 00:49:06.440
So when a user installs this application,
they run it, the first thing that client

00:49:06.590 --> 00:49:09.500
does is it goes and communicates
with the Zen server.

00:49:09.500 --> 00:49:12.220
And it says, hi, I'm so-and-so's machine.

00:49:12.220 --> 00:49:13.960
This is the building I live in.

00:49:13.960 --> 00:49:16.690
We determine the building
based off the subnet.

00:49:16.730 --> 00:49:22.650
We basically built a table of all the
subnets in our network and then mapped

00:49:22.780 --> 00:49:22.980
out what we're going to do with it.

00:49:23.010 --> 00:49:25.730
Which subnets are in which buildings.

00:49:25.740 --> 00:49:28.980
Again, we have over 400 subnets.

00:49:28.980 --> 00:49:33.190
Our network topology is pretty complex.

00:49:33.210 --> 00:49:38.480
It's a standard Cisco core
edge style layout.

00:49:38.550 --> 00:49:43.100
So one of the big things is just
figuring out how to flow these clients,

00:49:43.190 --> 00:49:45.020
where the client's supposed to go.

00:49:45.030 --> 00:49:47.840
Once you've determined
that-- so for this example,

00:49:47.840 --> 00:49:49.920
we have the other building.

00:49:50.020 --> 00:49:52.620
If you're in a building that
doesn't have a dedicated server,

00:49:52.640 --> 00:49:53.900
you'll talk to the Zen server.

00:49:53.900 --> 00:49:56.750
It's going to say, oh,
you're out in some odd place.

00:49:56.850 --> 00:49:58.790
So we're going to send
you to the data center.

00:49:58.900 --> 00:50:02.170
So you'll boot off the Zen 91
or Zen 92 servers that are

00:50:02.460 --> 00:50:05.210
basically in the building 90.

00:50:05.270 --> 00:50:07.300
If, on the other hand,
you're in a building that

00:50:07.300 --> 00:50:10.420
has a dedicated server,
such as the building three client,

00:50:10.420 --> 00:50:12.540
then it's going to say, oh,
you're in building three.

00:50:12.540 --> 00:50:14.740
We're going to send you
straight to Zen three.

00:50:14.810 --> 00:50:19.180
So that NetBoot server is basically
installed in the network closet.

00:50:19.260 --> 00:50:23.760
So your connection is really short,
really high speed.

00:50:23.780 --> 00:50:27.590
It's worked out incredibly well,
almost too well.

00:50:31.690 --> 00:50:36.600
So here's some of the code that I wrote
in our AppleScript Studio application.

00:50:36.600 --> 00:50:39.790
This is basically--this
is AppleScript code,

00:50:39.890 --> 00:50:43.000
but it's forming a shell command.

00:50:43.180 --> 00:50:49.260
Basically, that shell command is a curl,
so it's just command line URL retrieval.

00:50:49.330 --> 00:50:53.670
What this does is this is forming
basically an HTTP request that it

00:50:54.000 --> 00:50:56.090
posts up to the database server.

00:50:56.200 --> 00:50:59.780
You can see here how we're able to
capture all these different variables,

00:50:59.820 --> 00:51:01.640
and we're using

00:51:02.290 --> 00:51:07.740
The, just all the utilities available on
the Mac to dig out this information.

00:51:07.740 --> 00:51:11.340
We're looking at a lot of different
places to find the hard drive name,

00:51:11.360 --> 00:51:16.910
machine name, amount of memory,
amount of disk space, the user account.

00:51:16.920 --> 00:51:20.380
We take all these details and
post that up to the database.

00:51:20.380 --> 00:51:23.900
And again, one of the really important
things here is the IP address,

00:51:23.900 --> 00:51:27.440
which we use to determine
where the client's at.

00:51:27.480 --> 00:51:28.930
And that's actually in a different post.

00:51:30.880 --> 00:51:33.750
So the MySQL database will
store all this information,

00:51:33.880 --> 00:51:36.800
keeps track of session times,
where clients came from,

00:51:36.860 --> 00:51:39.090
how long it took them.

00:51:39.130 --> 00:51:43.980
And then the PHP scripts actually control
the flow of the queue and determine

00:51:44.170 --> 00:51:46.540
which server a client should go to.

00:51:46.700 --> 00:51:49.880
This is kind of a walkthrough
of the session flow.

00:51:50.140 --> 00:51:52.150
Basically,
the user will launch the client,

00:51:52.230 --> 00:51:55.320
collects the data,
post that up to the database,

00:51:55.330 --> 00:51:57.440
and then the server will
reply with a session ID.

00:51:57.440 --> 00:51:59.870
And we're just using this to
keep track of the client all

00:51:59.870 --> 00:52:01.260
the way through the process.

00:52:01.260 --> 00:52:04.510
Again, we're going through
three different reboots,

00:52:04.510 --> 00:52:07.540
so we want to write that client
ID down to the hard drive

00:52:07.540 --> 00:52:09.310
so we can keep track of it.

00:52:10.680 --> 00:52:12.660
Basically,
once we've done all those checks and the

00:52:12.660 --> 00:52:15.820
user clicks begin on the application,
the client's going to request

00:52:15.950 --> 00:52:17.270
a position in the queue.

00:52:17.270 --> 00:52:23.380
That's going to go up to the
database server and the PHP server

00:52:23.470 --> 00:52:27.220
and ask for a position in the queue.

00:52:27.540 --> 00:52:29.440
It's going to look up the IP address.

00:52:29.440 --> 00:52:35.460
It's going to compare our subnet
table to say where is this IP address,

00:52:35.490 --> 00:52:37.960
where should we send it to.

00:52:37.960 --> 00:52:42.880
It's going to then check the server queue
and see if that server has open slots.

00:52:43.090 --> 00:52:45.050
Basically,
what we did is we said we never

00:52:45.130 --> 00:52:48.970
want more than 20 clients booting
off of a single server at a time.

00:52:48.970 --> 00:52:52.690
So, the day we announced this,
everybody's so excited to

00:52:52.720 --> 00:52:54.540
get their hands on Tiger.

00:52:54.540 --> 00:52:55.460
Wow, spotlight.

00:52:57.500 --> 00:53:00.700
We were really concerned about
having a huge flood on that day.

00:53:00.700 --> 00:53:03.220
So, we really wanted to be
able to back that off.

00:53:03.300 --> 00:53:07.570
So, what will happen is if the client
can't get a position in the queue,

00:53:07.570 --> 00:53:11.020
it will basically pass back
down to that interface for the

00:53:11.020 --> 00:53:13.170
user and says you're queued up.

00:53:13.270 --> 00:53:15.980
You're user 25 out of 20 people.

00:53:15.980 --> 00:53:20.520
So, as they're waiting to get a position,
they'll see that tick down.

00:53:20.520 --> 00:53:23.420
And once people come
off that NetBoot server,

00:53:23.430 --> 00:53:25.630
then we free that up right away.

00:53:27.720 --> 00:53:32.680
So once they have an active slot,
they basically go to the NetBoot start.

00:53:32.680 --> 00:53:35.640
At this point, the system will reboot.

00:53:35.640 --> 00:53:41.290
It's booting off of the IP address
that was pressed into the firmware.

00:53:41.500 --> 00:53:44.920
Once you go through that,
it'll start up our custom

00:53:44.920 --> 00:53:47.090
RC local on the NetBoot image.

00:53:47.100 --> 00:53:51.930
That RC file will post up to
the database as soon as the

00:53:52.090 --> 00:53:54.330
client's done with the NetBoot.

00:53:54.480 --> 00:53:57.360
So at this point,
we're one step away from

00:53:57.370 --> 00:53:58.720
restarting the system.

00:53:58.720 --> 00:54:01.010
And we basically say, hey,
we're out of the queue.

00:54:01.130 --> 00:54:05.130
So that'll free up a spot in
the queue for another system.

00:54:05.150 --> 00:54:10.230
Then that client reboots,
goes to another RC local,

00:54:10.460 --> 00:54:14.760
And that is basically the RCLocal that
throws up the custom installation screen.

00:54:14.910 --> 00:54:16.800
It says we're installing
additional packages.

00:54:16.800 --> 00:54:20.060
Here's where we do 10.4.7, 10.4.4.

00:54:20.060 --> 00:54:24.500
We do NetBoot, Landesk,
a lot of different pieces.

00:54:24.500 --> 00:54:26.290
Some of the NetBoot cleanup.

00:54:26.320 --> 00:54:30.260
We remove that session ID from the drive,
all that kind of stuff.

00:54:30.300 --> 00:54:33.460
So then it does a final reboot,
and you're done.