WEBVTT

00:00:10.090 --> 00:00:13.190
So welcome to the last session
in this room for the day.

00:00:13.370 --> 00:00:17.250
This session is going to be on
Core Audio and how we deal with

00:00:17.310 --> 00:00:20.080
surround and multi-channel in general.

00:00:20.080 --> 00:00:24.400
My name's William Stewart and
I manage the Core Audio group,

00:00:24.470 --> 00:00:26.830
but I'm not going to be really
talking in this session.

00:00:26.850 --> 00:00:29.590
I just thought I'd introduce
the topics and then bring the

00:00:29.590 --> 00:00:31.200
first presenter up on stage.

00:00:31.200 --> 00:00:38.450
So there's a few different ways that
surround sort of goes through Core Audio.

00:00:38.450 --> 00:00:44.700
We have general services for dealing
with surround and that will be covering

00:00:44.790 --> 00:00:50.040
that in the sort of audio toolbox
multi-channel section of this talk.

00:00:50.300 --> 00:00:55.120
The and there's sort of like just
general concepts of what surround

00:00:55.120 --> 00:00:59.840
is and and how we publish its
capabilities and so forth in the system.

00:00:59.840 --> 00:01:05.810
We'll begin the talk with
an overview of OpenAL 1.1.

00:01:05.810 --> 00:01:09.580
OpenAL is an API for dealing
with games and audio.

00:01:09.760 --> 00:01:14.810
And 1.1 is a recently released
spec that we're now supporting

00:01:14.810 --> 00:01:17.280
with 1047 and in Leopard 2.

00:01:17.280 --> 00:01:24.120
So the 1.1 overview is just to go through
some of the custom extensions that

00:01:24.120 --> 00:01:28.870
we've made because our implementation
of OpenAL is based on Core Audio.

00:01:28.870 --> 00:01:30.530
So that's why it's here.

00:01:30.530 --> 00:01:33.200
We also have an
application called AU Lab,

00:01:33.200 --> 00:01:39.680
and AU Lab is provided to support
audio unit development and usage.

00:01:39.680 --> 00:01:44.820
And in particular,
AU Lab has a new version in Leopard

00:01:44.820 --> 00:01:50.240
that supports multi-channel and
surround both audio units and

00:01:50.240 --> 00:01:53.000
document configurations and so forth.

00:01:53.140 --> 00:01:56.560
We're also going to be going
through panner audio units.

00:01:56.560 --> 00:02:00.100
These are audio units that are
specifically focused around the

00:02:00.100 --> 00:02:05.130
task of panning audio spatially,
and we're going to be going

00:02:05.130 --> 00:02:07.570
through that in some detail.

00:02:07.700 --> 00:02:10.920
And then on a completely unrelated topic,
just because we had

00:02:10.920 --> 00:02:14.000
nowhere else to put it,
we're also adding MIDI output

00:02:14.090 --> 00:02:16.910
capability to audio units in Leopard.

00:02:16.910 --> 00:02:20.820
So we're going to finish
this talk with that.

00:02:20.880 --> 00:02:24.840
So without any more to do,
I'll get Bob Aaron to come

00:02:24.980 --> 00:02:26.370
up and talk about OpenAL.

00:02:26.620 --> 00:02:28.490
Thank you.

00:02:30.800 --> 00:03:31.100
[Transcript missing]

00:03:32.150 --> 00:03:33.310
So what's new for OpenAL?

00:03:33.450 --> 00:03:38.360
Well, since we shipped in Tiger,
the OpenAL community finished

00:03:38.420 --> 00:03:40.640
up the 1.1 specification.

00:03:40.650 --> 00:03:43.800
And basically there were three things
that got accomplished with this spec.

00:03:43.980 --> 00:03:49.020
It was an opportunity to clean
up some of the existing APIs,

00:03:49.020 --> 00:03:52.400
better document them so they might
be more consistently implemented.

00:03:52.400 --> 00:03:55.820
It was an opportunity to
add some new features.

00:03:55.820 --> 00:03:59.020
And also,
it was a chance to take some of the

00:03:59.110 --> 00:04:02.870
existing extensions that were common
in several implementations that a

00:04:02.870 --> 00:04:07.790
lot of developers were using and
roll those actually into the API,

00:04:07.790 --> 00:04:09.280
the Core API set.

00:04:09.750 --> 00:04:12.910
So as Bill mentioned,
what's new for Apple is that we

00:04:12.910 --> 00:04:17.580
shipped our 1.1 spec implementation
with our latest software update,

00:04:17.580 --> 00:04:19.300
10.4.7.

00:04:19.350 --> 00:04:21.210
And that's a full 1.1 spec.

00:04:21.350 --> 00:04:23.070
We added some new extensions.

00:04:23.150 --> 00:04:26.060
We're now using the same
OpenAL headers that all the

00:04:26.120 --> 00:04:27.400
other implementations are using.

00:04:27.400 --> 00:04:29.110
There's no custom things in there.

00:04:29.250 --> 00:04:33.410
And we added the cone support,
which is actually part of the 1.0 spec,

00:04:33.410 --> 00:04:36.110
but we didn't implement
the first time around.

00:04:36.240 --> 00:04:39.700
And those sources are available, again,
at the Creative Repository,

00:04:39.700 --> 00:04:43.510
so you can go get those and build
them yourself if you want to.

00:04:43.870 --> 00:04:48.270
So let's run through
some of the 1.1 features.

00:04:48.270 --> 00:04:50.560
As I mentioned,
there's a chance for some clean-up.

00:04:50.560 --> 00:04:54.630
So here's a list of a few things
that got done in this clean-up.

00:04:54.750 --> 00:04:57.730
Some better error code
conditions were defined.

00:04:57.810 --> 00:05:03.560
The closed device API was changed
to return a Boolean so you know

00:05:03.720 --> 00:05:06.300
if it was a successful call.

00:05:06.330 --> 00:05:09.410
One to note is the AOVersion attribute.

00:05:09.550 --> 00:05:13.290
Now this was not implemented consistently
across the various implementations.

00:05:13.330 --> 00:05:16.300
Some were returning a spec version,
some were returning an

00:05:16.300 --> 00:05:17.260
implementation version.

00:05:17.260 --> 00:05:21.100
This is documented now to be
the specification version.

00:05:21.100 --> 00:05:25.070
Some pitch shift limits and a
couple of new types were defined.

00:05:25.960 --> 00:05:28.660
So if you're familiar
with OpenAL or OpenGL,

00:05:28.700 --> 00:05:31.780
you know there's a nomenclature for
getting or setting properties on

00:05:31.780 --> 00:05:34.860
the various objects of the library.

00:05:34.920 --> 00:05:38.620
In the 1.0 spec,
there were get and set source and

00:05:38.620 --> 00:05:42.390
listener properties for the float type,
but not for integer,

00:05:42.420 --> 00:05:44.000
so those were added here.

00:05:44.030 --> 00:05:48.590
And then integer and float variants
were added for the buffer object.

00:05:48.600 --> 00:05:51.170
Those didn't exist in 1.0.

00:05:52.380 --> 00:05:56.640
In the 1.0 spec,
there's a notion of a Doppler mechanism.

00:05:56.640 --> 00:06:01.330
It's not true Doppler where you've got
a pitch shift based on some movement of

00:06:01.330 --> 00:06:03.730
your objects over some amount of time.

00:06:03.850 --> 00:06:06.990
But it's a pitch shift that
allows your application to get

00:06:06.990 --> 00:06:08.800
kind of this Doppler effect.

00:06:09.010 --> 00:06:12.950
Now the Doppler velocity,
the AL Doppler velocity that's up there,

00:06:12.950 --> 00:06:17.800
that was the 1.0 call and it was
very inconsistently implemented.

00:06:17.800 --> 00:06:21.750
And the behavior across
implementations was to the point

00:06:21.750 --> 00:06:25.800
where it wasn't very predictable,
so it wasn't really that useful.

00:06:26.010 --> 00:06:30.030
That's been deprecated in the
1.1 spec and replaced with

00:06:30.070 --> 00:06:31.800
the AL Speed of Sound API.

00:06:31.800 --> 00:06:33.800
And there's the formula there.

00:06:33.800 --> 00:06:38.090
It's still similar in that you
get pitch shift based on the

00:06:38.150 --> 00:06:41.830
direction and velocities of your
source and your listener objects.

00:06:43.010 --> 00:06:48.520
Okay, one of the big new features for 1.1
are the addition of some capture APIs.

00:06:48.730 --> 00:06:52.740
Now, these are set up so your
application can grab data,

00:06:53.000 --> 00:06:57.400
audio data, from the user's default
input device on their system.

00:06:57.400 --> 00:07:01.220
You can grab that audio data and
then pass it to a buffer object

00:07:01.840 --> 00:07:05.900
that can go and attach to a
source and play it back as output.

00:07:05.900 --> 00:07:08.960
So as you'll see here,
the first two APIs are for

00:07:09.060 --> 00:07:13.570
opening and closing your device,
similar to opening or closing

00:07:13.570 --> 00:07:15.900
the output device in OpenAL.

00:07:16.080 --> 00:07:21.440
The main difference with the open call
in the capture device call is that

00:07:21.520 --> 00:07:26.180
you also indicate the format of the
data that you want to receive when

00:07:26.330 --> 00:07:30.400
you grab the bytes from the library,
and also the size of the ring

00:07:30.400 --> 00:07:34.670
buffer that you want OpenAL to
set up to write data into.

00:07:34.900 --> 00:07:37.050
Once you have that device,
there are some calls for

00:07:37.050 --> 00:07:38.500
starting and stopping the device.

00:07:38.620 --> 00:07:40.880
There's really no need to be writing
into that ring buffer if you aren't

00:07:40.930 --> 00:07:43.220
going to be grabbing the data,
so you don't want to be

00:07:43.340 --> 00:07:46.450
using that processing time.

00:07:46.570 --> 00:07:49.680
There's an API for capturing the samples,
so you can fill a buffer

00:07:49.770 --> 00:07:51.060
with that audio data.

00:07:51.140 --> 00:07:56.020
And then also you can use the
AOC Get Integer API with the AOC Capture

00:07:56.040 --> 00:08:01.460
Samples property to discover how many
samples are available for you to grab.

00:08:01.570 --> 00:08:04.950
So I'll just walk through a real simple
scenario of how you'd use these APIs.

00:08:05.140 --> 00:08:07.610
As I mentioned, the first thing you'll
do is open a device.

00:08:07.680 --> 00:08:10.400
And so if I walk through
those parameters,

00:08:10.400 --> 00:08:13.680
we pass null at the beginning
because the Apple implementation

00:08:13.680 --> 00:08:18.110
is always going to use the default
input device on your user system.

00:08:18.260 --> 00:08:22.560
Now your user can set that in the
system prefs or the audio MIDI setup.

00:08:22.580 --> 00:08:25.100
And so it always uses that,
so you don't have to

00:08:25.100 --> 00:08:26.510
designate a device by name.

00:08:26.690 --> 00:08:30.640
Now we're also telling the capture
device that we want data that's at

00:08:30.640 --> 00:08:36.660
a sample rate of 44,100 and that
we want mono 16-bit integer data.

00:08:36.700 --> 00:08:40.300
Now that last guy there, the 1,024,
that's how many samples we

00:08:40.300 --> 00:08:41.820
want the ring buffer to be.

00:08:41.880 --> 00:08:44.750
And keep in mind that's
a number in samples,

00:08:44.830 --> 00:08:45.860
not in bytes.

00:08:45.910 --> 00:08:50.390
So if that comes back successful,
then we want to start capturing,

00:08:50.470 --> 00:08:53.570
have the device,
we want to have the library

00:08:53.700 --> 00:08:56.950
start writing data from the
device into our ring buffer.

00:08:57.090 --> 00:09:01.200
So it kind of goes merrily along,
chugging and filling up the ring buffer.

00:09:01.290 --> 00:09:04.760
And at some point you'll want to
discover how many samples are available.

00:09:04.760 --> 00:09:09.590
So we'll use the ALC get integer
call and the ALC capture samples,

00:09:09.600 --> 00:09:12.820
find out how many samples
are there for us to grab.

00:09:12.820 --> 00:09:15.820
And then once we have that value,
then we know how many we can request.

00:09:15.820 --> 00:09:18.260
So we'll use the ALC capture samples.

00:09:18.260 --> 00:09:20.360
Again, we pass it our device.

00:09:20.360 --> 00:09:23.440
We give it a buffer that's
appropriately sized for the amount

00:09:23.440 --> 00:09:25.210
of samples that we're requesting.

00:09:25.220 --> 00:09:26.710
And we tell it how many samples we want.

00:09:26.720 --> 00:09:29.960
And then the bytes are
written into that buffer.

00:09:29.960 --> 00:09:31.160
So it's a pretty simple mechanism.

00:09:31.160 --> 00:09:32.550
mechanism.

00:09:35.690 --> 00:09:42.400
So the next thing we have that's new
for 1.1 are some new distance models.

00:09:42.440 --> 00:09:48.150
Now the 1.0 specification had
one distance model that you could

00:09:48.230 --> 00:09:52.650
pass to the AL distance model API,
and that was an inverse distance model.

00:09:52.790 --> 00:09:57.520
And with 1.1, there have been two new
curves that were added.

00:09:57.610 --> 00:09:59.370
First an exponential curve.

00:09:59.500 --> 00:10:01.380
Now it's quite similar
to the inverse curve.

00:10:01.860 --> 00:10:06.240
Really the main difference in
the effect of attenuation with

00:10:06.240 --> 00:10:11.120
distance with this curve is that
as your roll-off factor increases,

00:10:11.330 --> 00:10:15.750
your attenuation occurs more
quickly as your source moves

00:10:15.830 --> 00:10:17.920
away from your listener object.

00:10:17.920 --> 00:10:21.870
In addition to the exponential model,
there's also a linear distance model.

00:10:21.910 --> 00:10:25.730
Now that's just a straight
attenuation line from no attenuation

00:10:25.740 --> 00:10:30.600
at the reference distance to full
attenuation at the max distance.

00:10:30.600 --> 00:10:34.360
So here we've got a graph
of the three curves.

00:10:34.360 --> 00:10:36.870
And the reason I wanted to show
you this is so you could see the

00:10:36.920 --> 00:10:41.520
similarities between the inverse and the
exponential model and the linear model.

00:10:41.520 --> 00:10:45.280
So what you'll see about the inverse
and the exponential model is that when

00:10:45.280 --> 00:10:48.630
they reach that maximum distance there,
that line on the right,

00:10:48.630 --> 00:10:53.760
the vertical line on the right,
you'll notice that the curve stops

00:10:53.760 --> 00:10:56.630
at that point and it flatlines.

00:10:56.660 --> 00:10:58.830
Well,
basically what that means is that any

00:10:58.830 --> 00:11:00.670
distance past that maximum distance,
that line on the left,

00:11:00.670 --> 00:11:05.070
that maximum distance that your source
is in relation to the listener object,

00:11:05.210 --> 00:11:07.410
there won't be any further attenuation.

00:11:07.410 --> 00:11:09.120
It'll stop at that distance.

00:11:09.120 --> 00:11:11.100
By contrast,
if you look at the linear model,

00:11:11.210 --> 00:11:14.560
it's just a straight line to that
maximum distance and once you get there,

00:11:14.560 --> 00:11:15.520
you're fully attenuated.

00:11:18.760 --> 00:11:26.400
Another feature of 1.1 are some offset
abilities for your application to set

00:11:26.400 --> 00:11:33.700
the playhead or get the playhead of
your open source object's buffer queue.

00:11:33.800 --> 00:11:36.880
So you can do this while it's
rendering or while it's not rendering,

00:11:36.880 --> 00:11:42.550
and you can get or set values in terms
of milliseconds or bytes or samples.

00:11:42.700 --> 00:11:45.700
So for instance, here we've got a really
simple buffer queue.

00:11:45.700 --> 00:11:48.700
It's just got two buffers,
a short one that's one second,

00:11:48.700 --> 00:11:53.160
that happens to be 44,000 samples,
and a second one that's two

00:11:53.160 --> 00:11:55.700
seconds and 88,000 samples.

00:11:55.740 --> 00:12:00.700
And so your application may,
the source may be chugging along playing,

00:12:00.700 --> 00:12:04.700
and the playhead may be where
that red arrow there indicates.

00:12:04.700 --> 00:12:09.700
And we could discover that value
by using the AO Get Source I APIs,

00:12:09.700 --> 00:12:12.690
and then the appropriate version,
whether we want the source or not.

00:12:12.710 --> 00:12:15.700
So we can use the samples or the
millisecond offset to get that value.

00:12:15.710 --> 00:12:19.700
Now we may want to jump, let's say,
to two and a half seconds in the buffer.

00:12:19.700 --> 00:12:25.700
So we'll use the AL Source I APIs and
then give it a value that's appropriate,

00:12:25.820 --> 00:12:26.700
and then it'll jump there.

00:12:26.700 --> 00:12:30.700
So that'll occur whether
you're rendering or not.

00:12:30.700 --> 00:12:34.700
So that's really sort of the
main new features of 1.1.

00:12:34.700 --> 00:12:38.700
So let me show you, let me have a demo,
have the demo machine up,

00:12:38.700 --> 00:12:41.380
and I'll show you some
of these in action.

00:12:45.600 --> 00:12:52.900
[Transcript missing]

00:12:58.390 --> 00:13:04.340
Oh, hey, here we go.

00:13:04.390 --> 00:13:07.000
Okay, I switched,
but I don't see anything.

00:13:08.800 --> 00:13:10.240
Oh, there we go.

00:13:10.340 --> 00:13:10.690
There we go.

00:13:10.850 --> 00:13:11.940
Yep, got it.

00:13:11.940 --> 00:13:13.670
Thanks.

00:13:13.800 --> 00:13:16.710
In the Core Audio SDK,
you actually can find a

00:13:16.840 --> 00:13:18.940
project called OpenAL Example.

00:13:18.940 --> 00:13:22.010
Sorry about that.

00:13:22.430 --> 00:13:27.760
This is just a simple OpenAL application
that creates a context and

00:13:27.760 --> 00:13:29.400
adds some source objects.

00:13:29.510 --> 00:13:33.150
All these objects have buffers attached.

00:13:33.180 --> 00:13:36.220
All these red guys and
yellow guys are sources.

00:13:36.220 --> 00:13:37.120
We can move them around.

00:13:37.230 --> 00:13:40.400
We've got surround in the room so you
should be able to hear these things.

00:13:40.450 --> 00:13:43.740
We can move our listener around.

00:13:43.740 --> 00:13:46.200
We can orient our listener.

00:13:48.300 --> 00:13:50.530
Right, so we've got our context.

00:13:50.540 --> 00:13:54.140
It's a top-down view,
so we're looking at X and Y here, not Z.

00:13:54.140 --> 00:13:57.890
I mean, not X and Z, not Y, sorry.

00:13:58.030 --> 00:14:00.760
So I'm going to turn a couple of
these off so we can demonstrate

00:14:00.760 --> 00:14:02.900
a couple of these features.

00:14:02.950 --> 00:14:05.420
So here we've got a
source and he's playing.

00:14:08.220 --> 00:14:12.960
As I mentioned, we have cone support now
in this implementation.

00:14:12.960 --> 00:14:14.800
So here we've got some cones.

00:14:14.840 --> 00:14:18.580
The way the cones work in OpenAL is
there's a notion of an inner cone,

00:14:18.600 --> 00:14:22.460
an outer cone, and an outer cone gain.

00:14:22.490 --> 00:14:23.700
So here we've got our inner cone.

00:14:23.700 --> 00:14:27.800
We can change the angle of that cone.

00:14:27.820 --> 00:14:32.450
And the outer cone,
we can change the angle of that guy.

00:14:32.800 --> 00:14:38.330
and then we have an outer cone gain
and I'll talk about that more as we go.

00:14:38.520 --> 00:14:41.850
So the way that the API works is
as your listener moves around,

00:14:41.860 --> 00:14:44.470
as long as he's within,
the listener is within the

00:14:44.470 --> 00:14:48.100
inner cone of that source,
there's no attenuation occurring at all.

00:14:48.200 --> 00:14:51.340
So I can move this here and as I move it,
I'll shut up in a second here.

00:14:51.390 --> 00:14:55.800
As I move it, you can hear there's no
change of attenuation.

00:14:58.170 --> 00:15:00.670
Alright,
so now as the listener moves outside

00:15:00.670 --> 00:15:04.330
of that inner cone gain and toward
the outside of the outer cone gain,

00:15:04.390 --> 00:15:06.800
we start getting some attenuation.

00:15:10.080 --> 00:15:12.710
Now the volume of the source that
will be heard by the listener once

00:15:12.750 --> 00:15:17.800
you're outside of that outer cone
gain is based completely on whatever

00:15:17.800 --> 00:15:19.220
the outer cone gain setting is.

00:15:19.250 --> 00:15:22.830
So if I change that and
raise that outer cone gain,

00:15:22.900 --> 00:15:25.230
you'll hear that we have some gain.

00:15:28.670 --> 00:15:31.020
So those are cone supports.

00:15:31.200 --> 00:15:34.200
As you can see,
it doesn't matter whether your listener

00:15:34.200 --> 00:15:35.500
is moving around your source object.

00:15:35.600 --> 00:15:42.600
Your source is moving
around your listener.

00:15:42.600 --> 00:15:48.600
Your source is in a different direction.

00:15:48.600 --> 00:15:51.380
Alright, so that's cone support.

00:15:52.800 --> 00:16:00.220
www.bobaron.com/audio/audio/

00:16:00.680 --> 00:16:04.590
So why don't I turn a different sound
on here that's kind of good for this.

00:16:04.690 --> 00:16:06.180
So we've got a car sound.

00:16:06.180 --> 00:16:08.900
As you can see, as you can hear,
as I move it around the listener,

00:16:08.930 --> 00:16:10.900
there's no pitch change.

00:16:16.400 --> 00:16:19.600
So if we apply some velocity
or some speed of sound

00:16:19.640 --> 00:16:22.630
setting to our source object,

00:16:23.410 --> 00:16:28.450
It'll be indicated by... Oh, wrong guy.

00:16:28.460 --> 00:16:29.420
Sorry.

00:16:29.420 --> 00:16:37.470
You can see the direction based on that
little nose that's coming out of there.

00:16:37.470 --> 00:16:40.800
You can hear that there's a pitch effect.

00:16:40.800 --> 00:16:40.800
And this is going to change as we
change the direction of that velocity...

00:16:40.800 --> 00:16:40.800
of that source speed of sound.

00:16:50.200 --> 00:16:54.400
The pitch is completely based on
the direction of the listener and

00:16:54.400 --> 00:16:56.500
the source objects and the vectors.

00:16:56.550 --> 00:17:00.800
As the vectors change with
the movement of the objects,

00:17:00.830 --> 00:17:03.450
you will get changes in pitch.

00:17:03.500 --> 00:17:09.460
But they are not based over some
time distance over some time

00:17:09.460 --> 00:17:09.460
period like real Doppler would be.

00:17:10.710 --> 00:17:13.620
Alright, so that's Doppler.

00:17:13.620 --> 00:17:17.610
Okay, let's turn that guy down.

00:17:19.000 --> 00:17:23.700
Another feature that I mentioned about
1.1 were some new distance models.

00:17:23.700 --> 00:17:27.730
Let's turn on this guy here.

00:17:30.100 --> 00:17:33.540
Alright, so what we've been listening
so far are all these objects

00:17:33.650 --> 00:17:37.250
that have been attenuating using
the default distance model,

00:17:37.250 --> 00:17:39.100
which is an inverse model.

00:17:39.100 --> 00:17:42.140
So you'll hear as I move the
source away from the listener,

00:17:42.140 --> 00:17:45.090
you'll hear some attenuation by distance.

00:17:45.100 --> 00:17:52.430
We should be hearing front to back.

00:17:57.000 --> 00:18:08.100
[Transcript missing]

00:18:08.900 --> 00:18:26.200
[Transcript missing]

00:18:27.950 --> 00:18:32.360
So our roll-off is a lot...
Our attenuation occurs much

00:18:32.800 --> 00:18:34.810
quicker with that formula.

00:18:35.050 --> 00:18:38.510
So that's exponential,
and then we have our linear guy here.

00:18:38.610 --> 00:18:42.390
Before I do that, let me change the max
distance of our object.

00:18:42.400 --> 00:18:52.910
We'll change it to 250,
and we'll switch to a linear model.

00:18:53.600 --> 00:18:57.320
As you can see now that we get
to 250 away from our listener,

00:18:57.320 --> 00:19:00.600
we're fully attenuated.

00:19:00.600 --> 00:19:05.040
Alright, so that's the distance models.

00:19:05.040 --> 00:19:07.920
And one of the big new features,
as I mentioned, was capture.

00:19:07.940 --> 00:19:14.060
So I've got this cool little snowball
USB microphone here and it's the

00:19:14.130 --> 00:19:15.660
device that's being used for capture.

00:19:15.660 --> 00:19:19.790
And the way this application works
is as soon as it launches it opens

00:19:19.800 --> 00:19:24.700
the capture device and it starts
capturing and this whole time it's

00:19:24.700 --> 00:19:28.020
been writing whatever this guy's
been capturing into the ring buffer.

00:19:28.100 --> 00:19:31.100
So I can now,
I'll go ahead and click on this button

00:19:31.300 --> 00:19:35.510
and it'll capture what I've been
saying here as I've been talking.

00:19:36.500 --> 00:19:41.920
It has then copied that data directly
into one of the buffer objects and

00:19:41.920 --> 00:19:45.990
then attached to a source so we can now
play it and move it around our context.

00:19:46.000 --> 00:19:50.000
Click on this button and it will
capture what I've been saying here.

00:19:50.000 --> 00:19:52.480
Okay, so that's capture.

00:19:52.520 --> 00:19:53.990
So if we could go back to slides.

00:19:54.000 --> 00:19:59.920
So those are some of the
features as they're working.

00:20:08.000 --> 00:20:10.690
Okay, so OpenAL extensions.

00:20:11.040 --> 00:20:14.650
The way that extensions work in
OpenAL is it's a mechanism for

00:20:14.650 --> 00:20:23.990
extending the API and discovering
whether an extension is there

00:20:24.160 --> 00:20:26.390
while your application is running.

00:20:26.720 --> 00:20:29.760
So it's got basically
three parts that you do.

00:20:29.890 --> 00:20:32.960
First,
you query for an extension by name.

00:20:33.060 --> 00:20:35.630
If it's available,
then you can go and get proc

00:20:35.780 --> 00:20:41.700
pointers or constant values,
again, by name using the get proc address

00:20:41.700 --> 00:20:44.490
or the get enum value APIs.

00:20:45.020 --> 00:20:49.740
Now some of the new features I mentioned
in 1.1 were some of those features

00:20:49.740 --> 00:20:54.140
that had existed as extensions
in various 1.0 implementations.

00:20:54.140 --> 00:20:57.000
Now they weren't on the Apple one,
but they were on some various other ones,

00:20:57.000 --> 00:21:00.530
and they were valuable for
the developer community,

00:21:00.530 --> 00:21:03.140
and that's why they got
rolled into the 1.1 spec.

00:21:03.180 --> 00:21:08.160
So the capture, the distance models,
the offset, those were all extensions

00:21:08.160 --> 00:21:11.140
in a previous life,
a 1.0 spec life.

00:21:11.140 --> 00:21:14.930
In the 1.1 implementation
that we've just delivered,

00:21:14.930 --> 00:21:19.140
we can also get access to those
features through that mechanism.

00:21:19.140 --> 00:21:23.210
So if you have a 1.0 application,
OpenAL application that was using these

00:21:23.450 --> 00:21:27.380
features through the extension mechanism,
you can also do that with

00:21:27.430 --> 00:21:31.140
this latest implementation,
as well as get at those through

00:21:31.140 --> 00:21:33.600
the new APIs that have been added.

00:21:34.000 --> 00:23:18.500
[Transcript missing]

00:23:19.740 --> 00:23:24.460
Okay, so the next thing we
have are some Mac OS X,

00:23:24.460 --> 00:23:28.400
a Mac OS X extension,
and this is really just to expose some

00:23:28.400 --> 00:23:32.190
of the specific Core Audio underpinnings
of the implementation.

00:23:32.290 --> 00:23:35.200
So we can deal with
the mixer sample rate,

00:23:35.200 --> 00:23:38.200
forced stereo rendering,
rendering quality, mixer bus,

00:23:38.200 --> 00:23:41.180
and let me walk through
these one at a time.

00:23:41.320 --> 00:23:45.310
So getting or setting the mixer
output rate is important for you,

00:23:45.310 --> 00:23:47.780
or may be important for you,
depending on the sample rate

00:23:48.080 --> 00:23:51.150
of the sources that you're
playing in your application,

00:23:51.310 --> 00:23:54.780
and what hardware,
what sample rate that the hardware

00:23:54.780 --> 00:23:57.040
is running on your user system.

00:23:57.160 --> 00:24:01.660
So it's a little easier to explain
if I show you this little diagram.

00:24:01.710 --> 00:24:08.100
So this is basically the Core Audio stack
in the implementation of OpenAL.

00:24:08.150 --> 00:24:13.100
When your device is open
and your context is made,

00:24:13.440 --> 00:24:16.370
basically what happens is you'll
look at the bottom box there,

00:24:16.370 --> 00:24:18.960
it's the HAL device,
that's your user's hardware.

00:24:19.100 --> 00:24:21.930
Now it's going to be running
at some particular sample rate,

00:24:21.930 --> 00:24:25.350
and that sample rate gets propagated
down through the audio units that

00:24:25.350 --> 00:24:27.980
are used for rendering in OpenAL.

00:24:28.100 --> 00:24:32.050
So the thing that connects to that
device is a default output unit.

00:24:32.180 --> 00:24:35.230
Now that 48K in this example
gets propagated down,

00:24:35.290 --> 00:24:39.090
and the 3D mixer then is connected
to the default output unit.

00:24:39.100 --> 00:24:42.890
So by default, what happens is all of
those red boxes there,

00:24:42.890 --> 00:24:46.320
those represent OpenAL sources that,
for instance,

00:24:46.460 --> 00:24:49.090
might be playing 22 kilohertz data.

00:24:49.100 --> 00:24:53.100
What's going to happen is every one of
those gets sample rate converted to 48K,

00:24:53.100 --> 00:24:57.100
and then those are mixed together
to whatever stream format we're

00:24:57.100 --> 00:24:59.980
rendering out to the hardware,
and then that gets passed down the chain.

00:25:00.130 --> 00:25:02.560
Well,
that's a little inefficient if you know

00:25:02.560 --> 00:25:07.090
that you're going to be rendering sources
that are that particular sample rate.

00:25:07.290 --> 00:25:11.730
So you can use this API then,
in this example, or others,

00:25:11.760 --> 00:25:15.080
to set the mixer output rate to 22K.

00:25:15.120 --> 00:25:19.100
Then what happens is all of those sources
get mixed at their native samples.

00:25:19.100 --> 00:25:22.100
So you can see that the sample rate
is the same as the sample rate,

00:25:22.100 --> 00:25:26.100
and then when that 22K data is
passed to the default output unit,

00:25:26.100 --> 00:25:28.100
the sample rate conversion gets done
there on two or four or five streams,

00:25:28.100 --> 00:25:30.100
whatever you happen to be
rendering to the hardware.

00:25:30.250 --> 00:25:33.800
So this just gives you a little
bit of control to be smart and

00:25:33.810 --> 00:25:38.090
efficient and make your application
just run that much better.

00:25:38.810 --> 00:25:41.800
The next thing we have
is the rendering quality,

00:25:41.800 --> 00:25:44.090
set and get rendering quality.

00:25:44.190 --> 00:25:48.100
And the reason we added this is
the 3D mixer audio unit that does

00:25:48.100 --> 00:25:51.450
really the bulk of the work in
this implementation has a notion

00:25:51.450 --> 00:25:54.490
of various rendering qualities,
so you can make a trade-off

00:25:54.550 --> 00:26:00.570
between CPU usage and quality.

00:26:00.830 --> 00:26:06.100
If your user is running a system
that has four or five speakers,

00:26:06.120 --> 00:26:07.260
basically this is a no-op.

00:26:07.310 --> 00:26:10.550
You're always going to be using the
low or the normal rendering quality.

00:26:10.680 --> 00:26:15.180
But if your user is using
headphones or a stereo system,

00:26:15.190 --> 00:26:19.160
you have the ability to give them
a high quality HRTF rendering mode.

00:26:19.250 --> 00:26:21.580
And of course this is a trade-off again.

00:26:21.910 --> 00:26:25.570
The HRTF is more expensive,
but it may be worth it for your

00:26:25.570 --> 00:26:30.280
user if they're on a system that
can handle those extra cycles.

00:26:32.200 --> 00:26:33.980
All right, the next thing we have is
a render channel count.

00:26:34.190 --> 00:26:38.540
The reason you might want to do this
is the Apple implementation of OpenAO,

00:26:38.540 --> 00:26:42.310
what it does is it goes and
discovers how many channels are

00:26:42.310 --> 00:26:46.410
on your user's hardware when the
context and the device are set up.

00:26:46.480 --> 00:26:51.300
So if your user has a system
that has 5 or more channels,

00:26:51.300 --> 00:26:53.400
OpenAO is going to render to 5.0.

00:26:53.580 --> 00:26:57.520
If your user has 4 channels
connected to their hardware,

00:26:57.520 --> 00:27:01.180
if their hardware is running 4 channels,
OpenAO is going to render to quad,

00:27:01.480 --> 00:27:03.100
and then by default it runs to stereo.

00:27:03.100 --> 00:27:09.500
Well, you might have a circumstance where
your user has maybe a 5.0 system,

00:27:09.500 --> 00:27:14.090
but they want to plug some headphones in,
and in that case you wouldn't

00:27:14.310 --> 00:27:18.210
want the library to be rendering
to 5.0 if your user wasn't going

00:27:18.240 --> 00:27:19.670
to get all of those channels.

00:27:19.680 --> 00:27:23.050
So you can force the rendering to
stereo regardless of your user's

00:27:23.210 --> 00:27:25.410
hardware by using these two functions.

00:27:28.380 --> 00:27:32.300
Lastly, the maximum mixer buses.

00:27:32.340 --> 00:27:38.300
By default, the OpenAL 3D Mixer
Audio Unit has 64 input buses,

00:27:38.360 --> 00:27:42.510
and that's sort of the limitation
that gets passed into OpenAL for

00:27:42.510 --> 00:27:46.300
the amount of simultaneous sources
that you can have rendering.

00:27:46.300 --> 00:27:48.290
Now, this is a settable property.

00:27:48.290 --> 00:27:50.300
The 3D Mixer can have more buses than 64.

00:27:50.340 --> 00:27:52.300
That just happens to be the default.

00:27:52.300 --> 00:27:55.300
So if you need to render to
more than 64 sources at a time,

00:27:55.300 --> 00:27:58.300
you can then go ahead
and make that setting.

00:27:58.300 --> 00:28:02.700
Now, whenever you make it,
you also should then also get the maximum

00:28:02.770 --> 00:28:07.320
mixer buses to confirm that the setting
that you wanted was actually possible and

00:28:07.550 --> 00:28:10.300
see how many mixer buses were available.

00:28:12.120 --> 00:28:14.500
Lastly,
we'll talk about the ASA extension.

00:28:14.500 --> 00:28:19.000
This is kind of the big new thing
for us by adding reverb and occlusion

00:28:19.000 --> 00:28:21.760
and obstruction effects to OpenAL.

00:28:22.000 --> 00:28:26.480
This will be available whenever your
application is running on a system that

00:28:26.550 --> 00:28:30.000
has the 2.2 3D mixer audio unit present.

00:28:30.000 --> 00:28:35.000
And that also shipped with 1047 along
with our 1.1 implementation of OpenAL.

00:28:35.000 --> 00:28:37.980
So right out of the box
you should get that.

00:28:39.320 --> 00:28:40.960
The extension is pretty simple.

00:28:40.960 --> 00:28:43.200
It's basically four APIs and
a bunch of constants.

00:28:43.200 --> 00:28:46.200
I'll talk about the constants in a bit,
the properties.

00:28:46.510 --> 00:28:49.750
There's a get and a set listener
property call and a get and

00:28:49.760 --> 00:28:51.200
a set source property call.

00:28:51.200 --> 00:28:55.890
They all take a property,
which is an integer, some data,

00:28:55.890 --> 00:28:58.730
data size,
and of course the source variance

00:28:58.730 --> 00:29:03.000
of those APIs also take a source ID,
an OpenAL source ID.

00:29:04.350 --> 00:29:07.030
So let's talk a little bit
about the source properties.

00:29:07.260 --> 00:29:10.130
First, we have a reverb send level.

00:29:10.480 --> 00:29:12.680
That's a per source property.

00:29:12.690 --> 00:29:16.760
It's a wet/dry mix level where zero,
the default value of zero,

00:29:16.760 --> 00:29:19.260
means that there's no reverb
being applied to your source.

00:29:19.270 --> 00:29:24.360
And a value of 1.0 means all you're
hearing is the reverb return,

00:29:24.360 --> 00:29:27.010
no actual direct source signal.

00:29:28.460 --> 00:29:29.790
Next we have occlusion.

00:29:29.880 --> 00:29:35.270
Occlusion is a low-pass filter
that gets applied to the source's

00:29:36.030 --> 00:29:40.400
direct signal to the listener.

00:29:40.400 --> 00:29:45.540
So you can emulate your source
being in a different physical

00:29:45.540 --> 00:29:48.340
space by using this property.

00:29:48.470 --> 00:29:50.150
It's a setting in dB.

00:29:50.240 --> 00:29:53.400
It takes a float from 0 to -100.

00:29:53.400 --> 00:29:57.460
And for occlusion,
the low-pass filter is also applied to

00:29:57.600 --> 00:29:59.400
the signal that's sent out to the reverb.

00:29:59.400 --> 00:30:06.790
So both reverb send, reverb return,
and direct signal get filtered.

00:30:07.690 --> 00:30:12.000
Okay, now the last source property
is the ASA obstruction.

00:30:12.170 --> 00:30:14.420
This is also a low-pass filter.

00:30:14.470 --> 00:30:17.650
It gets applied to the
direct signal of your source.

00:30:17.910 --> 00:30:23.620
Again, it's a float value that's
in dB from 0 to -100.

00:30:23.620 --> 00:30:27.950
And the difference here is that the
signal that's sent out to the reverb

00:30:27.950 --> 00:30:30.630
does not get the low-pass filter applied.

00:30:30.630 --> 00:30:34.280
So all of the sparkly transients
of your reverbs will still be

00:30:34.280 --> 00:30:38.010
heard even though you're applying
obstruction to your source object.

00:30:40.360 --> 00:30:41.680
So we have some listener properties.

00:30:41.760 --> 00:30:46.030
They're pretty standard,
what you would expect.

00:30:46.060 --> 00:30:49.340
We have to be able to turn our
reverb on and set a global level.

00:30:49.340 --> 00:30:52.850
And then, just like we have the rendering
quality in the 3D mixer,

00:30:52.860 --> 00:30:54.640
we have the ability to
set a reverb quality,

00:30:54.650 --> 00:30:57.410
so you can make a trade-off
between the quality of that

00:30:57.490 --> 00:31:00.490
reverb and how much CPU is needed.

00:31:00.540 --> 00:31:02.820
So there's a reverb quality.

00:31:03.900 --> 00:31:09.260
The reverb also has some
EQ settings so that you can apply

00:31:09.330 --> 00:31:12.190
some EQ to the reverb signal.

00:31:12.240 --> 00:31:15.670
It's basically a parametric EQ,
so if you're familiar with parametric EQ,

00:31:15.670 --> 00:31:19.560
you know that there's a gain,
which is a cutter boost, a bandwidth,

00:31:19.750 --> 00:31:24.400
and a frequency for the
center of that bandwidth.

00:31:24.540 --> 00:31:27.560
These properties are
settable in real time.

00:31:27.560 --> 00:31:31.470
They're also storable in AU preset files,
and I'll talk a little bit more

00:31:31.470 --> 00:31:33.010
about that in just a second.

00:31:34.110 --> 00:31:36.830
So there's a couple of ways
that you can get a particular

00:31:36.870 --> 00:31:38.720
reverb sound into OpenAL.

00:31:38.720 --> 00:31:40.770
First is using the reverb room type.

00:31:40.820 --> 00:31:45.860
We've defined a bunch of constants
that you can pass as values for there.

00:31:45.860 --> 00:31:50.470
A lot of what you might expect,
various small, large rooms, chambers,

00:31:50.470 --> 00:31:53.740
cathedral,
they're pretty self-explanatory.

00:31:53.740 --> 00:31:56.870
And those are just constant
values that you can pass in.

00:31:56.900 --> 00:32:03.620
But more interestingly is the ability for
you to load AU preset files at runtime.

00:32:03.620 --> 00:32:08.570
And so those AU preset files are
things that you can save by running

00:32:08.570 --> 00:32:12.770
some signal through the matrix
reverb and saving that as a preset

00:32:12.780 --> 00:32:14.380
and then loading it at runtime.

00:32:14.380 --> 00:32:16.140
And I'll show you how to
do that in just a second.

00:32:18.850 --> 00:32:22.310
So just a little bit of a code
snippet here about how the

00:32:22.310 --> 00:32:26.400
extension mechanism gets used,
for example, with the ASA extension.

00:32:26.550 --> 00:32:32.120
So you see that one line
of code that's in yellow.

00:32:32.240 --> 00:32:36.400
We're querying to see if the extension
that we want is present at runtime.

00:32:36.520 --> 00:32:39.700
So we're going to call it by name.

00:32:39.700 --> 00:32:40.370
We're going to ask for it by name.

00:32:40.400 --> 00:32:42.400
If that happens to come back true,
we're on a system that has it,

00:32:42.650 --> 00:32:46.350
then we go and, for instance,
go get the proc pointer for

00:32:46.350 --> 00:32:48.400
the ASA set listener call.

00:32:48.400 --> 00:32:51.240
Now, once this is done,
now you can use this

00:32:51.240 --> 00:32:53.350
function to access that API.

00:32:53.470 --> 00:32:57.810
So here's a couple of really
simple boxes on how you can then

00:32:57.810 --> 00:33:00.400
set up one of your reverb types.

00:33:00.400 --> 00:33:05.400
So we've got one here where we're
using the reverb room type property.

00:33:05.400 --> 00:33:08.550
We're passing in the reverb
room type cathedral constant,

00:33:08.550 --> 00:33:11.890
and just by making this call then,
that's the reverb that'll

00:33:11.890 --> 00:33:13.390
get used by OpenAL.

00:33:13.480 --> 00:33:18.100
By contrast, the box below,
that little tiny function there,

00:33:18.150 --> 00:33:22.600
that's a path to your AU preset
file that gets passed on to the

00:33:22.600 --> 00:33:30.050
set listener proc call using
the ASA reverb preset property.

00:33:30.810 --> 00:33:33.500
So with that,
if we could go back to the demo machine,

00:33:33.500 --> 00:33:37.650
I'll give you a little demo on how
you could go ahead and make those

00:33:37.650 --> 00:33:42.150
custom reverbs just with things
that are already on your system.

00:33:43.150 --> 00:33:46.620
So what I've got here is a document.

00:33:47.330 --> 00:33:50.400
This is an AU Lab document,
and Michael's going to talk a

00:33:50.430 --> 00:33:52.300
little bit more about AU in a bit.

00:33:52.300 --> 00:33:56.820
But this is a document that
has a sound file attached,

00:33:56.820 --> 00:34:03.180
and in this channel strip here,
we also have a Matrix Reverb

00:34:03.200 --> 00:34:05.090
Audio Unit installed.

00:34:05.180 --> 00:34:08.470
So we've got a reverb here,
so let me play this sound.

00:34:12.700 --> 00:34:15.700
Alright, so there's our dry signal.

00:34:15.700 --> 00:34:19.700
Here's our reverb.

00:34:19.700 --> 00:34:24.700
Now we can go ahead and make
some reverb settings here.

00:34:24.700 --> 00:34:29.080
I'll just try and do something
drastic here so you can hear it.

00:34:31.100 --> 00:34:33.700
There we go, that's pretty drastic.

00:34:33.700 --> 00:34:36.430
Now if you notice these last three
parameters at the bottom here,

00:34:36.430 --> 00:34:39.200
the filter frequency, filter bandwidth,
and filter gain,

00:34:39.200 --> 00:34:44.100
these equate to those EQ properties that
you can set on your listener reverb EQ.

00:34:44.100 --> 00:34:47.540
So these can be saved
along with a preset.

00:34:49.600 --> 00:34:54.640
and I will boost it,
do something drastic there.

00:34:54.640 --> 00:34:58.040
Now we can save this preset out.

00:34:58.040 --> 00:34:58.040
We're going to save this preset.

00:35:04.500 --> 00:35:06.140
We've saved the preset.

00:35:06.140 --> 00:35:07.720
I don't need to save the document.

00:35:07.720 --> 00:35:09.590
Now we have a preset file on our system.

00:35:09.590 --> 00:35:13.280
Now you can use that preset
file to load at runtime.

00:35:13.420 --> 00:35:17.290
So if I launch my OpenAL example
application again,

00:35:18.190 --> 00:35:21.130
Maybe you spotted this guy
before I covered it up.

00:35:21.210 --> 00:35:26.800
So here's the ASA extension parameters
that are exposed in the API.

00:35:28.060 --> 00:35:32.000
So let me get just one again so
that we can kind of hear the reverb.

00:35:32.000 --> 00:35:34.400
So what we have right now
is no reverb being applied.

00:35:34.400 --> 00:35:36.700
So let's turn on our reverb.

00:35:37.300 --> 00:35:40.010
Set the quality to max, that's fine.

00:35:40.070 --> 00:35:42.800
And let's set it to the cathedral.

00:35:43.700 --> 00:35:45.180
Okay,
so you don't hear anything yet because

00:35:45.180 --> 00:35:50.700
we haven't actually changed the dry/wet
mix of that particular source object.

00:35:50.700 --> 00:36:00.160
So now here we have OpenAL source
object sending to a reverb.

00:36:00.160 --> 00:36:03.600
Let me bring that back and
I'll show you occlusion.

00:36:07.600 --> 00:36:12.900
[Transcript missing]

00:36:16.610 --> 00:36:19.680
So as you notice,
with occlusion and obstruction,

00:36:20.250 --> 00:36:25.740
both are being, a low pass filter is
being applied to both.

00:36:25.740 --> 00:36:27.850
But there's no reverb
playing so you don't hear a

00:36:27.850 --> 00:36:29.450
difference in how these behave.

00:36:29.510 --> 00:36:36.840
So let me change to a reverb
preset that I had made earlier.

00:36:36.840 --> 00:36:40.440
This is my airport terminal preset.

00:36:46.660 --> 00:36:49.330
Alright,
so now I'll apply some occlusion.

00:36:56.000 --> 00:36:58.930
As you can hear,
both the direct sound and the

00:36:59.030 --> 00:37:02.010
reverb return is being filtered.

00:37:04.650 --> 00:37:09.800
But as I apply obstruction,
if you listen carefully,

00:37:09.810 --> 00:37:11.530
it may be a little difficult in the hall.

00:37:11.560 --> 00:37:13.480
If you listen carefully,
the direct signal is

00:37:13.500 --> 00:37:15.380
going to be filtered,
but the reverb trails

00:37:15.380 --> 00:37:17.390
will remain the same.

00:37:22.810 --> 00:37:30.800
So really obstruction is used to
emulate something that's really between

00:37:30.800 --> 00:37:40.060
your listener and your source object,
but in the still the same physical space.

00:37:40.110 --> 00:37:43.170
All that reverb characteristics
will stay the same.

00:37:43.250 --> 00:37:46.310
Just a couple other
little things to show you.

00:37:46.310 --> 00:37:50.010
As I change my custom presets,
you'll notice that the

00:37:50.010 --> 00:37:52.090
EQ settings will change.

00:37:56.000 --> 00:38:02.590
Again, because those are stored along
with the AU preset files.

00:38:02.920 --> 00:38:08.170
So that pretty much sums
up OpenAL for Mac OS X.

00:38:08.190 --> 00:38:11.040
I'm going to pass it over
to Michael Hopkins now,

00:38:11.040 --> 00:38:13.340
and he's going to talk about AULAB,
which you just saw,

00:38:13.340 --> 00:38:15.850
in a little bit more detail.

00:38:16.480 --> 00:38:17.140
Thank you, Bob.

00:38:17.140 --> 00:38:22.610
Could I go back to slides, please?

00:38:26.380 --> 00:38:29.040
Before I jump right into
new features in AU Lab,

00:38:29.170 --> 00:38:32.790
I thought I'd start by providing
a bit of context by talking about

00:38:32.790 --> 00:38:37.300
audio units and a little bit
about host applications as well.

00:38:38.140 --> 00:38:43.200
Audio Units are the plug-in
specification for audio on Mac OS X.

00:38:43.320 --> 00:38:46.380
The Audio Unit is packaged
as a component bundle,

00:38:46.460 --> 00:38:50.250
and a host application uses the
component manager to locate a

00:38:50.250 --> 00:38:54.040
specific Audio Unit and then open it.

00:38:54.040 --> 00:38:59.310
A component bundle can also
contain more than one Audio Unit.

00:38:59.430 --> 00:39:02.100
The host application,
when it loads the Audio Unit,

00:39:02.100 --> 00:39:07.390
can then present a custom user interface,
whether it be Carbon or Cocoa.

00:39:08.200 --> 00:40:05.500
[Transcript missing]

00:40:05.680 --> 00:40:08.870
Offline units which perform
processing that can't be accomplished

00:40:08.950 --> 00:40:12.890
in real time such as reversing
the contents of an audio stream.

00:40:12.890 --> 00:40:16.320
And finally the Panner Unit which
is new to Leopard which James will

00:40:16.320 --> 00:40:19.990
be talking about in great detail
later on in the presentation.

00:40:21.040 --> 00:40:24.320
There are many different host
applications on Mac OS X,

00:40:24.320 --> 00:40:26.500
and this list is by no means complete.

00:40:26.670 --> 00:40:31.340
And these target a number of different
users such as the professional user,

00:40:31.340 --> 00:40:36.000
a DJ performing live in a hall,
the consumer hobbyist,

00:40:36.140 --> 00:40:39.490
or even the developer,
where applications such as AU Lab,

00:40:39.490 --> 00:40:43.530
which we'll talk about in a minute,
are used for testing purposes

00:40:43.530 --> 00:40:45.790
by many third-party vendors.

00:40:46.360 --> 00:40:49.500
Let me talk about this
application now in more detail.

00:40:49.540 --> 00:40:51.980
As we mentioned,
it's part of your development

00:40:51.980 --> 00:40:55.440
tools installation on Tiger,
and now there's a new version

00:40:55.440 --> 00:40:57.450
that comes with your Leopard Seed.

00:40:57.730 --> 00:41:01.970
It supports mono, stereo,
and now multi-channel audio units,

00:41:01.970 --> 00:41:05.640
and is capable of displaying the
Carbon and Cocoa user interfaces,

00:41:05.640 --> 00:41:10.360
or also providing a generic view
if that custom view is not present.

00:41:11.520 --> 00:41:15.660
New features in the AU Lab 2.0
version on your Leopard Seed

00:41:15.700 --> 00:41:19.060
include a patch manager,
which allows you to group a number

00:41:19.060 --> 00:41:23.320
of different tracks together and
quickly switch between these groups.

00:41:23.320 --> 00:41:29.180
A studio view that allows you to see an
overview of your MIDI setup and the audio

00:41:29.180 --> 00:41:32.110
input and outputs for your document.

00:41:32.120 --> 00:41:36.030
A visibility feature that allows
you to toggle the visibility of

00:41:36.040 --> 00:41:38.880
different tracks based on their type.

00:41:38.880 --> 00:41:43.110
And our marquee feature for AU Lab,
which is improved audio unit support,

00:41:43.110 --> 00:41:47.000
including multi-channel support and
support for the new pattern unit type.

00:41:49.220 --> 00:41:52.690
Now I'd like to focus a
bit on patch management.

00:41:52.690 --> 00:41:54.590
As I mentioned,
this feature allows you to

00:41:54.600 --> 00:41:57.780
create groups of tracks,
which I'll subsequently

00:41:57.880 --> 00:41:59.100
refer to as patches.

00:41:59.190 --> 00:42:03.110
And these patches are saved
directly in the document file.

00:42:03.340 --> 00:42:07.730
You have created for you by default
a default patch which contains

00:42:07.830 --> 00:42:09.840
all the tracks in the document.

00:42:10.050 --> 00:42:14.440
And you can switch between
these tracks simply by clicking.

00:42:14.630 --> 00:42:18.400
Any track that is not part of
the active patch does not consume

00:42:18.400 --> 00:42:21.630
CPU resources since it's not active.

00:42:21.930 --> 00:42:23.360
Let me look at an example here.

00:42:23.580 --> 00:42:27.440
As you can see,
we have a rather complex document open,

00:42:27.440 --> 00:42:30.500
and the patch manager appears on
the right-hand side as a drawer

00:42:30.810 --> 00:42:33.460
attached to the document window.

00:42:33.490 --> 00:42:37.550
You can imagine that this scenario would
be useful for somebody performing in a

00:42:37.700 --> 00:42:42.140
live performance situation where they
have a number of different tracks that

00:42:42.140 --> 00:42:45.310
are all connected to the same instrument,
and they want to quickly

00:42:45.310 --> 00:42:46.660
switch between them.

00:42:46.690 --> 00:42:50.850
It's also useful for a developer who
has several different tracks that each

00:42:50.860 --> 00:42:54.640
is containing the same audio unit,
but with a different preset.

00:42:54.880 --> 00:42:58.380
The developer could then quickly
switch between them using

00:42:58.450 --> 00:43:00.080
the patch manager feature.

00:43:00.290 --> 00:43:02.520
So let's look at this in more detail.

00:43:02.540 --> 00:43:04.820
As you can see in the upper
right-hand corner there,

00:43:04.820 --> 00:43:09.020
the default patch is listed in bold,
meaning that it's the active patch,

00:43:09.050 --> 00:43:11.980
and therefore you see all
the tracks in the document.

00:43:12.010 --> 00:43:14.600
There are three additional
patches defined,

00:43:14.630 --> 00:43:19.730
the first one being drum and bass,
and you'll see a number of bullets

00:43:19.780 --> 00:43:24.420
to the right of each track name,
and these indicate whether that specific

00:43:24.420 --> 00:43:26.300
track is part of that active patch.

00:43:26.300 --> 00:43:29.160
The first item being
in gray is not active,

00:43:29.170 --> 00:43:33.060
whereas the bass track is,
and therefore appears in orange.

00:43:33.340 --> 00:43:36.660
So if I switch between the
default patch and our first patch,

00:43:36.660 --> 00:43:40.190
the drum and bass patch,
you'll see that now we have a different

00:43:40.190 --> 00:43:42.100
number of tracks that are active.

00:43:42.140 --> 00:43:46.660
Switching again changes
those tracks again based on

00:43:46.660 --> 00:43:48.870
whether they're in that patch.

00:43:49.180 --> 00:43:51.980
So it's a really nice
new feature in AU Lab.

00:43:52.050 --> 00:43:56.500
Continuing on, we have a studio view,
which is also in that drawer,

00:43:56.660 --> 00:44:02.100
and that is comprised of two components:
a MIDI view and an audio view.

00:44:02.120 --> 00:44:05.290
The MIDI section shows an overview
of all the sources that each

00:44:05.300 --> 00:44:09.220
instrument or music effect is using,
and it's listed in a

00:44:09.220 --> 00:44:12.570
hierarchical fashion,
allowing you to easily switch

00:44:12.570 --> 00:44:16.290
the source simply by dragging
and dropping those items.

00:44:16.620 --> 00:44:20.350
The Audio View provides a
summary and editing of the audio

00:44:20.350 --> 00:44:23.760
settings such as the device,
and also shows you the channel

00:44:23.760 --> 00:44:27.500
assignments that each one of those
input and output tracks are using.

00:44:27.500 --> 00:44:30.830
We'll see this in my demo in a bit.

00:44:35.400 --> 00:44:39.380
And now our key feature which is
multi-channel audio unit support

00:44:39.920 --> 00:44:44.740
which we define in AU Lab as being
comprised of more than two channels.

00:44:44.830 --> 00:44:49.480
Each channel of audio goes to a specific
speaker and the speakers can be arranged

00:44:49.480 --> 00:44:52.040
in many different configurations.

00:44:52.140 --> 00:44:56.920
We've chosen three basic types to
represent in AU Lab based on their

00:44:57.000 --> 00:44:59.730
popularity and how prevalent they are.

00:44:59.920 --> 00:45:02.700
The first one,
the surround configuration,

00:45:02.960 --> 00:45:08.030
is typically used by home theater
or cinema applications where you

00:45:08.030 --> 00:45:11.810
have five or more satellite speakers
arranged in a circle around the

00:45:11.820 --> 00:45:15.880
listener which is represented by
the white couch here in the diagram.

00:45:15.950 --> 00:45:20.570
The listener would be facing
the center speaker which is

00:45:20.590 --> 00:45:22.780
located above the screen.

00:45:23.010 --> 00:45:28.150
In this application,
we also can have an LFE channel where

00:45:28.150 --> 00:45:31.280
all the low frequency effects are sent.

00:45:32.100 --> 00:45:36.380
An additional layout that we have in
AU Lab is the geometric layout featuring

00:45:36.380 --> 00:45:40.500
the ever popular quadraphonic layout
for those of you that remember that.

00:45:40.630 --> 00:45:46.020
And this type of layout allows a
regularly spaced geometry which in

00:45:46.020 --> 00:45:50.900
the diagram here you'll see is a
hexagonal or six channel layout,

00:45:50.910 --> 00:45:54.160
each of which is separated
by an angle of 60 degrees.

00:45:54.280 --> 00:45:59.770
And this type of layout is sometimes used
in concert environments or concert halls.

00:46:00.130 --> 00:46:03.260
Our final configuration is
a constrained configuration,

00:46:03.260 --> 00:46:05.390
which you can imagine at a
stadium where you're seeing

00:46:05.400 --> 00:46:07.180
Madonna or something like that.

00:46:07.320 --> 00:46:10.730
And it allows you to have three
or more speakers arranged in an

00:46:10.740 --> 00:46:15.010
arc in front of the listener,
where each speaker is equidistant.

00:46:15.160 --> 00:46:19.110
And the first and last speaker
define a specific spanning angle,

00:46:19.110 --> 00:46:21.630
which in this case is 60 degrees.

00:46:23.800 --> 00:46:26.840
In AU Lab now, every track,
instead of being able to

00:46:26.840 --> 00:46:29.500
support mono or stereo,
can now have up to eight

00:46:29.560 --> 00:46:30.570
channels of output.

00:46:30.700 --> 00:46:34.760
We do this by defining
an audio channel layout,

00:46:34.880 --> 00:46:38.900
and you can have one per document
regardless of how many multi-channel

00:46:38.930 --> 00:46:40.600
outputs you have in your document.

00:46:40.700 --> 00:46:43.640
And this audio channel layout,
which James will be talking

00:46:43.720 --> 00:46:47.350
about in more detail later,
defines both the channel ordering

00:46:47.670 --> 00:46:49.110
and the speaker positions.

00:46:49.810 --> 00:46:53.750
Additionally,
now we have support for the new audio,

00:46:53.890 --> 00:46:57.960
excuse me, the panner unit,
or you can also choose to use the

00:46:58.020 --> 00:47:00.490
built-in surround panner in AU Lab.

00:47:00.700 --> 00:47:06.770
Now I'd like to switch the demo station,
where we'll look at this in more detail.

00:47:09.960 --> 00:47:11.940
Demo, please?

00:47:12.170 --> 00:47:13.610
Thank you.

00:47:13.810 --> 00:47:16.800
So I'm going to go ahead
and launch AULAB here.

00:47:16.840 --> 00:47:19.720
And once AULAB comes up,
you'll see that we're presented with

00:47:19.720 --> 00:47:25.140
a document configuration assistant
that allows us to specify the input

00:47:25.140 --> 00:47:30.360
and output channels of the document,
starting here with a

00:47:30.380 --> 00:47:32.760
stereo default output.

00:47:32.770 --> 00:47:37.520
I can choose to add or remove
channels here or change the

00:47:37.570 --> 00:47:40.380
configuration of each output track.

00:47:40.420 --> 00:47:44.930
And you'll notice that the view
always shows the total number of

00:47:44.930 --> 00:47:48.290
channels that the outputs will have.

00:47:48.730 --> 00:47:51.270
For the purposes of this demo,
I'm going to go ahead and add a

00:47:51.270 --> 00:47:55.250
single multichannel output track.

00:47:55.250 --> 00:48:00.020
And the dialog expands to allow us to
choose the configuration of that track.

00:48:00.270 --> 00:48:04.280
And you'll also notice that we
have a diagram indicating the

00:48:04.280 --> 00:48:06.330
position of those speakers.

00:48:06.650 --> 00:48:09.270
We can determine whether
we want to include a center

00:48:09.270 --> 00:48:11.600
channel or an LFE channel,
for example.

00:48:11.600 --> 00:48:14.700
And you'll notice that
as we choose those,

00:48:14.730 --> 00:48:18.540
the view updates to show you how many
total channels your output will be using.

00:48:18.600 --> 00:48:22.840
And these allow me to choose the
formats that I mentioned earlier,

00:48:22.850 --> 00:48:27.510
the constrained format,
geometric layouts,

00:48:27.590 --> 00:48:29.600
as well as the surround layouts.

00:48:29.600 --> 00:48:33.470
And I'm going to go ahead for
the purposes of this example

00:48:33.620 --> 00:48:38.230
and use a 5.1 surround layout
where I'm using five channels,

00:48:38.230 --> 00:48:39.600
no LFE channel.

00:48:39.600 --> 00:48:45.490
I click next and now configure the
input by adding a single stereo input.

00:48:45.800 --> 00:48:50.200
And now I'm ready to configure the device
that we'll be using for our document.

00:48:50.200 --> 00:48:53.160
I'm going to switch from built-in
to our Firewire device which

00:48:53.200 --> 00:48:56.060
supports more than stereo.

00:48:56.090 --> 00:48:59.800
And you'll notice now that
I have a five channel output,

00:48:59.800 --> 00:49:05.180
but I need to specify the
channel ordering for that

00:49:05.260 --> 00:49:07.000
since this is not correct.

00:49:07.290 --> 00:49:10.070
In this hall I have left
assigned to channel one,

00:49:10.150 --> 00:49:13.220
right assigned to channel two,
center assigned to three,

00:49:13.240 --> 00:49:18.590
and I have a gap between five
and six where the LFE is here.

00:49:19.350 --> 00:49:23.020
I'm going to go ahead and click
done to create that document.

00:49:23.100 --> 00:49:29.220
And what's important to notice is that
this document works exactly the same

00:49:29.220 --> 00:49:31.580
way as the previous version of AU Lab.

00:49:31.620 --> 00:49:35.800
We've just extended all the features
to provide support for multi-channel.

00:49:35.880 --> 00:49:40.510
So for example,
you'll see five channels here in

00:49:40.510 --> 00:49:42.970
the meters instead of just two.

00:49:43.320 --> 00:49:47.190
And if I open the new studio view,
you'll notice now that we have

00:49:47.200 --> 00:49:50.040
a graphical representation of
where our inputs are on the

00:49:50.040 --> 00:49:51.680
device as well as our outputs.

00:49:51.700 --> 00:49:55.010
And we're free to edit that if we want,
but that's beyond the scope

00:49:55.010 --> 00:49:56.860
of what I'd like to show here.

00:49:57.700 --> 00:50:04.150
Adding an insert is simply selecting
that from the insert pop-up menu.

00:50:04.150 --> 00:50:08.200
So I can add a stereo delay,
and then if I want I can choose

00:50:08.210 --> 00:50:12.600
to add a stereo to five channel
effect such as a matrix reverb,

00:50:12.680 --> 00:50:14.270
etc.

00:50:14.560 --> 00:50:14.660
etc.

00:50:14.660 --> 00:50:15.070
etc.

00:50:15.070 --> 00:50:17.880
Again this works exactly
the same way that it did

00:50:17.880 --> 00:50:20.020
previously with mono and stereo.

00:50:20.950 --> 00:50:23.570
Not only do we support
multi-channel effects,

00:50:23.680 --> 00:50:27.410
we also support multi-channel
instruments and generators.

00:50:27.520 --> 00:50:30.530
So for example,
if I add an audio file player,

00:50:30.530 --> 00:50:33.460
I can show the additional
details and specify that

00:50:33.460 --> 00:50:35.640
that's a five-channel player.

00:50:35.790 --> 00:50:39.240
For the purposes of this example,
I'd like to just do a mono one so I can

00:50:39.240 --> 00:50:41.880
demonstrate the panner a bit easier.

00:50:42.000 --> 00:50:45.500
So I'm going to create that generator.

00:50:46.600 --> 00:50:57.600
[Transcript missing]

00:51:00.060 --> 00:51:03.660
And as you can see by the meters here,
most of the sound is going towards

00:51:03.670 --> 00:51:08.000
the center channels because
that's where my panner is aligned.

00:51:08.010 --> 00:51:13.910
So as I rotate that, you'll notice by the
meters that's more left,

00:51:13.910 --> 00:51:14.970
more right.

00:51:15.200 --> 00:51:21.120
I also have the capacity of specifying
the distance from the listener

00:51:21.120 --> 00:51:25.110
to the source where the listener
is in the center of the knob.

00:51:25.520 --> 00:51:27.990
Closer, farther away.

00:51:28.060 --> 00:51:30.900
Okay, I'll now turn this up so
you can hear the effect.

00:51:48.780 --> 00:51:51.630
It's also important to
note that if I so choose,

00:51:51.630 --> 00:51:56.680
I can bypass this default surround
panner and use one of the panner units

00:51:57.150 --> 00:51:59.640
just by adding that into the track.

00:51:59.670 --> 00:52:02.610
But James will be talking
about that in more detail.

00:52:02.720 --> 00:52:07.000
In fact, I'd like to now turn over the
rest of the session to James,

00:52:07.000 --> 00:52:10.920
who will be speaking about
multichannel and other topics.

00:52:11.120 --> 00:52:13.220
Could I go back to demo, please?

00:52:13.920 --> 00:52:14.260
Slides.

00:52:14.310 --> 00:52:16.470
Excuse me, slides.

00:52:21.870 --> 00:52:23.100
Okay, my name is James McCartney.

00:52:23.100 --> 00:52:25.800
I'm going to talk about
doing--writing code for

00:52:25.800 --> 00:52:27.800
multichannel audio and Core Audio.

00:52:27.800 --> 00:52:31.730
You primarily do this
through the Audio Toolbox.

00:52:31.800 --> 00:52:36.850
The main thing you need to know to
write code for multichannel audio

00:52:36.850 --> 00:52:39.690
is what an audio channel layout is.

00:52:39.890 --> 00:52:43.330
An audio channel layout is a
structure that's metadata on top of

00:52:43.480 --> 00:52:45.800
an audio stream basic description.

00:52:45.800 --> 00:52:50.520
Audio stream basic description
is the structure that we use to

00:52:50.520 --> 00:52:53.620
describe audio throughout Core Audio.

00:52:53.800 --> 00:52:58.800
So an audio channel layout is
composed of three main parts.

00:52:59.100 --> 00:52:59.800
There's--