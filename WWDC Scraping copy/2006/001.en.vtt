WEBVTT

00:00:10.710 --> 00:00:11.510
Good morning.

00:00:11.700 --> 00:00:14.730
Welcome to Bug Reporting Best Practices.

00:00:14.730 --> 00:00:18.590
Aren't you glad you didn't have to
wait an hour and a half in line for me?

00:00:19.940 --> 00:00:24.740
I'm Paul Schreiber,
a software engineer on the Mac OS X team.

00:00:24.860 --> 00:00:27.480
So before we get started,
I'd like to find out who's

00:00:27.480 --> 00:00:29.490
here in the audience.

00:00:29.950 --> 00:00:33.590
How many of you have filed a bug against
an Apple product in the past year?

00:00:33.600 --> 00:00:35.810
All right, good, good.

00:00:35.820 --> 00:00:37.810
Anyone been really busy filing, like,
10 bugs?

00:00:37.840 --> 00:00:39.220
Wow.

00:00:39.220 --> 00:00:40.600
And, uh...

00:00:41.790 --> 00:00:45.500
Anyone filed, say, 50 bugs?

00:00:45.500 --> 00:00:47.200
All right.

00:00:48.190 --> 00:00:49.460
There you go.

00:00:49.540 --> 00:00:51.100
So thank you for doing this.

00:00:51.180 --> 00:00:53.800
Why is it that we file bugs?

00:00:53.930 --> 00:00:58.090
Well,
we file bugs to make better software.

00:00:58.110 --> 00:00:59.370
And you get two benefits from doing this.

00:00:59.460 --> 00:01:02.850
Number one, when you file bugs
against your own products,

00:01:02.850 --> 00:01:04.820
you make your software better.

00:01:04.820 --> 00:01:07.830
And number two,
when you file bugs against Apple,

00:01:07.900 --> 00:01:09.730
you help us improve Mac OS X.

00:01:11.400 --> 00:01:14.830
So it's one thing to sit around and
complain to your friends or on your

00:01:14.830 --> 00:01:16.820
blog when something doesn't work right.

00:01:16.870 --> 00:01:19.400
It's another to go ahead and
take that step and write up

00:01:19.400 --> 00:01:23.130
a bug explaining the problem.

00:01:24.200 --> 00:01:27.280
So since this is a talk
about bug reporting,

00:01:27.310 --> 00:01:31.260
I thought I'd talk a
little bit about reporting.

00:01:32.110 --> 00:01:35.120
So what is it a reporter does?

00:01:35.160 --> 00:01:38.520
A good reporter writes good stories.

00:01:39.470 --> 00:01:42.460
A good story begins with a
snappy headline which draws

00:01:42.460 --> 00:01:44.280
the reader's attention in.

00:01:44.360 --> 00:01:49.620
A good bug begins with a clear and
succinct title which explains the problem

00:01:49.630 --> 00:01:51.940
and gets the engineer to look at it.

00:01:52.230 --> 00:01:56.410
A good story has an informative
lead which describes key facts

00:01:56.860 --> 00:01:59.080
and answers key questions.

00:01:59.130 --> 00:02:06.140
A good bug report has a concise
summary which describes the problem.

00:02:06.920 --> 00:02:09.860
What happened and why it's a problem.

00:02:09.900 --> 00:02:12.910
And a good story answers six questions.

00:02:13.180 --> 00:02:18.190
This talk will answer six
questions about reporting bugs.

00:02:18.680 --> 00:02:21.300
First, why do you file bugs?

00:02:21.570 --> 00:02:25.080
Second, what is a bug,
and what are the different types of bugs?

00:02:25.090 --> 00:02:28.090
Next, who should file a bug?

00:02:28.540 --> 00:02:29.650
How do you file a bug?

00:02:29.900 --> 00:02:33.310
And that's where we're going to
spend most of the session today.

00:02:33.540 --> 00:02:36.800
Then we'll cover where do you
file bugs when you're filing a

00:02:36.800 --> 00:02:38.400
bug against an Apple product?

00:02:38.560 --> 00:02:41.840
And finally,
when is it appropriate to file a bug?

00:02:42.010 --> 00:02:44.710
So we've talked about why,
now we're going to go

00:02:44.800 --> 00:02:45.900
and talk about what.

00:02:46.210 --> 00:02:47.850
What is a bug?

00:02:48.250 --> 00:02:52.400
Well, a bug is one of these funny
six-legged things over here.

00:02:52.580 --> 00:02:55.900
But the types of bugs we're
interested in are software bugs.

00:02:55.980 --> 00:02:57.800
So a software bug is one of two things.

00:02:57.900 --> 00:03:01.900
It's either a defect in a piece of
software or an enhancement request,

00:03:02.150 --> 00:03:07.120
which is a suggestion for a new feature
or an improvement to an existing feature.

00:03:07.610 --> 00:03:10.350
So, let's take a look at some of
the most common types of bugs.

00:03:10.700 --> 00:03:13.720
Now over here behind me is
the crash reporter dialog.

00:03:14.010 --> 00:03:16.450
And when an application
on Mac OS X crashes,

00:03:16.590 --> 00:03:17.600
you see this.

00:03:17.760 --> 00:03:19.600
So a crash is definitely a bug.

00:03:19.600 --> 00:03:23.140
And when you file a crashing bug,
make sure to mark it as a crash

00:03:23.320 --> 00:03:25.100
and not just a serious bug.

00:03:25.250 --> 00:03:28.720
Now sometimes people will say, "Oh,
my whole system crashed," or

00:03:28.840 --> 00:03:32.800
"I saw this really funny dialog
in many different languages."

00:03:32.950 --> 00:03:34.820
And what that is is a kernel panic.

00:03:35.110 --> 00:03:38.600
And this is the kernel
panic dialog on Mac OS X.

00:03:41.010 --> 00:03:43.670
Sometimes people will say
my application is hanging,

00:03:43.670 --> 00:03:44.940
or it's spinning.

00:03:44.980 --> 00:03:49.280
If your application is unresponsive,
that's also a bug.

00:03:49.990 --> 00:03:53.140
Another type of bug is
a documentation bug.

00:03:53.190 --> 00:03:54.940
Documentation bug can be several things.

00:03:54.940 --> 00:03:57.010
It can be very simple, like a typo.

00:03:57.160 --> 00:04:00.820
It could be a case where the
documentation is unclear or ambiguous,

00:04:00.860 --> 00:04:02.610
and you don't know what the author meant.

00:04:02.740 --> 00:04:05.490
It could be the sample
code doesn't compile.

00:04:05.490 --> 00:04:10.180
It could be a case of the documentation
not matching the implementation.

00:04:10.730 --> 00:04:13.740
So let's take a look at some
bugs in the software itself.

00:04:13.800 --> 00:04:16.320
First type of bug is a functional bug.

00:04:16.330 --> 00:04:20.760
Now notice here is the familiar connect
to server dialogue in the finder.

00:04:20.790 --> 00:04:24.560
And I typed ftp.apple.com
and clicked connect.

00:04:24.580 --> 00:04:30.280
But the finder guessed wrong,
and it prepended afp:// to the host name.

00:04:30.910 --> 00:04:33.140
Another type of bug is a cosmetic bug.

00:04:33.490 --> 00:04:36.060
This is when something works,
but it doesn't look right.

00:04:36.250 --> 00:04:38.200
If you notice in the
info window behind me,

00:04:38.300 --> 00:04:42.380
you'll see the icon for the
Mac is jaggy and blurry.

00:04:44.090 --> 00:04:46.700
Another type of bug is a usability bug.

00:04:46.770 --> 00:04:50.800
A usability bug is when something works,
but it could work better.

00:04:50.920 --> 00:04:53.500
So here we see the
Energy Saver preference pane,

00:04:53.630 --> 00:04:57.370
and notice in the bottom right corner,

00:04:57.740 --> 00:04:59.240
The lock is locked.

00:04:59.320 --> 00:05:00.330
But look here.

00:05:00.600 --> 00:05:04.100
The sliders are disabled,
as you would expect.

00:05:04.260 --> 00:05:06.600
However,
the schedule button is still enabled.

00:05:06.600 --> 00:05:09.310
If you were to click the schedule button,
a sheet would appear,

00:05:09.450 --> 00:05:11.390
and all the controls on the
sheet would be disabled.

00:05:11.720 --> 00:05:14.510
So it would be much better to
disable the schedule button

00:05:14.510 --> 00:05:16.600
whenever the lock is locked as well.

00:05:17.040 --> 00:05:19.500
Now,
another type of bug is a performance bug.

00:05:19.520 --> 00:05:22.340
A performance bug is when
your application is slow,

00:05:22.370 --> 00:05:26.850
or when an application is leaking
something like memory or Mach ports.

00:05:28.390 --> 00:05:30.250
Next, a security bug.

00:05:30.410 --> 00:05:34.340
A security bug describes a security
exposure in the operating system.

00:05:34.380 --> 00:05:37.270
That means when someone gains
access to files they shouldn't

00:05:37.280 --> 00:05:39.490
or services they shouldn't.

00:05:39.680 --> 00:05:43.720
What a security bug is not is any
old bug in a security component.

00:05:43.810 --> 00:05:47.220
For example,
if you saw a typo in keychain access,

00:05:47.250 --> 00:05:49.140
that's not necessarily a security bug.

00:05:49.180 --> 00:05:52.780
It is, however,
still a bug and still should be filed.

00:05:54.340 --> 00:05:56.200
So, now let's talk about who.

00:05:56.260 --> 00:05:58.190
Who is it that should file a bug?

00:05:58.190 --> 00:06:02.160
Do I have to ask someone
if it's okay to file a bug?

00:06:02.600 --> 00:06:03.710
Should I check?

00:06:04.100 --> 00:06:04.380
No.

00:06:04.690 --> 00:06:06.620
You all should file a bug.

00:06:06.680 --> 00:06:09.330
If there's something that you
see that's wrong or confusing

00:06:09.330 --> 00:06:11.980
or you don't understand,
or you have an idea for how

00:06:12.070 --> 00:06:14.070
something could work better,
file a bug.

00:06:14.070 --> 00:06:18.390
So now,
let's talk about how to file bugs.

00:06:20.570 --> 00:06:23.900
There are six components
to a good bug report.

00:06:23.950 --> 00:06:26.210
We have one, the bug's title.

00:06:26.510 --> 00:06:28.540
Two, the bug's description.

00:06:28.650 --> 00:06:30.940
Three, steps to reproduce the problem.

00:06:31.040 --> 00:06:34.670
Four, regression,
when the bug does and doesn't occur on

00:06:34.670 --> 00:06:37.060
different systems or configurations.

00:06:37.230 --> 00:06:40.960
Five is the configuration of the
machine on which the problem occurred.

00:06:41.010 --> 00:06:43.050
And number six is reproducibility.

00:06:43.220 --> 00:06:45.170
Is this the bug that recurs?

00:06:45.320 --> 00:06:48.270
So let's go over the bug's title.

00:06:49.610 --> 00:06:52.860
The title for a bug needs
to be clear and succinct.

00:06:52.910 --> 00:06:55.060
You don't have a lot of space
in which to write the title,

00:06:55.060 --> 00:06:57.870
and you want to make sure you
have a lot of useful information

00:06:59.680 --> 00:07:02.260
Think of the title as an
advertisement for your bug.

00:07:02.400 --> 00:07:05.180
Now when you're reporting,
you have to make sure there's a clear

00:07:05.180 --> 00:07:08.450
line between advertising and editorial,
but in the case of a bug report,

00:07:08.450 --> 00:07:10.000
you need to get people's attention.

00:07:10.000 --> 00:07:13.320
You want them to read your bug,
and you want them to fix your bug.

00:07:13.910 --> 00:07:17.140
So you need to make the first
words of your title count.

00:07:17.440 --> 00:07:20.890
And a great way to do that is to
include the name of the application

00:07:20.890 --> 00:07:25.570
where you saw the problem,
at the beginning of the bug's title.

00:07:25.770 --> 00:07:28.940
Now because space is so limited,
you have to make every word count.

00:07:29.090 --> 00:07:30.700
So how do you make every word count?

00:07:30.770 --> 00:07:34.240
Well the first way you can do that
is to avoid any sort of chatter.

00:07:34.600 --> 00:07:38.220
Sometimes people say things such as,
"It would be nice if my software

00:07:38.220 --> 00:07:41.310
did this," or "I would really
like it if the software could do

00:07:41.310 --> 00:07:45.300
that." This type of exposition
is okay in the bug's description,

00:07:45.300 --> 00:07:48.260
but it's not appropriate
for the bug's title.

00:07:48.310 --> 00:07:51.020
Another thing to avoid is
the use of filler words.

00:07:51.280 --> 00:07:55.440
Any extra prepositions or
pronouns or words like "etc.",

00:07:55.610 --> 00:08:00.060
"articles," those sort of things can
usually be eliminated from the title.

00:08:00.700 --> 00:08:03.860
Now, sometimes if you're a good reporter
and you write a good story,

00:08:03.860 --> 00:08:07.400
your editor will follow that up with
a headline containing a clever pun.

00:08:07.560 --> 00:08:10.720
In the case of a bug title,
a pun is not appropriate.

00:08:10.780 --> 00:08:13.490
Remember that your goal is to be
objective and straightforward.

00:08:13.740 --> 00:08:19.860
And also,
the person reading your bug might

00:08:19.860 --> 00:08:19.860
not be a native English speaker
and might not get the joke.

00:08:20.560 --> 00:08:23.600
Now, sometimes when people are
selling things on eBay,

00:08:23.610 --> 00:08:27.940
they use special characters or all
capitals to draw attention to their item.

00:08:28.240 --> 00:08:30.750
In the case of a bug title,
this is not appropriate.

00:08:31.040 --> 00:08:37.040
Not only does using all capital
letters impair readability and

00:08:37.040 --> 00:08:43.430
reduce the amount of information
you can fit in that small space,

00:08:43.430 --> 00:08:44.140
but it's much harder to search for
titles with alternate spellings.

00:08:45.420 --> 00:08:48.860
Now, I haven't seen any bugs
that look like this,

00:08:48.860 --> 00:08:53.000
but before you get any ideas,
Leetspeak would not be a good

00:08:53.000 --> 00:08:55.410
thing to use in a bug's title.

00:08:57.570 --> 00:09:00.220
Remember that your bug's
title has to stand on its own.

00:09:00.250 --> 00:09:06.710
It's going to be viewed in a list of tens
or hundreds of other bugs out of context.

00:09:07.100 --> 00:09:09.440
Think about how people
will search for your bug.

00:09:09.700 --> 00:09:12.180
Think about the types
of synonyms they'll use.

00:09:12.260 --> 00:09:14.520
Maybe your bug is about
a particular error.

00:09:14.760 --> 00:09:17.520
If that's the case,
it's great to include key words

00:09:17.520 --> 00:09:21.140
from the error message and the
error number in the bug's title.

00:09:21.820 --> 00:09:24.680
Now, sometimes bug titles have prefixes.

00:09:24.700 --> 00:09:27.980
Let's go over a few of the common
prefixes we see in bug titles.

00:09:28.000 --> 00:09:30.320
Number one is the prefix ER.

00:09:30.650 --> 00:09:32.980
ER means enhancement request.

00:09:33.000 --> 00:09:36.920
That means this describes a suggestion
for an improvement and not a defect.

00:09:36.930 --> 00:09:38.970
Number two is the build number.

00:09:39.260 --> 00:09:41.090
And you'll see this a lot
when you're dealing with

00:09:41.250 --> 00:09:44.040
pre-release software or seeds.

00:09:44.050 --> 00:09:47.480
This way, when you write the bug,
the engineer reading it knows exactly

00:09:47.480 --> 00:09:50.330
what build of the software you
saw the problem on and can compare

00:09:50.610 --> 00:09:52.560
to the build that they're using.

00:09:52.580 --> 00:09:55.920
And finally, you'll sometimes see
the prefix regression.

00:09:55.920 --> 00:10:00.110
It's especially common
on Safari or WebKit bugs.

00:10:00.130 --> 00:10:04.680
A regression is when something was
working correctly in a previous

00:10:04.680 --> 00:10:08.640
version and is no longer working
in the current shipping build.

00:10:09.610 --> 00:10:13.970
When you have a crashing or hanging bug,
it can be helpful to include the

00:10:14.370 --> 00:10:18.900
function at the top of the stack
trace at the end of your bug's title.

00:10:19.030 --> 00:10:22.260
However, if you're doing this,
you want to omit function

00:10:22.270 --> 00:10:26.520
names from low-level libraries,
doing things like exception handling,

00:10:26.690 --> 00:10:34.010
string comparison, objective C messaging,
or low-level memory management.

00:10:34.910 --> 00:10:38.960
Let's go over a few examples of
how we can improve a bug's title.

00:10:39.270 --> 00:10:43.070
Now, say we're using our computer,
and one of our applications crashed.

00:10:43.200 --> 00:10:46.230
And we could write a bug that says,
"crash." But this isn't

00:10:46.230 --> 00:10:47.890
a very good title,
because it doesn't tell

00:10:47.890 --> 00:10:49.100
us a lot of information.

00:10:49.190 --> 00:10:51.290
It doesn't tell us what crashed,
it doesn't tell us what was

00:10:51.290 --> 00:10:52.890
going on when the crash occurred.

00:10:53.050 --> 00:10:56.760
So, maybe we could say,
"It was the finder that crashed." Okay,

00:10:56.760 --> 00:10:59.730
this is a little better,
but there's still more information

00:10:59.800 --> 00:11:02.000
we need to include in the title.

00:11:02.120 --> 00:11:05.670
So, let's say we went to the Go menu,
and we chose Connect to iDisk,

00:11:05.680 --> 00:11:07.000
and that's when the crash occurred.

00:11:07.160 --> 00:11:10.140
So,
we'll describe this as "Finder crashed,

00:11:10.140 --> 00:11:11.910
connecting to iDisk."

00:11:12.300 --> 00:11:15.500
Now since this is a crashing bug,
we can look at the stack trace,

00:11:15.550 --> 00:11:17.400
and we can figure out
where the crash occurred.

00:11:17.460 --> 00:11:20.200
And we'll put that at the
end of the title in brackets.

00:11:20.260 --> 00:11:24.810
Now this is a great bug title,
and many people would stop here.

00:11:25.040 --> 00:11:27.320
But we can make this even better.

00:11:27.440 --> 00:11:30.220
So remember what I said about
including the build number?

00:11:30.520 --> 00:11:33.950
If we prepend the build number,
then here we have a fantastic bug title,

00:11:33.950 --> 00:11:36.020
which contains lots of information.

00:11:36.050 --> 00:11:38.820
The engineer knows right
away when the crash occurred,

00:11:38.840 --> 00:11:41.950
what you're doing,
and where the crash was.

00:11:42.260 --> 00:11:45.500
So, good reporters have good editors.

00:11:45.870 --> 00:11:48.530
But when you're writing a bug,
you have to be your own editor.

00:11:48.810 --> 00:11:52.970
Let's take a couple of examples
of editing a bug's title.

00:11:53.780 --> 00:11:56.470
Now,
say you were in Microsoft Word and you

00:11:56.730 --> 00:12:00.100
tried to print and you went to your
printer and there was no paper there,

00:12:00.100 --> 00:12:02.510
and you might write a bug
that says "I tried to print,

00:12:02.770 --> 00:12:05.980
but nothing happens."
This isn't a very good title.

00:12:05.980 --> 00:12:06.290
Why?

00:12:06.650 --> 00:12:08.550
Well, first of all,
it doesn't tell us what

00:12:08.550 --> 00:12:11.880
application we tried to print from,
it doesn't tell us what steps we took,

00:12:11.880 --> 00:12:13.980
it doesn't tell us what we
were expecting to happen.

00:12:14.140 --> 00:12:18.340
So a better way of expressing this
problem is a "word printing attempt

00:12:18.770 --> 00:12:23.370
fails silently." "Fails silently"
is a good phrase which conveys

00:12:23.450 --> 00:12:26.110
a lot of information succinctly.

00:12:26.860 --> 00:12:28.400
Now say the opposite occurred.

00:12:28.620 --> 00:12:32.980
Say we did something, and it worked fine,
but we still got an error.

00:12:33.010 --> 00:12:34.770
So someone might write
up a bug that says,

00:12:34.770 --> 00:12:36.020
iTunes shows me an error.

00:12:36.050 --> 00:12:36.580
OK.

00:12:37.360 --> 00:12:39.880
But why is that a problem
that it shows you an error?

00:12:39.910 --> 00:12:42.460
What type of error did it show you?

00:12:42.510 --> 00:12:45.800
So say you were using the Music Store,
and then you downloaded a song,

00:12:45.800 --> 00:12:48.400
and it worked fine,
but you still got an error dialog.

00:12:48.470 --> 00:12:53.170
So we could say that the iTunes song
download gives me an error dialog,

00:12:53.260 --> 00:12:55.210
but it succeeds anyway.

00:12:55.600 --> 00:13:00.290
Now, sometimes people like to use
colloquial language or aren't

00:13:00.290 --> 00:13:01.340
clear in their bug titles.

00:13:01.530 --> 00:13:04.800
For example, you might be using Safari,
and you would write up a

00:13:04.800 --> 00:13:07.970
bug that says there's smudge
marks everywhere in Safari.

00:13:08.270 --> 00:13:10.100
Okay, well what's a smudge mark?

00:13:10.140 --> 00:13:12.800
And how did they appear?

00:13:12.880 --> 00:13:15.730
So a better way to write this
title will be something such as,

00:13:15.730 --> 00:13:20.740
"Safari redraws QuickTime VR movies
incorrectly during window resize."

00:13:20.870 --> 00:13:24.420
So that tells us what we're
doing when the smudge marks

00:13:24.510 --> 00:13:27.070
appear and how to reproduce them.

00:13:28.150 --> 00:13:31.500
Now, sometimes when you write a bug
because you're really angry,

00:13:31.500 --> 00:13:35.120
say you were doing an important
demo or a presentation,

00:13:35.310 --> 00:13:36.980
and something didn't work right.

00:13:37.030 --> 00:13:39.420
And you would be upset,
and I too would be

00:13:39.420 --> 00:13:41.020
upset if this happened.

00:13:41.060 --> 00:13:43.970
So say you were using a new
application called iSmell,

00:13:44.180 --> 00:13:46.720
and you could say iSmell
is a complete failure.

00:13:46.720 --> 00:13:50.340
And I would agree that in that case,
I too would feel that iSmell

00:13:50.550 --> 00:13:52.200
was a complete failure.

00:13:52.200 --> 00:13:55.930
But when writing the bug,
think about how it failed.

00:13:56.680 --> 00:13:59.620
So say you had a new video camera,
and iSmell didn't work with

00:13:59.620 --> 00:14:02.100
your Sony CyberCube 3000MX.

00:14:02.520 --> 00:14:04.730
Write that bug instead.

00:14:05.830 --> 00:14:08.310
Sometimes I see a bug
title that's so confusing,

00:14:08.380 --> 00:14:10.980
even I don't know how to fix it.

00:14:17.840 --> 00:14:21.920
So, let's summarize the best practices
for writing a bug's title.

00:14:22.150 --> 00:14:25.430
Start off with the build of the
software or operating system

00:14:25.780 --> 00:14:27.300
on which the problem occurred.

00:14:27.350 --> 00:14:32.180
Then, include an application
where the problem occurred.

00:14:32.290 --> 00:14:37.000
Third, use a verb describing the action.

00:14:37.120 --> 00:14:41.100
Fourth, explain the situation which was
going on when you saw the problem.

00:14:41.160 --> 00:14:43.900
And finally,
in the case of a crash or a hang,

00:14:43.960 --> 00:14:45.920
include the symbol name.

00:14:47.580 --> 00:14:51.680
It's important to be clear, concise,
and succinct in your bug titles.

00:14:51.770 --> 00:14:55.640
Convey the important information there.

00:14:55.710 --> 00:15:00.170
So let's take a look at what is
included in a bug's description.

00:15:02.320 --> 00:15:04.670
Now some of the best descriptive
writing you'll find in the

00:15:04.670 --> 00:15:07.060
newspaper is in the sports section.

00:15:07.080 --> 00:15:10.050
And a good sports writer would never say,
"Oh, Hernandez threw a

00:15:10.050 --> 00:15:12.470
curveball." They would say,
"It was the bottom of the ninth.

00:15:12.650 --> 00:15:13.440
There were two out.

00:15:13.490 --> 00:15:14.330
There were three men on base.

00:15:14.440 --> 00:15:15.200
It was raining.

00:15:15.440 --> 00:15:19.200
They were down three to one." And then,
"Hernandez threw a curveball."

00:15:19.210 --> 00:15:21.340
They're gonna set you up with context.

00:15:21.360 --> 00:15:25.200
Remember that when you write a bug,
the engineer who reads the bug wasn't

00:15:25.200 --> 00:15:27.280
there when you saw the problem occur.

00:15:27.610 --> 00:15:29.570
They don't know what happened.

00:15:29.570 --> 00:15:30.790
They do not have ESP.

00:15:31.070 --> 00:15:33.620
They might not even have ESPN.

00:15:34.540 --> 00:15:37.910
So the first thing you need to
do in your bug's description

00:15:38.140 --> 00:15:39.380
is repeat the bug's title.

00:15:39.550 --> 00:15:41.430
Why is it you repeat the title?

00:15:41.700 --> 00:15:44.220
Well,
as the bug evolves and is investigated,

00:15:44.220 --> 00:15:48.600
the title may change to reflect the
underlying cause of the problem.

00:15:48.650 --> 00:15:50.640
When you repeat the
title in the description,

00:15:50.690 --> 00:15:53.330
this makes it clear to anyone
reading the bug for the first

00:15:53.690 --> 00:15:56.000
time what problem you saw.

00:15:56.040 --> 00:15:58.530
Next thing you need to do
is summarize the problem.

00:15:58.730 --> 00:15:59.880
Describe what happened.

00:15:59.920 --> 00:16:02.430
Describe why you think it's a problem.

00:16:02.970 --> 00:16:05.340
Include some details.

00:16:05.390 --> 00:16:09.490
Make sure to be very
specific in your description.

00:16:10.320 --> 00:16:13.660
Sometimes people will use vague
language to describe the problem,

00:16:13.780 --> 00:16:14.970
or they will use slang.

00:16:15.210 --> 00:16:17.760
They'll say something looks bad,
or they'll say it's odd,

00:16:17.760 --> 00:16:19.160
or my computer is acting up.

00:16:19.160 --> 00:16:20.720
Don't use any of these terms.

00:16:20.720 --> 00:16:24.990
It's not clear to the person
reading the bug what this means.

00:16:25.080 --> 00:16:29.030
Instead, it's important to describe
specifically what happened.

00:16:29.660 --> 00:16:33.570
If a bug involves a particular error,
include the exact text

00:16:33.780 --> 00:16:35.250
of the error message.

00:16:35.280 --> 00:16:38.740
If you were unable to copy down
the full text of the error message,

00:16:38.860 --> 00:16:40.840
for example,
it appeared and disappeared very quickly,

00:16:40.840 --> 00:16:45.300
or you had to restart the machine,
give the best approximation you can.

00:16:45.300 --> 00:16:47.890
And note also that it
is an approximation.

00:16:47.890 --> 00:16:49.870
Many error messages are similar.

00:16:49.870 --> 00:16:54.430
You don't want someone to spend a lot
of time chasing down the wrong error.

00:16:56.570 --> 00:16:59.520
When you're writing,
it's important to include specific

00:16:59.520 --> 00:17:01.600
references to items on the screen.

00:17:01.940 --> 00:17:05.560
For example,
instead of saying "the inspector"

00:17:05.680 --> 00:17:11.210
or "the pallet" or "the window", say
something like "the finder's inspector

00:17:11.210 --> 00:17:14.830
window". Instead of saying "oh,
the funny grey round thing over

00:17:14.840 --> 00:17:19.460
there", say "the spinning indeterminate
progress indicator". Now what if I don't

00:17:19.460 --> 00:17:20.990
know the name of all these things?

00:17:21.070 --> 00:17:22.210
Okay, that's fine.

00:17:22.530 --> 00:17:24.750
You can either look it
up in the documentation,

00:17:24.750 --> 00:17:27.240
in the case of the spinning
indeterminate progress indicator,

00:17:27.240 --> 00:17:30.890
you'd see something like
that in the HI guidelines.

00:17:31.360 --> 00:17:35.180
And in the case of API level things,
you could look it up there.

00:17:35.340 --> 00:17:36.730
But if you don't know, that's OK.

00:17:36.860 --> 00:17:41.180
Include a screenshot and point
it out to us what it is you saw.

00:17:41.190 --> 00:17:44.440
Another thing to avoid
is relative pronouns.

00:17:44.460 --> 00:17:47.680
When you're writing three paragraphs,
it's not clear when you say

00:17:47.680 --> 00:17:51.640
it crashed or that crashed,
which of the things in the preceding

00:17:51.640 --> 00:17:53.300
paragraph you were referring to.

00:17:53.570 --> 00:17:56.000
So make sure to be explicit.

00:17:58.550 --> 00:18:01.550
Other times, people will use one phrase
to mean many things.

00:18:01.600 --> 00:18:04.930
For example,
one might say the system crashed.

00:18:05.190 --> 00:18:06.080
What does this mean?

00:18:06.100 --> 00:18:09.230
Does this mean that you saw
an application that crashed?

00:18:09.380 --> 00:18:11.670
Does it mean the entire system crashed?

00:18:11.770 --> 00:18:13.840
In other words, you saw a kernel panic.

00:18:13.940 --> 00:18:17.020
Perhaps you meant an
application that hung.

00:18:17.020 --> 00:18:17.720
It was spinning.

00:18:17.720 --> 00:18:18.750
It was unresponsive.

00:18:18.760 --> 00:18:20.180
And that felt like a crash to you.

00:18:20.200 --> 00:18:26.260
Or maybe the entire GUI was frozen
and wouldn't accept any user input.

00:18:26.500 --> 00:18:30.220
But perhaps the underlying subsystem
was still active and you could SSH in.

00:18:30.240 --> 00:18:33.700
Make sure to be very specific when
describing these types of problems.

00:18:36.300 --> 00:18:41.320
So other times we'll find vague
language in the description as well.

00:18:41.400 --> 00:18:44.010
People often will use the word nothing.

00:18:44.020 --> 00:18:49.320
They will say, oh, nothing happens,
or this does nothing, or it doesn't work.

00:18:49.330 --> 00:18:52.990
Instead, describe what you did
see and what you did do.

00:18:53.250 --> 00:18:57.310
For example,
in the printing bug we described earlier,

00:18:58.520 --> 00:19:00.380
What does nothing happens mean?

00:19:00.390 --> 00:19:02.080
Was the print menu item enabled?

00:19:02.340 --> 00:19:05.720
When you chose the print menu item,
did the print dialog box come up?

00:19:05.740 --> 00:19:09.320
When the print dialog box came up,
was your printer there?

00:19:09.340 --> 00:19:10.380
Was the print button enabled?

00:19:10.470 --> 00:19:13.800
When you clicked the print button,
did the progress dialog appear,

00:19:13.800 --> 00:19:14.520
and so on?

00:19:17.250 --> 00:19:20.700
Now, sometimes we're upset
when we're writing a bug.

00:19:20.700 --> 00:19:24.140
And when we're describing it,
we might be tempted to be sarcastic.

00:19:24.260 --> 00:19:28.380
But it's important to be
clear and fair and objective.

00:19:28.420 --> 00:19:31.220
Think about if you were reading that bug,
and you saw sarcasm.

00:19:31.270 --> 00:19:33.000
How would you feel?

00:19:34.700 --> 00:19:37.440
When you're describing the problem,
it's important to be descriptive

00:19:37.760 --> 00:19:38.810
and not prescriptive.

00:19:38.920 --> 00:19:41.540
That is,
you should describe the problem you saw,

00:19:41.540 --> 00:19:44.340
and not necessarily what you
think the solution should be.

00:19:44.350 --> 00:19:47.670
Let's give a couple examples of this.

00:19:47.770 --> 00:19:49.490
So say you wrote a bug,
and you would say, oh,

00:19:49.490 --> 00:19:52.040
the text on this screen should be green.

00:19:52.080 --> 00:19:55.080
And what your real problem is
is that you can't read the text.

00:19:55.130 --> 00:19:58.220
So instead, write the bug as,
the text is unreadable.

00:19:58.260 --> 00:20:00.860
Because the engineer may
choose to make the text larger,

00:20:00.880 --> 00:20:03.260
and they may choose to change
the color of the background.

00:20:03.280 --> 00:20:05.560
By describing why this
is a problem for you,

00:20:05.580 --> 00:20:08.500
you can help them choose
the appropriate solution.

00:20:08.520 --> 00:20:11.020
This happens at the code level as well.

00:20:11.100 --> 00:20:14.420
So say you would write a bug
that says that the NSFritz

00:20:14.510 --> 00:20:16.580
should use an NSWidget matrix.

00:20:16.610 --> 00:20:19.720
Well, this is really a problem for you,
that it's using a

00:20:19.800 --> 00:20:22.740
hand-rolled NSWidget list,
and this isn't working very well

00:20:22.740 --> 00:20:24.550
with resolution independence.

00:20:24.710 --> 00:20:27.090
So instead, describe that.

00:20:27.230 --> 00:20:30.970
And maybe the engineer will
choose to use an NSWidgetSet or

00:20:30.970 --> 00:20:33.090
an NSWidgetArray instead.

00:20:34.810 --> 00:20:38.870
When you're describing performance bugs,
it's not enough to say something is slow.

00:20:39.000 --> 00:20:40.860
For example, Safari is slow.

00:20:40.860 --> 00:20:43.050
Instead, you need to say,
what was going on?

00:20:43.060 --> 00:20:45.670
What is Safari slow at doing?

00:20:45.830 --> 00:20:49.400
So maybe Safari is slow at
allocating JavaScript arrays.

00:20:49.430 --> 00:20:50.760
Describe that.

00:20:50.770 --> 00:20:54.660
Include a sample or a
shark profile of Safari.

00:20:55.340 --> 00:21:00.260
And perhaps you can include some sample
JavaScript which illustrates the problem.

00:21:00.300 --> 00:21:02.630
When you're writing your description,
it's important to describe

00:21:02.730 --> 00:21:04.880
the facts-- that is,
what you saw, did,

00:21:05.110 --> 00:21:07.990
and heard-- and differentiate
that from speculation,

00:21:07.990 --> 00:21:10.080
which is what you think happened.

00:21:10.120 --> 00:21:13.530
When you write the bug,
don't guess at the cause of the bug.

00:21:15.580 --> 00:21:19.260
It's also important to describe what
you expected to see and how that

00:21:19.260 --> 00:21:21.200
differs from what you actually saw.

00:21:21.290 --> 00:21:24.320
Say you wrote a bug and you said,
I saw a yellow triangle.

00:21:24.350 --> 00:21:26.400
And the engineer comes and
reads the bug and says,

00:21:26.400 --> 00:21:27.100
oh, exactly.

00:21:27.120 --> 00:21:29.620
They were supposed to
see a yellow triangle.

00:21:29.650 --> 00:21:32.700
Maybe you were expecting to see a
red triangle or a yellow square.

00:21:32.980 --> 00:21:36.230
So make sure that's
very clear in the bug.

00:21:37.040 --> 00:21:39.370
Now when you're writing the bug,
it's important to include

00:21:39.740 --> 00:21:44.290
only the relevant pieces
of information to the bug.

00:21:46.680 --> 00:21:49.850
If you have a workaround for the problem,
include that information.

00:21:50.170 --> 00:21:54.550
It may help the engineer find
the cause of the problem,

00:21:54.550 --> 00:21:57.270
and you can let people know if
it's more important for them to

00:21:57.320 --> 00:21:59.970
solve another problem for which
you don't have a workaround

00:21:59.970 --> 00:22:01.600
than this one for which you do.

00:22:01.600 --> 00:22:06.700
Now, sometimes people like to tell
us stories when they write bugs.

00:22:06.700 --> 00:22:09.910
So you could say, oh, you know,
I was over at my mom's house

00:22:09.920 --> 00:22:13.310
for Thanksgiving dinner,
and I was eating this really good turkey,

00:22:13.330 --> 00:22:15.710
or it's California,
maybe you're eating a tofurkey.

00:22:16.410 --> 00:22:19.560
So, and it was really tasty.

00:22:19.560 --> 00:22:21.870
And I was talking about
how good Apple is,

00:22:21.950 --> 00:22:24.930
and how great my Mac is,
and all the neat things I can do with it.

00:22:25.200 --> 00:22:29.500
And we were going to show off iChat AV,
and isn't iChat AV really cool?

00:22:29.500 --> 00:22:32.340
And then we went,
and we started to have a chat

00:22:32.340 --> 00:22:34.670
with our Aunt Gilda in Guadalupe.

00:22:34.680 --> 00:22:37.920
But we couldn't connect,
and we were very sad.

00:22:40.100 --> 00:22:44.900
So what we have now is a good story,
but how do we turn this

00:22:45.180 --> 00:22:47.440
good story into a good bug?

00:22:47.460 --> 00:22:50.560
Let's think about what
the facts are here.

00:22:50.660 --> 00:22:55.180
So we are trying an iChat AV connection,
but we are somewhere other than usual.

00:22:55.200 --> 00:22:57.240
What's different about where we were?

00:22:57.260 --> 00:23:00.030
Well,
perhaps they have a different router.

00:23:01.140 --> 00:23:03.970
Okay, so let's write the bug's title.

00:23:04.280 --> 00:23:08.800
iChat video chat failed
with the Q-Link XJ47 router.

00:23:08.810 --> 00:23:11.470
And notice how we've included
the build number at the

00:23:11.470 --> 00:23:13.510
beginning of the bug's title.

00:23:13.710 --> 00:23:17.100
We can describe what machines we
are attempting the video chat with.

00:23:17.100 --> 00:23:20.600
We're attempting with an iBook G4,
which had an iSight connected,

00:23:20.730 --> 00:23:22.770
and the MacBook,
which has a built-in iSight.

00:23:22.780 --> 00:23:26.870
We've included the build numbers of
the operating system on both machines.

00:23:26.880 --> 00:23:30.270
We've mentioned the name
of the router we're using.

00:23:30.310 --> 00:23:32.240
We included the firmware
version of the router.

00:23:32.240 --> 00:23:35.760
And since we are trying really
hard to impress our family,

00:23:35.820 --> 00:23:40.000
we're going to know all the steps
we attempted to regress the bug.

00:23:40.020 --> 00:23:42.700
We know at home that it works
with our Linksys router.

00:23:43.460 --> 00:23:46.160
We know that we tried
turning the DMZ on and off.

00:23:46.160 --> 00:23:48.710
And we tried turning port
forwarding on and off,

00:23:48.710 --> 00:23:50.030
and that didn't help.

00:23:50.230 --> 00:23:52.240
All of this information
is really helpful.

00:23:53.980 --> 00:23:56.630
Other things you can include in the bug:
log files from iChat.

00:23:56.950 --> 00:24:01.830
On Mac OS X, 10.4.7 and later,
whenever an AV connection attempt fails,

00:24:01.960 --> 00:24:05.790
iChat displays a detailed log and gives
you the option of sending that to Apple.

00:24:06.060 --> 00:24:07.420
You can include that in the bug.

00:24:07.640 --> 00:24:10.530
Talk about the account
types you are using.

00:24:10.540 --> 00:24:15.330
We're using Jabra accounts,
we're using AIM accounts,

00:24:15.330 --> 00:24:15.330
we're using .Mac accounts.

00:24:16.400 --> 00:24:20.600
Another thing that's very helpful
to include in bugs is log files.

00:24:20.780 --> 00:24:23.310
The most obvious case of this is a crash.

00:24:23.590 --> 00:24:27.700
Whenever you have a crashing bug,
it is essential to include the crash log.

00:24:27.760 --> 00:24:31.700
Now note that the location of
crash logs has changed for Leopard.

00:24:31.730 --> 00:24:33.860
The crash logs are in two places.

00:24:33.860 --> 00:24:36.180
In library logs,
either your home folder or on the

00:24:36.210 --> 00:24:37.570
root level of your hard drive.

00:24:37.820 --> 00:24:40.840
But in Leopard,
we've moved them into subfolders

00:24:40.840 --> 00:24:43.300
by host and by application name.

00:24:43.360 --> 00:24:46.610
In Tiger and earlier,
all crash logs are found in

00:24:46.700 --> 00:24:48.490
the crash reporter folder.

00:24:49.170 --> 00:24:52.160
Now if you have a
Java application that crashes,

00:24:52.160 --> 00:24:56.260
in addition to the regular app crash log,
you'll also get a Java crash

00:24:56.550 --> 00:24:59.820
log in library logs Java in
either of those two places.

00:25:00.180 --> 00:25:07.970
The name of the file will be
something like javanativecrash_pid,

00:25:07.970 --> 00:25:07.970
and the PID of the process that crashed.

00:25:09.020 --> 00:25:12.040
When you're filing a Java crash,
make sure to include both crash logs,

00:25:12.140 --> 00:25:15.310
the Java one and the
regular Mac OS X crash log.

00:25:15.320 --> 00:25:19.120
Now, in addition to crash logs,
there are some other types of logs

00:25:19.130 --> 00:25:21.460
that are helpful when filing bugs.

00:25:21.610 --> 00:25:23.340
The first is a panic log.

00:25:23.360 --> 00:25:26.110
If you see a kernel panic,
make sure to include the

00:25:26.220 --> 00:25:27.800
panic log in library logs.

00:25:27.920 --> 00:25:31.210
Secondly,
you'll see a lot of useful information

00:25:31.210 --> 00:25:36.950
about error messages or descriptions of
activity in the system log in var log.

00:25:36.960 --> 00:25:39.660
And finally,
the console log in library logs

00:25:39.660 --> 00:25:43.710
console and then your UID can
contain additional information.

00:25:43.720 --> 00:25:46.400
If you ever see an exception occur,
make sure to check the

00:25:46.400 --> 00:25:48.010
console log for more details.

00:25:50.250 --> 00:25:54.270
So, another thing that's very
helpful to include is information

00:25:54.360 --> 00:25:55.940
about the application state.

00:25:55.940 --> 00:26:00.910
And a great way to get information about
the application state is to use Shark.

00:26:02.470 --> 00:26:05.930
Attach a shark profile of
what was going on to the bug.

00:26:05.970 --> 00:26:08.200
If you want to get information
about file system activity,

00:26:08.200 --> 00:26:10.700
you can get that with
the fsusage command.

00:26:10.710 --> 00:26:14.700
If you want a list of what files
are currently open on the system,

00:26:14.800 --> 00:26:19.100
for example, if you can't eject a volume,
use the lsof command.

00:26:20.150 --> 00:26:21.330
Shark profiles are great.

00:26:21.360 --> 00:26:23.900
If you don't have Shark,
you can always use Sample.

00:26:24.100 --> 00:26:28.100
Now, Shark also has an additional
configuration called

00:26:28.100 --> 00:26:30.100
Time Profile All Thread States.

00:26:30.120 --> 00:26:32.100
And if you use that,
it's equivalent to a sample.

00:26:32.100 --> 00:26:35.220
It tells you what's going on even
when the application is busy or

00:26:35.220 --> 00:26:37.100
appears not to be doing anything.

00:26:38.920 --> 00:26:42.090
You may have an older application
on your system called Sampler

00:26:42.490 --> 00:26:43.800
in your Developer Tools folder.

00:26:43.800 --> 00:26:45.040
Don't use this.

00:26:45.170 --> 00:26:48.600
Instead, either use Shark or the
Sample Command Line tool.

00:26:48.600 --> 00:26:52.870
It contains more useful
information in a better format.

00:26:53.950 --> 00:26:57.360
Now,
many reporters are also photojournalists,

00:26:57.500 --> 00:27:00.210
and a photojournalist has a great camera.

00:27:00.510 --> 00:27:05.500
But the camera of choice when filing
a bug report is the screenshot.

00:27:05.580 --> 00:27:08.050
So what do we do with screenshots?

00:27:08.170 --> 00:27:11.740
Well, screenshot's really helpful
whenever you see a dialogue.

00:27:12.240 --> 00:27:13.430
I need to write a bug about that.

00:27:13.440 --> 00:27:17.080
Including a screenshot not only will tell
people the exact wording of the dialogue,

00:27:17.110 --> 00:27:20.640
but it will explain what application
or process generated the dialogue.

00:27:20.870 --> 00:27:22.880
It's not always clear.

00:27:23.370 --> 00:27:26.260
Whenever you see any sort of
a rendering or redraw problem,

00:27:26.260 --> 00:27:27.720
those are very hard to describe.

00:27:28.050 --> 00:27:30.020
It's great to include a screenshot there.

00:27:30.100 --> 00:27:33.210
The picture really is
worth a thousand words.

00:27:33.650 --> 00:27:37.500
If you see something on the screen that
you don't understand or don't recognize,

00:27:37.500 --> 00:27:40.740
as I mentioned earlier,
anything with unfamiliar terminology,

00:27:40.740 --> 00:27:42.490
include a screenshot of that.

00:27:43.000 --> 00:28:54.500
[Transcript missing]

00:28:55.070 --> 00:28:57.500
Now sometimes a picture's not enough.

00:28:57.640 --> 00:29:00.030
Say you need to show something in action.

00:29:00.230 --> 00:29:01.270
A movie is great.

00:29:01.680 --> 00:29:09.280
So you can use a third party
utility like Snaps Pro,

00:29:09.280 --> 00:29:10.510
or you can grab your camera and film it,
and import that into iMovie and

00:29:10.510 --> 00:29:10.510
attach that movie to the bug.

00:29:10.780 --> 00:29:13.380
Sometimes you can't use
the screenshot facility.

00:29:13.420 --> 00:29:16.530
Perhaps it's a DVD player
which prohibits it,

00:29:16.530 --> 00:29:19.950
or the machine is hung,
or some other problem which

00:29:20.110 --> 00:29:21.610
looks fine in the screenshot.

00:29:21.790 --> 00:29:23.740
In this case,
get out your digital camera,

00:29:23.810 --> 00:29:27.400
turn off the flash,
and take a picture of the screen.

00:29:27.820 --> 00:29:31.540
So what about URLs and error messages?

00:29:31.560 --> 00:29:35.330
If you have a screenshot of one of these,
make sure to type the text from the

00:29:35.330 --> 00:29:39.460
error message or the URL into the bug.

00:29:39.460 --> 00:29:41.740
This way,
people can easily search for the bug,

00:29:41.780 --> 00:29:44.200
and they don't have to retype it,
and they're less likely to

00:29:44.260 --> 00:29:46.190
make a transcription error.

00:29:47.240 --> 00:29:49.340
Now, this is a lot of information
to include in your bug,

00:29:49.560 --> 00:29:50.980
and you don't have to include all of it.

00:29:51.070 --> 00:29:54.160
In fact, you probably shouldn't include
all of it in most of your bugs.

00:29:54.480 --> 00:29:59.100
You need to pick just the most relevant
information and put that in the bug.

00:29:59.240 --> 00:30:01.820
But there are a few things you
should never include in your bugs.

00:30:01.940 --> 00:30:04.480
The first is any
confidential information.

00:30:04.480 --> 00:30:10.370
If you have any trade secrets,
or you have a file of

00:30:10.370 --> 00:30:11.860
social security numbers,
don't attach that to a bug.

00:30:12.870 --> 00:30:16.700
Second thing you don't want to include
in a bug is someone else's application.

00:30:16.870 --> 00:30:19.640
So if you see a problem that you
want to report to Apple in a third

00:30:19.750 --> 00:30:23.180
party application that's not yours,
don't attach that to the bug.

00:30:23.180 --> 00:30:26.900
And definitely don't include your
serial number for that application.

00:30:28.570 --> 00:30:31.250
So when you're done writing your bug,
first thing you should

00:30:31.250 --> 00:30:32.500
do is read over the bug.

00:30:32.500 --> 00:30:34.420
Make sure that it makes sense.

00:30:34.420 --> 00:30:37.960
Make sure that all the information
that needs to be there is there.

00:30:38.040 --> 00:30:40.720
If there's someone else with you,
have them read over the bug and

00:30:40.720 --> 00:30:44.370
see if they understand the problem
and why it needs to be fixed.

00:30:45.670 --> 00:30:50.280
Now let's move on to the third
component of writing a bug,

00:30:50.480 --> 00:30:52.570
steps to reproduce.

00:30:56.640 --> 00:30:58.260
When you're writing
your steps to reproduce,

00:30:58.350 --> 00:31:01.290
you need to put yourself
in the engineer's shoes.

00:31:01.440 --> 00:31:04.950
Think about the types of information
they're going to want to know.

00:31:05.070 --> 00:31:06.340
What will they ask for?

00:31:06.390 --> 00:31:07.940
Include lots of information.

00:31:07.940 --> 00:31:11.700
It's better to include too much
information than not enough.

00:31:11.830 --> 00:31:15.540
Anticipate the types of questions
they're going to ask you.

00:31:15.640 --> 00:31:18.100
You want to minimize the back and forth.

00:31:18.200 --> 00:31:23.690
When someone has to stop to ask
for more information on a bug,

00:31:24.010 --> 00:31:27.450
It means they have to temporarily put
your bug aside and work on something

00:31:27.450 --> 00:31:30.040
else before they can come back to it.

00:31:30.250 --> 00:31:35.380
This is essential, especially to get back
quickly so you catch engineers

00:31:35.380 --> 00:31:37.900
early in development cycles.

00:31:38.380 --> 00:31:40.690
When you're writing
the steps to reproduce,

00:31:40.780 --> 00:31:42.090
think about when this problem occurs.

00:31:42.150 --> 00:31:44.880
This is a problem that will
occur after you log out.

00:31:45.080 --> 00:31:47.780
This is a problem that will occur
after you restart the computer.

00:31:47.970 --> 00:31:49.920
This is a problem that can occur
after you shut the computer

00:31:49.920 --> 00:31:52.250
off and turn it back on.

00:31:52.510 --> 00:31:57.400
Make no assumptions about what
people will know about your product.

00:31:57.400 --> 00:32:01.290
It's important to be very specific
in these steps to reproduce.

00:32:01.400 --> 00:32:04.050
When you're describing the steps,
you want to include

00:32:04.050 --> 00:32:06.380
details of what you did,
not high-level actions.

00:32:06.400 --> 00:32:09.660
So instead of saying, "Oh,
I opened a file," well that

00:32:09.690 --> 00:32:10.400
could mean many things.

00:32:10.400 --> 00:32:12.390
It could mean you
double-clicked on a file.

00:32:12.400 --> 00:32:14.400
It could mean you selected the
file and pressed Command-O.

00:32:14.400 --> 00:32:17.400
It could mean you selected the file
and pressed Command-Down Arrow.

00:32:17.400 --> 00:32:20.400
You could have used the
Open command in the terminal.

00:32:20.400 --> 00:32:24.260
Instead,
make sure to say exactly what you did.

00:32:24.460 --> 00:32:27.880
"I double-clicked on the
file." While these things,

00:32:28.440 --> 00:32:32.470
different details,
could result in the same apparent action,

00:32:32.680 --> 00:32:34.400
they could go through
different code paths.

00:32:34.400 --> 00:32:36.400
So it's important to be very specific.

00:32:38.010 --> 00:32:42.230
Think about the account type of the user
in which you experience the problem.

00:32:42.250 --> 00:32:44.050
Where is the home directory?

00:32:44.350 --> 00:32:46.130
Is this a regular local home?

00:32:46.360 --> 00:32:49.710
Is this a portable home on
a FireWire disk or an iPod?

00:32:49.980 --> 00:32:51.760
Is this a network home?

00:32:51.920 --> 00:32:52.990
What type of user is it?

00:32:53.100 --> 00:32:58.550
Is it a standard user, an admin user,
or is it a managed client user?

00:32:58.850 --> 00:33:01.520
Think about all the steps it
would take to reproduce this

00:33:01.660 --> 00:33:06.500
problem on a brand new machine
that you just took out of the box.

00:33:06.920 --> 00:33:10.030
So let me give you a couple of examples
that demonstrate the importance

00:33:11.040 --> 00:33:13.220
of detailed steps to reproduce.

00:33:13.440 --> 00:33:16.900
So one time I had a
problem with the installer.

00:33:16.900 --> 00:33:20.410
When I got three quarters of the way
through the installation process,

00:33:20.410 --> 00:33:21.980
the installer would hang.

00:33:22.010 --> 00:33:24.610
And I wrote up a bug,
and I sampled the installer,

00:33:24.610 --> 00:33:25.900
and I included the sample in the bug.

00:33:26.030 --> 00:33:29.730
And I included the name of the
packages where I saw the problem,

00:33:29.840 --> 00:33:30.960
and I attached them.

00:33:30.980 --> 00:33:33.800
And I wrote detailed steps
of what I went through.

00:33:33.870 --> 00:33:36.740
But the installer engineer
couldn't reproduce the problem.

00:33:36.800 --> 00:33:41.190
So finally, he came over to my office,
and he watched me reproduce the problem.

00:33:41.380 --> 00:33:44.140
And I watched him not
reproduce the problem.

00:33:44.160 --> 00:33:46.500
And we did this for about 15 minutes.

00:33:46.500 --> 00:33:49.140
And finally,
we figured out what was going on.

00:33:49.190 --> 00:33:51.520
It turned out that I was using
the keyboard to navigate.

00:33:51.520 --> 00:33:55.780
That is, I pressed Tab and the Spacebar,
and he was using the mouse.

00:33:55.850 --> 00:33:58.320
So if you're using any sort
of accessibility features,

00:33:58.400 --> 00:34:01.530
keyboard navigation or voiceover,
make sure to include that sort of

00:34:01.610 --> 00:34:04.640
information in your steps to reproduce.

00:34:04.640 --> 00:34:06.680
Now here's another example.

00:34:06.680 --> 00:34:10.680
Your dad wrote me, and he said, Paul,
I have this web page in Safari,

00:34:10.680 --> 00:34:12.580
and it doesn't look right.

00:34:12.580 --> 00:34:15.920
And he sent me the URL of the web page,
and he sent me a screenshot.

00:34:15.920 --> 00:34:19.040
And indeed, there were rendering
problems in the web page.

00:34:19.050 --> 00:34:21.640
When I went to the page, it looked fine.

00:34:21.990 --> 00:34:25.400
Finally, after some discussion,
we discovered that he had turned on the

00:34:25.400 --> 00:34:28.080
minimum font size preference in Safari.

00:34:28.080 --> 00:34:31.740
And when I checked that box,
I too saw the problem.

00:34:31.740 --> 00:34:34.430
So make sure to include information
about preferences that you've

00:34:34.430 --> 00:34:36.620
changed from the defaults.

00:34:46.460 --> 00:34:49.300
When people can reproduce your problems,
it's much easier for

00:34:49.300 --> 00:34:52.920
them to investigate them,
understand them, and fix them.

00:34:54.360 --> 00:34:57.740
So now let's take a look at the
fourth component of a good bug report,

00:34:57.910 --> 00:34:58.640
regression.

00:34:58.650 --> 00:34:59.980
What is regression?

00:34:59.990 --> 00:35:03.070
Regression is when you describe
where the problem occurs

00:35:03.470 --> 00:35:04.740
and where it doesn't occur.

00:35:04.780 --> 00:35:08.820
What builds of the operating system,
what architecture,

00:35:08.820 --> 00:35:10.860
what types of hardware?

00:35:13.200 --> 00:35:17.530
Say you have a problem and you
will see it not on an iBook G4,

00:35:17.530 --> 00:35:18.700
but only on a MacBook.

00:35:18.700 --> 00:35:20.980
Include that information.

00:35:21.040 --> 00:35:24.660
If you have any FireWire or
USB devices attached to the machine,

00:35:24.880 --> 00:35:25.770
try removing them.

00:35:25.850 --> 00:35:27.450
Does the problem still occur?

00:35:27.670 --> 00:35:29.020
If it does, great.

00:35:29.240 --> 00:35:33.250
If the problem doesn't occur,
remove devices one at a time

00:35:33.260 --> 00:35:35.530
until you can narrow it down
to the device that needs to be

00:35:35.610 --> 00:35:38.180
present for the problem to occur.

00:35:41.210 --> 00:35:43.470
So now, next, configuration.

00:35:43.810 --> 00:35:47.280
It's important to include information
about the machine configuration

00:35:47.280 --> 00:35:48.430
on which the problem occurred.

00:35:48.440 --> 00:35:51.600
And the best way to do that
is with a system profile.

00:35:51.600 --> 00:35:56.820
Go into System Profiler and save
an SPX file and not an RTF file.

00:35:56.820 --> 00:36:00.530
The SPX file contains
information in a format that

00:36:00.530 --> 00:36:02.790
can be easily read and parsed.

00:36:03.020 --> 00:36:05.820
And when you're saving the report,
remember two things.

00:36:06.000 --> 00:36:08.760
First, include a full report with
all of the information.

00:36:09.310 --> 00:36:11.610
And second,
make sure to take the profile on the

00:36:11.610 --> 00:36:14.700
machine which demonstrates the problem,
and not just the machine on

00:36:14.700 --> 00:36:16.520
which you are reporting the bug.

00:36:21.680 --> 00:36:25.680
If you have multi-monitor setup,
include that information.

00:36:25.680 --> 00:36:27.660
Talk about how many monitors you have.

00:36:27.940 --> 00:36:32.200
Talk about whether they're in
mirroring or extended desktop mode.

00:36:32.240 --> 00:36:36.400
Is this a PowerBook, iBook,
or MacBook running in lid-closed mode?

00:36:36.440 --> 00:36:39.840
What's the physical layout
of all these displays?

00:36:39.980 --> 00:36:42.200
Which display has the menu bar?

00:36:43.190 --> 00:36:44.940
What about application information?

00:36:45.080 --> 00:36:48.010
When you see a problem pertaining
to a particular application,

00:36:48.180 --> 00:36:51.790
you need to include detailed
information about that application.

00:36:52.790 --> 00:36:54.660
It's not enough to say,
I was using the latest

00:36:54.760 --> 00:36:56.970
version of this application,
or the current version,

00:36:56.970 --> 00:36:58.840
or the version that
shipped with my computer.

00:36:58.840 --> 00:37:00.820
You need to be very specific.

00:37:00.890 --> 00:37:03.710
For example, if you're writing a bug
app involving Photoshop,

00:37:03.760 --> 00:37:05.540
don't just say, I was using Photoshop.

00:37:05.560 --> 00:37:07.140
I was using Photoshop CS.

00:37:07.330 --> 00:37:13.560
Say, I was using Adobe Photoshop CS2
version 9.0.1.

00:37:14.040 --> 00:37:17.360
Now when you have an Apple application,
you'll see the build

00:37:17.360 --> 00:37:18.720
number in the About box.

00:37:18.790 --> 00:37:23.470
For example, in Preview,
you can see Preview 3.0.6, Build 409.

00:37:23.480 --> 00:37:25.580
Include this information
in the bug as well.

00:37:25.580 --> 00:37:29.630
Remember that versions will change in
software updates or security updates,

00:37:29.720 --> 00:37:32.250
and the version of a framework
could differ from the

00:37:32.350 --> 00:37:34.000
version of the application.

00:37:35.780 --> 00:37:37.410
What about third party software?

00:37:37.700 --> 00:37:40.400
Well, say you have some third party
software installed on your machine,

00:37:40.400 --> 00:37:46.280
like kernel extensions, or plugins,
haxies, or input managers.

00:37:46.880 --> 00:37:50.510
It's very useful to regress
the bug by removing these

00:37:50.510 --> 00:37:53.480
additional pieces of software
and seeing if the problem occurs.

00:37:53.600 --> 00:37:56.600
If the problem goes away,
it's very likely the problem lies

00:37:56.600 --> 00:37:58.380
in the other piece of software.

00:37:58.410 --> 00:38:02.010
And if the problem remains,
that's one less step engineers

00:38:02.010 --> 00:38:04.740
investigating the problem have to take.

00:38:05.720 --> 00:38:07.200
And what about reproducibility?

00:38:07.480 --> 00:38:08.910
Well, this one's easy.

00:38:09.030 --> 00:38:12.180
Is this a problem that
you see all the time?

00:38:12.260 --> 00:38:13.770
Is this a problem that is intermittent?

00:38:13.800 --> 00:38:16.300
Is it a problem you see
sometimes or rarely?

00:38:16.500 --> 00:38:21.400
Or is this a problem you saw only
once and are unable to reproduce?

00:38:21.610 --> 00:38:26.260
So let's summarize the best practices
when writing a bug description.

00:38:26.300 --> 00:38:29.780
Include a concise summary of the problem.

00:38:29.810 --> 00:38:34.320
Describe the expected results and how
they differ from the actual results.

00:38:34.330 --> 00:38:37.640
Include detailed steps to reproduce.

00:38:37.660 --> 00:38:40.310
Include regression information,
what builds and machines the

00:38:40.360 --> 00:38:42.570
problem does and doesn't occur on.

00:38:42.630 --> 00:38:46.820
Include the configuration information of
the machine where you saw the problem.

00:38:46.850 --> 00:38:50.610
And describe how
reproducible the problem is.

00:38:51.440 --> 00:38:54.440
So,
since you've been such a good audience,

00:38:54.440 --> 00:38:56.900
I have two bonus sections for you.

00:38:56.920 --> 00:39:00.630
So we have some four pieces of
application-specific information for

00:39:00.680 --> 00:39:04.310
filing bugs on these applications,
and we have some tips for how to

00:39:04.310 --> 00:39:06.090
set up your Mac for debugging.

00:39:06.090 --> 00:39:09.540
So let's go over the
application-specific information.

00:39:09.920 --> 00:39:11.960
So first, Xcode.

00:39:11.960 --> 00:39:14.160
Since you're all developers,
you probably spend a

00:39:14.160 --> 00:39:15.190
lot of time in Xcode.

00:39:15.190 --> 00:39:19.060
How do you file a really
good bug against Xcode?

00:39:19.060 --> 00:39:23.020
Well, a great thing to include
is your project file.

00:39:23.020 --> 00:39:26.740
If you have a problem that's occurring
with this particular project,

00:39:26.750 --> 00:39:28.260
that is really helpful.

00:39:28.260 --> 00:39:30.740
But sometimes you can't include
your project file or all

00:39:30.740 --> 00:39:32.080
the attached files with it.

00:39:32.150 --> 00:39:34.130
In that case,
there's some other pieces of

00:39:34.130 --> 00:39:35.650
data that are really helpful.

00:39:35.650 --> 00:39:39.320
You can include a test application,
which demonstrates the problem.

00:39:39.320 --> 00:39:39.850
Perhaps you can include
a test application that

00:39:39.860 --> 00:39:39.900
demonstrates the problem.

00:39:39.950 --> 00:39:42.920
Perhaps you're seeing a
problem in a particular API.

00:39:42.960 --> 00:39:44.380
What about a failing unit test?

00:39:44.520 --> 00:39:48.180
If you're using OC unit
and you have a unit test,

00:39:48.180 --> 00:39:50.210
include that with the bug.

00:39:50.490 --> 00:39:53.780
If you have any sample code at all,
which demonstrates the problem,

00:39:53.780 --> 00:39:56.890
even if it's just three lines,
it's all that's needed, great.

00:39:56.890 --> 00:39:58.260
Include that in the bug.

00:39:58.340 --> 00:39:59.510
What about test data?

00:39:59.750 --> 00:40:03.350
Say you have a problem that
occurs only with particular input.

00:40:03.350 --> 00:40:06.570
In that case,
include this test data with your bug.

00:40:09.510 --> 00:40:13.260
When you're writing up bugs on Xcode,
it's important to include as

00:40:13.350 --> 00:40:15.000
much evidence as possible.

00:40:15.050 --> 00:40:16.180
Take precise samples.

00:40:16.340 --> 00:40:19.300
This is really helpful when
you see an intermittent or

00:40:19.300 --> 00:40:21.140
hard-to-reproduce problem.

00:40:21.270 --> 00:40:23.540
Even circumstantial evidence is helpful.

00:40:23.540 --> 00:40:29.490
Any screenshot or any log or any...
those things are really helpful.

00:40:29.650 --> 00:40:32.770
Even if the engineer cannot
reproduce the problem,

00:40:32.920 --> 00:40:36.790
they might be able to prevent
it from recurring in the future.

00:40:38.100 --> 00:40:43.120
Make sure to include detailed information
about the version of Xcode you're using.

00:40:43.490 --> 00:40:46.320
In the About menu, in addition to the
regular version of Build,

00:40:46.320 --> 00:40:48.240
you'll see three pieces of information.

00:40:48.360 --> 00:40:50.620
Include all of them in your bug.

00:40:50.770 --> 00:40:53.690
Now what about if you've installed
some additional developer tools,

00:40:53.690 --> 00:40:56.030
say from Fink or Darwin ports?

00:40:56.290 --> 00:41:00.210
In that case, it's important to include
detailed version information about

00:41:00.210 --> 00:41:04.810
things like GCC and GDB and LD.

00:41:06.590 --> 00:41:09.650
If you have any sort of
build or linking failure,

00:41:09.670 --> 00:41:13.280
include the full build log in your bug.

00:41:18.440 --> 00:41:24.300
Sometimes removing temporary files
can make the problem go away.

00:41:24.420 --> 00:41:28.380
So move these files aside
and see if that helps.

00:41:28.460 --> 00:41:31.690
You'll see temporary files
in library caches Xcode,

00:41:31.690 --> 00:41:37.810
and then of course there's the build
directory inside your projects directory.

00:41:38.070 --> 00:41:41.370
If moving these files
aside fixes the problem,

00:41:41.380 --> 00:41:45.170
then it's helpful to
attach these to the bug.

00:41:46.230 --> 00:41:48.700
If you have a problem
and ZeroLink is enabled,

00:41:48.700 --> 00:41:53.100
try disabling ZeroLink and see if
that makes the problem go away.

00:41:53.100 --> 00:41:57.170
Now here's application specific
information tip number two:

00:41:57.630 --> 00:42:00.810
filing bugs against Java.

00:42:01.580 --> 00:42:05.240
If you have a Java application
that's hanging,

00:42:05.240 --> 00:42:08.250
you can get,
in addition to the regular sample,

00:42:08.260 --> 00:42:12.810
you can get a sample of the Java native
threads by typing kill-quit and

00:42:12.990 --> 00:42:15.780
the process ID of the Java process.

00:42:15.780 --> 00:42:18.480
This could go in many places.

00:42:18.480 --> 00:42:21.000
If it's a command line application,
you'll see it in the terminal.

00:42:21.000 --> 00:42:22.960
You could see it in the console log.

00:42:22.960 --> 00:42:25.000
You could see it in
Safari's Java console,

00:42:25.000 --> 00:42:27.920
if you have enabled that,
which we'll talk about later.

00:42:28.850 --> 00:42:32.960
You could see it in Xcode's run log,
if you're running this in Xcode.

00:42:32.960 --> 00:42:39.620
Now, it's important to include both the
native threads from sample or shark,

00:42:39.680 --> 00:42:42.800
and the Java threads,
which you get from kill-quit.

00:42:44.510 --> 00:42:46.890
If you're using a
developer preview of Java,

00:42:47.050 --> 00:42:50.350
you can prefix the bug title
with the version of Java.

00:42:50.700 --> 00:42:54.400
For example, Java 6 release 1 DP4.

00:42:54.400 --> 00:42:57.610
And the Java team finds it very
helpful if you regress the bug

00:42:57.610 --> 00:42:59.780
against the shipping version of Java.

00:42:59.900 --> 00:43:02.830
So this is a problem that
occurs only in Java 6,

00:43:02.830 --> 00:43:04.880
and not in Java 1.5.

00:43:05.010 --> 00:43:08.740
And speaking of Java 1.5,
it's important to include detailed

00:43:08.740 --> 00:43:12.400
version information about the version
of Java you have on the system.

00:43:12.550 --> 00:43:14.900
The version number of
Java looks something like this.

00:43:14.900 --> 00:43:17.900
It's 1.5.0 under bar 06.

00:43:17.950 --> 00:43:20.400
If you use Perl,
you'll see something like that as well.

00:43:20.570 --> 00:43:23.390
But this is not all of the
version information for Java.

00:43:23.400 --> 00:43:24.800
There's even more.

00:43:24.960 --> 00:43:27.830
The best thing to do
is type java-version,

00:43:27.910 --> 00:43:29.740
and you'll get some output
that looks like this.

00:43:29.900 --> 00:43:33.900
And if you include all of this,
this way the Java team knows exactly

00:43:33.900 --> 00:43:37.900
what version of Java you have,
and where you saw the problem.

00:43:38.780 --> 00:43:42.290
I think that's really
helpful is a JUnit unit test.

00:43:42.670 --> 00:43:45.000
If you're a Java developer
and you can create a unit test

00:43:45.000 --> 00:43:47.640
that demonstrates the problem,
there are two benefits to this.

00:43:47.730 --> 00:43:50.520
Number one,
it makes sure the Java team is seeing

00:43:50.520 --> 00:43:52.700
the same problem that you're seeing.

00:43:52.750 --> 00:43:56.240
And number two,
they have the opportunity to include

00:43:56.240 --> 00:44:00.450
that test in their test suite,
which would make sure the problem

00:44:00.450 --> 00:44:02.500
doesn't recur in the future.

00:44:04.330 --> 00:44:07.040
All right,
third application-specific tip.

00:44:07.060 --> 00:44:11.140
What about when you're writing
bugs against your own applications?

00:44:11.350 --> 00:44:14.840
Well, you have to assume that the
engineers reading the bug have

00:44:14.840 --> 00:44:16.480
never seen your application.

00:44:16.480 --> 00:44:17.560
They don't know what it does.

00:44:17.600 --> 00:44:21.200
They don't know your terminology
specific to your application's domain.

00:44:21.330 --> 00:44:24.500
So you don't want to write
about something like receipts,

00:44:24.570 --> 00:44:27.180
or debits, or credits, or reconciling.

00:44:27.290 --> 00:44:30.200
Instead, you need to be very specific
in your steps and tell people

00:44:30.200 --> 00:44:35.830
what menu items to click,
and what buttons to press, and so on.

00:44:36.910 --> 00:44:40.510
Next, you want to make sure the
engineers have access to your

00:44:40.510 --> 00:44:43.640
software to reproduce the problem.

00:44:44.430 --> 00:44:48.820
Even if it's a problem that you see
in the system that only occurs with

00:44:48.820 --> 00:44:51.920
a particular piece of software,
they're going to need that piece of

00:44:51.920 --> 00:44:53.960
software to reproduce the problem.

00:44:54.680 --> 00:44:56.940
And when you give them the software,
make sure they can use it.

00:44:57.220 --> 00:45:01.100
So if your software requires a dongle,
if it requires any serial number,

00:45:01.160 --> 00:45:04.360
any sort of activation,
any username or password,

00:45:04.390 --> 00:45:06.220
make sure they have access to that.

00:45:06.270 --> 00:45:08.950
And make sure also,
this is not a trial version of

00:45:08.950 --> 00:45:12.670
the software that will expire by
the time the engineer gets around

00:45:12.670 --> 00:45:14.690
to investigating the problem.

00:45:15.550 --> 00:45:17.400
All right, Safari.

00:45:17.450 --> 00:45:22.210
Here's some tips from web developers
who are writing bugs against Safari.

00:45:22.440 --> 00:45:26.300
So the first thing you can do is take a
look at this web page that demonstrates

00:45:26.300 --> 00:45:28.300
the problem in other web browsers.

00:45:28.360 --> 00:45:30.130
Does this problem still occur?

00:45:30.140 --> 00:45:31.300
OK.

00:45:31.320 --> 00:45:33.820
Well, if the problem goes away,
perhaps the site is

00:45:33.840 --> 00:45:35.270
doing browser detection.

00:45:35.320 --> 00:45:41.300
And you can have Safari spoof its user
agent and pretend to be something else.

00:45:41.380 --> 00:45:42.300
So how do we do this?

00:45:42.300 --> 00:45:44.240
First, we need to issue a
defaults write command.

00:45:44.300 --> 00:45:49.300
So go into terminal and type
defaults write com.apple.safari

00:45:49.300 --> 00:45:51.300
include debug menu 1.

00:45:51.300 --> 00:45:54.740
Then launch Safari and
you'll see the Debug menu.

00:45:55.310 --> 00:45:58.300
At the bottom of the debug
menu is the User Agent submenu.

00:45:58.330 --> 00:46:02.080
You can pretend to be Firefox or
Internet Explorer for Windows,

00:46:02.120 --> 00:46:05.480
or an old version of Netscape,
for example.

00:46:05.500 --> 00:46:10.590
Now go to this unfriendly site,
and see if the problem goes away.

00:46:11.060 --> 00:46:13.580
If it goes away and they
are using browser detection,

00:46:13.610 --> 00:46:14.740
write up a bug.

00:46:14.830 --> 00:46:17.640
Say that this site is
using browser detection.

00:46:17.660 --> 00:46:20.770
What if the problem still occurs?

00:46:20.850 --> 00:46:23.720
Maybe they let you in this time,
but the site doesn't work.

00:46:23.730 --> 00:46:27.140
They could be using
browser-specific HTML or JavaScript,

00:46:27.480 --> 00:46:31.020
something like document.all,
an old method in DHTML.

00:46:31.030 --> 00:46:33.380
In this case, still write a bug.

00:46:33.380 --> 00:46:38.920
The Safari team will work with the
website developer to make sure that

00:46:38.920 --> 00:46:43.130
the site uses web standards and is
compatible with all web browsers.

00:46:49.090 --> 00:46:50.590
What about plugins?

00:46:50.730 --> 00:46:53.100
Say you have a particular plugin.

00:46:53.130 --> 00:46:54.230
It's PowerPC only.

00:46:54.340 --> 00:46:59.440
Remember, if you have a new Intel Mac,
that plugins aren't loaded under Rosetta.

00:46:59.570 --> 00:47:04.800
So if you need to use this plugin,
you'll need to open Safari in Rosetta.

00:47:07.520 --> 00:47:15.360
If you have a problem related to Flash,
make sure to include detailed

00:47:15.360 --> 00:47:16.950
version information about Flash.

00:47:17.100 --> 00:47:19.500
Which dot release of Flash do you have?

00:47:19.520 --> 00:47:22.200
Do you have Flash 8,
or do you have Flash 9 beta?

00:47:24.280 --> 00:47:27.710
If you see a problem on a site
that's in a foreign language,

00:47:28.060 --> 00:47:32.150
you need to include step-by-step
instructions for the Safari team.

00:47:32.470 --> 00:47:35.400
You can't assume they speak any
language other than English,

00:47:35.440 --> 00:47:40.290
so take pictures of the site and
circle the items they need to click,

00:47:40.290 --> 00:47:43.710
or what they need to type
to reproduce the problem.

00:47:44.660 --> 00:47:47.500
A great thing to include
is a copy of the web page.

00:47:47.510 --> 00:47:50.710
If you go to File and
Save As and save a web archive,

00:47:50.710 --> 00:47:52.140
attach that to the bug.

00:47:52.480 --> 00:47:55.690
This is really helpful for dynamic
sites that change all the time.

00:47:55.800 --> 00:47:59.050
This way you can ensure the
Safari engineer sees the same

00:47:59.160 --> 00:48:01.300
version of the site that you saw.

00:48:02.340 --> 00:48:05.160
Now, if you're a web developer,
you might want to download the

00:48:05.160 --> 00:48:06.760
latest nightly build of WebKit.

00:48:07.010 --> 00:48:08.530
You can check the problem there.

00:48:08.690 --> 00:48:10.430
This is a problem that's
been fixed in WebKit.

00:48:10.460 --> 00:48:14.670
If so, it might be fixed in the
next version of Safari.

00:48:14.880 --> 00:48:18.160
This is a problem that only
occurs in WebKit and not in

00:48:18.170 --> 00:48:19.440
the currently shipping version.

00:48:19.440 --> 00:48:22.260
Well,
you definitely want to write that bug up,

00:48:22.620 --> 00:48:26.180
because the Safari team takes
compatibility very seriously.

00:48:26.190 --> 00:48:30.990
If a site worked in Safari,
it needs to continue to work in Safari.

00:48:31.330 --> 00:48:35.270
So if you're a web developer,
it's great to use the WebKit nightly.

00:48:35.280 --> 00:48:38.150
It's certainly not required
to send a bug to Apple,

00:48:38.150 --> 00:48:38.810
though.

00:48:39.400 --> 00:48:41.740
When you're writing a bug
about a particular website,

00:48:41.780 --> 00:48:45.680
it's important to include the
full URL to the page or resource

00:48:45.790 --> 00:48:50.280
that demonstrates the problem,
not just the name of the site.

00:48:50.390 --> 00:48:54.290
If the site requires a
username or password,

00:48:54.390 --> 00:48:56.220
it's important to note that in the bug.

00:48:56.300 --> 00:48:58.980
If this is a site you own,
you can create an account

00:48:59.050 --> 00:49:00.250
for the Safari team.

00:49:00.320 --> 00:49:01.230
It's really helpful.

00:49:01.350 --> 00:49:03.170
But if this is a banking
or a brokerage site,

00:49:03.210 --> 00:49:05.500
don't include your own
username and password and

00:49:05.500 --> 00:49:07.130
send that to the Safari team.

00:49:07.300 --> 00:49:11.180
Instead, provide them with contact
information for the site owner so

00:49:11.180 --> 00:49:13.300
they can obtain their own account.

00:49:14.700 --> 00:49:16.360
Now what about firewalls?

00:49:16.400 --> 00:49:19.700
Well, say you have a problem on a
page that's behind a firewall,

00:49:19.720 --> 00:49:21.500
and you want the
Safari team to look at it.

00:49:21.500 --> 00:49:23.600
They probably can't.

00:49:23.730 --> 00:49:26.600
You need to either find some
way to grant them access,

00:49:26.710 --> 00:49:29.090
or you can save a copy of the
page using the Web Archive

00:49:29.090 --> 00:49:30.670
method we discussed earlier.

00:49:31.700 --> 00:49:32.700
What about proxy servers?

00:49:32.700 --> 00:49:35.660
If you're behind a proxy server,
or a problem occurs with

00:49:35.660 --> 00:49:38.680
a particular proxy server,
include that information in the bug.

00:49:38.700 --> 00:49:40.650
Talk about the version
of the proxy server,

00:49:40.860 --> 00:49:43.700
the name of the proxy software,
what platforms it's running on.

00:49:43.700 --> 00:49:47.300
All of that information
is really helpful.

00:49:47.860 --> 00:49:51.380
The gold standard for a
Safari bug is a reduction.

00:49:51.690 --> 00:49:52.640
What is a reduction?

00:49:52.930 --> 00:49:58.000
A reduction is the minimum piece of the
web page that demonstrates the problem.

00:49:59.770 --> 00:50:03.580
Creating a reduction is an iterative
process where you remove pieces of the

00:50:03.580 --> 00:50:08.120
page until you have the smallest possible
piece that demonstrates the problem.

00:50:08.240 --> 00:50:11.550
Sometimes it's trial and error,
and you'll cut pieces out and

00:50:11.580 --> 00:50:13.840
put them back in until you
find something that works.

00:50:13.880 --> 00:50:16.430
A reduction is certainly not required.

00:50:16.510 --> 00:50:19.000
It's really helpful,
and the Safari team will

00:50:19.000 --> 00:50:20.390
love you if you do this.

00:50:20.720 --> 00:50:25.200
So, last piece of information on
how to file a bug is how do you

00:50:25.280 --> 00:50:27.700
set up your Mac for debugging?

00:50:28.130 --> 00:50:31.560
Well, the first thing you're going
to want to do is enable SSH.

00:50:31.600 --> 00:50:34.570
When you enable SSH,
you can log into your machine remotely

00:50:35.040 --> 00:50:39.430
if you need to do some debugging when
you're running a full screen application,

00:50:39.430 --> 00:50:42.480
or playing a game, or a video,
or perhaps the GUI is

00:50:42.480 --> 00:50:44.140
hung or unresponsive.

00:50:44.140 --> 00:50:49.930
You can do this by going
to System Preferences,

00:50:49.930 --> 00:50:51.160
and then Sharing,
and checking the box beside Remote Login.

00:50:51.920 --> 00:50:54.800
Next thing you want to do is install
a couple of pieces of software.

00:50:55.020 --> 00:50:58.900
When you install the developer tools,
you get things like GDB,

00:50:58.900 --> 00:51:00.210
which are really helpful for debugging.

00:51:00.210 --> 00:51:04.230
If you install the Chud tools,
that's where you get Shark,

00:51:04.240 --> 00:51:09.970
which is super handy whenever you see any
sort of a performance problem or a hang.

00:51:10.600 --> 00:51:12.230
Next thing you want to do is take notes.

00:51:12.380 --> 00:51:14.600
Reporters have their reporter's notepad.

00:51:14.600 --> 00:51:16.580
And in this case,
you really do want to write

00:51:16.660 --> 00:51:17.960
things down on a piece of paper.

00:51:17.960 --> 00:51:21.280
When your Mac is in the state where
it's experiencing the problem,

00:51:21.280 --> 00:51:24.070
you might not be able to get
at the information you need.

00:51:24.120 --> 00:51:25.990
So what do you want to write down?

00:51:26.020 --> 00:51:29.280
First thing you want to write down
is the IP address of your machine.

00:51:29.280 --> 00:51:30.840
So that way you can log in remotely.

00:51:30.840 --> 00:51:36.560
Now, maybe the IP address is
changing or it's gone away.

00:51:36.600 --> 00:51:39.390
Perhaps your DHCP server went down.

00:51:39.500 --> 00:51:41.860
In this case,
writing down the Bonjour name of

00:51:42.140 --> 00:51:43.600
the machine is really helpful.

00:51:43.600 --> 00:51:45.170
And that way you can still log in.

00:51:45.180 --> 00:51:49.400
In other cases,
the host name will be helpful if...

00:51:50.420 --> 00:51:52.540
If that stays the same.

00:51:52.540 --> 00:51:56.370
And finally,
you can get the hardware address of both

00:51:56.370 --> 00:51:59.300
the Ethernet and airport interfaces.

00:51:59.330 --> 00:52:04.570
This information is really helpful for
diagnosing any sort of a network problem.

00:52:05.680 --> 00:52:09.920
Now, you never know when a
problem is going to occur.

00:52:09.940 --> 00:52:13.200
And if you're ready to debug
it when it does happen,

00:52:13.200 --> 00:52:16.440
you don't have to wait
around and reproduce it.

00:52:16.460 --> 00:52:19.590
And this is especially important
for any sort of intermittent

00:52:19.590 --> 00:52:21.270
or hard to reproduce problem.

00:52:24.390 --> 00:52:27.280
So now,
let's move on to the fifth question.

00:52:27.620 --> 00:52:32.290
Where do you file a bug
against an Apple product?

00:52:32.540 --> 00:52:34.470
Well,
there are many places in Apple products

00:52:34.470 --> 00:52:36.480
where you can provide feedback to Apple.

00:52:36.630 --> 00:52:39.200
When you see a crash,
there's the crash reporter dialog.

00:52:39.300 --> 00:52:41.950
And if you click
Report and Send to Apple,

00:52:41.950 --> 00:52:43.590
that goes right to us.

00:52:43.870 --> 00:52:47.060
If you're a WebKit developer,
you could be using

00:52:47.060 --> 00:52:49.140
Bugzilla to write out bugs.

00:52:49.220 --> 00:52:52.850
If you're a Safari user,
you might click the Report Bug to

00:52:52.870 --> 00:52:54.610
Apple button in Safari.

00:52:55.110 --> 00:53:00.750
In applications like Keynote and iWeb,
you could use the Provide

00:53:00.750 --> 00:53:00.750
Feedback menu item.

00:53:01.190 --> 00:53:04.510
You might have an email address
you use to communicate with Apple.

00:53:04.690 --> 00:53:08.540
But in all of these cases,
you should use Apple Bug Reporter.

00:53:08.690 --> 00:53:11.190
When you write a bug
using Apple Bug Reporter,

00:53:11.300 --> 00:53:12.860
you get a bug number,
and you can use that

00:53:12.940 --> 00:53:14.240
to track the problem.

00:53:14.390 --> 00:53:17.610
If people need more information about it,
they can contact you.

00:53:17.750 --> 00:53:20.070
If you find additional
information about the problem,

00:53:20.270 --> 00:53:23.690
you can add that to the bug.

00:53:23.810 --> 00:53:25.700
So where do you get Apple Bug Reporter?

00:53:25.890 --> 00:53:28.690
It's bugreport.apple.com.

00:53:29.890 --> 00:53:34.630
So, finally,
when is it appropriate to file a bug?

00:53:34.630 --> 00:53:38.390
People ask, should I file a bug?

00:53:38.970 --> 00:53:40.970
The answer to that question is yes.

00:53:40.970 --> 00:53:43.750
Now, there are two objections to this.

00:53:44.240 --> 00:53:47.600
Number one, people will say,
this bug is trivial.

00:53:47.600 --> 00:53:49.060
It only affects me.

00:53:49.180 --> 00:53:51.560
Maybe it only affects two people.

00:53:51.600 --> 00:53:53.100
Maybe it's just a typo.

00:53:53.420 --> 00:53:54.600
It doesn't matter.

00:53:54.880 --> 00:53:55.860
File a bug.

00:53:56.200 --> 00:54:00.200
The second objection that people
have is that this bug is obvious.

00:54:00.200 --> 00:54:02.840
They say, Paul,
surely Apple has 12 copies

00:54:02.840 --> 00:54:04.180
of this bug already.

00:54:04.180 --> 00:54:05.470
Should I file this bug?

00:54:05.900 --> 00:54:06.280
Yes.

00:54:06.280 --> 00:54:07.880
File the bug.

00:54:07.960 --> 00:54:10.160
So, why would you do that?

00:54:10.230 --> 00:54:13.300
Well, it's much better to have three
reports of a problem than to

00:54:13.420 --> 00:54:14.980
have no reports of the problem.

00:54:15.020 --> 00:54:20.190
And secondly, having multiple reports
helps engineers prioritize.

00:54:20.190 --> 00:54:22.130
They know how widespread the problem is.

00:54:22.200 --> 00:54:24.760
So, to sum up...

00:54:28.050 --> 00:54:30.670
First thing a reporter does
is a reporter gathers tools.

00:54:30.860 --> 00:54:32.620
So they'll have their notebook.

00:54:32.700 --> 00:54:35.560
In your case,
you're going to have your Mac,

00:54:35.570 --> 00:54:37.750
and you're going to have the
right software installed.

00:54:37.900 --> 00:54:40.400
You're going to have
remote login enabled.

00:54:40.440 --> 00:54:42.060
A great reporter will chase the story.

00:54:42.060 --> 00:54:45.240
They're going to interview witnesses,
and they'll gather documents.

00:54:45.320 --> 00:54:46.380
And they'll run around town.

00:54:46.610 --> 00:54:49.870
In your case,
you're going to get crash logs,

00:54:49.870 --> 00:54:53.050
and you're going to include screenshots,
and you're going to have

00:54:53.470 --> 00:54:58.600
All sorts of log files which
are relevant to the problem.

00:54:58.600 --> 00:55:01.060
And a great reporter writes clearly.

00:55:01.360 --> 00:55:05.040
You need to write your bug report
very clearly so people reading

00:55:05.170 --> 00:55:06.960
it understand the problem.

00:55:07.170 --> 00:55:09.980
So, why again do we write bugs?

00:55:10.330 --> 00:55:12.570
Because writing bugs
can be very rewarding.

00:55:12.570 --> 00:55:15.660
You get great software,
and when you have great software,

00:55:15.800 --> 00:55:17.360
you have really happy customers.

00:55:18.850 --> 00:55:21.950
So, when you go home today,
I want you to write a bug.

00:55:22.220 --> 00:55:25.700
I want you to employ all the
practices we talked about today.

00:55:25.880 --> 00:55:28.700
Make sure your title
is clear and concise.

00:55:28.920 --> 00:55:31.300
Make sure you summarize the problem well.

00:55:31.370 --> 00:55:34.700
Make sure you include
detailed steps to reproduce.

00:55:34.870 --> 00:55:38.700
Make sure you include all the relevant
configuration and regression information.

00:55:38.870 --> 00:55:42.250
So think about whatever is bothering you.

00:55:42.600 --> 00:55:44.290
Think about some suggestion
you have for an improvement,

00:55:44.290 --> 00:55:44.290
and write that up.

00:55:46.250 --> 00:55:50.160
So go ahead and take that step,
the first step,

00:55:50.160 --> 00:55:51.770
towards solving the problem.

00:55:51.840 --> 00:55:54.700
Now while great bug reporting
won't win you the Pulitzer,

00:55:54.750 --> 00:55:58.500
the great software that results
could get you one of these.

00:55:58.570 --> 00:56:00.620
Thank you very much.