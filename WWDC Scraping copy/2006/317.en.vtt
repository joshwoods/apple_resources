WEBVTT

00:00:11.080 --> 00:00:12.650
Good morning, my name is Jon Hess.

00:00:12.650 --> 00:00:15.110
Today I'm going to speak to you
about integrating your custom views

00:00:15.170 --> 00:00:17.840
into the new Interface Builder 3.

00:00:20.970 --> 00:00:23.190
So let's go ahead and start with
a quick feature recap of what's

00:00:23.190 --> 00:00:24.640
new in Interface Builder 3.

00:00:24.660 --> 00:00:26.950
In Interface Builder 3,
we added a new document window

00:00:27.350 --> 00:00:30.180
with three new display modes,
an updated inspector panel that

00:00:30.180 --> 00:00:34.140
we've sliced up into show the
attributes of your classes,

00:00:34.140 --> 00:00:36.950
a new connections heads-up
display that allow you to quickly

00:00:36.950 --> 00:00:40.220
make connections and see what's
connected to and from your objects.

00:00:40.230 --> 00:00:43.820
We've added support for all the new
Cocoa controls and Cocoa animations,

00:00:43.820 --> 00:00:47.100
and we've added a library for
accessing all of your controls,

00:00:47.120 --> 00:00:48.480
objects, and views.

00:00:49.550 --> 00:00:52.430
So the interesting part about what's
in Interface Builder 3 for this

00:00:52.560 --> 00:00:53.600
talk is going to be the library.

00:00:53.600 --> 00:00:55.660
And specifically,
we're going to talk about how

00:00:55.660 --> 00:00:58.130
to integrate your objects into
Interface Builder's library.

00:00:58.140 --> 00:01:02.270
So the library is a set of categorized,
pre-configured template objects.

00:01:02.340 --> 00:01:05.500
And the user just uses the library
to drag and drop your objects and

00:01:05.500 --> 00:01:07.530
duplicate them into their document.

00:01:11.400 --> 00:01:14.310
So why would you extend Interface
Builder and bring your own

00:01:14.310 --> 00:01:15.400
objects into our library?

00:01:15.400 --> 00:01:17.790
Well,
if your application has a customized

00:01:17.790 --> 00:01:20.820
look and feel or you have some custom
views that you use in your application,

00:01:20.840 --> 00:01:24.120
you're probably familiar with Interface
Builder's NS Custom View that you

00:01:24.180 --> 00:01:27.010
drag in and set the custom class,
and when you run your application,

00:01:27.010 --> 00:01:28.340
your view appears in its place.

00:01:28.360 --> 00:01:31.420
Well, it's hard to lay out and set up
your view just the way that you

00:01:31.420 --> 00:01:33.180
want it with just the custom view.

00:01:33.180 --> 00:01:35.060
If you integrate your view
into Interface Builder,

00:01:35.060 --> 00:01:39.570
you'll be able to use WYSIWYG editing
to position your view just exactly where

00:01:39.570 --> 00:01:41.440
you want to see it in your interface.

00:01:41.440 --> 00:01:44.560
So if you follow our steps today
and build a plugin for your view,

00:01:44.560 --> 00:01:46.780
it's going to be really easy
for you to set up your interface

00:01:46.870 --> 00:01:49.180
and design its layout and style
and get everything just right.

00:01:51.730 --> 00:01:54.000
Another reason why you might
integrate your view into Interface

00:01:54.000 --> 00:01:56.760
Builder is if you go through all
the steps to integrate your view,

00:01:56.760 --> 00:01:59.630
you'll package it in a framework,
and now your view will be

00:01:59.630 --> 00:02:02.670
loading into two applications,
your application and our application.

00:02:02.680 --> 00:02:06.810
And that's going to mean that you've
gone through the steps to modulize

00:02:06.810 --> 00:02:10.510
and well-factor your view classes,
and the well-factored code is

00:02:10.510 --> 00:02:14.070
going to be more maintainable and
easier to use in your application.

00:02:17.100 --> 00:02:20.420
So as we talk about integrating
views into Interface Builder today,

00:02:20.460 --> 00:02:23.100
we're going to refer back
to a couple of samples.

00:02:23.100 --> 00:02:25.420
And the first sample we're going
to refer to is the fragment view.

00:02:25.420 --> 00:02:28.350
You can think of the fragment
view as a simplified version

00:02:28.350 --> 00:02:29.900
of the segmented control.

00:02:29.900 --> 00:02:31.370
It only has a couple of properties.

00:02:31.380 --> 00:02:35.280
It has a set of fragments,
and it has a label for each of them.

00:02:35.280 --> 00:02:39.160
We also have one other...

00:02:39.210 --> 00:02:40.820
Sam,
we're going to refer back to you today

00:02:40.820 --> 00:02:43.420
as we talk about the different ways that
you integrate views in Interface Builder.

00:02:43.420 --> 00:02:44.720
This is the fill view.

00:02:44.720 --> 00:02:46.360
It's just a simple box.

00:02:46.360 --> 00:02:50.200
It has a fill color property
and a border color property.

00:02:50.200 --> 00:02:53.560
It also accepts other views as children,
so it has a content area.

00:02:53.560 --> 00:02:54.870
Here we go.

00:02:56.500 --> 00:02:59.900
So in order to go through all the
steps of building a plugin today,

00:02:59.900 --> 00:03:03.940
we're going to start by talking about
how you should design your view.

00:03:03.940 --> 00:03:08.110
What are some good principles
that you should have?

00:03:08.160 --> 00:03:10.620
In general, these aren't specifically
for Interface Builder,

00:03:10.620 --> 00:03:12.500
but if you follow them,
it's going to make integrating your

00:03:12.510 --> 00:03:13.880
view into Interface Builder very easy.

00:03:13.880 --> 00:03:18.080
It'll also make it very easy for
other applications to use your view

00:03:18.080 --> 00:03:20.380
once they're in your framework.

00:03:21.200 --> 00:03:23.290
We're going to talk about
the anatomy of a plugin,

00:03:23.300 --> 00:03:26.750
like what belongs in your plugin bundle,
what classes you'll need to have,

00:03:26.750 --> 00:03:30.980
where your plugin bundle needs to live,
and how the Interface Builder

00:03:30.980 --> 00:03:34.080
architecture and framework is structured
so that you can build your plugin.

00:03:34.080 --> 00:03:37.380
We're also going to have a checklist that
you can go through one step at a time for

00:03:37.380 --> 00:03:40.680
how to build your plugin and integrate
your view into Interface Builder.

00:03:42.840 --> 00:03:44.640
So first, the design philosophy.

00:03:44.640 --> 00:03:48.140
What are some general practices and
tips that you should follow when

00:03:48.140 --> 00:03:51.950
building your object to make it easy to
integrate them into Interface Builder?

00:03:52.790 --> 00:03:54.700
Your object should provide archiving.

00:03:54.700 --> 00:03:58.060
This is standard NS-- if you
adopt the NS coding protocol and

00:03:58.060 --> 00:04:01.820
implement the standard methods,
initWithCoder and encodeWithCoder,

00:04:01.820 --> 00:04:04.690
we'll need to have you do that
to have your view integrate

00:04:04.760 --> 00:04:06.300
into Interface Builder.

00:04:06.370 --> 00:04:09.500
You also need to be key value coding
compliant and key value observing

00:04:09.770 --> 00:04:12.530
compliant for a number of key pass,
and we'll talk about which

00:04:12.530 --> 00:04:16.140
key pass a little bit later,
but doing those is going to make your

00:04:16.200 --> 00:04:18.290
object work great in Interface Builder.

00:04:18.650 --> 00:04:22.560
You're also going to want to use
proper accessors and mutators.

00:04:22.560 --> 00:04:25.690
So just accessing your instance
variables with either set value for key,

00:04:25.790 --> 00:04:28.120
get value for key,
or just using your accessors

00:04:28.120 --> 00:04:31.900
is going to ensure that you're
KVO coding and observation compliant.

00:04:31.900 --> 00:04:33.960
Then also correct display and validation.

00:04:34.000 --> 00:04:37.430
You need to make sure that whenever
any of your properties of your view

00:04:37.590 --> 00:04:41.180
change that affect the display of
your view to properly call set needs

00:04:41.180 --> 00:04:43.440
display or set needs display and rect.

00:04:43.850 --> 00:04:48.280
This is going to ensure that undo and
redo are going to always keep your view

00:04:48.280 --> 00:04:50.780
looking just the way that it should.

00:04:50.780 --> 00:04:55.770
So if you do all these things
and adopt these standard

00:04:56.200 --> 00:04:58.910
These standard protocols,
you're going to get undo and redo

00:04:58.910 --> 00:05:00.520
for free in Interface Builder.

00:05:00.520 --> 00:05:02.600
Your view is going to
be copy and pasteable.

00:05:02.610 --> 00:05:04.310
We're going to be able to use
the lift and stamp tool that

00:05:04.320 --> 00:05:07.140
we talked about on Wednesday in
the Interface Builder session.

00:05:07.140 --> 00:05:12.380
Your inspector is going
to refresh properly,

00:05:12.410 --> 00:05:18.080
and your widget is always going
to look correct across undos,

00:05:18.080 --> 00:05:18.080
redos, inspector changes, resizes,
and everything.

00:05:19.390 --> 00:05:23.340
So next let's talk about the
Interface Builder plugin architecture.

00:05:23.340 --> 00:05:24.530
What classes live in what places?

00:05:24.540 --> 00:05:26.300
What do you need to subclass?

00:05:26.300 --> 00:05:27.590
How does that all work?

00:05:27.660 --> 00:05:30.920
So we have Interface Builder
structured with an application,

00:05:30.930 --> 00:05:34.280
the Interface Builder app,
the Interface Builder kit.

00:05:34.280 --> 00:05:36.360
This is a framework that the
Interface Builder app uses and

00:05:36.360 --> 00:05:37.470
that your plugins will use.

00:05:37.520 --> 00:05:38.240
And then plugins.

00:05:38.330 --> 00:05:40.650
All of our views are integrated
into Interface Builder with the

00:05:40.760 --> 00:05:43.060
same plugins that I'm going to
teach you how to make today.

00:05:45.290 --> 00:05:48.640
So let's go ahead and take a look
at the Interface Builder kit.

00:05:48.640 --> 00:05:50.690
The Interface Builder kit
has three classes that we're

00:05:50.700 --> 00:05:52.800
going to be focusing on today.

00:05:52.800 --> 00:05:54.290
The first is IB plugin.

00:05:54.320 --> 00:05:57.850
IB plugin is how you tell Interface
Builder about all of your widgets,

00:05:58.010 --> 00:06:01.240
views, objects, controllers.

00:06:01.370 --> 00:06:02.920
The next is the IB inspector.

00:06:02.930 --> 00:06:05.850
This is how you-- you'll
want a subclass IB inspector,

00:06:05.850 --> 00:06:10.270
and you'll use this to show the user
all of the properties of your objects,

00:06:10.350 --> 00:06:11.860
views,
and controllers when the user selects

00:06:11.930 --> 00:06:14.800
them and brings up the inspector.

00:06:14.800 --> 00:06:16.400
Next is IB document.

00:06:16.400 --> 00:06:20.460
You can use IB document to ask Interface
Builder about all the other objects

00:06:20.740 --> 00:06:24.110
that are in a document along with yours.

00:06:26.280 --> 00:06:28.240
In addition to those three
classes that I just mentioned,

00:06:28.240 --> 00:06:32.130
Interface Builder makes heavy use
of categories to decide what are the

00:06:32.130 --> 00:06:34.180
runtime capabilities of your object.

00:06:34.200 --> 00:06:36.670
And two of them that are
going to be important to us

00:06:36.670 --> 00:06:39.900
are IB Object Integration,
this category on IB Object,

00:06:39.900 --> 00:06:43.450
and it's going to give you an
opportunity to declare what the

00:06:43.720 --> 00:06:45.660
attributes of your object are.

00:06:45.660 --> 00:06:48.780
Those are the attributes that
you'll need to be KVO compliant

00:06:48.780 --> 00:06:50.180
and KVC compliant for.

00:06:50.180 --> 00:06:52.690
It's also going to give you
an opportunity to list the

00:06:52.690 --> 00:06:54.260
inspectors for your object.

00:06:55.220 --> 00:06:57.380
We also have category methods on view.

00:06:57.380 --> 00:07:02.300
And one of the things that they do is
help provide precise geometry information

00:07:02.300 --> 00:07:07.030
to Interface Builder so that we can
give you a nice WYSIWYG experience

00:07:07.150 --> 00:07:10.770
with the layout and the Aqua guides
and all the snapping and proper rules.

00:07:13.580 --> 00:07:16.250
All right, so let's get to the meat
of the presentation,

00:07:16.370 --> 00:07:18.330
the Interface Builder plugin checklist.

00:07:18.440 --> 00:07:21.110
We're going to go through a set of
steps that you're going to do one

00:07:21.110 --> 00:07:24.590
by one in your Xcode project to
build an Interface Builder plugin.

00:07:24.670 --> 00:07:28.600
So the first thing that we're going
to talk about is the plugin class.

00:07:31.280 --> 00:07:33.760
So our diagram from earlier,
once your plugin's included,

00:07:33.760 --> 00:07:35.560
it's going to look something like this.

00:07:35.560 --> 00:07:37.730
We'll have the Interface
Builder application linking the

00:07:37.730 --> 00:07:39.030
Interface Builder framework.

00:07:39.040 --> 00:07:43.580
We'll have your plugin that links
the Interface Builder kit framework,

00:07:43.600 --> 00:07:46.460
and your plugin will link your framework.

00:07:46.460 --> 00:07:49.040
And so your view is going
to live in your framework,

00:07:49.040 --> 00:07:51.440
and by having your plugin
link your framework,

00:07:51.440 --> 00:07:54.680
all this is going to come to
life inside of Interface Builder.

00:07:54.680 --> 00:07:57.380
And Interface Builder is going
to access everything to do with

00:07:57.390 --> 00:07:58.970
your view through your plugin.

00:08:00.780 --> 00:08:03.230
So you should put your
view in your framework.

00:08:03.310 --> 00:08:05.670
Your application will
link your framework.

00:08:05.670 --> 00:08:07.880
Your plugin will link your framework.

00:08:07.880 --> 00:08:11.780
All of your Interface Builder logic that
has to do with integrating your view into

00:08:11.780 --> 00:08:13.950
Interface Builder belongs in your plugin.

00:08:13.990 --> 00:08:16.050
None of it belongs in your framework.

00:08:16.060 --> 00:08:19.380
And so you should have categories
on your objects that I just talked

00:08:19.610 --> 00:08:22.420
about to override the category
as we talked about earlier,

00:08:22.420 --> 00:08:26.100
and we're going to go into further
detail later in the presentation.

00:08:26.100 --> 00:08:29.880
And your subclasses of IB Inspector,
for example, belong in your framework.

00:08:32.950 --> 00:08:34.360
So how do you define your plugin?

00:08:34.360 --> 00:08:36.500
We've overloaded the term plugin.

00:08:36.500 --> 00:08:38.400
There's the plugin bundle.

00:08:38.400 --> 00:08:41.050
This is the on-disk
representation of your plugin,

00:08:41.130 --> 00:08:43.200
standard NSBundle,
and then there's a plugin subclass

00:08:43.270 --> 00:08:44.190
that you're going to write.

00:08:44.220 --> 00:08:48.520
So the plugin bundle being a
standard NSBundle needs to have

00:08:48.550 --> 00:08:50.940
a unique bundle identifier.

00:08:50.940 --> 00:08:53.300
This is the bundle
identifier in the InfoP list.

00:08:53.300 --> 00:08:56.700
We use this for uniquing your plugin,
and we also use it for

00:08:56.700 --> 00:08:58.140
tracking dependencies.

00:08:58.850 --> 00:09:01.790
So that once a document begins
to use objects from your plugin,

00:09:01.790 --> 00:09:05.180
we make sure to load your plugin in
the future to edit that document.

00:09:09.610 --> 00:09:14.330
In your bundle that you have on disk,
in your Info.plist,

00:09:14.330 --> 00:09:17.240
there's a key NSPrincipleClass.

00:09:17.240 --> 00:09:20.920
You're going to need to set that
to be the name of the subclass

00:09:20.920 --> 00:09:22.670
that you provide for IB plugin.

00:09:22.700 --> 00:09:25.350
And that's how Interface Builder is
going to know who to talk to when it

00:09:25.350 --> 00:09:26.920
loads your plugin for the first time.

00:09:26.920 --> 00:09:29.450
So as soon as it loads your plugin,
it's going to begin talking to the

00:09:29.460 --> 00:09:31.220
shared instance of that principal class.

00:09:31.220 --> 00:09:36.230
And as resources of your plugin bundle,
you should have class descriptions.

00:09:36.260 --> 00:09:38.380
We're going to go into those in
section four of the checklist.

00:09:39.080 --> 00:09:41.670
But the class descriptions tell
Interface Builder how to connect

00:09:41.740 --> 00:09:44.060
the objects that you integrate into
Interface Builder with each other.

00:09:44.060 --> 00:09:45.730
Like what outlets and actions they have.

00:09:47.230 --> 00:09:49.560
So, in the plugin class,
as opposed to the plugin bundle,

00:09:49.560 --> 00:09:52.120
there's two methods that you're
going to want to override.

00:09:52.120 --> 00:09:53.560
One of them is label.

00:09:53.560 --> 00:09:57.440
Label is there to help you
provide a user-readable name.

00:09:57.440 --> 00:10:00.990
So, this is what's going to show
up in the preferences or

00:10:00.990 --> 00:10:03.800
during dependency analysis if,
you know,

00:10:03.810 --> 00:10:06.260
should a plugin fail to be loaded.

00:10:07.720 --> 00:10:10.570
We're also going to have a method,
libraryNibNames.

00:10:10.570 --> 00:10:13.910
You override this method and return
a list of names of nibs that are

00:10:13.910 --> 00:10:17.090
in your bundle's resources that
Interface Builder is going to

00:10:17.090 --> 00:10:19.180
load and inject into the library.

00:10:19.180 --> 00:10:20.940
So, this is how you're going to get
your views into the library.

00:10:20.940 --> 00:10:24.030
So, this is the most important and first
method that you're probably going to

00:10:24.030 --> 00:10:25.680
look at when you build your plugin.

00:10:28.490 --> 00:10:31.600
Okay, for all the file types and projects
and bundles that we talked about,

00:10:31.600 --> 00:10:33.080
we've got Xcode templates available.

00:10:33.080 --> 00:10:37.500
So there's a new project template in
the Interface Builder SDK section.

00:10:37.500 --> 00:10:42.100
It's in the standard
Apple plugin section of Xcode,

00:10:42.100 --> 00:10:44.900
and it's the Interface
Builder 3.0 plugin.

00:10:44.900 --> 00:10:49.140
If you create a new instance of
this project from this template,

00:10:49.140 --> 00:10:53.300
it includes a framework
to put your view into,

00:10:53.300 --> 00:10:56.960
and it also includes a target to
build a plugin for Interface Builder.

00:10:57.410 --> 00:10:59.560
And that project's ready to build, run,
link,

00:10:59.560 --> 00:11:04.140
and load into Interface Builder right
after you instantiate the template

00:11:04.140 --> 00:11:05.520
from Xcode New Project Assistant.

00:11:05.560 --> 00:11:08.710
We also have new files in the
Xcode New File Assistant for

00:11:08.710 --> 00:11:12.040
the class description files
that we talked about earlier,

00:11:12.040 --> 00:11:15.520
for Inspector NIBS,
and for the Inspector class.

00:11:15.520 --> 00:11:18.950
All right,
so that's how we build the plugin.

00:11:21.540 --> 00:11:23.620
Now let's go ahead and take a
look at how you build your library

00:11:23.620 --> 00:11:25.980
nibs because once you do this,
then you'll be ready to actually

00:11:25.980 --> 00:11:28.280
see something in Interface Builder.

00:11:28.530 --> 00:11:32.410
So these library nibs tell Interface
Builder about the objects that

00:11:32.410 --> 00:11:33.450
you're going to integrate into it.

00:11:33.510 --> 00:11:34.700
They actually contain the objects.

00:11:34.740 --> 00:11:40.400
So you use Interface Builder to build
your plugin for Interface Builder.

00:11:42.750 --> 00:11:44.560
You might have many objects
that you're going to integrate

00:11:44.560 --> 00:11:45.380
into Interface Builder.

00:11:45.380 --> 00:11:48.360
Inside of these library
nibs that you build,

00:11:48.360 --> 00:11:50.430
you're going to put
library template objects.

00:11:50.440 --> 00:11:53.280
You might have noticed in
Interface Builder's new library,

00:11:53.280 --> 00:11:56.000
there's an IBA SDK section
underneath the Cocoa section,

00:11:56.000 --> 00:11:58.850
and it just includes one object,
and that object's the

00:11:58.850 --> 00:12:00.380
library template object.

00:12:00.680 --> 00:12:03.660
You can drag that into your interface,
and it's a container,

00:12:03.660 --> 00:12:07.860
and you'll put your view inside of it,
and then Interface Builder will load

00:12:07.940 --> 00:12:12.450
that into the library when you specify
the name of this nib in the library

00:12:12.450 --> 00:12:16.540
nib names method I mentioned earlier.

00:12:16.540 --> 00:12:19.450
And we're going to show you exactly how
to do that in a demo in a little bit.

00:12:21.760 --> 00:12:25.450
So the library object template
needs to provide a couple of

00:12:25.560 --> 00:12:27.140
things that are mandatory.

00:12:27.140 --> 00:12:29.070
The first is it must
have a single sub view.

00:12:29.070 --> 00:12:31.770
This sub view is what the user
is going to drag from the library

00:12:31.770 --> 00:12:33.240
to deposit into a document.

00:12:33.240 --> 00:12:38.600
It needs to have a path to categorize
the template into the tree of available

00:12:38.800 --> 00:12:40.120
controls in Interface Builder.

00:12:40.120 --> 00:12:45.060
It also needs to have a label to
identify the template to the user.

00:12:45.060 --> 00:12:48.850
To set the content of the library,
just add one sub view to the library

00:12:49.440 --> 00:12:51.370
object template in Interface Builder.

00:12:51.780 --> 00:12:56.180
To set the label and the path,
there's an inspector for the view.

00:12:56.180 --> 00:12:58.270
So when you select an Interface Builder,
you can bring up the

00:12:58.270 --> 00:13:00.070
attributes inspector,
and it will be placed right

00:13:00.070 --> 00:13:01.280
there to set the label and path.

00:13:03.920 --> 00:13:07.060
So there's also two optional properties
of the library object templates.

00:13:07.090 --> 00:13:09.840
If you've played with Interface Builder,
you might have noticed as you

00:13:09.860 --> 00:13:14.340
drag our views off of the library,
they animate into larger,

00:13:14.350 --> 00:13:16.340
more discernible forms of themselves.

00:13:16.340 --> 00:13:21.870
The way that you set this up
is that we have two outlets

00:13:21.870 --> 00:13:25.500
on IB Library Object Template.

00:13:25.500 --> 00:13:28.480
The outlets are Dragged
View and Represented Object.

00:13:28.480 --> 00:13:33.600
If you connect the Dragged View of the
Library Object Template to another view,

00:13:33.850 --> 00:13:38.170
then as the user drags your
small view of the content of

00:13:38.180 --> 00:13:41.310
the Library Object Template,
it will animate to the view that

00:13:41.310 --> 00:13:43.320
you set as the Dragged View.

00:13:43.320 --> 00:13:46.090
You can also set a Represented
Object outlet for your

00:13:46.090 --> 00:13:47.650
Library Object Template.

00:13:47.660 --> 00:13:49.850
This is how you can drag
something other than a view.

00:13:49.860 --> 00:13:52.370
So you might put an image or a
view representation of something

00:13:52.620 --> 00:13:55.700
that's not actually a view,
for example, a controller or subclass.

00:13:57.450 --> 00:14:00.300
And then when the user drags
your view off of the library

00:14:00.300 --> 00:14:03.470
and deposits it into a document,
it will actually deposit

00:14:03.470 --> 00:14:05.290
your controller object.

00:14:07.330 --> 00:14:09.250
Once you've built your plugin,
you'll need to load it

00:14:09.250 --> 00:14:10.140
into Interface Builder.

00:14:10.140 --> 00:14:12.340
After you define these
library object templates,

00:14:12.360 --> 00:14:14.240
you're going to have something
that's ready for the user to see

00:14:14.240 --> 00:14:17.680
or for you to test and interact
with in Interface Builder.

00:14:17.810 --> 00:14:21.570
And the way you'll do that is you'll
bring up Interface Builder's preferences.

00:14:21.780 --> 00:14:23.700
In the Preferences,
there's a toolbar across the top

00:14:23.700 --> 00:14:25.960
with different preference sections,
and one of them is Plugins.

00:14:25.960 --> 00:14:28.730
In the Plugins section,
there's a small plus button

00:14:28.730 --> 00:14:31.850
underneath the list of plugins,
and you can go ahead and click that,

00:14:31.860 --> 00:14:33.540
and you'll be presented
with an open dialog.

00:14:33.540 --> 00:14:36.430
You'll be able to go find your plugin,
load it, and see your objects appear in

00:14:36.440 --> 00:14:37.740
Interface Builder's library.

00:14:39.410 --> 00:14:41.410
So with that, I'm going to hand it
over to Matthew Firlik,

00:14:41.410 --> 00:14:44.130
and he's going to give you a demo
of the first steps in creating

00:14:44.130 --> 00:14:45.170
your Interface Builder plugin.

00:14:51.440 --> 00:14:52.260
Thanks, Jon.

00:14:52.360 --> 00:14:55.660
So to give you guys an example of
what we're trying to talk about here,

00:14:55.750 --> 00:14:58.160
up here you see the view
that Jon was describing.

00:14:58.160 --> 00:14:59.340
This is the fragment view.

00:14:59.500 --> 00:15:01.690
And I just put it into a
little demo application,

00:15:01.780 --> 00:15:05.220
and I centered it and gave it four
or five different little fragments.

00:15:05.480 --> 00:15:08.550
Now, how many of you guys have
written custom views before?

00:15:09.870 --> 00:15:14.020
So I think you guys probably all know
that in order to get that on the screen,

00:15:14.200 --> 00:15:15.270
I had to write a little bit of code.

00:15:15.290 --> 00:15:17.520
And so I'm just going to show
you that here's the little app

00:15:17.520 --> 00:15:20.160
delegate code that I wrote,
just a simple await from nib.

00:15:20.160 --> 00:15:23.480
And I had to go through and actually
create the different fragment names,

00:15:23.480 --> 00:15:26.220
go ahead and allocate the view,
put it inside,

00:15:26.220 --> 00:15:28.680
and then raise your hand if you
like the crazy math where you've

00:15:28.680 --> 00:15:31.290
got to figure out the coordinate
space and get it all fitting and

00:15:31.290 --> 00:15:32.650
the strings and struts and stuff.

00:15:32.660 --> 00:15:34.180
Yeah, exactly.

00:15:34.200 --> 00:15:34.980
Everybody loves that.

00:15:34.980 --> 00:15:37.760
You guys shouldn't have to do this.

00:15:37.760 --> 00:15:40.270
So this is what we're going to
remove for you is the ability to

00:15:40.270 --> 00:15:43.310
take this view and just put it into
IB and make this a lot simpler.

00:15:43.320 --> 00:15:46.220
So I'm going to go ahead and close this.

00:15:46.220 --> 00:15:49.930
And on the left-hand side here,
I have my IB fragment view project.

00:15:49.940 --> 00:15:52.980
This project has two targets in it,
as Jon described.

00:15:52.980 --> 00:15:55.660
This is from the Xcode project template.

00:15:55.660 --> 00:15:58.340
It has a framework target,
and it has a plug-in target.

00:15:58.340 --> 00:16:03.040
So the framework target has the
two files for this particular view.

00:16:03.040 --> 00:16:05.550
It has the IB fragment view
and the fragment itself.

00:16:05.560 --> 00:16:07.680
And I've already built that
and just put that into.

00:16:07.760 --> 00:16:09.940
I'm going to go ahead and
create a new class here.

00:16:09.940 --> 00:16:12.030
And we're going to call it MyPlugin.

00:16:12.040 --> 00:16:12.050
And I'm going to go ahead
and create a new class here.

00:16:12.060 --> 00:16:14.040
And the plugin is going to
use that framework to put the

00:16:14.110 --> 00:16:15.370
view into Interface Builder.

00:16:15.380 --> 00:16:17.700
So I'm not going to do any magic here.

00:16:17.700 --> 00:16:19.180
We're just going to go
ahead and do the real thing.

00:16:19.180 --> 00:16:21.080
Let's just go ahead and
create a new class here.

00:16:21.080 --> 00:16:23.800
And we're going to call it MyPlugin.

00:16:25.880 --> 00:16:27.900
And go ahead and add that
to the correct target,

00:16:27.920 --> 00:16:29.740
to my plugin target.

00:16:29.850 --> 00:16:31.800
And there's my class.

00:16:31.800 --> 00:16:34.730
So this is going to be the class that
is the principal class for the plugin

00:16:34.850 --> 00:16:38.130
that helps tell IB what the name is,
where the library files are.

00:16:38.140 --> 00:16:41.640
A couple things you need to make sure
you do is you make sure to bring in

00:16:41.640 --> 00:16:44.670
the Interface Builder kit framework.

00:16:45.040 --> 00:16:45.770
So we'll do that.

00:16:45.920 --> 00:16:50.050
And this should be a
subclass of IB plugin.

00:16:51.120 --> 00:16:52.890
That's all I need to do on that side.

00:16:52.940 --> 00:16:54.480
Go into the actual implementation.

00:16:54.480 --> 00:16:56.680
As Jon described,
there are two methods that

00:16:56.680 --> 00:16:57.920
we really need to implement.

00:16:57.920 --> 00:17:00.580
The first is the label for
this particular plug-in.

00:17:00.580 --> 00:17:04.600
And this is what's going to show
up inside of the inspector when

00:17:04.600 --> 00:17:06.070
I go ahead and load my plug-in.

00:17:06.110 --> 00:17:10.190
And we'll just call this My Demo Plug-in.

00:17:10.620 --> 00:17:14.060
And the next thing is the
array of library nib names.

00:17:14.170 --> 00:17:18.350
This is the names of all of the
nib files that we want to load

00:17:18.400 --> 00:17:22.050
into the library when this plugin
is put into Interface Builder.

00:17:22.070 --> 00:17:26.080
So I'm just going to go ahead and type in

00:17:26.840 --> 00:17:29.980
I'm just going to put in any
name that I want right now.

00:17:30.000 --> 00:17:32.750
And we'll call this My Library Nib.

00:17:34.780 --> 00:17:36.330
So that's it.

00:17:36.380 --> 00:17:38.860
That's all the code that
I need to put in for my plugin.

00:17:38.910 --> 00:17:42.310
So now let's go ahead and since
I said that the library nib name,

00:17:42.350 --> 00:17:44.600
I'm only going to have one,
it's called my library nib,

00:17:44.630 --> 00:17:47.360
let's go ahead and create that nib file.

00:17:47.410 --> 00:17:49.390
So I'm just going to go
down here to Resources.

00:17:49.540 --> 00:17:52.230
New feature we haven't talked about,
but some of you might have

00:17:52.230 --> 00:17:54.600
noticed that if you could bring
up the new file assistant,

00:17:54.650 --> 00:17:57.880
there are now nib files in the wizard,
so you don't actually have to go

00:17:57.880 --> 00:17:59.100
to IB and create them anymore.

00:17:59.150 --> 00:18:01.380
You can just do them right from Xcode.

00:18:04.080 --> 00:18:05.990
So I'm going to go ahead and
create a new empty nib file,

00:18:06.020 --> 00:18:08.640
make sure I name it what
I called it in my plugin,

00:18:08.760 --> 00:18:13.240
click Finish, and let's go ahead and open
that up in Interface Builder.

00:18:13.320 --> 00:18:16.630
So I open it up and you see that there's
nothing in my nib file right now.

00:18:16.700 --> 00:18:19.440
What we need to do is put in
a view in order to put the

00:18:19.600 --> 00:18:21.300
elements for the library.

00:18:21.320 --> 00:18:26.500
So I'm just going to drag a custom view
into the window here and open that up,

00:18:26.560 --> 00:18:28.570
and here's my custom view.

00:18:28.710 --> 00:18:31.170
So as Jon said,
there's a section in the library,

00:18:31.170 --> 00:18:34.040
you can see it up here, called the IBSDK.

00:18:34.040 --> 00:18:37.000
And if I click on that,
there's one view inside of it.

00:18:37.000 --> 00:18:38.720
It might be difficult to
see with the lighting here,

00:18:38.720 --> 00:18:40.120
but there actually is an element here.

00:18:40.120 --> 00:18:41.710
And when I pull it off,
you can see it's this

00:18:41.710 --> 00:18:42.660
little white square.

00:18:42.660 --> 00:18:44.920
This is the library object template.

00:18:44.920 --> 00:18:48.070
It just looks like a little white view,
but this is the element that's

00:18:48.090 --> 00:18:50.820
going to contain your view that
you want to put into the library.

00:18:50.840 --> 00:18:53.150
So now at this point,
I have the template for it.

00:18:53.160 --> 00:18:54.440
Now I need to put my view in it.

00:18:54.840 --> 00:18:58.780
But now we're kind of at the catch-22 of
I can't put my view in the library until

00:18:58.780 --> 00:19:03.050
it's somewhere where I can get at it,
but I don't have it here to work with.

00:19:03.080 --> 00:19:05.360
So what I'm going to do
is I'm going to go back,

00:19:05.360 --> 00:19:09.090
and I'm going to grab another custom
view and just drop that inside

00:19:09.440 --> 00:19:12.040
of the library object template.

00:19:12.040 --> 00:19:16.250
And I'll bring up the inspector here
and just resize a little bit so that

00:19:16.250 --> 00:19:18.720
it fits a little better in the window.

00:19:20.360 --> 00:19:23.240
So this is going to be the
representation for my view.

00:19:23.320 --> 00:19:25.840
And the only thing I need to
do is to bring up the inspector

00:19:26.140 --> 00:19:28.680
and to tell it here that it says
right now that it's an NSView,

00:19:28.680 --> 00:19:29.990
but I know that's not right.

00:19:30.060 --> 00:19:33.730
I want this to be my IB fragment view.

00:19:34.520 --> 00:19:37.440
So now I've set the
custom class for that,

00:19:37.440 --> 00:19:39.200
and that will be the element
that's dragged off when

00:19:39.320 --> 00:19:41.300
I do it from the library.

00:19:41.430 --> 00:19:44.380
Now, Jon also described that you can do
this for things that aren't views.

00:19:44.380 --> 00:19:47.120
So we have the Fragment View,
but we also have a fragment.

00:19:47.120 --> 00:19:49.360
And a fragment is just
an NSObject subclass.

00:19:49.360 --> 00:19:50.700
So I'm going to put in another template.

00:19:50.700 --> 00:19:52.860
And in this case,
I'd go back to the library

00:19:52.880 --> 00:19:56.100
and try and figure out,
well, what am I going to drag in here?

00:19:56.100 --> 00:19:59.140
Well, the thing is that I don't really
have a view I can drag in here.

00:19:59.140 --> 00:20:00.750
What I really want is an object.

00:20:00.750 --> 00:20:03.620
So I'm just going to drag an object
into my document window here.

00:20:03.620 --> 00:20:06.430
And much like I did before
with the Fragment View,

00:20:06.430 --> 00:20:09.000
I'm going to make this a custom subclass.

00:20:09.000 --> 00:20:10.240
And this is just the IB Fragment.

00:20:11.370 --> 00:20:13.340
And now I want to connect these two up.

00:20:13.380 --> 00:20:17.100
So I'm going to go ahead
and bring up the HUD here.

00:20:17.100 --> 00:20:20.140
And I can grab this
and bring it over here.

00:20:20.140 --> 00:20:22.110
And now it's saying, well,
it's not letting me connect that.

00:20:22.110 --> 00:20:22.800
Why would that be?

00:20:22.810 --> 00:20:25.120
Well,
it's doing that because it doesn't really

00:20:25.120 --> 00:20:26.990
know what kind of object this is yet.

00:20:27.010 --> 00:20:31.740
What I need to actually do is come over
here into the framework project and just

00:20:31.750 --> 00:20:34.200
grab the header and drag it in here.

00:20:34.200 --> 00:20:36.990
And now that's going to tell it, oh,
IB Fragment is actually

00:20:37.000 --> 00:20:38.260
an NSObject subclass.

00:20:38.260 --> 00:20:40.280
It's OK that you can go
ahead and connect that.

00:20:41.300 --> 00:20:43.440
So now it'll connect up.

00:20:43.550 --> 00:20:46.260
But I still have nothing in
the library object template.

00:20:46.260 --> 00:20:48.730
If I brought it up,
it would be an empty view.

00:20:48.790 --> 00:20:52.030
So I'm just going to go back to my
library and we'll grab an image.

00:20:52.070 --> 00:20:54.280
And we'll drop the image right in here.

00:20:54.300 --> 00:20:57.320
And we'll make this a generic object.

00:20:57.390 --> 00:20:59.740
And we'll make sure
that it's large enough.

00:20:59.830 --> 00:21:03.050
So that's the image for the view.

00:21:03.290 --> 00:21:05.610
So we have the image and
the represented object.

00:21:05.680 --> 00:21:08.920
If I decided not to actually
put the represented object in,

00:21:08.960 --> 00:21:12.790
I'd be dragging an image into my project,
and that's probably not what you want.

00:21:13.060 --> 00:21:15.400
So as a final step here,
we're going to go ahead

00:21:15.400 --> 00:21:16.780
and select both of these.

00:21:16.800 --> 00:21:19.160
And you'll see in the inspector
here that there's a label.

00:21:19.190 --> 00:21:21.850
What I really want to set, though,
is the library path.

00:21:21.930 --> 00:21:25.970
This is the section in the library that
these views are going to show up in.

00:21:26.050 --> 00:21:29.320
So I'll just call this Demo.

00:21:29.350 --> 00:21:30.460
And go ahead.

00:21:30.490 --> 00:21:32.210
And now I'm done.

00:21:32.290 --> 00:21:34.250
Nothing else to do for my library.

00:21:34.320 --> 00:21:38.270
Let's go back here and
just build this project.

00:21:39.100 --> 00:21:40.610
And it succeeded.

00:21:40.680 --> 00:21:43.490
So Interface Builder is still running,
but now I just need to load my plugin.

00:21:43.500 --> 00:21:45.210
So I'm going to go ahead and
bring up the preferences,

00:21:45.230 --> 00:21:49.160
go to the Plugins tab,
and let's go and load the

00:21:49.280 --> 00:21:50.060
plugin that I just built.

00:21:50.100 --> 00:21:52.290
So we'll click the plus sign.

00:21:52.290 --> 00:21:54.710
There's the plugin I just built.

00:21:54.750 --> 00:21:55.880
Click Open.

00:21:55.880 --> 00:21:58.040
And you'll see a couple things happen.

00:21:58.040 --> 00:22:03.080
First, it put my demo plugin in here,
and there's the My Library nib.

00:22:04.050 --> 00:22:06.620
And when I click over here,
there's the demo section,

00:22:06.620 --> 00:22:08.970
and there are the views
in Interface Builder.

00:22:09.010 --> 00:22:13.060
And if we just go ahead and
create a new window here,

00:22:13.060 --> 00:22:17.430
you'll see that very easily I can
just go back and drag this view

00:22:17.430 --> 00:22:20.920
off and drop it on my window,
and there's my fragment view.

00:22:20.920 --> 00:22:24.160
So I can go ahead and resize it,
and there's my view.

00:22:24.700 --> 00:22:27.330
Integration in about two minutes,
30 seconds.

00:22:27.330 --> 00:22:28.840
It's actually that easy.

00:22:28.840 --> 00:22:30.710
So...

00:22:35.410 --> 00:22:36.600
With that,
I'm going to give it back to Jon,

00:22:36.600 --> 00:22:38.770
and we'll talk about creating the
inspectors and everything else you need.

00:22:38.780 --> 00:22:44.680
Thank you, Matt.

00:22:48.500 --> 00:22:50.030
All right,
so let's go ahead and take a couple

00:22:50.030 --> 00:22:53.300
steps through the rest of our plugin
checklist and see what it'll take to

00:22:53.310 --> 00:22:56.940
build all the rest of the Interface
Builder support for our plugin.

00:22:58.030 --> 00:23:00.060
The inspectors are probably
the most interesting piece

00:23:00.060 --> 00:23:01.760
that's missing right now,
so let's jump right into that.

00:23:01.810 --> 00:23:06.200
So, a quick review of the inspectors
in Interface Builder 3.

00:23:06.200 --> 00:23:11.130
We've sliced up our inspector a little
bit differently in Interface Builder

00:23:11.320 --> 00:23:12.720
3 than we did in Interface Builder 2.

00:23:12.720 --> 00:23:16.120
There's some modes across the top
to inspect things like attributes,

00:23:16.120 --> 00:23:18.840
connections, size, bindings,
and animations.

00:23:19.420 --> 00:23:23.500
And inside of the different modes,
we have some slices to inspect the

00:23:23.500 --> 00:23:28.580
different properties as they are
owned by the classes that represent

00:23:28.580 --> 00:23:30.040
the objects that are selected.

00:23:30.040 --> 00:23:33.370
So, today we're going to talk about
putting one of your inspectors

00:23:33.400 --> 00:23:37.120
into the stack of inspector slices
on the attributes inspector mode.

00:23:39.330 --> 00:23:42.620
So to create an inspector,
you're going to make a custom subclass

00:23:42.630 --> 00:23:44.690
of IB Inspector in your project.

00:23:44.760 --> 00:23:45.890
In your inspector,
you're going to want to

00:23:45.890 --> 00:23:48.100
override at least two methods.

00:23:48.160 --> 00:23:50.350
One of them is going to be ViewNibName.

00:23:50.410 --> 00:23:54.000
ViewNibName tells Interface
Builder which nib to load to load

00:23:54.000 --> 00:23:56.540
the interface for your inspector.

00:23:56.930 --> 00:24:00.940
In that nib,
you should have the file's owner

00:24:00.940 --> 00:24:05.840
set to the custom Inspector class
that you've just written.

00:24:05.840 --> 00:24:10.790
And you should have one connection
from the file's owner to a single

00:24:10.790 --> 00:24:13.720
top-level custom view in the nib file.

00:24:13.740 --> 00:24:15.740
And that's going to be the
Inspector view that Interface

00:24:15.740 --> 00:24:19.040
Builder loads into its Inspector when
one of your objects is selected.

00:24:19.040 --> 00:24:21.060
Next is a refresh method.

00:24:21.390 --> 00:24:23.420
Refresh is the method on IB Inspector.

00:24:23.500 --> 00:24:24.740
You're going to override that method.

00:24:24.740 --> 00:24:27.730
It's going to be called
for you very often.

00:24:27.790 --> 00:24:30.080
It's going to be called whenever
the selected objects change,

00:24:30.080 --> 00:24:33.020
meaning either the set of objects
changes or the properties of any

00:24:33.020 --> 00:24:34.730
of the objects in the set change.

00:24:34.740 --> 00:24:37.190
When that happens,
you're going to have an opportunity

00:24:37.190 --> 00:24:40.920
to update all of your Inspector UI to
show the current properties of

00:24:41.060 --> 00:24:43.510
the objects that are selected.

00:24:43.710 --> 00:24:45.480
You should also have action
methods in your inspector.

00:24:45.480 --> 00:24:48.560
When the user clicks on the
widgets in your inspector,

00:24:48.640 --> 00:24:51.020
your action methods will fire,
and this will be your opportunity to set

00:24:51.020 --> 00:24:53.640
the properties of the inspected objects.

00:24:56.200 --> 00:24:58.050
So the inspector stack,
how does this work?

00:24:58.070 --> 00:25:02.340
There's a category method that
we talked about on NSObject,

00:25:02.340 --> 00:25:05.840
and that category method is IB populate
attributes inspector classes.

00:25:05.840 --> 00:25:08.700
We're going to invoke this whenever
one of your objects is selected,

00:25:08.760 --> 00:25:11.420
and this is how you're going to
tell us who your inspector is.

00:25:11.420 --> 00:25:14.900
So when this method gets invoked,
we're going to pass in an NSMutable

00:25:14.900 --> 00:25:18.330
array as the single argument,
and you're going to invoke super.

00:25:18.720 --> 00:25:21.350
Super is going to take the
opportunity to invoke its parent

00:25:21.350 --> 00:25:23.990
all the way up to NSObject,
and each object in turn is

00:25:23.990 --> 00:25:26.950
going to put its inspector class
into the array of inspectors,

00:25:26.960 --> 00:25:28.800
and you'll do that last,
meaning your inspector

00:25:28.800 --> 00:25:29.750
will show up at the top.

00:25:29.760 --> 00:25:33.470
So the order that the array is populated
with inspector subclasses is the order

00:25:33.560 --> 00:25:37.230
that the inspectors will show up in
Interface Builder's inspector panel.

00:25:39.600 --> 00:25:42.570
So to implement your Inspector class,
I talked about actions and

00:25:42.580 --> 00:25:44.870
the refresh method earlier,
but you can also do it

00:25:44.870 --> 00:25:45.910
automatically with bindings.

00:25:45.920 --> 00:25:48.420
And that's by far the easiest
way to implement your Inspector.

00:25:48.420 --> 00:25:51.500
So if you build your Inspector in
Interface Builder and you have a

00:25:51.500 --> 00:25:54.080
number of checkboxes to control,
some Boolean properties and

00:25:54.080 --> 00:25:56.980
maybe some text fields to
input some numbers or strings,

00:25:56.980 --> 00:25:58.440
you can bind them all.

00:25:58.460 --> 00:26:01.190
And what you want to bind
them to is IP Inspector,

00:26:01.190 --> 00:26:04.980
which is your files owner, has a method,
has a property,

00:26:05.890 --> 00:26:08.050
inspected objects controller,
and this is an array controller.

00:26:08.060 --> 00:26:12.820
So you can bind all of your
Inspector widgets to the files

00:26:12.820 --> 00:26:16.420
owner's inspected objects
controllers dot selection keypath.

00:26:16.460 --> 00:26:19.880
If you choose to do
your Inspector manually,

00:26:19.880 --> 00:26:22.640
you override the refresh method.

00:26:22.640 --> 00:26:24.920
Every time it's called,
you should iterate over your

00:26:24.920 --> 00:26:27.340
Inspector objects and refresh
all of your Inspector widgets.

00:26:27.340 --> 00:26:31.390
And then you should also use actions
and outlets so that when the user clicks

00:26:31.550 --> 00:26:34.980
on the various Inspector widgets or
types into them and presses return,

00:26:35.480 --> 00:26:38.900
you'll have an opportunity to take
the user's input and apply them to the

00:26:38.990 --> 00:26:40.560
properties of the selected objects.

00:26:40.620 --> 00:26:44.300
And again, you can actually mix the
automatic or manual Inspector.

00:26:44.320 --> 00:26:46.730
So you can have actions and outlets
and override the refresh method

00:26:46.730 --> 00:26:48.040
and bind some of your controls.

00:26:51.100 --> 00:26:52.760
So, multiple inspection,
that's a new thing

00:26:52.760 --> 00:26:53.500
with Interface Builder.

00:26:53.500 --> 00:26:56.300
And it's fairly difficult to
implement if you do things

00:26:56.300 --> 00:26:58.900
manually with a refresh method,
and it's really easy with bindings.

00:26:58.900 --> 00:27:00.300
So I'm going to encourage
you to use bindings here.

00:27:00.300 --> 00:27:04.110
But if you do it manually,
the common case is that the common

00:27:04.310 --> 00:27:08.000
cases you'll run into is either all
the objects that you have selected

00:27:08.000 --> 00:27:11.250
are going to have the same property,
the same value for

00:27:11.250 --> 00:27:12.500
some specific property.

00:27:12.500 --> 00:27:14.100
And if that's the case,
you'll just reflect that

00:27:14.150 --> 00:27:17.280
property in the Inspector widget
that reflects the property.

00:27:18.660 --> 00:27:23.480
If at least one object differs in a
value for the representative attribute,

00:27:23.480 --> 00:27:25.860
then you'll want to put some kind
of mixed state into the control.

00:27:25.860 --> 00:27:27.580
So, for example,
you might use the placeholder

00:27:27.600 --> 00:27:29.840
string of a text field,
set a pop-up button to

00:27:29.840 --> 00:27:33.400
have no selected item,
or put a checkbox into the mixed state.

00:27:33.420 --> 00:27:36.640
There are some uncommon cases
where it's really hard to

00:27:36.640 --> 00:27:37.600
deal with multiple selection.

00:27:37.600 --> 00:27:40.080
If you have an attribute
that's multi-valued,

00:27:40.080 --> 00:27:43.100
for example, think if we had a person
object that might have an

00:27:43.100 --> 00:27:47.450
array of aliases as a property,
too many relationship to aliases.

00:27:49.590 --> 00:27:52.150
If the user selects two people
with two different sets of aliases,

00:27:52.210 --> 00:27:54.840
there's nothing that we can really
show the user to reflect that.

00:27:54.940 --> 00:27:59.010
Even if the two properties agree,
it would be confusing to somehow

00:27:59.010 --> 00:28:02.150
reflect that into a table
view or some other control.

00:28:02.160 --> 00:28:08.750
It's perfectly acceptable to just bail
out at this point and mark that widget

00:28:08.750 --> 00:28:12.340
that you can't support for multiple
selection as disabled and don't populate

00:28:12.340 --> 00:28:14.260
it when there's multiple inspection.

00:28:15.540 --> 00:28:19.740
If your entire inspector UI is populated
with values like this that just

00:28:19.740 --> 00:28:24.130
can't deal with multiple inspection,
you have an opportunity to override

00:28:24.130 --> 00:28:27.710
the method supportsMultipleInspection
on your inspector.

00:28:27.820 --> 00:28:30.750
And should you do this and return no,
then your inspector will just

00:28:30.750 --> 00:28:32.860
stay out of the stack when
there's a multiple inspection.

00:28:35.700 --> 00:28:40.720
So let's take a look at how
this all plays together.

00:28:40.820 --> 00:28:43.740
When the user selects your
object for the first time,

00:28:43.940 --> 00:28:45.890
when the user selects
your object any time,

00:28:45.960 --> 00:28:49.180
Interface Builder is going to call
the method ibpopulate attributes

00:28:49.180 --> 00:28:50.940
inspector classes on your object.

00:28:51.050 --> 00:28:52.500
You're going to call super.

00:28:52.500 --> 00:28:54.120
For example,
if we were the fragment view,

00:28:54.120 --> 00:28:55.080
that would be NSVU.

00:28:55.200 --> 00:28:56.200
NSVU is going to call super.

00:28:56.200 --> 00:28:58.370
We're going to populate
the stack of inspectors.

00:28:58.510 --> 00:29:02.090
So as we go one at a time,
we build up the inspector stack.

00:29:02.300 --> 00:29:05.440
Then the user's going to enter
some value into your inspector.

00:29:05.490 --> 00:29:07.040
Your action method's going to be fired.

00:29:07.140 --> 00:29:09.600
Here we've just changed the number
of fragments from three to four.

00:29:09.600 --> 00:29:12.070
So we're going to do whatever it takes
to change the number of fragments

00:29:12.070 --> 00:29:14.260
from three to four on our view.

00:29:14.340 --> 00:29:17.200
And when this property changes,
Interface Builder's going to notice

00:29:17.330 --> 00:29:20.560
that for one of the key paths that we're
going to declare a little bit later,

00:29:20.560 --> 00:29:24.380
the value has changed because it's
observing it with key value observing.

00:29:24.490 --> 00:29:26.450
And because the value's changed,
it's going to call

00:29:26.520 --> 00:29:29.590
refresh on your inspector,
and you're going to take this opportunity

00:29:29.590 --> 00:29:31.510
to update all of your inspector state.

00:29:32.710 --> 00:29:36.960
So, actually let's skip this demo and
go a little bit further and talk

00:29:36.960 --> 00:29:39.190
about other things that we can,

00:29:41.460 --> 00:29:42.190
We'll come to this later.

00:29:42.200 --> 00:29:45.400
I'm going to talk more about
building your Interface Builder

00:29:45.400 --> 00:29:46.310
plugin before we do that demo.

00:29:49.470 --> 00:29:51.020
So I mentioned the class
description a couple times.

00:29:51.020 --> 00:29:55.820
This is maybe the most unique of the
Interface Builder integration aspects.

00:29:55.820 --> 00:29:59.510
A class description is how you
tell Interface Builder about

00:29:59.570 --> 00:30:03.290
the properties of your class,
like about the connections that

00:30:03.310 --> 00:30:04.870
it can make to other objects.

00:30:04.880 --> 00:30:08.240
So here's a sample property
description for NSL.

00:30:08.240 --> 00:30:11.310
And in this class description,
we're saying that NSL is

00:30:11.310 --> 00:30:12.600
a class that exists.

00:30:12.640 --> 00:30:15.850
Its base class is NSObject,
and it has one output formatter

00:30:15.970 --> 00:30:17.600
that's a type NSFormatter.

00:30:17.840 --> 00:30:19.860
So if your object that you
integrate into Interface

00:30:19.950 --> 00:30:22.670
Builder has outlets and actions,
you'll need to provide one of

00:30:22.670 --> 00:30:25.550
these class description files also
to tell Interface Builder what

00:30:25.770 --> 00:30:26.880
those actions and outlets are.

00:30:26.880 --> 00:30:29.310
And that's going to make it so when a
user right-clicks on one of your objects

00:30:29.400 --> 00:30:32.380
for control clicks and the HUD comes up,
those actions and outlets

00:30:32.400 --> 00:30:34.040
will be available to connect.

00:30:36.280 --> 00:30:38.420
So that's the class description,
pretty simple.

00:30:38.490 --> 00:30:42.140
And then next is going to be
the IB integration categories.

00:30:42.180 --> 00:30:45.280
Those are the category methods
that we mentioned earlier.

00:30:46.990 --> 00:30:49.460
IB object integration is perhaps
the most important category.

00:30:49.460 --> 00:30:52.220
It's filled with methods
that are interesting,

00:30:52.220 --> 00:30:54.660
but all these methods have
default implementations,

00:30:54.660 --> 00:30:58.120
and these default implementations
are almost entirely sufficient.

00:30:58.120 --> 00:31:01.140
You only need to override these methods
when you want to change behavior.

00:31:01.140 --> 00:31:03.880
So you shouldn't look at the
list of methods that we have

00:31:03.980 --> 00:31:07.580
and be worried that there are 13
methods that you need to override.

00:31:07.580 --> 00:31:11.880
You might override one or two of them,
and you might override none.

00:31:11.880 --> 00:31:13.980
When you do choose to
override these methods,

00:31:13.980 --> 00:31:15.840
make sure only to do it in your plugin.

00:31:16.300 --> 00:31:18.500
So for example,
if we were integrating the fragment view,

00:31:18.590 --> 00:31:21.560
we might put a category on fragment
view in our plugin and override some

00:31:21.640 --> 00:31:23.360
of the object integration methods.

00:31:25.720 --> 00:31:28.680
So let's take a look at what
some of these methods are.

00:31:28.780 --> 00:31:33.910
The Fragment View has a set of children,
which are its IB fragments.

00:31:34.040 --> 00:31:37.090
And it's going to tell Interface Builder
that these children exist so that the

00:31:37.090 --> 00:31:41.510
user can select them and inspect them and
just utilize them in Interface Builder.

00:31:41.600 --> 00:31:46.080
And to do that,
we're going to override a method,

00:31:46.080 --> 00:31:49.080
IBDefaultChildren, on our Fragment View.

00:31:49.080 --> 00:31:49.080
And we're just going to
return the array of fragments.

00:31:51.000 --> 00:31:54.360
The next method we're going to
look at is IB Populate Keypaths.

00:31:54.670 --> 00:31:57.870
Earlier in the presentation when I talked
about what things you should do in

00:31:57.940 --> 00:32:00.900
general to make it easy to integrate
your view into Interface Builder,

00:32:00.900 --> 00:32:04.300
I talked about being KVO compliant and
KVC compliant for a number of keypaths.

00:32:04.440 --> 00:32:05.930
But I didn't say which keypaths.

00:32:06.100 --> 00:32:08.640
This is where you tell Interface
Builder about all the interesting

00:32:08.800 --> 00:32:11.730
keypaths on your object,
and for those keypaths you will

00:32:11.740 --> 00:32:13.740
need to be KVO and KVC compliant.

00:32:13.870 --> 00:32:16.650
So for the Fill View example
that I brought up earlier,

00:32:16.650 --> 00:32:19.630
it has two properties:
border color and fill color.

00:32:20.330 --> 00:32:23.270
We're going to need to declare
those key paths in this method,

00:32:23.270 --> 00:32:25.790
and we're going to make sure to
be KVO and KVC compliant for them.

00:32:25.800 --> 00:32:28.680
The way we declare the methods
is when this method is invoked,

00:32:28.710 --> 00:32:30.610
we're going to pass in
a mutable dictionary.

00:32:30.620 --> 00:32:33.730
And inside of the mutable dictionary,
the mutable dictionary is

00:32:33.780 --> 00:32:36.290
going to be populated with...

00:32:37.270 --> 00:32:38.960
A number of mutable sets.

00:32:38.960 --> 00:32:42.960
And each set is filled with a set
of key paths that are interesting.

00:32:42.960 --> 00:32:46.380
Those sets are keyed in the dictionary
as the attributes key pass and the

00:32:46.390 --> 00:32:50.340
two one relationship key pass and the
too many relationship key pass and

00:32:50.340 --> 00:32:52.260
the localizable strings and so on.

00:32:52.260 --> 00:32:53.970
And as you have key paths
that are interesting,

00:32:53.970 --> 00:32:55.380
you'll add them to the proper set.

00:32:55.380 --> 00:32:58.250
So the Interface Builder is able
to make things like lift and

00:32:58.250 --> 00:32:59.920
stamp and undo work for free.

00:32:59.920 --> 00:33:01.950
And it's also going to make sure
that your inspector is updated

00:33:01.950 --> 00:33:04.560
all the time when things change,
either inside or outside

00:33:04.560 --> 00:33:05.990
of your inspector.

00:33:08.480 --> 00:33:11.060
So another method we're going
to look at is this method,

00:33:11.210 --> 00:33:14.160
IB Rect for Child and Window Controller.

00:33:14.160 --> 00:33:17.060
When you have a child of one of
your objects that you integrate

00:33:17.170 --> 00:33:19.710
into Interface Builder,
and you want the user to be able

00:33:19.710 --> 00:33:22.390
to click onto it and select it
or tab through your interface and

00:33:22.400 --> 00:33:24.910
hit your objects one at a time,
if your object's not a view,

00:33:24.910 --> 00:33:28.570
you need to tell Interface Builder
where this object lives on the screen.

00:33:28.580 --> 00:33:30.620
It's really easy for us to
figure out where views live,

00:33:30.620 --> 00:33:32.380
so if you're just integrating a view,
you don't have to worry

00:33:32.380 --> 00:33:32.990
about this method.

00:33:33.000 --> 00:33:37.980
But the IB Fragments that we introduce
as children of the IB Fragment View,

00:33:37.980 --> 00:33:41.100
they're just NSObjects,
so they don't have a frame or

00:33:41.180 --> 00:33:44.160
a bounds that Interface Builder
can use to locate the objects.

00:33:44.160 --> 00:33:47.750
So we would, on the Fragment View,
implement this method,

00:33:47.750 --> 00:33:52.550
IB Rect for Child and Window Controller,
to tell Interface Builder where

00:33:52.550 --> 00:33:55.070
the fragments live in the window.

00:33:55.080 --> 00:33:56.880
And we do this all in window coordinates.

00:33:56.900 --> 00:33:59.180
So when this method gets called,
we return a rectangle in

00:33:59.180 --> 00:34:02.020
window coordinates for the
fragment passed in as the child.

00:34:02.520 --> 00:34:07.230
And we do all this in window
space to make Interface

00:34:07.230 --> 00:34:10.430
Builder work great in high DPI,
and to make it so that you

00:34:10.490 --> 00:34:12.660
can use any kinds of bounds,
transform,

00:34:12.690 --> 00:34:15.590
or rotation inside of your view,
and we can keep everything working

00:34:15.590 --> 00:34:16.800
great in Interface Builder.

00:34:16.840 --> 00:34:19.780
If you do this,
this is going to let the user select

00:34:19.780 --> 00:34:22.920
your objects by clicking on them,
tab through them.

00:34:23.010 --> 00:34:25.020
It's going to let users drag
and drop into your views.

00:34:25.140 --> 00:34:28.140
It's going to provide the tab navigation.

00:34:28.140 --> 00:34:30.500
It's going to allow the user to
connect to and from your objects.

00:34:30.540 --> 00:34:31.940
So this method is really important.

00:34:32.040 --> 00:34:36.580
you integrate a non-view object.

00:34:37.290 --> 00:34:39.610
So in addition to the
object integration methods,

00:34:39.630 --> 00:34:42.280
there's a couple of view integration
methods that we're going to look at.

00:34:42.330 --> 00:34:46.810
If you've ever designed a
container and tried to integrate

00:34:46.810 --> 00:34:49.800
it into Interface Builder,
you've probably run into

00:34:49.800 --> 00:34:50.900
a number of roadblocks.

00:34:50.900 --> 00:34:54.070
We've made this really easy
to do in Interface Builder 3.

00:34:54.080 --> 00:34:56.250
There's just one method
that you need to override,

00:34:56.340 --> 00:34:57.680
IB Designable Content View.

00:34:57.680 --> 00:35:01.190
So if your view can accept children,
then you should override this method,

00:35:01.190 --> 00:35:03.930
IB Designable Content View,
and that's going to give you,

00:35:03.930 --> 00:35:07.080
and you'll tell Interface Builder
what your Designable Content View is,

00:35:07.080 --> 00:35:08.300
this can be yourself.

00:35:08.300 --> 00:35:11.080
For example, for our fill view,
we just return self from this method.

00:35:11.080 --> 00:35:14.370
This indicates Interface Builder
that the fill view can have

00:35:14.370 --> 00:35:16.080
any views added into itself.

00:35:16.100 --> 00:35:20.680
This lets the user drag the band select,
the children of the fill view.

00:35:20.680 --> 00:35:22.880
It lets the user drag and
drop into the fill view.

00:35:22.880 --> 00:35:25.020
It lets the user drag and
drop out of the fill view.

00:35:25.020 --> 00:35:28.520
It lets the user hold the mouse
to lift and move or pop and drag

00:35:28.520 --> 00:35:30.560
the children of the fill view.

00:35:30.560 --> 00:35:33.380
It lets the user drag the views around
with the mouse to position them,

00:35:33.380 --> 00:35:36.000
and it lets the user keyboard
position them with the arrow keys.

00:35:36.000 --> 00:35:37.140
One pixel at a time.

00:35:37.140 --> 00:35:38.860
So you're going to get a
lot of functionality by just

00:35:38.870 --> 00:35:39.960
overriding this one method.

00:35:39.960 --> 00:35:43.970
So last is IB Layout Inset.

00:35:46.700 --> 00:35:50.290
IB Layout Inset tells Interface Builder
some precise layout information about

00:35:50.290 --> 00:35:53.630
your view so that we can get great
AquaGuide support and you can have

00:35:53.630 --> 00:35:55.320
a good WYSIWYG editing experience.

00:35:55.400 --> 00:35:58.030
Lots of Cocoa Views draw with a shadow.

00:35:58.110 --> 00:36:01.940
And the way they do this is they
typically only draw the real

00:36:02.120 --> 00:36:06.590
content of their view in some
inset section of their bounds.

00:36:06.600 --> 00:36:09.970
So in this sample that we have here,
we have a bounds rectangle and some

00:36:09.970 --> 00:36:13.600
distance inside of that rectangle is
where we actually draw our fragment view.

00:36:13.600 --> 00:36:18.440
Then we choose to have a
shadow that's slightly offset

00:36:18.440 --> 00:36:21.060
to the bottom and to the left.

00:36:21.730 --> 00:36:26.140
We don't want to include in the
layout rectangle of the view.

00:36:26.310 --> 00:36:28.930
The layout rectangle is what Interface
Builder uses to snap the views next

00:36:28.990 --> 00:36:31.480
to each other and determine if two
views are next to each other visually,

00:36:31.480 --> 00:36:33.010
if they're right aligned or left aligned.

00:36:33.020 --> 00:36:36.450
You'll want to override this method
and tell Interface Builder just how

00:36:36.470 --> 00:36:40.540
far your shadow juts out from the
side of the drawing of your view.

00:36:40.540 --> 00:36:43.020
This is going to give you
great AquaGuide support.

00:36:46.990 --> 00:36:48.610
So with that,
let's go ahead and turn it over

00:36:48.750 --> 00:36:50.860
to Matt for the final demo,
and he'll show you how to build

00:36:51.220 --> 00:36:53.910
inspectors and get everything
else working inside of your

00:36:53.910 --> 00:36:55.410
Interface Builder plugin.

00:36:57.810 --> 00:37:00.080
Okay, so last we left off,
we have our plugin class.

00:37:00.080 --> 00:37:01.860
We have our library nib class.

00:37:01.860 --> 00:37:04.560
I wanted to take a moment and admit
that I got away with something,

00:37:04.560 --> 00:37:06.420
and it's not fair,
and I should admit it to you guys.

00:37:06.420 --> 00:37:11.340
I didn't actually set the
principal class for this.

00:37:11.340 --> 00:37:14.040
I got away with it because it
was the only class in my plugin,

00:37:14.040 --> 00:37:18.300
but this really should be set
to the actual class that I used.

00:37:18.370 --> 00:37:20.060
So I called it My Plugin over here.

00:37:20.060 --> 00:37:22.580
This should really be
My Plugin over here.

00:37:22.580 --> 00:37:24.740
Otherwise,
once we start loading other classes,

00:37:24.740 --> 00:37:25.940
the plugin won't create.

00:37:26.010 --> 00:37:28.340
So make sure to fill that out,
and don't make my mistake.

00:37:30.300 --> 00:37:33.820
So as Jon said,
now we have the items in the library.

00:37:33.860 --> 00:37:36.350
We want to create the view
integration and the inspector classes.

00:37:36.360 --> 00:37:39.860
So we have two views to integrate,
the fragment view and the fragment.

00:37:39.860 --> 00:37:42.520
Rather than create all
the files in front of you,

00:37:42.520 --> 00:37:43.830
I have stubbed out the files here.

00:37:43.840 --> 00:37:45.260
And let's do them one at a time.

00:37:45.260 --> 00:37:48.300
So I'm first going to take the
fragment classes and just drag

00:37:48.300 --> 00:37:52.040
those into my project and let
them be added to the project.

00:37:52.040 --> 00:37:55.340
And it's going to add the inspector
class and the view integration class.

00:37:55.340 --> 00:37:58.670
If we open up the inspector class,
you see that it's actually just

00:37:58.670 --> 00:38:00.120
a subclass of IB Inspector.

00:38:00.200 --> 00:38:01.460
Nothing interesting there.

00:38:01.460 --> 00:38:05.860
And really the only interesting part
here is defining the name of the nib that

00:38:06.110 --> 00:38:07.620
represents the view in the inspector.

00:38:07.620 --> 00:38:09.700
In this case,
it's the fragment inspector.

00:38:11.460 --> 00:38:14.740
If we look at the integration class,
this is where things become

00:38:14.770 --> 00:38:15.580
a little more interesting.

00:38:15.580 --> 00:38:17.250
As Jon said,
there are a number of methods

00:38:17.250 --> 00:38:19.240
we can implement to provide
different pieces of behavior,

00:38:19.240 --> 00:38:21.440
and there are two that I want
to actually implement here.

00:38:21.440 --> 00:38:26.060
The first is providing
the inspector for my view.

00:38:26.080 --> 00:38:29.940
You can see in the first method up here,
ibpopulateAttributeInspectorClasses,

00:38:29.940 --> 00:38:34.190
that it's got a mutable array of classes,
and it's going to call super.

00:38:34.200 --> 00:38:37.640
So that's going to get the inspectors
for everything that are above or below,

00:38:37.740 --> 00:38:39.530
depending on which way
you think about it,

00:38:39.540 --> 00:38:40.980
me and my class hierarchy.

00:38:41.400 --> 00:38:44.700
What I want to do, though,
is take that array and go ahead

00:38:44.780 --> 00:38:47.020
and put my inspector class in it.

00:38:47.050 --> 00:38:50.150
So I know I'm going to call
it ibFragmentInspector,

00:38:50.150 --> 00:38:53.140
so I just add that to the
list of the inspectors,

00:38:53.140 --> 00:38:55.040
and now my inspector is
going to be inserted into

00:38:55.040 --> 00:38:56.400
the view when it's selected.

00:38:58.520 --> 00:39:00.390
The next is the populate keypads.

00:39:00.470 --> 00:39:03.540
This is the method that Jon mentioned
about things for undo and redo

00:39:03.540 --> 00:39:05.340
and for all the other behaviors.

00:39:05.360 --> 00:39:08.560
Again, you'll see here that we have a
dictionary of keypads at this time,

00:39:08.560 --> 00:39:11.060
and we call super,
so every other view in the hierarchy

00:39:11.060 --> 00:39:12.640
gets its chance to set those up.

00:39:12.910 --> 00:39:14.340
I need to set up a couple things here.

00:39:14.340 --> 00:39:15.440
I've listed out all of them.

00:39:15.440 --> 00:39:17.760
You can see that there's
attribute keypads,

00:39:17.840 --> 00:39:20.370
two one,
and too many relationship keypads.

00:39:20.600 --> 00:39:24.010
I don't need to set up all of these,
but I just need to set up the first two.

00:39:24.170 --> 00:39:29.080
In this case, we are on the fragment,
and the fragment has a title attribute,

00:39:29.100 --> 00:39:31.480
the title of each fragment in the view.

00:39:31.480 --> 00:39:35.740
I'm just going to go ahead and
get the set of the attributes

00:39:36.120 --> 00:39:37.860
and add my item to it.

00:39:37.860 --> 00:39:40.540
I'm just going to go
over here and add title.

00:39:41.950 --> 00:39:44.920
And now that's defined
as one of my attributes.

00:39:44.980 --> 00:39:47.620
I also need to do that
for one relationship.

00:39:47.720 --> 00:39:50.390
Each fragment has a
relationship to its parent,

00:39:50.530 --> 00:39:51.640
the Fragment View.

00:39:51.760 --> 00:39:53.740
And that's just called Fragment View.

00:39:53.850 --> 00:39:57.140
So in the Relationship section here,
the 2.1 Relationship section,

00:39:57.210 --> 00:40:00.070
I'm going to go ahead and
type in Fragment View.

00:40:01.730 --> 00:40:02.760
That's it.

00:40:02.820 --> 00:40:04.840
That's the integration
for that particular class,

00:40:04.840 --> 00:40:07.000
just defining the inspector
that we're going to use and

00:40:07.090 --> 00:40:09.020
setting up the properties.

00:40:09.020 --> 00:40:11.780
But let's now go ahead and
create an inspector for this,

00:40:11.870 --> 00:40:14.510
because I want to be able to go ahead
and type in the title for each fragment

00:40:14.520 --> 00:40:16.050
in Interface Builder and change it.

00:40:16.140 --> 00:40:20.080
So again, I'm going to go back down
here and add a new nib file.

00:40:20.080 --> 00:40:22.800
In this case, though,
instead of bringing up the empty nib,

00:40:22.870 --> 00:40:25.380
I'm going to use the
Interface Builder SDK section.

00:40:25.380 --> 00:40:27.740
And you'll see there's an
Interface Builder Inspector nib.

00:40:28.440 --> 00:40:30.760
And we're going to give it the
name that was in the inspector,

00:40:30.900 --> 00:40:32.690
the class, the IB Fragment Inspector.

00:40:32.700 --> 00:40:34.950
And it's added to my project.

00:40:34.980 --> 00:40:37.620
And once I open it up,
you can see that we actually

00:40:37.620 --> 00:40:39.470
provide a default view for you.

00:40:39.480 --> 00:40:42.730
It's got the right sizing,
the right width, and it just put in some

00:40:42.770 --> 00:40:43.970
sample data for you.

00:40:43.980 --> 00:40:46.720
In this case,
all I'm really interested in is

00:40:46.720 --> 00:40:48.700
one field just for the title.

00:40:48.700 --> 00:40:50.420
So I'm going to go ahead
and change this to title.

00:40:50.420 --> 00:40:52.780
And I can resize it accordingly.

00:40:54.180 --> 00:40:57.160
And now the question becomes,
where do I get this value from?

00:40:57.250 --> 00:41:02.900
How am I going to get the value from the
inspector into my object and vice versa?

00:41:02.900 --> 00:41:06.700
As Jon mentioned, if you use bindings,
this is a piece of cake.

00:41:06.730 --> 00:41:08.860
There is, in the inspector class,
something called the

00:41:08.860 --> 00:41:10.740
inspected objects controller.

00:41:10.830 --> 00:41:13.630
And that is a controller that
holds onto the inspected objects.

00:41:13.690 --> 00:41:15.700
So anytime you select
something in Interface Builder,

00:41:15.790 --> 00:41:18.660
those objects are going
to be in that controller.

00:41:18.730 --> 00:41:25.010
So for the model key path here,
I type in inspected objects controller.

00:41:25.870 --> 00:41:27.510
Now,
when the inspected objects controller,

00:41:27.510 --> 00:41:29.340
I need to actually get
a collection of objects.

00:41:29.340 --> 00:41:31.360
And in that case, it's the selection.

00:41:31.380 --> 00:41:34.370
And for the selection,
I want to set the title.

00:41:34.370 --> 00:41:36.580
So it's title.

00:41:36.580 --> 00:41:38.050
And I've bound that up.

00:41:38.050 --> 00:41:40.560
Of course, I also bound it to the shared
user defaults controller,

00:41:40.620 --> 00:41:41.610
which was not correct.

00:41:41.620 --> 00:41:46.180
What I really wanted was the files owner,
which is actually the inspector.

00:41:46.180 --> 00:41:49.960
So that's the inspected objects
controller selection title.

00:41:49.960 --> 00:41:50.900
And that's it.

00:41:50.980 --> 00:41:53.820
Now this view is going to
be bound to the selection,

00:41:53.900 --> 00:41:55.780
which I know is going to
be my particular view.

00:41:57.500 --> 00:42:01.570
So that's all I need to
set up for the fragment.

00:42:01.570 --> 00:42:01.570
If I go back and

00:42:01.750 --> 00:42:04.630
Let's go back and grab the other
classes here and show you what

00:42:04.640 --> 00:42:06.870
these look like for the view itself.

00:42:06.880 --> 00:42:09.370
I'll just go ahead and
add these to my project.

00:42:10.490 --> 00:42:12.440
For the inspector,
we have the same kind of thing.

00:42:12.440 --> 00:42:15.350
It's just going to be
populating the key paths.

00:42:15.370 --> 00:42:19.110
In this case, for the fragment view,
we have a too many

00:42:19.110 --> 00:42:20.540
relationship of fragments.

00:42:20.770 --> 00:42:24.280
So that's why you see here that this
is the too many relationship key paths.

00:42:24.280 --> 00:42:26.660
You see here that we're getting
the fragment view inspector

00:42:26.660 --> 00:42:29.640
and just adding that into the
hierarchy like everything else.

00:42:29.700 --> 00:42:33.060
You'll also note down here we're also
defining the method IB_RECT_FOR_CHILD.

00:42:33.140 --> 00:42:35.730
So this was the method Jon mentioned
before about being able to

00:42:35.830 --> 00:42:37.320
define where our children live.

00:42:37.320 --> 00:42:39.510
So we can go ahead and click on them.

00:42:39.920 --> 00:42:42.320
So now once this is
all into the view here,

00:42:42.320 --> 00:42:44.760
the nib just has some simple UI for it.

00:42:44.800 --> 00:42:46.800
I can go ahead and
build my project again.

00:42:46.800 --> 00:42:50.580
I already had Interface Builder up
and the plugin was already loaded,

00:42:50.580 --> 00:42:53.340
so I need to quit that first so
that I can reload the plugin.

00:42:53.340 --> 00:42:55.240
And now you'll note
that when I come back,

00:42:55.240 --> 00:42:56.540
I can create a new window.

00:42:56.540 --> 00:43:00.200
And we'll come back here and
click on the demo section.

00:43:00.200 --> 00:43:02.100
And I can drag this in.

00:43:02.100 --> 00:43:05.500
But now you'll note when I bring
up the inspector that now there's

00:43:05.500 --> 00:43:07.420
the slice for the fragment view.

00:43:08.080 --> 00:43:10.080
And if I come over here
and change this value,

00:43:10.080 --> 00:43:13.070
three, I should make it a little
wider so you can see that.

00:43:13.100 --> 00:43:17.300
There's three, there's five, there's two.

00:43:17.300 --> 00:43:18.580
I can change the number of fragments.

00:43:18.580 --> 00:43:20.630
You'll also note that
if I hit undo and redo,

00:43:20.630 --> 00:43:23.860
it just walks right through those,
so you get all that for free.

00:43:23.860 --> 00:43:28.280
And I can go ahead and select an
individual fragment and change its title.

00:43:28.280 --> 00:43:31.960
So maybe this is two,
and maybe this is three.

00:43:31.960 --> 00:43:35.450
So it was just that easy,
just creating the inspector

00:43:35.450 --> 00:43:36.900
and setting it up.

00:43:41.560 --> 00:43:45.370
I want to take one moment to show you
something that's actually kind of fun.

00:43:45.370 --> 00:43:48.220
Once you actually have your
view inside of the library,

00:43:48.350 --> 00:43:51.190
you can actually go back and
customize your library nib.

00:43:51.210 --> 00:43:53.370
So let's go ahead and
do that for a second.

00:43:53.370 --> 00:43:55.790
I'm going to go back and
open up my library nib.

00:43:55.790 --> 00:43:58.260
And this was the one
I started with originally.

00:43:58.290 --> 00:44:00.220
So here's my custom view that I put in.

00:44:00.320 --> 00:44:03.260
I can actually take that out now
and I could drag the real view

00:44:03.300 --> 00:44:05.040
in here and drop that into place.

00:44:05.040 --> 00:44:07.830
I can go ahead and if I wanted
to change the title for it,

00:44:07.830 --> 00:44:11.480
maybe I could just put it as one so
you don't have to see the real view.

00:44:11.500 --> 00:44:12.980
that

00:44:14.000 --> 00:44:15.000
The shortened text.

00:44:15.010 --> 00:44:17.540
But I can also do something
a little bit better,

00:44:17.540 --> 00:44:19.400
which is when I dropped it in,
I only had one fragment,

00:44:19.400 --> 00:44:21.350
and that's probably not
really useful to me.

00:44:21.360 --> 00:44:24.440
So I'm going to go ahead and drag
in another fragment view here

00:44:24.490 --> 00:44:26.040
and make it a little bit wider.

00:44:26.040 --> 00:44:29.150
Set it up with,
I think maybe every time I use it,

00:44:29.150 --> 00:44:33.000
I use four fragments,
and for some reason I always want

00:44:33.000 --> 00:44:35.160
the last fragment to be called end.

00:44:35.160 --> 00:44:39.080
So just like I did before with the first,
or the fragment, when I connected up

00:44:39.080 --> 00:44:42.470
the represented object,
we can do that with this view as well.

00:44:43.200 --> 00:44:46.400
So I can go ahead and,
just to show you that we can do

00:44:46.400 --> 00:44:50.820
connections here to other views,
let's go ahead and drag connection

00:44:50.850 --> 00:44:52.700
down to the fragment view.

00:44:52.700 --> 00:44:56.900
That's interesting.

00:44:56.900 --> 00:44:58.090
All right.

00:45:08.670 --> 00:45:13.960
and I connected up to my fragment view.

00:45:13.960 --> 00:45:15.600
That connected to the fragment.

00:45:15.600 --> 00:45:17.430
That wasn't right.

00:45:18.790 --> 00:45:19.570
Oh, you know why?

00:45:19.660 --> 00:45:23.010
Because I'm connecting
it to the wrong window.

00:45:23.060 --> 00:45:24.770
Don't make that mistake.

00:45:26.850 --> 00:45:28.630
So let's go ahead and try this again.

00:45:28.710 --> 00:45:32.510
What I really want to do is
connect this to the Fragment View.

00:45:32.540 --> 00:45:33.590
That's better.

00:45:33.660 --> 00:45:35.550
Go ahead and save that now.

00:45:35.630 --> 00:45:39.630
If I go ahead and rebuild my nib,
and we're going to go ahead and

00:45:39.630 --> 00:45:43.420
quit IB and start it up again
so it gets my updated plugin,

00:45:43.550 --> 00:45:48.170
now you'll note that when I go back
in and drag out the Fragment View,

00:45:48.540 --> 00:45:52.770
Now you'll get the nice spiffy
animation going to the full view,

00:45:52.870 --> 00:45:54.840
and it also has the customized view.

00:45:59.960 --> 00:46:01.420
So once you put your
views into the library,

00:46:01.490 --> 00:46:03.720
you can actually go
back and customize them.

00:46:03.810 --> 00:46:05.900
This also demonstrates the
ability to go ahead and customize

00:46:06.080 --> 00:46:07.300
any view that's in the library.

00:46:07.370 --> 00:46:09.160
So for example,
if you have a table view and

00:46:09.160 --> 00:46:11.780
you always have four columns,
or you always want it set up a certain

00:46:11.780 --> 00:46:14.780
way with sizes or springs and struts,
you can actually just create a

00:46:14.780 --> 00:46:18.030
plugin that takes existing views,
customize them to the way you want

00:46:18.030 --> 00:46:20.740
to use them or use them most often,
put them in the library,

00:46:20.850 --> 00:46:22.070
and have them available for use.

00:46:22.250 --> 00:46:23.630
So it's not just with custom views.

00:46:23.650 --> 00:46:26.100
It's customizing any view
that you want to use.

00:46:26.170 --> 00:46:29.080
So with that, I'll give it back to Jon.

00:46:34.190 --> 00:46:34.580
Thank you, Matt.

00:46:34.610 --> 00:46:38.320
All right, so we're actually done.

00:46:38.320 --> 00:46:40.850
We're at the end of our presentation,
and we've integrated the Fragment

00:46:40.850 --> 00:46:42.080
View into Interface Builder.

00:46:42.080 --> 00:46:44.700
So a summary of what we did today.

00:46:44.700 --> 00:46:46.920
We separated a class out,
a Fragment View,

00:46:46.920 --> 00:46:49.780
into a framework so it would be ready
to be loaded by Interface Builder.

00:46:49.780 --> 00:46:53.480
We built a plugin from our
Xcode plugin bundle template.

00:46:53.480 --> 00:46:57.340
We subclassed Inspector,
and we added it to the set of inspectors

00:46:57.340 --> 00:47:01.240
for our object by overriding one of
the Interface Builder category methods.

00:47:01.770 --> 00:47:04.090
We used bindings to implement
the properties of each

00:47:04.090 --> 00:47:05.500
of our inspector widgets.

00:47:05.500 --> 00:47:09.360
And we overrode some integration
category methods in our object to

00:47:09.360 --> 00:47:11.660
make things like undo work for free.

00:47:11.660 --> 00:47:15.390
And with that,
I'm going to point you to Matt Formica

00:47:15.490 --> 00:47:18.160
is available for more questions.

00:47:18.160 --> 00:47:22.150
And you can see documentation and
sample code from our presentation

00:47:22.150 --> 00:47:24.340
on the WWDC 2006 website.