WEBVTT

00:00:10.210 --> 00:00:11.100
Hello.

00:00:11.110 --> 00:00:15.620
Welcome to the Developing
with Core Image session.

00:00:15.620 --> 00:00:17.580
Yeah, that's me.

00:00:18.030 --> 00:00:21.840
So here's the agenda
for this presentation.

00:00:22.110 --> 00:00:25.030
I'm going to talk a bit about
what happened with Core Image in

00:00:25.030 --> 00:00:28.440
essentially the last year
since I was up here last time.

00:00:28.700 --> 00:00:32.030
And for those people who actually
missed last year's presentation,

00:00:32.050 --> 00:00:36.020
I'll give a brief overview
what Core Image is all about.

00:00:36.020 --> 00:00:38.110
And then we're going to
switch immediately to what's

00:00:38.110 --> 00:00:39.340
actually new in Leopard.

00:00:39.340 --> 00:00:42.010
We're talking about
new APIs and features,

00:00:42.180 --> 00:00:46.290
the improvements we did to enable
debugging and performance tuning

00:00:46.360 --> 00:00:51.180
of Core Image filter chains,
how to build user interfaces for filters,

00:00:51.180 --> 00:00:53.450
and how to make your own Image Unit.

00:00:54.950 --> 00:00:57.080
So, yeah, what happened so far?

00:00:57.170 --> 00:01:00.920
So Core Image was introduced
two years ago at WWDC and then

00:01:00.920 --> 00:01:02.940
shipped last year in April.

00:01:03.030 --> 00:01:08.890
And by now,
the entire hardware product line

00:01:08.970 --> 00:01:16.490
that Apple sells is able to support
Core Image in GPU accelerated mode.

00:01:16.490 --> 00:01:16.490
And many clients have
started to use the API.

00:01:16.720 --> 00:01:20.440
So here's a list of clients
that are internal to Apple.

00:01:20.540 --> 00:01:23.150
So there's really big
applications like Aperture.

00:01:23.160 --> 00:01:26.500
There's things like Dashboard,
where Core Image is

00:01:26.540 --> 00:01:29.880
doing the ripple effect,
and these kind of things.

00:01:29.980 --> 00:01:33.940
New in Leopard-- excuse me.

00:01:34.340 --> 00:01:38.530
Resolution Independence uses Core Image,
Time Machine uses Core Image,

00:01:38.530 --> 00:01:42.560
and there's plenty of new
things in iChat and so on.

00:01:42.560 --> 00:01:45.900
But kind of the real stars of
the adoption of Core Image is

00:01:46.070 --> 00:01:48.020
our third party applications.

00:01:48.020 --> 00:01:54.320
So here's a selection I couldn't really
test all applications I could find.

00:01:54.320 --> 00:01:58.430
And these span the gamut from, well,
doing something on video or on images,

00:01:58.430 --> 00:02:02.210
kind of the bread and butter thing
that you would do with Core Image,

00:02:02.210 --> 00:02:06.600
to games that use flame effects that
happen to be Core Image filters.

00:02:06.600 --> 00:02:09.710
And yeah, everybody likes OmniDazzle.

00:02:10.440 --> 00:02:14.660
So here's an example of a
custom third-party image unit.

00:02:14.920 --> 00:02:17.460
The chocoflop image unit
contains about five filters,

00:02:17.480 --> 00:02:20.520
and one of them is this
leaf distortion effect.

00:02:20.610 --> 00:02:23.950
So an interesting anecdote here,
how did I get that image

00:02:23.960 --> 00:02:26.140
unit to work in Keynote?

00:02:26.250 --> 00:02:28.560
So what I did,
I built a Quartz Composer composition

00:02:28.560 --> 00:02:30.560
which uses the third-party image unit.

00:02:30.730 --> 00:02:33.200
And that does all the timing.

00:02:33.260 --> 00:02:35.230
And then exported that
as a QuickTime movie.

00:02:35.240 --> 00:02:38.660
And the QuickTime movie exported from
Quartz Composer is just the wrapper.

00:02:38.660 --> 00:02:40.630
So it's still the Quartz
Composer composition that

00:02:40.630 --> 00:02:41.910
gets rendered in real time.

00:02:42.020 --> 00:02:44.970
It's just packaged in such a
way that anything that can play

00:02:45.120 --> 00:02:46.710
QuickTime can play that back.

00:02:46.860 --> 00:02:48.860
And that's how this got into Keynote.

00:02:48.900 --> 00:02:51.180
So Keynote is actually playing
a third-party image unit,

00:02:51.180 --> 00:02:55.220
even though their programmers
probably never thought about that.

00:02:55.800 --> 00:02:58.380
And it's a great way
for you if you have a,

00:02:58.380 --> 00:03:00.450
you know,
would like to have custom motion

00:03:00.450 --> 00:03:02.950
backgrounds in Keynote or so,
you know, you can write an

00:03:02.950 --> 00:03:04.150
Image Unit and put it in there.

00:03:05.850 --> 00:03:08.480
And it's a great way
for you if you have a,

00:03:08.480 --> 00:03:10.550
you know,
would like to have custom motion

00:03:10.550 --> 00:03:13.040
backgrounds in Keynote or so,
you know, you can write an

00:03:13.040 --> 00:03:14.300
Image Unit and put it in there.

00:03:35.800 --> 00:03:38.090
or specular highlights which
are done with the filter.

00:03:38.100 --> 00:03:40.770
And there's another filter which
does the shadow underneath the card,

00:03:40.830 --> 00:03:42.920
turns that hard shadow
into a soft shadow.

00:03:43.100 --> 00:03:45.680
And to me,
this is a really compelling example

00:03:45.880 --> 00:03:49.860
of what you can do if you combine
vector art with filter effects

00:03:50.020 --> 00:03:51.490
because this is still scalable.

00:03:51.500 --> 00:03:56.670
You can print that at 600 DPI and get
a really beautiful rendition of this.

00:03:59.030 --> 00:04:03.140
So, kind of a summary for people who
have missed last year's presentation.

00:04:03.230 --> 00:04:05.460
Core Image is an image
processing library.

00:04:05.460 --> 00:04:08.340
It enables GPU-accelerated
image processing,

00:04:08.340 --> 00:04:12.260
and it has a full floating point,
full color-managed pipeline.

00:04:12.260 --> 00:04:15.760
And we'll go over a slide a bit
later about what that means.

00:04:15.760 --> 00:04:21.030
There's a base set of over 100 filters,
and then there's a plug-in architecture,

00:04:21.030 --> 00:04:24.180
which we call Image Units,
to extend that base set.

00:04:24.180 --> 00:04:26.410
So this is where third-party developers
come in and can build their own.

00:04:27.370 --> 00:04:33.320
Filter kernels are expressed in a
subset of the OpenGL shading language.

00:04:33.320 --> 00:04:40.700
And such that pieces that don't
really make sense in terms of image,

00:04:40.790 --> 00:04:46.880
like in image processing, like fog,
these kind of things that OpenGL does.

00:04:46.880 --> 00:04:46.880
So these pieces we left out.

00:04:46.880 --> 00:04:46.880
Other than that, it's pretty complete.

00:04:47.380 --> 00:04:50.840
And the nice thing about that is
this is an architecture-independent

00:04:50.840 --> 00:04:52.980
way of describing image processing.

00:04:53.120 --> 00:04:57.380
So for those people who wrote
Image Units and then moved to Intel,

00:04:57.380 --> 00:05:01.510
they essentially didn't have to
do any work because it was just

00:05:01.550 --> 00:05:06.740
essentially a C-string with instruction
about the filter is supposed to do,

00:05:06.740 --> 00:05:10.580
and in the runtime just
compiles it on the new platform.

00:05:10.580 --> 00:05:14.870
And hopefully, the next time something
wild like that happens,

00:05:14.880 --> 00:05:14.880
we can pull off the same trick.

00:05:17.060 --> 00:05:22.160
There is also a just-in-time compiler
under the hood that can take these

00:05:22.300 --> 00:05:28.300
kernels and compile them to the CPU if
the GPU is not available or for some

00:05:28.300 --> 00:05:34.400
reason the GPU is busy and you kind
of want to offload stuff onto the CPU.

00:05:34.400 --> 00:05:40.290
And that just-in-time compiler can
compile to the Velocity Engine on the

00:05:40.290 --> 00:05:40.290
PowerPC chip and to SSC3 on Intel chips,
and it works in 64-bit.

00:05:42.310 --> 00:05:47.250
So kind of the philosophy behind
the API is that Core Image follows

00:05:47.250 --> 00:05:54.930
the lazy evaluation model to its,
well, as far as it is reasonable.

00:05:55.670 --> 00:05:58.060
What that means is,
so you have your object,

00:05:58.160 --> 00:06:00.290
which is a CI image,
and you pass that to a filter.

00:06:00.300 --> 00:06:04.550
Let's say you do something like undo
a barrel distortion from your camera.

00:06:04.670 --> 00:06:08.080
So you get a new image out,
which has that distortion removed.

00:06:08.080 --> 00:06:11.030
Then you apply another filter, which is,
say, a color correction filter,

00:06:11.040 --> 00:06:13.640
because the sunset isn't warm
enough or whatever you like.

00:06:13.760 --> 00:06:15.380
And you get a third image out.

00:06:15.440 --> 00:06:18.720
And then you pass that-- I don't know,
a sharpened filter to make things

00:06:18.720 --> 00:06:20.520
crisp and you get your fourth image.

00:06:20.570 --> 00:06:23.330
All of these operations actually
didn't work on the bits.

00:06:23.440 --> 00:06:27.140
What really happened in the background
is the original data was referenced,

00:06:27.140 --> 00:06:31.490
and there's a little sticky note that the
system attaches to it that says to do,

00:06:31.490 --> 00:06:37.860
barrel distortion undo, what was it,
color correct, and sharpen.

00:06:37.880 --> 00:06:43.020
The time when the image is actually
evaluated is when you go and draw it.

00:06:43.110 --> 00:06:46.630
So that has a bunch of
interesting benefits.

00:06:49.170 --> 00:06:53.420
So the first benefit is you get
higher performance in general

00:06:54.110 --> 00:06:58.520
because the runtime can concatenate
all these filter operations into

00:06:58.520 --> 00:07:01.100
a single path over the image.

00:07:01.280 --> 00:07:03.650
And generally, you're not going back
and forth to memory,

00:07:03.650 --> 00:07:04.950
which helps performance.

00:07:04.980 --> 00:07:09.550
This particularly helps
performance in the CPU case.

00:07:09.570 --> 00:07:14.140
GPUs have usually a lot of
more memory bandwidth and have

00:07:14.140 --> 00:07:14.250
not-- the problem still exists,
but it's not as severe.

00:07:14.940 --> 00:07:19.050
Similarly, when you actually draw your
sub-rectangle of that image in the end,

00:07:19.090 --> 00:07:22.390
say it's actually in a scroll view
and only a part of it is visible,

00:07:22.600 --> 00:07:24.790
then only that part
needs to be evaluated.

00:07:24.790 --> 00:07:26.970
So there's a huge performance gain there.

00:07:26.980 --> 00:07:31.890
There's also a precision gain
because everything that happens

00:07:31.890 --> 00:07:36.420
in a filter kernel is expressed
as full floating point operations.

00:07:37.750 --> 00:07:40.510
So if you don't go back to a
buffer which then say clamps

00:07:40.510 --> 00:07:45.190
stuff down to 16 bit ins or so,
then you get a performance

00:07:45.190 --> 00:07:46.920
precision gain.

00:07:49.370 --> 00:07:51.940
So I was mentioning full
color managed pipeline before,

00:07:51.940 --> 00:07:55.540
and I'm trying to
explain what that means.

00:07:55.650 --> 00:07:57.790
So essentially,
images come in and they have

00:07:58.100 --> 00:07:59.180
color spaces attached to it.

00:07:59.300 --> 00:08:02.660
So one is Adobe RGB, one is sRGB,
and so on.

00:08:02.660 --> 00:08:05.270
And before they enter the system
and any processing happens,

00:08:05.350 --> 00:08:09.000
they get-- the data gets converted,
which is really just another filter

00:08:09.050 --> 00:08:10.750
that gets inserted by the runtime.

00:08:10.860 --> 00:08:13.680
The data gets converted
to a working color space.

00:08:13.780 --> 00:08:17.030
And all the processing happens
in that working color space.

00:08:17.120 --> 00:08:20.630
And at the end,
before you draw another color conversion,

00:08:20.660 --> 00:08:24.520
which in practice is just another
filter that gets attached at the end,

00:08:24.630 --> 00:08:28.240
that color gets matched
into the target device,

00:08:28.270 --> 00:08:31.320
say, related to your display color space.

00:08:31.420 --> 00:08:34.790
So the first color matching
going from images into the

00:08:34.790 --> 00:08:38.290
working space is necessary,
because you want to be able to

00:08:38.290 --> 00:08:41.330
composite several images from
several color spaces together.

00:08:41.340 --> 00:08:43.350
So you kind of have to unify that.

00:08:43.470 --> 00:08:46.590
And the last color matching is necessary,
because you want all your filter

00:08:46.590 --> 00:08:48.900
operations to be device independent.

00:08:48.900 --> 00:08:54.420
A blur shouldn't look different on a
device on display A versus a printer.

00:08:54.790 --> 00:09:00.530
So that's why all operations happen
in that canonical working space.

00:09:01.330 --> 00:09:04.610
The default working
space is generic RGB HDR,

00:09:04.610 --> 00:09:08.200
and in most cases,
you will not need to change that.

00:09:08.200 --> 00:09:10.990
And generic RGB HDR has a
bunch of properties which are

00:09:11.120 --> 00:09:13.100
important for image processing.

00:09:13.130 --> 00:09:17.180
So the first one is light linear,
and that essentially means the

00:09:17.410 --> 00:09:21.950
values that you have in your color
components have a linear relationship

00:09:21.950 --> 00:09:24.760
to the amount of photons that come
out of your display at the end.

00:09:26.040 --> 00:09:27.970
Or you can look at it
the other way around.

00:09:28.010 --> 00:09:30.030
The amount of photons that
hit the sensor in your camera,

00:09:30.030 --> 00:09:32.440
the number that you get out
is proportional to that.

00:09:32.440 --> 00:09:36.440
And that allows you to do things
like do exposure adjusts in software

00:09:36.440 --> 00:09:39.280
and actually get the same result as
the exposure adjusts on your camera.

00:09:39.280 --> 00:09:41.390
These kind of things.

00:09:41.800 --> 00:09:43.720
The second point is that infinite gamut.

00:09:43.770 --> 00:09:48.170
So for the filter writer,
infinite gamut just means values for

00:09:48.170 --> 00:09:50.880
RGB can be outside the 0-1 range.

00:09:50.880 --> 00:09:53.320
So you can have values
that are bigger than 1,

00:09:53.320 --> 00:09:56.920
so you have super bright pixels
like specular highlights in images,

00:09:56.920 --> 00:09:59.700
you know, if there's sunset in there,
these kind of things.

00:09:59.700 --> 00:10:04.230
Values can also be negative,
and that's typically for neon colors,

00:10:04.390 --> 00:10:08.680
colors that are out of the gamut
of usually the color triangle,

00:10:08.680 --> 00:10:10.590
if you have seen those diagrams.

00:10:13.420 --> 00:10:17.580
Okay, so after that brief overview,
I would like to invite Frank Doepke up

00:10:17.670 --> 00:10:22.380
to tell us all that's new in Leopard.

00:10:22.380 --> 00:10:22.380
Frank Doepke: Thank you, Ralph.

00:10:26.420 --> 00:10:29.170
Also, welcome from my side to WWDC.

00:10:29.340 --> 00:10:32.200
And my name is Frank Doepke,
and I'll be talking about

00:10:32.260 --> 00:10:35.890
all the new features that we
have for you in Core Image.

00:10:36.750 --> 00:10:40.070
So let's start a little bit
looking at our new APIs.

00:10:40.180 --> 00:10:43.500
So we've done refinements all over
the place based on your feedback,

00:10:43.500 --> 00:10:46.090
so we started actually, for instance,
having more convenience

00:10:46.090 --> 00:10:47.460
functions for the common task.

00:10:47.670 --> 00:10:50.080
You will find those in our headers.

00:10:50.110 --> 00:10:54.350
Then we have lots of now common
keys basically in the filters where

00:10:54.350 --> 00:10:55.820
we introduced constants for it.

00:10:55.870 --> 00:10:57.870
So this allows you
actually that in Xcode,

00:10:57.940 --> 00:11:01.710
you can use now a constant for
like input image or output image,

00:11:01.770 --> 00:11:03.430
so you can use code completion.

00:11:03.520 --> 00:11:06.290
So less typos also in that code.

00:11:06.940 --> 00:11:09.650
And then we have, for instance,
now documentation for the filters.

00:11:09.710 --> 00:11:13.440
This means actually that the filter
can give you a small description and

00:11:13.500 --> 00:11:17.300
even like an HTML page that shows
you all the features of that filter.

00:11:17.360 --> 00:11:20.800
And for those right image units,
you can provide those also.

00:11:20.800 --> 00:11:29.040
So even your documentation can be
seen and presented to the user.

00:11:29.040 --> 00:11:29.510
I'll talk a little bit more
about this in some samples later.

00:11:30.000 --> 00:11:31.180
And then clip in your bindings.

00:11:31.240 --> 00:11:33.320
I'm not inviting you to
go skiing this moment,

00:11:33.410 --> 00:11:36.380
but we have something new that
is that you can actually now

00:11:36.380 --> 00:11:38.120
observe your output image.

00:11:38.220 --> 00:11:42.330
So this is important, actually,
because this allows you to automatically

00:11:42.370 --> 00:11:44.980
catch all the updates in a filter chain.

00:11:45.030 --> 00:11:49.090
When you, in the past,
tried to chain multiple filters and

00:11:49.090 --> 00:11:52.840
you change something-- let's say
you pipe an image into filter A,

00:11:52.840 --> 00:11:56.250
then from there you take that
result and put it into filter B,

00:11:56.250 --> 00:11:58.760
and that's what you
want to draw on screen.

00:11:58.950 --> 00:12:02.320
Now you change a parameter on filter A.

00:12:02.370 --> 00:12:06.530
That output image that you originally
put into filter B has not changed

00:12:06.600 --> 00:12:09.160
because your images are immutable.

00:12:09.160 --> 00:12:11.290
So what you had to do in
your code was actually,

00:12:11.290 --> 00:12:14.620
well, something changed in filter A,
now I have to propagate this

00:12:14.620 --> 00:12:16.420
all the way through the chain.

00:12:16.420 --> 00:12:20.070
Now that you can actually bind
the output image from filter

00:12:20.070 --> 00:12:24.200
A to the input image of filter B,
it will just happen automatically.

00:12:24.200 --> 00:12:26.900
And what you do in the
end is like on filter B.

00:12:26.900 --> 00:12:27.900
You just register
yourself as an observer.

00:12:27.900 --> 00:12:30.470
You register yourself as an
observer to the output image there,

00:12:30.480 --> 00:12:32.940
and that just triggers your drawing code.

00:12:32.940 --> 00:12:35.900
So this all happens now
for you automatically.

00:12:35.900 --> 00:12:41.390
Somebody changes the filter on A,
and you get the change on your result,

00:12:41.390 --> 00:12:44.040
and your drawing code gets
even called automatically.

00:12:44.040 --> 00:12:47.090
So this really reduces the workload
for you in terms of writing code

00:12:47.090 --> 00:12:49.620
to handle all your filter change.

00:12:49.620 --> 00:12:53.320
And when you look at some of the
sample apps that are available for now,

00:12:53.320 --> 00:12:57.380
you will see that it's
really much less code.

00:12:57.960 --> 00:13:00.530
And then let me talk about QuartzGL.

00:13:00.780 --> 00:13:03.640
QuartzGL is new in Leopard.

00:13:03.720 --> 00:13:07.220
And with that part,
what we actually allow you to do is that

00:13:07.220 --> 00:13:11.480
you can use now a regular NSView and
create your CI context of it and still

00:13:11.610 --> 00:13:13.760
get the full hardware acceleration.

00:13:13.930 --> 00:13:18.640
So going back to Tiger,
what happened there was basically when

00:13:18.640 --> 00:13:22.190
you wanted to get the full performance,
you wanted to create an NSOpenGL view.

00:13:22.390 --> 00:13:24.500
So you needed to write a
little bit of OpenGL code,

00:13:24.500 --> 00:13:27.080
or you could use our sample,
the sample CI view or the sample

00:13:27.080 --> 00:13:32.470
CI scrollable view to get the full
performance running on the GPU.

00:13:32.530 --> 00:13:35.060
And that is, of course,
a little bit inconvenient.

00:13:35.190 --> 00:13:38.600
So in Leopard,
you can actually use an NSView.

00:13:38.620 --> 00:13:42.870
Now, this is not 100% true in the
seed that you have already now,

00:13:42.870 --> 00:13:46.110
but it will be true in the end
when Leopard finally ships.

00:13:46.220 --> 00:13:47.720
So the full performance is not there.

00:13:47.720 --> 00:13:50.560
It is definitely faster already,
but it's not as fast as it

00:13:50.560 --> 00:13:51.410
will be at the very end.

00:13:51.530 --> 00:13:56.510
So this will be something to make
life a little bit easier for you.

00:13:58.230 --> 00:14:01.560
Next step, as Ralph already mentioned,
one of the big features of

00:14:01.560 --> 00:14:04.020
Core Image is that you don't
just want to run one filter,

00:14:04.150 --> 00:14:06.050
you actually want to
concatenate multiple filters.

00:14:06.100 --> 00:14:10.090
And therefore you create a
little more complex effects.

00:14:10.100 --> 00:14:14.100
And for that we have something new for
you and that is the CI Filter Generator.

00:14:14.100 --> 00:14:17.050
So this allows you to
take multiple filters,

00:14:17.050 --> 00:14:20.100
put them together and
create a complex effect.

00:14:20.100 --> 00:14:24.170
And you can reuse those because they
are now wrapped into one filter,

00:14:24.170 --> 00:14:27.100
kind of like a macro actually,
that's how you can see those.

00:14:27.150 --> 00:14:29.290
And you can install them
actually on disk and you can

00:14:29.390 --> 00:14:31.100
reuse them in your applications.

00:14:32.210 --> 00:14:35.770
And we do have also an editor for it that
I will be showing to you in a minute.

00:14:35.900 --> 00:14:38.540
It's not on your disk,
so don't search for it right now.

00:14:38.670 --> 00:14:41.690
But it will actually show you
how to visually-- you can create

00:14:41.690 --> 00:14:44.710
your graph with little magnets,
and you see really what the

00:14:44.870 --> 00:14:46.310
results of your filters are.

00:14:46.310 --> 00:14:49.650
And this is a great tool that we
envision that later on artists can use

00:14:49.790 --> 00:14:51.990
to create effects for your applications.

00:14:52.050 --> 00:14:53.660
And you just have to load those.

00:14:53.730 --> 00:14:57.350
You don't even have to write any code
to really take advantage of this.

00:14:57.390 --> 00:14:59.700
And with that,
I would like to give you a demo of

00:14:59.700 --> 00:15:01.470
what the filter generator can do.

00:15:08.260 --> 00:15:11.060
Okay, so this is our filter generator.

00:15:11.170 --> 00:15:14.590
What I can simply do now,
I start with an image.

00:15:17.110 --> 00:15:17.640
That didn't work.

00:15:17.640 --> 00:15:18.680
Let's try it once more.

00:15:18.680 --> 00:15:20.330
OK, there we go.

00:15:20.480 --> 00:15:22.660
So I start with an image.

00:15:22.680 --> 00:15:25.500
And now I can use a filter here.

00:15:25.500 --> 00:15:29.860
Let's say I start with something--
and it's not very visually pleasing,

00:15:29.860 --> 00:15:32.520
but at least hopefully
seen also in the last row.

00:15:32.580 --> 00:15:34.720
So I start with a pointillized filter.

00:15:34.750 --> 00:15:38.600
And I want to compare it actually
with something like pixelate.

00:15:41.310 --> 00:15:43.260
Let's drag this in.

00:15:43.330 --> 00:15:46.640
So I can pipe now my image like this.

00:15:46.660 --> 00:15:50.400
And I see already in the right part, OK,
this is how point-alized looks like.

00:15:50.400 --> 00:15:52.280
Now I use pixelate.

00:15:52.280 --> 00:15:56.540
And now I use a transition
actually at the very end.

00:15:56.540 --> 00:15:59.410
Let me say I use the copy machine.

00:16:02.000 --> 00:16:04.000
"Let's make this in.

00:16:04.000 --> 00:16:06.010
And hook this up.

00:16:06.200 --> 00:16:08.780
So this is a very, very simple graph.

00:16:09.170 --> 00:16:12.220
Now what I want to do is actually,
I want to compare those effects.

00:16:12.230 --> 00:16:15.270
So I can actually say, well,
I'm interested in seeing the

00:16:15.270 --> 00:16:16.940
result of the input radius.

00:16:16.940 --> 00:16:23.370
I'm going to actually export that
key to what the input scale can do.

00:16:23.800 --> 00:16:26.700
And then in the copy machine,
let me just adjust it a little bit

00:16:26.780 --> 00:16:28.000
so it looks a little bit better.

00:16:28.000 --> 00:16:30.670
And I know that image actually
is a little bit bigger.

00:16:37.540 --> 00:16:39.600
I want to see the input time.

00:16:39.680 --> 00:16:40.990
So now I can save this out.

00:16:41.100 --> 00:16:47.980
If I can type.

00:16:55.310 --> 00:16:57.000
Okay.

00:16:57.000 --> 00:16:59.940
And now I wrote a little
sample application that uses

00:16:59.940 --> 00:17:02.270
these filter generators.

00:17:05.760 --> 00:17:07.700
So now I can open that one.

00:17:07.710 --> 00:17:10.940
This was the one that I just created.

00:17:10.950 --> 00:17:14.120
And now I can actually go in here
and actually compare the stuff.

00:17:14.180 --> 00:17:17.070
So you see,
this is just an image that I pipe

00:17:17.070 --> 00:17:20.290
in and just can simply also say,
OK, well, this is what happens if

00:17:20.290 --> 00:17:23.140
I use the pixelate part,
and this is what happens when

00:17:23.140 --> 00:17:25.020
I use my pointillized filter.

00:17:27.350 --> 00:17:29.800
So that is a very,
very simple example of that.

00:17:29.860 --> 00:17:32.680
So let me just give you one
additional part to this,

00:17:32.680 --> 00:17:35.740
actually how much code was
involved in doing this.

00:17:38.250 --> 00:17:39.410
And that's it.

00:17:39.640 --> 00:17:42.060
It's the open panel takes
up most of the space here.

00:17:42.280 --> 00:17:45.840
All I need to load is
the filter and use it.

00:17:46.720 --> 00:17:49.960
Okay, now this was a very,
very simple filter.

00:17:50.130 --> 00:17:53.860
Let me try to create a little bit
more compelling example for you here.

00:17:55.710 --> 00:18:00.640
So I actually start with some
text that I created as an image.

00:18:00.700 --> 00:18:05.070
And now we'll start by inverting it.

00:18:11.080 --> 00:18:16.430
And then I mask that,
create a height field from it.

00:18:16.570 --> 00:18:19.940
So you see this is getting
a little more complex now.

00:18:20.020 --> 00:18:24.110
And then I actually want to
use some shaded material.

00:18:26.950 --> 00:18:29.320
And I pipe this in here.

00:18:29.400 --> 00:18:32.220
So you can already see here on
the right-hand side that we get

00:18:32.220 --> 00:18:33.990
some nice effect with that text.

00:18:34.090 --> 00:18:35.940
But it's not quite right yet.

00:18:36.100 --> 00:18:39.650
What I want to achieve is actually
that this text looks like Chrome.

00:18:39.770 --> 00:18:44.170
So let me draw on an image for this.

00:18:45.070 --> 00:18:50.040
And now I have a nice chrome effect
where I can actually even change... Huh?

00:18:50.040 --> 00:18:51.700
A little glitch here
on the graphics card.

00:18:51.700 --> 00:18:54.840
Okay, well, please ignore that.

00:18:56.110 --> 00:19:00.600
But you want to say,
Chrome is normally not orange,

00:19:00.600 --> 00:19:03.470
so let me actually change that as well,
so I can actually break this

00:19:03.530 --> 00:19:09.240
connection and change this.

00:19:14.110 --> 00:19:16.240
Make this a monochrome.

00:19:16.240 --> 00:19:17.960
And now this looks already
much more like Chrome,

00:19:17.960 --> 00:19:20.920
and I can actually pick
whatever color I want here.

00:19:20.920 --> 00:19:24.290
Or I can go to my color wheel,
and you see how nice that changes

00:19:24.300 --> 00:19:26.140
actually the color of the text.

00:19:26.180 --> 00:19:28.000
So this is like a Chrome effect.

00:19:28.000 --> 00:19:33.710
And let me even change this by
taking this color invert out.

00:19:35.750 --> 00:19:39.360
And now, actually,
I have something that looks

00:19:39.360 --> 00:19:41.990
almost like an oil kind of text.

00:19:42.820 --> 00:19:45.940
So this is our filter generator editor.

00:19:45.980 --> 00:19:49.290
And instead,
I would like to go back to the slides.

00:19:54.370 --> 00:19:58.990
Now think of what somebody who has
really graphic skills can do with that.

00:19:59.150 --> 00:20:02.000
Okay, so you saw it's all
about connecting things.

00:20:02.090 --> 00:20:05.260
So let's have a look at the API,
how we connect stuff.

00:20:05.350 --> 00:20:08.480
So you want to connect a
filter to another filter.

00:20:08.730 --> 00:20:11.300
So what you have is you
connect it as a source object,

00:20:11.310 --> 00:20:13.400
and you say, "Okay,
which key of that filter I want

00:20:13.470 --> 00:20:17.850
to connect to the target object,
and which key that will be there?"

00:20:18.690 --> 00:20:21.850
One special thing that you can do
with the filter generator is that

00:20:21.850 --> 00:20:25.360
you can actually use an NSString,
which is the path of an image,

00:20:25.470 --> 00:20:27.540
and you can put that in
there as a source object.

00:20:27.670 --> 00:20:29.770
So you can say,
like an environment map where

00:20:29.770 --> 00:20:32.500
you simply take the path of that
image and you set it up as my

00:20:32.500 --> 00:20:35.810
source object that I pipe into,
like as I used a ball, for instance,

00:20:35.810 --> 00:20:37.930
here, and set this as my shaded material.

00:20:37.930 --> 00:20:39.360
That's my environment map.

00:20:39.360 --> 00:20:41.470
We'll not save all that
image in the graph.

00:20:41.470 --> 00:20:44.790
We just save that reference for you
and then resolve that on the fly.

00:20:44.840 --> 00:20:48.600
So that makes it actually really
convenient for these things.

00:20:48.910 --> 00:20:50.720
And then, of course,
when I want to disconnect,

00:20:50.740 --> 00:20:54.970
as I've done earlier in the demo,
I simply have, of course,

00:20:55.010 --> 00:20:57.820
a disconnect call for this as well.

00:21:01.770 --> 00:21:05.330
You saw that I was able to
take some parameters of that

00:21:05.490 --> 00:21:06.700
filter and export those.

00:21:06.700 --> 00:21:08.940
What does it actually mean?

00:21:09.070 --> 00:21:12.180
When you have a filter,
you want to give your client the

00:21:12.180 --> 00:21:14.860
ability to change some parameters in it.

00:21:15.020 --> 00:21:17.900
So, in that form, we just export a key.

00:21:18.080 --> 00:21:23.650
This allows the client to change,
as I showed you, the radius or the

00:21:24.090 --> 00:21:26.940
Like the time on the transition.

00:21:26.960 --> 00:21:29.460
Now, there's one interesting part,
as you saw,

00:21:29.460 --> 00:21:31.120
that I used as one input image.

00:21:31.120 --> 00:21:33.320
And I used it actually in
two filters that I then,

00:21:33.320 --> 00:21:35.310
again, laid on pipe together.

00:21:35.440 --> 00:21:38.460
So what I did actually for this input
image-- and the generator actually

00:21:38.460 --> 00:21:42.170
does this for you automatically in
that case-- is that I used one input

00:21:42.210 --> 00:21:44.400
key and exported it on two objects.

00:21:44.550 --> 00:21:47.580
So whenever you later on
set that one input image,

00:21:47.590 --> 00:21:49.440
it automatically gets
set on both filters.

00:21:49.440 --> 00:21:53.180
So there's this very need
for more complex graphs.

00:21:53.850 --> 00:21:59.040
So that's the way how you can export
the same key on multiple filters.

00:21:59.080 --> 00:22:00.970
One important thing that
you don't want to forget is

00:22:01.010 --> 00:22:05.700
actually that at the very end,
you need to export on your filter an

00:22:05.700 --> 00:22:08.570
output image key because otherwise,
there's nothing that you

00:22:08.580 --> 00:22:10.530
can get out of your filter.

00:22:11.600 --> 00:22:14.660
Of course, you can remove a key if needed
if you did anything wrong.

00:22:14.870 --> 00:22:18.730
So that's simply the remove export key.

00:22:19.120 --> 00:22:20.840
And you can set default attributes.

00:22:20.960 --> 00:22:25.240
So normally, each of these keys takes the
attributes from the filter.

00:22:25.290 --> 00:22:29.300
But if you say, for instance, well,
I have this Gaussian blur,

00:22:29.300 --> 00:22:32.840
but the maximum value in my
specific application would be way

00:22:32.840 --> 00:22:34.410
too big for what I want to do.

00:22:34.510 --> 00:22:37.010
So you can actually override the
default attributes by saying,

00:22:37.010 --> 00:22:40.820
well,
my maximum value can only be half of it.

00:22:43.100 --> 00:22:45.500
So now we want to-- basically,
after we hook everything up,

00:22:45.570 --> 00:22:46.760
we want to create a filter.

00:22:46.820 --> 00:22:52.660
And for that part,
we have an API for that.

00:22:52.660 --> 00:22:56.410
Simply create a CI filter.

00:22:56.410 --> 00:22:57.520
And this gives you an instance
of a CI filter that you can treat

00:22:57.520 --> 00:22:57.520
like every other filter that
you already have in Core Image.

00:22:57.840 --> 00:23:02.950
Now, if you want to use this filter in
multiple places of your application,

00:23:02.950 --> 00:23:06.340
or you want to use it
over and over again,

00:23:06.340 --> 00:23:11.550
just carrying around this one
instance is not very convenient.

00:23:11.550 --> 00:23:16.740
For that, you would actually register
your filter with a name.

00:23:16.750 --> 00:23:18.590
And that allows you then to use, again,
the filter with name API on

00:23:18.590 --> 00:23:18.590
Core Image to create instances of
that filter over and over again.

00:23:20.950 --> 00:23:24.590
One note that you really need
to keep in mind is before you

00:23:24.590 --> 00:23:28.040
want to create the filters,
that you have to set all the

00:23:28.040 --> 00:23:31.600
inputs of the filters that
went into this generator.

00:23:32.010 --> 00:23:36.230
So let's say on this shaded material one,
which takes an environment map,

00:23:36.290 --> 00:23:41.700
if I don't export that key or don't
set it to an image beforehand,

00:23:41.730 --> 00:23:44.780
it will be nil the moment when
this filter tries to get generated.

00:23:44.780 --> 00:23:47.660
And when you now ask that
filter for an output image,

00:23:47.690 --> 00:23:52.170
it will actually throw an exception,
because we cannot deal with

00:23:52.170 --> 00:23:54.260
a nil image as a source.

00:23:54.310 --> 00:23:56.450
So make sure that you
set all the parameters.

00:23:56.630 --> 00:23:59.550
That way,
your filter later on will work correctly.

00:24:01.390 --> 00:24:04.300
And of course, you want to save those
filter generators out.

00:24:04.340 --> 00:24:08.760
And there's a simple API that writes
it out into a P-list document.

00:24:08.830 --> 00:24:10.190
So you simply write it to a URL.

00:24:10.250 --> 00:24:13.800
And you can use these descriptions in
your applications or even distribute

00:24:13.800 --> 00:24:15.710
it to your friends if you want to.

00:24:15.850 --> 00:24:18.980
So the part that we really envision
there is that if you have an art

00:24:19.030 --> 00:24:22.170
department or a graphic artist,
he can create these effects for you.

00:24:22.410 --> 00:24:25.680
And then you can use them
in your application again.

00:24:26.510 --> 00:24:28.110
And then of course
there's the counterpart,

00:24:28.320 --> 00:24:31.460
how to read it back in,
and that is that you simply create

00:24:31.560 --> 00:24:32.920
a filter generator from that URL.

00:24:33.070 --> 00:24:35.830
And that was pretty much that only
little code snippet that I showed

00:24:35.940 --> 00:24:37.370
in my sample app that uses it.

00:24:37.480 --> 00:24:40.920
That's all what I had to do,
and then ask for a filter.

00:24:42.200 --> 00:24:44.100
So that was the filter generator.

00:24:44.140 --> 00:24:47.410
Next part,
let's talk about something uncooked.

00:24:48.000 --> 00:24:51.520
We now support actually
raw images in Core Image.

00:24:51.630 --> 00:24:54.800
So what that means is when you
look at digital cameras today,

00:24:54.800 --> 00:24:58.460
it's getting more important that you
can actually support the raw format.

00:24:58.530 --> 00:25:00.530
And raw is like-- yeah,
the analogy of being

00:25:00.530 --> 00:25:02.140
uncooked is not so far off.

00:25:02.280 --> 00:25:05.000
Because this is really
what comes from the sensor.

00:25:05.130 --> 00:25:08.820
So when you look at all these little
colorful buttons and labels that

00:25:08.830 --> 00:25:11.720
you have on the box of like this
image processing that the camera

00:25:11.720 --> 00:25:15.900
can do and this fancy algorithm,
this has not been applied.

00:25:16.230 --> 00:25:20.080
The advantage actually of using
that raw data is that you can now,

00:25:20.160 --> 00:25:24.780
based on this real raw information,
really tweak the image correctly.

00:25:24.890 --> 00:25:29.930
And there's ongoing research of how you
can actually read the sensor information

00:25:29.930 --> 00:25:32.370
and make better images out of it.

00:25:32.960 --> 00:25:37.100
So this is the way now that with the
CI raw filter that we allow you to

00:25:37.100 --> 00:25:39.040
use raw images directly in Core Image.

00:25:39.040 --> 00:25:41.740
You can adjust the image right there.

00:25:41.740 --> 00:25:44.490
So we give you some parameters there.

00:25:44.500 --> 00:25:47.510
And as I said,
since we do continuously improve on this,

00:25:47.510 --> 00:25:51.240
so I can guarantee you there will be
future versions of Core Image that

00:25:51.240 --> 00:25:56.260
have better improvements on raw import,
so there will be different versions.

00:25:56.260 --> 00:25:58.010
That is important for
you to keep in mind.

00:25:58.130 --> 00:26:02.020
If you want to basically create an
application that takes advantage of this.

00:26:02.020 --> 00:26:04.270
Now for your clients,
you want to make sure, well,

00:26:04.280 --> 00:26:07.980
even like three years down the line,
he wants to get the same image out of it.

00:26:07.980 --> 00:26:12.840
You want to again select the same
version of the raw implementation.

00:26:12.840 --> 00:26:15.630
Or if you want to have the best results,
go with the latest.

00:26:17.170 --> 00:26:20.650
And with that,
let's have a look at the raw API.

00:26:20.750 --> 00:26:24.870
So the API to create a filter
is either from a file-- so we go

00:26:24.870 --> 00:26:30.850
by a URL-- or if you go by data,
if you have it already in memory.

00:26:31.740 --> 00:26:35.360
And then there are some keys that allow
you actually then to manipulate this.

00:26:35.480 --> 00:26:38.600
So you see this is a filter,
this is not an image.

00:26:38.780 --> 00:26:43.000
That is important as being a filter,
we can manipulate the stuff and

00:26:43.000 --> 00:26:46.300
then pipe it also further down into
the pipeline of Core Image when

00:26:46.300 --> 00:26:48.000
you do additional processing.

00:26:48.160 --> 00:26:55.830
So the keys that allow you, for instance,
the exposure setting and the

00:26:55.830 --> 00:26:55.910
net neutral chromaticity,
that was a hard word.

00:26:56.440 --> 00:27:00.060
You can send the temperature
tint and also the location.

00:27:00.060 --> 00:27:02.600
Those kind of parameters go
a little bit hand in hand.

00:27:02.750 --> 00:27:06.740
Those are the most important ones for
actually adjusting an image for the

00:27:06.740 --> 00:27:09.300
white balance and the correct exposure.

00:27:09.600 --> 00:27:12.490
And with that,
I would like to give you a demo of this.

00:27:29.180 --> 00:27:31.160
So I'm opening up a raw image.

00:27:31.190 --> 00:27:33.090
And this is a pretty big image.

00:27:33.100 --> 00:27:35.180
That's why it took a
little moment to load.

00:27:35.230 --> 00:27:37.160
And what you can see,
it's a little bit overexposed.

00:27:37.160 --> 00:27:39.510
If you look in the sky,
and you can barely make out

00:27:39.540 --> 00:27:41.110
the tail fin of that plane.

00:27:41.210 --> 00:27:44.100
So I can actually adjust the
exposure value a little bit down.

00:27:44.100 --> 00:27:46.530
And you see, wow,
that looks already much, much better.

00:27:46.630 --> 00:27:49.530
So that gives me an easy
way of already seeing,

00:27:49.600 --> 00:27:51.870
OK, this was an image that
was not quite right.

00:27:52.070 --> 00:27:54.220
And I can tweak it into the correct way.

00:27:54.270 --> 00:27:57.500
And I didn't lose any information
really that much here.

00:27:57.530 --> 00:27:59.260
And then, of course,
I can either use the temperature

00:27:59.260 --> 00:28:02.090
slider to make this a little bit
more cooler or warmer looking,

00:28:02.160 --> 00:28:03.500
depending on what I want.

00:28:03.520 --> 00:28:05.860
Or in this case, actually,
I can just pick a white

00:28:06.000 --> 00:28:06.860
point in this image.

00:28:06.860 --> 00:28:08.800
And yeah, so this is NASA.

00:28:08.800 --> 00:28:11.970
This is going
English versus metric white.

00:28:12.840 --> 00:28:17.040
So that is the easy way of how
I can already adjust that image.

00:28:17.070 --> 00:28:20.240
Now, as I said,
we can use CI filters with it.

00:28:20.540 --> 00:28:24.920
So let me take a filter here,
and I want to do a gamma adjust.

00:28:28.810 --> 00:28:33.500
So now what I can do is go a
little bit stronger with this guy.

00:28:33.500 --> 00:28:35.530
Now you can actually start
to see actually that he's

00:28:35.690 --> 00:28:36.700
pointing inside that engine.

00:28:36.700 --> 00:28:39.100
That was almost not visible before.

00:28:39.240 --> 00:28:42.790
So that is just putting it into
a regular CI filter pipeline,

00:28:42.850 --> 00:28:45.590
so regular Core Image processing.

00:28:46.790 --> 00:28:50.460
The sample was supposed to be made
on the disk that you have available.

00:28:50.460 --> 00:28:52.210
Unfortunately, it did not quite make it.

00:28:52.250 --> 00:28:55.690
But if you come later on to our lab,
we can give you the sample code so you

00:28:55.790 --> 00:28:58.020
can actually work with this application.

00:28:58.170 --> 00:29:00.900
And with that,
I would like to go back to the slides.

00:29:09.430 --> 00:29:13.780
So one of the most requested features
from Core Image in the past was,

00:29:13.780 --> 00:29:15.570
"OK, I have this filter.

00:29:15.570 --> 00:29:18.440
I need to show the
parameters to our users.

00:29:18.440 --> 00:29:23.770
How do I create some UI?" So we had,
of course, the Funhaus demo application,

00:29:23.870 --> 00:29:25.280
which we showed you.

00:29:25.380 --> 00:29:28.480
Just write this amount of code,
and you have basically

00:29:28.580 --> 00:29:29.890
a UI for your filters.

00:29:30.050 --> 00:29:34.680
Well, now we have an API for you
that is slightly smaller.

00:29:34.830 --> 00:29:39.100
So it allows you to automatically
create a UI for filters,

00:29:39.140 --> 00:29:43.050
and you can also provide for those
right filters your custom UI.

00:29:43.260 --> 00:29:47.140
So that way, as an Image Unit,
you can have your own branding on it.

00:29:47.200 --> 00:29:49.800
And what you get is actually
a view with all the controls

00:29:49.800 --> 00:29:55.120
needed to set up this filter and
change all the parameters of it.

00:29:55.380 --> 00:29:57.700
In addition, we threw something in
that's a filter browser.

00:29:57.700 --> 00:30:01.060
And if you paid attention to what I've
used before already in the samples,

00:30:01.090 --> 00:30:02.630
that's the filter browser.

00:30:02.810 --> 00:30:03.800
You can have it as a view.

00:30:03.800 --> 00:30:10.560
You can have it as a sheet or as a panel,
depending on what you like.

00:30:10.680 --> 00:30:12.920
So it's your choice.

00:30:12.920 --> 00:30:14.490
It allows you to browse
through the filters.

00:30:14.490 --> 00:30:14.490
And you see a preview of the filter.

00:30:14.490 --> 00:30:14.490
And you see also a description of it.

00:30:14.800 --> 00:30:17.680
And very much like the phone panel,
it allows you to collect the favorites,

00:30:17.730 --> 00:30:22.500
so you can actually keep your
favorite filters in one location.

00:30:23.510 --> 00:30:26.400
And very much like the phone panel,
it allows you to collect the favorites,

00:30:26.400 --> 00:30:31.010
so you can actually keep your
favorite filters in one location.

00:30:31.800 --> 00:30:32.940
So let's look at this API.

00:30:32.940 --> 00:30:34.840
As I said, it's really big.

00:30:34.880 --> 00:30:38.370
Well, to get a view that
provides UI for a filter,

00:30:38.400 --> 00:30:42.400
all I have to call is actually
view with UI configuration.

00:30:42.420 --> 00:30:46.150
UI configuration is actually a
dictionary which allows you to take

00:30:46.150 --> 00:30:47.650
the size of the controls that you want.

00:30:47.680 --> 00:30:50.840
So you can get mini, small,
or regular-sized controls.

00:30:50.870 --> 00:30:54.260
And also a set of controls where
we are actually still defining

00:30:54.260 --> 00:30:59.080
a parameter set of very basic or
the more advanced feature set.

00:30:59.110 --> 00:31:03.390
And you can also on your own say, OK,
I want to exclude certain keys.

00:31:03.510 --> 00:31:04.680
So this sounds a little bit abstract.

00:31:04.680 --> 00:31:06.890
Why would I do that?

00:31:07.100 --> 00:31:10.090
If your application, like most of them,
is a document application,

00:31:10.090 --> 00:31:13.620
so you know your document is your image,
that will be your input image that

00:31:13.680 --> 00:31:15.450
you want to pipe into that filter.

00:31:15.640 --> 00:31:18.350
So you most likely don't want to
display this input image in your

00:31:18.350 --> 00:31:21.800
UI for that filter because that's
already right there in your document.

00:31:22.120 --> 00:31:28.490
So you can simply exclude it,
and that key,

00:31:28.490 --> 00:31:29.840
actually the UI for that key
will not show up in the view.

00:31:31.100 --> 00:31:34.880
And for filters, so this is now for the
people who write image units,

00:31:34.950 --> 00:31:38.600
who want to provide their own UI,
you simply have to implement

00:31:38.600 --> 00:31:42.900
the Provider method,
and you can bring up your own view.

00:31:44.090 --> 00:31:47.380
So that was all what you needed
to create this UI for filter.

00:31:47.380 --> 00:31:50.060
On the filter browser side,
so we have a shared instance,

00:31:50.060 --> 00:31:53.760
so you get this shared
instance and run it.

00:31:53.790 --> 00:31:56.960
In this case,
I used to run model with options.

00:31:56.960 --> 00:31:59.780
But they, of course,
are the reader calls if you want

00:31:59.780 --> 00:32:03.780
to run it as a sheet or in a panel.

00:32:03.830 --> 00:32:07.860
So again, there are some options which
allow you to configure if the

00:32:07.860 --> 00:32:09.270
preview is originally visible.

00:32:09.490 --> 00:32:12.220
Or you can set your own images
for the preview so that it matches

00:32:12.220 --> 00:32:13.890
what you see in your document.

00:32:14.100 --> 00:32:17.530
So that is all there in
the options dictionary.

00:32:17.810 --> 00:32:21.270
And if you want to put this
view right into your window,

00:32:21.330 --> 00:32:24.800
you can do that as well because you
simply have to ask for the filter browser

00:32:24.800 --> 00:32:26.970
view and you stick this into your window.

00:32:27.690 --> 00:32:31.160
And if you want to put this
view right into your window,

00:32:31.250 --> 00:32:34.700
you can do that as well because you
simply have to ask for the filter browser

00:32:34.840 --> 00:32:36.840
view and you stick this into your window.

00:33:00.000 --> 00:33:03.100
So this little demo application you
actually do find on your Leopard Disk.

00:33:03.100 --> 00:33:07.180
It's in the developer examples
under Quartz Core Image.

00:33:07.430 --> 00:33:11.380
And it's a very simple application just
to show you a little bit the capabilities

00:33:11.410 --> 00:33:12.590
and also to test some parts out.

00:33:12.710 --> 00:33:15.540
So I can now open my filter browser here.

00:33:15.580 --> 00:33:17.500
And you can see I can
search for a filter,

00:33:17.500 --> 00:33:18.300
as I've done before.

00:33:18.300 --> 00:33:20.170
I can go for like sepia.

00:33:20.340 --> 00:33:21.660
There's my sepia tone filter.

00:33:21.660 --> 00:33:25.720
And it tells me what sepia does,
shows me a little preview of it.

00:33:25.860 --> 00:33:28.420
Of course,
I can turn this preview on and off.

00:33:28.470 --> 00:33:33.480
And then I just double click on it,
and it gets added to my image.

00:33:33.590 --> 00:33:35.070
I can take a second filter.

00:33:35.080 --> 00:33:37.790
So let's say I want to actually
just distort this a little bit.

00:33:37.820 --> 00:33:39.980
Let me cancel my search.

00:33:40.150 --> 00:33:43.500
And yeah,
let me see like the glass distortion.

00:33:43.500 --> 00:33:46.000
No, that does not quite look like-- yeah,
circle splash.

00:33:46.000 --> 00:33:48.420
OK, let me use the circle
splash in this case.

00:33:48.440 --> 00:33:49.360
And I add this as well.

00:33:49.470 --> 00:33:52.970
So now I have like some fancy
effect that I go on top of my image.

00:33:52.980 --> 00:33:54.680
And I hope that it's
visible for everybody.

00:33:54.710 --> 00:33:58.390
And I can still change
also my sepia tone.

00:33:59.340 --> 00:34:02.120
When you look at that sample code,
this also takes advantage of

00:34:02.120 --> 00:34:03.560
a lot of the bindings part.

00:34:03.670 --> 00:34:07.010
So, it's actually very little code
that I had to do to really chain

00:34:07.060 --> 00:34:09.150
up these filters in this moment.

00:34:09.360 --> 00:34:11.680
And then, of course,
I can remove a filter and go

00:34:11.680 --> 00:34:13.600
back to something like this.

00:34:13.630 --> 00:34:17.100
And when you play around with it,
it allows you to test out the

00:34:17.100 --> 00:34:21.290
different sizes of the controls
and which set of controls you want.

00:34:22.630 --> 00:34:25.100
So that is the
Image Unit Demo application.

00:34:25.100 --> 00:34:28.160
And as I said,
that is already available for you.

00:34:28.160 --> 00:34:30.850
I would like to go back to the slides.

00:34:34.870 --> 00:34:39.170
So, writing Image Unit is not
necessarily the easiest task,

00:34:39.180 --> 00:34:40.410
I have to admit.

00:34:40.540 --> 00:34:43.490
So, a lot of requests was like,
"Give us a little bit better

00:34:43.490 --> 00:34:45.520
documentation," and we do have now.

00:34:45.530 --> 00:34:48.540
It's the Image Unit tutorial,
and you can,

00:34:48.540 --> 00:34:53.250
with this Image Unit tutorial,
much better write filters.

00:34:53.540 --> 00:34:56.600
So, it has really a step-by-step
guide for writing filters,

00:34:56.640 --> 00:34:59.960
how to write the kernels,
and how to package them up.

00:35:00.010 --> 00:35:01.330
There's lots of sample code in it.

00:35:01.380 --> 00:35:02.400
It's 78 pages.

00:35:02.400 --> 00:35:04.940
And actually, I have a copy here.

00:35:08.080 --> 00:35:10.000
This is how it looks like.

00:35:10.040 --> 00:35:14.200
And you really see-- well,
if you can see, even in the last row,

00:35:14.200 --> 00:35:17.010
there's lots of samples
and how to do this stuff.

00:35:17.070 --> 00:35:17.800
So check it out.

00:35:17.970 --> 00:35:23.420
We have a bunch of copies also in the lab
that you can get and find it on your DVD.

00:35:23.530 --> 00:35:25.870
So it's for you available as a PDF.

00:35:25.970 --> 00:35:27.480
So who wants this copy?

00:35:27.540 --> 00:35:28.510
Here, first row.

00:35:28.530 --> 00:35:31.290
There we go.

00:35:33.000 --> 00:35:36.760
So let's have a look at
one of these examples.

00:35:36.850 --> 00:35:40.940
I picked the Lens Image Unit to actually
demonstrate one thing that you might run

00:35:40.940 --> 00:35:43.770
into when you write your own Image Units.

00:35:44.480 --> 00:35:46.850
And that is the problem with the ROI.

00:35:47.160 --> 00:35:48.390
So what is the ROI?

00:35:48.470 --> 00:35:51.010
It's the region of interest.

00:35:51.510 --> 00:35:54.010
When you write a filter,
most likely you don't just

00:35:54.010 --> 00:35:57.920
sample like one pixel,
you want to sample surrounding it.

00:35:58.040 --> 00:36:01.640
And when an image actually
gets uploaded to Core Image,

00:36:01.710 --> 00:36:03.310
most often it gets tiled.

00:36:03.320 --> 00:36:04.340
So this is for efficiency.

00:36:04.340 --> 00:36:07.440
It gets sliced and diced
into the smaller sections.

00:36:07.540 --> 00:36:11.930
Now when you try to access a pixel
on like the edge of this tile,

00:36:11.950 --> 00:36:15.630
and you can go further out,
that tile is at the end.

00:36:15.770 --> 00:36:20.430
So I can't access the pixel anymore,
so I get some artifacts on screen.

00:36:20.540 --> 00:36:22.780
And that can be that
there's something missing,

00:36:22.780 --> 00:36:25.180
or you see like little
vertical or horizontal lines,

00:36:25.180 --> 00:36:27.680
and you think,
what do these guys in Cupertino do?

00:36:27.680 --> 00:36:28.890
There are bugs in it.

00:36:28.980 --> 00:36:30.230
It's actually not a bug.

00:36:30.350 --> 00:36:34.720
You need to tell Core Image how big
that image range is that you actually

00:36:34.720 --> 00:36:37.560
need in your kernel to really access it.

00:36:37.690 --> 00:36:42.190
So if you say, well,
my algorithm will normally sample like x

00:36:42.320 --> 00:36:46.470
amount of pixels around a center point,
the tile Core Image, OK,

00:36:46.470 --> 00:36:49.800
this rectangle is x amount
of pixels bigger than what

00:36:49.800 --> 00:36:53.140
I originally that image was,
so that I can really tile

00:36:53.140 --> 00:36:55.020
everything correctly.

00:36:55.030 --> 00:36:56.260
And with that,
I would like to give you a little

00:36:56.260 --> 00:36:58.590
demo of how this looks like.

00:37:09.100 --> 00:37:12.420
So as I said,
I'm using the Lens Image Unit,

00:37:12.420 --> 00:37:17.080
which is described in
that Image Unit tutorial.

00:37:17.270 --> 00:37:23.930
So what I've done here is just to--
I don't want to go over the whole code,

00:37:23.930 --> 00:37:28.010
but in the part here
where we set up the ROI,

00:37:28.010 --> 00:37:31.970
the region of interest calculation,
I simply was so bad that I commented out.

00:37:31.970 --> 00:37:31.970
So when I build this filter now,

00:37:33.480 --> 00:37:36.820
So as I said,
I'm using the Lens Image Unit,

00:37:36.820 --> 00:37:41.310
which is described in
that Image Unit tutorial.

00:37:41.550 --> 00:37:44.470
So what I've done here is just to--
I don't want to go over the whole code,

00:37:44.470 --> 00:37:44.470
but in the part here
where we set up the ROI,

00:37:44.470 --> 00:37:44.470
the region of interest calculation,
I simply was so bad that I commented out.

00:37:44.470 --> 00:37:44.470
So when I build this filter now,

00:37:47.560 --> 00:37:50.020
And there's my lens.

00:37:50.040 --> 00:37:53.740
Now I can go in and move
around and look-- oops,

00:37:53.750 --> 00:37:54.780
where's my ring?

00:37:54.790 --> 00:37:56.710
It just disappeared.

00:37:57.730 --> 00:37:59.970
And that is simply because
the ROI function is missing,

00:37:59.980 --> 00:38:02.100
so I can't sample those pixels anymore.

00:38:02.150 --> 00:38:06.170
So let me fix that for you
by simply going back here.

00:38:09.480 --> 00:38:10.200
Save this.

00:38:10.200 --> 00:38:12.120
Let's build it again.

00:38:12.120 --> 00:38:15.650
And I actually had it built
directly into the Image Unit folder,

00:38:15.650 --> 00:38:19.500
so that just makes the demo
a little bit easier for me.

00:38:19.500 --> 00:38:21.490
Here's the same image.

00:38:25.100 --> 00:38:25.710
Save this.

00:38:25.840 --> 00:38:27.720
Let's build it again.

00:38:27.720 --> 00:38:31.210
And I actually had it built
directly into the Image Unit folder,

00:38:31.260 --> 00:38:34.860
so that just makes the demo
a little bit easier for me.

00:38:35.160 --> 00:38:37.020
Here's the same image.

00:38:56.330 --> 00:38:59.850
Talking about image units,
there can also be a lot of things

00:38:59.850 --> 00:39:01.530
going wrong by packaging them.

00:39:01.620 --> 00:39:04.820
So for that we have an
Image Unit Analyzer.

00:39:04.820 --> 00:39:08.160
That tool was already available
for those who participated in the

00:39:08.160 --> 00:39:11.410
Image Unit logo program earlier,
but we now have it available

00:39:11.410 --> 00:39:12.680
in Neppert for you.

00:39:12.680 --> 00:39:15.640
In that part, we actually check and make
sure that everything is in

00:39:15.640 --> 00:39:17.280
order with this Image Unit.

00:39:17.450 --> 00:39:20.790
So we test, first of all,
if the Image Unit is complete

00:39:20.790 --> 00:39:22.180
and if the bundle is correct.

00:39:22.180 --> 00:39:24.040
So there are some parameters
that you have to set up,

00:39:24.060 --> 00:39:27.470
some information that you need to
provide to create an Image Unit,

00:39:27.540 --> 00:39:29.570
and we check for this.

00:39:29.860 --> 00:39:31.740
Then we verify if the
filter is set up correctly.

00:39:31.740 --> 00:39:34.240
So there are certain things
that we expect from the filter,

00:39:34.240 --> 00:39:36.580
so we will check with this tool.

00:39:37.310 --> 00:39:38.580
Then we test drive the filter.

00:39:38.700 --> 00:39:41.780
So we're not looking at the image,
but we at least apply that

00:39:41.780 --> 00:39:45.190
filter to an image and see,
will it barf?

00:39:46.100 --> 00:39:48.570
Now, one thing that's very important
for LabRD is we will check,

00:39:48.570 --> 00:39:53.060
actually, if this Image Unit is built
for all four architectures.

00:39:53.130 --> 00:39:55.830
So we check if it's
running on PPC and Intel,

00:39:55.830 --> 00:39:57.490
32 and 64-bit.

00:39:57.580 --> 00:40:03.400
So set up your project
correctly in Xcode,

00:40:03.400 --> 00:40:03.400
and you'll get all four architectures.

00:40:03.900 --> 00:40:05.490
So you find it in the developer tools.

00:40:05.580 --> 00:40:07.660
This is a command line tool.

00:40:07.660 --> 00:40:10.180
And this is actually how
the result looks like.

00:40:10.240 --> 00:40:14.420
So this is a little filter that I wrote,
which, oh, what a surprise,

00:40:14.420 --> 00:40:15.820
it passed the test.

00:40:15.950 --> 00:40:20.750
And you will see basically some similar
results if your filter is correct.

00:40:22.540 --> 00:40:27.290
So again, the call: build Image Units,
create applications that

00:40:27.290 --> 00:40:28.360
also host Image Units.

00:40:28.360 --> 00:40:30.400
It's just one line of
code that you have to do.

00:40:30.570 --> 00:40:34.390
You can take advantage of how
Core Image can be extended.

00:40:34.480 --> 00:40:36.150
And there's the Image Unit logo program.

00:40:36.230 --> 00:40:40.000
So this allows you,
when your test actually was successful

00:40:40.000 --> 00:40:43.200
and it's the Image Unit analyzer
and you follow a license agreement,

00:40:43.200 --> 00:40:45.940
that you can put that logo on
your box and everybody can see,

00:40:45.940 --> 00:40:47.990
"Ooh, this is creamy and juicy."

00:40:50.670 --> 00:40:54.260
Next point, we have a widget for you.

00:40:54.370 --> 00:40:56.830
This is the CI Filter Browser
Dashboard widget.

00:40:56.910 --> 00:41:00.120
And this was available as a download
for Tiger a little bit earlier,

00:41:00.120 --> 00:41:03.200
but we have improved it now for Leopard.

00:41:03.400 --> 00:41:06.760
So it is now already with your
Leopard developer tools installed.

00:41:06.830 --> 00:41:09.150
So if you go into
Dashboard on your machines,

00:41:09.150 --> 00:41:10.590
you will see it already.

00:41:10.990 --> 00:41:14.400
So it is now already with your
Leopard developer tools installed.

00:41:14.400 --> 00:41:16.750
So if you go into
Dashboard on your machines,

00:41:16.750 --> 00:41:17.930
you will see it already.

00:41:18.480 --> 00:41:19.560
And you get to know the filter.

00:41:19.560 --> 00:41:23.520
This means actually that you can have
a look at what parameters are there

00:41:23.710 --> 00:41:29.300
and actually what is the parameter set
that I can use with this specific key,

00:41:29.430 --> 00:41:32.390
so like the maximum, minimum values.

00:41:32.480 --> 00:41:35.770
And you can test drive the filter,
so we allow you even to test live

00:41:35.880 --> 00:41:39.640
with your own images how this filter
will actually affect your image.

00:41:40.100 --> 00:41:41.160
And you get to know the filter.

00:41:41.160 --> 00:41:45.240
This means actually that you can have
a look at what parameters are there

00:41:45.240 --> 00:41:51.000
and actually what is the parameter set
that I can use with this specific key,

00:41:51.000 --> 00:41:53.990
so like the maximum, minimum values.

00:41:54.000 --> 00:41:55.100
And you can test drive the filter,
so we allow you even to test live

00:41:55.100 --> 00:41:55.100
with your own images how this filter
will actually affect your image.

00:42:03.410 --> 00:42:08.660
Okay, so I'll open it up in Dashboard and
I can see my preview of the filter.

00:42:08.660 --> 00:42:11.690
Now I can go here and have
a look at different filters.

00:42:11.730 --> 00:42:16.220
As I said, I can search.

00:42:16.220 --> 00:42:16.220
I always like to search for CPL.

00:42:16.410 --> 00:42:17.170
And there it is.

00:42:17.190 --> 00:42:18.140
And I can see that filter.

00:42:18.140 --> 00:42:20.670
And as I said, now we have documentation.

00:42:20.860 --> 00:42:23.620
When I click here,
this actually brings me

00:42:23.730 --> 00:42:25.800
to the full documentation.

00:42:25.850 --> 00:42:27.420
And there's my filter reference.

00:42:27.420 --> 00:42:28.540
It did not work quite here.

00:42:28.630 --> 00:42:29.700
We have a network problem.

00:42:29.700 --> 00:42:29.880
OK.

00:42:30.070 --> 00:42:32.610
But technically, it would work.

00:42:34.420 --> 00:42:38.300
And what I can also do is I said, like,
besides just looking at these all,

00:42:38.300 --> 00:42:41.330
I can see, okay,
it has an intensity parameter.

00:42:41.530 --> 00:42:42.800
These are the values that I can use.

00:42:42.850 --> 00:42:44.300
It's a scalar.

00:42:44.340 --> 00:42:45.450
I can use my own images.

00:42:45.620 --> 00:42:46.860
So, this is a slight trick to do that.

00:42:46.980 --> 00:42:49.850
So, I grab, actually, an image,
start dragging.

00:42:50.130 --> 00:42:56.500
Now, I invoke dashboard,
and I can drag it right in here,

00:42:56.500 --> 00:42:56.500
and there's my own image
to test drive this filter.

00:42:59.180 --> 00:43:00.880
And as I said, we can also copy the code.

00:43:00.950 --> 00:43:04.260
So let me take a little bit
more complex filter here,

00:43:04.260 --> 00:43:06.700
like, for instance, the CMYK halftone.

00:43:06.730 --> 00:43:08.760
And now all I have to do,
when I select the filter,

00:43:08.760 --> 00:43:12.360
I hit Command-C for copy.

00:43:12.400 --> 00:43:14.600
And then I go into Xcode.

00:43:14.600 --> 00:43:17.080
Let me just create an empty file.

00:43:18.680 --> 00:43:21.040
And I can paste it.

00:43:21.080 --> 00:43:22.840
This is a very long one.

00:43:22.900 --> 00:43:25.110
But you see, we already create for
you filter with name,

00:43:25.270 --> 00:43:26.560
correct filter name.

00:43:26.600 --> 00:43:28.680
And all the keys are here,
so you can set them

00:43:28.680 --> 00:43:30.500
directly if you want to.

00:43:30.720 --> 00:43:32.970
And we give you also the, OK,
what is the type of it?

00:43:33.140 --> 00:43:34.570
So that makes coding much, much easier.

00:43:34.610 --> 00:43:37.300
So see this as kind of like
an API browser for you.

00:43:37.320 --> 00:43:42.160
OK, so that was the widget.

00:43:42.160 --> 00:43:44.580
I'd like to go back to the slides,
please.

00:43:48.730 --> 00:43:52.160
Well, I've already mentioned debugging.

00:43:52.240 --> 00:43:55.870
So debugging means, actually,
that we want to have a look into the

00:43:55.870 --> 00:43:58.670
black box of what CoreImage is doing.

00:43:58.940 --> 00:44:01.100
And for that,
we reintroduce an old friend

00:44:01.100 --> 00:44:04.110
that has learned some new tricks,
and that is Quartz Debug.

00:44:04.330 --> 00:44:07.120
Quartz Debug now can look into CoreImage.

00:44:07.140 --> 00:44:12.810
And that means it knows which filters
get executed on the CI context and

00:44:12.970 --> 00:44:16.140
it knows how long a filter took.

00:44:16.140 --> 00:44:19.400
So this is important for you to
really analyze at least what is

00:44:19.400 --> 00:44:21.780
happening with my CoreImage rendering.

00:44:21.780 --> 00:44:25.590
And to make some mileage on the stage,
I would like to give you a demo.

00:44:30.550 --> 00:44:31.490
Can we-- yeah, thank you.

00:44:31.620 --> 00:44:40.610
So I'm going back to my own
little sample code here.

00:44:40.700 --> 00:45:07.700
[Transcript missing]

00:45:08.880 --> 00:45:10.440
I'm adding a CPU filter.

00:45:10.500 --> 00:45:13.480
Oh, and you see now, actually,
there are two renderings happening here.

00:45:13.480 --> 00:45:14.190
So why is that?

00:45:14.200 --> 00:45:16.300
I only have one image.

00:45:16.480 --> 00:45:19.400
Well, of course, in that first part here,
when I look at it,

00:45:19.440 --> 00:45:22.110
this is actually what happened.

00:45:23.550 --> 00:45:27.890
In my real application versus what
actually happened in my little

00:45:27.890 --> 00:45:30.920
filter browser when I brought
up that filter browser panel,

00:45:30.920 --> 00:45:33.590
because that preview needs
to be rendered as well,

00:45:33.590 --> 00:45:35.330
and that is Core Image as well.

00:45:36.170 --> 00:45:38.310
So this shows me when I look
here in the bottom part,

00:45:38.310 --> 00:45:41.140
actually, OK, this is the CPR tone
filter that rendered.

00:45:41.160 --> 00:45:43.100
I can see the input intensity.

00:45:43.120 --> 00:45:45.450
I can see the domain of
definition that was used.

00:45:45.560 --> 00:45:47.420
It's all there.

00:45:47.500 --> 00:45:50.960
So I at least understand
which filters have been used.

00:45:50.970 --> 00:45:53.280
Now, have a look at the performance part.

00:45:53.350 --> 00:45:55.620
And I can actually open this part here.

00:45:55.630 --> 00:45:57.450
I need to start sampling.

00:45:57.590 --> 00:46:00.900
And now when I go in here
and actually use the slider,

00:46:00.900 --> 00:46:04.660
you can actually see how the numbers
on the right side actually increase.

00:46:04.720 --> 00:46:06.900
So this tells me actually, OK,
something is rendering

00:46:06.900 --> 00:46:08.240
and using some time.

00:46:08.240 --> 00:46:11.290
This is actually the time
spent in that filter.

00:46:11.860 --> 00:46:15.280
And it will tell me how long it took,
actually how many pixels were processed,

00:46:15.280 --> 00:46:19.310
and how many pixels even
per second we actually used.

00:46:20.090 --> 00:46:23.240
So this is simply how you can look with
Quartz Debug into what is happening

00:46:23.240 --> 00:46:25.530
with Core Image in your application.

00:46:25.570 --> 00:46:28.040
Instead,
I would like to go back to the slides,

00:46:28.040 --> 00:46:28.700
please.

00:46:31.290 --> 00:46:33.230
So this is the rendering log.

00:46:33.440 --> 00:46:37.540
And you can see in that application,
I rendered quite a bit already.

00:46:37.590 --> 00:46:40.660
And on that bottom part,
you see really what actually

00:46:40.660 --> 00:46:41.740
filters were executed.

00:46:41.790 --> 00:46:44.920
So I clicked on one of them,
and I want to see what did happen

00:46:44.970 --> 00:46:47.240
during this render instance.

00:46:47.270 --> 00:46:52.010
This is actually using the
sample code for the transition.

00:46:52.050 --> 00:46:56.040
So you can see there was a swipe
transition that I used right here.

00:46:56.090 --> 00:46:59.670
And I can see all the
images that went into it.

00:47:01.230 --> 00:47:03.890
In the performance log,
the important part for me is

00:47:03.890 --> 00:47:06.340
to see how long does it take.

00:47:06.480 --> 00:47:08.250
Now we see over 4,000 milliseconds.

00:47:08.320 --> 00:47:09.840
That's a long time.

00:47:09.970 --> 00:47:12.710
Well, this is the accumulated time
as long as I was sampling.

00:47:12.720 --> 00:47:15.480
And as I said,
I used the transition selector sample,

00:47:15.480 --> 00:47:17.020
which constantly renders.

00:47:17.020 --> 00:47:22.950
So over the time, that was like spending
4,000 milliseconds in this.

00:47:22.950 --> 00:47:28.370
It processed over 260,000 pixels,
and that gives me a count

00:47:28.370 --> 00:47:29.570
of 61 megapixels per second.

00:47:30.110 --> 00:47:32.960
So that is actually the
information that I can see,

00:47:32.960 --> 00:47:36.070
okay,
how long does this specific filter took.

00:47:37.530 --> 00:47:39.560
So what does this all tell me?

00:47:39.580 --> 00:47:42.220
When you look at the filters,
you first of all notice, OK,

00:47:42.220 --> 00:47:45.840
which one gets really
executed and in which order.

00:47:45.940 --> 00:47:49.000
So when you have more
complex applications,

00:47:49.000 --> 00:47:52.150
you build your chain
from different points.

00:47:52.150 --> 00:47:55.830
You might not really know
what's really in there.

00:47:55.830 --> 00:48:00.230
And there can be a crop before
you actually do the next effect.

00:48:00.230 --> 00:48:00.430
And you wonder, OK,
why is that really not

00:48:00.430 --> 00:48:00.430
showing the effects to the
outside as I wanted to see?

00:48:01.130 --> 00:48:04.560
Second of all,
when you look at how much time is spent,

00:48:04.600 --> 00:48:10.250
not every filter has the same impact.

00:48:10.310 --> 00:48:15.970
So they have definitely different
costs on the graphics card,

00:48:15.970 --> 00:48:15.970
or even if they run in CPU.

00:48:15.970 --> 00:48:15.970
So that depends on the
complexity of the filter.

00:48:16.160 --> 00:48:19.030
And of course,
the image size has a great impact

00:48:19.030 --> 00:48:21.040
on your performance as well.

00:48:21.060 --> 00:48:22.900
Larger image, of course, needs more time.

00:48:23.010 --> 00:48:27.970
So if you have a filter graph
and we have some environment map,

00:48:27.970 --> 00:48:33.690
and this might be you just accidentally
picked a very big image for it,

00:48:33.690 --> 00:48:38.490
although it's not really needed,
your performance will go down.

00:48:38.490 --> 00:48:38.490
And with Quartz Debug,
you can actually see these

00:48:38.490 --> 00:48:38.490
performance lags and fix it.

00:48:39.450 --> 00:48:41.160
So, with that,
I would like to get Ralph back on

00:48:41.160 --> 00:48:43.220
the stage for the closing ceremony.

00:48:43.280 --> 00:48:45.090
Thank you.

00:48:51.110 --> 00:48:52.860
So, with that,
I would like to get Ralph back on

00:48:52.860 --> 00:48:54.920
the stage for the closing ceremony.

00:48:54.920 --> 00:48:56.800
Thank you.

00:49:00.070 --> 00:49:04.660
The DTS guys told me to
fire you all up and go off,

00:49:04.680 --> 00:49:08.700
so you go off and do
something with this stuff.

00:49:08.700 --> 00:49:08.700
So this is the slide.

00:49:08.900 --> 00:49:41.100
[Transcript missing]

00:49:41.750 --> 00:49:43.200
Take advantage of the eyesight.

00:49:43.260 --> 00:49:45.000
So this, I think,
is actually an important

00:49:45.000 --> 00:49:47.770
one for the coming years.

00:49:48.570 --> 00:49:53.360
Essentially, the EyeSight is built in,
in half of our product line today,

00:49:53.360 --> 00:49:54.880
and it's great.

00:49:54.880 --> 00:49:57.160
You can use it as an input device.

00:49:57.160 --> 00:50:01.480
For example, there is this application,
Delicious Library,

00:50:01.480 --> 00:50:05.150
which uses the EyeSight to
scan barcodes of your CDs,

00:50:05.150 --> 00:50:07.000
DVDs, books, and so on.

00:50:07.000 --> 00:50:09.390
And this is a great use of the EyeSight.

00:50:09.690 --> 00:50:16.610
Similarly, you saw in EyeChat, excuse me,
in EyeChat, the background removal,

00:50:16.690 --> 00:50:21.060
the new feature that got added,
and that is actually a core image filter

00:50:21.150 --> 00:50:26.000
that does the image diffing and then
composites a new filter in the back.

00:50:26.720 --> 00:50:31.360
So one example that we experimented
with a while ago was color tracking.

00:50:31.510 --> 00:50:34.360
So I could essentially
wear an orange shirt,

00:50:34.370 --> 00:50:38.830
point the eyesight at me,
and have a Core Image filter,

00:50:38.830 --> 00:50:43.890
which first marks everything as orange,
then finds the center

00:50:43.890 --> 00:50:48.450
point of that object,
and then does something with it.

00:50:48.450 --> 00:50:51.810
So I had a little duck
following me around.

00:50:51.810 --> 00:50:51.810
But you can probably find
a more viable application.

00:50:52.270 --> 00:50:55.880
Also, I'd like to tell you to go
and check out core animation,

00:50:55.890 --> 00:50:57.540
and it's kind of for two reasons.

00:50:57.550 --> 00:51:00.590
One is if you're doing animation, well,
core animation is kind of

00:51:00.700 --> 00:51:01.960
what you should look at.

00:51:01.980 --> 00:51:04.800
And core animation at the
layer object can have core

00:51:04.860 --> 00:51:06.090
image filters attached to it.

00:51:06.180 --> 00:51:09.040
So animating filter effects is very easy.

00:51:09.040 --> 00:51:13.350
You can wire up an LK animation
object directly to an input of

00:51:13.440 --> 00:51:17.050
a filter and make things pulsant
glow and these kind of things.

00:51:17.280 --> 00:51:20.770
And the second thing I would like
to point out is you can expand

00:51:20.860 --> 00:51:25.330
the effects vocabulary of core
animation by building an image unit.

00:51:25.440 --> 00:51:28.740
So if there is a transition effect
that core animation doesn't support,

00:51:28.740 --> 00:51:32.380
but you would really like to see it,
well, write an image unit that does this,

00:51:32.410 --> 00:51:35.580
and then let core animation drive
that image unit for you to do

00:51:35.580 --> 00:51:38.400
that particular transition effect.

00:51:39.850 --> 00:51:43.420
Okay, with that, I would like to point
you where to go next.

00:51:43.690 --> 00:51:46.140
There is the late-night
graphics and media lab starting

00:51:46.140 --> 00:51:48.240
at 6:00 tonight to 10:00.

00:51:48.320 --> 00:51:54.220
Come by and ask as many
questions as you like.

00:51:54.220 --> 00:51:54.220
And then tomorrow,
there is the Core Image lab.

00:51:54.290 --> 00:51:57.890
Okay, with that, I would like to point
you where to go next.

00:51:57.990 --> 00:52:00.600
There is the late-night
graphics and media lab starting

00:52:00.640 --> 00:52:02.720
at 6:00 tonight to 10:00.

00:52:02.810 --> 00:52:09.550
Come by and ask as many
questions as you like.

00:52:09.550 --> 00:52:09.550
And then tomorrow,
there is the Core Image lab.