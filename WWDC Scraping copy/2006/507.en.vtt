WEBVTT

00:00:10.200 --> 00:00:14.180
Welcome to QuickTime Streaming for IT.

00:00:14.180 --> 00:00:14.770
My name is George Cook.

00:00:14.810 --> 00:00:19.270
I'm a consulting engineer for Apple,
and I work in our education group.

00:00:19.390 --> 00:00:23.680
And today, I'm going to introduce a
couple of other speakers.

00:00:23.680 --> 00:00:26.730
But before I do,
I just wanted to mention a class

00:00:26.730 --> 00:00:31.760
that we recently developed,
podcasting and streaming internet media.

00:00:31.760 --> 00:00:35.120
So I did bring the course guide up here.

00:00:35.120 --> 00:00:39.370
It's a three-day hands-on class
offered by our customer training group.

00:00:40.100 --> 00:00:43.000
And it covers a workflow
for streaming media,

00:00:43.000 --> 00:00:47.350
as well as using the podcast server,
as well as a streaming

00:00:47.660 --> 00:00:49.690
server for delivery.

00:00:50.050 --> 00:00:52.390
If you go through the class and
take the certification test,

00:00:52.390 --> 00:00:55.810
you get three credits towards
Apple Certified Systems Administrator

00:00:55.920 --> 00:00:59.590
and more information is
available at that URL.

00:01:00.200 --> 00:01:02.990
So that's a more detailed version
of what we're going to cover today.

00:01:03.100 --> 00:01:06.500
Today we're going to focus
in on some enterprise-level

00:01:06.610 --> 00:01:07.590
deployments of streaming.

00:01:07.600 --> 00:01:08.650
One is by Apple.

00:01:08.710 --> 00:01:11.870
So this is Apple using
our own technology.

00:01:11.870 --> 00:01:15.430
And Steev Dinkins is going to
present our webcast studio,

00:01:15.430 --> 00:01:18.840
which is a very sophisticated
environment for delivering live

00:01:19.100 --> 00:01:23.240
webcasts and also recording those
webcasts for on-demand access.

00:01:23.700 --> 00:01:26.100
And then Dave Schroeder,
this will be his third year here

00:01:26.100 --> 00:01:28.800
at Worldwide Developer Conference,
and he's going to give us an

00:01:28.800 --> 00:01:33.110
update on University of Wisconsin's
Digital Academic Television Network,

00:01:33.120 --> 00:01:38.220
which is an innovative project to
bring television to their IP network

00:01:38.290 --> 00:01:40.860
at the University of Wisconsin.

00:01:41.300 --> 00:01:43.420
So with that,
I'm going to turn this over to Steve,

00:01:43.500 --> 00:01:46.950
and he's going to go through
in detail the webcast studio

00:01:46.960 --> 00:01:50.990
that Apple uses internally.

00:01:54.800 --> 00:01:56.490
Thank you, George.

00:01:56.580 --> 00:01:58.600
Hi.

00:01:58.600 --> 00:02:03.630
Hi, I'm Stev Dinkins,
media producer/engineer at Apple.

00:02:03.880 --> 00:02:07.040
and I'm here to talk to you about the
Webcast Studio System that we custom

00:02:07.040 --> 00:02:09.800
built for Apple for sales training.

00:02:09.800 --> 00:02:14.130
I've been at Apple computers since
2002 with 20 years worth of music

00:02:14.130 --> 00:02:17.550
production and audio engineering
production experience and 15 years

00:02:17.620 --> 00:02:20.950
worth of video web computer and
multimedia production experience,

00:02:20.950 --> 00:02:23.920
ranging from camera
work to cinematography,

00:02:23.920 --> 00:02:26.800
motion graphics, video editing,
DVD authoring, you name it.

00:02:26.800 --> 00:02:31.500
I'm in the creative services within sales
training and we range in productions

00:02:31.500 --> 00:02:35.010
from high-end video to broadcast,
webcasting of course,

00:02:35.010 --> 00:02:38.800
and DVD productions and
print and web publishing.

00:02:38.800 --> 00:02:41.800
All in-house in Apple for sales training.

00:02:41.800 --> 00:02:42.800
On to the webcast.

00:02:42.800 --> 00:02:47.230
So the webcast program was kicked
off in 2002 and initially we were

00:02:47.230 --> 00:02:49.800
using a third-party solution for that.

00:02:49.800 --> 00:02:54.180
And that company got bought and dissolved
and was no longer supporting that

00:02:54.210 --> 00:02:56.800
software and was no longer developing it.

00:02:56.800 --> 00:02:59.990
So we started researching.

00:02:59.990 --> 00:03:03.940
I should also add that software always
had limitations that hindered us,

00:03:03.940 --> 00:03:09.010
such as having presentations that
were just limited to still JPEGs and

00:03:09.010 --> 00:03:13.800
we couldn't do any kind of motion or
anything in that slide presenter window.

00:03:13.850 --> 00:03:19.790
So the research went into
how to replace this system.

00:03:19.800 --> 00:03:24.180
So we went through pretty much
all of the third-party solutions

00:03:24.200 --> 00:03:25.800
for web conferencing and net.

00:03:25.800 --> 00:03:26.800
Actually, I'm sorry.

00:03:26.800 --> 00:03:29.800
We went through actually net
conferencing and webcast meetings.

00:03:29.920 --> 00:03:33.800
And all of them were falling
short in some kind of regard.

00:03:33.800 --> 00:03:37.800
Either they were too complex or
they were overbuilt or underbuilt.

00:03:37.830 --> 00:03:40.260
And they didn't have the
paradigm of broadcast,

00:03:40.260 --> 00:03:42.790
which is the closest to
what we do with webcasts.

00:03:42.830 --> 00:03:47.790
There was also the high costs
involved with those solutions.

00:03:47.870 --> 00:03:51.730
And high costs with setup,
high costs with yearly fees,

00:03:51.840 --> 00:03:55.770
monthly fees, or the worst case scenario,
with per webcast, per user,

00:03:55.790 --> 00:03:55.800
per minute fees.

00:03:55.830 --> 00:03:58.800
And we didn't want to get
locked into those things.

00:03:58.800 --> 00:04:02.950
And we figured if we could take that
money and build something in-house and

00:04:02.990 --> 00:04:05.790
not be locked to those kind of fees,
we'd be winning.

00:04:05.800 --> 00:04:08.800
So we took six months
to develop and research.

00:04:08.800 --> 00:04:12.360
And we found that just using
Apple technology as well as

00:04:12.420 --> 00:04:16.230
third-party hardware and software,
we could develop a system that

00:04:16.230 --> 00:04:17.790
would be suitable for our uses.

00:04:17.800 --> 00:04:20.380
And six months later,
we went live earlier this

00:04:20.380 --> 00:04:21.770
year with that system.

00:04:21.820 --> 00:04:24.800
So hopefully with what
I'm going to show you,

00:04:24.800 --> 00:04:24.800
you get some ideas on how you can use it.

00:04:24.800 --> 00:04:28.610
And hopefully you get some ideas on how
you can use the technology for your own

00:04:28.610 --> 00:04:30.800
purposes or for your clients' purposes.

00:04:31.210 --> 00:04:34.410
So agenda, what I'm covering today,
going over the requirements

00:04:34.410 --> 00:04:37.110
and objectives that led
to the choices we made,

00:04:37.110 --> 00:04:40.480
going over the functionality
of the webcast viewer,

00:04:40.480 --> 00:04:43.070
what the audience sees,
as well as the admin app,

00:04:43.070 --> 00:04:46.100
what we use to configure
and schedule webcasts.

00:04:46.100 --> 00:04:48.600
And then we'll go over
the front-end technology,

00:04:48.600 --> 00:04:53.900
which is behind those two applications,
WebObjects and Apple Server technology,

00:04:53.900 --> 00:04:57.880
as well as the back-end,
which is all video, audio,

00:04:57.960 --> 00:05:02.520
and Apple computer technology,
which you'll see in the studio.

00:05:02.890 --> 00:05:04.560
Also be talking about
software integration.

00:05:04.560 --> 00:05:07.060
We're using a lot of different software,
Apple and third-party,

00:05:07.060 --> 00:05:08.880
working together as a solution.

00:05:08.880 --> 00:05:11.340
And finally, the production workflow.

00:05:11.340 --> 00:05:16.000
How we're using this on a daily
basis to produce webcasts.

00:05:16.010 --> 00:05:18.450
And I'm going to go forward.

00:05:18.460 --> 00:05:22.210
So some of the objectives and
requirements that led to this primarily

00:05:22.210 --> 00:05:24.580
is to train the entire Apple sales force.

00:05:24.620 --> 00:05:27.420
And this is also spilling
into retail soon.

00:05:28.460 --> 00:05:30.730
Of course,
this webcast system is a real-time,

00:05:30.740 --> 00:05:34.830
QuickTime-based video streaming
internet communication system with chat

00:05:34.830 --> 00:05:39.460
functionality going into the studio
for distance learning and training.

00:05:39.460 --> 00:05:42.630
So the cost savings,
if you think about we get audiences

00:05:42.630 --> 00:05:45.680
from 100 to 500 people per webcast.

00:05:45.680 --> 00:05:47.990
Then you think of the
savings in travel time,

00:05:47.990 --> 00:05:50.980
travel costs,
not having to rent out conference spaces,

00:05:51.030 --> 00:05:52.320
hotels, all of that.

00:05:52.320 --> 00:05:53.580
The savings are huge.

00:05:53.580 --> 00:05:57.290
Now multiply that by three
to five times a week,

00:05:57.290 --> 00:05:58.300
monthly.

00:05:58.420 --> 00:05:58.920
Yearly.

00:05:58.920 --> 00:06:01.030
And you can see the
enormous cost savings there.

00:06:01.080 --> 00:06:04.510
And it's been an integral part
in the program since 2002.

00:06:04.520 --> 00:06:06.310
Timeliness.

00:06:06.340 --> 00:06:09.240
We don't have to wait very long to
get communications out to people.

00:06:09.240 --> 00:06:10.670
We don't have to schedule
months in advance.

00:06:10.700 --> 00:06:14.150
We schedule weeks in advance
or maybe a day in advance.

00:06:14.490 --> 00:06:17.220
Minimal user, oh,
computer output streamed real-time.

00:06:17.220 --> 00:06:19.680
This is a huge improvement
over the old system.

00:06:19.680 --> 00:06:21.220
That's what I was alluding to before.

00:06:21.220 --> 00:06:25.190
Before we only had JPEG slides,
and now we have real-time

00:06:25.190 --> 00:06:29.000
computer output streamed to the
audience for keynote transitions,

00:06:29.000 --> 00:06:31.940
animations, builds,
QuickTime movies embedded

00:06:31.940 --> 00:06:34.980
inside of QuickTime,
as well as software demos.

00:06:34.980 --> 00:06:36.300
Anything that's coming
out of the computer,

00:06:36.300 --> 00:06:37.370
we can stream out to the audience.

00:06:38.340 --> 00:06:40.860
Minimal user setup requirements,
we want to make sure that

00:06:40.870 --> 00:06:44.400
this is an easy experience for
people to log into webcasts.

00:06:44.400 --> 00:06:48.110
And so it really fits in with the
same kind of situation that people

00:06:48.110 --> 00:06:51.340
are used to logging into websites
and seeing something immediately.

00:06:53.040 --> 00:06:56.150
We also need a manageable
production workflow.

00:06:56.170 --> 00:07:00.800
In the past 10 years,
I'd say that syncing slides and video,

00:07:00.800 --> 00:07:02.060
you'd think it would be easy.

00:07:02.100 --> 00:07:02.990
It's not.

00:07:03.010 --> 00:07:03.960
It really isn't.

00:07:03.960 --> 00:07:07.490
So this system, an objective was,
how do we make this really easy

00:07:07.490 --> 00:07:08.910
so it's not painful for us?

00:07:09.100 --> 00:07:13.800
We can do a whole lot of other things,
as well as these webcasts.

00:07:13.840 --> 00:07:16.270
So we have minimal setup time.

00:07:16.420 --> 00:07:20.380
We have reliability and a lot
of flexibility with this system.

00:07:21.410 --> 00:07:23.540
And of course,
we're talking about live webcasting,

00:07:23.540 --> 00:07:26.520
but the on-demand processing is also key.

00:07:26.520 --> 00:07:30.150
So you'll see how we have a
workflow that's really simple

00:07:30.210 --> 00:07:35.610
to create on-demand content,
but we can also use the captured standard

00:07:35.610 --> 00:07:38.610
HD and DV video to do post-editing.

00:07:38.620 --> 00:07:41.270
Maybe we can repurpose this
stuff if that's requested,

00:07:41.270 --> 00:07:42.410
as you'll see later.

00:07:42.420 --> 00:07:45.200
So I'm going to go over the
functionality here and show you a

00:07:45.200 --> 00:07:47.100
screenshot of the webcast viewer.

00:07:47.100 --> 00:07:50.080
You can see there's two streams
combined there into one QuickTime movie

00:07:50.080 --> 00:07:51.860
and a chat field at the bottom.

00:07:51.860 --> 00:07:53.680
And I'll go over this a little
bit more in a couple slides.

00:07:53.700 --> 00:07:55.860
And here's a demo of the webcast.

00:07:55.860 --> 00:07:56.410
Welcome.

00:07:56.410 --> 00:07:59.100
Thank you for joining us
today for the post-NAB update.

00:07:59.100 --> 00:08:03.110
Just to underscore that fact,
every major broadcaster throughout

00:08:03.110 --> 00:08:06.640
the world produced a production
on Final Cut Studio last year.

00:08:06.640 --> 00:08:09.670
And not only that,
but every major movie studio also

00:08:09.670 --> 00:08:13.770
released a production that was
based on Final Cut Studio last year.

00:08:13.780 --> 00:08:16.020
Now, if I go over to Audio Effects,

00:08:18.770 --> 00:08:20.500
In the upper right-hand
corner in the pane,

00:08:20.500 --> 00:08:23.750
I'm in my editing pane, and I'll zoom up.

00:08:25.310 --> 00:08:29.030
So within audio effects,
we've added some really

00:08:29.030 --> 00:08:31.050
neat things within iMovie 6.

00:08:32.700 --> 00:08:37.260
As you can see, we've got animations
happening within Keynote.

00:08:37.260 --> 00:08:41.680
We've got a product
manager demoing software.

00:08:42.960 --> 00:08:48.320
And we're thrilled to have this
functionality and easy to manage.

00:08:49.760 --> 00:08:51.210
So I'm going to break
down the viewer here.

00:08:51.220 --> 00:08:52.260
It's simple, but it's powerful.

00:08:52.260 --> 00:08:55.300
We've got video of the presenter
on the left side there.

00:08:55.300 --> 00:09:00.360
It's QuickTime 7H264, 240 by 180 pixels,
approximately 150 kilobits a second.

00:09:00.360 --> 00:09:03.450
Over on the right side,
we've got the larger window with

00:09:03.450 --> 00:09:07.410
the computer output streaming
in real-time at 640 by 384,

00:09:07.520 --> 00:09:09.040
which is a healthy size.

00:09:09.040 --> 00:09:09.760
It's really nice.

00:09:09.760 --> 00:09:11.020
You can see all the print on there.

00:09:11.020 --> 00:09:14.170
People don't have to redo their
slides for this smaller window

00:09:14.170 --> 00:09:15.830
because it's pretty healthy.

00:09:15.830 --> 00:09:18.240
And that's at 200 kilobits a second.

00:09:18.560 --> 00:09:20.900
Now,
the aggregate total of that data rate,

00:09:20.900 --> 00:09:24.540
we've been shocked to see that it
actually goes down to about 150

00:09:24.550 --> 00:09:26.880
kilobits to 200 kilobits total.

00:09:26.880 --> 00:09:31.320
And that's astounding thinking about
the amount of pixels we're pushing there

00:09:31.320 --> 00:09:36.990
at 15 frames a second per video stream
and the quality that we're achieving.

00:09:37.160 --> 00:09:41.030
We've got title graphics on the
left there for the product line

00:09:41.030 --> 00:09:44.520
title or the program title,
as well as the description

00:09:44.520 --> 00:09:46.100
of the webcast and a date.

00:09:46.150 --> 00:09:49.890
And at the bottom there,
we have a chat field that the audience

00:09:49.890 --> 00:09:52.750
can type in questions straight
in real-time to the presenters,

00:09:52.750 --> 00:09:56.180
so presenters can tailor
their presentation towards

00:09:56.220 --> 00:09:57.890
the audience's needs.

00:09:58.890 --> 00:10:00.160
and the requirements are really simple.

00:10:00.160 --> 00:10:04.790
You just need a web browser and
QuickTime 7 and that's Mac or PC.

00:10:04.790 --> 00:10:06.780
And you need broadband
internet connection.

00:10:06.840 --> 00:10:08.920
56K we're not supporting.

00:10:08.920 --> 00:10:09.730
Thank God.

00:10:09.800 --> 00:10:11.220
Okay, so usage.

00:10:11.260 --> 00:10:12.800
It's really easy.

00:10:12.800 --> 00:10:15.760
Users just log in to a front portal URL.

00:10:15.800 --> 00:10:20.140
All they need is a webcast ID and a
passcode and they get that through

00:10:20.140 --> 00:10:26.800
an email invite or on a published
webcast invite on internal web portals.

00:10:26.800 --> 00:10:29.680
And there's an optional three
fields in there for their name,

00:10:29.680 --> 00:10:30.800
email and location.

00:10:30.800 --> 00:10:33.800
That's a really huge
value add for presenters.

00:10:33.800 --> 00:10:37.030
They can follow up with people with
questions that they didn't have

00:10:37.030 --> 00:10:40.640
time to answer during the webcast
or if they wanted to take a question

00:10:40.710 --> 00:10:42.800
offline one-on-one with somebody.

00:10:42.800 --> 00:10:44.550
They can do that.

00:10:45.460 --> 00:10:47.080
This is on to the webcast admin.

00:10:47.080 --> 00:10:51.900
This is the application we use for
scheduling and configuring webcasts.

00:10:51.900 --> 00:10:54.510
I'll go over some of the features
really quickly on what that's all about.

00:10:54.520 --> 00:10:57.580
So as soon as a webcast
is booked and scheduled,

00:10:57.580 --> 00:11:00.510
we can go and create
that webcast with a date,

00:11:00.510 --> 00:11:05.700
broadcast ID, passcode, time, title,
presenter information, etc.

00:11:05.700 --> 00:11:08.900
We also have a field for
QuickTime URL that can be

00:11:08.900 --> 00:11:12.660
a unique URL per webcast,
and we also have dimensions we

00:11:12.660 --> 00:11:14.980
can request or define in there.

00:11:14.980 --> 00:11:18.060
Because if it's widescreen
or 4 by 3 aspect ratio,

00:11:18.060 --> 00:11:19.720
we can accommodate that.

00:11:19.740 --> 00:11:22.120
Next is the session info.

00:11:22.120 --> 00:11:24.540
We're able to see the number
of users who have logged in.

00:11:24.540 --> 00:11:27.020
That's imperative for us to know
that everything's working right.

00:11:27.020 --> 00:11:28.380
We see the numbers grow, we're happy.

00:11:28.380 --> 00:11:31.630
We can also see who has signed in,
especially if they filled out

00:11:31.630 --> 00:11:33.440
those optional three fields.

00:11:33.440 --> 00:11:36.010
We also have a transcript
of that incoming chat,

00:11:36.010 --> 00:11:39.470
and I'm going to show you
screenshots of what that looks like.

00:11:39.510 --> 00:11:41.500
So we've got a screenshot
of the session information.

00:11:41.500 --> 00:11:44.960
As you can see,
we've got the name of the session.

00:11:44.980 --> 00:11:47.590
The user location and the email address.

00:11:47.600 --> 00:11:51.040
And here's a screenshot
of the chat transcript.

00:11:51.040 --> 00:11:54.240
You can see the name of the user
location and the chat that they entered.

00:11:54.240 --> 00:11:57.400
Now, both of these,
the session and the chat transcript,

00:11:57.400 --> 00:12:02.510
we export out to a text file and we give
that out to presenters after the webcast

00:12:02.530 --> 00:12:03.740
so they have a record of everything.

00:12:05.780 --> 00:12:08.620
On to the front-end architecture,
which is behind those two

00:12:08.620 --> 00:12:10.160
applications you just saw.

00:12:10.160 --> 00:12:12.820
And it's all built on
Apple server technology.

00:12:12.820 --> 00:12:16.620
And that viewer admin is custom-coded
web objects applications,

00:12:16.620 --> 00:12:20.540
custom-coded in-house by a guru
mastermind by the name of Russ White.

00:12:20.540 --> 00:12:21.960
Thank God for him.

00:12:21.960 --> 00:12:22.980
He's a mastermind.

00:12:22.980 --> 00:12:25.190
It's incredible what he's done with this.

00:12:25.200 --> 00:12:28.720
So two XServes are driving
those two applications,

00:12:28.720 --> 00:12:32.360
one for the webcast viewer
and one for the admin app.

00:12:33.120 --> 00:12:35.670
And we're also deploying XServe,
XServe RAID,

00:12:35.720 --> 00:12:40.280
and XSAN for capturing the HD and
DV video to centralized storage.

00:12:40.280 --> 00:12:42.580
And that's been a tremendous lifesaver.

00:12:42.580 --> 00:12:46.740
Running fiber channel from
the server room to the studio.

00:12:46.740 --> 00:12:48.850
And this is really brief.

00:12:48.860 --> 00:12:51.190
So I'm going on to the
back-end architecture,

00:12:51.200 --> 00:12:53.350
which I'll go into more detail on this.

00:12:53.360 --> 00:12:56.460
So there's a screenshot
of the webcast studio,

00:12:56.460 --> 00:12:58.140
modest and powerful.

00:12:58.140 --> 00:13:02.620
There's a shot of a webcast in session.

00:13:03.120 --> 00:13:05.780
There's another screenshot
there showing the mixer.

00:13:05.780 --> 00:13:08.460
And there's from the presenter side.

00:13:08.460 --> 00:13:12.000
We got three machines
there for keynote presos.

00:13:12.000 --> 00:13:18.460
And then there's a computer on the right
side there for seeing incoming chat.

00:13:18.890 --> 00:13:21.380
So there's a diagram of the system.

00:13:21.380 --> 00:13:25.390
I definitely needed to put this
in a visual form in order to even

00:13:25.470 --> 00:13:27.800
configure or wire this thing up.

00:13:27.800 --> 00:13:29.580
It looks deceptively simple to me now.

00:13:29.580 --> 00:13:31.790
I don't know about you, but it's complex.

00:13:33.210 --> 00:13:36.080
Okay, so on to the video gear,
breaking this down into pieces.

00:13:36.170 --> 00:13:37.880
Video gear, audio gear, and computers.

00:13:37.880 --> 00:13:38.980
So first, video.

00:13:38.980 --> 00:13:42.540
We've got three standard def cameras,
various video sources.

00:13:42.540 --> 00:13:45.270
We've got a graphics powerbook,
actually now MacBook.

00:13:45.280 --> 00:13:48.720
And that's running CG or
titles into the system.

00:13:48.910 --> 00:13:52.880
We also have a DV tape deck for remote
presenters that might be recording

00:13:52.880 --> 00:13:56.500
their presentation remotely and
sending out that DV tape to us so we

00:13:56.500 --> 00:13:58.390
could feed it into the webcast system.

00:13:58.400 --> 00:14:00.490
All those sources are
going to a video switcher,

00:14:00.490 --> 00:14:02.630
so we can switch between
any of those sources.

00:14:02.640 --> 00:14:05.450
And we have preview monitors so
we can see any of those sources

00:14:05.450 --> 00:14:07.440
independently of the program output.

00:14:07.440 --> 00:14:10.080
On to the audio gear,
we have several microphones,

00:14:10.100 --> 00:14:12.480
computer audio from
the presenter machines,

00:14:12.490 --> 00:14:16.080
as well as a phone interface for
remote presenters or interviews.

00:14:16.080 --> 00:14:17.580
And as well as an iPod.

00:14:17.580 --> 00:14:21.760
We have iPod music or music
playing before the webcast starts.

00:14:21.760 --> 00:14:25.370
And it's not just to be pretty,
it's so people know that they've logged

00:14:25.380 --> 00:14:28.160
in and something's happening there,
it's successful.

00:14:28.160 --> 00:14:33.160
And it gives us a point of reference for
establishing integrity on the stream.

00:14:33.160 --> 00:14:36.460
We have headphone
monitor and room speaker,

00:14:36.460 --> 00:14:40.160
so we can hear the remote
presenter on the phone.

00:14:40.160 --> 00:14:43.150
And on to...

00:14:44.930 --> 00:14:48.240
Streaming machines, actually.

00:14:48.240 --> 00:14:48.900
That's a bummer.

00:14:48.900 --> 00:14:50.010
A slide is missing.

00:14:50.020 --> 00:14:55.640
I'm going to refer to the photo here,
because that's what I'm talking about.

00:14:55.640 --> 00:14:59.640
So on the right here-- it's almost
chopped off-- there's a chat monitor,

00:14:59.640 --> 00:15:03.540
as I said before, where we can see the
incoming chat coming in.

00:15:03.540 --> 00:15:06.660
And that's using iChat,
and it's using Jabber Server to relay

00:15:06.660 --> 00:15:10.280
all those messages from the webcast
viewer from all the people into the

00:15:10.290 --> 00:15:12.510
studio and seeing it right there.

00:15:12.520 --> 00:15:16.580
We also have the presenter machines,
MacBook Pros.

00:15:16.580 --> 00:15:19.300
And usually,
we just have one keynote prezo

00:15:19.320 --> 00:15:22.380
pushed via Apple Remote Desktop to
all those machines.

00:15:22.380 --> 00:15:27.260
And we have this exact clicker,
and we advance slides on all

00:15:27.320 --> 00:15:28.560
three machines simultaneously.

00:15:28.560 --> 00:15:31.950
So we'd have people spread out,
and they can still see the keynote.

00:15:32.080 --> 00:15:34.270
We have a VGA switcher
at the bottom there.

00:15:34.300 --> 00:15:37.460
So if we wanted to configure it
so we have a presenter machine

00:15:37.460 --> 00:15:40.000
and a software demo machine,
we can switch between those or

00:15:40.080 --> 00:15:42.510
have different prezos on all
three if they didn't combine them.

00:15:42.520 --> 00:15:44.120
advance.

00:15:44.370 --> 00:15:46.660
So, where is that VGA switcher going?

00:15:46.660 --> 00:15:50.340
It's feeding that computer
signal into an HD scan converter,

00:15:50.430 --> 00:15:54.920
converting it into an HD video signal.

00:15:55.230 --> 00:15:56.190
and David Koehn.

00:15:56.200 --> 00:15:57.200
But you can guess where
it's going from there.

00:15:57.200 --> 00:15:58.690
It's going into a streaming machine.

00:15:58.710 --> 00:16:03.810
So we have a Power Mac G5 with a
Kona card for HD input and that's

00:16:03.810 --> 00:16:08.960
streaming out to Akamai to reflect
outside the firewall to the world.

00:16:08.960 --> 00:16:13.190
We also have another Power Mac G5
that's taking the presenter video

00:16:13.190 --> 00:16:18.940
off that switcher and it's converting
it to a stream out to Akamai as well.

00:16:18.940 --> 00:16:21.270
So there's the two streams,
computer output and the

00:16:21.270 --> 00:16:22.520
video of the presenter.

00:16:24.530 --> 00:16:26.010
So capture machines.

00:16:26.030 --> 00:16:30.100
The question is why do capture when
you have encoded streams that are

00:16:30.100 --> 00:16:33.830
already there and you could just go and
trickle those and record them to disk?

00:16:33.860 --> 00:16:36.030
Well, in our opinion,
that's not good enough.

00:16:36.030 --> 00:16:38.010
We're Apple and we want
to set a standard here.

00:16:38.010 --> 00:16:43.150
So we're using compressor on the HD and
DV so we could get better quality there.

00:16:43.150 --> 00:16:46.680
It also enables us to do
post-processing and final cut if

00:16:46.680 --> 00:16:48.780
we wanted to do editing on that.

00:16:48.780 --> 00:16:52.140
You wouldn't be able to do
that with the kind of ease and

00:16:52.140 --> 00:16:54.480
quality if you just had H.268.

00:16:54.500 --> 00:16:58.800
encoded video QuickTime movies.

00:16:59.530 --> 00:17:05.360
So that's all captured to XAN,
which again is beautiful workflow.

00:17:05.360 --> 00:17:08.000
On to software integration,
we're using a number of software

00:17:08.000 --> 00:17:10.740
applications all working together.

00:17:10.740 --> 00:17:13.970
The viewer and the admin,
as I said before, is Apple Web Objects,

00:17:13.970 --> 00:17:15.180
custom coded.

00:17:15.220 --> 00:17:19.080
Streaming, we're using VeriSoftware
Wirecast and primarily,

00:17:19.080 --> 00:17:20.260
well there's a number of reasons.

00:17:20.260 --> 00:17:21.920
We're cropping prior to streaming.

00:17:21.920 --> 00:17:24.700
DV has the infamous black
bars on the left and right.

00:17:24.700 --> 00:17:25.870
We get rid of those.

00:17:25.870 --> 00:17:28.540
And the HD signal usually has
a little border around that.

00:17:28.540 --> 00:17:30.840
We crop it out,
clean it up and stream it.

00:17:30.840 --> 00:17:33.540
KonaCard Aware,
Wirecast can see the KonaCards.

00:17:33.540 --> 00:17:35.780
It's a beautiful thing.

00:17:35.780 --> 00:17:39.060
And we're able to do source
switching with Wirecast.

00:17:39.060 --> 00:17:42.480
So oftentimes,
presenters are messing around with slides

00:17:42.490 --> 00:17:45.790
five minutes before we go live and we
don't want the audience to see that.

00:17:45.810 --> 00:17:50.180
So we switch out to a title
graphic or switch to black.

00:17:50.320 --> 00:17:52.200
Capturing, we're using Final Cut Pro,
of course.

00:17:52.310 --> 00:17:55.700
Capturing straight to XSAN,
the HD and DV video.

00:17:55.700 --> 00:17:58.940
And for post-production,
we're using Final Cut Pro to

00:17:58.940 --> 00:18:03.080
export ref movies and using
Compressor to do the final encode.

00:18:03.080 --> 00:18:05.360
So, packaging.

00:18:05.360 --> 00:18:08.260
Everybody's probably, well,
some people are probably wondering,

00:18:08.260 --> 00:18:10.500
how are we packaging the
two streams together?

00:18:10.500 --> 00:18:13.050
And we're using TotallyHips
LiveStage to do that.

00:18:13.140 --> 00:18:17.800
So, two streams and a graphic
element combined together for an

00:18:17.800 --> 00:18:20.640
embedded webcast viewer for live.

00:18:20.640 --> 00:18:23.490
And for on-demand,
we're also using LiveStage for

00:18:23.500 --> 00:18:25.690
creating the on-demand version.

00:18:25.700 --> 00:18:28.020
So,
the Compressor encoded QuickTime movies,

00:18:28.020 --> 00:18:30.130
just tie those together, and it's done.

00:18:30.140 --> 00:18:31.920
So, production workflow.

00:18:31.920 --> 00:18:33.120
You've seen the behind-the-scenes.

00:18:33.120 --> 00:18:34.070
You've seen the technology.

00:18:34.080 --> 00:18:37.510
How are we using this to produce
webcasts on a daily basis?

00:18:37.520 --> 00:18:39.860
Well, from the start,
it's been planned to be

00:18:39.860 --> 00:18:41.240
strategically simple.

00:18:42.400 --> 00:18:45.070
So, live,
we just prep the QuickTime movie with

00:18:45.070 --> 00:18:47.160
a unique graphic and a unique name.

00:18:47.160 --> 00:18:50.050
Get the keynote presos
pushed out to the MacBooks,

00:18:50.050 --> 00:18:53.020
lights, camera, decks, computers, iPod.

00:18:53.020 --> 00:18:53.920
Get all that ready.

00:18:53.920 --> 00:18:57.220
Begin the streams
simultaneously to achieve sync.

00:18:57.220 --> 00:19:00.790
And test those streams for sync
integrity and audio-video integrity.

00:19:00.800 --> 00:19:03.740
Begin capturing machines and go live.

00:19:03.760 --> 00:19:06.040
And the post is even simpler.

00:19:06.040 --> 00:19:10.160
So, we use Final Cut to export
out synced HD and DV,

00:19:10.240 --> 00:19:12.180
the in and out points.

00:19:12.400 --> 00:19:14.850
Export those out as two ref movies.

00:19:14.900 --> 00:19:18.400
Throw that into Compressor
and encode to H264.

00:19:18.400 --> 00:19:21.380
And then take those movies and
combine them together with LiveStage

00:19:21.400 --> 00:19:25.400
and post it to internal or external
websites for on-demand viewing.

00:19:25.400 --> 00:19:28.920
In conclusion,

00:19:29.140 --> 00:19:32.460
We had a lot of needs that we knew
from the last three and a half years

00:19:32.460 --> 00:19:37.160
using a product that kind of worked,
but it really wasn't anything

00:19:37.410 --> 00:19:38.660
that was going to wow anybody.

00:19:38.660 --> 00:19:42.180
So we took all of the,
and we had a lot of customer or

00:19:42.180 --> 00:19:45.060
client complaints from the audience.

00:19:45.120 --> 00:19:49.510
Took all of that knowledge and research
and plighted towards creating our own

00:19:49.510 --> 00:19:53.430
system in-house with Apple technology
and third-party hardware and

00:19:53.430 --> 00:19:57.280
software that was engineered,
tested, deployed.

00:19:57.980 --> 00:20:01.880
And right off the bat,
the audience was resounding applause.

00:20:01.880 --> 00:20:05.610
Before, we had complaints every single
webcast of slides not coming in,

00:20:05.610 --> 00:20:08.160
not updating, not being in sync,
whatever.

00:20:08.160 --> 00:20:08.870
That's all gone.

00:20:08.880 --> 00:20:12.540
Webcast adoption,
we're at an all-time high for booking

00:20:12.540 --> 00:20:14.720
webcasts up to five days a week.

00:20:14.780 --> 00:20:17.560
The keynote drop-in
is an awesome feature.

00:20:17.560 --> 00:20:21.240
Presenters don't have to dumb down their
slides or they don't have to alter them.

00:20:21.240 --> 00:20:24.260
They can just bring in their slide deck,
how they're used to presenting it,

00:20:24.280 --> 00:20:26.590
and there's no limitations
on the system for that.

00:20:28.100 --> 00:20:29.370
and software demos.

00:20:29.450 --> 00:20:32.540
We've had product managers in
demoing everything from iLife

00:20:32.540 --> 00:20:33.950
to the pro apps like Shake.

00:20:34.000 --> 00:20:39.920
So expectations have been blown away on
this thing and it's been a lifesaver.

00:20:39.920 --> 00:20:42.700
We're able to crank these things
out and it doesn't bog us down.

00:20:42.700 --> 00:20:45.320
We're able to do a lot more creative
things within the department.

00:20:45.320 --> 00:20:48.720
And this technology is just super cool.

00:20:48.720 --> 00:20:52.570
Seeing video, audio, server, software,
computers all working

00:20:52.570 --> 00:20:54.820
together to achieve this goal.

00:20:54.820 --> 00:20:59.520
And I have to mention QuickTime 7
being at the heart of this because

00:20:59.520 --> 00:21:03.070
without the efficiency and the
quality of QuickTime 7 H.264,

00:21:03.070 --> 00:21:04.900
there's no way we would
have tempted this.

00:21:07.170 --> 00:21:09.820
So that's it.

00:21:09.820 --> 00:21:11.340
And I'm going to hand it over to Dave.

00:21:11.340 --> 00:21:15.290
So if you're blown away with that,
just wait to see what

00:21:15.320 --> 00:21:16.500
Dave has in store for you.

00:21:16.520 --> 00:21:18.980
Thanks a lot, Steve.

00:21:21.970 --> 00:21:25.760
Well, I have to say that Apple's
webcasting stuff is really cool.

00:21:25.760 --> 00:21:29.930
University of Wisconsin's
actually done a webcast through

00:21:29.930 --> 00:21:31.480
their webcast studio before,
too.

00:21:31.480 --> 00:21:35.540
And we had really good results with that.

00:21:35.560 --> 00:21:36.420
So I'm Dave Schroeder.

00:21:36.520 --> 00:21:38.780
I'm a systems engineer at
the University of Wisconsin.

00:21:38.780 --> 00:21:44.230
And today we're going to be
talking about an IP-based video

00:21:44.230 --> 00:21:47.810
delivery system that we developed.

00:21:48.960 --> 00:21:51.980
And this has been something
that I've talked about here at

00:21:51.980 --> 00:21:53.740
WWDC for the last two years.

00:21:53.740 --> 00:21:55.620
So this is our third time
presenting this here.

00:21:55.620 --> 00:22:01.580
And we started this off as a pilot,
and this turned into a production service

00:22:01.580 --> 00:22:06.570
that has been serving the campus for the
last two and a half years and is going

00:22:06.570 --> 00:22:09.400
to be really expanding going forward.

00:22:09.400 --> 00:22:13.100
So some of you who have
heard me talk before,

00:22:13.100 --> 00:22:18.520
some of this stuff is going to
seem like you've heard it before,

00:22:18.620 --> 00:22:19.550
and that's because you have.

00:22:19.610 --> 00:22:22.440
But for the benefit of those who haven't,
we'll just briefly touch

00:22:22.440 --> 00:22:23.400
on some of these things.

00:22:23.500 --> 00:22:28.100
So we had been operating a cable
television infrastructure that was using

00:22:28.100 --> 00:22:31.100
traditional coaxial cable for years.

00:22:31.100 --> 00:22:34.580
And we actually have two,
one that was called the residential

00:22:34.580 --> 00:22:38.220
television network that delivered
a full complement of normal

00:22:38.220 --> 00:22:40.820
cable channels to our dorms,
housing,

00:22:41.030 --> 00:22:43.440
some of our remote housing locations,
but this was all

00:22:43.440 --> 00:22:44.890
university-owned housing.

00:22:45.500 --> 00:22:48.480
And it's something called the
academic television network.

00:22:48.480 --> 00:22:52.690
Which was a network that we
ran on campus that had some

00:22:52.690 --> 00:22:54.480
specific university content.

00:22:54.480 --> 00:22:58.550
So we had channels that the colleges
and departments and different university

00:22:58.550 --> 00:22:59.820
units could actually put on it.

00:23:00.210 --> 00:23:05.200
And then we had some
just local cable content.

00:23:05.360 --> 00:23:08.920
So we had a selection of cable
television channels available on it too.

00:23:08.920 --> 00:23:13.250
And as we were going forward,
we wanted to explore what

00:23:13.250 --> 00:23:18.340
options we had for transitioning
this to an IP-based system.

00:23:18.340 --> 00:23:21.680
And it turned out that after
everything we went through,

00:23:22.000 --> 00:23:25.880
Apple server and software
technologies were a good fit

00:23:26.210 --> 00:23:28.340
for delivering this solution.

00:23:28.340 --> 00:23:31.250
And one of the big things
that was important to us

00:23:31.250 --> 00:23:33.220
was being standards-based.

00:23:33.490 --> 00:23:35.400
So a little bit about the
University of Wisconsin.

00:23:35.400 --> 00:23:40.990
We're, University of Wisconsin-Madison
is one of 26 UW system schools.

00:23:41.110 --> 00:23:43.160
We're the largest,
we're the flagship campus,

00:23:43.160 --> 00:23:45.520
we've got a lot of people,
we have a lot of buildings,

00:23:45.620 --> 00:23:48.240
and we have a pretty big
central IT component,

00:23:48.240 --> 00:23:51.770
but that only represents about a
quarter of the IT staff on campus.

00:23:51.770 --> 00:23:54.540
So we're very decentralized
when it comes to IT.

00:23:54.540 --> 00:23:59.360
But one thing that we were
centralized on was our network.

00:23:59.460 --> 00:24:02.960
And that's one of the things
we leveraged going forward.

00:24:03.400 --> 00:24:06.940
So we already have a lot of
Apple technologies that we use,

00:24:06.970 --> 00:24:11.630
like XServe, RAID, XServes and whatnot
in mixed environments.

00:24:11.640 --> 00:24:16.470
In the center picture there you see some
suns mixed in with some Apple equipment.

00:24:17.950 --> 00:24:22.630
And because we already were
using Apple technologies,

00:24:22.800 --> 00:24:26.360
we were fortunate to be able to have
some of the decision makers on campus

00:24:26.440 --> 00:24:27.870
consider this as a solution too.

00:24:28.040 --> 00:24:34.280
So this is what we're
going to talk about today.

00:24:35.880 --> 00:24:39.130
I already talked a little bit about ATN.

00:24:39.180 --> 00:24:43.340
And it turns out that one of the
hardest things to do to deploy this

00:24:43.340 --> 00:24:46.100
system wasn't the technical part.

00:24:46.230 --> 00:24:53.270
It was actually getting an agreement
with a content provider to be able to

00:24:53.610 --> 00:24:56.600
Provide channels over an IP network.

00:24:56.600 --> 00:24:58.830
And that's something that a
lot of people really balk at,

00:24:58.970 --> 00:25:00.820
and that's something that
our cable operator was a

00:25:00.820 --> 00:25:02.260
little bit skittish about too.

00:25:02.260 --> 00:25:05.810
But we used the agreement that we
had with our cable operator where

00:25:05.810 --> 00:25:10.030
we're providing this selection of
channels on our old academic network.

00:25:10.140 --> 00:25:12.860
That was the network we ran
ourselves as the basis for

00:25:13.260 --> 00:25:14.830
putting them on our IP network.

00:25:14.910 --> 00:25:17.860
We kind of made the argument
that we were already distributing

00:25:17.860 --> 00:25:19.770
these things on a coaxial network.

00:25:19.990 --> 00:25:23.790
We just want to change the media
that we're using to distribute them.

00:25:23.800 --> 00:25:26.840
And it's kind of interesting
to look at the history of

00:25:26.890 --> 00:25:28.830
what brought us to this point.

00:25:28.980 --> 00:25:32.560
So those of you who have been in
IT and networking for a while will

00:25:32.560 --> 00:25:35.020
kind of appreciate the history here.

00:25:35.020 --> 00:25:40.830
And when we started out back in 1980,
and that was before my time

00:25:40.830 --> 00:25:45.330
at the university or really
any kind of school at all,

00:25:47.510 --> 00:25:54.140
we started out with serial connections to
the UNIVAC 1108 in the academic computing

00:25:54.140 --> 00:25:58.400
center on campus and quickly realized
that the requests for connections to this

00:25:58.450 --> 00:26:02.070
would fill all the available conduits
in the computer science building.

00:26:02.120 --> 00:26:07.440
So we went to an RF based
system that was very similar

00:26:07.440 --> 00:26:09.320
to a cable television system.

00:26:09.370 --> 00:26:13.030
And it didn't take long for
departments to start asking us if

00:26:13.030 --> 00:26:17.400
they could also share that network
for video purposes as well.

00:26:17.500 --> 00:26:21.360
And then the network grew and
evolved over time until we

00:26:21.410 --> 00:26:24.450
got to where we are today,
which is a 10 gig ethernet backbone.

00:26:24.460 --> 00:26:27.540
And that's the basis for what we
call the 21st century network,

00:26:27.540 --> 00:26:34.320
which was funded in part by a very
generous donation from John Morgridge,

00:26:34.370 --> 00:26:38.130
who's the chairman of
Cisco Systems and also a UW alum.

00:26:38.860 --> 00:26:44.430
And the 21st Century Network was
really our answer to one of the

00:26:44.430 --> 00:26:49.510
greatest networking challenges we face,
which is how to face exponentially

00:26:49.510 --> 00:26:52.740
increasing bandwidth without
exponentially increasing budgets.

00:26:52.740 --> 00:27:00.980
And also to manage provisioning a
network to 30 major departments,

00:27:00.980 --> 00:27:04.350
30 departmental lands
that go along with them,

00:27:04.500 --> 00:27:07.330
and then a whole slew of smaller
departments and units and

00:27:07.620 --> 00:27:11.210
remote research stations and
all sorts of different things.

00:27:11.510 --> 00:27:13.840
And so these were our solutions.

00:27:13.840 --> 00:27:17.790
And the bottom line here
is that we wanted to

00:27:18.200 --> 00:27:22.640
Converge everything to IP,
which meant getting

00:27:22.760 --> 00:27:29.190
rid of things like IPX,
AppleTalk, which we finally turned off

00:27:29.380 --> 00:27:31.050
actually just a few weeks ago.

00:27:31.790 --> 00:27:34.090
And...

00:27:34.530 --> 00:27:38.210
Also, kind of just gathering together,
reining in all the different

00:27:38.220 --> 00:27:41.170
management models people were using
on campus for managing the network,

00:27:41.250 --> 00:27:44.440
centralizing those,
but still delegating the ability for

00:27:44.530 --> 00:27:46.460
people to administer the network.

00:27:46.490 --> 00:27:49.360
And use as many automated
tools as possible.

00:27:49.360 --> 00:27:52.580
And one of the big things we did
was we changed the revenue model.

00:27:52.580 --> 00:27:56.570
The old model was based on bandwidth,
so we had people running entire buildings

00:27:56.610 --> 00:27:59.360
off of half-duplexed 10 megabit Ethernet.

00:27:59.360 --> 00:28:02.440
And that was fine because all their
people were doing was checking

00:28:02.440 --> 00:28:05.190
email and browsing the web,
and they didn't see any reason

00:28:05.190 --> 00:28:06.650
to pay anything more for it.

00:28:06.820 --> 00:28:11.450
And we decided that it was an
important thing to make high-speed,

00:28:11.450 --> 00:28:17.740
high-performance managed network access
ubiquitous across the entire campus.

00:28:17.740 --> 00:28:21.180
So that it wasn't a budget decision
that determined what kind of

00:28:21.180 --> 00:28:24.820
bandwidth people had and thus what
kind of capabilities people had

00:28:24.820 --> 00:28:26.920
for things like video conferencing.

00:28:26.920 --> 00:28:29.320
And some of the fancy newsletters.

00:28:29.360 --> 00:28:30.370
We had a couple of people
who were using the Internet,

00:28:30.370 --> 00:28:31.700
and they were using the Internet for
a lot of different reasons.

00:28:31.700 --> 00:28:31.700
One of the things that we did was we
had a lot of people who were using the

00:28:31.700 --> 00:28:31.700
Internet for a lot of different reasons.

00:28:31.820 --> 00:28:35.530
And this means we can also afford to
upgrade the network as time goes on,

00:28:35.530 --> 00:28:38.700
because this is a cost
that we assessed ongoing.

00:28:38.700 --> 00:28:44.500
And one of the other critical things for
the video stuff I'm going to be talking

00:28:44.580 --> 00:28:47.740
about today was support for IP multicast.

00:28:48.260 --> 00:28:54.540
That essentially allows one host
to deliver something to many hosts

00:28:55.000 --> 00:28:58.790
with only the equivalent impact
on the network of one stream.

00:28:58.890 --> 00:29:03.010
So as more and more hosts are added,
they just listen in and it's kind

00:29:03.010 --> 00:29:04.400
of like a tree branching out.

00:29:04.470 --> 00:29:08.000
But there's not a separate
broadcast or an additional load on

00:29:08.000 --> 00:29:11.800
the server or whatever the source
is for each additional broadcast.

00:29:11.890 --> 00:29:15.240
And for more information,
multicast.internet2.edu

00:29:15.260 --> 00:29:16.740
is a good place to start.

00:29:16.890 --> 00:29:20.590
And this is a little diagram of
essentially what multicast means.

00:29:20.700 --> 00:29:24.300
So A here would be a server
and in a unicast model,

00:29:24.300 --> 00:29:28.000
if you have three clients listening,
there are three streams that go out.

00:29:28.100 --> 00:29:30.090
And there's two clients
behind that R3 route,

00:29:30.090 --> 00:29:33.600
you know, which could be a router or
other network device there.

00:29:33.670 --> 00:29:38.470
It has to have two streams going to it or
20 or however many things are behind it.

00:29:38.770 --> 00:29:42.620
In a multicast model,
there is only one stream going out on

00:29:42.620 --> 00:29:45.390
any given branch to support clients.

00:29:45.400 --> 00:29:49.100
And if there are no clients
listening on a particular branch,

00:29:49.100 --> 00:29:51.360
then there's nothing there at all.

00:29:51.580 --> 00:29:55.180
So that's the difference
between unicast and multicast,

00:29:55.190 --> 00:29:57.570
and that was really important for us.

00:29:57.800 --> 00:32:47.900
[Transcript missing]

00:32:48.090 --> 00:32:52.170
We also are able to reach other
clients other than Mac OS and Windows.

00:32:52.190 --> 00:32:57.300
With open source products like VLC,
we can serve clients that

00:32:57.300 --> 00:33:01.690
are running on Linux,
Solaris, and anywhere that product runs.

00:33:01.740 --> 00:33:04.740
And cost was another important factor.

00:33:04.740 --> 00:33:07.520
When we were first rolling this out,
and of course costs have come

00:33:07.520 --> 00:33:09.860
down a lot on various products
over the last three years,

00:33:09.860 --> 00:33:12.650
but when we were first rolling this out,
some of these individual

00:33:12.820 --> 00:33:17.540
hardware encoders were upwards
of $25,000 and even $50,000.

00:33:18.000 --> 00:33:27.280
And we were able to get a lot of
these products to run on Linux,

00:33:27.280 --> 00:33:36.870
and we were able to get a lot of
these products to run on Windows,

00:33:37.040 --> 00:33:47.460
and we were able to get a lot of these
products to run on Mac OS X Server.

00:33:48.130 --> 00:33:51.110
And now, today,
we can have multiple streams on

00:33:51.110 --> 00:33:55.220
a single server as the computing
horsepower has increased.

00:33:55.220 --> 00:33:58.660
And this is even more true, I mean,
I said this when I first

00:33:58.660 --> 00:34:01.990
talked about this in '04,
and this is more true today.

00:34:02.000 --> 00:34:07.880
The cost of the XSERVs have either
come down or their performance has gone

00:34:07.940 --> 00:34:10.960
up and we get more bang for the buck.

00:34:10.960 --> 00:34:15.640
And so the software, QuickTime Player,
free, QuickTime Broadcaster, free,

00:34:15.650 --> 00:34:20.030
QuickTime Streaming Server included,
an OS X server.

00:34:20.360 --> 00:34:24.040
A lot of these QuickTime capabilities
that are just kind of a bonus that

00:34:24.140 --> 00:34:28.100
come along for using QuickTime,
like the QuickTime text track, skins,

00:34:28.100 --> 00:34:31.400
which allow for things
like custom interfaces,

00:34:31.410 --> 00:34:34.450
which we actually don't use right
now because we have a separate

00:34:34.450 --> 00:34:38.240
application for playing channels
that I'm going to show you later.

00:34:38.240 --> 00:34:41.620
QtKit on the Mac OS X platform
allows us to really easily

00:34:41.620 --> 00:34:44.000
write these custom applications.

00:34:45.180 --> 00:34:47.590
And because of the
granularity of the system,

00:34:48.010 --> 00:34:51.160
because it's not some kind of a
turnkey or dedicated solution,

00:34:51.160 --> 00:34:55.920
we can plug different pieces in
and change around how we do things.

00:34:55.920 --> 00:34:57.790
And it allows us to
do some of the really,

00:34:57.860 --> 00:35:00.890
I think, innovative things that
you're going to see later.

00:35:04.170 --> 00:35:07.770
And so what we started with when
we initially deployed this pilot,

00:35:07.800 --> 00:35:11.200
and it's kind of interesting because our
production system is actually running

00:35:11.200 --> 00:35:15.500
on the same equipment that it has been
since the first time I talked about this.

00:35:15.500 --> 00:35:22.420
So we have a head node that's responsible
for the web front end for the service,

00:35:22.430 --> 00:35:27.530
which is the primary way customers visit
the service to start watching TV if

00:35:27.540 --> 00:35:30.090
they're not using the player application.

00:35:31.540 --> 00:35:34.970
This node also serves up the
function of monitoring the

00:35:34.970 --> 00:35:41.550
streaming nodes with server monitor,
and it has its own local monitor keyboard

00:35:41.550 --> 00:35:44.170
and mouse for local administration.

00:35:44.180 --> 00:35:46.480
And then we have a bunch of
XServe cluster nodes that are

00:35:46.480 --> 00:35:47.960
actually our streaming nodes.

00:35:47.960 --> 00:35:51.980
They run QuickTime Broadcaster
and our services for doing

00:35:52.420 --> 00:35:56.480
closed captioning decoding,
closed captioning archival,

00:35:56.480 --> 00:36:00.570
and of course the video and
audio streams themselves.

00:36:01.480 --> 00:36:04.740
And we have a bunch of support
equipment with each stream because

00:36:04.800 --> 00:36:09.770
we actually get the channels via
analog cable from our cable operator,

00:36:10.190 --> 00:36:15.220
use tuners to tune, throw that into a
FireWire video converter,

00:36:15.220 --> 00:36:15.380
which is we're actually using some of
the Canopus ADVC products to do that.

00:36:15.380 --> 00:36:23.860
And then it goes into the
streaming node via FireWire.

00:36:23.980 --> 00:36:26.980
The software we're using is
really pretty straightforward.

00:36:27.060 --> 00:36:29.500
OS X Server, of course,
QuickTime Broadcaster,

00:36:29.730 --> 00:36:31.420
QuickTime Streaming Server.

00:36:31.420 --> 00:36:33.610
We use it for some
specialty applications,

00:36:33.710 --> 00:36:36.770
but QuickTime Broadcaster has
the ability to send streams to

00:36:36.790 --> 00:36:38.620
multicast right out of itself.

00:36:38.620 --> 00:36:40.810
So we don't even need to use
streaming server for anything.

00:36:40.820 --> 00:36:44.500
We have one broadcaster instance
running on each streaming node,

00:36:44.520 --> 00:36:47.100
and it sends it out to a
multicast address that's

00:36:47.160 --> 00:36:49.000
valid for the entire campus.

00:36:49.060 --> 00:36:53.000
And whether there's one or a
thousand people watching a channel,

00:36:53.000 --> 00:36:55.220
it's the same load on the server.

00:36:55.220 --> 00:36:57.420
There's just one stream
coming out of the server.

00:36:57.420 --> 00:37:01.160
So it's really zero or one,
no matter how many clients are watching.

00:37:01.360 --> 00:37:05.350
And we use Apple Remote Desktop,
of course, for administration,

00:37:05.420 --> 00:37:11.360
server monitor, and we actually have an
HP OpenView infrastructure that

00:37:11.360 --> 00:37:14.450
our Network Operations Center used
for monitoring hosts and

00:37:14.470 --> 00:37:15.360
services in our data centers.

00:37:15.360 --> 00:37:17.560
And so OpenView's in the mix, too.

00:37:17.560 --> 00:37:19.640
And then the client end,
as you already know, of course,

00:37:19.640 --> 00:37:20.640
we have QuickTime Player.

00:37:20.760 --> 00:37:23.120
We've got some open source
players on other platforms,

00:37:23.120 --> 00:37:24.950
or frankly, Mac OS and Windows as well.

00:37:25.010 --> 00:37:29.300
We have the ability to play to
any MPEG-4 compliant device.

00:37:29.300 --> 00:37:31.100
And we have it in the cloud.

00:37:31.300 --> 00:37:34.990
And we haven't actually done that a
lot because we discovered that the

00:37:34.990 --> 00:37:38.280
Mac Mini is a really nice set-top box.

00:37:38.300 --> 00:37:41.500
And we'll talk about that
a little bit more later.

00:37:41.720 --> 00:37:47.480
So what we do is on each streaming node,
they're really just set up as appliances.

00:37:47.500 --> 00:37:49.200
They've got all their
stuff hooked up to them.

00:37:49.200 --> 00:37:51.980
The tuner's tuned to whatever
channel it's supposed to

00:37:51.990 --> 00:37:53.400
be tuned to for that box.

00:37:53.400 --> 00:37:57.550
Boots up, logs in as the streaming user,
which is an unprivileged

00:37:57.550 --> 00:37:58.320
user on the machine.

00:37:58.400 --> 00:38:00.960
It's just a normal non-admin user.

00:38:01.240 --> 00:38:07.040
The machines monitor themselves,
obviously, via the Watchdog process.

00:38:07.040 --> 00:38:10.810
And they're also monitored
by some external agents.

00:38:10.840 --> 00:38:13.410
QuickTime Broadcaster starts
when the thing boots up.

00:38:13.470 --> 00:38:15.250
A very simple Apple script does this.

00:38:15.340 --> 00:38:21.840
And then our closed captioning, capture,
and database insertion script starts

00:38:21.840 --> 00:38:23.640
and is also monitored by Watchdog.

00:38:23.640 --> 00:38:25.640
Now, we could do this other ways, but,
you know,

00:38:25.640 --> 00:38:27.440
Watchdog was the way to do it back then.

00:38:27.440 --> 00:38:30.980
So that's how we're continuing
to do it on the production side.

00:38:31.180 --> 00:38:34.970
service.

00:38:35.740 --> 00:38:37.680
Some people have asked, you know,
how do you make sure that

00:38:37.680 --> 00:38:40.400
QuickTime Broadcaster
always stays running?

00:38:40.420 --> 00:38:46.540
And we do it, you know,
really kind of a simple,

00:38:46.540 --> 00:38:47.800
straightforward way.

00:38:47.840 --> 00:38:51.140
We have an entry in the cron tab
that runs a script every minute.

00:38:51.170 --> 00:38:54.510
It simply checks to see
if Broadcaster's there.

00:38:54.620 --> 00:38:58.320
and if it's not, respawns it.

00:38:58.340 --> 00:39:02.130
And the way it gets respawned is
by the same script that launches it

00:39:02.210 --> 00:39:05.280
and tells it to start broadcasting
in the beginning when it boots.

00:39:05.320 --> 00:39:08.200
We have found that this is
actually extremely reliable.

00:39:08.220 --> 00:39:11.740
And I wanted to get some of this
stuff in the presentation so that

00:39:11.740 --> 00:39:15.370
when these go up on the ADC site,
they'll actually be in there so you

00:39:15.370 --> 00:39:17.380
can see some of the stuff that we did.

00:39:19.830 --> 00:39:25.160
One other thing that we do is after
some of the hardware became powerful

00:39:25.160 --> 00:39:28.400
enough to start doing multiple
streams at the resolutions and

00:39:28.440 --> 00:39:31.320
data rates we were interested in,
we also wanted to run multiple

00:39:31.320 --> 00:39:33.200
instances of QuickTime Broadcaster.

00:39:33.200 --> 00:39:37.080
Now QuickTime Broadcaster,
while it's very nice and of course free,

00:39:37.080 --> 00:39:41.200
isn't really designed to run multiple
instances on the same machine.

00:39:41.200 --> 00:39:46.970
So we have, I wouldn't even call this a
hack because it's so simple,

00:39:46.970 --> 00:39:51.940
but what we do is we just duplicate
the QuickTime Broadcaster application

00:39:52.440 --> 00:39:56.280
and in each successive instance,
so in the case of having two,

00:39:56.430 --> 00:40:00.000
we open up the application
package and then edit this

00:40:00.140 --> 00:40:03.010
Info.plist as you see right there.

00:40:03.380 --> 00:40:06.500
Basically all this is doing is it's
changing the bundle name of the

00:40:06.500 --> 00:40:11.200
application which also determines
what its preferences file name is.

00:40:11.200 --> 00:40:16.330
This makes Broadcaster have,
each instance of Broadcaster has its

00:40:16.330 --> 00:40:19.600
own app preference file so they don't
trample each other and continually

00:40:19.680 --> 00:40:23.300
overwrite each other when you launch
the other one or make changes by

00:40:23.300 --> 00:40:25.200
launching a separate instance of the app.

00:40:25.200 --> 00:40:29.450
So now two instances of Broadcaster can
run and they're completely independent

00:40:29.450 --> 00:40:34.200
of one another preference wise and they
can take inputs from different sources.

00:40:34.200 --> 00:40:38.240
Now it might be worth mentioning
here that as Steve talked

00:40:38.260 --> 00:40:41.200
about in his presentation,
they use Wirecast.

00:40:41.200 --> 00:40:49.310
Verisoftware's Wirecast does multiple
inputs and multiple streams by default,

00:40:49.420 --> 00:40:52.910
but for various reasons we
couldn't use their product for

00:40:53.030 --> 00:40:57.640
this deployment and we're actually,
I'm actually going to talk about

00:40:57.640 --> 00:40:59.660
that a little bit later too.

00:40:59.880 --> 00:41:05.740
One of the things that we did,
not at first, was added a player

00:41:05.800 --> 00:41:07.640
application to the mix.

00:41:07.640 --> 00:41:10.740
So some of these things will
make a little bit more sense

00:41:10.740 --> 00:41:12.440
when I show them to you later.

00:41:12.440 --> 00:41:14.410
But this is a standalone player.

00:41:14.470 --> 00:41:15.800
It doesn't play things through QuickTime.

00:41:15.800 --> 00:41:17.100
It's its own application.

00:41:17.240 --> 00:41:20.200
It was written by Brian Deeth,
who's actually also here too,

00:41:20.200 --> 00:41:22.040
so you can talk to him about
this later if you want.

00:41:22.040 --> 00:41:23.880
He's waving in the front row there.

00:41:23.880 --> 00:41:27.240
Who's with our school of journalism.

00:41:27.350 --> 00:41:31.240
And I think this was really an
example of the kind of flexibility

00:41:31.240 --> 00:41:33.480
that going with QuickTime offered.

00:41:33.610 --> 00:41:38.060
Because someone who really wasn't
affiliated with this project at all

00:41:38.550 --> 00:41:42.830
decided that they wanted to write an app
that would interface with our service

00:41:42.840 --> 00:41:48.200
and play our content and even do some
more special stuff that we weren't doing.

00:41:48.200 --> 00:41:51.280
And the granularity of our
solution allowed him to do that.

00:41:51.400 --> 00:41:54.200
And of course we were more than
happy to cooperate with him.

00:41:54.200 --> 00:41:58.460
But some of the things that it added,
which was a complaint

00:41:58.460 --> 00:42:00.960
that a lot of people had,
and this is a

00:42:00.960 --> 00:42:02.920
Mac OS X application right now.

00:42:03.110 --> 00:42:07.390
There's possibilities of it
presenting itself on other platforms,

00:42:07.390 --> 00:42:09.560
but right now it's just
a Mac OS X application.

00:42:09.560 --> 00:42:14.920
It provides kind of a TV-like remote
control interface to our service.

00:42:14.920 --> 00:42:17.080
So that when you open it up,
it looks like any other kind of

00:42:17.200 --> 00:42:20.890
TV tuner application would that
you might get for a computer.

00:42:21.000 --> 00:42:22.120
It's got a little remote control.

00:42:22.120 --> 00:42:23.150
It's got a channel list.

00:42:23.160 --> 00:42:24.120
But it dynamically changes
the way you're playing.

00:42:24.120 --> 00:42:27.080
It dynamically updates this
list from a central database.

00:42:27.100 --> 00:42:31.210
So if a channel gets added or a
live broadcast starts and someone

00:42:31.210 --> 00:42:34.240
already has the player running,
the channel is going to be dynamically

00:42:34.240 --> 00:42:36.920
added to the list of channels
that are available to the player.

00:42:36.930 --> 00:42:40.280
And the player checks periodically
with the database to see if

00:42:40.280 --> 00:42:41.880
there's any new channels.

00:42:41.900 --> 00:42:48.750
It supports the Apple remote and
it also has the ability to respond

00:42:48.750 --> 00:42:51.940
to queries from external devices.

00:42:52.310 --> 00:42:54.040
One example is AMX Netlink.

00:42:54.040 --> 00:42:57.300
AMX Netlink is an AV control
system that we use in a lot of

00:42:57.370 --> 00:42:59.800
our classrooms at the university.

00:42:59.800 --> 00:43:01.880
And some of you are
probably familiar with this.

00:43:02.040 --> 00:43:05.720
And the Netlink has the
ability to send out kind of

00:43:05.820 --> 00:43:11.260
arbitrary commands via telnet,
for example, to another device at a

00:43:11.270 --> 00:43:13.450
particular IP address.

00:43:13.590 --> 00:43:15.560
So these things can listen.

00:43:15.660 --> 00:43:19.990
And when someone walks into a classroom,
they can walk up to one of these

00:43:20.080 --> 00:43:23.960
Netlink devices and press the
TV button and then press CNS.

00:43:23.960 --> 00:43:26.680
And then on the big screen
in front of the classroom,

00:43:26.680 --> 00:43:27.540
CNN comes up.

00:43:27.650 --> 00:43:32.120
And other than the brief quick
time buffering that happens,

00:43:32.190 --> 00:43:35.710
it doesn't appear to be anything
different than ordinary TV to

00:43:35.900 --> 00:43:39.600
either the person who's changing the
channels or the person watching it.

00:43:44.090 --> 00:43:49.530
One of the other things that we realized
we could do is we wanted to add closed

00:43:49.600 --> 00:43:51.700
captioning for accessibility reasons.

00:43:51.700 --> 00:43:55.230
And we thought, well gee,
as long as we're collecting

00:43:55.230 --> 00:43:59.020
all this closed captioning
stuff and decoding it anyway,

00:43:59.020 --> 00:44:02.530
why not take it all and
insert it into a database?

00:44:02.700 --> 00:44:08.300
So again, in cooperation with Brian,
we started inserting all the closed

00:44:08.300 --> 00:44:10.700
captioning text into a database.

00:44:10.700 --> 00:44:14.660
And then we thought, gee,
that was a good idea.

00:44:14.660 --> 00:44:22.400
Seems like it would be nice to actually
have the video or some kind of context

00:44:22.400 --> 00:44:23.700
from the video along with the text.

00:44:23.800 --> 00:44:26.880
So we have thumbnails,
still thumbnails from every minute for

00:44:26.880 --> 00:44:30.700
all the channels that are also inserted
into the database as a binary object.

00:44:30.700 --> 00:44:35.690
And the way we do that is
actually pretty interesting.

00:44:35.700 --> 00:44:39.700
On each of these streaming nodes,
they don't have video cards or anything,

00:44:39.700 --> 00:44:40.700
but they all come together.

00:44:40.700 --> 00:44:43.660
And so we kind of think they've
got their dummy local display.

00:44:44.020 --> 00:44:45.480
QuickTime Broadcaster's up on it.

00:44:45.700 --> 00:44:48.680
Well, when QuickTime Broadcaster's
broadcasting,

00:44:48.680 --> 00:44:50.700
it shows the preview right there.

00:44:50.700 --> 00:44:55.700
So with some open source tools,
we take a screenshot of the screen,

00:44:55.700 --> 00:45:00.700
then we crop it down to the
exact place where the image was.

00:45:00.700 --> 00:45:02.700
And then a script runs.

00:45:02.700 --> 00:45:05.680
And of course, all this is in one kind
of script that runs.

00:45:05.760 --> 00:45:09.700
And then a script runs that
inserts it into the database.

00:45:09.700 --> 00:45:12.560
So we don't think that we would
have been able to really do this

00:45:13.010 --> 00:45:17.700
with any other kind of solution,
especially a turnkey solution.

00:45:17.700 --> 00:45:20.660
If we just decided,
let's just put thumbnails in a database.

00:45:20.750 --> 00:45:22.700
The product would either
support it or not.

00:45:22.940 --> 00:45:25.700
But here we have the choice to do this.

00:45:25.700 --> 00:45:29.410
And one brief thing there,
QuickTime Broadcaster has the

00:45:29.410 --> 00:45:32.690
broadcasting balloon in the preview
window while it's broadcasting.

00:45:32.710 --> 00:45:36.430
Well, those are just TIFF images
inside the application package.

00:45:36.770 --> 00:45:38.700
So we just remove those
in our deployment.

00:45:38.700 --> 00:45:42.350
So that while it's broadcasting,
the broadcasting balloon isn't

00:45:42.350 --> 00:45:45.700
there and therefore also doesn't
show up in our thumbnails.

00:45:45.700 --> 00:45:47.700
And then we developed a web page.

00:45:47.700 --> 00:45:52.150
And we have an interface for
actually searching and interacting

00:45:52.150 --> 00:45:54.700
with the closed captioning data.

00:45:54.700 --> 00:46:02.700
And after we discovered that archiving
text and still images was a good idea,

00:46:02.700 --> 00:46:05.660
of course,
we decided that archiving video

00:46:05.660 --> 00:46:07.700
would even be a better idea.

00:46:07.700 --> 00:46:10.670
So we have some video and
we're starting to do more.

00:46:10.700 --> 00:46:14.730
And we use QuickTime Broadcaster's
integrated recording

00:46:14.730 --> 00:46:16.700
functionality for this.

00:46:16.700 --> 00:46:21.700
Video is retrieved using some
specially crafted URLs that use Smile.

00:46:21.700 --> 00:46:30.700
And just before we came out to WWDC,
we started kind of an initial partnership

00:46:30.700 --> 00:46:36.700
with the UW General Library System to
make 7 terabytes of video,

00:46:36.700 --> 00:46:38.700
which is the most recent video.

00:46:38.700 --> 00:46:40.560
And it's yet to be determined
which channels it's going to

00:46:40.560 --> 00:46:43.850
be and everything like that,
via, you know, kind of under the

00:46:43.850 --> 00:46:45.610
auspices of the library.

00:46:45.750 --> 00:46:47.420
So...

00:46:48.850 --> 00:46:52.840
The first year we talked about this, we,
actually I'm sorry,

00:46:52.840 --> 00:46:55.130
the second year we talked about this,
we talked about what was new.

00:46:55.130 --> 00:46:57.910
And this stuff that was
new bears mentioning again.

00:46:57.910 --> 00:47:01.140
And QuickTime 7, of course, was new.

00:47:01.140 --> 00:47:04.330
H.264, really a good codec.

00:47:04.410 --> 00:47:09.400
But what we found out pretty quickly
was that we didn't quite have the

00:47:09.400 --> 00:47:16.460
horsepower to do H.264 encoding yet for
standard definition TV live in real time.

00:47:16.460 --> 00:47:20.110
The MPEG-4 codec was actually
still giving us a little bit

00:47:20.110 --> 00:47:24.580
better quality and was a little bit
easier on our encoding machines.

00:47:24.600 --> 00:47:26.820
So that's,
we anticipate that that's probably

00:47:26.900 --> 00:47:30.480
going to change in the future,
but right now we're still on MPEG-4.

00:47:30.480 --> 00:47:34.820
But the bottom line of all this is
that standard definition quality

00:47:34.820 --> 00:47:37.020
TV is possible in about a megabit.

00:47:37.110 --> 00:47:39.530
And that was really great for us.

00:47:39.540 --> 00:47:44.480
And improvements in QuickTime Broadcaster
1.5 and QuickTime 7,

00:47:44.830 --> 00:47:46.440
and this was the same.

00:47:46.460 --> 00:47:49.660
At the last WWDC, but I just want to make
sure everyone knows this.

00:47:49.760 --> 00:47:53.480
QuickTime Broadcaster 1.5
with QuickTime 7 is now,

00:47:53.480 --> 00:47:58.370
it's now possible to do full frame
DV and full frame from various input

00:47:58.370 --> 00:48:01.480
devices like the Miglia Alchemy TV card.

00:48:01.480 --> 00:48:03.490
Previously,
it would discard half of the frames and

00:48:03.630 --> 00:48:05.240
you'd get about half the resolution.

00:48:05.350 --> 00:48:11.260
But now you can do full frame video,
640x480 or 720x480 with these cards.

00:48:11.300 --> 00:48:13.260
What's newer?

00:48:13.260 --> 00:48:15.850
Obviously, CPU power has increased.

00:48:16.460 --> 00:48:19.880
So here's some examples of some of the
results that we've been able to get

00:48:19.880 --> 00:48:21.980
at various bit rates and resolutions.

00:48:21.980 --> 00:48:28.490
Now, when you look at the
Core Duo listings down there,

00:48:28.490 --> 00:48:31.920
I think that those deserve
a little bit of explanation.

00:48:31.920 --> 00:48:37.520
The reason why those are there,
and I haven't had an opportunity to

00:48:37.520 --> 00:48:42.660
test anything on the Quad Core Xeon
Mac Pros and XServes yet,

00:48:42.660 --> 00:48:44.660
but I have a feeling that
they're going to be quite nice.

00:48:44.660 --> 00:48:45.610
These are the ones that we've
been able to get at various

00:48:45.760 --> 00:48:46.440
bit rates and resolutions.

00:48:46.460 --> 00:48:47.840
These are low-end machines.

00:48:47.840 --> 00:48:50.320
I mean, something,
we can take a Mac Mini,

00:48:50.630 --> 00:48:53.600
something that's basically, you know,
a $600 or $700 machine and do

00:48:53.900 --> 00:48:57.640
almost with it what we could do
with high-end server hardware,

00:48:57.640 --> 00:49:00.320
you know, not that long ago.

00:49:00.320 --> 00:49:04.910
So I think that the future is very
bright for the Intel platform,

00:49:05.190 --> 00:49:07.520
too, when it comes to encoding.

00:49:07.520 --> 00:49:14.110
Now, even today, on a Core Duo Mac Mini,
you can encode almost,

00:49:14.120 --> 00:49:16.440
we're almost there.

00:49:16.460 --> 00:49:18.590
where

00:49:19.380 --> 00:49:23.960
Full-frame H.264 using Wirecast.

00:49:23.960 --> 00:49:30.940
And I think that as the Mac Mini matures
and as some of Intel's newer and higher

00:49:30.940 --> 00:49:34.320
speed processor offerings make their
way into Apple's products over time,

00:49:34.320 --> 00:49:37.130
we're going to be there with
even products like the Mac Mini.

00:49:37.140 --> 00:49:41.990
And one of the reasons we use Wirecast
in our testing on the Mac Mini is

00:49:42.050 --> 00:49:44.700
because Wirecast leverages the GPU.

00:49:45.840 --> 00:49:48.750
Well, none of our X-Serve encoding
nodes have GPUs in them.

00:49:48.750 --> 00:49:50.420
That's why we didn't
use Wirecast on them.

00:49:51.080 --> 00:49:56.900
And Wirecast can eat just, you know,
even more performance out of a

00:49:56.900 --> 00:49:58.280
machine by leveraging the GPU.

00:49:58.280 --> 00:50:01.740
So even the relatively
low-end Intel integrated

00:50:01.790 --> 00:50:04.820
graphics in the Mac Mini,
it can do a really great

00:50:04.820 --> 00:50:06.680
job with H.264 encoding.

00:50:06.680 --> 00:50:11.460
And if you don't have to do 640 by 480,
if you want to do a little bit less or

00:50:11.460 --> 00:50:15.710
if you don't need 30 frames per second,
I mean, these things,

00:50:15.760 --> 00:50:19.130
are great little encoding boxes.

00:50:20.780 --> 00:50:22.360
So what's newest?

00:50:22.400 --> 00:50:24.280
Transcoding.

00:50:24.310 --> 00:50:27.280
And this is kind of the result of,
we've been able to do this,

00:50:27.320 --> 00:50:30.050
this is a result of I think our
good decision-making process

00:50:30.390 --> 00:50:35.280
to go with open standards,
to go with QuickTime in the first place.

00:50:35.310 --> 00:50:37.910
We take one encoding format,

00:50:38.810 --> 00:50:41.560
which in this case is
MPEG-2 Transport Stream,

00:50:41.560 --> 00:50:44.520
and convert it to
something else on the fly.

00:50:44.740 --> 00:50:48.810
So our cable operator delivers
MPEG-2 transport stream

00:50:48.820 --> 00:50:51.830
video directly to us via IP.

00:50:52.070 --> 00:50:55.140
and it's never been analog before.

00:50:55.140 --> 00:50:57.080
It comes from their digital source.

00:50:57.110 --> 00:51:01.530
It gets put into their network,
packetized and whatnot,

00:51:01.600 --> 00:51:04.140
sent to us and we convert it to MPEG-4.

00:51:04.190 --> 00:51:09.300
Now, if we didn't have these licensing
encumbrances with MPEG-2,

00:51:09.530 --> 00:51:13.400
We might just take the video content
as it is and have no physical

00:51:13.400 --> 00:51:16.310
infrastructure to support video at all.

00:51:16.500 --> 00:51:18.330
That's not the case.

00:51:18.330 --> 00:51:25.870
And we decided to not try to fly in
the face of MPEG LA or be a test case

00:51:26.000 --> 00:51:30.760
to see what would happen if we used
something like VLC as our player.

00:51:31.030 --> 00:51:35.460
And then we also had some thoughts
about do we really want to,

00:51:35.620 --> 00:51:42.830
you know,
do we want to make a judgment to

00:51:43.700 --> 00:51:47.690
Use something like MPEG-2 that
has to be licensed going forward,

00:51:47.690 --> 00:51:49.740
even if we pay for it.

00:51:50.090 --> 00:51:55.160
and David Koehn,
the founder of QuickTime,

00:51:55.160 --> 00:52:01.390
are also here to talk about
the future of QuickTime.

00:52:01.560 --> 00:52:04.800
What was key for us is that
when we do this transcoding,

00:52:04.800 --> 00:52:07.050
everything on the client end,
how this appears to our

00:52:07.050 --> 00:52:09.120
users and customers,
is all the same.

00:52:09.140 --> 00:52:13.940
The flexibility that QuickTime gave us
in the first place is what allows us

00:52:13.990 --> 00:52:16.510
to plug in new pieces going forward.

00:52:16.520 --> 00:52:20.740
And so here's kind of a little
chart of how exactly the video

00:52:20.750 --> 00:52:23.120
is coming to us from Charter.

00:52:23.360 --> 00:52:28.500
And the reason why this is a little
bit more complicated than it would

00:52:28.500 --> 00:52:33.100
seem to be is because Charter really
wants to protect its multicast core.

00:52:33.100 --> 00:52:36.750
They don't want to expose that
to any kind of outside entity.

00:52:36.800 --> 00:52:41.680
So what we're doing is kind of acting
as an intermediary and putting these

00:52:41.680 --> 00:52:44.280
channels on our own multicast core.

00:52:44.280 --> 00:52:47.000
This isn't part of our
production service yet,

00:52:47.100 --> 00:52:50.740
but this is just something that's
going to be tested for a while

00:52:50.790 --> 00:52:53.000
to see exactly how well it works.

00:52:53.660 --> 00:52:58.420
And actually, how we transcode is
with VideoLand Client.

00:52:58.490 --> 00:53:02.120
It's an open source media player,
and it can transcode between

00:53:02.190 --> 00:53:04.140
any formats it understands.

00:53:04.140 --> 00:53:06.120
It runs on OS X.

00:53:06.120 --> 00:53:10.320
It runs on OS X because
OS X has a Unix foundation.

00:53:10.440 --> 00:53:12.880
This application would have
never made its way to Mac OS 9.

00:53:12.880 --> 00:53:17.450
So we have Mac OS X's Unix
heritage to thank for applications

00:53:17.530 --> 00:53:19.970
like this being available.

00:53:19.980 --> 00:53:25.840
And it can really... And it can really
transcode anything it can understand

00:53:25.840 --> 00:53:27.640
to any other format it can understand.

00:53:27.830 --> 00:53:31.550
And we found that we can do about one,
two to four megabit stream

00:53:31.670 --> 00:53:33.050
per modern processor core.

00:53:33.380 --> 00:53:39.800
So that means things like the G5,
things like the Intel Core architecture.

00:53:40.020 --> 00:53:42.470
And like I said before,
the decision to use QuickTime gave

00:53:42.470 --> 00:53:43.600
us this flexibility.

00:53:43.600 --> 00:53:45.940
Does this mean that we're
abandoning QuickTime?

00:53:45.940 --> 00:53:46.720
Not at all.

00:53:46.730 --> 00:53:51.340
We are embracing QuickTime even more
on the client end because we realize,

00:53:51.340 --> 00:53:55.980
because that's how, you know, A,
that's how people will play this video,

00:53:56.000 --> 00:53:59.720
and B, it's treated us this well so far,
and we don't have to do

00:53:59.860 --> 00:54:02.080
anything to any of our clients.

00:54:02.130 --> 00:54:05.430
We don't have to make people make
changes in order to watch new channels

00:54:05.430 --> 00:54:09.300
because QuickTime can understand the
content that we're delivering to them.

00:54:09.900 --> 00:54:12.160
It's compatible with our
existing support model,

00:54:12.160 --> 00:54:15.000
all of our existing things
we've built for Dayton.

00:54:15.000 --> 00:54:19.180
And again, here's a couple of, here's,
a lot of people ask me about this.

00:54:19.320 --> 00:54:20.400
Well, how do you transcode?

00:54:20.400 --> 00:54:22.530
How exactly,
what do you put in at the command line?

00:54:22.530 --> 00:54:23.640
Here's a couple of things.

00:54:23.640 --> 00:54:26.640
These are obviously not
intended to be written down,

00:54:26.640 --> 00:54:30.140
but they'll be in the presentation
when you can download it.

00:54:30.220 --> 00:54:35.040
One thing I would mention is if you look
at VLC for doing these sorts of things,

00:54:35.040 --> 00:54:39.880
you can use the streaming wizard,
which is in the newer build.

00:54:39.900 --> 00:54:45.180
That's kind of the,
the old builds of VLC as an example.

00:54:45.180 --> 00:54:51.910
And it, it shows the actual commands it's
using to generate the stream,

00:54:51.910 --> 00:54:55.610
do recording and that sort of thing.

00:54:55.610 --> 00:54:55.610
Now, I would also mention that

00:54:55.830 --> 00:55:00.660
If QuickTime supports MPEG-2
transport stream itself in the future,

00:55:00.660 --> 00:55:03.630
we may look into switching
back to QuickTime.

00:55:03.740 --> 00:55:08.450
In fact, we'd like to use QuickTime to
do the playback and/or

00:55:08.450 --> 00:55:11.570
transcoding of this content.

00:55:12.910 --> 00:55:18.860
So here's a typical encoding node that's
using Broadcaster and actually getting

00:55:18.860 --> 00:55:20.740
it from the external audio source.

00:55:20.740 --> 00:55:24.150
You can see the tuner that
we have and a couple of other

00:55:24.260 --> 00:55:26.650
pieces of equipment in between.

00:55:26.830 --> 00:55:29.940
The closed captioning decoder is hooked
up to the serial port on the XServe,

00:55:29.940 --> 00:55:32.290
and that's how the video gets in,
or that's how the closed

00:55:32.290 --> 00:55:34.860
captioning gets into the machine,
and there's a little agent there

00:55:34.860 --> 00:55:36.170
that sits there listening to it.

00:55:38.270 --> 00:55:41.900
This is a typical encoding node if
it's using an internal tuner card.

00:55:41.950 --> 00:55:44.960
This solution wasn't available when
we originally deployed the pilot,

00:55:44.960 --> 00:55:47.860
but we actually have a couple of
channels that are using this now.

00:55:47.970 --> 00:55:54.730
And that's an all internal solution,
so you can have two tuner cards and

00:55:54.730 --> 00:55:58.160
do two channels in one U of space.

00:55:59.050 --> 00:56:02.060
And a transcoding node is
nothing more than a box with

00:56:02.060 --> 00:56:03.060
some computing horsepower.

00:56:03.060 --> 00:56:07.090
So that's also an all-internal solution.

00:56:08.910 --> 00:56:10.960
And so what does Dayton look like?

00:56:11.020 --> 00:56:16.760
Well, here's our pilot deployment that
turned into a production service.

00:56:16.900 --> 00:56:20.160
It's a bunch of XServe cluster nodes,
some tuners, and some support equipment,

00:56:20.160 --> 00:56:23.740
which is sandwiched in between
each XServe because the tuners

00:56:23.740 --> 00:56:27.020
are only like three inches deep,
so there's some dead space

00:56:27.240 --> 00:56:28.720
in there that we can use.

00:56:29.630 --> 00:56:33.510
And we would have liked to have
everything done in just kind of one box,

00:56:33.510 --> 00:56:36.750
which we could do today,
but this is what we had to do to build

00:56:36.750 --> 00:56:42.050
this solution when we originally did,
and it ended up working out very well.

00:56:42.060 --> 00:56:46.330
And it's a testament to the quality of
this product that after we've set it up,

00:56:46.330 --> 00:56:49.540
and even though we've added
things to it from time to time,

00:56:49.540 --> 00:56:53.720
we haven't really had to do anything
in the way of maintenance or upkeep,

00:56:53.820 --> 00:56:58.760
short of just ordinary best
practices like OS patching.

00:56:59.540 --> 00:57:01.260
And so what does Dayton look like?

00:57:01.360 --> 00:57:03.320
Well,
it's a bunch of XServe clusters that

00:57:03.320 --> 00:57:04.970
turned into a production service.

00:57:04.970 --> 00:57:09.080
It's a bunch of XServe clusters that
started out as a production service.

00:57:10.000 --> 00:58:05.700
[Transcript missing]

00:58:06.290 --> 00:58:09.700
And here's our closed
captioning search page.

00:58:09.730 --> 00:58:12.460
This is something that we're going
to be rolling out with the library.

00:58:12.730 --> 00:58:18.100
This hasn't become a public service
to just the broad campus yet.

00:58:18.770 --> 00:58:21.210
An example of some search
results that have come back from

00:58:21.210 --> 00:58:23.750
a search someone's done on CNN.

00:58:24.080 --> 00:58:29.440
And the key for Dayton,
anywhere the network is, Dayton is too.

00:58:29.500 --> 00:58:37.430
Whether it's an office setting or a
lounge or conference room or classroom.

00:58:38.900 --> 00:58:43.680
Big screen TV up on a wall somewhere,
a recreational facility.

00:58:43.680 --> 00:58:47.490
Here's an example where they've
got five 42-inch plasmas hooked

00:58:47.490 --> 00:58:50.220
up to Mac Minis as set-out boxes.

00:58:52.150 --> 00:58:56.570
So the Mac Mini has a set-top box.

00:58:57.010 --> 00:58:57.900
It's really perfect.

00:58:57.900 --> 00:59:00.940
Inexpensive, small, quiet,
can be run like an appliance.

00:59:01.050 --> 00:59:03.360
It's got an array of connectivity
that's perfect for this application.

00:59:03.360 --> 00:59:05.130
Supports a remote control.

00:59:05.170 --> 00:59:07.610
Dayton Player also supports a remote.

00:59:07.940 --> 00:59:11.460
When this thing is configured in
kind of an appliance-type way,

00:59:11.460 --> 00:59:15.340
it's really incredible
that it just works.

00:59:15.340 --> 00:59:17.740
And as a bonus,
it's also a full computer.

00:59:19.280 --> 00:59:22.290
and it's not much more expensive than
some of the set tops we've looked at too,

00:59:22.300 --> 00:59:23.580
by the way.

00:59:23.670 --> 00:59:26.680
Mac Mini is a video over IP encoder.

00:59:26.800 --> 00:59:31.870
Again, a lot of the same pluses,
and it's got still the

00:59:31.880 --> 00:59:34.500
same good connectivity that
makes it good as a set-top,

00:59:35.000 --> 00:59:37.500
except some of them reversed inputs.

00:59:39.500 --> 00:59:43.280
And we kind of centrally manage and
update these things so the people who

00:59:43.280 --> 00:59:46.300
have these out at their sites don't
actually have to do anything with them.

00:59:46.300 --> 00:59:48.700
Everything is centrally managed.

00:59:48.700 --> 00:59:54.460
And so now I just want to show
you real quick how what Dayton is,

00:59:54.510 --> 00:59:55.300
what it looks like.

00:59:55.300 --> 00:59:58.840
And if the demo gods are all
this is designed to work on the

00:59:58.950 --> 01:00:01.140
university multicast network.

01:00:01.200 --> 01:00:06.300
So we're doing some special stuff
to make it work out here at all.

01:00:06.570 --> 01:00:09.880
And we're having some problems
with the network earlier,

01:00:09.890 --> 01:00:11.250
but we'll just see if this works.

01:00:11.300 --> 01:00:15.500
So I'm going to click my secret little
button here on one of these channels.

01:00:18.420 --> 01:00:24.280
It's going to spawn QuickTime and I'll...
Normally on campus this would just play.

01:00:28.300 --> 01:00:30.300
Next call comes from Palm Bay, Florida.

01:00:30.300 --> 01:00:30.540
Go ahead.

01:00:30.540 --> 01:00:31.620
Good morning.

01:00:31.640 --> 01:00:34.240
So, that's what it looks like.

01:00:40.840 --> 01:00:45.950
I guess we don't have QuickTime Pro.

01:00:45.950 --> 01:00:51.700
Here's an example of the same thing
with closed captioning in effect.

01:00:51.700 --> 01:00:55.760
In my opinion,
the cultures of Jews and the cultures

01:00:55.760 --> 01:00:59.730
of Christians and other religions
have learned to live with each other.

01:00:59.970 --> 01:01:03.700
There's no doubt if you go to
anywhere in the Arabian world,

01:01:03.700 --> 01:01:06.340
Persian or Ottoman... Now this is
actually an interface that doesn't

01:01:06.340 --> 01:01:09.850
have any of the controls along with it,
but that's just another example

01:01:09.850 --> 01:01:11.700
of how we can present it.

01:01:11.700 --> 01:01:15.390
And if I were to go full screen,
it would just have the captioning

01:01:15.390 --> 01:01:18.690
at the bottom as you see blown
up with the video on top.

01:01:18.700 --> 01:01:20.680
So that's what it looks like.

01:01:21.160 --> 01:01:28.630
And I'll show you our search
interface here real quick too.

01:01:36.090 --> 01:01:41.920
So let's say I want to search a couple
of channels for... This is always

01:01:42.160 --> 01:01:46.430
something that will get some hits.

01:01:50.040 --> 01:01:56.570
And boom, we get our responses from CNN,
which apparently has

01:01:56.570 --> 01:01:58.380
only mentioned it once.

01:02:00.970 --> 01:02:04.620
and some more results there.

01:02:04.640 --> 01:02:07.260
Now if I click on this,
now you see our thumbnails.

01:02:07.260 --> 01:02:10.450
This is the nearest minute thumbnail and
I also chose a one-minute aggregation

01:02:10.550 --> 01:02:14.390
which just will say give me a one-minute
chunk around the search result.

01:02:14.450 --> 01:02:20.180
And if I choose one of these and say,
well, I'll just click on the video.

01:02:21.640 --> 01:02:29.550
Now if I go down here,
now we start the video off about

01:02:29.550 --> 01:02:32.780
like 10 seconds before the search
result and end it 10 seconds after.

01:02:32.780 --> 01:02:42.430
So there you can see it's going along and
this is video that's been archived and,

01:02:42.430 --> 01:02:45.440
you know, really we can archive as
much as we have space for.

01:02:45.930 --> 01:02:48.860
So you can see the potential for
this for even research applications

01:02:48.860 --> 01:02:52.120
and the library really sees this as,
you know, why should we not archive

01:02:52.430 --> 01:02:55.890
just like periodicals,
newspapers, journals, books.

01:02:55.900 --> 01:02:59.110
This is another tool that's a
legitimate research tool that

01:02:59.110 --> 01:03:01.100
people at the university can use.

01:03:01.100 --> 01:03:03.860
So that's our search interface
and we can obviously write

01:03:03.870 --> 01:03:05.580
any kind of interface we want.

01:03:05.580 --> 01:03:08.100
If I want to say,
maybe we collected a show

01:03:08.100 --> 01:03:11.650
metadata and say I want to watch
Law and Order from last week

01:03:11.650 --> 01:03:15.360
or I want to actually maybe see,
you know, here's another example.

01:03:15.920 --> 01:03:17.490
Um...

01:03:17.990 --> 01:03:19.320
Let's see here, 10 a.m.

01:03:19.320 --> 01:03:20.220
to 11 a.m.

01:03:20.220 --> 01:03:22.500
last Sunday.

01:03:26.510 --> 01:03:30.690
With no search term and
one minute aggregation,

01:03:30.700 --> 01:03:32.540
that looks good.

01:03:33.200 --> 01:03:38.900
[Transcript missing]

01:03:39.110 --> 01:03:44.630
You know, an event that was going on
at a particular time and

01:03:50.800 --> 01:03:52.740
So this has been a really
useful tool for us.

01:03:52.740 --> 01:04:00.600
And now the player-- let's see here.

01:04:00.800 --> 01:04:04.710
I'm going to have to put
it in unicast mode 2.

01:04:17.400 --> 01:04:19.520
And if everything's working,
we'll get it there.

01:04:19.520 --> 01:04:20.560
OK.

01:04:20.560 --> 01:04:25.200
Now, here's a standalone application.

01:04:25.800 --> 01:04:28.600
Here's how it does its closed captioning
and we actually have some preferences

01:04:28.600 --> 01:04:33.460
in here that let you set the background
transparency of the captioning pane and

01:04:33.460 --> 01:04:37.110
the color and the size of it and how
many lines it is and things like that.

01:04:37.170 --> 01:04:39.290
So it gives you a little bit
more flexibility than even

01:04:39.420 --> 01:04:41.190
normal closed captioning does.

01:04:41.190 --> 01:04:46.620
And QuickTime full screen
without QuickTime Pro.

01:04:50.590 --> 01:04:52.680
So that's state and player.

01:04:52.680 --> 01:04:57.790
And since I'm going to be
running short on time here,

01:04:58.660 --> 01:05:01.060
I just want to touch on
some of the things that we,

01:05:01.110 --> 01:05:03.580
where we said we were going
when I was here last year.

01:05:03.580 --> 01:05:05.820
This was our bullet point
list that we had last year.

01:05:05.880 --> 01:05:10.980
And everything with a green checkmark
by it is now either done or in progress.

01:05:10.980 --> 01:05:14.370
And the two things that don't have
checkboxes are two things that

01:05:14.650 --> 01:05:16.560
I'm very happy about this year.

01:05:16.990 --> 01:05:19.580
Move to next generation
XServe for encoding platform.

01:05:19.580 --> 01:05:23.500
Well, I have to say that I was
really pleasantly surprised

01:05:23.500 --> 01:05:25.550
by the new XServe offering.

01:05:25.550 --> 01:05:29.130
And we're playing around with
the possibility to be able to do

01:05:29.130 --> 01:05:32.650
things like invite TV channels
into an iChat conference.

01:05:32.710 --> 01:05:36.800
And the stuff that I saw with iChat
and Leopard makes me think that we'll

01:05:36.990 --> 01:05:39.060
be able to do some of those things.

01:05:39.110 --> 01:05:42.840
Will it have any purpose ultimately?

01:05:42.840 --> 01:05:43.760
I don't know.

01:05:43.760 --> 01:05:46.920
But since we've really
only had two of those,

01:05:46.920 --> 01:05:46.920
we're going to have to
do some of those things.

01:05:46.940 --> 01:05:50.120
We've had two people working
on this project over the last

01:05:50.120 --> 01:05:53.730
three years with about maybe 5
to 10% of their time or less,

01:05:53.730 --> 01:05:55.900
or sometimes 0% for weeks at a time.

01:05:55.900 --> 01:05:58.780
I'd say that this has been
a pretty good investment.

01:05:58.890 --> 01:06:03.030
We did everything that you
see here for under $50,000.

01:06:03.040 --> 01:06:07.460
Oh, and since we didn't have a
one more thing at the keynote,

01:06:07.460 --> 01:06:09.890
I will give you a one more thing.

01:06:09.890 --> 01:06:13.110
And that is that in
cooperation with Brian,

01:06:13.270 --> 01:06:16.870
Dayton Player is going
to be released for free.

01:06:16.980 --> 01:06:20.900
It's going to also be open source.

01:06:25.200 --> 01:06:27.680
And I really have to say that
Brian's done a lot of work on this.

01:06:27.730 --> 01:06:32.290
Last year, someone actually had a feature
request in the audience,

01:06:32.360 --> 01:06:35.290
and he had it done by the time
I was done giving the presentation.

01:06:35.370 --> 01:06:37.090
So we'll release the source, too.

01:06:37.090 --> 01:06:39.220
It plays any content QuickTime can play.

01:06:39.220 --> 01:06:41.320
Full-screen playback
without QuickTime Pro.

01:06:41.320 --> 01:06:42.380
Works with the Apple Remote.

01:06:42.380 --> 01:06:46.260
It obtains its channel information
right now from a MySQL database,

01:06:46.470 --> 01:06:48.940
but it can be a local preference file,
too.

01:06:48.940 --> 01:06:51.810
We have another tool that will be
released called Date Administrator,

01:06:51.810 --> 01:06:54.460
which is just going to be a
nice little graphical front-end.

01:06:54.960 --> 01:06:56.900
And we're going to post it at this URL.

01:06:56.900 --> 01:06:59.300
We were hoping to actually just
have everything ready today,

01:06:59.300 --> 01:07:00.340
but we didn't have time.

01:07:00.340 --> 01:07:03.060
So right now,
we're just going to say by next Monday,

01:07:03.060 --> 01:07:05.010
we're going to have it up there.

01:07:05.020 --> 01:07:06.760
It could be sooner,
so feel free to check.

01:07:06.840 --> 01:07:09.800
Our version of the application
is available for download now,

01:07:09.800 --> 01:07:12.670
but we're going to have the general
version of the application up there,

01:07:12.670 --> 01:07:13.040
too.

01:07:13.040 --> 01:07:16.130
And there's some of our
contact information.

01:07:16.170 --> 01:07:17.560
I'm in the middle.

01:07:17.560 --> 01:07:21.240
Dave Devereaux-Weber is actually
the project manager for Dayton,

01:07:21.240 --> 01:07:24.740
and he's been the one who's been doing
a lot of the political wrangling and

01:07:24.740 --> 01:07:28.780
meeting with the purchasing agents
and charter and all this kind of

01:07:28.790 --> 01:07:29.950
stuff to get things squared away.

01:07:30.200 --> 01:07:31.710
And Brian, like I said, is here.

01:07:32.350 --> 01:07:36.330
So that's the website, dayton.wisc.edu.

01:07:36.330 --> 01:07:39.210
You can also go to tv.wisc.edu
if that's easier to remember.