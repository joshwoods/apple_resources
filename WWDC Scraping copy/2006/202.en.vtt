WEBVTT

00:00:08.220 --> 00:00:12.500
Hi, welcome to session 202 PDF Kit.

00:00:12.500 --> 00:00:18.590
I'm John Calhoun and I'm
the engineer for PDF Kit.

00:00:19.600 --> 00:00:22.370
So what I'm going to talk to you
about today in this session is I've

00:00:22.370 --> 00:00:24.710
kind of broken it up into four parts.

00:00:24.790 --> 00:00:27.440
The first part I'll tell
you what PDF Kit is,

00:00:27.530 --> 00:00:31.740
kind of what constitutes it,
kind of how all the pieces fit together.

00:00:31.740 --> 00:00:35.410
And then for the last three parts
what I'm going to do is give you

00:00:35.410 --> 00:00:39.200
kind of some practical examples
of how you might use PDF Kit.

00:00:39.290 --> 00:00:43.510
And for the first part of those,
part two, I'll show you what most

00:00:43.510 --> 00:00:46.200
developers want to do,
which is display a

00:00:46.220 --> 00:00:48.200
PDF in their application.

00:00:48.200 --> 00:00:53.210
And I'll probably spend the most
time actually on that section.

00:00:53.410 --> 00:00:57.070
But I don't want people to be left
with the impression that all you

00:00:57.140 --> 00:00:59.660
can do in PDF Kit is display PDFs.

00:00:59.660 --> 00:01:04.510
So part three and four I'll spend
a little time on I guess kind of

00:01:04.950 --> 00:01:11.530
maybe what are a little bit more,
I don't know, creative uses of PDF Kit.

00:01:11.650 --> 00:01:14.800
But first, what is PDF Kit?

00:01:15.220 --> 00:01:17.750
Well, it's a suite of Cocoa classes.

00:01:17.820 --> 00:01:21.500
It's built on top of Quartz 2D,
so you already have, for example,

00:01:21.680 --> 00:01:26.600
in Core Graphics,
you already have the C API for PDF,

00:01:26.600 --> 00:01:27.430
handling PDFs.

00:01:27.590 --> 00:01:32.130
And so what PDF Kit is,
is our Cocoa classes that take advantage

00:01:32.130 --> 00:01:37.830
of those C API and give you kind of a
Cocoa object model for dealing with PDFs.

00:01:38.050 --> 00:01:39.830
It's been used in preview.

00:01:39.950 --> 00:01:43.340
If you've ever opened a PDF in
preview on Tiger or Leopard,

00:01:43.340 --> 00:01:44.900
you've been using PDF Kit.

00:01:44.900 --> 00:01:49.900
It's been used for the default
PDF plugin in Safari as well.

00:01:49.900 --> 00:01:53.960
And on Leopard, I don't know,
the new preview services

00:01:53.960 --> 00:01:57.140
framework is using it,
so Spotlight's using

00:01:57.250 --> 00:01:59.910
PDF Kit when you search for PDFs.

00:02:00.200 --> 00:05:25.200
[Transcript missing]

00:05:26.500 --> 00:05:28.160
Here's a text selection.

00:05:28.210 --> 00:05:31.840
I'll kind of tell you why
that's significant in a minute,

00:05:31.860 --> 00:05:34.520
but I kind of,
I chose this screenshot intentionally

00:05:34.520 --> 00:05:39.400
to kind of show you that there's a
text selection that spans two pages.

00:05:39.400 --> 00:05:41.080
And that's a little interesting.

00:05:41.120 --> 00:05:43.740
I'll tell you about that in a second.

00:05:44.230 --> 00:05:46.940
And finally, and maybe I should
have started with this,

00:05:46.940 --> 00:05:50.290
there's the viewer itself,
whether it's Adobe Reader or Preview or

00:05:50.290 --> 00:05:56.770
any number of Safari or Internet plugins,
there's the application that

00:05:56.770 --> 00:05:57.760
you view the PDF within.

00:05:59.580 --> 00:06:02.590
So the way all these sort
of elements map to PDF Kit,

00:06:02.590 --> 00:06:06.180
the file is represented in
PDF Kit by a PDF document class.

00:06:06.180 --> 00:06:09.130
So if you have a file on disk and,
you know,

00:06:09.290 --> 00:06:14.950
the PDF document will map to some file on
disk or some data or something like that.

00:06:15.670 --> 00:06:19.420
And so sort of file elements like the
number of pages and stuff you'll find

00:06:19.420 --> 00:06:21.420
by asking the PDF document class.

00:06:21.420 --> 00:06:24.640
Pages are represented
by PDF page objects.

00:06:24.690 --> 00:06:27.200
So for each page in a PDF,
there will be a PDF page object

00:06:27.200 --> 00:06:28.560
that represents the file.

00:06:29.600 --> 00:06:32.000
So if you have a PDF document class,
you'll find that the PDF document

00:06:32.090 --> 00:06:33.220
class represents that page.

00:06:33.220 --> 00:06:35.720
If there are annotations on the page,
then from the PDF page object,

00:06:35.830 --> 00:06:38.380
you would get back an array of those
objects and they come to you as they're

00:06:38.380 --> 00:06:40.170
returned as PDF annotation objects.

00:06:40.960 --> 00:06:44.640
PDF outline, if it has one,
is represented by a PDF outline or

00:06:44.640 --> 00:06:47.130
actually several PDF outline objects.

00:06:47.130 --> 00:06:49.540
They kind of form a tree structure.

00:06:50.270 --> 00:06:53.380
If the user does things like
select text and that sort of thing,

00:06:53.380 --> 00:06:55.600
the way you can,
the way we represent that is

00:06:55.600 --> 00:06:57.300
with a PDF selection object.

00:06:58.220 --> 00:06:58.560
It wasn't really a PDF selection object.

00:06:58.710 --> 00:07:03.240
It wasn't really enough to use, say,
if you think of like an NS TextView where

00:07:03.240 --> 00:07:05.790
you just have contiguous text,
you might be able to represent

00:07:05.790 --> 00:07:08.030
a selection with just a range.

00:07:08.880 --> 00:07:12.780
But because of the nature of PDF and
selections can span multiple pages

00:07:12.780 --> 00:07:16.470
and there isn't really sort of
like contiguous text that runs from

00:07:16.470 --> 00:07:19.670
one end of the PDF to the other,
we had to create this object,

00:07:19.750 --> 00:07:21.140
this PDF selection object.

00:07:21.700 --> 00:07:24.150
So it can, from the PDF selection,
you can find out, you know,

00:07:24.170 --> 00:07:25.900
the pages that are
covered by the selection,

00:07:25.990 --> 00:07:28.540
where, you know,
what text is covered by the selection.

00:07:29.540 --> 00:07:29.840
That sort of thing.

00:07:30.350 --> 00:07:33.710
And then finally, the viewer,
PDFKit has the PDF view

00:07:33.710 --> 00:07:36.410
and the PDF thumbnail view.

00:07:36.780 --> 00:07:38.030
And the thumbnail view
is new for Leopard.

00:07:38.760 --> 00:07:40.570
I'll show you that in a second.

00:07:41.910 --> 00:07:46.010
Here's the class hierarchy as of
Tiger and you see that at the top I've

00:07:46.010 --> 00:07:51.000
got PDF view and since it's a subclass
of NS view and NS responder you get all

00:07:51.000 --> 00:07:55.690
those kinds of view things and responder
things so the PDF view has a bounds,

00:07:55.760 --> 00:07:59.340
has a frame, has a draw method,
it can take mouse events,

00:07:59.340 --> 00:08:00.980
key down events, that sort of thing.

00:08:00.980 --> 00:08:06.360
The other class is just a subclass
of NS object so they're kind of more

00:08:06.360 --> 00:08:10.980
basic classes and you see PDF border,
PDF destination,

00:08:10.980 --> 00:08:12.100
those are kind of esoteric.

00:08:12.170 --> 00:08:15.130
I probably won't go into those at
all this session but there's the

00:08:15.130 --> 00:08:16.980
document outline page selection.

00:08:16.980 --> 00:08:22.320
There's the PDF annotation and I didn't
have room on the slide but there's maybe

00:08:22.320 --> 00:08:27.660
a dozen PDF annotation subclasses where
each one of the subclasses will map to a

00:08:27.660 --> 00:08:30.980
particular type of annotation like PDF.

00:08:31.030 --> 00:08:32.870
Like a link annotation for example.

00:08:33.000 --> 00:08:37.940
So there's a PDF annotation
link class to represent that.

00:08:38.120 --> 00:08:41.660
So what we did for Tiger is
we added another view class,

00:08:41.660 --> 00:08:46.290
the PDF thumbnail view and we added
a whole new sort of base class,

00:08:46.290 --> 00:08:47.360
the PDF action.

00:08:47.410 --> 00:08:52.460
And it has a number of subclasses similar
to the annotation and we also added a

00:08:52.550 --> 00:08:55.520
few more annotation subclasses as well.

00:08:55.840 --> 00:09:01.430
So I guess one way to kind of think
of all these PDF Kit classes is to

00:09:01.530 --> 00:09:04.650
really think of them in two camps,
the view classes and everything else.

00:09:04.650 --> 00:09:08.540
So the view classes,
like the thumbnail view and the PDF view,

00:09:08.540 --> 00:09:10.420
those are sort of high level classes.

00:09:10.420 --> 00:09:14.260
And as you might imagine,
they're using all these other classes.

00:09:14.260 --> 00:09:17.660
The PDF view will be
associated with a PDF document.

00:09:17.660 --> 00:09:22.380
From the document it can find out the
pages and display the pages and handle

00:09:22.380 --> 00:09:24.940
annotations and that sort of thing.

00:09:25.740 --> 00:09:31.850
So the rest of the classes I guess
I call utility or kind of base classes.

00:09:31.850 --> 00:09:37.780
And even though PDF view and
PDF thumbnail view use these classes,

00:09:37.830 --> 00:09:41.800
and if you're just writing an
app that just displays a PDF,

00:09:41.800 --> 00:09:45.520
you might only need to really use
the higher level view classes,

00:09:45.520 --> 00:09:47.820
the thumbnail view and the PDF view.

00:09:47.820 --> 00:09:51.110
But it doesn't mean that you
can't use these utility classes

00:09:51.110 --> 00:09:52.800
and take advantage of them.

00:09:52.820 --> 00:09:55.680
And I'll show you in the last
two parts of this session.

00:10:18.990 --> 00:10:22.810
If you saw his demo,
I guess it was Monday,

00:10:22.920 --> 00:10:26.700
I'm going to show you that demo again,
but I'll try to...

00:10:27.430 --> 00:10:30.900
I'll try to explain a little
bit more about what's going on.

00:10:31.060 --> 00:10:35.880
So I'm going into the developer folder
and this is a standard Leopard install.

00:10:36.020 --> 00:10:39.460
So you can,
if you've installed your Leopard,

00:10:39.460 --> 00:10:41.260
you could do this as well.

00:10:41.260 --> 00:10:45.440
Go into the applications and
open the new interface builder.

00:10:47.040 --> 00:10:52.980
I'll go ahead and create
a Cocoa window template.

00:10:52.980 --> 00:10:57.830
And so it's given me
an empty window here.

00:10:58.790 --> 00:11:01.810
If I bring up the library,

00:11:03.030 --> 00:11:05.380
Here are all the objects.

00:11:05.420 --> 00:11:08.380
And like I said,
for this version of Leopard,

00:11:08.380 --> 00:11:09.500
the PDF view is right there.

00:11:09.500 --> 00:11:11.080
It looks like a little PDF icon.

00:11:11.120 --> 00:11:14.900
So I can just drop that in to my view.

00:11:15.030 --> 00:11:16.810
And we're kind of cheating here.

00:11:17.050 --> 00:11:20.600
If I see I'm inside
Interface Builder in PDF Kit,

00:11:20.640 --> 00:11:24.210
I go ahead and give you
some sample content.

00:11:24.450 --> 00:11:26.980
I say cheating because you'll
have to provide your own

00:11:26.980 --> 00:11:28.680
content in your application.

00:11:28.680 --> 00:11:31.130
So here's a PDF view,
here's a thumbnail view.

00:11:31.130 --> 00:11:35.580
I'll control drag from the thumbnail
view to the PDF view and you see that

00:11:35.580 --> 00:11:38.160
one of its outlets is a PDF view.

00:11:38.160 --> 00:11:41.090
So by clicking that and
establishing this relationship,

00:11:41.210 --> 00:11:44.600
the thumbnail view can always sort of,
I don't know,

00:11:44.620 --> 00:11:48.400
sort of parasitically I guess,
it can kind of query the view to find

00:11:48.400 --> 00:11:52.450
out the document that the view is showing
and any of the sort of display mode,

00:11:52.450 --> 00:11:57.000
whatever display mode the document is in,
the thumbnail view can, or sorry,

00:11:57.000 --> 00:12:01.130
any display mode that the PDF view is in,
the PDF thumbnail view

00:12:01.140 --> 00:12:03.420
can kind of get that from.

00:12:03.420 --> 00:12:10.870
So it's important to tell the
thumbnail view whose PDF view he has.

00:12:11.310 --> 00:12:11.310
Let me, let me see.

00:12:11.470 --> 00:12:14.830
Before I group these together,
I'll show you a few other things that

00:12:14.840 --> 00:12:16.640
you can find right here in the inspector.

00:12:16.640 --> 00:12:20.520
If I bring up the inspector and
interface builder for the PDF view,

00:12:20.520 --> 00:12:23.260
you can see a few settings.

00:12:23.260 --> 00:12:25.560
I can change whether
or not it auto scales.

00:12:25.560 --> 00:12:28.440
I can say display two up.

00:12:28.540 --> 00:12:32.400
I can turn on and off page breaks.

00:12:32.400 --> 00:12:35.010
There's other ways you can
configure the PDF view as well,

00:12:35.010 --> 00:12:37.120
but you have to do that programmatically.

00:12:37.120 --> 00:12:40.060
These are the only ones that we
expose through the inspector.

00:12:40.460 --> 00:12:43.960
I'll go ahead and go back to
the single page continuous.

00:12:43.960 --> 00:12:47.180
While I'm here, I'll check the springs.

00:12:47.340 --> 00:12:49.160
I'll set the springs
on the thumbnail view.

00:12:49.160 --> 00:12:52.420
The thumbnail view has
a few settings as well.

00:12:52.420 --> 00:12:55.220
We can set the maximum
size for the thumbnails,

00:12:55.220 --> 00:12:58.460
the maximum number of columns,
a few other things.

00:12:58.460 --> 00:13:07.780
Let me go ahead and group these into a
split view and set the springs on that.

00:13:08.390 --> 00:13:13.700
So, kind of the point of this
demo is to show you how much

00:13:14.210 --> 00:13:17.180
How much you get, I guess,
for free from PDF Kit,

00:13:17.180 --> 00:13:21.100
from PDF View and PDF Thumbnail
View without writing any code.

00:13:21.440 --> 00:13:23.740
Again, like I said, I'm kind of cheating.

00:13:23.740 --> 00:13:27.600
I'm giving you a sample document here,
but you see I can select text.

00:13:27.600 --> 00:13:28.480
I can scroll.

00:13:28.480 --> 00:13:35.730
I can even drag this text to the desktop
and get a text clipping out of it.

00:13:35.800 --> 00:13:43.100
I can, if there's links in the document,
you see the cursor changes to a hand.

00:13:43.100 --> 00:13:44.880
I get a tool tip telling
me where that link,

00:13:45.010 --> 00:13:46.290
the destination for that link.

00:13:46.290 --> 00:13:47.100
I click.

00:13:47.100 --> 00:13:47.790
It takes me there.

00:13:47.800 --> 00:13:51.750
And all the while I'm doing this,
the thumbnail view is

00:13:51.750 --> 00:13:53.580
kind of following along.

00:13:53.790 --> 00:13:56.800
It's getting notifications from the
PDF view that the page has changed.

00:13:56.800 --> 00:14:00.800
And so over here, it's updating and
selecting the current page.

00:14:00.800 --> 00:14:05.800
And similarly, or in reverse,
I can select pages in the thumbnail view.

00:14:05.800 --> 00:14:09.510
And it tells its PDF view,
go to this page, go to this page,

00:14:09.620 --> 00:14:10.630
go to this page.

00:14:10.790 --> 00:14:17.250
And something that we added because
we could is in the thumbnail view,

00:14:17.370 --> 00:14:17.800
you can reorder the pages.

00:14:17.800 --> 00:14:22.500
So I can drag page two to page one,
and you'll see that sure enough,

00:14:22.500 --> 00:14:25.800
the title page has moved
to the second place,

00:14:25.800 --> 00:14:29.800
and the Apple legalese has moved
to the top of the document.

00:14:29.800 --> 00:14:33.630
So I can reorder pages however I want.

00:14:33.920 --> 00:14:35.800
If I had two thumbnail views up,
I could just drag them to

00:14:35.800 --> 00:14:35.800
the top of the document.

00:14:35.870 --> 00:14:39.630
I can even drag a page from
one PDF into another PDF.

00:14:40.030 --> 00:14:42.720
And in fact,
if you've got Leopard running,

00:14:42.720 --> 00:14:45.790
you can run preview on
Leopard and try that.

00:14:45.830 --> 00:14:48.720
Open two PDFs and drag
pages from one to the other.

00:14:49.090 --> 00:14:52.800
Because, as I say,
preview is built on top of PDF kit.

00:14:53.170 --> 00:14:56.850
Since we had drag support,
we went ahead and added

00:14:57.040 --> 00:14:59.800
support for dragging in files.

00:14:59.800 --> 00:15:02.800
So if I grab a couple of images here.

00:15:02.800 --> 00:15:03.480
If I drag a couple of images
into the thumbnail view,

00:15:03.490 --> 00:15:03.750
what happens?

00:15:03.810 --> 00:15:04.800
It's going to drag a couple of
images into the thumbnail view.

00:15:04.800 --> 00:15:09.510
What it's doing is generating
new PDF pages and inserting them

00:15:09.510 --> 00:15:10.800
into the current PDF document.

00:15:10.800 --> 00:15:15.620
And sure enough,
they just behave like full-fledged

00:15:15.870 --> 00:15:17.800
PDF document citizens.

00:15:17.820 --> 00:15:21.450
And if I were to save
this PDF out or print it,

00:15:21.450 --> 00:15:23.760
the pages would be there.

00:15:23.800 --> 00:15:28.790
I'll show you something else
that Peter didn't show you.

00:15:28.800 --> 00:15:31.800
I can even drag PDFs in.

00:15:31.800 --> 00:15:33.800
Let's see.

00:15:33.800 --> 00:15:35.780
I'm going to take a small one.

00:15:35.850 --> 00:15:37.800
Here's a two-page PDF.

00:15:37.800 --> 00:15:39.800
I'll insert this two-page PDF there.

00:15:39.940 --> 00:15:42.800
So I just inserted
another PDF into this PDF.

00:15:42.800 --> 00:15:45.800
So anyway, this is kind of some of
the stuff that you get.

00:15:45.800 --> 00:15:46.800
Thanks.

00:15:48.750 --> 00:15:52.590
that you get for free from PDF Kit.

00:15:52.660 --> 00:15:54.930
I can go back to the slides now.

00:15:57.640 --> 00:16:03.350
But I think that's a great demo,
but in a way it's kind of misleading,

00:16:03.560 --> 00:16:07.450
not only because I create
kind of fake content for you,

00:16:07.750 --> 00:16:10.200
but I think it's a little misleading
because I think it can give the

00:16:10.200 --> 00:16:14.110
impression that that's all PDF Kit is,
is that it just displays PDF content and,

00:16:14.110 --> 00:16:16.720
you know,
it's kind of like a PDF viewer in a box.

00:16:16.790 --> 00:16:19.300
And it kind of is,
but I like to think there's more,

00:16:19.380 --> 00:16:21.880
so I'll focus on that on
the last two sections.

00:16:21.880 --> 00:16:25.120
But let me go ahead and continue with
sort of like how you would write an

00:16:25.120 --> 00:16:27.050
application to display PDF content.

00:16:27.500 --> 00:16:29.730
I cheated.

00:16:29.780 --> 00:16:32.940
You do have to associate a
PDF document somehow with that view.

00:16:32.940 --> 00:16:36.330
So the way you do that is
with a PDF document class,

00:16:36.330 --> 00:16:40.890
and this is probably the only utility
class you really would really have to use

00:16:40.890 --> 00:16:43.440
if all you wanted to do was display PDF.

00:16:43.440 --> 00:16:45.760
You have to create a PDF document object.

00:16:45.760 --> 00:16:49.530
In this particular application I have,
say, a file on disk,

00:16:49.530 --> 00:16:53.730
so I'm going to call PDF document Alec
and it with URL and then just pass

00:16:53.730 --> 00:16:56.280
it a URL that represents that file.

00:16:56.280 --> 00:16:59.830
If I had data, instead,
there's a similar call to create

00:16:59.930 --> 00:17:02.100
a PDF document from NSData.

00:17:02.100 --> 00:17:05.120
And as long as everything goes okay,
as long as I passed it a real PDF,

00:17:05.210 --> 00:17:07.800
I'll get back a PDF document object.

00:17:07.840 --> 00:17:11.710
So I just, on my view,
let's say it's called my PDF view,

00:17:11.790 --> 00:17:13.060
I just call set document.

00:17:13.300 --> 00:17:16.380
And as soon as I do that,
the PDF view retains the document,

00:17:16.380 --> 00:17:18.100
so first of all I can release it.

00:17:18.570 --> 00:17:21.940
But just as there's a set
document method on the view,

00:17:21.940 --> 00:17:25.360
there's also a document method,
so I can always ask the document,

00:17:25.360 --> 00:17:27.480
or sorry, I can always ask the
view for its document.

00:17:27.530 --> 00:17:30.490
Again, in case I want to know, you know,
the number of pages or

00:17:30.490 --> 00:17:31.750
something like that.

00:17:31.820 --> 00:17:33.770
So as far as I'm concerned,
I can just forget about

00:17:33.770 --> 00:17:35.080
the document at this point.

00:17:35.110 --> 00:17:37.590
So it's really just one or
two lines of code and you can

00:17:37.680 --> 00:17:39.310
forget all about PDF document.

00:17:39.340 --> 00:17:44.160
But, oh, and I should say too, well,
you know, let me go to the next slide

00:17:44.160 --> 00:17:46.160
because it kind of ties in.

00:17:46.320 --> 00:17:49.310
As soon as you associate a
PDF document with the view,

00:17:49.450 --> 00:17:53.120
there's all kinds of things that
the PDF view now has access to.

00:17:53.120 --> 00:17:57.360
And here are some of the attributes
that you can call methods on a PDF.

00:17:57.500 --> 00:18:00.000
So you can call the
PDF document that you can call,

00:18:00.000 --> 00:18:00.680
and these are the things
that the PDF view is doing.

00:18:00.680 --> 00:18:02.710
So you can find out the number of pages.

00:18:02.740 --> 00:18:06.310
And by extension,
you can imagine that the thumbnail view

00:18:06.310 --> 00:18:08.900
is also finding out the number of pages,
so it can determine how

00:18:09.090 --> 00:18:10.120
many thumbnails to draw.

00:18:10.120 --> 00:18:14.550
For each one of the pages in the PDF,
you can get that page object.

00:18:14.640 --> 00:18:17.430
And so there are methods
on the PDF document to say,

00:18:17.490 --> 00:18:21.820
give me the page at index, you know, I.

00:18:21.820 --> 00:18:25.680
I should maybe mention
that PDF kit is zero based.

00:18:25.680 --> 00:18:27.420
So if it's a five page page.

00:18:27.510 --> 00:18:29.960
And you want the last page,
you'd get page four.

00:18:30.040 --> 00:18:32.500
And page zero represents the first page.

00:18:32.580 --> 00:18:35.100
So there's methods on
the document for adding,

00:18:35.100 --> 00:18:37.710
removing, deleting pages,
reordering pages.

00:18:37.810 --> 00:18:41.010
And again,
you can imagine that the thumbnail view

00:18:41.010 --> 00:18:42.530
basically is calling those methods.

00:18:42.600 --> 00:18:45.140
But there's no reason you can't
programmatically call those

00:18:45.210 --> 00:18:50.100
methods as well if you want to
insert pages into a PDF document.

00:18:50.400 --> 00:20:47.200
[Transcript missing]

00:20:48.810 --> 00:20:53.800
Some of these, well,
some of PDF View's aspects.

00:20:53.810 --> 00:20:55.460
I'll open up the PDF Kit guide.

00:20:55.460 --> 00:20:59.800
So here's the preview on Leopard
if you haven't seen it already.

00:21:00.170 --> 00:21:01.400
Change the UI a little bit.

00:21:01.470 --> 00:21:02.980
So PDF View on the left.

00:21:02.980 --> 00:21:07.330
I've got a toolbar and there's a
previous next button and you'll see

00:21:07.470 --> 00:21:10.180
that the previous button is disabled.

00:21:10.330 --> 00:21:12.560
I click on next,
it goes to the next page.

00:21:12.740 --> 00:21:14.630
Now the previous button is enabled.

00:21:14.630 --> 00:21:16.260
Next, next, next, etc.

00:21:16.260 --> 00:21:22.320
I can see if I customize the toolbar,
there's a few more tools

00:21:22.320 --> 00:21:23.760
I can bring in here.

00:21:23.760 --> 00:21:26.000
Here's a back forward button.

00:21:26.000 --> 00:21:28.470
Here's a page text field.

00:21:28.940 --> 00:21:32.800
So if I click on a link here,
like where does this go, to page 10,

00:21:32.800 --> 00:21:34.390
I'm on page 5, I click on the link.

00:21:34.390 --> 00:21:38.580
If I hit the back button now,
I go from page 10 back to page 5.

00:21:38.640 --> 00:21:41.350
So PDF view is maintaining
a whole history,

00:21:41.350 --> 00:21:44.180
kind of like a navigation
history for you.

00:21:44.180 --> 00:21:48.450
And I'm able to just wire my
back and forward buttons or,

00:21:48.450 --> 00:21:53.640
you know, menu items up to the PDF views
back and forward methods.

00:21:54.720 --> 00:21:56.840
I can enter in a specific
page number here.

00:21:56.890 --> 00:21:58.850
Let me type in, you know, page 20.

00:21:58.850 --> 00:21:59.480
Hit enter.

00:21:59.480 --> 00:22:00.680
It goes to page 20.

00:22:00.680 --> 00:22:04.070
And you'll notice, too, that as I've been
navigating the document,

00:22:04.070 --> 00:22:06.260
that page number has
been updating as well.

00:22:06.260 --> 00:22:08.350
I'll show you how that's done.

00:22:08.360 --> 00:22:11.520
Here's some kind of more display options.

00:22:11.520 --> 00:22:13.400
I can zoom in, zoom out.

00:22:13.400 --> 00:22:18.810
You saw in Interface Builder how I was
able to change the kind of the layout,

00:22:18.810 --> 00:22:20.640
one page, two page.

00:22:20.640 --> 00:22:23.520
There's some other, let me go to page 1,
I'll show you.

00:22:23.640 --> 00:22:27.690
There's some esoteric things in here,
too, that you can find buried

00:22:27.690 --> 00:22:29.220
in Previews Preferences.

00:22:29.280 --> 00:22:32.230
You can turn on and off anti-aliasing,
for example.

00:22:32.230 --> 00:22:33.920
It's probably not obvious up here.

00:22:33.920 --> 00:22:36.210
It's pretty subtle for
large text like that.

00:22:36.240 --> 00:22:40.080
Greeking,
everyone asks me what text Greeking is.

00:22:40.080 --> 00:22:43.700
If I change it to 50,
you see how the text turned

00:22:43.730 --> 00:22:45.960
into those gray rectangles?

00:22:45.990 --> 00:22:48.600
It's kind of a performance enhancement.

00:22:48.660 --> 00:22:52.560
It says, if the font is less than
the Greeking threshold,

00:22:52.560 --> 00:22:54.320
don't even bother to draw the characters.

00:22:54.320 --> 00:22:56.080
Just represent them as gray boxes.

00:22:56.090 --> 00:22:58.700
You can imagine, even with the,
I think the default Greeking

00:22:58.700 --> 00:23:02.850
threshold is probably three,
not three points, three pixels, because,

00:23:02.990 --> 00:23:04.240
let's do that again.

00:23:04.240 --> 00:23:07.310
If I were to zoom in here, for example,
you'll see that as soon as the

00:23:07.360 --> 00:23:11.840
text goes past that threshold,
it's not Greek.

00:23:11.840 --> 00:23:13.680
So it's not a function of point size.

00:23:13.680 --> 00:23:16.440
It's a function of how
large the text gets drawn.

00:23:16.440 --> 00:23:18.130
So I'm glad I explained that.

00:23:18.130 --> 00:23:19.200
I get that a lot.

00:23:19.200 --> 00:23:22.940
But to give you sort of a
practical example of it,

00:23:22.940 --> 00:23:26.800
the thumbnail view here is
with the Greeking set to three.

00:23:26.800 --> 00:23:30.920
Obviously, there's no point in rendering
all the text in these thumbnails,

00:23:30.920 --> 00:23:31.800
because you're not going
to be able to read it.

00:23:31.800 --> 00:23:33.560
So it can be a lot quicker.

00:23:33.640 --> 00:23:38.400
The PDF page can draw its content a
lot quicker if the Greeking threshold

00:23:38.600 --> 00:23:41.080
is set to some reasonable value.

00:23:41.300 --> 00:23:43.200
Let me just show you the
outline again real quick.

00:23:43.250 --> 00:23:45.340
So this PDF has an outline.

00:23:45.470 --> 00:23:49.020
If I collapse it,
you'll see there's something called

00:23:49.020 --> 00:23:52.940
PDF Kit Programming Guide and
it's taking me to the first page.

00:23:52.940 --> 00:23:57.740
It's got a twist down disclosure
triangle which tells me that it has

00:23:57.740 --> 00:24:00.360
children and in fact it has six children.

00:24:00.460 --> 00:24:04.750
Its first child is contents, tables,
introduction and then its fourth

00:24:04.890 --> 00:24:06.660
child has children as well.

00:24:06.740 --> 00:24:09.590
So I can twist that down and you
see that it has two children.

00:24:10.190 --> 00:24:13.660
PDF basics,
more children and then these are sort

00:24:13.660 --> 00:24:19.180
of I guess you think of them as sort
of like leaf nodes so the outline is

00:24:19.180 --> 00:24:24.430
kind of a tree structure and it starts
actually it doesn't start here at the

00:24:24.430 --> 00:24:28.800
PDF kit programming guide it actually
starts at the root and the root is kind

00:24:28.840 --> 00:24:33.340
of a special instance of the PDF outline
it's never drawn it's never displayed it

00:24:33.340 --> 00:24:38.900
acts simply as a container and in fact
the root in this example for this PDF has

00:24:38.900 --> 00:24:44.000
only one child the PDF kit programming
guide but then that is a PDF outline

00:24:44.000 --> 00:24:50.590
as well which has let me twist this up
again which has six children etc all

00:24:50.590 --> 00:24:55.690
the way down so let me go back to the
slides and I'll kind of show you how you

00:24:56.090 --> 00:24:58.000
Where did I leave the clicker?

00:24:58.000 --> 00:24:59.490
I'll show you how you do that in code.

00:24:59.940 --> 00:25:02.750
Well, it's pretty straightforward,
the navigation part.

00:25:02.750 --> 00:25:06.140
So my next button, previous button,
or menu items,

00:25:06.140 --> 00:25:09.530
I just wire those up to go to next page,
go to previous page.

00:25:09.570 --> 00:25:13.470
There's a go back, go forward,
and then again, PDF view is maintaining

00:25:13.570 --> 00:25:14.870
the history for you.

00:25:14.880 --> 00:25:17.370
If you want to enable and
disable your controls,

00:25:17.370 --> 00:25:20.720
there's some convenience method,
can go back, can go forward,

00:25:20.720 --> 00:25:24.970
that just return Boolean so you can just
set those up to enable your controls.

00:25:25.020 --> 00:25:27.870
And similarly,
there's a can go to next page,

00:25:27.870 --> 00:25:30.040
can go to previous page as well.

00:25:30.040 --> 00:25:34.580
So for the example where the text
field where I typed in page 20,

00:25:34.810 --> 00:25:36.370
that requires two lines of code.

00:25:36.370 --> 00:25:39.510
You have to take the 20 that
the user entered and subtract

00:25:39.520 --> 00:25:41.180
one because we're zero based.

00:25:41.180 --> 00:25:43.450
And then there's a
method on the document.

00:25:43.450 --> 00:25:45.910
And here's an example
again where the PDF view,

00:25:45.910 --> 00:25:48.440
since it holds the document,
I can ask my PDF view to

00:25:48.560 --> 00:25:49.950
give me the PDF document.

00:25:49.950 --> 00:25:52.670
And then the document has
the page and index method.

00:25:52.770 --> 00:25:55.820
So I say to the document,
give me page and index.

00:25:56.170 --> 00:25:56.500
19.

00:25:56.500 --> 00:25:58.860
And I get back a PDF page object.

00:25:58.860 --> 00:26:02.400
And so on the PDF view,
there's a method called go to page,

00:26:02.470 --> 00:26:05.100
takes that object, and bam,
you go to page 20.

00:26:05.100 --> 00:26:07.180
So pretty straightforward.

00:26:07.180 --> 00:26:10.750
The reverse where as I navigated
through the document that

00:26:10.860 --> 00:26:14.410
text field was updating,
that's handled with a notification.

00:26:14.410 --> 00:26:17.010
And there's a PDF view
page change notification.

00:26:17.010 --> 00:26:20.250
In fact, that's what the thumbnail
view listens to as well.

00:26:20.250 --> 00:26:23.220
So if your application listens
to the page change notification,

00:26:23.290 --> 00:26:25.980
you can find out the current page,
get the page's label,

00:26:25.980 --> 00:26:25.980
and then you can go back
and do the same thing.

00:26:26.000 --> 00:26:28.250
So you can see that the page change
notification is now available,

00:26:28.250 --> 00:26:29.320
which is like the page number.

00:26:29.320 --> 00:26:30.850
And you can display
that in your text field.

00:26:30.850 --> 00:26:32.040
So that's also trivial to do.

00:26:33.380 --> 00:26:36.900
So some of the other ways
that you can sort of handle

00:26:36.900 --> 00:26:39.550
the PDF view display options,
I mentioned,

00:26:39.690 --> 00:26:42.710
or I showed you in interface builder
how you can change the layout.

00:26:42.710 --> 00:26:45.920
And if you do that programmatically,
there's a call called set display

00:26:46.040 --> 00:26:48.860
mode and we've defined some
constants that are the sort of

00:26:48.860 --> 00:26:50.700
layouts that PDF view supports.

00:26:51.400 --> 00:26:53.450
You can change the display boxes.

00:26:53.590 --> 00:26:54.920
You can turn on and off page breaks.

00:26:54.920 --> 00:26:55.550
I showed you that.

00:26:55.630 --> 00:26:57.670
Scaling, I showed you zooming in,
zooming out.

00:26:57.960 --> 00:26:59.080
Greeking, anti-aliasing.

00:26:59.080 --> 00:27:03.540
I'm kind of hesitant to talk
about the display boxes.

00:27:03.540 --> 00:27:08.000
It's kind of a strange PDF thing that,
gosh, now I guess I have to.

00:27:08.000 --> 00:27:10.800
Suffice it to say that
PDF pages can have,

00:27:10.800 --> 00:27:14.520
not always, but they can have
different sort of bounds,

00:27:14.630 --> 00:27:15.700
basically.

00:27:15.700 --> 00:27:19.470
What you're supposed to typically use,
like in a display application,

00:27:19.470 --> 00:27:22.860
like in Adobe Reader or Preview,
is to show the crop bounds,

00:27:22.860 --> 00:27:24.380
the crop box for the pages.

00:27:24.460 --> 00:27:27.150
But a page could have a
media box that's larger,

00:27:27.150 --> 00:27:30.590
that might have extra white
space that's good for printing,

00:27:30.590 --> 00:27:33.810
but not necessarily,
it might take up too much screen

00:27:33.850 --> 00:27:37.150
real estate if you were to
display it using the media box.

00:27:37.150 --> 00:27:41.750
There's bleed boxes, art box, trim box,
and PDF Kit supports all those things.

00:27:41.860 --> 00:27:46.250
And you can tell the PDF view to show
the media box or show the crop box.

00:27:46.710 --> 00:27:48.990
So the thumbnail view,
I don't think there's much

00:27:49.050 --> 00:27:50.280
I really have to say about that.

00:27:50.280 --> 00:27:52.580
I pretty much showed you
all the aspects of that.

00:27:52.630 --> 00:27:54.510
It's got an outlet view.

00:27:54.860 --> 00:27:57.560
There's a few display options on that,
the maximum number of columns

00:27:57.660 --> 00:27:58.800
you want it to display.

00:27:58.800 --> 00:28:04.320
It gets the page change notification,
get drag and drop, delete.

00:28:04.320 --> 00:28:07.800
I guess the one thing I should mention
though is if the user does that,

00:28:07.890 --> 00:28:10.530
if they reorder the pages or
drag in images or delete a

00:28:10.530 --> 00:28:14.060
page or something like that,
the PDF thumbnail view will send

00:28:14.060 --> 00:28:18.130
your application or whoever's
listening for this notification

00:28:18.130 --> 00:28:20.400
like a PDF edited notification.

00:28:20.400 --> 00:28:24.580
So that way your application can set the
dirty flag or whatever you want to do.

00:28:24.650 --> 00:28:27.500
You can also turn off all
that page dragging stuff.

00:28:27.560 --> 00:28:33.570
So here's how you get the
outline from the PDF document.

00:28:33.580 --> 00:28:34.300
There's a method called PDF.

00:28:34.320 --> 00:28:35.200
It's called outline root.

00:28:35.250 --> 00:28:38.480
And again, I'm asking for the
PDF view for its document.

00:28:38.480 --> 00:28:41.760
So I get back this PDF document
object and I ask for its outline root.

00:28:41.930 --> 00:28:44.740
And what I get back is if
the PDF has an outline,

00:28:44.740 --> 00:28:46.950
I get back a PDF outline object.

00:28:46.960 --> 00:28:48.560
If it doesn't have one, I get back null.

00:28:48.560 --> 00:28:51.390
And so that's sort of
the root PDF outline.

00:28:51.400 --> 00:28:55.240
From that, I can ask for its children
and its children's children,

00:28:55.240 --> 00:28:56.080
et cetera.

00:28:56.080 --> 00:29:01.810
And that's how I can build
up that whole outline view.

00:29:01.820 --> 00:29:04.710
Which, by the way,
that is just a... That is

00:29:04.860 --> 00:29:06.180
just an NS outline view.

00:29:06.180 --> 00:29:10.100
There's no special
PDF outline view for PDFKit.

00:29:10.100 --> 00:29:12.400
So here's some other
attributes of the outline.

00:29:12.400 --> 00:29:16.740
And I should mention, too,
that there's some sample code, actually.

00:29:16.740 --> 00:29:24.100
If you go to developers, examples,
I think it's under Quartz, PDFKit.

00:29:24.100 --> 00:29:27.980
There's a PDFKit viewer application.

00:29:27.980 --> 00:29:31.030
And they show you how
to display the outline.

00:29:31.060 --> 00:29:33.380
It's probably four or five lines of code.

00:29:33.380 --> 00:29:34.020
You just give it.

00:29:34.320 --> 00:29:35.760
It's an NS outline view.

00:29:35.760 --> 00:29:37.800
And you put an NS outline
view in your window.

00:29:37.800 --> 00:29:40.730
And you just supply a couple
of the delegate methods.

00:29:40.740 --> 00:29:43.670
And basically the outline
view just runs with it.

00:29:43.740 --> 00:29:46.510
And you're able to display
the whole tree of the outline.

00:29:46.520 --> 00:29:50.740
Some of the outline attributes
are the number of children.

00:29:50.740 --> 00:29:54.000
So that's how many children
the outline item has.

00:29:54.000 --> 00:29:56.420
For each of its children,
you can get those children.

00:29:56.420 --> 00:29:59.980
And those children are themselves
PDF outline objects that may or

00:29:59.980 --> 00:30:01.240
may not have children as well.

00:30:01.260 --> 00:30:02.800
There is a label.

00:30:02.800 --> 00:30:04.230
That's the string that gets displayed.

00:30:04.320 --> 00:30:05.420
The root, again, is special.

00:30:05.590 --> 00:30:06.670
It won't have a label.

00:30:06.780 --> 00:30:08.860
And there's a destination.

00:30:08.980 --> 00:30:12.530
And that's where if the
user clicks on this item,

00:30:12.530 --> 00:30:13.980
what should I do?

00:30:13.980 --> 00:30:14.980
What action should I perform?

00:30:14.980 --> 00:30:18.110
Generally, it's a destination somewhere
within the document.

00:30:18.220 --> 00:30:20.350
Go to page 14 or whatever.

00:30:20.410 --> 00:30:22.570
Again, the root outline is special.

00:30:22.580 --> 00:30:24.780
It won't have a destination.

00:30:24.780 --> 00:30:28.720
So what we did in Leopard,
and there's a lot of

00:30:28.720 --> 00:30:30.850
editing methods here.

00:30:30.980 --> 00:30:32.170
First of all, there's an init method.

00:30:32.180 --> 00:30:34.320
So you can create a PDF outline.

00:30:34.320 --> 00:30:37.150
So your application might,
if there's no outline

00:30:37.150 --> 00:30:40.960
associated with a document,
your application might, for example,

00:30:40.960 --> 00:30:42.320
create an outline object.

00:30:42.420 --> 00:30:44.320
Say, OK, well,
this is going to be the root.

00:30:44.550 --> 00:30:47.080
Then you can create
other outline objects.

00:30:47.080 --> 00:30:50.230
Let's say you're going to have,
let's say the document has five chapters.

00:30:50.410 --> 00:30:53.160
So you might create five
more PDF outline objects.

00:30:53.160 --> 00:30:56.110
And for these, you would set the label,
chapter one, chapter two,

00:30:56.110 --> 00:30:57.530
chapter three on each of those.

00:30:57.640 --> 00:31:00.240
So there's a set label method.

00:31:00.240 --> 00:31:02.620
Once you have those five outline items,
you'll want to make them

00:31:02.700 --> 00:31:03.480
children of the root.

00:31:03.660 --> 00:31:07.540
So there's a set child or add child
method so that you can take the five,

00:31:07.730 --> 00:31:11.700
add all of those to the root,
and now you've essentially got your tree.

00:31:11.700 --> 00:31:14.740
For each of those children,
then you can set an action.

00:31:14.740 --> 00:31:17.960
You can say chapter one goes
to page four and chapter two

00:31:17.960 --> 00:31:20.100
goes to page 14 or whatever.

00:31:20.270 --> 00:31:23.020
And then finally,
as I mentioned on the PDF document slide,

00:31:23.230 --> 00:31:26.040
then you finally you can say set
outline root and then the document's

00:31:26.040 --> 00:31:27.620
going to retain the whole tree.

00:31:27.620 --> 00:31:28.570
You can release it.

00:31:28.730 --> 00:31:33.780
And when you save that
document out in Leopard,

00:31:33.780 --> 00:31:35.320
the whole outline gets preserved.

00:31:35.550 --> 00:31:38.670
And in fact, again,
if you want to sort of try that out,

00:31:38.850 --> 00:31:43.880
go into preview on your Leopard,
your Leopard install and open a

00:31:43.880 --> 00:31:46.900
PDF that has an outline and save it.

00:31:46.900 --> 00:31:49.820
And you'll see that the that
the outline is preserved.

00:31:50.020 --> 00:31:52.670
And in fact, I should say, too,
I don't think I'll

00:31:52.670 --> 00:31:54.070
have time to demo this.

00:31:54.230 --> 00:31:55.840
But if you kind of play
around with preview,

00:31:55.980 --> 00:31:59.150
I don't know that I don't know that
this is going to stay in when we ship.

00:31:59.260 --> 00:32:03.240
But right now there's a way that
you can go in and create and edit.

00:32:03.410 --> 00:32:09.300
And change the outline of the PDF inside
preview on the Leopard install.

00:32:09.300 --> 00:32:11.360
OK, so.

00:32:11.380 --> 00:32:15.070
Let me go once more to preview
just to show you searching.

00:32:15.770 --> 00:32:21.010
Okay, I'm going to type in outline.

00:32:21.480 --> 00:32:24.190
Okay,
so what Preview did is it went out and,

00:32:24.320 --> 00:32:30.390
or rather I should say PDF Kit did,
it went out and found 123 occurrences

00:32:30.410 --> 00:32:32.320
of the word outline in this document.

00:32:32.420 --> 00:32:34.080
And the first one is selected here.

00:32:34.200 --> 00:32:36.140
You see that it was found on page three.

00:32:36.140 --> 00:32:37.110
Section.

00:32:37.250 --> 00:32:37.710
Great.

00:32:37.950 --> 00:32:39.950
There's another name.

00:32:39.950 --> 00:32:41.620
So think outline.

00:32:41.620 --> 00:32:43.210
Think bookmark.

00:32:43.330 --> 00:32:48.860
The first instance was found in
the contents outline or section.

00:32:48.860 --> 00:32:52.600
If I switch back to the outline you'll
see that it's going to show you that,

00:32:52.600 --> 00:32:55.700
yeah, right here there's a section,
one of the items in the

00:32:55.700 --> 00:32:57.350
outline is called contents.

00:32:57.350 --> 00:33:01.540
So in the search result it's telling
you that this instance of the word

00:33:01.540 --> 00:33:02.910
outline was found in the contents.

00:33:02.950 --> 00:33:06.110
And in fact on the right there's,
let me make this bigger

00:33:06.110 --> 00:33:08.420
so that you can see,
there's a whole bunch

00:33:08.450 --> 00:33:11.300
of sample text here,
kind of contextual text that

00:33:11.300 --> 00:33:14.410
shows you other text that
was found around that word.

00:33:14.410 --> 00:33:16.770
In the middle is the word outline there.

00:33:16.770 --> 00:33:21.300
And you see that pages 10, outlines 11,
that's some of the text that

00:33:21.300 --> 00:33:21.380
was found around that word.

00:33:21.400 --> 00:33:25.380
The next example was
also found on page three.

00:33:25.380 --> 00:33:29.930
And as I'm selecting these over in the
table view you'll see that they're being

00:33:29.930 --> 00:33:31.860
selected over in the PDF view as well.

00:33:31.860 --> 00:33:37.310
Then there were four of them
found on page five in the tables,

00:33:37.440 --> 00:33:40.670
figures, and listings section.

00:33:40.670 --> 00:33:43.120
One was found in the introduction.

00:33:43.120 --> 00:33:46.780
But one thing that's kind of nice is,
sorry, is that as soon as

00:33:46.780 --> 00:33:49.720
you're able to do that,
as soon as you're able to,

00:33:49.720 --> 00:33:51.380
for any given instance of the word,
you're able to find the word outline.

00:33:51.400 --> 00:33:56.030
So if you're able to find the word,
find out the page, the outline section,

00:33:56.130 --> 00:33:59.290
sample text,
what you can do is do things like this.

00:33:59.290 --> 00:34:01.300
You see the check box in the top.

00:34:01.330 --> 00:34:05.560
We've got above the search results
we've got group by section.

00:34:05.560 --> 00:34:10.310
And if I check that box we've kind
of switched in a new table view that

00:34:10.310 --> 00:34:13.280
shows you kind of a relevancy ranking.

00:34:13.340 --> 00:34:16.770
So you see that 88 instances of
the word outline were found in the

00:34:16.900 --> 00:34:18.770
section called creating outlines.

00:34:18.860 --> 00:34:21.380
So maybe that allows a user,
let me see here.

00:34:21.400 --> 00:34:25.360
turn on the scrolling here.

00:34:26.150 --> 00:34:30.610
So now that tells the user that maybe
this is the section of the document

00:34:30.700 --> 00:34:34.000
that you're looking for and you see
that every instance in this case

00:34:34.020 --> 00:34:36.000
of the word outline is highlighted.

00:34:36.000 --> 00:34:39.000
So that's that.

00:34:39.000 --> 00:34:42.650
I'll go back to the slides and I'll
show you how you can do things like

00:34:42.650 --> 00:34:44.940
that or even more in your application.

00:34:45.140 --> 00:34:49.000
So there's kind of two ways of
searching that PDF Kit supports.

00:34:49.000 --> 00:34:55.000
One method is I call search method one,
well I call it the like text edit

00:34:55.000 --> 00:34:59.140
style of searching where maybe
a dialogue box comes up and the

00:34:59.140 --> 00:35:01.000
user types in a word like outline.

00:35:01.000 --> 00:35:02.990
And there's a next and a previous button.

00:35:03.110 --> 00:35:06.670
And they click on next and it finds the
first instance and they click on next

00:35:06.670 --> 00:35:09.000
again and it finds the next instance,
etc.

00:35:09.000 --> 00:35:14.850
That's supported in PDF Kit but
I'm not going to go into that.

00:35:15.020 --> 00:35:17.850
I'll instead show you what preview
is doing and I call that the sort

00:35:17.890 --> 00:35:21.790
of Google search method which is
search method two to say basically

00:35:21.890 --> 00:35:25.000
go out and just find every
instance of the word outline.

00:35:25.000 --> 00:35:28.310
And the way you do that
is at the document level,

00:35:28.310 --> 00:35:32.220
the PDF document,
you say begin find string and you pass

00:35:32.220 --> 00:35:35.000
in the string outline and options.

00:35:35.000 --> 00:35:39.190
So these are app kit search options
so I can say search backwards,

00:35:39.190 --> 00:35:42.000
case insensitive search
or literal search.

00:35:42.000 --> 00:35:44.850
And the PDF document is
just going to go off.

00:35:45.000 --> 00:35:45.950
It's an asynchronous call.

00:35:46.030 --> 00:35:47.860
You make the call and you're done.

00:35:48.150 --> 00:35:51.600
The user can continue
to use your application,

00:35:51.600 --> 00:35:54.970
resize the window, click on links, etc.

00:35:55.140 --> 00:35:57.430
PDF document is off racing
along trying to find every

00:35:57.430 --> 00:35:59.000
instance of the word outline.

00:35:59.000 --> 00:36:02.000
It's going to start on page one
and search for the word outline.

00:36:02.000 --> 00:36:03.670
Go to page two,
page three and it's going to work

00:36:03.670 --> 00:36:05.000
its way through the whole document.

00:36:05.000 --> 00:36:08.730
And the way your application
will find out about sort of the

00:36:08.830 --> 00:36:11.000
progress is with notifications.

00:36:11.000 --> 00:36:14.000
Or with the delegate method.

00:36:14.000 --> 00:36:15.000
So, you know,
I'm going to go ahead and do that.

00:36:15.000 --> 00:36:18.820
So I give an example here that
if you have an object in your

00:36:19.160 --> 00:36:23.120
application that's a delegate for
the PDF view or for the PDF document,

00:36:23.120 --> 00:36:25.890
it'll look for a method
called did match string.

00:36:26.100 --> 00:36:29.080
And if you've implemented this,
your did match string will get called

00:36:29.220 --> 00:36:31.000
every time the word outline was found.

00:36:31.000 --> 00:36:35.000
And so your did match string
might look something like this.

00:36:35.000 --> 00:36:38.200
I'm passed in a PDF selection
and I'll tell you a little bit

00:36:38.200 --> 00:36:39.950
more about that in a second.

00:36:40.100 --> 00:36:42.720
So all my application does here
is I just take that instance

00:36:42.720 --> 00:36:44.000
and I add it to an array.

00:36:44.000 --> 00:36:47.860
And presumably I have some
kind of a table view that's

00:36:47.860 --> 00:36:50.000
showing the search results.

00:36:50.010 --> 00:36:53.230
So I need to tell that table view
to reload its data because we've

00:36:53.270 --> 00:36:55.000
got another instance came in.

00:36:55.000 --> 00:36:56.390
So I'm going to go ahead and do that.

00:36:56.890 --> 00:37:00.380
So why is PDF selection
passed in for a search method?

00:37:00.410 --> 00:37:02.360
It's kind of strange.

00:37:02.690 --> 00:37:07.750
I guess one way to think of it is
to imagine that the user literally

00:37:07.750 --> 00:37:11.760
went through and started selecting
each instance of the word outline.

00:37:11.760 --> 00:37:15.890
I mean it's kind of a strange analogy,
but by passing your application

00:37:16.210 --> 00:37:19.670
this PDF selection object,
because of all sort of the

00:37:19.670 --> 00:37:22.600
attributes that you can query
about the PDF selection,

00:37:22.600 --> 00:37:24.500
it gives you the ability to do
those things we did in preview.

00:37:24.500 --> 00:37:30.000
So for example, there's a page or pages
attribute on a PDF selection.

00:37:30.000 --> 00:37:34.100
So when your delegate method gets called,
the word outline was found,

00:37:34.100 --> 00:37:37.290
you can find out which page that
is just by asking the selection for

00:37:37.290 --> 00:37:39.310
the page that the selection is on.

00:37:39.320 --> 00:37:42.550
From the page I can get the page label,
page three for example,

00:37:42.620 --> 00:37:46.400
and that's how I populate the first
column of my table view in preview.

00:37:46.400 --> 00:37:49.780
You can get the bounds for the
selection for a given page.

00:37:49.780 --> 00:37:53.130
You can find the nearest
PDF outline item.

00:37:53.140 --> 00:37:53.860
So this is the way I was able
to find the bounds for the

00:37:53.860 --> 00:37:54.470
selection for a given page.

00:37:54.580 --> 00:37:57.960
You can also find out for example
that the first instance was

00:37:58.050 --> 00:37:59.890
found in the contents section.

00:38:00.030 --> 00:38:03.650
So again, once I have the PDF outline
item for that selection,

00:38:03.650 --> 00:38:08.110
I can get its label, contents,
and I can put that in the second column.

00:38:08.120 --> 00:38:11.280
Finally, you can add selections together.

00:38:11.280 --> 00:38:16.200
It's not as interesting for searching,
but for example, if a user was,

00:38:16.200 --> 00:38:19.180
if you wanted to support,
this is more in the

00:38:19.180 --> 00:38:22.420
text selection domain,
if you wanted to allow a

00:38:22.420 --> 00:38:24.460
user to select some text,
you could do that.

00:38:24.460 --> 00:38:26.570
You can add some text,
hold down some modifier key

00:38:26.570 --> 00:38:29.260
and select some additional
text and add those selections.

00:38:29.260 --> 00:38:30.100
You can do that.

00:38:30.210 --> 00:38:31.460
It's kind of a Boolean add.

00:38:31.460 --> 00:38:35.140
And you can get the
string for a selection.

00:38:35.140 --> 00:38:38.090
Basically you're asking the
selection what text are you covered.

00:38:38.100 --> 00:38:41.240
And obviously when you're doing a
search for the word outline and your

00:38:41.300 --> 00:38:44.530
did match string method gets called,
the selection string is

00:38:44.530 --> 00:38:45.430
going to be the word outline.

00:38:45.460 --> 00:38:47.460
So it's probably not that interesting.

00:38:47.460 --> 00:38:50.800
But this next method that allows
you to extend the selection

00:38:50.960 --> 00:38:54.440
allows you to arbitrarily kind of
grow the tail of the selection.

00:38:54.440 --> 00:39:00.890
So you can grow the head of the
selection 20 characters so that you've

00:39:00.890 --> 00:39:04.440
got 40 plus characters selected.

00:39:04.440 --> 00:39:07.940
So that now if you call the
string method on this selection,

00:39:07.940 --> 00:39:13.440
you can get that third column in preview,
which is kind of that contextual text.

00:39:13.440 --> 00:39:18.660
So in fact, you can grow a selection all
the way to the front and bottom

00:39:18.660 --> 00:39:20.960
of the document if you want.

00:39:21.650 --> 00:39:27.220
So, wow, okay,
so that was how you use PDF Kit to

00:39:27.220 --> 00:39:28.690
display PDF in your app.

00:39:28.690 --> 00:39:30.300
And there are plenty of sample code.

00:39:30.300 --> 00:39:34.500
In addition to the one I mentioned,
there's other sample code that you can

00:39:34.500 --> 00:39:39.240
download from DTS that shows you how to
do the searching and that sort of thing.

00:39:39.240 --> 00:39:42.500
But let me see, are we ready for a demo?

00:39:42.500 --> 00:39:43.160
Yeah, okay.

00:39:43.270 --> 00:39:47.160
So I guess I'm moving on now to...

00:39:48.890 --> 00:39:53.160
Kind of more of the fun things
you can do with PDF Kit.

00:39:53.160 --> 00:39:59.010
So I wrote this little application
called PDF Calendar and the point

00:39:59.050 --> 00:40:05.230
of it is to show you how to do,
I've had users or developers ask me how

00:40:05.230 --> 00:40:11.830
to create pages and they were trying
to do some kind of strange things like,

00:40:11.830 --> 00:40:11.830
you

00:40:12.060 --> 00:40:17.780
Like in App Kit, you can get a PDF from a
selection or from a rectangle,

00:40:17.780 --> 00:40:20.970
from a view,
and then you get a PDF and they try to,

00:40:21.050 --> 00:40:25.310
you get a PDF, you get data from that,
and it's basically a PDF document.

00:40:25.310 --> 00:40:28.820
So they create a PDF document in
App Kit and then get the first

00:40:28.820 --> 00:40:30.880
page from that and try to add it.

00:40:30.880 --> 00:40:33.160
I thought, you know,
that's not really what I'd

00:40:33.160 --> 00:40:34.540
intended for users to do.

00:40:34.540 --> 00:40:38.260
I thought that what you would do
if you wanted to create PDF content

00:40:38.260 --> 00:40:41.970
would just be to subclass PDF page,
the class.

00:40:42.030 --> 00:40:43.760
Subclass the object PDF page.

00:40:43.760 --> 00:40:49.370
Create your own object and then
just supply the draw method.

00:40:49.370 --> 00:40:51.380
And I'll show you what I'm doing here.

00:40:51.380 --> 00:40:53.840
I've just,
this is kind of a lame interface.

00:40:53.840 --> 00:40:55.960
I'm not going to sit here
and drag 12 images in.

00:40:55.960 --> 00:40:57.040
Four will suffice.

00:40:57.040 --> 00:40:59.060
But okay, so it takes 12 images.

00:40:59.060 --> 00:41:00.980
I click the make calendar button.

00:41:00.980 --> 00:41:03.850
And basically that's just
what my app did is it,

00:41:03.930 --> 00:41:06.050
here's the thumbnail view again.

00:41:06.050 --> 00:41:09.040
I just put it into a
drawer for old time's sake.

00:41:09.090 --> 00:41:11.980
That's basically what my app did.

00:41:12.000 --> 00:41:14.680
And the source code to this is available.

00:41:14.680 --> 00:41:18.420
But basically what I did is when
the user clicks on make calendar,

00:41:18.420 --> 00:41:20.760
I created a new PDF document object.

00:41:20.760 --> 00:41:23.890
Now, if I don't initialize one
with a file or with data,

00:41:23.890 --> 00:41:26.850
if I just call init and
create a PDF document object,

00:41:26.850 --> 00:41:28.460
I get an empty object back.

00:41:28.460 --> 00:41:29.730
It has no pages.

00:41:29.730 --> 00:41:32.260
It's a document,
but it has no pages associated with it.

00:41:32.330 --> 00:41:37.180
So since it's going to be a calendar,
I want 12 pages.

00:41:37.180 --> 00:41:40.510
So I created 12 PDF page objects.

00:41:40.520 --> 00:41:41.980
But like I say, I used to, you know,
I used to do a lot of things with it.

00:41:42.040 --> 00:41:44.220
But I created a subclass of PDF page.

00:41:44.250 --> 00:41:46.480
So let's say I called it my PDF page.

00:41:46.480 --> 00:41:50.600
So I created, I allocated one of my
PDF page objects and,

00:41:50.670 --> 00:41:52.640
or 12 of them in fact.

00:41:52.810 --> 00:41:56.250
And for each one of the 12,
I gave them an image.

00:41:56.320 --> 00:41:58.520
I told them what month they are.

00:41:58.520 --> 00:42:01.240
And then in the draw
method for that page,

00:42:01.310 --> 00:42:03.400
I just simply draw the image.

00:42:03.400 --> 00:42:04.670
I draw the month.

00:42:04.670 --> 00:42:05.640
I draw a grid.

00:42:05.720 --> 00:42:09.720
And if I had more time,
I suppose I could draw the dates and,

00:42:09.720 --> 00:42:11.980
you know, sync up with iCal.

00:42:12.000 --> 00:42:12.870
Or something like that.

00:42:13.140 --> 00:42:15.570
But anyway,
this kind of gives you an idea of

00:42:15.600 --> 00:42:19.070
the kind of thing that you could,
oh, and once I create,

00:42:19.220 --> 00:42:20.620
so I should finish.

00:42:20.620 --> 00:42:24.620
So once I created these 12 page objects,
and I add them to the document,

00:42:24.730 --> 00:42:28.890
and then I tell the document, you know,
to associate itself with this PDF view,

00:42:28.890 --> 00:42:30.900
I call set document on the view.

00:42:30.900 --> 00:42:34.340
And so it just behaves as though,
you know, it's a regular PDF document,

00:42:34.450 --> 00:42:37.400
except that it only exists, you know,
in memory right now.

00:42:37.400 --> 00:42:41.360
Again, if I save,
if I print the documents,

00:42:42.000 --> 00:42:43.400
methods for saving get called.

00:42:43.400 --> 00:42:47.540
What happens internally is
for each page of the document,

00:42:47.540 --> 00:42:51.390
in this case a 12 page document,
for each of those 12 pages,

00:42:51.450 --> 00:42:54.540
the document will create,
it creates one PDF context,

00:42:54.570 --> 00:42:58.020
and then says begin page for page one,
and then it will call the

00:42:58.020 --> 00:42:59.660
first page and say draw.

00:42:59.660 --> 00:43:02.420
And basically the page will
draw as though it were going

00:43:02.420 --> 00:43:05.540
to a PDF view or anywhere else,
except that in this scenario,

00:43:05.540 --> 00:43:08.420
it's being captured and
recorded into a PDF context.

00:43:08.420 --> 00:43:11.980
So I call end page, begin page again,
I go to page two,

00:43:11.980 --> 00:43:11.980
and I call the first page and say draw.

00:43:11.980 --> 00:43:16.130
I do this for all 12 pages,
and then the PDF context

00:43:16.190 --> 00:43:19.550
gets flushed to disk,
and that's how you get

00:43:19.550 --> 00:43:21.420
your PDF out of that.

00:43:22.760 --> 00:43:24.480
So, let's see.

00:43:24.730 --> 00:43:26.700
I'll go back to the slides.

00:43:26.700 --> 00:43:28.700
So that's PDF Calendar.

00:43:28.700 --> 00:43:31.040
So I'll show you just a little
bit in detail what I did.

00:43:31.040 --> 00:43:34.830
I guess since I've talked
a lot about PDF Page here,

00:43:34.840 --> 00:43:36.110
but I haven't really told you what it is.

00:43:36.120 --> 00:43:38.300
Here's some of the
attributes of PDF Page.

00:43:38.300 --> 00:43:42.770
If it's been added to a document,
then I can ask the page for its document.

00:43:42.770 --> 00:43:46.230
So there's kind of a way from sort of
just the page level to walk up the chain,

00:43:46.340 --> 00:43:49.870
so to speak, and find out which document
that page is associated with.

00:43:51.160 --> 00:43:52.910
Page has a bounds associated with it.

00:43:52.910 --> 00:43:54.700
In fact, it can have multiple bounds.

00:43:54.700 --> 00:43:57.890
It can have different crop boxes and
media boxes and that sort of thing,

00:43:57.890 --> 00:43:58.940
as I explained.

00:43:58.940 --> 00:44:01.540
Pages can have a rotation
associated with them.

00:44:01.540 --> 00:44:04.660
It's usually zero,
but it can be any multiple of 90.

00:44:04.660 --> 00:44:07.760
Pages can have annotations.

00:44:07.760 --> 00:44:10.950
They can, the page is where the
text in the PDF lies,

00:44:10.950 --> 00:44:12.120
unfortunately.

00:44:12.130 --> 00:44:15.090
So it means that, you know,
a hundred page PDF,

00:44:15.380 --> 00:44:19.620
each page contains that little piece
of text from that PDF document.

00:44:19.620 --> 00:44:24.010
So it's at the page level
that you would extract,

00:44:24.060 --> 00:44:26.960
that you would get the text
from a PDF if you want.

00:44:26.960 --> 00:44:29.360
And then finally,
the PDF Page has a draw method,

00:44:29.360 --> 00:44:30.150
obviously.

00:44:30.190 --> 00:44:34.350
So the PDF View is calling
the PDF Page's draw method.

00:44:34.480 --> 00:44:37.580
That's how the PDF View is able
to display the page contents.

00:44:37.860 --> 00:44:42.660
And in my application that I showed you,
I just overrode that draw

00:44:42.660 --> 00:44:45.450
method and drew my own contents.

00:44:45.770 --> 00:44:50.340
Some people would like a
kind of a convenience method.

00:44:50.340 --> 00:44:52.700
So for Leopard we added
this init with image.

00:44:52.700 --> 00:44:56.000
So there's an init method on a
PDF page where you just pass in an

00:44:56.020 --> 00:44:57.660
NS image and you get back a page.

00:44:57.830 --> 00:45:01.180
And in fact, again,
this is what the PDF thumbnail view

00:45:01.180 --> 00:45:03.700
is calling when you drag an image in.

00:45:03.970 --> 00:45:09.440
And so finally, here's what my code did.

00:45:10.900 --> 00:45:12.800
So I had to override bounds for box.

00:45:12.990 --> 00:45:16.800
There's only really two methods that you
have to supply if you subclass PDF page.

00:45:16.800 --> 00:45:19.200
The bounds for box,
you have to tell it how big you are.

00:45:19.350 --> 00:45:20.320
It doesn't know otherwise.

00:45:20.320 --> 00:45:25.220
All coordinates in PDF Kit are in points.

00:45:25.220 --> 00:45:27.570
That's what Adobe defines for PDF.

00:45:27.570 --> 00:45:29.920
So that's 72 points per inch.

00:45:29.920 --> 00:45:33.200
So if I want my page
to be 8.5 by 11 inches,

00:45:33.200 --> 00:45:35.340
I have to return that in points.

00:45:35.380 --> 00:45:37.800
So that's the 612 by 792.

00:45:37.800 --> 00:45:40.330
That's 8.5 by 11 in points.

00:45:41.300 --> 00:45:44.240
So then the other method,
I now say the document or by

00:45:44.240 --> 00:45:46.740
extension the view knows how big I am.

00:45:46.740 --> 00:45:49.750
Now it's going to say, well,
draw yourself.

00:45:49.910 --> 00:45:51.570
So here's my draw method.

00:45:51.570 --> 00:45:55.670
I don't care about crop box or media box,
so I'm pretty much ignoring that

00:45:55.670 --> 00:45:57.770
box parameter that was passed in.

00:45:57.780 --> 00:45:59.950
And I'm going,
this is an oversimplification

00:45:59.950 --> 00:46:01.980
of the code,
but I'm going to draw an image,

00:46:02.050 --> 00:46:04.900
I'm going to draw some text,
and I'm going to draw a grid.

00:46:04.900 --> 00:46:06.890
And any kind of drawing
that you want to do,

00:46:07.030 --> 00:46:10.660
including drawing of other PDFs,
you just do within your draw method.

00:46:20.740 --> 00:46:23.740
Okay,
I don't expect everybody to know what

00:46:23.740 --> 00:46:27.100
all the various annotations in a PDF are.

00:46:27.100 --> 00:46:30.180
If you go to Adobe's site,
you can download the PDF spec.

00:46:30.250 --> 00:46:33.380
It's almost 2,000 pages, I think,
and it goes into all the

00:46:33.380 --> 00:46:34.730
flavors of annotations.

00:46:34.730 --> 00:46:36.820
I'll show you a few of them in a minute.

00:46:36.820 --> 00:46:39.160
I've got a demo that
illustrates a lot of these.

00:46:39.160 --> 00:46:42.250
But here's some of the names of
the classes that were in Tiger for

00:46:42.250 --> 00:46:44.190
the subclasses of the annotation.

00:46:44.190 --> 00:46:45.730
Here's button widgets, circle.

00:46:45.730 --> 00:46:47.450
You can imagine what some of these are.

00:46:47.450 --> 00:46:50.310
There's link, and you can imagine line
is a line annotation.

00:46:50.960 --> 00:46:53.360
Markup, square text.

00:46:53.360 --> 00:46:55.420
For Leopard, we added three more.

00:46:55.420 --> 00:46:58.080
We added another kind
of widget annotation,

00:46:58.080 --> 00:46:59.680
the choice widget.

00:46:59.760 --> 00:47:03.790
We added a pop-up annotation
and the stamp annotation.

00:47:05.130 --> 00:47:07.920
All annotations have a
few attributes in common.

00:47:08.140 --> 00:47:10.740
They all have a type,
so you can ask an annotation for its

00:47:10.780 --> 00:47:14.360
type and the line annotation will
tell you that it's of type line.

00:47:14.360 --> 00:47:17.480
Link will tell you
that it's of type link.

00:47:17.480 --> 00:47:20.310
Then if an annotation
has been added to a page,

00:47:20.310 --> 00:47:23.640
you can ask the annotation
for the page that owns it.

00:47:23.830 --> 00:47:25.880
So again,
you can go all the way up the chain.

00:47:25.940 --> 00:47:29.120
You can ask the annotation for its page,
the page for its document,

00:47:29.190 --> 00:47:31.680
and go all the way to the top if
for some reason your annotation

00:47:32.130 --> 00:47:33.890
needs to know about the document.

00:47:36.000 --> 00:47:38.110
PDF annotation has a
bounds associated with it.

00:47:38.110 --> 00:47:41.070
That's where it lays on the page
in the page's coordinate space,

00:47:41.150 --> 00:47:42.600
and again, it's in points.

00:47:42.600 --> 00:47:46.240
And the annotation like the
page has a draw method as well,

00:47:46.240 --> 00:47:49.200
so that it knows how
to draw its annotation.

00:47:49.910 --> 00:47:53.080
So then all the sort of various
subclasses like the link,

00:47:53.080 --> 00:47:56.740
the line, the circle,
they're going to have kind of like

00:47:56.740 --> 00:47:59.730
subclass specific attributes and calls.

00:47:59.770 --> 00:48:04.800
So you imagine the link annotation will
have a destination or a method on it.

00:48:04.980 --> 00:48:07.860
So that's going to tell you
where this link is going to take

00:48:07.860 --> 00:48:09.360
you if the user clicks on it.

00:48:09.360 --> 00:48:11.940
The circle annotation is
going to have a color and,

00:48:11.940 --> 00:48:15.200
you know, the line width for the circle,
that sort of thing.

00:48:16.660 --> 00:48:20.000
So what we did in addition to
the three new annotations that

00:48:20.000 --> 00:48:23.460
we added for Leopard is we added,
as I mentioned, this whole new class,

00:48:23.530 --> 00:48:24.840
this PDF action class.

00:48:24.840 --> 00:48:29.250
And so the way that fits in is
there are setters and getter

00:48:29.250 --> 00:48:32.360
actions now on the PDF annotations.

00:48:32.360 --> 00:48:35.030
So you could either ask for
the link's destination or

00:48:35.160 --> 00:48:36.810
you could ask for its action.

00:48:36.810 --> 00:48:40.090
If you ask for the action for a link,
you'll get back an

00:48:40.090 --> 00:48:43.870
appropriate go-to action,
which basically is an action that

00:48:43.920 --> 00:48:46.080
means go to this destination.

00:48:46.540 --> 00:48:50.040
There's setters, getters, and in fact,
there's methods on the

00:48:50.180 --> 00:48:51.760
PDF view perform action.

00:48:51.760 --> 00:48:55.960
So you could get the action from
an annotation and then tell the

00:48:55.960 --> 00:48:57.620
PDF view perform this action.

00:48:57.620 --> 00:49:02.110
And if it's a go-to page or something,
the PDF view will go to that page.

00:49:02.120 --> 00:49:05.950
And then all the annotations
have all kinds of setters.

00:49:05.960 --> 00:49:09.980
So all the attributes that you
can read from an annotation,

00:49:09.980 --> 00:49:12.620
you can write as well, you can set.

00:49:13.630 --> 00:49:17.270
So here's the PDF action class and
really the only thing that all the

00:49:17.830 --> 00:49:19.490
actions share is the type method.

00:49:19.660 --> 00:49:23.310
So any given action you can ask for
its type and it'll tell you if it's

00:49:23.510 --> 00:49:25.260
a type go to or a named action.

00:49:25.260 --> 00:49:29.670
It's the subclasses that have kind
of the subclass specific attributes.

00:49:29.670 --> 00:49:32.230
So a go to action
indicates a destination.

00:49:32.270 --> 00:49:35.760
So there's going to be a method
on the go to action for getting

00:49:35.760 --> 00:49:37.610
and setting the destination.

00:49:37.680 --> 00:49:40.870
A URL action is going to be a
method on the go to action for

00:49:40.870 --> 00:49:43.480
getting and setting the destination.

00:49:43.500 --> 00:49:46.920
A mail action,
which is an action that would launch your

00:49:46.920 --> 00:49:50.510
web browser or your mail application,
that's going to have a getter

00:49:50.510 --> 00:49:51.460
and setter for the URL.

00:49:51.480 --> 00:49:58.100
So I'm actually going to
spend the rest of this session

00:50:13.740 --> 00:50:13.740
I'm in a demo.

00:50:13.740 --> 00:50:13.740
Let's see how many minutes I have
left because I could actually demo

00:50:13.740 --> 00:50:13.740
for hours if I wanted to on this.

00:50:13.740 --> 00:50:13.740
I won't.

00:50:13.740 --> 00:50:13.740
I'll try to keep it
to 15 minutes or less.

00:50:14.600 --> 00:50:16.900
You know what,
if I have time maybe I'll show you

00:50:16.900 --> 00:50:20.500
the outline editing in preview.

00:50:20.500 --> 00:50:24.950
So here's an application called
PDF Annotation Editor and I should

00:50:24.950 --> 00:50:28.700
point out that this as well as
the calendar application are

00:50:28.700 --> 00:50:32.500
downloadable from the developer.

00:50:32.510 --> 00:50:34.500
I'm not sure how it works.

00:50:34.500 --> 00:50:38.500
Somehow, you know, session 202,
there's files associated with it.

00:50:38.540 --> 00:50:42.940
You'll find all these demos that I'm
showing you today and ones that were

00:50:42.940 --> 00:50:48.460
done last year for Tiger downloadable
associated with session 202.

00:50:48.500 --> 00:50:51.500
So let me just open
up an annotation here.

00:50:51.500 --> 00:50:53.480
This one only runs on Tiger.

00:50:53.510 --> 00:50:55.900
So the calendar, I think,
is the one that's running.

00:50:56.730 --> 00:50:59.270
I guess the calendar demo
only runs on Tiger as well,

00:50:59.340 --> 00:51:00.820
or only runs on Leopard as well.

00:51:00.820 --> 00:51:02.700
Did I say this one runs only on Tiger?

00:51:02.700 --> 00:51:03.700
I meant Leopard.

00:51:03.700 --> 00:51:04.460
Okay.

00:51:04.620 --> 00:51:07.000
The demos I'm showing you
today only run on Leopard.

00:51:07.000 --> 00:51:11.120
So I've just opened a PDF here
and I went ahead and chose one.

00:51:11.120 --> 00:51:14.520
We don't need the thumbnail
view in this case.

00:51:14.520 --> 00:51:18.900
I picked a PDF here that has
a lot of annotations on it,

00:51:18.900 --> 00:51:23.980
partly to kind of illustrate
to you what annotations are.

00:51:25.980 --> 00:51:28.380
Something I'm doing here
in this application,

00:51:28.380 --> 00:51:33.500
and you can look at the source,
I'm subclassing PDF view.

00:51:33.500 --> 00:51:37.060
And the PDF view has a draw page
method so that every time the

00:51:37.060 --> 00:51:41.860
PDF view is about to draw a page,
it calls its draw page method.

00:51:41.860 --> 00:51:45.020
So all you have to do,
or all I'm doing in this application

00:51:45.110 --> 00:51:49.360
is I subclass PDF view and I implement
draw page myself in my subclass.

00:51:49.470 --> 00:51:51.760
Now if I don't really care about
doing anything in particular,

00:51:51.820 --> 00:51:55.260
I can just call super and
inside my draw page method and

00:51:55.260 --> 00:51:55.260
let the PDF view do its job.

00:51:55.260 --> 00:51:57.410
I can just go in and let
the PDF view handle drawing,

00:51:57.560 --> 00:52:00.480
for example, you know,
this page of the PDF.

00:52:00.730 --> 00:52:03.980
But then what I can do and what
I'm doing here is after the

00:52:03.980 --> 00:52:06.900
PDF view has drawn the PDF,
I'm going to go in and

00:52:06.900 --> 00:52:10.210
I'm going to loop over,
well, I'm going to find out if there

00:52:10.210 --> 00:52:11.780
are any annotations on the page.

00:52:11.830 --> 00:52:13.880
And then I'm going to,
for each annotation,

00:52:13.880 --> 00:52:17.870
I'm going to loop over and get its
bounds and draw a gray rectangle.

00:52:17.870 --> 00:52:21.000
So that's why you see what
might look like odd rectangles

00:52:21.090 --> 00:52:22.950
around some of the annotations.

00:52:22.970 --> 00:52:24.540
And in fact, I'm doing hit testing.

00:52:24.550 --> 00:52:26.780
In my subclass,
so I can determine that an

00:52:26.780 --> 00:52:30.610
annotation was clicked on and
I can make that annotation,

00:52:30.610 --> 00:52:33.760
I've got a notion of like
an active annotation.

00:52:33.760 --> 00:52:35.180
So I can draw it differently.

00:52:35.180 --> 00:52:40.240
Here I'm keeping track of it and drawing
it with a red boundary around it.

00:52:40.240 --> 00:52:43.820
So I can click on various annotations
and you'll see the red boundary.

00:52:43.860 --> 00:52:46.290
That's all handled with
the PDF view subclass.

00:52:46.290 --> 00:52:49.470
And you probably noticed over
here on this little panel,

00:52:49.480 --> 00:52:52.640
that's what most of this
code actually entailed,

00:52:52.700 --> 00:52:53.820
was writing this panel.

00:52:53.820 --> 00:52:57.460
You'll see that as
I click on an annotation,

00:52:57.460 --> 00:53:02.540
like this circle annotation here,
you'll see this panel is reflecting

00:53:02.540 --> 00:53:04.140
all number of attributes.

00:53:04.140 --> 00:53:07.990
These are some of the things, the calls,
the attributes that you can get

00:53:07.990 --> 00:53:09.420
from the PDF annotation classes.

00:53:09.420 --> 00:53:12.710
So I see that this is a subtype circle.

00:53:12.800 --> 00:53:15.500
That's by calling the type method.

00:53:15.820 --> 00:53:17.480
I see there's some contents.

00:53:17.480 --> 00:53:20.580
It's got some text,
some content attribute.

00:53:20.590 --> 00:53:22.670
It's got a border color, red.

00:53:22.690 --> 00:53:22.870
There's no interior color.

00:53:22.870 --> 00:53:24.070
So I can see that there's interior color.

00:53:24.190 --> 00:53:25.680
That box is not checked.

00:53:25.690 --> 00:53:30.400
I see that it's flags indicate
that it's to be displayed,

00:53:30.400 --> 00:53:32.510
which it is, and printed as well.

00:53:32.610 --> 00:53:35.520
If I uncheck this, it wouldn't print.

00:53:35.580 --> 00:53:37.250
You'd see it when you
opened it in your browser,

00:53:37.250 --> 00:53:39.220
in your viewer,
but when you printed it out,

00:53:39.220 --> 00:53:40.380
that annotation wouldn't be there.

00:53:40.380 --> 00:53:41.920
I can also uncheck this.

00:53:41.920 --> 00:53:44.980
It would be really mystifying to users.

00:53:44.980 --> 00:53:48.340
They don't see it,
but when they print it, it shows up.

00:53:48.550 --> 00:53:51.630
Although I suppose you could
put an annotation that says,

00:53:51.630 --> 00:53:55.650
"You weren't supposed to
print this," or something.

00:53:55.800 --> 00:53:59.580
And there's no action,
although here are the actions

00:53:59.580 --> 00:54:01.370
that PDF Kit supports.

00:54:01.540 --> 00:54:04.840
It does have a border and
it's got a thickness of 8

00:54:04.840 --> 00:54:06.480
pixels and it's not dashed.

00:54:06.490 --> 00:54:09.680
So I can try some of these other
annotations and see that okay,

00:54:09.790 --> 00:54:11.700
here's another one with
a different border color,

00:54:11.700 --> 00:54:13.200
no contents this time.

00:54:13.380 --> 00:54:16.700
Here's one with obviously
a dashed border.

00:54:16.940 --> 00:54:21.230
This one does have an interior color.

00:54:21.450 --> 00:54:24.420
Here's a markup annotation.

00:54:24.420 --> 00:54:25.590
This one is a type highlight.

00:54:25.970 --> 00:54:27.620
There's strikeout and underline.

00:54:27.620 --> 00:54:30.190
Here's one of the strikeout annotations.

00:54:30.540 --> 00:54:31.980
Here's an underline annotation.

00:54:31.980 --> 00:54:35.940
This one's known as a free
text annotation as opposed

00:54:35.960 --> 00:54:40.030
to a text annotation,
which is an annotation that has

00:54:40.030 --> 00:54:42.440
a pop-up associated with it.

00:54:42.530 --> 00:54:46.250
In fact, if I check the is open, oh,
it's over here.

00:54:46.250 --> 00:54:49.810
If I check the is open attribute,
you can see what it looks

00:54:49.860 --> 00:54:51.280
like with the pop-up.

00:54:51.300 --> 00:54:53.740
when its pop-up is open, see?

00:54:54.600 --> 00:54:56.000
No action again.

00:54:56.000 --> 00:55:00.750
So here's some line annotations with
different line start and end styles.

00:55:00.780 --> 00:55:02.650
These are interesting.

00:55:02.820 --> 00:55:08.270
These are interesting because
they're stamp annotations.

00:55:08.270 --> 00:55:10.510
They're interesting
because they don't have,

00:55:10.510 --> 00:55:14.370
if you looked at all the rest of these
annotations like the circle for example,

00:55:14.370 --> 00:55:16.610
there are parameters that describe them.

00:55:16.680 --> 00:55:20.970
Red border, 8 pixels thick, no dash,
here's its bounds.

00:55:20.970 --> 00:55:24.480
I could display that just
with those attributes.

00:55:24.500 --> 00:55:27.740
So there's sort of a parameterized,
I guess you'd say,

00:55:27.820 --> 00:55:29.610
version of this annotation.

00:55:29.700 --> 00:55:33.080
But the stamps don't really
have a parameterized version.

00:55:33.080 --> 00:55:38.370
I mean I see that the contents are big
stamp and that the name for that stamp

00:55:38.370 --> 00:55:43.390
annotation is pound D confidential,
but that doesn't really tell me

00:55:43.390 --> 00:55:48.150
there's no sort of set defined
stamps that you can just given these

00:55:48.150 --> 00:55:50.950
meager attributes draw the stamp.

00:55:51.070 --> 00:55:54.480
So what Adobe did is
they have this notation.

00:55:54.500 --> 00:55:58.680
notion of an appearance stream.

00:55:58.710 --> 00:56:03.520
So every annotation in addition to
sort of a parameterized variant,

00:56:03.520 --> 00:56:05.490
there can also be an appearance stream.

00:56:05.490 --> 00:56:08.020
And when an annotation
has an appearance stream,

00:56:08.020 --> 00:56:10.450
we honor the appearance
stream over the parameters.

00:56:10.540 --> 00:56:12.980
And in fact,
they don't even have to match, you know.

00:56:12.980 --> 00:56:16.320
I mean, if it's an appearance stream,
we just draw that appearance stream.

00:56:16.320 --> 00:56:18.550
And the appearance stream,
it's really like a

00:56:18.550 --> 00:56:19.790
little bit of Post Crypt.

00:56:19.790 --> 00:56:21.360
I mean, it's just like this.

00:56:21.400 --> 00:56:23.420
It's the same PDF drawing model.

00:56:23.420 --> 00:56:26.540
It's a, you know,
a stream of drawing commands.

00:56:26.540 --> 00:56:30.470
So for this circle here,
the appearance stream would, you know,

00:56:30.560 --> 00:56:33.920
set up the bounds for this
path and stroke it with this

00:56:33.920 --> 00:56:36.280
line thickness and this color.

00:56:36.280 --> 00:56:40.750
So unfortunately what that means is I can
go in here and check the dashed attribute

00:56:40.750 --> 00:56:44.510
or change the line thickness to 60,
and you don't see any

00:56:44.510 --> 00:56:46.390
change in the annotation.

00:56:46.390 --> 00:56:50.800
And the problem is the annotation
still has that appearance stream.

00:56:50.800 --> 00:56:54.530
And we're still drawing that appearance
stream and we're ignoring the parameters.

00:56:54.640 --> 00:56:57.940
One characteristic of an annotation
with an appearance stream besides

00:56:57.940 --> 00:57:01.240
that is that when you resize it,
you can see that very clearly it's

00:57:01.330 --> 00:57:03.180
not respecting its parameters.

00:57:03.180 --> 00:57:04.580
Otherwise, it wouldn't get so thick.

00:57:04.590 --> 00:57:06.410
You know,
it would stay at 8 pixels thick.

00:57:06.580 --> 00:57:09.210
In fact,
let me take this annotation here,

00:57:09.210 --> 00:57:14.070
this dashed, this circle that has
the dashed border on it.

00:57:14.070 --> 00:57:17.050
And here's the fun part
of this application.

00:57:17.250 --> 00:57:19.370
There's this whole annotation menu.

00:57:19.370 --> 00:57:20.700
So I'm going to say new circle.

00:57:20.700 --> 00:57:22.330
And I'm going to say,
"Pick a new one." So this

00:57:22.330 --> 00:57:25.550
is me calling PDFKit,
there it is,

00:57:25.580 --> 00:57:30.520
and creating a circle annotation and then
associating it with the current page.

00:57:30.520 --> 00:57:33.700
But I get kind of a vanilla
circle annotation here.

00:57:33.830 --> 00:57:36.900
But this one,
because there's no appearance stream yet,

00:57:37.250 --> 00:57:39.160
I can change all of its attributes.

00:57:39.160 --> 00:57:45.550
So I can bring up the color picker and
I'll go ahead and try to match that one.

00:57:45.620 --> 00:57:48.130
I'll pick a kind of a pale
yellow and I'll make that,

00:57:48.130 --> 00:57:50.600
I should probably check that first.

00:57:50.600 --> 00:57:55.590
I'll give it a yellow interior
color and kind of a reddish

00:57:55.590 --> 00:57:59.920
orange border and set it to,
what was that, 4 pixels?

00:57:59.920 --> 00:58:01.480
4 pixels dashed.

00:58:01.480 --> 00:58:06.620
And if I match the size, you'll see that,
you know,

00:58:07.040 --> 00:58:10.090
Just the parameterized
variant looks pretty close.

00:58:10.090 --> 00:58:13.110
The only difference
is when I resize this,

00:58:13.110 --> 00:58:17.340
it maintains its sort of, you know,
it's being drawn solely

00:58:17.340 --> 00:58:20.380
by its parameters,
whereas this one with an appearance

00:58:20.380 --> 00:58:22.520
stream just scales the appearance.

00:58:24.100 --> 00:58:28.320
Well, when, the way that these
annotations are drawn is,

00:58:28.320 --> 00:58:31.080
again, through their draw method.

00:58:31.230 --> 00:58:35.700
And it turns out that in PDF Kit,
you can subclass a PDF annotation

00:58:35.700 --> 00:58:38.900
and supply its draw method,
and you can draw any kind

00:58:38.900 --> 00:58:40.180
of an annotation you want.

00:58:40.520 --> 00:58:43.790
So that's how you would, in fact,
do a stamp annotation,

00:58:43.790 --> 00:58:47.540
and that's why the stamp
annotations are kind of interesting.

00:58:48.250 --> 00:58:51.640
Because they don't have parameters,
the only way to draw a stamp

00:58:51.700 --> 00:58:53.080
annotation is to supply.

00:58:54.120 --> 00:58:54.320
An appearance stream.

00:58:54.320 --> 00:58:58.230
And the way your application,
in creating a stamp application,

00:58:58.370 --> 00:59:00.970
or a stamp annotation,
the way you would do that,

00:59:01.050 --> 00:59:04.110
it would be to supply
your own draw method.

00:59:05.120 --> 00:59:06.650
And so I've got one here.

00:59:06.650 --> 00:59:10.690
If I say new stamp,
you'll see that I created, I don't know,

00:59:10.690 --> 00:59:13.990
it's called my PDF annotation
stamp or something,

00:59:14.020 --> 00:59:18.880
and I've supplied a draw method for
it that just draws the text Apple.

00:59:19.680 --> 00:59:22.100
So now I've basically got no parameters.

00:59:22.100 --> 00:59:23.080
I mean, I can give it a name.

00:59:23.250 --> 00:59:23.530
I can give it one.

00:59:23.580 --> 00:59:25.640
I can tell it its name is Apple.

00:59:25.640 --> 00:59:29.930
But I can now, when I save,
that's kind of how this all works,

00:59:29.930 --> 00:59:38.810
when I save this PDF out to disk,
the annotations draw method is called,

00:59:38.840 --> 00:59:42.120
and that draw method is recorded
into an appearance stream.

00:59:42.870 --> 00:59:45.810
And all the parameters and the
appearance stream are packaged up

00:59:45.810 --> 00:59:49.500
into a dictionary for that annotation,
and all the annotation dictionaries

00:59:49.500 --> 00:59:52.940
for that page are associated with
that page and written out to disk.

00:59:54.160 --> 00:59:59.230
So that when you open up this PDF inside
any PDF viewer like Adobe Reader,

00:59:59.230 --> 01:00:01.540
all the annotations are there.

01:00:01.790 --> 01:00:07.260
And this Apple stamp annotation
will look just like that.

01:00:08.140 --> 01:00:11.860
This one here that didn't have
any appearance stream will

01:00:11.930 --> 01:00:15.800
have an appearance stream,
which unfortunately means that as soon

01:00:15.860 --> 01:00:19.080
as I save this PDF and then reopen it,
I'll no longer be able to

01:00:19.080 --> 01:00:22.360
actually edit it unless I strip
off its appearance stream.

01:00:24.150 --> 01:00:27.000
I don't know what I could show you that.

01:00:27.010 --> 01:00:29.790
Just go ahead and save it.

01:00:31.800 --> 01:00:37.310
So I just wrote that file out and
if I switch here to the desktop,

01:00:37.310 --> 01:00:39.950
let me bring up Adobe Reader.

01:00:45.600 --> 01:01:07.100
I'll drag that on and here's our PDF.

01:01:07.100 --> 01:01:07.100
Well, there's the,
I can see right off the bat there's

01:01:07.100 --> 01:01:07.100
that red circle that I'd stretched.

01:01:07.100 --> 01:01:07.100
And scrolling on down,
there's my stamp annotation with the

01:01:07.100 --> 01:01:07.100
word apple and here's the one I created
sort of a parameterized version of.

01:01:07.100 --> 01:01:07.100
So, that just works.

01:01:07.100 --> 01:01:07.100
So, the last thing I'll show you,

01:01:07.400 --> 01:01:11.460
in this annotation editor is,
let me open up,

01:01:11.470 --> 01:01:16.360
let's open up the small PDF because
it's not as busy as the one.

01:01:16.360 --> 01:01:19.480
And I'll show you this
kind of interesting.

01:01:19.480 --> 01:01:23.260
I can create a button widget,
which is a kind of annotation

01:01:23.260 --> 01:01:25.360
that the user interacts with.

01:01:26.000 --> 01:01:31.110
And button widgets in general
have field names associated

01:01:31.110 --> 01:01:35.990
with them because internally
there is an Acroform dictionary.

01:01:36.110 --> 01:01:37.040
It's basically a database.

01:01:37.360 --> 01:01:38.500
It's kind of a document database.

01:01:38.500 --> 01:01:42.300
And for each one of these widgets,
there's the field name represents

01:01:42.330 --> 01:01:45.680
a key in that database and then
there's a value associated with it.

01:01:45.790 --> 01:01:49.900
A simple push button doesn't have
a value that's associated with it.

01:01:49.970 --> 01:01:52.930
But if I make another button
and make it a checkbox here,

01:01:52.960 --> 01:01:54.770
this one's going to have a value.

01:01:54.850 --> 01:01:56.110
It's either on or off.

01:01:56.230 --> 01:02:00.920
Or in this case, it's either on, yeah,
it's either yes or off.

01:02:01.000 --> 01:02:07.160
And I could change this to, you know,
single, married, that sort of thing.

01:02:07.310 --> 01:02:11.900
Let me turn off the background color.

01:02:12.080 --> 01:02:13.670
And let me change this field name.

01:02:13.700 --> 01:02:16.220
Yeah,
let me change the field name to married.

01:02:16.380 --> 01:02:20.080
So what I'm saying is that this
checkbox now represents a kind of a

01:02:20.090 --> 01:02:24.620
way that the user can interact with
the value for the field named Mary or

01:02:24.620 --> 01:02:27.480
married in the Acroform dictionary.

01:02:27.480 --> 01:02:31.450
And to show you another kind of widget,
I'll show you, here's a text widget.

01:02:31.450 --> 01:02:35.160
Text widgets don't have real
interesting draw methods.

01:02:35.160 --> 01:02:38.950
But I'll just put it next
to the checkbox here.

01:02:39.050 --> 01:02:41.500
And if I switch over,
do you see this little

01:02:41.500 --> 01:02:43.170
button in the bottom here?

01:02:43.200 --> 01:02:45.740
I put this little test and edit button.

01:02:46.300 --> 01:02:50.410
Basically, when I'm in edit mode,
I'm handling all the mouse downs

01:02:50.410 --> 01:02:52.300
inside my PDF view subclass.

01:02:52.300 --> 01:02:53.660
And I'm drawing the gray rectangles.

01:02:53.660 --> 01:02:56.900
But when I'm in test mode here,
it's as though I just opened this PDF.

01:02:56.900 --> 01:03:00.960
And I'm going to just call super
for all my PDF view methods.

01:03:01.020 --> 01:03:03.610
So if I click on the checkbox,
sure enough,

01:03:03.610 --> 01:03:05.380
I can check and uncheck that.

01:03:05.430 --> 01:03:08.950
I can type my name or hello or
something in the text field.

01:03:08.960 --> 01:03:10.760
Oh, you know what I forgot to show you,
though?

01:03:10.760 --> 01:03:13.800
This button here,
let's give it an action.

01:03:13.800 --> 01:03:16.690
And there's a method called,
or an action called reset form.

01:03:16.690 --> 01:03:21.190
And I can specify here which form,
which field names, basically,

01:03:21.190 --> 01:03:24.040
to reset whenever the user
clicks on this button.

01:03:24.040 --> 01:03:27.040
Or I can say reset all items
except those that are listed.

01:03:27.040 --> 01:03:30.340
And if I leave it blank, it says,
in effect, reset all of them,

01:03:30.340 --> 01:03:31.680
reset everything.

01:03:31.680 --> 01:03:33.890
So let me go back and try that out.

01:03:33.890 --> 01:03:38.840
So now when I click on this button,
sure enough, it unchecks the checkbox and

01:03:38.910 --> 01:03:40.620
it clears the text field.

01:03:40.630 --> 01:03:42.920
I can redo those and try it again.

01:03:42.920 --> 01:03:44.200
And it works.

01:03:44.200 --> 01:03:50.500
And again,
if I just save that out to the desktop.

01:03:51.030 --> 01:03:55.760
and open that up in Adobe Reader.

01:03:55.760 --> 01:03:57.930
I just want to show you that
I know tricks up my sleeve.

01:03:57.940 --> 01:04:00.000
This is a proper PDF.

01:04:00.000 --> 01:04:04.790
There's the button and there's our
check box and I can type in text.

01:04:04.790 --> 01:04:07.160
I'm not doing very good today.

01:04:07.200 --> 01:04:10.460
And the button, oh, auto complete, no.

01:04:10.570 --> 01:04:14.160
And the button, the button,
the button works.

01:04:14.930 --> 01:04:16.640
So I guess that's it.

01:04:16.640 --> 01:04:20.360
I've got one more slide, but I think

01:04:21.450 --> 01:04:24.410
I'll tell you what, I've got one minute,
so I'll do this.

01:04:24.610 --> 01:04:29.870
I'll open up a PDF that doesn't have,
well, this, that's not interesting.

01:04:29.950 --> 01:04:31.890
Okay, the small one with two pages.

01:04:31.890 --> 01:04:36.080
Here's something you can do in preview,
and I show you this because it

01:04:36.080 --> 01:04:40.210
illustrates some of the functionality
in PDF Kit I've been telling you about.

01:04:40.220 --> 01:04:44.410
Over here in the inspector,
there's a sections tab,

01:04:44.470 --> 01:04:47.300
and I can just add a new section.

01:04:47.300 --> 01:04:50.400
And what it's done is,
I should have shown you this beforehand,

01:04:50.400 --> 01:04:51.380
there weren't any sections,
but I can just add a new section.

01:04:51.400 --> 01:04:55.150
In fact, if I delete it,
you'll see there, it says no sections.

01:04:55.150 --> 01:04:58.120
But I say add a section,
and it goes ahead and creates

01:04:58.120 --> 01:05:02.090
a section for the current page,
and it's labeled page one, but I can,

01:05:02.090 --> 01:05:05.340
you know,
call it title or something like that.

01:05:05.390 --> 01:05:08.290
And similarly,
I can go down to this page,

01:05:08.290 --> 01:05:11.830
add another section,
and so I'm basically creating

01:05:11.830 --> 01:05:13.930
those PDF outline objects.

01:05:13.930 --> 01:05:19.160
And if I select one and say make child,
I'm telling that to make

01:05:19.160 --> 01:05:21.380
child of the one above.

01:05:21.400 --> 01:05:24.290
And so now I get this whole
twist down sort of behavior

01:05:24.290 --> 01:05:25.980
with sort of subsections.

01:05:25.980 --> 01:05:30.040
And again,
if I save this out and to the desktop,

01:05:30.110 --> 01:05:33.440
that whole tree gets flattened out.

01:05:33.640 --> 01:05:36.150
And then when we open it up,
I see it's still there.

01:05:36.290 --> 01:05:38.960
And some of the fonts went wiggy.

01:05:38.960 --> 01:05:43.510
And open that up in PDF.

01:05:43.940 --> 01:05:48.910
in Adobe Reader.

01:05:48.910 --> 01:05:48.910
I hope I didn't quit Adobe Reader.

01:05:48.910 --> 01:05:48.910
Oh, there it is.

01:05:49.200 --> 01:05:50.490
You'll see that it's got it.

01:05:50.600 --> 01:05:51.080
Oh, I did.

01:05:51.160 --> 01:05:51.490
Okay.

01:05:51.540 --> 01:05:52.560
Well, it'll take just a minute.

01:05:52.950 --> 01:05:53.860
There.

01:05:54.310 --> 01:05:55.880
Bookmarks, and there's the one.

01:05:55.880 --> 01:05:58.030
I twist it down, and there's the other,
and they work.

01:05:58.110 --> 01:05:59.860
So, there you go.

01:05:59.860 --> 01:06:03.080
Let me just go right back to
the slides for one slide more.

01:06:04.740 --> 01:06:05.220
There.

01:06:05.220 --> 01:06:06.320
More information.

01:06:06.350 --> 01:06:10.580
So, if you go to the developer
help on Apple's site,

01:06:10.600 --> 01:06:13.920
there's a couple of
PDF Kit documentation,

01:06:14.120 --> 01:06:16.190
a couple of PDFs, in fact.

01:06:16.220 --> 01:06:19.590
And you go to Adobe, of course,
and they've got the PDF reference,

01:06:19.700 --> 01:06:23.540
and that'll tell you everything you
would ever want to know about annotations

01:06:23.540 --> 01:06:26.380
and everything else in the PDF kit,
or in the PDF spec.

01:06:26.440 --> 01:06:29.220
PDF Kit viewer I told you about.

01:06:29.220 --> 01:06:31.840
It's in developer examples.

01:06:31.840 --> 01:06:34.720
You can download PDF Kit.

01:06:34.760 --> 01:06:38.000
Linker, Link Snoop, those run on Tiger,
and then the ones

01:06:38.000 --> 01:06:40.730
I just showed you today,
PDF Calendar and Annotation Editor,

01:06:41.110 --> 01:06:44.070
those only work on Leopard,
but you can download those as well.

01:06:44.080 --> 01:06:46.130
So, that's it.