WEBVTT

00:00:10.590 --> 00:00:11.870
Good morning everybody.

00:00:11.900 --> 00:00:14.400
My name is Scott Kovatch
and I am an engineer on the

00:00:14.400 --> 00:00:16.500
Java runtime team here at Apple.

00:00:16.590 --> 00:00:20.500
And I want to welcome you to this
session on Eclipse development on OS X.

00:00:20.500 --> 00:00:24.440
We've got a lot of ground to cover today,
so let's get right into it.

00:00:24.640 --> 00:00:30.190
Today we're going to cover
things at about the 10,000 foot

00:00:30.190 --> 00:00:32.500
level and then very quickly go
down to about the 10 foot level.

00:00:32.500 --> 00:00:37.760
So let's give you a look at what
we're going to talk about today.

00:00:38.220 --> 00:00:40.940
So you've all come in here thinking,
yeah, I know what Eclipse is.

00:00:40.940 --> 00:00:43.120
I use it every day or
I've heard about it.

00:00:43.120 --> 00:00:45.260
But it's probably a little
bit more than your wear-up,

00:00:45.260 --> 00:00:47.740
so we're going to talk a little
bit about that this morning.

00:00:49.290 --> 00:00:51.710
We're going to talk about what
is new in the 3.2 release which

00:00:51.710 --> 00:00:54.310
just happened earlier this year.

00:00:55.400 --> 00:00:58.780
We're going to talk about the SWT,
which is sort of one of the core

00:00:58.780 --> 00:01:05.140
widget foundations of Eclipse,
how it gets along with the AWT on OS X,

00:01:05.290 --> 00:01:08.680
and a little bit more about
how the two actually interact.

00:01:08.690 --> 00:01:13.150
We're going to talk about some things
that we've done this year in this area.

00:01:13.650 --> 00:01:15.100
And finally,
we're going to have a little session

00:01:15.100 --> 00:01:17.590
about how to contribute back to Eclipse.

00:01:17.610 --> 00:01:22.530
We've got a good little demo plan
for you to basically show how you

00:01:22.530 --> 00:01:27.550
can get involved in this project
as well as a MacÂ OS developer.

00:01:28.270 --> 00:01:30.950
So let's start off with what is Eclipse?

00:01:30.970 --> 00:01:33.150
I had a professor once in
college that always said,

00:01:33.150 --> 00:01:35.440
you know, if you have something
that says intro to X,

00:01:35.440 --> 00:01:38.400
you should always start out
your lecture with what is X.

00:01:38.540 --> 00:01:39.480
So that's what I'm doing today.

00:01:39.590 --> 00:01:41.250
What is Eclipse?

00:01:41.380 --> 00:01:48.430
Well, you know, you looked at it,
probably downloaded it,

00:01:48.430 --> 00:01:50.470
hopefully you all downloaded
it and had time to get it

00:01:50.470 --> 00:01:50.470
before the session started.

00:01:50.970 --> 00:01:54.440
and we know, you know,
when you go back to your manager

00:01:54.440 --> 00:01:58.340
and say we want to use Eclipse
for our project as our IDE.

00:01:58.350 --> 00:02:00.510
Well, what are the good things about it?

00:02:00.560 --> 00:02:02.890
You know, it's open source, right?

00:02:02.920 --> 00:02:08.130
It's one of the more high-profile
open source projects out there today.

00:02:08.190 --> 00:02:12.090
It's written in Java.

00:02:12.100 --> 00:02:12.330
It's a Java development environment,
of course.

00:02:12.700 --> 00:02:15.690
It's an IDE, right?

00:02:15.740 --> 00:02:21.770
You know, there was a time when,
you know, the concept of an IDE with

00:02:21.790 --> 00:02:23.540
Java was just a...

00:02:23.820 --> 00:02:29.260
Just a fleeting thought in somebody's
mind and IDs were really expensive.

00:02:29.550 --> 00:02:32.910
and you had to pay, you know,
five and six hundred dollars

00:02:32.960 --> 00:02:34.520
to do basic development.

00:02:34.570 --> 00:02:37.300
And so, of course,
the big thing is it's free.

00:02:37.760 --> 00:02:40.790
Well,
what I want to talk today about is that

00:02:40.840 --> 00:02:43.340
it's more than just all those things.

00:02:43.340 --> 00:02:46.070
This is sort of the,
what you see up here now is sort of

00:02:46.070 --> 00:02:49.030
the mission statement of Eclipse,
if you will.

00:02:49.120 --> 00:02:52.110
An open source community,
projects focused on providing a

00:02:52.110 --> 00:02:56.330
vendor-neutral open development platform
and frameworks for building software.

00:02:56.450 --> 00:02:59.830
And it's that last part I want to talk
to you a little bit about right now.

00:03:00.500 --> 00:03:02.980
Eclipse,
when you download it from the server,

00:03:02.980 --> 00:03:04.920
gives you a lot more than just an IDE.

00:03:04.920 --> 00:03:06.860
Of course,
that's a big part of what you're getting.

00:03:06.860 --> 00:03:10.860
But, you know, we have a Java IDE.

00:03:10.860 --> 00:03:15.010
We have an underlying, and the Java IDE,
we'll show you a little bit more in

00:03:15.010 --> 00:03:16.290
a few minutes in a demonstration.

00:03:16.300 --> 00:03:19.380
But there's also a component
architecture underneath.

00:03:19.920 --> 00:03:24.480
This is from something
called the OSGI initiative,

00:03:24.480 --> 00:03:34.480
and OSGI is a specification for
module loading and unloading.

00:03:34.790 --> 00:03:38.690
And it defines ways for you to
write code that can inject itself

00:03:38.740 --> 00:03:42.790
into other applications and
basically an operating system,

00:03:42.790 --> 00:03:45.790
if you will,
for modules and code that can load

00:03:45.790 --> 00:03:48.440
and unload your code dynamically.

00:03:48.440 --> 00:03:50.180
That's sort of it in a nutshell.

00:03:50.180 --> 00:03:52.910
If you're interested in that,
you want to take a look

00:03:52.960 --> 00:03:56.060
at the Equinox project,
which is part of Eclipse.org.

00:03:56.060 --> 00:03:59.070
And they've got a lot of
material you can read up on that.

00:03:59.070 --> 00:04:02.050
That's sort of the
foundation layer of Eclipse.

00:04:02.060 --> 00:04:06.290
And that's something you can take
advantage of as well in your applications

00:04:06.330 --> 00:04:08.480
if that's what you want to do.

00:04:08.510 --> 00:04:11.310
And sort of the next level
up is something called a rich

00:04:11.310 --> 00:04:13.420
client application architecture.

00:04:13.610 --> 00:04:17.160
And the rich client architecture

00:04:17.780 --> 00:04:21.080
Consists of a number of layers.

00:04:21.080 --> 00:04:25.800
And sort of the eight
points you want to look at,

00:04:26.030 --> 00:04:31.910
if you want to look at the RCP in
sort of eight simple points,

00:04:31.910 --> 00:04:38.170
it's our component management,
which comes from the OSGI.

00:04:38.170 --> 00:04:42.210
You have the runtime,
which is for developing applications.

00:04:42.210 --> 00:04:42.210
It also has a mechanism for

00:04:42.600 --> 00:04:50.700
[Transcript missing]

00:04:51.500 --> 00:04:54.310
Let's sort of go through some of these
layers in a little bit more detail.

00:04:54.370 --> 00:04:57.580
At the top most level is
the user interface layer,

00:04:57.580 --> 00:05:02.040
and these are sort of the high level
things that actually Eclipse uses

00:05:02.060 --> 00:05:06.500
itself to implement Eclipse the
way it looks to use it as an IDE.

00:05:06.500 --> 00:05:11.340
We have a number of definitions and
plugins for defining your own editor,

00:05:11.470 --> 00:05:16.370
so you can define an editor for your
specific language or your specific,

00:05:16.500 --> 00:05:20.290
you know, whatever it is is
important for your domain.

00:05:20.440 --> 00:05:26.240
perspective management so that
you can group together a number

00:05:26.240 --> 00:05:29.920
of views related to a given task.

00:05:29.920 --> 00:05:33.750
So, for example, in the IDE,
they have a Java perspective,

00:05:33.750 --> 00:05:37.220
which opens up a series of views
for Java editing that makes

00:05:37.220 --> 00:05:38.820
sense for a Java developer.

00:05:38.820 --> 00:05:42.260
And so one level below that,
which I've sort of implicitly mentioned,

00:05:42.260 --> 00:05:45.760
is the view layer which defines
the individual pieces that

00:05:45.760 --> 00:05:47.540
go into that perspective.

00:05:47.540 --> 00:05:53.000
So we have, you know,
like an outline view for

00:05:53.000 --> 00:05:55.850
looking at your code.

00:05:56.000 --> 00:06:17.600
[Transcript missing]

00:06:18.830 --> 00:06:21.460
So the next level,
going over to the left,

00:06:21.460 --> 00:06:26.080
which is more of the module
management side of the RCP,

00:06:26.300 --> 00:06:33.220
the runtime layer is what takes
care of managing the extensions,

00:06:33.220 --> 00:06:35.880
which are sort of a level pulled
up from the actual plugin.

00:06:35.880 --> 00:06:39.860
But then we have the notion of
an application and a product,

00:06:39.930 --> 00:06:43.240
and the RCP makes a
distinction between the two,

00:06:43.240 --> 00:06:46.440
whereas an application
is a runnable unit.

00:06:46.980 --> 00:06:49.800
Eclipse, for an example,
is an application.

00:06:49.960 --> 00:06:55.340
Well, a product is a combination of
an application and a number of,

00:06:55.390 --> 00:06:56.900
for example, unique branding things.

00:06:56.900 --> 00:07:02.560
So a splash screen,
the unique icon for your application,

00:07:02.560 --> 00:07:08.430
and just sort of extensions to help you
make a unique product based on the RCP.

00:07:08.430 --> 00:07:11.060
And that's found over in this layer here.

00:07:13.940 --> 00:07:16.600
So, I'm sorry,
going back over to the UI side,

00:07:16.690 --> 00:07:23.190
Jface is a layer that basically
gives you a higher level way

00:07:23.200 --> 00:07:26.690
of managing the user interface.

00:07:26.900 --> 00:07:30.480
We'll jump ahead here to the SWT,
which is at the lowest level,

00:07:30.480 --> 00:07:35.690
which is basically the widget library
that all RCP applications are based on.

00:07:35.740 --> 00:07:38.850
We'll talk a lot more
about the SWT today,

00:07:38.860 --> 00:07:42.720
but right now what you want to know
is that that's your basic UI toolkit

00:07:42.730 --> 00:07:48.910
that all RCP applications are based on.

00:07:50.680 --> 00:07:53.200
Go back over here, back up to JFace.

00:07:53.200 --> 00:07:58.220
JFace is a layer above the
SWT that is a pure Java layer,

00:07:58.220 --> 00:08:01.480
but it also lets you manage
SWT widgets a little bit more,

00:08:01.480 --> 00:08:05.180
provide something of a model and
controller layer as opposed to just

00:08:05.210 --> 00:08:07.030
the view that the SWT provides.

00:08:08.040 --> 00:08:13.470
There are classes for managing list data,
tree data, things like that.

00:08:13.500 --> 00:08:16.890
And basically,
it's an attempt to provide a view,

00:08:16.940 --> 00:08:20.500
like I said,
more of a model actually than controller,

00:08:20.500 --> 00:08:23.550
but sort of a model to
work with the SWT views.

00:08:23.600 --> 00:08:27.940
And finally, at the lowest level is this
OSGI layer on the left,

00:08:27.940 --> 00:08:32.160
and that's where you find all the
definitions for what are plugins

00:08:32.160 --> 00:08:37.700
and the bundles and services that
you advertise to an application.

00:08:37.900 --> 00:08:44.100
And it manages the loading and
unloading of those plugins.

00:08:46.620 --> 00:08:48.490
All right.

00:08:48.550 --> 00:08:49.720
So who is using Eclipse?

00:08:49.780 --> 00:08:52.520
I mentioned we said, you know,
you can use Eclipse for

00:08:52.540 --> 00:08:53.600
more than just an IDE.

00:08:53.860 --> 00:08:59.140
Well, some pretty big names are
using Eclipse right now.

00:08:59.610 --> 00:09:01.850
and no particular order here.

00:09:02.120 --> 00:09:05.350
IBM, of course.

00:09:06.160 --> 00:09:11.190
Eclipse is not an IBM project, however,
IBM is using Eclipse significantly

00:09:11.230 --> 00:09:14.330
in a number of its products.

00:09:14.380 --> 00:09:16.980
So you're going to see it
now being used for WebSphere,

00:09:17.100 --> 00:09:19.510
for example,
and some of their other products.

00:09:19.560 --> 00:09:25.020
PHP Eclipse is an open source project
that is writing a number of plugins

00:09:25.020 --> 00:09:29.440
to do PHP development in Eclipse,
as well as providing the custom

00:09:29.470 --> 00:09:31.560
editors and a debugger for PHP.

00:09:32.940 --> 00:09:36.860
The first one is Wolfram
Research and Mathematica.

00:09:36.860 --> 00:09:40.820
I thought this one was particularly
interesting because I think just

00:09:40.820 --> 00:09:45.170
about everybody here has heard of
Mathematica at one point or the other.

00:09:45.180 --> 00:09:52.350
It contains a scripting language for
dealing with mathematical formulas,

00:09:52.350 --> 00:09:58.580
but what they've done is they have
produced a collection of plugins

00:09:58.660 --> 00:10:02.510
that they call the Wolfram Workbench.

00:10:02.660 --> 00:10:05.470
And this is,
I don't believe this is released yet,

00:10:05.490 --> 00:10:09.460
but we were able to get a screenshot
to show you what's going on here.

00:10:09.460 --> 00:10:16.690
And what you see up in the top left is,
I'm sorry, sort of the bigger layer here.

00:10:16.700 --> 00:10:22.300
This is a screenshot of
debugging a Mathematica session.

00:10:22.300 --> 00:10:26.860
So you've written your code
down in the center left there.

00:10:26.860 --> 00:10:30.370
You've written a couple of functions,
and we're going to step

00:10:30.370 --> 00:10:32.320
through that code and debug it.

00:10:34.140 --> 00:10:38.070
So at the top right, we see the variables
that have been defined.

00:10:38.100 --> 00:10:41.990
On the right is an outline of the
code that you've written to the left,

00:10:42.010 --> 00:10:45.010
so you can click on those functions
and just jump to the function.

00:10:45.140 --> 00:10:53.390
And down below is a console that
shows the results of interacting

00:10:53.390 --> 00:10:53.390
with the mathematics engine.

00:10:54.480 --> 00:10:59.940
and at the top left is
sort of the project view.

00:10:59.950 --> 00:11:02.730
What they have done is they have
adapted a Mathematica workflow

00:11:02.730 --> 00:11:04.940
to sort of the Eclipse paradigm,
if you will.

00:11:04.960 --> 00:11:09.050
And they've defined a
plug-in that defines what a

00:11:09.280 --> 00:11:11.880
project means to Mathematica.

00:11:11.880 --> 00:11:16.650
They've written plug-ins for the
debugger so that when you set a

00:11:16.650 --> 00:11:19.890
breakpoint and that breakpoint fires,
they know how to talk

00:11:19.890 --> 00:11:22.270
to Mathematica and say,
you know, wait a minute,

00:11:22.480 --> 00:11:23.760
now let's look at the data.

00:11:24.400 --> 00:11:28.210
And this is sort of an example
of something you could do in your

00:11:28.210 --> 00:11:33.650
application if this is within
your domain-specific needs.

00:11:33.720 --> 00:11:38.140
This talks to the existing
Mathematica product.

00:11:38.140 --> 00:11:41.590
They haven't actually rewritten
their product to put it into Eclipse.

00:11:41.600 --> 00:11:44.470
But what they've done is they've
written a development environment

00:11:44.470 --> 00:11:46.260
that talks to their existing product.

00:11:46.260 --> 00:11:50.500
I thought this was a really interesting
example of using Eclipse for,

00:11:50.500 --> 00:11:54.330
it's still an IDE,
but it goes beyond just, you know,

00:11:54.710 --> 00:11:58.330
downloading it and
using it to write Java.

00:12:01.550 --> 00:12:03.840
All right.

00:12:03.840 --> 00:12:08.980
Let's move on a little bit to
talk about what came out in 3.2.

00:12:09.310 --> 00:12:12.460
The Eclipse 3.2 was
also known as Callisto.

00:12:12.500 --> 00:12:16.740
If you went to their download site and
you saw some information about Callisto,

00:12:16.740 --> 00:12:20.220
it was released at the
end of June officially,

00:12:20.220 --> 00:12:24.290
and this was the simultaneous
release of 10 projects.

00:12:24.340 --> 00:12:26.910
Now that does not mean that
when you download Eclipse you

00:12:26.950 --> 00:12:28.710
get 10 projects worth of code.

00:12:28.730 --> 00:12:31.500
That would be a huge amount of code.

00:12:31.500 --> 00:12:35.060
If you've downloaded it already,
you've got about 110, 115 megabytes.

00:12:36.660 --> 00:12:44.010
The core of Eclipse is the
IDE and the OSGI and the OSG

00:12:44.100 --> 00:12:59.000
[Transcript missing]

00:12:59.390 --> 00:13:05.370
and you don't need all those
things just to run Eclipse,

00:13:05.370 --> 00:13:05.370
but

00:13:06.520 --> 00:13:11.170
What is important about Callisto is that
they were all released at the same time.

00:13:11.290 --> 00:13:16.070
So in the past,
you may have wanted to use Visual Editor,

00:13:16.210 --> 00:13:19.610
but it wasn't quite released yet,
so you were using a late beta,

00:13:19.700 --> 00:13:23.500
but this other thing that you
relied on was actually done.

00:13:23.500 --> 00:13:31.570
And so now they've harmonized everything
and released it all at the same time,

00:13:31.580 --> 00:13:32.350
so everybody's starting
from the same base.

00:13:33.400 --> 00:13:37.500
MacÂ OSÂ X is now considered a
supported platform of Eclipse.

00:13:37.500 --> 00:13:45.520
This is not true for,
I believe it is not true for most of 3.1,

00:13:45.540 --> 00:13:53.580
but with 3.2, anything you file,
if you file bugs on it,

00:13:53.580 --> 00:13:53.580
they will officially take a look
at it because they support OS X.

00:13:56.800 --> 00:14:02.060
So to sort of give you an overview
of what's going on in 3.2 and sort of

00:14:02.060 --> 00:14:05.710
an overview of the Java IDE itself,
I've asked Daniel Steinberg

00:14:05.710 --> 00:14:10.430
from O'Reilly Media,
who's done a couple of interviews

00:14:10.630 --> 00:14:16.970
with some people using Eclipse,
and he's also done a fair amount

00:14:17.180 --> 00:14:19.990
of writing on Eclipse itself.

00:14:19.990 --> 00:14:19.990
So Daniel, come on up and let's see
what's going on here.

00:14:22.000 --> 00:14:23.470
Thanks Scott.

00:14:23.470 --> 00:14:25.660
Thanks Scott.

00:14:25.720 --> 00:14:28.520
I get to take you out to recess,
so if you've got Eclipse loaded,

00:14:28.630 --> 00:14:30.410
open it up and let's
play around a little bit.

00:14:30.430 --> 00:14:33.730
From the welcome screen,
let's go to the workbench,

00:14:33.770 --> 00:14:36.590
which is this little
guy here at the right.

00:14:38.320 --> 00:14:40.540
and this should be a familiar view.

00:14:40.540 --> 00:14:45.500
If you saw Ben and James talk
at the Java overview yesterday,

00:14:45.500 --> 00:14:48.690
they talked about NetBeans
and IntelliJ's idea.

00:14:48.690 --> 00:14:53.330
Here's another one of that trio that's so
strong on MacÂ OSÂ X for Java developers.

00:14:53.330 --> 00:14:55.440
So let's go ahead and
create a new project.

00:14:55.440 --> 00:14:58.440
So from the file menu,
create a new project,

00:14:58.440 --> 00:15:00.160
and let's call it WWDC.

00:15:00.330 --> 00:15:02.880
Now, this gets me all the time.

00:15:02.890 --> 00:15:05.330
You see a blue,
so you want to type it in.

00:15:05.340 --> 00:15:08.010
This is not asking you to type
in the name of your project yet.

00:15:08.490 --> 00:15:10.470
Select the type,
so select a Java project,

00:15:10.530 --> 00:15:15.620
and at this point, type in WWDC,
and down here,

00:15:15.620 --> 00:15:19.350
you'll see that you can choose which
JVM you want to target with your project,

00:15:19.400 --> 00:15:22.640
and you'll see that it's pulling
them out of your system folder,

00:15:22.640 --> 00:15:25.240
and so that you're getting one
six if you've got that loaded.

00:15:29.120 --> 00:15:31.370
So within WWDC,
I can either right-click or

00:15:31.370 --> 00:15:36.480
I can go to the file menu and
create a new package within it.

00:15:36.730 --> 00:15:38.420
And again,
you can do this through wizards or

00:15:38.540 --> 00:15:41.700
I'll show you in a minute something
new in 3.2 that actually is kind

00:15:41.700 --> 00:15:43.340
of mind-blowing and fun for demos.

00:15:43.340 --> 00:15:46.780
If you go to my .mac folder,
it's dim sum thinking,

00:15:46.780 --> 00:15:51.420
you'll see a little clip file that
we weren't able to post elsewhere,

00:15:51.420 --> 00:15:53.190
so we'll be using that in a little bit.

00:15:53.260 --> 00:15:56.380
So let's just call this demo.

00:15:56.380 --> 00:16:01.000
Oh, well, Eclipse is warning us that this
is pretty much discouraged.

00:16:01.000 --> 00:16:03.630
You can call it demo with a capital D,
but that's discouraged,

00:16:03.690 --> 00:16:06.290
and of course we know that we
should use lowercase letters.

00:16:06.600 --> 00:16:09.380
So not only does it know the
absolute things that you get

00:16:09.380 --> 00:16:13.020
out of strong typing with Java,
it also knows sort of conventions too.

00:16:13.020 --> 00:16:14.800
So let's call this package demo.

00:16:14.800 --> 00:16:17.920
You see it here on the left side,
and it's white because

00:16:18.450 --> 00:16:19.890
there's nothing in demo.

00:16:19.900 --> 00:16:21.700
So let's put something inside.

00:16:21.700 --> 00:16:25.170
So for instance, let's...

00:16:28.830 --> 00:16:29.890
see what we can put inside.

00:16:29.910 --> 00:16:32.600
We can put a class, an interface, a num,
all the things that came

00:16:32.600 --> 00:16:34.080
with 1.5 are now supported.

00:16:34.100 --> 00:16:38.700
If you look at JUnit test case, no,
we're not going to do JUnit again, Alan,

00:16:38.700 --> 00:16:42.110
but if you look at JUnit test case,
you'll see they now support

00:16:42.110 --> 00:16:44.050
JUnit 4 and that's new in 3.2.

00:16:44.250 --> 00:16:47.260
And so, if you click over to JUnit 4,
you'll see some things

00:16:47.260 --> 00:16:48.890
change in this interface.

00:16:48.990 --> 00:16:52.380
You've got two new methods
that are available and if you

00:16:52.380 --> 00:16:56.930
go back to 3.8 for a minute,
you'll see that with JUnit 3.8,

00:16:56.930 --> 00:16:58.500
you inherit from the class test case.

00:16:58.500 --> 00:17:00.450
And with 4, you don't.

00:17:00.890 --> 00:17:04.130
So,
let's just create a fake one for a quick

00:17:04.130 --> 00:17:06.970
example here called this demo test.

00:17:07.300 --> 00:17:11.040
Now, we've got another warning here
that the superclass doesn't exist.

00:17:11.080 --> 00:17:13.550
And Eclipse makes it real easy for you.

00:17:13.560 --> 00:17:15.620
It says, you know,
click here and you can add

00:17:15.620 --> 00:17:18.800
JUnit 381 to your build path,
and it brings up the dialog.

00:17:18.800 --> 00:17:20.880
So life gets much easier.

00:17:20.880 --> 00:17:25.810
I know it's religious whether
you use a text editor,

00:17:25.910 --> 00:17:28.640
whether you use VI or Emacs.

00:17:28.640 --> 00:17:31.510
I know Emacs is an IDE for many of you,
but this does anticipate

00:17:31.510 --> 00:17:31.510
many of your Java needs.

00:17:32.190 --> 00:17:34.900
So now we have demo test in here,
and if you look here at the package,

00:17:34.900 --> 00:17:38.990
it's now colored in yellow because the
package now does contain something.

00:17:39.250 --> 00:17:41.830
So that's one way to create
a class using the wizard.

00:17:41.920 --> 00:17:45.850
What I'd like to show you now
is something new that highlights

00:17:46.020 --> 00:17:50.140
the fact that Eclipse understands

00:17:50.380 --> 00:17:52.180
One of the benefits of Java,
you hear a lot about

00:17:52.180 --> 00:17:54.160
dynamic languages now,
and those advantages,

00:17:54.160 --> 00:17:56.210
and the duck typing,
and you just send a method,

00:17:56.210 --> 00:17:57.960
and if it knows what to do, it does it.

00:17:57.980 --> 00:18:01.400
The nice thing about Java is so
much is known at compile time,

00:18:01.400 --> 00:18:04.180
and so what Eclipse does
is takes that further,

00:18:04.180 --> 00:18:06.870
just as these other IDEs,
and says if we can know

00:18:06.950 --> 00:18:08.780
it at compile time,
we can actually know

00:18:08.780 --> 00:18:09.920
a lot at develop time.

00:18:09.940 --> 00:18:14.150
So if you look at this code snippet here,
I'm just going to copy it,

00:18:14.150 --> 00:18:17.690
and I'm going to paste it
right on top of this folder.

00:18:17.700 --> 00:18:19.380
Now check this out.

00:18:21.060 --> 00:18:23.790
It knew to create the package.

00:18:23.820 --> 00:18:26.710
It knew to create the class inside of it.

00:18:26.880 --> 00:18:30.210
And then it cut and pasted and
syntax highlighted the code.

00:18:30.240 --> 00:18:32.900
So there's a lot of
intelligence going on.

00:18:32.900 --> 00:18:35.060
It's picking all that up from
the code that you put in.

00:18:35.060 --> 00:18:39.160
And if you look at the hierarchy,
here's the project that we just created.

00:18:39.160 --> 00:18:42.680
And inside of it is the package
that was just automatically created.

00:18:42.680 --> 00:18:44.380
And so there's this one-to-one.

00:18:44.400 --> 00:18:47.210
Now, I never compiled this,
but you already see that

00:18:47.210 --> 00:18:48.770
there's a class file here.

00:18:49.370 --> 00:18:53.440
So Eclipse is doing a lot of
compiling sort of as you go.

00:18:53.960 --> 00:18:55.900
Are we happy?

00:18:56.020 --> 00:18:56.720
Gosh, yes.

00:18:56.910 --> 00:18:57.900
Go on.

00:18:57.940 --> 00:19:04.070
And so if we go to run this,

00:19:06.410 --> 00:19:11.010
we'll run it as a Java application
and it's as simple,

00:19:11.010 --> 00:19:15.310
squares a bunch of numbers in that
array and everything's lovely.

00:19:15.320 --> 00:19:18.510
So let's make some changes to show
some of the other new features

00:19:18.610 --> 00:19:20.760
that came with Eclipse 3.2.

00:19:20.760 --> 00:19:24.960
Let's change this i to j++ just to
decouple this and you'll see that

00:19:24.960 --> 00:19:28.820
I get a warning here because I've
introduced a variable and I've never

00:19:28.820 --> 00:19:30.490
told you what that variable is.

00:19:30.540 --> 00:19:32.960
So let Eclipse do some
of the lifting for you.

00:19:33.030 --> 00:19:35.350
Let's click and see what's wrong with it.

00:19:35.420 --> 00:19:37.910
If we just hover over it,
we should get the message

00:19:37.910 --> 00:19:39.420
that j can't be resolved.

00:19:39.420 --> 00:19:42.330
So let's see what Eclipse
thinks we should do about it.

00:19:42.340 --> 00:19:45.740
One of the things we could do is create a
local variable and you see in that yellow

00:19:45.740 --> 00:19:49.570
pop up that it even shows us what this is
going to look like after you've done it.

00:19:49.610 --> 00:19:51.200
So let's go ahead and
create the local variable.

00:19:52.300 --> 00:20:05.300
[Transcript missing]

00:20:05.500 --> 00:20:07.400
Eclipse is now happy.

00:20:07.400 --> 00:20:09.200
Now you see these
little boxes at the end?

00:20:09.200 --> 00:20:10.720
This is another nice feature.

00:20:10.720 --> 00:20:13.800
Boy, I don't remember what
this used to be before,

00:20:13.800 --> 00:20:16.820
so if I hover over it,
I can see the quick diff with what

00:20:16.820 --> 00:20:18.790
I used to have in the saved version.

00:20:18.790 --> 00:20:21.960
And so you can see the sort of
maroon here shows a new line,

00:20:21.960 --> 00:20:24.450
and the gray box here,
I don't know what color

00:20:24.450 --> 00:20:27.070
it's supposed to be,
shows you a changed line,

00:20:27.070 --> 00:20:29.450
and you can go back and see a quick diff.

00:20:29.510 --> 00:20:32.270
Now once you've saved it,
so let me control S and save this,

00:20:32.270 --> 00:20:35.380
that goes away because there's
nothing to quick diff against.

00:20:35.400 --> 00:20:39.190
I guess that's where
Time Machine will have to come in.

00:20:39.360 --> 00:20:41.400
So let's go ahead and run this.

00:20:41.680 --> 00:20:43.300
And this is wrong.

00:20:43.300 --> 00:20:45.400
Zero squared is zero,
zero squared is one,

00:20:45.400 --> 00:20:46.400
zero squared is four.

00:20:46.420 --> 00:20:50.290
The lesson here is just because
Eclipse has helped you make this

00:20:50.360 --> 00:20:54.400
valid Java code doesn't mean that it's
made it do what you want it to do.

00:20:54.400 --> 00:20:56.380
So you still have to
have sense about you.

00:20:56.430 --> 00:21:00.130
So let's get rid of this line
that Eclipse has helped us write,

00:21:00.140 --> 00:21:04.980
and let's uncomment out this line where
we've declared the variable there.

00:21:06.900 --> 00:21:20.400
[Transcript missing]

00:21:22.390 --> 00:21:25.340
and I'm going to clean up.

00:21:25.340 --> 00:21:29.330
Now this is kind of magic,
and in the developer tools demo,

00:21:29.430 --> 00:21:32.740
you saw a lot of this is coming
to Objective C through Xcode.

00:21:32.880 --> 00:21:36.260
So here's the stuff that does
the same things for you for Java.

00:21:36.380 --> 00:21:39.300
So you can do things like,
well let's look at clean up.

00:21:39.340 --> 00:21:46.400
One of the things I can do is convert
for loops to enhanced for loops.

00:21:46.400 --> 00:21:48.340
So let's go ahead and let it do that.

00:21:48.340 --> 00:21:48.340
When I click next,

00:21:50.260 --> 00:21:52.660
I can see what the before
and after looks like,

00:21:52.880 --> 00:21:56.690
and you can see that it's
introduced a new iterator element,

00:21:56.690 --> 00:22:03.630
and it's replaced by for loop with
the for int equals to this regular

00:22:04.050 --> 00:22:09.290
iterator that was introduced in Java 1.5.

00:22:09.290 --> 00:22:12.150
And so if I go ahead and finish that,
it's made the changes.

00:22:12.150 --> 00:22:12.150
Now another nice thing you saw Ben do,

00:22:13.050 --> 00:22:16.390
is he showed you that
IntelliJ is pretty smart.

00:22:16.390 --> 00:22:20.090
And so what I've done here
is I've uncommented the line

00:22:20.130 --> 00:22:23.550
up here with element in it,
because now I have three

00:22:23.660 --> 00:22:26.010
instances of the name element.

00:22:26.010 --> 00:22:31.020
You can see from the highlighting that
Eclipse knows the difference between

00:22:31.480 --> 00:22:34.180
these elements and this element here.

00:22:34.190 --> 00:22:38.230
And so if I do a refactoring,
and if you click on Refactor,

00:22:38.230 --> 00:22:39.880
one of them is Rename.

00:22:39.880 --> 00:22:40.260
And so I can rename this to Square.

00:22:42.120 --> 00:22:46.220
Eclipse is smart enough to rename these
two elements square and not this one,

00:22:46.240 --> 00:22:47.850
and so you're not just getting a grep.

00:22:47.980 --> 00:22:50.410
You're not just using
a text editor anymore.

00:22:50.600 --> 00:22:54.090
There's some deep understanding
of what your code means.

00:22:54.670 --> 00:22:55.600
More?

00:22:55.600 --> 00:22:57.570
Oh yes, let's go on.

00:22:57.610 --> 00:22:58.840
Okay.

00:22:58.840 --> 00:23:02.470
Yeah, I'm just mugging for you guys,
right?

00:23:04.700 --> 00:23:11.720
Okay, so let's see, why don't we,
we've already replaced

00:23:11.720 --> 00:23:13.410
I in that line above.

00:23:13.410 --> 00:23:16.020
Let's change the system out.

00:23:16.500 --> 00:23:49.100
[Transcript missing]

00:23:49.440 --> 00:23:52.340
So I've got a call into MathSquareRoot.

00:23:52.340 --> 00:23:52.970
Why?

00:23:52.970 --> 00:23:55.710
Because it's a hokey example
to show you this next thing.

00:23:55.810 --> 00:23:58.700
It's another new feature with Eclipse.

00:23:59.230 --> 00:24:02.830
When you make calls into libraries
and the library function doesn't

00:24:02.840 --> 00:24:06.090
do what you want it to do,
boy, it would be awfully nice

00:24:06.120 --> 00:24:07.090
if you could fix that.

00:24:07.240 --> 00:24:09.640
Now with OBSC,
we can do decorations and we can

00:24:09.700 --> 00:24:12.630
do all sorts of tricks to say,
"Here's what I really wanted

00:24:12.650 --> 00:24:16.300
that method to do." One of the
nice new refactorings in Eclipse

00:24:16.300 --> 00:24:18.350
is I can introduce indirection.

00:24:18.600 --> 00:24:23.610
And so in the refactoring menu,
you see "Introduce Indirection."

00:24:23.970 --> 00:24:26.230
and it says what do you want
the new method name to be?

00:24:26.240 --> 00:24:29.010
Well, I'll keep it a square root.

00:24:29.540 --> 00:24:32.500
I'll hit the refactoring,
and now instead of

00:24:32.560 --> 00:24:36.520
calling math.square root,
it calls into our local version,

00:24:36.520 --> 00:24:39.160
and by default,
the local version does what this

00:24:39.160 --> 00:24:41.190
function used to do in the old days.

00:24:41.240 --> 00:24:43.580
And so now I can make my
changes here if I want.

00:24:43.660 --> 00:24:45.080
And so that's kind of nice.

00:24:45.080 --> 00:24:48.260
You can fix library functions
if you want to do something

00:24:48.260 --> 00:24:50.710
like decorate a text field,
but you want to do it

00:24:50.810 --> 00:24:51.840
for every text field.

00:24:51.840 --> 00:24:54.520
Introducing indirection
not only changes the call,

00:24:54.600 --> 00:24:57.230
but it changes all the
references to the call too.

00:24:57.240 --> 00:24:58.840
And so that's a nice new feature.

00:25:02.020 --> 00:25:02.890
Alright.

00:25:02.890 --> 00:25:08.900
So let's look at some templating here.

00:25:08.900 --> 00:25:13.250
And so let me introduce
the other snippet.

00:25:13.520 --> 00:25:14.690
I'm just doing a simple shape.

00:25:14.740 --> 00:25:15.780
I'm doing a square.

00:25:15.920 --> 00:25:18.990
And so you can type this in yourself
or you can just cut and paste it.

00:25:19.060 --> 00:25:21.660
I just love this feature.

00:25:21.660 --> 00:25:26.660
So I'm going to cut it and
I'm going to paste it right

00:25:26.660 --> 00:25:26.660
here in the package explorer.

00:25:28.510 --> 00:25:29.440
And so now I have a shape.

00:25:29.440 --> 00:25:31.400
I have a square.

00:25:31.630 --> 00:25:33.160
Square doesn't do much.

00:25:33.350 --> 00:25:34.970
It's got a side.

00:25:35.060 --> 00:25:36.660
I set the side.

00:25:36.830 --> 00:25:37.880
So let's see.

00:25:37.900 --> 00:25:39.640
There's a lot of typing
I would have to do.

00:25:39.640 --> 00:25:41.060
But you know what I'd really like?

00:25:41.060 --> 00:25:42.590
I'd really like some getters and setters.

00:25:42.760 --> 00:25:44.440
So I go to source code.

00:25:44.510 --> 00:25:48.630
And there's an item that says
I can generate getters and setters.

00:25:48.760 --> 00:25:50.800
So what do you want to generate them for?

00:25:50.800 --> 00:25:52.320
Do you want to generate
getters and setters?

00:25:52.320 --> 00:25:54.650
Or you can choose which ones.

00:25:54.670 --> 00:25:56.590
So I say OK.

00:25:56.810 --> 00:26:01.840
I automatically have my get and my set.

00:26:02.350 --> 00:26:04.000
Actually, let me go back a second.

00:26:04.000 --> 00:26:05.820
I want to do this a little differently.

00:26:05.840 --> 00:26:07.620
Let me do it again.

00:26:07.630 --> 00:26:08.640
Generate getters and setters.

00:26:08.750 --> 00:26:10.720
But I do want to
generate method comments,

00:26:10.800 --> 00:26:14.470
just to show you this next thing.

00:26:18.080 --> 00:26:23.030
I want to introduce this notion of
category because you've got getters

00:26:23.120 --> 00:26:26.130
and setters and then you've got
methods that really do something.

00:26:26.130 --> 00:26:28.180
You don't want the getters
and setters cluttering up your

00:26:28.290 --> 00:26:30.920
API because that's not the method
you want to be concentrating on.

00:26:31.010 --> 00:26:37.560
I can introduce this new @category tag.

00:26:37.560 --> 00:26:41.480
Eclipse will pick this
up if I write getter.

00:26:42.740 --> 00:26:47.980
And I'll do the same
thing for the setter.

00:26:47.980 --> 00:26:48.780
Here's another nice thing.

00:26:48.780 --> 00:26:51.440
I'm hitting Return,
and notice when I hit Return it

00:26:51.440 --> 00:26:52.920
knows I'm still within the comments.

00:26:52.940 --> 00:26:54.910
So it indents, and it gives me the star.

00:26:55.000 --> 00:26:56.880
It saves me typing there.

00:26:56.880 --> 00:26:59.680
At,
it pulls up the things that can be added.

00:26:59.690 --> 00:27:01.480
Category, and let's call this Setter.

00:27:01.480 --> 00:27:04.260
Now, getter and setter never
existed before as categories.

00:27:04.260 --> 00:27:05.560
I just made those up.

00:27:05.600 --> 00:27:09.460
We can use any name that you want
to collect your different methods.

00:27:09.460 --> 00:27:13.320
Again, it's sort of like how you group
things if you're writing an obc.

00:27:13.350 --> 00:27:16.080
So let's save that.

00:27:16.080 --> 00:27:19.490
And let me bring up the Outline view.

00:27:20.820 --> 00:27:24.980
and you can see the getter and
setter now appear after the name.

00:27:24.980 --> 00:27:26.600
But that's not the fun part.

00:27:26.600 --> 00:27:29.700
The fun part is if you
click on this arrow,

00:27:29.710 --> 00:27:32.700
you can decide which of the
methods you want to show.

00:27:32.700 --> 00:27:38.680
So if I want to unshow the getters
and I want to unshow the setters,

00:27:38.820 --> 00:27:43.620
all of a sudden I haven't
cluttered up the visible

00:27:43.670 --> 00:27:45.590
methods that I get to mess with.

00:27:45.590 --> 00:27:45.590
Scott, how are we doing for time?

00:27:45.970 --> 00:27:48.320
Let me show you just
a couple more things,

00:27:48.380 --> 00:27:50.400
but I think that's a
nice cool feature too.

00:27:50.400 --> 00:27:53.650
The methods still exist,
but we know they exist.

00:27:53.710 --> 00:27:55.850
We don't need to have
them right in our face.

00:27:55.900 --> 00:28:02.090
Let me create a quick subclass of Square.

00:28:03.430 --> 00:28:07.720
So let's create a new
class and let's call it,

00:28:07.780 --> 00:28:10.770
I don't know, TinySquare.

00:28:10.850 --> 00:28:15.970
And let's let it have
Square as the superclass.

00:28:18.710 --> 00:28:20.020
So it extends square.

00:28:20.020 --> 00:28:23.520
Something's wrong,
so I check out to see what's wrong.

00:28:23.520 --> 00:28:25.520
Let's see,
what are you complaining about this time?

00:28:25.520 --> 00:28:26.460
Do you want to add a constructor?

00:28:26.530 --> 00:28:27.700
Oh, sure.

00:28:27.700 --> 00:28:29.480
So it's added a constructor.

00:28:29.500 --> 00:28:33.480
This still isn't quite right,
because a tiny square should

00:28:33.480 --> 00:28:35.620
do stuff that the square does.

00:28:35.620 --> 00:28:37.240
Well, by default, it does.

00:28:37.380 --> 00:28:40.540
So I have to tell it
explicitly what to override,

00:28:40.540 --> 00:28:43.400
and if you look here in the source file,
you'll see that I have

00:28:43.400 --> 00:28:44.840
override or implement methods.

00:28:45.740 --> 00:28:48.680
And when I do that,
a tiny square is a square,

00:28:48.680 --> 00:28:51.670
but it's also an object,
so I can decide which of the

00:28:51.680 --> 00:28:54.840
methods all the way up the
hierarchy I want to override.

00:28:54.840 --> 00:28:57.900
In this case,
the area of a square is the area of

00:28:57.900 --> 00:29:00.150
a square no matter how big it is,
but maybe I want to do

00:29:00.150 --> 00:29:02.840
something different when
I draw it as a tiny square.

00:29:02.840 --> 00:29:06.690
And so I'll click there,
and now I've overridden that.

00:29:06.720 --> 00:29:10.960
We have the same collapsing that we
saw yesterday with the other IDEs.

00:29:10.960 --> 00:29:12.250
Here's a nice little thing.

00:29:12.260 --> 00:29:13.200
See that up arrow there?

00:29:13.200 --> 00:29:15.600
That up arrow says that you
want to override the square,

00:29:15.600 --> 00:29:19.160
but you've overridden
the method in the square,

00:29:19.160 --> 00:29:21.720
and if you click on that,
it takes you to the method

00:29:21.720 --> 00:29:22.940
that you've overridden.

00:29:22.940 --> 00:29:26.730
So you can see and go back and
forth to the relevant code.

00:29:28.240 --> 00:29:31.380
You'll also see the to-dos here.

00:29:31.380 --> 00:29:34.020
The to-dos appear with
this little checkbox here,

00:29:34.020 --> 00:29:37.250
or if you bring up your task list,
you can see all the to-dos that

00:29:37.250 --> 00:29:38.970
you have to do there as well.

00:29:38.970 --> 00:29:45.090
And so, that's just a quick tour through
Eclipse and some of the new features.

00:29:45.090 --> 00:29:45.090
Thanks.

00:29:49.300 --> 00:29:50.300
Thank you, Daniel.

00:29:50.300 --> 00:29:58.130
So I hope that gives you a feel
for what you can do with Eclipse.

00:29:58.150 --> 00:30:03.100
The thing about messing around with
a new environment is that it can

00:30:03.100 --> 00:30:06.660
take you easily two weeks just to
look at all the great cool things,

00:30:06.660 --> 00:30:08.200
and once you do that,
you've forgotten everything

00:30:08.270 --> 00:30:09.340
you've learned in the old IDE.

00:30:09.340 --> 00:30:11.230
Well, for me anyway.

00:30:13.180 --> 00:30:15.140
All right,
let's move on a little bit to talk now,

00:30:15.140 --> 00:30:19.140
going a little bit lower level,
talking about the

00:30:19.240 --> 00:30:21.220
SWT and the AWT and OS X.

00:30:22.570 --> 00:30:27.090
So the standard widget toolkit, SWT,
what is that?

00:30:27.210 --> 00:30:30.840
That sort of gets thrown around
when you hear "Eclipse" as well.

00:30:31.080 --> 00:30:33.710
And again, this is from the SWT page.

00:30:33.710 --> 00:30:37.500
Efficient portable access to the user
interface facilities of the operating

00:30:37.500 --> 00:30:39.400
system in which it is implemented.

00:30:39.400 --> 00:30:45.710
Now behind that statement are a lot of,
I don't know, assumptions, if you will.

00:30:45.720 --> 00:30:51.280
The SWT is built entirely on the
native toolkit on a given platform.

00:30:51.280 --> 00:31:00.800
There's no peers, there's no theme,
no extra stuff, if you will.

00:31:01.000 --> 00:31:05.300
It's a thin layer over the
user interface toolkit.

00:31:05.990 --> 00:31:07.870
This is a different
philosophy than Swing.

00:31:07.870 --> 00:31:12.010
You know, if you ask the SWT guys,
that's what they'll say.

00:31:12.020 --> 00:31:13.890
This is a different philosophy
than what Swing did.

00:31:13.890 --> 00:31:14.800
That's it.

00:31:14.830 --> 00:31:18.270
No agenda, no politics, no nothing.

00:31:19.650 --> 00:31:22.940
It's a different way of doing
things than what's funded.

00:31:22.940 --> 00:31:23.690
That's all it is.

00:31:26.140 --> 00:31:29.500
There is one API across all UI toolkits.

00:31:29.610 --> 00:31:34.310
That means GTK on Linux,
Win32 on Windows,

00:31:34.300 --> 00:31:46.800
[Transcript missing]

00:31:50.400 --> 00:32:02.300
[Transcript missing]

00:32:03.100 --> 00:32:13.930
You should be able to open up an
AWT window from an SWT application,

00:32:13.930 --> 00:32:15.740
and it should just work.

00:32:15.740 --> 00:32:18.100
That wasn't always true on OS X.

00:32:18.680 --> 00:32:25.390
For a long time, we actually started
out hostile to the SWT.

00:32:25.440 --> 00:32:29.020
If an SWT application started up,
it starts up on the main thread or

00:32:29.030 --> 00:32:31.280
the first thread of your application.

00:32:31.280 --> 00:32:35.240
You try to use the AWT, boom,
we just throw an error.

00:32:35.240 --> 00:32:39.390
You know, you started up wrong, go away,
we don't want to talk to you.

00:32:40.190 --> 00:32:43.060
And as I was thinking
about the history of this,

00:32:43.130 --> 00:32:45.530
how many have seen Seinfeld?

00:32:45.560 --> 00:32:46.540
Right?

00:32:46.630 --> 00:32:51.110
How many saw an episode,
actually two in the early

00:32:51.110 --> 00:32:56.930
seasons with Keith Hernandez,
the boyfriend?

00:32:57.350 --> 00:33:03.760
Well, the relationship between the
AWT and the SWT is pretty similar.

00:33:03.760 --> 00:33:03.760
Alright?

00:33:04.720 --> 00:33:05.700
I can't stand these guys.

00:33:05.700 --> 00:33:06.930
You give them their number,
they don't call.

00:33:06.930 --> 00:33:10.390
Why do they do that?

00:33:10.390 --> 00:33:10.390
Right?

00:33:10.710 --> 00:33:16.200
and Elaine's response, "I'm sorry,
honey." Right?

00:33:16.200 --> 00:33:18.340
And that was sort of Apple's
response to people who complained

00:33:18.340 --> 00:33:21.840
about this for a long time.

00:33:22.000 --> 00:33:23.550
Sorry, doesn't work.

00:33:23.650 --> 00:33:25.030
That's the way it is.

00:33:25.130 --> 00:33:26.630
Live with it.

00:33:27.050 --> 00:33:29.520
Well, we moved along a little bit.

00:33:29.720 --> 00:33:33.880
You could use the AWT if you had
turned on AWT's headless mode.

00:33:33.940 --> 00:33:36.300
Set Java.OughtHeadless = True.

00:33:36.350 --> 00:33:41.000
Now you could use dimension, you know,
point, a few things like that.

00:33:41.000 --> 00:33:43.000
That will let you do
some image processing.

00:33:43.160 --> 00:33:45.140
That's better.

00:33:45.140 --> 00:33:48.180
Well, we've been this way for
about two years now.

00:33:48.880 --> 00:33:51.830
So the relationship moved
a little bit further now.

00:33:51.940 --> 00:33:53.300
Hey,
you want to see a movie on Friday night?

00:33:53.520 --> 00:33:55.510
Have you seen JFK?

00:33:58.760 --> 00:33:59.690
Sure, that would be great.

00:33:59.700 --> 00:34:05.080
And, you know, that's sort of where we
were for a long time.

00:34:05.080 --> 00:34:06.520
We acknowledged each other's presence.

00:34:06.540 --> 00:34:08.940
You know, we'd say hello to each other.

00:34:08.940 --> 00:34:10.980
That's about it.

00:34:13.230 --> 00:34:17.380
Well, earlier this year,
we released a version of

00:34:17.380 --> 00:34:20.780
our Java that would allow an
SWT application to create a window.

00:34:20.780 --> 00:34:23.180
You can create an AWT frame.

00:34:23.180 --> 00:34:24.690
The two would live in
the same application.

00:34:24.700 --> 00:34:26.960
Things are a lot better now.

00:34:26.970 --> 00:34:29.040
We're back to the state
where I said before,

00:34:29.040 --> 00:34:31.420
where this should just be
a normal part of things.

00:34:34.400 --> 00:34:37.130
You know, he wants me to help him move,
but I don't feel right about it.

00:34:37.150 --> 00:34:41.500
That's a big step.

00:34:41.500 --> 00:34:41.500
That's like going all the way.

00:34:43.020 --> 00:34:45.470
Well, yeah, that's about right.

00:34:45.660 --> 00:34:50.600
We're making that final step here.

00:34:50.600 --> 00:34:53.260
So what was that last step?

00:34:55.560 --> 00:34:58.170
Next thing you know,
you'll be driving them to the airport.

00:34:58.260 --> 00:35:00.740
I'm not driving them to the airport!

00:35:03.300 --> 00:35:05.910
This metaphor falls apart because
actually they break up and they

00:35:05.910 --> 00:35:10.010
don't want to see each other anymore,
but we don't want to do that.

00:35:11.470 --> 00:35:12.840
All right.

00:35:12.850 --> 00:35:17.900
If you've been following this whole saga,
then you know what this number means.

00:35:18.110 --> 00:35:22.270
67384.

00:35:22.280 --> 00:35:25.600
This was the bug in their
Bugzilla system that said the

00:35:25.600 --> 00:35:25.600
SWT-AWT bridge was not implemented.

00:35:26.140 --> 00:35:27.810
This was not the SWT team's fault.

00:35:27.820 --> 00:35:30.630
This was our fault because we
never provided a way to do this.

00:35:30.630 --> 00:35:33.310
Well, we've taken care of that.

00:35:33.390 --> 00:35:35.400
We've implemented it.

00:35:37.330 --> 00:35:38.890
And we did that earlier this
year with something called

00:35:38.900 --> 00:35:41.690
the SWT Compatibility Pack.

00:35:41.730 --> 00:35:45.390
We released that at Java 1 this year.

00:35:45.540 --> 00:35:46.890
with great ceremony.

00:35:46.900 --> 00:35:52.230
Anybody of you were at the
MacÂ OSÂ X boff at Java 1.

00:35:52.280 --> 00:35:55.800
And this is the
AWT support for the bridge.

00:35:56.120 --> 00:35:59.880
We've got an add-on pack that
you would install into Java 5.

00:35:59.930 --> 00:36:02.560
Did not modify your installed Java.

00:36:02.840 --> 00:36:10.570
and it did the required,
it does require Java 5 release 4,

00:36:10.570 --> 00:36:10.570
which was released shortly before that.

00:36:12.290 --> 00:36:17.640
I'm going to show you a
little bit about what it does.

00:36:17.640 --> 00:36:21.740
This is not exactly an exciting demo,
but it gives you an idea of what

00:36:21.770 --> 00:36:23.970
we were trying to accomplish.

00:36:24.100 --> 00:36:26.170
So I'm going to go over
here to this example,

00:36:26.220 --> 00:36:30.300
and all I've done here is I've taken the

00:36:30.530 --> 00:36:36.200
snippet 135 from the SWT snippets page,
and if you get some time,

00:36:36.200 --> 00:36:39.180
you might want to look around there
because the snippets page consists of

00:36:39.290 --> 00:36:43.520
a number of test cases that basically
show you how an SWT widget works.

00:36:43.520 --> 00:36:48.400
So sort of the thinking is,
if we have 10,000

00:36:48.400 --> 00:36:52.800
snippets that are small,
compact, and explain the API,

00:36:52.800 --> 00:36:55.450
that's at least as good or
better than documentation.

00:36:55.460 --> 00:36:58.620
Not that you don't need documentation,
but if you're like me,

00:36:58.620 --> 00:37:00.680
I like to read code to
understand what's going on.

00:37:00.680 --> 00:37:04.390
So here's an example of what's
going on with the bridge.

00:37:04.400 --> 00:37:05.590
Here's the bridge.

00:37:06.540 --> 00:37:13.850
And what we have here is, look down here,
which is where the action is.

00:37:15.340 --> 00:37:19.330
Down here is where we
create an embedded shell.

00:37:19.510 --> 00:37:22.730
I'm sorry,
we create a shell and get ready to

00:37:22.730 --> 00:37:25.910
embed an AWT frame inside of it.

00:37:25.910 --> 00:37:31.610
So we make up a
collection of SWT widgets,

00:37:31.610 --> 00:37:31.610
and then down here,

00:37:31.980 --> 00:37:38.400
We make an AWT frame that will be
embedded inside that composite.

00:37:38.400 --> 00:37:40.850
We're going to add a text field
and show it in the window.

00:37:40.880 --> 00:37:45.740
And we'll do another one down
here that creates a J table,

00:37:45.820 --> 00:37:53.370
puts that inside of a panel
and inside of a frame,

00:37:53.550 --> 00:37:56.340
and then finally an AWT label.

00:37:56.340 --> 00:37:56.340
And I will run this.

00:38:01.620 --> 00:38:07.140
Here we have our snippet application,
and this is just a simple file browser.

00:38:07.170 --> 00:38:10.500
This is an SWT tree view
over here on the left.

00:38:10.510 --> 00:38:13.920
And we'll sort of walk down and we
see this is just a Swing J table

00:38:14.010 --> 00:38:15.740
with the Aqua look and feel.

00:38:15.740 --> 00:38:18.260
I can resize the columns.

00:38:18.540 --> 00:38:22.910
Expand that, and as I click on that,
it updates the model

00:38:22.910 --> 00:38:26.600
over here on the right,
and I see my path up here,

00:38:26.740 --> 00:38:31.080
and sort of just as an example
of some SWT widgets as well,

00:38:31.080 --> 00:38:35.880
here's one of their buttons,
which brings up another shell,

00:38:35.880 --> 00:38:38.600
which is like a modal dialog.

00:38:38.600 --> 00:38:41.090
And so, you know, very straightforward.

00:38:41.090 --> 00:38:45.000
I mean, I'm using the scroll wheel,
and because that's a native view,

00:38:45.000 --> 00:38:45.910
it just works.

00:38:45.910 --> 00:38:47.370
There's no extra work.

00:38:48.500 --> 00:38:51.580
for you as a developer
to get that to happen.

00:38:52.310 --> 00:38:59.000
and the rest of the team.

00:38:59.000 --> 00:39:00.170
And that's pretty much it in a nutshell.

00:39:00.170 --> 00:39:00.170
I mean,
I think it's important to note here that

00:39:02.170 --> 00:39:05.230
SWT AWT bridge also implies Swing.

00:39:05.370 --> 00:39:09.150
So you can write if you've got an
old Swing component that you need

00:39:09.280 --> 00:39:12.340
to use or you bought a package and
you don't have access to the source,

00:39:12.340 --> 00:39:19.690
you want to wrap it up and put it inside
an SWT plug-in or an RCP application,

00:39:19.690 --> 00:39:19.690
you can do that.

00:39:19.700 --> 00:39:29.900
[Transcript missing]

00:39:30.500 --> 00:39:33.200
All right, so I'm going to quit that.

00:39:33.200 --> 00:39:36.470
And you will notice that
our application is hung.

00:39:37.100 --> 00:39:43.300
I'm calling that out for a reason because
we're going to go back to the slides now.

00:39:45.530 --> 00:39:48.970
and I want to let you know that when
we release this and it's out there,

00:39:48.970 --> 00:39:51.600
there are a few things
you want to be aware of.

00:39:53.560 --> 00:39:56.000
First of all,
keep in mind that the SWT event

00:39:56.270 --> 00:39:58.280
loop is the toolkit thread.

00:39:58.390 --> 00:40:03.550
The SWT is pulling events off
with Carbon and dispatching

00:40:03.580 --> 00:40:06.320
them to Windows directly.

00:40:07.180 --> 00:40:11.270
Because of that,
we have a rule in the AWT that you

00:40:11.270 --> 00:40:17.200
should not manipulate AWT objects from
the SWT thread or the toolkit thread.

00:40:17.350 --> 00:40:22.000
This is all well documented
in technical note TN2147.

00:40:22.000 --> 00:40:25.620
I recommend that you go look at
that if you're going to develop a

00:40:25.670 --> 00:40:29.030
plug-in or anything that's going
to use the bridge because that's

00:40:29.030 --> 00:40:30.840
got lots of good information.

00:40:30.840 --> 00:40:33.960
As you're reading through
that technical note,

00:40:34.030 --> 00:40:36.840
keep in mind that when
you're in SWT code,

00:40:37.130 --> 00:40:40.170
think of yourself as in the
Cocoa layer that that document

00:40:40.170 --> 00:40:42.370
talks about or in the Cocoa thread.

00:40:44.020 --> 00:40:45.760
Alright?

00:40:45.900 --> 00:40:49.880
So that means that, um,

00:40:50.410 --> 00:40:52.890
Sorry, back up one step there.

00:40:52.910 --> 00:40:56.250
So that means you're going to
need things like invoke later

00:40:56.260 --> 00:41:04.470
to when you call an AWT object,
when you make a call to manipulate that.

00:41:04.670 --> 00:41:10.250
Don't bring up a modal dialogue from
an SWT button because once you do that,

00:41:10.260 --> 00:41:12.600
nothing's dispatching events
anymore and you're going to hang.

00:41:12.600 --> 00:41:18.860
You're going to get a
nice spinning beach ball.

00:41:18.860 --> 00:41:21.550
Those are the two main things
you've got to look out for.

00:41:23.140 --> 00:41:26.960
Right now you've got to use system.exit
if you're writing an SWT application.

00:41:26.960 --> 00:41:30.520
Don't do this in a plug-in.

00:41:32.040 --> 00:41:34.490
Nobody wants your plugin
bringing down Eclipse.

00:41:34.590 --> 00:41:36.780
You don't really need
it in Eclipse itself.

00:41:36.810 --> 00:41:38.220
But if you're writing a
standalone application,

00:41:38.220 --> 00:41:39.120
you will need it for a while.

00:41:42.600 --> 00:41:46.740
The application pack, well,
what we call the application,

00:41:46.740 --> 00:41:51.010
the SWT compatibility pack,
is built into Leopard.

00:41:51.270 --> 00:41:52.950
No additional downloads will be needed.

00:41:52.960 --> 00:41:55.980
I do know it's in Java SE 6.

00:41:55.980 --> 00:41:58.090
I think it's in Java 5.

00:41:58.100 --> 00:42:01.200
After testing yesterday,
I'm not so sure now.

00:42:01.220 --> 00:42:02.310
But it will be in the final version.

00:42:03.910 --> 00:42:05.260
There will not be any
extra downloads needed.

00:42:05.260 --> 00:42:05.990
We're just going to build it.

00:42:05.990 --> 00:42:07.340
Build it in.

00:42:07.360 --> 00:42:09.760
In Tiger, it will be in our Java SES.

00:42:09.760 --> 00:42:12.080
It's in our developer previews already.

00:42:12.080 --> 00:42:14.360
It's already built into that,
and that will continue to

00:42:14.360 --> 00:42:15.730
be the case down the road.

00:42:18.190 --> 00:42:21.970
Things I'm describing here, you know,
about system.exit and, you know,

00:42:21.980 --> 00:42:26.610
the toolkit thread and those issues,
we consider those bugs.

00:42:26.770 --> 00:42:27.820
We know about them.

00:42:28.020 --> 00:42:28.940
We're working to fix them.

00:42:29.010 --> 00:42:36.990
We hope to have it taken care of
by Leopard when it finally ships.

00:42:38.160 --> 00:42:42.360
We know about this,
but keep in mind that it's

00:42:42.360 --> 00:42:45.420
largely a compatibility thing
with Windows to do it that way.

00:42:45.450 --> 00:42:48.400
If you look at some
documentation on the AWT,

00:42:48.400 --> 00:42:52.210
they will also tell you to, you know,
if you're using JNI,

00:42:52.320 --> 00:42:56.750
don't manipulate your code from
Windows from Win32 event handlers,

00:42:56.840 --> 00:42:57.880
for example.

00:42:59.430 --> 00:43:04.440
So what I'm saying is
technically consistent.

00:43:04.600 --> 00:43:06.950
You're often lucky that it works.

00:43:07.400 --> 00:43:27.200
[Transcript missing]

00:43:27.300 --> 00:43:27.860
But it's there.

00:43:27.860 --> 00:43:31.160
We're going to keep
maintaining it and updating it.

00:43:31.290 --> 00:43:40.170
And we want to continue to let you
use this product on MacÂ OSÂ X because

00:43:40.170 --> 00:43:41.720
we think it's important.

00:43:44.840 --> 00:43:45.700
All right.

00:43:45.700 --> 00:43:51.460
So that's a little bit of the
details on where we've come so far.

00:43:51.490 --> 00:44:02.470
Part of building that bridge layer
involved me contributing a chunk

00:44:02.750 --> 00:44:03.700
back to Eclipse that implemented
the SWT portion of that bridge.

00:44:04.080 --> 00:44:11.610
And in doing so,
I got to learn a few things about how

00:44:11.820 --> 00:44:21.480
will be talking about how the
contribution process works in the SWT.

00:44:21.490 --> 00:44:21.490
So the SWT on MacÂ OSÂ X

00:44:22.180 --> 00:44:24.000
We know a lot of things about it,
of course, right?

00:44:24.020 --> 00:44:24.950
It's open source.

00:44:24.990 --> 00:44:26.500
I've already told you
it's based on Carbon.

00:44:26.500 --> 00:44:29.170
You can go get the code and
you'll see what it looks like,

00:44:29.170 --> 00:44:30.560
how it's using Carbon.

00:44:32.720 --> 00:44:36.760
There are a few things
that are less widely known,

00:44:36.840 --> 00:44:38.670
for lack of a better word.

00:44:39.290 --> 00:44:42.910
If I want to get involved,
the standard mantra in an

00:44:42.910 --> 00:44:46.180
open source project is,
if you don't like it, submit a patch.

00:44:46.180 --> 00:44:46.940
Right?

00:44:48.390 --> 00:44:50.900
That's what real programmers
do in an open source project.

00:44:50.900 --> 00:44:52.690
You submit a patch.

00:44:52.800 --> 00:44:54.380
Well, okay.

00:44:54.380 --> 00:44:55.300
How do I do that?

00:44:55.300 --> 00:44:58.180
I don't know.

00:44:58.360 --> 00:44:59.310
You just learn, right?

00:44:59.310 --> 00:45:02.830
Otherwise,
you'll never get into that inner circle

00:45:02.840 --> 00:45:05.310
of people working on the project.

00:45:05.320 --> 00:45:08.770
How can I contribute?

00:45:09.470 --> 00:45:11.340
Well, you do this, that,
and the other thing.

00:45:11.360 --> 00:45:11.700
I don't know.

00:45:11.700 --> 00:45:15.310
Well, today,

00:45:15.600 --> 00:45:19.180
I had the luxury of having
somebody show me how to do this,

00:45:19.180 --> 00:45:24.360
and I thought it would be beneficial for
all you guys to learn how to do this too.

00:45:24.360 --> 00:45:27.440
So I have invited Steve Northover,
technical lead from the

00:45:27.440 --> 00:45:30.140
SWT and Sileni Quarti,
one of the engineers who works

00:45:30.140 --> 00:45:33.870
on the Carbon pieces of the SWT,
to come up here and we're going to show

00:45:33.870 --> 00:45:35.360
you how to contribute back to the SWT.

00:45:35.360 --> 00:45:39.570
We're going to fix a bug right
here and show you the process,

00:45:39.700 --> 00:45:43.720
and hopefully you can get involved
too if you're a Carbon developer.

00:45:43.720 --> 00:45:45.460
So guys, come on up.

00:45:54.500 --> 00:45:56.000
- Switch to demo?

00:45:56.000 --> 00:45:56.830
- We are there.

00:45:56.840 --> 00:45:58.940
- Well, first things first,
I'm gonna take these shoes off.

00:45:59.020 --> 00:46:01.390
My shoes GP'd this morning on the way.

00:46:01.400 --> 00:46:03.840
Goddamn Microsoft shoes.

00:46:04.700 --> 00:46:06.660
So we're going to fix a bug.

00:46:06.670 --> 00:46:12.080
So one of the interesting things about
Eclipse and SWT is it's open source and

00:46:12.090 --> 00:46:13.920
all of the work happens out of Bugzilla.

00:46:13.920 --> 00:46:18.760
And when I was with Scott at Java 1,
we just went searching for

00:46:18.770 --> 00:46:20.580
a bug for Scott to fix.

00:46:20.580 --> 00:46:22.860
Scott's a Carbon expert.

00:46:22.860 --> 00:46:25.610
And so, you know,
the place where you find

00:46:25.610 --> 00:46:27.540
bugs to fix is in Bugzilla.

00:46:27.540 --> 00:46:29.060
So go to Bugzilla.

00:46:29.060 --> 00:46:32.540
And we were just searching
around for something to fix.

00:46:32.540 --> 00:46:33.780
And so we looked for Cursor.

00:46:34.180 --> 00:46:39.280
So, but select the OS Mac, right,
so that we don't get every

00:46:39.320 --> 00:46:41.490
cursor bug in the world.

00:46:41.710 --> 00:46:45.130
And we kind of looked down the
menu to see what's a good one.

00:46:45.170 --> 00:46:49.890
And Column Resize Cursor
shows it wrong position.

00:46:49.970 --> 00:46:53.060
So we just grabbed on that one.

00:46:53.100 --> 00:46:56.380
One of the things you might
want to-- why would you want to

00:46:56.380 --> 00:46:57.910
contribute to SWT or Eclipse?

00:46:58.090 --> 00:46:59.410
Well, you're using Eclipse.

00:46:59.460 --> 00:47:00.110
And there's a bug.

00:47:00.120 --> 00:47:01.690
And it's driving you crazy.

00:47:01.720 --> 00:47:04.260
And it's not getting fixed fast enough.

00:47:04.410 --> 00:47:05.660
Or you have an RCP app.

00:47:05.660 --> 00:47:08.740
And it's holding you up.

00:47:08.760 --> 00:47:10.590
And it's still not
getting fixed fast enough.

00:47:10.700 --> 00:47:14.200
And the best way to get something fixed
is the squeaky wheel gets the grease.

00:47:14.200 --> 00:47:18.140
And if you embarrass us with
code or some patch or a fix,

00:47:18.140 --> 00:47:23.290
that causes us to go into action.

00:47:23.430 --> 00:47:25.360
Bug Report comes with
a nice test case in it.

00:47:25.360 --> 00:47:28.520
So we grab that test
code and paste it in.

00:47:28.520 --> 00:47:30.660
It should show the problem,
whatever that is.

00:47:30.660 --> 00:47:32.730
I suppose we can go through there.

00:47:32.810 --> 00:47:36.340
I think an important thing
to note is run the test case.

00:47:36.340 --> 00:47:40.000
Just sort of an aside here is
that Steve looked at it and said,

00:47:40.070 --> 00:47:41.660
oh, yeah, we'll just go run the examples.

00:47:41.660 --> 00:47:43.370
And now that's got a table in it.

00:47:43.390 --> 00:47:44.780
We can just do it there.

00:47:44.840 --> 00:47:46.540
So we ran it.

00:47:46.540 --> 00:47:47.490
Oh, can't reproduce it.

00:47:47.620 --> 00:47:48.640
Won't fix.

00:47:48.640 --> 00:47:49.730
Works for me.

00:47:49.740 --> 00:47:53.160
So we're on the verge of
marking it as won't fix.

00:47:53.160 --> 00:47:55.330
And then, oh,
maybe we should actually run the code.

00:47:55.440 --> 00:47:56.890
Yeah.

00:47:56.930 --> 00:47:58.590
Very important.

00:48:00.200 --> 00:48:02.990
So one of the things you'll notice
that Sileni is doing here is he's

00:48:03.080 --> 00:48:06.980
building and running it is that,
um,

00:48:07.410 --> 00:48:09.640
We're not showing it to you here,
but one thing you have to do is

00:48:09.640 --> 00:48:14.890
set the build path as part of
building anything that uses the SWT.

00:48:14.900 --> 00:48:18.720
Before we go on, did everybody have a
chance to download the SWT?

00:48:18.720 --> 00:48:22.090
Did anybody try to do that
or take a look at that?

00:48:22.120 --> 00:48:22.980
Okay.

00:48:22.980 --> 00:48:25.220
If you're able to follow
those instructions,

00:48:25.220 --> 00:48:29.740
you should at least be well enough
along that you can run a sample

00:48:30.340 --> 00:48:34.040
application like this against the
code that you just downloaded.

00:48:34.460 --> 00:48:40.320
So if you set the build path to
include the org-eclipse.swt project,

00:48:40.380 --> 00:48:44.770
this is just going to, you know,
all the imports will resolve

00:48:44.850 --> 00:48:47.390
and you'll be able to run,
and here we go.

00:48:47.420 --> 00:48:50.090
So now let's see if we
can reproduce this bug.

00:48:50.100 --> 00:48:51.160
Oh, look at there.

00:48:52.570 --> 00:48:56.400
We were on the resize
portion of that table view,

00:48:56.400 --> 00:48:58.330
but now we're sort of
off and up to the left,

00:48:58.400 --> 00:49:01.230
up and to the left a little bit,
and it's changing.

00:49:01.240 --> 00:49:03.500
In fact, actually,
it's doing more than that.

00:49:03.500 --> 00:49:07.010
It's changing at the wrong place,
but it's also flickering

00:49:07.010 --> 00:49:08.900
back and forth to a pointer.

00:49:08.900 --> 00:49:12.140
So when I see that sort of thing,
it's like, you know,

00:49:12.200 --> 00:49:14.990
it looks like an off by the inset, right?

00:49:15.010 --> 00:49:15.660
Because it's changing.

00:49:15.660 --> 00:49:18.310
If I move that table up a bit,
the resize bar would

00:49:18.310 --> 00:49:19.720
be in the right place.

00:49:20.060 --> 00:49:23.420
So, like,
how do you set the cursor in SWT?

00:49:23.420 --> 00:49:26.210
Well, there's a method,
control.setCursor,

00:49:26.210 --> 00:49:28.100
so Silenio will go and get that.

00:49:29.520 --> 00:49:31.730
Go to Control,
which it's there already for you,

00:49:31.740 --> 00:49:33.330
and get to Set Cursor.

00:49:33.440 --> 00:49:34.480
Somebody, oh, OK.

00:49:34.520 --> 00:49:35.740
Fine.

00:49:35.760 --> 00:49:39.320
And there's a great wad of crap.

00:49:39.390 --> 00:49:40.950
And oh, look at all that Carbon.

00:49:40.960 --> 00:49:44.180
I wish I had Time Machine to go
back and have it all be Cocoa.

00:49:44.180 --> 00:49:50.280
Time Machine actually could be really
useful to go back to high school.

00:49:50.500 --> 00:49:53.190
But anyways, down at the bottom,
after all that rubbish,

00:49:53.190 --> 00:49:54.660
is Handle Control Set Cursor.

00:49:54.660 --> 00:49:59.500
And that's the Carbon API that
changes the cursor for you.

00:49:59.500 --> 00:50:02.120
Just real quick,
let's call out how you're

00:50:02.120 --> 00:50:03.670
using Carbon here directly.

00:50:03.750 --> 00:50:05.780
You see these OS dot whatever.

00:50:05.790 --> 00:50:08.620
Those are direct calls into Carbon.

00:50:08.630 --> 00:50:11.180
If you look down underneath,
there'll be a dot C file that

00:50:11.180 --> 00:50:14.020
has all these Carbon API calls.

00:50:14.100 --> 00:50:19.080
And all we're doing is we're
taking Java data types,

00:50:19.080 --> 00:50:22.190
marshaling them to a Carbon call,
calling that call directly,

00:50:22.190 --> 00:50:23.550
and coming right back.

00:50:23.580 --> 00:50:24.370
One for one.

00:50:24.390 --> 00:50:27.140
And so that's one of the reasons
why Scott could help out right away,

00:50:27.140 --> 00:50:29.280
because it was just a
bunch of Carbon calls.

00:50:29.380 --> 00:50:30.440
He's a Carbon expert.

00:50:30.440 --> 00:50:34.420
And he could see what-- I mean, Modulo,
the piles of goo, he could see what was

00:50:34.470 --> 00:50:36.040
going on in the code.

00:50:36.060 --> 00:50:38.320
And so we do references to this guy.

00:50:38.320 --> 00:50:41.560
So I know in that example code,
we weren't actually setting the cursor.

00:50:41.560 --> 00:50:43.760
The cursor is being changed
automatically by-- or it's

00:50:43.820 --> 00:50:46.130
being changed inside of Carbon.

00:50:46.140 --> 00:50:49.300
So do references of this thing.

00:50:49.990 --> 00:50:53.860
and I happen to know that it's actually
in this method in display run inter-exit

00:50:53.860 --> 00:50:57.030
that runs as part of the event loop,
so the cursor gets set.

00:50:57.120 --> 00:50:57.900
So we'll go to that one.

00:50:57.900 --> 00:50:59.320
Are we on it?

00:50:59.400 --> 00:50:59.820
Yep.

00:50:59.970 --> 00:51:02.100
And there's a bunch of
mouse still down and blah,

00:51:02.100 --> 00:51:05.440
blah, blah, blah, blah,
but there we're getting the window

00:51:05.620 --> 00:51:09.550
bounce and we won't bother going,
but we can go get the documentation for

00:51:09.550 --> 00:51:17.700
handle control set cursor and it's going
to tell us that under compositing mode,

00:51:17.730 --> 00:51:18.140
Yes.

00:51:18.340 --> 00:51:21.870
it wants to have the point
in terms of the control,

00:51:21.880 --> 00:51:22.990
not in terms of the window.

00:51:23.000 --> 00:51:23.650
Of the H.I.

00:51:23.650 --> 00:51:24.970
view as opposed to, yeah.

00:51:25.050 --> 00:51:28.740
So there's our bug right there and we
had the indication of it because of

00:51:28.790 --> 00:51:31.360
the sort of off by the size of the,
or the inset.

00:51:31.540 --> 00:51:36.610
So, Sileni was going to go and
grab the fix which we can,

00:51:36.610 --> 00:51:36.610
you know,

00:51:36.830 --> 00:51:38.460
We could generate if you want.

00:51:38.460 --> 00:51:43.160
The Food Network method of
code demonstration here.

00:51:43.160 --> 00:51:45.740
We go to the oven and
bring you the final copy.

00:51:45.880 --> 00:51:47.580
Prebaked.

00:51:47.580 --> 00:51:50.560
And I guess we have--
we run both compositing.

00:51:50.580 --> 00:51:53.490
We've foolishly called the variable
that controls that high view,

00:51:53.490 --> 00:51:55.390
which should be called
compositing or whatever.

00:51:55.530 --> 00:51:59.710
But anyway, so we run-- the toolkit runs
compositing and not compositing,

00:51:59.930 --> 00:52:03.460
because I guess we ran
before there was compositing.

00:52:03.460 --> 00:52:03.740
That's right.

00:52:03.740 --> 00:52:06.740
You've been around long before
the new HIV modes were around.

00:52:06.740 --> 00:52:08.740
Although Eclipse wouldn't
officially support us.

00:52:08.740 --> 00:52:12.420
We've been running-- we had a
Mac board for quite a while.

00:52:12.420 --> 00:52:17.130
But anyways,
so there's the HIV compositing case.

00:52:17.140 --> 00:52:22.760
And we convert the point and then send
that off to handle control set cursor.

00:52:22.830 --> 00:52:25.230
So Sonia will save that stuff.

00:52:25.390 --> 00:52:31.360
What we were doing effectively was a
global to local in the old port thinking.

00:52:31.400 --> 00:52:33.700
But now we have to actually convert
it to the coordinate system.

00:52:33.750 --> 00:52:34.700
So we're going to do that.

00:52:34.720 --> 00:52:38.720
And then we're going to do the same
thing with the Eclipse system of the HIV.

00:52:38.720 --> 00:52:40.220
So that's what we're doing here.

00:52:40.220 --> 00:52:42.710
And unfortunately,
there's a very cool call in

00:52:42.780 --> 00:52:44.220
10.4 that does this in one step.

00:52:44.220 --> 00:52:49.220
But Eclipse, remember,
Eclipse works back through 10.3.

00:52:49.420 --> 00:52:50.720
10.3.9, at least.

00:52:50.720 --> 00:52:52.480
Yeah, we-- Officially.

00:52:52.480 --> 00:52:54.010
So any patches you make
need to work against 10.3.9,

00:52:54.010 --> 00:52:54.010
at

00:52:54.320 --> 00:52:56.170
So we save the code, rerun it.

00:52:56.280 --> 00:52:57.130
Notice we're not building it.

00:52:57.140 --> 00:53:01.800
We don't build any C files or nothing
because there's no C code there.

00:53:01.800 --> 00:53:03.060
It's all the one-to-one mapping.

00:53:03.060 --> 00:53:04.730
And there we go, and we move.

00:53:04.870 --> 00:53:05.340
Hey, look at that.

00:53:09.800 --> 00:53:10.800
You guys are good.

00:53:10.820 --> 00:53:11.800
All right.

00:53:11.800 --> 00:53:12.800
So, that's typical.

00:53:12.800 --> 00:53:14.800
There's two managers and
one guy doing the work.

00:53:14.800 --> 00:53:15.800
Yep.

00:53:15.800 --> 00:53:19.200
Is this mic even turned on?

00:53:19.770 --> 00:53:20.700
No.

00:53:20.810 --> 00:53:22.980
So there, I fixed a bug.

00:53:22.990 --> 00:53:24.700
But did you really fix it?

00:53:24.700 --> 00:53:26.960
Well, did I really fix it?

00:53:27.100 --> 00:53:27.600
Okay.

00:53:27.600 --> 00:53:32.000
So what else is wrong?

00:53:32.000 --> 00:53:34.090
Anybody from the audience?

00:53:34.090 --> 00:53:34.090
Did we actually fix this?

00:53:34.090 --> 00:53:34.090
We fixed the test case, but...

00:53:34.540 --> 00:53:35.480
Well, we can check it in.

00:53:35.480 --> 00:53:36.500
That would be fine too.

00:53:36.500 --> 00:53:38.410
But there's a bunch of things.

00:53:38.420 --> 00:53:42.420
I mean, just fixing the one case,
did we put other stuff out?

00:53:42.450 --> 00:53:47.100
There were other references to handle,
set cursor, control, whatever,

00:53:47.100 --> 00:53:50.030
and we need to check
all of those references.

00:53:50.080 --> 00:53:52.990
If we made the mistake of not
converting the coordinates in one place,

00:53:53.070 --> 00:53:55.080
we may make the mistake
in multiple places.

00:53:55.080 --> 00:53:56.210
So there's that.

00:53:56.280 --> 00:53:59.530
And then,
did we break setting cursors for tables

00:53:59.640 --> 00:54:02.420
or for every control in the universe?

00:54:02.420 --> 00:54:03.770
So there's a bunch of more.

00:54:04.400 --> 00:54:06.160
Also,
we need to run the JUnit test case to see

00:54:06.160 --> 00:54:07.850
if we put something else out of whack.

00:54:07.910 --> 00:54:10.180
So there's a bunch of more
stuff that needs to happen.

00:54:10.180 --> 00:54:14.330
But as a guy contributing to Eclipse,
like just a random person,

00:54:14.330 --> 00:54:18.780
you made the patch, you fixed it,
and you want to give us the code.

00:54:18.780 --> 00:54:22.830
And I mean, if you submit a patch
that fixes the test case,

00:54:22.830 --> 00:54:27.000
I mean, we will take that patch,
but we'll also evaluate it in

00:54:27.110 --> 00:54:30.130
terms of the whole toolkit,
which as a guy,

00:54:30.180 --> 00:54:33.930
until you're more familiar
with a large code base,

00:54:33.930 --> 00:54:34.380
and then we'll see.

00:54:34.550 --> 00:54:36.420
Until you're more familiar with it,
you're not going to know all the

00:54:36.440 --> 00:54:37.500
places where you need to change.

00:54:37.640 --> 00:54:40.680
However,
getting to the place where the bug is and

00:54:40.920 --> 00:54:46.160
showing us the fix is 99.9% of the work,
and it's amazing, right?

00:54:46.180 --> 00:54:49.970
And in this particular project,
I have noticed that if you submit a patch

00:54:50.070 --> 00:54:54.830
that's not 100%, Steve's actually pretty
good about writing you back and saying,

00:54:54.840 --> 00:54:58.400
well, you did, but you didn't do this
other thing over here.

00:54:58.450 --> 00:55:00.120
He's very nice about it.

00:55:00.140 --> 00:55:04.380
This is really my first
involvement with it.

00:55:04.400 --> 00:55:07.190
It's an open source project,
and that was encouraging to me.

00:55:07.220 --> 00:55:09.280
So, I don't know.

00:55:09.300 --> 00:55:10.530
I think it's a good thing.

00:55:10.560 --> 00:55:15.960
The ultimate goal is that your
patches get better and better

00:55:15.960 --> 00:55:19.860
to a point where it's just a
matter of checking in the code.

00:55:19.860 --> 00:55:21.950
And at that point,
when the patches are right

00:55:21.950 --> 00:55:24.300
and all the cases are covered,
the person is really

00:55:24.320 --> 00:55:25.880
familiar with the code base.

00:55:25.880 --> 00:55:27.620
And at that point,
we vote for commit rights.

00:55:27.620 --> 00:55:30.340
And it's like three committers
have to say plus one.

00:55:30.340 --> 00:55:31.320
You vote for a commit right.

00:55:31.620 --> 00:55:33.910
And then it's because it
becomes more of an annoyance

00:55:33.970 --> 00:55:35.330
to submit your fix to go and,
oh,

00:55:35.580 --> 00:55:37.440
Scott knows what he's doing or whatever.

00:55:37.440 --> 00:55:39.440
Go and change the code and fix it, right?

00:55:39.440 --> 00:55:39.520
Yeah.

00:55:39.520 --> 00:55:43.930
But that's a relationship that is,
you know, it's actually a personal

00:55:43.930 --> 00:55:46.420
relationship with the individual.

00:55:46.420 --> 00:55:48.160
Like, commit rights are not for Apple.

00:55:48.160 --> 00:55:51.040
The commit rights are for Scott or,
you know, the individual.

00:55:51.040 --> 00:55:52.050
So, they go with the individual.

00:55:52.060 --> 00:55:54.520
So, we've had people with
commit rights leave,

00:55:54.520 --> 00:55:57.080
like some from IBM leave
and go to other places.

00:55:57.080 --> 00:55:58.240
They don't lose their commit rights.

00:55:58.240 --> 00:55:59.980
Right.

00:55:59.980 --> 00:56:01.600
So, let's attach the patch.

00:56:01.620 --> 00:56:02.620
Yep.

00:56:02.620 --> 00:56:05.630
So we have to build the patch.

00:56:06.570 --> 00:56:12.130
So we did a right click on that,
go to Team Create Patch.

00:56:15.110 --> 00:56:17.880
And the way Bugzilla works
on OS X is that you've got to

00:56:17.880 --> 00:56:19.860
write it out to a file first.

00:56:19.860 --> 00:56:22.650
So we're going to save
it out to our desktop.

00:56:23.940 --> 00:56:26.460
And you'll notice here that we're
actually hitting the CVS server,

00:56:26.460 --> 00:56:33.170
getting a diff against the latest stuff,
and now putting that on the desktop.

00:56:35.270 --> 00:56:40.630
And now it's time to
actually attach that patch.

00:56:41.200 --> 00:56:42.740
So he's going to create an attachment.

00:56:42.780 --> 00:56:44.850
Got to create, got to log in.

00:56:44.880 --> 00:56:47.560
A login account for
Bugzilla on Eclipse is free.

00:56:47.610 --> 00:56:48.530
Anybody can have one.

00:56:48.530 --> 00:56:57.510
And it's useful if for no other
reason that you get to attach

00:56:57.510 --> 00:56:57.510
yourself as a CC on a bug so that
you can watch the progress of it.

00:57:02.840 --> 00:57:04.360
You got typers anxiety?

00:57:04.360 --> 00:57:05.520
No.

00:57:05.520 --> 00:57:07.610
All the people watching
your every keystroke?

00:57:13.120 --> 00:57:14.000
There we go.

00:57:14.000 --> 00:57:16.000
Hey, all right.

00:57:16.000 --> 00:57:19.390
So we're gonna go find our file,
pick that patch.

00:57:27.050 --> 00:57:28.900
Don't forget to mark patch.

00:57:28.900 --> 00:57:30.890
It will complain.

00:57:30.900 --> 00:57:33.460
Okay, we can put in the
comments that we can say,

00:57:33.460 --> 00:57:36.300
I don't even,
we didn't check all the references.

00:57:36.300 --> 00:57:37.000
Right.

00:57:37.020 --> 00:57:38.680
This fixes the bug.

00:57:38.680 --> 00:57:40.580
This fixes the bug and
that sort of thing.

00:57:40.580 --> 00:57:43.270
But, I mean,
there was a slight chance that a

00:57:43.270 --> 00:57:48.520
committer would have found this bug
and fixed it before this presentation,

00:57:48.520 --> 00:57:51.230
which would have been disastrous
because it's all live.

00:57:51.280 --> 00:57:53.090
But, I suppose we could have unfixed it.

00:57:56.200 --> 00:58:10.400
[Transcript missing]

00:58:12.510 --> 00:58:13.500
There we go.

00:58:13.500 --> 00:58:18.570
So, message to himself, but anyways.

00:58:18.780 --> 00:58:19.700
Okay.

00:58:19.710 --> 00:58:20.710
And there you go.

00:58:20.750 --> 00:58:23.400
That's sort of a look at
what a patch looks like.

00:58:23.400 --> 00:58:25.180
It's basically a CVS code.

00:58:30.070 --> 00:58:31.360
So that's how you do it.

00:58:31.390 --> 00:58:33.750
I think everybody in this
room is capable of that,

00:58:33.800 --> 00:58:35.390
and so that's something
you can get involved with.

00:58:35.410 --> 00:58:41.510
Hey Steve,
you need a ride to the airport Thursday?

00:58:42.540 --> 00:58:43.760
Nobody watch the Seinfeld, I guess.

00:58:43.760 --> 00:58:45.640
I don't know.

00:58:45.640 --> 00:58:47.740
All right.

00:58:47.810 --> 00:58:53.760
So in summary,
as soon as I find my clicker.

00:58:56.160 --> 00:59:00.000
The big thing to let you know is
that Eclipse is more than a Java IDE.

00:59:00.000 --> 00:59:00.860
It's free.

00:59:00.880 --> 00:59:01.750
You can download it.

00:59:01.820 --> 00:59:03.190
There's lots of other
stuff you can do with it.

00:59:03.240 --> 00:59:07.120
A lot of companies are building
products on top of the RCP and

00:59:07.120 --> 00:59:09.110
the layers of the Eclipse.

00:59:09.590 --> 00:59:10.930
3.2 is now available.

00:59:10.960 --> 00:59:14.900
This was a simultaneous release
of all 10 separate projects.

00:59:14.900 --> 00:59:16.230
Go take a look and see what's out there.

00:59:16.250 --> 00:59:19.880
And MacÂ OSÂ X is supported now.

00:59:19.880 --> 00:59:24.150
So you can build an
RCP application for the Mac.

00:59:26.300 --> 00:59:29.540
Apple is committed to
making Eclipse great.

00:59:29.540 --> 00:59:34.340
We've already shipped an update
to make it work on Tiger.

00:59:34.340 --> 00:59:36.470
We're building it into Leopard.

00:59:36.780 --> 00:59:38.400
We are contributing.

00:59:38.450 --> 00:59:41.170
We're going to support the
SW team as best we can.

00:59:41.220 --> 00:59:42.640
The Carbon guys are involved as well.

00:59:42.640 --> 00:59:45.660
We've got them looking at things
and providing feedback as well.

00:59:45.660 --> 00:59:49.700
Because for everything that I look at,
Eric Schlegel and Guy Fullerton

00:59:49.700 --> 00:59:53.920
look at it and just say,
"Oh yeah, that's it." So as a company,

00:59:54.050 --> 00:59:56.910
we're committed to making this work.

00:59:57.960 --> 00:59:58.900
You can help out too.

00:59:58.900 --> 01:00:01.790
That was the big message for the
last part of our session today,

01:00:01.810 --> 01:00:05.900
is that it's possible for
regular guys to get in there and,

01:00:05.960 --> 01:00:08.720
you know,
get your arms dirty and make changes

01:00:08.740 --> 01:00:10.660
and contribute back to the project.