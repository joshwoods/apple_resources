WEBVTT

00:00:10.650 --> 00:00:12.800
Good afternoon.

00:00:12.800 --> 00:00:17.360
Welcome to session 116,
Controlling Scriptable Applications.

00:00:17.360 --> 00:00:20.580
I'm Chris Nebel, your host for the hour.

00:00:21.100 --> 00:00:23.240
And Controlling Scriptable Applications.

00:00:23.240 --> 00:00:25.600
This title could mean a
couple of different things,

00:00:25.600 --> 00:00:27.340
and you know,
not everyone reads the session

00:00:27.340 --> 00:00:28.810
descriptions before coming in here.

00:00:28.940 --> 00:00:30.790
It's okay, I do it myself.

00:00:30.910 --> 00:00:33.990
So let me take a couple minutes to
talk about what we are not going

00:00:33.990 --> 00:00:35.740
to talk about in this session.

00:00:35.820 --> 00:00:38.000
This session is not about
learning AppleScript.

00:00:38.000 --> 00:00:40.760
I'm not going to teach you about how
to write subroutines in AppleScript.

00:00:40.760 --> 00:00:44.550
You're not going to learn any
clever Photoshop scripting tricks.

00:00:44.790 --> 00:00:47.360
This session is not about making
your application scriptable.

00:00:47.360 --> 00:00:48.700
We would love it if you did that.

00:00:48.700 --> 00:00:50.200
We would be happy to help you.

00:00:50.200 --> 00:00:51.760
But this is not the session for it.

00:00:51.910 --> 00:00:54.340
The official time for
that was all this morning,

00:00:54.340 --> 00:00:56.940
but there's still unofficial
lab time tomorrow.

00:00:56.940 --> 00:00:58.300
Go to the lab across the hall.

00:00:58.300 --> 00:00:59.180
Ask for John Comiskey.

00:00:59.180 --> 00:01:00.270
He's the real expert.

00:01:00.400 --> 00:01:02.100
I can help you with some of it, too.

00:01:02.100 --> 00:01:05.370
We'd be happy to help you with
whatever problems you have.

00:01:05.830 --> 00:01:08.650
And lastly,
and this is the kind of important one,

00:01:08.660 --> 00:01:10.860
this session is not
about just AppleScript.

00:01:10.860 --> 00:01:13.700
We will be talking about AppleScript,
but it's not just AppleScript.

00:01:13.700 --> 00:01:17.640
A lot of people,
some of my management chain among them,

00:01:17.700 --> 00:01:20.330
have this idea that if you're
going to make a Scriptable

00:01:20.330 --> 00:01:23.700
Application do something,
you have to use AppleScript to do it.

00:01:23.700 --> 00:01:25.700
Scriptable equals AppleScriptable.

00:01:25.700 --> 00:01:27.690
And this is not really true.

00:01:27.700 --> 00:01:31.700
The basic mechanism by which
an application is Scriptable,

00:01:31.700 --> 00:01:34.700
Apple events, those were designed to
be language neutral.

00:01:34.700 --> 00:01:37.710
So you can use
AppleScript if you want to,

00:01:37.710 --> 00:01:42.350
by all means do so, works great,
we'll be talking about some ways

00:01:42.550 --> 00:01:44.700
that it's improved in Leopard.

00:01:44.710 --> 00:01:47.590
But you could equally
well be using Objective C,

00:01:47.590 --> 00:01:50.340
or Python, or Ruby,
or any of a number of other

00:01:50.340 --> 00:01:53.700
scripting languages that
are installed on the system.

00:01:53.900 --> 00:01:56.480
Because all of them can
control Scriptable Applications

00:01:56.480 --> 00:01:57.700
in one way or another.

00:01:57.870 --> 00:02:01.500
Now, some of the mechanisms that they use
to do it are not very well publicized,

00:02:01.500 --> 00:02:03.700
some of them are not as
pretty as they could be.

00:02:03.700 --> 00:02:06.050
But we are working on
improving that in Leopard,

00:02:06.050 --> 00:02:08.700
which brings us to what we
are going to talk about.

00:02:12.770 --> 00:02:14.900
Using features from other applications.

00:02:14.950 --> 00:02:18.200
You can make other applications
do your work for you.

00:02:18.280 --> 00:02:22.720
There are lots of Scriptable
Applications on the system,

00:02:22.850 --> 00:02:24.170
some of them from Apple,
some more from third parties,

00:02:24.170 --> 00:02:25.990
and they will do all sorts of useful
things for you if you ask them to.

00:02:26.060 --> 00:02:30.350
For instance,
iPhoto's Mail Photos feature is actually

00:02:30.350 --> 00:02:35.800
implemented by telling Mail to make
a new message and attach this photo.

00:02:36.130 --> 00:02:37.750
They didn't have to
write their own mailer.

00:02:37.900 --> 00:02:39.800
They had Mail do it for them.

00:02:39.810 --> 00:02:42.510
So you can do the same thing,
and we'll be talking

00:02:42.510 --> 00:02:43.670
about how to do that.

00:02:43.810 --> 00:02:46.580
Now, there are a number of different
mechanisms you can use to do this.

00:02:46.580 --> 00:02:48.240
Some of them work better than others.

00:02:48.240 --> 00:02:50.120
Some of them have certain pitfalls.

00:02:50.200 --> 00:02:53.930
So we'll be talking about how to do
that without causing undue suffering,

00:02:53.930 --> 00:02:56.240
either to you or to your users.

00:02:57.070 --> 00:02:59.100
And we'll be talking
about how to do that,

00:02:59.100 --> 00:03:02.300
like I said, from not just AppleScript,
but a variety of languages-- AppleScript,

00:03:02.300 --> 00:03:05.180
Objective C, Python,
and Ruby-- in that order.

00:03:05.180 --> 00:03:08.580
So let's begin with AppleScript.

00:03:09.170 --> 00:03:12.240
So AppleScript is kind of
the original make Scriptable

00:03:12.240 --> 00:03:13.860
Applications do stuff language.

00:03:13.860 --> 00:03:15.500
It's been around since System 7.

00:03:15.500 --> 00:03:16.460
Works very nicely.

00:03:16.460 --> 00:03:18.700
It's very, very good at controlling
Scriptable Applications,

00:03:18.700 --> 00:03:20.690
as it should be,
since that's what it was designed

00:03:20.690 --> 00:03:22.530
to do from the beginning.

00:03:23.520 --> 00:03:28.050
So for the past number of releases,
we've been making

00:03:28.120 --> 00:03:30.230
basically smallish changes,
small but useful stuff,

00:03:30.370 --> 00:03:34.100
expanding AppleScript here and there,
adding new Scriptable Applications.

00:03:34.100 --> 00:03:36.260
This is a list of some of
the high points from Tiger.

00:03:36.260 --> 00:03:38.900
There's a complete list now
available on the web filed

00:03:38.900 --> 00:03:43.780
under the Release Notes section
in the developer site.

00:03:43.780 --> 00:03:46.250
But by and large,
the core language is pretty much

00:03:46.310 --> 00:03:47.560
what it was at the beginning.

00:03:47.560 --> 00:03:53.280
Now, this is good in that it makes a nice
stable base to write your code on.

00:03:53.280 --> 00:03:55.880
But it's not so good in
that time marches on.

00:03:55.880 --> 00:04:00.220
There are certain key technologies now
that really just weren't there when

00:04:00.220 --> 00:04:02.000
AppleScript was originally designed,
so it doesn't work all

00:04:02.000 --> 00:04:03.180
that well with them.

00:04:03.200 --> 00:04:05.980
And there's some things that seemed
like good ideas at the time and have

00:04:05.980 --> 00:04:07.490
turned out really to not work so well.

00:04:07.760 --> 00:04:10.070
So for Leopard,
we're getting a bit more aggressive,

00:04:10.070 --> 00:04:12.130
and we're actually
tackling some of those.

00:04:12.980 --> 00:04:16.200
So the first one is all Unicode,
all the time.

00:04:16.240 --> 00:04:18.970
AppleScript is now Unicode top to bottom.

00:04:21.440 --> 00:04:24.080
You can put anything you
want in any language.

00:04:24.080 --> 00:04:27.160
If the system can manage to render it,
it's good script.

00:04:27.160 --> 00:04:29.170
You can put anything you
want in a string or comment.

00:04:29.420 --> 00:04:31.130
The syntax for identifiers
did not change,

00:04:31.160 --> 00:04:34.070
so don't get too crazy there.

00:04:34.450 --> 00:04:37.360
All internal text operations are Unicode.

00:04:37.360 --> 00:04:41.260
So however you combine and recombine
and generally mangle your strings,

00:04:41.260 --> 00:04:42.420
it will all work.

00:04:42.420 --> 00:04:45.750
And yes, we did in fact add a feature to
translate between code points

00:04:45.750 --> 00:04:47.350
and the actual characters.

00:04:47.410 --> 00:04:49.760
In general, you shouldn't actually
notice the difference.

00:04:49.760 --> 00:04:53.940
It's just that it will do
the wrong thing less often.

00:04:57.150 --> 00:05:00.780
Next one is we improved
the application model some.

00:05:00.780 --> 00:05:03.100
Added some new features here.

00:05:03.100 --> 00:05:06.660
We've supported telling an application
at a particular HFS path for a while.

00:05:06.660 --> 00:05:09.220
We've made POSIX path
an equal citizen there.

00:05:09.280 --> 00:05:12.700
You can tell an application by
its bundle ID or by its signature.

00:05:12.700 --> 00:05:15.160
This becomes very important when
you're distributing scripts.

00:05:15.160 --> 00:05:17.500
Users rename applications
from time to time.

00:05:17.500 --> 00:05:18.820
They'll move them around.

00:05:18.820 --> 00:05:20.570
Developers will rename
applications on you.

00:05:20.580 --> 00:05:23.650
FileMaker likes to do
this with every major rev.

00:05:24.020 --> 00:05:26.020
and there's some new intrinsic
application properties.

00:05:26.070 --> 00:05:28.460
All of these work without
launching the application,

00:05:28.460 --> 00:05:29.250
by the way.

00:05:29.340 --> 00:05:31.740
So you can directly get the version,
you can get the ID,

00:05:31.740 --> 00:05:33.940
you can find out if it's
frontmost or if it's running.

00:05:34.060 --> 00:05:36.940
That last one is because
of a pet peeve of mine.

00:05:36.940 --> 00:05:39.280
About once a month or so,
someone will ask on the

00:05:39.280 --> 00:05:41.800
AppleScript users list,
"How do I tell whether or not

00:05:41.800 --> 00:05:44.810
this application is running?"
And invariably the first five

00:05:44.890 --> 00:05:47.680
responses will be the lame,
slow way to do it.

00:05:47.710 --> 00:05:50.100
So now there's a nice, clean, direct way.

00:05:50.100 --> 00:05:51.950
I should mention that all
of these features here,

00:05:52.020 --> 00:05:55.800
you can do these things now,
but they tend to take a lot more,

00:05:55.800 --> 00:05:58.240
they tend to take at least five
or six lines of code and don't

00:05:58.240 --> 00:05:59.500
necessarily work all that well.

00:05:59.530 --> 00:06:03.190
So we've cleaned them up,
we've made them convenient to use.

00:06:03.800 --> 00:08:01.100
[Transcript missing]

00:08:02.660 --> 00:08:04.360
There's a certain amount
of housekeeping going on.

00:08:04.360 --> 00:08:06.980
You've been probably hearing
a bunch about 64-bit.

00:08:07.020 --> 00:08:09.480
AppleScript is making the
transition to 64-bit right along

00:08:09.480 --> 00:08:10.710
with the rest of the system.

00:08:10.810 --> 00:08:12.600
As far as AppleScript itself
is concerned,

00:08:12.660 --> 00:08:15.140
if you're writing scripts,
you basically don't have to care.

00:08:15.140 --> 00:08:16.360
AppleScript all works the same.

00:08:16.360 --> 00:08:19.190
It's just works more stuff now.

00:08:19.340 --> 00:08:23.290
If you're writing to the C APIs to
actually run AppleScript that way,

00:08:23.420 --> 00:08:25.640
there are few APIs that are going away.

00:08:25.640 --> 00:08:27.990
You probably don't care about
any of these unless you're

00:08:27.990 --> 00:08:31.870
writing your own script editor,
and we basically know who you are.

00:08:31.890 --> 00:08:34.540
If you do care,
these are the ones that are going away,

00:08:34.540 --> 00:08:38.500
the originals on the left and their
new replacements on the right.

00:08:39.520 --> 00:08:40.730
Oh, and one more thing.

00:08:40.780 --> 00:08:44.000
Ah, I think I just hit the wrong button.

00:08:44.000 --> 00:08:45.530
We're updating the language guide.

00:08:49.190 --> 00:08:50.860
Next slide.

00:08:50.900 --> 00:08:53.470
Objective C.

00:08:53.560 --> 00:08:55.860
So for Objective C,
you actually have your choice of APIs.

00:08:55.860 --> 00:08:58.510
There are three different ones
you could conceivably use to

00:08:58.510 --> 00:09:00.560
control a Scriptable application.

00:09:00.630 --> 00:09:05.240
The sort of basic low level
one is NSAppleEventDescriptor.

00:09:05.290 --> 00:09:08.000
So if you know exactly what
you're going to do when you're

00:09:08.000 --> 00:09:11.440
coding your applications,
so like the iPhoto mail a photo

00:09:11.440 --> 00:09:16.860
feature falls into this category,
you can construct the exact Apple events

00:09:16.920 --> 00:09:20.680
that you want to send and do that
straight from Objective C code.

00:09:20.710 --> 00:09:22.980
Like I said, because these are compiled
into your application,

00:09:22.980 --> 00:09:25.060
you have to know what
you're doing at build time.

00:09:25.060 --> 00:09:27.150
You can't change it afterwards.

00:09:27.390 --> 00:09:31.140
But this is the way that uses less
memory and it runs the fastest.

00:09:31.890 --> 00:09:33.160
Now, you don't have to do this.

00:09:33.210 --> 00:09:37.410
What you could do instead is
actually ask to run a script and

00:09:37.410 --> 00:09:41.080
make that AppleScript control
the Scriptable Application.

00:09:41.130 --> 00:09:44.780
And this becomes useful because you
can change the script much later.

00:09:44.780 --> 00:09:46.890
You don't have to decide
what the script is until the

00:09:46.890 --> 00:09:48.530
very instant that you run it.

00:09:48.690 --> 00:09:51.240
So if you want to make your
application somehow modifiable,

00:09:51.240 --> 00:09:53.840
if you want to let the
user supply the script,

00:09:53.880 --> 00:09:55.580
then this is the thing to do.

00:09:55.580 --> 00:09:57.910
Mail rules, for instance, can do this.

00:09:57.960 --> 00:10:00.830
One of the possible actions in a
mail rule is to run an AppleScript,

00:10:00.900 --> 00:10:02.480
which the user can supply.

00:10:02.530 --> 00:10:05.780
So it's a good way to make your
application more customizable.

00:10:06.390 --> 00:10:09.660
And if you want to be extra
studly and let the user edit

00:10:09.660 --> 00:10:12.520
scripts right in your application,
you can use OSAKit.

00:10:12.540 --> 00:10:15.240
It supplies an editor to do that.

00:10:15.240 --> 00:10:17.780
So a script editor uses this,
as does Automator's

00:10:17.780 --> 00:10:20.160
run AppleScript action.

00:10:20.230 --> 00:10:23.560
Now, the hitch with these two upper
layers is that because you're

00:10:23.580 --> 00:10:25.790
actually running a script,
you're not just building

00:10:25.790 --> 00:10:26.720
the raw Apple events.

00:10:26.720 --> 00:10:29.250
You have to pay the cost for
the AppleScript interpreter,

00:10:29.340 --> 00:10:32.140
which is non-trivial.

00:10:32.140 --> 00:10:35.860
You actually pay a noticeable
performance cost for doing that.

00:10:36.090 --> 00:10:41.440
So in theory, if you just want to control
a Scriptable Application,

00:10:41.480 --> 00:10:44.240
you should go use NSAppleEventDescriptor.

00:10:44.240 --> 00:10:47.960
The funny thing is that people
don't do that generally.

00:10:48.040 --> 00:10:50.250
They usually just go
straight to NSAppleScript,

00:10:50.250 --> 00:10:52.510
even if they don't need to.

00:10:54.200 --> 00:10:55.640
So why is that?

00:10:55.700 --> 00:10:57.940
Well, it's pretty simple, really.

00:10:58.010 --> 00:11:01.000
Say you want to get the name
of the current track in iTunes.

00:11:01.080 --> 00:11:01.500
Right?

00:11:01.500 --> 00:11:03.500
Fairly simple operation.

00:11:03.880 --> 00:11:05.850
If you want to use NSApple's
Apple Event Descriptor,

00:11:05.850 --> 00:11:07.620
which, of course, you want to do,
it's fast and it's efficient,

00:11:07.620 --> 00:11:11.790
all you have to do is write this.

00:11:14.070 --> 00:11:16.140
Right.

00:11:16.450 --> 00:11:18.080
In fact, it's even worse than that.

00:11:18.250 --> 00:11:20.110
Because if you look carefully,
all those little four

00:11:20.210 --> 00:11:24.430
character codes in there,
those are not really documented.

00:11:24.520 --> 00:11:26.600
And you have to kind of
dig them out of iTunes.

00:11:26.600 --> 00:11:30.260
And how to do that
isn't documented either.

00:11:30.370 --> 00:11:33.000
So yeah, get right on that.

00:11:33.300 --> 00:11:36.710
Then you wander over to NSAppleScript,
and to do the same

00:11:36.710 --> 00:11:40.640
thing in NSAppleScript,
you have to write this.

00:11:40.720 --> 00:11:42.080
This is a little more manageable.

00:11:42.180 --> 00:11:44.900
So naturally, developers,
you have limited time,

00:11:44.900 --> 00:11:46.410
you have limited resources.

00:11:46.620 --> 00:11:49.960
You pretty much go for this,
even if it is a little bit slower.

00:11:50.210 --> 00:11:52.890
The problem, of course, is that it is,
in fact, slower and it's limited.

00:11:52.900 --> 00:11:57.780
You have to pay-- it runs 10 to 100 times
slower than an SAPL event descriptor,

00:11:57.780 --> 00:12:01.100
depending on how much of the
interpreter is hot and live.

00:12:01.100 --> 00:12:04.000
You use 5 to 10 megabytes
of additional memory.

00:12:04.040 --> 00:12:05.370
It doesn't scale very well.

00:12:05.410 --> 00:12:07.560
The more logic you have
to put into the script,

00:12:07.560 --> 00:12:09.550
the worse it gets.

00:12:09.970 --> 00:12:12.390
And it doesn't integrate
very well with Objective C.

00:12:12.400 --> 00:12:14.120
The more information you
have to pass in and out,

00:12:14.120 --> 00:12:16.660
it starts to get more and
more complicated very rapidly.

00:12:16.720 --> 00:12:18.780
And of course,
you have to know AppleScript to do it.

00:12:18.780 --> 00:12:21.920
You have to at least mentally change
gears from Objective C into AppleScript.

00:12:23.880 --> 00:12:27.930
So what you would like is something
that hits this sweet spot of it's

00:12:27.990 --> 00:12:31.340
fast and efficient and doesn't
make you write a lot of code.

00:12:31.410 --> 00:12:33.650
And ideally,
that lets you work in Objective

00:12:33.670 --> 00:12:36.020
C terms that you're actually used to.

00:12:37.270 --> 00:12:39.780
So by remarkable coincidence,
we have such a thing in Leopard.

00:12:39.780 --> 00:12:41.860
This does not come as a complete
surprise to many of you,

00:12:41.860 --> 00:12:45.640
because Ted talked a little bit about
this in the tool State of the Union.

00:12:45.670 --> 00:12:48.260
It's called Scripting Bridge.

00:12:48.320 --> 00:12:50.690
So here's what you have to do to use it.

00:12:52.040 --> 00:12:57.760
So step one is you generate some
glue files for the particular

00:12:57.760 --> 00:13:00.600
application that you're interested in,
in this case, iTunes.

00:13:00.600 --> 00:13:03.880
There's a command line that
you type to get the SDEF,

00:13:03.970 --> 00:13:06.970
the scripting definition file,
from iTunes.

00:13:07.350 --> 00:13:11.020
and then pipe that to a tool that
will generate the glue files.

00:13:11.220 --> 00:13:13.700
So the cost to you for this is however
long it takes you to type this,

00:13:13.800 --> 00:13:16.410
probably a minute tops.

00:13:17.270 --> 00:13:20.360
Step two is you take those glue files
and you add them to your project.

00:13:20.380 --> 00:13:22.980
And you link to a new framework
called ScriptingBridge Framework,

00:13:22.980 --> 00:13:27.220
which supplies a bunch of the
foundation glue for doing this.

00:13:27.230 --> 00:13:30.060
Step three is you write your code.

00:13:30.540 --> 00:13:33.700
This is the code that you write to get
the name of the current track in iTunes.

00:13:33.790 --> 00:13:37.840
This is shorter than the
NSAppleScript version,

00:13:37.890 --> 00:13:41.740
and it runs as fast as the
NSAppleEventDescriptor version.

00:13:41.740 --> 00:13:46.160
It is, I believe,
the graph that Ted showed was up to 81

00:13:46.190 --> 00:13:49.180
times faster than using NSAppleScript.

00:13:49.240 --> 00:13:53.620
And it's actually obvious what
the heck you're doing here.

00:13:53.670 --> 00:13:57.890
And notice that it's getting the
result directly as an NSString.

00:13:59.430 --> 00:14:01.470
So talk is cheap.

00:14:01.590 --> 00:14:04.320
Let's see a demo.

00:14:04.360 --> 00:14:06.940
For this, I'd like to bring
Adam Goldstein up on stage.

00:14:06.940 --> 00:14:13.300
Adam has been doing-- Adam wrote most
of the Scripting Bridge framework part.

00:14:13.300 --> 00:14:16.000
He's been working as our
intern over the summer.

00:14:16.000 --> 00:14:19.060
He is also the author of AppleScript:
The Missing Manual.

00:14:19.060 --> 00:14:23.320
He'll be doing a book signing at
the Apple Store tomorrow at 6:00,

00:14:23.320 --> 00:14:24.980
I believe.

00:14:25.110 --> 00:14:28.130
So Adam Goldstein, please.

00:14:30.900 --> 00:16:09.100
[Transcript missing]

00:16:10.740 --> 00:16:14.320
We get this nicely
formatted XML document,

00:16:14.340 --> 00:16:16.550
and you can look through it to
learn how iTunes does things.

00:16:16.560 --> 00:16:19.520
But luckily, you don't have to,
because we've got this

00:16:19.550 --> 00:16:20.910
SDP command as well.

00:16:20.920 --> 00:16:22.330
Let me clear this out.

00:16:24.170 --> 00:16:28.260
This SDP command,
when you pipe the output of SDF into it,

00:16:28.550 --> 00:16:32.000
will actually generate
the glue code for you.

00:16:32.000 --> 00:16:35.370
So as you can see here,
we generate the SDF and then the

00:16:35.370 --> 00:16:40.000
options that we put on SDP are -fmh.

00:16:40.150 --> 00:16:43.870
And what that tells SDP is to
generate both the .m and the

00:16:43.990 --> 00:16:46.000
.h files to control iTunes.

00:16:46.260 --> 00:16:50.830
And then in the base name option,
we actually specify the name of

00:16:50.830 --> 00:16:53.000
the program that we're controlling.

00:16:53.000 --> 00:16:56.230
And this will be the name of the files
that we create and also the prefix for

00:16:56.230 --> 00:16:59.000
the classes contained within those files.

00:16:59.000 --> 00:17:01.940
And then finally,
we provide this bundle ID option

00:17:02.230 --> 00:17:06.350
where we specify the identifier of
iTunes so that this will work on any

00:17:06.390 --> 00:17:11.000
computer and all it has to do is know
the bundle ID to locate the program.

00:17:11.180 --> 00:17:13.000
So let's generate this.

00:17:13.610 --> 00:17:15.320
Very quick.

00:17:15.660 --> 00:17:20.190
Once we go into the folder
in which we created these,

00:17:20.240 --> 00:17:22.300
we find-- oh, there they are.

00:17:22.390 --> 00:17:27.560
So now we can just drag
these two items into Xcode.

00:17:30.300 --> 00:17:31.840
Add them to our project.

00:17:31.840 --> 00:17:33.560
And now we can talk to iTunes.

00:17:33.770 --> 00:17:35.860
Oh, actually, forgot a step.

00:17:35.860 --> 00:17:39.150
We have to link to the
ScriptingBridge framework.

00:17:39.160 --> 00:17:44.390
So I can just click on Frameworks, Add,
Existing Frameworks, and let's go down to

00:17:44.490 --> 00:17:46.960
ScriptingBridge.Framework.

00:17:49.740 --> 00:17:52.670
So what's the actual code
that we use to do this?

00:17:52.770 --> 00:17:54.880
Well, let's open up-- oops,
wrong .m file.

00:17:54.880 --> 00:17:59.550
Let's open up our controller
and say add a pause method.

00:17:59.710 --> 00:18:01.090
Now,
the first thing that we want to do is

00:18:01.170 --> 00:18:03.990
to check whether iTunes is running,
because it doesn't make much sense

00:18:04.100 --> 00:18:08.980
to launch iTunes just to see if it's,
you know, just to pause it.

00:18:09.020 --> 00:18:13.200
So first we declare the
iTunes application here.

00:18:13.200 --> 00:18:16.760
Simple command that Chris showed
in his presentation.

00:18:16.760 --> 00:18:19.060
Then we check to see if it's running.

00:18:19.060 --> 00:18:22.100
And we do this using
the isrunning command,

00:18:22.100 --> 00:18:25.030
which is defined for all applications.

00:18:26.240 --> 00:18:28.570
So now that we've checked
whether iTunes is running,

00:18:28.570 --> 00:18:30.660
all we have to do is send
it the pause command,

00:18:30.660 --> 00:18:33.920
which is a simple one-line
command like that.

00:18:34.000 --> 00:18:35.930
So that's the pause method.

00:18:35.940 --> 00:18:37.800
Now let's talk about the play method.

00:18:37.800 --> 00:18:40.470
Obviously, this is going to be a little
more complicated because we're

00:18:40.470 --> 00:18:41.490
going to have to fade in.

00:18:41.530 --> 00:18:43.890
So first, again,
we declare iTunes so that

00:18:43.990 --> 00:18:45.540
we can communicate with it.

00:18:45.580 --> 00:18:48.620
Then, again,
we check to see whether it's running.

00:18:50.050 --> 00:18:52.660
And finally,
we have this fade-in play section.

00:18:52.820 --> 00:18:55.010
And let me step you through this.

00:18:55.460 --> 00:18:59.180
So we've got these two variables here,
v and original volume.

00:18:59.420 --> 00:19:02.780
v is whatever iTunes' current volume is,
and obviously,

00:19:02.780 --> 00:19:05.420
original volume is what it started at.

00:19:05.500 --> 00:19:10.450
So we set the original volume variable to
the current volume of iTunes right now.

00:19:10.640 --> 00:19:14.790
And then we set the
volume to zero right here.

00:19:14.920 --> 00:19:17.560
And then we say, iTunes, play once.

00:19:17.580 --> 00:19:20.590
Now, this might seem like a little
bit of an odd method call to use,

00:19:20.590 --> 00:19:25.960
but what the once part of that method
does is it tells iTunes whether to play

00:19:25.960 --> 00:19:29.250
through the current song and then stop,
or whether to play through the current

00:19:29.360 --> 00:19:30.790
song and then continue playing.

00:19:30.800 --> 00:19:34.680
So since we specify no,
iTunes knows to play through the

00:19:34.680 --> 00:19:37.800
current song and then continue playing.

00:19:37.800 --> 00:19:41.740
Then, as you see here,
we have a standard C-style for loop,

00:19:42.130 --> 00:19:48.790
where we set the current volume to zero,
then iterate 16 times right here

00:19:49.000 --> 00:19:50.800
until we reach the original volume.

00:19:50.800 --> 00:19:54.370
And within this for loop,
we set the sound volume to whatever

00:19:54.380 --> 00:19:58.790
that V variable is at the moment,
and then pause for a tenth of a second.

00:19:58.890 --> 00:20:01.990
And then, just to be sure that we're set
back to our original volume and we

00:20:01.990 --> 00:20:04.800
didn't have any strange math errors,
on this final line,

00:20:04.800 --> 00:20:07.800
we set the sound volume back
to what it was to begin with.

00:20:07.800 --> 00:20:11.250
So now that we've got all
this code in our project,

00:20:11.250 --> 00:20:12.800
we can build and go.

00:20:12.830 --> 00:20:17.800
Save this.

00:20:17.800 --> 00:20:19.800
That's strange.

00:20:19.800 --> 00:20:26.800
Let's make sure that
we've got iTunes imported.

00:20:26.800 --> 00:20:31.400
Oh, I should add it to the
project and copy the files.

00:20:40.700 --> 00:20:50.200
[Transcript missing]

00:20:52.510 --> 00:20:53.700
And here it is.

00:20:53.760 --> 00:20:57.210
So let's quit iTunes so that I can show
you that when we click one of these

00:20:57.210 --> 00:21:00.480
buttons when iTunes isn't running,
nothing happens.

00:21:00.550 --> 00:21:04.600
You can see iTunes down in
the dock hasn't launched.

00:21:04.620 --> 00:21:06.790
Now let's open iTunes up.

00:21:07.980 --> 00:21:14.550
Now let's say it's playing... and, okay,
a phone call comes in.

00:21:15.470 --> 00:21:16.980
Paused.

00:21:17.010 --> 00:21:22.140
Now, let me zoom in so you can see
what happens when we play back.

00:21:22.160 --> 00:21:23.220
Watch the volume slider.

00:21:23.300 --> 00:21:28.770
Very slick.

00:21:31.760 --> 00:21:35.300
So that's the power of
Scripting Bridge in a nutshell.

00:21:35.300 --> 00:21:37.390
Now, back to Chris.

00:21:43.820 --> 00:21:46.990
Thank you, Adam.

00:21:47.080 --> 00:21:48.340
So that was it.

00:21:48.360 --> 00:21:50.880
That's scripting bridge in a nutshell.

00:21:50.880 --> 00:21:54.770
Generate the glue, add it to your code,
use the nice simple method calls.

00:21:54.900 --> 00:21:56.530
Straight from Objective C,
it looks like the stuff

00:21:56.580 --> 00:21:57.810
you're currently using.

00:21:57.970 --> 00:22:00.740
And that's kind of the basic
conceit of scripting bridge,

00:22:00.770 --> 00:22:04.370
is that it makes this other
scriptable application look like

00:22:04.710 --> 00:22:07.300
just a bunch of normal Cocoa objects.

00:22:07.340 --> 00:22:10.080
It uses basically all the same
techniques you're already using

00:22:10.080 --> 00:22:11.660
now if you're using Objective C.

00:22:11.710 --> 00:22:15.780
To get an attribute or set an attribute,
it's just normal KVC accessors.

00:22:15.780 --> 00:22:18.320
If you want to get an element
that looks like an NSArray,

00:22:18.320 --> 00:22:20.550
the object index works,
all the NSArray stuff works.

00:22:20.620 --> 00:22:22.220
In fact, it actually is an NSArray.

00:22:22.220 --> 00:22:24.490
It's descended from NSArray.

00:22:24.500 --> 00:22:30.100
If you want to create an element, init,
alloc init, and add object.

00:22:30.170 --> 00:22:33.140
And to call a command,
that's just a method call.

00:22:33.100 --> 00:22:36.640
There are a couple new ones,
because scripting dictionaries can do

00:22:36.640 --> 00:22:38.670
a couple things that NSArrays can't,
that I should call out.

00:22:38.680 --> 00:22:40.660
Object with name and object with ID.

00:22:40.660 --> 00:22:44.220
If you know specifically the name
of the thing that you're going for,

00:22:44.220 --> 00:22:46.850
there's a special method
you can use to do that.

00:22:48.190 --> 00:22:52.660
For somewhat more advanced stuff, again,
it's still just standard Cocoa.

00:22:52.660 --> 00:22:55.940
MakeObjectsPerformSelector
to do many objects at once.

00:22:55.940 --> 00:22:57.280
GetElementsMatchingAndCondition.

00:22:57.280 --> 00:23:01.800
You use filtered array using predicates,
same as you do with core data.

00:23:02.050 --> 00:23:03.470
And again, there's one new one here.

00:23:03.480 --> 00:23:05.680
Get a property of many objects at once.

00:23:05.680 --> 00:23:08.690
There's a new one,
ArrayByApplyingSelector.

00:23:08.820 --> 00:23:10.680
It's just like
MakeObjectsPerformSelector,

00:23:10.680 --> 00:23:14.780
but it returns a result and returns
you an NSArray of the results.

00:23:16.230 --> 00:23:20.060
So this is so simple, so obvious,
you want to go run out and

00:23:20.060 --> 00:23:22.080
start using it right now.

00:23:22.100 --> 00:23:24.080
Wait for the fine print.

00:23:24.100 --> 00:23:26.040
There are a couple of tricky bits,
which will bite you if you

00:23:26.040 --> 00:23:27.910
don't know what's going on.

00:23:28.120 --> 00:23:31.540
So the first one's slightly Zen-like.

00:23:31.540 --> 00:23:36.680
That subtitle there is the first
line from the Tao Te Ching.

00:23:36.760 --> 00:23:40.580
The way you can speak
of is not the true way.

00:23:40.640 --> 00:23:44.310
And this seemed kind of appropriate
because in a bridge like this,

00:23:44.310 --> 00:23:48.040
the objects you see in your
application are not the real objects.

00:23:48.170 --> 00:23:51.030
The real objects are on the other
side of the bridge in another process.

00:23:51.080 --> 00:23:53.940
You never get to see the
real objects yourself.

00:23:54.000 --> 00:23:56.730
What you have is a reference.

00:23:57.610 --> 00:23:58.500
What's a reference?

00:23:58.550 --> 00:24:03.380
A reference is a set of directions
to find the true object.

00:24:03.550 --> 00:24:06.380
So let me give you an example.

00:24:06.560 --> 00:24:08.630
Adam is not the real person.

00:24:08.720 --> 00:24:12.280
The directions, front row,
fourth from the left,

00:24:12.280 --> 00:24:14.360
those are my directions to find Adam.

00:24:14.360 --> 00:24:16.880
Now, there are two interesting
upshots of this.

00:24:16.880 --> 00:24:19.110
One is that the bridge is lazy.

00:24:19.120 --> 00:24:21.540
Actually, sending an event across the
bridge is relatively expensive,

00:24:21.550 --> 00:24:24.010
so we try to put that off until
we absolutely have to send it.

00:24:24.020 --> 00:24:25.900
And there are two cases
in which we do that.

00:24:25.950 --> 00:24:28.870
One is when you tell
it to do some command.

00:24:28.900 --> 00:24:29.930
It has to do that right now.

00:24:29.940 --> 00:24:33.040
And the other is when you get
an attribute of an object.

00:24:33.040 --> 00:24:36.720
That's an attribute like
some sort of primitive data,

00:24:36.740 --> 00:24:39.890
something that's not
another application object.

00:24:42.500 --> 00:24:46.040
The other big thing is that some
directions are better than others.

00:24:46.090 --> 00:24:49.410
I said, for instance,
to locate Adam front row,

00:24:49.410 --> 00:24:50.180
fourth from the left.

00:24:50.280 --> 00:24:52.470
Say, you know, I was coming in here,
I'm the understudy,

00:24:52.470 --> 00:24:54.960
I've been told that somebody is
going to help me with my demo.

00:24:55.020 --> 00:24:57.840
But I've never actually met Adam before,
but I have the directions to find him.

00:24:57.920 --> 00:24:59.600
Front row, fourth from the left.

00:24:59.650 --> 00:25:03.580
That works fine right now, but, you know,
say he gets up and goes to get a

00:25:03.600 --> 00:25:06.760
drink and somebody steals his seat,
all three of us are going to get a very

00:25:06.760 --> 00:25:09.600
unpleasant surprise on the next demo.

00:25:09.680 --> 00:25:12.120
If, however,
I'd been told go into the room

00:25:12.120 --> 00:25:15.800
and ask for Adam Goldstein,
that would work no matter where he moved.

00:25:17.980 --> 00:25:21.140
So let's look at an example where
this actually makes a difference.

00:25:21.140 --> 00:25:24.170
So going back to iTunes again,
my favorite example.

00:25:25.900 --> 00:25:29.220
If you want to get the library,
this is pretty much what you have to do.

00:25:29.430 --> 00:25:33.010
iTunes, Sources,
and then the source within

00:25:33.020 --> 00:25:34.520
that is the library.

00:25:34.520 --> 00:25:35.950
And, you know, this is cool.

00:25:35.950 --> 00:25:37.720
Your library isn't going anywhere.

00:25:39.420 --> 00:25:42.040
So this basically works.

00:25:42.070 --> 00:25:44.580
But let's look at something
a little more complicated.

00:25:46.000 --> 00:25:49.740
Say you're writing a program where
you want to let the user edit stuff

00:25:49.740 --> 00:25:53.090
about the currently playing track,
kind of on the fly, as it's playing.

00:25:53.180 --> 00:25:56.180
So you might be tempted to
write something like this.

00:25:56.200 --> 00:25:58.780
Get the current track,
say we're working on the description,

00:25:58.800 --> 00:26:01.120
let the user edit,
and then when they're done,

00:26:01.180 --> 00:26:02.880
set the description back.

00:26:02.890 --> 00:26:04.980
Now,
this has kind of an obvious bug in it,

00:26:04.980 --> 00:26:07.850
which is that the current
track might change between the

00:26:07.920 --> 00:26:10.740
first line and the last line,
and you don't want to set the

00:26:10.800 --> 00:26:12.420
description on the wrong track.

00:26:12.470 --> 00:26:15.510
So, okay, fine,
the solution is reasonably obvious,

00:26:15.580 --> 00:26:16.180
right?

00:26:16.210 --> 00:26:19.740
You hoist iTunes' current track
out into a variable track,

00:26:19.780 --> 00:26:21.790
and then you refer to that.

00:26:21.940 --> 00:26:23.780
Except that doesn't actually
work in the scripting bridge.

00:26:23.830 --> 00:26:25.610
Remember I mentioned that it was lazy?

00:26:25.690 --> 00:26:29.700
This actually sends the exact same
events as the previous one and doesn't

00:26:29.700 --> 00:26:33.080
work for the exact same reason,
because iTunes' current track

00:26:33.110 --> 00:26:34.460
is really just a reference.

00:26:34.460 --> 00:26:37.300
It's just the directions get
the currently playing track.

00:26:37.340 --> 00:26:40.580
It's not the actual track.

00:26:41.410 --> 00:26:43.220
Except that doesn't actually
work in the scripting bridge.

00:26:43.220 --> 00:26:44.860
Remember I mentioned that it was lazy?

00:26:45.020 --> 00:26:49.100
This actually sends the exact same
events as the previous one and doesn't

00:26:49.100 --> 00:26:52.560
work for the exact same reason,
because iTunes' current track

00:26:52.560 --> 00:26:53.860
is really just a reference.

00:26:53.860 --> 00:26:55.180
It's just the directions get
the currently playing track.

00:26:55.910 --> 00:26:59.800
And to do that,
you add this one extra call, get.

00:26:59.900 --> 00:27:03.670
So that tells iTunes, go get me the real
specifier for this object,

00:27:03.690 --> 00:27:04.460
something durable.

00:27:04.460 --> 00:27:06.940
And what iTunes will give
you back is a track by ID.

00:27:06.960 --> 00:27:09.960
That will always refer to the same track,
unless the user actually deletes it,

00:27:09.960 --> 00:27:12.240
in which case there's
not much you can do.

00:27:13.110 --> 00:27:16.120
So get to override that lazy behavior.

00:27:16.190 --> 00:27:18.220
If you need to force
evaluation right now,

00:27:18.250 --> 00:27:19.970
that's the thing to do.

00:27:22.070 --> 00:27:27.360
The next tricky bit is that
in a Scriptable Application,

00:27:27.380 --> 00:27:29.630
objects have to exist in a container.

00:27:29.630 --> 00:27:32.300
When you're using an NSArray normally,
and you have direct

00:27:32.440 --> 00:27:34.360
control over the objects,
you create something and then

00:27:34.360 --> 00:27:35.900
you add it to a container.

00:27:36.050 --> 00:27:39.230
But in a Scriptable Application,
you can't have an object that's just

00:27:39.290 --> 00:27:41.370
kind of floating out in space somewhere.

00:27:41.370 --> 00:27:43.720
It has to actually belong to a container.

00:27:44.440 --> 00:27:46.540
But at the same time,
we wanted to make it look like an

00:27:46.540 --> 00:27:48.120
NSArray so you can use the same patterns.

00:27:48.210 --> 00:27:53.590
So what we did was we cheated.

00:27:53.860 --> 00:27:57.160
When you say alloc init
with property dictionary,

00:27:57.190 --> 00:27:59.060
it doesn't actually make
a new object right then.

00:27:59.070 --> 00:28:02.960
It just makes a little proxy,
which is the properties to make it with.

00:28:03.020 --> 00:28:04.960
And then when you actually
add it to a container,

00:28:04.960 --> 00:28:06.460
then it makes it.

00:28:06.490 --> 00:28:08.600
But until then,
the object doesn't really exist.

00:28:08.600 --> 00:28:11.980
And you can't do anything with it
other than add it to a container.

00:28:12.370 --> 00:28:14.260
The corresponding thing
is that on the flip side,

00:28:14.260 --> 00:28:16.730
when you remove an object,
that'll typically wind

00:28:16.730 --> 00:28:17.600
up deleting the object.

00:28:17.640 --> 00:28:20.360
It doesn't just remove
it from the container.

00:28:23.050 --> 00:28:27.200
And lastly, there's the disclaimer.

00:28:27.220 --> 00:28:29.710
The basic problem with ScriptingBridge

00:28:31.190 --> 00:28:34.370
The basic limitation is that
we're limited by-- it's all based

00:28:34.370 --> 00:28:37.900
off of what the application says
is their scripting dictionary,

00:28:37.900 --> 00:28:40.160
the things that they say they can do.

00:28:40.230 --> 00:28:45.110
So that's not actually what that says.

00:28:46.980 --> 00:28:49.080
More succinctly, garbage in, garbage out.

00:28:49.150 --> 00:28:55.170
If the application lies or is somehow
otherwise wrong about what it can do,

00:28:55.170 --> 00:28:59.340
either it doesn't say that it
does something that it can,

00:28:59.400 --> 00:29:03.240
or it does say that it does
something that it can't,

00:29:03.240 --> 00:29:04.280
we're kind of stuck for it.

00:29:04.280 --> 00:29:06.650
We'll still generate an
Objective C header that matches

00:29:06.650 --> 00:29:09.940
the scripting dictionary,
even though it's wrong.

00:29:09.960 --> 00:29:12.520
The solution is to have
them fix their dictionary.

00:29:12.520 --> 00:29:16.810
Also, if the application has just a
weirdly written scripting interface,

00:29:16.810 --> 00:29:19.170
the Objective C interface is
going to be just as weird.

00:29:19.180 --> 00:29:22.220
It's just that it's in Objective C now.

00:29:26.860 --> 00:29:31.580
So to sum up, you still have the choice
of APIs that you had before.

00:29:31.580 --> 00:29:34.740
You can use the low level-- use
OSAKit if you want to edit scripts,

00:29:34.780 --> 00:29:38.960
use NSAppleScripts if you want to let
the user attach their own scripts.

00:29:39.010 --> 00:29:42.050
And you can still use
NSAppleEventDescriptor if you want.

00:29:42.160 --> 00:29:42.900
It's still there.

00:29:42.900 --> 00:29:44.920
There's nothing wrong
with it intrinsically.

00:29:44.980 --> 00:29:49.070
But you'll probably be a lot happier
if you use ScriptingBridge instead.

00:29:51.500 --> 00:29:56.320
Moving on to Python and Ruby,
two wonderful popular

00:29:56.320 --> 00:29:57.000
scripting languages.

00:29:57.090 --> 00:29:58.640
They're installed on the system.

00:29:58.700 --> 00:30:00.840
Lots of interesting things
going on around them.

00:30:00.840 --> 00:30:05.220
I hear there's a-- I believe there's a
talk on writing full Cocoa applications

00:30:05.260 --> 00:30:09.190
in Python and Ruby on Thursday,
I believe it is.

00:30:11.330 --> 00:30:17.730
And they actually both have their
own scripting-- control scriptable

00:30:17.790 --> 00:30:19.440
applications interfaces already.

00:30:19.440 --> 00:30:22.630
But there are certain problems with them,
so we're working on improving them.

00:30:22.640 --> 00:30:25.320
For Python,
the existing one is gen-suite module.

00:30:25.320 --> 00:30:27.710
It's part of the standard distribution.

00:30:28.130 --> 00:30:45.570
development on it is actually frozen.

00:30:45.570 --> 00:30:45.570
They're not doing anything more with it.

00:30:45.570 --> 00:30:45.570
Because the interface
that Gensuite module uses,

00:30:45.570 --> 00:30:45.570
the stuff that you
have to actually write,

00:30:45.570 --> 00:30:45.570
is not very Python-like.

00:30:45.570 --> 00:30:45.570
It's really more like AppleScript with
a strong Python accent.

00:30:47.020 --> 00:30:51.600
So we're replacing that,
or at least somebody's replacing that.

00:30:51.600 --> 00:30:54.100
The replacement is actually
a third party solution.

00:30:54.100 --> 00:30:55.800
You can actually get it--
this is available now.

00:30:55.800 --> 00:30:58.460
It's been available for a while, in fact,
called Apps Script,

00:30:58.460 --> 00:31:01.360
written by a very good fellow
named Hamish Sanderson.

00:31:01.360 --> 00:31:03.740
It's open source,
so you can examine it all if you like.

00:31:03.740 --> 00:31:05.300
There's the URL for it.

00:31:05.350 --> 00:31:07.840
We will be installing
this as part of Leopard.

00:31:07.840 --> 00:31:11.630
And our current track example,
this is what it looks

00:31:11.630 --> 00:31:13.340
like in using Apps Script.

00:31:13.340 --> 00:31:15.410
Again, fairly obvious.

00:31:17.200 --> 00:31:22.060
So for Ruby, the current situation is
a little more complicated.

00:31:22.060 --> 00:31:26.950
The existing one is called Ruby AE-OSA,
which is written by Hisakuni Fujimoto,

00:31:26.950 --> 00:31:30.040
who I'm told is in the audience,
if you would care to stand

00:31:30.040 --> 00:31:33.480
up and take a small bow,
because it is very cool.

00:31:33.480 --> 00:31:35.590
Thank you.

00:31:39.860 --> 00:31:43.860
So Ruby AeoSA is actually
very good at what it does.

00:31:43.860 --> 00:31:47.550
The problem is that what it does
is that it lets you send raw

00:31:47.550 --> 00:31:49.320
Apple events and lets you run scripts.

00:31:49.330 --> 00:31:53.110
But it doesn't hit that sweet spot in the
middle like scripting the bridge does.

00:31:53.190 --> 00:31:56.560
So we talked about this,
and we agreed to deprecate it in favor

00:31:56.560 --> 00:31:59.050
of a new thing that we are writing.

00:31:59.190 --> 00:32:03.100
and I are here today to talk about
a new application called Ruby OSA.

00:32:03.100 --> 00:32:06.100
It's being written here at Apple,
but we're still making it open source.

00:32:06.100 --> 00:32:07.370
You can go check it out now.

00:32:07.370 --> 00:32:09.060
It's on a public repository.

00:32:09.090 --> 00:32:10.740
And we'll be installing
this with Leopard.

00:32:10.740 --> 00:32:12.760
So similar to Python,
this lets you use sort of normal

00:32:12.760 --> 00:32:18.230
Ruby conventions to write your code.

00:32:18.230 --> 00:32:18.230
And so this is, again,
what Current Track looks like there.

00:32:20.310 --> 00:32:22.060
So that's all very nice.

00:32:22.060 --> 00:32:24.800
But once again, talk is cheap.

00:32:24.800 --> 00:32:26.260
Demo time.

00:32:26.260 --> 00:32:27.340
Adam, if you would please.

00:32:27.340 --> 00:32:32.900
ADAM GALPIN: Thanks, Chris.

00:32:36.060 --> 00:32:39.540
So I thought I'd do the same example
that I just showed you in Objective C,

00:32:39.540 --> 00:32:44.940
just using Python and Ruby to do, well,
basically exactly the same thing.

00:32:45.060 --> 00:32:49.990
So let me show you some
simple scripts that we wrote.

00:32:50.060 --> 00:32:54.110
Start with the Python one for
pausing the current iTunes track.

00:32:54.360 --> 00:32:56.540
As you can see, this is extremely simple.

00:32:56.610 --> 00:33:00.280
First line, we just import Apps Script,
and then we get iTunes and

00:33:00.280 --> 00:33:03.100
send it the pause method,
and that's it.

00:33:03.290 --> 00:33:05.810
So if we have iTunes running,

00:33:07.100 --> 00:33:09.600
And then switch over to the terminal.

00:33:09.600 --> 00:33:17.270
You can type Python,
and then drag in our script.

00:33:18.490 --> 00:33:20.000
Magic.

00:33:20.030 --> 00:33:22.840
Now let's say we wanted to
fade back in the playback.

00:33:22.870 --> 00:33:27.800
So why not use Ruby for that,
just for a little change of pace?

00:33:27.970 --> 00:33:29.660
Here's the Ruby script.

00:33:29.660 --> 00:33:32.700
We require RBOSA for controlling it.

00:33:32.710 --> 00:33:36.190
And then here we just get iTunes,
similar to Scripting Bridge.

00:33:36.300 --> 00:33:38.010
Set the original volume.

00:33:38.220 --> 00:33:40.610
Set the current volume to zero.

00:33:40.710 --> 00:33:41.280
Start playing.

00:33:41.280 --> 00:33:46.270
And then again, in here, loop up,
increasing the volume in 16 intervals

00:33:46.320 --> 00:33:48.740
with a tenth of a second in between.

00:33:48.740 --> 00:33:51.140
And finally,
setting the volume to what it started as.

00:33:52.580 --> 00:33:58.260
So let's just bring this up so
that we can see the slider fade in.

00:33:58.260 --> 00:34:00.470
Shrink this down a little bit.

00:34:00.810 --> 00:34:04.980
And zoom in just so the
people in the back can see.

00:34:05.060 --> 00:34:13.490
So let's say Ruby and then drag
in our Ruby script and hit run.

00:34:16.400 --> 00:34:17.900
Magic.

00:34:17.900 --> 00:34:21.250
So as you can see,
Scripting Bridge isn't the

00:34:21.250 --> 00:34:23.640
only technology that you
can use to control external

00:34:23.640 --> 00:34:25.240
applications besides AppleScript.

00:34:25.240 --> 00:34:28.090
Now you've got your choice
of Ruby and Python as well.

00:34:28.090 --> 00:34:29.050
Thank you.

00:34:29.130 --> 00:34:29.820
Chris?

00:34:35.290 --> 00:34:38.390
Thank you, Adam.

00:34:38.780 --> 00:34:42.320
OK, so to sum up, please,
control other applications.

00:34:42.320 --> 00:34:43.480
Make them do your work for you.

00:34:43.660 --> 00:34:45.300
You get to be lazy.

00:34:45.300 --> 00:34:46.150
It's less work for you.

00:34:46.240 --> 00:34:50.300
It is probably a superior
experience for your users.

00:34:50.340 --> 00:34:52.770
Remember the mail example?

00:34:52.900 --> 00:34:54.120
Why write your own mailer?

00:34:54.160 --> 00:34:55.540
Mail's already done it for you.

00:34:55.540 --> 00:34:58.280
They've done a far better
job than you probably really

00:34:58.280 --> 00:35:00.350
want to take the time to do.

00:35:01.510 --> 00:35:04.470
So make them do your work for you.

00:35:04.580 --> 00:35:06.510
It's all there.

00:35:06.950 --> 00:35:28.460
and the rest of the world.

00:35:29.560 --> 00:35:29.580
You can use it.

00:35:29.580 --> 00:35:29.580
And you can use your
preferred language to do it.

00:35:29.580 --> 00:35:29.580
Whatever language you're currently using,
stick with it.

00:35:29.580 --> 00:35:29.580
You don't have to shell
out to AppleScript.

00:35:29.580 --> 00:35:29.580
You can use the appropriate
bridge from your language.

00:35:29.580 --> 00:35:29.580
For AppleScript, you know,
you just keep using AppleScript.

00:35:29.580 --> 00:35:29.580
For Objective C,
you use scripting bridge.

00:35:29.580 --> 00:35:29.580
Python, Apps Script, Ruby, Ruby OSA.

00:35:29.580 --> 00:35:29.580
If you've got other favorites,
let us know.

00:35:29.580 --> 00:35:29.580
That's what Q&A is for.

00:35:31.160 --> 00:35:34.050
And that's it.

00:35:34.120 --> 00:35:36.210
Oh, yes, more information.

00:35:36.440 --> 00:35:40.760
You can contact our product manager,
Sal Segoyan.

00:35:40.760 --> 00:35:44.840
My boss is Todd Fernandez,
if you wanted engineering questions.

00:35:44.900 --> 00:35:48.600
And for documentation,
we actually have documentation already.

00:35:48.630 --> 00:35:51.410
Thank Adam again.

00:35:53.700 --> 00:35:55.650
It's up on the developer site.

00:35:55.660 --> 00:35:58.860
It's basically a summary of this session,
plus all the sample code

00:35:58.870 --> 00:36:03.210
with actual text there,
plus some additional details

00:36:03.230 --> 00:36:04.570
that we didn't cover.

00:36:05.680 --> 00:36:08.730
There is a lab tomorrow,
which is specifically for this

00:36:08.730 --> 00:36:11.450
stuff and any AppleScript-specific
questions that you have.

00:36:11.540 --> 00:36:12.660
I will be there.

00:36:12.660 --> 00:36:13.960
Most of the AppleScript team
will be there.

00:36:13.960 --> 00:36:18.070
Another thing that I should recommend,
if you are new to controlling

00:36:18.070 --> 00:36:19.370
Scriptable Applications,
you know,

00:36:19.370 --> 00:36:21.380
you've never actually done it before,
but it seems kind of interesting.

00:36:21.380 --> 00:36:24.080
Writing Automator Actions
is actually a very,

00:36:24.080 --> 00:36:28.390
very good way to get started,
because Automator Actions, they're small,

00:36:28.390 --> 00:36:29.720
they're compact.

00:36:29.720 --> 00:36:32.030
You can actually do something
useful in an hour or two.

00:36:32.520 --> 00:36:35.060
There are two sessions tomorrow,
kind of a part one, part two,

00:36:35.060 --> 00:36:36.700
about writing Automator Actions.

00:36:36.700 --> 00:36:39.540
The first one is in the morning,
the second one is after lunch.

00:36:39.540 --> 00:36:44.030
So, if you want to learn, you know,
a simple way to start making

00:36:44.030 --> 00:36:48.950
other people do your work for you,
Automator, a great way to do it.