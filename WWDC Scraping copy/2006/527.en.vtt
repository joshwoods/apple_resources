WEBVTT

00:00:10.540 --> 00:00:12.190
Welcome.

00:00:12.300 --> 00:00:15.500
Smart cards and other two-factor
authentication sessions.

00:00:15.500 --> 00:00:18.940
My name is Shawn Geddis,
security consulting engineer

00:00:18.940 --> 00:00:20.860
in Apple's enterprise division.

00:00:20.860 --> 00:00:25.620
What we want to do today is give
you a little bit of an insight into,

00:00:25.620 --> 00:00:29.440
first of all,
two-factor authentication itself,

00:00:29.440 --> 00:00:33.790
how it can help you solve an
identity problem that many of you

00:00:33.870 --> 00:00:38.140
may have in your enterprise space,
take a little bit closer

00:00:38.140 --> 00:00:41.780
look from an enterprise view,
of the smart card services or

00:00:41.780 --> 00:00:44.590
the support built into Mac OS X

00:00:45.300 --> 00:00:49.670
Potentially choose a particular
two-factor authentication solution.

00:00:49.690 --> 00:00:52.560
Some pick PKI,
some pick one-time passwords,

00:00:52.610 --> 00:00:53.740
there are others out there.

00:00:53.860 --> 00:00:56.320
We'll take a little bit of a look there.

00:00:56.470 --> 00:00:59.710
And then I want to bring up some
of my customers that we have been

00:00:59.710 --> 00:01:03.930
participating with in some of their
projects and have them share with you

00:01:03.930 --> 00:01:07.310
a little bit of their experiences,
a little bit of their expectations.

00:01:07.680 --> 00:01:10.670
So what we hope you
will learn from this is,

00:01:10.860 --> 00:01:14.830
again, find out what those challenges are
maybe that you haven't faced yet.

00:01:14.890 --> 00:01:19.000
Maybe if you're a developer,
challenges that you could help solve.

00:01:19.100 --> 00:01:21.470
Hit a little bit on the DNA of
two-factor authentication for

00:01:21.480 --> 00:01:23.970
those of you that are new to this.

00:01:24.330 --> 00:01:27.730
Look closely, again,
two-factor authentication OS X,

00:01:27.870 --> 00:01:30.760
and then how to integrate
that into various server

00:01:30.760 --> 00:01:31.740
and network configurations.

00:01:31.760 --> 00:01:33.600
So let's get started.

00:01:33.600 --> 00:01:36.090
First of all,
what are the problems we're trying

00:01:36.090 --> 00:01:38.280
to solve within the enterprise space?

00:01:38.280 --> 00:01:41.920
First and foremost has
kind of arisen to the top,

00:01:41.990 --> 00:01:46.160
and that is some true form of secure
and reliable form of identification.

00:01:46.160 --> 00:01:50.500
We all realize that after a while,
just kind of a username and password

00:01:50.550 --> 00:01:53.940
tends to not be a real good,
strong solution here.

00:01:54.340 --> 00:01:57.920
So we want to look at something
as strong and reliable.

00:01:58.170 --> 00:02:01.520
There are a lot of directives that
are being kind of bantered about and

00:02:01.600 --> 00:02:03.350
issued and mandated around the world.

00:02:03.350 --> 00:02:04.620
Some of those in the U.S.

00:02:04.690 --> 00:02:05.240
federal government.

00:02:05.240 --> 00:02:09.680
HSP D12 was a directive for all federal
governments to issue smart cards.

00:02:09.700 --> 00:02:13.310
A lot of you might be familiar
with some of the HIPAA requirements

00:02:13.320 --> 00:02:14.850
and Sarbanes-Oxley and others.

00:02:14.860 --> 00:02:18.320
But there's other data directives,
data protection.

00:02:18.320 --> 00:02:22.830
So this is a very important thing to
be sure you have solutions that prove

00:02:22.830 --> 00:02:25.430
that people are who they say they are.

00:02:25.440 --> 00:02:28.240
And of course,
a single sign-on solution helps you

00:02:28.350 --> 00:02:32.820
ensure that they're not entering 15,
20 different passwords to have

00:02:32.820 --> 00:02:34.820
access to all these services.

00:02:34.820 --> 00:02:39.810
Tied into that, particularly when you're
doing some cyber activity,

00:02:39.810 --> 00:02:44.900
you want to be sure that you're
retaining the integrity of that data.

00:02:46.380 --> 00:02:48.180
Similar to that is the confidentiality.

00:02:48.290 --> 00:02:50.840
If you're sending kind
of encrypted content,

00:02:50.900 --> 00:02:55.600
you want to be sure that it's only,
the recipient of that is only that person

00:02:55.600 --> 00:02:58.700
or that individual that's intended.

00:02:58.910 --> 00:03:02.800
And then be sure that, again,
if that transaction takes place,

00:03:02.800 --> 00:03:04.200
non-repudiation.

00:03:04.200 --> 00:03:06.740
You can't deny the fact
that you didn't do that.

00:03:07.140 --> 00:03:12.300
So this is a statement from
Tom Yeager back in 2004 at WWDC.

00:03:12.300 --> 00:03:14.100
I like it because it's
so true in this space,

00:03:14.110 --> 00:03:16.500
and that is none of us really
purchase anything unless,

00:03:16.500 --> 00:03:18.860
first of all,
we're going to make money off of it.

00:03:18.910 --> 00:03:21.670
We're going to save money,
or in his words,

00:03:21.810 --> 00:03:23.700
the government requires it.

00:03:24.680 --> 00:03:28.180
So let's take a look first of
all at two-factor authentication.

00:03:28.250 --> 00:03:29.720
What is that?

00:03:29.880 --> 00:03:33.250
First of all, we're all quite familiar
with username and password,

00:03:33.250 --> 00:03:34.320
kind of a one factor.

00:03:34.320 --> 00:03:36.620
It's something you know, right?

00:03:36.820 --> 00:03:38.660
Add to that what you have.

00:03:38.810 --> 00:03:41.430
A lot of us have all kinds of dongles,
all kinds of devices.

00:03:41.460 --> 00:03:45.520
It's physically something you have,
separate from something you know here.

00:03:45.670 --> 00:03:47.570
Something we're not going
to really touch on today,

00:03:47.570 --> 00:03:50.190
but a third factor there is what you are.

00:03:50.250 --> 00:03:51.070
Biometrics.

00:03:51.100 --> 00:03:53.200
Could be fingerprints,
could be facial recognition,

00:03:53.200 --> 00:03:55.220
could be retinal scans,
that kind of thing.

00:03:55.360 --> 00:03:59.030
All of those play into
those multi-factors.

00:04:00.220 --> 00:04:02.940
And just to clear up with the
two-factor authentication,

00:04:02.940 --> 00:04:05.410
or at least a definition of that,
is you take any two of

00:04:05.410 --> 00:04:08.740
those previous factors,
just looking at those three,

00:04:08.780 --> 00:04:11.820
combine them together,
and now you've got a much stronger form

00:04:11.920 --> 00:04:14.270
than just taking one of them by itself.

00:04:15.770 --> 00:04:19.240
So tokens, in this space,
kind of the reference of

00:04:19.250 --> 00:04:22.900
tokens tends to get a little,
it's kind of an overloaded term.

00:04:22.900 --> 00:04:25.090
I just wanted to hit
on this a little bit.

00:04:25.150 --> 00:04:29.190
The reference of token is really kind
of an abstraction of all of these,

00:04:29.190 --> 00:04:32.260
it's kind of a, here,
serving as a visible or tangible

00:04:32.270 --> 00:04:35.420
representation of something abstract,
right?

00:04:35.420 --> 00:04:37.020
It's something we can refer to.

00:04:37.020 --> 00:04:40.870
But a token sometimes may be referred
to as a physical token device,

00:04:41.010 --> 00:04:43.880
or a token may be, again,
kind of an abstraction

00:04:43.880 --> 00:04:45.670
with a one-time password.

00:04:45.740 --> 00:04:48.590
or our smart card in this case.

00:04:49.700 --> 00:04:50.840
But the other thing,
since you're in kind of

00:04:50.840 --> 00:04:53.640
the enterprise space,
the critical point is how in the

00:04:53.650 --> 00:04:58.030
world do you get these two-factor
authentication solutions tied

00:04:58.030 --> 00:04:59.300
into your directory service?

00:04:59.400 --> 00:05:00.340
Right?

00:05:00.340 --> 00:05:02.880
We all know that we're not
all tied to doing a one-to-one

00:05:02.960 --> 00:05:06.290
management where we're just
authenticating locally to our system.

00:05:06.360 --> 00:05:08.150
It's back in directory services.

00:05:08.210 --> 00:05:10.010
So that's the key point.

00:05:10.510 --> 00:05:13.010
So let's look a little bit
about what we can deploy today.

00:05:13.060 --> 00:05:16.350
We're going to cover predominantly
smart cards here today.

00:05:16.360 --> 00:05:19.440
We're going to hit just
briefly on one-time passwords,

00:05:19.440 --> 00:05:21.940
but again, mostly on smart cards.

00:05:21.940 --> 00:05:25.430
So let's look at smart cards in Mac OS X.

00:05:26.160 --> 00:05:30.750
There's a, as I would say here,
a typical PKI-based smart card,

00:05:30.750 --> 00:05:34.290
and I put in quotes typical
because many of the deployments,

00:05:34.290 --> 00:05:37.330
many of the installations have
really kind of picked their own

00:05:37.330 --> 00:05:41.210
form of a profile or environment,
and what is the contents

00:05:41.210 --> 00:05:42.930
of those smart cards.

00:05:42.940 --> 00:05:46.220
And this is a typical example, really,
of a card that is

00:05:46.220 --> 00:05:50.590
implemented with an identity,
both the certificate and the private key,

00:05:50.590 --> 00:05:54.420
of course, and then for email signing
and email encryption.

00:05:55.110 --> 00:05:58.270
And really what you have then is,
in this case, is six items,

00:05:58.270 --> 00:06:00.940
certificates and the
associated private key.

00:06:00.940 --> 00:06:05.200
Again, protection with a PIN is for
protecting that private data.

00:06:05.220 --> 00:06:08.140
So most people,
when they fear the loss of a smart card,

00:06:08.140 --> 00:06:10.770
what's going to happen
if someone can get that?

00:06:11.060 --> 00:06:14.160
That PIN, that protection of access
to that private data,

00:06:14.280 --> 00:06:18.700
is what prevents folks from gaining
access to your keys and all in that case.

00:06:18.700 --> 00:06:21.230
So smart card uses in Mac OS X.

00:06:21.240 --> 00:06:24.220
There's been a lot of folks that are
unfamiliar with what capabilities.

00:06:25.040 --> 00:06:27.140
The capabilities are built
into OS X with smart cards.

00:06:27.140 --> 00:06:29.450
First of all, there's login.

00:06:29.460 --> 00:06:33.620
You can enable smart card login in X.4,
and we've done a tremendous

00:06:33.620 --> 00:06:36.940
amount of work to make that
just take place in Leopard.

00:06:36.960 --> 00:06:38.780
Login is the first place.

00:06:38.950 --> 00:06:41.580
Many folks start with that,
and then they move into a

00:06:41.580 --> 00:06:43.390
place of system administration.

00:06:43.400 --> 00:06:47.610
If I'm going to control access
to administering my machine,

00:06:47.610 --> 00:06:51.920
changing system settings,
it's the authentication and then

00:06:51.930 --> 00:06:54.920
accessing the authorization rights.

00:06:54.920 --> 00:06:58.060
those of you that attended
one of the previous sessions.

00:06:58.660 --> 00:06:59.670
Screen Saver.

00:06:59.670 --> 00:07:00.600
Unlocking Screen Saver.

00:07:00.600 --> 00:07:02.920
You step away from your machine,
you come back,

00:07:03.010 --> 00:07:05.120
you're going to unlock the screen.

00:07:06.040 --> 00:07:06.840
Web Access.

00:07:07.000 --> 00:07:09.500
Secure web access for
client-side authentication.

00:07:09.500 --> 00:07:11.980
We've had server-side
for quite some time.

00:07:12.230 --> 00:07:15.500
Now with smart cards
built into the services,

00:07:15.500 --> 00:07:16.900
you can do that
client-side authentication.

00:07:16.900 --> 00:07:20.590
There's many folks that are implementing
web access controls and services like

00:07:20.590 --> 00:07:22.310
that that are now requiring that.

00:07:22.340 --> 00:07:22.660
VPN.

00:07:22.790 --> 00:07:26.180
Whether you're doing layer-two tunneling,
point-to-point, whatever,

00:07:26.180 --> 00:07:28.360
you're now wanting to
use that same solution.

00:07:28.380 --> 00:07:30.510
Remember that single sign-on approach.

00:07:31.500 --> 00:07:33.090
And finally,
we'll look a little bit at mail.

00:07:33.090 --> 00:07:37.810
Mail typically is we're looking at SMIME,
and it's really more from a service

00:07:37.810 --> 00:07:41.160
standpoint and less from a kind of
a two-factor authentication piece.

00:07:41.160 --> 00:07:43.160
But again,
we wanted to cover this with smart cards.

00:07:45.370 --> 00:07:47.640
So what did Apple really do
to make this all possible?

00:07:47.640 --> 00:07:51.620
And that is that we,
as we'll show going through this session,

00:07:51.690 --> 00:07:54.090
smart cards really become key chains.

00:07:54.140 --> 00:07:56.390
And you're all familiar or should
be familiar with key chains and

00:07:56.390 --> 00:07:59.650
how it's implemented in OS X,
but that's really kind of the

00:07:59.650 --> 00:08:01.560
key message you should take away.

00:08:01.690 --> 00:08:06.120
The simplicity of integrating smart
cards into the OS as key chains really

00:08:06.120 --> 00:08:08.590
is what makes a lot of this possible.

00:08:08.650 --> 00:08:10.560
So let's go through
each one of those items.

00:08:10.640 --> 00:08:12.160
Smart card login.

00:08:12.170 --> 00:08:16.490
You've got the potential of using a
particular smart card to physically

00:08:16.490 --> 00:08:21.060
log in to the local machine,
to log in to an LDAP server,

00:08:21.340 --> 00:08:25.070
to log in to Active Directory,
to log in to--you name the

00:08:25.070 --> 00:08:29.200
directory service of choice that
you've configured on your system.

00:08:29.520 --> 00:08:33.140
But there are a couple different
ways of setting up that login,

00:08:33.360 --> 00:08:37.280
different approaches that people need
to take or have taken in the past.

00:08:37.280 --> 00:08:39.300
And these two methods I've kind
of referred to as kind of a

00:08:39.380 --> 00:08:42.900
cryptographic data exchange and
also kind of an attribute matching,

00:08:42.900 --> 00:08:46.000
just to kind of differentiate
to clear that up for you.

00:08:46.030 --> 00:08:49.510
We want to just walk you through
these and let you see what the

00:08:49.750 --> 00:08:54.180
differences or the different approaches
that these provide to see whether

00:08:54.190 --> 00:08:56.460
that fits into your environment.

00:08:56.460 --> 00:09:00.870
The first one gives you the ability
of doing a match or the use of

00:09:00.870 --> 00:09:03.440
an associated public key hash.

00:09:03.660 --> 00:09:07.660
What it really is doing is allowing
you to map a certificate and a

00:09:08.010 --> 00:09:13.080
private key that's on that card
to use that as your identity.

00:09:13.080 --> 00:09:15.020
Then you'll end up doing a
full cryptographic login.

00:09:15.020 --> 00:09:19.640
But the first method here allows
you to add that to the record,

00:09:19.700 --> 00:09:22.930
the user's record,
in your directory service.

00:09:22.930 --> 00:09:26.460
There are some environments,
this would be typical for a server.

00:09:26.460 --> 00:09:27.490
You could have a server that's
a server that's a local server,

00:09:27.490 --> 00:09:29.950
doing it locally for net info,
adding it to an LDAP server.

00:09:29.960 --> 00:09:32.320
And then there are some other
environments that we've mentioned

00:09:32.320 --> 00:09:33.600
in some previous sessions.

00:09:33.640 --> 00:09:35.790
For instance,
with Active Directory plugin,

00:09:35.790 --> 00:09:40.360
if you're utilizing our built-in plugin,
authentication authority

00:09:40.360 --> 00:09:41.610
is done on the fly.

00:09:41.710 --> 00:09:44.310
So that approach wouldn't
work in that environment.

00:09:44.980 --> 00:09:49.550
The second method is the ability
of doing attribute matching.

00:09:49.630 --> 00:09:55.110
This is where you can pick certain
attributes from-- and this came

00:09:55.110 --> 00:09:58.670
historically from support for some
of these services that were required

00:09:58.680 --> 00:10:00.050
within the federal government.

00:10:00.150 --> 00:10:03.390
So they were drawing attributes
from the email certificate.

00:10:03.480 --> 00:10:06.030
In this case,
the typical scenario that was being

00:10:06.030 --> 00:10:09.500
used within the federal government
is drawing the NT principal name from

00:10:09.720 --> 00:10:14.040
the email cert and mapping that to
or doing the lookup in the directory

00:10:14.040 --> 00:10:18.560
service against-- in this case,
the attribute name was userPrincipleName.

00:10:18.720 --> 00:10:21.690
All that is is just
identifying what the user is,

00:10:21.690 --> 00:10:24.640
or who that user is,
that's attempting to log in.

00:10:24.680 --> 00:10:26.230
It's not doing the login yet.

00:10:26.280 --> 00:10:27.560
It's just identifying.

00:10:27.560 --> 00:10:31.690
It then requires the pin unlocked
to access that private key.

00:10:33.100 --> 00:10:37.340
So now let's look at
system administration.

00:10:37.440 --> 00:10:39.000
Many of you have seen the dialogue.

00:10:39.000 --> 00:10:41.490
You're getting ready to use
your username and password.

00:10:41.600 --> 00:10:43.600
But recall, again,
if you've attended some

00:10:43.600 --> 00:10:47.070
of the other sessions,
the associated rights that are required

00:10:47.070 --> 00:10:51.670
for those various locations or various
settings within system preference.

00:10:51.790 --> 00:10:55.680
Three of them in particular are
the broad system preferences,

00:10:55.730 --> 00:10:58.910
those for accessibility,
and then those for the accounts.

00:10:59.070 --> 00:11:02.540
And if you've done the
enablement with smart cards and

00:11:02.540 --> 00:11:06.220
you have a smart card inserted,
that dialogue will then

00:11:06.220 --> 00:11:09.510
switch and display the PIN,
realizing that indeed this is

00:11:09.520 --> 00:11:12.570
the user that you're wanting
to authenticate with and asking

00:11:12.570 --> 00:11:14.690
for the PIN to unlock that card.

00:11:14.710 --> 00:11:17.410
We're going to do a little bit
of a demo a little bit later.

00:11:18.420 --> 00:11:21.310
We talk a lot about authorization.

00:11:21.310 --> 00:11:24.250
It's been mentioned briefly
here real quick in this

00:11:24.250 --> 00:11:27.040
session and quite frequently in
several of the other sessions.

00:11:27.040 --> 00:11:29.270
Just wanted to run through this
real quick to be sure those of

00:11:29.270 --> 00:11:32.300
you that are unfamiliar with this
get a little bit more comfortable

00:11:32.300 --> 00:11:33.200
with what's happening here.

00:11:33.200 --> 00:11:37.050
You've got the application
that needs access to a write,

00:11:37.150 --> 00:11:38.960
needs to take an action.

00:11:38.960 --> 00:11:41.650
So it's going to request a
write from the security server.

00:11:42.500 --> 00:11:45.800
The first thing the security
server does is queries,

00:11:45.800 --> 00:11:48.830
essentially does lookups,
does kind of an analysis of

00:11:48.840 --> 00:11:50.640
how those policies are set.

00:11:50.740 --> 00:11:52.180
That would be an Etsy authorization.

00:11:53.820 --> 00:11:56.380
Once it has that information,
if necessary,

00:11:56.380 --> 00:12:01.720
it's doing the UI to the user to
gather the appropriate information.

00:12:01.730 --> 00:12:04.010
In the case of a smart card,
it may be asking for the pin.

00:12:04.010 --> 00:12:07.250
In the case of biometrics,
it may be getting a fingerprint

00:12:07.250 --> 00:12:08.440
or a facial recognition.

00:12:08.440 --> 00:12:13.660
That's all kind of an independent,
out-of-band communication with that user,

00:12:13.660 --> 00:12:18.470
with that process in some cases maybe,
to gather the appropriate

00:12:18.470 --> 00:12:21.560
authentication to prove who they are.

00:12:22.420 --> 00:12:26.420
Once that's accomplished,
results sent back to Security Server,

00:12:26.520 --> 00:12:29.200
Security Server grants that
right to the application.

00:12:29.200 --> 00:12:32.130
In this case, we were just talking
about system preferences,

00:12:32.130 --> 00:12:34.940
would then grant access for
that user into that service.

00:12:34.940 --> 00:12:39.560
So I had mentioned before that we
had made this available in 10.4 and

00:12:39.600 --> 00:12:44.360
we were really making it simple and
leopard modifications already there.

00:12:44.360 --> 00:12:48.030
If you're on 10.4 today and you
want to enable these services,

00:12:48.140 --> 00:12:50.700
specifically for login,
you're going to need to do

00:12:50.700 --> 00:12:52.090
some minor modifications.

00:12:52.120 --> 00:12:54.900
And if you look at the
authorization for the right,

00:12:54.960 --> 00:12:58.880
that's named System Login Console,

00:13:00.340 --> 00:13:03.420
So, what you'll end up seeing
is this kind of blurb,

00:13:03.420 --> 00:13:03.900
right?

00:13:03.990 --> 00:13:06.080
You actually see the mechanisms.

00:13:06.080 --> 00:13:09.650
And by color coding there,
the orange colors are -- those are

00:13:09.650 --> 00:13:11.750
the lines that you need to insert.

00:13:11.860 --> 00:13:13.990
Okay, those are additional lines.

00:13:13.990 --> 00:13:16.200
The red line is actually a removal.

00:13:16.380 --> 00:13:19.420
There are some ways of generating
this once and creating a diff file

00:13:19.420 --> 00:13:21.250
and applying it to other machines.

00:13:21.340 --> 00:13:23.840
You can do a manual modification as well.

00:13:23.860 --> 00:13:27.360
That would give you now the ability,
remember this is a write

00:13:27.360 --> 00:13:30.460
for system login console,
to authenticate.

00:13:30.640 --> 00:13:33.470
This would now do the
enablement and actually use,

00:13:33.470 --> 00:13:38.040
as you see there, Smart Card Sniffer,
which then identifies that a

00:13:38.040 --> 00:13:42.340
smart card has been inserted and
do that as the authentication.

00:13:43.590 --> 00:13:46.510
In conjunction with that,
you have the rule.

00:13:46.680 --> 00:13:49.570
Associated with that is
your need to authenticate.

00:13:50.610 --> 00:13:54.250
So just as we did with the write,
we need to modify that to

00:13:54.250 --> 00:13:56.900
enable the use of smart cards.

00:13:56.900 --> 00:14:02.230
Again, this is on 10.4, and on 10.5,
this is done for you ahead of time.

00:14:02.550 --> 00:14:04.840
Smart Card Sniffer, again,
we're adding that in the

00:14:04.840 --> 00:14:06.460
authenticate with privileged.

00:14:06.460 --> 00:14:09.010
We're adding that and we're
removing the auth internal.

00:14:09.010 --> 00:14:10.840
So it's for the right and the rule.

00:14:10.850 --> 00:14:14.830
That's now giving you that
ability for authenticating

00:14:14.910 --> 00:14:17.850
with smart cards for login,
system administration,

00:14:17.850 --> 00:14:21.360
any dialogue where you're normally
going to do that authentication

00:14:21.650 --> 00:14:25.180
now has the ability to recognize
and leverage that smart card.

00:14:25.930 --> 00:14:28.200
Then there are other
services we talked about.

00:14:28.390 --> 00:14:29.120
Web access.

00:14:29.380 --> 00:14:33.280
You need to do client
side authentication.

00:14:34.080 --> 00:14:37.180
Those of you that have been using Safari,
you go to a secure website.

00:14:37.180 --> 00:14:39.420
You see the little lock in
the upper right-hand corner.

00:14:39.420 --> 00:14:43.500
What ends up happening is you
roll over that with your cursor.

00:14:43.500 --> 00:14:50.590
What that does is that brings up
the certificate and the chain that's

00:14:50.590 --> 00:14:52.430
being passed back from that server.

00:14:52.440 --> 00:14:54.010
So in this case, this is a U.S.

00:14:54.010 --> 00:14:54.820
Army website.

00:14:54.820 --> 00:14:59.210
I can now look at each individual
certificate in that chain path,

00:14:59.220 --> 00:15:01.990
the server cert itself all the
way back to the trusted root.

00:15:02.780 --> 00:15:05.800
And you'll see there this one indicates
that this certificate is valid.

00:15:05.800 --> 00:15:08.850
We've now validated that according
to the preference setting in our

00:15:08.850 --> 00:15:11.930
certificate revocation that we'll
get to in a little bit later.

00:15:11.940 --> 00:15:15.740
So you can walk back through and
check the validity of each cert

00:15:15.740 --> 00:15:17.690
all the way back to the root.

00:15:19.070 --> 00:15:21.490
And again,
we're looking at it from the server side.

00:15:21.590 --> 00:15:23.540
But what about the client side?

00:15:23.630 --> 00:15:25.700
So we've got a certificate,
whether it's on a smart card

00:15:26.400 --> 00:15:28.980
or available in a key chain.

00:15:29.820 --> 00:15:31.930
You go through the process
and essentially you're

00:15:32.010 --> 00:15:33.460
going to get that challenge.

00:15:33.460 --> 00:15:37.700
You're going to end up needing to
provide access to your identity.

00:15:37.840 --> 00:15:40.770
In this case,
the system is going to automatically

00:15:40.780 --> 00:15:44.260
provide the first identity
that's found in your system.

00:15:44.360 --> 00:15:48.820
And in some of the recent builds of 10.4,
what we did is we elevated kind

00:15:48.820 --> 00:15:51.940
of the priority of smart cards so
they now appear first in the list.

00:15:51.940 --> 00:15:54.970
So they're going to be searched
first for those identities.

00:15:55.560 --> 00:15:59.130
You'd end up having to unlock if
it's not already there with your PIN,

00:15:59.130 --> 00:16:02.000
and then you'd be granted access
if that right is accepted.

00:16:02.000 --> 00:16:05.800
But many of us have a growing
either a demand or condition

00:16:05.800 --> 00:16:08.380
that we have multiple identities.

00:16:08.380 --> 00:16:11.260
How do you handle that situation
and still kind of retain the

00:16:11.260 --> 00:16:13.220
zero configuration environment?

00:16:13.220 --> 00:16:17.760
So what we've done at Apple is
you follow that same procedure.

00:16:17.760 --> 00:16:19.840
You're hitting a secure website.

00:16:20.160 --> 00:16:23.860
You're needing to have the system kind
of transparently behind the scenes

00:16:23.860 --> 00:16:26.400
deliver the first identity found.

00:16:26.400 --> 00:16:29.390
But in this case,
it may not be the identity

00:16:29.510 --> 00:16:31.980
that's accepted in the server.

00:16:32.000 --> 00:16:34.740
So what ends up happening
is it gets rejected.

00:16:34.740 --> 00:16:38.400
You then get presented with the
list of remaining identities

00:16:38.400 --> 00:16:41.870
that you have available to you in
your remaining keychains or maybe

00:16:42.010 --> 00:16:43.380
even additional smart cards.

00:16:43.380 --> 00:16:46.080
And then once you select
that the first time,

00:16:46.170 --> 00:16:49.400
we end up sending a hint,
setting a hint in your system.

00:16:50.210 --> 00:16:52.120
And then once you hit that keychain,
we refer to it as identity preference.

00:16:52.120 --> 00:16:53.960
We'll see a quick shot
of that in a second.

00:16:53.960 --> 00:16:56.500
And the next time you
hit that secure website,

00:16:56.500 --> 00:17:00.840
it's always going to use that
identity that you've pointed out.

00:17:00.840 --> 00:17:02.640
So let's take a look at that.

00:17:02.640 --> 00:17:03.720
What would that look like?

00:17:03.720 --> 00:17:04.580
I've hit the site.

00:17:04.580 --> 00:17:06.730
It didn't accept the first one I sent.

00:17:06.750 --> 00:17:09.610
And now it says here's a list of
a whole bunch of them that I have.

00:17:09.620 --> 00:17:11.900
In this case,
you see that actually the first

00:17:11.900 --> 00:17:13.560
one is not even valid anymore.

00:17:13.560 --> 00:17:14.800
It probably expired in this case.

00:17:14.820 --> 00:17:16.250
And I could select another one.

00:17:16.260 --> 00:17:18.970
So the hint that I'm referring
to ends up being -- I'm going to

00:17:18.970 --> 00:17:19.900
go ahead and hit the keychain.

00:17:19.900 --> 00:17:20.120
And then once I hit that keychain,
we refer to it as identity preference.

00:17:20.120 --> 00:17:24.200
this identity preference
that's added to Keychain.

00:17:24.430 --> 00:17:26.700
Okay, so again,
this kind of gives you the whole

00:17:26.700 --> 00:17:30.110
setup of the zero configuration
where if I only had one identity,

00:17:30.110 --> 00:17:30.880
I'd never see this.

00:17:30.900 --> 00:17:33.280
If I have multiple, set it once, done.

00:17:35.700 --> 00:17:36.850
Okay.

00:17:36.980 --> 00:17:38.390
Next service.

00:17:38.420 --> 00:17:41.690
We've gone system administration,
login we started with,

00:17:41.760 --> 00:17:43.530
and we went into web.

00:17:43.670 --> 00:17:44.220
VPN.

00:17:44.570 --> 00:17:49.880
A lot of you have some remote
access telecommuting needs,

00:17:50.100 --> 00:17:52.340
whether it's even inside
of some of the facilities.

00:17:52.360 --> 00:17:55.550
A lot of folks will do,
set up some wireless networks

00:17:55.550 --> 00:17:57.680
and require VPN access back in.

00:17:57.990 --> 00:18:01.680
How do we tie that in with
two-factor authentication?

00:18:02.140 --> 00:18:04.640
So with remote access,
typical approaches are

00:18:04.780 --> 00:18:05.830
layer two tunneling.

00:18:06.070 --> 00:18:10.200
We provide L2TP over IPSec and then
point-to-point tunneling protocol.

00:18:10.260 --> 00:18:15.550
And there's many more of you now that
are looking to or relying on 802.1X,

00:18:15.550 --> 00:18:17.750
again, for access control there.

00:18:17.840 --> 00:18:19.730
So let's take a peek on those.

00:18:19.810 --> 00:18:23.200
Just to make sure that people are
aware of how this process flows,

00:18:23.400 --> 00:18:27.620
let's take a look at a standard layer
two tunneling protocol over IPSec

00:18:27.740 --> 00:18:31.310
connection for establishing a VPN.

00:18:31.400 --> 00:18:33.250
The client is really going
to make that request,

00:18:33.250 --> 00:18:35.260
and the VPN server here
could be a concentrator,

00:18:35.360 --> 00:18:37.740
could be whatever your
implementation is here.

00:18:37.860 --> 00:18:41.560
It's going to do that request,
typically through either your enterprise

00:18:41.560 --> 00:18:47.170
wireless network or through the internet,
maybe broadband connection at a hotel.

00:18:47.510 --> 00:18:53.430
And the server is then going to provide
that challenge back to the client and

00:18:53.430 --> 00:18:55.790
request authentication using EAP TLS.

00:18:55.790 --> 00:18:58.590
So this is where your
certificate comes in.

00:18:58.670 --> 00:19:04.010
Well, then the client is going to pass
that back to that concentrator,

00:19:04.010 --> 00:19:04.760
the VPN server.

00:19:04.760 --> 00:19:08.110
And in this case,
there's really kind of a pass-through.

00:19:08.120 --> 00:19:13.430
That VPN server would really
be set up in e-proxy mode and

00:19:13.700 --> 00:19:18.380
really pass that TLS transaction,
the whole certificate,

00:19:18.430 --> 00:19:20.660
to the authentication server.

00:19:20.660 --> 00:19:24.580
In many cases, some folks might have a
Windows IES server for this.

00:19:25.540 --> 00:19:29.490
And that authentication server would
then do its validation of the cert,

00:19:29.560 --> 00:19:32.290
make sure it hasn't been revoked,
checking on the user,

00:19:32.330 --> 00:19:33.630
all that validation.

00:19:33.640 --> 00:19:37.620
It comes back to the
concentrator VPN server.

00:19:37.620 --> 00:19:39.000
That was successful.

00:19:39.000 --> 00:19:40.390
The user's in.

00:19:40.440 --> 00:19:43.390
Okay, all based on the certificate,
in this case,

00:19:43.390 --> 00:19:45.470
that we had selected on the card.

00:19:45.480 --> 00:19:52.520
Keep in mind here that all of
these services log in with VPN,

00:19:52.520 --> 00:19:53.540
with system administration.

00:19:53.540 --> 00:19:56.520
If I have the card set up,
if I have the card unlocked,

00:19:56.520 --> 00:19:58.640
if I've logged into my machine
and I've unlocked the card,

00:19:58.640 --> 00:20:03.220
if the service doesn't require
me to enter a PIN to unlock

00:20:03.220 --> 00:20:07.910
the access again to that card,
I will no longer need to enter the

00:20:07.910 --> 00:20:10.570
PIN again when I get to the next service.

00:20:10.620 --> 00:20:14.080
So if I just logged in my laptop
and I need to gain VPN access

00:20:14.090 --> 00:20:17.020
maybe out here in the hall,
I wouldn't have to enter

00:20:17.020 --> 00:20:18.430
my PIN again at this time.

00:20:18.440 --> 00:20:21.180
Makes it very easy, again,
getting back to that zero,

00:20:21.300 --> 00:20:24.100
or I should say single
sign-on kind of environment.

00:20:25.590 --> 00:20:28.040
So just to be sure you're aware
of how to do this within the

00:20:28.040 --> 00:20:32.140
dialogue of Internet Connect or the
configuration of Internet Connect,

00:20:32.280 --> 00:20:36.350
of course you'd be selecting
Layer 2 Tunneling Protocol,

00:20:36.350 --> 00:20:39.320
and in the configuration itself,

00:20:40.120 --> 00:20:43.540
What you're doing now is for user
authentication in that upper left,

00:20:43.610 --> 00:20:45.400
you're selecting certificate.

00:20:45.450 --> 00:20:48.380
And what you'll get is that
dialogue you see on the right,

00:20:48.420 --> 00:20:51.140
and it will show a list of
all the certificates that

00:20:51.140 --> 00:20:55.290
are valid for that usage,
whether it's a certificate or an

00:20:55.300 --> 00:21:00.220
identity that's in my file-based key
chain or if it's in my smart card.

00:21:02.020 --> 00:21:05.450
Now, associated with that,
this is really not from the

00:21:05.450 --> 00:21:08.020
user authentication level,
but some folks are really

00:21:08.020 --> 00:21:11.030
looking into also doing the
authentication on the machine level.

00:21:11.040 --> 00:21:12.440
So again, this is a little bit separate.

00:21:12.440 --> 00:21:13.520
I just wanted to bring it up here.

00:21:13.520 --> 00:21:16.490
You'll see machine authentication
at the bottom has the ability

00:21:16.490 --> 00:21:20.110
of using certificates as well,
and that's where you need to have

00:21:20.110 --> 00:21:22.150
that in your system keychain.

00:21:22.160 --> 00:21:24.400
Remember,
there are several keychains that

00:21:24.520 --> 00:21:27.930
are managed by the OS rather than
being user-specific keychains.

00:21:28.420 --> 00:21:31.420
If you don't have one in there,
you end up being told that you

00:21:31.420 --> 00:21:35.030
don't have an appropriate machine
certificate that's available.

00:21:35.040 --> 00:21:36.980
Again,
you need that in your system keychain.

00:21:40.020 --> 00:21:43.200
The same goes for the other approaches
that most people are going to have here,

00:21:43.200 --> 00:21:45.380
again, with BPTP.

00:21:45.520 --> 00:21:47.780
Same use, selecting certificates,
whether they're on a

00:21:47.980 --> 00:21:51.030
keychain or on a smart card.

00:21:51.200 --> 00:21:54.040
Of course, with 802.1X as well,

00:21:55.190 --> 00:21:59.510
setting up for TLS and selection
either in file-based or on smart cards.

00:22:02.220 --> 00:22:05.340
So for mail,
there's just some points I wanted

00:22:05.340 --> 00:22:07.340
to be sure that you're all aware of.

00:22:07.380 --> 00:22:10.180
So I'm composing an email message here.

00:22:10.180 --> 00:22:13.740
And I see that there's a
little check mark there.

00:22:13.740 --> 00:22:17.940
That actually indicates that I have an
appropriate identity that's available

00:22:17.940 --> 00:22:22.500
in one of my key chains that maps
to the account I'm sending from.

00:22:22.500 --> 00:22:24.900
And a little bit of verification there.

00:22:24.900 --> 00:22:27.370
I'm looking in one of my key chains,
and I have the identity,

00:22:27.380 --> 00:22:29.930
the private key and the certificate.

00:22:31.040 --> 00:22:35.930
But one thing that seems to have
gotten some folks is look close

00:22:36.670 --> 00:22:41.100
And the key is that that has
to be the same email address.

00:22:41.100 --> 00:22:44.540
It has to be the same case sensitivity.

00:22:44.650 --> 00:22:46.720
Okay, and there's a lot of folks
that have done some various

00:22:46.720 --> 00:22:50.740
configurations or various entries,
capitals, lowercase,

00:22:50.810 --> 00:22:54.860
and they couldn't figure out
why it wasn't coming up in mail.

00:22:54.930 --> 00:22:57.930
The key is case sensitivity,
really everything to the

00:22:57.930 --> 00:22:59.790
left of the @ symbol there.

00:22:59.840 --> 00:23:01.390
So that's for me.

00:23:01.500 --> 00:23:04.950
But if I'm setting this
up to send to somebody,

00:23:05.550 --> 00:23:07.200
Joe User, I'm going to send to him.

00:23:07.320 --> 00:23:12.140
If I actually have the public
cert for that individual,

00:23:12.160 --> 00:23:16.600
then that kind of grayed out lock
then becomes available for me,

00:23:16.600 --> 00:23:19.570
indicating that I do have
a certificate to send an

00:23:19.570 --> 00:23:20.940
encrypted message to that user.

00:23:20.940 --> 00:23:25.720
I'm always using a key
from their public cert.

00:23:28.810 --> 00:23:33.980
So let's take a look at some of
those in action here on the machine.

00:23:37.040 --> 00:23:41.240
First of all, keychain access.

00:23:41.250 --> 00:23:43.340
That's where all of this starts.

00:23:43.370 --> 00:23:49.730
I had mentioned early on that
you've got the various keychains.

00:23:53.340 --> 00:23:56.060
And right here,
you see that I've got one of my smart

00:23:56.170 --> 00:23:58.520
cards inserted in one of my USB readers.

00:23:58.540 --> 00:24:00.840
We're going to talk about some
of the hardware environments

00:24:00.840 --> 00:24:02.700
and support for things.

00:24:02.810 --> 00:24:05.040
So there's the six items
that I had mentioned.

00:24:05.230 --> 00:24:08.940
Here is the identity and
email certificates and their

00:24:08.940 --> 00:24:11.180
associated private keys.

00:24:11.610 --> 00:24:15.460
Again, this is a key chain,
so any application that's leveraging

00:24:15.460 --> 00:24:20.240
the security APIs within the
OS now can utilize my smart card

00:24:20.350 --> 00:24:24.020
without having to deal with the
interaction of the card itself.

00:24:24.160 --> 00:24:28.460
So let's look real quick on
what happens at the login window

00:24:28.460 --> 00:24:31.370
environment when I have a smart card.

00:24:31.610 --> 00:24:34.500
You notice real quickly here that
it still shows me with my name,

00:24:34.530 --> 00:24:36.250
because that's the account
associated with this.

00:24:36.360 --> 00:24:39.240
But now it's asking me for a PIN,
because I've got the card available.

00:24:39.320 --> 00:24:40.880
In this case, I left it in here.

00:24:40.970 --> 00:24:42.950
It's ready to go.

00:24:47.250 --> 00:24:50.480
Do my corresponding pin, I'm logged in.

00:24:50.660 --> 00:24:54.000
Again, it does that challenge in
mapping with the account.

00:24:54.030 --> 00:24:58.970
Well, the same thing we mentioned
was with system preferences.

00:25:00.350 --> 00:25:05.260
If I'm going to do some alterations,
let's say, with my accounts,

00:25:05.300 --> 00:25:08.340
I'm going to unlock--
same thing with dialogues.

00:25:08.350 --> 00:25:12.070
Now I'm being asked for the right--

00:25:12.210 --> 00:25:13.090
dropped this down.

00:25:13.100 --> 00:25:14.340
That was one of those
rights that we looked at.

00:25:14.340 --> 00:25:18.540
System Preferences Accounts is now
available to use with smart cards.

00:25:18.540 --> 00:25:22.530
So if I enter my same PIN,

00:25:27.080 --> 00:25:32.550
Now I can do my standard
modifications to my system.

00:25:32.830 --> 00:25:36.480
Do all the screen lock if
I go ahead and lock my screen.

00:25:36.550 --> 00:25:39.220
Let's also look at Safari.

00:25:39.330 --> 00:25:40.940
Again,
just kind of a quick representation

00:25:40.940 --> 00:25:44.790
of some of those services
that we've just spoken about.

00:25:57.200 --> 00:25:59.270
So let's go to a couple
of the sites here,

00:25:59.270 --> 00:26:05.600
and I'll just pull up the
AKO site that you saw in my slide.

00:26:06.480 --> 00:26:09.300
Here's where you see,
upper right hand corner,

00:26:09.300 --> 00:26:09.750
you see the lock.

00:26:09.830 --> 00:26:13.070
If I click on that,
here's that whole scenario of

00:26:13.070 --> 00:26:15.050
the certificate from the server.

00:26:15.180 --> 00:26:19.330
So in real time we are looking
at that particular certificate,

00:26:19.330 --> 00:26:23.350
validating it, doing the whole trust path
all the way back to root.

00:26:24.390 --> 00:26:27.540
If I proceed,
then I'm going to be challenged and need

00:26:27.540 --> 00:26:30.430
to require the access to my smart card.

00:26:30.500 --> 00:26:34.920
And if I go to another one of these,

00:26:39.200 --> 00:26:53.500
[Transcript missing]

00:26:53.960 --> 00:26:57.060
But we're looking at the
certificate revocation validation.

00:26:57.110 --> 00:27:00.370
We're looking at CRL and OCSP.

00:27:00.410 --> 00:27:03.300
And in many cases,
most of you will want to

00:27:03.300 --> 00:27:04.670
set things to best attempt.

00:27:04.740 --> 00:27:09.220
It means that when you've got that
network access and most recently

00:27:09.220 --> 00:27:12.610
have been able to cache that,
in the case of CRL,

00:27:12.640 --> 00:27:15.860
you still can validate that
certain continue of the process.

00:27:15.900 --> 00:27:19.990
If I required it and
I didn't have network access,

00:27:20.010 --> 00:27:24.160
that certificate or that identity would
have been marked as being invalid.

00:27:24.160 --> 00:27:26.340
I wouldn't continue with that.

00:27:26.340 --> 00:27:27.880
Okay?

00:27:28.220 --> 00:27:32.900
So again, with Safari,
with internet access.

00:27:33.020 --> 00:27:38.100
Quickly just bringing up the VPN side,
the scenario that we just mentioned,

00:27:38.100 --> 00:27:41.000
we went through the screenshots on.

00:27:41.170 --> 00:27:43.540
Here's where I'm selecting a certificate.

00:27:43.720 --> 00:27:48.460
Now what you see is that is that
representation of my smart card

00:27:48.460 --> 00:27:51.100
that I have inserted in my reader.

00:27:51.250 --> 00:27:54.830
And I can go ahead and proceed to kind of
interrogate or look at that certificate

00:27:54.950 --> 00:27:57.020
that's physically on that card.

00:28:00.130 --> 00:28:04.100
Under the hood, for those of you who
are interested in this,

00:28:04.360 --> 00:28:06.650
you see right here,

00:28:07.570 --> 00:28:08.760
I highlighted.

00:28:08.980 --> 00:28:11.500
That's one of those token Ds
that we're going to talk about.

00:28:11.500 --> 00:28:15.230
And that's the associated process
that's communicating with that card

00:28:16.120 --> 00:28:20.680
and doing that propagation of that
all the way up through to keychain.

00:28:24.230 --> 00:28:26.560
So again,
we can get into the mail process,

00:28:26.560 --> 00:28:30.560
but I think at this point with time,
let's move on a little bit

00:28:30.650 --> 00:28:33.860
further and go back to slides.

00:28:41.490 --> 00:28:46.640
So let's look at-- I've been showing
you some of the services within the OS,

00:28:46.720 --> 00:28:50.190
and I've really been using smart cards
that are supported within the OS.

00:28:50.310 --> 00:28:55.970
Again, if you attended the session 416,
it got into the various tokens support

00:28:56.150 --> 00:28:58.290
for smart cards that are built in.

00:28:58.380 --> 00:29:00.630
That'd be the US federal
government smart card,

00:29:00.720 --> 00:29:05.010
Belgian card, and with the Japanese card.

00:29:05.310 --> 00:29:09.190
These three are built-in
support within the OS.

00:29:09.250 --> 00:29:12.880
That means that if you are in an
environment where you're using a

00:29:13.040 --> 00:29:17.300
card that meets this specification,
we already have the software available,

00:29:17.380 --> 00:29:23.630
the device support in this case
for those particular smart cards.

00:29:23.700 --> 00:29:25.600
So the other component is the readers.

00:29:25.600 --> 00:29:27.380
A lot of people have had questions.

00:29:27.390 --> 00:29:31.520
I get mail messages every
day asking what reader works,

00:29:31.590 --> 00:29:33.640
what reader doesn't.

00:29:33.640 --> 00:29:38.090
The key one to be looking at if
you haven't got into smart card

00:29:38.090 --> 00:29:43.260
reader purchases just yet is be
looking for CCID compliant readers.

00:29:43.260 --> 00:29:46.040
It's kind of the closest thing you'll
get to kind of a standard across

00:29:46.080 --> 00:29:48.240
the board on smart card readers.

00:29:48.240 --> 00:29:51.440
We have a CCID class driver in
the OS to support those readers.

00:29:51.440 --> 00:29:53.900
No need for additional drivers.

00:29:53.900 --> 00:29:58.440
We've got several proprietary
implementations of PCMCIA,

00:29:58.440 --> 00:30:01.400
USB, USB dongle readers support as well.

00:30:01.400 --> 00:30:06.000
But those can change between
versions going forward and looking

00:30:06.000 --> 00:30:08.720
back at previous revs of the OS.

00:30:08.720 --> 00:30:11.910
So again,
the suggestion is continue to move

00:30:11.920 --> 00:30:14.670
towards CCID compliant readers.

00:30:17.390 --> 00:30:20.660
As I had mentioned with these readers,
we've got the support,

00:30:20.660 --> 00:30:23.460
but many of you may have your
own devices that you need to

00:30:23.460 --> 00:30:27.060
start looking at the support,
bringing on over to OS X.

00:30:27.130 --> 00:30:32.670
And a good resource for some of the
PCSC drivers available for a lot of the

00:30:32.680 --> 00:30:37.760
kind of legacy readers that have been out
there is LinuxNet.com for source drivers.

00:30:37.840 --> 00:30:38.940
We'll give you a good start.

00:30:39.040 --> 00:30:43.090
Open source drivers available.

00:30:43.220 --> 00:30:48.570
So now what I want to do is ask
Krishnan from Genentech to come up and

00:30:48.570 --> 00:30:52.800
just spend a couple moments with me
here to give you a little bit idea of

00:30:53.300 --> 00:30:57.340
how some of the folks in the private
sector are leveraging the built-in

00:30:57.340 --> 00:31:01.400
smart card services within OS X.

00:31:02.500 --> 00:34:24.400
[Transcript missing]

00:34:27.400 --> 00:34:31.040
Okay, so we talked a little bit about
tying in to other directory services.

00:34:31.180 --> 00:34:35.070
So this kind of gives you that view
that you're facing on a daily basis.

00:34:35.220 --> 00:34:40.580
How would I use that smart card into
whatever back end solution I have?

00:34:41.360 --> 00:34:44.990
Now, first of all, just to kind of better
understand the architecture here,

00:34:45.270 --> 00:34:48.200
look at the whole abstraction
layer with smart cards.

00:34:48.230 --> 00:34:49.400
We've got the login.

00:34:49.400 --> 00:34:52.240
They're on top of our
directory services APIs,

00:34:52.240 --> 00:34:55.320
and some of you may have seen
this again in session 416 as well.

00:34:55.320 --> 00:34:57.770
And then below,
you've got all your directory access.

00:34:57.780 --> 00:35:01.520
So when I did my login here,
I happened to be logging into

00:35:01.620 --> 00:35:04.920
a local account on my laptop,
but that could have been any

00:35:05.050 --> 00:35:08.130
of our directory services,
any access to an LDAP server

00:35:08.140 --> 00:35:10.010
or whatever in the back end.

00:35:10.510 --> 00:35:12.160
And that process is really that lookup.

00:35:12.160 --> 00:35:14.470
Remember,
we talked about kind of the matching,

00:35:14.550 --> 00:35:17.230
either with public key hash
or the attribute matching.

00:35:19.500 --> 00:35:21.540
So let's look exactly
how you would do that.

00:35:21.580 --> 00:35:25.150
I kind of showed you,
but let's walk through each one of these.

00:35:25.160 --> 00:35:27.750
Within the authentication
authority in an account,

00:35:28.050 --> 00:35:31.220
you typically had the shadow hash
you see there at the bottom with

00:35:31.220 --> 00:35:32.220
the authentication authority.

00:35:32.220 --> 00:35:36.460
And when you use the new
command related to smart cards,

00:35:36.550 --> 00:35:39.710
seauth,
you will then be adding the public

00:35:39.710 --> 00:35:44.760
key hash or one of those from the
card that you have in this case.

00:35:44.760 --> 00:35:49.380
That then does that association
between the card and the account.

00:35:49.500 --> 00:35:52.140
So again, the command is seauth.

00:35:52.140 --> 00:35:56.820
You've got the ability now of
setting it up for accepting

00:35:56.820 --> 00:35:59.720
that card for that account,
removing those,

00:35:59.810 --> 00:36:03.460
or just physically printing out
the hashes for your use here

00:36:03.560 --> 00:36:07.280
of identifying which hash is
identifying the identity key,

00:36:07.280 --> 00:36:10.480
in this case,
email signing and encryption.

00:36:10.480 --> 00:36:13.940
There really isn't a requirement
of which one you use.

00:36:13.940 --> 00:36:16.750
In some cases,
some folks may particularly focus

00:36:16.750 --> 00:36:19.370
on maybe the email signing cert,
as I mentioned earlier.

00:36:19.380 --> 00:36:21.910
That's a focus within the government.

00:36:21.910 --> 00:36:24.980
But with respect to
associating this account,

00:36:25.090 --> 00:36:28.080
it doesn't matter which
one of those you use.

00:36:28.080 --> 00:36:31.910
So if I'm going to bind or
link this card to my account,

00:36:31.910 --> 00:36:36.010
I'm going to do the seauth, accept,
designate my user,

00:36:36.010 --> 00:36:38.260
and dash h to indicate my hash.

00:36:38.320 --> 00:36:43.300
And again, in this case,
I'm actually picking that first one.

00:36:44.700 --> 00:36:48.700
But any of these could be used,
and I could also have multiple entries.

00:36:48.700 --> 00:36:51.700
Many of you might know that we all kind
of come to work and we may have our

00:36:51.700 --> 00:36:55.700
badges or we may forget our badges,
so you may issue a temporary badge.

00:36:55.730 --> 00:37:00.320
Or you may have multiple cards or
the need for multiple individuals

00:37:00.320 --> 00:37:02.620
to get to a particular account.

00:37:02.720 --> 00:37:06.750
In this case, with this method,
you can add multiple public key

00:37:06.900 --> 00:37:10.630
hashes to any given account,
giving you the ability to log in to

00:37:10.630 --> 00:37:12.690
that account with multiple cards.

00:37:12.700 --> 00:37:17.280
So here I'm really just looking at
the authentication authority attribute

00:37:17.280 --> 00:37:20.700
value using DSCL for my local.

00:37:20.700 --> 00:37:24.760
The bottom there kind of references LDAP,
if I'm going to do that.

00:37:25.500 --> 00:38:26.900
[Transcript missing]

00:38:27.860 --> 00:38:31.770
This is a typical P-list,
so it's very short.

00:38:31.800 --> 00:38:33.800
There's not a whole lot
of information in here.

00:38:33.900 --> 00:38:35.800
The first indicates fields.

00:38:35.800 --> 00:38:39.400
Those are an array of fields
that you're pulling from,

00:38:39.410 --> 00:38:42.710
and they are the actual attribute name,
you're pulling from the

00:38:42.710 --> 00:38:44.300
email cert on the card.

00:38:44.300 --> 00:38:46.890
And again,
since this is kind of an approach

00:38:46.890 --> 00:38:51.650
that was drawn from the federal space,
there is the drawing from the email cert,

00:38:51.650 --> 00:38:56.410
and at the moment we don't support any
of the other certificates on the card.

00:38:57.290 --> 00:38:58.420
Then we need to format it.

00:38:58.620 --> 00:39:01.210
In this case, we're just going to
take the value itself.

00:39:01.210 --> 00:39:04.110
So $1 is we're just going
to take that first value.

00:39:04.120 --> 00:39:07.880
And we need to define what
attribute we're looking for

00:39:07.960 --> 00:39:10.060
in our directory service.

00:39:10.060 --> 00:39:13.330
In this case,
at the bottom there you see DS attribute

00:39:13.330 --> 00:39:15.890
type native user principal name.

00:39:15.900 --> 00:39:19.890
I'm now defining that it's a unique
attribute that I'm going to map to

00:39:19.890 --> 00:39:21.960
in one of my directory services.

00:39:21.980 --> 00:39:23.600
So what would that look like?

00:39:23.600 --> 00:39:28.250
In the case of actually my card,
I think that's the value,

00:39:28.250 --> 00:39:30.080
or a typical default value.

00:39:30.080 --> 00:39:33.030
It's going to be a 10
digit number at mil,

00:39:33.220 --> 00:39:35.090
is the case within the federal space.

00:39:35.100 --> 00:39:40.160
So that value is going to be looked at
against my directory service against the

00:39:40.160 --> 00:39:42.110
attribute value of user principal name.

00:39:42.120 --> 00:39:45.420
It's then going to find the
user associated with that

00:39:45.420 --> 00:39:49.150
and bring up my login window,
much like you saw, asking for a pin.

00:39:49.160 --> 00:39:51.310
I haven't actually logged in.

00:39:51.310 --> 00:39:54.000
I'm just doing that association.

00:39:54.920 --> 00:39:59.530
And these are just some of the string
values and some typical string names

00:39:59.530 --> 00:40:04.910
and then typical values that you'd find
within those attributes in the card.

00:40:05.080 --> 00:40:08.660
Again, you can combine that with
literals even to generate a longer

00:40:08.660 --> 00:40:11.380
string or unique information.

00:40:11.380 --> 00:40:12.760
So we can do mapping.

00:40:12.790 --> 00:40:15.000
I've been mentioning that
this is really predominantly

00:40:15.000 --> 00:40:16.740
used within the federal space.

00:40:16.770 --> 00:40:20.460
And I'd like to welcome up Ryan McCrone
to give us a little bit of insight as

00:40:20.540 --> 00:40:24.960
to how they're implementing the smart
cards within the government space.

00:40:26.070 --> 00:40:26.680
Thank you, Shawn.

00:40:26.830 --> 00:40:28.050
My name is Ryan McCrone.

00:40:28.120 --> 00:40:29.760
I am a contractor working for the U.S.

00:40:29.760 --> 00:40:32.140
Army, the Advanced Technologies Division.

00:40:32.200 --> 00:40:35.150
My company is Ease Technologies.

00:40:35.700 --> 00:40:38.740
We had three major goals and
expectations going into this project.

00:40:38.840 --> 00:40:41.180
The first was to meet our government
mandates which have been talked

00:40:41.210 --> 00:40:42.600
about throughout the presentation.

00:40:42.700 --> 00:40:45.820
The greatest requirement of that was
a single federal identity for all

00:40:45.820 --> 00:40:48.600
forms of access from building access,
federal ID,

00:40:48.600 --> 00:40:50.570
and computer and network access.

00:40:50.630 --> 00:40:53.570
Our second goal was tight
integration with our Army network.

00:40:53.600 --> 00:40:58.220
We have a very extensive existing
Active Directory system and Kerberos

00:40:58.220 --> 00:41:00.600
system that needed to be accounted for.

00:41:00.600 --> 00:41:04.600
We wanted to eliminate all
passwords except for the user's PIN.

00:41:04.720 --> 00:41:06.590
And our third major goal was usability.

00:41:06.600 --> 00:41:09.940
We wanted to provide a single logon,
SMIME, and HTTPS,

00:41:09.970 --> 00:41:12.980
and administration system,
an SSO system that was

00:41:12.980 --> 00:41:14.520
very easy for the user.

00:41:14.840 --> 00:41:18.940
Some of our experiences:
Smart Card does provide a strong

00:41:18.940 --> 00:41:22.600
two-form factor of identification.

00:41:22.740 --> 00:41:25.370
The DoD leads deployment
of Smart Cards in the U.S.

00:41:25.370 --> 00:41:28.920
federal government,
and Apple does have integration

00:41:28.920 --> 00:41:30.590
of Smart Card in OS X.

00:41:30.600 --> 00:41:33.590
However,
it didn't meet our minimum requirements,

00:41:33.620 --> 00:41:36.600
so we went out to a third-party
development system of

00:41:36.600 --> 00:41:38.970
Thursby Software Systems,
and they were able to give us

00:41:38.970 --> 00:41:40.500
the integration that we needed.

00:41:40.640 --> 00:41:44.090
Unfortunately,
the vast majority of the U.S.

00:41:44.110 --> 00:41:47.180
Army still uses PCs,
and we had to learn how to

00:41:47.180 --> 00:41:49.600
play with them cooperatively.

00:41:49.830 --> 00:41:52.590
Therefore, we needed to authenticate our
users to the Active Directory.

00:41:52.620 --> 00:41:56.340
We needed to be able to send
SMIME with Entourage 2004

00:41:56.670 --> 00:41:58.210
through our Exchange servers,
ranging from 2000 to 2003,

00:41:58.210 --> 00:41:58.600
even up to 2000.

00:41:58.600 --> 00:41:58.970
We needed to be able to send
SMIME with Entourage 2004

00:41:58.970 --> 00:41:59.600
through our Exchange servers,
ranging from 2000 to 2003,

00:41:59.600 --> 00:41:59.600
even up to 2000.

00:41:59.600 --> 00:41:59.900
We needed to be able to send
SMIME with Entourage 2004

00:41:59.900 --> 00:42:00.300
through our Exchange servers,
ranging from 2000 to 2003,

00:42:00.320 --> 00:42:00.600
even up to 2000.

00:42:00.600 --> 00:42:02.360
to the new E12 servers.

00:42:02.390 --> 00:42:04.480
And finally,
we needed to be able to have secure web

00:42:04.480 --> 00:42:08.650
access through Safari to sites like AKO,
which was just demonstrated.

00:42:09.390 --> 00:42:10.500
Things we learned.

00:42:10.540 --> 00:42:13.140
When developers and Apple work together,
it delivers a product that

00:42:13.140 --> 00:42:14.720
the customer really needs.

00:42:14.720 --> 00:42:19.080
We'd like to thank Thursby and Apple for
working very tightly with each other

00:42:19.080 --> 00:42:23.240
and closely with us to develop a program
that got most of our requirements done.

00:42:23.240 --> 00:42:27.780
And we also identified a lot of
new requirements along the way.

00:42:27.780 --> 00:42:31.470
The Army wanted greater control
over the individual systems,

00:42:31.510 --> 00:42:33.480
which we are still working on.

00:42:33.480 --> 00:42:37.390
And some systems actually need to
support two smart cards simultaneously.

00:42:37.920 --> 00:42:40.770
So when an administrator logs
into a machine and needs to

00:42:40.770 --> 00:42:44.080
perform a higher level command,
he has to pop in a second card.

00:42:44.080 --> 00:42:47.920
Unfortunately,
this gives us a new issue where card

00:42:47.920 --> 00:42:50.720
removal brings up a locked screen.

00:42:50.720 --> 00:42:53.450
And that is something we are
currently working on and hopefully

00:42:53.450 --> 00:42:54.920
we'll have a solution to soon.

00:42:54.920 --> 00:42:56.440
Thank you very much, Shawn.

00:42:56.470 --> 00:42:57.320
Join me in thanking Ryan.

00:43:02.200 --> 00:45:16.700
[Transcript missing]

00:45:17.800 --> 00:45:19.810
So I had mentioned smart cards.

00:45:19.860 --> 00:45:23.010
We want to just take a very
brief look at one-time passwords.

00:45:23.180 --> 00:45:27.420
Many of you may have what
many of we have as well,

00:45:27.460 --> 00:45:32.880
is other tokens,
one-time password tokens.

00:45:32.880 --> 00:45:34.980
This happens to be a crypto card token.

00:45:35.010 --> 00:45:37.360
You may have a secure ID token.

00:45:37.400 --> 00:45:39.480
Those are giving you
those one-time passwords.

00:45:39.480 --> 00:45:41.300
Again,
we're trying to solve the problem of

00:45:41.300 --> 00:45:47.220
the standard what you know of a username
and a password and solve that secure

00:45:47.220 --> 00:45:49.890
and reliable form of identification.

00:45:50.130 --> 00:45:54.030
So in this case, how much or where has
Apple incorporated the one-time

00:45:54.030 --> 00:45:56.600
password support built into OS X?

00:45:56.720 --> 00:45:59.400
And in this case,
we really have provided it in the

00:45:59.400 --> 00:46:02.300
VPN services within the remote access.

00:46:02.400 --> 00:46:05.870
And if you look closely, within 10.4,
you have both the identification

00:46:05.900 --> 00:46:10.620
of RSA Secure ID and with
CryptoCard in the VPN settings.

00:46:10.780 --> 00:46:17.710
So you can use those one-time password
tokens right in OS X's Internet Connect.

00:46:18.400 --> 00:46:23.760
There is a KBase article that's
available to actually set up

00:46:23.760 --> 00:46:28.800
manually the OS X server to allow
it to provide authentication

00:46:28.800 --> 00:46:30.060
back to a secure ID server.

00:46:30.060 --> 00:46:34.220
I know we've talked about a
radius server being on Leopard.

00:46:34.220 --> 00:46:37.390
In this case,
folks are also looking into doing

00:46:37.610 --> 00:46:41.580
a little bit of use of secure ID in
the back end for that authentication

00:46:41.580 --> 00:46:44.740
from 10.3 using secure ID tokens.

00:46:45.740 --> 00:46:48.590
Then, of course,
the server administration guides,

00:46:48.610 --> 00:46:51.800
in this case, network services,
go up to server documentations,

00:46:51.800 --> 00:46:54.420
and you'll find this is a
very helpful guide both in

00:46:54.420 --> 00:46:58.560
understanding the architecture and
step-by-step setup of that service.

00:47:00.030 --> 00:47:03.100
So from a standpoint of a
complete end-to-end solution,

00:47:03.100 --> 00:47:06.140
one of the solutions that's
available to you today,

00:47:06.140 --> 00:47:08.610
and has been for literally
a year and a half,

00:47:08.610 --> 00:47:11.940
I believe,
is CryptoCard's one-time password.

00:47:11.940 --> 00:47:17.520
With their solution, you can also add the
login with that token.

00:47:17.520 --> 00:47:21.050
So if you have the RSA Secure
ID or your CryptoCard token,

00:47:21.050 --> 00:47:24.400
you can also do the login
with a one-time password.

00:47:24.420 --> 00:47:26.560
We've been talking an awful
lot about smart cards,

00:47:26.560 --> 00:47:29.140
but you could be doing it as
well with a one-time password.

00:47:30.100 --> 00:47:33.080
And in their case,
they do also support the use or the

00:47:33.080 --> 00:47:37.340
ongoing use of the Secure ID tokens
as you migrate from one to the other.

00:47:37.340 --> 00:47:42.290
And the various tokens you see
there were smart card form factor,

00:47:42.290 --> 00:47:44.580
pin pads, and the key fobs.

00:47:46.940 --> 00:47:48.690
Just a quick,
this is really kind of an overview

00:47:48.690 --> 00:47:51.520
showing you what the product is,
but it provides you kind of the

00:47:51.520 --> 00:47:55.990
end-to-end solution for token-based
authentication from the client all

00:47:55.990 --> 00:47:58.620
the way to the server for login,
VPN, web.

00:47:58.620 --> 00:48:03.860
They've got some management tools and
some deployment components as well.

00:48:03.860 --> 00:48:07.580
But that gives you the use of, again,
those one-time password

00:48:07.580 --> 00:48:09.020
tokens on OS X today.

00:48:11.800 --> 00:48:13.740
So in summary,
we've been going through this

00:48:13.740 --> 00:48:16.100
discussion of two-factor authentication.

00:48:16.100 --> 00:48:17.690
We've been going through
the use of smart cards,

00:48:17.740 --> 00:48:19.780
one-time password tokens.

00:48:19.780 --> 00:48:24.500
Hopefully you're starting to see
that this is giving you some options,

00:48:24.500 --> 00:48:28.040
some good solutions for providing that
secure and reliable form of identity.

00:48:28.040 --> 00:48:29.570
You've got users.

00:48:29.570 --> 00:48:35.130
Many of you have lots of users that
really the manageability of knowing for

00:48:35.180 --> 00:48:41.490
sure that they are who they claim to be
is very critical in your day-to-day jobs.

00:48:41.700 --> 00:48:45.810
And that this is actually going to help
you solve the solutions of the two-factor

00:48:45.850 --> 00:48:48.080
within your enterprise architecture.

00:48:48.080 --> 00:48:52.780
And hopefully between the
session 4.16 and this session,

00:48:52.780 --> 00:48:56.320
you've actually gotten a really good
glimpse both at a high level and down

00:48:56.320 --> 00:49:01.180
at the API and service level of the
support of smart cards that are built in.

00:49:01.180 --> 00:49:04.820
In this case with the government cards,
the Belpick and the Japanese cards,

00:49:04.820 --> 00:49:09.400
that that service is already
available shipping out of the box.

00:49:09.400 --> 00:49:11.700
And with third parties
as Krishnan mentioned.

00:49:11.700 --> 00:49:15.040
With Siemens,
they had their card very quickly

00:49:15.140 --> 00:49:17.210
supported on the platform.

00:49:17.270 --> 00:49:21.440
If you've got other developers,
other smart card vendors that you want

00:49:21.440 --> 00:49:25.380
to use their card in your environment
and they haven't brought it over yet,

00:49:25.440 --> 00:49:32.720
please encourage them to talk with us
to expedite their deployment on OS X.

00:49:32.800 --> 00:49:35.530
And hopefully we've covered a
fair amount of the scenarios.

00:49:35.530 --> 00:49:38.290
It's very hard to cover
every little situation,

00:49:38.290 --> 00:49:41.510
but hopefully we've given you a very
broad understanding and hit a couple

00:49:41.510 --> 00:49:49.010
of the points of integrating with some
of your network solutions that you're

00:49:49.010 --> 00:49:49.010
going to face on a regular basis.

00:49:49.150 --> 00:49:52.930
And we think that the architecture
environment really enables

00:49:52.940 --> 00:49:56.060
some new solutions that haven't
been implemented before.

00:49:56.060 --> 00:49:59.940
And I don't have the hardware
available with me this morning,

00:49:59.940 --> 00:50:03.720
but by design with the
architecture within OS X,

00:50:03.720 --> 00:50:06.680
and with the token environment,
and with smart cards specifically here,

00:50:06.680 --> 00:50:10.330
I could go much further than
just having my single smart card.

00:50:10.350 --> 00:50:12.980
I could have the situation,
much like Ryan had mentioned,

00:50:12.980 --> 00:50:14.550
with a need for two smart cards.

00:50:15.320 --> 00:50:19.370
I can literally have additional
smart cards added to my system,

00:50:19.370 --> 00:50:21.650
and my applications don't
need to manage that.

00:50:21.680 --> 00:50:25.300
It's a very significant difference
architecturally than other platforms.

00:50:27.320 --> 00:50:29.670
So in this case,
with a little bit more information,

00:50:29.850 --> 00:50:34.310
standard location for content
up on the WWDC website.

00:50:34.400 --> 00:50:38.240
I think we're going to try to
include in an additional document

00:50:38.370 --> 00:50:41.640
some of the slides that we needed
to remove just due to time,

00:50:41.640 --> 00:50:44.220
because things got
shortened a little bit here.

00:50:44.290 --> 00:50:48.530
And from a contact standpoint,
if you're a developer,

00:50:48.770 --> 00:50:52.220
key contact is Craig Keithley
that covers all the security

00:50:52.220 --> 00:50:53.340
technology evangelism here.

00:50:53.340 --> 00:50:57.990
And I included my information
because an assortment of you

00:50:58.000 --> 00:51:00.320
all in various environments,
whether it's enterprise or

00:51:00.320 --> 00:51:03.280
in the government space,
either need some additional

00:51:03.290 --> 00:51:05.540
guidance or direct working.

00:51:05.540 --> 00:51:09.720
And so my contact information
is available to you as such.