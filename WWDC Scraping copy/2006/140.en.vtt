WEBVTT

00:00:06.900 --> 00:00:07.260
Hello there.

00:00:07.290 --> 00:00:09.020
Welcome to Carbon Programming Hands-On.

00:00:09.110 --> 00:00:11.830
For those of you that don't know me,
I'm Deric Horn,

00:00:11.920 --> 00:00:14.700
the Application Technologies Evangelist.

00:00:14.700 --> 00:00:17.370
That's really the
Carbon Cocoa Evangelist.

00:00:18.550 --> 00:00:21.080
So today we're going to take
kind of a tag team approach.

00:00:21.080 --> 00:00:23.180
We're going to start out by
talking a little bit about the

00:00:23.180 --> 00:00:24.960
announcements made earlier this week.

00:00:24.960 --> 00:00:29.080
We'll go into how important it is
to make sure that your application

00:00:29.080 --> 00:00:31.990
is a modern Carbon application,
what that means.

00:00:32.000 --> 00:00:34.860
And then we'll go into a demo
that I put together for this,

00:00:34.860 --> 00:00:37.480
demonstrating a little bit about
how to integrate a little bit of

00:00:37.480 --> 00:00:39.930
Cocoa into your Carbon application.

00:00:40.310 --> 00:00:42.210
Then we'll have Larry Coope,
one of our SWAT engineers,

00:00:42.250 --> 00:00:44.810
come up on board and he's
going to go over some of the

00:00:44.810 --> 00:00:49.200
best practices in development,
both for Xcode, cross-platform,

00:00:49.390 --> 00:00:50.200
owning your code.

00:00:50.200 --> 00:00:53.230
And then again we're going
to have Curt Rothert and

00:00:53.340 --> 00:00:57.260
Bryan Prusha come up on stage,
members of the High Level Toolbox team,

00:00:57.350 --> 00:01:02.730
and they're going to go over the hands-on
portion of this on how to build your

00:01:02.730 --> 00:01:05.200
own custom HIView based on HIFramework.

00:01:05.220 --> 00:01:07.540
And if you've ever written
your own custom HIView,

00:01:07.540 --> 00:01:09.970
and if you've used HIFramework,
you know that that's

00:01:09.990 --> 00:01:11.200
really the way to go.

00:01:11.200 --> 00:01:13.200
It makes it much easier to do.

00:01:13.380 --> 00:01:16.350
And we'll try to leave plenty
of time for Q&A afterwards.

00:01:18.960 --> 00:01:24.920
So, as you can see,
there's a huge number of

00:01:24.920 --> 00:01:28.290
revenue generating third party
applications and also internal

00:01:28.290 --> 00:01:30.460
applications based on Carbon.

00:01:30.580 --> 00:01:35.530
Carbon is very critical to the
success of the Macintosh platform.

00:01:35.690 --> 00:01:36.420
It's here to stay.

00:01:36.440 --> 00:01:38.380
It's not being deprecated.

00:01:38.420 --> 00:01:41.260
That being said,
one critical step moving forward

00:01:41.640 --> 00:01:44.110
is better integration with Cocoa.

00:01:45.260 --> 00:01:47.540
So some of the announcements
made this week.

00:01:47.610 --> 00:01:49.880
Greater integration with Cocoa.

00:01:49.900 --> 00:01:54.600
We announced the ability to now
embed NSViews inside of HIViews.

00:01:54.920 --> 00:01:57.240
And also we made the announcement
where anywhere where we have an

00:01:57.240 --> 00:02:00.200
HIView that accepts a CG image,
we're also going to make that

00:02:00.200 --> 00:02:01.830
able to accept an NS image.

00:02:02.110 --> 00:02:04.250
And likewise,
going out where it exports the CG image,

00:02:04.280 --> 00:02:06.890
we'll be able to export an NS image.

00:02:07.780 --> 00:02:10.870
Resolution Independence.

00:02:11.390 --> 00:02:13.540
I think Bertrand laid a stake
in the ground saying that we

00:02:13.540 --> 00:02:17.300
expect all applications to be
resolution independent by 2008,

00:02:17.440 --> 00:02:19.640
but that's really kind of a ramping time.

00:02:19.640 --> 00:02:23.720
You see that, like hard drives,
we're making screens denser and denser

00:02:23.720 --> 00:02:27.940
pixel-- we're making the screens
having higher and higher pixel density.

00:02:27.940 --> 00:02:29.370
Got that a little bit backwards.

00:02:29.400 --> 00:02:31.690
But even today, I mean,
I overheard some developers talking

00:02:31.690 --> 00:02:35.460
that when they go to Macworld right now
they have these big 30-inch displays.

00:02:35.460 --> 00:02:38.850
And currently what they do is they
lower the screen resolution so that they

00:02:38.850 --> 00:02:41.000
can display everything really large.

00:02:41.000 --> 00:02:45.430
And when I overheard them talking,
they said maybe as an alternate approach,

00:02:45.430 --> 00:02:49.940
they'll just go ahead and they'll
increase the scaling factor to like 3.0.

00:02:49.940 --> 00:02:53.770
And that will be able to take advantage
of all the pixels on the screen.

00:02:53.780 --> 00:02:57.670
So I think that you can kind of ramp that
up so that any time between now and 2008.

00:02:57.760 --> 00:02:59.660
It's an important direction.

00:02:59.660 --> 00:03:02.030
The Carbon framework, along with Cocoa,
are being updated to support

00:03:02.060 --> 00:03:02.990
resolution independence.

00:03:03.360 --> 00:03:05.160
Really what that means to you
is that your Windows should

00:03:05.160 --> 00:03:06.950
now be composited Windows.

00:03:07.030 --> 00:03:08.960
And you can largely do that
just through interface builders,

00:03:08.960 --> 00:03:10.990
selecting the option.

00:03:11.380 --> 00:03:14.580
You should be upgrading all
of your artwork and icons,

00:03:14.620 --> 00:03:19.700
preferably towards using vector-based
drawing or else multi-reptifs.

00:03:19.700 --> 00:03:22.560
And again, I'm sure you've heard
this theme over and over,

00:03:22.710 --> 00:03:23.300
no more Quick Draw.

00:03:23.300 --> 00:03:25.650
Quick Draw won't scale with
resolution independence.

00:03:25.700 --> 00:03:27.190
64-bit.

00:03:27.300 --> 00:03:29.630
So the Carbon framework,
fully 64-bit clean,

00:03:29.700 --> 00:03:32.140
allows you to generate
universal binaries,

00:03:32.320 --> 00:03:36.100
64-bit on both PowerPC and Intel,
so 4x universal.

00:03:36.100 --> 00:03:40.180
Again, Quick Draw is no longer
there for 64-bit apps.

00:03:40.250 --> 00:03:44.370
And as an example,
we mentioned the name cursor

00:03:44.370 --> 00:03:48.900
support was reliant on Quick Draw,
so this also goes away.

00:03:48.900 --> 00:03:50.900
And the solution is to use NSCursor.

00:03:50.900 --> 00:03:53.340
We have a sample also available.

00:03:55.160 --> 00:03:58.200
So some of the advantages
of using Carbon.

00:03:58.200 --> 00:04:02.420
Well, the Carbon framework is both a
mature and a modern framework.

00:04:02.420 --> 00:04:05.200
I mean, its legacy dates back
all the way back to 1984,

00:04:05.200 --> 00:04:05.930
but it's modern.

00:04:06.000 --> 00:04:07.980
I mean, we use HIViews.

00:04:07.980 --> 00:04:10.290
We have alpha blending.

00:04:10.310 --> 00:04:11.880
You can see things like iTunes.

00:04:11.880 --> 00:04:14.610
This is a great modern
Carbon application.

00:04:14.980 --> 00:04:15.900
and others.

00:04:15.900 --> 00:04:18.440
It's a procedural based API,
so for those of you that are

00:04:18.550 --> 00:04:21.580
more comfortable with procedural
based APIs or for instance maybe

00:04:21.580 --> 00:04:24.400
bringing code over from Linux,
Unix, Windows,

00:04:24.400 --> 00:04:25.900
it may map a little bit better.

00:04:26.010 --> 00:04:29.260
And also it allows you to control
the flow a little bit better.

00:04:29.530 --> 00:04:37.100
What I mean by that is it gives
you finer granularity into the

00:04:37.100 --> 00:04:37.100
operating system or into the API set.

00:04:39.330 --> 00:04:42.960
But because Carbon isn't
a monolithic framework,

00:04:42.980 --> 00:04:45.460
some of the burden is placed on you,
a little bit more of the burden.

00:04:45.490 --> 00:04:47.130
And the burden means that
you have to keep up to date.

00:04:47.140 --> 00:04:49.230
You have to make sure that you
keep your Carbon applications

00:04:49.510 --> 00:04:51.650
up to date and modern.

00:04:52.270 --> 00:04:54.360
So this means that you have to
make sure that your application

00:04:54.360 --> 00:04:56.140
is universal and runs correctly.

00:04:56.170 --> 00:05:01.220
Be adopting things like HIViews,
CFData types, Quartz, composited windows.

00:05:01.230 --> 00:05:02.530
HIViews are a great example.

00:05:02.630 --> 00:05:06.160
Although we announced that we can
now embed NSViews inside of HIViews,

00:05:06.170 --> 00:05:10.020
HIViews are a modern way
of presenting your views.

00:05:10.020 --> 00:05:15.490
They date back to, I believe,
10.1-- 10.2, I'm sorry.

00:05:16.170 --> 00:05:17.940
and the benefits of keeping up.

00:05:17.940 --> 00:05:20.500
You get your resolution independent,
64-bit apps,

00:05:20.540 --> 00:05:23.060
the ability to do things like
embed NS views and HIViews.

00:05:23.110 --> 00:05:25.860
Once you start to lag on this stuff,
you start to be presented with a

00:05:25.900 --> 00:05:30.980
large mountain of items that you have
to try and conquer to go over this.

00:05:31.020 --> 00:05:32.380
As you keep up with
our modern technology,

00:05:32.380 --> 00:05:34.650
it's a lot easier to move forward.

00:05:34.900 --> 00:05:37.300
So by embedding things
like NSViews and HIViews,

00:05:37.300 --> 00:05:40.180
you get some of those
fancy views in Cocoa,

00:05:40.180 --> 00:05:44.340
like the-- I forget what this
one's called-- the level control,

00:05:44.340 --> 00:05:44.920
I believe.

00:05:45.000 --> 00:05:49.100
But not only that, we allow you to embed
complete NSView hierarchies.

00:05:49.150 --> 00:05:50.680
So here I have a complete
NSView hierarchy,

00:05:50.680 --> 00:05:53.750
the WebKit view,
along with some binding enabled

00:05:53.750 --> 00:05:57.800
buttons and URL text field here.

00:05:57.960 --> 00:06:01.110
So let's take a look at what
exactly the steps are to

00:06:01.110 --> 00:06:04.170
embed an NSView in an HIView.

00:06:06.150 --> 00:06:09.440
The first step is to create a
custom HIView in Interface Builder.

00:06:09.440 --> 00:06:15.400
You simply drag over your HIView and give
it a class ID of com.apple.hicocoview.

00:06:15.410 --> 00:06:17.100
That's step one.

00:06:17.100 --> 00:06:20.280
Step two, look through hicocoview.h.

00:06:20.280 --> 00:06:22.990
You'll really need to get
a reference to your HIView,

00:06:23.100 --> 00:06:27.790
a reference to your NSView,
and then call HIView setView.

00:06:28.120 --> 00:06:30.440
And now, step three.

00:06:30.450 --> 00:06:31.420
There is no step three.

00:06:31.430 --> 00:06:32.020
That's it.

00:06:32.020 --> 00:06:33.560
That's how easy it is.

00:06:33.560 --> 00:06:34.460
We have a great sample.

00:06:34.480 --> 00:06:39.220
It's associated on the ADC site
associated with this session,

00:06:39.220 --> 00:06:39.720
140.

00:06:39.720 --> 00:06:42.820
And you can download the
HIView NSView sample,

00:06:42.820 --> 00:06:48.920
which will show explicitly how to
embed an NSView hierarchy in an HIView.

00:06:49.980 --> 00:06:54.970
Now I'd like to quickly go over a quick
demo describing how to add a Cocoa window

00:06:55.180 --> 00:06:56.440
to a Carbon-based application.

00:06:56.560 --> 00:06:58.910
I'll just spend a couple
minutes showing you.

00:07:04.190 --> 00:07:08.660
So typically what we'll do is
first lay out our Carbon window.

00:07:08.700 --> 00:07:10.100
Here we go.

00:07:10.120 --> 00:07:12.560
Now what I've done here is laid
out our Cocoa-based window.

00:07:12.710 --> 00:07:14.000
We have our web view.

00:07:14.040 --> 00:07:17.180
We've linked up these
buttons to our web view.

00:07:17.260 --> 00:07:20.290
If I bring up the inspector open.

00:07:21.300 --> 00:07:27.020
We can even see here that we have
some bindings associated with it.

00:07:28.030 --> 00:07:32.020
So here we'll say that the URL bar
will automatically update to have the

00:07:32.110 --> 00:07:35.890
mainframe's URL as well as the window.

00:07:36.600 --> 00:07:55.000
[Transcript missing]

00:07:55.220 --> 00:07:57.220
We'll get a browse command.

00:07:57.220 --> 00:07:59.320
And from the browse command,
we'll go ahead and call

00:07:59.320 --> 00:08:00.600
display Cocoa web window.

00:08:00.600 --> 00:08:02.970
Let's take a look at that function there.

00:08:03.680 --> 00:08:04.100
Here it is.

00:08:04.100 --> 00:08:05.260
It's really quite simple.

00:08:05.290 --> 00:08:09.300
We'll go ahead and allocate
our web window controller,

00:08:09.400 --> 00:08:12.090
show the window,
and then load the request.

00:08:12.410 --> 00:08:15.990
This is all the Objective-C code
we need right here.

00:08:16.070 --> 00:08:18.520
We specify the name of our nib here.

00:08:18.550 --> 00:08:21.920
This is our getter function
to return back our web view.

00:08:21.960 --> 00:08:23.300
And this is how we display it.

00:08:23.300 --> 00:08:25.750
Now let's go ahead and run this
sample and see what it looks like.

00:08:25.760 --> 00:08:29.440
Hope it works.

00:08:29.450 --> 00:08:30.620
I didn't make any changes.

00:08:33.600 --> 00:08:37.390
Let's give it a second here.

00:08:43.650 --> 00:08:45.010
See what the OpenGL guys left me with.

00:08:45.020 --> 00:08:45.700
Here we go.

00:08:45.760 --> 00:08:47.320
So here we have a Carbon-based window.

00:08:47.320 --> 00:08:49.440
We'll go ahead and enter in a URL here.

00:08:49.440 --> 00:08:51.390
When we click the OK button, up we go.

00:08:51.540 --> 00:08:53.620
Full-featured little web browser.

00:08:53.660 --> 00:08:56.560
So in this sample associated
with this session,

00:08:56.660 --> 00:08:58.840
we have a step-by-step tutorial
of exactly how to do this.

00:08:58.840 --> 00:08:59.380
The code is right here.

00:08:59.480 --> 00:09:00.620
It's actually quite simple.

00:09:00.620 --> 00:09:01.690
So that's it for me.

00:09:01.700 --> 00:09:03.900
At this time, I'd like to bring
Larry Coope up on stage.

00:09:03.960 --> 00:09:05.670
Go back to slides.

00:09:09.900 --> 00:09:13.200
This is the button.

00:09:13.220 --> 00:09:15.950
Thanks, Deric.

00:09:15.970 --> 00:09:16.720
My name's Larry Coope.

00:09:16.720 --> 00:09:20.780
I work in the SWAT team doing
custom code support inside DTS.

00:09:20.800 --> 00:09:22.700
And I just want to take a couple minutes.

00:09:22.730 --> 00:09:26.210
I do a lot of development
with third party developers.

00:09:26.260 --> 00:09:29.400
And Deric asked me to come up and
just talk for 10 minutes about best

00:09:29.400 --> 00:09:34.160
practices using our tools and getting
the most out of your code in a

00:09:34.260 --> 00:09:37.350
parallel cross-platform environment.

00:09:39.100 --> 00:09:42.700
Okay, I just want to talk a little
bit about Xcode and our tools.

00:09:42.840 --> 00:09:45.160
Like Deric said, stay current.

00:09:45.270 --> 00:09:47.860
In the lab already this week,
I've seen several people come in,

00:09:47.860 --> 00:09:49.290
they're like, we're on Xcode 1.5.

00:09:49.350 --> 00:09:51.720
And you're like,
you should be moving as fast as

00:09:51.890 --> 00:09:53.530
you can into the Xcode tools.

00:09:53.540 --> 00:09:54.840
There's a lot of changes happening.

00:09:54.840 --> 00:09:59.680
You know, universal binary,
four-way binaries, Intel transition.

00:09:59.680 --> 00:10:05.640
Even if you have to support older OSs,
Panther, Tiger, obviously,

00:10:05.760 --> 00:10:08.980
it's important to stay
on the current tools.

00:10:09.020 --> 00:10:15.090
Okay, the documentation alone is
going to give you a big lift.

00:10:15.510 --> 00:10:17.380
Xcode, use it.

00:10:17.380 --> 00:10:21.520
Xcode is now a really flexible,
powerful development environment.

00:10:21.520 --> 00:10:23.650
In the past, it's had its issues.

00:10:23.690 --> 00:10:27.300
And so it's a nice EDE.

00:10:27.300 --> 00:10:28.540
It's flexible.

00:10:28.540 --> 00:10:33.220
Xcode knows about structured
OS components like frameworks.

00:10:33.280 --> 00:10:38.040
For people who are used to building flat
DLLs and DILIBs on Linux and Windows,

00:10:38.470 --> 00:10:41.520
structured OS components are really,
really useful.

00:10:41.520 --> 00:10:45.380
So if you're not doing that,
you really need to do that.

00:10:46.760 --> 00:10:50.070
It's well suited for both
individuals and groups.

00:10:50.130 --> 00:10:52.940
We have a lot of people who
have their own Make systems.

00:10:53.010 --> 00:10:57.130
And they say, how do I do distributed
builds like Xcode does?

00:10:57.270 --> 00:10:59.570
Use Xcode.

00:11:00.520 --> 00:11:03.560
Xcode build, the command line tool,
integrates well with an

00:11:03.560 --> 00:11:05.070
existing Makefile system.

00:11:05.160 --> 00:11:08.520
No matter how complicated it can be,
Xcode build works really well.

00:11:08.620 --> 00:11:12.920
And the projects allow your engineers
to go directly into IDE mode and

00:11:12.920 --> 00:11:14.980
get the most out of the tool.

00:11:15.170 --> 00:11:17.920
OK,
so one of the things that's new to Xcode,

00:11:17.920 --> 00:11:19.940
or relatively new,
I'm just going to touch on,

00:11:19.940 --> 00:11:21.040
is Xcode configs.

00:11:21.040 --> 00:11:27.410
If you're not using config files,
I cannot stress how much

00:11:27.420 --> 00:11:30.990
you should be using these,
especially if you have multiple projects,

00:11:31.070 --> 00:11:31.960
multiple targets.

00:11:32.110 --> 00:11:36.470
You're building applications, frameworks,
all these components.

00:11:36.620 --> 00:11:37.860
What are they?

00:11:37.920 --> 00:11:42.050
They're text files that
hold Xcode settings.

00:11:42.240 --> 00:11:43.990
They're not strictly GCC settings.

00:11:44.110 --> 00:11:47.040
These are Xcode settings
that get translated into the

00:11:47.040 --> 00:11:50.080
appropriate build settings.

00:11:50.130 --> 00:11:55.240
You include them in your project just
like any other text file or source file.

00:11:55.260 --> 00:11:59.410
It's got an XC config extension,
which Xcode recognizes.

00:11:59.500 --> 00:12:01.210
You can drag and drop your
settings from your build

00:12:01.210 --> 00:12:04.050
settings window into-- thank you.

00:12:04.070 --> 00:12:07.950
Thanks, Deric-- into your config files.

00:12:08.120 --> 00:12:10.180
And they're hierarchical.

00:12:10.580 --> 00:12:12.760
One config can include another.

00:12:13.060 --> 00:12:16.300
So you can get quite
complex build rules set up.

00:12:16.440 --> 00:12:20.340
They're independent of any
individual or specific project.

00:12:20.340 --> 00:12:23.500
Unify common project settings, of course.

00:12:23.500 --> 00:12:29.000
Guarantees that your projects
build all the same all the time.

00:12:29.000 --> 00:12:30.820
Check them into your source code control.

00:12:30.820 --> 00:12:32.650
OK?

00:12:33.570 --> 00:12:35.400
So I wanted to do a brief demo.

00:12:35.400 --> 00:12:40.750
So like Deric,
I'm gonna quit what you're doing.

00:12:40.800 --> 00:12:42.060
I'm just gonna open a new project.

00:12:42.060 --> 00:12:47.220
Carbon application.

00:12:47.350 --> 00:12:49.010
Next.

00:12:52.180 --> 00:12:57.250
Now typically, you know in Xcode that
targets inherit from projects.

00:12:57.400 --> 00:12:58.780
You go into Build Settings.

00:12:58.780 --> 00:13:03.490
Let's look at my Customize Settings.

00:13:03.610 --> 00:13:05.060
There's just a couple.

00:13:05.120 --> 00:13:05.520
But you know what?

00:13:05.640 --> 00:13:09.520
We're going to use configs,
so we're going to get rid of those.

00:13:09.870 --> 00:13:11.160
So this is the point of configs.

00:13:11.310 --> 00:13:13.850
They simplify your life.

00:13:13.990 --> 00:13:16.680
You go into Target,
and often-- and this is where

00:13:16.680 --> 00:13:21.400
people coming from Windows and other
IDEs get a little bit flustered,

00:13:21.400 --> 00:13:23.330
because all of a sudden,
you see these are just

00:13:23.370 --> 00:13:24.710
my customized settings.

00:13:24.910 --> 00:13:27.900
There's a lot of settings in Xcode.

00:13:28.020 --> 00:13:32.810
So what I'm going to do now is just
drag in-- I have some canned config

00:13:32.910 --> 00:13:37.230
files here that are on the attendee
website that you guys can download.

00:13:37.300 --> 00:13:40.860
If you do C and C++ development,
these I find to be a set of

00:13:40.860 --> 00:13:44.440
rules that I've developed with
other third party developers,

00:13:44.500 --> 00:13:47.410
and they're using these
exact config files.

00:13:47.540 --> 00:13:49.180
So I add those.

00:13:49.290 --> 00:13:50.700
And now you'll see in my project.

00:13:50.700 --> 00:13:52.060
project.

00:13:52.280 --> 00:13:54.660
Based on pop-up is available.

00:13:54.920 --> 00:14:01.670
And I'm going to say I want to
base my debug config on my debug

00:14:01.850 --> 00:14:03.620
config file and the release.

00:14:03.620 --> 00:14:06.750
I want to base on the release.

00:14:07.080 --> 00:14:09.760
And then I can go to my target here.

00:14:09.780 --> 00:14:15.130
And I can start deleting all these,
except the things that are

00:14:15.130 --> 00:14:17.540
pertinent to the actual build.

00:14:20.820 --> 00:14:25.080
So now the idea is I can really see
very quickly what is pertinent to

00:14:25.140 --> 00:14:31.100
this particular target because all my
settings are coming from my config file.

00:14:31.120 --> 00:14:34.390
And let me just show you that
here's the debug settings.

00:14:34.510 --> 00:14:37.720
You notice the first thing at the top,
Include, Config Master.

00:14:37.760 --> 00:14:39.580
That's my master config.

00:14:39.820 --> 00:14:42.060
We talked about their hierarchical.

00:14:42.120 --> 00:14:43.960
One can include another.

00:14:44.010 --> 00:14:46.360
So if I want to look at that.

00:14:51.260 --> 00:14:54.130
And here, this is the master.

00:14:54.140 --> 00:14:56.300
I'm saying I want to start
with a native architecture,

00:14:56.380 --> 00:14:58.230
SDK root, all these settings.

00:14:58.330 --> 00:15:00.400
And like I said,
you can drag and drop from

00:15:00.400 --> 00:15:06.040
your build settings window,
if you'd like to see how that works.

00:15:09.700 --> 00:15:18.000
[Transcript missing]

00:15:18.180 --> 00:15:22.160
And the point is, like I said,
now all my projects,

00:15:22.160 --> 00:15:24.850
whether it's static libraries,
dynamic libraries, frameworks, bundles,

00:15:24.860 --> 00:15:28.100
are going to build identically
based on my settings.

00:15:28.820 --> 00:15:31.660
Okay.

00:15:32.130 --> 00:15:34.800
Back to slides.

00:15:38.620 --> 00:15:40.390
Okay,
I want to talk a little bit about system

00:15:40.440 --> 00:15:43.840
standards and development best practices.

00:15:43.920 --> 00:15:45.630
People, you know,
you really need to adopt

00:15:45.690 --> 00:15:47.900
standards under OS X.

00:15:47.980 --> 00:15:49.800
Things like bundles and frameworks,
you know,

00:15:49.860 --> 00:15:53.050
people who are building straight,
flat die libs,

00:15:53.050 --> 00:15:55.030
you need to use install names.

00:15:55.100 --> 00:15:57.090
And if you're not sure
what I'm talking about,

00:15:57.100 --> 00:15:59.730
you can come to the lab tomorrow
morning and we can talk about it.

00:15:59.740 --> 00:16:06.120
But these structured OS components are
really -- they're there for a reason,

00:16:06.120 --> 00:16:09.300
and they're really required now.

00:16:09.300 --> 00:16:13.040
Die libs laying all over the place,
this is generally a bad idea.

00:16:13.050 --> 00:16:16.180
Overriding the DYLD library path.

00:16:16.180 --> 00:16:18.600
People say, oh, I have a collision,
my application crashes.

00:16:18.600 --> 00:16:22.310
You're like, yeah,
that's the point of these things.

00:16:22.800 --> 00:16:29.440
wanted to show this is not a
well-structured Mac application.

00:16:29.440 --> 00:16:30.940
OK?

00:16:30.940 --> 00:16:31.740
I hear some laughing.

00:16:31.820 --> 00:16:35.660
So this is actually--
I've seen this before.

00:16:35.660 --> 00:16:40.060
You guys, it's just a couple extra steps
to actually bundle things,

00:16:40.060 --> 00:16:43.120
your dial-ups up into structured
components frameworks.

00:16:43.120 --> 00:16:45.390
It's not a big deal.

00:16:45.730 --> 00:16:51.240
This really benefits your code factoring
for the whole Model View Controller.

00:16:51.270 --> 00:16:55.000
You're gonna avoid the
Windows DLL hell situation,

00:16:55.030 --> 00:16:57.090
versioning issues.

00:16:57.520 --> 00:16:59.840
High level support,
very high level support for all

00:16:59.970 --> 00:17:01.500
these components in the system.

00:17:01.500 --> 00:17:04.210
You don't have to do any extra work.

00:17:04.480 --> 00:17:07.860
There's a little extra startup
cost getting these things built.

00:17:07.900 --> 00:17:10.280
Very little,
but long-term maintenance is much,

00:17:10.280 --> 00:17:11.950
much easier.

00:17:12.790 --> 00:17:13.670
Owning your code.

00:17:13.780 --> 00:17:15.830
With all the transitions
that are going on,

00:17:15.940 --> 00:17:17.920
it's important that you own your code.

00:17:18.100 --> 00:17:20.270
Your data types.

00:17:20.270 --> 00:17:26.380
This allows you to insulate yourself
from OS changes like 32 to 64 bit.

00:17:26.500 --> 00:17:29.310
By typedefing your own types
and using those everywhere in

00:17:29.310 --> 00:17:33.790
your code instead of using int,
long, unsigned int, allows you to really,

00:17:33.790 --> 00:17:35.440
really make rapid changes.

00:17:35.900 --> 00:17:40.520
I had a bunch of code that
was using my TS32 type.

00:17:40.520 --> 00:17:44.820
I got it to build in 64 bit,
and I had a couple of crashers,

00:17:44.820 --> 00:17:46.690
and I'm like, "Oh,
I changed my type." It built.

00:17:48.280 --> 00:17:50.760
Make these things meaningful.

00:17:50.760 --> 00:17:53.640
I know this is brain dead
to a lot of people here,

00:17:53.640 --> 00:17:56.570
but UN32 is not a pointer.

00:17:56.620 --> 00:18:00.440
So make these types specific.

00:18:00.450 --> 00:18:01.430
Use GCC.

00:18:01.890 --> 00:18:03.780
Shoot for zero warnings.

00:18:03.780 --> 00:18:05.170
I see a lot of code.

00:18:05.480 --> 00:18:08.000
Saw some in the lab, like, warning.

00:18:08.000 --> 00:18:09.700
This expression is always true.

00:18:09.870 --> 00:18:12.070
And they're like, that's just a warning.

00:18:12.090 --> 00:18:15.180
It's like, no, that's a problem.

00:18:15.180 --> 00:18:21.600
So don't assume-- I know you guys who
are doing cross-platform development

00:18:21.710 --> 00:18:24.480
understand this implicitly,
but the compilers don't

00:18:24.480 --> 00:18:25.940
always do the right thing.

00:18:25.940 --> 00:18:31.190
So when you see things about ambiguous
declarations or ambiguous cast,

00:18:31.190 --> 00:18:33.570
resolve it explicitly.

00:18:34.230 --> 00:18:34.750
and others.

00:18:34.800 --> 00:18:35.680
Factor your code.

00:18:35.680 --> 00:18:38.380
We beat everyone up on the
model view controller thing.

00:18:38.400 --> 00:18:42.410
It's really critical for doing
multiplatform development.

00:18:43.580 --> 00:18:46.810
This is what you guys are adding
your value to your products,

00:18:46.990 --> 00:18:49.000
your intellectual property code.

00:18:49.000 --> 00:18:51.150
It's not always the
view that's important.

00:18:51.180 --> 00:18:54.790
That's a critical UI issue,
but what you're bringing

00:18:54.790 --> 00:18:58.140
to your users is your code,
which you want to factor

00:18:58.140 --> 00:18:59.490
out away from the UI.

00:18:59.870 --> 00:19:01.620
OS Factoring.

00:19:01.630 --> 00:19:05.500
You know,
there's no way to get a perfect solution.

00:19:05.520 --> 00:19:08.330
So make it work for your code.

00:19:08.520 --> 00:19:09.700
Abstraction of OS types.

00:19:09.700 --> 00:19:12.400
People say, well,
I have all this Windows code,

00:19:12.700 --> 00:19:15.590
and you can define a window
ref to be an HWIND on the Mac.

00:19:15.710 --> 00:19:16.280
We don't care.

00:19:16.280 --> 00:19:17.980
A lot of people are transitioning.

00:19:17.980 --> 00:19:20.100
They already have a type
for their window types.

00:19:20.100 --> 00:19:22.690
They just change it to NSWindowPointer,
right?

00:19:22.780 --> 00:19:26.500
So it's like moving to Cocoa for
some of their low-level window

00:19:26.500 --> 00:19:29.090
UI elements is pretty trivial.

00:19:31.320 --> 00:19:33.430
Take advantage of system services.

00:19:33.650 --> 00:19:37.640
Use Core Foundation, as Deric said,
and CFStrings.

00:19:37.650 --> 00:19:41.150
I have people struggling with
STL Strings all the time.

00:19:41.340 --> 00:19:47.440
And we write a class that wraps CFString,
wraps C String or STL on other platforms,

00:19:47.610 --> 00:19:50.600
and in two days,
they've eliminated all their

00:19:50.600 --> 00:19:52.710
Unicode issues and things like that.

00:19:53.270 --> 00:19:56.610
Especially,
it lets you be closer to the metal,

00:19:56.640 --> 00:19:58.630
which is what you need.

00:19:59.590 --> 00:20:01.700
Avoid intermediate representations.

00:20:01.700 --> 00:20:05.690
OK, when you're using code on
the Mac and other platforms,

00:20:05.870 --> 00:20:08.040
you know,
I have a lot of vendors like we pass a

00:20:08.040 --> 00:20:10.780
string around as a file representation.

00:20:10.780 --> 00:20:13.880
Like, that's a bad idea.

00:20:13.880 --> 00:20:17.580
So it's better to use FSRefs.

00:20:17.620 --> 00:20:19.840
Delay when you need the path.

00:20:19.880 --> 00:20:23.400
If you want to pass it to a POSIX API,
delay that instantiation

00:20:23.400 --> 00:20:26.440
of that representation to
the last possible minute.

00:20:26.500 --> 00:20:28.960
If you know,
you guys know FSRefs track everything.

00:20:28.960 --> 00:20:31.720
I can move the file and disk
and my FSRef stays valid.

00:20:31.720 --> 00:20:34.140
A path does not stay valid.

00:20:34.140 --> 00:20:37.740
And this applies for CFStrings,
all the core foundation types.

00:20:37.740 --> 00:20:41.920
Avoid or delay intermediate
representations.

00:20:41.920 --> 00:20:43.240
Ask for that representation.

00:20:43.240 --> 00:20:47.460
Like I said, if you need the path,
you need it as a Mac Roman string, fine.

00:20:47.460 --> 00:20:48.700
Ask for it that way.

00:20:48.700 --> 00:20:52.420
Just don't assume how it's going
to be implemented internally.

00:20:52.420 --> 00:20:55.000
You know, I make the joke about,
I don't come up and punch

00:20:55.000 --> 00:20:57.780
you in the stomach and say,
where do you live?

00:20:57.780 --> 00:20:59.740
You know, it's like-- you ask.

00:20:59.750 --> 00:21:00.730
So this is important.

00:21:00.840 --> 00:21:03.480
It's all about data abstraction.

00:21:03.480 --> 00:21:05.100
C++ is really great at this.

00:21:05.100 --> 00:21:10.800
So if you're using C++ already,
you know what I'm talking about.

00:21:10.800 --> 00:21:13.160
That's it.

00:21:13.160 --> 00:21:14.890
Brian, Kurt?

00:21:22.040 --> 00:21:23.800
All right, thank you, Larry.

00:21:23.960 --> 00:21:24.860
So I'm Bryan Prusha.

00:21:24.860 --> 00:21:26.130
I'm on the HIToolbox team.

00:21:26.140 --> 00:21:29.650
I'm going to be bringing up Curt Rothert
in a moment to go through some demos.

00:21:29.660 --> 00:21:33.960
I'm going to go through creating
a custom HIView using HIFramework.

00:21:34.000 --> 00:21:36.390
The first thing I want to say is that
we've heard a lot this week about

00:21:36.390 --> 00:21:42.820
HICocoaView and the ability to add
NSViews to your Carbon control hierarchy.

00:21:43.020 --> 00:21:46.070
And you may be asking yourselves, well,
is Carbon going to be here for very long?

00:21:46.080 --> 00:21:47.720
Why should I worry about HIViews?

00:21:47.860 --> 00:21:51.020
Well, the HICocoaView is Leopard only.

00:21:51.040 --> 00:21:52.380
Leopard isn't here yet.

00:21:52.390 --> 00:21:53.790
HIViews are here now.

00:21:53.910 --> 00:21:56.310
And they are backwards
compatible to Jaguar.

00:21:56.450 --> 00:22:00.700
And they're your first best option if
you're a HIToolbox Carbon developer

00:22:01.180 --> 00:22:04.930
for bringing your application
forward for new features like 64-bit,

00:22:05.150 --> 00:22:08.240
getting the performance
out of compositing windows,

00:22:08.240 --> 00:22:10.550
and resolution independence.

00:22:10.730 --> 00:22:12.500
So now that we know the
importance of HIViews,

00:22:12.500 --> 00:22:14.120
let's get into it.

00:22:16.960 --> 00:22:19.050
So HIFramework is a set of sample code.

00:22:19.240 --> 00:22:21.020
It's available at the attendee website.

00:22:21.040 --> 00:22:24.270
In fact, we're going to be going over
the T-Browser View sample code.

00:22:24.410 --> 00:22:26.340
So if you can go to the
website and pull that down,

00:22:26.340 --> 00:22:30.060
we can get on the hands-on portion
when Curt comes up for a demo.

00:22:30.150 --> 00:22:34.150
But it's a set of C++ style wrappers
around HI toolbox functionality,

00:22:34.180 --> 00:22:36.890
around HI object and HIView specifically.

00:22:37.240 --> 00:22:39.440
And there's a lot of support in
there for simplified event handling.

00:22:39.440 --> 00:22:41.380
If you've been working
with Carbon events,

00:22:41.390 --> 00:22:43.800
they're incredibly flexible,
but they're also based

00:22:43.800 --> 00:22:46.140
on a procedural API,
which makes a little more work to

00:22:46.140 --> 00:22:49.010
get all the parameters in and out,
things like that.

00:22:49.120 --> 00:22:51.240
So HIFramework does a
lot of that work for you.

00:22:51.270 --> 00:22:54.830
And all you have to do in
most cases is override virtual

00:22:54.860 --> 00:22:57.840
methods in your superclass,
and all the parameters are

00:22:57.840 --> 00:22:59.280
handed to you directly.

00:23:01.070 --> 00:23:04.040
So there are a couple of
important pieces to HI Framework.

00:23:04.040 --> 00:23:08.500
T-Object is a wrapper around HI Object,
HI Object Ref.

00:23:08.560 --> 00:23:12.380
T-View is a wrapper around
HIView Ref and its subclasses

00:23:12.380 --> 00:23:15.000
in a C++ style from T-Object.

00:23:15.040 --> 00:23:19.310
T-Carbon Event is a convenience wrapper
around Event Ref for Carbon events.

00:23:19.570 --> 00:23:22.240
And there's a whole suite of--

00:23:22.740 --> 00:23:26.090
Accessors for a tCarbon event that
make it really easy to pull parameters

00:23:26.100 --> 00:23:28.770
out and add parameters to an event.

00:23:29.870 --> 00:23:31.360
So here's what we're going
to be building today,

00:23:31.360 --> 00:23:33.460
T-Image Browser View.

00:23:33.640 --> 00:23:36.720
It allows you to add an array
of images or an array of

00:23:36.790 --> 00:23:38.490
image URLs to your browser.

00:23:38.630 --> 00:23:40.750
There's some browsing
buttons to go back and forth,

00:23:40.760 --> 00:23:43.180
delete button in the
lower right hand there.

00:23:43.270 --> 00:23:46.820
For anybody who was at the State of
the Toolbox session last year,

00:23:46.970 --> 00:23:48.820
you saw a bunch of pictures of our kids.

00:23:48.820 --> 00:23:52.900
And here they are one year
later playing in a G5 box.

00:23:55.150 --> 00:23:58.130
All right, first up, subclass.

00:23:58.180 --> 00:24:02.520
To declare your subclass,
since this is a C++ style,

00:24:02.530 --> 00:24:04.550
just call class TImageBrowserView.

00:24:04.690 --> 00:24:06.960
Make it a public subclass of TView.

00:24:06.990 --> 00:24:08.480
Now, there's a little bit
more to it than that,

00:24:08.550 --> 00:24:12.200
because we're bringing together
the C++ style of subclassing with

00:24:12.280 --> 00:24:15.060
the HIObjectStyle subclassing.

00:24:15.290 --> 00:24:19.800
So we need to tell
HIToolbox about your object,

00:24:20.020 --> 00:24:21.530
register it.

00:24:22.090 --> 00:24:23.880
It's very convenient
to have a creation API.

00:24:24.070 --> 00:24:25.660
It wraps a lot of boilerplate code.

00:24:25.660 --> 00:24:27.700
We'll get into that in a minute.

00:24:28.100 --> 00:24:29.450
You need a construct proc.

00:24:29.610 --> 00:24:34.140
This is something that you pass to
the toolbox during registration.

00:24:34.170 --> 00:24:36.860
And when you're called,
you just need to return an

00:24:36.880 --> 00:24:39.550
instance of your C++ object,
and of course,

00:24:39.680 --> 00:24:41.880
your C++ constructor and destructor.

00:24:44.260 --> 00:24:48.660
So in registration,
we use TView's implementation here.

00:24:48.720 --> 00:24:50.640
It's called TViewRegisterSubclass.

00:24:50.660 --> 00:24:53.300
And we're calling it with
KImageBrowserViewClassID.

00:24:53.300 --> 00:24:57.520
This is just a CFString,
reverse domain name, com.apple.blah,

00:24:57.530 --> 00:24:59.420
blah, blah, whatever.

00:24:59.640 --> 00:25:01.460
And our construct proc.

00:25:01.510 --> 00:25:04.920
So the HIToolbox now
knows about your view.

00:25:05.020 --> 00:25:08.660
So when somebody asks to create a view,
whether procedurally

00:25:09.250 --> 00:25:12.580
through your create method,
or if it's being loaded by

00:25:12.700 --> 00:25:17.780
or instantiated from a nib,
the toolbox can then ask one of

00:25:17.780 --> 00:25:19.720
your objects to be instantiated.

00:25:19.800 --> 00:25:23.540
So this is important to call this early
on in the lifetime of your application,

00:25:23.550 --> 00:25:26.640
whether in main,
during C++ static initialization,

00:25:26.640 --> 00:25:29.360
something like that,
any time before one of your objects

00:25:29.410 --> 00:25:31.170
is going to be instantiated.

00:25:34.670 --> 00:25:38.100
Now,
when your view is loaded out of a nib,

00:25:38.100 --> 00:25:40.350
something like that,
and the toolbox knows it needs

00:25:40.360 --> 00:25:42.930
to instantiate your object,
it's going to call back

00:25:43.020 --> 00:25:46.350
your construct proc,
inside which all you need to do

00:25:46.440 --> 00:25:52.240
is create an instance of your C++
object and pass it the HI object,

00:25:52.240 --> 00:25:56.920
in this case an HIView,
that the toolbox has created for you.

00:25:56.990 --> 00:26:00.290
So the toolbox will then
take your C++ object and the

00:26:00.330 --> 00:26:04.550
HI object ref that it created and
associate them with each other.

00:26:04.600 --> 00:26:05.680
Thank you.

00:26:07.670 --> 00:26:10.540
And here's the convenience
create method I mentioned.

00:26:10.570 --> 00:26:15.040
Our object takes-- or our view takes a
window that it's going to be added to,

00:26:15.220 --> 00:26:19.330
an HIRect representing its bounds,
the origin and size,

00:26:19.410 --> 00:26:22.890
and a CFArray of image
URLs to browse through.

00:26:24.010 --> 00:26:28.940
So if your view doesn't take
any creation parameters,

00:26:28.940 --> 00:26:32.760
initialization parameters,
you can simply call hiobjectcreate with

00:26:32.760 --> 00:26:36.140
your class ID and have your view created.

00:26:36.190 --> 00:26:38.710
In our case, we want to create an
initialization event,

00:26:38.890 --> 00:26:41.120
fill it up with each of those parameters,
and pass that into

00:26:41.140 --> 00:26:42.330
hiobjectcreate as well.

00:26:42.540 --> 00:26:44.420
So it's convenient to be able
to call this creation method

00:26:44.420 --> 00:26:49.690
instead of having to fill out our
initialization event all over our code.

00:26:52.340 --> 00:26:54.660
OK, at this point,
now that we have a subclass,

00:26:54.680 --> 00:26:56.800
we just want to handle events.

00:26:56.800 --> 00:27:02.780
HIFramework and TView handle a
whole series of events for you,

00:27:02.830 --> 00:27:08.170
pull out the parameters,
and then call your C++ methods.

00:27:08.820 --> 00:27:10.850
Now for any of the events
that are not wrapped,

00:27:10.930 --> 00:27:15.600
and it's impossible to wrap all events
automatically because you have many

00:27:15.600 --> 00:27:18.100
of your own custom Carbon events.

00:27:18.510 --> 00:27:21.920
All the events are routed
through TView Handle Event first.

00:27:22.190 --> 00:27:25.350
So if you need to get first crack
at an event before it gets processed

00:27:25.670 --> 00:27:30.960
or handle it in a custom way,
your Handle Event method

00:27:30.960 --> 00:27:33.730
will be sent a tCarbon event,
and you can use all those

00:27:33.730 --> 00:27:34.800
convenience accessors.

00:27:34.800 --> 00:27:38.860
So it's still even easier than
dealing with a normal event ref.

00:27:38.910 --> 00:27:42.700
But make sure when you're done
doing your processing that you call

00:27:42.700 --> 00:27:45.030
back into TView's Handle Event.

00:27:45.280 --> 00:27:47.280
Go call back up to your superclass.

00:27:47.280 --> 00:27:52.310
Then it can process and send all those
events through the C++ structure.

00:27:53.960 --> 00:27:56.150
All right,
we have a view that is kind of the

00:27:56.150 --> 00:27:57.100
most basic view you could have.

00:27:57.100 --> 00:27:58.040
It doesn't really do a whole lot.

00:27:58.170 --> 00:28:00.100
So let's talk about drawing.

00:28:00.120 --> 00:28:04.290
Modern Carbon applications,
their drawing is based on an invalidation

00:28:04.290 --> 00:28:06.100
model with compositing windows.

00:28:06.100 --> 00:28:10.100
You want to set the K window
compositing attribute on your window.

00:28:10.100 --> 00:28:11.220
You can do this in IB in your window.

00:28:11.220 --> 00:28:16.440
Anytime that you want to make a
change to the model behind your view,

00:28:16.440 --> 00:28:19.550
in this case, for instance,
let's say an image is deleted,

00:28:19.620 --> 00:28:22.010
we'll note that in our model
and invalidate our view

00:28:22.410 --> 00:28:24.240
instead of drawing immediately.

00:28:24.680 --> 00:28:30.440
So we could delete an image
and add another image,

00:28:30.440 --> 00:28:32.520
do a whole series of
things behind the scenes,

00:28:32.790 --> 00:28:33.770
invalidate each time.

00:28:33.770 --> 00:28:37.420
The toolbox will coalesce those
invalidations and only send the

00:28:37.420 --> 00:28:41.670
draw method to your view when
it's really necessary to draw.

00:28:41.680 --> 00:28:43.260
So this is a huge performance win.

00:28:45.250 --> 00:28:50.240
There are a couple of convenience
APIs here for auto-invalidation.

00:28:50.240 --> 00:28:53.150
They have changed auto-invalidate flags,
and you can have your view be

00:28:53.150 --> 00:28:57.510
automatically invalidated for activates,
deactivates, and so on.

00:28:58.460 --> 00:29:02.380
So when the toolbox then decides
that your view needs to draw,

00:29:02.420 --> 00:29:05.780
all you need to do is override
TView's draw method and handle

00:29:05.780 --> 00:29:06.670
all your drawing in one place.

00:29:06.720 --> 00:29:07.650
It'll be handed a context.

00:29:07.740 --> 00:29:11.390
You can use CG, completely modern,
high DPI savvy.

00:29:11.890 --> 00:29:14.800
and the rest of the team.

00:29:14.870 --> 00:29:17.550
Now I'd like to bring up Curt and
go through each of those steps

00:29:17.880 --> 00:29:18.800
right in front of your eyes.

00:29:18.800 --> 00:29:25.430
Thanks Bryan.

00:29:32.500 --> 00:29:36.360
So first off,
I'm going to bring up my demo monkey.

00:29:36.440 --> 00:29:42.800
He's my assistant because I don't want
to be typing all of this code on my own.

00:29:46.100 --> 00:29:48.570
Now as Bryan alluded to,
the view that we're going to be

00:29:48.590 --> 00:29:50.590
creating is this image browser view.

00:29:50.800 --> 00:29:54.590
And it will just show what the target is,
what we're aiming for

00:29:55.080 --> 00:29:56.420
with this particular view.

00:29:56.600 --> 00:30:01.400
So this is just bringing up the sample
that's in the available sample code.

00:30:01.400 --> 00:30:06.130
You can see the image browser
view is this image in the window.

00:30:06.400 --> 00:30:10.400
It also has various parts,
so you can navigate between the images.

00:30:10.400 --> 00:30:14.800
So again, this view has an array of
paths to different images.

00:30:14.800 --> 00:30:19.230
And then it has an index of which
element in that array it's going

00:30:19.230 --> 00:30:20.800
to be drawing at a particular time.

00:30:20.800 --> 00:30:23.770
So you can use these different parts to
navigate between the different images.

00:30:25.550 --> 00:30:30.250
And this X is also allows you to
delete an image from the list.

00:30:30.390 --> 00:30:33.450
So we have a lot to do,
so let's get into actually

00:30:33.450 --> 00:30:34.930
implementing this.

00:30:39.500 --> 00:30:44.260
I'm just going to start
Xcode from scratch.

00:30:44.260 --> 00:30:46.660
Eric, you opened too much.

00:31:02.580 --> 00:31:07.030
So first off, we need to launch Xcode,
and we'll create a new

00:31:07.030 --> 00:31:08.740
Carbon application.

00:31:08.740 --> 00:31:13.360
So create a new project,
choose Carbon application,

00:31:13.360 --> 00:31:15.610
and we'll call this

00:31:16.100 --> 00:31:30.000
[Transcript missing]

00:31:33.240 --> 00:31:34.940
And now we're ready to go.

00:31:34.940 --> 00:31:38.790
So this is just using the normal
template of the Carbon application.

00:31:38.920 --> 00:31:41.170
But since we're going to be
using the HIFramework sample

00:31:41.220 --> 00:31:43.860
code to do our subclassing,
we need to make sure that we add

00:31:43.860 --> 00:31:45.600
that to this project as well.

00:31:45.600 --> 00:31:49.240
So let's go open our
sources and add HIFramework,

00:31:49.250 --> 00:31:53.100
which I have here on disk,
to the project.

00:31:57.170 --> 00:31:59.540
So once the HIV framework
is added to the project,

00:31:59.540 --> 00:32:02.420
we're ready to go and start subclassing.

00:32:02.430 --> 00:32:07.170
So next,
we'll create the image browser view

00:32:07.300 --> 00:32:10.050
implementation and header file.

00:32:10.070 --> 00:32:13.520
We'll choose to open a new C++ file.

00:32:13.520 --> 00:32:19.810
We'll call this the image
browser view and get going.

00:32:22.860 --> 00:32:25.840
Can you in the back see this,
read this okay?

00:32:25.840 --> 00:32:29.260
Should I bump up the font size?

00:32:30.920 --> 00:32:32.260
I'll just stick with it for now.

00:32:32.360 --> 00:32:36.400
If there's a yelling or whatnot,
I'll just try to bump up the size.

00:32:37.390 --> 00:32:40.230
Since we're going to be
subclassing from TView,

00:32:40.230 --> 00:32:43.540
we first need to include
a reference to TView.

00:32:43.650 --> 00:32:46.940
Then, as Bryan mentioned,
there needs to be a unique class ID,

00:32:46.940 --> 00:32:50.300
which is a string which
uniquely identifies your class.

00:32:50.450 --> 00:32:52.100
So we'll define that here.

00:32:52.220 --> 00:32:54.620
Of course, it's just going to be the
reverse DNS name scheme.

00:32:54.620 --> 00:32:56.770
So in this example,
we're just going to use

00:32:56.820 --> 00:32:59.780
com.appleSample.imageBrowserView.

00:32:59.810 --> 00:33:05.130
And then we go about
declaring our Views subclass.

00:33:06.470 --> 00:33:08.370
Currently we're just
subclassing from TView.

00:33:08.410 --> 00:33:10.900
And the member variables here,
this is the image.

00:33:10.900 --> 00:33:13.470
And this just contains an array.

00:33:13.560 --> 00:33:16.990
It is an array of
URLs to different images.

00:33:17.050 --> 00:33:19.510
And this is the index into the array.

00:33:20.660 --> 00:33:24.280
There's a few things required by TView,
certain methods that we

00:33:24.280 --> 00:33:26.000
need to have in our class.

00:33:26.000 --> 00:33:28.410
So first off,
we're going to implement the

00:33:28.480 --> 00:33:32.180
Construct and Destructor,
the Constructor and Destructor.

00:33:32.180 --> 00:33:34.140
And also if you're to
look in the TView header,

00:33:34.140 --> 00:33:40.940
there is one pure virtual function that
needs to be implemented by your subclass,

00:33:41.000 --> 00:33:45.450
and that's the getKind method.

00:33:45.470 --> 00:33:48.780
So let's go to the implementation.

00:33:54.400 --> 00:33:56.080
We'll add our constructor and destructor.

00:33:56.260 --> 00:33:59.290
So here, we're basically doing nothing
at this point other than

00:33:59.350 --> 00:34:02.500
initializing our member variables.

00:34:02.500 --> 00:34:05.500
The constructor is defined to
have an HIView ref passed in.

00:34:05.500 --> 00:34:08.690
We just passed that on to the superclass.

00:34:08.820 --> 00:34:09.660
Then we have the destructor.

00:34:09.660 --> 00:34:14.260
And since we contain an array of images,
if that array is in existence,

00:34:14.260 --> 00:34:17.910
we want to make sure that we release
it correctly using CF Release.

00:34:19.090 --> 00:34:22.760
Next, we implement the getKind method.

00:34:22.760 --> 00:34:28.590
This just returns a unique control kind,
which identifies your view as well.

00:34:32.140 --> 00:34:37.110
So those are the methods that are
required by the TView subclassing.

00:34:37.300 --> 00:34:39.670
We still need to make sure that
our view is registered with the

00:34:39.680 --> 00:34:41.820
HIObject registration mechanism.

00:34:41.850 --> 00:34:44.880
And as Bryan mentioned,
you need to register by

00:34:44.950 --> 00:34:47.120
passing in a construction proc.

00:34:47.240 --> 00:34:50.830
Now, since we're using a
C++ subclassing scheme,

00:34:50.840 --> 00:34:54.440
we'll have that construct proc just
be a class method for this class.

00:34:54.450 --> 00:34:57.590
And it will just be purely
a class factory method.

00:35:01.610 --> 00:35:02.610
So this is the constructor.

00:35:02.660 --> 00:35:08.280
The signature is defined in tObject.h,
because this is going to be passed into

00:35:08.280 --> 00:35:11.510
the tViews register subclass method.

00:35:13.960 --> 00:35:17.980
and we'll go implement that
in the implementation file.

00:35:18.010 --> 00:35:20.240
And since it's just a
simple class factory method,

00:35:20.260 --> 00:35:23.680
all it does is creates an instance
of your class and returns it

00:35:23.680 --> 00:35:26.310
out as the out object parameter.

00:35:27.830 --> 00:35:29.040
This is only half the story, of course.

00:35:29.040 --> 00:35:31.380
This is the factory method
to create an instance,

00:35:31.380 --> 00:35:35.770
but we haven't yet registered with
the HIObject registration mechanism.

00:35:35.870 --> 00:35:42.290
So we'll do that by providing
a register class method.

00:35:42.770 --> 00:35:45.460
This will need to be called outside
of the existence of your view,

00:35:45.460 --> 00:35:48.780
usually, as Bryan mentioned,
in the beginning of your application,

00:35:48.780 --> 00:35:53.980
at launch, startup, initialization time,
something like that.

00:35:54.010 --> 00:35:56.710
Let's go back to the implementation.

00:35:59.090 --> 00:36:03.520
And this, quite simply,
just calls the TView registration method,

00:36:03.580 --> 00:36:06.820
passing the class ID, which is the unique
identifier for this class,

00:36:06.820 --> 00:36:09.870
and the construct proc,
which we just defined up here.

00:36:10.790 --> 00:36:14.160
So that takes care of registering
your view with the HI Object system

00:36:14.160 --> 00:36:16.880
and construction of your view.

00:36:18.120 --> 00:36:21.790
What HI Object will do after an
instance of your class is created

00:36:22.140 --> 00:36:27.060
is it will send that initialization
Carbon event because what you would call,

00:36:27.060 --> 00:36:30.670
the client would call HI Object create,
passing an initialization Carbon event,

00:36:30.670 --> 00:36:34.820
which you can optionally specify
what Carbon events you may

00:36:34.960 --> 00:36:37.510
look for during initialization.

00:36:37.760 --> 00:36:41.860
So what we'll do here is we'll
specify that this view will want

00:36:41.980 --> 00:36:46.910
to get out or extract from that
initialization event a path to an image,

00:36:46.940 --> 00:36:49.690
and that's a good way of
initializing this view to have

00:36:49.690 --> 00:36:50.860
some type of data initially.

00:36:50.860 --> 00:36:57.180
So we'll just provide a
Carbon event parameter type,

00:36:57.240 --> 00:36:58.130
and we define that.

00:36:58.200 --> 00:37:02.860
This is just application defined
as the four character code IMAG.

00:37:03.470 --> 00:37:07.280
are defining that the value for
that parameter will be a CFString,

00:37:07.280 --> 00:37:09.780
and it will represent a
path to an image on disk,

00:37:09.850 --> 00:37:11.390
for example.

00:37:13.000 --> 00:37:17.650
Now since our view is already currently
registered with the HIVobject mechanism,

00:37:17.650 --> 00:37:22.670
all we need to do is start overriding the
methods in TView that we want to handle.

00:37:22.740 --> 00:37:25.940
So for example,
when we want to handle initialization,

00:37:25.950 --> 00:37:31.070
let's just go ahead and
override the initialize method.

00:37:33.660 --> 00:37:40.120
Now what we'll be doing there is in the
implementation is this section of code.

00:37:40.140 --> 00:37:41.860
Basically, this is an appropriate place.

00:37:41.860 --> 00:37:44.770
If you didn't do it in your constructor
by initializing your member fields,

00:37:44.780 --> 00:37:46.030
you can do that here.

00:37:46.130 --> 00:37:51.480
This is a good place to go ahead
and initialize your index to be 0.

00:37:51.480 --> 00:37:55.830
The URL array will just create
a mutable instance of it here.

00:37:56.490 --> 00:37:59.520
and optionally extract
the event parameters,

00:37:59.520 --> 00:38:03.880
which we've defined in the header,
from that initialization event.

00:38:03.910 --> 00:38:08.040
So we defined the event parameter
to be an image URL of a CFString.

00:38:08.060 --> 00:38:12.310
If that exists,
we go ahead and create a URL ref

00:38:12.320 --> 00:38:14.340
that represents that image.

00:38:14.400 --> 00:38:19.180
We add it to our image URLs array,
and then we move on.

00:38:19.420 --> 00:38:21.750
This is also a good place to
change features of the HIView.

00:38:21.850 --> 00:38:25.360
For example,
this view we know is going to be opaque.

00:38:25.360 --> 00:38:26.480
And this is an optimization.

00:38:26.480 --> 00:38:32.220
You're telling the toolbox that it's not
required to draw the views behind it,

00:38:32.220 --> 00:38:34.280
because your view is going
to be completely opaque.

00:38:34.300 --> 00:38:36.670
So we're going to do that here.

00:38:37.180 --> 00:38:41.130
And we're also going to call TView's
change autoinvalidation flags so that

00:38:41.200 --> 00:38:48.610
it will autoinvalidate when the enable
or activation state of our view changes.

00:38:49.130 --> 00:38:50.760
So now we've taken
care of initialization,

00:38:50.820 --> 00:38:54.600
but the view doesn't draw
anything at this point yet.

00:38:55.970 --> 00:39:00.490
So we'll override the draw method.

00:39:00.570 --> 00:39:05.060
Now this is just overriding the
draw method that's in TView already.

00:39:05.120 --> 00:39:07.450
So go back to implementation.

00:39:07.630 --> 00:39:10.980
Drawing is going to
require some constants,

00:39:11.020 --> 00:39:15.820
because we're going to inset the
image from the bounds of that view.

00:39:15.870 --> 00:39:20.220
And I'm also going to include
some initial paddings for

00:39:20.220 --> 00:39:23.660
buttons or parts that we'll be
implementing later on as well.

00:39:23.660 --> 00:39:27.060
I'm just going to put the constants
up at the top of the file.

00:39:31.140 --> 00:39:33.160
And then go ahead and
add the draw method.

00:39:33.160 --> 00:39:39.090
What draw is going to do is
initially get the bounds of our view.

00:39:39.250 --> 00:39:44.080
And this is a method that's in TView,
so we can get the bounds.

00:39:44.230 --> 00:39:48.130
We fill that bounds with just black,
because we want the image to

00:39:48.180 --> 00:39:50.130
be shown on a black background.

00:39:50.380 --> 00:39:54.540
If there is an image to display,
we'll go into this block of code.

00:39:54.590 --> 00:39:59.210
And what this does is it gets
the URL that's in that array

00:40:00.050 --> 00:40:01.170
that we need to display.

00:40:01.420 --> 00:40:04.890
We create a CG image off
of it using this code.

00:40:05.960 --> 00:40:10.400
We're also smart enough that if the
view is either disabled or inactive,

00:40:10.400 --> 00:40:13.870
we'll transform the image so
it has the disabled appearance,

00:40:13.970 --> 00:40:18.180
because we want it to change
its appearance if it's disabled,

00:40:18.240 --> 00:40:20.680
to provide that feedback to the user.

00:40:21.770 --> 00:40:24.660
This next section of the code
just determines how to scale

00:40:24.660 --> 00:40:28.140
the image properly so it fits
within the bounds of that view.

00:40:28.180 --> 00:40:31.300
And then it deals with the centering
and position of that image.

00:40:31.390 --> 00:40:33.720
And finally,
it will draw the CG image using

00:40:33.720 --> 00:40:36.990
the API HIView draw CG image.

00:40:37.980 --> 00:40:40.840
So now we've got our view to a point
where we'll actually display something,

00:40:40.840 --> 00:40:42.230
but we need to test that.

00:40:42.240 --> 00:40:44.860
And so we need to somehow add
that to this test harness,

00:40:44.860 --> 00:40:47.300
which in this case is this application.

00:40:47.300 --> 00:40:52.360
Let's go back to the
project and edit main.

00:40:53.850 --> 00:40:56.520
Like we mentioned earlier,
it's required that you make sure

00:40:56.520 --> 00:41:01.400
that this class is registered before
there's an attempt to instantiate it.

00:41:01.460 --> 00:41:03.230
So we'll go ahead and do that
just at the beginning of May,

00:41:03.250 --> 00:41:06.210
and I have to include a
reference to that file.

00:41:06.540 --> 00:41:09.640
And here at the beginning of the main,
I'm just going to call the class

00:41:10.180 --> 00:41:12.570
method tImageBrowserViewRegisterClass.

00:41:12.620 --> 00:41:15.960
And that will ensure
that it's registered.

00:41:18.100 --> 00:41:21.140
Problem in this one particular case is,
since I created a normal

00:41:21.140 --> 00:41:24.260
Carbon application,
this file is just a main.c file,

00:41:24.270 --> 00:41:26.400
and we're starting to reference C++ code.

00:41:26.500 --> 00:41:29.620
The compiler is going to-- since it's
going to compile with a C compiler,

00:41:29.620 --> 00:41:30.260
it's going to complain.

00:41:30.300 --> 00:41:32.230
So we have one of two options.

00:41:32.240 --> 00:41:35.400
Let's just get info on
this particular file.

00:41:36.000 --> 00:41:40.800
And we can either, in the file type,
change this type to a C++ or just

00:41:40.800 --> 00:41:43.650
give it the appropriate suffix,
which I'm going to do here.

00:41:43.660 --> 00:41:46.440
I'm just changing the suffix to CP,
which will force the

00:41:46.540 --> 00:41:51.000
C++ compiler to be used,
if Xcode comes back for me.

00:41:56.130 --> 00:41:58.400
Now there's two ways to
instantiate this view now.

00:41:58.400 --> 00:42:01.840
You can call hiav.create,
passing in the class identifier,

00:42:01.840 --> 00:42:04.920
which is that string,
on your own programmatically.

00:42:04.920 --> 00:42:10.040
Or you can use Interface Builder
and create an interface there and

00:42:10.040 --> 00:42:13.140
instantiate the view that way when
that window is loaded from the nib.

00:42:13.170 --> 00:42:16.700
Since that's the easiest way
for purposes of this example,

00:42:16.700 --> 00:42:18.780
let's go ahead and do it that way.

00:42:19.180 --> 00:42:20.370
and resources.

00:42:20.650 --> 00:42:22.490
We'll open up our nib.

00:42:22.560 --> 00:42:24.790
This is the initial window.

00:42:25.790 --> 00:42:32.760
If we go over to the controls palette,
in the enhanced controls pane,

00:42:32.760 --> 00:42:36.640
there's this HIView over here.

00:42:36.660 --> 00:42:41.370
Let's drag that to our main window.

00:42:44.410 --> 00:42:47.060
bring up the inspector.

00:42:47.090 --> 00:42:49.740
The HIView inspector has
this place for a class ID.

00:42:49.740 --> 00:42:53.300
This is just that unique string that
we've already identified in our header.

00:42:53.350 --> 00:42:55.020
So let's add that here.

00:42:55.020 --> 00:42:56.000
Let's hit Return.

00:42:56.000 --> 00:42:59.300
You can see that it changes
to have that class ID.

00:42:59.300 --> 00:43:02.160
And then there's this space
also down here in the inspector,

00:43:02.290 --> 00:43:06.410
which allows you to provide
some initialization parameters.

00:43:07.050 --> 00:43:10.890
Let's go ahead and add an
initialization parameter here.

00:43:11.000 --> 00:43:13.130
This is the four character code,
which is that name,

00:43:13.170 --> 00:43:15.240
which in our case is IMAG.

00:43:15.240 --> 00:43:17.750
We define that in our header as well.

00:43:18.380 --> 00:43:22.110
will be a CFString,
and the value will be a Unicode string,

00:43:22.140 --> 00:43:25.190
which represents a path to the image.

00:43:25.570 --> 00:43:28.710
So hopefully this image will be
available in our desktop pictures.

00:43:28.760 --> 00:43:32.530
It's just a flowing something or other.

00:43:33.750 --> 00:43:36.750
Save the nib, go ahead and quit it.

00:43:36.910 --> 00:43:40.670
Let's build and run and see how it works.

00:43:42.100 --> 00:43:43.240
So there's our view.

00:43:43.270 --> 00:43:44.960
Basically,
you've seen how we've gone through

00:43:44.960 --> 00:43:47.660
and registered with HIObject,
where it was able to create

00:43:47.700 --> 00:43:50.340
an instance of our view,
and then once the-- oh,

00:43:50.440 --> 00:43:52.650
and also pull out the
initialization parameter,

00:43:52.650 --> 00:43:54.720
which is this path to this image on disk.

00:43:54.860 --> 00:43:57.600
And then the draw method was invoked,
in which case we just

00:43:57.870 --> 00:44:01.540
drew the background image,
we created the CG image for it,

00:44:01.540 --> 00:44:04.320
and we just blasted it into our space.

00:44:04.320 --> 00:44:06.310
So back to Bryan.

00:44:16.700 --> 00:44:18.520
All right, thank you, Curt.

00:44:18.520 --> 00:44:20.870
All right,
Curt just spent 15 minutes showing

00:44:20.890 --> 00:44:22.840
us how to make a HI image view.

00:44:22.840 --> 00:44:24.200
We already have one of those.

00:44:24.200 --> 00:44:27.510
So let's start adding some
more interesting content.

00:44:28.330 --> 00:44:30.240
Let's talk about user interaction.

00:44:30.300 --> 00:44:33.510
First step of user
interaction is mouse tracking.

00:44:33.950 --> 00:44:37.760
When the user mouses over
your view and clicks,

00:44:37.760 --> 00:44:40.190
the first thing the toolbox
needs to know is what part of

00:44:40.190 --> 00:44:41.960
your view the user clicked in.

00:44:42.110 --> 00:44:46.330
So if you override TViewHitTest,
you'll be past a point,

00:44:46.330 --> 00:44:50.280
and you'll need to return an
enumerated part of your view.

00:44:50.940 --> 00:44:52.320
Now by part I mean something special.

00:44:52.320 --> 00:44:54.800
Let's take the scroll bar for example.

00:44:54.820 --> 00:44:55.640
There are lots of pieces to it.

00:44:55.700 --> 00:44:59.140
There's the up and down buttons,
page up and down, scroll thumb.

00:44:59.170 --> 00:45:01.500
Now these are implemented
as enumerated parts,

00:45:01.500 --> 00:45:03.900
not actual sub views,
because we wanted to make sure

00:45:03.900 --> 00:45:05.110
it was nice and lightweight.

00:45:05.220 --> 00:45:08.060
So these are literally parts 1, 2, 3, 4,
5.

00:45:08.060 --> 00:45:09.560
We have the same thing
in Image Browser View.

00:45:09.600 --> 00:45:13.660
We have the entire control,
the entire view,

00:45:13.660 --> 00:45:16.930
and then we have the browse
buttons and the delete button.

00:45:17.110 --> 00:45:21.200
So these again are enumerated parts 1, 2,
3, 4, or something along those lines.

00:45:21.200 --> 00:45:23.150
You can check in the code.

00:45:25.000 --> 00:45:27.280
So what the toolbox is going to
do with this information about

00:45:27.280 --> 00:45:29.980
what part that gets returned,
it's going to set the

00:45:29.980 --> 00:45:32.740
highlight of your control.

00:45:32.790 --> 00:45:35.800
So you'll want to listen
to TVU's highlight changed

00:45:35.960 --> 00:45:37.740
and invalidate your view.

00:45:38.060 --> 00:45:42.040
So when you go back to draw again later,
you can draw some user feedback.

00:45:42.400 --> 00:45:44.950
For instance,
here you can see that the back

00:45:45.140 --> 00:45:49.090
browse button is dimmed as if
the user is clicking on it.

00:45:52.720 --> 00:45:57.410
So once the user has clicked,
tracked onto your part, and unclicked,

00:45:57.410 --> 00:46:01.650
so the mouse up occurs,
TView control hit will be called.

00:46:01.660 --> 00:46:04.380
So if you override this method,
you will be reacting to a mouse

00:46:04.380 --> 00:46:06.420
click that has already occurred.

00:46:06.440 --> 00:46:09.720
If you need to do anything-- and
then you can perform whatever action,

00:46:09.780 --> 00:46:13.450
clicking on that piece,
that part performs.

00:46:13.530 --> 00:46:15.790
If you need to do anything more
interesting with custom tracking,

00:46:15.820 --> 00:46:16.980
override TView track.

00:46:17.100 --> 00:46:18.710
This will be sent when
there's a mouse down,

00:46:18.710 --> 00:46:20.510
but the mouse has not been let up yet.

00:46:20.690 --> 00:46:24.340
So you can use an API like
TrackMouseLocation to follow the

00:46:24.340 --> 00:46:26.550
user's interaction in your view.

00:46:26.770 --> 00:46:29.560
Now,
make sure not to use any old idioms like,

00:46:29.570 --> 00:46:31.780
"wow,
still down." This is very important.

00:46:31.880 --> 00:46:33.900
TrackMouseLocation is very modern.

00:46:33.920 --> 00:46:40.010
It knows about-- it blocks so
that as long as there isn't any

00:46:40.010 --> 00:46:42.940
action going on with the mouse,
with the user,

00:46:42.960 --> 00:46:44.650
your application will be quiescent.

00:46:44.810 --> 00:46:47.360
It doesn't take away resources
from other applications or

00:46:47.360 --> 00:46:48.600
other threads within your app.

00:46:48.730 --> 00:46:51.750
It allows Carbon events to
fire and timers to fire.

00:46:51.790 --> 00:46:54.020
"Wow,
still down" does not allow those things.

00:46:54.090 --> 00:46:57.900
You'll peg 100% of the CPU,
and other people won't

00:46:57.900 --> 00:46:58.760
like you very much.

00:46:58.840 --> 00:47:01.910
So avoid that at all cost.

00:47:04.110 --> 00:47:06.610
OK,
now that the user can track with a mouse,

00:47:06.610 --> 00:47:09.020
we want to expand our
interaction abilities with

00:47:09.290 --> 00:47:11.740
keyboard navigation text input.

00:47:12.250 --> 00:47:14.040
HIFramework has a notion of interfaces.

00:47:14.040 --> 00:47:16.920
So we want to activate the
K keyboard focus interface.

00:47:17.060 --> 00:47:22.120
What this does is underneath the covers,
turns on a series of Carbon events,

00:47:22.120 --> 00:47:24.930
Carbon event handlers in sequence.

00:47:25.250 --> 00:47:26.260
So you don't have to worry about that.

00:47:26.260 --> 00:47:30.560
All you want to do is
override C++ methods.

00:47:30.970 --> 00:47:34.360
So to receive focus in your view,
override TViewSetFocusPart.

00:47:34.690 --> 00:47:37.810
So as the user tabs through their--

00:47:38.280 --> 00:47:38.900
and others.

00:47:38.900 --> 00:47:41.940
Through their interface,
for instance from this edit

00:47:41.940 --> 00:47:45.360
text control into your view,
set focus part will be called.

00:47:45.360 --> 00:47:49.930
And then you need to set the focus on
whichever part makes sense for your view.

00:47:51.390 --> 00:47:54.130
As the user continues to tab,
a set focus part would

00:47:54.130 --> 00:47:56.280
be called continually,
and you can tab through the

00:47:56.340 --> 00:47:58.080
different parts of your view.

00:47:59.090 --> 00:48:01.350
One little feature I want to
point out here is the gets

00:48:01.350 --> 00:48:03.600
focus on click HIView feature.

00:48:03.600 --> 00:48:06.900
This is important if you have
something like a text editing view.

00:48:06.900 --> 00:48:08.800
You want to make sure
that when the user clicks,

00:48:08.800 --> 00:48:12.120
that focus moves from wherever else
it is in the window into that view.

00:48:12.270 --> 00:48:14.290
This isn't as important for
something like a push button.

00:48:14.300 --> 00:48:18.660
You wouldn't want to lose focus in your
edit text view when you click a button.

00:48:18.660 --> 00:48:20.540
So make sure it makes sense in your
view if you're going to use it,

00:48:20.640 --> 00:48:23.060
but it's a nice convenience.

00:48:23.560 --> 00:48:26.660
Now that your view has focus,
the whole point is to get

00:48:26.680 --> 00:48:29.390
keyboard input from the user.

00:48:29.460 --> 00:48:33.480
So the handle text input
override TView text input.

00:48:34.040 --> 00:48:36.060
Then at this point,
all keystrokes will be

00:48:36.060 --> 00:48:37.760
sent directly to your view.

00:48:37.760 --> 00:48:40.760
You can listen to them and
react to them appropriately.

00:48:40.770 --> 00:48:43.700
Now, when the user presses spacebar,
this is something important.

00:48:43.930 --> 00:48:48.350
For accessibility,
this represents basically a mouse click

00:48:48.350 --> 00:48:51.140
on whatever part of your view is focused.

00:48:51.230 --> 00:48:55.670
So it's important to give a user feedback
as if they have performed a mouse click.

00:48:55.830 --> 00:48:59.360
So if you call HIView simulate
click when the spacebar is hit,

00:48:59.360 --> 00:49:04.020
this will go through the entire
process as if the user has clicked.

00:49:04.190 --> 00:49:08.360
So you'll be sent the hit test
message with that particular area.

00:49:08.360 --> 00:49:10.540
And your highlight will be changed.

00:49:10.540 --> 00:49:11.360
You'll invalidate.

00:49:11.360 --> 00:49:12.440
You'll redraw.

00:49:12.440 --> 00:49:15.790
And you can give the
user some nice feedback

00:49:16.030 --> 00:49:18.460
Some nice feedback that
something is occurring.

00:49:18.490 --> 00:49:22.200
Then once that's done,
go ahead and perform your action.

00:49:24.910 --> 00:49:27.760
The third major piece of user
interactions is accessibility.

00:49:27.770 --> 00:49:32.020
You want to make sure that your view is
available to as many users as possible.

00:49:33.030 --> 00:49:35.580
To support accessibility,
turn on the accessibility

00:49:35.580 --> 00:49:39.890
interface and override the T-object
suite of accessibility events.

00:49:40.070 --> 00:49:44.840
Now, these methods you override on
T-object rather than T-view,

00:49:44.840 --> 00:49:48.630
because there are all kinds of
UI elements that can be accessible,

00:49:48.630 --> 00:49:53.290
like menus, windows,
your whole application, for instance,

00:49:53.290 --> 00:49:54.880
not just views.

00:49:56.100 --> 00:49:58.810
We don't have a lot of time
to go into detail on this.

00:49:58.930 --> 00:50:01.880
There's plenty of examples
in the sample code.

00:50:04.740 --> 00:50:08.310
One last piece of user interaction
I want to go over is drag and drop.

00:50:08.350 --> 00:50:11.700
Again, set the drag and drop
interface activated.

00:50:11.700 --> 00:50:16.630
You need to enable dragging
on your view and your window.

00:50:16.710 --> 00:50:19.700
HIA framework does not do this for
you automatically at this point.

00:50:19.700 --> 00:50:24.700
A good place to do this is when
your view is added to a window.

00:50:24.700 --> 00:50:29.200
So you can enable that within
the owning window change method.

00:50:29.510 --> 00:50:32.070
But this is one piece that kind
of trips people up sometimes,

00:50:32.080 --> 00:50:36.330
so make sure that you're doing this
whenever your view is added to a window.

00:50:36.460 --> 00:50:38.960
And then override the TView
dragging suite of events.

00:50:39.020 --> 00:50:43.400
Drag Enter, Track Within, Leave,
and Drag Received.

00:50:43.450 --> 00:50:45.950
You'll be handed a drag ref,
and you can do all the same

00:50:45.950 --> 00:50:48.790
drag machinery that you've
done with that in the past.

00:50:49.170 --> 00:50:50.750
Given that we've covered
user interaction,

00:50:50.820 --> 00:50:54.670
I want to hand things back to
Curt to add those to our view.

00:50:59.360 --> 00:51:02.240
Now we'll get into implementing
support for those various parts,

00:51:02.310 --> 00:51:06.210
the back, the forward,
and the delete part in our view.

00:51:06.310 --> 00:51:10.550
So let's first add a new
member variable to our view,

00:51:10.550 --> 00:51:12.920
which will remember the
currently focused part.

00:51:12.920 --> 00:51:17.080
We're not going to get into using
this initially at this point in time,

00:51:17.080 --> 00:51:19.360
but we need to make sure
that that's available,

00:51:19.360 --> 00:51:23.790
because some of the other utilities
I'm going to define will depend on it.

00:51:25.080 --> 00:51:29.240
So let's go define some
of those utilities now.

00:51:29.250 --> 00:51:30.380
I'll go through all of these.

00:51:30.380 --> 00:51:32.560
This is the section of code that I added.

00:51:32.570 --> 00:51:36.310
And these are just declaring
different utility functions that this

00:51:36.360 --> 00:51:38.060
particular view is going to need.

00:51:38.070 --> 00:51:39.900
Your view, of course, will be different.

00:51:39.920 --> 00:51:43.490
But I'll get into all
these in just a moment.

00:51:45.040 --> 00:51:48.000
Let's go to the implementation file.

00:51:48.000 --> 00:51:50.920
Back up at the top of the file,
I want to add some additional constants.

00:51:50.920 --> 00:51:55.860
And these constants will define
what the various parts will be.

00:51:56.070 --> 00:51:58.760
So for example,
I now have these new view parts.

00:51:58.940 --> 00:52:03.430
This is the image part that's going to
represent the whole image as a whole.

00:52:03.610 --> 00:52:07.280
The back, the forward part,
those are those triangular arrows,

00:52:07.280 --> 00:52:11.810
and the delete image part,
that will be that X that will be drawn.

00:52:15.740 --> 00:52:19.020
Since we added a new member variable,
let's make sure that we

00:52:19.020 --> 00:52:21.360
initialize that correctly.

00:52:21.360 --> 00:52:25.790
So back in the initialize method,
I want to go ahead and set

00:52:25.950 --> 00:52:28.390
that to some initial value.

00:52:31.620 --> 00:52:37.250
And now I want to go add those
utilities that I declared in the header.

00:52:39.000 --> 00:52:42.360
So this here,
this section of code is to just return a

00:52:42.520 --> 00:52:44.110
frame for one of those individual parts.

00:52:44.200 --> 00:52:47.180
For example,
if the part or the back part,

00:52:47.180 --> 00:52:51.620
if somebody is requesting what
rectangle represents that part,

00:52:51.650 --> 00:52:54.110
we do this calculation to determine that.

00:52:54.420 --> 00:52:57.460
Similarly for the
forward and delete part.

00:52:57.480 --> 00:53:01.560
The image part itself is
just the bounds of the view,

00:53:01.580 --> 00:53:03.920
but we just inset it a little bit.

00:53:08.950 --> 00:53:11.780
The next helper method is
this is part available.

00:53:11.810 --> 00:53:15.400
And all we're doing here is determining
whether any of those individual

00:53:15.530 --> 00:53:17.600
parts is currently available.

00:53:17.860 --> 00:53:21.580
So if the image part is available,
we determine whether the

00:53:21.580 --> 00:53:23.100
view itself is enabled.

00:53:23.140 --> 00:53:26.680
And then if there is an index
in the array to be shown,

00:53:26.680 --> 00:53:33.030
we determine whether the browse back
forward parts are to be enabled as well.

00:53:35.840 --> 00:53:39.300
Next, we have some helper methods to
navigate between the different images.

00:53:39.300 --> 00:53:41.980
Since this view itself
stores multiple images,

00:53:41.980 --> 00:53:45.370
or multiple paths to images,
we want to make sure that there's some

00:53:45.530 --> 00:53:47.040
methods to navigate between those.

00:53:47.040 --> 00:53:48.890
So we have the next image.

00:53:48.920 --> 00:53:51.680
And all this does is it
increments our index count.

00:53:51.710 --> 00:53:53.820
If focus is set on one of
those additional parts,

00:53:53.910 --> 00:53:57.160
which we'll also get into later,
we make sure that we appropriately

00:53:57.160 --> 00:53:58.540
set the keyboard focus.

00:53:58.560 --> 00:54:01.880
But the important part here is
that we just increment our index,

00:54:01.880 --> 00:54:03.450
and we invalidate.

00:54:03.460 --> 00:54:06.800
We don't do any drawing in this method
because once we do the invalidation,

00:54:06.800 --> 00:54:09.700
the next time through the draw loop,
our draw method will be called.

00:54:09.820 --> 00:54:14.240
And since our index is incremented,
we'll now draw the next image

00:54:14.240 --> 00:54:16.690
that's stored in our view.

00:54:17.720 --> 00:54:21.420
Similarly for a previous image method,
this just decrements the

00:54:21.420 --> 00:54:23.990
index and invalidates as well.

00:54:27.450 --> 00:54:32.980
We now have some methods for
adding images to this view.

00:54:33.030 --> 00:54:38.330
This will just add a new image
URL to the array and invalidate

00:54:38.330 --> 00:54:40.450
because it will now be shown.

00:54:41.690 --> 00:54:45.000
A delete current image method,
which pretty much does

00:54:45.000 --> 00:54:45.970
exactly what it says.

00:54:45.970 --> 00:54:49.220
But the important part here, of course,
is that we invalidate after we

00:54:49.220 --> 00:54:51.450
delete the currently viewed image.

00:54:53.970 --> 00:54:54.720
Git view part.

00:54:54.830 --> 00:54:58.080
This returns the part code
associated with a given point.

00:54:58.290 --> 00:55:00.780
So we just iterate through
the part frames here,

00:55:00.800 --> 00:55:03.940
determining whether the
point is inside that part.

00:55:04.020 --> 00:55:05.430
And if it is, then we return that part.

00:55:05.600 --> 00:55:08.170
Otherwise, we return no part.

00:55:11.280 --> 00:55:13.530
And finally,
this is just a utility function.

00:55:13.560 --> 00:55:16.230
Looks like a lot of code,
but what it does is it extracts

00:55:16.270 --> 00:55:18.340
a file URL from a pasteboard.

00:55:18.340 --> 00:55:20.610
This will be important when we
implement drag and drop support

00:55:21.120 --> 00:55:26.790
because you're past a pasteboard
that we can extract URLs from.

00:55:26.800 --> 00:55:30.440
And then just we'll add
that to our image array.

00:55:30.440 --> 00:55:33.400
Let's go ahead and save that.

00:55:35.270 --> 00:55:39.180
And now we need to update the drawing.

00:55:39.210 --> 00:55:41.790
So we go back to the draw method.

00:55:44.100 --> 00:55:50.180
And after we draw the image,
I've added this code, this section,

00:55:50.390 --> 00:55:52.930
which will draw those various parts.

00:55:55.310 --> 00:55:58.180
These parts are, again, the back,
the forward,

00:55:58.200 --> 00:56:00.070
and the delete part of the image.

00:56:00.310 --> 00:56:03.090
So initially, we get the highlight,
because we want to know which

00:56:03.180 --> 00:56:05.410
part is currently highlighted.

00:56:05.710 --> 00:56:09.440
and then we have separate blocks for
drawing each of those different parts.

00:56:09.450 --> 00:56:14.100
We get the frame and then we use courts
to do the drawing for a triangle,

00:56:14.130 --> 00:56:18.910
for the back, then again in this
section for the forward.

00:56:20.900 --> 00:56:25.900
and then in this section
for doing the delete part.

00:56:27.170 --> 00:56:29.640
Another interesting thing that
we do here is for each part we

00:56:29.650 --> 00:56:32.950
determine whether that part is
the currently highlighted part,

00:56:32.950 --> 00:56:35.220
and we draw it differently
based on that state.

00:56:35.320 --> 00:56:38.280
So for example,
if the forward part is highlighted,

00:56:38.340 --> 00:56:40.150
we draw it not quite white.

00:56:40.340 --> 00:56:42.900
We draw it kind of gray.

00:56:43.340 --> 00:56:46.890
And additionally,
we make sure that if we can

00:56:46.930 --> 00:56:48.880
draw it in another state,
if the part's not available,

00:56:48.880 --> 00:56:50.880
we'll draw it with a different
shade of gray as well.

00:56:50.880 --> 00:56:53.620
Now, of course, this is just what this
view has chosen to do.

00:56:53.620 --> 00:56:55.610
Your view, of course,
will do whatever it wants to do.

00:56:55.620 --> 00:57:03.550
Let's go ahead and run this
and see how it looks now.

00:57:10.310 --> 00:57:13.330
So all we did at this point
is just add support for

00:57:13.370 --> 00:57:14.360
drawing these different parts.

00:57:14.360 --> 00:57:17.670
So this is the back part,
the forward part, and the X part.

00:57:18.040 --> 00:57:19.800
But you can see that
this drawing disabled,

00:57:19.810 --> 00:57:22.790
because there are no images
to navigate between currently.

00:57:22.930 --> 00:57:25.690
And we haven't hooked up tracking,
so hitting any of these parts isn't

00:57:25.700 --> 00:57:27.920
going to do anything at this point.

00:57:28.220 --> 00:57:31.820
So the client-- well,
the view itself could add some

00:57:31.960 --> 00:57:37.880
new API or some public methods so
the client can add images to it.

00:57:37.910 --> 00:57:39.480
But we just want to
make this really simple.

00:57:39.480 --> 00:57:41.830
So we'll just implement
drag and drop support now.

00:57:41.900 --> 00:57:47.970
So go back to the header file.

00:57:50.430 --> 00:57:53.190
I'm going to want to add
one additional member field.

00:57:53.200 --> 00:57:58.480
This is a flag that tracks whether
we are currently tracking a drag.

00:57:58.540 --> 00:58:02.670
And this is going to be important
because when we're dragging items to

00:58:02.670 --> 00:58:06.300
this view and we're tracking that drag,
we want to draw that view differently.

00:58:06.300 --> 00:58:09.480
Specifically, we want to draw a highlight
around that image.

00:58:09.570 --> 00:58:13.500
So it provides the user
feedback that it's tracking.

00:58:16.870 --> 00:58:22.430
and then we'll override the drag
suite of methods that are in TView.

00:58:22.510 --> 00:58:24.860
So override drag enter, leave,
and drag receive.

00:58:25.150 --> 00:58:29.610
Now, the one caveat is that we need to
make sure that the drag tracking

00:58:29.610 --> 00:58:32.260
is enabled for the window and also
for the control when that view is

00:58:32.260 --> 00:58:33.820
initially embedded in that window.

00:58:33.880 --> 00:58:37.080
So we'll do that in the
owning window changed method.

00:58:49.400 --> 00:58:52.080
TView has this notion of interfaces.

00:58:52.100 --> 00:58:54.340
So you can activate a
particular interface,

00:58:54.340 --> 00:58:55.920
which is not on by default.

00:58:55.940 --> 00:59:00.140
And this will install various
handlers on for a suite of events.

00:59:00.220 --> 00:59:03.400
So we want to make sure that we
activate the drag and drop interface.

00:59:03.400 --> 00:59:05.440
Now, if you just go investigate
the TView header,

00:59:05.450 --> 00:59:07.060
you'll see where this is all defined.

00:59:07.060 --> 00:59:08.780
There are different interfaces available.

00:59:08.780 --> 00:59:12.540
We want to make sure that we
activate the drag and drop interface.

00:59:12.660 --> 00:59:14.560
Since we also added a
new member variable,

00:59:14.640 --> 00:59:16.360
we want to make sure that we
initialize that correctly.

00:59:16.510 --> 00:59:22.150
So I'm going to go back to the
initialize method and make sure

00:59:22.150 --> 00:59:25.490
that we are initially not dragging.

00:59:34.810 --> 00:59:39.970
Next, I will implement the drag methods.

00:59:40.040 --> 00:59:46.520
So when the drag enter method is invoked,
we get the drag pasteboard.

00:59:46.520 --> 00:59:48.680
We determine whether there
is a file on that pasteboard,

00:59:48.730 --> 00:59:50.480
if it's something that we can handle.

00:59:50.500 --> 00:59:54.420
And if so, we flag that we are
currently tracking a drag,

00:59:54.420 --> 00:59:55.790
and then we invalidate.

00:59:55.890 --> 00:59:58.860
So next time through the draw loop,
we'll see that that flag is on,

00:59:58.860 --> 01:00:01.380
and we'll draw the
highlight around our view.

01:00:03.800 --> 01:00:06.870
Similarly,
when the drag leave handler is invoked,

01:00:06.870 --> 01:00:11.500
we just toggle that flag
to false and validate.

01:00:14.800 --> 01:00:18.600
If the drag is received, again,
we get the drag pasteboard.

01:00:18.630 --> 01:00:21.460
We extract the images
from that pasteboard,

01:00:21.460 --> 01:00:23.700
or the paths to those
images from that pasteboard.

01:00:23.700 --> 01:00:26.200
And then we go ahead and call
our internal utility function,

01:00:26.200 --> 01:00:29.900
which is just to add
the image to our view.

01:00:31.830 --> 01:00:34.430
And lastly,
I'm overriding the owning window change.

01:00:34.460 --> 01:00:36.420
And again,
this is just to turn on tracking

01:00:36.500 --> 01:00:39.800
for the window and for the view.

01:00:39.860 --> 01:00:41.990
Since this is all sample code,
you may want to go ahead

01:00:42.060 --> 01:00:46.720
and change HHR framework so
it does this in all cases.

01:00:46.730 --> 01:00:49.360
We'll update the code
along the way as well.

01:00:50.470 --> 01:00:53.730
And now since we have this flag that
determines whether we're tracking a drag,

01:00:53.730 --> 01:00:56.510
let's go ahead and update the
drawing code to make sure that we

01:00:56.550 --> 01:00:58.390
provide that feedback to the user.

01:00:58.450 --> 01:01:00.510
So I'll go back to draw.

01:01:02.080 --> 01:01:04.270
This is the section
where we draw the image.

01:01:04.350 --> 01:01:07.430
This is the section where
we draw the various parts.

01:01:08.320 --> 01:01:12.740
And now I will add this section of
code that if we're currently tracking,

01:01:12.740 --> 01:01:16.430
we get the highlight brush and
then we stroke that rectangle,

01:01:16.430 --> 01:01:19.780
which will just create a nice
highlight rectangle around the view.

01:01:23.440 --> 01:01:25.640
Let's see if this is
handled correctly now.

01:01:25.730 --> 01:01:27.340
So again, this is our view.

01:01:27.360 --> 01:01:32.440
I have this folder opened up to various
images in the desktop images folder.

01:01:32.480 --> 01:01:35.680
Let's go ahead and drag
all of these to the view.

01:01:35.910 --> 01:01:38.830
Now you can see as we drag over the view,
there's a highlight that's drawn

01:01:38.840 --> 01:01:43.350
around the view to provide feedback
that it's currently tracking.

01:01:43.360 --> 01:01:48.020
And then if we go ahead and drop,
those images are added to the view,

01:01:48.020 --> 01:01:51.510
and the parts change their highlight.

01:01:51.620 --> 01:01:55.270
For example, we can now navigate back
in the list of images,

01:01:55.440 --> 01:01:58.760
so this now becomes enabled.

01:01:58.820 --> 01:02:01.310
We haven't hooked up tracking yet,
so clicking on this view,

01:02:01.310 --> 01:02:04.380
or this part of the view,
isn't yet going to do anything.

01:02:04.630 --> 01:02:06.830
Let's go add that support now.

01:02:11.880 --> 01:02:14.300
Go back to the header.

01:02:14.310 --> 01:02:15.520
This is very simple.

01:02:15.540 --> 01:02:19.670
Since HIFramework takes care
of all of the simple tracking,

01:02:19.690 --> 01:02:23.880
all we need to do-- we don't even
need to override the track method.

01:02:23.880 --> 01:02:26.720
We'll only need to do that if we
want to add some additional behavior,

01:02:26.720 --> 01:02:28.660
like bring up a pop-up menu or something.

01:02:28.690 --> 01:02:32.920
But for simple tracking,
all we need to do is overload these two

01:02:32.930 --> 01:02:35.850
methods-- hit testing and control hit.

01:02:35.940 --> 01:02:41.110
Let's go ahead and implement those.

01:02:48.130 --> 01:02:50.760
So we override this hit test method.

01:02:50.760 --> 01:02:55.550
And what we do is we determine what
part is represented by that point.

01:02:55.560 --> 01:02:59.180
And that's by calling this
internal method getViewPart.

01:02:59.180 --> 01:03:01.320
And then we just return that part.

01:03:01.320 --> 01:03:04.720
So HIFramework,
when the user clicks on that part,

01:03:04.720 --> 01:03:07.340
it will store that part
as the highlighted part.

01:03:07.340 --> 01:03:09.780
And when it validates
and redraws our view,

01:03:09.780 --> 01:03:12.420
we get that highlight
state in the draw method,

01:03:12.420 --> 01:03:14.100
and then we'll draw it differently.

01:03:14.110 --> 01:03:17.630
And I'll show you exactly what
I mean when we go and run this.

01:03:19.340 --> 01:03:22.480
Next, we implement the ControlHit method.

01:03:22.520 --> 01:03:27.160
What this does is this method is
invoked after the user releases

01:03:27.250 --> 01:03:31.310
the mouse over your view,
and it also passes in the part

01:03:31.430 --> 01:03:34.270
which is underneath that point.

01:03:34.500 --> 01:03:36.160
So we do some various operations.

01:03:36.160 --> 01:03:38.440
So for example,
if the back part is clicked,

01:03:38.440 --> 01:03:39.980
we go to the previous image.

01:03:40.080 --> 01:03:43.520
Forward part, we go to the next image,
et cetera.

01:03:43.580 --> 01:03:44.270
Sounds very simple.

01:03:44.280 --> 01:03:47.510
Let's go ahead and run this.

01:03:49.930 --> 01:03:55.140
So again, let's add these images to
the view so we can navigate.

01:03:56.790 --> 01:03:57.940
We go here.

01:03:57.940 --> 01:04:00.180
And now when I click
on the various parts,

01:04:00.180 --> 01:04:02.640
ah, I did miss one step.

01:04:02.640 --> 01:04:08.020
And that is I forgot to add some
support in the draw method to

01:04:08.020 --> 01:04:11.640
deal with this various stuff.

01:04:11.640 --> 01:04:14.420
Or did I?

01:04:14.420 --> 01:04:18.970
I think I may be incorrect in that.

01:04:24.400 --> 01:04:41.700
[Transcript missing]

01:04:44.320 --> 01:04:48.560
Finally,
let's go and add text input support.

01:04:48.650 --> 01:04:51.240
We want this view to be
navigable by the keyboard,

01:04:51.240 --> 01:04:59.160
so we want to be able to tab into the
view and manipulate it with a keyboard.

01:04:59.160 --> 01:05:05.510
And we'll do that.

01:05:09.500 --> 01:05:16.340
overriding the set focus part
and the text input methods.

01:05:19.060 --> 01:05:22.560
Since this is another interface,
similar to drag and drop,

01:05:22.670 --> 01:05:28.080
we need to make sure that we activate
the keyboard focus interface.

01:05:32.970 --> 01:05:36.230
And then we implement those two methods.

01:05:36.450 --> 01:05:41.280
First, this looks like a lot of code,
but it really isn't.

01:05:41.610 --> 01:05:45.270
We're overwriting the set focus part,
what it passes in the desired

01:05:45.370 --> 01:05:48.670
focus part that we want to do,
and whether we need to focus everything.

01:05:48.740 --> 01:05:52.800
And this is important because
it's not always required that you

01:05:52.900 --> 01:05:55.000
focus every part of your view.

01:05:59.460 --> 01:06:01.430
These Mighty Mouse are crazy things,
aren't they?

01:06:01.440 --> 01:06:10.170
If I go to the keyboard and mouse
panel in System Preferences,

01:06:10.340 --> 01:06:15.340
there are these radio buttons down
here to determine how focusing happens.

01:06:15.450 --> 01:06:18.260
So if this isn't enabled,
it won't actually go into

01:06:18.260 --> 01:06:19.950
all the various parts.

01:06:20.040 --> 01:06:22.010
It will only work for textbox and lists.

01:06:22.140 --> 01:06:26.970
But I want to make sure that we can focus
into the various parts of this view.

01:06:27.090 --> 01:06:30.820
So I want to enable
focusing for all controls.

01:06:33.190 --> 01:06:35.130
So that's what this determines.

01:06:35.210 --> 01:06:37.620
And then this block of code,
we're just switching

01:06:37.620 --> 01:06:40.590
on the desired focus,
and we're determining what is

01:06:40.590 --> 01:06:42.840
the next part that we can focus.

01:06:42.850 --> 01:06:48.060
Like if the meta part that's passed into
in desired focus is focused next part,

01:06:48.060 --> 01:06:52.120
we do that calculation to determine
which part is going to be focused.

01:06:52.150 --> 01:06:54.470
Similarly for the previous part.

01:06:55.940 --> 01:07:00.060
And in the default case,
we try to focus the part requested.

01:07:00.090 --> 01:07:04.480
We cache that into our internal
variable so we can reference

01:07:04.480 --> 01:07:07.040
that later in our other methods.

01:07:07.070 --> 01:07:10.020
And also we make sure that
the output parameter is set

01:07:10.070 --> 01:07:11.640
to that new part as well.

01:07:11.690 --> 01:07:15.400
This block of code just
simply invalidates the view

01:07:15.930 --> 01:07:18.320
if the focus has changed.

01:07:22.830 --> 01:07:28.120
Next, we override the text input method.

01:07:28.180 --> 01:07:31.620
First, we extract the Unicode text
from that Carbon event,

01:07:31.640 --> 01:07:33.810
and then we just switch off
of what that character is.

01:07:33.860 --> 01:07:40.730
So if there is a part that's focused,
and the user presses the space bar,

01:07:40.790 --> 01:07:42.740
we'll simulate a click on that part.

01:07:42.770 --> 01:07:46.320
Similarly, if the user clicks on
any of the deletion keys,

01:07:46.320 --> 01:07:49.190
like Backspace, Delete, or Clear,
we'll simulate a click

01:07:49.190 --> 01:07:51.820
on the Delete part,
because we want to delete

01:07:51.820 --> 01:07:53.320
that image from the view.

01:07:53.570 --> 01:07:58.800
And the rest of the code just deals with
navigating between the various parts.

01:08:02.130 --> 01:08:06.740
Now finally, we must update the draw
code because we want,

01:08:06.740 --> 01:08:10.870
when the various parts are focused,
we want to make sure that we draw a

01:08:10.870 --> 01:08:14.190
spiffy highlight around those parts.

01:08:14.380 --> 01:08:21.780
So in the draw method,
after we do the tracking drag support,

01:08:28.580 --> 01:08:31.270
We add this block of code,
which just determines whether

01:08:31.270 --> 01:08:33.050
there is a focused part.

01:08:33.150 --> 01:08:36.920
And if so,
get the current highlight brush

01:08:37.180 --> 01:08:41.360
and then stroke the rectangle
around that particular part.

01:08:44.100 --> 01:08:50.380
So let's launch our view,
grab these images, add them to our view.

01:08:50.380 --> 01:08:54.360
Now if I hit Tab, the whole image should
get a highlight around it,

01:08:54.360 --> 01:08:55.500
which it does.

01:08:55.500 --> 01:08:59.860
And additionally,
since I turned on full keyboard focus,

01:08:59.860 --> 01:09:02.400
if I hit Tab again,
you'll see that the various parts

01:09:02.400 --> 01:09:04.960
are highlighted in that view as well.

01:09:05.160 --> 01:09:06.670
and they do respond to keyboard events.

01:09:06.790 --> 01:09:08.590
So hitting the space bar, for example.

01:09:08.750 --> 01:09:10.530
We'll go back.

01:09:10.700 --> 01:09:13.540
If I tab to the forward part,

01:09:14.500 --> 01:09:15.800
and others.

01:09:15.860 --> 01:09:20.180
That's basically adding keyboard support.

01:09:20.200 --> 01:09:25.660
That's basically getting your
view up to a usable state.

01:09:25.660 --> 01:09:32.320
And then there's plenty of other
options that you can add to your view.

01:09:32.330 --> 01:09:34.780
And there's some that's
in the sample code,

01:09:34.780 --> 01:09:34.780
such as adding tracking areas
and whatnot to your view.

01:09:34.780 --> 01:09:34.780
So back to you, Bryan.

01:09:36.540 --> 01:09:39.900
We go back to the slides.

01:09:39.900 --> 01:09:45.160
As Curt mentioned, we have a lot more
implemented in the full view.

01:09:45.160 --> 01:09:48.540
We have a caching system to
make the drawing much faster.

01:09:48.580 --> 01:09:52.100
So a little bit of CG image
caching there might be helpful.

01:09:52.100 --> 01:09:54.800
All the accessibility suite
of events is overridden.

01:09:54.800 --> 01:09:59.950
So you can use the accessibility
inspector to go take a look at your view.

01:10:00.560 --> 01:10:04.170
tracking regions so that
when the user mouses over,

01:10:04.170 --> 01:10:06.090
we get some nice rollover effects.

01:10:06.150 --> 01:10:08.760
HI Archives,
so you can save the state of your

01:10:09.120 --> 01:10:13.170
view off into a CFData to write out
to disk or put on a pasteboard across

01:10:13.280 --> 01:10:15.200
the wire to another application.

01:10:15.200 --> 01:10:19.250
Even some open and save sample code
to save that archive out to disk.

01:10:19.350 --> 01:10:21.180
So there's a lot in there.

01:10:21.180 --> 01:10:22.890
Go take a look.

01:10:24.190 --> 01:10:29.500
So what we'd like you to do at this
point is play with the sample code.

01:10:29.510 --> 01:10:32.760
Build it, see what it does,
maybe add a feature.

01:10:32.960 --> 01:10:36.110
Curt mentioned adding a contextual menu.

01:10:36.300 --> 01:10:40.940
Maybe you want to be able to right click
and choose any image that you want,

01:10:40.940 --> 01:10:42.540
something like that.

01:10:42.700 --> 01:10:46.110
Try overriding TV track and
see if you can add that.

01:10:47.750 --> 01:10:51.160
Once you're-- maybe even just
create an entirely new view,

01:10:51.160 --> 01:10:53.990
just something that you'd
like to do for your own fun.

01:10:54.760 --> 01:10:56.500
Some of us think it's fun.

01:10:56.710 --> 01:11:00.700
The next step is to convert your custom
drawing in your application to HIView.

01:11:00.800 --> 01:11:05.360
So whether you're drawing directly to
the window or you have some old C-DEFs,

01:11:05.470 --> 01:11:09.670
HIViews is really the way to go.

01:11:09.770 --> 01:11:11.250
Because once you have HIViews,
you can support

01:11:11.340 --> 01:11:12.850
compositing in your window.

01:11:13.070 --> 01:11:16.830
And compositing is what you need
to get some great performance.

01:11:16.910 --> 01:11:19.620
It's required for resolution
independence and 64-bit,

01:11:19.680 --> 01:11:23.430
which are features that your
users are really going to demand.

01:11:24.920 --> 01:11:26.850
So take the sample code.

01:11:27.110 --> 01:11:28.860
It's a set of C++ wrappers.

01:11:28.860 --> 01:11:31.360
If you already have your C++
framework in your application,

01:11:31.360 --> 01:11:33.100
maybe you can get some
more ideas from it,

01:11:33.100 --> 01:11:35.260
add to it, make some changes.

01:11:35.450 --> 01:11:35.960
It's yours.

01:11:36.170 --> 01:11:38.240
Do whatever you like with it.

01:11:38.270 --> 01:11:39.560
I hope you've learned a lot.

01:11:39.560 --> 01:11:42.810
And I'm going to hand things
back to Deric to wrap things up.

01:11:46.300 --> 01:12:09.500
[Transcript missing]