WEBVTT

00:00:14.820 --> 00:00:16.020
Okay, thanks a lot for coming.

00:00:16.020 --> 00:00:17.800
We've got a lot of good
stuff to show you today,

00:00:17.800 --> 00:00:19.560
so let's just jump right in.

00:00:19.560 --> 00:00:23.040
In this session,
we're going to first talk a little bit

00:00:23.040 --> 00:00:27.260
about what we've learned in QTKit as
it exists in Panther and Tiger,

00:00:27.350 --> 00:00:32.460
so some of the accumulated wisdom that
we've gotten by helping people use it.

00:00:32.880 --> 00:00:35.070
Then we're going to jump
into new stuff in Leopard.

00:00:35.070 --> 00:00:37.280
We're going to talk about
some new methods that we've

00:00:37.290 --> 00:00:38.700
added to existing classes.

00:00:38.700 --> 00:00:41.030
We'll talk about the 64-bit operation.

00:00:41.050 --> 00:00:43.230
I know some of you are
interested in that.

00:00:43.250 --> 00:00:47.150
And we'll spend actually most of
our time on the new capture classes.

00:00:47.160 --> 00:00:50.220
QTKit has more than
tripled in size in Leopard,

00:00:50.230 --> 00:00:55.700
and so I can't talk about everything,
especially since this is a hands-on lab.

00:00:55.700 --> 00:00:58.820
So we're going to be looking at code,
working through code,

00:00:58.820 --> 00:01:02.540
and actually building applications
from scratch in here using QTKit.

00:01:04.270 --> 00:01:06.840
So what have we learned in the past year,
year and a half,

00:01:06.850 --> 00:01:10.660
working with QTKit in Tiger and Panther?

00:01:10.660 --> 00:01:14.320
Well, we found out that there
were some bugs in it,

00:01:14.320 --> 00:01:15.910
and we fixed those.

00:01:15.920 --> 00:01:20.650
And by far, my favorite bug is one that
concerns the movie creation

00:01:20.650 --> 00:01:24.580
time or the movie modification
time attribute of a QT movie.

00:01:24.960 --> 00:01:28.870
It turns out that if you
created a movie right now,

00:01:28.870 --> 00:01:33.860
and then you use QTKit to
determine the movie creation time,

00:01:33.860 --> 00:01:36.260
you'd get a time that was 13 hours ago.

00:01:36.260 --> 00:01:41.010
And actually, the number of hours that
you were wrong depended upon

00:01:41.010 --> 00:01:43.210
where in the world you were.

00:01:43.220 --> 00:01:46.540
So if you were in Burma,
you'd actually get the correct time.

00:01:49.180 --> 00:01:53.000
When we stood up here last year,
we told you that you can't subclass

00:01:53.000 --> 00:01:57.160
QTMovieView and correctly override
the event handling methods.

00:01:57.160 --> 00:01:59.960
So we fixed that,
and in a second I'll show

00:02:00.040 --> 00:02:02.050
you exactly how that works.

00:02:02.180 --> 00:02:05.550
And finally,
there's an issue that comes up quite

00:02:05.710 --> 00:02:09.740
often on the mailing list about,
why am I not getting the correct answers

00:02:09.740 --> 00:02:11.670
when I query some movie properties?

00:02:11.680 --> 00:02:14.720
And so there's an issue or two
there that I'd like to talk about.

00:02:16.130 --> 00:02:19.000
So let's talk about
subclassing QTMovieView.

00:02:19.030 --> 00:02:22.210
As I said, it did not work correctly
in QuickTime 7.0.

00:02:22.250 --> 00:02:25.000
A QTMovieView is a subclass of NSView.

00:02:25.040 --> 00:02:29.000
You expect to be able to subclass it
and override some of the NSView methods.

00:02:29.150 --> 00:02:30.710
Well, you couldn't do that.

00:02:30.960 --> 00:02:33.020
But we did fix that in 7.04.

00:02:33.050 --> 00:02:36.650
So you've had, for quite a while,
a version of QTKit where

00:02:36.700 --> 00:02:37.720
you could do that.

00:02:37.930 --> 00:02:41.000
And let's just look at a demo of that.

00:02:41.000 --> 00:02:43.830
Could I have the first demo machine?

00:02:44.510 --> 00:02:48.670
Now, there is one technical glitch
I have to mention that I can only

00:02:48.670 --> 00:02:52.180
see what's down here unless I turn
around because of some tricks with

00:02:52.180 --> 00:02:53.560
the capture that's going to come up.

00:02:53.560 --> 00:02:56.190
So if it looks like I'm
squinting down here,

00:02:56.190 --> 00:02:57.480
it's because I am.

00:02:57.540 --> 00:02:58.760
Is that my project file?

00:02:58.760 --> 00:03:03.670
OK.

00:03:03.900 --> 00:03:04.750
And is it launching?

00:03:04.760 --> 00:03:06.410
No, it's not.

00:03:11.260 --> 00:03:14.630
So this is just a standard document-based
application that I'm opening up.

00:03:14.660 --> 00:03:18.520
Does it not want to open?

00:03:20.350 --> 00:03:22.150
Here we go.

00:03:22.230 --> 00:03:27.060
And since what I want to do is
create a subclass of QTMovieView,

00:03:27.060 --> 00:03:29.440
let's just look at the declaration there.

00:03:29.460 --> 00:03:34.790
And you see that my movie view is
declared as a subclass of QTMovieView.

00:03:35.240 --> 00:03:39.190
And you can also see that I'm
overriding just one method in there.

00:03:39.300 --> 00:03:41.270
So let's-- oh, no, I didn't hit Quit.

00:03:41.300 --> 00:03:43.600
I hit Command-W.

00:03:43.730 --> 00:03:45.380
Let's try that again.

00:03:46.170 --> 00:03:47.360
This time I'll hit Command-W.

00:03:47.360 --> 00:03:50.100
And let's look at the
implementation of that.

00:03:50.100 --> 00:03:52.820
As you can see, as I said,
I'm overriding only one method.

00:03:52.820 --> 00:03:55.850
And in this particular case,
what I want to do is prevent the

00:03:55.850 --> 00:03:58.030
user from stepping through the movie.

00:03:58.030 --> 00:04:02.230
So I look for those key-down
events that have the left arrow

00:04:02.230 --> 00:04:05.830
key or the right arrow key,
and I'm just going to do

00:04:05.830 --> 00:04:08.220
nothing if I hit one of those.

00:04:08.660 --> 00:04:11.340
Otherwise,
I'll just process it in the standard way.

00:04:12.540 --> 00:04:16.250
So there is my subclass of QTMovieView.

00:04:16.570 --> 00:04:18.680
Let's build and run this.

00:04:25.360 --> 00:04:27.980
In a second it will come up.

00:04:27.980 --> 00:04:32.680
And let's open a movie.

00:04:34.180 --> 00:04:35.480
Oh, let's just pick that one there.

00:04:35.480 --> 00:04:40.920
So here I have a movie,
and just to make clear, I'm going to,

00:04:40.920 --> 00:04:44.350
you can see that I'm hitting
the left and right arrow keys

00:04:44.360 --> 00:04:45.120
and nothing has happened.

00:04:45.120 --> 00:04:47.470
All the other keys, for instance,
the space bar,

00:04:47.600 --> 00:04:49.380
does in fact start the movie playing.

00:04:49.380 --> 00:04:51.920
There's one other thing
I want you to notice,

00:04:51.930 --> 00:04:55.990
which is on the controller bar,
you'll see that on the right-hand

00:04:55.990 --> 00:04:59.080
side of the controller bar,
where you normally would

00:04:59.080 --> 00:05:01.580
have the little step buttons,
they're not there.

00:05:02.240 --> 00:05:03.340
How did I do that?

00:05:03.370 --> 00:05:07.830
Let's look now at my document class,
and you'll see right after I open

00:05:07.840 --> 00:05:11.800
it and assign a movie to the view,
I call this new method,

00:05:11.800 --> 00:05:14.250
set step button visible, no.

00:05:14.260 --> 00:05:18.270
So that's a new method that I'll
talk about in more detail later that

00:05:18.520 --> 00:05:20.790
allows me to hide those step buttons.

00:05:23.190 --> 00:05:25.100
So now if we could go back to slides,
please.

00:05:25.180 --> 00:05:28.240
So there's a simple case of where
I was able to do what you thought

00:05:28.250 --> 00:05:30.400
you could always do or always
should have been able to do,

00:05:30.400 --> 00:05:34.380
which is subclass the view
object and override its methods.

00:05:34.400 --> 00:05:38.880
Now let me talk about this issue about
operating on newly opened movies.

00:05:38.910 --> 00:05:41.640
The essential thing you have
to keep in mind is that all

00:05:41.640 --> 00:05:46.300
of the QT movie initialization
methods operate asynchronously.

00:05:46.420 --> 00:05:49.140
That means no matter
which of them you call,

00:05:49.140 --> 00:05:53.100
we're gonna give you back a
QT movie object right away.

00:05:53.400 --> 00:05:56.680
Even before possibly any of the
movie data is available to us,

00:05:56.700 --> 00:05:58.810
we're going to give you
a valid QT movie object.

00:05:58.820 --> 00:06:01.610
So some people want to
do something like this.

00:06:01.620 --> 00:06:05.690
They want to call movie with URL,
passing in a URL,

00:06:05.690 --> 00:06:08.790
and then immediately they say, well,
all right,

00:06:08.790 --> 00:06:10.160
give me the natural size attribute.

00:06:10.160 --> 00:06:13.610
Because I want to say, no,
how big to make my movie view so

00:06:13.610 --> 00:06:16.000
I can draw things the correct size.

00:06:16.000 --> 00:06:18.690
Or they might say, all right,
let's play it.

00:06:19.120 --> 00:06:23.160
The trouble with this, as I said,
is that the movie with URL method

00:06:23.500 --> 00:06:27.840
is going to return virtually
immediately with a valid QT movie.

00:06:27.880 --> 00:06:31.450
But the server that's got that
URL could be off in Burma,

00:06:31.470 --> 00:06:32.690
for all we know.

00:06:32.700 --> 00:06:35.040
And it could be a real slow server.

00:06:35.040 --> 00:06:37.530
So by the time we get
that QT movie object,

00:06:37.530 --> 00:06:40.220
there could be none
of the movie metadata,

00:06:40.220 --> 00:06:42.060
that is to say the movie Adam, available.

00:06:42.060 --> 00:06:44.550
And there could be none of the
movie media data available.

00:06:44.600 --> 00:06:48.500
So we're not going to be able to
query any of the movie properties.

00:06:48.500 --> 00:06:49.100
Let alone the movie data.

00:06:49.100 --> 00:06:51.380
on the natural size,
and we're not going to be

00:06:51.390 --> 00:06:53.000
able to start playing it.

00:06:53.290 --> 00:06:56.360
So how would we actually do this right?

00:06:56.530 --> 00:07:00.400
One way is to force the
movie to open synchronously.

00:07:00.500 --> 00:07:03.600
And you would do that by using a
different movie opening method,

00:07:03.830 --> 00:07:06.140
that is, movie with attributes.

00:07:06.170 --> 00:07:10.590
And you'll set up a dictionary
where you specify the URL,

00:07:10.590 --> 00:07:17.600
and you also set the
QTMovieOpenAsyncOK attribute to null.

00:07:17.640 --> 00:07:20.840
So essentially, you would be saying,
it's not OK to do that

00:07:21.100 --> 00:07:22.740
fancy asynchronous opening.

00:07:22.740 --> 00:07:25.970
I want you to take your time,
get all the movie data,

00:07:26.170 --> 00:07:28.300
and then return to me.

00:07:28.340 --> 00:07:32.340
So if you do this,
then you can't-- this is good code.

00:07:32.340 --> 00:07:36.190
You could then call
the attribute for key,

00:07:36.310 --> 00:07:41.260
looking for any of the movie properties,
and you could start the movie playing.

00:07:41.690 --> 00:07:45.140
What's wrong with this method is that,
again, if you've got a slow server,

00:07:45.140 --> 00:07:47.600
you're just going to be blocking
your application for as long

00:07:47.600 --> 00:07:51.900
as it takes for every little
piece of that movie to download.

00:07:52.140 --> 00:07:54.850
And what's even worse is that you
don't need every little piece of

00:07:54.850 --> 00:07:57.360
the movie in order to do either
of the things you want to do.

00:07:57.360 --> 00:08:00.710
In order to determine the
natural size of the movie,

00:08:00.710 --> 00:08:03.490
you just need the movie atom,
which is probably a couple

00:08:03.540 --> 00:08:06.150
thousand bytes or maybe even less
at the beginning of the movie,

00:08:06.150 --> 00:08:07.550
and you can get that real quick.

00:08:07.580 --> 00:08:11.330
And also, to start the movie playing,
you don't need to have all the

00:08:11.330 --> 00:08:13.120
movie media data available.

00:08:13.460 --> 00:08:18.220
You just need enough of the data such
that if you were to start playing now,

00:08:18.270 --> 00:08:21.960
by the time all of the data arrived,
you'd be at the end.

00:08:23.840 --> 00:08:27.460
So the better way to handle
this issue is to monitor what

00:08:27.460 --> 00:08:28.900
we call the movie load state.

00:08:28.900 --> 00:08:31.160
And we do it like this,
and I apologize for

00:08:31.160 --> 00:08:32.680
that huge chunk of code.

00:08:32.680 --> 00:08:36.740
But once again, we could use movie with
URL to open the movie.

00:08:36.740 --> 00:08:40.460
And again,
that will execute asynchronously.

00:08:40.460 --> 00:08:43.460
And then what we do is
register for a notification.

00:08:43.460 --> 00:08:46.060
In this case,
we want to look for the movie load

00:08:46.070 --> 00:08:48.140
state did change notification.

00:08:48.140 --> 00:08:51.430
And when we get that notification,
we'll call this load

00:08:51.430 --> 00:08:52.990
state changed method.

00:08:53.700 --> 00:08:57.350
And you can see what I'm doing is
looking for two different thresholds.

00:08:57.360 --> 00:08:59.660
I apologize for the hard-coded constants.

00:08:59.660 --> 00:09:02.370
It turns out that
QTKit doesn't help us out here.

00:09:02.380 --> 00:09:06.300
In movies.h,
there are a couple of constants,

00:09:06.300 --> 00:09:08.430
but probably you're
not including movies.h.

00:09:08.510 --> 00:09:11.810
So we will add some constants
to QTKit so you don't have those

00:09:11.810 --> 00:09:15.000
ugly 10,000 and 20,000 in there.

00:09:15.030 --> 00:09:19.480
So when you get to the 10,000 state,
that means that your movie is playable.

00:09:19.480 --> 00:09:23.250
And what that really means is
that the movie atom is available.

00:09:23.760 --> 00:09:27.030
So at that point,
you can query the movie properties.

00:09:27.060 --> 00:09:28.570
You could ask for the natural size.

00:09:28.620 --> 00:09:31.830
You could ask for the duration,
anything you wanted to know about it.

00:09:31.900 --> 00:09:36.050
The next threshold that we're
interested in is 20,000.

00:09:36.060 --> 00:09:40.330
And what that means is that the movie
is now playable through to the end.

00:09:40.360 --> 00:09:42.660
It doesn't mean that
all the data is there.

00:09:42.660 --> 00:09:46.080
It just means that by the time
we got to some data we needed,

00:09:46.130 --> 00:09:47.850
we think it would be there.

00:09:48.950 --> 00:09:53.950
A third possibility that you have now in
Leopard is to use the autoplay method.

00:09:53.960 --> 00:09:55.780
And we could do that like this.

00:09:55.820 --> 00:09:59.220
We could, again,
open the movie using movie with URL.

00:09:59.220 --> 00:10:02.960
That will execute asynchronously.

00:10:02.960 --> 00:10:05.040
So right away, we'll get a movie back.

00:10:05.060 --> 00:10:08.000
And then we can call
this new method autoplay.

00:10:08.000 --> 00:10:11.240
And autoplay just means what I've
said a couple of times already.

00:10:11.240 --> 00:10:16.550
Go ahead and start the movie when you
think you've got enough data to play

00:10:16.720 --> 00:10:18.640
it through to the end uninterrupted.

00:10:20.870 --> 00:10:23.210
Okay,
now let's talk about some new APIs we've

00:10:23.210 --> 00:10:25.910
added to the existing classes.

00:10:29.520 --> 00:10:32.580
In QTMovie, we've added five general
categories of methods.

00:10:32.580 --> 00:10:36.360
We have some methods that allow you
to create writable movie containers.

00:10:36.360 --> 00:10:37.680
I'll explain that more in a minute.

00:10:37.680 --> 00:10:41.750
We've got some utilities that
will help you execute QTMovie,

00:10:42.180 --> 00:10:44.380
sorry, QTKit methods on a thread.

00:10:44.380 --> 00:10:46.430
We have this autoplay
method that we just saw,

00:10:46.430 --> 00:10:48.980
so we don't need to talk
about that really much more.

00:10:48.980 --> 00:10:52.270
We have some methods that allow
you to tag movies with the

00:10:52.270 --> 00:10:54.580
visual aperture mode information.

00:10:55.100 --> 00:10:57.160
I'm not going to explain
that in great detail.

00:10:57.160 --> 00:11:00.480
I hope you were at the talk yesterday,
or the modern video talk,

00:11:00.480 --> 00:11:03.880
I believe it was today,
where he talked in great length about

00:11:03.880 --> 00:11:07.830
the four different aperture modes and
what the exact meaning of those was.

00:11:07.840 --> 00:11:10.530
And finally,
we have some methods that allow

00:11:10.530 --> 00:11:12.730
you to create chapters in a movie.

00:11:12.740 --> 00:11:15.840
A chapter is a named segment of a movie.

00:11:15.840 --> 00:11:20.760
The asterisk on that one means that
it's not in the seed that you have now.

00:11:20.760 --> 00:11:23.210
We haven't gotten the
implementation fully in there,

00:11:23.210 --> 00:11:25.070
but we will have those in Leprechaun.

00:11:25.100 --> 00:11:25.940
Bye.

00:11:26.590 --> 00:11:30.400
We've added one class of
methods in QTMovieView,

00:11:30.400 --> 00:11:33.260
which are what I call
controller bar button methods.

00:11:33.310 --> 00:11:36.530
And we already saw one of those,
where I was able to hide the step

00:11:36.580 --> 00:11:39.170
buttons in the movie controller bar.

00:11:39.840 --> 00:11:43.240
In QTTrack,
we also have the track analogs of

00:11:43.240 --> 00:11:45.990
the visual aperture mode methods.

00:11:45.990 --> 00:11:50.650
And we have a very nice new attribute
called the format summary attribute.

00:11:51.000 --> 00:11:52.760
So here's what declarations look like.

00:11:52.760 --> 00:11:57.140
The QTMovie writable
movie container methods.

00:11:57.840 --> 00:11:58.840
The idea is this.

00:11:58.840 --> 00:12:03.340
When QTKit first came out,
the methods that we supplied

00:12:03.340 --> 00:12:07.770
allowed you to open existing
QuickTime movies and to edit them.

00:12:07.850 --> 00:12:11.840
There was no facility whatsoever
to create new QTMovie objects

00:12:11.840 --> 00:12:15.960
and have things work out the way
you think they should work out.

00:12:16.030 --> 00:12:19.820
And believe it or not,
people wanted to create new movies.

00:12:20.900 --> 00:12:24.770
So DTS put together some sample
code that helped them in this,

00:12:25.030 --> 00:12:27.900
and we'll actually look
at that in a second.

00:12:27.900 --> 00:12:31.800
But the best solution is for us to
give you a method where you can say,

00:12:31.800 --> 00:12:33.360
"Here's a file name.

00:12:33.360 --> 00:12:36.810
Create a new file there
and give me back a QTMovie,

00:12:36.810 --> 00:12:40.820
and if I add any data to that QTMovie,
it should go into that

00:12:40.820 --> 00:12:45.320
file." And as you can see,
we also have the ability to do

00:12:45.480 --> 00:12:50.800
that to a block of memory and data
or to an arbitrary data reference.

00:12:52.490 --> 00:12:54.300
We've added a bunch of
threading utilities.

00:12:54.300 --> 00:12:57.360
If you've worked with QuickTime,
you know that there are some

00:12:57.490 --> 00:13:00.600
conditions about calling
things on background threads.

00:13:00.600 --> 00:13:04.270
And if you've actually worked with it,
you've had to resort to some

00:13:04.270 --> 00:13:08.250
C-level APIs in order to make sure
that things are as thread-safe

00:13:08.320 --> 00:13:09.790
as they can be under QuickTime.

00:13:09.800 --> 00:13:14.200
And if you've worked with them,
these names here should not surprise you.

00:13:14.200 --> 00:13:17.610
And we'll look at these
in more detail later.

00:13:18.640 --> 00:13:20.490
Autoplay, enough said.

00:13:20.500 --> 00:13:21.920
We've seen it in operation.

00:13:21.940 --> 00:13:26.340
QT Movie Visual Aperture Mode methods.

00:13:26.340 --> 00:13:30.300
Again, on the movie level,
the first method here,

00:13:30.300 --> 00:13:33.920
Generate Aperture Mode Dimensions,
will take a movie,

00:13:33.920 --> 00:13:36.460
and it will go through all
the tracks in the movie,

00:13:36.460 --> 00:13:40.050
and it will take its best guess
as to what the various aperture

00:13:40.090 --> 00:13:41.250
mode settings should be.

00:13:41.260 --> 00:13:44.510
So if you trust us,
you can just call Generate Aperture

00:13:44.510 --> 00:13:48.030
Mode Dimensions on a QT Movie object,
and you're done.

00:13:48.710 --> 00:13:50.430
Or if you don't trust us,
you can go ahead and

00:13:50.430 --> 00:13:51.340
remove the work we did.

00:13:51.340 --> 00:13:54.580
Now, on the track level,
we also have some

00:13:54.680 --> 00:13:56.280
Visual Aperture Mode methods.

00:13:56.280 --> 00:13:59.930
Again, if you trust us,
you can call on a QT track,

00:14:00.020 --> 00:14:04.880
Generate Aperture Mode Dimensions,
or if you don't trust us, you can say,

00:14:04.880 --> 00:14:07.710
for this given aperture mode,
and the four aperture modes

00:14:07.710 --> 00:14:11.890
are listed here at the bottom,
I want you to set the dimensions for that

00:14:11.890 --> 00:14:14.940
mode to this NS size that I'm passing in.

00:14:14.960 --> 00:14:21.190
So you have complete control over setting
these Visual Aperture Modes settings.

00:14:21.300 --> 00:14:23.600
The chapter methods are
going to look like this.

00:14:23.630 --> 00:14:24.920
Again, they're not in your seeds.

00:14:24.920 --> 00:14:25.800
Actually, play with them.

00:14:25.800 --> 00:14:29.080
So you'll be able to determine
whether a movie has some chapters.

00:14:29.080 --> 00:14:31.350
If it has them, how many it has.

00:14:31.350 --> 00:14:35.110
You can get an array of the chapters,
and that array will include

00:14:35.220 --> 00:14:38.680
for each chapter the string,
which is the chapter title,

00:14:38.890 --> 00:14:41.060
and the start time of that chapter.

00:14:42.750 --> 00:14:45.300
The fourth method there
I think is most interesting.

00:14:45.300 --> 00:14:47.540
You can add some chapters to a movie.

00:14:47.690 --> 00:14:49.800
I think that will be
very useful to people.

00:14:50.050 --> 00:14:51.870
Finally, you can remove chapters.

00:14:52.050 --> 00:14:56.080
And the last two methods allow
you to navigate within a movie,

00:14:56.080 --> 00:15:02.380
either by chapter index or given a time
to find which chapter is at that time.

00:15:03.150 --> 00:15:05.470
This looks like a lot of new methods,
but really it's just

00:15:05.540 --> 00:15:06.720
variations on a theme.

00:15:06.720 --> 00:15:09.760
Namely, for a given button in
the movie controller bar,

00:15:09.760 --> 00:15:13.640
tell me whether it's visible or not,
and also set it to whatever

00:15:13.640 --> 00:15:15.680
state I tell you to set it to.

00:15:17.740 --> 00:15:21.250
Finally, in QTTrack,
we've got this new attribute,

00:15:21.330 --> 00:15:22.890
the track format summary.

00:15:23.000 --> 00:15:26.660
And what that does is
hand me back an NSString,

00:15:26.660 --> 00:15:30.670
which is a human-readable,
localized description

00:15:30.730 --> 00:15:33.760
of the track's format.

00:15:33.880 --> 00:15:35.840
And we'll look at that later.

00:15:35.870 --> 00:15:38.540
So now let's jump in and do some work.

00:15:38.610 --> 00:15:45.370
Let's look at these writable file-- no,
I want to stay on slides, please.

00:15:49.930 --> 00:15:53.020
Okay, so as I said,
when QTKit first came out,

00:15:53.130 --> 00:15:56.430
we had no facility in the kit
to allow you to create an empty

00:15:56.430 --> 00:15:58.530
movie file and add data to it.

00:15:58.560 --> 00:16:02.720
And people, as I said,
wanted to do that for some reason.

00:16:02.720 --> 00:16:08.430
And we so got together with DTS and
concocted some sample code that

00:16:08.430 --> 00:16:11.130
sort of kind of worked and allowed
them to do what they wanted.

00:16:11.140 --> 00:16:16.320
And the key here is to call the
C-level API createMovieStorage.

00:16:17.060 --> 00:16:21.240
What that does is create a new
container at the specified location

00:16:21.240 --> 00:16:26.880
and return to you in the last
parameter a QuickTime movie that's

00:16:26.910 --> 00:16:32.490
associated with that file or
URL or memory location or whatever.

00:16:32.540 --> 00:16:36.740
So the first yellow line there
takes a file name and gives us

00:16:36.740 --> 00:16:39.500
back what we call a data reference.

00:16:39.500 --> 00:16:41.770
In fact, it gives us back a data
reference and the type.

00:16:41.970 --> 00:16:43.860
And as you can see,
we are passing those into

00:16:43.930 --> 00:16:45.600
the createMovieStorage call.

00:16:46.540 --> 00:16:48.440
So that's what we do at the C-level.

00:16:48.440 --> 00:16:51.990
And then in kit,
we will create a new QT movie by calling

00:16:51.990 --> 00:16:54.900
the movieWithQuickTimeMovie method.

00:16:54.900 --> 00:16:57.590
And then, of course,
we need to set that movie to

00:16:57.590 --> 00:17:01.150
be editable because by default,
a QT movie is not editable.

00:17:02.800 --> 00:17:04.400
So that's the setup we'd have to do.

00:17:04.400 --> 00:17:07.880
Now we could add some data to the movie,
and we might do it like this.

00:17:07.960 --> 00:17:13.980
There's this nice add image for duration
with attributes method in QTMovie.

00:17:14.040 --> 00:17:16.360
And we would get an image here.

00:17:16.360 --> 00:17:17.880
We're reading it out of our bundle.

00:17:17.990 --> 00:17:21.010
We'll specify a dictionary of
settings as to what codec we

00:17:21.010 --> 00:17:23.200
want that image to be saved with.

00:17:23.220 --> 00:17:27.400
And then we call add image,
and the image gets added to the movie.

00:17:28.670 --> 00:17:30.720
Oh, we're not done yet.

00:17:30.830 --> 00:17:33.100
So you've added this image to the movie.

00:17:33.200 --> 00:17:38.000
You think you could be able to call the
general method that updates a movie file,

00:17:38.000 --> 00:17:39.560
namely update movie file.

00:17:39.560 --> 00:17:40.670
No.

00:17:40.670 --> 00:17:44.950
This old way has the
problem that that will fail.

00:17:44.950 --> 00:17:49.560
So what you need to do now is take that
movie that is on disk and has data in it

00:17:49.560 --> 00:17:52.300
and flatten it into yet a second movie.

00:17:53.970 --> 00:17:57.060
So that's why I'm calling the
right to file with attributes,

00:17:57.060 --> 00:17:59.710
passing in a dictionary where I say,
I just want to flatten this

00:17:59.710 --> 00:18:02.790
movie into this new location.

00:18:02.910 --> 00:18:04.040
Well, that's tedious.

00:18:04.080 --> 00:18:08.780
So take all three slides that I've just
shown you and put them into this one.

00:18:08.810 --> 00:18:12.620
This is the value of this new method,
this initToWritableFile.

00:18:12.770 --> 00:18:18.480
We start by calling initToWritableFile,
passing it a path name.

00:18:18.520 --> 00:18:21.240
We'll then do the standard add image.

00:18:21.460 --> 00:18:22.830
That hasn't changed.

00:18:22.910 --> 00:18:26.190
And we end it all up by
calling updateMovieFile,

00:18:26.190 --> 00:18:26.980
and we're done.

00:18:27.330 --> 00:18:32.300
That file on disk now has all the
data in it that we want it to have.

00:18:36.490 --> 00:18:40.480
So now let's do a demo of this.

00:18:40.480 --> 00:18:43.380
Is that my writable file demo?

00:18:43.420 --> 00:18:45.740
Is that my project?

00:18:46.100 --> 00:18:49.540
All right, let's look at the code
that I'm going to run.

00:18:49.610 --> 00:18:51.760
You can see this is just
like what I had on the slide,

00:18:51.780 --> 00:18:56.300
except that instead of adding
one image to the movie,

00:18:56.300 --> 00:18:57.280
I'm adding three here.

00:18:57.280 --> 00:19:00.880
Again,
they're just all stored in my bundle.

00:19:00.930 --> 00:19:02.760
And then I call updateMovieFile.

00:19:02.810 --> 00:19:06.240
And you'll notice that at the end,
I'm going to set the movie on the view,

00:19:06.240 --> 00:19:10.190
so that once I've created the movie,
it should pop up in my view.

00:19:10.310 --> 00:19:13.320
So let's run that.

00:19:20.080 --> 00:19:23.860
So I just click
Create Movie real quickly.

00:19:23.880 --> 00:19:27.460
The movie is created on disk
and comes up in my movie view.

00:19:27.500 --> 00:19:30.400
And if I go through it,
you can see it has three frames,

00:19:30.420 --> 00:19:33.430
and each one lasts for three seconds.

00:19:34.020 --> 00:19:37.390
Now, just for those doubting
Thomases in the audience,

00:19:37.390 --> 00:19:42.630
you can see that I wrote the file
into slash temp slash new movie.

00:19:42.630 --> 00:19:44.690
So let's go to slash temp.

00:19:47.430 --> 00:19:52.300
And is there something
called new movie there?

00:19:52.330 --> 00:19:53.460
Yes, there is.

00:19:53.490 --> 00:19:55.840
Let's open new movie.

00:19:56.590 --> 00:19:59.030
This will come up in QuickTime Player,
and it's the movie we just

00:19:59.030 --> 00:20:00.040
saw come up in the view.

00:20:00.040 --> 00:20:03.640
So we did take three
images from our bundle,

00:20:03.690 --> 00:20:07.950
put them into a movie,
and the movie exists on disk.

00:20:12.070 --> 00:20:13.360
Okay, can we go back to slides, please?

00:20:13.360 --> 00:20:19.220
So, some people will find
that a very useful method,

00:20:19.260 --> 00:20:20.110
and we've added it in.

00:20:20.120 --> 00:20:22.220
Now, let's talk about threading.

00:20:22.220 --> 00:20:24.760
QTKit is built on QuickTime.

00:20:24.760 --> 00:20:26.270
QuickTime is very old.

00:20:26.270 --> 00:20:28.700
QuickTime has some issues with threading.

00:20:28.700 --> 00:20:31.430
QuickTime is not, in general,
thread-safe.

00:20:31.430 --> 00:20:34.860
In order to do QuickTime operations
on secondary threads,

00:20:34.860 --> 00:20:37.100
you need to jump through some hoops.

00:20:37.480 --> 00:20:41.760
The primary hoop that you
have to jump through is this.

00:20:41.760 --> 00:20:46.860
QuickTime wants to operate on a
movie on only one thread at a time.

00:20:46.900 --> 00:20:50.340
So, I can't be doing something to
a movie on the main thread and

00:20:50.340 --> 00:20:52.180
also on a background thread.

00:20:52.200 --> 00:20:56.120
So, it is incumbent upon me,
as a developer,

00:20:56.120 --> 00:21:02.020
to tell QuickTime when I want to stop
working on a movie on one thread and

00:21:02.020 --> 00:21:05.530
start working on it on another thread.

00:21:08.190 --> 00:21:10.920
So this is what you'd think,
as a Cocoa programmer,

00:21:10.920 --> 00:21:12.460
you ought to be able to do.

00:21:12.480 --> 00:21:17.310
Open a movie that's in a file,
and then call the standard detached

00:21:17.310 --> 00:21:23.390
new thread selector to run some
method on a background thread.

00:21:23.660 --> 00:21:25.820
So that's what I think you
ought to be able to do.

00:21:25.850 --> 00:21:28.620
And then on the background thread,
you'd think that it

00:21:28.680 --> 00:21:30.400
should look like this.

00:21:30.430 --> 00:21:33.660
You create and release
your auto-release pool.

00:21:33.660 --> 00:21:36.420
You always do that on
a background method.

00:21:36.470 --> 00:21:40.560
And then you should be able to say,
export the file in that method.

00:21:40.760 --> 00:21:42.940
So that's what you'd like to do,
and that's what an untutored

00:21:43.090 --> 00:21:44.980
Cocoa programmer would do.

00:21:45.030 --> 00:21:47.770
And you'd run into
problems if you did that.

00:21:48.010 --> 00:21:51.850
Again, as I said,
it's your job to tell QuickTime when

00:21:51.850 --> 00:21:55.000
you no longer want to work
on a movie on a given thread.

00:21:55.000 --> 00:21:58.200
So in the main thread,
we'll open the movie,

00:21:58.200 --> 00:22:02.420
and then we'll call this C-level API,
Detach Movie from Current Thread.

00:22:02.420 --> 00:22:05.840
That just says to QuickTime,
I'm done with the movie on this thread.

00:22:05.860 --> 00:22:08.880
And then you do your
Detach New Thread Selector.

00:22:08.880 --> 00:22:09.760
Okay?

00:22:09.760 --> 00:22:11.770
So that's all you
really have to do there.

00:22:11.780 --> 00:22:15.200
In Leopard, we've given you a method that
makes things have a little

00:22:15.490 --> 00:22:18.860
bit better Cocoa flavor,
namely detached from current

00:22:18.860 --> 00:22:21.300
thread on a QT movie.

00:22:21.830 --> 00:22:26.170
And then, on the background thread,
this is what you need to do.

00:22:26.380 --> 00:22:29.940
You need to attach that
movie to the current thread.

00:22:30.040 --> 00:22:31.460
Then you need to do your work.

00:22:31.550 --> 00:22:34.600
And then you're probably going to want
to detach it from the current thread.

00:22:34.600 --> 00:22:37.610
But before you do any of that,
you have to tell QuickTime, oh,

00:22:37.610 --> 00:22:41.190
by the way, I'd really like to do some
QuickTime stuff on this thread.

00:22:41.200 --> 00:22:46.230
QuickTime needs to know that, too.

00:22:46.230 --> 00:22:48.060
So we call this Enter Movies on Thread.

00:22:48.250 --> 00:22:50.760
is the developer of the QTKit function.

00:22:50.760 --> 00:22:52.600
And then when we're done,
we're going to call

00:22:52.600 --> 00:22:54.200
exit movies on thread.

00:22:54.200 --> 00:22:56.200
Once again,
we've got some new QTKit methods

00:22:56.200 --> 00:23:00.060
that make it look more Cocoa,
and so you don't have to dip down

00:23:00.380 --> 00:23:02.590
into the C-level API anymore,
and they look like that.

00:23:02.980 --> 00:23:04.400
Okay, there's one more issue.

00:23:04.400 --> 00:23:08.050
So that's the snippet that
I just had of the old style,

00:23:08.050 --> 00:23:10.580
pre-leopard way of doing things.

00:23:10.580 --> 00:23:13.650
There's one little thing you
can do to make your app a

00:23:13.770 --> 00:23:17.450
little bit more bulletproof,
and that is to stop the movie from

00:23:17.450 --> 00:23:20.160
being idled on that background thread.

00:23:20.160 --> 00:23:23.510
So one could consider this to be a
bug in QTKit that it will continue

00:23:23.920 --> 00:23:27.600
to idle a movie on a background
thread when it really shouldn't.

00:23:27.600 --> 00:23:31.210
So this actually,
this call exists pre-leopard.

00:23:31.210 --> 00:23:32.880
So you can call this
as long as you want to.

00:23:33.900 --> 00:23:36.010
As long as you do the response to
selector thing to make sure you're safe.

00:23:36.080 --> 00:23:40.220
Let's look at a demo of this now.

00:23:52.090 --> 00:23:54.000
So let's look at the code
I'm going to be running.

00:23:54.000 --> 00:24:04.250
So when I click the Export button
that you'll see in my document window,

00:24:04.670 --> 00:24:06.140
I'm going to--

00:24:07.120 --> 00:24:09.800
called the detach from current
thread method that I talked about.

00:24:09.950 --> 00:24:12.390
So I'm telling QuickTime I'm
going to stop working with

00:24:12.390 --> 00:24:13.380
that movie on this thread.

00:24:13.380 --> 00:24:17.900
And if that completes successfully,
I want to then do the detach

00:24:17.900 --> 00:24:19.580
new thread selector thingy.

00:24:19.670 --> 00:24:22.960
And notice one other thing
I've done is I'm setting the

00:24:22.960 --> 00:24:25.760
movie on the movie view to nil.

00:24:25.770 --> 00:24:29.590
That's so that the user doesn't try
and say play the movie while it's being

00:24:29.590 --> 00:24:31.840
operated on in the background thread.

00:24:31.840 --> 00:24:34.050
So I'm just being safe here.

00:24:34.050 --> 00:24:38.620
And then the method that I want
to run in this background,

00:24:38.810 --> 00:24:42.720
we'll call enterKitOnThread.

00:24:42.720 --> 00:24:45.550
Now the reason I have that
commented out line there is

00:24:45.640 --> 00:24:50.240
that in the code that you have,
it's the other line that's commented out.

00:24:50.240 --> 00:24:51.470
And that's the operative line.

00:24:51.550 --> 00:24:52.720
So we got it backwards there.

00:24:52.720 --> 00:24:55.660
So forget that that
big long line is there.

00:24:55.660 --> 00:24:57.680
You never saw it.

00:24:58.000 --> 00:25:02.220
Then what I'm going to want to do
is export this movie into a new

00:25:02.220 --> 00:25:05.690
format by calling write to file,
which is my standard method

00:25:05.690 --> 00:25:08.420
for exporting or flattening
or doing anything to a movie.

00:25:08.420 --> 00:25:14.800
And the dictionary I'm passing in says,
yes, I'd like you to export that movie.

00:25:15.040 --> 00:25:20.230
And if you could, would you please export
it to 3GPP format?

00:25:21.390 --> 00:25:24.470
So when I've done that,
I will then do the detach from

00:25:24.470 --> 00:25:28.610
current thread so that I can operate
on the movie back on the main thread

00:25:28.980 --> 00:25:31.440
and call execute QTKit on thread.

00:25:31.550 --> 00:25:34.310
And one final thing I've added
here is that I want to let the main

00:25:34.430 --> 00:25:37.740
thread know that it's safe to put
the movie back in the movie view.

00:25:37.770 --> 00:25:43.890
So I'll do this perform selector
on main thread and the selector is

00:25:45.250 --> 00:25:46.260
It's up top there.

00:25:46.350 --> 00:25:50.710
It's finish export,
and the finish export just attaches

00:25:50.780 --> 00:25:54.140
the movie back to the main thread and
sets the movie back into the view.

00:25:54.140 --> 00:25:57.100
So let's run that.

00:26:04.440 --> 00:26:09.300
So first thing I need
to do is open a movie.

00:26:09.300 --> 00:26:11.900
So I'll just open our favorite
little three-frame movie.

00:26:11.930 --> 00:26:15.400
I'm going to export it to 3GPP format.

00:26:15.440 --> 00:26:18.870
Notice that the view goes black
because I have disassociated

00:26:18.880 --> 00:26:20.000
the movie from the view.

00:26:20.190 --> 00:26:20.990
That was pretty quick.

00:26:21.060 --> 00:26:21.880
It came back right away.

00:26:22.900 --> 00:26:26.030
So if I'm lucky,
where did I export it to?

00:26:26.130 --> 00:26:28.900
Slash temp slash exported movie.

00:26:29.020 --> 00:26:32.900
So let's again look here.

00:26:33.400 --> 00:26:36.890
There is exported movie.

00:26:36.890 --> 00:26:36.890
Let's open it.

00:26:40.650 --> 00:26:43.150
And you'll notice that this is a
smaller version of the movie we

00:26:43.270 --> 00:26:48.640
saw because this is in 3GPP format,
that is to say, suitable for streaming

00:26:48.640 --> 00:26:50.730
to your cell phone.

00:26:53.250 --> 00:26:58.030
So let's close that up
and go back to slides,

00:26:58.030 --> 00:26:59.780
please.

00:27:03.620 --> 00:27:06.660
Okay,
the next thing I want to show is hiding

00:27:06.660 --> 00:27:09.060
and showing controller bar buttons,
and we've sort of seen that,

00:27:09.180 --> 00:27:09.920
so I'll go quickly.

00:27:09.920 --> 00:27:13.340
So if I could go to, well,
here's the basic thing.

00:27:13.360 --> 00:27:14.650
We've already seen these.

00:27:14.690 --> 00:27:15.900
Are step buttons visible?

00:27:15.900 --> 00:27:18.380
Well, tell me if the step buttons
are currently visible,

00:27:18.380 --> 00:27:19.900
and then setting them visible.

00:27:19.900 --> 00:27:21.960
Here,
I'm just toggling the state of that.

00:27:22.030 --> 00:27:26.700
So let's please go to the demo machine,
please.

00:27:26.720 --> 00:27:27.910
Okay.

00:27:36.360 --> 00:27:37.260
Let's look at the code.

00:27:37.260 --> 00:27:38.100
It's very simple.

00:27:38.100 --> 00:27:42.410
It's just a bunch of IB actions
that read the current state of

00:27:42.570 --> 00:27:45.820
whatever button I'm telling it to
toggle and then toggles the state.

00:27:45.910 --> 00:27:47.900
So nothing exciting there.

00:27:47.900 --> 00:27:49.730
Let's run it.

00:27:56.290 --> 00:28:01.200
I will open a linear movie,
our favorite movie,

00:28:01.200 --> 00:28:06.930
and you can see that I can say
hide and show the step buttons.

00:28:07.240 --> 00:28:10.070
I can hide and show this
so-called custom button.

00:28:10.510 --> 00:28:13.420
That's useful for you to say
to stick a menu off that,

00:28:13.510 --> 00:28:17.200
so when the user clicks there,
they could pull down a menu.

00:28:17.220 --> 00:28:20.190
Now let me open a QuickTime VR movie.

00:28:21.100 --> 00:28:41.900
[Transcript missing]

00:28:44.760 --> 00:28:48.640
And finally,
let's look at this track format demo.

00:28:48.680 --> 00:28:52.350
The idea here is we've added a
new attribute on a QTTrack object

00:28:52.460 --> 00:28:55.900
that lets me get a human-readable,
localized version of

00:28:55.900 --> 00:28:58.370
the format of the track.

00:28:58.550 --> 00:29:02.650
So here I'm taking all the tracks,
and I'm just taking the

00:29:02.650 --> 00:29:07.680
first track in the movie,
asking for its track format summary.

00:29:07.710 --> 00:29:12.550
And I will get back an NSString that
looks perhaps something like

00:29:12.550 --> 00:29:14.960
this if it's an MPEG-3 track.

00:29:15.220 --> 00:29:18.680
So let's again just do
a quick demo of that.

00:29:26.110 --> 00:29:28.070
We can look at the code,
but it's just sort of

00:29:28.070 --> 00:29:30.420
what you've already seen,
with the minor exception that this

00:29:30.420 --> 00:29:33.590
actually iterates through all the
tracks in the movie and builds up

00:29:33.590 --> 00:29:37.460
one big string that encapsulates the
information about all those tracks.

00:29:37.460 --> 00:29:39.520
So let's run that.

00:30:00.400 --> 00:30:12.700
[Transcript missing]

00:30:14.670 --> 00:30:15.590
You didn't see that.

00:30:15.600 --> 00:30:22.980
Let me go back to my project window.

00:30:25.200 --> 00:30:29.470
I will reveal to you why that was red,
which is that we built

00:30:29.480 --> 00:30:32.600
and ran a 64-bit app.

00:30:32.620 --> 00:30:37.740
We really would like to be in 32 bits,
don't you think?

00:30:37.740 --> 00:30:41.710
Let's do that in 32 bits.

00:30:45.080 --> 00:30:46.540
Okay, so this should work better.

00:30:46.540 --> 00:30:48.360
We will open that same movie.

00:30:48.360 --> 00:30:53.250
And now we see that this movie,
I've printed out the

00:30:53.350 --> 00:30:54.380
format summary there.

00:30:54.380 --> 00:30:55.580
It has five tracks.

00:30:55.580 --> 00:30:57.880
Four of them are soundtracks.

00:30:57.880 --> 00:31:01.640
There are two pairs that
are identical in format.

00:31:01.640 --> 00:31:04.990
And then there's an
H.264 video track there.

00:31:04.990 --> 00:31:05.700
Okay.

00:31:05.700 --> 00:31:07.900
Very straightforward.

00:31:07.900 --> 00:31:10.560
Could I have slides, please?

00:31:16.090 --> 00:31:19.190
So those are the new APIs,
or at least a selection of

00:31:19.190 --> 00:31:23.220
the new APIs we've added to
the existing classes in QTKit.

00:31:23.220 --> 00:31:26.200
Let's talk a little bit
about 64-bit operation.

00:31:26.200 --> 00:31:29.700
As you've heard in several
of the talks already,

00:31:29.700 --> 00:31:33.770
if you need to get quick time
operations in your 64-bit app,

00:31:33.880 --> 00:31:35.640
you need to use QTKit.

00:31:35.640 --> 00:31:40.250
The API that you're going to use
is identical to the 32-bit API,

00:31:40.250 --> 00:31:42.510
with a couple of exceptions.

00:31:43.180 --> 00:31:47.670
First of all, and most importantly,
you cannot use any methods that access

00:31:47.670 --> 00:31:50.040
the native QuickTime data types.

00:31:50.040 --> 00:31:53.350
So the two that I've listed,
QuickTime Movie and

00:31:53.350 --> 00:31:58.400
QuickTime Movie Controller,
are not available to you in 64-bit.

00:31:58.420 --> 00:32:01.120
Those are what you use to get
the QuickTime Movie or the

00:32:01.120 --> 00:32:04.370
QuickTime Movie Controller that
you can then call the C API on.

00:32:04.420 --> 00:32:07.230
Well, there is no C API for
QuickTime in 64-bit,

00:32:07.230 --> 00:32:10.130
so they'd be pretty useless
for us to provide those.

00:32:10.460 --> 00:32:13.280
So let's do a demo of 64-bit.

00:32:13.480 --> 00:32:14.700
You've already seen one.

00:32:14.700 --> 00:32:17.230
But just for the heck of it,
I'm going to do it over here

00:32:17.240 --> 00:32:18.800
on this new Intel machine.

00:32:18.800 --> 00:32:19.990
Here we go.

00:32:23.070 --> 00:32:27.050
And it was called,
I'm running the same app that I just ran,

00:32:27.050 --> 00:32:28.460
namely Track Format Demo.

00:32:28.460 --> 00:32:31.980
And I will open that same movie.

00:32:36.290 --> 00:32:40.250
And it was called,
I'm running the same app that I just ran,

00:32:40.250 --> 00:32:41.660
namely Track Format Demo.

00:32:41.660 --> 00:32:45.060
And I will open that same movie.

00:32:57.250 --> 00:33:01.400
Some of you might not believe
that that's really 64-bit,

00:33:01.470 --> 00:33:06.540
but I can prove it to you
because I can run ps-l.

00:33:06.540 --> 00:33:11.000
Let's try that again.

00:33:15.440 --> 00:33:20.030
This lists all the running processes,
and one nice thing about the "-l" option

00:33:20.030 --> 00:33:23.400
is that it prints this flags field here.

00:33:23.400 --> 00:33:28.750
And if I can find my running program...

00:33:32.970 --> 00:33:35.060
This is it right here.

00:33:35.070 --> 00:33:38.140
And I know that because it says 4004.

00:33:38.140 --> 00:33:43.160
The final four there is a flag that
means this is running in 64-bit space.

00:33:43.160 --> 00:33:46.080
And if you look at that column,
you'll see that nothing else

00:33:46.210 --> 00:33:47.900
is running in 64-bit space.

00:33:47.900 --> 00:33:52.920
So indeed, I am running this as
a 64-bit application.

00:33:52.920 --> 00:33:58.490
And I'll stop there.

00:33:58.490 --> 00:33:58.490
Thank you.

00:33:59.930 --> 00:34:00.710
Can I go back to slides?

00:34:00.710 --> 00:34:04.380
Thank you.

00:34:05.570 --> 00:34:07.610
To me, it's kind of hard to believe
that that actually works,

00:34:07.800 --> 00:34:07.990
right?

00:34:08.100 --> 00:34:11.640
I mean, we've said QuickTime is
not available in 64-bit,

00:34:11.750 --> 00:34:13.130
but QTKit is available.

00:34:13.130 --> 00:34:14.650
Well, that's sort of an evasion.

00:34:14.650 --> 00:34:16.700
That doesn't explain how it works, right?

00:34:16.700 --> 00:34:19.860
I mean, QTKit depends on QuickTime.

00:34:19.900 --> 00:34:21.320
So how do we get this to work?

00:34:22.380 --> 00:34:25.780
Normally,
we don't give you implementation details,

00:34:25.830 --> 00:34:27.260
which is what I'm about to give you.

00:34:27.260 --> 00:34:32.050
And the only reason I'm giving you
these is because in the seed you have,

00:34:32.090 --> 00:34:35.630
if you want to build 64-bit apps,
you might need to know some of this,

00:34:35.630 --> 00:34:38.120
with the caveat that these
are subject to change.

00:34:38.140 --> 00:34:43.960
So we have QTKit, and it exists as a 64-
and a 32-bit framework.

00:34:45.550 --> 00:34:48.840
A Cocoa application or indeed
a Carbon application can link

00:34:48.840 --> 00:34:53.750
against the 64-bit QTKit framework.

00:34:54.200 --> 00:34:59.660
And it can call QTKit methods
such as MoviePlay.

00:35:00.210 --> 00:35:04.960
The way we've implemented this is to have
a client and server model running here.

00:35:04.960 --> 00:35:09.820
So the client essentially is
the 64-bit QTKit framework.

00:35:09.820 --> 00:35:12.860
And as you can see,
the implementation of that

00:35:13.070 --> 00:35:17.140
play method is just to make an
IPC call over to QTKit server.

00:35:17.140 --> 00:35:20.110
And we're using MIG-based IPC here,
so we've got Mach messages

00:35:20.110 --> 00:35:23.780
running between these two,
so we're getting really good performance.

00:35:23.780 --> 00:35:26.730
And the rest of the story
should be pretty obvious.

00:35:26.760 --> 00:35:31.170
QTKit server links up with
the 32-bit version of QTKit,

00:35:31.170 --> 00:35:33.780
which then accesses
QuickTime capabilities.

00:35:35.320 --> 00:35:36.730
And you've seen it work.

00:35:36.930 --> 00:35:37.960
I mean, it actually works.

00:35:38.120 --> 00:35:40.760
So that's pretty amazing to me.

00:35:40.960 --> 00:35:43.240
There are some limitations.

00:35:43.330 --> 00:35:46.070
In the seed that you have,
the capture classes are not available.

00:35:46.140 --> 00:35:48.050
I'll talk about those in just a second.

00:35:48.050 --> 00:35:50.500
There's no reason they
couldn't have been there,

00:35:50.500 --> 00:35:54.360
it's just there was a deadline we had
to meet and they didn't make it in.

00:35:54.410 --> 00:35:56.360
I fully expect that in
the next seed you get,

00:35:56.470 --> 00:35:58.870
the capture classes will
be available in 64-bit.

00:35:58.970 --> 00:36:02.770
You cannot currently use
QTMovie delegate methods.

00:36:02.770 --> 00:36:06.030
I doubt that anybody here could
actually tell me one of the

00:36:06.180 --> 00:36:09.220
five QTMovie delegate methods,
so you're probably not using them,

00:36:09.220 --> 00:36:12.700
so that's probably not a big problem.

00:36:12.700 --> 00:36:16.860
You cannot do drag and drop editing
out of a QTMovie view in 64-bit.

00:36:17.200 --> 00:36:19.910
Again, that's simply a limitation
of the seed deadline.

00:36:19.910 --> 00:36:22.520
That should be fixed real soon.

00:36:22.520 --> 00:36:24.190
You've already seen number four there.

00:36:24.290 --> 00:36:25.820
There are some drawing glitches.

00:36:25.840 --> 00:36:30.320
So you saw that big red rectangle where
there should have been a movie view.

00:36:30.410 --> 00:36:31.840
That's the glitch.

00:36:31.840 --> 00:36:33.740
And occasionally,
and this is why I'm giving you

00:36:33.740 --> 00:36:36.750
the implementation details that
I really shouldn't be giving you,

00:36:36.750 --> 00:36:40.370
you might need to kill the server or
you might need to restart the server.

00:36:40.500 --> 00:36:43.250
The server should restart automatically.

00:36:43.260 --> 00:36:46.800
It's managed by launchd,
but launchd has this feature

00:36:47.010 --> 00:36:50.510
that if it finds a server
that it thinks is a bad boy,

00:36:50.510 --> 00:36:54.380
it'll give him a timeout and
it won't relaunch him ever.

00:36:54.530 --> 00:36:57.380
So you might need to
do something like this.

00:36:57.380 --> 00:37:03.500
So just do man launch control and
you'll see exactly what this means.

00:37:03.500 --> 00:37:06.410
All right, now what you're all here for,
I'm sure.

00:37:06.410 --> 00:37:08.000
Capture in QTKit.

00:37:14.210 --> 00:37:16.400
As I said yesterday,
the important thing for you to

00:37:16.400 --> 00:37:20.440
understand is that the new capture
classes that we're offering you are not

00:37:20.600 --> 00:37:22.800
just a wrapper on the sequence grabber.

00:37:22.800 --> 00:37:25.020
We could have given
you that two years ago.

00:37:25.020 --> 00:37:28.220
In fact, if you go out on the web and
spend a little time with Google,

00:37:28.220 --> 00:37:32.910
you can find four or five
sets of Cocoa classes that are

00:37:32.930 --> 00:37:36.270
wrappers on the sequence grabber.

00:37:36.280 --> 00:37:38.090
We didn't want to do that.

00:37:38.290 --> 00:37:42.010
Sequence grabber is so 1991 technology.

00:37:42.060 --> 00:37:43.480
You don't want that.

00:37:44.160 --> 00:37:46.970
You want something built on
a brand new capture engine.

00:37:46.980 --> 00:37:49.370
You want something built
on an engine which,

00:37:49.430 --> 00:37:52.220
for instance,
absolutely will not drop frames.

00:37:52.350 --> 00:37:54.150
That's one quirk of the sequence grabber.

00:37:55.690 --> 00:37:59.520
So this new engine gives us the
capabilities that I've listed there.

00:37:59.520 --> 00:38:02.770
You get very, very accurate audio-visual
synchronization.

00:38:02.920 --> 00:38:05.370
Again, Sequence Grabber had its problems.

00:38:05.440 --> 00:38:07.560
You can get frame-accurate capture.

00:38:07.690 --> 00:38:10.670
By that I mean, you can say,
I want you to start capturing

00:38:10.670 --> 00:38:14.450
at exactly this time code,
and I want exactly 245 frames

00:38:14.560 --> 00:38:17.470
in the file that you write out,
and you'll get it.

00:38:17.600 --> 00:38:19.600
We simply don't drop frames.

00:38:19.600 --> 00:38:23.510
You get access to the transport
controls of your camcorder,

00:38:23.520 --> 00:38:25.570
so you can fast-forward
and rewind the tape.

00:38:25.640 --> 00:38:29.330
As you saw yesterday,
you get HDV capture if you have

00:38:29.400 --> 00:38:34.100
the appropriate codecs installed,
and there's a whole lot more capabilities

00:38:34.110 --> 00:38:36.230
that I simply don't have time to mention.

00:38:38.220 --> 00:38:40.070
So what devices are supported?

00:38:40.320 --> 00:38:42.890
The internal and external
eyesight cameras,

00:38:42.890 --> 00:38:45.070
of course, are supported.

00:38:45.460 --> 00:38:46.440
HGV devices.

00:38:46.440 --> 00:38:49.160
Again, if you happen to have
Final Cut Pro installed,

00:38:49.160 --> 00:38:52.220
then you can capture from one
of these nice HDV camcorders.

00:38:52.220 --> 00:38:55.990
You can capture from
Core Audio HAL devices.

00:38:55.990 --> 00:38:59.800
So everything that's in yellow
there is in the siege you have.

00:38:59.860 --> 00:39:03.880
The two white ones are yet to be
implemented or yet to come to you.

00:39:03.880 --> 00:39:07.370
That is to say DV devices,
and we are going to grandfather

00:39:07.370 --> 00:39:09.790
in sequence grabber video devices.

00:39:09.930 --> 00:39:12.700
So if you've got an existing
device that gives you video

00:39:12.700 --> 00:39:17.270
through sequence grabber channels,
we'll be able to use it.

00:39:18.600 --> 00:39:19.050
Let me go back.

00:39:19.140 --> 00:39:21.060
I don't want to show you that yet.

00:39:21.170 --> 00:39:23.970
As I said, QTKit has tripled in size.

00:39:23.990 --> 00:39:27.800
We went from five classes to 16.

00:39:27.900 --> 00:39:31.360
Those 11 new classes
are all capture classes.

00:39:31.360 --> 00:39:35.250
It's a very complex new architecture
that we're giving you because it's

00:39:35.390 --> 00:39:38.270
built on a pro-grade foundation,
and we want to give you

00:39:38.270 --> 00:39:40.020
the capabilities you need.

00:39:41.300 --> 00:39:43.500
I'm not going to talk
about all 11 classes today.

00:39:43.500 --> 00:39:47.980
We don't have time and I frankly
don't understand all 11 classes.

00:39:47.980 --> 00:39:51.040
So what I want to do is give you a
simplified picture and I'm going to

00:39:51.040 --> 00:39:54.280
actually build a capture application
from scratch so you can see that you

00:39:54.280 --> 00:39:56.860
don't need to know those 11 classes.

00:39:56.860 --> 00:39:59.210
Some of those are very specialized.

00:39:59.260 --> 00:40:02.700
The basic idea for QTKit capture is this.

00:40:02.730 --> 00:40:06.400
You have an object called
a QTCaptureSession.

00:40:06.400 --> 00:40:08.600
That's your capture object.

00:40:08.600 --> 00:40:13.590
That's what you're going to use
to start and stop your capture.

00:40:13.770 --> 00:40:17.520
This capture session gets
its data from somewhere.

00:40:17.920 --> 00:40:19.820
We call that an input.

00:40:19.920 --> 00:40:24.620
So that's going to be your
camcorder or your eyesight.

00:40:24.740 --> 00:40:28.860
And this capture session wants
to put its output somewhere.

00:40:29.220 --> 00:40:31.760
And you'll see that there are two
outputs that I'm going to show you today.

00:40:31.760 --> 00:40:34.020
One is a file.

00:40:34.330 --> 00:40:36.560
You want to write the data to a file.

00:40:36.650 --> 00:40:40.110
The second output is the,
you want an on-screen preview

00:40:40.110 --> 00:40:41.700
of what you're capturing.

00:40:41.920 --> 00:40:44.630
So from the one input
through the capture session,

00:40:44.630 --> 00:40:49.400
you're going to get a preview
into a QTCapture view,

00:40:49.410 --> 00:40:51.590
and you're going to write
the data into a file.

00:40:51.600 --> 00:40:56.790
So that's the real basic
architecture you need to understand.

00:40:56.800 --> 00:40:58.860
The capture session ties it all together.

00:40:58.860 --> 00:41:01.860
You have some inputs,
and you have some outputs.

00:41:01.940 --> 00:41:03.940
So now let's look at this diagram.

00:41:03.940 --> 00:41:07.130
There in the middle is
our capture session.

00:41:07.140 --> 00:41:10.470
It's managing a QTCapture device input.

00:41:11.130 --> 00:41:14.430
That is to say,
an input that's associated with a device.

00:41:14.600 --> 00:41:18.080
Now, you could imagine there might
be other sorts of inputs.

00:41:18.080 --> 00:41:21.320
We haven't implemented any in this seed,
but in the future, we can.

00:41:21.320 --> 00:41:23.750
We've got the architecture there
to be able to plug things in.

00:41:25.130 --> 00:41:29.620
The capture device input is
associated with a capture device,

00:41:29.660 --> 00:41:33.700
which is just a representation
of the camcorder.

00:41:34.400 --> 00:41:38.840
The outputs that I'm showing here
are a QTCapture movie output.

00:41:38.890 --> 00:41:41.380
That's what manages the
writing into the file,

00:41:41.380 --> 00:41:45.530
and that is associated with a QT movie.

00:41:46.530 --> 00:41:51.090
On the other side, the output is, well,
ultimately to the capture view,

00:41:51.100 --> 00:41:53.690
what you're previewing on screen.

00:41:53.780 --> 00:41:57.130
And associated with the capture
view is an output called a

00:41:57.290 --> 00:42:00.540
QTCaptureVideoPreviewOutput.

00:42:00.570 --> 00:42:03.340
Now, if you build a capture view,
you don't need to worry

00:42:03.340 --> 00:42:04.340
about that other object.

00:42:04.340 --> 00:42:08.780
It will take care of creating the
video preview output object itself.

00:42:08.810 --> 00:42:10.890
The reason I highlight it
is because maybe you don't

00:42:10.930 --> 00:42:12.820
want a preview into our view.

00:42:12.820 --> 00:42:17.700
Maybe you want to take the captured video
and composite it on an OpenGL surface.

00:42:17.700 --> 00:42:19.810
At that point,
you are going to need to work with

00:42:19.810 --> 00:42:22.170
the video preview output object.

00:42:23.780 --> 00:42:27.870
So here are, again, not all,
but some of the main capture classes.

00:42:27.890 --> 00:42:29.860
The capture session ties it all together.

00:42:29.860 --> 00:42:33.950
The capture input gives us
the capture device input.

00:42:34.200 --> 00:42:38.280
The capture output, as you can see,
there's the movie output and

00:42:38.280 --> 00:42:40.280
the video preview output.

00:42:40.280 --> 00:42:44.090
And that video preview output
might be transparent to you because

00:42:44.190 --> 00:42:46.320
it's handled by the capture view.

00:42:47.100 --> 00:42:50.940
Let's make a real quick tour through
some of these classes and look at the

00:42:51.390 --> 00:42:52.940
methods that you're likely to use.

00:42:52.940 --> 00:42:55.190
Again, for the,
I don't know how manyth time,

00:42:55.190 --> 00:42:58.570
the main object you're going to
work with is the capture session.

00:42:58.570 --> 00:43:01.670
You're going to add inputs
and add outputs to it.

00:43:01.810 --> 00:43:04.520
So the top two methods that
I'm showing there are ones

00:43:04.610 --> 00:43:06.600
you're certainly going to call.

00:43:06.600 --> 00:43:08.790
You can also remove outputs and inputs.

00:43:08.950 --> 00:43:11.200
And if you want,
you can get arrays of the

00:43:11.200 --> 00:43:12.970
current outputs and inputs.

00:43:15.600 --> 00:43:17.700
And as I said,
the capture session is where you're going

00:43:17.700 --> 00:43:19.280
to do most of your capture manipulation.

00:43:19.400 --> 00:43:21.360
So you can find out if I am capturing.

00:43:21.360 --> 00:43:23.400
You can start capturing.

00:43:23.400 --> 00:43:27.080
And then you think, well,
there ought to be a stop capturing call.

00:43:27.080 --> 00:43:28.600
Well, here we've got a real mouthful.

00:43:28.600 --> 00:43:31.120
Stop capturing with
post-processing delegate.

00:43:32.100 --> 00:43:32.930
Why do we need that?

00:43:32.940 --> 00:43:34.560
Why can't I just say stop capturing?

00:43:34.560 --> 00:43:37.690
The capture session,
or the output object,

00:43:37.950 --> 00:43:43.170
is going to write stuff into a file,
a temporary file that you cannot get at,

00:43:43.260 --> 00:43:44.130
really.

00:43:44.130 --> 00:43:47.550
There are delegate methods that allow
you to look at the frames as they

00:43:47.640 --> 00:43:51.040
come in and decide whether you want
them written to the file or not.

00:43:52.830 --> 00:43:57.740
When we want to stop capturing,
we're going to want to do

00:43:57.740 --> 00:43:59.700
something with that temporary file.

00:44:00.200 --> 00:44:04.740
Later,
what I'm going to do with it is flatten

00:44:04.740 --> 00:44:06.700
that file into a different file.

00:44:06.700 --> 00:44:10.340
Because if I'm writing data in
and then I say stop capturing

00:44:10.340 --> 00:44:12.910
with post-processing delegate,
at that time the movie

00:44:12.910 --> 00:44:15.690
Adam gets written to the file,
it's at the end of the file

00:44:15.700 --> 00:44:16.700
where I don't really want it.

00:44:16.700 --> 00:44:19.590
I want it at the beginning of the file,
so I'm going to want to do an export.

00:44:19.700 --> 00:44:22.390
Or a flatten, I'm sorry.

00:44:22.620 --> 00:44:24.480
Capture device methods.

00:44:24.480 --> 00:44:27.700
So we can get an array of all
the available input devices.

00:44:27.800 --> 00:44:29.190
That's how we're going
to know what to select.

00:44:29.300 --> 00:44:32.210
We can get the display
name of a given device.

00:44:32.210 --> 00:44:35.770
We can find out if it's connected or
whether another application is using it.

00:44:37.250 --> 00:44:41.310
At the device input level,
we can create a device input

00:44:41.380 --> 00:44:44.750
object from a given device.

00:44:45.450 --> 00:44:49.690
Or we can get the device,
the capture device associated

00:44:49.690 --> 00:44:52.330
with a capture device input.

00:44:53.370 --> 00:44:55.760
The movie output,
there isn't a whole lot there.

00:44:55.940 --> 00:45:00.040
The main thing we're going to want to
do is get the QTMovie that's associated

00:45:00.070 --> 00:45:03.090
with that QTCapture movie output object.

00:45:03.330 --> 00:45:04.450
The video preview output.

00:45:04.490 --> 00:45:07.340
Again, I said,
if you're using the capture view,

00:45:07.340 --> 00:45:09.220
you're not going to need
to worry about this object.

00:45:09.290 --> 00:45:11.890
If you want to do fancy stuff,
which we'll demonstrate

00:45:11.890 --> 00:45:15.090
in a little while,
such as composite the captured

00:45:15.090 --> 00:45:19.170
video onto an OpenGL surface,
you're going to want to set the visual

00:45:19.170 --> 00:45:21.060
context on one of these objects.

00:45:21.200 --> 00:45:23.490
That's how, essentially,
you would accomplish that.

00:45:23.560 --> 00:45:27.000
And then a capture view,
you will want to associate

00:45:27.000 --> 00:45:30.210
it with a capture session,
and then we have some view-related

00:45:30.210 --> 00:45:31.930
methods there that are pretty standard.

00:45:32.150 --> 00:45:36.060
Fill color, preserves aspect ratio,
and so forth.

00:45:40.030 --> 00:45:42.660
There are also a few notifications.

00:45:42.660 --> 00:45:44.850
If a device gets
connected or disconnected,

00:45:45.050 --> 00:45:46.900
your application can find out about it.

00:45:47.040 --> 00:45:48.690
You might want to do
that in order to rebuild,

00:45:48.690 --> 00:45:50.540
say, a pop-up list of available devices.

00:45:50.600 --> 00:45:57.600
And you may want to know when a
capture session will start or will end.

00:45:57.610 --> 00:46:03.510
The last four notifications, I believe,
are not implemented in the seed you have.

00:46:04.970 --> 00:46:09.600
Transport controls you will get
by modifying the playback mode

00:46:09.610 --> 00:46:12.270
attribute of a capture device.

00:46:12.360 --> 00:46:15.300
You'll pass in a dictionary and
there will be settings for the

00:46:15.300 --> 00:46:20.790
playback speed and whether it's
displaying video on its little monitor.

00:46:20.920 --> 00:46:24.970
So let's do a demo.

00:46:25.150 --> 00:46:30.300
All right, how brave am I today?

00:46:30.410 --> 00:46:33.500
Let's hope the demo
gods are with me because

00:46:37.020 --> 00:46:39.240
Thank you.

00:46:39.250 --> 00:46:42.180
All right, do we have Xcode running?

00:46:45.490 --> 00:46:46.400
Okay.

00:46:46.400 --> 00:46:48.710
New project.

00:46:48.840 --> 00:46:49.980
So I'm starting from nothing.

00:46:49.980 --> 00:46:53.460
Oh boy, tell me I can read that.

00:46:55.480 --> 00:46:57.950
When I get to
Cocoa document-based application,

00:46:57.980 --> 00:46:58.510
is that it?

00:46:58.570 --> 00:46:59.490
Is that it?

00:46:59.660 --> 00:47:00.130
Excellent.

00:47:00.140 --> 00:47:00.770
Am I good?

00:47:00.770 --> 00:47:01.900
All right.

00:47:01.990 --> 00:47:04.390
So I'm going to build a
Cocoa document-based application.

00:47:04.390 --> 00:47:04.920
Okay.

00:47:04.980 --> 00:47:07.600
This is stationary that's out of the box.

00:47:07.600 --> 00:47:09.480
Let's call this WWDC demo.

00:47:12.400 --> 00:47:15.740
Okay, so there's my standard
new Cocoa document-based

00:47:15.740 --> 00:47:17.020
application stationery.

00:47:20.230 --> 00:47:23.110
First thing I want to do,
because it's really easy to forget

00:47:23.170 --> 00:47:27.940
when you're up here on stage,
is add in the--

00:47:28.360 --> 00:47:29.740
QTKit framework, right?

00:47:29.740 --> 00:47:32.380
It's going to be real hard
to do capture if I don't have

00:47:32.380 --> 00:47:34.000
the QTKit framework in there.

00:47:34.000 --> 00:47:35.000
Oh, goodness.

00:47:38.900 --> 00:47:39.900
System.

00:47:40.430 --> 00:47:41.190
Library.

00:47:41.190 --> 00:47:45.040
Am I getting near frameworks?

00:47:45.040 --> 00:47:47.110
Oh, this is much easier.

00:47:47.110 --> 00:47:48.100
All right.

00:47:48.100 --> 00:47:50.670
Then let's go down to...

00:47:54.950 --> 00:47:56.500
All right.

00:47:56.630 --> 00:47:59.640
You never knew programming
could be so hectic.

00:47:59.740 --> 00:48:04.800
All right, so I've added QTKit framework
to my project.

00:48:05.020 --> 00:48:08.840
Now I'm going to set up my UI,
and I should have resources there.

00:48:08.840 --> 00:48:14.800
So I'm going to open my
main document nib there.

00:48:14.950 --> 00:48:17.410
All right.

00:48:17.410 --> 00:48:19.500
We don't need that wonderful text.

00:48:23.880 --> 00:48:26.570
And what I do want is a QTCapture view.

00:48:26.760 --> 00:48:28.380
So you can see this new icon here.

00:48:28.380 --> 00:48:31.040
I'll just drag it over
in the standard way.

00:48:31.120 --> 00:48:33.140
Drop it there.

00:48:37.700 --> 00:48:43.800
[Transcript missing]

00:48:45.190 --> 00:48:47.380
All right, we'll do it like that.

00:48:47.500 --> 00:48:50.040
And I want to set the size of this to...

00:48:52.130 --> 00:48:53.630
Resize correctly.

00:48:53.780 --> 00:48:56.130
Okay.

00:48:57.560 --> 00:49:01.570
Now I also want to add a
couple buttons to my document.

00:49:02.190 --> 00:49:03.540
One to start capture.

00:49:03.540 --> 00:49:14.170
And then I want to have one
that's going to stop capture.

00:49:22.530 --> 00:49:25.260
Okay, so that's what my UI is
going to look like.

00:49:25.310 --> 00:49:30.620
And... That's all right,
this is on stage.

00:49:30.890 --> 00:49:32.540
What do you want?

00:49:33.510 --> 00:49:37.000
And I need to make some
outlets and actions,

00:49:37.000 --> 00:49:39.600
so I'll do that like this.

00:49:43.200 --> 00:50:00.000
[Transcript missing]

00:50:03.150 --> 00:50:07.220
First one, of course, is start capturing.

00:50:07.220 --> 00:50:10.710
And I want another one.

00:50:10.970 --> 00:50:13.300
Guess what that's gonna be called?

00:50:20.410 --> 00:50:21.090
Okay.

00:50:21.240 --> 00:50:28.220
And now I gotta make up my,
hook up my connections.

00:50:28.280 --> 00:50:33.710
I will control drag
from the there to there.

00:50:33.970 --> 00:50:36.380
And yes, that's good.

00:50:36.450 --> 00:50:38.200
That is the capture view.

00:50:38.260 --> 00:50:43.400
And then I will control drag
from the button to here.

00:50:43.430 --> 00:50:44.200
Start capturing.

00:50:44.200 --> 00:50:45.990
Very good.

00:50:47.050 --> 00:50:50.360
And control drag from here to there.

00:50:50.360 --> 00:50:52.460
And that is indeed stop capturing.

00:50:57.810 --> 00:51:00.800
So I think I've got that all correct.

00:51:00.930 --> 00:51:03.070
Now we need to write some code.

00:51:04.800 --> 00:51:07.400
Let's go into my document.

00:51:07.820 --> 00:51:10.430
Now remember I said we're going to
have three main objects running around.

00:51:10.440 --> 00:51:12.300
We're going to have a capture session.

00:51:12.320 --> 00:51:16.440
We're going to have some
inputs and some outputs.

00:51:16.440 --> 00:51:18.620
Oh, you can't see that, can you?

00:51:20.060 --> 00:51:27.800
So in my controllerDidLoadNib method,
I'll add this code.

00:51:40.200 --> 00:51:55.300
[Transcript missing]

00:51:56.780 --> 00:51:59.200
I have the capture view,
and then I have those three

00:51:59.200 --> 00:52:03.600
objects that I talked about,
the device input, the movie output,

00:52:03.640 --> 00:52:05.720
and the capture session.

00:52:06.140 --> 00:52:13.030
And then I'll declare the two
actions that I want to implement.

00:52:14.830 --> 00:52:16.360
Start capturing and stop capturing.

00:52:16.360 --> 00:52:22.370
Okay,
now let's go back to my didload nib.

00:52:23.480 --> 00:52:27.250
You'll see that the first thing I do
is create a capture session object,

00:52:27.250 --> 00:52:31.760
and I create a device input object,
and I create a movie output object.

00:52:31.830 --> 00:52:34.760
I then add the input
to the capture session.

00:52:34.800 --> 00:52:37.790
I add the output to the capture session.

00:52:39.030 --> 00:52:43.670
Next thing I need to do is add
a device to the device input.

00:52:43.780 --> 00:52:51.190
So what I have done here is call the
input devices method on QTCapture device.

00:52:51.270 --> 00:52:53.870
That's a class method,
and it's going to give me back

00:52:54.080 --> 00:52:57.200
an array of all the available
devices that it can find.

00:52:57.350 --> 00:52:59.580
And here I'm just going to
take the first one in the list.

00:52:59.580 --> 00:53:01.690
I don't know what it is,
but that's what I'm going to

00:53:01.690 --> 00:53:04.490
take as my capture device.

00:53:04.690 --> 00:53:07.930
And then finally,
I need to set the capture

00:53:07.960 --> 00:53:09.780
session onto the capture view.

00:53:09.780 --> 00:53:13.300
So now I've created the session,
I've created the input,

00:53:13.300 --> 00:53:16.590
I've created the output,
and I've hooked everything up correctly.

00:53:19.750 --> 00:53:27.070
Okay, and then I think all I need to
do now is implement my start

00:53:27.370 --> 00:53:30.840
capturing and stop capturing method.

00:53:33.920 --> 00:53:35.620
There's Start Capturing, real simple.

00:53:35.620 --> 00:53:38.080
I just call Start Capturing
on the capture session,

00:53:38.110 --> 00:53:40.360
because that's what's
handling everything.

00:53:40.810 --> 00:53:42.260
Stop capturing.

00:53:42.590 --> 00:53:44.900
A little more complicated, but not much.

00:53:44.900 --> 00:53:47.260
What am I going to want to
do when I stop capturing?

00:53:47.260 --> 00:53:50.680
I'm going to want to...

00:53:51.200 --> 00:54:24.100
[Transcript missing]

00:54:26.900 --> 00:54:29.390
I hate when that happens.

00:54:29.400 --> 00:54:31.460
Oh, I know what I did wrong.

00:54:31.490 --> 00:54:34.120
Silly me.

00:54:34.580 --> 00:54:38.160
Although we added,

00:54:40.780 --> 00:54:46.130
The framework to our project,
we did not include its headers.

00:54:47.780 --> 00:54:51.850
So we will include QTKit, qtkit.h.

00:54:51.860 --> 00:54:56.270
And let's see if that builds.

00:55:00.930 --> 00:55:02.160
Linking, that sounds good.

00:55:02.260 --> 00:55:06.460
Build succeeded.

00:55:07.330 --> 00:55:10.690
All right, let's run it.

00:55:15.640 --> 00:55:17.320
Here comes our application.

00:55:17.350 --> 00:55:21.050
If all goes well,
we should get preview from whatever

00:55:21.170 --> 00:55:28.270
the first device on the list was,
and it seems to be this HDV Handycam.

00:55:34.200 --> 00:55:42.700
[Transcript missing]

00:55:48.830 --> 00:55:51.210
In fact, it's so good,
you can see that it's a really

00:55:51.210 --> 00:55:52.520
old can of Campbell's soup.

00:55:52.660 --> 00:55:56.420
The expiration date is 1998.

00:55:56.460 --> 00:56:00.630
What it was doing in my closet,
I have no idea.

00:56:01.540 --> 00:56:04.300
You probably want to see
some actual capturing done,

00:56:04.300 --> 00:56:04.700
don't you?

00:56:04.700 --> 00:56:06.530
I am so sick of this dock.

00:56:12.410 --> 00:56:13.410
Turn on hiding.

00:56:13.560 --> 00:56:14.250
Thank you.

00:56:14.250 --> 00:56:18.200
All right, let's go back to where I can
actually see the buttons.

00:56:18.210 --> 00:56:18.990
Oh, no.

00:56:30.330 --> 00:56:33.420
So let's start capturing.

00:56:33.420 --> 00:56:36.940
Maybe get a little motion in there.

00:56:37.010 --> 00:56:39.400
We'll stop capturing.

00:56:42.700 --> 00:56:44.360
And where did we write it?

00:56:44.360 --> 00:56:48.580
We wrote it into /temp/capturedmovie.

00:56:51.690 --> 00:56:52.980
Is there a captured movie there?

00:56:53.020 --> 00:56:53.830
By golly, there is.

00:56:53.850 --> 00:56:55.430
Let's open it, see what we got.

00:56:55.600 --> 00:57:01.370
Oh, that's big.

00:57:01.390 --> 00:57:01.390
Yeah.

00:57:01.590 --> 00:57:03.740
All right, so it's so big it won't
even fit on this monitor.

00:57:03.780 --> 00:57:07.260
So we successfully captured,
I don't know how many seconds,

00:57:07.260 --> 00:57:11.270
of HDV video using, what,
20 lines of code?

00:57:11.280 --> 00:57:13.210
Was it even that much?

00:57:14.730 --> 00:57:16.460
Oh, you want to play it?

00:57:16.710 --> 00:57:17.330
Oh.

00:57:17.780 --> 00:57:19.550
You don't trust me?

00:57:19.870 --> 00:57:21.480
There we go.

00:57:30.220 --> 00:57:34.800
All right, how brave am I?

00:57:35.070 --> 00:57:39.230
One feature that I didn't
mention is we can capture from

00:57:39.230 --> 00:57:42.160
multiple devices simultaneously.

00:57:48.490 --> 00:57:50.490
Well,
we almost have the code we need for that.

00:57:50.520 --> 00:57:53.620
Let's just change things
here a little bit.

00:57:53.720 --> 00:57:56.240
Hide that.

00:57:56.320 --> 00:57:57.350
Almost a compression.

00:57:57.360 --> 00:57:58.420
Sorry?

00:58:01.050 --> 00:58:04.390
Uh, David?

00:58:05.160 --> 00:58:08.420
What was the compression
scheme of that file?

00:58:10.430 --> 00:58:11.540
Straight off the camera.

00:58:11.540 --> 00:58:14.100
All the bits you ever wanted.

00:58:14.120 --> 00:58:17.100
Okay, so we want to capture
from multiple devices.

00:58:17.100 --> 00:58:19.020
I'm going to come over here.

00:58:19.020 --> 00:58:21.510
So we're going to have
more than one device.

00:58:21.510 --> 00:58:25.600
So let's throw in some nice static
variables that keep track of

00:58:25.600 --> 00:58:28.840
how many devices we have and how
many files we're writing into.

00:58:28.840 --> 00:58:31.270
We don't want to write them
all into the same file,

00:58:31.380 --> 00:58:31.870
do we?

00:58:33.380 --> 00:58:36.890
So now we have a device index.

00:58:37.040 --> 00:58:41.830
And in our Awake from Nib, of course,
we don't want to always open device zero,

00:58:41.830 --> 00:58:42.460
do we?

00:58:42.460 --> 00:58:45.620
We want to open device at device index.

00:58:45.710 --> 00:58:50.630
And since we don't always want zero,
we'll increment that.

00:58:50.770 --> 00:58:53.740
So the next time through,
we'll get the next device in the list,

00:58:53.740 --> 00:58:54.300
right?

00:58:55.890 --> 00:58:58.200
And we need to make one other change.

00:58:58.200 --> 00:59:01.300
This is going to be incredibly simple.

00:59:01.690 --> 00:59:05.200
Uh, duh-duh-duh-duh-duh-duh-duh.

00:59:05.200 --> 00:59:06.770
Okay.

00:59:08.090 --> 00:59:13.840
So, let's just throw all of this
away and replace it by this.

00:59:13.840 --> 00:59:19.550
So, when I'm done,
I'm going to detach the captured

00:59:19.560 --> 00:59:21.240
movie from the current thread.

00:59:21.260 --> 00:59:23.680
Because I don't want to do
this all on the main thread,

00:59:23.680 --> 00:59:25.240
I want to do it on the background thread,
right?

00:59:25.240 --> 00:59:26.810
Let's use some of that
code we wrote earlier.

00:59:26.820 --> 00:59:31.300
And then once I do that,
I want to detach new thread selector.

00:59:31.300 --> 00:59:34.560
I want to call write it
on a background thread,

00:59:34.930 --> 00:59:37.750
passing in the movie
that I just captured.

00:59:39.110 --> 00:59:42.770
And write it should look completely
familiar to you right now,

00:59:42.810 --> 00:59:47.280
because it's just doing the stuff to
send the movie to the background thread,

00:59:47.280 --> 00:59:52.320
write to file to write
the file out to a new,

00:59:52.320 --> 00:59:55.760
sorry,
to write the movie out to a new file.

00:59:55.760 --> 00:59:58.500
And finally,
you can see that I'm putting an

00:59:58.500 --> 01:00:02.310
integer into the name so that I don't
write it all into the same file.

01:00:02.320 --> 01:00:05.830
If I'm lucky, that will build.

01:00:10.690 --> 01:00:13.700
Let me do one other thing here.

01:00:13.740 --> 01:00:16.230
We're capturing a lot of data.

01:00:17.680 --> 01:00:22.050
So let's just have it beep when
it's done exporting all that,

01:00:22.050 --> 01:00:24.570
or flattening all that data,
so we know when we can

01:00:24.910 --> 01:00:26.360
actually look at the file.

01:00:26.610 --> 01:00:28.730
So let's build that.

01:00:30.800 --> 01:00:32.080
And let's run it.

01:00:32.300 --> 01:00:36.000
See what happens.

01:00:41.100 --> 01:00:43.760
So there's our first device.

01:00:43.820 --> 01:00:48.610
And this is a document-based application,
so I can come up here and do new.

01:00:49.620 --> 01:00:52.260
So there's our first device.

01:00:52.260 --> 01:00:57.120
And this is a document-based application,
so I can come up here and do new.

01:01:05.950 --> 01:01:09.300
I will start capturing HDV.

01:01:09.340 --> 01:01:10.920
I'll stop that.

01:01:11.160 --> 01:01:12.670
I'll stop this.

01:01:12.710 --> 01:01:13.940
Let's listen for a couple of beeps.

01:01:13.940 --> 01:01:16.200
I don't know if they have the sound on.

01:01:21.860 --> 01:01:24.300
There's two beeps.

01:01:24.330 --> 01:01:25.340
All right.

01:01:25.370 --> 01:01:29.090
Now the proof of the
pudding is in the eating.

01:01:29.980 --> 01:01:31.960
Do we have two files there?

01:01:32.110 --> 01:01:35.590
Captured movie one, captured movie two.

01:01:40.000 --> 01:01:41.520
Does the first one open?

01:01:41.580 --> 01:01:44.220
All right.

01:01:44.220 --> 01:01:47.100
And now let's go back to terminal.

01:01:47.260 --> 01:01:49.430
Let's open the second one.

01:01:53.500 --> 01:01:53.920
Excellent.

01:01:54.050 --> 01:02:01.770
So we got multiple capture
from two different devices.

01:02:01.950 --> 01:02:04.140
Okay.

01:02:04.140 --> 01:02:08.280
Can we go back to slides, please?

01:02:12.570 --> 01:02:18.250
All right,
maybe you've got a Carbon application.

01:02:18.570 --> 01:02:19.380
Can you use this stuff?

01:02:19.610 --> 01:02:22.490
Sure, a Carbon application can link
against a Cocoa framework.

01:02:22.650 --> 01:02:23.910
Let me just quickly demo this.

01:02:23.940 --> 01:02:29.010
Can I go back to demo machine, please?

01:02:39.750 --> 01:02:41.860
I'm not going to show
you the code for these.

01:02:41.930 --> 01:02:45.970
I'm just going to-- does
that say Carbon capture?

01:02:46.000 --> 01:02:51.700
So here's a Carbon application that
is putting up a QT capture view.

01:02:51.790 --> 01:02:54.690
Because of the way we wrote it,
it's not actually previewing yet.

01:02:54.690 --> 01:02:58.890
But when I start capture,
you will get the preview.

01:03:01.650 --> 01:03:03.760
I'm not going to show
you the code for these.

01:03:03.760 --> 01:03:07.160
I'm just going to-- does
that say Carbon capture?

01:03:07.640 --> 01:03:09.640
And there it is up there, recorded movie.

01:03:09.640 --> 01:03:12.690
I won't bother to open it because by now
I think you trust me that it actually

01:03:12.690 --> 01:03:15.460
did capture the video it was supposed to.

01:03:15.460 --> 01:03:20.070
And one last thing
I want to show you is...

01:03:20.780 --> 01:03:22.780
And there it is up there, recorded movie.

01:03:22.890 --> 01:03:25.880
I won't bother to open it because by now
I think you trust me that it actually

01:03:25.890 --> 01:03:28.660
did capture the video it was supposed to.

01:03:28.660 --> 01:03:33.440
And one last thing
I want to show you is...

01:03:51.530 --> 01:03:58.440
So, let's get started.

01:03:59.100 --> 01:04:05.300
So, let's get started.

01:04:05.300 --> 01:04:05.300
So, we're going to start with a QTKit

01:04:08.910 --> 01:04:16.960
And then we can give that a mask,
position it, crank up its visibility.

01:04:17.750 --> 01:04:21.960
And there we see, if I crank that down,
there is Brad playing.

01:04:21.960 --> 01:04:27.680
And so now we have composited
onto an OpenGL surface live video

01:04:27.680 --> 01:04:29.470
and a stored QuickTime movie.

01:04:29.480 --> 01:04:30.650
Thank you.

01:04:36.500 --> 01:04:38.000
All right, back to slides, please.

01:04:38.000 --> 01:04:46.670
So that was that demo that I just showed,
capturing individual context.

01:04:46.790 --> 01:04:47.940
Okay, so what are the limitations?

01:04:47.990 --> 01:04:50.050
These APIs are still in development.

01:04:50.140 --> 01:04:52.340
It's a whole lot of new APIs.

01:04:52.340 --> 01:04:54.260
As I said, it's 11 new classes.

01:04:54.260 --> 01:04:58.900
We really are looking forward
to your feedback on this.

01:04:58.900 --> 01:05:00.630
This is why you're here,
and this is why we give

01:05:00.630 --> 01:05:02.700
you this stuff early,
so we can elicit feedback.

01:05:03.340 --> 01:05:06.840
The audio preview output is not
working in the seed that you have.

01:05:06.840 --> 01:05:10.410
On-the-fly compression is not
working in the seed you have.

01:05:10.410 --> 01:05:14.320
Many of the device and channel
attributes I haven't even mentioned,

01:05:14.370 --> 01:05:17.850
but are in the documentation,
are not currently working.

01:05:17.850 --> 01:05:21.170
And the feature that I talked
about of frame exact capture is,

01:05:21.170 --> 01:05:23.310
again, not in the seed that you have.

01:05:25.020 --> 01:05:27.380
So, let's just sum up.

01:05:27.430 --> 01:05:29.190
QTKit is getting better and better.

01:05:29.190 --> 01:05:33.950
In Leopard, it takes on the burden for
giving you 64-bit operation,

01:05:33.950 --> 01:05:38.740
and it is the only way to get
this brand new pro-grade capture

01:05:38.740 --> 01:05:41.440
engine that's in QuickTime.

01:05:41.460 --> 01:05:45.510
We're giving you new APIs as
we see that you need them,

01:05:45.510 --> 01:05:49.020
and we're trying to sort of
expand the collective wisdom.

01:05:49.020 --> 01:05:51.860
And as I said,
your feedback is crucial for us to

01:05:51.880 --> 01:05:54.270
make this even better than it is now.

01:05:55.030 --> 01:05:57.160
So, with that,
I want to vector you off to a

01:05:57.160 --> 01:05:59.160
couple of labs tomorrow morning.

01:05:59.160 --> 01:06:02.900
If you have 64-bit questions,
I have a list of that here.

01:06:02.900 --> 01:06:07.300
I will be in the 64-bit lab from 9 to 10,
and then from 10 on,

01:06:07.300 --> 01:06:11.140
I'll be in the graphics and media lab,
along with other capture engineers

01:06:11.270 --> 01:06:13.200
to handle your questions.