WEBVTT

00:00:16.150 --> 00:00:18.020
Thank you and good afternoon.

00:00:18.050 --> 00:00:23.320
This is the Integrating with iCal session
and I'm Red from the iCal team and just

00:00:23.320 --> 00:00:25.180
want to thank you all for coming on down.

00:00:25.180 --> 00:00:30.760
So the team has been very busy working
on a new framework for all of you guys.

00:00:30.760 --> 00:00:35.420
You saw it in action
Monday morning with mail to-dos.

00:00:35.420 --> 00:00:41.670
You could see it takes full advantage
of our to-do support with due dates,

00:00:41.670 --> 00:00:45.030
alarms, priorities,
putting in what calendar you want.

00:00:45.560 --> 00:00:50.080
So it reads and writes to-dos.

00:00:50.940 --> 00:00:54.140
As you may have seen on
the seed or other demos,

00:00:54.150 --> 00:00:57.080
there's a new widget that used
to be called the calendar widget,

00:00:57.080 --> 00:00:58.900
which is now the iCal widget.

00:00:58.930 --> 00:01:02.900
And it takes advantage of
the framework to use events.

00:01:02.900 --> 00:01:11.900
So you've got mail using it for to-dos
and the widget using it for events.

00:01:11.900 --> 00:01:15.120
And we'd like to see a lot more
applications from all of you

00:01:15.420 --> 00:01:16.900
guys coming on and using it.

00:01:16.900 --> 00:01:19.890
And these are just kind of maybe
some wishful thinking possibilities.

00:01:20.900 --> 00:01:25.900
So you're going to hear this
a few times that it's easy.

00:01:25.900 --> 00:01:26.900
I'm saying it now.

00:01:26.900 --> 00:01:30.900
You're going to hear my teammate
Matt say it a few times.

00:01:30.900 --> 00:01:36.810
We've taken the time to do all the heavy
lifting as far as the data storage is

00:01:36.890 --> 00:01:39.900
concerned and recurrence expansion.

00:01:39.900 --> 00:01:43.530
So like the widget,
if you're interested in just a

00:01:43.530 --> 00:01:46.060
particular day's worth of events,

00:01:46.210 --> 00:01:50.340
We'll do all the figuring out of
what events really exist today.

00:01:50.340 --> 00:01:53.940
Thanksgiving, which is the fourth
Thursday of every November,

00:01:53.940 --> 00:01:56.520
does it fit inside the pattern or not?

00:01:56.620 --> 00:02:00.450
There's hundreds of lines of
recurrence expansion and valuation.

00:02:00.460 --> 00:02:01.690
We're doing that.

00:02:01.830 --> 00:02:05.160
The data storage of how you
store events that occur on the

00:02:05.160 --> 00:02:07.480
first and 15th of every month.

00:02:07.650 --> 00:02:09.920
We'll do all that heavy lifting for you.

00:02:09.920 --> 00:02:14.600
You all should focus on making
your apps great and figuring out

00:02:14.600 --> 00:02:16.080
ways to interoperate with iCal.

00:02:16.170 --> 00:02:19.560
The stuff you have in your
app will show up in iCal.

00:02:19.560 --> 00:02:23.640
And then if you want to read it,
it'll be there vice versa also.

00:02:23.640 --> 00:02:27.540
Now,
what if you're already accessing iCal

00:02:27.980 --> 00:02:31.600
through AppleScript or Sync Services?

00:02:31.690 --> 00:02:33.070
Well, don't worry about it.

00:02:33.070 --> 00:02:34.210
We're not touching it.

00:02:34.210 --> 00:02:35.120
It's still there.

00:02:35.120 --> 00:02:36.140
It'll still work.

00:02:36.140 --> 00:02:40.260
And if you're asking yourself,
so which way should I get at the data?

00:02:40.530 --> 00:02:44.640
Should it be through AppleScript or
Sync Services or the new framework?

00:02:44.640 --> 00:02:46.080
I'd ask you to think about that.

00:02:46.100 --> 00:02:49.580
I'd ask you to think about the Address
Book framework a little bit because

00:02:49.580 --> 00:02:52.340
it actually has all three methods,
comparable methods of

00:02:52.420 --> 00:02:53.490
interacting with it.

00:02:53.590 --> 00:02:56.800
And you have to think about your
data interaction and how you want to

00:02:56.800 --> 00:02:58.560
really interact with Address Book.

00:02:58.660 --> 00:03:00.840
The same thing would
be true about Calendar,

00:03:00.840 --> 00:03:02.950
the Calendar Store framework.

00:03:04.440 --> 00:03:06.300
So one other thing.

00:03:06.300 --> 00:03:10.740
This is a very big, large,
extensive framework.

00:03:10.740 --> 00:03:14.610
And we believe we've
done a really good job.

00:03:14.640 --> 00:03:16.180
We know we can make it better.

00:03:16.180 --> 00:03:18.080
And we want your feedback.

00:03:19.220 --> 00:03:25.430
So tomorrow at Mac OS X Lab C,
we're all going to be there at 3:30,

00:03:25.430 --> 00:03:28.800
and we'd like you to come down,
bring your PowerBooks, bring your code,

00:03:28.810 --> 00:03:33.540
try it out, see what works well,
see what needs a little polish,

00:03:33.720 --> 00:03:35.350
come and just meet us and talk to us.

00:03:35.470 --> 00:03:39.350
Tell us what you need,
what you've been doing with iCal,

00:03:39.350 --> 00:03:42.820
and see how we can try and
make things work as best as

00:03:42.820 --> 00:03:44.780
we can for all of you guys.

00:03:44.890 --> 00:03:48.560
So without further ado,
I'd like to introduce Matt DiMaggio.

00:03:48.580 --> 00:03:49.200
And he'll go in.

00:03:49.200 --> 00:03:51.400
into the framework in detail.

00:03:51.650 --> 00:03:53.190
Thank you.

00:03:58.070 --> 00:03:59.120
Thanks, Red.

00:03:59.240 --> 00:04:00.700
So my name is Matt.

00:04:00.810 --> 00:04:05.940
I'm excited to be here to talk to you
guys about the CalendarStore framework,

00:04:06.020 --> 00:04:11.110
which is, as it says up there,
a new way to access iCal's data.

00:04:12.050 --> 00:04:15.830
So just to give you a kind of road map
of what we'll be talking about today,

00:04:15.840 --> 00:04:19.140
first I'll go over reading
calendar data and look at all

00:04:19.140 --> 00:04:20.900
the various classes in the API.

00:04:20.900 --> 00:04:25.200
I'll move on to the notification
model and finally conclude

00:04:25.200 --> 00:04:28.750
with writing calendar data,
going into things you need to

00:04:28.850 --> 00:04:30.650
be aware of when doing that.

00:04:31.830 --> 00:04:33.040
So who is this API for?

00:04:33.100 --> 00:04:36.160
Well,
anybody who wants to access iCal's data.

00:04:36.210 --> 00:04:40.100
This could be reading and writing data,
as Mail does, or just sharing data,

00:04:40.120 --> 00:04:41.100
like the new iCal widget.

00:04:41.100 --> 00:04:44.310
I think the easiest way to understand
the classes in this framework is

00:04:44.390 --> 00:04:48.050
by correlating them to things that
you're already familiar with in iCal.

00:04:48.060 --> 00:04:51.120
So you'll notice in the
list of calendars there,

00:04:51.210 --> 00:04:54.700
those things are all
represented as Cal calendars.

00:04:54.700 --> 00:04:57.450
Events are Cal events.

00:04:57.450 --> 00:05:01.480
To-dos are Cal tasks, and so on.

00:05:04.650 --> 00:05:07.930
And what we'll be doing throughout
this talk is kind of giving you

00:05:07.930 --> 00:05:12.740
an example of how to go from here,
where the data is in iCal, to here,

00:05:12.750 --> 00:05:15.440
where the data is in your application.

00:05:16.380 --> 00:05:20.520
So the first thing we'll talk about,
the first class, is Cal CalendarStore.

00:05:20.550 --> 00:05:23.020
This really is where it all starts.

00:05:23.070 --> 00:05:29.080
I think the easiest way to-- or one thing
that I remind you of is AB Address Book.

00:05:29.560 --> 00:05:32.240
This is the class where you'll
be getting access to the three

00:05:32.240 --> 00:05:33.910
main data types in the framework.

00:05:34.090 --> 00:05:36.950
That's calendars, events, and to-dos.

00:05:37.030 --> 00:05:39.230
And if somebody's looking
at that and thinking,

00:05:39.230 --> 00:05:42.050
to-dos, hmm,
there shouldn't be an apostrophe there.

00:05:42.190 --> 00:05:43.560
Well.

00:05:43.960 --> 00:05:46.390
We talked about that and talked
about maybe writing it as

00:05:46.990 --> 00:05:48.400
to-dos without an apostrophe.

00:05:48.440 --> 00:05:52.420
That doesn't look right,
so maybe there's not a space.

00:05:52.520 --> 00:05:56.070
We actually spent an inordinate
amount of time on the team going

00:05:56.070 --> 00:06:00.560
over how this should be spelled
and written in documentation.

00:06:00.610 --> 00:06:04.840
And so what you'll find within the
API itself is we do not refer to to-dos.

00:06:04.900 --> 00:06:07.860
Instead, we call everything tasks.

00:06:07.860 --> 00:06:10.970
So...

00:06:11.930 --> 00:06:14.330
I'll use the two terms
interchangeably while I'm up here,

00:06:14.330 --> 00:06:15.190
but they're the same.

00:06:15.300 --> 00:06:18.610
To do an iCal is a task in the API.

00:06:19.670 --> 00:06:23.710
So as I said, Cal CalendarStore is your
main place to access data.

00:06:23.730 --> 00:06:27.590
It contains all the information
that you'll see in iCal.

00:06:29.220 --> 00:06:32.340
And here are the principal
methods to access that data.

00:06:32.440 --> 00:06:35.860
So default CalendarStore is a class
method that gives you access to

00:06:35.860 --> 00:06:38.010
an instance of the CalendarStore.

00:06:38.010 --> 00:06:41.570
And then you can make calls on the
CalendarStore to get a full list

00:06:41.570 --> 00:06:46.540
of calendars or to get-- oops,
there you go-- and that'll

00:06:46.540 --> 00:06:50.020
return an array of Cal calendars.

00:06:51.000 --> 00:06:54.070
An array of events using a predicate,
which we'll talk about,

00:06:54.170 --> 00:06:57.060
that returns an array of cal events.

00:06:57.150 --> 00:07:00.750
And of course,
tasks also using a predicate.

00:07:03.000 --> 00:07:05.480
So I'll kind of be building
this diagram as I go through,

00:07:05.630 --> 00:07:08.130
just another way to kind of
understand the classes and their

00:07:08.130 --> 00:07:09.850
relationship with each other.

00:07:09.900 --> 00:07:11.460
That's the Cal Calendar Store.

00:07:11.510 --> 00:07:14.500
The first data class that we're
going to look at is Cal Calendar.

00:07:14.500 --> 00:07:22.220
Again, this is exactly the same thing
we would be seeing in iCal's UI.

00:07:23.840 --> 00:07:26.440
So here are the main
methods on Cal Calendar.

00:07:26.520 --> 00:07:29.420
There's the color,
which is the same as the

00:07:29.440 --> 00:07:31.760
color that shows up in iCal.

00:07:31.830 --> 00:07:34.850
And the title, which is again the title.

00:07:34.920 --> 00:07:38.200
And there are two more methods
here that are also pretty useful.

00:07:38.270 --> 00:07:42.990
IsEditable would tell you whether
or not the calendar-- whether or not

00:07:43.050 --> 00:07:46.320
you can make changes to events and
tasks that appear on the calendar.

00:07:46.430 --> 00:07:49.810
So example of events that the user
can't make changes to and that

00:07:49.820 --> 00:07:53.090
you won't be able to make changes
to using the API are things that

00:07:53.090 --> 00:07:57.260
appear on a subscribe calendar,
on iCal's birthday calendar,

00:07:57.290 --> 00:08:00.110
or on one of the CalDaf calendars,
which you probably heard

00:08:00.120 --> 00:08:01.840
about in earlier sessions.

00:08:02.610 --> 00:08:04.470
And finally,
a UID in case you need to store

00:08:04.540 --> 00:08:08.770
a reference to that calendar
for some point in the future.

00:08:10.000 --> 00:08:10.950
All right.

00:08:10.970 --> 00:08:11.930
This is the first data class.

00:08:12.070 --> 00:08:15.720
The second one is CalEvent.

00:08:16.960 --> 00:08:20.380
Now CalEvent is actually a
subclass of CalCalendarItem.

00:08:20.410 --> 00:08:22.750
This is the only inheritance
we have in the framework.

00:08:22.790 --> 00:08:27.570
And CalCalendarItem contains things
that are relevant to events and tasks,

00:08:27.570 --> 00:08:28.810
or to-dos.

00:08:28.880 --> 00:08:31.960
Those things include the title,
the calendar,

00:08:31.960 --> 00:08:36.160
which is returned as a CalCalendar,
the class we just reviewed,

00:08:36.690 --> 00:08:46.390
Alarms, which is an array of CalAlarms,
which we'll look at later,

00:08:46.390 --> 00:08:46.390
and the URL and notes that are
associated with a given event.

00:08:47.590 --> 00:08:51.310
and CalEvent itself has
event specific data.

00:08:51.380 --> 00:08:54.290
There's the location,
whether or not the event is all day.

00:08:54.450 --> 00:08:57.730
The rule is stored as
a CalRecurrence rule,

00:08:57.840 --> 00:08:59.780
yet another class in the framework.

00:08:59.780 --> 00:09:01.400
And finally, attendees.

00:09:01.640 --> 00:09:04.490
That's an array of attendees.

00:09:04.540 --> 00:09:08.680
Those are represented as CalAttendees,
the final class we'll be looking at.

00:09:09.950 --> 00:09:13.950
So using those three classes,
Cal Calendar Store, Cal Calendars,

00:09:14.080 --> 00:09:16.550
and Cal Events,
we actually have enough information

00:09:17.220 --> 00:09:19.400
to show the events as they
appear here in the iCal widget.

00:09:19.400 --> 00:09:23.570
Now one other point I want to discuss
before we look at some sample code is

00:09:23.570 --> 00:09:27.770
that the events you see here represented
in the widget aren't all of the events

00:09:27.780 --> 00:09:29.150
that are in the user's calendar.

00:09:29.160 --> 00:09:32.010
These are events that
begin on a specific day.

00:09:32.020 --> 00:09:35.950
And you're going to define that using the
API with a start date and an end date.

00:09:36.000 --> 00:09:38.060
So there's two pieces
of information you need.

00:09:38.550 --> 00:09:40.080
The third one is a list of calendars.

00:09:40.080 --> 00:09:42.220
And here in the widget,
we're actually showing events

00:09:42.350 --> 00:09:43.320
from all the calendars.

00:09:43.320 --> 00:09:46.060
But in your app,
you'll be able to show events and

00:09:46.060 --> 00:09:48.620
tasks from only certain calendars,
just like iCal does.

00:09:48.640 --> 00:09:50.900
So we take those three
pieces of information,

00:09:50.900 --> 00:09:53.000
the calendars, the start date,
and the end date,

00:09:53.040 --> 00:09:55.760
and roll them up into a single
NS predicate that you'll be able to

00:09:55.770 --> 00:09:57.300
use to query for a list of events.

00:09:59.120 --> 00:10:01.640
Here is some sample code.

00:10:01.770 --> 00:10:06.160
Start off by getting an instance
of the Cal CalendarStore.

00:10:07.200 --> 00:10:09.980
and kind of create a predicate
using the three pieces of

00:10:09.980 --> 00:10:13.680
information I just discussed:
the start date, end date,

00:10:13.680 --> 00:10:15.100
and a list of calendars.

00:10:15.100 --> 00:10:19.100
And then get all the events.

00:10:19.710 --> 00:10:21.430
That's it.

00:10:24.210 --> 00:10:27.270
So if all you want to do is look
at the events that are in the

00:10:27.320 --> 00:10:29.870
iCal widget like you saw there,
then we're done.

00:10:30.130 --> 00:10:32.740
You can actually get on to the
Safari and WebKit session going on down

00:10:32.740 --> 00:10:36.100
the hall and get some more information.

00:10:36.100 --> 00:10:38.470
For the grizzled veterans
that are looking for a more

00:10:38.600 --> 00:10:41.290
thorough discussion of the API,
we'll move on to the next data class,

00:10:42.030 --> 00:10:44.000
which is CalTask.

00:10:46.800 --> 00:10:51.590
All right, as I mentioned before,
CalTask is a subclass of CalCalendarItem.

00:10:51.790 --> 00:10:56.100
So it has all the same things that
CalCalendarItem has for CalEvents.

00:10:56.100 --> 00:10:59.080
And these are calendars, the URLs,
et cetera.

00:11:00.090 --> 00:11:04.180
And then CalTask itself only
has a few specific fields.

00:11:04.240 --> 00:11:07.000
There's a Boolean for whether
or not it's completed.

00:11:07.420 --> 00:11:10.660
An enumerated type, CalPriority,
for how high the

00:11:10.660 --> 00:11:12.630
priority of the event is.

00:11:12.630 --> 00:11:15.870
And a due date, stored as an NSDate.

00:11:18.410 --> 00:11:20.650
So when we talked about events,
there were three parameters

00:11:20.730 --> 00:11:24.010
that we used to kind of describe
the events that we wanted.

00:11:24.070 --> 00:11:28.880
The start date, the end date,
and the list of calendars.

00:11:28.930 --> 00:11:31.020
Now with tasks it's a little different.

00:11:31.060 --> 00:11:35.480
We're still using an array of calendars,
but instead of a start date and end date,

00:11:35.500 --> 00:11:37.930
you'll use completed,
whether or not it's completed,

00:11:37.930 --> 00:11:39.610
and when it was completed.

00:11:39.790 --> 00:11:42.480
And the due date, again,
whether or not it has a due

00:11:42.580 --> 00:11:44.410
date and when that due date is.

00:11:46.240 --> 00:11:49.600
The sample code is very similar.

00:11:49.600 --> 00:11:54.980
Get a copy of the CalendarStore,
create a predicate using the array

00:11:54.980 --> 00:11:59.100
of calendars as discussed before,
and then ask for the tasks.

00:11:59.100 --> 00:12:02.100
Again, that's it.

00:12:02.370 --> 00:12:04.210
Three lines of code.

00:12:05.250 --> 00:12:11.440
Now because the due date and the
completed date are different and a

00:12:11.440 --> 00:12:14.730
little more complicated than with events,
the predicates look a little different.

00:12:14.760 --> 00:12:17.030
And you'll notice that when
you look at the predicate

00:12:17.060 --> 00:12:19.190
extensions in Cal CalendarStore.

00:12:19.330 --> 00:12:22.790
There's more ways to query for
tasks and a few more predicates.

00:12:24.680 --> 00:12:26.350
All right,
so these are the three main data

00:12:26.350 --> 00:12:31.400
types that you'll be accessing:
CalCalendars, CalEvents, and Caltasks.

00:12:31.480 --> 00:12:35.410
The next three classes are all
accessed by way of those data types,

00:12:35.500 --> 00:12:38.660
starting with CalAlarms,
which isn't a data type you can

00:12:38.660 --> 00:12:43.470
access from any CalCalendar item,
specifically a CalEvent or a Caltask.

00:12:46.750 --> 00:12:49.700
So CalAlarm's,
the first method is action,

00:12:49.700 --> 00:12:51.710
and that's going to return one
of a few different constants

00:12:51.710 --> 00:12:53.730
that we've defined in CalAlarm.h.

00:12:53.950 --> 00:12:57.400
That's to do with the type,
whether it's a sound or an email alarm.

00:12:57.400 --> 00:13:00.260
And then depending on
the type of the alarm,

00:13:00.260 --> 00:13:04.660
there will also be accessors you can
use to get a path to the sound or get

00:13:04.760 --> 00:13:09.840
a string for the email address that
you're sending an email reminder to.

00:13:09.840 --> 00:13:13.800
And finally, a URL,
and that's a file URL that is used for

00:13:13.800 --> 00:13:16.630
both the open file and the run script.

00:13:16.700 --> 00:13:22.260
So CalAlarm's, the final two things here,
relative trigger and absolute trigger,

00:13:22.690 --> 00:13:24.840
have to do with when the
alarm is set to go off.

00:13:24.840 --> 00:13:28.200
If that's defined in terms
of the start time of an event

00:13:28.200 --> 00:13:32.520
or the due date of a to-do,
in terms of relative to those times,

00:13:32.550 --> 00:13:36.200
then it will be defined
using an NS time interval.

00:13:36.200 --> 00:13:37.720
That's the relative trigger.

00:13:37.720 --> 00:13:40.500
If it's set to go off at
a statically defined time,

00:13:40.500 --> 00:13:43.220
an absolute time,
that'll use absolute trigger

00:13:43.220 --> 00:13:44.810
and return as an NSDate.

00:13:46.700 --> 00:13:48.030
All right.

00:13:48.040 --> 00:13:50.180
Next up is Cal Attendee.

00:13:54.200 --> 00:13:57.600
This is also something that's
returned in an array from Cal events.

00:13:57.600 --> 00:14:01.150
So Cal attendees have a comma
name that'll be the user entered

00:14:01.150 --> 00:14:04.530
string for the name of the person
that's attending the event.

00:14:05.640 --> 00:14:10.360
A status is defined as a static
string in the header file.

00:14:10.360 --> 00:14:14.510
That's going to be whether or
not the attendee has replied and

00:14:14.510 --> 00:14:16.990
accepted or declined the invitation.

00:14:17.880 --> 00:14:20.660
and an NSURL for the address.

00:14:20.700 --> 00:14:23.890
Now,
in the kind of old style iCal events,

00:14:24.090 --> 00:14:27.040
these are events that live
on a regular iCal calendar,

00:14:27.070 --> 00:14:29.570
that would always be an email address.

00:14:30.110 --> 00:14:32.850
And since it's returned with an NSURL,
it's a fully qualified email

00:14:32.850 --> 00:14:35.000
address and I'll have mail
to it at the beginning of it.

00:14:35.000 --> 00:14:39.730
The reason that we're using NSURL here
instead of returning it as an NSString is

00:14:39.770 --> 00:14:42.330
that in the case of a CalDAV calendar,
this is a calendar that

00:14:42.330 --> 00:14:46.000
lives on a CalDAV server,
you might not have an email address.

00:14:46.000 --> 00:14:50.980
Instead you'll have a URL that
refers to that user on the server.

00:14:51.000 --> 00:14:54.170
So here we've got a fully qualified
URL that just points to that

00:14:54.250 --> 00:14:55.980
user's record on the server.

00:14:58.460 --> 00:15:02.640
All right, and the final class is
Cal Recurrence Rule.

00:15:02.660 --> 00:15:05.090
Now,
one thing I want to note here is that

00:15:05.090 --> 00:15:09.390
this class isn't really necessary
if you're just displaying data.

00:15:09.440 --> 00:15:12.200
If you're just showing the
event that happened in a day,

00:15:12.200 --> 00:15:16.120
iCal does the recurrence
calculation for you and will tell

00:15:16.120 --> 00:15:20.520
you automatically whether or not
the event belongs in that day.

00:15:20.520 --> 00:15:24.310
So this is really only if you're adding
recurrence data or editing recurrence

00:15:24.310 --> 00:15:24.310
data on a currently existing event.

00:15:27.050 --> 00:15:28.750
So Cal Recurrence Rule.

00:15:28.870 --> 00:15:31.400
Every recurrence rule
has a recurrence type.

00:15:31.430 --> 00:15:36.060
And that'll be the unit of time
the recurrence is defined with,

00:15:36.070 --> 00:15:40.370
whether that's daily, weekly, monthly,
or yearly.

00:15:41.620 --> 00:15:45.560
It will also have a recurrence interval,
which is, kind of simply put,

00:15:45.610 --> 00:15:47.960
how often the event repeats.

00:15:48.070 --> 00:15:52.040
So an interval of one means that
it repeats every day or week.

00:15:52.080 --> 00:15:54.360
An interval of two means every other.

00:15:54.380 --> 00:15:57.210
Three is every third, and so on.

00:15:57.720 --> 00:15:59.960
and a recurrence end,
which is defined with a separate

00:15:59.960 --> 00:16:03.700
little class that we've tucked
in the CalRecurrenceRule.h.

00:16:03.710 --> 00:16:08.530
And for an event that doesn't-- a
repeating event that's never set to end,

00:16:08.530 --> 00:16:10.660
the recurrence end will just be nil.

00:16:10.750 --> 00:16:13.880
So this is a data type that's only
used when you've already got the

00:16:13.880 --> 00:16:16.940
end of a repeating event defined.

00:16:16.940 --> 00:16:21.760
And then if it's defined in terms of a
number of times that the event repeats,

00:16:22.120 --> 00:16:25.440
And you'll see it defined as,
it'll be returned as an unsigned integer

00:16:25.550 --> 00:16:27.000
for the number of times that it repeats.

00:16:27.000 --> 00:16:30.280
And if it's set to stop
repeating after a certain date,

00:16:30.280 --> 00:16:33.000
it'll just be an NSDate.

00:16:33.790 --> 00:16:37.640
So then depending on the recurrence type,
there are some other methods you can

00:16:37.640 --> 00:16:40.520
use to access data about the recurrence.

00:16:40.540 --> 00:16:45.520
These are methods that return
arrays of indices on which the event

00:16:45.520 --> 00:16:47.620
repeats for custom repeating events.

00:16:47.770 --> 00:16:52.150
So in this example,
we return an NSArray that explains which

00:16:52.290 --> 00:16:55.200
days of the week an event might repeat.

00:16:55.300 --> 00:16:58.620
and kind of in this example,
where an event repeats Monday, Tuesday,

00:16:58.720 --> 00:17:01.480
Wednesday,
there's going to be an array of integers.

00:17:01.480 --> 00:17:05.150
That'll be two, three, four, five,
and six.

00:17:06.090 --> 00:17:07.940
Days of the month is the same idea.

00:17:07.960 --> 00:17:11.200
It's indices for the days of the month
that a custom event might repeat.

00:17:11.200 --> 00:17:14.200
Same idea for weeks of the month.

00:17:14.260 --> 00:17:16.350
And finally, months of the year.

00:17:22.210 --> 00:17:24.230
So that's all the
classes in the framework.

00:17:24.460 --> 00:17:27.920
Next thing I'm going to look
at is the notification model.

00:17:29.120 --> 00:17:31.700
This is kind of a high level
diagram for what's going on.

00:17:31.700 --> 00:17:36.340
So when the user makes a change in iCal
or iCal gets a change via sync or even

00:17:36.340 --> 00:17:39.950
over another application using the API,
that change is made

00:17:39.950 --> 00:17:41.100
with the CalendarStore.

00:17:41.100 --> 00:17:45.440
And there's something in the background,
the instances of the CalendarStore

00:17:45.520 --> 00:17:47.080
will talk to each other.

00:17:47.100 --> 00:17:49.240
So the one that they're using will
talk to the one that you're using,

00:17:49.240 --> 00:17:52.910
and the one that you're using
sends off a notification to you.

00:17:53.100 --> 00:17:54.850
This is a local notification.

00:17:54.920 --> 00:17:57.720
You won't sign up for
distributed notification,

00:17:57.820 --> 00:18:01.100
just a regular notification
with NS Notification Center.

00:18:02.050 --> 00:18:05.240
This is similar to the way
that it's done in AddressBook.

00:18:05.240 --> 00:18:07.340
You'll be able to use
separate notifications for

00:18:07.340 --> 00:18:08.820
each of the main data types.

00:18:08.820 --> 00:18:11.930
So if you only want to know about
changes that have to do with events,

00:18:11.930 --> 00:18:14.280
you can just get
notifications for those types.

00:18:15.400 --> 00:18:19.230
And within the notification itself,
there's a user info dictionary.

00:18:19.340 --> 00:18:22.500
So you can either see that
there's a notification and

00:18:22.500 --> 00:18:25.750
just refresh your data set,
kind of using the predicate

00:18:25.750 --> 00:18:27.070
that you built before,

00:18:27.300 --> 00:18:29.650
Or you can look at the
notification itself,

00:18:29.650 --> 00:18:33.090
try to the user info dictionary,
and get the UID for the

00:18:33.190 --> 00:18:35.000
records that have changed.

00:18:36.080 --> 00:18:39.260
Now,
we haven't really talked about UID yet.

00:18:39.540 --> 00:18:42.360
For Cal tasks, it's very simple.

00:18:42.390 --> 00:18:47.150
Each task has its own UID,
and you can actually access each

00:18:47.850 --> 00:18:52.760
specific task with a method from
Cal CalendarStore called TaskWithUID.

00:18:54.940 --> 00:18:57.540
For Cal events it can
get a little trickier.

00:18:57.550 --> 00:18:59.710
Non-repeating events,
these are just one-off events

00:18:59.820 --> 00:19:03.120
that happen once in the user's
calendar and don't repeat,

00:19:03.120 --> 00:19:05.390
they all have their own UID.

00:19:05.910 --> 00:19:10.340
Now an instance,
all instances of a given repeating event,

00:19:10.470 --> 00:19:12.920
it's an event that
repeats more than once,

00:19:12.920 --> 00:19:14.340
will have the same UID.

00:19:14.340 --> 00:19:17.660
So you can't differentiate
between those with only UID.

00:19:17.660 --> 00:19:21.450
Instead we've included another
accessor called the occurrence.

00:19:21.460 --> 00:19:26.200
And each occurrence is unique to
the instance of a repeating event.

00:19:26.200 --> 00:19:29.960
Here's a little diagram to explain
that a little more clearly.

00:19:29.960 --> 00:19:32.810
All of these events,
this is one repeating event,

00:19:32.810 --> 00:19:34.500
they all have the same UID.

00:19:36.030 --> 00:19:39.460
but they all have different
occurrence values.

00:19:41.170 --> 00:19:44.260
And so if you ever need to
look up a specific instance,

00:19:44.260 --> 00:19:47.800
a specific Cal event,
you can do that on the Cal CalendarStore

00:19:48.040 --> 00:19:52.680
by passing a UID and an occurrence.

00:19:54.960 --> 00:19:58.880
Now just to give you a kind of demo
of the notification system in action,

00:19:58.880 --> 00:20:01.830
I'll show you how it works
with the iCal widget.

00:20:10.880 --> 00:20:12.800
Okay.

00:20:12.800 --> 00:20:14.800
You can see here's my iCal.

00:20:14.840 --> 00:20:18.600
And when I go into Dashboard
and look at the widget,

00:20:18.630 --> 00:20:21.420
it's only got one event on for today.

00:20:22.160 --> 00:20:24.940
So I'll go back to iCal.

00:20:24.940 --> 00:20:28.940
And I'll change the movie event that
I scheduled for tomorrow to be today.

00:20:28.970 --> 00:20:30.940
And when I do that,
a notification gets sent

00:20:30.940 --> 00:20:34.920
off to the iCal widget,
which is listening for notifications.

00:20:34.940 --> 00:20:36.500
And the iCal widget has the update.

00:20:36.510 --> 00:20:38.670
The movie appears right there.

00:20:55.210 --> 00:20:56.340
So that's notifications.

00:20:56.350 --> 00:20:58.380
And finally,
we look at how to write iCal data.

00:20:58.420 --> 00:21:04.210
So the workflow is
pretty straightforward.

00:21:04.590 --> 00:21:07.540
You get the event or task
that you want to use.

00:21:07.570 --> 00:21:09.440
You'll make your modifications to it.

00:21:09.540 --> 00:21:13.780
And then you just call saveEvent
or saveTask in the appropriate

00:21:13.780 --> 00:21:15.960
method from the Cal CalendarStore.

00:21:16.080 --> 00:21:20.040
So looking at a code example,
we have an event.

00:21:20.070 --> 00:21:22.420
In this case, we're changing its title.

00:21:23.410 --> 00:21:25.520
and then we're calling
on the Cal CalendarStore,

00:21:25.640 --> 00:21:27.120
saveEvent.

00:21:27.120 --> 00:21:29.550
There's one other parameter
here we haven't talked about

00:21:29.610 --> 00:21:31.130
and that's the CalSpan.

00:21:31.170 --> 00:21:33.060
In this case we're saying
CalSpan this event,

00:21:33.060 --> 00:21:34.400
only modify this event.

00:21:34.460 --> 00:21:37.000
Now the CalSpan is an enumerated type.

00:21:37.000 --> 00:21:39.390
It has several different values.

00:21:39.620 --> 00:21:43.220
This event, future events,
and all events.

00:21:43.240 --> 00:21:45.320
And this is actually required
to be passed in if you're

00:21:45.320 --> 00:21:47.880
making modification to an event.

00:21:47.890 --> 00:21:50.010
And what we've done here is
we've made it necessary for you,

00:21:50.010 --> 00:21:53.110
the client of the API,
to force the user to make a decision

00:21:53.110 --> 00:21:55.410
as to what the change should apply to.

00:21:55.490 --> 00:21:57.270
Just like an ICAO when
the user makes a change,

00:21:57.270 --> 00:22:00.110
it says, do you want to apply it just to
this event or all future ones,

00:22:00.110 --> 00:22:03.450
and they make a decision there,
you're going to be on the

00:22:03.540 --> 00:22:05.070
hook to do the same thing.

00:22:05.260 --> 00:22:07.610
In the case of a non-repeating event,
it doesn't matter what

00:22:07.660 --> 00:22:08.740
value you pass here.

00:22:08.740 --> 00:22:10.890
They're all treated the same.

00:22:13.280 --> 00:22:16.290
Okay,
so those are the classes we talked about.

00:22:16.290 --> 00:22:18.230
That's iCal itself.

00:22:18.580 --> 00:22:21.360
And in closing,
we're really excited about this.

00:22:21.380 --> 00:22:23.060
We think this is a great
way to access data.

00:22:23.060 --> 00:22:25.340
We know a lot of people have been
using other ways to access data,

00:22:25.340 --> 00:22:27.260
but hopefully this will
make your lives easier.

00:22:27.260 --> 00:22:31.600
And we're excited about people using this
for things that aren't calendar specific,

00:22:31.600 --> 00:22:34.180
which is kind of what I feel
like a lot of the things on

00:22:34.180 --> 00:22:35.980
OS X using iCal data have been.

00:22:35.980 --> 00:22:37.340
So there will be a lab tomorrow.

00:22:37.410 --> 00:22:39.620
If you have any questions,
we'll be able to help you

00:22:39.620 --> 00:22:42.150
kind of integrate these
calls into your application.

00:22:43.200 --> 00:22:45.060
and take all of your feedback there.