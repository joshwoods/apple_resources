WEBVTT

00:00:10.330 --> 00:00:13.880
Good afternoon, and welcome to Authoring
Dashboard Widgets.

00:00:13.880 --> 00:00:16.620
My name is Christian Wagner.

00:00:16.620 --> 00:00:19.580
I am a technical writer at Apple,
and we are going to spend the

00:00:19.580 --> 00:00:22.900
next hour talking about Dashboard
Widgets in Leopard and on Tiger.

00:00:22.900 --> 00:00:25.730
Before I go any further,
I wanted to remind you that

00:00:25.730 --> 00:00:28.820
this is a hands-on session,
so if you don't have the code

00:00:28.820 --> 00:00:33.560
for the hands-on already,
please go to the developer.apple.com

00:00:33.560 --> 00:00:38.980
slash WWDC2006 and download the sample
code associated with this session.

00:00:38.980 --> 00:00:42.170
There's three bits, resizer, sinker,
and birthdays,

00:00:42.170 --> 00:00:44.060
so please make sure to get that.

00:00:44.700 --> 00:00:47.170
Furthermore, I wanted to set your
expectations a little bit.

00:00:47.200 --> 00:00:50.880
This session is for people who already
are familiar with widget development.

00:00:50.880 --> 00:00:54.100
If you've never made a widget before,
we recommend that you go to the

00:00:54.110 --> 00:00:57.380
Dashcode session tomorrow morning
at 9 o'clock in the Marina,

00:00:57.380 --> 00:01:00.960
the Marina room,
not the north side of San Francisco,

00:01:00.960 --> 00:01:08.090
and that you take advantage of the
things that Dashcode offers you.

00:01:08.440 --> 00:01:09.970
Building a widget from
scratch isn't too hard,

00:01:09.970 --> 00:01:11.880
but Dashcode makes it just
that much easier for you.

00:01:11.900 --> 00:01:13.220
So let's get started.

00:01:13.220 --> 00:01:16.060
Some of you are new,
and so I just wanted to recap

00:01:16.060 --> 00:01:18.240
really quick what is Dashboard.

00:01:18.240 --> 00:01:20.300
So this is your standard
issue Tiger desktop.

00:01:20.300 --> 00:01:22.200
Not too much crazy going on there.

00:01:22.200 --> 00:01:24.740
You notice that there's this
icon next to the Finder icon.

00:01:24.740 --> 00:01:25.840
It's the Dashboard icon.

00:01:25.840 --> 00:01:28.460
When you click on it,
this layer goes over your screen,

00:01:28.510 --> 00:01:30.080
and this layer is Dashboard.

00:01:30.080 --> 00:01:32.260
On the Dashboard,
you're going to find these handy

00:01:32.410 --> 00:01:33.940
little programs called Widgets.

00:01:33.940 --> 00:01:38.160
Widgets provide information,
access to information that you want.

00:01:38.310 --> 00:01:41.300
You can use them to have at your
fingertips at a moment's notice.

00:01:41.320 --> 00:01:45.940
To users, they appear as applications,
but underneath, they're really powered by

00:01:45.960 --> 00:01:49.840
web technologies like HTML,
CSS, and JavaScript.

00:01:49.880 --> 00:01:51.520
Additionally,
there's also some other technologies

00:01:51.520 --> 00:01:56.060
you can take advantage of like
WebKit plugins and widget plugins.

00:01:56.060 --> 00:01:57.240
So that's Dashboard.

00:01:57.340 --> 00:02:00.230
Dashboard today, well,
as of this morning,

00:02:00.250 --> 00:02:06.450
there's over 2,100 widgets in the wild,
and this has been the feature in Tiger.

00:02:06.530 --> 00:02:09.300
When anyone talks about Tiger,
they think about the widgets.

00:02:09.300 --> 00:02:11.840
And so how many of you have
already created a widget?

00:02:11.930 --> 00:02:12.940
Can I see a show of hands?

00:02:13.020 --> 00:02:14.790
All right, that's great.

00:02:15.080 --> 00:02:16.210
Well, thank you.

00:02:16.310 --> 00:02:17.420
We really appreciate it a lot.

00:02:17.520 --> 00:02:21.140
You guys are the ones that helped make
this the feature in Mac OS X Tiger.

00:02:21.220 --> 00:02:22.590
So thank you very much.

00:02:22.720 --> 00:02:23.720
Give yourselves a round of applause.

00:02:28.960 --> 00:02:30.560
So I want to take a moment
to show you some of the great

00:02:30.560 --> 00:02:32.120
widgets that are out there.

00:02:32.410 --> 00:02:33.840
The first one is iClip Lite.

00:02:33.900 --> 00:02:36.660
And this is the winner of our
Apple Design Awards last night.

00:02:36.720 --> 00:02:39.890
And we really like this widget
a lot because it's fun to use.

00:02:39.900 --> 00:02:41.020
It's good looking.

00:02:41.080 --> 00:02:44.250
It makes something that's normally
really mundane and boring,

00:02:44.250 --> 00:02:46.620
like clipboard management,
but actually makes it fun to

00:02:46.620 --> 00:02:48.990
use and looks really sharp.

00:02:49.100 --> 00:02:51.030
So this is a great example
for you to learn from.

00:02:51.180 --> 00:02:52.670
And I suggest if you've
never used it before,

00:02:52.670 --> 00:02:55.050
you download it and take a look at it.

00:02:55.260 --> 00:02:57.560
Another great one is Weatherbug.

00:02:57.650 --> 00:03:00.230
This is a great widget
because it's actually branded

00:03:00.290 --> 00:03:02.040
by the Weatherbug website.

00:03:02.130 --> 00:03:04.170
They have a widget that
complements their website,

00:03:04.280 --> 00:03:06.480
offers the information you
normally could get there,

00:03:06.640 --> 00:03:09.620
but in a nice, compact,
good-looking form.

00:03:09.730 --> 00:03:12.070
So that's another good
example for you to look at.

00:03:12.200 --> 00:03:14.910
One that I like a lot
is this one called QXP.

00:03:15.070 --> 00:03:16.360
And it's an expense tracker.

00:03:16.630 --> 00:03:17.780
It's really good looking.

00:03:17.920 --> 00:03:18.740
It's tiny.

00:03:18.740 --> 00:03:19.880
And that's one thing I love about it.

00:03:20.000 --> 00:03:23.880
It does what it's supposed to do
in the smallest space possible.

00:03:23.980 --> 00:03:26.050
So that's another tip you
can take away from this.

00:03:26.150 --> 00:03:28.360
And finally-- who doesn't
like the Gas widget?

00:03:28.560 --> 00:03:31.260
With gas prices probably
going up again this week,

00:03:31.260 --> 00:03:33.510
this is a great widget to
have on your dashboard.

00:03:33.590 --> 00:03:34.620
And again, it's fun.

00:03:34.620 --> 00:03:35.830
It has a lot of animation.

00:03:35.890 --> 00:03:36.700
It's good looking.

00:03:36.760 --> 00:03:38.690
But it's also really compact and
gives you the information you

00:03:38.690 --> 00:03:40.610
want to have at your fingertips.

00:03:40.760 --> 00:03:42.490
So that's really handy.

00:03:42.770 --> 00:03:44.500
So we've told you a little
bit about Dashboard and Tiger.

00:03:44.500 --> 00:03:46.390
Let's talk about Dashboard and Leopard.

00:03:46.490 --> 00:03:48.340
And of course,
you can't talk about Dashboard and

00:03:48.340 --> 00:03:50.620
Leopard without talking about Dashcode.

00:03:50.670 --> 00:03:52.740
Dashcode is our new widget
creation environment,

00:03:52.780 --> 00:03:54.980
and you should really check it out.

00:03:54.980 --> 00:03:58.310
Even if you already are using
the good old tried and true

00:03:58.320 --> 00:04:02.160
text editor and graphic editor,
Dashcode has a lot of features that you

00:04:02.160 --> 00:04:06.830
can use to take your widget further and
integrate more of the great technologies

00:04:06.910 --> 00:04:08.310
we've made available for you.

00:04:08.420 --> 00:04:11.420
If you go to the Marina Room tomorrow
morning at 9:00 AM,

00:04:11.420 --> 00:04:13.250
again, you'll learn more about Dashcode.

00:04:13.260 --> 00:04:14.360
They're going to make
a phenomenal widget.

00:04:14.420 --> 00:04:16.080
They're going to just walk
you through the whole thing,

00:04:16.160 --> 00:04:18.730
so make sure to head over there.

00:04:19.140 --> 00:04:21.060
CHRISTIAN WONG:
Another thing that's really changed

00:04:21.060 --> 00:04:22.740
in Leopard is the architecture.

00:04:22.850 --> 00:04:25.860
So this is the dashboard
architecture diagram you're

00:04:25.860 --> 00:04:27.340
all used to seeing in Tiger.

00:04:27.480 --> 00:04:30.620
And in it, you have the dashboard server,
which is what provides the

00:04:30.620 --> 00:04:32.060
dashboard environment for you.

00:04:32.190 --> 00:04:35.100
And then you have the dashboard clients,
which are each individual widgets.

00:04:35.310 --> 00:04:37.280
And that means that each
widget has its own CPU,

00:04:37.280 --> 00:04:40.490
its own memory, all these resources
all devoted to itself.

00:04:40.590 --> 00:04:42.920
And then inside, there's a web view where
your widgets are running,

00:04:42.950 --> 00:04:45.820
and a couple of other
associated good things.

00:04:45.880 --> 00:04:48.620
But in Leopard,
we've changed this a little bit.

00:04:48.730 --> 00:04:50.940
So what this diagram-- and you
might not notice a difference,

00:04:50.980 --> 00:04:52.510
so let me go back one.

00:04:52.740 --> 00:04:54.860
Tiger and Leopard.

00:04:55.250 --> 00:04:57.020
The difference here,
in case you didn't notice it,

00:04:57.060 --> 00:05:00.930
is that every widget is now running
in the same dashboard client.

00:05:01.020 --> 00:05:05.010
So that means that each
widget is in its own web view,

00:05:05.010 --> 00:05:07.360
but they're all inside the same process.

00:05:07.490 --> 00:05:09.640
So why do this?

00:05:09.710 --> 00:05:11.160
The number one reason is performance.

00:05:11.310 --> 00:05:14.840
We get a two times speed increase
when loading your widget and

00:05:14.840 --> 00:05:16.000
when working with widgets.

00:05:16.110 --> 00:05:19.340
So that's the most tangible benefit
you get right off the top of the bat.

00:05:19.360 --> 00:05:21.420
And we think this is going to
be a noticeable improvement for

00:05:21.420 --> 00:05:24.120
users and for you developers.

00:05:24.150 --> 00:05:25.580
There is a caveat to this.

00:05:25.690 --> 00:05:29.850
If your widget uses a widget plugin,
we do actually load your class

00:05:29.950 --> 00:05:31.520
of widget in its own process.

00:05:31.540 --> 00:05:34.000
And that's because we need
to avoid namespace conflicts.

00:05:34.100 --> 00:05:37.580
So if you are using a widget plugin,
you will be in your own process.

00:05:37.600 --> 00:05:41.010
And this just further reinforces
the point that we like to use,

00:05:41.100 --> 00:05:45.140
that you should try to do everything
you possibly can in JavaScript.

00:05:45.360 --> 00:05:48.300
JavaScript has a lot of features,
it has a lot of API Therefore,

00:05:48.460 --> 00:05:51.510
you use it before resorting
to a widget plugin.

00:05:51.840 --> 00:05:54.450
This is different than
with internet plugins,

00:05:54.450 --> 00:05:54.600
though.

00:05:54.620 --> 00:05:57.590
So if you wrote a custom web kit
or internet plugin for your widget,

00:05:57.650 --> 00:05:59.160
that is running the same space.

00:05:59.270 --> 00:06:00.660
So now that all the widgets
are running together,

00:06:00.660 --> 00:06:04.750
you really need to make sure you're
using unique class names and symbols.

00:06:05.430 --> 00:06:07.600
For debug purposes,
there is a defaults write you

00:06:07.600 --> 00:06:09.960
can use that will give you
the Tiger-style dashboard.

00:06:09.960 --> 00:06:15.440
And that's defaults write
com.apple.dashboard processgrouping-int1.

00:06:15.440 --> 00:06:17.960
If you didn't write that down,
we're going to demo it in a second,

00:06:17.980 --> 00:06:18.700
so hold on.

00:06:19.420 --> 00:06:22.150
And finally, the point,
the biggest point is now since

00:06:22.190 --> 00:06:25.890
every widget's running together,
you really should never block.

00:06:25.960 --> 00:06:28.960
And I really need to emphasize
that you should never,

00:06:28.960 --> 00:06:30.630
ever, ever, ever block.

00:06:30.660 --> 00:06:31.840
So what does that mean?

00:06:31.840 --> 00:06:35.840
If you're using XML HTTP request,
use the asynchronous version.

00:06:35.860 --> 00:06:38.180
Do not use the synchronous version.

00:06:38.190 --> 00:06:41.300
If you're using widget.system
for command line utility,

00:06:41.400 --> 00:06:44.210
make sure you are using
the asynchronous version.

00:06:44.220 --> 00:06:47.210
If you're using the synchronous one,
you will be blocking

00:06:47.210 --> 00:06:49.400
every widget on Dashboard,
not just the dashboard.

00:06:49.420 --> 00:06:51.420
So this is really bad.

00:06:51.420 --> 00:06:55.420
Make sure you're using
the asynchronous versions.

00:06:55.420 --> 00:06:57.420
So I'd like to go hands-on now.

00:06:57.420 --> 00:07:01.600
If we could go to demo one, please.

00:07:01.600 --> 00:07:05.580
And I'm going to show you demo one,
please.

00:07:08.030 --> 00:07:08.590
All right.

00:07:08.660 --> 00:07:10.930
So what I'm going to show you
now is just a really quick

00:07:10.930 --> 00:07:14.410
demo about the new dashboard,
to show you the new speed of

00:07:14.410 --> 00:07:15.980
the new dashboard in Leopard.

00:07:15.980 --> 00:07:20.740
So if you have a Tiger machine,
feel free to watch up here.

00:07:20.740 --> 00:07:23.470
If you are running a Leopard machine,
feel free to follow along.

00:07:23.520 --> 00:07:27.320
So what I'm going to do is I'm going
to launch the terminal application.

00:07:27.320 --> 00:07:32.030
You'll find that in Applications,
Utilities, and

00:07:33.170 --> 00:07:35.360
"Terminal" and I'm going to open it.

00:07:35.360 --> 00:07:36.710
Is everyone with me?

00:07:36.710 --> 00:07:38.270
Can I see a show of hands?

00:07:38.270 --> 00:07:39.110
Alright.

00:07:39.310 --> 00:07:40.670
CHRISTIAN WONG:
So I'm going to type in the command

00:07:40.720 --> 00:07:42.710
that I showed you in the slide before.

00:07:42.710 --> 00:07:45.040
But instead of typing,
I'm just going to drag

00:07:45.040 --> 00:07:46.230
in a text clipping.

00:07:46.530 --> 00:07:49.160
So again,
if you want to type this with me,

00:07:49.320 --> 00:07:59.600
it's default, write, com.apple.dashboard,
and then I'm going to put a space there,

00:07:59.600 --> 00:08:02.420
process-grouping-int1.

00:08:02.420 --> 00:08:07.300
So I'm going to hit return,
and then I'm going to kill the doc.

00:08:07.360 --> 00:08:10.220
And that's the process
that houses Dashboard.

00:08:10.220 --> 00:08:11.290
So I'm going to kill the doc.

00:08:11.700 --> 00:08:14.480
And so what I'm going to do then is
once the doc loads up here again,

00:08:14.480 --> 00:08:17.320
I'm going to click on Dashboard.

00:08:17.320 --> 00:08:27.240
So 1-1000, 2-1000, 3-1000, 4-1000,
5-1000, 6-1000, 7-1000, 8-1000, 9-1000,

00:08:27.250 --> 00:08:29.970
10-1000, 11-1000.

00:08:29.980 --> 00:08:32.250
Wow, you're getting the drift.

00:08:32.310 --> 00:08:33.500
This is the Tiger Dashboard.

00:08:33.500 --> 00:08:36.500
And so sometimes loading performance
can be a little bit suboptimal.

00:08:40.700 --> 00:08:42.240
I'm going to hide Dashboard.

00:08:42.300 --> 00:08:43.310
And now I'm going to delete that.

00:08:43.400 --> 00:08:45.870
We're going to go back to
the Leopard Dashboard now.

00:08:45.950 --> 00:08:48.310
So I'm going to do defaults.

00:08:49.560 --> 00:08:51.730
And this time, I'm going to delete the
one that we just put.

00:08:51.920 --> 00:08:57.360
So I'm going to do delete
com.apple.dashboard.

00:08:57.700 --> 00:09:02.740
And then I'm going to
put process-grouping.

00:09:02.750 --> 00:09:04.940
All right, everyone have that in?

00:09:04.970 --> 00:09:07.520
We're going to hit Enter.

00:09:07.520 --> 00:09:10.170
And then we're going
to kill the doc again.

00:09:13.100 --> 00:09:14.490
All right, so now we're back up.

00:09:14.570 --> 00:09:15.360
Ready to count with me?

00:09:15.360 --> 00:09:17.070
I'm going to click Dashboard.

00:09:17.070 --> 00:09:19.400
One 1,000, two 1,000.

00:09:19.400 --> 00:09:21.540
That was two and a half 1,000.

00:09:21.540 --> 00:09:23.960
So, you know,
this was a really good example,

00:09:23.960 --> 00:09:28.310
but I think you get the idea that we've
got considerable speed improvements here.

00:09:28.310 --> 00:09:30.140
So, thank you.

00:09:30.140 --> 00:09:33.100
Back to slides, please.

00:09:41.400 --> 00:09:43.590
So we think that the new
architecture in Dashboard,

00:09:43.590 --> 00:09:44.620
I think it will thrill a lot of you.

00:09:44.620 --> 00:09:46.510
I think you're going to get a lot
more responsiveness out of it.

00:09:46.520 --> 00:09:47.660
Can I have slides, please?

00:09:51.550 --> 00:09:53.180
Thank you.

00:09:53.270 --> 00:09:55.240
So that's probably
going to be the biggest,

00:09:55.240 --> 00:09:57.140
most tangible thing,
but another thing that we offer in

00:09:57.140 --> 00:09:59.730
Leopard for Dashboard is Dashboard Sync.

00:09:59.890 --> 00:10:03.270
So you may have heard this already,
but in Leopard,

00:10:03.630 --> 00:10:05.950
your dashboard can sync via .Mac syncing.

00:10:06.070 --> 00:10:09.060
So that means the presence of widgets
and their preferences can be synced

00:10:09.080 --> 00:10:12.170
between different users using .Mac.

00:10:12.350 --> 00:10:14.300
And the good news is that this is free.

00:10:14.350 --> 00:10:16.300
You pretty much don't have
to do anything for this.

00:10:16.300 --> 00:10:20.600
If a user uses Dashboard Sync
in the .Mac system preferences,

00:10:20.670 --> 00:10:23.210
your preferences will get synced,
and it's great.

00:10:23.440 --> 00:10:24.800
It's going to work fine.

00:10:24.870 --> 00:10:28.050
But there is a little bit of a caveat.

00:10:28.130 --> 00:10:31.220
And the thing is that you load your
preferences in your widget usually

00:10:31.220 --> 00:10:32.700
when your widget first loads.

00:10:32.740 --> 00:10:35.680
And so if your widget doesn't
reload anywhere in there,

00:10:35.680 --> 00:10:38.460
you're not going to get any
changes in preferences that happen.

00:10:38.550 --> 00:10:40.980
So we've provided in
Leopard a new API for this.

00:10:40.980 --> 00:10:42.590
This is Widget On Sync.

00:10:42.640 --> 00:10:44.640
And you're going to give it a handler.

00:10:44.690 --> 00:10:48.430
And basically, that handler is called
whenever a sync event finishes.

00:10:48.500 --> 00:10:50.950
So when that sync event finishes,
you just go through,

00:10:51.110 --> 00:10:53.550
check all your preferences,
and update them as necessary.

00:10:53.570 --> 00:10:54.930
So this is a really
nice way to handle it.

00:10:54.940 --> 00:10:56.040
Just add a bit of polish.

00:10:56.200 --> 00:10:59.010
But we think people are going
to be really excited about this.

00:10:59.020 --> 00:11:01.060
And there's another thing
which you can do here,

00:11:01.110 --> 00:11:02.530
and that's a sync exclusion.

00:11:02.590 --> 00:11:05.860
If there's a preference that you have
that you would rather not have it synced,

00:11:05.860 --> 00:11:10.490
you can, in your Info.plist,
exclude any preferences that

00:11:10.550 --> 00:11:12.340
you would not like synced.

00:11:12.450 --> 00:11:15.130
So you do that using
the sync exclusions key.

00:11:15.230 --> 00:11:18.060
And then you provide it an array of
dictionaries where the first value,

00:11:18.060 --> 00:11:20.050
the first key,
is the name of the preference that

00:11:20.050 --> 00:11:22.260
you would like excluded from sync.

00:11:22.360 --> 00:11:25.570
And the second key is
whether it's global or not.

00:11:25.680 --> 00:11:28.140
So if you set global equal to true,
that means we're just going

00:11:28.150 --> 00:11:30.840
to look for that name,
that string, and exclude it.

00:11:30.940 --> 00:11:34.660
If you set it to be false,
we're going to look for the key.

00:11:34.660 --> 00:11:37.140
But we're also going to look
for the widget identifier.

00:11:37.140 --> 00:11:40.930
It's a common convention in widgets
that if you're doing per instance

00:11:40.940 --> 00:11:45.740
widget preferences that you prepend
the key with the widget identifier.

00:11:45.820 --> 00:11:48.280
And so if you're doing that,
we'll notice that,

00:11:48.280 --> 00:11:50.620
and then we'll exclude that key as well.

00:11:50.620 --> 00:11:55.270
So I'd like to go back to demo and show
you a little bit about syncing widgets.

00:12:02.230 --> 00:12:05.600
So if you take a look at the sample code
that you downloaded for the session,

00:12:05.650 --> 00:12:06.790
there's a project called Syncr.

00:12:06.800 --> 00:12:07.970
And this works on Leopard only.

00:12:07.980 --> 00:12:10.820
So if you're on Leopard,
feel free to follow along.

00:12:11.120 --> 00:12:13.680
If you are on Tiger,
you might want to watch

00:12:13.680 --> 00:12:15.060
on the screen here.

00:12:15.060 --> 00:12:17.980
And for the first bit of this demo,
I'm actually going to be using a

00:12:17.980 --> 00:12:19.930
fast user switching a little bit,
so you might be best off

00:12:19.940 --> 00:12:21.060
to just watch me for a bit.

00:12:21.110 --> 00:12:23.000
So I've got this widget here.

00:12:23.060 --> 00:12:25.130
I'm just going to double
click on it and install it.

00:12:25.310 --> 00:12:26.820
And when I do it,
it's actually really simple.

00:12:26.850 --> 00:12:30.290
All this widget does is it
saves and retrieves preferences,

00:12:30.330 --> 00:12:31.000
just a string.

00:12:31.180 --> 00:12:35.310
So I'm going to put a string here,
and I'm just going to say, hi, mom.

00:12:36.310 --> 00:12:37.140
I'm going to set that preference.

00:12:37.140 --> 00:12:38.210
I'm also going to keep the widget.

00:12:38.220 --> 00:12:39.510
Probably helps if I do that.

00:12:39.530 --> 00:12:41.280
So that's pretty much it.

00:12:41.280 --> 00:12:43.870
I've got this widget on my dashboard,
and I've got a string

00:12:43.960 --> 00:12:45.000
set as a preference.

00:12:45.000 --> 00:12:48.080
And just for demo purposes here,
I'm also going to add a

00:12:48.080 --> 00:12:50.600
world clock widget here.

00:12:50.600 --> 00:12:53.560
And I am going to set its location
to something else here in America.

00:12:53.630 --> 00:12:56.070
I'm going to put it to
my hometown of Chicago.

00:12:58.300 --> 00:12:59.860
So now that I've got
that on my dashboard,

00:12:59.960 --> 00:13:02.010
those preferences are all stored.

00:13:02.170 --> 00:13:06.600
I'm going to go in System Preferences,
and I'm going to go to .max sync.

00:13:06.750 --> 00:13:09.280
I've already got my user
account set up here.

00:13:09.390 --> 00:13:12.590
So I'm going to go to the Sync pane,
let this load.

00:13:13.370 --> 00:13:15.250
And I'm going to sync this, my widgets.

00:13:15.300 --> 00:13:17.560
So this is going to take
everything that's on my dashboard,

00:13:17.620 --> 00:13:19.940
the presence of widgets,
and where they're located,

00:13:20.030 --> 00:13:23.980
and their preferences,
and sync them to .mac.

00:13:24.670 --> 00:13:25.900
So this might take a few seconds.

00:13:25.900 --> 00:13:26.720
OK.

00:13:26.760 --> 00:13:29.940
So now that's been stored on .Mac,
just like it's on my machine.

00:13:29.940 --> 00:13:33.720
I'm going to switch users
to another user here.

00:13:33.720 --> 00:13:35.730
This is going to take a second.

00:13:39.200 --> 00:13:42.140
All right.

00:13:42.230 --> 00:13:44.560
So now with this user,
I'm just going to go back

00:13:44.560 --> 00:13:46.880
to the .mac prefpaint.

00:13:46.880 --> 00:13:49.420
Again,
I've got the same .mac user set in here.

00:13:49.440 --> 00:13:52.800
So now that I've got that preference,
I'm going to go to Sync.

00:13:52.800 --> 00:13:55.740
And you'll notice that I already
have this prepared for Dashboard

00:13:55.740 --> 00:13:57.640
Widgets to sync right there.

00:13:57.660 --> 00:13:59.800
So I'm just going to say Sync Now.

00:14:02.800 --> 00:14:03.640
Take a few seconds.

00:14:03.640 --> 00:14:04.820
We're on the internet, of course.

00:14:04.840 --> 00:14:08.290
All right.

00:14:08.690 --> 00:14:10.380
And then now I'm going to
go down here to the dock,

00:14:10.430 --> 00:14:11.520
click Dashboard.

00:14:11.550 --> 00:14:14.450
And sure enough,
I've got a clock for Chicago and

00:14:14.960 --> 00:14:18.220
my Syncr widget magically there.

00:14:18.380 --> 00:14:20.630
So that's one half of the sync story.

00:14:20.780 --> 00:14:23.060
We now have the same
dashboard on two computers.

00:14:23.090 --> 00:14:24.060
Now what about this one?

00:14:24.060 --> 00:14:26.180
Let's say I change the dashboard here,
and I want to then go

00:14:26.180 --> 00:14:27.600
back to the other account.

00:14:27.640 --> 00:14:30.130
So I'm going to change this preference
string back into "Hi Mom" here.

00:14:30.140 --> 00:14:33.400
And I'm going to say, well,
for the time being, "Bye Mom."

00:14:35.350 --> 00:14:36.470
I've set that preference.

00:14:36.620 --> 00:14:39.680
So OK, we're going to go back to
System Preferences here,

00:14:39.730 --> 00:14:45.040
into .mac, and we're going to sync
that back to my first user.

00:14:45.100 --> 00:14:47.580
So this will take a few seconds again.

00:14:55.550 --> 00:14:59.100
And then I'm going to go here back to
the account I was using a second ago.

00:14:59.140 --> 00:15:01.770
And I'm going to sync the widgets again.

00:15:06.070 --> 00:15:09.600
And then I'm going to go here back to
the account I was using a second ago.

00:15:09.600 --> 00:15:12.280
And I'm going to sync the widgets again.

00:15:20.270 --> 00:15:23.000
And sure enough, it says, "Bye, Mom,
now." So that's pretty much

00:15:23.000 --> 00:15:23.900
the whole round tripping.

00:15:24.050 --> 00:15:27.070
But you'll notice that Dashboard
didn't-- it did not reload

00:15:27.080 --> 00:15:28.080
through that entire time.

00:15:28.080 --> 00:15:31.140
So how did it know that it
should fetch a new preference?

00:15:31.190 --> 00:15:32.600
Well, I used Widget On Sync for that.

00:15:32.740 --> 00:15:35.130
So let's actually pop this
widget open really quick.

00:15:35.220 --> 00:15:36.550
Let's take a look at the
code I used for that.

00:15:36.560 --> 00:15:37.960
And it's actually pretty simple.

00:15:37.960 --> 00:15:41.140
Now, for the purposes of this demo,
I am going to be using Dash Code.

00:15:41.160 --> 00:15:43.480
I will be only opening
this widget in Dash Code.

00:15:43.540 --> 00:15:46.480
So that means taking the
widget as it is on disk,

00:15:46.510 --> 00:15:48.760
and just opening it up so I can
read the source code files,

00:15:48.790 --> 00:15:51.490
and then also run it
in Dash Code if I like.

00:15:52.790 --> 00:15:55.540
So I'm going to take the before version,
so if you look in your

00:15:55.590 --> 00:15:59.730
version of it in before,
and open it on Dashcode.

00:15:59.890 --> 00:16:02.680
So I'm going to take the before version,
so if you look in your

00:16:02.820 --> 00:16:06.820
version of it in before,
and open it on Dashcode.

00:16:29.800 --> 00:16:31.850
So I'm going to take the
before version of it in before,

00:16:31.850 --> 00:16:32.610
and open it on Sync.

00:16:32.610 --> 00:16:34.940
And we're going to say, hey,
call this Sync function, OK?

00:16:34.940 --> 00:16:36.680
So I'm going to scroll
down to the bottom here,

00:16:36.680 --> 00:16:37.870
and here's the Sync function.

00:16:37.870 --> 00:16:40.520
It's basically two lines of code,
and all I'm doing is I'm turning off,

00:16:40.520 --> 00:16:42.120
I'm showing an element
in the widget's UI,

00:16:42.120 --> 00:16:43.480
and then I'm replacing the string.

00:16:43.490 --> 00:16:46.380
I'm reading it from file, and I'm saying,
hey, just dump it in the widget.

00:16:46.380 --> 00:16:47.400
So that's pretty much it.

00:16:47.460 --> 00:16:49.160
It's pretty straightforward.

00:16:49.160 --> 00:16:52.710
The only other thing that's
worthwhile of note here,

00:16:52.770 --> 00:16:56.700
as I uncomment this,
is the fact that I'm using this make key

00:16:56.910 --> 00:16:59.780
function to get the widget identified.

00:16:59.800 --> 00:17:16.360
So I'm going to go back to the slides,
please.

00:17:25.490 --> 00:17:26.780
So that's syncing widgets.

00:17:26.810 --> 00:17:30.700
And the good news is that the
vast majority of it is free.

00:17:30.720 --> 00:17:32.970
You should handle the
widget on sync event,

00:17:32.970 --> 00:17:33.580
though.

00:17:33.580 --> 00:17:34.460
It's really important.

00:17:34.460 --> 00:17:36.800
It really kind of helps round
out the experience for users.

00:17:36.820 --> 00:17:38.280
But you don't have to
if you don't like to,

00:17:38.320 --> 00:17:42.870
or if you're not using preferences that
you need to keep updated very often.

00:17:43.120 --> 00:17:45.860
So at this point,
I want to talk a little bit about some of

00:17:45.870 --> 00:17:48.240
the technologies that are new in WebKit.

00:17:48.240 --> 00:17:50.890
WebKit, if you don't know,
is the technology that underlies

00:17:50.890 --> 00:17:51.800
every Dashboard widget.

00:17:51.800 --> 00:17:54.270
And they've been doing some new
exciting things that you should

00:17:54.270 --> 00:17:56.160
be aware of that you might want to
take advantage of in your widget.

00:17:56.420 --> 00:17:58.460
The first of these is CSS borders.

00:17:58.460 --> 00:18:02.580
They've implemented support for
adding a border radius on any div.

00:18:02.600 --> 00:18:05.710
So this means that, whereas before,
you might have included rounded

00:18:05.810 --> 00:18:09.270
rects everywhere in your widget's
implementation with rounded corners,

00:18:09.270 --> 00:18:10.620
you don't need to do that anymore.

00:18:10.620 --> 00:18:12.400
If you have a div that
has a border on it,

00:18:12.570 --> 00:18:15.120
you can just apply the
WebKit border radius property to it,

00:18:15.120 --> 00:18:17.200
and it'll just give you these nice,
pretty,

00:18:17.200 --> 00:18:19.060
rounded corners all the way around.

00:18:19.080 --> 00:18:21.460
There's also support for
border images as well.

00:18:21.460 --> 00:18:23.660
So if you want to use that,
take a look into what

00:18:23.670 --> 00:18:24.860
WebKit has to offer.

00:18:26.320 --> 00:18:27.840
The next thing,
and this is just the beginning

00:18:27.840 --> 00:18:31.480
of the high DPI story for both
Dashboard and for web pages,

00:18:31.480 --> 00:18:33.600
are high DPI media queries.

00:18:33.600 --> 00:18:38.550
These queries are directives you can
use in your CSS file to query if you're

00:18:38.570 --> 00:18:41.250
on screen and the device pixel ratio.

00:18:41.270 --> 00:18:44.050
So this is the magnification
that the user is running at.

00:18:44.100 --> 00:18:46.590
And based on that decision,
you can supply different

00:18:46.680 --> 00:18:47.720
resolution images.

00:18:47.720 --> 00:18:50.590
This is a really big deal if you're
using custom images on your UI and

00:18:50.590 --> 00:18:53.600
you'd like to be able to use the
appropriate resolution of image.

00:18:54.330 --> 00:18:58.100
So you can use this in combination
with the background size,

00:18:58.200 --> 00:18:59.520
WebKit background size property.

00:18:59.540 --> 00:19:02.370
This allows you to scale
images appropriately based on

00:19:02.370 --> 00:19:05.500
your entire web page or on the
entire size of your widget.

00:19:05.500 --> 00:19:09.090
One thing which I missed in the
earlier bullet point there was

00:19:09.470 --> 00:19:13.190
window.devicePixelRatio is a property
that was added to the window object.

00:19:13.200 --> 00:19:16.480
And this gives you the ability
in JavaScript to find out

00:19:16.590 --> 00:19:18.380
what the magnification is.

00:19:18.380 --> 00:19:21.600
You can't just, it's not that you can
only do it from CSS.

00:19:22.280 --> 00:19:24.280
You can do it from any
other object in the world.

00:19:24.280 --> 00:19:26.250
And there's also some WebKit changes
you should be aware of.

00:19:26.330 --> 00:19:27.670
Just some things that you might
be wondering if you're running

00:19:27.670 --> 00:19:30.280
your widgets in Leopard why
they're not working quite right.

00:19:30.280 --> 00:19:32.280
Be aware of these things.

00:19:32.280 --> 00:19:34.280
And the first of one of
these things is that Canvas,

00:19:34.280 --> 00:19:36.280
which we introduced in Tiger,
is now a standard.

00:19:36.280 --> 00:19:39.150
If you use Firefox or Opera,
you'll see that the Canvas is now

00:19:39.150 --> 00:19:40.280
supported in those browsers as well.

00:19:40.280 --> 00:19:43.950
But part of the standardization
process is that it's a little

00:19:44.030 --> 00:19:46.240
bit different than it was before.

00:19:46.330 --> 00:19:48.280
So what does that mean?

00:19:48.300 --> 00:19:50.280
Before, you might have been
using Canvas like this.

00:19:50.320 --> 00:19:53.280
You said Canvas, gave an ID,
closed it off, and that was it.

00:19:53.320 --> 00:19:56.460
Well, now in Leopard,
in WebKit in Leopard,

00:19:56.460 --> 00:20:00.310
you will have to supply a width
and a height attribute as well.

00:20:00.410 --> 00:20:02.570
And so the width and the
height are the size of the

00:20:02.610 --> 00:20:04.320
buffer that's being drawn upon.

00:20:04.320 --> 00:20:06.180
And then in CSS,
you can then position it and

00:20:06.180 --> 00:20:09.320
size it however it need be,
and it'll scale it appropriately.

00:20:09.520 --> 00:20:12.320
But you need to supply this
in your HTML file as well.

00:20:12.320 --> 00:20:16.300
And then in addition to that,
Canvas now supports fallback content.

00:20:16.400 --> 00:20:19.320
So that means if the
browser can't render that,

00:20:19.320 --> 00:20:22.320
the Canvas,
you can put fallback content in there.

00:20:22.320 --> 00:20:25.800
And then it's very important that
you always include then the ending

00:20:25.910 --> 00:20:28.270
closing-- the ending Canvas tag.

00:20:28.390 --> 00:20:30.930
If you don't do that,
WebKit will see the rest of the

00:20:30.930 --> 00:20:34.320
web page as fallback content,
and that's probably not what you want.

00:20:34.320 --> 00:20:36.560
So make sure you're using
that closing Canvas tag.

00:20:36.770 --> 00:20:39.990
Another thing in Canvas,
and this is something

00:20:40.000 --> 00:20:44.540
that is really handy,
is that the path buffer doesn't

00:20:44.590 --> 00:20:45.840
clear automatically anymore.

00:20:45.840 --> 00:20:48.930
You explicitly clear
it by calling new path.

00:20:48.960 --> 00:20:52.710
So whenever you're drawing
a new path on the Canvas,

00:20:52.710 --> 00:20:56.170
you should call begin
path to start a new path.

00:20:57.450 --> 00:21:00.600
Other changes in WebKit include,
for arbitrary elements,

00:21:00.600 --> 00:21:04.660
make sure you're using get attribute
to get an arbitrary HTML element.

00:21:04.660 --> 00:21:07.660
Using the dot notation that's
common won't work anymore.

00:21:07.660 --> 00:21:09.520
Always close your script tags.

00:21:09.660 --> 00:21:14.000
It's pretty common for some people to
just use a closing slash on a script tag.

00:21:14.000 --> 00:21:17.080
Instead,
explicitly use a closing script tag.

00:21:17.080 --> 00:21:19.530
And finally,
if you're using display inline block,

00:21:19.540 --> 00:21:21.950
the metrics have actually
been improved for that.

00:21:21.950 --> 00:21:25.490
So if you're using it, go back,
make sure everything's looking right.

00:21:26.220 --> 00:21:28.300
And the good news about all of
these changes is that for your

00:21:28.300 --> 00:21:30.430
friends that aren't using Leopard,
they don't need Leopard

00:21:30.440 --> 00:21:31.340
to check them out.

00:21:31.340 --> 00:21:35.020
They can go to nightly.webkit.org,
get a new copy of WebKit,

00:21:35.020 --> 00:21:37.870
and actually run their widget in there,
and they'll find out right away

00:21:37.870 --> 00:21:39.640
what's going on with their widgets.

00:21:39.700 --> 00:21:40.960
So that's a handy thing for you to do.

00:21:40.960 --> 00:21:43.060
So dashboard in Leopard.

00:21:43.060 --> 00:21:46.860
I think, well, first and foremost,
make sure you're going to the dashcode

00:21:46.910 --> 00:21:49.120
session tomorrow morning and the marina.

00:21:49.120 --> 00:21:51.880
It's my third time saying it,
and I'll keep saying it.

00:21:51.950 --> 00:21:55.330
Dashcode's a great creation environment,
and you should really go there.

00:21:55.410 --> 00:21:56.640
Go there, see what it has to offer.

00:21:56.650 --> 00:21:57.720
So make sure you're going there.

00:21:57.720 --> 00:22:00.810
You should definitely be aware that
widgets are now in one process,

00:22:00.810 --> 00:22:03.900
so make sure that you're never
doing anything synchronously.

00:22:05.670 --> 00:22:06.510
Dashboard sync is here.

00:22:06.670 --> 00:22:08.800
Make sure you're handling
the widget.onsync event.

00:22:08.800 --> 00:22:11.480
That way you can take advantage
of any preferences that

00:22:11.480 --> 00:22:13.000
have changed during a sync.

00:22:13.000 --> 00:22:15.700
And finally,
make sure you take into account for the

00:22:15.700 --> 00:22:17.520
new WebKit enhancements and changes.

00:22:17.520 --> 00:22:20.980
So we've talked about the
dashboard of tomorrow,

00:22:20.980 --> 00:22:23.540
but Dashboard's here in Tiger today.

00:22:23.540 --> 00:22:26.340
And there's some things that have come
out since we met last year that you

00:22:26.490 --> 00:22:29.940
should probably take advantage of to
help make your widget more interactive,

00:22:29.940 --> 00:22:32.030
more interesting,
and possibly complement your

00:22:32.030 --> 00:22:33.880
existing Cocoa application,
too.

00:22:34.440 --> 00:22:36.800
So the first thing I wanted to
talk about are the Apple classes.

00:22:36.800 --> 00:22:39.880
And these were introduced
in Mac OS 10.4.3.

00:22:39.880 --> 00:22:44.640
And these are a set of JavaScript classes
that provide common controls like the

00:22:44.640 --> 00:22:47.550
Apple button or the Apple Glass button,
which you'll find on

00:22:47.550 --> 00:22:50.520
the back of a widget,
usually, and the Apple Info button on the

00:22:50.520 --> 00:22:52.340
front used to flip to the back.

00:22:52.420 --> 00:22:54.820
In addition to that,
you'll also find things like

00:22:54.820 --> 00:22:56.220
scroll bars and sliders.

00:22:56.220 --> 00:22:58.660
And then finally, a neat little class
called Apple Animator,

00:22:58.740 --> 00:23:01.160
which lets you animate over
a range of values over time.

00:23:01.160 --> 00:23:05.880
So to use one of these classes,
you normally just... In your HTML file,

00:23:05.940 --> 00:23:09.390
use a script tag to set its
source equal to one of the files.

00:23:09.480 --> 00:23:13.950
And the files, the implementation files,
are in System Library, Widget Resources,

00:23:13.950 --> 00:23:14.990
Apple Classes.

00:23:15.000 --> 00:23:16.870
This is all in the documentation
available on the web,

00:23:16.870 --> 00:23:17.680
if you're curious.

00:23:17.680 --> 00:23:20.690
But from there, you would just include
the class that you need.

00:23:20.720 --> 00:23:22.820
So in this case,
we're going to include an Apple button,

00:23:22.920 --> 00:23:23.800
applebutton.js.

00:23:23.800 --> 00:23:28.780
And then in our HTML file,
we're going to want to have a div.

00:23:28.800 --> 00:23:30.760
So the div here is what's
going to hold whatever element

00:23:30.760 --> 00:23:31.880
we're going to put into it.

00:23:31.900 --> 00:23:33.510
In this case, we're going to put a
Glass button in there.

00:23:34.440 --> 00:23:36.020
So in our JavaScript,
in an onload handler,

00:23:36.020 --> 00:23:37.780
we're going to use a
specific constructor.

00:23:37.780 --> 00:23:39.520
This is the Apple Glass button
constructor.

00:23:39.520 --> 00:23:41.160
And it takes three things in there.

00:23:41.160 --> 00:23:43.520
The first thing is the element,
which is going to house the button.

00:23:43.520 --> 00:23:46.340
The second thing is the text
that you want the button to have.

00:23:46.380 --> 00:23:48.490
And the third thing is the
handler that should be called

00:23:48.550 --> 00:23:49.860
when the button is clicked.

00:23:49.920 --> 00:23:53.700
So other constructors have other
sets of parameters that they take in.

00:23:53.700 --> 00:23:54.560
We're just going to show off.

00:23:54.680 --> 00:23:56.180
This is just the Apple Glass button.

00:23:57.440 --> 00:23:58.980
Or you could use Dashcode.

00:23:58.980 --> 00:24:01.400
Dashcode does all of this for you.

00:24:01.400 --> 00:24:03.840
You just drag and drop
an Apple button on there.

00:24:03.840 --> 00:24:05.340
You drag and drop an
Apple slider on there,

00:24:05.340 --> 00:24:06.260
an Apple scroll area.

00:24:06.260 --> 00:24:07.170
No code.

00:24:07.200 --> 00:24:08.440
It's almost too easy.

00:24:08.440 --> 00:24:09.910
We're making it too easy for you.

00:24:09.950 --> 00:24:13.760
But I am going to talk about
one of these Apple classes,

00:24:13.760 --> 00:24:16.520
which Dashcode doesn't
provide an API for,

00:24:16.520 --> 00:24:18.980
or a UI for,
and that's the Apple Animator.

00:24:18.980 --> 00:24:23.140
So the Apple Animator lets you animate
over a range of values over time.

00:24:23.140 --> 00:24:25.400
Its base unit is an animation.

00:24:25.420 --> 00:24:27.020
An animation has two properties.

00:24:27.430 --> 00:24:29.790
The range of values,
so the starting and the finishing value,

00:24:29.800 --> 00:24:32.170
and then an interval handler,
which is a function that's called

00:24:32.230 --> 00:24:33.900
whenever the animation's value changes.

00:24:33.900 --> 00:24:37.460
So you wrap an animation
inside of an animator.

00:24:37.460 --> 00:24:41.080
Animators are timers,
and they take in also two parameters,

00:24:41.080 --> 00:24:44.590
the first one being the period of time,
so how long you'd like the

00:24:44.600 --> 00:24:46.680
animation to go on for,
and then the interval,

00:24:46.680 --> 00:24:48.920
how often you'd like
the animation updated.

00:24:50.710 --> 00:24:54.140
You can also have multiple
animations per animator.

00:24:54.140 --> 00:24:57.090
You're not just stuck in a
one-to-one relationship there.

00:24:57.830 --> 00:24:59.900
Once you've set this all up,
you'll be able to just

00:24:59.900 --> 00:25:01.150
call start on the animator.

00:25:01.160 --> 00:25:03.580
And that just tells it, hey, get ready,
get going.

00:25:03.710 --> 00:25:05.500
And then every time the
interval is reached,

00:25:05.500 --> 00:25:07.460
so every time you want
the animation to update,

00:25:07.460 --> 00:25:10.380
the interval handler for
the animation is called.

00:25:10.380 --> 00:25:13.190
And that allows you to actually
change whatever needs to be

00:25:13.190 --> 00:25:14.960
changed for the animation.

00:25:15.010 --> 00:25:17.000
So let's go hands-on on this.

00:25:17.020 --> 00:25:21.010
And the good news about this sample,
if you can switch me to demo, please,

00:25:21.240 --> 00:25:22.800
is that this works on Tiger.

00:25:22.940 --> 00:25:26.110
So you don't need to
be on Leopard for this.

00:25:26.870 --> 00:25:30.740
So if you open up the sample code
that we made for this session,

00:25:30.740 --> 00:25:32.430
and you go to the
Before folder for a sizer,

00:25:32.490 --> 00:25:34.380
you'll see that there's a widget here.

00:25:34.550 --> 00:25:35.150
Everyone see that?

00:25:35.170 --> 00:25:36.140
Can I see a show of hands, please?

00:25:36.140 --> 00:25:37.010
Yeah.

00:25:37.410 --> 00:25:38.420
Thank you.

00:25:38.420 --> 00:25:40.440
Okay, so I'm just going to
double-click on this widget,

00:25:40.440 --> 00:25:42.640
and I am not going to install it.

00:25:42.750 --> 00:25:43.760
There's a little secret here.

00:25:43.760 --> 00:25:45.660
If you hold down the
Command and Option keys when

00:25:45.660 --> 00:25:48.500
the widget installer comes up,
you'll see that the Install button

00:25:48.500 --> 00:25:51.520
changes to a Run button,
and that will run the widget in place.

00:25:51.520 --> 00:25:54.470
So I'm going to click that,
and you'll see we've got a pretty bland,

00:25:54.470 --> 00:25:55.570
boring widget here.

00:25:55.920 --> 00:25:57.890
But in the top right-hand
corner is an Info button,

00:25:57.890 --> 00:25:59.500
and that's the most important thing.

00:25:59.500 --> 00:26:01.870
I'm going to click on that,
and I'm going to flip to the back,

00:26:01.870 --> 00:26:04.140
and all of a sudden we get
this kind of clipped mess.

00:26:04.140 --> 00:26:06.600
And the worst part about this
is that to get it to redraw,

00:26:06.610 --> 00:26:08.090
okay, now I've got to move it.

00:26:08.140 --> 00:26:10.290
So this isn't really pretty.

00:26:10.300 --> 00:26:12.580
The problem we have here is that
we've got a front side that's

00:26:12.580 --> 00:26:13.920
different than the back side.

00:26:13.940 --> 00:26:18.190
So we're going to use an Apple animation
to actually shrink the front

00:26:18.190 --> 00:26:21.600
side to the size of the back,
and then flip it over.

00:26:21.600 --> 00:26:23.860
So that's kind of a
neat futuristic effect,

00:26:23.960 --> 00:26:25.870
and I think your users will like it.

00:26:25.970 --> 00:26:28.670
So, oh yeah,
and you flip it back to the front.

00:26:28.700 --> 00:26:29.760
It wouldn't look too nice either, so.

00:26:31.890 --> 00:26:33.710
So again,
I'm going to take the Resizer widget,

00:26:33.710 --> 00:26:35.340
and I'm going to open it in Dash code.

00:26:35.520 --> 00:26:40.950
But feel free to pop it open
in any text editor you like.

00:26:41.010 --> 00:26:41.580
Everyone with me?

00:26:41.650 --> 00:26:43.800
Can I see a show of hands?

00:26:43.810 --> 00:26:45.230
All right.

00:26:47.340 --> 00:26:49.360
CHRISTIAN WONG:
So now that I'm here in Dashcode,

00:26:49.390 --> 00:26:51.060
I am going to actually hide the canvas.

00:26:51.160 --> 00:26:53.660
Now again,
I have opened this widget in Dashcode.

00:26:53.820 --> 00:26:56.310
This turns off most of its
code generation abilities.

00:26:56.370 --> 00:26:58.380
I won't be able to drag
and drop any parts to it,

00:26:58.450 --> 00:27:02.060
but it does let me use its code editor,
and it lets me run it and debug

00:27:02.060 --> 00:27:03.440
it using Dashcode's facility.

00:27:03.440 --> 00:27:06.270
So that's a handy feature if you
already have a widget and you don't

00:27:06.360 --> 00:27:08.200
want to import it into Dashcode.

00:27:08.380 --> 00:27:11.120
I'm going to hide the canvas here,
so I'm just looking at

00:27:11.270 --> 00:27:12.780
the source code editor.

00:27:12.890 --> 00:27:16.500
You can show the source code editor
by clicking the View Item here in the

00:27:16.500 --> 00:27:19.020
menu bar and choosing Source Code.

00:27:19.070 --> 00:27:20.400
And here we go.

00:27:20.470 --> 00:27:22.340
So this is the JavaScript file
for our widget.

00:27:22.430 --> 00:27:24.380
Is everyone seeing this?

00:27:26.950 --> 00:27:30.080
So I'm going to actually
make this widget,

00:27:30.090 --> 00:27:33.740
this window, as large as possible.

00:27:34.560 --> 00:27:37.000
I'm going to scroll down
past the legal here.

00:27:37.030 --> 00:27:39.370
And so what happens is,
what I'll tell you is that when

00:27:39.370 --> 00:27:44.560
you click on the Info button,
this Show Prefs function is called.

00:27:44.610 --> 00:27:47.960
So Show Prefs right now
just does two things.

00:27:48.010 --> 00:27:51.790
It stores the height and width of
the front of the widget so that

00:27:51.790 --> 00:27:54.840
we can use it later when we're
switching from the back to the front.

00:27:55.060 --> 00:27:58.790
And then it also just calls the code
that actually does the flip animation.

00:27:58.880 --> 00:28:03.430
So I'm going to add some code in here
that actually sets up the animation.

00:28:03.500 --> 00:28:05.500
And I'm not going to use
any old Apple animation.

00:28:05.500 --> 00:28:07.250
I'm going to use the
Apple Rect animation.

00:28:07.270 --> 00:28:10.760
Apple Rect animation actually
gives me values in a rectangle,

00:28:10.760 --> 00:28:13.250
so two sets of values.

00:28:13.340 --> 00:28:17.000
And so to do that,
before we actually set up the animation,

00:28:17.000 --> 00:28:19.360
we need to create two Apple rectangles.

00:28:19.360 --> 00:28:22.630
So if you'll uncomment the
code that I have here in

00:28:22.750 --> 00:28:25.570
this function here and here--

00:28:27.950 --> 00:28:29.100
I'll walk you through it.

00:28:29.160 --> 00:28:32.290
The first thing that we do
is we create two rectangles,

00:28:32.480 --> 00:28:34.190
the first one being the starting rect.

00:28:34.360 --> 00:28:37.190
This is where we're starting from,
the size of the front of the widget.

00:28:37.330 --> 00:28:39.300
And then I'm creating a finishing rect.

00:28:39.370 --> 00:28:40.820
That's the size of the back.

00:28:40.910 --> 00:28:44.540
And here, it's got just two magic values,
320 and 150.

00:28:44.660 --> 00:28:45.800
That's just the size of the back.

00:28:45.800 --> 00:28:47.300
I'm telling you that.

00:28:47.300 --> 00:28:49.610
So now that we have the rectangles,
our starting and finishing

00:28:49.610 --> 00:28:51.770
rectangles in place,
I'm going to create

00:28:51.790 --> 00:28:53.490
the new rect animation.

00:28:53.990 --> 00:28:57.560
And then here I'm going to pass in the
starting rect and the finishing rect,

00:28:57.570 --> 00:28:59.360
and then this rect handler.

00:28:59.490 --> 00:29:02.360
So this is going to be called
every time the animation is fired,

00:29:02.360 --> 00:29:04.030
every time it's triggered.

00:29:04.200 --> 00:29:07.600
So if you scroll down underneath
the flip to back function here,

00:29:07.630 --> 00:29:11.520
you'll see I have the rect handler here.

00:29:11.580 --> 00:29:13.600
And all it's doing-- and it's
not terribly important-- is it's

00:29:13.600 --> 00:29:16.570
actually resizing the widget window
and a few elements on its interface.

00:29:16.630 --> 00:29:19.910
So just feel free to uncomment
that and follow me back up

00:29:19.910 --> 00:29:21.800
into the set back function.

00:29:22.890 --> 00:29:24.970
Okay, so we're back here to line 91,
where we have the

00:29:24.970 --> 00:29:26.080
current racked animation.

00:29:26.080 --> 00:29:27.800
So we've set that up,
and now I'm going to

00:29:27.800 --> 00:29:28.970
create a new animator.

00:29:28.980 --> 00:29:32.600
And the two values I'm going to pass
to the animator are 500 milliseconds,

00:29:32.660 --> 00:29:34.390
that's how long I'd like
the animation to last,

00:29:34.420 --> 00:29:36.300
and 13 milliseconds,
that's how often I'd like

00:29:36.310 --> 00:29:38.840
the animation triggered,
how often I'd like to update its values.

00:29:38.860 --> 00:29:42.630
So once I've done that,
I'm going to associate the animator

00:29:42.630 --> 00:29:45.930
timer with the animation values,
using add animation.

00:29:46.020 --> 00:29:50.050
I'm going to say, hey, when this is done,
flip the widget over to the back,

00:29:50.880 --> 00:29:52.960
and then I'm going to
start the animation.

00:29:53.020 --> 00:29:54.780
And that's pretty much that.

00:29:54.870 --> 00:29:56.610
There's two lines that
I do need you to uncomment,

00:29:56.610 --> 00:29:58.260
though, if you want this to work nicely.

00:29:58.260 --> 00:30:00.270
And the first one is this flip to back.

00:30:00.320 --> 00:30:01.940
Now our animation is handling this.

00:30:02.000 --> 00:30:02.970
We don't need to do this manually.

00:30:02.980 --> 00:30:05.860
And the second thing is,
in the actual flip to back function,

00:30:05.860 --> 00:30:08.160
I have a line here that
says window.resize to.

00:30:08.160 --> 00:30:10.460
Again, our animation is taking
care of the resizing,

00:30:10.470 --> 00:30:11.440
so we can hide that.

00:30:11.440 --> 00:30:14.150
So I'm going to actually run
this widget now in Dashcode,

00:30:14.150 --> 00:30:15.340
show you what it does.

00:30:19.150 --> 00:30:21.980
Okay,
so we've got our widget running here.

00:30:22.040 --> 00:30:24.560
I'm going to move it up here,
and I'm going to make it really, really,

00:30:24.560 --> 00:30:26.550
really big.

00:30:28.360 --> 00:30:30.410
And then I'm going to do that.

00:30:30.660 --> 00:30:34.000
You'll see that it's sucked up
to the size and flipped over.

00:30:34.000 --> 00:30:37.220
There's also code in the sample that will
actually resize it on the way back out.

00:30:37.350 --> 00:30:40.010
So if you click on the Done button,
it'll actually then flip it

00:30:40.100 --> 00:30:41.430
over and resize it back out.

00:30:41.520 --> 00:30:42.960
We won't go over that now,
but it's all there.

00:30:43.070 --> 00:30:43.900
It's just commented out.

00:30:44.020 --> 00:30:46.540
Feel free to take a look at that later.

00:30:46.560 --> 00:30:48.900
All right, if I could go back to slides,
please.

00:30:53.920 --> 00:30:56.040
So that's Apple Classes,
and you should really look

00:30:56.040 --> 00:30:57.360
into them for three reasons.

00:30:57.560 --> 00:30:58.810
First and foremost,
they'll save yourself a

00:30:58.810 --> 00:31:00.360
lot of time and effort.

00:31:00.400 --> 00:31:03.140
These are things that you won't
have to include tons of code

00:31:03.140 --> 00:31:04.040
in your widget for anymore.

00:31:04.040 --> 00:31:06.640
You just include these files,
use the appropriate constructor,

00:31:06.680 --> 00:31:08.160
and you'll be set.

00:31:08.270 --> 00:31:10.970
So your code will be less complex,
and that's really important too.

00:31:11.040 --> 00:31:12.840
And finally,
the one added bonus here is that

00:31:12.840 --> 00:31:13.920
you'll stay in sync with Apple.

00:31:14.040 --> 00:31:15.500
If we ever update any
one of these things,

00:31:15.500 --> 00:31:18.230
how they look, their behaviors,
you'll get them for free.

00:31:18.350 --> 00:31:23.300
So use the Apple Classes if you'd like to
have standard controls provided by Apple.

00:31:23.560 --> 00:31:25.550
So the next thing which I wanted
to talk a few minutes about is

00:31:25.630 --> 00:31:27.740
the Quartz Composer WebKit plugin.

00:31:27.940 --> 00:31:30.820
This is something new we've
shipped in Mac OS 10.4.7.

00:31:30.870 --> 00:31:34.240
And this allows you to take a
Quartz Composer composition and

00:31:34.240 --> 00:31:35.760
embed it inside of a widget.

00:31:35.800 --> 00:31:39.180
And you would do that if you wanted
to have some tighter integration,

00:31:39.180 --> 00:31:41.420
graphics integration,
and better motion graphics

00:31:41.420 --> 00:31:42.820
inside of your widget.

00:31:42.820 --> 00:31:45.510
To do this, you would use the embed tag,
just like you would for any

00:31:45.510 --> 00:31:47.190
other plugin like QuickTime.

00:31:47.290 --> 00:31:50.460
And important things you
need to pass in are the type.

00:31:50.580 --> 00:31:54.870
So make sure that you're passing
in type x-quartzcomposer.

00:31:55.000 --> 00:31:58.370
So this tells the browser to load the
Quartz Composer widget plugin-- or,

00:31:58.430 --> 00:32:00.710
I'm sorry, a WebKit plugin,
not any other.

00:32:00.840 --> 00:32:04.030
And then make sure you
provided a unique ID.

00:32:04.220 --> 00:32:07.440
The reason you provided a unique
ID is if you'd like to interact with

00:32:07.440 --> 00:32:09.630
your composition via JavaScript.

00:32:09.750 --> 00:32:12.160
So for instance, in this function,
I'm obtaining the

00:32:12.170 --> 00:32:13.510
composition from the DOM.

00:32:13.540 --> 00:32:14.960
And I'm just telling it to pause.

00:32:14.960 --> 00:32:16.200
I'm saying, you know what?

00:32:16.290 --> 00:32:18.520
Whatever you're doing,
don't do it anymore.

00:32:18.610 --> 00:32:20.510
And in this function,
I'm taking the composition

00:32:20.520 --> 00:32:22.850
and I'm actually changing
one of its published keys.

00:32:22.860 --> 00:32:25.740
If you're familiar with Quartz Composer,
you can take any value in

00:32:25.740 --> 00:32:27.400
there and publish it as a key.

00:32:27.400 --> 00:32:30.510
Well, this function, set input value,
allows you to specify the

00:32:30.510 --> 00:32:31.930
key and a new value for it.

00:32:32.020 --> 00:32:34.630
So you can pretty much interact
with any composition like

00:32:34.630 --> 00:32:37.140
you normally would in Cocoa,
but you can do it from JavaScript.

00:32:37.140 --> 00:32:39.290
At this point,
I'd like to go to demo and show you

00:32:39.380 --> 00:32:41.890
some neat Quartz Composer widgets.

00:32:43.580 --> 00:32:46.870
So I'm going to show my dashboard.

00:32:47.300 --> 00:32:51.260
And the first widget I've got here is,
granted, not very exciting,

00:32:51.360 --> 00:32:52.520
but it's a graph widget.

00:32:52.590 --> 00:32:57.020
This widget is giving me some
statistics back on throughput.

00:32:57.070 --> 00:32:59.080
And you'll see that I can
move it around here.

00:32:59.080 --> 00:33:01.000
It's a cube with a
bunch of cubes in there.

00:33:01.020 --> 00:33:04.180
And you'll see that I can
move the widget around,

00:33:04.230 --> 00:33:05.660
show you just the bar graph.

00:33:05.680 --> 00:33:07.640
I can also show you the
labels really nicely.

00:33:07.690 --> 00:33:09.980
So it's a nice way to visualize data.

00:33:10.010 --> 00:33:12.740
That's something that Quartz
Composer is really handy for.

00:33:12.750 --> 00:33:14.550
OK, so this isn't terribly inspired.

00:33:14.560 --> 00:33:15.290
I'll admit that.

00:33:15.470 --> 00:33:19.530
So let's get rid of this guy
and show you another widget.

00:33:21.720 --> 00:33:23.100
This is a widget that I came up with.

00:33:23.130 --> 00:33:25.940
And what this widget does is it actually
gives you a little doodle board.

00:33:25.940 --> 00:33:29.410
You can draw around
here inside of a widget.

00:33:29.570 --> 00:33:32.710
And again, this white area here is just
a Quartz Composer composition

00:33:32.710 --> 00:33:34.180
that I've come up with.

00:33:34.270 --> 00:33:36.700
And then I've provided some controls.

00:33:36.700 --> 00:33:39.560
So I can change the color,
and I can change the brush size.

00:33:39.630 --> 00:33:41.750
And I can doodle around in
here to my heart's content.

00:33:41.950 --> 00:33:44.590
I'm not feeling terribly creative today,
so I don't think you'll

00:33:44.590 --> 00:33:45.960
get much out of me there.

00:33:46.200 --> 00:33:47.760
And then you can clear it off.

00:33:47.760 --> 00:33:48.660
And you get the idea.

00:33:48.790 --> 00:33:51.200
Again,
this is all done with Quartz Composer.

00:33:51.270 --> 00:33:53.460
And it's also done with Dashcode.

00:33:53.600 --> 00:33:55.880
Dashcode has a Quartz
Composer template in there.

00:33:55.880 --> 00:33:58.060
So it gives you a running start
if you ever want to use Quartz

00:33:58.060 --> 00:33:59.520
Composer inside of a widget.

00:33:59.610 --> 00:34:02.620
So definitely take a look at that.

00:34:02.600 --> 00:34:03.800
So I'm going to hide this one.

00:34:03.840 --> 00:34:06.750
This is one that I came up with,
and I kind of like this one a lot.

00:34:06.860 --> 00:34:09.230
It turns out that the
United States Geological

00:34:09.230 --> 00:34:11.730
Survey provides earthquake data.

00:34:11.830 --> 00:34:14.140
And so they provide it in an RSS form.

00:34:14.240 --> 00:34:16.160
So what I've done is I've
just taken that feed,

00:34:16.170 --> 00:34:18.520
and I'm mapping the
RSS data on this widget.

00:34:18.630 --> 00:34:21.090
So OK, it doesn't look like
much from where it is.

00:34:21.170 --> 00:34:22.030
Let's take a look.

00:34:22.170 --> 00:34:23.500
Let's zoom in a little bit.

00:34:23.500 --> 00:34:26.340
So what I've done with Quartz Composer
is wherever the earthquake is,

00:34:26.350 --> 00:34:28.300
I've provided this ripple animation.

00:34:28.420 --> 00:34:32.440
It's something you really couldn't
do with the JavaScript canvas.

00:34:32.520 --> 00:34:35.400
And there's no other nice way to do this,
save using a full-blown,

00:34:35.400 --> 00:34:38.080
your own custom WebKit plugin.

00:34:38.310 --> 00:34:40.390
So using Quartz Composer
is kind of a nice,

00:34:40.450 --> 00:34:42.480
intermediate way to get this neat effect.

00:34:42.520 --> 00:34:46.190
And the takeaway story here is
that try not to be gratuitous

00:34:46.190 --> 00:34:47.150
with Quartz Composer.

00:34:47.360 --> 00:34:48.530
Try to keep it measured.

00:34:48.630 --> 00:34:49.800
Do neat things.

00:34:49.820 --> 00:34:51.550
And I think it'll serve you really well.

00:34:51.640 --> 00:34:57.310
Can we go back to slides, please?

00:35:01.930 --> 00:35:04.440
So that's Quartz Composer,
and we think you'll really like that.

00:35:04.490 --> 00:35:06.750
So the last part of the presentation,
I wanted to spend some time

00:35:06.820 --> 00:35:10.660
talking about Cocoa integration,
and when you should make a widget.

00:35:10.660 --> 00:35:12.510
So canonically,
we've always told you that you should

00:35:12.510 --> 00:35:15.410
make a widget if you'd have a website,
and you'd like to distill some of

00:35:15.410 --> 00:35:19.400
that information down to a handy
tidbit that you'd like to give users.

00:35:19.400 --> 00:35:22.080
Or if you have a utility
that you use often,

00:35:22.080 --> 00:35:25.040
and you'd like to offer a limited
version of it on your dashboard.

00:35:25.130 --> 00:35:27.920
But the third time that you can make
a widget-- and this is something we

00:35:27.920 --> 00:35:31.620
really wanted to emphasize-- is to
complement an existing application.

00:35:31.620 --> 00:35:34.040
A good example of this, for instance,
is the iTunes widget.

00:35:34.040 --> 00:35:37.020
The iTunes widget provides some
functionality that iTunes does,

00:35:37.020 --> 00:35:40.440
but it's in a much smaller interface that
people can keep handy on their dashboard,

00:35:40.440 --> 00:35:44.500
so they don't bring up their iTunes,
for instance, all the time.

00:35:44.500 --> 00:35:47.640
My favorite example for this
is the TimeCard application.

00:35:47.640 --> 00:35:50.760
You have a Cocoa application
that lets you specify users,

00:35:50.760 --> 00:35:53.580
and different jobs for users,
and lets you print out bills,

00:35:53.580 --> 00:35:56.900
and all this stuff that you normally
would want from a TimeCard application.

00:35:56.940 --> 00:36:01.340
But a great widget for that
would be just really simple.

00:36:01.340 --> 00:36:04.220
It has a pop-up menu on it
that lets you choose a job,

00:36:04.220 --> 00:36:06.610
and then it'd have a big red
button on there that lets

00:36:06.690 --> 00:36:08.020
you clock in and clock out.

00:36:08.020 --> 00:36:10.800
Again, people won't have to launch
your entire application.

00:36:10.800 --> 00:36:12.840
Just use the dashboard
widget and move on.

00:36:12.880 --> 00:36:17.380
So whatever users are doing 90% of
the time with 10% of the effort,

00:36:17.460 --> 00:36:19.160
that's perfect for a widget, usually.

00:36:19.160 --> 00:36:22.240
So to talk more about Cocoa integration,
I'd like to bring up my colleague,

00:36:22.240 --> 00:36:24.200
Matt Drance from DTS.

00:36:30.190 --> 00:36:31.240
Thank you, Christian.

00:36:31.250 --> 00:36:32.580
Can you guys hear me?

00:36:32.580 --> 00:36:33.550
OK.

00:36:33.640 --> 00:36:35.580
So as the slide says,
my name is Matt Drance.

00:36:35.580 --> 00:36:37.580
I work in developer
support for Dashboard,

00:36:37.580 --> 00:36:39.930
and I'm here to talk to you
guys about the stuff that

00:36:39.930 --> 00:36:42.170
Christian couldn't get his head around.

00:36:43.080 --> 00:36:45.160
That wasn't very nice.

00:36:45.310 --> 00:36:47.420
So what is a widget plugin?

00:36:47.710 --> 00:36:51.370
Well, basically it exposes native
services to JavaScript,

00:36:51.510 --> 00:36:55.350
things that JavaScript out of
the box can't necessarily get to.

00:36:55.490 --> 00:36:57.350
It can be used for things
like data retrieval,

00:36:57.360 --> 00:36:59.780
API exposure for the rest of the system.

00:36:59.780 --> 00:37:02.120
An example of this is the
address book framework,

00:37:02.120 --> 00:37:03.780
which I'll show you in a moment.

00:37:04.480 --> 00:37:05.990
And these are not graphical plugins.

00:37:06.110 --> 00:37:08.390
Christian just was busy telling
you about WebKit plugins,

00:37:08.400 --> 00:37:13.400
things like Quartz Composer,
the Quartz Composer plugin that's new.

00:37:13.400 --> 00:37:16.230
And those are WebKit plugins.

00:37:16.410 --> 00:37:19.370
Widget plugins are faceless, headless.

00:37:19.400 --> 00:37:22.000
They're basically intended
for information retrieval.

00:37:22.140 --> 00:37:26.270
So if you want to display something
in your widget with native code,

00:37:26.280 --> 00:37:28.910
a WebKit plugin is what you want to use.

00:37:29.520 --> 00:37:32.400
And the idea here is to open your own
apps and frameworks to your widget.

00:37:32.400 --> 00:37:34.630
Maybe you have a common data
store that you can get to

00:37:34.810 --> 00:37:36.120
with C or Objective C code.

00:37:36.300 --> 00:37:38.590
Maybe you have an entire
framework that you've exported

00:37:38.590 --> 00:37:40.000
as part of your application.

00:37:40.080 --> 00:37:41.890
Christian mentioned the Timecode app.

00:37:41.990 --> 00:37:46.530
If there's a tiny subset of functionality
that you want to expose to your users

00:37:46.690 --> 00:37:52.240
in a very simple and clean fashion,
maybe this is one road you can take.

00:37:52.440 --> 00:37:55.940
And as Christian kind of said also,
you really want to use this

00:37:55.940 --> 00:37:56.980
as sort of a last resort.

00:37:56.980 --> 00:38:01.330
You want to make sure that JavaScript,
DHTML, all of those technologies that are

00:38:01.450 --> 00:38:05.800
normally available in Dashboard aren't
going to solve your problem in some way.

00:38:05.800 --> 00:38:08.420
So now that I've just
told you not to do this,

00:38:08.450 --> 00:38:09.800
let me show you how.

00:38:10.120 --> 00:38:12.710
Can we go to the demo, please?

00:38:18.730 --> 00:38:19.850
CHRISTOPHER PINTO: OK,
so the first thing I'm going to

00:38:19.860 --> 00:38:22.810
do-- and those of you who may
have downloaded the samples,

00:38:22.870 --> 00:38:25.540
you'll see the birthdays widget,
hopefully.

00:38:25.800 --> 00:39:09.200
[Transcript missing]

00:39:09.230 --> 00:39:15.010
This week, so we go on through to Sunday,
and then this month.

00:39:15.120 --> 00:39:16.600
So for the rest of August.

00:39:16.600 --> 00:39:19.270
And each of these is a clickable
link that will then open the

00:39:19.270 --> 00:39:21.360
person in Address Book separately.

00:39:21.360 --> 00:39:21.750
So how are we doing this?

00:39:21.860 --> 00:39:23.990
JavaScript can't talk to
Address Book normally.

00:39:24.040 --> 00:39:26.880
JavaScript doesn't know
what Address Book is.

00:39:26.880 --> 00:39:28.240
So how do we get to this information?

00:39:28.360 --> 00:39:30.180
Well, we're using a widget plugin.

00:39:30.180 --> 00:39:32.550
So can we go back to slides, please?

00:39:36.790 --> 00:39:38.430
So the first step is
installing the plugin.

00:39:38.500 --> 00:39:39.240
Well, it's pretty simple.

00:39:39.240 --> 00:39:41.940
It's just a simple bundle that goes
in the top level of your widget.

00:39:41.940 --> 00:39:43.690
You can see a picture of it right here.

00:39:43.710 --> 00:39:46.700
It has a file name
extension of .widgetplugin.

00:39:46.910 --> 00:39:50.560
And you include a key in
your Info.plist named plugin

00:39:50.560 --> 00:39:52.700
with the actual file name.

00:39:52.880 --> 00:39:54.700
And that should have you ready to go.

00:39:54.700 --> 00:39:57.700
The next step, of course,
is talking to the plugin.

00:39:58.000 --> 00:40:01.420
Well, the plugin itself appears
in JavaScript as a member

00:40:01.420 --> 00:40:03.700
variable on the window object.

00:40:03.700 --> 00:40:09.700
So you can see here we're doing a
check for the window.birthdays plugin.

00:40:09.700 --> 00:40:11.650
And we'll get to the origin
of that name in a second.

00:40:11.760 --> 00:40:14.050
But basically,
just kind of like the window.widget

00:40:14.100 --> 00:40:16.700
property that we check for
when using the Dashboard APIs,

00:40:16.700 --> 00:40:22.700
we check for the existence of the plugin,
and then go ahead and call our methods.

00:40:22.860 --> 00:40:24.830
And because this is part
of the window object,

00:40:24.830 --> 00:40:27.440
you can use--you can reference it
either implicitly or explicitly.

00:40:27.440 --> 00:40:30.670
And I'm doing both in that
example you see up there.

00:40:31.210 --> 00:40:33.720
So actually writing the
plugin is pretty simple too.

00:40:33.720 --> 00:40:38.230
It's just a standard foundation bundle in
Xcode that you then customize slightly.

00:40:38.270 --> 00:40:39.340
You write the code that you need to.

00:40:39.340 --> 00:40:41.560
In this case, we're writing code that
talks to the address book.

00:40:41.580 --> 00:40:44.330
You register the plugin
with JavaScript so that your

00:40:44.520 --> 00:40:45.970
JavaScript code can see it.

00:40:46.120 --> 00:40:49.560
And then you grant access to
the methods in the plugin.

00:40:49.560 --> 00:40:52.380
The entire plugin doesn't
become scriptable by default.

00:40:52.410 --> 00:40:55.810
It's going to be up to you to decide
what's scriptable and what isn't.

00:40:56.400 --> 00:40:58.990
And the other thing you can do,
this is not required

00:40:58.990 --> 00:41:02.330
but highly recommended,
is to create JavaScript-friendly

00:41:02.330 --> 00:41:03.550
signatures for your methods.

00:41:03.720 --> 00:41:06.000
Obviously,
Objective-C and JavaScript don't

00:41:06.000 --> 00:41:06.940
use the same syntax.

00:41:06.980 --> 00:41:09.710
So if you have some complex
methods that you want to expose,

00:41:09.710 --> 00:41:11.420
the names can get pretty mangled.

00:41:11.420 --> 00:41:15.230
So you should probably do this
yourself rather than trust us

00:41:15.240 --> 00:41:17.110
to mangle the name for you.

00:41:17.700 --> 00:41:20.480
So, the first step, of course,
is to initialize the plugin.

00:41:20.500 --> 00:41:25.480
And this is the one required method
in the widget plugin protocol,

00:41:25.480 --> 00:41:26.640
and that's init with WebView.

00:41:26.640 --> 00:41:29.460
This is just a standard
Cocoa object initializer.

00:41:29.460 --> 00:41:31.440
If any of you have done
Cocoa development before,

00:41:31.440 --> 00:41:33.240
you should know what I'm talking about.

00:41:33.240 --> 00:41:35.860
It is required, but it typically doesn't
have a lot in it.

00:41:35.880 --> 00:41:37.910
Depending on how
complicated your plugin is,

00:41:37.910 --> 00:41:40.430
this may have one line of code,
it may have 20.

00:41:41.390 --> 00:41:44.410
The important thing to mention here is
that you really don't want to manipulate

00:41:44.510 --> 00:41:46.170
the WebView that is passed into you here.

00:41:46.180 --> 00:41:48.970
This WebView represents
your Dashboard widget.

00:41:48.980 --> 00:41:52.940
But there will be a time and a place,
if you need to manipulate the

00:41:53.020 --> 00:41:56.900
DOM from inside your plugin,
you want to do that after initialization.

00:41:56.900 --> 00:41:58.780
This is really just
the object initializer.

00:41:58.780 --> 00:42:01.770
This is not the initialization
of the widget proper.

00:42:03.080 --> 00:42:05.670
And the other thing I wanted to
mention is that you need to start

00:42:05.670 --> 00:42:07.160
implementing a dealloc method.

00:42:07.170 --> 00:42:10.190
For those of you who have
written plug-ins in the past,

00:42:10.270 --> 00:42:13.160
you've probably gotten away
with not writing a dealloc,

00:42:13.160 --> 00:42:15.160
because every widget has
been in its own process,

00:42:15.160 --> 00:42:17.980
and the only time the plug-in is going
to be unloaded is when the user closes

00:42:17.980 --> 00:42:19.640
the widget and the process is dead.

00:42:19.640 --> 00:42:21.060
So the cleanup really isn't important.

00:42:21.060 --> 00:42:23.690
But now, in the advent of process
sharing in Leopard,

00:42:23.690 --> 00:42:26.570
your widget may close and
your plug-in may be unloaded,

00:42:26.580 --> 00:42:27.940
but the process will still be there.

00:42:27.940 --> 00:42:30.320
So it's going to be up to you to
be responsible with resources.

00:42:30.900 --> 00:42:33.260
So if you have a plug-in that
allocates a bunch of member objects,

00:42:33.300 --> 00:42:35.540
make sure you implement your
dealloc method so that you

00:42:35.580 --> 00:42:36.900
can clean all that stuff up.

00:42:39.290 --> 00:42:40.610
So registering the widget plug-in.

00:42:40.770 --> 00:42:42.950
You'll remember in our
JavaScript code up on the slides,

00:42:42.950 --> 00:42:46.210
we were referring, in JavaScript,
we were referring to our plug-in

00:42:46.220 --> 00:42:47.640
as the birthdays plug-in.

00:42:47.770 --> 00:42:49.490
So this is where that name comes from.

00:42:49.560 --> 00:42:51.220
It's the Windows Script Object Available.

00:42:51.220 --> 00:42:54.500
This is actually part of the web kit,
web scripting protocol.

00:42:54.510 --> 00:42:56.620
This is not a dashboard API.

00:42:56.620 --> 00:42:59.400
And this is how you identify
the plug-in to JavaScript.

00:42:59.430 --> 00:43:01.990
You implement this method,
and the Web Script Object that you

00:43:02.110 --> 00:43:06.390
passed is actually a wrapper pointer
to the Window Object in JavaScript.

00:43:06.520 --> 00:43:09.950
And basically,
you just set the current plug-in instance

00:43:10.410 --> 00:43:13.220
as a value on that Window Object,
which is what allowed us to use

00:43:13.240 --> 00:43:15.310
the Window dot notation earlier on.

00:43:15.460 --> 00:43:18.400
So that string, birthdays plug-in,
that you see up here is exactly

00:43:18.480 --> 00:43:21.280
the name of the variable that
we're going to be referring to

00:43:21.280 --> 00:43:23.990
our plug-in from using JavaScript.

00:43:24.350 --> 00:43:27.580
So now this is the
real meat of the topic.

00:43:27.580 --> 00:43:30.510
This is where you start actually
exposing the functionality that you

00:43:30.510 --> 00:43:32.180
want to use from inside Dashboard.

00:43:32.200 --> 00:43:35.200
The first is,
is selector excluded from web script?

00:43:35.200 --> 00:43:38.530
This is basically a filter on
all the methods that you've

00:43:38.530 --> 00:43:40.380
written in your plugin,
as far as which ones you

00:43:40.380 --> 00:43:42.200
actually want to be scriptable.

00:43:42.200 --> 00:43:44.120
And you notice that
the method is excluded,

00:43:44.160 --> 00:43:46.080
not included,
so there's a double negative

00:43:46.080 --> 00:43:47.200
thing going on here.

00:43:47.200 --> 00:43:51.190
You return yes when you don't
want the method to be scripted.

00:43:51.190 --> 00:43:53.170
You return no if you do.

00:43:53.320 --> 00:43:55.200
That's bitten a couple people.

00:43:55.260 --> 00:43:59.970
So if you find your plugin
being universally scriptable,

00:44:00.480 --> 00:44:02.200
Check this.

00:44:02.440 --> 00:44:05.500
And the other one is the is
key excluded from web script.

00:44:05.500 --> 00:44:10.300
And we usually recommend that you just
return yes to this under all conditions.

00:44:10.320 --> 00:44:12.740
That's yes, I don't want it exposed.

00:44:12.740 --> 00:44:15.990
So if you have a key on the plugin
that you want to be exposed,

00:44:16.100 --> 00:44:19.220
go ahead and encapsulate it,
write an accessor method,

00:44:19.270 --> 00:44:20.960
and expose that instead.

00:44:20.960 --> 00:44:23.950
And the last one is the web
script name for selector method.

00:44:23.950 --> 00:44:27.460
And this is the one where you can
take your Objective-C function name,

00:44:27.460 --> 00:44:31.400
method name, and turn that into something
that's more readable by JavaScript.

00:44:31.400 --> 00:44:32.860
And this is very important.

00:44:32.940 --> 00:44:36.400
It's not required,
but if you have an Objective-C method

00:44:36.400 --> 00:44:38.680
with multiple arguments,
then you're going to start getting

00:44:38.680 --> 00:44:40.400
colons and separate tokens in there.

00:44:40.400 --> 00:44:42.330
And those things don't really
make a lot of sense in JavaScript.

00:44:42.390 --> 00:44:45.620
So this is your opportunity to write
a JavaScript method name that's

00:44:45.740 --> 00:44:49.480
going to make sense to you when
you're writing in JavaScript code.

00:44:49.710 --> 00:44:51.480
So let's go back to the demo.

00:44:51.480 --> 00:44:55.740
I can show you what some
of this stuff looks like.

00:44:59.350 --> 00:45:04.240
So the first thing I want to do is just
have a quick look inside the bundle,

00:45:04.300 --> 00:45:07.170
or I could open the widget again.

00:45:08.490 --> 00:45:12.310
So for those of you who haven't
played around with widgets too much,

00:45:12.310 --> 00:45:16.920
you can just right-click or control-click
on the widget itself in the finder.

00:45:16.920 --> 00:45:19.210
Click Show Package Contents,
and this looks a lot like

00:45:19.230 --> 00:45:20.540
the slide you saw before.

00:45:20.540 --> 00:45:23.740
Here's our plugin with the
.widget plugin extension,

00:45:23.740 --> 00:45:24.740
and it's good.

00:45:24.740 --> 00:45:26.310
We have Property List Editor installed.

00:45:26.320 --> 00:45:29.460
So I'm going to open the plist,
and this is the key that's going

00:45:29.460 --> 00:45:32.600
to make the Dashboard client
actually pick the plugin up.

00:45:32.680 --> 00:45:36.160
So as you can see, the name here matches
the name in the finder,

00:45:36.160 --> 00:45:38.230
and it's pretty much that simple.

00:45:38.540 --> 00:45:41.000
That's what you need to do to tell
Dashboard to recognize your plugin.

00:45:41.000 --> 00:45:44.720
So once Dashboard has recognized
your plugin and tried to load it,

00:45:44.900 --> 00:45:47.000
there's other work that needs to be done.

00:45:47.000 --> 00:45:49.200
But let's stick with
the widget for a second.

00:45:49.200 --> 00:45:51.060
I'm going to go ahead and
open this in Dashcode,

00:45:51.060 --> 00:45:52.740
just like Christian did before.

00:45:54.310 --> 00:45:57.690
And let's get rid of the canvas.

00:45:57.720 --> 00:45:59.800
Let's see the source code.

00:45:59.800 --> 00:46:02.510
So I'm going to go into the script here.

00:46:04.720 --> 00:46:07.540
So let's get past the
legalese for a moment,

00:46:07.540 --> 00:46:12.360
and let's have a look at
Show Today's Birthdays.

00:46:12.360 --> 00:46:15.630
So I'm doing some general markup
work here in the JavaScript,

00:46:15.770 --> 00:46:18.150
and then here's our plugin code.

00:46:18.150 --> 00:46:19.340
How does that look?

00:46:19.340 --> 00:46:20.940
Oh, that's nice and big.

00:46:20.940 --> 00:46:23.090
So first we check for the
existence of the Birthdays

00:46:23.210 --> 00:46:24.510
plugin on the window object.

00:46:24.520 --> 00:46:26.660
This looks a lot like the slides.

00:46:26.660 --> 00:46:27.920
And if it's there,
we go ahead and we call

00:46:27.920 --> 00:46:30.000
the BirthdaysToday method.

00:46:30.000 --> 00:46:31.970
And then we go ahead and
process that information.

00:46:31.990 --> 00:46:34.040
It's going to return an
array of information for us.

00:46:34.040 --> 00:46:36.800
So the question is,
we've already answered some of it,

00:46:36.850 --> 00:46:38.070
where does this name come from?

00:46:38.170 --> 00:46:40.670
And then also,
where are these method names coming from?

00:46:40.670 --> 00:46:46.710
In order to do that, we need to go out of
Dashcode and go into Xcode.

00:46:49.350 --> 00:46:52.330
So I'm going to open up this project,
and we're just going to run

00:46:52.460 --> 00:46:53.960
through all of the methods in here.

00:46:53.960 --> 00:46:56.100
This plug-in is actually pretty simple,
as you can see.

00:46:56.100 --> 00:47:00.570
I mean, it's got a very small,
defined set of tasks that it performs.

00:47:00.590 --> 00:47:01.560
Here's some more legalese.

00:47:01.600 --> 00:47:05.720
So the first thing I want to do
is I just want to have a real

00:47:05.950 --> 00:47:08.160
quick look at the code itself.

00:47:08.280 --> 00:47:12.110
And if you're looking at the
sample that you downloaded,

00:47:12.110 --> 00:47:16.690
you should probably see some pragma
marks in here that classify the

00:47:16.690 --> 00:47:19.100
methods based on what they do.

00:47:19.100 --> 00:47:22.380
So this should be listed under AB logic.

00:47:22.980 --> 00:47:25.500
So, oh, this is the header font.

00:47:25.500 --> 00:47:26.260
Excuse me.

00:47:26.270 --> 00:47:27.360
That's why I don't see them.

00:47:27.400 --> 00:47:28.970
There we are.

00:47:29.060 --> 00:47:31.840
So let's go ahead and just look at
the people with birthdays and future.

00:47:31.840 --> 00:47:33.700
So basically I'm going
to give an interval,

00:47:33.700 --> 00:47:37.480
so one in the case of a day,
seven in the case of a week, et cetera.

00:47:37.510 --> 00:47:38.180
And this is it.

00:47:38.250 --> 00:47:41.800
This is really all the Cocoa work
we're doing in terms of business logic.

00:47:41.800 --> 00:47:44.380
We're just going ahead and
creating a search and address book,

00:47:44.380 --> 00:47:47.920
and then we're going to return an array
of all the people that match the current

00:47:48.050 --> 00:47:50.890
interval on their birthday property.

00:47:51.110 --> 00:47:53.850
So let's go back up to the
actual widget plugin stuff.

00:47:54.040 --> 00:47:55.760
So here's our initializer.

00:47:55.760 --> 00:47:57.370
And as I said,
depending on what you're doing,

00:47:57.370 --> 00:47:59.530
this method may have a lot of
stuff or it may have nothing.

00:47:59.540 --> 00:48:02.000
In this case,
it's just a simple initializer

00:48:02.000 --> 00:48:03.860
that defers to the superclass.

00:48:05.020 --> 00:48:07.190
So then when it starts
to get interesting is the

00:48:07.190 --> 00:48:09.030
Windows Script Object Available method.

00:48:09.080 --> 00:48:11.730
Again, we have this web script
object that's passed into us,

00:48:11.730 --> 00:48:15.130
which represents the window
object up in JavaScript land.

00:48:15.410 --> 00:48:20.140
And we simply set ourself as
a key on the window object.

00:48:20.190 --> 00:48:22.850
And if I were to change this
name and rebuild the plugin,

00:48:22.970 --> 00:48:27.320
then I would accordingly have to go and
change all the variable names that I used

00:48:27.320 --> 00:48:29.460
in my JavaScript code to refer to this

00:48:31.060 --> 00:48:34.720
Now we move on to the is key and is
selector excluded from web script.

00:48:34.800 --> 00:48:37.220
And like I said,
we don't want to really have

00:48:37.390 --> 00:48:39.200
direct key access from scripting.

00:48:39.200 --> 00:48:40.580
It's kind of just asking for trouble.

00:48:40.580 --> 00:48:42.200
So we return yes all the time.

00:48:42.320 --> 00:48:43.460
Yes, we want it excluded.

00:48:43.460 --> 00:48:46.750
And then we have is selector
excluded from web script and

00:48:46.830 --> 00:48:48.870
web script name for selector.

00:48:48.870 --> 00:48:50.510
Now there are a couple
things you can do here,

00:48:50.510 --> 00:48:51.500
and I got a little clever.

00:48:51.500 --> 00:48:53.030
I don't want to spend
too much time on it.

00:48:53.400 --> 00:48:58.960
But a lot of times people just get the
selector name as a string and have a huge

00:48:58.960 --> 00:49:03.850
if else block in this method to see yes,
no, yes, no, I want it.

00:49:03.880 --> 00:49:06.770
So in this case,
what I've done is defined a prefix here,

00:49:06.770 --> 00:49:09.510
and for all the methods that
I actually want exposed,

00:49:09.510 --> 00:49:13.320
I preface each method
name with web underscore.

00:49:13.340 --> 00:49:15.690
And so I basically just do
a search for that prefix,

00:49:15.690 --> 00:49:18.180
and if it's there, then yes,
we'll script that.

00:49:18.180 --> 00:49:22.050
And it's a little more complicated,
but it has less code.

00:49:22.640 --> 00:49:24.780
And I tend to like that.

00:49:25.160 --> 00:49:30.160
So here's our web exposed methods,
and you'll see this is the final part.

00:49:30.180 --> 00:49:33.200
You'll notice that I'm not
actually calling the address

00:49:33.560 --> 00:49:35.200
book method that you saw before.

00:49:35.200 --> 00:49:37.320
I'm calling something called
string results for people.

00:49:37.320 --> 00:49:39.360
So let's go ahead and see what that does.

00:49:40.000 --> 00:49:43.860
The key here is that the previous
method that I wrote that actually

00:49:43.870 --> 00:49:48.040
performs the search in address book,
that search is going to return me

00:49:48.050 --> 00:49:50.530
an NSArray of AB person objects.

00:49:50.530 --> 00:49:54.100
Now, similar to the other stuff
we've been talking about,

00:49:54.840 --> 00:49:57.130
JavaScript does not know
what an AB person is.

00:49:57.130 --> 00:50:00.410
So it's going to be our job to take
this information and convert it into

00:50:00.440 --> 00:50:03.890
something that JavaScript is actually
going to be able to work with.

00:50:03.920 --> 00:50:07.190
So in this case,
I'm taking an NSArray of people,

00:50:07.290 --> 00:50:09.560
and this is going to be
an array of AB people.

00:50:10.060 --> 00:50:14.410
So I'm going to send an array
of people to the address book,

00:50:14.410 --> 00:50:18.930
and I'm going to send an array
of people to the address book.

00:50:19.020 --> 00:50:24.220
And this is going to be the key
method behind all of the web exposure.

00:50:24.220 --> 00:50:29.260
So now, instead of an array of AB people,
we're going to be sending

00:50:29.260 --> 00:50:30.990
an array of NSStrings.

00:50:31.160 --> 00:50:36.720
And with that final piece of information,
I'd like to go back to the slides

00:50:36.730 --> 00:50:39.240
and talk about one last thing.

00:50:44.710 --> 00:50:47.500
So, let's talk a little bit
about this data conversion.

00:50:47.500 --> 00:50:50.100
I mentioned that the NSStrings are
going to be readable.

00:50:50.100 --> 00:50:53.710
And that's because some of this stuff
is converted for you for free by

00:50:53.710 --> 00:50:55.440
the Objective-C JavaScript bridge.

00:50:55.600 --> 00:50:57.590
Most of them are primitive types.

00:50:57.590 --> 00:50:58.100
You see them up here.

00:50:58.100 --> 00:51:00.600
An NSNumber becomes a
number in JavaScript.

00:51:00.600 --> 00:51:02.600
NSString becomes a string.

00:51:02.600 --> 00:51:03.600
An NSRay becomes an array.

00:51:03.600 --> 00:51:06.600
I have an asterisk there,
not because it's a pointer to an array.

00:51:06.600 --> 00:51:08.600
There are no pointers in JavaScript.

00:51:08.600 --> 00:51:11.590
This is not a true
JavaScript array object.

00:51:11.680 --> 00:51:15.600
For all your standard uses,
it will be for you.

00:51:15.600 --> 00:51:16.080
You can index it.

00:51:16.080 --> 00:51:16.600
You can get the link on it.

00:51:16.600 --> 00:51:19.550
You can modify the contents.

00:51:19.600 --> 00:51:23.600
But in terms of the real object-oriented
array class in JavaScript,

00:51:23.600 --> 00:51:25.600
it does not have all of those properties.

00:51:25.700 --> 00:51:29.590
But 99% of the time, this is going to do
exactly what you need.

00:51:29.730 --> 00:51:33.510
So, from the plugin,
we returned an NSArray of NSStrings.

00:51:33.590 --> 00:51:35.590
And actually,
it was a two-dimensional array.

00:51:35.600 --> 00:51:36.600
I forgot to mention that.

00:51:36.600 --> 00:51:38.600
It was a two-dimensional array.

00:51:38.600 --> 00:51:40.550
Each entry in the first level
is a record for the person.

00:51:40.650 --> 00:51:41.570
And then each entry in the second
level is a record for the person.

00:51:41.610 --> 00:51:45.400
And then each entry there also has
separate tokens for the first name,

00:51:45.400 --> 00:51:46.600
last name, and birthday.

00:51:46.600 --> 00:51:49.600
So we've got a 2D array of
NSStrings that was successfully

00:51:49.600 --> 00:51:53.590
converted and usable from
JavaScript without any additional work.

00:51:53.600 --> 00:51:59.580
So for more complex JavaScript objects,
the non-trivial ones,

00:51:59.610 --> 00:52:02.600
those simply get wrapped in
a WebScript object instance.

00:52:02.620 --> 00:52:05.600
And you saw that in the
WindowsScriptObjectAvailable method.

00:52:05.600 --> 00:52:07.860
That passed in a
WebScript object pointer that,

00:52:07.860 --> 00:52:10.580
in this case, represented the window
object from JavaScript.

00:52:10.600 --> 00:52:13.560
So that's your crash course on plugins.

00:52:13.560 --> 00:52:15.600
And I'd like to bring in
Christian for the rest.

00:52:19.100 --> 00:52:21.580
Thank you, Matt.

00:52:21.630 --> 00:52:24.840
And really quick,
to just kind of clarify,

00:52:25.130 --> 00:52:27.180
the great thing about using
a widget plug-in is that if

00:52:27.180 --> 00:52:30.390
you have a Cocoa application,
you'll be able to make a widget

00:52:30.440 --> 00:52:31.700
that complements your application.

00:52:31.700 --> 00:52:33.000
This is something you can do today.

00:52:33.000 --> 00:52:35.040
You don't have to wait a
year for Leopard to come out.

00:52:35.170 --> 00:52:37.160
You'll be able to make a
widget as a feature of your

00:52:37.270 --> 00:52:39.600
program and ship it today.

00:52:39.680 --> 00:52:41.560
And we really want to
encourage you to do that.

00:52:41.630 --> 00:52:42.700
Really jump on this bandwagon.

00:52:42.770 --> 00:52:45.500
People really like widgets,
and people are anxious to have them.

00:52:45.500 --> 00:52:48.520
So you really should be giving
one if you have a Cocoa app.

00:52:48.700 --> 00:52:50.980
So just to wrap things up,
I want to talk a minute

00:52:50.980 --> 00:52:52.480
about sharing your widget.

00:52:52.650 --> 00:52:55.370
And the most popular place for
people to download widgets from

00:52:55.380 --> 00:52:56.990
is the Apple Downloads site.

00:52:57.260 --> 00:53:00.310
The 2,100 widgets I talked about
before are all available from

00:53:00.310 --> 00:53:03.880
apple.com/downloads/dashboard.

00:53:03.880 --> 00:53:06.170
And this is the place to go for widgets.

00:53:06.300 --> 00:53:08.570
People go here to download
them all the time.

00:53:08.650 --> 00:53:11.650
We list them,
and we have top 50 and the newest ones.

00:53:11.660 --> 00:53:12.780
It's a great place for that.

00:53:12.850 --> 00:53:16.510
And we actually have a new submission
process in place at connect.apple.com.

00:53:16.630 --> 00:53:18.470
And the great thing about
this is that when you submit

00:53:18.470 --> 00:53:21.300
a widget through this process,
you'll be able to have a listing

00:53:21.310 --> 00:53:22.660
that's actually perpetual.

00:53:22.660 --> 00:53:24.290
And so you can just go
there and update it,

00:53:24.290 --> 00:53:27.320
instead of before when you just
had to update your widget each time

00:53:27.320 --> 00:53:29.190
you wanted to put it on the site.

00:53:29.200 --> 00:53:30.140
So that's really handy.

00:53:30.210 --> 00:53:33.150
And it also ties into the
download verification feature.

00:53:33.280 --> 00:53:35.700
The point behind this is to make
sure that people are getting the

00:53:35.700 --> 00:53:36.900
widget they expect to be getting.

00:53:37.020 --> 00:53:39.860
So in closing.

00:53:40.800 --> 00:53:41.780
Leopard.

00:53:41.840 --> 00:53:43.730
In Leopard, the message is that
widgets are here to stay.

00:53:43.740 --> 00:53:44.580
They're not going anywhere.

00:53:44.580 --> 00:53:47.020
They're popular, and people love them.

00:53:47.040 --> 00:53:48.840
So say hello to Dashcode.

00:53:48.840 --> 00:53:49.610
Use it.

00:53:49.720 --> 00:53:52.680
It has amazing features that will
help you make amazing widgets,

00:53:52.680 --> 00:53:54.020
great-looking widgets.

00:53:54.020 --> 00:53:56.270
It's also a lot faster,
so people will be happy with

00:53:56.270 --> 00:53:57.900
the performance we're hoping.

00:53:57.900 --> 00:54:00.070
And you also should be able
to handle a sync event.

00:54:00.070 --> 00:54:03.010
So if your widget deals with preferences,
make sure you're handling

00:54:03.010 --> 00:54:04.130
a sync event as well.

00:54:05.200 --> 00:54:08.140
But today, in Tiger, make a widget.

00:54:08.140 --> 00:54:10.740
It's a great way to differentiate
your application from any

00:54:10.740 --> 00:54:12.200
other one on the market.

00:54:12.520 --> 00:54:15.180
Simplify it using the Apple Classes.

00:54:15.190 --> 00:54:20.120
Quartz Composer helps you integrate
great graphics into your widget.

00:54:20.480 --> 00:54:21.730
Compliment your widget
with an application.

00:54:21.770 --> 00:54:23.160
I really want to beat home that point,
I guess.

00:54:23.270 --> 00:54:24.470
It's really important.

00:54:24.480 --> 00:54:27.310
And finally, when you're ready,
submit it to Apple.

00:54:27.320 --> 00:54:30.780
So your roadmap for
the rest of this week,

00:54:30.990 --> 00:54:34.670
there's a widget lab in Mac OS X lab
right across the hall right after this.

00:54:34.700 --> 00:54:36.130
Tomorrow morning, 9 a.m.

00:54:36.130 --> 00:54:38.250
in the marina, for the fourth time,
I'm telling you about the

00:54:38.250 --> 00:54:39.720
Introducing Dash Code session.

00:54:39.720 --> 00:54:40.900
It's a great session.

00:54:40.920 --> 00:54:43.100
These guys build a widget
from stem to stern,

00:54:43.100 --> 00:54:44.090
and it looks phenomenal.

00:54:44.100 --> 00:54:44.890
You guys are going to love it.

00:54:44.960 --> 00:54:47.120
So make sure you're there,
and you grab the sample code first.

00:54:47.140 --> 00:54:50.750
And then after that, at noon,
there's the Dash Code lab,

00:54:50.800 --> 00:54:52.700
also in the Mac OS X lab across the hall.

00:54:52.700 --> 00:54:55.400
And then tomorrow afternoon,
there's a WebKit lab.

00:54:55.500 --> 00:54:57.330
So if there's any questions
you have about WebKit,

00:54:57.400 --> 00:55:00.100
not necessarily the dashboard-specific,
head over there.

00:55:00.100 --> 00:55:02.690
That's at 3.30, also in the Mac OS X lab.

00:55:02.740 --> 00:55:06.820
So if you have any questions,
there's a fella, Alan Samuel.

00:55:06.820 --> 00:55:09.260
Bluger1 at Apple.com
is his email address.

00:55:09.260 --> 00:55:11.180
He's our evangelist,
and you should email any

00:55:11.180 --> 00:55:12.190
questions you have to him.

00:55:12.200 --> 00:55:18.430
And feel free to join our community
at dashboard-dev at lists.apple.com

00:55:18.440 --> 00:55:20.580
for any questions you have,
any questions about

00:55:20.590 --> 00:55:21.840
Dashboard or Dash Code.

00:55:21.840 --> 00:55:22.930
Well, actually, not Dash Code yet.

00:55:22.940 --> 00:55:24.730
It's not shipping, so just for Dashboard.

00:55:24.740 --> 00:55:27.920
But feel free to come on
there and ask your questions.