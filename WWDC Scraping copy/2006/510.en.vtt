WEBVTT

00:00:10.440 --> 00:00:12.300
Okay.

00:00:12.330 --> 00:00:12.900
Welcome, everybody.

00:00:12.900 --> 00:00:14.200
My name is Mikey McDougall.

00:00:14.300 --> 00:00:17.320
I'm from the Java team at Apple,
and I'm really happy to be on

00:00:17.320 --> 00:00:19.300
stage to talk about debugging Java.

00:00:19.300 --> 00:00:21.220
So, uh,
I see a lot of you have your portables,

00:00:21.340 --> 00:00:22.300
so that's really good.

00:00:22.300 --> 00:00:24.290
Let's, uh--let's make sure
you're in the right room,

00:00:24.290 --> 00:00:25.300
first of all.

00:00:25.300 --> 00:00:28.300
So this is, in many ways,
a tips and tricks session.

00:00:28.300 --> 00:00:30.930
These are, um,
things that we've gathered over the

00:00:30.930 --> 00:00:34.530
last two to three years that we've
found to be really handy in terms

00:00:34.770 --> 00:00:36.300
of debugging problems with Java.

00:00:36.300 --> 00:00:38.860
And also,
I'm gonna talk a little bit about, um,

00:00:38.860 --> 00:00:41.410
sort of what goes on inside Apple,
you know, give you a little bit

00:00:41.410 --> 00:00:42.290
of the inside scoop.

00:00:42.300 --> 00:00:46.300
And also, you know, we're called the--the
Black Belt Java Debugging Session,

00:00:46.340 --> 00:00:48.140
but I don't know any karate.

00:00:48.300 --> 00:00:50.220
Um, but I'm gonna deliver a little
bit of action and adventure.

00:00:50.300 --> 00:00:55.230
All the stuff that I know about karate,
I learned from watching action movies.

00:00:55.300 --> 00:00:59.300
So we're gonna--we're gonna
bring a little of that in.

00:00:59.360 --> 00:01:02.010
So this is an overview of what
we're gonna do for the next,

00:01:02.010 --> 00:01:03.300
uh, hour to hour and 15 minutes.

00:01:03.300 --> 00:01:05.870
I'm gonna talk some
about Developer Previews,

00:01:06.320 --> 00:01:09.090
and our Developer Preview process,
and how to work safely

00:01:09.160 --> 00:01:10.300
with Developer Previews.

00:01:10.300 --> 00:01:13.300
Go really quickly over some of the
basic tools for Java debugging.

00:01:13.400 --> 00:01:17.300
Um, I'm gonna talk about some common
problems people bump into in Java.

00:01:17.300 --> 00:01:19.290
Hopefully,
if you sit through this session,

00:01:19.340 --> 00:01:21.300
I'll--I'll cue you in to some
things that can go wrong,

00:01:21.300 --> 00:01:23.300
and we'll save you a bunch of time.

00:01:23.300 --> 00:01:25.300
Then we're gonna go really in-depth.

00:01:25.300 --> 00:01:27.300
We're gonna analyze one
crash all the way through.

00:01:27.330 --> 00:01:30.300
Um, we're gonna go into a section
on how to take things apart.

00:01:30.300 --> 00:01:35.300
I learn best not by building things up,
but by picking things apart.

00:01:35.300 --> 00:01:37.290
So we're gonna pick things
apart for a little bit.

00:01:37.340 --> 00:01:39.280
And then we're gonna
have a hands-on session,

00:01:39.410 --> 00:01:42.600
a brief one with Shark,
which is a really great performance

00:01:42.690 --> 00:01:45.300
analysis tool that can be used for Java.

00:01:45.300 --> 00:01:47.960
And then I'm gonna go and tell
a little bit more about the

00:01:48.090 --> 00:01:50.300
sort of inside story at Apple.

00:01:51.230 --> 00:01:54.440
So my first section is about
the Developer Previews,

00:01:54.440 --> 00:01:57.500
and it's actually just not
the Developer Previews.

00:01:57.690 --> 00:02:01.020
It's about working with
buggy software in general.

00:02:01.160 --> 00:02:04.150
So here we go.

00:02:04.620 --> 00:02:09.500
One of the things that you have to be
prepared for when you're working with

00:02:09.540 --> 00:02:14.680
software that's sort of a developer
preview or new is that things might

00:02:14.680 --> 00:02:17.800
not go quite exactly how you expect.

00:02:17.890 --> 00:02:20.170
But I still think that everyone in
this room should be installing and

00:02:20.190 --> 00:02:22.040
running our developer previews.

00:02:22.040 --> 00:02:24.780
We work really hard so that
you're the James Bond and you

00:02:24.860 --> 00:02:28.740
get away from the villain and,
you know, not--not actually end up with

00:02:28.780 --> 00:02:30.680
a big mess on your computer.

00:02:30.720 --> 00:02:33.620
So this is where you get
the developer previews.

00:02:33.620 --> 00:02:37.440
They're available--actually,
we released the developer preview today.

00:02:37.440 --> 00:02:42.760
So Java SE6, Developer Preview 5 is the,
you know,

00:02:42.760 --> 00:02:46.340
official name for the whole thing.

00:02:46.340 --> 00:02:48.150
We've been--as long
as I've been at Apple,

00:02:48.150 --> 00:02:51.660
I've been fighting to get developer
previews out to people like you

00:02:51.660 --> 00:02:58.700
because I think that it's a really,
really good way for everybody to win.

00:02:59.470 --> 00:03:02.540
The thing about working with
the developer previews is you

00:03:02.540 --> 00:03:05.440
take a little bit of risk.

00:03:05.440 --> 00:03:07.340
But you get great stuff.

00:03:07.340 --> 00:03:11.660
You get all of the, you know,
latest bug fixes.

00:03:11.660 --> 00:03:12.960
So you're really, really up to date.

00:03:12.960 --> 00:03:15.740
You get to actually work with
Java 6 before sort of the

00:03:15.900 --> 00:03:19.340
thousands of people that have
Tiger installed would normally get to.

00:03:19.340 --> 00:03:22.800
So you really get to
use the cool new stuff.

00:03:22.800 --> 00:03:25.030
And the other thing that's really
important for you as developers

00:03:25.030 --> 00:03:27.020
is you actually get our attention.

00:03:27.020 --> 00:03:33.510
If you're working with our developer
previews and you file a bug and you say,

00:03:33.510 --> 00:03:36.580
"Hey, guys,
this bug is a bug and it's a bug in

00:03:36.580 --> 00:03:40.660
your latest developer preview," the
amount of attention that you can expect

00:03:40.840 --> 00:03:44.980
from me or from one of my colleagues
goes up a little bit because we know

00:03:44.980 --> 00:03:47.500
that you're working where we're working.

00:03:47.500 --> 00:03:49.950
So we're sort of in the same space.

00:03:50.170 --> 00:03:51.810
At the same time,
you have to be prepared for

00:03:51.950 --> 00:03:52.980
a little bit of trouble.

00:03:52.980 --> 00:03:55.720
We work really,
really hard to make sure that the

00:03:55.720 --> 00:03:58.070
developer previews are really solid.

00:03:58.200 --> 00:04:01.900
But like in 2003,
I think it was early 2003, late 2003,

00:04:01.900 --> 00:04:06.220
we shipped a developer preview that like
totally hosed everyone who used IntelliJ.

00:04:06.220 --> 00:04:09.870
So for like three weeks,
the IntelliJ people were like, "Ah,

00:04:09.870 --> 00:04:13.010
what did you guys do?" And then,
you know, three weeks later,

00:04:13.160 --> 00:04:15.020
we released another developer preview.

00:04:15.020 --> 00:04:16.920
We fixed it.

00:04:16.920 --> 00:04:20.770
So--but you have to be prepared
for a certain amount of trouble.

00:04:20.810 --> 00:04:23.280
And the other thing is
there is no uninstaller.

00:04:23.280 --> 00:04:27.020
So, you know, once you're on board,
you're sort of all the way on board.

00:04:27.020 --> 00:04:29.810
So that's two of the things that
you need to be thinking about.

00:04:31.730 --> 00:04:35.790
So there's ways to work with developer
previews that we've found to be very,

00:04:35.900 --> 00:04:37.080
very successful.

00:04:37.200 --> 00:04:41.780
One is to have a sandbox and always
leave yourself a safe place to go to.

00:04:41.800 --> 00:04:45.770
And so we're going to do a demo
now of how being prepared helps.

00:04:45.870 --> 00:04:47.260
I'm going to bring up
Barry Langdon-Lassane,

00:04:47.260 --> 00:04:49.340
one of my colleagues at Apple Computer.

00:04:49.440 --> 00:04:53.010
And we're going to do something way
worse than installing a developer

00:04:53.040 --> 00:04:54.960
preview that may or may not be flaky.

00:04:54.960 --> 00:04:57.480
We're going to do terrible,
terrible things to Barry's machine.

00:04:57.500 --> 00:04:58.360
There you go.

00:04:58.360 --> 00:05:00.110
BARRY LANGDON- Thank you, Mikey.

00:05:00.220 --> 00:05:02.470
Yes, we're going to do dangerous
things to my machine.

00:05:02.630 --> 00:05:05.460
Now, there's lots of dangerous things
you can do to your machine.

00:05:05.460 --> 00:05:07.240
I'll leave it to your imagination.

00:05:07.370 --> 00:05:10.400
This example is a little bit contrived
in that we wrote the installer ourselves.

00:05:10.470 --> 00:05:13.830
But let's pretend I was on the internet,
I was surfing the internet,

00:05:13.850 --> 00:05:16.360
and I found this really cool application.

00:05:16.360 --> 00:05:18.980
And I downloaded it,
and I wanted to install it.

00:05:18.980 --> 00:05:21.620
So here's the application.

00:05:21.630 --> 00:05:25.030
Let's see what happens when
I install this on my machine.

00:05:26.110 --> 00:05:27.760
Yeah, yeah, yeah, warnings, warnings.

00:05:27.760 --> 00:05:29.670
It's fine.

00:05:29.720 --> 00:05:30.470
So let's install it.

00:05:30.530 --> 00:05:32.700
Now, this is going to be important later.

00:05:32.700 --> 00:05:35.300
My machine has multiple partitions,
and I'm going to be

00:05:35.360 --> 00:05:36.610
destroying one of them.

00:05:36.610 --> 00:05:38.760
So I have to pick which
one I want to destroy.

00:05:38.760 --> 00:05:40.580
I've got a precious data partition.

00:05:40.580 --> 00:05:43.560
Actually, that doesn't have an OS on it,
so it's pretty safe.

00:05:43.630 --> 00:05:46.260
An admin partition,
and my development partition.

00:05:46.260 --> 00:05:49.630
And the development partition is
where I generally do risky things.

00:05:49.630 --> 00:05:52.230
And let's see what happens
when I do something risky.

00:05:52.240 --> 00:05:54.920
And I'm going to stop using the mouse,
because it keeps going into--

00:05:56.120 --> 00:05:56.680
That mode.

00:05:56.680 --> 00:05:56.970
OK.

00:05:57.340 --> 00:06:00.420
So I'm going to install this
risky software that I downloaded.

00:06:00.420 --> 00:06:03.130
Oh, it asks for my admin password.

00:06:03.130 --> 00:06:03.840
Sure.

00:06:06.090 --> 00:06:09.080
So it's installing and
I'm feeling good because,

00:06:09.200 --> 00:06:10.680
you know,
it's my development partition and

00:06:10.680 --> 00:06:13.920
I want to try something new and
see what's going on and uh-oh.

00:06:14.000 --> 00:06:16.840
Uh-oh, this looks really bad.

00:06:16.860 --> 00:06:18.810
I don't see a dock.

00:06:18.880 --> 00:06:24.430
This close button's kind
of flashing and mmm.

00:06:24.810 --> 00:06:29.010
Okay, my machine, let's see,
the volume control I think is even worse.

00:06:29.170 --> 00:06:30.640
Yeah, my machine is completely hosed.

00:06:30.640 --> 00:06:34.400
So hopefully, before Mikey comes back
to me later in the talk,

00:06:34.450 --> 00:06:40.250
I'll have my machine back up and running,
and then I'll show you what I did.

00:06:40.250 --> 00:06:40.250
So back to you, Mikey.

00:06:40.250 --> 00:06:40.250
Mikey McDougall: Back to slides.

00:06:41.130 --> 00:06:45.320
So we're real time demoing
how being prepared helps.

00:06:45.410 --> 00:06:50.710
So I want to recognize that everyone
has their own technique for being safe.

00:06:50.720 --> 00:06:52.300
And you guys are all really smart people.

00:06:52.300 --> 00:06:53.880
And there's lots of different techniques.

00:06:53.890 --> 00:06:58.920
So this one that we have is tuned for
working with our developer previews.

00:06:58.920 --> 00:07:04.420
I reinstall my system software
a lot because I work at Apple.

00:07:04.420 --> 00:07:06.030
And one of the things that
I want to just drive home is,

00:07:06.080 --> 00:07:09.300
if you're prepared,
you can avoid a whole lot of problems.

00:07:09.320 --> 00:07:10.350
So this is Disk Utility.

00:07:10.360 --> 00:07:11.660
Many of you folks are familiar with this.

00:07:11.660 --> 00:07:12.960
And it's probably hard to read.

00:07:13.100 --> 00:07:14.330
So I'm going to zoom in.

00:07:14.480 --> 00:07:18.850
This is actually Disk Utility
looking at my machine at home.

00:07:19.200 --> 00:07:22.010
And this is how I have-- how I'm set up.

00:07:22.240 --> 00:07:26.600
I dedicate four-- I actually
have four boot partitions.

00:07:26.620 --> 00:07:31.140
I have one like Barry for my development,
testing, you know, crazy risky stuff.

00:07:31.210 --> 00:07:34.280
Actually,
I take it and make a copy of the Tiger,

00:07:34.480 --> 00:07:38.400
you know, tent, you know,
original Tiger install DVD.

00:07:38.410 --> 00:07:40.240
And I've put that image
right on my hard disk.

00:07:40.350 --> 00:07:44.090
It turns out that if you do that and
you boot off that hard disk and you

00:07:44.230 --> 00:07:47.650
install a minimal install of your system,
it takes you like a minute

00:07:47.810 --> 00:07:49.060
to get yourself back to,
like,

00:07:49.060 --> 00:07:51.560
a bootable system on a new partition.

00:07:51.560 --> 00:07:53.820
I also, like Barry,
have an admin partition where

00:07:53.920 --> 00:07:56.800
I keep mail and all the sort of
applications that I use all the time.

00:07:56.980 --> 00:07:59.120
And finally,
I've got-- I have Panther on one of my

00:07:59.120 --> 00:08:00.650
things because I do regression testing.

00:08:00.660 --> 00:08:02.030
I want to know what's going on.

00:08:02.160 --> 00:08:04.750
You know, sometimes I need to step back
a few years and find out what's

00:08:04.810 --> 00:08:06.220
going-- what's going down.

00:08:06.220 --> 00:08:09.030
I make two partitions,
one for my wife and kids and

00:08:09.030 --> 00:08:10.790
myself to sort of live on,
and then another one

00:08:10.800 --> 00:08:12.000
for my precious data.

00:08:12.000 --> 00:08:16.160
So this is just one way that you can set
yourself up to be prepared for working

00:08:16.160 --> 00:08:19.020
with software that you can't uninstall.

00:08:20.350 --> 00:08:24.870
So there's some considerations here,
like, how many gigabytes should

00:08:24.870 --> 00:08:26.460
I set aside for a partition?

00:08:26.490 --> 00:08:29.770
Will I really need to install my
system software all that frequently?

00:08:29.910 --> 00:08:32.420
So one thing that's true is, I mean,
you're here today.

00:08:32.420 --> 00:08:33.760
We've given you Leopard.

00:08:33.960 --> 00:08:37.000
You sort of need to reinstall
your system software.

00:08:37.050 --> 00:08:39.710
And it's kind of nice if you
have a separate partition

00:08:39.720 --> 00:08:43.190
that's set aside already,
sort of prepared for a

00:08:43.270 --> 00:08:45.070
place for that to land.

00:08:45.400 --> 00:08:47.590
And it's also nice if you
have a partition that's set

00:08:47.590 --> 00:08:48.780
aside for developer previews.

00:08:48.900 --> 00:08:51.850
Where if something goes badly wrong,
you can go back to another

00:08:51.850 --> 00:08:53.220
place and be happy.

00:08:53.420 --> 00:08:56.700
So how much space to set aside?

00:08:56.970 --> 00:08:59.280
If you go back to that last slide
and you looked really quickly,

00:08:59.390 --> 00:09:03.280
you saw that I set aside 12
gigabytes for my partitions.

00:09:03.330 --> 00:09:06.700
And you can get by in 12 gigabytes,
especially with Tiger.

00:09:06.730 --> 00:09:07.680
There's enough room there.

00:09:07.710 --> 00:09:09.900
But these days,
I would suggest that you set

00:09:09.900 --> 00:09:11.640
aside about 20 gigabytes.

00:09:11.740 --> 00:09:14.100
When you start getting Leopard on
there and you get something like

00:09:14.100 --> 00:09:16.910
GarageBand or some big productivity app,
all of a sudden,

00:09:17.080 --> 00:09:20.310
what I thought back in the day
was going to be plenty of room

00:09:20.400 --> 00:09:22.260
starts seeming a little tight.

00:09:22.490 --> 00:09:27.330
So 20 gigabytes is a
good number these days.

00:09:27.690 --> 00:09:30.940
And, you know, I realized I was going
to be telling people,

00:09:30.990 --> 00:09:34.450
"Set aside 20 of your gigabytes for
system software." And so I wanted

00:09:34.450 --> 00:09:37.300
to figure out exactly how much is
that going to cost in terms of,

00:09:37.300 --> 00:09:38.200
like, dollars and cents.

00:09:38.310 --> 00:09:40.410
So I went out and
I looked on the web for,

00:09:40.410 --> 00:09:42.040
like, prices for hard disks.

00:09:42.160 --> 00:09:46.160
It's like $1 to $1.25,
$1.50 a gigabyte these days.

00:09:46.160 --> 00:09:51.110
So you get a pretty good insurance
policy for about 30 bucks.

00:09:51.380 --> 00:09:54.030
So I think that's a good investment,
so...

00:09:54.710 --> 00:09:55.660
There are alternatives.

00:09:55.660 --> 00:09:57.850
And some of these alternatives
are very important if you're

00:09:57.890 --> 00:10:02.180
doing things like dual booting,
one of the new Intel Macs

00:10:02.180 --> 00:10:05.470
to Windows and to the Mac,
because there are certain

00:10:05.490 --> 00:10:08.380
difficulties if you try to do a lot
of different partitions and have

00:10:08.390 --> 00:10:09.900
one of them be a Windows partition.

00:10:10.110 --> 00:10:13.410
So an external bootable
drive is a really,

00:10:13.410 --> 00:10:14.130
really good idea.

00:10:14.240 --> 00:10:17.610
And another way to do
sort of risky stuff,

00:10:17.640 --> 00:10:21.880
you can have your development system
be on an external FireWire drive.

00:10:21.980 --> 00:10:23.550
There's some really
great backup software.

00:10:23.640 --> 00:10:27.000
I strongly suggest that
everybody back up their really,

00:10:27.000 --> 00:10:28.200
really precious data.

00:10:28.210 --> 00:10:30.760
And the other thing is I've
talked to some developers,

00:10:30.760 --> 00:10:33.030
and they're like, you know,
I'd just stay two developer previews

00:10:33.030 --> 00:10:34.880
back or three developer previews back.

00:10:34.880 --> 00:10:36.140
I do not recommend that.

00:10:36.140 --> 00:10:40.070
But with care and luck and research,
you can be OK.

00:10:40.280 --> 00:10:43.330
So that was how to set up to
use developer previews and my

00:10:43.390 --> 00:10:48.000
sort of pitch for everyone,
please do install our developer previews.

00:10:48.010 --> 00:10:51.460
There's something else,
and I actually bumped into this the

00:10:51.460 --> 00:10:54.400
same day that I was putting these
slides together for the first time.

00:10:54.400 --> 00:10:59.840
A bit of preparation that you can do
on your machine for when you get hung

00:11:00.150 --> 00:11:03.670
or stuck in some really important way.

00:11:03.980 --> 00:11:07.680
What I had happen is my user
interface froze up completely.

00:11:07.680 --> 00:11:10.300
My mouse wasn't working.

00:11:10.300 --> 00:11:12.480
Everything was really sort of frozen.

00:11:12.480 --> 00:11:15.960
But I'd encountered
this situation before.

00:11:15.960 --> 00:11:17.960
This is my system preferences at home.

00:11:17.960 --> 00:11:20.340
And there's two things that
you can select so that when

00:11:20.340 --> 00:11:23.160
you get in this situation,
you have some chance of recovering.

00:11:23.340 --> 00:11:26.100
One is make sure that
you can remote log in.

00:11:26.250 --> 00:11:29.250
And the other thing is I think that
Apple Remote Desktop is a really,

00:11:29.260 --> 00:11:30.490
really great tool.

00:11:30.620 --> 00:11:33.740
So you can do a whole lot of things
on a machine where your monitor

00:11:33.770 --> 00:11:37.530
is just-- your monitor might get
kicked in by some unhappy person.

00:11:37.700 --> 00:11:41.730
You can still do a lot with your machine
if you turn on Apple Remote Desktop.

00:11:41.910 --> 00:11:46.020
So you ping the machine, make sure,
you know, sure enough it's still running.

00:11:46.040 --> 00:11:47.260
You can SSH in.

00:11:47.350 --> 00:11:51.360
Once you SSH in,
you have all your old friends.

00:11:51.360 --> 00:11:55.140
You can run top to see what's
taking up all the processes.

00:11:55.150 --> 00:11:56.040
This is one of my favorites.

00:11:56.150 --> 00:11:59.680
You can find out which
Java processes are running,

00:11:59.740 --> 00:12:02.730
just in case it's
Java that's hung for you.

00:12:02.830 --> 00:12:06.850
And then you can attach to
anything that you might want to.

00:12:07.070 --> 00:12:08.480
You do a full investigation
and write up your bug.

00:12:08.480 --> 00:12:08.480
So, yeah, so,

00:12:09.610 --> 00:12:12.850
So there's two things here,
Developer Previews,

00:12:12.850 --> 00:12:14.430
and just two little safety tips.

00:12:14.430 --> 00:12:17.420
Make sure that you have at least
one more boot partition somewhere

00:12:17.610 --> 00:12:18.730
that you can boot off of.

00:12:18.850 --> 00:12:24.100
And I really think that
everyone should enable SSH,

00:12:24.340 --> 00:12:28.650
just so you can always
get back in somehow.

00:12:28.790 --> 00:12:32.200
So that's Developer Previews.

00:12:32.200 --> 00:12:32.470
Let's talk about some of the really
basic tools for Java debugging.

00:12:36.900 --> 00:12:38.140
Okay.

00:12:38.140 --> 00:12:41.830
So, these aren't quite hand
grenades but--but they're handy.

00:12:41.830 --> 00:12:44.270
First of all,
who--who in this room has--has done

00:12:44.290 --> 00:12:46.210
this sort of plankton level debugging?

00:12:46.210 --> 00:12:48.500
You put a printf in your code, right?

00:12:48.500 --> 00:12:49.040
Okay.

00:12:49.040 --> 00:12:53.270
Now, who has run into somebody who
is also a developer who's like,

00:12:53.380 --> 00:12:56.930
I put a printf in my code and
I don't know where it's going to.

00:12:57.060 --> 00:13:00.490
So everyone, I--I felt like I had to
say at the root level,

00:13:00.490 --> 00:13:03.920
you can find standard error
or standard out by going to

00:13:03.920 --> 00:13:05.560
applications utilities console.app.

00:13:05.570 --> 00:13:09.100
Like that's where--that's where
everything sort of spews to.

00:13:09.100 --> 00:13:12.840
The other thing is try to make sure
that anything that you actually leave

00:13:12.840 --> 00:13:16.480
in your code like that is important.

00:13:16.660 --> 00:13:17.840
Because when people are
trying to figure out,

00:13:17.940 --> 00:13:20.700
you know, some--something bad has
happened to their machine,

00:13:20.900 --> 00:13:23.820
they look there if they're
sophisticated and they see like--if

00:13:23.890 --> 00:13:26.550
they see a bunch of logging stuff
and it's coming from your app,

00:13:26.550 --> 00:13:29.280
they're going to be like, "Oh,
I know whose problem it is." And it

00:13:29.280 --> 00:13:33.050
might not be if you just left logging
turned on or something like that.

00:13:33.340 --> 00:13:36.750
So, the other thing is,
I think that everyone should

00:13:37.170 --> 00:13:40.190
actually use the right tools.

00:13:40.270 --> 00:13:42.350
I'm going to fix this slide.

00:13:42.890 --> 00:13:44.340
These are not white belt tools.

00:13:44.400 --> 00:13:45.500
These are white box tools.

00:13:45.500 --> 00:13:48.880
And this is actually where everyone
should be doing their debugging.

00:13:49.000 --> 00:13:52.160
I think that if you can work
with code-- I usually can't

00:13:52.160 --> 00:13:54.440
work with code-- that's great.

00:13:54.440 --> 00:13:57.520
If you can work with an IDE,
with an integrated debugger,

00:13:57.650 --> 00:14:00.470
that's where you should
be doing your work.

00:14:01.760 --> 00:14:04.100
That's not where I live.

00:14:04.480 --> 00:14:07.550
And so I wanted to give you some
of the tips from where I live.

00:14:07.780 --> 00:14:10.610
And these are more like,
not so much black belt tools,

00:14:10.610 --> 00:14:12.690
but black box tools.

00:14:13.510 --> 00:14:15.400
So I spend a lot of my
time in the terminal,

00:14:15.400 --> 00:14:16.790
and there's a couple of things
that you should know are

00:14:16.870 --> 00:14:17.960
available in the terminal.

00:14:17.960 --> 00:14:22.290
First of all, if Java is running,
you can get a bunch of really good

00:14:22.290 --> 00:14:25.730
information about what's happening
in the current Java application

00:14:26.120 --> 00:14:28.840
by sending it a sig 3,
a kill dash quit.

00:14:28.900 --> 00:14:31.960
And this will cause standard error,
which I mentioned in the slide, like,

00:14:31.970 --> 00:14:35.110
one or two back,
to dump out all the thread information.

00:14:35.200 --> 00:14:37.040
Any threads that are
deadlocked will come up there.

00:14:37.040 --> 00:14:39.030
So you should really know
about kill dash quits.

00:14:39.050 --> 00:14:42.260
Really handy for finding out what's
going on with your application.

00:14:42.350 --> 00:14:47.910
Also, for the times when you're hung,
sample and GDB-- actually,

00:14:47.910 --> 00:14:50.960
GDB is slightly more powerful,
but it's sort of what I think

00:14:50.960 --> 00:14:52.710
of as an expert-friendly tool.

00:14:52.720 --> 00:14:54.700
It's not really user-friendly.

00:14:54.810 --> 00:14:57.540
But you can do a lot of work with GDB.

00:14:57.540 --> 00:15:02.180
If you attach to the processing question,
you can do thread apply all backtrace,

00:15:02.190 --> 00:15:05.660
and you get a bunch of information there.

00:15:05.780 --> 00:15:07.400
And also,
Shark has come to the command line.

00:15:07.530 --> 00:15:09.580
So you can actually-- if
you've got a hung application,

00:15:09.610 --> 00:15:12.240
you can use Shark to profile it and
get a bunch of information about it.

00:15:13.560 --> 00:15:16.330
The other thing is when things go
badly wrong and you're not hung,

00:15:16.330 --> 00:15:20.170
but you go so far as to crash,
you need to know where the log files are.

00:15:20.220 --> 00:15:22.440
Everyone should know this
information who's in this room

00:15:22.440 --> 00:15:23.820
and cares about Java debugging.

00:15:23.900 --> 00:15:27.400
I sort of like when I get access to
somebody's machine for the first time.

00:15:27.450 --> 00:15:30.170
I kind of go here and find
out how many times Java has

00:15:30.220 --> 00:15:31.450
crashed on them and look around.

00:15:31.500 --> 00:15:32.340
It's kind of cool.

00:15:32.410 --> 00:15:37.300
We're going to go in depth on these
two locations later on in the session.

00:15:37.450 --> 00:15:39.960
But everyone needs to hear about them.

00:15:40.080 --> 00:15:43.040
There's some really good command line
options that you can pass to Java to

00:15:43.110 --> 00:15:47.010
get a bunch of good information that
can help you debug your problems.

00:15:47.130 --> 00:15:50.340
This one is probably the most
useful generically speaking.

00:15:50.570 --> 00:15:56.250
If you tell Java, dash verbose class,
as every class gets loaded in,

00:15:56.250 --> 00:15:59.100
it tells you about
what's getting loaded in.

00:15:59.200 --> 00:16:02.560
And if it's often the case that
the last thing that gets loaded in

00:16:02.560 --> 00:16:05.100
is the thing that has the problem.

00:16:05.200 --> 00:16:08.460
So this can give you a lot of
really good clues as to what's

00:16:08.460 --> 00:16:12.220
going wrong with your application
if you have a reproducible problem.

00:16:12.260 --> 00:16:13.880
So verbose class.

00:16:14.270 --> 00:16:16.680
This one is not so much
for debugging in general,

00:16:16.680 --> 00:16:20.080
but for understanding the performance
characteristics of your application.

00:16:20.410 --> 00:16:24.730
This is actually really important
to do at some point in your career.

00:16:24.740 --> 00:16:26.860
Watch what happens with your application.

00:16:26.860 --> 00:16:31.110
Watch how fast or slow garbage
collection is running and some of

00:16:31.110 --> 00:16:33.910
the overall characteristics of it.

00:16:34.090 --> 00:16:37.430
For folks who are doing user
interface stuff and see something

00:16:37.430 --> 00:16:41.880
that might be a little bit off,
and you're wondering, "Is that Apple,

00:16:41.880 --> 00:16:44.950
or is that me?" This is a
good option to know about.

00:16:45.060 --> 00:16:50.450
You can set the default look and feel,
in particular for Swing,

00:16:50.450 --> 00:16:53.580
with an option on the command line.

00:16:53.640 --> 00:16:58.570
And this is how you set it to be
not Apple's Aqua look and feel,

00:16:58.570 --> 00:16:58.570
but to be the metal look and feel.

00:16:58.570 --> 00:16:58.570
So this is very handy.

00:16:59.360 --> 00:17:05.150
Now, we've got two different graphics
pipelines now in Java 5.

00:17:05.850 --> 00:17:08.700
One with Quartz on, uses all the sort of
underlying Quartz support,

00:17:08.810 --> 00:17:11.520
and one with Quartz off,
which uses Sun's 2D renderer.

00:17:11.730 --> 00:17:14.200
And so if you're seeing
graphics anomalies,

00:17:14.200 --> 00:17:18.520
it's sometimes very interesting to go
from one pipeline to the other pipeline

00:17:18.590 --> 00:17:23.700
to figure out just whether-- I mean,
this can be just good information.

00:17:23.700 --> 00:17:26.000
The other thing is these
two pipelines have different

00:17:26.000 --> 00:17:28.620
performance characteristics,
so it's really a good idea to look at

00:17:28.620 --> 00:17:33.200
your application in both situations if
you are sort of performance sensitive,

00:17:33.200 --> 00:17:34.690
like many games might be.

00:17:36.070 --> 00:17:38.000
And we're going to talk
about Shark later on.

00:17:38.070 --> 00:17:40.920
Java needs a little bit of a
clue if you're going to use

00:17:41.040 --> 00:17:44.830
Shark's Java-specific profiling

00:17:45.180 --> 00:17:48.490
and Mark So,
times when you need to know how

00:17:48.490 --> 00:17:50.820
to pass this command line in
if you're going to use Shark,

00:17:50.820 --> 00:17:51.740
and Shark is a great tool.

00:17:54.190 --> 00:17:59.540
Um, no talk about debugging would be
complete if you didn't talk about leaks.

00:17:59.700 --> 00:18:03.870
So there's sort of the-- the quick
and dirty way of finding leaks is

00:18:03.990 --> 00:18:07.230
to use jmap -histo for histogram.

00:18:07.380 --> 00:18:10.870
And what--if you use this command
and you point it at the process

00:18:10.870 --> 00:18:14.400
ID of a running Java process,
it will go through the Java heap,

00:18:14.530 --> 00:18:18.740
and it will collect up a list of
every single object that you have,

00:18:18.860 --> 00:18:21.820
and it'll put, like,
a number next to each one of those.

00:18:21.840 --> 00:18:23.040
You know, like,
I have 10 million integers

00:18:23.040 --> 00:18:24.060
or something like that.

00:18:24.180 --> 00:18:26.620
And the way to do leak
detection with this is really,

00:18:26.620 --> 00:18:30.360
really coarse leak detection is to wait
five minutes while you have some load

00:18:30.360 --> 00:18:32.550
on your application and run it again,
see what changes.

00:18:32.560 --> 00:18:34.060
Do it a third time, see what changes.

00:18:34.060 --> 00:18:36.550
And you can actually get,
at a sort of coarse level,

00:18:36.640 --> 00:18:40.140
some really good information
about what sort of leaks your

00:18:40.140 --> 00:18:42.560
application may or may not have.

00:18:42.560 --> 00:18:46.740
We've managed to use jprofiler to find,
like, really smaller-- so, you know,

00:18:46.740 --> 00:18:48.810
there are good tools out there.

00:18:48.820 --> 00:18:50.020
I think jprofiler's a good one.

00:18:50.060 --> 00:18:51.480
I wanted to give them a plug here.

00:18:51.650 --> 00:18:56.020
It's really good for finding leaks,
as-- as anyone uses--no.

00:18:56.020 --> 00:18:59.520
So I also polled different
people at Apple to say,

00:18:59.520 --> 00:19:02.390
"What's your favorite tool
for finding bugs?" So you

00:19:02.390 --> 00:19:06.520
may or may not know that the
Apple Music Store sits on top of Java,

00:19:06.520 --> 00:19:09.900
and they run many, many,
many machines with many, many,

00:19:09.900 --> 00:19:10.990
many Java processes.

00:19:11.020 --> 00:19:14.510
And so when I talked to these folks,
they said that the MXBeans was--

00:19:14.570 --> 00:19:17.520
I've never used MXBeans myself,
so the caveat there.

00:19:17.650 --> 00:19:20.870
But they swore up and down that
these are the greatest tools for

00:19:20.890 --> 00:19:26.480
doing debugging of real-time,
large deployments.

00:19:26.790 --> 00:19:29.580
So, MXBeans.

00:19:30.770 --> 00:19:32.580
And the other thing is,
there are other good

00:19:32.580 --> 00:19:33.460
tools that are coming out.

00:19:33.460 --> 00:19:34.450
So the future looks bright.

00:19:34.450 --> 00:19:37.940
I have this--most of this session is
like the last three years or two years.

00:19:38.140 --> 00:19:42.330
But there are some interesting things
that are coming out in the future.

00:19:42.340 --> 00:19:45.470
X-Ray, we've got--we had a
demonstration earlier.

00:19:45.590 --> 00:19:49.240
Dtrace is coming in Java 6,
and that will allow you to hook in

00:19:49.320 --> 00:19:52.660
at a very sort of fundamental level,
see what's going on.

00:19:52.800 --> 00:19:55.670
And finally,
there's a whole lot of JVMTI agents

00:19:55.780 --> 00:19:58.280
that are sort of coming online now that
JVMTI is available in a lot of places.

00:20:00.620 --> 00:20:01.900
So those are common tools.

00:20:01.970 --> 00:20:06.700
Let's talk for a little bit about three
common problems that people bump into

00:20:06.730 --> 00:20:09.130
sort of at different levels of Java.

00:20:10.290 --> 00:20:13.960
These are sort of the usual suspects.

00:20:14.010 --> 00:20:15.640
And you should know about them.

00:20:15.740 --> 00:20:17.060
So the first is if you use Swing.

00:20:17.060 --> 00:20:20.900
The thing that you need to know about
Swing is Swing is not thread-safe.

00:20:21.010 --> 00:20:26.180
We have a lot of people who,
in their second month of Java,

00:20:26.180 --> 00:20:29.030
they sort of bump into threads.

00:20:29.200 --> 00:20:32.570
And then they combine that with what
they learned in the first month of Java,

00:20:32.610 --> 00:20:33.760
which is Swing is cool.

00:20:33.930 --> 00:20:35.750
And all of a sudden they have deadlocks.

00:20:35.860 --> 00:20:38.640
So you need to know,
if you're working in Swing,

00:20:38.640 --> 00:20:42.560
that you need to start to understand how
threading and Java all work together.

00:20:42.560 --> 00:20:44.300
You need to learn about the event queue.

00:20:44.410 --> 00:20:46.810
You need to learn about
the event dispatch thread,

00:20:46.820 --> 00:20:48.320
which is the event queue.

00:20:48.480 --> 00:20:51.840
And you make sure that any time
that you're manipulating the user

00:20:51.860 --> 00:20:55.810
interface of a Swing application,
you're doing it from the right place.

00:20:55.910 --> 00:21:00.200
And one of the ways to do that is to look
up and read about these two utilities.

00:21:00.260 --> 00:21:05.340
InvokeLater is the asynchronous version,
and InvokeInWait is the synchronous

00:21:05.500 --> 00:21:09.200
version of invoking a method that's
going to call something like that.

00:21:09.200 --> 00:21:10.990
on using swing.

00:21:12.640 --> 00:21:14.930
Now this is a really fun one,
and everyone should sort of like,

00:21:14.930 --> 00:21:17.170
if you're reading your mail,
you should stop reading your

00:21:17.170 --> 00:21:19.930
mail and look up at the screen,
because this is kind of important.

00:21:19.940 --> 00:21:24.060
Volatile variables are subtle.

00:21:24.060 --> 00:21:27.760
You're getting into the realm
of data synchronization here.

00:21:27.870 --> 00:21:29.070
So look up at the screen here.

00:21:29.090 --> 00:21:31.120
How many people have written
a worker thread like this?

00:21:31.140 --> 00:21:33.720
Wow, something is running,
do something again.

00:21:33.720 --> 00:21:36.130
Like, really,
really straightforward stuff.

00:21:36.180 --> 00:21:38.520
And there's action listeners too.

00:21:38.520 --> 00:21:40.320
So who has an action
listener where they're like,

00:21:40.320 --> 00:21:41.440
push the button, turn it off?

00:21:42.750 --> 00:21:42.900
Right?

00:21:42.900 --> 00:21:48.290
Now, this actually can cause huge
problems when you get to a

00:21:48.290 --> 00:21:52.670
machine that has multiple cores,
when you have a really

00:21:52.670 --> 00:21:57.400
aggressive just-in-time compiler,
and you have the Java memory model,

00:21:57.400 --> 00:22:01.460
which allows... Let me pull out
what's really important here.

00:22:01.460 --> 00:22:04.360
And that's that this variable here,
which is a Boolean,

00:22:04.360 --> 00:22:06.220
is shared across two threads.

00:22:06.340 --> 00:22:09.780
Now, we'll just fade out everything
that's not important.

00:22:09.780 --> 00:22:15.520
If one of those threads... gets compiled
and sort of aggressively compiled,

00:22:15.520 --> 00:22:19.710
the Java memory model allows for
that to be put into a register on,

00:22:19.990 --> 00:22:27.080
like, one processor for one thread,
and the same sort of named variable

00:22:27.080 --> 00:22:30.930
to be put into another processor,
another register on another

00:22:31.080 --> 00:22:32.630
processor in another thread.

00:22:32.640 --> 00:22:36.070
So unless you declare this
variable to be volatile,

00:22:36.200 --> 00:22:39.550
it's possible that you could
just push this button until

00:22:39.550 --> 00:22:43.730
you're blue in the face,
and, you know, the run loop will--I mean,

00:22:43.740 --> 00:22:45.910
the working thread will
just keep on working.

00:22:46.170 --> 00:22:49.890
And this is a very hard problem to debug,
because if you, like,

00:22:50.020 --> 00:22:53.000
put it into a debugger, all of a sudden,
you're not compiled anymore.

00:22:53.000 --> 00:22:55.000
You're running interpreted.

00:22:55.150 --> 00:22:57.940
And everything sort of
magically works again.

00:22:58.010 --> 00:23:00.000
It's one of those vanishing bugs.

00:23:00.000 --> 00:23:02.250
So, again,
you need to learn about the threading

00:23:02.250 --> 00:23:02.990
characteristics that underlie Java.

00:23:03.050 --> 00:23:06.000
Sort of the good news about
being a Java programmer is

00:23:06.000 --> 00:23:10.460
you get exposed to threads,
like, two years, three years earlier than

00:23:10.460 --> 00:23:11.500
the rest of the world does.

00:23:11.500 --> 00:23:11.500
Sort of the bad news is,
you get exposed to threads, like,

00:23:11.500 --> 00:23:11.500
two years, three years earlier than
the rest of the world does.

00:23:11.500 --> 00:23:12.500
Sort of the bad news is,
you get exposed to threads, like,

00:23:12.500 --> 00:23:12.500
two years, three years earlier than
the rest of the world does.

00:23:12.500 --> 00:23:15.500
And the good news is,
you really have to think about them.

00:23:15.500 --> 00:23:17.780
The last problem that I wanted
to talk about is sort of up

00:23:17.850 --> 00:23:19.700
at the user interface level,
not sort of down at

00:23:19.700 --> 00:23:21.470
the memory model level.

00:23:21.500 --> 00:23:26.500
And that's that dots per inch are not the
same on the Mac as they are on Windows.

00:23:26.500 --> 00:23:28.490
And this can bite you.

00:23:29.390 --> 00:23:32.130
So the real root problem here
is that when you draw text,

00:23:32.220 --> 00:23:34.760
when you draw string,
you're drawing in points.

00:23:34.860 --> 00:23:37.200
And points is a fraction of an inch.

00:23:37.280 --> 00:23:41.630
And when you draw graphics,
usually you're drawing in pixels.

00:23:41.760 --> 00:23:45.020
So if you draw 100
pixel by a 40 pixel box,

00:23:45.020 --> 00:23:48.260
and then you pick some font
that you think looks great,

00:23:48.330 --> 00:23:51.300
and you just bang it in
there at a fixed offset,

00:23:51.300 --> 00:23:55.890
that will look great on one of your
platforms that you might want to support.

00:23:56.020 --> 00:23:59.410
But it might not look so great on another
platform that you want to support.

00:23:59.550 --> 00:24:01.660
So be aware of this.

00:24:01.780 --> 00:24:04.340
Do a little bit of math
and use standard layout.

00:24:04.360 --> 00:24:07.240
So just be prepared to handle
this sort of a situation.

00:24:07.380 --> 00:24:10.880
So those are the three common
suspects that I wanted to

00:24:10.930 --> 00:24:12.400
draw people's attention to.

00:24:12.430 --> 00:24:13.920
Swing's not thread safe.

00:24:13.980 --> 00:24:15.460
Volatile is important.

00:24:15.490 --> 00:24:19.090
And cross-platform layout
can be complicated.

00:24:19.680 --> 00:24:21.600
So that was our usual suspects.

00:24:21.740 --> 00:24:23.540
Now we're going to go a
little bit more in depth.

00:24:23.610 --> 00:24:24.560
We're going to take one crash.

00:24:24.720 --> 00:24:27.270
We're going to take it
all the way through.

00:24:27.830 --> 00:24:30.050
So people have run into
this problem before,

00:24:30.210 --> 00:24:34.130
like they have a crash and you
know you come to some person like,

00:24:34.160 --> 00:24:38.560
"Oh you know,
sometimes it just crashes." Well, no,

00:24:38.560 --> 00:24:40.110
people do not just

00:24:40.440 --> 00:24:50.280
We're going to go into an
analysis of a Java crash.

00:24:50.280 --> 00:24:50.280
We're going to take it
all the way through.

00:24:50.530 --> 00:24:53.500
The Java information is available
in that first log location

00:24:53.500 --> 00:24:57.730
that I mentioned before,
twitto/library/logs/java.

00:24:58.100 --> 00:25:01.550
And it'll be in a file that
has prepended to it the process

00:25:01.640 --> 00:25:03.370
ID of the crashing thread.

00:25:03.530 --> 00:25:06.120
And the native information
is in a similar location.

00:25:06.120 --> 00:25:07.280
You guys can all read.

00:25:07.280 --> 00:25:10.160
One of the things that you should
know is that analyzing a crash

00:25:10.160 --> 00:25:13.020
and analyzing a hang are very,
very, very similar.

00:25:13.070 --> 00:25:16.900
So everything that I'm about to go
over for analyzing a crash can sort

00:25:16.900 --> 00:25:20.990
of be used in situ for analyzing
a crash if you just sort of gather

00:25:21.000 --> 00:25:22.400
the appropriate information.

00:25:22.400 --> 00:25:25.960
So all the Java information corresponds
to what you would get out of a kill-quit,

00:25:25.960 --> 00:25:27.720
one of the things that
I mentioned earlier.

00:25:27.720 --> 00:25:32.510
And all of the native information you
could get out in GDB or by using sample.

00:25:33.650 --> 00:25:37.000
So let's look at the really big picture.

00:25:37.090 --> 00:25:41.210
So on one side you've got native code,
on the other side you've got Java,

00:25:41.250 --> 00:25:44.710
and then you've got threads that sort
of span across them with JNI sort

00:25:44.710 --> 00:25:46.740
of making the bridge between them.

00:25:47.870 --> 00:25:52.040
We will take a look at
the Java side first.

00:25:52.150 --> 00:25:54.190
So we're in Java.

00:25:54.680 --> 00:25:57.280
All of this is in library logs java.

00:25:57.390 --> 00:25:59.560
So what I actually did is
I went to one of our machines

00:25:59.730 --> 00:26:02.920
in one of our labs at Apple,
and we run a test harness.

00:26:02.920 --> 00:26:03.740
We run it every night.

00:26:03.740 --> 00:26:05.370
Actually we run it several times a day.

00:26:05.480 --> 00:26:10.140
And I pulled up one crash that had
happened sort of more than once.

00:26:10.160 --> 00:26:12.110
It happened a lot.

00:26:12.390 --> 00:26:16.260
One of the things that I've done here is,
if you look at my ls command,

00:26:16.260 --> 00:26:21.710
I passed -l for long, -r for reverse,
and t for time so that the

00:26:21.770 --> 00:26:25.900
very last crash is sort of at
the very bottom of my listing.

00:26:26.040 --> 00:26:29.110
You can end up with a lot of different
crashing threads if you're really

00:26:29.120 --> 00:26:30.740
putting a lot of stress on Java.

00:26:30.850 --> 00:26:33.270
So it's important to know
that sort of-- it's important

00:26:33.270 --> 00:26:34.600
to line things up correctly.

00:26:34.750 --> 00:26:39.390
So we're going to look
at process ID 16009.

00:26:40.550 --> 00:26:46.640
So this is the view of
java.native.crash from sort of high up.

00:26:46.720 --> 00:26:49.320
You guys, I've got this written
in a one-point font,

00:26:49.400 --> 00:26:52.550
so I don't expect you
to be able to read this.

00:26:53.160 --> 00:26:56.040
The first thing that you have at
the top is the crashing thread,

00:26:56.050 --> 00:26:57.350
if Java can find it.

00:26:57.610 --> 00:27:00.330
And you get a list of all
the threads that are running.

00:27:00.330 --> 00:27:05.510
You get a list of all the
libraries that are active,

00:27:05.520 --> 00:27:09.980
and then you get a list
of the VM arguments.

00:27:10.010 --> 00:27:16.290
So all these are sort of handy things
to know about Java when it crashes.

00:27:16.290 --> 00:27:16.290
And I think that the most important,
most interesting section

00:27:16.290 --> 00:27:16.290
is the thread section.

00:27:16.290 --> 00:27:16.290
Now you guys, I'm going to take out

00:27:16.370 --> 00:27:18.640
A lot of this.

00:27:19.100 --> 00:27:21.540
And just make it more readable for you.

00:27:21.770 --> 00:27:26.150
This is a lot like what you would see if
you had an exception in Java and you just

00:27:26.260 --> 00:27:28.620
did a print stack trace on an exception.

00:27:28.620 --> 00:27:31.590
The bottom bits are going to
be more close to your code,

00:27:31.590 --> 00:27:33.320
things that you've written.

00:27:33.320 --> 00:27:36.180
The top bits are going to be sort
of what Java uses to fulfill the

00:27:36.290 --> 00:27:38.400
requests that your code has made.

00:27:38.400 --> 00:27:41.400
So if you look closely here at
the bottom is a test case that

00:27:41.400 --> 00:27:43.180
we've got written in JUnit.

00:27:43.300 --> 00:27:45.920
It's called Close Window While Drawing.

00:27:45.920 --> 00:27:48.730
And you can see sort of further on
up the stack that calls Fill Rect,

00:27:48.730 --> 00:27:51.700
which is something that pretty
much everyone's familiar with.

00:27:51.700 --> 00:27:55.320
And what, you know,
sort of at the top of the stack

00:27:55.400 --> 00:27:59.240
is java2d.loops.maskblit.maskblit.

00:27:59.240 --> 00:28:04.600
And this is a JNI call and this is one
of your sort of signposts for things.

00:28:04.600 --> 00:28:08.800
Now you're in JNI and you're
starting to leave Java.

00:28:08.800 --> 00:28:10.750
And so it's good to sort of
fix this in your mind as,

00:28:10.750 --> 00:28:16.220
okay, that's the last thing that I did
in Java before the crash happened.

00:28:17.180 --> 00:28:18.600
So now we're going to
sort of switch sides.

00:28:18.600 --> 00:28:21.900
We're going to go from the
Java side over to the native side.

00:28:21.930 --> 00:28:25.260
And we're going to look a little
bit about and follow the crash

00:28:25.260 --> 00:28:26.900
through on the native side.

00:28:26.900 --> 00:28:31.370
So all this information is in the crash
reporter section of your logs folder.

00:28:32.220 --> 00:28:35.700
So again, in a half-point font
that no one can read.

00:28:35.770 --> 00:28:39.410
One of the things to know about
a crash log is that in Tiger,

00:28:39.410 --> 00:28:40.640
it's all prepended together.

00:28:40.860 --> 00:28:44.010
So the first crash is at the front,
and the second crash is

00:28:44.060 --> 00:28:45.370
right after the first crash.

00:28:45.420 --> 00:28:49.490
And the crash that you're usually
interested in is 125 pages down,

00:28:49.490 --> 00:28:52.610
if you're me, and you've crashed a lot.

00:28:52.830 --> 00:28:56.620
So one of the important things to know
is you need to look right at the bottom.

00:28:56.690 --> 00:28:57.710
So let's take this apart.

00:28:57.920 --> 00:28:59.270
There's header information.

00:28:59.370 --> 00:29:02.270
Again, when you're running in Java,
you have a lot of threads running,

00:29:02.270 --> 00:29:03.810
so there's a list of all the threads.

00:29:03.900 --> 00:29:06.560
And then again,
there's a list of all the libraries.

00:29:06.690 --> 00:29:08.760
So let's dig into the header.

00:29:08.770 --> 00:29:11.190
One of the things that you want to
do is you want to make sure that

00:29:11.200 --> 00:29:13.140
you're looking at the right bits.

00:29:13.250 --> 00:29:14.140
So I looked at this.

00:29:14.140 --> 00:29:17.790
OK, this is about the time
that the crash happened,

00:29:17.900 --> 00:29:19.970
so I'm cool here.

00:29:20.160 --> 00:29:22.980
The other thing that you want to look at
is you want to look at the process ID,

00:29:22.980 --> 00:29:25.630
and make sure that that lines
up with the crash log that

00:29:25.630 --> 00:29:26.450
you were looking at before.

00:29:26.490 --> 00:29:29.500
So sure enough,
we've got the right process ID.

00:29:29.570 --> 00:29:30.860
So we're in 16.0.0.9.

00:29:30.860 --> 00:29:32.440
We're good.

00:29:32.510 --> 00:29:35.000
The last thing you need to
look at-- I've got this in red

00:29:35.000 --> 00:29:38.320
here-- is which thread crashed,
because that's where the real meat

00:29:38.320 --> 00:29:39.660
of the problem is going to be.

00:29:39.720 --> 00:29:41.060
That's thread 14.

00:29:41.150 --> 00:29:44.600
So three important bits-- the date,
the process ID, and the crashing thread.

00:29:44.680 --> 00:29:47.250
There's other important bits there,
but those are ones that I find

00:29:47.250 --> 00:29:48.560
to be particularly useful.

00:29:48.700 --> 00:29:50.480
So there was a bunch of threads.

00:29:50.590 --> 00:29:51.220
We want the 14th thread.

00:29:51.220 --> 00:29:52.900
So let's zoom in on that.

00:29:53.000 --> 00:29:56.130
So the crash thread, again,
is always interesting.

00:29:56.330 --> 00:29:58.950
Now I'm gonna color this
for you to make it easier.

00:29:59.280 --> 00:30:02.360
Again, you sort of see that signpost
that I told you about before.

00:30:02.530 --> 00:30:05.120
So this was the last thing
that we saw leaving Java,

00:30:05.400 --> 00:30:08.900
and it's sort of halfway
through the native stack.

00:30:09.100 --> 00:30:10.400
So why is that?

00:30:10.670 --> 00:30:12.910
Well, every, you know,
I've sort of color-coded

00:30:12.910 --> 00:30:13.890
everything for you.

00:30:14.050 --> 00:30:18.190
Everything below, in blue, is, uh,
client.dialib.

00:30:18.490 --> 00:30:23.860
That's what the native side of
Java-- running Java looks like,

00:30:23.920 --> 00:30:25.560
and you can pretty much ignore that.

00:30:25.950 --> 00:30:28.690
That's just Java doing
its job running Java code.

00:30:28.980 --> 00:30:32.780
Everything above your JNI call
is sort of where things went

00:30:32.780 --> 00:30:36.500
wrong on the native side,
servicing whatever JNI request you have.

00:30:36.500 --> 00:30:38.600
And you might actually see,
if you have some really

00:30:38.700 --> 00:30:42.370
complicated situation,
where you go in and out of, um,

00:30:42.720 --> 00:30:44.680
of Java and native code.

00:30:44.720 --> 00:30:48.810
So look for things like whether you're
in client.dialib or whether you're in,

00:30:48.930 --> 00:30:50.910
say, AWT like we are here.

00:30:51.220 --> 00:30:55.020
So let's again take out and show
a few bits to sort of give a few

00:30:55.020 --> 00:30:57.490
more clues about what's going
on with this particular crash.

00:30:57.570 --> 00:31:01.640
You can see that after we got our
request to blit a bunch of stuff,

00:31:01.670 --> 00:31:06.140
we ended up in some code saying, OK,
we're in a drawable context.

00:31:06.140 --> 00:31:07.660
Let's finish it up.

00:31:07.680 --> 00:31:08.150
OK.

00:31:08.620 --> 00:31:10.630
Now we're going to call a free handler.

00:31:10.760 --> 00:31:14.410
So now we're starting to get all
the clues about what's going on.

00:31:14.650 --> 00:31:19.770
So this is really characteristic of what
happens when you're over on the side of

00:31:19.780 --> 00:31:23.440
the world that's not garbage collected,
when you're doing things like

00:31:23.440 --> 00:31:25.530
managing memory yourself.

00:31:25.800 --> 00:31:29.720
So what's going on here is
we've over-freed something.

00:31:29.720 --> 00:31:33.910
We've gotten rid of it and disposed of
it before we were quite done using it.

00:31:35.010 --> 00:31:37.030
So while I've got you
in the native crash,

00:31:37.030 --> 00:31:38.990
I want to show you a few more things.

00:31:39.110 --> 00:31:41.380
Thread 0 is the AppKit thread.

00:31:41.740 --> 00:31:45.760
And the AppKit thread is where
a lot of cool stuff happens.

00:31:45.760 --> 00:31:49.490
It's where Cocoa sort of
does all of its grinding.

00:31:50.060 --> 00:31:53.140
I wanted to show you what sort of
a happy AppKit thread looks like.

00:31:53.270 --> 00:31:55.420
So take a sort of closer
look at the screen here.

00:31:55.420 --> 00:31:56.690
There's a couple of things.

00:31:56.770 --> 00:31:57.900
You'll know that you're
on the AppKit thread.

00:31:57.900 --> 00:32:00.920
You'll see something like AWT starter,
start AWT,

00:32:00.920 --> 00:32:04.610
if that's sort of a sign that you're
looking at the correct thread.

00:32:04.620 --> 00:32:08.270
The other thing is,
this is sort of a happy thread because

00:32:08.270 --> 00:32:10.660
it's sitting in Mach message trap plus 7.

00:32:10.660 --> 00:32:12.660
So it's just waiting for
something interesting to happen.

00:32:12.660 --> 00:32:14.190
So nothing is going wrong.

00:32:14.200 --> 00:32:17.220
But I wanted you guys to see,
it's good to know what waiting

00:32:17.220 --> 00:32:19.680
threads look like so you
know what you can ignore.

00:32:20.000 --> 00:32:24.280
So semaphore.wait,
that's a waiting thread.

00:32:24.280 --> 00:32:25.800
Mach message trap,
that's a waiting thread.

00:32:25.800 --> 00:32:27.580
These are things that you
can sort of safely ignore.

00:32:27.580 --> 00:32:29.500
So now that I've told
you what you can ignore,

00:32:29.500 --> 00:32:31.080
let's go back to our big picture.

00:32:31.080 --> 00:32:33.120
There's the native side
you need to know about,

00:32:33.120 --> 00:32:35.370
the Java side, which is where you usually
start your analysis.

00:32:35.380 --> 00:32:38.020
There's many threads
that cross across them.

00:32:38.060 --> 00:32:40.910
And these are threads that you
need to sort of learn about to do

00:32:40.940 --> 00:32:42.560
sort of black belt Java debugging.

00:32:42.560 --> 00:32:46.430
The AppKit thread is where,
as I said earlier,

00:32:46.440 --> 00:32:47.640
Cocoa does a lot of its work.

00:32:47.720 --> 00:32:50.180
So this is a thread that you'll
look at quite frequently,

00:32:50.180 --> 00:32:51.230
a thread that you need to know about.

00:32:51.240 --> 00:32:54.300
The event dispatch thread is
where Java does all of its work.

00:32:54.320 --> 00:32:56.570
So, not all, but much of its work.

00:32:56.580 --> 00:32:59.840
And so that's another thread that you
need to sort of learn about a bit.

00:32:59.880 --> 00:33:02.370
We actually, in this example,
were in some other

00:33:02.380 --> 00:33:03.690
thread when we crashed.

00:33:03.780 --> 00:33:06.180
We're thread 14, just a worker thread
that I'd spawned off.

00:33:07.620 --> 00:33:10.730
So let's just all tie it together,
so we can have some closure on

00:33:10.820 --> 00:33:12.460
this one bug all the way through.

00:33:12.560 --> 00:33:15.180
We were in my test,
closed window while drawing.

00:33:15.200 --> 00:33:18.100
We called fill rec
somewhere partway through.

00:33:18.110 --> 00:33:22.350
You could see further down on the
Java side that we made a JNI call.

00:33:22.530 --> 00:33:26.100
Took us across the JNI boundary
to the native side of things.

00:33:26.210 --> 00:33:27.690
We did some more native stuff.

00:33:27.840 --> 00:33:29.020
And then we crashed.

00:33:29.020 --> 00:33:30.010
OK, great.

00:33:30.180 --> 00:33:31.680
So that's one bug all the way through.

00:33:31.680 --> 00:33:34.520
Except, well, whose bug is it?

00:33:34.650 --> 00:33:38.480
Who are you going to
send Bruce Lee after?

00:33:38.520 --> 00:33:40.960
Well, in this particular case,
it's Apple.

00:33:40.960 --> 00:33:43.640
If you have a crash,
and it's pure Java code,

00:33:43.640 --> 00:33:46.870
and you know it's pure Java code,
it may not be our bug.

00:33:46.930 --> 00:33:47.420
Wow.

00:33:47.490 --> 00:33:49.770
It may not be our bug,
but it's our problem.

00:33:50.050 --> 00:33:54.160
So send it to us, bugreporter.apple.com.

00:33:54.170 --> 00:33:55.560
I've got this wrong.

00:33:55.660 --> 00:33:57.660
Bugreporter.apple.com.

00:33:57.910 --> 00:34:01.300
If you see some other odd behavior,
or you know that you have a JNI library

00:34:01.340 --> 00:34:04.340
that you've put in place yourself,
you need to sort of apply a

00:34:04.340 --> 00:34:05.960
little bit more brain power,
think about what's going on.

00:34:06.040 --> 00:34:06.930
So there are other considerations.

00:34:08.880 --> 00:34:10.960
One of the things that's really
good in debugging is to know

00:34:10.960 --> 00:34:12.810
that configuration matters a lot.

00:34:12.910 --> 00:34:16.700
So it's good to have various
versions of Java around.

00:34:16.700 --> 00:34:18.260
And of course,
we make that easy for you by

00:34:18.260 --> 00:34:20.140
deploying various versions of Java.

00:34:20.260 --> 00:34:22.740
But also,
if you can get access to a Linux box or a

00:34:22.740 --> 00:34:28.520
Windows box and see if it happens there,
see if the bug happens in Swing

00:34:28.620 --> 00:34:34.140
and in both looks and feels,
Metal and Aqua.

00:34:34.190 --> 00:34:37.530
The other thing that you should know
when you're doing general analysis

00:34:37.600 --> 00:34:40.280
is that Java Dev is a really,
really good resource.

00:34:40.300 --> 00:34:43.070
How many folks here are on Java Dev?

00:34:43.180 --> 00:34:45.710
I probably know some of
you from not your faces,

00:34:45.710 --> 00:34:46.750
but your emails.

00:34:46.830 --> 00:34:50.770
Java Dev is really technical,
and it's really friendly.

00:34:51.130 --> 00:34:56.760
So I encourage everyone to sign up
and become part of this mailing list.

00:34:57.760 --> 00:35:00.440
So that's one bug all the way through.

00:35:00.440 --> 00:35:02.430
We saw the Java side,
we saw the native side,

00:35:02.430 --> 00:35:06.400
we saw basically that you need to
send it to Apple or think about it.

00:35:07.020 --> 00:35:09.960
Let's talk a little bit about
how I learned about things,

00:35:09.960 --> 00:35:11.780
because I think it's a good
way to learn about things.

00:35:11.870 --> 00:35:14.250
Let's take things apart.

00:35:15.920 --> 00:35:18.620
Um,
hopefully you'll--won't be the villain.

00:35:18.840 --> 00:35:22.230
You'll be the good guy,
but we'll be deft about

00:35:22.230 --> 00:35:23.800
taking things apart.

00:35:23.800 --> 00:35:26.800
So for me, that--I mean,
that's how I learned.

00:35:26.800 --> 00:35:30.800
So, the other thing is,
sometimes you use other people's bits,

00:35:30.810 --> 00:35:34.770
and you sort of need to know how to
get at all the bits of those bits.

00:35:34.830 --> 00:35:37.210
And I have one--one sort of plug here,
you know,

00:35:37.220 --> 00:35:38.800
use your powers for good and not evil.

00:35:38.800 --> 00:35:42.790
Everything I'm about to tell you can
be used to steal other people's code.

00:35:42.800 --> 00:35:44.800
Don't do that.

00:35:44.800 --> 00:35:45.800
Um, but let's get right into it.

00:35:45.820 --> 00:35:48.800
There are four ways to
deploy Java on the Macintosh,

00:35:48.800 --> 00:35:51.800
and we're gonna take apart
all four of those ways.

00:35:51.870 --> 00:35:54.800
We're gonna take apart--we're
gonna start with jar files.

00:35:54.800 --> 00:35:59.800
Jar files are sort of the--the, um,
base case of taking things apart.

00:35:59.800 --> 00:36:01.750
Uh, so let's talk about how
you pull apart a jar file.

00:36:01.840 --> 00:36:03.800
You're pretty much already done
once you have the jar file.

00:36:03.800 --> 00:36:07.090
Um, there are--there's a command
up here on the screen that you

00:36:07.220 --> 00:36:11.890
should sort of commit to memory,
jar-xvf, and then whatever your

00:36:11.890 --> 00:36:14.800
jar file's name is,
.jar, will completely unpackage, uh,

00:36:14.800 --> 00:36:15.800
a jar file.

00:36:15.800 --> 00:36:17.770
So I'm gonna take a jar file for you.

00:36:17.820 --> 00:36:20.190
And the reason that's important
to know about this is many,

00:36:20.260 --> 00:36:23.010
many people, including Apple,
we distribute sample code, uh,

00:36:23.110 --> 00:36:23.800
as jar files.

00:36:23.800 --> 00:36:27.800
So if somebody gives you a sample code,
you know, often the class files,

00:36:27.800 --> 00:36:31.690
the executable stuff, the manifest,
and actually the source

00:36:31.860 --> 00:36:32.770
will be right there.

00:36:32.870 --> 00:36:34.790
Um, so it's good to know
how to pull this apart.

00:36:34.800 --> 00:36:37.800
And then if you want to
run it on the command line,

00:36:37.920 --> 00:36:40.800
the main class is tucked
away in the manifest,

00:36:40.870 --> 00:36:43.800
which I've got up on the
screen here how to get into.

00:36:43.900 --> 00:36:45.800
So if you just cat that,
you can find the main class,

00:36:45.800 --> 00:36:48.370
and then you can say, "Java,
maybe xrun shark," an important

00:36:48.440 --> 00:36:50.800
command to be able to do,
and then the main class,

00:36:50.800 --> 00:36:52.800
and then you're done.

00:36:54.070 --> 00:36:56.910
So applets are a little
bit trickier to take apart,

00:36:57.040 --> 00:37:00.740
especially in these Web 2.0 days,
when more and more people are

00:37:00.840 --> 00:37:04.850
deploying not straight HTML.

00:37:04.920 --> 00:37:06.850
The first time I had to take
an applet apart was actually,

00:37:06.850 --> 00:37:08.460
I was doing a tutorial.

00:37:08.460 --> 00:37:11.360
I was walking through a tutorial,
and the person had his applet

00:37:11.360 --> 00:37:14.180
up animating-- I forget,
it was spinning a square or something

00:37:14.180 --> 00:37:17.750
like that-- and he compiled this code.

00:37:17.870 --> 00:37:19.360
Run it, and I compiled the code.

00:37:19.380 --> 00:37:20.800
It's a class not found.

00:37:20.850 --> 00:37:26.180
And what happened is the person who
was doing the three-page tutorial had

00:37:26.180 --> 00:37:30.900
given me his source code for what he
thought of was the important class,

00:37:30.900 --> 00:37:32.950
and there was two other
files tucked away,

00:37:32.950 --> 00:37:35.190
like a quit handler or
something like that.

00:37:35.280 --> 00:37:39.200
So it's important to be
able to get at these bits.

00:37:39.280 --> 00:37:41.140
Curl is a good command to know about.

00:37:41.320 --> 00:37:42.490
So take a look up at the screen here.

00:37:42.580 --> 00:37:48.370
Curl is CURL,
is another way of saying it.

00:37:48.420 --> 00:37:49.760
So you can look at URLs.

00:37:49.800 --> 00:37:53.000
Dash O is where it's going to
stick the bits when it's done.

00:37:53.060 --> 00:37:56.490
It took me a while to find something
that wasn't actually a website.

00:37:56.760 --> 00:38:00.880
So xyzcba.org doesn't actually exist,
one of the few websites

00:38:00.880 --> 00:38:01.980
that's not taken yet.

00:38:02.030 --> 00:38:05.910
And this is how you would pull down
the HTML that was displayed at this

00:38:05.940 --> 00:38:08.930
location so you could work with it
in an editor or something like that.

00:38:09.010 --> 00:38:10.830
And then you sort of have to
apply your brain a little bit.

00:38:10.920 --> 00:38:12.380
You'll have to look for the applet tag.

00:38:12.410 --> 00:38:14.570
The applet tag tells you pretty
much everything that you need

00:38:14.660 --> 00:38:17.560
to know to get back to the thing
that we talked about a slide ago,

00:38:17.560 --> 00:38:19.120
how to get to the jar file.

00:38:19.260 --> 00:38:23.540
So in this case, you'd say, oh, OK,
there's where the applet is,

00:38:23.660 --> 00:38:27.700
there's the archive,
all the important information.

00:38:27.760 --> 00:38:29.680
And then you go and use
curl again to get the jar.

00:38:29.900 --> 00:38:32.060
And then once you've done that,
you've sort of got all

00:38:32.100 --> 00:38:33.140
the bits in your pocket.

00:38:33.140 --> 00:38:36.200
So that's how to pick apart an applet.

00:38:36.210 --> 00:38:40.180
Now, most of you folks are,
at least in some sense, Mac developers.

00:38:40.300 --> 00:38:43.930
So the best way to deploy a
Java application on the Mac is

00:38:44.000 --> 00:38:45.640
to make a bundled application.

00:38:45.820 --> 00:38:50.230
And I didn't really understand
application bundles until

00:38:50.230 --> 00:38:54.100
I started pulling them apart,
trying to find the Java bits inside.

00:38:54.100 --> 00:38:56.560
And you have to dig for a
little bit to get there.

00:38:56.560 --> 00:39:01.550
Every application on the Mac is
really just a folder that the finder

00:39:01.550 --> 00:39:04.400
knows to treat as a single entity.

00:39:04.500 --> 00:39:09.980
So you can actually go in there
and just look at it with LS or CD.

00:39:10.840 --> 00:39:11.820
There's a contents folder.

00:39:11.820 --> 00:39:13.620
And there's two important
things in the contents folder

00:39:13.620 --> 00:39:14.620
that you need to know about.

00:39:14.740 --> 00:39:16.260
One is the Info.plist.

00:39:16.280 --> 00:39:19.110
And we talk about the Info.plist in
our release notes and things like that.

00:39:19.240 --> 00:39:22.900
This is a place where lots of
different Java options happen.

00:39:22.900 --> 00:39:26.120
And I just wanted to draw your attention
to it while I had it on the screen.

00:39:26.120 --> 00:39:28.660
Everyone should know that
the Info.plist is down

00:39:28.660 --> 00:39:30.240
inside the contents area.

00:39:30.240 --> 00:39:33.170
And the other thing is if you
keep on digging resources in Java,

00:39:33.190 --> 00:39:37.680
that's where you actually find the
jar file that you have deployed.

00:39:37.960 --> 00:39:40.940
So if you're like me and you like to
work on the command line and you want

00:39:40.940 --> 00:39:45.020
to run your thing from the command line,
that's where you find the bits.

00:39:45.140 --> 00:39:49.440
So bundling applications is a big deal.

00:39:49.580 --> 00:39:52.400
And so there's a lot of
documentation available so

00:39:52.400 --> 00:39:54.980
you you can go dig into that.

00:39:57.480 --> 00:40:01.460
Java Web Start is the best way to
deploy your applications cross-platform.

00:40:01.600 --> 00:40:05.940
And one of the reasons that I talked
about applets before was because applets

00:40:05.940 --> 00:40:09.400
and Java Web Start have a lot in common.

00:40:09.520 --> 00:40:13.900
So when you want to pick
apart Java Web Start,

00:40:13.900 --> 00:40:17.320
what you're looking for is the JNLP file,
which is just basically an XML file,

00:40:17.430 --> 00:40:22.050
really,
that specifies sort of all the bits that

00:40:22.070 --> 00:40:24.710
you might need to run Java executable.

00:40:24.910 --> 00:40:29.860
So the three sort of important tags that
you want to look for is the home page,

00:40:29.910 --> 00:40:32.380
like where all the bits live,
so that you could use, say,

00:40:32.450 --> 00:40:37.040
curl to grab them,
the jar file that you're looking for,

00:40:37.100 --> 00:40:38.680
and finally, you're going to want
to find the main class.

00:40:38.800 --> 00:40:42.200
So look for the word "main." And those
are sort of the three bits that you need

00:40:42.200 --> 00:40:44.300
to pull apart a Web Start application.

00:40:44.440 --> 00:40:47.870
And sort of the reason to know this
is they're also the three bits that

00:40:47.870 --> 00:40:50.800
you need to know to put in there
to deploy a Web Start application,

00:40:50.800 --> 00:40:54.300
so sort of turning around,
deploying on the Mac.

00:40:54.820 --> 00:40:56.470
So, whew.

00:40:58.500 --> 00:41:11.100
[Transcript missing]

00:41:12.850 --> 00:41:14.260
OK, Mikey.

00:41:14.340 --> 00:41:17.160
So my machine,
it's back up and running again.

00:41:17.160 --> 00:41:20.510
And it's back to the state it was
before the terrible things happened.

00:41:20.590 --> 00:41:22.700
So let me tell you a little
bit about what happened off

00:41:22.770 --> 00:41:24.780
camera while Mikey was talking.

00:41:24.780 --> 00:41:27.850
So while you were still showing
your disk partitioning scheme,

00:41:27.860 --> 00:41:31.830
I had rebooted into my admin
partition and restored my system,

00:41:31.830 --> 00:41:33.640
which I'll talk about in a sec.

00:41:33.640 --> 00:41:36.590
And I believe I had finished
restoring about the time you had hand

00:41:36.590 --> 00:41:41.880
grenades up on the screen and were
talking about the black box tools.

00:41:41.890 --> 00:41:42.830
So I had restored it.

00:41:42.840 --> 00:41:46.810
And then I rebooted into the development
partition and made sure everything

00:41:46.810 --> 00:41:49.080
was the way I wanted it to be.

00:41:49.080 --> 00:41:53.800
And you were talking about threads
and volatility in Java at that point.

00:41:53.800 --> 00:41:56.120
And then I got tired and
I had to go sit down.

00:41:56.340 --> 00:41:58.420
So that's what happened in a nutshell.

00:41:58.420 --> 00:42:02.190
The key point that I wanted to show
you is sort of my recovery strategy,

00:42:02.190 --> 00:42:05.080
which is slightly different from
Mikey's multiple partitions.

00:42:05.080 --> 00:42:09.600
I don't have as much disk space on my
portable to have a ton of partitions.

00:42:09.660 --> 00:42:13.500
So what I do is I freeze-dry
partitions the way I want them to be.

00:42:13.560 --> 00:42:18.780
So on this machine, on my data partition,
I have an image that I call Tiger Demo 4.

00:42:18.780 --> 00:42:21.140
This is a freeze-dried
image of my demo machine,

00:42:21.140 --> 00:42:23.920
my development partition,
the way I wanted it to be.

00:42:23.920 --> 00:42:26.530
And I use Disk Utility to restore it.

00:42:26.680 --> 00:42:28.680
And I'm just going to go
through the motions here.

00:42:28.680 --> 00:42:30.540
I'm not going to re-restore it.

00:42:30.550 --> 00:42:33.350
You drag your image into Disk Utility.

00:42:33.640 --> 00:42:36.400
Click on it, you choose Restore.

00:42:36.420 --> 00:42:38.560
You tell it which image
you want to restore.

00:42:38.640 --> 00:42:40.970
You tell it which partition
you want to restore to.

00:42:41.180 --> 00:42:42.320
And then you click Restore.

00:42:42.320 --> 00:42:45.180
And that's what took a long time,
which is why we did it off camera.

00:42:45.180 --> 00:42:48.640
After that,
I now have a development partition that

00:42:48.660 --> 00:42:50.640
is back exactly the way I wanted it.

00:42:50.650 --> 00:42:53.300
The great thing about
disk images is you can,

00:42:53.300 --> 00:42:57.990
as opposed to using the install DVD,
is with disk images you can set

00:42:58.010 --> 00:43:00.400
up your users the way you want,
all your system preferences

00:43:00.400 --> 00:43:02.350
the way you want,
networking, everything,

00:43:02.470 --> 00:43:03.940
and then just freeze it.

00:43:03.940 --> 00:43:06.760
Then you can do risky things,
and then you can bring it back to life,

00:43:06.760 --> 00:43:08.080
which is what I did.

00:43:08.080 --> 00:43:11.940
And the details on how do
you create the disk image,

00:43:11.940 --> 00:43:13.520
they're just in Help for Disk Utility.

00:43:13.620 --> 00:43:16.680
If you go to Disk Utility Help,
type Restore Image,

00:43:16.680 --> 00:43:20.680
you'll find the page that
tells you all the steps to

00:43:20.680 --> 00:43:21.670
do to create a restore image.

00:43:21.800 --> 00:43:23.080
It's very simple.

00:43:23.080 --> 00:43:25.740
But don't forget step eight here,
because it's non-intuitive.

00:43:25.740 --> 00:43:29.800
The step eight says choose images,
scan image for restore.

00:43:29.800 --> 00:43:30.660
That's right here.

00:43:30.660 --> 00:43:32.190
Images, scan image for restore.

00:43:32.200 --> 00:43:32.620
There we go.

00:43:32.680 --> 00:43:35.460
That was the one key thing
that I thought was not obvious.

00:43:35.460 --> 00:43:36.810
Everything else is
pretty straightforward.

00:43:36.820 --> 00:43:40.240
You can create images of any partition,
store them on FireWire drives,

00:43:40.240 --> 00:43:42.880
store them on servers, and get to them.

00:43:42.890 --> 00:43:45.690
And restore your machine,
and then your machine will be back and

00:43:45.690 --> 00:43:47.800
ready to do dangerous things again.

00:43:47.840 --> 00:43:53.060
Things like handing it off to
a summer intern to do WWDC,

00:43:53.120 --> 00:43:55.580
hands-on labs.

00:43:55.580 --> 00:43:57.530
Oh, wait, one more thing.

00:43:57.600 --> 00:43:59.770
Let me throw this thing away.

00:44:02.060 --> 00:44:04.800
It's gone.

00:44:04.860 --> 00:44:05.360
All right.

00:44:05.560 --> 00:44:07.050
Thank you.

00:44:15.730 --> 00:44:17.230
So this is Brett Groshong.

00:44:17.430 --> 00:44:21.930
He's an intern with us at Apple Computer.

00:44:22.330 --> 00:44:24.790
Before we go off into
the hands-on section,

00:44:24.820 --> 00:44:26.770
I wanted to actually tell
you some of the really,

00:44:26.770 --> 00:44:29.200
really cruel things that
we did to Barry's computer.

00:44:29.390 --> 00:44:36.200
We actually went into his systems folder
and we removed all the frameworks.

00:44:36.200 --> 00:44:37.380
We took them all away.

00:44:37.380 --> 00:44:40.280
And I think we started
killing processes after that.

00:44:40.280 --> 00:44:43.700
So it was pretty severe.

00:44:44.110 --> 00:44:46.860
So let's talk about Shark,
because Shark is like a really,

00:44:46.860 --> 00:44:47.970
really great tool.

00:44:48.060 --> 00:44:48.320
Dr.

00:44:48.320 --> 00:44:49.340
Evil would be proud.

00:44:49.420 --> 00:44:56.410
Shark is super powerful,
and you can do amazing things.

00:44:58.430 --> 00:45:01.360
So I wanted to throw up one
more time the required hands-on

00:45:01.360 --> 00:45:02.780
material for this section.

00:45:02.830 --> 00:45:05.990
I really think that everyone in
this room who's got a portable

00:45:06.470 --> 00:45:11.720
should do the Tai Chi thing and do
what I do and do what Brett does.

00:45:11.830 --> 00:45:15.190
So I'm going to give you a few
seconds to get your portals out.

00:45:15.370 --> 00:45:17.050
Wanted to give you a fair warning.

00:45:17.250 --> 00:45:20.640
In the run-throughs for this,
we actually had one or two

00:45:20.640 --> 00:45:24.140
people over the course of the
several run-throughs crash.

00:45:24.310 --> 00:45:28.040
So now is a good time to,
if you're chatting, say goodbye.

00:45:28.040 --> 00:45:29.490
I'm going to pay attention
to Mikey for a while.

00:45:29.550 --> 00:45:35.200
If you've been composing an email,
save that and quit mail.

00:45:35.200 --> 00:45:38.420
And I really do want people to take
the time to do this hands-on section,

00:45:38.440 --> 00:45:42.310
or at least pay really close attention
as we go through the hands-on section.

00:45:42.340 --> 00:45:45.860
So just to get a sense,
how many people are going

00:45:45.860 --> 00:45:48.560
to work on Shark with me?

00:45:48.560 --> 00:45:49.440
Come on, one or two more.

00:45:49.440 --> 00:45:49.960
All right.

00:45:50.060 --> 00:45:50.910
That's good enough for me.

00:45:51.020 --> 00:45:52.990
This is one of my goals.

00:45:53.220 --> 00:45:57.110
Let's go to B.

00:45:58.180 --> 00:46:04.690
Okay, so you should all have some version
of the Chud tools and you should have

00:46:04.690 --> 00:46:08.450
a sort of deeply flawed application
that Brett and I have put together

00:46:08.810 --> 00:46:10.760
for sort of showing performance.

00:46:10.760 --> 00:46:12.320
So we're going to do a few steps.

00:46:12.320 --> 00:46:17.400
We're going to launch Shark which will
sort of satisfy one of my burning desires

00:46:17.400 --> 00:46:21.740
which is to get more people to run Shark,
and then we're going to go into

00:46:21.740 --> 00:46:26.460
the block animation folder and
we're going to do this old school.

00:46:26.460 --> 00:46:30.030
We're going to bring up the terminal
and compile it there and run it there,

00:46:30.030 --> 00:46:32.980
and then we're going to look
at it in Shark unsuccessfully,

00:46:33.180 --> 00:46:35.590
and then we're going to
look at it successfully,

00:46:35.610 --> 00:46:37.770
and then we're going to
sort of carry on from there.

00:46:38.010 --> 00:46:39.380
So let's get started.

00:46:39.380 --> 00:46:43.690
So the first thing that I want you
to do is go into slash developer

00:46:43.690 --> 00:46:45.960
or so go to your root volume and

00:46:46.380 --> 00:46:49.200
Go into /developer, applications.

00:46:49.350 --> 00:46:55.080
Don't do this as fast as I'm saying.

00:46:55.080 --> 00:47:01.590
Applications, performance tools, Shark.

00:47:01.590 --> 00:47:01.590
So, applications, performance tools.

00:47:01.590 --> 00:47:01.590
And everyone go ahead and launch Shark.

00:47:03.100 --> 00:47:06.400
Okay, who's got Shark up and running?

00:47:06.400 --> 00:47:07.600
I'm going to wait for
a few more hands here.

00:47:07.600 --> 00:47:11.800
I really want everyone to run
Shark because it's such a great tool.

00:47:13.060 --> 00:47:15.550
Okay, so, Shark is running.

00:47:15.750 --> 00:47:18.600
So now--forget about Shark,
because there's other not so

00:47:18.600 --> 00:47:21.240
great things to do--we're gonna
do the block animation demo.

00:47:21.380 --> 00:47:26.860
So if you guys have downloaded this in,
like, DMG form,

00:47:26.860 --> 00:47:29.050
you can't edit a mounted DMG.

00:47:29.060 --> 00:47:32.140
So make sure that you drag that
into a folder or something like that

00:47:32.210 --> 00:47:33.940
so that you can actually edit it.

00:47:34.100 --> 00:47:36.640
So--and now,
I want everyone to go to the terminal.

00:47:36.830 --> 00:47:38.600
So if you're Black Belt,
you can do this in, like,

00:47:38.660 --> 00:47:40.800
four keystrokes,
but we're gonna do it the long way.

00:47:40.800 --> 00:47:51.200
We're gonna actually go
/applications/utilities/ terminal for T.

00:47:54.600 --> 00:47:56.840
Launch the terminal.

00:47:56.900 --> 00:47:59.600
OK, how many folks are with
me in the terminal now?

00:47:59.630 --> 00:48:00.170
Cool.

00:48:00.350 --> 00:48:01.180
This is great.

00:48:01.230 --> 00:48:02.030
I haven't lost anyone.

00:48:02.080 --> 00:48:04.090
OK, so now cd, change directory.

00:48:04.250 --> 00:48:06.090
So we're going to make the
working directory be the block

00:48:06.220 --> 00:48:07.900
animation demo working directory.

00:48:07.900 --> 00:48:11.630
So cd, and then you can either drag
block animation into the terminal,

00:48:11.640 --> 00:48:14.700
or Brett's a good typist,
so he's going to type the whole thing.

00:48:14.700 --> 00:48:15.200
No, he's not.

00:48:15.200 --> 00:48:16.070
He's going to do that.

00:48:16.080 --> 00:48:18.910
Anyway, so I want you to change
directory to block animation.

00:48:18.980 --> 00:48:20.410
Go ahead and hit return, Brett.

00:48:20.490 --> 00:48:22.770
Now you don't have to do this ls thing,
but I'm going to make sure

00:48:22.770 --> 00:48:23.520
that he's the right place.

00:48:23.600 --> 00:48:25.360
I'll type ls, Brett.

00:48:25.380 --> 00:48:28.340
And sure enough, there's my Java file.

00:48:28.420 --> 00:48:31.260
Now I don't know which version
of Java you guys are running,

00:48:31.360 --> 00:48:33.510
so I want to recompile this,
and I want everyone else

00:48:33.610 --> 00:48:34.360
to recompile it too.

00:48:34.380 --> 00:48:38.820
So now the way you compile in
the terminal is to say javac.

00:48:38.890 --> 00:48:47.970
So javac space capital block
capital animation dot java.

00:48:49.200 --> 00:48:52.490
and Richard Okay,
so how many people are now

00:48:52.490 --> 00:48:58.300
compiling my interesting but
deeply flawed animation demo?

00:48:58.300 --> 00:49:00.130
Okay, so not everyone yet,
so I'm going to wait a

00:49:00.140 --> 00:49:01.220
little bit longer here.

00:49:01.220 --> 00:49:02.960
Compiling, compiling, compiling.

00:49:03.420 --> 00:49:05.420
Okay, good enough.

00:49:05.420 --> 00:49:06.480
So let's run it.

00:49:06.550 --> 00:49:13.340
Java, space, capital block,
capital animation, no Java now,

00:49:13.340 --> 00:49:16.590
because--and it should run.

00:49:21.350 --> 00:49:26.860
Okay, how many of you see something
similar to what's up on the screen?

00:49:27.130 --> 00:49:29.990
I'm going to wait a little bit
longer for people to catch up,

00:49:29.990 --> 00:49:32.090
because it's important
to be able to see this.

00:49:32.170 --> 00:49:32.650
Cool.

00:49:32.950 --> 00:49:35.130
So I'm going at the right speed.

00:49:35.320 --> 00:49:37.180
So let me talk about
what's going on here.

00:49:37.260 --> 00:49:40.480
We have a big J frame,
and then we have lots and lots

00:49:40.480 --> 00:49:42.120
and lots of panels inside that.

00:49:42.360 --> 00:49:45.460
And every panel has a timer
task associated with it.

00:49:45.480 --> 00:49:51.700
And every second, plus a little bit,
the timer task fires and says,

00:49:51.700 --> 00:49:52.860
repaint me.

00:49:52.880 --> 00:49:55.020
And repaint me with a different color.

00:49:55.020 --> 00:49:57.020
And so it kind of grinds away.

00:49:57.210 --> 00:49:59.580
So let's take a look at this with Shark,
and we'll bump into the first

00:49:59.810 --> 00:50:03.250
problem that everyone who tries
to do a Java profile bumps into.

00:50:03.330 --> 00:50:05.430
So let's bring Shark forward, everybody.

00:50:05.590 --> 00:50:07.840
So go down into your
dock and click on Shark.

00:50:07.930 --> 00:50:10.270
And what we want to do is a
Java profile of this thing.

00:50:10.280 --> 00:50:11.840
So let's go down to the ninth item.

00:50:11.960 --> 00:50:13.960
He's going to hold that
pop-up for a long time,

00:50:13.960 --> 00:50:18.500
but you guys can just go down to
Java Time Profile and select that.

00:50:18.880 --> 00:50:19.840
So go ahead.

00:50:20.130 --> 00:50:21.740
So Java Time Profile.

00:50:21.750 --> 00:50:24.140
Now,
how many people see nothing available?

00:50:27.740 --> 00:50:30.340
So this is the first problem
that everybody who bumps

00:50:30.340 --> 00:50:33.470
into a problem bumps into,
and I wanted to actually do this

00:50:33.480 --> 00:50:37.100
in the hands-on to drive home what
you have to do to fix this problem.

00:50:37.100 --> 00:50:40.600
So what you have to do to fix
this problem is type x run shark.

00:50:40.600 --> 00:50:43.600
It's a command that you need to
give Java to give it a few hints.

00:50:43.790 --> 00:50:48.720
Actually, it turns on some JVM PI bits
that Shark can use to

00:50:48.720 --> 00:50:50.050
find out what's going on.

00:50:50.150 --> 00:50:54.860
So let's go back to the application,
click on it, and just quit.

00:50:56.860 --> 00:50:59.500
Okay,
so how many have had the thing go by?

00:50:59.550 --> 00:51:00.300
Great.

00:51:00.420 --> 00:51:05.930
Now, I want you to run it again.

00:51:06.000 --> 00:51:10.360
javaspace-X-run-shark.

00:51:11.000 --> 00:51:13.590
I'll let you look at what Brett's
got up on stage here so that you

00:51:13.640 --> 00:51:16.180
can get it typed in correctly.

00:51:19.040 --> 00:51:21.740
And what you will see is
Shark for Java enabled.

00:51:21.840 --> 00:51:23.740
So this is your cue that you've
done everything correctly.

00:51:23.740 --> 00:51:26.820
So how many people have now
got Shark for Java enabled?

00:51:26.990 --> 00:51:27.210
OK.

00:51:27.530 --> 00:51:33.740
Anybody who's actually not
doing this on the portable,

00:51:33.740 --> 00:51:33.740
sort of scoot over to somebody else,
because this is so cool.

00:51:35.060 --> 00:51:37.010
Okay, good.

00:51:37.340 --> 00:51:42.510
So this is the other thing,
which is I think that the, so let's,

00:51:42.510 --> 00:51:42.510
let's,

00:51:43.980 --> 00:51:46.800
Well, I talk about crashing things.

00:51:46.910 --> 00:51:50.810
You try to put this in a bigger font in
the terminal so that they can see it.

00:51:50.900 --> 00:51:52.900
So bugreporter.apple.com.

00:51:52.900 --> 00:51:54.890
Like I said, sharks have teeth.

00:51:54.900 --> 00:51:57.900
You know, sometimes we have definitely
seen people crashing this,

00:51:58.080 --> 00:52:01.900
but for the person who, like,
shouted out, um, "Take the time.

00:52:01.900 --> 00:52:05.380
"Take the time to put the crash
log "and what steps you did

00:52:05.490 --> 00:52:10.080
in Bug Reporter," because we
really--we do have a staff team on

00:52:10.300 --> 00:52:12.900
the other end of this way cool tool.

00:52:13.040 --> 00:52:16.400
Um, and they need to know that there
are Java developers out here

00:52:16.460 --> 00:52:19.780
who desperately want to profile
their applications with Shark.

00:52:19.900 --> 00:52:21.900
Um, I don't know exactly what you did.

00:52:21.900 --> 00:52:25.060
We definitely are looking for, like,
exactly the steps to

00:52:25.060 --> 00:52:26.880
reproduce this problem.

00:52:26.950 --> 00:52:28.900
We know it exists, so anyway.

00:52:28.900 --> 00:52:30.360
And now you can see...

00:52:30.900 --> 00:52:36.680
and David Koehn.

00:52:36.680 --> 00:52:36.680
So let's go back to Shark.

00:52:36.680 --> 00:52:36.680
Those of you who haven't crashed,

00:52:37.240 --> 00:52:41.740
And now you should see that Java is
available for being profiled now.

00:52:41.910 --> 00:52:45.710
So how many folks actually now have
Java as something that they can profile?

00:52:45.810 --> 00:52:46.840
Cool.

00:52:46.890 --> 00:52:50.730
Okay, so the way that the Java profile
looks is it takes time slices.

00:52:50.860 --> 00:52:52.250
Boom, boom, boom.

00:52:52.480 --> 00:52:53.580
It looks at what's going on.

00:52:53.710 --> 00:52:55.040
So I don't want you to
start doing that yet,

00:52:55.110 --> 00:52:57.740
because I want everyone who
hasn't crashed to have a really

00:52:57.740 --> 00:53:00.360
successful experience with Shark.

00:53:00.360 --> 00:53:02.640
So go to the Config menu first,
in case your machine is not as

00:53:02.760 --> 00:53:06.500
fast as Brett's fast machine,
and go to the Mini Config Editor.

00:53:06.720 --> 00:53:08.240
Ring it up.

00:53:08.260 --> 00:53:12.680
And it's set by default to take really,
really quick samples.

00:53:12.700 --> 00:53:16.350
And that can overwhelm things,
especially if you have a really badly

00:53:16.350 --> 00:53:18.690
written block animation demo running.

00:53:18.840 --> 00:53:21.650
So change that to be 50.

00:53:21.760 --> 00:53:26.790
So only take 20 samples a second.

00:53:26.790 --> 00:53:26.790
Don't take quite so many
samples every second.

00:53:27.250 --> 00:53:32.100
And now I'd like everyone to press start,
and then give yourself about a two count.

00:53:32.100 --> 00:53:35.410
One, two, three, and press stop.

00:53:35.730 --> 00:53:41.580
Okay, everyone who's done this has now
successfully profiled a Java application.

00:53:41.910 --> 00:53:43.550
You should see,
everyone's going to see something

00:53:43.550 --> 00:53:45.440
a little bit different because,
you know,

00:53:45.550 --> 00:53:48.230
we're all on different machines with
different timings and stuff like that.

00:53:48.320 --> 00:53:53.800
But now you can see where my
code is spending all of its time.

00:53:53.920 --> 00:53:59.600
So how many folks see something
sort of like what we've got here?

00:53:59.740 --> 00:54:03.320
Now I don't think we
can fix the font here,

00:54:03.320 --> 00:54:05.730
but scooch over to somebody else's
machine and look what's going on,

00:54:05.730 --> 00:54:05.730
or look up close.

00:54:05.730 --> 00:54:05.730
So,

00:54:05.980 --> 00:54:06.870
So this is really cool.

00:54:06.900 --> 00:54:09.070
This tells you where you're
spending all of your time,

00:54:09.120 --> 00:54:10.400
while your application is going.

00:54:10.400 --> 00:54:13.960
And it's as easy as this to
profile a Java application.

00:54:13.970 --> 00:54:16.510
Now, I've been using performance
tools for a really long time,

00:54:16.510 --> 00:54:19.260
because I've been programming
for a really long time.

00:54:19.260 --> 00:54:22.420
And one of the things that's great
about Shark is they've taken,

00:54:22.420 --> 00:54:26.980
iteratively,
really advice from people like me,

00:54:27.000 --> 00:54:28.840
and smarter people than me.

00:54:28.970 --> 00:54:30.820
And they've incorporated into Shark.

00:54:30.820 --> 00:54:33.950
And one of things that you'll probably
see is that you're not spending a lot

00:54:33.950 --> 00:54:40.580
of time actually in code that has the
word block animation anywhere there.

00:54:40.690 --> 00:54:44.250
So one of the cool tools that
Shark has is called a data mining tool.

00:54:44.360 --> 00:54:47.470
So what we're going to do is I want
everyone to select the first line

00:54:47.470 --> 00:54:49.920
and go to the data mining tools.

00:54:49.920 --> 00:54:51.570
And what we're going to
do is we're going to say,

00:54:51.570 --> 00:54:53.510
any time that you spend,
we're going to take the

00:54:53.510 --> 00:54:58.580
most expensive function,
and we're going to charge it upwards.

00:54:58.770 --> 00:55:01.890
So go to the first line and say,
charge library to callers.

00:55:01.980 --> 00:55:02.770
Now, he's in Java.

00:55:02.780 --> 00:55:03.140
He's in Lang.

00:55:03.140 --> 00:55:07.020
But you might be in like Apple A,
but he-- so go ahead and do this, Brett.

00:55:07.020 --> 00:55:08.480
Charge it up to callers.

00:55:08.490 --> 00:55:11.930
And what that's done is that's taken all
the time that you spent in that library,

00:55:12.040 --> 00:55:14.340
and it said,
I don't care about that library.

00:55:14.340 --> 00:55:18.660
I want you to pretend that you're in the
library that was sitting right above it.

00:55:18.680 --> 00:55:20.170
And actually,
I want everyone in the audience,

00:55:20.170 --> 00:55:22.320
and Brett here,
to do that a couple more times until

00:55:22.320 --> 00:55:27.200
we're actually up into code that
has the word block animation in it.

00:55:27.200 --> 00:55:28.180
It might take a while.

00:55:28.180 --> 00:55:33.220
If you've taken a long sample,
it might take three or four, maybe,

00:55:33.220 --> 00:55:33.690
hours.

00:55:33.760 --> 00:55:34.760
But it's a good idea to do that.

00:55:34.760 --> 00:55:35.760
And then you can see that
the code charges upwards.

00:55:35.900 --> 00:55:39.210
And everyone should keep on
charging it up until you get to

00:55:39.270 --> 00:55:41.520
a blank line in library there.

00:55:41.520 --> 00:55:44.570
And the word block animation
should be one of the symbols that

00:55:44.570 --> 00:55:46.760
you see in the symbol section.

00:55:48.950 --> 00:55:54.240
How many of you folks see a,
are already charged all the way up?

00:55:54.400 --> 00:55:57.750
How many of you folks
are still charging up?

00:55:58.100 --> 00:56:03.430
Okay, keep on charging up, because, um,
and Brett's going to

00:56:03.430 --> 00:56:03.430
do the same thing here.

00:56:04.560 --> 00:56:06.440
The reason that I'm doing this
is not just to show you that

00:56:06.440 --> 00:56:09.390
you can charge things upwards,
because I want to get to what I think

00:56:09.390 --> 00:56:15.080
is the most compelling view of-- I mean,
this is the thing that sold me on Shark.

00:56:15.130 --> 00:56:18.780
So who's--I mean,
how many people are charged

00:56:18.780 --> 00:56:20.420
all the way up here?

00:56:20.470 --> 00:56:23.110
Should I wait for anybody else?

00:56:23.110 --> 00:56:24.810
Okay, let's go on.

00:56:24.810 --> 00:56:27.790
So what I want you to do now is go to
that blank field in the library section,

00:56:27.790 --> 00:56:27.790
and I want you to
double-click right there.

00:56:30.130 --> 00:56:31.740
Okay, this is a super cool view.

00:56:32.080 --> 00:56:37.620
Like, this is showing you in your code
on a line-per-line basis where

00:56:37.620 --> 00:56:38.760
you are spending your time.

00:56:38.760 --> 00:56:40.330
This, like, totally sold me on Shark.

00:56:40.420 --> 00:56:42.220
When I saw this, I'm like, okay,
I have to have Shark.

00:56:42.330 --> 00:56:46.360
And this is just, like,
one of the many things that Shark can do.

00:56:46.360 --> 00:56:51.060
So what you're seeing now, hopefully,
if you're having a successful

00:56:51.060 --> 00:56:54.510
demo or hands-on experience,
is that you're spending pretty much

00:56:54.510 --> 00:56:58.060
all of your time calling FillRect and
a little bit of your time doing some

00:56:58.060 --> 00:56:59.360
other things like setting the color.

00:57:00.000 --> 00:57:02.620
So how many people are
still with me here?

00:57:02.760 --> 00:57:04.750
Aside from Brett, who's, of course,
still with me.

00:57:04.770 --> 00:57:05.240
Great.

00:57:05.420 --> 00:57:10.730
Okay, so now you have profiled
a Java application,

00:57:10.870 --> 00:57:13.600
and you have sort of seen where
it's spending all your time.

00:57:13.780 --> 00:57:15.580
And you should do this
to your applications,

00:57:15.580 --> 00:57:18.000
because you can learn a lot of stuff
about the real-time performance

00:57:18.000 --> 00:57:20.660
of your application this way.

00:57:20.660 --> 00:57:23.660
Okay, so I'm gonna pick up the pace a
little bit here so you guys can stop,

00:57:23.780 --> 00:57:25.990
like, trying to follow along and
sort of watch on screen.

00:57:26.000 --> 00:57:29.000
We're gonna close this profile,
and we're gonna sort of dig

00:57:29.000 --> 00:57:32.480
into some other aspects of the
runtime characteristics of this

00:57:32.480 --> 00:57:34.130
program with another profile.

00:57:34.210 --> 00:57:37.960
So, Brett, let's go to the second
profile that we like to do.

00:57:37.980 --> 00:57:42.300
We're gonna do System Trace.

00:57:42.300 --> 00:57:46.540
So we'll just start it
and stop it briefly.

00:57:47.370 --> 00:57:50.540
And the great view--this is a really
good view for getting sort of a

00:57:50.540 --> 00:57:53.150
global picture of what's going on,
not just in your system,

00:57:53.240 --> 00:57:56.140
but-- not just in your application,
but in the whole system.

00:57:56.200 --> 00:57:58.780
And this is really powerful,
'cause it's watching every single

00:57:58.800 --> 00:58:02.640
kernel call on every single thread,
um, and providing you that

00:58:02.640 --> 00:58:05.520
information in real time,
uh, sort of, uh,

00:58:05.520 --> 00:58:07.990
on a really fine-grained basis.

00:58:08.000 --> 00:58:10.440
And this will actually, um,
let us see what's--what's

00:58:10.450 --> 00:58:13.870
wrong with my--my sort of
poorly-written block animation demo.

00:58:14.000 --> 00:58:16.490
The other--I mean,
the other view was sort of interesting.

00:58:16.660 --> 00:58:19.060
It told us we were spending a
lot of time filling rectangles,

00:58:19.060 --> 00:58:20.760
but that wasn't too surprising.

00:58:20.800 --> 00:58:23.220
Um, I mean,
of course you're filling rectangles.

00:58:23.220 --> 00:58:26.060
You're doing, like,
lots of little flashy animations.

00:58:26.060 --> 00:58:28.360
So this is sort of a big summary view.

00:58:28.360 --> 00:58:32.320
We're gonna go to the
timeline trace view,

00:58:32.320 --> 00:58:37.670
'cause this is--this is the other sort
of selling people on Shark portion.

00:58:37.820 --> 00:58:42.490
So every single thread has got
every single kernel call and a stack

00:58:42.490 --> 00:58:47.220
associated with that kernel call,
like, sort of-- right there.

00:58:47.320 --> 00:58:50.040
So you really can see at a
really close level what's

00:58:50.110 --> 00:58:51.320
going on with your application.

00:58:51.430 --> 00:58:53.750
But let's go into sort of the
course level of what's going

00:58:53.780 --> 00:58:55.320
on with this application.

00:58:55.510 --> 00:58:59.140
Um, you can see that we
have a lot of threads.

00:58:59.320 --> 00:59:06.090
I mean, we have a lot of threads,
a really, really lot of threads.

00:59:06.320 --> 00:59:10.180
Um, and they're all very,
very occasionally, about once a second,

00:59:10.330 --> 00:59:11.950
making a kernel call.

00:59:12.260 --> 00:59:14.580
Now,
this is the wrong way to do animation,

00:59:14.580 --> 00:59:16.580
so-- that's how we're
doing for time here.

00:59:16.580 --> 00:59:17.460
Good.

00:59:17.650 --> 00:59:20.580
Let's actually fix this, um, problem,
Brett.

00:59:20.720 --> 00:59:23.490
So we actually--this is--this is--
one of the reasons that I wanted to

00:59:23.490 --> 00:59:27.760
do this particular demo is as we were
coming up with the demo to show you

00:59:27.760 --> 00:59:30.390
guys and to have you walk through,
we actually sort of

00:59:30.390 --> 00:59:33.580
inadvertently inserted this
real-life bug into the problem,

00:59:33.580 --> 00:59:34.950
into the program.

00:59:36.640 --> 00:59:40.630
So we're going to fix it.

00:59:40.750 --> 00:59:43.680
So let's go into the-- we'll
launch it in our favorite editor,

00:59:43.680 --> 00:59:48.340
which is Xcode, or Emacs, whichever,
or VI.

00:59:48.460 --> 00:59:51.420
So what we've got is we've
got really three classes here.

00:59:51.420 --> 00:59:53.420
We've got the J frame,
which holds everything.

00:59:53.550 --> 00:59:56.360
We've got J panels,
which do the little animation.

00:59:56.390 --> 01:00:03.270
And it turns out that what we did
incorrectly is timers-- you only really

01:00:03.270 --> 01:00:10.180
need one timer thread associated with
any given set-- any given application.

01:00:10.180 --> 01:00:14.240
And what we did is we instantiated
a timer-- not just a timer

01:00:14.240 --> 01:00:17.090
task to do the animation,
but a timer thread, too,

01:00:17.160 --> 01:00:19.660
in every single one of those J panels.

01:00:19.720 --> 01:00:22.690
So all we needed to do to fix this bug,
and what Brett's doing now,

01:00:22.690 --> 01:00:25.260
is we pulled that timer
out of the J panel,

01:00:25.260 --> 01:00:31.380
just sort of hoisted
it up into the J frame,

01:00:31.380 --> 01:00:33.080
and recompiled.

01:00:33.190 --> 01:00:35.700
So all you need to do is take
it out of the inner class,

01:00:35.860 --> 01:00:39.510
make it a private timer in the J frame,
and recompile and rerun.

01:00:39.920 --> 01:00:42.540
And all of a sudden, you'll have--

01:00:42.740 --> 01:00:48.060
The thing to take home here is
that there are different aspects of

01:00:48.120 --> 01:00:54.280
performance that you need to think about.

01:00:54.280 --> 01:00:54.280
If you're doing animation correctly,

01:00:56.150 --> 01:00:58.000
We here?

01:00:58.020 --> 01:00:58.500
Pardon me?

01:00:58.500 --> 01:01:00.000
I also crashed the show.

01:01:00.000 --> 01:01:01.000
Okay, good.

01:01:01.000 --> 01:01:01.500
So you should file a bug.

01:01:01.500 --> 01:01:03.500
bugreporter.apple.com.

01:01:03.500 --> 01:01:05.980
Shark is a great tool,
but it does have teeth.

01:01:06.200 --> 01:01:08.000
You just have to be aware of that.

01:01:08.000 --> 01:01:10.500
I think that one of the
reasons that crashes too is,

01:01:10.520 --> 01:01:15.400
I think many systems don't like to
have 600 animation threads running

01:01:15.870 --> 01:01:20.500
at a time while you're doing really,
really low-level probing of the system.

01:01:20.500 --> 01:01:21.850
John, did it crash?

01:01:22.880 --> 01:01:23.640
Okay.

01:01:23.660 --> 01:01:28.620
Well, again, 600 threads doing animation
all at the same time can...

01:01:29.080 --> 01:01:32.780
Okay, bugreporter.apple.com.

01:01:32.870 --> 01:01:34.950
We take all of them seriously,
and we'll actually go into that.

01:01:35.170 --> 01:01:36.880
And so, so here we are, running again.

01:01:37.130 --> 01:01:39.500
It actually performs
essentially the same,

01:01:39.600 --> 01:01:44.000
but now it's doing it with, like,
one animation thread.

01:01:44.000 --> 01:01:48.770
Now, since we're using timers,
the frequency is going to be the same.

01:01:49.290 --> 01:01:53.650
But if you look at it in the other
really course level performance tool,

01:01:53.650 --> 01:01:55.860
Activity Monitor,
everyone should know that

01:01:55.860 --> 01:01:58.740
if you can't use Shark,
you can always use Activity

01:01:58.740 --> 01:02:01.900
Monitor to get a really course
idea of what's going on.

01:02:01.990 --> 01:02:07.340
And now you can see that in the
old version we had 591 threads,

01:02:07.410 --> 01:02:09.700
and in the new version we have 14.

01:02:09.770 --> 01:02:12.360
So much happier.

01:02:12.370 --> 01:02:14.330
Hopefully,
you guys have all followed along with me,

01:02:14.340 --> 01:02:16.480
seen that sharks have teeth,
but also seen that you can

01:02:16.480 --> 01:02:18.740
profile a job application.

01:02:18.880 --> 01:02:21.070
Let's go back to slides, please.

01:02:31.790 --> 01:02:34.700
So there's two other modes of Shark that
you should sort of know exist.

01:02:34.700 --> 01:02:37.370
There's one for watching allocations,
and there's one for watching

01:02:37.380 --> 01:02:38.900
on a method-by-method level.

01:02:38.910 --> 01:02:42.910
And there's two other sessions
that I want to point you at.

01:02:43.010 --> 01:02:44.940
So take a quick look at the slide,
because they're going away.

01:02:44.940 --> 01:02:51.340
One's tomorrow morning, bright and early,
performance--not tomorrow morning,

01:02:51.340 --> 01:02:54.400
Thursday morning, bright and early.

01:02:54.400 --> 01:02:56.210
And the other one is just generally
performance tools in the Mac,

01:02:56.210 --> 01:02:56.210
which will include Shark.

01:02:57.400 --> 01:03:00.300
So there's two other modes of Shark that
you should sort of know exist.

01:03:00.300 --> 01:03:02.980
There's one for watching allocations,
and there's one for watching

01:03:02.980 --> 01:03:04.500
on a method-by-method level.

01:03:04.500 --> 01:03:07.980
And there's two other sessions
that I want to point you at.

01:03:07.980 --> 01:03:07.980
So take a quick look at the slide,
because they're going away.

01:03:07.980 --> 01:03:07.980
One's tomorrow morning, bright and early,
performance--not tomorrow morning,

01:03:07.980 --> 01:03:07.980
Thursday morning, bright and early.

01:03:07.980 --> 01:03:07.980
And the other one is just generally
performance tools in the Mac,

01:03:07.980 --> 01:03:07.980
which will include Shark.

01:03:08.680 --> 01:03:11.430
Inside Apple.

01:03:11.490 --> 01:03:14.580
It's not quite like being
inside an alien vessel,

01:03:14.750 --> 01:03:19.410
but there are similarities
because it is a bug hunt.

01:03:20.490 --> 01:03:24.900
So Apple is--so this is the
history according to Mikey.

01:03:24.920 --> 01:03:27.360
Once upon a time,
a really smart person at

01:03:27.430 --> 01:03:31.250
Apple wrote a really cutting
edge tool for tracking bugs.

01:03:31.250 --> 01:03:33.520
We call it--it's called Radar.

01:03:33.520 --> 01:03:36.080
It's internal only unfortunately.

01:03:36.110 --> 01:03:40.280
But for its time, it was just, like,
the best way for handling

01:03:40.280 --> 01:03:41.630
bugs that existed.

01:03:41.630 --> 01:03:45.850
And this was like 10 or 12 years ago,
14 years ago.

01:03:45.920 --> 01:03:49.230
And consequently,
because it was such a good tool,

01:03:49.230 --> 01:03:53.340
Apple became sort of bug-centric
in its process so that,

01:03:53.340 --> 01:03:59.280
you know, 10 years later,
we're still very, very bug-centric.

01:03:59.330 --> 01:04:04.530
If I wanted to go and change Java code
just to the point of saying this,

01:04:04.530 --> 01:04:11.350
you know, cwindow.m needs more comments,
I would write a bug saying, "Bug title,

01:04:11.440 --> 01:04:16.670
cwindow.m needs more comments,"
and put it in state analyze.

01:04:16.720 --> 01:04:21.320
And so the development process
inside of Apple has it be the

01:04:21.320 --> 01:04:25.700
case that anytime we touch code,
we have a bug that's associated with that

01:04:25.780 --> 01:04:28.660
code talking about what the problem is.

01:04:28.660 --> 01:04:33.960
So this is a powerful thing for you
folks to realize and it's why I've been

01:04:33.960 --> 01:04:36.810
hammering home bugreporter.apple.com.

01:04:36.910 --> 01:04:40.060
Like, for things to change,
there--we speak bug.

01:04:40.370 --> 01:04:44.290
Everything that we--that we do internally
sort of has a bug attached to it.

01:04:44.350 --> 01:04:47.980
So if you know sort of the
language that we're talking,

01:04:47.980 --> 01:04:51.260
which is bug,
then you have more power over us and

01:04:51.260 --> 01:04:53.600
you can get us to do what you want.

01:04:53.600 --> 01:04:54.530
So, yeah, so bugs.

01:04:54.600 --> 01:04:56.800
Bugs are really important
and Apple is bug-driven.

01:04:56.860 --> 01:04:58.630
Java at Apple is very, very bug-driven.

01:05:00.800 --> 01:07:00.200
[Transcript missing]

01:07:00.610 --> 01:07:05.160
The other thing is give us some clue
about how important the bug is in sort

01:07:05.160 --> 01:07:07.990
of the grand scheme of things to you.

01:07:08.100 --> 01:07:12.240
So if this is keeping you from
switching from 1.4 to 1.5,

01:07:12.370 --> 01:07:15.500
we need to know that because
we want everyone to go to 1.5.

01:07:15.500 --> 01:07:20.470
If this is going to prevent
you from going from 1.5 to 1.6,

01:07:20.470 --> 01:07:25.670
or if this is, you know,
I can't deploy to 20,000 customers,

01:07:25.670 --> 01:07:25.710
tell us because we need to know.

01:07:25.710 --> 01:07:25.710
And we sort of factor that in.

01:07:26.710 --> 01:07:31.150
Now this one should be obvious and
it's sort of annoying that it's true.

01:07:31.280 --> 01:07:33.990
But if you sort of keep
coming back--and again,

01:07:33.990 --> 01:07:37.290
this goes back to developer
previews--be persistent.

01:07:37.580 --> 01:07:41.720
Be a champion of the things
that you want to get fixed.

01:07:41.720 --> 01:07:45.300
And that works really well.

01:07:45.300 --> 01:07:50.270
The way that this ties into developer
previews is if you get a developer

01:07:50.270 --> 01:07:54.250
preview from us and you happen to know
that there's one particular bug that

01:07:54.250 --> 01:07:57.730
you would really like for us to address,
and you actually say, you know,

01:07:57.730 --> 01:08:00.110
take the time to say,
"Does the bug still happen?" and

01:08:00.110 --> 01:08:03.800
you put that information in the bug,
we know that you still care.

01:08:03.800 --> 01:08:06.890
We know that there's at least one
person out there who like still today,

01:08:07.090 --> 01:08:09.460
honest to God,
wants this bug to be fixed.

01:08:09.460 --> 01:08:13.400
So be persistent and keep
coming back to your bugs.

01:08:13.400 --> 01:08:14.650
Don't let us let them die.

01:08:14.660 --> 01:08:18.170
We have great bug tracking tools,
but the more that you do to

01:08:18.170 --> 01:08:21.590
sort of keep the bugs that
you care about the most hot,

01:08:21.590 --> 01:08:23.060
the more that we can do.

01:08:23.330 --> 01:08:26.050
The other thing is that, you know,
every now and then we get, like,

01:08:26.050 --> 01:08:28.200
a bunch of bugs that we're like,
you know, Java does the wrong

01:08:28.200 --> 01:08:30.190
thing and you get really,
really angry.

01:08:30.570 --> 01:08:33.960
Like, try to keep that out of the bugs.

01:08:33.960 --> 01:08:37.200
It won't actually make your bug go
faster to be nice to me and my team,

01:08:37.200 --> 01:08:41.480
but what will actually happen
is we will last longer.

01:08:41.480 --> 01:08:44.550
So you know, we won't burn out.

01:08:45.760 --> 01:08:49.200
So let me just run through the last,
like, hour and 15 minutes.

01:08:49.260 --> 01:08:50.290
Talked about Developer Previews.

01:08:50.300 --> 01:08:51.320
I think they're really important.

01:08:51.480 --> 01:08:53.240
As long as I've been at Apple,
and probably as long

01:08:53.240 --> 01:08:55.660
as I will be at Apple,
I'll be pushing for Developer Previews.

01:08:55.660 --> 01:08:57.700
So use what I'm giving you.

01:08:57.740 --> 01:08:59.590
Talked a bit about the basic tools.

01:08:59.770 --> 01:09:02.680
Kill-Quit is one that
everyone should know.

01:09:02.720 --> 01:09:04.630
We did a sort of really
deep crash analysis,

01:09:04.710 --> 01:09:06.690
walked it all the way
through all the logs.

01:09:06.700 --> 01:09:08.500
Talked about how to pull things apart.

01:09:08.700 --> 01:09:10.610
We went hands-on with Shark.

01:09:10.740 --> 01:09:13.700
Thank you all for profiling
a Java application with me.

01:09:13.700 --> 01:09:16.700
And then I talked a bit about
what goes on inside Apple.

01:09:16.700 --> 01:09:19.680
So we've got about five minutes left.

01:09:19.700 --> 01:09:23.570
Here are some other sessions
that you might want to attend.