WEBVTT

00:00:10.980 --> 00:00:12.540
Good afternoon.

00:00:12.660 --> 00:00:13.910
My name is Ricci Adams.

00:00:14.120 --> 00:00:20.310
I'm an engineer on Apple's social
software team and this is session 115,

00:00:20.330 --> 00:00:23.370
Publish & Subscribe with RSS.

00:00:24.890 --> 00:00:27.140
Now,
as you may have guessed from the title,

00:00:27.230 --> 00:00:29.980
we're going to be
talking about RSS today.

00:00:29.980 --> 00:00:32.530
And there's three things
I'm going to tell you.

00:00:32.650 --> 00:00:38.110
First, I'm going to give you a brief
overview of what RSS is.

00:00:38.320 --> 00:00:42.790
And then I'm going to tell you some of
the pitfalls that you may run into when

00:00:42.790 --> 00:00:46.100
trying to implement RSS in your software.

00:00:46.210 --> 00:00:48.220
And finally,
I'm going to tell you about some

00:00:48.220 --> 00:00:52.890
of the great new technology we
have in Mac OS X Leopard that's

00:00:52.890 --> 00:00:55.350
going to make your lives easier.

00:00:56.160 --> 00:00:58.340
So first the overview.

00:00:58.370 --> 00:01:00.560
You're probably all
familiar with blogging.

00:01:00.560 --> 00:01:04.100
It's one of the hot new
phenomenons on the web.

00:01:04.150 --> 00:01:08.100
And so how it works is
there's a web application.

00:01:08.130 --> 00:01:11.070
Now this could be a web
application that you've installed,

00:01:11.070 --> 00:01:13.780
something like MovableType or WordPress.

00:01:13.780 --> 00:01:17.350
Or it could be a service
you're subscribed to like

00:01:17.350 --> 00:01:20.050
Vox.com or TypePad or Blogger.

00:01:20.760 --> 00:01:26.350
And how this works is you log into
the service and you write a post.

00:01:26.590 --> 00:01:29.260
Say a post about attending WWDC.

00:01:29.260 --> 00:01:34.510
And then when you hit the submit button,
that web application is going to

00:01:34.610 --> 00:01:39.920
generate an HTML resource which your
readers can then browse to using

00:01:40.230 --> 00:01:43.580
Safari or another web browser and read.

00:01:43.690 --> 00:01:48.390
How this works is you log into
the service and you write a post,

00:01:48.480 --> 00:01:52.600
say a post about attending WWDC.

00:01:52.600 --> 00:01:56.570
And then when you hit the submit button,
that web application is going to

00:01:56.740 --> 00:02:02.560
generate an HTML resource which your
readers can then browse to using

00:02:02.630 --> 00:02:06.420
Safari or another web browser and read.

00:02:07.110 --> 00:02:11.030
So instead of this,
the web application will also publish

00:02:11.130 --> 00:02:18.010
an XML resource in the RSS or other
formats and then it becomes much,

00:02:18.010 --> 00:02:19.990
much easier to read.

00:02:20.100 --> 00:02:22.800
And so you have applications,
Apple applications for example,

00:02:22.800 --> 00:02:27.500
like Safari RSS,
the new Mail RSS or Quartz Composer,

00:02:27.590 --> 00:02:32.110
and there's also your applications such
as NetNewsWire or Mac Reporter that

00:02:32.110 --> 00:02:36.690
can read this XML file and
display it however you want.

00:02:38.150 --> 00:02:40.740
So you're probably here today
because you're interested in

00:02:40.740 --> 00:02:43.940
using RSS in your application.

00:02:43.940 --> 00:02:44.890
And you know what?

00:02:44.970 --> 00:02:46.720
That's great.

00:02:46.720 --> 00:02:49.400
But there's three
things you need to know.

00:02:49.420 --> 00:02:55.200
First, you're going to have to know and
you're going to have to parse the feed.

00:02:55.200 --> 00:02:59.860
And then you're going to have to
interpret the contents of each entry.

00:02:59.860 --> 00:03:01.640
And finally,
you're going to have to difference

00:03:01.640 --> 00:03:06.960
the feeds over time in order to see
what's new and what's been updated.

00:03:06.980 --> 00:03:08.220
So let's talk about parsing.

00:03:08.220 --> 00:03:14.090
You know, we use the term "RSS" as a
generalized term to mean web feeds.

00:03:14.200 --> 00:03:19.570
But there's actually four formats
that you have to be concerned with.

00:03:19.900 --> 00:03:28.110
There's RSS 0.9, RSS 1.0, RSS 2.0,
and Atom.

00:03:28.110 --> 00:03:31.520
And if you want your application
to be able to read a good number

00:03:31.930 --> 00:03:35.310
of web feeds out on the web,
you're going to have to support

00:03:35.310 --> 00:03:37.100
all four of these applications.

00:03:38.560 --> 00:03:41.400
So that might be a little bit
more work than you thought,

00:03:41.510 --> 00:03:42.610
but it's still not bad.

00:03:42.610 --> 00:03:44.340
But there's more.

00:03:44.340 --> 00:03:47.290
Because in addition
to these four formats,

00:03:47.290 --> 00:03:51.060
a bunch of the time,
you're going to encounter invalid XML.

00:03:51.060 --> 00:03:54.330
Sometimes a feed might be
missing an ending element,

00:03:54.330 --> 00:03:58.070
or there could be an entity
that's not part of the XML spec.

00:03:58.120 --> 00:04:01.890
And since everybody can use
HTML in their feed post,

00:04:01.890 --> 00:04:05.400
you're going to also
encounter invalid HTML.

00:04:05.400 --> 00:04:08.420
So you have to worry about that, too.

00:04:08.440 --> 00:04:09.590
Well,

00:04:11.550 --> 00:04:13.830
So you've actually got the feed now.

00:04:13.880 --> 00:04:15.680
You've been able to figure
out what part of the file

00:04:15.680 --> 00:04:17.690
pertains to different entries.

00:04:17.830 --> 00:04:20.340
But you actually have to
interpret those entries.

00:04:20.470 --> 00:04:26.380
Let's say the author of a web feed wanted
to use an ampersand in his feed's body.

00:04:26.440 --> 00:04:29.400
Well, you know,
there are six different ways

00:04:29.400 --> 00:04:31.780
to represent that ampersand.

00:04:32.170 --> 00:04:35.450
Sometimes your XML parser
can handle this for you.

00:04:35.450 --> 00:04:38.000
Other times you're going to
have to make a hard choice.

00:04:38.010 --> 00:04:39.890
Do you want to singly escape the entry?

00:04:40.000 --> 00:04:41.990
Do you want to doubly escape it?

00:04:42.220 --> 00:04:44.600
It's a tough call to make.

00:04:46.840 --> 00:04:48.960
There's also differencing.

00:04:48.980 --> 00:04:53.300
You see,
the RSS protocol isn't really dynamic.

00:04:53.300 --> 00:04:57.910
You can't say, "Hey, feed server,
can you send me all the feeds since

00:04:57.910 --> 00:05:01.160
last Sunday?" It doesn't work like that.

00:05:01.190 --> 00:05:05.550
In the RSS file,
there's only a list of the last entries.

00:05:05.720 --> 00:05:09.770
And so what you have to do is every
single time you download that file,

00:05:09.770 --> 00:05:12.200
you have to store what you've downloaded.

00:05:12.200 --> 00:05:15.560
The next time you download it,
you have to take the new version and you

00:05:15.560 --> 00:05:16.780
have to compare it to the old version.

00:05:16.800 --> 00:05:24.480
And this would be simple if every
entry had a unique identifier.

00:05:24.520 --> 00:05:27.300
Unfortunately, that's not the case.

00:05:27.320 --> 00:05:28.800
They're not guaranteed to have those.

00:05:28.800 --> 00:05:32.800
And so really, it becomes quite hard.

00:05:32.800 --> 00:05:36.000
In fact,
trying to do all of this is kind of

00:05:36.000 --> 00:05:41.120
a giant hoop that you have to jump
through when in the first place you

00:05:41.200 --> 00:05:44.270
just wanted to be able to read a feed.

00:05:45.330 --> 00:05:49.010
So wouldn't it be nice if there
was a framework in the system

00:05:49.200 --> 00:05:51.720
that would do all this for you?

00:05:57.600 --> 00:05:59.830
Thank you.

00:05:59.830 --> 00:06:06.110
Today I'm proud to
announce that there is.

00:06:08.590 --> 00:06:11.920
It's going to be shipping to your
customers in Leopard and it's available

00:06:11.920 --> 00:06:15.020
as a preview on your developer DVD.

00:06:15.260 --> 00:06:18.570
The name of the framework is PubSub and
we're going to be talking about it

00:06:18.690 --> 00:06:20.920
for the remainder of the session.

00:06:21.680 --> 00:06:25.440
So first let's talk about the
features of the new PubSub framework.

00:06:25.490 --> 00:06:27.440
Well as you can probably
gather from the name,

00:06:27.510 --> 00:06:30.030
it both publishes and it subscribes.

00:06:30.090 --> 00:06:33.390
So we're going to be talking a bit more
about the publication part in a bit.

00:06:33.600 --> 00:06:35.600
For now let's focus on subscriptions.

00:06:35.600 --> 00:06:37.540
What can it subscribe to?

00:06:37.540 --> 00:06:38.870
What can it parse?

00:06:38.910 --> 00:06:42.570
Well, all four of those things
I mentioned previously.

00:06:42.570 --> 00:06:46.320
It's going to be able
to handle RSS 0.9 feeds,

00:06:46.490 --> 00:06:49.730
RSS 1.0 feeds, 2.0, and Atom.

00:06:49.780 --> 00:06:55.040
And it's even going to be able
to handle malformed feeds.

00:06:55.040 --> 00:06:57.810
So you just point it at a feed,
it parses it,

00:06:58.000 --> 00:07:02.950
and it's going to take this and pull
it down into a common data model,

00:07:02.950 --> 00:07:07.990
which you can then access using
Objective-C classes and methods.

00:07:08.400 --> 00:07:14.240
And it's not just restricted to the
attributes defined in the RSS and Atom

00:07:14.700 --> 00:07:19.900
spec because we're also going to provide
support for XML extension elements.

00:07:19.900 --> 00:07:22.900
And what this means is there's
a bunch of extensions right now

00:07:22.900 --> 00:07:24.620
that you could find in RSS feeds.

00:07:24.700 --> 00:07:28.260
For example,
iTunes has a podcasting extension.

00:07:28.260 --> 00:07:30.600
There's the Yahoo Media extensions.

00:07:30.600 --> 00:07:33.780
FeedBurner.com has their
own set of extensions.

00:07:34.340 --> 00:07:36.610
And we're not going to
throw this data away.

00:07:36.750 --> 00:07:39.550
We're going to provide a
way for you to get at it.

00:07:39.580 --> 00:07:42.000
So those are some of the main features.

00:07:42.130 --> 00:07:44.780
Let's talk about the
architecture of PubSub.

00:07:44.780 --> 00:07:49.240
And I'm going to explain this
from the perspective of a user who

00:07:49.240 --> 00:07:55.140
wants to subscribe to a web feed,
say Slashdot, in mail.

00:07:55.890 --> 00:08:01.600
So we have MailRSS, we have SafariRSS,
and hopefully your application.

00:08:01.600 --> 00:08:05.380
Hopefully you pay a little bit more
for a graphic designer than just this.

00:08:05.500 --> 00:08:08.460
And they all link against
the PubSub framework.

00:08:08.460 --> 00:08:11.900
Now there's also a fourth
application on the system,

00:08:11.900 --> 00:08:13.980
and that's the PubSub agent.

00:08:13.980 --> 00:08:17.040
And so when the user goes
to subscribe to Slashdot,

00:08:17.040 --> 00:08:20.320
through the PubSub framework,
Mail's going to send an

00:08:20.320 --> 00:08:22.080
IPC message to the agent.

00:08:22.160 --> 00:08:25.590
And the agent's going to be
responsible for all network I.O.

00:08:25.800 --> 00:08:31.940
So the agent then goes out to the web,
grabs the feed, parses the feed,

00:08:31.940 --> 00:08:35.090
and stores that in a database.

00:08:35.440 --> 00:08:38.820
Next,
the agent is going to send a notification

00:08:39.360 --> 00:08:44.890
to all clients of PubSub saying,
"Hey, I have this new feed, slash dot."

00:08:45.240 --> 00:08:47.040
Mail's going to then
pick up on that and say,

00:08:47.040 --> 00:08:48.680
oh, my feed's been parsed.

00:08:48.680 --> 00:08:50.280
It's now in the database.

00:08:50.280 --> 00:08:51.490
Let me grab that.

00:08:52.110 --> 00:08:56.280
And then it grabs it from the database
and you can display it how you want.

00:08:56.390 --> 00:09:01.180
So the advantage of this architecture
is all the data is shared.

00:09:01.250 --> 00:09:06.800
So if you've subscribed to the same
feed in both MailRSS and SafariRSS,

00:09:06.800 --> 00:09:12.050
and say you go to do a manual download
in Safari and there's five new entries,

00:09:12.210 --> 00:09:16.630
those entries are going to appear at the
same time in Safari or Mail or at the

00:09:16.630 --> 00:09:19.500
same time in Safari in your application.

00:09:19.550 --> 00:09:23.140
And the other advantage is that
we're only downloading the feed once,

00:09:23.390 --> 00:09:26.080
so it reduces network traffic.

00:09:26.850 --> 00:09:29.920
So now that I've talked
about the architecture,

00:09:29.920 --> 00:09:32.850
we've made a few cool demos
that we want to show you now.

00:09:32.850 --> 00:09:37.070
And I'd like to introduce my coworker,
Jens Alfke, who's going to come up on

00:09:37.480 --> 00:09:38.590
stage and present those to you.

00:09:38.920 --> 00:09:40.550
Jens?

00:09:45.110 --> 00:09:48.500
Okay, let's see, we need demo machine C.

00:09:48.500 --> 00:09:51.310
We have our magic switch ready.

00:09:51.650 --> 00:09:53.740
We're on the correct machine there.

00:09:53.740 --> 00:09:54.240
We're live.

00:09:54.240 --> 00:09:55.490
OK, hi.

00:09:55.610 --> 00:09:57.600
So I've got two applications
to show right now,

00:09:57.600 --> 00:09:58.750
two simple little apps.

00:09:58.810 --> 00:10:02.430
And the first one of these is
already on your developer CD in the

00:10:02.430 --> 00:10:05.240
developer examples PubSub folder.

00:10:05.360 --> 00:10:07.740
It's what else but a
very simple news reader,

00:10:07.870 --> 00:10:11.300
the obvious thing to
build with this framework.

00:10:11.390 --> 00:10:13.300
So it's got a pretty typical layout.

00:10:13.300 --> 00:10:15.300
On the left here,
you see there's a list of the

00:10:15.300 --> 00:10:17.230
feeds that have been subscribed to.

00:10:17.340 --> 00:10:19.340
We can click on a feed
and see the articles here.

00:10:19.340 --> 00:10:24.050
We're seeing the entry titles, the dates,
the authors, if they had authors,

00:10:24.050 --> 00:10:26.430
and the read and unread state.

00:10:26.570 --> 00:10:31.880
We can click on any entry in here
and see the contents down below.

00:10:33.440 --> 00:10:37.130
There's not a whole lot
more to it than that.

00:10:37.260 --> 00:10:39.280
The other application

00:10:40.580 --> 00:10:41.370
Does a little bit more.

00:10:41.620 --> 00:10:45.430
So we want to give you the idea that this
is not just about building yet another

00:10:45.430 --> 00:10:49.400
newsreader because we have a whole
lot of newsreaders on the OS already.

00:10:49.400 --> 00:10:51.200
We have some really good ones.

00:10:51.260 --> 00:10:53.660
Both Apple and other developers
have written really good ones.

00:10:53.700 --> 00:10:57.240
So what's more interesting is to take
this kind of content that you can

00:10:57.240 --> 00:11:00.710
get now really easily from the web
and do interesting stuff with it.

00:11:01.570 --> 00:11:04.730
So as an example,
one of these feeds I've subscribed to

00:11:04.820 --> 00:11:07.170
here is this iTunes new releases feed.

00:11:07.180 --> 00:11:11.090
So we can look at these and see little
pictures of the album covers and

00:11:11.090 --> 00:11:13.770
what the artist name is and so on.

00:11:13.770 --> 00:11:15.700
And we can kind of scroll
through the list and see stuff.

00:11:15.720 --> 00:11:20.380
But as an example,
I built an application that

00:11:20.970 --> 00:11:24.370
specialized for viewing this feed,
both the iTunes new music

00:11:24.370 --> 00:11:28.030
feed and the eMusic,
which is another music store feed.

00:11:28.040 --> 00:11:30.780
So it accesses the same data.

00:11:30.780 --> 00:11:31.440
In fact,
it's the same data that I'm using.

00:11:31.440 --> 00:11:35.400
So it's the same records in the database
that the other application is showing.

00:11:35.400 --> 00:11:38.110
But this one does a number of
interesting things with it.

00:11:38.250 --> 00:11:40.860
First of all,
this is a core data application and does

00:11:40.860 --> 00:11:44.510
all the kind of fun core data things
like filtering things down using filter

00:11:44.510 --> 00:11:47.070
view or sorting in different directions.

00:11:47.120 --> 00:11:49.960
So it's got its own persistent
data store based on core data,

00:11:50.060 --> 00:11:53.180
but this integrates really easily
with the persistent data store

00:11:53.250 --> 00:11:54.690
from the Pub/Sub framework.

00:11:54.690 --> 00:11:57.200
And synchronizing between
the two is really easy.

00:11:57.230 --> 00:12:01.400
So as new information arrives from the
web and goes into the Pub/Sub framework,

00:12:01.440 --> 00:12:04.820
this application gets notified,
grabs those entries and adds

00:12:04.820 --> 00:12:07.810
corresponding entries to
its own core data database.

00:12:07.920 --> 00:12:11.460
And its database is based
on the kind of metadata that

00:12:11.460 --> 00:12:13.520
you would expect for albums.

00:12:13.610 --> 00:12:17.810
So it's based on the artist name,
the album name, the genre.

00:12:17.810 --> 00:12:23.410
And so we can do all kinds of interesting
filtering on the Pub/Sub framework.

00:12:23.750 --> 00:12:30.830
So we can filter by artist name,
we can filter by genre,

00:12:30.830 --> 00:12:30.830
so we can just get--

00:12:31.770 --> 00:12:34.940
If we had any tech note, nope.

00:12:34.940 --> 00:12:37.970
All alternative, et cetera.

00:12:38.570 --> 00:12:41.960
And the way that it does this
is by looking at the additional

00:12:41.960 --> 00:12:43.640
XML elements that are in the feed.

00:12:43.670 --> 00:12:46.220
The iTunes music store feed,
in addition to having the human

00:12:46.220 --> 00:12:49.600
readable HTML content that shows you
the artist and picture and so on,

00:12:49.720 --> 00:12:53.760
it also has some invisible XML elements
there in the entries which this

00:12:53.850 --> 00:12:58.040
application goes and tweezers out and
uses those to put into its database.

00:12:58.040 --> 00:13:01.950
So its database is keyed off
of things like artist name.

00:13:04.110 --> 00:13:11.000
It also grabs data like the music clip.

00:13:11.080 --> 00:13:15.370
So we have a nice UI in here
so it can-- if we had audio,

00:13:15.460 --> 00:13:17.430
you can just listen to little
clips of the album right

00:13:17.430 --> 00:13:18.490
here in the browser itself.

00:13:18.500 --> 00:13:24.790
And that's it.

00:13:32.120 --> 00:13:41.180
Can we switch back to the slides please?

00:13:41.180 --> 00:13:41.180
Oh.

00:13:41.180 --> 00:13:41.180
Can we switch back to the slides?

00:13:41.180 --> 00:13:41.180
Thank you.

00:13:42.070 --> 00:13:44.830
Thank you, Jens, for that fine demo.

00:13:45.250 --> 00:13:49.080
So now that you've seen the
NewsReader application that we built,

00:13:49.120 --> 00:13:52.490
I'm going to talk about
how we built that.

00:13:54.530 --> 00:13:58.500
So you see here a screenshot
of the NewsReader application.

00:13:58.500 --> 00:14:01.930
And the first thing that you
need to know is to use PubSub,

00:14:02.330 --> 00:14:05.370
you're going to need a PS client.

00:14:05.710 --> 00:14:12.090
And PS Client is going to be an instance
that is tied to your bundle's identifier.

00:14:12.300 --> 00:14:15.650
So PS Client,
you'll use that to subscribe to feeds,

00:14:15.920 --> 00:14:17.900
to unsubscribe to feeds.

00:14:17.970 --> 00:14:21.150
And speaking of feeds,
each one of those is

00:14:21.970 --> 00:14:24.200
represented by a PS Feed object.

00:14:24.330 --> 00:14:27.660
So using the PS Feed object,
you can get the feed's title,

00:14:27.660 --> 00:14:31.200
you can get the last time it was updated,
and more importantly,

00:14:31.200 --> 00:14:36.900
you can get a list of its entries,
which we use PS Entry for that.

00:14:37.330 --> 00:14:40.580
So PS Client, PS Feed, and PS Entry.

00:14:40.860 --> 00:14:44.200
Let's look at a code example
that uses these three.

00:14:44.200 --> 00:14:48.070
So first you need to get your PS Client.

00:14:49.060 --> 00:14:53.200
And you make a call into PSClient
application client and that's a

00:14:53.200 --> 00:14:58.300
convenience method that's going to
return you your PSClient that's key to

00:14:58.300 --> 00:15:00.000
your application's bundle identifier.

00:15:00.000 --> 00:15:03.770
Once you have that,
you can subscribe to a feed.

00:15:03.770 --> 00:15:09.990
So we'll use NSURL, URL with string,
get an NSURL and then tell the client,

00:15:10.000 --> 00:15:17.000
"Hey, I want to add a feed with this
URL." It'll return to you a PS feed.

00:15:17.000 --> 00:15:20.990
So now you can do stuff with
that PS feed like get its title.

00:15:21.000 --> 00:15:23.990
You can also get its entries.

00:15:25.090 --> 00:15:29.420
Like the below example, get its entries,
get an enumerator, enumerate over them,

00:15:29.420 --> 00:15:32.290
and then get the title of each entry.

00:15:33.980 --> 00:15:39.440
So going back to the demo application,
in the bottom right-hand corner,

00:15:39.440 --> 00:15:43.260
you saw the actual content of each entry.

00:15:43.310 --> 00:15:48.780
And in our API,
we use PSContent to represent this.

00:15:48.830 --> 00:15:50.980
Well, you might ask,

00:15:51.190 --> 00:15:53.090
Why not use an NSString?

00:15:53.210 --> 00:15:55.100
Why use a separate object?

00:15:55.300 --> 00:15:59.240
Well, the answer is that in
the RSS and Atom formats,

00:15:59.500 --> 00:16:04.210
content can either be plain
text or it can be HTML.

00:16:05.030 --> 00:16:12.250
So here's an Atom example,
content type text, "Hi mom and dad." Now,

00:16:12.250 --> 00:16:17.380
the author of this feed is intending
for this to be displayed as plain text.

00:16:17.460 --> 00:16:21.400
You can also say content type
HTML and then of course you'd have

00:16:21.400 --> 00:16:25.810
to doubly escape your entities,
"Hi mom and dad." But the thing is,

00:16:25.960 --> 00:16:29.170
you don't need to worry
about this because PS content

00:16:29.170 --> 00:16:30.900
is going to do it for you.

00:16:31.050 --> 00:16:36.090
We have a plain text string accessor,
we have an HTML string accessor,

00:16:36.090 --> 00:16:38.740
and whatever you want,
we're just going to handle

00:16:38.740 --> 00:16:39.900
that conversion on the fly.

00:16:39.900 --> 00:16:43.810
So, for a code example,

00:16:44.400 --> 00:16:48.700
Let's take one of the PS entries
and let's take its summary

00:16:48.780 --> 00:16:50.780
and put it into a text field.

00:16:50.830 --> 00:16:54.300
Let's take its content and
put it into a web view.

00:16:54.300 --> 00:17:00.170
So here we have a PS feed and a PS entry
and we've gotten those previously.

00:17:00.920 --> 00:17:02.560
Now we're going to get the summary.

00:17:02.680 --> 00:17:08.040
So we call the summary method on
psEntry that returns us a psContent.

00:17:08.110 --> 00:17:11.550
Now we can call plaintext string on that.

00:17:11.930 --> 00:17:18.030
And now we have a plain text NSString so
we can shove it into an NS text field.

00:17:18.170 --> 00:17:21.800
Next we want to get the actual content,
which will probably be in HTML,

00:17:21.900 --> 00:17:24.140
and put it into a web view.

00:17:25.200 --> 00:17:27.260
So here you see how we're doing that.

00:17:27.320 --> 00:17:31.340
We say entry content,
that returns us the PS content.

00:17:31.470 --> 00:17:35.730
Call HTML string now and then we
can just put that into a web view.

00:17:35.730 --> 00:17:39.100
And again, it doesn't matter what
was in the original feed.

00:17:39.210 --> 00:17:43.450
If it originally was in plain text
and you want it to be in HTML,

00:17:43.450 --> 00:17:45.380
we'll handle it for you.

00:17:46.610 --> 00:17:49.800
So in addition to PS content,
there's two more classes

00:17:49.800 --> 00:17:51.680
I'm going to discuss.

00:17:52.770 --> 00:17:54.950
We're going to talk about authors now.

00:17:55.120 --> 00:17:58.830
So in the RSS and Atom formats,
there's a wide range of how you

00:17:58.830 --> 00:18:01.850
can display author information.

00:18:02.060 --> 00:18:05.580
So the top example is the easiest case.

00:18:05.620 --> 00:18:08.780
Author John Doe, just the author's name.

00:18:08.790 --> 00:18:13.900
The next example has both the author's
name and the author's email address.

00:18:13.900 --> 00:18:16.720
And the final example is from
Atom and you can see the Atom

00:18:16.720 --> 00:18:18.900
specification breaks it out into three.

00:18:18.900 --> 00:18:21.460
So there's the author's name,
the author's email address,

00:18:21.460 --> 00:18:22.820
and the author's homepage.

00:18:23.560 --> 00:18:27.050
So instead of just providing this
to you as an NSString and making

00:18:27.050 --> 00:18:32.510
you parse out the bit you want,
we're going to use the PS Author class,

00:18:32.670 --> 00:18:39.000
which has a name accessor,
an email accessor, and a URL accessor.

00:18:39.000 --> 00:18:43.030
In addition,
we're going to provide the capability

00:18:43.030 --> 00:18:48.290
to link PS Authors to AB person
objects from Address Book Framework.

00:18:54.400 --> 00:18:57.240
Today we're going to discuss enclosures.

00:18:57.240 --> 00:19:00.150
And you might not exactly
know what an enclosure is,

00:19:00.150 --> 00:19:08.600
but if you've ever used a
podcast or listened to one,

00:19:08.600 --> 00:19:08.600
or if you've ever viewed a photo cast,
you are actually using enclosures.

00:19:08.760 --> 00:19:12.640
So you have your RSS resource
on the web server.

00:19:12.710 --> 00:19:15.780
And in addition to this,
in the case of a podcast,

00:19:15.780 --> 00:19:21.000
you're also going to have MP3 files or
AAC files for each one of your episodes.

00:19:21.130 --> 00:19:24.150
And if you look in that RSS file,

00:19:24.410 --> 00:19:26.840
You're going to see
something like the following:

00:19:26.980 --> 00:19:30.860
rel type enclosure,
the size of the enclosure in bytes,

00:19:30.930 --> 00:19:33.900
the mime type,
and an actual link to that.

00:19:34.090 --> 00:19:37.020
And so let's say you're
trying to build a podcasting

00:19:37.020 --> 00:19:39.300
application with our framework.

00:19:39.500 --> 00:19:41.500
Well, you're going to use
the psEnclosure class.

00:19:41.610 --> 00:19:45.490
And as you can see there, we have URL,
we have the size in bytes,

00:19:45.710 --> 00:19:49.250
and we have its mime
type that you can get at.

00:19:49.480 --> 00:19:51.940
So these are our six classes.

00:19:51.960 --> 00:19:54.900
In summary, let's go over them again.

00:19:55.220 --> 00:19:59.220
We have PS Client,
which you'll use to add subscriptions

00:19:59.220 --> 00:20:01.400
and remove subscriptions.

00:20:01.400 --> 00:20:05.170
PS Client has an array of PS Feeds,
which represent the feeds

00:20:05.170 --> 00:20:06.770
you're subscribed to.

00:20:06.770 --> 00:20:10.330
And then PS Feeds have PS entries.

00:20:10.330 --> 00:20:14.430
There's also PS Author for
dealing with author information,

00:20:14.510 --> 00:20:18.870
PS Content for the content,
and PS Enclosure for enclosures.

00:20:18.930 --> 00:20:22.400
And that is the
subscription API of PubSub.

00:20:24.020 --> 00:20:28.570
Next up is Jens, who's going to discuss
the publication side.

00:20:39.700 --> 00:20:43.840
Okay, I have the clicker.

00:20:43.840 --> 00:20:47.360
So we don't just let you
subscribe to RSS feeds,

00:20:47.360 --> 00:20:49.240
we let you actually publish feeds.

00:20:49.260 --> 00:20:54.490
And this is a little kind of broader,
more bleeding edge, vaguer,

00:20:54.740 --> 00:20:56.620
so I'm going to approach this.

00:20:57.100 --> 00:21:23.400
[Transcript missing]

00:21:24.040 --> 00:21:25.550
I'm going to answer a
couple of questions.

00:21:25.800 --> 00:21:28.000
First, you might be asking why.

00:21:28.230 --> 00:21:29.520
Why would I want to publish stuff?

00:21:29.520 --> 00:21:31.020
What's this going to do for me?

00:21:31.050 --> 00:21:33.400
Then, assuming you accept that, well,
how?

00:21:33.460 --> 00:21:34.510
How do I use the API?

00:21:34.520 --> 00:21:36.500
What's the architecture like?

00:21:36.530 --> 00:21:38.540
Then, where can I publish stuff to?

00:21:38.540 --> 00:21:40.440
What kind of servers,
what kind of protocols

00:21:40.440 --> 00:21:41.460
are we talking about?

00:21:41.460 --> 00:21:43.930
And last,
I'm going to talk a little bit about who,

00:21:43.960 --> 00:21:45.700
by which I mean access control.

00:21:45.740 --> 00:21:48.020
As we'll see,
some of the information that you want

00:21:48.070 --> 00:21:50.120
to publish may not be world readable.

00:21:50.120 --> 00:21:53.960
You may not want everyone to be able
to see your address book that you're

00:21:53.980 --> 00:21:55.990
publishing or something like that.

00:21:57.160 --> 00:21:58.970
So first, why?

00:21:59.210 --> 00:22:02.100
First reason is kind of the obvious one,
personal publishing.

00:22:02.100 --> 00:22:04.720
And blogging is kind of the
obvious example of that.

00:22:04.890 --> 00:22:07.610
And there's the famous quote,
freedom of the press is

00:22:07.610 --> 00:22:09.160
limited to those who own one.

00:22:09.210 --> 00:22:15.460
And at least in many countries now,
that means pretty much anybody because

00:22:15.460 --> 00:22:20.410
you can go and set up your own free
blog at any number of different

00:22:20.620 --> 00:22:21.480
sites and start publishing your
own important commentary to the world.

00:22:21.780 --> 00:22:23.660
So you could publish anything.

00:22:23.740 --> 00:22:26.180
Blogging, podcasting, of course.

00:22:26.260 --> 00:22:30.280
You can actually have audio data
or music that you can publish.

00:22:30.410 --> 00:22:33.230
Photocasting, like iPhoto does.

00:22:33.360 --> 00:22:36.290
Flickr also has feeds like that.

00:22:36.410 --> 00:22:37.300
Video casting.

00:22:37.300 --> 00:22:39.230
There are, in fact,
podcasts now that include video

00:22:39.300 --> 00:22:42.120
content that you can watch on
your iPod or on your computer.

00:22:42.120 --> 00:22:45.780
And next year, I'm sure they'll be
announcing smell-o-casting.

00:22:45.780 --> 00:22:50.180
Be afraid.

00:22:52.030 --> 00:22:55.940
So beyond blogging or all of these
things which are kind of one-to-many,

00:22:55.940 --> 00:23:00.650
like I am taking this content and putting
it out in public for the world to see,

00:23:00.760 --> 00:23:04.190
there are some more applications
for this that are more two-way,

00:23:04.320 --> 00:23:06.100
they're more collaborative.

00:23:06.400 --> 00:23:11.080
In the future,
everyone will be famous for 15 people.

00:23:11.080 --> 00:23:14.550
These 15 people,
this mutual admiration society,

00:23:14.610 --> 00:23:18.010
may well want to be able to
publish things to each other,

00:23:18.010 --> 00:23:19.350
share information.

00:23:19.620 --> 00:23:23.380
So small group,
many-to-many content publishing.

00:23:23.390 --> 00:23:26.730
This is not probably the way that
we're going to have many thousands

00:23:26.850 --> 00:23:30.220
of people mailing lists working,
but you can do some really

00:23:30.220 --> 00:23:32.390
interesting stuff with this.

00:23:32.630 --> 00:23:33.660
There are two different approaches.

00:23:33.660 --> 00:23:36.720
There's sort of a centralized and
a decentralized way of doing it.

00:23:36.850 --> 00:23:40.300
First one,
we have a shared read/write store.

00:23:40.330 --> 00:23:43.150
And in our diagram,
we've got a couple clients that want

00:23:43.270 --> 00:23:46.360
to be exchanging data with each other.

00:23:46.380 --> 00:23:49.880
In the middle, we have an Atom store,
by which I mean a server that is

00:23:49.890 --> 00:23:54.860
using the Atom publishing protocol
for publishing information.

00:23:54.870 --> 00:23:57.760
And each of the clients makes
a connection to that server

00:23:57.780 --> 00:24:00.160
and is publishing information.

00:24:00.180 --> 00:24:02.780
And they can actually be
publishing data to the same feed,

00:24:02.780 --> 00:24:06.020
and they're also simultaneously
subscribed to that feed.

00:24:06.070 --> 00:24:10.010
So each of them is seeing the things
that the other people are doing,

00:24:10.010 --> 00:24:11.740
as well as the things that they put in.

00:24:11.740 --> 00:24:15.170
Other people can modify data
that one person has put in.

00:24:15.380 --> 00:24:20.110
So this is nice if you happen to have
an Atom store and most of the blogging

00:24:20.110 --> 00:24:22.950
services now support the Atom API.

00:24:23.070 --> 00:24:26.530
We happen to be supporting
it in Leopard server,

00:24:26.530 --> 00:24:28.090
but you may not always
have that available.

00:24:28.100 --> 00:24:33.010
So the decentralized approach is done,
one approach that's being looked up

00:24:33.010 --> 00:24:38.970
by a lot of people is cross-subscribed
feeds where again we have three clients.

00:24:39.950 --> 00:24:41.020
But we don't have a shared server.

00:24:41.020 --> 00:24:44.300
Instead, each client is sort of one way
or another publishing a feed.

00:24:44.340 --> 00:24:48.800
And they might be publishing
it with personal web sharing.

00:24:49.190 --> 00:24:51.410
They might happen to have a
spare web server somewhere that

00:24:51.410 --> 00:24:55.840
they can go and toss up the
XML data to-- something like that.

00:24:55.890 --> 00:24:59.360
So each client then is publishing
their own information into

00:24:59.570 --> 00:25:01.340
this feed that they own.

00:25:01.380 --> 00:25:06.270
And then each client is subscribed
to all of the other clients' feeds.

00:25:06.340 --> 00:25:09.020
So in effect, we get the same behaviors
in the first case,

00:25:09.030 --> 00:25:12.610
where the data that each client
publishes becomes visible to

00:25:12.610 --> 00:25:14.580
the other clients as well.

00:25:15.620 --> 00:25:20.050
This obviously is not going
to scale terribly well because

00:25:20.050 --> 00:25:21.710
it has this N squared problem.

00:25:21.920 --> 00:25:25.720
But for small groups and especially
on local networks where you know

00:25:25.720 --> 00:25:29.510
that the group size is not too big,
the bandwidth is really high,

00:25:29.510 --> 00:25:32.710
the latency is low,
this is actually pretty attractive.

00:25:34.570 --> 00:25:38.500
So reason number three for
doing publishing is data flow.

00:25:38.570 --> 00:25:44.470
And there's a good quote from this by
one of the architects of the internet,

00:25:44.480 --> 00:25:46.700
by which I mean, of course,
Ted Stevens of Alaska.

00:25:46.810 --> 00:25:50.170
"The internet is a series of tubes."

00:25:51.700 --> 00:25:53.530
A brilliant metaphor.

00:25:53.670 --> 00:25:56.700
So use a different metaphor.

00:25:56.700 --> 00:26:00.150
Web 2.0,
a lot of this whole hype is about

00:26:00.510 --> 00:26:04.460
using websites as applications,
not as this individual,

00:26:04.460 --> 00:26:06.390
isolated thing that you
go to in your browser,

00:26:06.420 --> 00:26:08.740
but an application that
can do stuff for you.

00:26:08.770 --> 00:26:11.460
And that has APIs so
that other applications,

00:26:11.460 --> 00:26:14.080
whether local or remote,
can access that data

00:26:14.080 --> 00:26:15.490
and do stuff with it.

00:26:15.760 --> 00:26:18.980
So these APIs were, of course,
in their infrastructure using

00:26:18.990 --> 00:26:21.740
HTTP as the function call mechanism.

00:26:21.770 --> 00:26:25.180
And fundamental operators in
HTTP are POST for creating

00:26:25.180 --> 00:26:29.460
a new piece of information,
GET for retrieving that information,

00:26:29.500 --> 00:26:32.190
PUT for replacing an existing
piece of information's content,

00:26:32.310 --> 00:26:34.890
and DELETE for making something go away.

00:26:35.630 --> 00:26:39.940
In particular, this way of looking at it
has become widely known as

00:26:40.030 --> 00:26:42.700
the REST architectural style.

00:26:44.720 --> 00:26:48.530
So if we have these applications
up on the web with APIs,

00:26:48.530 --> 00:26:51.850
you can sort of look at
a feed as a data pipe,

00:26:51.850 --> 00:26:56.580
a tube that you can set up from
one point to another point or from

00:26:56.610 --> 00:26:59.360
one point to many different points.

00:26:59.360 --> 00:27:03.370
And the entries are these little
cylinders with stuff inside that

00:27:03.450 --> 00:27:05.710
go shooting through these tubes.

00:27:06.510 --> 00:27:11.190
And so you can use this as a wiring
model for connecting different servers,

00:27:11.200 --> 00:27:14.800
different sites,
different applications together.

00:27:16.150 --> 00:27:19.600
There are several startups that
have been exploring this space.

00:27:19.600 --> 00:27:21.990
RSS Bus is explicitly
doing it with RSS feeds,

00:27:21.990 --> 00:27:23.240
which is pretty interesting.

00:27:23.240 --> 00:27:26.080
KnowNow is another company that's
been doing this for a couple of years,

00:27:26.080 --> 00:27:29.450
and they've been doing some really
interesting work with how to do this

00:27:29.510 --> 00:27:31.560
in a real-time or near-real-time way.

00:27:31.720 --> 00:27:36.740
And then IBM has actually been doing
a lot of interesting stuff with this.

00:27:36.790 --> 00:27:37.950
They have a good quote.

00:27:38.000 --> 00:27:42.620
"An enterprise service bus is
a pattern of middleware that

00:27:42.620 --> 00:27:45.410
unifies and connects services,
applications,

00:27:45.410 --> 00:27:47.800
and resources within a business."

00:27:48.170 --> 00:27:51.860
The Service Bus is a pattern
of middleware that unifies

00:27:51.860 --> 00:27:55.950
and connects services,
applications, and resources.

00:27:55.950 --> 00:28:00.590
If you think about all these
different services that you might use,

00:28:00.610 --> 00:28:04.950
whether on your machine,
on local machines, on the internet,

00:28:05.020 --> 00:28:08.850
websites like Flickr, blogs,
all this kind of stuff,

00:28:08.850 --> 00:28:12.610
you can think about ways of
plugging things together,

00:28:12.610 --> 00:28:18.080
of passing things on to other people,
of using them in different ways.

00:28:18.190 --> 00:28:21.390
You can think about passing data
from one to another using feeds by

00:28:21.390 --> 00:28:25.660
having these entities both publishing
and subscribing information.

00:28:26.980 --> 00:28:30.200
So after all this hand waving,
let's have an actual demo,

00:28:30.210 --> 00:28:31.940
show you some real stuff.

00:28:31.940 --> 00:28:34.840
Ricci and I put this demo
together a couple of months

00:28:34.970 --> 00:28:38.480
ago to impress some executives.

00:28:40.080 --> 00:28:42.320
We didn't want to do something
with just text because that's

00:28:42.510 --> 00:28:46.370
kind of boring and so we thought,
okay, iPhones, done photos already,

00:28:46.370 --> 00:28:50.720
but what if we made
Photo Booth do casting?

00:28:50.720 --> 00:28:55.930
So we have Booth casting.

00:28:59.000 --> 00:29:09.600
[Transcript missing]

00:29:10.910 --> 00:29:14.740
And just like normal photo booth,
we can take pictures with it.

00:29:14.800 --> 00:29:17.790
All the interest of science.

00:29:17.840 --> 00:29:23.080
Okay.

00:29:27.330 --> 00:29:30.870
Now, when I look at this picture,
there's a new button

00:29:30.980 --> 00:29:32.480
here called Boothcast.

00:29:36.470 --> 00:29:41.560
So I can actually mark this
picture to be published.

00:29:41.620 --> 00:29:44.650
And now I can run this
PhotoWatcher application

00:29:46.320 --> 00:29:51.660
So I'm subscribed to my own machine here,
so my picture just showed up down here.

00:29:51.790 --> 00:29:53.750
But I'm also subscribed
to Ricci's machine.

00:29:53.890 --> 00:29:55.440
In fact, I can go here and look.

00:29:55.480 --> 00:29:58.920
This is using Bonjour to show me all
of the other clients on the local

00:29:58.920 --> 00:30:01.300
network that are running booth casting.

00:30:03.000 --> 00:30:05.600
So if Ricci now takes a picture.

00:30:05.620 --> 00:30:07.370
I have a slight issue here.

00:30:07.480 --> 00:30:09.020
Oh, technical difficulties.

00:30:09.060 --> 00:30:09.870
Don't tell the audience.

00:30:09.900 --> 00:30:10.800
Just work around it.

00:30:10.830 --> 00:30:14.290
OK, I'll distract them by taking
another picture myself.

00:30:16.810 --> 00:30:19.780
So let's pick a different effect.

00:30:19.810 --> 00:30:21.730
Glow, I like glow.

00:30:21.760 --> 00:30:23.410
Looks good on you.

00:30:27.350 --> 00:30:29.640
Plank.

00:30:29.670 --> 00:30:35.420
And over in the photo watcher,
if all goes according to plan,

00:30:36.330 --> 00:30:39.140
It will drop into place, right?

00:30:39.140 --> 00:30:39.590
Oh, yeah.

00:30:39.640 --> 00:30:40.260
You need to publish.

00:30:40.280 --> 00:30:41.500
Duh.

00:30:41.590 --> 00:30:43.200
See, it's a privacy control.

00:30:43.200 --> 00:30:44.520
This is a feature.

00:30:44.550 --> 00:30:47.090
You don't want these dorky pictures
getting published unless you actually

00:30:47.090 --> 00:30:48.330
tell it that you want to publish them.

00:30:48.510 --> 00:30:50.180
It's not a bug.

00:30:55.980 --> 00:30:58.600
So now that I'm sharing it, it shows up.

00:30:58.660 --> 00:31:05.740
OK,
so that could all be smoke and mirrors.

00:31:05.740 --> 00:31:06.720
It's on the same machine.

00:31:06.850 --> 00:31:09.120
So if-- So go ahead and
show them the RSS feed.

00:31:09.120 --> 00:31:11.060
Yeah, OK.

00:31:11.420 --> 00:31:14.640
So the way this works is,
like this being the RSS session,

00:31:14.640 --> 00:31:16.920
we're actually publishing this as a feed.

00:31:16.950 --> 00:31:21.000
And I can view this just in Safari RSS.

00:31:21.000 --> 00:31:22.900
You got pictures here?

00:31:25.430 --> 00:31:28.000
Just click on the photos
and you can get each one.

00:31:28.040 --> 00:31:30.350
Oh, right, because they're enclosures.

00:31:30.480 --> 00:31:32.560
So it's just a regular feed.

00:31:32.560 --> 00:31:36.980
We're using the Atom enclosure element.

00:31:37.100 --> 00:31:39.320
To point to the pictures
which are also being served,

00:31:39.450 --> 00:31:43.940
it's the same Apache server that's
used for personal web sharing.

00:31:46.070 --> 00:31:48.630
And so we subscribe to the
feeds from the other machines in

00:31:48.630 --> 00:31:50.380
this PhotoWatcher application.

00:31:50.380 --> 00:31:53.900
And when a new item appears,
we download the picture for it

00:31:53.900 --> 00:31:55.800
and it shows up in the window.

00:31:55.800 --> 00:31:58.260
Since we're using Bonjour,
we can actually,

00:31:58.260 --> 00:32:02.720
in addition to just broadcasting the
fact that we're running this application,

00:32:02.720 --> 00:32:05.410
it can also broadcast the
modification date of the feed.

00:32:05.900 --> 00:32:08.730
And that is propagated
pretty much in real time,

00:32:08.790 --> 00:32:10.530
within a couple of seconds.

00:32:10.600 --> 00:32:13.860
So when a picture is published by
anybody else out on the network,

00:32:13.910 --> 00:32:16.300
this application will detect
that there's a new picture,

00:32:16.300 --> 00:32:20.200
fetch the new feed,
and display it in a couple of seconds.

00:32:21.060 --> 00:32:25.120
So unfortunately I thought I was going to
get to display some fine photos for you.

00:32:25.170 --> 00:32:27.020
A slight issue here
with the video camera,

00:32:27.170 --> 00:32:28.790
so Jens, back to you.

00:32:28.850 --> 00:32:32.200
Oh well.

00:32:32.230 --> 00:32:34.370
So back to the slides please.

00:32:45.400 --> 00:32:47.290
Okay, down to how.

00:32:47.300 --> 00:32:49.300
Let's look at how this actually works.

00:32:49.460 --> 00:32:51.700
The good news is that the
publishing API is pretty simple.

00:32:51.700 --> 00:32:54.890
It's really just like subscribing,
just in reverse.

00:32:55.470 --> 00:32:56.500
So I'll take an example.

00:32:56.600 --> 00:32:59.280
The user of your application
has just typed in an

00:32:59.280 --> 00:33:03.550
incredibly important blog post,
and they want to get it published.

00:33:03.640 --> 00:33:06.650
So you will grab this
text out of the text view,

00:33:06.660 --> 00:33:08.900
and you wrap it up in a PSContent object.

00:33:08.940 --> 00:33:10.740
The same class that Ricci
was telling you about,

00:33:10.740 --> 00:33:13.270
just now you're actually
creating one from nowhere and

00:33:13.270 --> 00:33:15.010
stuffing the text into it.

00:33:15.140 --> 00:33:18.430
The PSContent then goes
into a new PSPublishedEntry.

00:33:18.640 --> 00:33:20.660
PSPublishedEntry is a
subclass of PSEntry.

00:33:20.660 --> 00:33:22.210
You can think of it as
being the mutable subclass,

00:33:22.210 --> 00:33:24.190
sort of like NSMutableArray.

00:33:24.280 --> 00:33:26.250
So you can create one of these,
and then you can actually

00:33:26.260 --> 00:33:29.800
start putting content into it,
setting all the metadata, the title,

00:33:29.800 --> 00:33:31.110
et cetera, et cetera.

00:33:32.320 --> 00:33:35.040
The entry you then put
into a PSPublished feed.

00:33:35.140 --> 00:33:40.120
Again, this is a subclass of PSFeed where
you specify where to put the data,

00:33:40.120 --> 00:33:43.910
where it gets uploaded to,
what the title of the feed is, et cetera.

00:33:45.680 --> 00:33:48.360
But you might not just have text.

00:33:48.360 --> 00:33:51.120
Finally, all the stuff now goes
into the PubSub database,

00:33:51.120 --> 00:33:53.140
the persistent store that we have.

00:33:53.140 --> 00:33:54.700
But you might not just
be publishing text.

00:33:54.810 --> 00:33:57.180
If this is a podcast,
then you might have this

00:33:57.290 --> 00:33:59.230
audio file sitting out here.

00:33:59.400 --> 00:33:59.690
Simple.

00:33:59.840 --> 00:34:03.110
You just take the audio file,
you create a PS enclosure object,

00:34:03.270 --> 00:34:06.220
point it at the file,
and then add that to the entry.

00:34:06.350 --> 00:34:08.640
Similarly,
if you have some kind of custom XML data,

00:34:08.640 --> 00:34:12.740
it might be like metadata using the
Dublin Core namespace or some kind

00:34:12.740 --> 00:34:16.900
of custom namespace that you made
up or something like iTunes data,

00:34:16.920 --> 00:34:20.010
you just take that XML and
add it to the PS Published

00:34:20.100 --> 00:34:22.310
entry using another accessor.

00:34:22.930 --> 00:34:25.190
Finally, when you're all done,
when the feed's been assembled,

00:34:25.210 --> 00:34:27.620
the entry's been added,
and the user goes and

00:34:27.620 --> 00:34:29.190
hits that Publish button,

00:34:31.060 --> 00:34:35.890
The agent kicks off,
reads the feed out of the database,

00:34:35.990 --> 00:34:38.320
and then sends it off to the world.

00:34:38.780 --> 00:34:40.860
We have a couple of different
mechanisms here for publishing,

00:34:40.860 --> 00:34:42.690
different protocols.

00:34:43.040 --> 00:34:47.910
First, we can directly assemble the
feed as XML data and upload it

00:34:47.910 --> 00:34:50.300
to pretty much any web server.

00:34:50.300 --> 00:34:53.860
We can use either the FTP protocol
or the WebDAV protocol,

00:34:53.860 --> 00:34:56.540
for example, for iDisk-type servers.

00:34:57.200 --> 00:35:02.270
We can also upload it similarly to
.mac in much the same way that iPhoto

00:35:02.380 --> 00:35:05.000
uploads feeds for photocasting.

00:35:05.000 --> 00:35:07.990
And we can use the Atom
publication protocol,

00:35:08.120 --> 00:35:11.390
which is sort of the cousin of
the Atom syndication format.

00:35:11.500 --> 00:35:14.200
It's a protocol that the same
working group is developing

00:35:14.200 --> 00:35:17.800
for uploading entries,
feeds.

00:35:17.800 --> 00:35:21.580
And that's supported by pretty
much all of the major blogging

00:35:21.580 --> 00:35:23.880
and content management systems.

00:35:24.520 --> 00:35:27.460
And lastly,
as demoed with the boothcasting demo,

00:35:27.740 --> 00:35:32.240
we can use Bonjour to advertise the
feed and the Apache server that's

00:35:32.240 --> 00:35:36.850
already on your machine to serve that
feed to machines on your local network,

00:35:36.850 --> 00:35:40.880
or even beyond if you have a static
IP address and the other machines that

00:35:40.880 --> 00:35:43.210
subscribe know what your address is.

00:35:45.060 --> 00:35:47.570
Let's look at an example
of the code for doing this.

00:35:47.720 --> 00:35:49.960
I'm going to go through pretty
much the same example that

00:35:49.980 --> 00:35:51.390
I showed you in box form.

00:35:51.450 --> 00:35:55.620
Just this time we're going to have some
nice comforting monos-based font for it.

00:35:57.910 --> 00:36:00.030
So first we're going
to create some content.

00:36:00.100 --> 00:36:03.240
We have some data that we
pull out of our NSTextView.

00:36:03.600 --> 00:36:05.150
We create a PSContent object.

00:36:05.250 --> 00:36:06.550
We init it with the data.

00:36:06.750 --> 00:36:09.570
And we give it MIME type text HTML.

00:36:10.800 --> 00:36:11.920
Now we create an entry.

00:36:12.160 --> 00:36:18.050
We just initialize a PSPublished entry,
give it a title, and pass the content in.

00:36:19.650 --> 00:36:21.880
We create the published feed.

00:36:21.920 --> 00:36:23.350
Just init the published feed.

00:36:23.470 --> 00:36:25.610
The protocol here,
we have a couple of constants

00:36:25.610 --> 00:36:28.360
that you can use to indicate
which publishing protocol,

00:36:28.360 --> 00:36:31.100
which of those nice icons in the
previous slide that you want to use.

00:36:31.200 --> 00:36:34.090
There is a server information
dictionary that you pass in which

00:36:34.090 --> 00:36:37.760
has key value pairs that indicate
protocol-specific information like

00:36:38.190 --> 00:36:43.660
the URL of the server or the account
name that you're using for login,

00:36:43.700 --> 00:36:45.190
things like that.

00:36:45.600 --> 00:36:47.140
And you can also pass in an identifier.

00:36:47.140 --> 00:36:50.340
This is the GUID, the universal ID that
your feed will acquire.

00:36:50.580 --> 00:36:54.390
Usually you pass in nil and we'll
make up a unique ID for you.

00:36:55.950 --> 00:37:02.100
Then finally, you take that feed and
you add your entry to it.

00:37:02.540 --> 00:37:05.150
To publish that stuff out to the world,
you just call publish on the feed.

00:37:05.340 --> 00:37:06.790
That's it.

00:37:06.840 --> 00:37:10.630
That takes the content from the local
database and uploads it to the server.

00:37:10.880 --> 00:37:14.410
This is an asynchronous operation,
so since obviously it's

00:37:14.410 --> 00:37:17.120
a network transfer,
it might take a while.

00:37:17.140 --> 00:37:21.650
You might not actually
be online at the moment.

00:37:21.720 --> 00:37:24.130
The server might be down.

00:37:24.180 --> 00:37:26.110
So you can use notifications to
find out when the information

00:37:26.110 --> 00:37:26.110
actually gets published.

00:37:29.570 --> 00:37:32.720
But after you publish an entry,
that's not really the end of the story.

00:37:32.830 --> 00:37:36.420
So your UI will probably want to
show the user a list of the entries

00:37:36.510 --> 00:37:38.360
that they previously published.

00:37:38.640 --> 00:37:39.340
How do you do that?

00:37:39.340 --> 00:37:40.340
Well, it's pretty easy.

00:37:40.340 --> 00:37:42.940
Since PSPublishedFeed
is a subclass of PSFeed,

00:37:42.940 --> 00:37:46.590
that means you get all the same
accessors that you had on PSFeed.

00:37:46.710 --> 00:37:47.770
So you can call entries.

00:37:47.790 --> 00:37:49.540
You can get the entire list of entries.

00:37:49.700 --> 00:37:51.190
You can get entry with ID.

00:37:51.410 --> 00:37:54.760
So if you create an entry
and you grab the entry's

00:37:54.760 --> 00:37:59.220
ID accessor and store that away,
which is what the core data album

00:37:59.220 --> 00:38:03.430
browser example that I showed you does,
the ID is just a short string.

00:38:03.600 --> 00:38:07.050
And if you remember that ID,
you can go back later any time.

00:38:07.250 --> 00:38:07.950
It's persistent.

00:38:08.050 --> 00:38:10.840
So you can come back any time in
the future and ask the feed for the

00:38:10.840 --> 00:38:13.400
entry with that ID and get it back.

00:38:15.100 --> 00:38:18.610
So in particular to update an entry,
if the user finds a typo, they go back,

00:38:18.730 --> 00:38:21.880
select the entry, edit the text,
hit Save.

00:38:22.040 --> 00:38:25.680
First you get the entry back from the
feed by calling feed entryWithIdentifier

00:38:25.800 --> 00:38:27.680
and the enter ID that you have.

00:38:27.750 --> 00:38:30.830
Now you can call setTitle, setContent,
setEnclosures.

00:38:30.940 --> 00:38:34.210
There's a bunch of accessors here
that you can use to update all

00:38:34.230 --> 00:38:35.860
the information in that entry.

00:38:35.980 --> 00:38:38.180
And then when you're done,
you just say feed publish.

00:38:38.220 --> 00:38:42.330
And the feed will go and upload
either the entire feed or just

00:38:42.430 --> 00:38:46.350
that one entry to the server,
depending on what protocol you're using.

00:38:47.970 --> 00:38:49.430
Similarly,
you might want to remove an entry.

00:38:49.440 --> 00:38:51.880
This is useful when you wake
up in the morning after a

00:38:51.880 --> 00:38:55.360
drunken stupor remembering that,
oh yeah, you wrote that blog post

00:38:55.380 --> 00:38:57.200
at 2:00 AM about your boss.

00:38:57.200 --> 00:38:59.090
And easy.

00:38:59.600 --> 00:39:03.400
You just call feed,
remove entry on that entry

00:39:03.480 --> 00:39:08.350
after you get the entry back
with its unique identifier.

00:39:08.350 --> 00:39:11.190
And then you call feed, publish,
and hopefully it gets up to the server

00:39:11.190 --> 00:39:11.190
before your boss logs in in the morning.

00:39:11.990 --> 00:39:16.250
I should clarify that this is--
you only need to delete entries

00:39:16.270 --> 00:39:20.270
if the user actually really wants
that entry to go away forever.

00:39:20.480 --> 00:39:24.960
The feeds will only show a list
of the last 20 entries or so.

00:39:24.960 --> 00:39:28.390
You're not really responsible
for managing that.

00:39:28.650 --> 00:39:33.100
We take care of maintaining the
feed at a fixed maximum size.

00:39:33.220 --> 00:39:37.410
So you can keep all the old
entries there in the database.

00:39:37.420 --> 00:39:39.410
We'll just put the latest end
of them in the feed for you.

00:39:41.900 --> 00:39:43.120
So now onto where.

00:39:43.120 --> 00:39:46.790
I showed you the nice icons and kind of
waved my hands a bit about the protocols.

00:39:46.870 --> 00:39:48.640
Let's look at those in some more detail.

00:39:48.640 --> 00:39:50.880
We have these four constants
that you pass in when you

00:39:50.910 --> 00:39:52.290
create a PSPublished feed.

00:39:52.390 --> 00:39:55.260
PSUploadPublishingProtocol,
.macPublishingProtocol,

00:39:55.350 --> 00:39:58.880
AtomPublishingProtocol,
and BonjourPublishingProtocol.

00:40:00.100 --> 00:40:03.100
PS upload publishing protocol
is really straightforward.

00:40:03.100 --> 00:40:06.120
It's just a direct upload.

00:40:06.180 --> 00:40:09.390
You can either use webdav,
in which case we use an http put

00:40:09.600 --> 00:40:13.320
command to upload the contents,
or you can use ftp,

00:40:13.350 --> 00:40:15.500
in which case we'll log in with ftp.

00:40:15.690 --> 00:40:20.630
And pretty much any web server in
existence that you actually have

00:40:20.770 --> 00:40:25.960
write access to can be talked to
using one of those two protocols.

00:40:25.960 --> 00:40:28.820
So anywhere that you can put web content,
you can now put a feed.

00:40:31.160 --> 00:40:33.440
The PS.Mac publishing
protocol is sort of similar.

00:40:33.440 --> 00:40:35.600
It's specialized to talk to .Mac.

00:40:35.600 --> 00:40:39.020
It uses your .Mac identity,
it gets your .Mac password

00:40:39.070 --> 00:40:41.990
out of the keychain,
and will just upload the feed,

00:40:41.990 --> 00:40:44.730
the individual entries of it, up to .Mac.

00:40:47.980 --> 00:40:51.140
Atom Publishing Protocol needs
a little bit more explanation.

00:40:51.140 --> 00:40:56.500
As I said, this is a kind of cousin of
the Atom syndication format.

00:40:56.610 --> 00:41:00.340
The syndication format has
sort of gone golden master.

00:41:00.340 --> 00:41:03.220
It's been released as an RFC.

00:41:03.220 --> 00:41:05.760
The publishing protocol
is a little bit earlier.

00:41:05.760 --> 00:41:08.220
It's still under development.

00:41:08.220 --> 00:41:12.760
The current state of it is an internet
draft which gets updated periodically.

00:41:12.920 --> 00:41:15.170
But in practice, it is fairly stable.

00:41:15.180 --> 00:41:20.200
And the protocol has been adopted already
by most of the major entities in the

00:41:20.200 --> 00:41:22.730
blogging and content management world.

00:41:22.740 --> 00:41:24.080
I've got a list of them there.

00:41:24.080 --> 00:41:27.620
So Leopard Server will support
the Atom Publishing Protocol,

00:41:27.810 --> 00:41:32.060
Blogger, Blogspot, MovableType,
LiveJournal, TypePad, et cetera,

00:41:32.120 --> 00:41:33.270
et cetera.

00:41:33.500 --> 00:41:39.200
If you want to track the progress of this
protocol and look at the details of it,

00:41:39.200 --> 00:41:43.510
you can use the URL there to look at
the different drafts going around.

00:41:46.050 --> 00:41:48.960
So finally there's the Bonjour publishing
protocol which is sort of I guess

00:41:48.960 --> 00:41:52.300
the Apache and Bonjour publishing
protocol which is used for

00:41:52.300 --> 00:41:54.100
basically personal feed sharing.

00:41:54.100 --> 00:41:59.210
The way it works is that the
agent uses Bonjour to advertise

00:41:59.210 --> 00:42:00.490
the fact that you have a feed.

00:42:00.500 --> 00:42:05.450
This is similar to the way that
Apache already advertises the fact

00:42:05.610 --> 00:42:08.750
that you have web sharing turned
on and if you go into Safari and

00:42:08.750 --> 00:42:11.720
look in the Bonjour column
there in the bookmarks view,

00:42:11.770 --> 00:42:13.750
you can see a list of
the other web servers.

00:42:14.620 --> 00:42:16.700
We use kind of a specialized
version of this to say,

00:42:16.700 --> 00:42:19.270
hey, we are sharing feeds.

00:42:20.200 --> 00:42:23.480
So another user, another client on the
local network can see this.

00:42:23.600 --> 00:42:26.120
It can see the name of your feed,
its URL,

00:42:26.370 --> 00:42:27.920
and then they can go and fetch it.

00:42:27.980 --> 00:42:30.220
The request comes in from http.

00:42:30.280 --> 00:42:33.950
The Apache server receives that request,
and through some fancy plumbing,

00:42:33.950 --> 00:42:37.790
it gets redirected over to our agent,
which then gets the content out of the

00:42:37.910 --> 00:42:44.130
PubSub database and sends it back as
XML data to the client that requests it.

00:42:44.200 --> 00:42:47.760
And as I talked about during the demo,
Bonjour has this capability

00:42:47.760 --> 00:42:50.420
that in addition to broadcasting
the existence of something,

00:42:50.420 --> 00:42:52.300
you can broadcast metadata about it.

00:42:52.430 --> 00:42:57.090
And a piece of metadata that we broadcast
with the feeds is the modification date.

00:42:57.150 --> 00:43:03.640
And that information gets pushed out
and updated pretty much in real time.

00:43:03.740 --> 00:43:07.100
Within a second or two,
if there's a lot of packet loss,

00:43:07.100 --> 00:43:08.500
it might take five or 10 seconds.

00:43:08.500 --> 00:43:10.560
But really quickly, it will get there,
which is much,

00:43:10.620 --> 00:43:13.130
much better than the typical
kind of half-hour latency

00:43:13.130 --> 00:43:17.220
that you get with RSS feeds,
where the agent or the client or

00:43:17.220 --> 00:43:20.300
whatever sits there and polls the
server every once in a while saying,

00:43:20.330 --> 00:43:21.180
is there anything new?

00:43:21.180 --> 00:43:22.140
Is there anything new?

00:43:22.160 --> 00:43:24.210
In this case,
the server will actually tell the

00:43:24.320 --> 00:43:25.880
clients that there's new stuff.

00:43:25.990 --> 00:43:29.190
So this enables some sort of interesting
new applications like the booth sharing,

00:43:29.440 --> 00:43:30.820
where stuff just shows up in real time.

00:43:30.820 --> 00:43:34.840
You could even imagine doing
a chat application with this.

00:43:37.630 --> 00:43:40.760
Finally, if all those protocols aren't
enough and if we just weren't

00:43:40.760 --> 00:43:44.220
imaginative enough to meet your needs,
you can take things in your own hands

00:43:44.430 --> 00:43:47.290
and get access to the feed data yourself.

00:43:47.360 --> 00:43:48.480
So I've got some examples here.

00:43:48.480 --> 00:43:53.100
You can call data representation
of type on a PSPublished feed and

00:43:53.100 --> 00:43:57.460
actually get the raw Atom data for
that feed or the raw RSS 2.0 data

00:43:58.030 --> 00:44:00.600
and then put it wherever you want.

00:44:00.790 --> 00:44:03.110
If you want to manipulate it a bit more,
you can call

00:44:03.240 --> 00:44:05.000
XML representation on the feed.

00:44:05.000 --> 00:44:07.920
And what we give you is
essentially a DOM tree.

00:44:07.920 --> 00:44:11.920
It's this NSXML element of
the root entry of the feed.

00:44:11.920 --> 00:44:15.190
And you can crawl through this tree,
look at the data in it,

00:44:15.340 --> 00:44:16.370
maybe even manipulate it.

00:44:16.460 --> 00:44:19.820
It's very easy then to convert it
into XML if that's what you want to

00:44:19.830 --> 00:44:20.930
do after you're done changing it.

00:44:20.990 --> 00:44:23.190
Similarly,
you can get the XML representation of

00:44:23.190 --> 00:44:25.950
any individual entry if you want to
do stuff on an entry-by-entry basis.

00:44:26.960 --> 00:44:29.460
So hopefully that's enough
flexibility to do really anything

00:44:29.460 --> 00:44:30.980
that you can imagine with feeds.

00:44:33.980 --> 00:44:37.140
So finally, a little bit about who.

00:44:37.230 --> 00:44:39.720
In the case of some
of these applications,

00:44:39.730 --> 00:44:44.050
like the small group publishing,
you might have information that

00:44:44.050 --> 00:44:46.060
isn't world accessible information.

00:44:46.060 --> 00:44:47.980
It might be your address
book you're publishing.

00:44:47.980 --> 00:44:50.140
It might be confidential
company information.

00:44:50.140 --> 00:44:52.760
So you really don't want to have
this usual model where you've got

00:44:52.760 --> 00:44:55.230
a web server that's wide open to
the world and anybody can come

00:44:55.230 --> 00:44:57.200
along and subscribe to your feed.

00:44:57.250 --> 00:45:00.100
So we're going to give you
some means of access control.

00:45:00.120 --> 00:45:02.440
Essentially, an ACL,
an access control list for

00:45:02.440 --> 00:45:04.560
any feed that you publish.

00:45:04.570 --> 00:45:09.690
The identities that will be the
items in the access control list

00:45:09.700 --> 00:45:11.640
are identity services identities.

00:45:11.660 --> 00:45:13.640
This is another new framework in Leopard.

00:45:13.670 --> 00:45:16.900
There are going to be some sessions
about it during the conference.

00:45:17.520 --> 00:45:20.190
The support for this kind of depends
on what protocol you're using just

00:45:20.420 --> 00:45:22.520
by we're limited by what we can do.

00:45:22.610 --> 00:45:24.840
So with the .mac publishing protocol,
if you're publishing

00:45:24.840 --> 00:45:27.100
your feed up to .mac,
then you can use .mac

00:45:27.100 --> 00:45:30.770
identities to specify who has
access to the feed or not.

00:45:30.980 --> 00:45:33.390
If you're using the Atom publishing
protocol and you're publishing up to,

00:45:33.500 --> 00:45:37.040
say, a Leopard server,
you can use any identities that are known

00:45:37.060 --> 00:45:41.460
to directory services by both you and
that server to specify who has access.

00:45:41.560 --> 00:45:47.520
And if you're using the
Bonjour publishing protocol,

00:45:47.520 --> 00:45:51.180
pretty much you can use any sort
of identity that can use its

00:45:51.180 --> 00:45:51.180
credentials to verify itself
to your local Apache server.

00:45:51.280 --> 00:45:55.050
And I think that some of the
OS X server sessions are talking

00:45:55.060 --> 00:45:58.200
more about those kind of things,
how those credentials work.

00:45:58.350 --> 00:46:01.300
The API for this is even more
preliminary than the rest of it.

00:46:01.300 --> 00:46:03.620
In fact,
it's not there at all on your seed.

00:46:03.850 --> 00:46:07.770
We're working on designing
the API for that.

00:46:09.320 --> 00:46:10.280
Okay, so what?

00:46:10.350 --> 00:46:11.900
Here's the big conclusion.

00:46:11.900 --> 00:46:14.220
You can write applications
that use a straightforward,

00:46:14.220 --> 00:46:17.020
high-level API that's based on
widely adopted open standards,

00:46:17.020 --> 00:46:17.530
i.e.

00:46:17.640 --> 00:46:21.140
RSS, Atom, Atom publishing protocol, etc.

00:46:21.210 --> 00:46:25.120
to publish, collaborate,
push and pull distributed data across the

00:46:25.260 --> 00:46:30.390
internet or around your local network.

00:46:30.570 --> 00:46:34.060
And that is PubSub.

00:46:40.650 --> 00:46:44.800
So Mark Malone is your internet
partnership manager contact if you

00:46:44.800 --> 00:46:46.950
want to talk about more uses for this.

00:46:46.950 --> 00:46:51.730
We have set up an email address,
pubsubfeedback@group.apple.com

00:46:51.730 --> 00:46:55.530
that you can send emails to
if you have feedback for us.

00:46:55.600 --> 00:46:58.890
We can try to reply on
an individual basis.

00:46:58.970 --> 00:47:04.590
It's not really an actual
discussion group mailing list,

00:47:04.590 --> 00:47:04.590
but you can send us information that way.