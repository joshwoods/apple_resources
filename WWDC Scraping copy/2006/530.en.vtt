WEBVTT

00:00:15.380 --> 00:00:19.360
Welcome to deploying
Oracle RAC 10g for Mac OS X Server.

00:00:19.360 --> 00:00:22.650
I'd like to introduce you to...

00:00:24.280 --> 00:00:25.980
Barb Lunhild from Oracle Corporation.

00:00:25.980 --> 00:00:26.640
Barb.

00:00:26.650 --> 00:00:27.750
Thanks, Chris.

00:00:27.820 --> 00:00:31.290
Good morning, everyone,
and thank you for sticking around for

00:00:31.400 --> 00:00:33.000
the last session of the conference.

00:00:33.000 --> 00:00:34.450
I appreciate it.

00:00:34.460 --> 00:00:37.220
My name, as Chris said, is Barb Lunhild.

00:00:37.220 --> 00:00:41.760
I'm currently product manager for
Oracle Real Application Clusters.

00:00:41.760 --> 00:00:46.740
How many people in the
audience use Oracle at all?

00:00:46.800 --> 00:00:47.870
Barb Lunhild.

00:00:48.260 --> 00:00:48.590
Oh, good.

00:00:49.000 --> 00:00:49.300
Okay.

00:00:49.300 --> 00:00:53.480
And how many of you have used
real application clusters?

00:00:53.480 --> 00:00:56.400
So a few of you know what it is.

00:00:56.400 --> 00:01:01.580
And how many of you who've tried
it on your Apple Mac OS platform?

00:01:01.580 --> 00:01:03.540
So even a few of you have done that.

00:01:03.540 --> 00:01:04.240
So great.

00:01:04.760 --> 00:01:06.400
So I've worked at Oracle.

00:01:06.440 --> 00:01:09.130
I just had my 10th anniversary there.

00:01:09.130 --> 00:01:11.480
I started out as a field consultant.

00:01:11.480 --> 00:01:14.560
If you notice the accent
somewhere along the way,

00:01:14.560 --> 00:01:18.520
I originally started in Canada and
worked there in consulting,

00:01:18.520 --> 00:01:21.780
moved into the sales
consulting organization,

00:01:21.890 --> 00:01:25.400
and now work at headquarters and
in product manager for the real

00:01:25.570 --> 00:01:27.460
application clusters option.

00:01:27.460 --> 00:01:30.760
So for a lot of my career at Oracle,
I've dealt a lot with the high

00:01:30.760 --> 00:01:34.740
availability side of database and
trying to make your applications.

00:01:34.760 --> 00:01:37.300
And your database very highly available.

00:01:37.300 --> 00:01:41.420
And that's what real application
clusters brings to the table.

00:01:41.420 --> 00:01:45.600
It's an option of your Oracle database
that allows you to have flexible

00:01:45.600 --> 00:01:48.320
scalability and very high availability.

00:01:51.670 --> 00:01:54.880
So what I'm going to talk to
you about this morning is what

00:01:54.960 --> 00:01:57.980
Oracle Real Application Clusters is,
just to make sure we're

00:01:57.980 --> 00:02:01.660
all on the same page and we
understand what the product is.

00:02:01.700 --> 00:02:05.510
And then give you some best
practices around deploying

00:02:05.510 --> 00:02:07.510
RAC in your organization.

00:02:07.600 --> 00:02:11.270
And then after that,
my colleague Jeff Needham

00:02:11.270 --> 00:02:12.870
is going to come up.

00:02:13.090 --> 00:02:16.630
And Jeff's been doing some work
with the Real Application Clusters

00:02:16.630 --> 00:02:18.080
on the Mac OS platform.

00:02:18.510 --> 00:02:21.720
And he's going to give you
some tips specifically aimed

00:02:21.920 --> 00:02:23.420
at the Mac OS platform.

00:02:26.770 --> 00:02:29.700
So to start off with,
I just thought I'd give you

00:02:29.700 --> 00:02:31.240
a quote from Noel Yohanna.

00:02:31.240 --> 00:02:34.930
Noel is one of the analysts
from Forrester Research,

00:02:34.940 --> 00:02:40.120
and he did a review of
Oracle real application clusters,

00:02:40.120 --> 00:02:44.380
talked to many of our customers,
and produced a document,

00:02:44.380 --> 00:02:48.000
which is available to you
on the oracle.com website.

00:02:48.000 --> 00:02:52.200
But his summary out of the
document was that really,

00:02:52.200 --> 00:02:55.600
Oracle real application clusters
should be part of anybody's

00:02:55.670 --> 00:02:56.980
Oracle database strategy.

00:03:00.770 --> 00:03:05.840
So here's my standard slide for
what is real application clusters.

00:03:05.840 --> 00:03:07.860
What's the architecture behind it?

00:03:07.860 --> 00:03:10.760
Because really it's a
single Oracle database.

00:03:10.840 --> 00:03:16.180
So for those of you who are familiar with
the Oracle database and know what it is,

00:03:16.180 --> 00:03:19.340
then RAC is just bringing
it a step further.

00:03:19.500 --> 00:03:23.390
And one of the things you have to
think about slightly differently when

00:03:23.440 --> 00:03:27.450
you start talking about RAC is the
fact that we have a single database.

00:03:27.450 --> 00:03:30.150
It's one database,
so we have our files sitting

00:03:30.150 --> 00:03:33.520
out there on storage,
but we have multiple instances.

00:03:33.520 --> 00:03:37.570
And when I say an Oracle instance,
what I'm talking about is the memory

00:03:37.870 --> 00:03:42.230
structures and the processes that sit
on the server that allow you to access

00:03:42.230 --> 00:03:44.910
that data that you have stored in there.

00:03:44.920 --> 00:03:48.880
So in a RAC environment,
we have one to many instances.

00:03:49.690 --> 00:04:18.020
So if we look at the picture here,
we start at the bottom.

00:04:18.020 --> 00:04:19.480
We've got the database,
and we've got the Oracle instance.

00:04:19.480 --> 00:04:19.480
So we've got the Oracle database,
and we've got the Oracle instance.

00:04:19.500 --> 00:04:21.900
And then we have the data structures
sitting out there on disk.

00:04:21.990 --> 00:04:26.670
And because it's a single database,
then you must have it on shared storage.

00:04:26.760 --> 00:04:30.500
So usually what that means to people
is that they have it on some type

00:04:30.500 --> 00:04:34.130
of storage area network device,
like your X-rayed server that you

00:04:34.250 --> 00:04:36.280
have in your Apple environment.

00:04:36.280 --> 00:04:41.700
And that is attached to the different
servers that are making up your cluster.

00:04:41.700 --> 00:04:46.620
It can also be a network-attached
storage if that's what you choose to use.

00:04:46.700 --> 00:04:48.700
So that's connected into Oracle.

00:04:49.500 --> 00:04:57.100
So we need a
cluster-supported file system.

00:04:57.160 --> 00:04:59.930
In Oracle,
we have introduced the automatic

00:05:00.060 --> 00:05:04.380
storage management option of the
database that allows you to do that.

00:05:04.440 --> 00:05:08.640
It's a volume manager and a file
system that works in a single server,

00:05:08.640 --> 00:05:13.180
single instance Oracle environment,
or a clustered environment.

00:05:13.180 --> 00:05:16.640
So you don't have to go out and
pay extra for a third party.

00:05:16.640 --> 00:05:19.160
You can also use what
we call raw devices.

00:05:19.560 --> 00:05:20.880
Or raw partitions.

00:05:20.880 --> 00:05:25.580
Or you can use certified
clustered file systems as well.

00:05:25.580 --> 00:05:28.640
So these are connected into your servers.

00:05:28.640 --> 00:05:32.610
And instead of just having one server
where we have our database instance,

00:05:32.610 --> 00:05:33.760
we can have many.

00:05:33.760 --> 00:05:38.670
And Oracle supports up to 100
nodes in the cluster and 100

00:05:38.670 --> 00:05:41.060
instances in the RAC database.

00:05:41.100 --> 00:05:44.990
Reality is, today,
the biggest clusters that we have in

00:05:45.240 --> 00:05:48.450
production are probably around 16 nodes.

00:05:48.480 --> 00:05:49.480
Although there's a lot of data.

00:05:49.500 --> 00:05:50.500
There's a lot of people out there.

00:05:50.500 --> 00:05:54.120
We just helped a customer in
Australia who's installing

00:05:54.140 --> 00:05:55.920
a 32-node cluster.

00:05:55.920 --> 00:05:59.960
Last year at Oracle World,
if any of you attended Oracle World,

00:05:59.960 --> 00:06:04.610
Chuck Rosewatt, our senior executive VP,
he had a demonstration

00:06:04.610 --> 00:06:06.340
of a 100-node cluster.

00:06:06.340 --> 00:06:07.640
So it's possible.

00:06:07.640 --> 00:06:11.320
There's people out there testing 40,
60 nodes in their cluster.

00:06:11.320 --> 00:06:15.800
But most people are around 16 today.

00:06:15.800 --> 00:06:19.120
Now, your users.

00:06:19.500 --> 00:06:21.000
You're connecting into
your Oracle database.

00:06:21.070 --> 00:06:24.580
Whether that's an end user connecting
directly to the database or whether

00:06:24.930 --> 00:06:28.390
that's an application that's connecting
as an application server layer,

00:06:28.470 --> 00:06:31.020
that connects in through
your public network.

00:06:31.040 --> 00:06:33.880
In a cluster environment,
we also have a second

00:06:34.000 --> 00:06:35.700
network in our environment.

00:06:35.840 --> 00:06:38.910
So you have to have at least
two network interfaces.

00:06:39.020 --> 00:06:41.580
If you want high availability,
you're probably going to have

00:06:41.580 --> 00:06:43.240
more than two network interfaces.

00:06:43.280 --> 00:06:46.640
So the second network interface
and the second network is

00:06:46.640 --> 00:06:48.650
what we call the interconnect.

00:06:48.840 --> 00:06:52.300
It's a private network used just
by the nodes in the cluster.

00:06:52.300 --> 00:06:56.330
The cluster software uses that
to talk and do a heartbeat,

00:06:56.330 --> 00:07:01.060
to know who the group membership is,
who's a part of the cluster.

00:07:01.060 --> 00:07:05.690
And RAC uses it as well to have
what we call shared memory,

00:07:05.870 --> 00:07:11.080
the global cache or the shared
cache across all the instances.

00:07:11.080 --> 00:07:14.620
What that means is when
you use an Oracle database,

00:07:14.620 --> 00:07:17.280
you select data, you insert data.

00:07:17.280 --> 00:07:18.820
Generally, that data gets interlinked.

00:07:18.840 --> 00:07:19.760
So we bring the data into memory first.

00:07:19.760 --> 00:07:23.350
So we bring the data into
memory and manipulate it.

00:07:23.690 --> 00:07:26.990
Well, if I've already got the data in
memory on one of the nodes in

00:07:26.990 --> 00:07:31.220
the cluster and somebody else
on another node needs that data,

00:07:31.220 --> 00:07:36.050
instead of forcing that Oracle instance
to do an IO down to disk,

00:07:36.110 --> 00:07:39.580
IOs can be costly operations for
us in our Oracle environment.

00:07:39.580 --> 00:07:41.600
I know I've already got it in memory.

00:07:41.600 --> 00:07:45.360
And it's much faster for me to ship
directly from memory to memory,

00:07:45.360 --> 00:07:48.820
the SGA to the SGA,
than it is to ship directly to the SGA.

00:07:48.820 --> 00:07:52.490
So I can ship that block,
whether it's just a shared

00:07:52.490 --> 00:07:56.800
block that's selected or a
dirty block that's been updated,

00:07:56.850 --> 00:08:00.220
and go directly from
one cache to another.

00:08:02.230 --> 00:08:04.300
So we have our two network interfaces.

00:08:04.390 --> 00:08:05.720
We have our public network.

00:08:05.890 --> 00:08:09.400
We have our private network
for the interconnect.

00:08:09.400 --> 00:08:12.620
This can be all managed
from a single point.

00:08:12.690 --> 00:08:15.400
Just because you have six nodes,
ten nodes,

00:08:15.400 --> 00:08:18.210
a hundred nodes in your cluster,
doesn't mean you have to do

00:08:18.240 --> 00:08:19.860
a hundred Oracle installs.

00:08:20.020 --> 00:08:22.780
All of the utilities
that Oracle provides,

00:08:22.780 --> 00:08:27.810
the Oracle Universal Installer,
the Database Configuration Assistant,

00:08:28.130 --> 00:08:32.720
the Network Configuration Assistant,
Grid Control, all are cluster aware.

00:08:32.720 --> 00:08:36.420
So they allow you a central point
of control for your cluster.

00:08:36.420 --> 00:08:41.590
And you also have command line
interfaces such as the SRV CTL command

00:08:41.590 --> 00:08:46.120
line to allow you from any point in
the cluster to manage the environment.

00:08:50.880 --> 00:08:53.150
So what are best practices
for deploying it?

00:08:53.320 --> 00:08:57.120
If you're going to start on a project
to deploy RAC in your environment,

00:08:57.120 --> 00:08:59.620
here's some of the things
you need to think about.

00:08:59.640 --> 00:09:04.130
And really what I want to say up
front is successfully deploying

00:09:04.130 --> 00:09:06.430
RAC isn't all about technology.

00:09:06.440 --> 00:09:07.960
It's pretty cool technology.

00:09:07.960 --> 00:09:08.860
I like it.

00:09:08.860 --> 00:09:13.980
I've been using it ever since
it started back in 9i release 1.

00:09:13.980 --> 00:09:17.590
But a lot of the times the
problems we see people having

00:09:17.590 --> 00:09:21.500
isn't just the RAC technology,
but it's their whole environment.

00:09:21.500 --> 00:09:24.930
And yes, clusters are a little bit
more complex than a single

00:09:24.930 --> 00:09:26.610
instance Oracle environment is.

00:09:26.680 --> 00:09:29.540
So you need to have some
good operating procedures.

00:09:29.540 --> 00:09:31.480
You need to have a test environment.

00:09:31.480 --> 00:09:35.060
Don't have a single node test
environment if a cluster is where

00:09:35.160 --> 00:09:36.580
you're deploying it in production.

00:09:36.640 --> 00:09:39.750
You want to test these
things before you go live.

00:09:39.840 --> 00:09:42.020
And you've got to have change control.

00:09:42.020 --> 00:09:46.360
A lot of times if you start throwing
fixes in there and not knowing what

00:09:46.460 --> 00:09:49.680
the right hand and left hand are doing,
you'll end up with a problem.

00:09:49.880 --> 00:09:54.540
your cluster's down
and you're in trouble.

00:09:55.930 --> 00:09:59.120
So let's look at a few of the
things that we want to do.

00:09:59.190 --> 00:10:03.790
Often when people are deploying RAC,
the reason they're doing it is

00:10:03.790 --> 00:10:06.160
either to scale their application.

00:10:06.440 --> 00:10:09.530
And the nice thing about RAC is
it allows you to take advantage

00:10:09.660 --> 00:10:11.820
of more commodity type hardware.

00:10:11.880 --> 00:10:15.020
You can take a whole
bunch of two CPU boxes,

00:10:15.190 --> 00:10:18.840
cluster them together,
and support a very large application.

00:10:18.890 --> 00:10:24.470
You can take advantage of the lower costs
that these smaller servers provide you.

00:10:26.000 --> 00:11:38.200
[Transcript missing]

00:11:38.720 --> 00:11:42.440
Now, if you're doing high availability or
even any application that's mission

00:11:42.440 --> 00:11:45.920
critical to your organization,
you usually have a service level.

00:11:45.920 --> 00:11:49.610
And if you're doing it with RAC,
we really want you to start up

00:11:49.610 --> 00:11:53.360
front and define that service
level with your customer.

00:11:53.360 --> 00:11:57.200
If it's a third party,
if it's your business organization,

00:11:57.200 --> 00:12:01.890
understand what your objective you're
achieving with this cluster is,

00:12:01.900 --> 00:12:05.080
what their expectations are,
and be realistic.

00:12:06.020 --> 00:12:09.080
I mean, you have to,
if you want very high availability,

00:12:09.080 --> 00:12:12.870
RAC is a piece of the technology
that allows you to get there.

00:12:12.880 --> 00:12:15.960
But it is not the be
all and end all story.

00:12:15.960 --> 00:12:18.490
You have to have the right
hardware underneath it.

00:12:18.600 --> 00:12:21.170
No single point of failure
in your environment.

00:12:21.180 --> 00:12:23.680
So there's a lot of pieces around it.

00:12:23.800 --> 00:12:27.770
So link your objectives as a
technology person to what the

00:12:27.900 --> 00:12:33.340
business is looking for and make sure
everybody's on the same page up front.

00:12:33.450 --> 00:12:35.880
To avoid disappointment when you go live.

00:12:36.020 --> 00:12:38.660
a few months later.

00:12:40.320 --> 00:12:42.670
I mentioned this before
and I'll mention it again.

00:12:42.800 --> 00:12:46.660
Automatic storage management,
it's a feature of your Oracle database,

00:12:46.800 --> 00:12:48.780
no extra cost to you.

00:12:48.800 --> 00:12:51.920
You can use it whether you're a
single instance Oracle environment

00:12:51.920 --> 00:12:53.360
or a clustered environment.

00:12:53.380 --> 00:12:58.480
And it's really there to make
manageability of your database easy.

00:12:58.510 --> 00:13:00.520
We're growing in databases.

00:13:00.540 --> 00:13:03.740
I don't know anybody who shrinks their
data in their database and has less

00:13:03.860 --> 00:13:05.810
data this year than they did last year.

00:13:05.930 --> 00:13:07.780
We all have more data to manage.

00:13:08.000 --> 00:13:11.730
And most of us don't have
another DBA sitting beside us.

00:13:11.860 --> 00:13:15.470
In fact, a lot of us have less in our
team than we did last year.

00:13:15.650 --> 00:13:20.900
So what ISM is all about is automating
the best practices for managing the

00:13:20.920 --> 00:13:23.380
storage behind your Oracle database.

00:13:23.540 --> 00:13:27.960
We've been professing for years,
stripe and mirror everything,

00:13:27.990 --> 00:13:30.040
the same technology it's called.

00:13:30.320 --> 00:13:33.180
So we take the data,
we stripe it across all

00:13:33.180 --> 00:13:37.200
the disks you give us,
and mirroring for high availability.

00:13:37.320 --> 00:13:43.520
So that's what Oracle's doing is
automating those best practices with ASM.

00:13:43.540 --> 00:13:48.820
It provides excellent support
as far as performance.

00:13:48.840 --> 00:13:50.120
And it makes it easy.

00:13:50.350 --> 00:13:54.530
You add disks, you remove disks,
you don't have to worry about it.

00:13:56.680 --> 00:13:59.850
So really, automatic storage management,
as long as the operating

00:13:59.950 --> 00:14:03.990
system sees the disk,
you tell Oracle, here's the disk,

00:14:04.050 --> 00:14:08.840
and we manage where all the
files that are part of the

00:14:08.840 --> 00:14:10.860
Oracle database are put on the disk.

00:14:10.880 --> 00:14:12.820
You don't have to think about it anymore.

00:14:12.820 --> 00:14:16.140
You don't have to have a storage
administrator spend time going,

00:14:16.220 --> 00:14:19.180
oh, this index file's hot,
let's move it over here.

00:14:19.180 --> 00:14:20.680
We take care of that.

00:14:20.760 --> 00:14:23.780
So it provides load balancing of the IO.

00:14:24.540 --> 00:14:27.350
If you need more storage,
it's easy to add disk.

00:14:27.500 --> 00:14:29.720
You can add capacity on demand.

00:14:29.720 --> 00:14:35.310
As long as the OS sees the new disk,
you tell ASM, here's the new disk,

00:14:35.430 --> 00:14:40.710
and what ASM does behind the scenes is
it spreads the data across this new disk.

00:14:40.840 --> 00:14:42.200
It does it real time.

00:14:42.200 --> 00:14:43.890
You don't have to take an outage.

00:14:43.980 --> 00:14:48.000
We do it behind the scenes while
the database is still working.

00:14:51.860 --> 00:14:53.920
Oracle Virtual IPs.

00:14:53.980 --> 00:14:56.220
With Oracle Database 10g,
we introduced the

00:14:56.350 --> 00:14:57.800
concept of a virtual IP.

00:14:57.800 --> 00:15:03.150
A virtual IP is just another
IP that is on the same subnet

00:15:03.170 --> 00:15:07.160
as your public network,
so where your users are connecting in.

00:15:07.160 --> 00:15:11.870
Each instance or each node in your
cluster will have a virtual IP,

00:15:11.870 --> 00:15:17.900
and that is what your client should be
using to connect to the Oracle instances.

00:15:18.920 --> 00:15:23.240
So we give it the
virtual IP on each node,

00:15:23.510 --> 00:15:28.940
the listener listens on that address,
the users connect via that address.

00:15:28.940 --> 00:15:33.160
During normal operations,
it works exactly the same as

00:15:33.240 --> 00:15:37.700
your public LAN ID or your
host name of your environment.

00:15:37.700 --> 00:15:42.430
The reason we put it in there is if
we have a failure in the cluster,

00:15:42.470 --> 00:15:47.340
our goal in a RAC environment is
to recover as fast as possible.

00:15:48.100 --> 00:15:50.200
And the virtual IP helps us to do that.

00:15:50.440 --> 00:15:52.780
We don't have to wait
for network timeouts.

00:15:53.230 --> 00:15:55.980
Depending on the platform,
these network timeouts

00:15:56.160 --> 00:15:57.820
can be 5-10 minutes.

00:15:58.090 --> 00:16:00.400
That's not going to make
your system highly available.

00:16:00.480 --> 00:16:06.500
So what happens is if we lose a node,
the virtual IP for that node fails

00:16:06.500 --> 00:16:11.670
over to another instance in the
cluster or another node in the cluster.

00:16:11.720 --> 00:16:15.670
But when it's on another node,
not its home node,

00:16:15.990 --> 00:16:18.000
all it's doing is sending a NAC.

00:16:18.100 --> 00:16:23.280
Sending an error back to the client
immediately so the client can try

00:16:23.280 --> 00:16:28.680
another address in its address list
to connect into the RAC database.

00:16:28.720 --> 00:16:32.800
So we don't have to wait for
TCP IP to clean up those ports.

00:16:34.670 --> 00:16:40.350
So please, your clients, your server,
your listener need to have the

00:16:40.460 --> 00:16:41.920
virtual IP in its addresses.

00:16:45.400 --> 00:16:46.640
Automatic workload management.

00:16:46.640 --> 00:16:52.440
This is some features that we
started in 9i and we extended in 10g.

00:16:52.440 --> 00:16:55.290
And that's the concept
of having a service.

00:16:55.470 --> 00:16:59.660
So traditionally your database
was a single service to your

00:16:59.660 --> 00:17:03.420
application and your application
connected to the database.

00:17:03.560 --> 00:17:08.170
Well in 10g you can create services
which are a logical structure

00:17:08.280 --> 00:17:12.630
that can be a subset of workload
against your RAC environment.

00:17:12.630 --> 00:17:18.470
So I could divide my workload
based on modules of my application.

00:17:18.520 --> 00:17:21.220
I could do it online versus batch.

00:17:21.280 --> 00:17:25.040
I could do it reporting
versus online users.

00:17:25.040 --> 00:17:28.620
Because sometimes there's pieces
of work that I want to isolate and

00:17:28.720 --> 00:17:32.580
manage within the workload that I'm
running against my RAC database.

00:17:32.580 --> 00:17:33.540
For example, if I'm running a service
that's a 10g workload,

00:17:33.540 --> 00:17:33.540
I could do it online versus batch.

00:17:33.540 --> 00:17:33.540
I could do it reporting
versus online users.

00:17:33.550 --> 00:17:35.170
For example, batch.

00:17:35.170 --> 00:17:39.320
During the day we may want to
isolate it down to one instance so

00:17:39.540 --> 00:17:44.350
that only that instance is affected
if somebody submits a batch job.

00:17:44.350 --> 00:17:47.470
But at night if I have lots of
batch work I have to get done,

00:17:47.470 --> 00:17:50.440
I may open up that service
across other instances.

00:17:50.440 --> 00:17:55.390
So you as the administrator can define
where a service runs at any given

00:17:55.390 --> 00:17:57.870
time and it's dynamically altered.

00:17:58.160 --> 00:18:02.820
You can change it at any time and
it'll take effect immediately.

00:18:03.590 --> 00:18:07.100
The nice thing about a service is
that if I offer a service on an

00:18:07.100 --> 00:18:11.290
instance and that instance fails,
I can give it a backup location.

00:18:11.300 --> 00:18:15.280
So that we automatically bring
it up on an alternate instance so

00:18:15.280 --> 00:18:19.440
that we're always supplying the
service your users can connect.

00:18:19.830 --> 00:18:21.480
Nothing changes at the client.

00:18:21.840 --> 00:18:26.180
They say connect me to this service
and we find out where the service

00:18:26.390 --> 00:18:30.970
is currently active and provide
a connection to that service.

00:18:30.980 --> 00:18:33.490
It's linked into some of the
other services that we have.

00:18:33.620 --> 00:19:03.390
So you can have a service that's
connected to your database.

00:19:03.470 --> 00:19:03.480
You can have a service that's
connected to your database.

00:19:03.480 --> 00:19:03.480
You can have a service that's
connected to your database.

00:19:03.480 --> 00:19:11.250
And the scheduler in the Oracle database
allows you to map a service directly to a

00:19:11.320 --> 00:19:15.660
job class and manage your batch that way.

00:19:16.560 --> 00:19:20.830
Here's an example of one customer
who consolidated many of their

00:19:20.900 --> 00:19:23.900
databases into a 10g RAC cluster.

00:19:23.900 --> 00:19:26.340
It's a six-node cluster they're running.

00:19:26.380 --> 00:19:30.360
In their environment,
they have four OLTP services that

00:19:30.450 --> 00:19:33.760
they run on the first two instances.

00:19:33.800 --> 00:19:36.660
They have a reporting service,
a batch service,

00:19:36.690 --> 00:19:38.560
and a data warehousing service.

00:19:38.640 --> 00:19:42.660
So this allowed them to consolidate
many workloads and manage them

00:19:42.660 --> 00:19:45.810
within their six-node RAC cluster.

00:19:48.700 --> 00:19:49.970
Fast connection failover.

00:19:50.450 --> 00:19:53.720
If you're using JDBC for
your application,

00:19:53.720 --> 00:19:57.530
if it's a Java application
connecting into the Oracle database,

00:19:57.530 --> 00:20:04.500
we've provided extra integration
to the JDBC driver from Oracle.

00:20:04.500 --> 00:20:08.180
So that again,
this network timeout that can make your

00:20:08.180 --> 00:20:11.180
application unavailable is eliminated.

00:20:11.190 --> 00:20:15.670
If anything changes in the
configuration of your RAC cluster,

00:20:16.050 --> 00:20:19.400
we alert the application tier.

00:20:19.590 --> 00:20:24.070
So Oracle RAC sends out
what we call a FAN event.

00:20:24.070 --> 00:20:28.080
FAN stands for
Fast Application Notification.

00:20:28.080 --> 00:20:29.980
That event is published.

00:20:29.980 --> 00:20:34.540
The Oracle clients have then
integrated with this technology and

00:20:34.540 --> 00:20:37.140
they subscribe to these FAN events.

00:20:37.220 --> 00:20:41.380
So your JDBC connection
pool will receive the event.

00:20:41.490 --> 00:20:44.740
If it's a down event
like a down instance,

00:20:44.780 --> 00:21:18.420
then it will clean up any connections
in its pool that were to that instance.

00:21:18.420 --> 00:21:18.560
So when your application is doing a get
connection from the connection pool,

00:21:18.560 --> 00:21:18.560
it's going to get a connection to an
instance that's currently available,

00:21:18.560 --> 00:21:18.560
not to the failed instance.

00:21:18.560 --> 00:21:18.560
We're not waiting for TCP IP to
close off those ports.

00:21:18.560 --> 00:21:18.560
So it's easy for your application
to take advantage of it as long as

00:21:18.560 --> 00:21:18.560
you're using the Oracle JDBC driver.

00:21:18.560 --> 00:21:18.560
You just turn on a data source parameter
and you can immediately take advantage

00:21:18.560 --> 00:21:18.560
of faster failover for your client.

00:21:18.560 --> 00:21:20.820
Now, if your client is actively executing
a transaction from the connection,

00:21:20.820 --> 00:21:25.530
we will abort that transaction
immediately because it's eventually

00:21:25.530 --> 00:21:29.070
going to happen because that instance
went down where it was running.

00:21:29.130 --> 00:21:32.180
Your application still has
to have its error management.

00:21:32.180 --> 00:21:34.250
We're not taking over that function.

00:21:34.250 --> 00:21:38.410
But what we're doing is giving your
application an alert immediately,

00:21:38.620 --> 00:21:44.520
hey, this instance went down,
this transaction failed.

00:21:44.570 --> 00:21:48.540
And if you've written your
application for high availability,

00:21:48.540 --> 00:21:48.540
you can immediately do another get
connection and retry the transaction.

00:21:48.540 --> 00:21:53.430
In fact, I've got a customer running
their Java application with

00:21:53.430 --> 00:22:18.520
this functionality in 10G.

00:22:18.520 --> 00:22:18.520
And for their cluster,
no matter what happens in the cluster,

00:22:18.520 --> 00:22:18.520
node goes down, instance goes down,
network goes down,

00:22:18.520 --> 00:22:18.520
their application transaction,
which is normally a

00:22:18.520 --> 00:22:18.520
transaction's milliseconds,
but maximum the transaction

00:22:18.520 --> 00:22:18.520
takes is seven seconds or less.

00:22:18.520 --> 00:22:18.520
So they've hardened their
environment and managed it so

00:22:18.520 --> 00:22:18.520
that they retry their transaction.

00:22:18.520 --> 00:22:18.520
And even if it's not a transaction,
they're still going to have to retry it.

00:22:18.520 --> 00:22:21.660
And even if an instance has
gone down and nodes crashed,

00:22:21.800 --> 00:22:25.830
they can recover and the application
still only ever sees less than seven

00:22:25.830 --> 00:22:27.940
seconds for the transaction time.

00:22:27.940 --> 00:22:31.980
So it's an easy way to make a
very highly available application.

00:22:34.960 --> 00:22:38.070
Another way you can take advantage
of these fan events is what we

00:22:38.210 --> 00:22:39.830
call a notification callout.

00:22:40.110 --> 00:22:42.590
So this is a script that
you run on the server.

00:22:42.910 --> 00:22:45.110
You put it in a directory,
and the directory is

00:22:45.140 --> 00:22:46.700
up there on the screen,
and it's in the

00:22:46.700 --> 00:22:48.530
Oracle cluster where home.

00:22:48.690 --> 00:22:53.390
And we execute it every time
one of these events occurs.

00:22:53.650 --> 00:22:57.410
So you can do things like send
a page to your DBA whenever

00:22:57.470 --> 00:22:59.100
something happens in the cluster.

00:22:59.220 --> 00:23:01.990
Log a trouble ticket if you
have a trouble ticket system.

00:23:02.140 --> 00:23:04.230
Log some status information.

00:23:04.250 --> 00:23:07.650
And this example up here
is basically doing that.

00:23:07.660 --> 00:23:12.690
It's just logging trouble ticket
information on the system.

00:23:14.740 --> 00:23:19.280
There's also other samples on
the Oracle technology network.

00:23:19.280 --> 00:23:21.290
We've got a sample code page.

00:23:21.510 --> 00:23:24.300
If you go to Sample Code,
Real Application Clusters,

00:23:24.360 --> 00:23:26.650
and there's examples of
different types of callouts

00:23:26.780 --> 00:23:29.380
that you can take advantage of.

00:23:30.520 --> 00:23:30.920
Testing.

00:23:30.920 --> 00:23:34.660
I've got it down there three
times because it's imperative

00:23:34.660 --> 00:23:36.600
that you test your environment.

00:23:36.600 --> 00:23:40.420
And I mean testing functionality
as well as testing what we

00:23:40.420 --> 00:23:42.500
call destructive testing.

00:23:42.500 --> 00:23:44.840
So that's what happens when a node dies?

00:23:44.840 --> 00:23:46.850
What happens if the network dies?

00:23:46.850 --> 00:23:50.240
What happens if the interconnect
dies on your cluster?

00:23:50.240 --> 00:23:53.950
Test these type of things so that
you know what happens and you

00:23:54.180 --> 00:23:58.190
and your operating procedures are
written so that you know what to

00:23:58.190 --> 00:24:00.380
do in production when that happens.

00:24:00.400 --> 00:24:01.880
difference.

00:24:02.130 --> 00:24:06.920
So you build a knowledge base within your
organization of how the cluster works,

00:24:07.130 --> 00:24:11.660
how to debug things,
how to manage things in your environment.

00:24:11.930 --> 00:24:15.920
It's also a good idea to try to get a
realistic workload against your cluster.

00:24:15.920 --> 00:24:20.580
If you can do that,
you're way far ahead in making

00:24:20.580 --> 00:24:22.400
a successful implementation.

00:24:22.400 --> 00:24:26.920
So that you can test changes,
that you can test the workload.

00:24:26.920 --> 00:24:29.480
What happens when
I have a thousand users?

00:24:29.480 --> 00:24:34.040
It's very different from when I have
two users running the application.

00:24:34.060 --> 00:24:37.290
Because contention in
a cluster can hurt you.

00:24:37.320 --> 00:24:40.250
And it'll hurt you faster
than in a single instance.

00:24:40.480 --> 00:24:43.790
So you've got to look for those
points of contention and program

00:24:43.790 --> 00:24:45.930
around it if that's a problem.

00:24:45.960 --> 00:24:48.420
RAC does great for scalability.

00:24:48.420 --> 00:24:52.080
We have a lot of applications that
scale very well in their clusters.

00:24:52.080 --> 00:24:54.910
I've got thousands of people
using it around the world.

00:24:54.920 --> 00:24:58.130
But if you've written a
poorly scaling application,

00:24:58.240 --> 00:25:02.450
I'm not going to solve the problem
of your application with RAC.

00:25:05.520 --> 00:25:07.240
Change control.

00:25:07.260 --> 00:25:09.490
Big, big thing in your life.

00:25:09.860 --> 00:25:13.360
And I know we all hate it,
but it's necessary.

00:25:13.760 --> 00:25:16.040
Understand your environment.

00:25:16.040 --> 00:25:20.160
Adhere to the lifecycle
disciplines of testing things

00:25:20.370 --> 00:25:22.260
QA before they go production.

00:25:22.850 --> 00:25:25.640
Especially if you're getting
into a very mission critical,

00:25:25.830 --> 00:25:29.330
highly available environment,
and RAC often gets put

00:25:29.330 --> 00:25:31.310
into those environments.

00:25:32.520 --> 00:25:33.540
Support procedures.

00:25:33.540 --> 00:25:38.150
Make sure that you and
everybody else knows who is

00:25:38.150 --> 00:25:40.880
doing what and how to do that.

00:25:40.930 --> 00:25:45.400
And how to work with your
partners such as Apple and Oracle.

00:25:45.400 --> 00:25:47.920
Are you aware of how to work with us?

00:25:48.520 --> 00:25:50.890
MetaLink is a good source of information.

00:25:50.960 --> 00:25:52.740
That's Oracle's support.

00:25:52.740 --> 00:25:56.250
If you have an Oracle license
and a support agreement,

00:25:56.250 --> 00:25:57.780
you get a MetaLink account.

00:25:57.800 --> 00:26:00.470
And that's where there's a
huge amount of information.

00:26:00.600 --> 00:26:02.320
That's where you open
your trouble tickets.

00:26:02.380 --> 00:26:06.050
How do you escalate it if you've
got a mission critical problem?

00:26:06.050 --> 00:26:09.860
Make sure you know how to do these
before you have the problem and it's

00:26:09.970 --> 00:26:14.080
3am and your system's down and the
VP's looking over your shoulder.

00:26:14.080 --> 00:26:16.710
That's not the time to try
to figure out what's going

00:26:16.710 --> 00:26:18.310
wrong or how do you close it.

00:26:18.560 --> 00:26:21.260
call Oracle to get some help.

00:26:24.080 --> 00:26:25.840
Performance.

00:26:25.840 --> 00:26:28.420
Monitor your performance and
start out with a baseline.

00:26:28.420 --> 00:26:32.590
Know what you're expecting so when
things start to go bad that you

00:26:32.590 --> 00:26:36.650
can turn around and compare and
figure out where things went wrong.

00:26:36.650 --> 00:26:40.620
Oracle 10g has a lot of
functionality to manage it,

00:26:40.620 --> 00:26:43.980
such as our automatic
workload repository.

00:26:43.980 --> 00:26:47.560
We take snapshots of the system and
store it so you can go back and figure

00:26:47.560 --> 00:26:49.870
out what's going on in your environment.

00:26:49.870 --> 00:26:54.960
We also have the automatic database
diagnostic monitor that analyzes these

00:26:54.960 --> 00:27:00.790
snapshots of workload and gives you
hints and tips on how to fix things.

00:27:01.080 --> 00:27:03.260
In a cluster, there's also StatsPack.

00:27:03.350 --> 00:27:09.250
So if you use StatsPack in 9i,
you can use StatsPack in 10g as well.

00:27:09.720 --> 00:27:13.670
For a cluster environment,
there's things like false node evictions.

00:27:13.680 --> 00:27:18.020
That's where we kick out a
node because something went

00:27:18.020 --> 00:27:19.950
wrong and you're not sure why.

00:27:19.960 --> 00:27:24.340
Well, you've got to monitor your system
because we have these heartbeats.

00:27:24.340 --> 00:27:26.110
We have a heartbeat on the network.

00:27:26.250 --> 00:27:29.120
We also have what we call a
voting disk that has a heartbeat.

00:27:29.120 --> 00:27:32.320
So if we get into what
we call a split brain,

00:27:32.320 --> 00:27:35.700
that means we've lost the network so
the nodes don't talk to each other.

00:27:35.700 --> 00:27:37.870
We need to figure out who's alive.

00:27:38.500 --> 00:27:41.940
So if we can't talk across the network,
we go to the disk.

00:27:41.940 --> 00:27:44.930
And if each instance
has updated the disk,

00:27:45.080 --> 00:27:46.240
then we know they're alive.

00:27:46.240 --> 00:27:50.560
And we're going to eventually kill
half of the cluster because we can't

00:27:50.560 --> 00:27:54.680
have nodes updating the database
who can't talk to each other.

00:27:54.680 --> 00:27:58.480
We can't have Oracle instances who can't
talk to each other updating the database.

00:27:58.520 --> 00:28:01.100
So the disk heartbeat.

00:28:01.100 --> 00:28:04.280
Well, if I can't talk to the disk
and get that heartbeat,

00:28:04.280 --> 00:28:08.020
we have what we call a miscount in there.

00:28:08.360 --> 00:28:12.060
And if we run over that miscount,
by default that's 30 seconds,

00:28:12.060 --> 00:28:14.940
then we're going to evict
whoever we couldn't talk to.

00:28:16.250 --> 00:28:21.100
So if you're going to have I/O errors,
or if you have multi-pathing software

00:28:21.100 --> 00:28:26.040
or something that allows us not to
talk to the disk for over 30 seconds,

00:28:26.080 --> 00:28:28.320
be careful because you're
going to get a node eviction.

00:28:28.430 --> 00:28:31.440
So that's what I mean when I say
avoid false node evictions.

00:28:31.690 --> 00:28:34.280
You've got to check your logs
and check for things like this.

00:28:34.280 --> 00:28:37.040
So if you start having
errors on your network,

00:28:37.090 --> 00:28:39.680
if the interconnect can't talk,
then you're going to have

00:28:39.850 --> 00:28:40.770
problems in a cluster.

00:28:40.840 --> 00:28:44.600
So you need to monitor the network
and make sure that you're not getting

00:28:44.790 --> 00:28:50.080
errors on it and we're not losing bits
as we send them across the network.

00:28:53.620 --> 00:28:57.000
Here's an example of the automatic
database diagnostic monitor and

00:28:57.000 --> 00:28:58.700
the type of report that you get.

00:28:58.780 --> 00:29:04.530
So it's looking at the system and
giving you hints of where things

00:29:04.530 --> 00:29:07.030
could have gone wrong in your system.

00:29:07.040 --> 00:29:11.110
In this environment,
it's identifying SQL that

00:29:11.610 --> 00:29:14.080
have contention for you.

00:29:14.120 --> 00:29:17.070
So it's pointing you in the
right direction and giving you

00:29:17.180 --> 00:29:20.930
hints on how to fix things to
make your system run better.

00:29:21.500 --> 00:29:24.020
And generally,
with the events that we publish,

00:29:24.020 --> 00:29:25.460
we give you an impact rating.

00:29:25.460 --> 00:29:27.620
So that you know if this
has got a high impact,

00:29:27.620 --> 00:29:29.740
it's something I want to fix right away.

00:29:29.740 --> 00:29:33.140
Low impact,
I may put it off for an outage

00:29:33.140 --> 00:29:35.480
that I have down the road.

00:29:39.030 --> 00:29:42.660
So some tuning best practices
for your application.

00:29:42.830 --> 00:29:44.700
Things like sequences.

00:29:44.990 --> 00:29:48.500
If you're using Oracle sequences,
sequence numbers,

00:29:48.530 --> 00:29:51.680
that can be a single point
of contention in a cluster.

00:29:51.820 --> 00:29:55.630
So we recommend that you cache
them so that you have a number of

00:29:55.630 --> 00:29:58.700
sequences cached on each instance.

00:29:58.730 --> 00:30:00.950
Of course,
this means that you can't order

00:30:01.380 --> 00:30:04.520
the cache or the sequences.

00:30:04.720 --> 00:30:06.620
So if you have to have
an ordered sequence,

00:30:06.640 --> 00:30:10.240
you may want to look at an
alternative way to generate that.

00:30:10.440 --> 00:30:11.720
SQL.

00:30:11.740 --> 00:30:14.720
You want to make sure
you're using bind variables.

00:30:14.730 --> 00:30:20.380
You want to look at your packages,
your Oracle PL/SQL procedures,

00:30:20.380 --> 00:30:21.710
your functions.

00:30:21.790 --> 00:30:26.300
Those are often better than
instead of anonymous PL/SQL blocks.

00:30:26.300 --> 00:30:29.060
Look at your execution
plans for your SQL.

00:30:29.070 --> 00:30:32.250
Make sure your developers are
checking that out before they

00:30:32.360 --> 00:30:34.740
put things into production.

00:30:34.750 --> 00:30:36.120
Space management.

00:30:36.120 --> 00:30:40.260
It's become pretty well best practice
or automatic practice these days,

00:30:40.420 --> 00:30:41.790
but still like to mention it.

00:30:42.200 --> 00:30:46.110
Things like what we call automatic
segment space management and

00:30:46.230 --> 00:30:48.440
locally managed table spaces.

00:30:48.700 --> 00:30:51.180
Those make a big difference
in a rack environment,

00:30:51.230 --> 00:30:53.170
so make sure you use them.

00:30:53.460 --> 00:30:59.470
And also the temporary table space that
you can use for your temp table space.

00:31:02.700 --> 00:31:03.520
Application.

00:31:03.590 --> 00:31:06.240
DDL can be costly in a RAC environment.

00:31:06.240 --> 00:31:11.460
So look at places where you don't need
it and see if you can program around it.

00:31:12.480 --> 00:31:13.470
Block contention.

00:31:13.710 --> 00:31:16.180
That is really in a cluster
environment the thing that can

00:31:16.300 --> 00:31:17.780
cause you the biggest grief.

00:31:17.780 --> 00:31:21.510
If everybody in the application has
to update a single block of data,

00:31:21.510 --> 00:31:24.800
then in a cluster environment
that piece of data is going to be

00:31:24.800 --> 00:31:26.870
shipped everywhere back and forth.

00:31:26.940 --> 00:31:29.960
So if there's a high
contention on a single block,

00:31:30.020 --> 00:31:32.590
and we are talking about a block,
we're not talking about a block of data,

00:31:32.590 --> 00:31:32.680
we're talking about a block of data.

00:31:32.700 --> 00:31:34.820
We're talking about a whole object.

00:31:34.850 --> 00:31:37.460
But you then need to
look at alternatives.

00:31:37.460 --> 00:31:41.490
Having a smaller block size,
partitioning,

00:31:41.490 --> 00:31:46.530
things like that allow you to
spread the contention across

00:31:46.540 --> 00:31:52.610
multiple blocks so it doesn't
cause you time in your application.

00:31:52.880 --> 00:31:57.200
And that is,
indexes are often a big problem and the

00:31:57.350 --> 00:31:59.900
same goes for data in your environment.

00:31:59.900 --> 00:32:03.780
So small tables with densely
packed data can be a real issue.

00:32:06.850 --> 00:32:09.400
So at this point,
I'm going to hand it over to Jeff,

00:32:09.420 --> 00:32:13.230
and Jeff's going to talk to you
a little bit more about RAC and

00:32:13.230 --> 00:32:15.340
specifically on the Mac OS platform.

00:32:35.980 --> 00:32:44.440
Hi, I've been working with Apple and
Oracle for the last little while,

00:32:45.120 --> 00:32:51.960
and I've been doing specifically
RAC certification on Tiger.

00:32:51.960 --> 00:32:56.760
So one of the things that I'm going to
talk to you a bit about is the upcoming

00:32:56.760 --> 00:33:02.050
certification release of 10g on Tiger.

00:33:02.060 --> 00:33:05.870
And while I go along,
I'm going to try and incorporate

00:33:05.870 --> 00:33:09.610
some of the best practices ideas
that Barb has been talking about

00:33:09.730 --> 00:33:13.860
for the last few minutes in order
to show you where you make decision

00:33:13.860 --> 00:33:16.780
points about configuring the platform.

00:33:16.780 --> 00:33:20.260
Because like Barb says,
this is about platform

00:33:20.260 --> 00:33:22.040
engineering best practice.

00:33:22.040 --> 00:33:26.790
The application has to be designed well,
but so does the hardware platform

00:33:27.080 --> 00:33:31.160
and how you construct actually
the physical pieces in order to

00:33:31.160 --> 00:33:34.450
reduce single points of failure,
certainly,

00:33:34.460 --> 00:33:39.690
but also to reduce the complexity as
you deploy larger and larger clusters.

00:33:39.760 --> 00:33:44.700
The complexity is a factor,
and you want to be able to have

00:33:44.730 --> 00:33:49.490
a good solid philosophy towards
the platform engineering.

00:33:51.520 --> 00:33:57.700
Currently, RAC runs on the G5 XServe,
and it is--

00:33:58.370 --> 00:34:02.520
is going to typically
require at least 4GB of RAM.

00:34:02.520 --> 00:34:06.600
And the certified configuration
that we're using for testing

00:34:06.600 --> 00:34:11.610
right now in the lab is a dual
CPU configuration with at least 2GHz.

00:34:11.780 --> 00:34:14.560
That's the minimum that we recommend.

00:34:14.560 --> 00:34:21.560
The 4GB of RAM is probably
sufficient for most modest clusters.

00:34:21.560 --> 00:34:25.410
As I go through this,
what I'll be showing you is sort of a

00:34:25.410 --> 00:34:32.400
modest mid-level cluster where there are
a lot of platform issues around hardening

00:34:32.400 --> 00:34:36.340
that complicate larger clusters.

00:34:36.340 --> 00:34:41.120
But I wanted to keep sort of a basic,
simple cluster that's a good sample

00:34:41.120 --> 00:34:44.740
so you sort of get the essence
of where the critical platform

00:34:44.740 --> 00:34:46.940
engineering choices can be made.

00:34:49.120 --> 00:34:52.050
Like Barb said,
you need a shared storage array,

00:34:52.050 --> 00:34:56.560
and in that case, that's going to be,
for us, X-rayed storage.

00:34:56.560 --> 00:35:01.760
That storage is 2-gigabit fiber channel,
and because of that,

00:35:01.810 --> 00:35:07.680
you have to have a PCI fiber channel
card in each node of the cluster.

00:35:09.390 --> 00:35:15.040
There are a couple other options that you
can do because you have two PCI slots.

00:35:15.280 --> 00:35:22.960
They're PCI X 133 and there are a couple
of other cards you might consider.

00:35:22.960 --> 00:35:25.910
One of them is the PCI RAID card.

00:35:25.920 --> 00:35:32.340
This card is used for locally
mirroring the disk in the X Serve node.

00:35:32.340 --> 00:35:39.160
This provides more mirroring capability
for the installation media for Tiger.

00:35:39.410 --> 00:35:41.300
or Panther if you're still using Panther.

00:35:41.300 --> 00:35:45.860
And this is going to provide

00:35:46.030 --> 00:35:50.760
The other alternative,
because you only have one slot left,

00:35:50.760 --> 00:35:55.980
so you kind of have to make a decision
about whether you want to harden

00:35:55.980 --> 00:36:01.470
the interconnect network or if you
want to harden the local mirror.

00:36:02.240 --> 00:36:06.200
Generally, my advice is probably to go
with the gigabit card and

00:36:06.530 --> 00:36:09.020
harden the interconnect network.

00:36:09.040 --> 00:36:13.090
If, for some reason,
the root disk does fail on the node,

00:36:13.310 --> 00:36:17.140
then the node will fail,
and then that's okay because

00:36:17.190 --> 00:36:19.740
RAC is architected to handle
that situation perfectly.

00:36:21.750 --> 00:36:27.110
If you harden the interconnect network,
then back to Barb's advice about

00:36:27.150 --> 00:36:31.330
minimizing node eviction circumstances,
this minimizes the number of

00:36:31.430 --> 00:36:34.700
circumstances where you might get
into a situation where you have to go

00:36:34.700 --> 00:36:38.190
out to the voting disk and figure out
whether or not you've got split brain.

00:36:38.200 --> 00:36:42.800
But you have these two choices
to put in the other slot.

00:36:42.940 --> 00:36:45.180
The first slot, of course,
has to hold the fiber channel card.

00:36:46.140 --> 00:36:50.120
One interesting thing that I found
out in the last month or so was

00:36:50.280 --> 00:36:53.960
that if you put a PCI video card in,
and you might put one

00:36:53.960 --> 00:36:56.620
into the first node,
that video card will clock

00:36:56.620 --> 00:37:00.430
down the PCI X bus to the
speed at which that card runs.

00:37:00.440 --> 00:37:04.260
And so that might impact the
performance of how fast the

00:37:04.400 --> 00:37:06.630
PCI fiber channel card runs.

00:37:06.640 --> 00:37:11.940
Most people will probably put
a video card in node 1 in order

00:37:12.380 --> 00:37:16.040
to install Oracle using the
Java-based Oracle installation.

00:37:16.120 --> 00:37:22.090
And then the other three nodes in an
example cluster where you have four

00:37:22.140 --> 00:37:25.640
nodes don't need a video card anyway.

00:37:25.640 --> 00:37:30.640
But you might want to have video
cards during integration and testing.

00:37:30.640 --> 00:37:35.640
And then the production cluster
might not have them at all.

00:37:35.640 --> 00:37:40.530
Or they could be removed during the
final stages of integration testing

00:37:40.530 --> 00:37:45.630
as you move the integration cluster
closer to the production cluster.

00:37:45.950 --> 00:37:50.020
Again, like Barb said,
it's very important that the

00:37:50.190 --> 00:37:55.620
integration cluster physically
match the production cluster.

00:37:55.670 --> 00:38:00.160
A lot of people do integration
and staging QA on maybe a couple

00:38:00.170 --> 00:38:04.640
of nodes just to make sure
the thing functionally works.

00:38:05.270 --> 00:38:08.740
You have to integrate
and test what you deploy.

00:38:08.780 --> 00:38:14.420
And I'm repeating that,
and it seems redundant,

00:38:14.420 --> 00:38:19.540
but it's very important because the
application may change slightly if you

00:38:19.540 --> 00:38:22.880
test it on two nodes and then deploy six.

00:38:23.040 --> 00:38:28.910
So you have this option where you can
populate the second PCI slot card,

00:38:29.080 --> 00:38:33.050
but before you stage into production,
you might want to pull it out.

00:38:33.250 --> 00:38:36.100
And you certainly should do
that before you pull the trigger

00:38:36.100 --> 00:38:38.150
on the production cluster.

00:38:41.140 --> 00:38:47.570
The shared storage is the X RAID,
X Serve RAID configuration.

00:38:47.710 --> 00:38:51.940
Oracle databases and
databases in general,

00:38:52.010 --> 00:38:54.070
generally do a lot of I/O.

00:38:54.340 --> 00:38:57.850
And what that really means is spindles.

00:38:57.990 --> 00:39:02.730
And one of the things we see
a lot is people often buy

00:39:02.730 --> 00:39:05.480
storage based on capacity.

00:39:05.730 --> 00:39:07.210
or megabytes per second.

00:39:07.220 --> 00:39:10.980
For database applications,
these are almost certainly not the

00:39:11.290 --> 00:39:13.340
metric you should be focusing on.

00:39:13.340 --> 00:39:18.390
The metric that's the most important
for configuring a storage array for

00:39:18.640 --> 00:39:23.440
databases of any kind is IOs per
second that you can get off the disk.

00:39:23.440 --> 00:39:30.870
The current generation of storage that's
the current generation of spindles that

00:39:30.870 --> 00:39:36.680
are provided with the X-Ray are 7200 RPM,
ATA drives.

00:39:37.230 --> 00:39:42.740
Depending on circumstances,
they do about 60 to 80 IOs per second.

00:39:42.740 --> 00:39:46.700
This is important to know because
this will drive the performance

00:39:46.700 --> 00:39:49.660
of your storage array when
it's doing database queries.

00:39:52.130 --> 00:39:56.120
Another trick,
because you don't always order

00:39:56.120 --> 00:39:59.820
the storage array with batteries,
because if you purchase the SAN,

00:39:59.820 --> 00:40:02.140
you don't have to buy the batteries.

00:40:02.160 --> 00:40:05.820
If you don't buy the batteries,
you can't turn on the write-back cache,

00:40:05.820 --> 00:40:07.520
and that's pretty important.

00:40:07.520 --> 00:40:10.180
Typical X-rays come with
a half a gig of memory,

00:40:10.180 --> 00:40:12.770
and if that's enabled
as write-back cache,

00:40:12.920 --> 00:40:14.930
then having the two
batteries as an option,

00:40:14.930 --> 00:40:17.760
which you would have to order
as a configuration option

00:40:17.760 --> 00:40:21.390
when you purchase the array,
or order them later if you

00:40:21.560 --> 00:40:26.220
already have X-rays installed,
then it gets you a half a

00:40:26.220 --> 00:40:28.360
gigabyte of write-back cache.

00:40:28.360 --> 00:40:34.990
The other cool thing about the X-ray
is that unlike traditional ATA drives

00:40:35.030 --> 00:40:38.440
that don't support tagged queuing,
the X-ray does this,

00:40:38.610 --> 00:40:44.310
which improves the IOP performance
of an individual ATA spindle.

00:40:44.320 --> 00:40:48.280
So it's very likely,
I have not tested this specifically,

00:40:49.060 --> 00:40:52.130
I'm sure Apple performance
groups internally have,

00:40:52.140 --> 00:40:54.600
but I don't have the data in front of me.

00:40:54.650 --> 00:40:59.820
It's very likely that with tagged
queuing support in the X-ray,

00:40:59.820 --> 00:41:02.540
you're probably on the upper
end of the 60 to 80 range IOP.

00:41:02.620 --> 00:41:04.380
So that's pretty good.

00:41:04.380 --> 00:41:10.990
Again, RAID 0 plus 1 is
probably the best option.

00:41:11.000 --> 00:41:15.440
I'll talk a little more about that in
the context of when you deploy ASM,

00:41:15.440 --> 00:41:21.790
because ASM might give you,
a good option for striping because

00:41:21.790 --> 00:41:23.660
it's more aware of the workload.

00:41:23.660 --> 00:41:27.420
And,

00:41:28.200 --> 00:41:30.950
There's some trade-offs there that
I want to talk about in a minute.

00:41:30.950 --> 00:41:33.860
But generally speaking, for instance,
if you wanted to deploy

00:41:33.860 --> 00:41:39.540
a rack on raw partitions,
then it's best to do RAID 0 plus 1.

00:41:39.540 --> 00:41:47.760
RAID 0 plus 1 is mirrored pairs of
disks that then constitute the stripe.

00:41:47.760 --> 00:41:55.030
And that's probably the best performance,
certainly for utilizing IOPS.

00:41:55.140 --> 00:41:58.350
It does waste a lot of space,
but the name of the game

00:41:58.350 --> 00:42:01.780
here is IOs per second,
and that's a spindle count.

00:42:01.840 --> 00:42:08.010
In a RAID 0 plus 1 configuration,
you are able to lose any drive

00:42:08.010 --> 00:42:11.120
and not compromise the stripe.

00:42:11.180 --> 00:42:17.720
Getting the X-RAID to do the replacement
re-silvering is probably going to be

00:42:17.720 --> 00:42:23.580
faster and transparent to the operating
system and transparent to Oracle.

00:42:24.020 --> 00:42:28.130
and will probably do it much faster.

00:42:31.950 --> 00:42:34.600
The software configuration that
I've been working on lately is

00:42:34.600 --> 00:42:41.160
getting ready to release and
certify Oracle 10g on Tiger.7,

00:42:41.210 --> 00:42:41.940
10.4.7.

00:42:41.940 --> 00:42:52.100
Some minimum software configurations
apply to both 10.3.9 Panther and 10.4.7,

00:42:52.100 --> 00:42:53.970
the version of Java.

00:42:54.170 --> 00:42:59.410
The version of Oracle and the C compiler
that's required in order to link them.

00:42:59.800 --> 00:43:06.090
Depending on how you install
the software and how many

00:43:07.110 --> 00:43:10.800
How many SDKs you choose to install,
and many people might

00:43:10.850 --> 00:43:12.380
just install all of Xcode.

00:43:12.380 --> 00:43:17.120
At the bare minimum,
you have to make sure

00:43:17.120 --> 00:43:21.140
that the X11 SDK is there,
or parts of the

00:43:21.140 --> 00:43:22.730
Oracle installer will not work.

00:43:22.730 --> 00:43:26.500
But other than that, everything else that
you would think to need,

00:43:26.500 --> 00:43:31.280
like the BSD SDK and the base SDKs,
need to be there in order to link.

00:43:31.280 --> 00:43:34.010
When Oracle installs,
it copies the binaries

00:43:34.010 --> 00:43:37.050
off the release media,
and then it relinks it all for

00:43:37.180 --> 00:43:39.960
the environment in question,
your local environment.

00:43:39.960 --> 00:43:43.080
And so in order to do that,
it needs a functional link

00:43:43.080 --> 00:43:45.080
environment with all the libraries.

00:43:45.080 --> 00:43:51.130
It also needs some source headers in
order to compile bits and pieces prior to

00:43:51.130 --> 00:43:53.730
a full linking of the entire binary set.

00:43:58.200 --> 00:44:02.470
ASM, along with raw partitions,
will be the certified file

00:44:02.500 --> 00:44:05.720
systems that are supported by 10g.

00:44:05.720 --> 00:44:11.600
And that certification should be done
momentarily within the next month or so.

00:44:11.640 --> 00:44:18.790
There are a couple of things
that you need to be aware of when

00:44:18.790 --> 00:44:23.670
you use raw partitions or ASM,
and that's allocating storage

00:44:23.670 --> 00:44:26.510
for the Oracle clusterware.

00:44:27.520 --> 00:44:31.440
Clusterware used to be called CRS,
which stands for Cluster Ready Services,

00:44:31.440 --> 00:44:34.130
and you might see that
in the documentation.

00:44:34.140 --> 00:44:37.660
CRS and clusterware are the same product.

00:44:39.600 --> 00:44:46.210
Clusterware requires dedicated
partitions for the voting

00:44:46.210 --> 00:44:48.810
disk and the registry disk.

00:44:50.200 --> 00:44:52.360
These can be about 256 megabytes.

00:44:52.400 --> 00:44:54.820
The actual files that are
consumed is a little bit smaller,

00:44:54.820 --> 00:44:56.440
but that's an easy number to remember.

00:44:56.440 --> 00:44:58.540
At least it was an easy
number for me to remember.

00:44:58.540 --> 00:45:04.840
And those two files should be on
a dedicated LUN and not shared

00:45:05.270 --> 00:45:10.080
physically with any of the media
that you decide to either allocate

00:45:10.080 --> 00:45:15.450
for raw partition databases or as a
pool of LUNs that you've allocated

00:45:15.450 --> 00:45:18.510
on the X-ray in order to give to ASM.

00:45:19.140 --> 00:45:23.440
So in our case,
we would take a mirrored pair,

00:45:23.480 --> 00:45:28.950
and unfortunately that
would be a 230 gig drive,

00:45:28.950 --> 00:45:32.900
and we'd carve up two
256 megabyte partitions.

00:45:32.900 --> 00:45:36.140
You don't want to put anything
else on this partition,

00:45:36.390 --> 00:45:39.760
because when things get critical
and Oracle has to figure out

00:45:39.760 --> 00:45:43.630
whether or not the cluster has
gone into an indeterminate state or

00:45:43.630 --> 00:45:47.290
it needs to detect for split brain,
it does that by reading and

00:45:47.290 --> 00:45:51.110
writing the voting disks,
and it needs to do that quickly,

00:45:51.210 --> 00:45:52.850
and it needs to do that a lot.

00:45:52.850 --> 00:45:56.130
And that's combined with
the interconnect technology.

00:45:56.420 --> 00:46:01.170
That's how the cluster
keeps itself aware.

00:46:01.730 --> 00:46:04.780
That pair of disks which
constitute that single LUN,

00:46:04.820 --> 00:46:08.460
which contains two 256
megabyte partitions,

00:46:08.480 --> 00:46:11.760
is very important and
needs to be set aside.

00:46:11.760 --> 00:46:15.320
If you're familiar with doing
admin in Tiger or Panther,

00:46:15.320 --> 00:46:21.420
then you would use the PDISC and
the disk label tools to do that.

00:46:21.440 --> 00:46:25.380
Disk label is a tool that allows
you to be a step removed from

00:46:25.380 --> 00:46:28.430
the raw inodes that are in /dev.

00:46:28.530 --> 00:46:31.710
So it gives you a little more
administrative abstraction

00:46:31.830 --> 00:46:33.640
from the raw inodes.

00:46:33.670 --> 00:46:38.730
And then the disk label inodes that end
up in /dev once you run the command are

00:46:38.730 --> 00:46:41.980
actually owned by Oracle and not by root.

00:46:42.150 --> 00:46:45.290
And that usually makes the
administrator a little more comfortable,

00:46:45.290 --> 00:46:50.080
because then the actual underlying
inodes are still owned by the system.

00:46:53.140 --> 00:46:58.500
Currently,
Oracle 10g on Panther and Tiger is

00:46:58.510 --> 00:47:00.260
a 32-bit version of Oracle.

00:47:00.260 --> 00:47:03.640
As you might know from using
Oracle on other platforms,

00:47:03.640 --> 00:47:06.220
it's available in 32- and
64-bit configurations.

00:47:06.260 --> 00:47:10.290
This version, in order to maintain
compatibility with Panther,

00:47:10.290 --> 00:47:12.060
is a 32-bit version.

00:47:13.140 --> 00:47:20.320
The limit of the shared memory, SGA,
on each instance or each node,

00:47:20.580 --> 00:47:24.470
instance and node are being used
interchangeably in that case,

00:47:24.470 --> 00:47:27.150
is 1.7 gig.

00:47:27.160 --> 00:47:32.350
There is an old trick that used to
be done in Solaris and on 32-bit

00:47:32.410 --> 00:47:39.660
versions of Linux that is resurrected,
again, for this port.

00:47:39.720 --> 00:47:42.700
And this would allow you
to relink the binary.

00:47:43.140 --> 00:47:47.110
And change the attach address of
where the shared memory region

00:47:47.110 --> 00:47:49.310
attaches in the process space.

00:47:49.320 --> 00:47:55.830
And that can give you up to 3.7
gig of shared memory per node.

00:47:55.840 --> 00:47:59.830
So, again,
if you had a 4 gig node and you

00:47:59.830 --> 00:48:04.610
could relink using Gen KSMS,
which is the tool that

00:48:04.610 --> 00:48:07.970
relocates the attach address...

00:48:08.240 --> 00:48:11.620
Once you relink,
then the new attach address takes

00:48:11.620 --> 00:48:13.820
effect in the Oracle binary.

00:48:13.840 --> 00:48:17.140
Then you can have up to 3.7 gig.

00:48:17.140 --> 00:48:18.920
At that point,
you'd probably want to have

00:48:18.920 --> 00:48:21.200
more than 4 gig per node,
because you're going to

00:48:21.200 --> 00:48:27.280
need room for foreground
processes to connect to Oracle.

00:48:27.400 --> 00:48:32.160
And if you had all 3.7 gig
allocated on a 4 gig machine,

00:48:32.200 --> 00:48:33.410
you'd probably start swapping.

00:48:33.600 --> 00:48:36.670
So that wouldn't be very handy.

00:48:40.520 --> 00:48:45.740
Sysctl is probably the most tweaking
you have to do in terms of tweaking

00:48:45.740 --> 00:48:50.160
the Panther or Tiger kernel in
order to support or to change

00:48:50.160 --> 00:48:53.960
the defaults in order to run a
rack comfortably on a system.

00:48:53.960 --> 00:48:57.950
Again, kern.shemmax,
and there's a whole bunch of shared

00:48:57.950 --> 00:49:02.490
memory parameters that are in the
install guide that go with that.

00:49:02.500 --> 00:49:07.720
But shemmax is sort of the big
money shared memory parameter.

00:49:07.720 --> 00:49:11.380
This sets the upper limit
of how big a segment can be,

00:49:11.380 --> 00:49:14.140
and the value here shown is 1.7.

00:49:14.140 --> 00:49:17.570
Again, Barb mentioned that if you
had a production license,

00:49:17.580 --> 00:49:20.570
with that production license,
you get a MetaLink account.

00:49:20.620 --> 00:49:25.570
And with that MetaLink account,
you are able to look up application

00:49:25.570 --> 00:49:31.280
notes on how to do specific changes
regarding this remapping operation.

00:49:31.280 --> 00:49:34.610
Global Cache Services,
this is the interconnect that

00:49:34.710 --> 00:49:37.090
allows nodes to talk to each other.

00:49:37.460 --> 00:49:39.460
You can use instances
to talk to each other.

00:49:39.460 --> 00:49:46.460
This interconnect runs over UDP,
and so the standard UDP buffer defaults

00:49:46.620 --> 00:49:52.460
in Tiger and Panther are not quite
sufficient for the kind of traffic load

00:49:52.460 --> 00:49:54.430
that you might expect in a rack cluster.

00:49:54.730 --> 00:50:00.710
And again, making these defaults higher
is towards minimizing the

00:50:00.710 --> 00:50:03.820
node eviction probabilities.

00:50:04.470 --> 00:50:07.100
Process limits,
I believe the default is 200.

00:50:07.100 --> 00:50:08.040
It's quite low.

00:50:08.040 --> 00:50:13.790
And so on a typical Oracle cluster,
there's at least 30 or 40 background

00:50:13.790 --> 00:50:19.290
processes that Oracle starts up
without anybody even logging in.

00:50:19.300 --> 00:50:23.940
So depending on the number of
connected users or connected sessions,

00:50:23.940 --> 00:50:27.860
which could map back to
the application tier,

00:50:27.860 --> 00:50:31.480
which could support multiple
application tier connections,

00:50:32.100 --> 00:50:36.080
but the number of actual foreground
connections combined with the number

00:50:36.080 --> 00:50:41.020
of background connections Oracle starts
up certainly will exceed 100.

00:50:41.020 --> 00:50:45.280
By setting it to 2,000,
that's probably going to be more

00:50:45.280 --> 00:50:47.660
than enough for that given node.

00:50:52.880 --> 00:50:55.830
I think I will hand it
back to Barb at this time,

00:50:55.830 --> 00:50:57.800
and she'll wrap it up,
and then we're going to have

00:50:57.800 --> 00:50:58.870
a Q&A session at the end.

00:50:58.880 --> 00:51:00.370
Thanks, Jeff.

00:51:02.190 --> 00:51:04.560
Okay, just to summarize,
just so you know,

00:51:04.560 --> 00:51:08.500
you can run Oracle RAC 10g
on your Mac OS platform.

00:51:08.500 --> 00:51:14.080
And it's there to provide you
with a flexible scalability

00:51:14.080 --> 00:51:17.500
and high availability option
for your Oracle database.

00:51:17.500 --> 00:51:21.000
Remember,
if you're going to implement it,

00:51:21.360 --> 00:51:25.460
change control, testing,
a good test environment is

00:51:26.110 --> 00:51:31.650
huge in helping you make that
project a successful one for you.

00:51:32.330 --> 00:51:35.010
And really,
Oracle Metalink is an excellent

00:51:35.010 --> 00:51:39.580
source of information,
as well as the Oracle Technology Network.

00:51:39.580 --> 00:51:44.660
If you go otn.oracle.com slash rack,
you'll get to the rack page.

00:51:44.660 --> 00:51:51.390
Here's some list of different URLs of
different information that are useful

00:51:51.390 --> 00:51:54.450
to you when you're going to rack.

00:51:54.540 --> 00:51:56.420
So have a look at them.

00:51:56.420 --> 00:51:58.460
Go look.

00:51:58.600 --> 00:52:01.420
Most of those are publicly available
to you other than Metalink.

00:52:01.530 --> 00:52:01.850
Metalink.

00:52:02.070 --> 00:52:04.100
This is the one that you have to
have your support account for.

00:52:04.100 --> 00:52:06.670
But otherwise,
it's all public information.