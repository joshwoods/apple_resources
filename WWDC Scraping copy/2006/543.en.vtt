WEBVTT

00:00:10.230 --> 00:00:17.000
session of the conference.

00:00:17.000 --> 00:00:17.000
I'm glad you chose to come to my session.

00:00:17.000 --> 00:00:23.800
I think you'll This is really the
capstone of the entire conference.

00:00:23.800 --> 00:00:26.760
So I hope you enjoy it.

00:00:28.120 --> 00:00:30.340
My name is David Kraemer.

00:00:30.350 --> 00:00:32.700
I am with Xgrid Engineering.

00:00:32.700 --> 00:00:36.530
Steve Simon will be joining me later
to demo one of the new features

00:00:36.530 --> 00:00:38.650
that I'll be talking about now.

00:00:40.390 --> 00:00:42.140
We're going to start with an overview.

00:00:42.140 --> 00:00:43.780
This is going to be an
introduction for those of you

00:00:43.780 --> 00:00:47.280
who haven't used Xgrid before,
haven't attended one of my sessions.

00:00:47.360 --> 00:00:50.680
Show of hands, how many people have never
heard of Xgrid or haven't really

00:00:50.680 --> 00:00:52.300
learned anything about Xgrid?

00:00:52.300 --> 00:00:55.300
Alright, for the four of you,
this is going to be great.

00:00:55.300 --> 00:00:58.300
The rest of you, just a refresher course.

00:00:58.300 --> 00:01:01.390
And we're going to get through
this real fast and move on

00:01:01.390 --> 00:01:03.300
and talk about new features.

00:01:03.300 --> 00:01:06.290
So, let me get back to this.

00:01:06.290 --> 00:01:10.300
The main thing we want to let you
know is that Leopard includes Xgrid 2.

00:01:10.300 --> 00:01:14.580
Xgrid 1 already was included with
Tiger and we've made some improvements

00:01:14.580 --> 00:01:17.300
in Leopard and we're calling it Xgrid 2.

00:01:17.300 --> 00:01:24.390
All of the primary components of Xgrid
are included with base Leopard systems,

00:01:24.390 --> 00:01:29.300
but the administrative tools that make
it easy for you to deploy your grids

00:01:29.300 --> 00:01:31.300
are included with Leopard Server.

00:01:31.300 --> 00:01:31.890
And my recommendation is that
you should be able to use Leopard

00:01:31.890 --> 00:01:32.300
Server to deploy your grids.

00:01:32.300 --> 00:01:36.300
And my recommendation is that to use,
to get these administrative tools,

00:01:36.300 --> 00:01:40.510
the best way is to buy an XServe
or 8 or 16 because it's going

00:01:40.510 --> 00:01:43.300
to come with Leopard Server,
especially one of those new Xeon,

00:01:43.300 --> 00:01:45.300
XServes, QuadCore.

00:01:45.300 --> 00:01:46.260
Sounds great.

00:01:46.390 --> 00:01:48.300
Buy a bunch, please.

00:01:48.300 --> 00:01:50.740
You get the administrative software,
it would be really easy

00:01:50.740 --> 00:01:51.780
to set up your cluster.

00:01:52.100 --> 00:01:54.100
So as I said,
we're going to start with the overview,

00:01:54.100 --> 00:01:56.260
then we're going to move
on to developing for Xgrid,

00:01:56.260 --> 00:01:59.190
talk about some of the new
API features we've added,

00:01:59.190 --> 00:02:00.700
and talk about the administration.

00:02:00.700 --> 00:02:04.070
And those two sections are
going to be completely all

00:02:04.070 --> 00:02:06.160
about new features in Leopard.

00:02:06.300 --> 00:02:07.970
Stick around.

00:02:08.920 --> 00:02:13.400
So why would you want to use Xgrid in the
first place instead of something else?

00:02:13.400 --> 00:02:15.270
There's lots of options out there.

00:02:15.280 --> 00:02:17.650
I mean, you can use SSH,
you could hire some grad

00:02:17.650 --> 00:02:20.890
students to run around and start
stuff on a bunch of computers.

00:02:20.890 --> 00:02:24.240
You can do it any way you want,
but we think you should

00:02:24.240 --> 00:02:26.100
use Xgrid and here's why.

00:02:26.100 --> 00:02:29.910
Well, one is it makes distributed
computing painless and I'll talk a

00:02:29.910 --> 00:02:34.140
little bit more about that later,
but the goal here is to make it drop dead

00:02:34.140 --> 00:02:38.590
simple for you to deploy your clusters,
for your users to use the

00:02:38.630 --> 00:02:41.660
distributed resources that you have.

00:02:42.640 --> 00:02:45.750
The next point I'd like to
bring up about why you should

00:02:45.750 --> 00:02:48.800
use Xgrid is that it allows
people-friendly sharing of resources.

00:02:48.800 --> 00:02:54.210
And so we have a mechanism for
letting people's computers get

00:02:54.210 --> 00:02:56.100
used when they aren't using it.

00:02:56.130 --> 00:02:59.390
But once they return and
they are using the computer,

00:02:59.400 --> 00:03:03.200
Xgrid backs off and it's no
longer monopolizing the computer.

00:03:03.270 --> 00:03:07.900
And so people can feel good about
sharing their resources with you.

00:03:08.000 --> 00:03:11.940
And one more reason why Xgrid
is great in our opinion is that

00:03:12.020 --> 00:03:16.200
it supports a wide variety of
styles of distributed computing.

00:03:16.290 --> 00:03:19.900
So one style is sort of the Beowulf
style where you just buy some components,

00:03:19.900 --> 00:03:23.600
put it in a rack,
hook it all together with Ethernet,

00:03:23.680 --> 00:03:27.980
and you have a dedicated cluster,
a closet or somewhere that just

00:03:27.980 --> 00:03:31.700
contains all these computers and
you use it just for your one task.

00:03:31.820 --> 00:03:34.760
Maybe you get this cluster because
you write up a grant proposal

00:03:34.850 --> 00:03:36.600
and you get this nice cluster.

00:03:36.600 --> 00:03:37.070
You set it up.

00:03:37.140 --> 00:03:37.800
You run Xgrid on it.

00:03:37.800 --> 00:03:38.790
And you do your work.

00:03:38.820 --> 00:03:40.790
But we also support other styles.

00:03:40.800 --> 00:03:44.600
At the other end of the spectrum,
we have the more SETI at home style.

00:03:44.720 --> 00:03:49.300
And this is where you have machines
all across the wide area network,

00:03:49.300 --> 00:03:50.300
across the Internet.

00:03:50.300 --> 00:03:55.120
And they're connecting to the central
authority for Xgrid and getting

00:03:55.120 --> 00:03:57.600
their work and doing it that way.

00:03:57.600 --> 00:03:58.900
And so that's SETI at home.

00:03:58.900 --> 00:04:02.400
You can get a lot of people involved.

00:04:02.400 --> 00:04:05.640
Charles Parnot's Xgrid at
Stanford project is a great

00:04:05.640 --> 00:04:07.690
example of that kind of thing.

00:04:07.830 --> 00:04:11.180
And then in the middle,
we have the sort of cycle

00:04:11.180 --> 00:04:13.700
recovery at an organization.

00:04:13.700 --> 00:04:16.230
And that's like where you
have a computer lab or just a

00:04:16.230 --> 00:04:17.700
bunch of computers on desks.

00:04:17.710 --> 00:04:19.700
And at night, they remain unused.

00:04:19.700 --> 00:04:23.690
And so in that case,
it would be nice to make use of those

00:04:23.690 --> 00:04:26.700
computers for computing purposes.

00:04:29.050 --> 00:04:30.800
So that's why we think
you should use Xgrid,

00:04:30.800 --> 00:04:33.350
but who should be using
Xgrid is the next question,

00:04:33.350 --> 00:04:36.840
and there's a number of different
people we'd like to be using Xgrid.

00:04:36.840 --> 00:04:39.790
We think institutions and organizations
can get a lot of benefit out of using

00:04:39.790 --> 00:04:44.910
Xgrid because we're making setting
up distributed computing resources

00:04:44.960 --> 00:04:47.340
much easier and much simplified.

00:04:47.340 --> 00:04:52.880
So setting it up is just a
few clicks in server admin.

00:04:52.880 --> 00:04:53.660
Maintaining it is easy.

00:04:53.660 --> 00:04:56.680
There's some really nice graphical
utilities for doing that.

00:04:56.680 --> 00:04:59.300
And then once it is set up,
the grid becomes a service,

00:04:59.300 --> 00:05:03.050
and it's a service like mail
or print or file sharing,

00:05:03.050 --> 00:05:04.820
and the IT department maintains it.

00:05:04.820 --> 00:05:07.720
So the people who are good at
maintaining servers maintain the servers,

00:05:07.720 --> 00:05:11.020
and the people who are good at doing
distributed computing get to submit

00:05:11.020 --> 00:05:12.990
their work to the grid and do it.

00:05:13.000 --> 00:05:14.780
And they don't have to worry
about rebooting the servers,

00:05:14.780 --> 00:05:17.960
about access controls,
about security authentication, whatever.

00:05:17.970 --> 00:05:19.160
They just get to use it.

00:05:19.330 --> 00:05:22.560
It's very easy.

00:05:22.560 --> 00:05:25.720
So scientists are clearly
one group of people that have

00:05:25.720 --> 00:05:27.390
a lot of computing to do.

00:05:27.760 --> 00:05:30.240
And so we've been working with
a lot of engineers as well.

00:05:30.280 --> 00:05:33.260
I was trained as a physicist,
and now I'm a software engineer

00:05:33.260 --> 00:05:35.000
in both of these professions.

00:05:35.000 --> 00:05:37.830
I have found that it's very
useful to have a lot of computing

00:05:37.830 --> 00:05:41.140
resources when you have a lot of
data that needs to be processed.

00:05:41.140 --> 00:05:45.500
So one of the reasons that Xgrid is
nice for these people is because --

00:05:45.530 --> 00:05:49.520
and this gets back to the painless
distributed computing concept.

00:05:49.520 --> 00:05:53.060
And this is that we have a
persistent job queue in Xgrid.

00:05:53.060 --> 00:05:56.330
So this means that you can
fire and forget your work.

00:05:56.330 --> 00:05:57.560
So, you know, we have a lot of data.

00:05:57.560 --> 00:05:58.300
You can get a lot of data.

00:05:58.300 --> 00:05:59.040
You can get a lot of data.

00:05:59.040 --> 00:06:00.710
And, you know,
it's very easy to get a lot of data.

00:06:00.760 --> 00:06:01.560
But we have a lot of data.

00:06:01.560 --> 00:06:03.560
And so we've been working with
a lot of different engineers to

00:06:03.560 --> 00:06:04.360
be able to get a lot of data.

00:06:04.360 --> 00:06:07.080
And so we've been working with
a lot of different engineers to

00:06:07.080 --> 00:06:08.410
be able to get a lot of data.

00:06:08.410 --> 00:06:08.900
And so we've

00:06:09.360 --> 00:06:12.760
So he sets up the job and he
submits the job off to the cluster,

00:06:12.760 --> 00:06:15.940
but he doesn't want to stick around all
weekend to wait for this to get done.

00:06:15.940 --> 00:06:16.660
He needs to go home.

00:06:16.660 --> 00:06:19.550
He wants to spend time with his family,
go to Disneyland, something,

00:06:19.590 --> 00:06:20.460
have a good time.

00:06:20.460 --> 00:06:24.020
And so what happens with Xgrid
is he can submit the work from

00:06:24.020 --> 00:06:28.060
his laptop and then disconnect,
close the lid of his laptop,

00:06:28.060 --> 00:06:32.050
take the laptop home,
and the job stays running at work,

00:06:32.070 --> 00:06:33.980
at school,
wherever he did the submission.

00:06:33.980 --> 00:06:35.380
And it'll just stay there.

00:06:35.380 --> 00:06:36.590
It'll keep working.

00:06:36.610 --> 00:06:39.210
Xgrid will manage it,
make sure everything goes right.

00:06:39.250 --> 00:06:41.010
If anything goes wrong,
it'll try to fix it.

00:06:41.010 --> 00:06:46.860
And then when the researcher
returns to work on Monday,

00:06:47.050 --> 00:06:49.790
He just reconnects to the controller
and the job results are waiting for

00:06:49.790 --> 00:06:51.530
him to download at his convenience.

00:06:51.530 --> 00:06:55.190
So we think that makes it much
easier to use grid resources and

00:06:55.190 --> 00:06:57.000
one of the benefits of using Xgrid.

00:06:57.000 --> 00:07:03.000
And then a third group that we're seeing
more people getting interested in Xgrid,

00:07:03.010 --> 00:07:05.000
these people are content producers.

00:07:05.020 --> 00:07:08.170
And so one example of content
producers are people using

00:07:08.190 --> 00:07:11.930
Apple's Podcast Producer,
which we announced on Wednesday.

00:07:12.000 --> 00:07:16.440
And so clearly here they get
to use Xgrid as the distributed

00:07:16.440 --> 00:07:21.000
processing engine for doing the video
transcoding for running the workflows.

00:07:21.030 --> 00:07:24.150
And so they can get a lot of
benefit out of having Xgrid set up

00:07:24.150 --> 00:07:28.000
without actually needing to know
how to write software for Xgrid.

00:07:28.000 --> 00:07:31.000
And then there's other third party
applications out there that use Xgrid.

00:07:31.000 --> 00:07:36.670
For example, VideoHub uses Xgrid to,
I think it runs FFmpegX across

00:07:36.670 --> 00:07:41.000
your network to do
transcoding of video as well.

00:07:41.000 --> 00:07:42.670
as well.

00:07:45.060 --> 00:07:48.460
So before we get too far into this,
I wanted to talk to you a little

00:07:48.460 --> 00:07:50.570
bit about terminology for those
of you who aren't familiar with

00:07:50.580 --> 00:07:51.720
the terms I'm going to use.

00:07:51.780 --> 00:07:54.760
Actually it's simple and
there's only a few terms here,

00:07:54.760 --> 00:07:58.580
but I just want to make sure we're all
on the same page so there's no confusion.

00:07:58.650 --> 00:08:00.900
We have clients, controllers and agents.

00:08:00.900 --> 00:08:04.640
These are the primary
operators in this process,

00:08:04.730 --> 00:08:08.430
the primary people that
are working together.

00:08:08.460 --> 00:08:10.640
So the client is the one that has
the work that needs to be done.

00:08:10.640 --> 00:08:12.550
This is the scientist, the researcher.

00:08:12.610 --> 00:08:15.640
The controller is the process
in the middle that maintains the

00:08:15.640 --> 00:08:18.660
job queue and it receives the
work and it distributes it out.

00:08:18.660 --> 00:08:22.630
And then finally the agents are
the ones that do the actual work.

00:08:23.900 --> 00:08:25.010
It's a little bit dry.

00:08:25.030 --> 00:08:27.770
I have a picture here to
make it a little clearer.

00:08:27.780 --> 00:08:29.110
So over here we have the clients.

00:08:29.140 --> 00:08:35.210
These are people using their computers,
laptops, iMacs, G5s, Xeons,

00:08:35.250 --> 00:08:37.210
whatever you have.

00:08:37.470 --> 00:08:39.000
They're the ones with the work.

00:08:39.000 --> 00:08:42.510
They set up the jobs and they run
an application to submit the work.

00:08:42.510 --> 00:08:44.150
And the work gets submitted
to the controller.

00:08:44.150 --> 00:08:47.710
The controller is in this middle
tier of this three-tier architecture.

00:08:47.790 --> 00:08:52.200
And it's the one that manages everyone
on the other two tiers and makes sure

00:08:52.210 --> 00:08:53.880
everyone's playing together right.

00:08:53.880 --> 00:08:58.760
So, finally, once your work's been
sent to the controller,

00:08:58.760 --> 00:09:01.780
then the controller finds
available agents and sends the

00:09:01.800 --> 00:09:03.240
work out to them to get it done.

00:09:03.240 --> 00:09:06.040
So, agents, I mean,
agents can be any kind of computer.

00:09:06.040 --> 00:09:08.410
It could be the same
computers as the clients.

00:09:08.440 --> 00:09:13.080
You could have an Xgrid set up where
all of the clients were also agents.

00:09:13.080 --> 00:09:15.240
You can have a controller
that's an agent.

00:09:15.240 --> 00:09:19.150
You could have all of these
tiers in one computer and

00:09:19.160 --> 00:09:21.720
just have a one computer grid.

00:09:21.720 --> 00:09:22.520
Not so exciting.

00:09:22.520 --> 00:09:25.560
I think you should buy those
16 Xers I talked about before.

00:09:25.560 --> 00:09:28.150
But, you know, this is what we got.

00:09:28.240 --> 00:09:32.110
So, the three tiers all in one or
distributed across lots of machines.

00:09:34.020 --> 00:09:36.500
So just a little bit more,
and this is kind of like a dictionary,

00:09:36.500 --> 00:09:38.000
I'm almost done with the terminology.

00:09:38.000 --> 00:09:42.520
What we're actually managing
here in the controller are grids,

00:09:42.520 --> 00:09:44.000
jobs, and tasks.

00:09:44.000 --> 00:09:48.460
And so the grid is the
collection of agents that the

00:09:48.460 --> 00:09:50.000
controller is maintaining.

00:09:50.000 --> 00:09:52.690
And you can have multiple grids
that you set up and you can

00:09:52.690 --> 00:09:56.000
drag your specific agents that
you want to each separate grid.

00:09:56.000 --> 00:09:59.120
And then you can tell people, "Okay,
well, you guys, you submit to this grid,

00:09:59.120 --> 00:10:02.710
and you guys submit to that grid."
And then you both get some of the

00:10:02.710 --> 00:10:05.000
resources that we have on the network.

00:10:05.000 --> 00:10:09.300
And then the grid is also the job queue,
and this is what manages the list of

00:10:09.360 --> 00:10:14.000
work that needs to be done and makes sure
that it gets done in the right order.

00:10:14.000 --> 00:10:16.970
So a job,
which is what is stored in the job queue,

00:10:17.040 --> 00:10:20.990
is the set of tasks that you
want to get done on the agents.

00:10:21.000 --> 00:10:25.000
And it also includes the input
and output data of the tasks.

00:10:25.000 --> 00:10:28.490
So once the task is finished,
the job includes the output data,

00:10:28.490 --> 00:10:30.700
which can be retrieved by the client.

00:10:30.800 --> 00:12:35.100
[Transcript missing]

00:12:36.500 --> 00:12:42.280
So, that was the workflow,
but what else does Xgrid do?

00:12:42.280 --> 00:12:45.570
One thing it does that I didn't mention
before is that it enforces authentication

00:12:45.580 --> 00:12:47.380
and authorization policies.

00:12:47.400 --> 00:12:51.260
So this means that you can rest
assured that if you set up your

00:12:51.260 --> 00:12:56.400
service ACLs that only authorized
people have access to your resources.

00:12:56.400 --> 00:12:59.250
As I said before,
it groups agents into grids,

00:12:59.250 --> 00:13:03.400
it monitors agent availability,
manages the queues of the jobs,

00:13:03.400 --> 00:13:06.400
and then one thing I didn't mention
was that jobs can have dependencies.

00:13:06.400 --> 00:13:09.960
So you can submit multiple jobs and say
that these following jobs should not even

00:13:10.000 --> 00:13:12.390
be started until the first job completes.

00:13:12.400 --> 00:13:16.850
And so the scheduler schedules
runnable jobs when there

00:13:16.850 --> 00:13:19.400
are available agents to run.

00:13:19.400 --> 00:13:21.400
Xgrid also handles data staging.

00:13:21.400 --> 00:13:25.000
As I said,
the jobs and the tasks include the input

00:13:25.000 --> 00:13:27.380
data and then collect the output data.

00:13:27.400 --> 00:13:30.400
Xgrid will move all the data around
for you if you would like it to.

00:13:30.400 --> 00:13:30.400
And then the really important
thing is that it's a very

00:13:30.400 --> 00:13:30.400
easy way to run your data.

00:13:30.400 --> 00:13:31.400
So you can run your data
in a very simple way.

00:13:31.400 --> 00:13:32.400
So you can run your data
in a very simple way.

00:13:32.400 --> 00:13:36.390
And then the really important thing
that I think Xgrid does that I like,

00:13:36.400 --> 00:13:38.380
my favorite feature I think,
is that it recovers from failures.

00:13:38.430 --> 00:13:40.390
And so that's the agent going offline.

00:13:40.460 --> 00:13:45.400
It can deal with that and send
the work over to another agent.

00:13:45.520 --> 00:13:49.860
And then another way it can
recover from failure is that if the

00:13:49.860 --> 00:13:53.400
actual controller were to crash,
heaven forbid,

00:13:53.400 --> 00:13:57.100
or if the machine were to be
shut down or maybe you need to

00:13:57.100 --> 00:14:01.400
restart for a security update,
you can reboot.

00:14:01.400 --> 00:14:02.400
The jobs will persist.

00:14:02.400 --> 00:14:04.400
They're stored on disk in a database.

00:14:04.400 --> 00:14:07.760
And when the server comes back up,
the jobs are all there and

00:14:07.760 --> 00:14:09.400
they will continue running.

00:14:09.400 --> 00:14:12.290
And the pieces that have
been finished ahead of time,

00:14:12.320 --> 00:14:14.400
all those results are still there.

00:14:14.470 --> 00:14:18.850
The tasks that were in process at that
point will get resubmitted once the

00:14:18.850 --> 00:14:21.400
agents reconnect to the controller.

00:14:22.960 --> 00:14:26.550
So that was the overview.

00:14:26.550 --> 00:14:30.330
And now let's talk about what is
new here in Leopard for Xgrid.

00:14:30.350 --> 00:14:34.300
So we've addressed three
areas of improvements here.

00:14:34.350 --> 00:14:39.920
Ease of developer adoption,
and for that we have three new features:

00:14:39.920 --> 00:14:44.440
Xgrid Anywhere, Xgrid Scoreboard,
and Task Feedback, and I'll talk more

00:14:44.440 --> 00:14:45.740
about those in a moment.

00:14:45.740 --> 00:14:48.580
We've also tried to
address ease of setup,

00:14:48.580 --> 00:14:51.540
and to this end we've created a
service configuration assistant

00:14:51.540 --> 00:14:57.000
for Xgrid to make it even simpler
to deploy Xgrid on your servers.

00:14:57.100 --> 00:15:01.500
It was pretty simple before,
there was only, I don't know, six clicks,

00:15:01.500 --> 00:15:03.700
I think we've got it down
to three or four now.

00:15:03.720 --> 00:15:06.700
So it's pretty easy to
get going with Xgrid.

00:15:06.700 --> 00:15:11.140
And then the final piece that
we've addressed is ease of porting,

00:15:11.140 --> 00:15:14.760
and this isn't exactly an Xgrid feature,
but OpenMPI will be

00:15:14.810 --> 00:15:17.670
included with Leopard,
so if you have existing

00:15:17.670 --> 00:15:21.300
distributed computing applications
that make use of the MPI,

00:15:21.300 --> 00:15:28.340
API, you can use OpenMPI in Leopard and
it will automatically use Xgrid

00:15:28.340 --> 00:15:30.600
if you have Xgrid configured.

00:15:31.700 --> 00:15:35.100
And I see we have some open MPI fans,
so that's great.

00:15:35.100 --> 00:15:36.700
So, here's the good stuff.

00:15:36.700 --> 00:15:40.700
What's new in Leopard for
writing your Xgrid software?

00:15:40.700 --> 00:15:45.700
So, three features: Xgrid Anywhere,
Xgrid Scoreboard, Task Feedback.

00:15:45.700 --> 00:15:49.620
Xgrid Anywhere is a feature
that allows your Xgrid-enabled

00:15:49.620 --> 00:15:51.700
software to run no matter what.

00:15:51.750 --> 00:15:55.740
And by no matter what I mean,
even if there are no controllers

00:15:55.740 --> 00:15:57.700
or agents on your network.

00:15:57.720 --> 00:16:00.890
So, you're just on a standalone machine,
you're flying 20,000 feet,

00:16:00.890 --> 00:16:02.700
heading back home tonight.

00:16:02.750 --> 00:16:07.680
You can start writing Xgrid software
on your desktop or your laptop,

00:16:07.700 --> 00:16:08.700
your portable machine.

00:16:08.700 --> 00:16:11.700
And you don't need to set
up any controller or agent.

00:16:11.760 --> 00:16:15.110
And you can just start actually
testing the job submission and results

00:16:15.110 --> 00:16:16.700
retrieval right then and there.

00:16:16.750 --> 00:16:20.620
Xgrid Scoreboard is a really
exciting new feature that we've

00:16:21.040 --> 00:16:24.700
developed based on a lot of feedback
we've gotten on the mailing list

00:16:24.700 --> 00:16:26.700
and at previous sessions and Q&A.

00:16:26.740 --> 00:16:32.550
Where people have wanted to be
able to specify which resources

00:16:32.550 --> 00:16:35.690
are used for a particular job.

00:16:35.700 --> 00:16:38.950
And so, we've addressed that with
Xgrid Scoreboard and we'll be

00:16:38.950 --> 00:16:40.700
talking about that more soon.

00:16:40.700 --> 00:16:43.820
And then Task Feedback is the
third new feature that we've added,

00:16:44.070 --> 00:16:47.020
which lets the scheduler make
more informed decisions about

00:16:47.020 --> 00:16:50.700
where you want your tasks to run
based on the current conditions.

00:16:50.700 --> 00:16:53.750
And that might sound a lot like
Scoreboard and I'll explain sort of

00:16:53.780 --> 00:16:55.700
the differences between those two.

00:16:55.700 --> 00:16:58.210
These are just the three features
that we're talking about today and

00:16:58.270 --> 00:16:59.690
that are included with your seed.

00:16:59.760 --> 00:17:03.210
We have more enhancements for Xgrid
that we intend to get in there,

00:17:03.210 --> 00:17:05.700
but we're going to
talk about these today.

00:17:07.210 --> 00:17:09.200
The first one is Xgrid Anywhere.

00:17:09.200 --> 00:17:14.480
And basically the problem
that has come up is that we'd

00:17:14.480 --> 00:17:17.040
like everyone to use Xgrid,
and everyone's like, "Well, yeah,

00:17:17.040 --> 00:17:19.180
if I had five computers,
everything should just

00:17:19.180 --> 00:17:20.200
go five times faster.

00:17:20.200 --> 00:17:22.280
That sounds like a good
plan." And they say,

00:17:22.300 --> 00:17:26.330
"So can I just drag my application
onto the Xgrid icon in the dock,

00:17:26.330 --> 00:17:30.700
and it'll go faster?" And it sounds good.

00:17:30.700 --> 00:17:31.690
I'd like that.

00:17:31.700 --> 00:17:35.350
But that's unfortunately
not how it works right now.

00:17:35.350 --> 00:17:35.350
Sorry.

00:17:36.010 --> 00:17:38.020
So there's no free ride.

00:17:38.020 --> 00:17:40.410
You do need to adopt Xgrid.

00:17:40.430 --> 00:17:42.600
And the problem there is
that adoption is hard.

00:17:42.600 --> 00:17:44.420
And I don't mean that Xgrid,
in particular, is hard.

00:17:44.420 --> 00:17:47.040
I just mean that adopting things is work.

00:17:47.040 --> 00:17:48.320
You're going to have
to learn something new.

00:17:48.320 --> 00:17:49.700
There's a new API.

00:17:49.700 --> 00:17:51.360
You're going to have to change your code.

00:17:51.360 --> 00:17:54.580
And then once you do change your code,
the real problem here is that you still

00:17:54.580 --> 00:17:58.840
need to maintain all of the code that
you wrote before to do it all locally,

00:17:58.840 --> 00:18:02.500
because you don't know if your users
are going to have Xgrid set up ahead of

00:18:02.500 --> 00:18:03.900
time if they're going to have a cluster.

00:18:03.900 --> 00:18:07.710
So with Xgrid Anywhere,
we've decided to solve this

00:18:07.840 --> 00:18:11.100
by making it so that Xgrid is
available anywhere you are,

00:18:11.100 --> 00:18:14.860
no matter what operating system
of Mac OS X Leopard you are using,

00:18:14.860 --> 00:18:17.130
desktop or server.

00:18:17.170 --> 00:18:21.660
And you can just run the application,
and it'll work.

00:18:21.660 --> 00:18:24.650
So now you can rewrite
your code to Xgrid,

00:18:24.650 --> 00:18:26.340
and you only need one code path.

00:18:26.340 --> 00:18:29.280
It's always going to work,
even if there are no controllers

00:18:29.280 --> 00:18:31.440
or agents available on the network.

00:18:31.480 --> 00:18:35.580
So there's two pieces that make
up the Xgrid Anywhere feature.

00:18:35.580 --> 00:18:38.320
The first one is Xgrid here,
I'll call it.

00:18:38.320 --> 00:18:39.940
And this is the private controller.

00:18:39.940 --> 00:18:43.160
And basically, there's a new API,
private controller,

00:18:43.160 --> 00:18:45.510
on the XG controller class,
which you can call,

00:18:45.600 --> 00:18:50.040
which provides your application
with its own private in-memory

00:18:50.050 --> 00:18:51.760
space controller and agent.

00:18:51.760 --> 00:18:54.140
These controller and agent are
basically running inside your

00:18:54.140 --> 00:18:56.720
application's process space.

00:18:56.860 --> 00:19:00.220
And you can use them as if
they were a network controller,

00:19:00.220 --> 00:19:01.460
a network agent.

00:19:01.460 --> 00:19:03.490
Everything is going to
work exactly the same,

00:19:03.490 --> 00:19:07.610
job activities, submission, monitoring,
retrieval, all exactly the same.

00:19:07.640 --> 00:19:10.900
So you just need one code
path that always will work,

00:19:10.900 --> 00:19:14.080
whether or not there's
any network set up.

00:19:14.080 --> 00:19:15.880
You also don't need to use this new API.

00:19:15.880 --> 00:19:20.180
If you already have a host name
entry field in your application,

00:19:20.180 --> 00:19:22.740
you can just type in
this special host name,

00:19:22.740 --> 00:19:25.440
colon, private, colon,
and you will connect.

00:19:25.440 --> 00:19:28.730
It will instantiate this
private controller and

00:19:28.770 --> 00:19:31.450
connect the application to it.

00:19:32.750 --> 00:19:36.410
The next piece of Xgrid
Anywhere is Xgrid There.

00:19:36.410 --> 00:19:38.720
And this is the default controller.

00:19:38.720 --> 00:19:42.180
So what we've done is created
a system and a user preference

00:19:42.180 --> 00:19:46.400
that you can set that says,
if I don't know what controller to use,

00:19:46.400 --> 00:19:47.460
use this one.

00:19:47.460 --> 00:19:50.740
And so this makes it easier for end
users at a large organization who

00:19:50.740 --> 00:19:54.390
don't know how to configure Xgrid to
connect to a particular controller.

00:19:54.390 --> 00:19:56.340
They don't know which one
they're supposed to use.

00:19:56.340 --> 00:19:58.850
You can push these settings out
and then these users will just

00:19:58.850 --> 00:20:00.740
automatically connect to the right one.

00:20:00.740 --> 00:20:04.260
And so to make use of this feature,
your application should call

00:20:04.270 --> 00:20:06.040
the default controller API.

00:20:06.090 --> 00:20:11.510
And this will return the default
controller that's been connected up based

00:20:11.580 --> 00:20:14.960
on what this setting has been set to.

00:20:14.960 --> 00:20:17.050
And then the really interesting
part here is that if no default

00:20:17.130 --> 00:20:19.870
controller has been set up,
presumably because there are

00:20:19.940 --> 00:20:23.170
no controllers on the network,
you just automatically get

00:20:23.170 --> 00:20:24.950
the private controller.

00:20:26.180 --> 00:20:28.700
So, you take Xgrid here,
and you take Xgrid there,

00:20:28.700 --> 00:20:30.730
and you put them together
and you get Xgrid anywhere.

00:20:30.920 --> 00:20:34.490
This makes your application
easier to test and easier to use.

00:20:34.500 --> 00:20:37.690
And I've really enjoyed using
this new feature myself because,

00:20:37.750 --> 00:20:42.740
like when I was developing some
of the demo code for this session,

00:20:43.000 --> 00:20:45.800
I didn't have this rack in my cube.

00:20:45.820 --> 00:20:48.200
So,
I needed to make sure the job submission

00:20:48.200 --> 00:20:52.000
and results retrieval was working,
and I didn't have to set up a grid.

00:20:52.000 --> 00:20:56.230
I just could start the application,
type in colon, private, colon,

00:20:56.300 --> 00:21:01.340
and I was going, I could do all,
test all of my application code

00:21:01.490 --> 00:21:02.980
without having to set up a grid.

00:21:03.010 --> 00:21:04.850
Now,
without having to worry about Kerberos

00:21:04.850 --> 00:21:06.500
or passwords or anything like that.

00:21:06.530 --> 00:21:10.500
So, if you use the default
controller in your application,

00:21:10.500 --> 00:21:13.390
it's always going to work the
way your users want it to do.

00:21:13.410 --> 00:21:16.010
Either it's going to use a private
controller and it's just going

00:21:16.030 --> 00:21:18.400
to work without a network setup,
or it's going to use

00:21:18.400 --> 00:21:20.760
their default controller,
which is the one they want.

00:21:23.900 --> 00:23:45.300
[Transcript missing]

00:23:46.460 --> 00:23:49.060
The way that you specify to the
controller what you care about

00:23:49.060 --> 00:23:53.300
is by including an agent ranking
tool with your job submission.

00:23:53.300 --> 00:23:54.800
And this is a tool that you write.

00:23:54.800 --> 00:23:58.300
It can be a really lightweight
script or an executable.

00:23:58.300 --> 00:24:00.300
And you just include
it along with the job.

00:24:00.360 --> 00:24:03.300
And what the controller will do is make
sure that this ranking tool gets run out

00:24:03.300 --> 00:24:10.300
on all of the agents in your grid before
it schedules any of your actual tasks,

00:24:10.300 --> 00:24:11.300
your computational tasks out there.

00:24:11.300 --> 00:24:15.060
And the agent ranking tool gets
to run and it evaluates the

00:24:15.060 --> 00:24:16.300
conditions that you care about.

00:24:16.360 --> 00:24:22.440
So it could look at syscadol,
it could do benchmarking,

00:24:22.440 --> 00:24:25.300
it could look for
specific hardware devices,

00:24:25.300 --> 00:24:26.300
licenses.

00:24:26.300 --> 00:24:30.300
Whatever you care about and
whatever is important to you,

00:24:30.300 --> 00:24:34.420
your tool can evaluate these
and then generate a score.

00:24:34.700 --> 00:25:43.600
[Transcript missing]

00:25:44.100 --> 00:25:47.510
And then you can use more than
one agent ranking tool and include

00:25:47.510 --> 00:25:49.320
them with your job submission.

00:25:49.320 --> 00:25:51.330
And then what we'll do is we'll
just take all those scores and

00:25:51.330 --> 00:25:55.400
we'll multiply them together and
normalize them so that basically,

00:25:55.400 --> 00:26:00.410
I mean,
if any of your arts return a zero score,

00:26:00.410 --> 00:26:04.700
then that agent's not going to be used,
but otherwise we're going to

00:26:04.700 --> 00:26:04.700
multiply it together and do
the prioritization that way.

00:26:06.010 --> 00:26:09.160
Kind of a dry description,
so I have a picture here

00:26:09.160 --> 00:26:10.820
to show you how this works.

00:26:10.840 --> 00:26:13.210
So you start out,
the client has the job and

00:26:13.210 --> 00:26:14.920
the agent ranking tool.

00:26:14.990 --> 00:26:17.500
The agent ranking tool
is that nifty-looking,

00:26:17.500 --> 00:26:19.120
spinning magnifying glass.

00:26:19.190 --> 00:26:21.900
I'm not quite sure what that is,
but it looks pretty cool.

00:26:21.900 --> 00:26:26.770
So it gets sent off to the controller,
and the controller monitors and looks

00:26:26.780 --> 00:26:29.900
for the agents that are available,
and once it's found them,

00:26:29.900 --> 00:26:32.880
it sends the agent
ranking out to them first.

00:26:32.900 --> 00:26:34.700
So the art is out at the
agents and it's running,

00:26:34.750 --> 00:26:35.900
and it generates a score.

00:26:35.900 --> 00:26:38.890
And so in this case,
it's returned a non-zero score

00:26:38.890 --> 00:26:41.900
for the first two computers,
but not the last one.

00:26:41.900 --> 00:26:44.880
Apparently this art
doesn't really like IMAX.

00:26:44.900 --> 00:26:45.900
I don't know.

00:26:45.900 --> 00:26:49.330
But so once the controller has retrieved
these results and it knows which scores

00:26:49.330 --> 00:26:52.900
have come back from which agents,
it can then send the tasks out.

00:26:52.900 --> 00:26:55.530
And so in this case,
the tasks only go out to the ones

00:26:55.530 --> 00:26:58.890
that have been shown as acceptable
by the agent ranking tool.

00:26:58.900 --> 00:27:01.900
And then finally,
once the agents are done,

00:27:01.900 --> 00:27:02.900
the results go back to the controller.

00:27:02.900 --> 00:27:04.890
And then the client can
retrieve those results.

00:27:04.900 --> 00:27:07.900
So that's the basic scoreboard workflow.

00:27:07.900 --> 00:27:13.040
It's pretty handy to be able to use
this to limit where your job runs onto

00:27:13.040 --> 00:27:15.900
a very specific subset of the grid.

00:27:16.600 --> 00:27:19.720
The third feature that I want to
talk about today that we've added

00:27:19.720 --> 00:27:21.330
for developers is task feedback.

00:27:21.340 --> 00:27:24.340
And the issue here is that the
scheduler doesn't know everything

00:27:24.490 --> 00:27:26.200
about what's going on on the agents.

00:27:26.200 --> 00:27:28.260
I mean, it knows whether the
agent's there or not,

00:27:28.260 --> 00:27:30.500
but it doesn't really know
about the environment,

00:27:30.630 --> 00:27:34.500
and it doesn't know about how the
task is running in that environment.

00:27:34.500 --> 00:27:37.400
So sometimes the task can detect
itself a condition that makes that

00:27:37.400 --> 00:27:40.500
particular agent that it's running
on at that moment unsuitable.

00:27:40.500 --> 00:27:43.500
For instance, maybe the disk fills up.

00:27:43.500 --> 00:27:45.850
You're doing some sort of transcoding,
and then you realize, "Hey,

00:27:45.900 --> 00:27:48.870
I don't have enough space to
actually finish writing out this

00:27:48.960 --> 00:27:50.500
file." That's not going to work.

00:27:50.500 --> 00:27:54.500
And so, right now,
your task could just fail,

00:27:54.620 --> 00:27:57.110
and then your job would fail,
and then the user would

00:27:57.210 --> 00:27:59.910
see the job had failed,
and that wouldn't be very

00:27:59.910 --> 00:28:01.500
exciting or make anyone happy.

00:28:01.500 --> 00:28:06.460
So what you really want to have happen
there is to have the task restart.

00:28:06.460 --> 00:28:08.890
But what's going to happen here
is that if we just told the

00:28:08.980 --> 00:28:12.160
controller to restart the task,
it would say, "Oh, well,

00:28:12.160 --> 00:28:14.500
that computer that was just
running the task is available now,

00:28:14.500 --> 00:28:17.500
I'll just send the task
right back to that same guy."

00:28:17.500 --> 00:28:19.880
And that's not what you want,
because the disk is

00:28:19.940 --> 00:28:20.500
still full over there.

00:28:20.500 --> 00:28:23.500
So you want to make
sure that you can say,

00:28:23.500 --> 00:28:26.490
"Well, let's restart this task,
but don't do it here,

00:28:26.490 --> 00:28:31.080
please." And so now you can provide this
information back to the controller from

00:28:31.280 --> 00:28:35.760
your task about the current situation
on the agent and give the scheduler more

00:28:35.760 --> 00:28:39.500
information about what you want it to do
with your task to make better decisions

00:28:39.500 --> 00:28:41.500
about where to send it in the future.

00:28:41.500 --> 00:28:43.500
So how this works is that agents can
send the task back to the controller,

00:28:43.500 --> 00:28:43.500
and then the controller can
send it back to the controller.

00:28:43.500 --> 00:28:46.500
So what this works is that agents can,
to their standard out,

00:28:46.500 --> 00:28:49.500
send -- in addition to any
logging information or output

00:28:49.500 --> 00:28:53.220
that you're sending there,
they can enclose some data in a property

00:28:53.220 --> 00:28:56.500
list inside an xgrid XML element.

00:28:56.500 --> 00:28:59.500
And the content of this
element is a property list.

00:28:59.500 --> 00:29:03.010
It says, "Hey,
what's going on on this agent?" It tells

00:29:03.010 --> 00:29:05.480
the controller what it needs to know.

00:29:05.510 --> 00:29:08.360
And so there's a few
messages you can send here.

00:29:08.520 --> 00:29:12.500
And so the first one sort of gets
back to that example I gave you,

00:29:12.500 --> 00:29:15.500
which is that you could say this
agent is unsuitable for this task.

00:29:15.500 --> 00:29:18.170
The task has determined that
something's wrong with this

00:29:18.170 --> 00:29:21.030
agent as far as it's concerned,
and it just doesn't ever want

00:29:21.030 --> 00:29:22.500
to run on that agent again.

00:29:22.500 --> 00:29:26.330
And then if you know that all of the
tasks in your job have very similar

00:29:26.330 --> 00:29:29.490
characteristics and they're going to
have the same opinion about that agent,

00:29:29.500 --> 00:29:31.880
you can say, "Well,
just don't run any more tasks

00:29:31.880 --> 00:29:35.770
from this job on this agent."
Or if that's not the issue,

00:29:35.770 --> 00:29:41.500
maybe you just detected a transient
error condition in your task.

00:29:41.500 --> 00:29:43.730
And so you could just say,
"Just retry it," and then the

00:29:43.730 --> 00:29:45.500
controller will have the opportunity
to retry it wherever it wants,

00:29:45.500 --> 00:29:48.360
and it may want to retry
it on that same agent.

00:29:48.500 --> 00:29:52.060
You could also say,
"Retry job," which basically throws

00:29:52.060 --> 00:29:55.500
out all of the results of all of the
tasks that have completed so far,

00:29:55.500 --> 00:29:58.840
and then rewinds the job back
to the beginning and resubmits

00:29:58.860 --> 00:30:02.500
all of the tasks out again,
and they start working again.

00:30:02.500 --> 00:30:06.770
Now,
if your tasks keep telling the controller

00:30:06.790 --> 00:30:13.010
to retry the tasks or retrying the jobs,
eventually the controller will say, "Hey,

00:30:13.080 --> 00:30:15.500
I've retried too many times.

00:30:15.500 --> 00:30:18.500
We're just going to give up."
So that's a configurable value.

00:30:18.500 --> 00:30:21.500
You can say how many retries
are acceptable to you.

00:30:21.500 --> 00:30:23.500
And then finally,
you can just fail the job.

00:30:23.500 --> 00:30:25.480
And this is already the behavior,
but we've made it explicit

00:30:25.520 --> 00:30:28.330
where if the task just says,
"You know what?

00:30:28.330 --> 00:30:29.490
Things are messed up.

00:30:29.490 --> 00:30:31.580
I was trying to connect
to this file server,

00:30:31.630 --> 00:30:33.480
and apparently it's not even available.

00:30:33.500 --> 00:30:36.650
Let's just fail it so we can let the
user know as soon as possible that

00:30:36.650 --> 00:30:42.190
something is really wrong that they
need to address out of band from Xgrid.

00:30:42.480 --> 00:30:46.200
So, task feedback and scoreboard are
pretty similar and in fact you

00:30:46.280 --> 00:30:50.970
could get most of the features of
scoreboard by using task feedback.

00:30:51.020 --> 00:30:53.160
Basically your task would go
out there and start running,

00:30:53.160 --> 00:30:57.430
it would use syscadl or do its benchmark,
whatever it needed to do and determine,

00:30:57.440 --> 00:31:00.860
hey, this computer is unsuitable,
never run any of the

00:31:00.860 --> 00:31:02.350
job tasks here again.

00:31:02.510 --> 00:31:06.100
But that's not the only thing you
can use it for and in fact you

00:31:06.100 --> 00:31:10.390
can actually use these together
and I have an example here of why.

00:31:10.400 --> 00:31:14.910
So, it might be that memory integrity
is really important to you,

00:31:14.990 --> 00:31:18.270
like critical to you that
just no bits get flipped ever.

00:31:18.410 --> 00:31:23.400
And so you've already bought
some Xservs that have ECC memory,

00:31:23.750 --> 00:31:25.400
but not all of your Xservs have it.

00:31:25.400 --> 00:31:30.340
And so you want to use scoreboard
to say only run my tasks on the

00:31:30.340 --> 00:31:33.220
computers that have ECC memory.

00:31:33.220 --> 00:31:38.400
And so you'd have an art that just
looks at that system profile value

00:31:38.400 --> 00:31:38.400
and determines what kind of memory
there is and then returns it.

00:31:38.400 --> 00:31:38.990
So, for example, if you have a computer
that has ECC memory,

00:31:38.990 --> 00:31:39.450
you can run it on the
computer that has ECC memory,

00:31:39.450 --> 00:31:40.400
but you don't have to run the task
on the computer that has ECC memory.

00:31:40.400 --> 00:31:42.400
So, you can run the task on the
computer that has ECC memory.

00:31:42.400 --> 00:31:43.120
And so you can use scoreboard
and see what kind of memory there

00:31:43.120 --> 00:31:43.920
is and then returns either 1,
yes, it's ECC memory or 0, no,

00:31:43.930 --> 00:31:44.390
don't run the task here.

00:31:44.400 --> 00:31:46.700
But once the tasks do
go out to those agents,

00:31:46.700 --> 00:31:50.570
the tasks may also have their own sort
of checksumming or error correcting

00:31:50.570 --> 00:31:54.640
or maybe they just run the calculation
five times because you just absolutely

00:31:54.640 --> 00:31:58.330
have to be sure that cosmic rays
did not give you the wrong answer.

00:31:58.400 --> 00:32:03.530
And so what you're going to do here
is that you're going to do it a bunch

00:32:03.530 --> 00:32:06.400
of times and compare the results.

00:32:06.400 --> 00:32:08.950
And if you determine that, well,
the results aren't the

00:32:09.050 --> 00:32:12.130
same after all these runs,
maybe this agent isn't really

00:32:12.320 --> 00:32:14.400
as reliable as we were hoping.

00:32:14.400 --> 00:32:17.110
Maybe this ECC memory,
there's something more to

00:32:17.110 --> 00:32:20.400
it than just ECC memory and
something's going wrong here.

00:32:20.400 --> 00:32:25.400
So let's just not use this agent
anymore for this job just to be safe.

00:32:25.400 --> 00:32:30.410
And so this would be a way that you
can use these two features together to

00:32:30.410 --> 00:32:35.150
really control where your tasks get sent
to initially and then also where they

00:32:35.150 --> 00:32:35.400
remain and where they get scheduled.

00:32:35.400 --> 00:32:35.690
And so this would be a way that you
can use these two features together to

00:32:35.690 --> 00:32:36.030
really control where your tasks get sent
to initially and then also where they

00:32:36.040 --> 00:32:36.390
remain and where they get scheduled.

00:32:36.510 --> 00:32:38.360
at in the future.

00:32:38.700 --> 00:32:42.450
So, at this point I would like to
invite Steve Simon up on the stage.

00:32:42.500 --> 00:32:46.700
He's going to show you a
demo of Scoreboard in action.

00:32:46.710 --> 00:32:49.190
And so we're going to be
using this rack down here.

00:32:49.270 --> 00:32:52.480
I realize not all of you can see
what's going on with this rack,

00:32:52.480 --> 00:32:56.060
so we have set up a video camera
that will be showing on the

00:32:56.060 --> 00:33:01.340
screen what exactly you have,
what we have going on on this rack,

00:33:01.340 --> 00:33:06.410
and you'll be able to see which
computers are being used when.

00:33:07.000 --> 00:33:12.870
Okay, so for the demo,
the first thing that I would like to

00:33:12.880 --> 00:33:21.840
show you is all we've done is added
one line to the job specification.

00:33:21.840 --> 00:33:27.990
We get the ART data and
insert it into the job.

00:33:28.000 --> 00:33:29.000
Very simple.

00:33:29.000 --> 00:33:33.840
And then there's one other step,
which is later on when

00:33:33.840 --> 00:33:37.950
we set the conditions,
we just insert a key that says

00:33:38.020 --> 00:33:40.400
we want them to be exactly equal.

00:33:41.220 --> 00:33:47.370
And if we take a look at what
an art controller looks like,

00:33:47.370 --> 00:33:52.000
this is a very simple one.

00:33:52.460 --> 00:33:54.900
In the rack of XSERVs here,
we have three types.

00:33:54.900 --> 00:33:57.530
We have red, green, and blue.

00:33:57.590 --> 00:34:04.460
And each of them will return a
score based on this program here.

00:34:04.520 --> 00:34:07.400
So if it's red, it will return 1.

00:34:07.400 --> 00:34:10.240
Greens are 2, and blue is 3.

00:34:10.320 --> 00:34:14.770
And if it failed to return a score,
it would give us a 0,

00:34:14.770 --> 00:34:18.060
and then nothing would run on that one.

00:34:27.700 --> 00:34:33.330
Xgrid admin,
you can see we have a grid here.

00:34:34.300 --> 00:34:36.320
And I have GridColor.

00:34:36.340 --> 00:34:42.960
GridColor is a small application
that's going to run our jobs.

00:34:42.960 --> 00:34:47.420
So first I'm going to pick
all the Xserves with the blue

00:34:47.740 --> 00:34:50.000
profile and submit a job.

00:34:51.390 --> 00:34:55.810
And you can see over here that the,
in fact, the blue Xs are running

00:34:55.810 --> 00:34:58.210
and the others are not.

00:35:01.630 --> 00:35:06.440
And then you can also
fire off a green job.

00:35:06.470 --> 00:35:10.870
And now the green ones are lighting up.

00:35:11.510 --> 00:35:16.340
And then you can also
fire off a green job.

00:35:16.340 --> 00:35:18.660
And now the green ones are lighting up.

00:35:26.600 --> 00:35:31.440
And then you can also
fire off a green job.

00:35:31.440 --> 00:35:35.720
And now the green ones are lighting up.

00:35:44.340 --> 00:35:45.800
Thank you, Steve.

00:35:45.800 --> 00:35:47.000
So that's Scoreboard.

00:35:47.070 --> 00:35:48.740
We're really excited about it.

00:35:48.840 --> 00:35:51.540
It's based on your feedback.

00:35:51.540 --> 00:35:54.100
Like I said,
we didn't really think you wanted

00:35:54.100 --> 00:35:57.900
to care where your stuff ran,
but if you want to run all

00:35:57.970 --> 00:36:01.800
your stuff on red Xservs,
be my guest.

00:36:01.870 --> 00:36:06.200
So the last section of this talk
is to discuss the new features

00:36:06.200 --> 00:36:10.400
that we've added for making your
life easier to deploy Xgrid.

00:36:10.460 --> 00:36:13.220
And so what we've done is

00:36:13.740 --> 00:36:16.570
Well, first,
let's say what other administrative

00:36:16.570 --> 00:36:20.380
tools already exist for xGrid that are
already in Tiger and continue in Leopard.

00:36:20.380 --> 00:36:22.570
And so first of all,
there's the sharing preferences.

00:36:22.580 --> 00:36:26.220
And this is where you configure
the agent on Leopard systems,

00:36:26.220 --> 00:36:29.200
on non-server Leopard systems,
and also Tiger systems.

00:36:29.200 --> 00:36:30.820
There's a little check box, xGrid.

00:36:30.820 --> 00:36:32.350
There's a Configure button.

00:36:32.370 --> 00:36:35.500
You can use it to set up xGrid.

00:36:35.500 --> 00:36:38.230
There's also server admin,
and we still have this,

00:36:38.230 --> 00:36:41.580
although the UI has changed
a little bit for Leopard.

00:36:41.580 --> 00:36:46.140
This is used to configure both the agent
and the controller on Leopard server.

00:36:46.140 --> 00:36:47.960
You can turn it on and off,
set what kind of

00:36:47.960 --> 00:36:52.090
authentication you care about,
and a couple of settings.

00:36:52.540 --> 00:36:56.280
And then we have Xgrid Admin,
which Steve used briefly there.

00:36:56.390 --> 00:36:59.600
And this lets you monitor,
once you've deployed your grid,

00:36:59.600 --> 00:37:01.950
this lets you monitor the
actual state of your grid,

00:37:02.100 --> 00:37:05.350
look at the job queues,
arrange agents into grids,

00:37:05.390 --> 00:37:10.310
and see their status and see if they're
offline or if there's some problem.

00:37:10.600 --> 00:37:15.480
So what we've done now is added a
new simplified server admin setup for

00:37:15.480 --> 00:37:18.600
Xgrid to just make this easier for you.

00:37:18.600 --> 00:37:25.190
So there's fewer steps to
deploy Xgrid on your machines.

00:37:25.740 --> 00:37:30.630
So basically what this gives you the
choice of setting a couple of behaviors.

00:37:30.700 --> 00:37:34.800
You can either say you want a
particular machine to host the grid or

00:37:34.800 --> 00:37:36.860
you want it to participate in a grid.

00:37:36.860 --> 00:37:39.110
And then we also give you
the option of turning Xgrid

00:37:39.210 --> 00:37:40.700
off using the same mechanism.

00:37:40.700 --> 00:37:45.700
So the simplified server admin setup does
require existing network infrastructure.

00:37:45.700 --> 00:37:46.700
We don't set that up for you.

00:37:46.700 --> 00:37:49.020
You're going to need DNS,
you're going to need open

00:37:49.080 --> 00:37:52.780
directory because we're going to
be using Kerberos authentication,

00:37:52.780 --> 00:37:54.700
so we need open directory or
some other directory service.

00:37:54.700 --> 00:38:00.850
So you can set up a server admin setup,
and you can use server configuration

00:38:00.850 --> 00:38:02.980
assistance to set up OD.

00:38:03.050 --> 00:38:07.260
So you can actually go up
to the menu in server admin,

00:38:07.260 --> 00:38:12.090
choose service configuration assistant,
and choose,

00:38:12.510 --> 00:38:17.400
To set up OD,
check the open directory box and

00:38:17.400 --> 00:38:21.230
then you check the Xgrid box and

00:38:21.670 --> 00:38:23.180
It'll set up OD for you.

00:38:23.180 --> 00:38:25.680
You just make, say,
Open Directory Master and click Continue,

00:38:25.680 --> 00:38:27.480
and it'll set that up for you,
and then it'll run you

00:38:27.480 --> 00:38:28.480
through the Xgrid setup.

00:38:28.500 --> 00:38:30.720
And so at this point,
as long as you have DNS set

00:38:30.800 --> 00:38:34.660
up somewhere on your network,
you can get your box hosting and grid

00:38:34.660 --> 00:38:38.380
and running in Open Directory Master with
just a few clicks using the system.

00:38:38.450 --> 00:38:42.900
The one more thing that the simplified
server admin setup does is it sets

00:38:42.900 --> 00:38:44.790
up a shared file system for you.

00:38:45.150 --> 00:38:48.690
And so let me digress for a moment
here to explain what this is all about.

00:38:48.770 --> 00:38:51.990
So what we're doing here is
we're sort of adding a new data

00:38:51.990 --> 00:38:53.900
staging mechanism for Xgrid.

00:38:53.980 --> 00:38:56.700
As I said before,
you can include your job executables,

00:38:56.700 --> 00:39:01.900
you can include input data with Xgrid,
with your job submissions,

00:39:02.050 --> 00:39:05.490
and they'll get moved out across
the network to the agents.

00:39:05.600 --> 00:39:08.450
And this is very convenient,
but it's not the most

00:39:08.450 --> 00:39:09.990
efficient mechanism.

00:39:10.080 --> 00:39:13.300
And so there can be a lot of memory
overhead for the controller to do this.

00:39:13.300 --> 00:39:16.400
It's parsing XML that contains this data.

00:39:16.400 --> 00:39:18.400
And it's going to have a lot of data.

00:39:18.400 --> 00:39:21.290
It's going to have to copy
this data to all of the agents.

00:39:21.350 --> 00:39:24.200
And it's actually going to have to
copy it to the agents before the

00:39:24.220 --> 00:39:26.100
agents even begin running the task.

00:39:26.100 --> 00:39:28.500
So if this is a large file,
a one gigabyte file,

00:39:28.500 --> 00:39:30.340
you're going to have to wait
until the entire thing gets

00:39:30.340 --> 00:39:33.470
there before the task starts,
even if the task maybe just wanted

00:39:33.520 --> 00:39:37.400
a little piece of that large file or
maybe just wanted to start reading at

00:39:37.400 --> 00:39:39.500
the beginning before the end arrived.

00:39:39.500 --> 00:39:42.100
So rather than trying to
solve that with an Xgrid,

00:39:42.100 --> 00:39:45.700
we want to acknowledge that other
people have solved this problem before,

00:39:45.700 --> 00:39:48.040
and they've created network file systems.

00:39:48.100 --> 00:39:52.900
And so what we're doing is giving you
an area where you can put your job data.

00:39:52.900 --> 00:39:55.240
You just have to put it there
and then refer to it at that

00:39:55.250 --> 00:39:56.900
path in your job submission.

00:39:56.900 --> 00:40:01.200
And we're going to make sure that all
the agents that you've configured to

00:40:01.210 --> 00:40:05.540
connect to your controller using the
simplified setup and that are bound

00:40:05.540 --> 00:40:10.510
to this directory domain will get the
mount records and will be able to access

00:40:10.530 --> 00:40:14.190
these shared file system in exactly
the same place across all the computers.

00:40:14.200 --> 00:40:16.460
And so now you can put
your large data there,

00:40:16.460 --> 00:40:21.580
and when it's time, for the tasks to run,
they just get to grab and stream

00:40:21.580 --> 00:40:24.990
back the data that they care
about from the file server.

00:40:25.170 --> 00:40:28.600
"The time for the tests to run,
they just get to grab and stream

00:40:29.090 --> 00:40:32.300
back the data that they care
about from the file server."

00:40:39.200 --> 00:40:41.560
So, what does it look like?

00:40:41.660 --> 00:40:46.740
First of all, when you begin to do the
service configuration assistant,

00:40:46.740 --> 00:40:49.860
you're given an explanation
of what the prerequisites are.

00:40:49.860 --> 00:40:52.030
This is the DNS, the open directory.

00:40:52.210 --> 00:40:54.600
And you're just told
what's going to happen.

00:40:54.600 --> 00:40:56.960
And when you click continue,
it goes out and checks to make sure

00:40:56.960 --> 00:40:58.760
that all those prereqs have been met.

00:40:58.810 --> 00:41:02.140
And then you're given the option to
choose what exactly it is you want to do.

00:41:02.140 --> 00:41:03.020
Do you want to host a grid?

00:41:03.020 --> 00:41:04.360
Do you want to join a grid?

00:41:04.360 --> 00:41:05.600
What do you want to do?

00:41:05.600 --> 00:41:07.070
So, in this case,
we're going to host a grid.

00:41:07.150 --> 00:41:10.270
And then we just need to enter
our directory administrator

00:41:10.270 --> 00:41:11.580
username and password.

00:41:11.610 --> 00:41:15.620
And we're going to use this credential
to create the export and the mount

00:41:15.620 --> 00:41:18.710
record in the directory so that
everyone can get the shared file system.

00:41:20.500 --> 00:41:23.290
Once you've entered that,
that's basically it.

00:41:23.290 --> 00:41:26.500
Now we're giving you an option to
confirm all the settings you've chosen.

00:41:26.500 --> 00:41:27.500
There weren't a lot to choose.

00:41:27.500 --> 00:41:30.300
And as soon as you click continue here,
we're going to actually

00:41:30.300 --> 00:41:31.500
go out and do the work.

00:41:31.500 --> 00:41:33.500
And so what work do we do?

00:41:33.500 --> 00:41:36.750
Well, we enable the controller,
which is like checking the box

00:41:36.750 --> 00:41:38.500
in the old server admin UI.

00:41:38.500 --> 00:41:41.960
We're also going to enable the agent,
and we're automatically going to point

00:41:41.960 --> 00:41:45.500
the agent at that same controller that
we just configured on that computer.

00:41:45.500 --> 00:41:46.500
You get both.

00:41:46.500 --> 00:41:50.130
You get a full operating Xgrid
controller and agent connected to each

00:41:50.170 --> 00:41:54.500
other using Kerberos authentication
just by doing this one step.

00:41:54.530 --> 00:41:57.630
As I said,
Kerberos authentication is enabled so

00:41:57.630 --> 00:42:02.500
you can feel secure that your data is
private and confidential and secure.

00:42:02.500 --> 00:42:05.500
We're also going to create the
export record on the controller,

00:42:05.500 --> 00:42:09.500
and we're going to put the mount record
in the directory so all of your agents

00:42:09.500 --> 00:42:12.500
that are bound to that directory will
automatically mount that file system.

00:42:12.500 --> 00:42:14.500
We're sharing it over NFS.

00:42:14.500 --> 00:42:17.500
We're going to put the file
system in the Leopard seed,

00:42:17.500 --> 00:42:20.750
and we'll be evaluating what we're
going to do with that as we move

00:42:20.750 --> 00:42:22.500
on with the Leopard schedule.

00:42:22.500 --> 00:42:24.500
So the file system is created.

00:42:24.500 --> 00:42:28.420
There's a folder created at /Xgrid,
and then the file system is

00:42:28.420 --> 00:42:33.390
mounted on all of the agents and
the controller at network Xgrid.

00:42:34.100 --> 00:42:36.480
Joining a grid is very similar to this.

00:42:36.480 --> 00:42:38.860
You just choose the second behavior,
join a grid.

00:42:38.860 --> 00:42:40.680
In this case,
you're going to have to choose which

00:42:40.740 --> 00:42:42.120
controller to use on your network.

00:42:42.220 --> 00:42:46.610
You can either browse Bonjour discovered
controllers or you could,

00:42:46.610 --> 00:42:49.580
if you have a controller
on another subnet,

00:42:49.640 --> 00:42:54.000
you could just enter the host name
or the IP address right there.

00:42:54.000 --> 00:42:56.900
Although,
you actually do need a host name

00:42:56.900 --> 00:42:58.800
because Kerberos is going to use
that host name to make sure that

00:42:58.800 --> 00:42:58.800
it's connecting to the right server.

00:42:59.100 --> 00:43:03.160
So, then if that server that you're
configuring hasn't already been

00:43:03.160 --> 00:43:06.290
Kerberized and doesn't already
have Kerberos principles,

00:43:06.290 --> 00:43:07.810
we're going to do that for you.

00:43:07.820 --> 00:43:09.780
And so we need the directory
administrator password again.

00:43:09.780 --> 00:43:14.440
But if that server has already been
set up with Kerberos principles,

00:43:14.690 --> 00:43:16.980
then we're going to skip this step.

00:43:16.980 --> 00:43:19.220
And then finally we give
you the option to confirm.

00:43:19.220 --> 00:43:20.680
And again,
there wasn't really many choices to make,

00:43:20.680 --> 00:43:24.280
so you're just confirming that you
chose the right controller here.

00:43:24.280 --> 00:43:27.280
And finally you hit continue
and it does the work for you.

00:43:27.280 --> 00:43:28.740
The agent is enabled.

00:43:28.740 --> 00:43:31.300
It's pointed at the controller you chose.

00:43:31.300 --> 00:43:33.640
Kerberos authentication
for the agent is enabled.

00:43:33.640 --> 00:43:37.000
And we made sure that the
principle was created if necessary.

00:43:37.000 --> 00:43:40.200
So that's about it for this talk.

00:43:40.200 --> 00:43:41.560
Those are the new features that we have.

00:43:41.560 --> 00:43:46.070
So in summary,
we've added XRED scoreboard.

00:43:46.080 --> 00:43:49.330
That's the big new feature I think
you guys are going to be excited

00:43:49.360 --> 00:43:53.280
about to let you choose which of your
machines to use for a particular job.

00:43:53.280 --> 00:43:58.280
We've added task feedback to evaluate
the conditions as they change there.

00:43:58.380 --> 00:44:01.330
We have XRED Anywhere,
so it's easier to write your software

00:44:01.820 --> 00:44:05.780
for people to use so that they don't need
to set up XRED to get started with it.

00:44:05.780 --> 00:44:08.610
And then once they're ready to scale
beyond single computer performance,

00:44:08.620 --> 00:44:11.930
they just need to set up XRED and
your application is going to

00:44:11.930 --> 00:44:13.940
work and act exactly the same.

00:44:13.940 --> 00:44:17.130
And then we have this new service
configuration assistant to make

00:44:17.130 --> 00:44:19.400
it even easier to deploy XRED.

00:44:19.400 --> 00:44:21.640
So all that together,
that's what we have for

00:44:21.670 --> 00:44:23.000
you in the Leopard Seed.

00:44:23.000 --> 00:44:26.380
You can look forward to some
additional improvements.

00:44:26.380 --> 00:44:27.260
And I hope you guys enjoy.