WEBVTT

00:00:12.210 --> 00:00:14.090
It's nice to see you all here.

00:00:14.100 --> 00:00:18.580
This is session 310,
A Practical Approach to Software Testing.

00:00:18.620 --> 00:00:21.660
I'm Doug Simons from Redstone
Software in Colorado.

00:00:21.660 --> 00:00:27.570
And in case you're not interested
in software testing or you're

00:00:27.960 --> 00:00:31.730
only interested in impractical
approaches to software testing,

00:00:31.730 --> 00:00:34.490
this slide is your cue
to head for the exit.

00:00:36.500 --> 00:00:38.460
Otherwise,
I suppose you're here for a reason,

00:00:38.520 --> 00:00:42.520
and I just wanted to give you a quick
overview of what this talk is about.

00:00:42.960 --> 00:00:45.470
First of all,
we're looking at maximizing the

00:00:45.550 --> 00:00:47.860
value with your testing resources.

00:00:47.900 --> 00:00:51.250
It's a chronic problem that
most testing organizations,

00:00:51.250 --> 00:00:54.280
the testing department
in most organizations,

00:00:54.280 --> 00:00:59.120
tends to always be a little understaffed,
underfunded, and overworked.

00:00:59.120 --> 00:01:04.080
So if you find yourself in that position,
don't feel alone.

00:01:05.900 --> 00:01:08.510
So it's really important to get
the maximum value out of the

00:01:08.510 --> 00:01:12.210
testing resources that you've got,
and we'll try and give you some

00:01:12.210 --> 00:01:13.980
practical approaches to that here.

00:01:14.220 --> 00:01:18.160
We'll mostly be looking at testing
software from the user's perspective.

00:01:18.220 --> 00:01:21.540
This is not a session
about unit testing of code,

00:01:21.830 --> 00:01:26.540
which is also very important,
but we're looking at the experience

00:01:26.570 --> 00:01:28.650
that you're going to be delivering
to your customers when you

00:01:28.690 --> 00:01:31.070
deliver your product to them.

00:01:31.570 --> 00:01:35.640
I'll try and focus a lot on the
what and how of software testing.

00:01:35.650 --> 00:01:38.600
We'll have a little bit of theory
and some slides along the way,

00:01:38.600 --> 00:01:43.970
but I also want to give you some real
concrete practical examples here.

00:01:45.410 --> 00:01:48.600
So what I hope you'll learn
is some of the benefits of

00:01:48.600 --> 00:01:51.080
automation and software testing.

00:01:51.080 --> 00:01:54.720
Automation can be a huge help to
you in carrying out your software

00:01:54.720 --> 00:01:58.980
testing since you have limited
resources and limited time.

00:01:59.070 --> 00:02:01.080
It can be a real boon to you.

00:02:01.080 --> 00:02:05.350
And we'll talk about how to get started
because sometimes it can be hard

00:02:05.350 --> 00:02:07.980
for people to know how to get going.

00:02:07.980 --> 00:02:09.510
They know they want to
test their software,

00:02:09.510 --> 00:02:12.750
they know they would like maybe
to automate some of that testing,

00:02:12.750 --> 00:02:17.180
but it can be a little daunting
sometimes to know how to begin.

00:02:17.180 --> 00:02:19.700
And I'll try and give you a
couple of ideas about where you

00:02:19.810 --> 00:02:21.730
might focus your testing efforts.

00:02:21.790 --> 00:02:26.080
And along the way I'll introduce
six principles of practical testing.

00:02:26.120 --> 00:02:30.640
This is some key take-home
points that I wanted to give you.

00:02:30.700 --> 00:02:35.140
And throughout the demos you'll
see some specific techniques of

00:02:35.140 --> 00:02:37.310
how to carry out your testing.

00:02:39.330 --> 00:02:41.750
So I thought I should
introduce myself first,

00:02:41.840 --> 00:02:43.790
let you know who I am.

00:02:43.950 --> 00:02:45.620
I'm a developer.

00:02:45.620 --> 00:02:48.540
I don't have a PhD in software testing.

00:02:48.540 --> 00:02:53.020
I'm not a testing expert,
but I've been developing

00:02:53.020 --> 00:02:55.400
software for a long time.

00:02:55.740 --> 00:02:58.660
And in particular,
for the last four years,

00:02:58.810 --> 00:03:00.930
I've been developing a
product called Eggplant,

00:03:00.990 --> 00:03:05.470
which is a software testing tool that
hopefully some of you have heard of.

00:03:05.640 --> 00:03:11.900
And in the process of developing Eggplant
and in working with our customers,

00:03:11.900 --> 00:03:15.640
of course,
most of whom are software testers,

00:03:15.840 --> 00:03:17.880
I've learned a fair amount
about software testing.

00:03:17.880 --> 00:03:20.670
So I wanted to share
some of that with you.

00:03:22.030 --> 00:03:23.800
Now, who are you?

00:03:23.800 --> 00:03:26.370
I'm kind of guessing that
most of you are maybe not

00:03:26.370 --> 00:03:28.400
software testing experts either.

00:03:28.400 --> 00:03:33.250
You're probably software developers,
people who are doing some testing maybe

00:03:33.250 --> 00:03:37.730
or looking to do some more testing,
and hoping to give you a little bit

00:03:37.730 --> 00:03:42.650
of a boost here in your software
testing efforts as you move towards

00:03:42.650 --> 00:03:45.600
becoming a practical tester here.

00:03:48.160 --> 00:03:51.420
One of the first questions that
people are likely to ask when they

00:03:51.420 --> 00:03:55.790
get into doing some testing is,
"Well, what should I test?"

00:03:56.040 --> 00:03:58.640
If you explore the
testing literature at all,

00:03:58.640 --> 00:04:01.470
you're likely to come across
a lot of different terms.

00:04:01.470 --> 00:04:04.740
Functional testing, regression testing,
performance, compatibility, use cases,

00:04:04.750 --> 00:04:05.620
integration load.

00:04:05.620 --> 00:04:08.710
There's a lot of stuff out there,
and it can be a little

00:04:08.890 --> 00:04:10.430
bewildering at first.

00:04:11.240 --> 00:04:13.090
You may also be looking at your software.

00:04:13.090 --> 00:04:16.430
You probably have some complex software
you want to test and wondering whether

00:04:16.510 --> 00:04:20.000
you should be testing the inputs or the
outputs or the menus or the windows.

00:04:20.000 --> 00:04:23.520
The whole thing may be a
little overwhelming at first.

00:04:23.620 --> 00:04:28.520
I just wanted to give you a brief
word of advice in the immortal

00:04:28.630 --> 00:04:33.720
words of Douglas Adams from
A Hitchhiker's Guide to the Galaxy,

00:04:33.720 --> 00:04:35.110
don't panic.

00:04:35.160 --> 00:04:40.460
You may be feeling like there's
no way that you're going to

00:04:40.460 --> 00:04:41.220
be able to test the software.

00:04:41.220 --> 00:04:43.280
You may be feeling like there's
no way that you're going to

00:04:43.330 --> 00:04:44.350
be able to test everything.

00:04:44.350 --> 00:04:45.760
Relax, it's okay because you can't.

00:04:45.890 --> 00:04:48.630
There's no way you're going to test
everything that you'd like to test.

00:04:48.660 --> 00:04:52.930
You've got limited resources, as I said,
and even if your organization

00:04:52.930 --> 00:04:56.080
has plenty of staff and
plenty of budget for testing,

00:04:56.080 --> 00:04:59.720
there's always one resource that
you're going to be short on,

00:04:59.720 --> 00:05:00.950
and that's time.

00:05:00.960 --> 00:05:04.170
The system that you're testing
is likely to be a moving target.

00:05:04.280 --> 00:05:08.390
Your developers keep developing things,
and there's always more to be tested.

00:05:08.400 --> 00:05:11.220
Taking advantage of the technology.

00:05:11.220 --> 00:05:14.140
Taking advantage of some of
these approaches and using

00:05:14.140 --> 00:05:17.750
automation is probably something
that can really help you out.

00:05:19.030 --> 00:05:22.500
So the thing to do, of course,
since you can't test everything,

00:05:22.500 --> 00:05:26.510
is you want to focus your attention
on the areas that are going to

00:05:26.510 --> 00:05:28.490
give you the greatest return.

00:05:29.560 --> 00:05:31.680
So where do you start?

00:05:31.740 --> 00:05:34.790
Well, my advice is to start somewhere.

00:05:34.800 --> 00:05:39.460
It's always good to get going at
least and see if you can get going.

00:05:39.460 --> 00:05:41.860
If you're not sure where to start,
I thought I'd toss out a couple of

00:05:41.860 --> 00:05:43.730
possibilities that occurred to me.

00:05:44.040 --> 00:05:48.120
One is to validate bug fixes.

00:05:48.400 --> 00:05:52.070
Most of us, as we're developing software,
we have bugs now and then.

00:05:52.130 --> 00:05:54.900
And so if you have a bug,
this is a great opportunity

00:05:54.900 --> 00:05:55.880
to do some testing.

00:05:55.880 --> 00:06:01.900
You can create a test
first to verify that,

00:06:01.920 --> 00:06:04.920
in fact, you do have a bug,
that something isn't working correctly.

00:06:04.920 --> 00:06:09.340
And then once you've fixed the bug,
you can create a test to validate

00:06:09.440 --> 00:06:11.960
that that bug no longer exists.

00:06:12.100 --> 00:06:15.470
So that can be a great place to
start and can help you to build

00:06:15.610 --> 00:06:17.880
up a library of things as you go.

00:06:17.960 --> 00:06:20.930
Clearly, one of the places that you want
to focus your attention is on the

00:06:20.930 --> 00:06:23.000
central features of your application.

00:06:23.140 --> 00:06:26.480
What is it about your application
that makes it special?

00:06:26.500 --> 00:06:29.180
What are your users using it for?

00:06:29.210 --> 00:06:34.610
And you want to focus
on those areas the most.

00:06:34.840 --> 00:06:37.740
Use cases is something
that many organizations,

00:06:37.800 --> 00:06:40.700
certainly those who have more
of a formal development process,

00:06:40.820 --> 00:06:41.140
use.

00:06:41.140 --> 00:06:44.480
If you're creating use cases as
part of your requirements process,

00:06:44.480 --> 00:06:48.930
which describe how your customers
will be using the product,

00:06:48.930 --> 00:06:52.380
that's a great thing to
use as a basis of a test.

00:06:53.850 --> 00:06:56.480
Risk is another area that
you might take a look.

00:06:56.560 --> 00:07:01.630
If there's some area of your software
that's a little shaky and you've

00:07:01.630 --> 00:07:04.660
had problems there in the past,
that may be a good part of your

00:07:04.660 --> 00:07:08.360
application to focus some of your testing
resources on to make sure that you don't

00:07:08.460 --> 00:07:10.540
have more problems going down the line.

00:07:10.540 --> 00:07:15.170
Another category of risks would
be risks to your customers.

00:07:15.180 --> 00:07:19.110
Hopefully you're not doing anything
that's going to physically damage them,

00:07:19.240 --> 00:07:23.440
but you may have areas that could
lose data and that sort of thing,

00:07:23.440 --> 00:07:23.780
which we'll discuss in a little bit.

00:07:23.800 --> 00:07:23.800
Risk is another area that
you might take a look at.

00:07:23.800 --> 00:07:23.800
If there's some area of your software
that's a little shaky and you've

00:07:23.800 --> 00:07:23.800
had problems there in the past,
that's a good part of your application

00:07:23.800 --> 00:07:23.800
to focus some of your testing resources
on to make sure that you don't have

00:07:23.800 --> 00:07:23.860
more problems going down the line.

00:07:23.900 --> 00:07:23.900
Another category of risks is risk is
an area that you might take a look at.

00:07:23.900 --> 00:07:23.900
If there's some area of your software
that's a little shaky and you've

00:07:23.900 --> 00:07:23.900
had problems there in the past,
that's a good part of your application

00:07:23.900 --> 00:07:23.900
to focus some of your testing resources
on to make sure that you don't have

00:07:23.900 --> 00:07:23.900
more problems going down the line.

00:07:23.900 --> 00:07:23.900
Another category of risks is risk is
an area that you might take a look at.

00:07:23.900 --> 00:07:23.900
If there's some area of your software
that's a little shaky and you've

00:07:23.900 --> 00:07:23.940
had problems going down the line.

00:07:48.460 --> 00:07:52.170
I'd also like to suggest that you
consider automating from the start.

00:07:52.200 --> 00:07:54.730
Now,
a lot of people look at automation and,

00:07:54.730 --> 00:07:57.430
you know, they're busy testing their
software and they think,

00:07:57.480 --> 00:08:01.950
I don't have time to figure out
automation and to get this stuff to work.

00:08:01.950 --> 00:08:06.020
And, you know, I can understand that,
but it's kind of interesting.

00:08:06.020 --> 00:08:08.440
A friend of mine put it this way.

00:08:08.440 --> 00:08:11.020
It's like,
suppose you're bicycling along,

00:08:11.240 --> 00:08:14.640
you're heading for your destination,
you're pedaling away,

00:08:14.640 --> 00:08:17.560
and a friend of yours
comes by in a car and says,

00:08:17.560 --> 00:08:18.380
hey, I'm heading for your destination.

00:08:18.400 --> 00:08:18.900
I'm heading that way.

00:08:18.900 --> 00:08:19.770
Would you like a ride?

00:08:19.770 --> 00:08:22.050
And you say, oh, man, are you kidding?

00:08:22.050 --> 00:08:23.680
I'm pedaling as fast as I can.

00:08:23.680 --> 00:08:26.730
And, you know, a lot of us feel that
way a lot of the time.

00:08:26.730 --> 00:08:28.530
We're pedaling as fast as we can.

00:08:28.530 --> 00:08:31.170
We don't have time to get
off and get in the car.

00:08:31.170 --> 00:08:36.480
But sometimes it's a good idea to stop
and consider whether what you're doing,

00:08:36.480 --> 00:08:39.600
you know,
whether you're doing the same thing

00:08:39.600 --> 00:08:44.350
over and over again and expecting
some sort of different results.

00:08:44.350 --> 00:08:50.530
It might be a good idea to take the time
and get off the bike and get in the car.

00:08:50.530 --> 00:08:54.390
Now, I recognize that automation
takes some effort.

00:08:54.390 --> 00:08:58.250
It's not something that is
without some costs there.

00:08:58.250 --> 00:09:01.600
But on the whole,
the payback can be tremendous.

00:09:01.600 --> 00:09:04.110
So something that you
should take a look at.

00:09:04.140 --> 00:09:07.360
So let's take a quick look at what
are some of the benefits of automation

00:09:07.360 --> 00:09:09.060
that you might want to consider.

00:09:11.520 --> 00:09:16.060
For one thing,
automation provides constant feedback.

00:09:16.110 --> 00:09:21.460
If you've developed some tests-- let's
say you're testing your application.

00:09:21.700 --> 00:09:24.160
You've created a test for
some particular feature.

00:09:24.160 --> 00:09:25.940
You say, great, that feature works.

00:09:26.000 --> 00:09:29.380
And so a little later,
you create some other tests,

00:09:29.380 --> 00:09:31.590
or you do some testing.

00:09:31.650 --> 00:09:33.640
But your application keeps evolving.

00:09:33.640 --> 00:09:36.870
And as it changes,
sometimes things that you've

00:09:36.960 --> 00:09:39.020
previously tested stop working.

00:09:39.110 --> 00:09:43.160
And so if you can repeat the
same tests that you did before,

00:09:43.460 --> 00:09:44.700
you're that much better off.

00:09:44.700 --> 00:09:47.160
Now, when you're doing manual testing,
you lots of times don't have

00:09:47.260 --> 00:09:49.650
time to go back and test the
things that you've already tested.

00:09:49.930 --> 00:09:52.300
With automation,
you've got the computer there

00:09:52.300 --> 00:09:53.420
to do that work for you.

00:09:53.420 --> 00:09:57.000
And so it's easy to repeat those
tests and make sure that you're

00:09:57.000 --> 00:10:01.040
not introducing new bugs in
areas that you've already tested.

00:10:01.080 --> 00:10:03.220
Automation is great for
doing repetitive tasks,

00:10:03.220 --> 00:10:05.540
things that a person is
not going to want to do,

00:10:05.540 --> 00:10:07.400
doing the same thing over and over again.

00:10:07.470 --> 00:10:09.570
And of course,
automation gives you consistent

00:10:09.570 --> 00:10:13.600
and reliable results which
can be really valuable.

00:10:13.720 --> 00:10:16.180
You can run regression
tests after every build,

00:10:16.290 --> 00:10:19.130
so each time you have a
new build of your software,

00:10:19.130 --> 00:10:23.550
you can rerun those tests again to
make sure that things aren't breaking.

00:10:23.780 --> 00:10:27.400
You can perform tests
repeatedly with different data.

00:10:27.470 --> 00:10:30.370
Testing with large quantities
of data can be really valuable

00:10:30.370 --> 00:10:34.680
depending on what your application is,
and automation is a great

00:10:34.680 --> 00:10:37.000
way to go about doing that.

00:10:37.370 --> 00:10:39.910
Automation can also be helpful
for reproducing some of

00:10:40.000 --> 00:10:44.130
those intermittent failures,
the things that show up every once in a

00:10:44.130 --> 00:10:47.920
while and that are really hard to nail
down when you're testing things manually.

00:10:47.920 --> 00:10:52.280
Every time you go to try that part,
it works fine, and then one of your

00:10:52.580 --> 00:10:54.160
customers runs into it later.

00:10:54.160 --> 00:10:58.060
Those can be the most frustrating
things to find and track down.

00:11:00.500 --> 00:11:02.980
Well, God eliminates human error up here.

00:11:02.980 --> 00:11:05.640
Of course,
automation doesn't eliminate human error.

00:11:05.640 --> 00:11:07.600
We're all human and we
keep making mistakes,

00:11:07.790 --> 00:11:10.280
but if you can turn some of
the task over to the computer,

00:11:10.280 --> 00:11:12.660
then at least hopefully it's not
going to make those same mistakes.

00:11:12.690 --> 00:11:17.400
And the bottom line is that automation
is going to increase your efficiency

00:11:17.400 --> 00:11:19.380
to save you time and effort.

00:11:21.590 --> 00:11:25.410
So I said I was going to introduce
some principles of practical testing.

00:11:25.510 --> 00:11:29.830
The first one I want to throw out to
you here is to test the user experience,

00:11:29.950 --> 00:11:31.340
not the code.

00:11:31.390 --> 00:11:33.460
What do I mean by this?

00:11:33.800 --> 00:11:36.640
As developers,
we oftentimes kind of lose sight

00:11:36.640 --> 00:11:38.790
of the application for the code.

00:11:38.790 --> 00:11:41.610
We get so involved with the
code that we're focused on,

00:11:41.640 --> 00:11:44.630
and as we're developing
it and working with it,

00:11:44.740 --> 00:11:46.790
perhaps you're doing unit
testing of your code,

00:11:46.790 --> 00:11:47.580
which is great.

00:11:47.600 --> 00:11:52.370
But keep in mind that no matter how much
you test individual modules of your code,

00:11:52.370 --> 00:11:55.190
that doesn't guarantee
that the application,

00:11:55.190 --> 00:11:57.850
the thing that your end
user is working with,

00:11:57.850 --> 00:11:59.060
is going to work.

00:11:59.460 --> 00:12:02.060
So it's really important
to test the final product.

00:12:02.060 --> 00:12:05.840
And so I'm going to
emphasize this point again,

00:12:05.840 --> 00:12:09.140
testing from the user's point of view,
because that's really where

00:12:09.140 --> 00:12:10.630
the value is to your customers.

00:12:12.840 --> 00:12:15.600
So before we get into the demos,
I want to tell you just a little

00:12:15.620 --> 00:12:18.380
bit about Eggplant so you'll
understand what you're seeing.

00:12:18.380 --> 00:12:21.420
Eggplant is a two-computer system.

00:12:21.420 --> 00:12:22.800
It runs on a Mac.

00:12:22.800 --> 00:12:26.100
It's installed here on a Mac OS X system.

00:12:26.100 --> 00:12:27.710
I've got kind of an old picture there.

00:12:27.730 --> 00:12:32.390
And it connects across the
network to a computer that's

00:12:32.900 --> 00:12:35.390
running something called VNC.

00:12:35.390 --> 00:12:41.660
Now, VNC is an open source product that
does remote control of another system.

00:12:42.700 --> 00:12:45.350
So some of you probably use this.

00:12:45.350 --> 00:12:49.600
It's great because you can
access your Mac at home when

00:12:49.600 --> 00:12:50.860
you're at work or vice versa.

00:12:50.860 --> 00:12:58.340
The OS X VNC product that runs on OS X is
actually maintained by our company.

00:12:58.340 --> 00:13:01.150
So if any of you are using that,
it's free.

00:13:01.260 --> 00:13:03.490
If you're not using it, go get it.

00:13:03.530 --> 00:13:08.020
It's a great tool to use to
remotely control another computer.

00:13:08.760 --> 00:13:12.680
And what VNC does is serves
up a picture of the screen.

00:13:12.700 --> 00:13:13.900
It's a great tool to use to
remotely control another computer.

00:13:14.360 --> 00:13:14.880
And what VNC does is serves up
a picture of the screen to your

00:13:14.880 --> 00:13:18.440
local computer and allows you to
control the keyboard and the mouse.

00:13:18.530 --> 00:13:22.750
Now, what Eggplant adds to this is
the ability to create scripts to

00:13:22.750 --> 00:13:24.740
automate things on the remote system.

00:13:27.960 --> 00:13:31.790
And Eggplant is kind of unique in
the way it goes about doing scripting

00:13:32.120 --> 00:13:34.800
because its scripts are visual.

00:13:34.800 --> 00:13:38.210
Eggplant, all it knows about the remote
system is that it has a lot

00:13:38.210 --> 00:13:39.670
of pixels there on the screen.

00:13:39.670 --> 00:13:43.050
So in order to interact with that,
it's looking for things

00:13:43.120 --> 00:13:46.790
visually on the screen,
controlling the keyboard and mouse,

00:13:46.790 --> 00:13:50.270
and this, as it turns out,
gives us a tremendous amount of

00:13:50.270 --> 00:13:54.720
flexibility to allow us to drive any
software written in any language.

00:13:54.760 --> 00:13:57.880
It doesn't matter if it's
Carbon or Cocoa or Java or PC.

00:13:57.900 --> 00:14:00.520
It doesn't matter if it's PHP or what.

00:14:00.520 --> 00:14:03.280
And it can be running on any OS.

00:14:04.490 --> 00:14:08.090
So going back here to our principles,
again, just a reminder,

00:14:08.210 --> 00:14:11.610
testing the user experience,
not the code.

00:14:11.740 --> 00:14:16.940
And also, our next principle here
is to start simple.

00:14:17.680 --> 00:14:22.210
This is a principle borrowed from
agile programming approaches.

00:14:22.440 --> 00:14:25.420
Begin with the simplest
test and build up as you go.

00:14:25.600 --> 00:14:27.520
And let's see how we're going to do that.

00:14:27.610 --> 00:14:29.190
So if we could switch
to the demo machine.

00:14:29.220 --> 00:14:33.680
Demo?

00:14:42.500 --> 00:14:44.800
So the first thing we're going
to do in Eggplant is open a

00:14:44.800 --> 00:14:47.180
connection to another machine.

00:14:47.200 --> 00:14:49.060
Actually connecting to
the laptop over here,

00:14:49.060 --> 00:14:54.470
which is-- I've got a screen scaled
down to a nice small resolution there so

00:14:54.470 --> 00:14:57.590
we can fit it on the demo screen here.

00:14:57.850 --> 00:15:00.650
Eggplant likes a nice big screen.

00:15:00.710 --> 00:15:02.180
Since you're controlling
another computer,

00:15:02.180 --> 00:15:03.960
it's nice to be able to
see the other system.

00:15:04.160 --> 00:15:07.070
So it's a great excuse
to go buy a big monitor.

00:15:07.360 --> 00:15:11.120
But anyway, here we've got another system
that we're controlling.

00:15:11.120 --> 00:15:14.200
You can see I'm moving things
around on the desktop over there.

00:15:14.390 --> 00:15:17.020
And I've got the address
book icon out there,

00:15:17.090 --> 00:15:20.600
because for our demos today,
we're going to be creating some

00:15:20.600 --> 00:15:23.670
tests to test Apple's address book.

00:15:24.320 --> 00:15:26.800
Now the first thing I want to
do for creating these tests

00:15:26.800 --> 00:15:30.370
is create a new suite here.

00:15:30.370 --> 00:15:36.390
And since we're testing the address book,
let's just call this suite Address Book.

00:15:38.240 --> 00:15:43.300
And a suite is just a collection of
scripts and images and various things.

00:15:43.500 --> 00:15:45.290
We're going to go ahead and
create a new script here.

00:15:45.480 --> 00:15:48.220
Now, as I said,
we want to start very simple.

00:15:48.220 --> 00:15:51.150
So what's the simplest thing we
can do to test the address book?

00:15:51.440 --> 00:15:54.400
Well, what we're going to do
is simply launch it.

00:15:54.640 --> 00:15:55.600
OK?

00:15:55.600 --> 00:15:56.440
Make sure that it launches.

00:15:56.540 --> 00:16:01.360
So I'm going to create a script
here called Launch Address Book.

00:16:02.980 --> 00:16:07.240
This is a script editing window and
I can just type a script over here.

00:16:07.890 --> 00:16:13.300
What I'm going to do is go over
here and tell Eggplant what

00:16:13.300 --> 00:16:15.760
I want it to do with the system.

00:16:18.140 --> 00:16:20.930
In dealing with Eggplant,
if you think of it as

00:16:20.980 --> 00:16:25.020
a willing and eager,
but not terribly bright assistant,

00:16:25.020 --> 00:16:26.480
you kind of have the right idea.

00:16:26.490 --> 00:16:29.440
I mean, this is a purple vegetable
we're dealing with here.

00:16:29.440 --> 00:16:33.720
So we can't just tell Eggplant, oh,
go launch the address book.

00:16:33.720 --> 00:16:35.870
It doesn't understand what that means.

00:16:35.950 --> 00:16:38.210
But instead, we have to say things like,
oh, Eggplant,

00:16:38.210 --> 00:16:41.920
would you look on the screen and
see the icon for the address book?

00:16:41.950 --> 00:16:43.210
Please double click on it.

00:16:43.370 --> 00:16:44.840
So that's what we're going to do.

00:16:44.900 --> 00:16:47.240
And so we're going to select this
area of the screen over here,

00:16:47.260 --> 00:16:49.160
kind of point that out
to Eggplant and say,

00:16:49.160 --> 00:16:53.330
that's what the address book looks like,
and I want you to double click on it.

00:16:53.360 --> 00:16:55.120
So I'll select double
click on the toolbar here.

00:16:55.120 --> 00:16:58.690
Now, you can see that we're capturing
a picture of that icon,

00:16:58.740 --> 00:17:02.700
and I need to give that a name in
order to make our script readable.

00:17:02.700 --> 00:17:06.740
So I'm just going to
call that AB icon here.

00:17:09.500 --> 00:17:13.410
Now, when I clicked on Save there,
three things happened.

00:17:13.600 --> 00:17:17.150
The first was that we actually
did capture that image and

00:17:17.150 --> 00:17:19.510
save it over here in our suite.

00:17:20.170 --> 00:17:24.600
We also automatically created a
command in the script that says

00:17:24.600 --> 00:17:26.960
double-click the address book icon.

00:17:26.960 --> 00:17:30.420
And the third thing that happened was
that Eggplant carried out that command.

00:17:30.420 --> 00:17:31.940
It went ahead and executed that command.

00:17:31.940 --> 00:17:34.640
And when it did that,
Eggplant looked on the screen,

00:17:34.640 --> 00:17:38.510
searched wherever it needed to on the
screen to find that address book icon,

00:17:38.510 --> 00:17:41.840
so it could have been anywhere,
and it double-clicked on it.

00:17:41.840 --> 00:17:46.260
This is great because now we're ready
to go on with the next step of our test.

00:17:47.280 --> 00:17:51.630
Oh, but that's all our test was,
was to launch the address book.

00:17:52.350 --> 00:17:55.240
Keep in mind that whenever
you're testing something,

00:17:55.240 --> 00:17:59.670
it's a good idea to verify
that what you're automating

00:17:59.710 --> 00:18:01.210
has actually taken place.

00:18:01.400 --> 00:18:04.660
So we don't want to
end our test quite yet.

00:18:04.730 --> 00:18:08.280
First, we want to make sure that the
address book is actually launched.

00:18:08.280 --> 00:18:10.660
And we're going to do that by
looking for the title bar here.

00:18:10.680 --> 00:18:13.840
We'll just tell Eggplant
we want to wait for that.

00:18:14.000 --> 00:18:18.280
So let's look for the
address book title bar here.

00:18:18.970 --> 00:18:23.630
And the wait for command, in this case,
it's waiting up to eight seconds

00:18:23.630 --> 00:18:27.390
here for the title bar to show up.

00:18:27.450 --> 00:18:29.740
It's a good idea to allow a
little bit of time at certain

00:18:29.830 --> 00:18:33.750
points in your script when things
might take a little bit of time.

00:18:33.910 --> 00:18:37.070
When you're launching an application,
quite often it may take a few seconds

00:18:37.180 --> 00:18:39.220
for it to come up and be initialized.

00:18:39.420 --> 00:18:42.040
Eggplant, if you don't kind of tell
it to hold on a little bit,

00:18:42.040 --> 00:18:44.430
it's going to just charge
right ahead with the next step.

00:18:44.570 --> 00:18:48.620
So these wait for commands
can be really valuable.

00:18:48.820 --> 00:18:51.550
The other thing that I think
we'd like to do here in this

00:18:51.600 --> 00:18:55.100
test is kind of finish things up,
put it back to the state

00:18:55.210 --> 00:18:56.000
that things were in.

00:18:56.000 --> 00:18:58.580
So we'll go ahead and quit
out of address book as well.

00:18:58.590 --> 00:19:02.200
I'll do that by just
typing Command-Q here.

00:19:02.370 --> 00:19:06.170
And so now you can see that
we're back to our initial state,

00:19:06.230 --> 00:19:09.240
which allows us to run our script
here and make sure that it works.

00:19:09.380 --> 00:19:11.140
Just going to run it here,
and you can see that it's launching

00:19:11.140 --> 00:19:13.290
the address book and quitting-- oh,
it didn't take long.

00:19:13.530 --> 00:19:14.120
But there we are.

00:19:14.220 --> 00:19:15.400
Can we switch back to slides, please?

00:19:15.400 --> 00:19:20.820
Slides?

00:19:25.280 --> 00:19:28.640
Starting simple is a really
great way to get going,

00:19:28.720 --> 00:19:30.140
building up tests as you go.

00:19:30.360 --> 00:19:34.630
And we're going to build some more tests
on the address book in just a minute.

00:19:34.990 --> 00:19:38.330
Another point to make here
is to complete the cycle.

00:19:38.520 --> 00:19:40.820
So as you saw,
we started off in a well-known state.

00:19:40.820 --> 00:19:41.760
Now this is important.

00:19:41.760 --> 00:19:45.180
To make your life easier as
you're going about testing,

00:19:45.180 --> 00:19:49.420
it's really helpful if you can start
with your system in a known state.

00:19:49.420 --> 00:19:52.640
If you can have a machine
that's dedicated to testing,

00:19:52.640 --> 00:19:55.980
or if not a machine,
then perhaps at least a separate user

00:19:56.040 --> 00:19:59.830
account that is used for testing,
so that you know that things are

00:19:59.930 --> 00:20:02.160
more or less in a known condition.

00:20:02.160 --> 00:20:04.880
You don't have people tweaking different
parts of the interface and all that.

00:20:04.900 --> 00:20:07.780
It'll make your life a little easier.

00:20:07.780 --> 00:20:10.670
So start in a well-known state,
perform your test,

00:20:11.000 --> 00:20:14.720
verify that your test has actually
done what it's supposed to do,

00:20:14.740 --> 00:20:18.360
and then at the end,
return to the initial condition again.

00:20:18.360 --> 00:20:21.660
This allows you to then repeat
the cycle later if you kind of

00:20:21.660 --> 00:20:23.640
end up back where you started.

00:20:25.700 --> 00:20:27.990
The next principle is
a really valuable one:

00:20:28.080 --> 00:20:29.370
make it modular.

00:20:29.640 --> 00:20:32.700
If you can create some
basic building blocks,

00:20:32.710 --> 00:20:37.600
then you're able to reuse those as you
go on and create more complex scripts.

00:20:37.600 --> 00:20:39.600
Let's take a look at
how we might do that.

00:20:39.600 --> 00:20:43.190
Can we go back to the demo machine,
please?

00:20:50.740 --> 00:20:54.030
For our next test here,
we're going to create a new card.

00:20:54.030 --> 00:20:57.180
Let's just go ahead and do that.

00:20:57.220 --> 00:20:59.200
We're going to create a new script here.

00:20:59.320 --> 00:21:05.160
Call it our new card test.

00:21:05.160 --> 00:21:05.160
How's that?

00:21:06.130 --> 00:21:09.500
In this test, let's see,
the first thing we need to do

00:21:09.500 --> 00:21:11.450
is to launch the address book.

00:21:11.480 --> 00:21:15.130
Well, it happens that we've got a nice
script out there that can do that.

00:21:15.200 --> 00:21:19.100
If I just drag that in here,
it says launch address book,

00:21:19.190 --> 00:21:22.480
and this will actually allow us
to call one script from another.

00:21:22.480 --> 00:21:25.920
Let's bring that script up,
and the only thing is that

00:21:25.920 --> 00:21:30.010
our launch address book script
also quits the address book.

00:21:30.080 --> 00:21:32.040
We don't really want that to happen yet,
so I'm just going to

00:21:32.040 --> 00:21:33.040
change that script now.

00:21:33.040 --> 00:21:35.720
We probably won't want to
use it all by itself again.

00:21:36.000 --> 00:21:42.260
We can verify that this works by just
running our very short script right now.

00:21:42.260 --> 00:21:45.970
Sure enough, Eggplant has launched
the address book for us,

00:21:45.970 --> 00:21:48.490
so now we can go on with
the next step of our test.

00:21:49.990 --> 00:21:54.660
Now the thing that we want to
do next is to create a new card.

00:21:54.760 --> 00:22:02.500
We can do that by typing a command Q,
not a command Q, command N.

00:22:03.480 --> 00:22:05.510
And so that's created a new card.

00:22:05.600 --> 00:22:08.190
It's now waiting for us
to type in the first name.

00:22:08.340 --> 00:22:11.450
So we'll type some text here.

00:22:11.480 --> 00:22:14.850
And eggplant.

00:22:15.530 --> 00:22:19.310
Now the next thing we want to do is
actually tab over to the next field.

00:22:19.350 --> 00:22:26.370
I'm just going to put type text command
directly in here to tab over there.

00:22:26.900 --> 00:22:29.300
Of course,
when I'm typing in a script like this,

00:22:29.300 --> 00:22:31.440
Eggplant doesn't
automatically execute that.

00:22:31.530 --> 00:22:35.000
We have a kind of a handy feature here
called Run Selection that allows us just

00:22:35.000 --> 00:22:37.030
to select part of a script and run that.

00:22:37.160 --> 00:22:39.570
So I'm going to go ahead
and run a selection here to

00:22:39.570 --> 00:22:41.660
just execute that one line.

00:22:41.660 --> 00:22:46.620
And I could go through the
toolbar items to type in our

00:22:46.740 --> 00:22:47.890
text and that sort of thing.

00:22:48.040 --> 00:22:51.980
I think it might be a little simpler to
just copy and paste some of this code.

00:22:52.060 --> 00:22:56.400
So I'm going to do that,
and we'll put in support here.

00:22:56.400 --> 00:23:01.260
And I think we need two
tabs after that one.

00:23:02.140 --> 00:23:06.820
So let's have it do that much
and see where we're getting here.

00:23:07.000 --> 00:23:10.000
So we're now ready to
type in a phone number.

00:23:10.000 --> 00:23:13.510
So we'll put in the phone number.

00:23:16.150 --> 00:23:18.780
And I'll just run that a little bit.

00:23:18.780 --> 00:23:22.470
We're kind of building the script and
executing pieces of it as we go here.

00:23:22.630 --> 00:23:28.190
And the next thing we want to
do is type in an email address.

00:23:29.730 --> 00:23:31.760
We need all these tabs here now.

00:23:31.860 --> 00:23:38.710
Just put in support at Redstone Software.

00:23:40.350 --> 00:23:41.650
And there we go.

00:23:41.830 --> 00:23:45.430
So how much of that do
we still need to run?

00:23:45.440 --> 00:23:47.850
We need to put in our--

00:24:08.950 --> 00:24:08.950
So now we've entered some
information on our card here,

00:24:08.950 --> 00:24:08.950
and the next thing I want
to do is end editing.

00:24:08.950 --> 00:24:08.950
So I'm going to come back
over here and to do that we're

00:24:08.950 --> 00:24:08.950
going to capture another image.

00:24:08.950 --> 00:24:08.950
The edit button down at the
bottom there that's pressed in,

00:24:08.950 --> 00:24:08.950
we need to click on that to end editing.

00:24:08.950 --> 00:24:08.950
So I'll just call that end editing.

00:24:10.270 --> 00:24:12.520
And so there we go.

00:24:12.680 --> 00:24:15.310
We've created a new card.

00:24:16.170 --> 00:24:18.500
As I mentioned,
it's a good idea after doing

00:24:18.580 --> 00:24:23.300
something to verify that in fact
whatever you've done has taken place.

00:24:23.330 --> 00:24:29.950
Why don't we do that by doing
a little search for this card.

00:24:30.090 --> 00:24:34.080
We can do that by putting another
type text command in here to

00:24:34.160 --> 00:24:35.900
look for eggplant support.

00:24:35.900 --> 00:24:40.940
You may notice that the search
field is already selected

00:24:40.940 --> 00:24:44.370
there after ending editing,
so all we have to do is type in

00:24:44.370 --> 00:24:49.150
this name and we'll see that it's
found that card now and we just

00:24:49.150 --> 00:24:51.450
want to verify that it's shown up.

00:24:51.450 --> 00:24:54.500
We're going to look for
the word eggplant support,

00:24:54.500 --> 00:24:56.100
kind of all selected there.

00:24:56.100 --> 00:25:04.800
Once again, we'll tell eggplant just to
wait for that to show up.

00:25:04.800 --> 00:25:04.800
We'll call that eggplant
support selected,

00:25:04.800 --> 00:25:04.800
I guess.

00:25:06.200 --> 00:25:07.380
So here we go.

00:25:07.460 --> 00:25:11.710
Now, the final step that we want
to take is to kind of clean

00:25:11.880 --> 00:25:15.050
things up and quit out of here.

00:25:15.180 --> 00:25:18.440
So why don't we go ahead
and delete this card.

00:25:18.680 --> 00:25:24.720
We can do that by-- I'm just going to
put a comment in here to kind of-- oops.

00:25:26.210 --> 00:25:27.940
Remember where we're at.

00:25:27.990 --> 00:25:33.710
We're going to verify here.

00:25:35.270 --> 00:25:40.760
Now we're going to delete the card again.

00:25:43.940 --> 00:25:45.100
We're going to go ahead
and delete the card.

00:25:45.100 --> 00:25:47.490
Go through the edit menu here.

00:25:47.570 --> 00:25:50.640
Just click on the edit menu.

00:25:50.640 --> 00:25:55.480
And click on delete.

00:26:14.150 --> 00:26:14.150
There we go.

00:26:14.150 --> 00:26:14.150
Our card is deleted and we'll go
ahead and quit out of Address Book.

00:26:14.150 --> 00:26:14.150
It would be nice to do this in a
modular fashion like I was suggesting,

00:26:14.150 --> 00:26:14.150
so why don't we just create a
command called Quit Address Book.

00:26:15.490 --> 00:26:20.020
So that our script is nice and readable,
we haven't actually

00:26:20.140 --> 00:26:25.500
created that script yet,
so we'll go ahead and do that.

00:26:25.500 --> 00:26:29.280
All this one needs to do
is type a command "q".

00:26:32.420 --> 00:26:40.310
We've got our complete script here now.

00:26:40.430 --> 00:26:43.790
Why don't we try running this
one and see how that works out.

00:26:46.420 --> 00:26:49.400
This is kind of a nice point for
you to go and get a cup of coffee

00:26:49.400 --> 00:26:52.980
and sit back and relax while
eggplant does your work for you.

00:26:52.980 --> 00:26:54.420
And there it is.

00:26:54.420 --> 00:26:55.240
It's tested it.

00:26:55.240 --> 00:26:57.820
We know that everything
is working great there.

00:26:57.880 --> 00:27:00.410
So let's go back to the slides from it.

00:27:11.190 --> 00:27:12.860
Adding modularity is really important.

00:27:12.860 --> 00:27:16.530
We're going to see a little bit more
of that in the next demo as well.

00:27:16.870 --> 00:27:19.960
Another principle that's
really valuable in testing,

00:27:19.960 --> 00:27:23.100
particularly in automation, is repeat.

00:27:23.160 --> 00:27:28.720
To take advantage of the capability of
the computer to do things repetitively.

00:27:28.800 --> 00:27:36.190
Some of the benefits of repeat are
working with large quantities of data,

00:27:36.190 --> 00:27:37.800
for example.

00:27:37.800 --> 00:27:41.910
If you can feed your application
a lot of different data,

00:27:41.910 --> 00:27:45.800
this can be really a good way to
stress it out and make sure that

00:27:45.800 --> 00:27:45.800
it can handle all of the data.

00:27:46.800 --> 00:27:49.800
You may also want to
test boundary conditions.

00:27:49.800 --> 00:27:51.760
What do we mean by boundary conditions?

00:27:51.830 --> 00:27:54.440
Well, odd values,
things like putting zeros into a

00:27:54.440 --> 00:27:56.790
field where it's expecting a quantity,
or maybe even a negative number,

00:27:56.790 --> 00:28:00.800
or putting in a name where
it's expecting a number,

00:28:00.800 --> 00:28:04.750
things like that,
to kind of test some of the edges.

00:28:04.820 --> 00:28:08.430
And so you want to test a lot of
different kinds of conditions,

00:28:08.430 --> 00:28:11.650
and being able to iterate over
a lot of different sets of

00:28:11.650 --> 00:28:13.500
data can be really valuable.

00:28:14.250 --> 00:28:17.320
A similar idea is testing with
different combinations of data.

00:28:17.320 --> 00:28:20.840
Maybe you're testing a catalog,
for example, or a clothing catalog,

00:28:20.840 --> 00:28:24.520
and you've got an item that
comes in five different colors

00:28:24.520 --> 00:28:26.520
and five different sizes.

00:28:26.520 --> 00:28:31.080
Well, you can test each of your five
sizes and each of your five colors.

00:28:31.080 --> 00:28:35.110
That's great, but what about the
different combinations?

00:28:35.140 --> 00:28:37.690
So if you can kind of nest
some repeat loops and test all

00:28:37.690 --> 00:28:40.880
of the different combinations,
this can be a really powerful thing

00:28:40.960 --> 00:28:44.130
to do in case there are certain
combinations that lead to issues.

00:28:44.200 --> 00:28:45.040
Cheers.

00:28:46.300 --> 00:28:48.440
Intermittent failures is
kind of an interesting one.

00:28:48.440 --> 00:28:49.880
I mentioned this briefly before.

00:28:49.880 --> 00:28:53.820
This is something that we
actually ran into ourselves.

00:28:53.820 --> 00:28:57.560
Some people ask whether we
use Eggplant to test Eggplant,

00:28:57.560 --> 00:28:58.910
and yeah, we do.

00:28:58.920 --> 00:29:03.740
We have a suite of tests that we
call the Eggplant Squared Test,

00:29:03.810 --> 00:29:06.800
in which Eggplant drives another
machine running Eggplant and driving

00:29:06.800 --> 00:29:09.970
another machine to create scripts and
run those scripts and all of that.

00:29:10.120 --> 00:29:12.790
So it's a nice test that we've got.

00:29:12.820 --> 00:29:17.890
At one point a couple of years ago,
we had a bug, something was happening

00:29:17.960 --> 00:29:21.240
every once in a while,
and we'd go through and try

00:29:21.240 --> 00:29:23.880
and see what was going on,
and it would never fail

00:29:23.880 --> 00:29:24.960
when we were looking for it.

00:29:25.040 --> 00:29:28.880
So we ran our Eggplant
Squared Test overnight.

00:29:28.880 --> 00:29:32.170
It ran about 100 times in
the course of the night,

00:29:32.200 --> 00:29:35.410
and we came back the next morning
to see what the results were and

00:29:35.610 --> 00:29:37.160
found that it had failed twice.

00:29:37.240 --> 00:29:40.780
So this is the kind of thing
that's really hard to track down,

00:29:40.780 --> 00:29:44.300
but by examining the logs in the
cases where it had failed and

00:29:44.300 --> 00:29:48.320
looking through that in detail,
we were able to figure out exactly where

00:29:48.350 --> 00:29:52.690
the problem was and ultimately fix it.

00:29:53.590 --> 00:29:58.060
So let's do another demo here,
if we can go back to the demo machine,

00:29:58.060 --> 00:30:03.610
and take a look at how we
might do some repetition.

00:30:07.240 --> 00:30:11.810
So I have a data file out here,
some valuable data that we want to

00:30:11.820 --> 00:30:17.340
iterate over and create a number of
cards in the address book this time.

00:30:17.510 --> 00:30:21.640
So let's start off by
creating a new test.

00:30:21.720 --> 00:30:25.850
We'll call this the "Many Cards Test."

00:30:27.410 --> 00:30:29.810
And as you can imagine,
the first thing we're going to want

00:30:29.880 --> 00:30:31.490
to do is to launch the address book.

00:30:31.570 --> 00:30:33.180
I'll just drag that script in.

00:30:33.310 --> 00:30:34.680
And at the end,
we're going to want to quit.

00:30:34.750 --> 00:30:38.720
So here I've got the beginning and
end of our script written already.

00:30:38.720 --> 00:30:39.200
That's nice.

00:30:39.200 --> 00:30:43.830
In between,
we're going to want to do some repeating

00:30:43.830 --> 00:30:45.570
with some of this data in here.

00:30:45.680 --> 00:30:47.530
And so I'll put it in a repeat loop.

00:30:47.580 --> 00:30:54.850
But what do we want to do?

00:30:55.070 --> 00:30:55.390
We're going to repeat.

00:30:56.400 --> 00:30:59.360
Let's give a name record here.

00:30:59.360 --> 00:31:02.580
And we're going to set that
to be each line of this file.

00:31:02.580 --> 00:31:05.240
Now,
I don't know where that file is exactly.

00:31:05.240 --> 00:31:07.790
I'm just going to drag that in here.

00:31:10.020 --> 00:31:12.590
Okay, so there it is.

00:31:12.940 --> 00:31:16.330
We're going to repeat with
each line of this file.

00:31:16.510 --> 00:31:21.080
And now we've got something called
record that's being set successively

00:31:21.080 --> 00:31:22.180
to each of the lines of the file.

00:31:22.180 --> 00:31:26.140
Now the lines in the file,
as you can see, have several different

00:31:26.140 --> 00:31:27.060
items of information.

00:31:27.140 --> 00:31:31.260
There's the first name and the last name,
the phone number and the email address.

00:31:31.310 --> 00:31:32.950
They're all separated by tabs.

00:31:32.970 --> 00:31:35.320
So I don't really want to
deal with that as a whole.

00:31:35.320 --> 00:31:36.490
I need to split that up.

00:31:36.570 --> 00:31:40.330
So I want to take and
turn around and put...

00:31:42.400 --> 00:32:04.900
[Transcript missing]

00:32:05.950 --> 00:32:11.550
And so this is a way of very quickly
accessing all the data in the file,

00:32:11.550 --> 00:32:11.620
but...

00:32:11.710 --> 00:32:12.830
What are we going to do with that?

00:32:13.000 --> 00:32:16.140
Well, we want to create an address
card for each of these.

00:32:16.290 --> 00:32:20.000
So we just happen to have a
script out here that does a pretty

00:32:20.000 --> 00:32:21.840
good job of creating a new card.

00:32:21.840 --> 00:32:25.550
Let's see if we can borrow
some of our previous work.

00:32:25.770 --> 00:32:31.770
I'm just going to copy that
part of it there and create

00:32:31.770 --> 00:32:31.770
another new script called

00:32:34.010 --> 00:32:37.000
"Create new card, let's say.

00:32:37.090 --> 00:32:38.330
Okay.

00:32:38.360 --> 00:32:41.870
And we'll just put all of that in there.

00:32:46.420 --> 00:32:53.840
To call that script,
let me just drag this in over here,

00:32:53.970 --> 00:32:55.800
create new card,
and we're going to need to

00:32:55.800 --> 00:32:56.860
pass it some information.

00:32:56.930 --> 00:32:59.690
So we've got these four items
of information that we want to

00:32:59.690 --> 00:33:01.200
pass over to that other script.

00:33:01.260 --> 00:33:03.950
So we'll do it like that.

00:33:04.830 --> 00:33:09.960
Over in this script we need to
be able to receive those items,

00:33:10.030 --> 00:33:11.630
so I'll put them over there as well.

00:33:11.680 --> 00:33:15.000
Now, what we've got of course is some
code that we copied over from

00:33:15.000 --> 00:33:18.640
another script that's going to
type the word eggplant in here,

00:33:18.640 --> 00:33:20.300
which is not the name that we want.

00:33:20.530 --> 00:33:24.790
So we'll just replace those
with some of these other

00:33:25.010 --> 00:33:30.830
Terms here, first name, the last name,
and we'll just put phone in here,

00:33:30.860 --> 00:33:35.490
no email, phone, and then email.

00:33:41.000 --> 00:33:45.750
Okay, so there we've got that and yeah,
that looks like it

00:33:45.750 --> 00:33:48.120
ought to be pretty good.

00:33:48.120 --> 00:33:50.550
So why don't we try,
let's see where we're

00:33:50.620 --> 00:33:52.010
at now with our script.

00:33:52.010 --> 00:33:55.970
I don't think we need
to look at this anymore.

00:33:57.400 --> 00:33:59.780
Maybe we could just run that script,
all except for actually

00:34:00.160 --> 00:34:00.880
quitting things here.

00:34:00.880 --> 00:34:03.410
We'll just run the first part
of it and see how that works.

00:34:04.920 --> 00:34:09.220
So it's launched the address book and you
can see that it's kind of going through,

00:34:09.220 --> 00:34:12.380
entering the information
here in the script.

00:34:12.480 --> 00:34:17.310
If we wanted to, here in our run window,
we could pause the script and kind

00:34:17.400 --> 00:34:21.630
of step through one at a time,
take a look at some of our variables.

00:34:21.630 --> 00:34:25.900
We want to put the phone here and
see what number it's working with.

00:34:25.930 --> 00:34:28.940
So we've got some ability
to interact there.

00:34:28.940 --> 00:34:32.660
Let's just go ahead and continue,
let it finish entering

00:34:32.660 --> 00:34:33.910
this information in there.

00:34:39.560 --> 00:34:40.060
That's nice.

00:34:40.140 --> 00:34:43.440
Now we've got a bunch of cards out
there with a lot of data in it.

00:34:43.490 --> 00:34:45.510
The next step that we want to do,
of course,

00:34:45.510 --> 00:34:48.110
is to verify that it's all there,
and we're also going to want

00:34:48.190 --> 00:34:49.530
to kind of clean things up.

00:34:49.620 --> 00:34:53.650
I'm a great believer in being lazy here,
so instead of typing this all again,

00:34:53.710 --> 00:34:55.570
I'm just going to copy and paste.

00:34:55.580 --> 00:35:00.960
Now we've got another loop to go
through the same set of data again.

00:35:00.960 --> 00:35:04.750
This time,
instead of creating a new card,

00:35:04.750 --> 00:35:06.360
we will verify.

00:35:09.500 --> 00:35:12.770
and delete the card.

00:35:20.800 --> 00:35:21.140
Okay, so we need another little
script here then to do that,

00:35:21.140 --> 00:35:21.330
making things nicely modular.

00:35:21.330 --> 00:35:24.800
So I'll just copy that name,
create a new script by that name.

00:35:24.800 --> 00:35:29.200
Now this script is going to want to
do what's more or less the last part

00:35:29.200 --> 00:35:33.660
of our original script out there,
the verifying and the deleting, right?

00:35:33.660 --> 00:35:37.630
So if I just kind of
copy that code over here.

00:35:40.800 --> 00:35:48.670
Once again, we can get some data names
here for our parameters.

00:35:48.670 --> 00:35:48.670
So,

00:35:55.610 --> 00:35:57.940
Rather than typing "eggplant
support," of course,

00:35:58.030 --> 00:36:01.420
we're going to want to type
the first name and last name

00:36:01.810 --> 00:36:04.520
that came from the data file.

00:36:05.060 --> 00:36:07.950
This will be typing in the
search field at this point.

00:36:08.390 --> 00:36:12.670
There's a little quirk that I've
discovered in trying this out,

00:36:12.760 --> 00:36:15.780
that if you don't clear
out the search field first,

00:36:15.870 --> 00:36:18.120
you end up putting a lot
of names in there together.

00:36:18.120 --> 00:36:22.820
So it's a good idea to do
something to clear that out.

00:36:22.900 --> 00:36:25.050
We'll do a type command A here first.

00:36:25.080 --> 00:36:29.480
That will select the entire contents
of the search field before we

00:36:29.480 --> 00:36:33.840
start typing so that we're not
just adding names to each other.

00:36:35.090 --> 00:36:38.200
So, and there we go.

00:36:38.450 --> 00:36:41.700
Now, we've also got a line that we
copied here from the other script

00:36:41.810 --> 00:36:44.440
that says we're going to look
for eggplant support selected.

00:36:44.440 --> 00:36:47.030
Well, that's not one of our data items,
and certainly it's not

00:36:47.030 --> 00:36:52.040
all of our data items,
so we can't do that quite the same

00:36:52.110 --> 00:36:56.900
way in our more general script here.

00:36:59.170 --> 00:37:04.340
Look for-- oh,
I left something out of the other script.

00:37:04.460 --> 00:37:05.510
It's going too fast.

00:37:05.620 --> 00:37:08.610
After we deleted the menu item,
you know what we're going to do?

00:37:08.930 --> 00:37:12.920
We're going to build
this on the fly here.

00:37:17.100 --> 00:37:18.100
Here's what we're going to do.

00:37:18.100 --> 00:37:26.540
We forgot to verify that, in fact,
when we had deleted our card,

00:37:26.540 --> 00:37:27.830
that it was gone.

00:37:28.050 --> 00:37:31.620
So I just want to add
some of that in here.

00:37:32.700 --> 00:37:38.200
[Transcript missing]

00:37:40.200 --> 00:37:42.080
There's something that shows up.

00:37:42.290 --> 00:37:45.820
It's called no cards selected.

00:37:45.970 --> 00:37:49.690
We haven't actually
captured this image yet.

00:37:52.600 --> 00:37:55.200
We'll do that in a moment.

00:37:55.200 --> 00:37:57.660
If that image is found,
then we know that something

00:37:57.660 --> 00:38:01.050
went wrong because,
in fact, we have not found the thing

00:38:01.050 --> 00:38:02.830
that we were looking for.

00:38:02.950 --> 00:38:07.090
And so in that case,
we're going to want to log some

00:38:07.120 --> 00:38:12.500
kind of a warning here to indicate
that there's been a problem.

00:38:18.500 --> 00:38:28.800
[Transcript missing]

00:38:29.850 --> 00:38:37.730
On the other hand, if it was found,
then we can go ahead and delete it here.

00:38:42.900 --> 00:38:50.840
So the first thing we need to
do is capture that image that

00:38:50.840 --> 00:38:52.080
we kind of missed out on before.

00:38:52.080 --> 00:38:56.080
Let's go into live mode over here.

00:38:58.920 --> 00:39:01.560
This is what's going to show up
in the case where we're searching

00:39:01.560 --> 00:39:03.400
for something that's not found.

00:39:03.530 --> 00:39:06.540
Let me just capture an image of that.

00:39:09.000 --> 00:39:11.000
I'm going to capture mode here.

00:39:11.160 --> 00:39:15.970
I'm just going to capture an
image called "No Matching Cards."

00:39:18.360 --> 00:39:19.620
So that's the image that
we'll be looking at.

00:39:19.620 --> 00:39:20.900
Oh, no, no card selected.

00:39:20.900 --> 00:39:22.320
Well, it's called no matching cards.

00:39:29.670 --> 00:39:31.140
Sorry, I got a little confused there.

00:39:31.180 --> 00:39:32.680
But there we are.

00:39:32.760 --> 00:39:36.180
And once we're done,
we want to also verify that when

00:39:36.210 --> 00:39:41.900
we've clicked the delete menu item,
that in fact, that image is there.

00:39:41.900 --> 00:39:45.100
So we're going to put in our wait
for-- give it eight seconds again,

00:39:45.100 --> 00:39:48.150
I guess-- for the no matching cards here.

00:39:49.700 --> 00:39:53.960
That was the little step that
got left out of our other script.

00:39:54.100 --> 00:39:59.510
So let's take a look now and
see if this is going to work.

00:40:02.460 --> 00:40:04.280
We've got all of our cards in here still.

00:40:04.280 --> 00:40:06.400
We've got a little repeat loop.

00:40:06.400 --> 00:40:08.940
Let's just kind of run that as
a selection and see if I made

00:40:08.940 --> 00:40:10.460
any other mistakes there.

00:40:10.460 --> 00:40:14.760
Looks like something's
not quite working right.

00:40:14.760 --> 00:40:18.710
Verify and delete the card.

00:40:23.000 --> 00:40:29.070
Okay, we'll just step through
that real briefly.

00:40:31.600 --> 00:40:40.700
[Transcript missing]

00:40:55.700 --> 00:41:08.700
[Transcript missing]

00:41:10.130 --> 00:41:11.200
That would make a difference.

00:41:11.220 --> 00:41:14.340
We were calling an empty script
because it had never been saved.

00:41:14.340 --> 00:41:16.820
So if we run this again,
maybe we'll get a little

00:41:16.820 --> 00:41:18.220
better results there.

00:41:19.720 --> 00:41:22.090
So you can see it's typing
in Harry Potter here,

00:41:22.090 --> 00:41:25.600
searching for him,
deleting him out of the address book,

00:41:25.610 --> 00:41:26.490
and so forth.

00:41:26.600 --> 00:41:29.550
Going through, verifying that each of
those cards is there,

00:41:29.840 --> 00:41:33.030
and getting rid of those cards.

00:41:36.530 --> 00:41:38.140
And once that's done,
we were just running a

00:41:38.140 --> 00:41:39.300
little selection there again.

00:41:39.300 --> 00:41:43.560
Let's go ahead and let it finish by
quitting out of the address book.

00:41:43.560 --> 00:41:49.610
And let's see if we can run our
script in its entirety one more time.

00:42:01.050 --> 00:42:05.580
Once again,
being able to repeat through a quantity

00:42:05.580 --> 00:42:08.910
of data is really a valuable thing,
something that you're not

00:42:08.910 --> 00:42:11.410
going to want to sit and type
all these names in by hand.

00:42:11.440 --> 00:42:15.470
Eggplant is actually working through
the user interface just like a

00:42:15.470 --> 00:42:17.320
user would put these cards in.

00:42:17.320 --> 00:42:20.080
In some situations,
you may have cases where you could

00:42:20.420 --> 00:42:23.920
load a lot of data into a database
directly using some back-end tool,

00:42:23.920 --> 00:42:26.780
and that can be a valuable thing to do
if you need to have a lot of data in

00:42:26.780 --> 00:42:28.480
there that you want to test against.

00:42:29.540 --> 00:42:34.370
But there may be situations where your
application is going to fail if somebody

00:42:34.380 --> 00:42:38.420
sits and enters hundreds of data items
directly through the user interface.

00:42:38.420 --> 00:42:41.140
So you may want to do
both kinds of testing,

00:42:41.140 --> 00:42:46.230
and that's one of the values that
we've got here with automation.

00:42:46.360 --> 00:42:49.510
So let's switch back to slides, please.

00:42:55.930 --> 00:42:59.040
So once again,
leveraging repeat is a great thing to do.

00:42:59.040 --> 00:43:02.930
Once you've done some automation,
this is one of the things that's

00:43:02.930 --> 00:43:05.000
going to give you a great benefit.

00:43:05.060 --> 00:43:06.920
About this point, you may be thinking,
OK, well, great.

00:43:06.920 --> 00:43:07.690
We've got started.

00:43:07.700 --> 00:43:09.000
We've got some tests going.

00:43:09.000 --> 00:43:11.050
I've got a little bit of momentum here.

00:43:11.150 --> 00:43:12.480
And what should I test next?

00:43:12.710 --> 00:43:14.800
Well, here's a few little ideas,
at least.

00:43:14.850 --> 00:43:16.310
One is to kind of grow as you go.

00:43:16.320 --> 00:43:17.240
So what does that mean?

00:43:17.240 --> 00:43:19.780
Well,
as you're creating your application,

00:43:19.780 --> 00:43:22.420
you're going to be continuing
to add new features.

00:43:22.420 --> 00:43:26.450
So it makes sense to add the tests
for those features as you go.

00:43:26.700 --> 00:43:30.930
And this is a great way to build up a
larger library of automated test scripts

00:43:31.040 --> 00:43:34.390
that you can run after each build.

00:43:34.840 --> 00:43:37.400
Another thing, of course,
is to focus on high-value

00:43:37.400 --> 00:43:40.070
areas of your application,
because you really want to

00:43:40.070 --> 00:43:42.560
maximize the value that you're
getting out of your testing here.

00:43:42.560 --> 00:43:45.500
So you want to focus on the
things that are important to your

00:43:45.500 --> 00:43:48.720
customers and also take a look
at those high-risk areas again,

00:43:48.720 --> 00:43:50.370
things like bug regressions.

00:43:50.400 --> 00:43:52.430
What do we mean by bug
regressions exactly?

00:43:52.500 --> 00:43:56.710
Well, when you have a bug and you fix it,
that's great,

00:43:56.780 --> 00:44:01.870
but something that happens sometimes
is that as you go on and add other

00:44:01.960 --> 00:44:06.510
features in your application,
it occasionally happens that those

00:44:06.510 --> 00:44:10.020
same bugs occur again or something
in the same area of the program.

00:44:10.020 --> 00:44:13.300
So it's a good idea to have tests in
place that will guard against your

00:44:13.440 --> 00:44:15.450
application regressing in that way.

00:44:15.460 --> 00:44:19.460
Crashes, obviously,
or other areas of reapplication

00:44:19.460 --> 00:44:23.900
where there's potential for
data loss for your customers.

00:44:23.900 --> 00:44:27.420
And once again, the boundary conditions,
testing a variety of

00:44:27.420 --> 00:44:28.860
different data there.

00:44:30.630 --> 00:44:33.730
You also may want to focus on the
perceived value to your users.

00:44:33.840 --> 00:44:36.210
So what are your users looking
for in your application?

00:44:36.290 --> 00:44:37.990
They need the usability there.

00:44:38.000 --> 00:44:40.880
They want to be able to use
your application easily.

00:44:40.880 --> 00:44:44.190
There are certain features
of your application that are

00:44:44.190 --> 00:44:47.740
really important to them,
and this is really critical.

00:44:47.740 --> 00:44:50.880
Another area, lots of times,
is performance.

00:44:51.020 --> 00:44:53.360
You care about how well
your application performs.

00:44:53.420 --> 00:44:55.440
If it's getting really sluggish,
your users aren't going

00:44:55.470 --> 00:44:56.360
to be really happy.

00:44:56.360 --> 00:44:58.760
Let's just talk about
that a little bit more,

00:44:58.760 --> 00:45:01.720
because performance testing gets
kind of a lot of attention sometimes.

00:45:01.720 --> 00:45:03.600
As I see it,
there's a couple of different

00:45:03.670 --> 00:45:05.080
ways to look at performance.

00:45:05.080 --> 00:45:09.900
One is that you can look at it in
terms of the code and your algorithms.

00:45:09.900 --> 00:45:12.530
As developers,
we love to get in there and tweak

00:45:12.530 --> 00:45:15.770
things and make them run faster,
and that can be great.

00:45:15.780 --> 00:45:19.010
Sometimes this provides an
enormous benefit to your users.

00:45:19.010 --> 00:45:22.140
But at other times,
you may speed something up by ten times,

00:45:22.140 --> 00:45:26.270
but if it only accounts for one percent
of what's going on in your application,

00:45:26.360 --> 00:45:29.550
the actual benefit to your
users may not be all that great.

00:45:29.580 --> 00:45:32.900
So it's important to look
at also the user experience.

00:45:33.070 --> 00:45:35.860
How does the performance
appear to the user?

00:45:35.860 --> 00:45:39.380
Because their satisfaction
is really based on that.

00:45:39.440 --> 00:45:43.650
So for example, let's say you've got some
kind of a search that you're

00:45:43.650 --> 00:45:45.550
doing in your application.

00:45:45.820 --> 00:45:48.430
So you might have a little
script that clicks on a search

00:45:48.620 --> 00:45:50.550
button and then waits for,
in this case,

00:45:50.550 --> 00:45:54.000
up to 30 seconds for whatever
the next thing is to show up

00:45:54.000 --> 00:45:57.010
on the screen that's going to
indicate that the search is done.

00:45:57.020 --> 00:45:59.820
Well, this is fine.

00:45:59.820 --> 00:46:03.070
An eggplant will come along and do this,
and it'll wait for up to 30

00:46:03.170 --> 00:46:04.920
seconds for the search to finish.

00:46:04.960 --> 00:46:09.600
But your user may not be too happy if
they're waiting around for 30 seconds.

00:46:09.600 --> 00:46:15.080
So you might want to add a little extra
code in here to record the start time.

00:46:15.080 --> 00:46:17.090
Before you start,
you might want to start the search

00:46:17.410 --> 00:46:20.740
and then afterwards subtract the start
time from the current time to see

00:46:20.740 --> 00:46:22.640
if it's greater than five seconds.

00:46:22.880 --> 00:46:26.480
Then that may be something
that you want to be aware of.

00:46:26.480 --> 00:46:32.520
So this little bit of code here would log
a warning that'll show up in your result

00:46:32.520 --> 00:46:38.790
log that you can see later then to know
that things aren't quite up to par there.

00:46:40.280 --> 00:46:44.760
So it's important to validate
what's valuable to the user,

00:46:44.780 --> 00:46:47.620
because ultimately what you're
really trying to do here-- I know

00:46:47.620 --> 00:46:50.110
I've said this quite a few times
already-- but really to deliver a

00:46:50.120 --> 00:46:53.280
quality experience to your customers.

00:46:53.320 --> 00:46:55.820
And so this is a great way to
focus your testing when you

00:46:55.820 --> 00:46:58.570
really can't test everything.

00:46:58.860 --> 00:47:02.470
Let's go back to the
demo machine again here.

00:47:06.040 --> 00:47:09.760
Now, about this point,
some of you may be wondering, well,

00:47:09.760 --> 00:47:12.590
how do you know if all these
scripts are succeeding or if they're

00:47:12.590 --> 00:47:14.260
failing and what's going on here?

00:47:14.260 --> 00:47:19.570
I've kind of referred briefly
to a results log in here.

00:47:19.580 --> 00:47:23.380
Let's go back and take a look
at our suite that we created.

00:47:23.380 --> 00:47:25.320
We've got a number of
scripts out here now.

00:47:25.320 --> 00:47:28.770
We've also got a number of different
images that we've captured in the

00:47:28.870 --> 00:47:30.930
course of developing these scripts.

00:47:31.240 --> 00:47:33.860
We also have something
called the results tab here,

00:47:33.860 --> 00:47:37.290
and that is where we list the
results of the different tests.

00:47:37.320 --> 00:47:40.020
So our first test was
called Launch Address Book,

00:47:40.020 --> 00:47:43.940
and we can see that it's got a run
that's listed under here in green

00:47:43.940 --> 00:47:46.680
because when we ran that test,
it succeeded.

00:47:46.680 --> 00:47:50.530
And if you look down here,
we can see exactly what it did,

00:47:50.530 --> 00:47:53.070
when it started, what it did next.

00:47:53.190 --> 00:47:55.100
It double-clicked on
that address book icon.

00:47:55.100 --> 00:47:58.300
You'll see that it's recorded
here exactly where it found

00:47:58.300 --> 00:47:59.860
that icon on the screen.

00:47:59.860 --> 00:48:02.400
You probably don't really care,
but once in a while,

00:48:02.400 --> 00:48:05.540
it may make a difference where it
was that the eggplant found it and

00:48:05.890 --> 00:48:10.140
the exact time that that occurred,
down to the millisecond if you need it.

00:48:10.240 --> 00:48:14.700
And so you can see each of the steps
that it took as it went through and

00:48:14.810 --> 00:48:19.650
that ultimately it was a success
with an execution time of one second.

00:48:21.220 --> 00:48:26.460
So in the case of our many cards test,
that was a little more interesting.

00:48:26.530 --> 00:48:28.060
We have quite a bit more going on there.

00:48:28.060 --> 00:48:31.530
It was going through, again,
launching the address book and

00:48:31.530 --> 00:48:34.540
then typing some various data
in the fields and so forth.

00:48:34.780 --> 00:48:40.920
And down at the end here,
it went through and checked out some--

00:48:41.050 --> 00:48:45.130
checked to make sure that everything was
there and deleted it all and finished up.

00:48:45.270 --> 00:48:48.340
So again, that's nice.

00:48:48.490 --> 00:48:53.640
But there's still this question of, well,
what happens if something goes wrong?

00:48:53.680 --> 00:48:58.100
So let's see if we can
make something go wrong.

00:48:58.160 --> 00:49:01.760
Here's our new card test.

00:49:01.760 --> 00:49:03.590
And--

00:49:04.220 --> 00:49:07.110
This is one where we were
just creating a single card,

00:49:07.110 --> 00:49:10.320
and then we went on and
verified that it was there.

00:49:10.600 --> 00:49:14.860
And we verified by looking
for the word eggplant support.

00:49:14.860 --> 00:49:17.950
Maybe we changed that to something
else so that it doesn't find it.

00:49:21.710 --> 00:49:25.800
I'll put a one second wait in there
because I found that sometimes eggplant

00:49:25.800 --> 00:49:28.740
is going ahead so fast that it'll
start looking for the next thing before

00:49:28.740 --> 00:49:31.800
it's actually got this all typed in.

00:49:31.890 --> 00:49:35.670
So if we change this now,
let me just run that one

00:49:35.670 --> 00:49:37.140
more time before we do that.

00:49:37.140 --> 00:49:39.800
I'll kind of comment that out there.

00:49:39.820 --> 00:49:42.820
Run the script again so that you can
remember what it was that it did.

00:49:42.820 --> 00:49:49.020
It goes through, it creates the card,
enters all the information in here, and--

00:49:49.100 --> 00:50:09.100
[Transcript missing]

00:50:10.700 --> 00:50:13.090
that that image wasn't found on there.

00:50:13.100 --> 00:50:18.570
And if we go up into our results here,
we can see that, in fact,

00:50:18.700 --> 00:50:21.110
the most recent run of
that script has failed.

00:50:21.120 --> 00:50:25.030
And if we click on that one,
you'll notice that Eggplant has

00:50:25.030 --> 00:50:26.620
actually captured a picture here.

00:50:26.620 --> 00:50:31.570
Whenever a script fails,
Eggplant will capture a full-screen image

00:50:31.580 --> 00:50:35.800
of what was going on on the system at
the time to help you go back and find

00:50:35.800 --> 00:50:39.450
out later exactly what was happening
and where things might have gone wrong.

00:50:39.840 --> 00:50:44.640
So we can see that somebody has
typed in Vista support here.

00:50:44.640 --> 00:50:46.070
Well, that doesn't exist, I guess.

00:50:46.080 --> 00:50:48.100
And so it wasn't able to find that.

00:50:48.300 --> 00:50:48.680
So...

00:50:51.430 --> 00:50:55.040
We can also track back through
here still in our results and see

00:50:55.040 --> 00:50:58.670
everything that the script did do,
what it found, where it went,

00:50:58.810 --> 00:51:02.460
and so forth, up until the point where,
well, this is what it was looking for,

00:51:02.460 --> 00:51:04.200
was eggplant support,
and of course it didn't

00:51:04.300 --> 00:51:05.260
find that on the screen.

00:51:05.260 --> 00:51:11.440
But if I double click on that,
it'll bring us right back

00:51:11.440 --> 00:51:13.150
to that line in the script,
and that'll help us to figure

00:51:13.150 --> 00:51:13.150
out how to resolve the issue.

00:51:13.400 --> 00:51:16.010
So that's just a little
bit about results.

00:51:16.160 --> 00:51:18.990
And let's switch back
to slides once again.

00:51:25.730 --> 00:51:28.470
So once again,
it's really important to validate the

00:51:28.470 --> 00:51:33.210
things that are valuable to your users,
focus on what their interests are,

00:51:33.330 --> 00:51:36.960
and you'll be delivering a
quality experience for them.

00:51:37.330 --> 00:51:41.160
Working with the results course to
understand which of your tests are

00:51:41.240 --> 00:51:45.240
passing and which ones are failing is
really important to your overall testing.

00:51:45.240 --> 00:51:48.500
I'd like to talk just a little
bit about one other point here,

00:51:48.520 --> 00:51:51.600
the idea of system integration testing,
or what I call system

00:51:51.680 --> 00:51:52.520
integration testing.

00:51:52.520 --> 00:51:55.850
Because your application, well, you know,
I already said, you know,

00:51:55.850 --> 00:51:58.660
you don't want to focus just
on your code and testing that.

00:51:58.670 --> 00:51:59.680
You should test the application.

00:51:59.730 --> 00:52:01.340
Well,
I'm not going to say that testing the

00:52:01.420 --> 00:52:03.300
application isn't really enough either.

00:52:03.300 --> 00:52:06.100
You need to test your application
in a broader environment

00:52:06.100 --> 00:52:08.580
because your application,
most of the time,

00:52:08.580 --> 00:52:11.110
is not going to be living
all by itself on the system.

00:52:11.120 --> 00:52:13.790
Most software these days is
going to be interacting with

00:52:13.900 --> 00:52:15.420
other software on the system.

00:52:15.420 --> 00:52:19.410
It's got things going on there,
either exporting data or importing

00:52:19.410 --> 00:52:23.780
data or interacting in some other way
with other elements of the system.

00:52:23.780 --> 00:52:27.750
So it's really important to do
some testing also in the overall

00:52:27.850 --> 00:52:29.700
context where it's going to be.

00:52:29.720 --> 00:52:34.560
So you may also want to
test a complete process.

00:52:34.560 --> 00:52:37.730
There are times when you may have
data that's flowing through into

00:52:37.730 --> 00:52:41.450
your application and then out into
some other application and so forth.

00:52:41.500 --> 00:52:45.520
And it can be really nice to be able to
follow that through a complete process,

00:52:45.590 --> 00:52:47.900
not just within a single application.

00:52:49.420 --> 00:52:52.180
You may also have different
configurations of your software,

00:52:52.180 --> 00:52:54.660
different options that
could be turned on or off,

00:52:54.730 --> 00:52:56.060
that sort of thing.

00:52:56.060 --> 00:53:00.290
If you've got an automated test that's
all set up to test one configuration,

00:53:00.290 --> 00:53:03.050
it shouldn't be too hard to
adapt that to test another one.

00:53:03.100 --> 00:53:06.110
Or if you're testing
on different platforms,

00:53:06.110 --> 00:53:12.410
maybe your application runs on
Mac OS 10.1 and 10.2 and 10.3 and 10.4,

00:53:12.410 --> 00:53:16.160
you're going to want to be able to test
it on all these different platforms.

00:53:16.160 --> 00:53:21.690
And having a single set of tests that
can test it consistently the same way

00:53:21.690 --> 00:53:23.540
on each platform can be really great.

00:53:25.620 --> 00:53:28.220
So clearly there's some
benefits to automation here.

00:53:28.380 --> 00:53:31.300
Consistency across
different configurations,

00:53:31.300 --> 00:53:34.120
also across different platforms,
can be really valuable.

00:53:34.120 --> 00:53:39.340
Having repeatable results is always nice.

00:53:39.490 --> 00:53:42.040
Being able to run the same
test in exactly the same way.

00:53:42.040 --> 00:53:45.640
Having those logs that you can go
back to to see exactly what was done.

00:53:45.640 --> 00:53:48.910
This is an issue that comes up
from time to time in organizations.

00:53:48.920 --> 00:53:52.530
The developers have spent a lot of
effort creating a great application

00:53:52.580 --> 00:53:54.360
and they think it's wonderful.

00:53:54.920 --> 00:53:56.660
They hand it off to the
testers and the testers say,

00:53:56.660 --> 00:53:57.420
"Oh, it's all broken.

00:53:57.420 --> 00:53:59.840
This thing, it doesn't work when I do
this." And the developers go,

00:53:59.850 --> 00:54:01.710
"Yeah, yeah,
right." And so if you have that

00:54:01.750 --> 00:54:05.510
kind of communication issue between
your developers and your testers,

00:54:05.520 --> 00:54:07.920
it can be really nice for the
testers to have a tool to say,

00:54:07.960 --> 00:54:09.360
"Oh yeah, this is what I did.

00:54:09.360 --> 00:54:12.890
And here's the log that shows exactly
what went on and exactly what the results

00:54:12.890 --> 00:54:18.050
were." So that can be a really valuable
communication tool to go back from the

00:54:18.130 --> 00:54:21.430
testing team to the development team.

00:54:21.710 --> 00:54:24.020
And of course,
automation is going to give you more

00:54:24.020 --> 00:54:28.140
efficient repetition of complex tasks,
just as it does with some

00:54:28.140 --> 00:54:29.420
of the simpler tasks.

00:54:29.490 --> 00:54:34.690
So let's go back once more,
the last time here, to the demo machine.

00:54:35.160 --> 00:54:39.480
And take a look at an integration test.

00:54:39.560 --> 00:54:44.380
First I want to go in
here in the address book,

00:54:44.450 --> 00:54:47.960
delete the card that didn't
quite get deleted there.

00:54:53.340 --> 00:54:55.120
Back to our initial state here.

00:54:55.350 --> 00:55:00.170
Now I've got a little script that
I wrote this afternoon actually.

00:55:00.340 --> 00:55:03.020
Let me show you what
this does a little bit.

00:55:04.110 --> 00:55:06.760
First thing in here is it's going to
slow some things down for the demo.

00:55:06.760 --> 00:55:11.000
Eggplant has a lot of different
timing parameters that you can adjust.

00:55:11.000 --> 00:55:13.230
If you're testing a system
that's running a little slower,

00:55:13.230 --> 00:55:15.210
you may need to slow
Eggplant down a little more.

00:55:15.210 --> 00:55:18.660
Or if you're, whatever,
if you're testing a web application,

00:55:18.670 --> 00:55:22.910
oftentimes you need even more time there
for the web application to respond.

00:55:23.000 --> 00:55:25.040
So you can adjust some of your
general timing parameters.

00:55:26.390 --> 00:55:28.850
Then this script is going to go through,
launch the address book,

00:55:28.850 --> 00:55:31.140
create a new card,
enter some information in the card,

00:55:31.140 --> 00:55:32.140
finish the editing.

00:55:32.140 --> 00:55:35.580
It's going to export a
vCard to the desktop.

00:55:35.580 --> 00:55:39.650
So it's going to export the information
from that card onto the desktop.

00:55:39.660 --> 00:55:42.880
Then it's going to delete
the card in an address book,

00:55:42.880 --> 00:55:47.410
import the information again from
the vCard by dragging that back in.

00:55:47.410 --> 00:55:49.190
Then it's going to send email.

00:55:49.190 --> 00:55:50.720
Well, it's not actually sending an email.

00:55:50.720 --> 00:55:54.260
There's a command in Eggplant, actually,
to send email.

00:55:54.260 --> 00:55:58.360
If you're running a test overnight
and you want to have it send

00:55:58.360 --> 00:56:00.830
you the results in the morning,
you can do that.

00:56:00.980 --> 00:56:03.100
In this case,
we're testing the sending email

00:56:03.100 --> 00:56:04.610
feature of the address book.

00:56:04.660 --> 00:56:09.080
So it's going to try to send,
generate an email message to the

00:56:09.080 --> 00:56:11.490
person who's in the address card there.

00:56:11.500 --> 00:56:16.990
And then it's going to actually type
some information into the mail message,

00:56:17.040 --> 00:56:18.720
including putting a picture in there.

00:56:18.720 --> 00:56:21.710
And then finally it goes through
and kind of cleans things up.

00:56:21.850 --> 00:56:23.430
So let me just show you.

00:56:23.430 --> 00:56:25.490
Again,
I've got this slowed down a little bit

00:56:25.620 --> 00:56:30.390
so you can can see what's going on here.

00:56:30.730 --> 00:56:34.600
I think I've got the script
animation turned on here,

00:56:34.600 --> 00:56:39.840
so I'll just leave this window up so
you can kind of watch what's going on

00:56:39.980 --> 00:56:42.980
a little bit there as it's running.

00:57:13.310 --> 00:57:13.310
So it's going through and you
can see that it's launched

00:57:13.310 --> 00:57:13.310
the address book there.

00:57:13.310 --> 00:57:13.310
It's creating a new card,
typing in some information.

00:57:13.310 --> 00:57:13.310
I've got it typing nice and slow here.

00:57:13.310 --> 00:57:13.310
Sometimes it's nice to be able
to have things run slowly,

00:57:13.310 --> 00:57:13.310
either because you want to do a
demonstration or for whatever reason,

00:57:13.310 --> 00:57:13.310
to be able to kind of watch what's
going on a little better because

00:57:13.310 --> 00:57:13.310
eggplant tends to run pretty fast.

00:57:13.310 --> 00:57:13.310
It responds to things as quickly as
it can as they come up on the screen.

00:57:13.700 --> 00:57:15.500
So it's now exporting the V-card there.

00:57:15.500 --> 00:57:18.350
You can see that on the
screen on the desktop there.

00:57:18.350 --> 00:57:19.680
And it's deleted the card.

00:57:19.680 --> 00:57:22.240
Now it's dragging the card
nice and slowly there back

00:57:22.350 --> 00:57:24.340
into the address book window.

00:57:24.340 --> 00:57:25.840
So it's imported the data again.

00:57:25.840 --> 00:57:27.600
Now it's going to go send email here.

00:57:27.600 --> 00:57:29.820
So now it's launching
the mail application.

00:57:29.820 --> 00:57:33.060
And mail, of course,
has come up with that

00:57:33.060 --> 00:57:35.120
address in the to field.

00:57:35.120 --> 00:57:37.580
Now it's composing a mail message.

00:57:37.580 --> 00:57:40.390
I'm not trying to have it
actually send the email message,

00:57:40.390 --> 00:57:42.840
but you certainly could
do that kind of thing.

00:57:43.780 --> 00:57:46.580
Eggplant has the ability also to
connect to a different machine in

00:57:46.580 --> 00:57:48.310
the middle of a test if it needs to.

00:57:48.310 --> 00:57:50.650
So you can send an
email from one machine,

00:57:50.650 --> 00:57:54.310
go to another machine, open it up,
see if the mail has arrived.

00:57:54.460 --> 00:57:56.910
Here we've got a picture
of Aunt Aubergine here

00:57:56.910 --> 00:57:58.710
reclining on the divan.

00:57:59.080 --> 00:58:01.500
And there's our mail message.

00:58:01.520 --> 00:58:03.200
And of course,
it's going to go through and clean things

00:58:03.260 --> 00:58:07.740
up and close that all out afterwards to
put things back to where they started,

00:58:07.780 --> 00:58:13.000
including dragging the
V card down into the trash.

00:58:13.000 --> 00:58:15.000
So that's our little demo.

00:58:15.000 --> 00:58:18.000
Can we switch back to slides, please?

00:58:23.920 --> 00:58:29.200
You may have some ideas at this point
that there are some other possible things

00:58:29.200 --> 00:58:33.040
that you could do with an automation tool
like this besides just testing software.

00:58:33.040 --> 00:58:35.860
In fact, a number of our customers have
found some rather creative

00:58:35.860 --> 00:58:37.200
things to do with Eggplant.

00:58:37.200 --> 00:58:40.360
But some of the things that
I thought I would just toss out

00:58:40.360 --> 00:58:43.510
here as ideas to kind of get
your imagination going would be,

00:58:43.510 --> 00:58:46.500
for example, to monitor and test
deployed applications.

00:58:46.500 --> 00:58:48.970
Mostly we think of software
testing in terms of testing

00:58:49.360 --> 00:58:50.840
software that we're developing.

00:58:50.840 --> 00:58:52.530
So as you're creating it,
you want to test it and you're

00:58:52.530 --> 00:58:53.670
going to be delivering that.

00:58:53.770 --> 00:58:56.670
But what if you have a web-based
application and once you've

00:58:56.680 --> 00:58:59.620
created it and tested it,
you're actually going to deploy

00:58:59.620 --> 00:59:02.680
it on the web and it's going
to be up running 24 by 7.

00:59:02.680 --> 00:59:05.850
It might be nice to have a system
that can go out and call up that

00:59:05.870 --> 00:59:09.530
website and run through and kind of
make sure that things are actually

00:59:09.530 --> 00:59:13.550
up and running and validate the
application while it's running live.

00:59:14.620 --> 00:59:18.410
Another option would be to
validate some third-party software.

00:59:18.410 --> 00:59:21.740
Eggplant is totally independent
of the system that it's testing.

00:59:21.740 --> 00:59:23.900
It doesn't know anything about
the software that's out there.

00:59:23.900 --> 00:59:26.270
So it can test software from
other companies as well as

00:59:26.280 --> 00:59:27.680
it can test your software.

00:59:27.680 --> 00:59:31.320
And we've had situations where
we've had customers who wanted

00:59:31.320 --> 00:59:34.420
to be able to validate that,
for example,

00:59:34.420 --> 00:59:37.970
different versions of the applications
that they use at their company are

00:59:37.970 --> 00:59:41.180
still going to work with the new
version of an operating system when

00:59:41.180 --> 00:59:43.140
the new operating system rolls out.

00:59:43.200 --> 00:59:43.240
So that's a good idea.

00:59:43.260 --> 00:59:43.320
Thank you.

00:59:43.420 --> 00:59:43.460
Thank you.

00:59:43.500 --> 00:59:43.510
Thank you.

00:59:43.600 --> 00:59:43.660
Thank you.

00:59:43.680 --> 00:59:43.700
Thank you.

00:59:43.740 --> 00:59:43.760
Thank you.

00:59:43.800 --> 00:59:43.810
Thank you.

00:59:43.920 --> 00:59:43.960
Thank you.

00:59:44.020 --> 00:59:44.020
Thank you.

00:59:44.080 --> 01:00:14.050
Thank you.

01:00:14.170 --> 01:00:17.940
got an interface,
then it's something that can be scripted

01:00:17.950 --> 01:00:23.220
and you can create tests through the
software interface to the hardware.

01:00:23.220 --> 01:00:25.990
We also have a capability in
Eggplant to generate movies.

01:00:26.030 --> 01:00:28.810
So while your script is running it
can be capturing a movie of what's

01:00:28.820 --> 01:00:30.410
going on on the remote system.

01:00:30.410 --> 01:00:33.910
By slowing things down a little bit
like I did there in the last demo,

01:00:34.140 --> 01:00:38.670
you can adjust the timing and create a
movie of something that might be used for

01:00:38.820 --> 01:00:43.370
documentation or for training purposes
to show people certain aspects of your

01:00:43.440 --> 01:00:46.300
application or to use in your marketing.

01:00:46.300 --> 01:00:48.680
So those are just a few ideas
that I wanted to throw out there.

01:00:51.440 --> 01:00:54.600
So what you've learned,
or what I hope you've learned,

01:00:54.600 --> 01:00:56.560
just getting back on
those same points again,

01:00:56.860 --> 01:00:59.610
the benefits of automation
and software testing,

01:00:59.610 --> 01:01:04.290
because this can really help you
to get a lot more testing done,

01:01:04.400 --> 01:01:07.700
test more thoroughly things that
you could never test manually,

01:01:07.800 --> 01:01:12.260
but also to test the things that you
can test manually more efficiently.

01:01:13.120 --> 01:01:18.430
I hope you've seen that getting
started with automation doesn't

01:01:18.430 --> 01:01:19.590
have to be terribly hard.

01:01:19.590 --> 01:01:24.340
We've created two or three good tests
there in a very short period of time,

01:01:24.340 --> 01:01:27.350
and it's not all that hard.

01:01:27.350 --> 01:01:31.970
I, of course, know eggplant pretty well,
but you can get there, too.

01:01:31.970 --> 01:01:34.630
It's really not terribly
difficult to get started with.

01:01:36.810 --> 01:01:40.750
And where to focus your testing areas,
clearly, I've said it several times,

01:01:40.750 --> 01:01:44.670
focusing on the areas that bring
the most value to your users.

01:01:46.490 --> 01:01:50.440
We looked at a few different techniques
there as we went through the demos.

01:01:50.440 --> 01:01:53.110
We were doing what are
called functional GUI tests,

01:01:53.270 --> 01:01:56.390
you know, testing functionality through
the graphical interface.

01:01:56.500 --> 01:01:58.600
We played around with
some modularity there.

01:01:58.600 --> 01:02:01.370
We did quite a bit of that
actually in the demo today.

01:02:01.400 --> 01:02:05.410
Having scripts that call other
scripts and those we were able to

01:02:05.410 --> 01:02:07.400
use to build up our later tests.

01:02:07.400 --> 01:02:11.290
And you can get quite a lot of value
out of your tests that way if you

01:02:11.340 --> 01:02:15.510
make them in a modular fashion so
that you can reuse parts of them.

01:02:28.030 --> 01:02:28.330
Hello?

01:02:28.400 --> 01:02:29.590
Okay.

01:02:30.150 --> 01:02:31.100
Couldn't hear myself anymore.

01:02:31.100 --> 01:02:32.400
I'm getting used to this loud voice.

01:02:32.400 --> 01:02:37.320
So, data-driven tests, we, of course,
played around with those as well.

01:02:37.320 --> 01:02:39.410
One of the great
advantages of automation.

01:02:39.420 --> 01:02:43.770
So, and of course, we introduced the six
principles of practical testing.

01:02:43.860 --> 01:02:46.340
Testing the user experience,
not the code,

01:02:46.370 --> 01:02:50.420
because you really want to test
things from the user's point of view.

01:02:50.970 --> 01:02:54.270
Starting simple and building
up from there as you go.

01:02:54.270 --> 01:02:58.780
Completing that testing cycle,
which makes it a lot easier as you're

01:02:58.780 --> 01:03:02.580
developing a number of tests if you can
always end where you started so that

01:03:02.580 --> 01:03:04.290
you're ready to run your next test.

01:03:04.340 --> 01:03:06.820
Creating things modularly, as I said.

01:03:06.820 --> 01:03:11.520
Taking advantage of repeat and validating
the things that are valuable to your

01:03:11.520 --> 01:03:16.070
users so that you can deliver some
really great software to your customers,

01:03:16.070 --> 01:03:18.430
which is what we'd all like to see.

01:03:21.800 --> 01:04:20.100
[Transcript missing]

01:04:20.300 --> 01:04:21.350
Please check it out.

01:04:21.560 --> 01:04:22.440
I'm Doug Simons.

01:04:22.440 --> 01:04:25.500
Emma Campbell is here also,
our Director of Sales.

01:04:25.500 --> 01:04:28.260
I'd just like to invite
her up for the Q&A.

01:04:28.260 --> 01:04:33.770
And we've got documentation and
sample code and other resources on our

01:04:33.770 --> 01:04:36.000
website there at redstonesoftware.com.

01:04:36.000 --> 01:04:40.100
And if you'd like to go download
a free trial version of Eggplant,

01:04:40.140 --> 01:04:43.230
give this thing a try and
see how it works for you.

01:04:43.310 --> 01:04:47.680
So there's a URL there too,
or you can just find it on our website.