WEBVTT

00:00:10.680 --> 00:00:15.780
Welcome to session 118,
Core Data Versioning and Migration.

00:00:16.790 --> 00:00:17.940
My name is Miguel Sanchez.

00:00:17.940 --> 00:00:20.420
I'm an engineer in the Core Data team.

00:00:20.420 --> 00:00:23.930
I've already been criticized for
wearing the official speaker blue shirt,

00:00:23.930 --> 00:00:27.740
which apparently people don't
like that much this talk.

00:00:27.740 --> 00:00:30.710
So just call me Core Data Smurf.

00:00:33.770 --> 00:00:37.750
Thank you for coming out at 9:00 AM,
but why would you ever want to get up

00:00:37.820 --> 00:00:42.620
at this time at dawn and come listen
to a talk other than the donuts,

00:00:42.760 --> 00:00:47.330
which there are none this year,
but it would have been a joke last year.

00:00:48.230 --> 00:00:53.110
So we're all here to continue our
education in the Core Data world,

00:00:53.140 --> 00:00:55.420
specifically issues
relating to versioning and

00:00:55.420 --> 00:00:56.670
migration of Core Data apps.

00:00:56.680 --> 00:00:59.820
Let me get a quick show of hands.

00:00:59.820 --> 00:01:03.600
Who's got at least some basic
exposure to the Core Data framework,

00:01:03.660 --> 00:01:09.420
including having attended the
presentation last evening?

00:01:09.420 --> 00:01:14.300
So I'm assuming almost everybody
has some idea of Core Data.

00:01:14.500 --> 00:01:17.410
Don't worry if you haven't used
Core Data but you're seriously

00:01:17.410 --> 00:01:19.200
thinking about using the framework.

00:01:19.200 --> 00:01:22.000
I'll try to give you tips
and hints here and there.

00:01:22.000 --> 00:01:25.840
I'll take into account that some
of you are not Core Data people,

00:01:25.900 --> 00:01:29.280
but you'll be okay.

00:01:29.600 --> 00:01:32.650
So this week you're learning about a
whole bunch of our new technologies,

00:01:32.720 --> 00:01:35.910
the OS, the APIs, the new tools.

00:01:36.160 --> 00:01:39.990
But the ultimate point of all this is
that for you to go back to your fancy

00:01:39.990 --> 00:01:44.310
offices next week and start implementing
a new version of your application,

00:01:44.320 --> 00:01:47.750
you want to incorporate all of
these technologies into a new

00:01:47.840 --> 00:01:49.770
version of your application.

00:01:50.610 --> 00:01:52.520
So you'll take a current
version of your app,

00:01:52.520 --> 00:01:56.140
your current grade app,
or eventually if you haven't

00:01:56.140 --> 00:01:59.960
done a Core Data app yet,
you will whenever you have

00:01:59.960 --> 00:02:02.310
version two of your app.

00:02:02.380 --> 00:02:05.470
And you'll be adding a whole
bunch of bells and whistles to it,

00:02:05.470 --> 00:02:06.480
and it'll be all great.

00:02:06.480 --> 00:02:08.820
And this particular developer
went a little overboard with

00:02:09.050 --> 00:02:11.920
Core Animation or something like that.

00:02:12.050 --> 00:02:17.670
So what issues will you have to deal with
when you're migrating your application?

00:02:18.600 --> 00:02:21.400
Like I said,
this presentation is focusing

00:02:21.400 --> 00:02:23.310
on Core Data applications.

00:02:23.480 --> 00:02:26.330
So a quick review,
a Core Data application is made up

00:02:26.430 --> 00:02:31.470
of probably the Cocoa side of things,
the UI, the application code.

00:02:31.470 --> 00:02:34.520
But the essence of a
Core Data application is

00:02:34.520 --> 00:02:37.980
its Core Data model and
the persistence store.

00:02:37.980 --> 00:02:39.560
That's what Core Data does for you.

00:02:39.560 --> 00:02:42.200
If you give us a model,
we manage the object graph

00:02:42.200 --> 00:02:43.940
for you and we persist it out.

00:02:43.970 --> 00:02:48.580
For purposes of this presentation,
we are not focusing on migration.

00:02:48.600 --> 00:02:51.380
We're not talking about migration
issues relating to your UI and

00:02:51.380 --> 00:02:55.100
we're not really talking about your
specific application code that much.

00:02:55.100 --> 00:03:00.070
So we're talking about managed
object models and their stores.

00:03:02.250 --> 00:03:07.860
So migration in this context
refers to you have a version

00:03:07.860 --> 00:03:10.880
of your Core Data application,
your customer's data is tied to

00:03:10.880 --> 00:03:12.620
version 1.0 of your application.

00:03:12.620 --> 00:03:15.620
You've decided to
improve your application,

00:03:15.620 --> 00:03:18.480
so you have a new
structure for your model,

00:03:18.480 --> 00:03:21.780
yet your customer's application
is still in version 1.0.

00:03:21.800 --> 00:03:25.760
So we have to figure out how to
get that data over into the correct

00:03:25.760 --> 00:03:30.590
format that you're expecting in
version 2.0 of your application.

00:03:31.650 --> 00:03:34.890
So this is what I mean by
migration in this context.

00:03:34.930 --> 00:03:38.220
I know that every time we invite
you guys to this conference,

00:03:38.220 --> 00:03:41.790
we say migration and you guys freak
out because we're moving architectures

00:03:41.860 --> 00:03:43.660
or we're changing the API under you.

00:03:43.660 --> 00:03:46.880
This is nothing,
this is not that kind of talk.

00:03:46.880 --> 00:03:50.560
This is migration because you
are evolving your application

00:03:50.560 --> 00:03:54.760
and you're naturally requiring
to migrate your customer's data.

00:03:54.760 --> 00:03:58.430
So this is something that you're
causing by improving your application.

00:04:00.620 --> 00:04:02.590
You might be asking yourselves,
especially if you're not

00:04:02.590 --> 00:04:04.640
that familiar with Core Data,
what's the big deal?

00:04:04.640 --> 00:04:06.960
Why do we even need a
whole session of migration?

00:04:06.960 --> 00:04:11.530
Again, the essence of Core Data is that
we do a lot of data management

00:04:11.530 --> 00:04:13.720
for you if you give us a model.

00:04:13.720 --> 00:04:15.890
So you give us a model,
we manage the data for you,

00:04:15.990 --> 00:04:18.340
but we need to know what
the model of that data is.

00:04:18.340 --> 00:04:21.710
Consequently,
if you switch the model under

00:04:21.760 --> 00:04:25.600
us or you decide to modify it,
we no longer know how to manage

00:04:25.600 --> 00:04:29.870
that old existing data that you had
in version 1.0 of your application.

00:04:30.510 --> 00:04:33.860
So this is why versioning
and migration is required.

00:04:33.860 --> 00:04:37.070
Here's a graphical representation
of the same concept.

00:04:37.080 --> 00:04:40.710
You have a store that is
all set up to store circles,

00:04:40.860 --> 00:04:42.840
triangles, and squares.

00:04:42.840 --> 00:04:45.840
As long as you give us a
blueprint of that model that is,

00:04:45.840 --> 00:04:49.360
you know, I'm going to be dealing
with Core Data Framework.

00:04:49.410 --> 00:04:51.800
I'm going to be dealing with triangles,
squares, and circles.

00:04:51.800 --> 00:04:53.140
We're fine.

00:04:53.140 --> 00:04:54.460
No problem.

00:04:54.460 --> 00:04:55.700
We know what you want us to do.

00:04:55.700 --> 00:04:58.520
So we start putting data into your store.

00:04:58.520 --> 00:04:59.900
That's fine.

00:05:00.460 --> 00:05:03.260
Here's version 1.0 of your store.

00:05:03.260 --> 00:05:05.730
Then you go ahead and
improve your application.

00:05:05.920 --> 00:05:08.760
You now have decided that
you're also dealing with stars

00:05:08.760 --> 00:05:10.540
and pentagons and or hexagons.

00:05:10.540 --> 00:05:12.540
Sorry,
it used to be a pentagon in version 1.0.

00:05:12.540 --> 00:05:15.280
So we switch that.

00:05:15.280 --> 00:05:17.180
Here's the store.

00:05:17.180 --> 00:05:18.160
Here's the model.

00:05:20.620 --> 00:05:23.820
Framework goes, what you talking about,
Willis?

00:05:23.880 --> 00:05:24.790
We don't know, right?

00:05:24.860 --> 00:05:30.520
So we localized that to English saying,
data store is incompatible with the

00:05:30.520 --> 00:05:33.100
version of the model you're giving us.

00:05:34.750 --> 00:05:38.700
So you have changes in your model
and they're affecting the store.

00:05:38.740 --> 00:05:40.500
What kind of changes can
you have in your model?

00:05:40.500 --> 00:05:43.550
They're simple changes that
you're adding new fields,

00:05:43.640 --> 00:05:44.870
you're dropping fields.

00:05:44.990 --> 00:05:46.680
You're not really transforming your data.

00:05:46.740 --> 00:05:49.830
But you can get into more complicated
changes where you're really splitting up

00:05:49.980 --> 00:05:55.140
fields and refactoring your inheritance
hierarchy and fairly sophisticated stuff.

00:05:55.380 --> 00:05:59.030
So we do a lot of cool stuff for you,
but please,

00:05:59.200 --> 00:06:03.540
migration as a problem in general,
it's a non-trivial issue and some of

00:06:03.560 --> 00:06:08.470
you experienced software developers out
there will know that you will deal with

00:06:08.470 --> 00:06:13.800
other issues independently of what we're
providing you at the framework level.

00:06:13.980 --> 00:06:18.200
So let's start by introducing the example
I'll be using throughout the whole talk.

00:06:18.430 --> 00:06:19.900
It's a Core Recipes example.

00:06:19.900 --> 00:06:23.100
It's actually available ever
since the Tiger timeframe.

00:06:23.100 --> 00:06:24.360
You can download Core Recipes.

00:06:24.360 --> 00:06:30.520
We use it to give you an example of how
you do a Core Data application in Tiger.

00:06:30.520 --> 00:06:33.400
So we have a simple recipes model here.

00:06:33.490 --> 00:06:35.770
We have chefs, ingredients.

00:06:35.800 --> 00:06:37.750
We improve our application.

00:06:37.750 --> 00:06:40.200
We now go to version 2 of our model.

00:06:40.200 --> 00:06:43.870
We have a whole bunch of changes,
which I'm going to go into detail.

00:06:43.900 --> 00:06:47.480
So what changed between version
1.0 and 2.0 of our model?

00:06:47.480 --> 00:06:50.740
We, or I should say you,
you're the developers,

00:06:50.740 --> 00:06:54.140
you decided to add a rating
attribute to the recipes entity.

00:06:54.140 --> 00:06:55.310
A simple change, right?

00:06:55.310 --> 00:06:56.420
It wasn't there before.

00:06:56.420 --> 00:06:57.760
I want to add something new.

00:06:57.760 --> 00:07:01.110
You decided to drop a
training attribute from chef.

00:07:01.110 --> 00:07:02.520
Nobody was using it.

00:07:02.520 --> 00:07:03.780
Why keep it there?

00:07:03.780 --> 00:07:04.870
Let's drop it.

00:07:05.040 --> 00:07:06.970
You decided to fix a typo you had.

00:07:07.040 --> 00:07:11.280
Recipe used to be recipes with an
S in version 1.0 of your model,

00:07:11.280 --> 00:07:13.880
but then you realize
that it's really a 2.0.

00:07:13.900 --> 00:07:16.440
You decided to change it to
one relationship to recipe.

00:07:16.580 --> 00:07:18.210
So typo, oops, let's fix that.

00:07:18.250 --> 00:07:20.280
Those are all pretty straightforward.

00:07:20.280 --> 00:07:22.460
Here are the more interesting ones.

00:07:22.460 --> 00:07:26.720
You decided to change it to one
relationship and to many relationships.

00:07:26.740 --> 00:07:30.120
So at this point, you don't want to lose
your pre-existing data.

00:07:30.120 --> 00:07:33.320
You just want to tell us that the
structure of the store changed,

00:07:33.400 --> 00:07:37.060
but the data already existed
in version 1.0 of your model.

00:07:37.060 --> 00:07:41.160
You decided to split a single
name field that you had into

00:07:41.160 --> 00:07:43.260
first name and last name.

00:07:43.900 --> 00:07:46.210
So this is now you're getting
into data transformation.

00:07:46.210 --> 00:07:48.220
Don't,
where I'm not just adding new fields.

00:07:48.220 --> 00:07:51.110
There's pre-existing data there
that I want to do something with.

00:07:51.180 --> 00:07:54.450
And the most sophisticated change
in this example is if you're

00:07:54.460 --> 00:07:57.850
familiar with database terminology,
you decided to normalize

00:07:57.850 --> 00:07:58.900
the cuisine field.

00:07:58.900 --> 00:08:02.820
So in version 1.0, you had a field,
a string field cuisine

00:08:02.820 --> 00:08:04.600
in each recipe instance.

00:08:04.600 --> 00:08:08.280
But if you have multiple Mexican recipes,
you want to just have a lookup table

00:08:08.390 --> 00:08:10.310
of those in a separate recipe cuisine.

00:08:10.310 --> 00:08:13.250
So that's the most sophisticated
change you do here.

00:08:14.060 --> 00:08:18.050
Here's a quick review,
version 1.0 of the model.

00:08:18.920 --> 00:08:20.930
version 2 of the model.

00:08:20.960 --> 00:08:23.070
So this is what we'll be
referring to back and forth

00:08:23.330 --> 00:08:24.870
throughout the presentation.

00:08:25.750 --> 00:08:29.060
Once again,
this is the issue we're dealing with.

00:08:29.130 --> 00:08:34.010
You've improved your application,
you're using version 2.0 of your model.

00:08:34.220 --> 00:08:38.110
Yet, your customer's data is still
bound to version 1.0 of the model.

00:08:38.240 --> 00:08:40.020
They're still in the old
version of the store.

00:08:40.140 --> 00:08:42.710
They just bought your upgrade and
they're putting it in their system.

00:08:42.870 --> 00:08:44.600
So what has to happen?

00:08:44.700 --> 00:08:48.180
Something has to happen
that moves that data over,

00:08:48.190 --> 00:08:51.180
without losing what they already had,
into the new structure of the

00:08:51.180 --> 00:08:54.790
data so that they can use the
new features in your application.

00:08:54.910 --> 00:08:56.300
That's why we're here.

00:08:56.370 --> 00:08:59.420
What's new in Core Data to
help you do this?

00:09:00.080 --> 00:09:05.050
We have an official versioning mechanism
that allows you to tag models and stores

00:09:05.120 --> 00:09:09.690
with "this is version X of something."
We introduce a new type of model,

00:09:09.690 --> 00:09:14.000
a mapping model, in which you tell us
how to go from A to B.

00:09:14.000 --> 00:09:16.850
And more importantly,
we do the work for you.

00:09:17.000 --> 00:09:20.690
So we introduce a whole bunch of new
migration infrastructure there where

00:09:20.700 --> 00:09:23.990
we do the migration work for you.

00:09:24.000 --> 00:09:28.030
Of the Core Data developers out there,
who has already come across a

00:09:28.030 --> 00:09:31.990
problem like this that would
find something like this useful?

00:09:32.050 --> 00:09:32.880
Great.

00:09:33.120 --> 00:09:35.770
So you'll be pretty happy, I think.

00:09:36.370 --> 00:09:39.760
We've increased our number of classes
in the framework significantly.

00:09:39.760 --> 00:09:41.440
We have six new classes.

00:09:41.540 --> 00:09:43.630
We didn't have a lot.

00:09:43.870 --> 00:09:48.060
So we have the first half of those
classes are relating to the mapping

00:09:48.140 --> 00:09:53.000
model and the bottom half are the ones
that do all the migration for you.

00:09:53.730 --> 00:09:56.440
There's two significant
improvements within Xcode.

00:09:56.650 --> 00:09:59.880
One is that we now version
your Core Data Models.

00:10:00.050 --> 00:10:04.600
We have this group and I'll
be showing this in the demo.

00:10:04.600 --> 00:10:06.950
And two is that we have
a new type of model file,

00:10:06.950 --> 00:10:09.100
like I said, the mapping model file.

00:10:09.100 --> 00:10:13.090
So we have its associated editor where
you tell us how you want to go from

00:10:13.090 --> 00:10:16.110
A to B without writing much code.

00:10:16.800 --> 00:10:19.400
That's what this session is about.

00:10:19.600 --> 00:10:22.490
So we're going to be focusing on each
one of those three parts I outlined,

00:10:22.490 --> 00:10:26.120
the versioning, the mapping model,
and the migration algorithm.

00:10:26.120 --> 00:10:29.000
So let's start with the
versioning side of things.

00:10:29.080 --> 00:10:30.050
So what's a version?

00:10:30.230 --> 00:10:33.460
How do we tag or how do we identify that?

00:10:33.460 --> 00:10:35.780
We know we want to migrate
from something to something,

00:10:35.780 --> 00:10:39.630
but how do we identify that
those two things are different?

00:10:39.790 --> 00:10:42.260
There's two ways of
approaching this issue.

00:10:42.260 --> 00:10:45.880
One is the way you guys
would think of a version,

00:10:45.880 --> 00:10:49.700
and then the other way is the way the
framework needs to think of a version.

00:10:49.840 --> 00:10:53.810
For you, a version is usually an
identifier or a number,

00:10:53.830 --> 00:10:56.960
most likely whatever
you're naming your file.

00:10:57.100 --> 00:11:00.200
The important thing about this
identifier is that you're the

00:11:00.200 --> 00:11:02.340
ones giving meaning to that.

00:11:02.710 --> 00:11:04.320
So it means something to you.

00:11:04.320 --> 00:11:08.110
This is version X of my app,
or this is what was working

00:11:08.110 --> 00:11:11.030
before I went on vacation,
and now I don't know why it doesn't work.

00:11:11.040 --> 00:11:14.640
But it's a string somewhere,
probably the name of the file.

00:11:14.760 --> 00:11:15.060
You have meaning to that.

00:11:15.060 --> 00:11:19.040
You have assigned meaning to that string.

00:11:19.280 --> 00:11:24.960
The framework needs to have a little
stricter definition of what a version is.

00:11:25.320 --> 00:11:30.510
Again, we rely heavily on knowing the
exact structure of your store.

00:11:30.650 --> 00:11:35.720
So what happens if you change your model,
yet you forget to change the

00:11:35.720 --> 00:11:37.110
name of the model or something?

00:11:37.120 --> 00:11:39.080
Whatever versioning
mechanism you're using,

00:11:39.080 --> 00:11:44.240
we'll run into trouble because you didn't
give us a hint that something changed.

00:11:44.240 --> 00:11:46.110
We need a much stricter definition.

00:11:46.190 --> 00:11:49.330
We need to add a versioning
interpretation mechanism above

00:11:49.480 --> 00:11:51.400
whatever you guys are using.

00:11:51.580 --> 00:11:54.230
So this is versioning to us.

00:11:54.860 --> 00:11:59.650
We care about whether we can read
that old data for you so that we

00:11:59.650 --> 00:12:01.290
can help you perform the migration.

00:12:01.350 --> 00:12:04.780
So those are the kinds of changes
that we're interested in your model.

00:12:04.800 --> 00:12:08.750
A model is made up of
entities and properties.

00:12:08.880 --> 00:12:12.910
If any of those things on the top two
lists have changed within your model,

00:12:12.910 --> 00:12:15.910
an entity's name or their
parent or for the properties,

00:12:15.910 --> 00:12:19.150
whether they're optional or transient,
if any of those things

00:12:19.150 --> 00:12:22.180
have changed in your model,
those things affect our

00:12:22.190 --> 00:12:23.920
ability to read in your data.

00:12:24.920 --> 00:12:27.040
So we flag those as a
different version change,

00:12:27.040 --> 00:12:28.640
as a version having changed.

00:12:28.640 --> 00:12:35.220
For the Experience Core Data Developers,
things we ignore for reading

00:12:35.220 --> 00:12:38.320
purposes is the class name of
the entity that you're using,

00:12:38.320 --> 00:12:41.920
user info changes, validation predicates.

00:12:41.920 --> 00:12:44.960
They're very important to you,
but more at the writing phase of things.

00:12:44.960 --> 00:12:49.280
When we're reading stuff over to migrate,
we're okay with you having

00:12:49.280 --> 00:12:50.320
changed those things.

00:12:51.850 --> 00:12:52.240
What do we do?

00:12:52.240 --> 00:12:53.920
How do we tag the version?

00:12:54.940 --> 00:12:59.760
We simply create a hash
digest of your model elements.

00:12:59.760 --> 00:13:01.560
We pass them through a
SHA hashing algorithm.

00:13:04.420 --> 00:13:04.430
So you have...

00:13:04.580 --> 00:13:05.800
Here's version 1.0 of your model.

00:13:05.800 --> 00:13:07.000
You're calling it version 1.0.

00:13:07.000 --> 00:13:07.860
That's your string name.

00:13:07.860 --> 00:13:09.760
That's your way of
identifying the version.

00:13:09.760 --> 00:13:10.400
Great.

00:13:10.400 --> 00:13:12.140
We don't really do much with that.

00:13:12.140 --> 00:13:16.380
We pass it through the hashing algorithm
and we come up with a 32-byte number.

00:13:16.380 --> 00:13:18.960
Version 2 of the model,
we do the same and we put it

00:13:18.960 --> 00:13:22.180
through the algorithm and we
come up with a different number.

00:13:22.180 --> 00:13:24.990
Now,
those numbers don't spend time trying

00:13:24.990 --> 00:13:27.340
to give meaning to those numbers.

00:13:27.340 --> 00:13:30.150
They're really just a way for
us to quickly identify whether

00:13:30.150 --> 00:13:33.180
something is equivalent to
another version of your entity.

00:13:33.800 --> 00:13:38.620
So, for purposes of this presentation,
I'll be switching and using graphical

00:13:38.620 --> 00:13:42.520
symbols so that you can quickly
see that the recipes version,

00:13:42.520 --> 00:13:46.240
which used to be a triangle in 1.0,
something has changed significantly

00:13:46.240 --> 00:13:48.530
and it's now a square in version 2.0.

00:13:48.580 --> 00:13:51.820
So, that's what I'll be using.

00:13:51.820 --> 00:13:54.400
I said,
we don't really care about every single

00:13:54.400 --> 00:13:58.220
little change you did in your model
and let me talk you through that.

00:13:58.450 --> 00:14:00.060
Here's version 1.0 of your recipe.

00:14:00.060 --> 00:14:01.920
You have precedence, directions, name.

00:14:03.100 --> 00:14:06.020
So, we pass it through the
algorithm and we tag it as,

00:14:06.020 --> 00:14:09.460
oh, this recipe entity has
version green triangle.

00:14:11.500 --> 00:16:51.300
[Transcript missing]

00:16:54.820 --> 00:16:58.020
So in this, for this first demo,
I'm not going to actually

00:16:58.080 --> 00:16:59.680
execute anything yet in the app.

00:16:59.810 --> 00:17:01.740
We're just versioning your models.

00:17:01.740 --> 00:17:04.630
Here's Core Data application.

00:17:04.920 --> 00:17:07.040
We have the simple recipes model.

00:17:07.040 --> 00:17:09.300
It's still in the old format,
XE Data Model.

00:17:09.300 --> 00:17:10.750
That's what you would get in Tiger.

00:17:10.960 --> 00:17:13.560
If we open it,
we see that we have version

00:17:13.560 --> 00:17:15.240
1.0 of your recipes model.

00:17:15.240 --> 00:17:17.900
We only have three entities.

00:17:18.050 --> 00:17:18.680
It's fine.

00:17:18.680 --> 00:17:24.340
Let me compile this just so that
our Core Data newbies can see what

00:17:24.440 --> 00:17:26.720
happens at the file system level.

00:17:26.720 --> 00:17:33.930
So if we look at the
build directory and I...

00:17:34.320 --> 00:17:37.300
Open the package.

00:17:37.440 --> 00:17:40.530
This is what happens in Tiger.

00:17:42.020 --> 00:17:46.740
An Xe data model is compiled
at runtime into a .mom file.

00:17:46.980 --> 00:17:47.640
That's what happens.

00:17:47.640 --> 00:17:51.020
So what's new?

00:17:51.340 --> 00:17:53.840
Now we say, "Okay,
we want to improve our application.

00:17:53.840 --> 00:17:57.420
Let's go, let's start working on version
2.0." We can't just go in here and

00:17:57.420 --> 00:18:00.770
change this model because we would
lose the original model and then we

00:18:00.770 --> 00:18:03.320
wouldn't know how to open the store.

00:18:03.530 --> 00:18:05.560
So in the past,
you would have had to make copies of

00:18:05.560 --> 00:18:07.330
your model and manage them yourself.

00:18:07.410 --> 00:18:09.260
No longer, you no longer have to do that.

00:18:09.260 --> 00:18:14.040
You just select the model,
you go up into the menu here, Data Model,

00:18:14.040 --> 00:18:15.680
Add Model Version.

00:18:16.210 --> 00:18:23.400
We now convert your model into a
group with a .d extension at the end.

00:18:23.400 --> 00:18:27.100
We now have your original model
and we create a copy of that

00:18:27.100 --> 00:18:29.700
model and that's model version 2.

00:18:29.700 --> 00:18:31.460
You'll notice this green icon here.

00:18:31.460 --> 00:18:34.230
That indicates what your current
model is when you actually

00:18:34.240 --> 00:18:35.660
launch your application.

00:18:35.770 --> 00:18:38.200
In this case, we want to make version
2 our current model.

00:18:38.200 --> 00:18:43.440
So we'll go up to the menu here and
we once again see that we have a new

00:18:43.510 --> 00:18:48.090
menu item here where we can set the
current model and the icon changes.

00:18:48.200 --> 00:18:51.960
So this is how you create
version models within the tool.

00:18:52.300 --> 00:18:54.200
So let's go in here and
start doing changes.

00:18:54.200 --> 00:18:55.200
I'm not going to do everything here.

00:18:55.200 --> 00:18:58.700
I'm just going to do one
of the simple changes.

00:18:58.700 --> 00:19:00.200
Remember the recipes I said.

00:19:00.200 --> 00:19:03.030
We had a typo so it's no longer recipes,
it's recipe.

00:19:03.270 --> 00:19:05.540
We save.

00:19:06.110 --> 00:19:12.100
Now let me build what happened
within the file system.

00:19:12.100 --> 00:19:14.380
Oh wait, I have to...

00:19:14.560 --> 00:19:18.840
Let me, just to not confuse you,
let me clean all so that the

00:19:18.840 --> 00:19:22.320
on version side of things is
cleaned out and then we build it.

00:19:22.420 --> 00:19:25.100
And then we build.

00:19:25.160 --> 00:19:27.740
So we go back into our--

00:19:30.660 --> 00:19:35.780
- To our output directory, here we go,
we compiled our output.

00:19:38.500 --> 00:19:41.520
We look at the content.

00:19:41.620 --> 00:19:42.760
Resources.

00:19:42.760 --> 00:19:44.860
You'll now see that we
no longer have a .mom,

00:19:44.860 --> 00:19:46.960
we have a .momd.

00:19:47.060 --> 00:19:50.890
Inside of it, you still have .moms,
they're still the same format.

00:19:51.000 --> 00:19:53.920
We now have version one of your model,
version two of your model,

00:19:53.980 --> 00:19:59.150
and now there's this Info.plist in
there that gives us runtime information

00:19:59.150 --> 00:20:01.880
to properly process those models.

00:20:07.290 --> 00:20:09.690
We can see that the Chef,
we didn't touch Chef,

00:20:09.800 --> 00:20:11.760
so the hash is the same.

00:20:11.760 --> 00:20:13.840
It begins with an 8433.

00:20:14.070 --> 00:20:15.870
Here we have 8433.

00:20:15.990 --> 00:20:18.230
We touched the ingredient,
so the hash is different.

00:20:18.250 --> 00:20:22.290
FA something here and here is
now 3D something different.

00:20:22.300 --> 00:20:29.300
For the five of you that are still awake,
you'll notice that recipe also changed.

00:20:29.300 --> 00:20:31.300
Why did recipe change?

00:20:31.300 --> 00:20:34.300
Why is this hash
different from this hash?

00:20:34.570 --> 00:20:38.910
This is where the subtleties
of versioning start to

00:20:38.910 --> 00:20:41.290
rear their ugly heads.

00:20:41.800 --> 00:20:43.000
We changed recipe, right?

00:20:43.000 --> 00:20:46.260
But Core Data manages a
complex object graph for you.

00:20:46.260 --> 00:20:48.940
I'm sorry,
we changed the recipe field here,

00:20:48.940 --> 00:20:53.520
but recipe, the entity,
is related to ingredient,

00:20:53.520 --> 00:20:59.790
and it also has an inverse
relationship on the recipe entity.

00:20:59.860 --> 00:21:04.730
So even though the change was only here,
from your point of view, the model,

00:21:04.730 --> 00:21:09.060
this entity was also affected because its
inverse relationship is now different.

00:21:09.060 --> 00:21:13.000
So that's why the hash
changed in the recipe entity.

00:21:14.570 --> 00:21:15.740
So that's the end of the first model.

00:21:15.810 --> 00:21:17.880
Could we go back to slides?

00:21:17.910 --> 00:21:20.540
So that's how you do versioning
now at the tool level.

00:21:22.710 --> 00:21:25.560
What do we do with this
information at runtime?

00:21:25.560 --> 00:21:29.110
It's fairly straightforward.

00:21:29.260 --> 00:21:34.430
We have a model, we have a store,
we now know that the model

00:21:34.430 --> 00:21:36.190
has versioning information.

00:21:36.340 --> 00:21:39.600
When we save out your
instances to the store,

00:21:39.700 --> 00:21:42.760
we simply store the versioning
information in the store's metadata.

00:21:42.760 --> 00:21:46.360
People not familiar with Core Data,
each store,

00:21:46.360 --> 00:21:48.650
think of it as having a header.

00:21:48.800 --> 00:21:52.060
There's a little special area in the
store where we can store additional

00:21:52.060 --> 00:21:54.220
information about your data.

00:21:54.340 --> 00:21:57.640
We now have a new key,
NSStoreVersionHashKey.

00:21:57.640 --> 00:22:00.010
If you look at that key,
you have a dictionary with all

00:22:00.010 --> 00:22:05.410
the versioning information of the
entities that live in your store.

00:22:06.800 --> 00:22:08.930
So what do we do with this?

00:22:09.010 --> 00:22:12.200
We detect version skew,
version incompatibilities.

00:22:12.280 --> 00:22:14.810
It all happens in the add
persistence store with type method.

00:22:14.900 --> 00:22:15.780
This hasn't changed.

00:22:15.860 --> 00:22:17.740
This is the persistence
store coordinator.

00:22:17.740 --> 00:22:19.420
When you're setting up
the Core Data Stack,

00:22:19.420 --> 00:22:21.410
you tell us to add a persistence store.

00:22:21.560 --> 00:22:23.740
You give us a URL to the store.

00:22:23.780 --> 00:22:25.200
You give us a model.

00:22:25.460 --> 00:22:28.040
We check the versioning information.

00:22:28.040 --> 00:22:28.870
No problem.

00:22:28.870 --> 00:22:30.180
We can open it.

00:22:30.300 --> 00:22:36.200
But, if you had given us a pointer to a
1.0 version of your store and at the

00:22:36.410 --> 00:22:40.300
same time a version 2.0 of your model,
we detect that there's a

00:22:40.300 --> 00:22:43.440
version skew there because the
version hashes don't match.

00:22:43.440 --> 00:22:46.590
So this is how we can now tell
that there's a problem and that you

00:22:46.900 --> 00:22:48.650
need to do some sort of migration.

00:22:51.820 --> 00:22:55.090
The default behavior at this
point is to report an error.

00:22:55.090 --> 00:22:56.700
We don't just migrate stuff for you.

00:22:56.700 --> 00:22:59.580
We do if you tell us with
a special store option,

00:22:59.580 --> 00:23:02.590
but by default,
an error still comes up that says, "Look,

00:23:02.600 --> 00:23:04.000
there's an incompatibility here.

00:23:04.000 --> 00:23:05.740
You gave us a store.

00:23:05.740 --> 00:23:06.500
You gave us a model.

00:23:06.500 --> 00:23:09.600
We don't really know how to work with
those two things." So that's the end

00:23:09.710 --> 00:23:13.330
of the first third of our talk where
we're talking about the version,

00:23:13.420 --> 00:23:16.400
the official way of
versioning models and stores.

00:23:18.130 --> 00:23:19.900
Fine, we have version skew.

00:23:19.900 --> 00:23:20.760
What do we want to do now?

00:23:20.760 --> 00:23:23.100
We want to do migration.

00:23:23.170 --> 00:23:26.800
So we want to go from version
1 to version 2 of your data.

00:23:26.890 --> 00:23:29.960
So it's the data that
needs to be migrated.

00:23:30.010 --> 00:23:32.140
You've modified your store.

00:23:32.190 --> 00:23:35.440
I'm sorry, your model is in version 2.0.

00:23:35.490 --> 00:23:42.190
Again, your customer's data or your own
data is still stuck in version 1.0.

00:23:42.600 --> 00:23:45.900
And we need to find a way to get
those those data from one to two.

00:23:45.900 --> 00:23:47.990
How would you have done this in the past?

00:23:48.210 --> 00:23:51.790
And the reason I'm talking about how
we how you would have done this in

00:23:51.790 --> 00:23:55.750
the past is because we didn't really
invent a new way of doing migration.

00:23:55.750 --> 00:23:59.190
It's still there isn't like this
sophisticated magic going on.

00:23:59.270 --> 00:24:01.650
We we do what you would
have done in the past,

00:24:01.650 --> 00:24:03.250
except that we do it for you.

00:24:03.260 --> 00:24:06.140
So let me review what you
would have done in the past.

00:24:06.140 --> 00:24:09.730
What you would have done is that
you you set up two core data stacks,

00:24:09.730 --> 00:24:12.480
one for the source and
one for the source.

00:24:12.500 --> 00:24:13.960
And one for the destination.

00:24:13.980 --> 00:24:17.380
And you simply take your data from
here and then you write code and

00:24:17.380 --> 00:24:21.240
then you can you transform your data
and put it in the in the new stack.

00:24:21.240 --> 00:24:22.440
So that's really all it is.

00:24:22.440 --> 00:24:25.190
It's just a bunch of loops from
fetch all of these things and create

00:24:25.190 --> 00:24:27.000
everything on the on the destination.

00:24:27.000 --> 00:24:30.710
The downside is that this was hard
for you guys because we didn't

00:24:30.710 --> 00:24:32.450
do any of it for you in Tiger.

00:24:32.450 --> 00:24:34.140
So you had to do all of this.

00:24:34.140 --> 00:24:37.290
You had to set up the stacks
and fetch everything and do

00:24:37.290 --> 00:24:39.240
all of your migration logic.

00:24:39.240 --> 00:24:42.800
There's actually a Tiger based example.

00:24:42.800 --> 00:24:44.530
If you if you look at
the core recipes example,

00:24:44.530 --> 00:24:48.740
which you can download from ADC,
one of the subfolders of the core

00:24:48.740 --> 00:24:52.180
recipes example in the Tiger timeframe
is how you would do the hard,

00:24:52.460 --> 00:24:55.460
how you would do the
migration in the Stone Age.

00:24:55.460 --> 00:24:57.420
So you would have something like this.

00:24:57.420 --> 00:25:00.960
You would have a you have a little
migration algorithm there where this is

00:25:00.960 --> 00:25:02.790
all code you would have had to write.

00:25:02.960 --> 00:25:06.030
You have to specify methods where
I've years where I'm normalizing

00:25:06.030 --> 00:25:09.300
my cuisine and here's where I'm
migrating my recipes and my chefs.

00:25:09.300 --> 00:25:12.680
And you might say, well, Miguel,
that's not so so bad.

00:25:12.720 --> 00:25:14.140
Really?

00:25:17.960 --> 00:25:19.700
That's not the Core Recipes application.

00:25:19.700 --> 00:25:21.700
That's the migration code.

00:25:21.730 --> 00:25:23.900
The Core Recipes application
is a whole different folder,

00:25:23.900 --> 00:25:24.740
a whole different code base.

00:25:24.740 --> 00:25:28.910
That's just the code that you would
have had to write to set up your stacks,

00:25:29.150 --> 00:25:32.110
fetch everything,
invoke your migration logic,

00:25:32.110 --> 00:25:35.340
and basically, you do everything by hand.

00:25:35.770 --> 00:25:38.800
If you had attempted
to do this in the past,

00:25:38.800 --> 00:25:40.870
you would have scratched
your head and said,

00:25:40.870 --> 00:25:43.380
why can't you guys make this easier?

00:25:43.380 --> 00:25:47.080
There are certain kinds of changes
that should be no-brainers,

00:25:47.080 --> 00:25:47.720
right?

00:25:47.720 --> 00:25:52.850
I'm adding a field, I'm dropping a field,
I'm making it to one and to many,

00:25:52.850 --> 00:25:54.640
that's not a big deal.

00:25:54.640 --> 00:25:56.140
I'm changing a typo here.

00:25:56.140 --> 00:25:59.710
So these kinds of changes,
why do I need to write all that code?

00:25:59.740 --> 00:26:05.320
From the point of view of my data,
it's migrating as is.

00:26:05.420 --> 00:26:09.460
I'm not doing any transformations,
I'm just simply changing something,

00:26:09.460 --> 00:26:10.920
a simple change in my model.

00:26:10.920 --> 00:26:15.610
Why don't I just focus on my
custom logic of when I want to

00:26:15.610 --> 00:26:18.680
do specific kinds of migration?

00:26:18.680 --> 00:26:20.370
For example, I'm splitting up fields.

00:26:20.400 --> 00:26:24.870
Okay, at that point I know that the
Core Data Engineers won't really know

00:26:24.870 --> 00:26:28.850
how exactly I want to split up my fields,
so let me write my custom code for that.

00:26:28.860 --> 00:26:31.690
Or I'm normalizing my
cuisine in a special way,

00:26:31.690 --> 00:26:32.520
so I'll do.

00:26:32.520 --> 00:26:35.240
So why don't I just
write this kind of code?

00:26:35.240 --> 00:26:38.030
For example, for the splitting up of
the first and last name,

00:26:38.040 --> 00:26:41.990
instead of writing that whole hundreds
of lines of code we just scrolled past,

00:26:42.180 --> 00:26:44.970
why can't you just have your
specific method that splits up

00:26:45.110 --> 00:26:47.400
the first name and last name?

00:26:47.900 --> 00:26:51.230
And as you've figured out by now,
that's what we do in Leopard.

00:26:51.340 --> 00:26:52.600
That's the new hotness.

00:26:52.750 --> 00:26:55.450
So model driven migration.

00:26:55.450 --> 00:26:58.930
We do it for you with a model.

00:26:59.200 --> 00:27:04.610
There's a new plugin within Xcode
where you can now specify a mapping

00:27:04.610 --> 00:27:07.370
model to take you from A to B.

00:27:07.460 --> 00:27:10.720
And we take care of all that
cumbersome work that you saw scrolled

00:27:10.720 --> 00:27:13.560
by in the last couple slides.

00:27:13.670 --> 00:27:16.480
We detect the version skew,
that there's incompatibility.

00:27:16.480 --> 00:27:18.420
We manage the Core Data stacks for you.

00:27:18.420 --> 00:27:21.260
We create, we move stuff from the
source to the destination.

00:27:21.260 --> 00:27:22.600
We recreate the relationships.

00:27:22.600 --> 00:27:27.000
That's the key part of the migration.

00:27:27.530 --> 00:27:29.950
But of course you know that
when we say we do everything

00:27:30.050 --> 00:27:33.200
for you with zero lines of code,
it's really not 100% true.

00:27:33.200 --> 00:27:35.820
You'll always end up writing
a little bit of code.

00:27:35.820 --> 00:27:38.210
So don't worry,
this is an extensible framework

00:27:38.220 --> 00:27:42.030
where you plug in your own logic.

00:27:42.160 --> 00:27:44.120
So the mapping model.

00:27:44.370 --> 00:27:49.680
The mapping model's role in life is
to indicate how you want to go from

00:27:49.680 --> 00:27:51.780
A to B without writing the code.

00:27:51.780 --> 00:27:54.160
It's much easier to go
into a tool and say,

00:27:54.170 --> 00:27:56.110
this field goes here,
this field goes here,

00:27:56.160 --> 00:27:58.150
This field goes here.

00:27:59.340 --> 00:28:02.140
We introduce a new class,
NS Mapping Model.

00:28:02.350 --> 00:28:06.080
If you're familiar with Core Data,
you know that our model hierarchy is

00:28:06.100 --> 00:28:08.950
something like NS Managed Object Model,
which is made up of

00:28:08.950 --> 00:28:11.920
NS Entity Descriptions,
NS Property Descriptions.

00:28:12.070 --> 00:28:14.530
We have a parallel hierarchy
now in the mapping world.

00:28:14.600 --> 00:28:17.960
We have NS Mapping Model,
which is made up of NS Entity

00:28:17.960 --> 00:28:21.080
Mappings and NS Property Mappings.

00:28:21.300 --> 00:28:24.600
So the mapping model contains
all of the entity mappings.

00:28:24.670 --> 00:28:28.600
So here's where the interesting
things start to happen.

00:28:28.620 --> 00:28:32.900
Entity Mappings is where you tell
us how you want to get from A to B.

00:28:32.900 --> 00:28:37.810
The two main elements in an entity
mapping are the Source Entity

00:28:38.130 --> 00:28:39.400
and the Destination Entity.

00:28:39.480 --> 00:28:42.770
Where do you want us to fetch stuff
from and what do you want us to create

00:28:42.960 --> 00:28:45.100
with the things you are fetching?

00:28:45.250 --> 00:28:49.560
So let's look at the mapping model that
we would create at the entity mapping

00:28:49.560 --> 00:28:52.000
level for the example we're following.

00:28:52.100 --> 00:28:57.900
So we would have the Source and the
Destination for entity mappings.

00:28:57.900 --> 00:29:02.140
to be showing up in that table
represents an entity mapping.

00:29:03.110 --> 00:29:04.740
We want to map chefs to chefs.

00:29:05.010 --> 00:29:05.670
That didn't change.

00:29:05.760 --> 00:29:08.040
That's pretty straightforward.

00:29:08.140 --> 00:29:10.330
Ingredients to ingredients.

00:29:10.510 --> 00:29:12.480
Recipes to recipes.

00:29:12.590 --> 00:29:14.250
Three entity mappings.

00:29:14.360 --> 00:29:16.600
What happens with cuisines?

00:29:17.250 --> 00:29:18.780
Any guesses?

00:29:18.830 --> 00:29:19.840
Destination?

00:29:19.920 --> 00:29:21.320
Cuisine, right?

00:29:21.390 --> 00:29:23.270
What's the source?

00:29:24.530 --> 00:29:24.980
Recipe.

00:29:24.980 --> 00:29:27.130
Because that's where my data lives.

00:29:27.130 --> 00:29:30.030
You're normalizing cuisines,
so you're still asking

00:29:30.310 --> 00:29:31.440
us to fetch recipes.

00:29:31.440 --> 00:29:34.290
Once we fetch recipes,
there's something going on

00:29:34.290 --> 00:29:37.810
with those recipes that you
were not creating cuisines.

00:29:39.530 --> 00:29:40.710
Recipe.

00:29:40.710 --> 00:29:44.910
Because that's where my data lives.

00:29:45.010 --> 00:29:50.600
Once we fetch recipes,
there's something going on

00:29:50.600 --> 00:29:57.230
with those recipes that you
were not creating cuisines.

00:29:57.900 --> 00:30:20.900
[Transcript missing]

00:30:21.710 --> 00:30:26.060
So you would say,
I want you to fill the name

00:30:26.100 --> 00:30:28.460
field with this expression value.

00:30:28.460 --> 00:30:31.600
Since you already have the source
object when you're migrating,

00:30:31.600 --> 00:30:34.040
I want you to just use key
value coding and go to the

00:30:34.190 --> 00:30:36.220
source object and get its name.

00:30:36.220 --> 00:30:38.270
And that's what I want in my destination.

00:30:38.270 --> 00:30:40.260
That's the property mapping.

00:30:43.370 --> 00:30:44.340
Rating.

00:30:44.390 --> 00:30:46.860
Rating is a new field,
if you guys remember.

00:30:46.890 --> 00:30:50.000
So there's nothing really-- there's
no data in your source to pull over.

00:30:50.000 --> 00:30:51.340
So you leave it blank.

00:30:51.430 --> 00:30:53.920
We just use the default value.

00:30:54.890 --> 00:30:58.160
This is the tricky one in
property mapping relationships.

00:30:58.240 --> 00:31:02.340
The first half is very similar,
very similar to the attribute mappings.

00:31:02.420 --> 00:31:04.790
There's a key path there, right?

00:31:04.960 --> 00:31:07.660
Go to the source and get its chef.

00:31:09.990 --> 00:31:12.490
There's one other thing we
need to do with relationships.

00:31:12.530 --> 00:31:15.290
And for here,
let me have a little parenthesis

00:31:15.290 --> 00:31:18.060
here for those people that are
not familiar with Core Data,

00:31:18.150 --> 00:31:19.100
why this is an issue.

00:31:19.100 --> 00:31:22.470
Core Data manages an
object graph for you.

00:31:24.290 --> 00:31:29.120
If you were at last night's presentation,
we managed that object graph by

00:31:29.120 --> 00:31:32.500
keeping all of your objects inside
an instance of something which we're

00:31:32.500 --> 00:31:34.010
calling the managed object context.

00:31:34.150 --> 00:31:38.260
So that's where,
as long as your instances are

00:31:38.260 --> 00:31:41.990
inside a managed object context,
we know how they're all

00:31:41.990 --> 00:31:43.780
related to each other.

00:31:44.240 --> 00:31:46.540
There's a little bit of a trick
that you have to be aware when

00:31:46.540 --> 00:31:48.860
you're doing Core Data applications.

00:31:48.860 --> 00:31:52.070
You can't just take an object
from a managed object context

00:31:52.290 --> 00:31:54.930
and put it in another context.

00:31:55.170 --> 00:31:56.790
You can't just say, oh, here's one.

00:31:56.820 --> 00:31:58.260
Let me insert it over here.

00:31:58.260 --> 00:32:00.950
Just by the actual instance,
you can't just insert it like that.

00:32:00.960 --> 00:32:04.080
Because that object is related
to a whole bunch of other things.

00:32:04.080 --> 00:32:05.720
It could have pending changes.

00:32:05.720 --> 00:32:08.840
And there's a lot of sophisticated
stuff we're doing for you.

00:32:08.860 --> 00:32:10.920
So you can't really just take it over.

00:32:10.920 --> 00:32:13.520
You can do it,
but you have to do it in a different way.

00:32:13.520 --> 00:32:17.560
You have to recreate an instance
of that object in the new context.

00:32:17.560 --> 00:32:20.970
Or you have to get the ID for the
object and tell the context saying,

00:32:20.970 --> 00:32:25.060
go to the store and get the equivalent
instance of that object in the store.

00:32:25.140 --> 00:32:29.650
So basically, just remember,
you can't just take an instance from the

00:32:29.650 --> 00:32:31.870
source and stick it into the destination.

00:32:31.870 --> 00:32:33.940
There is a little bit of
transformation involved.

00:32:34.030 --> 00:32:37.290
So for recipes, we can't just take a key
path that you give us.

00:32:37.290 --> 00:32:41.480
We also have to know, okay,
you're telling us to migrate

00:32:41.480 --> 00:32:45.880
a chef and bind it in this
particular property mapping.

00:32:45.880 --> 00:32:47.960
But when was this chef created?

00:32:47.960 --> 00:32:51.160
And what did I create when
I was migrating chefs?

00:32:51.250 --> 00:32:54.470
So we also need to know the name of
the mapping that was used to create the

00:32:54.470 --> 00:32:55.080
chef so that we can migrate the chef.

00:32:55.100 --> 00:32:57.420
So we can take that chef instance
and create the equivalent

00:32:57.420 --> 00:32:58.980
instance over in the destination.

00:32:58.980 --> 00:33:02.090
This is probably one of the
toughest points in the migration

00:33:02.090 --> 00:33:04.300
architecture that we're presenting.

00:33:04.300 --> 00:33:07.070
We'll be going over this
again throughout the example.

00:33:07.070 --> 00:33:09.590
So this is just the first
time I go through this.

00:33:09.590 --> 00:33:13.790
Property mapping is the
runtime class that does this.

00:33:15.180 --> 00:33:20.470
Let me show you a demo of how
you would create a mapping model.

00:33:22.510 --> 00:33:26.880
So again, we're not yet ready to
migrate our application.

00:33:26.880 --> 00:33:33.890
We're going into our
second of three demos.

00:33:34.910 --> 00:33:37.200
This is where we create
the mapping model.

00:33:37.300 --> 00:33:39.680
So let's review where we are.

00:33:39.700 --> 00:33:41.770
We now have

00:33:41.890 --> 00:33:46.460
our version core data model
that we did in the first demo.

00:33:46.460 --> 00:33:48.600
You'll notice that I opened
a different project,

00:33:48.600 --> 00:33:51.130
not the one I was originally
working in version 1 of the,

00:33:51.230 --> 00:33:52.840
in the first demo.

00:33:52.840 --> 00:33:55.140
The only trick I'm doing there
is that I already have all

00:33:55.140 --> 00:33:56.440
of the changes for the model.

00:33:56.440 --> 00:34:00.220
I didn't want to sit in here and type
all of these things in front of you.

00:34:00.220 --> 00:34:03.670
So the only change in this
project is that we have the

00:34:04.140 --> 00:34:06.330
completed version 2 of the model.

00:34:06.340 --> 00:34:07.740
Right.

00:34:07.740 --> 00:34:11.160
So we're ready to migrate,
but we want to create a mapping model.

00:34:11.300 --> 00:34:16.050
If you go to new file,
you will find a new file type under

00:34:16.060 --> 00:34:17.940
the design group mapping model.

00:34:20.980 --> 00:34:27.000
Recipe,
so let's call this Recipes from 1 to 2.

00:34:27.500 --> 00:34:30.120
This is probably where you'll have
to think a little bit as how you

00:34:30.120 --> 00:34:32.670
want to name your mapping models.

00:34:33.000 --> 00:34:35.620
We have a new assistant where
we allow you to look for your

00:34:35.620 --> 00:34:37.800
source and destination models.

00:34:37.980 --> 00:34:39.610
So here we are.

00:34:40.090 --> 00:34:41.400
Here's my source, right?

00:34:41.400 --> 00:34:43.300
Version 1.0 of my recipes model.

00:34:43.300 --> 00:34:45.240
And here's my destination.

00:34:45.440 --> 00:34:47.000
Click Finish.

00:34:47.170 --> 00:34:50.590
And we create the mapping model for you.

00:34:51.230 --> 00:34:54.600
So, we do, you don't even have to
do everything by hand.

00:34:54.600 --> 00:34:57.100
We do, we know your source,
we know your destination,

00:34:57.100 --> 00:35:00.330
we look at them and we do our
best effort to create the mapping

00:35:00.330 --> 00:35:02.100
model that we think you need.

00:35:02.300 --> 00:35:04.410
So,

00:35:04.630 --> 00:35:06.830
Here is the source and
the destination columns.

00:35:06.860 --> 00:35:08.440
Here's the source and the destination.

00:35:08.440 --> 00:35:10.480
Those are the tables I showed
in my previous slide,

00:35:10.520 --> 00:35:11.000
right?

00:35:11.000 --> 00:35:12.840
We're going from chef to chef.

00:35:12.910 --> 00:35:14.540
We're going from recipe to recipe.

00:35:14.950 --> 00:35:17.940
We're going from
ingredient to ingredient.

00:35:18.010 --> 00:35:20.700
We don't know what you
want to do with cuisine.

00:35:20.800 --> 00:35:23.580
So we just said we're going
from nothing to cuisine.

00:35:23.660 --> 00:35:26.170
But you would come in here and
change your mapping model and say,

00:35:26.170 --> 00:35:28.320
you know,
I'm really going from recipe to cuisine.

00:35:28.320 --> 00:35:30.880
That's where you start
modifying your mapping model.

00:35:32.570 --> 00:35:35.630
You'll notice that we also
pre-populated all of the things

00:35:35.630 --> 00:35:37.200
that we could figure out for you.

00:35:37.200 --> 00:35:39.500
For example,
in the recipe to recipe mapping,

00:35:39.500 --> 00:35:41.320
by the way, we're naming the mappings.

00:35:41.320 --> 00:35:43.970
Not only do they have a
source and a destination,

00:35:43.970 --> 00:35:45.500
we also give them a name.

00:35:45.500 --> 00:35:48.310
It's important to use their
name when we're using them

00:35:48.330 --> 00:35:50.100
for relationship mappings.

00:35:50.100 --> 00:35:52.630
So the simple name is recipe to recipe.

00:35:52.720 --> 00:35:54.780
So here's the recipe to recipe mapping.

00:35:56.160 --> 00:35:58.540
And we figured out that
you had directions in 1.0,

00:35:58.540 --> 00:36:01.380
so we're assuming that you wanted
to migrate it to directions

00:36:01.430 --> 00:36:02.700
in 2.0 because you have it.

00:36:02.780 --> 00:36:04.640
Name is there.

00:36:04.640 --> 00:36:07.400
Rating, we didn't find it in the source,
so we leave it blank,

00:36:07.400 --> 00:36:10.270
but that's okay because we know
that rating is a new field.

00:36:11.570 --> 00:36:14.470
Chef, you probably want to migrate chef.

00:36:14.470 --> 00:36:18.320
Ingredients,
we're actually doing more with chef here.

00:36:18.420 --> 00:36:21.560
I'm sorry,
it's in the other relationship.

00:36:21.560 --> 00:36:25.580
Ingredients, we're migrating your,
we found amount and name in the source.

00:36:26.400 --> 00:36:28.840
In the destination,
we didn't find recipe.

00:36:28.840 --> 00:36:30.290
Do you guys remember why?

00:36:30.290 --> 00:36:34.050
Because recipe used to be recipes
in version 1.0 of your model.

00:36:34.050 --> 00:36:37.310
So you would say, oh,
in my ingredient to ingredient mapping,

00:36:37.310 --> 00:36:40.060
the key path, well,
you would tell us the key path

00:36:40.060 --> 00:36:43.700
that I want you to reverse is,
I want you to go to the source.

00:36:45.720 --> 00:36:47.800
and get the objects from the recipes.

00:36:47.820 --> 00:36:52.500
You as developers would know that
that exists in your one of the model.

00:36:52.670 --> 00:36:55.420
So that's the key path that
you want us to traverse.

00:36:56.010 --> 00:36:57.820
But again,
this is a relationship mapping.

00:36:57.820 --> 00:37:00.360
This is where the tricky
part needs to happen.

00:37:00.360 --> 00:37:03.040
You also need to tell us, okay,
we're in the source,

00:37:03.060 --> 00:37:05.780
we find your recipes,
what mapping was used

00:37:05.780 --> 00:37:06.960
to create those recipes?

00:37:06.960 --> 00:37:11.900
And you have to tell us, oh,
the recipes to recipes mapping

00:37:12.100 --> 00:37:14.820
is the one that I would have
used to create those recipes.

00:37:14.820 --> 00:37:17.780
So as long as you navigate that
key path and then you use that

00:37:17.780 --> 00:37:21.180
mapping to do the transformation,
we'll be okay.

00:37:21.180 --> 00:37:23.900
So those are the kinds of things
you would tell us in the model.

00:37:23.900 --> 00:37:27.680
So the point of this
demo is that you set it,

00:37:27.720 --> 00:37:31.580
you just point the new assistant
to the source and the destination,

00:37:31.720 --> 00:37:33.390
and we create a mapping model for you.

00:37:33.540 --> 00:37:36.470
So that's the end of the second demo.

00:37:36.550 --> 00:37:39.070
Can we go back to slides, please?

00:37:42.600 --> 00:37:51.640
So we're done with all of the
basics we need to do the migration.

00:37:51.740 --> 00:37:53.520
So are you still with me?

00:37:53.520 --> 00:37:57.080
Are you following this in terms
of where we're coming from?

00:37:57.080 --> 00:37:58.240
We have all of the basics.

00:37:58.240 --> 00:38:01.130
Now I'm ready to tell you how
we do the migration for you.

00:38:01.280 --> 00:38:04.200
But we needed to tell you how
we do versioning first and how

00:38:04.200 --> 00:38:05.940
you're creating the mapping model.

00:38:05.970 --> 00:38:09.170
Does this still look
pretty easy up to now?

00:38:09.180 --> 00:38:10.690
Yeah?

00:38:14.180 --> 00:38:17.440
So let's put it all together.

00:38:17.490 --> 00:38:19.040
Let's bootstrap the migration.

00:38:19.040 --> 00:38:22.480
We're at the point where we're
going to start the migration.

00:38:22.980 --> 00:38:25.420
Again, we have,
you gave us a model which is

00:38:25.420 --> 00:38:28.650
a new version of your schema,
but your data is in the

00:38:28.650 --> 00:38:29.820
old version of the schema.

00:38:29.820 --> 00:38:31.220
So we have those two things.

00:38:31.220 --> 00:38:32.690
This is the third time I say this.

00:38:33.920 --> 00:38:40.900
We need to find the source model that
was used to access your original store.

00:38:40.900 --> 00:38:42.900
We need to find that because we
haven't changed that requirement.

00:38:42.900 --> 00:38:47.650
We still need to access a store
with the right version of the model.

00:38:47.650 --> 00:38:49.500
We're not doing any magic there.

00:38:49.500 --> 00:38:53.600
We still need to have that model version
that you used to create your store.

00:38:53.600 --> 00:38:54.680
So we need to find that.

00:38:56.550 --> 00:38:58.320
You're giving us a mapping model.

00:38:58.320 --> 00:39:01.360
We need to find that somewhere in
your resources in your application.

00:39:01.390 --> 00:39:04.180
Oh, I forgot to, in the demo,
I should have compiled

00:39:04.180 --> 00:39:05.560
that mapping model.

00:39:05.560 --> 00:39:07.120
I'll do it in demo three.

00:39:07.120 --> 00:39:09.430
When you compile the
mapping model at runtime,

00:39:09.430 --> 00:39:12.010
the extension at development
time is XC mapping,

00:39:12.140 --> 00:39:15.540
and at runtime it becomes CDM,
Core Data Mapping Model.

00:39:15.540 --> 00:39:17.180
So that's the runtime implementation.

00:39:17.180 --> 00:39:20.350
So we have the mapping model,
and we also have the

00:39:20.660 --> 00:39:24.880
destination URL where you want
us to migrate your data to.

00:39:24.880 --> 00:39:27.000
So this is the bootstrapping
side of things.

00:39:27.010 --> 00:39:28.550
This is what we've talked about.

00:39:30.390 --> 00:39:34.300
We take all of these elements and
we initialize a migration manager.

00:39:34.300 --> 00:39:37.300
This is our class that's
going to do the work for you.

00:39:37.300 --> 00:39:40.290
So the migration manager
needs to know source model,

00:39:40.290 --> 00:39:44.120
source store, destination model,
destination store, and the mapping model.

00:39:44.120 --> 00:39:46.300
And then we can do the magic.

00:39:46.300 --> 00:39:48.300
We can do the migration.

00:39:48.300 --> 00:39:54.290
We're finally ready to explain
to you the migration details.

00:39:55.280 --> 00:39:58.200
We do it in three passes.

00:39:58.230 --> 00:40:01.940
First pass,
we go into your source and we create

00:40:02.420 --> 00:40:06.280
all of the destination instances
and we fill in their attributes

00:40:06.660 --> 00:40:08.900
because we have their sources.

00:40:08.900 --> 00:40:11.980
Why can't we create
the relationships yet?

00:40:11.980 --> 00:40:15.610
Because the instances aren't
there in the destination yet,

00:40:15.610 --> 00:40:15.960
right?

00:40:15.960 --> 00:40:19.910
We're migrating your sources so
we can't create destinations yet,

00:40:19.990 --> 00:40:22.940
relationships yet because we haven't
migrated all of your object graph yet.

00:40:22.940 --> 00:40:24.980
So that's why we have a first pass.

00:40:24.980 --> 00:40:29.110
In the second pass,
we again start at the beginning and now

00:40:29.110 --> 00:40:31.720
we recreate the relationships for you.

00:40:31.720 --> 00:40:34.670
And in the third pass,
we do a little bit of cleanup and we just

00:40:34.680 --> 00:40:38.120
save the store and do the validation.

00:40:38.120 --> 00:40:39.790
More detail into each
one of those passes.

00:40:41.840 --> 00:40:42.720
First pass.

00:40:42.740 --> 00:40:45.000
Before we start the first pass,
we need to take care of a

00:40:45.000 --> 00:40:47.330
couple of housekeeping things.

00:40:47.340 --> 00:40:51.890
We need to disable validation
rules because we're doing the

00:40:51.890 --> 00:40:53.920
migration in multiple passes.

00:40:53.920 --> 00:40:57.510
So there are going to be times
during the migration where the

00:40:57.530 --> 00:41:01.330
object graph is not going to be
consistent yet because we're not done.

00:41:01.340 --> 00:41:04.750
So within your model, we need to say, oh,
don't worry about validation rules

00:41:04.780 --> 00:41:06.540
just yet because we're migrating.

00:41:07.430 --> 00:41:10.740
The second thing we need to do
is we need to disable your custom

00:41:10.740 --> 00:41:14.000
classes in your source model so
that we don't have class conflicts.

00:41:14.000 --> 00:41:16.480
We now have two Core Data stacks, right,
that are coming up.

00:41:16.600 --> 00:41:19.620
So you probably are interested in
your destination level classes.

00:41:19.620 --> 00:41:22.680
So at the source model,
we're not really executing

00:41:22.680 --> 00:41:24.670
those classes within your app.

00:41:24.760 --> 00:41:30.240
We're simply using them to load the
original data and migrate it over.

00:41:30.240 --> 00:41:33.800
So we can disable the custom
classes that you're using for your

00:41:33.880 --> 00:41:36.050
entities and use managed objects.

00:41:37.190 --> 00:41:39.940
That's the housekeeping we need
to do before we start a migration.

00:41:39.940 --> 00:41:42.970
The migration, all we do is, again,
this is what you would

00:41:42.970 --> 00:41:44.270
have done in the past.

00:41:44.350 --> 00:41:46.240
We're not inventing a
new migration algorithm.

00:41:46.240 --> 00:41:47.920
It's just we now do the work for you.

00:41:47.920 --> 00:41:49.760
We fetch.

00:41:49.760 --> 00:41:52.380
We iterate through each one
of those mapping entities that

00:41:52.380 --> 00:41:53.900
you have in the model in order.

00:41:53.900 --> 00:41:57.240
This is one area where
ordering is important.

00:41:57.240 --> 00:42:00.740
You can specify the order
within the model editor.

00:42:00.740 --> 00:42:03.950
So we go down each one of those
mapping entities that you gave us.

00:42:04.000 --> 00:42:05.940
You told us the source.

00:42:06.780 --> 00:42:09.040
You go to the source and
fetch all of those instances.

00:42:09.190 --> 00:42:11.480
You told us the destination,
what you want us to create.

00:42:11.580 --> 00:42:14.400
So we create the
corresponding destinations.

00:42:14.440 --> 00:42:16.280
And you told us how to
populate the attributes.

00:42:16.280 --> 00:42:19.070
So we populate the attributes.

00:42:20.010 --> 00:42:22.900
This is a graphical example.

00:42:22.970 --> 00:42:27.830
Left hand side is the source stack,
right hand side is the destination stack.

00:42:28.010 --> 00:42:29.880
We start examining your mapping model.

00:42:29.960 --> 00:42:33.900
We find an entity mapping
that says chefs to chefs.

00:42:33.900 --> 00:42:38.520
We fetch all of the chefs.

00:42:39.680 --> 00:42:41.830
We iterate through each one
of those instances and create

00:42:41.910 --> 00:42:46.830
its corresponding destination
instance in the destination stack.

00:42:49.270 --> 00:42:52.380
That's it for the
Chef-to-Chef Entity Mapping.

00:42:52.440 --> 00:42:54.820
We now go on to the next
rule in your mapping model,

00:42:54.820 --> 00:42:56.470
recipe mapping.

00:42:56.640 --> 00:43:02.880
We fetch all of the recipes,
and we create the corresponding

00:43:02.880 --> 00:43:06.090
destination instance and
the destination stack.

00:43:06.650 --> 00:43:09.270
Don't be concerned when
I say we fetch all,

00:43:10.100 --> 00:43:14.320
because in the entity mapping,
you can indicate a filter.

00:43:14.320 --> 00:43:17.620
So you can have multiple entity
mappings for a particular instance.

00:43:17.620 --> 00:43:25.360
This is not the example we're following,
but say you're migrating a person

00:43:25.360 --> 00:43:29.380
class into employees and managers.

00:43:29.380 --> 00:43:31.800
So in version 1.0,
you had only a person table,

00:43:31.880 --> 00:43:34.480
and now you're migrating
to employees and managers.

00:43:34.720 --> 00:43:38.920
So you would have two mapping entities,
one where you would filter your

00:43:38.920 --> 00:43:42.020
people on their title that you have.

00:43:42.080 --> 00:43:46.400
So you are able to filter the
mapping entities on whatever

00:43:46.400 --> 00:43:49.040
predicate you want to indicate.

00:43:49.040 --> 00:43:50.940
I didn't show that in the model,
but that's allowed.

00:43:50.940 --> 00:43:53.440
So that's the end of the first pass.

00:43:53.440 --> 00:43:57.380
I know we have ingredients and cuisines,
but this is what illustrates

00:43:57.380 --> 00:43:59.100
the first pass migration.

00:43:59.100 --> 00:44:02.400
We'll be talking about how we're
migrating cuisines a little later on,

00:44:02.420 --> 00:44:03.920
but it's still part of this.

00:44:04.850 --> 00:44:08.040
We're done with the instances,
but they're not related.

00:44:08.040 --> 00:44:10.300
We need to go back to the mapping model.

00:44:10.300 --> 00:44:13.320
Again, iterate in order through
your mapping entities.

00:44:17.320 --> 00:44:18.380
At this point,
we're not looking at each source

00:44:18.380 --> 00:44:19.270
instance in your source stack.

00:44:19.360 --> 00:44:21.840
We've already created
destination instances.

00:44:21.870 --> 00:44:24.020
So we're looking at each--
I guess I should step this way,

00:44:24.020 --> 00:44:26.870
because this is destination for you guys,
right?

00:44:27.030 --> 00:44:30.170
So we're looking at each one of
the destination instances and say,

00:44:30.180 --> 00:44:33.030
OK, so I have a destination instance,
but it's unrelated.

00:44:33.260 --> 00:44:34.710
How do I relate it?

00:44:34.870 --> 00:44:37.950
So we navigate the key
path that you gave us,

00:44:38.070 --> 00:44:41.300
and we do the transformation
of that object.

00:44:41.380 --> 00:44:44.390
So this is how we recreate
the relationships.

00:44:44.470 --> 00:44:46.820
This is the end of our first pass.

00:44:46.830 --> 00:44:49.080
We have Chefs and Recipes
in the source stack,

00:44:49.080 --> 00:44:51.480
Chefs and Recipes in
the destination stack.

00:44:51.490 --> 00:44:55.740
This is the data you care about,
the new version of your data.

00:44:56.820 --> 00:44:58.440
But we know that that data is related.

00:44:58.630 --> 00:44:59.970
Chefs are related to recipes.

00:45:00.150 --> 00:45:05.830
So how would we relate this recipe,
that first sandwich up there?

00:45:05.940 --> 00:45:08.790
We can see, you guys are all very smart,
you know that it's related to that

00:45:09.010 --> 00:45:12.160
first chef that you see up there,
but how does the framework

00:45:12.200 --> 00:45:14.100
figure this out at runtime?

00:45:15.630 --> 00:45:19.460
We know what source
recipe that one came from.

00:45:19.460 --> 00:45:21.690
So we say, we have this recipe.

00:45:21.820 --> 00:45:23.850
Let's go to the source.

00:45:24.730 --> 00:45:27.470
Here is where we navigate the
key path that you gave us.

00:45:27.510 --> 00:45:31.630
Remember that you told us $source.chef?

00:45:32.400 --> 00:45:34.550
That's the key path navigation.

00:45:34.550 --> 00:45:37.850
Now we have an instance of a chef.

00:45:38.030 --> 00:45:39.670
This is where the trickiness happens.

00:45:39.960 --> 00:45:43.160
I told you that you can't just
take an instance of a chef and

00:45:43.160 --> 00:45:44.490
put it over in the destination.

00:45:44.490 --> 00:45:45.310
That doesn't work.

00:45:45.340 --> 00:45:50.110
We need to know what equivalent instance
was created for that particular chef.

00:45:50.200 --> 00:45:53.970
That was the second part
of data you gave us.

00:45:53.970 --> 00:45:56.860
What was the mapping you
were using to create chefs?

00:45:56.860 --> 00:45:58.640
Chef to chef.

00:46:00.520 --> 00:46:02.010
So we, oh yeah,
we're keeping track of these things.

00:46:02.010 --> 00:46:04.140
By the way, this is all,
we're keeping a bunch of lookup

00:46:04.140 --> 00:46:06.780
tables for you when we're
doing the first pass migration.

00:46:06.780 --> 00:46:09.260
Each time we're doing,
each time we're creating

00:46:09.260 --> 00:46:12.500
destination instances,
we're storing them and relating them

00:46:12.500 --> 00:46:16.490
in this lookup table so that we can
do this lookup during the second pass.

00:46:17.340 --> 00:46:20.070
So once we know,
at this point the framework knows,

00:46:20.070 --> 00:46:23.910
oh yeah, that instance of a recipe is
related to that instance of a chef.

00:46:23.910 --> 00:46:27.550
So now we can create the relationship
in your destination graph.

00:46:28.900 --> 00:46:29.500
So this is all we need to know.

00:46:29.500 --> 00:46:34.250
do for each one of the
instances that you have.

00:46:35.640 --> 00:46:37.840
Does that make sense?

00:46:37.890 --> 00:46:41.200
So that's the hard-- that's kind of
the tricky part of the migration.

00:46:41.200 --> 00:46:45.890
If you get this,
you should be OK with everything else.

00:46:46.140 --> 00:46:48.500
Third pass is just sanity check.

00:46:48.500 --> 00:46:51.770
You might remember that we
disabled the validation rules,

00:46:51.790 --> 00:46:53.800
but now everything's there,
everything's related,

00:46:53.800 --> 00:46:55.020
so we can reintroduce them.

00:46:55.020 --> 00:46:58.000
And we can save your store
and it's ready for you to use.

00:47:00.590 --> 00:47:02.100
That's what we do.

00:47:02.190 --> 00:47:04.740
So this is the job
security part of the talk.

00:47:04.840 --> 00:47:06.180
What do you guys do, right?

00:47:06.180 --> 00:47:09.780
We don't want to leave
you guys with no jobs.

00:47:09.860 --> 00:47:12.580
So you know there's always,
like you're happy that

00:47:12.580 --> 00:47:14.940
we're doing this for you,
but I wish you guys would have

00:47:14.940 --> 00:47:16.430
done this a little different.

00:47:16.490 --> 00:47:21.410
So this is where you would
plug in your custom code.

00:47:23.590 --> 00:47:27.340
Once you've become familiar
with our migration way of doing

00:47:27.340 --> 00:47:30.300
things and you start to think,
"Oh, God,

00:47:30.300 --> 00:47:34.070
I wish these guys had done these
things differently," this is a

00:47:34.070 --> 00:47:39.620
roadmap of how you would want
to approach your customization.

00:47:39.860 --> 00:47:43.410
Whether what you want to customize
is in the bootstrapping part of the

00:47:43.410 --> 00:47:47.280
migration process or in the actual
migration part of the migration process.

00:47:47.290 --> 00:47:50.540
Do you want to customize things
in terms of where we're finding

00:47:50.540 --> 00:47:54.740
the models for you or do you want
to create those models at runtime?

00:47:54.740 --> 00:47:57.670
You just don't want to use
the default behavior for you,

00:47:57.780 --> 00:48:00.160
that's the bootstrapping side of things?

00:48:00.160 --> 00:48:03.790
Or do you want to customize the
actual migration steps of how

00:48:03.810 --> 00:48:07.860
you're splitting your fields
and normalizing your machines?

00:48:08.260 --> 00:48:10.860
I can already tell you that
I hope that most of you,

00:48:10.940 --> 00:48:13.800
when you're talking about customizing,
you're talking about customizing

00:48:13.800 --> 00:48:16.240
the second part of things,
not so much the bootstrapping.

00:48:16.240 --> 00:48:19.310
But it's there if that's
what you want to do.

00:48:19.640 --> 00:48:22.900
So for the bootstrapping,
this is what we do for you.

00:48:22.910 --> 00:48:27.240
Remember,
as long as you give us the right models,

00:48:27.240 --> 00:48:29.300
we look for things in your main bundle.

00:48:29.360 --> 00:48:32.500
That's why we now have
version models within Xcode,

00:48:32.540 --> 00:48:33.880
because everything's there.

00:48:33.970 --> 00:48:36.280
It's compiled into the
resources of your application.

00:48:36.280 --> 00:48:40.440
So we simply go in there,
look for everything that's required,

00:48:40.440 --> 00:48:43.280
and we initialize a migration manager.

00:48:43.310 --> 00:48:47.730
And you notice that the arrow there
is not yet-- it hasn't gotten all

00:48:47.730 --> 00:48:51.830
the way to the migration side,
because we're ready to migrate.

00:48:51.950 --> 00:48:55.040
So this is where you might say,
I don't like how you

00:48:55.040 --> 00:48:56.240
did the bootstrapping.

00:48:56.240 --> 00:48:57.720
I want to change something.

00:48:57.720 --> 00:49:01.910
I want to-- you guys are
looking in my default bundle,

00:49:01.920 --> 00:49:05.820
but my models really live somewhere else.

00:49:05.820 --> 00:49:07.930
You guys are asking me
for a mapping model,

00:49:07.940 --> 00:49:11.680
but I'm a super sophisticated developer,
and I'm actually auto-generating the

00:49:11.680 --> 00:49:15.460
mapping model at runtime right as you
tell me that there's a version skew.

00:49:15.460 --> 00:49:18.260
So if you want to do all
those kinds of things,

00:49:18.310 --> 00:49:18.740
this is where you would.

00:49:18.740 --> 00:49:21.380
you would hook in things.

00:49:21.900 --> 00:49:26.200
Remember that this all happens in
the @PersistenceStoreWithType method.

00:49:26.290 --> 00:49:31.050
So, a Persistent Store Coordinator,
you tell it, "I want to work with this

00:49:31.050 --> 00:49:33.570
store and this model."

00:49:34.220 --> 00:49:38.940
All we're doing in Leopard is we're
introducing a new policy option,

00:49:39.030 --> 00:49:41.340
I'm sorry, a new option for the store.

00:49:41.450 --> 00:49:45.720
The key to access this option
is NSStoreMigrationPolicyKey.

00:49:45.850 --> 00:49:50.720
And the value you would set here is
an instance of NSStoreMigrationPolicy.

00:49:50.720 --> 00:49:52.320
So we already do the migration for you.

00:49:52.320 --> 00:49:55.210
If you give us an
instance of our own class,

00:49:55.280 --> 00:49:57.710
we'll do the migration for you.

00:49:58.070 --> 00:50:00.500
If you give us an
instance of your subclass,

00:50:00.660 --> 00:50:04.530
then we'll do the bootstrapping
based on whatever methods you

00:50:04.530 --> 00:50:05.920
overwrote in that subclass.

00:50:05.920 --> 00:50:10.750
Remember that I said that the default
behavior when we detect version

00:50:10.760 --> 00:50:12.720
skew is to bring up an error panel?

00:50:12.720 --> 00:50:15.300
This is how you change
the default behavior.

00:50:15.300 --> 00:50:17.820
Even if you don't want to customize
the bootstrapping process,

00:50:17.820 --> 00:50:20.720
you still have to give us this
additional option in the add

00:50:20.740 --> 00:50:22.870
persistence store with type method.

00:50:22.880 --> 00:50:24.090
So that's all you do.

00:50:24.100 --> 00:50:25.320
You don't want that error.

00:50:25.320 --> 00:50:26.990
You want us to take
care of the migration.

00:50:27.890 --> 00:50:28.760
You add that option.

00:50:28.760 --> 00:50:30.940
And I'll show that in the following demo.

00:50:30.940 --> 00:50:33.540
So within your subclass...

00:50:35.230 --> 00:50:37.100
You're customizing the
bootstrapping process.

00:50:37.100 --> 00:50:40.780
So once again, you're looking for models
in your own weird locations,

00:50:40.780 --> 00:50:43.260
you're initializing your
own migration manager,

00:50:43.260 --> 00:50:46.100
you're specifying a
different destination URL.

00:50:46.240 --> 00:50:50.140
By default, the destination URL we use
is the same one you had with

00:50:50.140 --> 00:50:51.820
.new appended at the end.

00:50:51.820 --> 00:50:55.030
So if you want to change that,
you would go in here.

00:50:57.530 --> 00:50:59.110
NS Store Migration Policy.

00:50:59.170 --> 00:51:00.350
That's the class you want to look at.

00:51:00.440 --> 00:51:03.600
That's the class you want to subclass if
you're not happy with how we did things

00:51:03.600 --> 00:51:05.600
with the bootstrapping side of things.

00:51:08.510 --> 00:51:11.120
Second thing,
I want to customize the migration.

00:51:11.120 --> 00:51:14.590
This is where I would hope most
of you would plug in your code.

00:51:14.590 --> 00:51:17.860
Again, we do a lot for you.

00:51:17.860 --> 00:51:20.540
We do everything you had to do in
the past in the Tiger timeframe.

00:51:20.540 --> 00:51:22.930
We do the three-pass migration.

00:51:23.040 --> 00:51:24.390
We fetch all your sources.

00:51:24.390 --> 00:51:25.880
We create the destinations.

00:51:25.910 --> 00:51:28.850
We go through them again and
recreate the relationships.

00:51:28.870 --> 00:51:33.230
We make sure that validation is
disabled and enabled at the right time.

00:51:33.230 --> 00:51:34.720
We do all this for you.

00:51:36.160 --> 00:51:38.600
But there's going to be certain
migration steps that we can't

00:51:38.830 --> 00:51:39.640
figure out in the model.

00:51:39.640 --> 00:51:41.710
For example,
the splitting up of name into

00:51:41.710 --> 00:51:44.560
first name and last name and the
specific way that you want to

00:51:44.660 --> 00:51:46.480
normalize your cuisine's view.

00:51:49.040 --> 00:51:54.500
So at this point,
you would subclass-- the class that does

00:51:54.500 --> 00:51:57.610
this for you is NSEntityMigrationPolicy.

00:51:57.800 --> 00:52:01.350
So if you subclass this class,
this is where you would

00:52:01.350 --> 00:52:02.440
plug in the custom code.

00:52:02.440 --> 00:52:06.700
Remember that very first example where
we saw that whole source code scroll up,

00:52:06.700 --> 00:52:08.380
and they said,
wouldn't it be nice to just

00:52:08.400 --> 00:52:11.110
write a little method that splits
our first name and last name?

00:52:11.120 --> 00:52:13.390
This is where you would
put that method in.

00:52:13.570 --> 00:52:18.100
When would you want to subclass
NSEntityMigrationPolicy?

00:52:18.110 --> 00:52:21.480
When you're splitting up or
combining attribute values.

00:52:21.480 --> 00:52:23.740
If all you're doing is
navigating key paths,

00:52:23.740 --> 00:52:25.630
you can do that with the mapping tool.

00:52:25.880 --> 00:52:29.020
If you're doing fancy splitting
up or combining of your models,

00:52:29.020 --> 00:52:31.900
you probably want that little
function where you're doing--

00:52:31.900 --> 00:52:33.940
we give you the source,
we give you the destination,

00:52:33.940 --> 00:52:36.580
and you populate it however you want it.

00:52:36.580 --> 00:52:38.880
When you're reducing the
count of relationships,

00:52:38.880 --> 00:52:40.790
if you want to make it
to one into a too many,

00:52:40.920 --> 00:52:42.180
that's pretty straightforward.

00:52:42.220 --> 00:52:43.340
The data's already there.

00:52:43.340 --> 00:52:46.240
We simply put it into a
too many relationship.

00:52:46.240 --> 00:52:47.200
If you want to make it
too many into a too one,

00:52:47.200 --> 00:52:50.820
which ones do you want to keep around?

00:52:51.150 --> 00:52:53.300
So maybe that's where you want
to write your code and say,

00:52:53.300 --> 00:52:58.200
well, I want to only keep these instances
around from my destination.

00:52:58.250 --> 00:53:03.190
Or if you want to do conditional
creation of destination instances,

00:53:03.250 --> 00:53:05.910
for example, cuisines,
remember that we're unique in value.

00:53:05.920 --> 00:53:09.820
So we're not creating a cuisine
instance for each recipe.

00:53:09.880 --> 00:53:13.410
We're only creating a cuisine instance
for each unique recipe value inside

00:53:13.410 --> 00:53:15.690
of my original instances of recipe.

00:53:15.810 --> 00:53:16.300
So that's custom code.

00:53:16.300 --> 00:53:18.760
That's where you will
write the custom code.

00:53:18.780 --> 00:53:21.540
And we'll see that in the demo.

00:53:22.600 --> 00:53:24.400
NS Entity Migration Policy.

00:53:24.400 --> 00:53:25.280
That's the class.

00:53:25.280 --> 00:53:26.640
That's what you would subclass.

00:53:29.840 --> 00:53:32.460
The two methods-- there's a couple
other methods in this class,

00:53:32.460 --> 00:53:37.560
but the two methods that we're calling
that have default implementations

00:53:37.650 --> 00:53:41.730
are the first pass method that
we're calling is destination

00:53:41.730 --> 00:53:43.640
instances for source instance.

00:53:43.690 --> 00:53:46.640
That's when we say, here's the source.

00:53:46.660 --> 00:53:49.200
What should be created
for the destination?

00:53:49.220 --> 00:53:51.840
The default implementation
creates an instance of whatever

00:53:51.840 --> 00:53:54.560
you told us was the destination.

00:53:54.820 --> 00:53:56.460
This is where you would
plug in your code.

00:53:56.460 --> 00:54:00.230
You can still use our logic and call
super and we create the instance for you.

00:54:00.480 --> 00:54:05.480
And after you call super, you simply say,
oh, but I remember that you guys,

00:54:05.490 --> 00:54:08.520
Core Data, you still haven't populated
first name and last name.

00:54:08.520 --> 00:54:09.730
So I've already called super.

00:54:09.730 --> 00:54:11.320
You've already created chefs for me.

00:54:11.320 --> 00:54:17.140
Now let me fill in the fields in the
way that I know how to fill them in.

00:54:17.800 --> 00:54:21.940
The second pass method that is
called in this class is create

00:54:21.940 --> 00:54:25.120
relationship for destination instance.

00:54:25.120 --> 00:54:28.770
So during our second pass,
this method has a default implementation

00:54:28.770 --> 00:54:33.120
where we do the hooking up that I showed
you there with the recipes and the chefs.

00:54:33.180 --> 00:54:35.620
So if you want to do some
other more sophisticated

00:54:35.620 --> 00:54:38.240
re-relating of your objects,
this is where you would

00:54:38.250 --> 00:54:39.350
plug in your code.

00:54:39.360 --> 00:54:44.300
So we're finally ready to
migrate everything over.

00:54:44.300 --> 00:54:47.780
Demo?

00:54:47.800 --> 00:54:50.940
Simple recipes demo 3

00:54:57.490 --> 00:54:58.100
Let's review.

00:54:58.100 --> 00:54:59.540
Where are we?

00:54:59.540 --> 00:55:05.140
We have our two versions of our model,
right?

00:55:05.140 --> 00:55:08.220
We have, oh, wait,
let me backtrack a little bit.

00:55:08.220 --> 00:55:12.050
We have, you notice again that I opened
a different version of the

00:55:12.050 --> 00:55:15.020
project that I was using in
version two of the project.

00:55:15.110 --> 00:55:15.910
Why is that?

00:55:15.910 --> 00:55:19.100
This is a special version of
the project that has two targets

00:55:19.230 --> 00:55:23.370
because I want to compile both the
1.0 version of my application and

00:55:23.370 --> 00:55:25.450
the 2.0 version of my application.

00:55:25.450 --> 00:55:29.290
I want to show you what would happen
when there's a migration error there.

00:55:29.290 --> 00:55:32.040
So that's why I'm doing
a different project here.

00:55:32.040 --> 00:55:33.940
But we have the source model.

00:55:33.940 --> 00:55:36.820
We have the source model right there.

00:55:36.820 --> 00:55:38.780
We have the destination.

00:55:43.220 --> 00:55:44.450
And we have the mapping model.

00:55:44.690 --> 00:55:49.180
So let's first launch version
1.0 of our application.

00:55:49.260 --> 00:55:50.130
No migration yet.

00:55:50.240 --> 00:55:54.880
This is just version
1.0 of our application.

00:55:55.120 --> 00:55:58.840
Um, build failed.

00:56:08.590 --> 00:56:10.190
Oh no, it said succeed in, right?

00:56:10.200 --> 00:56:10.700
Why did I?

00:56:10.700 --> 00:56:14.110
Yeah.

00:56:14.120 --> 00:56:15.350
. Yeah.

00:56:15.650 --> 00:56:16.560
No, I don't know.

00:56:16.770 --> 00:56:18.950
You guys saw the build
failed message down here,

00:56:18.960 --> 00:56:19.440
right?

00:56:19.540 --> 00:56:21.770
I don't know why that was there.

00:56:21.940 --> 00:56:24.110
So we have recipes.

00:56:44.900 --> 00:56:44.900
So, this is version one over app.

00:56:44.900 --> 00:56:44.900
We have pre-existing data there.

00:56:44.900 --> 00:56:44.900
I'm sorry.

00:56:44.900 --> 00:56:44.900
Let me -- so, there's recipes, right?

00:56:44.900 --> 00:56:44.900
So, this is one over app.

00:56:44.900 --> 00:56:44.900
But the only reason I'm bringing this
up is so that I can add data here.

00:56:44.900 --> 00:56:44.900
Another one -- oh,
I already have Miguel Sanchez.

00:56:44.900 --> 00:56:44.900
Let's use another.

00:56:47.600 --> 00:57:02.900
[Transcript missing]

00:57:06.900 --> 00:57:12.210
I'm a Mexican and I'm a geek,
so let's call this GeekMex.

00:57:13.670 --> 00:57:14.900
A very easy recipe.

00:57:14.900 --> 00:57:16.340
All you need is one car.

00:57:16.580 --> 00:57:20.630
And then you drive...

00:57:21.720 --> 00:57:24.650
You drive and you eat.

00:57:24.740 --> 00:57:26.280
It's very, very easy.

00:57:26.290 --> 00:57:27.980
I recommend it.

00:57:28.050 --> 00:57:32.370
So we have the-- I'm only putting
data in here so that you see that

00:57:32.440 --> 00:57:34.820
I'm actually migrating something in.

00:57:34.850 --> 00:57:35.100
OK?

00:57:35.540 --> 00:57:37.850
So we go back to our app.

00:57:40.120 --> 00:57:41.930
Let me launch version 2 of our app.

00:57:42.160 --> 00:57:43.910
We haven't done any migration yet.

00:57:44.030 --> 00:57:45.850
What happens?

00:57:48.660 --> 00:57:50.740
So we're running.

00:57:50.790 --> 00:57:55.450
You can already see that, oh,
we have a fancy new UI.

00:57:55.530 --> 00:57:58.060
Actually, I hope this-- yeah.

00:57:58.260 --> 00:58:00.780
So here's what you're talking about,
Willis.

00:58:00.970 --> 00:58:01.790
Error message, right?

00:58:01.800 --> 00:58:04.400
Like, look, you're giving me a model.

00:58:04.450 --> 00:58:06.600
You're giving me a wrong
version of the store.

00:58:06.600 --> 00:58:08.010
What's going on here?

00:58:08.280 --> 00:58:08.850
Error panel.

00:58:08.900 --> 00:58:09.800
I heard claps there.

00:58:09.840 --> 00:58:11.630
Thank you.

00:58:12.400 --> 00:58:14.500
So this is the default behavior.

00:58:14.500 --> 00:58:16.260
We detect the version skew for you,
right?

00:58:16.410 --> 00:58:18.990
We have all the versioning
magic going on behind the scenes

00:58:18.990 --> 00:58:21.900
and all we do with that is,
"Oh, can't do this.

00:58:22.040 --> 00:58:23.560
Fix it."

00:58:24.300 --> 00:58:27.300
Here's our fancy new UI,
but there's no data because

00:58:27.300 --> 00:58:30.340
we haven't migrated yet.

00:58:31.090 --> 00:58:35.350
So let's go back to our app.

00:58:35.450 --> 00:58:37.780
We have a mapping model.

00:58:38.910 --> 00:58:44.390
We have two additional changes.

00:58:44.500 --> 00:58:46.530
Remember that we had already
done everything we needed to

00:58:46.560 --> 00:58:50.950
do for recipes and ingredients?

00:58:51.320 --> 00:58:55.380
For chefs,
there's really no way of specifying here.

00:58:55.420 --> 00:58:57.240
Well, there is,
but it's a little more advanced

00:58:57.250 --> 00:58:59.960
of how do you want to fill
in first name and last name.

00:58:59.960 --> 00:59:05.960
So you'll notice that the mapping type,
you can select the mapping

00:59:06.210 --> 00:59:08.600
type to be custom here.

00:59:08.600 --> 00:59:15.120
So all I did was select custom both
for chef to chef and recipe to cuisine.

00:59:15.120 --> 00:59:16.620
So here's another custom, right?

00:59:17.040 --> 00:59:22.410
All we do when you tell us custom here
is that we enable this field right here,

00:59:22.410 --> 00:59:25.460
and this is where you tell us
the name of the subclass of the

00:59:25.460 --> 00:59:27.300
entity mapping migration policy.

00:59:27.300 --> 00:59:29.000
So that's what's going on there.

00:59:29.000 --> 00:59:33.170
So both of these require a
little bit of custom logic.

00:59:33.240 --> 00:59:39.160
We do that by here's where you
tell us what class you want to use.

00:59:39.160 --> 00:59:43.590
Now, even though it says custom there,
we don't leave you all by yourselves,

00:59:43.590 --> 00:59:44.230
right?

00:59:44.960 --> 00:59:48.860
You can still use the tool for some
parts for populating the fields that

00:59:48.860 --> 00:59:51.180
are easy that we're still supporting.

00:59:51.180 --> 00:59:55.040
So, for example, in the chef,
we don't know how to migrate

00:59:55.040 --> 00:59:57.400
your first and last name for you.

00:59:57.400 --> 01:00:00.840
That will be custom code,
but you can still use the mapping

01:00:01.080 --> 01:00:04.780
model to indicate how you want
to repopulate your relationships,

01:00:04.780 --> 01:00:05.500
right?

01:00:05.500 --> 01:00:09.660
So the fact that you're saying that
something is custom there doesn't mean

01:00:09.660 --> 01:00:14.500
that we're completely ignoring all of
the mapping information that you specify.

01:00:14.500 --> 01:00:14.940
So whatever.

01:00:14.940 --> 01:00:18.300
You specify in here,
as long as you call super in your

01:00:18.390 --> 01:00:23.320
in your subclass implementation,
we'll still do as much as we can for you.

01:00:23.320 --> 01:00:25.460
So custom doesn't mean do everything.

01:00:25.480 --> 01:00:28.000
Only do whatever,
whatever you want to plug in.

01:00:28.040 --> 01:00:30.980
Let me see before I show you the code.

01:00:31.080 --> 01:00:33.860
What else do I want to
show you here in the model?

01:00:33.920 --> 01:00:35.260
So that was for a recipe.

01:00:37.150 --> 01:00:39.920
Here's another example where we,
even though we're doing custom

01:00:39.920 --> 01:00:43.020
migration at the Cuisine level,
our custom code,

01:00:43.140 --> 01:00:46.480
all it's going to do is it's
going to determine when to create

01:00:46.540 --> 01:00:49.520
a different Cuisine instance
because we're doing the unicking.

01:00:49.520 --> 01:00:52.020
So the custom code you guys
are writing will have to deal

01:00:52.030 --> 01:00:53.370
with the unicking values.

01:00:53.380 --> 01:00:57.090
But once we've done the unicking,
we actually can populate the fields

01:00:57.090 --> 01:00:58.960
using the model mapping rules.

01:00:58.960 --> 01:01:01.770
For example,
the name of the Cuisine is going

01:01:01.830 --> 01:01:03.940
to come from the source's name.

01:01:03.940 --> 01:01:05.980
Let's parse this.

01:01:05.980 --> 01:01:07.000
What is the source?

01:01:07.100 --> 01:01:08.980
A source is an instance of the recipe.

01:01:08.980 --> 01:01:12.460
The recipe has a name field, recipe.name.

01:01:12.460 --> 01:01:17.340
I get that and I fill that
in with the recipe's name.

01:01:17.340 --> 01:01:22.680
The trick is how do I determine
that I only create a limited number

01:01:22.680 --> 01:01:25.360
of Cuisine instances for all the
duplicate recipe names that I have.

01:01:25.360 --> 01:01:28.550
So that will be the custom code,
but you can still use the mapping

01:01:28.550 --> 01:01:30.330
model to do the population.

01:01:30.340 --> 01:01:33.510
You can also populate the
relationships in here,

01:01:33.560 --> 01:01:34.180
right?

01:01:34.180 --> 01:01:36.260
Here's a tricky one.

01:01:36.260 --> 01:01:37.060
What are the?

01:01:37.060 --> 01:01:37.560
The keypath.

01:01:37.760 --> 01:01:39.240
Where did the keypath go?

01:01:39.240 --> 01:01:40.920
Why do I only have source here?

01:01:40.920 --> 01:01:43.740
Well,
what I'm doing here is I'm hooking up.

01:01:43.780 --> 01:01:45.700
Here I'm in Cuisine.

01:01:45.700 --> 01:01:46.590
That's the destination.

01:01:46.600 --> 01:01:50.320
Cuisine has a recipes relationship.

01:01:50.340 --> 01:01:54.940
And I want to populate that
relationship with the sources.

01:01:54.940 --> 01:01:57.690
The sources were recipes, right?

01:01:57.860 --> 01:01:59.100
That's what I'm populating.

01:01:59.100 --> 01:02:00.920
I'm not really going
sources dot something.

01:02:00.920 --> 01:02:05.810
It's like the recipes themselves is
what I want as the destinations in this.

01:02:07.060 --> 01:02:08.560
In this mapping.

01:02:08.560 --> 01:02:09.680
So that's the mapping model.

01:02:09.680 --> 01:02:12.830
Now we look at the code.

01:02:12.840 --> 01:02:13.870
There isn't much.

01:02:16.850 --> 01:02:21.510
Actually, let me start out by
Chef Migration Policy,

01:02:21.600 --> 01:02:25.330
subclass of NSEntity Migration Policy,

01:02:26.960 --> 01:02:31.830
You override the first pass method,
destination instances

01:02:31.900 --> 01:02:34.100
for source instance.

01:02:34.120 --> 01:02:37.490
You call super because you still
want to use all of the mappings

01:02:37.490 --> 01:02:38.800
that you gave us in the model.

01:02:38.800 --> 01:02:42.270
But once you've called super,
you want to get a hold of that new

01:02:42.290 --> 01:02:44.480
chef we created for you right here.

01:02:44.480 --> 01:02:47.210
And here you have your custom logic,
right?

01:02:47.370 --> 01:02:49.670
This is where you, oh, yeah,
I know that the old chef,

01:02:49.670 --> 01:02:50.730
here's the old chef.

01:02:50.730 --> 01:02:54.120
It comes in as an argument in the method.

01:02:54.120 --> 01:02:56.880
And this is where you know
how to split the data.

01:02:56.900 --> 01:02:59.020
And you set up that name field
into first name and last name.

01:02:59.020 --> 01:03:00.770
So you're only writing
this little bit of code.

01:03:05.900 --> 01:03:11.330
Cuisines, again,
a subclass of NS Entity Migration Policy.

01:03:13.730 --> 01:03:17.090
You're overriding your,
here you have an init method where you're

01:03:17.110 --> 01:03:19.840
keeping a dictionary for unique purposes.

01:03:19.840 --> 01:03:22.780
You overwrite the first
pass migration method.

01:03:23.740 --> 01:03:27.130
And when do you determine
whether you want to create a new

01:03:27.130 --> 01:03:30.630
instance of a cuisine or use a
pre-existing instance of a cuisine?

01:03:30.750 --> 01:03:34.200
Well, you know that your
source entity was recipe,

01:03:34.200 --> 01:03:37.520
so you're getting recipes
here as an argument.

01:03:37.520 --> 01:03:41.800
You look at the recipe's cuisine name
and then you look at the cuisine in

01:03:42.050 --> 01:03:45.210
your lookup table if it's already there,
it means you've already

01:03:45.210 --> 01:03:46.680
created an instance for it.

01:03:46.680 --> 01:03:48.090
So you just return that.

01:03:48.090 --> 01:03:50.710
If it's not, then you use our,
our implement,

01:03:50.710 --> 01:03:52.450
our default implementation.

01:03:52.450 --> 01:03:53.520
You call super.

01:03:53.520 --> 01:03:54.480
That's what we do.

01:03:54.520 --> 01:03:56.540
That's where we create a cuisine for you.

01:03:56.540 --> 01:03:58.310
And then you populate the name.

01:03:58.320 --> 01:04:00.610
Actually, you don't need to populate
the name anymore because we

01:04:00.610 --> 01:04:01.760
did that at the model level.

01:04:01.760 --> 01:04:03.240
This is, this is all code.

01:04:03.400 --> 01:04:06.680
And then you,
you store it in your lookup table, right?

01:04:06.680 --> 01:04:09.780
So this is, this is your normalization
code that don't,

01:04:09.780 --> 01:03:43.520
this is what you would write to do like,
oh, I only want to create this.

01:03:43.520 --> 01:03:43.600
This is what you would write to do like,
oh, I only want to create this.

01:03:44.100 --> 01:04:13.360
This is what you would write to do like,
oh, I only want to create this.

01:04:13.360 --> 01:04:13.400
This is what you would write to do like,
oh, I only want to create this.

01:04:13.410 --> 01:04:13.600
This is what you would write to do like,
oh, I only want to create this.

01:04:13.600 --> 01:04:16.560
So you can create destination
instances in this particular situation.

01:04:16.560 --> 01:04:18.730
So this is where you would
code that particular situation.

01:04:18.730 --> 01:04:21.980
You'll notice that we didn't even
have to do anything with the second,

01:04:21.980 --> 01:04:27.170
the second pass migration method
because we were able to do that at the,

01:04:27.430 --> 01:04:30.480
at the mapping model level.

01:04:32.810 --> 01:04:38.630
The third change is,
we said that by default

01:04:39.020 --> 01:04:42.740
when we detect version skew,
we have, um, we

01:04:43.990 --> 01:04:47.190
We create-- we report an error.

01:04:47.410 --> 01:04:49.480
So we add a policy as an option here.

01:04:49.480 --> 01:04:53.110
Here's the add persistence
store with type method.

01:04:53.490 --> 01:04:57.540
We create an instance of NSStore
migration policy because you're

01:04:57.540 --> 01:05:00.480
not doing any customization
at the bootstrapping process,

01:05:00.490 --> 01:05:03.030
so you're simply creating an instance
of our default implementation.

01:05:03.040 --> 01:05:06.480
You're putting it into a
dictionary with a new key,

01:05:06.480 --> 01:05:09.450
and you're setting it
as one of the options,

01:05:09.450 --> 01:05:10.170
right?

01:05:10.250 --> 01:05:12.650
So very little code, right?

01:05:12.690 --> 01:05:16.100
You had a little bit of code here
to tell us to do the migration,

01:05:16.140 --> 01:05:20.160
and you had your two basic subclasses
with a few lines of code there.

01:05:22.450 --> 01:05:24.760
You compile and you launch.

01:05:24.760 --> 01:05:28.940
And there's your migration.

01:05:38.420 --> 01:05:41.640
So could we go back to the slides?

01:05:41.760 --> 01:05:46.170
So I hope this-- you're excited about
all this if you struggle with this

01:05:46.170 --> 01:05:49.400
in previous versions of Core Data.

01:05:49.600 --> 01:05:51.660
We've been doing this for
about three weeks now,

01:05:51.660 --> 01:05:56.400
so we have hours of wisdom
to communicate back to you.

01:05:56.400 --> 01:06:00.340
So this is where I enlighten you.

01:06:02.760 --> 01:06:05.980
This is also where
Darth Vader would say to Luke,

01:06:05.980 --> 01:06:08.740
beware of the dark side of migration.

01:06:08.820 --> 01:06:13.740
So remember that I left out
certain things in that first slide.

01:06:13.910 --> 01:06:17.830
We didn't talk about migrating
the UI and your own code.

01:06:17.890 --> 01:06:21.640
So we do a lot of stuff
for you within migration.

01:06:21.640 --> 01:06:25.280
But migration as a procedural
problem is something that

01:06:25.280 --> 01:06:27.540
you have to take seriously.

01:06:27.800 --> 01:06:29.230
You also have to migrate your UI.

01:06:29.240 --> 01:06:32.040
For that, you might want to look at
some of the new refactoring

01:06:32.040 --> 01:06:35.020
functionality we have within Xcode.

01:06:35.040 --> 01:06:39.840
Where it gets tricky is when
you're managing your migration

01:06:40.010 --> 01:06:43.010
paths in deployed applications.

01:06:43.100 --> 01:06:47.830
So if you have one customer base with--
you're only migrating from one to two,

01:06:47.830 --> 01:06:49.200
that's pretty straightforward.

01:06:49.200 --> 01:06:53.010
But if you have a bunch of customers,
this guy's in version one, version two,

01:06:53.010 --> 01:06:55.730
version three, version four,
or even within your

01:06:55.730 --> 01:06:58.340
own development cycle,
you're changing your model

01:06:58.340 --> 01:06:59.770
every single day of the week.

01:06:59.970 --> 01:07:02.690
By the end of the week,
you have five different upgrade

01:07:03.160 --> 01:07:05.620
paths and all of the middle paths.

01:07:05.620 --> 01:07:07.880
So this is where you
could get in trouble.

01:07:07.880 --> 01:07:12.440
We do a lot of the migration for you,
but you have to be careful to really

01:07:12.440 --> 01:07:14.350
know when you want to do the migration.

01:07:14.390 --> 01:07:17.100
So you have to manage migration well.

01:07:17.120 --> 01:07:19.500
You also have to consider performance.

01:07:19.520 --> 01:07:23.010
This is one of those areas in core data
where we have to touch all of your data.

01:07:23.020 --> 01:07:27.170
We have to move it from the
source to the destination.

01:07:27.750 --> 01:07:32.520
So we're touching all
of your object graphs.

01:07:32.560 --> 01:07:36.000
So we're not doing it all the time,
only when you're doing the migration,

01:07:36.030 --> 01:07:37.120
but we have to do that.

01:07:37.140 --> 01:07:39.460
Please review your mapping model.

01:07:39.460 --> 01:07:44.480
We're doing a lot of key value coding
to get values and to set values.

01:07:44.480 --> 01:07:46.780
So if when you were
creating the mapping model,

01:07:46.780 --> 01:07:50.550
you put in the wrong key path,
and that key path happens to be the

01:07:50.550 --> 01:07:55.250
millionth instance you're migrating,
and you've been waiting for, well,

01:07:55.250 --> 01:07:57.370
a million instances, what, 30 seconds?

01:07:57.380 --> 01:07:59.110
Core data, we're very efficient, right?

01:07:59.170 --> 01:08:02.680
So 30 seconds into your migration,
you have a key value coding exception.

01:08:02.680 --> 01:08:04.600
So review your model, please.

01:08:04.600 --> 01:08:08.150
And remember,
you can't just move stuff over from

01:08:08.150 --> 01:08:12.100
a source stack to a destination stack
without some sort of transformation.

01:08:12.100 --> 01:08:15.360
So be careful when you're navigating
key paths in your mapping model.

01:08:15.360 --> 01:08:18.220
Always think, what is this key path?

01:08:18.310 --> 01:08:19.460
Is this a simple value?

01:08:19.460 --> 01:08:20.680
Okay, no problem.

01:08:20.680 --> 01:08:22.440
Is this key path an object?

01:08:23.180 --> 01:08:26.080
If this key path is an object,
I need to do that extra transformation

01:08:26.080 --> 01:08:28.490
that I did for relationships,
so don't be aware of that.

01:08:30.700 --> 01:11:02.200
[Transcript missing]