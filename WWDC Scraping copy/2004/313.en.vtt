WEBVTT

00:00:16.690 --> 00:00:17.580
Good morning, everybody.

00:00:17.600 --> 00:00:18.600
Good morning.

00:00:18.600 --> 00:00:21.400
I'm Chris Espinos of the
Apple Developer Tools team,

00:00:21.400 --> 00:00:24.200
and I'm here to talk about
modeling and design in Xcode.

00:00:24.200 --> 00:00:27.460
I'd like to thank you for coming
out at 9:00 on the Friday morning

00:00:27.460 --> 00:00:30.040
before a three-day holiday weekend.

00:00:30.040 --> 00:00:32.340
To reward your perseverance,
we're going to be auctioning

00:00:32.340 --> 00:00:34.750
off this rack of rare iMacs.

00:00:34.870 --> 00:00:40.200
Your last chance before
September to get some.

00:00:40.200 --> 00:00:41.200
Not really.

00:00:41.200 --> 00:00:43.580
We will have something for
you at the end of the show,

00:00:43.580 --> 00:00:44.110
though.

00:00:45.390 --> 00:00:49.740
So I'm going to be talking to you
about the design and modeling tools,

00:00:49.830 --> 00:00:52.840
and about what models are
and what they do for you in

00:00:52.840 --> 00:00:55.870
your software design process,
how they're integrated into

00:00:55.870 --> 00:00:58.620
your workflow in Xcode,
and talk about some of the future

00:00:58.630 --> 00:01:00.000
directions for design tools.

00:01:00.000 --> 00:01:04.090
As I mentioned on Monday in TED session,
we offer two plugins,

00:01:04.090 --> 00:01:07.180
and we're going to be
talking about those today,

00:01:07.520 --> 00:01:11.680
but we expect these to be the
first two of many to augment your

00:01:11.680 --> 00:01:14.500
coding workflow with design tools.

00:01:15.560 --> 00:01:19.400
What you're going to learn is how to
create and navigate the class models,

00:01:19.400 --> 00:01:22.290
whether you're using C++, Objective-C,
or Java,

00:01:22.400 --> 00:01:26.080
how to save and share the class models
with other people in your projects,

00:01:26.170 --> 00:01:29.040
how to create a data model
for the Core Data Framework,

00:01:29.440 --> 00:01:34.320
build a Core Data schema from it,
and deploy an application using it.

00:01:35.110 --> 00:01:37.610
You should know something about
object-oriented programming.

00:01:37.830 --> 00:01:41.100
If you're using straight C programming
for the command line or the kernel,

00:01:41.100 --> 00:01:43.330
now would be an excellent
time to deplane,

00:01:43.470 --> 00:01:45.430
because this has nothing to do with you.

00:01:45.570 --> 00:01:48.510
But if you do object-oriented
programming in C++,

00:01:48.510 --> 00:01:51.000
Objective-C, or Java, stick around.

00:01:51.000 --> 00:01:52.000
You'll learn something.

00:01:52.120 --> 00:01:54.570
It will help to know about
Core Data Framework for

00:01:54.570 --> 00:01:56.000
using the data models.

00:01:56.000 --> 00:01:58.240
If you're not using the
Core Data Framework,

00:01:58.400 --> 00:01:59.500
you might want to look into it.

00:01:59.500 --> 00:02:05.460
It's very cool and can be used from
either Objective-C or from C++.

00:02:07.080 --> 00:02:10.290
Why did we put diagrams in Xcode?

00:02:10.430 --> 00:02:13.660
The thing that really drove it
was the Core Data Framework,

00:02:13.660 --> 00:02:17.870
in that we knew we needed to create
schemas for the Core Data Framework,

00:02:17.970 --> 00:02:22.430
and that the best way to see your schema
and to understand it and to create it

00:02:22.580 --> 00:02:28.000
was with a visual model rather than
with a big table or a big hunk of XML.

00:02:28.000 --> 00:02:31.640
So modeling the data schema
for the Core Data Framework

00:02:31.650 --> 00:02:33.930
was really our driving purpose.

00:02:34.020 --> 00:02:39.500
But we also knew that there was
a big missing piece in Xcode,

00:02:39.640 --> 00:02:43.590
in that we didn't have a good class
diagram to let you get a bird's-eye view

00:02:43.860 --> 00:02:45.600
of your class hierarchy of your projects.

00:02:45.600 --> 00:02:48.580
We decided if we could kill two
birds with one stone and have one

00:02:48.580 --> 00:02:51.980
diagramming tool that did both,
that would be really helpful.

00:02:52.160 --> 00:02:55.160
Especially if we could wire it in
so you could use it to browse and

00:02:55.160 --> 00:02:58.000
navigate your code from the diagram,
rather than have it just

00:02:58.000 --> 00:02:58.000
be a single diagram.

00:02:58.000 --> 00:03:03.880
Rather than just from the class
pop-up or the project symbols list.

00:03:04.100 --> 00:05:16.100
[Transcript missing]

00:05:16.410 --> 00:05:17.840
So, quick models first.

00:05:17.930 --> 00:05:21.180
Quick models are:
you select something in your project,

00:05:21.310 --> 00:05:24.460
you choose quick model from the menu,
and it shows you a class diagram.

00:05:24.590 --> 00:05:26.790
It's really simple,
it's really straightforward,

00:05:26.790 --> 00:05:28.410
you don't have to save
it with your project,

00:05:28.520 --> 00:05:31.120
you don't have to commit
it to your repository.

00:05:31.360 --> 00:05:34.510
It includes all of the things,
all of the objects that are

00:05:34.510 --> 00:05:37.530
in that group you selected,
and it includes the first

00:05:37.530 --> 00:05:39.300
parent outside the group.

00:05:39.300 --> 00:05:41.470
It doesn't go all the
way up the hierarchy,

00:05:41.470 --> 00:05:44.510
so you don't see, you know,
90% foundation.framework

00:05:44.610 --> 00:05:46.300
and 10% your project.

00:05:46.300 --> 00:05:49.370
It only goes to the first root,
and that's a tool for

00:05:49.500 --> 00:05:52.240
clarity rather than,
you know, completeness.

00:05:52.310 --> 00:05:56.330
It will model your whole project,
it'll model a group,

00:05:56.410 --> 00:06:01.330
it'll model a multiple selection
of header files or source files,

00:06:01.330 --> 00:06:03.300
it'll model a target.

00:06:03.300 --> 00:06:06.300
You can pick anything,
just say "quick model."

00:06:06.300 --> 00:06:08.120
The layout's automatic.

00:06:08.340 --> 00:06:09.300
It does a pre-model.

00:06:09.300 --> 00:06:10.300
It's a pretty nice view,
and you can tailor it.

00:06:10.300 --> 00:06:12.320
You can drag things out,
and you can move things

00:06:12.320 --> 00:06:13.290
around to see them.

00:06:13.300 --> 00:06:16.350
You can use it to navigate,
but it's not stored with your project,

00:06:16.350 --> 00:06:18.300
so any changes you make are ephemeral.

00:06:18.300 --> 00:06:20.290
It's like a temp file.

00:06:20.810 --> 00:06:24.430
Code models can be pretty big,
so we've given you some navigation tools.

00:06:24.590 --> 00:06:27.000
First, there's a zoom out/zoom in,
like any graphic tool,

00:06:27.000 --> 00:06:30.500
so you can get a bird's eye view or
you can hone in on a particular class.

00:06:30.690 --> 00:06:32.650
There are tooltips,
so if you're zoomed out you can

00:06:32.650 --> 00:06:34.710
actually read it because the type is,
you know,

00:06:34.830 --> 00:06:36.700
like four points when you're zoomed out.

00:06:36.840 --> 00:06:39.980
There's type select to navigate out,
so you can type the name of the class

00:06:40.050 --> 00:06:42.900
and you can find it in the diagram
and then zoom in to where it is.

00:06:43.070 --> 00:06:46.290
And you can,
as you saw in the presentation on Monday,

00:06:46.620 --> 00:06:50.750
you can go directly from the class
diagram to the interface declaration,

00:06:50.750 --> 00:06:55.360
to the implementation source code,
or to the, it says class browser,

00:06:55.360 --> 00:06:59.160
but this is in error,
you can go to the documentation

00:06:59.160 --> 00:07:03.570
if it happens to be a class that
is built in to an Apple framework.

00:07:04.380 --> 00:07:07.180
With the class diagrams,
you can customize them, as I mentioned.

00:07:07.180 --> 00:07:09.060
You can expand and collapse the boxes.

00:07:09.060 --> 00:07:10.630
You can drag them to rearrange.

00:07:10.630 --> 00:07:12.500
You can do group selects
and things like that.

00:07:12.500 --> 00:07:17.520
You can relay out the diagram to
get the boxes all laid out nice.

00:07:17.670 --> 00:07:19.600
You can use custom
colors in your classes.

00:07:19.600 --> 00:07:23.060
Once again, for quick models,
this is more or less irrelevant

00:07:23.060 --> 00:07:25.290
because these changes aren't saved.

00:07:25.390 --> 00:07:27.940
And then there are the standard
graphics tools that you might find

00:07:27.940 --> 00:07:32.140
in the graphics layout program,
such as alignment, locking and unlocking,

00:07:32.140 --> 00:07:33.360
things like that.

00:07:33.470 --> 00:07:35.290
So now we're going to give
a demo of quick models,

00:07:35.290 --> 00:07:39.490
and this is Stefan Reich of my group to
show you what the quick models are like.

00:07:39.890 --> 00:07:41.720
Good morning everybody.

00:07:41.730 --> 00:07:44.270
I would like to show you how to
create quick models and how to work

00:07:44.280 --> 00:07:46.890
with the class diagrams in general.

00:07:46.950 --> 00:07:51.410
So, as Chris mentioned,
you can create quick models

00:07:51.410 --> 00:07:54.800
from individual files,
from groups, from frameworks,

00:07:54.970 --> 00:07:57.070
and even from targets.

00:07:57.470 --> 00:08:01.640
Let's create a quick model
from the source group.

00:08:01.750 --> 00:08:06.840
You see this handy design menu,
class model, and we go to quick model.

00:08:06.880 --> 00:08:08.910
And here we are.

00:08:09.060 --> 00:08:13.050
For those of you who know UML,
you will notice that this is

00:08:13.050 --> 00:08:15.520
the standard UML2 notation.

00:08:15.690 --> 00:08:18.660
We have different colors
for the different objects,

00:08:18.660 --> 00:08:20.720
which means classes are in blue.

00:08:20.720 --> 00:08:24.730
Protocols or interfaces,
depending on the language you're

00:08:24.730 --> 00:08:29.030
actually using or modeling,
are in red.

00:08:29.200 --> 00:08:33.200
And then finally,
categories are displayed in the green.

00:08:33.290 --> 00:08:36.940
So it's easy to distinguish the
different types and get an overview

00:08:36.940 --> 00:08:39.040
of your structure of the project.

00:08:39.170 --> 00:08:45.310
You see that inheritance is modeled
or is displayed with a solid arrow,

00:08:45.900 --> 00:08:51.600
whereas the implements relationship
is modeled with the dotted line.

00:08:51.610 --> 00:08:56.050
So this means derived class, for example,
implements derived protocol,

00:08:56.050 --> 00:09:01.030
and derived protocol in
turn extends base protocol.

00:09:01.700 --> 00:09:05.900
The initial diagram that
comes up is very... well,

00:09:05.900 --> 00:09:07.360
it doesn't contain much detail.

00:09:07.380 --> 00:09:12.600
This is on purpose because it gives
you a quick overview of the product.

00:09:12.600 --> 00:09:16.570
And so what you do is,
you can select individual

00:09:16.570 --> 00:09:21.600
operations to show,
properties, or if you want to show more,

00:09:21.600 --> 00:09:25.600
you select them all,
and bring up the context menu.

00:09:25.600 --> 00:09:29.240
The context menu contains all of the
items that Chris already mentioned:

00:09:29.340 --> 00:09:33.600
alignment, many of the graphic functions,
locking, unlocking,

00:09:33.600 --> 00:09:37.600
and then working with the compartments.

00:09:37.600 --> 00:09:40.210
So we're going to expand
the compartments here,

00:09:40.210 --> 00:09:42.600
and you see this looks
a little bit messy.

00:09:42.600 --> 00:09:47.290
So we just trigger the
layout algorithm again.

00:09:47.930 --> 00:09:58.680
This is a good way of exploring unknown
projects or getting an overview of code

00:09:58.680 --> 00:10:00.500
that somebody else wrote and so on.

00:10:00.520 --> 00:10:07.670
You can also see that it is easy to
hand optimize the layouted diagram.

00:10:07.930 --> 00:10:12.190
If you think that the layout
algorithm did a bad job,

00:10:12.190 --> 00:10:18.900
or it just is not easy to understand,
you can just do it yourself.

00:10:20.520 --> 00:10:23.160
And so, of course,
the big question is what happens to

00:10:23.160 --> 00:10:25.040
the diagram when you change the code?

00:10:25.040 --> 00:10:29.100
Let's have a look at what happens.

00:10:32.060 --> 00:10:39.350
And so,
we're looking at the base protocol here.

00:10:39.350 --> 00:10:39.350
Not there.

00:10:41.400 --> 00:10:47.210
And for everybody to see,
we'll zoom in on it.

00:10:47.250 --> 00:10:50.440
You see there's two methods defined,
and on the right-hand side,

00:10:50.440 --> 00:10:52.210
here's the source code.

00:10:52.420 --> 00:10:57.400
So we just emulate deleting a
method by commenting it out.

00:10:57.400 --> 00:11:02.380
And you see that the
diagrams are actually inside.

00:11:07.100 --> 00:11:20.100
[Transcript missing]

00:11:24.050 --> 00:11:24.750
I love this tool.

00:11:24.810 --> 00:11:29.000
It is clear, it's instant,
it's really responsive,

00:11:29.000 --> 00:11:33.730
and I've used it to figure out what
the heck Stefan and Miguel have

00:11:33.740 --> 00:11:37.710
been writing if I try to look at
the underlying frameworks they've

00:11:37.770 --> 00:11:39.960
built to make this all work.

00:11:40.020 --> 00:11:45.610
The first thing I did was, well,
I used the modeling tool to

00:11:45.610 --> 00:11:46.780
model the modeling tool framework
so I could figure it out.

00:11:46.780 --> 00:11:46.780
It was really terrific.

00:11:46.900 --> 00:13:15.800
[Transcript missing]

00:13:16.600 --> 00:13:18.370
Okay, here we go.

00:13:18.460 --> 00:13:22.090
So, user models are created a little
bit differently because we hook

00:13:22.100 --> 00:13:25.300
them up in the new file assistant.

00:13:26.460 --> 00:13:32.150
And you see the design option here,
and we chose class model.

00:13:33.600 --> 00:13:39.160
And I'm going to name
this A static user model.

00:13:41.190 --> 00:13:44.260
And so this is the core
of creating user models.

00:13:44.360 --> 00:13:48.550
On the left hand side you see
basically the option of what

00:13:48.590 --> 00:13:49.770
kind of model you create.

00:13:49.780 --> 00:13:52.050
It's either a static or a tracking model.

00:13:52.110 --> 00:13:54.740
In this case we choose the static model.

00:13:54.820 --> 00:13:58.830
And for now, we create the static model
based on the source group again,

00:13:58.890 --> 00:14:01.930
which will pick up all
of the source files.

00:14:01.990 --> 00:14:05.940
So we click "Add", and you see that all
of the source files that are contained

00:14:05.950 --> 00:14:08.250
in the source group are actually added.

00:14:08.270 --> 00:14:10.790
And we hit "Finish".

00:14:12.800 --> 00:14:18.040
And here they are.

00:14:18.040 --> 00:14:18.040
So we have a little bit
larger view of this.

00:14:18.220 --> 00:14:20.410
This is actually a
mixed language project.

00:14:20.420 --> 00:14:24.490
It contains both C++
and Objective-C files.

00:14:25.250 --> 00:14:29.650
And, well, this is how the general
user model looks like.

00:14:29.680 --> 00:14:34.340
So, the important thing is,
once you create a user model,

00:14:34.340 --> 00:14:38.220
it stays the same way regardless
of if you change the source code,

00:14:38.220 --> 00:14:41.970
or if you add new classes to the group,
or if you even add new classes

00:14:41.970 --> 00:14:45.100
to the source files that
you created the model from.

00:14:45.160 --> 00:14:48.300
So, it's a little bit like a snapshot.

00:14:48.300 --> 00:14:53.730
It's very handy if you want to
document the evolution in your project,

00:14:53.730 --> 00:14:55.020
for example.

00:14:56.210 --> 00:14:58.960
Now let's have a look at how
the tracking models work.

00:14:58.960 --> 00:15:00.960
Of course, they are very different.

00:15:00.960 --> 00:15:06.180
So we create them the same way.

00:15:12.200 --> 00:15:13.920
and choose Tracking.

00:15:14.140 --> 00:15:17.400
Now, one of the differences with
tracking models is that they

00:15:17.400 --> 00:15:19.760
are mostly based on a group.

00:15:19.770 --> 00:15:24.720
And so,
the idea is that you organize your code

00:15:24.720 --> 00:15:26.740
depending on your internal structure.

00:15:26.760 --> 00:15:31.040
You organize them in groups so that
they make actually sense to you,

00:15:31.040 --> 00:15:36.970
so that it's easy for you to understand
certain components of your application.

00:15:37.080 --> 00:15:40.740
And so, we will model this by,
in this case,

00:15:40.740 --> 00:15:44.590
using the offline sources group,
which models a separate

00:15:44.590 --> 00:15:46.360
aspect of this application.

00:15:46.420 --> 00:15:49.720
And you see, on the right-hand side,
you don't see individual files,

00:15:49.720 --> 00:15:52.770
but you see selected groups.

00:15:55.650 --> 00:15:59.600
So in this case,
there's only one file and two

00:15:59.600 --> 00:16:02.380
classes in the offline sources group.

00:16:03.160 --> 00:16:07.280
And so,
what happens if you rearrange your code,

00:16:07.290 --> 00:16:11.330
or if you add new classes to
the group that you're modeling,

00:16:11.370 --> 00:16:12.770
is this.

00:16:12.780 --> 00:16:20.690
Let me put a separate model here.

00:16:20.690 --> 00:16:20.690
To the right.

00:16:23.930 --> 00:16:29.970
And so I move these two
files in this group,

00:16:29.970 --> 00:16:32.990
and you see they're added
automatically to your model.

00:16:33.040 --> 00:16:40.040
So it becomes very easy to track
the groups that define a specific

00:16:40.040 --> 00:16:42.580
sub-component of your application.

00:16:43.630 --> 00:16:47.870
and obviously if I drag them out,
they will disappear as well.

00:16:47.910 --> 00:16:56.350
Now, if I would add one class,
an additional class here,

00:16:56.380 --> 00:16:58.870
it will also show up
in the diagram as well.

00:16:59.080 --> 00:17:04.170
So,
you get basically two things for free.

00:17:04.520 --> 00:17:06.780
Rearranging your code
will update the model.

00:17:06.820 --> 00:17:08.710
I mean,
rearranging the files in the group

00:17:08.720 --> 00:17:10.820
and file tree will update your model.

00:17:10.880 --> 00:17:13.660
But also adding new classes,
new categories,

00:17:13.710 --> 00:17:19.100
new interfaces in existing classes
will also show up in the model.

00:17:19.100 --> 00:17:19.850
That's it so far.

00:17:19.860 --> 00:17:21.550
Thank you.

00:17:25.930 --> 00:17:27.440
Thanks, Stefan.

00:17:27.490 --> 00:17:29.910
I think class modeling is going
to be a great help to you in

00:17:29.910 --> 00:17:31.900
your everyday work with Xcode.

00:17:31.900 --> 00:17:35.090
It's going to give you a bird's
eye view of your project so that

00:17:35.090 --> 00:17:38.810
you can figure out what's going
on in a big lump of source code.

00:17:38.970 --> 00:17:41.440
It will help you make custom
diagrams to communicate the

00:17:41.540 --> 00:17:44.770
architecture or the function of your
code to other people on your team,

00:17:44.890 --> 00:17:47.660
and it'll help you learn about
third-party frameworks or

00:17:47.660 --> 00:17:51.900
Apple frameworks just by picking the
Apple framework and getting an overview.

00:17:51.900 --> 00:17:55.950
There are some limitations in
the version that you have on

00:17:55.950 --> 00:17:58.900
your Tiger disk with Xcode 2.0.

00:17:59.000 --> 00:18:02.570
The chief thing to remember
is that the class diagramming

00:18:02.670 --> 00:18:04.900
works off of the project index.

00:18:04.900 --> 00:18:07.470
If you have turned off CodeSense,
if you've turned off indexing,

00:18:07.470 --> 00:18:08.850
you will not get class diagrams.

00:18:08.930 --> 00:18:11.900
If the index hasn't completed,
you won't get class diagrams,

00:18:11.900 --> 00:18:14.770
or you will get a partial
class diagram to the degree

00:18:14.770 --> 00:18:16.900
that the index is completed.

00:18:16.900 --> 00:18:20.900
So make sure that your index is complete
before trying to build class diagrams.

00:18:20.900 --> 00:18:25.260
And if you've structured your
project in a way that exploits some

00:18:25.260 --> 00:18:30.790
of the shortcomings in the indexer,
for example, you're including header

00:18:30.810 --> 00:18:35.900
files that have C++ classes,
but they're included from a .c file,

00:18:35.900 --> 00:18:38.900
the indexer will think that, well,
that header must be a C header,

00:18:38.900 --> 00:18:41.900
and so it can't possibly
contain index files.

00:18:41.900 --> 00:18:46.750
If your classes don't show up in
your project symbols smart group,

00:18:46.750 --> 00:18:49.900
they won't show up in the class diagram.

00:18:49.900 --> 00:18:51.870
File bugs, we know about them.

00:18:51.900 --> 00:18:54.900
We will fix them by the time it ships.

00:18:56.160 --> 00:18:58.130
So let's talk about core data models now.

00:18:58.140 --> 00:19:03.100
How many people went to the introduction
or advanced core data sessions yesterday?

00:19:03.100 --> 00:19:04.360
You've all seen this demo.

00:19:04.550 --> 00:19:04.960
Great.

00:19:05.000 --> 00:19:06.360
OK.

00:19:06.590 --> 00:19:11.020
So we will go a little more in depth
than what Andreas showed in those,

00:19:11.040 --> 00:19:15.010
but you've probably seen this
two or three times by now.

00:19:15.140 --> 00:19:18.780
Core data models are kind
of like class user models,

00:19:18.810 --> 00:19:23.440
but they model data objects in
a persistent store rather than

00:19:23.440 --> 00:19:26.600
modeling classes in your source code.

00:19:26.710 --> 00:19:30.240
Instead of inheritance relationships,
they have to-one and

00:19:30.300 --> 00:19:33.640
to-many relationships,
like you'd find in a database

00:19:33.640 --> 00:19:37.150
or in an XML datastore file,
rather than in the structure of

00:19:37.150 --> 00:19:39.880
an object-oriented piece of code.

00:19:40.200 --> 00:19:43.180
Just to recap what core data is about,
I probably don't need

00:19:43.190 --> 00:19:46.440
to tell you this again,
but it's object graph management

00:19:46.790 --> 00:19:48.740
for document-based applications.

00:19:48.750 --> 00:19:50.340
It'll manage your object lifecycle.

00:19:50.340 --> 00:19:51.800
It manages undo/redo.

00:19:51.800 --> 00:19:54.840
It manages validation and
relations between data objects.

00:19:54.870 --> 00:19:59.830
And it persists a graph of objects
either to a binary archive store,

00:19:59.960 --> 00:20:05.470
to an XML format,
or to a SQLite database.

00:20:05.670 --> 00:20:07.120
And it's driven by schemas.

00:20:07.120 --> 00:20:10.520
And that's why we have this design tool,
because we need a good way for you to

00:20:10.570 --> 00:20:14.820
create those schemas instead of having
to write a hunk of XML or to write

00:20:14.820 --> 00:20:17.280
a lot of code to create the schema.

00:20:17.280 --> 00:20:19.640
Schema is a model of
your persistent store.

00:20:19.640 --> 00:20:22.880
It's what objects are in your store
and how they relate to each other,

00:20:23.030 --> 00:20:27.200
structured by the containment
relationships between the objects,

00:20:27.360 --> 00:20:30.270
rather than by the class
relationships in your source code.

00:20:30.350 --> 00:20:32.180
And it's keyed to your
applications classes.

00:20:32.180 --> 00:20:34.600
But you can, of course,
have objects that aren't backed

00:20:34.600 --> 00:20:38.010
up by application classes,
but are instead interpreted by

00:20:38.010 --> 00:20:40.130
other pieces of source code.

00:20:40.260 --> 00:20:44.620
Entities in a data model are
like classes in a class model.

00:20:44.660 --> 00:20:48.050
Attributes in a data model
are like class variables.

00:20:48.230 --> 00:20:51.640
Relationships are like inheritance
or cap inheritance or category

00:20:51.640 --> 00:20:53.180
or protocol or whatever.

00:20:53.180 --> 00:20:55.580
And there's this new
thing called a fetch spec,

00:20:55.580 --> 00:20:59.100
which is essentially a database query.

00:20:59.570 --> 00:21:01.540
You make a schema in one of three ways.

00:21:01.540 --> 00:21:04.290
You can derive it from an XML.

00:21:04.300 --> 00:21:07.750
Now, you may-- I've gotten this
question several times this week.

00:21:07.830 --> 00:21:11.680
I have tried to feed XML into
the importer in the design tool,

00:21:11.680 --> 00:21:14.850
and it crashes, or it breaks,
or it doesn't work.

00:21:15.230 --> 00:21:18.700
Well, you're trying to feed
it somebody else's XML,

00:21:19.090 --> 00:21:19.700
not ours.

00:21:19.830 --> 00:21:24.830
Right now, the only XML we import is
the XML we've exported,

00:21:24.840 --> 00:21:28.560
because it's tagged
correctly to create a schema.

00:21:28.680 --> 00:21:31.890
We'll look at extending that in
the future and doing a more generic

00:21:31.890 --> 00:21:35.160
job of looking at an XML schema
or a DTD or something like that.

00:21:35.240 --> 00:21:39.990
But right now, when you read in the XML,
it's only the special XML that we

00:21:39.990 --> 00:21:41.890
ourselves have created on exporting it.

00:21:42.020 --> 00:21:46.390
You can, however,
derive it from your application sources.

00:21:46.400 --> 00:21:49.400
If you have an Objective-C application
with a bunch of classes that

00:21:49.540 --> 00:21:52.810
represent your data model,
you can take those classes and

00:21:52.810 --> 00:21:56.370
bring them right into the data model
and create a data model from them.

00:21:56.380 --> 00:21:58.440
That's probably the most useful thing.

00:21:58.440 --> 00:22:00.440
If you've got an existing application.

00:22:00.550 --> 00:22:03.330
Or if you're writing an application
from scratch and you want to

00:22:03.420 --> 00:22:06.700
start with the data model and then
build the classes up from there,

00:22:06.850 --> 00:22:12.010
you can start with a blank diagram and
then create the model from scratch.

00:22:12.170 --> 00:22:15.400
If you create it from scratch,
then you can just create new

00:22:15.400 --> 00:22:19.100
entities in the diagram with
New Entity from the Design menu,

00:22:19.110 --> 00:22:22.490
and then you enter the attributes
and you enter the relationships,

00:22:22.610 --> 00:22:24.440
and it's right there in your model.

00:22:24.500 --> 00:22:27.070
Then you can back it up with code.

00:22:27.790 --> 00:22:29.700
If you start with an
existing data schema,

00:22:29.700 --> 00:22:31.380
you import it from the XML.

00:22:31.380 --> 00:22:34.290
Once again, it's the XML we export.

00:22:34.510 --> 00:22:38.670
And if you create it from code,
then you just specify the code files

00:22:38.720 --> 00:22:45.300
to model just like you specified the
code files to create a class model from.

00:22:45.410 --> 00:22:48.800
The classes are mapped
into entities in the model,

00:22:48.820 --> 00:22:53.930
the instance variables become attributes,
and the pointers to other classes in

00:22:53.930 --> 00:22:56.920
that model become the relationships.

00:22:57.060 --> 00:23:01.440
Once you've created a model,
you can change the attributes,

00:23:01.440 --> 00:23:04.040
you can change the classes,
you can set values on them,

00:23:04.040 --> 00:23:07.600
you can do a lot more than
just use it for navigation.

00:23:07.690 --> 00:23:11.610
So we've added a data model browser
that lets you look at your objects,

00:23:11.610 --> 00:23:15.890
your entities, in tabular view,
and actually go in and inspect

00:23:15.890 --> 00:23:17.250
and change their values.

00:23:17.460 --> 00:23:21.640
And there's a detail editor that
lets you set the values on those

00:23:21.640 --> 00:23:25.600
entities in a very detailed way,
in a very powerful way.

00:23:25.690 --> 00:23:29.890
And here to demonstrate
that is Miguel Sanchez.

00:23:32.800 --> 00:23:36.800
Can you guys hear me?

00:23:36.940 --> 00:23:39.980
So my name is Miguel Sanchez,
and I'm here to walk you through

00:23:39.980 --> 00:23:46.300
the creation of a data model
based on reverse engineering code.

00:23:46.960 --> 00:23:49.650
I won't focus so much on
what we do with the code.

00:23:49.720 --> 00:23:52.340
For that,
I ask that you review the advanced core

00:23:52.400 --> 00:23:55.740
data session that we did yesterday,
because this is a tool session.

00:23:55.750 --> 00:23:59.690
I'm going to go more into detail as
to what is really going on at the

00:23:59.770 --> 00:24:02.480
tool level and behind the scenes.

00:24:02.610 --> 00:24:05.200
So what we have here is...

00:24:06.060 --> 00:24:09.120
Classes represent a
very simple mail system.

00:24:09.120 --> 00:24:13.200
We have things like account, headers,
mailbox, messages.

00:24:13.200 --> 00:24:16.530
We want to create the data
model that represents the

00:24:16.530 --> 00:24:18.360
entities for these classes.

00:24:18.400 --> 00:24:21.850
So, as we've seen before,
data models are just

00:24:21.850 --> 00:24:23.970
another type of file type.

00:24:24.010 --> 00:24:30.500
So, we can do "Add New File". You will
see a new file type called "Data

00:24:30.500 --> 00:24:36.960
Model". It's called this "My Model".

00:24:39.520 --> 00:24:42.050
This is where I'm going
to slow down a little bit.

00:24:42.050 --> 00:24:45.400
We have an assistant that
allows you to reverse engineer

00:24:45.460 --> 00:24:47.290
your code for data models.

00:24:47.300 --> 00:24:50.540
If you wanted an empty data model,
you would just click "Finish"

00:24:50.670 --> 00:24:53.870
without selecting any classes,
and that's how you get... There is

00:24:53.870 --> 00:24:58.150
no new empty model option anywhere,
so you just click "Finish". What we

00:24:58.150 --> 00:25:02.370
see here on the left-hand side is your
Groups and Files tree that you have in

00:25:02.420 --> 00:25:04.800
your Xcode window behind this assistant.

00:25:04.900 --> 00:25:09.580
So here we have all the .h's and
.m's you can find in your project.

00:25:09.670 --> 00:25:13.090
As I select a group,
for example in this case I'm going

00:25:13.090 --> 00:25:15.400
to select my "Data Classes" group,

00:25:16.170 --> 00:25:19.780
We get in the second table
view the list of classes that

00:25:19.780 --> 00:25:21.340
are contained in these files.

00:25:21.340 --> 00:25:23.940
Okay,
so an important thing is happening here.

00:25:23.990 --> 00:25:29.140
We're using the indexer to figure
out what classes really are contained

00:25:29.140 --> 00:25:30.940
inside those .h's and those .m's.

00:25:30.940 --> 00:25:33.810
So, if you happen to try this
at home and you see a little

00:25:33.810 --> 00:25:37.560
spinning wheel right about here,
I believe, that's because the

00:25:37.560 --> 00:25:39.200
indexing is not yet done.

00:25:39.310 --> 00:25:41.760
So, it's not that the assistant
is broken or anything,

00:25:41.760 --> 00:25:45.180
just wait for the indexing to be done,
and then that's how we can

00:25:45.180 --> 00:25:47.020
figure out the information.

00:25:47.020 --> 00:25:51.240
So, we select the group, we get classes,
we add all of the classes,

00:25:51.240 --> 00:25:54.230
because that's what we
want the model to contain,

00:25:54.270 --> 00:25:56.350
and we click finish.

00:25:58.760 --> 00:26:02.370
So here's a reversed engineer model.

00:26:02.380 --> 00:26:05.040
Let me hide the detail area there.

00:26:05.150 --> 00:26:06.130
For our classes.

00:26:06.140 --> 00:26:11.260
Now, the lines are not inheritance,
unlike the class demo you just saw.

00:26:11.260 --> 00:26:13.360
I'll talk a little bit more about that.

00:26:13.440 --> 00:26:15.810
So what was reverse engineering?

00:26:15.810 --> 00:26:17.400
What happened here?

00:26:17.440 --> 00:26:21.140
For each class that we
found in your files,

00:26:21.220 --> 00:26:22.860
we obviously created an entity.

00:26:22.860 --> 00:26:25.570
So we have the person
entity for the person class,

00:26:25.570 --> 00:26:27.640
the message.

00:26:27.940 --> 00:26:31.590
Your code contains IVARs.

00:26:31.800 --> 00:28:06.200
[Transcript missing]

00:28:06.650 --> 00:28:10.690
So that's what's going on with
the reverse engineering process.

00:28:10.720 --> 00:28:14.490
Now let's bring up the browser
view to get a little more detail

00:28:14.490 --> 00:28:17.060
into the editing of the model.

00:28:17.060 --> 00:28:20.560
A browser view contains the same
information that you see in your diagram,

00:28:20.560 --> 00:28:23.300
it's just in a tabular form.

00:28:23.310 --> 00:28:27.180
Let me hide this detail area first,
I'm going to talk about it later.

00:28:27.400 --> 00:28:30.870
So what you have here is a very
simple master-detail relationship.

00:28:30.880 --> 00:28:34.900
You have the list of entities
that you have in your model,

00:28:34.910 --> 00:28:37.600
and for each entity we display
the properties that are

00:28:37.600 --> 00:28:39.290
contained inside that entity.

00:28:39.300 --> 00:28:44.830
So as I select an entity here,
I'm going to get a different set of

00:28:44.830 --> 00:28:47.460
properties for each one of the entities.

00:28:47.590 --> 00:28:51.200
Now properties can either be
attributes or relationships.

00:28:51.230 --> 00:28:54.500
Let's look at the more
complex entity we have here,

00:28:54.500 --> 00:28:56.260
for example, message.

00:28:56.370 --> 00:28:57.300
Where's message here?

00:28:57.300 --> 00:28:58.520
We can sort on this.

00:28:58.640 --> 00:29:00.210
Message.

00:29:00.310 --> 00:29:03.100
So here are the combined
properties for message.

00:29:03.350 --> 00:29:04.920
We can sort by kind.

00:29:05.090 --> 00:29:07.680
We have attributes and relationships.

00:29:07.760 --> 00:29:10.860
So, properties can either be
attributes or relationships.

00:29:11.010 --> 00:29:13.370
But you might want,
structurally they're different things.

00:29:13.420 --> 00:29:15.740
Attributes have certain
fields that you can access,

00:29:15.780 --> 00:29:18.260
and relationships have certain
things you can do with them.

00:29:18.360 --> 00:29:21.350
So here we're showing you
things as properties combined,

00:29:21.410 --> 00:29:24.790
so we have a minimum set
of common fields for them.

00:29:25.100 --> 00:29:28.120
But if you click on this
corner area right here,

00:29:28.290 --> 00:29:31.430
you can choose to see
only the attributes.

00:29:31.870 --> 00:29:36.490
or only relationships, or fetch requests,
which we don't reverse

00:29:36.490 --> 00:29:37.560
engineer right now.

00:29:37.560 --> 00:29:39.360
But we have attributes.

00:29:39.360 --> 00:29:42.250
So it's not just a filtering mechanism,
we're actually changing,

00:29:42.250 --> 00:29:45.600
notice that we changed the available
columns that you have for you,

00:29:45.600 --> 00:29:48.400
because structurally
they're different things.

00:29:48.400 --> 00:29:51.490
Now speaking of columns,
you don't start out seeing

00:29:51.490 --> 00:29:55.060
everything that you have
available for simplicity reasons.

00:29:55.060 --> 00:29:57.510
We don't wanna confuse you,
but there's a lot more stuff in there.

00:29:57.530 --> 00:30:00.490
So for example,
here in the entities table view,

00:30:00.490 --> 00:30:04.380
we're only showing you
the name of the entity.

00:30:04.380 --> 00:30:08.610
If you option click, I'm sorry,
control click on the column name,

00:30:08.610 --> 00:30:11.320
you get to see all the other
columns that you can add,

00:30:11.320 --> 00:30:13.900
whether the entity's abstract,
a class that it maps to,

00:30:13.900 --> 00:30:17.130
I'm gonna add all of them in this case.

00:30:17.180 --> 00:30:18.160
So that's how you add.

00:30:18.340 --> 00:30:21.340
Remember, if you don't see the columns
you might expect to see there,

00:30:21.340 --> 00:30:23.090
just add them.

00:30:23.110 --> 00:30:25.670
So, let's go back to message.

00:30:26.940 --> 00:30:29.050
I'm going to see attributes.

00:30:29.310 --> 00:30:31.940
What kind of columns do I have
available for my attributes?

00:30:31.940 --> 00:30:36.030
Well, the attribute, the type,
whether it's optional or not, transient,

00:30:36.030 --> 00:30:40.080
minimum value, maximum value,
I'm going to show all of them.

00:30:40.520 --> 00:30:44.480
And for relationships,
we have the destination,

00:30:44.480 --> 00:30:49.550
the inverse relationship, min count,
max count, let's show all of them.

00:30:50.550 --> 00:30:55.220
Now, the columns inside the table
views here are editable.

00:30:55.220 --> 00:30:58.240
So, for example, for a relationship here,

00:30:58.460 --> 00:31:01.980
Here's the relationship to address,
the relationship to mailbox.

00:31:01.980 --> 00:31:06.940
I can change the destination by just
selecting the appropriate entity here.

00:31:07.100 --> 00:31:12.190
So you have all the content
is editable both in the table

00:31:12.260 --> 00:31:15.130
views and in the diagram view.

00:31:15.420 --> 00:31:22.970
Now let's go to the detail editor,
which I hit before.

00:31:22.970 --> 00:31:22.970
Let me bring it up again.

00:31:23.420 --> 00:31:28.930
So here, this is another area where
you can edit your information.

00:31:29.000 --> 00:31:33.180
It behaves in a particular way because
you can have two kinds of details,

00:31:33.180 --> 00:31:33.610
right?

00:31:33.620 --> 00:31:37.060
You can have the detail for the
entity if you're clicking here.

00:31:37.160 --> 00:31:40.190
So if I click on an entity,
you'll notice that this

00:31:40.190 --> 00:31:43.740
little "e" here highlights,
and the fields that you see over

00:31:43.740 --> 00:31:45.530
here correspond to the entity.

00:31:45.550 --> 00:31:48.430
So it's the entity name, the class,
the parent.

00:31:48.610 --> 00:31:53.370
If I click, let me go back to a class
that has a lot of properties.

00:31:53.770 --> 00:31:58.780
If I click on a property,
the little "p" here highlights,

00:31:58.780 --> 00:32:03.340
and the detail here being shown is the
detail for the property I'm editing.

00:32:03.340 --> 00:32:08.590
So, I can be editing a property and then
want to go back to the entity that it

00:32:08.590 --> 00:32:14.870
belongs to and edit the entity detail
or go back to the property detail.

00:32:14.990 --> 00:32:17.920
And of course,
if you select a relationship,

00:32:17.920 --> 00:32:20.010
the detail looks different.

00:32:20.090 --> 00:32:23.980
Now, you might ask,
"Why do I want an extra editable area

00:32:23.980 --> 00:32:28.820
here if I can do a lot of the stuff
in the diagram view or right here,

00:32:28.820 --> 00:32:32.120
right in the tables?" Well,
this comes in handy for

00:32:32.170 --> 00:32:33.860
multiple selections.

00:32:33.970 --> 00:32:37.730
Let's say I select all of my entities.

00:32:38.550 --> 00:32:42.500
And I look at all the properties
inside all of those entities.

00:32:42.500 --> 00:32:45.120
So now,
this middle area here is showing me the

00:32:45.120 --> 00:32:48.500
list of all the available properties
in all the entities I selected.

00:32:48.500 --> 00:32:50.990
You'll notice that we
added a column here,

00:32:51.010 --> 00:32:54.630
"Entity", automatically when we
detected multiple selections,

00:32:54.630 --> 00:32:57.500
so that you know which
entity you're dealing with.

00:32:57.500 --> 00:33:01.920
Now,
let's look at properties as attributes.

00:33:02.220 --> 00:33:04.580
And let's sort by type.

00:33:04.710 --> 00:33:07.160
And let's look at all the
attributes that were reversed

00:33:07.160 --> 00:33:10.450
engineered to be integers 32.

00:33:10.590 --> 00:33:13.290
If I multiple select these,

00:33:13.480 --> 00:33:20.630
I can set all of them to be
integer 64s in one stroke,

00:33:20.630 --> 00:33:20.630
okay?

00:33:23.300 --> 00:33:26.300
So that's the motivation
of this detail area.

00:33:26.300 --> 00:33:32.020
And we're still...
I think we got everything,

00:33:32.020 --> 00:33:36.530
all of the fields in here in the
table view in an editable form.

00:33:36.650 --> 00:33:39.070
Let's see,
one last thing about the detail area.

00:33:39.090 --> 00:33:44.610
So you have the entities area,
the properties, these two icons here.

00:33:45.220 --> 00:33:48.370
The one on the left shows you
the detail which I've been

00:33:48.370 --> 00:33:50.150
talking about all this time.

00:33:50.220 --> 00:33:53.340
The "i" stands for User Info Dictionary.

00:33:53.370 --> 00:33:56.290
Now, entities and properties,
and properties whether they be

00:33:56.290 --> 00:33:59.850
attributes or relationships,
can contain a User Info Dictionary.

00:33:59.900 --> 00:34:05.260
This is just an area where you can add
your own keys and values for however

00:34:05.260 --> 00:34:07.910
you want to use them in your code.

00:34:07.990 --> 00:34:10.680
If you look at the API for
NSAttributeDescription

00:34:10.740 --> 00:34:13.470
and NSEntityDescription,
you'll see you can get

00:34:13.540 --> 00:34:16.020
to and set a dictionary.

00:34:16.020 --> 00:34:17.820
This is where you would
be setting a dictionary.

00:34:17.820 --> 00:34:19.940
It's the same thing for
no matter what I select.

00:34:19.990 --> 00:34:23.320
I can select a property
or I can select an entity.

00:34:23.470 --> 00:34:26.020
User Info Dictionary is
just a User Info Dictionary.

00:34:26.050 --> 00:34:28.820
Don't be confused by these fields.

00:34:28.820 --> 00:34:31.110
Remember what part you want to edit.

00:34:31.150 --> 00:34:32.380
I select an entity.

00:34:32.380 --> 00:34:33.540
Where is its detail?

00:34:33.850 --> 00:34:37.660
Let's look at the general fields for
that entity or the User Info Dictionary.

00:34:37.710 --> 00:34:42.650
The last kind of property
I want to talk about are these

00:34:42.650 --> 00:34:45.700
things called FetchRequest.

00:34:45.700 --> 00:34:50.180
Let's go to Message and
look at Properties.

00:34:50.760 --> 00:34:56.380
Think of fetch requests as a
pre-built query into your dataset.

00:34:56.380 --> 00:35:01.380
I want to get all of the messages
that meet a certain criteria.

00:35:01.380 --> 00:35:04.120
To build the query,
you need a Boolean editor.

00:35:04.120 --> 00:35:07.230
Let's add a fetch request here.

00:35:07.310 --> 00:35:08.740
My request.

00:35:13.970 --> 00:35:17.280
So we have something
called a Predicate Builder.

00:35:17.320 --> 00:35:21.600
A Predicate Builder is a
graphical Boolean equation editor.

00:35:21.680 --> 00:35:26.810
So you can add nodes and combine
them with ANDs and ORs and... I'm not

00:35:26.810 --> 00:35:31.880
going to go into detail of creating a
sophisticated Boolean expression here,

00:35:32.360 --> 00:35:36.400
but basically this is where you would
define criteria that you will eventually

00:35:36.400 --> 00:35:39.080
use at runtime to fetch your dataset.

00:35:39.180 --> 00:35:43.890
Now, the Boolean equation is simply
made up by key-value comparisons.

00:35:44.150 --> 00:35:48.970
The keys come from the
entity that you selected,

00:35:48.970 --> 00:35:50.700
and depending on the kind
of key you're selecting,

00:35:50.700 --> 00:35:52.780
you have a set of values
that you can query on.

00:35:52.800 --> 00:35:57.120
You can query on dates,
on a Boolean value, on strings,

00:35:57.120 --> 00:35:58.250
on numbers.

00:35:58.330 --> 00:36:01.070
So this is a pretty
nifty graphical editor.

00:36:01.080 --> 00:36:04.950
I mean,
you're able to do things like dragging

00:36:05.040 --> 00:36:08.040
nodes between different places.

00:36:08.110 --> 00:36:08.880
So there's a lot.

00:36:08.900 --> 00:36:11.690
you can do with this editor, okay?

00:36:11.860 --> 00:36:14.740
Oh, okay,
I think that covers the highlights

00:36:14.790 --> 00:36:17.430
of the data model editing.

00:36:17.430 --> 00:36:20.390
Oh, one last thing Andreas wanted
me to show you here.

00:36:20.480 --> 00:36:24.490
You saw that Andreas, Stefan,
in his previous demo kept

00:36:24.580 --> 00:36:26.320
opening these things up.

00:36:26.320 --> 00:36:28.740
Now, this is your same document now,
right?

00:36:28.840 --> 00:36:30.700
The data is now your model.

00:36:30.800 --> 00:36:35.240
You're used to opening multiple
windows of your text information,

00:36:35.240 --> 00:36:38.090
and as you type things in one area,
you obviously see them

00:36:38.200 --> 00:36:39.270
updated in the other area.

00:36:40.340 --> 00:36:43.120
The model information is your model,
is the data.

00:36:43.120 --> 00:36:47.150
So, if you move things around,
they're moved in the other editor.

00:36:47.160 --> 00:36:51.010
Okay,
so that's the whole thing is your model,

00:36:51.010 --> 00:36:53.950
including the browser area.

00:36:53.960 --> 00:36:57.280
So, for the next demo,
after a few more slides from Chris,

00:36:57.280 --> 00:37:00.320
we're going to build an
actually running application,

00:37:00.360 --> 00:37:02.160
but that's it for this demo.

00:37:02.160 --> 00:37:04.400
Thanks, Miguel.

00:37:09.190 --> 00:37:11.170
So you've seen two ways in
which the data models are

00:37:11.170 --> 00:37:12.670
different from the class models.

00:37:12.770 --> 00:37:19.070
First, that they model the data elements
and are heavily editable so

00:37:19.070 --> 00:37:24.080
that you can go in and change
things and set settings on them.

00:37:24.210 --> 00:37:27.580
There's another way in which they're
different in that data models are

00:37:27.880 --> 00:37:32.820
essentially source files in your project,
and they are built into object files

00:37:32.820 --> 00:37:36.020
using the standard Xcode build system.

00:37:36.170 --> 00:37:39.100
This is important not just for data
models for Core Data Framework,

00:37:39.100 --> 00:37:45.100
but for other models we'll add in the
future where you need to model something,

00:37:45.100 --> 00:37:49.210
run it through a process at build time,
and create an artifact,

00:37:49.220 --> 00:37:51.890
a compiled thing that you
deliver with your application

00:37:52.230 --> 00:37:54.080
for other data-driven frameworks.

00:37:54.150 --> 00:37:57.920
For example, well,
just say Cocoa Scripting comes to mind.

00:37:58.240 --> 00:38:01.980
So we have built that structure
into the plugin architecture of

00:38:01.980 --> 00:38:06.100
the design tools so that any design
tool can have a built-in compiler.

00:38:06.240 --> 00:38:10.510
Or have a compiler spec that runs some
other process on the system to process

00:38:10.510 --> 00:38:15.090
its model at build time and create
something in your deployed executable.

00:38:15.100 --> 00:38:21.090
So in just the same way that a C file is
transformed into a .o file at build time,

00:38:21.090 --> 00:38:25.790
a model file is transformed into,
in this case, a .mom file,

00:38:25.790 --> 00:38:28.710
a managed object model schema file.

00:38:28.800 --> 00:38:30.600
And when you build a
Core Data Application,

00:38:30.930 --> 00:38:36.240
just like your object code is
combined into an executable that's

00:38:36.240 --> 00:38:40.730
in the Mac OS folder in your bundle,
the MOM file is tossed

00:38:40.880 --> 00:38:44.620
into the resource file,
and it's just built there by

00:38:44.670 --> 00:38:46.490
the standard Xcode build rules.

00:38:46.500 --> 00:38:50.880
So Miguel's going to show you how
to build a Core Data Application and

00:38:50.880 --> 00:38:52.890
how the pieces go together.

00:38:53.800 --> 00:38:57.000
Hi everyone, it's me again.

00:38:57.000 --> 00:39:01.000
So now we're going to build a
functioning Core Data application.

00:39:01.000 --> 00:39:03.990
You've seen this again in the
Core Data sessions before,

00:39:04.080 --> 00:39:04.780
earlier in the week.

00:39:04.830 --> 00:39:08.550
But we're going to go through it again
in a lot more detail as to what's

00:39:08.550 --> 00:39:10.800
really happening at the tool level.

00:39:10.800 --> 00:39:14.400
So I'm going to create a new project.

00:39:15.170 --> 00:39:17.800
You'll notice that
there's two new templates.

00:39:17.840 --> 00:39:20.880
They're analogous to the pre-existing
Cocoa templates that we have,

00:39:20.880 --> 00:39:21.680
we've always had.

00:39:21.720 --> 00:39:24.980
So we have now a core data
application template and a core data

00:39:24.980 --> 00:39:27.080
document-based application template.

00:39:27.120 --> 00:39:29.100
I'm going to create one of these.

00:39:29.100 --> 00:39:31.670
Let's call it "demo."

00:39:35.000 --> 00:39:36.460
What's new in this template?

00:39:36.520 --> 00:39:38.650
What do you get?

00:39:38.860 --> 00:39:40.970
Well, you get three big things.

00:39:41.050 --> 00:39:45.270
The first is that you're automatically
linked against the Core Data Framework,

00:39:45.270 --> 00:39:47.580
obviously, because you'll be using it.

00:39:47.730 --> 00:39:50.100
You get a slight change
in your document class.

00:39:50.180 --> 00:39:52.800
Oh, let me fix the font here.

00:39:52.810 --> 00:39:57.360
There's a problem with the tree view.

00:39:57.370 --> 00:40:01.330
I have to reset the
font for it to redraw.

00:40:03.120 --> 00:40:05.270
Okay, that's better.

00:40:05.270 --> 00:40:07.630
So we're linked against
the Core Data Framework,

00:40:07.730 --> 00:40:09.090
first difference.

00:40:09.150 --> 00:40:12.900
Second difference,
we give you a document file,

00:40:12.900 --> 00:40:14.500
just like we give you
in the other template,

00:40:14.500 --> 00:40:17.910
except that this document file
inherits from this new class

00:40:18.020 --> 00:40:19.970
called NS Persistent Document.

00:40:19.980 --> 00:40:22.040
I'm not going to go into
the details of the class,

00:40:22.040 --> 00:40:23.810
just want to show you the difference.

00:40:23.940 --> 00:40:26.290
And the third difference with
this template is that we give

00:40:26.290 --> 00:40:30.300
you a blank model where you'll
be putting your entities,

00:40:30.300 --> 00:40:33.260
either by reverse engineering
or creating new entities.

00:40:33.380 --> 00:40:35.940
But we're going to do
everything from scratch here.

00:40:36.120 --> 00:40:38.740
Let's bring up the browser area.

00:40:38.860 --> 00:40:42.210
I'm going to create a very simple
model that has two entities,

00:40:42.250 --> 00:40:45.940
a person entity and an address entity,
and they'll be related.

00:40:46.040 --> 00:40:48.660
So let's create two entities.

00:40:50.150 --> 00:40:52.660
I'm also showing you the
editing features here.

00:40:52.660 --> 00:40:55.340
So the first entity I'll
edit here in the table view,

00:40:55.340 --> 00:40:58.660
it's called Person.

00:40:58.740 --> 00:41:02.220
The second entity we'll
edit in the diagram view,

00:41:02.220 --> 00:41:03.730
it's called Address.

00:41:05.610 --> 00:41:09.840
Let's add two attributes to the entity,
to the person entity.

00:41:09.850 --> 00:41:13.380
Let me expand all of
my compartments here.

00:41:13.380 --> 00:41:18.930
We have the same mechanisms that you saw,
Stefan, demo in the class diagrams,

00:41:18.930 --> 00:41:20.660
so we can expand all.

00:41:21.370 --> 00:41:22.630
So we're in person.

00:41:22.880 --> 00:41:26.800
This one,
this will have a field called First Name.

00:41:29.260 --> 00:41:32.690
And this will have a
field called Last Name.

00:41:32.700 --> 00:41:34.800
Oops.

00:41:34.880 --> 00:41:39.740
Did I just write the whole
thing backwards there?

00:41:39.810 --> 00:41:40.830
And then we go to Address.

00:41:40.900 --> 00:41:42.520
We add another field.

00:41:42.550 --> 00:41:44.810
This will be the street.

00:41:48.320 --> 00:41:51.700
And this will have a
field called Last Name.

00:41:51.700 --> 00:41:53.790
Oops.

00:41:53.810 --> 00:41:58.730
Did I just write the whole
thing backwards there?

00:41:58.740 --> 00:41:59.840
And then we go to Address.

00:41:59.840 --> 00:42:01.520
We add another field.

00:42:02.660 --> 00:42:05.440
Now let's add a relationship
between these two entities.

00:42:05.440 --> 00:42:11.170
So we select person,
we click on this little plus R here,

00:42:11.450 --> 00:42:12.740
We now have a relationship.

00:42:12.920 --> 00:42:17.350
The relationship will be called
the main address of the person.

00:42:19.730 --> 00:42:23.840
The destination will obviously
be the address entity.

00:42:23.840 --> 00:42:26.920
You get the line,
and it's a one-to-one relationship,

00:42:26.920 --> 00:42:31.340
and that's about all I'm gonna do
with the relationship right now.

00:42:31.930 --> 00:42:34.500
So let's look at the NIV that we got.

00:42:34.500 --> 00:42:35.660
It doesn't have much.

00:42:35.660 --> 00:42:37.400
It's empty.

00:42:39.650 --> 00:42:44.200
Let's create a simple UI for this model.

00:42:44.200 --> 00:42:46.700
So, all I'm going to do is...

00:42:47.350 --> 00:42:51.150
I'm going to option drag
person into the .niv file,

00:42:51.150 --> 00:42:52.380
and I'm going to drop it there.

00:42:52.380 --> 00:42:55.980
And Interface Builder comes up and says,
"Do you want a UI that handles many

00:42:55.980 --> 00:42:59.980
objects or one object?" So I want
a UI that handles many objects.

00:42:59.980 --> 00:43:00.900
So there's the UI.

00:43:01.000 --> 00:43:02.940
Now...

00:43:06.500 --> 00:43:08.980
We've only shown you
this three times before,

00:43:09.030 --> 00:43:12.380
but thanks for clapping.

00:43:14.140 --> 00:43:15.800
So what happened here?

00:43:15.800 --> 00:43:21.100
For each app, for the person,
we gave you a table view where

00:43:21.100 --> 00:43:23.500
you can see multiple people.

00:43:23.500 --> 00:43:25.930
That's the kind of UI I chose to create.

00:43:26.030 --> 00:43:27.440
Where did the columns come from?

00:43:27.440 --> 00:43:31.250
I got a column for each one of the
attributes I have in my person,

00:43:31.250 --> 00:43:35.190
and of course a detail selection
area here to edit whatever I have

00:43:35.190 --> 00:43:37.530
selected in my table view here.

00:43:37.730 --> 00:43:39.830
Add/remove buttons.

00:43:39.910 --> 00:43:41.300
So let's do the same thing for the add.

00:43:41.300 --> 00:43:43.240
Notice that because we
have a relationship,

00:43:43.240 --> 00:43:45.290
I don't think we had shown
you this in the other demo.

00:43:45.290 --> 00:43:47.180
I don't remember the relationship part.

00:43:47.270 --> 00:43:49.340
We have the main address
as a pop-up here.

00:43:49.380 --> 00:43:54.170
But we need a UI to enter addresses too.

00:43:54.250 --> 00:44:00.180
So let's go over here, click on address,
also drag it there.

00:44:00.180 --> 00:44:04.010
Yeah, I want the same thing.

00:44:04.010 --> 00:44:04.010
There's the UI.

00:44:05.800 --> 00:44:08.800
Let's just put it there.

00:44:08.800 --> 00:44:09.000
Okay.

00:44:09.000 --> 00:44:09.750
So the same thing happened.

00:44:09.760 --> 00:44:13.460
We got a multiple UI for
editing multiple addresses.

00:44:13.460 --> 00:44:15.440
The street.

00:44:15.500 --> 00:44:19.940
So let's create an interface builder,
get back to our model.

00:44:19.950 --> 00:44:20.240
Okay.

00:44:20.240 --> 00:44:22.230
So here's where some new stuff happens.

00:44:22.300 --> 00:44:25.240
I'm going to build.

00:44:25.240 --> 00:44:28.000
What is happening when we're building?

00:44:29.180 --> 00:44:31.400
We're compiling, obviously,
your source code.

00:44:31.400 --> 00:44:33.190
You're all familiar with that.

00:44:33.380 --> 00:44:35.490
But we're also compiling this.

00:44:35.560 --> 00:44:37.080
We're also compiling the data model.

00:44:37.090 --> 00:44:40.580
I don't think we have mentioned
that in any other session.

00:44:40.650 --> 00:44:45.080
If you go into your targets area here,
and you look at your sources,

00:44:45.110 --> 00:44:48.800
you'll notice that as a
source you have your .ems,

00:44:48.880 --> 00:44:52.600
but now you have this new type of file,
which are your actual model files.

00:44:52.600 --> 00:44:55.590
Now, what does it mean to
compile a model file?

00:44:55.710 --> 00:44:58.600
Well,
let's look at it and see what's in it.

00:44:58.600 --> 00:45:01.600
Let's reveal this model
file in the finder.

00:45:01.600 --> 00:45:03.480
So, these are your project classes.

00:45:03.520 --> 00:45:05.600
This is the model file you're editing.

00:45:05.600 --> 00:45:06.600
Let's look at it.

00:45:06.600 --> 00:45:08.600
You shouldn't do this at
home because it's private,

00:45:08.600 --> 00:45:10.600
but I'll show it to you here.

00:45:10.600 --> 00:45:13.380
So,
what you'll see inside that model file

00:45:13.380 --> 00:45:18.600
are the internal files we use in the tool
to keep track of what you're editing.

00:45:18.600 --> 00:45:22.600
So, we have an archived version of
your elements and the layout.

00:45:22.600 --> 00:45:27.630
And all this extra private secret
stuff that we have to make the

00:45:27.630 --> 00:45:30.600
editing experience nice for you.

00:45:30.600 --> 00:45:33.580
But the runtime doesn't need this thing.

00:45:33.650 --> 00:45:37.600
The runtime is simply interested in the
structural information of your entities.

00:45:37.600 --> 00:45:39.580
So, that is what compiling means.

00:45:39.600 --> 00:45:43.170
Compiling means translating this
data model file into a highly

00:45:43.170 --> 00:45:45.580
optimized runtime version of the file.

00:45:45.600 --> 00:45:48.740
And the extension of that
compiled version is what we've

00:45:48.740 --> 00:45:50.550
been calling the .mom file.

00:45:50.620 --> 00:45:51.120
So, if we look into the build,
we'll see that the file

00:45:51.170 --> 00:45:51.600
is actually a .mom file.

00:45:51.600 --> 00:45:52.150
So, if we look into the build,
we'll see that the file

00:45:52.150 --> 00:45:52.600
is actually a .mom file.

00:45:52.600 --> 00:45:54.400
So I build output here.

00:45:54.400 --> 00:45:56.710
Here's my compiled application.

00:45:57.020 --> 00:45:58.900
Let's go look into it inside.

00:45:58.900 --> 00:46:03.900
The content, you'll see that in the
resources directory,

00:46:03.900 --> 00:46:06.900
you will have a file that has
the same name as the model

00:46:06.900 --> 00:46:10.900
you were creating in the tool,
but it has the extension .mom.

00:46:10.900 --> 00:46:14.900
So this is the file that the
framework loads at runtime.

00:46:14.900 --> 00:46:16.900
It's found in the resources directory.

00:46:16.900 --> 00:46:19.970
And if you have multiple files,
we load all of them and we combine

00:46:19.970 --> 00:46:21.900
them and you get all of the entities.

00:46:21.920 --> 00:46:24.990
Okay, so I wanted to...

00:46:25.280 --> 00:46:31.440
How many people have used the
old DO Modeler and old DOF?

00:46:31.580 --> 00:46:34.940
The main difference here is that
the tool model and the runtime

00:46:34.940 --> 00:46:36.360
model are different things.

00:46:36.420 --> 00:46:39.900
It used to be the same file in the past.

00:46:40.040 --> 00:46:42.920
Now let's run the application.

00:46:45.320 --> 00:46:46.720
So here's our UI.

00:46:46.720 --> 00:46:51.760
When I did the Dragon Interface Builder,
all of the bindings were set

00:46:51.770 --> 00:46:53.300
for me and everything works.

00:46:53.360 --> 00:46:56.220
It might seem like magic,
but it's all there for you.

00:46:56.250 --> 00:46:57.660
We just do the work for you.

00:46:57.660 --> 00:46:58.900
We don't really hide anything.

00:46:58.900 --> 00:47:00.660
You can always go into
the NIV and change things.

00:47:00.660 --> 00:47:05.500
So I can add... We've demoed this before,
so I'm just going to go quickly

00:47:05.500 --> 00:47:08.610
and... Here I can add myself.

00:47:08.790 --> 00:47:11.800
I need to have an address,
so I add an address.

00:47:11.800 --> 00:47:14.720
I live in 1 Main Street.

00:47:14.810 --> 00:47:17.300
You'll notice at the
moment I add an address,

00:47:17.300 --> 00:47:21.010
it shows up in the pop-up here,
because this is all being handled

00:47:21.010 --> 00:47:22.740
by the Core Data Framework.

00:47:22.750 --> 00:47:25.410
So I have my address,
and I'm going to save it.

00:47:25.430 --> 00:47:27.300
What I want to show you is
what happens when we save.

00:47:27.300 --> 00:47:31.510
So I'm going to save in XML format.

00:47:31.510 --> 00:47:32.620
My doc.

00:47:32.620 --> 00:47:35.090
Let's go in my data.

00:47:36.330 --> 00:47:38.540
We save.

00:47:38.540 --> 00:47:40.640
We'll quit the application.

00:47:40.640 --> 00:47:42.940
What I want to show you
is where the saving,

00:47:42.980 --> 00:47:46.790
what happened with the save.

00:47:47.150 --> 00:47:48.100
Where did I put it?

00:47:48.100 --> 00:47:50.180
I didn't put it... Oh, WWDC.

00:47:50.260 --> 00:47:51.100
Thank you.

00:47:51.100 --> 00:47:54.100
Speak as one.

00:47:54.100 --> 00:47:56.090
So, here's our XML file.

00:47:56.090 --> 00:47:59.100
What I wanted to show
you was what's inside it.

00:47:59.100 --> 00:48:02.100
So let's open it in... I hate my data.

00:48:02.140 --> 00:48:02.870
Oh, right.

00:48:02.870 --> 00:48:04.270
That's a different one.

00:48:04.280 --> 00:48:05.100
My data one.

00:48:05.100 --> 00:48:09.110
Everything was going so well.

00:48:16.100 --> 00:48:17.160
So that's the XML.

00:48:17.160 --> 00:48:19.990
It's a human-readable
representation of your file.

00:48:20.000 --> 00:48:23.510
You have structural information
as to the last name,

00:48:23.570 --> 00:48:26.000
first name, and the actual content.

00:48:26.060 --> 00:48:28.000
Now, why did I show you this file?

00:48:28.000 --> 00:48:29.000
So you have the three files, right?

00:48:29.000 --> 00:48:31.000
You have the file that
you're editing the tool,

00:48:31.000 --> 00:48:34.990
the thing that's compiled to a .mom,
and where the data is actually stored.

00:48:35.000 --> 00:48:37.310
I just wanted to briefly
mention something,

00:48:37.380 --> 00:48:40.000
highlight something that
Chris had mentioned.

00:48:40.200 --> 00:48:43.530
You've seen that in other
sessions we do this thing called,

00:48:43.540 --> 00:48:46.000
we use this import function, right?

00:48:46.000 --> 00:48:46.990
What does importing do?

00:48:47.020 --> 00:48:51.000
Importing, now that you know what all
of the files are about,

00:48:51.000 --> 00:48:54.950
if you want to experiment
with the import function,

00:48:55.010 --> 00:49:00.000
the only things that you can import
are the .mom file or the XML files,

00:49:00.000 --> 00:49:00.850
okay?

00:49:01.000 --> 00:49:03.000
Because they don't have
any visual information.

00:49:03.000 --> 00:49:06.000
They're kind of optimized or
compiled versions of your data.

00:49:06.100 --> 00:49:08.620
But if you want to kind of
reverse engineer the entities

00:49:08.620 --> 00:49:13.000
that are inside those files,
you can always import them back in.

00:49:13.000 --> 00:49:15.800
And you need to import into a blank file,
so you first need to create the

00:49:15.800 --> 00:49:17.950
model and then do the import.

00:49:18.000 --> 00:49:21.610
So that was the secret that
we've been using for the last two

00:49:21.720 --> 00:49:25.000
days or three days in the demos,
the importing functionality.

00:49:25.000 --> 00:49:26.990
And that's it for this demo.

00:49:27.010 --> 00:49:27.830
Great.

00:49:27.830 --> 00:49:29.590
Thanks, Miguel.

00:49:34.910 --> 00:49:37.400
If you want to see more
of how that magic worked,

00:49:37.400 --> 00:49:40.810
we'll all be in the Xcode
lab at the end of the hall on

00:49:40.810 --> 00:49:42.800
the left after this session.

00:49:42.800 --> 00:49:45.600
So you can come play with the tool.

00:49:45.600 --> 00:49:46.800
We'll show you how to use it.

00:49:46.800 --> 00:49:50.790
Most of the stuff that you've
seen here you can do at home.

00:49:50.830 --> 00:49:53.800
We've made some changes in the version
that we're using here at the show,

00:49:53.800 --> 00:49:58.610
but you've got pretty much everything
you need to recreate these demos on your

00:49:58.610 --> 00:50:03.780
Tiger Preview disk and with Xcode 2.0,
so you can try this at home.

00:50:05.340 --> 00:50:08.350
Data modeling, as you can see,
really helps you build and

00:50:08.370 --> 00:50:12.350
navigate your schemas graphically,
create models directly from code

00:50:12.350 --> 00:50:16.020
or from XML that we've exported,
and to build your entire core data

00:50:16.020 --> 00:50:20.390
application in the Xcode tool without
having to go out to separate tools.

00:50:20.400 --> 00:50:24.740
I think you'll find that the integration
of the design tool into your workflow

00:50:24.740 --> 00:50:28.660
is really going to significantly
help and accelerate your experience

00:50:28.740 --> 00:50:31.000
in building core data applications.

00:50:31.140 --> 00:50:33.400
So,
I've given you a taste of the two main

00:50:33.400 --> 00:50:35.980
plugins that you get with Xcode 2.0.

00:50:36.330 --> 00:50:39.400
As you can see,
we put in a pretty big architecture,

00:50:39.400 --> 00:50:41.800
the diagramming architecture,
the modeling architecture,

00:50:41.800 --> 00:50:45.050
the building architecture,
to make it possible for us to

00:50:45.050 --> 00:50:47.600
extend the design tools over time.

00:50:47.730 --> 00:50:49.860
Matt Formica is here,
and so I'm going to give the

00:50:49.860 --> 00:50:52.960
obligatory Matt Formica "we are
not talking about anything beyond

00:50:52.990 --> 00:50:58.350
Tiger at this point" explanation,
but I want to give you some idea

00:50:58.360 --> 00:51:00.590
of where we think it's going.

00:51:00.600 --> 00:51:02.910
Just so we don't have to listen
to you come up to the mic and say,

00:51:02.910 --> 00:51:05.140
"You know,
it would be a great idea if you..." and

00:51:05.140 --> 00:51:11.000
then we'd say thank you for the feedback,
which will happen anyway.

00:51:11.060 --> 00:51:14.160
There are a lot of data-driven
frameworks in Mac OS X,

00:51:14.160 --> 00:51:17.630
and it would make sense to model
these things with a modeling

00:51:17.680 --> 00:51:21.880
tool rather than having you write
XML files or configuration files.

00:51:22.060 --> 00:51:25.040
Doing your Apple scriptability
for your Cocoa application in a

00:51:25.050 --> 00:51:26.830
model would make a lot more sense.

00:51:26.900 --> 00:51:30.200
We wanted a modeling tool for
scriptability for a long time.

00:51:30.200 --> 00:51:33.200
We think that we can move
this in that direction.

00:51:33.200 --> 00:51:37.400
The preferences, the iSync kit,
those are all great candidates

00:51:37.400 --> 00:51:41.800
for having modeling tools added,
and we're looking at those.

00:51:41.800 --> 00:51:45.650
And even looking at your
interface builder nib file as

00:51:45.650 --> 00:51:50.200
a diagram of the objects rather
than as things on the screen.

00:51:50.200 --> 00:51:51.790
I see there's demand for that.

00:51:51.800 --> 00:51:53.800
This is what we want.

00:51:54.520 --> 00:51:58.740
We're also going to improve the plugins
we've got and extend the class modeling.

00:51:58.770 --> 00:52:02.100
The primary thing that we
know you're going to ask for,

00:52:02.100 --> 00:52:04.170
because it's kind of obvious
and we do it in Interface

00:52:04.260 --> 00:52:09.590
Builder and other tools do it,
is, well, if I can do detailed editing of

00:52:09.590 --> 00:52:13.080
the data model with that browser,
well, why don't you have one of those so

00:52:13.080 --> 00:52:16.360
I can do it in the class model as well,
so I can actually change my

00:52:16.360 --> 00:52:20.070
source code or even create new
classes right in the diagram and

00:52:20.070 --> 00:52:21.990
have the source files created?

00:52:22.210 --> 00:52:24.370
It is harder than it sounds.

00:52:24.470 --> 00:52:27.100
It's easier than it looks.

00:52:27.140 --> 00:52:29.210
We will go in that
direction and give it a try.

00:52:29.370 --> 00:52:32.570
But the main thing we want to do...

00:52:33.170 --> 00:52:35.220
Code creation partisans over there.

00:52:35.220 --> 00:52:35.830
That's great.

00:52:35.950 --> 00:52:38.300
The main thing we want to do, though,
is we want to,

00:52:38.370 --> 00:52:41.770
along with the rest of the Xcode plugins,
open this plugin API so you can

00:52:41.770 --> 00:52:43.400
create your own design plugins.

00:52:43.490 --> 00:52:45.320
So if you have your own
data-driven framework,

00:52:45.400 --> 00:52:52.680
or you have your own direction
that we are laggards in going in,

00:52:52.680 --> 00:52:52.680
you can add that to yourself.

00:52:52.680 --> 00:52:52.680
And we're working in
that direction as well.

00:52:53.000 --> 00:52:56.680
So in summary, design and modeling is now
an integral part of Xcode.

00:52:56.680 --> 00:52:58.190
It's not a bag hanging off the side.

00:52:58.190 --> 00:52:59.960
It's not a separate
tool you have to launch.

00:52:59.990 --> 00:53:01.570
It's part of your workflow.

00:53:01.770 --> 00:53:03.000
And it works the way you do.

00:53:03.000 --> 00:53:06.790
Rather than having a design and modeling
tool impose the workflow on you,

00:53:06.790 --> 00:53:09.960
you can integrate into
whatever workflow you like.

00:53:10.010 --> 00:53:14.860
You can choose whichever one of
the Xcode multi-window or single

00:53:14.860 --> 00:53:17.750
window layouts you'd prefer to use.

00:53:17.750 --> 00:53:22.370
The design tools work just like
documents in those workflows.

00:53:22.430 --> 00:53:24.400
It's a versatile diagramming view.

00:53:24.400 --> 00:53:27.900
You've seen it already applied to
two very different kinds of models.

00:53:27.900 --> 00:53:31.570
We expect to be able to apply it to
different kinds of models in the future.

00:53:31.710 --> 00:53:34.820
The core data,
it's built into the build system

00:53:34.890 --> 00:53:39.040
so that it works for models that
create artifact files that are

00:53:39.040 --> 00:53:41.800
loaded by data-driven frameworks.

00:53:41.800 --> 00:53:43.720
And that's something we
can extend in the future.

00:53:43.820 --> 00:53:47.590
The class models, I think,
are very versatile and useful

00:53:47.590 --> 00:53:51.800
right now for letting you analyze,
letting you explore,

00:53:51.800 --> 00:53:51.800
and letting you communicate.

00:53:51.800 --> 00:53:55.000
What your classes do in your application.

00:53:55.000 --> 00:53:58.010
And it's an extensible architecture,
so we have a lot of room

00:53:58.010 --> 00:53:59.350
for growth in the future.

00:53:59.520 --> 00:54:02.400
Matt Formica is our tools evangelist.

00:54:02.400 --> 00:54:03.580
He's the key contact.

00:54:03.600 --> 00:54:07.390
All feedback should go to
the Xcode feedback group.

00:54:07.400 --> 00:54:10.800
Once this tool is released,
the standard Xcode

00:54:10.800 --> 00:54:12.000
discussion groups will apply.

00:54:12.000 --> 00:54:14.300
But this is in Xcode 2.0 only.

00:54:14.300 --> 00:54:15.990
It is covered under the non-disclosure.

00:54:15.990 --> 00:54:20.350
So send us feedback on
Xcode-feedback@groups.apple.com.