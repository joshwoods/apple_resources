WEBVTT

00:00:12.090 --> 00:00:14.000
Karl Hsu.

00:00:14.000 --> 00:00:22.930
So, good morning, afternoon, evening,
depending on where you are in the world.

00:00:23.060 --> 00:00:28.000
Welcome to Session 614,
Deploying Java Applications for Mac OS X.

00:00:28.120 --> 00:00:30.000
As introduced, I'm Karl Hsu.

00:00:30.000 --> 00:00:33.000
I'm one of the session engineers-- or,
I'm sorry,

00:00:33.000 --> 00:00:36.220
I'm one of the Java runtime engineers,
and I'll be your tour

00:00:36.220 --> 00:00:37.790
guide this afternoon.

00:00:40.290 --> 00:00:42.540
So what are we going to talk about today?

00:00:42.570 --> 00:00:45.890
Well, we're going to talk about
the various ways that you

00:00:45.940 --> 00:00:48.460
can deploy Java on Mac OS X.

00:00:49.040 --> 00:00:51.150
Mostly we'll be talking
about client-side Java.

00:00:51.160 --> 00:00:53.720
We'll touch briefly on server-side,
but that's actually in

00:00:53.750 --> 00:00:54.860
a different session.

00:00:55.680 --> 00:00:59.940
We'll talk about tools on how you
can make that deployment easier,

00:00:59.940 --> 00:01:00.880
development tools.

00:01:00.880 --> 00:01:03.840
And you might think that's a little
bit weird to be talking about

00:01:03.840 --> 00:01:06.070
that in a deployment session,
but it's not.

00:01:06.120 --> 00:01:12.140
We feel that your job as an application
developer is to write applications.

00:01:12.140 --> 00:01:15.710
It's your job to make the
code that people will run.

00:01:15.710 --> 00:01:18.170
It's our job to make it as
easy as possible for you to get

00:01:18.170 --> 00:01:19.620
that code to your customers.

00:01:19.700 --> 00:01:22.320
That isn't anything that you
should have to really worry about.

00:01:22.320 --> 00:01:23.710
You shouldn't have to work on it.

00:01:23.800 --> 00:01:25.580
We're going to try to make
that a little bit easier.

00:01:25.680 --> 00:01:27.040
for you.

00:01:27.400 --> 00:01:30.240
We'll talk about which one of
those deployment options is the

00:01:30.240 --> 00:01:31.800
best one for your customers.

00:01:31.800 --> 00:01:36.060
It's the best way for you to
get your application to them.

00:01:36.280 --> 00:01:38.440
And finally,
we'll take a little bit of a look

00:01:38.560 --> 00:01:45.040
into the future and see what's coming
in the year ahead with Java 1.5.0.

00:01:45.080 --> 00:01:47.340
I think it might have
actually been renamed 5.0,

00:01:47.340 --> 00:01:50.150
but we'll have to see.

00:01:50.890 --> 00:01:53.460
So this is the graphical
overview where Apple,

00:01:53.460 --> 00:01:56.840
we have to have a nice UI on everything.

00:01:57.040 --> 00:01:59.740
One thing when you look at this,
you have to realize is that the

00:01:59.740 --> 00:02:02.000
Java VM is underneath it all.

00:02:02.030 --> 00:02:05.080
And this actually is a little bit
different from other platforms.

00:02:05.130 --> 00:02:08.160
On other platforms,
the JDK isn't always there.

00:02:08.270 --> 00:02:09.170
You have to download it.

00:02:09.250 --> 00:02:11.420
Users have to find it,
or you have to bundle it

00:02:11.480 --> 00:02:13.100
with your own application.

00:02:13.110 --> 00:02:17.540
Users end up with 15 copies of
the runtime in their system.

00:02:17.820 --> 00:02:22.040
Apple provides the Java VM and
the JDK as a system framework.

00:02:22.100 --> 00:02:24.990
It means you don't
have to worry about it.

00:02:25.530 --> 00:02:29.100
Every Mac OS X installation
has a Java VM and a JDK.

00:02:29.100 --> 00:02:33.100
If the user has access to
software update and has used it,

00:02:33.100 --> 00:02:35.100
they have the most recent version.

00:02:35.100 --> 00:02:37.100
This is a big relief on your part.

00:02:37.100 --> 00:02:40.540
Your applications can be small,
and they can depend on

00:02:40.580 --> 00:02:42.100
the JDK being there.

00:02:42.100 --> 00:02:45.100
So what kind of
applications can you have?

00:02:45.100 --> 00:02:49.100
We start--and the most obvious one,
the one that most users hit

00:02:49.180 --> 00:02:53.050
and most users use and see,
are applets.

00:02:53.110 --> 00:02:56.100
Applets running in WebKit and
applets running in Safari.

00:02:56.100 --> 00:02:59.800
Safari, of course, is using AppKit,
but...

00:02:59.980 --> 00:03:04.840
Steve Jobs loves Safari,
so it gets its own little box.

00:03:05.220 --> 00:03:06.570
Web Start, it's the next step.

00:03:06.640 --> 00:03:08.090
It's a little bit beyond applets.

00:03:08.100 --> 00:03:13.880
It's basically an application
that's deployed as over the network.

00:03:14.110 --> 00:03:20.690
It gives you a lot of the
benefits of being an applet,

00:03:20.690 --> 00:03:20.690
and it gives you a lot of the
benefits of being an application.

00:03:20.940 --> 00:03:24.720
The next step past that, of course,
is to be a bundled application.

00:03:24.770 --> 00:03:25.900
I'm sure you've all seen them.

00:03:25.900 --> 00:03:27.320
There are tons of them out there.

00:03:27.470 --> 00:03:31.900
They look and they act pretty much
like every other Mac OS X application.

00:03:31.900 --> 00:03:33.300
The end user doesn't know any difference.

00:03:33.300 --> 00:03:35.190
And yet, they're in Java.

00:03:35.190 --> 00:03:36.400
It's very nice.

00:03:36.900 --> 00:03:39.920
All the way on the end,
it's the poster child for things

00:03:39.920 --> 00:03:42.100
we don't want to think about,
shell scripts and raw

00:03:42.110 --> 00:03:43.500
jars and class files.

00:03:43.500 --> 00:03:44.780
You can run shell scripts.

00:03:44.780 --> 00:03:46.570
All of these can be run from the finder.

00:03:46.570 --> 00:03:48.600
All of these can be
run from the terminal.

00:03:48.600 --> 00:03:51.380
But you can't do anything with them,
really.

00:03:51.380 --> 00:03:55.610
They require either a remarkable
amount of technical savvy

00:03:55.610 --> 00:03:59.320
on the part of the customer,
or they require that you

00:03:59.320 --> 00:04:01.630
need no configuration at all.

00:04:01.670 --> 00:04:03.910
So generally, we don't like that.

00:04:04.000 --> 00:04:06.880
We like things to look nice,
to behave nice.

00:04:06.900 --> 00:04:08.890
for the end user.

00:04:10.540 --> 00:04:14.740
So let's start by talking about applets.

00:04:14.790 --> 00:04:18.460
Applets on Mac OS X,
our plugin is basically

00:04:18.460 --> 00:04:20.380
based on Sun's Java plugin.

00:04:20.700 --> 00:04:24.060
Like a lot of other things in Java,
we try to maintain compatibility by,

00:04:24.270 --> 00:04:28.350
frankly, using as much of their
code as we can get.

00:04:28.460 --> 00:04:33.080
142 is available on any
WebKit-based application.

00:04:33.230 --> 00:04:37.010
Safari uses it,
but if you happen to use WebKit,

00:04:37.150 --> 00:04:38.800
then you can also use applets.

00:04:38.800 --> 00:04:42.070
and we'll see a really
interesting demo of that later.

00:04:42.300 --> 00:04:44.150
Our applets are
cross-platform compatible.

00:04:44.210 --> 00:04:47.200
Anything that you can do in
an applet on another platform,

00:04:47.200 --> 00:04:50.200
you should be able to do on ours.

00:04:50.200 --> 00:04:53.380
You shouldn't need to
treat the Mac differently.

00:04:53.450 --> 00:04:55.890
Or if you're already on the Mac,
you shouldn't have to treat

00:04:55.890 --> 00:04:58.200
Windows any differently.

00:04:58.200 --> 00:05:02.200
The bonus of that is that there's
no download or installation.

00:05:02.200 --> 00:05:03.200
It's totally clean.

00:05:03.200 --> 00:05:08.370
From the user's point of view,
all they need is a browser.

00:05:09.110 --> 00:05:10.060
They don't need anything else.

00:05:10.190 --> 00:05:11.600
They don't need to download anything.

00:05:11.600 --> 00:05:13.020
They don't need to install anything.

00:05:13.100 --> 00:05:15.490
It's all there for you.

00:05:16.560 --> 00:05:21.810
This isn't to say that applets don't
have any Mac OS X-specific technology,

00:05:21.810 --> 00:05:22.400
because they do.

00:05:22.400 --> 00:05:26.700
They do take advantage of
Mac OS X technology when they can.

00:05:27.000 --> 00:05:29.380
They use the keychain
to store certificates,

00:05:29.570 --> 00:05:36.700
HTTPS certificates,
and when you sign a jar.

00:05:36.700 --> 00:05:39.970
They also take advantage of
WebKit to do cookie management.

00:05:39.990 --> 00:05:42.610
So a lot of this stuff is in there,
and it's done a little bit nicer.

00:05:44.930 --> 00:05:49.420
We've just released 142 Update 1,
Developer Preview 3,

00:05:49.610 --> 00:05:52.850
and if you haven't tried it,
we would really appreciate it if you

00:05:52.850 --> 00:05:54.800
would try it and give us feedback.

00:05:54.800 --> 00:05:58.770
We've greatly improved stability and
performance and correctness in a large

00:05:58.770 --> 00:06:01.800
variety of applets in the update.

00:06:01.800 --> 00:06:05.610
Proxy support is greatly improved,
and by greatly improved,

00:06:05.650 --> 00:06:07.000
I mean it works now.

00:06:07.690 --> 00:06:10.100
And for those of you
who are really picky,

00:06:10.100 --> 00:06:14.080
and you have your applets well organized
into your site and bordered by things,

00:06:14.210 --> 00:06:16.580
we now have support for a
dynamic resizing of applets.

00:06:16.740 --> 00:06:20.840
That means when you set width equal to
a percentage and you resize your page,

00:06:20.940 --> 00:06:22.050
the applet will now resize.

00:06:22.060 --> 00:06:24.900
Your page won't suddenly look like
a total disaster as soon as the

00:06:24.950 --> 00:06:30.120
developer decides-- or the user
tries to resize the Safari window.

00:06:31.760 --> 00:06:35.280
And new from last year, Live Connect.

00:06:35.520 --> 00:06:39.590
Live Connect is the ability for Java and
JavaScript to talk to each other.

00:06:39.600 --> 00:06:41.470
This opens up a lot of things.

00:06:41.590 --> 00:06:44.100
There were a lot of legacy
sites that didn't work with

00:06:44.200 --> 00:06:45.550
Safari before that do now.

00:06:45.600 --> 00:06:49.410
But it is a legacy technology,
and that means that there

00:06:49.410 --> 00:06:51.590
are a couple of limitations.

00:06:51.590 --> 00:06:54.600
We don't talk to
anything except for Java.

00:06:54.600 --> 00:06:57.600
There's no talking between
JavaScript and Flash,

00:06:57.600 --> 00:06:58.600
for instance.

00:06:58.920 --> 00:07:02.590
There's no creation of new
Java objects in JavaScript.

00:07:02.600 --> 00:07:07.600
On the other hand, it means that because
it's built in WebKit,

00:07:07.900 --> 00:07:14.390
again, any WebKit application should
be able to use Live Connect.

00:07:14.600 --> 00:07:17.610
Once again, I have to plug our update.

00:07:18.000 --> 00:07:21.900
It improves things
dramatically in all areas.

00:07:23.350 --> 00:07:27.620
So to talk a little bit more about
applet deployment and how you can use

00:07:27.620 --> 00:07:31.680
the dev tools to your best advantage,
Scott Kovatch.

00:07:36.550 --> 00:07:37.880
Let's start off in demo one, please.

00:07:37.880 --> 00:07:40.960
And over here, I'm running Tiger.

00:07:40.960 --> 00:07:46.670
And what we want to show you
here is basically what applets

00:07:47.020 --> 00:07:48.340
are going to look like on Tiger.

00:07:48.340 --> 00:07:50.320
Now, you're going to say, well,
that's not very exciting.

00:07:50.320 --> 00:07:52.820
You know, they're just applets.

00:07:52.840 --> 00:07:55.000
But what we want to show
you is the improvements,

00:07:55.020 --> 00:07:57.760
actually,
mostly that the Keychain folks have made,

00:07:57.760 --> 00:08:00.960
but they're actually enhancements that
your end users are going to appreciate.

00:08:00.960 --> 00:08:04.180
So here's my first example of an applet.

00:08:04.180 --> 00:08:05.720
It's a pretty boring applet, actually.

00:08:06.390 --> 00:08:08.940
But as you can see, you know,
as Karl mentioned,

00:08:08.940 --> 00:08:10.460
we work across platform.

00:08:10.460 --> 00:08:14.170
All these, you know,
the color of the text and the progress

00:08:14.170 --> 00:08:17.360
bar and all those things are all
things that you set in the HTML.

00:08:17.360 --> 00:08:18.430
We pick those up.

00:08:18.550 --> 00:08:19.010
They just work.

00:08:20.890 --> 00:08:24.280
So here I have a security dialog
because I've signed this applet,

00:08:24.280 --> 00:08:27.190
or I'm sorry,
I've signed the jar in this applet.

00:08:27.190 --> 00:08:30.400
And as you can see,
it's a self-signed applet.

00:08:30.410 --> 00:08:35.270
I did this myself, you know,
threw it together using a key tool.

00:08:35.270 --> 00:08:39.220
And, you know,
the alert is telling us that

00:08:39.400 --> 00:08:42.130
the company is not trusted.

00:08:42.130 --> 00:08:44.540
Well, Apple wrote it.

00:08:45.220 --> 00:08:48.400
It sounds like I'm making fun of our
own company that you shouldn't trust us,

00:08:48.430 --> 00:08:56.230
but the truth is that I'm a real
apple pretending that Apple issued it.

00:08:56.380 --> 00:08:59.840
It's important,
that's why we have this here,

00:08:59.840 --> 00:09:05.340
is that so you can verify the
contents of the certificate,

00:09:05.340 --> 00:09:09.620
so your end users can trust that
what you're deploying is actually

00:09:09.710 --> 00:09:11.200
from who it says it's from.

00:09:11.200 --> 00:09:13.700
All right.

00:09:13.900 --> 00:09:15.410
So let's close that,
and I'm going to always

00:09:15.470 --> 00:09:17.080
trust this applet.

00:09:17.100 --> 00:09:20.570
As you can see, when I did that,
my certificate just showed

00:09:20.600 --> 00:09:21.980
up here in the keychain.

00:09:22.060 --> 00:09:24.450
So I'm going to look at that certificate,
and we see, yep,

00:09:24.460 --> 00:09:26.100
it's a self-signed certificate.

00:09:26.220 --> 00:09:27.380
It's valid.

00:09:27.380 --> 00:09:29.510
I can double-click on it.

00:09:30.310 --> 00:09:36.660
Click on it and get a lot
more useful information.

00:09:37.150 --> 00:09:39.700
You're going to see an expansion
of us using more of the public

00:09:39.830 --> 00:09:44.790
key infrastructure that's
available on Tiger in the future.

00:09:44.830 --> 00:09:46.890
But for right now,
this gives you an idea of what

00:09:47.030 --> 00:09:49.650
we support and we're going
to be taking this further.

00:09:49.720 --> 00:09:51.170
Let's also go back here.

00:09:51.430 --> 00:09:55.900
And what's nice about this is that now
the user can not only take a look at it,

00:09:55.900 --> 00:09:59.150
but they can delete the certificate
from the keychain as well if

00:09:59.150 --> 00:10:01.030
that's what they need to do.

00:10:01.080 --> 00:10:05.000
And I'll quit Safari and launch it again.

00:10:06.670 --> 00:10:11.840
And now even though I said always,
we have to try to trust it again.

00:10:12.960 --> 00:10:14.660
All right.

00:10:14.720 --> 00:10:18.360
And just for comparison's sake,
I'm going to show you Install Anywhere.

00:10:18.360 --> 00:10:21.500
And they also sign their installer.

00:10:21.500 --> 00:10:23.240
They have a web-based installer.

00:10:23.240 --> 00:10:27.740
It was issued by Thotay, or Thot, rather.

00:10:27.740 --> 00:10:29.760
And I'm going to always trust that.

00:10:29.830 --> 00:10:32.380
And you'll see the
difference over here as well.

00:10:33.560 --> 00:10:34.990
It's expired, but that's all right.

00:10:35.010 --> 00:10:40.230
In 1.5, this will be less of an issue,
because you'll be able to

00:10:40.230 --> 00:10:41.410
get around these problems.

00:10:41.410 --> 00:10:45.650
But the important thing here is
showing you what the certificate's

00:10:45.650 --> 00:10:48.100
going to look like in the keychain.

00:10:55.700 --> 00:10:56.780
There's not much information there.

00:10:56.780 --> 00:10:58.100
OK.

00:10:58.100 --> 00:11:00.210
I thought I was going to be able
to show you a certificate chain,

00:11:00.210 --> 00:11:02.090
but no.

00:11:02.980 --> 00:11:04.360
All right,
so that's basically what you're looking

00:11:04.360 --> 00:11:06.910
at for applets as far as TIGER goes.

00:11:07.060 --> 00:11:08.540
In Panther,
it's not a whole lot different,

00:11:08.600 --> 00:11:14.010
but we're making it easier to manage
certificates for the end user.

00:11:14.040 --> 00:11:19.340
Okay, let's go to slides, please.

00:11:22.250 --> 00:11:24.920
All right,
now you've seen how easy it is for

00:11:24.920 --> 00:11:27.810
a signed apple to run on Mac OS X.

00:11:28.530 --> 00:11:33.780
How many of you actually have had to
write a signed apple at some point?

00:11:36.000 --> 00:11:38.040
If you want to do it in Xcode,
would you agree that

00:11:38.040 --> 00:11:38.820
it's somewhat of a pain?

00:11:38.820 --> 00:11:41.550
I mean,
you have to get a shell script set up,

00:11:41.650 --> 00:11:44.450
you have to do the shell script phase,
you have to get everything all set up,

00:11:44.450 --> 00:11:46.950
and do mostly work outside of Xcode.

00:11:46.960 --> 00:11:52.930
Wouldn't it be nice if I could have a
basic HTML file just created for me,

00:11:52.940 --> 00:11:55.680
I could sign it as
part of my build phase,

00:11:55.680 --> 00:12:00.380
and build and deployment process,
and just do everything in Xcode once.

00:12:00.380 --> 00:12:03.120
Don't have to go back,
jump out to terminal,

00:12:03.130 --> 00:12:05.040
set anything up for myself.

00:12:05.800 --> 00:12:09.110
other than what Xcode will do for me.

00:12:09.770 --> 00:12:11.560
Today we want to introduce
a new project template.

00:12:11.560 --> 00:12:14.050
We've been talking about
Ant a lot this week,

00:12:14.050 --> 00:12:16.480
and what we're going to introduce
here is a new signed applet template.

00:12:16.480 --> 00:12:18.860
It's based on the
Ant application template.

00:12:19.040 --> 00:12:25.630
I started with that and
built up this template.

00:12:25.760 --> 00:12:28.880
We're going to take advantage of Ant to
do a lot of the automation for us.

00:12:28.880 --> 00:12:31.790
We're going to start with an applet.

00:12:31.800 --> 00:12:36.640
We've got boilerplate code in here,
but we're going to start with

00:12:36.640 --> 00:12:37.440
the applet that you've written.

00:12:37.440 --> 00:12:42.590
We also have a Java key store that's
got your certificate in it already.

00:12:43.370 --> 00:12:45.750
And when we're all done,
we're going to produce the final HTML,

00:12:45.930 --> 00:12:48.060
sign jar,
and we're going to put it in a place

00:12:48.060 --> 00:12:50.380
where we can test it and try it out.

00:12:50.430 --> 00:12:53.580
And we've also got provisions for
deploying that to a final location.

00:12:53.630 --> 00:12:55.910
Won't actually show that,
but you'll be able to see how

00:12:55.910 --> 00:12:58.770
it's done in the build script.

00:13:00.540 --> 00:13:01.160
I mentioned Ant.

00:13:01.160 --> 00:13:02.740
We talked about this a little bit.

00:13:02.870 --> 00:13:05.890
Ant 161 is now part of
the core Java tools.

00:13:05.910 --> 00:13:09.340
If you install the developer
preview 3 developer tools,

00:13:09.460 --> 00:13:10.770
you will get Ant 161.

00:13:11.120 --> 00:13:14.100
That version of Ant does work,
and it will run JUnit

00:13:14.100 --> 00:13:15.790
and all external tools.

00:13:15.970 --> 00:13:18.690
It's been installed to developer
Java Ant completely separate

00:13:19.160 --> 00:13:24.340
from the J2EE tools that we
install as an optional tool.

00:13:24.340 --> 00:13:29.100
This is not meant to be a session to
teach you how to learn to use Ant.

00:13:29.120 --> 00:13:32.220
Go to see ant.apache.org.

00:13:32.520 --> 00:13:35.800
They'll give you all the information
you need on external tools,

00:13:35.820 --> 00:13:38.060
tasks,
how to link all this stuff together.

00:13:38.060 --> 00:13:41.890
What I am going to spend some time
showing you is the important parts

00:13:41.890 --> 00:13:44.600
when you want to write your own
Ant script that links into Xcode,

00:13:45.160 --> 00:13:48.490
the important parts that you need
to make sure that you do have so

00:13:48.490 --> 00:13:49.570
that everything will work right.

00:13:52.620 --> 00:13:56.370
All right, so in this particular script,
I'm using Ant for some of

00:13:56.370 --> 00:13:58.840
its deployment features.

00:13:59.230 --> 00:14:02.640
Ant will do the jar, you know,
the jar step for me.

00:14:02.710 --> 00:14:05.180
But it's got a nice
feature called Sign Jar,

00:14:05.240 --> 00:14:09.330
and it basically wraps up the,

00:14:09.740 --> 00:14:15.280
The Jarsigner command line item
pretty well with the sign jar task.

00:14:15.280 --> 00:14:17.840
And we're also going to use it
for its deployment features.

00:14:17.870 --> 00:14:22.590
I've written into the script an FTP task,
and I'll be showing you how to

00:14:22.660 --> 00:14:28.150
use that and what extra things
you need to get that to work.

00:14:28.290 --> 00:14:31.340
And as I said, as I mentioned here,
it needs two third-party jars.

00:14:31.480 --> 00:14:33.800
We've got links on
where you can get those.

00:14:33.920 --> 00:14:36.580
Very easy to do this yourself.

00:14:38.760 --> 00:14:42.940
All right, let's go to demo number two,
machine number two.

00:14:42.940 --> 00:14:44.300
- Ooh, pretty.

00:14:44.300 --> 00:14:45.730
- Oh, wow.

00:14:48.230 --> 00:14:50.650
Okay, here I've got Xcode,
and just to show you that

00:14:50.650 --> 00:14:53.820
I'm not making this up,
I'm gonna show you that we've

00:14:53.820 --> 00:15:02.730
got an Ant-based signed applet
ready to go here in the Assistant,

00:15:02.730 --> 00:15:04.960
but I've already got
one ready to go for you,

00:15:04.960 --> 00:15:04.960
'cause I got the properties all set
up so you can actually see this.

00:15:05.510 --> 00:15:09.200
So here we can see that I made a new
project called Ant signed applet,

00:15:09.200 --> 00:15:13.780
and I filled in the
archive so that I can,

00:15:13.790 --> 00:15:15.960
filled in the archive item for me.

00:15:16.050 --> 00:15:18.900
The code is the same as the project name.

00:15:20.020 --> 00:15:22.240
And that's pretty boilerplate,
but the interesting thing

00:15:22.240 --> 00:15:25.780
here is the build.xml file.

00:15:26.310 --> 00:15:28.540
Let's see here.

00:15:28.620 --> 00:15:29.740
Got a lot of setup.

00:15:29.800 --> 00:15:30.790
You can look through this.

00:15:30.880 --> 00:15:34.810
We'll have this available,
a sample code available for

00:15:34.810 --> 00:15:37.140
you by the end of the week.

00:15:37.860 --> 00:15:43.130
Here's the jar step that
puts everything together.

00:15:43.140 --> 00:15:46.300
Down here is the sign jar task.

00:15:46.300 --> 00:15:50.040
That's the interesting part for
what I'm talking about right now.

00:15:50.180 --> 00:15:54.880
We're going to sign the jar file
that we created in a previous step.

00:15:55.310 --> 00:15:59.520
And the way I've written it is that
it uses my username as the alias into

00:15:59.520 --> 00:16:02.900
the default key store that's created
when you work with the key tool.

00:16:02.900 --> 00:16:07.620
So what you'll need to do before you do
this is you'll need to make a key tool,

00:16:07.890 --> 00:16:10.550
make an...

00:16:10.950 --> 00:16:12.910
Just to get up and
running out of the box,

00:16:12.910 --> 00:16:16.990
you'll need to do a one-time setup of
setting up a key store for yourself.

00:16:17.280 --> 00:16:19.840
But then you can change
this and do whatever,

00:16:19.910 --> 00:16:25.390
use whatever certificate you use
to sign your jar files normally.

00:16:27.140 --> 00:16:29.280
and it's going to dump it
out into sign.jar file,

00:16:29.430 --> 00:16:32.630
which puts it into the dist folder.

00:16:34.890 --> 00:16:40.910
And one step here that's interesting,
I have an install target.

00:16:41.050 --> 00:16:43.980
Actually, before I show you this,
I want to back up here and show you

00:16:44.010 --> 00:16:46.040
some of these targets that we've set up.

00:16:46.140 --> 00:16:51.120
So we have a target name install,
and a target name jar,

00:16:51.210 --> 00:16:53.740
and a compiled target.

00:16:54.190 --> 00:16:57.920
When you're integrating Ant with Xcode,
you need at least three targets

00:16:58.290 --> 00:17:01.840
in your build.xml file to
get it all to work together.

00:17:01.910 --> 00:17:04.270
So you need a clean task,

00:17:06.100 --> 00:17:10.840
And we have that down here,
which basically blows away

00:17:10.840 --> 00:17:15.440
my intermediate build and
my distribution directories.

00:17:15.500 --> 00:17:20.230
I also need a compile phase

00:17:21.400 --> 00:17:24.630
Which is where I indicate, you know,
what am I going to do to,

00:17:24.730 --> 00:17:28.080
what do I need to build with this task?

00:17:28.970 --> 00:17:32.890
And you also need for Java,
you need a jar phase.

00:17:32.940 --> 00:17:37.240
And the jar phase is
going to take care of,

00:17:37.300 --> 00:17:38.600
well really you can have
it do what you want,

00:17:38.600 --> 00:17:45.090
but ultimately it should be doing
a jar at some point along the way.

00:17:48.480 --> 00:17:52.770
Oh,
and the last one is the install phase.

00:17:53.090 --> 00:17:57.780
If you go out to the terminal
and you do Xcode build install,

00:17:57.860 --> 00:17:59.880
it will run this install target.

00:17:59.880 --> 00:18:02.600
Oh, this install target,
not this one over here, this one.

00:18:03.060 --> 00:18:07.620
And what I've done here is
I've set up an FTP task.

00:18:08.000 --> 00:18:10.840
To get that to run,
you'll need to go to those locations

00:18:10.840 --> 00:18:12.780
that you see up there in the urls.

00:18:12.920 --> 00:18:17.400
You'll need two supporting
jars to get the FTP to work.

00:18:17.480 --> 00:18:20.580
And instead of writing it down,
just wanna let you know that you'll

00:18:20.580 --> 00:18:24.480
have to do this other piece of setup,
'cause we can't distribute these.

00:18:24.480 --> 00:18:29.300
And I'll just build it here.

00:18:34.800 --> 00:18:37.080
Remember that?

00:18:37.280 --> 00:18:38.040
So there we go.

00:18:38.040 --> 00:18:44.660
We did a compile, and we did a jar phase,
which had signed my jar and did

00:18:44.660 --> 00:18:48.940
everything for me all at once,
and now I'm gonna do a run.

00:18:52.700 --> 00:19:02.190
and the run task is going to open up
Safari because I used user bin open.

00:19:02.760 --> 00:19:03.730
And there we go.

00:19:03.820 --> 00:19:05.370
I have my signed applet ready to go.

00:19:05.620 --> 00:19:08.520
There's my security dialog.

00:19:08.720 --> 00:19:12.670
And just to prove to you that
the signing actually worked,

00:19:12.670 --> 00:19:16.180
I probably should have had to print out
my username just for the heck of it,

00:19:16.320 --> 00:19:17.110
but there you go.

00:19:17.350 --> 00:19:22.960
So here we have a task for building,
I'm sorry, an Ant-based template for

00:19:23.190 --> 00:19:24.900
building a signed applet.

00:19:24.970 --> 00:19:28.280
You'll be able to get
this as sample code,

00:19:28.310 --> 00:19:32.050
and I believe that is gonna do it.

00:19:32.060 --> 00:19:33.970
I'll take it back to Karl.

00:19:40.130 --> 00:19:45.040
That was a brief foray into the light,
vegetarian world of applets.

00:19:45.320 --> 00:19:47.770
But now let's talk about
something a little bit more meaty.

00:19:47.870 --> 00:19:50.600
Let's talk about Java Web Start.

00:19:50.710 --> 00:19:55.010
So Java Web Start is basically
a web-based deployment technique

00:19:55.010 --> 00:19:57.400
for applications and applets.

00:19:57.580 --> 00:20:02.490
Applets run inside of a
browser or any WebKit app,

00:20:02.500 --> 00:20:04.300
but they're running
inside of another process.

00:20:04.300 --> 00:20:07.120
Sometimes it isn't what you want.

00:20:07.210 --> 00:20:08.580
They're inside of a sandbox.

00:20:08.770 --> 00:20:11.260
Even with the signing,
there's some limits,

00:20:11.260 --> 00:20:14.840
and they don't really look like
real applications to the user.

00:20:14.920 --> 00:20:19.300
So what Java Web Start does is
the user can go to a web page,

00:20:19.300 --> 00:20:21.890
click on a link,
and that will essentially download and

00:20:21.890 --> 00:20:23.740
run an application onto their desktop.

00:20:23.740 --> 00:20:27.620
It picks up where applets left off.

00:20:27.740 --> 00:20:30.150
They're kind of halfway between
applets and applications.

00:20:30.160 --> 00:20:33.710
The second time you run it,
it will actually attempt to

00:20:33.710 --> 00:20:35.900
build a bundled application.

00:20:35.900 --> 00:20:37.930
So to the user,
the second time they run it,

00:20:37.990 --> 00:20:40.960
now they have this nice little
application on their desktop

00:20:40.960 --> 00:20:43.700
or wherever that looks just
like a regular application.

00:20:45.760 --> 00:20:48.500
The nice thing about this
is that it still updates.

00:20:48.500 --> 00:20:50.820
It still knows that it's
a Web Start application,

00:20:50.820 --> 00:20:53.820
so it will still go back
out onto the web and check,

00:20:53.820 --> 00:20:55.080
have I been updated?

00:20:55.080 --> 00:20:57.010
Do I need to download any new files?

00:20:57.100 --> 00:21:00.790
This is perfect from an
enterprise deployment scenario.

00:21:00.800 --> 00:21:03.130
You have users who can
download these apps,

00:21:03.440 --> 00:21:07.090
and they look like real apps,
so they feel comfortable with them.

00:21:07.100 --> 00:21:10.640
They each run in a separate VM,
so if something freaks out Safari,

00:21:10.710 --> 00:21:12.360
you don't lose everything.

00:21:12.360 --> 00:21:15.140
And they're still talking
across the network.

00:21:15.810 --> 00:21:18.940
This means you can be sure that
all of your users are running the

00:21:18.980 --> 00:21:20.540
same version of your application.

00:21:20.540 --> 00:21:24.600
You don't have to run around badgering
your users to upgrade to make sure that

00:21:24.600 --> 00:21:27.960
they're not talking to the database
with the version that corrupted it.

00:21:27.960 --> 00:21:30.640
The next time they run the app,
it'll come,

00:21:30.780 --> 00:21:33.250
it'll grab the next version of the jars.

00:21:33.310 --> 00:21:33.930
It's beautiful.

00:21:34.020 --> 00:21:36.850
What's even better about
Java Web Start is that even

00:21:36.960 --> 00:21:39.700
though it's platform neutral,
you can run this on

00:21:39.700 --> 00:21:41.000
any platform you want.

00:21:41.130 --> 00:21:42.940
It's not totally platform ignorant.

00:21:42.940 --> 00:21:44.840
You can customize.

00:21:45.710 --> 00:21:49.350
What actually gets downloaded
and run based on what

00:21:49.350 --> 00:21:53.180
operating system and what VM,
actually,

00:21:53.180 --> 00:21:55.890
that it will be eventually run on.

00:21:55.900 --> 00:21:58.820
And we'll talk a little
bit more about that later.

00:22:00.880 --> 00:22:02.910
Before we talk about
all this stuff in depth,

00:22:02.910 --> 00:22:04.040
I just want to give you a quick update.

00:22:04.040 --> 00:22:05.640
It's actually pretty short.

00:22:05.840 --> 00:22:07.470
Once again, Java Web Start.

00:22:07.540 --> 00:22:10.400
We try to base it as much
as possible on Sun's code,

00:22:10.510 --> 00:22:14.290
just so we have to do less work,
because we're lazy engineers.

00:22:14.430 --> 00:22:16.700
And 1.4.2 is available.

00:22:16.900 --> 00:22:19.630
It's both available on Panther and Tiger,
same as applets.

00:22:19.690 --> 00:22:20.840
It's all good.

00:22:20.950 --> 00:22:25.790
And once again, I'm gonna have to kind of
preach about the update one.

00:22:25.870 --> 00:22:26.830
We'd love you to try it.

00:22:27.070 --> 00:22:29.930
It should make everything better, really.

00:22:29.990 --> 00:22:31.160
There's a couple more updates.

00:22:31.300 --> 00:22:33.900
They're basically mirroring
what Sun has done.

00:22:34.000 --> 00:22:38.170
So let's talk a little bit more
in depth about Java Web Start.

00:22:39.540 --> 00:22:40.500
Some things that you can do.

00:22:40.500 --> 00:22:42.370
You can use JNI libraries.

00:22:42.490 --> 00:22:44.400
That means that you can have
your native code integration.

00:22:44.400 --> 00:22:47.400
You can do things that are only
possible on certain platforms.

00:22:47.400 --> 00:22:50.700
And that means that you can
customize your Java Web Start app

00:22:50.700 --> 00:22:54.180
for Mac OS X or Windows or
whatever other platform you like.

00:22:54.740 --> 00:22:57.640
The ability to create desktop
shortcut applications,

00:22:57.640 --> 00:23:00.310
the bundled applications
I talked about earlier,

00:23:00.320 --> 00:23:01.920
looks great to an end user.

00:23:01.920 --> 00:23:04.110
It makes them more comfortable
with what's happening.

00:23:04.110 --> 00:23:06.040
They don't have to keep
going to a web page.

00:23:06.040 --> 00:23:09.460
They only do it once, and the next time,
it's all good.

00:23:09.500 --> 00:23:12.020
We use your icons for
the dock and the desktop.

00:23:12.030 --> 00:23:15.210
We'll actually look in the JNLP file,
the file that you use to

00:23:15.210 --> 00:23:19.060
determine what actually happens,
what's downloaded and how it's run,

00:23:19.060 --> 00:23:20.600
and we can present it.

00:23:20.680 --> 00:23:23.940
That way,
we don't have the generic Java icon.

00:23:24.350 --> 00:23:26.210
From the user's point of view,
it's starting to look more

00:23:26.320 --> 00:23:27.480
and more like an application.

00:23:27.480 --> 00:23:31.350
And you can download custom
jars just for Mac OS X.

00:23:31.360 --> 00:23:33.290
And we'll take a quick look at how.

00:23:35.520 --> 00:23:38.770
So the Web Start JNLP file,
this is the file that you use to

00:23:38.770 --> 00:23:41.330
basically say what's going to run.

00:23:41.620 --> 00:23:43.500
When I click on this,
what's going to come down,

00:23:43.500 --> 00:23:46.380
what's going to get downloaded,
what's actually going to run

00:23:46.380 --> 00:23:48.500
on the customer's computer.

00:23:48.540 --> 00:23:51.480
So the JNLP file specifies
a couple of things.

00:23:51.540 --> 00:23:52.490
It specifies resources.

00:23:52.510 --> 00:23:56.480
Resources can be jars for code
or images or whatever you want,

00:23:56.510 --> 00:23:58.500
or they can wrap native libs.

00:23:58.500 --> 00:24:01.670
This is what I was talking about earlier.

00:24:02.120 --> 00:24:05.490
The neat thing about these resources
is that they're conditional.

00:24:05.500 --> 00:24:09.840
You can actually download them based
on what architecture or what operating

00:24:09.840 --> 00:24:11.400
system that you're running on.

00:24:11.590 --> 00:24:14.000
You can also make them lazy.

00:24:14.130 --> 00:24:15.040
And this is really useful.

00:24:15.040 --> 00:24:17.470
If you have a huge application,
for whatever reason,

00:24:17.470 --> 00:24:20.440
you've decided to build your
application in this giant monolithic

00:24:20.440 --> 00:24:24.140
thing with a lot of different areas,
and particular users only

00:24:24.140 --> 00:24:27.580
use little bits at a time,
you can specify all of the

00:24:27.680 --> 00:24:31.440
ancillary jars to be lazy,
and they won't get downloaded.

00:24:31.440 --> 00:24:36.490
They won't eat bandwidth unless the user
actually tries to use that functionality.

00:24:37.460 --> 00:24:39.300
You can have multiple Java versions.

00:24:39.300 --> 00:24:44.410
If you find that your application behaves
differently on 1.3 versus 1.4 versus 1.5,

00:24:44.410 --> 00:24:48.300
you can actually, in the JNLP file,
you can specify particular settings.

00:24:48.300 --> 00:24:52.290
You can say some resources are only
downloaded on this version of the VM,

00:24:52.370 --> 00:24:55.290
and a different resource is downloaded
on a different version of the VM.

00:24:55.360 --> 00:24:59.000
You can specify heap settings if you
find under one version of the VM you

00:24:59.000 --> 00:25:01.290
need more or less memory than the other.

00:25:01.890 --> 00:25:03.200
You can even have an installer.

00:25:03.380 --> 00:25:07.400
If you have to install native libraries,
you can have something that the first

00:25:07.520 --> 00:25:12.540
time they run the Web Start app,
you'll run off and another application

00:25:12.550 --> 00:25:14.910
will be run just that one time.

00:25:15.270 --> 00:25:19.600
And you can finally have their equivalent
of shared libraries or whatever,

00:25:19.600 --> 00:25:21.160
which is the component extensions.

00:25:21.160 --> 00:25:24.070
If you have a bunch of jars and
a lot of setup that's shared

00:25:24.070 --> 00:25:26.960
between multiple applications,
you can pull that out into a

00:25:26.960 --> 00:25:29.070
separate JNLP file that's referenced.

00:25:29.190 --> 00:25:31.290
And then you can do just
less maintenance work.

00:25:31.340 --> 00:25:34.000
You don't have to keep
changing JNLP files across

00:25:34.000 --> 00:25:36.120
20 different applications.

00:25:37.660 --> 00:25:40.680
So to do another
Web Start deployment demo,

00:25:40.890 --> 00:25:42.170
back to Scott.

00:25:42.200 --> 00:25:43.930
Thank you again, Karl.

00:25:44.510 --> 00:25:46.400
Okay, let's say with demo two this time.

00:25:46.400 --> 00:25:50.100
And right here I'm going
to show you Java Web Start.

00:25:50.110 --> 00:25:54.000
And, you know, if you've run Web Start on
other platforms,

00:25:54.000 --> 00:25:56.160
this should look pretty familiar to you.

00:25:56.160 --> 00:25:57.870
Don't get used to it.

00:25:57.880 --> 00:25:59.240
We'll be talking about
that in a little bit.

00:25:59.490 --> 00:26:03.710
But the first thing I want to
show you is actually a game that

00:26:03.720 --> 00:26:05.250
was deployed with Java Web Start.

00:26:05.250 --> 00:26:08.250
And if you've ever looked at this,
it's called Puzzle Pirates.

00:26:08.250 --> 00:26:12.000
And what's interesting about
it is that Puzzle Pirates is,

00:26:12.000 --> 00:26:14.300
I believe, over a 20 megabyte download.

00:26:14.300 --> 00:26:18.250
And we're going to get
it started up here.

00:26:18.450 --> 00:26:22.650
And I hope I don't scare anybody
in the back because it's changing

00:26:22.650 --> 00:26:26.540
the resolution because Puzzle
Pirates runs in full screen mode.

00:26:26.540 --> 00:26:30.720
And what we're showing off here is
that full screen mode finally works,

00:26:30.750 --> 00:26:33.690
works beautifully in DP3.

00:26:34.500 --> 00:26:37.920
And just to show you what
you can do with this,

00:26:37.990 --> 00:26:40.310
I have my own little pirate.

00:26:40.400 --> 00:26:45.570
Yes, I test with this application
quite frequently.

00:26:47.390 --> 00:26:50.200
And it's a massively
multiplayer online game.

00:26:50.290 --> 00:26:54.700
So I can wander over here,
and we can scroll into a

00:26:54.700 --> 00:26:57.970
different part of the village,
and we can head over here

00:26:58.080 --> 00:27:00.120
and see what's going on.

00:27:00.120 --> 00:27:01.370
Full screen mode is very smooth.

00:27:01.440 --> 00:27:09.500
It's a lot of good work's going on
in improving the graphics rendering

00:27:09.500 --> 00:27:12.680
in full screen and regular mode.

00:27:12.680 --> 00:27:16.060
So I'm not going to
spend too much time here.

00:27:16.060 --> 00:27:17.290
You don't want to watch
me playing a game,

00:27:17.290 --> 00:27:17.940
so I'll quit that.

00:27:20.900 --> 00:27:34.000
[Transcript missing]

00:27:34.610 --> 00:27:37.830
- And here we got,
and I've already downloaded it once,

00:27:37.830 --> 00:27:39.250
but as you can see,
it's already in the cache,

00:27:39.250 --> 00:27:40.230
it's ready to go.

00:27:40.860 --> 00:27:45.160
Actually, a little story about this is
that the first time I ran this,

00:27:45.160 --> 00:27:48.600
it said,
"Mac OS X is fully integrated with

00:27:48.620 --> 00:27:52.770
Oxygen." So I thought it was a...

00:27:52.830 --> 00:27:54.240
I was hoping that would
just come up for you.

00:27:54.240 --> 00:27:55.560
I couldn't control which one.

00:27:55.560 --> 00:27:56.840
Yeah.

00:27:59.050 --> 00:28:03.800
So what's interesting about this,
and the reason I pulled it out,

00:28:03.920 --> 00:28:07.610
is that if you look at this,
this is an application that

00:28:07.610 --> 00:28:10.860
looks right at home on Mac OS X.

00:28:10.860 --> 00:28:14.350
I mean, they might want to have a,
you know,

00:28:14.350 --> 00:28:20.040
look at Matt's session on building
great applications for the toolbar,

00:28:20.040 --> 00:28:21.460
but overall it's pretty good.

00:28:21.500 --> 00:28:26.770
And because it was signed
for full permissions,

00:28:26.830 --> 00:28:29.680
I can go on the desktop and
I can just open a file here,

00:28:29.680 --> 00:28:32.380
and I've got a great XML editor.

00:28:32.380 --> 00:28:33.180
I've actually played with this.

00:28:33.180 --> 00:28:35.550
This is a very nice application.

00:28:35.810 --> 00:28:41.350
This is a, just a build.xml that I was
playing with and doing some

00:28:41.540 --> 00:28:44.910
development of the template.

00:28:45.340 --> 00:28:46.760
Copy-paste works.

00:28:46.760 --> 00:28:48.490
I mean, this is a full application.

00:28:48.500 --> 00:28:51.740
This is a great way to get
this down to an end user.

00:28:51.740 --> 00:28:56.970
And let's see.

00:28:59.420 --> 00:29:02.060
That's all I need to show here.

00:29:02.120 --> 00:29:04.900
So the point of this demo,
and the whole reason I show this to you,

00:29:04.940 --> 00:29:08.340
is that if you're writing
a Java application,

00:29:08.350 --> 00:29:10.160
this is a great way to
get it to an end user,

00:29:10.160 --> 00:29:13.380
whether you're in-house,
this came across through the internet,

00:29:13.400 --> 00:29:16.460
publicly available,
but you can easily make a full

00:29:16.570 --> 00:29:19.530
application that you can deploy to
your end users in your organization

00:29:19.540 --> 00:29:21.040
if that's what you need to do.

00:29:21.040 --> 00:29:22.820
Okay.

00:29:23.320 --> 00:29:27.300
So now for the demos,
let's go see some code.

00:29:29.360 --> 00:29:34.320
How many here have tried to write
a Java Web Start application?

00:29:34.540 --> 00:29:35.800
Or using Web Start?

00:29:35.800 --> 00:29:38.140
Would you agree it's a pain in the neck?

00:29:38.300 --> 00:29:41.700
In general.

00:29:41.710 --> 00:29:41.710
Okay.

00:29:42.830 --> 00:29:46.500
If you want to start with,
usually what I ended up doing

00:29:46.500 --> 00:29:49.600
when I needed to test this,
I have to go steal another JNOP file,

00:29:49.690 --> 00:29:52.740
copy and yank out all the
parts that I don't need,

00:29:52.810 --> 00:29:59.750
fix all the bugs that occur from
doing the copy and the paste,

00:29:59.750 --> 00:29:59.750
and, you know,

00:29:59.840 --> 00:30:03.840
I've got to deploy it somewhere
because Web Start will try to

00:30:03.840 --> 00:30:05.900
download it from someplace.

00:30:05.940 --> 00:30:11.890
It doesn't really have a good
notion of running locally.

00:30:13.050 --> 00:30:18.070
So in order to make life
easier for you as a developer,

00:30:18.090 --> 00:30:24.670
we came up with an Xcode
template that is built on Ant.

00:30:32.370 --> 00:30:33.140
One thing, sorry.

00:30:33.300 --> 00:30:41.000
Can I have the slides for one second,
please?

00:30:43.320 --> 00:30:46.040
Running theme this week seems to be,
wouldn't it be great?

00:30:46.080 --> 00:30:49.280
So wouldn't it be great if I could
get a basic JNLP file created for me?

00:30:49.460 --> 00:30:54.540
It's a drudgery task,
you don't wanna be bothering with it

00:30:54.540 --> 00:30:56.660
every time you need to do some work.

00:30:56.690 --> 00:30:59.190
Wouldn't it be great if I could
deploy everything to my server to

00:30:59.190 --> 00:31:01.500
test it so I can do all my testing?

00:31:01.510 --> 00:31:03.880
And, you know, we're Apple,
we want you to use Xcode.

00:31:03.880 --> 00:31:06.910
Wouldn't it be great if we
can just do this all on Xcode?

00:31:07.130 --> 00:31:09.030
Well, we've created another
new project template,

00:31:09.070 --> 00:31:10.260
which I was just getting
ready to show you,

00:31:10.260 --> 00:31:11.130
but I got ahead of myself.

00:31:11.250 --> 00:31:13.370
It's a Java Web Start application
template.

00:31:13.380 --> 00:31:17.210
The product,
much like the last template I gave you,

00:31:17.230 --> 00:31:22.380
is an HTML file, a JNLP in a jar,
and we're going to deploy it to where

00:31:22.380 --> 00:31:26.140
you need it to be deployed for your
testing or your final development.

00:31:26.140 --> 00:31:29.880
Sort of the boilerplate setup,
we'll just put it in your

00:31:29.890 --> 00:31:32.100
home directory in your sites.

00:31:32.100 --> 00:31:34.580
That's probably going to be
fine for your development.

00:31:34.660 --> 00:31:39.440
All right, now let's go back to demo two.

00:31:41.500 --> 00:31:44.680
Okay, and once again,
just to show you that

00:31:45.330 --> 00:31:46.680
we're not pretending here.

00:31:46.700 --> 00:31:48.580
Actually,
I think you probably saw this before,

00:31:48.580 --> 00:31:50.980
but we have the
Web Start application template.

00:31:51.030 --> 00:31:51.950
They're ready to go.

00:31:51.950 --> 00:31:56.600
I'm going to open up one
I've already made for you.

00:31:57.470 --> 00:32:04.530
And we've made a HTML file that's
gonna download the JNLP for you.

00:32:05.460 --> 00:32:09.400
We've got a basic JNLP where most of
the information is filled in for you.

00:32:09.400 --> 00:32:11.400
You want to put a better title.

00:32:11.610 --> 00:32:15.390
It'll put your organization
name using the macro fill-in

00:32:15.400 --> 00:32:17.400
that Xcode uses for templates.

00:32:17.400 --> 00:32:23.380
The HTML file that, where it came from.

00:32:23.500 --> 00:32:45.100
[Transcript missing]

00:32:46.320 --> 00:32:48.700
All right.

00:32:48.770 --> 00:32:51.740
So again, the build.xml actually is not
a whole lot different than

00:32:51.740 --> 00:32:53.910
the signed applet template,
so I'm not going to spend

00:32:53.910 --> 00:32:55.220
a whole lot of time on it.

00:32:55.430 --> 00:32:59.630
But here we have the clean
and the install phase.

00:32:59.990 --> 00:33:05.410
A couple of gotchas I found while
developing this is that you need to chmod

00:33:05.590 --> 00:33:11.000
everything that you actually deploy,
because if you don't,

00:33:11.050 --> 00:33:18.650
it's going to set it up as read-only
for the user that put it there,

00:33:18.650 --> 00:33:18.650
and nobody will be able to download it.

00:33:18.800 --> 00:33:23.520
This depends flag is actually a
very cool feature of the FTP task.

00:33:23.550 --> 00:33:25.890
It'll look at what's on
the server and it'll say,

00:33:25.940 --> 00:33:28.280
oh,
that's newer than what I've got already,

00:33:28.280 --> 00:33:30.510
or newer or the same,
so I won't upload anything.

00:33:30.510 --> 00:33:38.790
Or, you built something newer,
I need to put that up on the server.

00:33:38.790 --> 00:33:38.790
So it's a very useful way to...

00:33:39.170 --> 00:33:44.600
Make sure you've only got the latest
stuff on your server for testing.

00:33:45.300 --> 00:33:48.870
And I'm going to run it,
because every template should

00:33:48.880 --> 00:33:50.640
be able to run and do something.

00:33:50.640 --> 00:33:54.410
Oh, what happened there?

00:34:05.840 --> 00:34:07.800
Seems to be a running theme today.

00:34:07.800 --> 00:34:19.560
Just gonna build it, sign it,
and put it in the sites.

00:34:20.300 --> 00:34:24.330
And I've set up my run phase
to open it up with Web Start.

00:34:24.340 --> 00:34:31.500
Okay, you know what?

00:34:31.500 --> 00:34:33.380
Let's do this.

00:34:45.710 --> 00:34:49.000
So, today is not a good day
for demos around here.

00:34:49.000 --> 00:34:54.550
What was supposed to happen is that the
application would start up in Web Start.

00:34:54.550 --> 00:34:58.140
It would be signed,
so it would ask for full permissions,

00:34:58.140 --> 00:35:02.160
and it was going to
open up www.apple.com.

00:35:02.200 --> 00:35:04.190
This will be cleaned up,
and you will be able to

00:35:04.200 --> 00:35:05.350
use it before too long.

00:35:05.360 --> 00:35:07.510
Thank you very much,
and let's go back to Karl.

00:35:07.510 --> 00:35:09.760
Thanks.

00:35:13.540 --> 00:35:15.750
So I hope you missed me.

00:35:15.800 --> 00:35:16.290
I'm back.

00:35:16.430 --> 00:35:18.380
And I say, hi, these are applications.

00:35:18.460 --> 00:35:20.990
So this is a really short slide,
because really,

00:35:21.070 --> 00:35:22.740
applications haven't changed that much.

00:35:22.740 --> 00:35:26.480
You use the bundler, jar bundler,
and you make a little application.

00:35:26.480 --> 00:35:28.960
This is sort of the traditional
way to deploy your application.

00:35:28.960 --> 00:35:33.040
Developers are sort of used to it,
and users are sort of used to it.

00:35:33.100 --> 00:35:35.480
So it's the thing to do.

00:35:35.480 --> 00:35:41.960
The only thing I'm going to do
is take a brief foray into the

00:35:41.960 --> 00:35:46.800
Java dictionary of the InfoP list,
because people have asked.

00:35:46.940 --> 00:35:49.830
So the Java Dictionary is a
dictionary that's embedded in the

00:35:49.880 --> 00:35:52.240
Info.plist of your bundled application.

00:35:52.240 --> 00:35:55.630
And what it is is basically a
whole stack of information that

00:35:55.630 --> 00:36:00.330
we pass to the running Java app,
to the started Java app.

00:36:00.340 --> 00:36:01.790
You have your main class.

00:36:01.840 --> 00:36:05.260
That's sort of self-explanatory,
and obviously it's mandatory.

00:36:05.340 --> 00:36:07.590
You have the Java VM version.

00:36:07.650 --> 00:36:11.040
You have to specify
which version of the VM,

00:36:11.040 --> 00:36:14.330
but we prefer that you not
be too specific about it.

00:36:14.340 --> 00:36:18.300
Scott talked about it very
briefly when he said 1.4 plus.

00:36:18.340 --> 00:36:23.340
So what we'd like to do is we'd
like to get people away from saying,

00:36:23.340 --> 00:36:27.340
"Oh,
I'm going to run on Java version 1.4.2."

00:36:27.340 --> 00:36:30.840
Because 1.4.2 may not be there later.

00:36:30.840 --> 00:36:33.510
If we come out with, say,
there's a monster security

00:36:33.510 --> 00:36:37.310
breach or a massive,
you know, missing chunk of

00:36:37.330 --> 00:36:40.340
functionality or whatever,
and we put out 1.4.3,

00:36:40.340 --> 00:36:44.320
1.4.2 won't be there anymore,
and your app will stop.

00:36:44.340 --> 00:36:45.900
working.

00:36:46.120 --> 00:36:50.170
So we would much prefer
that you use 1.4*,

00:36:50.170 --> 00:36:53.840
which means any 1.4 VM,
any minor version,

00:36:53.970 --> 00:36:59.400
or 1.4+, which means I'd like to
run on any VM that's at least 1.4.

00:36:59.400 --> 00:37:01.500
These are good things.

00:37:01.500 --> 00:37:02.720
Try to do that.

00:37:02.970 --> 00:37:06.560
This is the same thing that
Java Web Start uses in the JNLP file

00:37:06.610 --> 00:37:09.400
to specify which VM version to use.

00:37:09.400 --> 00:37:12.400
Specific Java properties.

00:37:12.400 --> 00:37:14.990
These are the same properties
that you access with system,

00:37:15.020 --> 00:37:17.400
get, and set properties,
so on and so forth.

00:37:17.400 --> 00:37:18.280
Arguments.

00:37:18.410 --> 00:37:20.400
These are arguments
passed directly to main.

00:37:20.400 --> 00:37:23.910
You don't usually want to use these,
but it can be useful if you're wrapping

00:37:23.910 --> 00:37:25.400
somebody else's command line app.

00:37:25.400 --> 00:37:29.710
If you have a Java program that you
kind of--that expects to have all

00:37:29.710 --> 00:37:32.390
this stuff passed to it as arguments,
you can pass them here.

00:37:32.400 --> 00:37:36.890
The class path, path of files,
obviously this is probably going

00:37:36.890 --> 00:37:38.390
to include at least one file.

00:37:38.400 --> 00:37:40.400
That would be the one
with your main class.

00:37:40.530 --> 00:37:42.390
And VM options.

00:37:42.460 --> 00:37:46.490
So there is a bit of a difference if
you notice that the VM options are

00:37:46.490 --> 00:37:47.400
all the options that you can have.

00:37:47.400 --> 00:37:50.390
Java Web Start doesn't have that option.

00:37:50.450 --> 00:37:53.680
You can specify multiple VMs,
but you can really only

00:37:53.680 --> 00:37:55.400
change the heap settings.

00:37:55.400 --> 00:37:59.390
So the application's a little
bit more flexible in that regard.

00:38:01.370 --> 00:38:04.700
So I'm not going to go in-depth
about building applications.

00:38:04.700 --> 00:38:06.640
It won't force Scott to
come back up here.

00:38:06.640 --> 00:38:09.830
And the reason is because there's
an entire session on this,

00:38:09.920 --> 00:38:14.340
or there was an entire session on this,
Xcode for Java Development this morning.

00:38:14.340 --> 00:38:17.280
You should be able to see
it later at some point,

00:38:17.280 --> 00:38:19.660
either on ADC TV or whatever we use.

00:38:19.660 --> 00:38:25.830
If you have access to last year's DVDs,
there's also Session 608 from back then.

00:38:27.880 --> 00:38:35.040
So now we're on to the sort of
the part that we don't talk about,

00:38:35.040 --> 00:38:37.130
the Java deployment
that will not be named.

00:38:37.130 --> 00:38:39.400
And that's shell scripts and J2EE.

00:38:39.400 --> 00:38:42.900
Shell scripts,
only if you really have to.

00:38:42.900 --> 00:38:45.700
I mean, if you're really,
really sure of who your

00:38:45.830 --> 00:38:49.380
deployment audience is,
go ahead, use shell scripts,

00:38:49.450 --> 00:38:50.530
it'll be okay.

00:38:50.760 --> 00:38:53.740
But in a general sense,
we would prefer that you not use

00:38:53.740 --> 00:38:55.880
shell scripts to launch your apps.

00:38:55.880 --> 00:38:57.230
There are a couple reasons.

00:38:57.240 --> 00:38:59.280
Obviously,
they don't look familiar to users.

00:38:59.280 --> 00:39:02.230
There aren't something that, you know,
most users, you can't tell them, oh,

00:39:02.230 --> 00:39:04.980
to run my Java app, go to terminal and do
this or that or this.

00:39:04.980 --> 00:39:07.760
Or when you double-click my Java app,
this giant terminal window is going

00:39:07.820 --> 00:39:08.940
to open and do all this stuff.

00:39:08.940 --> 00:39:10.650
They're not going to be happy with that.

00:39:10.680 --> 00:39:12.530
But there's actually another reason.

00:39:12.530 --> 00:39:16.020
And the reason is because there's no
launch architecture surrounding it.

00:39:16.080 --> 00:39:23.100
You notice in Java Web Start,
and in the bundled application case,

00:39:23.100 --> 00:39:26.820
you can give us hints as to what
version of the VM you'd like to use.

00:39:26.820 --> 00:39:29.770
When you run in terminal,
when you run with a shell script,

00:39:29.780 --> 00:39:31.970
there's no way to do that
unless you do it manually.

00:39:32.000 --> 00:39:37.900
You either say Java, blah, blah, blah,
and we pick whatever we think

00:39:37.900 --> 00:39:42.130
is the most current version,
or you have to mark a full path.

00:39:42.130 --> 00:39:46.500
You have to system, library, frameworks,
Java VM framework, versions, blah, blah,

00:39:46.520 --> 00:39:51.080
blah, and you pick, like, 1.3.1,
you know, slash bin, slash Java.

00:39:51.080 --> 00:39:53.930
And if that ever goes away,
your application just

00:39:53.930 --> 00:39:55.550
completely stops working.

00:39:55.610 --> 00:39:57.300
Even minor changes to that path.

00:39:57.300 --> 00:40:00.400
If we move the framework
or rename something,

00:40:00.420 --> 00:40:02.420
your application stops working.

00:40:02.420 --> 00:40:05.570
So try to avoid that if you can.

00:40:05.590 --> 00:40:09.640
So JBoss and Tomcat,
J2EE deployment isn't actually, you know,

00:40:09.640 --> 00:40:10.980
it's not bad.

00:40:10.980 --> 00:40:12.620
It's just not what we're
talking about today.

00:40:12.620 --> 00:40:14.810
And there's a whole session on it,
so I wouldn't want to steal

00:40:14.830 --> 00:40:15.740
somebody else's thunder.

00:40:15.740 --> 00:40:20.660
Friday,
9 a.m., how to deploy JBoss on Mac OS.

00:40:20.720 --> 00:40:21.770
10 server.

00:40:21.770 --> 00:40:25.090
This is only available on server,
so unfortunately you can't count

00:40:25.090 --> 00:40:26.510
on it being in the client version.

00:40:29.460 --> 00:40:36.600
So, before we talk about which of these
deployment options you might want to use,

00:40:36.630 --> 00:40:38.670
let's talk about a couple
of deployment gotchas,

00:40:38.780 --> 00:40:40.560
things that aren't
always readily apparent,

00:40:40.690 --> 00:40:43.670
particularly if you're
coming from another platform.

00:40:44.300 --> 00:40:46.350
So where is Java Home?

00:40:46.420 --> 00:40:49.430
Java Home is library Java Home.

00:40:49.550 --> 00:40:52.890
And the lib directory, your source jar,
all the stuff that you

00:40:52.890 --> 00:40:55.170
expect to be in Java Home,
the in directory, it's all there.

00:40:55.320 --> 00:40:57.950
And it's symlinked to
the appropriate location.

00:40:58.030 --> 00:41:00.570
So the obvious question is, well,
where do extensions go?

00:41:00.710 --> 00:41:02.940
Extensions go into
library Java extensions,

00:41:02.990 --> 00:41:06.620
or the user's home directory
library Java extensions.

00:41:06.730 --> 00:41:11.600
There's a little bit of a catch here,
which is that while Java Home is

00:41:11.660 --> 00:41:17.070
symlinked to the appropriate
version-- so when you run Java 1.4.2,

00:41:17.070 --> 00:41:22.400
you get the Java 1.4.2 Home-- all of
the library Java extensions are used by

00:41:22.400 --> 00:41:24.420
all the different versions of the VM.

00:41:24.530 --> 00:41:27.460
So if you drop ant.jar into
library Java extensions,

00:41:27.530 --> 00:41:30.130
ant.jar is going to be available
no matter what version of

00:41:30.140 --> 00:41:32.670
the VM you're running under.

00:41:32.760 --> 00:41:36.330
So that's a little bit
something to keep in track of.

00:41:36.410 --> 00:41:38.490
It's confused some people before.

00:41:38.630 --> 00:41:42.740
One thing to keep in mind-- and
I've talked about how Web Start and

00:41:43.020 --> 00:41:47.100
Apple bundled applications can try
to pick which version of the VM.

00:41:47.100 --> 00:41:48.460
Applets don't have that luxury.

00:41:48.460 --> 00:41:53.560
Applets launch in whatever version of the
VM their container has decided to use.

00:41:53.560 --> 00:41:57.480
So Microsoft IE Internet Explorer uses
1.3.1.

00:41:57.480 --> 00:41:59.210
Applets launch there, use 1.3.1.

00:41:59.220 --> 00:42:00.340
They don't have a choice.

00:42:00.340 --> 00:42:02.360
WebKit uses 1.4.2.

00:42:02.360 --> 00:42:04.260
Applets launched in there use 1.4.2.

00:42:04.260 --> 00:42:05.560
They don't have a choice.

00:42:05.580 --> 00:42:09.020
So applets are limited not
necessarily by the technology,

00:42:09.020 --> 00:42:11.720
but with the knowledge that
your deployment may have to be

00:42:11.720 --> 00:42:13.060
the lowest common denominator.

00:42:13.060 --> 00:42:15.970
of what you think your
users will be using.

00:42:17.590 --> 00:42:20.200
So I'm going to harp again.

00:42:20.380 --> 00:42:23.480
Sorry about this,
but I've been asked to harp on it,

00:42:23.550 --> 00:42:24.380
so I will.

00:42:24.420 --> 00:42:28.220
Don't use 1.4.1 and 1.4.2
as your JVM version when

00:42:28.220 --> 00:42:31.790
you write Web Start apps,
when you write bundled apps.

00:42:32.130 --> 00:42:39.010
It is Apple's policy that minor version
updates will outright overwrite older,

00:42:39.180 --> 00:42:41.420
minor updates.

00:42:41.770 --> 00:42:46.170
1.4.3, if and when it comes out,

00:42:46.400 --> 00:43:04.600
[Transcript missing]

00:43:05.330 --> 00:43:06.500
Thanks.

00:43:06.540 --> 00:43:07.620
All right.

00:43:07.730 --> 00:43:10.410
So at this point, we've gone over all
these options-- applets,

00:43:10.410 --> 00:43:13.060
signed applets,
Java Web Start bundled applications.

00:43:13.060 --> 00:43:14.800
And you've got to be wondering, well,
why?

00:43:14.920 --> 00:43:17.220
Which one of these should I be using?

00:43:17.350 --> 00:43:18.620
So applets.

00:43:18.660 --> 00:43:20.970
Applets are the lightest weight.

00:43:21.130 --> 00:43:22.320
They have nice things.

00:43:22.320 --> 00:43:23.630
They have built-in SSL support.

00:43:23.770 --> 00:43:26.850
They don't require downloads or installs.

00:43:27.060 --> 00:43:29.110
But they're kind of limited.

00:43:29.410 --> 00:43:31.530
You can't choose the VM version,
and they're floating in

00:43:31.560 --> 00:43:32.600
somebody else's process.

00:43:32.660 --> 00:43:34.730
And they're in a complete sandbox.

00:43:34.840 --> 00:43:37.740
If all you need is to
walk outside the sandbox,

00:43:37.990 --> 00:43:39.050
pick a signed applet.

00:43:39.110 --> 00:43:40.770
In a signed applet,
you can get local disk.

00:43:40.860 --> 00:43:43.470
You can get some
restricted property access.

00:43:43.760 --> 00:43:45.840
The next step up,
if you need native code,

00:43:45.890 --> 00:43:48.550
but you still want that ability
to talk over the network,

00:43:48.610 --> 00:43:53.340
the ability to get frequent updates,
or you need control over the VM,

00:43:53.340 --> 00:43:56.970
which VM you're using,
which resources get downloaded,

00:43:56.970 --> 00:43:59.070
think about Java Web Start.

00:43:59.190 --> 00:44:04.260
You still get the ability to be
dynamic in terms of what's running.

00:44:04.420 --> 00:44:08.460
But you get a little bit more control
over what's actually going to happen.

00:44:08.730 --> 00:44:11.940
Finally, you have bundled applications.

00:44:12.050 --> 00:44:13.500
This is if your app's really huge.

00:44:13.500 --> 00:44:16.660
If you want to distribute
it on a CD some way,

00:44:16.660 --> 00:44:19.400
or you don't have the network bandwidth.

00:44:19.400 --> 00:44:23.510
You know, you want to distribute it,
and you want to be done with it.

00:44:23.910 --> 00:44:25.560
Then you use the bundled application.

00:44:25.580 --> 00:44:32.400
Or if you're bundling an existing
tool that needs arguments,

00:44:32.450 --> 00:44:36.090
Java VM options that are very specific,
all of those things

00:44:36.140 --> 00:44:37.940
have to be bundled apps.

00:44:40.240 --> 00:44:42.580
Let's look into the future.

00:44:42.650 --> 00:44:45.020
We've talked about what's happened,
and let's talk about

00:44:45.020 --> 00:44:46.330
what's going to happen.

00:44:46.460 --> 00:44:53.130
So we have the 1.5.0 developer preview 1.

00:44:53.160 --> 00:44:53.960
And we just released it.

00:44:53.960 --> 00:44:55.090
It runs on Tiger.

00:44:55.180 --> 00:44:57.990
So sadly,
since I've just been talking about it,

00:44:58.070 --> 00:45:01.050
there's no Web Start or applet
support in the developer preview.

00:45:01.110 --> 00:45:03.680
It's an enterprise preview.

00:45:03.930 --> 00:45:08.780
It will be coming, and in the end result,
you have all the Web Start applet

00:45:08.880 --> 00:45:12.950
deployment goodness that you've
come to love and expect from Apple.

00:45:13.290 --> 00:45:15.300
So let's talk a little bit
about what will be coming,

00:45:15.300 --> 00:45:15.900
what's new.

00:45:15.900 --> 00:45:19.220
Well, the applet plugin and
Web Start have been combined.

00:45:19.240 --> 00:45:21.560
I think they just decided
they're so similar,

00:45:21.560 --> 00:45:23.320
why have them be separate?

00:45:23.320 --> 00:45:25.960
There's a number of
enterprise enhancements.

00:45:26.010 --> 00:45:28.600
You can set a security model
across an organization.

00:45:28.600 --> 00:45:32.320
You can have deployment
properties specified in a URL,

00:45:32.320 --> 00:45:35.520
and you can mark properties
as either overrideable or not

00:45:35.520 --> 00:45:37.380
overrideable by specific deployments.

00:45:37.380 --> 00:45:41.620
HTTPS client authentication
rears its wonderful head.

00:45:42.640 --> 00:45:45.740
And then a set of things which are
really interesting to me personally.

00:45:45.740 --> 00:45:48.350
There's PAC 200 compression for jars.

00:45:48.360 --> 00:45:51.130
It's a new jar compression,
and it has the capability of

00:45:51.130 --> 00:45:55.250
compressing your jars up to eight times
smaller than they are compressed now.

00:45:55.260 --> 00:45:56.830
This is great.

00:45:56.900 --> 00:45:59.880
From a user's point of view,
it means when they hit your web

00:45:59.900 --> 00:46:02.910
page and they download an applet,
or when they click on the Web Start link

00:46:02.940 --> 00:46:07.380
and they start downloading your app,
it launches just like that.

00:46:07.440 --> 00:46:09.840
It's much nicer,
and it starts bringing things

00:46:09.840 --> 00:46:12.080
like Web Start into the realm
of being real desktop apps.

00:46:12.080 --> 00:46:14.380
desktop app replacements.

00:46:14.800 --> 00:46:17.750
The next thing,
the fact that Web Start desktop

00:46:17.800 --> 00:46:18.930
apps can now have document types.

00:46:18.960 --> 00:46:19.930
You can actually bind.

00:46:19.930 --> 00:46:22.400
You can say,
I claim this particular document,

00:46:22.590 --> 00:46:28.040
dot J-L-N-S-T-W, whatever, you know,
your own personal little initials.

00:46:28.130 --> 00:46:29.340
But now you can associate.

00:46:29.340 --> 00:46:31.480
When the user double
clicks on that document,

00:46:31.480 --> 00:46:33.220
your bundled app is going to launch.

00:46:33.220 --> 00:46:34.390
And that's awesome.

00:46:36.140 --> 00:46:39.100
And finally, an import facility,
one more step in the ability

00:46:39.100 --> 00:46:41.730
to make Web Start apps more and
more like real desktop apps.

00:46:41.760 --> 00:46:44.490
With an import facility,
you can pre-populate the cache.

00:46:44.500 --> 00:46:47.990
It's basically like an installer
that sets a Web Start up app as

00:46:47.990 --> 00:46:52.940
if the user had already downloaded
all the jars and built the app.

00:46:53.040 --> 00:46:57.640
So you get all the niceness without
that initial niggling startup,

00:46:57.640 --> 00:47:00.900
you know, the first couple times that the
user has to click on things.

00:47:01.010 --> 00:47:03.640
They can treat it like it was
always a desktop application that

00:47:03.690 --> 00:47:06.200
just knows how to update itself.

00:47:08.520 --> 00:47:09.840
All right, part de.

00:47:09.970 --> 00:47:14.320
So let's go in a little bit
more depth about what's changed.

00:47:14.480 --> 00:47:17.460
So in particular,
the applet plugin and the

00:47:17.460 --> 00:47:19.310
Web Start have merged.

00:47:19.440 --> 00:47:21.340
That means that they share a cache.

00:47:21.370 --> 00:47:22.030
This is good.

00:47:22.120 --> 00:47:25.680
It means that you're more
likely to have whatever it is

00:47:25.680 --> 00:47:26.970
you're trying to run in cache.

00:47:27.040 --> 00:47:29.200
It simplifies things considerably.

00:47:29.220 --> 00:47:31.340
This means there's no more
Web Start application.

00:47:31.360 --> 00:47:34.440
There's a couple of new
applications that take it place.

00:47:34.550 --> 00:47:36.790
There's a plugin settings
and a cache viewer.

00:47:36.940 --> 00:47:39.320
The rest of that functionality,
I think they rightly decided,

00:47:39.320 --> 00:47:42.120
was to be pushed off into the browser.

00:47:42.580 --> 00:47:43.500
So what's already there?

00:47:43.500 --> 00:47:47.370
These are new to Java 1.5, but frankly,
they're not new to the Mac.

00:47:47.440 --> 00:47:49.060
As always,
we've been on the leading edge,

00:47:49.060 --> 00:47:50.890
so we've had these for a while.

00:47:50.900 --> 00:47:56.220
Java 1.5 has integration with Keychain,
but even on 1.4.2,

00:47:56.330 --> 00:47:58.150
Scott demoed it for you.

00:47:58.220 --> 00:48:01.020
And we have auto detection
of all installed VMs.

00:48:01.020 --> 00:48:04.230
This is a lot more important on
platforms that don't provide the

00:48:04.230 --> 00:48:07.140
VM as a supported system framework,
which we do.

00:48:09.400 --> 00:48:14.130
So we've talked about
Java 1.5 in the future.

00:48:14.130 --> 00:48:17.570
And actually, we were going to end the
session at this point,

00:48:17.570 --> 00:48:20.990
but they announced
Tiger earlier this week.

00:48:21.160 --> 00:48:23.570
And I was thinking about Dashboard.

00:48:23.630 --> 00:48:25.550
And I thought, wow.

00:48:25.770 --> 00:48:27.140
That's pretty cool.

00:48:27.180 --> 00:48:29.230
I can write little widgets.

00:48:29.420 --> 00:48:31.020
But then I thought, you know what?

00:48:31.080 --> 00:48:32.710
I really hate JavaScript.

00:48:32.710 --> 00:48:35.510
I don't like writing
things in JavaScript.

00:48:35.510 --> 00:48:37.340
Yeah.

00:48:37.340 --> 00:48:39.910
But if it's a real -- and
then I went to the dashboard

00:48:39.910 --> 00:48:41.520
gadget session and they said,
you know what?

00:48:41.520 --> 00:48:43.720
This is a real WebView.

00:48:43.720 --> 00:48:49.390
It's not just a JavaScript engine,
you know, putting up custom graphics.

00:48:49.470 --> 00:48:52.870
And then I thought, hey,
that could be really interesting.

00:48:52.950 --> 00:48:59.170
So if I could switch to demo One, please.

00:48:59.830 --> 00:49:02.820
And I thought to myself, hey,
that's kind of funky.

00:49:02.860 --> 00:49:04.000
Look what I can do.

00:49:04.280 --> 00:49:07.830
I can run Java applets
inside of Dashboard.

00:49:07.950 --> 00:49:11.060
So this is a completely different way

00:49:13.130 --> 00:49:17.400
For you to deploy your Java applications,
you can write little desktop

00:49:17.400 --> 00:49:21.310
widgets for people to use
at the touch of a fingertip.

00:49:23.660 --> 00:49:25.100
And we'll leave you with that.

00:49:25.120 --> 00:49:29.000
That's Deploying
Java Applications on Mac OS X.

00:49:29.070 --> 00:49:32.110
Thank you, and have a good evening.

00:49:39.790 --> 00:49:43.100
So we're going to do Q&A,
but first I get to do this whole thing.

00:49:43.120 --> 00:49:44.780
Look, it's the reference library.

00:49:45.020 --> 00:49:46.360
We have a ton of documentation.

00:49:46.490 --> 00:49:47.720
Some of it's ours.

00:49:47.840 --> 00:49:48.850
Some of it is Sun's.

00:49:49.000 --> 00:49:50.550
It's all very exciting.

00:49:50.610 --> 00:49:51.640
It's gripping text.

00:49:51.780 --> 00:49:52.960
You should read it.

00:49:53.010 --> 00:49:55.180
It will enrich your life.

00:49:57.060 --> 00:50:00.090
Now if you have any complaints,
you can complain to him.

00:50:00.200 --> 00:50:03.960
So if you have people to talk to,
if you have questions, comments,

00:50:03.960 --> 00:50:07.360
feature requests, bugs, anything,
talk to Alan Samuel.

00:50:07.360 --> 00:50:09.050
He's our Java evangelist.

00:50:09.150 --> 00:50:10.000
His email is up there.

00:50:10.000 --> 00:50:12.000
Bob Fraser is our marketing person.

00:50:12.000 --> 00:50:16.650
If you feel that we're not, I don't know,
we're not marketing Java, talk to Bob.

00:50:16.880 --> 00:50:17.990
Not actually sure.

00:50:18.000 --> 00:50:19.990
And the Java Developer Mainland List.

00:50:19.990 --> 00:50:22.000
Java Developer Mainland List is great.

00:50:22.000 --> 00:50:25.330
It's a place where people of
all kinds of occupations and

00:50:25.330 --> 00:50:30.000
creeds can come together and,
well, really flame each other about Java.

00:50:30.000 --> 00:50:31.170
No, it's good.

00:50:31.170 --> 00:50:35.190
It talks about things and people
hash out problems and they,

00:50:35.190 --> 00:50:39.000
you know, where a lot of the web,
I'm sorry, a lot of the Java engineers

00:50:39.000 --> 00:50:40.000
are on the Java dev list.

00:50:40.030 --> 00:50:42.380
So actually if you have issues,
you have questions,

00:50:42.420 --> 00:50:43.980
how do I do this thing on the Mac?

00:50:44.010 --> 00:50:46.000
How do I make this app look better?

00:50:46.000 --> 00:50:46.990
You know,
why does this behave differently

00:50:47.010 --> 00:50:48.980
on the Mac than other platforms?

00:50:49.000 --> 00:50:52.120
Join Java dev and ask and
somebody from the Java team will

00:50:52.160 --> 00:50:54.000
try to answer your questions.

00:50:54.000 --> 00:50:56.660
But of course,
if you really think it's a problem,

00:50:56.710 --> 00:50:57.990
you should file a bug.

00:50:58.480 --> 00:50:59.980
Always file bugs.

00:50:59.980 --> 00:51:01.990
Bugs are our friends.

00:51:02.010 --> 00:51:03.000
Because they keep us in business.

00:51:03.000 --> 00:51:04.990
I mean, that's my job.

00:51:05.020 --> 00:51:05.890
I fix bugs.