WEBVTT

00:00:17.620 --> 00:00:23.070
Thank you guys for coming out to
learn about replacing your old style

00:00:23.230 --> 00:00:25.920
Windows and Dialogs with NiB files.

00:00:26.050 --> 00:00:30.330
Now, what are we talking about when we're
talking about old style Dialogs?

00:00:30.440 --> 00:00:33.490
Well, specifically,
this refers to using the Dialog

00:00:33.490 --> 00:00:36.760
Manager and the Resource Manager to
pull in your Dialogs,

00:00:36.840 --> 00:00:40.080
and then using APIs like Modal Dialog
to go into a modal situation and

00:00:40.080 --> 00:00:42.580
handle all the dispatching yourself.

00:00:44.800 --> 00:00:48.480
So some of the things I hope you learned
today is how to move your existing

00:00:48.480 --> 00:00:54.080
resource-based user interface up to NiBs
by getting them into Interface Builder.

00:00:54.110 --> 00:00:58.830
Then we'll talk about getting into
simplifying your event handling

00:00:59.430 --> 00:01:03.190
using the new technologies that are
available in the high-level toolbox.

00:01:04.080 --> 00:01:06.660
I want you also to start
using the standard window

00:01:06.660 --> 00:01:07.760
handler if you're not already.

00:01:07.770 --> 00:01:10.980
And this is so the toolbox can
provide standard behaviors for

00:01:10.980 --> 00:01:16.000
you and eliminate a lot of code
that you need to take care of.

00:01:16.040 --> 00:01:20.250
And also, you'll learn why you'll
need to adopt HIView.

00:01:22.380 --> 00:01:26.010
The steps of getting your user
interface up to a modern-- into a

00:01:26.010 --> 00:01:31.200
NiB and using the modern technology
in the toolbox are pretty simple.

00:01:31.290 --> 00:01:34.680
First, you need to import
your dialogs into NIBs.

00:01:34.740 --> 00:01:39.140
And you can do this using an importer
that's built into Interface Builder.

00:01:39.200 --> 00:01:42.740
Now, I specifically talk about getting
it in from your resource files,

00:01:42.740 --> 00:01:45.760
but the same techniques
will apply after that,

00:01:45.950 --> 00:01:49.320
regardless of how you built
your interface using a

00:01:49.970 --> 00:01:52.250
flattened interface format.

00:01:53.340 --> 00:01:55.110
Then at runtime,
you'll actually need to load

00:01:55.120 --> 00:01:59.580
in that interface and display
it on the screen for the user.

00:01:59.610 --> 00:02:02.530
Then you need to rewrite
how you handle events,

00:02:02.730 --> 00:02:07.480
because the old way of handling events
using modal dialog isn't going to

00:02:07.770 --> 00:02:10.060
work once you import it up to Nibs.

00:02:10.410 --> 00:02:13.550
And then if you're using modality
because you're putting up a

00:02:13.620 --> 00:02:18.680
dialog that needs to interact
with a user in a modal situation,

00:02:18.870 --> 00:02:23.800
there's a different way of dealing with
modality that I'll talk about as well.

00:02:24.550 --> 00:02:26.500
And then finally,
if you have custom content that's

00:02:26.500 --> 00:02:29.690
being drawn in your dialog,
we're going to encourage

00:02:29.690 --> 00:02:33.860
you to start using HIViews,
specifically for performance.

00:02:33.950 --> 00:02:37.610
If you switch into compositing mode,
this has to be done.

00:02:39.600 --> 00:02:40.800
Why would you want to convert to Nibs?

00:02:40.800 --> 00:02:43.180
Why do you want to make this transition?

00:02:43.260 --> 00:02:46.750
The single biggest reason is because
we're doing a lot of work in the

00:02:46.780 --> 00:02:50.650
toolbox to improve performance,
give you new features like new

00:02:50.650 --> 00:02:53.820
widgets that are now available,
and the Dialog Manager and using all

00:02:53.820 --> 00:02:57.670
the resources to build your interface,
it just won't cut it.

00:02:58.070 --> 00:02:59.860
Localization is also easier.

00:02:59.860 --> 00:03:03.670
If you've built your
interface with resources,

00:03:03.700 --> 00:03:06.510
generally how you ship those
is by packaging the resource

00:03:06.600 --> 00:03:07.960
with the application.

00:03:08.010 --> 00:03:10.790
And when you need to localize,
you need to build a separate version

00:03:10.790 --> 00:03:12.780
of your application to deploy.

00:03:12.780 --> 00:03:16.690
Using NIBs, and actually specifically
using application bundles,

00:03:16.690 --> 00:03:21.460
this is so much easier because you can
localize your application in the NIB,

00:03:21.510 --> 00:03:25.330
and then you can deploy one
binary or package across

00:03:25.530 --> 00:03:27.880
from different localizations.

00:03:28.250 --> 00:03:31.730
Maintenance of building your
interface and modifying it is so

00:03:31.730 --> 00:03:33.600
much easier when you're using NIBs.

00:03:33.650 --> 00:03:36.180
If you're using the
Dialog Manager right now,

00:03:36.180 --> 00:03:40.200
you're probably aware of all the
problems if you need to delete an item

00:03:40.320 --> 00:03:45.140
that's in your dialog or add an item,
and you have to keep the dialog item

00:03:45.600 --> 00:03:52.770
list in sync with the numbers that your
code thinks that those dialog items are.

00:03:52.770 --> 00:03:52.770
And that can just be a nightmare.

00:03:53.810 --> 00:03:56.200
Also,
we're adding new features in the toolbox.

00:03:56.200 --> 00:03:59.600
And as we do this, these features will be
added to Interface Builder,

00:03:59.600 --> 00:04:02.370
and you can just use
them in your interface.

00:04:03.300 --> 00:04:05.440
Building your interface
with IB is so much easier,

00:04:05.490 --> 00:04:05.890
also.

00:04:06.050 --> 00:04:08.690
We have Aqua interface
guidelines that are built in.

00:04:08.790 --> 00:04:10.950
So previously,
when you were building your interface,

00:04:11.090 --> 00:04:14.320
you would have to look
at the HI guidelines,

00:04:14.450 --> 00:04:17.920
figure out exactly how many pixels
the button needs to be from this other

00:04:17.920 --> 00:04:19.680
button and to the edge of the window.

00:04:20.010 --> 00:04:25.400
Well, all of this is built
into Interface Builder.

00:04:25.400 --> 00:04:25.400
And I'll give you a demonstration
of how you can do that.

00:04:25.780 --> 00:04:27.820
You can also test your
interface immediately.

00:04:27.820 --> 00:04:30.380
And then once you get your interface
loaded and start handling events,

00:04:30.500 --> 00:04:31.460
it's just so much easier.

00:04:31.460 --> 00:04:33.820
And I'm sure you'll agree.

00:04:34.730 --> 00:04:37.440
Some of the things that
Guy mentioned in the last session

00:04:37.440 --> 00:04:39.010
was about compositing mode.

00:04:39.020 --> 00:04:41.200
Now, this is a huge win in
terms of performance.

00:04:41.260 --> 00:04:43.880
Compositing mode is based
on invalidation model,

00:04:43.910 --> 00:04:47.280
so you're not doing unnecessary
drawing and redrawing controls

00:04:47.710 --> 00:04:48.690
more often than necessary.

00:04:48.770 --> 00:04:52.890
It also allows overlapping of views,
and if you saw the demo before the

00:04:52.940 --> 00:04:56.250
machine crashed in the last session,
you were able to see all these

00:04:56.250 --> 00:04:57.580
views that were rotating.

00:04:57.580 --> 00:05:00.870
Some you could actually see through
because they were translucent.

00:05:00.960 --> 00:05:04.930
And it just gives--it's a
better experience for the user,

00:05:04.990 --> 00:05:07.850
and it also gives better performance.

00:05:09.610 --> 00:05:14.060
So the first step of getting up into
the modern toolbox is to get your

00:05:14.290 --> 00:05:17.300
interface into Interface Builder.

00:05:18.550 --> 00:05:20.580
You can do this one of two ways.

00:05:20.920 --> 00:05:24.100
If you have a resource-based
user interface,

00:05:24.140 --> 00:05:26.360
you can import that, like I mentioned,
in Interface Builder

00:05:26.360 --> 00:05:28.510
from the Import menu.

00:05:28.720 --> 00:05:32.090
Or you could go about building
your interface manually.

00:05:32.160 --> 00:05:35.060
I'll talk about why you might
want to do that in a moment.

00:05:35.290 --> 00:05:38.360
But if you need to import
your resource-based interface,

00:05:38.400 --> 00:05:40.100
it's just really easy.

00:05:40.170 --> 00:05:42.100
From the File menu--

00:05:42.360 --> 00:05:45.360
You select to import your resource file.

00:05:45.420 --> 00:05:48.760
You select which objects to import.

00:05:49.060 --> 00:05:51.500
with the dialog that pops up.

00:05:51.540 --> 00:05:54.000
Once you select which objects to import,
you hit it,

00:05:54.030 --> 00:06:00.480
and then Interface Builder will create
a new NiB and pull in your interface.

00:06:00.540 --> 00:06:02.690
It's also really nice because
if you have controls that

00:06:02.690 --> 00:06:05.590
are embedded in your dialogs,
this will all just be pulled in

00:06:05.590 --> 00:06:07.870
automatically by the importer.

00:06:08.480 --> 00:06:11.350
Alternatively,
you can build the interface manually.

00:06:11.350 --> 00:06:13.240
And you might want to do
this because your interface

00:06:13.700 --> 00:06:16.740
was perhaps poorly designed,
or maybe it didn't quite follow

00:06:16.740 --> 00:06:19.760
the Aqua interface guidelines,
and you want to start taking advantage of

00:06:19.760 --> 00:06:21.850
the guides that are in Interface Builder.

00:06:21.950 --> 00:06:27.660
Or maybe you just want to start
taking advantage and adopting new

00:06:27.660 --> 00:06:27.660
widgets that are available right now.

00:06:29.620 --> 00:06:33.630
Either method you choose,
once it's in Interface Builder,

00:06:33.720 --> 00:06:35.300
the steps are the same.

00:06:35.300 --> 00:06:40.240
You can bring up the Inspector window
and start editing control properties.

00:06:40.290 --> 00:06:43.290
You can also take advantage of a
technology called HIView Layouts.

00:06:43.500 --> 00:06:46.750
And this means that you can
set layouts in the sense of

00:06:46.770 --> 00:06:49.430
how they are bound to its,
like for a view,

00:06:49.600 --> 00:06:51.210
how it's bound to its parent.

00:06:51.490 --> 00:06:55.060
So as you resize a window,
these can all be handled by reflowing

00:06:55.070 --> 00:06:56.500
the contents of your window.

00:06:56.500 --> 00:06:59.110
This can all be handled
using HIView Layouts,

00:06:59.110 --> 00:07:01.940
and you don't have to
write any code to do this.

00:07:02.380 --> 00:07:05.930
Also, in the interface,
you can assign HIView IDs,

00:07:05.930 --> 00:07:08.400
and that's so you can
access your controls,

00:07:08.540 --> 00:07:11.380
and HI commands,
which are going to be sent when certain

00:07:11.380 --> 00:07:14.260
actions are performed in your interface.

00:07:14.560 --> 00:07:17.880
Also make sure, once your interface is
in Interface Builder,

00:07:17.910 --> 00:07:20.780
that you have turned on the
standard window handler.

00:07:20.830 --> 00:07:24.240
Now what this does is it allows
the toolbox to take care of

00:07:24.250 --> 00:07:27.850
all of the mundane stuff,
the stuff that everybody has to do,

00:07:27.850 --> 00:07:31.380
like resizing the window or
dragging the window around.

00:07:31.630 --> 00:07:38.720
And it will handle control tracking,
like when the user clicks in the window,

00:07:38.760 --> 00:07:42.180
it will handle what controls are
tracked and then let you know that

00:07:42.270 --> 00:07:43.360
something interesting has happened.

00:07:44.580 --> 00:07:47.000
And then you can also test the interface
and make sure that everything works

00:07:47.000 --> 00:07:48.860
out the way you want it to work.

00:07:49.730 --> 00:07:51.360
So that step is fairly easy.

00:07:51.400 --> 00:07:54.280
Just get it into Interface Builder,
save out that NiB file.

00:07:54.360 --> 00:07:57.910
Now, at runtime,
how do you actually load that interface?

00:07:58.700 --> 00:08:00.900
There's just really easy steps.

00:08:00.970 --> 00:08:03.980
You have to first get
a reference to the NiB.

00:08:04.050 --> 00:08:06.730
Then if you have a menu
bar that's in the NiB,

00:08:06.800 --> 00:08:11.140
you just go ahead and you load that
in and set that for your application.

00:08:11.440 --> 00:08:14.490
You also extract the windows
by just using a very simple

00:08:14.590 --> 00:08:15.520
API to get your window out.

00:08:15.620 --> 00:08:18.700
Now this will pull in all of the controls
that are associated with that window and

00:08:18.700 --> 00:08:21.400
instantiate them at that time as well.

00:08:21.520 --> 00:08:24.100
And finally, after you get the
information out of that Nib,

00:08:24.180 --> 00:08:26.910
you release the reference
to the Nib and you're done.

00:08:27.650 --> 00:08:30.100
And you do this using these APIs.

00:08:30.150 --> 00:08:32.000
To create a NiB reference,
you just call the API,

00:08:32.080 --> 00:08:34.060
createNibReference,
and you pass in the name of your

00:08:34.060 --> 00:08:36.500
NiB minus the .Nib extension.

00:08:36.500 --> 00:08:38.930
If you have a menu bar in
there and you want to set that

00:08:38.930 --> 00:08:44.130
menu bar for your application,
you call the API, setMenubarFromNib.

00:08:46.560 --> 00:08:49.400
Now I want to pull
into one of my windows.

00:08:49.410 --> 00:08:54.400
So I call createWindow from NiB,
passing in the name of my window.

00:08:54.400 --> 00:08:57.290
This window is going to be
pulled in from your NiB,

00:08:57.290 --> 00:08:59.680
but keep in mind that
for performance reasons,

00:08:59.740 --> 00:09:02.480
because maybe you need
to pre-flight the dialog,

00:09:02.480 --> 00:09:04.360
you know, add some information
into some text fields,

00:09:04.470 --> 00:09:07.400
for instance,
the window is initially invisible.

00:09:07.400 --> 00:09:10.390
So if you want it to show,
you have to call showWindow.

00:09:13.550 --> 00:09:18.510
Finally, when you're done,
just use the API DisposeNibReference.

00:09:18.690 --> 00:09:21.670
You don't need to cache this
NiB reference for later use.

00:09:21.680 --> 00:09:22.880
In fact, it's just better.

00:09:22.880 --> 00:09:24.540
When you're done using it,
just dispose it.

00:09:24.540 --> 00:09:26.770
If you need to use it again,
go ahead and create another

00:09:26.770 --> 00:09:28.160
NiB reference to that NiB.

00:09:31.600 --> 00:09:34.890
So once you have your interface loaded,
how do I actually access

00:09:34.890 --> 00:09:37.460
the items that are in there?

00:09:37.520 --> 00:09:40.680
This too is just really easy
using Interface Builder.

00:09:40.740 --> 00:09:45.180
If you select on a control or any item
in your interface in Interface Builder,

00:09:45.220 --> 00:09:51.490
you can bring up the Inspector window
and go look at the control segment of it.

00:09:51.580 --> 00:09:56.660
And you can assign a control ID or
an HIView ID to that control.

00:09:56.700 --> 00:10:00.550
Now a control ID is a signature,
which is four character code.

00:10:00.600 --> 00:10:02.360
And keep in mind with
four character codes,

00:10:02.410 --> 00:10:05.880
all lower cases reserved for Apple use,
and all mixed and upper case,

00:10:05.900 --> 00:10:08.380
you can use as much as you want.

00:10:08.420 --> 00:10:09.470
And then also an ID.

00:10:09.780 --> 00:10:14.660
So you can use signatures to represent
all of one type of control and an

00:10:14.660 --> 00:10:17.900
ID for each individual control in
that segment of your interface,

00:10:17.950 --> 00:10:19.620
for instance.

00:10:20.170 --> 00:10:25.730
And then at runtime, programmatically,
you would use the API HIView find by ID.

00:10:25.730 --> 00:10:29.070
And that's so you can actually find
that control in the interface and

00:10:29.260 --> 00:10:32.450
grab a reference to the control.

00:10:32.940 --> 00:10:35.840
In code, this is how you do it.

00:10:35.880 --> 00:10:38.900
You define an HIView ID,
which represent the signature and

00:10:38.900 --> 00:10:41.540
ID that you set in Interface Builder.

00:10:41.600 --> 00:10:45.720
You call the HIView findByID API,
and it returns your

00:10:45.720 --> 00:10:48.020
control reference to you,
and you can just go to town,

00:10:48.020 --> 00:10:49.980
do whatever you need to
do with that control.

00:10:51.130 --> 00:10:57.430
So let's go take a quick demo,
and I'll show you those initial steps of

00:10:57.520 --> 00:11:02.510
importing your interface and then loading
that interface into your application.

00:11:08.460 --> 00:11:10.690
Before I get started,
I have to give you a standard disclaimer.

00:11:10.700 --> 00:11:13.110
I am not a user interface
designer at all.

00:11:13.190 --> 00:11:16.900
I just sit at my computer and I punch
numbers in to make this stuff work.

00:11:17.030 --> 00:11:21.640
So while what you see may amaze you
and astound you of how brilliant it is,

00:11:21.770 --> 00:11:25.480
I really highly recommend you don't
design your interface like this.

00:11:26.530 --> 00:11:32.560
So let's say that I wanted to have a
really fast music editing application.

00:11:32.560 --> 00:11:36.000
So I just whip something
up really fast in Carbon.

00:11:36.060 --> 00:11:38.300
And it looks something like this.

00:11:39.800 --> 00:11:41.460
Okay, now, actually, I mean,
this is just a mock-up.

00:11:41.460 --> 00:11:42.460
It doesn't really do anything.

00:11:42.460 --> 00:11:44.140
I mean,
the only thing it does really well

00:11:44.140 --> 00:11:46.200
is not get the spinning cursor.

00:11:46.300 --> 00:11:49.050
But if I want to get information
about a song that I've created,

00:11:49.250 --> 00:11:53.130
I go down to my Song Info,
and I bring up a dialog.

00:11:54.320 --> 00:11:59.750
Now this dialog is loaded
in from a resource,

00:11:59.750 --> 00:12:02.470
and then it's using modal dialog
to actually do some information.

00:12:02.640 --> 00:12:06.530
So any song info palette wouldn't
be complete without having a

00:12:06.530 --> 00:12:10.080
really cool equalizer view in it,
so you can see the equalizer.

00:12:10.160 --> 00:12:11.120
So at this point, I go here.

00:12:11.120 --> 00:12:17.680
Now this is my user interface skills,
like, behold, Quick Draw rectangles.

00:12:18.460 --> 00:12:21.300
Don't do this in your interface,
it's just a demo.

00:12:21.460 --> 00:12:24.100
But you can choose different
equalizer settings.

00:12:24.240 --> 00:12:26.800
Oh, it's so beautiful, so cool.

00:12:26.940 --> 00:12:29.000
And because last time you
blew out your dad's speakers,

00:12:29.030 --> 00:12:31.100
you want to be able to clip
the sound at certain areas,

00:12:31.100 --> 00:12:33.390
so we go track when you want to,
you know,

00:12:33.520 --> 00:12:36.240
how loud the volume can get before
it starts clipping the music off.

00:12:36.400 --> 00:12:38.000
I don't know if this is how
real music programs work,

00:12:38.000 --> 00:12:40.440
it just makes a really good demo.

00:12:41.350 --> 00:12:45.220
So while the interface may look simple,
clicking around does some things,

00:12:45.500 --> 00:12:47.870
there's actually a lot of code
going on behind the scenes to

00:12:47.870 --> 00:12:50.410
actually get this up and running.

00:12:51.170 --> 00:12:56.440
And then your boss comes in and says,
I need you to create some new

00:12:56.760 --> 00:12:59.290
summary information in there,
like a text field that you can

00:12:59.290 --> 00:13:00.900
type as much as you want in.

00:13:00.950 --> 00:13:03.050
And you're thinking, man,
using the Dialog Manager,

00:13:03.060 --> 00:13:04.740
how am I going to do that?

00:13:04.790 --> 00:13:08.310
This might be a great opportunity
to start learning about NIBs.

00:13:09.610 --> 00:13:13.300
So let's actually go look at the code,
see what I'm doing in here.

00:13:13.370 --> 00:13:17.320
This is a big
wait-next-event-based application.

00:13:17.370 --> 00:13:22.140
And I just want to prove to you that you
can do all of these steps in piecemeal.

00:13:22.140 --> 00:13:24.550
You don't have to convert all
of your application at once.

00:13:24.740 --> 00:13:26.610
You can do one dialog at a time.

00:13:26.700 --> 00:13:30.740
So I'm going to maintain this as a
big wait-next-event-based application.

00:13:32.170 --> 00:13:38.140
When I create that dialog-- so you
can see there's a lot of code that's

00:13:38.140 --> 00:13:43.490
being run here-- I'm using the
Resource Manager to get a new dialog,

00:13:44.170 --> 00:13:46.420
I set up the dialog,
and when I go do that,

00:13:46.460 --> 00:13:50.100
I actually-- I took that area where
I was doing the custom drawing,

00:13:50.150 --> 00:13:51.840
that's just a user pane.

00:13:51.990 --> 00:13:55.520
So I'm installing a user pane draw proc,
so when the dialog needs

00:13:55.640 --> 00:13:59.080
to repaint that area,
it calls my draw proc, which is where I'm

00:13:59.170 --> 00:14:00.800
doing my custom drawing.

00:14:01.750 --> 00:14:04.330
Then after it's set up,
I call modal dialog.

00:14:04.660 --> 00:14:08.160
Now I pass in a modal filter proc
because I actually want to handle

00:14:08.160 --> 00:14:11.380
behavior in that custom area as well,
and that was to modify

00:14:11.380 --> 00:14:14.370
that clipping thing.

00:14:14.920 --> 00:14:19.720
Then when ModoDialog returns,
I'm switching off of the item that

00:14:19.720 --> 00:14:23.200
was returned in order to figure
out how to modify the interface.

00:14:23.320 --> 00:14:25.220
So there's a lot of
code going on in here,

00:14:25.230 --> 00:14:27.410
and I want to eliminate that,
especially since I have to add new

00:14:27.410 --> 00:14:30.200
features because my boss told me to.

00:14:30.340 --> 00:14:32.650
So let's learn how to do that.

00:14:36.070 --> 00:14:40.400
In Interface Builder,
we go to the File menu, Import,

00:14:40.470 --> 00:14:42.710
Import Resource File.

00:14:44.310 --> 00:14:47.120
We select our resource.

00:14:47.120 --> 00:14:50.050
It asks which dialogs and
menus do I want to pull in.

00:14:50.280 --> 00:14:53.310
For this example, I only have one dialog,
so I only want to import

00:14:53.520 --> 00:14:55.480
that single dialog.

00:14:55.490 --> 00:14:56.800
Hit Import.

00:14:56.840 --> 00:14:58.950
Creates a new nib,
slams that window into there.

00:14:58.980 --> 00:15:01.440
Let's go look at that interface now.

00:15:02.380 --> 00:15:05.060
So you can see it did a very good job.

00:15:05.110 --> 00:15:07.740
That's exactly what the
interface looked like.

00:15:07.780 --> 00:15:08.740
Now we have to do some triage.

00:15:08.810 --> 00:15:11.960
Maybe there's some things
that didn't import correctly.

00:15:12.600 --> 00:15:15.260
In my case, when I set up the resource,
I had to go through some hoops to

00:15:15.260 --> 00:15:17.590
actually get that pop-up button in there.

00:15:17.590 --> 00:15:21.900
And Interface Builder displays
this as a custom control.

00:15:22.140 --> 00:15:26.580
So I could go in and rebuild that
by creating a new pop-up in here,

00:15:26.630 --> 00:15:30.090
but I've already done that in
a separate NiB to keep this

00:15:30.090 --> 00:15:33.200
demo kind of rolling along.

00:15:33.350 --> 00:15:35.750
So I'm just going to put that in here.

00:15:39.980 --> 00:15:42.930
I also decide that I want to
pre-populate this stuff so

00:15:43.090 --> 00:15:46.140
I don't have to do this in code.

00:15:46.170 --> 00:15:50.010
So I can do all of this within Interface
Builder by setting this stuff up.

00:15:50.770 --> 00:15:54.300
I also encode, initially,
when I was setting up the dialog,

00:15:54.300 --> 00:15:58.400
I'm calling setDialogDefaultItem
and setDialogCancelItem in order so

00:15:58.400 --> 00:16:02.820
the dialog manager knows which items
are the default and cancel items.

00:16:02.930 --> 00:16:04.440
Well,
I can do that with an Interface Builder

00:16:04.500 --> 00:16:09.750
by selecting just a button in this
little interface inspector window.

00:16:09.800 --> 00:16:12.010
This is going to be the cancel button.

00:16:12.640 --> 00:16:15.500
I want to make sure that
I have the standard handler on,

00:16:15.550 --> 00:16:18.730
because this is what's going
to handle all of my low-level

00:16:18.740 --> 00:16:21.110
events for me for free.

00:16:22.130 --> 00:16:24.880
And then I want to start mucking
around and see that you can

00:16:24.880 --> 00:16:26.000
see these interface guides.

00:16:26.000 --> 00:16:28.040
Like,
you can see that my window was probably

00:16:28.040 --> 00:16:29.500
laid out incorrectly in the first place.

00:16:29.630 --> 00:16:32.840
So you can see that Interface
Builder presents these guides,

00:16:32.840 --> 00:16:36.780
tells you how far away the controls
need to be from each other.

00:16:37.040 --> 00:16:38.650
Some new features I want
to take advantage of,

00:16:38.650 --> 00:16:41.140
perhaps,
are to make the window resizable.

00:16:41.290 --> 00:16:42.970
So I click that.

00:16:43.200 --> 00:17:04.100
[Transcript missing]

00:17:04.980 --> 00:17:09.860
Binding to the right and the bottom.

00:17:09.890 --> 00:17:15.260
Doing the same for this view,
the right and the bottom.

00:17:15.650 --> 00:17:20.560
Binding to the right and the bottom.

00:17:20.770 --> 00:17:23.790
Doing the same for this view,
the right and the bottom.

00:17:25.860 --> 00:17:30.760
Binding to the right and the bottom.

00:17:30.760 --> 00:17:35.010
Doing the same for this view,
the right and the bottom.

00:17:36.490 --> 00:17:39.170
And just so it's not confusing,
I'm going to add a text

00:17:39.170 --> 00:17:45.800
field here that says Notes.

00:17:50.310 --> 00:17:52.950
We can run the interface-- we can
test the interface with the Interface

00:17:52.950 --> 00:17:55.090
Builder by just allowing it to run.

00:17:55.370 --> 00:17:57.200
It brings up a simulator.

00:17:57.370 --> 00:17:59.200
You can see that there's the window.

00:17:59.200 --> 00:18:01.200
I can go ahead and type.

00:18:01.200 --> 00:18:03.120
Now, I've done no code yet.

00:18:03.210 --> 00:18:05.620
This is just interface construction.

00:18:06.480 --> 00:18:09.620
One other thing I recall that I want
to do is these text fields are

00:18:09.620 --> 00:18:12.190
using the old Edit Text Control,
and I want to get some

00:18:12.190 --> 00:18:14.390
really cool anti-aliasing,
so I want to use the

00:18:14.770 --> 00:18:21.430
Edit Unicode Text Control,
which is just a checkbox over here.

00:18:23.780 --> 00:18:25.660
And finally,
I decide that I want to save this.

00:18:25.660 --> 00:18:26.540
This is my interface.

00:18:26.540 --> 00:18:27.670
I need to save it out.

00:18:27.870 --> 00:18:29.580
So I hit Save.

00:18:30.200 --> 00:18:32.720
Give it a name, where to save it.

00:18:32.720 --> 00:18:35.550
And the integration between Interface
Builder and Xcode is excellent.

00:18:35.640 --> 00:18:38.610
It knows that I have a project
up already and that I want to

00:18:38.610 --> 00:18:41.100
embed that NiB in that project.

00:18:41.100 --> 00:18:44.090
So I go ahead and add it.

00:18:44.220 --> 00:18:48.590
Now, I need to actually write some
code to drive this interface.

00:18:50.320 --> 00:18:58.100
Now, in my main code,
I was pulling up that, that dialog.

00:18:58.200 --> 00:19:06.020
Now, in my main code,
I was pulling up that, that dialog.

00:19:08.560 --> 00:19:11.480
Now, when I say new way, I say new,
but I don't mean it's

00:19:11.480 --> 00:19:14.640
like a lot of work to do.

00:19:14.770 --> 00:19:15.900
It's very simple.

00:19:15.940 --> 00:19:19.280
I create a NiB reference to my NiB.

00:19:19.330 --> 00:19:22.160
I extract the window from that NiB.

00:19:22.180 --> 00:19:26.120
I show it, dispose the NiB reference,
and we're done.

00:19:26.210 --> 00:19:29.100
Let's cross our fingers
and make sure this builds.

00:19:29.130 --> 00:19:29.550
There we go.

00:19:29.600 --> 00:19:31.740
We have my same familiar interface.

00:19:31.770 --> 00:19:34.340
I want to bring up my song info.

00:19:34.370 --> 00:19:35.260
And boom.

00:19:35.280 --> 00:19:36.400
There it is.

00:19:36.410 --> 00:19:37.120
The interface works.

00:19:37.130 --> 00:19:40.510
I wrote no code to actually
initialize these text fields.

00:19:40.530 --> 00:19:42.990
All the behavior works.

00:19:43.320 --> 00:19:45.300
I can drag these things around.

00:19:45.420 --> 00:19:48.440
You can see that my pop-up is
here and does correct tracking.

00:19:48.460 --> 00:19:51.540
And I've written no code.

00:19:51.620 --> 00:19:54.360
So let's move back to
the slides and move on.

00:20:05.450 --> 00:20:07.390
I can drag these things around.

00:20:07.520 --> 00:20:10.540
You can see that my pop-up is
here and does correct tracking.

00:20:10.540 --> 00:20:13.640
And I've written no code.

00:20:13.640 --> 00:20:16.460
So let's move back to
the slides and move on.

00:20:19.840 --> 00:20:22.000
Make sure that the standard
window handler is on.

00:20:22.070 --> 00:20:25.540
That allows you to resize your window,
move the window around without

00:20:25.540 --> 00:20:27.820
writing any code to do that work.

00:20:28.130 --> 00:20:30.280
Make sure that the standard
window handler is on.

00:20:30.360 --> 00:20:33.800
That allows you to resize your window,
move the window around without

00:20:33.930 --> 00:20:35.420
writing any code to do that work.

00:20:35.580 --> 00:20:37.160
Now it's not,
I mean it's kind of brain dead.

00:20:37.160 --> 00:20:39.310
There's only seven APIs in there,
and three of them are

00:20:39.430 --> 00:20:41.460
associated with NiB management.

00:20:41.550 --> 00:20:44.900
So there's only four APIs getting
your interface out of there.

00:20:46.770 --> 00:20:48.210
So we had an interface
that was up and running,

00:20:48.210 --> 00:20:49.580
but it didn't actually
do anything interesting.

00:20:49.670 --> 00:20:52.320
So it doesn't do exactly what
the interface was doing when

00:20:52.320 --> 00:20:54.800
it was dialogue manager based,
because I had a whole bunch of code

00:20:54.920 --> 00:20:56.340
that was behind that running it.

00:20:56.410 --> 00:20:58.980
So now we need to start handling events.

00:20:59.470 --> 00:21:01.560
Now the old way of handling events,
whether using modal

00:21:01.560 --> 00:21:05.860
dialog or wait-next event,
is using this model.

00:21:05.860 --> 00:21:09.180
You, the application,
go sit in an event loop and start

00:21:09.430 --> 00:21:11.820
pulling events out of the queue.

00:21:11.870 --> 00:21:13.750
Then you figure out where
that event needs to go,

00:21:13.750 --> 00:21:15.020
so you start dispatching it.

00:21:15.020 --> 00:21:15.710
Was it in a window?

00:21:15.770 --> 00:21:16.840
By calling findWindow.

00:21:16.840 --> 00:21:18.930
If it was in the window,
is it in the control?

00:21:18.940 --> 00:21:20.660
You call findControl.

00:21:20.660 --> 00:21:23.680
And then you start tracking
the control if you need to.

00:21:23.680 --> 00:21:27.550
And then you tell, finally,
tell the toolbox what it is that you did.

00:21:27.940 --> 00:21:32.460
Now, this is cumbersome because you're
writing a lot of boilerplate code.

00:21:32.520 --> 00:21:33.920
Everybody's got to do it.

00:21:34.380 --> 00:21:37.590
It seems like a really nice place
that this gets implemented in the

00:21:37.600 --> 00:21:39.240
toolbox and let us do the work.

00:21:39.330 --> 00:21:41.340
So this is the new model of doing events.

00:21:41.430 --> 00:21:46.550
And when I say new, I mean, like,
Carbon event forward.

00:21:46.830 --> 00:21:51.410
You tell the toolbox what events
you're interested in hearing about.

00:21:51.600 --> 00:21:54.480
The toolbox sits in its own event loop,
figures out where these

00:21:54.480 --> 00:21:56.680
things need to go,
and then dispatches them to

00:21:56.680 --> 00:21:58.200
you if you're interested in it.

00:21:58.200 --> 00:21:59.700
So it makes the model so much easier.

00:21:59.700 --> 00:22:03.200
You're not doing all of this extra
boilerplate code that you don't need to,

00:22:03.220 --> 00:22:07.750
and you get notified only about the
events that you're interested in.

00:22:10.310 --> 00:22:13.820
So events are separated into
different classes and kinds.

00:22:13.820 --> 00:22:16.790
There's about a dozen or so
different classes of types of events,

00:22:16.920 --> 00:22:20.540
like control, window, command events.

00:22:20.580 --> 00:22:22.130
And then they're split
into different kinds.

00:22:22.250 --> 00:22:28.290
So what kind of event
that class referred to.

00:22:28.460 --> 00:22:29.140
I hope that made sense.

00:22:29.140 --> 00:22:32.050
So for example,
in the case when you need to be

00:22:32.050 --> 00:22:36.180
notified when the enabled state
of your control has changed,

00:22:36.270 --> 00:22:39.880
you register for a K event class control,
K event control enabled

00:22:40.070 --> 00:22:42.070
state changed event.

00:22:43.170 --> 00:22:44.980
So it's interesting,
but how do you actually

00:22:44.980 --> 00:22:46.640
go about doing that?

00:22:46.660 --> 00:22:48.620
Like I mentioned earlier,
you specify the events

00:22:48.720 --> 00:22:50.660
that you're interested in.

00:22:50.680 --> 00:22:52.820
Then you install a handler
on an event target.

00:22:52.900 --> 00:22:55.780
Now, an event target is where these
events are going to be sent to.

00:22:55.800 --> 00:23:00.070
And there's various targets,
like there's control targets, user focus,

00:23:00.250 --> 00:23:02.120
window, application.

00:23:02.120 --> 00:23:04.870
And when I say installing a handler,
what you're really doing at that

00:23:04.870 --> 00:23:08.170
point is telling the toolbox,
I'm interested in these events.

00:23:08.360 --> 00:23:11.770
Call my callback when
these events come in.

00:23:12.410 --> 00:23:14.280
So then you go implement the handler.

00:23:14.480 --> 00:23:17.820
So when your callback is called,
what do you need to happen to

00:23:17.910 --> 00:23:19.780
your interface at that point?

00:23:20.190 --> 00:23:22.810
And then events can go through
different propagation routes.

00:23:23.120 --> 00:23:27.820
So for example,
when commands come into your handler,

00:23:27.980 --> 00:23:30.190
if you don't handle that event,
you want it to continue

00:23:30.190 --> 00:23:32.710
out and propagating,
because maybe the toolbox will

00:23:32.710 --> 00:23:34.430
give you some free behavior.

00:23:34.540 --> 00:23:37.150
So the return value controls
how that event is propagated.

00:23:37.210 --> 00:23:40.860
If you return event not handled error,
propagation will continue,

00:23:40.880 --> 00:23:43.030
and maybe the toolbox
will handle it for you.

00:23:43.240 --> 00:23:46.490
And any other value of return
will terminate propagation.

00:23:46.500 --> 00:23:49.280
It's as if you handled it and we're done.

00:23:50.010 --> 00:23:52.340
So let's walk through an
example of doing that.

00:23:52.370 --> 00:23:55.200
Like I mentioned,
an HI command is a high-level

00:23:55.360 --> 00:23:58.930
type of event to signify that
some command has happened.

00:23:59.040 --> 00:24:01.910
You don't care where the event came from,
you just want to handle

00:24:02.030 --> 00:24:03.140
this type of event.

00:24:03.200 --> 00:24:07.690
A good example is if you had a
new button in your interface.

00:24:08.400 --> 00:24:11.200
Within Interface Builder,
you would select the new button,

00:24:11.280 --> 00:24:13.990
you'd go into the Inspector window,
and you can assign a

00:24:13.990 --> 00:24:15.740
command to that button.

00:24:15.810 --> 00:24:18.400
So when the user clicks on the button,
this new command is sent

00:24:18.400 --> 00:24:19.810
to your application.

00:24:20.080 --> 00:24:22.960
Anu is a standard HI command,
so you can select it from the pop-up.

00:24:22.960 --> 00:24:26.200
You can also create your
own types of commands.

00:24:28.290 --> 00:24:31.560
Then in code, you specify what events
you're interested in.

00:24:31.610 --> 00:24:35.930
Now, you pass in an array to our APIs,
but in this particular example,

00:24:35.930 --> 00:24:38.380
I'm only interested in
an HIV command event.

00:24:38.490 --> 00:24:42.910
So I'm interested in the class command,
command process event.

00:24:43.870 --> 00:24:46.520
Then I want to hear this on
the application event target,

00:24:46.520 --> 00:24:48.320
because like I mentioned,
the commands can be sent

00:24:48.430 --> 00:24:50.710
to the user focus target,
and if that doesn't handle it,

00:24:50.720 --> 00:24:52.880
it'll go out to the window,
and if the window doesn't handle it,

00:24:52.880 --> 00:24:54.100
it'll go out to the application.

00:24:54.100 --> 00:24:56.300
So the application is kind
of a catch-all for commands.

00:24:56.320 --> 00:24:59.820
So I'm going to install my handler
onto the application event handler,

00:24:59.820 --> 00:25:02.420
on the application event target,
excuse me.

00:25:02.440 --> 00:25:05.490
And then I tell it that
I'm interested in it,

00:25:05.600 --> 00:25:09.500
or I want it to call my
callback handler at this point.

00:25:10.400 --> 00:25:13.600
So you load your interface in,
the user is using it,

00:25:13.710 --> 00:25:15.100
and then he clicks on the new button.

00:25:15.100 --> 00:25:18.480
The HICommand is sent,
the toolbox calls your

00:25:18.480 --> 00:25:20.480
command event handler.

00:25:22.730 --> 00:25:24.690
There's different information
packed in that event,

00:25:24.690 --> 00:25:28.180
and all of this is documented
within the CarbonEvent.h header.

00:25:28.370 --> 00:25:31.820
So it'll tell you as events
come in what type of information

00:25:31.820 --> 00:25:33.590
is packaged in the event.

00:25:33.890 --> 00:25:36.360
In this case, there's an HI command.

00:25:36.500 --> 00:25:41.130
So we call getEventParameter to
extract the HI command from the event.

00:25:41.220 --> 00:25:44.060
And then we can switch
what kind of event it was.

00:25:44.100 --> 00:25:46.440
In this case,
we see that it was a new event.

00:25:46.530 --> 00:25:49.410
So we go and we create
our new document window.

00:25:52.610 --> 00:25:56.420
So now we talked about dealing with
events within your user interface.

00:25:56.460 --> 00:25:58.580
How do you deal with Dialog modality?

00:25:58.600 --> 00:26:01.900
I'm sure most of your Dialogs
have had to deal with modality.

00:26:02.090 --> 00:26:04.140
Basically,
in the old way of doing things,

00:26:04.310 --> 00:26:09.000
you were calling Modal Dialog in a loop
and handling updates using a filter proc.

00:26:09.000 --> 00:26:13.190
And for one reason or another,
we changed things so that didn't work,

00:26:13.310 --> 00:26:15.710
and you had to install update
Carbon event handlers on your

00:26:15.710 --> 00:26:19.630
non-front windows in order
to get the update events.

00:26:19.980 --> 00:26:22.020
So you'd have to write these
Carbon event handlers for other Windows.

00:26:22.020 --> 00:26:23.950
And if you're going to do that,
you might as well just start doing things

00:26:24.050 --> 00:26:26.930
the way we expect you and want you to do.

00:26:27.490 --> 00:26:29.400
Go through the steps I've
talked about already.

00:26:29.450 --> 00:26:31.960
Convert your dialog to a Nib.

00:26:31.960 --> 00:26:36.550
Use the standard OK and Cancel commands
for your OK and Cancel buttons.

00:26:37.480 --> 00:26:41.580
Make your interface Carbon event driven
by using the standard HI commands,

00:26:41.590 --> 00:26:47.510
or you can even use your own event
command classes that you define yourself.

00:26:47.980 --> 00:26:53.630
And when you need to be modal,
use the API runAppModalLoopForWindow.

00:26:53.640 --> 00:26:56.280
This will put your window
into a modal situation,

00:26:56.300 --> 00:27:00.920
and that function will not return until
quitAppModalLoopForWindow is called.

00:27:00.960 --> 00:27:03.510
And I'll show you an
example of how to do that.

00:27:04.860 --> 00:27:09.250
And then, eventually,
you'd start using Sheets.

00:27:09.320 --> 00:27:12.300
Instead of going AppModal,
you might just need to go WindowModal.

00:27:12.440 --> 00:27:14.740
So where it's appropriate,
we encourage you to use

00:27:14.740 --> 00:27:17.270
Sheets to get Window modality.

00:27:18.690 --> 00:27:21.430
So let's walk through an example
of using modality in this fashion.

00:27:21.630 --> 00:27:25.760
This is very similar to the
previous HI command example I gave.

00:27:25.910 --> 00:27:30.630
In this case, again,
we only will go out of the modal

00:27:30.640 --> 00:27:35.830
situation when the OK button is clicked,
which sends out a command event.

00:27:35.950 --> 00:27:38.910
So in this case,
we're doing the same thing by registering

00:27:39.010 --> 00:27:41.680
for a command command process event.

00:27:41.750 --> 00:27:44.120
And also when we install
a handler for a target,

00:27:44.290 --> 00:27:45.940
one of the parameters is a void star.

00:27:46.050 --> 00:27:49.990
So we can pass anything we want there,
and then when our callback is called,

00:27:50.030 --> 00:27:51.330
that void star is returned to us.

00:27:51.560 --> 00:27:55.660
So I'm taking advantage of that in this
particular example by passing in the

00:27:55.660 --> 00:27:58.590
window as that void star parameter.

00:27:58.910 --> 00:28:02.560
Then I call run AppModelLoopForWindow.

00:28:02.590 --> 00:28:05.770
Now as I mentioned, this function is not
going to return until quit

00:28:05.860 --> 00:28:07.620
AppModelLoopForWindow is called.

00:28:07.780 --> 00:28:11.560
So the event system takes over,
starts dispatching

00:28:11.560 --> 00:28:14.800
events as they come in,
and then when we're in here,

00:28:14.800 --> 00:28:18.800
perhaps the user clicks on the OK button.

00:28:18.800 --> 00:28:22.790
At that time,
your event handler is called.

00:28:22.860 --> 00:28:24.750
And as I mentioned,
we passed in our window in

00:28:24.750 --> 00:28:26.340
the void star parameter.

00:28:26.430 --> 00:28:29.700
So we cast that to our window
because we know that's our window.

00:28:29.710 --> 00:28:32.440
Again, we extract the event parameter.

00:28:32.470 --> 00:28:37.540
We check to see that it was the OK,
with a standard OK command, which it was.

00:28:37.570 --> 00:28:41.200
And we go ahead and we call quit app
modal loop for window at that point.

00:28:41.290 --> 00:28:43.680
When this function returns,
your previous call to run app

00:28:43.750 --> 00:28:45.710
modal loop for window will return,
and you can continue

00:28:45.800 --> 00:28:46.920
processing with your app.

00:28:46.980 --> 00:28:51.790
So that's how you would deal
with modality in this new world.

00:28:54.560 --> 00:28:57.090
So, custom content.

00:28:57.350 --> 00:28:59.950
In my example,
I had that really cool equalizer

00:28:59.990 --> 00:29:02.650
area over there in that dialog.

00:29:02.760 --> 00:29:05.370
And how am I going to start
dealing with that now,

00:29:05.370 --> 00:29:09.480
using this new way of handling dialogs?

00:29:11.560 --> 00:29:14.280
You need to think about
two different paths here.

00:29:14.340 --> 00:29:16.700
Do you want to remain
non-compositing or go compositing?

00:29:16.880 --> 00:29:19.680
Now,
the advantages of compositing are great.

00:29:19.690 --> 00:29:23.260
In terms of performance,
it's an invalidation model,

00:29:23.260 --> 00:29:27.300
so you're not constantly
redrawing when you don't need to.

00:29:27.780 --> 00:29:30.300
You also can have overlapping views.

00:29:30.300 --> 00:29:35.370
It doesn't look ugly because the
controls are erasing behind themselves.

00:29:35.760 --> 00:29:38.410
If you want to continue using
non-compositing windows and you're doing

00:29:38.410 --> 00:29:40.500
all of your drawing and user panes,
it's okay.

00:29:40.640 --> 00:29:44.760
But we prefer that you actually start
using HIViews because this is what we're

00:29:44.760 --> 00:29:47.470
focusing our energy on moving forward.

00:29:47.780 --> 00:29:50.700
Especially if you're using compositing
or drawing directly to the window,

00:29:50.700 --> 00:29:53.410
you have to start taking
advantage of HIViews.

00:29:53.550 --> 00:29:56.450
So you'll have to write your own
custom views to do this custom content

00:29:56.990 --> 00:29:59.350
and then embed that in the window.

00:29:59.410 --> 00:30:02.650
I'm not going to go into any detail
about how to write your own HIView.

00:30:02.780 --> 00:30:06.490
Actually, David's going to cover that
tomorrow in Session 433,

00:30:06.760 --> 00:30:09.650
Modernizing Your Custom Controls
to Use HIView.

00:30:09.750 --> 00:30:12.460
So I'm not going to go any further
about describing how to do that,

00:30:12.460 --> 00:30:17.220
but I will use this in my example
and just show you how to use a

00:30:17.220 --> 00:30:21.020
pre-made HIView as custom content.

00:30:23.080 --> 00:30:26.390
So, like I mentioned when I was
walking through my example,

00:30:26.460 --> 00:30:30.800
the old way of dealing with your
dialog was during initialization,

00:30:30.810 --> 00:30:35.110
if you had this custom content,
you would set a drawing proc,

00:30:35.210 --> 00:30:37.780
and that was to deal with a drawing.

00:30:38.170 --> 00:30:41.440
And then when you needed to go into the
event loop and start handling events,

00:30:41.440 --> 00:30:44.580
you would call modal dialogue with a
filter proc if you needed to handle

00:30:44.580 --> 00:30:47.760
any tracking in your custom content.

00:30:48.110 --> 00:30:50.200
And so at that point,
you'd be handling some behavior.

00:30:50.200 --> 00:30:53.070
You'd be handling the
behavior of tracking.

00:30:53.170 --> 00:30:55.000
And then once you return
from modal dialog,

00:30:55.040 --> 00:30:58.050
you'd get this item hit,
and you'd start handling behavior there,

00:30:58.090 --> 00:30:58.320
too.

00:30:58.430 --> 00:31:00.210
So there's different areas of code.

00:31:00.320 --> 00:31:02.810
And then in some cases,
you'd actually be installing an

00:31:02.830 --> 00:31:05.380
action proc to deal with live actions,
too.

00:31:05.480 --> 00:31:09.260
So there's different areas of your code
where you're dealing with this behavior.

00:31:09.290 --> 00:31:11.680
And all of the behavior
you write for one dialog,

00:31:11.700 --> 00:31:15.830
you can't easily rip out and just
go throw into another dialog.

00:31:16.480 --> 00:31:18.100
So like I've been saying,
the new way of doing

00:31:18.100 --> 00:31:20.320
things is using HIView.

00:31:20.510 --> 00:31:23.320
I mean, I just can't stress enough
how cool this technology is,

00:31:23.440 --> 00:31:28.040
because it encapsulates the
behavior and the appearance of

00:31:28.050 --> 00:31:30.430
your custom view all in one module.

00:31:30.540 --> 00:31:32.520
So I don't even have to
know what the module does.

00:31:32.590 --> 00:31:37.060
Like Joe Schmo can create one for me,
and I can pull it in,

00:31:37.240 --> 00:31:40.650
add it to my project,
and it'll just work,

00:31:40.650 --> 00:31:41.930
because I don't care about tracking
myself or anything like that.

00:31:42.500 --> 00:31:45.770
So you can create the
HIView in one of two ways.

00:31:45.880 --> 00:31:50.850
If you take your HIView and you
install it or register it with

00:31:50.850 --> 00:31:55.040
the HIObject subclassing system
during app initialization,

00:31:55.040 --> 00:31:58.030
then you can provide a class
ID in Interface Builder.

00:31:58.270 --> 00:32:01.480
So in Interface Builder,
you can pull in a custom HIView.

00:32:01.510 --> 00:32:03.700
Interface Builder knows
nothing about this view.

00:32:03.730 --> 00:32:07.150
But you add a class ID,
and then when you create that

00:32:07.150 --> 00:32:10.600
window in your application,
it will go through and

00:32:11.030 --> 00:32:12.500
instantiate that view.

00:32:12.570 --> 00:32:14.460
It's really cool to do that.

00:32:14.510 --> 00:32:16.820
And then alternatively,
you can embed it programmatically.

00:32:16.840 --> 00:32:22.020
You can create one yourself and then
embed it in the dialog or window using

00:32:22.020 --> 00:32:26.420
one of the HIView add subview APIs,
for example.

00:32:27.910 --> 00:32:29.480
Now I should note here,
Guy mentioned this in the

00:32:29.480 --> 00:32:32.300
previous session also,
but I should note that, you know,

00:32:32.300 --> 00:32:35.380
creating your own custom views,
there's a lot of the same

00:32:35.380 --> 00:32:36.930
code that you have to do,
and there's a lot of

00:32:36.930 --> 00:32:38.020
setup associated with it.

00:32:38.180 --> 00:32:40.960
So we've written something
we call HIFramework,

00:32:41.120 --> 00:32:44.660
which is a C++ mini
framework for the toolbox,

00:32:44.680 --> 00:32:48.520
and it makes the task of creating
your own custom view really simple.

00:32:48.520 --> 00:32:51.660
And it's provided as sample code,
so you can go through all of the code,

00:32:51.660 --> 00:32:55.340
see what it's doing, extend it yourself,
add modifications if you need to.

00:32:58.200 --> 00:33:02.590
So let's go back to the demo machine,
and we'll start plugging in the behavior

00:33:02.700 --> 00:33:08.720
and pulling in our custom area in order
to get the custom content drawing.

00:33:15.090 --> 00:33:16.680
So I'm going to go back
to Interface Builder.

00:33:16.800 --> 00:33:24.790
I'm going to assign standard
commands to my interface.

00:33:24.920 --> 00:33:28.110
So I told you earlier that I want you
to start taking advantage of these

00:33:28.300 --> 00:33:29.990
standard commands that are available.

00:33:30.040 --> 00:33:32.640
So for the OK button in
the Inspector window,

00:33:32.640 --> 00:33:37.550
I'm going down to the Command pop-up,
and I'm going to select

00:33:37.550 --> 00:33:40.840
OK because it's the OK button.

00:33:40.950 --> 00:33:44.630
For the Cancel button,
I'm going to go select Cancel.

00:33:47.180 --> 00:33:50.420
So I told you earlier that I want you
to start taking advantage of these

00:33:50.420 --> 00:33:52.300
standard commands that are available.

00:33:52.300 --> 00:33:54.940
So for the OK button in
the Inspector window,

00:33:54.940 --> 00:33:56.310
I'm going down to the Command pop-up,

00:33:57.910 --> 00:34:01.120
So I told you earlier that I want you
to start taking advantage of these

00:34:01.120 --> 00:34:03.000
standard commands that are available.

00:34:03.000 --> 00:34:05.640
So for the OK button in
the Inspector window,

00:34:05.640 --> 00:34:10.230
I'm going down to the Command pop-up,
and I'm going to select

00:34:10.230 --> 00:34:13.830
OK because it's the OK button.

00:34:13.840 --> 00:34:17.190
For the Cancel button,
I'm going to go select Cancel.

00:34:17.360 --> 00:34:23.570
I want to install a window event handler
on it to handle the OK or Cancel command.

00:34:24.430 --> 00:34:27.760
So I install my Window Event Handler,
telling it to call this call

00:34:27.760 --> 00:34:30.180
back when that event comes in.

00:34:30.350 --> 00:34:32.880
Then I call runAppModelLoop for window.

00:34:32.910 --> 00:34:37.910
This function does not return
until quitAppModelLoop is called.

00:34:39.310 --> 00:34:42.960
So it'll go around dandy, you know,
handle events, do everything on its own,

00:34:42.990 --> 00:34:45.340
and then the user clicks Cancel or OK.

00:34:45.400 --> 00:34:48.790
My event handler is going
to be called at this point.

00:34:50.900 --> 00:34:54.640
So it'll go around dandy, you know,
handle events, do everything on its own,

00:34:54.840 --> 00:34:57.040
and then the user clicks Cancel or OK.

00:34:57.040 --> 00:35:00.330
My event handler is going
to be called at this point.

00:35:08.140 --> 00:35:11.820
So it'll go around dandy, you know,
handle events, do everything on its own,

00:35:11.880 --> 00:35:14.240
and then the user clicks Cancel or OK.

00:35:14.240 --> 00:35:17.700
My event handler is going
to be called at this point.

00:35:18.420 --> 00:35:22.540
If I click Cancel or OK,
the dialog goes away.

00:35:22.670 --> 00:35:24.760
So we can see that that worked.

00:35:25.450 --> 00:35:27.300
Hooray!

00:35:27.370 --> 00:35:29.800
But there's still that custom
area that we want to deal with.

00:35:29.920 --> 00:35:32.800
So, it's pretty obvious that I'm
just using Quick Draw rectangles,

00:35:32.800 --> 00:35:34.800
and I have no idea how to
make a really cool interface.

00:35:34.800 --> 00:35:39.300
So, I went off and I wrote this
really cool Aqua interface,

00:35:39.480 --> 00:35:41.800
and it's just encapsulated by itself.

00:35:41.800 --> 00:35:45.300
I don't even need to know
what the code itself does.

00:35:45.300 --> 00:35:48.590
I just pull it into my project.

00:35:49.810 --> 00:35:55.170
and it's called EQView for Equalizer.

00:35:57.900 --> 00:36:05.700
[Transcript missing]

00:36:07.680 --> 00:36:11.500
You need to register the view at
application initialization time.

00:36:11.580 --> 00:36:14.600
So during initialization,
I would call that function,

00:36:14.600 --> 00:36:17.430
and that goes through and
registers the view with the

00:36:17.430 --> 00:36:19.290
HIObject subclassing system.

00:36:19.390 --> 00:36:24.300
And then it provides me the signature
that this view is going to be.

00:36:24.690 --> 00:36:27.780
So let me walk back over
to Interface Builder.

00:36:27.800 --> 00:36:32.080
I can't use user pages anymore,
so I ditch that.

00:36:33.940 --> 00:36:39.900
I bring up this control,
pull over an HIView,

00:36:40.010 --> 00:36:42.210
throw that in the interface,

00:36:43.140 --> 00:36:45.730
And then if you go look here
in the Attributes field,

00:36:45.760 --> 00:36:48.630
it has a field for a Class ID.

00:36:48.910 --> 00:36:51.560
And then if you go look here
in the Attributes field,

00:36:51.560 --> 00:36:54.440
it has a field for a Class ID.

00:36:58.080 --> 00:37:02.430
The other thing that the writer of
this module has told me is that this

00:37:02.490 --> 00:37:06.600
view is going to respond to certain
commands that are sent to the window.

00:37:06.680 --> 00:37:09.030
So I don't have to plug anything in,
it's going to just

00:37:09.030 --> 00:37:10.470
handle events on its own.

00:37:10.600 --> 00:37:13.060
And these are the events that
it's interested in handling,

00:37:13.060 --> 00:37:16.600
when you change the equalizer settings,
for instance.

00:37:16.680 --> 00:37:20.030
So that's why I did some hand-waving
when I pulled out this pop-up button.

00:37:20.180 --> 00:37:22.460
I've set all of this up already.

00:37:22.590 --> 00:37:26.840
So when you select the classic item,
it's going to send out this command,

00:37:26.880 --> 00:37:29.290
rock, et cetera.

00:37:32.300 --> 00:37:51.700
[Transcript missing]

00:37:58.100 --> 00:38:00.100
Let's go ahead and save it.

00:38:00.430 --> 00:38:03.660
Let's build it and run.

00:38:03.970 --> 00:38:05.820
Let's go check out my interface.

00:38:05.820 --> 00:38:07.700
And now we get this custom area drawing.

00:38:07.740 --> 00:38:09.900
Now that too, I mean,
this is still me making it, you know,

00:38:09.900 --> 00:38:13.440
it's still pretty ugly,
but it's a lot better because when you

00:38:13.440 --> 00:38:16.890
select a different equalizer setting,
it just automatically responds.

00:38:16.890 --> 00:38:18.400
It's a new equalizer setting.

00:38:18.490 --> 00:38:21.110
That's just like, that's cool.

00:38:21.330 --> 00:38:23.280
And then for sound clipping,
if I turn this on,

00:38:23.280 --> 00:38:25.200
it responds to that too.

00:38:25.250 --> 00:38:27.430
And then furthermore,
it handles tracking on its own.

00:38:27.470 --> 00:38:29.100
I didn't have to write
any special code for this.

00:38:29.210 --> 00:38:31.880
This is all handled by the view itself.

00:38:32.610 --> 00:38:35.130
And something I didn't show earlier,
but as I resize the window,

00:38:35.140 --> 00:38:37.920
because the HIView layouts
were set in the NiB,

00:38:38.040 --> 00:38:41.500
the OK and Cancel buttons are
also just reflowed automatically.

00:38:41.500 --> 00:38:46.890
I mean, this was very easy code to
write and get up and going.

00:38:47.480 --> 00:38:48.400
So you have to adopt this.

00:38:48.400 --> 00:38:51.870
It's just-- it's the greatest thing ever.

00:38:51.990 --> 00:38:54.180
So let's go back to slides.

00:39:05.770 --> 00:39:07.340
In that last step,
all I did was I made my

00:39:07.340 --> 00:39:12.050
interface Carbon event driven,
and I did that by adding commands

00:39:12.060 --> 00:39:15.490
within the Inspector window
in Interface Builder.

00:39:15.780 --> 00:39:18.630
And to go modal, I use the API run app
modal loop for window,

00:39:18.630 --> 00:39:21.590
and this is how you would deal with
modality rather than using modal dialog.

00:39:21.710 --> 00:39:23.400
In fact,
when you pull in a window from a NiB,

00:39:23.400 --> 00:39:26.260
it's not a dialog anyway,
so you can't really call

00:39:26.660 --> 00:39:28.240
modal dialog using that.

00:39:28.650 --> 00:39:32.090
Implement your custom content as HIViews.

00:39:32.170 --> 00:39:33.400
That new view I just pulled in.

00:39:33.400 --> 00:39:34.800
Somebody gave this module to me.

00:39:34.800 --> 00:39:35.590
I plugged it in.

00:39:35.600 --> 00:39:38.870
I added a few features to make it
respond to commands or make commands

00:39:38.870 --> 00:39:40.420
sense that it's going to respond to.

00:39:40.790 --> 00:39:42.600
And it just worked automatically.

00:39:42.600 --> 00:39:50.100
And that custom view was written,
so I'm told, with HIVramework,

00:39:50.100 --> 00:39:50.100
which made it just really
easy to write that as well.

00:39:51.760 --> 00:39:54.640
Of course,
using Dialogs in this type of modality,

00:39:54.640 --> 00:39:58.070
this is just a really small case
of what we would encourage you

00:39:58.070 --> 00:40:00.300
to do for your application also.

00:40:00.350 --> 00:40:03.040
Rather than using WaitNext Event for
your event processing,

00:40:03.130 --> 00:40:06.740
we want you to get onto using
Run Application Event Loop.

00:40:06.780 --> 00:40:09.840
This is going to start dispatching
events for you and help you

00:40:09.840 --> 00:40:12.280
eliminate your use of WaitNext Event.

00:40:12.320 --> 00:40:14.930
We want you to start eliminating
all of these old APIs because we

00:40:14.940 --> 00:40:19.170
have really excellent replacements
for them using the new technologies

00:40:19.170 --> 00:40:21.200
that we put in the toolbox.

00:40:22.130 --> 00:40:26.210
These APIs encourage a more
efficient use of resources.

00:40:26.770 --> 00:40:29.030
When you start using run
application event loop,

00:40:29.120 --> 00:40:33.890
you don't get idle time using that API,
so you install Carbon event loop timers,

00:40:34.000 --> 00:40:35.100
which will call you back.

00:40:35.100 --> 00:40:38.460
So you can give fine-grained control
of when you need to be called

00:40:38.520 --> 00:40:42.100
back and make your application
more efficient on the system.

00:40:42.100 --> 00:40:46.890
And then we want you to use new
technologies that we've created,

00:40:47.000 --> 00:40:47.950
such as Sheets.

00:40:47.950 --> 00:40:47.950
It makes your interface
just so much better.

00:40:48.630 --> 00:40:52.840
So I've been talking a lot about this
stuff and encouraging you to do this,

00:40:53.020 --> 00:40:55.620
but you're probably thinking this
transition might be really difficult

00:40:55.620 --> 00:40:56.560
for me to do for my interface.

00:40:56.700 --> 00:40:59.270
And I just want to tell you
that that's not the case.

00:40:59.410 --> 00:41:02.340
In fact,
Navigation Services went through this

00:41:02.470 --> 00:41:04.940
transition in a Panther time frame.

00:41:05.010 --> 00:41:08.590
And I'd like to bring up Bryan Prusha
to talk about that right now.

00:41:13.510 --> 00:41:15.400
Thank you, Curt.

00:41:15.400 --> 00:41:20.500
Now, as Curt just mentioned,
as I'm sure you all know,

00:41:20.580 --> 00:41:24.000
Open and Save Dialogs went through
large amounts of changes in Panther,

00:41:24.100 --> 00:41:28.000
and we added several new features,
including the sidebar, list view,

00:41:28.100 --> 00:41:31.000
and the view history
forward and back buttons.

00:41:31.000 --> 00:41:34.200
Now, we knew this was going to be a major
change for navigation services,

00:41:34.310 --> 00:41:36.610
and we wanted to take this
as the opportunity to move

00:41:36.610 --> 00:41:39.200
forward from resources to NIBs.

00:41:39.250 --> 00:41:42.700
And once we made that change,
being based on NIBs made it

00:41:42.770 --> 00:41:45.390
easier to adopt new features.

00:41:46.480 --> 00:41:49.400
When we began the conversion,
we wanted to take an iterative approach.

00:41:49.430 --> 00:41:53.160
The idea is to start with just
the simplest dialog possible and

00:41:53.160 --> 00:41:57.780
convert it over first because it
doesn't have to be done all at once.

00:41:57.960 --> 00:42:00.570
Convert that one dialog over
and just work out any kinks that

00:42:00.580 --> 00:42:01.940
there may be in the process.

00:42:02.100 --> 00:42:07.510
Just get used to the idea and then
go on to more complex dialogs.

00:42:08.020 --> 00:42:11.140
We were able to very easily
write a little bit of wrapper

00:42:11.140 --> 00:42:15.900
code that converted all our old
dialog item IDs to control IDs.

00:42:15.910 --> 00:42:21.270
So we can continue referring to all our
controls as we always had in the past and

00:42:24.250 --> 00:42:26.380
So continue referring to them
as we always have in the past,

00:42:26.470 --> 00:42:29.240
minimizing code changes.

00:42:29.250 --> 00:42:34.660
The next step is then taking
views that we created manually

00:42:34.660 --> 00:42:38.360
in our code and having Interface
Builder do the work for us.

00:42:38.360 --> 00:42:40.600
So when the window is
pulled out of the NiB,

00:42:40.600 --> 00:42:42.950
those views are loaded automatically.

00:42:43.230 --> 00:42:46.270
But the trick is we had
some custom views in there,

00:42:46.270 --> 00:42:47.760
like the sidebar.

00:42:47.770 --> 00:42:50.560
Interface Builder doesn't know
anything about the sidebar,

00:42:50.670 --> 00:42:54.080
but as Curt showed us earlier,
we can use a custom HIView

00:42:54.470 --> 00:42:58.890
control in Interface Builder,
add the HIV object class ID,

00:42:59.070 --> 00:43:01.070
and Interface Builder,
even though it knows nothing

00:43:01.070 --> 00:43:03.100
about our custom views,
could load it automatically.

00:43:03.100 --> 00:43:05.810
So that was just code
we didn't have to write.

00:43:06.500 --> 00:43:08.900
The next step,
as Guy alluded to in the last talk,

00:43:08.900 --> 00:43:12.400
was the most fun:
adopting the standard event handler.

00:43:12.500 --> 00:43:15.060
The reason this is fun is because
we could just click a checkbox in

00:43:15.060 --> 00:43:19.260
Interface Builder and rip out tons
of custom event handling code.

00:43:19.400 --> 00:43:21.490
For the most part,
in Navigation Services,

00:43:21.490 --> 00:43:23.400
we're just interested in the
default behavior happening.

00:43:23.530 --> 00:43:25.400
But in those cases where
somebody clicks on the sidebar

00:43:25.400 --> 00:43:28.400
or the default button is hit,
something like that,

00:43:28.400 --> 00:43:30.890
in those specific cases,
we just write a Carbon event

00:43:30.930 --> 00:43:34.400
handler to listen to those events
and can ignore everything else.

00:43:34.400 --> 00:43:36.400
We let Toolbox do the driving for us.

00:43:36.400 --> 00:43:39.080
Now,
the next step with adding compositing

00:43:39.490 --> 00:43:43.340
was definitely the largest step,
but it had the most benefits

00:43:43.340 --> 00:43:45.310
in terms of performance.

00:43:45.530 --> 00:43:49.740
Uh, because Navigation Services handles,
uh, has all--pretty much

00:43:49.740 --> 00:43:52.220
all standard controls,
except for the couple of custom

00:43:52.320 --> 00:43:55.600
controls that we designed
specifically with compositing in mind,

00:43:55.660 --> 00:43:58.780
we could just go ahead and, uh,
click the checkbox in Interface

00:43:58.780 --> 00:44:02.640
Builder and adopt compositing,
with two caveats.

00:44:02.740 --> 00:44:05.600
The first was a change we had to make.

00:44:05.600 --> 00:44:07.690
We had to do a little
bit of special code,

00:44:07.690 --> 00:44:13.760
um, to deal with the change in, uh,
parent-relative, uh, coordinate spaces.

00:44:14.010 --> 00:44:17.210
So we were no longer window-relative,
and we had a lot of, uh,

00:44:17.290 --> 00:44:20.900
embedding in Navigation Services in
order to make sure that we were always,

00:44:20.900 --> 00:44:24.400
uh, paying attention to what our
frame was relative to our

00:44:24.400 --> 00:44:27.190
parent view and not the window.

00:44:27.610 --> 00:44:30.990
The second thing is that Navigation
Services offers the ability for

00:44:31.040 --> 00:44:32.560
clients to customize the dialog.

00:44:32.900 --> 00:44:36.330
So there's a custom area in
the bottom of the dialog.

00:44:36.760 --> 00:44:40.720
and clients had always been used
to this being non-compositing,

00:44:40.720 --> 00:44:43.180
so we needed to maintain that behavior.

00:44:43.410 --> 00:44:46.360
So we did have to add a
custom compatibility area

00:44:46.360 --> 00:44:48.820
that remained non-compositing.

00:44:51.340 --> 00:44:53.560
Now that Navigation
Services is based on NIBs,

00:44:53.560 --> 00:44:56.430
we can take advantage of new
features in Interface Builder,

00:44:56.430 --> 00:44:58.750
like HIView layouts.

00:44:58.760 --> 00:45:02.130
and going through that process,
we could keep the, you know,

00:45:02.140 --> 00:45:05.990
reflow the entire dialog as it's
resized without having to write

00:45:05.990 --> 00:45:07.780
a whole lot of code at all.

00:45:08.970 --> 00:45:11.880
Now, the results for Navigation
Services were great.

00:45:12.020 --> 00:45:15.210
Compositing, in particular,
gave us about a 20% speed

00:45:15.280 --> 00:45:17.040
boost loading the dialog.

00:45:17.090 --> 00:45:19.330
There was so much redundant
drawing going on before that it

00:45:19.400 --> 00:45:24.540
was just simply eliminated by the
one-pass draw model of HIView.

00:45:24.590 --> 00:45:28.500
The speed boost is also apparent
in resizing the dialogs,

00:45:28.620 --> 00:45:33.030
especially in the sheet mode,
despite the fact that

00:45:33.040 --> 00:45:36.290
sheets went translucent,
because compositing mode is the

00:45:36.440 --> 00:45:38.400
only way to get translucent sheets.

00:45:39.110 --> 00:45:44.760
And really a great side benefit of
moving to these new technologies was that

00:45:44.810 --> 00:45:47.460
bugs in navigation services were fixed.

00:45:47.550 --> 00:45:51.040
Because we were removing code and
adopting a better drawing model,

00:45:51.210 --> 00:45:54.400
little visual glitches and some
performance problems went away.

00:45:54.480 --> 00:45:59.030
We handed all the code off to the
toolbox and let it do the driving.

00:45:59.190 --> 00:46:03.120
So there was less code for us to test,
less code for there to be bugs in.

00:46:05.090 --> 00:46:07.030
and overall it was a very
straightforward process,

00:46:07.040 --> 00:46:09.680
actually smoother than
we thought it would go.

00:46:09.840 --> 00:46:16.270
There were no real strong sticking points
or gotchas beyond just a couple of the

00:46:16.900 --> 00:46:22.080
compositing changes that you need to
be aware of that I mentioned earlier.

00:46:22.570 --> 00:46:27.550
So now that Navigation
Services is based on NiBs,

00:46:27.550 --> 00:46:33.160
we can go ahead and adopt new features
as Interface Builder provides them.

00:46:33.160 --> 00:46:36.360
So we're in a great
position going forward.

00:46:36.420 --> 00:46:38.680
We really recommend that
you go through this process.

00:46:38.870 --> 00:46:41.860
I think you'll find it
easier than you might expect,

00:46:41.920 --> 00:46:45.210
and it will give you a lot of
benefits in the ability to add new

00:46:45.880 --> 00:46:49.210
features now and in the future.

00:46:49.280 --> 00:46:51.640
With that, I'd like to go back to Curt.

00:46:57.750 --> 00:47:00.320
Basically, the reason I wanted Bryan to
come up and talk about the

00:47:00.320 --> 00:47:03.250
Navigation Services transition
was because of a comment that

00:47:03.250 --> 00:47:06.940
he made to me on the side was,
the biggest surprise about the transition

00:47:06.940 --> 00:47:10.300
was that it wasn't that hard at all.

00:47:10.370 --> 00:47:13.300
So I really encourage you to go through
this transition as you add more features

00:47:13.300 --> 00:47:18.530
or when your boss says you need some new
lyric dialogue in your song info panel.

00:47:18.620 --> 00:47:21.800
As you need to start adopting
these new technologies,

00:47:21.900 --> 00:47:25.380
start converting it to the new stuff,
because this is where we're

00:47:25.380 --> 00:47:26.880
focusing our attention.

00:47:29.080 --> 00:47:34.890
So just start getting up to Nibs,
start handling HVAC commands

00:47:35.040 --> 00:47:38.640
for your event dispatching,
make your whole interface

00:47:38.640 --> 00:47:42.250
Carbon event driven,
and then start using all of these

00:47:42.250 --> 00:47:45.190
APIs that do all the driving for you,
like Bryan mentioned.

00:47:45.210 --> 00:47:47.160
Like run app modal loop
for window to go modal,

00:47:47.160 --> 00:47:50.890
or run app application event
loop once you get your entire

00:47:50.890 --> 00:47:54.040
interface to be Carbon event driven.

00:47:54.070 --> 00:47:57.320
And then also keep in mind that you
will have to convert your custom content

00:47:57.320 --> 00:48:02.080
to HIViews in order to take advantage
of compositing in your dialogues.

00:48:03.700 --> 00:48:06.830
So please check out some more
information that's available.

00:48:06.900 --> 00:48:13.380
Something that was really useful
in preparation for the demo was

00:48:13.520 --> 00:48:16.920
on how to move your projects
from Code Warrior to Xcode.

00:48:16.990 --> 00:48:21.030
Because once it was in Xcode,
the flexibility of actually using

00:48:21.030 --> 00:48:25.100
Interface Builder with that,
it was pretty easy to use.

00:48:25.100 --> 00:48:27.740
And then also the Interface Builder
services reference describes

00:48:27.800 --> 00:48:33.100
actually how to get your interface
going within Interface Builder.

00:48:33.160 --> 00:48:36.840
So with that, I'd like to bring up that
French guy over there.