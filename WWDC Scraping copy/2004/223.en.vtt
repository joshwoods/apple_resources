WEBVTT

00:00:37.800 --> 00:00:51.400
[Transcript missing]

00:01:17.000 --> 00:01:26.600
[Transcript missing]

00:01:30.100 --> 00:01:35.100
And as you can see these applications
cover a fairly broad range.

00:01:35.100 --> 00:01:37.100
There's also any number of third
party apps I'm not mentioning.

00:01:37.100 --> 00:01:40.100
So if your app isn't here I apologise.

00:01:40.100 --> 00:01:42.100
It's just too many.

00:01:42.100 --> 00:01:45.950
But you have applications like
Final Cut Pro which is a video app.

00:01:45.950 --> 00:01:50.830
You have GarageBand which is a consumer
oriented application for making music.

00:01:50.830 --> 00:01:53.370
And then you've got Logic and
Performer that are oriented

00:01:53.370 --> 00:01:55.020
towards the pro end of the market.

00:01:55.020 --> 00:01:59.660
So that's a pretty broad range of
context that you're already working in.

00:02:00.100 --> 00:02:01.580
So this is the problem that we found.

00:02:30.600 --> 00:02:32.590
processing its effects.

00:02:32.590 --> 00:02:37.600
It takes audio as input,
does some processing to provide output.

00:02:37.600 --> 00:02:45.240
And they're the types of audio units
we can concentrate on for this talk.

00:02:45.240 --> 00:02:48.530
Now, just to give you a quick
review of the API set,

00:02:48.540 --> 00:02:50.550
an audio unit is a component.

00:02:50.630 --> 00:02:53.210
There's component manager curves.

00:02:53.240 --> 00:02:57.440
You use find components to do
searches to see what are the

00:02:57.440 --> 00:02:59.080
components that are in that system.

00:02:59.080 --> 00:03:03.250
And then once you find the
component that you want to use,

00:03:03.250 --> 00:03:04.520
you open that.

00:03:04.520 --> 00:03:06.070
That opens the component.

00:03:06.090 --> 00:03:12.410
It's essentially like calling you
on a class object in Java or C++,

00:03:12.420 --> 00:03:13.550
you create an instance.

00:03:13.560 --> 00:03:15.560
That's called a component instance.

00:03:15.560 --> 00:03:18.650
And when we talk about audio units,
we're talking about audio

00:03:18.650 --> 00:03:20.350
units as a component instance.

00:03:20.360 --> 00:03:22.840
And then once you've
opened the component,

00:03:22.840 --> 00:03:25.960
there's things that you
want to do to the component.

00:03:25.980 --> 00:03:28.580
And so then there's a collection
of APIs that are defined

00:04:54.380 --> 00:04:54.380
Then the main work, of course,
is rendering.

00:04:54.380 --> 00:04:54.380
And so there's an API for Audio Units

00:04:58.000 --> 00:05:07.600
[Transcript missing]

00:05:11.100 --> 00:05:18.000
[Transcript missing]

00:05:26.900 --> 00:05:34.900
[Transcript missing]

00:05:42.090 --> 00:05:45.910
It also has a relationship to render,
in that if there's some state

00:05:46.010 --> 00:05:51.590
that's changed in the host,
you can use reset to basically

00:05:51.590 --> 00:05:51.590
tell the Audio Unit that any

00:05:51.800 --> 00:05:59.800
[Transcript missing]

00:06:07.310 --> 00:06:13.920
Audio Unit APIs are typically
implemented by AU instruments and

00:06:13.920 --> 00:06:22.130
there's a specialisation of the general
effect that can do things in particular

00:06:22.130 --> 00:06:29.730
with MIDI and so we can implement
these APIs and answer those questions.

00:06:29.730 --> 00:06:36.480
And then because instruments are
primarily based around notes,

00:06:36.480 --> 00:06:37.300
we can

00:06:51.900 --> 00:07:16.500
[Transcript missing]

00:07:23.300 --> 00:07:28.230
it's often confusing to understand
how things should work so we

00:07:28.230 --> 00:07:31.300
developed a command line tool
called the AU Validation Tool.

00:07:31.440 --> 00:07:35.300
This tool is really just testing
what our unit put through its bases,

00:07:35.300 --> 00:07:37.300
trying to break it in
as many ways as it can,

00:07:37.300 --> 00:07:40.300
trying to make sure
that it behaves itself.

00:07:40.300 --> 00:07:44.300
It's also a tool that
can be used to debug.

00:07:44.300 --> 00:07:47.680
We've had a lot of developers using
this since we released it at the start

00:07:47.680 --> 00:07:52.400
of the year as a means to actually
get their audio unit up and running,

00:07:52.400 --> 00:07:55.010
getting it to a state where
they can then actually maybe

00:07:55.010 --> 00:07:57.300
try it in a host application.

00:07:57.300 --> 00:08:00.090
The Validation Tool is also
part of the Logo program.

00:08:27.000 --> 00:08:34.870
The validation tool is
really good for some things.

00:08:34.870 --> 00:08:40.950
It really can't do it in the context
of how do I use an Audio Unit.

00:08:40.950 --> 00:08:40.950
So the Host App, AU Lab,
is provided to do this.

00:08:40.950 --> 00:08:40.950
And this provides a fairly typical

00:08:51.600 --> 00:09:03.600
[Transcript missing]

00:09:13.100 --> 00:09:23.300
[Transcript missing]

00:09:26.500 --> 00:09:32.200
[Transcript missing]

00:09:38.000 --> 00:09:45.870
The validation tool does is it just
sees if it can find your Audio Unit.

00:09:45.870 --> 00:09:45.870
And what we're doing here is
we're just finding the component.

00:09:45.870 --> 00:09:45.870
We haven't actually

00:09:47.400 --> 00:09:53.000
[Transcript missing]

00:09:58.000 --> 00:10:04.520
We've done some open tests on
the Audio Unit that we've found.

00:10:04.520 --> 00:10:04.520
And we profile the time it takes
us to open the Audio Unit to

00:10:04.800 --> 00:10:07.700
The first time is what
we call a cold time.

00:10:07.740 --> 00:10:12.730
And this is the time that's going
to take in order to load any

00:10:12.730 --> 00:10:12.730
dependencies that your Audio Unit has.

00:10:16.900 --> 00:10:27.200
[Transcript missing]

00:10:39.100 --> 00:10:42.420
There's also two places that you
can get component version numbers

00:10:42.460 --> 00:10:46.550
from the component manager,
and so we also do a check to

00:10:46.550 --> 00:10:49.100
make sure they both match.

00:10:49.100 --> 00:10:51.710
Then once we've opened the Audio Unit,
we have a look at what its

00:10:51.710 --> 00:10:53.100
default configurations are.

00:10:53.100 --> 00:10:57.100
What is its initial state in
terms of its I/O capabilities?

00:10:57.100 --> 00:11:01.100
In this case, we've got one input,
one output.

00:11:01.100 --> 00:11:05.100
The default format is 44kHz,
two channels.

00:11:05.100 --> 00:11:11.100
It's got the generic 32 float, B-Indian,
D-lived format.

00:11:11.100 --> 00:11:15.100
We'll come back to this
in a couple of slides.

00:11:15.100 --> 00:11:17.100
Then we look through
the required properties.

00:11:17.100 --> 00:11:20.630
These are properties that all
Audio Units are required for.

00:11:39.300 --> 00:11:43.450
The last one, Instrument Count,
is a property that a host

00:11:43.450 --> 00:11:47.030
can use to determine if your
instrument is multi-channel,

00:11:47.030 --> 00:11:49.290
multi-tambural or mono-tambural.

00:11:49.290 --> 00:11:53.310
If it's multi-tambural,
it may decide to do some

00:11:53.310 --> 00:11:59.040
different actions in terms
of the way it passes MIDI.

00:11:59.040 --> 00:12:02.720
And so we require this for instruments.

00:12:02.720 --> 00:12:02.720
And then the Validation
Tool looks at some recommended

00:12:19.200 --> 00:12:22.330
So this is actually latency,
not tail time.

00:12:22.330 --> 00:12:25.020
And the first property
we're looking at is

00:12:26.110 --> 00:12:31.420
This is a property that tells the host
how long it takes for a given sample to

00:12:31.420 --> 00:12:35.000
appear in the output from some input.

00:12:35.000 --> 00:12:41.350
And latency can be involved
with several different factors.

00:12:41.350 --> 00:12:41.350
It could

00:12:50.800 --> 00:13:00.300
[Transcript missing]

00:13:03.700 --> 00:13:22.400
[Transcript missing]

00:13:52.970 --> 00:13:52.970
So that's a way to understand latency
as just going from input to how long

00:13:52.970 --> 00:13:52.970
does it take for the output to appear.

00:13:52.970 --> 00:13:52.970
And tail time,
which is now the correct title,

00:13:52.970 --> 00:13:52.970
is a similar property,
but this time we're looking at

00:13:52.970 --> 00:13:52.970
how long does it take for a sample
to disappear from the output.

00:13:52.970 --> 00:13:52.970
So latency was how long
it takes to appear.

00:13:56.600 --> 00:14:02.700
[Transcript missing]

00:14:07.900 --> 00:14:16.920
The Audio Unit logo is designed
to allow customers to have ramping

00:14:16.920 --> 00:14:16.920
operations in their algorithms,
so that the input sample

00:14:16.920 --> 00:14:16.920
is going to be present.

00:14:21.700 --> 00:14:26.700
[Transcript missing]

00:14:27.700 --> 00:14:44.400
[Transcript missing]

00:14:45.900 --> 00:14:52.400
[Transcript missing]

00:15:05.000 --> 00:15:11.300
[Transcript missing]

00:15:24.500 --> 00:15:43.700
[Transcript missing]

00:15:45.500 --> 00:15:55.800
[Transcript missing]

00:16:00.500 --> 00:16:03.000
The supported number of
channels is optional,

00:16:03.000 --> 00:16:05.780
although it's obviously
essential information.

00:16:05.780 --> 00:16:10.260
And what the property reports
is any global capabilities

00:16:10.270 --> 00:16:14.370
that an Audio Unit has between,
and dependencies between the

00:16:14.370 --> 00:16:18.060
number of input channels and
the number of output channels.

00:16:18.060 --> 00:16:20.740
And of course,
if you're looking at a synth,

00:16:20.740 --> 00:16:24.530
it may not have any input channels,
so the input cycle is zero.

00:16:24.530 --> 00:16:28.900
And if the property is not implemented,
then we make some assumptions.

00:16:28.900 --> 00:16:28.910
If you're an effect,

00:16:58.700 --> 00:17:01.410
This is AU Lab.

00:17:01.550 --> 00:17:04.260
It's in the Tiger Applications
Audio folder.

00:17:12.900 --> 00:17:22.690
Here is a bunch of tracks.

00:17:22.690 --> 00:17:22.690
I've also got a bass and
then I've got an apple.

00:17:22.690 --> 00:17:22.690
We'll have a look through these.

00:17:22.690 --> 00:17:22.690
Now if you remember at the start,
in the validation tool, we looked at

00:17:27.600 --> 00:17:34.830
In this case here,
I've got a stereo track going to stereo.

00:17:34.830 --> 00:17:34.830
I'm able to create sub-menus for

00:18:03.180 --> 00:18:03.180
So, when we're doing stereo to stereo,
we've decided not to

00:18:03.180 --> 00:18:03.180
put the channels here.

00:18:03.180 --> 00:18:03.180
And then in each sub-menu,
I can put the name of

00:18:03.180 --> 00:18:03.180
the Audio Unit here,
and that's where we're

00:18:03.180 --> 00:18:03.180
getting that information from.

00:18:03.180 --> 00:18:03.180
This track over here is a mono input,
and it's going to stereo.

00:18:03.180 --> 00:18:03.180
So now I've got a mono to mono,
or I've got a mono to stereo.

00:18:03.180 --> 00:18:03.180
So in the mono to mono,
you'll see now that I don't have an

00:18:03.180 --> 00:18:03.180
entry here for Elemental Audio Suspector,
because it's

00:18:17.300 --> 00:18:28.700
[Transcript missing]

00:18:33.300 --> 00:18:43.600
[Transcript missing]

00:19:02.700 --> 00:19:06.700
Okay, so getting into some more
of the special properties,

00:19:06.730 --> 00:19:10.510
we've seen just sort of the
basic kind of setup stuff.

00:19:19.600 --> 00:19:40.910
: Special properties.

00:19:40.910 --> 00:19:40.910
The first one we want
to look at is custom UI.

00:19:40.910 --> 00:19:40.910
This is a property where
an Audio Unit can say,

00:19:40.910 --> 00:19:40.910
"Well, I've actually got some custom
UI that I've written for myself.

00:19:40.910 --> 00:19:40.910
Here it is." We support
two flavors of UIs,

00:19:40.910 --> 00:19:40.910
either Carbon UIs or Cocoa UIs.

00:19:40.910 --> 00:19:40.910
And in both cases, an Audio Unit can

00:19:48.200 --> 00:19:55.200
[Transcript missing]

00:20:05.600 --> 00:20:14.620
: Thank you, Dr.

00:20:14.620 --> 00:20:14.620
Cronin.

00:20:14.620 --> 00:20:14.620
Even just looking at users
of those different apps,

00:20:14.620 --> 00:20:14.620
you're probably looking at different
people with different capabilities

00:20:14.620 --> 00:20:14.620
and different understanding.

00:20:14.620 --> 00:20:14.620
And so we really encourage

00:20:25.900 --> 00:20:36.290
The second property that's also
pretty interesting and provides a good

00:20:36.290 --> 00:20:38.820
user experience is Factory Presets.

00:20:38.820 --> 00:20:38.820
Factory Presets are a collection
of states of an Audio Unit,

00:20:38.820 --> 00:20:38.820
and by a Preset for an Audio Unit,

00:20:40.710 --> 00:20:44.860
A factory preset is the
Audio Unit developer saying,

00:20:44.860 --> 00:20:48.700
"I know some really cool things
that I can do with my Audio Unit,

00:20:48.700 --> 00:20:51.740
and they're like this."
You can think of keyboards.

00:20:51.740 --> 00:21:00.120
If you look at the market for keyboards
over the last 20 years with MIDI,

00:21:00.120 --> 00:21:03.730
most of the sounds that people play out
of keyboards are the factory presets.

00:21:03.730 --> 00:21:03.730
This is a very important

00:21:18.200 --> 00:21:20.100
We also have user presets.

00:21:20.100 --> 00:21:23.200
This is with a property
called Class Info.

00:21:23.200 --> 00:21:29.490
So if the user wants to go in
and tweak some of the values and

00:21:29.490 --> 00:21:36.450
have a look at whether they're
using the custom UI or slider UI,

00:21:36.450 --> 00:21:37.330
they can tweak that value and then
the host should provide the ability

00:21:37.330 --> 00:21:37.330
to save the preset and restore it to

00:21:45.900 --> 00:22:07.210
I'd like to see the host app supporting
this location or a couple of locations

00:22:07.210 --> 00:22:07.210
that can be used to put presets in.

00:22:07.210 --> 00:22:07.210
And by doing this, it means that when I'm
using one application,

00:22:07.210 --> 00:22:07.210
I can get my presets,
and then I go to another application,

00:22:07.210 --> 00:22:07.210
I can have the same
presets available to me.

00:22:07.210 --> 00:22:07.210
And they can go across the system,
regardless of which Audio Unit I'm using.

00:22:17.500 --> 00:22:28.400
[Transcript missing]

00:22:40.900 --> 00:22:50.600
[Transcript missing]

00:22:51.600 --> 00:23:10.470
: The Audio Unit preset is really
saving the parameter state,

00:23:10.470 --> 00:23:10.470
but a preset may contain more
than just parameter states.

00:23:10.470 --> 00:23:10.470
So as a host, you can't just go through
and save parameters.

00:23:10.470 --> 00:23:10.470
You've actually got to save the preset.

00:23:10.470 --> 00:23:10.470
But then there is a useful
information that an Audio Unit can

00:23:30.000 --> 00:23:38.000
[Transcript missing]

00:24:07.200 --> 00:24:27.400
[Transcript missing]

00:24:44.900 --> 00:24:46.390
There's a couple of things.

00:24:46.390 --> 00:24:48.620
We talked about the
pre-gain parameter here.

00:24:48.620 --> 00:24:53.520
So all that the generic UI is doing here
is getting the parameter information

00:24:53.520 --> 00:24:55.390
and drawing this parameter from here.

00:24:55.470 --> 00:24:58.900
It's found out that it's
DB from the parameter tag.

00:24:58.900 --> 00:25:01.720
It's got the range.

00:25:01.720 --> 00:25:06.880
It's given me a slider that I can drag.

00:25:06.880 --> 00:25:08.700
You'll also notice that there's
a kind of visual clumping of

00:25:30.400 --> 00:25:34.730
This allows us to create quite a
useful and reasonable view for a lot

00:25:34.730 --> 00:25:37.400
of audio units just by doing sliders.

00:25:37.400 --> 00:25:42.690
So the first clump has just some
global settings for the multiband,

00:25:42.690 --> 00:25:45.400
pre-, post-gain and so forth.

00:25:45.400 --> 00:25:50.530
It's a four-band multiband,
so it has three crossovers,

00:25:50.530 --> 00:25:54.400
so you can then set the crossover
points in the next clump of three.

00:25:54.400 --> 00:25:58.350
And then you've got four clumps,
one for each of the bands

00:25:58.350 --> 00:26:00.400
of the multiband compressor.

00:26:00.400 --> 00:26:03.390
And then down the bottom you've
got a compression amount.

00:26:03.400 --> 00:26:06.670
Now, the compression amount
is a parameter as well,

00:26:06.760 --> 00:26:08.670
and it's a read-only parameter.

00:26:54.140 --> 00:26:54.140
I'm going to go ahead and
show you the parameters there.

00:26:54.140 --> 00:26:54.140
That's just still a parameter.

00:26:54.140 --> 00:26:54.140
It's showing me how much in
each of the bands I'm actually

00:26:54.140 --> 00:26:54.140
compressing at each time.

00:26:55.600 --> 00:27:07.300
[Transcript missing]

00:27:11.520 --> 00:27:15.500
Mac OS X Reverb makes particularly
good use of parameters

00:27:15.500 --> 00:27:17.330
with different room sizes.

00:27:17.340 --> 00:27:24.360
And Reverbs can be very hard to program,
so having a good collection of factory

00:27:24.360 --> 00:27:24.360
presets here can be very useful.

00:27:25.800 --> 00:27:30.900
[Transcript missing]

00:27:51.000 --> 00:28:04.400
[Transcript missing]

00:28:07.400 --> 00:28:21.700
[Transcript missing]

00:28:24.200 --> 00:28:30.700
[Transcript missing]

00:28:33.760 --> 00:28:38.300
In my Presets directory I've
got an Apple AUmatrix Reverb

00:28:38.300 --> 00:28:41.700
directory now with my preset file.

00:28:41.700 --> 00:28:49.500
Any application can look for preset
files in those directories and present

00:28:49.500 --> 00:28:49.500
the presets however they want to.

00:28:53.400 --> 00:29:01.970
: Hi, everyone.

00:29:01.970 --> 00:29:01.970
I'm Bill Stewart.

00:29:01.970 --> 00:29:01.970
I'm the CEO of Audio Unit.

00:29:01.970 --> 00:29:01.970
This is an audio unit from Destroy FX.

00:29:05.500 --> 00:29:12.100
[Transcript missing]

00:29:13.700 --> 00:29:21.570
: I've got parameters that have
got different types of things.

00:29:21.570 --> 00:29:21.570
I've got menus, I've got check boxes,
all of the menu items have

00:29:27.010 --> 00:29:34.610
: Thank you, Paul.

00:29:34.610 --> 00:29:34.610
I'm going to take a moment to thank
the panel for this presentation.

00:29:34.610 --> 00:29:34.610
This is all being just generated from
the generic parameter information.

00:29:34.610 --> 00:29:34.610
As I

00:29:43.500 --> 00:29:49.700
[Transcript missing]

00:29:51.900 --> 00:29:55.740
is able to do this because he can
just send a notification to me.

00:29:55.740 --> 00:29:57.820
He's not doing this on the render thread.

00:29:57.820 --> 00:30:01.170
He's just saying,
this parameter has changed, and then...

00:30:02.200 --> 00:30:13.300
[Transcript missing]

00:30:39.590 --> 00:30:39.590
So,
we're getting into some really serious

00:30:39.590 --> 00:30:39.590
preset management problems for you guys.

00:30:39.590 --> 00:30:39.590
There's this synth by
Urs Heckman called Zebra.

00:30:39.590 --> 00:30:39.590
Let's just solo him.

00:30:39.590 --> 00:30:39.590
So, he has a custom

00:30:50.700 --> 00:30:56.800
[Transcript missing]

00:30:58.900 --> 00:31:00.160
This is fine.

00:31:00.180 --> 00:31:06.790
You could present this in
a menu and that would be...

00:31:09.500 --> 00:31:10.880
This is fine.

00:31:10.880 --> 00:31:17.500
You could present this in
a menu and that would be...

00:31:21.570 --> 00:31:25.360
We've got keyboard
navigation going on here.

00:31:25.360 --> 00:31:29.220
I can just cycle through
the presets here.

00:31:38.800 --> 00:31:47.700
[Transcript missing]

00:31:51.710 --> 00:32:06.480
: We're going to start
with the Audio Unit logo.

00:32:06.480 --> 00:32:06.480
This is the first time that
we've used the Audio Unit logo.

00:32:06.480 --> 00:32:06.480
It's a new feature that gets
exposed to the user to use.

00:32:06.480 --> 00:32:06.480
In the case of ours, as you can see,
all of the presets here,

00:32:06.480 --> 00:32:06.480
and all that we're doing in AULAB,
is we're just going through

00:32:06.480 --> 00:32:06.480
the zebra directory,
and every directory that we're seeing,

00:32:06.480 --> 00:32:06.480
we're creating an entry in there.

00:32:22.600 --> 00:32:34.800
[Transcript missing]

00:32:47.500 --> 00:33:03.900
[Transcript missing]

00:33:11.100 --> 00:33:17.000
[Transcript missing]

00:33:18.300 --> 00:33:42.200
[Transcript missing]

00:34:01.500 --> 00:34:05.490
The next thing the Audio Unit does is it
looks at all the information you've told

00:34:05.490 --> 00:34:07.660
us about the formats that you can handle.

00:34:07.660 --> 00:34:11.180
And then it says, "Okay,
let's see if you actually can

00:34:11.180 --> 00:34:16.410
handle them." So it doesn't do any
validation at this point in terms of,

00:34:22.200 --> 00:34:32.600
[Transcript missing]

00:34:37.600 --> 00:34:46.360
does a collection of render tests.

00:34:46.360 --> 00:34:46.360
Now the render tests are done
at different numbers of frames.

00:34:46.360 --> 00:34:46.360
It uses also, if

00:34:53.720 --> 00:34:58.850
: The idea behind this case is
that in each of those steps,

00:34:58.850 --> 00:35:03.700
when it's rendering at a
different number of frames,

00:35:03.700 --> 00:35:06.720
it does the following pattern.

00:35:06.720 --> 00:35:10.970
It un-initializes the Audio Unit,
it sets max frames to

00:35:10.970 --> 00:35:10.970
that number of frames.

00:35:10.970 --> 00:35:10.970
If it's got to reset the format,
it'll do that.

00:35:10.970 --> 00:35:10.970
Then it initializes the Audio Unit,
then it renders

00:35:13.400 --> 00:35:18.040
This is the sort of pattern of usage
that you'll see in host applications.

00:35:18.040 --> 00:35:20.110
If we can go to slides just for a moment.

00:35:27.300 --> 00:35:32.280
I just wanted to show you,
in an application, you may have a,

00:35:32.290 --> 00:35:35.350
what IO buffer size do
you want to do here?

00:35:40.910 --> 00:35:47.100
So that's part of this pattern of
uninitializing and reinitializing.

00:35:47.100 --> 00:35:47.100
It's very important that

00:35:51.100 --> 00:35:57.300
Sample rate of the device
would have changed,

00:35:57.300 --> 00:35:57.300
and this is also an important
part of this whole step.

00:35:57.300 --> 00:35:57.300
So that's what the tests are.

00:36:07.500 --> 00:36:15.170
also looks at the
semantics and connections.

00:36:15.170 --> 00:36:15.170
As we insert or remove Audio

00:36:18.000 --> 00:36:33.700
[Transcript missing]

00:36:37.900 --> 00:36:43.800
[Transcript missing]

00:36:55.500 --> 00:37:01.300
sort of the best practice that's sort of
embedded in the validation tool is that,

00:37:01.300 --> 00:37:04.170
you know,
before initializing hosts should

00:37:04.170 --> 00:37:08.640
be setting max frames and we,
we expect and recommend that the host,

00:37:08.640 --> 00:37:12.650
whenever at all possible,
if it sets max frames to 512,

00:37:12.650 --> 00:37:16.060
that that's always what it
asks the audio unit to do.

00:37:16.060 --> 00:37:19.570
We haven't made this a mandate,
but we're very strongly

00:37:19.580 --> 00:37:22.400
recommending this,
so we'll have a look at some

00:37:22.400 --> 00:37:30.240
of the kinds of situations we
want to avoid in the future.

00:37:30.250 --> 00:37:30.250
And that involves using buffer
offsets for scheduling parameters and

00:37:42.400 --> 00:37:56.600
: Let's say we've got a host app
and the user has said that they want

00:37:56.600 --> 00:37:56.600
to ramp from one parameter value to
the next over some period of time.

00:37:56.600 --> 00:37:56.600
The host has translated that
into a ramp that's going to start

00:37:56.600 --> 00:37:56.600
at one parameter value and then

00:38:03.310 --> 00:38:05.300
Audio Unit says that it can be ramped.

00:38:05.300 --> 00:38:08.740
Then the Audio Unit,
the host can then just turn it

00:38:08.740 --> 00:38:12.570
around and set the start and end,
start and duration,

00:38:12.570 --> 00:38:16.160
and starting value and
ending value for the ramp.

00:38:16.160 --> 00:38:20.300
And then that's all it needs
to do for that whole slice.

00:38:20.300 --> 00:38:25.180
And we like to see the supporter
because we also think Audio Units know

00:38:33.700 --> 00:38:40.200
[Transcript missing]

00:38:49.800 --> 00:38:53.370
So once the host has done
either of these two actions,

00:38:53.370 --> 00:38:56.260
then the idea is to render for 512.

00:39:08.620 --> 00:39:12.040
So the host will see that
this has to take place.

00:39:12.040 --> 00:39:16.410
So it'll then decide, well,
I'm going to break this 512 frames

00:39:16.410 --> 00:39:18.080
up into a bunch of little renders.

00:39:18.080 --> 00:39:20.110
So I'm going to render for

00:39:26.600 --> 00:39:37.500
[Transcript missing]

00:39:43.900 --> 00:39:47.900
This sort of practice
is legal and it's fine,

00:39:47.900 --> 00:39:51.950
but it has caused some Audio Units
not to publish parameters because

00:39:51.950 --> 00:39:57.160
they really can't handle being
bundled up into these little slices

00:39:57.160 --> 00:40:01.790
when they're asked to render,
just because of the nature of

00:40:01.800 --> 00:40:04.590
the way they do their processing.

00:40:04.590 --> 00:40:09.170
And so we really would like to see
that this is a discouraged practice,

00:40:09.170 --> 00:40:09.170
that it fades into the
distance and that we all

00:40:22.800 --> 00:40:41.870
This isn't something that we do
anything with in AU Lab because

00:40:41.870 --> 00:40:41.870
we're not a sequencer,
it's a mixing console as an application,

00:40:41.870 --> 00:40:41.870
so that's the last slide.

00:40:41.870 --> 00:40:41.870
Thank you for your patience.

00:40:41.870 --> 00:40:41.870
Now,
one of the things that AU Lab does that

00:40:41.870 --> 00:40:41.870
we mentioned previously is that it really

00:40:42.100 --> 00:40:47.190
: Audio Unit deals in a very
sort of hypersensitive situation.

00:40:47.190 --> 00:40:49.460
It's very, very twinkly.

00:40:49.460 --> 00:40:53.730
And that's actually,
for this manifestation of it,

00:40:53.730 --> 00:40:56.000
this is quite deliberate.

00:40:56.000 --> 00:40:57.880
And it's deliberate.

00:40:57.880 --> 00:41:02.050
And what will happen is
that when there's a problem,

00:41:02.050 --> 00:41:05.130
when you take too long
in your render pool,

00:41:05.130 --> 00:41:05.130
you'll get an audio device
overload from the hell.

00:41:05.130 --> 00:41:05.130
You'll miss samples.

00:41:05.130 --> 00:41:05.130
And

00:41:21.960 --> 00:41:26.550
When you see this in AU Lab,
you should then diagnose

00:41:26.550 --> 00:41:29.190
this and there are some tools
that can be used to help you.

00:41:45.500 --> 00:41:49.100
In this case we have a
CPU or quality property.

00:41:49.100 --> 00:41:53.570
You may want to actually provide that
to users so that they can scale back

00:41:53.570 --> 00:41:58.710
your processing if they're on a slower
machine or they've just got 3,000

00:41:58.710 --> 00:42:03.320
plug-ins to run instead of the 50 that
you run at home and they want your

00:42:03.320 --> 00:42:07.790
thing but they don't need it to be
high quality or something like that.

00:42:07.790 --> 00:42:10.980
So that's one way that you
can provide UI for that.

00:42:10.980 --> 00:42:13.460
We provide this in the DLS Music device.

00:42:13.460 --> 00:42:13.460
A second common problem

00:42:44.500 --> 00:42:50.700
[Transcript missing]

00:43:05.600 --> 00:43:12.510
: We've talked a little bit about
re-initialization and reset.

00:43:12.510 --> 00:43:12.510
Reset is a timeline changes in

00:43:24.900 --> 00:43:53.300
[Transcript missing]

00:44:26.720 --> 00:44:26.720
There's two examples we're
going to look at today.

00:44:26.720 --> 00:44:26.720
One is Apple's DLS Music device.

00:44:26.720 --> 00:44:26.720
It has two modes.

00:44:26.720 --> 00:44:26.720
You can have it as an internal
reverb mode where it's

00:44:26.720 --> 00:44:26.720
only got one active output,
or a send mode where it has two outputs.

00:44:26.720 --> 00:44:26.720
One output is the dry mix,
which is the dry mix,

00:44:26.720 --> 00:44:26.720
which is the sound output.

00:44:26.720 --> 00:44:26.720
And the other output is the audio output.

00:44:26.720 --> 00:44:26.720
So this is a very simple
way to look at it.

00:44:35.400 --> 00:44:41.540
The second one we're going to look at is
Native Instruments' Reactor Audio Unit.

00:44:41.540 --> 00:44:41.540
This is, you know, is probably something

00:44:47.800 --> 00:44:57.910
has a dynamic assignable capability
for where his channels go.

00:44:57.910 --> 00:44:57.910
And so what we'll have a look
at in the lab is how a host

00:44:57.910 --> 00:44:57.910
can configure that and then

00:45:17.990 --> 00:45:17.990
Okay, so first of all,
here's a collection of tracks here.

00:45:17.990 --> 00:45:17.990
You'll see that they,
it highlights both tracks.

00:45:19.300 --> 00:45:21.300
This is the DLS Music device.

00:45:21.300 --> 00:45:24.480
I've got this one
turned off from the mix,

00:45:24.530 --> 00:45:28.630
so I'm not actually having this
output going into the mix that's

00:45:28.670 --> 00:45:30.800
coming from the track mixer at all.

00:45:30.800 --> 00:45:36.800
In fact, what I'm doing is that I'm
sending it over to a bus,

00:45:36.800 --> 00:45:40.540
and then on that bus I've got a reverb.

00:45:40.540 --> 00:45:40.540
And as you saw me previously,
I was sort of playing around

00:45:40.540 --> 00:45:40.540
with the reverb though.

00:46:02.500 --> 00:46:11.070
: We've got an audio overload here,
so there's a problem we should look at.

00:46:11.070 --> 00:46:11.070
The DLSS code went to sleep.

00:46:41.000 --> 00:46:51.800
[Transcript missing]

00:47:02.520 --> 00:47:04.930
It doesn't really matter
from Reactor's case,

00:47:04.940 --> 00:47:08.130
because all that Reactor
does is process 16 channels.

00:47:08.180 --> 00:47:12.890
And so the way that we can configure this
from the host side is however I want to

00:47:12.910 --> 00:47:17.400
use this Audio Unit on the hosting side.

00:47:17.400 --> 00:47:22.570
Now, if I bring up Reactor's UI,
because once you get into an

00:47:22.570 --> 00:47:24.770
Audio Unit that's like this,

00:47:32.600 --> 00:47:43.300
[Transcript missing]

00:47:48.200 --> 00:47:51.800
I also noticed that Reactor knows that
it's only using four channels because

00:47:51.800 --> 00:47:58.880
when we've configured the Audio Unit,
we've said to it, "Well, actually,

00:47:58.880 --> 00:47:58.880
I wanted two outputs,
and those two outputs are going to have

00:48:02.700 --> 00:48:09.670
: So it knows that I'm
using four channels.

00:48:09.670 --> 00:48:09.670
Then I can connect these up into

00:48:19.700 --> 00:48:23.700
I've actually got a layering
now of the two instruments.

00:48:23.700 --> 00:48:27.700
There's that instrument.

00:48:27.700 --> 00:48:31.700
There's that instrument.

00:48:31.700 --> 00:48:37.700
One of the things I can do here is
I can send this guy over to a send bus.

00:48:37.700 --> 00:48:41.700
And I'm going to actually just
have this coming out of the rears.

00:48:41.700 --> 00:48:43.700
And I'm turning this off.

00:48:43.700 --> 00:48:46.320
And so now you should be hearing...

00:48:50.400 --> 00:48:53.660
This should be coming out
of the front two speakers.

00:48:53.660 --> 00:48:56.900
And that should be
coming out of the rear.

00:48:56.900 --> 00:48:59.780
So A-Lab lets you kind of
mix and match things and see,

00:48:59.780 --> 00:49:02.810
because I think this is an
important thing that we forget

00:49:02.810 --> 00:49:05.850
as Audio Unit developers,
is that Audio Units are going

00:49:05.850 --> 00:49:07.650
to work with other Audio Units.

00:49:07.650 --> 00:49:11.710
And so it's nice to have a host where
you can play around with these things.

00:49:11.710 --> 00:49:14.400
How are they going to mix
with other Audio Units?

00:49:14.400 --> 00:49:17.430
Maybe there's even some nice
patches to use with Apple's

00:49:17.430 --> 00:49:19.580
Reverb or a piano sound or,
you know, a couple

00:49:25.000 --> 00:49:40.400
[Transcript missing]

00:50:01.400 --> 00:50:05.040
The web is really focused on
real-time usage and we really only

00:50:05.040 --> 00:50:07.040
look at effects and instruments.

00:50:07.040 --> 00:50:11.490
By real-time what we mean is that
when I ask you for 512 samples,

00:50:11.500 --> 00:50:14.710
if you need input,
you're only going to ask for 512.

00:50:25.800 --> 00:50:48.190
So we call this sort of like
a real-time functionality.

00:50:48.190 --> 00:50:48.190
And converters are a
little bit different.

00:50:48.190 --> 00:50:48.190
Converters, Audio Units,
they can be used in a real-time context,

00:50:48.190 --> 00:50:48.190
but they're also able to ask
for more or less data whenever

00:50:48.190 --> 00:50:48.190
they're asked for output,
for their input.

00:50:48.190 --> 00:50:48.190
And so you can use them in real-time,
but there may be some constraints,

00:50:48.190 --> 00:50:48.190
and we'll have a look at that.

00:50:52.700 --> 00:50:58.000
[Transcript missing]

00:51:07.200 --> 00:51:12.600
[Transcript missing]

00:51:16.900 --> 00:51:20.400
say well I'm going to
process 3 million samples.

00:51:20.400 --> 00:51:24.970
So it knows the range of samples
it's going to process and it can jump

00:51:24.970 --> 00:51:29.900
arbitrarily around when it needs input
as you're asking serially for its output.

00:51:29.900 --> 00:51:35.030
And there's examples in the Cordio
SDK about how to use an offline

00:51:35.030 --> 00:51:37.900
audio unit and refer you to that.

00:51:37.900 --> 00:51:44.210
If you saw the session this morning
Doug talked about audio unit generators

00:51:44.210 --> 00:51:46.900
as being a new audio tab in Taga.

00:51:46.900 --> 00:51:49.900
And audio unit generators
only generate audio.

00:51:49.900 --> 00:51:51.520
They don't have audio

00:52:00.910 --> 00:52:08.770
I'm going to say the same
thing for Converters as well.

00:52:08.770 --> 00:52:08.770
Then it's potentially an
Audio Unit that you might want to

00:52:08.770 --> 00:52:08.770
consider hosting in your application.

00:52:10.160 --> 00:52:13.310
If it doesn't publish an
interface like the scheduled

00:52:13.310 --> 00:52:17.100
Slice Player that we provide,
then there's really nothing you can do.

00:52:17.100 --> 00:52:22.320
It's not designed to be used with a UI,
so you would skip that one.

00:52:25.100 --> 00:52:43.600
[Transcript missing]

00:53:06.600 --> 00:53:19.100
[Transcript missing]

00:53:29.200 --> 00:53:46.400
[Transcript missing]

00:53:58.100 --> 00:53:59.880
There's that.

00:53:59.880 --> 00:54:04.840
Now,
because this is a generator audio unit,

00:54:04.900 --> 00:54:11.400
it's not, it's kind of,
we're going to bend the rules a bit.

00:54:11.400 --> 00:54:12.750
We said that AU Lab is like
this kind of real-time thing.

00:54:12.750 --> 00:54:12.750
But actually,
when I've got a generator unit,

00:54:12.750 --> 00:54:12.750
I'm going to assume that I'm,
it can be kind of,

00:54:13.400 --> 00:54:15.180
There's that.

00:54:15.180 --> 00:54:20.140
Now,
because this is a generator Audio Unit,

00:54:20.140 --> 00:54:22.610
it's not, it's kind of,
we're going to bend the rules a bit.

00:54:22.610 --> 00:54:22.610
We've said that AU Lab is like
this kind of real-time thing,

00:54:22.610 --> 00:54:22.610
but actually,
when I've got a generator unit,

00:54:22.610 --> 00:54:22.610
I'm going to assume that I'm,
can be kind of,

00:54:30.700 --> 00:54:46.300
[Transcript missing]

00:54:53.000 --> 00:55:14.000
[Transcript missing]

00:55:27.900 --> 00:55:30.970
This AU time-pitch show,
we're pretty pleased with the

00:55:30.970 --> 00:55:35.380
quality we're getting so far.

00:55:35.380 --> 00:55:35.380
We've still got some
work on optimizing it.

00:56:09.900 --> 00:56:09.900
I can make this speed up a little bit.

00:56:09.900 --> 00:56:09.900
As you can see, I can interact with
this quite a nice way.

00:56:09.900 --> 00:56:09.900
I can define a whole bunch of
regions using the Firefly array

00:56:09.900 --> 00:56:09.900
you hear from transcribing music
or learning something here.

00:56:09.900 --> 00:56:09.900
I can go faster as well.

00:56:09.900 --> 00:56:09.900
I think that I've really
got that bit down.

00:56:09.900 --> 00:56:09.900
I can make it go slower and I can change

00:56:24.300 --> 00:56:26.790
The things you'll notice here
as well is that we have a

00:56:26.790 --> 00:56:29.300
standard and an export tab here.

00:56:29.340 --> 00:56:32.930
Audio Unit parameters can also
publish export parameters.

00:56:34.500 --> 00:56:45.100
[Transcript missing]

00:56:55.700 --> 00:57:05.440
We looked at AU Lab as a way that you
can use to develop your Audio Units

00:57:05.440 --> 00:57:07.470
and you can have some fun with it.

00:57:07.470 --> 00:57:07.470
It shows you how your
AU is presented and you can

00:57:11.700 --> 00:57:21.400
[Transcript missing]

00:57:27.200 --> 00:57:39.000
[Transcript missing]