WEBVTT

00:00:12.180 --> 00:00:14.800
Thank you very much and now
if you would please welcome

00:00:14.800 --> 00:00:17.850
to the stage Dave Zarzycki.

00:00:26.040 --> 00:00:27.100
Good afternoon.

00:00:27.220 --> 00:00:31.400
Today, I'm going to talk to you about
porting Unix applications to Mac OS X.

00:00:31.440 --> 00:00:35.990
One might say this is about porting,
learning about the unique differences

00:00:36.000 --> 00:00:39.860
our platform provides if you're coming
from maybe a Linux or a Solaris box or

00:00:39.860 --> 00:00:42.730
your favorite Unix platform of the day.

00:00:43.010 --> 00:00:46.800
Now, I assume you actually,
since you're coming

00:00:46.800 --> 00:00:49.620
from another platform,
have experience with Uniq.

00:00:49.820 --> 00:00:54.090
So when I use certain terminology,
it won't be too foreign to you.

00:00:54.830 --> 00:00:56.500
So what are we going to cover?

00:00:56.520 --> 00:00:59.770
We're going to cover the
history of Unix a little bit,

00:00:59.770 --> 00:01:02.000
just to show where Apple comes from.

00:01:02.000 --> 00:01:06.730
We're going to talk about bundles,
a unique Apple invention

00:01:06.750 --> 00:01:09.140
for packaging stuff,
and packaging itself for

00:01:09.140 --> 00:01:10.540
software distribution.

00:01:11.200 --> 00:01:15.040
We're also going to talk about
some interesting daemons on our

00:01:15.080 --> 00:01:18.730
platform that you may notice
when doing a PS or wonder why,

00:01:18.780 --> 00:01:21.710
you know, just when you're poking around.

00:01:21.720 --> 00:01:24.350
We're going to talk about
standards conformance,

00:01:24.350 --> 00:01:27.090
since that's a very important
thing to so many of you,

00:01:27.090 --> 00:01:30.020
since you are using standards
APIs most of the time.

00:01:30.020 --> 00:01:32.500
We're going to be
talking about the linker,

00:01:32.500 --> 00:01:35.500
the runtime,
and other what we call frameworks.

00:01:35.560 --> 00:01:38.340
It's the whole stack of
things you link against.

00:01:38.360 --> 00:01:40.580
File system portability.

00:01:41.200 --> 00:01:44.200
Our file systems that we have
on our platform are very wide,

00:01:44.200 --> 00:01:48.390
and they support certain options,
and others don't support certain options.

00:01:49.880 --> 00:01:53.880
We're also going to talk about
authorization and authentication.

00:01:53.930 --> 00:01:57.520
Obviously, in a multi-user environment,
you need to be able to allow certain

00:01:57.530 --> 00:02:02.440
users to do certain things and not allow
certain users to do certain other things.

00:02:02.510 --> 00:02:05.190
Finally, there's the development
environment we provide,

00:02:05.220 --> 00:02:05.780
Xcode.

00:02:05.960 --> 00:02:08.990
And lastly,
we're going to talk about Mach.

00:02:10.040 --> 00:02:11.460
topics we're not going to cover.

00:02:11.500 --> 00:02:14.740
We're not going to talk about
drivers or writing or I/O Kit.

00:02:14.740 --> 00:02:17.040
We're not going to talk
about the GUI in any way,

00:02:17.040 --> 00:02:22.060
nor multimedia, printing, font handling,
basically anything you can see,

00:02:22.070 --> 00:02:23.760
we're not going to talk about it.

00:02:23.800 --> 00:02:27.400
It's just about the bottom
layers of the system.

00:02:28.320 --> 00:02:30.770
Now, Apple's Mac OS X.

00:02:31.170 --> 00:02:35.270
We've got a long legacy of
different OSs in the platform.

00:02:35.340 --> 00:02:39.420
We have some of our roots from BSD,
the Berkeley Software Distribution

00:02:39.420 --> 00:02:41.440
of Unix,
from way back in the day.

00:02:41.440 --> 00:02:46.060
We have Mach out of Carnegie Mellon,
which was the microkernel work and

00:02:46.070 --> 00:02:51.340
took large advances into virtual
memory and interprocess communication.

00:02:52.390 --> 00:02:55.530
Finally, NeXT brought these two together
and tried to make a product

00:02:55.530 --> 00:02:56.850
out of it called NeXTSTEP.

00:02:57.020 --> 00:02:59.650
And they succeeded fairly
well in accomplishing the

00:02:59.650 --> 00:03:00.680
goals they set out to do.

00:03:00.680 --> 00:03:04.290
So much so that Apple bought
it and produced Mac OS X,

00:03:04.290 --> 00:03:06.280
what you're using today.

00:03:06.280 --> 00:03:10.280
And Mac OS X brings in its own
unique flavor of things to add to

00:03:10.280 --> 00:03:15.580
the mix with our Mac OS 9 legacy,
with our Mac apps and our

00:03:15.580 --> 00:03:18.340
legendary ease of use.

00:03:19.040 --> 00:03:21.940
Now, let's start getting into some of
the details that make us unique.

00:03:21.940 --> 00:03:25.370
First and foremost,
we have a notion called bundles.

00:03:25.400 --> 00:03:27.350
You're going to see them
everywhere on the system.

00:03:27.350 --> 00:03:30.850
A bundle is just a
user-visible atomic blob.

00:03:30.850 --> 00:03:33.730
When you see an application,
you'll click, you drag it.

00:03:33.770 --> 00:03:38.180
You can't, but behind the scenes,
it's actually a folder.

00:03:38.180 --> 00:03:41.140
The folder contains, or directory,
whatever you want to call it.

00:03:41.140 --> 00:03:47.580
It contains executables, resources,
pictures, sounds, you name it.

00:03:47.580 --> 00:03:48.880
Anything needed to support it.

00:03:48.980 --> 00:03:53.400
The application is in that bundle,
that one directory.

00:03:53.400 --> 00:03:55.840
Now, in the Unix world,
you might stuff some of

00:03:55.840 --> 00:03:57.380
these things in user share.

00:03:57.380 --> 00:04:00.020
You might stick some of
the libraries in user lib.

00:04:00.020 --> 00:04:02.710
They're all scattered
throughout the system.

00:04:02.710 --> 00:04:06.490
We like bundles because it brings
them all together in one directory.

00:04:06.500 --> 00:04:09.220
The users can move around
and add to their system and

00:04:09.220 --> 00:04:11.010
delete at their discretion.

00:04:11.020 --> 00:04:15.430
Finally,
we have two variants of the bundles,

00:04:15.430 --> 00:04:17.480
given our history.

00:04:17.480 --> 00:04:18.660
We have the traditional bundle.

00:04:19.060 --> 00:04:28.790
We have the name of your application,
foo.app/foo.

00:04:28.930 --> 00:04:30.000
That's how we'd identify it as a bundle.

00:04:30.000 --> 00:04:37.740
Now, in the Mac OS X timeframe,
we invented the notion of a CFBundle,

00:04:37.740 --> 00:04:37.740
which is the name of your bundle slash,
you know, the name of your application.

00:04:37.900 --> 00:04:44.600
[Transcript missing]

00:04:45.210 --> 00:04:48.230
Now, again, I'd want to drill down that
we're talking about the basic

00:04:48.280 --> 00:04:50.000
system part of the system.

00:04:50.000 --> 00:04:53.350
We're talking about that layer right
in there that you see around lib

00:04:53.350 --> 00:04:59.430
system and the top part of the kernel,
meaning system calls, things like libc.

00:04:59.800 --> 00:05:03.820
and some of the other various
libraries like libm and whatnot

00:05:03.900 --> 00:05:06.030
that you're already familiar with.

00:05:06.240 --> 00:05:08.670
The things that make us
unique on our platform is not

00:05:08.670 --> 00:05:12.100
only do we have libraries,
we have these notions of frameworks.

00:05:12.230 --> 00:05:16.170
Frameworks are really just libraries,
but they live in a bundle and they live

00:05:16.200 --> 00:05:18.090
in a different location than user lib.

00:05:18.100 --> 00:05:23.310
We'll talk about more later
where they live on the system.

00:05:24.050 --> 00:05:26.540
Now,
if you want to get third-party software,

00:05:26.540 --> 00:05:30.320
there is various options
available to you.

00:05:30.320 --> 00:05:32.800
We have the Fink project.

00:05:32.800 --> 00:05:33.710
I don't know if you've heard of it.

00:05:33.920 --> 00:05:36.890
But if you're porting, let's say,
an existing open source project,

00:05:36.890 --> 00:05:39.710
let's say you grab Screen and
you're trying to run it on 10,

00:05:39.710 --> 00:05:42.510
well, someone may have already
done that work for you.

00:05:42.540 --> 00:05:46.020
If you check with Fink or Darwin Ports,
you'll probably find that the

00:05:46.020 --> 00:05:49.310
project you're trying to port is
already ported to the platform,

00:05:49.320 --> 00:05:50.690
saving you lots of work.

00:05:50.740 --> 00:05:55.670
Also, as far as packaging is concerned,
our own product, we have Mac OS X,

00:05:55.670 --> 00:05:59.300
our client distribution,
and we have Mac OS X Server for

00:05:59.300 --> 00:06:01.190
our server customers.

00:06:01.200 --> 00:06:06.180
The server product is mostly value-add
based around our file server technology

00:06:06.190 --> 00:06:11.200
and additional components to make the
server experience more pleasurable.

00:06:11.200 --> 00:06:12.330
They are.

00:06:12.640 --> 00:06:15.430
Not only based on our
GUI to control applications,

00:06:15.430 --> 00:06:18.880
but things like additions to
the web server environment like

00:06:18.880 --> 00:06:20.920
blogging software or whatnot.

00:06:20.920 --> 00:06:25.430
Finally, we also have Darwin,
which is Apple's proof that we are

00:06:25.750 --> 00:06:30.780
committed to open source by releasing
the foundation of the operating system

00:06:30.780 --> 00:06:36.600
in a fully bootable fashion that you can
run on your Apple box should you desire.

00:06:38.370 --> 00:06:40.740
Now, you're coming from a different Unix.

00:06:40.740 --> 00:06:43.740
You do a PS and you see some
interesting daemons floating around.

00:06:43.740 --> 00:06:46.770
I want to talk about at least a few of
them so you can understand some of them

00:06:46.890 --> 00:06:50.360
that we have on our platform and why
we have them and why they're important.

00:06:50.360 --> 00:06:52.440
Let's start with NotifyD.

00:06:52.490 --> 00:06:57.220
NotifyD is a way that daemons
can send messages to each other

00:06:57.220 --> 00:07:03.000
and not necessarily agree on the
technology used to send the message.

00:07:03.000 --> 00:07:08.310
For example,
our networking team has put together

00:07:08.310 --> 00:07:15.220
a daemon that actually controls
how interfaces come up or manage,

00:07:15.220 --> 00:07:16.300
set up.

00:07:16.570 --> 00:07:19.300
Well, some daemons want to find out
when the networking changes,

00:07:19.300 --> 00:07:22.430
but they really don't need to know
the finer details of how or why.

00:07:22.440 --> 00:07:26.330
So what happens is we send a
Mach message over to NotifyD saying

00:07:26.330 --> 00:07:28.080
the network's changed.

00:07:28.080 --> 00:07:32.230
And NotifyD then sends, let's say,
a signal over to one daemon.

00:07:32.400 --> 00:07:34.960
Or they might send a message over
a file descriptor to another.

00:07:34.960 --> 00:07:37.870
A lot of our daemons already
on the system actually use the

00:07:37.870 --> 00:07:41.440
signal method to get restarted
when network change events occur.

00:07:41.440 --> 00:07:44.080
They request that a HUP signal
gets sent to them and,

00:07:44.080 --> 00:07:47.010
ta-da, anytime the network changes,
they get HUPed.

00:07:48.540 --> 00:07:52.360
is the developer of
the new UI application.

00:07:52.360 --> 00:07:59.310
He is responsible for configuring and
controlling various pieces of hardware,

00:07:59.500 --> 00:08:03.310
but mostly centered around networking.

00:08:03.620 --> 00:08:07.500
is the head of the
network policy department.

00:08:07.500 --> 00:08:10.500
It's where our DHCP client lives.

00:08:10.500 --> 00:08:16.800
It's where some of our other networking
policy decision making happens.

00:08:16.800 --> 00:08:21.820
It's very critical of the system
and I would recommend that if

00:08:21.920 --> 00:08:24.100
you want to learn more about it,
you can look at our system

00:08:24.100 --> 00:08:24.100
configuration framework which are the
external APIs for talking to configd.

00:08:24.230 --> 00:08:26.970
Also, if you look,
you might see something

00:08:27.040 --> 00:08:28.460
called the MDNS responder.

00:08:28.460 --> 00:08:30.680
That's also known as rendezvous.

00:08:30.710 --> 00:08:31.960
This is what implements it.

00:08:32.040 --> 00:08:35.400
Some things talk to it to
either browse the network or

00:08:35.400 --> 00:08:37.560
to send out advertisements.

00:08:37.580 --> 00:08:39.700
And that's its sole function in life.

00:08:39.790 --> 00:08:41.860
Finally, Lookupd.

00:08:41.890 --> 00:08:47.110
Lookupd is equivalent to NSCD if you're
coming from a Linux or Solaris box.

00:08:47.210 --> 00:08:50.880
It's our name service caching daemon.

00:08:51.110 --> 00:08:55.620
It caches DNS lookups,
it caches name lookups, group lookups,

00:08:55.900 --> 00:08:59.980
anything you can pretty much
think of that's being looked up,

00:09:00.040 --> 00:09:01.290
it caches them.

00:09:01.290 --> 00:09:04.750
It also implements get at or info,
for example,

00:09:04.890 --> 00:09:07.890
and does the advanced queries for that.

00:09:08.570 --> 00:09:10.240
Now, let's talk about standards.

00:09:10.290 --> 00:09:12.300
Standards.

00:09:12.450 --> 00:09:17.140
Our policy, you know,
is that we like standards.

00:09:17.140 --> 00:09:21.540
We want to comply to them,
but we're not making a serious effort

00:09:21.540 --> 00:09:24.550
to go out and test all the standards.

00:09:24.690 --> 00:09:27.910
But, but, but, but,
if you find a bug that is where

00:09:27.910 --> 00:09:32.080
we do not conform to a standard,
please, please let us know.

00:09:32.080 --> 00:09:35.390
We will try our best to fix it,
because we do believe that

00:09:35.390 --> 00:09:39.420
standards are best for all involved,
us and you as a developer.

00:09:39.420 --> 00:09:42.740
Now, for example,
we do know about some bugs that we

00:09:42.740 --> 00:09:47.010
haven't gotten around to fixing,
and one that might affect you when

00:09:47.130 --> 00:09:51.850
you're porting an application is that
we don't set error no in Mathlib.

00:09:51.860 --> 00:09:54.540
It's unfortunate, but true,
and it's something you can't do.

00:09:54.560 --> 00:09:56.490
you'll have to work around.

00:09:57.760 --> 00:10:01.130
Now, let's talk about some other
interesting details we have.

00:10:01.190 --> 00:10:04.840
We have a different linker than you
might find on a Solaris or Linux box.

00:10:04.840 --> 00:10:10.530
We have MachO as our file format
and DYLD as our dynamic linker.

00:10:10.540 --> 00:10:16.470
Linux box might use ELF as a file
format and LD.SO as its dynamic linker.

00:10:16.480 --> 00:10:18.480
What does this mean?

00:10:18.480 --> 00:10:20.240
Well, some behavioral differences.

00:10:20.310 --> 00:10:22.160
For example, versioning.

00:10:22.190 --> 00:10:26.030
On our platform,
what might be considered the major

00:10:26.030 --> 00:10:29.500
number in the Linux or Solaris
world is the path on our system.

00:10:29.500 --> 00:10:32.700
If you do an O tool dash
L against an executable,

00:10:32.700 --> 00:10:36.280
you'll see the full path
to a library on the system.

00:10:36.330 --> 00:10:39.820
If you want to do a binary
incompatible change,

00:10:39.820 --> 00:10:41.340
change the name.

00:10:41.880 --> 00:10:47.470
This is a big difference
because that means that if you

00:10:47.470 --> 00:10:49.910
redirect through a symlink,
you'll get a performance hit,

00:10:49.910 --> 00:10:52.320
unlike the Linux world,
which has an LD cache,

00:10:52.320 --> 00:10:55.870
which caches the symlink translations.

00:10:56.610 --> 00:10:58.970
Also, we have bundles versus libraries.

00:10:59.010 --> 00:11:02.420
In the Linux and Solaris world,
there is no difference between

00:11:02.420 --> 00:11:04.370
a plugin and a library.

00:11:04.370 --> 00:11:08.380
It's just whether you link to it at
link time or you load it at run time.

00:11:08.380 --> 00:11:10.310
It can be the same file.

00:11:10.330 --> 00:11:12.640
On our platform, that's not true.

00:11:12.640 --> 00:11:18.890
You have to specifically compile a plugin
as a plugin to load it in that manner.

00:11:19.880 --> 00:11:21.450
Now, what does that mean?

00:11:21.450 --> 00:11:23.560
You need to use the dash bundle flag.

00:11:23.620 --> 00:11:25.850
Also,
if you want to make your life easier

00:11:25.850 --> 00:11:29.990
as a developer of a plugin or a bundle,
depending on how you want to call it,

00:11:29.990 --> 00:11:32.560
you can use the dash bundle loader flag.

00:11:32.600 --> 00:11:36.400
What that does is specify the
actual executable which is

00:11:36.400 --> 00:11:38.340
meant to load your plugin.

00:11:38.340 --> 00:11:42.610
So that way it can resolve symbols
and make sure that your plugin

00:11:42.610 --> 00:11:47.420
is fully resolved at link time
rather than just letting it slide.

00:11:47.420 --> 00:11:49.830
Some symbols are undefined
and we hope that it works out.

00:11:49.880 --> 00:11:51.530
runtime.

00:11:51.750 --> 00:11:55.800
Also, a unique difference that we
have is the two-level namespace.

00:11:55.880 --> 00:11:59.440
We invented this technology
to help us deal with binary

00:11:59.440 --> 00:12:02.100
compatibility going forward.

00:12:02.250 --> 00:12:06.600
What it means is that a library,
let's call it library foo,

00:12:06.740 --> 00:12:09.500
might use malloc from our lib system.

00:12:09.600 --> 00:12:13.800
Now, let's say you include a
malloc in your product,

00:12:13.800 --> 00:12:15.660
in your application.

00:12:15.880 --> 00:12:19.880
Well, only your code is actually
going to end up using it.

00:12:20.140 --> 00:12:24.350
and the other two speakers will
be talking about the Malik symbol.

00:12:24.470 --> 00:12:28.830
There is a direct reference from
that library to the Malik symbol.

00:12:28.830 --> 00:12:30.730
It is in a global namespace.

00:12:30.730 --> 00:12:34.700
You can, if you need the semantics
that if you define a Malik,

00:12:34.700 --> 00:12:38.220
it will be overridden everywhere
in your address space,

00:12:38.370 --> 00:12:42.520
you can say dash force underscore
flat underscore namespace.

00:12:42.520 --> 00:12:47.070
This will tell the dynamic linker to
collapse things down and make sure

00:12:47.070 --> 00:12:47.290
that symbols are the same everywhere.

00:12:48.000 --> 00:12:52.160
Also, a very interesting thing about our
platform is that we're far more

00:12:52.160 --> 00:12:55.460
dynamic when it comes to dynamic
symbol resolution at runtime.

00:12:55.460 --> 00:12:59.420
What this means,
let's describe a classic bug,

00:12:59.540 --> 00:13:03.190
is that Sendmail, for example,
had a signal handler.

00:13:03.380 --> 00:13:08.470
The signal handler wasn't resolved
fully in the sense that the functions

00:13:08.680 --> 00:13:11.310
it called hadn't been resolved yet.

00:13:11.330 --> 00:13:14.880
Now, Sendmail's running along,
calls a function which triggers the

00:13:14.880 --> 00:13:18.340
dynamic linker to start resolving it,
and then the signal fires.

00:13:18.380 --> 00:13:21.950
Well, we're already in the dynamic
linker trying to resolve a signal,

00:13:21.950 --> 00:13:24.740
and what happens is now the
signal handler's running,

00:13:24.740 --> 00:13:27.260
and it reaches a symbol
that needs to be resolved,

00:13:27.260 --> 00:13:31.100
and now we've got two instances where
we're trying to be in the dynamic linker

00:13:31.100 --> 00:13:33.070
at the same time on the same thread.

00:13:33.380 --> 00:13:34.290
And you deadlock.

00:13:34.330 --> 00:13:37.280
This is a neat difference.

00:13:37.280 --> 00:13:39.820
We're far more dynamic,
but it can be problems

00:13:39.900 --> 00:13:41.350
if you're porting code.

00:13:41.350 --> 00:13:45.300
What I recommend is you just do dash
bind underscore at underscore load,

00:13:45.600 --> 00:13:49.320
and that'll tell the dynamic linker
to make sure that all your symbols

00:13:49.320 --> 00:13:51.430
are resolved before you hit main.

00:13:53.380 --> 00:13:55.580
Now,
when it comes to forward and backwards

00:13:55.660 --> 00:13:58.500
compatibility on our platform,
we have something that

00:13:58.750 --> 00:14:00.110
will make your life easier.

00:14:00.110 --> 00:14:02.800
We have something called
Mac OS 9 weak symbols.

00:14:02.800 --> 00:14:05.040
What it means is that
you can say if symbol,

00:14:05.040 --> 00:14:05.820
call symbol.

00:14:05.970 --> 00:14:08.140
So there might be a
function you want to use,

00:14:08.140 --> 00:14:10.630
but it's not available
on a previous release.

00:14:10.630 --> 00:14:11.430
That's okay.

00:14:11.430 --> 00:14:12.420
Just test for it.

00:14:12.420 --> 00:14:14.200
And if it's there, you can use it.

00:14:14.260 --> 00:14:15.770
And if it's not, you can't.

00:14:15.820 --> 00:14:18.490
It's a very powerful tool
for dealing with forwards

00:14:18.490 --> 00:14:20.760
and backwards compatibility.

00:14:23.790 --> 00:14:26.090
So, the first thing we're going to
talk about is static linking.

00:14:26.140 --> 00:14:28.350
Static linking is a very common
problem in the Mac OS X platform.

00:14:28.350 --> 00:14:30.290
Static linking of standard
libraries is impossible.

00:14:30.290 --> 00:14:31.030
We don't ship them.

00:14:31.030 --> 00:14:31.360
Sorry.

00:14:31.360 --> 00:14:33.270
It's just something that we
find is best for our needs,

00:14:33.270 --> 00:14:36.290
is supporting you, and, yeah,
it's best for all involved, we believe.

00:14:37.790 --> 00:14:39.870
Now, I'm not done talking
about the linker yet.

00:14:39.880 --> 00:14:43.420
There are some other interesting
behaviors that are worth talking about.

00:14:43.420 --> 00:14:46.960
Symbols in an object file
must be overridden together.

00:14:46.960 --> 00:14:52.520
In the Elf, Linux, Solaris world,
you can, for example,

00:14:52.520 --> 00:14:54.870
override malloc and not override free.

00:14:54.880 --> 00:14:58.010
Now,
that's okay if you never called free,

00:14:58.180 --> 00:15:00.980
but if you actually do call free,
you're going to get a

00:15:00.980 --> 00:15:01.870
different implementation.

00:15:01.880 --> 00:15:04.410
Their backing stores might
not even be the same.

00:15:05.210 --> 00:15:09.380
One can imagine that horrible problems
will start to ensue when you do that.

00:15:09.440 --> 00:15:12.700
Well, on our platform,
the way we solve that is we put

00:15:12.700 --> 00:15:16.760
malloc and free and realloc and
the other associated functions

00:15:16.760 --> 00:15:19.790
all in the same .c file,
which get compiled down

00:15:19.850 --> 00:15:21.960
to the same .o file,
obviously.

00:15:21.960 --> 00:15:26.380
And the rule that our dynamic
linker enforces is that if you

00:15:26.380 --> 00:15:31.290
override one symbol in a .o file,
you can't use any of the others there.

00:15:31.340 --> 00:15:32.670
You have to override them, too.

00:15:33.800 --> 00:15:35.800
Now, that might not affect you.

00:15:35.800 --> 00:15:37.960
You might not be overriding
symbols all that much,

00:15:37.960 --> 00:15:41.540
but it can potentially affect
you if you put unrelated pieces

00:15:41.570 --> 00:15:43.520
of code in the same .o file.

00:15:43.520 --> 00:15:45.290
It's something to watch out for.

00:15:46.730 --> 00:15:50.420
Also, on our platform,
common symbols are problematic.

00:15:50.420 --> 00:15:53.100
I just recommend that
you do -f no common.

00:15:53.640 --> 00:15:57.200
Try and make sure that you're
just not using common symbols.

00:15:57.200 --> 00:16:00.420
They're just a bad
idea in general anyway.

00:16:01.290 --> 00:16:03.000
has a couple more things to talk about.

00:16:03.000 --> 00:16:05.950
Bundle unloading is
currently unimplemented.

00:16:06.060 --> 00:16:08.700
Sorry, you can't unload a plug-in,
basically.

00:16:08.700 --> 00:16:11.860
It will still reside
in your address space.

00:16:11.860 --> 00:16:17.190
Another interesting issue to be aware of
is that if you're using C++ in a bundle,

00:16:17.200 --> 00:16:24.110
our static initializers are
not being called at the moment.

00:16:24.110 --> 00:16:24.110
Again, it's an issue to worry
about when porting code.

00:16:24.610 --> 00:16:28.480
Now, if we can move outside of an
actual address space and just

00:16:28.480 --> 00:16:32.080
talk about general runtime issues,
we store configuration and

00:16:32.080 --> 00:16:36.710
resource files not necessarily
in the same place on Mac OS X.

00:16:36.710 --> 00:16:38.250
We store them in some
different locations.

00:16:38.820 --> 00:16:41.830
We have Open Directory,
which is our great multiplexing,

00:16:41.830 --> 00:16:45.780
demultiplexing engine for getting
preferences from different places.

00:16:45.780 --> 00:16:49.460
And we'd recommend that you use those
APIs if you want to be a good citizen

00:16:49.460 --> 00:16:53.350
on our platform to find out about your
various configuration parameters or

00:16:53.350 --> 00:16:55.920
general system configuration parameters.

00:16:55.920 --> 00:17:01.230
Also, instead of having a lot of dot
files in your home directory

00:17:01.710 --> 00:17:07.440
using different parsers and
just different altogether code,

00:17:07.440 --> 00:17:08.400
we have CodeForce.

00:17:08.820 --> 00:17:09.650
We have a lot of other things
that we can do for you that

00:17:09.650 --> 00:17:10.170
can make your life easier.

00:17:10.180 --> 00:17:13.610
It's called the CF or
NS Preferences APIs,

00:17:13.610 --> 00:17:17.820
and they put them in tilde
slash library slash preferences,

00:17:17.820 --> 00:17:21.510
and it'll save you a lot of work of
dealing with how to save preferences

00:17:21.510 --> 00:17:24.140
and restore them on our platform.

00:17:26.370 --> 00:17:30.300
Now, when it comes to system startup,
we have some differences compared to

00:17:30.300 --> 00:17:32.660
a Linux or FreeBSD or Solara system.

00:17:32.660 --> 00:17:36.160
On those kinds of platforms,
everything essentially

00:17:36.160 --> 00:17:38.260
calls out from etcrc,
and you'll just have shell

00:17:38.260 --> 00:17:40.480
scripts calling shell scripts
calling shell scripts.

00:17:40.480 --> 00:17:45.710
And what will happen is that when it
comes to what order to run things in,

00:17:45.710 --> 00:17:48.700
the Unix world is pretty static still.

00:17:48.700 --> 00:17:52.190
All they do really to accomplish
proper initialization is just

00:17:52.190 --> 00:17:55.830
make sure the shell startup
scripts are named in serial order.

00:17:55.840 --> 00:17:59.360
So you might have one foo, two bar,
three baz.

00:17:59.360 --> 00:18:05.070
Eh, that's, you know,
pretty not very dynamic.

00:18:05.070 --> 00:18:07.030
And we've done some
things to improve that.

00:18:07.050 --> 00:18:09.500
We created startup items.

00:18:09.500 --> 00:18:10.870
Again, they're bundles.

00:18:10.870 --> 00:18:12.020
We've talked about these before.

00:18:12.020 --> 00:18:14.460
They're stored in the system
library startup items.

00:18:14.460 --> 00:18:18.270
Each one of those bundles
contains a little blob of

00:18:18.270 --> 00:18:20.900
data specifying dependencies.

00:18:20.900 --> 00:18:25.780
This means we can dynamically start
up the system and boot things.

00:18:25.780 --> 00:18:26.610
When they're ready.

00:18:26.720 --> 00:18:31.880
In fact, we even boot some startup items
up in parallel since they don't

00:18:31.960 --> 00:18:34.520
have dependencies on each other.

00:18:35.100 --> 00:18:38.780
is going to be talking
about booting up the system.

00:18:38.780 --> 00:18:40.660
The boot up is changing.

00:18:40.670 --> 00:18:45.650
Unfortunately, the session that talked
about that was yesterday,

00:18:45.830 --> 00:18:47.150
session 106.

00:18:47.400 --> 00:18:51.090
It's being replaced by
something called LaunchD.

00:18:51.090 --> 00:18:54.090
One can think of it as
I Net D on steroids.

00:18:54.090 --> 00:18:59.120
It's going to be able to support any
daemon on the system and make sure that

00:18:59.120 --> 00:18:59.120
it gets launched on demand when any
configuration detail of it changes.

00:19:00.560 --> 00:19:01.820
Some more runtime issues.

00:19:01.820 --> 00:19:04.820
In fact, I just talked about pre-binding
with one of the Xcode people

00:19:04.820 --> 00:19:05.820
right before this session.

00:19:05.820 --> 00:19:08.660
So a lot of this slide
doesn't really matter anymore.

00:19:08.660 --> 00:19:12.890
Pre-binding,
but for the purpose of this session,

00:19:12.900 --> 00:19:14.930
I'll still talk about it.

00:19:14.980 --> 00:19:15.540
Pre-binding.

00:19:15.540 --> 00:19:19.060
It was a method we have
to increase performance of

00:19:19.060 --> 00:19:21.430
runtime of your application.

00:19:21.920 --> 00:19:25.960
What we did is, since we know of all the
libraries on the system,

00:19:25.960 --> 00:19:30.340
we can pre-calculate where they
will load in your address space.

00:19:30.340 --> 00:19:33.440
Once we do that,
we know where all the symbols are,

00:19:33.440 --> 00:19:37.740
and we can then record in your
executable the linking information.

00:19:37.740 --> 00:19:39.310
Let's say, again, use malloc.

00:19:39.370 --> 00:19:42.140
Well, we know that's going to
be 9 kabillion something,

00:19:42.150 --> 00:19:44.360
and we can record that
in your executable.

00:19:44.360 --> 00:19:46.540
That way, when we load,
we check that the state of

00:19:46.540 --> 00:19:48.510
the world hasn't changed,
and if it hasn't,

00:19:48.510 --> 00:19:51.880
we just let your application go
because we've already pre-linked you.

00:19:51.920 --> 00:19:53.290
percent.

00:19:53.350 --> 00:19:56.120
Unfortunately,
what this means is we've modified

00:19:56.170 --> 00:19:59.080
executables and libraries all the time.

00:19:59.080 --> 00:20:01.920
Whenever a library changes,
we go modify everything

00:20:01.920 --> 00:20:03.980
and reprebind everything.

00:20:04.300 --> 00:20:06.410
That's a problem for some people.

00:20:06.480 --> 00:20:11.160
It means that backup and security
tools get false positive for changes.

00:20:11.260 --> 00:20:15.290
Things like tripwire to do intrusion
detection don't work because,

00:20:15.290 --> 00:20:18.210
again,
they're false positives for changes.

00:20:18.700 --> 00:20:19.760
How is this all changing?

00:20:19.940 --> 00:20:25.050
Well, we've written a much, much,
much faster dynamic linker in Tiger,

00:20:25.130 --> 00:20:28.880
so much so that we believe that
you as developers no longer

00:20:28.880 --> 00:20:30.940
need to worry about pre-binding.

00:20:30.940 --> 00:20:33.890
I'm hoping that will
make a lot of you happy.

00:20:38.000 --> 00:20:42.060
Now, this is more of an issue if you're
thinking of a 10.0 or 10.1 box,

00:20:42.060 --> 00:20:45.010
but our bin SH changed.

00:20:45.070 --> 00:20:45.920
It used to be Zish.

00:20:45.920 --> 00:20:49.420
Zish was almost POSIX compliant,
but not quite.

00:20:49.420 --> 00:20:50.730
We switched to Bash.

00:20:50.730 --> 00:20:53.210
We think Bash at the time
happened to be faster,

00:20:53.210 --> 00:20:56.440
too, which was a nice perk,
but that's not true anymore.

00:20:56.440 --> 00:21:00.180
But Bash is POSIX compliant,
and we like that.

00:21:00.210 --> 00:21:05.100
But if you were using some Zish-isms,
you might need to accommodate the change.

00:21:05.680 --> 00:21:08.110
If you're obviously writing
a portable shell script,

00:21:08.200 --> 00:21:10.430
hopefully none of this
should matter to you.

00:21:12.380 --> 00:21:13.330
Frameworks.

00:21:13.590 --> 00:21:15.270
Frameworks is something
I touched on earlier.

00:21:15.290 --> 00:21:21.260
It's a bundle-based alternative to the
hierarchy of libraries and resources.

00:21:21.350 --> 00:21:24.530
It contains the library and
headers but it could contain

00:21:24.560 --> 00:21:26.300
other shared resources too.

00:21:26.300 --> 00:21:31.280
Let's say your library is a GUI library
and it has pictures and sound.

00:21:31.300 --> 00:21:32.300
It can be in your framework.

00:21:32.300 --> 00:21:47.620
When it comes to actual compilation,
though, there is a difference.

00:21:47.620 --> 00:21:47.620
You don't say -l foo to
link against the framework.

00:21:47.620 --> 00:21:47.620
You say -framework foo.

00:21:47.620 --> 00:21:47.620
That tells the compiler to look
in a different location for it.

00:21:49.730 --> 00:21:55.160
On the topic of file system portability,
POSIX file systems are typically case

00:21:55.160 --> 00:21:58.990
sensitive and they support sparse files,
although that's not

00:21:59.000 --> 00:22:01.030
necessarily universal.

00:22:01.150 --> 00:22:03.840
Our native default
application that we have,

00:22:03.860 --> 00:22:09.520
default file system for Mac OS X is
HFS+. It's case insensitive,

00:22:09.520 --> 00:22:10.720
case preserving.

00:22:10.830 --> 00:22:13.760
That means that you can
have big foo or little foo,

00:22:13.760 --> 00:22:16.360
but you can't have both at the same time.

00:22:16.470 --> 00:22:20.600
We also support resource forks and
the API for changing the file system.

00:22:20.600 --> 00:22:22.840
We have a lot of tools that
are not in the same format,

00:22:22.840 --> 00:22:27.190
used to be out of the way and Unix
applications wouldn't know about it,

00:22:27.190 --> 00:22:31.600
which created issues for backup tools or
anybody copying files using Unix tools.

00:22:31.600 --> 00:22:36.780
This has changed in the Tiger timeframe
because resources are now going to expose

00:22:36.780 --> 00:22:40.300
as extended attributes and any Unix tool
that is aware of extended attributes

00:22:40.480 --> 00:22:43.600
can deal with resource forks correctly.

00:22:43.600 --> 00:22:46.670
But it is something to be aware
of considering that extended

00:22:46.670 --> 00:22:48.090
attributes are now coming into

00:22:48.460 --> 00:22:52.060
Finally, hard links are not supported
by all file systems.

00:22:52.190 --> 00:22:54.990
It's something that your
application might need or use,

00:22:55.110 --> 00:23:00.710
but you need to be aware that while
supported by HFS+, some of the

00:23:00.710 --> 00:23:04.310
other file systems we have on the
system don't necessarily support it,

00:23:04.310 --> 00:23:06.950
like the WebDAV file system.

00:23:08.950 --> 00:23:12.090
Now, something that is, again,
unique to our platform when

00:23:12.090 --> 00:23:15.620
it comes to the file system
hierarchy is the way we do scoping.

00:23:15.620 --> 00:23:17.980
We have four primary
scopes on the system.

00:23:17.980 --> 00:23:20.690
We have the system scope,
essentially software that's

00:23:20.690 --> 00:23:23.870
shipped by us that you shouldn't
ever need to touch or manage.

00:23:23.880 --> 00:23:25.690
We have the network scope.

00:23:25.820 --> 00:23:29.500
It's where a network administrator
might put anything they want

00:23:29.500 --> 00:23:31.200
to show up on all machines.

00:23:31.200 --> 00:23:35.050
We have the local scope,
anything on the local machine.

00:23:35.060 --> 00:23:38.230
And finally, the user scope,
something in the user's home directory.

00:23:38.900 --> 00:23:40.540
How does this affect anything?

00:23:40.540 --> 00:23:42.780
Well, you remember how we
talked about frameworks?

00:23:42.780 --> 00:23:44.800
They can live in all
four of these scopes.

00:23:44.800 --> 00:23:47.220
You have system library frameworks.

00:23:47.280 --> 00:23:50.720
We have library frameworks,
which is the local case.

00:23:50.720 --> 00:23:53.560
We have network library
frameworks for the network case.

00:23:53.560 --> 00:23:56.640
And you can, as far as I know,
put frameworks even in

00:23:56.640 --> 00:23:59.100
the user's home directory,
should you desire.

00:23:59.100 --> 00:24:02.460
Again,
tilde slash library slash frameworks.

00:24:04.330 --> 00:24:07.020
When you're developing, let's say,
a framework or really any

00:24:07.020 --> 00:24:09.480
application that wants to
put files on our file system,

00:24:09.480 --> 00:24:13.100
we would recommend that you try
and conform to our file system

00:24:13.100 --> 00:24:15.240
hierarchy for where to place files.

00:24:18.900 --> 00:24:22.240
On the topic of authentication
and authorization,

00:24:22.240 --> 00:24:24.340
we have the security framework.

00:24:24.340 --> 00:24:27.080
It's our preferred API for doing things.

00:24:27.080 --> 00:24:32.800
It has a lot of support for advanced
technologies like smart cards and

00:24:32.800 --> 00:24:36.760
other interesting authentication
mechanisms like fingerprint readers,

00:24:36.760 --> 00:24:37.540
you name it.

00:24:37.610 --> 00:24:40.240
They're trying to support a
lot of the advanced things

00:24:40.250 --> 00:24:41.990
that many organizations want.

00:24:42.800 --> 00:24:45.140
It's also a capability
and rights-based system.

00:24:45.140 --> 00:24:47.980
I won't go into the details of that,
but it is important to keep

00:24:47.990 --> 00:24:51.040
in mind if you need to do
authentication and authorization.

00:24:51.040 --> 00:24:55.130
And finally,
while we do have the security framework,

00:24:55.130 --> 00:24:59.950
we do have PAM available if you
need a compatibility solution.

00:24:59.950 --> 00:25:03.080
Either you have a PAM plugin
or you're using the PAM APIs.

00:25:03.080 --> 00:25:07.690
We make sure that the authentication
and authorization can route correctly if

00:25:07.790 --> 00:25:10.200
you need any kind of PAM compatibility.

00:25:12.910 --> 00:25:16.960
Our development environment is a
lot of familiar things and some

00:25:16.960 --> 00:25:18.370
different stuff at the same time.

00:25:18.380 --> 00:25:20.560
It's mostly a GNU toolchain.

00:25:20.560 --> 00:25:24.630
It's GCC and GDB and Make,
things you're familiar with.

00:25:24.720 --> 00:25:29.370
But we do have some differences
that are good to be aware of.

00:25:29.460 --> 00:25:32.770
For example, we have the C preprocessor.

00:25:32.780 --> 00:25:36.790
We've modified it to
support precompiled headers.

00:25:36.840 --> 00:25:41.810
You might see these in user include
when you maybe say an ls star dot p.

00:25:42.260 --> 00:25:43.940
You'll see some
precompiled headers there.

00:25:43.940 --> 00:25:47.110
It helps us when compiling large
applications that are including

00:25:47.110 --> 00:25:50.140
lots and lots of headers,
so we don't have to regenerate

00:25:50.140 --> 00:25:52.520
all the C preprocessor paths.

00:25:52.520 --> 00:25:59.240
Unfortunately, the C preprocessor doesn't
support all of the GNU extensions

00:25:59.240 --> 00:26:03.650
to their C preprocessor,
which some of you might have consciously

00:26:03.860 --> 00:26:06.180
or subconsciously started using.

00:26:06.180 --> 00:26:07.940
How do you work around this?

00:26:08.270 --> 00:26:11.340
Well, it's dash no dash cpp dash precomp.

00:26:12.100 --> 00:26:14.870
That'll get you your old GNU linker back.

00:26:15.260 --> 00:26:16.640
Now, Xcode, obviously.

00:26:16.640 --> 00:26:18.630
There's been many,
many sessions about it this week.

00:26:18.690 --> 00:26:20.350
We highly recommend that you use it.

00:26:20.400 --> 00:26:24.190
In the case of debugging,
it has a very powerful visual

00:26:24.190 --> 00:26:28.150
debugger that we would highly
recommend that you use.

00:26:28.150 --> 00:26:32.290
And you don't necessarily need to
go to a lot of effort to port your

00:26:32.340 --> 00:26:35.250
application's build system into Xcode.

00:26:35.250 --> 00:26:37.440
Xcode supports legacy targets.

00:26:37.470 --> 00:26:40.110
You can just say, look,
there's a makefile over there.

00:26:40.420 --> 00:26:41.580
Just go build against it.

00:26:41.590 --> 00:26:43.900
And you can keep your
legacy build system,

00:26:43.900 --> 00:26:45.080
which is probably desirable.

00:26:45.100 --> 00:26:46.970
It's not desirable to you if you
still want to maintain portability.

00:26:46.970 --> 00:26:50.170
But you can take full advantage of
everything that Xcode has to offer

00:26:50.170 --> 00:26:53.650
with code searching and debugging
and lots of yummy things like that.

00:26:54.850 --> 00:26:59.200
Finally, some of you have some very,
very, very big apps out there.

00:26:59.200 --> 00:27:04.160
So much so that you run into a nice,
interesting architectural

00:27:04.160 --> 00:27:06.840
anomaly on our platform.

00:27:06.840 --> 00:27:09.390
It just requires some
different code generation.

00:27:09.400 --> 00:27:13.440
If you need more than
16 megabytes of text,

00:27:13.440 --> 00:27:18.120
you need to use dash M long call on
the compilation line to make sure that

00:27:18.120 --> 00:27:19.440
your code gets generated correctly.

00:27:19.440 --> 00:27:20.860
Otherwise, it will fail to link.

00:27:22.260 --> 00:27:24.950
Again, it's just something to be aware
of if you have a large executable.

00:27:27.790 --> 00:27:31.780
If we talk about APIs now,
we're not completely

00:27:31.780 --> 00:27:32.720
like other platforms.

00:27:32.760 --> 00:27:34.750
We have some things you
need to be aware of.

00:27:34.880 --> 00:27:37.860
If you're using Poll,
it happens to be emulated on

00:27:37.860 --> 00:27:41.710
our platform and we highly
recommend you use KQ instead.

00:27:42.610 --> 00:27:45.240
If you can't, though,
at least it's still there.

00:27:45.240 --> 00:27:47.640
But at the moment,
it's emulated via select.

00:27:47.640 --> 00:27:49.800
So if you're familiar
with those two APIs,

00:27:49.810 --> 00:27:52.900
you might be able to imagine the
scaling problems we have with

00:27:52.900 --> 00:27:54.810
that current emulation technique.

00:27:54.840 --> 00:27:57.730
But if you don't need a large
number of file descriptors,

00:27:57.730 --> 00:28:00.680
it's okay to use our poll
emulation at the moment.

00:28:01.830 --> 00:28:05.080
Also, DL Open for loading plugins, again,
it's emulated.

00:28:05.080 --> 00:28:06.430
Does this affect you?

00:28:06.430 --> 00:28:10.860
Well, again, as we talked about,
unloading plugins is not supported.

00:28:10.860 --> 00:28:15.820
And if you're taking advantage of the
RTLD Next functionality of DL Open,

00:28:15.820 --> 00:28:18.450
we don't support that at the moment.

00:28:18.450 --> 00:28:20.230
That's something to be aware of.

00:28:20.300 --> 00:28:23.400
Other issues we have that you
should be aware of is that

00:28:23.410 --> 00:28:25.760
Pthreads is partially implemented.

00:28:25.760 --> 00:28:28.150
It gets better and
better with each release,

00:28:28.150 --> 00:28:31.520
but you need to be careful when
you look for functionality.

00:28:31.520 --> 00:28:36.720
The biggest thing to be aware of
with Pthreads is we don't necessarily

00:28:36.820 --> 00:28:41.210
support inter-process sharing of locks,
for example.

00:28:41.460 --> 00:28:43.460
Something to be aware of.

00:28:44.070 --> 00:28:46.360
Also, POSIX message queues are missing.

00:28:46.360 --> 00:28:48.800
If you really,
really need that kind of functionality,

00:28:48.800 --> 00:28:54.000
our current story is that we recommend
that you use maybe Mach ports.

00:28:54.000 --> 00:28:57.880
But we hope that you can
find a different API.

00:28:59.010 --> 00:29:01.950
Also,
when it comes to System 5 shared memory,

00:29:01.950 --> 00:29:05.310
we support it,
but it's very weak at the moment.

00:29:05.310 --> 00:29:11.170
If you look in our boot up in /etc/rc,
you'll see that we statically

00:29:11.170 --> 00:29:13.320
set the variables for that.

00:29:13.320 --> 00:29:16.650
And once those System 5 shared
memory variables are set,

00:29:16.650 --> 00:29:19.170
they can't change for
the life of the boot.

00:29:19.210 --> 00:29:23.160
So if you need those changed,
you need to be aware of that.

00:29:23.650 --> 00:29:28.250
Finally, well, not finally,
while we do have OpenSSL on the platform,

00:29:28.250 --> 00:29:30.700
we would recommend that you use CDSA.

00:29:30.720 --> 00:29:34.020
OpenSSL has some architectural
limitations when it deals with,

00:29:34.140 --> 00:29:36.120
for example, smart cards.

00:29:36.130 --> 00:29:39.420
OpenSSL will hand the
key around directly,

00:29:39.450 --> 00:29:43.500
whereas CDSA supports having the
key being represented as a handle,

00:29:43.540 --> 00:29:45.920
which could be connected up to a
smart card somewhere else where

00:29:45.920 --> 00:29:49.260
you don't actually even have
a physical access to the key.

00:29:50.330 --> 00:29:56.500
A unique language on our platform,
a language opportunity, is Objective-C.

00:29:56.500 --> 00:29:59.450
Some of our frameworks
are implemented in it,

00:29:59.620 --> 00:30:01.110
and you might need to use it.

00:30:01.220 --> 00:30:02.730
I actually recommend it.

00:30:02.840 --> 00:30:03.820
It's kind of fun to use.

00:30:03.820 --> 00:30:06.320
It looks like small talk,
and it'll probably only take

00:30:06.320 --> 00:30:09.120
you less than a day to learn,
so I wouldn't be scared of it.

00:30:09.180 --> 00:30:10.980
And you might enjoy it.

00:30:12.610 --> 00:30:15.450
Finally, LibTool versus GNU LibTool.

00:30:15.460 --> 00:30:18.680
It's unfortunate,
but these things happen.

00:30:18.680 --> 00:30:20.270
We have a name conflict.

00:30:20.300 --> 00:30:23.060
If you run LibTool on our platform,
you'll get a tool that we wrote many,

00:30:23.060 --> 00:30:25.230
many,
many years ago at Next called LibTool

00:30:25.320 --> 00:30:28.380
for dealing with library generation.

00:30:28.420 --> 00:30:29.930
Has nothing to do with the GNU LibTool.

00:30:30.140 --> 00:30:32.780
They're not even really
functionally overlapping,

00:30:32.780 --> 00:30:35.180
but it's just a conflict in names.

00:30:35.220 --> 00:30:37.840
And that means on our platform,
you need to call,

00:30:37.850 --> 00:30:41.870
if you need to use GNU LibTool,
you call it glib tool.

00:30:44.490 --> 00:30:48.290
Now the last thing we're going
to talk about today is Mach.

00:30:48.380 --> 00:30:50.650
Our story is if you need to.

00:30:50.670 --> 00:30:53.590
We don't want you using
Mach if you don't need to.

00:30:53.630 --> 00:30:55.940
Mach has APIs, for example,
for allocating memory

00:30:55.940 --> 00:30:57.160
in your address space.

00:30:57.160 --> 00:30:59.590
VM allocate and VM deallocate.

00:30:59.690 --> 00:31:02.240
We'd rather you not have used those APIs.

00:31:02.240 --> 00:31:08.330
We have perfectly fine
POSIX APIs for doing that.

00:31:08.330 --> 00:31:08.330
It's MMAP, for example.

00:31:08.550 --> 00:31:10.160
But sometimes you do need to use it.

00:31:10.180 --> 00:31:12.840
If you need advanced control
of your process priority,

00:31:12.840 --> 00:31:15.690
that's the currently best
mechanism for doing that.

00:31:15.720 --> 00:31:22.340
Also, if your process ends up using
libraries that use Mach,

00:31:22.420 --> 00:31:24.720
you need to be aware of
the bootstrap namespaces.

00:31:24.720 --> 00:31:27.120
It's a mockism.

00:31:27.120 --> 00:31:29.580
I really don't want to
go into it at the moment.

00:31:29.580 --> 00:31:34.690
What it means is that different
processes in your login session have

00:31:34.710 --> 00:31:38.960
a different context mock-wise than,
let's say, a system daemon.

00:31:38.960 --> 00:31:43.860
So if you need to talk to another daemon,
this might cause problems for you.

00:31:43.860 --> 00:31:47.980
Finally,
when it comes to traditional Unix

00:31:47.980 --> 00:31:51.100
APIs that are non-standardized,
ptrace is only partially

00:31:51.200 --> 00:31:52.800
implemented on our platform.

00:31:52.800 --> 00:31:55.240
We only implement it
enough to do an attach.

00:31:55.240 --> 00:31:58.540
After that, GDB on our platform,
for example,

00:31:58.580 --> 00:32:01.940
uses the Mach APIs for getting
and setting and controlling

00:32:01.940 --> 00:32:03.960
the process it's introspecting.

00:32:04.540 --> 00:32:06.660
I doubt very many of
you are using ptrace,

00:32:06.660 --> 00:32:09.390
so that probably isn't something
you need to worry about.

00:32:10.900 --> 00:32:17.380
Who do you want to talk to after this
session is over and after you leave WWDC?

00:32:17.380 --> 00:32:22.240
You want to contact Jason Yao,
our Track Manager.

00:32:22.470 --> 00:32:26.960
He should hopefully be able to direct
your inquiries to the right people

00:32:26.960 --> 00:32:29.610
around Apple if you have any questions.

00:32:30.040 --> 00:32:33.150
Also, we do have some documentation
offline if you need it.

00:32:33.160 --> 00:32:36.440
There's our porting Unix slash
Linux applications to Mac OS X.

00:32:36.440 --> 00:32:39.950
There's the, this tells you where it is.

00:32:39.950 --> 00:32:43.430
We also have the porting drivers
to Mac OS X if you're coming

00:32:43.430 --> 00:32:45.180
from a different platform.

00:32:45.180 --> 00:32:48.860
And again, this is the locations
for those pieces of data.