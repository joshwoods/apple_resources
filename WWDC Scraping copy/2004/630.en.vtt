WEBVTT

00:00:12.540 --> 00:00:13.300
Good morning.

00:00:13.300 --> 00:00:15.830
My name is Gordon Shukwit,
and I'm here to introduce

00:00:15.860 --> 00:00:17.950
to you Richard Glazer from
the University of Utah and

00:00:18.000 --> 00:00:20.170
Philip Rinehart from Yale University.

00:00:21.140 --> 00:00:24.620
So the first thing we want to
announce was that the Mac OS X labs

00:00:24.620 --> 00:00:28.530
project is now moving to becoming
Mac OS X Enterprise Project,

00:00:28.540 --> 00:00:30.240
and you'll find it at macenterprise.org.

00:00:30.280 --> 00:00:34.420
What you're going to see is that
there's an increased work that's going

00:00:34.420 --> 00:00:38.550
to be going on where they're changing
from just primarily looking at lab

00:00:38.850 --> 00:00:42.530
deployments to looking at how you
deploy Macs completely in the whole lab.

00:00:42.540 --> 00:00:45.800
And they'll be looking for
some additional participation

00:00:45.860 --> 00:00:48.020
outside of just higher education.

00:00:48.520 --> 00:00:50.990
So with that,
let me turn it over to Richard,

00:00:50.990 --> 00:00:52.470
and we'll go from there.

00:00:52.920 --> 00:00:52.940
Okay.

00:00:52.940 --> 00:00:57.740
Today, what you'll learn are we're
going to cover some basics

00:00:57.740 --> 00:01:00.420
on application distribution.

00:01:02.500 --> 00:01:04.850
Next, we're going to cover
things you should know,

00:01:04.900 --> 00:01:09.500
commonly overlooked issues
that admins should know about.

00:01:09.880 --> 00:01:13.040
Next, we're going to cover how
to track an application,

00:01:13.040 --> 00:01:16.800
what does an installer application
really do to your file system.

00:01:16.800 --> 00:01:20.670
Next,
we're going to cover finding solutions,

00:01:20.670 --> 00:01:23.680
how to make the application
work in an environment.

00:01:24.090 --> 00:01:27.540
And lastly, we're going to cover
distributing the application,

00:01:27.540 --> 00:01:30.270
what tools and solutions are available.

00:01:32.280 --> 00:01:34.200
So why is this important?

00:01:34.200 --> 00:01:36.440
That's probably the most
important question that you

00:01:36.440 --> 00:01:38.040
should probably ask yourself.

00:01:38.130 --> 00:01:42.310
First thing is security,
so you can find and fix security issues.

00:01:42.380 --> 00:01:43.660
The next thing is flexibility.

00:01:43.720 --> 00:01:47.120
It allows an administrator to easily add,
remove, upgrade,

00:01:47.120 --> 00:01:49.780
or downgrade applications.

00:01:50.330 --> 00:01:52.790
It also allows for speed,
so it means that you don't have to

00:01:52.790 --> 00:01:56.570
spend your time developing new systems,
and you can quickly distribute

00:01:56.570 --> 00:01:59.200
application fixes and their updates.

00:01:59.320 --> 00:02:02.240
It also allows for granularity,
because I can control that

00:02:02.240 --> 00:02:05.750
distribution on a per-machine,
per-user, or group,

00:02:05.780 --> 00:02:08.200
or for the entire enterprise.

00:02:08.370 --> 00:02:12.900
And lastly, it allows me to log complex
installs with abstract names.

00:02:12.910 --> 00:02:16.480
It allows me to control the setup
details and the customizations to

00:02:16.480 --> 00:02:18.800
distribute the application properly.

00:02:19.740 --> 00:02:22.000
So let's talk a little bit
about the deployment lifecycle.

00:02:22.010 --> 00:02:24.490
It's what we all deal with every day.

00:02:24.570 --> 00:02:26.370
The first thing that we do when
we get a new machine in the

00:02:26.390 --> 00:02:28.190
door is we assess the needs.

00:02:28.400 --> 00:02:29.700
What does this Mac need to do?

00:02:29.940 --> 00:02:32.940
What application load
set does it need to have?

00:02:33.020 --> 00:02:35.610
The next logical step is the creation,
building,

00:02:35.620 --> 00:02:39.690
and testing of that load set that
you're going to apply to the machine.

00:02:39.790 --> 00:02:42.110
So you have to figure out,
what am I going to put and

00:02:42.160 --> 00:02:43.630
where am I going to put it?

00:02:43.900 --> 00:02:47.820
The next step is actually deploying
the application load set and deploying

00:02:47.820 --> 00:02:50.190
it in your enterprise environment.

00:02:50.420 --> 00:02:53.290
And the next and last step
is to patch and update it,

00:02:53.300 --> 00:02:57.500
basically to address security
needs or application needs.

00:02:57.500 --> 00:03:01.370
And then the process begins again with
the assessment of needs as new machines

00:03:01.370 --> 00:03:03.400
come in or as machines are retired.

00:03:03.400 --> 00:03:08.290
So let's talk about some of
the factors in management.

00:03:10.620 --> 00:03:13.400
First thing,
and probably the most important thing,

00:03:13.400 --> 00:03:13.860
is security.

00:03:13.860 --> 00:03:16.680
By doing this,
it allows us to find and fix

00:03:16.680 --> 00:03:18.170
potential security issues.

00:03:18.170 --> 00:03:21.870
It means that more and more,
most of us have an

00:03:21.870 --> 00:03:24.310
enterprise security policy,
which we need to meet,

00:03:24.310 --> 00:03:27.760
and I can meet that policy by
controlling my application distribution.

00:03:27.760 --> 00:03:30.580
It also minimizes the
impact on the network.

00:03:30.580 --> 00:03:34.530
I don't have to worry about my
machine affecting other machines,

00:03:34.540 --> 00:03:37.960
and it minimizes the risk of
my machine being compromised

00:03:37.960 --> 00:03:40.160
by a hacker or some other user.

00:03:41.890 --> 00:03:44.980
Also, it gives a uniform
experience for all end users.

00:03:44.980 --> 00:03:47.290
This is titled security,
but it actually isn't security.

00:03:47.300 --> 00:03:49.820
It should be consistency.

00:03:49.820 --> 00:03:53.380
It means that I can give a uniform
experience for all end users so that

00:03:53.380 --> 00:03:57.180
when a user sits down to their machine,
they know where things are and they

00:03:57.180 --> 00:03:59.230
have certain expectations that are met.

00:03:59.260 --> 00:04:01.730
It also means that things
break consistently and

00:04:01.730 --> 00:04:05.100
can be fixed consistently,
and that's equally important because

00:04:05.100 --> 00:04:08.100
it means if a user calls me up
and says something has broken,

00:04:08.100 --> 00:04:09.790
I know where to begin to look.

00:04:10.370 --> 00:04:13.600
and it makes the troubleshooting
of applications simpler.

00:04:14.020 --> 00:04:15.960
The next thing,
and this is probably one of

00:04:15.960 --> 00:04:19.000
the best benefits of this,
is it gives me efficiency.

00:04:19.000 --> 00:04:21.220
It means my time,
I can use tools to control

00:04:21.230 --> 00:04:24.420
and manage that distribution,
I can reduce my time spent

00:04:24.420 --> 00:04:27.650
developing a new system,
and I can minimize the

00:04:27.720 --> 00:04:33.000
downtime of my systems,
so essentially they're up 24 by 7.

00:04:33.820 --> 00:04:35.900
And the last thing,
and probably the thing that will make

00:04:35.900 --> 00:04:39.200
your enterprise managers the most happy,
is cost.

00:04:39.300 --> 00:04:41.620
It reduces the time you spend managing.

00:04:41.730 --> 00:04:43.690
It means I can use open
source and free tools.

00:04:43.700 --> 00:04:46.700
There are many open source and
free tools used to manage systems.

00:04:46.700 --> 00:04:49.610
I can also leverage
existing technologies,

00:04:49.660 --> 00:04:52.690
and I can deploy in
minutes instead of hours.

00:04:53.480 --> 00:04:57.780
So let's go back to the Create, Build,
and Test phase, the deployment lifecycle.

00:04:57.880 --> 00:05:01.780
So what we're really
going to focus on today is

00:05:02.210 --> 00:05:04.180
Create, Build, and Test.

00:05:04.200 --> 00:05:07.500
What we're going to talk about is what
you should look for when you're deploying

00:05:07.500 --> 00:05:10.130
applications in your environment.

00:05:14.270 --> 00:05:15.400
Things you should know.

00:05:15.400 --> 00:05:17.890
This will be a basic guide to
what you need to worry about

00:05:17.960 --> 00:05:20.910
for distributing an application.

00:05:21.550 --> 00:05:26.500
This flowchart gives you a
basic flowchart of the process.

00:05:26.500 --> 00:05:27.750
The first thing is kind of obvious.

00:05:27.870 --> 00:05:30.070
You install the software.

00:05:30.440 --> 00:05:33.690
Next thing, you set the application,
enter any serial numbers,

00:05:33.740 --> 00:05:36.300
do any default installation.

00:05:36.300 --> 00:05:40.730
Third, you customize the application
depending on your environment.

00:05:40.980 --> 00:05:45.500
Fourth, you track and debug what you've
installed and what you've customized,

00:05:45.500 --> 00:05:48.570
and then make modifications to get
the application to work properly

00:05:48.570 --> 00:05:50.100
based on your customizations.

00:05:50.100 --> 00:05:53.520
And then lastly,
you distribute and also debug,

00:05:53.520 --> 00:05:57.210
because certain distribution
tools might cause certain

00:05:57.210 --> 00:05:58.280
issues with some applications.

00:05:58.280 --> 00:05:59.880
You might have to make
some modifications.

00:06:02.030 --> 00:06:06.040
Next on the cover,
you shouldn't always entrust installers.

00:06:06.040 --> 00:06:09.420
The first issue is sometimes installers
will install insecure permissions.

00:06:09.440 --> 00:06:15.020
Sometimes installers will not install
the installer correctly or properly.

00:06:15.020 --> 00:06:17.610
And also sometimes installers
will install binaries

00:06:17.700 --> 00:06:19.140
with elevated privileges.

00:06:19.700 --> 00:06:23.460
The next issue that arises
sometimes is sometimes installers

00:06:23.490 --> 00:06:26.030
require administrative privileges.

00:06:26.030 --> 00:06:28.520
A lot of times this isn't
necessary for installs.

00:06:28.590 --> 00:06:33.820
Also overuse of the admin credentials
can make it cause people to be careless

00:06:33.820 --> 00:06:38.070
in just automatically entering those in,
and that can become a security risk.

00:06:38.100 --> 00:06:41.350
Lastly,
if you require admin for installers,

00:06:41.420 --> 00:06:46.140
it also could stop non-admin users
from installing the software.

00:06:48.230 --> 00:06:51.470
The next thing that's another issue
with installers is sometimes they

00:06:51.470 --> 00:06:53.560
install in non-standard locations.

00:06:53.560 --> 00:06:57.220
So, for example,
the root of the file system, USRBIN.

00:06:57.220 --> 00:07:01.350
Also, installers sometimes will
modify critical files.

00:07:01.360 --> 00:07:05.040
So, for example,
sometimes installers to make certain

00:07:05.040 --> 00:07:09.580
binaries or application launch on
login will modify the user's login

00:07:09.580 --> 00:07:14.310
window .plist or the host-based library
preferences login window .plist.

00:07:14.800 --> 00:07:18.500
This can cause a burden for the
IT to manage because you either have

00:07:18.500 --> 00:07:22.380
to manage multiple login .plists
or cause problems based on which

00:07:22.380 --> 00:07:26.260
user logs in might not have the
application experience they need.

00:07:29.300 --> 00:07:33.600
Next, I'm going to cover some topics
on insecure permissions.

00:07:33.600 --> 00:07:37.140
The first one we're concerned
about are world or group writable.

00:07:37.140 --> 00:07:39.750
This is an issue because this
can cause security problems.

00:07:39.760 --> 00:07:42.100
Sometimes an application
will require these for the

00:07:42.100 --> 00:07:43.600
application to run properly.

00:07:43.600 --> 00:07:46.280
The next are special modes.

00:07:46.280 --> 00:07:48.300
You have SUID or SETID.

00:07:48.300 --> 00:07:53.290
This can cause problems because the
application or the binary an application

00:07:53.290 --> 00:07:56.660
uses will run with the privileges
of the owner of that application.

00:07:56.880 --> 00:07:59.140
This, if the application is
not properly set up,

00:07:59.240 --> 00:08:02.730
could allow another user
to compromise your system.

00:08:02.740 --> 00:08:07.260
Also, the last, SET Group ID,
you also have similar issues

00:08:07.260 --> 00:08:09.430
where it basically runs with
the privileges of that group.

00:08:11.400 --> 00:08:16.340
So here's a basic example of
the issue with SUID application.

00:08:16.340 --> 00:08:20.410
So you have an SUID application,
and then the next screen,

00:08:20.510 --> 00:08:21.660
it's owned by root.

00:08:21.660 --> 00:08:27.140
Any user comes in, Joe Blow,
is a non-admin, launches the application.

00:08:27.140 --> 00:08:30.810
Basically, that binary application
runs with root privileges,

00:08:30.810 --> 00:08:33.690
and if the application
does something improperly,

00:08:33.690 --> 00:08:37.770
it could be used to either delete
files or compromise the file system.

00:08:37.780 --> 00:08:40.140
This is a real big concern to enterprise.

00:08:42.410 --> 00:08:46.160
Next, I'm going to cover the process
of doing some simple tracking.

00:08:46.160 --> 00:08:49.330
The first option is readmes.

00:08:49.340 --> 00:08:51.160
You see if the installer
package has a readme.

00:08:51.160 --> 00:08:53.640
Rarely, in my experience,
does that give you any

00:08:53.640 --> 00:08:56.430
detailed information,
but it's your first option.

00:08:56.440 --> 00:09:00.160
Next, after you've done the installation,
you could always look at the log file

00:09:00.320 --> 00:09:03.720
and see exactly what it's installed
and see if it gives you any details.

00:09:04.570 --> 00:09:08.040
Third, you have multiple options
with package installers.

00:09:08.040 --> 00:09:11.660
The first I'm going to cover
is Apple's installer utility.

00:09:11.660 --> 00:09:15.650
The second I'm going to cover is
a GUI application called Pacifist,

00:09:15.650 --> 00:09:17.420
which is a package utility.

00:09:17.420 --> 00:09:19.540
The third one I'm going
to cover is LSBOM,

00:09:19.580 --> 00:09:23.740
which is a command line utility that
allows you to view package installers.

00:09:23.740 --> 00:09:27.360
And again, note,
these only work with .pkg installers.

00:09:29.160 --> 00:09:31.960
So here's an example of
using Apple's installer.

00:09:32.040 --> 00:09:34.100
So basically you launch
Apple's installer utility,

00:09:34.100 --> 00:09:38.070
launch the installer,
then what you have to do is go step

00:09:38.260 --> 00:09:40.550
through until you select the destination.

00:09:40.670 --> 00:09:44.170
Then what you'll see is under the file
menu you have a show files option.

00:09:44.260 --> 00:09:47.150
This will basically show you
all the files the installer

00:09:47.150 --> 00:09:49.370
will install before you install.

00:09:49.470 --> 00:09:51.940
Again,
this doesn't give you a lot of detailed

00:09:51.940 --> 00:09:55.780
information you really should have,
but it's a good first start.

00:09:56.030 --> 00:10:00.670
Another option with the Apple's installer
utility is the show logs option.

00:10:00.700 --> 00:10:05.100
The show log option is good because
you can actually watch scripts process.

00:10:05.100 --> 00:10:06.990
A lot of times installers
either have pre,

00:10:07.100 --> 00:10:09.750
post scripts that do certain things,
and you can actually watch

00:10:09.820 --> 00:10:10.870
actions they are doing.

00:10:10.880 --> 00:10:13.530
Again, this doesn't give you
all the details you need,

00:10:13.660 --> 00:10:14.720
but it's a next step.

00:10:16.680 --> 00:10:21.940
Next I'm going to cover Pacifis,
which is a GUI package installer utility.

00:10:21.940 --> 00:10:26.800
If you see from the screen here,
Pacifis gives you a list of all the file

00:10:26.800 --> 00:10:30.190
system items installers can install,
but also gives you some

00:10:30.190 --> 00:10:32.340
detailed information it's
really important to have.

00:10:32.500 --> 00:10:35.340
For example, you have permissions,
and you also have attributes

00:10:35.370 --> 00:10:36.440
like owner and group.

00:10:36.510 --> 00:10:38.510
Also, Pacifis is really useful.

00:10:38.510 --> 00:10:41.470
You can verify, take an install,
and verify what's

00:10:41.470 --> 00:10:43.230
installed on your system.

00:10:43.230 --> 00:10:44.460
It supports checksumming.

00:10:45.040 --> 00:10:48.960
Another item that we do a lot
is if you need to custom install

00:10:48.960 --> 00:10:53.220
an installer or a piece of an
installer in a certain location,

00:10:53.220 --> 00:10:56.220
you can use Pacifis to force it
to install to a custom location.

00:10:56.220 --> 00:11:00.530
Also, Pacifis is good to detect if
something's been deleted on your

00:11:00.530 --> 00:11:03.380
machine that you need from an installer.

00:11:05.340 --> 00:11:07.840
Next, there's LSBOM,
which is a command line utility that

00:11:07.840 --> 00:11:10.000
allows you to view package installers.

00:11:10.000 --> 00:11:13.940
So this first section here at the top,
basically what you want to do

00:11:13.950 --> 00:11:16.670
usually on package installers,
you want to go into

00:11:16.850 --> 00:11:18.320
content slash resources.

00:11:18.320 --> 00:11:22.870
And, for example, you could do an LS and
look for the .BOM files.

00:11:22.880 --> 00:11:25.350
And here in this example,
I'm showing iTunes.

00:11:25.360 --> 00:11:26.990
So that's the file you want to find.

00:11:27.000 --> 00:11:30.710
Then the next thing you want to do
is list the bill of materials or

00:11:30.770 --> 00:11:35.020
the BOM materials to show all the
contents the installers can install.

00:11:35.020 --> 00:11:40.200
So you basically run this command,
the BOM, LSBOM, minus P, M-U-G-T, S-F-C,

00:11:40.200 --> 00:11:42.920
and then the BOM file you want to use.

00:11:42.920 --> 00:11:45.820
And it'll basically give
you a list of permissions,

00:11:45.820 --> 00:11:47.620
attributes, and et cetera.

00:11:50.560 --> 00:11:53.260
Next, there's some options for
drag-and-drop installers.

00:11:53.260 --> 00:11:56.710
So basically use the ls or list command.

00:11:56.730 --> 00:12:01.540
So here, for example,
I have a drag-and-drop installer, Fugu,

00:12:01.570 --> 00:12:04.460
which is a SFTP, SCP application.

00:12:04.460 --> 00:12:05.300
I download it.

00:12:05.420 --> 00:12:08.000
It launches a disk image,
and then I just drag the

00:12:08.000 --> 00:12:11.410
application package to wherever
I want in the file system.

00:12:11.420 --> 00:12:14.030
But if I want to see
what permissions has,

00:12:14.030 --> 00:12:18.920
I basically run the command below, ls,
and I use the parameters l, a, t, r,

00:12:18.920 --> 00:12:21.760
and then it'll give me
a list of permissions,

00:12:21.760 --> 00:12:23.330
attributes, etc.

00:12:24.700 --> 00:12:27.710
Next, we're going to have Philip is
going to do a demo of some

00:12:27.720 --> 00:12:28.690
of the items I talked about.

00:12:28.760 --> 00:12:31.230
Could we switch to demo two?

00:12:31.240 --> 00:12:32.100
- Demo one.

00:12:32.240 --> 00:12:34.390
- Or it's demo one, sorry.

00:12:34.930 --> 00:12:39.250
So basically I'm going to take our,
one of our favorite apps, iTunes,

00:12:39.290 --> 00:12:41.600
and going to show you how we
can do some of the simple things

00:12:41.600 --> 00:12:44.610
with Installer and how we can,
some of the things that

00:12:44.610 --> 00:12:45.540
Richard just explained.

00:12:45.540 --> 00:12:49.490
So I pre-launched this so you can kind
of see some of the things that happen.

00:12:49.500 --> 00:12:52.990
So when you launch Installer,
there's an option in

00:12:53.000 --> 00:12:56.540
the file menu that says,
right now it's hide log,

00:12:56.540 --> 00:12:59.230
but if I go to the file
menu and I say show log,

00:12:59.230 --> 00:13:00.610
it brings up a log.

00:13:00.620 --> 00:13:04.320
And if you notice, I've actually got
information here already,

00:13:04.320 --> 00:13:06.990
and it's basically,
what this has done is run,

00:13:06.990 --> 00:13:11.490
it's called the pre-flight script,
and you can see the results of that.

00:13:11.520 --> 00:13:14.280
So watch how it happens
now when I hit continue.

00:13:14.280 --> 00:13:17.730
It's actually going to do,
as it runs the scripts,

00:13:17.780 --> 00:13:20.480
it will actually do, fill that log.

00:13:20.520 --> 00:13:21.710
And there you go.

00:13:21.720 --> 00:13:23.340
You see that it says show everything.

00:13:23.340 --> 00:13:26.620
I typically want to see everything
that happens because it's going to

00:13:26.620 --> 00:13:28.540
talk about everything that it does.

00:13:30.270 --> 00:13:33.730
Now, Richard said that show files
only begins to appear after

00:13:33.730 --> 00:13:34.960
you've selected a destination.

00:13:34.960 --> 00:13:36.880
So in this case, I've selected original.

00:13:36.880 --> 00:13:41.480
And then all I have to do is go to
the file windows and say show files.

00:13:41.480 --> 00:13:46.520
And notice that this deals with not
only packages but also meta packages,

00:13:46.520 --> 00:13:51.870
and I can basically show you all
the files that are installed.

00:13:51.880 --> 00:13:53.980
So that's a useful first start.

00:13:54.020 --> 00:13:58.920
But what it doesn't do is it
actually misses the checksum.

00:13:59.080 --> 00:14:00.260
It misses the permissions.

00:14:00.260 --> 00:14:02.360
It misses a lot of things
that can be useful.

00:14:02.360 --> 00:14:06.610
So I'm going to show you the other
tool that is the next logical

00:14:06.610 --> 00:14:09.100
step after you use installer,
which is Pacifist.

00:14:09.100 --> 00:14:13.470
And Pacifist looks at packages or
meta package files and basically

00:14:13.470 --> 00:14:15.500
provides you a lot more information.

00:14:15.500 --> 00:14:21.500
So notice here that I've
brought out the package,

00:14:21.500 --> 00:14:26.880
and the contents of the iTunes 4
package shows me a ton of information.

00:14:26.880 --> 00:14:28.590
I get to see the size of it.

00:14:29.080 --> 00:14:29.980
I know the owner of it.

00:14:30.090 --> 00:14:30.970
I know the group of it.

00:14:31.000 --> 00:14:32.910
And notice that I see the permissions.

00:14:32.920 --> 00:14:35.420
I also see the original
modification date.

00:14:35.520 --> 00:14:39.420
So this allows me to take this
and view all of the things

00:14:39.420 --> 00:14:40.560
that might be important to me.

00:14:40.580 --> 00:14:43.510
And this little button right here,
extract to,

00:14:43.570 --> 00:14:46.480
is also really useful because,
as Richard said,

00:14:46.480 --> 00:14:49.890
if I want to install it in a location
other than the default location

00:14:49.890 --> 00:14:53.450
that installer might put it in,
I don't have to depend on that anymore.

00:14:53.500 --> 00:14:56.700
I can now extract it to any
place across the file system that

00:14:56.770 --> 00:14:58.380
I have permissions to extract to.

00:14:59.070 --> 00:15:02.230
And the other thing is notice that
it also has the authorization dialog.

00:15:02.290 --> 00:15:05.350
So in case you would want to
put it in some place that you

00:15:05.360 --> 00:15:09.070
may not normally have access to,
you can do that.

00:15:09.930 --> 00:15:14.780
Now, what I'm going to do is,
Pacifist is a great GUI tool.

00:15:14.890 --> 00:15:17.410
You could do the same thing.

00:15:17.590 --> 00:15:19.470
With command line.

00:15:19.470 --> 00:15:22.540
And here's the example of the
command that Richard listed,

00:15:22.600 --> 00:15:24.560
listbomb-p.

00:15:24.560 --> 00:15:27.320
And you'll notice when I do this,
I get a ton of information.

00:15:27.320 --> 00:15:30.920
A little bit hard to read right now
because of the way the line wraps happen,

00:15:30.920 --> 00:15:33.800
but essentially it gives me all
the same sort of information

00:15:33.800 --> 00:15:35.480
that I just saw in Pacifist.

00:15:35.480 --> 00:15:38.260
So if you're more comfortable
with the command line,

00:15:38.260 --> 00:15:39.510
it's one way to do it.

00:15:40.950 --> 00:15:43.980
Now, the other thing is for
drag and drop installers.

00:15:43.980 --> 00:15:51.010
I'll get it right once.

00:15:56.300 --> 00:15:59.140
So, I listed a lot there.

00:15:59.140 --> 00:16:03.100
But, as you can see,
when I do list-LAT capital R,

00:16:03.100 --> 00:16:06.710
what I do now is it actually gives
me all the permissions information

00:16:06.710 --> 00:16:10.080
for a drag-and-drop installer,
gives me the group, everything else.

00:16:10.080 --> 00:16:12.670
The one thing it doesn't do is a
checksum because there's really no

00:16:12.670 --> 00:16:14.440
way that lists can support checksums.

00:16:14.680 --> 00:16:17.270
So, it gives me an insight to
what the application actually

00:16:17.270 --> 00:16:20.120
might be doing because a lot
of drag-and-drop installers,

00:16:20.120 --> 00:16:24.290
because of the ignore ownership
flag that is set often,

00:16:24.290 --> 00:16:28.480
when a developer drags that over
and creates it when you first open,

00:16:28.480 --> 00:16:31.880
it's going to come down to your file
system with it being completely open

00:16:31.880 --> 00:16:34.070
and having world-right permissions set.

00:16:34.100 --> 00:16:36.800
So, it's just a good idea to check
it before you drag-and-drop it

00:16:36.800 --> 00:16:39.040
or when you drag-and-drop it,
then you can check it.

00:16:39.140 --> 00:16:40.640
So, back to Richard.

00:16:40.640 --> 00:16:41.700
Yep.

00:16:41.700 --> 00:16:42.240
Thanks, Philip.

00:16:42.240 --> 00:16:44.170
Back to slides.

00:16:48.910 --> 00:16:52.060
Next I'm going to cover things
you might not know but we think

00:16:52.060 --> 00:16:54.270
are important to know about.

00:16:55.710 --> 00:16:58.560
Here's a list of some
commonly overlooked issues.

00:16:58.560 --> 00:17:02.200
The first issue that we've
run into are broken links,

00:17:02.200 --> 00:17:04.380
symlinks, or aliases with applications.

00:17:04.380 --> 00:17:07.860
Applications that do not follow
the preference hierarchy.

00:17:07.860 --> 00:17:11.180
By host preferences,
which are host-specific

00:17:11.180 --> 00:17:13.520
file naming and preferences.

00:17:13.520 --> 00:17:15.100
Hard-coded pass.

00:17:15.100 --> 00:17:19.640
Directory location limitations,
either restricting you to either

00:17:19.640 --> 00:17:23.700
the root of the file system,
root of applications, etc.

00:17:24.190 --> 00:17:27.210
file or finder attributes.

00:17:27.960 --> 00:17:29.000
Broken links.

00:17:29.000 --> 00:17:34.360
The first thing you have are sometimes
applications will depend on symlinks,

00:17:34.420 --> 00:17:37.030
and sometimes they'll use absolute pass.

00:17:37.030 --> 00:17:41.510
This will cause issues if the admin
or user moves a folder or renames

00:17:41.520 --> 00:17:46.120
a folder or moves the parent folder
or renames the parent folder.

00:17:47.480 --> 00:17:48.390
Aliases.

00:17:48.480 --> 00:17:53.580
Prior to Mac OS X2,
aliases resolved based on unique ID.

00:17:53.580 --> 00:17:57.340
And X2 and higher,
they use the path name similar

00:17:57.340 --> 00:18:00.980
to symlinks and then use
the unique identity second.

00:18:00.980 --> 00:18:03.810
Again,
problems arise when either the user or

00:18:03.810 --> 00:18:08.600
admin renames the application folder
or moves it to a different location.

00:18:08.600 --> 00:18:13.460
Then the issue where the unique
identity will not resolve is when

00:18:13.460 --> 00:18:16.430
you use a cloning software like ASR.

00:18:17.270 --> 00:18:17.930
Preference hierarchy.

00:18:18.040 --> 00:18:24.150
This is an OS system where applications
can depend on the OS to resolve

00:18:24.150 --> 00:18:26.560
separate scopes to find preferences.

00:18:26.560 --> 00:18:32.310
An issue sometimes happens when an
application requires a specific location

00:18:32.310 --> 00:18:35.320
or restricts to a specific location.

00:18:35.320 --> 00:18:37.630
You have options for separate scopes.

00:18:37.700 --> 00:18:40.530
The first scope you have, user space,
where you can install the

00:18:40.530 --> 00:18:44.560
preferences and users slash username
slash library slash preferences.

00:18:45.000 --> 00:18:47.840
This restricts the preferences
just to that specific user.

00:18:47.840 --> 00:18:51.530
Next, you have host-based scopes,
which could be stored

00:18:51.530 --> 00:18:53.840
in library preferences,
and this is limited to users

00:18:53.840 --> 00:18:55.310
of that particular machine.

00:18:55.320 --> 00:18:58.100
Next, you have network scopes,
which are stored in network

00:18:58.100 --> 00:18:59.320
library preferences.

00:19:00.930 --> 00:19:04.600
So here's an example of a quote-unquote
flexible app and a problematic app.

00:19:04.620 --> 00:19:08.160
The first app uses the
OS's preference hierarchy.

00:19:08.160 --> 00:19:12.720
So the admin or user
can basically install,

00:19:12.720 --> 00:19:14.400
based on their needs
and their environment,

00:19:14.400 --> 00:19:16.670
it can install the preferences
in separate scopes.

00:19:16.770 --> 00:19:19.400
So if the admin wants to
install in the user scope,

00:19:19.400 --> 00:19:21.820
they can do that,
and the application will work properly.

00:19:21.820 --> 00:19:26.240
Else, if the admin wants to instead say
they have limited disk space and

00:19:26.240 --> 00:19:28.790
don't want to duplicate preferences,
if there's a lot of preferences,

00:19:28.850 --> 00:19:30.530
could put it in the host-based scope.

00:19:30.900 --> 00:19:35.080
And then an example of a problematic app,
app basically requires you

00:19:35.080 --> 00:19:36.970
to use the user space scope.

00:19:37.020 --> 00:19:39.270
This might cause some
problems if you have,

00:19:39.270 --> 00:19:43.400
for example, an application that has a
lot of user-specific files,

00:19:43.400 --> 00:19:46.900
and it's not easy for them to
move it to host or network-based.

00:19:50.000 --> 00:19:53.600
So following on Richard's talk
about the preferences hierarchy,

00:19:53.600 --> 00:19:56.850
the other thing that we need to talk
about when we talk about preferences,

00:19:56.850 --> 00:19:57.790
by-host preferences.

00:19:57.800 --> 00:20:03.940
Now, by-host preferences are a unique
case because they use a particular

00:20:03.940 --> 00:20:06.800
machine-specific hierarchy.

00:20:06.890 --> 00:20:13.340
The Prefs file contains the
Mac address of the machine or

00:20:13.340 --> 00:20:16.360
the host name of the machine.

00:20:16.360 --> 00:20:20.160
The preferences are typically
stored in the user scope at

00:20:20.310 --> 00:20:24.570
~library_preferences_by_host
or in the global directory of

00:20:24.590 --> 00:20:26.920
library preferences by host.

00:20:26.920 --> 00:20:29.490
So as an example,
in our test Mac machine,

00:20:29.490 --> 00:20:32.120
I've set up my machine
that I want to deploy.

00:20:32.180 --> 00:20:35.600
I set it up exactly like I want,
but in the by_host folder,

00:20:35.700 --> 00:20:40.760
it has the setup Mac's host name or
the setup Mac's hardware address.

00:20:40.760 --> 00:20:43.120
So what happens when I now deploy this?

00:20:43.120 --> 00:20:46.100
When I deploy it and
I put it on my cloned Mac,

00:20:46.100 --> 00:20:49.430
now the setup Mac host name
is different and the setup

00:20:49.710 --> 00:20:51.960
hardware address is different,
and so no longer are those

00:20:51.960 --> 00:20:53.550
preferences actually preserved.

00:20:56.090 --> 00:20:58.560
So let's move to something
different that we talked about,

00:20:58.560 --> 00:20:59.540
hard-coded paths.

00:20:59.660 --> 00:21:03.140
Often hard-code paths tie
an application to a default

00:21:03.180 --> 00:21:04.820
location with a default name.

00:21:04.840 --> 00:21:08.880
And some apps actually expect
the default install pathway.

00:21:08.880 --> 00:21:11.990
So they might expect it to
be at the My Applications,

00:21:12.040 --> 00:21:13.650
My App Folder, My App.

00:21:13.680 --> 00:21:16.200
If they're not there,
they may not work properly.

00:21:16.350 --> 00:21:19.260
So when the parent folder is
moved or renamed for clarity,

00:21:19.260 --> 00:21:21.380
it may actually break the application.

00:21:23.090 --> 00:21:25.080
We also have directory
location limitations,

00:21:25.080 --> 00:21:28.410
which is also related to hard code pass,
that some apps may require

00:21:28.410 --> 00:21:31.360
installation at a specific location,
such as the root level of the

00:21:31.410 --> 00:21:33.820
hard disk or the root level
of the applications folder.

00:21:33.820 --> 00:21:38.030
And many installers and applications
don't support the special characters,

00:21:38.110 --> 00:21:41.470
such as spaces or the option six
character or other characters

00:21:41.470 --> 00:21:42.890
that can be added to it.

00:21:42.960 --> 00:21:46.730
And this particularly causes issues
when you try to update the application

00:21:46.730 --> 00:21:48.700
or use features of the application.

00:21:50.700 --> 00:21:53.430
Last thing that we're going to talk
about is file or finder attributes.

00:21:53.490 --> 00:21:59.000
Some applications use file attributes,
Carbon file attributes for setup,

00:21:59.150 --> 00:22:01.740
and some distribution tools
don't support this information.

00:22:01.740 --> 00:22:04.520
Typically,
the way that you use this is within

00:22:04.520 --> 00:22:06.600
the developer tools directory.

00:22:06.600 --> 00:22:11.110
There's a tool called get file info,
and the get file info actually looks at

00:22:11.110 --> 00:22:15.550
the Carbon resource file and basically
tells you what is stored in that file,

00:22:15.680 --> 00:22:17.620
and particularly the attributes.

00:22:17.660 --> 00:22:20.330
And it could be also the creation
and the modification date.

00:22:24.160 --> 00:22:26.240
Next on the cover, tracking installation.

00:22:26.240 --> 00:22:29.210
What does the installer really do?

00:22:30.510 --> 00:22:32.640
We've covered some
simple tracking options,

00:22:32.640 --> 00:22:35.820
read me logs using
Apple's installer utility,

00:22:35.840 --> 00:22:37.200
Pacifist LS Bomb.

00:22:37.210 --> 00:22:39.940
Now we're going to cover some
more complex tracking options,

00:22:40.150 --> 00:22:44.760
uncover utilities like FileBuddy,
a command line tool called LogGen,

00:22:44.760 --> 00:22:47.230
and a suite of tools called RadMine.

00:22:49.070 --> 00:22:50.680
First, what method should you use?

00:22:50.680 --> 00:22:54.520
The first option depends on the
technical ability of the admin.

00:22:54.520 --> 00:22:56.960
Do they know command line?

00:22:56.960 --> 00:22:59.790
Next,
do you want to use a GUI or command line?

00:22:59.790 --> 00:23:02.890
Some of the tools do have GUI friends,
some don't.

00:23:02.950 --> 00:23:05.790
Some maybe not offer all the
features with the GUI that

00:23:05.790 --> 00:23:07.540
they do with the command line.

00:23:07.540 --> 00:23:09.740
So you have choices there.

00:23:09.740 --> 00:23:12.310
Also,
the accuracy of the tool you want to use.

00:23:12.310 --> 00:23:16.000
Some tools don't track as well as
other or as accurately as others.

00:23:16.780 --> 00:23:18.840
Lastly,
how does the tool you're using for

00:23:18.840 --> 00:23:22.660
tracking installation integrate into
your overall distribution model?

00:23:22.660 --> 00:23:24.480
Again, simple tracking.

00:23:24.540 --> 00:23:28.600
It works great with packages
and drag-and-drop installers.

00:23:28.600 --> 00:23:32.340
Complex tracking you can use with
packages and drag-and-drop installers.

00:23:32.340 --> 00:23:34.490
You can also use with
non-Apple installers,

00:23:34.490 --> 00:23:36.440
so like VICE, install anywhere.

00:23:38.460 --> 00:23:39.730
So here's an example of FileBuddy.

00:23:40.080 --> 00:23:44.360
FileBuddy was a popular Mac OS 9 file
utility that was ported to Mac OS X.

00:23:44.360 --> 00:23:47.640
FileBuddy has an option where it
allows you to capture a snapshot

00:23:47.640 --> 00:23:49.180
before and after install.

00:23:49.180 --> 00:23:54.260
And then you create a comparison
of the before and after install,

00:23:54.260 --> 00:23:58.140
and it'll give you a list of added items,
modified items, deleted items, etc.

00:23:58.160 --> 00:24:01.570
The cons against using FileBuddy
doesn't support the detailed

00:24:01.570 --> 00:24:05.340
information that you usually need,
like permissions and attributes,

00:24:05.400 --> 00:24:07.480
and also doesn't support file checksums.

00:24:08.140 --> 00:24:09.500
So below, here's a graphic.

00:24:09.580 --> 00:24:13.330
If people haven't used FileBuddy,
basically you launch FileBuddy utility.

00:24:13.340 --> 00:24:16.020
There's an option, create a snapshot.

00:24:16.020 --> 00:24:19.000
You take a before snapshot,
you install your software, set it up,

00:24:19.000 --> 00:24:20.840
do any installation customization.

00:24:20.840 --> 00:24:23.150
You do an after snapshot,
and then you compare

00:24:23.210 --> 00:24:25.330
the before and after,
and then it'll output

00:24:25.510 --> 00:24:26.820
the files listed below.

00:24:28.890 --> 00:24:29.550
LogGen.

00:24:29.720 --> 00:24:31.270
LogGen is a command line utility.

00:24:31.430 --> 00:24:32.300
It's open source.

00:24:32.300 --> 00:24:35.320
It depends on Perl
modules and Mac OS XIII.

00:24:35.320 --> 00:24:39.500
And it does support detailed information
like permissions and attributes.

00:24:39.500 --> 00:24:41.190
It also does support file checksums.

00:24:41.240 --> 00:24:44.670
And it uses a similar
method as FileBuddy.

00:24:44.670 --> 00:24:47.710
So you basically take a snapshot
of the file system before,

00:24:47.710 --> 00:24:50.760
install your software, set it up,
do any customization,

00:24:50.760 --> 00:24:53.540
and then do a scan after,
and it creates a logs of what's

00:24:53.540 --> 00:24:55.640
been different in the file system.

00:24:57.730 --> 00:25:01.020
So here's a quick example of Loggen.

00:25:01.060 --> 00:25:03.800
Basically, you, Loggen,
you store an S-bin,

00:25:03.920 --> 00:25:07.600
so you run the utility Loggen,
you name whatever you want

00:25:07.680 --> 00:25:11.180
to call the before snapshot,
then you install the software, set it up,

00:25:11.250 --> 00:25:15.640
then you basically run Loggen again,
you name the after snapshot,

00:25:15.640 --> 00:25:20.100
and you also select the before snapshot,
and you can either output it to screen

00:25:20.100 --> 00:25:22.400
or output it here to changes.txt.

00:25:22.400 --> 00:25:25.040
And then the output below,
you'll get something similar.

00:25:25.040 --> 00:25:30.080
So it shows you new files, changed files,
or deleted files.

00:25:31.080 --> 00:25:32.200
RadMine.

00:25:32.200 --> 00:25:34.640
RadMine is a suite of command line tools.

00:25:34.640 --> 00:25:39.500
RadMine is a really powerful file
system management tool that can be

00:25:39.500 --> 00:25:43.740
used to manage the whole file system
from tracking to also distribution.

00:25:43.740 --> 00:25:48.560
RadMine does support detailed information
like permission and attributes on

00:25:48.560 --> 00:25:50.470
a group and also supports checksum.

00:25:50.620 --> 00:25:54.190
The process of RadMine is slightly
different than the other tools.

00:25:54.410 --> 00:25:57.760
What you have to do is set
up a managed file system.

00:25:58.210 --> 00:26:00.380
You update the client to
that managed file system.

00:26:00.600 --> 00:26:02.640
You install the software, set it up.

00:26:02.810 --> 00:26:04.380
Then you run the RadMine tools.

00:26:04.600 --> 00:26:07.370
The RadMine tools will
scan the file system,

00:26:07.370 --> 00:26:11.630
compare it to the managed file system,
and log any differences.

00:26:14.750 --> 00:26:16.940
So we're going to talk about
advanced troubleshooting.

00:26:16.940 --> 00:26:19.760
And this kind of might seem a
little bit out of place in tracking,

00:26:19.760 --> 00:26:21.140
but it really isn't.

00:26:21.300 --> 00:26:24.880
Because typically,
we want to run the application

00:26:24.880 --> 00:26:26.600
as a non-admin user.

00:26:26.600 --> 00:26:30.050
And so sometimes the application
may not work as a non-admin user,

00:26:30.120 --> 00:26:33.520
so we have to have a way of tracking
what that application is trying

00:26:33.590 --> 00:26:37.460
to do so that we know what to do
with the application for deployment.

00:26:39.660 --> 00:26:41.420
So most of these are command line tools.

00:26:41.420 --> 00:26:43.590
Some do have GUI interfaces,
but most are accessed

00:26:43.590 --> 00:26:44.790
from the command line.

00:26:44.790 --> 00:26:48.500
The first one is LSOF,
which lists all open files.

00:26:48.500 --> 00:26:53.330
The next one is FS underscore usage,
which monitors kernel-level system

00:26:53.680 --> 00:26:55.870
calls and file system activity.

00:26:55.870 --> 00:26:59.290
And the last one is K-trace,
which is kernel tracing,

00:26:59.290 --> 00:27:02.440
and it's a very low-level
tracking mechanism.

00:27:04.070 --> 00:27:06.250
So let's talk about the first place
that you should probably start.

00:27:06.250 --> 00:27:07.800
List open files.

00:27:07.840 --> 00:27:12.500
This lists open files by processes
and has many command line switches.

00:27:12.500 --> 00:27:16.000
The first one that I have
highlighted here is list open

00:27:16.050 --> 00:27:18.300
files with the dash C switch.

00:27:18.300 --> 00:27:22.240
And what the dash C switch does is
tells it to pay attention only to an

00:27:22.240 --> 00:27:24.690
application that I'm interested in.

00:27:24.700 --> 00:27:28.200
In this case,
I've said I only care about mail.app.

00:27:28.280 --> 00:27:31.220
And so what it simply does is it
tells me all the activity that's

00:27:31.330 --> 00:27:33.320
going on on the file system with mail.

00:27:33.320 --> 00:27:36.250
but only with open files.

00:27:36.380 --> 00:27:38.740
The other thing that you can do,
and is another useful switch,

00:27:38.740 --> 00:27:41.420
is if it's trying to do something
to a particular directory,

00:27:41.420 --> 00:27:44.440
you can pay attention to just
that application directory

00:27:44.540 --> 00:27:46.460
with the plus capital D switch.

00:27:46.460 --> 00:27:50.400
So I can say list open files,
plus capital D, pay attention only to

00:27:50.400 --> 00:27:52.260
the mail.app directory.

00:27:52.260 --> 00:27:55.590
So if a normal user is trying to write
to some place that I don't understand

00:27:55.590 --> 00:27:58.980
where it's trying to write to,
I may capture that with this command.

00:28:01.900 --> 00:28:04.150
Sloth is a GUI for list open files.

00:28:04.150 --> 00:28:08.680
It makes it a little bit easier because
I don't know if you can actually see it.

00:28:08.830 --> 00:28:09.580
Yes, you can see it.

00:28:09.720 --> 00:28:13.380
It has a number of checkboxes
that basically encapsulate

00:28:13.380 --> 00:28:15.440
the command line switches.

00:28:15.440 --> 00:28:18.940
And you can also set a filter on it
so that you can really pay attention.

00:28:21.120 --> 00:28:22.650
So let's move to the next level.

00:28:22.670 --> 00:28:25.600
This is the next level that you
go if list open files doesn't

00:28:25.600 --> 00:28:26.530
give you enough information.

00:28:26.530 --> 00:28:28.580
You use file system usage.

00:28:28.580 --> 00:28:31.350
It has to be run as root,
and it's more advanced than

00:28:31.360 --> 00:28:34.920
LSOF because it basically tells
you every file that's trying to be

00:28:34.920 --> 00:28:37.410
accessed across the entire file system.

00:28:37.410 --> 00:28:41.360
It also reports in real time,
and the output is very, very verbose.

00:28:41.800 --> 00:28:46.980
So I've listed the command here,
which is fsusage, followed by the dash w,

00:28:47.010 --> 00:28:51.320
which tells me wide output so
that I can see the entire path.

00:28:51.360 --> 00:28:54.520
I next tell it that I only
care about file system objects.

00:28:54.520 --> 00:28:56.490
I don't care about anything else.

00:28:56.500 --> 00:29:00.470
I next attach to the process
identifier of the application,

00:29:00.480 --> 00:29:02.870
so that's what I mean by command.

00:29:02.870 --> 00:29:07.240
I next use grep to omit cache hits.

00:29:07.240 --> 00:29:09.700
If you don't do this,
you're going to find that you

00:29:09.780 --> 00:29:11.780
have a ton of output that you
actually have to deal with.

00:29:11.780 --> 00:29:14.670
You have to pay attention to,
and it can actually get very

00:29:14.790 --> 00:29:18.500
chatty and makes it hard to find
what you actually are looking for.

00:29:18.870 --> 00:29:20.900
The last thing that you should
use is kernel trace utility.

00:29:20.900 --> 00:29:24.550
And this is when you have an
application that's doing something and

00:29:24.560 --> 00:29:26.280
you cannot solve it in any other way.

00:29:26.280 --> 00:29:29.400
It handles all calls
directly from the kernel.

00:29:29.570 --> 00:29:32.360
The output is not
readable by a text editor.

00:29:32.360 --> 00:29:33.960
It actually stores it in machine format.

00:29:33.960 --> 00:29:36.500
And it provides the most
complete set of information.

00:29:36.500 --> 00:29:42.690
So notice that I have ktrace-ti-p to the
process identifier of the application.

00:29:42.690 --> 00:29:45.580
Then to read that, I use kdump.

00:29:45.620 --> 00:29:48.480
It's going to put a
file called ktrace.out.

00:29:48.800 --> 00:29:52.490
And the directory that you start,
typically this is your home directory.

00:29:52.490 --> 00:29:54.690
And then you can pipe
that to a text file.

00:29:54.690 --> 00:29:56.030
And then you can read it.

00:29:56.140 --> 00:30:01.440
But as you notice from the example here,
it's actually fairly complex

00:30:01.450 --> 00:30:03.600
and it's not easy to read.

00:30:03.620 --> 00:30:06.560
If you're going to use ktrace,
I would suggest reading the manual

00:30:06.560 --> 00:30:09.710
page because it will provide you
most information that you need.

00:30:09.720 --> 00:30:12.640
The next thing that I should
say is when you run ktrace,

00:30:12.680 --> 00:30:17.000
it's actually very important that
after you have tracked the application,

00:30:17.000 --> 00:30:18.720
that you actually turn it off.

00:30:18.720 --> 00:30:22.150
If you don't turn it off,
it will continue to monitor until

00:30:22.150 --> 00:30:24.340
basically your file system is full.

00:30:24.460 --> 00:30:28.650
So I actually accidentally forgot
to shut it off once and filled up a

00:30:28.650 --> 00:30:33.690
60-gig car drive in about four hours
because it basically just continues to

00:30:33.690 --> 00:30:36.500
monitor every single kernel-level call.

00:30:36.620 --> 00:30:39.970
So read the manual page if
you want more information.

00:30:39.970 --> 00:30:43.080
So Richard's going to do
a demo over on demo two.

00:30:43.900 --> 00:30:47.180
What I'm going to show is two of
the utilities we talked about,

00:30:47.350 --> 00:30:48.320
FileBuddy and RadMine.

00:30:48.320 --> 00:30:52.630
Note, just for sake of speed
and for demo purposes,

00:30:52.710 --> 00:30:56.420
I'm basically going to use a
disk image to show the demo.

00:30:56.420 --> 00:31:00.600
But you could basically use our entire
file system on a real large hard drive,

00:31:00.600 --> 00:31:03.820
but if you guys want to wait
40 minutes while I do stuff,

00:31:03.820 --> 00:31:04.610
we could.

00:31:05.280 --> 00:31:09.110
But anyways, so what I'm going to do is,
here's the disk image.

00:31:09.130 --> 00:31:10.890
I have basically an app on it.

00:31:10.960 --> 00:31:13.850
This could be the OS,
could be whatever you want.

00:31:14.030 --> 00:31:16.800
I could have a real
diverse file system here.

00:31:16.800 --> 00:31:21.120
But for simplicity and sake of time,
it's just real simple.

00:31:21.120 --> 00:31:23.280
So basically, I have chess,
and what I want to do is

00:31:23.280 --> 00:31:24.690
I'm going to show FileBuddy.

00:31:24.700 --> 00:31:29.080
So I want to do a file scan,
a snapshot of the file system.

00:31:29.080 --> 00:31:33.260
So I launch FileBuddy,
and I select take a snapshot.

00:31:33.260 --> 00:31:35.260
Then I select the volume on it.

00:31:35.280 --> 00:31:38.960
So I want to take a snapshot of,
which is the disk image, and I name it.

00:31:39.150 --> 00:31:41.460
So I'll name it before.

00:31:43.470 --> 00:32:09.890
and Outputs.

00:32:09.890 --> 00:32:09.890
Next,
I'm going to install an application.

00:32:09.890 --> 00:32:09.890
Again, for sake of time,
I'm just going to do a

00:32:09.890 --> 00:32:09.890
drag and drop with my app.

00:32:09.890 --> 00:32:09.890
So I just drag this over to this image.

00:32:09.890 --> 00:32:09.890
This could be an installer,
could be a vice installer,

00:32:09.890 --> 00:32:09.890
could be complex.

00:32:09.890 --> 00:32:09.890
File system could put the pieces
wherever you want on the file system.

00:32:09.890 --> 00:32:09.890
Again, for sake of time,
just do a drag and drop.

00:32:09.890 --> 00:32:09.890
So next, again, I did the install.

00:32:09.890 --> 00:32:09.890
I did any customization I wanted.

00:32:09.890 --> 00:32:09.890
Then I take a snapshot again.

00:32:13.190 --> 00:32:16.000
And I call this one after.

00:32:16.070 --> 00:32:17.000
And outputs it.

00:32:17.000 --> 00:32:21.610
And the next thing I want to do is
compare the before and after snapshots.

00:32:24.890 --> 00:32:34.240
And what it'll do is output a folder that
basically has these files listed in here,

00:32:34.250 --> 00:32:36.700
and I'm going to display those.

00:32:43.800 --> 00:32:49.450
So you'll see in the new items that list
my app and the package contents there,

00:32:49.450 --> 00:32:52.420
doesn't list any detailed information
like permissions and attributes.

00:32:52.420 --> 00:32:55.980
There's also new and modified items.

00:32:55.980 --> 00:32:56.990
Nothing was modified.

00:32:57.080 --> 00:32:58.830
It was only new items on the file system.

00:33:04.910 --> 00:33:07.600
What I'm doing here,
which we'll talk about later,

00:33:07.740 --> 00:33:11.270
is I'm running an Apple script
to basically mount the disk

00:33:11.320 --> 00:33:12.400
image with the shadow file.

00:33:12.400 --> 00:33:14.730
I wrote the Apple script to
remove the shadow so I could

00:33:14.730 --> 00:33:15.980
get back to a clean system.

00:33:15.980 --> 00:33:19.200
So basically what that did
is dismounted the disk image,

00:33:19.200 --> 00:33:22.460
deleted the shadow file,
and now I'm mounting it again.

00:33:22.460 --> 00:33:25.250
We'll talk about that a little bit more.

00:33:25.580 --> 00:33:27.910
Okay, so the next tool I'm
going to show is RadMine.

00:33:27.920 --> 00:33:30.240
Again, I'm back to my clean system.

00:33:30.240 --> 00:33:34.500
In RadMine, one note,
I'll go over this a little quickly.

00:33:34.500 --> 00:33:38.130
RadMine,
you set up a default managed file system,

00:33:38.130 --> 00:33:41.040
which is defined by this command.k.

00:33:41.040 --> 00:33:43.710
Again, for simplicity,
this is a real basic.

00:33:43.710 --> 00:33:46.930
It doesn't have any unmanaged
items on the file system.

00:33:47.550 --> 00:33:51.460
The base image basically contains
my default baseline image,

00:33:51.460 --> 00:33:53.450
which just contains chess.

00:33:53.450 --> 00:33:55.960
If you have questions,
you can ask me after RadMine.

00:33:55.960 --> 00:33:57.860
It'll take a long time to talk about.

00:34:00.250 --> 00:34:04.640
So again, I do my install,
do any customizations I want.

00:34:04.840 --> 00:34:07.060
RadMine does have command line,
or GUI front end,

00:34:07.070 --> 00:34:09.350
but I'm gonna show the command line.

00:34:17.300 --> 00:34:20.060
- The first thing, again,
I'm gonna basically CD to

00:34:20.060 --> 00:34:23.890
the root of the disk image.

00:34:26.660 --> 00:34:28.700
The next thing,
I'm going to use a command

00:34:28.700 --> 00:34:31.140
line tool called fsdiff,
file system differences.

00:34:31.140 --> 00:34:35.420
I use a minus uppercase C,
which defines a creatable transcript.

00:34:35.420 --> 00:34:38.930
And a creatable transcript is when
I want to create an overload to upload

00:34:39.040 --> 00:34:40.900
and distribute to other clients.

00:34:40.900 --> 00:34:45.210
The next parameter is minus lowercase c,
which defines checksum,

00:34:45.240 --> 00:34:48.800
and SHA-1 is one of the
checksums RadMine supports.

00:34:49.700 --> 00:34:51.760
The next parameter is
minus dot current path,

00:34:51.760 --> 00:34:55.940
and then I'm outputting the transcript
that it creates or the modifications

00:34:55.940 --> 00:34:58.260
to the disk image to myapp.t.

00:34:58.260 --> 00:35:02.650
Let it run, and there it goes,
and it'll create a file on my desktop,

00:35:02.650 --> 00:35:04.720
and I'll open that up for you.

00:35:09.590 --> 00:35:12.360
So you'll notice kind of
some differences here.

00:35:12.410 --> 00:35:16.180
FileBuddy only lists
some of the contents.

00:35:16.230 --> 00:35:18.700
It uses the date and
size modification date.

00:35:18.800 --> 00:35:22.400
RadMine uses checksums and gives me
detailed information like permissions.

00:35:22.400 --> 00:35:25.360
So if I use FileBuddy,
I wouldn't notice that this

00:35:25.360 --> 00:35:29.320
application installs with world rights,
the 0777.

00:35:29.320 --> 00:35:30.680
So I'd miss that item.

00:35:31.280 --> 00:35:33.840
Also with RadMine,
you can also check for SUID,

00:35:33.840 --> 00:35:37.010
and I can quickly scan through
the transcript and find those

00:35:37.050 --> 00:35:39.750
items and be notified that
there are some concerns here.

00:35:39.760 --> 00:35:43.020
So anyways, back to slides.

00:35:43.020 --> 00:35:43.530
Back to slides.

00:35:48.720 --> 00:35:50.430
So let's talk about,
now that I've actually

00:35:50.430 --> 00:35:52.820
tracked the installation and
I know what it actually does,

00:35:52.870 --> 00:35:53.920
how do I actually make it work?

00:35:54.040 --> 00:35:58.060
Because often the developer may
not have the time or it may be a

00:35:58.100 --> 00:36:00.220
fix that is coming down the road.

00:36:00.420 --> 00:36:03.090
How do I actually make
the application work?

00:36:03.470 --> 00:36:05.900
So let's talk about modifying
the default install.

00:36:05.940 --> 00:36:08.200
There are solutions that
you can use in Installer.

00:36:08.200 --> 00:36:12.200
We can solve the problems of installers
installing with super user privileges.

00:36:12.200 --> 00:36:15.080
We can use tools to customize
or extract the installer.

00:36:15.190 --> 00:36:17.980
There are also security solutions
where we can modify the permissions and

00:36:17.980 --> 00:36:20.290
attributes to something more acceptable.

00:36:20.440 --> 00:36:24.270
We can use links to redirect to a user
space instead of the global space.

00:36:24.350 --> 00:36:26.900
You can use a disk image
with a shadow file,

00:36:26.900 --> 00:36:30.270
or you can use log in, log out,
or startup scripts.

00:36:30.510 --> 00:36:35.500
You can also affect the preferences
by using login or startup

00:36:35.510 --> 00:36:37.660
scripts for by-host preferences.

00:36:37.660 --> 00:36:40.040
You can move the preferences
to a different scope,

00:36:40.040 --> 00:36:43.630
so instead of being in the user scope,
it probably or sometimes will work if

00:36:43.680 --> 00:36:45.900
you move it to the host or network scope.

00:36:45.900 --> 00:36:49.340
And the last thing we'll talk about
is file and finder attributes.

00:36:50.390 --> 00:36:53.320
So some installers actually
require root privileges to install

00:36:53.620 --> 00:36:56.900
because they require writing
to the file system in places that

00:36:57.030 --> 00:36:59.160
you cannot write as a normal user.

00:36:59.160 --> 00:37:02.160
So there are GUI and
command line options.

00:37:02.160 --> 00:37:04.740
The probably easiest
GUI one is called sudo,

00:37:04.740 --> 00:37:08.250
and all you do is you drag
the installer on top of it,

00:37:08.400 --> 00:37:10.780
and then it installs as root,
which means you have access

00:37:10.780 --> 00:37:11.920
to the entire file system.

00:37:12.460 --> 00:37:15.760
The other way you can do it, of course,
is with the command line.

00:37:15.760 --> 00:37:18.880
You can use the sudo command
and impersonate the root user.

00:37:18.880 --> 00:37:22.090
You can either open a Cocoa application,
or you can use the

00:37:22.100 --> 00:37:23.800
carbon-based installer.

00:37:26.420 --> 00:37:28.500
The other way that we talked
about a little bit earlier,

00:37:28.590 --> 00:37:30.440
but this is the only solution
with package installers,

00:37:30.490 --> 00:37:31.810
is to use Pacifist.

00:37:31.820 --> 00:37:34.170
And with Pacifist,
it allows you to install to any

00:37:34.170 --> 00:37:35.910
location across the file system.

00:37:35.910 --> 00:37:38.900
And it also allows you to
extract individual items.

00:37:38.940 --> 00:37:41.610
For example,
if an application actually breaks and you

00:37:41.610 --> 00:37:45.250
need to get part of that application out,
you can do that with Pacifist.

00:37:47.760 --> 00:37:49.190
So permissions and attributes.

00:37:49.190 --> 00:37:52.000
What's the simplest way to actually
look at permissions and attributes?

00:37:52.000 --> 00:37:54.760
Simplest methods to find
are using the Git info.

00:37:54.760 --> 00:37:58.160
You can't set certain bits,
you can't set the execute bit,

00:37:58.170 --> 00:38:01.360
and you don't have access
to the special BSD bits,

00:38:01.360 --> 00:38:03.380
the set UID, the set GID bits.

00:38:03.390 --> 00:38:04.930
Those are not there.

00:38:05.620 --> 00:38:09.700
So there is an application, Freeware,
I believe, that's called X-Ray,

00:38:09.700 --> 00:38:12.340
and it allows you to see
all the bits on a file.

00:38:12.340 --> 00:38:16.040
So if you notice, the orange box shows
you the special bits,

00:38:16.040 --> 00:38:18.990
the set UID, the set GID,
and the sticky bit.

00:38:19.040 --> 00:38:22.570
And the security bits,
which are less familiar to some people,

00:38:22.660 --> 00:38:25.780
the BSD security bits of the
user flags and the root flags,

00:38:25.780 --> 00:38:29.040
the append, all those type of flags
are located in there,

00:38:29.100 --> 00:38:31.390
and you can modify these with X-Ray.

00:38:33.970 --> 00:38:36.090
So what's the quickest way
to reset file permissions?

00:38:36.090 --> 00:38:39.550
I don't really want to,
let's say I don't really

00:38:39.550 --> 00:38:41.460
want to use a GUI,
but I want to be able to go through

00:38:41.620 --> 00:38:44.610
and traverse either the application
or the entire file system if

00:38:44.610 --> 00:38:48.430
I want to look for every set UID,
world or group writable, or set GID app.

00:38:48.640 --> 00:38:52.580
The easiest way is to use the
Unix command line find utility.

00:38:52.580 --> 00:38:55.980
So I've highlighted some of
the options so that you can

00:38:55.980 --> 00:38:58.060
see how this actually works.

00:38:58.060 --> 00:39:00.260
The first thing that I do is I do dash X.

00:39:00.260 --> 00:39:03.610
Dash X says I don't care
about network file systems.

00:39:03.900 --> 00:39:04.930
Amen.

00:39:05.060 --> 00:39:07.190
And in this case,
I'm not going to start at the root level.

00:39:07.250 --> 00:39:10.460
I only care about my app,
so I'm going to only look in the

00:39:10.520 --> 00:39:11.900
applications my app directory.

00:39:12.030 --> 00:39:14.000
So that becomes the first
place that it looks.

00:39:14.000 --> 00:39:18.720
The next thing that I'm doing is I'm
looking for World Right permissions,

00:39:18.730 --> 00:39:20.990
permissions of 0777.

00:39:21.810 --> 00:39:25.640
I then put the exclamation point
and tell it that I don't care

00:39:25.640 --> 00:39:27.800
about sticky bit directories.

00:39:27.800 --> 00:39:31.250
And the reason is because sticky bit
directories are traditionally considered

00:39:31.250 --> 00:39:34.550
as a safe measure of using something
that needs to be world-right because

00:39:34.570 --> 00:39:36.980
you cannot delete other users' files.

00:39:36.980 --> 00:39:40.740
The next thing that I do is I also
add the option of I don't care if

00:39:40.740 --> 00:39:44.960
it's a link because links don't
matter so much if they're world-right.

00:39:45.360 --> 00:39:48.910
The next and last thing is
I actually am telling FIND that

00:39:48.910 --> 00:39:52.490
I want verification every time I go
through the entire file system.

00:39:52.490 --> 00:39:55.900
And what I'm doing here is I'm
using this change mode command,

00:39:55.900 --> 00:40:01.830
shmod, to remove the execute bit so it is
no longer world or group writable.

00:40:02.510 --> 00:40:06.210
Now, you can also do this with the set
UID and set GID in the same manner,

00:40:06.210 --> 00:40:10.420
except this time I add the option of
that I'm only looking for file types and

00:40:10.420 --> 00:40:13.380
that I only care about the set UID bit.

00:40:13.380 --> 00:40:15.870
And again,
I'm using the OK so that it asks for

00:40:15.870 --> 00:40:19.830
verification so that when I actually
change and remove the set UID bit,

00:40:19.830 --> 00:40:22.730
I have confirmation that
it just doesn't do it.

00:40:22.800 --> 00:40:26.800
I actually like to be careful that
I'm actually prompted for an OK.

00:40:27.830 --> 00:40:29.340
Could do the same thing with set GID.

00:40:29.340 --> 00:40:32.390
You just change it to 02000,
does the same thing.

00:40:34.940 --> 00:40:37.900
So let's talk a little bit about
redirection so that you can leave an

00:40:37.900 --> 00:40:39.450
application in its default location.

00:40:39.460 --> 00:40:43.820
Symbolic links often will trick an
application into working correctly.

00:40:43.820 --> 00:40:47.010
So as an example, in my applications,
I have an application

00:40:47.010 --> 00:40:48.570
test WorldWrite folder.

00:40:48.580 --> 00:40:49.740
I have a WorldWrite folder.

00:40:49.740 --> 00:40:52.100
And in that folder,
I basically want to not

00:40:52.160 --> 00:40:53.720
leave that folder there.

00:40:53.720 --> 00:40:57.080
I want to redirect it
to a more benign space.

00:40:57.080 --> 00:40:59.660
So in this case,
what I've done is I've actually

00:40:59.660 --> 00:41:03.310
symbolically linked that WorldWrite
folder to a place that I can put

00:41:03.320 --> 00:41:05.510
WorldWrite folder that I trust it to be.

00:41:05.520 --> 00:41:08.340
And so I've redirected to
the user's shared directory,

00:41:08.340 --> 00:41:10.940
and that's where I leave
the WorldWrite folder.

00:41:10.940 --> 00:41:13.950
You could also use aliases
to fool an application,

00:41:13.950 --> 00:41:16.120
and sometimes that works as well.

00:41:16.120 --> 00:41:20.560
You can either use the finder to do it,
or there are command line OS X utilities.

00:41:20.560 --> 00:41:22.180
It's a source forward project.

00:41:22.220 --> 00:41:26.820
If you just look for OS X utils,
there's actually a make alias command.

00:41:26.900 --> 00:41:28.650
that's command line.

00:41:29.950 --> 00:41:34.130
Using symbolic links also works for
directory location because you can

00:41:34.130 --> 00:41:35.500
use them to preserve that location.

00:41:35.500 --> 00:41:38.630
You preserve it for upgrades,
and you can give a custom name to

00:41:38.680 --> 00:41:41.320
an application without actually
altering the original name.

00:41:41.320 --> 00:41:45.850
It's also safest to use the full
path if you're using symbolic links,

00:41:46.040 --> 00:41:48.010
not to use relative links.

00:41:50.580 --> 00:41:54.680
Next I'm going to cover other options
when you've tried redirection,

00:41:54.680 --> 00:41:57.750
modifying permissions,
and your application still

00:41:57.750 --> 00:41:58.880
does not work properly.

00:41:58.880 --> 00:42:02.620
The next option is to basically
use a disk image and mount it

00:42:02.800 --> 00:42:04.860
read-write with a shadow file.

00:42:04.860 --> 00:42:10.260
So my example there where I had an
Apple script to mount my disk image with

00:42:10.260 --> 00:42:13.040
a shadow file so I could write to it.

00:42:13.140 --> 00:42:17.250
All modifications I could basically pipe
out to a shadow file and I could store

00:42:17.250 --> 00:42:19.740
those in user space or other locations.

00:42:20.000 --> 00:42:24.060
I deem that wouldn't be an
issue with the file system.

00:42:24.100 --> 00:42:27.110
These are really useful because
sometimes you'll run into an

00:42:27.110 --> 00:42:30.620
application that basically requires
write access to the same location.

00:42:30.620 --> 00:42:32.280
It uses a temp file, for example.

00:42:32.280 --> 00:42:36.360
What you can do is you'll see
below there's an Apple script.

00:42:36.440 --> 00:42:38.380
What you want to do is
use do shell script.

00:42:38.480 --> 00:42:40.780
You want to use the HDID tool.

00:42:40.780 --> 00:42:43.360
Then I give the pathway.

00:42:45.000 --> 00:42:51.180
To the disk image,
so applications app.dmg.

00:42:51.200 --> 00:42:54.850
Then I use the parameter minus shadow.

00:42:56.380 --> 00:42:59.740
Then the next step, I do the pathway,
which I just have app shadow,

00:42:59.740 --> 00:43:01.810
so that could,
I basically could do the path

00:43:01.810 --> 00:43:04.340
to the user space and save the
shadow file to that location.

00:43:04.340 --> 00:43:09.120
I've used this on many applications,
and it's an ideal solution.

00:43:09.120 --> 00:43:12.490
One thing to note, sometimes the shadow
files become very large,

00:43:12.490 --> 00:43:15.580
so you want to either delete
them on logout or on startup.

00:43:17.630 --> 00:43:22.740
Next, if you can't solve an application's
issues with any of those

00:43:22.790 --> 00:43:26.320
options we just talked about,
one option is using scripts.

00:43:26.320 --> 00:43:29.660
With scripts, if an application needs
certain files created,

00:43:29.680 --> 00:43:31.100
you could create those.

00:43:31.100 --> 00:43:34.320
You can remove certain files or
folders that are world-right,

00:43:34.320 --> 00:43:36.520
so if an application does
require world-rights,

00:43:36.540 --> 00:43:39.420
you can't use a shadow file,
you could go back and remove

00:43:39.420 --> 00:43:41.060
those on logout or on SCARTA.

00:43:41.690 --> 00:43:44.840
Also, you could modify preferences
if an application requires

00:43:44.840 --> 00:43:48.130
certain file attributes,
you can modify those with a script.

00:43:48.220 --> 00:43:50.960
Also, if you have an application
that doesn't close properly,

00:43:51.050 --> 00:43:53.630
you can use a script to kill
the application properly.

00:43:53.640 --> 00:43:56.260
Again, you can run these at login,
logout, startup,

00:43:56.260 --> 00:43:58.660
or you can put a GUI wrapper
in front of the script.

00:44:00.660 --> 00:44:02.650
File attributes have revisited.

00:44:02.660 --> 00:44:08.210
Some applications depend on
some file attributes or finder

00:44:08.210 --> 00:44:11.280
attributes that aren't supported
by some distribution tools.

00:44:11.280 --> 00:44:16.130
So for example,
we use the developer tool Get File Info.

00:44:16.140 --> 00:44:19.200
I get the information of the
Carbon registration database to

00:44:19.200 --> 00:44:21.100
gather all the finder attributes.

00:44:21.100 --> 00:44:24.660
And then I notice there's one
attribute the application depends on,

00:44:24.660 --> 00:44:26.180
else it'll reconfigure.

00:44:26.320 --> 00:44:32.260
So what I want to do is use the set
file minus D parameter to force the

00:44:32.380 --> 00:44:37.160
application to have an attribute it won't
have after I use a distribution tool.

00:44:40.000 --> 00:44:42.790
Next, I'm going to cover
distributing the application,

00:44:42.790 --> 00:44:44.920
some tools and options,
and some solutions.

00:44:47.960 --> 00:44:49.660
First, how do you distribute software?

00:44:49.660 --> 00:44:54.160
If it's a package installer,
you have multiple options from Apple.

00:44:54.160 --> 00:44:57.640
If you want to do network
versus local installs,

00:44:57.640 --> 00:45:01.040
you can use NetInstall, ARD,
and there's a lot of other options.

00:45:01.040 --> 00:45:04.600
Or simply download the installer to
the local machine and install it.

00:45:04.680 --> 00:45:07.720
Then there's some options
for managed versus unmanaged.

00:45:07.720 --> 00:45:11.920
Unmanaged options we would
consider like Apple Remote Desktop.

00:45:11.920 --> 00:45:16.590
Managed options you could have open
source tools like rsyncx and Radmine.

00:45:20.530 --> 00:45:22.890
So let's talk a little bit
about repackaging and why you

00:45:22.890 --> 00:45:24.200
would actually want to do this.

00:45:24.200 --> 00:45:29.420
The reason that we find repackaging
to be a very useful tool is because

00:45:29.420 --> 00:45:33.260
you can take any installer from
any third party or a drag-and-drop

00:45:33.280 --> 00:45:34.670
and you can repackage it.

00:45:34.700 --> 00:45:37.740
This also means that if I've
modified an application and

00:45:37.740 --> 00:45:41.990
I put it in a certain directory,
I can preserve my corrected permissions.

00:45:42.160 --> 00:45:44.960
So if I don't like the way
it came out of the box,

00:45:44.970 --> 00:45:48.660
I can modify it, repackage it,
and now when I distribute it out,

00:45:48.680 --> 00:45:51.360
it actually has those permissions
that are preserved or any

00:45:51.430 --> 00:45:53.260
modifications that I may have done.

00:45:53.260 --> 00:45:56.350
It also means that every
time a user may perhaps,

00:45:56.350 --> 00:46:00.280
let's say we have in an enterprise
environment a laptop user,

00:46:00.290 --> 00:46:03.320
if they run the utility
repair permissions,

00:46:03.320 --> 00:46:06.850
it actually looks in the library
receipts directory and pays attention

00:46:06.860 --> 00:46:09.930
to those permissions so that it
recorrects them to the way that

00:46:09.990 --> 00:46:11.720
I originally intended it to be.

00:46:12.160 --> 00:46:16.000
And probably the best benefit of
repackaging is it means that if I'm an

00:46:16.230 --> 00:46:20.130
Apple Remote Desktop or NetInstall user,
I can now use those utilities

00:46:20.270 --> 00:46:24.240
to distribute the application,
which in an enterprise is a big win.

00:46:26.390 --> 00:46:29.050
So let's talk a little bit
about Apple Remote Desktop.

00:46:29.150 --> 00:46:33.270
Now, Apple Remote Desktop with
1.2.1 actually included the

00:46:33.270 --> 00:46:34.990
ability to install a package.

00:46:35.070 --> 00:46:37.970
And this is really,
really useful because it means

00:46:38.020 --> 00:46:41.130
that I now have a package,
I select Install a Package,

00:46:41.180 --> 00:46:45.300
and I can install it to any group of
machines that I've set up to do so.

00:46:45.700 --> 00:46:47.120
I can also do it with a command line.

00:46:47.120 --> 00:46:51.680
So, for example,
if I have Apple Remote Desktop turned on,

00:46:51.680 --> 00:46:54.140
I can actually,
or actually even if I don't have

00:46:54.140 --> 00:46:57.910
Apple Remote Desktop turned on,
I can SSH into that machine.

00:46:57.910 --> 00:47:02.190
I can then use the Kickstart tool,
which I give the complete path there,

00:47:02.200 --> 00:47:06.650
but don't worry about writing it down
because it's actually in an article,

00:47:06.650 --> 00:47:08.520
a knowledge base article.

00:47:08.740 --> 00:47:11.030
You can use dash H with the help option.

00:47:11.030 --> 00:47:13.520
It gives you the complete
sort of man page.

00:47:13.540 --> 00:47:15.600
There is no man page for Kickstart.

00:47:15.600 --> 00:47:17.960
You actually have to
do the dash H option,

00:47:17.960 --> 00:47:20.000
and it spits out a long file.

00:47:20.000 --> 00:47:25.060
And the other thing is that you must
use Apple Remote Desktop 1.2.1 or later.

00:47:25.060 --> 00:47:27.870
And the article number,
and this is where it's probably,

00:47:27.870 --> 00:47:32.460
if you just write down 107837,
that's the actual knowledge base article.

00:47:32.460 --> 00:47:34.750
And it's also in ARD2.

00:47:37.450 --> 00:47:40.580
The other advantage of a package
is if you're big in net install,

00:47:40.580 --> 00:47:43.980
you can actually use net install
to distribute this package

00:47:43.980 --> 00:47:45.290
throughout the enterprise.

00:47:45.300 --> 00:47:49.860
So if I have mobile users who connect
and let's say you've just purchased

00:47:49.860 --> 00:47:55.370
a site license for Macromedia MX,
let's say you've got that license,

00:47:55.370 --> 00:47:57.430
well now that I've packaged
it in a package installer,

00:47:57.430 --> 00:48:01.030
it means they can attach to that
net install machine and they can

00:48:01.030 --> 00:48:05.260
install it and be within compliance
if you have that site license.

00:48:08.500 --> 00:48:11.280
Next, I'm going to talk about
the open-source utility,

00:48:11.280 --> 00:48:11.880
rsyncx.

00:48:11.880 --> 00:48:16.060
rsyncx is basically HFS plus
implementation of the rsync protocol.

00:48:16.060 --> 00:48:20.020
A developer has put a
GUI front-end and a command line

00:48:20.020 --> 00:48:22.480
option to using this utility.

00:48:22.480 --> 00:48:25.120
This utility in the past has
usually been used to sync,

00:48:25.120 --> 00:48:26.960
say, servers or things like that.

00:48:26.990 --> 00:48:30.890
The rsync protocol is really
very efficient at basically

00:48:30.890 --> 00:48:35.680
copying the differences between
two file system options or items.

00:48:36.280 --> 00:48:37.610
So this is a great utility.

00:48:37.610 --> 00:48:39.840
It's been used a lot
in Mac OS X deployment.

00:48:39.840 --> 00:48:43.130
One con against this utility,
it doesn't give you granularity of

00:48:43.130 --> 00:48:47.270
some other options where you want maybe
just to distribute one specific file.

00:48:49.760 --> 00:48:51.570
RadMine, again, I talked about that.

00:48:51.620 --> 00:48:53.230
It's an open-source suite of tools.

00:48:53.230 --> 00:48:56.360
It comes with a lot of
different GUI options.

00:48:56.360 --> 00:49:00.370
There's a RadMine Assistant that allows
you to edit and view transcripts,

00:49:00.460 --> 00:49:02.900
which are basically
portions of the file system.

00:49:02.900 --> 00:49:06.780
It also has a RadMine Assistant that
allows you to run the command-line

00:49:06.780 --> 00:49:11.120
tools through a GUI interface,
either creating overloads, which, again,

00:49:11.120 --> 00:49:14.380
would be, say,
a particular application install.

00:49:14.760 --> 00:49:17.120
They have some command-line
interface tools.

00:49:17.120 --> 00:49:20.300
Two notable ones are FSDiff,
File System Differences, LApply,

00:49:20.300 --> 00:49:21.330
LoadSetApply.

00:49:21.340 --> 00:49:23.730
RadMine is a very powerful tool.

00:49:23.730 --> 00:49:27.120
It can be used from the
overall distribution.

00:49:27.120 --> 00:49:30.000
It can be used from tracking
to also file system management.

00:49:30.000 --> 00:49:32.960
One thing to note about RadMine,
it runs as a tripwire,

00:49:33.070 --> 00:49:36.330
and it can also detect differences
and restore the machine

00:49:36.330 --> 00:49:38.120
base to that managed state.

00:49:38.190 --> 00:49:40.750
So it's a really useful tool if
you're worried about security.

00:49:40.760 --> 00:49:43.040
The flexible runtime.

00:49:43.410 --> 00:49:47.230
RadMine's command-line tools,
it's basically dependent on how

00:49:47.240 --> 00:49:52.130
you want to script the tools,
but we run it manually, start up, log in,

00:49:52.200 --> 00:49:55.360
schedule, single user mode,
and conditional.

00:49:55.380 --> 00:49:58.630
So if you have certain areas of the
file system that have been touched,

00:49:58.670 --> 00:50:01.550
you could actually have RadMine
start running and restore the

00:50:01.550 --> 00:50:03.050
machine to a default state.

00:50:05.030 --> 00:50:08.830
Next, we want to just highlight why
you want to test when you're

00:50:08.840 --> 00:50:09.840
setting up your application.

00:50:09.840 --> 00:50:12.880
First, different environments,
different tools you use

00:50:12.880 --> 00:50:14.300
to capture the install.

00:50:14.300 --> 00:50:17.960
You might run into certain issues
depending on which tools you

00:50:17.960 --> 00:50:20.020
use to track the installation.

00:50:20.020 --> 00:50:23.480
So it's usually useful to have a
test machine and another machine

00:50:23.480 --> 00:50:25.160
that you deploy the tool to.

00:50:25.710 --> 00:50:28.180
Same thing with distribution methods.

00:50:28.180 --> 00:50:31.040
A lot of people use,
there's a large variety of

00:50:31.040 --> 00:50:35.170
different methods from ASR using
GUI front-ends like NetInstall,

00:50:35.250 --> 00:50:35.860
etc.

00:50:35.860 --> 00:50:39.710
And there's other tools like
RSyncX and RadMine or just manually

00:50:39.920 --> 00:50:44.890
going around using either NetInstall
or Apple Remote Desktop installing.

00:50:44.900 --> 00:50:48.330
Each of these methods might cause some
problems when you're distributing.

00:50:48.330 --> 00:50:50.690
So you want to also have a
machine to test those on.

00:50:50.720 --> 00:50:53.110
Things to test,
a lot of these are kind of obvious,

00:50:53.110 --> 00:50:55.440
but a lot of times people
forget to test these.

00:50:55.600 --> 00:50:58.220
When you distribute application,
you want to make sure help works,

00:50:58.220 --> 00:51:00.770
printing, spell check, you know,
the pretty global options.

00:51:00.860 --> 00:51:03.170
And then if you have notable
features of the application,

00:51:03.170 --> 00:51:04.000
you want to test.

00:51:04.000 --> 00:51:06.470
Also,
if the application has any integration,

00:51:06.480 --> 00:51:09.540
so for example, iLife,
you want to make sure you don't break

00:51:09.540 --> 00:51:13.460
that integration by customizing or
modifying the application install.

00:51:17.220 --> 00:51:22.020
So, we've covered a lot today,
and I know that some of it

00:51:22.090 --> 00:51:25.170
probably went by pretty fast,
so we're going to tell you where

00:51:25.170 --> 00:51:27.100
you can get more information.

00:51:27.190 --> 00:51:30.600
First of all,
for Richard and my information,

00:51:30.600 --> 00:51:32.460
both of it's up there.

00:51:32.460 --> 00:51:34.200
That's our email addresses.

00:51:34.200 --> 00:51:38.510
We'll try to answer your
question as best we can.

00:51:38.680 --> 00:51:43.380
The other place that you should
know about is MacOSXlabs.org.

00:51:43.380 --> 00:51:45.120
Both of us actually participate in this.

00:51:45.120 --> 00:51:48.650
We've written a white paper which
actually talks about many of these

00:51:48.650 --> 00:51:54.310
issues and goes into more detail so that
you actually have the time to look at it.

00:51:54.570 --> 00:51:57.550
There's also a website that we will try
to keep more up-to-date than the white

00:51:57.570 --> 00:52:01.260
paper because it's just too hard to keep
the white paper up-to-date all the time.

00:52:01.990 --> 00:52:04.340
And then Richard's institution,
the University of Utah,

00:52:04.340 --> 00:52:07.710
has an application deployment problems
and solutions pages which talks

00:52:07.840 --> 00:52:11.210
about applications that they've
found which may or may not work

00:52:11.210 --> 00:52:12.940
particularly well in an enterprise.