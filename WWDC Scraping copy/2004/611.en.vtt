WEBVTT

00:00:12.300 --> 00:00:22.900
[Transcript missing]

00:00:23.490 --> 00:00:27.400
The Unix permissions model has been
around with us for a while now.

00:00:27.410 --> 00:00:30.400
This weekend we're kind of
trying to track it down,

00:00:30.400 --> 00:00:32.640
how long we've had it.

00:00:32.730 --> 00:00:38.370
Tracked it back to 1979 in the Unix v7,
and then earlier today we

00:00:38.370 --> 00:00:41.100
tracked it back to 1971.

00:00:41.100 --> 00:00:45.220
So it's been around at
least as far back as that.

00:00:45.800 --> 00:00:50.700
I think now for Mac OS X it's time for
us to move beyond that and to actually

00:00:50.700 --> 00:00:53.730
introduce File System Access Controls.

00:00:55.750 --> 00:01:00.310
- So today we're gonna introduce to
you what we're doing in Tiger with

00:01:00.310 --> 00:01:03.800
File System Access Controls
and really try and answer three

00:01:03.800 --> 00:01:06.690
deceptively simple questions.

00:01:06.700 --> 00:01:11.120
What are ACLs or ACLs as
we sometimes call them?

00:01:11.120 --> 00:01:14.620
Why are we adding them to Mac OS X?

00:01:14.630 --> 00:01:18.700
But perhaps more importantly,
how do ACLs affect the way

00:01:18.700 --> 00:01:23.470
that you're developing software
and managing your networks?

00:01:25.820 --> 00:01:29.340
So today we're going to cover
this in seven different topics.

00:01:29.340 --> 00:01:33.440
First, an overview of File System ACLs,
what are the key features

00:01:33.440 --> 00:01:37.600
and benefits of them,
and then present a high-level

00:01:37.600 --> 00:01:42.800
view of the File System ACL model
and its capabilities.

00:01:42.860 --> 00:01:48.040
Then we'll show you how we're
changing Tiger to adapt and to

00:01:48.040 --> 00:01:51.580
provide access to access controls.

00:01:52.160 --> 00:01:57.600
And then a more detailed look at how
it's being supported in the kernel.

00:01:57.730 --> 00:02:02.690
along with some specifics in how
file access controls work and how

00:02:02.700 --> 00:02:06.690
the kernel calculates permissions.

00:02:06.710 --> 00:02:09.900
Then we'll show you the developer
APIs that are available for you for

00:02:09.920 --> 00:02:13.700
controlling access in file systems.

00:02:13.700 --> 00:02:18.670
And then wrap up with how we've
changed our group membership

00:02:18.700 --> 00:02:24.700
and adapted Mac OS X to a more
flexible group membership system.

00:02:24.700 --> 00:02:26.690
So let's get started.

00:02:29.990 --> 00:02:33.280
The purpose of File Access Control is
so we can be more expressive

00:02:33.280 --> 00:02:36.900
and more flexible in how
permissions are used with files.

00:02:36.900 --> 00:02:41.130
Right now the existing model,
it's a bit too crude and a lot of

00:02:41.140 --> 00:02:46.340
times gets in the way of how we're
trying to do our work on a daily basis.

00:02:47.210 --> 00:02:53.090
Some of the key things that we'd like to
achieve this with access control support,

00:02:53.090 --> 00:02:56.390
one, to be able to support
XP clients with our servers.

00:02:56.400 --> 00:03:00.550
A lot of our customers are requiring
this to be able to support their home

00:03:00.550 --> 00:03:05.100
directories and to provide workgroup
services in their Microsoft networks.

00:03:05.100 --> 00:03:08.920
And we'd like to do this
with Mac OS X Server.

00:03:09.100 --> 00:03:11.840
In addition,
we'd like to enable better client

00:03:11.840 --> 00:03:17.160
fit-in of the Mac OS X desktop into
active directory networks so that the

00:03:17.180 --> 00:03:21.860
Mac OS X client can act as a true peer
to the other machines in those networks

00:03:21.860 --> 00:03:28.540
and have full understanding of the
access controls that are in use today on

00:03:28.540 --> 00:03:29.700
the servers that are on those networks.

00:03:29.750 --> 00:03:35.270
and also to provide a foundation
technology for collaborative

00:03:35.270 --> 00:03:39.810
applications so that sharing
between users and different

00:03:39.810 --> 00:03:43.710
groups are easier and more secure.

00:03:43.770 --> 00:03:45.860
And finally,
we'd like to be able to enable

00:03:45.860 --> 00:03:50.890
workflow applications so that the
right permissions are set on documents

00:03:50.900 --> 00:03:57.770
as they go through a workflow
in a somewhat automated fashion.

00:03:59.400 --> 00:04:03.400
Conceptually an ACL is
really very simple.

00:04:03.400 --> 00:04:06.400
It's simply a list of
access control entries.

00:04:06.400 --> 00:04:12.380
Each one of those entries identifies a
user and a set of permissions that are

00:04:12.390 --> 00:04:15.390
either granted or denied for that object.

00:04:15.430 --> 00:04:21.730
And then each ACL is then bound to a
file or directory in the file system.

00:04:24.080 --> 00:04:26.630
So for example,
we can take a look at this

00:04:26.670 --> 00:04:30.490
hypothetical math assignment
document and how we might be able

00:04:30.490 --> 00:04:32.560
to use ACLs to control access to it.

00:04:32.560 --> 00:04:35.770
First of all,
we definitely have to be able to

00:04:35.770 --> 00:04:38.800
have so the teachers can read,
write, and delete the document so

00:04:38.800 --> 00:04:42.320
they can set the assignment.

00:04:42.320 --> 00:04:45.150
Then we have a hypothetical
student teacher called Ms.

00:04:45.280 --> 00:04:50.510
Buxton who is not really ready to provide
assignments or edit assignments and

00:04:50.510 --> 00:04:54.560
she's going to be given read-only access,
but she's actually a member

00:04:54.560 --> 00:04:58.560
of the teacher's group since
she's a student teacher.

00:04:58.560 --> 00:05:03.330
The math students will then have just
read-only access to the assignments

00:05:03.340 --> 00:05:05.740
and everyone else will have no access.

00:05:07.230 --> 00:05:10.480
We'll revisit this example
throughout the presentation,

00:05:10.480 --> 00:05:13.060
providing some more detail
around it and actually how it

00:05:13.060 --> 00:05:15.510
would work within our system.

00:05:17.740 --> 00:05:21.120
So we can go back to our original
statement of flexibility for

00:05:21.120 --> 00:05:24.750
file system access controls,
and we've got some refinements

00:05:24.750 --> 00:05:26.690
now that we can apply to that.

00:05:26.700 --> 00:05:30.690
One, we definitely want to be able to
associate multiple users and groups

00:05:30.700 --> 00:05:34.700
and assign those permissions to
different file system objects.

00:05:34.700 --> 00:05:37.440
As well,
to provide more granular permissions,

00:05:37.440 --> 00:05:41.020
for example, the delete permission,
which you cannot assign to

00:05:41.020 --> 00:05:42.690
an individual file today.

00:05:42.700 --> 00:05:45.670
And then also to support
permissions inheritance,

00:05:45.670 --> 00:05:48.700
which will help enable
our workflow situations.

00:05:48.700 --> 00:05:53.530
And finally, support NT compatibility
of our client and server.

00:05:56.500 --> 00:05:59.540
So now that we have our requirements,
let's take a look at what the

00:05:59.620 --> 00:06:02.990
File System ACL model actually is.

00:06:05.020 --> 00:06:08.450
We can compare this to existing
models that are out there

00:06:08.460 --> 00:06:10.000
today that one might draw from.

00:06:10.000 --> 00:06:13.150
First of all, we can take a look at
Apple share privileges,

00:06:13.150 --> 00:06:17.600
which weren't really in ACL,
but were more capable in some ways than

00:06:17.600 --> 00:06:20.000
the POSIX permissions that we have today.

00:06:20.000 --> 00:06:24.100
For example, we could have assigned
a group as an owner,

00:06:24.100 --> 00:06:27.780
and permissions inheritance was
implicit in the fact that you could

00:06:27.780 --> 00:06:30.660
only assign permissions to folders.

00:06:31.550 --> 00:06:35.840
There's also Andrew File System,
which is very popular for its ACLs.

00:06:35.840 --> 00:06:41.310
And it provides the same ability
to have multiple users and groups,

00:06:41.340 --> 00:06:46.220
also assign permissions to folders,
and introduces some new permissions

00:06:46.220 --> 00:06:49.350
such as the ability to admin and delete.

00:06:50.060 --> 00:06:58.330
The Windows NT model, for example,
introduces fine-grained permissions,

00:06:58.340 --> 00:07:01.760
multiple users and groups,
the ability to allow

00:07:01.760 --> 00:07:07.780
and deny permissions,
as well as defining a set

00:07:07.780 --> 00:07:10.000
of rules for inheritance.

00:07:10.010 --> 00:07:17.580
Finally, there was a POSIX draft,
1003.1e, that defined an ACL model for

00:07:17.580 --> 00:07:20.270
Unix systems as a proposal.

00:07:21.810 --> 00:07:25.380
It provided the same set of
permissions that we have today,

00:07:25.380 --> 00:07:29.300
read, write, and execute,
but allowed also multiple users

00:07:29.310 --> 00:07:33.120
and groups with allow-only
entries and no-deny entries.

00:07:33.140 --> 00:07:38.310
Its inheritance is somewhat limited and
set to a system of default permissions

00:07:38.310 --> 00:07:40.620
for new items in the directory.

00:07:40.620 --> 00:07:45.640
And this proposal has failed
to gain standardization and

00:07:45.640 --> 00:07:48.190
has been since withdrawn.

00:07:58.800 --> 00:08:01.320
So the model that we're
actually going to provide in

00:08:01.320 --> 00:08:06.340
Tiger will support NT semantics,
including the fine-grained permissions

00:08:06.340 --> 00:08:10.280
that are available on NT systems,
as well as found in NFS v4.

00:08:10.280 --> 00:08:15.380
We'll provide for static inheritance
so that you can use the NT rules of

00:08:15.450 --> 00:08:19.810
inheritance to define inheritance
of permissions when items are newly

00:08:19.810 --> 00:08:24.480
created in a directory hierarchy,
as well as supporting allow and

00:08:24.480 --> 00:08:29.430
deny so that you can fine-tune
permissions that are given to a user

00:08:29.430 --> 00:08:32.460
based on group memberships and so on.

00:08:33.500 --> 00:08:37.590
The interesting innovation that we're
going to provide here is combining

00:08:37.590 --> 00:08:42.340
the POSIX and UNIX permissions
that we have today with an ACL,

00:08:42.430 --> 00:08:47.180
which will minimize our ability to
have migration impact and maximize

00:08:47.180 --> 00:08:50.500
compatibility with existing applications.

00:08:50.500 --> 00:08:55.210
Moreover, that you will be able to,
on an existing volume,

00:08:55.210 --> 00:09:00.500
assign ACLs and deploy them in
specific parts of the file system,

00:09:00.500 --> 00:09:04.990
certain directories,
individual file objects, for example,

00:09:04.990 --> 00:09:09.590
without having to reformat the
entire volume to support that.

00:09:10.360 --> 00:09:13.420
Finally,
we have an API based on the POS extract

00:09:13.430 --> 00:09:17.520
that we had talked about earlier,
which provides a level of

00:09:17.520 --> 00:09:22.740
extraction and flexibility to
allow for future extensions.

00:09:26.070 --> 00:09:29.010
So a number of changes that
we're going to make in Tiger to

00:09:29.020 --> 00:09:31.640
support file system ACLs.

00:09:31.670 --> 00:09:35.000
First of that will be
supporting ACLs from the kernel.

00:09:35.050 --> 00:09:42.240
ACLs are part of a new
extended security architecture,

00:09:42.300 --> 00:09:46.940
so ACLs are fully a first-class
security attribute for files.

00:09:46.940 --> 00:09:50.530
And this will require
support deep in the kernel,

00:09:50.540 --> 00:09:55.440
and Mike Smith will come and explain
this to us in detail later on.

00:09:55.440 --> 00:09:58.380
As part of this,
we've had to revisit how we

00:09:58.380 --> 00:10:00.430
address groups in Mac OS X.

00:10:00.450 --> 00:10:04.790
So we're eliminating the existing
16-group membership limit and

00:10:04.790 --> 00:10:08.430
adding support for nested groups.

00:10:10.780 --> 00:10:17.500
In HFS+, ACLs will be supported based
on new support for extended attributes.

00:10:17.500 --> 00:10:24.730
Extended attributes are a new
functionality in HFS+ in Tiger that's

00:10:24.730 --> 00:10:31.630
built on some pre-existing definitions
in the specification for HFS so that it

00:10:31.660 --> 00:10:35.940
doesn't require completely reformatting
the volumes to take advantage of this.

00:10:35.940 --> 00:10:40.930
The new structures and information
required in the volume format can be

00:10:40.930 --> 00:10:46.980
built out transparently as you assign
ACLs and extended attributes to items.

00:10:47.460 --> 00:10:49.310
And finally,
this will be available both in

00:10:49.310 --> 00:10:52.510
the Tiger client and Tiger server.

00:10:55.770 --> 00:11:00.740
Of course, changing the SMB client is
another important feature

00:11:00.740 --> 00:11:06.820
for us in our ACL strategy,
providing us with a good client

00:11:06.820 --> 00:11:13.850
fit-in in Microsoft networks and the
ability to view users and groups from

00:11:13.860 --> 00:11:20.270
Active Directory and edit the ACLs
that are in the files on NT servers.

00:11:26.790 --> 00:11:30.080
And of course we'll also be
updating AFP and the AFP client

00:11:30.100 --> 00:11:32.580
to support ACLs natively.

00:11:36.500 --> 00:11:38.510
Altogether,
the changes in the kernel and file

00:11:38.510 --> 00:11:44.780
system provide us a good foundation
for extended permissions in Tiger.

00:11:49.470 --> 00:11:53.300
Through the POSIX and Carbon layers,
your applications will gain access to

00:11:53.300 --> 00:12:00.290
the ACL APIs so that you can change
and manipulate ACLs from your software,

00:12:00.290 --> 00:12:05.540
and also providing command line
tools for management of systems,

00:12:05.540 --> 00:12:10.560
including LS and Chmod, for example,
to view and edit ACLs,

00:12:10.640 --> 00:12:15.940
but also in command line tools like CP,
because now we need to preserve this

00:12:15.940 --> 00:12:18.410
new information when we copy files.

00:12:21.400 --> 00:13:21.100
[Transcript missing]

00:13:21.300 --> 00:13:24.130
With our solution,
you actually end up with a full

00:13:24.130 --> 00:13:28.710
fidelity solution because the file
system permissions already have

00:13:28.710 --> 00:13:32.610
the same finer-grained permissions
that are found on the NT systems

00:13:32.610 --> 00:13:34.480
that it's being served to.

00:13:38.410 --> 00:13:45.490
This is also reflected in the AFP server
where we'll be showing permissions as

00:13:45.640 --> 00:13:49.330
effective permissions to Panther and
earlier clients because they don't have

00:13:49.340 --> 00:13:54.300
the current capability of understanding
the more fine-grained ACL permissions.

00:13:54.310 --> 00:13:58.300
But full ACL permissions will
be exposed to Tiger clients.

00:13:58.300 --> 00:14:02.710
But both Samba and AFP together
will work from the same basic set of

00:14:02.710 --> 00:14:07.340
permissions in the local file system,
providing very unified support

00:14:07.340 --> 00:14:11.000
to both clients and the same
capabilities in each platform.

00:14:15.010 --> 00:14:19.360
Through Finder we'll be
supporting editing ACLs from

00:14:19.360 --> 00:14:24.300
the desktop on both AFP,
SMP, and local volumes.

00:14:25.200 --> 00:14:29.580
And of course in our server tools,
providing very flexible management of

00:14:29.580 --> 00:14:34.130
ACLs in a much more fine-grained manner,
including the ability for

00:14:34.130 --> 00:14:37.370
you to set presets and define
your own permissions mask,

00:14:37.400 --> 00:14:42.090
making management of ACLs
very efficient and easy.

00:14:45.030 --> 00:14:48.940
All in all, I think we've got a very
complete and comprehensive set

00:14:48.940 --> 00:14:53.600
of changes in Tiger for ACLs.

00:14:53.610 --> 00:14:58.240
Now I'd like to introduce you
Mike Smith from CoreOS Engineering.

00:15:06.200 --> 00:15:07.190
Thanks, Rusty.

00:15:07.200 --> 00:15:16.230
So, in the next few minutes, I guess,
I'll be talking about the kernel changes,

00:15:16.230 --> 00:15:21.430
the introduction of new centralized
authorization infrastructure

00:15:21.430 --> 00:15:23.120
that we're calling KAUF.

00:15:23.140 --> 00:15:27.700
I'll talk a little bit about
some details of the ACL format,

00:15:27.700 --> 00:15:31.490
mostly internal details
for reference purposes,

00:15:31.570 --> 00:15:35.330
and we'll work through a brief
example using the scenario

00:15:35.330 --> 00:15:38.540
that Rusty raised earlier,
and then I'll talk a little

00:15:38.540 --> 00:15:40.330
bit about the developer API.

00:15:40.340 --> 00:15:43.510
I'm not actually going to bore
you by working through the

00:15:43.510 --> 00:15:45.380
entire API detail by detail.

00:15:45.380 --> 00:15:47.640
The documentation will be
available in good time,

00:15:47.640 --> 00:15:50.710
but it will go through a code
sample to give you a feel for

00:15:50.970 --> 00:15:52.980
what we're actually doing.

00:15:53.930 --> 00:15:58.270
So when we embarked on supporting ACLs,
we already knew that we were

00:15:58.280 --> 00:16:00.900
going to need a centralized
authorization infrastructure.

00:16:00.900 --> 00:16:05.980
The existing authorization
mechanisms inside the Mac OS kernel,

00:16:05.980 --> 00:16:09.870
whilst more than adequate to the task,
are relatively ad hoc authorization

00:16:09.870 --> 00:16:11.890
decisions made all over the place.

00:16:11.900 --> 00:16:15.560
There is some duplication of code,
and this works okay because the

00:16:15.560 --> 00:16:17.890
model we've been working with
has been relatively simple.

00:16:17.900 --> 00:16:24.180
However, ACLs and the like introduce
considerable complexities,

00:16:24.180 --> 00:16:27.340
and so it's fairly important for us
to reduce the amount of work that

00:16:27.340 --> 00:16:31.290
file system developers need to do,
and also to just overall reduce the

00:16:31.290 --> 00:16:33.900
code bulk and replication of code.

00:16:33.900 --> 00:16:39.710
Authorization itself inside the kernel
really involves knowing three things:

00:16:40.290 --> 00:16:42.940
Who you are actually
performing the action for,

00:16:42.940 --> 00:16:47.190
what you're operating on,
and what the actual operation is,

00:16:47.190 --> 00:16:49.860
the specific details related to it.

00:16:50.000 --> 00:16:55.760
Kayoth provides management for
credentials which are our identification,

00:16:55.760 --> 00:16:57.980
user identification.

00:16:57.980 --> 00:17:02.350
It supports processing of ACLs,
provides helper functions

00:17:02.350 --> 00:17:05.660
for translation and the like.

00:17:05.660 --> 00:17:08.700
And it provides a flexible
mechanism for defining actions

00:17:08.700 --> 00:17:11.870
as well as a plug-in architecture
that allows third-party modules to

00:17:11.870 --> 00:17:16.760
participate in the authorization
process on a per-scope basis.

00:17:16.760 --> 00:17:20.780
We expect this to be of particular
interest to folks writing virus filters,

00:17:20.780 --> 00:17:23.920
but potentially also
other content filters.

00:17:23.920 --> 00:17:26.970
And the functionality
is very much open-ended,

00:17:26.970 --> 00:17:31.110
so if you find yourself having a
desire to control the way that access

00:17:31.120 --> 00:17:35.200
to particular resources is managed,
then you can basically write a module

00:17:35.200 --> 00:17:36.910
against our API and just get involved.

00:17:38.370 --> 00:17:43.300
The consequence of all of this is that
the ACLs are then fully integrated with

00:17:43.300 --> 00:17:46.290
the kernel authorization subsystem.

00:17:47.300 --> 00:17:51.290
Again, in the vein of reducing the amount
of work that individual file

00:17:51.290 --> 00:17:56.850
systems and modules need to perform,
we've layered ACL implementation over

00:17:56.850 --> 00:17:59.200
the top of extended attribute support.

00:17:59.200 --> 00:18:05.310
So any file system that supports
extended attributes gets ACLs for free.

00:18:05.830 --> 00:18:11.990
File systems that have their
own ACL model can translate

00:18:11.990 --> 00:18:14.150
to and from our format.

00:18:14.150 --> 00:18:18.800
As we're using the
Microsoft NFS v4 semantic,

00:18:18.800 --> 00:18:22.240
generally for file systems
with native ACL models,

00:18:22.260 --> 00:18:26.020
these translations have already been
explored and so they're well understood.

00:18:27.170 --> 00:18:32.100
And again, as Rusty pointed out,
we will continue to support POSIX ACLs.

00:18:32.100 --> 00:18:35.400
The default processing for ACLs
leaves you in a situation when

00:18:35.400 --> 00:18:38.030
you're at the end of the ACL,
and I'll get into that in

00:18:38.030 --> 00:18:41.090
more detail in a little bit,
where you would deny the request.

00:18:41.100 --> 00:18:42.670
In our case,
we will simply fall through and

00:18:42.680 --> 00:18:44.100
consider the POSIX permissions.

00:18:44.100 --> 00:18:46.550
And this gives the expected behavior.

00:18:46.550 --> 00:18:50.320
If you have a file with existing
POSIX permissions and you want

00:18:50.320 --> 00:18:53.100
to add extra control to it,
you can apply an ACL.

00:18:53.100 --> 00:18:56.100
The processing of the tool will behave
pretty much as you expect it to.

00:19:00.910 --> 00:19:04.800
This is a simplified overview
of the way that things look now

00:19:04.800 --> 00:19:09.440
with the KL subsystem interacting
with the VFS to provide the new

00:19:09.440 --> 00:19:10.800
authorization functionality.

00:19:10.800 --> 00:19:15.800
The interesting item on this particular
diagram is the group membership resolver.

00:19:15.800 --> 00:19:18.920
As Rusty mentioned,
we're going beyond the 16-group limit,

00:19:18.920 --> 00:19:20.800
integrating with Active Directory.

00:19:20.800 --> 00:19:24.170
It's no longer practical for us
to keep a complete list of all of

00:19:24.170 --> 00:19:27.890
the groups that every credential
is a member of inside the kernel,

00:19:27.890 --> 00:19:29.800
so we need an external
resolution service.

00:19:36.050 --> 00:19:40.160
I'm just going to talk
briefly now about our formats.

00:19:40.160 --> 00:19:43.230
This is obviously not a
comprehensive description.

00:19:43.230 --> 00:19:47.230
We'd really rather that you used our
API for actually manipulating these,

00:19:47.240 --> 00:19:51.560
but understanding what's going on
under the covers may help you keep up.

00:19:51.560 --> 00:19:52.770
Some terminology.

00:19:52.770 --> 00:19:56.560
Rusty's already briefly talked
about access control entries.

00:19:56.560 --> 00:20:02.430
They associate an identifier of
some sort with a set of permissions.

00:20:02.840 --> 00:20:13.420
Access Control List.

00:20:13.420 --> 00:20:13.420
The word list is kind of important
because it's an ordered list.

00:20:13.420 --> 00:20:13.420
The processing of an ACL is
dependent upon the order

00:20:13.420 --> 00:20:13.420
of the entries in the list.

00:20:13.900 --> 00:20:17.300
The User ID and Group ID you
should be familiar with already.

00:20:17.300 --> 00:20:21.050
They're the current 32-bit
user and group identifiers that

00:20:21.050 --> 00:20:22.800
we've been using for some time.

00:20:22.810 --> 00:20:27.060
We're introducing a new globally
unique ID which can be applied

00:20:27.060 --> 00:20:28.800
to both users and groups.

00:20:28.800 --> 00:20:34.800
This is to deal with a situation where
you may have very large numbers of users

00:20:34.800 --> 00:20:38.800
or you may have groups of users that
have not been maintained coherently.

00:20:38.800 --> 00:20:44.300
So you run into the problems of either
exhausting the user ID space or simply

00:20:44.300 --> 00:20:47.800
having collisions to users numbered 500,
for example.

00:20:47.800 --> 00:20:50.800
The GUID is randomly generated.

00:20:50.800 --> 00:20:51.800
It's guaranteed to be unique.

00:20:51.800 --> 00:20:54.800
It operates in a 128-bit space.

00:20:54.800 --> 00:21:00.020
And so you can uniquely identify
objects by their ownership

00:21:00.020 --> 00:21:02.800
even if you move them around.

00:21:02.800 --> 00:21:04.800
You have a permanent handle for them.

00:21:04.800 --> 00:21:07.190
And the discussion is not really
complete without mentioning

00:21:07.190 --> 00:21:08.800
Microsoft's security outpost.

00:21:08.800 --> 00:21:12.100
identifier, which is a structured

00:21:12.230 --> 00:21:16.490
The data item that is
used with SMB operations,

00:21:16.490 --> 00:21:20.200
it performs very much the same
functionality as the GUID.

00:21:20.200 --> 00:21:23.550
Microsoft chose to embed information
in there rather than using an

00:21:23.550 --> 00:21:26.200
indirect reference to the information.

00:21:26.200 --> 00:21:30.350
The Kauth subsystem provides
functionality for translations

00:21:30.390 --> 00:21:32.200
between all of these items.

00:21:32.200 --> 00:21:35.750
So if you have a GUID,
you can get the UID, you can get the SID.

00:21:39.090 --> 00:21:43.400
On a local file system that's using
our extended attribute support,

00:21:43.400 --> 00:21:47.350
we'll be storing a GUID for the
owner of the object and the access

00:21:47.350 --> 00:21:51.350
control list in the extended
API as an extended attribute.

00:21:51.330 --> 00:21:54.300
Obviously, again,
we would like you to use our

00:21:54.300 --> 00:21:56.300
API functions for manipulating these.

00:21:56.300 --> 00:21:59.040
You may be getting a common theme here.

00:21:59.250 --> 00:22:05.240
One useful thing to note is that because
we are tracking the owner with a GUID,

00:22:05.240 --> 00:22:08.500
it becomes possible for
groups to own objects.

00:22:08.600 --> 00:22:16.080
Thank you for joining us.

00:22:16.080 --> 00:22:16.080
I'm Mike Smith, and I'm the executive
director of Open Directory.

00:22:17.600 --> 00:22:22.040
Dice, again,
associates an identifier with some

00:22:22.040 --> 00:22:26.480
access rights and control bits
which determine whether or not

00:22:26.500 --> 00:22:30.500
those rights are granted or denied,
and also some bits

00:22:30.500 --> 00:22:32.470
controlling inheritance.

00:22:36.460 --> 00:22:37.560
More lists of stuff.

00:22:37.610 --> 00:22:42.400
These are the access permissions that we
provide for controlling access to files.

00:22:42.400 --> 00:22:47.400
You can independently control reading,
writing, executing of the file,

00:22:47.400 --> 00:22:51.400
deletion of individual files,
obviously appending of data.

00:22:51.400 --> 00:22:55.840
And then read/write control individually
over the file's basic attributes,

00:22:55.840 --> 00:22:58.890
time stamps and the like,
extended attributes with the

00:22:58.890 --> 00:23:03.350
exclusion of the security information,
the security information itself,

00:23:03.350 --> 00:23:06.840
and you can also grant individuals
or groups the rights to change

00:23:06.850 --> 00:23:08.390
the ownership of a file.

00:23:09.600 --> 00:23:12.600
The permissions associated with
directories are very similar.

00:23:12.600 --> 00:23:17.600
Obviously, we substitute read and write
with list and add file.

00:23:17.600 --> 00:23:21.300
Searching in the directory,
it's possible to search within a

00:23:21.300 --> 00:23:24.180
directory for a file if you know
the file's name without having to

00:23:24.180 --> 00:23:25.600
have rights to access a visitor.

00:23:25.600 --> 00:23:28.600
Pretty much parallels to the
current Unix permissions.

00:23:28.600 --> 00:23:33.210
And again, the controls on rewrite of
attributes and ownership.

00:23:36.640 --> 00:23:40.890
The flags applied to an individual
ACE obviously allow and deny,

00:23:40.890 --> 00:23:48.500
but the inheritance is perhaps something
that's not quite so well understood.

00:23:48.500 --> 00:23:53.870
Directory objects allow you to specify
ACEs which will be inherited either

00:23:53.870 --> 00:23:58.500
by child directories or by files,
and also allow you to control

00:23:58.500 --> 00:24:01.500
whether those are inherited
once or multiple times.

00:24:01.500 --> 00:24:04.500
This is what Rusty was referring
to as static inheritance.

00:24:04.500 --> 00:24:08.640
It effectively allows you to set
up template ACLs for both files and

00:24:08.640 --> 00:24:10.500
directories created inside others.

00:24:10.500 --> 00:24:14.390
It allows you to establish
permissions on objects so that an

00:24:14.390 --> 00:24:19.000
individual can create an object but
may not necessarily subsequently

00:24:19.010 --> 00:24:21.500
have full access to that object.

00:24:21.500 --> 00:24:24.940
It's a real support for
the workflow environment.

00:24:29.750 --> 00:24:33.640
So I'm going to come back to
Rusty's scenario here and work

00:24:33.650 --> 00:24:36.570
through a couple of brief examples.

00:24:37.440 --> 00:24:42.080
Just to recap, we have a school network.

00:24:42.080 --> 00:24:45.300
We have a group which
contains all the teachers.

00:24:45.300 --> 00:24:47.400
We have a group which
contains the math students.

00:24:47.400 --> 00:24:48.920
We have a student teacher, Ms.

00:24:48.920 --> 00:24:51.280
Buxton,
who is part of the teachers group because

00:24:51.280 --> 00:24:53.400
she needs access to teachers-only files.

00:24:53.400 --> 00:25:00.560
But right now we don't want to
grant her the ability to write to

00:25:00.560 --> 00:25:00.560
this particular math assignment.

00:25:00.790 --> 00:25:04.960
So we rephrase this as an
ACL with three ordered entries.

00:25:05.040 --> 00:25:07.780
First up,
we put a denial entry which prevents Ms.

00:25:07.820 --> 00:25:11.690
Buxton from either writing or
deleting that math assignment.

00:25:11.700 --> 00:25:14.130
We have a blanket allow for
teachers that allows them to

00:25:14.130 --> 00:25:18.020
rewrite and delete the file,
and allow for math students who

00:25:18.060 --> 00:25:20.000
actually want to read the file.

00:25:20.060 --> 00:25:24.570
And when we're processing an ACL,
we process each entry in order.

00:25:25.910 --> 00:25:31.300
In entries, ID is compared against
the ID of the requester.

00:25:31.300 --> 00:25:34.390
If they're not identical or if
the requester is not a member of

00:25:34.390 --> 00:25:37.960
the group called out in the entry,
then we just ignore the entry.

00:25:37.960 --> 00:25:40.990
If they are a member,
then we look at whether the

00:25:40.990 --> 00:25:43.430
entry is an allow or deny entry.

00:25:43.450 --> 00:25:46.420
If it's a deny entry,
we take the permissions that are

00:25:46.420 --> 00:25:48.600
being requested by the operation.

00:25:48.610 --> 00:25:53.480
If any of them are denied by the entry,
we stop processing at that point.

00:25:53.700 --> 00:25:56.880
alternatively,
if we cumulatively accumulate all of the

00:25:56.880 --> 00:26:00.480
requested permissions from allow entries,
then we allow the operation.

00:26:01.600 --> 00:26:05.600
In this particular example,
let's consider a math student who

00:26:05.600 --> 00:26:07.100
wants to open the file read-only.

00:26:07.100 --> 00:26:09.610
Perhaps they're copying it off
to a private disk so they can

00:26:09.610 --> 00:26:10.940
take it home and work on it.

00:26:11.000 --> 00:26:13.360
They'll be requesting read access.

00:26:13.360 --> 00:26:15.070
We look at the first entry, Ms.

00:26:15.070 --> 00:26:16.870
Buxton, math student, not Ms.

00:26:16.870 --> 00:26:17.850
Buxton.

00:26:17.850 --> 00:26:17.850
Fine.

00:26:17.840 --> 00:26:19.790
Second entry, math student,
not a teacher.

00:26:19.800 --> 00:26:21.610
Okay, ignore that one too.

00:26:21.610 --> 00:26:22.680
Third one, math student.

00:26:22.700 --> 00:26:24.280
Okay, they want read.

00:26:24.280 --> 00:26:25.400
It says they can have read.

00:26:25.400 --> 00:26:27.390
They get to read the file.

00:26:28.040 --> 00:26:31.080
If we look at another example, Ms.

00:26:31.080 --> 00:26:33.120
Buxton is attempting to save over
a copy of the math assignment,

00:26:33.120 --> 00:26:35.000
and maybe she just made a mistake.

00:26:35.000 --> 00:26:37.990
Maybe she feels that she's going
to be a hacker one of these days.

00:26:38.040 --> 00:26:39.000
Who knows?

00:26:39.000 --> 00:26:41.370
She's going to want,
she will have opened the

00:26:41.380 --> 00:26:45.110
file using read permissions,
would have looked at the first entry,

00:26:45.110 --> 00:26:45.620
deny Ms.

00:26:45.620 --> 00:26:46.770
Buxton, okay, this applies to Ms.

00:26:46.780 --> 00:26:50.000
Buxton, but it's only denying her,
write and delete, okay,

00:26:50.000 --> 00:26:52.000
so we don't block her there.

00:26:52.070 --> 00:26:53.090
Second entry, Ms.

00:26:53.090 --> 00:26:55.690
Buxton, she's a teacher,
she's allowed to read,

00:26:55.690 --> 00:26:57.000
she can read the file.

00:26:57.000 --> 00:26:59.980
Comes time to save,
she wants write access.

00:26:59.980 --> 00:27:01.630
First entry, Ms.

00:27:01.630 --> 00:27:04.000
Buxton, write, denied.

00:27:04.110 --> 00:27:07.600
So you can express things with
even a simple ACL like this that

00:27:07.600 --> 00:27:11.130
would not be possible with the
traditional POSIX permissions,

00:27:11.130 --> 00:27:15.610
and obviously I've kept this example
short because it could go on forever.

00:27:20.120 --> 00:27:24.130
The developer API,
we went around with this several times,

00:27:24.130 --> 00:27:28.000
but ultimately decided that
rather than trying to introduce

00:27:28.000 --> 00:27:33.520
a great deal of new API,
we would try and stay as

00:27:33.520 --> 00:27:37.500
close to the POSIX API,
the existing API that you folks

00:27:37.500 --> 00:27:39.000
are familiar with already.

00:27:39.440 --> 00:27:42.060
Certainly in philosophy, obviously,
we needed some extra functionality

00:27:42.060 --> 00:27:43.300
and we had a bunch more details.

00:27:43.300 --> 00:27:47.590
We tried to avoid namespace collisions
so that you don't suddenly discover

00:27:47.590 --> 00:27:49.300
that there are symbols in your
application that are colliding

00:27:49.300 --> 00:27:51.300
with definitions and header files.

00:27:51.300 --> 00:27:55.460
And we've avoided exposing
any data structures directly.

00:27:55.460 --> 00:28:00.300
Rather, we've preferred to stick with
accessor functions in a fashion

00:28:00.300 --> 00:28:03.260
that will allow you to remain
binary compatible even if we need

00:28:03.260 --> 00:28:05.920
to add extra security information.

00:28:09.410 --> 00:28:13.460
Obviously, if your application doesn't
care about access controls,

00:28:13.460 --> 00:28:14.690
I'm not quite sure why
you're here right now,

00:28:14.700 --> 00:28:18.400
but your application can
continue to not care.

00:28:18.400 --> 00:28:24.360
We're not really changing the
basic concept of having security

00:28:24.360 --> 00:28:28.530
information associated with a file,
we're just being much more eloquent

00:28:28.530 --> 00:28:28.530
about what you can express with it.

00:28:29.030 --> 00:28:35.990
It becomes particularly important with
the extra complexity that go with ACLs

00:28:36.060 --> 00:28:39.840
that applications not try to simply
look at a file security information and

00:28:39.840 --> 00:28:43.980
determine from that security information
whether or not something that they're

00:28:43.980 --> 00:28:45.940
going to do is going to be successful.

00:28:45.940 --> 00:28:51.240
The group membership resolution
process can be time consuming.

00:28:51.240 --> 00:28:54.200
There may also be other things
going on behind the scenes.

00:28:54.200 --> 00:28:56.010
And finally,
the file that you're attempting

00:28:56.010 --> 00:28:58.450
to access may actually not be
on the local machine at all.

00:28:58.450 --> 00:29:01.730
It may be on a remote file server
which potentially has completely

00:29:01.730 --> 00:29:05.370
different rules for evaluating whether
or not you're going to have access.

00:29:05.440 --> 00:29:08.980
So if you can at all get away with it,
just go ahead and try the operation.

00:29:08.980 --> 00:29:10.520
Be prepared for it to fail.

00:29:10.530 --> 00:29:13.170
Have a good recovery,
good back out scenario.

00:29:13.170 --> 00:29:16.240
But don't count on guessing ahead
of time whether or not you're going

00:29:16.240 --> 00:29:17.440
to be able to process something.

00:29:19.360 --> 00:29:21.180
Obviously,
some applications do need to know.

00:29:21.180 --> 00:29:23.680
If you want feedback
for a GUI application,

00:29:23.680 --> 00:29:26.970
you want to be able to gray out
the icon as you mouse over it,

00:29:26.970 --> 00:29:27.740
whatever.

00:29:27.780 --> 00:29:30.900
We do provide interfaces for that.

00:29:30.900 --> 00:29:33.500
At the POSIX level you
have the access function.

00:29:33.500 --> 00:29:36.010
There are other functions in Carbon.

00:29:36.050 --> 00:29:38.040
These will take ACLs into account.

00:29:38.140 --> 00:29:40.740
They'll use the same K-auth
infrastructure that's used

00:29:40.740 --> 00:29:43.110
for actual access checking.

00:29:43.150 --> 00:29:45.070
But there are scenarios in
which even those aren't going

00:29:45.090 --> 00:29:46.360
to be able to give you answers.

00:29:46.360 --> 00:29:50.160
So you need to be prepared for the
situation where we simply can't

00:29:50.160 --> 00:29:52.040
tell you ahead of time whether
something's going to succeed.

00:29:52.040 --> 00:29:55.970
You're just going to have to be prepared
to try it and deal with the situation.

00:29:59.210 --> 00:30:02.300
So some applications do need to care.

00:30:02.300 --> 00:30:06.100
Obviously anyone who cares about security
of the files they're working with,

00:30:06.100 --> 00:30:08.770
archivers and copiers
that want to be accurate,

00:30:08.770 --> 00:30:12.100
that want to preserve the
information that already exists

00:30:12.100 --> 00:30:15.730
in the security structures.

00:30:16.450 --> 00:30:19.100
Anyone who is providing file
management functionality,

00:30:19.100 --> 00:30:21.890
whether you're a finder analogue,
whether you're simply an

00:30:21.890 --> 00:30:24.630
enhanced open/closed dialog,
whether you have some other

00:30:24.630 --> 00:30:27.410
way of representing files,
you're going to need to be able to

00:30:27.410 --> 00:30:31.390
provide folks with the opportunity to
edit security information on the files.

00:30:31.400 --> 00:30:33.890
And so you will need to use
these APIs and you'll need to

00:30:33.930 --> 00:30:35.400
come up with UI and so forth.

00:30:35.400 --> 00:30:39.410
And obviously, we're building this
functionality so that you,

00:30:39.410 --> 00:30:43.390
as developers, can produce things that
we never thought of.

00:30:43.400 --> 00:30:47.220
And so if you find that ACLs are
relevant to something you want to do,

00:30:47.220 --> 00:30:49.160
then you'll need to use them.

00:30:53.330 --> 00:30:57.570
Again, with this particular API,
our philosophy was to try and

00:30:57.570 --> 00:31:02.200
avoid unnecessary changes to keep
with the spirit of the POSIX APIs.

00:31:02.200 --> 00:31:06.540
So we've encapsulated all of
the file security information

00:31:06.540 --> 00:31:11.200
into an opaque object,
a thing we call the FileSecT.

00:31:11.250 --> 00:31:16.210
And this is then passed around,
so stat becomes statX with

00:31:16.220 --> 00:31:19.330
an NP suffix so that you know
this is not a portable call,

00:31:19.330 --> 00:31:21.180
and it returns your FileSecT.

00:31:21.200 --> 00:31:24.200
OpenX takes one instead of a ModeT.

00:31:24.200 --> 00:31:26.200
ChmodX takes a FileSec.

00:31:26.200 --> 00:31:28.200
It's the same all the way around.

00:31:28.230 --> 00:31:30.840
The ACL is part of the
file security object,

00:31:30.840 --> 00:31:34.600
so the owner, the group,
the POSIX mode were applicable.

00:31:35.060 --> 00:31:38.710
We provide an API for the
manipulation of the file set.

00:31:38.730 --> 00:31:42.810
Basically get set,
check whether it's valid, clear it,

00:31:42.810 --> 00:31:44.000
functionality.

00:31:44.000 --> 00:31:47.980
And we provide an API for
manipulating the ACL itself,

00:31:47.990 --> 00:31:53.000
which is based on the POSIX 10031E API.

00:31:53.030 --> 00:31:57.000
Obviously we needed to make some
changes to cope with the differences.

00:31:57.000 --> 00:32:01.490
But since there is a good deal of
established code and understanding

00:32:01.490 --> 00:32:05.150
and documentation already
available for the manipulation API,

00:32:05.150 --> 00:32:07.760
we decided that was the best way to go.

00:32:12.470 --> 00:32:17.540
So I'm going to finish up here
with a brief example of creating

00:32:17.540 --> 00:32:20.140
a file with an ACL associated.

00:32:20.430 --> 00:32:23.910
In this particular case,
we don't have to be the individual

00:32:23.920 --> 00:32:26.790
that is passed in as the

00:32:27.300 --> 00:32:30.610
We can go ahead and,
since we're creating the file,

00:32:30.610 --> 00:32:33.300
we can basically apply
whatever ACL we like.

00:32:33.300 --> 00:32:35.300
So we start off, we create an empty ACL.

00:32:35.300 --> 00:32:37.410
It's fairly straightforward.

00:32:37.600 --> 00:32:40.160
We create an entry in the ACL.

00:32:40.160 --> 00:32:43.450
At this point in time,
both the ACL and the entry are blank.

00:32:44.690 --> 00:32:49.540
And then we apply the qualifier--
we apply the qualifier,

00:32:49.540 --> 00:32:53.590
in this case the GUID, to the ACL--sorry,
to the ACE.

00:32:53.600 --> 00:32:55.350
My apologies.

00:32:56.030 --> 00:32:59.400
And we'll turn this into an allow-ace
because we're going to grant read-only

00:32:59.400 --> 00:33:02.300
access to the GUI that's been passed in.

00:33:02.380 --> 00:33:06.740
So we fetch the flags for the ACE,
we clear them just as a proportion,

00:33:06.740 --> 00:33:09.010
and then we set the allow bit.

00:33:11.540 --> 00:33:13.260
We get the permissions for the ACE.

00:33:13.290 --> 00:33:15.500
Again, we'll clear them as a precaution.

00:33:15.500 --> 00:33:19.580
And we'll grant the ability
to read data attributes,

00:33:19.600 --> 00:33:21.500
extended attributes,
and security information.

00:33:21.500 --> 00:33:23.500
And then we apply those to the ACE.

00:33:23.500 --> 00:33:26.500
And so right now we've
created an ACE with one entry.

00:33:26.500 --> 00:33:30.370
Grants this particular
GUID read-only access to the file.

00:33:31.710 --> 00:33:33.900
Next we create ourselves
a file security object.

00:33:33.900 --> 00:33:35.770
Since we're starting from
scratch we don't have one

00:33:35.770 --> 00:33:37.800
of these from a stack call.

00:33:38.510 --> 00:33:41.970
We apply the ACL to the
File Security Object,

00:33:41.980 --> 00:33:44.040
and then we can drop the
ACL because we've copied it

00:33:44.040 --> 00:33:46.200
into the File Security Object.

00:33:46.740 --> 00:33:50.580
We'll turn off the POSIX permissions
so that only the ACL applies

00:33:50.580 --> 00:33:52.650
to this particular file.

00:33:53.040 --> 00:33:54.660
And then we'll create the file.

00:33:54.660 --> 00:33:56.300
As you can see,
this looks just like an open call

00:33:56.300 --> 00:33:59.780
except we're passing the file
security object rather than a mode in.

00:33:59.810 --> 00:34:04.170
As with the traditional open,
we can actually open for any sort of

00:34:04.170 --> 00:34:07.800
access regardless of the permissions
that we've associated with the file.

00:34:07.820 --> 00:34:12.220
This actually allows us to create
a file securely that we have

00:34:12.220 --> 00:34:14.920
write access to because we're
copying into it or whatever,

00:34:14.920 --> 00:34:17.200
but that no one else
can open for writing.

00:34:19.300 --> 00:34:21.590
We're going to clean up when we're done.

00:34:21.590 --> 00:34:25.060
So I'm going to hand
this back to Rusty now.

00:34:25.060 --> 00:34:27.800
He'll talk to us a little
bit about group membership.

00:34:39.530 --> 00:34:44.460
Now we're going to talk a bit about group
membership and its relation to ACLs.

00:34:44.460 --> 00:34:46.620
As we were going through
the design of ACLs,

00:34:46.630 --> 00:34:51.030
it became very apparent that the existing
model that we had for group membership

00:34:51.030 --> 00:34:55.340
really was not scalable enough,
nor was it precise enough for the things

00:34:55.340 --> 00:34:58.050
that we wanted to do with access control.

00:35:00.160 --> 00:35:03.220
So in Tiger,
we're going to make it more scalable,

00:35:03.220 --> 00:35:08.100
more robust, eliminate the 16 group limit
that we have today in Panther.

00:35:08.100 --> 00:35:13.110
And this, as you see,
is with the group membership

00:35:13.110 --> 00:35:18.270
resolver and the kernel's ability
to defer looking up groups until the

00:35:18.270 --> 00:35:20.100
time that it's actually necessary.

00:35:20.100 --> 00:35:23.100
So today when you log in
with a Panther system,

00:35:23.100 --> 00:35:26.780
it needs to go out onto the
directory and discover all the

00:35:26.790 --> 00:35:31.100
groups to which you are a member,
even if there are only 4, 5, or 16.

00:35:31.100 --> 00:35:35.250
Taking the first 16 that it finds,
and those become the groups

00:35:35.250 --> 00:35:38.100
that you derive permission from.

00:35:39.810 --> 00:35:43.140
will also be supporting nested groups.

00:35:43.140 --> 00:35:48.700
The daemon will be able to
expand group memberships and

00:35:48.710 --> 00:35:53.360
test membership against that,
as well as provide compatibility

00:35:53.380 --> 00:35:56.010
with legacy software.

00:35:59.860 --> 00:36:04.700
So in the directory we'll require
a new group schema to support this.

00:36:04.700 --> 00:36:09.250
This new group schema is based on an
authoritative list of GUIDs rather than

00:36:09.250 --> 00:36:11.980
using short names to define membership.

00:36:12.030 --> 00:36:15.200
And these GUIDs may reference
either other users or other groups,

00:36:15.200 --> 00:36:19.260
which provides us the nesting
capabilities and provides us for future

00:36:19.260 --> 00:36:24.160
expansion since GUIDs can really be
referencing any type of object out there,

00:36:24.190 --> 00:36:28.590
including computers or things that
devices we haven't really thought of yet.

00:36:29.090 --> 00:36:34.300
Groups are also further identified
by their legacy group ID and

00:36:34.350 --> 00:36:37.230
optionally the NT secure ID.

00:36:37.240 --> 00:36:42.000
This provides us with the ability
to provide static translations for

00:36:42.000 --> 00:36:48.900
clients such as XP clients or a
service such as the Samba service.

00:36:50.560 --> 00:36:54.340
When binding to
Active Directory networks,

00:36:54.340 --> 00:36:57.100
you don't need to
change the schema there.

00:36:57.100 --> 00:37:00.680
The group resolution daemon
understands the schema that's

00:37:00.680 --> 00:37:05.530
present in Active Directory networks
and can work with them.

00:37:14.480 --> 00:37:18.800
So as we said before,
Panther is using a 16-group array.

00:37:18.800 --> 00:37:23.700
Integra will be using a new group
membership service to replace that.

00:37:23.700 --> 00:37:27.940
It provides a group expansion
capabilities and performance

00:37:27.940 --> 00:37:31.400
is caching the results to these
queries in both positive and

00:37:31.400 --> 00:37:34.900
negative with the time to live.

00:37:34.900 --> 00:37:38.290
Because groups and group memberships
can be checked quite often,

00:37:38.290 --> 00:37:41.200
especially when going through ACLs.

00:37:41.270 --> 00:37:46.010
and then provides also the
ID translation services.

00:37:49.430 --> 00:37:55.040
So these services are going to be
available to your software as well

00:37:55.040 --> 00:37:58.840
through a new API that will allow
you to test membership against

00:37:58.840 --> 00:38:03.370
groups so that you don't need to
parse membership lists manually.

00:38:03.440 --> 00:38:10.360
And also to provide the UID and
GUID translation services or as well NTS,

00:38:10.360 --> 00:38:12.370
the SID services.

00:38:13.120 --> 00:38:19.810
The privileged processes today
can edit the groups to which they

00:38:19.810 --> 00:38:23.280
are being considered a member
and which are being evaluated.

00:38:23.280 --> 00:38:27.940
A new API will be available
to more precisely define

00:38:27.940 --> 00:38:31.590
that within this new scheme.

00:38:34.760 --> 00:38:38.500
All of this really opens up the
possibility for a new way to manage

00:38:38.500 --> 00:38:43.700
individuals on your network using smaller
groups and nested hierarchies of groups.

00:38:43.700 --> 00:38:47.280
So we can revisit the example
that we have with the teachers

00:38:47.280 --> 00:38:52.680
and student teachers and redo
that in a more dynamic fashion.

00:38:52.700 --> 00:38:56.660
Rather than having a single group
of teachers to represent all

00:38:56.660 --> 00:39:00.700
teachers and student teachers,
we'll create two separate groups.

00:39:00.700 --> 00:39:05.700
One of the staff teachers and
another of just student teachers.

00:39:05.730 --> 00:39:09.520
Together these will be nested into
one larger global teachers group

00:39:09.570 --> 00:39:11.700
for use where that's appropriate.

00:39:11.700 --> 00:39:14.990
In the example that we showed,
rather than having to have a

00:39:15.000 --> 00:39:17.200
deny entry specifically from Ms.

00:39:17.240 --> 00:39:21.400
Buxton for that math assignment,
we can simply say student teachers

00:39:21.400 --> 00:39:23.700
have read access to this file.

00:39:23.700 --> 00:39:26.770
And then staff teachers
have the necessary read,

00:39:26.780 --> 00:39:28.690
write, and delete access.

00:39:28.700 --> 00:39:33.700
What's really nice about going
this way is that as roles,

00:39:33.700 --> 00:39:36.700
as people's roles change
within your organization,

00:39:36.700 --> 00:39:37.150
Ms.

00:39:37.150 --> 00:39:41.700
Buxton gets promoted to,
gets hired as a staff teacher.

00:39:41.700 --> 00:39:45.270
You can simply reassign her
membership within the directory

00:39:45.270 --> 00:39:49.700
system and she'll automatically be
obtaining new permissions in the

00:39:49.700 --> 00:39:54.180
file system where that group is,
the new group membership is encountered.

00:39:57.300 --> 00:40:02.670
So we'll kind of wrap up here with
a little sneak peek at some proposed

00:40:02.740 --> 00:40:05.690
user interface to manage ACLs.

00:40:05.690 --> 00:40:09.330
First of all,
within Finder's Get Info window,

00:40:09.350 --> 00:40:11.890
you can see it's very similar
to what you have today.

00:40:12.900 --> 00:40:16.800
But now we have the addition
of an Others listing,

00:40:16.800 --> 00:40:19.900
which is not just a
single group as it is now,

00:40:19.900 --> 00:40:26.030
but another listing of both groups
and users that can be assigned

00:40:26.030 --> 00:40:28.720
different permissions to this object.

00:40:29.300 --> 00:40:32.550
The idea here is to keep
something that's very simple,

00:40:32.590 --> 00:40:37.700
manageable, that people can use
from their own systems.

00:40:39.230 --> 00:40:45.350
The initial view in the
Tiger Server Admin Tools is very similar.

00:40:45.360 --> 00:40:53.470
It follows the same easy-to-use idea
that we have in following in Finder,

00:40:53.470 --> 00:40:57.750
but also provides a more
detailed view of the ACL and its

00:40:57.770 --> 00:41:02.990
associated access control entries,
allowing you to edit specific

00:41:02.990 --> 00:41:07.180
information about them as to whether
it's an allow or deny record,

00:41:07.180 --> 00:41:12.400
and also to be able to access preset
groups of permission entries from

00:41:12.400 --> 00:41:15.180
the pop-up menu that you see here.

00:41:15.180 --> 00:41:19.460
And those will provide customization
abilities so that you can define

00:41:19.500 --> 00:41:23.760
your own sets of presets to meet
the way that you're managing

00:41:23.760 --> 00:41:26.170
permissions on your network.

00:41:28.170 --> 00:41:30.860
And from there you can
drill down and find more,

00:41:30.860 --> 00:41:33.330
you know,
access more detailed permissions

00:41:33.330 --> 00:41:37.660
on the different objects to get to
the real fine-grained permissions,

00:41:37.660 --> 00:41:40.770
control over inheritance, and so forth.

00:41:45.570 --> 00:41:49.250
So to summarize where we
are with ACLs and Tiger,

00:41:49.340 --> 00:41:54.590
providing a much more flexible way of
expressing permissions on objects in the

00:41:54.620 --> 00:42:00.500
file system and reducing the arbitrary
limits that we have today in the OS.

00:42:00.500 --> 00:42:04.480
Supporting compatibility with
Microsoft in Microsoft networks,

00:42:04.500 --> 00:42:08.750
both the client and the server,
and providing a better platform

00:42:08.750 --> 00:42:11.290
for collaboration and workflow.

00:42:12.140 --> 00:42:14.770
With that,
we're providing new information that's

00:42:14.770 --> 00:42:19.500
now exposed in the file system both in
terms of ACLs and extended attributes

00:42:19.500 --> 00:42:25.900
that needs to be supported by software,
specifically copy engines, archivers,

00:42:25.900 --> 00:42:26.940
and so on.

00:42:26.940 --> 00:42:30.600
Some of those changes we'll be making
ourselves and some of those are going to

00:42:30.600 --> 00:42:33.750
be required by your third-party software.

00:42:33.790 --> 00:42:36.320
And finally,
this may impact the way that you

00:42:36.320 --> 00:42:40.500
manage your network and hopefully we'll
be able to give you enough of some

00:42:40.500 --> 00:42:44.940
information here today that you can begin
planning for those changes coming up.