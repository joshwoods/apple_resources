WEBVTT

00:00:12.340 --> 00:00:13.340
Good morning, everyone.

00:00:13.340 --> 00:00:18.500
I guess I go over here.

00:00:27.620 --> 00:00:29.480
There we go.

00:00:29.590 --> 00:00:32.500
All right,
I came here to talk about certificates

00:00:32.530 --> 00:00:35.920
in Mac OS X and certificate management.

00:00:36.040 --> 00:00:41.920
And so this session covers the usage of
certificates and the way certificates

00:00:42.030 --> 00:00:46.700
are used and as well as keys.

00:00:46.720 --> 00:00:48.790
And a lot of times people are
talking about certificates.

00:00:48.820 --> 00:00:51.930
They actually mean certificates and keys.

00:00:52.230 --> 00:00:57.740
The whole sum of things, certificates,
keys, and trust management, et cetera,

00:00:57.810 --> 00:01:01.330
is often referred to as a public
key infrastructure or PKI.

00:01:01.500 --> 00:01:08.130
So I'll be referring to it
by that acronym if you may.

00:01:08.320 --> 00:01:12.440
So different kinds of applications
use PKI for different things.

00:01:12.630 --> 00:01:19.620
The most common use is to identify
a person or party on the other end

00:01:19.620 --> 00:01:23.730
of a connection and determine --
determine who they are and set up a

00:01:23.730 --> 00:01:30.730
secured or authenticated or encrypted
transaction with that other party.

00:01:31.210 --> 00:01:37.960
Some examples of applications that use
PKI would be on Mac OS X today are Mail.

00:01:37.960 --> 00:01:41.440
Mail uses, since Panther,
Mail has support for SMIME,

00:01:41.440 --> 00:01:45.990
which lets you send encrypted and
signed email to people on both Macs

00:01:45.990 --> 00:01:51.060
and Windows and every other operating
system out there that has SMIME support.

00:01:52.020 --> 00:01:58.810
Mail also uses PKI for its SSL support,
which you would use if you

00:01:58.810 --> 00:02:04.260
were connecting to a secured
IMAP server or a secure SMTP server.

00:02:05.100 --> 00:03:38.200
[Transcript missing]

00:03:39.680 --> 00:03:41.360
So some of the things you'll learn.

00:03:41.360 --> 00:03:44.330
We'll start with the PKI review,
and I'll try and explain a little bit,

00:03:44.330 --> 00:03:47.980
just a really high level view
of what public key cryptography

00:03:47.980 --> 00:03:50.580
is and what certificates are.

00:03:50.580 --> 00:03:55.240
Then I'll go over our
new PKI related APIs.

00:03:55.240 --> 00:03:55.950
We have a few.

00:03:56.120 --> 00:03:59.420
I mean,
we had a lot of APIs already in Panther,

00:03:59.430 --> 00:04:01.140
so we haven't added a whole lot.

00:04:01.150 --> 00:04:03.060
But we've had some requests
for some new things,

00:04:03.060 --> 00:04:06.780
and we've listened to you guys,
and we've added that.

00:04:06.780 --> 00:04:13.800
Then there's some improved and some
new PKI views that we'll show you.

00:04:13.800 --> 00:04:17.210
We'll talk a little bit about
keychain access and user bin security

00:04:17.210 --> 00:04:21.300
and what some of the new things
have been going on with those are.

00:04:21.310 --> 00:04:27.480
And we'll talk about root certificates
and how Mac OS X determines whether

00:04:27.480 --> 00:04:29.460
or not a root certificate is trusted.

00:04:29.460 --> 00:04:33.160
And I'll explain why
that's important later on.

00:04:33.170 --> 00:04:34.920
And something else
we'll be talking about,

00:04:34.920 --> 00:04:37.960
which unfortunately this didn't
make it into the discussion,

00:04:37.960 --> 00:04:40.090
is the fact that we're working very,
very hard to get smart

00:04:40.170 --> 00:04:42.180
card support into Tiger.

00:04:42.200 --> 00:04:47.330
And there will be fully integrated
smart card support in Tiger.

00:04:47.710 --> 00:04:50.150
So, and smart cards will be
just like key chains.

00:04:50.200 --> 00:04:53.590
So, as you, when we get to that portion,
I'll go into a little

00:04:53.590 --> 00:04:54.590
more detail about that.

00:04:54.600 --> 00:04:58.730
And I'll also talk shortly
about what it would take for,

00:04:58.790 --> 00:05:01.760
if any of you are CAs or
representatives of CAs,

00:05:01.760 --> 00:05:05.600
to get your root certificates
included into either new version

00:05:05.600 --> 00:05:08.520
of Mac OS X or software updates.

00:05:13.100 --> 00:05:16.850
I have to get closer, I guess.

00:05:16.870 --> 00:05:17.920
There we go.

00:05:17.920 --> 00:05:20.580
So, here's the PKI review.

00:05:20.990 --> 00:05:23.120
So what is public key cryptography?

00:05:23.120 --> 00:05:23.690
I don't know.

00:05:23.730 --> 00:05:24.360
Raise your hands.

00:05:24.360 --> 00:05:27.200
How many of you need this explanation?

00:05:27.200 --> 00:05:30.880
Or is everyone here a security expert?

00:05:31.080 --> 00:05:32.690
So I'll do this kind of quick,
since there's only a few

00:05:32.760 --> 00:05:33.940
people that don't really know.

00:05:34.000 --> 00:05:38.240
So public key cryptography works
by you generate a pair of keys,

00:05:38.240 --> 00:05:40.300
a public key and a private key.

00:05:40.300 --> 00:05:45.380
Now the public key can be shared
with anyone out there and doesn't

00:05:45.380 --> 00:05:47.360
contain any secret information.

00:05:47.510 --> 00:05:52.520
The private key corresponds
to a particular public key,

00:05:52.520 --> 00:05:54.920
and you need to keep
that private key secret.

00:05:54.920 --> 00:06:00.370
The private key is kept secret by the
owner of that key on his machine or

00:06:00.490 --> 00:06:03.390
on a smart card or some other token.

00:06:03.800 --> 00:06:08.030
Public Keys can be used
to verify signatures.

00:06:08.180 --> 00:06:11.050
So if someone signs
something with a private key,

00:06:11.240 --> 00:06:14.100
you can verify what was
signed with the public key.

00:06:14.240 --> 00:06:19.020
And private keys can be used to decrypt
data that was encoded with a public key.

00:06:19.370 --> 00:06:23.060
So if someone else has your public key,
they can send you an encrypted message

00:06:23.060 --> 00:06:26.290
that you and only you can decrypt.

00:06:26.770 --> 00:06:33.120
But by itself, public/private keys are,
it's a really cool technology,

00:06:33.120 --> 00:06:38.600
but the problem is how do you know who
a particular public key belongs to?

00:06:39.340 --> 00:06:41.590
and I have to go back.

00:06:41.840 --> 00:06:42.790
Right.

00:06:42.790 --> 00:06:47.700
Well, the way we do that on Mac OS X,
and there are other solutions out there,

00:06:47.700 --> 00:06:53.460
but the way most of the industry
has adopted is X.509 certificates.

00:06:53.500 --> 00:06:58.780
And what an X.509 certificate
does is it binds a public key to

00:06:58.780 --> 00:07:01.760
other forms of identification.

00:07:02.050 --> 00:07:05.180
and in addition,
it's certified by a third party.

00:07:05.350 --> 00:07:10.360
So it produces a binding of your
public key to some attributes about

00:07:10.600 --> 00:07:16.040
the owner of that public/private key
pair and there's some other third

00:07:16.210 --> 00:07:21.390
party that actually asserts that
that binding is correct or valid.

00:07:22.480 --> 00:07:24.070
Well, what's in a certificate?

00:07:24.200 --> 00:07:26.970
Well, obviously the public key because
that's what we're trying to

00:07:27.050 --> 00:07:28.990
bind to this other information.

00:07:29.190 --> 00:07:30.530
Then there's a number of attributes.

00:07:30.570 --> 00:07:34.200
One attribute that's
always there is the issuer.

00:07:34.200 --> 00:07:38.940
The issuer actually refers to the
certificate that certifies this

00:07:38.940 --> 00:07:44.940
particular certificate or the authority
that has issued this certificate.

00:07:45.250 --> 00:07:48.170
Then there's a subject,
which is a description of the

00:07:48.590 --> 00:07:51.730
owner of that certificate or
the key in that certificate.

00:07:51.910 --> 00:07:55.800
Both the issuer and
subject are X.500 names,

00:07:55.930 --> 00:07:59.690
which if you don't know what that means,
it's basically like an

00:07:59.690 --> 00:08:02.530
LDAP distinguished name type of record.

00:08:02.640 --> 00:08:05.590
I mean,
it's actually a superset of an LDAP name,

00:08:05.710 --> 00:08:07.280
but it's similar to that.

00:08:07.420 --> 00:08:10.860
So it'll have things like the
common name and an organization,

00:08:10.860 --> 00:08:13.150
and you can add all kinds
of different fields to it.

00:08:13.320 --> 00:08:18.370
And it's really up to the issuer of
the certificate to decide which fields

00:08:18.370 --> 00:08:21.240
they want to certify in a certificate.

00:08:21.340 --> 00:08:24.210
And then there's a validity
period in a certificate,

00:08:24.340 --> 00:08:28.310
which tells you from when to
when that certificate is valid.

00:08:28.490 --> 00:08:33.420
In addition, X.500 certificates as
of version two or three,

00:08:33.420 --> 00:08:37.380
or two and three,
can contain one or more extensions.

00:08:37.700 --> 00:08:43.140
Now, extensions are arbitrary things
that can be added to certificates.

00:08:43.200 --> 00:08:47.100
Now, there's a number of extensions
defined out there and a number

00:08:47.100 --> 00:08:48.810
that are commonly in use.

00:08:48.880 --> 00:08:50.760
Some of them would be a key usage policy.

00:08:50.780 --> 00:08:53.130
There's an extension,
or there's an extended key

00:08:53.130 --> 00:08:56.020
usage policy extension as well,
which tells you, well,

00:08:56.020 --> 00:09:01.020
this certificate can only be used to sign
things rather than to encrypt things.

00:09:01.040 --> 00:09:05.050
Or this can only be used for email,
or this can only be used for a website,

00:09:05.150 --> 00:09:05.870
et cetera.

00:09:05.990 --> 00:09:10.150
And there can be policy statements
included in certificates which

00:09:10.150 --> 00:09:13.560
might contain a URL referring
to a website telling you,

00:09:13.620 --> 00:09:16.990
you know, what it means,
what the fact that this authority has

00:09:17.040 --> 00:09:19.190
issued this certificate really means,
or what the guarantees

00:09:19.190 --> 00:09:20.230
are that they give you,
et cetera.

00:09:20.240 --> 00:09:23.680
Extensions fall into two categories.

00:09:23.920 --> 00:09:25.370
There's a flag on an extension.

00:09:25.400 --> 00:09:29.100
There are critical and
non-critical extensions.

00:09:29.270 --> 00:09:32.370
Non-critical extensions you're
allowed to ignore if an application

00:09:32.400 --> 00:09:35.300
is processing a certificate and it
doesn't understand that extension.

00:09:35.300 --> 00:09:36.940
It's okay to ignore it.

00:09:37.060 --> 00:09:39.890
If an extension is marked critical,
then you must understand

00:09:39.890 --> 00:09:43.800
what that extension means,
or else you should just not use that

00:09:43.800 --> 00:09:46.580
certificate in your application.

00:09:47.310 --> 00:09:52.200
There are very few extensions that are
actually marked critical in certificates.

00:09:52.200 --> 00:09:57.500
Usually the ones that are are
crucial to the usage of that cert.

00:09:57.900 --> 00:10:00.690
And then finally,
there's a signature of all of the

00:10:00.690 --> 00:10:03.180
above information included in the cert.

00:10:03.240 --> 00:10:09.120
And the signature is using
the private key of the issuer.

00:10:10.860 --> 00:10:16.240
Now, since a certificate has an issuer,
there's essentially a hierarchy.

00:10:16.330 --> 00:10:20.700
You can have a hierarchy from certificate
issued by some other certificate,

00:10:20.700 --> 00:10:25.800
and that certificate in turn is
issued by another certificate.

00:10:25.810 --> 00:10:28.520
The nice thing about certificates
being signed is that they

00:10:28.570 --> 00:10:29.800
can't be tampered with.

00:10:29.800 --> 00:10:32.800
If you have a certificate,
you can verify its validity,

00:10:32.800 --> 00:10:35.510
and you can verify the issuer
certificate's validity,

00:10:35.510 --> 00:10:37.610
and you can keep going up this chain.

00:10:37.850 --> 00:10:40.950
So,
we call the certificates at the bottom

00:10:40.950 --> 00:10:45.760
"leaf certificates," and the certificates
that sign "leaf certificates"

00:10:45.760 --> 00:10:49.870
"intermediate certificates." Now,
eventually that chain has to end,

00:10:49.880 --> 00:10:52.760
and that happens when you get
a certificate for which the

00:10:52.770 --> 00:10:54.770
issuer is the certificate itself.

00:10:54.800 --> 00:10:58.800
And we call that a "root certificate"
or a "self-signed certificate."

00:10:58.800 --> 00:11:03.070
And the only way you can determine
whether or not a root certificate

00:11:03.130 --> 00:11:05.710
is trusted is by prior arrangement.

00:11:06.240 --> 00:11:11.350
So, in summary,
here's an example of a cert issued to

00:11:11.430 --> 00:11:15.080
Ken issued by some other authority.

00:11:15.100 --> 00:11:17.480
There's no real limit on
how long a chain can be,

00:11:17.480 --> 00:11:20.440
although there are extensions
in certificates which can

00:11:20.440 --> 00:11:21.960
limit the length of a chain.

00:11:21.960 --> 00:11:26.080
So a root certificate could limit
the length of a chain to two or three

00:11:26.120 --> 00:11:32.570
certificates or depending on what that
certificate authority wants to allow.

00:11:32.620 --> 00:11:35.670
But so typically an application
validating a certificate will follow

00:11:35.680 --> 00:11:40.110
the chain from the leaf certificate
back to a root certificate.

00:11:43.120 --> 00:11:47.320
So, root certificates are also known
as certificate authorities.

00:11:47.340 --> 00:11:53.390
And some, there's a number of different
certificate authorities that we ship.

00:11:53.390 --> 00:11:57.850
I think as of 10.3.4,
there are about 84 certificate

00:11:57.860 --> 00:12:03.000
authorities in the file mentioned below,
System Library Keychains X.509 Anchors.

00:12:03.000 --> 00:12:07.230
You can actually manually add
certificates to that file by,

00:12:07.230 --> 00:12:12.000
if you have a root certificate on your
desktop or somewhere in the finder,

00:12:12.000 --> 00:12:14.160
you double click it,
it'll launch Keychain Access and

00:12:14.160 --> 00:12:18.000
Keychain Access will allow you to
add it to the X.509 Anchors database.

00:12:18.000 --> 00:12:21.370
So, if for example,
you work at a university or some

00:12:21.370 --> 00:12:26.030
institution that has their own
certificate authority that doesn't use

00:12:26.030 --> 00:12:30.270
one of the 84 that we already include,
you could download that certificate

00:12:30.390 --> 00:12:32.000
authority certificate to that file.

00:12:32.000 --> 00:12:35.180
So, you can add that certificate to
your machine and after verifying

00:12:35.180 --> 00:12:37.870
that it is the correct certificate,
you could add it to your

00:12:37.890 --> 00:12:39.000
keychain on your system.

00:12:39.000 --> 00:12:42.380
And from then on,
any app on Mac OS X will trust

00:12:43.180 --> 00:12:46.000
certificates signed by that authority.

00:12:52.520 --> 00:12:55.470
So certificates are only half the story,
of course.

00:12:55.500 --> 00:12:59.600
I sort of alluded to this earlier.

00:12:59.600 --> 00:13:03.380
Certificates contain the public key,
but for you to be able to do

00:13:03.380 --> 00:13:06.340
something with a certificate,
you also need a place to

00:13:06.350 --> 00:13:07.520
store the private key.

00:13:07.520 --> 00:13:10.170
Now certificates,
because of the fact that

00:13:10.170 --> 00:13:13.050
they're signed and they don't
contain any secret information,

00:13:13.170 --> 00:13:14.860
there's no real problem storing them.

00:13:14.860 --> 00:13:15.160
You could store them anywhere.

00:13:15.160 --> 00:13:18.470
You could store them on an LDAP server,
you could store them, you know,

00:13:18.570 --> 00:13:21.580
as files on your desktop,
you could download them from a website,

00:13:21.580 --> 00:13:25.710
et cetera, because you can always verify
their correctness and there's

00:13:25.710 --> 00:13:30.160
nothing in there that you need
to keep secret from anyone else.

00:13:30.860 --> 00:13:34.530
Now, if you take the certificate and
its corresponding private key,

00:13:34.650 --> 00:13:37.760
where corresponding is basically
the private key that belongs to

00:13:37.760 --> 00:13:42.390
the public key in the certificate,
we refer to the combination

00:13:42.390 --> 00:13:44.060
of those two as an identity.

00:13:44.200 --> 00:13:49.260
And in our APIs, there's actually a sec
identity ref object,

00:13:49.570 --> 00:13:53.900
which represents the combination
of a certificate and a private key.

00:13:53.970 --> 00:13:56.420
Now, in Keychain Access,
an identity looks like

00:13:56.500 --> 00:13:57.280
something like this.

00:13:57.280 --> 00:14:02.280
you'd have a private key and a
certificate that are paired together.

00:14:03.140 --> 00:14:07.100
Some examples of some
applications and what they do.

00:14:07.420 --> 00:14:11.770
So Mail, like I said,
uses the SMIME APIs for

00:14:11.770 --> 00:14:13.000
encrypted and signed mail.

00:14:13.000 --> 00:14:19.500
It uses SSL to receive mail
from a secured IMAP server

00:14:19.500 --> 00:14:21.400
or from a secure SMTP server.

00:14:21.620 --> 00:14:23.800
And again, in Mail,
you can actually view the

00:14:23.800 --> 00:14:26.740
certificates if there's something
wrong with the connection,

00:14:26.740 --> 00:14:27.040
etc.

00:14:27.040 --> 00:14:30.020
It's delivered in Panther.

00:14:30.020 --> 00:14:33.150
I think the Mail team is actually
working on some improvements.

00:14:33.160 --> 00:14:36.500
And with some of the stuff Ken is
going to demo to you later,

00:14:36.500 --> 00:14:39.970
you'll actually see some of
the new UI we have that will be

00:14:39.970 --> 00:14:42.070
integrated into Mail as well.

00:14:43.430 --> 00:14:46.940
Secure Transport,
something that's been around since OS 9,

00:14:46.940 --> 00:14:53.410
I think, or in some form since OS 9,
is used both by Safari and

00:14:53.410 --> 00:14:56.480
Mail for SSL and TLS.

00:14:56.540 --> 00:15:02.000
It supports every variant of SSL, V1, V2,
V3, TLS, and it auto-negotiates

00:15:02.000 --> 00:15:03.620
between all of them.

00:15:03.620 --> 00:15:09.060
Since the 10.3.3 update, we also support
client-side authentication.

00:15:09.060 --> 00:15:13.390
And because Secure Transport supports it,
then every app that uses Secure

00:15:13.390 --> 00:15:15.590
Transport actually gets this for free.

00:15:15.600 --> 00:15:20.560
Now, CF Network uses Secure
Transport under the hood,

00:15:20.560 --> 00:15:21.110
so guess what?

00:15:21.180 --> 00:15:23.980
Every app that uses CF Network also
gets these features for free.

00:15:23.980 --> 00:15:29.130
And when we add Smart Card support,
every app using CF Network or WebKit,

00:15:29.230 --> 00:15:31.970
which uses CF Network, will also get
Smart Card support for free.

00:15:34.640 --> 00:15:38.160
So, now I'll talk a little
bit about the new APIs.

00:15:38.350 --> 00:15:41.530
There really only are
two completely new APIs,

00:15:41.600 --> 00:15:46.690
and they are SecKeychainItemImport
and SecKeychainItemExport.

00:15:46.890 --> 00:15:50.460
What they allow you to do is to
import and export certificates

00:15:50.460 --> 00:15:53.900
and keys to and from key chains.

00:15:54.250 --> 00:15:57.330
and we support a variety of formats.

00:15:57.330 --> 00:16:00.490
Pretty much everything out there
we could find that we thought would

00:16:00.770 --> 00:16:03.100
be needed by anyone is in there.

00:16:03.100 --> 00:16:07.300
So we can export to
raw open SSL with PEM,

00:16:07.330 --> 00:16:09.900
ASCII, Armour or without.

00:16:09.900 --> 00:16:12.100
Support PICSS7, PICSS12.

00:16:12.100 --> 00:16:14.990
You can even import and export SSH keys.

00:16:15.100 --> 00:16:18.580
So if you had an SSH key,
you could import that to your

00:16:18.580 --> 00:16:21.550
keychain or store it on a smart card,
take it to another machine

00:16:21.550 --> 00:16:22.950
and use that SSH key there.

00:16:23.120 --> 00:16:24.110
- Yeah.

00:16:25.000 --> 00:16:30.500
and there's some additional formats
that you can store either individual

00:16:30.500 --> 00:16:34.240
items and some of the formats
allow you to store multiple items.

00:16:34.660 --> 00:16:39.800
The import function actually can
auto detect the type of content

00:16:39.870 --> 00:16:40.730
that you're importing from.

00:16:40.750 --> 00:16:43.710
So if you're writing an application
and you're trying to allow,

00:16:43.810 --> 00:16:47.750
you know, importing of arbitrary things,
you can just call import with

00:16:47.950 --> 00:16:51.170
pretty much all wildcard parameters
and it'll just figure out what

00:16:51.350 --> 00:16:53.200
the format of the input data is.

00:16:53.250 --> 00:16:58.080
Or if you want to specifically
limit it to PQSS 12,

00:16:58.080 --> 00:16:58.080
you can do that.

00:16:58.510 --> 00:17:01.890
So here's a little synopsis
of what the calls look like.

00:17:02.020 --> 00:17:03.840
They're pretty basic.

00:17:03.880 --> 00:17:08.050
SecKeychainItemExport,
you pass it an array of items,

00:17:08.050 --> 00:17:11.000
which are all keychain items,
which could be either certificates

00:17:11.020 --> 00:17:13.840
or keys or some combination thereof.

00:17:13.860 --> 00:17:17.450
Then the format in which
you want the items exported,

00:17:17.470 --> 00:17:21.060
which would be SSL or PKS 12 or whatnot.

00:17:21.060 --> 00:17:24.510
Then there's some flags,
which example of flag would be

00:17:24.510 --> 00:17:30.410
whether or not you want it base64
encoded or PEM armor encoded.

00:17:30.550 --> 00:17:33.100
If you're exporting keys,
you pass a pointer to

00:17:33.100 --> 00:17:36.980
instruct with key params,
which contains some additional

00:17:36.980 --> 00:17:40.120
details about what things
you want to do with the keys.

00:17:40.350 --> 00:17:43.570
And then the last parameter
is you get the result,

00:17:43.690 --> 00:17:50.490
which contains basically
CFData containing the exported items.

00:17:50.640 --> 00:17:53.590
Now, this may or may not work
if you're exporting,

00:17:53.650 --> 00:17:55.210
let's say, keys from a smart card.

00:17:55.210 --> 00:17:57.520
If the smart card doesn't
allow you to export the key,

00:17:57.610 --> 00:17:59.400
it won't work, obviously.

00:17:59.580 --> 00:18:02.460
But given that the
permissions are correct,

00:18:02.460 --> 00:18:04.000
the export will work.

00:18:04.180 --> 00:18:07.130
Now, if you're exporting a
key from a key chain,

00:18:07.210 --> 00:18:11.110
typically, because key chains have
access control lists,

00:18:11.180 --> 00:18:13.840
the user will be prompted with
some kind of dialogue asking him

00:18:13.840 --> 00:18:18.370
for permission to export that key.

00:18:18.910 --> 00:18:22.320
Import looks pretty similar.

00:18:22.320 --> 00:18:26.430
It has a couple more parameters because
it's a little bit more complicated.

00:18:26.430 --> 00:18:30.010
The first parameter is the data,
which is again a CFData containing the

00:18:30.010 --> 00:18:32.460
blob of information you want to import.

00:18:32.470 --> 00:18:35.770
Then there's a file name parameter,
which is optional,

00:18:35.830 --> 00:18:38.890
but that can be a hint if you
don't know what the format is,

00:18:38.890 --> 00:18:41.150
but you've specified the file name.

00:18:41.150 --> 00:18:44.640
The import function will use the
extension of the file name to

00:18:44.650 --> 00:18:46.800
guess what the format might be.

00:18:46.800 --> 00:18:51.270
Then there's a format parameter,
which is both input and output,

00:18:51.440 --> 00:18:57.080
which could be pqsf12 or ssl
or whatever the format is

00:18:57.080 --> 00:19:02.310
that you think the data is in,
and on successful completion,

00:19:02.310 --> 00:19:06.460
that will actually contain the
format that the data really was.

00:19:06.460 --> 00:19:08.320
Then there's an item type,
which is both input and output,

00:19:08.320 --> 00:19:09.270
so that could be a hint.

00:19:09.280 --> 00:19:12.230
You could say, oh,
this is a certificate or this

00:19:12.260 --> 00:19:14.200
is a key or I don't know.

00:19:14.200 --> 00:19:14.200
And on completion, you can say, oh,
this is a key or I don't know.

00:19:14.200 --> 00:19:14.200
And on completion, you can say, oh,
this is a key or I don't know.

00:19:14.200 --> 00:19:14.200
And on completion, you can say, oh,
this is a key or I don't know.

00:19:14.200 --> 00:19:14.240
And on completion, you can say, oh,
this is a key or I don't know.

00:19:14.240 --> 00:19:15.240
And on completion, you can say, oh,
this is a key or I don't know.

00:19:15.240 --> 00:19:16.640
And on completion,
the item type will say, well,

00:19:16.720 --> 00:19:20.140
this was a certificate or this was
actually a combination of multiple

00:19:20.140 --> 00:19:22.510
items or this was a single key.

00:19:22.580 --> 00:19:23.600
And then there's some flags.

00:19:23.720 --> 00:19:26.480
The flags can, again,
be things like whether or

00:19:26.480 --> 00:19:28.590
not it's ASCII armored.

00:19:29.600 --> 00:19:32.410
On import,
you have this pointer to key params

00:19:32.410 --> 00:19:34.890
again if you're expecting to import keys.

00:19:35.010 --> 00:19:39.160
Things in there for import would be like
what the permissions you'd want on those

00:19:39.170 --> 00:19:42.020
keys to be after they've been imported,
etc.

00:19:42.270 --> 00:19:46.500
Then you can obviously specify
keychain which to import the items to,

00:19:46.500 --> 00:19:51.940
and you can also optionally specify
a output array in which it'll

00:19:52.240 --> 00:19:54.970
return the items that were imported.

00:19:57.440 --> 00:20:00.020
So how do you import and export items?

00:20:00.270 --> 00:20:03.930
Well, on the Developer CD you have today,
Keychain Access lets you do it.

00:20:04.060 --> 00:20:07.290
There's an import menu and
there's an export menu in File.

00:20:07.290 --> 00:20:10.240
So you can just go to Keychain
Access and do it right there.

00:20:10.630 --> 00:20:14.690
There's also a command line tool,
User Bin Security, which has an import

00:20:14.690 --> 00:20:16.290
and an export command.

00:20:16.300 --> 00:20:20.720
And there's actually help built
into User Bin Security and

00:20:20.720 --> 00:20:20.720
it's also a man page.

00:20:21.150 --> 00:20:24.500
So, user bin security will let you do it.

00:20:24.500 --> 00:20:27.130
And then in addition to that,
you could use the APIs that

00:20:27.220 --> 00:20:32.120
I just explained if these two
options aren't good enough.

00:20:32.120 --> 00:20:33.700
There's documentation.

00:20:33.700 --> 00:20:37.080
I don't think there's
documentation on the WWDR site yet,

00:20:37.080 --> 00:20:44.100
but there is explicit comments
in the SECimportexpert.h header

00:20:44.100 --> 00:20:47.540
in the security framework.

00:20:47.550 --> 00:20:50.310
So if you want to take a look,
that's on your CDs that you

00:20:50.310 --> 00:20:52.340
received yesterday or Monday.

00:20:53.980 --> 00:20:56.920
So here's an example of how you
would use the command line tool.

00:20:57.150 --> 00:20:59.140
So in terminal,
if you wanted to export all

00:20:59.230 --> 00:21:04.260
the certificates from your
login keychain in PEM format,

00:21:04.420 --> 00:21:09.530
for example, as a PK-SYS 7 log,
you'd say security export, well,

00:21:09.570 --> 00:21:11.050
what it says there.

00:21:13.990 --> 00:21:16.700
So with that,
I'd like Ken to come up and show you how

00:21:16.700 --> 00:21:19.430
to do the same thing in Keychain Access.

00:21:19.530 --> 00:21:22.210
And he'll show you some
other things as well.

00:21:30.000 --> 00:21:36.800
Thanks, Michael.

00:21:36.800 --> 00:21:39.000
Can we have the demo on screen?

00:21:39.000 --> 00:21:40.000
Thanks.

00:21:40.090 --> 00:21:43.860
I'd like to start by showing you
some of the new additions that are in

00:21:43.860 --> 00:21:45.880
progress to the Keychain Access Utility.

00:21:45.880 --> 00:21:49.810
If you've had a chance to fire
this up off of your Tiger preview,

00:21:49.890 --> 00:21:55.060
you'll notice it looks a little bit
different than the one that's in 10.3.

00:21:55.060 --> 00:21:59.100
One of the first things you might
notice is there are now categories

00:21:59.100 --> 00:22:01.370
over here on the left-hand side.

00:22:01.460 --> 00:22:05.560
So instead of looking at all
the items in my keychain,

00:22:05.690 --> 00:22:09.780
I can just look at my passwords
or just my certificates

00:22:10.960 --> 00:22:12.890
When you've been using
the keychain for a while,

00:22:12.890 --> 00:22:14.950
and I've been using Mail,
and I've built up an awful

00:22:14.950 --> 00:22:17.800
lot of certificates here,
and it's kind of hard to find them.

00:22:17.890 --> 00:22:19.720
So we've also added a search feature.

00:22:19.790 --> 00:22:22.800
So I can look for,
if I'm going to send mail to Murph,

00:22:22.800 --> 00:22:24.800
I can just type in Murph's name here.

00:22:24.810 --> 00:22:26.800
And there's Murph's cert.

00:22:26.800 --> 00:22:28.800
And I can look at his cert.

00:22:28.800 --> 00:22:31.800
Maybe I want to see where
all the Thought certs are.

00:22:31.800 --> 00:22:36.430
So I'll type in "Thought."
And you'll notice that it's

00:22:36.430 --> 00:22:40.800
returning the certificates that
it finds across all the keychains.

00:22:40.800 --> 00:22:42.800
So I have a copy here
in one of my keychains,

00:22:42.800 --> 00:22:46.800
and I have the other ones that
are in the Anchors database.

00:22:47.470 --> 00:22:50.780
So let me look for stuff
that contains my name here.

00:22:50.810 --> 00:22:52.160
And I got some of my stuff.

00:22:52.160 --> 00:22:55.620
I have a certificate here,
and I have my private key.

00:22:55.630 --> 00:22:59.000
And as Michael pointed out,
those combination of things

00:22:59.000 --> 00:23:01.130
make up my PKI identity.

00:23:01.340 --> 00:23:06.230
So I can take advantage of that
new API that he talked about,

00:23:06.230 --> 00:23:09.460
setKeychainItemExport,
just by going to the Export menu

00:23:09.460 --> 00:23:10.870
here in Keychain Access.

00:23:11.010 --> 00:23:13.120
So I'll select that.

00:23:13.580 --> 00:23:19.820
And let's make a file called Ken's PKI.

00:23:19.820 --> 00:23:21.180
And I have some options here.

00:23:21.330 --> 00:23:24.870
I can export things as a cert,
as a PAM armor.

00:23:25.310 --> 00:23:30.000
What I want when I'm exporting my
private key is to put it in a P12

00:23:30.010 --> 00:23:34.580
file or personal information exchange,
which is actually encrypted.

00:23:34.580 --> 00:23:36.300
So I'll go ahead and save that.

00:23:36.340 --> 00:23:40.500
It asks me for a password to
actually encrypt that file,

00:23:40.500 --> 00:23:43.480
so I'll give it a super
secure password here.

00:23:43.500 --> 00:23:44.920
here.

00:23:46.550 --> 00:23:49.490
Go ahead and say OK.

00:23:49.650 --> 00:23:53.000
So we look out here and
it's created a P12 file.

00:23:53.000 --> 00:23:56.960
And that's a standard format for
information exchange that could

00:23:57.010 --> 00:23:59.470
be read by something like Mozilla.

00:23:59.540 --> 00:24:01.230
It can be read on other platforms.

00:24:01.230 --> 00:24:04.740
I can copy this over to my
Windows box and import it there.

00:24:04.780 --> 00:24:09.730
Let's double click it and import
it into a different keychain here.

00:24:09.940 --> 00:24:12.500
So when I double click it,
it brings up Keychain Access and

00:24:12.500 --> 00:24:13.680
asks me where I want to add it.

00:24:13.890 --> 00:24:15.960
So let me add it to my login keychain.

00:24:15.960 --> 00:24:19.130
And of course,
I have to enter that password again,

00:24:19.160 --> 00:24:21.460
which decrypts the file.

00:24:21.800 --> 00:24:25.180
I'll go back over here to the login
keychain and I see that it's added

00:24:25.180 --> 00:24:27.770
those things from the P12 file.

00:24:28.160 --> 00:24:32.530
I can look at it and sure enough,
it's my certificate and my key.

00:24:32.620 --> 00:24:36.840
So, let me tell you a little bit
about this certificate view that

00:24:36.880 --> 00:24:38.500
Keychain Access is showing you.

00:24:38.580 --> 00:24:41.270
It's a Cocoa view and it's reusable.

00:24:41.310 --> 00:24:43.840
It's called SF Certificate View.

00:24:44.370 --> 00:24:46.160
Now you have some
flexibility with this view.

00:24:46.260 --> 00:24:49.600
Keychain Access here is just showing you
kind of a summary view with the essential

00:24:49.600 --> 00:24:52.740
information about the certificate,
the name and who issued it.

00:24:53.030 --> 00:24:56.620
But I can also open it up and
get a different instance of

00:24:56.620 --> 00:25:00.870
that SF certificate view that
shows me a lot more information,

00:25:00.870 --> 00:25:04.070
shows me all the things
that are inside the cert.

00:25:05.490 --> 00:25:11.560
And I can choose to disclose or hide the
details and some of the trust settings.

00:25:11.630 --> 00:25:15.440
All these things are
controlled programmatically,

00:25:15.630 --> 00:25:20.530
so your application can use this view and
decide to show just a brief summary view

00:25:20.940 --> 00:25:24.020
or the entire contents of a certificate.

00:25:24.720 --> 00:25:27.460
So let me show you another
example of how you might use

00:25:27.460 --> 00:25:29.880
that view in an application.

00:25:29.960 --> 00:25:33.670
This is the mini browser,
which is a little sample application

00:25:33.670 --> 00:25:39.000
that comes with WebKit to show
you and demonstrate WebKit.

00:25:39.000 --> 00:25:42.920
Because it's WebKit, it is built on top,
as Michael said,

00:25:42.920 --> 00:25:46.770
built on top of CF network
and secure transport.

00:25:46.910 --> 00:25:50.380
So you get all these things for free,
like HTTPS.

00:25:50.610 --> 00:25:58.320
I can go to a site that uses SSL,
and And this all just works with WebKit.

00:26:00.600 --> 00:26:05.540
Let me go to the store here
and see if that will work.

00:26:05.600 --> 00:26:08.200
Unfortunately, the little button I added
is not showing up.

00:26:08.410 --> 00:26:12.760
So I think that the demo gods
are not smiling on me today.

00:26:13.080 --> 00:26:15.980
Let me try going to a
different site here.

00:26:16.280 --> 00:26:19.510
which is the University of
Washington has a web page and not

00:26:19.620 --> 00:26:24.350
to single them out in particular,
but they're an example of a site

00:26:24.500 --> 00:26:28.430
whose root certificate is not
part of the default set that is

00:26:28.440 --> 00:26:32.900
in the X.509 anchors file and is
trusted by default with Mac OS X.

00:26:33.060 --> 00:26:37.700
So normally you would have to go and
add that certificate out of band.

00:26:37.860 --> 00:26:44.290
So we have a new view, a PKI view called
SF Certificate Trust Panel.

00:26:44.560 --> 00:26:47.980
And what I've done is I've gotten
the certificates and I've put up

00:26:47.980 --> 00:26:51.740
this panel with some text that
I supplied and it's basically asking

00:26:51.750 --> 00:26:55.900
me for permission because it could
not verify the certificate chain.

00:26:56.100 --> 00:26:58.390
And this panel has some features.

00:26:58.510 --> 00:27:02.600
I can go ahead and disclose the
certificates that are involved.

00:27:02.760 --> 00:27:06.490
And I look at it and I see, yes,
this is a site at the University of

00:27:06.490 --> 00:27:10.630
Washington and it's signed
by their root certificate.

00:27:11.180 --> 00:27:13.860
We've got an option here.

00:27:13.870 --> 00:27:16.130
As I said,
normally the way that you would

00:27:16.290 --> 00:27:19.600
go and trust a certificate is
out of band by having to add the

00:27:19.790 --> 00:27:22.090
certificate into X.509 Anchors.

00:27:22.100 --> 00:27:25.040
This isn't quite working yet,
but we're working on a way to

00:27:25.040 --> 00:27:28.210
actually bring that process in
band a little bit for the user,

00:27:28.210 --> 00:27:31.540
so they can just say,
"Go ahead and remember that I said to

00:27:31.540 --> 00:27:38.040
trust this." So I can click "Continue,"
and it goes ahead and loads that page.

00:27:39.790 --> 00:27:44.310
So let me show you just real
quickly what it took to implement

00:27:44.400 --> 00:27:46.380
that in this mini browser.

00:27:46.570 --> 00:27:50.630
I just went and added a function
or a method here to the sample

00:27:51.170 --> 00:27:53.880
document called Evaluate Trust.

00:27:53.880 --> 00:27:59.500
And the first thing Evaluate Trust does
is it makes a SecTrust object by calling

00:27:59.500 --> 00:28:01.570
SecTrust create with certificates.

00:28:01.690 --> 00:28:06.160
So I take those server certs that I got
back from the making the connection and

00:28:06.160 --> 00:28:12.020
I make a SecTrust object which kind of
encapsulates all of that information.

00:28:12.020 --> 00:28:16.240
The policy that I'm
interested in which is SSL.

00:28:17.410 --> 00:28:22.420
And then the next thing I do is evaluate
it by calling SecTrust Evaluate.

00:28:22.530 --> 00:28:24.850
And that will go off,
do all of the searching

00:28:24.850 --> 00:28:27.460
for the root cert,
any other certs in the

00:28:27.460 --> 00:28:31.570
chain that it can find,
does the cryptographic evaluation,

00:28:31.680 --> 00:28:33.090
and returns a result.

00:28:33.250 --> 00:28:35.980
And that results the interesting thing.

00:28:36.200 --> 00:28:37.740
There are a number of them.

00:28:37.740 --> 00:28:42.090
I can have explicitly denied
or explicitly allowed the

00:28:42.090 --> 00:28:44.480
certificate in advance.

00:28:44.710 --> 00:28:47.850
But the interesting error that returns
is a recoverable trust failure.

00:28:47.970 --> 00:28:52.630
And those are cases where, for example,
the root certificate is expired or it's

00:28:52.630 --> 00:28:55.600
not present in the X.Anchors database.

00:28:55.620 --> 00:28:57.600
But this is something that
you can go ahead and override.

00:28:57.600 --> 00:28:59.430
You can ask the user what to do.

00:28:59.600 --> 00:29:03.600
So my method here asks
the user what to do.

00:29:03.750 --> 00:29:07.600
It puts up a message about mini
browser being unable to verify.

00:29:07.600 --> 00:29:10.520
And then it creates an
instance of this view,

00:29:10.520 --> 00:29:12.600
SF certificate trust panel.

00:29:12.600 --> 00:29:15.600
I set up the title of a button.

00:29:15.600 --> 00:29:19.000
You have complete control over
the message and the titles

00:29:19.040 --> 00:29:20.950
of the buttons that appear.

00:29:21.070 --> 00:29:25.540
And then I just put up a sheet on the
window asking the user what to do with a

00:29:25.540 --> 00:29:29.440
selector that will get called when they
dismiss it that will go ahead and either

00:29:29.440 --> 00:29:32.000
load the page or not load the page.

00:29:33.150 --> 00:29:33.790
And that's it.

00:29:33.880 --> 00:29:39.080
That's all the code I had
to add to get that working.

00:29:39.080 --> 00:29:44.150
So if I could have the other
slides back for a moment.

00:29:44.570 --> 00:29:45.640
Could we switch?

00:29:45.650 --> 00:29:46.820
Thanks.

00:29:46.820 --> 00:29:50.670
I probably have to move
over here to make it work.

00:29:50.670 --> 00:29:50.820
Yep.

00:29:52.700 --> 00:29:56.860
So there are three
views that I showed you,

00:29:56.860 --> 00:30:00.790
SF certificate view being the base one,
the kind of building block one,

00:30:00.790 --> 00:30:05.040
and then certificate panel
that's built on top of that.

00:30:05.040 --> 00:30:09.000
The thing we just looked at was
the SF certificate trust panel,

00:30:09.000 --> 00:30:13.040
which lets the user make
a decision about trust.

00:30:13.120 --> 00:30:15.720
One that I did not show you
was the choose identity panel,

00:30:15.720 --> 00:30:18.480
which lets you pick from
multiple PKI identities.

00:30:18.480 --> 00:30:20.240
And I'll get into that in a minute.

00:30:20.250 --> 00:30:24.620
All of these are COCA classes that
have been available since 10.3,

00:30:24.750 --> 00:30:28.000
but we're adding new functions,
adding methods,

00:30:28.000 --> 00:30:30.570
and improving the functionality,
and also improving the look of

00:30:30.580 --> 00:30:34.310
them so that they have features
like progressive disclosure,

00:30:34.310 --> 00:30:38.170
where you're not pummeling the
user with all the information

00:30:38.180 --> 00:30:41.080
in a certificate right away,
but it's there if they

00:30:41.080 --> 00:30:42.510
need to look at it.

00:30:43.900 --> 00:30:51.750
Here's an example of the one in the front
there is the SS Certificate Trust Panel.

00:30:51.750 --> 00:30:55.770
And this is just a sample use in
Safari where it would put up a message.

00:30:55.800 --> 00:31:00.070
You'd have the option to show the
certificates involved and then to

00:31:00.120 --> 00:31:03.890
continue with the operation or to cancel.

00:31:06.280 --> 00:31:09.960
So,
SF Certificate View is pretty flexible.

00:31:09.960 --> 00:31:13.160
You can just show a summary
view with the basic information,

00:31:13.160 --> 00:31:15.170
the name of the cert.

00:31:15.220 --> 00:31:19.320
You can add programmatically little
turn down triangles that progressively

00:31:19.320 --> 00:31:21.200
show you more and more detail.

00:31:21.200 --> 00:31:27.780
And another thing that I missed,
but you can actually grab hold of that

00:31:27.780 --> 00:31:31.200
cert in the view and directly export it.

00:31:31.200 --> 00:31:35.020
You can drag it to the finder to
directly export a certificate file.

00:31:35.230 --> 00:31:39.400
You can drag it to a mail
message to export either in

00:31:39.400 --> 00:31:41.200
PAM Armor or not the certificate.

00:31:41.230 --> 00:31:43.200
And it gives you a lot of flexibility.

00:31:43.200 --> 00:31:46.000
That's all built into the view.

00:31:46.100 --> 00:31:51.290
The SF Certificate Panel is used in
cases where you just want to show

00:31:51.290 --> 00:31:57.080
certificates without necessarily
needing the user to make a decision.

00:31:57.080 --> 00:32:03.080
So it's for informational purposes
once the operation has taken place.

00:32:03.210 --> 00:32:06.250
For example,
maybe you've got a website like we saw

00:32:06.250 --> 00:32:11.110
there where the operation was successful,
the certificate chain verified,

00:32:11.110 --> 00:32:16.010
but you actually want to be able to see
that and know what certificate it was.

00:32:16.100 --> 00:32:22.160
So you can choose to display just
one certificate or the entire chain,

00:32:22.340 --> 00:32:26.550
and you can also add certificates
that aren't part of the chain

00:32:26.550 --> 00:32:28.300
when you're showing that view.

00:32:28.300 --> 00:32:32.480
There is a standalone
interface to that panel,

00:32:32.480 --> 00:32:36.080
or you can have a sheet
interface as we saw in the demo.

00:32:37.970 --> 00:32:42.360
Now the SF Certificate Trust Panel is
the one that you'll want to use when

00:32:42.360 --> 00:32:44.150
you need to make a trust decision.

00:32:44.280 --> 00:32:47.510
You don't have enough information,
the certificate chain was not

00:32:47.510 --> 00:32:51.740
necessarily valid or maybe one
of the certificates expired.

00:32:51.740 --> 00:32:55.380
There was some problem with it and
you want to ask the user what to do.

00:32:55.490 --> 00:32:59.090
So this panel does all of the hard
work and the heavy lifting for you as

00:32:59.190 --> 00:33:03.310
far as showing you the certificates
and giving you the tools to be

00:33:03.520 --> 00:33:05.790
able to ask the user what to do.

00:33:05.910 --> 00:33:09.950
Again, like the previous panel,
it comes in a standalone panel

00:33:10.150 --> 00:33:11.800
or in a sheet interface version.

00:33:11.800 --> 00:33:14.900
And you have complete control
over what text shows up and

00:33:15.010 --> 00:33:16.800
what the buttons look like.

00:33:18.450 --> 00:33:23.390
The SF Choose Identity Panel is
one that I didn't show,

00:33:23.450 --> 00:33:29.760
but very similar to those in that if you
need to select from multiple identities,

00:33:29.880 --> 00:33:31.390
and this is happening more and more.

00:33:31.400 --> 00:33:34.390
For example, users have maybe a
free email certificate,

00:33:34.430 --> 00:33:38.340
and then the university or the
company or some institution will

00:33:38.340 --> 00:33:40.170
also issue them a certificate.

00:33:40.180 --> 00:33:43.470
And so they could be signing
or encrypting things with,

00:33:43.470 --> 00:33:47.000
they have a choice of keys and
certificates to do that with.

00:33:47.660 --> 00:33:51.720
So we provide you a panel that
you can bring up and to display

00:33:51.900 --> 00:33:55.900
the available identities and
to ask the user to pick one,

00:33:55.900 --> 00:33:58.510
and then it returns the
identity that they chose.

00:33:58.540 --> 00:34:02.940
Again, with progressive disclosure,
so you see the names of the identities,

00:34:02.940 --> 00:34:06.450
and then the user can choose to show
all the details or some of them.

00:34:06.460 --> 00:34:09.650
Again,
it's a standalone version or a sheet,

00:34:09.650 --> 00:34:13.540
and you have control over
what the buttons look like.

00:34:15.710 --> 00:34:18.210
So with that,
I'd like to ask Michael to come back up,

00:34:18.210 --> 00:34:20.790
and he will tell you a little
bit more about the X.509

00:34:20.790 --> 00:34:24.540
anchors and how they're trusted.

00:34:24.850 --> 00:34:29.740
Thank you, Ken.

00:34:33.820 --> 00:34:38.510
So I talked a little earlier
about there's the X.509 anchors

00:34:38.510 --> 00:34:42.410
file on Mac OS X which contains
all the root certificates that

00:34:42.410 --> 00:34:43.440
are trusted by the system.

00:34:43.440 --> 00:34:49.500
We've actually started doing some
software updates to that file,

00:34:49.500 --> 00:34:52.550
and we've been very careful
when we did the software update

00:34:52.550 --> 00:34:55.060
to make sure we didn't just
overwrite the anchors database,

00:34:55.060 --> 00:34:59.120
but we add the new anchors that we've
gotten approval for to that file

00:34:59.120 --> 00:35:03.590
without blowing away any anchors
that you might have added yourself.

00:35:03.800 --> 00:35:08.540
And that's also true when you
upgrade from Panther to Tiger,

00:35:08.540 --> 00:35:11.320
it'll preserve the anchors
database on your system now,

00:35:11.490 --> 00:35:14.940
which wasn't true going
from Jaguar to Panther.

00:35:15.900 --> 00:35:20.340
So we'd really like you to talk to us
if you're a CA or if you somehow want

00:35:20.340 --> 00:35:26.880
to get your research into the system
about getting them added to Mac OS X.

00:35:26.900 --> 00:35:29.390
And the person to talk to
would be Craig Keithley,

00:35:29.390 --> 00:35:33.950
and I'll put his contact information
up at the end of the session.

00:35:34.200 --> 00:35:36.680
One thing I forgot to mention
earlier on in the session was that

00:35:37.310 --> 00:35:43.970
Mail uses the SMIME APIs-- sorry,
the SMIME SPIs.

00:35:44.170 --> 00:35:48.310
And the reason that the SMIME stuff is
still SPI is because we really haven't

00:35:48.320 --> 00:35:53.820
gotten a lot of feedback from developers
asking us to make SMIME an API.

00:35:53.970 --> 00:35:56.130
Now,
if you're a developer of a Mail client

00:35:56.130 --> 00:35:59.920
and you want to see SMIME become an API,
I encourage you to bring that

00:35:59.920 --> 00:36:02.370
information to the feedback forum.

00:36:03.700 --> 00:36:08.240
So next up, smart cards,
what I promised in the beginning.

00:36:08.380 --> 00:36:10.100
Smart card support in OS X.

00:36:10.120 --> 00:36:11.990
There's some good news
and there's some bad news.

00:36:12.030 --> 00:36:16.840
The good news is we're actually going to
be doing something revolutionary here.

00:36:16.860 --> 00:36:19.380
Compared to any other platform,
the smart card support that

00:36:19.380 --> 00:36:23.300
will be in OS X will be
horizontal smart card support.

00:36:23.300 --> 00:36:27.210
It will be across the entire OS,
supported for-- you can use

00:36:27.210 --> 00:36:31.830
the same smart card to log in,
to authorize access to certain

00:36:32.010 --> 00:36:35.890
settings in system preference,
services, use it in mail,

00:36:35.890 --> 00:36:37.540
use it in Safari.

00:36:37.540 --> 00:36:39.820
You can use it for your screen saver.

00:36:39.820 --> 00:36:46.400
It could be used in a server to
store server keys or certificates on.

00:36:46.400 --> 00:36:52.020
Any apps using CDSA or CDSA-based APIs,
meaning the keychain APIs,

00:36:52.020 --> 00:36:56.490
the secure transport APIs,
or any higher level APIs,

00:36:56.700 --> 00:36:58.740
will benefit from this.

00:36:58.740 --> 00:37:01.220
And we'll have single
sign-on with the smart card.

00:37:01.270 --> 00:37:03.600
So you insert the smart card.

00:37:03.640 --> 00:37:05.660
Enter your PIN once to log in.

00:37:05.900 --> 00:37:08.730
And you won't have to re-enter
your PIN every time you do

00:37:08.730 --> 00:37:11.100
something with the card,
unless you choose to.

00:37:11.140 --> 00:37:16.340
Because you'll actually be able to set
access control list entries on that card,

00:37:16.400 --> 00:37:22.320
which the security architecture will
actually fan out access to that card to

00:37:22.320 --> 00:37:28.500
multiple applications and gate access
to it using access control lists.

00:37:28.630 --> 00:37:33.400
Previously on Mac OS X,
we've only really had a few select,

00:37:33.400 --> 00:37:37.480
vertical smart card solutions
that were based on PCSC.

00:37:37.920 --> 00:37:40.270
Our new architecture
is still based on PCSC,

00:37:40.280 --> 00:37:43.110
but the difference is we're
actually sharing access to the card.

00:37:43.310 --> 00:37:50.240
PCSC didn't give you any abstraction
that let you support multiple cards.

00:37:50.400 --> 00:37:52.370
It just abstracted basically the reader.

00:37:52.560 --> 00:37:55.810
So you'd plug in a USB reader,
and PCSC would deal with

00:37:55.960 --> 00:37:57.490
loading a driver for that.

00:37:57.600 --> 00:38:00.780
But if you had three different cards,
you'd have to have three different

00:38:00.780 --> 00:38:04.200
libraries in your application
to talk to those three cards.

00:38:04.200 --> 00:38:05.200
That's all over.

00:38:05.220 --> 00:38:08.070
That'll all be over when Tiger ships.

00:38:08.700 --> 00:38:12.100
So here's an overview of what
the architecture looks like.

00:38:12.130 --> 00:38:19.090
And on the top, the green box there,
is the applications.

00:38:20.040 --> 00:38:22.380
I guess we don't get a cursor here,
so well.

00:38:22.500 --> 00:38:26.070
The green box on the top
are your applications,

00:38:26.230 --> 00:38:31.000
which are either sitting on top of
the Sec APIs or Secure Transport or

00:38:31.000 --> 00:38:42.070
CFNet Perk or WebKit or whatnot,
which in turn is layered on top of CDSA,

00:38:42.070 --> 00:38:42.070
which is CSSM is the API part of CDSA.

00:38:42.530 --> 00:38:48.400
That sits on top of a new plug-in
module that's going to be in Tiger,

00:38:48.420 --> 00:38:51.000
which is the SD CSPDL.

00:38:51.000 --> 00:38:52.640
SD stands for Security D.

00:38:52.640 --> 00:38:56.760
Security D is what used to be
called Security Server in Panther.

00:38:56.760 --> 00:38:58.700
We've renamed it to Security D in Tiger.

00:39:00.700 --> 00:39:06.540
So the SD CSPDL actually
represents a CSP,

00:39:06.540 --> 00:39:08.800
which stands for Cryptographic
Service Provider,

00:39:08.800 --> 00:39:11.500
and DL,
which is a data store library module.

00:39:11.500 --> 00:39:16.880
You can think of the CSP part as
anything to do with cryptography.

00:39:16.880 --> 00:39:21.340
Encryption, decryption, signing, verify,
all that goes through the CSP part.

00:39:21.370 --> 00:39:25.410
The DL part is anything to do
with finding items or records

00:39:25.410 --> 00:39:27.830
or modifying items or records.

00:39:27.910 --> 00:39:30.300
So searching for a certificate or a key.

00:39:30.790 --> 00:39:32.390
That happens through the DL interface.

00:39:32.560 --> 00:39:38.390
Using that key to actually do something
goes through the CSP interface.

00:39:38.790 --> 00:39:42.830
So if your app was actually
written directly to CSSM,

00:39:42.830 --> 00:39:45.800
which I doubt very few of
your applications will be,

00:39:45.800 --> 00:39:49.590
I think,
you'll have to actually modify your app

00:39:49.690 --> 00:39:52.950
to be aware of the new Smart Card CSPDL.

00:39:53.110 --> 00:39:55.140
If your app is using any
of the higher level APIs,

00:39:55.320 --> 00:39:57.770
it won't require any changes.

00:39:58.440 --> 00:40:01.800
Then SecurityD actually talks to PCSCD.

00:40:01.800 --> 00:40:04.270
Now the only communication
really between SecurityD and

00:40:04.270 --> 00:40:08.300
PCSCD is that SecurityD watches
for token insertion events.

00:40:08.300 --> 00:40:13.300
PCSCD tracks the readers on your system,
so if you plug in a USB reader,

00:40:13.300 --> 00:40:16.280
it'll notify SecurityD of
that and SecurityD will say,

00:40:16.340 --> 00:40:18.910
"Okay, fine,
whatever." When you actually insert a

00:40:18.940 --> 00:40:23.300
smart card into one of those readers,
PCSCD will notify SecurityD.

00:40:23.300 --> 00:40:27.450
When that happens,
SecurityD will try and get a code off the

00:40:27.450 --> 00:40:30.290
smart card to try and identify that card.

00:40:30.340 --> 00:40:33.610
Based on that,
it'll narrow down to a selection of

00:40:33.610 --> 00:40:38.300
one or more different TokenD instances
that are on the system.

00:40:38.300 --> 00:40:42.560
So each TokenD that is on
the system can be seen as a

00:40:42.600 --> 00:40:47.130
driver for a particular token,
and token being a smart card.

00:40:47.300 --> 00:40:51.300
So each TokenD supports a
particular class of tokens.

00:40:51.300 --> 00:40:53.300
So you could have one for
card for manufacturing.

00:40:53.300 --> 00:40:56.850
One for manufacturer A,
another one for card for manufacturer B,

00:40:56.900 --> 00:40:57.260
etc.

00:40:57.300 --> 00:41:02.600
So SecurityD will then launch the ones
that are candidates for that card and

00:41:02.600 --> 00:41:08.930
ask them to tell SecurityD whether
or not they support that particular

00:41:08.930 --> 00:41:10.300
card that the user just inserted.

00:41:10.300 --> 00:41:13.300
And when it finds the one that
actually supports the card,

00:41:13.460 --> 00:41:18.260
it'll keep that loaded and TokenD will
establish a session to the card.

00:41:19.000 --> 00:42:44.600
[Transcript missing]

00:42:46.200 --> 00:42:49.200
So here would be an example
of a third-party token D.

00:42:49.490 --> 00:42:52.800
So you might have noticed
you haven't seen PKSS 11

00:42:52.800 --> 00:42:53.920
anywhere in this architecture.

00:42:53.950 --> 00:42:59.760
Well, that's because PKSS 11 is
really not an abstraction layer.

00:42:59.760 --> 00:43:04.420
It's more a library layer to
talk to one particular card.

00:43:05.680 --> 00:43:11.920
So if you had a PKSS 11 library to
talk to your brand of card already,

00:43:11.940 --> 00:43:13.280
it would take very little work.

00:43:13.380 --> 00:43:17.160
Basically,
the part in your token D would be the

00:43:17.160 --> 00:43:20.520
only code you have to write because
you already had the PKSS 11 driver that

00:43:20.520 --> 00:43:22.900
uses the PCSC framework on Mac OS X.

00:43:22.900 --> 00:43:27.130
And you just have to write a little
bit of glue code to transition

00:43:27.130 --> 00:43:31.350
from the token D interface to
security D down to PKSS 11.

00:43:31.350 --> 00:43:33.840
Those two interfaces are
actually fairly similar.

00:43:33.840 --> 00:43:34.840
The security token D is the
one that's going to be the most

00:43:34.950 --> 00:43:35.510
important part of the process.

00:43:35.580 --> 00:43:39.670
So the security token D interface is
somewhat closer to CDSA than PKSS 11,

00:43:39.670 --> 00:43:42.080
but they have very similar sets of calls.

00:43:44.920 --> 00:43:47.350
And one of the things we're
looking at doing in the future

00:43:47.360 --> 00:43:53.330
is actually making the Your Token
D box be part of Security Token D,

00:43:53.330 --> 00:43:55.340
meaning that if you already
had a PQS 11 driver,

00:43:55.340 --> 00:43:59.140
you might not have to write
any code to provide a Token D.

00:43:59.210 --> 00:44:01.590
Although,
there'll probably be a little bit still,

00:44:01.740 --> 00:44:05.760
because the auto discovery that we're
doing is not something PQS 11 supports.

00:44:07.920 --> 00:44:12.200
So here's the bad news,
or at least potential bad news.

00:44:12.250 --> 00:44:15.000
There are a couple of existing
smart card solutions out there.

00:44:15.040 --> 00:44:17.030
Now,
all those existing smart card solutions

00:44:17.070 --> 00:44:22.070
were vertical solutions in that you had
one or two applications that knew how to

00:44:22.070 --> 00:44:29.070
load a driver for a particular card and
talk to that particular card or cards.

00:44:29.160 --> 00:44:33.150
The problem is with the new architecture,
because we're doing single sign-on,

00:44:33.180 --> 00:44:36.460
as soon as we ship a token
D that supports that card,

00:44:36.490 --> 00:44:38.640
it'll automatically get loaded
when the card's inserted and

00:44:38.640 --> 00:44:39.950
it'll open a session to the card.

00:44:39.960 --> 00:44:44.340
Now, if the card is single session,
that means that your vertical app

00:44:44.340 --> 00:44:48.280
will not be able to coexist with
the token D on the system because

00:44:48.280 --> 00:44:50.400
the card doesn't support two.

00:44:50.400 --> 00:44:53.970
Even though PCSC will let you do it,
the card won't support two

00:44:54.100 --> 00:44:55.890
apps directly accessing it.

00:44:55.920 --> 00:44:58.540
Apps written to the
higher level APIs will.

00:44:58.540 --> 00:45:02.100
Because the whole reason we're doing
this architecture is to have cards

00:45:02.100 --> 00:45:06.000
that can only do one session still
be capable of being shared between

00:45:06.000 --> 00:45:08.320
multiple applications at the same time.

00:45:08.320 --> 00:45:11.240
If this is really,
really a big problem for you,

00:45:11.240 --> 00:45:14.600
we'd really like to hear
this at the feedback forum.

00:45:14.600 --> 00:45:19.800
Because we have some ideas of things we
can do to potentially get around this,

00:45:19.800 --> 00:45:24.520
but you would lose a single sign-on
when you launch your vertical app,

00:45:24.520 --> 00:45:25.520
basically.

00:45:28.080 --> 00:45:30.620
But obviously the best thing to
do is to transition these apps

00:45:30.620 --> 00:45:32.290
to the new architecture in Tiger.

00:45:32.300 --> 00:45:35.810
Because then you'd get support
in Mail and Safari and everything

00:45:35.810 --> 00:45:37.470
and not just in that one app.

00:45:38.760 --> 00:45:41.480
So, in particular,
the CAC cards and other cards

00:45:41.850 --> 00:45:45.200
supported by Muscle will be
supported natively in Tiger,

00:45:45.200 --> 00:45:47.710
so they'll have this problem
because I don't think any of

00:45:47.710 --> 00:45:49.570
those cards are multi-session.

00:45:50.110 --> 00:45:52.760
So, and again,
talk to us about adding support for

00:45:53.330 --> 00:45:55.850
other types of cards into OS X because,
I mean,

00:45:55.850 --> 00:45:59.150
wouldn't it be cool if you could use
Safari to do your client side off with,

00:45:59.150 --> 00:46:01.580
you know,
your custom card that you're using

00:46:01.630 --> 00:46:05.580
and mail to send secure mail and
log in and use your screen saver,

00:46:05.580 --> 00:46:06.630
et cetera.

00:46:06.800 --> 00:47:16.600
[Transcript missing]

00:47:17.750 --> 00:47:22.270
So, for more information and
if you want to talk to us,

00:47:22.350 --> 00:47:24.140
please contact Craig Keithley.

00:47:24.140 --> 00:47:26.790
And with that,
I'd like to bring Craig on stage.

00:47:27.020 --> 00:47:31.450
And he's the Security and
I/O Technology Evangelist.