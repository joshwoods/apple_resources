WEBVTT

00:00:12.300 --> 00:00:18.530
And now presenting under the topic of
scripting for system administrators,

00:00:18.530 --> 00:00:22.440
AppleScript, Shell, Perl, etc.

00:00:22.530 --> 00:00:24.420
John Rennich.

00:00:28.700 --> 00:00:30.580
We actually have some people here.

00:00:30.660 --> 00:00:31.150
That's exciting.

00:00:31.150 --> 00:00:34.320
We had to compete with the
Apple Remote Desktop session,

00:00:34.320 --> 00:00:36.800
so nobody get up and
leave because I said that.

00:00:36.830 --> 00:00:39.760
And it's Friday afternoon.

00:00:39.760 --> 00:00:43.100
So scripting for system administrators.

00:00:43.100 --> 00:00:47.260
When they asked me to do this,
they had a huge amount of stuff that

00:00:47.260 --> 00:00:49.960
they wanted included in one session.

00:00:49.960 --> 00:00:52.970
They said, AppleScript, Shell, and Perl.

00:00:52.990 --> 00:00:55.930
I said, you know,
that's an awful lot of stuff

00:00:55.930 --> 00:00:57.580
to get done in an hour.

00:00:59.400 --> 00:01:02.750
So I don't pretend that I'm going
to be able to teach you everything

00:01:02.750 --> 00:01:06.480
you need to know about AppleScript,
Shell, and Perl in 60 minutes or less.

00:01:06.480 --> 00:01:10.440
However, hopefully I can give you
enough good examples of fun,

00:01:10.470 --> 00:01:15.300
exciting, very interesting things that
I have done with these and that

00:01:15.500 --> 00:01:17.380
you can also easily do with them.

00:01:17.420 --> 00:01:20.590
I'll primarily be concentrating
as we go through on the number

00:01:20.590 --> 00:01:23.760
of interactions that you can
have between one or the other.

00:01:23.890 --> 00:01:26.420
Just because you have a favorite
language doesn't mean that you're

00:01:26.420 --> 00:01:29.350
eliminated from using the other
language for doing the other things.

00:01:29.400 --> 00:01:33.250
And so certainly the deficiencies of
one language can easily be overcome

00:01:33.250 --> 00:01:35.580
by the advantages of another language.

00:01:35.580 --> 00:01:37.160
So that's what I'll be
concentrating a lot on.

00:01:37.250 --> 00:01:39.180
Got a lot of example scripts.

00:01:39.180 --> 00:01:41.720
Those will all be
available on my website.

00:01:41.720 --> 00:01:45.110
AFP548.com is the website
if you don't know that.

00:01:45.150 --> 00:01:47.920
If you don't know what that reference is,
that's fine.

00:01:47.920 --> 00:01:49.600
Look on the website.

00:01:49.600 --> 00:01:52.140
You can become a better geek.

00:01:52.140 --> 00:01:55.940
So all these example scripts will
be available that you can download,

00:01:55.940 --> 00:01:56.860
take a look at.

00:01:56.900 --> 00:01:58.810
Hopefully you can increase
your own code with it.

00:01:59.380 --> 00:02:02.240
So without further ado,

00:02:04.770 --> 00:02:07.740
AppleScript, Shell, and Perl,
why you want a script, and some examples.

00:02:07.740 --> 00:02:10.070
Because a lot of people that I'm--

00:02:10.200 --> 00:02:13.440
I find a lot of bit when I'm consulting
and when I'm training that I tell people,

00:02:13.440 --> 00:02:13.880
"Well, that's easy.

00:02:13.880 --> 00:02:16.660
That's three lines of shell." "Well,
but I don't want to have

00:02:16.660 --> 00:02:18.870
to learn shell." "Well,
then that's four lines

00:02:18.870 --> 00:02:20.490
of AppleScript." "Well,
I don't want to have to

00:02:20.490 --> 00:02:23.070
learn AppleScript." "Well,
that's a couple lines of Perl." Well,

00:02:23.070 --> 00:02:26.080
it really isn't that big of an
impediment to getting something

00:02:26.080 --> 00:02:27.110
done that you want to do.

00:02:27.260 --> 00:02:29.590
How many are currently scripting?

00:02:29.900 --> 00:02:30.400
Great.

00:02:30.400 --> 00:02:32.700
So I can get rid of that
whole argument right there.

00:02:32.700 --> 00:02:35.080
We don't need to convince
you that you need to do that.

00:02:35.080 --> 00:02:35.580
All right.

00:02:35.580 --> 00:02:38.380
So some ideas about
when to write a script,

00:02:38.410 --> 00:02:41.050
some ideas about what
language to write it in,

00:02:41.080 --> 00:02:43.880
and some really cool script ideas,
because that's what we're all

00:02:43.880 --> 00:02:48.580
here to learn how to do the sexy,
fun stuff to make our lives a lot easier.

00:02:49.180 --> 00:02:51.580
Three major scripting languages
we'll be talking about.

00:02:51.620 --> 00:02:54.080
The Camel for Perl, the AppleScript,
and the Terminal for Shell.

00:02:54.090 --> 00:02:55.810
You'll see those as we go through here.

00:02:55.820 --> 00:02:59.360
Sometimes it's a hard sell
why you want to do a script.

00:02:59.410 --> 00:03:01.600
Sometimes you need to convince yourself.

00:03:01.600 --> 00:03:03.330
Sometimes you need to convince your boss.

00:03:03.330 --> 00:03:06.020
Sometimes you need to convince
someone else why you want a script.

00:03:06.080 --> 00:03:08.560
These are a couple good
reasons why you want a script.

00:03:08.610 --> 00:03:09.550
It's easy.

00:03:09.550 --> 00:03:12.110
You can liberate admins, right?

00:03:13.300 --> 00:03:15.980
I think I used to have something
in there about how a script was a

00:03:15.980 --> 00:03:18.940
lot less expensive than an admin,
but they got mad at me for that

00:03:18.940 --> 00:03:21.540
because admins might take offense,
and we don't want to

00:03:21.550 --> 00:03:22.640
put people out of work.

00:03:22.700 --> 00:03:25.450
Your fingers definitely can get tired,
but if you have a script,

00:03:25.450 --> 00:03:26.780
you never have to do it again.

00:03:26.800 --> 00:03:29.650
If you ever know you're
going to have to do it again,

00:03:29.720 --> 00:03:30.450
script it.

00:03:30.530 --> 00:03:35.110
It's so much more fun to write a script
than it is to continually do the same

00:03:35.110 --> 00:03:37.550
thing over and over and over again.

00:03:37.630 --> 00:03:40.220
That shouldn't be a hard
thing to have to understand.

00:03:40.220 --> 00:03:43.280
No matter how old you are,
you're too old to understand.

00:03:43.280 --> 00:03:45.530
You're too old to do the
same thing 15 times in a row.

00:03:45.540 --> 00:03:48.040
There's just no reason to have
that level of repetition in

00:03:48.040 --> 00:03:49.650
your administration workflow.

00:03:49.660 --> 00:03:52.560
Definitely others need
to be able to do it.

00:03:52.650 --> 00:03:53.360
Reliability.

00:03:53.460 --> 00:03:56.370
A script never gets things wrong once
the script has been written right.

00:03:56.400 --> 00:03:58.530
It's not going to mistype
something as it goes in there.

00:03:58.540 --> 00:04:01.150
My biggest problem, typing is bad.

00:04:01.160 --> 00:04:04.140
Tab completion works great for me,
but it can't do everything,

00:04:04.140 --> 00:04:06.200
so a script takes care
of the rest of that.

00:04:06.320 --> 00:04:09.240
It's certainly a lot more fun
to write a script than it is

00:04:09.240 --> 00:04:11.080
to close out a trouble ticket.

00:04:11.100 --> 00:04:13.200
If you can get a script
to close that out,

00:04:13.300 --> 00:04:16.460
and you can just use ARD or
something else to push that out,

00:04:16.470 --> 00:04:18.700
then you can solve some
problems easily that way.

00:04:18.720 --> 00:04:20.370
I came up with a little chart.

00:04:20.380 --> 00:04:25.300
Amount of work accomplished
by amount of admins.

00:04:25.300 --> 00:04:26.490
Oh, man.

00:04:26.500 --> 00:04:28.000
We missed the actual.

00:04:28.000 --> 00:04:31.530
The yellow line on top
is admins who script.

00:04:31.670 --> 00:04:33.200
The red line is admins who don't.

00:04:33.300 --> 00:04:35.590
That lost in graphics, but that's okay.

00:04:35.600 --> 00:04:36.730
It's exciting, right?

00:04:36.820 --> 00:04:38.770
The more scripting you do,
the more efficient you are.

00:04:38.780 --> 00:04:42.780
Then I gave that, and they said, well,
I can't really use those numbers,

00:04:42.880 --> 00:04:45.510
because they weren't scientific,
and we didn't want people to think that

00:04:45.640 --> 00:04:46.910
I had done an actual study on this.

00:04:47.020 --> 00:04:50.240
These are fake numbers,
but you get the idea that if you start

00:04:50.270 --> 00:04:53.600
out as an admin that's scripting,
you've already got work that's

00:04:53.600 --> 00:04:55.980
being done for you without
you having to lift a finger.

00:04:56.530 --> 00:04:58.950
Definitely,
scripting is a very good way to go.

00:04:59.020 --> 00:05:00.660
When to script.

00:05:00.740 --> 00:05:03.000
There's times that you should script,
and there's times that

00:05:03.040 --> 00:05:03.830
you shouldn't script.

00:05:05.760 --> 00:05:07.930
When you need to automate the process,
when you need to make sure it's

00:05:08.050 --> 00:05:10.840
done the same way every time,
and when you find scripting

00:05:10.840 --> 00:05:12.280
more fun than real work.

00:05:12.370 --> 00:05:15.520
All great times to script.

00:05:15.700 --> 00:05:19.570
I certainly don't want to encourage
anyone to do work when scripting calls.

00:05:19.660 --> 00:05:21.840
If you have the need,
if you have that desire,

00:05:21.840 --> 00:05:24.420
and you find it fun,
go start writing scripts.

00:05:24.510 --> 00:05:25.170
Don't do the real work.

00:05:25.220 --> 00:05:28.690
Let the scripts take care
of that for you later on.

00:05:28.900 --> 00:05:32.150
Times that sometimes it's
not a good idea to script.

00:05:33.120 --> 00:05:36.140
Sometimes scripts just
get way too complicated.

00:05:36.340 --> 00:05:39.220
You need to understand
that there's a break point.

00:05:39.230 --> 00:05:42.400
After you've put too much effort into a
script and it's still not going anywhere,

00:05:42.400 --> 00:05:46.140
or the situation is just too complicated,
don't script it.

00:05:46.140 --> 00:05:49.570
Lay back, let somebody do it,
maybe yourself.

00:05:49.590 --> 00:05:51.910
And definitely leave
some exciting things.

00:05:52.080 --> 00:05:55.280
If you scripted everything,
you're going to be bored.

00:05:55.280 --> 00:05:58.120
So a nice mix of both of those is good.

00:05:58.330 --> 00:06:00.940
So now we get into the religious war,
all right?

00:06:00.980 --> 00:06:04.000
Because I'm sure we have people
that are all from AppleScript,

00:06:04.000 --> 00:06:08.330
or bash, or shell, or ZSH,
or any of the other ones that we might

00:06:08.330 --> 00:06:10.120
have available to us here on OS X.

00:06:10.260 --> 00:06:11.560
So which scripting language?

00:06:11.620 --> 00:06:12.880
Which one do you want to pick?

00:06:12.880 --> 00:06:15.460
Especially if you're new to scripting,
there's a lot of different

00:06:15.460 --> 00:06:16.970
options that you have out there.

00:06:17.110 --> 00:06:18.220
Which one do you want to use?

00:06:18.270 --> 00:06:20.300
Which one is going to be
more effective for you?

00:06:20.410 --> 00:06:22.600
So a couple of thoughts on that.

00:06:22.600 --> 00:06:26.560
First of all, these are at least--
this is a non-exhaustive.

00:06:26.560 --> 00:06:28.680
But what I found with a
little bit of poking around,

00:06:28.720 --> 00:06:31.240
scripting languages that
are included in OS X.

00:06:31.290 --> 00:06:33.620
So the three that we're going
to talk about here on the top,

00:06:33.630 --> 00:06:37.980
AppleScript, Shell, and Perl-- Python,
Ruby, TCL, PHP,

00:06:37.980 --> 00:06:41.920
Expect-- all of these are scripting
languages that are included in here.

00:06:41.920 --> 00:06:44.010
So definitely take the one
that you like the most,

00:06:44.080 --> 00:06:46.460
the one that works best for you,
and start using it.

00:06:46.690 --> 00:06:48.240
All of these can do things.

00:06:48.370 --> 00:06:49.710
Some do them better than others.

00:06:49.830 --> 00:06:53.030
But almost every script will be able
to accomplish what you're looking

00:06:53.030 --> 00:06:55.320
for if you bang at it hard enough.

00:06:55.490 --> 00:06:58.260
Some other ones that people like
that aren't included in default

00:06:58.260 --> 00:07:01.250
install but are easily to install,
download, package install,

00:07:01.250 --> 00:07:02.350
or whatever else.

00:07:02.440 --> 00:07:07.400
Smalltalk, Fscript, Frontier, Real Basic,
and so many others.

00:07:07.400 --> 00:07:09.940
Slashdot recently had an article
about comparing scripting

00:07:10.000 --> 00:07:11.210
languages back and forth.

00:07:11.240 --> 00:07:18.840
And there were some 30 or 40 different
options that were on there that they

00:07:18.840 --> 00:07:18.880
had run through some code to see who
was the fastest and all the rest.

00:07:19.600 --> 00:07:23.000
Important couple of points about
picking a scripting languages.

00:07:23.060 --> 00:07:23.760
Does it do what you need?

00:07:23.800 --> 00:07:26.680
It seems basic,
but I know a lot of people

00:07:27.290 --> 00:07:28.930
that forget this one.

00:07:28.930 --> 00:07:31.410
They're convinced that
the script that they know,

00:07:31.410 --> 00:07:33.540
the language that they
understand is the one,

00:07:33.700 --> 00:07:35.510
all, end all scripting language.

00:07:35.530 --> 00:07:37.700
And they don't even
look at the other ones.

00:07:37.700 --> 00:07:39.820
So you got to understand if your
scripting language that you're

00:07:39.820 --> 00:07:41.820
using doesn't do what you need,
obviously you need another

00:07:41.820 --> 00:07:42.660
scripting language.

00:07:43.950 --> 00:07:44.780
Do you know the language?

00:07:44.780 --> 00:07:46.280
If you don't know it,
it's going to be a lot

00:07:46.280 --> 00:07:46.860
harder to script it.

00:07:46.930 --> 00:07:49.840
Not that you shouldn't learn a language,
but just keep in mind that

00:07:49.840 --> 00:07:51.010
you know what you know.

00:07:52.690 --> 00:07:54.130
Will you be able to run
it where you need to?

00:07:54.350 --> 00:07:56.360
One of the reasons why
we're talking about Shell,

00:07:56.360 --> 00:08:00.210
AppleScript,
and Perl is their default on the install.

00:08:00.300 --> 00:08:02.060
If you go out and you
create a real basic script,

00:08:02.090 --> 00:08:04.520
you create a small talk
script or something else,

00:08:04.650 --> 00:08:06.140
you're going to have to put
that scripting environment

00:08:06.140 --> 00:08:07.510
on the other machines.

00:08:07.600 --> 00:08:10.310
So depending what your deployment
that you're looking for is,

00:08:10.480 --> 00:08:13.680
make sure that you have a scripting
language that's viable for that

00:08:13.680 --> 00:08:15.700
deployment that you're looking at.

00:08:16.450 --> 00:08:19.450
Most scripting languages will
be able to do most things.

00:08:19.570 --> 00:08:22.330
Don't believe the hype, OK?

00:08:22.390 --> 00:08:24.720
Scripting languages are very powerful.

00:08:24.720 --> 00:08:27.750
And if you work at it long enough,
the beauty of a script is that there's

00:08:27.820 --> 00:08:31.010
all kinds of possibilities that neither
you nor the developers of that language

00:08:31.010 --> 00:08:32.750
ever really thought about to begin with.

00:08:32.860 --> 00:08:35.250
And there's usually a lot more
than one way to do things.

00:08:35.440 --> 00:08:35.960
All right?

00:08:36.040 --> 00:08:38.070
So if you have a scripting
language that you know that

00:08:38.070 --> 00:08:41.130
you're fairly confident with,
familiar with, see if you can do it,

00:08:41.130 --> 00:08:42.760
put a little work into it.

00:08:43.120 --> 00:08:46.210
Finally, one of the most important
things about scripting.

00:08:46.300 --> 00:08:50.800
Some will do it better than others,
some won't, but they'll all get it done.

00:08:50.940 --> 00:08:53.620
I tried very hard to stay away
from any kind of speed comparisons

00:08:53.630 --> 00:08:55.080
or anything else in here.

00:08:55.160 --> 00:08:58.630
Because scripting isn't about speed.

00:08:58.820 --> 00:09:01.390
If we wanted to get the
fastest job done as possible,

00:09:01.400 --> 00:09:02.940
we'd write an actual
compiled application.

00:09:02.940 --> 00:09:05.010
We'd get out Xcode,
we'd write an Objective-C,

00:09:05.010 --> 00:09:07.040
we'd compile it,
and it would beat the pants off

00:09:07.040 --> 00:09:10.060
of anything that we could do with
the scripting for the most part.

00:09:11.420 --> 00:09:14.050
I tried very hard to stay
away from any kind of speed.

00:09:14.080 --> 00:09:16.700
If we wanted to get the
fastest job done as possible,

00:09:16.700 --> 00:09:19.040
we'd write an Objective-C,
we'd compile it,

00:09:19.040 --> 00:09:22.150
and it would beat the pants off
of anything that we could do with

00:09:22.210 --> 00:09:23.980
the scripting for the most part.

00:09:25.800 --> 00:09:28.700
Scripting is not a hack job.

00:09:28.700 --> 00:09:32.320
It's not a Band-Aid.

00:09:32.400 --> 00:09:36.260
Scripting is very much an integral
part of your system administration.

00:09:36.360 --> 00:09:40.100
It's not just something that you
worked up so that you could be lazy.

00:09:40.140 --> 00:09:42.980
Being lazy isn't a bad thing,
but scripting isn't a

00:09:42.980 --> 00:09:44.150
hack because of that.

00:09:44.280 --> 00:09:47.200
So many scripts are much more
than full-featured applications.

00:09:47.200 --> 00:09:50.460
I've written a couple shell scripts
that were like 1,200 lines long.

00:09:50.580 --> 00:09:54.220
I go back and I try to understand what
they do and I can't even remember.

00:09:54.430 --> 00:09:54.730
All right.

00:09:54.860 --> 00:09:57.740
But they're very complete,
very full functional shell scripts.

00:09:57.740 --> 00:09:59.460
And they do whatever an
application would do.

00:09:59.460 --> 00:10:00.840
I couldn't find an application
that would do that.

00:10:00.950 --> 00:10:04.500
Scripting was the least path of
least resistance for getting that.

00:10:04.630 --> 00:10:07.230
They're not a replacement
for network administrators.

00:10:07.230 --> 00:10:07.820
All right.

00:10:07.820 --> 00:10:09.670
You just need intelligence on the job.

00:10:09.670 --> 00:10:12.110
And that's a network administrator,
not a script.

00:10:12.120 --> 00:10:14.460
You need the ability to
make decisions like that.

00:10:14.460 --> 00:10:15.390
I shouldn't have.

00:10:15.390 --> 00:10:16.700
That goes without saying.

00:10:16.700 --> 00:10:18.780
And again,
not faster than an application,

00:10:18.780 --> 00:10:20.920
but almost always faster to develop.

00:10:20.920 --> 00:10:22.130
Joel Rennich

00:10:22.760 --> 00:10:25.550
Especially, we're not programmers for
the most part in here.

00:10:25.790 --> 00:10:27.460
This is scripting for
system administrators,

00:10:27.460 --> 00:10:28.340
not for Cocoa folks.

00:10:28.340 --> 00:10:32.610
So we can write these scripts,
we can make them very easily readable,

00:10:32.700 --> 00:10:35.940
we can make them very easily usable
for our other administrators that

00:10:35.940 --> 00:10:37.340
work in our same organization.

00:10:37.340 --> 00:10:39.660
Very easy to deploy,
we don't have to get into the

00:10:39.660 --> 00:10:41.540
full blown programming language.

00:10:41.540 --> 00:10:44.110
Again, we're not going to be faster,
we're not going to be

00:10:44.110 --> 00:10:47.250
maybe even more complete,
but we're going to be able to get the

00:10:47.250 --> 00:10:49.190
jobs done that we need to get done.

00:10:50.020 --> 00:10:52.500
So first off, AppleScript.

00:10:52.550 --> 00:10:54.990
One of the important underlying
features of AppleScript is

00:10:54.990 --> 00:10:57.260
its interaction with the GUI.

00:10:57.390 --> 00:11:00.220
Perl and Shell both have
huge amounts of features,

00:11:00.220 --> 00:11:02.710
but they're not going to be
able to interact with the GUI in

00:11:02.710 --> 00:11:04.240
the way that AppleScript does.

00:11:04.340 --> 00:11:06.290
So let's take a look at
some of the things here.

00:11:06.410 --> 00:11:08.890
So it started off as a
language to control other apps.

00:11:09.080 --> 00:11:11.870
However, it's completely fully
functional in its own right.

00:11:12.050 --> 00:11:14.040
You're going to be able to do
almost anything that you want to

00:11:14.040 --> 00:11:16.910
do with an AppleScript that you
can do with the other scripts.

00:11:17.050 --> 00:11:19.220
Mostly because we can do a lot
of interaction between them,

00:11:19.220 --> 00:11:21.550
And that's what we'll
get into a lot of here.

00:11:22.030 --> 00:11:24.980
Closest to spoken English,
a lot of scripters use this

00:11:24.980 --> 00:11:26.840
as their gateway language.

00:11:26.840 --> 00:11:30.300
When you become a network
administrator and you have fun with

00:11:30.300 --> 00:11:33.320
the GUI and it's exciting and man,
those icons are lickable and they

00:11:33.320 --> 00:11:35.220
look all great and everything else.

00:11:35.220 --> 00:11:38.480
But when you move on to the next step,
into writing your own things,

00:11:38.480 --> 00:11:41.540
into being able to do your own
processes and control your entire

00:11:41.540 --> 00:11:44.990
environment the way you want it,
AppleScript is many times the entry,

00:11:44.990 --> 00:11:47.290
the gateway drug into the scripting.

00:11:47.320 --> 00:11:49.160
So it's a great place to start.

00:11:49.200 --> 00:11:50.570
Very easy to pick up.

00:11:50.700 --> 00:11:51.880
We'll give you some basic ideas.

00:11:51.900 --> 00:11:54.160
about how to script,
what scripting will be able

00:11:54.180 --> 00:11:56.420
to do for you with a minimum
of effort at the beginning.

00:11:56.420 --> 00:11:58.330
It's been in the OS and System 7, right?

00:11:58.330 --> 00:11:59.930
It's been around for a long time.

00:11:59.940 --> 00:12:01.290
It's going to be there for a long time.

00:12:01.370 --> 00:12:03.220
Again,
this gets back to your deployability.

00:12:03.220 --> 00:12:06.980
If you have a script and you need
to cover a vast majority of the OSs,

00:12:06.980 --> 00:12:08.890
AppleScript is the way to go.

00:12:11.340 --> 00:12:13.980
So primarily the only
GUI scripting language,

00:12:13.980 --> 00:12:15.070
a couple of features of that.

00:12:15.170 --> 00:12:16.300
One, scriptable apps.

00:12:16.300 --> 00:12:18.620
If I have an app that has
an AppleScript dictionary,

00:12:18.620 --> 00:12:19.680
I can actually use it.

00:12:19.770 --> 00:12:20.780
I can tell Photoshop.

00:12:20.780 --> 00:12:22.840
Well,
Photoshop's not a good example of that.

00:12:22.840 --> 00:12:23.670
Tell Quark.

00:12:23.670 --> 00:12:25.990
I can tell Quark to do something.

00:12:26.000 --> 00:12:30.020
I can tell other applications to do
something through my AppleScript.

00:12:30.020 --> 00:12:32.620
I don't necessarily have to
write an app or really increase

00:12:32.620 --> 00:12:34.960
the power of that script,
because I can have another

00:12:34.960 --> 00:12:36.240
app that can do it for me.

00:12:36.390 --> 00:12:38.770
Plus, it's got the GUI scripting on it.

00:12:38.890 --> 00:12:41.100
So that way, I can go in,
I can create dialogues,

00:12:41.140 --> 00:12:43.050
it's got the blocks to pop up,
say things.

00:12:43.050 --> 00:12:44.700
We'll show you some of that, too.

00:12:44.700 --> 00:12:45.740
It's easy to pick up.

00:12:45.740 --> 00:12:49.050
Folder action scripts are another
powerful feature of AppleScript.

00:12:49.050 --> 00:12:50.870
I can attach an AppleScript to a folder.

00:12:50.990 --> 00:12:52.940
Any time a new object
goes into that folder,

00:12:52.940 --> 00:12:55.340
I can do something,
depending on what that is.

00:12:55.410 --> 00:12:58.610
Spoken English syntax means
it's really easy to learn.

00:12:58.720 --> 00:13:01.630
I can do things like tell
this application to do this.

00:13:01.700 --> 00:13:05.400
Tell the application finder to
display a dialogue that says,

00:13:05.470 --> 00:13:08.860
"Scripting is cool."
That's an AppleScript.

00:13:08.860 --> 00:13:09.580
All right?

00:13:09.580 --> 00:13:10.940
It really is that easy.

00:13:10.940 --> 00:13:12.640
It's really easy for a lot of places.

00:13:12.640 --> 00:13:13.520
AppleScript Studio.

00:13:13.520 --> 00:13:14.570
Who uses AppleScript Studio?

00:13:14.610 --> 00:13:15.880
All right.

00:13:15.880 --> 00:13:17.560
I'll show you a couple examples of that.

00:13:17.560 --> 00:13:19.860
But it's an incredibly easy
development environment,

00:13:19.980 --> 00:13:23.090
a rapid application environment that
you can easily get your development

00:13:23.090 --> 00:13:24.780
up and running very easily.

00:13:24.880 --> 00:13:25.830
Recordable.

00:13:26.070 --> 00:13:26.760
All right?

00:13:26.760 --> 00:13:29.110
This is maybe not as useful
as it always should be.

00:13:29.210 --> 00:13:32.080
But recordable AppleScript will
get you into the vein of things.

00:13:32.170 --> 00:13:34.130
I can hit a record button,
I can do some actions,

00:13:34.130 --> 00:13:36.640
I can look at the AppleScript that's
generated from that,

00:13:36.650 --> 00:13:38.120
and then I can refine from there.

00:13:38.120 --> 00:13:40.760
And especially for those of you who
are just starting out with AppleScript,

00:13:40.830 --> 00:13:43.510
it's one of the greatest
ways to get into AppleScript.

00:13:43.550 --> 00:13:46.590
Just do a little recording
and see how the syntax works.

00:13:47.100 --> 00:13:49.170
Some disadvantages to it.

00:13:49.170 --> 00:13:51.630
It's a spoken English syntax.

00:13:51.690 --> 00:13:55.800
You get used to the idea that
I can tell application QuarkXPress,

00:13:55.800 --> 00:14:00.880
produce next month's catalog,
put all the things I need to in it,

00:14:00.880 --> 00:14:02.990
and make it look great.

00:14:03.700 --> 00:14:05.800
Obviously, that's not going to work.

00:14:05.800 --> 00:14:07.880
That's not in the Quark dictionary.

00:14:07.880 --> 00:14:08.910
Well, the make it look great isn't it?

00:14:08.930 --> 00:14:09.890
Yeah, the other stuff is.

00:14:09.990 --> 00:14:11.000
So you've got to be careful with it.

00:14:11.000 --> 00:14:12.360
It's definitely a double edged sword.

00:14:12.470 --> 00:14:15.380
There's a lot of times that
you're thinking it sounds right,

00:14:15.380 --> 00:14:16.610
but it doesn't work.

00:14:16.640 --> 00:14:17.780
It's single threaded.

00:14:17.820 --> 00:14:19.600
You can't do more than one
thing at the same time.

00:14:19.600 --> 00:14:21.070
That's just the way AppleScript is.

00:14:21.170 --> 00:14:22.980
We'll talk about some
ways to get around that.

00:14:23.030 --> 00:14:24.930
And it's only on the Mac.

00:14:25.200 --> 00:14:27.560
If you're in a mixed environment
and you're looking to deploy a

00:14:27.560 --> 00:14:30.720
scripting solution that's going to
work on both the PCs and the Macs,

00:14:30.720 --> 00:14:33.520
AppleScript is not your answer.

00:14:36.400 --> 00:14:37.730
Not anymore.

00:14:37.850 --> 00:14:39.300
Starting with 10.3,
you don't need to be logged

00:14:39.300 --> 00:14:40.190
on for AppleScript work.

00:14:40.200 --> 00:14:43.080
If that was the case,
you'd be on here on the list.

00:14:46.600 --> 00:14:48.320
So here's a sample AppleScript.

00:14:48.330 --> 00:14:51.630
This is going to check for enough
free space on your finder volume.

00:14:51.640 --> 00:14:53.620
This might be something that
you use when you log in,

00:14:53.680 --> 00:14:55.750
just as kind of an idiot
check to make sure that you're

00:14:55.750 --> 00:14:57.430
not overwriting your drive,
right?

00:14:57.560 --> 00:15:00.450
OS X gets really,
really cranky if your drive gets full.

00:15:00.450 --> 00:15:02.660
So this is tell application finder.

00:15:02.810 --> 00:15:06.200
If the free space of the startup disk
is less than some really big number,

00:15:06.200 --> 00:15:09.530
because I counted it in bits, I think,
then empty the trash, beep,

00:15:09.530 --> 00:15:11.600
display a dialog box, ack, I feel full.

00:15:11.600 --> 00:15:13.300
Say that I need more room.

00:15:13.300 --> 00:15:14.870
So I have three different.

00:15:14.940 --> 00:15:16.100
I have an audible.

00:15:16.100 --> 00:15:17.090
I have a verbal.

00:15:17.090 --> 00:15:19.820
And I have just a beep that
goes on when this happens.

00:15:19.820 --> 00:15:22.150
So now I have to know
that something's wrong.

00:15:22.220 --> 00:15:24.500
So this is the kind of stuff
that we can do with AppleScript.

00:15:24.580 --> 00:15:26.420
Obviously,
this is kind of a silly little example.

00:15:26.420 --> 00:15:29.070
But you can see kind of the level
of interaction you have here.

00:15:29.070 --> 00:15:30.360
I can empty the trash.

00:15:30.460 --> 00:15:31.060
I can beep.

00:15:31.130 --> 00:15:32.050
I can say things.

00:15:32.050 --> 00:15:33.430
I can display dialogues.

00:15:33.580 --> 00:15:36.400
These are all GUI interactions
that AppleScript is very,

00:15:36.400 --> 00:15:37.280
very good at.

00:15:38.190 --> 00:15:39.670
So let me show you something.

00:15:39.680 --> 00:15:42.360
Who's running an OS X server?

00:15:42.450 --> 00:15:43.000
Hey, cool.

00:15:43.130 --> 00:15:45.360
All right,
so let me go to the demo if I could.

00:15:45.600 --> 00:15:47.270
All right, so you've got an OS X server.

00:15:47.360 --> 00:15:51.740
Problem is that you need
to get your users into it.

00:15:52.010 --> 00:15:55.110
The only thing that you have is
you've got the accounting system,

00:15:55.160 --> 00:16:01.200
accounting department,
to give you-- uh-oh, demo.

00:16:03.360 --> 00:16:03.690
There we go.

00:16:03.700 --> 00:16:09.500
You got the accounting system to
give you a list of first name,

00:16:09.500 --> 00:16:11.430
last name, and password.

00:16:11.730 --> 00:16:13.240
But man,
this is going to be an awful lot of

00:16:13.250 --> 00:16:16.890
pain if you have to go in by hand into
Workgroup Manager and enter all these in.

00:16:16.960 --> 00:16:17.900
So you say, well, no problem.

00:16:17.900 --> 00:16:19.620
I'll look into the server admin guide.

00:16:19.750 --> 00:16:23.500
They've got this great little
utility called DS import export.

00:16:24.160 --> 00:16:25.620
Exactly.

00:16:25.860 --> 00:16:27.530
Who's written a DS import export file?

00:16:27.530 --> 00:16:29.420
You have to get into hex.

00:16:29.420 --> 00:16:31.600
You got a lot of fields
and everything else in it.

00:16:31.710 --> 00:16:32.530
It's really a pain.

00:16:32.530 --> 00:16:35.490
So why don't I write an
AppleScript to take care of that?

00:16:35.530 --> 00:16:39.550
So now I have an import
export AppleScript.

00:16:39.550 --> 00:16:41.140
I can double click on this.

00:16:41.200 --> 00:16:42.630
It says I'm about to run.

00:16:42.630 --> 00:16:44.170
I can pick my import file.

00:16:44.260 --> 00:16:47.150
Here's my user import
comma separated value file.

00:16:47.150 --> 00:16:48.020
Open this up.

00:16:48.020 --> 00:16:50.660
It's going to ask me a couple questions.

00:16:50.690 --> 00:16:53.820
What's the DNS name of my home?

00:16:55.100 --> 00:16:56.020
Home directory server.

00:16:56.050 --> 00:16:58.100
Well, we'll just use the reverse
lookup here so that works.

00:16:58.100 --> 00:16:59.900
Hit a couple things in here.

00:16:59.910 --> 00:17:02.100
Default group, default shell.

00:17:02.100 --> 00:17:04.460
Three users were imported.

00:17:04.460 --> 00:17:06.640
There's three users in this list,
so that's a good thing.

00:17:06.640 --> 00:17:17.260
A little bit of error control there.

00:17:17.260 --> 00:17:17.280
Now I've got a user import file
that goes right into documents.

00:17:17.280 --> 00:17:17.280
If I look in my documents folder here,

00:17:18.490 --> 00:17:22.180
is what you would have had to
have done by hand to create a

00:17:22.180 --> 00:17:25.240
working DS import/export file.

00:17:25.460 --> 00:17:26.090
All right.

00:17:26.150 --> 00:17:27.600
So this is the power of scripting.

00:17:27.600 --> 00:17:29.530
Once you do this once,
you're going to sit down,

00:17:29.530 --> 00:17:32.180
you're going to read that documentation,
and you go, my lord,

00:17:32.180 --> 00:17:34.960
this is not what I ever want to do again.

00:17:34.970 --> 00:17:37.110
And so a script can
really make this easy.

00:17:37.110 --> 00:17:40.630
So I can open up this AppleScript for you
and show you a couple highlights in it.

00:17:40.630 --> 00:17:44.720
And again, all of these are going to
be available on my site.

00:17:44.730 --> 00:17:49.140
There's a URL in the end here,
so you're going to be able to see that.

00:17:49.140 --> 00:17:51.520
So here, I copied it onto the desktop.

00:17:51.760 --> 00:17:54.260
Import AppleScript,
open it up in Script Editor.

00:17:55.950 --> 00:18:00.660
tried as hard as I could to put
more comments in it than code.

00:18:00.660 --> 00:18:02.160
And I think I did a pretty good job.

00:18:02.160 --> 00:18:04.370
But if I didn't,
you can ask me questions about it.

00:18:04.490 --> 00:18:05.560
So it goes into here.

00:18:05.560 --> 00:18:06.760
There's a couple of things.

00:18:06.760 --> 00:18:11.940
We're using dialogue boxes,
open save dialogue boxes,

00:18:11.970 --> 00:18:13.780
to interact with the user,
because we've got to put

00:18:13.840 --> 00:18:15.490
some information in there.

00:18:15.610 --> 00:18:16.700
You end up with this record.

00:18:16.700 --> 00:18:18.490
We didn't have to go
down to the command line.

00:18:18.600 --> 00:18:20.740
I didn't have to tell you
that you want to run this,

00:18:20.740 --> 00:18:23.430
put a bunch of flags into it,
and then run it through a Perl or bash

00:18:23.430 --> 00:18:24.930
script or something else like that.

00:18:25.060 --> 00:18:27.100
Both of those languages would
have been able to do this.

00:18:27.200 --> 00:18:29.840
But now I have a much lower
barrier of entry for admins to

00:18:29.840 --> 00:18:32.480
be able to use this application.

00:18:32.500 --> 00:18:35.360
So that's one example of
AppleScript that can really help

00:18:35.360 --> 00:18:38.010
you out as a system administrator.

00:18:38.100 --> 00:18:40.690
If you go back to the slides, please.

00:18:47.850 --> 00:18:52.900
An incredibly cool feature of
AppleScript is its ability to call

00:18:52.900 --> 00:18:55.600
shell scripts from within AppleScript.

00:18:56.010 --> 00:18:57.390
And again,
one of the things that I was talking

00:18:57.390 --> 00:18:59.640
about is hopefully I can highlight
on a lot of ways that you can

00:18:59.640 --> 00:19:02.400
take maybe existing administration
tools that you already have,

00:19:02.490 --> 00:19:04.670
that you've written in bash,
that you've written in Perl,

00:19:04.670 --> 00:19:07.790
that you've written in another language,
and use them with the other AppleScripts

00:19:07.790 --> 00:19:09.170
or use them within each other.

00:19:09.170 --> 00:19:15.020
So this example here is we've got a
finder intrusion detection system.

00:19:15.070 --> 00:19:20.050
And what it's going to do is it
actually runs a do shell script command.

00:19:20.050 --> 00:19:23.440
If you're familiar with the last command,
the last command returns back who

00:19:23.440 --> 00:19:24.810
was the last person to log in.

00:19:25.920 --> 00:19:26.550
All right.

00:19:26.700 --> 00:19:28.950
So by running this,
we're going to run it into a loop.

00:19:29.100 --> 00:19:31.260
It's going to constantly
run the last command.

00:19:31.350 --> 00:19:33.400
And if it sees that
somebody new has logged in,

00:19:33.400 --> 00:19:35.390
it's going to display a dialogue for me.

00:19:35.390 --> 00:19:38.360
It's a really stupid
intrusion detection system.

00:19:38.360 --> 00:19:41.750
But it gives you an idea of how we
can use the do shell script command.

00:19:41.760 --> 00:19:43.420
We're not even really
calling a shell script.

00:19:43.420 --> 00:19:44.830
We're just calling a shell command.

00:19:44.850 --> 00:19:45.410
All right.

00:19:45.610 --> 00:19:46.460
Just the last command.

00:19:46.460 --> 00:19:48.510
We didn't have to write
anything else for that.

00:19:48.510 --> 00:19:50.770
But now we can easily
interact with it into the GUI.

00:19:50.780 --> 00:19:52.640
If I could be back on the demo again,
please.

00:19:54.900 --> 00:19:59.340
So here is my AppleScript IDS intrusion
detection system.

00:19:59.340 --> 00:20:01.380
And it's going to sit up here and
it's going to run in the background.

00:20:01.380 --> 00:20:07.210
And I'm going to open up a new
finder window or a new shell and I'll

00:20:07.320 --> 00:20:11.020
SSH localhost and type in my password.

00:20:11.020 --> 00:20:14.320
And then if I look in here, it says, hey,
the user Apple just logged in.

00:20:14.390 --> 00:20:17.430
All right, because it's just going
through and getting that last

00:20:17.480 --> 00:20:18.820
line of the last command.

00:20:18.840 --> 00:20:21.290
All right, so now we have an
intrusion detection system,

00:20:21.290 --> 00:20:24.650
hopefully highlighting the interaction
with the do shell script command.

00:20:24.800 --> 00:20:26.240
And stuff like that.

00:20:26.240 --> 00:20:30.120
We'll do a lot more of this
in another couple of examples.

00:20:30.120 --> 00:20:30.120
All right.

00:20:30.830 --> 00:20:31.720
Back to the slides.

00:20:31.720 --> 00:20:32.090
Great.

00:20:32.240 --> 00:20:32.540
Thanks.

00:20:32.540 --> 00:20:37.030
So that's the AppleScript IDS.

00:20:37.270 --> 00:20:39.620
So some common examples
of AppleScript that you'll

00:20:39.620 --> 00:20:40.930
find on your system.

00:20:41.050 --> 00:20:41.970
Carbon Copy Cloner.

00:20:41.970 --> 00:20:43.120
Who's used Carbon Copy Cloner?

00:20:43.120 --> 00:20:43.880
All right.

00:20:43.910 --> 00:20:45.820
That's an AppleScript Studio application.

00:20:45.820 --> 00:20:47.100
It's written in AppleScript.

00:20:47.100 --> 00:20:48.490
It does some shell interaction.

00:20:48.490 --> 00:20:51.280
We'll show you some examples of that
in a little bit when I actually will

00:20:51.280 --> 00:20:53.210
build an AppleScript Studio app for you.

00:20:53.270 --> 00:20:54.050
All right.

00:20:54.230 --> 00:20:54.970
iTunes Helpers.

00:20:54.970 --> 00:20:56.630
Everybody likes iTunes, right?

00:20:56.630 --> 00:20:59.270
And there's a bazillion things
that will show you your word

00:20:59.320 --> 00:21:00.550
count or your song count.

00:21:00.620 --> 00:21:03.160
We'll display the current
track and your iChat status,

00:21:03.160 --> 00:21:03.980
whatever else.

00:21:04.070 --> 00:21:06.060
Almost all of those are AppleScript.

00:21:06.610 --> 00:21:08.380
And then finally, Print Center Repair.

00:21:08.420 --> 00:21:09.600
Anybody using Print Center Repair?

00:21:09.600 --> 00:21:10.750
All right.

00:21:10.820 --> 00:21:12.520
It's killer for fixing printer problems.

00:21:12.540 --> 00:21:13.350
It'll go through.

00:21:13.350 --> 00:21:16.080
It'll erase your CUPS directory,
whatever else, your temp files,

00:21:16.200 --> 00:21:17.190
and all that other stuff.

00:21:17.190 --> 00:21:18.030
Rebuild it.

00:21:18.150 --> 00:21:20.720
So that's another example of an
AppleScript Studio application.

00:21:20.730 --> 00:21:21.830
All right.

00:21:24.100 --> 00:21:26.520
Shell, just like the command line.

00:21:26.520 --> 00:21:29.470
Everybody loves the command line, right?

00:21:30.100 --> 00:21:40.200
[Transcript missing]

00:21:41.180 --> 00:21:43.020
So it's the built-in scripting
function of the shell.

00:21:43.020 --> 00:21:45.920
One of the oldest forms of scripting.

00:21:45.920 --> 00:21:47.990
You can really get deep into shell,
and it's been out there for

00:21:48.000 --> 00:21:48.960
years and years and years.

00:21:48.960 --> 00:21:51.700
The beautiful thing about
that is there's thousands,

00:21:51.810 --> 00:21:53.740
millions of example code out there.

00:21:53.760 --> 00:21:56.330
When doing shell scripting,
you should have to write

00:21:56.330 --> 00:21:57.800
very little of it yourself.

00:21:57.840 --> 00:22:01.220
After having done a lot of shell
scripting for the last year or two,

00:22:01.220 --> 00:22:02.240
I've got my own library.

00:22:02.240 --> 00:22:04.850
When I go in to create a script,
I don't even think about

00:22:04.850 --> 00:22:06.620
starting off with a blank page.

00:22:06.620 --> 00:22:09.090
I start cutting and pasting
from the last one that I used.

00:22:09.140 --> 00:22:10.320
It's really nice.

00:22:10.450 --> 00:22:12.100
You can do the same thing with
AppleScript and stuff like that,

00:22:12.160 --> 00:22:14.720
but shell has a much larger
body of work that's outside.

00:22:16.580 --> 00:22:17.540
Some advantages.

00:22:17.560 --> 00:22:20.550
Like I said, just like the command line,
only automated.

00:22:20.650 --> 00:22:22.260
It's simple.

00:22:22.260 --> 00:22:23.840
If you can use the
command line interface,

00:22:23.840 --> 00:22:25.660
you can use a shell script.

00:22:25.820 --> 00:22:25.900
Just

00:22:26.050 --> 00:22:27.940
take a copy of what you're typing in.

00:22:28.090 --> 00:22:29.500
You can paste that into a text file.

00:22:29.500 --> 00:22:31.190
You can run that as a shell script.

00:22:31.190 --> 00:22:32.670
It really is that simple.

00:22:32.800 --> 00:22:33.620
Very few terms.

00:22:33.620 --> 00:22:35.750
The shell scripting
language is very simple.

00:22:35.870 --> 00:22:38.840
There's not a whole lot of different
things that you can do with it,

00:22:38.840 --> 00:22:41.960
but you can plug those together
in very interesting ways.

00:22:42.020 --> 00:22:43.320
Relatively portable.

00:22:43.320 --> 00:22:47.120
Most Unix shell scripts will work on
OS X with little or no modification.

00:22:47.120 --> 00:22:49.710
I'm talking to somebody from
developer relations that was

00:22:49.710 --> 00:22:53.040
talking about a lot of people coming
from Solaris that wanted to migrate

00:22:53.040 --> 00:22:56.560
their Solaris scripts over to OS X,
and they just had to swap out a few

00:22:56.560 --> 00:22:59.540
commands and that kind of stuff,
and everything worked.

00:22:59.540 --> 00:23:02.530
So if you already have a body
of administrative shell scripts,

00:23:02.530 --> 00:23:04.590
those will work very well on OS X.

00:23:04.970 --> 00:23:06.050
Some disadvantages.

00:23:06.260 --> 00:23:07.010
There's no GUI.

00:23:07.010 --> 00:23:08.680
We can't display dialog boxes.

00:23:08.690 --> 00:23:11.090
We can't have it say
things or stuff like that.

00:23:11.090 --> 00:23:12.230
Part of that is good.

00:23:12.230 --> 00:23:13.310
Part of that is bad.

00:23:13.310 --> 00:23:16.550
So we can use AppleScript, though,
to pull those things out.

00:23:16.550 --> 00:23:19.280
I'll show you an example
of that in a little bit.

00:23:20.440 --> 00:23:24.120
Hard to do some shell scripts,
especially when you require interaction.

00:23:24.190 --> 00:23:27.690
You have to get into expect and some of
the other shell items if you want to,

00:23:27.690 --> 00:23:30.930
for example, pass a password back to
the command line interface,

00:23:30.930 --> 00:23:32.240
things like that.

00:23:32.240 --> 00:23:36.020
It's very hard to start up an
SSH session that wants to use a

00:23:36.020 --> 00:23:38.570
password through a shell command.

00:23:38.580 --> 00:23:40.010
So you've got to be careful with that.

00:23:40.930 --> 00:23:41.900
Check your shell.

00:23:41.900 --> 00:23:43.960
Not all shells can do the same things.

00:23:43.960 --> 00:23:46.740
The default shell on 10.3 is bash.

00:23:46.740 --> 00:23:48.770
Bash has some slightly
different functionality from

00:23:48.770 --> 00:23:49.800
some of the other shell.

00:23:50.290 --> 00:23:52.700
The other shells that are out
there from TCH and the other ones.

00:23:52.700 --> 00:23:54.540
So be careful when you're
getting deep into it.

00:23:54.690 --> 00:23:58.450
However, from the beginning standpoint,
on the entry level, on the face of them,

00:23:58.460 --> 00:24:01.040
they're all pretty much the same
for what you're going to be looking

00:24:01.040 --> 00:24:02.250
to do when you start off it.

00:24:02.870 --> 00:24:05.430
And make sure you specify the
one that you actually want.

00:24:05.530 --> 00:24:07.140
I'll show you what that
means in just a little bit.

00:24:07.210 --> 00:24:10.280
Because if you think you're using
bash and you end up using TCH and

00:24:10.280 --> 00:24:12.940
you're trying to do something,
it might not work.

00:24:12.940 --> 00:24:13.430
All right.

00:24:13.430 --> 00:24:14.620
So I'll show you how that goes.

00:24:16.150 --> 00:24:18.200
So here's a simple mail server backup.

00:24:18.220 --> 00:24:19.730
You're running an OS X three server.

00:24:19.800 --> 00:24:20.940
You love Postfix.

00:24:20.940 --> 00:24:22.270
You love Cyrus.

00:24:22.670 --> 00:24:25.670
But what happens when you
try to back up the database?

00:24:25.700 --> 00:24:26.360
Well, it's live.

00:24:26.360 --> 00:24:28.080
Well, that's not such a great thing.

00:24:28.240 --> 00:24:32.060
You know the backing up databases when
they're in use might lead to problems.

00:24:32.060 --> 00:24:34.100
So you want to shut down the mail server.

00:24:34.130 --> 00:24:36.080
You want to copy over
the backup database.

00:24:36.080 --> 00:24:39.080
And then you want to start
the mail server back up again.

00:24:39.080 --> 00:24:40.400
That's cool.

00:24:40.460 --> 00:24:43.610
But you don't want to be up at
3:00 in the morning to do it.

00:24:44.300 --> 00:25:04.400
[Transcript missing]

00:25:04.940 --> 00:25:07.080
Another important thing to
see here is the server admin

00:25:07.080 --> 00:25:08.830
command on that third line down.

00:25:08.900 --> 00:25:12.440
Server admin command is a shell
command that allows you to do anything

00:25:12.440 --> 00:25:14.650
that the server admin utility can do.

00:25:14.650 --> 00:25:18.910
So instead of me having to worry
about how I know how to stop post fix,

00:25:18.910 --> 00:25:22.330
how to stop Cyrus,
how to stop all these other things,

00:25:22.330 --> 00:25:24.990
I can just say server admin stop mail.

00:25:25.680 --> 00:25:27.900
And the server admin framework
does all that stuff for me.

00:25:27.900 --> 00:25:29.160
So I don't need to worry about it.

00:25:29.280 --> 00:25:30.950
Thank you, Apple.

00:25:30.960 --> 00:25:31.940
All right.

00:25:31.940 --> 00:25:33.560
I don't have to do that extra work.

00:25:33.600 --> 00:25:36.380
Now I can just kind of glue together
the different pieces and make

00:25:36.440 --> 00:25:38.100
something that really works out for me.

00:25:38.120 --> 00:25:40.050
So then we use R-Sync.

00:25:40.100 --> 00:25:43.500
We sync it from one,
the varspool IMAP file to our X-Raid

00:25:43.660 --> 00:25:45.810
because we all have one of those.

00:25:45.840 --> 00:25:47.920
Then we actually tar it up.

00:25:48.010 --> 00:25:50.870
We tar up our Etsy post fix directory
that has all our configuration

00:25:50.870 --> 00:25:52.390
files and everything else in it.

00:25:52.820 --> 00:25:54.310
Because maybe you've
looked around the web,

00:25:54.310 --> 00:25:57.180
found some articles about how to do spam
and virus controls and stuff like that.

00:25:57.280 --> 00:25:59.660
And I don't know where you got those.

00:25:59.660 --> 00:26:02.030
And understand that you need
to back those up in case

00:26:02.030 --> 00:26:03.420
anything happens to them.

00:26:03.440 --> 00:26:05.310
So this script will do
both of those for you.

00:26:05.340 --> 00:26:07.230
And then we do server admin start mail.

00:26:07.240 --> 00:26:10.280
We're even real nice and
verbose about things.

00:26:10.280 --> 00:26:13.350
So we use the logger
command to write commands,

00:26:13.350 --> 00:26:16.040
write lines to the logs for the syslog.

00:26:16.070 --> 00:26:18.460
And that way we know that we
started and stopped the systems

00:26:18.460 --> 00:26:19.990
and everything else like that.

00:26:20.000 --> 00:26:22.690
One, two, three, four, five.

00:26:22.760 --> 00:26:24.790
Six, seven lines.

00:26:25.040 --> 00:26:28.760
And you won't have to wake up at
3:00 in the morning every day.

00:26:28.890 --> 00:26:31.660
So from this base, you can take this,
and we could do all

00:26:31.660 --> 00:26:32.720
kinds of crazy things.

00:26:32.840 --> 00:26:34.760
We could set it up so that
every day of the week,

00:26:34.760 --> 00:26:37.030
we back up to a different folder.

00:26:54.150 --> 00:26:54.150
All right,
now we've got incremental backups or

00:26:54.150 --> 00:26:54.150
differential backups between all of this.

00:26:54.150 --> 00:26:54.150
Oh man, things are great.

00:26:54.150 --> 00:26:54.150
We can do all kinds of
cool stuff with this.

00:26:54.150 --> 00:26:54.150
But this is a very easy,
very simple way to get into this.

00:26:54.150 --> 00:26:54.150
And again, this isn't a hack.

00:26:54.150 --> 00:26:54.150
All right,
this is doing everything the way

00:26:54.150 --> 00:26:54.150
that we needed to do backing up the
mail database and going from there.

00:26:54.150 --> 00:26:54.150
But

00:26:54.300 --> 00:27:03.100
[Transcript missing]

00:27:03.310 --> 00:27:05.360
So I've taken that
shell script that I had.

00:27:05.360 --> 00:27:08.000
So if I go to my scripts folder,
there's a mail back.

00:27:08.010 --> 00:27:11.300
This one is a little more full-featured.

00:27:11.300 --> 00:27:13.300
I'll pop this up a little bit.

00:27:13.300 --> 00:27:15.210
And let's see how many
lines we have here.

00:27:15.430 --> 00:27:19.290
Shell line numbers.

00:27:20.850 --> 00:27:22.490
So we got about 170 odd lines here.

00:27:22.610 --> 00:27:24.300
I bet you over half
of those are comments.

00:27:24.300 --> 00:27:25.050
All right.

00:27:25.150 --> 00:27:26.740
So this goes through,
it backs up not only

00:27:26.740 --> 00:27:29.220
the postfix spool files,
but the Cyrus spool files,

00:27:29.270 --> 00:27:32.080
asks you if you want to back up
the postfix backup directory.

00:27:32.080 --> 00:27:35.150
Plus it has a restore
functionality in here too.

00:27:35.150 --> 00:27:37.680
Because once you back it up,
maybe it would be important to

00:27:37.730 --> 00:27:40.220
know how to get it back to where
it should have been when you

00:27:40.220 --> 00:27:41.920
need to roll those changes back.

00:27:42.780 --> 00:27:44.310
So there's a restore
functionality in here,

00:27:44.310 --> 00:27:46.420
and now you can feed it a bunch of
switches on the command line and

00:27:46.430 --> 00:27:47.630
get through some of this stuff.

00:27:47.730 --> 00:27:49.240
But again, this is exciting.

00:27:49.860 --> 00:27:52.300
But I don't want to have to go down to
the command line to do this all the time.

00:27:52.300 --> 00:27:54.510
Beauty about OS X is
Macs are for grandmas,

00:27:54.510 --> 00:27:55.010
right?

00:27:55.700 --> 00:27:57.590
Even grandma system administrators.

00:27:57.660 --> 00:28:01.050
So I want to be able to let those users
use this script without having to go down

00:28:01.050 --> 00:28:02.870
to the command line and mess with it.

00:28:02.900 --> 00:28:07.780
So to do that, I've got a little
AppleScript Studio application here.

00:28:09.470 --> 00:28:11.760
Get rid of some of this.

00:28:11.830 --> 00:28:13.730
Called mailback GUI.

00:28:13.850 --> 00:28:14.890
We open it up.

00:28:14.950 --> 00:28:17.140
It's got a little setup here.

00:28:17.270 --> 00:28:19.950
I can specify a backup directory.

00:28:19.990 --> 00:28:21.800
I will just do /temp in here.

00:28:21.870 --> 00:28:24.150
I put in my admin password.

00:28:24.270 --> 00:28:27.740
Important to note, one of the failures of
AppleScript Studio currently-- and

00:28:27.740 --> 00:28:31.790
I haven't hit some of the other sessions
if they fix this-- but is authentication.

00:28:31.840 --> 00:28:35.390
So when I pass my password here,
it actually does essentially

00:28:35.400 --> 00:28:37.040
a sudo on the command.

00:28:41.100 --> 00:29:25.700
[Transcript missing]

00:29:27.510 --> 00:29:30.640
It takes a little bit to load up
because I didn't do all the stuff.

00:29:30.640 --> 00:29:32.740
But this is some of the
cool things that you can do.

00:29:32.740 --> 00:29:34.500
This is the cool Mac stuff.

00:29:34.500 --> 00:29:36.250
So this is eventually what
the site's going to look like,

00:29:36.310 --> 00:29:36.700
I think.

00:29:36.700 --> 00:29:38.380
We're going to do some stuff over there.

00:29:38.380 --> 00:29:40.990
But anyway,
so now you have a web browser.

00:29:40.990 --> 00:29:44.470
So while that shell script is
working on your mail backup,

00:29:44.470 --> 00:29:47.920
you can check out your new web mail,
whatever else that you

00:29:47.920 --> 00:29:51.030
want to go through there,
surf the web a little bit,

00:29:51.030 --> 00:29:52.230
and go from there.

00:29:52.260 --> 00:29:52.770
Because as your
Cyrus database gets bigger,

00:29:52.770 --> 00:29:52.770
maybe it takes a little bit longer.

00:29:53.010 --> 00:29:55.040
So real quick,
you probably want to see this in Xcode.

00:29:55.040 --> 00:29:57.430
And I can show you how
simple this was to set up.

00:29:57.440 --> 00:30:00.180
So here's the mailback GUI file.

00:30:00.180 --> 00:30:02.790
We'll pop this open into Xcode.

00:30:07.730 --> 00:30:10.080
And here's the
AppleScript that runs it all.

00:30:10.170 --> 00:30:14.000
And it's maybe a dozen,
two dozen lines of code.

00:30:14.090 --> 00:30:16.340
Goes in there essentially just
doing the shell script command

00:30:16.340 --> 00:30:17.870
and calling that shell script.

00:30:17.870 --> 00:30:23.400
I embed that shell script exactly like
it came out of when I was done with it.

00:30:23.660 --> 00:30:25.580
Embed into the resources folder in here.

00:30:25.580 --> 00:30:27.870
And then you can go into
Interface Builder and you

00:30:27.870 --> 00:30:29.270
can set things up with that.

00:30:29.270 --> 00:30:29.960
All right?

00:30:30.360 --> 00:30:34.670
Beautiful thing about Interface Builder,
if you don't know about WebKit,

00:30:34.770 --> 00:30:37.970
let me go back here and let
me show you all of the code.

00:30:38.610 --> 00:30:41.800
for the web browser, right?

00:30:41.920 --> 00:30:43.990
But wait, there is no code.

00:30:44.100 --> 00:30:48.320
So some of the fun stuff that you can
get into with Xcode and stuff like that.

00:30:48.320 --> 00:30:52.440
So really easy to wrap an
Apple Script Studio wrapper,

00:30:52.610 --> 00:30:54.850
a complete standalone application.

00:30:54.860 --> 00:30:57.800
I can put this onto a disk image,
I can ship it off to people.

00:30:57.910 --> 00:31:00.870
They can just double click on it,
fill it out, and go from there.

00:31:01.040 --> 00:31:05.070
Since I know it and it's my application,
I can even go into and do things like

00:31:05.290 --> 00:31:08.000
already pre-set up the backup path.

00:31:08.020 --> 00:31:10.050
So I don't have to type
that in all the time.

00:31:10.190 --> 00:31:12.480
Change the default
URL in the web browser.

00:31:12.480 --> 00:31:13.700
Maybe you don't want that.

00:31:13.790 --> 00:31:15.800
So you can go in and you can set
up a lot of things like that.

00:31:15.860 --> 00:31:16.780
So don't be afraid.

00:31:16.780 --> 00:31:19.130
This is very easy to get into.

00:31:19.160 --> 00:31:21.450
Use this example,
start doing your own stuff,

00:31:21.520 --> 00:31:24.190
start taking a look at that,
and very quickly you'll be turning

00:31:24.190 --> 00:31:25.830
in your shell scripts into GUIs.

00:31:25.910 --> 00:31:28.640
So also goes, like I said before,
if you're migrating over a number of

00:31:28.640 --> 00:31:32.070
shell scripts that you had set up on
your Unix or your other platforms,

00:31:32.250 --> 00:31:35.110
Apple Script Studio will
allow you to make an easy,

00:31:35.110 --> 00:31:37.360
nice GUI wrapper for that.

00:31:37.500 --> 00:31:38.500
Wonderful.

00:31:38.500 --> 00:31:42.810
If I could go back to the slides, please.

00:31:46.410 --> 00:31:48.790
So you saw the backup
and you saw the GUI,

00:31:48.790 --> 00:31:50.630
so we've got through there.

00:31:50.760 --> 00:31:53.080
So some interaction with AppleScript.

00:31:53.110 --> 00:31:54.170
I've got a shell script.

00:31:54.330 --> 00:31:56.420
And instead of being
called by an AppleScript,

00:31:56.440 --> 00:31:59.320
I want the shell script
to call an AppleScript.

00:31:59.710 --> 00:32:03.470
Specific example of this,
about a year ago I was working

00:32:03.470 --> 00:32:07.980
with another gentleman to work
up a FileMaker Pro startup item.

00:32:08.020 --> 00:32:11.510
If you ever used FileMaker Pro 5.5,
you wanted to launch when

00:32:11.510 --> 00:32:13.100
you started up the system.

00:32:13.100 --> 00:32:15.550
They fixed that now,
so don't have to worry about it,

00:32:15.550 --> 00:32:17.000
but it makes a good example.

00:32:17.850 --> 00:32:20.530
Specific example of this,
about a year ago I was working

00:32:20.530 --> 00:32:23.680
with another gentleman to work
up a FileMaker Pro startup item.

00:32:23.690 --> 00:32:26.940
If you ever used FileMaker Pro 5.5,
you wanted to launch when

00:32:26.940 --> 00:32:28.250
you started up the system.

00:32:28.330 --> 00:32:30.830
They fixed that now,
so don't have to worry about it,

00:32:30.890 --> 00:32:32.810
but it makes a good example.

00:32:33.560 --> 00:32:34.810
Maybe you put it in your
applications folder,

00:32:34.810 --> 00:32:35.430
maybe you didn't.

00:32:35.570 --> 00:32:37.700
I'm a big fan of the Mac.

00:32:37.780 --> 00:32:41.580
I want to be able to arrange my
environment the way that I want it to be.

00:32:41.590 --> 00:32:43.970
So as an admin,
as somebody that's producing scripts,

00:32:43.970 --> 00:32:45.960
I want you to have that
same functionality.

00:32:45.960 --> 00:32:49.060
And I don't want to have to tell you
you've got to go into the startup item

00:32:49.060 --> 00:32:52.780
and you've got to edit that field and
figure out where your actual install is.

00:32:53.680 --> 00:32:56.300
So instead, if you went to the
package installer session,

00:32:56.300 --> 00:32:58.830
you probably learned about
post-install scripts.

00:32:58.830 --> 00:33:01.630
These allow you to have a
package that installs and

00:33:01.630 --> 00:33:03.440
then kicks off a shell script.

00:33:03.480 --> 00:33:07.440
That's cool, but my shell script can't
display a dialogue that actually

00:33:07.490 --> 00:33:09.210
lets me know what I need to do.

00:33:10.370 --> 00:33:14.160
So to get around that,
my shell script can call OSAScript.

00:33:14.180 --> 00:33:17.800
OSAScript is a command line way of
actually calling an AppleScript.

00:33:17.870 --> 00:33:21.680
So my package installer actually
installs an AppleScript,

00:33:21.710 --> 00:33:25.080
then runs the post install script,
which runs that.

00:33:26.230 --> 00:33:26.750
A little, eh?

00:33:26.750 --> 00:33:27.280
Fair enough.

00:33:27.280 --> 00:33:28.200
All right, you with me?

00:33:28.260 --> 00:33:28.760
All right.

00:33:28.760 --> 00:33:37.200
So that AppleScript then
displays a dialog box.

00:33:37.200 --> 00:33:37.200
It says, hey,
why don't you pick where your server

00:33:37.200 --> 00:33:37.200
application is for FileMaker Pro Server?

00:33:37.580 --> 00:33:40.170
Once we're done with that,
then it passes it back to

00:33:40.170 --> 00:33:41.740
that post-install script.

00:33:41.740 --> 00:33:45.600
The post-install script goes through
and edits the startup item and makes

00:33:45.620 --> 00:33:47.470
sure that it knows where it is.

00:33:47.500 --> 00:33:49.780
And so you can see a
quick example of this.

00:33:49.790 --> 00:33:51.610
Up at the top is the shell script.

00:33:51.670 --> 00:33:54.810
It says "mypath=osascript,"
and then we're calling that

00:33:55.010 --> 00:33:57.490
AppleScript that we installed somewhere.

00:33:57.500 --> 00:34:00.120
That AppleScript,
which is the second half,

00:34:00.130 --> 00:34:04.500
says "application finder activate,
open up a dialog box to choose a file,

00:34:04.500 --> 00:34:08.350
please select your application,
set the path to the POSIX path."

00:34:08.650 --> 00:34:11.070
That just makes sure that we convert
it from the AppleScript way of

00:34:11.090 --> 00:34:12.500
file locations to the shell way.

00:34:12.500 --> 00:34:16.300
Return that,
which goes right back to the OSA script,

00:34:16.300 --> 00:34:18.000
and then we're done.

00:34:19.810 --> 00:34:21.700
So there's the OSA script command.

00:34:21.700 --> 00:34:22.890
It was a scripting session.

00:34:22.900 --> 00:34:25.020
We had a hard time trying
to find out ways of making

00:34:25.150 --> 00:34:26.790
the graphics more exciting.

00:34:26.800 --> 00:34:28.700
So you see how that turned to orange?

00:34:28.700 --> 00:34:29.260
All right.

00:34:29.260 --> 00:34:32.300
So that's about as much excitement
as you're going to find in here.

00:34:34.000 --> 00:34:34.960
All right, so let me show you that.

00:34:35.030 --> 00:34:37.360
If I could go back to the demo machine,
please.

00:34:37.380 --> 00:34:40.780
I tested it on here,
so I need to remove the,

00:34:40.780 --> 00:34:43.040
this is our startup disk.

00:34:43.080 --> 00:34:46.310
I need to remove the
receipt from it real quick.

00:34:46.320 --> 00:34:48.800
FileMaker Pro Server, there you go.

00:34:48.860 --> 00:34:50.120
Gone.

00:34:50.120 --> 00:34:53.280
All right, so I go into my scripts folder
with all my stuff in it.

00:34:53.400 --> 00:34:55.820
I've got a nice FileMaker
Server startup item.

00:34:55.820 --> 00:34:57.220
We mount it.

00:34:57.320 --> 00:34:59.650
Nice package installer that comes up.

00:34:59.850 --> 00:35:02.400
Beautiful little graphics and
stuff that we have in here.

00:35:02.900 --> 00:35:04.390
Little RTF with the motion.

00:35:04.400 --> 00:35:05.070
Look at that.

00:35:05.080 --> 00:35:06.140
All right.

00:35:06.140 --> 00:35:08.540
I'm not a graphics guy,
but this was easy.

00:35:08.540 --> 00:35:10.060
Select the volume.

00:35:10.060 --> 00:35:11.300
I'm going to install.

00:35:11.300 --> 00:35:14.260
Ask me for my password.

00:35:17.190 --> 00:35:19.590
So now it's actually installing
the payload of the application.

00:35:19.780 --> 00:35:20.860
This is the startup item.

00:35:20.860 --> 00:35:22.970
This is a couple of other things.

00:35:23.110 --> 00:35:25.420
The startup item, however,
doesn't know the location

00:35:25.420 --> 00:35:26.960
of the application.

00:35:26.960 --> 00:35:29.890
So now I've got a
dialog box that pops up.

00:35:30.590 --> 00:35:32.810
Where's FileMaker Pro Server?

00:35:32.900 --> 00:35:34.920
I can go to my Applications folder.

00:35:35.030 --> 00:35:37.000
I can pick that out.

00:35:37.140 --> 00:35:39.020
FileMaker Pro Server isn't on here.

00:35:39.160 --> 00:35:41.950
Then it passes it back and it does that.

00:35:43.650 --> 00:35:45.830
software was successfully installed.

00:35:45.980 --> 00:35:52.940
So now, if I go back to my startup items,
library startup items,

00:35:53.340 --> 00:35:56.060
You can see there's an
FMP server startup item in here.

00:35:56.340 --> 00:36:03.660
If I look inside here,
here's the actual startup item show item.

00:36:06.420 --> 00:36:15.060
: There we go.

00:36:15.060 --> 00:36:15.060
That's easy enough.

00:36:15.060 --> 00:36:15.060
And it went through and look at here.

00:36:15.060 --> 00:36:15.060
Here's a line.

00:36:15.300 --> 00:36:25.700
[Transcript missing]

00:36:27.030 --> 00:36:31.870
So if we go into the startup,
the package, show package contents.

00:36:32.020 --> 00:36:34.570
Inside contents, we've got resources.

00:36:34.750 --> 00:36:38.100
Inside resources,
we have the post flight script,

00:36:38.100 --> 00:36:41.840
which we can open up here.

00:36:45.230 --> 00:36:49.740
And sed gets a little ugly
the first time you see it.

00:36:49.880 --> 00:36:52.230
But there's a tiny little sed command.

00:36:52.230 --> 00:36:54.140
Sed doesn't get any better.

00:36:54.140 --> 00:36:58.480
Tiny little sed command in there that
in my default item that I installed,

00:36:58.480 --> 00:37:02.610
I just had a little comment that said,
going to be replaced by script,

00:37:02.610 --> 00:37:05.680
which made it nice and easy
to find on the way back.

00:37:05.680 --> 00:37:09.110
So I took the output of that AppleScript,
that dialog box that came up,

00:37:09.110 --> 00:37:10.860
fed it back to the shell script.

00:37:10.900 --> 00:37:14.610
Shell script then goes back in
and changes what I installed.

00:37:16.120 --> 00:37:17.780
Beautiful, right?

00:37:17.870 --> 00:37:19.770
And I can even go in.

00:37:19.940 --> 00:37:23.840
And if I go into my hard drive
again-- and I did a bad thing,

00:37:23.840 --> 00:37:28.260
because I kind of left that
AppleScript around-- Startup Items,

00:37:28.260 --> 00:37:31.610
FileMaker Pro Server, and in Resources,

00:37:33.280 --> 00:37:38.380
Here's an AppleScript,
which we actually feed to OSA script.

00:37:39.530 --> 00:37:42.000
So this is the contents
of the AppleScript.

00:37:42.040 --> 00:37:44.740
So again, I installed the AppleScript on
the hard drive and the package

00:37:44.740 --> 00:37:46.150
installer as part of the payload.

00:37:46.240 --> 00:37:49.040
The post-flight ran the
post-flight shell script,

00:37:49.110 --> 00:37:52.160
which called OSA script,
to call the AppleScript that I knew where

00:37:52.160 --> 00:37:54.080
it was because I installed it there.

00:37:54.110 --> 00:38:00.250
AppleScript found out where the FileMaker
Pro server application was going to live,

00:38:00.250 --> 00:38:04.080
passed that back to the
post-flight install script,

00:38:04.080 --> 00:38:06.120
which then edited the startup item,
and then we're done.

00:38:06.120 --> 00:38:06.120
All right?

00:38:10.200 --> 00:38:14.050
That was the most complicated
way I could find of having

00:38:14.050 --> 00:38:16.260
one call the other and back.

00:38:16.260 --> 00:38:18.320
So some really fun stuff
that you can do with that.

00:38:18.320 --> 00:38:21.410
And now again, hopefully you can see
that you can easily,

00:38:21.410 --> 00:38:25.080
easily, easily put this kind of
functionality into your own scripts,

00:38:25.080 --> 00:38:27.970
migrate over your actual shell
scripts that you had before,

00:38:28.060 --> 00:38:30.090
put that into here,
and do a lot of work with it.

00:38:30.100 --> 00:38:32.810
If I could go back to the slides, please.

00:38:35.610 --> 00:38:37.750
Some common examples are shell.

00:38:37.760 --> 00:38:40.180
I was looking for ones that were
in the default install here,

00:38:40.180 --> 00:38:42.070
so some of these might
be reaching a little bit,

00:38:42.070 --> 00:38:44.150
depending on what you
call common examples.

00:38:44.160 --> 00:38:47.090
But the Etsy daily, weekly,
monthly scripts,

00:38:47.210 --> 00:38:49.180
those are all shell scripts.

00:38:49.180 --> 00:38:52.200
Those are the ones that go through,
back up your NetInfo database,

00:38:52.200 --> 00:38:54.860
rotate your log files
and stuff like that.

00:38:54.920 --> 00:38:55.500
So those are in there.

00:38:55.500 --> 00:38:57.500
Startup items are commonly shell scripts.

00:38:57.500 --> 00:38:59.480
If you look in system
library startup items,

00:38:59.490 --> 00:39:02.330
you're going to find that the
actual executable of a startup item

00:39:02.330 --> 00:39:05.460
is almost always a shell script,
because it's nice and simple.

00:39:05.600 --> 00:39:07.660
If you've ever used
the disk space monitor,

00:39:07.660 --> 00:39:10.610
I did a grep on the system looking
for anything that had been bash

00:39:10.610 --> 00:39:12.390
in it or something else like that.

00:39:12.450 --> 00:39:14.720
Disk space monitor alerts are there.

00:39:14.720 --> 00:39:18.160
And pre-flight and post-flight package
scripts are most always shell scripts,

00:39:18.160 --> 00:39:20.200
although you'd see a
lot of Perl lately too.

00:39:23.400 --> 00:39:27.570
never use another
scripting language again,

00:39:27.570 --> 00:39:28.490
right?

00:39:28.510 --> 00:39:30.580
Once you lose, right?

00:39:30.580 --> 00:39:33.010
Once you use Perl, you never go back.

00:39:33.130 --> 00:39:36.460
Having said that, I stick with shell,
but I understand where

00:39:36.460 --> 00:39:38.690
people come from with this.

00:39:38.900 --> 00:39:42.220
I started off mostly doing
AppleScript because it was easy--

00:39:42.220 --> 00:39:43.600
it was very easy to get into.

00:39:43.600 --> 00:39:47.010
Once we started getting into OS X Server,
especially in X1 and X2

00:39:47.010 --> 00:39:50.530
when AppleScript wasn't as
robust as it is now in X3,

00:39:50.730 --> 00:39:52.660
shell scripting took care of
some of those deficiencies,

00:39:52.740 --> 00:39:54.820
stuff like having to be logged
in and things like that.

00:39:54.900 --> 00:39:57.870
So shell script I started doing a
lot of work with and having a lot of

00:39:57.880 --> 00:39:59.720
fun with the interaction between it.

00:39:59.720 --> 00:40:03.370
Some would say the next logical
progression would be to Perl.

00:40:03.440 --> 00:40:05.240
Takes a different person
to understand Perl,

00:40:05.250 --> 00:40:07.040
so we'll go over that.

00:40:07.970 --> 00:40:11.020
Perl is present on pretty
much any Unix system.

00:40:11.020 --> 00:40:13.770
So again, you have a wide range of
deployable systems that you can

00:40:13.770 --> 00:40:15.220
write a Perl script for and use.

00:40:15.220 --> 00:40:18.810
There's many, many, many,
many Perl resources available.

00:40:18.840 --> 00:40:21.140
There's a lot out there,
just like shell script.

00:40:21.140 --> 00:40:23.160
There's thousands of
sites devoted to this,

00:40:23.160 --> 00:40:26.030
thousands of sample scripts
that you'll be able to get to.

00:40:26.030 --> 00:40:28.670
And an incredibly active,
and for the most part,

00:40:28.670 --> 00:40:30.530
very nice developer community.

00:40:30.790 --> 00:40:32.910
Happy to answer questions.

00:40:32.910 --> 00:40:37.410
Just don't get them into wars,
and you should be good.

00:40:38.880 --> 00:40:41.030
So some advantages of Perl.

00:40:41.090 --> 00:40:42.400
It's very much multi-threaded.

00:40:42.440 --> 00:40:44.240
You can do a lot of
things at the same time.

00:40:44.240 --> 00:40:46.950
Perl's got a lot of
resources available for that.

00:40:47.300 --> 00:40:50.880
This is verging on a religious statement,
but I think it's the most

00:40:50.880 --> 00:40:54.100
extensible of the three languages,
mostly because there's thousands and

00:40:54.100 --> 00:40:58.980
thousands and thousands of modules
that have been written for Perl.

00:40:59.030 --> 00:41:01.070
Again,
I hate to pick on Carbon Copy Cloner,

00:41:01.080 --> 00:41:05.220
but since Mike's doing the ARD session,
I will.

00:41:05.420 --> 00:41:08.020
If you've used ARD, you've used PSYNC.

00:41:08.270 --> 00:41:11.980
PSYNC is a Perl app that uses a bunch
of modules that use it in there.

00:41:11.980 --> 00:41:13.810
Again,
you could use those same modules to

00:41:13.810 --> 00:41:15.300
increase your own Perl application.

00:41:15.300 --> 00:41:18.070
So that's one of the
examples that uses that.

00:41:18.080 --> 00:41:20.380
CPAN is a Perl repository.

00:41:20.380 --> 00:41:22.300
I'll give you a URL for
that in a little bit.

00:41:22.320 --> 00:41:25.820
That's got a listing of all these
modules that you can easily get to.

00:41:25.830 --> 00:41:27.360
Runs on most systems.

00:41:27.430 --> 00:41:30.840
Although it's not in there by default,
you can get Perl environments

00:41:30.840 --> 00:41:33.080
for BAC as OS 8 and for Windows.

00:41:33.240 --> 00:41:36.400
So even though it's primarily
installed on most Unix systems,

00:41:36.420 --> 00:41:38.500
if you want to,
if you have a Perl script that you want

00:41:38.500 --> 00:41:42.030
to use with a little bit of tweaking and
some installation on the client side,

00:41:42.040 --> 00:41:44.320
you can get this to run on your clients.

00:41:44.320 --> 00:41:48.160
Incredibly good for text processing.

00:41:48.160 --> 00:41:50.960
I've lately started getting into
helping out a design firm that I was

00:41:51.040 --> 00:41:53.790
working with that needs to get rid
of a bunch of files generated by

00:41:53.790 --> 00:41:55.380
their rips and stuff like that.

00:41:55.380 --> 00:41:59.430
And the file path got so weird
and so complicated that Perl

00:41:59.430 --> 00:42:00.890
was the best solution for that.

00:42:01.040 --> 00:42:03.340
Because it can easily get in there,
parse out that text,

00:42:03.340 --> 00:42:05.940
do a lot of text manipulation
without having to go through

00:42:05.940 --> 00:42:09.570
and do it by hand like you might
have to code in a shell script.

00:42:09.950 --> 00:42:12.960
And if you've ever done
anything with Perl,

00:42:12.960 --> 00:42:16.790
one of the slogans of Perl is there's
always more than one way to do it.

00:42:16.910 --> 00:42:19.500
And as you'll find out when you
go looking for Perl modules to do

00:42:19.500 --> 00:42:24.070
your one item that you need to do,
you might find 3,000.

00:42:24.220 --> 00:42:26.320
So you got to wade through
that a little bit to decide,

00:42:26.320 --> 00:42:27.970
hey, which one's better, whatever else.

00:42:27.970 --> 00:42:31.500
So there's a little bit of a learning
curve there and maybe a little

00:42:31.500 --> 00:42:34.800
bit of a sense of overwhelming
how those all are out there.

00:42:34.840 --> 00:42:36.780
Perl disadvantages.

00:42:36.780 --> 00:42:39.160
It is probably,
I don't think anyone would argue with

00:42:39.160 --> 00:42:42.830
me that it's the most complex of the
languages that we're talking about here.

00:42:42.860 --> 00:42:44.650
Not that that means it's hard to learn.

00:42:44.650 --> 00:42:47.860
It's just that there's a lot more
syntax that you need to get used to.

00:42:48.120 --> 00:42:49.460
There's a lot more commands.

00:42:49.460 --> 00:42:51.920
There's a lot more of statements
that you can get with.

00:42:51.950 --> 00:42:54.120
So you need to understand
that before getting into it.

00:42:54.250 --> 00:42:57.100
It's not something that you
can just pick up a visual quick

00:42:57.100 --> 00:43:00.400
start guide to and be writing a
lot of Perl within a day or two.

00:43:00.400 --> 00:43:01.960
It might take you three or four days.

00:43:01.960 --> 00:43:04.750
And to get the really good stuff,
take you a little bit longer than that.

00:43:04.800 --> 00:43:06.420
But there is going to be
a bit of a learning curve.

00:43:06.420 --> 00:43:08.450
You'll actually have to think.

00:43:08.460 --> 00:43:10.780
With AppleScript,
we can do some recording

00:43:10.780 --> 00:43:11.990
and stuff like that.

00:43:11.990 --> 00:43:14.580
We don't have that
functionality with Perl.

00:43:14.600 --> 00:43:15.940
So again, there's a little more into it.

00:43:16.040 --> 00:43:18.090
And there's more than one.

00:43:18.100 --> 00:43:20.120
There's only one way to do it.

00:43:20.120 --> 00:43:22.960
So when you approach a problem with Perl,
if you go looking on some of

00:43:22.970 --> 00:43:25.120
the lists and stuff like that,
you're going to find

00:43:25.120 --> 00:43:26.880
18,000 different ways.

00:43:26.880 --> 00:43:29.350
And you have to kind of filter
through that a little bit and say,

00:43:29.350 --> 00:43:30.880
really, which one is the best way?

00:43:31.710 --> 00:43:33.650
All right, here's a simple Perl script.

00:43:33.790 --> 00:43:36.380
I wrote an application
that generated SSH tunnels.

00:43:36.380 --> 00:43:38.140
It was an AppleScript Studio application.

00:43:38.140 --> 00:43:40.030
Problem with it was,
is once it calls the do

00:43:40.030 --> 00:43:42.460
shell script command,
it would have to wait for that do

00:43:42.460 --> 00:43:45.840
shell script command to return before
the AppleScript Studio application

00:43:45.840 --> 00:43:48.070
actually went back to being operational.

00:43:48.070 --> 00:43:51.030
So one of the ways around this
was to actually wrap my shell

00:43:51.030 --> 00:43:54.560
command into a Perl script that
would actually demonize itself.

00:43:54.560 --> 00:43:57.950
So this is one of the examples I could
find of Perl that I would have written

00:43:57.950 --> 00:43:59.640
that did something kind of sexy.

00:43:59.640 --> 00:44:01.430
So it demonizes itself.

00:44:02.060 --> 00:44:03.560
All right, here's a simple Perl script.

00:44:03.560 --> 00:44:05.450
I wrote an application
that generated SSH tunnels.

00:44:05.450 --> 00:44:07.260
It keeps that SSH tunnel
open as long as it needs to.

00:44:07.270 --> 00:44:10.120
And the AppleScript Studio application
had a return because this application,

00:44:10.120 --> 00:44:12.310
this Perl script had spun off
and had kind of gone on its own.

00:44:12.310 --> 00:44:14.630
So the AppleScript Studio part
was happy to go back to it.

00:44:14.770 --> 00:44:16.150
There we go.

00:44:16.150 --> 00:44:18.470
See that action?

00:44:20.400 --> 00:44:22.280
Difference between this
and a shell script,

00:44:22.340 --> 00:44:23.090
it's just text.

00:44:23.260 --> 00:44:27.100
It's different text, but it's just text,
is the fact that we're using user bin

00:44:27.100 --> 00:44:31.490
Perl here instead of bin bash or one
of the other shells we might have had.

00:44:32.390 --> 00:44:33.420
Here we have a Perl script demo.

00:44:33.420 --> 00:44:34.210
Auto printer setup.

00:44:34.390 --> 00:44:37.800
Is Mike here from Purdue?

00:44:37.800 --> 00:44:38.630
Maybe not.

00:44:38.780 --> 00:44:43.040
This is a Perl script that
an admin from Purdue set up.

00:44:43.110 --> 00:44:44.810
And let me show you a problem.

00:44:45.070 --> 00:44:45.640
I'm a user.

00:44:45.640 --> 00:44:46.940
I sit down at the lab machine.

00:44:46.940 --> 00:44:47.900
I say, oh, no printers.

00:44:47.940 --> 00:44:49.120
Let me add a few.

00:44:49.260 --> 00:44:52.660
I want to add an LPR printer.

00:44:52.820 --> 00:44:54.520
It's at my house.

00:44:54.670 --> 00:44:58.340
This isn't my home IP,
but we'll just type in something here.

00:44:58.340 --> 00:45:00.330
It's going to be a generic PostScript.

00:45:00.540 --> 00:45:02.300
I don't want to get anything fancy there.

00:45:02.300 --> 00:45:05.130
All right, generic postscript,
and I add it.

00:45:09.400 --> 00:45:10.900
Okay, cancel.

00:45:10.900 --> 00:45:12.240
Do I have a printer in here now?

00:45:12.270 --> 00:45:13.620
There you go, generic PostScript printer.

00:45:13.620 --> 00:45:14.360
All right.

00:45:14.570 --> 00:45:18.290
Problem is, the next user behind me isn't
going to want this printer.

00:45:18.950 --> 00:45:20.660
I'm in a lab situation at a university.

00:45:20.660 --> 00:45:24.270
I don't have the luxury of having an
OS X server and work group manager

00:45:24.270 --> 00:45:27.340
that I can push down and force
users into different printers.

00:45:27.450 --> 00:45:30.060
So instead,
I kind of got to do this myself.

00:45:30.150 --> 00:45:32.210
Perl to the rescue.

00:45:32.970 --> 00:45:36.470
We've got an application
called Printer Setup.

00:45:36.470 --> 00:45:39.810
I'll pop all these open
so you can see these.

00:45:41.350 --> 00:45:49.150
going and it is a Perl script that
looks inside two different files.

00:45:49.150 --> 00:45:53.150
So here's the Perl script and again you
can take a look at this and go through

00:45:53.170 --> 00:45:56.720
it and see some of the stuff and it
reads in from two different files.

00:45:56.720 --> 00:46:00.230
One is a printer definition file
which understands what printers are

00:46:00.230 --> 00:46:05.390
available to my client machine and the
other file is a printer mappings file.

00:46:05.600 --> 00:46:09.200
This says hey if this machine's
IP address is in this range we're

00:46:09.200 --> 00:46:12.220
gonna install these printers on IT.

00:46:13.050 --> 00:46:15.270
So two different data files,
both in plain text.

00:46:15.270 --> 00:46:17.270
And we're just going to
use the LPR commands,

00:46:17.270 --> 00:46:20.200
the LP commands, to set up print queues
and stuff like that.

00:46:20.250 --> 00:46:22.210
So let me show you a
quick example of that.

00:46:22.290 --> 00:46:23.340
So I'm the lab admin.

00:46:23.340 --> 00:46:24.200
I come to this machine.

00:46:24.200 --> 00:46:27.520
I say, why do they keep adding printers?

00:46:27.750 --> 00:46:29.920
Go down to the command line.

00:46:29.950 --> 00:46:34.460
I've got to run this as root and volumes.

00:46:34.470 --> 00:46:35.400
There you go.

00:46:35.400 --> 00:46:36.460
Let me just drag that in, right?

00:46:36.560 --> 00:46:38.470
This is too much work.

00:46:49.500 --> 00:46:55.600
[Transcript missing]

00:46:59.610 --> 00:47:00.440
Beautiful.

00:47:00.440 --> 00:47:01.440
Now I go back to the printer setup.

00:47:01.440 --> 00:47:06.260
Hey, it's not that 17 IP address
LPR machine anymore.

00:47:06.260 --> 00:47:08.360
Now we've got the WWDC demo machine.

00:47:08.360 --> 00:47:09.100
Come on.

00:47:09.100 --> 00:47:11.640
There's something for that, right?

00:47:11.670 --> 00:47:16.170
It went in.

00:47:17.180 --> 00:47:19.410
The Perl script goes in,
it deletes your current

00:47:19.410 --> 00:47:21.750
folders that you have,
it looks in the data files,

00:47:21.880 --> 00:47:23.850
finds out what printers
you're supposed to have,

00:47:23.990 --> 00:47:25.880
and adds those printers
in with the LP commands.

00:47:25.880 --> 00:47:28.720
Nice example of what you can do
with Perl and some of the stuff

00:47:28.720 --> 00:47:30.210
that you can get done with it.

00:47:30.300 --> 00:47:32.100
If I could go back to the slides, please.

00:47:37.620 --> 00:47:40.450
Common examples of Perl,
part of the server setup

00:47:40.560 --> 00:47:44.700
process runs a Perl script that
goes through and does that.

00:47:44.910 --> 00:47:49.320
If you have a website with an
SSL certificate that's actually got

00:47:49.320 --> 00:47:53.520
a passphrase associated with it,
when you launch Apache,

00:47:53.540 --> 00:47:56.000
it actually calls a Perl script
that pulls that out of it.

00:47:56.000 --> 00:47:57.700
Disk Space Monitor does this.

00:47:57.800 --> 00:48:01.350
CGI scripts on web pages, right,
the vast majority of

00:48:01.350 --> 00:48:02.300
those are probably Perl.

00:48:02.440 --> 00:48:04.460
I'll go on a little bit
of limb and say that.

00:48:04.460 --> 00:48:07.420
So examples of Perl
that you'll find around.

00:48:08.010 --> 00:48:11.510
All right, some links that you can go
to for more information.

00:48:11.600 --> 00:48:14.110
Here's the URL for the sample scripts.

00:48:14.220 --> 00:48:18.750
So www.afp548.com@wwdc.zip.

00:48:18.850 --> 00:48:20.540
Those are out there now.

00:48:20.540 --> 00:48:22.120
So you'll be able to grab those.

00:48:22.270 --> 00:48:24.540
Internet and web documentation,
you can go to the ADC home,

00:48:24.540 --> 00:48:26.120
some of the other stuff there.

00:48:26.120 --> 00:48:29.660
Here's some man pages for bash, Perl,
and others.

00:48:29.660 --> 00:48:33.040
Then we've got some example sample
script sites that you can go to

00:48:33.040 --> 00:48:34.630
and download some stuff from.

00:48:34.680 --> 00:48:37.860
Notice for shell, we go to Google.

00:48:37.920 --> 00:48:41.420
I couldn't find one that was
as inclusive as I wanted it,

00:48:41.450 --> 00:48:43.290
and I didn't want to put 30 up there.

00:48:43.380 --> 00:48:45.660
So literally, when I go looking for
shell script examples,

00:48:45.660 --> 00:48:49.880
I Google bash, printer setup,
whatever else, and go through there.

00:48:49.880 --> 00:48:52.270
And I'll be able to find that.

00:48:52.320 --> 00:48:52.910
So thanks.

00:48:52.980 --> 00:48:55.080
That's my site.

00:48:55.100 --> 00:48:58.580
My email is supposed to be up there,
but it's maxroll@afp548.com.

00:48:58.580 --> 00:49:00.690
If you go to the site, you'll find it.