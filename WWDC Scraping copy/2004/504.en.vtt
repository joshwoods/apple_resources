WEBVTT

00:00:12.240 --> 00:00:15.590
Ladies and gentlemen,
I introduce our first presenter,

00:00:15.600 --> 00:00:18.000
and that would be architect Dr.

00:00:18.000 --> 00:00:20.390
Stuart Chechire.

00:00:30.920 --> 00:00:32.820
Okay, I want to thank you all for coming.

00:00:32.930 --> 00:00:36.490
It's great to see such a full
room on a Friday morning,

00:00:36.490 --> 00:00:38.240
last day of the conference.

00:00:38.240 --> 00:00:42.010
And I'd like to believe that it's
because you're here to see me,

00:00:42.090 --> 00:00:46.680
but I know it's really because you've
all experienced firsthand the frustration

00:00:47.130 --> 00:00:50.210
of trying to set up network devices.

00:00:50.210 --> 00:00:53.420
And Apple's not the first company
to realize the importance of this,

00:00:53.520 --> 00:00:56.500
but I believe we're the first
company to succeed with a

00:00:56.620 --> 00:00:58.410
solution that really works.

00:00:58.440 --> 00:01:01.810
I'd like to start with a show of hands.

00:01:02.220 --> 00:01:05.420
How many people in the room
now are IT administrators,

00:01:05.450 --> 00:01:08.900
network administrators?

00:01:09.420 --> 00:01:09.770
Okay.

00:01:10.440 --> 00:01:13.900
That's a good turnout.

00:01:13.900 --> 00:01:13.900
So, I'm going to start with a few

00:01:15.650 --> 00:01:18.860
We have a lot of new stuff
in Rendezvous this year.

00:01:19.080 --> 00:01:21.330
This has been the biggest
year for Rendezvous,

00:01:21.450 --> 00:01:26.150
and we've got more stuff to announce this
year than last year or the year before.

00:01:26.350 --> 00:01:27.490
So I'm going to get right into it.

00:01:27.640 --> 00:01:30.750
We've got so much new stuff,
we should be calling it Rendezvous

00:01:30.890 --> 00:01:33.580
2 or Super Rendezvous or something.

00:01:34.020 --> 00:01:39.120
So there are three big areas
where we've gone beyond Panther in

00:01:39.120 --> 00:01:40.560
three different dimensions.

00:01:40.610 --> 00:01:42.780
We've gone beyond the local LAN.

00:01:42.820 --> 00:01:46.190
In Jaguar and Panther,
Rendezvous was focused at the area of

00:01:46.190 --> 00:01:50.050
IP networking that's least well served,
which is a small network just

00:01:50.050 --> 00:01:51.820
plugging things together.

00:01:51.870 --> 00:01:55.990
But in Tiger, we now expand that beyond
the local LAN using standard

00:01:55.990 --> 00:01:58.740
unicast queries and updates.

00:01:58.810 --> 00:02:00.490
People have raised this criticism before,
oh,

00:02:00.490 --> 00:02:01.980
Rendezvous is only for local networks.

00:02:02.090 --> 00:02:03.740
It doesn't scale to the enterprise.

00:02:03.800 --> 00:02:05.990
Well, we've left the enterprise behind.

00:02:06.270 --> 00:02:10.990
Because we're built on DNS,
DNS is a worldwide database.

00:02:11.300 --> 00:02:13.640
It's the biggest distributed
database in the world.

00:02:13.840 --> 00:02:19.050
And because of that, in Tiger,
you can browse any domain that's

00:02:19.130 --> 00:02:24.290
advertising services anywhere on the
planet from anywhere on the planet.

00:02:24.510 --> 00:02:27.850
So we now scale to the whole planet.

00:02:35.210 --> 00:02:40.060
We go beyond the old Rendezvous
in another very important way,

00:02:40.110 --> 00:02:43.590
which is while we always
had the Darwin code,

00:02:43.590 --> 00:02:46.190
which ran on a variety
of different platforms,

00:02:46.190 --> 00:02:47.680
it was a little bit inaccessible.

00:02:47.680 --> 00:02:51.090
What we have today,
just announced this week,

00:02:51.340 --> 00:02:56.170
is a Rendezvous system service
daemon running in the background,

00:02:56.220 --> 00:03:02.680
just like it does on OS X,
running on Linux, FreeBSD, Solaris,

00:03:02.680 --> 00:03:05.440
other Unix systems, and of course,
Windows.

00:03:05.440 --> 00:03:09.780
How many people in the
audience develop for Windows?

00:03:11.070 --> 00:03:12.800
Nearly half.

00:03:12.860 --> 00:03:15.540
Exactly as we expected.

00:03:15.540 --> 00:03:18.380
And the good news now,
you can go to the Apple developer

00:03:18.380 --> 00:03:21.340
website and download our
technology preview for Windows,

00:03:21.340 --> 00:03:26.610
run the installer,
and you get the exact same DNS underscore

00:03:26.610 --> 00:03:31.670
SD dot H API that's provided on Panther,
the same API that's provided

00:03:31.670 --> 00:03:35.060
on Linux and FreeBSD and
Solaris and the Unix platforms.

00:03:35.060 --> 00:03:38.980
So the same C code you write is now
portable across all of those platforms.

00:03:39.920 --> 00:03:43.960
And the other way we go beyond the
old Rendezvous is beyond C APIs.

00:03:43.960 --> 00:03:46.920
The current APIs are C header files.

00:03:46.920 --> 00:03:53.020
We now have a fully supported
Java class library that provides

00:03:53.020 --> 00:03:55.790
you the full functionality.

00:03:59.540 --> 00:04:03.990
We announced this at a talk at
Java 1 this week and got a big

00:04:04.100 --> 00:04:05.890
enthusiastic reaction there as well.

00:04:05.970 --> 00:04:08.050
Java people have been
waiting for this a long time.

00:04:08.240 --> 00:04:12.450
So you have the full suite of
Rendezvous facilities available to you,

00:04:12.860 --> 00:04:16.080
but with object-oriented Java-style APIs.

00:04:16.080 --> 00:04:21.420
And the other area where we go
beyond Rendezvous is not just Java,

00:04:21.420 --> 00:04:26.770
but we go beyond C2, C#, Visual Basic,
all of the .NET languages

00:04:26.770 --> 00:04:27.600
on Windows as well.

00:04:27.600 --> 00:04:31.560
So you can now write
Visual Basic programs using Rendezvous.

00:04:34.380 --> 00:04:39.470
So an outline of what we're
going to talk about today.

00:04:39.740 --> 00:04:42.080
I'm going to recap what
Rendezvous is about,

00:04:42.080 --> 00:04:46.540
because most Mac users and
developers know about it,

00:04:46.650 --> 00:04:49.040
but I want to make sure that
we're not leaving anybody behind.

00:04:49.040 --> 00:04:52.690
We're going to talk about the wide area
of service discovery and advertising.

00:04:52.780 --> 00:04:56.000
We're going to show you
Rendezvous running on Windows and

00:04:56.000 --> 00:04:57.560
on the Unix platforms.

00:04:58.070 --> 00:05:01.070
We're going to tell you
about the Java APIs,

00:05:01.070 --> 00:05:05.700
and the APIs that we have in
Panther proved to be very good.

00:05:05.730 --> 00:05:07.820
We didn't have any bugs
or omissions to fix,

00:05:07.980 --> 00:05:09.630
but we have added a couple
of new helper functions,

00:05:09.630 --> 00:05:10.640
which I'll tell you about.

00:05:10.680 --> 00:05:13.150
And you may have seen a setting up here.

00:05:13.150 --> 00:05:15.890
We just had a whole
suitcase full of stuff.

00:05:16.010 --> 00:05:18.890
We had the Rendezvous plug fest
at the Apple campus last night,

00:05:18.970 --> 00:05:21.410
and we told people that if
they brought cool stuff,

00:05:21.410 --> 00:05:24.570
then we'd try to show it,
and we got a whole suitcase of stuff.

00:05:24.750 --> 00:05:27.880
So if it weren't for Rendezvous,
it wouldn't be a Rendezvous.

00:05:27.900 --> 00:05:30.440
It would be insane to try to
set up 20 different devices

00:05:30.440 --> 00:05:33.460
in 15 minutes to do a demo,
but because of Rendezvous,

00:05:33.460 --> 00:05:34.860
we'll see if this works.

00:05:34.940 --> 00:05:40.230
And we hope to have
time for Q&A at the end.

00:05:44.090 --> 00:05:46.700
So, quick recap, what is Rendezvous?

00:05:46.890 --> 00:05:49.890
First and most important
is it's a philosophy.

00:05:49.960 --> 00:05:52.400
It's an attitude,
and it's the attitude that you should be

00:05:52.400 --> 00:05:57.170
able to just plug things in and have them
work without fussing with addresses and

00:05:57.170 --> 00:05:59.300
subnet masks and nonsense configuration.

00:05:59.760 --> 00:06:02.400
And that's what's most important,
and I always say that first,

00:06:02.400 --> 00:06:03.760
because people forget that.

00:06:03.760 --> 00:06:05.730
Rendezvous is not about technology.

00:06:05.780 --> 00:06:08.760
Rendezvous is about the goal of
making products that just work.

00:06:08.760 --> 00:06:11.000
If you think about
plugging in a USB device,

00:06:11.000 --> 00:06:13.520
you don't have to type
addresses to configure it,

00:06:13.530 --> 00:06:14.690
you just plug it in.

00:06:14.780 --> 00:06:17.840
And there's no reason Ethernet
should be any different,

00:06:17.840 --> 00:06:18.620
or wireless.

00:06:18.620 --> 00:06:21.750
So that's the most important thing.

00:06:21.930 --> 00:06:26.750
But there are underlying technologies
that enable us to reach that vision,

00:06:26.750 --> 00:06:30.020
and those are addressing, naming,
and discovery.

00:06:30.050 --> 00:06:32.660
Now,
I'm not going to go into these in the

00:06:32.660 --> 00:06:37.130
same detail I have at previous talks,
but just to recap,

00:06:37.370 --> 00:06:40.370
you're not going to do much
IP addressing without an address.

00:06:40.490 --> 00:06:44.220
DHCP is great, but if there isn't a
DHCP server on the network,

00:06:44.250 --> 00:06:47.940
all of these Rendezvous devices
will pick their own address.

00:06:48.170 --> 00:06:51.500
Second thing,
having a bunch of random IP addresses

00:06:51.500 --> 00:06:53.930
is certainly a first step,
but it's not sufficient,

00:06:54.000 --> 00:06:56.900
because if you don't know
what all the IP addresses are,

00:06:56.900 --> 00:06:58.250
you're not a lot better off.

00:06:58.320 --> 00:07:01.960
So the second step is naming,
and the normal usage model for

00:07:02.350 --> 00:07:04.590
Internet software is DNS hostnames.

00:07:04.640 --> 00:07:08.780
DNS is great if you have a DNS server,
but if you don't,

00:07:08.780 --> 00:07:10.880
then we need a safety net.

00:07:11.020 --> 00:07:15.220
And the safety net is multicast DNS,
where you send a standard

00:07:15.220 --> 00:07:18.200
format DNS query,
you multicast it to everybody

00:07:18.200 --> 00:07:21.050
on the local network,
and each device has its little

00:07:21.050 --> 00:07:22.730
multicast DNS responder.

00:07:22.760 --> 00:07:26.200
And when it sees a query for its name,
it says, "That's me," and it answers.

00:07:26.260 --> 00:07:31.060
So this doesn't replace or compete
with global scale wide area DNS,

00:07:31.060 --> 00:07:34.870
but it's the safety net when you
have just two devices and a cable,

00:07:34.870 --> 00:07:39.870
or three or four devices in a hub,
and you don't have a DNS server setup.

00:07:40.310 --> 00:07:44.360
And the third leg is discovery,
because using host names is

00:07:44.460 --> 00:07:46.740
better than using addresses,
but you still need to

00:07:46.740 --> 00:07:48.180
know what name to use.

00:07:48.300 --> 00:07:50.480
And discovery lets you
browse the network,

00:07:50.480 --> 00:07:53.860
like the faithful old Apple talk chooser,
and see what's out there and

00:07:53.860 --> 00:07:57.380
click on it without having to
know in advance what the name is.

00:07:57.720 --> 00:07:59.390
And why do you care
as product developers?

00:07:59.480 --> 00:08:04.410
Well, you care because if the
user can't use your product,

00:08:04.540 --> 00:08:07.260
then they're going to call you,
they're going to run up support costs,

00:08:07.300 --> 00:08:09.070
and ultimately they may return it.

00:08:09.080 --> 00:08:15.660
I witnessed something at a startup
a few years ago here in California,

00:08:15.750 --> 00:08:18.780
in Silicon Valley,
at the heart of the computer industry.

00:08:18.780 --> 00:08:21.930
They bought a $1,500 high-end
HP laser jet printer,

00:08:22.070 --> 00:08:26.100
double-sided stapling in the corners,
very, very beautiful, fancy machine,

00:08:26.100 --> 00:08:27.750
plugged it into the network.

00:08:27.760 --> 00:08:29.190
Apple Talk auto-configured.

00:08:29.280 --> 00:08:31.400
The Mac users were
printing on it right away.

00:08:31.400 --> 00:08:34.000
They could not get IP set up.

00:08:34.320 --> 00:08:37.720
These were guys with masters and PhDs
from Stanford doing a dot-com startup.

00:08:37.720 --> 00:08:39.060
They could not make it work.

00:08:39.080 --> 00:08:40.930
After two days,
they put it back in the styrofoam,

00:08:41.030 --> 00:08:42.600
took it back to Fry's, and returned it.

00:08:42.640 --> 00:08:46.760
And that's just a tragic story,
which is why today every major printer

00:08:47.300 --> 00:08:52.380
vendor has Rendezvous in their printers,
because they don't want...

00:08:56.580 --> 00:08:58.700
They don't want the
printers being returned.

00:08:58.790 --> 00:09:01.990
But what is more exciting to me
is not just taking the current

00:09:01.990 --> 00:09:04.730
stuff and making it easier,
but the fact that when you

00:09:04.730 --> 00:09:07.590
don't have to configure it,
entirely new product

00:09:07.590 --> 00:09:09.580
categories become possible.

00:09:09.580 --> 00:09:13.660
And that's where I think we're going
to see a lot of the exciting things.

00:09:13.660 --> 00:09:17.840
You will all have seen the
announcement for our Airport Express.

00:09:17.840 --> 00:09:22.280
This has no screen, this has no keyboard,
but it shows up in a pop-up menu in

00:09:22.280 --> 00:09:24.520
iTunes for you to play your music.

00:09:25.000 --> 00:09:27.600
That wouldn't be possible if
you had to type in addresses

00:09:27.600 --> 00:09:29.020
and netmasks and things.

00:09:29.020 --> 00:09:30.330
This product wouldn't exist.

00:09:30.360 --> 00:09:32.970
So that's where I think we're
going to see the excitement

00:09:32.970 --> 00:09:34.430
in the next couple of years.

00:09:41.670 --> 00:09:46.010
So, to summarize,
Rendezvous has grown both

00:09:46.010 --> 00:09:48.570
in breadth and in depth.

00:09:48.640 --> 00:09:51.310
It's grown in breadth in
terms of reaching more

00:09:51.420 --> 00:09:58.350
platforms and more languages,
and it's grown also in that it

00:09:58.350 --> 00:09:59.830
now scales beyond the local link.

00:09:59.840 --> 00:10:03.870
Geographically,
it's grown to scale to the whole world.

00:10:08.480 --> 00:10:12.480
So, don't even try to read this.

00:10:12.480 --> 00:10:14.720
I'm not here to talk to
you today about UPnP,

00:10:14.720 --> 00:10:17.430
but whenever we meet with developers,
it's a question that comes up,

00:10:17.490 --> 00:10:18.620
what about UPnP?

00:10:18.620 --> 00:10:23.770
And the UPnP forum loves to proclaim
how many hundreds of companies they

00:10:23.770 --> 00:10:27.920
have signed up for their forum,
but they only have one

00:10:27.920 --> 00:10:31.550
credible product today,
after all those years of work,

00:10:31.620 --> 00:10:33.500
and I'm being generous by
even calling it credible.

00:10:33.500 --> 00:10:37.890
That's the UPnP home gateway protocol,
and it really doesn't

00:10:37.890 --> 00:10:41.440
even work very well,
but that's the only thing that they

00:10:41.440 --> 00:10:43.670
can kind of point to as their success.

00:10:43.700 --> 00:10:47.390
Well, never mind the forum and
the hundreds of companies.

00:10:47.400 --> 00:10:48.830
We have hundreds of products.

00:10:48.910 --> 00:10:53.020
This is from the list of registered
Rendezvous service types from the

00:10:53.020 --> 00:10:59.980
DNS service discovery website,
and this is just the first page, and...

00:11:00.710 --> 00:11:03.110
It goes on, and I won't go page
after page after page.

00:11:03.190 --> 00:11:04.480
We're only on to the letter I here.

00:11:04.480 --> 00:11:05.840
We're only on the ninth
letter of the alphabet.

00:11:05.840 --> 00:11:09.160
Every one of these registered services,
this is not a product,

00:11:09.160 --> 00:11:10.360
this is a protocol.

00:11:10.360 --> 00:11:12.970
So for every one of these,
there are one or more

00:11:13.090 --> 00:11:14.960
servers advertising that,
there are one or more

00:11:15.070 --> 00:11:16.060
clients browsing for that.

00:11:16.120 --> 00:11:18.060
If it's a network game,
it may be a server and a

00:11:18.100 --> 00:11:19.580
client from the same company.

00:11:19.580 --> 00:11:22.290
In the case of protocols like SSH,
Telnet, FTP,

00:11:22.290 --> 00:11:26.240
there are of course dozens of
servers and clients advertising that.

00:11:26.740 --> 00:11:30.880
So we have this huge adoption,
this quiet revolution going on

00:11:30.880 --> 00:11:35.160
that people almost aren't aware of,
and daily this list of

00:11:35.210 --> 00:11:39.830
registered Rendezvous services
gets longer and longer.

00:11:40.510 --> 00:11:43.040
So on that note,
I'd like to invite Kiren Sekar

00:11:43.040 --> 00:11:46.730
up on stage to tell you all
about Wide Area Rendezvous.

00:11:55.000 --> 00:13:51.300
[Transcript missing]

00:13:53.480 --> 00:13:56.630
This doesn't use Rendezvous.

00:13:56.630 --> 00:13:59.790
Take for instance a network game.

00:14:00.170 --> 00:14:02.940
All of a sudden,
you can collaborate with another

00:14:03.070 --> 00:14:07.090
game player across the internet
with just a couple API calls.

00:14:07.340 --> 00:14:08.200
It's that easy.

00:14:08.200 --> 00:14:11.940
It provides a great user experience,
and it's easy for you too,

00:14:11.940 --> 00:14:14.260
allowing you to focus on
your core competencies,

00:14:14.260 --> 00:14:17.340
which is creating great applications,
not messing around with

00:14:17.340 --> 00:14:18.350
this networking stuff.

00:14:19.220 --> 00:14:22.720
If you manage a network
environment like in an enterprise,

00:14:22.720 --> 00:14:26.390
you might have found yourself choosing
between a network that's easy for you

00:14:26.390 --> 00:14:31.020
to administer and a network that's
easy for your users to interact with.

00:14:31.400 --> 00:14:34.110
And with Wide Area Rendezvous,
you get both.

00:14:34.180 --> 00:14:37.560
And of course,
like Local Rendezvous has done,

00:14:37.560 --> 00:14:40.600
Wide Area Rendezvous will
add a competitive advantage

00:14:40.610 --> 00:14:43.580
to your hardware products,
making them better for your

00:14:43.710 --> 00:14:47.200
customers to interact with,
and ultimately lowering

00:14:47.310 --> 00:14:49.180
your support costs.

00:14:49.830 --> 00:14:54.330
Now, as Stuart explained,
when we set about solving

00:14:54.330 --> 00:14:57.570
the local problem,
we focused on a few core

00:14:57.600 --> 00:14:59.640
pieces of functionality.

00:14:59.700 --> 00:15:01.580
And moving forward with
Wide Area Rendezvous,

00:15:01.670 --> 00:15:04.410
we're doing the exact same thing.

00:15:06.440 --> 00:15:11.500
First, we give every machine
a dynamic DNS hostname.

00:15:11.520 --> 00:15:15.080
This is much like the link
local name on local Rendezvous,

00:15:15.150 --> 00:15:18.370
but now the name is globally unique,
meaning it can be looked up

00:15:18.460 --> 00:15:20.400
and accessed from anywhere.

00:15:20.610 --> 00:15:24.110
And this name is persistent,
meaning as you move between your

00:15:24.150 --> 00:15:28.300
home and your cafe and your office,
the name stays the same even

00:15:28.300 --> 00:15:30.400
as your IP address changes.

00:15:30.400 --> 00:15:33.700
This is the first big
step towards reachability.

00:15:33.750 --> 00:15:36.380
This alone brings us
so much functionality.

00:15:36.380 --> 00:15:39.800
But we go ahead and
take it a step further.

00:15:40.770 --> 00:15:43.600
First of all, we don't want to have
to remember these names.

00:15:43.730 --> 00:15:46.980
And even more importantly,
we want to learn about new machines

00:15:47.100 --> 00:15:49.920
that we didn't know about before,
but they're providing some

00:15:49.920 --> 00:15:51.920
service that's of interest to us.

00:15:52.060 --> 00:15:56.540
So we take the DNS service discovery
and registration that we have on the

00:15:56.630 --> 00:16:02.730
local network and publish this into a
global namespace where these services can

00:16:02.730 --> 00:16:06.000
be accessed potentially from anywhere.

00:16:06.910 --> 00:16:11.220
Now, it's easiest to explain the
architecture to the solutions of

00:16:11.220 --> 00:16:16.590
this functionality in the framework
of local Rendezvous that we all know.

00:16:17.310 --> 00:16:21.110
Local Rendezvous, of course,
starts with DNS service

00:16:21.160 --> 00:16:23.830
discovery on the top.

00:16:23.830 --> 00:16:27.560
And that is the APIs that your
applications use to browse

00:16:27.560 --> 00:16:30.180
and register for services.

00:16:30.310 --> 00:16:33.150
And of course,
the resource record format,

00:16:33.300 --> 00:16:38.200
using standard DNS messages to encode
information about your services.

00:16:38.200 --> 00:16:43.180
Now beneath this, we have multicast DNS,
the serverless protocol for

00:16:43.350 --> 00:16:48.430
registering and querying for these
DNS records on the local network.

00:16:48.640 --> 00:16:53.380
With Wide Area Rendezvous,
we simply slide out the multicast

00:16:53.380 --> 00:17:00.340
DNS layer and use unicast DNS,
communicating directly with a DNS server.

00:17:00.460 --> 00:17:03.770
Now, in the difference between
this architecture and our

00:17:03.910 --> 00:17:06.900
previous local architecture,
what has stayed the same

00:17:06.900 --> 00:17:09.630
is just as important,
if not more important,

00:17:09.630 --> 00:17:13.900
than what has changed,
and that's DNS service discovery.

00:17:14.450 --> 00:17:19.700
This means that our
APIs are 100% unchanged.

00:17:20.000 --> 00:17:23.520
The exact APIs that you've been
using for the last two years will

00:17:23.730 --> 00:17:27.310
give you all of this new wide area
functionality with little to no

00:17:27.310 --> 00:17:30.270
modification in your applications.

00:17:30.940 --> 00:17:33.960
When we first did local Rendezvous,
many people asked,

00:17:33.980 --> 00:17:36.840
why are we using the DNS message format?

00:17:36.980 --> 00:17:38.650
And back then we did
have some good reasons.

00:17:38.760 --> 00:17:41.510
There were a wealth of debugging tools.

00:17:41.520 --> 00:17:43.490
Developers already knew
the message format,

00:17:43.490 --> 00:17:44.720
just to name a few.

00:17:44.770 --> 00:17:48.500
But now is where we
see the really big win.

00:17:48.540 --> 00:17:51.000
By making that decision
for local Rendezvous,

00:17:51.000 --> 00:17:53.980
we're allowed to keep the same
protocol and the same APIs,

00:17:54.220 --> 00:17:58.870
and instead communicate with these
DNS servers that automatically know

00:17:58.870 --> 00:18:01.550
how to understand our messages.

00:18:03.630 --> 00:18:07.430
We can look at some of the
specific advantages of the DNS,

00:18:07.430 --> 00:18:11.730
both on the discovery using the
DNS queries and the registration

00:18:11.730 --> 00:18:13.730
side using dynamic updates.

00:18:13.840 --> 00:18:19.620
Let's start by looking at registration,
or pardon me, with discovery.

00:18:20.710 --> 00:18:25.000
To discover a service or to look
up information about a service,

00:18:25.060 --> 00:18:28.210
we format a standard DNS query,
like we would have done

00:18:28.240 --> 00:18:30.430
with local Rendezvous,
and instead of sending

00:18:30.430 --> 00:18:32.640
it out on the network,
we send it directly to our

00:18:32.640 --> 00:18:34.720
DNS server and get an answer.

00:18:34.780 --> 00:18:36.900
It's really that easy.

00:18:36.960 --> 00:18:40.460
But along with it being easy,
we inherit this huge wealth of

00:18:40.550 --> 00:18:43.040
advantages that DNS has to offer.

00:18:43.300 --> 00:18:48.300
DNS has extensive caching,
DNS is distributed in nature,

00:18:48.500 --> 00:18:52.320
and perhaps most importantly,
DNS is ubiquitous.

00:18:52.480 --> 00:18:55.030
There are servers everywhere.

00:18:55.190 --> 00:18:58.040
Now, getting the information off
the server is pretty easy,

00:18:58.160 --> 00:19:00.790
but how do we get
information to the server?

00:19:00.940 --> 00:19:03.930
How do we publish our services
and register our name?

00:19:04.080 --> 00:19:09.330
After all, DNS was initially made for a
relatively static data set.

00:19:09.520 --> 00:19:12.050
When it did change,
it was usually an administrator actually

00:19:12.420 --> 00:19:14.660
typing in something in a text file.

00:19:14.810 --> 00:19:17.870
Fortunately,
that problem has been solved for

00:19:17.880 --> 00:19:20.440
us as well with Dynamic DNS Update.

00:19:21.560 --> 00:19:24.640
As you probably know,
Dynamic Update allows a client to

00:19:24.730 --> 00:19:27.700
publish resource records into a server.

00:19:27.700 --> 00:19:33.840
And we use this to publish our
globally unique address record.

00:19:33.900 --> 00:19:37.600
And this is one of the more
conventional uses for Dynamic Update.

00:19:37.660 --> 00:19:42.870
In addition, we take our service records,
the records like the pointer record,

00:19:42.980 --> 00:19:46.820
the text record, the SRV record,
that convey information about

00:19:46.820 --> 00:19:51.500
the services that we're offering,
and publish those into the DNS as well.

00:19:53.180 --> 00:19:59.600
Now, we have this distributed
system of databases just

00:19:59.710 --> 00:20:02.440
ready to accept our services.

00:20:02.550 --> 00:20:04.540
Which ones are we going to use?

00:20:04.660 --> 00:20:07.110
Well,
if you manage an enterprise network,

00:20:07.300 --> 00:20:09.240
chances are you might set one up.

00:20:09.320 --> 00:20:10.750
And we've gone ahead and set one up too.

00:20:10.960 --> 00:20:13.710
And it turns out it's pretty big.

00:20:13.840 --> 00:20:18.250
That's right,
.Mac now supports dynamic DNS.

00:20:18.980 --> 00:20:21.920
This is included with
the standard.mac service,

00:20:21.920 --> 00:20:27.600
and each user gets their own name,
user.members.mac.com.

00:20:27.600 --> 00:20:30.790
Within this domain,
they can publish the names of any

00:20:30.790 --> 00:20:34.450
number of machines that they own,
and any number of services

00:20:34.450 --> 00:20:36.400
that they wish to advertise.

00:20:36.400 --> 00:20:40.230
This server was built from the ground
up to support wide area Rendezvous,

00:20:40.420 --> 00:20:44.720
so the software is highly tuned,
and unless you come from Virginia Tech,

00:20:44.800 --> 00:20:47.880
their rack of extras will make you drool.

00:20:47.880 --> 00:20:49.750
But it turns out,
if you're not supporting

00:20:49.750 --> 00:20:53.700
half a million users,
you don't need anything like that.

00:20:53.770 --> 00:20:57.290
In fact, a standard DNS server
will work just fine,

00:20:57.300 --> 00:21:00.940
and that's what we do with
our Tiger server offering.

00:21:00.940 --> 00:21:04.400
We use bind9,
the tried and tested DNS server,

00:21:04.420 --> 00:21:10.610
and include a UI that makes setting
up wide area Rendezvous even easier.

00:21:12.100 --> 00:21:15.950
Now, when we're registering into
these servers and potentially

00:21:16.050 --> 00:21:19.980
across the internet with .Mac,
this of course creates a whole

00:21:19.980 --> 00:21:24.590
new range of possibilities for
the visibility of our services.

00:21:25.250 --> 00:21:29.550
With .Mac,
services are truly globally visible.

00:21:29.960 --> 00:21:32.520
When you publish your
name and your services,

00:21:32.580 --> 00:21:35.750
anyone on the internet can discover them.

00:21:36.440 --> 00:21:39.240
You don't have to set
your network up this way.

00:21:39.310 --> 00:21:41.740
If you are managing
an enterprise network,

00:21:41.810 --> 00:21:43.150
you probably don't even want that.

00:21:43.320 --> 00:21:47.200
You probably want your services
registered securely behind a firewall,

00:21:47.430 --> 00:21:50.440
and DNS offers us that
kind of flexibility.

00:21:50.590 --> 00:21:54.760
Using techniques like split namespaces,
you can do much as you

00:21:54.760 --> 00:21:58.270
do with your website,
having your publicly visible website

00:21:58.270 --> 00:22:03.270
as well as an internal website that's
only visible behind the firewall.

00:22:03.880 --> 00:22:08.380
This brings us to another advantage
of using the domain name system.

00:22:08.470 --> 00:22:11.340
Not only are there so
many technical advantages,

00:22:11.490 --> 00:22:15.920
but we also get this wealth
of administrative expertise.

00:22:16.050 --> 00:22:19.900
There are already thousands of people,
many of them are in this room,

00:22:19.900 --> 00:22:22.050
who know how to set up a DNS server.

00:22:22.170 --> 00:22:23.110
And guess what?

00:22:23.230 --> 00:22:27.410
Now you're also a wide area
Rendezvous administrative expert.

00:22:28.940 --> 00:22:32.020
If you're an administrator deciding
how you're going to set up your

00:22:32.020 --> 00:22:34.960
wide area Rendezvous network,
or you're an application

00:22:34.970 --> 00:22:39.090
developer planning to publish your
services into the dot max system,

00:22:39.090 --> 00:22:43.950
it's worth thinking a bit about
what kind of visibility you want and

00:22:44.030 --> 00:22:46.870
what this visibility means for you.

00:22:47.790 --> 00:22:52.470
Well, let's take the extreme example,
the .Mac example.

00:22:52.670 --> 00:22:58.300
When you publish your services,
anyone can find them from anywhere,

00:22:58.440 --> 00:23:01.500
but that's where it stops, at discovery.

00:23:01.630 --> 00:23:05.110
Once someone discovers the service,
they'll have to connect to your service,

00:23:05.410 --> 00:23:09.990
and it's up to you to have the kind
of access control and security that's

00:23:10.080 --> 00:23:12.780
appropriate for your application.

00:23:13.000 --> 00:23:14.750
So what's the message?

00:23:14.890 --> 00:23:17.000
Secure your apps.

00:23:17.040 --> 00:23:20.580
But as it turns out,
this discovery mechanism doesn't actually

00:23:20.580 --> 00:23:22.900
introduce any new vulnerabilities.

00:23:22.980 --> 00:23:25.730
If a hacker wants to,
if you're providing a service,

00:23:25.870 --> 00:23:29.320
they could find you even
without this kind of discovery.

00:23:29.380 --> 00:23:32.990
What this does is it just makes it
easier for those with legitimate

00:23:33.470 --> 00:23:37.150
reasons to find your services and
be able to interact with them.

00:23:38.040 --> 00:23:43.310
Now, one area that's particularly
challenging in terms of visibility is

00:23:43.440 --> 00:23:46.380
networks that are behind NAT gateways.

00:23:46.770 --> 00:23:50.630
As you might know,
a NAT allows a single public

00:23:50.630 --> 00:23:54.400
IP address to be shared amongst
a number of private addresses.

00:23:54.400 --> 00:23:58.020
For example,
an airport base station plugged

00:23:58.160 --> 00:24:01.160
into a DSL line often acts as a NAT.

00:24:01.510 --> 00:24:04.010
Now,
the NAT detects outbound connections,

00:24:04.250 --> 00:24:07.380
say one of the machines
talking to a web server,

00:24:07.380 --> 00:24:11.480
and it'll change the addresses in
the packets to make them look right,

00:24:11.480 --> 00:24:14.440
and it'll remember this outbound request,
so when a reply comes,

00:24:14.550 --> 00:24:17.510
it'll know which machine behind
the gateway to send it to.

00:24:17.520 --> 00:24:20.800
Unfortunately,
there's no way for the NAT to

00:24:20.800 --> 00:24:25.460
know when a machine behind it
is actually providing a service,

00:24:25.460 --> 00:24:28.780
and there's no way for machines outside
of the gateway to connect to these

00:24:29.150 --> 00:24:31.140
machines with their private addresses.

00:24:31.400 --> 00:24:37.440
Now, the reality of networking today is
that machines are more and more finding

00:24:37.440 --> 00:24:42.200
themselves behind these NAT gateways,
and it's simply not acceptable

00:24:42.330 --> 00:24:45.230
to force them into this cloud
of isolation if they're in this

00:24:45.230 --> 00:24:47.210
kind of a network configuration.

00:24:47.220 --> 00:24:50.960
That's why we've created
a NAT traversal protocol.

00:24:50.960 --> 00:24:56.810
It's a very simple protocol that allows
a machine behind a NAT gateway to learn

00:24:57.160 --> 00:25:02.070
its public IP address and to request
a public port that... It can then

00:25:02.070 --> 00:25:05.840
maintain with a lease life and a refresh,
much like DHCP.

00:25:05.840 --> 00:25:09.730
And this effectively allows
machines behind the NAT gateway

00:25:09.730 --> 00:25:13.530
to be able to accept connections,
incoming connections,

00:25:13.530 --> 00:25:15.700
from outside of that gateway.

00:25:15.700 --> 00:25:16.910
Thank you.

00:25:22.750 --> 00:25:25.190
I'm glad to hear that you're
all enthusiastic about this.

00:25:25.410 --> 00:25:28.200
And of course,
following in the Rendezvous tradition,

00:25:28.380 --> 00:25:31.530
this is an open specification,
which is now available in a

00:25:31.530 --> 00:25:33.830
preliminary form on our websites.

00:25:34.090 --> 00:25:37.970
And if you're interested in
using this in your products,

00:25:37.970 --> 00:25:40.290
by all means, come talk to us.

00:25:40.520 --> 00:25:44.800
Now,
this protocol is highly complementary

00:25:44.800 --> 00:25:48.290
to Wide Area Rendezvous,
but it turns out that the

00:25:48.290 --> 00:25:52.230
Rendezvous stack is also the
ideal place to implement it.

00:25:53.190 --> 00:25:56.540
In Wide Area Rendezvous,
we use the protocol to find

00:25:56.540 --> 00:25:59.970
what our public IP address is,
so that when we register

00:25:59.980 --> 00:26:02.930
our names in the DNS,
we're registering a public address

00:26:03.220 --> 00:26:06.470
that can be reached from anywhere.

00:26:07.220 --> 00:26:11.900
When an application registers a service
using our service registration APIs,

00:26:11.980 --> 00:26:15.600
we'll go ahead and take care
of the NAT mapping for them.

00:26:15.730 --> 00:26:18.190
We'll maintain the
leases and the refreshes,

00:26:18.250 --> 00:26:20.350
and all of this is completely
hidden from the client.

00:26:20.490 --> 00:26:22.600
You don't even have to worry about it.

00:26:22.600 --> 00:26:24.760
Now if for some reason
you don't want this,

00:26:24.760 --> 00:26:28.450
if you don't want a port map for you,
just register your service

00:26:28.450 --> 00:26:31.570
in the local domain only,
and we won't do any kind of

00:26:31.570 --> 00:26:35.600
wide area registration for you,
we won't create any NAT mappings for you,

00:26:35.610 --> 00:26:39.220
but your service will continue
to work on the local network.

00:26:40.390 --> 00:26:44.880
Now,
this protocol gives us huge flexibility

00:26:44.990 --> 00:26:48.640
in terms of the range of visibility.

00:26:48.640 --> 00:26:51.840
And all of a sudden,
we can have a person registering a

00:26:51.840 --> 00:26:56.300
service on one side of the globe and
someone discovering it on the other.

00:26:56.440 --> 00:27:00.530
And as this physical distance increases,
we clearly need some kind

00:27:00.590 --> 00:27:05.000
of authentication mechanism
for publishing our services.

00:27:09.160 --> 00:27:12.480
Take, for instance, the .max service.

00:27:12.490 --> 00:27:15.680
If we had this without any
kind of authentication,

00:27:15.720 --> 00:27:21.440
someone could register something,
say a photo share, in my domain.

00:27:21.470 --> 00:27:24.300
Other people will discover it,
think it's mine,

00:27:24.330 --> 00:27:27.040
and when they resolve it,
they will actually get directed

00:27:27.320 --> 00:27:29.040
to this imposter's machine.

00:27:29.040 --> 00:27:31.720
And who knows,
we might end up finding pictures that

00:27:31.730 --> 00:27:33.980
I just don't want my grandmother to see.

00:27:35.090 --> 00:27:37.270
Fortunately,
DNS standards provide us with

00:27:37.270 --> 00:27:38.860
an easy solution for this.

00:27:38.860 --> 00:27:42.480
We use the Transaction
Signature Resource Record,

00:27:42.580 --> 00:27:43.660
also known as a T-SIG.

00:27:43.660 --> 00:27:47.940
And what this is, is a cryptographic hash
of the dynamic update,

00:27:47.940 --> 00:27:52.110
which includes all of the messages,
pardon me, all of the records and the

00:27:52.120 --> 00:27:55.980
services that we'll be publishing,
as well as a shared secret known

00:27:55.980 --> 00:27:58.080
by my machine and the server.

00:27:58.080 --> 00:28:01.930
And this effectively allows the
server to determine that I do,

00:28:01.940 --> 00:28:04.860
in fact, have the authorization
to publish the data.

00:28:04.960 --> 00:28:08.100
publish records in a given domain.

00:28:08.400 --> 00:28:11.930
Now, all of this is available
with Wide Area Rendezvous,

00:28:11.930 --> 00:28:15.090
and in the .Mac case,
it just works seamlessly.

00:28:15.220 --> 00:28:18.980
But it's not required
as part of the protocol.

00:28:19.060 --> 00:28:22.220
If you're setting an open network
that's behind a firewall with a

00:28:22.220 --> 00:28:25.420
relatively small number of users,
you might decide that you

00:28:25.420 --> 00:28:27.820
don't even need authentication.

00:28:27.900 --> 00:28:30.620
You got by with AppleTalk for
years without it,

00:28:30.620 --> 00:28:32.520
and you trust your employees.

00:28:32.610 --> 00:28:33.960
You don't have to have it.

00:28:34.020 --> 00:28:36.520
You have that kind of flexibility.

00:28:37.220 --> 00:28:39.400
Now,
looking at all these different pieces,

00:28:39.520 --> 00:28:44.900
the authentication, the NAT traversal,
the dynamic updates, the queries,

00:28:45.070 --> 00:28:48.230
we get a more detailed architecture.

00:28:49.050 --> 00:28:52.590
of the Wide Area Rendezvous system.

00:28:52.590 --> 00:28:54.880
And what this really is, is

00:28:55.040 --> 00:29:00.170
A novel combination of existing
technologies in a way that provides a

00:29:00.170 --> 00:29:04.210
very valuable and powerful experience.

00:29:04.780 --> 00:29:08.580
But if you look at this long enough,
and believe me we did,

00:29:08.640 --> 00:29:11.440
eventually you'll find some holes.

00:29:11.520 --> 00:29:14.550
Let's look under the discovery side.

00:29:18.220 --> 00:29:20.350
With local Rendezvous,
we have this notion

00:29:20.710 --> 00:29:22.690
of a long-lived query.

00:29:22.830 --> 00:29:28.060
When we start a browse, say in iChat,
you get all the answers that

00:29:28.070 --> 00:29:32.100
are available on the network,
and your list immediately populates.

00:29:32.290 --> 00:29:35.860
But this browse, this query,
maintains for the length of

00:29:35.860 --> 00:29:38.100
time you have that window open.

00:29:38.100 --> 00:29:42.280
So as new services become available,
or old services go away,

00:29:42.940 --> 00:29:46.100
your list is updated.

00:29:46.100 --> 00:29:48.790
So, the Rendezvous is live, it's snappy,
and it provides that great

00:29:48.790 --> 00:29:50.100
experience that we all like.

00:29:50.100 --> 00:29:55.150
Unfortunately,
there's no equivalent with unicast DNS.

00:29:56.110 --> 00:29:58.250
We have a couple options here.

00:29:58.540 --> 00:30:02.380
We could deal with stale data,
we could maybe add a refresh

00:30:02.380 --> 00:30:05.080
button to your application,
and if you've ever heard

00:30:05.080 --> 00:30:07.160
Stuart talk before,
you know you're more likely to see

00:30:07.270 --> 00:30:09.600
a pig fly out of your PowerBook.

00:30:09.700 --> 00:30:15.000
Or we could pull the server very rapidly
and find out about changes that way.

00:30:15.210 --> 00:30:17.860
Now,
that would make us fall back into the

00:30:17.980 --> 00:30:22.100
chattiness that plagued AppleTalk,
and it would completely preclude

00:30:22.100 --> 00:30:27.300
this kind of scalability that we need
for a half a million users in .Mac.

00:30:27.730 --> 00:30:31.490
So it looks like the
DNS standards got us pretty close,

00:30:31.490 --> 00:30:35.470
but they stopped a little bit short of
giving us the solution that we need.

00:30:36.400 --> 00:30:39.710
As it turns out,
DNS actually comes through by

00:30:39.710 --> 00:30:42.010
offering its own extension mechanism.

00:30:42.280 --> 00:30:46.400
This is called EDNS0,
and it's a standard way of enhancing

00:30:46.400 --> 00:30:52.130
the DNS protocol to provide new
functionality as it becomes necessary.

00:30:52.250 --> 00:30:57.740
We use this extension mechanism
to create long-lived queries.

00:30:57.870 --> 00:31:01.980
This is a special kind of query
where we ask the server to give us

00:31:02.060 --> 00:31:06.270
all of the answers that it knows,
and then to continue to tell us

00:31:06.410 --> 00:31:09.810
as new answers become available,
or answers that it previously

00:31:09.920 --> 00:31:11.520
gave us become invalid.

00:31:11.590 --> 00:31:15.330
This provides the same kind
of browsing experience that

00:31:15.330 --> 00:31:19.180
we have on the local network,
while still being high

00:31:19.280 --> 00:31:20.290
performance and highly scalable.

00:31:20.830 --> 00:31:24.540
Similarly, on the registration side,
we've got a piece missing

00:31:24.540 --> 00:31:26.130
under dynamic update.

00:31:26.760 --> 00:31:29.050
With Dynamic Update,
we publish a resource

00:31:29.130 --> 00:31:31.420
record into the database,
and it stays there

00:31:31.420 --> 00:31:33.300
until we deregister it.

00:31:33.450 --> 00:31:37.430
Which works fine some of the time,
but imagine I plug my laptop

00:31:37.530 --> 00:31:41.690
into the Ethernet jack,
and I register a bunch of services,

00:31:41.800 --> 00:31:43.540
and then I unplug the cable.

00:31:43.770 --> 00:31:44.820
Well, guess what?

00:31:44.890 --> 00:31:48.520
Those services stay up there on the DNS,
even though my machine

00:31:48.600 --> 00:31:51.970
is no longer reachable,
and they'll stay there indefinitely.

00:31:52.790 --> 00:31:55.520
For this problem, we end up with the same
stale data problem,

00:31:55.520 --> 00:32:00.690
and we address this too with
the EDNS0 extension mechanism.

00:32:01.190 --> 00:32:05.580
We add a lease life to resource
records so that we tell the server

00:32:05.670 --> 00:32:08.730
to publish them and hold them
for a certain amount of time,

00:32:08.730 --> 00:32:11.680
which we can periodically
refresh if we need to.

00:32:11.830 --> 00:32:15.100
And then if the machine becomes
disconnected from the network or

00:32:15.130 --> 00:32:18.860
the power goes out or what have you,
before too long the server will realize

00:32:18.980 --> 00:32:22.090
that the machine isn't there anymore,
the lease has expired,

00:32:22.130 --> 00:32:27.080
and it will actually go ahead and
remove those records from its database.

00:32:27.820 --> 00:32:32.170
Now, these extensions are done with
DNS's native extension mechanism,

00:32:32.240 --> 00:32:36.190
but they clearly require some kind
of modification to the server.

00:32:36.340 --> 00:32:39.790
And there are a couple ways
we can make this happen.

00:32:41.280 --> 00:32:44.020
In the .max servers,
because they were designed

00:32:44.170 --> 00:32:48.600
specifically for wide area Rendezvous,
these extensions are supported natively.

00:32:48.720 --> 00:32:53.220
It can do long-lived queries and
it can handle lease lives just

00:32:53.320 --> 00:32:57.510
like it can standard queries
and standard dynamic updates.

00:32:57.790 --> 00:33:01.000
But we design these extensions so
that they can also be implemented

00:33:01.000 --> 00:33:07.380
as a side process running next to
a stock unmodified name server.

00:33:07.480 --> 00:33:09.510
This is what we do with
our Tiger offering.

00:33:09.620 --> 00:33:13.680
We use bind9, which is tried and tested
and it works great.

00:33:13.790 --> 00:33:15.860
And next to it,
we will have a process that

00:33:16.200 --> 00:33:20.660
understands the long-lived queries,
understands the lease lives,

00:33:20.760 --> 00:33:26.810
and essentially acts as a broker
between the clients and the servers.

00:33:27.220 --> 00:33:31.560
And specifications,
preliminary specifications for these

00:33:31.710 --> 00:33:35.220
extensions are posted on the website,
and you're welcome to take a look

00:33:35.220 --> 00:33:39.640
at them and implement them in
your servers if you so choose.

00:33:44.030 --> 00:33:49.510
Looking at implementation,
it's worth taking a look at what kind

00:33:49.520 --> 00:33:53.510
of application implementation and
what kind of application changes need

00:33:53.570 --> 00:33:55.670
to be made to take advantage of this.

00:33:59.760 --> 00:34:02.500
In our discovery APIs,
you might have wondered why

00:34:02.500 --> 00:34:04.980
we have this domain parameter.

00:34:05.040 --> 00:34:08.240
After all, it's always just been local.

00:34:08.300 --> 00:34:10.730
Well, now you see why.

00:34:10.730 --> 00:34:13.250
In fact,
we've encouraged you as developers

00:34:13.770 --> 00:34:18.070
to not explicitly specify a domain
when you make your registration calls

00:34:18.120 --> 00:34:19.920
and when you make your browse calls.

00:34:19.980 --> 00:34:23.140
Just pass the empty string and
let us pick something for you.

00:34:23.200 --> 00:34:25.820
And up until now,
that's always just been local.

00:34:25.900 --> 00:34:29.920
But now that we have this new capability,
we can make intelligent choices

00:34:30.070 --> 00:34:33.280
for you about where to browse
and where to publish services.

00:34:33.470 --> 00:34:37.360
For example,
a default browser registration call

00:34:37.360 --> 00:34:42.800
might take place both on the local
network and in a user's .mac domain.

00:34:42.810 --> 00:34:46.020
Now, of course,
if you have explicit needs, by all means,

00:34:46.020 --> 00:34:47.860
pass an explicit domain.

00:34:47.870 --> 00:34:52.060
If your service really only makes sense
in the context of the local network,

00:34:52.070 --> 00:34:54.020
then just pass local.

00:34:54.040 --> 00:34:58.650
Likewise, if you want to be looking in a
specific .mac member's domain,

00:34:58.780 --> 00:35:02.460
perhaps for some kind of a
collaborative application or a game,

00:35:02.490 --> 00:35:03.220
then just pass that domain.

00:35:03.290 --> 00:35:05.350
that member's domain.

00:35:06.250 --> 00:35:09.290
If you want to,
we have calls that will provide

00:35:09.290 --> 00:35:13.300
a list of available domains that
you can browse and register in,

00:35:13.400 --> 00:35:17.960
and you can actually let your client
pick one in a graphical user interface.

00:35:18.030 --> 00:35:20.860
These enumeration calls have
been around all the time,

00:35:20.880 --> 00:35:24.000
and up until now they've
only returned local,

00:35:24.050 --> 00:35:30.140
but now they'll return local as
well as one or more .mac domains,

00:35:30.140 --> 00:35:34.610
and possibly even other domains that we
learn about from our network environment.

00:35:35.990 --> 00:35:38.740
Enough of hearing me talk,
let's take a look at how some

00:35:38.740 --> 00:35:40.440
real applications use this stuff.

00:35:40.500 --> 00:35:43.570
Can we go to the demo, please?

00:35:54.900 --> 00:35:58.780
Are we-- demo three?

00:35:59.230 --> 00:35:59.720
Thank you.

00:35:59.720 --> 00:36:05.260
Here we have a tiger machine.

00:36:12.190 --> 00:36:14.300
Here we have a Tiger machine.

00:36:14.350 --> 00:36:17.180
And as you can see,
I'm in the .mac prefs pane,

00:36:17.240 --> 00:36:19.800
and there's this new tab called Domains.

00:36:19.860 --> 00:36:24.770
This allows us to turn
on the .mac DNS service.

00:36:25.470 --> 00:36:29.000
I've checked it on here and you
can see the name of my computer:

00:36:29.280 --> 00:36:32.400
portable.kiren.members.mac.com.

00:36:32.400 --> 00:36:37.470
kiren.members.mac.com is my personal
domain where I can register in,

00:36:37.530 --> 00:36:41.400
and portable is the name of this machine
that I've set in our sharing prefs pane.

00:36:41.400 --> 00:36:45.670
Now this is a standard DNS name,
you can use it in the connect to dialog,

00:36:45.670 --> 00:36:49.710
you can use it in the terminal,
anything that takes a DNS name.

00:36:50.940 --> 00:36:54.370
We can also use Rendezvous for browsing,
of course.

00:36:54.500 --> 00:36:57.320
We don't have to use
this name explicitly.

00:36:58.090 --> 00:37:01.810
We can take a look at
Safari in the Rendezvous tab,

00:37:01.810 --> 00:37:04.900
and sure enough,
I'm actually not seeing anything,

00:37:04.900 --> 00:37:08.420
I'm not seeing any
Rendezvous shares here.

00:37:08.420 --> 00:37:11.500
Let's see if we can't figure
out why that's happening.

00:37:13.440 --> 00:37:16.390
I have a machine at home and I want
to be able to see its website

00:37:16.400 --> 00:37:19.560
and I thought it was publishing
into .Mac and I know I have

00:37:19.560 --> 00:37:21.960
Apple Remote Desktop turned on there.

00:37:21.960 --> 00:37:26.190
So let's see if I can't actually get
into it and see what's happening.

00:37:26.630 --> 00:37:30.700
Now, here too I could enter the
name of my home machine,

00:37:30.700 --> 00:37:33.210
but I don't have to.

00:37:33.750 --> 00:37:38.500
Here we have an unmodified application,
Apple Remote Desktop,

00:37:38.560 --> 00:37:42.480
that does Rendezvous browsing and
doesn't specify an explicit domain.

00:37:42.640 --> 00:37:48.000
So the system goes ahead and publishes
both locally and in my .map domain.

00:37:48.000 --> 00:37:52.620
And here we can see my desktop
machine with its IP address here,

00:37:52.620 --> 00:37:54.500
which is not on our local network.

00:37:54.900 --> 00:37:58.490
And I can go ahead and add it.

00:38:00.280 --> 00:38:04.210
And here we see the difference
between discovery and actual access.

00:38:04.550 --> 00:38:07.040
Anyone can discover that
I have Apple Remote Desktop,

00:38:07.040 --> 00:38:10.200
but you still need the correct
authorization to access the machine.

00:38:10.200 --> 00:38:15.490
And now I can connect to it.

00:38:21.450 --> 00:38:25.730
Here too we can see that
I have .mac turned on,

00:38:25.740 --> 00:38:28.370
.mac domains turned on,
and that's why I was able to see it

00:38:28.510 --> 00:38:30.670
from here in the conference room.

00:38:31.070 --> 00:38:37.600
And you can see its name, desktop,
in my same personal domain.

00:38:37.710 --> 00:38:42.030
Now, let's take a look at why
web sharing wasn't working.

00:38:44.130 --> 00:38:45.110
Well, that would explain it.

00:38:45.240 --> 00:38:47.690
It's not turned on.

00:38:47.840 --> 00:38:51.360
So we can look back in
our Safari browser here,

00:38:51.360 --> 00:38:55.140
and Safari has a long-lived query
established with the server,

00:38:55.310 --> 00:38:57.440
which means that it's
asked for all the answers,

00:38:57.610 --> 00:39:01.300
and in fact there weren't any,
but the server will continue to

00:39:01.300 --> 00:39:03.550
tell it as new answers come about.

00:39:04.680 --> 00:39:09.720
So, if I go ahead and turn
on web sharing here,

00:39:09.720 --> 00:39:14.070
it'll fire up Apache,
register my services both on my local

00:39:14.090 --> 00:39:17.680
network at home and in my .Mac domain.

00:39:17.750 --> 00:39:19.940
Go ahead and turn it on.

00:39:20.010 --> 00:39:22.550
It takes a few seconds
for Safari to launch,

00:39:22.550 --> 00:39:23.670
and there it is.

00:39:31.590 --> 00:39:34.890
It's amazing to think about how
many things have to happen there.

00:39:35.020 --> 00:39:38.390
The registration has to send
the records to the DNS server.

00:39:38.610 --> 00:39:42.880
The DNS has to notice this change and
send the notification to my machine here.

00:39:43.280 --> 00:39:47.180
And it's still just as snappy
as it is on the local network.

00:39:47.410 --> 00:39:50.820
You can see it disappear and reappear.

00:39:51.270 --> 00:39:55.590
It actually takes longer for
Apache to fire up than it does for

00:39:55.590 --> 00:39:57.970
the registration to take place.

00:39:58.710 --> 00:40:01.640
And we can go ahead and double
click on it and resolve the

00:40:01.780 --> 00:40:06.600
service to the IP address and
the port of my machine back home.

00:40:07.010 --> 00:40:10.830
And there you can see the web page
that's running on my desktop computer.

00:40:11.000 --> 00:40:16.310
Now, I like this WIP web page and I think
I'm actually going to print out a copy.

00:40:16.570 --> 00:40:18.670
Let's see.

00:40:19.160 --> 00:40:21.530
I don't see any printers
here on the network.

00:40:21.650 --> 00:40:25.120
Let's see if I can add one.

00:40:25.390 --> 00:40:27.900
Go ahead and add.

00:40:28.150 --> 00:40:30.850
Oh, what's that?

00:40:37.480 --> 00:40:40.590
Because the printer sharing
is also doing the same default

00:40:40.670 --> 00:40:43.390
browsers and registrations,
it's able to look in my .mac

00:40:43.520 --> 00:40:47.420
domain and see this printer
that's registered at home and

00:40:47.460 --> 00:40:50.560
actually go ahead and print to it.

00:40:50.740 --> 00:40:54.350
So, can we go back to the slides, please?

00:40:56.000 --> 00:41:02.800
Seeing this work in real applications
allows us to look at this architecture

00:41:03.490 --> 00:41:06.950
and say that it really is a solid
architecture that makes great

00:41:06.950 --> 00:41:12.940
use of existing technologies and
provides a really powerful technology

00:41:13.100 --> 00:41:15.660
for all of you guys to leverage.

00:41:16.500 --> 00:41:19.330
At the end of the day,
most of the stuff is really

00:41:19.420 --> 00:41:21.490
just implementation details.

00:41:21.600 --> 00:41:26.500
What this is, is really fundamentally
DNS service discovery.

00:41:26.630 --> 00:41:29.160
It's the message format
that we've had before.

00:41:29.190 --> 00:41:33.190
It's the same APIs that you guys
already have in your applications.

00:41:33.330 --> 00:41:36.580
And most importantly,
it's the same user experience

00:41:36.620 --> 00:41:41.480
that all of us and all of our
customers have come to love.

00:41:41.720 --> 00:41:45.350
I'm really excited about this
technology and I'm even more excited

00:41:45.350 --> 00:41:48.050
to see what you guys do with it.

00:41:48.110 --> 00:41:51.680
But this is really just a part of
what's new in Rendezvous for Tiger.

00:41:51.680 --> 00:41:54.940
So with that, I'd like to turn it
back to Stuart Cheishir.

00:42:04.010 --> 00:42:12.600
Thank you Kiren.

00:42:12.760 --> 00:42:16.140
So, next big announcement,
which I think will make a

00:42:16.140 --> 00:42:20.100
lot of people very happy,
is Rendezvous on Windows.

00:42:20.100 --> 00:42:21.750
So what's there?

00:42:21.720 --> 00:42:25.420
We have a system service daemon
running in the background,

00:42:25.420 --> 00:42:27.980
just like on OS X.

00:42:27.980 --> 00:42:31.390
We have a client DLL that
clients link with in order to

00:42:31.660 --> 00:42:35.680
communicate with that daemon,
and we have Java support

00:42:35.680 --> 00:42:37.690
as well for Java clients.

00:42:38.050 --> 00:42:43.490
In the developer preview that we have
on the developer.apple.com web page,

00:42:43.490 --> 00:42:47.170
we have a couple of sample clients
to illustrate how you can use this.

00:42:47.270 --> 00:42:51.640
One is a plugin for
Internet Explorer that gives you

00:42:51.640 --> 00:42:55.780
a Rendezvous icon in the toolbar,
very much like in Safari where you can

00:42:55.780 --> 00:42:57.700
browse to find Rendezvous services.

00:42:57.760 --> 00:43:02.250
We also have a printer setup wizard to
illustrate how you can find printers

00:43:02.580 --> 00:43:05.200
and set them up effortlessly in Windows.

00:43:05.240 --> 00:43:09.660
But of course the big news here
is we have the header file and the

00:43:09.850 --> 00:43:14.400
stub library for all you developers
to link with your applications,

00:43:14.540 --> 00:43:18.530
so you can advertise services and
add Rendezvous menus and Rendezvous

00:43:18.530 --> 00:43:21.130
browsers in your application software.

00:43:21.820 --> 00:43:24.800
You can get it today from
the developers.apple.com

00:43:24.800 --> 00:43:28.300
website in macos10/rendezvous.

00:43:28.370 --> 00:43:31.210
And if you'd like to
license this installer,

00:43:31.210 --> 00:43:34.960
like maybe the way some of you license
the QuickTime for Windows installer,

00:43:34.960 --> 00:43:38.530
then send us an email and let us know.

00:43:40.310 --> 00:43:45.290
So now I'm going to
show you a quick demo.

00:43:45.970 --> 00:43:46.400
And we will need--

00:43:55.780 --> 00:43:59.300
We need this demo machine,
the VGA connection, please.

00:43:59.320 --> 00:44:02.220
All right.

00:44:03.400 --> 00:44:08.330
Let's run Internet Explorer and
see what we see.

00:44:08.330 --> 00:44:09.670
Oh, that was quick.

00:44:09.670 --> 00:44:12.670
We have...

00:44:12.960 --> 00:44:16.140
We have one of these Axis
cameras on the network.

00:44:16.200 --> 00:44:18.400
This runs Linux.

00:44:18.420 --> 00:44:20.780
Axis is the world's leading
maker of network cameras,

00:44:20.860 --> 00:44:23.320
and they've now decided
to adopt Rendezvous.

00:44:23.450 --> 00:44:27.090
We have one of Axis's print servers here,
plugs in the parallel port,

00:44:27.090 --> 00:44:31.240
turns your printer
into a network printer.

00:44:31.370 --> 00:44:31.630
What else?

00:44:31.730 --> 00:44:36.300
We have this little printer
thing from Intercon.

00:44:36.390 --> 00:44:38.800
Let's try connecting to that.

00:44:38.850 --> 00:44:44.800
And a lot of these devices in the
past would have had a serial port

00:44:44.890 --> 00:44:48.880
that you plug a terminal into and
you configure it in a VT100 terminal,

00:44:48.880 --> 00:44:52.310
and that's very '70s.

00:44:53.840 --> 00:44:58.600
But the serial port and the VT100
terminal was kind of the universal

00:44:58.600 --> 00:45:00.650
user interface of the 1970s.

00:45:00.650 --> 00:45:04.280
And the universal user interface
of this decade is the web browser.

00:45:04.280 --> 00:45:08.160
So a lot of these devices that don't
have any screen or keyboard are

00:45:08.160 --> 00:45:12.360
configured through the web browser,
which is great if you can find it.

00:45:12.440 --> 00:45:14.910
And of course,
Rendezvous gives you the answer,

00:45:14.920 --> 00:45:18.880
so we can find all of these things and
they show up just like they do in Safari.

00:45:20.030 --> 00:45:24.070
But the thing that I'm sure you'll
all want to see if you've ever tried

00:45:24.070 --> 00:45:27.330
to use a network printer is this.

00:45:27.780 --> 00:45:30.680
So let's see what we have on the network.

00:45:30.690 --> 00:45:33.160
We'll click Next.

00:45:33.190 --> 00:45:35.850
There's an HP LaserJet
somewhere in this building,

00:45:35.950 --> 00:45:37.240
not mine.

00:45:37.270 --> 00:45:42.610
But we have the SEH Intercom print server
plugged into this old Epson printer here.

00:45:43.700 --> 00:45:48.300
and it recognizes that
it's a Stylus Color 740,

00:45:48.300 --> 00:45:51.710
and now we're ready to set up a printer.

00:45:51.840 --> 00:45:55.480
I actually wanted them not to have
all these next and back buttons.

00:45:55.610 --> 00:46:02.280
I just want one button here that says,
"I'm feeling lucky."

00:46:07.830 --> 00:46:09.690
So that was it.

00:46:09.990 --> 00:46:13.240
Effortless setting up
of Windows printing.

00:46:13.420 --> 00:46:18.890
So on that note,
let's go back to the slides, please.

00:46:22.360 --> 00:46:26.120
So as well as Windows,
we also have support

00:46:26.250 --> 00:46:29.170
for the Unix platforms,
for Linux, FreeBSD, Solaris.

00:46:29.260 --> 00:46:31.110
Same story.

00:46:31.110 --> 00:46:34.520
There's a background daemon,
there are system scripts to

00:46:34.520 --> 00:46:37.790
start it up at boot time,
there's a shared library

00:46:37.830 --> 00:46:41.590
for clients to link to,
and there's the same header

00:46:41.590 --> 00:46:45.170
file as Mac and Windows,
and there's the same Java support,

00:46:45.170 --> 00:46:48.010
so the same Java applications
will run unchanged.

00:46:48.590 --> 00:46:51.070
We don't have an
installer on the website,

00:46:51.270 --> 00:46:54.540
but that's available in Darwin,
and if you check out the

00:46:54.540 --> 00:46:58.500
top-of-tree Darwin code and run
make install in the POSIX folder,

00:46:58.500 --> 00:47:01.260
it will install those five or
six files where they need to go.

00:47:01.260 --> 00:47:03.770
So let me show you a quick demo of that.

00:47:03.830 --> 00:47:05.410
Let's go back to the VGA feed, please.

00:47:21.680 --> 00:47:25.380
So if you've looked in the
Darwin project in the clients folder,

00:47:25.450 --> 00:47:29.230
we have a sample command line
client to exercise all of the DNS,

00:47:29.280 --> 00:47:30.340
SD, APIs.

00:47:30.460 --> 00:47:33.540
You can browse, you can register,
you can resolve.

00:47:33.540 --> 00:47:36.840
It's about 400 lines of C,
and it's a big switch statement

00:47:36.860 --> 00:47:38.890
that does all the different calls.

00:47:38.900 --> 00:47:42.900
So if you're using Rendezvous,
then that's a good place to start,

00:47:42.900 --> 00:47:45.790
to just copy and paste the little
chunk of code that you need.

00:47:45.870 --> 00:47:50.120
And of course, it compiles and runs
on Linux just the same.

00:47:50.240 --> 00:47:56.220
And I'm going to show just a simple,
let's browse for HTTP.

00:47:56.970 --> 00:48:00.360
Any advertised HTTP servers,
and then we see the same things that

00:48:00.360 --> 00:48:03.400
showed up in Explorer and in Safari.

00:48:03.400 --> 00:48:07.900
And if we look for things that
are offering IPP printing service,

00:48:08.030 --> 00:48:09.640
we will see those two show up.

00:48:09.780 --> 00:48:13.620
So, the same APIs there,
and we're really excited talking

00:48:13.620 --> 00:48:17.860
to the people who make web browsers
and other software that runs on

00:48:17.960 --> 00:48:22.430
Linux to start adding these calls
into their applications so that they

00:48:22.430 --> 00:48:24.990
can have Rendezvous menus as well.

00:48:26.110 --> 00:48:28.700
Okay, back to the slides.

00:48:32.270 --> 00:48:35.680
And with that,
I would like to invite Roger Panthos

00:48:35.760 --> 00:48:40.260
to come up on stage and tell you all
about using Rendezvous from Java.

00:48:46.840 --> 00:48:48.710
Thank you, Stuart.

00:48:48.950 --> 00:48:52.600
So my name is Roger Panthos,
and I work with Stuart and

00:48:52.710 --> 00:48:54.020
Kiren at Apple on Rendezvous.

00:48:54.020 --> 00:48:58.260
And what I'd like to do today is
spend about 10 minutes telling

00:48:58.260 --> 00:49:02.940
you about the Rendezvous interface
that we've built for Java.

00:49:04.520 --> 00:49:07.950
So from the point of view of a
Java applications programmer,

00:49:07.950 --> 00:49:11.760
the most interesting,
kind of the most fun thing

00:49:11.760 --> 00:49:12.960
to do is service discovery.

00:49:12.960 --> 00:49:17.390
And so that's what the work
we've done kind of centers on.

00:49:17.400 --> 00:49:21.560
What it consists of is a new API,
a new set of classes for

00:49:21.560 --> 00:49:26.650
Java that gives you access to the
complete set of service discovery

00:49:26.650 --> 00:49:29.830
facilities that Rendezvous offers.

00:49:29.840 --> 00:49:34.500
What that gives you is complete access
to the entire service discovery system.

00:49:34.590 --> 00:49:37.980
And that's linked to the system
implementation of Rendezvous,

00:49:37.980 --> 00:49:40.640
which means this is a
system-level implementation.

00:49:40.640 --> 00:49:46.280
This is not running in your Java program
as in previous zero-conf implementations.

00:49:46.340 --> 00:49:50.610
So it means you get the benefit of the
system-wide resource record caching.

00:49:50.640 --> 00:49:55.540
It means you get the performance
that every other client gets.

00:49:55.540 --> 00:49:59.160
It means you get the benefit of
all the additional work we've

00:49:59.160 --> 00:50:03.840
done in our reference server on
things like duplicate suppression,

00:50:04.520 --> 00:50:11.300
the efficiency,
and all the bug fixes we've made to MDNS.

00:50:11.590 --> 00:50:16.690
Now, the Java support is also built in
to our reference implementation.

00:50:16.700 --> 00:50:21.090
When you build it on Windows or on
Mac OS X or on Linux or on FreeBSD,

00:50:21.090 --> 00:50:24.100
you get the Java support as well.

00:50:24.100 --> 00:50:26.850
And when we deliver
Rendezvous on a platform,

00:50:26.850 --> 00:50:28.790
we deliver the Java support.

00:50:28.930 --> 00:50:33.530
And so our intent is that if you have
Rendezvous on your platform at all,

00:50:33.530 --> 00:50:37.180
and you have a Java VM,
then a Java application can

00:50:37.180 --> 00:50:41.060
run on your platform and it
can use the Rendezvous APIs.

00:50:41.060 --> 00:50:44.770
So let's talk about the Rendezvous
APIs a little more closely.

00:50:45.500 --> 00:54:11.100
[Transcript missing]

00:54:11.380 --> 00:54:15.440
So the first thing that my little
Browse for Printers does is it

00:54:15.440 --> 00:54:20.640
sends a message to my factory class,
DNSSD, sends it a browse message,

00:54:20.640 --> 00:54:23.340
and it's sending it _IPP,
look for printers.

00:54:23.380 --> 00:54:26.740
It's also passing it
a reference to itself,

00:54:26.810 --> 00:54:31.070
because it implements the
browse listener interface.

00:54:32.100 --> 00:54:36.000
One of the methods that the
BrowseListener interface

00:54:36.000 --> 00:54:39.500
defines is service found.

00:54:39.500 --> 00:54:43.100
You can see what's going to happen
here is it's going to ask Rendezvous

00:54:43.100 --> 00:54:44.100
to go find all the printers.

00:54:44.100 --> 00:54:47.270
Rendezvous will do that,
and then it's going to call this

00:54:47.270 --> 00:54:49.600
implementation back with the results.

00:54:49.710 --> 00:54:51.450
In this case,
all it's doing is printing out the

00:54:51.450 --> 00:54:52.840
results it finds in the console.

00:54:53.840 --> 00:54:57.600
But that, in a nutshell,
is Rendezvous programming in Java.

00:54:57.610 --> 00:54:58.670
This is browsing.

00:54:58.670 --> 00:55:01.140
Once we find something,
we want to register it,

00:55:01.250 --> 00:55:02.760
or rather we want to resolve it.

00:55:03.190 --> 00:55:05.920
And so resolution is
the same kind of deal.

00:55:05.920 --> 00:55:08.080
We've got an interface,
which is a resolved listener.

00:55:08.080 --> 00:55:10.580
It defines a callback,
which is service resolved.

00:55:10.580 --> 00:55:15.420
And so you send a message to the DNSSD,
and it gets resolved.

00:55:16.030 --> 00:55:18.310
Registering service, again, very similar.

00:55:18.880 --> 00:55:28.170
You send the DNSSD a register message,
I guess, with it saying, "Hey,

00:55:28.170 --> 00:55:30.160
I want to register a
website that's called me.

00:55:30.170 --> 00:55:31.840
It's an HTTP thing.

00:55:31.850 --> 00:55:35.290
We're going to pass it to this
reference." We implement the

00:55:35.290 --> 00:55:39.340
register listener callback,
and we get called back once

00:55:39.440 --> 00:55:41.920
the registration is complete.

00:55:42.440 --> 00:55:46.080
So we could spend some more
time talking about the API,

00:55:46.080 --> 00:55:48.760
but I thought it might
be cool to have a demo.

00:55:49.080 --> 00:55:54.370
So let's go over to
demo two here on screen.

00:55:54.650 --> 00:55:56.730
And here it is.

00:55:56.830 --> 00:56:00.800
We can, let's hide this guy.

00:56:05.210 --> 00:56:07.200
Not yet, but pretty soon.

00:56:07.220 --> 00:56:12.940
Okay, so I guess when you're bringing
up a Rendezvous on a new

00:56:12.940 --> 00:56:14.860
platform for the first time,
it's kind of traditional

00:56:14.860 --> 00:56:20.710
to create a browser.

00:56:20.710 --> 00:56:23.540
And you can see Stuart,
we've got the browser from Cocoa here.

00:56:23.540 --> 00:56:26.380
I wrote a little browser in Java as well.

00:56:26.380 --> 00:56:27.990
And so here's my Java app.

00:56:27.990 --> 00:56:30.260
It's a couple of pages of swing code.

00:56:30.260 --> 00:56:34.660
And you can see it's looking in the,
I just lost my mouse.

00:56:35.120 --> 00:56:36.520
I

00:56:39.400 --> 00:56:42.840
Maybe we're... There we go.

00:56:43.250 --> 00:56:45.030
Okay, we're good.

00:56:45.110 --> 00:56:49.220
So it's looking in the local domain here,
and it's found a number of different

00:56:49.240 --> 00:56:50.880
services that are being advertised.

00:56:50.880 --> 00:56:54.580
So you can see we've got
a Java application here.

00:56:54.580 --> 00:56:55.840
It's using Rendezvous.

00:56:56.000 --> 00:56:58.530
It's finding all kinds
of different services.

00:56:59.250 --> 00:57:01.140
So that's kind of interesting.

00:57:01.360 --> 00:57:04.460
But then we decided to
have a little more fun.

00:57:04.460 --> 00:57:07.270
And so what I built was
kind of the world's simplest

00:57:07.440 --> 00:57:08.500
peer-to-peer chat program.

00:57:08.500 --> 00:57:09.840
That's called Simple Chat.

00:57:09.840 --> 00:57:12.270
And so I'm going to run it here.

00:57:12.270 --> 00:57:17.720
And what you can see is going on is
that we've got this pop-up menu here.

00:57:17.720 --> 00:57:19.910
And right now,
it only sees a single thing,

00:57:20.010 --> 00:57:20.910
which is itself.

00:57:21.520 --> 00:57:27.500
But if I could get Stuart to
double-click on the Windows machine here,

00:57:27.500 --> 00:57:31.290
I'm going to... We've got a
whole bunch of machines up here.

00:57:31.330 --> 00:57:35.200
But if we can get Stuart to
run Simple Chat on Windows,

00:57:35.200 --> 00:57:38.800
Stuart is actually...
His name is also Tim.

00:57:38.800 --> 00:57:39.640
It's kind of his nickname.

00:57:39.640 --> 00:57:45.190
And so he's typing away in there, and...

00:57:47.220 --> 00:57:55.830
We borrowed Tim's PC,
and I can send him a message in theory.

00:58:05.850 --> 00:58:10.190
And if we want to switch over to the
VGA feed for a second on demo three,

00:58:10.410 --> 00:58:15.970
we can see it running on--

00:58:16.800 --> 00:58:17.800
on Linux machine.

00:58:17.800 --> 00:58:23.400
And we can see it running under Windows,
I hope.

00:58:23.420 --> 00:58:24.100
There it is.

00:58:24.100 --> 00:58:28.120
So, that's

00:58:29.190 --> 00:58:34.420
So if we could switch back to
demo two just for one more second.

00:58:34.510 --> 00:58:36.590
Simple Chat is actually,
it's really small.

00:58:36.600 --> 00:58:38.300
It's only like four pages of code.

00:58:38.300 --> 00:58:43.300
But it's nice in that it illustrates
three major aspects of using Rendezvous.

00:58:43.300 --> 00:58:44.970
First of all, registration.

00:58:44.980 --> 00:58:47.750
When you run simple text,
it registers itself on a network

00:58:47.770 --> 00:58:50.860
as an instance of simple,
I think, underscore P2P chat.

00:58:51.080 --> 00:58:54.260
The next thing it does is it
wants to populate this menu

00:58:54.260 --> 00:58:55.920
of things it can talk to.

00:58:55.920 --> 00:58:58.360
And so it browses for
instances of P2P chat,

00:58:58.410 --> 00:59:00.240
finds itself in a bunch of other things.

00:59:00.240 --> 00:59:03.970
And then third, when you actually select
something from that pop-up menu,

00:59:03.970 --> 00:59:05.600
then we resolve the service.

00:59:05.600 --> 00:59:08.730
We discover the host you're running on,
discover the port you're running on,

00:59:08.730 --> 00:59:11.500
and from there on in,
we just send UDP packets back and forth.

00:59:11.500 --> 00:59:14.820
Now, just as with every other
Rendezvous browser,

00:59:14.820 --> 00:59:15.800
this is live.

00:59:15.800 --> 00:59:19.980
And so as you can see,
I've got Tim up there in the pop-up menu.

00:59:19.980 --> 00:59:22.730
What I'm going to ask Stuart is,
is quit Simple Chat on his machine,

00:59:22.730 --> 00:59:25.530
and you'll see Tim disappears,
and it goes back to Apple.

00:59:25.530 --> 00:59:28.820
So of course, it's live,
just like any other Rendezvous service.

00:59:28.900 --> 00:59:30.140
So.

00:59:31.820 --> 00:59:35.480
The next step is for you folks
to start playing with this stuff.

00:59:35.690 --> 00:59:37.490
If we could go back to the slides,
please.

00:59:37.670 --> 00:59:38.900
How are we going to do that?

00:59:39.140 --> 00:59:42.700
Well,
first order of business is documentation.

00:59:42.790 --> 00:59:44.900
Documentation, of course,
is in Javadoc format.

00:59:44.900 --> 00:59:48.370
It is provided on the TigerSeed,
so if you've installed the TigerSeed,

00:59:48.370 --> 00:59:50.220
you already have it on your disk.

00:59:51.100 --> 00:59:54.860
In addition,
for those who are not running Tiger,

00:59:54.860 --> 00:59:58.460
or perhaps running Darwin,
using Darwin on Linux,

00:59:58.610 --> 01:00:00.960
or perhaps on Windows,
we actually provide the

01:00:01.010 --> 01:00:04.210
Javadoc as a makefile target,
and so you can generate

01:00:04.210 --> 01:00:05.850
the Javadoc yourself.

01:00:05.860 --> 01:00:10.050
And of course, as a last resort,
we also have a mailing list,

01:00:10.050 --> 01:00:13.580
and so it's rendezvousatlist.apple.com.

01:00:13.580 --> 01:00:16.280
If you just go to list.apple.com,
you can find that mailing list.

01:00:16.280 --> 01:00:18.190
I know many of you are
already signed up to that.

01:00:20.200 --> 01:00:22.090
So that's how to find out how to use it.

01:00:22.150 --> 01:00:25.040
Some of you are probably
wondering how you actually get it,

01:00:25.040 --> 01:00:27.900
or maybe more to the point,
how your customers get it.

01:00:28.000 --> 01:00:29.160
So let's talk about delivery.

01:00:33.020 --> 01:00:37.980
So at the basic level, the Java support,
as an additional piece to Rendezvous,

01:00:38.040 --> 01:00:39.400
consists of two files.

01:00:39.500 --> 01:00:43.940
One is a jar file,
which contains the Java classes,

01:00:43.940 --> 01:00:47.800
the implementation of our interface.

01:00:47.900 --> 01:00:50.720
And that jar file is
platform independent.

01:00:50.720 --> 01:00:51.980
It's the same on all platforms.

01:00:52.300 --> 01:00:57.600
The next part we have is a JNI library,
a Java Native Interface Library.

01:00:58.080 --> 01:01:03.980
And that is designed to adapt the
platform independent Java classes to the

01:01:03.980 --> 01:01:10.240
specific instance of the DNS SD DLL that
you're running on on whichever platform.

01:01:10.240 --> 01:01:14.290
And our intent is to deliver
both of these onto the machine

01:01:14.290 --> 01:01:16.640
when you install Rendezvous.

01:01:16.660 --> 01:01:21.660
And so this, for most of you,
should be a detail.

01:01:22.010 --> 01:01:24.570
The other thing is we
are shipping with Tiger,

01:01:24.570 --> 01:01:29.200
and as Stuart said,
we are also shipping it with Windows.

01:01:29.290 --> 01:01:34.900
And so our intent is that when we deliver
Rendezvous to customers in binary form,

01:01:34.930 --> 01:01:39.110
that the Java libraries will be there
and you'll be able to depend on them.

01:01:39.280 --> 01:01:42.020
So that, in a nutshell, is the Java APIs.

01:01:42.030 --> 01:01:44.930
I hope that you try them out,
you send us feedback,

01:01:44.930 --> 01:01:47.420
and you build some great stuff with them.

01:01:47.480 --> 01:01:48.080
Thank you very much.

01:01:54.730 --> 01:01:56.270
Thank you, Roger.

01:01:56.480 --> 01:01:57.660
We're getting close to the end.

01:01:57.820 --> 01:01:59.750
Time to wrap up.

01:02:00.000 --> 01:02:04.540
We have really no
changes to the main APIs.

01:02:04.650 --> 01:02:07.700
The only new ones we have I want
to tell you about quickly now.

01:02:07.820 --> 01:02:12.220
When you advertise a service,
you can attach name value

01:02:12.220 --> 01:02:14.620
pairs to that service,
and when you resolve,

01:02:14.680 --> 01:02:16.480
you retrieve those name value pairs.

01:02:16.480 --> 01:02:19.600
And those can be useful to store various
attributes that describe the service.

01:02:19.640 --> 01:02:22.290
Particularly with printers,
they store attributes like the version

01:02:22.390 --> 01:02:25.100
of PostScript and things like that
that the client might want to know.

01:02:25.730 --> 01:02:29.350
Those text records have to be
formatted as standard DNS text records,

01:02:29.920 --> 01:02:32.100
and that's not difficult.

01:02:32.100 --> 01:02:34.800
It's length, byte, and data,
but we just made some helper functions.

01:02:34.800 --> 01:02:38.380
So now when you advertise a service,
you create an empty text record,

01:02:38.380 --> 01:02:41.800
you do set value, set value, set value,
and then you pass that text

01:02:41.800 --> 01:02:45.480
record you've created to the
standard DNS service register call.

01:02:45.480 --> 01:02:49.720
When you resolve, and when you receive a
text record off the wire,

01:02:49.720 --> 01:02:54.470
we have a couple of functions to tell
whether a certain key is present.

01:02:55.160 --> 01:02:57.540
And to get the value
for a given named key.

01:02:57.540 --> 01:02:59.890
Those are the only new
APIs we have to add.

01:03:01.710 --> 01:03:08.600
At the higher levels that build on top
of the DNS SD.h API core foundation,

01:03:08.600 --> 01:03:12.480
they have some minor changes which they
talked about at their session on Tuesday.

01:03:12.480 --> 01:03:16.740
And I would like to go back
to the Podium demo machine,

01:03:16.740 --> 01:03:19.790
not the VGA, the Mac you have here.

01:03:19.800 --> 01:03:21.250
And I am...

01:03:23.140 --> 01:03:26.920
In the few minutes we have remaining,
I told people if they brought

01:03:26.920 --> 01:03:32.000
things to the Plugfest last night,
we'd try to show them on stage,

01:03:32.000 --> 01:03:35.540
and we got a lot more
things than we expected.

01:03:35.880 --> 01:03:40.820
This is a music device from Roku.

01:03:41.380 --> 01:03:41.970
Really nice.

01:03:42.040 --> 01:03:44.550
I'm going to buy one of these with my
own money when they start shipping them.

01:03:44.560 --> 01:03:47.300
Really nice, bright,
fluorescent display on it.

01:03:47.440 --> 01:03:49.970
Control it with a remote control,
play your iTunes music.

01:03:50.140 --> 01:03:51.600
But that's not what I'm
going to show you today.

01:03:51.600 --> 01:03:54.060
I'm not going to show you music playing.

01:03:54.220 --> 01:03:58.900
What I'm going to show you is
what they used in development,

01:03:58.900 --> 01:03:58.900
which is

01:03:59.790 --> 01:04:05.220
If you go to the Connect to Server menu
in Terminal and select Telnet,

01:04:05.340 --> 01:04:09.360
you see the sound bridge shows up
because for development purposes

01:04:09.420 --> 01:04:12.170
they have a Telnet interface to it,
and you

01:04:12.370 --> 01:04:14.950
So same kind of problem,
how do you configure this thing?

01:04:14.960 --> 01:04:18.740
Well, now it just shows up in the
Connect to Server menu in Terminal.

01:04:18.740 --> 01:04:25.030
I said that the serial port was
the user interface of the 70s,

01:04:25.100 --> 01:04:28.420
and the web browser was the
user interface of the 90s.

01:04:28.420 --> 01:04:32.520
Something I think is a very interesting
direction that the world is going

01:04:32.530 --> 01:04:36.720
is a network protocol called VNC,
for virtual network computing.

01:04:36.720 --> 01:04:39.640
It's a way of seeing the
screen of a remote machine.

01:04:39.640 --> 01:04:43.700
And this little box here is
some rack mount equipment for

01:04:44.030 --> 01:04:46.710
music studios to mix music.

01:04:46.780 --> 01:04:49.840
And inside it's a PC,
it's got a VGA port on the back so you

01:04:49.870 --> 01:04:53.340
can hook up a keyboard and a monitor,
but you really don't want to be

01:04:53.580 --> 01:04:56.050
sitting cross-legged on the floor
with a monitor on your lap plugged

01:04:56.050 --> 01:04:57.370
into this thing in the rack.

01:04:57.460 --> 01:05:01.040
So it would be much nicer if you
could access this over the network.

01:05:01.080 --> 01:05:05.230
Well, it runs a VNC client,
which is nice, but how do you know

01:05:05.370 --> 01:05:06.980
what IP address it has?

01:05:07.020 --> 01:05:08.840
Well, the answer is...

01:05:10.350 --> 01:05:12.220
I don't really care
what IP address it has,

01:05:12.320 --> 01:05:14.720
because it does Rendezvous.

01:05:14.820 --> 01:05:19.570
And we just select that,
and it finds the address.

01:05:21.440 --> 01:05:25.200
This is a beta unit,
so sometimes the display doesn't show up.

01:05:25.290 --> 01:05:28.640
The other thing I found
that was very interesting is

01:05:28.990 --> 01:05:32.100
There are lots of other things on
this network advertising Rendezvous

01:05:32.100 --> 01:05:34.020
VNC that I didn't even know about.

01:05:34.160 --> 01:05:37.850
So, don't know what that's about,
but I think

01:05:38.310 --> 01:05:41.380
Building a user interface in a web
browser for configuring a device is

01:05:41.410 --> 01:05:44.230
something that's very easy to do,
but sometimes a web interface

01:05:44.230 --> 01:05:46.990
doesn't give you everything you want,
whereas VNC lets you

01:05:46.990 --> 01:05:48.390
push the pixels you want.

01:05:48.400 --> 01:05:53.450
So I think Rendezvous-advertised VNC is
going to be an interesting direction for

01:05:53.460 --> 01:05:56.280
future interfaces for network devices.

01:05:56.280 --> 01:05:59.950
So on that note,
let's go back to the slides,

01:05:59.950 --> 01:06:01.720
and we will wrap up.

01:06:01.820 --> 01:06:04.830
For more information,
Craig Keithley is our

01:06:04.930 --> 01:06:07.310
developer relations evangelist.

01:06:07.360 --> 01:06:09.940
He's the man to go to with
all of your questions.

01:06:11.500 --> 01:06:15.320
If you've got technical developer
questions about making things

01:06:15.320 --> 01:06:18.410
work or design questions or hints,
the Rendezvous mailing

01:06:18.430 --> 01:06:19.760
list is a great resource.

01:06:19.910 --> 01:06:23.920
Not just Apple people,
but hundreds of other third party

01:06:23.920 --> 01:06:26.720
developers are on that list,
and it's a great community for people

01:06:26.720 --> 01:06:28.770
working together to solve their problems.

01:06:28.880 --> 01:06:32.750
Of course, one of the big benefits of
Rendezvous is when multiple people

01:06:32.920 --> 01:06:34.850
do things that interoperate.

01:06:35.050 --> 01:06:39.300
So, being the only VNC client that
advertises with Rendezvous is less

01:06:39.300 --> 01:06:43.080
useful than having all VNC clients
and servers advertise the same

01:06:43.080 --> 01:06:44.500
service type with Rendezvous.

01:06:44.680 --> 01:06:48.450
So, community communication
is very important.

01:06:49.850 --> 01:06:52.460
On the Tiger CD you
have this documentation,

01:06:52.550 --> 01:06:56.300
and if you go to the ADC home
reference library page,

01:06:56.300 --> 01:06:58.140
then you can click around the links.

01:06:58.300 --> 01:07:01.760
There's a lot of sample code
and documentation there as well.

01:07:03.380 --> 01:07:04.580
Quick run through the URLs.

01:07:04.670 --> 01:07:08.600
Zeroconf.org is the umbrella
website for the zero

01:07:08.680 --> 01:07:10.960
configuration networking efforts.

01:07:10.990 --> 01:07:14.700
It builds on multicast DNS and
DNS service discovery as two

01:07:14.700 --> 01:07:16.310
of the enabling technologies.

01:07:16.410 --> 01:07:18.180
Of course,
we have the Apple developer pages

01:07:18.280 --> 01:07:22.620
that also have links to these
sites at developer.apple.com.

01:07:22.660 --> 01:07:25.400
The mailing list I already mentioned,
very important.

01:07:25.450 --> 01:07:28.480
And if you're not tired
of hearing me talk yet,

01:07:28.510 --> 01:07:30.710
you can come back at
the end of this month.

01:07:30.780 --> 01:07:34.760
I'll be giving a Rendezvous
tutorial focusing on cross-platform

01:07:34.760 --> 01:07:38.360
Rendezvous at the O'Reilly
Open Source Convention in Portland,

01:07:38.360 --> 01:07:40.140
Oregon at the end of this month.