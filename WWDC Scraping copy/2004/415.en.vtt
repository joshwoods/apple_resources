WEBVTT

00:00:14.040 --> 00:00:17.880
Ladies and gentlemen,
please welcome Group Manager,

00:00:17.880 --> 00:00:22.510
.Mac Base Engineering, Scott Ryder.

00:00:27.090 --> 00:00:28.970
Hi everybody,
it's good to see you on this

00:00:28.970 --> 00:00:30.920
last session on Wednesday.

00:00:30.940 --> 00:00:34.130
So I was actually kind of preparing
for our session yesterday and

00:00:34.140 --> 00:00:39.960
I realized that I am the only thing
standing between you and dinner.

00:00:39.980 --> 00:00:43.730
So I figured what I would do is in
that interest is I would just strip

00:00:43.730 --> 00:00:46.190
all the white space from my commentary.

00:00:46.230 --> 00:00:47.390
So what we're going to do is we're
going to actually have the session

00:00:47.490 --> 00:00:49.210
actually probably double or triple
rate so we can actually get all the

00:00:49.300 --> 00:00:51.270
information out there to you really,
really quickly and then you

00:00:51.270 --> 00:00:53.060
can get it out and go and go
and go and go and go and go.

00:00:53.120 --> 00:00:54.060
Okay.

00:00:54.060 --> 00:00:54.930
No.

00:00:55.060 --> 00:00:56.060
Thank you very much.

00:00:56.060 --> 00:00:57.060
Thank you very much.

00:00:57.060 --> 00:00:58.020
We'll be here all night.

00:00:58.290 --> 00:01:01.860
So as I said, my name is Scott Ryder.

00:01:01.860 --> 00:01:04.560
I manage the infrastructure
group within .Mac.

00:01:04.560 --> 00:01:08.860
We're responsible for kind of all those
backend servers that make things go.

00:01:08.860 --> 00:01:10.900
They don't let us near pixels
which is probably a good thing

00:01:10.940 --> 00:01:11.880
since none of us can draw.

00:01:13.590 --> 00:01:15.740
So, agenda,
what are we going to talk about today?

00:01:15.770 --> 00:01:18.230
We're going to talk about very
basically what is .Mac from

00:01:18.390 --> 00:01:20.100
a developer's perspective.

00:01:20.100 --> 00:01:20.890
What does it offer you?

00:01:21.010 --> 00:01:23.940
Why should you consider integrating
your application with it?

00:01:24.010 --> 00:01:26.180
And what is it kind of
fundamentally all about?

00:01:26.250 --> 00:01:30.260
We're then going to talk about...click...

00:01:30.650 --> 00:01:31.600
Hello.

00:01:31.600 --> 00:01:32.700
Here we go.

00:01:32.820 --> 00:01:34.300
Some new features in Tiger.

00:01:34.470 --> 00:01:36.970
Specifically, if you've installed the
Tiger DVDs that you got,

00:01:37.000 --> 00:01:40.280
if you look on the .Mac preferences pane,
you'll notice there's a new tab

00:01:40.280 --> 00:01:41.820
on the very end called Domain.

00:01:41.860 --> 00:01:44.240
And it's not very well
explained what that is.

00:01:44.240 --> 00:01:46.520
So I actually get to do a
feature announcement about

00:01:46.540 --> 00:01:49.780
what it is that that tab is all
about and what it does for you.

00:01:49.850 --> 00:01:53.250
And we're going to touch very
briefly on the new synchronization

00:01:53.250 --> 00:01:56.960
services in Tiger and what that
does and what it means to .Mac

00:01:56.960 --> 00:01:58.860
and what it means to your app.

00:01:58.860 --> 00:02:00.730
Then, after that,
we're going to talk about how

00:02:00.730 --> 00:02:03.460
you can get all the exact same
integration that you've seen in

00:02:03.460 --> 00:02:08.600
Mac OS X and our iApplications over
the past couple of years in your app.

00:02:08.910 --> 00:02:11.380
Basically, what we've done is we've
listened to our developers.

00:02:11.520 --> 00:02:14.420
And today,
we're announcing the new .Mac Kit.

00:02:14.530 --> 00:02:18.520
The .Mac Kit is a high-level
Cocoa wrapper around all the .Mac

00:02:18.520 --> 00:02:22.180
services that you would need to
kind of enable a next generation

00:02:22.180 --> 00:02:24.190
of features for your application.

00:02:24.310 --> 00:02:28.040
The key is you can do all of
this without network programming.

00:02:28.220 --> 00:02:29.160
There's no asynchronous.

00:02:29.230 --> 00:02:30.670
You don't have to deal with run loops.

00:02:30.830 --> 00:02:32.010
There's no threading issues.

00:02:32.300 --> 00:02:34.340
It's a very simple API for you to use.

00:02:34.630 --> 00:02:36.740
And it just moves your
application forward and gives

00:02:36.870 --> 00:02:38.540
you a whole new set of features.

00:02:38.540 --> 00:02:40.570
Again, this is at no cost to you.

00:02:40.750 --> 00:02:43.890
There's no charge for running the
thousands of servers that we run.

00:02:43.890 --> 00:02:46.120
There's no charge to
you for using the kit.

00:02:46.120 --> 00:02:48.140
It's just something
that's available to you.

00:02:48.170 --> 00:02:50.770
And again,
and I'll hit this several times,

00:02:50.860 --> 00:02:53.140
.Mac is open standards-based.

00:02:53.170 --> 00:02:54.150
That hasn't changed.

00:02:54.260 --> 00:02:56.700
We're not inventing
custom binary protocols.

00:02:56.760 --> 00:02:56.760
We're not trying to
push some new standard.

00:02:56.760 --> 00:02:58.730
We're not trying to push
some new standard deviation

00:02:58.730 --> 00:03:00.580
that we've come up with.

00:03:00.590 --> 00:03:02.940
These are entirely
using the same web dev,

00:03:02.940 --> 00:03:07.360
the same XML, the same HTTP that we've
been using for a long time.

00:03:07.490 --> 00:03:09.350
What we're simply doing is
lifting the bar a bit so you

00:03:09.500 --> 00:03:10.640
don't have to do that work.

00:03:12.360 --> 00:03:16.700
So what we hope you'll learn specifically
is a brief overview of how to integrate

00:03:16.700 --> 00:03:20.320
the .Mac domain with your application,
what it means to you and how to use

00:03:20.320 --> 00:03:23.540
the Rendezvous APIs that it touches on.

00:03:23.610 --> 00:03:26.870
Tiger's new synchronization
services in .Mac,

00:03:26.870 --> 00:03:29.620
the new .Mac Kit,
specifically what it is,

00:03:29.650 --> 00:03:32.260
when you should use it,
when you should not use it,

00:03:32.260 --> 00:03:36.000
and some good call styles and of
course lots and lots of code samples.

00:03:36.020 --> 00:03:40.100
Ultimately, what we want you to get is
a little bit of .Mac zen.

00:03:40.130 --> 00:03:43.820
We want you to kind of help bridge
that gap for the users between their

00:03:43.820 --> 00:03:45.900
local world and the online world.

00:03:45.930 --> 00:03:47.260
That's what the kit really enables.

00:03:47.350 --> 00:03:51.180
It lets you build features that go
seamlessly to the server and back again.

00:03:51.210 --> 00:03:52.940
They let two clients work together.

00:03:53.010 --> 00:03:57.480
It just makes data flow seamlessly
for our customers and yours.

00:03:58.010 --> 00:04:00.440
So, .Mac overview of developers.

00:04:00.440 --> 00:04:05.190
What does .Mac look like from
a developer's perspective?

00:04:05.280 --> 00:04:08.670
First and foremost,
it gave you the ability to create

00:04:08.670 --> 00:04:10.690
a new category of features.

00:04:10.760 --> 00:04:13.440
First, .Mac offers a universal namespace.

00:04:13.440 --> 00:04:16.960
This is, you know, we're at, I think,
somewhere around 500,000 paying

00:04:17.070 --> 00:04:21.220
accounts or over 500,000 paying accounts
that all have names in one space.

00:04:21.220 --> 00:04:23.160
When a new user comes to us,
we give them a name,

00:04:23.160 --> 00:04:25.900
there's no collisions,
we don't recycle the namespace,

00:04:26.000 --> 00:04:29.740
so once a customer gets a name,
it never goes away, it's theirs forever.

00:04:29.790 --> 00:04:31.630
And there's a lot of things
that your app can do with this.

00:04:31.710 --> 00:04:35.270
If you think about, you know,
a good example of who does this today,

00:04:35.280 --> 00:04:36.080
iChat.

00:04:36.110 --> 00:04:39.450
Those .Mac names that you get are
perfectly valid through iChat.

00:04:39.710 --> 00:04:40.280
They're free.

00:04:40.280 --> 00:04:41.690
You don't have to be a paying account.

00:04:41.690 --> 00:04:43.550
You don't have to be in
any particular state.

00:04:43.560 --> 00:04:46.240
As long as you have the credential
and you have the password,

00:04:46.240 --> 00:04:47.680
you're good to go with iChat.

00:04:47.720 --> 00:04:49.080
We're good with the .Mac kit.

00:04:49.250 --> 00:04:52.220
We're giving you the same
ability to build iChat-like

00:04:52.220 --> 00:04:56.200
services that use those IDs,
use those credentials.

00:04:57.010 --> 00:05:00.130
With paid membership, though,
there's a whole bunch of

00:05:00.130 --> 00:05:01.440
services that we provide.

00:05:01.440 --> 00:05:03.890
One of them is this
always-on store and forward.

00:05:03.900 --> 00:05:06.780
The ability to kind of do,
if you think of what iCal does with its

00:05:06.780 --> 00:05:08.900
publish and subscribe for calendar data.

00:05:09.080 --> 00:05:10.900
You can publish a calendar out there.

00:05:10.900 --> 00:05:13.900
One, two,
a thousand people can then download

00:05:13.900 --> 00:05:14.900
and subscribe to that calendar.

00:05:14.900 --> 00:05:17.890
All the updates flow through the server.

00:05:17.920 --> 00:05:18.900
You can do shared meta.

00:05:18.900 --> 00:05:22.950
Imagine if you want to have a
workflow going and you want to put up,

00:05:22.950 --> 00:05:24.040
you know,
this is the state of the project and

00:05:24.040 --> 00:05:26.900
you want to have X number of people
look at that particular project state.

00:05:26.900 --> 00:05:29.960
And of course, ultimately,
just like you see in iPhoto,

00:05:30.020 --> 00:05:32.760
we offer the simplest direct-to-web
that's available for customers.

00:05:33.100 --> 00:05:34.890
Customers don't have to
deal with server URLs.

00:05:34.890 --> 00:05:36.330
They don't have to deal with
credential spacing because

00:05:36.370 --> 00:05:37.890
it's all built into the OS.

00:05:38.110 --> 00:05:39.850
With the kit,
you can leverage that directly

00:05:39.960 --> 00:05:43.900
in your application and truly
provide one-button publish.

00:05:44.790 --> 00:05:47.880
Ultimately, this will help you stand
out in your market.

00:05:47.880 --> 00:05:50.690
This is something that you
cannot do on any other platform.

00:05:50.960 --> 00:05:54.700
That other OS doesn't offer this,
even in the .Cow form.

00:05:54.840 --> 00:05:56.260
It's not something that they've done.

00:05:56.260 --> 00:05:59.870
You've not integrated the credentials
like this with the system in

00:05:59.950 --> 00:06:01.720
a totally open standard way.

00:06:02.530 --> 00:06:06.000
So .Mac from a developer's perspective.

00:06:06.050 --> 00:06:08.970
This is actually something that's been
part of the service way back when it

00:06:09.060 --> 00:06:11.280
started life five years ago as iTools.

00:06:11.390 --> 00:06:14.950
We fundamentally designed this
to work with desktop applications

00:06:14.950 --> 00:06:17.100
as well as online applications.

00:06:17.160 --> 00:06:19.380
If you look in your iDisk,
you'll see something

00:06:19.380 --> 00:06:20.500
called the library folder.

00:06:20.530 --> 00:06:23.020
It's just like the library
folder on your local hard drive,

00:06:23.020 --> 00:06:25.200
but it has a couple neat attributes.

00:06:25.450 --> 00:06:27.050
One of them is it's protected.

00:06:27.170 --> 00:06:30.020
Users can't accidentally go into
the folder and mess up data.

00:06:30.020 --> 00:06:31.190
They can't delete files.

00:06:31.190 --> 00:06:32.650
They can't overwrite files.

00:06:32.690 --> 00:06:35.960
So you can keep, you know,
application state or some important

00:06:35.960 --> 00:06:38.970
files in this location and they can't
be accidentally deleted by users.

00:06:38.970 --> 00:06:42.480
And we'll talk a little bit more
about the library folder later.

00:06:42.480 --> 00:06:44.540
It's designed fundamentally
for a single app,

00:06:44.560 --> 00:06:45.860
multi-machine use.

00:06:45.910 --> 00:06:49.640
You can imagine your software is
running in one or two or three or

00:06:49.820 --> 00:06:52.950
four of the user's Macs and you want
to have a place for all those apps to

00:06:53.000 --> 00:06:56.100
coordinate with each other to keep data
that they want to pass to each other.

00:06:56.300 --> 00:06:58.540
That's what you can use the
library folder in iDisk to do.

00:06:58.610 --> 00:07:02.040
It's a great place to put that meta and
then read it out in multiple places and

00:07:02.040 --> 00:07:05.440
put it back and you can keep some really
interesting coordination pieces there.

00:07:05.440 --> 00:07:09.120
We do that with our own
applications at the .Mac layers.

00:07:09.120 --> 00:07:12.540
Another section of folders in the
iDisk are the public and sites folders.

00:07:12.820 --> 00:07:14.630
These are kind of your
distribution points.

00:07:14.630 --> 00:07:18.000
They're a place that you can
get public data out to users.

00:07:18.000 --> 00:07:18.740
Two ways.

00:07:18.740 --> 00:07:21.530
One is if you want to do
it with the web browser,

00:07:21.530 --> 00:07:24.320
you know,
with the homepage.mac.com services,

00:07:24.340 --> 00:07:27.440
anything in that sites folder can be out,
can be viewed from the web.

00:07:27.450 --> 00:07:28.370
There's no credentialing.

00:07:28.370 --> 00:07:30.260
There's no extra headaches required.

00:07:30.440 --> 00:07:31.860
Or if they want,
you can put it in the iDisk.

00:07:31.880 --> 00:07:36.040
You can put things in the public folder
and use iDisk.mac.com to go into that

00:07:36.040 --> 00:07:40.590
URL and you can password protect that and
you can start adding some access control.

00:07:40.800 --> 00:07:42.960
The key is you can mix and match.

00:07:42.980 --> 00:07:45.710
Whatever is the appropriate model
for what your application wants to

00:07:45.730 --> 00:07:49.420
achieve from both the simplicity,
from a web access, from an ease of use,

00:07:49.590 --> 00:07:51.080
and from a security perspective.

00:07:51.230 --> 00:07:53.800
You can put some data in one place,
some data in the other place.

00:07:53.930 --> 00:07:55.080
It doesn't really matter.

00:07:55.080 --> 00:07:58.080
And we'll get a little
bit more into this.

00:07:58.080 --> 00:08:01.670
So what ultimately could you really do by
integrating .Mac with your application?

00:08:01.710 --> 00:08:05.840
Well, again, as I mentioned earlier,
you can do publish and subscribe,

00:08:05.950 --> 00:08:07.800
kind of like iCal does.

00:08:07.800 --> 00:08:10.180
Imagine the ability, you know,
one of my favorite editors

00:08:10.180 --> 00:08:12.850
is the Hydra client,
the ability to do rendezvous-based

00:08:12.860 --> 00:08:15.030
HTML or group editing of a text document.

00:08:15.500 --> 00:08:18.520
Imagine if you put that document
on the iDisk for store and forward.

00:08:18.520 --> 00:08:20.800
Now you don't need all the
clients to be online at once.

00:08:21.240 --> 00:08:22.040
Everybody can publish.

00:08:22.040 --> 00:08:22.970
Everybody can edit.

00:08:23.210 --> 00:08:27.270
The locking, we provide mechanisms for
dealing with all that concurrency

00:08:27.380 --> 00:08:29.180
and it's all pretty simple.

00:08:29.180 --> 00:08:30.250
Another thing you could
do is you could do,

00:08:30.250 --> 00:08:31.280
obviously, an application data store.

00:08:31.410 --> 00:08:35.140
You Wouldn't it be nice if the
user installs your application

00:08:35.140 --> 00:08:37.360
and then something horrendous
happens to their machine and

00:08:37.390 --> 00:08:40.150
they have to install it again,
and you didn't have to ask them

00:08:40.160 --> 00:08:42.080
all the same questions that
they have already answered?

00:08:42.200 --> 00:08:44.840
If you want to keep track
of where your application,

00:08:44.850 --> 00:08:48.020
get all that meta,
here's a place you can put it.

00:08:48.020 --> 00:08:48.940
Put the meta on that iDisk.

00:08:49.160 --> 00:08:51.520
The next time that some calamitous
thing happens and the user has

00:08:51.620 --> 00:08:54.610
to reinstall your app or wants
to install it on another computer,

00:08:54.610 --> 00:08:57.410
you have a place to get all
that meta back again without

00:08:57.410 --> 00:08:59.290
having to re-query them.

00:08:59.920 --> 00:09:02.120
You can do some
lightweight collaboration.

00:09:02.190 --> 00:09:03.910
Again, we offer that single namespace.

00:09:04.170 --> 00:09:06.550
So if you want to keep track
of who's publishing something,

00:09:06.550 --> 00:09:09.890
you want to kind of identify a user,
you want to do some meta flow or

00:09:09.890 --> 00:09:13.270
meta workflow kind of storage,
maybe you pass the information

00:09:13.390 --> 00:09:15.640
computer to computer,
but you keep the state of the

00:09:15.640 --> 00:09:18.860
workflow on the iDisk where anybody
can get at it so they can see and

00:09:19.170 --> 00:09:21.110
you have a nice unified namespace.

00:09:21.210 --> 00:09:24.580
Usually it comes at least with an iChat
ID and probably even with an email

00:09:25.070 --> 00:09:27.000
address if they're paying members.

00:09:27.000 --> 00:09:28.580
And of course, distribution.

00:09:28.750 --> 00:09:31.780
You can do some really seamless
client-to-server blending when

00:09:31.920 --> 00:09:35.840
you start bringing the .Mac domain
technology in together with the .Mac

00:09:35.850 --> 00:09:38.980
technology for the offline access.

00:09:38.980 --> 00:09:42.680
So, of course, identity, as I mentioned,
that single namespace

00:09:42.680 --> 00:09:43.850
gives you a lot of things.

00:09:43.850 --> 00:09:45.370
Again, think of what iChat does.

00:09:45.370 --> 00:09:48.760
It's, I want to really stress,
it's not required for a fee.

00:09:48.940 --> 00:09:51.610
To get an identity,
a user comes to our website,

00:09:51.740 --> 00:09:54.510
they fill out the form,
that identity is theirs for eternity.

00:09:54.510 --> 00:09:56.960
They, you know,
we hope that they choose to pay for it.

00:09:57.110 --> 00:09:58.900
And, of course,
the services that can go with it,

00:09:59.040 --> 00:10:01.000
but it's not required.

00:10:01.000 --> 00:10:03.330
And, of course, backup and archival,
lots of great places

00:10:03.330 --> 00:10:04.560
in the iDisk to keep,
you know,

00:10:04.570 --> 00:10:08.020
data that's important to users or
meta that's important to your app.

00:10:08.030 --> 00:10:10.950
And ultimately,
there's a lot more you can do because,

00:10:11.070 --> 00:10:16.860
as I said earlier and I will say again,
.Mac is totally open standards-based.

00:10:16.960 --> 00:10:19.410
So that means this is,
while I've been talking Mac to Mac,

00:10:19.470 --> 00:10:21.540
it doesn't have to be Mac to Mac.

00:10:21.630 --> 00:10:22.550
It can be Mac to Windows.

00:10:22.690 --> 00:10:24.020
It can be Windows to Windows.

00:10:24.020 --> 00:10:25.320
It can be Windows to Linux.

00:10:25.580 --> 00:10:28.310
The key thing is by building
open standards at the core,

00:10:28.370 --> 00:10:31.820
we enable you to embrace and go
forward on to other platforms without

00:10:31.820 --> 00:10:33.480
having to worry about things breaking.

00:10:33.590 --> 00:10:37.200
We follow the same RFCs
without modification.

00:10:38.200 --> 00:10:40.330
So specifically,
what does this offer to your app?

00:10:40.400 --> 00:10:41.160
At no cost.

00:10:41.550 --> 00:10:43.880
Remember, all of this is free to you,
the developer, to integrate.

00:10:43.880 --> 00:10:47.960
We offer you access to over
one-half million paying customers.

00:10:47.960 --> 00:10:50.120
These are some of Apple's best customers.

00:10:50.120 --> 00:10:51.400
They're some of your best customers.

00:10:51.400 --> 00:10:55.060
And what we find is that when they
use services that are integrated,

00:10:55.060 --> 00:10:57.400
they tend to really stick
with those applications.

00:10:57.400 --> 00:11:00.700
It makes your application sticky,
and it makes it a delight for

00:11:00.870 --> 00:11:03.920
users to use because they really
enjoy the experience they get

00:11:03.920 --> 00:11:06.440
when they go online and they go
offline and their data survives.

00:11:06.910 --> 00:11:08.750
And all the things that, oh,
you can do that?

00:11:08.820 --> 00:11:10.070
And it just happens.

00:11:10.080 --> 00:11:14.650
We offer all the account management,
password reset, password management,

00:11:14.680 --> 00:11:17.690
security questions, all those things,
it's all managed for you.

00:11:17.740 --> 00:11:20.800
We offer very, very scalable services.

00:11:20.800 --> 00:11:24.660
For example,
iDisk alone handles 7 terabytes

00:11:24.660 --> 00:11:26.470
of data down every single week.

00:11:26.540 --> 00:11:30.150
We have a half a terabyte of
data come up every single week.

00:11:31.850 --> 00:11:35.290
We have over a gigabit and a half
of bandwidth that we use for the

00:11:35.290 --> 00:11:38.700
service and as we get more users
we always add more capacity.

00:11:38.700 --> 00:11:42.820
All of these systems are
supported and monitored 24/7.

00:11:42.820 --> 00:11:45.500
There's a bunch of very dedicated
folks at .Mac that have a job that

00:11:45.540 --> 00:11:49.700
I frankly could never force myself to do,
which is holding the pager of doom.

00:11:49.700 --> 00:11:51.750
The thing goes off at
9 o'clock in the night,

00:11:51.750 --> 00:11:54.900
it goes off at 1 o'clock in the morning,
and if a service is down these

00:11:54.900 --> 00:11:57.700
guys will go into the office if
they have to get it back up again.

00:11:57.700 --> 00:12:00.810
Very, very dedicated folks.

00:12:01.700 --> 00:13:28.400
[Transcript missing]

00:13:29.410 --> 00:13:32.100
Being at the center means
that our own servers use the

00:13:32.180 --> 00:13:34.130
WebDAV protocol to access data.

00:13:34.490 --> 00:13:36.710
So this is not something that, you know,
we're telling you to do and we do

00:13:36.710 --> 00:13:38.050
something completely different.

00:13:38.120 --> 00:13:40.040
We use the same protocols,
the same semantics.

00:13:40.040 --> 00:13:42.500
And then a bit about standard formats.

00:13:42.530 --> 00:13:44.980
The Internet's, you know,
pushed this forward and I really

00:13:45.020 --> 00:13:46.460
want to drive it even further.

00:13:46.510 --> 00:13:49.260
By keeping images in JPEG or
keeping text in text,

00:13:49.330 --> 00:13:53.260
by keeping things in a standard format,
that means it's really easy for it

00:13:53.260 --> 00:13:55.440
to flow from one service to another.

00:13:55.490 --> 00:13:57.560
If you're an application
and you deal with pictures,

00:13:57.560 --> 00:13:59.730
for example,
say you're doing a webcam kind of app,

00:13:59.790 --> 00:14:02.660
by uploading those pictures in JPEG,
that means they're automatically

00:14:02.770 --> 00:14:05.550
accessible to iCards or
automatically accessible to Homepage.

00:14:05.740 --> 00:14:07.520
You don't have to do any extra work.

00:14:07.600 --> 00:14:09.950
So, you know, those open standard formats
that we all know and love,

00:14:09.990 --> 00:14:12.440
they're just a really good thing
when you start thinking about

00:14:12.440 --> 00:14:14.860
sharing things across services.

00:14:14.860 --> 00:14:17.110
There's some special behaviors
that iDisk gives you.

00:14:17.220 --> 00:14:20.010
Library is, again, as I said,
it can be read by all.

00:14:20.010 --> 00:14:22.770
Any application can read
the contents of library,

00:14:22.830 --> 00:14:24.830
but it can only be
written by a select few,

00:14:24.960 --> 00:14:26.490
and we'll talk about that.

00:14:26.570 --> 00:14:27.480
Backup is reserved.

00:14:27.480 --> 00:14:30.680
The backup folder is for the
use of our backup application.

00:14:30.750 --> 00:14:33.270
If you have--you want to do backups,
you can do them in library,

00:14:33.280 --> 00:14:35.490
you can do them in other
places in the iDisk.

00:14:35.490 --> 00:14:38.170
It depends on the kind of
data you want to back up.

00:14:38.170 --> 00:14:40.570
And some objects,
depending on where they are,

00:14:40.570 --> 00:14:43.300
and we'll go a little bit deeper,
can be read without members' credentials.

00:14:43.400 --> 00:14:45.920
So be careful where you put things,
and we'll talk about that.

00:14:45.940 --> 00:14:49.420
But it is key to stress,
there is absolutely no

00:14:49.420 --> 00:14:53.560
situation where a user's iDisk,
the contents on that disk,

00:14:53.630 --> 00:14:55.580
can be listed without credentials.

00:14:55.690 --> 00:14:56.930
You may be able to get the object,
but you may not be able to get

00:14:56.930 --> 00:14:59.430
the object if you know it exists,
but you absolutely can't find

00:14:59.430 --> 00:15:03.800
out what objects exist without
the owner's credentials.

00:15:03.800 --> 00:15:05.690
So the two roads to Rome.

00:15:05.700 --> 00:15:07.700
As I said, there are two ways into iDisk.

00:15:07.700 --> 00:15:09.060
One way is with WebDev.

00:15:09.060 --> 00:15:13.300
Use iDisk.mac.com, and you can go through
these particular paths.

00:15:13.300 --> 00:15:15.820
Member credentials are
required to do this.

00:15:15.970 --> 00:15:18.400
Read, you can read anything
in the folder structure,

00:15:18.590 --> 00:15:21.790
and those special folders I mentioned,
backup, library, and software,

00:15:21.790 --> 00:15:24.930
for example,
you cannot necessarily write things into.

00:15:24.930 --> 00:15:28.070
Library you can,
but the other choice is you can

00:15:28.070 --> 00:15:34.220
come in via homepage.mac.com,
and HomePage accesses those folders.

00:15:34.220 --> 00:15:38.890
So the key thing is objects or files that
you place in movies or pictures or music

00:15:39.020 --> 00:15:41.480
or sites can be read without credential.

00:15:41.490 --> 00:15:43.250
They can't be written without it.

00:15:43.350 --> 00:15:47.160
They can't be listed without it,
but they can be read without it.

00:15:47.190 --> 00:15:48.940
And the way you would do
that is you would simply say

00:15:48.940 --> 00:15:53.110
homepage.mac.com/membername,
put a dot at the beginning,

00:15:53.110 --> 00:15:56.220
so like .pictures, .music,
and you would be able to get in.

00:15:56.220 --> 00:15:56.760
And then you would have a list
of all the files that into the

00:15:56.760 --> 00:15:59.500
contents of those particular folders.

00:16:01.020 --> 00:16:01.790
Why WebDAV?

00:16:02.310 --> 00:16:06.410
Well, first and foremost,
WebDAV is nothing more than

00:16:06.410 --> 00:16:07.990
a set of extensions on HTTP.

00:16:07.990 --> 00:16:10.820
If you want to move things
around the internet,

00:16:10.820 --> 00:16:12.780
you want to do that with HTTP.

00:16:12.780 --> 00:16:14.670
It is the fastest,
most scalable protocol.

00:16:14.670 --> 00:16:15.720
It is the most gateway.

00:16:15.720 --> 00:16:16.760
It is the most proxy.

00:16:16.760 --> 00:16:19.180
It is far and above the most supported.

00:16:19.230 --> 00:16:21.240
It is just the easiest way to do things.

00:16:21.270 --> 00:16:23.470
It offers very rich object management.

00:16:23.470 --> 00:16:26.460
All the uploads, downloads,
there's even versioning

00:16:26.590 --> 00:16:27.980
extensions to WebDAV.

00:16:28.000 --> 00:16:29.530
It's a very active community.

00:16:29.530 --> 00:16:32.380
If you look at kind of the open
source for I/O protocols today,

00:16:32.380 --> 00:16:35.360
HTTP and WebDAV are the only two
that are really still evolving

00:16:35.360 --> 00:16:37.420
actively and still changing over time.

00:16:37.480 --> 00:16:40.400
WebDAV has, for example,
I think four or five specs that

00:16:40.400 --> 00:16:43.390
are even out for comments and two
or three that just actually came

00:16:43.390 --> 00:16:44.920
back into being full standards.

00:16:44.960 --> 00:16:47.350
And of course,
it's fully cross-platform support.

00:16:47.430 --> 00:16:50.500
Mac OS has had a WebDAV file
system since 10.0.

00:16:50.530 --> 00:16:53.260
Windows and Linux have both
had WebDAV file systems

00:16:53.270 --> 00:16:54.720
for quite some time now.

00:16:54.720 --> 00:16:56.360
So it's very well supported.

00:16:56.360 --> 00:16:57.980
And this is why we've been
using it for three years.

00:16:57.980 --> 00:16:59.980
This is something we know.

00:16:59.990 --> 00:17:02.490
We do 60 million
WebDAV transactions per week,

00:17:02.580 --> 00:17:04.080
and that number is just going up.

00:17:04.090 --> 00:17:06.300
And it's the only thing
you can scale easily.

00:17:06.310 --> 00:17:09.970
I should point out, we do 60 million
WebDAV transactions with 24 servers.

00:17:09.970 --> 00:17:11.490
That's the beauty of WebDAV.

00:17:11.630 --> 00:17:13.040
It's a very scalable protocol.

00:17:13.080 --> 00:17:14.910
It's our second most popular service.

00:17:16.740 --> 00:17:19.000
So, a little bit on open standards.

00:17:19.000 --> 00:17:21.060
They're absolutely
central to our philosophy.

00:17:21.120 --> 00:17:23.680
Everything we do,
we want to do it with open standards.

00:17:23.890 --> 00:17:26.800
The key is we look for standards
that meet all these criteria.

00:17:26.870 --> 00:17:30.180
They're stable, they're secure,
they're broadly accepted,

00:17:30.180 --> 00:17:33.020
and they really offer something
different for the user.

00:17:33.240 --> 00:17:35.240
When we find a standard
that meets all of those,

00:17:35.420 --> 00:17:37.140
that's when we start
looking at adopting it.

00:17:37.140 --> 00:17:39.810
And obviously we use things
from both of those bodies today.

00:17:40.490 --> 00:17:44.850
Many flavors of HTTP and DAV,
obviously many mail things,

00:17:44.850 --> 00:17:46.120
and even XML RPC.

00:17:48.020 --> 00:17:50.890
And for Tiger,
we're adding some new stuff with DNS.

00:17:50.980 --> 00:17:53.140
We'll talk about that.

00:17:53.140 --> 00:17:55.800
So what is the .Mac domain?

00:17:55.800 --> 00:17:59.070
What is that little domain
tab you see in those seeds?

00:17:59.070 --> 00:17:59.070
Well, it

00:17:59.190 --> 00:18:01.310
First and foremost,
it offers us something that our users

00:18:01.330 --> 00:18:03.540
have been asking for for a long time.

00:18:03.540 --> 00:18:05.060
This is brand new in Tiger.

00:18:05.120 --> 00:18:09.150
We're going to give every
member at least one zone.

00:18:09.160 --> 00:18:10.900
So they will have a zone on the internet.

00:18:11.020 --> 00:18:11.650
It is theirs.

00:18:11.650 --> 00:18:13.880
As long as they have
a paying subscription,

00:18:13.880 --> 00:18:15.740
they can publish things into it.

00:18:15.740 --> 00:18:17.770
The zone will be their member name.

00:18:17.790 --> 00:18:21.800
So for example, my name is Scott,
so I'm scott.members.mac.com.

00:18:21.800 --> 00:18:26.560
And when I want to find my computers,
I can publish those machines into there.

00:18:26.670 --> 00:18:29.740
So I can have work iMac
or I can have home G5,

00:18:29.740 --> 00:18:33.630
all built into the same zone
regardless of what IP that they have.

00:18:38.640 --> 00:18:42.430
and this is built entirely
on DNS and DNS update.

00:18:42.680 --> 00:18:45.500
This is not a custom hacked
protocol that we've come up with.

00:18:45.500 --> 00:18:49.290
We've taken the existing industry
standard protocols to make this work.

00:18:49.820 --> 00:18:52.990
Now that's kind of cool, but

00:18:53.150 --> 00:18:55.620
Let's bring Rendezvous into the picture.

00:18:55.620 --> 00:18:56.720
When you bring Rendezvous
into the picture,

00:18:56.720 --> 00:19:00.010
what we're actually going to
do is we're going to kind of

00:19:00.140 --> 00:19:02.280
make the world seem .local.

00:19:02.280 --> 00:19:05.770
We're going to kind of hide
the Internet nature of things.

00:19:05.770 --> 00:19:09.210
And so when you do a service
browse on one computer,

00:19:09.210 --> 00:19:11.600
you will see all the
other users' computers,

00:19:11.660 --> 00:19:13.560
whether on the local link or not.

00:19:13.560 --> 00:19:15.630
So if you want to imagine
this is kind of a diagram with

00:19:15.630 --> 00:19:18.280
the Internet in the middle,
what we do is we kind of

00:19:18.280 --> 00:19:20.350
make that sort of fade out.

00:19:20.380 --> 00:19:21.770
If it'll click.

00:19:22.180 --> 00:19:23.460
There we go.

00:19:23.460 --> 00:19:24.280
Fade out.

00:19:24.360 --> 00:19:26.680
And your applications
will sit on top of that.

00:19:26.780 --> 00:19:29.410
So when you're running your app,
you'll come up on a PowerBook.

00:19:29.410 --> 00:19:31.330
The user could be
sitting in a coffee shop.

00:19:31.440 --> 00:19:34.660
It will see the Home G5 as if they were
plugged into the same network link.

00:19:34.790 --> 00:19:38.300
And all the NAT and spanning
and all that in between them,

00:19:38.300 --> 00:19:41.610
all handled automatically,
all handled invisibly.

00:19:49.200 --> 00:19:51.670
Again, as I said,
this is fully integrated with Rendezvous.

00:19:51.950 --> 00:19:53.660
So what do you get for free?

00:19:53.770 --> 00:19:57.600
Basically, when you log into a machine,
remember there's that .Mac member

00:19:57.600 --> 00:20:00.140
account right in the preferences panel.

00:20:00.240 --> 00:20:04.090
All the other apps for that
account will be seen together.

00:20:04.200 --> 00:20:07.030
The key is what we're doing
is we're changing that default

00:20:07.030 --> 00:20:10.470
meaning of public or the,
I'm sorry, the meaning of the default

00:20:10.490 --> 00:20:13.100
browse that you saw in the
sample code for Rendezvous.

00:20:13.240 --> 00:20:15.080
So if I bring that up,

00:20:15.320 --> 00:20:18.730
Originally, it said pass the empty string
and it said for the empty string,

00:20:18.780 --> 00:20:21.570
we're going to simply insert .local.

00:20:21.670 --> 00:20:24.590
In Tiger, with .Mac domain,
what we're going to do is we're

00:20:24.590 --> 00:20:30.400
going to insert local and that member
zone like scott.members.mac.com.

00:20:30.510 --> 00:20:35.000
So, this is the code sample that existed
when Rendezvous was first introduced.

00:20:35.070 --> 00:20:36.000
No change.

00:20:36.040 --> 00:20:37.250
Exactly the same thing.

00:20:37.440 --> 00:20:40.000
But by passing that empty string,
when this comes back,

00:20:40.080 --> 00:20:42.410
you'll see that local printer
sitting on the local Ethernet

00:20:42.410 --> 00:20:45.500
connection and you'll see the work G5.

00:20:45.570 --> 00:20:48.670
It'll be returned to you and
it'll look like it's one link.

00:20:49.000 --> 00:20:52.140
This requires absolutely no effort.

00:20:52.260 --> 00:20:52.860
You're done.

00:20:52.940 --> 00:20:53.540
It just works.

00:20:56.520 --> 00:20:58.720
What if you want to go
beyond the base behavior?

00:20:58.800 --> 00:21:00.460
What if you want to actually do more?

00:21:00.590 --> 00:21:02.390
For example,
you have an application and you want

00:21:02.390 --> 00:21:03.850
to do some of this collaboration stuff.

00:21:03.960 --> 00:21:08.320
Remember I mentioned those IDs get
kind of interesting because those are

00:21:08.320 --> 00:21:11.140
the keys to find other user services.

00:21:11.140 --> 00:21:14.570
You can use their .Mac member
name to compute the domain that

00:21:14.580 --> 00:21:18.360
their services would live in and
then pass it into Rendezvous.

00:21:18.440 --> 00:21:22.620
So let's take that same code
sample and let's make two changes.

00:21:22.640 --> 00:21:24.660
First thing we'll do is we'll have
some object that gets me a name of

00:21:24.660 --> 00:21:26.440
someone else I'm supposed to browse.

00:21:26.590 --> 00:21:29.910
So in this case,
we'll say I'm supposed to browse Ryder,

00:21:30.020 --> 00:21:31.040
my last name.

00:21:31.040 --> 00:21:33.780
So comes back,
members name to browse is Ryder.

00:21:33.860 --> 00:21:38.840
So we simply compute a domain,
ryder.members.mac.com,

00:21:38.840 --> 00:21:40.820
and we pass that into Rendezvous.

00:21:40.820 --> 00:21:47.220
We will now see the services that Ryder
has published into his .Mac domain.

00:21:47.220 --> 00:21:48.820
So if you imagine you can
go through the address book,

00:21:48.850 --> 00:21:50.980
you can find buddies,
you can present any kind

00:21:50.980 --> 00:21:51.970
of person picker UI.

00:21:52.240 --> 00:21:54.840
Once you have their .Mac ID,
you have the only key you need.

00:21:54.840 --> 00:21:57.750
And with two lines of code change,
you can browse and look for

00:21:57.890 --> 00:22:00.850
your application services
running on that member subnet.

00:22:00.940 --> 00:22:02.780
And you don't care where
those computers are.

00:22:02.800 --> 00:22:05.800
As far as all your connections and all
your other hooks into the Rendezvous API,

00:22:06.050 --> 00:22:08.590
they're exactly as they always have been.

00:22:08.750 --> 00:22:10.630
So, a little bit on security.

00:22:10.830 --> 00:22:11.940
Publishing is restricted.

00:22:12.150 --> 00:22:14.340
Obviously,
you can't publish something into

00:22:14.340 --> 00:22:16.800
my domain and I can't publish
something into your domain.

00:22:16.830 --> 00:22:19.240
It's restricted to the local member zone.

00:22:19.310 --> 00:22:21.570
And basically,
if you call the Rendezvous API,

00:22:21.670 --> 00:22:24.260
all the right things are
done for you automatically.

00:22:24.450 --> 00:22:25.640
You don't have to do anything.

00:22:25.710 --> 00:22:28.100
If the user has turned
on the .Mac domain,

00:22:28.160 --> 00:22:31.570
that service will be automatically
published into their zone.

00:22:31.900 --> 00:22:34.800
Browsing, notice,
doesn't require authentication.

00:22:34.950 --> 00:22:37.860
If I know your member name,
I can browse your services.

00:22:37.860 --> 00:22:40.820
So this is why it has always
been with Rendezvous absolutely

00:22:40.820 --> 00:22:43.890
critical that if your service is
vending secure information or if

00:22:43.890 --> 00:22:47.090
it's vending personal information,
it's up to you to protect it.

00:22:47.100 --> 00:22:49.860
Put some kind of password off,
put some challenge response,

00:22:49.860 --> 00:22:51.770
whatever's appropriate for your app.

00:22:51.770 --> 00:22:55.260
It's your responsibility as it always
has been to protect the content.

00:22:55.280 --> 00:22:57.600
.Mac with Domain will help
people find each other,

00:22:57.600 --> 00:23:01.080
but it's up to you, the developers,
for whatever's the right instance for

00:23:01.080 --> 00:23:03.360
your application to protect the data.

00:23:03.380 --> 00:23:05.820
And as always, if you really want to
stay in the local link,

00:23:05.990 --> 00:23:06.820
just pass .local.

00:23:06.820 --> 00:23:09.160
You don't have to do anything else.

00:23:09.170 --> 00:23:11.510
And, you know,
I encourage you very strongly,

00:23:11.580 --> 00:23:14.080
go to session number 504 at 10:30.

00:23:14.100 --> 00:23:18.640
Stuart Cheshire has all the great
details on exactly how this works.

00:23:19.390 --> 00:23:23.340
Open Standards, DNS Update,
and T-SIG for authentication.

00:23:23.340 --> 00:23:26.100
So even the auth that we're
using to do the publish is

00:23:26.180 --> 00:23:27.920
still open standards based.

00:23:27.940 --> 00:23:31.440
So if you really wanted to,
you could do a DNS update packet

00:23:31.440 --> 00:23:34.370
from a Linux machine and you
could probably get it into work.

00:23:36.790 --> 00:23:37.700
Open Standards.

00:23:37.720 --> 00:23:40.020
Very, very important.

00:23:40.020 --> 00:23:41.860
So, Sync Services.

00:23:41.890 --> 00:23:45.250
All I want to say on this
is iSync is growing up.

00:23:45.250 --> 00:23:49.590
iSync is becoming an absolutely
killer synchronization infrastructure

00:23:49.730 --> 00:23:51.940
for you to use in your applications.

00:23:52.000 --> 00:23:53.470
.Mac is still the core.

00:23:53.650 --> 00:23:56.930
So just like it was in iSync 1
where your data went through iDisk,

00:23:56.950 --> 00:23:59.760
in the Sync Services in Tiger it
goes through your iDisk.

00:23:59.780 --> 00:24:03.010
It lives in the library folder,
but there have been a couple changes.

00:24:03.250 --> 00:24:04.810
The protocol is now pure web dev.

00:24:04.810 --> 00:24:08.310
So we're even using the same piece,
you know, web dev to move that

00:24:08.400 --> 00:24:10.290
synchronization data up and down.

00:24:10.290 --> 00:24:13.810
But we do it obviously over
SSL to protect the data.

00:24:13.860 --> 00:24:16.220
The new sync services as
Steve say and Bertrand say,

00:24:16.320 --> 00:24:18.140
you can define your own data classes.

00:24:18.430 --> 00:24:20.870
You have much greater flexibility
in performance of how syncs are

00:24:20.960 --> 00:24:24.800
triggered because the web dev protocol
is much thinner than we used to be.

00:24:24.800 --> 00:24:27.680
And this is actually
built with the .Mac Kit.

00:24:27.790 --> 00:24:30.650
So we're actually using
our own kit in the OS.

00:24:30.800 --> 00:24:32.800
So again, the same protocols,
the same technologies,

00:24:32.800 --> 00:24:36.630
the same frameworks that are available
to us that we're using to build

00:24:37.010 --> 00:24:38.880
this stuff is available to you.

00:24:39.530 --> 00:24:42.670
Now, I want to give you one quick
slide on how to use the

00:24:42.670 --> 00:24:46.740
Tiger seed that you got because,
as you said, Tiger is still a cub.

00:24:46.740 --> 00:24:47.890
He's still growing up.

00:24:47.900 --> 00:24:50.600
And so there's some things,
special steps you need to do in

00:24:50.600 --> 00:24:53.900
order to use .Mac domain and in order
to use the Sync Services in Tiger.

00:24:54.080 --> 00:24:56.900
Just for the seed,
this goes away when the product ships.

00:24:56.900 --> 00:24:59.400
We've built a little side environment.

00:24:59.570 --> 00:25:03.110
This is an environment where we run
the kind of special next generation

00:25:03.200 --> 00:25:04.400
servers that we're developing.

00:25:04.400 --> 00:25:07.890
But the key thing is this is an
active development environment.

00:25:07.910 --> 00:25:10.890
We're working on this too
as this Tiger moves forward.

00:25:10.980 --> 00:25:12.760
We're working on this
environment at the same time.

00:25:12.900 --> 00:25:15.070
So, you know,
there's a saying that one of the

00:25:15.070 --> 00:25:16.740
engineers on the team came up with.

00:25:17.060 --> 00:25:19.900
You'll laugh, you'll cry,
you'll wonder where your data went.

00:25:20.140 --> 00:25:23.650
Data durability is not
guaranteed in this environment.

00:25:23.980 --> 00:25:25.320
Things will come up and will go down.

00:25:25.380 --> 00:25:27.760
So don't use accounts with
data that you care about.

00:25:28.130 --> 00:25:30.900
Create a trial account
and play with that.

00:25:31.420 --> 00:25:34.060
To use this account,
there's one URL you can go to.

00:25:34.140 --> 00:25:35.060
This is in your seed.

00:25:35.150 --> 00:25:36.260
It's in the release notes.

00:25:36.350 --> 00:25:37.710
It's even in the UI.

00:25:37.820 --> 00:25:40.500
And it has all the instructions
on how to get things set up.

00:25:40.590 --> 00:25:42.420
And of course, this has a limited life.

00:25:42.440 --> 00:25:45.070
When Tiger comes along,
this whole environment will just kind

00:25:45.070 --> 00:25:48.310
of sink back into the sand from which it
came and everything will be worked fine

00:25:48.330 --> 00:25:50.140
in the production normal environment.

00:25:50.200 --> 00:25:53.180
However, I do want to mention one thing.

00:25:53.360 --> 00:25:57.690
In that web page you will see a button
that says "Reset this account." What the

00:25:57.690 --> 00:26:01.250
"Reset this account" does is if something
horrendous happens and you know,

00:26:01.250 --> 00:26:05.050
somehow sync services and it gets a
little wedged sideways or the DNS service

00:26:05.140 --> 00:26:08.080
gets a little wedged sideways,
go push the reset button.

00:26:08.370 --> 00:26:10.550
What that does is it just
blows away the store that's

00:26:10.550 --> 00:26:12.090
in that separate environment.

00:26:12.090 --> 00:26:14.800
It won't touch the main .Mac,
it only resets the

00:26:14.800 --> 00:26:16.380
little side environment.

00:26:16.380 --> 00:26:19.180
So it resets that special
synchronization store.

00:26:19.260 --> 00:26:21.280
That's really what it's
going to reset for you.

00:26:21.480 --> 00:26:23.380
So if you get really stuck,
just hit reset and you can

00:26:23.380 --> 00:26:24.530
kind of start over again.

00:26:24.660 --> 00:26:27.190
But remember, it does delete everything
and the web page makes that,

00:26:27.250 --> 00:26:28.200
I think, very, very clear.

00:26:32.400 --> 00:26:35.290
Everything we've talked about
up until this point is Tiger.

00:26:35.410 --> 00:26:37.500
Now I want to talk about the .Mac Kit.

00:26:37.610 --> 00:26:42.020
And remember,
the .Mac Kit runs on Jaguar, Panther,

00:26:42.020 --> 00:26:43.430
and Tiger.

00:26:48.250 --> 00:26:53.100
I think I might have said it once:
.Mac is open standards based.

00:26:53.100 --> 00:26:57.150
But there's still a relatively complex
amount of network programming that

00:26:57.150 --> 00:26:58.600
has to go on in order to use this.

00:26:58.600 --> 00:27:03.750
You know, run loops, threads, CF network,
CFXML, web services framework.

00:27:03.760 --> 00:27:07.240
There's a lot of pieces you have
to do to weld this all together.

00:27:07.300 --> 00:27:10.670
So why do all that if you don't have to?

00:27:10.730 --> 00:27:13.360
What we've done with the
.Mac Kit is we built all that

00:27:13.360 --> 00:27:15.200
on the same infrastructure.

00:27:15.200 --> 00:27:17.570
So we're using CF network,
we're using CFXML,

00:27:17.570 --> 00:27:21.740
we're doing all kind of the heavy lifting
under the covers for you on our own.

00:27:21.740 --> 00:27:24.790
Even all the way down to like
automatic proxy configuration.

00:27:24.790 --> 00:27:27.860
If the system is configured for proxies,
the kit will automatically

00:27:27.880 --> 00:27:29.210
configure itself for proxies.

00:27:29.580 --> 00:27:33.880
Literally, it's intended to be one
call and it just works.

00:27:33.880 --> 00:27:36.220
It's a simple session-style Cocoa API.

00:27:37.840 --> 00:27:41.580
We fully support, and now I'm going to
get on another horse,

00:27:41.580 --> 00:27:45.920
I mean fully support asynchronous
and synchronous operation.

00:27:45.960 --> 00:27:48.300
Any transaction that you
can do synchronously,

00:27:48.580 --> 00:27:50.580
you can do asynchronously.

00:27:50.580 --> 00:27:53.180
There's no difference in API.

00:27:55.150 --> 00:27:57.750
Other key point:
this is an embedded framework.

00:27:57.940 --> 00:27:59.740
This is not something
that comes on the OS.

00:27:59.970 --> 00:28:03.340
This is something that you can
deliver in your application package.

00:28:03.380 --> 00:28:05.440
This has a couple advantages for you.

00:28:05.440 --> 00:28:07.380
One is we move the kit forward in time.

00:28:07.380 --> 00:28:09.120
You don't have to wait for OS reps.

00:28:09.280 --> 00:28:11.490
You can deliver the kit
with your application.

00:28:11.640 --> 00:28:14.540
If you know that this version
of the kit is qualified for the

00:28:14.540 --> 00:28:17.060
version of the OS you want to ship,
you can deliver that kit

00:28:17.060 --> 00:28:20.200
yourself regardless of how
the OS changes through time.

00:28:20.240 --> 00:28:23.700
Now, of course,
it would really be bad if that kit was,

00:28:23.810 --> 00:28:25.460
"Oh, it's just five megabytes.

00:28:25.460 --> 00:28:27.540
Don't worry about it."
So we've worked very,

00:28:27.540 --> 00:28:28.250
very hard.

00:28:28.250 --> 00:28:30.340
The kit is 500K, half a meg.

00:28:30.340 --> 00:28:34.770
You know, if anybody remembers floppies,
that would actually fit on one.

00:28:34.880 --> 00:28:37.210
So this is a very
lightweight thing because,

00:28:37.210 --> 00:28:39.870
again, we're leveraging the
Mac OS infrastructure.

00:28:39.880 --> 00:28:42.350
A lot of the heavy lifting
pieces are already on the system.

00:28:44.120 --> 00:28:46.230
and as I said, Jaguar are better.

00:28:46.360 --> 00:28:49.460
10, 2,
6 and above and we'll support them all.

00:28:49.460 --> 00:28:50.240
And it's free.

00:28:50.240 --> 00:28:52.340
It's something that you
don't have to pay for.

00:28:52.430 --> 00:28:54.160
And as I've said again,
we use this today.

00:28:54.360 --> 00:28:55.990
This is something that's
in our app servers,

00:28:55.990 --> 00:28:58.430
it's in the new Sync Services in
Tiger and as time goes forward we'll

00:28:58.510 --> 00:28:59.990
continue to use it in other things.

00:29:00.340 --> 00:29:02.300
It's the same code.

00:29:02.550 --> 00:29:04.100
When should you use this?

00:29:04.120 --> 00:29:05.400
When is a good candidate for the kit?

00:29:05.400 --> 00:29:09.990
Well, if you're doing, you know,
I'll use text edit as an example here.

00:29:10.000 --> 00:29:13.200
So your users are thinking about
what they're doing in terms of file.

00:29:13.520 --> 00:29:14.580
They're opening files.

00:29:14.710 --> 00:29:15.900
They're saving files.

00:29:15.970 --> 00:29:18.980
It's a kind of a file-centric experience.

00:29:19.000 --> 00:29:20.130
You don't need to do anything.

00:29:20.130 --> 00:29:21.950
There's no special behaviors required,
right?

00:29:22.000 --> 00:29:23.260
They just want to let them save.

00:29:23.620 --> 00:29:26.560
There's a lot of work we put in over
the years to make iDisk look and feel

00:29:26.560 --> 00:29:28.060
just like a hard drive to the users.

00:29:28.310 --> 00:29:30.380
Even, you know,
the new local iDisk helps make that a

00:29:30.380 --> 00:29:32.640
rather performant experience for them.

00:29:32.680 --> 00:29:34.760
So don't use the kit for these.

00:29:34.770 --> 00:29:37.300
Use the OpenSave panels
and you're just done.

00:29:37.560 --> 00:29:38.960
There's no extra work.

00:29:39.010 --> 00:29:40.540
This is as it has been.

00:29:40.550 --> 00:29:42.910
But what we've had over the years,
we've had many developers

00:29:43.010 --> 00:29:46.140
come to us and say,
"Look, I'm not doing files here.

00:29:46.150 --> 00:29:48.470
You know,
I'm doing an HTML publishing application

00:29:48.480 --> 00:29:52.230
or we're doing a workflow application
or I want to write a really cool webcam.

00:29:52.230 --> 00:29:54.960
I don't want to, you know,
have users keep saving stuff and

00:29:55.190 --> 00:29:57.400
their iDisk to be mounted on the
desktop and things like that.

00:29:57.450 --> 00:29:58.780
That's not what I need.

00:29:58.790 --> 00:30:02.140
You know, I'm doing relatively frequent
and basically invisible

00:30:02.220 --> 00:30:03.760
background applications.

00:30:03.920 --> 00:30:05.210
That's what the kit is for.

00:30:05.360 --> 00:30:07.370
The kit is, you know,
if you want to think of it,

00:30:07.370 --> 00:30:09.800
the kit is for working with
objects and the existing

00:30:09.800 --> 00:30:11.070
systems are working with files.

00:30:12.570 --> 00:30:15.540
A good example of this is, of course,
iPhoto.

00:30:15.540 --> 00:30:18.850
When you click on the Homepage button
or you click on the .Mac Slides button,

00:30:18.850 --> 00:30:21.760
you're not really thinking of
your saving files to the iDisk.

00:30:22.020 --> 00:30:24.920
Technically,
you are uploading JPEGs to the iDisk.

00:30:24.980 --> 00:30:27.080
But from the user's perspective,
it's invisible.

00:30:27.080 --> 00:30:28.860
It's just kind of woven in.

00:30:28.860 --> 00:30:31.370
This is what the kit is intended to do.

00:30:31.790 --> 00:30:33.700
So exactly what is the kit?

00:30:33.700 --> 00:30:35.380
Well, it's three classes.

00:30:35.390 --> 00:30:37.420
The first one is DM Member Account.

00:30:37.470 --> 00:30:40.320
DM Member Account is designed to
kind of encapsulate everything

00:30:40.630 --> 00:30:42.450
about the .Mac members account.

00:30:42.520 --> 00:30:45.970
It pulls the information from the system,
it gives you methods to validate it,

00:30:45.970 --> 00:30:48.280
it gives you methods to
check if it's expiring,

00:30:48.280 --> 00:30:52.480
it gives you methods to even upgrade
it or create a new one if you wish.

00:30:52.510 --> 00:30:55.060
It's basically everything you
need to manage member accounts.

00:30:55.160 --> 00:30:56.500
He's kind of the key.

00:30:56.500 --> 00:30:58.980
You always start with a
DM Member Account and then you start

00:30:59.090 --> 00:31:02.760
doing other things like you get
a session to a particular service.

00:31:02.880 --> 00:31:05.710
So in the 1.0 of the kit,
the first session we

00:31:05.720 --> 00:31:07.460
have is iDisk sessions.

00:31:07.590 --> 00:31:11.590
And iDisk sessions manage everything that
is specific about the web dev protocol,

00:31:11.590 --> 00:31:13.940
all the state,
all the issues about dealing

00:31:13.940 --> 00:31:18.070
with prop finds and collections,
HTML parsing and unparsing and locking

00:31:18.070 --> 00:31:20.260
and vines and redirects and blah.

00:31:20.260 --> 00:31:21.360
All done.

00:31:21.510 --> 00:31:23.850
Simple Cocoa API.

00:31:25.100 --> 00:32:43.600
[Transcript missing]

00:32:43.890 --> 00:32:45.930
And I should point out,
he handles all the

00:32:45.930 --> 00:32:47.740
international issues for you.

00:32:47.750 --> 00:32:49.970
So if you're running,
the user is a Japanese user,

00:32:50.120 --> 00:32:52.850
you simply call upgrade,
they'll go into the upgrade

00:32:52.850 --> 00:32:54.360
path with Japanese text.

00:32:54.420 --> 00:32:56.440
If they're an English user,
they'll go into the upgrade

00:32:56.510 --> 00:32:57.360
path with English text.

00:32:57.630 --> 00:32:58.520
One call to you.

00:32:58.520 --> 00:33:01.000
You don't have to worry about managing
any of the other complexities.

00:33:01.060 --> 00:33:02.890
We'll do it all.

00:33:02.890 --> 00:33:08.580
And as I said,
sync or async for everything he does.

00:33:08.660 --> 00:33:10.590
And he's the key.

00:33:10.590 --> 00:33:11.950
He's how you get sessions.

00:33:12.500 --> 00:33:13.400
Let's look at some code.

00:33:13.500 --> 00:33:19.100
As I said, DM member account represents
your application to .Mac.

00:33:19.100 --> 00:33:22.040
So the first thing we ask that
you do is get a unique ID.

00:33:22.050 --> 00:33:26.140
The WWDR site has had a registration
service for developers to

00:33:26.270 --> 00:33:29.760
register unique IDs for their
applications for many years.

00:33:29.780 --> 00:33:31.320
Why is this important?

00:33:31.420 --> 00:33:33.880
Well,
if you actually look at the .Mac servers,

00:33:33.890 --> 00:33:38.440
we talk to something like 300
to 400 unique user agent type

00:33:38.510 --> 00:33:42.780
client things every day just
on the iDisk service alone.

00:33:42.790 --> 00:33:44.800
It's very hard to provide a
guaranteed quality of service

00:33:44.800 --> 00:33:47.680
because we don't know necessarily
are we talking to a Linux machine,

00:33:47.680 --> 00:33:51.120
are we talking to some user that's
just banging us from the outside.

00:33:51.230 --> 00:33:54.360
We want to make sure that we give your
apps kind of the best experience we

00:33:54.360 --> 00:33:58.260
can and it only works if we know that
it's your app that's calling into us.

00:33:58.260 --> 00:34:01.060
So by giving us this unique ID and
we actually require you to do this,

00:34:01.070 --> 00:34:04.060
it will make it really easy for us to
make sure that your apps kind of get,

00:34:04.100 --> 00:34:05.160
you know,
somewhat a little higher quality

00:34:05.160 --> 00:34:07.080
than the ones higher priority access,
if you will,

00:34:07.140 --> 00:34:08.920
for key things when there's a contention.

00:34:08.990 --> 00:34:11.730
So you need to get this ID and
pass it in the constructors,

00:34:12.020 --> 00:34:15.140
either whether you're getting an
auto-released instance or you're getting

00:34:15.140 --> 00:34:16.600
kind of your own managed instance.

00:34:16.600 --> 00:34:18.890
And I just put those spaces,
those dashes in there.

00:34:18.910 --> 00:34:21.330
This is where you get that
four-letter creator code.

00:34:21.340 --> 00:34:23.660
The URL you need is in
the docs for the kit.

00:34:23.700 --> 00:34:25.710
It's in the sample code for the kit.

00:34:26.390 --> 00:34:28.060
There's one optional parameter.

00:34:28.080 --> 00:34:30.980
If you're going to be doing
something on the iDisk that's going

00:34:30.980 --> 00:34:32.680
to be represented to the user,
in other words,

00:34:32.680 --> 00:34:34.840
you expect the user to kind
of go browsing through and it

00:34:34.890 --> 00:34:37.840
would be appropriate to see
the name of your application,

00:34:37.840 --> 00:34:40.510
you might want to set
the human readable name.

00:34:40.620 --> 00:34:42.920
And this can be any Unicode string.

00:34:42.960 --> 00:34:45.620
You know, we recommend for right now
keep it Japanese or English.

00:34:45.620 --> 00:34:47.700
But you can pass in whatever
the appropriate human

00:34:47.820 --> 00:34:49.080
readable name for your app is.

00:34:49.080 --> 00:34:51.470
This is particularly important
when you're dealing with

00:34:51.480 --> 00:34:53.910
some future functionality
coming in the library folder.

00:34:53.910 --> 00:34:55.010
And we'll talk about that.

00:34:56.730 --> 00:34:58.430
So get an account reference.

00:34:58.710 --> 00:35:02.180
So we'll simply pull it
automatically from the system.

00:35:02.210 --> 00:35:05.300
And we'll use kind of a
fictitious creator code for this.

00:35:05.330 --> 00:35:06.120
Next step.

00:35:06.170 --> 00:35:07.560
Validate those credentials.

00:35:07.620 --> 00:35:08.520
Make sure that they're good.

00:35:08.800 --> 00:35:10.560
So one call, call back here.

00:35:10.560 --> 00:35:12.380
And if it's not right,
then obviously the credentials

00:35:12.440 --> 00:35:14.780
are probably invalid and you
can tease it apart to figure

00:35:14.780 --> 00:35:16.490
out why they're not valid.

00:35:16.630 --> 00:35:18.590
Once you've got the credentials,
let's say we're going

00:35:18.590 --> 00:35:19.370
to use the IDIS service.

00:35:19.510 --> 00:35:21.310
Make sure the service exists.

00:35:21.450 --> 00:35:24.050
You can simply use the account and say,
hey, give me a list of all the

00:35:24.050 --> 00:35:25.540
services that this user has.

00:35:25.590 --> 00:35:27.980
We'll give you back an array and
you can look through the array.

00:35:28.000 --> 00:35:29.920
We provide constants for
all the things you'd expect,

00:35:29.920 --> 00:35:34.120
like sync service, or email service,
or IDIS service, or web hosting service.

00:35:34.150 --> 00:35:35.380
And we provide constants for these.

00:35:35.510 --> 00:35:36.780
So you can simply check.

00:35:36.860 --> 00:35:38.940
So in this case, hey,
he's got the IDIS service.

00:35:38.970 --> 00:35:39.700
We're ready to go.

00:35:39.700 --> 00:35:41.830
Or uh-oh,
maybe this is an email-only account.

00:35:41.850 --> 00:35:44.470
Or maybe this is an expired account.

00:35:45.500 --> 00:36:03.800
[Transcript missing]

00:36:04.030 --> 00:36:05.500
What is a session?

00:36:05.530 --> 00:36:07.980
He's designed to kind of be
a one-to-one relationship.

00:36:08.090 --> 00:36:10.500
For this member,
I want this member's iDisk service.

00:36:10.500 --> 00:36:12.730
Or for this member,
I want this member's X service.

00:36:12.760 --> 00:36:14.770
It's a one-to-one relationship.

00:36:15.040 --> 00:36:17.240
So once you create a service,
he's bound to the member

00:36:17.240 --> 00:36:18.540
from which you created him.

00:36:18.730 --> 00:36:20.960
For multiple iDisks,
for multiple members,

00:36:21.080 --> 00:36:21.820
use multiple members.

00:36:21.850 --> 00:36:25.330
Create multiple DM member accounts
and do the checks on them.

00:36:25.580 --> 00:36:29.840
offers a full feature set: upload,
download, delete, make directory, move,

00:36:29.920 --> 00:36:32.440
copy, you name it, it's in there.

00:36:33.090 --> 00:36:35.700
and he initiates transactions.

00:36:35.780 --> 00:36:37.580
Each operation,
whether it's done by a member

00:36:37.580 --> 00:36:40.120
account or by an IDIS session,
returns a transaction.

00:36:40.170 --> 00:36:41.760
We'll get a little bit deeper on that.

00:36:41.820 --> 00:36:44.280
The only difference is when
the kit is synchronous,

00:36:44.300 --> 00:36:48.100
the transaction is automatically
complete and when it's asynchronous,

00:36:48.100 --> 00:36:50.210
it may or may not be complete.

00:36:50.820 --> 00:36:53.760
So, as I said,
you need a DM member account to create.

00:36:53.790 --> 00:36:56.650
So, in this case,
we'll create a DM member account.

00:36:58.540 --> 00:37:03.620
The default state is asynchronous,
so we're going to flip it over to sync.

00:37:03.680 --> 00:37:08.360
Important safety tip: If you're expecting
things to be synchronous,

00:37:08.360 --> 00:37:10.380
remember to set it to synchronous.

00:37:10.410 --> 00:37:12.110
Otherwise,
you'll be calling into transactions

00:37:12.110 --> 00:37:14.740
as you get back and they may
not have even started yet.

00:37:14.740 --> 00:37:16.430
And if you're looking for data,
it will be kind of weird

00:37:16.430 --> 00:37:18.330
if you ask for it and the
transaction hasn't even started.

00:37:18.330 --> 00:37:20.940
We'll just give you back nothing
because we don't have anything yet.

00:37:20.970 --> 00:37:23.480
We won't give you back an error
because it hasn't errored,

00:37:23.490 --> 00:37:24.740
it just hasn't started.

00:37:24.740 --> 00:37:27.370
So make sure if you're expecting
things to be synchronous,

00:37:27.390 --> 00:37:31.490
every single instance of the .Mac
Kit always defaults to async.

00:37:31.490 --> 00:37:34.860
Put it to sync if you
expect it to be sync.

00:37:34.860 --> 00:37:36.260
So set the state to sync.

00:37:36.270 --> 00:37:37.990
And that, start firing transactions.

00:37:40.090 --> 00:37:42.500
Now, dealing with errors.

00:37:42.500 --> 00:37:45.600
Remember, the kits,
the session doesn't do errors.

00:37:45.610 --> 00:37:46.790
The transactions do.

00:37:46.960 --> 00:37:48.880
The transactions are the
guys that do all the work.

00:37:48.880 --> 00:37:51.360
So if you want to see how far
a transaction is progressing,

00:37:51.490 --> 00:37:54.810
you want to see if it has an error,
remember you're always going to be

00:37:54.820 --> 00:37:58.170
asking the transaction for those things,
not the sessions.

00:37:59.120 --> 00:38:01.460
One more important thing.

00:38:01.460 --> 00:38:04.430
The key thing about IDIS session,
something we worked very hard to do,

00:38:04.430 --> 00:38:08.300
is you can flip the state
between async and sync randomly.

00:38:08.590 --> 00:38:10.070
It's entirely up to you.

00:38:10.160 --> 00:38:12.640
So if you want to issue four
transactions asynchronously and then

00:38:12.650 --> 00:38:16.310
two transactions synchronously and then
four more transactions asynchronously,

00:38:16.310 --> 00:38:18.060
just simply flip the state around.

00:38:18.110 --> 00:38:21.560
The in-flight transactions will not
be affected by those state changes.

00:38:21.630 --> 00:38:24.740
So if you kick the thing over into
sync and you have three asyncs running,

00:38:24.740 --> 00:38:26.240
they'll just keep running.

00:38:26.290 --> 00:38:28.940
And when your sync is done,
those modifications will be queued for

00:38:29.050 --> 00:38:32.580
you and be ready to pick up when you're
done with the synchronous operation.

00:38:32.690 --> 00:38:34.720
So the kit is very,
very good about letting you

00:38:34.790 --> 00:38:35.960
change modes on the fly.

00:38:35.970 --> 00:38:37.270
You're not bound to one mode.

00:38:37.270 --> 00:38:39.550
You won't screw up things
that are in-flight or not.

00:38:43.380 --> 00:38:44.590
DM Transaction.

00:38:44.780 --> 00:38:46.460
He does all the work.

00:38:46.530 --> 00:38:49.630
He's the guy that moves the bits around,
uploads them and downloads them,

00:38:49.660 --> 00:38:53.320
encapsulates all transaction details,
all the state, all the errors,

00:38:53.320 --> 00:38:54.390
all the results.

00:38:54.390 --> 00:38:58.060
And he's created by both DM member
account and by DM IDisc session.

00:39:01.150 --> 00:39:03.920
So again, if you imagine those two
services sitting on the side,

00:39:03.920 --> 00:39:07.430
one is wrapped by DMI to session,
one is wrapped by DM member account.

00:39:07.550 --> 00:39:09.900
They both create DM transaction
and he's responsible for

00:39:09.950 --> 00:39:14.300
all the protocol specifics,
whether it's XMLRPC over

00:39:14.770 --> 00:39:16.860
SSL or WebDAV via HTTP.

00:39:16.860 --> 00:39:20.810
And you can set delegates on
him and he will call you back.

00:39:21.130 --> 00:39:22.920
So, using a transaction.

00:39:22.920 --> 00:39:26.240
Some key things you can do is you can
use them to obviously determine progress.

00:39:26.320 --> 00:39:28.360
You can ask the transaction,
"What's the content length?

00:39:28.450 --> 00:39:31.630
How much stuff do I have to
move?" And you can ask him,

00:39:31.670 --> 00:39:35.020
"How many bytes have I moved
so far?" I should point out,

00:39:35.290 --> 00:39:36.970
the kit, fully thread safe.

00:39:36.980 --> 00:39:40.000
So you can do these anytime you want,
from any number of threads that you want.

00:39:40.190 --> 00:39:43.330
You can just kind of bounce around.

00:39:43.330 --> 00:39:43.330
It's entirely up to you.

00:39:47.000 --> 00:39:49.180
If you want to see how the
transaction is doing in kind of

00:39:49.180 --> 00:39:51.460
an asynchronous polling model,
you can simply, "Hey,

00:39:51.460 --> 00:39:55.530
what's your state?" and we provide you a
whole set of constants for not started,

00:39:55.550 --> 00:39:59.890
errored, aborted, successful,
all those kinds of things.

00:40:00.200 --> 00:40:02.760
And then to get the result,
simple call the result function

00:40:02.760 --> 00:40:04.660
and we'll give you the result back.

00:40:04.720 --> 00:40:06.690
Pretty straightforward.

00:40:07.740 --> 00:40:09.260
So kind of a flow.

00:40:09.260 --> 00:40:10.560
How do you use the kit synchronously?

00:40:10.560 --> 00:40:12.720
Step one, get that DM member account.

00:40:12.740 --> 00:40:15.010
Step two, validate it.

00:40:15.120 --> 00:40:18.400
Step three,
create an iDisk session from it.

00:40:18.430 --> 00:40:19.160
So we'll pull the session.

00:40:19.160 --> 00:40:21.920
Step four, set it to sync.

00:40:21.980 --> 00:40:24.950
This is a synchronous example,
so remember, it starts async.

00:40:24.980 --> 00:40:26.200
You've got to set it to sync.

00:40:26.240 --> 00:40:27.660
It'll stay there until you set it back.

00:40:27.660 --> 00:40:30.530
Then start pulling your transactions.

00:40:30.540 --> 00:40:31.970
Go get the work done.

00:40:31.980 --> 00:40:35.750
And when the transaction is done,
you can go ahead and,

00:40:35.750 --> 00:40:39.590
if it's not an error,
pull the data object out of it.

00:40:41.310 --> 00:40:43.440
So, very simple synchronous code sample.

00:40:43.540 --> 00:40:45.760
And I'm going to go very quickly
through these codes because I'm

00:40:45.760 --> 00:40:47.130
running a little short on time.

00:40:47.130 --> 00:40:49.540
And I want to show you that all the
code that I'm showing you up here

00:40:49.720 --> 00:40:53.900
in the slides is included in the
sample code that comes with the kit.

00:40:54.000 --> 00:40:56.410
So, you know, don't worry about paying
too much attention to it.

00:40:56.440 --> 00:40:58.200
It's all there in the kit sample code.

00:40:58.200 --> 00:41:02.200
So we're going to go ahead and get a
DM member account right from the system.

00:41:02.200 --> 00:41:05.040
We're going to validate the access
to make sure that this account,

00:41:05.040 --> 00:41:07.170
the credentials are good as
they're stored in the system.

00:41:07.280 --> 00:41:10.090
If it's not, we're going to go ahead
and deal with that.

00:41:10.200 --> 00:41:12.480
In this case,
we'll set the mode to sync because

00:41:12.480 --> 00:41:14.200
this is a synchronous example.

00:41:14.200 --> 00:41:17.330
And then we'll get a session,
pull the session,

00:41:17.340 --> 00:41:19.200
go start doing some work.

00:41:20.440 --> 00:41:22.220
Once we've got that session,
we'll get a path.

00:41:22.370 --> 00:41:24.060
In this case,
we're just going to pull a picture

00:41:24.410 --> 00:41:27.660
from some name of image that's
holding the pictures folder,

00:41:27.660 --> 00:41:31.080
created somewhere else,
and we'll fire a synchronous transaction

00:41:31.080 --> 00:41:34.300
to go off and get the data down,
get the data from this path.

00:41:34.320 --> 00:41:36.840
Because this is synchronous,
the minute this call completes,

00:41:36.840 --> 00:41:38.280
we know the transaction is done.

00:41:38.390 --> 00:41:41.300
It's either succeeded or it has failed.

00:41:41.300 --> 00:41:44.520
And so what we do,
instead of having to deal with, "Okay,

00:41:44.520 --> 00:41:46.240
we'll check the HTTP code,
now check to see if the payload is there,

00:41:46.360 --> 00:41:48.300
if there's supposed to be a payload.

00:41:48.300 --> 00:41:49.840
Well, wait a minute,
this wasn't supposed to have a

00:41:49.840 --> 00:41:51.280
payload." A lot of complexity.

00:41:51.300 --> 00:41:55.100
So we provide you a very simple accessor:
"Is successful." "Is successful" –

00:41:55.100 --> 00:41:57.640
depending on what the transaction
is trying to do – has all

00:41:57.810 --> 00:42:00.310
the smarts to figure out,
"Okay, well, the right HTTP codes for

00:42:00.430 --> 00:42:03.300
the right transactions,
the right XML responses."

00:42:03.300 --> 00:42:05.300
It's all dealt with for you.

00:42:05.300 --> 00:42:08.880
Simply call "Is successful."
If "Is successful" returns true,

00:42:08.930 --> 00:42:12.260
then you know the thing worked,
you know that the result will be there,

00:42:12.260 --> 00:42:13.210
what you expect.

00:42:13.300 --> 00:42:16.300
So in this case, you can go ahead,
"Great, it was successful.

00:42:16.350 --> 00:42:18.620
I'm going to copy that picture
out and do it in this image,

00:42:18.620 --> 00:42:21.270
in this data,
and then I will go ahead and create it

00:42:21.320 --> 00:42:24.920
in this image from that data and then do
whatever it is I want to do." And if not,

00:42:24.920 --> 00:42:28.300
"It wasn't successful," now
you can start teasing it apart.

00:42:28.300 --> 00:42:29.300
"Was there a network error?

00:42:29.300 --> 00:42:31.300
Were the credentials bad?" Whatever.

00:42:32.210 --> 00:42:33.270
and off you go.

00:42:33.270 --> 00:42:34.180
So some notes.

00:42:34.180 --> 00:42:36.170
Maybe I've said this once.

00:42:36.170 --> 00:42:37.880
The kit defaults to async.

00:42:38.020 --> 00:42:42.120
If you need to use it synchronously,
set it to synchronously.

00:42:42.170 --> 00:42:44.930
But you can flip it
back and forth anytime.

00:42:45.030 --> 00:42:46.420
There's no penalty.

00:42:46.470 --> 00:42:49.820
It just means that the very
next transaction you pull

00:42:49.820 --> 00:42:51.970
will follow the new model.

00:42:52.760 --> 00:42:54.660
A bit about the result function.

00:42:54.660 --> 00:42:57.700
We worked very hard on this,
particularly for Jaguar.

00:42:57.700 --> 00:43:00.300
When you call result,
if you're downloading a lot of data,

00:43:00.500 --> 00:43:03.700
we will give you back a memory
mapped instance of that data.

00:43:03.700 --> 00:43:06.160
So this means if you have an
application you're running on a

00:43:06.160 --> 00:43:09.870
very limited footprint machine,
downloading five, you know,

00:43:09.990 --> 00:43:12.680
100 megabyte JPEGs would
be a very bad thing.

00:43:12.800 --> 00:43:15.700
You'd kill the system performance
because you're pulling all those bits in.

00:43:15.700 --> 00:43:18.770
So what we actually do is whenever
you're downloading an object,

00:43:18.770 --> 00:43:21.930
we put it on a temporary file in the
file system and then we return that

00:43:21.940 --> 00:43:23.580
object to you when you ask for it.

00:43:23.700 --> 00:43:26.700
So that means you can download as
many things as you want asynchronously

00:43:26.960 --> 00:43:29.700
and you won't cause the machine's
VM to go into swap nightmare.

00:43:29.720 --> 00:43:32.170
And then as long as you
access the objects carefully,

00:43:32.310 --> 00:43:34.700
you will be able to manage
the memory very cleanly.

00:43:34.700 --> 00:43:35.700
All done within NSData.

00:43:35.700 --> 00:43:37.700
It does no—all done
under the covers for you.

00:43:37.700 --> 00:43:38.550
No extra work.

00:43:38.700 --> 00:43:42.620
A little bit about asking for results
before the transactions are done.

00:43:42.670 --> 00:43:44.700
If the kit's running asynchronously,
if you ask the results

00:43:44.700 --> 00:43:45.430
before the transaction,
if you ask the results

00:43:45.430 --> 00:43:47.700
before it's complete,
we're going to give you what we've got.

00:43:47.700 --> 00:43:50.700
This could be a good thing if it's your
own format and you can deserialize it,

00:43:50.700 --> 00:43:52.700
a partial download yourself.

00:43:52.700 --> 00:43:55.190
But generally,
it's probably a bad idea because you

00:43:55.210 --> 00:43:56.700
can get into some strange things.

00:43:56.700 --> 00:43:57.700
"Well,
what do you mean I don't have this?"

00:43:57.700 --> 00:44:00.820
You can get to some interesting
bugs where sometimes it works and

00:44:00.820 --> 00:44:03.690
sometimes it doesn't work simply based
on how far the transaction's gone.

00:44:03.700 --> 00:44:05.700
You should always check.

00:44:05.700 --> 00:44:06.700
Make sure that you've
got the whole thing.

00:44:06.700 --> 00:44:08.920
Just simply check that, you know,
content length and bytes

00:44:09.090 --> 00:44:11.640
downloaded so far to see if
you've got everything you need.

00:44:11.700 --> 00:44:13.700
But you can do it if you want.

00:44:13.810 --> 00:44:15.990
And if you call, you know, "call result,
call result,

00:44:15.990 --> 00:44:18.490
call result," we'll simply give
you however many bytes we've

00:44:18.490 --> 00:44:19.560
gotten up until that point.

00:44:19.750 --> 00:44:21.700
You can do progressive
downloads if you wish.

00:44:21.840 --> 00:44:23.700
Just be careful.

00:44:23.960 --> 00:44:26.600
And again,
use DM member account to pre-flight.

00:44:26.640 --> 00:44:30.040
We recommend checking three things:
validate the credentials,

00:44:30.070 --> 00:44:33.170
make sure the service you need exists,
and of course,

00:44:33.260 --> 00:44:36.750
it's really convenient for the users to
check to see if the account is expiring.

00:44:36.800 --> 00:44:39.040
It's kind of bad if they go through
all this stuff and they're really

00:44:39.080 --> 00:44:41.800
using your app and it's just great,
and then they launch it the next day

00:44:41.800 --> 00:44:43.550
and they get this message saying,
"Oh, by the way,

00:44:43.550 --> 00:44:45.850
all the work you did yesterday,
you can't get to it because your

00:44:45.850 --> 00:44:48.450
account just expired." So if
the user's account is expiring

00:44:48.580 --> 00:44:51.280
within two or three or ten days,
it's probably a good thing

00:44:51.280 --> 00:44:54.000
to show them some UI saying,
"Hey, we noticed your account's

00:44:54.090 --> 00:44:55.800
about to expire,
and then we give you all the

00:44:55.880 --> 00:44:57.800
methods you would need to upgrade
that account automatically.

00:44:57.800 --> 00:45:01.430
You make one call if they say yes,
and we'll just do the work." And again,

00:45:01.550 --> 00:45:02.800
you can do this lazily.

00:45:02.800 --> 00:45:03.970
The kit supports async.

00:45:04.060 --> 00:45:06.670
You can just fire these things off,
forget about them,

00:45:06.670 --> 00:45:08.800
and they'll come back when they're done.

00:45:08.800 --> 00:45:09.910
So let's talk about async.

00:45:09.910 --> 00:45:10.800
How do you use this?

00:45:10.800 --> 00:45:12.800
It's almost exactly the same as sync.

00:45:12.800 --> 00:45:16.440
Create a DM member account,
perform those validations.

00:45:17.340 --> 00:45:19.220
Create a session.

00:45:20.700 --> 00:45:33.200
[Transcript missing]

00:45:38.200 --> 00:47:05.000
[Transcript missing]

00:47:07.090 --> 00:47:10.380
and of course the transactions
where you get the data objects.

00:47:10.380 --> 00:47:11.800
So an asynchronous sample.

00:47:11.830 --> 00:47:15.170
Again, setup is exactly the same as it
was except this time we're not

00:47:15.170 --> 00:47:17.120
going to call set as synchronous.

00:47:17.220 --> 00:47:19.630
So we're going to just get,
imagine we got the DM member

00:47:19.630 --> 00:47:21.560
account the same as we did before.

00:47:21.610 --> 00:47:23.240
But now we're going to set the delegate.

00:47:23.300 --> 00:47:26.020
In that case it's optional
but it's usually a good idea.

00:47:26.100 --> 00:47:27.600
You can set the delegate up.

00:47:27.630 --> 00:47:29.260
Let me talk a little bit
about retaining right now.

00:47:29.330 --> 00:47:31.700
Well, I'll save that.

00:47:32.220 --> 00:47:34.480
Set the delegate,
create some path that holds

00:47:34.690 --> 00:47:36.780
the information I want,
in this case, you know,

00:47:36.780 --> 00:47:40.560
the same name of image we did before,
fire transaction,

00:47:40.610 --> 00:47:43.170
and we go off and we get the image.

00:47:43.340 --> 00:47:45.800
Then the delegate will run
along and it will get messaged

00:47:45.800 --> 00:47:47.100
on the big state changes.

00:47:47.100 --> 00:47:50.370
So if everything worked,
you'll get a message back,

00:47:50.370 --> 00:47:52.920
transaction was successful,
there was no error.

00:47:52.940 --> 00:47:54.990
Notice we give you the transaction back.

00:47:55.220 --> 00:47:58.260
This means you don't even need
to retain those transactions.

00:47:58.280 --> 00:47:59.260
We'll do that for you.

00:47:59.260 --> 00:48:02.840
So you can imagine if something
in your code style works this way,

00:48:02.860 --> 00:48:06.190
you could fire a transaction in
one particular object and then

00:48:06.190 --> 00:48:07.660
the whole thing can go away.

00:48:07.720 --> 00:48:10.570
And then the delegate object will
get called back and they can get

00:48:10.570 --> 00:48:12.090
the payload out of the machine.

00:48:12.180 --> 00:48:14.600
So you don't have to do the extra
work of holding the transactions

00:48:14.610 --> 00:48:17.390
and rendezvousing the response
with the object that initiated

00:48:17.390 --> 00:48:18.960
it and keeping track of all that.

00:48:19.020 --> 00:48:20.820
It's all done for you
automatically under the hood.

00:48:20.820 --> 00:48:22.290
You don't have to hold on to anything.

00:48:22.410 --> 00:48:23.800
We'll give you back what
you need to get back.

00:48:25.630 --> 00:48:27.490
from an error, obviously,
will give you the same

00:48:27.490 --> 00:48:28.450
thing back for errors.

00:48:28.700 --> 00:48:31.200
And for canceled,
will give you back the same

00:48:31.200 --> 00:48:33.860
thing if you take an asynchronous
transaction and cancel it.

00:48:33.900 --> 00:48:36.880
Remember, if you set a delegate
on a synchronous mode,

00:48:36.910 --> 00:48:40.060
it's not going to call
back because it can't.

00:48:40.190 --> 00:48:41.540
It's synchronous.

00:48:41.610 --> 00:48:45.840
Each transaction can have
a different delegate.

00:48:45.840 --> 00:48:49.540
Set the session,
you set it on the session,

00:48:49.540 --> 00:48:51.670
the very next transaction that you
fire will message that delegate.

00:48:52.750 --> 00:48:56.230
With polling, you can use this to make a
very responsive user interface.

00:48:56.350 --> 00:48:58.670
You can imagine, set up a timer,
every second or so just

00:48:58.670 --> 00:49:01.540
pull the transaction,
"Hey, how many bytes have you moved

00:49:01.640 --> 00:49:04.570
so far?" And when it's done,
you'll get a nice message and it makes

00:49:04.570 --> 00:49:08.540
it real easy from a code flow just to go
ahead and pull him out of the UE because

00:49:08.610 --> 00:49:13.580
he's all done and go start dealing with
the object that he was trying to move.

00:49:13.580 --> 00:49:17.260
Now, hopefully that seems pretty
straightforward and pretty simple,

00:49:17.380 --> 00:49:19.500
but we want to make it even simpler.

00:49:19.620 --> 00:49:22.460
So what I want to offer you
here is the one-line adoption.

00:49:22.460 --> 00:49:26.100
to use the .mac kit with
changing one line of code.

00:49:26.530 --> 00:49:28.640
We offer NS File Manager replacement.

00:49:28.670 --> 00:49:31.520
So there are many really cool apps
out there today that kind of integrate

00:49:31.520 --> 00:49:33.400
with .Mac and they did it on their own.

00:49:33.400 --> 00:49:36.370
They figured, "Okay, WebDef file system,
I can mount the volume and I can do this

00:49:36.380 --> 00:49:39.140
and I can do that and I can move it and
I can do that and I can do that." Done.

00:49:39.240 --> 00:49:43.680
It's like,
"Woof." So what we're going to let you do

00:49:43.680 --> 00:49:50.710
is if you're using the NS File Manager,
take the instance where you create the

00:49:50.710 --> 00:49:50.710
file manager and replace it with that.

00:49:50.700 --> 00:51:07.900
[Transcript missing]

00:51:08.590 --> 00:51:11.000
So with that, what I'd like to do is
invite Ryan Parks up,

00:51:11.040 --> 00:51:13.230
who's a lead engineer,
and Ryan and I are going to do a very

00:51:13.280 --> 00:51:16.500
quick demo for you of kind of some
sample code that you get with the kit.

00:51:16.500 --> 00:51:18.500
Thanks Scott.

00:51:18.500 --> 00:51:23.090
Can we have demo one please?

00:51:24.750 --> 00:51:29.850
So I want to share a very
brief little story here.

00:51:29.910 --> 00:51:32.580
This sample app implements
kind of the basic things you

00:51:32.610 --> 00:51:33.780
would expect to be able to see.

00:51:33.780 --> 00:51:36.580
You can look at account
status pulled from the system.

00:51:36.580 --> 00:51:38.040
You can do web uploads, backups.

00:51:38.260 --> 00:51:40.040
It's kind of intended
to be a cookbook app,

00:51:40.110 --> 00:51:41.980
code that you can crib very simple.

00:51:42.010 --> 00:51:43.470
And I wrote it.

00:51:43.500 --> 00:51:45.380
So if it stinks, I apologize.

00:51:45.380 --> 00:51:48.260
In fact, more than once I've had my team
come into my office and run

00:51:48.420 --> 00:51:51.230
out of my office shrieking,
"He's using the compiler again.

00:51:51.230 --> 00:51:51.600
Run!

00:51:51.600 --> 00:51:54.160
Run for the hills!" So managers
shouldn't write code.

00:51:54.170 --> 00:51:55.840
It scares engineers.

00:51:55.910 --> 00:51:59.550
But very simply intended,
the kit's designed to do the kind

00:51:59.550 --> 00:52:01.150
of basic things you would need.

00:52:01.240 --> 00:52:03.750
If you wanted to provide, say,
browsing the pictures folder,

00:52:03.890 --> 00:52:04.550
you can click.

00:52:04.550 --> 00:52:06.820
You can get a list of all
the pictures that exist.

00:52:06.830 --> 00:52:07.850
You can scroll down.

00:52:07.850 --> 00:52:09.500
You can find some pic.

00:52:09.500 --> 00:52:13.170
Notice if I turn off the synchronous bit,
now you can see the progressors

00:52:13.250 --> 00:52:14.800
reflect their thing here.

00:52:14.800 --> 00:52:17.170
If I click very quickly,
maybe I can get them.

00:52:17.250 --> 00:52:18.380
Well, there we go.

00:52:18.380 --> 00:52:21.310
You can see I had two
transactions in flight at once.

00:52:21.440 --> 00:52:23.620
So this is using the asynchronous mode.

00:52:23.620 --> 00:52:26.400
So you can see, for example,
the polling for a responsive Vue.

00:52:26.400 --> 00:52:29.370
The whole app that you see
here for doing web uploads,

00:52:29.370 --> 00:52:32.690
for publishing if you want
to publish an HTML page,

00:52:32.740 --> 00:52:34.000
upload demo page.

00:52:34.000 --> 00:52:38.180
And then when you're all done with that,
you can click view it and launch Safari,

00:52:38.180 --> 00:52:40.360
and you can see the demo page.

00:52:40.530 --> 00:52:43.870
All the code to do all of
this is maybe 30 lines spread

00:52:44.500 --> 00:52:45.990
out through a couple classes.

00:52:46.060 --> 00:52:47.910
So the kit's very, very simple to use.

00:52:47.910 --> 00:52:50.100
And what Ryan's going to do now
is going to show you a little

00:52:50.180 --> 00:52:51.230
bit more complicated example.

00:52:51.400 --> 00:52:52.610
So you really want to get in the
intimacies of exactly what you're doing.

00:52:52.610 --> 00:52:54.060
So you're going to get a
little bit more complicated.

00:52:54.080 --> 00:52:54.080
So you're going to get a
little bit more complicated.

00:52:54.080 --> 00:52:54.460
So you're going to get a
little bit more complicated.

00:52:54.460 --> 00:52:55.080
So you're going to get a
little bit more complicated.

00:52:55.080 --> 00:52:56.070
So you're going to get a
little bit more complicated.

00:52:56.080 --> 00:52:56.230
So you're going to get a little
bit more complicated in terms of

00:52:56.360 --> 00:52:57.080
exactly what the kit is doing,
you can use this.

00:52:57.080 --> 00:52:58.080
Thanks.

00:52:58.080 --> 00:52:58.650
Yeah, Scott jokes about his
code writing ability,

00:52:58.650 --> 00:52:59.080
but he's actually very good.

00:53:03.510 --> 00:53:05.280
You've seen the samples.

00:53:05.290 --> 00:53:08.140
We also have another sample
app that ships with the kit.

00:53:08.150 --> 00:53:10.040
It's called iDisk Browser.

00:53:10.060 --> 00:53:12.540
And as you see,
the default mode is asynchronous,

00:53:12.680 --> 00:53:14.500
just like the kit itself.

00:53:14.510 --> 00:53:18.900
And we can actually toggle between
asynchronous and synchronous if

00:53:18.900 --> 00:53:22.720
we navigate through the software
folder and the directories.

00:53:22.770 --> 00:53:25.160
All of the prop finds are
happening asynchronously,

00:53:25.160 --> 00:53:27.800
that the quota calculation
is happening asynchronously,

00:53:27.800 --> 00:53:30.560
and we can just flip back and forth.

00:53:30.580 --> 00:53:32.540
And actually,
this is a good app to look at

00:53:32.880 --> 00:53:36.570
if you're interested in learning
more about using a session,

00:53:36.570 --> 00:53:39.210
the same session,
and flipping between async and sync,

00:53:39.210 --> 00:53:43.100
because we're just using one iDisk
session instance in this app,

00:53:43.420 --> 00:53:47.270
and we just flip between the two modes.

00:53:48.900 --> 00:53:54.620
Basically, you double-click to
download in this app and

00:53:55.650 --> 00:53:59.770
If we do an upload here,
you can see the polling, the UI progress,

00:53:59.770 --> 00:54:01.920
but we get an error.

00:54:01.920 --> 00:54:05.950
And even though it had written
a little bit up to this iDisk,

00:54:06.000 --> 00:54:08.840
it deleted it properly at the end.

00:54:08.920 --> 00:54:13.560
And that delete is an example of
kind of a carefree async transaction.

00:54:13.560 --> 00:54:16.660
That was fired right when we
learned that the transaction failed.

00:54:16.660 --> 00:54:22.940
We told the caller that it had failed
but fired this delete immediately.

00:54:22.940 --> 00:54:25.160
And we didn't have to retain
that damn transaction.

00:54:25.160 --> 00:54:27.060
We didn't have to do
any special handling.

00:54:27.060 --> 00:54:28.720
It just happened on its own.

00:54:28.780 --> 00:54:30.630
Basically,
once you fire a DM transaction,

00:54:30.750 --> 00:54:33.660
if you're not interested in the results,
you just want it to be a best

00:54:33.660 --> 00:54:36.740
efforts attempt to correct
whatever problem there was.

00:54:36.740 --> 00:54:37.890
You don't have to worry about it anymore.

00:54:41.320 --> 00:54:44.190
So this is a good app to look at
if you want to learn more about

00:54:44.190 --> 00:54:46.840
basically what's available to you.

00:54:46.840 --> 00:54:50.400
If you open this side window,
you can see the iDisk

00:54:50.550 --> 00:54:54.860
properties available for the
various files and folders.

00:54:54.980 --> 00:54:57.280
You see things like content length,
content type,

00:54:57.640 --> 00:54:59.530
whether it's a collection or not.

00:54:59.530 --> 00:55:02.640
And there's an extended
attributes at path method

00:55:02.780 --> 00:55:04.280
which gives you all this data.

00:55:04.440 --> 00:55:05.610
It's pretty useful.

00:55:05.920 --> 00:55:09.240
Also, as you click around in this
app and do various things,

00:55:09.400 --> 00:55:13.450
upload things,
you can see what's happening in this

00:55:13.870 --> 00:55:18.410
log and basically get an idea of what
the differences are between the async

00:55:18.410 --> 00:55:20.230
and the synchronous call models.

00:55:20.380 --> 00:55:24.780
So I encourage you to take a look at the
source here and appreciate it because

00:55:24.780 --> 00:55:28.910
it really flexes all the various modes
you can use from polling to delegate

00:55:28.910 --> 00:55:31.880
callbacks to straight synchronous calls.

00:55:32.450 --> 00:55:32.910
Great.

00:55:32.910 --> 00:55:33.830
Thanks, Ryan.

00:55:34.540 --> 00:55:35.680
Thanks very much.

00:55:40.280 --> 00:55:42.920
So again with the samples for the kit,
we wanted to provide you either a

00:55:42.920 --> 00:55:45.520
cookbook if you just want to kind of
crib the objects right out and start

00:55:45.520 --> 00:55:48.200
using the code immediately in your thing,
you can do that with the .DM samples.

00:55:48.200 --> 00:55:50.600
Or if you really want to get into
the intimacies of exactly how

00:55:50.600 --> 00:55:54.190
the kit works and what you can
and can't do and how easy it is,

00:55:54.200 --> 00:55:56.200
we gave you the full browser app as well.

00:55:56.310 --> 00:55:59.200
And again, both the source for those
is included with the kit.

00:55:59.200 --> 00:56:03.200
So I talked about the library folder and
the special behavior that it exhibits.

00:56:03.200 --> 00:56:05.200
I want to kind of double
click a little bit on it,

00:56:05.200 --> 00:56:09.180
but I do want to emphasize this
behavior comes with Tiger ship.

00:56:09.270 --> 00:56:11.200
This is not something you have today.

00:56:11.270 --> 00:56:13.200
Everything I've talked about
with regards to the .Mac kit,

00:56:13.200 --> 00:56:16.970
you know, the Jaguar support, using it,
the browser apps, all of that,

00:56:16.970 --> 00:56:18.200
the kit is 1.0.

00:56:18.200 --> 00:56:20.200
This is not a developer preview.

00:56:20.200 --> 00:56:21.970
This is the shipping instance.

00:56:22.210 --> 00:56:25.310
We encourage you, use this in your apps,
deploy this to your customers,

00:56:25.320 --> 00:56:26.170
get it out there.

00:56:26.370 --> 00:56:30.200
But these are little extra functionality
you're going to get when Tiger ships.

00:56:30.200 --> 00:56:32.340
So specifically,
what we're going to let your

00:56:32.420 --> 00:56:37.290
application do is create a folder
inside of library application

00:56:37.740 --> 00:56:40.610
support is to hold its own data.

00:56:40.860 --> 00:56:45.300
But you must use the name that you
set with that convenience application.

00:56:45.300 --> 00:56:47.590
In other words,
if your application is called

00:56:47.590 --> 00:56:50.370
My Great App with spaces,
then you must set, you know,

00:56:50.610 --> 00:56:53.360
My Great App and you must
create a folder called

00:56:53.460 --> 00:56:56.200
My Space Great Space App inside of there.

00:56:56.200 --> 00:56:57.340
They have to match.

00:56:57.470 --> 00:56:58.990
And again,
this is simply to help the user in

00:56:58.990 --> 00:57:02.280
organizing things when they want to see
which of their software applications

00:57:02.290 --> 00:57:05.470
with the names they know them by
are storing things on their iDisc

00:57:05.530 --> 00:57:07.480
and using things on their iDisc.

00:57:07.480 --> 00:57:09.770
But as I said earlier,
remember the library folder

00:57:09.770 --> 00:57:11.200
and its contents are protected.

00:57:11.560 --> 00:57:14.650
This means that you are
responsible for this folder.

00:57:14.650 --> 00:57:18.700
There's not a simple way for the user
to go in and delete its contents.

00:57:18.920 --> 00:57:21.290
So if, you know,
you're putting things here, keep one,

00:57:21.290 --> 00:57:25.370
we'd recommend keep them small, and two,
make sure that you give the user a way to

00:57:25.370 --> 00:57:30.040
delete them or to clean them up if they
don't want them to live there anymore.

00:57:30.040 --> 00:57:32.290
Only your app will be
allowed to read and write.

00:57:32.480 --> 00:57:34.470
So other apps can't stomp on this folder.

00:57:34.490 --> 00:57:37.130
The user can't accidentally
stomp on this folder.

00:57:37.240 --> 00:57:39.780
So, you know, again,
why would you do this in the first place?

00:57:39.910 --> 00:57:42.680
This is a great place to keep
that small amount of state data.

00:57:42.700 --> 00:57:45.300
You know, you have multiple installs of
your app running on multiple

00:57:45.300 --> 00:57:46.430
machines for the user.

00:57:46.640 --> 00:57:48.380
And they're, you know,
using the .mac domain.

00:57:48.380 --> 00:57:52.120
They all know about each other and you
can do really cool peer-to-peer stuff.

00:57:52.120 --> 00:57:53.880
But you want to keep a
little bit of extra state.

00:57:54.090 --> 00:57:56.580
You can do that in the
library application folder.

00:57:56.580 --> 00:57:58.780
I mean, one really cool example is you
could write a webcam thing,

00:57:58.780 --> 00:58:01.220
for example, that uses the .mac domain.

00:58:01.250 --> 00:58:02.910
And if it finds the
two machines directly,

00:58:02.910 --> 00:58:06.200
then it goes straight through and
it does a peer-to-peer connection,

00:58:06.230 --> 00:58:07.000
high speed.

00:58:07.030 --> 00:58:09.820
But if you, you know,
could always fall back and also

00:58:09.820 --> 00:58:14.040
do the direct web publishing stuff
using the kit and uploading to iDisk.

00:58:14.120 --> 00:58:16.260
So good place to keep state stuff.

00:58:16.290 --> 00:58:18.190
And of course, as I said,
it's protected from

00:58:18.190 --> 00:58:19.590
accidental modification.

00:58:19.610 --> 00:58:22.140
You can't--user can't
accidentally screw it up.

00:58:22.140 --> 00:58:25.020
So, how do you get it?

00:58:25.120 --> 00:58:26.580
Remember, the kit's not part of the OS.

00:58:26.790 --> 00:58:28.130
This is an embedded framework.

00:58:28.220 --> 00:58:31.230
It's a 500K framework that you need
to deliver with your application as

00:58:31.240 --> 00:58:34.040
part of your application wrapper.

00:58:34.260 --> 00:58:35.200
Real simple.

00:58:35.250 --> 00:58:38.130
Go to developer.apple.com,
log in with your developer

00:58:38.130 --> 00:58:42.300
ID that they give you,
and in the downloads area starting today

00:58:42.300 --> 00:58:46.020
or for some value very close to today,
you should see an image there

00:58:46.030 --> 00:58:49.490
called the .Mac Kit and you
should be able to download it.

00:58:49.700 --> 00:58:52.240
There is some common sense
licensing that you need to

00:58:52.240 --> 00:58:53.840
agree to when you use the kit.

00:58:53.870 --> 00:58:55.540
This is again nothing you would expect.

00:58:55.640 --> 00:58:58.480
Of course, I can encapsulate it on a
slide and the lawyers have

00:58:58.480 --> 00:59:02.250
expanded it into like ten pages,
but it's pretty simple stuff.

00:59:02.390 --> 00:59:04.090
Don't build bad karma.

00:59:04.310 --> 00:59:06.950
Don't build applications
that do bad things.

00:59:07.070 --> 00:59:08.150
This is not part of the license.

00:59:08.160 --> 00:59:09.460
It's not what the kit is intended for.

00:59:09.590 --> 00:59:11.610
You shouldn't do it.

00:59:11.800 --> 00:59:14.160
Member data cannot be
collected or used centrally.

00:59:14.160 --> 00:59:17.850
Again, the kit does not give you any way
to access the member's password.

00:59:17.860 --> 00:59:20.220
It's an important privacy
thing to point out.

00:59:20.240 --> 00:59:22.820
The DM member account
encapsulates it all.

00:59:22.820 --> 00:59:24.240
There's really no reason
for you to need it.

00:59:24.300 --> 00:59:27.320
In a couple rare cases where you may
need to capture those credentials,

00:59:27.320 --> 00:59:28.580
you can pass them in directly.

00:59:28.580 --> 00:59:30.660
But the kit won't give you
access to the password.

00:59:30.660 --> 00:59:34.560
It will give you access to the member
name because obviously with .mac domain,

00:59:34.560 --> 00:59:36.760
there's a lot of reasons why
having that name would be useful.

00:59:36.760 --> 00:59:39.460
But don't send them to a central server.

00:59:39.460 --> 00:59:40.470
Keep them in your application.

00:59:40.620 --> 00:59:41.860
You can keep them in
your preference file.

00:59:41.860 --> 00:59:43.240
You can keep them locally on the system.

00:59:43.240 --> 00:59:45.820
Just don't send them back to
some central marketing database.

00:59:45.820 --> 00:59:48.860
It's kind of a violation of just good
karma from a privacy perspective.

00:59:48.860 --> 00:59:52.180
Don't create, you know,
don't cause members to violate

00:59:52.180 --> 00:59:53.060
their terms of service.

00:59:53.210 --> 00:59:54.770
You know,
don't upload a gigabyte and download

00:59:54.770 --> 00:59:57.250
a gigabyte and upload a gigabyte and
download a gigabyte in the background.

00:59:57.260 --> 00:59:58.800
You know, be creative.

00:59:58.800 --> 01:00:00.080
You know, do things carefully.

01:00:00.080 --> 01:00:03.350
Uploading and downloading gigabytes is
just not a good thing to do for the user,

01:00:03.390 --> 01:00:04.420
even the user's perspective.

01:00:04.420 --> 01:00:07.470
Use a creator code for
each app that you write.

01:00:07.680 --> 01:00:10.580
So if you're a company and you have
two or three software products and you

01:00:10.580 --> 01:00:12.670
want to use the kit in all of them,
which is totally great,

01:00:12.700 --> 01:00:16.180
just make sure you use a unique code
for each one of those applications.

01:00:16.180 --> 01:00:18.420
That way, you know, again,
we can make sure that we give

01:00:18.420 --> 01:00:19.360
them the best experience.

01:00:19.360 --> 01:00:22.220
Download the latest
release from the website.

01:00:22.240 --> 01:00:26.800
Again, as I said, Jaguar and higher,
1026, Panther, Tiger.

01:00:26.800 --> 01:00:29.220
It's our intent that hopefully
we're going to support

01:00:29.410 --> 01:00:30.600
current shipping minus one.

01:00:30.600 --> 01:00:32.860
So when Tiger comes
out as the shipping OS,

01:00:32.860 --> 01:00:34.750
we hope to stay with
Panther and Tiger and then

01:00:35.000 --> 01:00:36.140
whatever comes beyond Tiger.

01:00:36.140 --> 01:00:38.490
We want to try to keep both
of those out there for you.

01:00:38.500 --> 01:00:40.610
But again,
because this is an embedded framework,

01:00:40.620 --> 01:00:42.830
if you have a version of
the kit that works for you,

01:00:42.870 --> 01:00:43.950
go ahead and deliver it.

01:00:44.060 --> 01:00:46.300
You can deliver it with your
application as long as it's functional.

01:00:46.300 --> 01:00:47.080
It's not part of the OS.

01:00:47.180 --> 01:00:49.770
And again,
it includes all the sample projects

01:00:49.890 --> 01:00:52.140
and all the sample code we've
been talking about up here and all

01:00:52.140 --> 01:00:55.240
the documentation for the kit as
well as obviously the kit itself.

01:00:55.260 --> 01:00:58.780
And it's available today
or very close to today.

01:00:58.780 --> 01:01:01.130
We still have to get the damage online,
but by tomorrow, let's say,

01:01:01.210 --> 01:01:02.520
at the latest, it'll be up there.

01:01:04.250 --> 01:01:09.420
So, kind of to wrap up,
the formula is with Mac OS Tiger and

01:01:09.420 --> 01:01:14.640
.Mac domain and the new sync services
and all the .Mac integration that's been

01:01:14.640 --> 01:01:17.600
available in the US for a long time,
there's a lot of really cool

01:01:17.600 --> 01:01:19.200
things that the OS does.

01:01:19.400 --> 01:01:21.550
When you add that to
your application using,

01:01:21.550 --> 01:01:25.200
you know, core data or core video and
all the other excessive things,

01:01:25.240 --> 01:01:28.160
there's some really, really cool,
cool products out there.

01:01:28.200 --> 01:01:32.220
Now, we're giving you the same tools and
the same capabilities that we've had

01:01:32.290 --> 01:01:36.970
with an Apple and iApp and iSync and
iMovie and iPhoto and all those places

01:01:37.080 --> 01:01:41.080
to actually have things that equal,
you know, that zen.

01:01:41.490 --> 01:01:43.910
That ability to have
the user's local world,

01:01:44.170 --> 01:01:47.340
their local iLife bridge into
their online life and back

01:01:47.470 --> 01:01:49.140
and forth and seamlessly.

01:01:49.210 --> 01:01:51.220
You can, you know,
you want to do a direct web,

01:01:51.310 --> 01:01:52.200
one button push.

01:01:52.200 --> 01:01:53.200
We have all the tools here.

01:01:53.200 --> 01:01:56.180
You need to do it synchronously
or asynchronously.

01:01:56.200 --> 01:01:58.650
You know, the kinds of apps you
can create here are just,

01:01:58.650 --> 01:02:00.140
it's staggering kind of thing.

01:02:00.200 --> 01:02:02.200
We've had a lot of ideas
kicking stuff around.

01:02:02.200 --> 01:02:06.350
But ultimately,
you can build something you can't build

01:02:06.350 --> 01:02:11.200
on any other OS and you can do so very,
very simply using one kit.

01:02:13.020 --> 01:02:13.900
Who to contact?

01:02:14.410 --> 01:02:18.020
Obviously Xavier is a
great place within WWDR.

01:02:18.020 --> 01:02:19.990
David Conway,
who's our marketing guru here,

01:02:20.140 --> 01:02:23.660
is another good place if you have very
specific business things you want to do

01:02:23.660 --> 01:02:25.700
with the kit or you want to do with .Mac.

01:02:25.700 --> 01:02:27.220
David's a great place to go.

01:02:27.280 --> 01:02:30.650
There's two other URLs,
email addresses I want to give you.

01:02:30.650 --> 01:02:33.190
I do want to caveat these are
both kind of the black hole.

01:02:33.520 --> 01:02:35.910
Messages go in, they're read,
but we don't necessarily going

01:02:36.050 --> 01:02:39.220
to respond because of the
volume of email that we expect.

01:02:39.220 --> 01:02:40.610
One is .Mac Kit feedback.

01:02:40.770 --> 01:02:41.870
This is not for bugs.

01:02:42.030 --> 01:02:42.880
Obviously you have radar.

01:02:42.880 --> 01:02:46.630
You have all that infrastructure
for issuing bug reports.

01:02:46.700 --> 01:02:50.210
This is, "Hey, the API is great,
but we'd really like to see

01:02:50.320 --> 01:02:53.050
the API for this particular
function go this way." Or,

01:02:53.120 --> 01:02:57.010
"You know, I could really use this method
on the DM transaction." So if

01:02:57.060 --> 01:03:01.960
we're getting those kind of direct
API feature requests for the kit,

01:03:01.970 --> 01:03:04.870
use .Mac Kit at Mac.com.

01:03:04.870 --> 01:03:08.790
And just like consumers
in the .Mac website,

01:03:08.790 --> 01:03:12.860
there's a feedback section where
consumers can ask for consumer features.

01:03:12.880 --> 01:03:19.350
So if you notice, the kit is not about,
you know, taking existing web stuff and

01:03:19.360 --> 01:03:21.000
wrapping ways interfacing to it.

01:03:21.000 --> 01:03:24.270
The kit's about giving you new
things that you can do when you have

01:03:24.280 --> 01:03:27.510
servers in the sky that are always
on and always monitored and offer,

01:03:27.510 --> 01:03:30.480
you know,
live support with unified account.

01:03:30.480 --> 01:03:32.660
So if there's some really cool
things you'd like to see from,

01:03:32.660 --> 01:03:34.980
you know,
.Mac from a developer's perspective or,

01:03:35.130 --> 01:03:38.440
you know, kind of under the covers,
it's not necessarily HTML in a browser,

01:03:38.480 --> 01:03:41.140
let's go ahead and kick those
into .Mac Zen and we'll try

01:03:41.140 --> 01:03:42.020
to get them into the kit.

01:03:42.020 --> 01:03:48.830
So with that having been said,
I'd like to invite, if I can click, yes.

01:03:48.830 --> 01:03:53.090
I'd like to invite the .Mac
infrastructure team up here on stage

01:03:53.150 --> 01:03:55.100
and we can take your questions.