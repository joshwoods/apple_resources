WEBVTT

00:00:15.830 --> 00:00:17.040
Good morning.

00:00:17.040 --> 00:00:18.040
I'm Wiley Hodges.

00:00:18.040 --> 00:00:21.260
I'm the Senior Product Line Manager for
Developer Products at Apple.

00:00:21.260 --> 00:00:25.120
And one of the many things that I'm
responsible for at Apple is product

00:00:25.120 --> 00:00:27.320
marketing for Java on Mac OS X.

00:00:27.440 --> 00:00:30.880
You know, we're really excited about what
we've been doing with Java,

00:00:30.880 --> 00:00:34.120
but I'm also extremely excited
about what many of our partners

00:00:34.120 --> 00:00:35.680
have been doing with Java.

00:00:35.700 --> 00:00:39.400
And in particular,
a very important Java partner is Sun.

00:00:39.400 --> 00:00:42.970
And I'm very pleased that
this morning I can introduce

00:00:43.070 --> 00:00:45.920
Bob Brewin and Carl Quinn,
who will be talking about

00:00:45.920 --> 00:00:48.960
Java Studio Creator on Mac OS X,
which we're extremely pleased

00:00:48.990 --> 00:00:50.430
to see coming to our platform.

00:00:50.540 --> 00:00:52.520
So, with no further ado.

00:00:52.600 --> 00:00:54.510
Thanks, Wiley.

00:00:57.800 --> 00:01:04.440
Thank you very much.

00:01:04.450 --> 00:01:04.450
So we're going to be talking
about iChat on the PDP-4.

00:01:04.450 --> 00:01:04.450
Oh, sorry.

00:01:04.830 --> 00:01:06.860
So I'm Robert Brewin.

00:01:06.860 --> 00:01:11.640
I'm a distinguished engineer at Sun,
chief architect for Project Rave,

00:01:11.640 --> 00:01:13.410
which is now called
Sun Java Studio Creator.

00:01:13.510 --> 00:01:16.310
Carl Quinn is one of our senior
engineers responsible for some of

00:01:16.350 --> 00:01:18.180
the core technology inside of it.

00:01:18.180 --> 00:01:21.140
So he's going to be giving a
little demo a little later.

00:01:21.810 --> 00:01:27.590
And so what we're going to talk about is,
so why did we do Creator?

00:01:27.680 --> 00:01:29.930
What things were we
interested in targeting?

00:01:29.930 --> 00:01:31.460
What kind of customers
were we looking at?

00:01:31.460 --> 00:01:32.700
What kind of developers?

00:01:32.700 --> 00:01:36.530
We'll talk about the
project creator itself,

00:01:36.550 --> 00:01:41.650
give us an idea of what kind of
quality measures we had for it,

00:01:41.710 --> 00:01:44.300
what kind of features we wanted,
what kind of capabilities we

00:01:44.300 --> 00:01:46.270
thought we could offer developers.

00:01:46.300 --> 00:01:59.100
We'll talk about
Java development on Mac OS X.

00:01:59.100 --> 00:01:59.100
By the way, if I say Mac OS X,
just throw something at me.

00:01:59.100 --> 00:01:59.100
Preferably a G4 PowerBook because
I need a new one.

00:01:59.100 --> 00:01:59.100
Thank you.

00:01:59.100 --> 00:02:02.160
Then we'll do a product demo and
we'll let Carl fly with that.

00:02:02.390 --> 00:02:04.230
Then I'll talk a little
bit about the roadmap,

00:02:04.230 --> 00:02:07.080
where we're going,
the kinds of things we're trying to do

00:02:07.080 --> 00:02:10.040
in the Sun Java Studio Creator product.

00:02:10.450 --> 00:02:12.220
So let's take a look
at market segmentation.

00:02:12.220 --> 00:02:14.820
One of the things that we wanted
to do was try to understand what

00:02:14.820 --> 00:02:17.890
sort of developers are out there,
what kind of applications

00:02:17.890 --> 00:02:19.400
are they trying to create.

00:02:19.510 --> 00:02:27.140
And so one can create any kind of
arbitrary diagram or spreadsheet

00:02:27.140 --> 00:02:29.080
or something to try to capture it.

00:02:29.170 --> 00:02:31.400
And what we did is we
came up with a quadrant.

00:02:31.400 --> 00:02:34.400
And the quadrant is
pretty self-explanatory.

00:02:34.400 --> 00:02:36.810
If we take a look along the bottom,
the bottom axis talks about

00:02:36.900 --> 00:02:38.400
application complexity.

00:02:38.400 --> 00:02:40.320
How complex is that application?

00:02:40.380 --> 00:02:43.400
Going up in the vertical axis,
we talk about code,

00:02:43.400 --> 00:02:45.380
how much coding is actually required.

00:02:45.380 --> 00:02:49.370
And we divided this into four quadrants.

00:02:49.840 --> 00:02:53.140
And for this diverse group, we looked at,
for instance, the technologist base.

00:02:53.290 --> 00:02:56.980
So these are people that do a lot
of coding and they love to code,

00:02:57.080 --> 00:03:01.190
but the applications they create
are not necessarily that complex.

00:03:01.740 --> 00:03:03.740
Technologists love the latest thing.

00:03:03.770 --> 00:03:06.990
They love to go to java.sun.com,
play with the latest APIs.

00:03:07.000 --> 00:03:08.270
They love open source.

00:03:08.380 --> 00:03:10.040
They like free stuff.

00:03:10.110 --> 00:03:13.250
These are the kinds of people that
create a lot of the innovative

00:03:13.250 --> 00:03:17.400
technologies and products that we see
coming out on java.com and other places,

00:03:17.400 --> 00:03:19.740
including some of the java.net sources.

00:03:19.850 --> 00:03:22.750
Enterprise architects, on the other hand.

00:03:23.210 --> 00:03:25.060
I have a lot of code
in their applications.

00:03:25.060 --> 00:03:26.740
They're very knowledgeable,
but the applications

00:03:26.740 --> 00:03:28.880
are incredibly complex.

00:03:28.880 --> 00:03:31.600
For those kinds of applications,
we're looking at industrial strength.

00:03:31.600 --> 00:03:34.200
These are the kinds of
applications that run Wall Street.

00:03:34.200 --> 00:03:36.970
These are the kind of applications
that run the telephone services,

00:03:37.030 --> 00:03:39.040
the things that make
your mobile phones work.

00:03:39.040 --> 00:03:41.220
They need architectural tools.

00:03:41.220 --> 00:03:42.860
They need UML modeling.

00:03:42.860 --> 00:03:46.770
They need things to go ahead and
allow them to performance tune

00:03:46.860 --> 00:03:50.880
and scale the applications for the
enterprise and so that the dial

00:03:50.880 --> 00:03:51.990
tone never stops on your phone.

00:03:52.420 --> 00:03:57.530
The integrators are people who take
potentially very complex applications

00:03:57.540 --> 00:03:59.300
and assemble them together.

00:03:59.300 --> 00:04:02.300
So these are people that take existing
applications and they're doing the,

00:04:02.300 --> 00:04:05.290
there's a lot of technology that
is just emerging in terms of

00:04:05.320 --> 00:04:09.930
business process modeling and so on,
where people are taking

00:04:09.930 --> 00:04:14.890
pre-built components,
some of them very large scale,

00:04:14.890 --> 00:04:14.890
putting them together to
create end user solutions.

00:04:17.300 --> 00:04:20.900
Corporate developer space
is all about productivity.

00:04:20.900 --> 00:04:23.500
These are the people who are
doing maybe not so much code.

00:04:23.500 --> 00:04:28.260
They're reusing existing
infrastructure and artifacts.

00:04:28.260 --> 00:04:31.740
And the application complexity is
not necessarily that high either.

00:04:31.740 --> 00:04:36.050
Again, these are people who are primarily
building applications that a lot of

00:04:36.050 --> 00:04:38.160
you see within your IT infrastructure.

00:04:38.160 --> 00:04:41.250
So people that are
doing travel accounting,

00:04:41.260 --> 00:04:44.880
people that are doing payroll management,
things like that.

00:04:45.080 --> 00:04:47.160
For them,
a lot of times complete solutions

00:04:47.160 --> 00:04:48.440
are extremely important.

00:04:48.440 --> 00:04:52.640
They may not be experts in the
sense of programming experts,

00:04:52.640 --> 00:04:55.530
they may not have PhDs
in computer science,

00:04:55.530 --> 00:04:58.290
what they would like to do is
they would like to be at one CD,

00:04:58.290 --> 00:05:02.230
install it and have everything they need,
all the tools, all the run times,

00:05:02.240 --> 00:05:06.820
everything they need to actually get
productive and develop applications.

00:05:06.820 --> 00:05:08.840
Simplified development.

00:05:08.840 --> 00:05:12.000
We talk about the
corporate developer space.

00:05:12.000 --> 00:05:16.170
One of the things are that they're not
necessarily your typical developers.

00:05:16.230 --> 00:05:17.630
They could be domain experts.

00:05:17.680 --> 00:05:19.850
If we take a look at the spectrum,
and we'll take a look

00:05:19.920 --> 00:05:22.280
at that quadrant again,
if we take a look at the spectrum

00:05:22.280 --> 00:05:25.010
of what corporate developers do,
they may range from people that

00:05:25.010 --> 00:05:28.350
are doing spreadsheet macros,
all the way up to people

00:05:28.440 --> 00:05:31.310
who are using 4G languages,
Delphi,

00:05:31.320 --> 00:05:34.120
Visual Basic and other code languages.

00:05:34.120 --> 00:05:35.180
So they could be domain experts.

00:05:35.180 --> 00:05:38.560
They may be people that understand,
for instance, the mortgage business.

00:05:38.560 --> 00:05:41.070
They may be people that understand HR.

00:05:41.080 --> 00:05:41.940
They may be people that
understand the financial system.

00:05:41.990 --> 00:05:45.470
understand finance,
but they may not be typical developers.

00:05:49.650 --> 00:05:54.850
The applications they create typically
are not producers of business logic.

00:05:54.920 --> 00:05:56.500
They are in fact consumers of them.

00:05:56.500 --> 00:05:57.970
So they consume a lot of data.

00:05:58.030 --> 00:05:59.740
They consume business services.

00:05:59.740 --> 00:06:04.220
They consume a lot of the application
artifacts that the enterprise developers

00:06:04.220 --> 00:06:06.520
create or the technologists create.

00:06:06.640 --> 00:06:09.260
Typically,
you'll take a look at a corporate

00:06:09.290 --> 00:06:13.040
developer and if we contrast that to
the way an enterprise developer works,

00:06:13.040 --> 00:06:15.710
an enterprise developer works
typically from the back to the front.

00:06:15.740 --> 00:06:18.400
So I've done enterprise development.

00:06:18.400 --> 00:06:21.670
So I've sat down with UML modeling
tools and I've devised this really

00:06:21.740 --> 00:06:25.020
large and complex architecture,
inspected all out and then built

00:06:25.020 --> 00:06:27.890
this huge thing and then started
grafting UIs on top of it.

00:06:28.600 --> 00:06:30.600
Corporate developers
typically work in the reverse.

00:06:30.600 --> 00:06:33.710
They have an idea in their
mind about how this application

00:06:33.710 --> 00:06:37.310
is going to look and behave,
they design the user interface and then

00:06:37.310 --> 00:06:39.750
they wire all the pieces in beneath it.

00:06:40.620 --> 00:06:43.540
And usually what they're trying
to get is a rich UI because again,

00:06:43.540 --> 00:06:46.340
they're visualizing this thing as this
is what I want my end users to see

00:06:46.340 --> 00:06:49.210
and that end user may be only them,
could be a department,

00:06:49.270 --> 00:06:51.190
could be a work group,
but generally it's a

00:06:51.190 --> 00:06:52.530
smaller group of people.

00:06:54.100 --> 00:06:57.260
The problem when we take a look
at the application space today

00:06:57.290 --> 00:07:00.500
is that the bar to enter to
Java with most IDEs is too high.

00:07:00.500 --> 00:07:08.490
So if I take a look at a technologist or
I take a look at an enterprise architect,

00:07:08.490 --> 00:07:08.490
the value they get is
richness and flexibility.

00:07:08.710 --> 00:07:12.840
While for the corporate developer,
it's simplicity and understandability.

00:07:12.840 --> 00:07:17.250
One of the examples that I like
to use is the difference between

00:07:17.250 --> 00:07:19.700
a Cessna plane and a 747.

00:07:19.740 --> 00:07:22.610
Both of them will get me
from point A to point B.

00:07:22.750 --> 00:07:25.800
Both of them have a small subset
of controls that's the same.

00:07:25.800 --> 00:07:28.750
But the amount of experience,
the amount of understanding of

00:07:28.750 --> 00:07:30.280
all the way that these systems
work together has to be a lot

00:07:30.460 --> 00:07:34.700
higher to get a 747 to fly from,
let's say, LA to New York.

00:07:34.700 --> 00:07:36.700
But a Cessna will work just the same way.

00:07:37.690 --> 00:07:41.070
Again, you know,
the idea here is to provide a simple

00:07:41.150 --> 00:07:44.410
interface and a set of abstractions
that the corporate developer can work

00:07:44.410 --> 00:07:47.700
with to develop their applications.

00:07:47.700 --> 00:07:49.700
And again, like I said,
they need a complete solution.

00:07:49.700 --> 00:07:53.490
So one of the things we're
looking for is a one-stop shop.

00:07:55.280 --> 00:07:59.080
So like we're talking about with a plane,
if we're going to develop an

00:07:59.080 --> 00:08:02.620
application or a tool in a runtime
infrastructure that is simple,

00:08:02.620 --> 00:08:04.680
all that power still
needs to be available.

00:08:04.680 --> 00:08:07.860
One of the things that we've run into
is it's not just corporate developers

00:08:07.930 --> 00:08:09.480
that are using tools like this.

00:08:09.790 --> 00:08:12.090
Enterprise developers and
technologists are using them as well.

00:08:12.100 --> 00:08:12.460
Why?

00:08:12.460 --> 00:08:16.390
Well, if I'm tasked with creating
a large J2E infrastructure,

00:08:16.390 --> 00:08:20.690
you know, I'm spending 40% of my time
developing JSP front ends.

00:08:20.700 --> 00:08:22.140
Well, I'm wasting my time.

00:08:22.760 --> 00:08:24.670
I should be spending all my
brain power working on the hard

00:08:24.670 --> 00:08:25.810
problems and solving those.

00:08:25.820 --> 00:08:28.760
So the richness of the
platform needs to be available.

00:08:28.800 --> 00:08:31.290
I need to be able to get underneath
the covers if I know what I'm doing.

00:08:31.310 --> 00:08:33.780
And if I'm going to take that
application and move it from a corporate

00:08:33.780 --> 00:08:36.730
developer space into somebody who
really understands what they're doing,

00:08:36.740 --> 00:08:40.030
I need to be able to get to the code and
I'm able to dive down and then tweak it.

00:08:40.080 --> 00:08:43.920
But the use of the complex
APIs should not be required.

00:08:43.920 --> 00:08:45.910
I shouldn't have to
be able to understand,

00:08:45.910 --> 00:08:48.530
for instance,
what a Java server face's lifecycle is in

00:08:48.530 --> 00:08:50.820
order to actually develop an application.

00:08:50.820 --> 00:08:52.700
I shouldn't have to know it.

00:08:52.720 --> 00:08:55.740
all the platform APIs are either.

00:08:56.240 --> 00:08:57.860
The resulting code should be obvious.

00:08:57.860 --> 00:09:00.240
I should be able to look at the
code and understand intuitively

00:09:00.240 --> 00:09:01.600
what it's supposed to be doing.

00:09:01.600 --> 00:09:03.950
If I'm setting a property or
if I'm responding to an event,

00:09:03.970 --> 00:09:05.650
I should be able to have
a basic understanding of

00:09:05.650 --> 00:09:06.700
how that's going to work.

00:09:06.700 --> 00:09:09.070
For people that are
transitioning from languages like

00:09:09.150 --> 00:09:11.960
Visual Basic or coming from Delphi,
they should be able to look at

00:09:11.960 --> 00:09:15.500
the code that we generate and have
that same understanding of what

00:09:15.500 --> 00:09:17.700
that thing is supposed to be doing.

00:09:18.170 --> 00:09:20.290
Understanding higher-order
concept is not required.

00:09:20.290 --> 00:09:24.100
I shouldn't have to know what a visitor
pattern is in order to be productive.

00:09:24.350 --> 00:09:26.800
Again,
when I talked about upfront design,

00:09:26.800 --> 00:09:34.810
it's important to understand that I'm
going to design the interfaces and

00:09:34.880 --> 00:09:37.100
then I'm going to configure properties
and set the attributes as I'm moving

00:09:37.100 --> 00:09:37.100
forward and then plug in the logic.

00:09:40.030 --> 00:09:42.200
So simplified coding
doesn't mean no code.

00:09:42.200 --> 00:09:46.640
One of the things that we're really
looking at is when we generate code,

00:09:46.640 --> 00:09:48.590
that code is exactly
what you expected to do.

00:09:48.600 --> 00:09:51.880
We're not going to be hidden anything
or there's no proprietary XML layer

00:09:51.880 --> 00:09:54.040
which is driving this entire system.

00:09:54.110 --> 00:09:58.970
One of the things that we did when
we first started this project is we

00:09:58.970 --> 00:10:04.220
took a look at the entire spectrum
of all developer products out there,

00:10:04.220 --> 00:10:04.700
specifically ones which were targeting
the corporate developer space.

00:10:05.090 --> 00:10:07.710
When we did that,
we saw a lot of companies which

00:10:07.710 --> 00:10:12.150
were of the ilk where you would
design some interface or specify

00:10:12.150 --> 00:10:15.110
some attributes for a system,
and it would generate this

00:10:15.110 --> 00:10:19.020
huge meta model in XML that
you could never move forward.

00:10:19.020 --> 00:10:20.060
You could never update.

00:10:20.060 --> 00:10:20.940
You could never manage.

00:10:20.940 --> 00:10:23.460
What the developers were
telling us were also that,

00:10:23.460 --> 00:10:24.900
well, they want the code.

00:10:24.920 --> 00:10:27.820
So I may be able to quickly
prototype an application,

00:10:27.900 --> 00:10:30.400
but I want to be able
to get to the Java code.

00:10:30.400 --> 00:10:32.960
I want to be able to get to the
XML descriptors if I know what I'm

00:10:32.960 --> 00:10:37.190
doing and if I need to migrate this
and scale it to the enterprise.

00:10:37.500 --> 00:10:42.460
So one of the things and the general
tenets that we have for Creator is

00:10:42.460 --> 00:10:44.860
we just generate pure Java code.

00:10:44.910 --> 00:10:47.120
If we need XML descriptors,
they're there.

00:10:47.120 --> 00:10:49.020
We might hide them behind
really pretty veneers,

00:10:49.070 --> 00:10:54.170
which are our visual tools,
but they're all there so I can take

00:10:54.170 --> 00:11:01.240
that application and then I can move it,
scale it to somewhere else.

00:11:01.240 --> 00:11:01.240
So let's talk about Creator.

00:11:01.240 --> 00:11:01.240
Excuse me.

00:11:03.310 --> 00:11:06.120
So Sun Java Studio Creator,
which used to be called Project Raive,

00:11:06.180 --> 00:11:08.900
is designed for corporate developers.

00:11:08.950 --> 00:11:11.780
It's designed for people who want
to be immediately productive,

00:11:11.790 --> 00:11:14.000
people who are going to be
developing applications or

00:11:14.030 --> 00:11:16.850
people who are experiencing going
to be prototyping applications,

00:11:16.960 --> 00:11:19.400
but they don't necessarily
want to learn the plumbing.

00:11:19.400 --> 00:11:26.380
They don't necessarily have to learn and
read the multi-hundred page JSF spec,

00:11:26.390 --> 00:11:30.940
JSP, JSTL, servlets,
J2EE and Java to understand

00:11:31.170 --> 00:11:31.770
what they're doing.

00:11:32.490 --> 00:11:36.550
It's the first IDE that's completely
built from bottom to top on Java,

00:11:36.550 --> 00:11:40.460
100%. It's designed to be
around the idea of what you see,

00:11:40.460 --> 00:11:43.030
what you get, highly productive,
drag and drop.

00:11:43.270 --> 00:11:45.340
Everything when you see what you
see on the screen is what you'll

00:11:45.340 --> 00:11:46.480
see in the end application.

00:11:46.480 --> 00:11:49.210
The other thing is that we,
as I described,

00:11:49.230 --> 00:11:52.520
people design applications
in terms of the front,

00:11:52.550 --> 00:11:55.260
the user interface,
and they wire it in behind.

00:11:55.320 --> 00:11:58.640
So one of the things that we had to do
was make sure that you can get to data,

00:11:58.640 --> 00:12:01.680
you can get to services and easily
drag them and drop them and put them

00:12:01.680 --> 00:12:04.330
and wire them into your application.

00:12:04.480 --> 00:12:08.120
The other thing is that unless
you're building just a single page,

00:12:08.120 --> 00:12:10.640
you need to understand how that page is
going to interact with some other page.

00:12:10.640 --> 00:12:13.150
How am I going to get
from point A to point B?

00:12:13.260 --> 00:12:17.040
And so, again, we could just throw the
XML descriptors at them,

00:12:17.040 --> 00:12:20.620
but we thought the visual page navigation
would be a much better way to go.

00:12:20.660 --> 00:12:24.680
Again, the idea being is that this
whole environment is visual.

00:12:28.990 --> 00:12:31.540
So Java standards,
one of the things that Sun of

00:12:31.540 --> 00:12:34.440
course is really key on is
everything should be standard.

00:12:34.440 --> 00:12:35.900
I should be able to
take this application.

00:12:35.900 --> 00:12:39.400
I should be able to run it on any server
that you have that's J2EE compliant.

00:12:39.400 --> 00:12:40.540
And that's something that we've done.

00:12:40.540 --> 00:12:42.900
So you can take a
Java Studio Creator application.

00:12:42.900 --> 00:12:47.760
Not only can I take that code
and move it into any development

00:12:47.760 --> 00:12:53.410
environment that supports Java,
I can take the resulting application

00:12:53.410 --> 00:12:53.410
and deploy it to any J2EE compliant
server and have it run.

00:12:53.950 --> 00:12:56.550
So for that we use Java Server Faces.

00:12:56.610 --> 00:12:58.140
If you're also going to
the Java 1 conference,

00:12:58.140 --> 00:13:02.900
you'll see there's a lot of hype and a
lot of conference material about JSF.

00:13:02.900 --> 00:13:10.660
JSF provides a simplified component
model and runtime that allows people

00:13:10.660 --> 00:13:10.660
to create web applications easier.

00:13:10.860 --> 00:13:12.140
We use JDBC ROSATS.

00:13:12.140 --> 00:13:15.880
JDBC ROSATS is a new
JSR that just went final,

00:13:15.960 --> 00:13:21.290
which holds the promise of a simplified
JDBC access through a ROSAT model that

00:13:21.290 --> 00:13:26.350
allows things like the supports web
applications to support data caching.

00:13:28.320 --> 00:13:33.680
So when we talked about our quadrant,
obviously Sun Java Studio Creator targets

00:13:33.680 --> 00:13:35.680
the lower left,
corporate developers.

00:13:35.680 --> 00:13:38.410
And again, it's a range,
so it doesn't necessarily mean these

00:13:38.410 --> 00:13:41.370
are all going to be people who are
doing scripting and spreadsheets,

00:13:41.370 --> 00:13:44.300
but it does include people
that are doing enterprise work.

00:13:44.300 --> 00:13:48.720
It does include people
doing technology work.

00:13:48.730 --> 00:13:53.380
But the idea is to make them as
productive as possible and to make

00:13:53.380 --> 00:13:53.380
people develop applications in Java.

00:13:54.180 --> 00:14:00.300
So Sun Java Studio Creator is what
we're going to go ahead and demo today.

00:14:01.100 --> 00:14:06.500
And what it has is it's
based on NetBeans 3.6.

00:14:06.500 --> 00:14:10.420
One of the advantages of NetBeans
is it provides us a mature product.

00:14:10.470 --> 00:14:13.230
A lot of the people that are using
our product are people who are

00:14:13.230 --> 00:14:14.870
in fact experienced developers.

00:14:14.990 --> 00:14:17.430
Once they develop that application,
they're going to want to have the

00:14:17.440 --> 00:14:20.990
same sort of capabilities they can
get with any standard Java IDE.

00:14:21.050 --> 00:14:24.470
By building on NetBeans,
we get a mature product

00:14:24.470 --> 00:14:26.520
that performs as our base.

00:14:29.040 --> 00:14:31.070
Again, what I talked about before,
it's just Java.

00:14:31.120 --> 00:14:34.440
So take the application,
deploy it to any J2E app server.

00:14:34.440 --> 00:14:37.240
It's open in any
Java development environment.

00:14:37.240 --> 00:14:39.560
So I can open this thing in JBuilder,
I can open it in Xcode,

00:14:39.610 --> 00:14:42.460
I can open it in WebSphere Developer,
any of those products.

00:14:42.460 --> 00:14:45.050
And if you have any kind
of Java programming skill,

00:14:45.050 --> 00:14:46.330
it works everywhere.

00:14:47.200 --> 00:14:49.590
And the other thing, of course,
is it's perfect for the Apple developer.

00:14:49.620 --> 00:14:54.590
So an interesting characteristic of
our team is we started out a priori

00:14:54.590 --> 00:14:56.890
thinking of the Mac platforms.

00:14:56.900 --> 00:14:59.960
So a third of our developers are
all building and developing and

00:14:59.960 --> 00:15:01.960
testing this application on the Mac.

00:15:02.000 --> 00:15:05.270
So rather than building it on, well,
I don't know, Solaris,

00:15:05.330 --> 00:15:08.100
and then porting it to
all the various platforms,

00:15:08.100 --> 00:15:13.500
we are in fact building it every day and
testing it every day on Mac OS X as well

00:15:13.520 --> 00:15:17.060
as Windows as well as Solaris and Linux.

00:15:17.480 --> 00:15:20.530
The other thing is that we've
leveraged the latest platforms that

00:15:20.700 --> 00:15:23.220
the Apple engineers have put together.

00:15:23.220 --> 00:15:26.080
In fact, you're going to watch Carl crash
and burn here in a few minutes

00:15:26.110 --> 00:15:30.400
because being an engineer,
he decided to download what?

00:15:30.400 --> 00:15:34.360
DP3 DP3 last night for the demo.

00:15:34.440 --> 00:15:36.910
So we'll see how that works.

00:15:37.300 --> 00:15:40.970
So he is the last surviving
member of the Flying Wallenda,

00:15:40.970 --> 00:15:42.580
if you remember them.

00:15:42.580 --> 00:15:45.300
So one of the other things we
talked about is complete solutions.

00:15:45.300 --> 00:15:47.500
You've got to be able to develop,
you have to be able to

00:15:47.500 --> 00:15:48.520
deploy right out of the box.

00:15:48.550 --> 00:15:51.230
You can't expect people to go
hunting around and determining what

00:15:51.230 --> 00:15:54.040
the right platform is to run on,
the right tool, the right JDK.

00:15:54.040 --> 00:15:56.580
So in the box,
when you get Studio Creator,

00:15:56.690 --> 00:15:59.250
you get Sun Java Studio Creator,
you get the

00:15:59.260 --> 00:16:02.170
Java Application Server Platform Edition
8,

00:16:02.170 --> 00:16:06.040
which is the latest version
of the J2E1.4 runtime.

00:16:07.630 --> 00:16:10.250
You get a lightweight test DBMS which
allows you to go ahead and very

00:16:10.250 --> 00:16:13.100
quickly prototype and develop
applications against the database.

00:16:13.100 --> 00:16:19.480
However,
we include a number of data direct

00:16:19.480 --> 00:16:23.490
drivers in the box for you for Oracle,
Sybase which I know run

00:16:23.490 --> 00:16:23.490
on the Mac platform,
DB2 and SQL Server if you're daring.

00:16:24.070 --> 00:16:25.180
Full developer productivity.

00:16:25.180 --> 00:16:29.040
One of the things you get when
you buy Creator and you join the

00:16:29.040 --> 00:16:32.940
Software Developer Network program
is you get a website,

00:16:32.940 --> 00:16:37.370
you get tutorials, you get forums,
code samples, support,

00:16:37.370 --> 00:16:41.210
and that support will
be growing over time.

00:16:41.210 --> 00:16:41.210
Excuse me.

00:16:42.220 --> 00:16:45.500
So it's a complete package.

00:16:45.500 --> 00:16:48.380
Now a number of you are going
here to the Apple conference,

00:16:48.380 --> 00:16:54.300
but one of the things you can
do is next door at Java 1,

00:16:54.300 --> 00:16:55.540
we're offering a deal.

00:16:55.740 --> 00:17:00.580
And kind of fortunate for you is you
don't need a badge to get the deal,

00:17:00.580 --> 00:17:02.860
because if you walk
into the south entrance,

00:17:02.860 --> 00:17:06.590
you can get "SunJava
Studio Creator Field Guide," which is the

00:17:06.590 --> 00:17:11.340
first book to come out for Creator in it,
you get the full package

00:17:11.340 --> 00:17:14.440
of Creator based on the
Software Developer Network subscription

00:17:14.480 --> 00:17:17.820
program,
which includes everything you see there.

00:17:17.820 --> 00:17:22.600
Now normally, the subscription program
for Creator will be $99.

00:17:22.720 --> 00:17:25.100
Today, if you buy this book,
which is about $40,

00:17:25.160 --> 00:17:29.770
you get that $99 subscription
as well as the book for $49.95.

00:17:29.890 --> 00:17:33.470
So if you have a chance during lunch,
run over there and pick up the book.

00:17:33.590 --> 00:17:36.450
Now we'll talk about the
release plans for the Mac,

00:17:36.560 --> 00:17:40.700
but the interesting thing about the
way we've done this is that any license

00:17:40.700 --> 00:17:45.550
key you get with this product when
the Mac version is available in terms

00:17:45.550 --> 00:17:48.500
of an FCS product for final release,
that same license key you get with

00:17:48.500 --> 00:17:50.140
this will work with that product.

00:17:50.140 --> 00:17:53.080
So again, you save yourself a few bucks
here if you go out and get this.

00:17:53.110 --> 00:17:55.480
And not only that,
you get a pretty good book to

00:17:55.480 --> 00:17:58.420
describe what the system's about.

00:17:58.420 --> 00:18:01.870
So let's talk about
Java development on Mac OS X.

00:18:02.180 --> 00:18:04.610
So Java is a core component of
the Mac OS X platform environment,

00:18:04.610 --> 00:18:05.240
obviously.

00:18:05.240 --> 00:18:06.690
I mean, you've been hearing about
a lot of the conference.

00:18:06.710 --> 00:18:08.500
I was at the keynote yesterday.

00:18:08.580 --> 00:18:10.070
So it's a full version of Java 2.

00:18:10.200 --> 00:18:12.600
He's building it on DP3,
as you heard a little earlier.

00:18:12.600 --> 00:18:13.980
It's optimized for the platform.

00:18:13.980 --> 00:18:16.290
And Java applications
are first-class citizen.

00:18:16.300 --> 00:18:19.350
And we've actually taken that
and proven that by building

00:18:19.350 --> 00:18:21.300
Creator on the Mac OS X platform.

00:18:23.400 --> 00:18:27.520
Obviously, we have a bunch of Unix
hacks in our group,

00:18:27.540 --> 00:18:31.840
and so they really enjoy the fact
that Mac OS X is built on Unix.

00:18:31.900 --> 00:18:34.100
So all of those tools and the
capabilities you get and the

00:18:34.180 --> 00:18:37.030
portability and scalability you get
with Unix is all available to them,

00:18:37.040 --> 00:18:39.600
as well as the full
complement of the J2E stuff.

00:18:39.620 --> 00:18:42.200
And what can you say
about ease of development?

00:18:42.200 --> 00:18:43.180
I think you guys have it.

00:18:43.180 --> 00:18:46.600
Something that we've tried to aspire to.

00:18:46.620 --> 00:18:51.580
So this particular development
environment provides a rich set

00:18:51.600 --> 00:18:54.840
of development tools Obviously,
if you shop around,

00:18:54.840 --> 00:18:56.680
you'll find out you get Apple X code.

00:18:56.680 --> 00:18:58.080
There's Java Studio Creator.

00:18:58.080 --> 00:18:59.440
Sun has a number of products.

00:18:59.440 --> 00:19:03.060
NetBeans and IBM and others have
products for the Mac platform.

00:19:03.060 --> 00:19:07.220
And as I described earlier,
any application you create with Creator,

00:19:07.220 --> 00:19:09.720
if you wanted to,
you could develop it in those codes.

00:19:09.730 --> 00:19:10.400
And we've done that.

00:19:10.400 --> 00:19:12.770
We've actually moved our code,
and we have some people that have

00:19:12.770 --> 00:19:16.210
done development on the Mac and
taken Creator code in there.

00:19:18.590 --> 00:19:20.800
So what I'm going to do is I'm
going to turn it over to Carl,

00:19:20.800 --> 00:19:23.200
and we're going to watch him fly.

00:19:23.200 --> 00:19:26.800
And he's going to go ahead and show
you a little bit about Creator.

00:19:26.800 --> 00:19:29.430
He's going to talk you a
little through the system,

00:19:29.430 --> 00:19:31.500
talk about the environment,
talk about the

00:19:31.580 --> 00:19:33.850
applications we can create,
and give you sort of a general

00:19:33.850 --> 00:19:35.390
run-through of what we can expect.

00:19:35.400 --> 00:19:36.320
Okay.

00:19:36.320 --> 00:19:36.900
Hi.

00:19:36.930 --> 00:19:39.900
I'm going to first start out by
showing a partial application

00:19:39.970 --> 00:19:42.640
that we've built with Creator,
and I'll just kind of walk you

00:19:42.640 --> 00:19:45.290
through the functionality and the
look and feel of this application.

00:19:45.300 --> 00:19:47.800
So this is kind of a media zone.

00:19:48.500 --> 00:19:50.830
The resolution looks
pretty good up there.

00:19:50.840 --> 00:19:54.940
It's sort of a website where you can
go and log in and purchase things,

00:19:54.940 --> 00:19:59.160
sort of an iTunes for poor man's iTunes,
I guess.

00:19:59.160 --> 00:20:05.960
So we start out with a page with some
sort of featured media on the front page.

00:20:05.960 --> 00:20:10.180
And on the right,
there is a tree control that lets you

00:20:10.180 --> 00:20:15.710
browse different categories of content,
artwork, images.

00:20:22.140 --> 00:20:23.860
Service a little slow right now.

00:20:23.900 --> 00:20:26.840
There we go.

00:20:26.870 --> 00:20:29.970
So we can browse through photographs.

00:20:33.050 --> 00:20:35.200
Preview some of the content.

00:20:35.200 --> 00:20:40.850
If anybody was at last year's Java one,
they can't forget Taurus Victory,

00:20:40.880 --> 00:20:43.110
saving the demo.

00:20:44.600 --> 00:20:47.420
So at this point we can't purchase
any content we haven't logged in,

00:20:47.420 --> 00:20:49.200
it doesn't know who we are.

00:20:49.220 --> 00:20:54.220
So up on the top there's a little
panel where we can log in and

00:20:54.220 --> 00:20:57.330
use the ubiquitous FUBAR login.

00:20:59.830 --> 00:21:02.200
We can see that the panel
is actually now switched.

00:21:02.200 --> 00:21:05.020
It's switched from the login
panel to the panel that shows

00:21:05.020 --> 00:21:06.230
that we're already logged in.

00:21:06.290 --> 00:21:10.000
It's given us a little message at
the bottom that shows hello FUBAR,

00:21:10.020 --> 00:21:13.800
shows who we are, our user identity,
our person ID.

00:21:13.800 --> 00:21:19.760
And now I'm able to
check off and purchase,

00:21:19.760 --> 00:21:19.760
potentially purchase
some of this content.

00:21:23.600 --> 00:21:27.140
So one thing is this particular
application is not yet finished.

00:21:27.140 --> 00:21:30.800
There's pages that aren't there,
some things that are missing.

00:21:30.800 --> 00:21:35.460
So why don't we go ahead and take a look
at how the application is assembled.

00:21:35.460 --> 00:21:41.000
So I'll pull up Java Studio Creator and
then we'll try to fill in some

00:21:41.000 --> 00:21:41.000
of the missing functionality.

00:21:44.570 --> 00:21:47.650
So actually what I'm going to do
is create a brand new project based

00:21:47.650 --> 00:21:52.340
on the template that I saved which
contained the media application.

00:21:52.340 --> 00:21:56.290
So we had opened that original
incomplete application and saved it as

00:21:56.290 --> 00:21:59.500
a template so that we can then reuse
it and add on to it so we can kind of,

00:21:59.500 --> 00:22:07.210
in a workflow environment,
we can just keep building on the project

00:22:07.210 --> 00:22:07.210
that we had sort of set up as a skeleton.

00:22:07.700 --> 00:22:13.230
So at this point it's actually copying
lots of media files and parsing all

00:22:13.380 --> 00:22:16.910
of the Java code and the JSP code.

00:22:17.670 --> 00:22:21.930
So again,
we're building an application that's

00:22:21.930 --> 00:22:24.310
based on Java Server Faces and

00:22:28.100 --> 00:22:28.590
David P.

00:22:28.600 --> 00:22:30.500
No, this is just lots of media files.

00:22:31.140 --> 00:22:32.490
There's a lot of files in here.

00:22:32.500 --> 00:22:36.470
This is actually a rather complex
demo that one of our engineers

00:22:36.480 --> 00:22:39.450
who joined our architect,
Craig McClanahan,

00:22:39.450 --> 00:22:42.650
which is created for Java 1,
so it really is loading a

00:22:42.650 --> 00:22:44.380
tremendous amount of files.

00:22:44.380 --> 00:22:46.130
One of the things, of course,
it's doing is it is in fact

00:22:46.130 --> 00:22:48.230
loading every single file,
parsing them all,

00:22:48.230 --> 00:22:51.830
generating a bunch of information
that we'll need to go ahead

00:22:51.830 --> 00:22:53.330
and do the actual demo.

00:22:53.490 --> 00:22:55.620
Either that or DP3 was a mistake.

00:22:55.620 --> 00:22:55.710
David P.

00:22:55.720 --> 00:22:56.500
Yeah, that could be.

00:22:56.950 --> 00:23:00.440
We also tried to make it even more
complicated by booting my system.

00:23:00.440 --> 00:23:03.010
We're running this on the G5 here.

00:23:03.010 --> 00:23:06.180
That's booted off the
target mode PowerBook.

00:23:06.180 --> 00:23:10.330
So we're going over the
FireWire cable and...

00:23:11.900 --> 00:23:13.870
So we thought it would be a
little bit too easy to just

00:23:14.140 --> 00:23:18.860
put it on the machine itself.

00:23:18.870 --> 00:23:18.870
Okay.

00:23:24.900 --> 00:23:25.900
There we go.

00:23:25.900 --> 00:23:26.890
There we go.

00:23:26.900 --> 00:23:27.900
Okay.

00:23:27.900 --> 00:23:31.260
So, what we have here,
the first page is the welcome page

00:23:31.270 --> 00:23:33.360
that we saw in the application.

00:23:33.360 --> 00:23:37.460
It's really just kind of a highlight
showing some of the various,

00:23:37.460 --> 00:23:41.090
you know, selected content for the day.

00:23:41.300 --> 00:23:44.160
Let me refresh a little bit,
get that guy to paint.

00:23:44.160 --> 00:23:46.900
You can see the various
components that we have here.

00:23:46.970 --> 00:23:48.300
So this is the visual designer.

00:23:48.300 --> 00:23:50.100
So it's a WYSIWYG editor.

00:23:50.200 --> 00:23:52.980
It lets you lay out the
Java Server Faces components,

00:23:52.980 --> 00:23:55.550
drag and drop onto the screen,
position them.

00:23:55.710 --> 00:24:00.700
Using CSS2 style sheets,
you can actually set up

00:24:01.120 --> 00:24:05.930
backgrounds and styles,
configure the positions and look and

00:24:05.930 --> 00:24:05.930
feel of all of the components using that.

00:24:10.040 --> 00:24:11.690
So let's go walk through
some of the components here.

00:24:11.710 --> 00:24:15.930
So for instance we have on the left
there is an application outline which

00:24:15.930 --> 00:24:20.400
shows you sort of the breakdown detailed
view of the components on your page.

00:24:20.400 --> 00:24:24.130
Then we see the various,
we have some image components here,

00:24:24.130 --> 00:24:25.760
some of them just for look.

00:24:25.760 --> 00:24:28.620
Some of them are actually
bound to information that's

00:24:28.620 --> 00:24:29.400
coming from the program.

00:24:29.410 --> 00:24:33.520
So this particular cover image here is
going to be filled in at runtime with

00:24:33.520 --> 00:24:39.400
data from the database that will actually
contain pointer to the cover art itself.

00:24:39.400 --> 00:24:42.160
Now if I can interject,
one thing that the design

00:24:42.160 --> 00:24:45.400
preset behind what we've done
is that again truth and code,

00:24:45.400 --> 00:24:48.530
everything here is real Java,
real XML and it's all

00:24:48.540 --> 00:24:49.400
there or JSP in this case.

00:24:49.400 --> 00:24:53.400
But what we're doing is essentially
we're prying a model view to a tool.

00:24:53.400 --> 00:24:57.390
So what you're looking here is just
one view of what is in fact a JSP.

00:24:57.400 --> 00:24:59.790
On the bottom of the page,
on any number of pages,

00:24:59.790 --> 00:25:02.330
you'll see that we have
design and source views.

00:25:02.400 --> 00:25:04.680
If you're more comfortable
writing in raw JSP,

00:25:04.680 --> 00:25:05.390
have at it.

00:25:05.400 --> 00:25:08.800
One of the other things that
maybe Carl will get into it,

00:25:08.800 --> 00:25:13.800
later on is that everything
we do is kept in sync.

00:25:13.800 --> 00:25:17.800
So if I make changes either in the visual
representation of any view you see,

00:25:17.800 --> 00:25:20.800
or the raw JSP,
or if we're looking at a Java code file,

00:25:20.800 --> 00:25:21.800
we make a change there.

00:25:21.800 --> 00:25:25.160
Or if we take a look at the navigation
view and change the navigation

00:25:25.160 --> 00:25:26.800
configuration in an XML file.

00:25:26.800 --> 00:25:30.030
Those changes get reflected
throughout your entire application,

00:25:30.030 --> 00:25:34.800
which Carl knows well about
because that's his baby.

00:25:34.800 --> 00:25:36.800
So I'll let you go on.

00:25:36.800 --> 00:25:37.800
Okay.

00:25:37.800 --> 00:25:40.800
So we're going to show a few more
things on this first welcome page.

00:25:40.800 --> 00:25:43.800
We actually have a couple
of reusable components here.

00:25:43.800 --> 00:25:45.790
We've created some fragments.

00:25:45.820 --> 00:25:47.800
So at the top of every
page in our application,

00:25:47.800 --> 00:25:50.520
we're going to want to have this
little login bar that shows the

00:25:50.540 --> 00:25:53.800
user whether they're logged in
or that they need to log in.

00:25:53.800 --> 00:25:55.790
So we've actually put
this in a separate page,

00:25:55.800 --> 00:25:58.800
so it's actually a page
fragment using JSP fragments.

00:25:58.800 --> 00:26:01.600
And on this page,
we've laid out this sort of multiple

00:26:01.620 --> 00:26:04.710
card layout combination of components,
which I'll come back and

00:26:04.710 --> 00:26:05.770
show you a little bit later.

00:26:05.810 --> 00:26:06.740
But you can see that it's just
dropped directly into the JSP.

00:26:06.800 --> 00:26:07.800
And so that's the first
component that we've created.

00:26:07.800 --> 00:26:08.990
And then we've also created a little
bit of a new component that's just

00:26:08.990 --> 00:26:11.400
dropped directly into the welcome
page and placed as if it were sort

00:26:11.440 --> 00:26:13.750
of a composite component on its own.

00:26:13.820 --> 00:26:15.790
And so then that can be
reused on every page.

00:26:15.800 --> 00:26:16.800
And so that's the first component.

00:26:18.160 --> 00:26:19.050
So let me see.

00:26:19.110 --> 00:26:23.480
And also over here we have the same
kind of thing we did with the little

00:26:23.480 --> 00:26:25.090
menu control that we saw on the right.

00:26:25.090 --> 00:26:27.460
I hit the right part of it.

00:26:27.590 --> 00:26:30.510
It's actually inside of a div over here.

00:26:33.790 --> 00:26:37.360
Now, this particular component is a
custom component that Craig actually

00:26:37.420 --> 00:26:39.080
wrote for this application.

00:26:39.080 --> 00:26:42.580
And he didn't implement any
design time visualization.

00:26:42.580 --> 00:26:45.210
So what we're seeing here,
this component at design

00:26:45.210 --> 00:26:46.560
time is just a white box.

00:26:46.560 --> 00:26:47.240
It's not very interesting.

00:26:47.240 --> 00:26:50.430
But all of the components that
are added in to create are just

00:26:50.440 --> 00:26:52.960
Java server-facing standard components.

00:26:52.960 --> 00:26:55.730
And they can be dropped in,
just imported in, dropped in.

00:26:55.840 --> 00:26:59.130
And as the market matures
for the JSF components,

00:26:59.150 --> 00:27:03.740
the vendors are going to know that they
want to supply design time visualization.

00:27:03.740 --> 00:27:06.670
So fake data maybe just to
show what the components,

00:27:06.700 --> 00:27:09.160
the example of what the component
will look like when it's displayed.

00:27:15.400 --> 00:27:15.860
Okay, yeah.

00:27:16.070 --> 00:27:21.020
This particular page that comes up at the
beginning is populated from information

00:27:21.020 --> 00:27:22.310
that's just written in Java code.

00:27:22.350 --> 00:27:23.190
So I'm going to switch over.

00:27:23.200 --> 00:27:25.880
So for every page that you see,
there's the JSP source that

00:27:25.880 --> 00:27:27.250
we saw a little while ago.

00:27:27.260 --> 00:27:28.870
There's also a backing bean.

00:27:28.870 --> 00:27:31.890
So there's a Java bean behind
it that controls all the logic

00:27:31.890 --> 00:27:33.380
and the flow of the page.

00:27:33.380 --> 00:27:36.890
Now in here, there's a bunch of code
that Creator generates

00:27:36.900 --> 00:27:38.620
and manages for the user.

00:27:38.620 --> 00:27:40.720
And you can go in and
look at it if you want,

00:27:40.720 --> 00:27:43.440
but what we've done is we
use code folding to fold up a

00:27:43.440 --> 00:27:44.910
lot of these blocks of code.

00:27:45.580 --> 00:27:48.190
Just by default so that
it doesn't clutter up.

00:27:48.240 --> 00:27:51.220
So when the user drops back in here to
add in their event handlers and things,

00:27:51.220 --> 00:27:54.600
they just see a couple methods,
just the things they need to look at.

00:27:54.620 --> 00:27:57.360
So in this case,
you can see the components on the

00:27:57.360 --> 00:28:01.240
page have been dropped in here,
and they're built as Java beans.

00:28:01.240 --> 00:28:04.070
So they become properties of the page,
and so there's a getter

00:28:04.070 --> 00:28:05.430
and a setter for each one.

00:28:06.640 --> 00:28:12.290
There's also potential initialization
code in the constructor.

00:28:12.420 --> 00:28:16.960
hit that guy in this case there aren't
any java site beans that need to be

00:28:16.960 --> 00:28:21.050
initialized and actually when craig
set up this part of the application

00:28:21.050 --> 00:28:25.450
he went ahead and added his own code
folding so that he can wrap up all of the

00:28:25.450 --> 00:28:29.390
configuration methods into a big block
that he can turn on and off and take a

00:28:29.390 --> 00:28:32.650
look at now one of the interesting things
to note here is is that if you take

00:28:32.660 --> 00:28:37.170
a look at other tools which are providing
a sort of a multi-way capability in

00:28:37.170 --> 00:28:40.860
a tool or code generation facilities one
of the things you'll see frequently is

00:28:40.860 --> 00:28:44.300
guarded blocks don't touch this you touch
this you die third rail of a product

00:28:44.300 --> 00:28:49.660
application in this case there are no
such entities in creator of generated

00:28:49.660 --> 00:28:53.790
code you can check and change anything
and the system will track it modify

00:28:53.870 --> 00:28:57.480
those changes and if something gets
reflected elsewhere for instance one

00:28:57.590 --> 00:29:01.660
of the things you'll note is there's
this this is binary relationship between

00:29:01.750 --> 00:29:06.430
those elements on a page those things in
code and one of those is the ability to

00:29:06.430 --> 00:29:11.390
easily visualize and for instance modify
a property in code or handle an event

00:29:11.440 --> 00:29:14.550
it's pretty easy for instance if i have
a button i want to do something with the

00:29:14.560 --> 00:29:18.520
button it's much easier for you actually
to write a small little one-line piece

00:29:18.520 --> 00:29:22.040
of code in the java bean that's backing
the page rather than hunt through the

00:29:22.040 --> 00:29:26.020
markup and try to find out where i can
send an attribute and so one of the the

00:29:26.170 --> 00:29:30.990
key points of that of course is that once
you start doing that you're talking about

00:29:30.990 --> 00:29:34.960
making changes in multiple places and
so when we when one of the things we did

00:29:34.960 --> 00:29:38.400
when we implemented the technology behind
creators to make sure that you can do

00:29:38.400 --> 00:29:42.010
that safely and without the requirement
for having guarded blocks that if you

00:29:42.070 --> 00:29:45.460
took into some other tool for instance
would blow away either deliberately

00:29:45.460 --> 00:29:52.960
or accidentally and so your application
will continue to run as expected okay

00:29:53.800 --> 00:29:55.120
I was going to show in this one.

00:29:55.250 --> 00:29:57.870
So in this particular,
this is the main page that comes up in

00:29:57.910 --> 00:30:02.590
the application and what Craig chose
to do was just write some straight old

00:30:02.590 --> 00:30:07.000
Java code to set up the various little
thumbnails on that starting page.

00:30:07.000 --> 00:30:10.950
So he pulls out some of these.

00:30:11.360 --> 00:30:16.860
The list of the thumbnails from the
application being itself and then

00:30:16.860 --> 00:30:19.400
just starts populating by setting
properties on these components.

00:30:19.400 --> 00:30:22.640
So it's just very straightforward kind
of boilerplate Java code that he wrote at

00:30:22.640 --> 00:30:25.060
this point to configure the first page.

00:30:26.250 --> 00:30:28.810
The first page is a little bit more
complicated than the first one.

00:30:28.810 --> 00:30:30.990
So it's a little bit more
complicated than the first one.

00:30:30.990 --> 00:30:33.180
So it's a little bit more
complicated than the first one.

00:30:33.190 --> 00:30:35.660
But you can see here he's actually
accessing an application being

00:30:35.660 --> 00:30:38.040
so get application being so in
a normal create a project which we

00:30:38.040 --> 00:30:40.760
give the user an application being
which lives in application scope.

00:30:40.770 --> 00:30:43.220
So that same being is shared by
all the users of the application.

00:30:43.240 --> 00:30:45.060
So all the user sessions
will have access to it.

00:30:45.070 --> 00:30:47.040
And this is a good place
to put shared information.

00:30:47.040 --> 00:30:48.740
In this case,
all of the daily hits are just put

00:30:48.830 --> 00:30:51.410
into a row set there and they just
are shared by all the applications.

00:30:51.410 --> 00:30:53.240
And so every being then has
a quick access or to get

00:30:53.330 --> 00:30:55.200
to the application being.

00:30:57.220 --> 00:30:57.800
So that you can write code
very simply like this.

00:30:57.800 --> 00:31:01.460
Also, over here on the left where we saw
we had the application outline,

00:31:01.470 --> 00:31:03.940
you can see all the
beans in the application.

00:31:03.940 --> 00:31:07.430
And there again is the application
being which we were just seeing the

00:31:07.430 --> 00:31:11.610
reference to is available by accessing
through the application outline there.

00:31:11.610 --> 00:31:15.200
You can just open it up and take a
look at the code for that guy there.

00:31:15.200 --> 00:31:18.000
The same goes for the session being.

00:31:18.000 --> 00:31:23.410
So for every time a user logs in,
the user gets a unique session being.

00:31:23.420 --> 00:31:25.200
And that being can be
used to track information.

00:31:26.220 --> 00:31:29.640
So in our case,
we'll use that to keep track of

00:31:29.640 --> 00:31:32.980
whether the user's logged in,
what's their person ID in effect,

00:31:32.980 --> 00:31:36.050
and all the information about them,
maybe their purchases and

00:31:36.110 --> 00:31:37.170
things will be stored in that.

00:31:37.170 --> 00:31:41.220
So that session will live across
multiple page requests and be available

00:31:41.390 --> 00:31:45.620
for the UI to display things and to
do the transactions that we want to do.

00:31:47.710 --> 00:31:49.940
Okay, I think that's pretty good now.

00:31:49.940 --> 00:31:53.180
So once we logged in and we went over
to the browse page in the application,

00:31:53.190 --> 00:31:56.350
we were then doing some more things
where we could browse through the

00:31:56.390 --> 00:31:58.090
content and look at some of that.

00:31:58.110 --> 00:32:04.330
So I'm going to switch over
to that page in the designer.

00:32:04.330 --> 00:32:04.330
So I default,
we just pop over to the visual view here.

00:32:06.800 --> 00:32:12.240
We can again see we have the fragment
up on top for the login navigation.

00:32:12.240 --> 00:32:16.310
But the main component here
this time is a big data table.

00:32:16.370 --> 00:32:20.300
So it turns out the data
table is one column.

00:32:20.460 --> 00:32:25.090
But it's bound to a row set and the
row set contains a particular set of

00:32:25.180 --> 00:32:30.740
products that match a certain media
type that you've selected on the right.

00:32:30.790 --> 00:32:36.330
So you can see how the data
table is organized here.

00:32:36.330 --> 00:32:36.330
It contains

00:32:36.420 --> 00:32:39.800
Sort of a layout of images
and text information there.

00:32:39.800 --> 00:32:42.730
And we can actually go in here and...

00:32:43.100 --> 00:32:46.960
take a look at the data table layout.

00:32:47.100 --> 00:32:51.560
So this is one of the nice customizers
for some of the more complex components,

00:32:51.560 --> 00:32:55.420
is you can actually control data
binding and property binding of

00:32:55.420 --> 00:32:57.880
the components to the backend data.

00:32:57.880 --> 00:33:00.800
In this case,
we're binding to a database, a row set,

00:33:00.800 --> 00:33:03.540
so it knows all about the columns
and all the information available

00:33:03.600 --> 00:33:05.660
from the row set that we bound it to.

00:33:05.660 --> 00:33:07.210
So in this case,
all these columns are available,

00:33:07.220 --> 00:33:10.560
product names and components
and dates and all the sorts

00:33:10.560 --> 00:33:13.870
of serial numbers and things,
And we chose to just grab basic

00:33:13.870 --> 00:33:16.760
product column and have that available.

00:33:17.480 --> 00:33:20.380
And then kind of a neat trick is done
inside of there is all the components

00:33:20.380 --> 00:33:27.360
that are embedded into the particular row
of the table are nested into panels sort

00:33:27.360 --> 00:33:30.360
of laid out in different orders there.

00:33:30.360 --> 00:33:34.080
And each of those is individually
bound to different parts of the

00:33:34.080 --> 00:33:35.140
information from the row set.

00:33:35.210 --> 00:33:38.690
So we can show the title and we
can show the author and we can show

00:33:38.690 --> 00:33:41.670
the thumbnail and lay that out how
we want it and bind each one to

00:33:41.670 --> 00:33:43.490
a different thing individually.

00:33:43.560 --> 00:33:46.800
So let me see one here
that's interesting.

00:33:46.820 --> 00:33:48.800
It's like the artist's name.

00:33:48.800 --> 00:33:50.870
Property Bindings.

00:33:51.900 --> 00:33:54.850
It's actually able to show the,
so you can either bind to a kind of

00:33:54.850 --> 00:33:58.200
an object property or you can bind
to a database and that's more of a

00:33:58.390 --> 00:34:00.160
tailored type of binding dialogue.

00:34:00.210 --> 00:34:02.260
So here we can see that.

00:34:03.870 --> 00:34:07.390
We're bound to the product's row
set and this particular control

00:34:07.390 --> 00:34:09.830
is bound to the artist's name.

00:34:09.830 --> 00:34:14.830
So that ends up just creating an
expression in the JSF/JSP code

00:34:14.830 --> 00:34:17.640
that binds it directly to that data
and that's evaluated at runtime.

00:34:17.690 --> 00:34:20.700
So you really don't have to
write any code to populate these

00:34:20.720 --> 00:34:22.850
controls in this kind of fashion.

00:34:22.860 --> 00:34:26.900
You're just pointing and clicking
and selecting things to bind to.

00:34:27.170 --> 00:34:29.880
Now all of those on this page
are bound to a single row

00:34:29.880 --> 00:34:31.500
set that we've set up here.

00:34:31.500 --> 00:34:35.090
And this was dropped from the
server navigator so we actually

00:34:35.090 --> 00:34:39.500
have a set of data sources
running on a local database here.

00:34:39.540 --> 00:34:44.430
And in the data sources there's a number
of tables for the media data source.

00:34:44.430 --> 00:34:48.070
And these are all the tables that are
used by the application list of artists,

00:34:48.220 --> 00:34:53.090
the list of hits and items and
medias and persons that can log in,

00:34:53.160 --> 00:34:55.130
purchases, things like that.

00:34:55.200 --> 00:34:57.380
And we've actually created
a product row set here.

00:34:57.380 --> 00:34:59.760
So this was dropped on there.

00:34:59.760 --> 00:35:03.180
And we can edit the query and take a
look at how that was actually gathered.

00:35:03.180 --> 00:35:09.680
So we took basically the product row set
itself and then also joined it with the

00:35:09.680 --> 00:35:14.160
artist row set so that we can come up
and instead of showing the artist ID,

00:35:14.160 --> 00:35:16.840
we can show the name of the artist and a
little more information about the artist.

00:35:16.840 --> 00:35:22.390
So we'll have the combination of
these two tables available to bind to.

00:35:23.700 --> 00:35:25.930
See there.

00:35:25.940 --> 00:35:28.940
Okay, so we can go back to that page.

00:35:32.810 --> 00:35:35.560
Now there's a few more components
on here that are interesting.

00:35:35.560 --> 00:35:39.450
There's a little
navigation guide up here.

00:35:42.110 --> 00:35:46.460
So these are just buttons that have
images as part of their display.

00:35:46.460 --> 00:35:48.260
One of these is for going
forward in the list,

00:35:48.260 --> 00:35:49.730
one of them is for going back.

00:35:49.820 --> 00:35:53.160
Double click on those will take
you back to the Java code to

00:35:53.260 --> 00:35:55.750
basically an event handler method.

00:35:55.750 --> 00:35:58.820
In this case,
buttons produce an action event,

00:35:58.820 --> 00:36:02.370
and the action event can be used
to navigate between pages or just

00:36:02.380 --> 00:36:05.500
perform some operation on the
page and stay on the same page.

00:36:05.500 --> 00:36:08.740
And in our case,
we're using the navigation buttons,

00:36:08.740 --> 00:36:11.850
previous action, next action,
to just adjust the row set

00:36:11.960 --> 00:36:15.660
position within the table and
then just repaint the table.

00:36:15.660 --> 00:36:18.160
So in this case,
we're just calculating how far to go

00:36:18.180 --> 00:36:23.100
backwards and then resetting the position
of the row set of the data table.

00:36:23.110 --> 00:36:26.610
And for going forward for next,
we do the same thing going

00:36:26.610 --> 00:36:31.500
forward and just set the first
index position of the data table.

00:36:33.600 --> 00:36:36.500
In this case, for navigating,
we want to stay on the same page,

00:36:36.500 --> 00:36:37.820
so we're returning null.

00:36:37.940 --> 00:36:40.660
Otherwise,
we could return an outcome name,

00:36:40.660 --> 00:36:42.830
which will tell us what
next page to go to,

00:36:42.840 --> 00:36:45.780
which we can take a look
at in a little while.

00:36:49.240 --> 00:36:50.200
Any other comments, Bob?

00:36:50.200 --> 00:36:51.200
No, you're doing fine.

00:36:51.200 --> 00:36:52.200
Okay.

00:36:52.200 --> 00:36:56.540
So I'm presuming that,
so he's showing you a number

00:36:56.540 --> 00:37:00.440
of the features behind a
pre-generated application.

00:37:00.440 --> 00:37:03.440
Obviously we're looking at
those artifacts which have been

00:37:03.440 --> 00:37:08.400
generated by the application,
the tool itself.

00:37:08.400 --> 00:37:10.400
What we'll,
I'm guessing we're doing next is we're

00:37:10.410 --> 00:37:14.390
going to show you some of the visual
drag and drop and how you actually design

00:37:14.390 --> 00:37:18.540
things in a visual manner to show you
how the actual experience can be easy,

00:37:18.540 --> 00:37:21.300
not just looking at something
that's already been done.

00:37:21.300 --> 00:37:24.640
So when we were looking at the app,
we realized there was a number

00:37:24.640 --> 00:37:27.240
of features that obviously
were missing in the app.

00:37:27.240 --> 00:37:30.560
So one of those might be nice to see,
a list of all the purchases.

00:37:30.560 --> 00:37:32.460
So when you've logged into the app
and you're looking at what you bought,

00:37:32.460 --> 00:37:34.130
what you're going to buy,
you might want to say, "Oh,

00:37:34.130 --> 00:37:35.200
how much have I already spent?

00:37:35.200 --> 00:37:37.820
Should I, let's take a look at what
I've already bought." So we

00:37:37.820 --> 00:37:40.200
need to add a page to do that.

00:37:40.220 --> 00:37:44.030
So this is our navigation editor which
gives us an overview of all the pages in

00:37:44.060 --> 00:37:46.880
the application and all of the resources.

00:37:46.880 --> 00:37:49.020
And it routes the links
between the pages.

00:37:49.020 --> 00:37:53.070
So JSF uses kind of a layer of
indirection for managing navigation.

00:37:53.170 --> 00:37:57.340
It creates an XML file that has
a list of outcomes and navigation

00:37:57.340 --> 00:38:00.990
cases so that if you do decide
later on to change your page names,

00:38:01.000 --> 00:38:03.440
there's only one file
that has to be updated.

00:38:03.440 --> 00:38:05.200
And Creator will take care
of that automatically.

00:38:05.200 --> 00:38:07.950
So when you rename things and move
things around and move links around,

00:38:08.020 --> 00:38:09.540
the XML file is managed for you.

00:38:09.540 --> 00:38:10.530
You're on the source file now.

00:38:10.570 --> 00:38:11.540
Yeah.

00:38:11.540 --> 00:38:12.720
In this case, there's the source file.

00:38:12.790 --> 00:38:15.330
It's really just a snippet
of the Faces config file with

00:38:15.340 --> 00:38:16.860
the navigation rules in it.

00:38:16.860 --> 00:38:18.320
And so this is all we're looking at here.

00:38:18.320 --> 00:38:23.410
So this particular visualizer is showing
that XML configuration file and also

00:38:23.410 --> 00:38:26.860
looking at all of the pages themselves,
the model for those,

00:38:26.860 --> 00:38:28.640
to know what's inside of them.

00:38:28.640 --> 00:38:31.810
So within each page,
you can see all of the components

00:38:31.830 --> 00:38:35.960
that create command action events
that could cause navigation.

00:38:35.960 --> 00:38:38.080
And all of these in this
case are handled by code.

00:38:38.080 --> 00:38:39.020
So this little code icon.

00:38:39.080 --> 00:38:42.500
I think in all of this application,
they're all handled by code.

00:38:42.500 --> 00:38:46.820
In this case, this one is directly
linked to another case.

00:38:46.840 --> 00:38:50.040
I think it's just back
to the browser page.

00:38:50.040 --> 00:38:51.500
So it's a very simple kind of navigation.

00:38:51.500 --> 00:38:54.170
So you can either navigate with
kind of a hardwired link or you

00:38:54.170 --> 00:38:58.440
can navigate with code that you
write in your event handler.

00:38:58.440 --> 00:38:59.990
So we'll go ahead and add a new page.

00:39:00.020 --> 00:39:02.890
And it's as simple as just saying--

00:39:04.130 --> 00:39:06.250
New page.

00:39:06.410 --> 00:39:09.500
What we want to do is add
it to the browse page.

00:39:09.620 --> 00:39:11.990
We'll put a button on this page.

00:39:12.310 --> 00:39:15.760
that we're going to use to navigate
us over to the purchases page and

00:39:15.760 --> 00:39:20.400
so I'll just do basically let's
just add that guy simple navigation

00:39:21.190 --> 00:39:25.590
So we give a name to the link so that
we have a name that we can understand.

00:39:25.600 --> 00:39:28.880
If we decide later on to change the
purchases page to some other kind

00:39:28.880 --> 00:39:33.060
of web or combination of pages,
we can easily do that later.

00:39:33.230 --> 00:39:35.450
So now we want to actually go do
something nice with the button

00:39:35.510 --> 00:39:37.440
because it's up here in the
corner and has the wrong name.

00:39:37.440 --> 00:39:40.200
So we'll make sure we
have it where we want it.

00:39:40.200 --> 00:39:42.200
I double clicked.

00:39:42.200 --> 00:39:43.200
Let's go back.

00:39:43.200 --> 00:39:46.960
I think I need a little more room
to get down to the bottom corner.

00:39:46.960 --> 00:39:53.480
I'm going to put them down over here.

00:39:53.480 --> 00:39:53.480
There's some space there for them.

00:39:59.090 --> 00:40:02.650
So it handles the z-axis and
layering and everything too.

00:40:02.670 --> 00:40:05.350
So in this case the background
was in front of the button

00:40:05.390 --> 00:40:06.890
which wasn't very good.

00:40:06.900 --> 00:40:09.300
So I'm going to change a
few things about the button.

00:40:09.300 --> 00:40:15.720
Let's give it a better name.

00:40:15.720 --> 00:40:22.020
Let's give it a better title.

00:40:30.500 --> 00:40:32.820
At that point, it should be functional.

00:40:32.870 --> 00:40:40.670
So now the action for this
particular button is just a

00:40:40.670 --> 00:40:40.670
hardwired string which takes us to...

00:40:40.900 --> 00:40:43.140
the purchases page.

00:40:43.150 --> 00:40:44.960
So now we go to that
page and take a look.

00:40:44.960 --> 00:40:47.610
So this is the page we created when
we were in the navigation editor.

00:40:47.710 --> 00:40:49.210
It just created an empty page for us.

00:40:49.220 --> 00:40:52.670
In this case the project template
populates it with a default style sheet.

00:40:52.670 --> 00:40:55.350
So we've created a style sheet for
the whole app and all the pages

00:40:55.360 --> 00:40:56.580
we want them to look the same.

00:40:56.580 --> 00:40:58.560
So it's inheriting the
background and some of the

00:40:58.560 --> 00:40:59.920
layout and coloring information.

00:40:59.920 --> 00:41:03.160
There's a bunch of styles too
so the controls will have the

00:41:03.250 --> 00:41:05.310
right colors and look and feel.

00:41:05.310 --> 00:41:06.790
And we can go ahead and play around.

00:41:06.790 --> 00:41:09.970
There's a few custom components that
were written for this application that

00:41:10.060 --> 00:41:14.820
we can just drag and drop and they
will give us some nice look and feel.

00:41:14.820 --> 00:41:18.610
So this particular one is kind of
a background grid thing with images

00:41:18.630 --> 00:41:21.720
and it's just configured by how
many rows and columns you want.

00:41:21.790 --> 00:41:25.730
It automatically attaches to some of the
background images in the style sheet.

00:41:25.740 --> 00:41:26.740
So there we go.

00:41:26.740 --> 00:41:30.940
There's our look and feel
in a couple of clicks.

00:41:30.940 --> 00:41:32.380
Few other things.

00:41:32.380 --> 00:41:36.190
Maybe we want to have some
text output for the page.

00:41:36.190 --> 00:41:36.190
Let's say, let's

00:41:36.710 --> 00:41:37.700
My purchases.

00:41:37.700 --> 00:41:39.230
I hate my.

00:41:39.240 --> 00:41:43.090
Let's call it something else.

00:41:43.090 --> 00:41:43.090
Let's call it product purchases.

00:41:47.600 --> 00:41:50.930
And that's pretty small,
so we'll use one of the standard classes,

00:41:50.990 --> 00:41:53.480
style sheet classes called prompt.

00:41:56.130 --> 00:41:58.000
I have to learn how to spell.

00:41:58.000 --> 00:41:59.490
There we go.

00:41:59.640 --> 00:42:01.140
A nicer size.

00:42:01.140 --> 00:42:07.260
And now for the actual purchases,
what we're going to do is drop

00:42:07.540 --> 00:42:13.130
in a data table and this will
then customize to show us the

00:42:13.140 --> 00:42:14.780
purchases for this particular user,
this particular person that's logged in.

00:42:14.780 --> 00:42:14.780
So I'll grab the data table,
drop it here.

00:42:15.650 --> 00:42:18.040
So it starts out with
some empty dummy data.

00:42:18.040 --> 00:42:20.600
So the primarily thing that we're
going to put in there is purchases.

00:42:20.600 --> 00:42:23.350
So there's a big table that's
available for all the purchases

00:42:23.550 --> 00:42:25.600
from all of the people.

00:42:25.600 --> 00:42:27.230
So we'll go ahead and drop that guy.

00:42:27.370 --> 00:42:29.000
I keep double-clicking.

00:42:29.000 --> 00:42:31.650
Robert Brewin: Nice preview.

00:42:31.650 --> 00:42:32.340
Yeah.

00:42:32.340 --> 00:42:36.880
So this was actually a
preview of the table contents.

00:42:36.880 --> 00:42:38.070
Where was I?

00:42:38.070 --> 00:42:39.210
People, people.

00:42:39.210 --> 00:42:39.210
So there's a number of different
ways to get back to where you were.

00:42:44.720 --> 00:42:53.040
So the table picks up the schema
information for all the columns in the

00:42:53.040 --> 00:42:57.500
row set table and actually gathers the
column headers and all the data types

00:42:57.500 --> 00:43:01.700
for the columns and just basically
sets up a default layout for it.

00:43:01.790 --> 00:43:03.700
We can go ahead and customize
it a little bit more,

00:43:03.700 --> 00:43:07.060
but actually want to do something a
little nicer than showing the person ID,

00:43:07.060 --> 00:43:07.690
the product ID.

00:43:07.700 --> 00:43:10.810
We want to show a little bit more
information to the user about what

00:43:10.810 --> 00:43:12.700
the product is that they purchased.

00:43:12.700 --> 00:43:15.210
So I'm going to actually adjust
the row set by going back to the

00:43:15.270 --> 00:43:17.700
query editor that we saw before.

00:43:17.700 --> 00:43:19.690
In addition to looking
at the purchases table,

00:43:19.710 --> 00:43:24.700
we'll add in the products table so
we can give them a better description

00:43:24.700 --> 00:43:27.700
of the products that they purchased.

00:43:27.710 --> 00:43:30.700
So we see it's automatically joined
because the keys match there.

00:43:30.700 --> 00:43:34.170
And we can go and look at all of the
various columns that are available from

00:43:34.170 --> 00:43:39.800
the query and turn off ones that we
definitely know we're not going to need.

00:43:40.140 --> 00:43:42.640
You'll notice that the SQL in
the bottom is changing every

00:43:42.640 --> 00:43:44.120
single time you check the box.

00:43:44.140 --> 00:43:45.700
Again,
this is one of the other areas where

00:43:45.770 --> 00:43:48.730
we're tracking all the changes you're
making in the system and making sure

00:43:48.730 --> 00:43:50.390
that everything remains in sync.

00:43:50.400 --> 00:43:54.040
So at this point,
we're actually controlling what columns

00:43:54.040 --> 00:43:56.360
are returned in the query itself.

00:43:56.360 --> 00:43:59.940
And so turning off stuff we don't
need just makes the transaction with

00:43:59.940 --> 00:44:01.970
the database a little bit smaller.

00:44:02.620 --> 00:44:05.480
Now, when we look at the particular
purchases for this user,

00:44:05.480 --> 00:44:07.620
we don't want to see
them for all the users.

00:44:07.620 --> 00:44:13.490
So we're going to change the person ID in
this and make it a criteria for the query

00:44:13.500 --> 00:44:14.960
so we can provide it as a parameter.

00:44:15.000 --> 00:44:17.740
And then we will only get
back the purchases that

00:44:17.800 --> 00:44:19.690
match the particular person.

00:44:19.690 --> 00:44:22.150
So we've parameterized it by doing that.

00:44:22.200 --> 00:44:24.540
So now we need to add
a little bit of code.

00:44:24.540 --> 00:44:28.990
So we'll go back to the purchases JSP.

00:44:30.020 --> 00:44:32.460
Actually let's customize the
look and feel a little bit now.

00:44:32.460 --> 00:44:35.960
So the layout of the table is
still sort of based on when we

00:44:35.970 --> 00:44:37.410
first dropped the Roset onto it.

00:44:37.510 --> 00:44:40.860
So let's go back to the layout
dialog and clean it up a little bit.

00:44:40.880 --> 00:44:43.620
So we just have the original
Roset columns in there.

00:44:43.620 --> 00:44:46.160
So we'll go back through and
change and put in some things

00:44:46.160 --> 00:44:47.800
that might look a little better.

00:44:47.800 --> 00:44:49.380
So what is the user going to want to see?

00:44:49.380 --> 00:44:54.940
Probably the purchase date and the name
of the product and maybe a description

00:44:54.960 --> 00:44:56.630
in case they forget what it's called.

00:44:57.460 --> 00:45:02.280
And we can also shorten up what we're
putting in the actual column display.

00:45:07.100 --> 00:45:09.300
Now depending on what you're doing,
if you're doing something more complex,

00:45:09.360 --> 00:45:13.160
you can actually change the component
type that's used in each column.

00:45:13.160 --> 00:45:15.890
So you can have drop-downs in the
column to get information back.

00:45:15.890 --> 00:45:17.840
You can have buttons to perform actions.

00:45:17.840 --> 00:45:19.900
You can use input text
fields within the column.

00:45:19.900 --> 00:45:21.920
So you can mix and match
depending on what you're doing.

00:45:22.060 --> 00:45:24.490
In this case,
we're just going to be doing all output.

00:45:24.560 --> 00:45:26.160
And we can also set up some paging.

00:45:26.210 --> 00:45:28.420
So we want to say, well,
our screen's kind of small,

00:45:28.430 --> 00:45:30.990
and maybe these descriptions
are going to be big.

00:45:30.990 --> 00:45:35.220
So let's limit the number of purchases
shown to three per page and go

00:45:35.220 --> 00:45:39.600
ahead and turn on some navigation
controls so the user can step through.

00:45:39.600 --> 00:45:40.740
And we'll just put those on the bottom.

00:45:42.620 --> 00:45:45.750
So Creator then inserts the code
automatically and sets up the

00:45:45.750 --> 00:45:48.110
components for this particular
process the way we want.

00:45:48.140 --> 00:45:51.480
So we're going to see date, name,
description of the products.

00:45:51.520 --> 00:45:52.840
So there's a little bit of code
we're going to have to write,

00:45:52.920 --> 00:45:55.440
so we'll go back to the Java file.

00:45:55.450 --> 00:45:58.270
So the Java Bean that's behind this page

00:46:05.100 --> 00:46:11.690
This is all the code that's
handling the navigation for the

00:46:11.690 --> 00:46:13.100
buttons that I just inserted.

00:46:13.150 --> 00:46:16.600
There's one little bit of code that
we're going to need to initialize

00:46:16.630 --> 00:46:18.560
the ROSEC query for the criteria.

00:46:18.560 --> 00:46:23.200
We want to tell it what person
ID that we're going to put in there.

00:46:23.200 --> 00:46:27.350
We have this capability of code clips,
so you can actually take code

00:46:27.450 --> 00:46:30.590
that you use commonly and just
save it up on the pallet there.

00:46:30.660 --> 00:46:32.440
It's just a drag and drop clipboard.

00:46:32.770 --> 00:46:36.240
In this case,
it's really good for demos because you

00:46:36.240 --> 00:46:40.200
don't have to sit and type and make
typos while everybody's watching you.

00:46:40.270 --> 00:46:44.090
One thing I found that I had trouble
with with DP3 in this app is sometimes

00:46:44.190 --> 00:46:45.890
drag and drop was causing me trouble.

00:46:45.890 --> 00:46:55.260
I'm going to actually not try
to do drag and drop today.

00:46:55.260 --> 00:47:04.180
I'm going to do it the hard way.

00:47:04.650 --> 00:47:04.820
Let me go back.

00:47:04.820 --> 00:47:04.820
I'm just going

00:47:19.050 --> 00:47:21.750
So it's a couple lines of really
one actual functioning line of

00:47:21.750 --> 00:47:25.430
code here is grab the data table
model which is sort of the model

00:47:25.470 --> 00:47:28.000
side adapter for the table itself.

00:47:28.090 --> 00:47:33.070
Set object one to be the session being
so the person ID from the session being.

00:47:33.070 --> 00:47:35.630
So again remember the session is
tracking the user and we have a

00:47:35.730 --> 00:47:39.000
property on the session which is the
person's ID when they're logged in.

00:47:39.000 --> 00:47:41.370
And so we're just grabbing
that integer property,

00:47:41.380 --> 00:47:45.000
popping it into the model so that it can
be used as part of the query to the ROSA.

00:47:45.000 --> 00:47:49.000
And at that point we should have
an application that's ready to go.

00:47:49.060 --> 00:47:52.660
So why don't we go ahead and
run it and see how it looks.

00:47:53.000 --> 00:47:54.000
So we're building it.

00:47:54.000 --> 00:47:56.980
At this point it's compiling
all the Java files using Ant as

00:47:56.980 --> 00:47:59.490
a built-in compile engine.

00:47:59.490 --> 00:48:08.480
It's going to deploy the whole WAR file
to the built-in application server.

00:48:08.480 --> 00:48:08.480
So Java's

00:48:17.560 --> 00:48:19.420
So there we go.

00:48:19.440 --> 00:48:21.080
So we head on the browse page.

00:48:21.080 --> 00:48:25.110
That's where we put it,
so let's go over to there.

00:48:32.700 --> 00:48:34.110
So there's our view purchases.

00:48:34.300 --> 00:48:36.000
Although in order for us
to look at our purchases,

00:48:36.000 --> 00:48:38.000
we have to log in.

00:48:38.050 --> 00:48:40.440
We'll go ahead and log in first.

00:48:45.000 --> 00:48:47.000
Um, probably would have, yeah.

00:48:47.000 --> 00:48:49.540
And what we can do is actually,
when we show that this works,

00:48:49.540 --> 00:48:52.900
we'll go back in and we'll add some
functionality so that we can hide the

00:48:52.900 --> 00:48:54.830
button when the user's not logged in.

00:48:55.260 --> 00:49:00.870
So I just popped it on there without
doing any kind of checking so we can do

00:49:00.870 --> 00:49:00.870
something a little smarter with that.

00:49:01.110 --> 00:49:04.150
So now that we're logged in,
it knows that we're Mr.

00:49:04.150 --> 00:49:04.790
Fubar.

00:49:04.790 --> 00:49:06.880
We can go to view purchases.

00:49:08.090 --> 00:49:08.990
And there we go.

00:49:09.000 --> 00:49:12.400
We see we have three
purchases or three or more.

00:49:12.400 --> 00:49:16.000
Some CDs we bought, various things there.

00:49:16.000 --> 00:49:25.230
This one I didn't set up the size of the
table very well so we didn't fit into

00:49:25.230 --> 00:49:25.270
our box but there's the four so we're
scrolling around through our purchase,

00:49:25.270 --> 00:49:25.270
take a look at that.

00:49:25.570 --> 00:49:29.930
So as this gentleman pointed out there,
why don't we fix that functionality a

00:49:29.930 --> 00:49:34.800
little bit so instead of... ...losing
track of where I am... ...instead of

00:49:34.800 --> 00:49:41.000
just always showing... ...I clicked
on something I shouldn't have.

00:49:41.010 --> 00:49:42.840
Okay, so we're back.

00:49:49.600 --> 00:49:51.560
You got rid of the leading comment,
the opening comment.

00:49:51.590 --> 00:49:52.000
It's gone.

00:49:52.030 --> 00:49:54.990
Yeah.

00:49:55.030 --> 00:49:56.890
Don't know how you did that.

00:49:58.540 --> 00:50:02.490
I think I dragged and dropped
a bunch of code up to the top.

00:50:02.500 --> 00:50:02.880
So let's see.

00:50:02.880 --> 00:50:06.620
Let's go to the browse page.

00:50:06.620 --> 00:50:06.620
That's where our button was.

00:50:08.900 --> 00:50:10.660
Get rid of this guy, get some more room.

00:50:10.660 --> 00:50:14.870
We can take a look at almost all of
the Java Server Faces components.

00:50:15.010 --> 00:50:19.070
There's an advanced property called
rendered and this determines whether

00:50:19.070 --> 00:50:22.550
that the particular component is going
to be rendered for that page rendering.

00:50:22.560 --> 00:50:25.240
So what you can actually do is
have some logic in your back

00:50:25.240 --> 00:50:28.340
end beam that turns off certain
components depending on things,

00:50:28.340 --> 00:50:31.600
depending on conditions or states,
so you can actually have a page,

00:50:31.600 --> 00:50:35.350
a single page that's defined with
different personalities depending on

00:50:35.360 --> 00:50:36.900
various settings and flags and things.

00:50:36.900 --> 00:50:40.910
So we'll go ahead and turn that
off and we'll do some behind the

00:50:40.910 --> 00:50:43.900
scenes work in this particular case.

00:50:43.900 --> 00:50:46.780
Let's see if I can find that guy.

00:50:52.400 --> 00:50:56.400
This is the top.

00:50:56.440 --> 00:50:59.400
So there's the button
that we had just added.

00:50:59.400 --> 00:51:05.570
And one of the properties on the
button that's actually managed normally

00:51:05.570 --> 00:51:07.820
by the UI is the rendered flag.

00:51:14.600 --> 00:51:17.600
I'm sorry, actually I'm looking at
the wrong button there.

00:51:17.600 --> 00:51:21.550
I'm trying to find the purchases.

00:51:21.600 --> 00:51:29.310
I should probably use the search feature.

00:51:29.310 --> 00:51:29.310
I'm going to go ahead and do that.

00:51:29.310 --> 00:51:29.310
I'm going

00:51:35.300 --> 00:51:36.480
While he's doing that.

00:51:36.480 --> 00:51:38.040
- He did.

00:51:38.040 --> 00:51:41.340
- So one of the things that we're
looking at is it is a highly visual

00:51:41.340 --> 00:51:43.740
environment and as you can see,
you also have code if you really

00:51:43.740 --> 00:51:46.980
are comfortable working there,
which Carl is not right now.

00:51:46.980 --> 00:51:50.430
And again,
a lot of the things that we're trying

00:51:50.430 --> 00:51:53.650
to do is we're trying to make things
as easy as possible for developers,

00:51:53.670 --> 00:51:56.300
so a lot of the things you'll see
when you use the environment is,

00:51:56.300 --> 00:52:00.440
there's a lot of consistent
gestures you do in the UI,

00:52:00.600 --> 00:52:06.260
which regardless of the type of action
you're trying to perform are consistent.

00:52:06.270 --> 00:52:09.500
So you notice that while this
may be a very western thing,

00:52:09.500 --> 00:52:11.560
everything you're trying to
do in terms of drag and drop

00:52:11.560 --> 00:52:13.020
is from the left to the right.

00:52:13.020 --> 00:52:14.680
So you drag components on
from the left to the right,

00:52:14.680 --> 00:52:16.500
you drag services, you drag data,
you drag,

00:52:16.500 --> 00:52:17.960
do everything from left to the right.

00:52:17.960 --> 00:52:20.460
Code clips, which you didn't show,
and maybe we'll do it at

00:52:20.460 --> 00:52:22.360
the end to see if it works.

00:52:22.360 --> 00:52:23.660
Again, you drag and drop those.

00:52:23.660 --> 00:52:27.830
Those are parameterized, so for instance,
you can in fact create reusable

00:52:27.830 --> 00:52:33.220
code clips and code snippets that
you can use or you can provide

00:52:33.220 --> 00:52:36.840
other developers so they can
create applications of this type.

00:52:36.840 --> 00:52:38.840
And then everything on
the right are things,

00:52:38.840 --> 00:52:41.680
are properties and attributes you
control in terms of application,

00:52:41.680 --> 00:52:43.770
component properties, display properties,
and so on.

00:52:43.840 --> 00:52:46.040
The other thing that
the environment has is,

00:52:46.040 --> 00:52:48.840
we know that screen real
estate can be quite limiting,

00:52:48.840 --> 00:52:52.700
so there's a number of capabilities
in terms of auto hiding,

00:52:52.730 --> 00:52:56.340
and you can dock windows and
different kinds of things like that.

00:52:56.340 --> 00:52:57.840
Did you find it?

00:52:57.840 --> 00:52:59.340
- What I'm gonna do is type this in now.

00:52:59.340 --> 00:53:02.540
Now somehow I ended up bound to
something else which was surprising me,

00:53:02.540 --> 00:53:03.860
but I think this is the right place.

00:53:03.860 --> 00:53:08.360
So what we really wanna do is
control this particular button's

00:53:08.360 --> 00:53:11.680
rendered property based on
whether the user is logged on,

00:53:11.800 --> 00:53:13.050
logged in, logged on.

00:53:13.150 --> 00:53:16.480
So on the session being itself,

00:53:17.030 --> 00:53:22.140
There is a property called logged on.

00:53:22.140 --> 00:53:25.910
So what we're doing here is
using a feature of JSF which

00:53:25.910 --> 00:53:28.530
is called expression language
EL and we're doing value binding.

00:53:28.540 --> 00:53:32.360
So we can just reference beans
in our application by name and

00:53:32.360 --> 00:53:33.300
reference their properties.

00:53:33.300 --> 00:53:37.870
So basically binding some particular
behavior or look of the component to some

00:53:37.870 --> 00:53:40.190
data that's in the beans in the back end.

00:53:40.200 --> 00:53:41.690
So just by binding that.

00:53:41.690 --> 00:53:46.900
A lot of the properties
in the tool have the UI

00:53:47.300 --> 00:53:58.500
[Transcript missing]

00:53:58.920 --> 00:54:01.840
So now we see that the button's
not displayed here and we can go

00:54:01.840 --> 00:54:04.590
ahead and try to run that again.

00:54:04.840 --> 00:54:06.080
So one of the things that
we was talking about,

00:54:06.080 --> 00:54:07.660
you can create custom
components for this.

00:54:07.660 --> 00:54:10.060
Everything that runs in the system
are standard JSF components,

00:54:10.060 --> 00:54:11.980
so if you know how to
write a JSF component,

00:54:11.980 --> 00:54:14.650
all of those you can easily
drag and drop and put into

00:54:14.720 --> 00:54:16.670
applications that people can use.

00:54:16.680 --> 00:54:19.640
There are a number of third
parties which are creating

00:54:19.640 --> 00:54:21.840
components that work with Creator.

00:54:21.840 --> 00:54:25.150
I'd rather not mention them just
because I'll probably miss one

00:54:25.150 --> 00:54:28.160
and they'll get upset at me,
but companies like iLog and

00:54:28.160 --> 00:54:29.860
ChartFX and so on will do this.

00:54:29.920 --> 00:54:32.220
And they've created a number of
components which work in Creator,

00:54:32.340 --> 00:54:36.350
And you can use them and design them
and use them in applications every day.

00:54:36.530 --> 00:54:41.400
So now we see we're back to the
browse page and the button is hidden.

00:54:41.400 --> 00:54:44.300
So hopefully when I log in,

00:54:44.740 --> 00:54:46.440
The button will be
enabled and there we go.

00:54:46.460 --> 00:54:49.900
So now it won't let us even navigate
to the purchases page until we've

00:54:49.980 --> 00:54:51.930
got the logged in status true.

00:54:52.030 --> 00:54:55.250
So that didn't really require any code,
just going in and typing

00:54:55.250 --> 00:54:56.640
a little expression.

00:54:56.720 --> 00:54:59.880
So go in under the covers if you need to
and that's perfectly fine with Creator.

00:54:59.880 --> 00:55:04.920
It won't mess with your changes and it
will respect everything you've done.

00:55:08.500 --> 00:55:09.350
That's about all I had.

00:55:09.510 --> 00:55:11.640
Okay,
so let's just try the drag and drop clip.

00:55:11.660 --> 00:55:12.660
Okay.

00:55:12.660 --> 00:55:13.640
We're at the end.

00:55:13.760 --> 00:55:14.630
Okay.

00:55:14.660 --> 00:55:18.820
It was just scaring me last night
because it did really bad things.

00:55:18.820 --> 00:55:20.340
Then worked perfectly fine this morning.

00:55:20.340 --> 00:55:23.580
It was, you know how it goes.

00:55:23.580 --> 00:55:25.580
Pick a clip, any clip.

00:55:34.620 --> 00:55:36.050
"It's not locked up.

00:55:36.050 --> 00:55:36.960
Oh yes it is.

00:55:36.960 --> 00:55:37.500
Okay.

00:55:37.500 --> 00:55:41.140
Anyway, it is amazing actually
if you think about it.

00:55:41.140 --> 00:55:44.980
So the Apple engineers have actually
built a new release of the JDK.

00:55:45.000 --> 00:55:48.970
He downloaded it last night and the
whole thing is running on that JDK.

00:55:49.100 --> 00:55:52.160
So just that one little oopsie
could be caused by us too.

00:55:52.160 --> 00:55:55.900
So the fact that, I mean,
this is really cool stuff." "We're

00:55:55.900 --> 00:55:59.430
running the app server and the database
and the IDE all on…" "Java database,

00:55:59.570 --> 00:56:02.580
Java application server and
the tool all running on DP3."

00:56:02.600 --> 00:56:05.000
"Yeah." "Downloaded last night.

00:56:05.000 --> 00:56:05.970
Yeah, brave guy.

00:56:06.030 --> 00:56:07.600
Okay." "Yeah."

00:56:13.320 --> 00:56:17.860
So let's talk a little bit about roadmap.

00:56:17.860 --> 00:56:21.600
The first thing that's interesting is
that the early access available now

00:56:21.600 --> 00:56:25.800
and I know that various Mac people have
found it because I'm seeing downloads.

00:56:26.230 --> 00:56:30.390
So what we're doing today is the
hammerhead release is what we

00:56:30.410 --> 00:56:35.440
announced yesterday at Java 1,
primarily for a number of platforms,

00:56:35.440 --> 00:56:38.090
not all of them, including a Mac,
unfortunately,

00:56:38.090 --> 00:56:41.650
but it is designed to create dynamic
web applications based on JSF.

00:56:41.660 --> 00:56:44.900
The Mac OS X, did it?

00:56:44.900 --> 00:56:46.100
Throw something at me.

00:56:46.100 --> 00:56:47.540
Steve isn't in the room, is he?

00:56:47.590 --> 00:56:52.600
Mac OS X release will be available
within 90 days of our initial release.

00:56:53.160 --> 00:56:55.020
Right now,
you can get the initial release.

00:56:55.020 --> 00:56:57.980
If you go to a site you'll see
on the slide here in a moment,

00:56:57.980 --> 00:56:59.790
you can download the EA,
you can try it out,

00:56:59.810 --> 00:57:01.200
you can provide feedback.

00:57:01.200 --> 00:57:04.410
Part of that is you get into the forums,
and if there's things that

00:57:04.410 --> 00:57:07.020
you believe need to be added,
you can tell us now,

00:57:07.020 --> 00:57:09.830
and hopefully we can address
them by the time we actually

00:57:09.840 --> 00:57:11.440
release the Mac OS X release.

00:57:11.460 --> 00:57:15.130
Again, also, think about the book,
and no, I didn't write it,

00:57:15.130 --> 00:57:18.200
so I'm not getting royalties,
but you can get the book,

00:57:18.340 --> 00:57:22.490
and that will give you some discount
when the final release comes out.

00:57:22.540 --> 00:57:23.140
You're going to save yourself.

00:57:23.160 --> 00:57:25.800
about 50 bucks and get the year
subscription which gives you all

00:57:25.800 --> 00:57:27.880
the content that goes with this.

00:57:28.480 --> 00:57:31.440
Thresher is an update that's primarily
going to be based on customer feedback.

00:57:31.440 --> 00:57:34.380
So this is a release we're looking
at roughly the end of the year.

00:57:34.380 --> 00:57:40.070
The main goal there is to take customer
input and apply it to the product,

00:57:40.080 --> 00:57:43.680
fix some quality issues,
improve the ease of use,

00:57:43.680 --> 00:57:47.740
and essentially increase the
breadth of whatever coverage.

00:57:47.780 --> 00:57:49.680
So the number of app servers,
number of databases,

00:57:49.680 --> 00:57:53.720
talking more to J2AE artifacts
like EJBs and so on,

00:57:53.770 --> 00:57:55.360
easier for our customers.

00:57:56.220 --> 00:57:58.090
When we get to the MAKO,
which is a release we're

00:57:58.130 --> 00:58:00.600
targeting for next year,
we're talking about broadening

00:58:00.600 --> 00:58:01.640
the client coverage.

00:58:01.690 --> 00:58:05.030
So richer clients,
whether they're web or non-web,

00:58:05.180 --> 00:58:08.700
mobile devices, and again,
simplified modeling.

00:58:08.700 --> 00:58:11.800
So one of the things that we really
didn't show is we showed page navigation.

00:58:11.800 --> 00:58:13.740
We really didn't show
application modeling.

00:58:13.740 --> 00:58:17.520
So how is this piece of logic talking,
for instance,

00:58:17.520 --> 00:58:18.860
to a piece of logic on my app server?

00:58:20.880 --> 00:58:25.120
So for more information,
obviously you can contact us.

00:58:25.120 --> 00:58:27.200
So I'm Robert Brewin.

00:58:27.200 --> 00:58:29.540
Dan Roberts is in the Hawaiian shirt
over there because I think

00:58:29.550 --> 00:58:30.800
he's going on vacation soon.

00:58:30.800 --> 00:58:33.590
And Jim Inscore who
I don't think is here.

00:58:33.830 --> 00:58:38.220
Go to www.sun.com/jscreator.

00:58:38.220 --> 00:58:40.500
Follow the links, download the EA.

00:58:40.500 --> 00:58:44.800
You can take a look at some of the form
samples and examples that are out there.

00:58:44.800 --> 00:58:47.530
Obviously,
the Apple reference library will

00:58:47.530 --> 00:58:49.370
give you access to that stuff.