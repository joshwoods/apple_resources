WEBVTT

00:00:12.500 --> 00:00:18.540
Xcode Lead Engineer, Anders Bertelrud.

00:00:24.390 --> 00:00:28.860
I'm Anders Bertelrud,
Xcode Lead Engineer, as you heard.

00:00:28.890 --> 00:00:33.430
In the previous session,
we saw a couple of ways of

00:00:33.500 --> 00:00:37.790
increasing the productivity of Xcode.

00:00:38.060 --> 00:00:44.150
We saw how to increase productivity
when navigating your project,

00:00:44.300 --> 00:00:47.280
in particular with the detail lists,
finding the right files,

00:00:47.360 --> 00:00:50.020
the files by name and by content,
that kind of thing.

00:00:50.020 --> 00:00:53.430
We saw editing,
how to get productive with that.

00:00:53.960 --> 00:00:57.090
We saw some source code management,
how to use documentation, workflow,

00:00:57.140 --> 00:00:58.120
that kind of thing.

00:00:58.120 --> 00:01:01.220
So in this session,
what I'd like to do is to dive down

00:01:01.220 --> 00:01:05.710
a little bit on the build system,
and we can take a look at some

00:01:05.710 --> 00:01:08.430
of the ways specifically of
increasing productivity when

00:01:08.840 --> 00:01:10.830
building your projects in Xcode.

00:01:10.850 --> 00:01:13.570
So let's take the hood off.

00:01:14.290 --> 00:01:16.460
So what we're going to cover is
we're going to start with talking

00:01:16.460 --> 00:01:17.790
about the Xcode project model.

00:01:17.800 --> 00:01:20.380
Just a brief summary,
we've talked about a lot of

00:01:20.470 --> 00:01:24.240
concepts in all these sessions,
like targets and files and build phases,

00:01:24.240 --> 00:01:25.360
that kind of stuff.

00:01:25.480 --> 00:01:28.380
But sometimes it can be a little
bit tricky to keep it all straight.

00:01:28.380 --> 00:01:32.340
So I just want to get real basic and talk
about some of the concepts real quickly.

00:01:32.340 --> 00:01:35.700
And then we're going to talk about
optimizing the build performance.

00:01:35.720 --> 00:01:38.640
Some of the things that you can
do to speed up the things that

00:01:38.750 --> 00:01:40.530
your project's already doing.

00:01:40.540 --> 00:01:43.660
So the kinds of builds that you're
already doing on your projects.

00:01:44.290 --> 00:01:47.130
Then we're going to talk a
little bit about how to automate

00:01:47.130 --> 00:01:48.470
some of the common tasks.

00:01:48.800 --> 00:01:52.970
There may be things you are doing using
Finder or the command line that we can

00:01:52.970 --> 00:01:55.830
actually set up to be done automatically.

00:01:56.230 --> 00:01:59.100
Maybe even at night using
automatic script to run so you

00:01:59.100 --> 00:02:00.100
don't even have to worry about it.

00:02:00.140 --> 00:02:01.740
So we'll talk about this.

00:02:01.780 --> 00:02:03.490
We'll start with the project model.

00:02:04.370 --> 00:02:06.160
So...

00:02:06.900 --> 00:03:13.400
[Transcript missing]

00:03:14.770 --> 00:03:18.670
"File references that are not
actually part of any target at all.

00:03:18.780 --> 00:03:20.900
And well, what are these useful for?

00:03:20.900 --> 00:03:24.280
Well, you know,
maybe you want to have a to-do list or

00:03:24.340 --> 00:03:27.170
you have Read Me or something like that.

00:03:27.290 --> 00:03:32.660
Some people actually use Xcode to
manage their recipe collection.

00:03:32.670 --> 00:03:38.730
And admittedly, most of you actually have
projects that build products.

00:03:38.730 --> 00:03:39.590
So for you,
this would probably be a to-do

00:03:39.590 --> 00:03:39.590
list or something like that."

00:03:40.730 --> 00:03:44.750
So another thing that we have in a
project is dependencies between targets.

00:03:44.920 --> 00:03:46.180
And this is fairly logical, right?

00:03:46.180 --> 00:03:48.760
If you have a library in an application,
you want to make sure the library is up

00:03:48.760 --> 00:03:50.180
to date before you try to build the app.

00:03:50.210 --> 00:03:50.600
Fairly simple.

00:03:50.600 --> 00:03:52.880
We also have build styles,
and we'll get to those

00:03:52.970 --> 00:03:56.010
a little bit more later,
but they're actually separate entities

00:03:56.130 --> 00:03:59.820
in a project that get applied to a
target dynamically when you build.

00:03:59.820 --> 00:04:01.360
We'll talk about that in more detail.

00:04:02.220 --> 00:04:04.900
So here's another case,
which related to a question that we had

00:04:04.910 --> 00:04:06.910
just recently from the previous session.

00:04:06.910 --> 00:04:09.800
You can actually have one
project that refers to another.

00:04:09.800 --> 00:04:13.020
So in this case, we still have the first
project as the file references,

00:04:13.020 --> 00:04:14.480
targets as usual.

00:04:14.480 --> 00:04:17.380
Files belong to the targets,
nothing special there.

00:04:17.380 --> 00:04:21.320
The second one is files, targets,
files belong to targets.

00:04:21.390 --> 00:04:25.260
And there's the dependencies between
the targets within a project.

00:04:27.290 --> 00:04:28.570
But there's something more we can do.

00:04:28.660 --> 00:04:32.210
We can actually add a project
reference to the first project,

00:04:32.260 --> 00:04:36.580
in which case we have a
link to the other project.

00:04:36.650 --> 00:04:38.620
So now the first project,
the one on the left,

00:04:38.760 --> 00:04:40.800
actually knows about the
project on the right.

00:04:40.850 --> 00:04:47.810
And therefore,
we can set up dependencies between the

00:04:47.810 --> 00:04:47.930
targets between the different projects.

00:04:47.930 --> 00:04:47.930
So this can be very useful.

00:04:48.780 --> 00:04:50.430
We still, of course,
have the build styles,

00:04:50.430 --> 00:04:54.700
and they can actually apply to builds of
the targets in the secondary projects.

00:04:54.700 --> 00:04:57.590
We'll go into that a little bit more.

00:04:58.220 --> 00:04:59.550
So we talked about targets.

00:04:59.710 --> 00:05:01.620
Well, what are these targets then?

00:05:01.620 --> 00:05:05.200
We talked about application and
library and those kinds of things.

00:05:05.200 --> 00:05:08.950
Those are really product types,
the types of things you want to build.

00:05:08.950 --> 00:05:11.420
The target types more
refer to build systems.

00:05:11.420 --> 00:05:14.830
So we have this dependency layer
that goes between the targets.

00:05:14.830 --> 00:05:18.260
Those were the red dashed arrows
you saw in the previous diagram.

00:05:18.280 --> 00:05:21.540
So you can have your application,
your library, et cetera.

00:05:21.540 --> 00:05:23.990
But each target can have
its own build system.

00:05:23.990 --> 00:05:26.700
And so we'll see how this can be useful.

00:05:26.700 --> 00:05:29.510
The first kind are native targets.

00:05:29.510 --> 00:05:32.590
This is what Xcode really shines with.

00:05:32.590 --> 00:05:36.250
This is where the dependency
graph is maintained continuously,

00:05:36.250 --> 00:05:39.000
up-to-date, internally,
so we can show nice up-to-date

00:05:39.010 --> 00:05:40.390
information about it.

00:05:40.470 --> 00:05:43.060
Native targets currently
support applications,

00:05:43.060 --> 00:05:45.060
frameworks, libraries, plugins.

00:05:45.060 --> 00:05:49.230
And there is project-level
support for multiple OS SDKs.

00:05:49.230 --> 00:05:52.800
So you can be on Panther and
you can build for Tiger,

00:05:52.800 --> 00:05:54.010
for example.

00:05:55.300 --> 00:05:59.100
They provide the best integration
with the user interface.

00:05:59.110 --> 00:06:00.730
But sometimes that's not feasible.

00:06:00.750 --> 00:06:04.170
So sometimes you have other kinds
of targets that you want to use.

00:06:04.340 --> 00:06:07.340
So one other kind are what
we call external targets.

00:06:07.520 --> 00:06:12.180
And the icon here is a shell
command or a command line tool icon

00:06:12.180 --> 00:06:17.330
because it actually lets you invoke
any command line tool at all.

00:06:17.570 --> 00:06:22.300
And you can typically invoke things like
new make or ant or those kinds of things.

00:06:22.390 --> 00:06:25.580
Typically, they're used if you have maybe
an open source project or a

00:06:25.580 --> 00:06:27.500
project that is cross-platform.

00:06:27.680 --> 00:06:30.660
But you can actually invoke
any script or command,

00:06:30.660 --> 00:06:33.490
as we'll see a little
bit later on in a demo.

00:06:33.770 --> 00:06:37.580
Xcode also supports
Project Builder Jam-style targets.

00:06:37.600 --> 00:06:40.230
So for those of you who had
projects in Project Builder,

00:06:40.230 --> 00:06:42.670
there was a separate command
line tool called Jam,

00:06:42.670 --> 00:06:44.240
stands for Just Another Make.

00:06:44.320 --> 00:06:48.640
And that's what, it was an external tool,
the pipeline for the information

00:06:48.640 --> 00:06:51.660
between the IDE and the
build tool wasn't that great,

00:06:51.670 --> 00:06:54.140
so that's why we have native targets.

00:06:54.320 --> 00:06:56.480
But the Jam targets still
support everything that

00:06:56.480 --> 00:06:58.000
they did in Project Builder.

00:06:58.000 --> 00:07:01.620
We did this specifically so that you'd
be able to transition your projects from

00:07:01.620 --> 00:07:03.580
Project Builder to Xcode very easily.

00:07:03.820 --> 00:07:05.570
Um...

00:07:05.780 --> 00:07:07.640
It's a good idea to
convert to native targets.

00:07:07.720 --> 00:07:10.100
There's a menu item for that.

00:07:10.250 --> 00:07:15.430
The only thing not supported as native
targets in Xcode 1.5 are Java targets.

00:07:15.570 --> 00:07:17.280
We're working on that.

00:07:18.100 --> 00:07:23.110
And the architecture of Xcode
is actually fairly flexible.

00:07:23.210 --> 00:07:27.050
So in the future,
we plan to allow you to plug in

00:07:27.440 --> 00:07:30.750
customized support for other kinds
of build systems if you want to.

00:07:30.780 --> 00:07:31.760
We don't have that yet.

00:07:31.790 --> 00:07:36.300
We're hard at work on that when we're
not doing presentations for WWDC.

00:07:36.890 --> 00:07:38.720
So that's a little bit
about target types.

00:07:38.760 --> 00:07:42.700
So these things determine
what gets built,

00:07:42.900 --> 00:07:44.630
but how do we determine how to build it?

00:07:44.760 --> 00:07:46.220
Well, these are the build settings,
right?

00:07:46.280 --> 00:07:48.340
So they control the inner
workings of a build.

00:07:48.370 --> 00:07:51.940
They're like the properties,
it's like new make variables,

00:07:51.990 --> 00:07:52.930
analogous to that.

00:07:53.020 --> 00:07:54.680
So they're individual properties.

00:07:54.940 --> 00:07:58.990
One setting's value can
actually refer to another one.

00:07:59.000 --> 00:08:00.460
This is somewhat powerful.

00:08:00.460 --> 00:08:05.560
You can define a setting that has
the path of a common directory and

00:08:05.570 --> 00:08:07.900
then base everything off of that.

00:08:08.410 --> 00:08:11.640
For example, the install path can
actually refer to $home.

00:08:11.720 --> 00:08:14.490
Turns out that home is one of
the build settings that gets

00:08:14.490 --> 00:08:18.380
inherited from the environment,
so that can be kind of nice.

00:08:18.380 --> 00:08:20.600
Build settings are passed
as environment variables.

00:08:20.600 --> 00:08:21.850
I mentioned external targets.

00:08:21.990 --> 00:08:23.350
We pass that in the environment.

00:08:23.390 --> 00:08:27.460
So if you have an external shell script
or a new make target or whatever,

00:08:27.460 --> 00:08:30.300
they will actually have access to that.

00:08:30.300 --> 00:08:33.140
Of course, for native targets,
it doesn't really matter.

00:08:33.140 --> 00:08:35.980
There is no external
command to be called.

00:08:35.980 --> 00:08:37.590
Build settings can be
set at various levels.

00:08:37.740 --> 00:08:39.910
We'll see that shortly.

00:08:40.110 --> 00:08:42.660
They're usually set on
a particular target,

00:08:42.660 --> 00:08:47.070
because that's the most natural place
to set a preference or a build default

00:08:47.070 --> 00:08:49.190
is on the product that gets built.

00:08:49.240 --> 00:08:51.560
And there's an ordering
for build settings,

00:08:51.560 --> 00:08:54.420
so that your customized
values override the defaults,

00:08:54.420 --> 00:08:57.000
and the build styles
override the target values,

00:08:57.000 --> 00:08:57.670
et cetera.

00:08:57.670 --> 00:09:00.300
The higher levels
override the lower levels.

00:09:00.330 --> 00:09:01.720
So what are the levels?

00:09:01.860 --> 00:09:03.570
Well, here's the precedence.

00:09:03.570 --> 00:09:07.160
At the bottom, we have the inherited
environment variables.

00:09:07.160 --> 00:09:09.980
These are just the basic
things like the home variables.

00:09:10.000 --> 00:09:12.000
They come from a terminal.

00:09:12.000 --> 00:09:14.130
If you're purely an ID user,
you probably don't care

00:09:14.330 --> 00:09:15.980
so much about this.

00:09:16.020 --> 00:09:17.970
After that come the
built-in default settings.

00:09:17.970 --> 00:09:19.630
There's a lot of these, right?

00:09:19.680 --> 00:09:23.590
These are all the default settings
for all the compilers or linkers

00:09:23.590 --> 00:09:25.380
or whatever you have installed.

00:09:25.380 --> 00:09:27.720
So whether or not optimization
is on or off by default,

00:09:27.720 --> 00:09:28.760
that kind of thing.

00:09:31.260 --> 00:09:34.740
Above that are the target settings.

00:09:34.850 --> 00:09:36.330
The build style settings come above that.

00:09:36.440 --> 00:09:39.760
We'll talk a little bit
more in detail about that.

00:09:39.840 --> 00:09:41.790
And above that are the
command line settings.

00:09:41.890 --> 00:09:42.490
Well, what's this?

00:09:42.620 --> 00:09:45.730
Well, for the IDE itself,
this is always empty.

00:09:45.730 --> 00:09:47.780
This is always a moot point.

00:09:47.780 --> 00:09:50.750
But it turns out you can actually
build a project from the command line,

00:09:50.820 --> 00:09:52.240
and that's where this gets useful.

00:09:52.340 --> 00:09:56.200
You can overwrite any setting at all
from the command line when you invoke

00:09:56.200 --> 00:10:00.240
what's called Xcode build to build
your project from the command line.

00:10:01.320 --> 00:10:02.750
The environment variables
we talked about,

00:10:02.750 --> 00:10:03.460
these get inherited.

00:10:03.650 --> 00:10:05.540
The built-in defaults
are the linker settings,

00:10:05.540 --> 00:10:07.320
that kind of thing, the default values.

00:10:07.360 --> 00:10:09.620
Target settings are real interesting,
so we're going to drill it

00:10:09.620 --> 00:10:10.860
down and talk more about those.

00:10:10.860 --> 00:10:14.780
You set the target settings in the
Build tab of the Target Inspector or

00:10:14.780 --> 00:10:16.260
the Target Info window.

00:10:16.260 --> 00:10:19.610
So we see the little red circle there,
how you get to that.

00:10:19.610 --> 00:10:21.720
And that opens up this panel.

00:10:21.720 --> 00:10:23.810
And here we see the settings.

00:10:23.810 --> 00:10:25.010
It's just a list.

00:10:25.170 --> 00:10:27.620
You saw this in the previous session.

00:10:27.700 --> 00:10:31.180
It shows the inherited default values
as well as anything you've customized.

00:10:31.200 --> 00:10:36.350
Anything that you've
customized is shown in bold.

00:10:36.600 --> 00:10:51.660
And the inherited ones are not in bold.

00:10:51.660 --> 00:10:51.660
Also, I mentioned the build settings.

00:10:51.660 --> 00:10:51.660
Anything set in a build setting
trumps the values at lower levels.

00:10:51.660 --> 00:10:51.660
So we show in strikethrough,
we show the ones that are

00:10:51.660 --> 00:10:51.660
set in build settings.

00:10:51.940 --> 00:10:57.060
So this indicates that the dead
code stripping setting is actually

00:10:57.060 --> 00:11:00.150
overridden in the current build style.

00:11:00.950 --> 00:11:03.440
Something else here is we have a
pop-up menu that lets you focus

00:11:03.440 --> 00:11:04.580
on a category of build settings.

00:11:04.580 --> 00:11:06.860
I think this was shown in
the introduction to Xcode,

00:11:06.860 --> 00:11:11.300
but it's worth pointing out again that
you can actually click on that table

00:11:11.300 --> 00:11:14.670
heading there and narrow down your focus.

00:11:14.840 --> 00:11:18.450
And of course, we have the search field,
which lets you find any

00:11:18.480 --> 00:11:20.500
setting that you want quickly.

00:11:20.500 --> 00:11:23.860
And this matches not only
the name of the setting,

00:11:23.860 --> 00:11:26.940
but also we search in the
help string for that setting.

00:11:27.080 --> 00:11:29.830
So if you type in,
if you're not sure or if you can't

00:11:29.830 --> 00:11:33.750
find the setting you're looking for,
try typing a phrase related

00:11:33.750 --> 00:11:35.650
to that into the field here.

00:11:37.580 --> 00:11:39.060
OK, so much for target settings.

00:11:39.060 --> 00:11:40.330
That's pretty simple.

00:11:40.400 --> 00:11:43.200
So build style settings,
let's talk about that.

00:11:43.200 --> 00:11:46.060
These guys are set in a similar manner.

00:11:46.080 --> 00:11:50.320
They allow for variations on targets,
so debug versus release,

00:11:50.430 --> 00:11:54.590
the pro version of the
app versus a demo version,

00:11:54.770 --> 00:11:55.710
let's say.

00:11:55.720 --> 00:12:00.660
As I mentioned, the build styles override
anything at the lower level.

00:12:02.480 --> 00:12:05.080
Some examples of how to use build styles.

00:12:05.100 --> 00:12:07.540
You can, for example,
build without debugging symbols.

00:12:07.620 --> 00:12:09.480
This is fairly obvious.

00:12:09.510 --> 00:12:11.460
You can build with zero link,
enable or disable.

00:12:11.460 --> 00:12:13.740
Zero link is a feature that
we use at development time,

00:12:13.740 --> 00:12:16.880
but we really don't want to
use while we ship the product.

00:12:16.900 --> 00:12:18.960
Different optimization levels,
pretty easy.

00:12:18.960 --> 00:12:19.900
Alternative algorithms.

00:12:19.900 --> 00:12:22.700
Suppose you're trying out
some new hash table algorithm.

00:12:22.730 --> 00:12:25.970
You want to build one variation of
your app with the old algorithm,

00:12:26.080 --> 00:12:29.580
one variation with the new one,
and do some performance tests, let's say.

00:12:29.770 --> 00:12:31.990
You can enable or disable features.

00:12:32.040 --> 00:12:34.330
If you do a demo version of the app,
you want to disable save.

00:12:34.500 --> 00:12:37.140
And with dead code stripping,
the code's going to get removed as well.

00:12:37.240 --> 00:12:40.090
That's a feature that's new to 1.5.

00:12:40.290 --> 00:12:43.400
You may want to set different build
output paths so that you have your

00:12:43.400 --> 00:12:46.130
debug build object files going
to one place and your deployment

00:12:46.180 --> 00:12:48.410
build going to the other place.

00:12:49.190 --> 00:12:51.140
So why not just have multiple targets,
right?

00:12:51.140 --> 00:12:52.760
I mean, we already have separate targets.

00:12:52.760 --> 00:12:55.270
Well, you could,
but let's consider an example, right?

00:12:55.390 --> 00:12:58.510
So what if I have an application,
and let's say that I have a demo

00:12:58.510 --> 00:13:00.860
version of that application,
right?

00:13:01.030 --> 00:13:05.920
So all we do there is we set a special
pound to find that turns off saving,

00:13:05.990 --> 00:13:06.640
okay?

00:13:06.640 --> 00:13:09.920
Let's say there's a support
library that they all rely on.

00:13:09.920 --> 00:13:13.180
But actually, so I've been doing
development for a month,

00:13:13.310 --> 00:13:16.830
and so let's see, okay, well,
what I've actually been developing

00:13:16.890 --> 00:13:21.800
is my debug version of these things,
right?

00:13:21.900 --> 00:13:23.680
So now it comes time to deploy.

00:13:23.710 --> 00:13:25.840
Well, I want to optimize better.

00:13:25.840 --> 00:13:28.190
I want to maybe turn
off some debug logging,

00:13:28.210 --> 00:13:29.380
that kind of stuff.

00:13:29.380 --> 00:13:32.190
So I really have another version
of each of these targets.

00:13:32.190 --> 00:13:34.910
And then suppose I want to have
yet a third style where I say,

00:13:34.910 --> 00:13:36.990
well, let me try that new hash algorithm.

00:13:37.080 --> 00:13:42.090
I still want to have optimization on so
I can really do the performance testing.

00:13:42.350 --> 00:13:46.340
So now I have really yet a third
set of each of the targets.

00:13:46.340 --> 00:13:48.270
So all told, I have nine targets.

00:13:48.270 --> 00:13:50.600
And really what I have, though,
if you look at them,

00:13:50.600 --> 00:13:55.390
is a combination of three targets
times three variations on each.

00:13:55.390 --> 00:13:58.660
We coalesce these into build styles.

00:13:58.660 --> 00:14:00.500
We get rid of these.

00:14:00.500 --> 00:14:05.010
So what we really have is M plus
N as opposed to M times N.

00:14:05.290 --> 00:14:07.720
So build styles are multiple targets,
right?

00:14:07.720 --> 00:14:10.940
You can use multiple targets
and just ignore build styles.

00:14:10.940 --> 00:14:11.650
That's fine.

00:14:11.860 --> 00:14:15.160
But they're there and especially
helpful for large projects.

00:14:17.190 --> 00:14:20.420
So let's talk about how to set those,
the settings there.

00:14:20.420 --> 00:14:23.270
We go to, actually, the project,
if you notice,

00:14:23.270 --> 00:14:26.290
what's selected here is the
project icon up at the top.

00:14:26.430 --> 00:14:30.010
Build styles are attached to the project,
not to each target.

00:14:30.010 --> 00:14:32.860
So we inspect the project,
and that's where we see a

00:14:32.860 --> 00:14:34.390
list of the build styles.

00:14:34.390 --> 00:14:36.050
So this is in the styles tab.

00:14:36.050 --> 00:14:40.110
If you notice at the top, the four tabs,
I've selected the styles tab.

00:14:40.110 --> 00:14:43.020
And there I see, in the pop-up,
I see all of the styles

00:14:43.070 --> 00:14:44.880
that are available.

00:14:47.180 --> 00:14:49.090
window looks very familiar, right?

00:14:49.100 --> 00:14:51.460
It's the same thing that we
see in the target inspector,

00:14:51.730 --> 00:14:58.370
it's just now we're editing a
different level of the precedence.

00:15:01.860 --> 00:15:06.030
One important thing or one important
way to use the build styles is

00:15:06.090 --> 00:15:09.880
to only define the things that
are unique about that style.

00:15:10.080 --> 00:15:13.310
So if you have some setting that
really is common to all the styles,

00:15:13.530 --> 00:15:17.170
has the same value for all the styles,
odds are that it's not

00:15:17.170 --> 00:15:19.390
really part of the variation.

00:15:19.790 --> 00:15:22.360
So that's one thing to keep in mind.

00:15:22.410 --> 00:15:27.940
One interesting thing is that you can
actually refer to the overridden value.

00:15:27.940 --> 00:15:30.930
You don't actually have to
obliterate whatever is defined below.

00:15:31.150 --> 00:15:32.750
You can just append to it.

00:15:33.040 --> 00:15:38.860
So if you have a bunch
of preprocessor macros,

00:15:38.990 --> 00:15:42.990
you can say $VALUE and sort
of capture the overridden

00:15:42.990 --> 00:15:42.990
value and then just add to it.

00:15:43.540 --> 00:15:46.750
That was a little bit
about build style settings.

00:15:46.750 --> 00:15:51.010
There's more in the documentation you can
reach from the pink Help button there.

00:15:51.010 --> 00:15:53.220
Again, we talked about the
command line settings.

00:15:53.220 --> 00:15:55.120
These are for use by Xcode Build.

00:15:55.120 --> 00:15:56.520
I'll talk about that a little bit later.

00:15:57.650 --> 00:16:00.660
Another thing that native
targets have is build rules.

00:16:00.800 --> 00:16:03.090
These are just like the rules
that you would define in

00:16:03.090 --> 00:16:04.520
Make or any language like that.

00:16:04.540 --> 00:16:07.380
They control how source
files are processed.

00:16:07.680 --> 00:16:09.900
Every rule consists of a
condition and an action.

00:16:09.900 --> 00:16:13.400
The condition matches on the kind
of file that you want to process.

00:16:13.440 --> 00:16:16.510
The first matching rule is used.

00:16:16.570 --> 00:16:21.590
What Xcode does is that it
matches on either file type.

00:16:21.690 --> 00:16:26.810
This is the abstract file type,
such as all C-like language files,

00:16:26.810 --> 00:16:27.380
which would include the Xcode file type.

00:16:27.400 --> 00:16:29.400
You can use the Xcode C, C++,
Objective-C, that kind of stuff.

00:16:29.400 --> 00:16:32.220
Or you can match on specific patterns.

00:16:32.240 --> 00:16:35.340
The file name pattern matching
is particularly useful if you

00:16:35.350 --> 00:16:38.400
have something like a custom
extension for a custom file format.

00:16:38.400 --> 00:16:41.730
Let's say you have a unique
image file format that you use.

00:16:41.730 --> 00:16:43.400
You're developing a game.

00:16:43.400 --> 00:16:48.390
You can set up a rule that will take
files with that suffix and pipe them

00:16:48.390 --> 00:16:51.970
through some translation tool that
compiles the image or whatever so that

00:16:52.060 --> 00:16:53.400
it can load faster into your game.

00:16:53.400 --> 00:16:55.970
That's just an example.

00:16:56.780 --> 00:16:58.990
You can use them to select
the compiler and version.

00:16:59.180 --> 00:17:03.450
For example, GCC 3.5,
there's a preview of that

00:17:03.450 --> 00:17:06.280
on the DVD that you got.

00:17:06.530 --> 00:17:11.210
And you can use build rules to
select between GCC 3.3 and 3.5.

00:17:11.210 --> 00:17:16.160
The default is 3.3,
but you can easily just change

00:17:16.160 --> 00:17:19.180
the pop-up to select 3.5.

00:17:19.930 --> 00:17:23.190
Another example is Java C versus JEGS.

00:17:23.600 --> 00:17:26.200
And as I mentioned,
you can also use them to generate,

00:17:26.200 --> 00:17:28.990
translate files,
or even generate custom source code.

00:17:29.020 --> 00:17:33.490
The outputs of a build rule are piped
back into the build rule machinery,

00:17:33.600 --> 00:17:36.830
so you can generate some cascading
rule applications this way.

00:17:36.840 --> 00:17:40.880
You edit the build rules using, again,
the target inspector.

00:17:40.880 --> 00:17:42.810
You go to the Rules tab this time.

00:17:42.820 --> 00:17:44.140
Pretty obvious.

00:17:44.140 --> 00:17:50.630
We see here that you can define,
you can use a custom script if you want,

00:17:50.650 --> 00:17:53.950
and there are some macros that
you can access for the name

00:17:53.950 --> 00:17:56.120
of the file being processed.

00:17:56.120 --> 00:18:01.050
Again, the pink question mark icon there
is your friend when it comes to

00:18:01.170 --> 00:18:03.690
help about what's going on here.

00:18:07.260 --> 00:18:10.400
As we see here,
the system rules are defined down

00:18:10.400 --> 00:18:12.380
below and the custom rules are above.

00:18:12.390 --> 00:18:14.680
If you remember,
I said the first matching rule is used.

00:18:14.800 --> 00:18:19.890
So custom rules at the target level
override anything at the system.

00:18:21.830 --> 00:18:27.640
We have a fairly extensive set of
built-in types that Xcode recognizes.

00:18:27.640 --> 00:18:31.660
And if you notice at the bottom, well,
it's pretty low, but the last item says

00:18:31.770 --> 00:18:33.180
source files matching.

00:18:33.180 --> 00:18:35.800
That's where you can type in, let's say,
startup food.

00:18:35.970 --> 00:18:37.920
So that's the condition.

00:18:39.110 --> 00:18:45.720
The action shows all the compilers and
translators that Xcode knows about.

00:18:45.750 --> 00:18:50.260
And you can also type in a custom script
in any scripting language you like.

00:18:50.410 --> 00:18:53.910
So that's a little bit about build rules.

00:18:54.080 --> 00:18:55.740
As I show you,
you can define actually what

00:18:55.740 --> 00:18:56.860
the output path is going to be.

00:18:57.040 --> 00:18:58.940
This ties into Xcode's
dependency analysis.

00:18:58.940 --> 00:19:03.610
So your script is only run if the
inputs are newer than the outputs.

00:19:04.970 --> 00:19:05.240
OK.

00:19:05.630 --> 00:19:09.650
So let me show a little demo,
just show where some of these things are.

00:19:09.680 --> 00:19:11.740
Could I have the demo machine, please?

00:19:14.840 --> 00:19:17.190
Thanks.

00:19:17.300 --> 00:19:20.190
OK,
so I have here just a version of Sketch.

00:19:20.280 --> 00:19:24.790
And what I wanted to show
was a couple of things.

00:19:24.850 --> 00:19:27.460
In so many of these demos, you know,
we've just kind of opened something

00:19:27.460 --> 00:19:28.720
and build it and shows that it builds.

00:19:28.720 --> 00:19:30.490
I figured I'd do something a
little bit different and actually

00:19:30.510 --> 00:19:33.350
show you just where the items are,
some of the more

00:19:33.430 --> 00:19:35.490
commonly asked questions.

00:19:35.600 --> 00:19:40.760
So one of the big ones is if
you select the project icon

00:19:40.760 --> 00:19:44.500
up here and then say Info,
that's how you get access to the styles.

00:19:44.680 --> 00:19:46.190
They're not underneath the targets.

00:19:46.370 --> 00:19:50.450
The target has its own settings,
so we can inspect that too.

00:19:50.540 --> 00:19:52.440
And actually,
I inspected the target Smart Group,

00:19:52.470 --> 00:19:53.110
which has nothing.

00:19:53.210 --> 00:19:56.800
But I can select each
target and show that.

00:19:56.870 --> 00:20:00.300
But again,
the project is what has the styles.

00:20:00.370 --> 00:20:03.740
If you notice here, there are a couple of
items that are in bold.

00:20:04.060 --> 00:20:05.090
These are overridden.

00:20:05.100 --> 00:20:07.740
I've actually here,
I've overridden the output

00:20:07.770 --> 00:20:10.600
location for both the
intermediates and for the products.

00:20:10.600 --> 00:20:13.100
And so what's going to happen
here is that when I build with

00:20:13.100 --> 00:20:15.560
the development build style,
it's going to put everything

00:20:15.570 --> 00:20:16.940
into a subdirectory called debug.

00:20:16.940 --> 00:20:20.140
If you build with a deployment,
it's going to put them just

00:20:20.140 --> 00:20:21.940
into the default location.

00:20:22.000 --> 00:20:23.700
So that's fairly useful.

00:20:23.700 --> 00:20:27.700
This is also where you can define
new styles up here in the project

00:20:27.700 --> 00:20:31.940
inspector and name your own build style,
that kind of thing.

00:20:31.940 --> 00:20:35.940
You can obviously edit build styles
and delete them and that kind of stuff.

00:20:36.010 --> 00:20:40.130
So one other thing that
I wanted to show is that when

00:20:40.130 --> 00:20:46.560
we have string list settings,
you can actually edit the

00:20:46.610 --> 00:20:49.880
value using a sheet now.

00:20:49.890 --> 00:20:53.720
And if I can find one,
let's say preprocessor definitions.

00:20:53.730 --> 00:20:55.500
Can narrow it down there.

00:20:55.550 --> 00:20:56.540
Preprocessor defines.

00:20:56.540 --> 00:20:59.320
I can say edit setting,
and I actually get the sheet to

00:20:59.700 --> 00:21:02.520
edit individual list items in here.

00:21:02.620 --> 00:21:05.320
So I can do that if I choose.

00:21:07.190 --> 00:21:10.690
One other thing I wanted
to show is the build rules.

00:21:10.700 --> 00:21:13.620
Again, here's the rules editor.

00:21:13.690 --> 00:21:16.540
Now, notice again that this
is at the target level,

00:21:16.540 --> 00:21:18.560
so each target can define its own rules.

00:21:18.560 --> 00:21:22.130
Here are the inherited ones,
and I can also, of course,

00:21:22.200 --> 00:21:25.830
add my own rule,
and I can choose whatever I like here.

00:21:31.650 --> 00:21:36.110
One thing that you may find
useful is you notice I can

00:21:36.120 --> 00:21:38.280
only select the target up here.

00:21:38.310 --> 00:21:42.490
We actually have another pop-up menu
that you can add to your toolbar.

00:21:42.600 --> 00:21:45.630
If you end up using build styles a lot,
like I do, for example,

00:21:45.630 --> 00:21:49.050
you can actually just add another
pop-up for the build style.

00:21:49.190 --> 00:21:51.730
And so the way to read this is, okay,
I'm going to build the sketch target.

00:21:52.040 --> 00:21:55.210
I'm going to build it with either --
for either deployment or development.

00:21:55.270 --> 00:21:58.570
And that can be a fairly
handy thing to do.

00:21:58.570 --> 00:22:01.360
So just a little overview of this.

00:22:01.360 --> 00:22:03.590
Can we go back to the slides,

00:22:10.070 --> 00:22:11.580
So we talked about the
project model a little bit.

00:22:11.600 --> 00:22:14.700
That was sort of a quick
introduction or a quick refresher.

00:22:14.870 --> 00:22:16.550
Let's talk really about
optimizing build performance.

00:22:16.570 --> 00:22:17.320
That's why you're here, right?

00:22:17.320 --> 00:22:18.890
Increasing productivity with Xcode.

00:22:18.950 --> 00:22:20.840
So speeding up the builds.

00:22:20.890 --> 00:22:23.950
Well, what occurs during a build?

00:22:25.860 --> 00:22:28.650
Xcode has a fast,
powerful build system and it keeps

00:22:28.730 --> 00:22:30.880
a lot of information internally.

00:22:30.880 --> 00:22:32.140
So some features are automatic.

00:22:32.140 --> 00:22:34.730
We talked about the dependency
analysis that's always kind of

00:22:34.730 --> 00:22:37.690
being updated in the background so
that when you hit the build hammer,

00:22:37.690 --> 00:22:39.530
we already know what's
up to date and not.

00:22:39.530 --> 00:22:41.300
We talked about parallel builds.

00:22:41.300 --> 00:22:44.380
If you have a dual CPU machine,
Xcode automatically takes

00:22:44.380 --> 00:22:45.710
advantage of both CPUs.

00:22:45.710 --> 00:22:48.630
Zero link,
these are all things you've heard about.

00:22:48.720 --> 00:22:51.030
Predictive compilation you may
not have heard so much about.

00:22:51.030 --> 00:22:52.600
We'll talk a little bit more about that.

00:22:52.670 --> 00:22:56.300
The basic idea is that we can start
compiling while you're still editing your

00:22:56.420 --> 00:23:00.100
file so that by the time you save your
file and you actually hit the hammer,

00:23:00.200 --> 00:23:01.530
we're done compiling it.

00:23:01.540 --> 00:23:03.680
And that works really nicely,
especially when you have

00:23:03.680 --> 00:23:04.700
single file turnaround.

00:23:06.900 --> 00:23:08.820
So those are some automatic things.

00:23:08.820 --> 00:23:11.980
There are some things you can
do to optimize your project.

00:23:11.980 --> 00:23:15.060
One of the biggest things is
to add a precompiled header.

00:23:15.060 --> 00:23:17.490
Xcode comes, well,
Mac OS X comes with a lot of

00:23:17.490 --> 00:23:20.880
SDKs and a lot of headers,
and there's just a lot of declarations

00:23:20.910 --> 00:23:24.400
that the compiler has to see every
time it compiles a source file.

00:23:24.400 --> 00:23:27.940
So we can speed up some of that
work by doing it only once.

00:23:29.780 --> 00:23:31.500
Another big thing is distributed builds.

00:23:31.500 --> 00:23:33.040
I'm sure you've heard of this too.

00:23:33.200 --> 00:23:35.000
Maybe you don't know
quite how to enable it,

00:23:35.000 --> 00:23:36.840
configure it, that kind of stuff.

00:23:36.960 --> 00:23:38.070
We'll talk a little bit about that.

00:23:38.100 --> 00:23:42.430
Fix and continue is another thing that
you saw in the introduction sessions.

00:23:42.530 --> 00:23:44.930
How many people are actually used then?

00:23:47.620 --> 00:23:48.890
OK.

00:23:49.630 --> 00:23:50.040
Try it out.

00:23:50.230 --> 00:23:51.770
It works most of the time.

00:23:51.780 --> 00:23:55.040
There are some caveats that
other sessions have gone into.

00:23:55.110 --> 00:23:57.810
If you change the size of a structure,
that kind of thing.

00:23:57.820 --> 00:23:59.940
Basically, this patches your code
while it's running,

00:24:00.040 --> 00:24:02.020
so you don't even have to
quit and restart the app.

00:24:02.020 --> 00:24:04.680
And it can be really a time saver.

00:24:05.410 --> 00:24:08.170
But let's talk a little bit more about
the compile-- edit/compile/debug cycle.

00:24:08.260 --> 00:24:09.890
So let's say we're editing a file.

00:24:10.020 --> 00:24:11.600
That takes some time, right?

00:24:11.720 --> 00:24:14.420
And then we have-- let's
say we edit four files.

00:24:14.550 --> 00:24:16.440
We end up-- this is the slow case.

00:24:16.510 --> 00:24:18.450
We end up compiling
each of the four files,

00:24:18.520 --> 00:24:21.860
and then we link,
and then we start the program.

00:24:21.960 --> 00:24:25.440
So one of the things we can do,
as I mentioned-- here's the

00:24:25.440 --> 00:24:26.750
timeline that this all takes.

00:24:26.890 --> 00:24:28.730
One of the things we
can do is set up a PCH,

00:24:28.780 --> 00:24:30.170
a Precompiled Header.

00:24:30.290 --> 00:24:33.600
This cuts each compilation down
to a fraction of what it was.

00:24:33.940 --> 00:24:36.700
So we shorten the overall time.

00:24:36.770 --> 00:24:39.020
OK, that's pretty straightforward.

00:24:39.200 --> 00:24:41.500
Another thing we can do is
to use ZeroLink to enable

00:24:41.500 --> 00:24:43.180
that during development.

00:24:43.270 --> 00:24:45.700
It is enabled by default
for development builds.

00:24:45.790 --> 00:24:50.050
So that cuts out the
link during development.

00:24:50.140 --> 00:24:53.490
So now we've shortened
it a little bit more.

00:24:55.310 --> 00:24:59.640
Still, we have the CPU marching
through each processor,

00:24:59.730 --> 00:25:02.550
like that, kind of just compiling it,
and then finally we start the program.

00:25:02.670 --> 00:25:04.080
So let's do it in parallel.

00:25:04.140 --> 00:25:14.200
If we have dual CPU, we can have each
CPU actually going through,

00:25:14.200 --> 00:25:14.200
compiling, and we're done in a
shorter amount of time.

00:25:14.410 --> 00:25:15.840
But we can do even better.

00:25:16.000 --> 00:25:21.240
Suppose instead of just using two CPUs,
we used one of ours or two

00:25:21.240 --> 00:25:24.880
of ours to take the data,
preprocess it somehow,

00:25:24.880 --> 00:25:26.840
send it out across the wire,

00:25:26.950 --> 00:25:30.830
To other machines,
let those compile the files

00:25:30.840 --> 00:25:33.000
and send the results back.

00:25:33.450 --> 00:25:35.320
And then we just harvest the results.

00:25:35.460 --> 00:25:37.780
So that shortens the time.

00:25:37.800 --> 00:25:44.180
And that is great for large builds,
especially when you have lots of files.

00:25:44.340 --> 00:25:48.380
Suppose we just take
the single file case.

00:25:48.390 --> 00:25:49.400
Let's just go back to that.

00:25:49.600 --> 00:25:51.520
So we're still back to the one file.

00:25:51.830 --> 00:25:55.080
Even if we have dual CPUs,
if we only touch one file,

00:25:55.080 --> 00:25:56.790
there's no point in having two CPUs.

00:25:56.800 --> 00:25:57.980
We can't really parallelize.

00:25:58.100 --> 00:25:59.520
We can just do that one.

00:25:59.630 --> 00:26:03.130
So one key observation is that editing
is not very processor intensive.

00:26:03.340 --> 00:26:07.860
So we can actually make that a
shorter box to indicate that.

00:26:07.900 --> 00:26:10.440
And then what we see is we
can actually slide the compile

00:26:10.870 --> 00:26:15.200
step in underneath the editing,
meaning, especially in a dual CPU,

00:26:15.200 --> 00:26:17.730
if you have two,
you can be editing with one and

00:26:17.730 --> 00:26:19.060
compiling with the other one.

00:26:19.100 --> 00:26:23.200
So what Xcode actually does is to
send down the first part of the file

00:26:23.280 --> 00:26:26.700
and then wait until you hit Save,
and then it sends the rest of it.

00:26:26.840 --> 00:26:29.220
So that shortens the compile time.

00:26:29.270 --> 00:26:33.180
And then the last thing is,
as I mentioned, fix and continue.

00:26:33.180 --> 00:26:37.620
We can get rid of restarting
your app entirely in most cases.

00:26:37.660 --> 00:26:41.430
So you can just keep on patching the
code in your app until you find that

00:26:41.510 --> 00:26:45.160
you need to change a structure or do
anything more significant like that.

00:26:45.190 --> 00:26:49.710
So that's a fairly short compile time
compared to what we started out with.

00:26:50.480 --> 00:26:51.330
So precompiled headers.

00:26:51.440 --> 00:26:54.620
So that's a nice graphic,
but how do we actually do this?

00:26:54.750 --> 00:26:57.880
Well,
what you do is we use the observation

00:26:58.110 --> 00:27:01.390
that most of the code is in the headers.

00:27:01.390 --> 00:27:04.080
The compiler sees the same
code over and over again,

00:27:04.080 --> 00:27:06.020
unless we're using precompiled headers.

00:27:06.020 --> 00:27:10.330
One example, I just found a small one,
a little C++ file under

00:27:10.430 --> 00:27:11.700
developer examples.

00:27:11.700 --> 00:27:15.930
And this is the ucarbon-event.cpp.

00:27:16.000 --> 00:27:18.360
And it's actually 54 lines long.

00:27:18.440 --> 00:27:20.380
And this is actually the
whole text of that file.

00:27:20.400 --> 00:27:22.220
So it's a very tiny C++ file, right?

00:27:22.220 --> 00:27:25.430
But one of the interesting things here,
and expensive ones,

00:27:25.430 --> 00:27:28.790
is we see that it says
import Carbon slash Carbon.h.

00:27:28.830 --> 00:27:30.830
So what does that end up doing?

00:27:31.020 --> 00:27:34.700
Well, it actually ends up dwarfing
the code that you typed,

00:27:34.700 --> 00:27:40.200
because this ends up being 90,944
lines that the compiler has to see.

00:27:40.200 --> 00:27:41.720
So this is actually not even the scale.

00:27:41.720 --> 00:27:43.620
The grade line there
would have disappeared.

00:27:43.620 --> 00:27:49.270
It's actually 0.06% of the code
that came from your project.

00:27:49.790 --> 00:27:52.790
And 99.94% came from the system headers.

00:27:52.820 --> 00:27:57.790
So the obvious thing to do is to create
a precompiled header for a Carbon.h.

00:27:59.740 --> 00:28:04.180
So, GCC 3.3 and 3.5 support
precompiled headers and they're

00:28:04.180 --> 00:28:06.270
pretty easy to set up in Xcode.

00:28:06.320 --> 00:28:10.240
What you do is you create a prefix header
that gets implicitly included in front

00:28:10.240 --> 00:28:12.220
of every source file in your target.

00:28:12.220 --> 00:28:14.740
It's at a per target level.

00:28:14.740 --> 00:28:19.860
And then, you just check the checkbox
that says precompile this thing.

00:28:19.860 --> 00:28:24.410
Xcode automatically figures out which
different versions of it it needs to do.

00:28:24.410 --> 00:28:26.710
For example,
if you pass different preprocessor

00:28:26.760 --> 00:28:33.140
macros in different headers,
it actually builds it correctly for you.

00:28:33.140 --> 00:28:35.410
Keep in mind, though,
the prefix header gets included for

00:28:35.410 --> 00:28:37.610
every source file in the target,
so it has to be compatible

00:28:37.900 --> 00:28:39.220
with every source file.

00:28:39.220 --> 00:28:42.360
If you have C++ and Objective C++,
then you need to use

00:28:42.470 --> 00:28:43.940
#ifdef appropriately.

00:28:43.940 --> 00:28:47.480
There's a really nice help page on
that in the Xcode documentation.

00:28:47.480 --> 00:28:48.420
You search for PCH.

00:28:48.460 --> 00:28:53.470
The other thing to keep in mind is even
if you have a correct prefix header,

00:28:53.470 --> 00:28:58.100
it can get precompiled too many times
if you put change in headers in it.

00:28:58.220 --> 00:29:01.900
So the trick here is to
put all the stable code,

00:29:01.920 --> 00:29:04.780
typically the system code,
which hardly ever changes except

00:29:04.910 --> 00:29:08.960
when you update the software,
you put that in the precompiled header,

00:29:08.960 --> 00:29:12.990
and then you leave all your user
code to be compiled every time.

00:29:14.820 --> 00:29:17.360
And the other thing I mentioned
is Xcode does precompile

00:29:17.360 --> 00:29:20.560
the prefix header on demand,
which means that if you change

00:29:20.560 --> 00:29:23.680
the input conditions so that
the precomp is no longer valid,

00:29:23.680 --> 00:29:25.450
Xcode will rebuild it for you.

00:29:26.690 --> 00:29:28.830
So that's a little bit
about pre-compelled headers.

00:29:28.970 --> 00:29:34.480
Just shortly about distributed builds,
there's some questions we get about that.

00:29:34.490 --> 00:29:36.830
Xcode automatically uses all CPUs, right?

00:29:36.900 --> 00:29:39.160
But why limit yourself
to your own machine?

00:29:39.190 --> 00:29:40.420
There's lots of CPUs.

00:29:40.490 --> 00:29:43.980
We only ship dual CPUs,
but you could have a 14 CPU machine

00:29:43.980 --> 00:29:48.560
if you use all the other machines
in the offices next to you.

00:29:48.590 --> 00:29:50.560
The way to do this,
the way to enable this,

00:29:50.560 --> 00:29:52.030
is to go to the Xcode preferences.

00:29:52.040 --> 00:29:53.770
And there are two
things you can set here.

00:29:53.780 --> 00:29:57.740
You can set whether your machine
should use other machines to

00:29:57.740 --> 00:29:59.840
precompile-- to distribute to.

00:29:59.870 --> 00:30:02.540
And you can set up at the bottom
there whether your own machine

00:30:02.550 --> 00:30:05.570
should be a distributed build server.

00:30:06.870 --> 00:30:08.200
Some things to keep in mind.

00:30:08.270 --> 00:30:10.180
It's only available on the 3.3 and 3.5.

00:30:10.180 --> 00:30:15.060
That's not so big of an issue
for most of you who are on 3.3.

00:30:15.060 --> 00:30:20.240
Obviously, the faster your network and
the faster your machines are,

00:30:20.240 --> 00:30:23.270
the more benefit you're going to have.

00:30:23.270 --> 00:30:27.010
And it really does require
100BaseT network to be effective,

00:30:27.010 --> 00:30:30.300
because with machines,
even the PowerBooks being so fast,

00:30:30.300 --> 00:30:34.030
anything slower than that,
it's often faster just to compile locally

00:30:34.120 --> 00:30:36.160
than to send it out and get it back.

00:30:36.700 --> 00:30:37.730
Okay.

00:30:38.560 --> 00:30:41.960
The ideal number of machines
we've found is between 4 and 10.

00:30:41.960 --> 00:30:43.320
That's a very fuzzy number.

00:30:43.320 --> 00:30:44.720
It just really depends on your project.

00:30:44.740 --> 00:30:48.280
But it's probably not the case
that adding 200 XSERVs is going

00:30:48.340 --> 00:30:52.180
to make it 200 times faster than
not having distributed builds.

00:30:52.210 --> 00:30:55.130
So there is definitely a
fall-off at some point.

00:30:56.840 --> 00:30:58.270
Keep in mind the security
of your source code.

00:30:58.280 --> 00:31:01.670
This is a concern for some of
you and not at all for others.

00:31:01.670 --> 00:31:02.940
There are two modes.

00:31:02.990 --> 00:31:03.980
One is rendezvous.

00:31:03.980 --> 00:31:07.660
This means go out and find any
server who's willing to compile my

00:31:07.710 --> 00:31:09.080
code and let it compile my code.

00:31:09.080 --> 00:31:11.620
But that means that you're sending
your source code to that machine.

00:31:11.620 --> 00:31:14.750
So you need to make sure that that's
something that you want to do.

00:31:16.150 --> 00:31:18.720
The other option is to
specify a list of servers.

00:31:18.720 --> 00:31:21.710
You could do that in the panel that
I showed you in the previous slide.

00:31:21.710 --> 00:31:24.040
You can actually just specify a list.

00:31:24.070 --> 00:31:27.440
And if you enable rendezvous,
it will actually show you the list

00:31:27.500 --> 00:31:29.660
of the servers that are within range.

00:31:29.660 --> 00:31:33.590
And you can check off which ones you
want and limit the list that way to,

00:31:33.590 --> 00:31:36.900
let's say, a set of secure machines
in a lab somewhere.

00:31:40.200 --> 00:31:43.980
So we talk about precompiled
headers and distributed builds,

00:31:43.980 --> 00:31:44.660
zero link.

00:31:44.840 --> 00:31:45.750
This is fairly automatic.

00:31:45.850 --> 00:31:49.380
There isn't much to talk about here,
except to observe the link time is a

00:31:49.380 --> 00:31:51.480
significant part of the turnaround time.

00:31:51.480 --> 00:31:54.160
And typically, you're editing only a
couple of source files.

00:31:54.190 --> 00:31:58.680
So the interesting thing here and where
you need to be aware is that it runs

00:31:58.680 --> 00:32:02.420
the code directly from the object files.

00:32:02.420 --> 00:32:05.360
It does only work for applications
and command line tools right

00:32:05.360 --> 00:32:07.160
now for technical reasons.

00:32:07.160 --> 00:32:09.980
The big thing to be
aware of is keep in mind,

00:32:09.980 --> 00:32:12.710
it runs from the object code.

00:32:13.010 --> 00:32:17.260
So therefore, you don't want to do this
when you deploy your app.

00:32:17.260 --> 00:32:21.070
The deployment build style is set up to
not use zero link by default so that you

00:32:21.070 --> 00:32:23.120
actually get a real app that gets linked.

00:32:23.120 --> 00:32:25.970
Don't ship zero link builds,
because it's going to try to access the

00:32:25.970 --> 00:32:28.100
.o files back on your build machine.

00:32:28.100 --> 00:32:30.910
If you get this-- I don't know if
you can see this-- but basically,

00:32:30.960 --> 00:32:35.230
it says zero link could not load .o file,
and then it gives a path of the .o file.

00:32:35.430 --> 00:32:40.460
That indicates that-- you took the
binary stub that was built for zero

00:32:40.460 --> 00:32:44.310
link and took it to another machine,
and the binary stub is about 10k big,

00:32:44.310 --> 00:32:48.400
and all the .o files are still
back in your old machine.

00:32:48.400 --> 00:32:50.940
That's a symptom of that.

00:32:52.490 --> 00:32:53.930
And the fix, of course,
is turn off Zerolink

00:32:53.970 --> 00:32:55.830
for deployment builds.

00:32:55.990 --> 00:32:58.120
Predictive compilation,
I just want to mention a little bit.

00:32:58.180 --> 00:33:00.750
This is off by default,
so here's something that you can

00:33:00.840 --> 00:33:03.480
do to increase your productivity.

00:33:03.540 --> 00:33:05.540
Normally,
even if the PCH doesn't get used,

00:33:05.640 --> 00:33:07.410
nothing happens until you have build.

00:33:07.530 --> 00:33:13.460
So here's the idea again that we can get
a head start by using those idle cycles

00:33:13.460 --> 00:33:16.150
while you're editing and start compiling.

00:33:16.160 --> 00:33:17.900
We send the first couple
of pound includes,

00:33:17.940 --> 00:33:21.750
which typically include heavyweights
like Carbon.h or Cocoa.h,

00:33:21.750 --> 00:33:24.990
and get the compiler really
chewing on that stuff first.

00:33:25.200 --> 00:33:28.020
And then while you're
still typing your code,

00:33:28.130 --> 00:33:29.820
the compiler is just sitting idle.

00:33:29.850 --> 00:33:32.780
And then when you save,
we send the rest of the data.

00:33:32.830 --> 00:33:36.460
And then when you have build,
oftentimes the compilation is

00:33:36.460 --> 00:33:41.960
already done and the .o file is
just sitting there ready to be used.

00:33:42.060 --> 00:33:46.100
So it effectively essentially eliminates
the compile step for single editing.

00:33:46.100 --> 00:33:53.280
Even if you're editing multiple
files before hitting run again,

00:33:53.280 --> 00:33:56.220
if you edit them in sequence,
it actually can eliminate

00:33:56.220 --> 00:33:56.220
the compile step entirely.

00:33:56.830 --> 00:34:02.940
The way to turn this on,
there's a checkbox in the pref panel.

00:34:03.010 --> 00:34:04.100
So that's all you have to do for that.

00:34:04.100 --> 00:34:05.640
It's automatic after that.

00:34:05.670 --> 00:34:08.090
I'm going to show a little bit of that.

00:34:12.380 --> 00:34:18.850
Okay, what I wanted to show first here
is if we inspect the target again,

00:34:19.030 --> 00:34:22.300
see that I have--let me see here
if I can find the prefix header.

00:34:22.300 --> 00:34:24.060
There we go.

00:34:24.440 --> 00:34:27.990
So I've set here SKT prefix.

00:34:27.990 --> 00:34:32.180
This is the project-related path
actually to a file in a project.

00:34:32.180 --> 00:34:34.160
So let's take a look at that.

00:34:34.160 --> 00:34:35.500
I just type prefix.

00:34:35.690 --> 00:34:38.490
You can use the handy
detail view to get to it.

00:34:38.500 --> 00:34:43.120
All this one does is include Cocoa.h.

00:34:43.120 --> 00:34:45.090
If you had C++ in here,
this would still work

00:34:45.300 --> 00:34:46.270
because of the guard macro.

00:34:46.370 --> 00:34:47.800
That's what I was talking about before.

00:34:50.350 --> 00:34:53.770
The Precompile Prefix Header
checkbox is obviously the one

00:34:53.770 --> 00:34:55.720
that causes it to be precompiled.

00:34:55.720 --> 00:34:58.140
You could have a Prefix Header even
if you didn't want to precompile it.

00:34:58.220 --> 00:35:00.770
That's typically not very interesting.

00:35:00.780 --> 00:35:06.750
ZeroLink does show up in the
target inspector because,

00:35:07.110 --> 00:35:10.730
after all,
it inspects all of the settings.

00:35:10.760 --> 00:35:14.820
So if I choose zero here,
I see that ZeroLink actually is

00:35:14.820 --> 00:35:17.420
overridden at the target level.

00:35:17.900 --> 00:35:19.380
And the reason for that is
the difference between the

00:35:19.380 --> 00:35:20.590
deployment and development builds.

00:35:20.620 --> 00:35:23.640
So I go to the project and inspect here.

00:35:23.640 --> 00:35:27.900
If I go to the styles,
let me narrow down again on ZeroLink.

00:35:27.940 --> 00:35:31.820
I'll see that in the development style,
ZeroLink is checked.

00:35:31.920 --> 00:35:33.940
In the deployment style, it's unchecked.

00:35:33.940 --> 00:35:37.200
So that's really how
you want to do things.

00:35:39.160 --> 00:35:47.290
Another thing I wanted to show here
is the distributed builds again.

00:35:47.420 --> 00:35:50.400
Normally under Building,
there's some options

00:35:50.520 --> 00:35:51.360
for the local machine.

00:35:51.360 --> 00:35:54.160
Distributed Builds is the
prep pane that's dedicated

00:35:54.160 --> 00:35:55.910
to the distributed builds.

00:35:55.910 --> 00:36:01.430
I don't have set up for distributed
builds because of the demo machines here.

00:36:01.430 --> 00:36:05.160
But it's pretty obvious
what the settings do,

00:36:05.160 --> 00:36:07.290
but I wanted to show that
this is the panel actually

00:36:07.290 --> 00:36:08.720
where you get access to that.

00:36:08.720 --> 00:36:11.430
Because sometimes we get questions of,
well, how do I set this up?

00:36:11.430 --> 00:36:12.180
Where do I even look?

00:36:12.510 --> 00:36:15.320
Under Building,
there are some interesting options.

00:36:15.320 --> 00:36:19.210
One thing that Xcode supports,
which is actually kind of nice,

00:36:19.210 --> 00:36:21.440
is to build to a shared location.

00:36:21.470 --> 00:36:23.580
This is particularly nice if
you have multiple projects.

00:36:23.620 --> 00:36:25.850
Even if they're unrelated,
you can get all the products to

00:36:26.010 --> 00:36:27.940
go into a particular location.

00:36:28.010 --> 00:36:29.990
It's also good if you're working
with source code off the network

00:36:30.060 --> 00:36:33.170
and you want to make sure that your
binaries really are on the local disk.

00:36:33.170 --> 00:36:38.080
That's a really good
idea for performance.

00:36:38.480 --> 00:36:45.880
The predictive compilation is off by
default and disabled by battery power,

00:36:45.880 --> 00:36:48.810
but it's really a good
thing to be turning on.

00:36:48.820 --> 00:36:50.190
We'll be turning that on as a default.

00:36:52.250 --> 00:36:55.780
And another useful one is if you
want explicit control over how many

00:36:55.880 --> 00:36:59.740
processes to run on your machine,
we'll limit it to three because we've

00:36:59.740 --> 00:37:04.610
really seen that it can hurt the
performance or the responsiveness of your

00:37:04.610 --> 00:37:10.360
machine if we launch too many compiles
at once on the same portal of PowerBook.

00:37:10.530 --> 00:37:11.880
So that's a little bit about that.

00:37:11.880 --> 00:37:15.810
One other thing I wanted to show,
actually, is

00:37:17.040 --> 00:37:19.740
I showed how you can set
settings at a target level.

00:37:19.870 --> 00:37:22.930
You can actually set settings at
a particular source file level,

00:37:22.930 --> 00:37:23.190
too.

00:37:23.190 --> 00:37:25.130
You can either navigate
down in the groups here.

00:37:25.360 --> 00:37:27.960
You can expand the sources phase,
which are all the source

00:37:27.960 --> 00:37:29.380
code files for that target.

00:37:29.420 --> 00:37:31.270
Or you can just see them here.

00:37:31.270 --> 00:37:34.240
In fact, if you select sources,
you see them all listed.

00:37:34.290 --> 00:37:36.300
They'll have check marks because
I haven't built the project yet.

00:37:36.350 --> 00:37:39.560
This means that it needs to build.

00:37:39.560 --> 00:37:43.400
One of the things you can do is you
can actually select here and you

00:37:43.460 --> 00:37:45.920
can add additional compiler flags.

00:37:45.960 --> 00:37:49.700
And if you add compiler flags
to a particular source file,

00:37:49.700 --> 00:37:53.050
Xcode will take care of generating
another version of the precompiled

00:37:53.050 --> 00:37:54.260
header for that if it needs to.

00:37:54.290 --> 00:37:56.670
So you don't have to worry about that.

00:37:56.940 --> 00:37:59.240
Okay, so just a little bit about
those kinds of things.

00:37:59.240 --> 00:38:00.750
Can we have the slides back?

00:38:00.750 --> 00:38:02.950
Please?

00:38:02.960 --> 00:38:05.960
Thanks.

00:38:08.380 --> 00:38:10.680
So we talked about optimizing
build performance a little bit.

00:38:10.680 --> 00:38:12.990
I just wanted to show you where to
go to set some of these settings

00:38:13.130 --> 00:38:16.380
because of the questions we get
on the mailing list indicates

00:38:16.380 --> 00:38:18.670
sometimes people don't know that.

00:38:18.690 --> 00:38:20.170
Let's talk about a
really interesting topic,

00:38:20.260 --> 00:38:22.040
though,
is automating some of the common tasks.

00:38:22.080 --> 00:38:25.130
We talked about how to make
the things you already do,

00:38:25.130 --> 00:38:28.650
how to do those things in Xcode, faster.

00:38:28.670 --> 00:38:31.450
But automating common tasks gets
into territory where you may be

00:38:31.450 --> 00:38:35.540
doing something totally by hand
that you could actually automate.

00:38:35.540 --> 00:38:37.630
So what are some of the
ways we can do this?

00:38:37.640 --> 00:38:38.980
We can automate the builds.

00:38:39.120 --> 00:38:40.400
That's one of the most obvious things.

00:38:40.420 --> 00:38:42.640
And there are a couple
of ways to do this.

00:38:42.640 --> 00:38:45.800
One is to use the command line tool.

00:38:46.080 --> 00:38:47.920
We have a command line
tool called Xcode Build.

00:38:47.920 --> 00:38:50.760
I'll describe in detail.

00:38:50.790 --> 00:38:51.960
You can use AppleScript.

00:38:51.960 --> 00:38:53.300
Xcode is scriptable.

00:38:53.300 --> 00:38:56.120
So for those of you who
know and love AppleScript,

00:38:56.120 --> 00:38:57.090
you can use that.

00:38:57.430 --> 00:39:05.830
And actually,
there is an automator stage,

00:39:05.830 --> 00:39:05.830
an action that you can
use to build a project.

00:39:07.300 --> 00:39:10.700
Another way you can automate
your workflow in Xcode,

00:39:10.700 --> 00:39:13.680
the build workflow,
is to set up custom build rules.

00:39:13.680 --> 00:39:14.800
I mentioned that.

00:39:14.800 --> 00:39:16.200
I'll talk about some more examples.

00:39:16.200 --> 00:39:20.400
Some custom build phases have
really interesting uses that

00:39:20.400 --> 00:39:24.470
I haven't thought of all of them,
and I'm sure you can think of

00:39:24.470 --> 00:39:26.440
many good ways to use them.

00:39:26.440 --> 00:39:27.820
Same with external targets.

00:39:27.880 --> 00:39:32.380
These are really kind of opening a
porthole into the machinery so that

00:39:32.380 --> 00:39:37.170
you can actually hook in anything
that you like into the build phase.

00:39:37.200 --> 00:39:39.600
Into the build sequence.

00:39:39.600 --> 00:39:43.700
Custom executables is another
topic I want to talk about.

00:39:43.700 --> 00:39:46.140
This is sometimes underused,
but can be extremely powerful,

00:39:46.200 --> 00:39:48.540
especially if you're working
on libraries and plugins.

00:39:48.540 --> 00:39:51.360
We start with building
from the command line.

00:39:51.360 --> 00:39:55.220
The tool is called Xcode Build,
and it's in your default path.

00:39:55.300 --> 00:39:58.100
So if you're running from terminal,
you just type Xcode Build.

00:39:58.100 --> 00:40:02.110
It provides access to the exact
same build system as the IDE uses,

00:40:02.110 --> 00:40:06.150
so there's no sort of compatibility
mode or any of that stuff.

00:40:06.200 --> 00:40:07.170
It's actually the same
share of the build.

00:40:07.200 --> 00:40:09.370
It's a library that's opening
your project and building it.

00:40:09.400 --> 00:40:13.600
You can invoke it from the shell scripts,
for example,

00:40:13.600 --> 00:40:15.620
or directly from the command line.

00:40:15.620 --> 00:40:17.830
Good for nightly builds,
that kind of stuff.

00:40:17.900 --> 00:40:22.460
The basic invocation is just Xcode Build,
and that will just bring

00:40:22.640 --> 00:40:25.620
your project up to date,
whatever project you have changed

00:40:25.630 --> 00:40:27.360
the working directory into.

00:40:27.360 --> 00:40:28.810
But it has several options.

00:40:28.820 --> 00:40:31.350
One of those is you can
say what action you want.

00:40:31.370 --> 00:40:32.160
I mean, that's pretty obvious.

00:40:32.180 --> 00:40:33.140
You can remove your binaries.

00:40:33.140 --> 00:40:34.850
You can bring your project up to date.

00:40:34.860 --> 00:40:36.980
You can actually specify.

00:40:37.200 --> 00:40:39.230
You can specify which
target you want to build.

00:40:39.240 --> 00:40:43.040
And this is obviously useful
if you have many targets.

00:40:43.080 --> 00:40:46.600
I showed the target pop-up where you
can choose which target to build.

00:40:46.600 --> 00:40:50.940
This option, the dash target option,
is actually the same

00:40:50.940 --> 00:40:52.700
thing as that pop-up.

00:40:52.810 --> 00:40:53.540
That's what you're controlling.

00:40:53.540 --> 00:40:55.650
Same with the build style.

00:40:55.660 --> 00:40:58.920
You choose a build style
development or deployment.

00:40:58.920 --> 00:41:00.650
Typically,
if you're building from the command line,

00:41:00.650 --> 00:41:03.130
you've been building for deployment,
and you'll want to put the

00:41:03.130 --> 00:41:06.050
results in an installer package,
something like that.

00:41:07.290 --> 00:41:12.600
This is the same or controls the
same setting as the pop-up for

00:41:12.600 --> 00:41:15.320
the build style in the Xcode IDE.

00:41:15.320 --> 00:41:18.950
And under the hood, it actually controls
literally the same setting.

00:41:18.960 --> 00:41:22.370
So there's a high degree
of fidelity there.

00:41:23.850 --> 00:41:25.480
You can also override build settings.

00:41:25.510 --> 00:41:27.390
If you remember,
the gray box at the very top of the

00:41:27.500 --> 00:41:29.200
precedence was command line options.

00:41:29.270 --> 00:41:30.120
That's what these are.

00:41:30.210 --> 00:41:32.460
So if you pass any of
the command line options,

00:41:32.460 --> 00:41:35.340
either the ones that you've
defined or that are built in,

00:41:35.340 --> 00:41:37.820
you can just override
that on the command line.

00:41:37.990 --> 00:41:44.240
This is kind of a GNU Make style
use of the Xcode IDE,

00:41:44.240 --> 00:41:48.370
but it's nice to have a command line
tool like this for the automated stuff.

00:41:48.780 --> 00:41:50.460
So if you don't want to
use the command line,

00:41:50.460 --> 00:41:52.480
you can also use AppleScript.

00:41:52.540 --> 00:41:53.760
Xcode is scriptable.

00:41:53.770 --> 00:41:58.120
If you go to the script editor
and you say Open Dictionary,

00:41:58.320 --> 00:42:02.890
Xcode shows up in there and you can see
all the classes and commands we have.

00:42:03.080 --> 00:42:06.560
Not all facilities are available
from AppleScript at this time,

00:42:06.560 --> 00:42:10.580
but we're working on completing
that and rounding it out.

00:42:10.580 --> 00:42:13.090
Project operations are,
you can set build settings,

00:42:13.090 --> 00:42:15.340
you can add files, that kind of stuff.

00:42:15.340 --> 00:42:18.260
Here, for example,
is just a little line of AppleScript that

00:42:18.370 --> 00:42:22.520
just builds a particular target with
the current set of build settings.

00:42:22.520 --> 00:42:25.950
So this is another way that you could
automate your build process for actually

00:42:26.160 --> 00:42:31.090
going from source code to final disk
image that you ship to customers.

00:42:31.090 --> 00:42:31.160
So either or.

00:42:33.710 --> 00:42:37.390
Custom build rules are a way of
automating inside of the project,

00:42:37.520 --> 00:42:40.300
as I mentioned, inside of each target.

00:42:40.300 --> 00:42:41.940
I'm repeating some of the
same information here,

00:42:42.000 --> 00:42:46.550
but I want to sort of try to
give a couple of opportunities

00:42:46.550 --> 00:42:48.000
to help you remember it.

00:42:48.480 --> 00:42:53.420
The essence is that a rule
controls how the target produces

00:42:53.420 --> 00:42:55.170
and processes a source file.

00:42:55.170 --> 00:42:58.150
So an action, it's any script you
can run from terminal.

00:42:58.150 --> 00:43:01.050
You can even use Apple Scripts,
you can use Perl, Ruby,

00:43:01.050 --> 00:43:02.300
that kind of stuff.

00:43:03.180 --> 00:43:05.090
Obviously, a normal shell, Python.

00:43:05.090 --> 00:43:09.510
As I mentioned earlier,
the build rules can declare

00:43:09.720 --> 00:43:12.250
the path that gets produced,
the output files.

00:43:12.250 --> 00:43:15.300
So this gets related to
the input files by Xcode.

00:43:15.300 --> 00:43:19.490
And so your rule only gets run if
the input is newer than the output,

00:43:19.490 --> 00:43:21.690
or if the output doesn't exist.

00:43:23.790 --> 00:43:27.660
And the produced files are fed
right back into the rules system.

00:43:27.660 --> 00:43:32.120
So if you produce C files,
then they get fed back in and

00:43:32.120 --> 00:43:35.410
the rule for C files gets applied
and the C compiler is invoked.

00:43:35.500 --> 00:43:36.790
So that's fairly handy.

00:43:36.800 --> 00:43:41.230
For example,
custom script to generate C files

00:43:41.320 --> 00:43:42.810
from whatever data files you have.

00:43:42.820 --> 00:43:47.190
In fact,
the tool that you use to generate

00:43:47.420 --> 00:43:51.460
those C files could actually be built
by another target in your project.

00:43:51.660 --> 00:43:54.960
We've seen that in some of the
internal projects at Apple,

00:43:54.960 --> 00:43:55.580
actually.

00:43:58.820 --> 00:44:03.280
Other example uses, preprocessing,
generating code.

00:44:03.280 --> 00:44:06.790
You can invoke compilers that are
not directly supported in Xcode.

00:44:06.800 --> 00:44:09.780
We have a list of some of the
compilers that are supported.

00:44:09.780 --> 00:44:13.610
GCC is the only C compiler
with built-in support.

00:44:13.620 --> 00:44:17.130
There are other C compilers
and Fortran compilers,

00:44:17.150 --> 00:44:19.440
and you can use a rule for those.

00:44:22.200 --> 00:44:25.660
Custom build phases are a
little bit different from rules.

00:44:25.840 --> 00:44:28.360
The rules are condition,
action kind of a thing.

00:44:28.360 --> 00:44:32.180
Build phases are just steps in the
sequence to build your product,

00:44:32.270 --> 00:44:34.760
and so you can add them to any
point in your native target.

00:44:34.760 --> 00:44:37.790
And the primary uses are things
like copying arbitrary files

00:44:38.230 --> 00:44:39.930
and running arbitrary scripts.

00:44:39.990 --> 00:44:41.750
You may have Unix man pages.

00:44:41.750 --> 00:44:46.100
You may have custom files that go in
custom places in your application.

00:44:46.100 --> 00:44:49.250
You can specify inputs and outputs,
and again,

00:44:49.250 --> 00:44:51.800
these phases get run only if needed.

00:44:52.100 --> 00:44:56.870
And the paths are fed directly
into the Xcode dependency graph.

00:44:57.050 --> 00:45:00.300
So some examples,
copying files and folders,

00:45:00.340 --> 00:45:01.720
that's a popular one.

00:45:01.720 --> 00:45:05.160
A lot of people have somewhat
complicated applications,

00:45:05.160 --> 00:45:08.880
and they want to embed frameworks
and that kind of stuff.

00:45:08.880 --> 00:45:10.700
You can set special permissions on files.

00:45:10.800 --> 00:45:14.290
If you have a little extension,
that kind of thing,

00:45:14.300 --> 00:45:16.660
that needs some special flags.

00:45:16.660 --> 00:45:20.030
You can also install files in
arbitrary file system locations.

00:45:20.030 --> 00:45:22.100
So that's what I mentioned
in the Unix man page.

00:45:22.100 --> 00:45:27.560
This is maybe for more of the sort
of typical Darwin development that

00:45:27.560 --> 00:45:32.690
has specific places in the file
system where files need to go.

00:45:32.690 --> 00:45:36.970
Typical Mac applications should
be able to be run from anywhere.

00:45:38.080 --> 00:45:39.240
External targets.

00:45:39.300 --> 00:45:40.540
I mentioned this early on.

00:45:40.540 --> 00:45:46.720
This is a way to call any kind of
external build system you have.

00:45:46.770 --> 00:45:49.570
So you can specify the
action to invoke for build,

00:45:49.570 --> 00:45:50.300
for clean.

00:45:50.300 --> 00:45:53.220
All these things are
passed in the environment.

00:45:53.220 --> 00:45:55.980
So you can actually set your
own options at the target level,

00:45:55.990 --> 00:45:58.500
and they get passed down
through the environment.

00:45:58.500 --> 00:46:01.680
And if you have a Perl script, let's say,
or a Shell script,

00:46:01.680 --> 00:46:05.750
you can pick up those settings and
modify the behavior of it based on that.

00:46:05.800 --> 00:46:10.740
So there's lots of opportunities for
weaving your own custom scripts into the

00:46:10.740 --> 00:46:18.720
Xcode build process here to really get to
a source to disk image kind of workflow.

00:46:18.720 --> 00:46:20.560
You can customize the command line,
as I mentioned.

00:46:20.560 --> 00:46:22.770
You can pass any options you want.

00:46:22.840 --> 00:46:24.880
If you have your own script
that you're invoking to drive

00:46:24.880 --> 00:46:27.870
a part of the build system,
that's maybe not so interesting because

00:46:27.880 --> 00:46:29.640
you could just change the script.

00:46:29.670 --> 00:46:34.890
But suppose you're using Ant or Make,
you could do that.

00:46:35.210 --> 00:46:39.590
There are actually project templates
to invoke the Ant build system

00:46:39.590 --> 00:46:43.970
that are installed as part of the
Xcode install for Java development.

00:46:43.970 --> 00:46:47.250
So you can take a look at some
of those for examples of this,

00:46:47.250 --> 00:46:48.090
actually.

00:46:48.890 --> 00:46:50.700
Okay, so other examples.

00:46:50.700 --> 00:46:52.060
I think I talked about these.

00:46:52.060 --> 00:46:54.800
Some of them already make and, yeah,
I talked about this.

00:46:56.500 --> 00:46:59.800
PackageMaker is actually another
interesting use for this.

00:46:59.940 --> 00:47:03.960
We tend to think of external targets
to invoke external build systems,

00:47:03.960 --> 00:47:05.880
but any tool can be invoked.

00:47:06.050 --> 00:47:08.670
So if you want to use it to
create a package disk image,

00:47:08.890 --> 00:47:10.820
there are command line tools for that.

00:47:10.970 --> 00:47:15.100
Xcode does not yet have built-in target
types for building disk images and

00:47:15.100 --> 00:47:17.130
other kinds of deployment targets.

00:47:17.130 --> 00:47:19.590
That's definitely something on our list.

00:47:19.590 --> 00:47:22.140
But meanwhile,
you can actually wire it up

00:47:22.310 --> 00:47:24.430
yourself with not that much work.

00:47:25.440 --> 00:47:28.010
Web Server Deployment Tools is
another interesting one.

00:47:28.020 --> 00:47:31.470
You could FTP the result of
your build over to some server,

00:47:31.470 --> 00:47:34.600
et cetera.

00:47:35.260 --> 00:47:40.660
Custom executables are, I think,
underused, but a very useful tool.

00:47:40.660 --> 00:47:43.200
Every time you create
an executable target,

00:47:43.200 --> 00:47:45.100
such as an application
or a command line tool,

00:47:45.100 --> 00:47:47.490
Xcode automatically creates
an executable for you.

00:47:47.520 --> 00:47:49.080
And what's an executable?

00:47:49.080 --> 00:47:50.740
Well, it's just an execution context.

00:47:50.810 --> 00:47:53.930
So that names something to be run,
the directory from

00:47:54.060 --> 00:47:57.460
which it should be run,
any kind of arguments to be passed to it,

00:47:57.580 --> 00:47:59.400
if it has any on the command line.

00:47:59.400 --> 00:48:02.070
You can set these up
for anything you'd like.

00:48:02.180 --> 00:48:03.870
So if you're developing
a Photoshop plugin,

00:48:03.870 --> 00:48:07.280
you can actually set up an
executable to launch Photoshop and

00:48:07.280 --> 00:48:08.810
have it load your plugin.

00:48:08.820 --> 00:48:12.220
Launch parameters can be configured.

00:48:12.220 --> 00:48:14.440
And as I mentioned,
you can create as many

00:48:14.540 --> 00:48:16.720
of these as you want,
custom ones.

00:48:19.730 --> 00:48:21.140
Plugin development is one.

00:48:21.150 --> 00:48:22.100
Libraries, too.

00:48:22.100 --> 00:48:24.140
If you're working on a
framework or library,

00:48:24.160 --> 00:48:26.990
maybe you're,
most of you are probably shipping an

00:48:26.990 --> 00:48:28.600
app or working on something like that.

00:48:28.600 --> 00:48:30.640
But if you are working
on just a framework,

00:48:30.790 --> 00:48:34.170
what you probably have is you probably
have a dozen test apps or more.

00:48:34.380 --> 00:48:37.620
And so you could set up an executable
for each of your test applications,

00:48:37.630 --> 00:48:41.180
each one configured to run with
your built version of the library.

00:48:41.300 --> 00:48:43.000
And that's a great way
to test your library.

00:48:43.000 --> 00:48:44.980
As you make a change
to your framework code,

00:48:44.990 --> 00:48:46.320
you just hit build and run.

00:48:46.330 --> 00:48:49.420
It will run some other app
but load in your framework.

00:48:49.420 --> 00:48:51.980
and you can test your changes that way.

00:48:52.330 --> 00:48:54.730
And it's useful for quickly
switching between them.

00:48:54.770 --> 00:48:59.460
Just as there is a development,
like a build style and a target pop-up,

00:48:59.780 --> 00:49:02.670
there is an active executable pop-up,
which controls what gets run

00:49:02.730 --> 00:49:04.280
when you hit the Run button.

00:49:04.280 --> 00:49:06.380
So that's another thing you
can add to your toolbar.

00:49:08.110 --> 00:49:10.460
So I want to show a couple
of these things in action.

00:49:10.460 --> 00:49:13.100
This time I'm actually going to show,
not just show where things are,

00:49:13.100 --> 00:49:14.740
but actually build a couple of things.

00:49:14.830 --> 00:49:17.080
So can we have the demo machine, please?

00:49:19.310 --> 00:49:19.650
Thanks.

00:49:19.700 --> 00:49:26.810
So what I'm going to
do here is to-- first,

00:49:26.880 --> 00:49:29.120
let me just go ahead and build.

00:49:29.120 --> 00:49:33.920
The development build style
here is the active one.

00:49:33.920 --> 00:49:36.550
I can actually add-- I'm just
going to Control-click on here.

00:49:36.560 --> 00:49:40.820
Let me add the active executable
to show you that sketch.

00:49:40.820 --> 00:49:43.440
Not surprisingly,
executable is shown under here.

00:49:43.440 --> 00:49:45.470
And you can edit any
kind of settings there.

00:49:45.630 --> 00:49:49.980
What I wanted to do now, though, was to,
let's say, create an external target.

00:49:50.030 --> 00:49:53.830
Let me go ahead and-- what I'm going
to do is to go into the Project menu,

00:49:53.830 --> 00:49:58.390
just select Sketch here,
go and say New Target.

00:49:58.570 --> 00:50:00.740
And what I'm going to do is
create a shell script target.

00:50:00.950 --> 00:50:05.100
And let's say I want
to create a disk image.

00:50:05.160 --> 00:50:07.490
So that's what I'm going to choose.

00:50:07.520 --> 00:50:09.350
And I want to add it
to the Sketch project.

00:50:09.420 --> 00:50:11.160
So that's pretty simple.

00:50:11.450 --> 00:50:14.120
So now we have the info here.

00:50:14.120 --> 00:50:16.710
By default, this target,
it doesn't build any

00:50:16.740 --> 00:50:17.880
kind of product at all.

00:50:17.880 --> 00:50:23.040
All it has is a single phase
that runs a shell script.

00:50:23.090 --> 00:50:25.920
So I'm going to inspect the
shell script build phase.

00:50:25.970 --> 00:50:27.660
Shell script goes here.

00:50:27.740 --> 00:50:31.960
So I could type in a whole shell
script here if I wanted to.

00:50:31.960 --> 00:50:34.870
But what I'm actually going to do,
I have a ready-made one that

00:50:34.870 --> 00:50:36.400
I'll just add to the project.

00:50:36.400 --> 00:50:42.180
So I'm just going to drag that in,
drop it here under the Groups and Files.

00:50:42.240 --> 00:50:44.500
I want to copy this into the project,
actually.

00:50:44.670 --> 00:50:46.940
It lives on my desktop right now,
so I'll just copy it in.

00:50:47.100 --> 00:50:49.570
I'm not going to add it to any target,
because I don't actually want to

00:50:49.570 --> 00:50:52.500
install the script as part of any build.

00:50:52.500 --> 00:50:55.540
If I added it to the Sketch target,
it would get added as a resource

00:50:55.550 --> 00:50:57.020
in the Resources bucket.

00:50:57.020 --> 00:50:58.100
But I don't want to do that.

00:50:58.240 --> 00:51:00.610
So I'll just go ahead and click Add.

00:51:00.720 --> 00:51:03.100
So now I have my shell script here.

00:51:03.130 --> 00:51:06.180
I can-- let's see, take a look at that.

00:51:06.360 --> 00:51:10.190
And in this case-- it's a fairly-- eh,
not too complicated.

00:51:10.260 --> 00:51:12.930
It uses AppleScript, actually.

00:51:12.940 --> 00:51:17.080
Most of the complications use
AppleScript to configure a disk image.

00:51:17.080 --> 00:51:21.150
What it does is just create a disk image,
use AppleScript to set position of files

00:51:21.150 --> 00:51:23.880
and icons and color and stuff like that.

00:51:23.920 --> 00:51:26.690
It compresses the disk image,
and then it tells the

00:51:26.690 --> 00:51:27.960
finder to show it to us.

00:51:28.160 --> 00:51:31.790
So let's go ahead and
take a look at that.

00:51:32.130 --> 00:51:34.400
Now, I've added the file to my project.

00:51:34.430 --> 00:51:38.710
But what I also want to do is, of course,
to edit the shell script

00:51:38.710 --> 00:51:39.830
build phase itself.

00:51:39.900 --> 00:51:43.660
So I'm just going to type
in a shell command here to,

00:51:43.660 --> 00:51:45.990
in this case--

00:51:46.390 --> 00:51:49.490
just invoke the shell
script that's in my project.

00:51:49.500 --> 00:51:51.940
The shell script here gets started
up from the project folder.

00:51:51.940 --> 00:51:56.690
So that's a fairly
succinct way of doing that.

00:51:56.700 --> 00:51:58.680
If you notice at the bottom,
there's the input files

00:51:58.760 --> 00:51:59.480
and the output files.

00:51:59.480 --> 00:52:04.360
This is how I mentioned that Xcode weaves
in the shell script into its dependency

00:52:04.370 --> 00:52:06.060
graph so that it knows when to run it.

00:52:06.150 --> 00:52:08.360
So what I'm going to do here is
I'm actually going to add-- I'm

00:52:08.370 --> 00:52:12.860
going to use some of the build
settings that are defined by default.

00:52:12.890 --> 00:52:17.110
I'm going to say that in my
build products directory,

00:52:17.110 --> 00:52:23.030
there's going to be a
application called sketch.app.

00:52:23.480 --> 00:52:25.750
could drag this into.

00:52:26.190 --> 00:52:29.100
These build settings,
how do I know about build product store?

00:52:29.260 --> 00:52:32.980
Well, we have a menu item for bringing
up the HTML page for this.

00:52:32.980 --> 00:52:35.490
We have a bunch of
built-in build settings.

00:52:35.610 --> 00:52:38.010
Normally,
if you're just building an app in Xcode,

00:52:38.010 --> 00:52:42.480
if you're not doing anything particular
like automating the workflow here,

00:52:42.480 --> 00:52:45.160
you don't really need
to know about these.

00:52:45.360 --> 00:52:47.880
But they're very useful if you
do want to do anything more,

00:52:47.880 --> 00:52:50.360
a little bit more complicated like this.

00:52:50.360 --> 00:52:52.460
Another thing I'm going to do is
I'm going to make the shell script

00:52:52.610 --> 00:52:58.540
here depend on the shell script
file that I am actually including.

00:52:58.880 --> 00:53:02.520
And what this is going to do is it's
going to mean that my shell script

00:53:02.660 --> 00:53:07.320
gets run if the product is out of date
and also going to get run if I modify

00:53:07.420 --> 00:53:09.280
the script that builds the disk image.

00:53:09.340 --> 00:53:10.500
So that's kind of nice.

00:53:10.520 --> 00:53:11.590
And what does it produce?

00:53:11.710 --> 00:53:13.160
We need to know what to compare against.

00:53:13.160 --> 00:53:17.050
So what this script produces
is it puts in target builder.

00:53:17.060 --> 00:53:21.420
That's another one of the
standard defined settings.

00:53:21.420 --> 00:53:22.920
It's going to create a sketch disk image.

00:53:22.920 --> 00:53:26.670
So now we have this all set up.

00:53:27.120 --> 00:53:29.230
And let's see what happens when we build.

00:53:29.410 --> 00:53:31.920
One of the things that I do
is to make sure I pick the

00:53:31.980 --> 00:53:36.720
deployment target so I don't try
to ship the zero link binaries.

00:53:36.760 --> 00:53:39.420
And I'm just going to select
the create disk image target.

00:53:39.480 --> 00:53:41.400
There's one more thing I forgot to do.

00:53:41.400 --> 00:53:42.690
Does anybody know?

00:53:44.710 --> 00:53:47.610
Yeah, so right now we have
two independent targets.

00:53:47.870 --> 00:53:52.380
You can actually have two totally
separate dependency trees,

00:53:52.450 --> 00:53:54.830
or two or more if you want, in Xcode.

00:53:54.920 --> 00:53:56.920
But to relate these two
targets to each other,

00:53:56.920 --> 00:53:59.820
what I want to do is I want to
bring up the inspector again.

00:53:59.910 --> 00:54:04.420
And I want to add a dependency
from the createDiskImage

00:54:04.500 --> 00:54:06.060
target to the Sketch target.

00:54:06.180 --> 00:54:08.220
So this means that Sketch will
get updated before I even

00:54:08.230 --> 00:54:10.180
try to build the disk image.

00:54:10.310 --> 00:54:13.280
So let me get rid of a couple
of the inspectors here.

00:54:13.370 --> 00:54:16.680
And let's just go ahead and build this.

00:54:16.730 --> 00:54:19.230
So it's going to go ahead and
build Sketch as it normally does.

00:54:19.310 --> 00:54:22.420
And actually,
what I'm going to do is-- it's linking.

00:54:22.420 --> 00:54:24.460
It's not zero linking,
so that's a good sign.

00:54:24.540 --> 00:54:25.630
So it's running the custom script.

00:54:25.750 --> 00:54:29.000
So it's actually creating the disk
image and mounting it and setting the

00:54:29.000 --> 00:54:30.740
background color and all that good stuff.

00:54:30.830 --> 00:54:33.720
So now we actually end up with
a compressed disk image that

00:54:33.720 --> 00:54:37.270
contains my built version of Sketch.

00:54:37.400 --> 00:54:41.360
And I can ship this to my customers.

00:54:41.480 --> 00:54:46.800
And moreover-- Thank you.

00:54:49.180 --> 00:54:53.540
Moreover,
if I go into Xcode again and I hit Build,

00:54:53.600 --> 00:54:54.920
see it just says Build Succeeded.

00:54:54.920 --> 00:54:57.980
We can look at that in more detail if
we bring up the Show Detailed Results.

00:54:57.980 --> 00:55:00.050
I'm just going to hide the
editor here because I don't

00:55:00.050 --> 00:55:01.300
really need that right now.

00:55:01.370 --> 00:55:02.570
Nothing happened here.

00:55:02.770 --> 00:55:05.400
Well, that's because Xcode knows
that I haven't updated Sketch,

00:55:05.400 --> 00:55:08.350
I have not updated the script,
and so I don't need to do anything.

00:55:08.350 --> 00:55:11.720
If I go in here and I update the script,
one of the things I can do to

00:55:11.720 --> 00:55:14.910
update the script is to say,
okay, here are some of the input

00:55:14.910 --> 00:55:16.830
settings that my script takes.

00:55:16.990 --> 00:55:18.620
Well,
let me go ahead and copy one of these.

00:55:19.200 --> 00:55:23.100
I'm going to not define
it in the script itself,

00:55:23.100 --> 00:55:25.420
so I'm going to save this.

00:55:25.420 --> 00:55:28.310
What I'm actually going to do
is I'm going to set this in

00:55:28.310 --> 00:55:30.370
the Create Disk Image Target.

00:55:30.770 --> 00:55:33.880
So I go here and I add my own setting.

00:55:33.880 --> 00:55:39.880
And I'm just going to make this be,
let's say, zero.

00:55:39.930 --> 00:55:43.540
So now when I build-- and it
knows that I need to build because

00:55:43.540 --> 00:55:44.860
I modified one of the inputs.

00:55:45.040 --> 00:55:48.280
So now when I build,
it runs the custom shell script.

00:55:48.330 --> 00:55:49.900
And it's going off to finder again.

00:55:50.170 --> 00:55:51.820
And now we get a different color.

00:55:52.090 --> 00:55:53.840
And there again,
if I hit Build once more,

00:55:53.840 --> 00:55:54.770
nothing happens.

00:55:54.850 --> 00:55:58.530
So this is a nice way to make sure that
we only actually do work when we need to.

00:55:58.620 --> 00:56:01.540
So that's where the shell script
inputs and outputs come in.

00:56:03.290 --> 00:56:04.200
All right.

00:56:04.280 --> 00:56:05.340
So that's kind of interesting.

00:56:05.500 --> 00:56:08.840
But we can actually do something
even a little bit more interesting

00:56:09.000 --> 00:56:10.020
with shell script build phases.

00:56:10.040 --> 00:56:13.230
Let me actually add another shell
script build phase to the same target.

00:56:13.240 --> 00:56:16.350
You can either create a new target
and have it depend on other things.

00:56:16.410 --> 00:56:20.050
You typically do that if you have your
own build system like Ant or Make.

00:56:20.050 --> 00:56:26.300
If you just want to add a little step to
happen at the end of updating a target,

00:56:26.300 --> 00:56:27.990
you would just add another
shell script build phase.

00:56:28.040 --> 00:56:29.320
So I'm going to go ahead and do that.

00:56:29.320 --> 00:56:31.050
I can do that in several ways.

00:56:31.050 --> 00:56:34.580
I can go to the project menu here,
say new build phase.

00:56:34.600 --> 00:56:37.860
I'm just going to control click
here on the target actually.

00:56:37.860 --> 00:56:39.400
And I can say add new build phase.

00:56:39.400 --> 00:56:41.040
I'm going to add a shell
script build phase,

00:56:41.080 --> 00:56:42.430
just another one.

00:56:42.540 --> 00:56:44.420
I get another inspector.

00:56:44.430 --> 00:56:48.520
It looks exactly the same because
it's just another shell script.

00:56:48.530 --> 00:56:50.300
The sequence of these matters.

00:56:50.300 --> 00:56:53.940
So Xcode tries to run your
shell scripts in sequence.

00:56:53.940 --> 00:56:57.320
It will, however,
respect input and output

00:56:57.740 --> 00:56:59.320
dependencies as a higher--.

00:56:59.430 --> 00:57:03.550
It's a higher order of precedence
than respecting the order.

00:57:03.550 --> 00:57:06.140
In other words,
if you say that the first shell

00:57:06.400 --> 00:57:08.710
script depends on the output
of the second shell script,

00:57:08.830 --> 00:57:10.980
it will actually run
the second one first.

00:57:10.980 --> 00:57:13.120
So it will respect the dependencies.

00:57:13.120 --> 00:57:16.960
What I'm going to do in this case is I'm
actually going to use Apple script now.

00:57:16.960 --> 00:57:19.300
So I'm going to use a
tool called osascript.

00:57:19.330 --> 00:57:22.900
And what I want to do is I have
another little script here that

00:57:22.960 --> 00:57:25.200
I'm going to drag into my project.

00:57:25.200 --> 00:57:26.620
I'm going to copy it in.

00:57:26.690 --> 00:57:30.190
I'm not going to add it because I don't
want to copy it into my product.

00:57:30.340 --> 00:57:33.940
This is just a helper script
while I'm building my product.

00:57:33.940 --> 00:57:37.550
And so here's a little Apple script.

00:57:37.670 --> 00:57:39.180
And what I want to do is actually--.

00:57:39.180 --> 00:57:47.620
I'm going to see if I can't get a little
notification here when a build completes.

00:57:47.640 --> 00:57:51.540
So what I want to do is I want to
get an SMS when my build finishes.

00:57:51.540 --> 00:57:54.900
So I'm just going to go ahead
and have a little script that

00:57:54.900 --> 00:57:56.390
uses Apple script to do that.

00:57:56.390 --> 00:57:59.510
Let me go ahead and just
type in the name of it.

00:57:59.640 --> 00:58:03.690
Notify completion.scpt.

00:58:03.970 --> 00:58:05.560
I don't actually need
any inputs and outputs.

00:58:05.560 --> 00:58:07.890
In this case,
I just want it to run at the very end.

00:58:07.940 --> 00:58:08.910
Just always run.

00:58:09.000 --> 00:58:12.020
If I need to build something,
if anything needs to be updated,

00:58:12.030 --> 00:58:13.520
I just want this to always run.

00:58:13.610 --> 00:58:15.460
So we're just going to
go ahead and build again.

00:58:15.470 --> 00:58:17.430
And we're already up to
date with the disk image,

00:58:17.510 --> 00:58:19.140
so we shouldn't really need to do much.

00:58:19.140 --> 00:58:24.420
What we did, though,
was we ran an Apple script

00:58:24.420 --> 00:58:27.400
to send me a little SMS.

00:58:27.400 --> 00:58:27.400
And--.

00:58:27.400 --> 00:58:27.940
Okay.

00:58:27.940 --> 00:58:27.940
So now I'm going to
go ahead and run this.

00:58:27.940 --> 00:58:27.940
And I'm going to go ahead and run this.

00:58:28.190 --> 00:58:28.850
Okay.

00:58:28.940 --> 00:58:30.110
So the build finished.

00:58:30.220 --> 00:58:32.420
And actually,
it says here build succeeded,

00:58:32.500 --> 00:58:34.220
but you can't see that.

00:58:34.220 --> 00:58:39.310
So that's an innovative use, I guess,
for build phases.

00:58:39.430 --> 00:58:42.620
So go forth and experiment with that.

00:58:42.620 --> 00:58:43.620
All right.

00:58:43.620 --> 00:58:46.530
So can we have the slides back, please?

00:58:57.000 --> 00:59:04.320
OK, so just to summarize-- OK,
slides were out of order.

00:59:04.320 --> 00:59:07.580
Just to summarize,
one of the things we-- I mentioned,

00:59:07.580 --> 00:59:09.310
Xcode has a lot of built-in features.

00:59:09.320 --> 00:59:11.120
A lot of them you don't
have to know about.

00:59:11.170 --> 00:59:14.660
Some of them you just have to enable,
like predictive compilation.

00:59:14.700 --> 00:59:17.520
Zero link, all this kind of stuff
just works out of the box.

00:59:17.520 --> 00:59:18.640
Some are transparent, right?

00:59:18.640 --> 00:59:21.380
Zero link, predictive compilation,
that kind of stuff.

00:59:21.380 --> 00:59:26.260
Others do require some setup because
there are inputs that Xcode cannot know,

00:59:26.260 --> 00:59:29.800
such as with your prefix header,
what's the nature of your project?

00:59:29.890 --> 00:59:34.980
What kind of headers is it that
you use that are not changing?

00:59:34.980 --> 00:59:37.140
There are some things Xcode
can do to analyze this.

00:59:37.250 --> 00:59:40.380
We're thinking about how to make this
even more automatic in the future.

00:59:40.410 --> 00:59:42.620
But for now, set up a prefix header.

00:59:42.760 --> 00:59:43.810
Make sure it's pre-compiled.

00:59:43.820 --> 00:59:46.420
This will save a lot of times
during build and really get

00:59:46.420 --> 00:59:47.910
some good build performance.

00:59:47.990 --> 00:59:49.990
Distributed builds is another way.

00:59:50.000 --> 00:59:52.200
If I'm sitting in a coffee
shop with my PowerBook,

00:59:52.220 --> 00:59:53.580
this isn't going to help me much.

00:59:53.580 --> 00:59:56.680
But if I'm in the office-- and I have
a build farm that's just a couple of

00:59:56.680 --> 01:00:00.400
meters away-- this can really speed up,
especially a batch build.

01:00:00.400 --> 01:00:03.650
If you have a large application
and you do nightly builds,

01:00:03.760 --> 01:00:05.920
this can be a real time saver.

01:00:06.160 --> 01:00:09.440
Custom build phases and build rules,
a little bit different, right?

01:00:09.460 --> 01:00:12.990
They're not helping you speed up the
things that you're already doing,

01:00:12.990 --> 01:00:15.910
such as building your app,
but they help you automate

01:00:15.910 --> 01:00:19.180
some of the things that you
might be having to do by hand.

01:00:19.180 --> 01:00:24.260
And even if you have existing
scripts to do something,

01:00:24.260 --> 01:00:29.430
like build a disk image,
we've seen how you can actually

01:00:29.440 --> 01:00:32.300
weave that into Xcode and to get
Xcode to invoke it at the right time.

01:00:32.970 --> 01:00:37.370
So explore the possibilities
and use the mailing list,

01:00:37.370 --> 01:00:42.090
the Xcode help,
and learn about these features,

01:00:42.190 --> 01:00:45.690
and use the great documentation
that talks about these features.

01:00:46.140 --> 01:00:49.820
So for some of the more information,
there's actually sample code

01:00:49.920 --> 01:00:53.450
and some example projects
here at connect.apple.com.

01:00:53.690 --> 01:00:56.810
I think you've seen this
address in many other sessions.

01:00:56.820 --> 01:01:00.000
Some sessions,
there's the samples that we show,

01:01:00.000 --> 01:01:00.560
the demos.

01:01:00.560 --> 01:01:03.380
You can actually download those,
play with that yourself.

01:01:03.380 --> 01:01:07.770
Obviously, the Xcode build system
and the reference library,

01:01:07.770 --> 01:01:12.150
especially for the build settings,
they're all documented.

01:01:12.150 --> 01:01:14.230
They're in the HTML pages.

01:01:14.230 --> 01:01:15.930
There's a normal Xcode help.

01:01:16.000 --> 01:01:18.310
of course on the release notes.

01:01:18.970 --> 01:01:21.340
I'd like to, is Matthew Formica here?

01:01:21.340 --> 01:01:22.760
No, okay, we have virtual Matthew.

01:01:22.760 --> 01:01:25.670
So I'm going to ask virtual
Matthew to come up on stage again.

01:01:25.670 --> 01:01:26.480
This is Wiley.

01:01:26.480 --> 01:01:31.300
And at this point,
I'd like to also ask the rest of

01:01:31.450 --> 01:01:35.100
the Xcode team to come up for Q&A.