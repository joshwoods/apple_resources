WEBVTT

00:00:12.180 --> 00:00:12.900
Good afternoon.

00:00:12.900 --> 00:00:14.390
My name is Kevin Van Vechten.

00:00:14.420 --> 00:00:18.670
I'm an open source software
engineer with Apple.

00:00:18.740 --> 00:00:21.750
I'll be talking today
about the core of Mac OS X,

00:00:21.850 --> 00:00:23.600
which is known as Darwin.

00:00:23.620 --> 00:00:28.890
It's a BSD layer, traditional Unix style.

00:00:28.960 --> 00:00:31.070
It's open source,
and today I'll be talking a bit

00:00:31.070 --> 00:00:35.310
about where you can find the sources,
how you can download them,

00:00:35.310 --> 00:00:39.290
and build them on your own system
to make your own customization.

00:00:39.910 --> 00:00:43.270
So first I'd like to talk a little
bit about what's new at Apple.

00:00:43.500 --> 00:00:46.590
Last year, since WWDC,
we've announced the

00:00:46.700 --> 00:00:49.200
APSL version 2 license.

00:00:49.230 --> 00:00:51.810
The majority of the code that
Apple develops is released under

00:00:51.820 --> 00:00:57.040
the Apple Public Source License,
known as the APSL, which was already an

00:00:57.090 --> 00:01:03.920
OSI-approved license,
Open Source Initiative.

00:01:03.920 --> 00:01:06.730
Now it's also a
Free Software Foundation free

00:01:06.950 --> 00:01:08.180
software license.

00:01:08.180 --> 00:01:12.660
So it's not GPL compatible,
but it is recognized as a free

00:01:12.660 --> 00:01:15.190
software license by the FSA.

00:01:15.340 --> 00:01:20.800
Also, we've unified the Apple IDs with
our APSL registration,

00:01:20.800 --> 00:01:25.210
so the same Apple ID that you
use at your Mac.com account

00:01:25.360 --> 00:01:28.770
for your iTunes Music Store,
for Apple Developer Connection,

00:01:28.770 --> 00:01:33.210
can now be used to agree to the
license to download these sources.

00:01:33.260 --> 00:01:38.670
And also, we had our Darwin 701 release,
which corresponded to

00:01:38.670 --> 00:01:42.620
Mac OS 10.3 Panther.

00:01:43.210 --> 00:01:45.480
So at Apple we have several
open source projects.

00:01:45.540 --> 00:01:48.500
We have Darwin,
we have Darwin streaming server,

00:01:48.560 --> 00:01:52.090
Rendezvous, HeaderDoc, the list goes on.

00:01:52.100 --> 00:01:56.980
Some really great technology that
we have available that you should

00:01:56.980 --> 00:01:59.080
check out on our open source site.

00:01:59.140 --> 00:02:03.750
And the site that you should check
it out at is development.com/darwin,

00:02:04.020 --> 00:02:05.010
the one listed up top.

00:02:05.100 --> 00:02:08.890
I'd also really like to strongly
recommend subscribing to some of

00:02:08.890 --> 00:02:11.700
the mailing lists at list.apple.com.

00:02:12.120 --> 00:02:14.640
These are lists where members of
the community who are interested

00:02:14.650 --> 00:02:18.100
in open source can discuss
various issues they're having.

00:02:18.100 --> 00:02:22.750
And there are also a lot of engineers
at Apple who participate on these lists,

00:02:22.750 --> 00:02:27.080
who give responses to bug reports
or general technical questions.

00:02:27.100 --> 00:02:32.100
Additionally,
I'd like to point out opendarwin.org.

00:02:32.100 --> 00:02:34.100
Opendarwin.org is a mirror
of the Open Darwin website.

00:02:34.100 --> 00:02:35.100
It's a very useful tool.

00:02:35.100 --> 00:02:38.250
It's a very useful tool to help you
get the resources available at Apple,

00:02:38.320 --> 00:02:44.130
and also hosts various other open source
projects that are related to Mac OS X,

00:02:44.210 --> 00:02:45.100
such as Darwin ports.

00:02:45.100 --> 00:02:48.930
There's also close collaboration
with the Fink project,

00:02:49.310 --> 00:02:52.070
both of which the URLs are listed here.

00:02:52.390 --> 00:02:57.920
And those two projects bring a
large number of third party open

00:02:57.980 --> 00:03:01.300
source applications to Mac OS X.

00:03:03.080 --> 00:03:06.040
So what you'll learn in
this session is what's in

00:03:06.040 --> 00:03:09.670
Darwin and where you can get it,
how to build most of the

00:03:09.770 --> 00:03:11.030
projects that are in Darwin.

00:03:11.050 --> 00:03:13.080
They tend to follow a common format.

00:03:13.150 --> 00:03:17.880
And we'll go over the best practices
for building these sources.

00:03:18.200 --> 00:03:21.970
And also how you can use these
projects on a Mac OS X system.

00:03:22.220 --> 00:03:24.230
And specifically,
I'll be talking about what

00:03:24.350 --> 00:03:26.900
things are generally safe
to replace on Mac OS X with

00:03:27.010 --> 00:03:30.410
your own customized versions,
and what things you should

00:03:30.450 --> 00:03:35.380
probably avoid replacing even
though they're open source.

00:03:35.590 --> 00:03:40.060
And finally, I'll go over a brief outline
of how you can make a bootable

00:03:40.420 --> 00:03:43.570
CD that has Darwin on it,
which might be useful for

00:03:43.570 --> 00:03:47.200
an open source project,
might also be useful to come up

00:03:47.270 --> 00:03:51.940
with some sort of Unix recovery
CD for your own development purposes.

00:03:54.050 --> 00:03:57.120
So Darwin is the open
source core of Mac OS X.

00:03:57.290 --> 00:03:59.200
At the lowest level, it's the kernel.

00:03:59.460 --> 00:04:03.350
On top of that is
I/O Kit libraries and families,

00:04:03.420 --> 00:04:09.290
I/O Kit drivers, and finally,
it's the BSD commands and libraries,

00:04:09.290 --> 00:04:15.010
anything that you have access
to from terminal.app or Xterm.

00:04:16.870 --> 00:04:20.230
And Darwin can be very
helpful to you as a developer.

00:04:20.290 --> 00:04:22.600
It's a place to look for
reference sample code.

00:04:22.600 --> 00:04:25.510
So for example,
a lot of the new work you've been

00:04:25.510 --> 00:04:28.200
hearing about in the past couple
days has had to do with the new

00:04:28.200 --> 00:04:32.440
kernel programming interfaces and
finer grained locking in the kernel.

00:04:32.670 --> 00:04:36.590
You can check out the sources
to see either the MS-DOS FS or

00:04:36.590 --> 00:04:40.820
WebDAV FS as an example of
these new locks in use in Tiger.

00:04:40.910 --> 00:04:43.710
And those sources are on the website.

00:04:43.860 --> 00:04:47.640
You can also use these sources
to debug your projects.

00:04:47.720 --> 00:04:50.530
Perhaps it would be helpful if you
added a K print into the kernel at

00:04:50.530 --> 00:04:53.800
a certain step because the driver
you're riding is having issues.

00:04:53.800 --> 00:04:58.230
It really lets you debug from the
inside and see both sides of the picture

00:04:58.600 --> 00:05:01.480
when you're debugging your programs.

00:05:01.530 --> 00:05:03.360
You can customize your system.

00:05:03.470 --> 00:05:06.640
Perhaps there's a feature
that Apple doesn't provide,

00:05:06.650 --> 00:05:09.940
but there's a patch against
Perl or against Python or any

00:05:09.940 --> 00:05:11.830
other open source component.

00:05:11.970 --> 00:05:14.430
It's possible for you
to download the sources,

00:05:14.540 --> 00:05:18.890
apply the patch,
and then get that feature on Mac OS X.

00:05:18.990 --> 00:05:21.420
And of course, there are also a lot of
research opportunities,

00:05:21.480 --> 00:05:25.330
whether you're interested in
machine virtualization or whatever.

00:05:25.330 --> 00:05:29.330
There's the ability to tinker with
the underpinnings of the operating

00:05:29.330 --> 00:05:33.020
system and try new things out.

00:05:33.480 --> 00:05:35.900
So I'll go over a brief
history of Darwin.

00:05:35.960 --> 00:05:41.940
Darwin was first released as a
bunch of images of the sources of

00:05:41.990 --> 00:05:47.100
portions of Mac OS X Server 1.0,
and that was over five years ago.

00:05:47.280 --> 00:05:50.160
Since then, we've had a Darwin release
that corresponds with each

00:05:50.160 --> 00:05:52.200
major Mac OS X release.

00:05:52.220 --> 00:05:54.140
You can notice about
halfway down the list,

00:05:54.250 --> 00:05:58.470
there was a break in the numbering
from Darwin 1 series to Darwin 5,

00:05:58.500 --> 00:05:59.940
6, and 7.

00:05:59.980 --> 00:06:03.290
We have the Darwin versions
match the major number in

00:06:03.290 --> 00:06:06.880
the build number of Mac OS X,
so there's some consistency now.

00:06:06.880 --> 00:06:10.570
You can see, you know,
Mac OS 10.1 had a build

00:06:10.570 --> 00:06:16.340
number that started with a 5,
and Darwin 5.1 was released.

00:06:16.380 --> 00:06:18.500
Panther had a build number
that started with a 7,

00:06:18.500 --> 00:06:19.770
and that's also Darwin 7.

00:06:19.850 --> 00:06:23.500
So you can generally match
things up using the build

00:06:23.500 --> 00:06:25.870
number and the Darwin number.

00:06:26.900 --> 00:06:29.210
So you can get Darwin from
the open source website.

00:06:29.430 --> 00:06:34.990
The main link for a lot of text on
Darwin is developer.apple.com/darwin,

00:06:34.990 --> 00:06:36.220
which I mentioned earlier.

00:06:36.360 --> 00:06:42.360
But the actual sources live on the
www.opensource.apple.com server.

00:06:42.540 --> 00:06:47.260
They're also mirrored at
darwinsource.opendarwin.org.

00:06:47.260 --> 00:06:50.870
We organize the sources
by Mac OS X release.

00:06:50.950 --> 00:06:53.140
So for each release,
there's a page that has a list

00:06:53.190 --> 00:06:55.320
of all the open source projects.

00:06:55.400 --> 00:06:58.590
There's the name of the project,
the license that it's covered under,

00:06:58.590 --> 00:07:01.720
whether it's the Apple public
source license or another license.

00:07:01.950 --> 00:07:07.500
And then there's also a tar archive
that you can download of those sources.

00:07:09.250 --> 00:07:12.310
So there's also a neat trick
for getting all of the sources.

00:07:12.310 --> 00:07:16.270
If you want to grab them all at once,
you can go to the OpenDarwin site,

00:07:16.420 --> 00:07:21.690
and they offer anonymous rsync
access on the Darwin source files.

00:07:21.990 --> 00:07:25.460
So this is an example command up here,
where it's grabbing all of the sources

00:07:25.550 --> 00:07:28.420
that correspond to Mac OS X 10.3.4.

00:07:28.670 --> 00:07:32.470
You could change the version
number to a different version

00:07:32.470 --> 00:07:36.780
and grab those sources instead,
and the details are available

00:07:36.780 --> 00:07:38.600
on the OpenDarwin site.

00:07:40.800 --> 00:07:46.040
So now I'm going to talk about building
the projects that are in Darwin.

00:07:46.110 --> 00:07:49.450
At Apple,
we have a proprietary build system,

00:07:49.450 --> 00:07:52.240
the 10 build system,
and it's fairly heavyweight,

00:07:52.290 --> 00:07:57.130
and deals with a lot of issues
related to building Mac OS X.

00:07:57.230 --> 00:08:00.380
And a lot of the projects that
are in Darwin are customized to

00:08:00.400 --> 00:08:02.690
be built with this build system.

00:08:02.790 --> 00:08:05.800
Unfortunately,
it's not practical to have this

00:08:05.800 --> 00:08:09.260
available outside of Apple,
and so what we'll be talking about

00:08:09.260 --> 00:08:12.830
is some of the expectations that
these projects might have that

00:08:12.960 --> 00:08:16.820
the 10 build system provides,
and how you can set up your environment

00:08:17.000 --> 00:08:20.500
to build projects in the same manner.

00:08:21.390 --> 00:08:23.590
So before you start,
it's important to realize that

00:08:23.670 --> 00:08:27.050
there are a lot of variables
involved in building software.

00:08:27.180 --> 00:08:29.860
There's the compiler
tool version you have.

00:08:29.930 --> 00:08:37.180
We have GCC 295, GCC 3.1, 3.3,
and now 3.5 with Tiger.

00:08:37.320 --> 00:08:42.770
So it's important to build sources
with the correct set of compiler tools.

00:08:42.880 --> 00:08:46.280
Generally speaking,
the version of the compiler that was

00:08:46.340 --> 00:08:50.730
used to build a given Mac OS X release
is the same GCC compiler that

00:08:50.770 --> 00:08:52.420
was shipped on that X release.

00:08:52.690 --> 00:08:55.670
So for anything in the
Panther series of software updates,

00:08:55.710 --> 00:08:59.810
you'll want to use the GCC compiler
that came on the developer

00:08:59.870 --> 00:09:03.360
tools accompanying Mac OS 10.3.

00:09:03.390 --> 00:09:06.820
It's also important to realize that the
environment variables in your shell have

00:09:06.890 --> 00:09:09.820
a large impact on how things get built.

00:09:09.850 --> 00:09:12.520
There are variables like
the C flags or LD flags,

00:09:12.590 --> 00:09:16.240
which pass extra arguments to
the compiler or to the linker.

00:09:16.380 --> 00:09:20.880
So if you don't want them to be set,
be sure to unset any unnecessary

00:09:20.880 --> 00:09:23.640
variables before building,
because it can change

00:09:23.720 --> 00:09:25.620
the results of the build.

00:09:25.820 --> 00:09:29.020
It's also equally important to set
the correct environment variables

00:09:29.050 --> 00:09:33.180
that the projects might be expecting,
and I'll talk about those in a minute.

00:09:33.220 --> 00:09:35.380
The libraries and headers that
you have installed on your

00:09:35.380 --> 00:09:37.960
system are also important.

00:09:37.960 --> 00:09:40.980
That's what the projects
are going to link against.

00:09:41.030 --> 00:09:44.260
And so it's always important to
keep in mind what versions you

00:09:44.320 --> 00:09:46.030
have installed on your system.

00:09:46.210 --> 00:09:48.860
And when you're building these projects,
they will use them.

00:09:48.860 --> 00:09:50.140
And they will use those versions.

00:09:50.140 --> 00:09:54.780
So if you are anticipating deploying
the project to a different machine,

00:09:54.910 --> 00:09:58.340
you probably want to build
on something like 10.3 base,

00:09:58.340 --> 00:10:02.660
and it would have the most compatibility
over all the extra software updates.

00:10:02.660 --> 00:10:05.720
If you build on something later,
like 10.3.3 or 10.3.4,

00:10:05.720 --> 00:10:09.640
it might pick up some changes that
may or may not be backward compatible.

00:10:09.690 --> 00:10:12.240
So it's, generally speaking,
easier to be forward compatible

00:10:12.270 --> 00:10:14.700
than backward compatible.

00:10:15.380 --> 00:10:20.520
Another issue is, for example,
the file systems.

00:10:20.820 --> 00:10:24.890
With 10.2, I believe it was,
dev random was introduced.

00:10:24.990 --> 00:10:28.890
Well, if you're targeting a piece
of software prior to 10.2,

00:10:29.100 --> 00:10:32.420
dev random is going to be there,
and there's not much you can do about it.

00:10:32.500 --> 00:10:36.120
Likewise,
if you're building software for 10.2,

00:10:36.180 --> 00:10:39.790
and you're on 10.1,
dev random's not going to be there.

00:10:39.800 --> 00:10:43.290
So if you have an autoconfigure
script that's automatically detecting

00:10:43.300 --> 00:10:46.490
what features are available,
it's not going to know that your

00:10:46.940 --> 00:10:51.370
system you're targeting should
or shouldn't have dev random if

00:10:51.370 --> 00:10:52.840
the system you're on differs.

00:10:52.870 --> 00:10:55.510
So again,
it's just really important to be building

00:10:55.510 --> 00:11:00.290
on the same style of system as you
want to ultimately use the project on.

00:11:01.910 --> 00:11:05.280
So the overall requirements for
building software are generally more

00:11:05.280 --> 00:11:07.400
RAM is better and more disk is better.

00:11:07.400 --> 00:11:12.050
Obviously you can build sources
with less than these requirements,

00:11:12.050 --> 00:11:15.680
but generally speaking,
having about 300 megabytes of

00:11:15.680 --> 00:11:21.240
RAM will keep you from swapping a
lot as you're doing large builds.

00:11:21.320 --> 00:11:26.100
And if you intend to build a lot
of projects that are in Darwin,

00:11:26.100 --> 00:11:29.930
I recommend at least two
gigabytes of space to work with.

00:11:30.060 --> 00:11:33.850
A lot of the intermediate files during
building can take up a lot of space.

00:11:34.180 --> 00:11:37.810
And it's always unfortunate
to see a very long compile die

00:11:37.810 --> 00:11:40.000
because you ran out of space.

00:11:40.750 --> 00:11:44.540
On Mac OS X, while you're building,
it's important to have the

00:11:44.600 --> 00:11:46.270
developer tools installed.

00:11:46.360 --> 00:11:50.980
Obviously, you'll need those to have
the compiler on the system.

00:11:51.150 --> 00:11:57.940
But it's also important to have the
BSD SDK and the X11 SDK installed.

00:11:57.940 --> 00:11:59.540
I think I skipped an item.

00:11:59.760 --> 00:12:04.540
The BSD package on the CDs,
I believe it's defaulted

00:12:04.680 --> 00:12:06.710
to install these days.

00:12:06.820 --> 00:12:10.080
But in the past,
it may have been an optional install.

00:12:10.080 --> 00:12:12.800
So make sure you have all of
your BSD command line tools,

00:12:12.800 --> 00:12:17.300
because a lot of the sources
require those to build properly.

00:12:20.540 --> 00:12:24.600
So another important issue is
many of the sources may rely on

00:12:24.600 --> 00:12:26.310
a case-sensitive file system.

00:12:26.430 --> 00:12:30.090
For example,
the CVS project uses lowercase

00:12:30.090 --> 00:12:35.270
CVS to denote the executable
and a lot of the sources.

00:12:35.430 --> 00:12:39.520
But it also is checked into CVS,
and so there are uppercase

00:12:39.520 --> 00:12:41.560
CVS directories on the file system.

00:12:41.600 --> 00:12:43.800
Because of this,
it's recommended to do all of your

00:12:43.820 --> 00:12:49.950
building on a case-sensitive file system,
whether that's UFS or HFSX.

00:12:50.340 --> 00:12:53.320
And I find that disk images
work particularly well for

00:12:53.320 --> 00:12:55.190
doing this on Mac OS X.

00:12:55.280 --> 00:12:58.240
On Darwin, unfortunately,
disk images aren't available,

00:12:58.240 --> 00:13:01.930
so it will be necessary to
use a separate partition.

00:13:02.330 --> 00:13:06.780
Shown here is an example
command to HDIutil,

00:13:06.780 --> 00:13:11.700
which will create a 4
gigabyte HFSX volume.

00:13:11.710 --> 00:13:15.200
So that has all the speed and
journaling advantages of HFS,

00:13:15.200 --> 00:13:18.970
but it's also case sensitive by default,
and allows you to build

00:13:18.970 --> 00:13:21.710
something like the CVS project.

00:13:25.990 --> 00:13:29.430
Next I'll talk about
the shell environment.

00:13:29.550 --> 00:13:34.770
Many of the make files that are
used by these sources expect certain

00:13:34.770 --> 00:13:36.690
environment variables to be set.

00:13:36.960 --> 00:13:40.900
Apple's build system sets four very
critical environment variables,

00:13:40.900 --> 00:13:44.510
and these are the source root,
the object root, the symbol root,

00:13:44.640 --> 00:13:45.830
and the destination root.

00:13:45.900 --> 00:13:49.430
The source root is simply the
absolute path to where the

00:13:49.430 --> 00:13:51.900
sources are that you are building.

00:13:51.990 --> 00:13:55.920
The object root is a path to what
should start out as an empty directory,

00:13:55.990 --> 00:13:58.900
and that is where all the
intermediate .o files and other

00:13:58.900 --> 00:14:03.900
miscellaneous intermediate files
will be stored during build.

00:14:04.130 --> 00:14:08.900
And it's possible to just delete that
directory after a build succeeded.

00:14:09.130 --> 00:14:13.470
The symbol root is where debugging
versions of any executables,

00:14:13.550 --> 00:14:17.900
libraries,
or drivers you build will be placed.

00:14:17.900 --> 00:14:20.390
And those versions have all
of the symbols in them before

00:14:20.390 --> 00:14:21.830
the symbols get stripped out.

00:14:21.900 --> 00:14:25.890
And finally, the destination root is
the final packaged bits.

00:14:25.910 --> 00:14:31.000
It's possible to take a destination root,
package it up with a tar archive

00:14:31.000 --> 00:14:34.890
or something of that nature,
and then install it on the system

00:14:34.890 --> 00:14:37.900
that you want to run the software on.

00:14:37.900 --> 00:14:41.900
It's important to create all these
directories before you begin building,

00:14:41.920 --> 00:14:43.990
since some of the make
files won't create them,

00:14:43.990 --> 00:14:46.840
and then the building might fail
because the directory is missing.

00:14:46.900 --> 00:14:49.820
It's also important to avoid
spaces in the path names

00:14:49.820 --> 00:14:51.870
leading up to these directories.

00:14:52.050 --> 00:14:55.910
If you have spaces and there's a
bug in a make file and it decides it

00:14:55.950 --> 00:14:59.720
wants to wipe out the object root,
well, you might have some

00:14:59.750 --> 00:15:01.900
unfortunate consequences.

00:15:01.900 --> 00:15:06.800
So really be careful and don't
use spaces in these path names.

00:15:06.900 --> 00:15:10.900
Finally, it's important to change each of
these to root wheel ownership.

00:15:10.900 --> 00:15:16.670
That way you get the proper inheritance
of the root wheel user ID and

00:15:16.670 --> 00:15:19.720
group ID in the destination root.

00:15:19.900 --> 00:15:20.860
Many of the projects only
change the root wheel.

00:15:20.950 --> 00:15:21.900
It's important to change the root wheel.

00:15:21.900 --> 00:15:25.300
It's important to change explicitly
the ownership of files that

00:15:25.300 --> 00:15:28.450
it expects to be different,
and so it relies on this

00:15:28.450 --> 00:15:30.890
default while you're building.

00:15:32.410 --> 00:15:36.240
So when building projects,
many of the projects have a make file.

00:15:36.240 --> 00:15:38.240
And if there's a make file,
you should default to

00:15:38.240 --> 00:15:42.110
using GNU make to project,
as that's what Apple does.

00:15:42.170 --> 00:15:46.900
If there is a PB proj or an Xcode file,
then you'll need to use Xcode build,

00:15:47.060 --> 00:15:52.560
which is a command line tool
that can build the project.

00:15:52.610 --> 00:15:54.140
It's important to always build as root.

00:15:54.300 --> 00:15:58.340
As I indicated,
some make files will change the

00:15:58.340 --> 00:16:00.560
ownership or the permissions of a file.

00:16:00.680 --> 00:16:06.530
And the only way to change ownership,
at least now before there are ACLs,

00:16:06.570 --> 00:16:08.340
is if you have root privileges.

00:16:08.340 --> 00:16:14.660
So always be root when you invoke
GNU make or when you invoke Xcode build.

00:16:15.010 --> 00:16:17.180
And there are two main targets
for each of these projects.

00:16:17.240 --> 00:16:18.720
There's an install headers phase.

00:16:19.030 --> 00:16:21.900
And the install headers phase
installs only the header files.

00:16:22.060 --> 00:16:24.920
So if you have a big library
or an I/O Kit family,

00:16:25.010 --> 00:16:27.160
and you're missing the
headers on your system,

00:16:27.300 --> 00:16:30.190
you don't need to build the
entire library to get the headers.

00:16:30.200 --> 00:16:33.740
It's possible to shortcut to
just do the install headers.

00:16:33.760 --> 00:16:35.660
That'll give you the headers
you need for that library.

00:16:35.660 --> 00:16:38.540
And then you can move on to the
next project that you want to

00:16:38.540 --> 00:16:40.500
build that requires those headers.

00:16:40.530 --> 00:16:46.120
On the other hand, if you use target,
it will build the entire

00:16:46.260 --> 00:16:49.160
binary or library,
et cetera.

00:16:49.240 --> 00:16:52.960
And that is the complete
package of man pages,

00:16:53.290 --> 00:16:56.110
headers, and binaries.

00:16:58.100 --> 00:17:03.100
For example, here's the basic environment
for the ccTools project.

00:17:03.120 --> 00:17:10.400
Now, in Mac OS X 3.4,
ccTools is version 495.8.

00:17:10.400 --> 00:17:13.800
And we'd find that just by
going to the Darwin site.

00:17:14.200 --> 00:17:21.450
So now we can create directories as
each of these variables point to.

00:17:21.580 --> 00:17:29.550
And the sources to cctools4958 should
be in that path that's specified.

00:17:30.350 --> 00:17:32.520
There are more environment
variables that you should set.

00:17:32.520 --> 00:17:34.980
There's a project name, which is cctools.

00:17:35.180 --> 00:17:39.300
There's the project's source version,
which is 4.95.8.

00:17:39.330 --> 00:17:42.320
There's the build version,
which is simply the number of

00:17:42.320 --> 00:17:45.570
attempts you've made to build
this particular software.

00:17:45.580 --> 00:17:48.880
This is our first attempt,
so it's build version .

00:17:49.510 --> 00:17:53.280
The architectures are what architectures
you're planning to build for.

00:17:53.320 --> 00:17:56.320
For Mac OS X, that's obviously PowerPC.

00:17:56.360 --> 00:18:02.060
Darwin actually supports both 386
architecture and architecture,

00:18:02.200 --> 00:18:04.900
so you might add in that
flag if you want to.

00:18:06.460 --> 00:18:10.520
The operating system flag for
environment variables is always Mac OS.

00:18:10.600 --> 00:18:14.760
The release should be whatever
release you're building for.

00:18:14.760 --> 00:18:18.520
So since this is CC Tools from 10.3.4,
you'll want to specify

00:18:18.610 --> 00:18:19.720
a release of Panther.

00:18:19.720 --> 00:18:28.410
For path releases, 10.0 is Cheetah,
10.1 was Puma, 10.2 was Jaguar,

00:18:28.410 --> 00:18:34.020
10.3 is Panther, and 10.4 will be Tiger.

00:18:35.320 --> 00:18:40.810
The Mac OS X deployment target will
affect how header files are interpreted,

00:18:40.810 --> 00:18:45.790
and it should be set to the version
number of what you're targeting.

00:18:45.790 --> 00:18:48.650
It shouldn't include a
software update version.

00:18:48.680 --> 00:18:51.410
I believe it should just
include the major version,

00:18:51.410 --> 00:18:55.320
so 10.1, 10.2, 10.3, or 10.4.

00:18:57.210 --> 00:19:00.400
For Darwin, as I mentioned,
there are a couple of variations.

00:19:00.400 --> 00:19:05.090
You may want to include the i386
architecture while building.

00:19:05.300 --> 00:19:08.630
You may want to include extra C flags.

00:19:08.750 --> 00:19:11.800
For example,
Darwin does not have the C preprocessor,

00:19:11.960 --> 00:19:15.950
so we're specifying -node-cpp-precomp.

00:19:16.160 --> 00:19:19.600
So the CppPrecompiler doesn't get run.

00:19:19.640 --> 00:19:22.870
And also,
the release is not Panther or Tiger,

00:19:22.930 --> 00:19:27.690
but the release is simply
Darwin when building Darwin sources.

00:19:28.750 --> 00:19:33.400
So, to actually build CC tools,
we set the environment variables,

00:19:33.410 --> 00:19:37.900
and also pass all of those same variables
as additional arguments to the make

00:19:37.900 --> 00:19:39.720
command when we're building the sources.

00:19:39.720 --> 00:19:44.460
It's also very useful to redirect
all the output to a log file.

00:19:44.460 --> 00:19:47.640
Many of these projects have a lot
of output while they're building,

00:19:47.640 --> 00:19:50.510
and if something goes wrong,
your scroll back history

00:19:50.560 --> 00:19:51.780
might not cover it.

00:19:51.780 --> 00:19:54.820
If it's in a file,
you can go back and see where

00:19:54.820 --> 00:19:57.460
things actually started to go wrong.

00:19:58.470 --> 00:20:04.330
So, in this example here, doing C2-S,
which makes everything run as root.

00:20:04.630 --> 00:20:07.240
Again, that's very important
for building the sources.

00:20:07.240 --> 00:20:11.740
We're doing a make install of CC tools,
PowerPC architecture.

00:20:11.740 --> 00:20:15.150
I show the source root and
the additional variables we

00:20:15.150 --> 00:20:17.340
went over omitted for brevity.

00:20:17.340 --> 00:20:21.790
The bottom left-hand corner,
I'm redirecting standard

00:20:21.870 --> 00:20:23.850
error to standard out.

00:20:24.040 --> 00:20:27.820
So, both standard error and standard
out will get captured in the same.

00:20:28.550 --> 00:20:32.800
And then I'm storing it in a
log file that you can see there.

00:20:34.800 --> 00:20:38.580
So I'm going to do a little demo now
of going over the steps of building

00:20:38.580 --> 00:20:42.890
CC tools that we've just discussed.

00:20:48.690 --> 00:20:51.760
So here I have the command for HDIutil.

00:20:51.760 --> 00:20:56.160
We'll create-- I guess for speed,
we probably don't need

00:20:56.270 --> 00:20:58.510
a full two gigabytes.

00:21:04.830 --> 00:21:09.120
So we'll create a disk image quickly,
and this is where we'll

00:21:09.130 --> 00:21:10.650
be doing our building.

00:21:10.730 --> 00:21:15.810
This is an HFSx disk image,
so it has case sensitivity.

00:21:31.110 --> 00:21:36.140
So I've chosen a name of
build root for this example.

00:21:36.220 --> 00:21:38.800
And I'll change into
the build root volume.

00:21:38.870 --> 00:21:41.580
Now I've already downloaded
the CC tool spaces.

00:21:41.840 --> 00:21:45.010
So what I'm going to do is extract them.

00:21:52.500 --> 00:21:58.000
All the sources we publish on the site
already have a directory name of the

00:21:58.000 --> 00:22:00.670
project name dash project version,
so that's already set up.

00:22:00.790 --> 00:22:03.180
You can just extract it to wherever
you want to build the sources,

00:22:03.180 --> 00:22:04.190
and you're ready to go.

00:22:12.980 --> 00:22:16.260
So I already have a little script
here that sets up the appropriate

00:22:16.350 --> 00:22:20.900
environment variables for source root,
object root, symbol root, and dest root.

00:22:20.900 --> 00:22:25.500
It creates the directories to make sure
they exist before the building begins.

00:22:26.820 --> 00:22:33.270
to wheel for each of those
all the environment variables

00:22:34.280 --> 00:22:34.410
that were discussed.

00:22:35.140 --> 00:22:38.100
into the directory where the sources are.

00:22:38.180 --> 00:22:42.490
We make install,
because we want to build the whole thing.

00:22:42.510 --> 00:22:46.500
And again, all the variables that we
had set in the environment,

00:22:46.560 --> 00:22:49.840
we also want to pass as
additional arguments to make.

00:22:57.330 --> 00:23:02.410
So now we are running as root,
and I'll do --x,

00:23:02.530 --> 00:23:05.470
which basically tells the
bash shell to echo each of the

00:23:05.680 --> 00:23:08.430
commands that it's running,
so we can see step by step

00:23:08.570 --> 00:23:10.190
as we run through the .

00:23:18.200 --> 00:23:24.910
I'm going to be working on
this for a little while.

00:23:33.180 --> 00:23:36.160
So now is the time to
talk about dependencies.

00:23:36.180 --> 00:23:39.350
Come back to the build,
it will and there will be an error

00:23:39.360 --> 00:23:43.230
that streams.h was not present.

00:23:43.510 --> 00:23:47.420
Basically what happens is there's
a lot of that aren't shipped

00:23:47.420 --> 00:23:50.600
on Mac OS X because they're
not needed for day-to-day use.

00:23:50.630 --> 00:23:54.090
But they are available for
the open source website.

00:23:55.380 --> 00:23:58.560
So right now,
it's not easy to determine where the

00:23:58.560 --> 00:24:01.180
streams.h file may have come from.

00:24:01.180 --> 00:24:05.680
We're working on some that can help
track that type of information down.

00:24:05.680 --> 00:24:08.220
We're searching through
the Darwin source.

00:24:09.230 --> 00:24:15.490
So the next step would be to
go to the open source site,

00:24:15.600 --> 00:24:33.400
[Transcript missing]

00:24:34.200 --> 00:24:38.720
Once we have that,
we can take the build result, which has,

00:24:38.720 --> 00:24:42.610
we'll call it a root,
that contains all of the build results

00:24:42.610 --> 00:24:47.900
of the Libstream's install headers,
and we can copy that to the base system.

00:24:47.900 --> 00:24:51.810
On Mac OS X,
the ditto command is very useful for

00:24:51.810 --> 00:24:55.580
copying one directory to another,
so you can just ditto from the

00:24:55.590 --> 00:24:59.160
directory that contains the
Libstream's headers to slash,

00:24:59.170 --> 00:25:01.540
and that'll copy everything
to the correct place.

00:25:01.730 --> 00:25:04.140
If you run it as root,
it will also reserve

00:25:04.140 --> 00:25:07.500
all of the permissions.

00:25:14.830 --> 00:25:15.250
So, you always make backups.

00:25:15.260 --> 00:25:16.290
Obviously, if you're going to be copying
files over your base system,

00:25:16.290 --> 00:25:17.210
something can go wrong at times,
either if you don't have a build

00:25:17.210 --> 00:25:19.730
of something you expected you did,
or versions don't match up.

00:25:20.130 --> 00:25:26.800
So, it's important to have good backups
when you're building these builds.

00:25:28.870 --> 00:25:32.850
On Darwin, Ditto is not available,
but either the GNU/TAR or the

00:25:32.850 --> 00:25:36.800
Pax command can be used to
copy the sources to the root.

00:25:36.800 --> 00:25:41.790
So, I have a couple example usages of
both Ditto and of Pax shown here.

00:25:43.000 --> 00:25:47.670
We're going to go back to the demo
to resolve that streams.h problem.

00:26:00.600 --> 00:26:00.600
So we can see here that
streams.h was not found,

00:26:00.600 --> 00:26:00.600
and we have an install error.

00:26:00.600 --> 00:26:00.600
I also have already downloaded

00:26:04.720 --> 00:26:10.030
Libstreams project.

00:26:10.030 --> 00:26:10.030
So I'll extract the resources now.

00:26:16.390 --> 00:26:18.140
script set up to compile.

00:26:18.140 --> 00:26:27.680
We're doing the same steps,
setting the source root, the object root,

00:26:27.680 --> 00:26:29.350
the symbol root, destination root.

00:26:29.540 --> 00:26:32.720
We're creating the
directories in case they don't

00:26:32.840 --> 00:26:35.620
We're changing the
ownership to root wheel.

00:26:35.620 --> 00:26:39.620
We export the project name, version,
and the different build

00:26:41.330 --> 00:26:43.100
Not only do we export
them in the environment,

00:26:43.100 --> 00:26:46.800
but also pass them to the Make file.

00:26:46.810 --> 00:26:48.580
Though, in this case,
instead of Make Install,

00:26:48.590 --> 00:26:49.960
it's Make Install Headers.

00:26:49.960 --> 00:26:51.790
We just cut the header.

00:27:00.390 --> 00:27:03.700
So installing the headers
is actually very fast.

00:27:03.700 --> 00:27:07.500
You just need to copy a few
files into the destination route.

00:27:07.950 --> 00:27:10.790
And if we look at the
directories we have here,

00:27:13.500 --> 00:27:17.280
If I find all the files
that are in the libstreams,

00:27:17.280 --> 00:27:21.510
we can see the libstreams,
and then user local includes

00:27:21.510 --> 00:27:24.260
streams.h and streamsextra.h.

00:27:24.300 --> 00:27:29.300
So this is what you might expect
into the base system to satisfy that

00:27:29.300 --> 00:27:31.560
missing dependency on streams.h.

00:27:31.560 --> 00:27:33.910
And we'll use the ditto command.

00:27:35.100 --> 00:27:45.800
[Transcript missing]

00:27:59.850 --> 00:28:03.040
We can see it go a little farther.

00:28:03.040 --> 00:28:10.230
is a lot of times when we do a build,
the object root has results.

00:28:12.120 --> 00:28:17.000
The next thing is one of my best
practices that I didn't follow.

00:28:17.110 --> 00:28:22.850
It's a good idea to clear out the
object root and the symbol root.

00:28:30.230 --> 00:28:35.370
from there.

00:28:36.330 --> 00:28:36.400
We'll get everything from there.

00:28:37.600 --> 00:28:44.120
This time, hopefully,
it'll get a little further because we

00:28:53.000 --> 00:28:59.700
[Transcript missing]

00:29:03.470 --> 00:29:04.600
So again, be careful.

00:29:04.600 --> 00:29:08.640
Always back if you're changing
anything on your base system.

00:29:08.730 --> 00:29:10.920
It's also important not to
overwrite the core foundation

00:29:12.100 --> 00:29:15.200
The Core Foundation is an example of
something that doesn't quite match

00:29:15.320 --> 00:29:17.340
up between Darwin and Mac OS X.

00:29:17.380 --> 00:29:21.100
It's a lot of extra functionality in
Mac OS X that's not present on Darwin.

00:29:21.170 --> 00:29:24.950
So if you were to replace
it on your Mac OS X system,

00:29:24.950 --> 00:29:27.220
things would fail to work.

00:29:27.270 --> 00:29:32.800
In general, the BSD commands and the
BSD libraries are safe to replace.

00:29:32.880 --> 00:29:36.780
So those you don't need
to worry about too much.

00:29:36.810 --> 00:29:40.180
But XNU,
it's also generally safe to replace.

00:29:40.280 --> 00:29:42.610
But since it is the kernel,
any mistake will leave

00:29:42.610 --> 00:29:43.860
the machine unbooted.

00:29:43.920 --> 00:29:47.820
It's always good to have a or a CD or
something you can boot from again to

00:29:47.820 --> 00:29:50.690
restore your backup of the kernel.

00:29:52.340 --> 00:29:56.930
I/O Kit drivers and families
have those same set of concerns.

00:29:57.020 --> 00:30:01.140
Basically,
it's the base of the system that decides

00:30:01.480 --> 00:30:04.580
where the system will boot or not boot.

00:30:04.580 --> 00:30:04.580
You really have to have a backup.

00:30:05.560 --> 00:30:14.790
If you have an extra partition
that has a full system on it,

00:30:14.940 --> 00:30:17.440
of course, when you're booting,
you can use the Option key to select

00:30:18.060 --> 00:30:19.640
which partition you want to boot from.

00:30:19.640 --> 00:30:22.060
So if something goes wrong
on your building partition,

00:30:22.140 --> 00:30:24.760
you can use the Option key to go
back to your backup partition,

00:30:24.760 --> 00:30:27.050
boot from that,
and then correct any problems

00:30:27.050 --> 00:30:29.050
that you may have had.

00:30:30.160 --> 00:30:34.040
Generally, for troubleshooting, remember,
it's important to build this root.

00:30:35.780 --> 00:30:39.100
Things won't fail out,
but the risk to change

00:30:39.100 --> 00:30:41.560
ownership might fail silently.

00:30:41.570 --> 00:30:46.510
And so the build results you get won't
be exactly what you were expecting.

00:30:47.720 --> 00:30:52.080
As we saw, a lot of times it's necessary
to clear out the optimal route,

00:30:52.080 --> 00:30:55.040
and even the desperate route,
after each attempt to build the software.

00:30:55.140 --> 00:30:56.900
If there are intermediate
results in there,

00:30:56.900 --> 00:31:00.530
sometimes the Makefiles aren't
as robust as they could be,

00:31:00.530 --> 00:31:02.710
and they will go any further,
because they were tricked

00:31:02.790 --> 00:31:04.160
by a file that's in there.

00:31:04.210 --> 00:31:07.130
So clearing those out
gives you a fresh start,

00:31:07.130 --> 00:31:10.270
and it usually makes things succeed.

00:31:10.300 --> 00:31:12.720
If there's a header file missing,
you can use the install headers

00:31:12.790 --> 00:31:15.260
phase to shortcut a build.

00:31:15.290 --> 00:31:17.190
And of course,
if you have specific questions,

00:31:17.350 --> 00:31:19.300
don't hesitate to ask a mailing list.

00:31:19.320 --> 00:31:23.890
The darwindevelopmentlist@list.apple.com
is a good general starting

00:31:24.000 --> 00:31:26.900
point for Darwin questions,
and there are more specific

00:31:26.900 --> 00:31:31.620
lists for kernel technologies
or other areas of Darwin.

00:31:31.640 --> 00:31:35.770
And also at Darwin.org,
hackers@darwin.org list,

00:31:36.000 --> 00:31:43.370
where people who are involved in
the Darwin source code discuss .

00:31:44.360 --> 00:31:46.900
Next I'll talk about a little
bit more advanced topic,

00:31:46.900 --> 00:31:48.740
building in a changed root.

00:31:48.810 --> 00:31:54.340
A changed root is when you use
the change root BSD command.

00:31:54.420 --> 00:31:56.610
There's a good man page
available on it that describes

00:31:56.620 --> 00:31:58.300
a little bit about what it does.

00:31:58.300 --> 00:32:01.620
And what essentially this does
is it changes the root directory,

00:32:01.620 --> 00:32:05.800
slap, to be a different
subdirectory on your disk.

00:32:05.800 --> 00:32:09.050
And the advantage to doing this
is it's now possible to install

00:32:09.090 --> 00:32:12.060
headers and install libraries,
compilers,

00:32:12.060 --> 00:32:15.500
whatever you need in a different
environment than your host system.

00:32:15.500 --> 00:32:18.840
So if something goes wrong in there,
it's less likely to affect the

00:32:18.840 --> 00:32:21.360
partition that you're booting off of.

00:32:21.360 --> 00:32:27.570
And it's also possible to, or more easy,
targeting a system that's different

00:32:27.580 --> 00:32:28.960
than what you're running on.

00:32:28.960 --> 00:32:31.560
For example,
if you're running on 10.3.3 or 10.3.4,

00:32:31.560 --> 00:32:34.200
because that's what's newest
you want running on it,

00:32:34.390 --> 00:32:37.020
you'll want things to work on 10.3.

00:32:37.030 --> 00:32:41.810
And building up a changed root with
the 10.3 stuff will solve the problem.

00:32:41.900 --> 00:32:45.010
The problem of picking up libraries
and headers might not have been

00:32:45.240 --> 00:32:49.570
present at that time because you're
in a more self-contained environment.

00:32:50.060 --> 00:32:54.230
A couple of things to note though
is that this doesn't change IPC.

00:32:54.230 --> 00:32:58.000
So it's still important that
you use the same major version.

00:32:58.000 --> 00:33:04.790
Although it's easy to do a change
route to build 10.3 sources on

00:33:04.800 --> 00:33:09.170
a system that's actually 10.3.4,
things inside the change route

00:33:09.170 --> 00:33:11.660
will communicate with the
various daemons on the system,

00:33:11.660 --> 00:33:12.400
like lookupd.

00:33:12.400 --> 00:33:17.400
So if there's been any protocol change,
the change route doesn't reflect that,

00:33:17.400 --> 00:33:21.550
and things either might fail to
work or get unexpected results.

00:33:23.300 --> 00:33:25.320
So here I have an example script.

00:33:25.320 --> 00:33:30.490
Again, you have to be root user to
the root of the file system.

00:33:30.490 --> 00:33:34.400
And when you change the
root to the file system,

00:33:34.430 --> 00:33:36.550
some things will be missing, like devfs.

00:33:36.610 --> 00:33:40.040
And a lot of software
needs that to compile.

00:33:40.210 --> 00:33:43.600
So here I have an example of creating
the dev directory in the root

00:33:43.600 --> 00:33:47.720
that we're going to change into,
mounting the devfs file

00:33:47.720 --> 00:33:52.620
system on that dev directory,
mounting the file descriptor file system

00:33:52.630 --> 00:33:55.210
on top of that dev directory as well.

00:33:55.260 --> 00:33:59.920
So that gives you things like /dev/null,
devrandom,

00:33:59.920 --> 00:34:04.830
the various file descriptors that
are accessible from the shell.

00:34:05.050 --> 00:34:07.980
And it's important to mount these file
systems outside of the change root.

00:34:07.980 --> 00:34:09.740
If you mount them inside
of the change root,

00:34:09.770 --> 00:34:15.740
then it might not be possible to unmount
these file systems until you restart.

00:34:15.750 --> 00:34:19.000
However, if you mount them before
changing into the root,

00:34:19.000 --> 00:34:21.420
then it's possible to unmount them again.

00:34:21.820 --> 00:34:26.930
So here we changed the root
once this has been done.

00:34:27.200 --> 00:34:33.530
And that will drop us into the default
shell inside that root directory.

00:34:35.410 --> 00:34:38.240
I'm going to talk a bit
about the Darwin build tools.

00:34:38.250 --> 00:34:41.740
The Darwin build tools are scripts
that I've developed recently

00:34:41.890 --> 00:34:45.390
that help to automate some of
these tasks I've just discussed.

00:34:45.480 --> 00:34:48.530
So as you might imagine,
it would be fairly obvious if you had

00:34:48.650 --> 00:34:51.570
to type in all of the text each time to
set all the environment variables and

00:34:51.570 --> 00:34:53.400
pass all those same arguments to make.

00:34:53.400 --> 00:34:58.180
And these scripts automate
some of those processes.

00:34:59.120 --> 00:35:03.700
The Darwin build tools
are two main components.

00:35:03.810 --> 00:35:07.720
There's the Darwin cross-reference tool,
which is called Darwin XRef.

00:35:07.800 --> 00:35:10.820
And what this can do is download
a property list from the

00:35:10.910 --> 00:35:14.270
OpenDarwin site or Apple site,
and these property lists will

00:35:14.270 --> 00:35:15.850
be hopefully available soon.

00:35:16.000 --> 00:35:20.990
There's an example one that is available
already with the tools for 10.3.4.

00:35:21.000 --> 00:35:24.610
And these property lists allow
you to look up what the particular

00:35:24.610 --> 00:35:31.560
source version is for any project
that's in Darwin that corresponds to,

00:35:31.560 --> 00:35:34.000
say, Mac OS 10.3.4, for example.

00:35:34.000 --> 00:35:37.000
You can also list what
projects that depends on.

00:35:37.000 --> 00:35:40.690
So in order to build CC tools,
we saw that we need to first

00:35:40.690 --> 00:35:44.340
have the headers of libstreams,
and that information is

00:35:44.400 --> 00:35:45.000
reflected in the Darwin XRef.

00:35:46.050 --> 00:35:48.030
So the Darwin XRef tool
is a very generic tool,

00:35:48.030 --> 00:35:51.600
and it's possible to ask that tool for
a list of those types of dependencies.

00:35:51.880 --> 00:35:55.580
And then another function that
the Darwin XRef tool has is the

00:35:55.580 --> 00:35:59.210
ability to cross-reference which
files are installed on disk with

00:35:59.210 --> 00:36:00.460
which project they came from.

00:36:00.610 --> 00:36:04.720
So for example,
if we see that streams.h is missing,

00:36:04.780 --> 00:36:07.360
We can run a little query
on the Darwin XRef tool,

00:36:07.360 --> 00:36:11.440
and it will report back that libstreams
is the project that that came from.

00:36:11.570 --> 00:36:14.540
And again, over time,
this information will be

00:36:14.540 --> 00:36:17.430
available for the Darwin projects.

00:36:17.550 --> 00:36:21.120
The Darwin build script is a script
that actually sets up the environment.

00:36:21.270 --> 00:36:26.710
It uses the Darwin XRef tool extensively
to get the correct source versions.

00:36:27.230 --> 00:36:29.060
sets up the environment for building.

00:36:29.320 --> 00:36:32.740
It also does a little bit of automatic
fetching of the dependencies.

00:36:32.740 --> 00:36:36.340
So if you don't have libstreams already,
it'll go look on the OpenDarwin

00:36:36.420 --> 00:36:39.280
site and try to download it,
for example.

00:36:39.370 --> 00:36:42.250
And it also helps automate
change-routed building,

00:36:42.300 --> 00:36:44.140
so it will create a directory.

00:36:44.140 --> 00:36:48.240
It'll load up all the routes that
are needed to change into there,

00:36:48.260 --> 00:36:51.360
change the route, perform the building in
that isolated environment,

00:36:51.360 --> 00:36:54.420
and then the building succeeds
to copy those files out of that

00:36:54.420 --> 00:36:59.790
isolated environment into a place
that's ready for you to use.

00:37:00.640 --> 00:37:03.910
So here's some example usages
of the Darwin XRef tool.

00:37:04.020 --> 00:37:09.260
And again, these tools are available at
darwinsource.opendarwin.org.

00:37:10.840 --> 00:37:14.010
Up top we have Darwin XRef
and we load the index.

00:37:14.010 --> 00:37:18.570
So we're taking build 7H63 was Mac OS X.

00:37:18.570 --> 00:37:21.700
It's a plist we downloaded
from the website.

00:37:21.710 --> 00:37:24.510
We load it into the Darwin XRef tool.

00:37:25.080 --> 00:37:26.690
Then we can do queries.

00:37:26.780 --> 00:37:31.700
The first example is asking what version
of the born shell was included in X.

00:37:31.700 --> 00:37:35.550
And it says that was source version 29.

00:37:35.710 --> 00:37:38.770
Next we can ask it to
find file streams.h.

00:37:38.960 --> 00:37:43.150
And it notes that libstreams project
installs a file that's in user

00:37:43.350 --> 00:37:46.700
local include streams streams.h.

00:37:46.700 --> 00:37:50.700
And finally we can ask it what are the
runtime dependencies for the born shell.

00:37:50.700 --> 00:37:54.700
And it knows that the
born shell requires libm,

00:37:54.700 --> 00:38:00.700
libsystem, cctools,
and the library in order to run.

00:38:00.700 --> 00:38:05.030
And there are other dependencies
which I don't have listed here.

00:38:06.220 --> 00:38:09.550
The Darwin build script, as I mentioned,
will download sources from

00:38:09.550 --> 00:38:11.900
the Darwin source website.

00:38:11.970 --> 00:38:14.160
So it automates that step for you.

00:38:14.230 --> 00:38:17.420
However, if you already have them
on your local system,

00:38:17.420 --> 00:38:18.340
it'll use those.

00:38:18.410 --> 00:38:22.540
Or if you're modifying the sources,
it checks the local system first.

00:38:22.600 --> 00:38:26.460
That's where you can put your
modified version and have it build.

00:38:26.890 --> 00:38:28.960
up the proper shell environment.

00:38:28.980 --> 00:38:32.680
It saves roots and the symbols
from a successful build in a

00:38:32.680 --> 00:38:37.540
directory hierarchy that's well
organized and ready to be used.

00:38:37.580 --> 00:38:41.130
And it also installs any dependencies
into a root before changing

00:38:41.130 --> 00:38:42.870
into it to perform the building.

00:38:42.880 --> 00:38:46.830
So a couple examples here,
we can install the header files that are

00:38:46.830 --> 00:38:52.770
associated with the kernel by issuing the
command darwin build dash headers XNU.

00:38:53.150 --> 00:38:56.410
To do the example we just went over,
we could have done darwin

00:38:56.440 --> 00:38:58.120
build dash headers libc.

00:38:58.240 --> 00:39:02.270
And another example is building
the standard C library,

00:39:02.270 --> 00:39:06.120
libc, in a change root,
and that's as simple as doing

00:39:06.120 --> 00:39:09.040
darwin build dash change root libc.

00:39:09.040 --> 00:39:12.860
So now I'm going to demo
those Darwin build tools.

00:39:13.070 --> 00:39:14.020
Thank you.

00:39:19.400 --> 00:39:21.170
So we already have our
build root directory.

00:39:21.300 --> 00:39:26.410
I'll get rid of that echo.

00:39:26.560 --> 00:39:30.640
So we already have our
build root disk image,

00:39:30.690 --> 00:39:33.060
but we don't need any of the
stuff that's already on it.

00:39:33.060 --> 00:39:35.290
So I'm just going to wipe it away.

00:39:45.600 --> 00:39:49.790
So what I'm going to do now is
install the Darwin build tools.

00:39:49.920 --> 00:39:54.600
So these are available on that
darwinsource.opendarwin.org site.

00:39:54.600 --> 00:40:03.470
And there's a README that is on the site
and also included in the TAR archive

00:40:03.470 --> 00:40:05.310
that explains how to set this up,
including creating the disk

00:40:05.310 --> 00:40:05.310
image and doing the installation.

00:40:07.040 --> 00:40:12.600
But I'm going to install this
onto that build root image.

00:40:12.660 --> 00:40:14.120
And here it creates some directories.

00:40:14.120 --> 00:40:19.660
It creates sources, objects, symbols,
headers, and roots, and logs.

00:40:19.770 --> 00:40:23.080
These are where the various results
of your building will be stored.

00:40:23.080 --> 00:40:26.280
So after sources are fetched
from the open Darwin site,

00:40:26.310 --> 00:40:28.220
they'll be stored in
the sources directory.

00:40:28.270 --> 00:40:32.500
After the build has finished,
the symbols go in the symbols directory.

00:40:32.540 --> 00:40:34.340
The headers go in the headers directory.

00:40:34.510 --> 00:40:36.000
The roots go in the roots directory.

00:40:36.000 --> 00:40:39.890
and the log of the build is
stored in the logs directory.

00:40:46.330 --> 00:40:52.010
The first thing we need to do is look
up the Darwin cross-reference tool.

00:40:52.430 --> 00:40:56.640
So I'll load that up with the sample
property list that's included.

00:40:56.640 --> 00:41:01.950
And you can see there are 313
projects listed in this property list.

00:41:07.610 --> 00:41:11.380
So as the example I gave,
we can ask for what the version of Bash,

00:41:11.430 --> 00:41:15.280
and it was Bash 29,
that's in the current system's build.

00:41:15.380 --> 00:41:18.390
If you have other plists that
are of different build numbers,

00:41:18.540 --> 00:41:24.770
it's possible to add extra arguments
to the Darwin cross-reference tool

00:41:24.770 --> 00:41:27.910
and have it consult one of those other
builds that might be different from

00:41:27.910 --> 00:41:27.910
the system that you're already on.

00:41:33.810 --> 00:41:38.100
So here,
we may want to build all of-- well,

00:41:38.100 --> 00:41:40.670
let's just do Bash, for example.

00:41:41.880 --> 00:41:43.990
You can see it's fetching the sources.

00:41:44.000 --> 00:41:45.350
It attempted to download them.

00:41:45.390 --> 00:41:46.600
It succeeded.

00:41:46.630 --> 00:41:50.180
And it's going through and
doing all the compiling.

00:41:50.490 --> 00:41:54.420
It prints out some information
about the local computer,

00:41:54.590 --> 00:41:57.850
such as what version of GCC is installed,
what version of the

00:41:58.050 --> 00:41:59.640
installer is installed.

00:41:59.670 --> 00:42:07.390
It also tells you what values it used to
set up the shell environment variables,

00:42:07.470 --> 00:42:11.450
what all the environment variables that
were currently set on the system are.

00:42:12.330 --> 00:42:18.530
What command it used to do the build,
and then it goes into a log.

00:42:18.600 --> 00:42:23.250
Here's configure,
and now it's actually going ahead

00:42:23.250 --> 00:42:25.540
and building some of these sources.

00:42:32.260 --> 00:42:34.960
So I'll kill the building there for time.

00:42:34.960 --> 00:42:36.360
But we can look in the logs.

00:42:36.360 --> 00:42:38.780
And sure enough, we have a log.

00:42:38.960 --> 00:42:44.760
This is the Bash project,
source version 29, attempt number one.

00:42:44.760 --> 00:42:46.730
All of that output that
I was just showing you has

00:42:46.810 --> 00:42:48.040
been saved into a log file.

00:42:48.040 --> 00:42:50.520
So you can go back and
review that at a later time.

00:42:50.620 --> 00:42:56.900
Now I'll give an example of
the change-rooted building.

00:43:02.100 --> 00:43:04.570
It has the ability to download
some of these pre-built

00:43:05.110 --> 00:43:08.530
routes from opendarwin.org,
but in the interest of time,

00:43:08.690 --> 00:43:16.930
I already have them on the local disk,
and I'll just copy them over from there.

00:43:17.050 --> 00:43:20.680
So this is a collection
of pre-built projects.

00:43:27.560 --> 00:43:29.560
Now,
the environment that's used to build is

00:43:29.570 --> 00:43:33.940
all stored in this Darwin build ENV file.

00:43:34.030 --> 00:43:36.940
And again, all these details are
available in the documentation

00:43:36.940 --> 00:43:39.460
associated with these tools.

00:43:40.010 --> 00:43:42.020
But since we'll be
building a Darwin project,

00:43:42.140 --> 00:43:46.030
let's say for fun,
that I want to enable the 386

00:43:46.520 --> 00:43:49.110
variants of the architecture.

00:43:49.900 --> 00:43:52.140
So here what I've done is I've
changed around the variables so

00:43:52.160 --> 00:43:57.060
that not just PowerPC is specified,
but also 386 is specified.

00:44:01.940 --> 00:44:03.900
And I can do a Darwin build.

00:44:03.930 --> 00:44:09.160
Now, by default, Mac OS X does not ship
a 386-labeled compiler,

00:44:09.290 --> 00:44:11.240
but it is part of Darwin.

00:44:11.350 --> 00:44:14.330
So to prove that we're
changing the route here,

00:44:14.470 --> 00:44:18.650
I'm going to compile Bash,
as we saw for 386 and PowerPC in

00:44:19.040 --> 00:44:21.410
this change-route environment.

00:44:21.580 --> 00:44:23.760
So what it's doing right now
is installing those routes,

00:44:23.760 --> 00:44:27.240
which can be downloaded from Open Darwin,
or as we see here,

00:44:27.240 --> 00:44:28.880
they're already cached on the system.

00:44:29.080 --> 00:44:32.500
And it's copying all of those
into the build root directory.

00:44:34.070 --> 00:44:40.910
So first it installs all the libraries
and binaries that the-- oops.

00:45:06.890 --> 00:45:08.040
Maybe I can give a different example.

00:45:08.040 --> 00:45:28.070
So as we can see here, at least, though,
the PowerPC and i386

00:45:28.070 --> 00:45:30.090
architectures were specified.

00:45:30.300 --> 00:45:34.550
It did compile those architectures
in the change root environment.

00:45:37.300 --> 00:45:39.100
Apparently,
I still need to work a little bit

00:45:39.130 --> 00:45:42.700
more on specifying the dependencies
in the property list file.

00:45:42.740 --> 00:45:44.140
But if we look in the
build root directory,

00:45:44.140 --> 00:45:48.400
you can see it's a mini version of
the redirect that you might expect

00:45:48.400 --> 00:45:54.150
with directories like bin and sbin,
user, applications, developer, et cetera.

00:45:54.150 --> 00:45:59.630
And also, as I mentioned with mounting
the developer file system,

00:45:59.880 --> 00:46:03.410
devfs is, or the device file system,
sorry,

00:46:03.430 --> 00:46:07.170
devfs is in that change root environment.

00:46:07.200 --> 00:46:08.300
Amen.

00:46:08.590 --> 00:46:13.000
So that's the demo I have
of the Darwin build tools.

00:46:13.020 --> 00:46:15.530
I'll be going back to the slides.

00:46:16.500 --> 00:46:20.220
I'm now talking about
creating a bootable CD.

00:46:20.450 --> 00:46:24.640
So it's possible to collect
the Darwin projects,

00:46:24.660 --> 00:46:28.910
install them onto a disk image,
and then burn the disk image and

00:46:28.910 --> 00:46:31.340
boot your computer from that.

00:46:32.460 --> 00:46:36.300
For the sake of simplicity,
I'll be talking about using the

00:46:36.300 --> 00:46:40.890
HDI utilities to burn the CD,
which can only be done on Mac OS X.

00:46:40.900 --> 00:46:43.760
There are steps for doing this on Darwin,
which you'll be able to find

00:46:43.760 --> 00:46:45.950
on the Open Darwin site.

00:46:46.200 --> 00:46:53.700
The first step is to create a
CD image using the HDI utility,

00:46:53.700 --> 00:46:57.010
and that shows up as
an icon on the finder.

00:46:57.300 --> 00:46:59.880
Then you want to copy over
the various projects that are

00:46:59.880 --> 00:47:02.560
needed to boot the computer.

00:47:02.850 --> 00:47:04.970
Few finishing touches
that need to be done,

00:47:04.970 --> 00:47:10.000
which I'll go over,
include choosing a BLEST directory,

00:47:10.000 --> 00:47:15.420
which helps the open firmware on
the computer boot from the CD,

00:47:15.590 --> 00:47:19.940
as well as creating the text cache,
which all of the

00:47:19.940 --> 00:47:22.220
dependencies of the kernel .

00:47:22.520 --> 00:47:25.630
And finally, you'll burn the CD image.

00:47:25.960 --> 00:47:31.130
So the first step in creating a
bootable CD is to use HDIutil.

00:47:31.280 --> 00:47:34.370
In this example,
I'm creating a 650 megabyte

00:47:34.850 --> 00:47:38.930
disk image on an HFS partition.

00:47:39.350 --> 00:47:42.390
I've given it a volume name of Darwin.

00:47:42.630 --> 00:47:48.440
And this will do the normal
process of creating a disk image.

00:47:48.450 --> 00:47:49.470
And then we can attach it.

00:47:49.660 --> 00:47:52.300
And that's when the icon
will show up on the desktop,

00:47:52.300 --> 00:47:55.430
and you can change into the
directory from terminal.app,

00:47:55.430 --> 00:47:56.160
et cetera.

00:47:56.600 --> 00:48:00.100
It's important to set the ownership
of this new volume to root wheel.

00:48:00.210 --> 00:48:03.170
Again, if we're going to be copying
a bunch of files into it,

00:48:03.220 --> 00:48:05.340
you want the right default permissions.

00:48:05.640 --> 00:48:08.840
So start off with root wheel,
and do all the copying as root,

00:48:08.840 --> 00:48:12.490
so that all the ownership
can be transferred.

00:48:13.960 --> 00:48:18.100
You can use the ditto command
to do the actual copying.

00:48:18.260 --> 00:48:20.830
It's important to copy
the files project first.

00:48:21.040 --> 00:48:25.760
That project is what has the directory
hierarchy of a Mac OS X system.

00:48:25.880 --> 00:48:28.860
It's what creates the user directory,
or the bin directory,

00:48:28.860 --> 00:48:30.550
or the applications directory.

00:48:30.720 --> 00:48:32.360
And so it's a good base to lay down.

00:48:32.420 --> 00:48:35.280
And then all the other projects
will start filling in those

00:48:35.390 --> 00:48:38.850
directories with their executables
and with their libraries.

00:48:39.210 --> 00:48:44.040
It's important to copy the kernel, bootX,
which is the bootloader,

00:48:44.040 --> 00:48:48.830
libm is the standard math library,
libsystem, cctools,

00:48:48.880 --> 00:48:55.290
which includes the dynamic linker,
startup, the ncurses library, bash,

00:48:55.290 --> 00:48:59.940
so you have a shell once you've booted,
various file commands such as cp, rm,

00:48:59.940 --> 00:49:04.760
the ones that you're used to,
shell commands, and the list goes on.

00:49:06.230 --> 00:49:09.120
This will change for release to
release as things move around.

00:49:09.120 --> 00:49:13.370
We'll try to keep some information
about it on the OpenDarwin site,

00:49:13.380 --> 00:49:16.740
but these are really the core
projects that for any release you

00:49:16.740 --> 00:49:18.800
absolutely need to have on the CD.

00:49:18.800 --> 00:49:22.350
Again, there are others that you probably
need to have or will want to have

00:49:22.580 --> 00:49:24.400
on your CD to make it more useful.

00:49:27.990 --> 00:49:30.390
So the next step is
to bless the CD image.

00:49:30.580 --> 00:49:34.130
It's a command line tool called Bless,
which has an excellent man page,

00:49:34.130 --> 00:49:36.290
so I suggest reading that.

00:49:36.330 --> 00:49:42.900
And what that does is it sets a special
bit on the CD that lets OpenFlare know

00:49:42.900 --> 00:49:47.260
that this is a CD that can be booted,
and this is the bootloader

00:49:47.260 --> 00:49:48.360
that should be used.

00:49:48.420 --> 00:49:51.410
So in this example,
we will bless the folder

00:49:51.410 --> 00:49:53.880
that's the Courses folder,
and that's where

00:49:53.880 --> 00:49:57.890
BootX installs its image.

00:50:00.110 --> 00:50:04.170
We also specify a label is actually
the name that appears on open source.

00:50:04.230 --> 00:50:06.980
It's a little image
that's pre-calculated.

00:50:06.980 --> 00:50:11.000
When you do a partition,
if you set the label up, it's

00:50:11.540 --> 00:50:15.410
"An easy to read name when you
hold down on your computer to

00:50:15.410 --> 00:50:18.210
decide what you want to boot from."

00:50:26.040 --> 00:50:28.840
The first step is to
generate the mkext cache.

00:50:29.070 --> 00:50:33.670
The cache is basically
pre-computing all of

00:50:34.000 --> 00:50:59.000
[Transcript missing]

00:50:59.300 --> 00:51:05.200
[Transcript missing]

00:51:06.950 --> 00:51:14.600
may report a few missing dependencies
or some things of that nature.

00:51:14.960 --> 00:51:20.430
This is a normal,
so one or two extensions of the

00:51:21.060 --> 00:51:22.240
Don't worry too much.

00:51:22.280 --> 00:51:27.010
a large of it, and then perhaps something
important is missing.

00:51:27.580 --> 00:51:30.910
And generally what you'll want
is you'll have a similar set of

00:51:30.940 --> 00:51:36.260
extensions in this folder as well
as what you're using to boot the...

00:51:40.030 --> 00:51:45.400
I also want to create a
startup script by default,

00:51:45.400 --> 00:51:45.400
these Darwin

00:51:45.500 --> 00:51:53.500
[Transcript missing]

00:51:55.000 --> 00:52:01.000
[Transcript missing]

00:52:01.660 --> 00:52:06.710
"What you want to do is have a
little basic commands and drop

00:52:08.800 --> 00:52:22.300
[Transcript missing]

00:52:23.200 --> 00:52:31.800
[Transcript missing]

00:52:32.420 --> 00:52:38.120
I assume that it does.

00:52:38.120 --> 00:52:38.120
If it doesn't,
different instruction on that.

00:52:39.100 --> 00:52:48.170
So here what we can do is we can
make a directory called which

00:52:48.170 --> 00:52:49.910
lets script as an installer CD.

00:52:51.870 --> 00:53:00.760
at CECD,
which go and execute that file startup.

00:53:00.770 --> 00:53:05.550
And we have the opportunity,
which will put us into the .

00:53:06.410 --> 00:53:12.120
And that's really all
I wanted to do today.

00:53:12.600 --> 00:53:17.900
[Transcript missing]

00:53:21.770 --> 00:53:29.570
For more information,
contact Jason Williams,

00:53:29.570 --> 00:53:29.570
the CSI's IT manager.

00:53:31.300 --> 00:53:50.800
[Transcript missing]