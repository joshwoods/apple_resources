WEBVTT

00:00:12.150 --> 00:00:15.030
Good morning everyone,
this is session 318,

00:00:15.030 --> 00:00:17.000
Using Xcode for Java Development.

00:00:17.000 --> 00:00:20.730
Please welcome Ted Jucevic,
Java Engineer.

00:00:27.000 --> 00:00:29.000
Let's see, where is that clicker?

00:00:29.000 --> 00:00:31.100
There it is.

00:00:31.100 --> 00:00:35.060
So,
welcome to Xcode for Java Development.

00:00:35.120 --> 00:00:38.230
Wednesday morning,
halfway through the week,

00:00:38.250 --> 00:00:40.340
ready to get going.

00:00:40.530 --> 00:00:42.870
So, why are you here?

00:00:43.210 --> 00:00:47.260
Basically,
if you do Java development on Mac OS X,

00:00:47.260 --> 00:00:49.980
and you want to learn more
about the tools that we provide,

00:00:50.100 --> 00:00:55.000
if you want to know how Xcode
can help you do Java development,

00:00:55.060 --> 00:00:59.580
and if you want to know what's
new in Xcode for Java development.

00:00:59.620 --> 00:01:03.780
Those are the questions that we're going
to try and address at this session.

00:01:04.160 --> 00:01:10.690
So, more specifically,
what are we going to talk about?

00:01:10.710 --> 00:01:10.710
Well, as you know, I'm going

00:01:10.890 --> 00:01:14.240
There's been lots of Xcode updates.

00:01:14.240 --> 00:01:16.560
We're going to talk
about code completion,

00:01:16.560 --> 00:01:20.070
which is something new
for Java and Xcode.

00:01:20.200 --> 00:01:24.290
We're also including Ant now
with your Xcode distributions,

00:01:24.360 --> 00:01:27.780
and so we're going to be
kind of going into that.

00:01:27.780 --> 00:01:31.840
It's a direction we're moving in.

00:01:32.770 --> 00:01:38.180
There's an application developer preview
that will allow you to do a lot of

00:01:38.180 --> 00:01:40.920
J2EE development on your client machine.

00:01:40.920 --> 00:01:47.120
We're going to talk briefly about that,
and then of course the Java 142 update.

00:01:48.280 --> 00:01:54.920
We're also going to go into detail
about actually doing builds with Xcode.

00:01:55.100 --> 00:02:00.330
and David And then also debugging and
then finalize with our 1.5 and talk

00:02:00.330 --> 00:02:05.640
about what you need to do to actually
do development with that in Xcode

00:02:05.640 --> 00:02:12.000
because it's not completely there yet
but it's very easy to get working.

00:02:12.000 --> 00:02:13.760
So what is Xcode?

00:02:13.760 --> 00:02:15.450
Actually this all should just be review.

00:02:15.540 --> 00:02:21.010
By this point in the week
you don't know what Xcode is.

00:02:21.440 --> 00:02:24.400
Well, we'll show it to you.

00:02:24.400 --> 00:02:31.400
So C++, C, Objective-C, AppleScript,
Java, IDE, full Java debugger,

00:02:31.400 --> 00:02:39.560
GDB integration, AppleScript debugger,
included with every Mac OS X.

00:02:39.560 --> 00:02:43.470
Updates available, of course,
from connect.apple.com.

00:02:44.400 --> 00:02:50.420
We are also introducing
previews for this week:

00:02:50.420 --> 00:02:54.120
1.5 and 2.0.

00:02:54.120 --> 00:02:54.120
The 1.5 is for Panther,
the 2.0 is for Tiger.

00:02:54.570 --> 00:02:56.550
Dave Ewings will actually
go into a little bit of the

00:02:56.550 --> 00:02:58.630
differences a little bit later on.

00:02:58.680 --> 00:03:02.200
And like I said earlier,
those are both available

00:03:02.200 --> 00:03:04.700
from connect.apple.com.

00:03:05.290 --> 00:03:08.590
So at this point,
let me bring up Dave Ewing and give

00:03:08.590 --> 00:03:12.460
him to show you a demo of CodeSense.

00:03:12.610 --> 00:03:14.410
Here's Dave Ewing.

00:03:16.210 --> 00:03:17.180
Thanks.

00:03:17.180 --> 00:03:19.020
Good morning.

00:03:19.020 --> 00:03:24.080
So, Codesense actually is one of the
big things new in Xcode this year.

00:03:24.080 --> 00:03:28.030
We've had Codesense in some
form for quite some time.

00:03:28.040 --> 00:03:31.490
The best support, of course,
has been in Objective-C and C++,

00:03:31.770 --> 00:03:34.310
but now we're bringing
some new stuff along.

00:03:34.480 --> 00:03:36.340
To you Java developers.

00:03:36.340 --> 00:03:40.120
So CodeSense is actually
a group of technologies.

00:03:40.120 --> 00:03:42.560
It's used for class browsing.

00:03:42.560 --> 00:03:46.550
We have a Symbol smart
group in the main window.

00:03:46.970 --> 00:03:49.470
There's a number of
navigation capabilities that

00:03:49.470 --> 00:03:51.130
are provided by CodeSense.

00:03:51.260 --> 00:03:54.940
And of course,
new is code completion for Java.

00:03:59.070 --> 00:04:01.500
So CodeSense is based on indexing.

00:04:01.500 --> 00:04:06.800
Now, indexing has gotten a bad rap with
Xcode for Java for a little while here.

00:04:06.860 --> 00:04:09.090
We've improved the speed quite a bit.

00:04:09.500 --> 00:04:16.520
Indexing the system JDK classes is about
10 times faster than it was in Xcode 1.2,

00:04:16.520 --> 00:04:19.410
so you'll definitely notice
that speed difference.

00:04:19.540 --> 00:04:23.770
And in fact, indexing of source files
happens on another thread,

00:04:23.770 --> 00:04:26.670
not on the main thread,
so it won't get in your way

00:04:26.670 --> 00:04:28.980
while you're editing your files.

00:04:30.610 --> 00:04:35.680
It's also important to know that
CodeSense is something that's used by the

00:04:35.680 --> 00:04:42.740
Java portions of Xcode for the debugger
and also for the Jam-based build system.

00:04:42.740 --> 00:04:46.560
The debugger uses it so that it can
actually get the correspondence between

00:04:46.560 --> 00:04:50.360
class files that are running and the
source files that you're editing.

00:04:50.690 --> 00:04:56.580
And the build system uses it to
get dependency information so that

00:04:56.580 --> 00:04:56.580
it can speed up your build times.

00:04:59.990 --> 00:05:02.340
So code completion,
I think if you guys are Java developers,

00:05:02.430 --> 00:05:05.900
you've seen code completion
on a number of IDEs.

00:05:05.900 --> 00:05:10.440
It allows you to automatically suggest
a completion based on the current

00:05:10.440 --> 00:05:12.460
context that you're editing in.

00:05:12.740 --> 00:05:18.130
In Xcode, you can bring it up on demand,
or you can have it automatically come up.

00:05:19.280 --> 00:05:22.720
You can have it limit the list
that comes up to only those that

00:05:23.010 --> 00:05:24.940
match what you've typed so far.

00:05:24.940 --> 00:05:28.640
That's something that's a little
different from other IDE implementations,

00:05:28.680 --> 00:05:32.200
something that I personally
like quite a bit.

00:05:32.260 --> 00:05:36.440
And when you insert method calls,
it'll insert placeholder strings

00:05:36.440 --> 00:05:38.270
for each of the arguments.

00:05:42.610 --> 00:05:45.260
So as I said, the Java support for
code completion is new.

00:05:45.260 --> 00:05:50.480
We actually had some completion there in,
well, 1.1 and 1.2,

00:05:50.480 --> 00:05:53.120
but it was based on only the
words in the current file,

00:05:53.120 --> 00:05:55.940
so a little helpful,
not quite what you're used to.

00:05:55.960 --> 00:06:01.200
The preview is here at the
conference in both Xcode 1.5 and 2.0.

00:06:01.200 --> 00:06:03.170
There are some known limitations.

00:06:03.240 --> 00:06:04.520
It's not done yet.

00:06:04.570 --> 00:06:05.920
It's definitely a preview.

00:06:05.920 --> 00:06:10.070
It's actually a little bit
more stable in the 1.5 release

00:06:10.080 --> 00:06:13.040
than it is in the 2.0 release,
just because everything around

00:06:13.040 --> 00:06:14.240
it is a little more stable.

00:06:14.240 --> 00:06:19.050
So with that,
we still want to know what you like

00:06:19.130 --> 00:06:20.280
and what you don't like about it.

00:06:20.550 --> 00:06:23.800
You're certainly welcome to tell
us about some of the limitations

00:06:23.810 --> 00:06:25.860
you see while using it,
although I swear we do

00:06:25.860 --> 00:06:27.190
know about some of them.

00:06:27.200 --> 00:06:28.220
It's not a surprise.

00:06:28.220 --> 00:06:29.060
We know we're not done.

00:06:29.060 --> 00:06:33.940
With that, I'm going to do a little
demonstration of CodeSense.

00:06:37.810 --> 00:06:42.940
So let's bring up Xcode here.

00:06:42.940 --> 00:06:44.600
And just create a new swing application.

00:06:44.970 --> 00:06:53.030
Let's see, new project.

00:06:53.340 --> 00:06:54.080
And there we go.

00:07:05.800 --> 00:07:08.600
Okay, there's one issue here.

00:07:08.600 --> 00:07:10.850
This is Xcode 1.2.

00:07:13.320 --> 00:07:16.060
So Ted,
did you know that Xcode 1.2 is on there?

00:07:16.060 --> 00:07:17.180
Can we switch over to this machine?

00:07:17.180 --> 00:07:18.770
I'll do a demo on Tiger.

00:07:18.830 --> 00:07:20.710
It's a little less stable here,
which is why I wanted

00:07:20.710 --> 00:07:24.160
to do it on Panther,
but we'll go ahead and bring

00:07:24.230 --> 00:07:26.990
up Xcode and show this here.

00:07:32.100 --> 00:07:33.050
So, new project.

00:07:33.090 --> 00:07:39.140
Yeah, can you switch demo machines,
please?

00:07:39.140 --> 00:07:41.860
Over to the demo one here?

00:07:42.330 --> 00:07:45.340
Sorry to change my mind on you.

00:07:57.450 --> 00:08:00.400
Okay, so we have a new project here.

00:08:00.430 --> 00:08:02.050
Well, that's good.

00:08:02.140 --> 00:08:04.890
At least you guys can see it.

00:08:04.900 --> 00:08:08.450
So, there's the groups and file
list over here on the left,

00:08:08.520 --> 00:08:12.270
stuff you've seen before,
and a list of what's selected shows

00:08:12.330 --> 00:08:14.680
up on the right in the detail view.

00:08:14.680 --> 00:08:18.510
The first thing I want to show you
is the project symbols smart group.

00:08:18.710 --> 00:08:23.100
So a smart group is something
in Xcode that gets its contents

00:08:23.100 --> 00:08:25.750
dynamically from the project itself.

00:08:25.950 --> 00:08:28.550
In this case,
the project symbol smart group

00:08:28.600 --> 00:08:32.010
shows you the symbols that have
been indexed in your project.

00:08:32.140 --> 00:08:36.960
Only the stuff in your project,
it doesn't show anything that's

00:08:36.960 --> 00:08:40.930
brought in from frameworks
or from the system JDK.

00:08:41.250 --> 00:08:44.820
Okay, so we can go ahead and
bring up an editor here,

00:08:44.820 --> 00:08:48.870
and you can click around on it,
and of course take you to the

00:08:48.870 --> 00:08:51.360
location you're looking for.

00:08:51.360 --> 00:08:53.230
And you can filter.

00:08:53.740 --> 00:08:56.420
So you can say, "Oh,
let's search for any symbol that

00:08:56.430 --> 00:09:01.120
has the word 'about' in it." And it
shows you that all right away.

00:09:01.610 --> 00:09:06.170
Another thing in Xcode,

00:09:07.010 --> 00:09:10.070
is that you can command-double-click
on words in your file to

00:09:10.070 --> 00:09:12.780
quickly navigate between them.

00:09:14.310 --> 00:09:18.700
Now I command-double-clicked there,
and of course there are quite a few

00:09:18.810 --> 00:09:21.540
classes that implement set-resizable.

00:09:21.540 --> 00:09:24.400
So let's go ahead to the
dialog version of that.

00:09:24.400 --> 00:09:29.080
So this is something also
that's new in Xcode 1.5 and 2.0.

00:09:29.080 --> 00:09:32.130
We have the system
classes indexed for you,

00:09:32.190 --> 00:09:34.700
but we wouldn't show you
any of their contents.

00:09:34.700 --> 00:09:37.820
So here we're showing you
a dump of the class file,

00:09:37.820 --> 00:09:39.840
and you can move around it.

00:09:39.840 --> 00:09:42.920
It only shows you essentially the APIs.

00:09:42.920 --> 00:09:48.200
It doesn't show you a dump
of the bytecode or decompile.

00:09:48.220 --> 00:09:51.510
But it does give you an
idea of what APIs are there.

00:09:52.660 --> 00:09:54.900
Okay, with that,
let's go ahead and bring up the

00:09:55.020 --> 00:09:56.900
class browser for this project.

00:09:56.900 --> 00:09:58.460
It takes a second.

00:09:58.460 --> 00:10:02.230
There's actually quite a
lot of classes in here,

00:10:02.390 --> 00:10:03.820
as you guys know.

00:10:05.530 --> 00:10:06.490
What's that?

00:10:06.490 --> 00:10:07.970
Oh, there we go.

00:10:08.080 --> 00:10:11.260
Sorry about that.

00:10:11.260 --> 00:10:19.450
So it's got all the JDK classes in here,
and you can click around between them.

00:10:19.800 --> 00:10:22.080
You can of course limit
what you're looking at.

00:10:22.100 --> 00:10:24.190
So I only care about the
classes in this project.

00:10:24.280 --> 00:10:29.330
I'm going to close this and then
option click on the twisty triangle,

00:10:29.330 --> 00:10:34.220
and it shows all the classes in
your project in the hierarchy.

00:10:34.220 --> 00:10:40.280
One nice thing, you can also look at all
the classes in a flat view.

00:10:40.280 --> 00:10:41.540
This of course takes a second.

00:10:41.540 --> 00:10:44.710
I forget how many thousands
of classes there are here,

00:10:44.860 --> 00:10:46.320
but there's many, many, many.

00:10:46.840 --> 00:10:49.760
And if we were to click on one of those
and wanted to see where it appeared

00:10:49.760 --> 00:10:53.600
in the hierarchy—I don't know if this
is a particularly interesting one that

00:10:53.600 --> 00:10:57.050
I've clicked on—one thing you can do
is just switch back to the hierarchy

00:10:57.160 --> 00:10:59.490
view and it'll keep that selected.

00:10:59.580 --> 00:11:01.710
It's down there at the bottom.

00:11:01.900 --> 00:11:12.400
[Transcript missing]

00:11:15.430 --> 00:11:17.820
Let's go ahead and close
up the class browser.

00:11:17.820 --> 00:11:20.560
Well,
I'm going to do a little editing here,

00:11:20.690 --> 00:11:25.700
but what I want to do—this is
a standard Swing application.

00:11:26.380 --> 00:11:29.350
Go ahead and run it, just to show,
you know,

00:11:29.390 --> 00:11:31.770
it brings up the standard stuff.

00:11:31.810 --> 00:11:36.280
It's got a preference box,
which is kind of boring.

00:11:36.670 --> 00:11:39.540
I'm going to change the
preference box a little,

00:11:39.660 --> 00:11:41.600
and I'll show you code
completion while I'm doing that.

00:11:41.600 --> 00:11:45.320
Let's just see what symbols
have to do with preferences,

00:11:45.320 --> 00:11:46.680
and they come up.

00:11:46.680 --> 00:11:50.890
The first thing I'll do is preferences
is the method in the application

00:11:50.940 --> 00:11:57.780
that brings up the preferences box,
and I want to tell it to change its font.

00:11:57.780 --> 00:11:59.310
I'm going to say "prefs

00:11:59.900 --> 00:12:03.670
And if you hit option escape,
it'll bring up a list for

00:12:03.670 --> 00:12:05.740
you of what's available.

00:12:05.740 --> 00:12:10.680
And it turns out that it knows about
the instance variable prefs there,

00:12:10.870 --> 00:12:13.560
which is of type prefpane.

00:12:13.560 --> 00:12:17.520
Go ahead and hit tab to complete that.

00:12:21.300 --> 00:12:22.460
How do you use that zoom feature?

00:12:22.460 --> 00:12:26.380
Actually, you know what,
I can do something almost as good.

00:12:26.390 --> 00:12:30.200
Let's go ahead and make
that a little bit bigger.

00:12:30.200 --> 00:12:37.960
And the text size—boy, that is small,
isn't it?

00:12:43.190 --> 00:12:44.100
Is that a little better?

00:12:44.170 --> 00:12:47.380
Yeah, sorry about that.

00:12:47.380 --> 00:12:51.410
Okay, so where was I?

00:12:51.410 --> 00:12:51.410
Preferences.

00:12:53.210 --> 00:12:55.980
Okay, and actually while I do this,
let's go ahead into the preferences and

00:12:55.980 --> 00:13:04.340
show you quickly under the navigation,
there's options to automatically suggest.

00:13:04.400 --> 00:13:07.880
I'm going to turn on the
automatically suggest option here.

00:13:08.290 --> 00:13:10.620
since that's actually the way
I work and I prefer it that way.

00:13:10.620 --> 00:13:13.720
So as you start to type,
it'll underline the text

00:13:13.720 --> 00:13:14.610
that you've typed in.

00:13:14.610 --> 00:13:16.480
It says,
"I know that there's something that

00:13:16.480 --> 00:13:20.280
can be completed." And the underline
is that clue that there's something

00:13:20.280 --> 00:13:22.990
there and that it's ambiguous.

00:13:23.010 --> 00:13:25.640
It doesn't know what is next.

00:13:25.760 --> 00:13:31.720
But if I type a little bit more, it says,
"Oh, the only symbol that's next that

00:13:31.720 --> 00:13:36.020
has an F after it also has an O."
And you can bring up the list,

00:13:36.020 --> 00:13:37.260
of course, and see.

00:13:37.260 --> 00:13:40.640
So there's set focusable and
quite a few other routines there.

00:13:40.640 --> 00:13:41.640
But I'm going to do a set font.

00:13:41.790 --> 00:13:46.500
And if I hit tab and complete it,
it inserts a little placeholder there

00:13:46.500 --> 00:13:48.730
that tells you the type of the argument.

00:13:49.110 --> 00:13:52.800
So I also know that there's--.

00:13:52.930 --> 00:13:57.950
A font instance variable there, too.

00:13:59.850 --> 00:14:01.940
And let's go ahead into
the preference pane itself,

00:14:02.020 --> 00:14:03.800
and we need to add a new method.

00:14:03.800 --> 00:14:05.700
It turns out if you just
set the font on the pane,

00:14:05.700 --> 00:14:08.680
that won't affect the text inside it,
so we need to go in there too.

00:14:08.860 --> 00:14:15.760
So we'll just click on one of those
and start adding a new method there.

00:14:17.150 --> 00:14:20.260
So it knows public and
just continue on here.

00:14:20.260 --> 00:14:27.780
We'll add set font and type font and
just give it an argument named F.

00:14:33.860 --> 00:14:44.350
And for this, we'll call the super
class version of set font.

00:14:44.350 --> 00:14:44.350
Let's go ahead and—oh,

00:14:54.980 --> 00:14:58.260
Wow, see this is why I didn't
want to do it on Tiger.

00:14:58.260 --> 00:15:02.830
So there is an issue here, unfortunately.

00:15:03.900 --> 00:15:19.600
[Transcript missing]

00:15:20.200 --> 00:15:32.000
[Transcript missing]

00:15:32.980 --> 00:15:38.240
Let's see,
talk about one more thing in Xcode.

00:15:38.500 --> 00:15:39.940
Showing that demo is not that amazing.

00:15:39.940 --> 00:15:44.480
I mean, it does actually set the
preferences and change the style.

00:15:45.370 --> 00:15:52.590
So the last thing I want to tell you
about is index templates in Xcode.

00:15:53.720 --> 00:15:56.880
In order to speed up indexing
even more—so we've made indexing

00:15:56.880 --> 00:16:00.100
ten times faster for indexing
your system class files—well,

00:16:00.100 --> 00:16:03.090
you can actually get rid of the
time to index that all together,

00:16:03.110 --> 00:16:06.000
and that's done using a
feature called index templates.

00:16:06.160 --> 00:16:08.800
And they're not set up for
you by default on the machine,

00:16:09.020 --> 00:16:11.100
but they are documented in there.

00:16:11.100 --> 00:16:12.000
It's very easy to do.

00:16:12.000 --> 00:16:15.440
It's just running one
command line application that

00:16:15.440 --> 00:16:16.800
will set them up for you.

00:16:16.980 --> 00:16:23.990
And the instructions for doing
that are down inside developer.

00:16:24.290 --> 00:16:27.130
Extras, Xcode templates.

00:16:27.160 --> 00:16:28.600
Oh, it's Tiger, that's right.

00:16:28.600 --> 00:16:32.260
Were you going to say use Spotlight?

00:16:40.140 --> 00:16:43.240
Anyhow, so they're inside Xcode
index templates here.

00:16:43.240 --> 00:16:47.230
Yeah, we're not showing off spotlight,
right?

00:16:48.610 --> 00:16:50.350
And these instructions
tell you how to set it up.

00:16:50.420 --> 00:16:51.000
It's very easy.

00:16:51.000 --> 00:16:52.940
It takes a couple of minutes
for it to index everything.

00:16:52.940 --> 00:16:55.490
It sets up index templates
not just for Java,

00:16:55.490 --> 00:17:00.440
but also for Cocoa project
types and Carbon project types.

00:17:00.570 --> 00:17:04.970
So what that does is that
when you create a new project,

00:17:04.970 --> 00:17:09.020
it'll instantly index
all of the system files.

00:17:09.190 --> 00:17:11.480
You don't have to do it every
time you create a new project.

00:17:11.500 --> 00:17:14.630
And when you rebuild your index,
if you were to do that,

00:17:14.630 --> 00:17:18.430
which you shouldn't need to do nearly
as much as you did in the past,

00:17:18.490 --> 00:17:22.490
then that is sped up quite a bit, too.

00:17:22.500 --> 00:17:25.480
Okay, with that,
I think we'll bring it back to Ted here.

00:17:25.500 --> 00:17:27.500
Thank you very much, Dave.

00:17:27.500 --> 00:17:28.500
Okay.

00:17:37.280 --> 00:17:42.120
Ant is very important to the
Java environment and it's a

00:17:42.120 --> 00:17:45.960
great build system for Java.

00:17:45.960 --> 00:17:48.750
Up to this point,
we've been focusing mainly

00:17:48.750 --> 00:17:50.560
on the Jam build system.

00:17:50.560 --> 00:17:55.880
With the addition of Ant into
the Xcode 1.5 and 2.0,

00:17:55.880 --> 00:17:55.880
the Xcode is a great way
to build a Java system.

00:17:56.340 --> 00:17:59.110
We're not abandoning
the Jam stuff at all,

00:17:59.130 --> 00:18:02.300
so you don't have to scramble
and move your stuff over.

00:18:02.320 --> 00:18:05.160
We're just providing options.

00:18:05.160 --> 00:18:10.280
So in addition with this Ant,
you get a bunch of templates,

00:18:10.280 --> 00:18:15.940
an empty project, one for building a jar,
and one for building an application jar,

00:18:15.940 --> 00:18:18.540
so one with manifest and all that.

00:18:18.540 --> 00:18:22.700
The Ant that comes is 1.6.1,
the latest release,

00:18:22.700 --> 00:18:26.470
and you target it using an
external build environment.

00:18:26.480 --> 00:18:29.560
One thing to note,
we actually discovered another

00:18:29.560 --> 00:18:32.790
issue while we were quickly
trying to get this out,

00:18:32.790 --> 00:18:37.230
and that the 1.6.1 that we have
and we're distributing is actually

00:18:37.930 --> 00:18:40.580
missing a few of the components.

00:18:40.900 --> 00:19:03.900
[Transcript missing]

00:19:06.030 --> 00:19:11.210
So,
the application developer server preview.

00:19:11.600 --> 00:19:13.870
This includes JBoss.

00:19:14.500 --> 00:19:18.560
It's actually the final
candidate version of it,

00:19:18.720 --> 00:19:21.840
or the release candidate
version actually.

00:19:21.840 --> 00:19:28.400
It includes Tomcat, xDoclet,
and also an older version of Ant.

00:19:28.400 --> 00:19:32.000
The older version of Ant is actually
installed in a different location.

00:19:32.000 --> 00:19:36.800
This version will be going away and
we're going to be using the new one

00:19:36.810 --> 00:19:40.700
in the 1.6 from the Xcode install.

00:19:40.700 --> 00:19:43.910
Maybe the templates point to the
old one because this actually

00:19:44.100 --> 00:19:47.930
came out before our Xcode updates.

00:19:48.000 --> 00:19:51.090
Just continue using it and at
some point you may just need to

00:19:51.090 --> 00:19:55.030
switch your build file if you're
using one of those templates,

00:19:55.030 --> 00:19:57.000
but it's pretty easy to do.

00:19:57.000 --> 00:20:01.940
This is also available in the developer
tools section of connect.apple.com.

00:20:01.940 --> 00:20:06.710
One of the things that we like to do
is do demonstration of how easy it is

00:20:06.710 --> 00:20:09.840
to do servlets and J2EE applications.

00:20:09.840 --> 00:20:10.680
Okay.

00:20:10.680 --> 00:20:16.530
We're actually doing a demo of
this in building your website

00:20:16.530 --> 00:20:18.410
on Apple computer later.

00:20:18.420 --> 00:20:21.240
I think it's Thursday afternoon.

00:20:22.600 --> 00:20:28.690
So the application server in Xcode,
the web modules is one of the

00:20:28.690 --> 00:20:30.740
templates that's installed.

00:20:30.740 --> 00:20:32.710
That's essentially a servlet.

00:20:32.780 --> 00:20:37.350
EJB module for doing Java bean,
and of course the enterprise application.

00:20:37.400 --> 00:20:41.310
All those templates are
included in that update.

00:20:42.170 --> 00:20:45.710
One of the cool things about this is
that when you install this server update,

00:20:45.940 --> 00:20:49.680
it installs in a location that's
the same location as if you're

00:20:49.680 --> 00:20:52.600
deploying on XServe with 10 servers.

00:20:52.600 --> 00:20:59.280
So if you build and set up everything
on your client machine using this,

00:20:59.400 --> 00:21:01.750
you can then deploy to XServe
without having to worry about

00:21:01.760 --> 00:21:04.590
any directory configuration
stuff or anything like that.

00:21:04.700 --> 00:21:06.600
It's actually very easy.

00:21:06.600 --> 00:21:09.240
Of course,
you can deploy to any platform, you know,

00:21:09.240 --> 00:21:10.750
portable ant targets and all that.

00:21:10.800 --> 00:21:14.600
So it's actually something
really cool to check out.

00:21:14.820 --> 00:21:19.200
Additionally, we came out with the
1.4.2 update for Xcode.

00:21:19.370 --> 00:21:21.800
This includes JNI headers,
stuff like that.

00:21:21.800 --> 00:21:27.390
So if you had, like,
the 1.2 installed Xcode,

00:21:27.390 --> 00:21:32.140
and you update to 1.4.2,
and it'll send you JNI libraries

00:21:32.200 --> 00:21:35.090
when your building breaks,
just download this 1.4.2 update,

00:21:35.170 --> 00:21:37.160
and you'll get all the
headers and all that.

00:21:37.250 --> 00:21:39.200
They'll be installed
in the right location.

00:21:39.200 --> 00:21:42.930
Of course, on Tiger, it comes with 1.4.2.

00:21:43.030 --> 00:21:47.200
The Xcode 2.0, of course,
has all these updates.

00:21:47.200 --> 00:21:50.810
This also includes
source files and stuff,

00:21:50.810 --> 00:21:56.170
our sources that we can legally release,
and documentation.

00:21:56.680 --> 00:21:59.960
So definitely get a hold of that.

00:21:59.960 --> 00:22:01.660
So building an Xcode.

00:22:01.770 --> 00:22:06.850
I'm not going to go into so much
the philosophy and the UI of Xcode,

00:22:06.910 --> 00:22:10.910
but we are going to touch on at
least some of the stuff for the

00:22:10.910 --> 00:22:14.650
Java and focus on the Java portions.

00:22:14.740 --> 00:22:17.040
Of course,
on the left-hand side you have your

00:22:17.040 --> 00:22:21.130
source files and stuff like that,
your products and your frameworks,

00:22:21.130 --> 00:22:21.860
or jars.

00:22:21.860 --> 00:22:24.870
You also have underneath
that your targets and then

00:22:24.970 --> 00:22:27.940
of course your executables.

00:22:27.940 --> 00:22:31.880
The Java targets,
you have the jam targets

00:22:31.910 --> 00:22:33.050
and stuff like that.

00:22:33.140 --> 00:22:36.360
The external targets you would
normally use for calling ant or

00:22:36.360 --> 00:22:37.970
something like that or makefile.

00:22:38.110 --> 00:22:43.800
And of course you have native
targets for JNI libraries.

00:22:43.800 --> 00:22:49.640
The executables, this is where you select
your run debug configuration.

00:22:49.640 --> 00:22:52.270
So if say you want to
debug your JNI library,

00:22:52.270 --> 00:22:53.240
you can do that.

00:22:53.240 --> 00:22:56.460
You can switch to GDB or if you
want to debug the Java stuff,

00:22:56.460 --> 00:22:58.720
you can use the Java debugger.

00:22:58.720 --> 00:23:02.600
You all do that on the
Xcode or in the executable.

00:23:02.600 --> 00:23:06.890
Your arguments that you're passing
to your jar file or your application,

00:23:06.970 --> 00:23:08.740
you set this all up in the executable.

00:23:08.740 --> 00:23:11.750
And then any environment
variables that you want to set.

00:23:11.750 --> 00:23:12.710
So if you want to pass in, you know,
a code that you want to

00:23:12.730 --> 00:23:13.200
use in your application,
you can do

00:23:14.300 --> 00:23:28.400
[Transcript missing]

00:23:30.170 --> 00:23:35.100
Ant is an external target,
and that's one of the ways that Xcode

00:23:35.100 --> 00:23:37.120
allows for extending for Java stuff.

00:23:37.300 --> 00:23:40.600
An additional way is in the build phases.

00:23:40.600 --> 00:23:43.580
So if you have a Jam target,
one of the things Jam does

00:23:43.600 --> 00:23:45.950
is it calls out to external
tools and stuff like that.

00:23:46.100 --> 00:23:49.840
So you can use either a
shell script build phase,

00:23:49.940 --> 00:23:53.920
and often use this for like signing
files or something like that,

00:23:53.920 --> 00:23:56.100
or a copy build phase.

00:23:56.100 --> 00:24:00.240
I'm actually going to go
into those right here.

00:24:00.660 --> 00:24:02.840
Shell script build phase.

00:24:02.840 --> 00:24:05.500
This is the kind of thing when
you're doing a JNI target,

00:24:05.500 --> 00:24:06.560
you use a Java H.

00:24:06.610 --> 00:24:09.870
You call Java H from the
shell script build phase.

00:24:10.280 --> 00:24:13.540
Signing JAR files,
shell script build phase.

00:24:13.540 --> 00:24:18.710
If you have an executable or a
directory setup that you want

00:24:19.230 --> 00:24:22.810
to set up for your end result,
the shell script build

00:24:22.810 --> 00:24:23.870
phase is useful for that.

00:24:24.020 --> 00:24:28.220
That's what we actually use it for,
to set up localization

00:24:28.300 --> 00:24:29.970
files for packages.

00:24:30.580 --> 00:24:33.990
Also,
if you have a bunch of properties files

00:24:33.990 --> 00:24:38.500
you want to write or something like that,
and you want it to be dynamic,

00:24:38.590 --> 00:24:41.300
you can use that in the
shell script build phase.

00:24:41.300 --> 00:24:45.140
The copies files build phase,
this is where you want to move

00:24:45.400 --> 00:24:47.590
things into your build results.

00:24:47.670 --> 00:24:49.970
This is something where
if you have a JNI library,

00:24:49.970 --> 00:24:53.390
you want to copy it into
your application bundle.

00:24:53.460 --> 00:24:57.230
If you have, say,
one of the things that you can

00:24:57.230 --> 00:25:01.540
do is you can call out using
runtime.exe to external tools.

00:25:01.540 --> 00:25:05.640
So if you want to copy those
into your application bundle,

00:25:05.710 --> 00:25:07.220
copies files build phase.

00:25:07.230 --> 00:25:10.590
Nice thing about that is you can hide
everything within your application

00:25:10.590 --> 00:25:15.860
bundle and not have to worry about
somebody throwing away things because

00:25:15.860 --> 00:25:17.540
they don't realize what it is.

00:25:17.580 --> 00:25:22.530
And then all of a sudden
your application breaks.

00:25:23.660 --> 00:25:33.190
I'm going to give you
a quick tour of Xcode.

00:25:33.190 --> 00:25:33.190
Let me go to the
Panther machine over here.

00:25:33.420 --> 00:25:35.860
What I'm doing right here is,
for most of the talk,

00:25:35.860 --> 00:25:38.100
we're actually going to focus on Ant.

00:25:38.200 --> 00:25:40.970
But like I said,
we're not really abandoning

00:25:40.990 --> 00:25:42.780
the Jam stuff at all.

00:25:42.780 --> 00:25:44.140
We're just providing the options.

00:25:44.140 --> 00:25:48.120
So what I'm going to do is show
you a little bit about some of

00:25:48.120 --> 00:25:52.620
the Jam stuff that is in there,
currently in the 1.2

00:25:52.630 --> 00:25:55.520
and in the 1.5 and 2.0.

00:25:55.520 --> 00:25:57.930
Of course, this is the targets and
stuff that I talked about.

00:25:58.020 --> 00:25:59.900
These are all the files.

00:25:59.900 --> 00:26:02.730
There's different ways
that you can actually

00:26:02.960 --> 00:26:05.140
View them, just double-click on them.

00:26:05.200 --> 00:26:08.080
I know this is all pretty rudimentary.

00:26:08.080 --> 00:26:10.140
But for some people who
haven't really used it,

00:26:10.140 --> 00:26:13.240
this is actually important for them.

00:26:13.240 --> 00:26:16.220
And if you want to include
a file in a target,

00:26:16.220 --> 00:26:18.320
here's the check box for it.

00:26:18.350 --> 00:26:21.680
So if you have it over here, you can see,
of course, the build results are

00:26:21.760 --> 00:26:24.360
included in the target.

00:26:24.360 --> 00:26:25.360
Double-click on the target.

00:26:25.460 --> 00:26:27.720
It'll actually bring
up the property list.

00:26:27.720 --> 00:26:31.500
This hasn't actually changed
that much from Project Builder.

00:26:31.520 --> 00:26:34.240
So if you used it in there,
it's pretty much the same.

00:26:34.240 --> 00:26:36.980
It's still in the 1.2.

00:26:36.990 --> 00:26:41.800
The panels that are important to you
are the Java -- the compiler settings.

00:26:41.800 --> 00:26:46.990
This is where you can select Java C,
JIKs, and stuff like that.

00:26:47.510 --> 00:26:51.640
Set your target JVM if you
want to target something else.

00:26:51.640 --> 00:26:54.810
The Java archive settings,
this is where you

00:26:54.810 --> 00:26:56.260
include a manifest file.

00:26:56.280 --> 00:27:01.140
So if for some reason—well, of course,
we all want our double-clickable

00:27:01.140 --> 00:27:02.500
jars to be launchable.

00:27:02.600 --> 00:27:08.680
So what you do is you put the manifest
file at the root of the project,

00:27:08.680 --> 00:27:08.680
and then just type in the name here.

00:27:09.620 --> 00:27:13.380
And of course, all these are properties,
so if you set something in there,

00:27:13.430 --> 00:27:16.260
it'll show up in this list and you can
go on and configure things manually.

00:27:16.260 --> 00:27:19.620
So if you wanted to call out to another
Java compiler or something like that,

00:27:19.620 --> 00:27:21.570
Greg's actually going to show you that.

00:27:21.750 --> 00:27:26.020
Peer Java Specific, down here.

00:27:26.020 --> 00:27:29.610
These are actually the plist entries,
and these are the kind of things

00:27:29.610 --> 00:27:33.700
that are used when you're launching
your double-clickable application.

00:27:33.700 --> 00:27:36.110
These are the kind of
things like your properties,

00:27:36.110 --> 00:27:39.600
if you want to add additional
properties for the Macintosh platform.

00:27:39.650 --> 00:27:43.830
Additional JVM options,
say if you wanted to do

00:27:43.830 --> 00:27:49.240
profiling or something like that,
you could type that in here,

00:27:49.240 --> 00:27:49.240
set your heap size.

00:27:49.660 --> 00:27:58.580
Set the current working directory to the
content's resources/java subdirectory.

00:27:58.580 --> 00:28:00.520
This is, say,
if the current working directory

00:28:00.520 --> 00:28:05.020
of the Java application is normally
just outside the executable bundle,

00:28:05.030 --> 00:28:09.150
but you can actually set it to
internal to the executable bundle

00:28:09.150 --> 00:28:13.500
so that when you're calling out to
external tools or something like

00:28:13.500 --> 00:28:17.310
that or referring to property files,
they're within the actual

00:28:17.310 --> 00:28:17.310
application bundle.

00:28:18.480 --> 00:28:25.860
Sometimes this is just something—if for
some reason you say if you see an error,

00:28:25.890 --> 00:28:30.970
it can't launch the—invoke the
NSJVM or something like that,

00:28:31.150 --> 00:28:32.810
it means this was accidentally checked.

00:28:32.840 --> 00:28:34.400
Just uncheck it.

00:28:34.400 --> 00:28:37.920
And then over here,
that's the targets pretty

00:28:38.020 --> 00:28:40.080
much for the Jam stuff.

00:28:40.080 --> 00:28:42.710
This is the executable.

00:28:43.110 --> 00:28:45.080
This is where you could
create a custom one,

00:28:45.170 --> 00:28:47.400
but you can go in and set
your launch arguments,

00:28:47.400 --> 00:28:49.590
things that are passed
to your application,

00:28:49.590 --> 00:28:51.930
environment variables, like I said.

00:28:52.010 --> 00:28:55.000
This looks a little bit
different than the 1.2.

00:28:55.000 --> 00:28:57.000
They actually have a couple
of tabs across the top.

00:28:57.000 --> 00:28:59.810
Let me see if I got—actually,
on this one,

00:28:59.980 --> 00:29:03.000
I think it's the same look and feel.

00:29:03.000 --> 00:29:06.000
I can actually show it to you.

00:29:06.060 --> 00:29:09.590
If we switch to the other machine—can
you do that for me real quick?

00:29:09.690 --> 00:29:12.000
Yeah, over to this other machine.

00:29:12.000 --> 00:29:15.510
Let me just show you that real quick.

00:29:18.440 --> 00:29:20.400
I'm on the right one.

00:29:20.400 --> 00:29:24.030
/temp swing app.

00:29:25.910 --> 00:29:29.740
So let's go into here.

00:29:29.740 --> 00:29:35.660
So, looks a little bit different,
but arguments and then debugging,

00:29:35.660 --> 00:29:39.140
this is where you actually
set the arguments.

00:29:40.500 --> 00:29:44.500
I haven't indexed this project
so it doesn't have all that yet.

00:29:44.500 --> 00:29:50.670
But that's essentially where
you set up all the Jam stuff.

00:29:51.270 --> 00:29:53.150
That's kind of the stuff
that we currently provide.

00:29:53.240 --> 00:29:57.150
We actually, if you look at the project
builder documentation,

00:29:57.150 --> 00:30:00.280
it'll point you to it,
clear all that up for you.

00:30:00.340 --> 00:30:04.640
But we're actually coming out with
new Xcode for Java documentation.

00:30:04.640 --> 00:30:07.640
Soon our tech pubs people
are actively working on it.

00:30:07.670 --> 00:30:11.640
So let's go back to the slides.

00:30:11.660 --> 00:30:12.290
Where are we there?

00:30:12.350 --> 00:30:14.770
So I keep hitting this again,
but Ant integration,

00:30:14.840 --> 00:30:16.760
it's an external target.

00:30:16.760 --> 00:30:20.560
It's the same as like a
legacy makefile target.

00:30:20.570 --> 00:30:24.470
it's uh... were essentially
calling out to external bill tool

00:30:24.600 --> 00:30:27.090
Some of the arguments
that you can pass to it,

00:30:27.120 --> 00:30:30.400
the standard ones in our templates
is what I have listed here,

00:30:30.470 --> 00:30:34.190
but you can actually pass in any
other kind of options you want.

00:30:34.190 --> 00:30:37.000
You're calling out to an external tool.

00:30:37.190 --> 00:30:41.550
And then in the build styles,
if you've used Xcode build

00:30:41.560 --> 00:30:45.450
styles for something else,
you can set variables

00:30:45.450 --> 00:30:46.760
and stuff like that.

00:30:46.830 --> 00:30:48.800
They'll be passed on to the targets.

00:30:49.060 --> 00:30:52.580
And then if, say,
you have some sort of property

00:30:52.580 --> 00:30:56.580
that you want to pass in,
you can just add a dollar sign

00:30:56.660 --> 00:30:59.390
and then whatever the value is
that you define in the build

00:30:59.470 --> 00:31:04.400
style onto that executable line.

00:31:04.600 --> 00:31:10.990
And that'll automatically be
passed to it when you define that.

00:31:13.240 --> 00:31:15.380
Whenever you call out
to an external target,

00:31:15.440 --> 00:31:18.700
there's a lot of environment
variables that we pass along.

00:31:18.700 --> 00:31:23.100
If you look at the build settings
notes under the help menu,

00:31:23.320 --> 00:31:26.210
this will tell you a lot
more about available options

00:31:26.210 --> 00:31:28.100
that you can capitalize on.

00:31:28.100 --> 00:31:29.230
So definitely check that out.

00:31:29.410 --> 00:31:33.870
This is something that's overlooked,
but a valuable piece of information.

00:31:33.900 --> 00:31:38.220
J2ME

00:31:40.510 --> 00:31:43.860
We're not really promoting
J2ME on our platform,

00:31:43.950 --> 00:31:52.800
but it's a great example of what you can
use Ant to build for on our platform.

00:31:52.800 --> 00:31:56.640
In the DMG,
we're going to provide a sample

00:31:56.640 --> 00:32:02.300
template for building J2ME midlets.

00:32:02.300 --> 00:32:09.130
That will be in the disk image
available tonight for the session.

00:32:09.440 --> 00:32:13.640
It's a custom executable, like I said,
or it's a custom executable

00:32:13.640 --> 00:32:17.550
to run the mid-P emulator.

00:32:17.760 --> 00:32:26.910
You can use Bluetooth to push the file
over from your laptop or desktop machine.

00:32:28.830 --> 00:32:30.140
Thank you.

00:32:30.140 --> 00:32:32.330
It's a Bluetooth executable.

00:32:32.360 --> 00:32:37.090
You use Bluetooth to push it over.

00:32:37.160 --> 00:32:41.640
When you're pushing over
a JAR file for MIDP,

00:32:41.640 --> 00:32:44.120
you can't define any
properties in the JAD file.

00:32:44.120 --> 00:32:46.380
But if there's any
properties that you need,

00:32:46.380 --> 00:32:49.790
you can just define them in your
actual executable and push it over.

00:32:49.800 --> 00:32:53.830
In MIDP, you can actually use a JAD file
to define additional properties

00:32:53.830 --> 00:32:55.230
that would be passed in.

00:32:55.490 --> 00:32:58.820
When you're pushing over with Bluetooth,
you can only send one file at a time.

00:32:58.820 --> 00:33:03.740
So just define those
within your executable.

00:33:05.510 --> 00:33:12.060
And, oh, yes, most importantly,
the emulator I'm using is actually

00:33:12.060 --> 00:33:13.900
from Mike Powers' website.

00:33:13.900 --> 00:33:22.800
It's mpowers.net,
and it's the midp-osx directory.

00:33:22.800 --> 00:33:25.330
Of course,
this URL is provided in the disk image,

00:33:25.380 --> 00:33:27.980
so don't worry about writing it down.

00:33:27.980 --> 00:33:31.060
And actually,
we just found out today that he's going

00:33:31.060 --> 00:33:36.690
to make available a J2ME 2.0 emulator.

00:33:37.310 --> 00:33:42.330
As soon as that's available,
we'll make that available

00:33:42.330 --> 00:33:44.460
or at least point you to it.

00:33:46.460 --> 00:33:47.840
We'll get it to you somehow.

00:33:47.840 --> 00:33:51.350
I just heard about it today,
so that's why I'm just kind

00:33:51.570 --> 00:33:52.900
of stumbling with that.

00:33:52.900 --> 00:33:57.780
So let's actually go over to the
Panther and let's do a quick J2ME demo.

00:33:57.850 --> 00:34:01.000
And so let's go over
to the Panther machine.

00:34:01.000 --> 00:34:05.970
And let me go over.

00:34:06.030 --> 00:34:10.860
I've already installed
the template for the J2ME.

00:34:10.920 --> 00:34:14.300
And so if you follow the directions
included in the disk image,

00:34:14.300 --> 00:34:16.800
this will show you how
to get that in there.

00:34:16.830 --> 00:34:20.190
And once you do that,
it'll actually show up in

00:34:20.190 --> 00:34:22.560
Xcode as a project template.

00:34:22.670 --> 00:34:24.930
So let me just go ahead.

00:34:25.180 --> 00:34:29.850
Let me build that on the desktop.

00:34:30.970 --> 00:34:30.980
Let me just call it Asteroids.

00:34:32.200 --> 00:34:39.680
I'm a creative speller,
so I have to double check all this.

00:34:40.640 --> 00:34:43.290
And at this point,
it's just pretty much just

00:34:43.350 --> 00:34:46.880
a hello world application.

00:34:47.080 --> 00:34:48.340
Let me launch X11.

00:34:48.340 --> 00:34:52.710
The current emulator,
the midp1.0 emulator,

00:34:52.710 --> 00:34:55.090
is an X11 executable.

00:34:55.670 --> 00:35:00.200
So let's go ahead and just run
this real quick and show you.

00:35:00.200 --> 00:35:00.760
It comes up.

00:35:00.800 --> 00:35:01.420
There it is.

00:35:01.420 --> 00:35:04.110
It's your phone on an emulator.

00:35:04.490 --> 00:35:06.040
Go ahead and just launch.

00:35:06.090 --> 00:35:07.660
Hello world.

00:35:07.700 --> 00:35:11.210
Not very exciting, but proof of concept.

00:35:11.360 --> 00:35:17.990
But next step is,
let's actually go in and

00:35:18.600 --> 00:35:21.360
Let's see,
this should be in my home directory.

00:35:21.360 --> 00:35:23.400
Let's get this source.

00:35:23.430 --> 00:35:25.600
What you see over here,
let me just go into it,

00:35:25.600 --> 00:35:28.200
is that you've got this
blue source directory.

00:35:28.200 --> 00:35:32.290
So I'm going to go in, delete that file.

00:35:33.530 --> 00:35:35.730
It should go ahead and delete in there.

00:35:35.800 --> 00:35:39.190
Let's copy in these
sources from over here.

00:35:39.580 --> 00:35:46.690
This is a GPL version of Asteroids game.

00:35:46.750 --> 00:35:51.970
Just look on Google for Asteroids mid-P
and you should be able to find it.

00:35:53.130 --> 00:36:06.900
The next step is the manifest.

00:36:07.070 --> 00:36:07.070
Let me update those.

00:36:07.070 --> 00:36:07.070
Let's just go in and copy it
in from the other directory.

00:36:07.070 --> 00:36:07.070
The manifest in the JAD file.

00:36:07.880 --> 00:36:10.000
Let's just copy that in.

00:36:10.380 --> 00:36:12.910
Replace.

00:36:12.910 --> 00:36:12.910
Replace.

00:36:13.110 --> 00:36:18.690
Now, in theory,
I should just go ahead and be able to

00:36:18.950 --> 00:36:22.000
Bill, he's in the current template.

00:36:22.360 --> 00:36:26.030
Let's see, Bill Cho.

00:36:26.260 --> 00:36:28.440
Build successful,
that's always a good sign.

00:36:28.440 --> 00:36:32.390
Went through, did the whole build here,
and we should just be able to run it.

00:36:32.430 --> 00:36:35.160
Let's see if it actually runs.

00:36:35.200 --> 00:36:37.790
Oh no, that was the whole world.

00:36:37.880 --> 00:36:41.870
Let's try this again.

00:36:43.830 --> 00:36:45.700
Oh, this demo's not going well.

00:36:45.710 --> 00:36:49.250
But the concept is,
and what we're doing is we're actually

00:36:49.250 --> 00:36:52.500
showing Ant building for mid-P.

00:36:52.660 --> 00:36:57.320
And if you saw earlier in
the Java State of the Union,

00:36:57.370 --> 00:37:02.540
it does build and everything like that,
the asteroids for Mac OS X.

00:37:02.590 --> 00:37:05.260
But that's only a part of the story.

00:37:05.280 --> 00:37:09.530
Let's just send this file over
actually to my Bluetooth phone.

00:37:09.730 --> 00:37:13.660
So let me go into my home directory.

00:37:13.720 --> 00:37:20.500
I got the asteroids, the build bin.

00:37:20.500 --> 00:37:25.420
And let me just send this jar file over.

00:37:28.100 --> 00:37:33.250
Let's go ahead and turn on the camera,
give it a second,

00:37:33.410 --> 00:37:36.000
it tends to fall asleep.

00:37:36.000 --> 00:37:38.400
There it goes.

00:37:38.400 --> 00:37:43.000
And if any luck, there's the phone.

00:37:43.000 --> 00:37:46.090
Notice the aspect ratio is
not completely maintained with

00:37:46.090 --> 00:37:47.620
that piece of sample code.

00:37:47.660 --> 00:37:50.960
That's actually
COCA component right there.

00:37:50.960 --> 00:37:54.000
And let's go ahead and
send that file over.

00:37:54.000 --> 00:37:58.960
That should wake up the phone.

00:37:58.960 --> 00:38:00.120
Unable to validate device.

00:38:09.070 --> 00:38:11.920
These demos are all
going pretty good today.

00:38:11.920 --> 00:38:15.910
Um, but it does.

00:38:17.200 --> 00:38:20.840
So basically what would happen
is I'd send over the file.

00:38:20.840 --> 00:38:24.770
The phone automatically wakes up,
which is actually pretty cool to see.

00:38:24.780 --> 00:38:29.180
And it says,
do you want to accept this file?

00:38:29.180 --> 00:38:31.560
It doesn't just blindly accept any file.

00:38:31.560 --> 00:38:34.140
I say yes, it downloads,
it starts the file,

00:38:34.140 --> 00:38:38.480
and you've got mid-P running on your
phone that you built on Mac OS X.

00:38:38.480 --> 00:38:40.180
And it's actually pretty easy.

00:38:40.180 --> 00:38:43.380
The sample template will
be in the disk image,

00:38:43.380 --> 00:38:47.020
and it'll be great for you to try it out.

00:38:47.200 --> 00:38:51.680
So let's go back to the
slides and continue on.

00:38:53.050 --> 00:38:54.960
So that was the J2ME demo.

00:38:54.960 --> 00:38:58.510
So, one of the problems that people
have run into is building JNI on

00:38:58.510 --> 00:39:02.000
Mac OS X isn't exactly straightforward.

00:39:02.000 --> 00:39:03.820
Let's talk a little bit about it.

00:39:04.070 --> 00:39:08.680
It's actually easy, once you know how.

00:39:08.680 --> 00:39:14.980
When you're building a mid-P target,
you want the library to be a JNI target.

00:39:14.980 --> 00:39:19.060
You want the library, the executable,
the result to have the start with lib

00:39:19.060 --> 00:39:22.210
and then end with the extension jnilib.

00:39:22.340 --> 00:39:30.670
And so, if say you wanted to be able to
do a system.load library foo,

00:39:30.780 --> 00:39:35.860
you would actually name your target
libfoo and then change the executable,

00:39:35.860 --> 00:39:38.390
the extension to be jnilib.

00:39:38.390 --> 00:39:44.260
And so,
the JNI library would be libfoo.jnilib.

00:39:44.830 --> 00:39:48.920
So there's two steps to do this in Xcode.

00:39:48.920 --> 00:39:51.470
The first step,
normally what I do is I split

00:39:51.540 --> 00:39:53.560
this into multiple targets.

00:39:53.560 --> 00:39:55.800
The first step is actually
to build the headers,

00:39:55.800 --> 00:39:59.020
and that's where you call
JavaH with the shell script,

00:39:59.020 --> 00:40:02.960
and then to build the JNI library,
and that's the second target.

00:40:02.960 --> 00:40:09.080
And then of course you have
your actual application target,

00:40:09.080 --> 00:40:09.370
but I'm just focusing on the
JNI library at this point.

00:40:10.260 --> 00:40:14.470
So the header target, you add,
you create a new target,

00:40:14.480 --> 00:40:17.820
a package target, a Java package.

00:40:17.840 --> 00:40:19.320
It's essentially a JAR file.

00:40:19.320 --> 00:40:23.740
Add all your classes to it with the
native methods and any supporting

00:40:23.810 --> 00:40:25.580
classes that you need to compile those.

00:40:25.580 --> 00:40:29.960
Typically, you don't add all your classes
because if you have 100 or so classes,

00:40:29.960 --> 00:40:32.340
then you'll end up building
all those classes many times.

00:40:32.380 --> 00:40:34.060
You just want to include a subset.

00:40:34.060 --> 00:40:37.540
And then add a shell script
build phase to this target.

00:40:39.000 --> 00:40:42.500
This is essentially what you would want
to add as a shell script build phase.

00:40:42.500 --> 00:40:46.180
We actually have JNI samples
that includes this stuff,

00:40:46.190 --> 00:40:47.280
so you don't have to write it down.

00:40:47.280 --> 00:40:48.960
You can get it from our
sample code website.

00:40:48.960 --> 00:40:55.640
But essentially,
you add the JAR file to the class path,

00:40:55.680 --> 00:41:00.140
and then Java H will,
if you pass in all the class

00:41:00.140 --> 00:41:02.710
names with the native methods,
it'll generate all the

00:41:02.730 --> 00:41:03.630
header files for you.

00:41:03.680 --> 00:41:08.220
The next step is the JNI library target.

00:41:08.930 --> 00:41:12.300
This is a BSD dynamic library.

00:41:12.840 --> 00:41:23.020
The first thing you need to do is
to change the extension to JNI lib.

00:41:23.020 --> 00:41:24.540
This is a build option.

00:41:24.540 --> 00:41:32.040
You set the native build option for
wrapper_unersort_extension to JNI lib.

00:41:32.040 --> 00:41:36.260
You do this with the custom options,
the build options,

00:41:36.260 --> 00:41:40.830
and this will actually give you a JNI lib
extension versus a DILIB extension.

00:41:40.860 --> 00:41:46.860
You can build C, C++, Objective-C,
anything you want into that JNI library.

00:41:46.860 --> 00:41:52.910
Just expose C entry points
because that's what JNI expects.

00:41:53.000 --> 00:42:00.290
Once you get your JNI library built,
the next step is actually

00:42:00.290 --> 00:42:01.910
deploying it or...

00:42:02.210 --> 00:42:09.990
Copy files build phase:
That is the one where you

00:42:10.110 --> 00:42:16.380
copy the JNI library into
your Java application bundle.

00:42:16.380 --> 00:42:20.810
Using the copy files build phase,
there's a pop-up that you can select

00:42:20.880 --> 00:42:23.600
where in the application bundle,
and you would want to

00:42:23.600 --> 00:42:24.600
use the Java resources.

00:42:24.690 --> 00:42:30.130
We add that to the dial-up
search path for JNI libraries.

00:42:30.380 --> 00:42:35.310
The Java Web Start, you would actually
want to copy that file,

00:42:35.310 --> 00:42:39.820
or you would want to add that
file to the Web Start project,

00:42:40.070 --> 00:42:44.260
and so that will include
the JNI library in your jar.

00:42:44.260 --> 00:42:48.730
And so when you download the
Java Web Start application,

00:42:48.730 --> 00:42:51.990
it will be able to find that jar for you.

00:42:52.310 --> 00:42:54.800
And of course,
talking about JNI libraries,

00:42:54.800 --> 00:42:58.770
there's a few more places that you
can actually install them on the

00:42:58.800 --> 00:43:01.690
system besides the application bundle.

00:43:01.790 --> 00:43:04.060
Of course,
anywhere in the Dylib search path,

00:43:04.200 --> 00:43:05.200
we look for them.

00:43:05.200 --> 00:43:09.270
Additionally, we look in the library job
extensions at the root of the system,

00:43:09.270 --> 00:43:12.540
so if you want to install a
JNI library for the entire system,

00:43:12.720 --> 00:43:14.140
that's the place to put it.

00:43:14.140 --> 00:43:16.700
Or if you want to install a
JNI library just for the specific

00:43:16.700 --> 00:43:19.790
user that's currently running,
you can install it in the same directory

00:43:19.990 --> 00:43:24.770
structure but in their home directory
and we'll look there for it also.

00:43:25.910 --> 00:43:30.020
So just a quick note,
while we're talking about Java JNI,

00:43:30.020 --> 00:43:32.430
there's a few things to be aware of.

00:43:32.440 --> 00:43:37.860
Some of the threading between
Java and... Our GUI is a Cocoa GUI.

00:43:37.880 --> 00:43:44.600
And what happens is when you're
running a Cocoa application,

00:43:44.600 --> 00:43:48.460
it actually...the app kit
thread is thread zero,

00:43:48.460 --> 00:43:52.520
and that is the one that is
actually receiving all the

00:43:52.520 --> 00:43:54.020
Cocoa events and stuff like that.

00:43:54.020 --> 00:43:55.110
You don't want to block that.

00:43:55.760 --> 00:43:57.010
And then, of course,
you don't want to block

00:43:57.140 --> 00:43:58.580
the Java AWT thread.

00:43:58.580 --> 00:44:04.950
So when calling between, say,
Cocoa and Java, there's a couple things

00:44:04.950 --> 00:44:08.420
that you may want to use,
is when you're calling

00:44:08.500 --> 00:44:12.670
Objective-C from the Java side of it,
you may want to use perform

00:44:12.670 --> 00:44:14.170
selector on main thread.

00:44:14.180 --> 00:44:17.470
And what that'll do is allow
you to dispatch an event to

00:44:17.470 --> 00:44:21.440
the Objective-C app kit thread,
and then be able to let

00:44:21.440 --> 00:44:23.800
your AWT thread return,
say,

00:44:23.800 --> 00:44:27.160
if it was in response to button click,
or mouse down, or something like that.

00:44:27.200 --> 00:44:30.720
If you wait until done,
you'll actually end up

00:44:30.840 --> 00:44:32.640
blocking that thread,
so that may be something

00:44:32.640 --> 00:44:33.600
you may not want to do.

00:44:33.600 --> 00:44:36.730
And then when you're calling
back into Java from Cocoa,

00:44:36.740 --> 00:44:40.660
you want to avoid running
Java on the app kit thread.

00:44:40.760 --> 00:44:43.970
So to do that, you'd actually use
swings invoke and wait,

00:44:43.980 --> 00:44:48.650
invoke later, or something like that,
or actually invoke and wait.

00:44:48.910 --> 00:44:55.240
Invoke and wait is kind of
like the wait until done,

00:44:55.680 --> 00:44:59.220
and that you might end up
hanging the app kit thread,

00:44:59.260 --> 00:45:01.250
so be very cautious if you use that.

00:45:01.340 --> 00:45:05.000
I should probably have had this
build on to put a couple Xs on those.

00:45:05.000 --> 00:45:11.060
But specifically, if say you're using
JAWT or a Cocoa component,

00:45:11.060 --> 00:45:16.550
JAWT paints on the AWT dispatch thread,
so if you're calling out to a native

00:45:16.550 --> 00:45:21.520
Cocoa function or something like that,
don't block that AWT thread because

00:45:21.520 --> 00:45:24.850
your application will sit there
and won't be responsive until it

00:45:24.850 --> 00:45:28.320
comes back from the Cocoa app kit.

00:45:28.370 --> 00:45:33.060
And then in Cocoa component,
it paints on the main Cocoa thread.

00:45:33.080 --> 00:45:35.930
If you block that,
then all of a sudden you won't be getting

00:45:35.930 --> 00:45:39.320
any events sent to your AWT from Cocoa.

00:45:39.380 --> 00:45:41.330
So don't block that thread.

00:45:44.130 --> 00:45:46.390
So, let me bring up Greg Bolsinga.

00:45:46.680 --> 00:45:51.610
We're going to talk
about debugging in Xcode.

00:45:51.610 --> 00:45:51.610
And, Greg.

00:45:53.380 --> 00:45:57.740
I'm going to show you a little
bit about debugging in Xcode and

00:45:57.740 --> 00:46:01.550
another little thing about 1.5.

00:46:01.760 --> 00:46:05.180
I think it's pretty funny the
way that we have Java 1.5,

00:46:05.180 --> 00:46:07.940
which Sun calls Tiger and
ROS is called Tiger.

00:46:07.940 --> 00:46:11.230
Usually from us,
you'll never hear us call Java 1.5

00:46:11.230 --> 00:46:13.940
Tiger because it's confusing for us,
too.

00:46:13.940 --> 00:46:17.190
So first off,
I'm going to show you how to

00:46:17.190 --> 00:46:19.540
debug a Java applet in Safari.

00:46:19.940 --> 00:46:22.630
I had told—I believe it was
Ted that I could do this,

00:46:22.630 --> 00:46:25.020
and he said,
"I didn't even know that." So we thought

00:46:25.020 --> 00:46:26.920
it would be a good demo to have here.

00:46:26.920 --> 00:46:28.260
So I'm using Tiger here.

00:46:28.260 --> 00:46:32.400
I'm going to create a swing.

00:46:33.500 --> 00:46:37.810
and the Tiger Demo Machine, Demo 1.

00:46:37.810 --> 00:46:38.950
Thank you.

00:46:47.910 --> 00:46:50.800
So I'm just going to create this
little example on the desktop.

00:46:50.800 --> 00:47:00.400
What we have here is just a standard,
really simple swing application.

00:47:00.400 --> 00:47:02.210
Swing applet, I'm sorry.

00:47:02.400 --> 00:47:08.100
And what you can do is
create a custom executable,

00:47:08.100 --> 00:47:09.590
like Ted had mentioned earlier.

00:47:09.600 --> 00:47:12.940
You go to the project menu,
you create a custom executable.

00:47:13.010 --> 00:47:14.630
We're going to call it Safari.

00:47:17.400 --> 00:47:19.920
Choose it from the chooser.

00:47:25.240 --> 00:47:28.750
And when you edit the
custom executable here,

00:47:28.750 --> 00:47:34.280
you'll see that the executable
path is application Safari.

00:47:34.460 --> 00:47:38.340
And to debug it,
you'd pick the Java debugger here.

00:47:38.360 --> 00:47:42.060
This will launch Safari using
Xcode and hit our breakpoint.

00:47:42.100 --> 00:47:46.230
This morning-- and I didn't want
to tempt the demo gods-- I was

00:47:46.230 --> 00:47:52.880
thinking that other applications
that do run Java using WebKit could

00:47:52.880 --> 00:47:54.300
also be debugged the same way.

00:47:54.450 --> 00:47:58.920
But I didn't want to try any of those
other WebKit applications right now.

00:47:58.920 --> 00:48:01.820
So I started up Safari using Xcode.

00:48:01.820 --> 00:48:06.500
I set a breakpoint in
the paint method here.

00:48:06.500 --> 00:48:08.490
And--

00:48:09.710 --> 00:48:14.800
I'm going to open the
HTML file for my applet.

00:48:14.840 --> 00:48:17.640
It's going to load the applet,
and now it hit the breakpoint.

00:48:17.640 --> 00:48:21.920
You can see with standard Java debugging,
you get to see your thread stack here,

00:48:21.920 --> 00:48:25.830
arguments,
you can examine these items here,

00:48:25.910 --> 00:48:29.750
you can step through code,
or is it step over?

00:48:34.740 --> 00:48:36.700
Sorry, that was by code.

00:48:36.700 --> 00:48:38.700
And then you could just let it continue.

00:48:38.700 --> 00:48:42.460
And then there's your
Java applet in Safari.

00:48:45.060 --> 00:48:46.780
Oh, I got to repaint.

00:48:46.930 --> 00:48:48.360
That's why.

00:48:48.410 --> 00:48:49.800
Doesn't that make sense?

00:48:50.050 --> 00:48:55.410
And so you can debug
Java applets in Safari if you

00:48:55.420 --> 00:48:56.910
deploy your applets that way.

00:48:56.980 --> 00:48:59.560
Another handy tool that some
people may not be totally

00:48:59.560 --> 00:49:01.840
aware of is the Java plug-in.

00:49:01.950 --> 00:49:04.580
For debugging, it's really useful.

00:49:04.660 --> 00:49:07.720
When I'm debugging the
actual Java plug-in,

00:49:07.740 --> 00:49:11.830
I use the Java plug-in control panel
a lot as well as Java debugging,

00:49:11.880 --> 00:49:15.920
and you can even debug the
native AWT code in Safari.

00:49:16.010 --> 00:49:22.950
But you could pass all sorts
of interesting things to the

00:49:23.870 --> 00:49:27.710
"Runtime, when it's invoked,
using the Java runtime parameters here,

00:49:27.710 --> 00:49:30.560
you can set the boot class path.

00:49:30.560 --> 00:49:33.730
That's what I do because I'm
always replacing AWT or the plugin.

00:49:33.860 --> 00:49:37.550
So you would apply it,
and then the next time you run Safari,

00:49:37.840 --> 00:49:42.940
And you open that applet that I just ran,
you'll see that what we—oh,

00:49:42.940 --> 00:49:46.950
I ran it from—you couldn't
see the console if I just

00:49:46.950 --> 00:49:49.720
ran it from the command line,
of course.

00:49:50.630 --> 00:49:53.240
So here you can see that the output,
you get to see where all

00:49:53.240 --> 00:49:55.200
your classes are loaded from.

00:49:55.200 --> 00:49:59.160
So I find it particularly useful
when I'm debugging if I have got

00:49:59.160 --> 00:50:01.310
my boot class path set up wrong.

00:50:01.380 --> 00:50:09.600
I use the verbose class loader
option for the Java plugin there.

00:50:09.600 --> 00:50:12.740
So what I'm going to go
to now is the slides.

00:50:21.480 --> 00:50:28.160
So like I showed you just now,
you select the Java debugger

00:50:28.160 --> 00:50:30.760
in your custom executable and
you'd select Safari there.

00:50:30.760 --> 00:50:34.770
And if you need to,
you can debug both Java and JNI code

00:50:34.800 --> 00:50:37.480
simultaneously outside of Safari.

00:50:37.480 --> 00:50:41.860
Because JNI cannot run in an applet
without certain security issues.

00:50:41.860 --> 00:50:45.540
Typically you'd use the
Java debugger in Xcode.

00:50:45.940 --> 00:50:49.580
And then you could attach to that
process from the command line

00:50:49.580 --> 00:50:51.690
with GDB and see your stack there.

00:50:51.700 --> 00:50:54.090
Alternately,
you could probably do it the other way

00:50:54.090 --> 00:50:58.820
around if you launched your application
such that it could be debugged with JDB.

00:51:02.600 --> 00:51:10.600
I'm going to talk about how you can
use the Java 1.5 preview in Xcode.

00:51:10.610 --> 00:51:16.600
Xcode is an amazing tool
because it has so many options.

00:51:16.600 --> 00:51:19.400
It's amazing what it can do.

00:51:19.400 --> 00:51:24.790
Without even knowing about Java 1.5,
it can both build it and run it,

00:51:24.790 --> 00:51:26.760
and that's very useful.

00:51:26.760 --> 00:51:30.900
So some things to know about Java 1.5:
It's a preview.

00:51:30.900 --> 00:51:33.220
It's not all complete yet.

00:51:33.220 --> 00:51:37.620
So in Tiger, it's only in Tiger,
and in Tiger 1.4.2 is

00:51:37.750 --> 00:51:39.660
still the default Java.

00:51:39.660 --> 00:51:41.450
You can only run it
from the command line.

00:51:41.510 --> 00:51:44.380
We didn't set it up so that
double-clickable .apps work.

00:51:44.380 --> 00:51:49.700
Even double-clickable jars
don't do anything for 1.5.

00:51:49.700 --> 00:51:52.970
So what you'd have to do is use the
full version path in the terminal.

00:51:52.980 --> 00:51:57.670
Our Java is set up so that we could
have multiple Javas installed at once.

00:51:57.670 --> 00:52:02.130
It's system, library frameworks,
Java VM frameworks, versions,

00:52:02.170 --> 00:52:05.120
1.5 commands, and then Java.

00:52:05.120 --> 00:52:06.660
And all the other
regular tools are there,

00:52:06.660 --> 00:52:12.620
too, such as Java H, Java C, and JAR,
all those other types of tools are there.

00:52:12.790 --> 00:52:16.360
And the new ones, PAC 200,
and I'm not sure of the other

00:52:16.360 --> 00:52:18.000
ones off the top of my head.

00:52:18.000 --> 00:52:21.250
Right now, you can only debug Java with
the JDB command line tool,

00:52:21.340 --> 00:52:23.190
4.1.5 in Tiger.

00:52:23.190 --> 00:52:26.390
We don't have the debugger
set up inside of Xcode yet.

00:52:26.510 --> 00:52:30.080
It's a problem in the JDK, not in Xcode.

00:52:30.080 --> 00:52:34.330
And AWT and Swing are
present in the 1.5 build,

00:52:34.340 --> 00:52:36.810
but if you try to run any,
you'll find you'll quickly

00:52:36.810 --> 00:52:38.440
crash in some kind of font code.

00:52:38.440 --> 00:52:41.460
So unfortunately,
that's not yet ready for the preview,

00:52:41.460 --> 00:52:42.880
but we'll have it soon.

00:52:42.960 --> 00:52:44.870
So now I'm

00:52:45.750 --> 00:52:51.740
show you how to use 1.5 in Xcode.

00:52:51.740 --> 00:52:53.620
Go back to Xcode over here.

00:52:53.750 --> 00:52:56.370
Close up that project I had going.

00:52:57.400 --> 00:53:03.580
I'm going to use the new
Ant templates available in Xcode.

00:53:03.580 --> 00:53:08.210
There's no Ant templates for Applets yet,
so that's why I wasn't able to…

00:53:11.500 --> 00:53:15.400
I wasn't able to show
the swing applet in Ant.

00:53:15.400 --> 00:53:18.980
So we're going to call this one Java 1.5.

00:53:23.560 --> 00:53:32.330
These are in the release notes for 1.5,
but the way to get 1.5

00:53:32.330 --> 00:53:32.330
to compile using Ant

00:53:33.210 --> 00:53:39.300
First off,
we have to get it to compile using Ant.

00:53:39.300 --> 00:53:39.300
And we use here, we use, um,

00:53:39.590 --> 00:53:45.570
Fork = true.

00:53:45.570 --> 00:53:45.570
So this is going to fork the
Java CE off into a new process.

00:53:46.730 --> 00:53:52.050
and this is where you're going to
give the path to the executable.

00:53:52.170 --> 00:53:58.290
Ant would seem to be versatile enough
that you can also use any version of

00:53:58.530 --> 00:54:01.890
Java that you may have laying around.

00:54:13.540 --> 00:54:15.500
I don't even know why it doesn't work.

00:54:15.500 --> 00:54:17.660
So I have to type in the full path.

00:54:17.830 --> 00:54:22.050
What I've done, and what if you do 1.5
development in the preview,

00:54:22.320 --> 00:54:26.000
what you'll want to do is certainly
make a command line shortcut,

00:54:26.180 --> 00:54:32.120
an alias in your
terminal to this command,

00:54:32.120 --> 00:54:32.120
because it's quite long
to type in all the time.

00:54:32.400 --> 00:54:41.860
"Especially without the command
line completion." So you would

00:54:41.860 --> 00:54:42.950
type in the full path to the
executable in the build XML.

00:54:44.700 --> 00:54:53.000
[Transcript missing]

00:54:53.240 --> 00:54:57.480
Right now, this source here is a very
simple Hello World program,

00:54:57.600 --> 00:54:59.350
and so I made a very complicated

00:55:00.680 --> 00:55:03.300
I don't know why this worked before.

00:55:03.400 --> 00:55:06.450
Oh, actually,
it's already in my clipboard, isn't it?

00:55:06.690 --> 00:55:10.070
I made a very complicated
1.5 only Hello World.

00:55:10.440 --> 00:55:15.780
We're using the generic string
array list to add Hello World here,

00:55:16.330 --> 00:55:19.900
and we're using the for loop here.

00:55:19.900 --> 00:55:22.220
I don't know what the
enhanced for loop is,

00:55:22.220 --> 00:55:24.160
what I believe they call it.

00:55:24.300 --> 00:55:27.830
And this is just to show you that I'm
going to be able to build using 1.5

00:55:27.830 --> 00:55:29.890
in Xcode because this will not build.

00:55:30.140 --> 00:55:32.890
This sample here will not
build in 1.4 because of the

00:55:32.900 --> 00:55:36.240
generics in the odd for loop.

00:55:36.340 --> 00:55:37.560
Choose build.

00:55:37.560 --> 00:55:45.840
We are not having luck
with the demos today.

00:56:02.180 --> 00:56:03.030
Thank you again.

00:56:03.100 --> 00:56:09.800
So now we'll see that the build has
succeeded beyond all our beliefs.

00:56:11.420 --> 00:56:15.500
What we'll make now is
a new custom executable.

00:56:15.500 --> 00:56:20.080
So this is how you'll be
able to run 1.5 in Xcode.

00:56:20.080 --> 00:56:23.900
So because it has all these
custom executables and you

00:56:23.900 --> 00:56:27.960
can set the variable names,
you can even build 1.5

00:56:27.960 --> 00:56:30.120
with Jam if you'd like to.

00:56:30.120 --> 00:56:34.950
So once again,
I have to type in that path because

00:56:34.950 --> 00:56:34.950
I can't figure out how to get...

00:56:44.230 --> 00:56:48.360
See, the clipboard does work in Tiger.

00:56:48.390 --> 00:56:51.940
So now we're going to run
it using 1.5 in Xcode,

00:56:51.940 --> 00:56:56.610
and it's a terribly
exciting one that says,

00:57:20.820 --> 00:57:22.290
I'm terribly sorry about that.

00:57:22.310 --> 00:57:25.490
I should have remembered that.

00:57:25.820 --> 00:57:31.800
Now you'll see that we
have yet another problem.

00:57:42.800 --> 00:57:45.280
We did this this morning.

00:57:45.280 --> 00:57:50.670
Well, we always have my favorite thing.

00:58:20.470 --> 00:58:25.590
So we built this class
file here using Xcode,

00:58:25.590 --> 00:58:29.930
and now I ran that 1.5 program using 1.5.

00:58:30.800 --> 00:58:53.300
[Transcript missing]

00:58:56.210 --> 00:59:02.070
So in theory, what we showed you is how
Xcode can help you with your

00:59:02.150 --> 00:59:03.700
Java development on Mac OS X.

00:59:03.700 --> 00:59:06.610
We've gone into things
that we've talked about,

00:59:06.690 --> 00:59:09.780
the AMP that's coming
with the 1.5 and the 2.0.

00:59:09.780 --> 00:59:13.550
We've talked about some of the
things like not quite cross-compiling

00:59:13.550 --> 00:59:17.280
but targeting other platforms,
say J2ME.

00:59:17.280 --> 00:59:19.690
AMP is very useful for that.

00:59:20.300 --> 00:59:24.260
We talked about the application
server update and the 1.4.2 update

00:59:24.260 --> 00:59:26.080
for the current Panther install.

00:59:26.080 --> 00:59:29.570
With this,
I think we've gotten you guys enough

00:59:29.570 --> 00:59:34.110
information to get you started,
probably enough to get you up

00:59:34.110 --> 00:59:36.720
and running and asking questions.

00:59:36.720 --> 00:59:39.630
Be sure to use some of these things.

00:59:39.790 --> 00:59:43.840
One thing that we don't have up there
that's actually a very useful resource

00:59:43.840 --> 00:59:45.770
is the Java developers mailing list.

00:59:45.800 --> 00:59:50.280
If you go to list.apple.com,
join the Java.

00:59:50.280 --> 00:59:51.960
You'll see the Java-dev mailing list.

00:59:52.060 --> 00:59:53.970
This is an extremely active mailing list.

00:59:54.020 --> 00:59:56.740
You're going to want to set up a
filter to put it into a folder for you.

00:59:56.740 --> 00:59:59.900
Otherwise, it's going to fill up
your inbox rather quickly.

01:00:00.030 --> 01:00:03.970
But the nice thing about it is you can
ask pretty much any question on there,

01:00:03.980 --> 01:00:09.200
and there's usually somebody up around
the world who will be able to answer

01:00:09.200 --> 01:00:11.690
it without too much -- too long.

01:00:11.700 --> 01:00:14.490
And occasionally,
the Java engineers actually,

01:00:14.490 --> 01:00:16.880
when they have time,
will lurk on the list,

01:00:16.880 --> 01:00:18.010
and you'll get the --

01:00:18.600 --> 01:00:44.000
[Transcript missing]