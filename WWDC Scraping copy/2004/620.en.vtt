WEBVTT

00:00:12.900 --> 00:01:53.400
[Transcript missing]

00:01:57.610 --> 00:01:58.440
Good afternoon.

00:01:58.490 --> 00:02:01.480
So as he said, my name is Tom Kyte.

00:02:01.510 --> 00:02:05.850
I've been with Oracle going
on about 11 years now,

00:02:05.850 --> 00:02:09.540
but have been using the
database software for about 16.

00:02:09.540 --> 00:02:12.760
And I was just curious just
to get a feel in the audience.

00:02:12.760 --> 00:02:15.720
How many of you have developed
applications using Oracle,

00:02:15.800 --> 00:02:16.630
the database?

00:02:18.600 --> 00:02:19.600
Excellent.

00:02:19.600 --> 00:02:22.620
So I don't have to explain what SQL and
other things like that stand for.

00:02:22.620 --> 00:02:23.020
Perfect.

00:02:23.020 --> 00:02:27.580
One of the things I spend way too much
of my time doing at Oracle is working

00:02:27.580 --> 00:02:30.240
on a website called asktom.oracle.com.

00:02:30.240 --> 00:02:34.310
That's one of the many resources
out there for you to get answers to

00:02:34.310 --> 00:02:37.190
technical questions and things like that.

00:02:37.220 --> 00:02:41.250
Another resource that I'd
like to sort of point out,

00:02:41.250 --> 00:02:46.060
get out of there for a second,
and go over into the web browser,

00:02:47.720 --> 00:02:49.120
otn.oracle.com.

00:02:49.120 --> 00:02:50.980
This is the Oracle Technology Network.

00:02:51.000 --> 00:02:56.530
And just to prove that
this stuff actually exists,

00:02:56.530 --> 00:02:59.740
you can go there today,
this afternoon if you like,

00:02:59.840 --> 00:03:03.260
to product centers,
downloads for the database,

00:03:03.260 --> 00:03:09.450
and featured right down there,
we have the Oracle 10g developers

00:03:09.450 --> 00:03:11.700
release for the MacÂ OS.

00:03:11.700 --> 00:03:14.650
So you can go get it,
the same software that we're

00:03:14.650 --> 00:03:18.080
running on these Xers over here,
for the demonstration,

00:03:18.080 --> 00:03:22.440
is what you guys would be downloading
and installing in your own environment.

00:03:22.440 --> 00:03:25.620
So what you see us doing are
things you'd actually be able to

00:03:25.620 --> 00:03:27.900
do yourselves later this afternoon.

00:03:31.100 --> 00:03:34.340
Back to the slides.

00:03:34.340 --> 00:03:36.420
So we have a really short agenda.

00:03:36.420 --> 00:03:38.620
I'm going to talk about
two database things,

00:03:38.620 --> 00:03:41.940
the two main things about Oracle 10g.

00:03:41.940 --> 00:03:44.870
The g in 10g stands for the grid.

00:03:44.870 --> 00:03:46.620
So we're going to take
a look at that briefly.

00:03:46.620 --> 00:03:49.600
Then we're going to look
at the other half of 10g,

00:03:49.600 --> 00:03:53.600
the what's in it for all the rest of us,
the manageability features that

00:03:53.600 --> 00:03:55.640
they've added to the database.

00:03:56.350 --> 00:04:00.740
10g has over 350 new things,
new functional areas added

00:04:00.750 --> 00:04:04.470
to it over 9i release 2,
which had about 150

00:04:04.470 --> 00:04:09.920
things over 9i release 1,
which had about 190 things over 8i.

00:04:09.920 --> 00:04:13.720
Every year we've been coming out with
more and more inside the database.

00:04:13.720 --> 00:04:16.180
10g is our current production release.

00:04:16.180 --> 00:04:21.080
We started rolling it out on various
platforms in the middle of this winter,

00:04:21.080 --> 00:04:22.940
the February timeframe.

00:04:22.940 --> 00:04:26.100
Available on the Macintosh
now in a developer's release.

00:04:26.100 --> 00:04:28.100
Consider that sort of a late beta.

00:04:28.110 --> 00:04:31.130
And we're looking at the
fall time to go production.

00:04:31.130 --> 00:04:33.670
And then we're going to
close up with HTMLDB,

00:04:33.670 --> 00:04:37.360
which Mark Peramarini is going to
sort of walk you through and show

00:04:37.360 --> 00:04:39.780
you what this development tool is.

00:04:39.780 --> 00:04:43.420
So beginning very simply with the grid.

00:04:45.260 --> 00:04:49.920
This is sort of a picture that describes
the sort of systems I've worked on.

00:04:49.920 --> 00:04:55.820
I've been doing this since the mid-1980s,
and I started as a PL1 programmer

00:04:55.820 --> 00:05:01.150
on an IBM mainframe using this thing
that not many people heard about.

00:05:01.200 --> 00:05:05.160
Because I was the newest kid there,
I got to play with the coolest new stuff,

00:05:05.170 --> 00:05:10.030
so they set me about programming against
this thing called DB2 and SQL DS.

00:05:10.040 --> 00:05:14.040
And that was really started, you know,
where I got all my SQL background.

00:05:14.040 --> 00:05:17.530
But pretty much a lot of our systems
back then were mainframe-based,

00:05:17.530 --> 00:05:19.340
very reliable, centralized.

00:05:19.340 --> 00:05:21.420
These things never went down.

00:05:21.420 --> 00:05:24.790
When I first came to
Oracle in the early 90s,

00:05:24.790 --> 00:05:30.280
there was a lot of shift away from a
mainframe sort of centralized environment

00:05:30.280 --> 00:05:32.800
into more of a departmental server.

00:05:32.800 --> 00:05:35.990
So Vax was what we all ran on.

00:05:36.000 --> 00:05:40.320
I had a VT100 connected to Vax machines.

00:05:40.320 --> 00:05:41.720
Everything was character mode.

00:05:41.720 --> 00:05:45.880
We had literally hundreds of servers
all over the world running things.

00:05:45.880 --> 00:05:49.760
In the mid-90s,
we went through this sort of,

00:05:49.760 --> 00:05:53.660
I call it a faux pas,
this client-server phase.

00:05:53.660 --> 00:05:58.190
I remember in 1995,
we rolled out to 20,000

00:05:58.200 --> 00:05:59.840
sales reps laptops.

00:06:00.280 --> 00:06:02.260
With client-server software on it.

00:06:02.310 --> 00:06:04.240
It was called Salesforce Automation.

00:06:04.260 --> 00:06:06.120
It was going to make
everybody so super productive,

00:06:06.170 --> 00:06:07.020
this would be great.

00:06:07.040 --> 00:06:09.340
The only thing we really got
out of this was on Monday,

00:06:09.340 --> 00:06:12.240
we had 20,000 people with
the same installation.

00:06:12.240 --> 00:06:15.440
And by Friday,
we had 20,000 sort of unique

00:06:15.440 --> 00:06:17.170
installations out there.

00:06:17.200 --> 00:06:20.080
Trying to keep the software
in sync and keep the patches

00:06:20.080 --> 00:06:21.720
going was just impossible.

00:06:21.720 --> 00:06:25.550
Fortunately, in 1995,
this internet thing started

00:06:25.550 --> 00:06:27.040
coming along as well.

00:06:27.040 --> 00:06:32.520
And we migrated all of our applications
to a more... internet-centric approach.

00:06:32.520 --> 00:06:36.400
We sort of got back to a lot of
the attributes of the mainframe.

00:06:36.400 --> 00:06:39.400
The browser became our
3278 sort of screen,

00:06:39.400 --> 00:06:40.270
if you will.

00:06:40.280 --> 00:06:44.400
But we went back through a
major reconsolidation phase.

00:06:44.400 --> 00:06:47.230
Where we took a lot of our
systems and clumped them

00:06:47.240 --> 00:06:50.080
together into single systems.

00:06:50.080 --> 00:06:55.520
Instead of running 187 email servers,
we went down to single email servers.

00:06:55.520 --> 00:06:59.640
One of the things that
allowed us to do this,

00:06:59.640 --> 00:07:02.490
to... sort of consolidate these systems,
is what I'm going to

00:07:02.490 --> 00:07:03.280
be talking about next.

00:07:03.280 --> 00:07:04.600
This grid architecture.

00:07:06.700 --> 00:07:11.380
So there's a lot of people who study this
and they look at systems and they say,

00:07:11.380 --> 00:07:11.780
you know what?

00:07:11.810 --> 00:07:13.780
The way we're doing it is wrong.

00:07:13.780 --> 00:07:19.650
I've got this system that for most of the
year it sits there idle or underutilized.

00:07:19.650 --> 00:07:23.240
And then maybe one or two months out
of the year the thing is really busy.

00:07:23.240 --> 00:07:27.560
I'll use one of my
customers as an example,

00:07:27.560 --> 00:07:28.620
the IRS.

00:07:28.670 --> 00:07:32.550
I know they have a lot
of systems that in...

00:07:32.700 --> 00:07:46.000
[Transcript missing]

00:07:46.460 --> 00:07:49.720
Other systems would pick up at the end
of April to start processing the data.

00:07:49.720 --> 00:07:51.970
And what they've done is
what most of us would do.

00:07:55.830 --> 00:07:57.330
Put somebody in charge of system one.

00:07:57.330 --> 00:08:00.680
He went out, he got his budget,
and he said, you know,

00:08:00.680 --> 00:08:03.550
I need to size for April 15th.

00:08:03.600 --> 00:08:07.300
They gave another
system to somebody else,

00:08:07.300 --> 00:08:09.200
the data warehouse.

00:08:09.220 --> 00:08:12.980
I need to size my system for May.

00:08:12.980 --> 00:08:17.080
And so they go out and they buy
these mega sort of machines.

00:08:17.080 --> 00:08:21.080
Everything's configured
for their peak utilization.

00:08:22.070 --> 00:08:27.640
The availability is fairly good,
not as good as it could be,

00:08:27.660 --> 00:08:30.840
but it's pretty much a poor
way to utilize this because

00:08:30.840 --> 00:08:34.140
at any point in time,
if you added up all the free cycles,

00:08:34.240 --> 00:08:38.730
you probably have three empty computers
sitting out there because one of the

00:08:38.730 --> 00:08:43.070
machines is fully utilized and the
others are not doing much at all.

00:08:45.600 --> 00:08:48.880
So we've come along,
along with a lot of other people.

00:08:48.880 --> 00:08:52.320
I mean, Oracle-- it's not trying to
say we invented the grid,

00:08:52.320 --> 00:08:55.680
or the grid is Oracle,
or Oracle is the grid.

00:08:55.680 --> 00:08:58.320
There's many ways to
approach grid computing.

00:08:58.340 --> 00:09:02.070
For us,
this is our very simple definition--

00:09:02.210 --> 00:09:06.880
coordinated use of many small servers
acting together as one large computer,

00:09:06.880 --> 00:09:11.070
like a bunch of X-SERVs inside of a rack.

00:09:11.480 --> 00:09:14.930
This is different from, say,
IBM's programmatic

00:09:15.160 --> 00:09:18.600
approach to grid computing.

00:09:18.600 --> 00:09:22.540
They have a grid toolkit where
someone can take their problem,

00:09:22.540 --> 00:09:26.820
basically decompose it, parallelize it,
use the grid toolkit,

00:09:26.820 --> 00:09:30.980
and come up with a very scalable
solution for their particular problem.

00:09:30.980 --> 00:09:33.250
We took it from a different perspective.

00:09:33.260 --> 00:09:36.760
We wanted to take applications that
already existed and be able to plug

00:09:36.760 --> 00:09:40.090
them into this grid environment
without having to change them.

00:09:40.100 --> 00:09:43.860
So what we've done is sort of
our grid toolkit is our database,

00:09:43.860 --> 00:09:45.710
our application servers.

00:09:45.720 --> 00:09:49.840
You have an application that you'd like
to run in a grid sort of environment.

00:09:49.840 --> 00:09:54.140
You don't have to program specifically
and build a grid application.

00:09:54.140 --> 00:09:58.680
You just take a database application and
deploy it in a grid-capable database.

00:10:00.400 --> 00:10:02.680
So one of the examples,
this is sort of what I was

00:10:02.680 --> 00:10:03.960
talking about before.

00:10:03.960 --> 00:10:07.110
I've got two systems,
order entry and financials.

00:10:07.110 --> 00:10:09.070
Well, things go very cyclical.

00:10:09.070 --> 00:10:12.840
This is May 31st at Oracle.

00:10:12.840 --> 00:10:15.770
May 31st is the end of our fiscal year.

00:10:15.770 --> 00:10:19.560
We book most of our business
in the last couple of hours for

00:10:19.630 --> 00:10:22.000
the year on that particular day.

00:10:22.000 --> 00:10:24.660
Those order entry systems
are totally maxed out.

00:10:24.670 --> 00:10:28.560
The very next day for the next month,
the system that's really

00:10:28.560 --> 00:10:30.180
busy is our financials.

00:10:30.300 --> 00:10:32.950
So what we've started doing
is consolidating these.

00:10:32.950 --> 00:10:35.600
Instead of having separate
stovepipe systems,

00:10:35.600 --> 00:10:39.250
we put our applications into a
single database with multiple

00:10:39.320 --> 00:10:40.740
servers in front of it.

00:10:40.740 --> 00:10:43.780
So we have an order
entry financial database,

00:10:43.780 --> 00:10:47.530
single database, single set of disks,
but three or four,

00:10:47.560 --> 00:10:51.640
however many computers we need,
able to access that information

00:10:51.680 --> 00:10:56.020
in a read-write fashion,
and we can load balance across those.

00:10:56.020 --> 00:10:59.520
So one month, two out of three nodes
could be order entry.

00:10:59.520 --> 00:11:00.280
The next month, two out of three nodes
could be order entry.

00:11:00.280 --> 00:11:04.380
The next month, two out of three nodes
could be a financial system.

00:11:04.380 --> 00:11:08.520
So we're able to allocate and
reallocate these resources very quickly,

00:11:08.520 --> 00:11:09.800
very dynamically.

00:11:12.120 --> 00:11:16.830
The technology that lets us
do this is something we call

00:11:17.040 --> 00:11:19.580
real application clusters.

00:11:19.810 --> 00:11:21.460
You're all familiar with RAID for disks.

00:11:21.460 --> 00:11:23.740
That just makes sense at this point.

00:11:23.740 --> 00:11:24.820
You understand how that works.

00:11:24.820 --> 00:11:27.860
Maybe you mirror your disks,
and if you lose one, that's okay.

00:11:27.860 --> 00:11:29.030
You still have a mirror of it.

00:11:29.060 --> 00:11:33.650
Maybe you're using RAID 5,
so you have five disks working together,

00:11:33.650 --> 00:11:36.370
and if I lose one, that's okay as well.

00:11:36.380 --> 00:11:41.040
RAC is RAID for your computer systems.

00:11:41.070 --> 00:11:45.140
In a clustered environment like this,
I'm going to have one database.

00:11:45.720 --> 00:11:48.120
Those four disks represent
a single database,

00:11:48.120 --> 00:11:48.880
if you will.

00:11:48.880 --> 00:11:54.280
I'm going to have four instances of
Oracle in this particular example.

00:11:54.280 --> 00:11:57.930
I have four computers that
have full read-write access

00:11:57.930 --> 00:12:00.220
to this single database image.

00:12:00.220 --> 00:12:02.780
I can log into node 1 and run a query.

00:12:02.870 --> 00:12:06.500
I can log into node 4,
run the same exact query.

00:12:06.500 --> 00:12:08.520
It's going against the same data.

00:12:08.520 --> 00:12:11.560
In fact,
I can update the same information in

00:12:11.560 --> 00:12:15.380
node 1 that I can update in nodes 2,
3, and 4.

00:12:15.720 --> 00:12:17.720
This bot is two things.

00:12:17.720 --> 00:12:23.000
First and foremost,
it buys us much higher availability.

00:12:23.000 --> 00:12:27.150
I have to lose three
out of four computers.

00:12:27.410 --> 00:12:30.880
Before I'm in danger of having this
system become totally unavailable.

00:12:30.880 --> 00:12:34.020
So it gives me the ability
to reduce unplanned downtime

00:12:34.020 --> 00:12:37.030
if I lose a power supply,
a CPU goes bad,

00:12:37.030 --> 00:12:39.420
something happens to a RAM chip,
it's okay,

00:12:39.580 --> 00:12:42.130
one of those nodes can go down,
the other nodes will

00:12:42.130 --> 00:12:43.580
pick up the workload.

00:12:43.960 --> 00:12:47.800
The other thing it gave me was the
ability to scale my application out.

00:12:47.830 --> 00:12:51.140
I don't know how big my application
is going to ultimately be.

00:12:51.140 --> 00:12:54.430
All I know is initially
I'm going to have 50 users,

00:12:54.430 --> 00:12:58.450
it might grow to 500,
it might grow to 5,000.

00:12:58.460 --> 00:13:01.530
It's really hard to size systems for
three or four years out sometimes

00:13:01.530 --> 00:13:04.600
because you don't know how popular
some of them are going to be.

00:13:04.600 --> 00:13:08.330
Is the website you're building going to
be the coolest thing since sliced bread

00:13:08.330 --> 00:13:10.140
or is it going to be a ho-hum event?

00:13:10.140 --> 00:13:14.440
Well, you don't want to have to buy a
super large server to... You serve

00:13:14.440 --> 00:13:17.530
up something that becomes a ho-hum
event eventually down the road.

00:13:17.550 --> 00:13:20.410
It'd be much nicer to start
small with the hardware and start

00:13:20.440 --> 00:13:22.240
growing it out over time as needed.

00:13:22.240 --> 00:13:23.950
We did this with our email.

00:13:23.950 --> 00:13:28.890
We consolidated all of our email in
Oracle from 187 servers down to one.

00:13:28.890 --> 00:13:32.040
We started with a two-node rack cluster.

00:13:32.040 --> 00:13:34.100
We needed additional capacity.

00:13:34.100 --> 00:13:37.580
We're now running a three-node
rack cluster on our email.

00:13:37.580 --> 00:13:41.820
Email for Oracle is a
mission-critical sort of application.

00:13:41.820 --> 00:13:46.340
If we don't have email up and running...
We actually can't process orders.

00:13:46.340 --> 00:13:48.610
We can't do order fulfillment.

00:13:48.610 --> 00:13:51.100
We can't do our job basically.

00:13:51.100 --> 00:13:55.120
Our email system,
being able to scale it out horizontally

00:13:55.120 --> 00:13:59.550
by adding additional capacity as well
as having it highly available so that

00:13:59.550 --> 00:14:03.130
if a single node or two nodes even fail,
we still have access

00:14:03.130 --> 00:14:04.610
to our email systems.

00:14:07.300 --> 00:14:09.540
So what was new in 10g?

00:14:09.540 --> 00:14:12.100
RAC is something we
introduced in Oracle 9i.

00:14:12.100 --> 00:14:14.320
In Oracle 8i and before,
you might have known it

00:14:14.320 --> 00:14:15.720
as Oracle Parallel Server.

00:14:15.720 --> 00:14:19.060
In 10g,
we made it infinitely easier to install,

00:14:19.060 --> 00:14:20.860
configure, and manage.

00:14:21.040 --> 00:14:24.490
So, for example,
one of the things we did was add it,

00:14:24.490 --> 00:14:27.280
integrate it, clustering software.

00:14:27.280 --> 00:14:31.090
In the past, if I was using Oracle 9i
and I wanted to run RAC,

00:14:31.090 --> 00:14:35.280
what I'd have to do is get the
Oracle database from Oracle.

00:14:35.280 --> 00:14:38.980
I'd have to get clustering
software from some vendor.

00:14:38.980 --> 00:14:41.840
I'd have to get an operating
system to run this on,

00:14:41.840 --> 00:14:45.580
and then I'd need some sort of
volume management software to manage

00:14:45.580 --> 00:14:47.740
my disks and that infrastructure.

00:14:48.200 --> 00:15:51.800
[Transcript missing]

00:15:51.950 --> 00:15:55.240
We're going to have Oracle running
just enough clustering software to

00:15:55.240 --> 00:15:59.840
make your database cluster just that,
a database cluster.

00:15:59.840 --> 00:16:02.020
I've got two XSERVs.

00:16:02.020 --> 00:16:03.990
I want to pull them together,
have two instances of

00:16:03.990 --> 00:16:05.780
Oracle accessing one set of disks.

00:16:05.780 --> 00:16:11.400
The only thing I need is the
MacÂ OS and the Oracle database.

00:16:11.400 --> 00:16:15.500
Now, if I install it all and
something doesn't work,

00:16:15.500 --> 00:16:17.590
I have one place to call.

00:16:18.040 --> 00:16:22.320
I call Oracle and they say, oh,
do you have this required OS patch?

00:16:22.320 --> 00:16:24.040
No, install it.

00:16:24.060 --> 00:16:26.540
If it still doesn't work,
I still only have one place to call.

00:16:26.540 --> 00:16:31.000
You're not calling Veritas for
support on their file system software.

00:16:31.000 --> 00:16:34.480
You're not calling whomever for
support on their clustering software.

00:16:34.480 --> 00:16:38.180
It's just a database on
top of an operating system.

00:16:38.180 --> 00:16:41.700
It's as easy to support and
manage as a single database on

00:16:41.700 --> 00:16:43.980
a single server would have been.

00:16:43.980 --> 00:16:47.980
So the clustered environment now
becomes pretty much synonymous with,

00:16:48.040 --> 00:16:51.090
a single machine environment.

00:16:52.900 --> 00:18:59.000
[Transcript missing]

00:19:00.600 --> 00:21:00.500
[Transcript missing]

00:21:01.060 --> 00:21:03.080
Then next week, what happens?

00:21:03.380 --> 00:21:07.180
Well, we spend next week figuring
out how many mistakes we made,

00:21:07.200 --> 00:21:10.760
introducing a hot point over
here or contention over there,

00:21:10.780 --> 00:21:14.250
and coming up with another plan so that
we can spend the next weekend sort of

00:21:14.250 --> 00:21:16.600
coming back and rebalancing the I/O.

00:21:16.750 --> 00:21:18.690
And this is a continual process.

00:21:18.870 --> 00:21:21.600
DBAs spend a lot of
time looking at disks,

00:21:21.700 --> 00:21:24.200
moving files around,
trying to eke out the best

00:21:24.200 --> 00:21:27.810
performance they can by making
sure that we achieve this nirvana

00:21:27.820 --> 00:21:30.950
of sort of even I/O distribution.

00:21:31.830 --> 00:21:36.550
So in 10g, what we did was introduced
a database file system.

00:21:36.550 --> 00:21:41.280
So much like you would install
your operating system and say

00:21:41.280 --> 00:21:44.680
use a Unix file system driver or
something like that to build a UFS,

00:21:44.680 --> 00:21:51.490
you're using automatic storage management
or ASM to build a database file system.

00:21:51.740 --> 00:21:55.080
This is a file system
that does one thing.

00:21:55.110 --> 00:22:00.000
It holds files that Oracle ingests
and Oracle processes.

00:22:00.000 --> 00:22:03.150
So it holds redo log files,
it holds data files,

00:22:03.150 --> 00:22:06.900
it can hold database backups,
anything that Oracle sort

00:22:06.900 --> 00:22:09.670
of produces or consumes,
it can hold.

00:22:09.700 --> 00:22:12.640
What you're not putting
here are your documents,

00:22:12.640 --> 00:22:16.910
your HTML files, your spreadsheets,
unless of course you're actually

00:22:16.910 --> 00:22:19.170
putting them inside the database.

00:22:19.180 --> 00:22:21.660
This is purely for database files.

00:22:21.680 --> 00:22:26.420
And then one thing that it does is
it's achieving that goal of even I.O.

00:22:26.420 --> 00:22:29.140
across every single device possible.

00:22:29.140 --> 00:22:32.520
So here, using that same scenario,
we started the year with a

00:22:32.520 --> 00:22:34.440
couple hundred gig of storage.

00:22:34.440 --> 00:22:38.020
We get an additional allocation to us.

00:22:38.020 --> 00:22:41.730
We would be adding these devices
into what's known as a disk group.

00:22:41.790 --> 00:22:43.780
A disk group is what the DBA sees.

00:22:43.780 --> 00:22:45.640
Physically,
at the operating system level,

00:22:45.660 --> 00:22:47.080
you still have all the devices.

00:22:47.080 --> 00:22:49.620
You can manage and monitor
it at the OS level.

00:22:49.620 --> 00:22:51.590
But the DBA sees this disk group.

00:22:51.680 --> 00:22:54.610
We just doubled the
size of this disk group.

00:22:54.680 --> 00:22:58.700
What you would observe at the operating
system level if you cared to watch as

00:22:58.700 --> 00:23:02.290
you added these disks would have been
a whole lot of read activity on the

00:23:02.300 --> 00:23:04.640
top and write activity on the bottom.

00:23:04.680 --> 00:23:08.370
Oracle would be going out
there and picking up extensive

00:23:08.760 --> 00:23:12.690
objects and moving them around,
rebalancing the I.O.

00:23:12.880 --> 00:23:16.580
Conversely, if you needed to take some
storage away from the database,

00:23:16.580 --> 00:23:19.800
I doubled your size,
but that was 50% too much.

00:23:19.800 --> 00:23:23.060
I need to take some of that back for
this other application over here.

00:23:23.060 --> 00:23:26.020
You can go in and actually remove
devices from these disk groups.

00:23:26.040 --> 00:23:29.000
What you'd see then is a whole lot
of read activity on the devices you

00:23:29.000 --> 00:23:33.950
remove and a spreading out of the data
across the remaining devices here.

00:23:34.680 --> 00:23:38.930
So instead of working with files
and mount points and moving things

00:23:38.960 --> 00:23:43.080
around and trying to determine
the optimal I/O layout yourself,

00:23:43.080 --> 00:23:46.930
the database is now doing it
at the database level using the

00:23:46.930 --> 00:23:50.110
equivalent of a database file system.

00:23:52.400 --> 00:23:56.070
So, in short,
ASM is a portable high-performance

00:23:56.070 --> 00:23:57.940
database file system.

00:23:57.940 --> 00:24:01.860
It eliminates the need for
conventional volume management.

00:24:01.860 --> 00:24:05.440
So, for example,
if you get Oracle Standard Edition,

00:24:05.440 --> 00:24:08.490
this thing, RAC,
comes as a feature of that.

00:24:08.500 --> 00:24:12.780
So you could get Oracle Standard Edition,
put it on a two-node cluster

00:24:12.830 --> 00:24:16.020
with two CPUs in each box,
and what you'd be running

00:24:16.020 --> 00:24:19.520
is our clustering software,
ASM to manage the disks.

00:24:19.820 --> 00:24:23.380
That's all just the Oracle database
and the operating system itself.

00:24:23.400 --> 00:24:28.740
There's no other software to sort
of buy or integrate into this mix,

00:24:28.740 --> 00:24:32.770
and in fact, with the Standard Edition,
we don't even support it if you

00:24:32.770 --> 00:24:35.760
attempt to do that because it
makes it too hard to support

00:24:35.760 --> 00:24:37.580
in that particular environment.

00:24:37.580 --> 00:24:42.180
Having it all come from a single place,
the database, managing the database,

00:24:42.180 --> 00:24:43.990
made everything much easier.

00:24:46.990 --> 00:24:51.120
So in short, that was a quick peek at
some of our grid features.

00:24:51.120 --> 00:24:53.170
Grid is not just rack.

00:24:53.170 --> 00:24:55.740
Grid is many things.

00:24:55.740 --> 00:24:58.500
Part of it is ASM,
being able to take the storage

00:24:58.500 --> 00:25:00.300
and allocate it and reallocate it.

00:25:00.400 --> 00:25:03.740
Part of the grid is being able to
slide things into a rack cluster and

00:25:03.740 --> 00:25:05.660
slide things out of a rack cluster.

00:25:05.660 --> 00:25:09.740
Part of the grid is being able to
just move data around in your network.

00:25:10.440 --> 00:25:15.540
But what we looked at today briefly
was predominantly storage-related,

00:25:15.540 --> 00:25:19.040
being able to very easily manage
storage in an Oracle environment.

00:25:19.040 --> 00:25:22.380
Database clustering,
being able to slide servers

00:25:22.380 --> 00:25:24.420
in and out of a rack cluster.

00:25:24.420 --> 00:25:27.190
We didn't really take a look
at the application servers,

00:25:27.190 --> 00:25:29.140
but they have the same capability.

00:25:29.140 --> 00:25:33.380
I sort of used that in an example where
I had 10 app servers and two databases.

00:25:33.380 --> 00:25:37.130
I can steal from the app servers,
unplug those components, if you will,

00:25:37.130 --> 00:25:40.380
from that grid environment,
and slide them over into the database.

00:25:40.440 --> 00:25:44.860
And then one thing we will be taking
a look at is the grid control.

00:25:44.880 --> 00:25:51.960
How do we manage four Oracle instances
as if it were a single Oracle instance?

00:25:51.960 --> 00:25:54.310
Because that's really what you
want to do at the end of the day.

00:25:54.320 --> 00:25:58.300
You don't want to be having to think, oh,
I've got these four different instances.

00:25:58.300 --> 00:26:01.480
I need to remember to do this
over here and that over there.

00:26:01.480 --> 00:26:03.510
I just want to manage it
as though it were one.

00:26:07.000 --> 00:26:10.060
Now onto manageability.

00:26:10.100 --> 00:26:13.760
Oracle 10g could have
been called Oracle 10m,

00:26:13.760 --> 00:26:16.880
and sometimes I wish it had been,
but when Larry Ellison

00:26:16.880 --> 00:26:19.140
sat down and looked at it,
you know, there's manageability,

00:26:19.140 --> 00:26:21.910
it's hard to spell, it's big, it's long,
and then there's grid.

00:26:21.910 --> 00:26:22.850
It's very short.

00:26:22.850 --> 00:26:24.140
So he went with 10g.

00:26:24.140 --> 00:26:30.240
But of the 350 new things
added to the database,

00:26:30.590 --> 00:26:33.130
over one-third of them were
manageability features.

00:26:33.290 --> 00:26:37.820
If you just even look at, for example,
ASM, seems like a grid feature,

00:26:37.820 --> 00:26:39.520
seems like something for big databases.

00:26:39.520 --> 00:26:43.760
It's equally appropriate
for the small installation.

00:26:43.760 --> 00:26:45.420
I'm the Oracle DBA.

00:26:45.420 --> 00:26:49.130
I've been given six
direct-attach SCSI disks,

00:26:49.130 --> 00:26:53.230
and I've been told to
make it perform optimally.

00:26:53.230 --> 00:26:54.080
What do I do?

00:26:54.080 --> 00:26:55.180
Where do I start?

00:26:55.750 --> 00:26:58.690
Well, with six disks, I really don't have
much of an opportunity.

00:26:58.690 --> 00:27:02.630
So give those to ASM,
and let ASM implement this striping

00:27:02.630 --> 00:27:06.930
and mirroring of everything,
achieving the best overall general I.O.

00:27:06.960 --> 00:27:08.340
throughput on this.

00:27:08.340 --> 00:27:10.680
I don't have to worry about those things.

00:27:10.680 --> 00:27:13.860
So ASM is actually a
manageability feature in disguise.

00:27:13.860 --> 00:27:15.680
It's not just a grid feature.

00:27:19.490 --> 00:27:24.650
So I stuck this slide in here
introducing Oracle 10g and I colorized

00:27:24.740 --> 00:27:30.200
the last bullet points because
I think many people gave us or

00:27:30.200 --> 00:27:32.440
conceded the first bullet points.

00:27:32.440 --> 00:27:35.730
Yeah, Oracle pretty much runs
all your applications.

00:27:35.730 --> 00:27:37.680
It's fairly open that way.

00:27:37.680 --> 00:27:41.200
It stores any information you
have from rows and columns

00:27:41.200 --> 00:27:43.240
to spatial to text to images.

00:27:43.760 --> 00:27:45.910
It's scalable, available, reliable.

00:27:45.910 --> 00:27:47.120
It's pretty secure.

00:27:47.120 --> 00:27:50.470
But what I don't think people
would have conceded in the past

00:27:50.470 --> 00:27:52.720
was it was really easy to manage.

00:27:52.720 --> 00:27:56.710
You know, it's as easy as firing
up Microsoft Word and,

00:27:56.710 --> 00:28:01.830
you know, putting in ABC and I've got a
document that I can print out.

00:28:02.020 --> 00:28:07.060
Oracle had a reputation of being
able to scale up really large,

00:28:07.080 --> 00:28:10.900
but maybe not scale down as easily,
if you will.

00:28:10.900 --> 00:28:15.830
So this is something that
we really focused on in the

00:28:15.830 --> 00:28:17.380
release of this software.

00:28:17.850 --> 00:28:22.380
It was the single biggest effort,
not just for 10g in a microcosm,

00:28:22.380 --> 00:28:27.030
but in my years at Oracle,
it was the single biggest effort

00:28:27.030 --> 00:28:29.420
software-wise that I've ever seen.

00:28:29.420 --> 00:28:31.200
They took this seriously.

00:28:31.200 --> 00:28:36.240
Over 50% of the architects and
the engineers within the server

00:28:36.240 --> 00:28:42.180
technologies division were focused
on manageability-related projects.

00:28:42.840 --> 00:28:45.430
This was a widespread effort,
not just in the server

00:28:45.430 --> 00:28:50.410
technology on the database,
but throughout the entire application

00:28:50.410 --> 00:28:52.290
stack and the application server as well.

00:28:52.300 --> 00:28:54.980
So, for example...

00:28:57.510 --> 00:29:01.120
The overriding goal was reduce
the cost of managing simple,

00:29:01.120 --> 00:29:05.550
small Oracle instances by at
least 50%. How can we do that?

00:29:05.580 --> 00:29:08.420
Well, one thing we can do is
reduce administration costs.

00:29:08.420 --> 00:29:11.220
We made many things
automatic versus manual.

00:29:11.940 --> 00:29:17.680
Mark was trying to get
Oracle going on his laptop,

00:29:17.680 --> 00:29:20.180
which is somewhat memory-starved.

00:29:20.180 --> 00:29:22.140
And he was like, well,
how big should I make

00:29:22.170 --> 00:29:24.460
the block buffer cache,
and how big should I make the Java pool,

00:29:24.500 --> 00:29:26.140
and how big should I make the large pool?

00:29:26.140 --> 00:29:28.790
What about the shared pool
and the redo log buffers?

00:29:28.840 --> 00:29:31.120
You know,
I could go through all the pools.

00:29:31.120 --> 00:29:34.660
All the DBAs would be glad to know
we added five more in Oracle 10g,

00:29:34.660 --> 00:29:37.440
so you have like 13 of
them that you could size.

00:29:37.440 --> 00:29:40.230
Well, we took a look at his system,
and I said, you know,

00:29:40.230 --> 00:29:41.800
you got X amount of memory.

00:29:41.800 --> 00:29:44.020
Let's give half of it to Oracle.

00:29:44.020 --> 00:29:48.460
You can set a single memory parameter,
SGA underscore target.

00:29:48.460 --> 00:29:51.680
We set that to 200 meg
or whatever it was,

00:29:51.790 --> 00:29:56.520
and Oracle come up with the best
allocation of memory based on that.

00:29:56.540 --> 00:29:59.970
What it does is it sets up
relatively small-sized pools for

00:29:59.970 --> 00:30:04.000
everything and throws the rest of
the memory into the buffer cache.

00:30:04.030 --> 00:30:06.750
As the other pools become
starved for memory,

00:30:06.970 --> 00:30:09.770
Oracle will come and steal
from the buffer cache and

00:30:09.770 --> 00:30:11.760
give it to these other pools.

00:30:11.820 --> 00:30:13.290
But it made it automatic.

00:30:13.290 --> 00:30:17.300
I didn't have to sit down and think
about how to size these 13 caches.

00:30:17.300 --> 00:30:20.370
I just said, Oracle,
take 200 meg of RAM and divvy

00:30:20.510 --> 00:30:22.240
it up the best way possible.

00:30:23.720 --> 00:30:25.940
Intelligence versus data.

00:30:25.960 --> 00:30:30.890
I call this one giving the
database a long-term memory.

00:30:31.210 --> 00:30:34.710
The DBAs out there know that the
database is very good at telling

00:30:34.710 --> 00:30:36.400
you two things about performance.

00:30:36.400 --> 00:30:38.840
It can tell you...

00:30:39.060 --> 00:30:40.150
What's happening right now?

00:30:40.150 --> 00:30:42.360
I can log in.

00:30:42.600 --> 00:30:43.780
I can see what queries are running.

00:30:43.780 --> 00:30:45.280
I can see how many users are connected.

00:30:45.280 --> 00:30:47.420
I can see who's running
a long-running query.

00:30:47.420 --> 00:30:49.280
I can see how long the
queries have been running for.

00:30:49.280 --> 00:30:53.100
I can see how much work the queries
that are still running have done.

00:30:53.120 --> 00:30:57.720
The other thing it can tell me is, well,
since you started me up two months ago,

00:30:57.850 --> 00:30:59.770
I did X number of transactions.

00:30:59.770 --> 00:31:02.360
I ran this query so
many billions of times.

00:31:02.360 --> 00:31:04.580
I've done this over and over again.

00:31:05.060 --> 00:31:09.240
What it can't tell you is, at noon,
the performance problem that

00:31:09.240 --> 00:31:13.420
was being experienced by your
end users was caused by George.

00:31:13.420 --> 00:31:16.940
That information just doesn't
exist in the database anywhere.

00:31:16.940 --> 00:31:20.500
It had a very short-term memory,
what's happening right now,

00:31:20.500 --> 00:31:23.250
and then it had this
averaged long-term memory,

00:31:23.250 --> 00:31:25.380
but it had no real information.

00:31:25.380 --> 00:31:29.330
You couldn't log in and find out anything
truly useful about the immediate past

00:31:29.330 --> 00:31:31.380
because it always happened that way.

00:31:31.380 --> 00:31:32.450
The DBA goes out to lunch.

00:31:32.450 --> 00:31:33.190
He comes back.

00:31:33.190 --> 00:31:34.920
The red light is blinking on their phone.

00:31:35.000 --> 00:31:35.530
They pick it up.

00:31:35.530 --> 00:31:40.020
It's George saying, hey, at noon,
the system is really, really slow.

00:31:40.020 --> 00:31:42.040
I need to know two things from you.

00:31:42.050 --> 00:31:44.090
Why and what are you
going to do about it?

00:31:44.140 --> 00:31:47.000
In the past,
unless you had accidentally been sitting

00:31:47.060 --> 00:31:51.140
there watching the system at noon,
you'd really have no way of knowing.

00:31:51.140 --> 00:31:54.950
The database is now constantly
benchmarking itself.

00:31:54.960 --> 00:31:58.950
When the DBA comes back at 1 o'clock,
slide a little window back

00:31:59.070 --> 00:32:01.740
in the database console,
drop it down,

00:32:01.740 --> 00:32:04.970
they can see what was happening
at noon inside the database.

00:32:04.980 --> 00:32:07.310
For the first time,
they'll be able to call

00:32:07.310 --> 00:32:10.480
George back and say,
dude, we've told you so many times,

00:32:10.480 --> 00:32:12.990
don't hit the stop and the reload button.

00:32:13.000 --> 00:32:17.130
Just let the page finish because the
performance problem was you submitting

00:32:17.130 --> 00:32:20.600
the same monster query 15 times,
and we fixed it by revoking

00:32:20.600 --> 00:32:22.260
your access to the system.

00:32:22.320 --> 00:32:27.940
But the DBA never had
that information before.

00:32:27.940 --> 00:32:29.560
It's always been guesswork.

00:32:29.590 --> 00:32:33.240
I've always been afraid of answering
that phone call because it's like,

00:32:33.240 --> 00:32:34.960
I don't know what was going on.

00:32:34.960 --> 00:32:37.750
I don't know what was going on at 3
a.m., and I have no way of telling

00:32:37.790 --> 00:32:39.290
you what was going on at 3 a.m.

00:32:41.130 --> 00:32:42.280
Reduce capital expenditure.

00:32:42.290 --> 00:32:45.400
This is what I was talking about
by sort of right-sizing the system.

00:32:45.400 --> 00:32:47.520
Adaptive versus oversized.

00:32:47.520 --> 00:32:50.950
I'll add capacity as I need.

00:32:50.960 --> 00:32:55.110
I don't have to buy a machine
that can support up to 128 CPUs,

00:32:55.110 --> 00:32:57.600
which is a quite expensive machine.

00:32:57.600 --> 00:33:01.800
I can start with smaller machines
and add more of them over time.

00:33:02.510 --> 00:33:04.600
Integrative versus third-party.

00:33:04.600 --> 00:33:06.620
I want to do this cluster thing.

00:33:06.620 --> 00:33:09.740
I need to buy two pieces of software,
not four.

00:33:09.740 --> 00:33:13.290
So I've cut out sort of this
volume management software that

00:33:13.350 --> 00:33:17.210
I don't need and this clustering
software that I don't need.

00:33:17.220 --> 00:33:20.820
And the last part here is
reducing the failure cost.

00:33:20.820 --> 00:33:23.220
So proactive versus corrective.

00:33:23.220 --> 00:33:26.200
That SGA target that I was talking about.

00:33:26.200 --> 00:33:29.740
One of the very important pools
inside of an Oracle database is

00:33:29.740 --> 00:33:31.820
this thing called a shared pool.

00:33:33.170 --> 00:33:38.340
Shared pools where we store parsed
representations of SQL and PL/SQL and

00:33:38.340 --> 00:33:40.280
other pretty important stuff.

00:33:40.350 --> 00:33:45.460
A very common error is an Aura 4030,
unable to allocate X number

00:33:45.460 --> 00:33:46.770
of bytes in the shared pool.

00:33:46.820 --> 00:33:49.990
Used to be that the end users
would just get that message back.

00:33:50.010 --> 00:33:53.840
Not very useful, have to call the DBA,
DBA's got to sort of figure out

00:33:53.910 --> 00:33:55.800
what went wrong and fix the problem.

00:33:55.820 --> 00:33:59.410
If I'm using this automatic
memory tuning before returning

00:33:59.410 --> 00:34:03.740
an Aura 4030 back to an end user,
the database is going to look and say,

00:34:03.740 --> 00:34:07.540
can I sort of steal something from
somebody else at this point in time?

00:34:07.540 --> 00:34:11.110
Maybe I can shrink this pool and take
it and use it over here because we

00:34:11.110 --> 00:34:14.990
were using this memory over there,
but we're not using it right now.

00:34:15.000 --> 00:34:18.160
So let's give it up from that
purpose and move it over here.

00:34:18.160 --> 00:34:22.160
So it's proactively fixing itself
rather than reactively waiting for

00:34:22.160 --> 00:34:24.430
DBA to correct itself or correct it.

00:34:25.260 --> 00:34:29.260
And the other one is act and
succeed versus trial and error.

00:34:29.260 --> 00:34:33.100
I know a lot of DBA's,
I've been guilty of this myself,

00:34:33.100 --> 00:34:34.860
the system's running slow.

00:34:35.100 --> 00:34:37.660
Well in the past, you know,
we did this and it sort

00:34:37.660 --> 00:34:39.120
of made things better.

00:34:39.140 --> 00:34:41.920
We rebuilt an index,
so we'll go and try that.

00:34:41.980 --> 00:34:42.600
Is it better yet?

00:34:42.820 --> 00:34:43.410
No.

00:34:43.420 --> 00:34:46.110
Okay, re-organ tables,
that'll make things faster,

00:34:46.110 --> 00:34:47.790
so we'll rebuild some tables.

00:34:47.920 --> 00:34:49.260
Is it faster yet?

00:34:49.500 --> 00:34:50.100
No.

00:34:50.100 --> 00:34:52.900
The database,
because it's now benchmarking itself,

00:34:52.930 --> 00:34:55.570
can actually come back
and give you advice.

00:34:55.850 --> 00:34:59.700
Hey, I installed this database
console on my 10G database.

00:34:59.710 --> 00:35:01.020
It was running great.

00:35:01.190 --> 00:35:04.040
One day it came back and said,
your database is running five times

00:35:04.040 --> 00:35:06.580
slower today than it was in the past.

00:35:06.580 --> 00:35:09.580
We're running 500% slower.

00:35:09.580 --> 00:35:12.220
Things are taking five times as long.

00:35:12.310 --> 00:35:14.460
We've identified that there's
these new queries that have

00:35:14.460 --> 00:35:15.640
been introduced into the system.

00:35:15.640 --> 00:35:17.660
They never existed before.

00:35:17.840 --> 00:35:22.070
And if you push this button over here,
we'd actually like to take these

00:35:22.070 --> 00:35:24.140
queries and tune them for you.

00:35:24.140 --> 00:35:25.420
We can suggest indexes that you
could add to it to make them faster,

00:35:25.510 --> 00:35:29.000
materialize views,
or even how to simply rewrite the query.

00:35:29.210 --> 00:35:32.450
So the database is sort
of watching itself,

00:35:32.480 --> 00:35:35.100
waiting for its performance
characteristics to change,

00:35:35.300 --> 00:35:37.970
trying to figure out why,
and then notifying you.

00:35:38.040 --> 00:35:41.220
So we're not coming in and sort of
guessing what can fix the system.

00:35:41.380 --> 00:35:44.670
The system's telling us, yeah,
there is a problem,

00:35:44.820 --> 00:35:48.900
and here is the probable cause
and solution for that problem.

00:35:49.590 --> 00:35:51.100
So let's take a look
at the life of a DBA,

00:35:51.100 --> 00:35:52.840
see where they spend all their time.

00:35:52.840 --> 00:35:57.940
About 18% of it is in install, create,
and configure.

00:35:57.940 --> 00:36:01.430
So this came out of a survey from
the International Oracle User Group.

00:36:01.430 --> 00:36:03.810
DBAs, what do you actually do?

00:36:03.830 --> 00:36:07.560
So it's 18% install, create,
and configure.

00:36:07.560 --> 00:36:09.810
That sort of boggled
my mind a little bit.

00:36:09.810 --> 00:36:11.270
I thought that was a lot.

00:36:11.280 --> 00:36:13.400
You install a database
once and then it's over.

00:36:13.400 --> 00:36:14.680
It's forgotten, right?

00:36:14.880 --> 00:36:17.820
Well, no, because I install the database
for this developer so that

00:36:17.820 --> 00:36:19.020
he can build his prototype.

00:36:19.100 --> 00:36:21.550
Then I install it for this
development team so they can take

00:36:21.550 --> 00:36:23.340
the prototype a little bit further.

00:36:23.340 --> 00:36:27.040
Then I need to move it over to this
QA system and do it over here again.

00:36:27.040 --> 00:36:29.280
And then I need to put it
into a production environment.

00:36:29.280 --> 00:36:32.020
So every database might
actually have five,

00:36:32.080 --> 00:36:34.130
six, seven installs behind it.

00:36:34.160 --> 00:36:37.050
And people are actually creating
and destroying these database

00:36:37.060 --> 00:36:38.880
instances relatively frequently.

00:36:38.880 --> 00:36:44.460
So one of the things we did in
10g was to make the database.

00:36:45.020 --> 00:36:47.260
Fast and lightweight
as far as installation.

00:36:47.260 --> 00:36:50.860
We got it down to a single disk,
if you will.

00:36:50.860 --> 00:36:54.880
It used to be three to five CDs to
actually install the database.

00:36:54.880 --> 00:36:56.120
It's now one CD.

00:36:56.120 --> 00:36:57.390
No, we didn't cheat.

00:36:57.410 --> 00:36:58.710
We didn't put it on a DVD.

00:36:58.720 --> 00:37:00.740
It's actually a CD.

00:37:00.740 --> 00:37:04.220
What we did was we went back
and took a look and said,

00:37:04.220 --> 00:37:05.660
what is this file?

00:37:05.660 --> 00:37:07.460
It's been here since version five.

00:37:07.480 --> 00:37:08.460
What does it mean?

00:37:08.460 --> 00:37:10.590
Well, we don't need that one anymore.

00:37:10.600 --> 00:37:13.420
And we cleaned out a lot of the stuff.

00:37:13.420 --> 00:37:14.250
Went back.

00:37:14.890 --> 00:37:18.330
And we have one single base image CD now.

00:37:18.340 --> 00:37:19.800
You stick this in.

00:37:19.840 --> 00:37:24.070
15, 20 minutes later,
you have a database installed up

00:37:24.070 --> 00:37:28.100
and running with the seed database,
the starter database, and everything.

00:37:28.100 --> 00:37:31.440
An out-of-the-box database console.

00:37:31.440 --> 00:37:34.120
So it used to be I install the database.

00:37:34.120 --> 00:37:35.210
Now I want to manage it.

00:37:35.360 --> 00:37:39.170
Oh, go get the CD back so we can
install Enterprise Manager and

00:37:39.170 --> 00:37:41.650
set it up and configure it
and everything else like that.

00:37:41.720 --> 00:37:44.640
We've taken the
Enterprise Manager database.

00:37:44.880 --> 00:37:47.110
We've taken the database
functionality and actually moved

00:37:47.110 --> 00:37:48.400
it inside the database itself.

00:37:48.420 --> 00:37:51.220
So now when I install the
database and I start it up,

00:37:51.220 --> 00:37:54.680
it comes with a very small Java web
server sitting outside of it.

00:37:54.700 --> 00:37:57.480
The Java web server is just
making stored procedure calls

00:37:57.480 --> 00:37:58.940
basically into the database.

00:37:58.940 --> 00:38:03.410
And the database has got the
Enterprise Manager tool in it.

00:38:03.420 --> 00:38:06.690
So no longer am I installing the
database and then hunting around for

00:38:06.690 --> 00:38:09.520
a CD to figure out how to install
the tool to manage the database.

00:38:09.520 --> 00:38:10.860
I install the database.

00:38:10.880 --> 00:38:14.830
The last step is, hey,
go to this URL and start managing me.

00:38:14.880 --> 00:38:17.850
This is how you're going
to interact with me.

00:38:18.910 --> 00:38:21.090
Six percent in loading data.

00:38:21.090 --> 00:38:23.440
So we took a tool.

00:38:23.440 --> 00:38:26.630
We've had this tool called
export and import forever.

00:38:26.670 --> 00:38:29.780
And it's been virtually
unchanged forever.

00:38:29.800 --> 00:38:33.090
And every DBA knows exactly
what export-import is.

00:38:33.110 --> 00:38:34.160
They know the limits.

00:38:34.160 --> 00:38:36.640
They know how to kick it and
make it do what they want.

00:38:36.640 --> 00:38:38.300
But it's not very flexible.

00:38:38.300 --> 00:38:43.040
Fast is something people might
not have attributed to it.

00:38:43.090 --> 00:38:45.830
So for the first time in many years,
we rewrote this.

00:38:46.110 --> 00:38:50.060
They're now called import
DP and export DP for data pump.

00:38:50.070 --> 00:38:58.240
The export is faster,
but not as faster as the import is.

00:38:58.240 --> 00:39:00.160
See, export was already pretty fast.

00:39:00.160 --> 00:39:03.020
Using a direct path export,
there was only so much we could do.

00:39:03.020 --> 00:39:06.040
We're now pretty much gated by
the speed of the disk as far as

00:39:06.090 --> 00:39:08.140
getting data out of the database.

00:39:08.140 --> 00:39:10.740
But the import, we did a lot to.

00:39:10.740 --> 00:39:13.600
Made it use direct path operations.

00:39:13.600 --> 00:39:15.140
So it's bypassing the SQL engine.

00:39:15.140 --> 00:39:15.820
So it's able to forward and forward.

00:39:15.860 --> 00:39:20.970
So if you've ever tried to import
a 100-gigabyte database dump file,

00:39:20.970 --> 00:39:26.410
you know that was a long process because
it would insert row after row after row.

00:39:26.410 --> 00:39:30.970
Then it would create an index,
create an index, create an index.

00:39:30.970 --> 00:39:35.690
Now it's going to do all those things
in parallel as much as possible.

00:39:35.690 --> 00:39:39.370
So it's blown as much data in
as it can as fast as it can.

00:39:39.370 --> 00:39:43.560
Then creating indexes in
parallel as fast as they can.

00:39:43.560 --> 00:39:45.820
Basically utilizing the index.

00:39:45.840 --> 00:39:48.930
So it's a really good way to get a
lot of data out of the entire machine.

00:39:48.930 --> 00:39:49.870
It's restartable.

00:39:49.870 --> 00:39:53.070
One of the bullet points I don't have
on here that I think is the neatest one

00:39:53.070 --> 00:39:56.310
is I can actually start and export sort
of a server process on one machine,

00:39:56.320 --> 00:39:59.540
stream it over the network to an
import process running someplace else,

00:39:59.540 --> 00:40:01.970
and it's sort of piping
it into my database.

00:40:01.970 --> 00:40:04.940
So I can actually stream
my information from,

00:40:04.940 --> 00:40:09.060
say, an HPUX box across the network
and import it into my database

00:40:09.130 --> 00:40:13.290
running on a Mac or take it from the
Mac and stream it over to Linux or

00:40:13.290 --> 00:40:15.820
wherever I need the information.

00:40:15.840 --> 00:40:20.120
So it's a little bit like
using database links,

00:40:20.120 --> 00:40:24.260
but doing direct path operations
in a massively parallel fashion.

00:40:26.340 --> 00:40:30.980
Here's the big one, 55% of the time,
ongoing system maintenance.

00:40:30.980 --> 00:40:36.150
So I've got a DBA, his name's Fred,
he manages 14 Oracle instances,

00:40:36.150 --> 00:40:39.260
and his morning is pretty
boring because it's always the

00:40:39.290 --> 00:40:40.800
same thing over and over again.

00:40:40.800 --> 00:40:42.050
It's a little bit like Groundhog Day.

00:40:42.060 --> 00:40:45.040
He comes in, logs into server one, hi,
how you doing?

00:40:45.040 --> 00:40:45.730
Are you up?

00:40:45.730 --> 00:40:47.260
Are you running out of space?

00:40:47.260 --> 00:40:48.390
Did the backups work?

00:40:48.420 --> 00:40:50.920
Am I running out of
space in the file system?

00:40:50.920 --> 00:40:53.120
Looking at everything,
did anybody report any

00:40:53.120 --> 00:40:54.360
problems against you?

00:40:54.360 --> 00:40:56.760
Then he logs out and goes to
the next server and sort of

00:40:56.760 --> 00:40:59.350
repeats the whole process,
and hopefully it's a boring

00:40:59.350 --> 00:41:02.530
morning that he doesn't find out
any problems actually went on.

00:41:02.540 --> 00:41:06.280
Now with the database sort of
watching itself when he comes in,

00:41:06.280 --> 00:41:08.960
the databases tell him
everything was okay,

00:41:08.960 --> 00:41:11.110
you don't even need to look at me.

00:41:11.160 --> 00:41:12.040
We're running fine.

00:41:12.040 --> 00:41:13.340
We're not out of space.

00:41:13.340 --> 00:41:14.540
Nothing bad happened.

00:41:14.540 --> 00:41:16.050
The backups succeeded.

00:41:16.140 --> 00:41:18.480
Or there would be a red
blinking light saying,

00:41:18.480 --> 00:41:20.060
help, I need help over here.

00:41:20.060 --> 00:41:23.580
Performance was going through
the tubes at 3:00 in the morning.

00:41:23.580 --> 00:41:24.620
Here's what was wrong.

00:41:24.620 --> 00:41:26.450
Here's what I think you
need to do about it.

00:41:26.460 --> 00:41:29.540
And then Fred,
who's the professional DBA,

00:41:29.540 --> 00:41:34.670
looks at that advice and treats it as
advice from a junior DBA and either does

00:41:34.670 --> 00:41:37.680
it or refines it or ignores it entirely.

00:41:38.700 --> 00:41:42.940
So this diagram is supposed to
represent what we have today.

00:41:42.940 --> 00:41:45.540
There's a database,
and then each one of these

00:41:45.540 --> 00:41:48.920
red boxes is sort of a point
solution outside the database.

00:41:48.920 --> 00:41:53.420
My developers have a tool that
they use to do their application

00:41:53.540 --> 00:41:57.600
and sort of SQL management,
and they're tuning SQL queries

00:41:57.600 --> 00:41:59.950
and rewrites and things like that.

00:42:00.480 --> 00:42:03.520
My system administrators have
system resource management tool.

00:42:03.520 --> 00:42:04.780
How's my system doing?

00:42:04.780 --> 00:42:05.660
How's my disk?

00:42:05.660 --> 00:42:08.820
The memory on the box, the CPUs.

00:42:08.840 --> 00:42:11.530
The DBAs have their
backup and recovery tools.

00:42:11.530 --> 00:42:14.980
Then they'll get another tool
to do some space management.

00:42:14.980 --> 00:42:17.980
Hey,
go look for fragmentation in my database.

00:42:17.980 --> 00:42:20.410
Suggest objects that need to be fixed.

00:42:20.410 --> 00:42:22.730
Help me reorg and things like that.

00:42:22.760 --> 00:42:25.800
And then lastly,
there's storage management software

00:42:25.800 --> 00:42:28.070
like a Veritas or something like that.

00:42:28.080 --> 00:42:34.150
Our goal with 10g... is to actually
move that all into the database.

00:42:34.160 --> 00:42:37.380
So if I want to tune SQL...

00:42:37.670 --> 00:42:38.960
The database is running the SQL.

00:42:38.960 --> 00:42:43.970
The database knows better than anybody
else what could actually help the

00:42:43.970 --> 00:42:47.980
SQL go better because it's got this
thing called an optimizer inside of it.

00:42:47.980 --> 00:42:51.480
It could say, you know,
what if we had an index on these columns?

00:42:51.480 --> 00:42:54.910
How would the SQL probably
perform given that?

00:42:54.930 --> 00:42:58.400
That's the entire goal or job of
an optimizer is to look at all the

00:42:58.400 --> 00:43:02.740
possible combinations of query plans
given the tables and indexes it has.

00:43:02.740 --> 00:43:06.730
It can now hypothesize and say, you know,
what if we had these extra

00:43:06.730 --> 00:43:07.580
two indexes over here?

00:43:07.600 --> 00:43:12.770
We estimate this query would consume
one-fifth the resources it is right now.

00:43:12.890 --> 00:43:17.040
Or if you created this materialized view,
we would be able to execute this query

00:43:17.040 --> 00:43:21.750
with one-tenth the logical IOs instead of
the millions that you're doing right now.

00:43:21.760 --> 00:43:25.460
Same with system resource
management and space management.

00:43:25.460 --> 00:43:28.900
The database sort of knows as
you're gathering statistics

00:43:28.900 --> 00:43:32.560
and things like that,
this object is 50% white space.

00:43:32.560 --> 00:43:36.110
Well, once I've identified that
an object is 50% white space

00:43:36.110 --> 00:43:37.560
because I sort of deluged.

00:43:37.600 --> 00:43:39.440
I deleted every other row
or something like that.

00:43:39.440 --> 00:43:42.090
The next step is, well,
I need to reorg it.

00:43:42.100 --> 00:43:46.000
Well, in 10G,
the database recognizes that the

00:43:46.190 --> 00:43:49.120
object is in need of a reorg,
step one.

00:43:49.120 --> 00:43:52.080
And step two, it actually has a command
to shrink segments now.

00:43:52.080 --> 00:43:54.470
So I could say, hey,
take this table and compact it.

00:43:54.480 --> 00:43:57.660
And it's going to do things like
read the table from the bottom up

00:43:57.660 --> 00:44:00.470
and find the last row and sort of
delete it and reinsert it at the

00:44:00.520 --> 00:44:04.730
top of the table so that the table
will become 50% full at the top,

00:44:04.730 --> 00:44:06.840
50% empty at the bottom.

00:44:06.840 --> 00:44:09.720
And it will redraw the high
watermark for that segment and

00:44:09.720 --> 00:44:11.260
give us all that space back.

00:44:11.260 --> 00:44:14.620
But our goal was to take all these
things that we always had outside

00:44:14.620 --> 00:44:16.630
the database and move them inside.

00:44:18.520 --> 00:44:22.500
So for example, automatic tuning of SQL.

00:44:22.500 --> 00:44:26.260
We have bad SQL in a
packaged application.

00:44:26.510 --> 00:44:27.740
This is sort of a list of steps.

00:44:27.740 --> 00:44:29.280
You're not expected to read these.

00:44:29.280 --> 00:44:33.990
Of what you would do in 9i versus 10g,
in 9i, you'd have to first identify

00:44:34.040 --> 00:44:35.280
that there is a problem.

00:44:35.290 --> 00:44:37.060
This query is running
for like five hours.

00:44:37.270 --> 00:44:38.330
There's the problem.

00:44:38.470 --> 00:44:41.760
Then you'd have to try and figure out,
well, could the query actually

00:44:41.760 --> 00:44:43.260
run in less than five hours?

00:44:43.260 --> 00:44:46.150
And I'd play around with it,
and I'd tune it, and I'd find, hey,

00:44:46.150 --> 00:44:49.230
you know if I rewrote it like this,
or I hinted it, or I did this,

00:44:49.230 --> 00:44:51.260
the query runs really fast.

00:44:51.360 --> 00:44:53.300
But it's in a third party application.

00:44:53.360 --> 00:44:55.510
So you can't change the code.

00:44:55.520 --> 00:44:56.720
You can't change the query.

00:44:56.810 --> 00:44:59.450
So you call up their support,
and you spend a couple hours convincing

00:44:59.450 --> 00:45:01.020
them that there is a problem.

00:45:01.160 --> 00:45:03.990
And then maybe a couple of days
later or a couple of weeks later,

00:45:03.990 --> 00:45:05.260
they develop a patch.

00:45:05.420 --> 00:45:08.640
And then you install this patch,
which is sort of downtime as

00:45:08.640 --> 00:45:10.050
you're patching your system.

00:45:10.230 --> 00:45:13.090
And one of three things will happen.

00:45:13.890 --> 00:45:15.520
One thing that could
happen is nothing changes,

00:45:15.520 --> 00:45:18.500
doesn't fix the problem
on your particular box.

00:45:18.500 --> 00:45:21.600
The other one is it could
actually fix the problem,

00:45:21.600 --> 00:45:25.880
but the more probable outcome is the
installation of that patch destabilizes

00:45:25.880 --> 00:45:30.080
50 other modules inside of this system,
and you end up worse off than

00:45:30.080 --> 00:45:32.020
you were in the beginning.

00:45:32.020 --> 00:45:35.230
In 10g,
what's going to happen or does happen

00:45:35.230 --> 00:45:37.800
is the database identifies bad SQL.

00:45:37.800 --> 00:45:40.090
It automatically pops
to the top and it says,

00:45:40.090 --> 00:45:41.300
you've got this SQL.

00:45:41.300 --> 00:45:42.620
It is a problem.

00:45:42.830 --> 00:45:43.830
We need to take a look at it.

00:45:43.880 --> 00:45:45.860
It's got many things it could do to it.

00:45:45.860 --> 00:45:48.090
It could advise you on indexes,
materialized views.

00:45:48.100 --> 00:45:51.550
It could tell you how to rewrite it,
but those aren't always achievable in

00:45:51.550 --> 00:45:53.900
this third-party software environment.

00:45:53.900 --> 00:45:56.980
The last thing it can do is
actually analyze a query now,

00:45:56.980 --> 00:45:59.860
much like DBAs have been
able to analyze tables.

00:45:59.860 --> 00:46:01.180
It's going to take that query.

00:46:01.180 --> 00:46:03.620
It's going to say, look,
it's a 10-table join.

00:46:03.620 --> 00:46:07.240
The problem is we don't understand the
relationship between table 1 and table 2.

00:46:07.240 --> 00:46:10.300
Let's understand the relationship
between table 1 and table 2,

00:46:10.300 --> 00:46:12.240
given this predicate that you're using.

00:46:12.820 --> 00:46:16.140
The database analyzes this query,
stores extended statistics

00:46:16.140 --> 00:46:17.360
in the data dictionary.

00:46:17.360 --> 00:46:20.280
Then the next time you parse
and optimize that query,

00:46:20.280 --> 00:46:23.140
it says, you know,
when I join these two tables together,

00:46:23.140 --> 00:46:27.020
without this extended statistics,
I thought I'd get 5,000 rows.

00:46:27.020 --> 00:46:29.970
But now I know because of
these extra statistics,

00:46:29.970 --> 00:46:33.080
I'm going to get 5 million
rows out of this join.

00:46:33.080 --> 00:46:36.240
I'm going to come up with a
totally different query plan.

00:46:36.240 --> 00:46:40.140
The DBA can take any query, analyze it,
store that information

00:46:40.140 --> 00:46:42.940
in the data dictionary,
so that the next time

00:46:42.940 --> 00:46:45.370
that query is parsed,
it comes up with the

00:46:45.370 --> 00:46:47.070
right plan all by itself.

00:46:47.120 --> 00:46:51.050
It cuts out that loop of go back to
the developers who wrote the query

00:46:51.050 --> 00:46:54.410
in the first place and try to figure
out a better way to run this query,

00:46:54.410 --> 00:46:56.310
give the optimizer more information.

00:46:58.110 --> 00:46:59.160
Out of memory errors.

00:46:59.160 --> 00:47:01.660
This is the one that I used before.

00:47:01.660 --> 00:47:04.140
Hey,
I'm running a query and I get this Aura

00:47:04.280 --> 00:47:07.200
4031 or an Aura 4030 out of memory.

00:47:07.200 --> 00:47:08.990
What do I do?

00:47:08.990 --> 00:47:10.840
Well, I call the DBA.

00:47:10.840 --> 00:47:13.660
The DBA has to look and say, okay, yeah,
the buffer pool is a little

00:47:13.660 --> 00:47:14.780
bit bigger than we need it.

00:47:14.780 --> 00:47:17.360
Let's shrink the buffer pool
and we'll grow the shared pool.

00:47:17.360 --> 00:47:19.350
And now the problem's gone away.

00:47:19.360 --> 00:47:24.300
If I'm using the automatic memory
management inside the database in 10g,

00:47:24.300 --> 00:47:26.730
well,
that space is intentionally left blank

00:47:26.740 --> 00:47:31.820
because that's not going to happen
in that particular installation.

00:47:31.820 --> 00:47:35.320
If the shared pool runs out of memory,
we're automatically going to look

00:47:35.320 --> 00:47:38.560
and identify where we can get
some from and slide it over there.

00:47:38.580 --> 00:47:39.220
View this session if you are an
in-house developer looking for a highly

00:47:39.220 --> 00:47:39.690
scalable database on MacÂ OSÂ X Server.

00:47:39.690 --> 00:47:39.690
What do I do?

00:47:39.690 --> 00:47:39.690
Well, I call the DBA.

00:47:39.690 --> 00:47:39.690
The DBA has to look and say, okay, yeah,
the buffer pool is a little

00:47:39.690 --> 00:47:39.690
bit bigger than we need it.

00:47:39.690 --> 00:47:39.690
Let's shrink the buffer pool
and we'll grow the shared pool.

00:47:39.690 --> 00:47:39.690
And now the problem's gone away.

00:47:40.170 --> 00:47:42.380
The last example,
mistakenly dropped table.

00:47:42.380 --> 00:47:46.780
It's the problem of right table,
wrong database.

00:47:46.780 --> 00:47:50.940
It's that late at night as the
pinky leaves the inner key,

00:47:51.030 --> 00:47:54.810
you get that cold feeling and your
stomach just falls through and you go,

00:47:54.820 --> 00:47:56.560
oh, I did a bad thing.

00:47:56.580 --> 00:48:01.710
Nine Eye,
we'd prepare an auxiliary instance.

00:48:01.720 --> 00:48:04.080
We'd use RMAN to restore the table space.

00:48:04.220 --> 00:48:07.830
We'd do a point-in-time recovery of that
table space to right before the drop,

00:48:07.860 --> 00:48:10.300
and then we'd transport that
data out and move it over.

00:48:10.300 --> 00:48:14.300
This is probably at least an hour
because we're going to tapes.

00:48:14.300 --> 00:48:15.320
We're going to get backups.

00:48:15.320 --> 00:48:18.320
We're going through this process
that we don't go through every

00:48:18.320 --> 00:48:19.880
day in order to recover this.

00:48:19.880 --> 00:48:25.260
10g, we now treat tables as though
they're like recycle bin objects.

00:48:25.260 --> 00:48:28.100
When I drag something into my trash,
it doesn't actually delete it.

00:48:28.100 --> 00:48:29.050
It sort of hides it.

00:48:29.100 --> 00:48:31.040
I can go back and unhide it later.

00:48:31.040 --> 00:48:34.200
When you drop a table,
we don't actually drop it anymore.

00:48:34.200 --> 00:48:37.620
We sort of hide it from you,
and we give you the ability to undrop

00:48:37.620 --> 00:48:39.800
this object at a later point in time.

00:48:39.800 --> 00:48:42.770
Instead of your system being
down for an hour or so while

00:48:42.770 --> 00:48:45.830
you're recovering this table,
it's back up immediately

00:48:45.890 --> 00:48:49.380
because as soon as you drop it,
you undrop it and bring it back.

00:48:51.560 --> 00:48:54.580
And then the last part we're
going to look at here before

00:48:54.620 --> 00:48:58.320
getting into HTMLDB is the install,
create, and configure again,

00:48:58.320 --> 00:49:00.540
but also the ongoing
software maintenance.

00:49:00.540 --> 00:49:04.990
This is a quarter of their time is spent
dealing with software-related issues,

00:49:05.030 --> 00:49:07.590
not even data-related issues, really.

00:49:09.490 --> 00:49:11.480
Enterprise Manager version 4.

00:49:11.480 --> 00:49:14.720
This is what we also
call our grid control.

00:49:14.720 --> 00:49:20.010
Its main purpose in life is managing
groups of systems and these grids,

00:49:20.010 --> 00:49:21.040
if you will.

00:49:21.040 --> 00:49:25.240
They took the database functionality
out of Enterprise Manager.

00:49:25.240 --> 00:49:27.570
Many DBAs looked at
Enterprise Manager and said,

00:49:27.570 --> 00:49:31.220
that's the tool I use to create
users and things like that,

00:49:31.330 --> 00:49:33.080
administer my database.

00:49:33.080 --> 00:49:35.360
We moved that all into
the database console.

00:49:35.360 --> 00:49:37.440
The database has that functionality now.

00:49:37.660 --> 00:49:40.190
Enterprise Manager needed to
find something else to do,

00:49:40.190 --> 00:49:41.630
a different purpose in life.

00:49:41.630 --> 00:49:45.020
So it came up with,
I'm going to manage your systems.

00:49:45.020 --> 00:49:47.440
I'm going to manage your software.

00:49:47.440 --> 00:49:50.980
I'm going to fix the problem
that we have of this create,

00:49:50.980 --> 00:49:54.070
configure, install, patch, maintain.

00:49:56.070 --> 00:49:59.310
Two topics that I picked out of this,
the two that intrigued me most.

00:49:59.310 --> 00:50:01.590
One is automated software cloning.

00:50:01.590 --> 00:50:05.800
That DBA has asked, hey,
install this database for this prototype.

00:50:05.800 --> 00:50:07.830
Install this database
for this development.

00:50:07.830 --> 00:50:09.700
Install this database for QA.

00:50:09.830 --> 00:50:12.260
Install this database for production.

00:50:12.260 --> 00:50:15.720
They're doing the same thing five, six,
seven times over and over again.

00:50:16.120 --> 00:50:18.760
They can now install the software.

00:50:18.760 --> 00:50:23.540
I'm going to install and create
and configure an OLTP-ish database.

00:50:23.540 --> 00:50:26.470
Then I'm going to install and
create and configure sort of

00:50:26.470 --> 00:50:28.220
a data warehousing database.

00:50:28.220 --> 00:50:30.660
It's going to have partitioning
and other things on it.

00:50:30.710 --> 00:50:33.940
But I'm going to have these reference
installs so that when somebody comes

00:50:33.940 --> 00:50:37.340
and provisions a database for me,
I don't have to get the CDs out anymore.

00:50:37.340 --> 00:50:38.680
I don't have to go to the machine.

00:50:38.680 --> 00:50:40.340
I don't run the installation process.

00:50:40.340 --> 00:50:43.980
I point it at an existing
Oracle install and I either just clone

00:50:44.040 --> 00:50:45.880
the software or I clone the software.

00:50:46.140 --> 00:50:47.490
And the data along with it.

00:50:47.490 --> 00:50:50.240
So instead of being an hour-long
process to say install,

00:50:50.240 --> 00:50:53.790
create, and configure a database,
it becomes a 30-second operation

00:50:53.980 --> 00:50:56.980
because you're setting this up
through Enterprise Manager and

00:50:56.980 --> 00:50:59.200
it's happening in the background.

00:50:59.200 --> 00:51:02.600
True, you have to come back in an hour
and verify that everything worked,

00:51:02.600 --> 00:51:05.330
but you're not sitting there
watching a blue bar go across,

00:51:05.490 --> 00:51:07.710
hitting a next prompt,
filling in the defaults.

00:51:07.710 --> 00:51:09.380
It's an automated process.

00:51:11.900 --> 00:53:10.500
[Transcript missing]

00:53:12.060 --> 00:53:14.710
At this point,
I'm going to turn it over to Mark.

00:53:14.780 --> 00:53:18.380
He's going to spend about 20
minutes talking about HTMLDB,

00:53:18.380 --> 00:53:21.660
and then we're going to
have a quick Q&A session.

00:53:21.700 --> 00:53:23.340
So, Mark.

00:53:32.800 --> 00:53:35.490
All right,
so HTMLDB is something that's built

00:53:35.980 --> 00:53:38.340
out of the Reston Development Center.

00:53:38.340 --> 00:53:42.490
It's kind of started as a small
little project to build a calendar and

00:53:42.490 --> 00:53:45.690
turned into a sizable component of...

00:53:47.110 --> 00:53:47.520
10g.

00:53:47.520 --> 00:53:50.700
I've got a couple slides and I'm
really just going to get into the demo,

00:53:50.700 --> 00:53:51.930
so I'll switch over there in a minute.

00:53:51.930 --> 00:53:53.990
What is HTMLDB?

00:53:54.000 --> 00:53:57.030
Okay, I'm going to watch my clock,
watch this, try to look at this.

00:53:57.070 --> 00:53:59.080
I'm really bad at
reading like you all do.

00:53:59.080 --> 00:54:04.010
So HTMLDB is a declarative
web-based development environment.

00:54:04.010 --> 00:54:05.160
What does that mean?

00:54:05.160 --> 00:54:07.560
Well,
that means you build it with a browser.

00:54:07.560 --> 00:54:10.020
You don't have to install
any client software.

00:54:10.020 --> 00:54:11.400
You run it from a browser.

00:54:11.400 --> 00:54:13.370
Where you build it is where you run it.

00:54:13.370 --> 00:54:16.460
You don't have to do that,
but you can do that if you wish.

00:54:16.460 --> 00:54:19.420
It's also a feature of
the Oracle 10g database.

00:54:19.420 --> 00:54:25.450
You can stick it in older 9IR2 databases
with a loss of some functionality.

00:54:25.570 --> 00:54:31.600
For instance, the recycle bin Tom talked
about is exposed in HTMLDB.

00:54:32.260 --> 00:54:33.300
So what does it offer?

00:54:33.300 --> 00:54:37.340
I'm not going to go over that because
Tom talked about all the ilities,

00:54:37.340 --> 00:54:40.290
the securability, the integrity,
scalability.

00:54:40.420 --> 00:54:41.430
We know all that.

00:54:41.550 --> 00:54:43.380
It just exposes all that for you.

00:54:43.380 --> 00:54:45.190
And again, it's built for the web.

00:54:49.420 --> 00:54:54.840
So if you're like a lot of organizations,
you've got your spreadsheets out there.

00:54:54.840 --> 00:54:57.180
You've got your
Microsoft Access databases,

00:54:57.240 --> 00:54:58.460
your file servers.

00:54:58.460 --> 00:55:00.560
You've got it all spread all over.

00:55:00.560 --> 00:55:03.250
And you can read all
the studies that say,

00:55:03.250 --> 00:55:07.220
oh, it takes 13 man hours to
find a file in the server.

00:55:07.220 --> 00:55:11.000
And I've heard some companies
have one website for two different

00:55:11.000 --> 00:55:13.000
people and all that good stuff.

00:55:13.030 --> 00:55:14.400
So this is about consolidation.

00:55:14.400 --> 00:55:15.450
You use HTMLDB.

00:55:15.450 --> 00:55:18.140
You take your spreadsheets, and we will.

00:55:18.140 --> 00:55:21.470
You take your desktop databases,
which we won't do in

00:55:21.490 --> 00:55:23.880
this example for time,
and your files.

00:55:23.930 --> 00:55:25.800
You can put them all on the 10g database.

00:55:25.800 --> 00:55:28.480
And then you can look at them
with your standard browsers.

00:55:28.480 --> 00:55:30.460
It's not IE specific.

00:55:30.530 --> 00:55:33.270
God knows how many times I've
gone to a web page where it

00:55:33.270 --> 00:55:34.800
says you've got to run IE6.

00:55:34.860 --> 00:55:35.940
We don't do that.

00:55:35.960 --> 00:55:38.140
You can run all of those
browsers right there.

00:55:38.300 --> 00:55:39.100
Works just fine.

00:55:39.100 --> 00:55:42.040
The development team is a small bunch,
but they care about all

00:55:42.040 --> 00:55:43.290
the browsers out there.

00:55:43.290 --> 00:55:45.220
They don't want to isolate anybody.

00:55:47.500 --> 00:55:49.820
So there's four major components to it.

00:55:49.820 --> 00:55:51.160
There's the application builder.

00:55:51.160 --> 00:55:54.260
There's the SQL workshop,
the data workshop, and administration.

00:55:54.260 --> 00:55:58.080
I'll go over each one of those
tools in a little more detail.

00:55:58.080 --> 00:55:59.410
Yeah, we're going.

00:55:59.410 --> 00:56:00.600
We're going well.

00:56:00.600 --> 00:56:01.860
Am I going too fast?

00:56:02.160 --> 00:56:02.490
Anyone?

00:56:02.550 --> 00:56:03.920
All right, great.

00:56:03.920 --> 00:56:07.520
So the application
builder is best explained.

00:56:07.520 --> 00:56:09.310
A SQL workshop is what you think it is.

00:56:09.340 --> 00:56:15.050
You can go create SQL, edit SQL,
save SQL, create SQL from objects.

00:56:15.100 --> 00:56:20.450
Say you've created a database, tables,
10 tables, indexes, functions, triggers,

00:56:20.450 --> 00:56:22.340
and you misplace that file.

00:56:22.340 --> 00:56:25.080
You're like, oh,
now I've got to go rebuild that script.

00:56:25.080 --> 00:56:27.810
You can point HTMLDB to the database.

00:56:28.170 --> 00:56:29.830
You can point HTMLDB to
the table and say,

00:56:29.830 --> 00:56:31.920
rebuild the DDL,
and it'll spit it all back out.

00:56:32.090 --> 00:56:34.740
We'll be able to look at all
the attributes of a database,

00:56:34.740 --> 00:56:37.120
a trigger, a function,
look at the source code,

00:56:37.120 --> 00:56:39.560
do all that good stuff
with the SQL workshop.

00:56:39.560 --> 00:56:43.590
The data workshop allows
you to load data in via XML,

00:56:43.660 --> 00:56:47.270
via cut and paste with
the spreadsheet upload,

00:56:47.390 --> 00:56:49.050
via export import.

00:56:49.050 --> 00:56:51.090
It's all right there.

00:56:51.300 --> 00:56:52.480
And then administration.

00:56:52.480 --> 00:56:56.870
So this is a,
if you buy your rack of XSERVs and

00:56:56.870 --> 00:56:58.060
you've got a lot of data in there,
you can go ahead and do that.

00:56:58.060 --> 00:57:00.060
You've got 20 development
environments in there.

00:57:00.060 --> 00:57:01.290
You don't want to give
them their own database.

00:57:01.430 --> 00:57:04.240
You want to take one database
spread across all those

00:57:04.240 --> 00:57:05.820
XSERVs and just slice them up.

00:57:06.080 --> 00:57:09.080
So there's a provisioning aspect to it.

00:57:09.080 --> 00:57:12.440
So Tom gets his 20 megabytes
because he's special.

00:57:12.440 --> 00:57:16.080
I get my two megabytes
because I'm not as special.

00:57:16.080 --> 00:57:20.080
And then what I see is completely
independent of what Tom sees.

00:57:20.080 --> 00:57:21.080
He won't be able to touch my stuff.

00:57:21.080 --> 00:57:22.080
I won't be able to touch his stuff.

00:57:22.080 --> 00:57:28.040
And that's part of using the virtual
private database part of 10G.

00:57:28.040 --> 00:57:30.790
the good stuff, the good stuff.

00:57:31.420 --> 00:57:33.840
So I'm going to go over here.

00:57:33.840 --> 00:57:34.600
Oh, good.

00:57:34.600 --> 00:57:36.830
Cool.

00:57:36.890 --> 00:57:38.880
Get rid of that.

00:57:40.570 --> 00:57:42.810
So I've already logged into HTMLDB.

00:57:42.980 --> 00:57:44.920
What I'm going to do is I'm
going to take a spreadsheet.

00:57:45.010 --> 00:57:47.690
I'm going to put it into the database.

00:57:47.720 --> 00:57:49.220
I'm going to have it
converted into a table.

00:57:49.220 --> 00:57:54.610
I'm going to make a couple
lookup columns on them.

00:57:54.610 --> 00:57:57.500
Then I'm going to build an
application based on that table.

00:57:57.500 --> 00:57:59.890
I've already logged in.

00:58:00.100 --> 00:58:04.940
So let's go first go to the data.

00:58:04.940 --> 00:58:09.780
Actually, where's my spreadsheet?

00:58:09.860 --> 00:58:11.870
Where's my spreadsheet?

00:58:13.000 --> 00:58:16.000
I'm so glad I didn't delete that.

00:58:16.000 --> 00:58:19.070
That would have not made a good demo.

00:58:23.900 --> 00:58:26.460
So what this is is a spreadsheet
of a bunch of hardware we've got.

00:58:26.480 --> 00:58:27.580
I'm going to just copy that.

00:58:27.650 --> 00:58:31.020
Go back to Safari.

00:58:31.020 --> 00:58:33.260
I'm going to import the spreadsheet data.

00:58:33.260 --> 00:58:35.280
I'm going to create a new table.

00:58:35.280 --> 00:58:37.980
And these tables are real
tables like anybody else.

00:58:37.980 --> 00:58:39.960
They're not second-class citizens.

00:58:39.960 --> 00:58:42.460
They're not some special
objects as metadata.

00:58:42.460 --> 00:58:44.380
The whole environment runs off metadata.

00:58:44.380 --> 00:58:45.600
These are real tables.

00:58:45.600 --> 00:58:48.240
And we'll pop over to SQL and
prove that because people ask,

00:58:48.240 --> 00:58:50.610
oh, you're putting this in
some freaky repository,

00:58:50.610 --> 00:58:51.400
aren't you?

00:58:51.400 --> 00:58:52.700
No, we're not.

00:58:52.740 --> 00:58:53.420
It's just regular.

00:58:53.900 --> 00:58:56.090
Go over here.

00:58:56.900 --> 00:58:57.900
Paste the data.

00:58:57.900 --> 00:58:58.900
Don't worry if it looks funky.

00:58:58.900 --> 00:59:01.060
It'll come good.

00:59:04.270 --> 00:59:09.850
So it took the columns and made
a good guess as to what they are.

00:59:09.850 --> 00:59:13.850
Well, the first one is a text field,
so is the second one.

00:59:13.860 --> 00:59:15.260
CPU speed, we're pretty good.

00:59:15.310 --> 00:59:16.820
We're pretty sure that that's a number.

00:59:16.820 --> 00:59:19.580
The purchase date,
we're real sure that that's a date.

00:59:19.580 --> 00:59:21.030
And then so on and so forth.

00:59:21.100 --> 00:59:23.610
If we wanted, we could go on and do
some other stuff with it.

00:59:23.670 --> 00:59:25.240
And then it gives you
a couple columns here.

00:59:25.240 --> 00:59:28.780
And if you don't want a column,
you can say no.

00:59:28.780 --> 00:59:31.720
I'm not going to say this is going
to be better than SQL Loader,

00:59:31.720 --> 00:59:33.600
if you're familiar with that tool.

00:59:34.440 --> 00:59:38.200
But it beats having to try
to get a login to the server.

00:59:38.200 --> 00:59:38.900
It's all web-based.

00:59:38.900 --> 00:59:41.440
So we'll name this table hardware.

00:59:43.100 --> 01:00:13.080
Thank you for watching.

01:00:13.080 --> 01:00:13.080
I'll see you next time.

01:00:13.120 --> 01:00:13.780
I said, what's a sequence?

01:00:13.780 --> 01:00:17.660
I said, it's an automatic number that's
generated by the database for you.

01:00:17.750 --> 01:00:21.090
And what HTMLDB is doing
is doing all that for you.

01:00:21.140 --> 01:00:24.770
It's automatically giving you a sequence
number so you don't have to try to manage

01:00:24.770 --> 01:00:26.860
your own index numbers for collisions.

01:00:26.860 --> 01:00:27.920
I've done it myself.

01:00:27.920 --> 01:00:29.080
I've tried to do that.

01:00:29.080 --> 01:00:32.160
I've had a key violation
myself trying to do it.

01:00:32.260 --> 01:00:33.610
Not here, Tom.

01:00:33.610 --> 01:00:35.530
I learned that before.

01:00:35.540 --> 01:00:38.840
And then it'll create the primary key.

01:00:38.840 --> 01:00:40.580
So this is all the good
stuff that it gives you.

01:00:40.580 --> 01:00:42.680
So we're going to go ahead
and create the index.

01:00:43.160 --> 01:00:43.760
Let it do that.

01:00:43.760 --> 01:00:45.260
Create the sequence.

01:00:45.260 --> 01:00:46.320
Name is already used.

01:00:46.320 --> 01:00:47.760
I forgot to drop that before.

01:00:47.760 --> 01:00:49.150
Let me go back.

01:00:49.150 --> 01:00:51.200
Give it a different table name.

01:00:51.220 --> 01:00:53.540
Hardware 2.

01:00:53.540 --> 01:00:58.580
So, can we cut that out of the video?

01:01:03.200 --> 01:01:03.920
So there we go.

01:01:03.970 --> 01:01:06.980
37 rows succeeded, zero failed.

01:01:06.980 --> 01:01:07.800
Woo hoo.

01:01:07.800 --> 01:01:10.840
So we're going to go back over
to the application builder.

01:01:10.840 --> 01:01:12.960
And you can see there's already
a sample application here.

01:01:12.960 --> 01:01:15.580
When you install it,
the way to deploy a sample application

01:01:15.580 --> 01:01:18.110
is you click a button and boom.

01:01:18.320 --> 01:01:37.300
Click on the button and
it just goes and runs.

01:01:37.300 --> 01:01:37.300
You don't have to deploy anything.

01:01:37.300 --> 01:01:37.300
It's just a bunch of SQL that
it runs to create the database,

01:01:37.300 --> 01:01:37.300
create the application for you.

01:01:37.300 --> 01:01:37.300
And that's what they do
when you provision a user.

01:01:37.300 --> 01:01:37.300
So we're going to go
create a new application.

01:01:37.300 --> 01:01:37.300
We're going to have it
based on existing tables.

01:01:39.290 --> 01:01:42.800
This user has a schema
associated with it called Apple.

01:01:42.800 --> 01:01:44.650
If I wanted to,
I could have multiple schemas.

01:01:44.650 --> 01:01:49.040
This is the default schema that I told
it when I provisioned this user.

01:01:49.040 --> 01:01:53.590
So it's going to look in
this schema for the table.

01:01:54.800 --> 01:02:11.800
[Transcript missing]

01:02:12.010 --> 01:02:16.680
The nice thing is, as a developer,
I don't have to manage state.

01:02:16.680 --> 01:02:19.430
If you're familiar with
maintaining session state,

01:02:19.440 --> 01:02:21.300
it does it all for you.

01:02:21.340 --> 01:02:24.380
You don't have to worry about, oh,
when I go from page A to page B,

01:02:24.380 --> 01:02:27.280
collect up all the information
in the form fields and save

01:02:27.310 --> 01:02:29.070
it off into some memory space.

01:02:29.090 --> 01:02:31.180
It does it all for you.

01:02:31.240 --> 01:02:36.740
So it really makes developing
applications pretty quickly.

01:02:36.740 --> 01:02:39.870
Then I'm just going to say finish.

01:02:39.870 --> 01:02:40.440
It's going to chug.

01:02:41.940 --> 01:02:44.720
Just go run it and see what we've got.

01:02:44.940 --> 01:02:46.990
We've got basic security on it.

01:02:47.080 --> 01:02:50.690
You as a workspace manager
can pick what you want.

01:02:50.850 --> 01:02:54.810
Right now, this is using database users,
and as a workspace manager,

01:02:54.810 --> 01:02:55.800
you can create those yourselves.

01:02:55.800 --> 01:02:59.170
If you want,
you can use LDAP-based authentication.

01:02:59.270 --> 01:03:02.140
You can use single
sign-on authentication.

01:03:03.720 --> 01:03:07.150
I don't think most of
any of you hopefully have

01:03:07.150 --> 01:03:10.950
Microsoft Active Directory,
but you can use that as an

01:03:10.950 --> 01:03:13.640
authentication source so you don't
have to convert all this data and

01:03:13.730 --> 01:03:15.210
move it over and keep it in sync.

01:03:15.210 --> 01:03:15.900
It'll do it.

01:03:16.270 --> 01:03:19.760
So let me log in.

01:03:27.920 --> 01:03:29.020
So this is what it generated.

01:03:29.020 --> 01:03:35.140
It generated an application with a couple
tabs and a couple components to it.

01:03:35.140 --> 01:03:36.340
So let's go look at the hardware.

01:03:36.340 --> 01:03:37.590
Let's go analyze it.

01:03:37.620 --> 01:03:40.240
It threw in some charting by default.

01:03:40.250 --> 01:03:43.080
It took all the columns
in the table and said,

01:03:43.080 --> 01:03:45.820
okay, these are all the columns you have.

01:03:45.900 --> 01:03:47.410
Let's go show a chart.

01:03:47.410 --> 01:03:49.020
We'll do that.

01:03:49.020 --> 01:03:55.300
It's an SVG chart, so you can do all that
zooming and whatever.

01:03:55.300 --> 01:03:57.880
If you want,
you can click on one of the components.

01:03:57.900 --> 01:04:02.220
It'll show you a SQL query
of just that data.

01:04:02.220 --> 01:04:04.930
Literally,
all this was is I just typed in,

01:04:04.930 --> 01:04:07.200
it typed in, I didn't do anything.

01:04:07.200 --> 01:04:08.010
You saw me.

01:04:08.010 --> 01:04:10.950
It typed in select star
from hardware to where,

01:04:10.950 --> 01:04:13.200
what did I say, brand equals Dell.

01:04:13.200 --> 01:04:14.040
Great.

01:04:17.310 --> 01:04:20.620
Then if I wanted to,
I could go do it myself.

01:04:20.700 --> 01:04:22.200
I can go edit these.

01:04:22.200 --> 01:04:25.830
If you've done web-based development,
you're always familiar with the create,

01:04:25.890 --> 01:04:27.500
update, delete functions.

01:04:27.500 --> 01:04:29.190
This takes care of all that.

01:04:29.190 --> 01:04:34.200
It's kind of the entity relationship
builder that it has in there.

01:04:34.200 --> 01:04:35.290
It went out there and did it.

01:04:35.290 --> 01:04:38.400
It knew that this was a date, so it said,
oh, I'm going to just go throw a

01:04:38.400 --> 01:04:40.010
pop-up date picker right there.

01:04:41.770 --> 01:05:03.580
Then I can go apply the changes.

01:05:03.580 --> 01:05:03.580
I don't have to worry about
commits or anything like that.

01:05:03.580 --> 01:05:03.580
It takes care of that.

01:05:03.580 --> 01:05:03.580
I can worry about it if I want,
but I don't have to.

01:05:03.580 --> 01:05:03.580
This is just a sample application.

01:05:03.580 --> 01:05:03.580
You can go to town.

01:05:03.580 --> 01:05:03.580
I have a couple example applications
of what some people have built with it.

01:05:03.580 --> 01:05:03.580
I mean,
we're just using straight tables here,

01:05:03.580 --> 01:05:03.580
but you can use spatial data.

01:05:03.580 --> 01:05:03.580
There's an example of that down the road.

01:05:04.130 --> 01:05:06.970
And then, so if we wanted to, we can,
as a debugger,

01:05:07.130 --> 01:05:09.280
we can flip it in that mode and
it'll show you everything that

01:05:09.280 --> 01:05:10.400
it's doing as it's rendering.

01:05:10.400 --> 01:05:13.180
But right here you can
see all the session data.

01:05:13.180 --> 01:05:14.770
You're like, well, what is that value?

01:05:14.780 --> 01:05:15.400
I've got a bug.

01:05:15.400 --> 01:05:18.320
Maybe I don't.

01:05:18.410 --> 01:05:21.240
But you can see the value
right here and see what it is,

01:05:21.240 --> 01:05:22.560
what it thinks it is.

01:05:22.580 --> 01:05:25.140
And so it's a nice way to just
keep track of it without having to

01:05:25.140 --> 01:05:26.660
do it if you're familiar with C.

01:05:26.660 --> 01:05:29.220
PrintFs all over the place
or systems that out there,

01:05:29.230 --> 01:05:30.060
printlens.

01:05:30.060 --> 01:05:32.180
You've got all that right there.

01:05:32.960 --> 01:05:36.020
The other thing that I wanted to do
is go back and edit the application.

01:05:36.020 --> 01:05:40.260
And I told myself I was going
to forget and I sure enough did.

01:05:40.300 --> 01:05:41.600
I forgot to create the...

01:05:43.530 --> 01:05:45.980
The lookup table on that.

01:05:46.000 --> 01:05:48.550
So let me go over to the SQL.

01:05:49.220 --> 01:05:50.040
There's the recycle bin.

01:05:50.040 --> 01:05:51.890
I'm going to go browse the tables.

01:05:52.150 --> 01:05:54.040
Where's the tables?

01:05:54.140 --> 01:05:57.030
Find my hardware table.

01:05:57.430 --> 01:05:59.880
For someone like me who
doesn't live in the SQL world,

01:05:59.880 --> 01:06:00.260
I love it.

01:06:00.680 --> 01:06:02.360
Tom lives in the SQL world.

01:06:02.360 --> 01:06:04.820
He's a SQL Plus jockey,
among other things.

01:06:04.820 --> 01:06:06.990
So he loves that.

01:06:07.000 --> 01:06:09.420
I love this because I can just
drill in here and start looking at

01:06:09.420 --> 01:06:10.820
stuff and have to worry about it.

01:06:10.860 --> 01:06:13.640
This was the trigger that it
put on there automatically.

01:06:13.680 --> 01:06:17.780
So I'm going to go create
a lookup table for this.

01:06:17.780 --> 01:06:20.040
And I'm going to pick
the brand looks good.

01:06:20.110 --> 01:06:21.650
I'm going to take that brand.

01:06:21.650 --> 01:06:22.860
I'm going to say next.

01:06:22.860 --> 01:06:24.940
It's going to make a new table out of it.

01:06:24.940 --> 01:06:27.380
It's going to soak up all
that info and put it in there.

01:06:27.400 --> 01:06:31.310
and then index in table
and then replace that.

01:06:33.610 --> 01:06:36.370
So if you wanted to,
you could see where was that?

01:06:36.510 --> 01:06:38.600
View the data model.

01:06:38.620 --> 01:06:43.200
And you can see that brand lookup
is now related to hardware 2.

01:06:43.410 --> 01:06:45.880
This isn't a really fancy
referential integrity,

01:06:45.900 --> 01:06:49.120
but you can get to the
point when it gets larger.

01:06:49.120 --> 01:06:52.080
It can be pretty useful.

01:06:52.120 --> 01:06:54.610
So we'll just go back
over here to the builder.

01:06:54.640 --> 01:06:57.690
Let's just do this one more
time for reinforcement.

01:06:57.790 --> 01:07:02.650
Go back, pick hardware 2.

01:07:16.100 --> 01:07:23.900
[Transcript missing]

01:07:30.530 --> 01:07:33.310
So right there you see the brand
ID now turns into a pick list and

01:07:33.310 --> 01:07:37.420
it's smart enough to know that,
look at the referential integrity,

01:07:37.420 --> 01:07:40.870
see the relationship and create
an appropriate type for that.

01:07:42.610 --> 01:07:47.170
That's pretty much HTMLDB in
a nutshell from getting your

01:07:47.590 --> 01:07:50.610
spreadsheets out of everybody's
desktops off everybody's desktops,

01:07:51.040 --> 01:07:52.240
consolidated into a database.

01:07:52.240 --> 01:07:55.610
I did a project for a boat
racing group and they had

01:07:55.610 --> 01:07:57.760
spreadsheets all over the place.

01:07:57.760 --> 01:07:59.680
Files here and there,
spreadsheets everywhere.

01:07:59.680 --> 01:08:03.010
We told them to use this tool
before it wasn't even produced

01:08:03.010 --> 01:08:05.200
and they were quite happy with it.

01:08:05.200 --> 01:08:08.740
They had literally sailors out there
developing HTMLDB applications.

01:08:08.740 --> 01:08:10.980
How am I looking on time?

01:08:10.980 --> 01:08:11.620
Seven minutes?

01:08:11.780 --> 01:08:12.730
Okay.

01:08:12.730 --> 01:08:14.280
I'll let that run.

01:08:14.280 --> 01:08:18.180
It's not even showing anymore.

01:08:20.300 --> 01:08:23.060
Can you flip back to
that one real quickly?

01:08:23.060 --> 01:08:23.820
I apologize.

01:08:23.850 --> 01:08:26.420
So anyways,
this was a spatial data thing.

01:08:26.420 --> 01:08:30.380
You can see that somebody--
we tracked a vehicle from,

01:08:30.400 --> 01:08:31.610
I guess, their home.

01:08:31.740 --> 01:08:35.140
They apparently went down to the airport.

01:08:36.130 --> 01:08:36.750
When somewhere else.

01:08:36.830 --> 01:08:38.360
This is all data running
out of the database.

01:08:38.380 --> 01:08:41.580
The map is generated by
the spatial data system,

01:08:41.580 --> 01:08:42.840
and it's just making requests.

01:08:42.840 --> 01:08:45.500
You can pretty much drop these
type of objects on there.

01:08:45.500 --> 01:08:46.460
If we wanted, we could zoom.

01:08:46.460 --> 01:08:49.260
You could see this person
tends to speed a little bit.

01:08:49.330 --> 01:08:52.010
I think that's a
65-mile-an-hour toll road,

01:08:52.070 --> 01:08:52.730
though.

01:08:52.730 --> 01:08:55.610
So that's the type of stuff you can make.

01:08:55.780 --> 01:08:58.820
Anyways,
it's another little bullet point of

01:08:58.820 --> 01:09:01.680
what gee whiz stuff there is available.

01:09:01.680 --> 01:09:04.870
So if we could flip back
to the presentation.

01:09:04.870 --> 01:09:05.180
Thank you.

01:09:05.930 --> 01:09:07.930
So we talked about how
it works a little bit.

01:09:07.930 --> 01:09:11.680
You can see that it's centrally deployed
and managed in your single database,

01:09:11.680 --> 01:09:19.960
be it running on one laptop like I have
or a rack of XSERVs and X-RAID systems.

01:09:19.960 --> 01:09:22.200
I've got one of those in the lab.

01:09:22.200 --> 01:09:23.840
I thoroughly enjoy it.

01:09:24.030 --> 01:09:25.680
Access anywhere via browser.

01:09:25.680 --> 01:09:28.900
We literally do development on
the plane with our browsers,

01:09:28.900 --> 01:09:31.770
take the application,
put it back up into the system,

01:09:31.770 --> 01:09:34.990
and it's just as easy as
moving applications like that.

01:09:35.470 --> 01:09:36.600
And it's declarative.

01:09:36.600 --> 01:09:40.260
I don't have to go out there and say,
if this condition is that, then do this.

01:09:40.260 --> 01:09:43.770
You can just say, you know,
show me this text field only

01:09:43.920 --> 01:09:45.800
when I'm an administrator.

01:09:45.800 --> 01:09:48.230
Don't show it when Tom logs in.

01:09:48.440 --> 01:09:53.810
Show an administrative tab only when
the person who logged in is a member of

01:09:53.810 --> 01:09:57.060
this LDAP-specified search hierarchy.

01:09:57.060 --> 01:10:02.150
So it's a little simpler for some people,
but you can also go to town and

01:10:02.550 --> 01:10:06.600
create normal PL SQL procedures,
Java stored procedures,

01:10:06.600 --> 01:10:10.390
anything that's callable from
the databases is a fair game.

01:10:10.420 --> 01:10:11.780
This is what it looks like.

01:10:11.780 --> 01:10:14.080
That's pretty much it.

01:10:14.080 --> 01:10:15.870
As they say, that's all, folks,
with that.

01:10:15.900 --> 01:10:17.660
You've got the little yellow box.

01:10:17.660 --> 01:10:18.960
That can be one machine.

01:10:18.960 --> 01:10:20.100
It doesn't have to be.

01:10:20.150 --> 01:10:22.370
But basically, you've got your database.

01:10:22.420 --> 01:10:23.380
It runs HTMLDB.

01:10:23.390 --> 01:10:25.000
You don't have a middle tier.

01:10:25.000 --> 01:10:29.600
You don't have edge servers and cache
servers and all this kind of stuff.

01:10:29.700 --> 01:10:31.040
It can be one machine.

01:10:31.040 --> 01:10:32.440
We typically do that.

01:10:32.450 --> 01:10:34.580
You can split it out if you
want to have your HTTP server.

01:10:34.580 --> 01:10:38.370
If you have a HTTP server running
somewhere else in a real world,

01:10:38.370 --> 01:10:41.630
you probably would because you want
to have a firewall and all that

01:10:41.710 --> 01:10:43.320
good stuff with the load balancers.

01:10:43.320 --> 01:10:45.240
And then that's pretty much it.

01:10:45.290 --> 01:10:51.070
So the installation for the companion
CD that's available on OTN has it.

01:10:51.120 --> 01:10:52.520
It's a really simple install.

01:10:52.520 --> 01:10:55.120
You don't have to sit there and say,
okay, now where does this go?

01:10:55.120 --> 01:10:55.860
How does that hook up?

01:10:55.900 --> 01:11:00.220
Invariably, somebody always says, well,
are you trying to get rid

01:11:00.220 --> 01:11:01.910
of your portal product?

01:11:01.910 --> 01:11:04.100
How is this going to fit?

01:11:04.180 --> 01:11:05.890
And then you get to J2EE stuff.

01:11:06.130 --> 01:11:10.080
And we're not trying to
displace J2EE by any means,

01:11:10.110 --> 01:11:12.280
especially since we have our own product.

01:11:12.320 --> 01:11:18.480
But you can look at it and you can
see that J2EE is standards based.

01:11:18.480 --> 01:11:19.980
This is HTMLDB.

01:11:19.980 --> 01:11:21.200
It runs PLSQL.

01:11:21.280 --> 01:11:22.250
That's what it's built in.

01:11:22.250 --> 01:11:25.430
It's taking advantage of all
those wonderful 10G features

01:11:25.440 --> 01:11:26.720
that Tom talked about.

01:11:26.760 --> 01:11:29.400
The development approach
is a little more ad hoc.

01:11:29.490 --> 01:11:32.100
Somebody says, hey,
I've got this spreadsheet.

01:11:32.180 --> 01:11:33.190
Can you do this?

01:11:33.700 --> 01:11:36.480
Build an application, track something,
do whatever.

01:11:36.480 --> 01:11:38.830
It doesn't mean you've got a
lot of silly little applications

01:11:38.830 --> 01:11:39.900
that are one-time use.

01:11:39.900 --> 01:11:42.860
You can, but it's more,
it leverages itself for

01:11:42.860 --> 01:11:45.790
that as opposed to J2EE,
where if you want to do

01:11:45.790 --> 01:11:50.180
a right J2EE application,
you've got to know what you're doing.

01:11:50.180 --> 01:11:54.270
You have to design it well and scale it.

01:11:54.600 --> 01:11:59.770
And then the development environment,
J2EE, the Eclipse, the Xcode,

01:11:59.770 --> 01:12:03.500
the JDeveloper,
those are all phenomenal IDEs.

01:12:03.500 --> 01:12:07.420
But if you've just got a web browser,
you have to go somewhere and they

01:12:07.420 --> 01:12:10.100
don't allow you to bring your
computer with you like the CIA.

01:12:10.100 --> 01:12:13.790
You've got a web browser,
you use theirs and you're good to go.

01:12:13.800 --> 01:12:17.680
And then it's for really the
non-professional developers out there.

01:12:17.680 --> 01:12:20.790
Like I said,
sailors have been coding applications,

01:12:20.790 --> 01:12:23.250
non-trivial applications I might add.

01:12:23.260 --> 01:12:28.570
They literally got the do SQL in 21 days
type of book and they were ready to go.

01:12:28.580 --> 01:12:33.300
So that's a little flavor of what
HTMLDB is and isn't and how it relates.

01:12:33.300 --> 01:12:35.880
relates to J2EE.

01:12:36.210 --> 01:12:39.210
If you want to try it out,
you can go download it,

01:12:39.210 --> 01:12:41.820
install it yourself, and go to town.

01:12:41.820 --> 01:12:44.470
If you want to just get
started in 10 minutes,

01:12:44.520 --> 01:12:48.610
just go to this website,
htmldb.oracle.com.

01:12:48.610 --> 01:12:49.580
It's free.

01:12:49.580 --> 01:12:50.360
You log in.

01:12:50.360 --> 01:12:52.570
You ask for a workspace.

01:12:52.570 --> 01:12:57.610
It'll get provisioned
automatically within an hour or so,

01:12:57.610 --> 01:13:01.360
depending on if the guys are still there.

01:13:02.120 --> 01:13:03.180
Then you can talk.

01:13:03.180 --> 01:13:05.220
There's a discussion on OTN forums.

01:13:05.220 --> 01:13:06.380
Oh, how do I do this?

01:13:06.380 --> 01:13:07.350
How do I do that?

01:13:07.600 --> 01:13:12.440
Then you can also go to the HTMLDB studio
where there's examples of how to do this,

01:13:12.440 --> 01:13:16.170
how to do the... If you don't
want to build that common look and

01:13:16.250 --> 01:13:19.370
feel from the application builder,
how do you make your own

01:13:19.370 --> 01:13:21.180
master detail relationships?

01:13:21.200 --> 01:13:24.600
How do you put a multiple row edit?

01:13:24.600 --> 01:13:26.750
All these... They have
viewlets out there.

01:13:26.750 --> 01:13:27.740
You can look at them.

01:13:27.740 --> 01:13:28.770
It shows you how to do it.

01:13:28.840 --> 01:13:29.700
And you can...

01:13:31.880 --> 01:13:37.720
Also go to htmldb.oracle.com/otn
is where the official home

01:13:37.720 --> 01:13:40.460
page is for that product.