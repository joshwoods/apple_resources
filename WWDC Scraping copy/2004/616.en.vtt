WEBVTT

00:00:12.600 --> 00:00:16.280
And welcome to session 616.

00:00:16.340 --> 00:00:18.990
So what are we going to talk about today?

00:00:19.160 --> 00:00:22.430
Well, we do this session every year,
and we typically talk about three or

00:00:22.430 --> 00:00:24.980
four different technology areas in depth.

00:00:25.090 --> 00:00:27.600
We talk about how they work,
how developers can

00:00:27.610 --> 00:00:29.700
take advantage of them,
and so on.

00:00:29.750 --> 00:00:32.000
And every year,
the server team has a real

00:00:32.000 --> 00:00:34.190
difficult time picking those topics.

00:00:34.380 --> 00:00:36.030
It's not because we don't
have anything to talk about,

00:00:36.100 --> 00:00:40.210
but because we have so many different
technology areas to pick from.

00:00:40.670 --> 00:00:43.050
As many of you know,
we have tens of different services

00:00:43.410 --> 00:00:46.610
and components in Mac OS X Server.

00:00:46.790 --> 00:00:50.970
And for each release, for each feature,
each service, we typically have three

00:00:50.970 --> 00:00:54.440
or five new features,
so it's pretty challenging.

00:00:54.480 --> 00:01:01.030
But luckily, some of these major areas,
such as Open Directory, Xgrid, ACL,

00:01:01.570 --> 00:01:03.830
Kerberos,
we have our own dedicated session,

00:01:03.920 --> 00:01:06.280
so that makes it a little bit easier.

00:01:06.460 --> 00:01:10.320
And anyway, this year,
we picked these four areas to talk about.

00:01:10.620 --> 00:01:13.080
And we talked about all
these areas in yesterday's

00:01:13.080 --> 00:01:15.200
Mac OS X Server update session.

00:01:15.230 --> 00:01:18.320
But today,
we're going to double click on them and

00:01:18.410 --> 00:01:20.950
then talk about them more in details.

00:01:22.040 --> 00:01:25.620
So we're going to start off by talking
about the managed network browsing.

00:01:25.640 --> 00:01:27.790
It's a brand new
Tiger client server feature.

00:01:27.910 --> 00:01:29.600
It's going to make it much
easier for people to browse,

00:01:29.600 --> 00:01:32.170
especially in a large organization.

00:01:33.200 --> 00:01:40.400
[Transcript missing]

00:01:41.230 --> 00:01:44.140
Failover and High Availability.

00:01:44.140 --> 00:01:48.430
We had this feature since Jaguar Server,
but we made some significant improvements

00:01:48.440 --> 00:01:51.700
in this release in Tiger Server,
so we're going to be talking about this.

00:01:51.840 --> 00:01:55.350
And also we're going to talk about
how developers can take advantage

00:01:55.420 --> 00:01:57.410
of this and extend this capability.

00:01:58.510 --> 00:02:00.400
And last but not least,
we're going to talk about the

00:02:00.400 --> 00:02:01.590
certificate management feature.

00:02:01.660 --> 00:02:05.400
It's again a brand new
feature in Tiger Server.

00:02:05.400 --> 00:02:09.210
So let's jump right into
managed network browsing.

00:02:10.700 --> 00:02:13.310
So we introduced network
browsing in Panther.

00:02:13.510 --> 00:02:18.180
It's a feature where a user can browse
for file services and connect to

00:02:18.300 --> 00:02:20.900
them directly in the Finder window.

00:02:21.780 --> 00:02:25.400
Managed network browsing is built
on top of that functionality.

00:02:25.400 --> 00:02:28.700
It's an incremental enhancement
to make it even easier to use.

00:02:28.700 --> 00:02:32.340
But before we talk about that,
let's take a look at how it works

00:02:32.350 --> 00:02:34.240
behind the scenes for Panther.

00:02:35.340 --> 00:02:37.560
To get this feature to work,
we actually have three

00:02:37.560 --> 00:02:39.300
different processes involved.

00:02:39.320 --> 00:02:41.620
At the top level, of course,
we have the finder.

00:02:41.700 --> 00:02:46.430
And to finder, all of these network zones
and file servers actually

00:02:46.890 --> 00:02:49.120
shows up as folders and files.

00:02:49.680 --> 00:02:53.310
And that's done by AutoManor,
which in turn talks to NSL,

00:02:53.310 --> 00:02:57.920
or the network service location
API built into the system to find

00:02:58.030 --> 00:03:00.920
out those list of servers and zones.

00:03:01.290 --> 00:03:04.080
NSL talked to Directory Services.

00:03:04.080 --> 00:03:05.770
So as many of you know,
the Directory Services have

00:03:05.870 --> 00:03:09.140
different plugins for accessing
different directory systems,

00:03:09.160 --> 00:03:11.010
such as LDAP and Active Directory.

00:03:11.310 --> 00:03:15.700
In addition, it has a number of
service discovery plugins,

00:03:15.850 --> 00:03:18.650
one for each protocol,
and then the other ones that are actually

00:03:18.650 --> 00:03:23.200
responsible for finding those servers
on the network and reporting back up.

00:03:23.200 --> 00:03:24.380
So that's how it works today.

00:03:24.660 --> 00:03:26.350
Very simple.

00:03:27.050 --> 00:03:32.340
This feature works fairly well for
consumers and small work groups,

00:03:32.410 --> 00:03:35.040
but doesn't work too well
in large organizations,

00:03:35.110 --> 00:03:37.900
especially with large networks.

00:03:37.900 --> 00:03:41.110
It looks something like this.

00:03:41.420 --> 00:03:42.900
There's just too much information.

00:03:42.900 --> 00:03:45.710
You have too many network zones.

00:03:45.960 --> 00:03:48.540
You have too many
servers in each of them.

00:03:48.600 --> 00:03:50.980
And a lot of these zones
and servers come and go,

00:03:51.070 --> 00:03:54.600
so it's somewhat
unpredictable and unstable.

00:03:55.020 --> 00:03:58.630
And also, in most cases,
these zones are organized by

00:03:58.630 --> 00:04:02.580
physical network infrastructure,
so usually by buildings rather than

00:04:02.580 --> 00:04:07.450
by more logical grouping such as by
corporate org chart or by projects.

00:04:07.490 --> 00:04:11.090
So these are the problems
that we wanted to solve.

00:04:14.480 --> 00:04:18.130
And also, in most cases,
these zones are organized by

00:04:18.130 --> 00:04:22.090
physical network infrastructure,
so usually by buildings rather than

00:04:22.090 --> 00:04:25.400
by more logical grouping such as by
corporate org chart or by projects.

00:04:25.400 --> 00:04:25.400
So these are the problems
that we wanted to solve.

00:04:26.380 --> 00:04:27.960
So instead of looking
at something like this,

00:04:27.960 --> 00:04:30.540
where there's a bunch
of raw network data,

00:04:30.540 --> 00:04:33.250
you can create something like
this that's a little bit more

00:04:33.250 --> 00:04:35.890
organized for your organization.

00:04:36.930 --> 00:04:39.360
So let's look at some
of the sub-features.

00:04:39.410 --> 00:04:41.010
You can create arbitrary neighborhoods.

00:04:41.180 --> 00:04:44.540
The neighborhoods are those
folders that you see here.

00:04:44.820 --> 00:04:47.090
And you can list them so it
doesn't have to be a flat list.

00:04:47.240 --> 00:04:50.000
So for example,
maybe inside the engineering folder,

00:04:50.000 --> 00:04:53.070
you may have server engineering,
finder engineering,

00:04:53.280 --> 00:04:55.770
application engineering, and so on.

00:04:56.880 --> 00:05:00.160
You can also mix and match
dynamic and static contents,

00:05:00.200 --> 00:05:04.090
meaning for each folder, you can say,
I want these servers that I'm

00:05:04.090 --> 00:05:05.820
going to specify to show up.

00:05:05.900 --> 00:05:10.540
Or you can say, for this folder,
I want to show all the servers that

00:05:10.540 --> 00:05:14.480
are discovered at runtime on the
client machine in these network zones.

00:05:14.480 --> 00:05:16.890
And you can mix and match them.

00:05:18.290 --> 00:05:21.440
You can also define multiple
views so you don't have to have

00:05:21.440 --> 00:05:23.140
a single view for everybody.

00:05:23.140 --> 00:05:25.330
You can create five or ten
different views and then show

00:05:25.330 --> 00:05:26.620
it to different set of people.

00:05:29.060 --> 00:05:32.830
And lastly, you can replace or append to
the existing view that user

00:05:32.900 --> 00:05:34.490
would see today in Panther.

00:05:34.570 --> 00:05:37.100
So the screenshot here is
the replaced version of it.

00:05:37.140 --> 00:05:40.210
If you'd like, instead,
you can do something like this.

00:05:40.480 --> 00:05:42.920
So what you've defined
shows up on the top,

00:05:42.960 --> 00:05:48.100
and then below it,
you see the raw network zones.

00:05:48.190 --> 00:05:52.420
So let's do a quick demo so you
can see what I'm talking about.

00:05:59.550 --> 00:06:03.600
Okay, so we have a Panser client here,
and if you click on the network,

00:06:03.600 --> 00:06:05.330
you see a bunch of zones.

00:06:05.360 --> 00:06:09.220
What we did here was, whoops,
we're running a special tool that

00:06:09.310 --> 00:06:12.720
does a fake registration of a bunch
of different zones and servers

00:06:12.720 --> 00:06:16.650
so we can really simulate the
large corporation or institution.

00:06:18.340 --> 00:06:22.120
So if you click on XAMPP,
you see different servers and so on.

00:06:22.120 --> 00:06:26.230
And what we're going to do is we're going
to create a custom view and replace this.

00:06:26.710 --> 00:06:29.040
And to do that,
we're going to launch Workgroup Manager.

00:06:29.150 --> 00:06:31.710
This is where we implemented the feature.

00:06:31.910 --> 00:06:34.210
And to do that,
we're going to launch Workgroup Manager.

00:06:34.340 --> 00:06:36.830
This is where we implemented the feature.

00:06:42.800 --> 00:06:45.040
And let's add a couple neighborhoods.

00:06:45.040 --> 00:06:47.910
So maybe one called Sales.

00:06:53.200 --> 00:07:00.010
and the other one is called Marketing.

00:07:00.010 --> 00:07:00.010
And another one is called Server Group.

00:07:00.490 --> 00:07:05.790
And now we're going to start adding
some servers into this neighborhood.

00:07:05.850 --> 00:07:08.320
And there are three different ways
that you can add static servers

00:07:08.420 --> 00:07:10.400
to each of these neighborhoods.

00:07:10.540 --> 00:07:13.640
One way is if you haven't already
have a computer record for that

00:07:13.640 --> 00:07:18.400
particular server or servers,
you can open up the drawer

00:07:18.400 --> 00:07:22.410
and you can just drag them in.

00:07:26.080 --> 00:07:28.260
So that's one way.

00:07:28.260 --> 00:07:31.360
Another way is you can just go
ahead and drag directly from finder.

00:07:31.420 --> 00:07:36.940
So if you look at the QA folder,
see our server.

00:07:38.450 --> 00:07:41.020
and So that's another way.

00:07:41.020 --> 00:07:45.340
And now let's actually
create a nested neighborhood.

00:07:45.340 --> 00:07:50.280
Let's call this team members to
point to all the servers that

00:07:50.280 --> 00:07:52.450
belongs to the server engineers.

00:07:52.460 --> 00:07:55.870
And the third way to
create them is by hand,

00:07:55.870 --> 00:07:56.700
manually.

00:07:57.070 --> 00:07:59.890
So let's say if I have an employee
named Bob who is working from

00:07:59.890 --> 00:08:03.960
Hawaii and we want to add a pointer
to his personal file sharing machine.

00:08:03.960 --> 00:08:11.390
You can just name it, Surfing Bob,
and then just type in the URL.

00:08:14.830 --> 00:08:18.000
Tag it, add it in here,
and then actually the computer

00:08:18.000 --> 00:08:21.710
record automatically gets created
for that server for future.

00:08:21.930 --> 00:08:25.060
And everything we've added here
so far are the static servers.

00:08:25.270 --> 00:08:28.880
These information is all
stored in directory services.

00:08:28.910 --> 00:08:31.580
But you can also add
some dynamic contents.

00:08:31.790 --> 00:08:34.780
To do that, you just select this one.

00:08:34.800 --> 00:08:38.490
And I happen to know that all the
server guys are sitting on the

00:08:38.490 --> 00:08:42.710
fourth floor of the Anza 3 building
in the north and south zone.

00:08:42.760 --> 00:08:47.730
So what we're going to do is go here
and then select the Anza 3 fourths,

00:08:47.730 --> 00:08:51.400
and north and south, and add.

00:08:52.070 --> 00:08:56.560
So what we're telling managed network
browsing is when this neighborhood

00:08:56.660 --> 00:08:59.070
is clicked in the client machine,
showSurfingBox machine,

00:08:59.070 --> 00:09:03.200
but as well as everything else
that was discovered runtime in

00:09:03.230 --> 00:09:04.990
these two different network zones.

00:09:05.000 --> 00:09:06.990
So this looks good.

00:09:07.030 --> 00:09:12.990
I'm going to go to settings and
then set it to replace and save.

00:09:14.110 --> 00:09:16.540
Let's go back to Finder,
go to the network.

00:09:16.540 --> 00:09:20.300
Now you see the custom
view that we just created.

00:09:25.670 --> 00:09:29.800
Okay, so now if you look at here,
you see everything that we've added,

00:09:29.800 --> 00:09:31.800
and you can collect them.

00:09:32.510 --> 00:09:37.460
Or you can go in here,
you see the Surfing Box machine here.

00:09:37.530 --> 00:09:41.090
But you see all other servers that
are discovered in those network zones.

00:09:41.280 --> 00:09:44.940
So we actually mix and match
the dynamic and static contents.

00:09:46.840 --> 00:09:49.600
And if you'd like,
you can also go back here and

00:09:49.600 --> 00:09:53.510
then set it to add and save.

00:09:54.000 --> 00:09:54.390
There you go.

00:09:54.540 --> 00:09:59.020
So now you see both FAT-UBD find
on top and then FATs on

00:09:59.110 --> 00:10:00.910
the network at the bottom.

00:10:00.920 --> 00:10:04.290
And we haven't made
changes to the finder yet,

00:10:04.440 --> 00:10:08.460
so we couldn't actually distinguish
between these custom views

00:10:08.460 --> 00:10:09.780
and then FATs on a network.

00:10:09.780 --> 00:10:11.930
So we did a little hack,
and then right now we put

00:10:12.000 --> 00:10:14.960
a little dash in the front,
so it actually shows up on the top.

00:10:14.980 --> 00:10:17.550
But by the time we ship,
it should be a little bit better looking.

00:10:17.560 --> 00:10:21.520
All right, so that was a demo.

00:10:21.670 --> 00:10:23.060
Thanks.

00:10:30.740 --> 00:10:34.700
Right, so now let's look at how
this works behind the scene.

00:10:34.750 --> 00:10:39.330
What we did was in Tiger,
we made the NSL a little bit smarter.

00:10:39.860 --> 00:10:43.270
So it now knows how to talk to
directory services and then get the view

00:10:43.390 --> 00:10:47.720
configuration information and behave
differently based on that information.

00:10:47.750 --> 00:10:50.940
And of course, we also made changes to
the Workgroup Manager,

00:10:50.940 --> 00:10:54.720
so you can actually create and edit
those configuration information and

00:10:54.720 --> 00:10:57.390
store them in directory services.

00:10:57.580 --> 00:10:59.810
And by the way, this technology,
this feature works with

00:10:59.810 --> 00:11:02.100
any directory system,
so it doesn't have to be LDAP.

00:11:02.130 --> 00:11:04.840
It could be Active Directory with
some schema changes,

00:11:04.840 --> 00:11:07.710
or it could even be local
NetInfo if you want to test it.

00:11:07.810 --> 00:11:11.000
And that's actually how I just
did a demo to just keep it simple.

00:11:11.000 --> 00:11:13.460
So we had all these three things
running on the same machine.

00:11:16.040 --> 00:11:23.510
Now take a look at what gets actually
stored in the directory when we

00:11:23.510 --> 00:11:23.510
do all this configuration editing.

00:11:24.100 --> 00:11:27.840
There are three different record types
that's involved that we're interested in.

00:11:28.050 --> 00:11:31.000
The network view, neighborhood,
and computer record types.

00:11:31.000 --> 00:11:33.290
So at the top we have
network view record,

00:11:33.300 --> 00:11:36.010
and it basically just
contains information such as

00:11:36.010 --> 00:11:39.250
should I append or replace,
and then pointers to the top-level

00:11:39.250 --> 00:11:40.700
neighborhoods that you've created.

00:11:40.700 --> 00:11:42.600
Something like this.

00:11:42.600 --> 00:11:46.180
And the network neighborhood
records contains basically

00:11:46.260 --> 00:11:48.000
pointers to all its contents.

00:11:48.040 --> 00:11:51.470
So it points to other neighborhood
record if it's nested,

00:11:51.510 --> 00:11:54.160
or to different computer
records if you have a bunch of

00:11:54.160 --> 00:11:57.840
different servers specified,
or references to network zones

00:11:57.840 --> 00:12:00.500
if you have dynamic contents.

00:12:00.500 --> 00:12:04.700
So what we just demoed here
would look something like this

00:12:04.700 --> 00:12:09.500
inside the directory if you want
to take a look at that system.

00:12:10.530 --> 00:12:12.580
And again, you can create multiple views.

00:12:12.800 --> 00:12:13.830
It doesn't have to be just one view.

00:12:13.940 --> 00:12:17.120
So you can create five or 10 of
these things or 50 of those things.

00:12:17.340 --> 00:12:21.200
And that gets us to the next topic,
and that is how does NSL pick

00:12:21.200 --> 00:12:25.880
a view when they have multiple
different view records in the system.

00:12:26.210 --> 00:12:28.260
It basically follows a set of rules.

00:12:28.390 --> 00:12:32.150
So what it does is,
it first looks at the directory and sees

00:12:32.280 --> 00:12:35.400
if there's a computer record for the
client machine that it's running on.

00:12:35.400 --> 00:12:37.820
Not the server computer record,
but the client computer record.

00:12:37.820 --> 00:12:40.310
And if it finds one,
it checks to see if there is a

00:12:40.410 --> 00:12:43.110
preferred view record specified in that.

00:12:43.120 --> 00:12:45.040
And if there is one, use it.

00:12:45.040 --> 00:12:49.330
If not, it looks at the local preference
file and see if there is a preferred

00:12:49.490 --> 00:12:51.450
view that it should be using.

00:12:51.680 --> 00:12:55.700
If not, it goes back to the directory and
it looks for a view whose record

00:12:55.770 --> 00:12:59.980
name matches the MAC address of
the machine this NSO is running on.

00:12:59.980 --> 00:13:04.380
If it doesn't find one,
it looks for IP address match.

00:13:04.380 --> 00:13:07.200
If it doesn't find one,
look for the subnet match.

00:13:07.240 --> 00:13:09.580
And if all the above fails,
it just goes ahead and

00:13:09.580 --> 00:13:12.500
uses the default view,
which we've actually used.

00:13:12.510 --> 00:13:15.430
And if there's no default view,
or if the default view is turned off,

00:13:15.470 --> 00:13:19.210
then it just goes back to
the default answer behavior.

00:13:20.460 --> 00:13:23.540
So, let's summarize.

00:13:23.540 --> 00:13:26.610
With this feature,
you have complete control over what

00:13:26.850 --> 00:13:30.590
your users would see in Finder when
they click on that network icon.

00:13:32.070 --> 00:13:34.750
You can easily create, edit,
and then preview them

00:13:34.870 --> 00:13:38.450
in Workgroup Manager,
the tool you already know.

00:13:38.640 --> 00:13:42.720
You can mix and match both
static and dynamic contents.

00:13:42.760 --> 00:13:44.630
You can replace/append,
so it gives you a bit

00:13:44.630 --> 00:13:47.390
more flexibility there.

00:13:47.450 --> 00:13:51.390
And you also can create different
views for different set of users.

00:13:52.650 --> 00:13:55.100
And all the configurations
stored in the directory,

00:13:55.160 --> 00:13:58.400
which means when you create that,
it automatically gets propagated

00:13:58.510 --> 00:14:02.500
to all the replicas when the
directory system replicates.

00:14:02.540 --> 00:14:06.680
And also you can use directory
services command line tools for

00:14:06.680 --> 00:14:12.210
editing them from remote machine,
from SSH, even on Linux machines.

00:14:13.190 --> 00:14:15.720
And all the configurations
stored in the directory,

00:14:15.720 --> 00:14:19.100
which means when you create that,
it automatically gets propagated

00:14:19.100 --> 00:14:23.100
to all the replicas when the
directory system replicates.

00:14:23.100 --> 00:14:27.280
And also you can use directory
services command line tools for

00:14:27.280 --> 00:14:29.930
editing them from remote machine,
from SSH, even on Linux machines.

00:14:30.610 --> 00:14:34.840
So that's actually all I had for
the management work browsing.

00:14:34.840 --> 00:14:37.650
And now I'd like to
introduce Rusty Tucker,

00:14:37.650 --> 00:14:39.860
who's going to tell us about
file service and locking.

00:14:39.860 --> 00:14:41.310
Thank you.

00:14:46.600 --> 00:14:48.160
Good morning.

00:14:48.170 --> 00:14:53.300
Locking in file services is an important
part of any file system or file services,

00:14:53.300 --> 00:14:58.470
especially so in Mac OS X Server where
we have such a variety of

00:14:58.470 --> 00:15:02.410
different file services serving
a variety of different clients.

00:15:02.490 --> 00:15:07.750
So today we're going to start by taking
an overview and review how locking

00:15:07.750 --> 00:15:12.280
works today for Windows over SMB,
for Carbon clients over AFP,

00:15:12.450 --> 00:15:14.660
and Unix clients over NFS.

00:15:15.800 --> 00:15:18.760
Then we'll take a look at
how we're enhancing this

00:15:18.760 --> 00:15:24.740
file locking interoperability
on our platform for Tiger.

00:15:25.280 --> 00:15:27.670
Finally,
then we'll wrap up with some notes

00:15:27.670 --> 00:15:31.900
for cross-platform developers
can use to develop collaborative

00:15:31.980 --> 00:15:33.670
applications using this technology.

00:15:37.810 --> 00:15:41.580
So we'll start with file
locking in AFP and SMB.

00:15:41.900 --> 00:15:44.440
Fortunately,
the two protocols provide very,

00:15:44.440 --> 00:15:46.650
very similar semantics in file locking.

00:15:46.650 --> 00:15:50.700
Both are using opens with deny modes.

00:15:50.760 --> 00:15:55.110
So they can open files
read-only with shared access,

00:15:55.250 --> 00:15:58.190
read-write with shared access.

00:15:58.190 --> 00:16:03.160
That would be a read-write with not
denying other readers or writers.

00:16:03.160 --> 00:16:07.180
And the most common case of
read-write with exclusive access,

00:16:07.180 --> 00:16:10.500
which is what most applications do.

00:16:12.010 --> 00:16:15.330
After opening a file
read/write with shared access,

00:16:15.450 --> 00:16:20.580
collaborative applications will then
ensure concurrency and serialize access

00:16:20.580 --> 00:16:28.210
to the files using range locks for the
ranges that they want to read or write.

00:16:29.210 --> 00:16:36.930
In AFB and SMB, these locks are mandatory
locks so that it's just a,

00:16:36.930 --> 00:16:41.970
other users are prevented from
opening a file so they don't

00:16:41.970 --> 00:16:44.390
have to test locks and so on.

00:16:47.360 --> 00:16:51.720
In Unix file locking, in contrast,
it's an opt-in policy,

00:16:51.740 --> 00:16:54.600
so the locks are advisory.

00:16:54.600 --> 00:16:59.990
You need to test for the presence
of the lock before opening a file.

00:17:00.000 --> 00:17:03.760
And you can use the Flock API to do so.

00:17:03.760 --> 00:17:09.400
You can take out an exclusive
or shared lock on the full file.

00:17:09.660 --> 00:17:13.590
If you want to do range locking,
you would use the F control APIs.

00:17:13.590 --> 00:17:20.920
It's an advisory lock that you would
test for both exclusive or shared access.

00:17:21.100 --> 00:17:26.600
[Transcript missing]

00:17:29.000 --> 00:17:29.490
I'm sorry.

00:17:29.550 --> 00:17:30.960
Oh.

00:17:30.960 --> 00:17:32.950
I'm on the wrong-- back to slides.

00:17:32.950 --> 00:17:35.380
Thank you.

00:17:35.540 --> 00:17:39.300
We don't have a demo for locking.

00:17:40.530 --> 00:17:43.420
As I was saying,
both advisory and mandatory

00:17:43.520 --> 00:17:45.320
schemes work very well.

00:17:45.590 --> 00:17:50.620
But in both cases,
the applications have to agree on a

00:17:50.680 --> 00:17:55.390
scheme that they're going to use to
ensure collaborative access to the files.

00:17:56.400 --> 00:18:01.390
In the Unix, using Unix locking,
applications must choose whether

00:18:01.430 --> 00:18:07.240
they're going to use the F-lock to
guarantee for concurrency or F-control.

00:18:07.240 --> 00:18:09.270
They can't use both.

00:18:09.270 --> 00:18:13.710
They're basically
exclusive one or the other.

00:18:14.660 --> 00:18:22.400
Which leads us to the way that
Samba and AFP map the open and deny

00:18:22.400 --> 00:18:27.100
and locks onto the Unix semantics.

00:18:27.200 --> 00:18:33.770
Standard Samba uses the F control to
map its range locks to the F control.

00:18:33.780 --> 00:18:38.150
So in this case,
it's not mapping any lock

00:18:38.150 --> 00:18:41.500
when it takes an open or deny.

00:18:43.080 --> 00:18:48.900
AFP, on the other hand,
maps its open denies to the F lock.

00:18:50.530 --> 00:18:55.350
And you can see here,
this is basically the

00:18:55.350 --> 00:18:56.790
standard architecture.

00:18:58.320 --> 00:19:00.830
and David For that.

00:19:00.830 --> 00:19:04.520
So in Tiger we want to enhance this
and really unify the way that AFP and

00:19:04.520 --> 00:19:07.670
SMB provide locking to their clients.

00:19:08.610 --> 00:19:12.700
Doing this will be able to
support concurrent access,

00:19:12.790 --> 00:19:17.000
not just ensure consistency,
but be able to have concurrent

00:19:17.000 --> 00:19:22.330
access from the two platforms on a
given file to provide shared editing

00:19:22.480 --> 00:19:25.070
for collaborative applications.

00:19:25.430 --> 00:19:28.500
Working with NFS,
because we don't have a perfect mapping

00:19:28.500 --> 00:19:33.800
between the semantics of the AFP and
SMB locking with the Unix file locking,

00:19:34.000 --> 00:19:38.930
will favor data integrity over
concurrent access with NFS.

00:19:39.360 --> 00:19:44.680
And then finally, because we,
and underlying the servers,

00:19:44.730 --> 00:19:49.010
we need to take out the Unix locks,
we'll have to use strict locking to

00:19:49.010 --> 00:19:53.630
emulate the mandatory nature of the
locks as provided to the clients

00:19:53.630 --> 00:19:57.020
on the Windows and Mac platforms.

00:19:58.010 --> 00:20:03.400
All this will be delegated to a new
system framework for range locking.

00:20:03.650 --> 00:20:12.150
Back to the architectural diagram,
we'll have AFP and Samba talking

00:20:12.150 --> 00:20:15.840
to POSIX and Carbon layers.

00:20:15.840 --> 00:20:21.450
Between the two of them will be a range
locking framework to negotiate access

00:20:21.450 --> 00:20:24.390
to files with the proper semantics.

00:20:25.910 --> 00:20:29.750
So double click on some
details on how this is actually

00:20:29.750 --> 00:20:33.670
implemented in the framework.

00:20:34.010 --> 00:20:37.750
As with AFP, we're going to map the open
deny calls to an F-lock.

00:20:37.750 --> 00:20:42.750
And you can see, according to this chart,
we have basically three different

00:20:42.750 --> 00:20:45.290
options to do from the F-lock.

00:20:45.300 --> 00:20:46.640
We can take no lock at all.

00:20:46.640 --> 00:20:48.970
We can take an exclusive
lock or a shared lock.

00:20:49.340 --> 00:20:53.000
And so this is not,
doesn't provide the full match

00:20:53.000 --> 00:20:56.940
to the semantics provided
by the open deny calls.

00:20:56.940 --> 00:21:01.610
So where the locking will
give us consistency with NFS,

00:21:01.670 --> 00:21:06.630
we'll use internally map the
consistency between the open

00:21:06.630 --> 00:21:09.810
deny calls within the framework.

00:21:14.930 --> 00:21:18.600
So byte range locking will be
fully enforced by the framework.

00:21:18.740 --> 00:21:21.590
We won't be taking an F control
because it won't be possible.

00:21:21.610 --> 00:21:23.900
We already have the F lock on the file.

00:21:23.920 --> 00:21:28.630
And the reason for doing this
is that the byte range locks are

00:21:28.810 --> 00:21:33.490
really more transitory in nature,
whereas the F lock persists for the

00:21:33.500 --> 00:21:36.900
entire time that the file is open,
giving us a better story

00:21:36.900 --> 00:21:40.220
around consistency with
other applications and NFS.

00:21:41.220 --> 00:21:46.030
The locked database is memory
mapped for better performance.

00:21:46.580 --> 00:21:51.100
And we'll emulate the mandatory
nature of the locks by testing within

00:21:51.100 --> 00:21:57.140
the framework and AFP and SMB for
the presence of both the range locks

00:21:57.140 --> 00:22:03.060
and denies before we open files
or perform read and write operations.

00:22:07.210 --> 00:22:10.390
So a few notes for developers that
want to take advantage of this

00:22:10.390 --> 00:22:13.540
in collaborative applications.

00:22:13.550 --> 00:22:16.500
On the Mac platform,
you'll want to use the Carbon APIs to

00:22:16.500 --> 00:22:18.980
access this capability.

00:22:18.980 --> 00:22:22.400
And first test for the
capability on the file system by

00:22:22.410 --> 00:22:24.820
testing for the open deny bit.

00:22:24.860 --> 00:22:29.160
Mac OS X provides support for
many different file systems.

00:22:29.160 --> 00:22:32.580
Each of them have a
variety of capabilities,

00:22:32.580 --> 00:22:36.300
and not all support open
deny or range locking.

00:22:38.500 --> 00:22:41.590
Finally, when you have found that
that capability exists,

00:22:41.760 --> 00:22:44.660
use the PPH opened and I sync call.

00:22:44.660 --> 00:22:49.590
And in this case,
specify IO read/write with shared access.

00:22:50.070 --> 00:22:55.010
PPA OpenDenySync also has variations
that allow for async operations and

00:22:55.010 --> 00:22:58.380
also operations on the resource fork.

00:22:59.310 --> 00:23:06.170
and finally use PB lock range sync to
gain exclusive access to a range of bytes

00:23:06.270 --> 00:23:09.050
that you want to either read or write.

00:23:11.600 --> 00:23:17.370
From the Windows platform,
you want to use the Create File API.

00:23:17.790 --> 00:23:21.450
And here, the default is that you'll
gain exclusive access.

00:23:21.580 --> 00:23:26.400
So you want to define, provide, specify,
I should say,

00:23:26.400 --> 00:23:30.500
that you want read/write shared access.

00:23:31.390 --> 00:23:35.160
And then finally use the lock
file API or lock file extended to

00:23:35.160 --> 00:23:37.900
gain exclusive access to the range
of bytes that you want to read

00:23:37.900 --> 00:23:40.890
or write from your application.

00:23:43.750 --> 00:23:48.920
Locking is just one of the many areas
that application developers can take

00:23:49.170 --> 00:23:52.200
advantage of on the Mac OS X platform.

00:23:52.200 --> 00:23:56.990
There's a session later on today,
Best Practices for

00:23:57.010 --> 00:24:01.690
Application Developers,
that session 108 today at 5 o'clock.

00:24:01.740 --> 00:24:05.890
You can gain more information around
performance and other APIs that are

00:24:05.890 --> 00:24:08.360
available to file system developers.

00:24:09.400 --> 00:24:12.570
And there's a number of online
resources that you can use

00:24:12.570 --> 00:24:14.380
to your advantage as well.

00:24:23.200 --> 00:24:25.820
And with that,
I'd like to introduce Chris Jalbert,

00:24:25.820 --> 00:24:29.910
who will provide some information
on failover and high availability.

00:24:40.300 --> 00:24:47.280
OK, when we were working on
the slides for this stuff,

00:24:47.280 --> 00:24:51.080
something that failover and high
availability has actually been in the

00:24:51.080 --> 00:24:53.780
server product for quite some time.

00:24:53.780 --> 00:24:56.560
But it seems like not a lot
of people know about it.

00:24:56.560 --> 00:25:00.990
Our sales engineers when they go out,
they try to talk about some of the

00:25:01.070 --> 00:25:04.340
extra features that Mac OS X has,
Mac OS X server,

00:25:04.340 --> 00:25:06.600
and they'll mention this.

00:25:06.600 --> 00:25:08.560
And most of the customers are like,
really?

00:25:08.630 --> 00:25:12.980
So I think the first thing to
talk about is what is failover?

00:25:13.170 --> 00:25:16.060
First of all, it's part of a high
availability solution.

00:25:16.060 --> 00:25:20.160
Apple has a lot of different
components to tell a story

00:25:20.160 --> 00:25:23.360
now about high availability,
and some that are hardware

00:25:23.360 --> 00:25:25.000
and some that are software.

00:25:25.040 --> 00:25:27.460
Failover is a software piece.

00:25:27.460 --> 00:25:33.430
And it provides the transparency of
availability for short-lived protocols,

00:25:33.430 --> 00:25:38.080
primarily Datagram, which are best known
as UDP-based protocols,

00:25:38.080 --> 00:25:42.130
and certain short-lived TCP protocols,
such as HTTP,

00:25:42.140 --> 00:25:46.870
where you connect to the web service
and you download a document and

00:25:46.910 --> 00:25:50.720
then continue making connections.

00:25:50.740 --> 00:25:54.400
And the basic premise behind it is
that when the primary node fails,

00:25:54.400 --> 00:25:58.590
the backup will take over that
primary IP's publicly accessible

00:25:58.590 --> 00:26:04.040
IP address and then offer the same
services that were on the primary.

00:26:04.040 --> 00:26:07.600
And it's typically backed by
a RAID or a SAN file system.

00:26:07.600 --> 00:26:11.690
for extra data integrity
on the file system level.

00:26:11.990 --> 00:26:14.980
So here's a typical hardware setup.

00:26:15.330 --> 00:26:18.730
On the top,
you'll see that I've put a DNS server,

00:26:18.740 --> 00:26:23.710
and the idea here is just the notion
that you'll have the two servers,

00:26:23.710 --> 00:26:25.600
your active server and
your backup server,

00:26:25.600 --> 00:26:28.740
but there needs to be something else
out there that has some information

00:26:28.750 --> 00:26:30.730
that the clients are going to reference.

00:26:30.730 --> 00:26:33.980
And the easiest thing to
point out is a DNS server.

00:26:33.980 --> 00:26:36.490
That's the thing that will
resolve the IP addresses for

00:26:36.490 --> 00:26:38.120
the primary and the secondary.

00:26:38.120 --> 00:26:41.620
And again,
we've demonstrated the backup with

00:26:41.630 --> 00:26:44.640
the RAID available to both machines.

00:26:44.640 --> 00:26:47.410
One thing that's been
omitted from this picture for

00:26:47.410 --> 00:26:50.860
simplicity is the fiber channel,
which is the stuff in blue,

00:26:50.860 --> 00:26:54.910
often will have a special fiber
channel switch wired up in

00:26:54.960 --> 00:26:59.450
there so that both servers can
access both sides of the RAID.

00:26:59.450 --> 00:27:01.480
It just has to do with a
hardware configuration.

00:27:02.190 --> 00:27:04.910
Another thing to point out
is that the private network,

00:27:04.910 --> 00:27:07.070
which is on the right
side of the diagram,

00:27:07.210 --> 00:27:09.150
can either be Ethernet or FireWire.

00:27:09.460 --> 00:27:12.040
With the IP over FireWire,
you can actually use that

00:27:12.130 --> 00:27:16.140
as your private network,
and it's a cheaper option by just

00:27:16.150 --> 00:27:22.070
kind of daisy-chaining FireWire
between your servers without having to

00:27:22.130 --> 00:27:28.240
have an extra network switch or hub,
and adds additional reliability because

00:27:28.240 --> 00:27:30.910
you don't need that extra hub there.

00:27:32.400 --> 00:27:37.340
So I think the first thing to point out
is that failover and high availability

00:27:37.340 --> 00:27:38.820
have been around since Jaguar.

00:27:38.820 --> 00:27:42.010
There was a failover product
that we shipped with that.

00:27:42.040 --> 00:27:45.580
However,
the philosophy that we had when designing

00:27:45.590 --> 00:27:48.110
that was that no two sites are alike.

00:27:49.860 --> 00:27:53.470
Any time that we tried to figure out,
well, gee, what would be a useful

00:27:53.500 --> 00:27:54.900
solution for customers?

00:27:54.900 --> 00:27:56.690
What would be a typical scenario?

00:27:56.740 --> 00:27:58.470
We couldn't come up with any.

00:27:58.500 --> 00:28:02.240
And when we asked the sales engineers,
they were telling us, oh, well,

00:28:02.240 --> 00:28:05.750
this customer needs QuickTime,
and this customer needs websites,

00:28:05.750 --> 00:28:08.260
and this customer needs home directories.

00:28:08.280 --> 00:28:11.030
So what we thought the
easiest thing to do was,

00:28:11.030 --> 00:28:15.170
well, how about we just kind of provide
the infrastructure and not the

00:28:15.170 --> 00:28:19.670
complete solution because everybody's
going to have to customize it.

00:28:19.820 --> 00:28:21.700
Everybody's site's going to
be a little bit different.

00:28:21.700 --> 00:28:24.960
And all we did for the
infrastructure then was just to

00:28:25.080 --> 00:28:29.220
manage the state of the peers,
the primary and the secondary,

00:28:29.220 --> 00:28:33.280
and then do the failover of the
IP address and email notifications

00:28:33.280 --> 00:28:36.830
and then ran executables,
which is the customized part of

00:28:36.940 --> 00:28:41.060
the site that the administrators
would have to do themselves.

00:28:41.060 --> 00:28:44.880
And we defined it and documented
it so that they could do so in

00:28:44.880 --> 00:28:48.980
the way that would meet their
own individual requirements.

00:28:49.800 --> 00:28:54.210
But there wasn't a lot of deployment
from our customers because it

00:28:54.210 --> 00:28:56.600
was too difficult to set up.

00:28:56.680 --> 00:28:59.470
And in particular,
the additional network interface

00:28:59.560 --> 00:29:02.550
in the previous releases had
to be very carefully set up.

00:29:02.620 --> 00:29:06.000
And most of the times when we would
go to look at what had happened

00:29:06.020 --> 00:29:09.840
in a site that wasn't working,
it was related to the network setup.

00:29:09.840 --> 00:29:12.360
And further,
not having a user interface really

00:29:12.360 --> 00:29:15.360
seemed to scare a lot of people
away because it required fairly

00:29:15.610 --> 00:29:19.360
significant network knowledge about
how the site was going to work.

00:29:19.380 --> 00:29:23.630
And that they'd have to use
VI to edit the etc host config,

00:29:23.680 --> 00:29:26.500
which seems to scare a lot of folks.

00:29:28.400 --> 00:31:04.900
[Transcript missing]

00:31:05.570 --> 00:31:09.960
That was primarily by leveraging
the IPv6 stuff that's now built in.

00:31:10.350 --> 00:31:13.900
And with that,
the daemon can actually auto-configure

00:31:13.900 --> 00:31:16.390
as much as possible on the system.

00:31:16.410 --> 00:31:19.230
So the daemon comes up,
tries to figure out

00:31:19.230 --> 00:31:23.050
where it is in the world,
and then auto-configures what it

00:31:23.050 --> 00:31:27.830
can auto-configure for the private
network and be able to communicate,

00:31:27.830 --> 00:31:31.920
sort of auto-discovers what's going on,
and then will start the

00:31:32.050 --> 00:31:34.780
heartbeat between the two nodes.

00:31:36.810 --> 00:31:40.000
The one thing that people did
seem to like were the external

00:31:40.000 --> 00:31:41.660
scripts that allowed customization.

00:31:41.660 --> 00:31:44.760
So we're definitely keeping
that in this release,

00:31:44.760 --> 00:31:48.260
and we're improving the
documentation and again providing

00:31:48.260 --> 00:31:50.000
some more samples for that.

00:31:50.040 --> 00:31:54.520
And the real reason for this change
is to build the foundation for future

00:31:54.640 --> 00:31:58.620
directions that we can go once we
have these two daemons that are

00:31:58.620 --> 00:32:03.440
sitting there to talk to each other
about the reliability of hardware.

00:32:03.440 --> 00:32:06.940
And the step that we took for
that was to expand and secure

00:32:06.940 --> 00:32:08.780
the communication model.

00:32:08.780 --> 00:32:12.290
So the daemons are actually
now talking over IPsec so

00:32:12.520 --> 00:32:17.320
that the authenticated IPsec,
for those who actually

00:32:17.320 --> 00:32:20.340
know much about IPsec,
it was a learning experience for me,

00:32:20.460 --> 00:32:25.380
so that when one node talks to the other,
they know that, yeah, it's okay,

00:32:25.610 --> 00:32:28.700
that's coming from
somebody that I can trust.

00:32:28.700 --> 00:32:31.840
And that allows additional communication.

00:32:31.840 --> 00:32:33.390
Like one node to actually tell the other.

00:32:33.440 --> 00:32:34.980
And then another node to shut down.

00:32:35.050 --> 00:32:36.980
Generally,
you don't want to do that unless you

00:32:36.980 --> 00:32:38.400
can trust where it's coming from.

00:32:38.580 --> 00:32:44.530
And so those future directions require
this kind of secure communication model.

00:32:46.600 --> 00:32:48.980
We're on to the next.

00:32:49.320 --> 00:32:50.120
There we go.

00:32:50.170 --> 00:32:54.470
So the other thing to talk
about is what's not in Tiger.

00:32:54.630 --> 00:32:56.960
There's something known as
instant or live failover.

00:32:56.980 --> 00:33:01.080
This is a very,
very difficult thing to accomplish,

00:33:01.080 --> 00:33:04.820
which means that as soon as
the primary node is offline,

00:33:04.820 --> 00:33:06.280
the secondary takes over.

00:33:06.300 --> 00:33:09.320
As if nothing happened,
it has a complete state of information.

00:33:09.320 --> 00:33:12.210
And it's a very sophisticated problem.

00:33:12.220 --> 00:33:15.060
And again, we're building the
foundation for the future.

00:33:15.060 --> 00:33:16.560
This is our first step.

00:33:16.570 --> 00:33:20.960
And this is not something that we can
accomplish in the Tiger time frame.

00:33:20.960 --> 00:33:22.360
Load balancing.

00:33:22.360 --> 00:33:27.510
Load balancing is often solved with
other devices' existing hardware.

00:33:27.520 --> 00:33:30.500
There's some open source software
to actually be dealing with that.

00:33:30.500 --> 00:33:32.300
Again, we're building a foundation.

00:33:32.300 --> 00:33:36.200
So load balancing is not in Tiger.

00:33:36.220 --> 00:33:41.230
The other thing that we-- we added a
restriction that the file services can

00:33:41.230 --> 00:33:45.840
only be running on one node at a time,
on the primary and not on the secondary.

00:33:45.840 --> 00:33:46.520
Other services.

00:33:46.520 --> 00:33:48.220
They can be running on the secondary.

00:33:48.250 --> 00:33:52.280
But the file services,
the locking stuff that they added,

00:33:52.280 --> 00:33:58.420
and the file system itself underneath,
we were worried that there might

00:33:58.500 --> 00:34:01.320
be some issues about concurrent
access and stuff like that.

00:34:01.320 --> 00:34:03.850
So to be safe,
we wanted to make sure that

00:34:03.850 --> 00:34:07.200
data integrity was primary,
as was mentioned earlier.

00:34:07.200 --> 00:34:10.960
So for this release,
the file services can

00:34:10.960 --> 00:34:12.270
only run on the primary.

00:34:12.400 --> 00:34:14.670
When it fails over,
it'll switch to the secondary and then

00:34:14.670 --> 00:34:16.480
be handed back on the manual failback.

00:34:16.480 --> 00:34:19.950
Again, we're building a foundation,
and we hope to improve

00:34:19.950 --> 00:34:21.640
on that in the future.

00:34:21.810 --> 00:34:25.680
The other thing is there are no
multi-node access to the RAID.

00:34:25.860 --> 00:34:28.420
And again,
this is kind of a-- sort of the

00:34:28.470 --> 00:34:33.200
reason or the side effect for that
file services only on one node.

00:34:33.350 --> 00:34:35.960
If you want multi-node
access to the RAID,

00:34:35.960 --> 00:34:38.280
there's a product called XAN,
and there's a lot of

00:34:38.280 --> 00:34:39.640
sessions about it here.

00:34:39.640 --> 00:34:44.400
You're welcome to go through those
sessions and get more information.

00:34:44.400 --> 00:34:46.440
So here's the user interface.

00:34:46.440 --> 00:34:48.330
This is the interface that we propose.

00:34:48.340 --> 00:34:51.260
You'll notice it's
actually fairly simple.

00:34:51.390 --> 00:34:55.290
Up at the top is what I've
been calling the public node,

00:34:55.380 --> 00:34:57.920
and we're still trying to come
up with a better name for that.

00:34:57.930 --> 00:35:02.100
That's basically just the
DNS name for the primary node.

00:35:02.120 --> 00:35:05.060
That's where everything is keyed off.

00:35:05.090 --> 00:35:08.100
So you enter that in,
and that's what the secondary

00:35:08.100 --> 00:35:09.860
machine will babysit.

00:35:09.860 --> 00:35:13.020
We've added additional email
addresses in the previous release.

00:35:13.020 --> 00:35:14.420
We could only have one.

00:35:14.470 --> 00:35:16.400
So now you can have as many as you want.

00:35:16.400 --> 00:35:20.580
And then the all-important
failover now and failback,

00:35:20.580 --> 00:35:24.260
which will change to failback now,
to do the manual failback.

00:35:24.260 --> 00:35:27.640
And the status window inside
Server Admin will show you the status

00:35:27.640 --> 00:35:32.040
of where you are with some explanatory
text to help guide you through it.

00:35:32.040 --> 00:35:34.130
Also,
we tried to provide some explanatory

00:35:34.130 --> 00:35:37.620
text to help you set it up.

00:35:37.620 --> 00:35:42.420
Again,
it's somewhat of a complicated scenario,

00:35:42.420 --> 00:35:46.360
but we're trying to simplify it as
much as possible for our customers.

00:35:48.070 --> 00:35:52.540
So in Tiger, we currently have a
single daemon process.

00:35:52.540 --> 00:35:54.620
In previous releases,
we actually had two.

00:35:54.620 --> 00:35:57.940
We had one that was sort of broadcasting,
another one that was listening.

00:35:57.940 --> 00:36:02.100
So we've combined them into one
to simplify the communication

00:36:02.100 --> 00:36:06.100
model and help with the enrichment
of the communication model.

00:36:06.100 --> 00:36:09.760
It runs over authenticated
IPsec for our security,

00:36:09.760 --> 00:36:12.720
and it uses standard
plists for communication.

00:36:12.720 --> 00:36:17.790
So it's a command sequence with
arguments and passes data and

00:36:17.800 --> 00:36:23.690
something that looks like notifications
and commands and stuff like that.

00:36:23.700 --> 00:36:25.440
And it's all based on plist.

00:36:25.440 --> 00:36:28.200
And then for the private network,
we use IPv6,

00:36:28.200 --> 00:36:29.760
which is automatically set up.

00:36:29.760 --> 00:36:33.080
So that means that the customers
don't have to set up a whole other

00:36:33.080 --> 00:36:38.030
private network and give 10 addresses
or anything to their FireWire address

00:36:38.030 --> 00:36:41.040
or their private ethernet address.

00:36:41.040 --> 00:36:43.530
And then the daemon
auto-configures from the DNS name,

00:36:43.540 --> 00:36:46.440
as I mentioned on the previous slide.

00:36:46.440 --> 00:36:47.320
We've enhanced some.

00:36:47.320 --> 00:36:51.060
We've added the helper scripts
that were there previously.

00:36:51.200 --> 00:36:54.720
They were notify failover
and process failover.

00:36:54.720 --> 00:37:01.080
And we've added some--
the site-specific scripts,

00:37:01.100 --> 00:37:04.040
sorry, the customized stuff
that customers would use,

00:37:04.040 --> 00:37:05.220
that's in the same location.

00:37:05.220 --> 00:37:09.350
So if someone actually managed to
set up IP failover in the previous

00:37:09.350 --> 00:37:13.580
releases and got doing exactly
the way that they wanted to do it,

00:37:13.600 --> 00:37:17.060
when they upgrade to Tiger,
they won't lose that customization.

00:37:17.060 --> 00:37:20.100
And it will still function
for them as it did previous,

00:37:20.100 --> 00:37:23.800
with the exception of
the manual failback.

00:37:24.760 --> 00:37:28.040
So how do you enable your
service for failover?

00:37:28.080 --> 00:37:32.000
Well, first of all, when possible,
don't be tied to specific IP addresses.

00:37:32.060 --> 00:37:35.900
Because much like in
a mobile environment,

00:37:35.910 --> 00:37:39.650
where you've got your laptop that's
going between ethernet and airport

00:37:39.960 --> 00:37:44.330
and different airport zones,
when you're dealing with failover,

00:37:44.340 --> 00:37:46.650
IP addresses will come and go.

00:37:46.880 --> 00:37:50.240
So if you're tied to
a specific IP address,

00:37:50.250 --> 00:37:51.980
and that IP address
goes out from under you,

00:37:52.050 --> 00:37:55.900
then your service generally is
going to be a little confused.

00:37:55.950 --> 00:37:59.510
So one of the ways to get around that
is to use the system configuration

00:37:59.600 --> 00:38:01.940
framework and become network aware.

00:38:02.180 --> 00:38:06.190
There's actually another session--
I think it's tomorrow-- on how to

00:38:06.190 --> 00:38:08.380
write your app to be network aware.

00:38:08.410 --> 00:38:12.070
And that applies to the server product,
which is generally a much more

00:38:12.070 --> 00:38:15.740
static environment than a desktop,
particularly a laptop.

00:38:15.770 --> 00:38:19.630
But it's still important
for dealing with failover.

00:38:19.710 --> 00:38:22.480
The other thing is that you should
be able to gracefully handle the

00:38:22.480 --> 00:38:24.400
mounting or unmounting of file systems.

00:38:24.400 --> 00:38:27.400
In a failover case where we're
dealing with file services,

00:38:27.420 --> 00:38:29.970
generally that means the home
directories are going to come

00:38:29.970 --> 00:38:31.280
up on the secondary machine.

00:38:31.320 --> 00:38:33.320
And in the failback case,
those home directories

00:38:33.320 --> 00:38:34.710
are going to go away.

00:38:34.740 --> 00:38:38.590
So that means that if you're
depending on stuff in the file system,

00:38:38.590 --> 00:38:40.420
they may come and go on you.

00:38:40.430 --> 00:38:43.930
And when possible,
don't keep open references to

00:38:43.930 --> 00:38:48.520
those files on the file system,
because it could go away.

00:38:48.520 --> 00:38:51.940
And the other thing is you might want
to consider if you're writing a client,

00:38:51.940 --> 00:38:56.120
the client side of this is to
consider automatic reconnect.

00:38:56.150 --> 00:38:59.550
So when that service is lost temporarily,
you can automatically reconnect

00:38:59.550 --> 00:39:02.420
if you've got credentials,
or if you're using the

00:39:02.430 --> 00:39:05.230
single sign-on technology,
just to be able to reconnect to the

00:39:05.280 --> 00:39:07.440
server once the secondary takes over.

00:39:07.440 --> 00:39:10.710
And the other thing you might want
to consider for future directions is

00:39:10.840 --> 00:39:12.770
an automatic redirection of clients.

00:39:12.850 --> 00:39:16.660
So if there is a bank of servers,
like in the case of the

00:39:16.660 --> 00:39:18.390
primary and the secondary,

00:39:18.550 --> 00:39:22.400
or perhaps more if the customers
have set that up that way.

00:39:22.470 --> 00:39:26.720
When you connect to the first one,
the service could respond to the client,

00:39:26.810 --> 00:39:28.700
"I'm sorry, I'm really busy right now.

00:39:28.840 --> 00:39:35.800
Please try this other site instead."
So that's something else to consider.

00:39:35.800 --> 00:39:40.730
That is just an enhancement on
top of the failover that we think

00:39:41.030 --> 00:39:44.090
would be beneficial to customers.

00:39:47.670 --> 00:39:51.980
So for services that can't be modified,
so for things that are open source,

00:39:52.060 --> 00:40:00.360
things like Apache or open source
FTP that isn't really designed to have a

00:40:00.370 --> 00:40:04.490
lot of customization just for Mac OS X,
you can use these customized

00:40:04.500 --> 00:40:06.050
scripts that I talked about before.

00:40:08.000 --> 00:40:11.730
And there's a well-defined sequence
of what happens when an IP address

00:40:11.730 --> 00:40:13.620
is to be acquired or released.

00:40:13.620 --> 00:40:19.060
And it will process the
directory in library IP failover.

00:40:19.060 --> 00:40:22.400
Each directory will have as
its name the IP address that

00:40:22.400 --> 00:40:24.480
will be acquired or released.

00:40:24.480 --> 00:40:28.050
So first it runs a test script to
determine whether or not it should

00:40:28.050 --> 00:40:30.040
acquire or release the address.

00:40:30.040 --> 00:40:35.220
And if it fails,
if it returns a non-zero status,

00:40:35.220 --> 00:40:37.700
then it will abort the acquisition.

00:40:37.800 --> 00:40:38.210
And if it fails,
if it returns a non-zero status,

00:40:38.230 --> 00:40:38.790
then it will abort the
acquisition or the release.

00:40:39.020 --> 00:40:44.750
This is much less important in Tiger.

00:40:44.840 --> 00:40:47.400
In previous releases,
this was the way to prevent automatic

00:40:47.400 --> 00:40:49.040
failover or automatic failback.

00:40:49.040 --> 00:40:51.420
If you just wanted to be able
to be a notification mechanism,

00:40:51.420 --> 00:40:53.120
you could have the test script do this.

00:40:53.140 --> 00:40:57.180
But with this feature added and a
little more control for the users,

00:40:57.180 --> 00:41:00.580
this script in particular
becomes much less useful.

00:41:00.580 --> 00:41:04.890
However, the other scripts,
which are the pre-acquisition

00:41:05.100 --> 00:41:07.780
and pre-release scripts,
in addition to the test script,

00:41:07.780 --> 00:41:07.780
are also more useful.

00:41:07.800 --> 00:41:11.490
But in addition to the peers,
which are the post-acquisition

00:41:11.560 --> 00:41:15.100
and post-release scripts,
are where all the meat happens

00:41:15.100 --> 00:41:19.540
in terms of dealing with those
services that aren't failover ready.

00:41:19.540 --> 00:41:24.180
So in the case of an acquisition,
we'll run the test script.

00:41:24.260 --> 00:41:27.450
We'll run all of the
pre-acquisition scripts,

00:41:27.460 --> 00:41:30.840
so all the scripts that
begin with this pre-ACQ.

00:41:30.840 --> 00:41:35.240
And then it will actually acquire
the address using ifconfig and then

00:41:35.240 --> 00:41:37.700
run the post-acquisition scripts.

00:41:37.780 --> 00:41:40.200
So in the release case,
it's very similar,

00:41:40.200 --> 00:41:43.590
but it's clearly using the
release version of the scripts.

00:41:43.660 --> 00:41:48.820
So this is a case where, let's say,
the primary is running the web service,

00:41:48.820 --> 00:41:52.940
and on failover,
you want the web service to be running.

00:41:52.940 --> 00:41:55.630
Well, you wouldn't do anything
in the pre-acquisition,

00:41:55.630 --> 00:41:58.980
but in the post-acquisition,
you would start up your web service.

00:41:58.980 --> 00:42:01.380
And in the release,
you want to shut it down before

00:42:01.380 --> 00:42:04.290
you get rid of the IP address,
so you would shut down Apache in

00:42:04.290 --> 00:42:05.700
the pre-release script.

00:42:05.800 --> 00:42:08.650
So that's something that will
be... One of the samples,

00:42:08.650 --> 00:42:09.680
just to demonstrate.

00:42:09.680 --> 00:42:12.150
So in previous releases,
we didn't pass any

00:42:12.150 --> 00:42:13.760
arguments to the script.

00:42:13.870 --> 00:42:16.390
We figured there was enough
information that the scripts or

00:42:16.450 --> 00:42:18.040
executables could figure it out.

00:42:18.500 --> 00:42:20.410
However,
to simplify some of the logic so that

00:42:20.420 --> 00:42:23.740
all of the scripts and executables
aren't doing the same thing,

00:42:23.740 --> 00:42:28.120
we've changed the invocation a little
bit to pass in whether or not we're

00:42:28.120 --> 00:42:33.190
acquiring or releasing and exactly which
IP address that we're operating on.

00:42:34.900 --> 00:42:40.200
So to summarize about failover,
we currently offer a bunch of

00:42:40.290 --> 00:42:42.950
components for high availability.

00:42:43.050 --> 00:42:46.040
There are some that are software,
like Watchdog and LaunchD.

00:42:46.040 --> 00:42:49.890
LaunchD is actually-- we'll have
another session later in the week.

00:42:50.080 --> 00:42:51.740
Failover, which I've talked about.

00:42:51.970 --> 00:42:58.520
There's also automatic hardware reboot,
which if the machine freezes, I think,

00:42:58.530 --> 00:43:01.220
is actually how the user
interface specifies it.

00:43:01.220 --> 00:43:04.450
It'll reboot after some period of time,
which is typically five minutes.

00:43:04.550 --> 00:43:10.960
And we also have some hardware solutions,
like XAN and XSERV RAID.

00:43:11.200 --> 00:43:13.640
One of the things about
failover in Tiger,

00:43:13.710 --> 00:43:16.590
compared to the previous versions,
it's going to be a lot easier.

00:43:16.810 --> 00:43:20.560
So we hope that a lot of
customers will be using it.

00:43:20.660 --> 00:43:24.340
But that also means that your
services could be affected.

00:43:24.500 --> 00:43:28.650
So where possible, design your services
with failover in mind.

00:43:28.850 --> 00:43:30.650
And generally,
that doesn't require a lot.

00:43:30.790 --> 00:43:34.630
First, it means to be network agnostic,
to be aware of changes in the

00:43:34.630 --> 00:43:38.540
network and the file system,
and to be fault tolerant,

00:43:38.540 --> 00:43:40.840
which I know is a really broad word.

00:43:40.840 --> 00:43:44.300
But it just generally means
that when you go to open a file,

00:43:44.300 --> 00:43:46.330
it may fail.

00:43:46.340 --> 00:43:50.380
And you just need to be able to
handle that kind of stuff gracefully.

00:43:51.010 --> 00:43:54.180
And for those services
that can't be modified,

00:43:54.180 --> 00:43:57.420
you can leverage the failover
scripts and provide sample scripts

00:43:57.420 --> 00:44:02.480
to your customers to ensure that your
services stay up or come back up on

00:44:02.490 --> 00:44:06.040
the secondary when a failover does,
in fact, happen.

00:44:07.690 --> 00:44:13.220
So the second topic that I'll be talking
about today is certificate management.

00:44:14.270 --> 00:44:18.200
Sorry, I'm having a little
problem with the clicker.

00:44:18.220 --> 00:44:21.680
So certificate management,
there was some stuff in Panther.

00:44:21.720 --> 00:44:23.980
There were a lot of different
services that could actually

00:44:23.980 --> 00:44:25.020
make use of certificates.

00:44:25.090 --> 00:44:28.310
Most of them were based
on open source projects.

00:44:28.320 --> 00:44:31.420
Open Directory,
although that was our creation,

00:44:31.430 --> 00:44:37.060
makes use of some certificates,
primarily in the LDAP for LDAP over SSL.

00:44:37.060 --> 00:44:42.400
Mail, Postfix, and IMAP can actually use
SSL certificates there as well.

00:44:42.400 --> 00:44:46.240
VPN uses certificates
for its L2TP protocol.

00:44:46.270 --> 00:44:49.680
And web, of course, the original SSL.

00:44:49.740 --> 00:44:53.510
However, the configuration was very
inconsistent across them and

00:44:53.510 --> 00:44:55.110
required a lot of manual setup.

00:44:55.120 --> 00:44:58.910
You needed to generate the keys by hand
and needed to enter in the appropriate

00:44:58.910 --> 00:45:01.060
information in the user interface.

00:45:01.090 --> 00:45:03.450
And the services often
couldn't share certificates.

00:45:03.480 --> 00:45:07.170
You had to create a certificate
for each service instead of having

00:45:07.200 --> 00:45:09.430
sort of one global for the machine.

00:45:12.820 --> 00:45:15.770
So for Tiger, we've changed that.

00:45:15.910 --> 00:45:20.840
And we've centralized certificate
management in the Certificates

00:45:20.840 --> 00:45:22.510
tab in the server settings.

00:45:22.700 --> 00:45:26.520
So there'll be some UI screenshots,
and I'll show you what I mean by that.

00:45:26.700 --> 00:45:28.740
But the idea is that all
the certificates you create,

00:45:28.740 --> 00:45:30.880
you do so in a central location.

00:45:30.890 --> 00:45:35.240
And then it'll integrate in with
a certificate authority website.

00:45:35.320 --> 00:45:39.360
So we actually have the means to
take a certificate signing request.

00:45:39.360 --> 00:45:41.900
And you can either paste it
in their website or email it

00:45:41.950 --> 00:45:43.900
to a certificate authority.

00:45:43.920 --> 00:45:47.520
And we leverage the new certificate
assistant that's in Tiger so that you

00:45:47.520 --> 00:45:52.000
can actually email those certificates
to the local CA for signing.

00:45:52.020 --> 00:45:56.610
And inside each service that could
actually leverage the certificates,

00:45:56.690 --> 00:46:02.420
we present a list of those available
certificates rather than the previous UI.

00:46:02.680 --> 00:46:05.720
So here's the new Certificates tab.

00:46:06.810 --> 00:46:08.940
You'll notice that we have a list here.

00:46:09.110 --> 00:46:13.900
We show when it was created
and the date of expiration.

00:46:13.990 --> 00:46:18.360
And these are currently only self-signed,
because after all, they're examples.

00:46:18.590 --> 00:46:22.340
But this UI is very similar
to most other table views,

00:46:22.340 --> 00:46:24.600
where you can add, edit,
and delete stuff.

00:46:24.650 --> 00:46:28.940
You'll also notice that on the top level,
it's actually a global

00:46:29.490 --> 00:46:31.540
setting for the server.

00:46:31.650 --> 00:46:36.800
So the General tab has things like
the server name and the serial number,

00:46:36.800 --> 00:46:39.970
and the certificates
are just a peer of that.

00:46:40.900 --> 00:46:44.950
So this is how you would
actually create a certificate.

00:46:45.030 --> 00:46:48.000
Standard stuff for setting stuff.

00:46:48.120 --> 00:46:51.920
And once you've actually create
the self-signed certificate,

00:46:51.980 --> 00:46:59.420
we have a couple of buttons to request
a signed certificate from a CA.

00:46:59.420 --> 00:47:02.050
And then once you get that result back,
to paste it in.

00:47:02.140 --> 00:47:03.860
And these are what the
dialogues look like.

00:47:03.860 --> 00:47:05.490
It's fairly simple.

00:47:05.500 --> 00:47:09.000
It can actually email it
directly from the admin app.

00:47:09.040 --> 00:47:11.740
So you don't even have to
cut and paste anything.

00:47:11.740 --> 00:47:14.880
It'll just generate the
email and send it off.

00:47:15.090 --> 00:47:16.850
Or you can drag that
little icon over there.

00:47:16.860 --> 00:47:19.440
It'll actually drag a
clipping with the certificate.

00:47:19.480 --> 00:47:22.540
And then once you get the result back,
you just paste it in, click OK,

00:47:22.540 --> 00:47:25.590
and you have a bona
fide signed certificate.

00:47:26.300 --> 00:47:33.140
So that centralized list will
really simplify the user experience.

00:47:33.190 --> 00:47:37.120
And the following services-- I'm sorry.

00:47:37.200 --> 00:47:39.150
I didn't mean to say it like that.

00:47:39.290 --> 00:47:42.550
We do have a bunch of services
that actually use the new

00:47:42.660 --> 00:47:45.020
API and the user interface.

00:47:45.020 --> 00:47:48.720
Again, it's the same ones that you've
seen from previous releases.

00:47:48.800 --> 00:47:51.030
But we're leveraging it
with this new interface.

00:47:51.170 --> 00:47:56.260
So just to show you an example,
this is what configuring

00:47:56.260 --> 00:48:00.300
SSL for Open Directory was
like in previous releases.

00:48:00.380 --> 00:48:02.700
So you could turn it on,
but then you had to specify

00:48:02.700 --> 00:48:08.240
each of the different files and
all that stuff well in Tiger.

00:48:08.470 --> 00:48:11.440
I think the battery is
dying on the clicker here.

00:48:11.440 --> 00:48:13.020
In Tiger, it looks like this.

00:48:13.020 --> 00:48:13.980
It's just a pop-up.

00:48:13.980 --> 00:48:17.240
You pick one of them,
and we do all of the stuff behind

00:48:17.240 --> 00:48:23.180
the scenes necessary to activate
that certificate for LDAP over SSL.

00:48:28.680 --> 00:48:31.700
Thank you, I'll pass the word along.

00:48:31.780 --> 00:48:34.540
Likewise, here's the old web UI.

00:48:34.760 --> 00:48:36.840
Same kind of thing,
all these multi lines.

00:48:36.840 --> 00:48:42.930
And clearly, when you ask the customer,
hey, make sure you spell that right,

00:48:43.720 --> 00:48:45.790
Well, that's the new UI.

00:48:45.960 --> 00:48:47.370
So greatly simplified.

00:48:47.570 --> 00:48:48.740
They just pick one out of the list.

00:48:48.790 --> 00:48:53.920
If it needs to be exported because the
web server only understands OpenSSL,

00:48:53.920 --> 00:48:55.320
again, we do that in the background.

00:48:55.320 --> 00:48:59.360
So it's automatically activated
for that particular service.

00:49:01.680 --> 00:49:06.280
So what can you do to take advantage
of certificate management in Tiger?

00:49:06.320 --> 00:49:08.660
Well, there's two command line tools.

00:49:08.870 --> 00:49:11.090
There's one that was
available in Panther,

00:49:11.100 --> 00:49:11.820
Server Admin.

00:49:12.060 --> 00:49:18.320
And we've added a new one, Cert Admin,
to simplify your use of certificates.

00:49:18.580 --> 00:49:22.740
So if you wanted to see all of the
certificates on the system and get

00:49:22.740 --> 00:49:27.420
it as a plist because you're using
Foundation or Core Foundation,

00:49:27.470 --> 00:49:30.520
and you want to be able to parse
it and get all the parameters,

00:49:30.570 --> 00:49:34.360
you can execute this command.

00:49:34.400 --> 00:49:36.670
Go ahead, I'll let you all copy it down.

00:49:37.520 --> 00:49:41.290
And that will actually generate
a large plist with all of the

00:49:41.300 --> 00:49:45.470
certificates in it and all of the
different settings associated with it.

00:49:45.740 --> 00:49:48.020
Most of the stuff that came
from that settings panel,

00:49:48.020 --> 00:49:52.650
the creation panel,
about the site name and

00:49:52.650 --> 00:49:54.510
the CSR and all that stuff.

00:49:54.580 --> 00:49:56.340
So this is a very rich output.

00:49:56.340 --> 00:49:59.200
However,
if you wanted to put this in your UI,

00:49:59.200 --> 00:50:01.360
well, that's a lot of parsing.

00:50:01.360 --> 00:50:07.960
So we've provided a more simplified tool,
and that's the cert admin tool.

00:50:07.960 --> 00:50:13.080
And if you just say cert admin list,
it just spits out the name so you can

00:50:13.080 --> 00:50:16.140
populate that pop-up just like we do.

00:50:16.140 --> 00:50:21.600
And if you need to export the certificate
to OpenSSL because the service you're

00:50:21.600 --> 00:50:26.210
using only does OpenSSL instead
of using Apple Security Framework,

00:50:26.220 --> 00:50:29.010
then we have a fairly
simple command to export it,

00:50:29.010 --> 00:50:31.290
and you just give it the certificate.

00:50:31.360 --> 00:50:32.360
And that's the site name.

00:50:32.480 --> 00:50:38.470
So we've tried to provide tools to really
simplify your ability to leverage this,

00:50:38.580 --> 00:50:42.200
what we hope will be a very cool
new feature for users to increase

00:50:42.200 --> 00:50:43.360
the security of their product.

00:50:43.370 --> 00:50:48.310
And hopefully these tools will
allow you to leverage that as well.

00:50:50.900 --> 00:50:53.100
So, why do we care about this?

00:50:53.180 --> 00:50:54.800
Well,
because we all know that certificates

00:50:54.800 --> 00:50:56.510
are an important tool for securing data.

00:50:56.520 --> 00:51:03.760
SSL is a key thing and more protocols
today have SSL extensions and maybe

00:51:03.910 --> 00:51:06.530
your protocol wants to do that as well.

00:51:07.640 --> 00:51:10.410
With Tiger Server,
we've really simplified and

00:51:10.410 --> 00:51:14.930
centralized the certificate
management and provided tools for you

00:51:14.930 --> 00:51:22.280
to leverage that and to be able to
integrate them into your own service.

00:51:24.860 --> 00:51:26.480
And that's it for certificate management.

00:51:26.490 --> 00:51:27.180
I'm sorry.

00:51:27.180 --> 00:51:28.560
I really think the
batteries are dying here.

00:51:28.560 --> 00:51:29.500
It's clicking out on me.

00:51:29.520 --> 00:51:33.760
So hopefully you'll be able to
leverage certificate management

00:51:33.800 --> 00:51:35.680
in your products as well.

00:51:35.680 --> 00:51:40.010
So for more information on all the
things that we've talked about today,

00:51:40.030 --> 00:51:43.530
there's a lot of different
stuff available on the DVDs.

00:51:43.530 --> 00:51:45.460
There's some documentation
and release notes.

00:51:45.460 --> 00:51:49.790
And as additional drafts come available,
those will show up through

00:51:50.290 --> 00:51:52.220
the developer websites.

00:51:52.280 --> 00:51:57.160
And we have man pages
on the stuff on the DVD,

00:51:57.170 --> 00:51:59.390
and we're adding more every day.

00:51:59.390 --> 00:52:04.380
So there's a lot of different resources
on the web and a lot of different

00:52:04.380 --> 00:52:08.130
sessions as well to be able to get
some additional information about

00:52:08.230 --> 00:52:11.760
some of the things we talked about,
like network awareness and

00:52:11.760 --> 00:52:15.350
the best practices for file
systems and things like that.