WEBVTT

00:00:12.550 --> 00:00:16.250
4.13, plug-in development
for Safari and Web Kit.

00:00:16.410 --> 00:00:17.520
I'm Chris Blumenberg.

00:00:17.570 --> 00:00:19.740
I'm a Safari engineer.

00:00:19.740 --> 00:00:21.430
So first of all,
what are you going to learn here?

00:00:21.700 --> 00:00:23.720
Well, first of all,
you're going to learn what are plug-ins,

00:00:23.720 --> 00:00:24.970
in case you don't already know.

00:00:25.080 --> 00:00:27.190
Then I'm going to go into
why you develop plug-ins.

00:00:27.240 --> 00:00:30.470
The typical reason for wanting to
develop plug-ins is to extend the

00:00:30.470 --> 00:00:34.020
functionality of a web browser,
but you'll soon see that there

00:00:34.020 --> 00:00:35.980
are other reasons as well.

00:00:35.980 --> 00:00:38.040
I'll go into how to develop plug-ins.

00:00:38.040 --> 00:00:41.450
I'll go into the types of plug-ins that
you can develop and then the issues

00:00:41.800 --> 00:00:44.240
involved with developing those plug-ins.

00:00:44.400 --> 00:00:46.570
And then I'll discuss using
plug-ins in your web page.

00:00:46.570 --> 00:00:50.030
That will involve the right kind
of HTML for embedding your plug-in

00:00:50.030 --> 00:00:54.780
on a web page as well as scripting
your plug-in from JavaScript.

00:00:55.580 --> 00:00:57.000
So what are plug-ins?

00:00:57.080 --> 00:00:59.180
Well, plug-ins are libraries.

00:00:59.280 --> 00:01:02.440
Typically,
they're written by third parties.

00:01:02.440 --> 00:01:05.660
You may be familiar
with Photoshop plug-ins.

00:01:05.660 --> 00:01:08.040
They add filter effects
to images in Photoshop.

00:01:08.040 --> 00:01:12.230
Well, in web browsers,
plug-ins support content types that

00:01:12.310 --> 00:01:15.190
the browser doesn't handle by default.

00:01:15.210 --> 00:01:18.930
For example,
without the Apple QuickTime plug-in,

00:01:19.100 --> 00:01:21.130
you wouldn't be able to
see QuickTime movies in

00:01:21.240 --> 00:01:22.550
Safari and other web browsers.

00:01:22.560 --> 00:01:28.580
Other popular examples are Mac for
MediaFlash and Windows Media Player.

00:01:30.670 --> 00:01:32.330
So why would you want
to develop a plug-in?

00:01:32.370 --> 00:01:37.580
Well, first of all,
you'd want to extend web browsers,

00:01:37.580 --> 00:01:38.490
as I mentioned before.

00:01:38.560 --> 00:01:40.800
You'd want to handle content
types that the web browser

00:01:40.820 --> 00:01:42.420
doesn't handle by default.

00:01:42.450 --> 00:01:45.360
And the other reason for wanting to
write a plug-in for a web browser

00:01:45.790 --> 00:01:48.170
is to basically run native code.

00:01:48.370 --> 00:01:51.700
From a web page, you can display HTML.

00:01:51.700 --> 00:01:52.820
You can run JavaScript.

00:01:52.930 --> 00:01:54.580
But in some cases,
you may want to run some

00:01:54.700 --> 00:01:58.410
native code to get some sort
of rich browsing experience.

00:01:58.860 --> 00:02:02.920
And the other major reason for
writing a plug-in is to extend

00:02:02.920 --> 00:02:04.750
your Web Kit application.

00:02:05.010 --> 00:02:09.230
If you have a Web Kit application,
the only way that you can get a

00:02:09.230 --> 00:02:13.800
widget inside of a WebView is to,
you know, write a plug-in.

00:02:13.810 --> 00:02:19.090
For example, Mail uses plug-ins for their
file attachment widget,

00:02:19.270 --> 00:02:23.240
or they will be using plug-ins for their
file attachment widget in Mail messages.

00:02:23.340 --> 00:02:27.320
And dashboard widgets can use plug-ins,
too.

00:02:27.320 --> 00:02:31.550
So I think you have about 24 hours
to get a dashboard widget working,

00:02:31.550 --> 00:02:34.920
and you can probably get a pretty
cool one if you use a plug-in.

00:02:35.990 --> 00:02:37.560
So this is the biggest
part of my talk here.

00:02:37.560 --> 00:02:39.900
It's how to develop plug-ins.

00:02:39.900 --> 00:02:42.220
First of all,
I'll be covering the two types of

00:02:42.330 --> 00:02:45.890
plug-ins or the two types of APIs that
you can use to develop a plug-in.

00:02:45.890 --> 00:02:49.400
First of all, I'll be discussing the
Neskate plug-in API.

00:02:49.400 --> 00:02:51.250
It's been around for a number of years.

00:02:51.250 --> 00:02:53.420
I'm sure that most of
you are familiar with it.

00:02:53.530 --> 00:02:55.840
And then I'll discuss
the Web Kit plug-in API,

00:02:55.920 --> 00:02:58.780
which is something completely new,
and I'll go into depth

00:02:58.780 --> 00:02:59.940
about that shortly.

00:03:00.870 --> 00:03:05.840
Then I'll discuss a bunch of things
which relate to both kinds of plug-ins.

00:03:05.900 --> 00:03:10.180
That is, using bundles,
which is how you represent and how

00:03:10.240 --> 00:03:13.700
you package up your plug-in on disk,
and then registration,

00:03:13.730 --> 00:03:18.650
which is how you actually register
your plug-in with the host application.

00:03:18.860 --> 00:03:21.940
Then I'll go into installation,
which is basically where

00:03:21.940 --> 00:03:23.880
you install your plug-in.

00:03:24.620 --> 00:03:27.870
So here in this whizzy graphic here,
you can see that there are two types of

00:03:27.870 --> 00:03:30.480
plug-ins that work in Safari and Web Kit.

00:03:30.680 --> 00:03:33.490
There's the Netscape plug-in
and there's the Web Kit plug-in.

00:03:33.510 --> 00:03:36.650
First, I'm going to focus on
the Netscape plug-in.

00:03:37.200 --> 00:03:41.540
So before I go any further about this,
I'm going to discuss history.

00:03:41.920 --> 00:03:45.800
So the Netscape plug-in
API has been around since 1996.

00:03:45.800 --> 00:03:48.940
It was introduced in Netscape 2.0.

00:03:48.940 --> 00:03:55.970
Microsoft Internet Explorer shortly
after adopted it in their version 3.0.

00:03:56.150 --> 00:04:03.260
is a developer at Microsoft.

00:04:03.260 --> 00:04:03.260
He's been working on a
lot of the development

00:04:03.680 --> 00:04:06.940
So here's what the Netscape
plug-in API provides.

00:04:06.990 --> 00:04:10.840
It provides a drawing API so that your
plug-in knows when and where to draw.

00:04:11.050 --> 00:04:15.840
It provides an events API so that
your plug-in can receive user events.

00:04:15.900 --> 00:04:21.270
It provides a networking API so
that your plug-in can send

00:04:21.270 --> 00:04:24.460
and receive network streams.

00:04:25.210 --> 00:04:27.510
So before I go in depth
about any sort of APIs,

00:04:27.600 --> 00:04:31.790
I want to discuss an issue about the
actual file format of your plug-in.

00:04:31.840 --> 00:04:35.840
Well, on Mac OS X,
a plug-in or library can be

00:04:35.840 --> 00:04:37.530
compiled in two different ways.

00:04:37.540 --> 00:04:41.970
It can be compiled in Mach-O or PEF,
a.k.a.

00:04:42.010 --> 00:04:43.180
CFM file formats.

00:04:43.260 --> 00:04:46.120
Well,
we really like it for you to use Mach-O.

00:04:46.120 --> 00:04:49.540
It's the native object
file format on Mac OS X.

00:04:49.540 --> 00:04:53.880
And CFM is really something of
the past back in the classic days.

00:04:55.240 --> 00:04:58.140
Mach-O plug-ins load much
faster than CFM plug-ins.

00:04:58.180 --> 00:05:01.260
In fact, when the QuickTime plug-in
was ported over to Mach-O,

00:05:01.260 --> 00:05:02.950
we found that it loaded 100 times faster.

00:05:02.960 --> 00:05:06.300
New APIs on the system are
only going to be provided,

00:05:06.300 --> 00:05:10.920
are only going to be available to
Mach-O applications and libraries.

00:05:10.920 --> 00:05:14.440
They won't be available for
CFM applications and libraries.

00:05:14.440 --> 00:05:19.480
And you can develop and debug a
Mach-O plug-in inside of Xcode.

00:05:19.480 --> 00:05:21.140
That can't be done with CFM.

00:05:23.900 --> 00:05:26.030
So here's the big news.

00:05:26.190 --> 00:05:28.910
We're extending the Netscape API.

00:05:29.000 --> 00:05:31.210
We're adding more stuff to it.

00:05:31.430 --> 00:05:33.500
First of all,
we're adding a scripting API,

00:05:33.500 --> 00:05:37.800
which is the ability for your plug-in
to be accessed from JavaScript,

00:05:37.880 --> 00:05:40.100
and from your plug-in,
you can get to JavaScript and

00:05:40.100 --> 00:05:41.240
the rest of the document.

00:05:42.230 --> 00:05:45.380
We're also adding an
API to access HTTP headers.

00:05:45.380 --> 00:05:47.240
This is kind of a developer request here.

00:05:47.240 --> 00:05:50.190
This allows your plug-in
to get at the HTTP headers,

00:05:50.190 --> 00:05:54.420
which is basically all the server
information besides the content.

00:05:54.420 --> 00:05:57.220
Also,
we're adding a state information API.

00:05:57.220 --> 00:06:00.160
This is an API that allows
you to get the state of the

00:06:00.160 --> 00:06:04.080
plug-in inside of the web page,
that is, whether the plug-in is in

00:06:04.080 --> 00:06:06.980
the frontmost tab or not,
whether the window is the

00:06:06.980 --> 00:06:10.290
frontmost window or not,
whether the window is minimized or not.

00:06:10.530 --> 00:06:11.960
And we're adding much more.

00:06:12.090 --> 00:06:14.320
You can expect to hear
a lot more from us.

00:06:14.320 --> 00:06:18.070
And what's important about this is
that this is not just an Apple thing.

00:06:18.110 --> 00:06:21.590
We're working with
companies such as Mozilla,

00:06:21.650 --> 00:06:25.170
Macromedia,
and Opera to basically get this new

00:06:25.170 --> 00:06:29.970
API working in many web browsers
and many plug-ins out there.

00:06:31.300 --> 00:06:36.120
So here's my whizzy
Netscape scripting graphic.

00:06:36.260 --> 00:06:37.700
So I'm going to discuss
Netscape scripting.

00:06:37.700 --> 00:06:42.000
This is basically the only new Netscape
API that I'm going to discuss today.

00:06:42.080 --> 00:06:43.900
So what is scripting?

00:06:44.060 --> 00:06:48.900
Well, it allows JavaScript to
access your plug-ins,

00:06:48.950 --> 00:06:54.300
and it allows plug-ins to access
JavaScript and the rest of the document.

00:06:56.200 --> 00:07:00.890
So the Netscape API used to actually
provide this functionality in a

00:07:00.960 --> 00:07:02.190
technology called Live Connect.

00:07:02.190 --> 00:07:05.540
Live Connect is a Java API.

00:07:05.540 --> 00:07:10.320
It's pretty slow because it involves
starting up a Java VM and involving

00:07:10.320 --> 00:07:14.000
Java in this rather simple communication
between a plug-in and a browser.

00:07:14.280 --> 00:07:18.280
In Web Kit, Live Connect is only
used for Java applets.

00:07:18.280 --> 00:07:21.150
We don't support it for
communication with plug-ins.

00:07:21.150 --> 00:07:24.060
Well, in the new API, it's a C API.

00:07:24.090 --> 00:07:27.100
That is, it's just like the rest
of the Netscape API.

00:07:27.100 --> 00:07:30.320
It's all based on C,
and it's much faster than Live Connect.

00:07:32.680 --> 00:07:34.600
So I'm going to talk about--
I'm going to get more in depth

00:07:34.600 --> 00:07:36.720
about the scripting API here,
but first I'm going to

00:07:36.720 --> 00:07:43.600
discuss the communication from
JavaScript to the Netscape plug-in.

00:07:45.280 --> 00:07:51.820
So when JavaScript encounters
your plug-in in a script,

00:07:51.970 --> 00:07:57.430
it will call NPP get value to get
the NP class and the NP object,

00:07:57.560 --> 00:07:59.090
which represent your plug-in.

00:07:59.140 --> 00:08:03.230
Now, the NP class you can think
of as the interface between

00:08:03.360 --> 00:08:07.880
your plug-in and JavaScript,
and NP object is the,

00:08:07.880 --> 00:08:11.240
you can think of that as an
instance of your NP class.

00:08:11.560 --> 00:08:13.560
I'll get more into that shortly.

00:08:13.560 --> 00:08:14.890
So here's an example.

00:08:14.960 --> 00:08:15.770
I hope you can see that.

00:08:16.110 --> 00:08:17.940
Here's an example of NPP get value.

00:08:17.940 --> 00:08:21.350
In this case,
if the variable that the browser

00:08:21.460 --> 00:08:26.310
is asking the plug-in for is NPP v
plug-in scriptable NP object,

00:08:26.380 --> 00:08:30.430
I then return an NP object,
which represents my

00:08:30.430 --> 00:08:32.300
plug-in to JavaScript.

00:08:36.580 --> 00:08:38.210
And here's NP class.

00:08:38.420 --> 00:08:43.180
So, NP class is basically a struct,
consists of a struct version and

00:08:43.180 --> 00:08:46.360
a set of function pointers which
define the interface between

00:08:46.640 --> 00:08:48.160
your plug-in and JavaScript.

00:08:48.310 --> 00:08:50.200
First of all, there's allocate.

00:08:50.290 --> 00:08:55.140
The allocate function is called
to allocate an NP object.

00:08:55.270 --> 00:08:58.960
Deallocate is called to
deallocate that NP object.

00:08:59.210 --> 00:09:04.280
Invalidate is called when JavaScript no
longer is using your NP object.

00:09:04.600 --> 00:09:09.750
has method is called when
JavaScript is calling your-- is

00:09:09.760 --> 00:09:13.110
calling a method on your NPE object
to make sure it actually has it.

00:09:13.740 --> 00:09:18.400
Invoke is called to invoke a
specific method on your NP object.

00:09:18.570 --> 00:09:24.030
And has property is called to check
if your NP object has a property.

00:09:24.310 --> 00:09:27.560
Get property is called to get a
value for a specific property.

00:09:27.560 --> 00:09:31.700
Set property is called to set a
value for a specific property.

00:09:33.920 --> 00:09:36.140
And here's an example of NP object.

00:09:36.200 --> 00:09:40.620
In this case,
my NP object is a movie object.

00:09:40.840 --> 00:09:44.000
It basically contains an
NP class and a reference count.

00:09:44.050 --> 00:09:47.040
Those are the required
fields of the struct there.

00:09:47.180 --> 00:09:49.660
And then everything that follows
is basically anything else that

00:09:49.760 --> 00:09:51.180
I want to have in that NP object.

00:09:51.270 --> 00:09:54.310
So what you can see
here is my movie object.

00:09:54.410 --> 00:09:59.010
This is basically how I represent
my plug-in in JavaScript.

00:10:00.190 --> 00:10:02.880
So here's an example of movie allocate,
my allocate function.

00:10:02.940 --> 00:10:07.900
Basically, allocates a movie object and
returns it to JavaScript.

00:10:08.840 --> 00:10:12.260
And here's an example of MP invoke,
excuse me, movie invoke,

00:10:12.350 --> 00:10:15.350
which is my movie,
which is my invoke function.

00:10:15.380 --> 00:10:19.260
So if JavaScript is calling play,
I just call play movie,

00:10:19.260 --> 00:10:22.270
which is an internal
function within my plug-in.

00:10:22.310 --> 00:10:25.600
If JavaScript is calling pause,
I just call pause movie,

00:10:25.600 --> 00:10:28.520
which is an internal
function within my plug-in.

00:10:29.500 --> 00:10:32.220
And, you know,
before I exit this function,

00:10:32.220 --> 00:10:33.590
I set a return value.

00:10:33.590 --> 00:10:37.330
In this case, well, in either case,
I have no return value,

00:10:37.330 --> 00:10:38.800
so I set undefined.

00:10:40.690 --> 00:10:44.940
So I've discussed the communication
from JavaScript to the plug-in.

00:10:44.940 --> 00:10:47.510
Now I'm going to go in
the opposite direction.

00:10:48.970 --> 00:10:52.440
And that's from the
plug-in to JavaScript.

00:10:52.440 --> 00:10:55.700
So the way this works is that if your
plug-in wants to get a JavaScript,

00:10:55.700 --> 00:10:57.790
the interpreter and the
rest of the document,

00:10:58.000 --> 00:11:06.500
it basically calls NPN get
value to get the window object

00:11:06.500 --> 00:11:09.370
using the variable name here,
NPN vWindowNPObject.

00:11:09.920 --> 00:11:14.800
So once it gets back this window object,
it's basically an NP object,

00:11:14.800 --> 00:11:17.960
so I can start making
NP object calls on it.

00:11:18.130 --> 00:11:21.900
For example, I can call create object,
which creates an object.

00:11:21.950 --> 00:11:25.250
I'll actually need to implement this
in order to return an object back to

00:11:25.340 --> 00:11:27.800
JavaScript if I ever need to do that.

00:11:27.870 --> 00:11:31.600
Retain object in case I want to keep
a specific object around for a while.

00:11:31.650 --> 00:11:33.600
And of course, for every retain,
you have to do a release,

00:11:33.600 --> 00:11:35.910
so there's release object.

00:11:38.240 --> 00:11:41.000
And here are my invocation methods.

00:11:41.290 --> 00:11:43.200
There's NPN call,
which allows me to invoke a

00:11:43.200 --> 00:11:46.610
specific method on an NP object.

00:11:47.930 --> 00:11:51.150
And then there's NPN Evaluate,
which allows me to take a string,

00:11:51.470 --> 00:11:56.110
a JavaScript string,
and evaluate it and get back a result.

00:11:59.700 --> 00:12:02.680
And here are property access methods,
which allow me to get to actual

00:12:02.980 --> 00:12:05.380
properties of NP objects.

00:12:05.530 --> 00:12:11.030
So there's NPN getProperty,
which returns a property of an NP object.

00:12:11.650 --> 00:12:15.540
SetProperty, which allows me to change
a property of an NP object.

00:12:15.600 --> 00:12:18.510
NPN removeProperty,
which allows me to remove

00:12:18.580 --> 00:12:20.300
a property of an NP object.

00:12:20.450 --> 00:12:22.380
So let's do a little demo.

00:12:27.400 --> 00:12:28.640
Sorry, I need a drink.

00:12:28.640 --> 00:12:36.670
OK, so what I'm going to show here
is my little Netscape plug-in.

00:12:36.950 --> 00:12:39.530
It's called Netscape Movie Plug-in.

00:12:39.870 --> 00:12:43.530
It's basically just like
the QuickTime plug-in,

00:12:43.560 --> 00:12:44.890
just a little simpler.

00:12:45.030 --> 00:12:47.400
And what I'm going to show you
here is I'm not going to go too

00:12:47.400 --> 00:12:49.160
in-depth with the code here.

00:12:49.450 --> 00:12:52.900
As you can see, it's pretty complex.

00:12:53.020 --> 00:12:55.250
It takes a good amount of
code to basically get a

00:12:55.250 --> 00:12:59.650
simple plug-in up and running,
a Netscape plug-in up

00:12:59.650 --> 00:13:01.470
and running in Web Kit.

00:13:02.200 --> 00:13:05.610
So what I want to show you
actually here in this file is

00:13:06.010 --> 00:13:07.340
the number of lines it takes.

00:13:07.350 --> 00:13:09.870
It takes about 626 lines to get
a simple plug-in up and running.

00:13:09.910 --> 00:13:12.200
So remember that number because
it's going to matter a little

00:13:12.200 --> 00:13:14.340
later in this presentation.

00:13:14.380 --> 00:13:17.520
So let's give this guy a try.

00:13:17.600 --> 00:13:19.180
Cross your fingers.

00:13:25.160 --> 00:13:27.500
So as you can see here,
I basically have my little plug-in

00:13:27.500 --> 00:13:30.600
working in here on this web page.

00:13:30.600 --> 00:13:31.660
This is not the QuickTime plug-in.

00:13:31.660 --> 00:13:34.100
I don't even have it installed.

00:13:34.160 --> 00:13:37.540
So on this page,
I have the plug-in and two form elements,

00:13:37.540 --> 00:13:38.590
play and pause.

00:13:38.740 --> 00:13:41.930
Now,
these form elements are actually calling

00:13:41.930 --> 00:13:44.490
JavaScript functions on my movie.

00:14:09.100 --> 00:14:14.100
for seamless integration
of iPod and automobile.

00:14:14.100 --> 00:14:15.070
So that's it.

00:14:15.150 --> 00:14:21.770
So you can actually download that
plug-in from connect.apple.com and

00:14:21.770 --> 00:14:21.770
use it as a template if you want to.

00:14:26.200 --> 00:14:28.750
To the presentation machine, please.

00:14:28.860 --> 00:14:30.100
Okay, here we go.

00:14:30.360 --> 00:14:31.930
Okay.

00:14:31.960 --> 00:14:34.140
Okay, so I've discussed the development
of a Netscape plug-in,

00:14:34.140 --> 00:14:37.930
so now let's focus on the
development of a Web Kit plug-in.

00:14:39.090 --> 00:14:42.240
Well, the Web Kit plug-in
API is an Objective-C API.

00:14:42.240 --> 00:14:43.580
It's a Cocoa API.

00:14:43.680 --> 00:14:45.740
It's very simple.

00:14:46.240 --> 00:14:49.110
Both Cocoa and the API,
the plug-in API itself,

00:14:49.200 --> 00:14:50.450
are very simple to work with.

00:14:50.450 --> 00:14:56.470
Any Web Kit plug-in that you work,
that you develop, will work inside of a

00:14:56.480 --> 00:14:58.510
Web Kit application.

00:14:59.880 --> 00:15:04.700
So here's what the
Web Kit plug-in API provides.

00:15:04.740 --> 00:15:07.850
Well, first of all,
every instance of your

00:15:07.940 --> 00:15:09.470
plug-in is an NSView.

00:15:09.670 --> 00:15:13.240
So there's no explicit API for
dealing with events or drawing.

00:15:13.240 --> 00:15:15.640
That's all done the NSView way.

00:15:15.730 --> 00:15:20.610
There's no explicit API for URL loading
because you can do that very easily

00:15:20.610 --> 00:15:25.070
yourself using NSURL connection,
which is a foundation API.

00:15:25.270 --> 00:15:28.630
Another thing that this API provides
is access to Web Kit classes

00:15:28.700 --> 00:15:31.940
such as Web Frame so that you
can have a closer interaction with

00:15:32.090 --> 00:15:34.520
Web Kit if you choose to have that.

00:15:34.580 --> 00:15:37.280
And also, it has a scripting API,
which is basically

00:15:37.280 --> 00:15:39.960
Web Kit's new scripting API,
which was discussed

00:15:40.120 --> 00:15:43.370
in depth this morning,
but I'll go into that shortly.

00:15:44.620 --> 00:15:47.220
So here's the first method that
your plug-in should implement.

00:15:47.280 --> 00:15:48.880
It's called plug-in view with arguments.

00:15:48.970 --> 00:15:52.850
This is actually the only method
your plug-in needs to implement.

00:15:52.920 --> 00:15:54.700
So as you can see,
it's very simple to get one

00:15:54.700 --> 00:15:56.080
of these up and running.

00:15:56.190 --> 00:15:58.860
So plug-in view with arguments
basically returns your plug-in view,

00:15:58.940 --> 00:16:03.820
the plug-in view which is supposed
to be inside of your web view.

00:16:05.950 --> 00:16:08.360
And here's some other plug-in methods.

00:16:08.370 --> 00:16:10.040
These are all optional.

00:16:10.040 --> 00:16:11.520
You can implement them if you want.

00:16:11.530 --> 00:16:14.670
The first one is Web Plug-in Initialize.

00:16:14.920 --> 00:16:18.560
This method is called soon
after your plug-in is created.

00:16:19.010 --> 00:16:21.430
In this method,
you basically start allocating

00:16:21.930 --> 00:16:24.200
resources and doing that sort of thing.

00:16:24.480 --> 00:16:26.080
Then there's Web Plug-in Start.

00:16:26.150 --> 00:16:27.610
In this method, you start doing work.

00:16:27.620 --> 00:16:29.450
You start animating.

00:16:30.760 --> 00:16:32.380
And this is what plug-ins stop.

00:16:32.410 --> 00:16:33.970
In this method, you stop doing work.

00:16:34.150 --> 00:16:36.520
You see some sort of animation.

00:16:37.660 --> 00:16:38.820
Then there's Web Plug-in Destroy.

00:16:38.820 --> 00:16:42.940
In this method,
you destroy or dealloc any sort

00:16:42.940 --> 00:16:45.420
of resources that you might have,
or you can just wait until

00:16:45.420 --> 00:16:47.090
you get the dealloc method.

00:16:48.500 --> 00:16:52.740
And here are some other methods
that your plug-in can implement.

00:16:52.740 --> 00:16:55.080
First of all,
this Web plug-in is selected.

00:16:55.080 --> 00:16:58.500
This is called when your plug-in's
selection state has changed.

00:16:58.590 --> 00:17:00.250
So if you are selected,
you probably want to draw

00:17:00.250 --> 00:17:02.660
some sort of selection state.

00:17:03.270 --> 00:17:05.600
And here's Object for Web Script.

00:17:05.610 --> 00:17:10.920
This is the method that returns
the object which represents

00:17:10.920 --> 00:17:15.130
your plug-in in JavaScript,
and I'll go into that shortly.

00:17:15.580 --> 00:17:17.040
So here are the container methods.

00:17:17.040 --> 00:17:21.890
These are the methods that from your
plug-in you can call onto the container.

00:17:23.670 --> 00:17:26.340
So first of all,
there's Web plug-in container

00:17:26.340 --> 00:17:27.320
load request and frame.

00:17:27.400 --> 00:17:30.660
This basically tells the
container to load a specific

00:17:30.660 --> 00:17:33.260
web page in a specific frame.

00:17:35.110 --> 00:17:35.840
Oops.

00:17:35.840 --> 00:17:37.000
Okay.

00:17:37.000 --> 00:17:39.940
Then there's what plug-in
container shows status.

00:17:40.120 --> 00:17:43.340
If the container, such as Safari,
has a status bar,

00:17:43.470 --> 00:17:46.380
it should show some sort of
status message at the bottom

00:17:46.540 --> 00:17:47.470
of the page at this point.

00:17:48.090 --> 00:17:51.120
Then there's Web Plugin
Container Selection Color.

00:17:51.220 --> 00:17:54.700
So if your plug-in is selected,
it should use this selection color

00:17:54.730 --> 00:17:56.890
to draw some sort of selection state.

00:17:57.670 --> 00:17:59.600
And lastly, there's Web Frame.

00:17:59.780 --> 00:18:01.610
So from your plug-in,
you can get the Web Frame,

00:18:01.610 --> 00:18:04.040
which contains the plug-in.

00:18:04.140 --> 00:18:07.110
From the Web Frame,
you can get to the Web Data Source and

00:18:07.110 --> 00:18:10.070
the WebView and all the
other Web Kit classes.

00:18:11.370 --> 00:18:13.540
Okay, so now I'm going to go
into Web Kit scripting.

00:18:13.540 --> 00:18:15.000
This was covered this morning,
but I'm just going to

00:18:15.090 --> 00:18:16.050
brush over this right now.

00:18:16.560 --> 00:18:22.880
First of all, I'll go into scripting from
JavaScript to your Web Kit plug-in.

00:18:27.100 --> 00:18:32.370
When JavaScript encounters
your plug-in object,

00:18:32.370 --> 00:18:38.430
it will call object for web script to
get the object to see representation

00:18:38.510 --> 00:18:41.520
of your JavaScript object.

00:18:44.090 --> 00:18:49.240
Now that object that is returned can
choose to implement these methods.

00:18:49.400 --> 00:18:51.080
First of all,
there's WebScript name for selector,

00:18:51.080 --> 00:18:54.480
which allows you to choose a name given
a selector that your object implements.

00:18:54.480 --> 00:18:58.900
And then there is isSelector
is excluded from WebScript.

00:19:18.490 --> 00:19:18.490
Now, in this method,
you basically decide which methods

00:19:18.490 --> 00:19:18.490
you want your plug-in to implement.

00:19:18.490 --> 00:19:18.490
Now, this method is pretty important
as far as security is concerned

00:19:18.490 --> 00:19:18.490
because you only want to export
methods that you think are secure,

00:19:18.490 --> 00:19:18.490
won't crash the page and what have you.

00:19:19.190 --> 00:19:23.340
So here's an example of an implementation
of is selection excluded from web script.

00:19:23.410 --> 00:19:26.090
In this case,
I'm allowing the play method

00:19:26.660 --> 00:19:29.000
on my plug-in to be exported.

00:19:29.110 --> 00:19:33.110
And at the bottom there is just a
simple limitation of a play method.

00:19:34.620 --> 00:19:37.100
Then here are some methods
about property access.

00:19:37.240 --> 00:19:39.440
First of all,
there's WebScript name for key,

00:19:39.440 --> 00:19:45.600
which allows me to choose a name
given a property on my plug-in object.

00:19:45.710 --> 00:19:48.600
And then there is is key
excluded from WebScript.

00:19:48.600 --> 00:19:52.350
And just like the previous
method or like the method that

00:19:52.350 --> 00:19:58.260
dealt with JavaScript methods,
in here I choose which properties

00:19:58.260 --> 00:20:00.960
I want to export to JavaScript.

00:20:01.640 --> 00:20:03.660
So there is--here's an example.

00:20:03.660 --> 00:20:05.820
IsKey excluded from Web Script.

00:20:05.820 --> 00:20:09.230
In this example,
I'm allowing muted-- the muted

00:20:09.230 --> 00:20:12.140
property of my object to be exported.

00:20:12.280 --> 00:20:16.340
And at the bottom there are some
methods which allow the key value

00:20:16.970 --> 00:20:20.910
coding to access my muted property.

00:20:22.160 --> 00:20:25.660
Okay, so I've discussed scripting from
JavaScript to your Web Kit plug-in.

00:20:25.660 --> 00:20:27.850
Now let's go in the other direction.

00:20:30.310 --> 00:20:33.720
So from your plug-in,
you can get at the document or the

00:20:34.290 --> 00:20:36.660
window object in two different ways.

00:20:36.800 --> 00:20:38.960
You can call
Windows Script Object on WebView,

00:20:38.990 --> 00:20:44.100
which will return the Objective-C version
of the JavaScript window object,

00:20:44.190 --> 00:20:52.790
or you can call DOM Document on WebFrame,
which will basically be the

00:20:52.790 --> 00:20:52.790
DOM Document which contains your plug-in.

00:20:53.570 --> 00:20:56.180
So here's the interface for
Windows Script Object on WebView.

00:20:56.210 --> 00:20:59.390
As you can see here,
it returns a WebScript object.

00:20:59.500 --> 00:21:02.530
So I'm going to just show
you now a few methods that

00:21:02.740 --> 00:21:06.230
WebScript Object implements or provides.

00:21:06.330 --> 00:21:09.880
First of all, there's setValueForKey,
which allows you to set a specific value

00:21:09.880 --> 00:21:12.860
for a specific key on a WebScript object.

00:21:12.890 --> 00:21:14.400
Then there's valueForKey,
which allows you to get

00:21:14.400 --> 00:21:16.600
a value given a key.

00:21:17.240 --> 00:21:20.850
There's call-webscript method with
arguments which allows you to invoke a

00:21:20.860 --> 00:21:24.460
specific method on a WebScript object.

00:21:24.660 --> 00:21:30.530
There's evaluate-webscript which allows
you to evaluate a JavaScript string.

00:21:32.130 --> 00:21:35.980
And then here's the interface for getting
the DOM document off the web frame.

00:21:36.030 --> 00:21:39.390
As you can see here,
it returns a DOM document object.

00:21:41.220 --> 00:21:44.070
And here's just kind of a
hodgepodge of methods that

00:21:44.320 --> 00:21:47.860
DOM document implements and provides.

00:21:47.860 --> 00:21:51.400
Actually, these methods are also DOM node
methods because DOM document

00:21:51.400 --> 00:21:53.100
is a subclass of DOM node.

00:21:53.190 --> 00:21:54.090
So here's attributes.

00:21:54.270 --> 00:21:58.010
This allows me to get the attributes
of the document or DOM node.

00:21:58.110 --> 00:22:00.520
Here's paranode,
which gives me the paranode

00:22:00.520 --> 00:22:02.090
of a document or a DOM node.

00:22:02.220 --> 00:22:04.070
childNodes gives me the
children of a DOM node,

00:22:04.100 --> 00:22:06.610
firstChild gives me the
first child of a DOM node.

00:22:06.640 --> 00:22:08.620
These are rather self-explanatory.

00:22:08.620 --> 00:22:10.820
lastChild gives me the
last child of a DOM node,

00:22:11.310 --> 00:22:13.060
previous sibling, so on and so forth.

00:22:13.120 --> 00:22:16.280
So for more information
about the DOM document,

00:22:16.280 --> 00:22:21.060
DOM nodes, I suggest you go to this
talk on Friday at 10.30.

00:22:21.060 --> 00:22:22.620
I'm not sure of the number.

00:22:22.620 --> 00:22:23.400
Maybe you want to give that to me?

00:22:23.490 --> 00:22:24.780
426.

00:22:24.780 --> 00:22:28.140
That will discuss the
DOM document and all that,

00:22:28.140 --> 00:22:29.710
as well as editing,
if you're interested in that.

00:22:31.340 --> 00:22:34.820
So let's do a little
demo of a WebKit plugin.

00:22:46.990 --> 00:22:51.220
So I'm not very original.

00:22:51.260 --> 00:22:54.800
My Web Kit plug-in does the same
thing as my previous plug-in does.

00:22:54.930 --> 00:22:57.130
It's called Web Kit Movie Plug-in.

00:22:57.320 --> 00:23:00.360
But remember that the previous
plug-in did everything in

00:23:00.360 --> 00:23:02.660
about 600 plus lines of code.

00:23:02.700 --> 00:23:04.810
This does it in...

00:23:05.950 --> 00:23:08.500
So, as you can see,
it's extremely easy to

00:23:08.500 --> 00:23:10.280
write one of these puppies.

00:23:10.280 --> 00:23:12.820
So,
I'm not going to go into the code here,

00:23:12.850 --> 00:23:15.990
but I'm just going to go
into a little demo of it.

00:23:50.920 --> 00:23:53.330
Okay, so you may be thinking now, okay,
he just did this same

00:23:53.330 --> 00:23:54.920
demo two times in a row.

00:23:54.920 --> 00:23:56.910
That's pretty damn boring.

00:23:57.580 --> 00:24:01.180
Okay, so let me try to spice
it up a little bit.

00:24:01.230 --> 00:24:04.840
Wouldn't it be cool if I could somehow
control the play rate of that movie?

00:24:04.980 --> 00:24:08.500
You know, control how fast it
plays from the webpage.

00:24:08.840 --> 00:24:13.910
So I'll go down to my plug-in here
and enable my set play rate function.

00:24:16.390 --> 00:24:18.800
And the very important step,
I exported it to

00:24:18.800 --> 00:24:23.650
JavaScript here in this method.

00:24:23.810 --> 00:24:25.890
Give it a little compiling.

00:24:29.460 --> 00:24:31.830
It works.

00:24:31.990 --> 00:24:34.800
And then I'll go into my HTML file.

00:24:37.200 --> 00:24:40.330
And enable a slider which is a
kind of new form control that

00:24:40.330 --> 00:24:44.770
is sort of Web Kit specific.

00:24:45.770 --> 00:24:47.800
And as you can see here,
my slider basically just

00:24:47.900 --> 00:24:51.500
calls setMoviePlayerRate,
which is a JavaScript function

00:24:51.500 --> 00:24:54.400
which calls my plug-in.

00:24:54.690 --> 00:24:57.280
And let's give this a try.

00:25:09.900 --> 00:25:11.870
Oops.

00:25:11.980 --> 00:25:12.900
Hey, it's beta.

00:25:12.930 --> 00:25:17.450
Let's give it another try.

00:25:32.210 --> 00:25:39.200
Okay, so there you go.

00:25:39.200 --> 00:25:41.300
Okay, so that's my Web Kit plug-in demo.

00:25:41.300 --> 00:25:43.930
So I've discussed the two
types of plug-ins that you can

00:25:43.930 --> 00:25:45.960
develop for Safari and Web Kit.

00:25:45.960 --> 00:25:48.390
Let's give them a little comparison.

00:25:50.160 --> 00:25:53.890
So first of all,
the Netskit plug-in API is a C API.

00:25:53.960 --> 00:25:55.090
It's cross-platform.

00:25:55.090 --> 00:25:59.260
The same API will work on Windows, Linux,
and the Mac.

00:25:59.260 --> 00:26:01.500
It works in most web browsers out there.

00:26:01.500 --> 00:26:04.700
In fact, it probably works in all
web browsers out there.

00:26:04.760 --> 00:26:08.740
And the Web Kit plug-in API is
a Cocoa Objective C API.

00:26:08.740 --> 00:26:12.500
It only works in Web Kit applications.

00:26:12.570 --> 00:26:15.220
It's possible that it may work in
other applications in the future.

00:26:15.290 --> 00:26:18.540
And as you've seen here,
it's very easy to develop

00:26:18.540 --> 00:26:18.570
one of these things.

00:26:19.680 --> 00:26:24.910
So now I'm going to get into some issues
that relate to both types of plug-ins.

00:26:25.360 --> 00:26:29.260
Well, first of all,
plug-ins on disk are bundles.

00:26:29.260 --> 00:26:30.180
Well, what is a bundle?

00:26:30.180 --> 00:26:33.210
A bundle is a folder which
contains the library.

00:26:33.220 --> 00:26:37.520
That is the compiled
code of your plug-in.

00:26:37.580 --> 00:26:41.550
It contains resources,
which are the resources that

00:26:41.550 --> 00:26:45.500
your plug-in may want to use,
such as images and those types of things.

00:26:45.530 --> 00:26:48.520
It contains localizations,
so your plug-in can be localized

00:26:48.520 --> 00:26:49.560
in many different languages.

00:26:49.580 --> 00:26:54.280
A single plug-in bundle can be
localized in many different languages.

00:26:54.550 --> 00:26:56.490
And lastly,
it contains registration information

00:26:56.920 --> 00:27:00.380
so that your plug-in is properly
registered with a host application.

00:27:00.580 --> 00:27:03.290
So let's get into
registration information.

00:27:03.810 --> 00:27:06.340
Well, your plug-in is responsible
for registering the content

00:27:06.340 --> 00:27:08.490
types that it can handle.

00:27:08.660 --> 00:27:12.140
That registration information can
be stored in two different ways.

00:27:12.220 --> 00:27:15.760
The first way and the way these days
or the way that it's always been

00:27:15.820 --> 00:27:17.960
done is with Carbon resource files.

00:27:18.010 --> 00:27:22.820
The new way is with the Info.plist file.

00:27:22.850 --> 00:27:28.500
Basically, the Info.plist file is,
you're probably all familiar with it,

00:27:28.500 --> 00:27:32.700
but it's just a very easy way
to edit and maintain metadata.

00:27:33.700 --> 00:27:36.240
You can use it for your
application or a bundle.

00:27:36.410 --> 00:27:39.460
On Mach OS X, this is a modern way
of actually doing it.

00:27:39.490 --> 00:27:42.740
Working with Carbon resource
files tends to be a big pain.

00:27:42.790 --> 00:27:46.020
So if you care, currently,
Info.plist files only work

00:27:46.020 --> 00:27:49.320
in Web Kit applications,
but if you care about working with

00:27:49.320 --> 00:27:52.290
other browsers as well on the Mach,
you can use both,

00:27:52.290 --> 00:27:54.350
and that'll work just fine.

00:27:56.450 --> 00:28:00.730
So let me go into registration
via the Info.plist file.

00:28:00.850 --> 00:28:05.250
First of all, you want to provide the
description of your plug-in,

00:28:05.250 --> 00:28:09.320
which is the user visible
description of your plug-in.

00:28:10.540 --> 00:28:13.490
Then you want to provide a key and
value for the name of your plug-in,

00:28:13.540 --> 00:28:16.180
which is the user visible
name of your plug-in.

00:28:16.210 --> 00:28:18.800
And lastly,
you want to go into the MIME types

00:28:18.810 --> 00:28:20.730
that your plug-in can handle.

00:28:23.790 --> 00:28:27.260
So within that MIME type,
you want to specify the extensions

00:28:27.260 --> 00:28:30.140
that map that MIME type,
as well as a user-visible

00:28:30.140 --> 00:28:32.460
description for that MIME type.

00:28:32.860 --> 00:28:35.560
So with all this information,
you'll be able to register

00:28:35.560 --> 00:28:38.440
your plug-in nice and easily
inside of a Web Kit application.

00:28:38.500 --> 00:28:40.810
Now that may look a little complex.

00:28:40.950 --> 00:28:41.820
It certainly does to me.

00:28:41.910 --> 00:28:44.840
But inside of Property List Editor,
it's very easy to write

00:28:44.840 --> 00:28:46.300
one of these things.

00:28:48.410 --> 00:28:51.630
So you've got your plug-in compiled.

00:28:51.630 --> 00:28:53.670
It's got all the registration
information all set up.

00:28:54.270 --> 00:28:55.250
Where do you install this thing?

00:28:55.250 --> 00:28:58.460
Well, you can install it in
three different places.

00:28:58.460 --> 00:29:02.710
You can install it in slash library
slash internet plug-ins so that it works

00:29:02.760 --> 00:29:05.140
with all applications for all users.

00:29:05.140 --> 00:29:08.550
You can install it in tilde library
slash internet plug-ins so that

00:29:08.550 --> 00:29:11.780
it works for all applications
just for that specific user.

00:29:11.780 --> 00:29:15.500
Or you can install it in the plug-ins
directory of your application so it will

00:29:15.620 --> 00:29:17.680
only work inside of that application.

00:29:21.570 --> 00:29:22.800
So this is the last part of my talk here.

00:29:22.800 --> 00:29:25.460
This is actually how to use your plug-in.

00:29:25.540 --> 00:29:28.600
I'm going to first discuss the
good kind of HTML for embedding

00:29:28.600 --> 00:29:32.350
your plug-in on a web page,
and then I'll discuss how you

00:29:32.450 --> 00:29:35.000
script your plug-in from JavaScript.

00:29:37.100 --> 00:29:41.330
Well, most web browsers out there
support the embed tag.

00:29:41.380 --> 00:29:44.920
It's a sufficient way of
embedding a plug-in on a web page.

00:29:45.020 --> 00:29:47.240
But if you have a
Windows version of your plug-in,

00:29:47.240 --> 00:29:49.900
you'll need to use the object tag.

00:29:49.950 --> 00:29:56.060
Well, it's possible to use HTML that does
both and thus works with all browsers.

00:29:56.400 --> 00:29:57.200
Here's the embed tag.

00:29:57.200 --> 00:29:59.330
I'm sure you've seen it all before.

00:30:01.330 --> 00:30:03.340
And here's the object tag.

00:30:03.450 --> 00:30:04.800
It's required by Windows.

00:30:04.960 --> 00:30:07.720
And param tags, which are...

00:30:07.900 --> 00:30:11.930
children of the object tag,
and then the embed tag,

00:30:11.980 --> 00:30:14.640
which is also a child of the object tag.

00:30:14.910 --> 00:30:15.800
And that's basically it.

00:30:15.800 --> 00:30:20.800
So with this little somewhat
lengthy HTML snippet here,

00:30:20.920 --> 00:30:24.300
you can get your plug-in
working on all browsers.

00:30:24.460 --> 00:30:27.780
So let's get into scripting
now from JavaScript.

00:30:28.730 --> 00:30:30.840
Basically,
each instance of your plug-in on

00:30:30.910 --> 00:30:34.840
the page has a JavaScript object
which represents it.

00:30:35.010 --> 00:30:40.240
You can get at that JavaScript object
by name or by number.

00:30:40.300 --> 00:30:44.350
Once you actually have it,
you can call the exposed methods on

00:30:44.350 --> 00:30:47.030
it as well as the exposed properties.

00:30:48.670 --> 00:30:50.280
So here's a little sample.

00:30:50.360 --> 00:30:53.590
This is actually taken
right from my demo here.

00:30:53.730 --> 00:30:56.910
Here I am getting a plug-in by name.

00:30:57.270 --> 00:30:58.940
Since I know that -- excuse me,
by number.

00:30:59.180 --> 00:31:01.840
Since I know that it's the
first plug-in on the page,

00:31:01.900 --> 00:31:05.360
I can just use index
zero on the embeds array.

00:31:05.380 --> 00:31:10.440
And then here's an example of me
using or calling a plug-in method,

00:31:10.610 --> 00:31:11.950
which is play.

00:31:13.790 --> 00:31:18.040
And then here's an example of
me getting a plug-in by name.

00:31:18.040 --> 00:31:20.460
You don't see it here,
but my embed tag actually

00:31:20.580 --> 00:31:23.900
has a name attribute,
which is movie plug-in.

00:31:24.110 --> 00:31:27.120
And here I am getting
it by movie plug-in.

00:31:27.310 --> 00:31:30.050
And at the bottom there,
I'm actually getting and

00:31:30.160 --> 00:31:31.890
setting a plug-in property.

00:31:34.690 --> 00:31:38.550
So everything that I discussed today
is going to be available on Safari,

00:31:38.550 --> 00:31:42.080
is available on Safari and
Web Kit 1.3 beta on Panther.

00:31:42.080 --> 00:31:44.850
You can download it now
at connect.apple.com.

00:31:44.850 --> 00:31:48.860
It's also available on your
Tiger seed that you got today,

00:31:49.360 --> 00:31:52.120
except for the new
Netscape scripting APIs.

00:31:52.130 --> 00:31:55.560
Those are only available
on the Panther beta.

00:32:08.260 --> 00:32:08.390
Now once both the Panther and
Tiger versions of Safari go GM,

00:32:08.390 --> 00:32:08.390
everything that I mentioned
today will work in both.

00:32:08.920 --> 00:32:12.260
You can go to connect.apple.com
to get sample code,

00:32:12.300 --> 00:32:12.900
links, and demos.

00:32:12.900 --> 00:32:16.100
You can actually get the demos
which I showed you today,

00:32:16.100 --> 00:32:17.710
and you can use them as
templates if you want.

00:32:17.750 --> 00:32:24.090
You can also go there for new
documentation for Web Kit.

00:32:24.120 --> 00:32:29.520
And lastly, at the bottom there,
you can go to that Netscape

00:32:29.520 --> 00:32:32.400
URL to get information about
the Netscape plug-in API.

00:32:32.770 --> 00:32:35.540
That doesn't actually
include the new APIs.

00:32:35.570 --> 00:32:39.090
To get at those and for
information about those,

00:32:39.110 --> 00:32:42.400
you need to actually use
my demo that I gave today.