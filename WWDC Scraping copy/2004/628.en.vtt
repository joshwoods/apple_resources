WEBVTT

00:00:12.240 --> 00:00:16.490
We'd like to welcome Wiley Hodges,
Senior Project Manager of

00:00:16.500 --> 00:00:20.390
Developer Products at Apple.

00:00:25.000 --> 00:00:27.440
Good afternoon.

00:00:27.440 --> 00:00:30.790
Things I deal with at Apple are related
to development and developer products,

00:00:30.790 --> 00:00:32.780
and a very critical part of that is Java.

00:00:32.960 --> 00:00:37.830
And one of the most important and for me
exciting Java development products that's

00:00:37.850 --> 00:00:39.800
available today on Mac OS X is Eclipse.

00:00:39.880 --> 00:00:45.030
I'm very pleased to be able to welcome
John Wiegand and Erich Gamma to tell

00:00:45.050 --> 00:00:47.390
us more about Eclipse on Mac OS X.

00:00:47.520 --> 00:00:50.720
So, with no further ado, thank you.

00:00:53.300 --> 00:02:32.000
[Transcript missing]

00:02:32.510 --> 00:02:36.400
See, when you leave the room,
we have doubled this number.

00:02:36.400 --> 00:02:37.720
OK.

00:02:37.730 --> 00:02:41.200
How many of you have a
product shipping on Eclipse?

00:02:41.900 --> 00:02:42.900
Good, still.

00:02:42.900 --> 00:02:44.940
So I can't promise you double
these at the end of this session,

00:02:44.940 --> 00:02:46.110
but it's a good thing to do.

00:02:49.510 --> 00:02:52.800
So, what is Eclipse,
is the first question.

00:02:52.800 --> 00:02:54.000
This is our famous quote.

00:02:54.000 --> 00:02:57.590
We've used this repeatedly
for the last three years.

00:02:57.720 --> 00:03:01.180
It's a universal tool platform,
an open extensible IDE for anything,

00:03:01.180 --> 00:03:02.340
but nothing in particular.

00:03:02.340 --> 00:03:03.940
And this is an important theme.

00:03:03.940 --> 00:03:07.800
We have good Java development tools,
but it's much more than that.

00:03:08.130 --> 00:03:09.540
So let's look at the
building blocks here.

00:03:09.640 --> 00:03:11.140
We start with a runtime.

00:03:11.190 --> 00:03:15.930
Very small, less than a megabyte,
knows about the notion of

00:03:15.960 --> 00:03:18.330
plug-ins and nothing else.

00:03:20.430 --> 00:03:28.000
Built on top of that is a window
toolkit and then a UI library.

00:03:28.000 --> 00:03:32.740
So this is our generic
application platform.

00:03:32.740 --> 00:03:35.630
Knows nothing about tools even.

00:03:35.810 --> 00:03:36.900
This is just the core base.

00:03:36.900 --> 00:03:39.340
Can be used for any
application you choose.

00:03:39.340 --> 00:03:41.700
So it's laid in two layers.

00:03:41.700 --> 00:03:44.370
Now SWT is just vanilla widgets.

00:03:44.380 --> 00:03:47.800
And Jface, higher level application
level functionality.

00:03:47.800 --> 00:03:51.320
Like if you connect your widgets
to your model behind that.

00:03:51.440 --> 00:03:52.630
This kind of stuff is in Jface.

00:03:52.640 --> 00:03:55.680
So it's laid in two layers.

00:03:55.840 --> 00:03:57.800
Then we add the notion
of tools on top of that.

00:03:57.800 --> 00:04:02.470
So we have a project model that we add,
help facilities, an update mechanism,

00:04:02.470 --> 00:04:04.850
text infrastructure, compare, search,
debug.

00:04:04.960 --> 00:04:09.230
All the specific stuff that
makes it a tool platform.

00:04:09.370 --> 00:04:10.690
So all that's layered on top.

00:04:10.790 --> 00:04:11.800
Those are optional components.

00:04:11.820 --> 00:04:15.370
They can actually get leveraged for
someone who's using it as a general

00:04:15.370 --> 00:04:17.500
purpose application platform as well.

00:04:17.640 --> 00:04:20.320
And what you see on
top of this IDE stack,

00:04:20.320 --> 00:04:23.050
you see now we have basically
a language neutral layer.

00:04:23.120 --> 00:04:26.760
We have search, debug, compare, text.

00:04:26.900 --> 00:04:28.900
But this infrastructure
is not language specific.

00:04:28.900 --> 00:04:33.280
And what you will see now when
you go to the next layer in JDT,

00:04:33.530 --> 00:04:37.000
we build on top of those and
add Java specific search,

00:04:37.000 --> 00:04:39.740
Java specific compare,
Java specific editing.

00:04:39.900 --> 00:04:41.190
Right, that's the model.

00:04:41.260 --> 00:04:45.400
So the JDT adds knowledge
of Java to the platform.

00:04:45.400 --> 00:04:49.290
But the core platform
doesn't know about Java.

00:04:49.390 --> 00:04:53.870
Which means for us as JDT developers,
we get no privileges from the platform.

00:04:53.900 --> 00:04:57.480
Which is a healthy thing
because this gives us this fair

00:04:57.740 --> 00:04:59.900
play and ensures good APIs.

00:04:59.900 --> 00:05:04.480
So we were kind of also the pioneers
of the whole API extension story.

00:05:04.480 --> 00:05:07.400
And it was a really healthy experience
to go through this period of frictions,

00:05:07.400 --> 00:05:07.890
right?

00:05:07.900 --> 00:05:09.560
We want this from the platform.

00:05:09.600 --> 00:05:10.900
No, you cannot have it.

00:05:10.900 --> 00:05:12.890
So that's how we evolved JDT.

00:05:12.900 --> 00:05:15.450
So we're really going to
focus in the JDT area for

00:05:15.530 --> 00:05:17.200
the most part this afternoon.

00:05:17.200 --> 00:05:20.210
We'll show the breadth,
but JDT is going to be our primary focus

00:05:20.210 --> 00:05:23.690
and the platform through JDT perspective.

00:05:24.770 --> 00:05:28.980
So we had three primary goals
when we set out to do Eclipse.

00:05:29.020 --> 00:05:33.990
The first, called the open platform,
we want to work on a

00:05:33.990 --> 00:05:35.380
wide range of platforms.

00:05:35.380 --> 00:05:40.380
We're showing Mac, Windows, Linux,
Solaris, the full gamut.

00:05:40.380 --> 00:05:43.700
And besides working on those platforms,
we want to be able to leverage the

00:05:43.770 --> 00:05:45.460
facilities that those platforms provide.

00:05:45.500 --> 00:05:48.000
So it looks like a
Windows app on Windows,

00:05:48.020 --> 00:05:52.410
and it looks like and
is a Mac app on the Mac.

00:05:54.720 --> 00:05:57.630
Next goal, as Eric already alluded to,
we want to build good

00:05:57.630 --> 00:05:59.920
Java development tools,
but that doesn't want to be our center.

00:05:59.980 --> 00:06:02.700
Our center is we're a platform,
and we make it possible so you can

00:06:02.700 --> 00:06:05.510
build a C development environment,
Java development environment,

00:06:05.510 --> 00:06:07.180
web tooling, whatever makes sense.

00:06:07.180 --> 00:06:07.970
All this can be built.

00:06:08.000 --> 00:06:13.360
So the model is we have something which
knows nothing about different artifacts.

00:06:13.360 --> 00:06:16.660
You extend the platform with knowledge
about the particular artifact.

00:06:16.660 --> 00:06:20.650
You plug in XML tooling,
you plug in EJB tooling to make the

00:06:20.650 --> 00:06:23.400
platform aware of these artifacts.

00:06:23.400 --> 00:06:24.310
That's our model.

00:06:26.510 --> 00:06:28.330
So then once you put
these tools in place,

00:06:28.410 --> 00:06:32.090
we want it to be such that you
don't look at it as a user.

00:06:32.250 --> 00:06:35.560
You've got this wide range of tools
that have nothing to do with each other,

00:06:35.560 --> 00:06:37.400
but rather you've got a seamless whole.

00:06:37.400 --> 00:06:39.660
So the seamless integration
is really important,

00:06:39.660 --> 00:06:41.490
both in terms of the
product that you get,

00:06:41.490 --> 00:06:44.390
the Eclipse-based product initially,
but also any extensions

00:06:44.390 --> 00:06:45.400
that get added later.

00:06:45.400 --> 00:06:49.370
It feels like all parts
of a single whole.

00:06:52.360 --> 00:06:54.400
So our background,
you see it's not our first

00:06:54.440 --> 00:06:55.960
attempt to build an IDE.

00:06:55.960 --> 00:06:59.190
If you look at the whole knowledge which
we have in our team on different tools,

00:06:59.200 --> 00:07:03.420
you see we have Smalltalk,
we have Taligent Technology,

00:07:03.420 --> 00:07:07.060
Visual Edge for Java, TeamV, C++ Tools.

00:07:07.060 --> 00:07:09.260
So some of these projects
were more successful,

00:07:09.350 --> 00:07:12.660
some of them less successful,
some of them even died.

00:07:12.660 --> 00:07:15.570
But I think the key point here,
we really tried to say,

00:07:15.640 --> 00:07:18.980
"Eclipse is our last chance
to get things right."

00:07:19.280 --> 00:07:21.360
We hope we succeeded, partially.

00:07:21.420 --> 00:07:23.960
So we think we've really
leveraged our experience.

00:07:23.960 --> 00:07:26.320
And the other thing is
as our community grows,

00:07:26.400 --> 00:07:31.110
we've brought many more different areas
of background to play over time as well.

00:07:31.180 --> 00:07:35.510
So we're seeing more teams
and our roots are broadening.

00:07:38.450 --> 00:07:39.650
So what is Eclipse again?

00:07:39.660 --> 00:07:42.400
Look at it from a different perception.

00:07:42.420 --> 00:07:44.670
Extensible tools platform.

00:07:44.960 --> 00:07:46.540
Out of the box function.

00:07:46.610 --> 00:07:49.880
We didn't really talk about this yet,
but we wanted Eclipse when you get it.

00:07:49.910 --> 00:07:51.990
You take that initial download,
it's something that's

00:07:51.990 --> 00:07:52.940
interesting and it's useful.

00:07:52.940 --> 00:07:57.680
So the Java development tools was
a good test case of the platform,

00:07:57.680 --> 00:07:59.460
but it's also a useful function.

00:07:59.460 --> 00:08:02.610
So if you take that with the plugin
development environment on top of it,

00:08:02.720 --> 00:08:04.650
you can build plugins
of your own immediately,

00:08:04.730 --> 00:08:05.610
so within minutes.

00:08:05.610 --> 00:08:08.900
And one of the things we're going to
show today is how easy that is to do.

00:08:09.380 --> 00:08:13.140
So the trick here is, right,
we want to give you a Christmas present,

00:08:13.140 --> 00:08:15.510
but we haven't forgotten to
put the batteries in there.

00:08:19.900 --> 00:08:22.310
It's not just good technology,
but it's being applied.

00:08:22.350 --> 00:08:26.640
So we have Eclipse
Foundation that's been established.

00:08:26.750 --> 00:08:29.890
There's on the order of 50
major organizations involved.

00:08:29.900 --> 00:08:31.660
They're building real
products based on Eclipse.

00:08:31.660 --> 00:08:38.660
That real feedback is very valuable and
puts it to serious product level use.

00:08:39.140 --> 00:08:40.620
But not just product level use.

00:08:40.620 --> 00:08:42.900
We really care about the
open source community.

00:08:42.900 --> 00:08:48.410
And the open source project
is basically our lifeblood.

00:08:48.410 --> 00:08:51.710
And that's where we spend our time,
listening and responding

00:08:51.710 --> 00:08:53.140
and working together.

00:08:53.140 --> 00:08:55.400
And also to make open
source even simpler,

00:08:55.400 --> 00:08:58.110
we wanted to really have
first class integration of

00:08:58.110 --> 00:09:01.060
open source tools like Ant,
CVS, JUnit, right?

00:09:01.130 --> 00:09:04.090
That you can really work in
open source environment in a

00:09:04.130 --> 00:09:06.140
seamless and productive manner.

00:09:10.820 --> 00:09:12.800
So what is JDT?

00:09:12.800 --> 00:09:14.720
Screenshot.

00:09:14.720 --> 00:09:16.620
I think the screenshot
is not too interesting.

00:09:16.660 --> 00:09:20.840
So what I want to do is,
I will go through some demo.

00:09:20.840 --> 00:09:24.610
I must confess,
I don't daily code on the Mac,

00:09:24.610 --> 00:09:27.880
so some of my keystrokes might slip.

00:09:27.880 --> 00:09:31.660
And I claim my wife is guilty for
that because she's having a Mac,

00:09:31.660 --> 00:09:36.140
but she only borrows it to me on
Saturday morning when she goes shopping.

00:09:36.140 --> 00:09:39.300
So I've really limited
training experience.

00:09:40.800 --> 00:09:43.000
So what I will show, yes, thank you.

00:09:43.000 --> 00:09:45.810
So I will show how some code exploration,
and as we go,

00:09:45.820 --> 00:09:47.540
I will show you some new stuff.

00:09:47.540 --> 00:09:49.420
I will also show you some old stuff.

00:09:49.420 --> 00:09:52.640
I hope you can still profit from it.

00:09:52.640 --> 00:09:54.430
First of all,
let me start with something.

00:09:54.430 --> 00:09:56.540
I guess the example,
one word about the example.

00:09:56.540 --> 00:10:01.350
Let's get rid of this guy here.

00:10:04.460 --> 00:10:08.650
The example is JHotDraw,
which is a drawing framework

00:10:09.190 --> 00:10:11.900
which is based on HotDraw,
which was initially built by

00:10:11.900 --> 00:10:13.240
Ward Cunningham and Kent Beck.

00:10:13.260 --> 00:10:16.350
And this is basically some
sample code I wrote when I still

00:10:16.550 --> 00:10:18.720
thought about design patterns,
right?

00:10:18.740 --> 00:10:20.620
Who wants to know about that anymore?

00:10:20.620 --> 00:10:21.720
But it's still a good sample.

00:10:21.720 --> 00:10:26.650
Let's first start with something
which is really invisible,

00:10:26.690 --> 00:10:32.550
but which I think is where we have a
big advantage over many other tools.

00:10:32.720 --> 00:10:36.000
It's a feature I don't want to miss,
which I don't see in other platforms,

00:10:36.000 --> 00:10:39.020
which is incremental
compilation in the background.

00:10:39.020 --> 00:10:43.320
So our compiler technology, maybe John,
you can say something about it

00:10:43.320 --> 00:10:45.600
while I try to open something here.

00:10:45.600 --> 00:10:48.940
One of the things that we've done from
the beginning with our compiler is we use

00:10:48.940 --> 00:10:52.230
our compiler both to do the build engine,
but also all of our tools are

00:10:52.230 --> 00:10:53.850
built on top of the same piece.

00:10:53.860 --> 00:10:56.000
So we get the same exact
characteristics between the two.

00:10:56.020 --> 00:11:00.780
So our recovery mechanisms, et cetera,
all leverage the same pieces.

00:11:00.820 --> 00:11:02.480
I feel like this is unfair, Eric.

00:11:02.800 --> 00:11:04.720
We need something to make it
a little more challenging.

00:11:04.720 --> 00:11:05.200
No, no.

00:11:05.200 --> 00:11:08.170
First I want to show
you what our goal was.

00:11:08.310 --> 00:11:11.710
Our goal was you change a massive body,
and below one second you

00:11:11.710 --> 00:11:13.460
should be able to run again.

00:11:13.500 --> 00:11:15.490
So you have to watch fast.

00:11:17.900 --> 00:11:19.900
It's done.

00:11:20.130 --> 00:11:22.650
Yeah, we need to,
can we run this off battery, Todd?

00:11:22.730 --> 00:11:27.870
Just to make it a little bit... So, well,
we have the progress view here.

00:11:27.910 --> 00:11:31.140
Let's just drag it so you can
at least see we are building.

00:11:34.510 --> 00:11:36.840
Watch quickly, right?

00:11:36.850 --> 00:11:38.500
So you want to have
something more advanced?

00:11:38.500 --> 00:11:41.210
You want to let it change a comment,
for instance?

00:11:43.500 --> 00:11:47.730
So you see incremental building,
highly sophisticated when

00:11:47.730 --> 00:11:50.460
you want a quick turnaround.

00:11:50.460 --> 00:11:53.340
One thing which is also special,
we come from an explorative environment,

00:11:53.340 --> 00:11:55.440
John even more than I do,
and know Smalltalk,

00:11:55.440 --> 00:11:59.500
which is a highly optimistic language,
which means what our compiler can do,

00:11:59.500 --> 00:12:02.290
which I don't know of any
other one which can do that,

00:12:02.430 --> 00:12:07.180
it can generate code even when
you have errors in your source.

00:12:07.180 --> 00:12:10.510
If I have one method in error,
for all the other methods in my file,

00:12:10.510 --> 00:12:15.240
code gets still generated,
which means I can execute coded errors,

00:12:15.240 --> 00:12:16.940
which is just great.

00:12:16.940 --> 00:12:20.760
If you have a large piece of
software you want to port,

00:12:20.760 --> 00:12:24.240
I want to run it without having
done the big bang approach.

00:12:24.240 --> 00:12:27.370
So that's just some inheritage
from our exploration days,

00:12:27.480 --> 00:12:29.320
Smalltalk, which was just given.

00:12:30.750 --> 00:12:32.620
Debugging is also very important.

00:12:32.700 --> 00:12:34.800
So let's do some debugging here.

00:12:34.960 --> 00:12:37.030
So I have to run this thing.

00:12:40.530 --> 00:12:43.230
Don't be confused about the package name,
it's old code.

00:12:43.240 --> 00:12:46.000
So it's CH stands for Switzerland.

00:12:46.120 --> 00:12:49.870
Joe Rowe.

00:12:50.550 --> 00:12:54.500
We are running the debugger now.

00:12:54.500 --> 00:12:57.790
And we debug it as a Java application.

00:13:03.190 --> 00:13:03.700
Here we go.

00:13:03.700 --> 00:13:07.360
I want to just make it a little bit
more interesting and add some data.

00:13:07.750 --> 00:13:09.870
That's the most critical
part of the demo,

00:13:09.870 --> 00:13:12.240
since I can easily get lost on the disk.

00:13:12.240 --> 00:13:18.200
But it happens to me.

00:13:27.500 --> 00:13:29.740
Now John, it's your opportunity to talk.

00:13:30.280 --> 00:13:33.860
So again, notice we're using the native
controls as we work through here.

00:13:33.910 --> 00:13:36.860
So this shows the native
control integration.

00:13:36.880 --> 00:13:39.450
We leverage those pieces as we go.

00:13:39.470 --> 00:13:42.190
I save you, John.

00:13:42.260 --> 00:13:43.080
So here we go.

00:13:43.160 --> 00:13:46.790
This is from the young times
when you had lots of fun.

00:13:47.300 --> 00:13:49.600
So it's not only a drawing tool,
it's also an animation.

00:13:49.600 --> 00:13:51.440
So now I run it in the debugger.

00:13:51.460 --> 00:13:54.270
And you know, usually you use,

00:13:55.150 --> 00:13:58.340
You use tool palettes to change colors.

00:13:58.390 --> 00:14:03.410
That's a little bit boring,
so we can do better than that.

00:14:05.500 --> 00:14:07.660
"I want get attribute,
I think that's not what I want,

00:14:07.660 --> 00:14:11.580
I want get fill color.

00:14:11.580 --> 00:14:13.940
Can you imagine what I'm up to?

00:14:14.230 --> 00:14:15.960
So let's set a break point.

00:14:15.970 --> 00:14:18.100
Here we are in the debugger now.

00:14:18.230 --> 00:14:23.160
So we look at what is in this fill color.

00:14:23.200 --> 00:14:30.480
Let's just get the
expression and inspect it.

00:14:35.780 --> 00:14:37.780
So that's something you will
see often in the new release.

00:14:37.820 --> 00:14:39.550
Now we work with these
lightweight dialogs,

00:14:39.550 --> 00:14:42.460
which means really we don't
want to distract stuff.

00:14:42.460 --> 00:14:45.000
So you often work with this code
assist-like style lightweight dialogs.

00:14:45.060 --> 00:14:45.980
That's what you see here, right?

00:14:46.070 --> 00:14:48.440
This is an inspector,
but it's really lightweight and you

00:14:48.550 --> 00:14:50.200
can still have the full functionality.

00:14:50.270 --> 00:14:52.120
So you have some color stuff here.

00:14:52.200 --> 00:14:54.000
Now we want to be mean.

00:14:54.130 --> 00:14:56.300
Let's continue running.

00:14:59.300 --> 00:15:01.660
What we will do now-- hello.

00:15:01.660 --> 00:15:03.090
Oh, I have to remove the breakpoint.

00:15:03.130 --> 00:15:04.660
That will be better.

00:15:08.590 --> 00:15:14.500
So guess what I'm up to now?

00:15:14.560 --> 00:15:16.580
I don't use the palette
to change the color,

00:15:16.720 --> 00:15:21.060
I just change the code.

00:15:21.060 --> 00:15:23.590
So instead of restarting the program,
you're just changing it on the block.

00:15:23.600 --> 00:15:25.970
What fits Apple style?

00:15:31.400 --> 00:15:34.000
And here's Red.

00:15:34.040 --> 00:15:38.690
So now what I will do is I will save.

00:15:39.410 --> 00:15:41.010
Whoops.

00:15:41.090 --> 00:15:42.090
So what happened, right?

00:15:42.180 --> 00:15:45.160
I saved in the background,
the code got compiled,

00:15:45.190 --> 00:15:48.540
the change code got updated
into the running VM,

00:15:48.560 --> 00:15:53.540
and of course I could do
that without any reason.

00:15:56.400 --> 00:15:58.100
So the next feature, just to show,
you know,

00:15:58.100 --> 00:15:59.520
structure is really important to us.

00:15:59.520 --> 00:16:02.550
So I made a change to method that's
also heritage from Smalltalk.

00:16:02.600 --> 00:16:04.330
But in Smalltalk,
you could do this fine-grained

00:16:04.390 --> 00:16:05.240
history method level.

00:16:05.240 --> 00:16:06.440
So I can still do this now.

00:16:06.440 --> 00:16:07.990
So I want to go back
to the previous stuff.

00:16:07.990 --> 00:16:09.240
But I don't want to code it.

00:16:09.310 --> 00:16:11.160
Instead, I want to use local history.

00:16:11.160 --> 00:16:12.520
And I say replace with.

00:16:12.630 --> 00:16:16.570
And then I get the local history,
but just of this single method.

00:16:16.570 --> 00:16:19.130
So on the fly, you know,
we parse out the structure,

00:16:19.130 --> 00:16:20.100
things like that.

00:16:20.100 --> 00:16:20.880
We replace.

00:16:20.880 --> 00:16:21.920
Save.

00:16:21.920 --> 00:16:25.060
And we are happy again.

00:16:25.580 --> 00:16:27.180
Okay.

00:16:29.600 --> 00:16:31.890
So just to reiterate there,
all this is built on top of

00:16:31.890 --> 00:16:33.640
the language neutral structure,
right?

00:16:33.680 --> 00:16:36.720
So this is JavaScript function
that's layered on top.

00:16:36.740 --> 00:16:39.400
So let's look a little
bit at refactoring.

00:16:39.400 --> 00:16:43.520
Refactoring is, of course,
I think one of the most productivity

00:16:43.520 --> 00:16:46.200
increasing ideas and tools these days.

00:16:46.290 --> 00:16:50.080
And I think the different stairways to
heaven when you think about refactoring.

00:16:50.080 --> 00:16:53.650
So the first step is now we
can rename a class or a method,

00:16:53.700 --> 00:16:56.590
and then things get updated references.

00:16:57.190 --> 00:16:58.100
That's the first step.

00:16:58.100 --> 00:17:00.880
The next step is you can do
kind of structural manipulations

00:17:00.890 --> 00:17:02.130
like extract a method.

00:17:02.140 --> 00:17:05.900
Then the third step to me is the
really interesting refactorings

00:17:06.000 --> 00:17:07.740
like extract interface.

00:17:07.740 --> 00:17:09.960
You have a type,
you extract an interface,

00:17:09.960 --> 00:17:12.800
and you change all the code
which could use this interface

00:17:12.800 --> 00:17:14.550
to refer to this new interface.

00:17:14.560 --> 00:17:17.240
Now this is based on more
interesting algorithms like

00:17:17.380 --> 00:17:20.190
we are using type constraints,
which we have published

00:17:20.190 --> 00:17:21.420
at UPSLA last year.

00:17:21.420 --> 00:17:25.200
And then the fourth level is
where it gets really interesting.

00:17:25.200 --> 00:17:29.570
That's where you start not only refactor,
but first of all you can also update

00:17:29.640 --> 00:17:34.470
derived resources like Java documents,
or you can allow others to

00:17:34.470 --> 00:17:36.550
participate like an updated JSP.

00:17:36.620 --> 00:17:41.330
Or you can update derived
stuff like variable names.

00:17:41.330 --> 00:17:42.580
I change a class name.

00:17:42.660 --> 00:17:45.540
I also want to update variable names
which refer to this class name.

00:17:45.640 --> 00:17:46.330
Things like that.

00:17:46.380 --> 00:17:50.760
So we are at level three
on the move to level four.

00:17:51.070 --> 00:17:53.370
So let me show you something.

00:17:53.730 --> 00:17:56.590
Some smell detection.

00:17:56.690 --> 00:17:59.610
Let's go ahead and set
some brookmark here.

00:18:02.700 --> 00:18:04.480
What's a good one?

00:18:04.670 --> 00:18:08.650
Let's just do a reference search
where this election is used.

00:18:13.300 --> 00:18:15.300
Where is this guy used?

00:18:15.300 --> 00:18:20.510
Without this refactoring support,
people tend to live with

00:18:20.510 --> 00:18:22.340
programs that are wrong.

00:18:22.390 --> 00:18:23.510
It's just not worth the
effort of fixing them up.

00:18:23.510 --> 00:18:25.790
But with this,
you just naturally keep your

00:18:25.790 --> 00:18:27.300
programs with better hygiene.

00:18:27.300 --> 00:18:31.300
So I see this expression a lot, you know,
with F selection contains.

00:18:31.300 --> 00:18:32.300
So that's kind of some code smell.

00:18:32.300 --> 00:18:34.270
I want to extract it as a method.

00:18:34.270 --> 00:18:37.230
Others can do that too.

00:18:38.830 --> 00:18:41.730
Let's call the refactoring menu,
which is context sensitive,

00:18:41.730 --> 00:18:44.110
and I want to do extract method.

00:18:45.360 --> 00:18:49.620
However, what is interesting here
is this little checkbox.

00:18:49.650 --> 00:18:53.620
When I extract this method,
we will go in and find other places in

00:18:53.620 --> 00:18:58.600
your code where you used the same code,
the duplication.

00:18:58.600 --> 00:19:00.840
And we will refact this as well for you.

00:19:00.840 --> 00:19:01.790
This is kind of smell detection.

00:19:01.850 --> 00:19:04.190
We not only do what you want,
we also help you detect

00:19:04.190 --> 00:19:10.420
other smells in your code,
in this case duplication of this method.

00:19:10.420 --> 00:19:17.270
So let's do that,
that you see that I didn't lie to you.

00:19:17.290 --> 00:19:18.280
Contains figure.

00:19:18.280 --> 00:19:20.680
And let's do the preview here.

00:19:25.310 --> 00:19:27.600
Then you see replace
duplicate code fragments.

00:19:27.660 --> 00:19:30.960
We go in another place in your
code and we update this as well.

00:19:30.980 --> 00:19:33.420
You can imagine you can
go even further with that.

00:19:33.420 --> 00:19:36.180
But that's kind of where
I see refactoring is going.

00:19:39.610 --> 00:19:44.000
Refactoring in JavaDoc, as I mentioned,
derived data refactoring.

00:19:44.000 --> 00:19:46.210
Let's maybe add some JavaDoc thing here.

00:19:46.260 --> 00:19:49.260
But I have a parameter.

00:19:51.600 --> 00:19:57.480
You didn't really draw much attention,
Erich, to the context sensitivity.

00:19:57.480 --> 00:19:58.890
Let me just mention,
you went by that because

00:19:58.890 --> 00:19:59.600
we're used to it.

00:19:59.600 --> 00:20:02.570
But what happens on the pop-up
is the JDT is finding the

00:20:02.600 --> 00:20:04.460
refactorings that are appropriate.

00:20:04.620 --> 00:20:07.260
So instead of seeing the long list
of all the possible refactorings,

00:20:07.260 --> 00:20:09.470
you're seeing the ones that
make sense in that context.

00:20:09.660 --> 00:20:13.080
So again, it's helping you do the
work you need to do.

00:20:13.080 --> 00:20:15.890
Behind this is quite a machinery, right?

00:20:15.890 --> 00:20:18.920
There is always an abstract syntax tree
you have to have to make these decisions.

00:20:18.920 --> 00:20:18.920
So,

00:20:20.020 --> 00:20:21.360
I want to show Java doc updating.

00:20:21.560 --> 00:20:25.210
For instance, I've added a Java doc tag.

00:20:25.210 --> 00:20:26.710
I just go in.

00:20:27.300 --> 00:20:32.510
I rename this parameter to figure foo.

00:20:33.120 --> 00:20:35.480
And you see,
ChaoDoc is now also getting updated,

00:20:35.480 --> 00:20:37.030
since you all have a
helpful representation of

00:20:37.130 --> 00:20:40.200
these commands in our AST.

00:20:40.600 --> 00:20:44.470
So next thing is what I want
to show is coding assistance.

00:20:44.660 --> 00:20:48.940
Of course,
we do all kind of code assist stuff.

00:20:49.630 --> 00:20:51.900
Would you just expect today from an IDE?

00:20:51.900 --> 00:20:54.810
Let's do a new...

00:20:58.000 --> 00:20:59.500
HashMap is good.

00:20:59.500 --> 00:21:03.600
So when you do that, you will import.

00:21:03.600 --> 00:21:05.040
But we have gone a
little bit beyond that.

00:21:05.080 --> 00:21:06.950
Now we also offer what
we call Quick Assist,

00:21:07.050 --> 00:21:09.080
which helps you with
tedious coding tasks.

00:21:09.090 --> 00:21:11.990
For instance, now I have to type the
object I want to create.

00:21:11.990 --> 00:21:14.340
I have to type it, such as do Control-1.

00:21:14.340 --> 00:21:17.600
And I can now assign the
statement to a new local variable.

00:21:17.600 --> 00:21:22.050
And of course the system will come
in and infer which type this is,

00:21:22.050 --> 00:21:23.960
help me with the name.

00:21:24.040 --> 00:21:26.600
Well, HashMap is better.

00:21:26.600 --> 00:21:28.850
So which type should it have?

00:21:28.900 --> 00:21:30.950
Well, that's the clipping

00:21:31.890 --> 00:21:33.830
So I want to use a collection, right?

00:21:33.850 --> 00:21:34.200
A map.

00:21:34.420 --> 00:21:35.040
A map is good.

00:21:35.040 --> 00:21:36.830
I don't want to use the concrete type,
I use the map.

00:21:37.000 --> 00:21:41.150
But you see, we help you with editing,
we infer, we know your program very well.

00:21:41.200 --> 00:21:46.160
In fact, we like Codasys that much that
we have also extended it to

00:21:46.160 --> 00:21:48.570
also be part of our dialogues.

00:21:48.570 --> 00:21:54.580
So for instance, when you change,
when you have to enter a class name...

00:21:55.160 --> 00:22:00.420
We also give you code assist in dialogs,
and I guess it's just a

00:22:00.420 --> 00:22:02.040
homogeneous experience.

00:22:02.040 --> 00:22:05.880
Once you used to not type anymore,
you really want to have it everywhere.

00:22:05.990 --> 00:22:08.500
So this light bulb is the indicator.

00:22:09.720 --> 00:22:11.800
And of course,
you will not only do this for classes,

00:22:11.800 --> 00:22:14.240
it's also really helpful when
you do regular expressions,

00:22:14.240 --> 00:22:14.500
right?

00:22:14.630 --> 00:22:17.850
Who knows this index
of regular expressions?

00:22:18.730 --> 00:22:22.420
I don't, but of course, we code this,
you can get the same.

00:22:22.510 --> 00:22:25.160
So these are some of
the ideas you have here.

00:22:25.760 --> 00:22:28.240
- So coding, huh?

00:22:28.540 --> 00:22:32.100
So templates is very interesting stuff.

00:22:32.100 --> 00:22:37.310
For really boring,
I want to iterate over an array with

00:22:37.880 --> 00:22:40.480
with the collection.

00:22:40.480 --> 00:22:42.910
Things are linked together.

00:22:44.200 --> 00:22:45.950
Actually, can I go back?

00:22:46.080 --> 00:22:47.960
Can you ignore what I just did?

00:22:47.960 --> 00:22:50.700
I have something cooler for you.

00:22:50.700 --> 00:22:54.570
I want to iterate over a
collection because then the

00:22:54.570 --> 00:22:56.670
system will have to be smart.

00:23:01.100 --> 00:23:06.730
"Ether, ether, so what is it,
an object?" Things like that, right?

00:23:06.880 --> 00:23:07.720
You don't have to type it.

00:23:07.790 --> 00:23:10.150
The tedious stuff is linked editing.

00:23:10.550 --> 00:23:14.480
Very important when you
do test-first development,

00:23:14.500 --> 00:23:18.170
XP practices,
you often write code to test first,

00:23:18.210 --> 00:23:20.070
and when you write the test first,
you write some method

00:23:20.110 --> 00:23:21.060
which doesn't exist yet.

00:23:21.140 --> 00:23:24.220
And of course,
you can also get support for creating

00:23:24.220 --> 00:23:26.650
this method from unknown references.

00:23:26.660 --> 00:23:28.680
And what you see here is a preview.

00:23:28.680 --> 00:23:32.530
We always can show you the preview
of what we'll generate for you.

00:23:32.540 --> 00:23:35.560
That's also pretty neat technology,
because it requires that we

00:23:35.630 --> 00:23:38.340
can do a what-if analysis
of an abstract syntax tree.

00:23:40.080 --> 00:23:45.820
So quick assist, there are some fun ones
that I'd like to show you.

00:23:45.820 --> 00:23:45.820
For instance,

00:23:46.230 --> 00:23:48.040
Some new ones which we have.

00:23:48.040 --> 00:23:52.740
Imagine you want to add
a new constructor here.

00:23:52.740 --> 00:23:56.880
And the constructor, we are now 3D,
we also have a depth argument.

00:23:59.150 --> 00:24:01.400
So I've added the argument
to the constructor,

00:24:01.410 --> 00:24:04.140
but of course now I want to
have to assign it to a field.

00:24:04.140 --> 00:24:05.690
I have to declare the field,
all the stuff.

00:24:05.770 --> 00:24:06.740
So we do this all for you.

00:24:06.740 --> 00:24:11.830
You can just control one and say
assign parameter to a new field.

00:24:12.700 --> 00:24:15.490
And this will give me the
option to change the name.

00:24:15.580 --> 00:24:17.570
The name is OK.

00:24:17.640 --> 00:24:18.640
Yeah, and type is OK.

00:24:18.640 --> 00:24:20.720
Well, maybe it'll take a long, right?

00:24:20.890 --> 00:24:21.600
Things like that.

00:24:21.680 --> 00:24:27.220
So really helpful when it
comes to adding new code.

00:24:27.260 --> 00:24:29.490
And consistent with that--

00:24:31.940 --> 00:24:38.250
One of our nicer quick fixes
is... What is a good example?

00:24:38.350 --> 00:24:41.880
I looked up a move
selection is a good one.

00:24:45.310 --> 00:24:49.560
So if I add another parameter here-- no,
no, no, no, no.

00:24:49.580 --> 00:24:51.140
At the call side, right?

00:24:51.280 --> 00:24:52.650
I just see this method.

00:24:52.660 --> 00:24:56.780
I change it here at the call side,
take an additional parameter.

00:24:58.960 --> 00:25:03.540
The system can help me to suggest
to also change the calling side.

00:25:03.600 --> 00:25:05.080
This is really do what I mean, right?

00:25:05.130 --> 00:25:09.010
I change the call and Quick Assist,
Quick Fix will help

00:25:09.120 --> 00:25:10.400
me to fix up the code.

00:25:10.420 --> 00:25:13.210
So I can say, yeah,
I want to actually change the method

00:25:13.210 --> 00:25:16.510
to have this additional parameter,
as you see highlighted here.

00:25:16.530 --> 00:25:18.340
That's pretty neat.

00:25:18.340 --> 00:25:19.080
Poof.

00:25:19.080 --> 00:25:21.960
I think poof is the word to say.

00:25:25.290 --> 00:25:27.200
Okay, searching quickly.

00:25:27.200 --> 00:25:29.280
What's new there is we
search in the background.

00:25:29.280 --> 00:25:32.550
We have this new,
nice responsiveness infrastructure.

00:25:32.550 --> 00:25:34.600
So what's a good search?

00:25:34.740 --> 00:25:35.490
Vector.

00:25:35.490 --> 00:25:37.740
Do I have a vector somewhere?

00:25:37.750 --> 00:25:40.340
I have to look something which
takes a little bit longer.

00:25:40.340 --> 00:25:42.790
Vector.

00:25:42.890 --> 00:25:43.600
Here we go.

00:25:43.630 --> 00:25:44.380
So vector.

00:25:44.380 --> 00:25:46.380
Let's do a references search.

00:25:50.330 --> 00:25:51.890
See, that's when I slipped.

00:25:51.920 --> 00:25:52.460
I didn't get it.

00:25:52.500 --> 00:25:56.210
So I want to reference
this in the workspace.

00:25:56.590 --> 00:25:59.640
And now you see I have the option
to run in the background and

00:25:59.640 --> 00:26:00.880
then I can continue working.

00:26:00.940 --> 00:26:02.700
Wow, it was too fast.

00:26:05.460 --> 00:26:07.970
Give me a slow demo machine.

00:26:08.050 --> 00:26:11.890
I prepared on my IBM ThinkPad,
so I had plenty of time to talk.

00:26:11.900 --> 00:26:14.380
Maybe I have to look for a string.

00:26:19.400 --> 00:26:20.600
No strings used.

00:26:20.600 --> 00:26:21.340
Oh, silly me.

00:26:21.400 --> 00:26:27.940
So I would like to show
you our concurrency story,

00:26:27.960 --> 00:26:31.170
but I will do it in another example.

00:26:32.490 --> 00:26:34.400
Too fast.

00:26:34.510 --> 00:26:36.240
But you see,
you can run in the background.

00:26:36.240 --> 00:26:37.430
You can continue working.

00:26:37.440 --> 00:26:40.600
And you can group your results
in different presentations,

00:26:40.600 --> 00:26:41.260
things like that.

00:26:41.390 --> 00:26:43.600
What's also important is
we have opened-up search.

00:26:43.600 --> 00:26:46.370
So when you do a Java search,
you can now have the option to plug

00:26:46.370 --> 00:26:48.660
in additional sources to be looked up.

00:26:48.840 --> 00:26:51.510
So if you have, for instance,
the JSP development,

00:26:51.640 --> 00:26:54.540
you can hook into the Java search to say,
when you look for

00:26:54.540 --> 00:26:57.420
reference to Java class,
you can also look in your

00:26:57.490 --> 00:26:59.200
JSPs and give us the result.

00:26:59.200 --> 00:27:01.940
So this is kind of an idea
of opening up that you handle

00:27:01.940 --> 00:27:04.590
not but only Java artifacts.

00:27:05.680 --> 00:27:10.460
So searching, well call hierarchy is
something new we have.

00:27:10.460 --> 00:27:12.060
So who does actually the drawing?

00:27:12.060 --> 00:27:19.420
The draw all, draw, okay.

00:27:22.400 --> 00:27:23.400
I want to show it.

00:27:23.400 --> 00:27:28.700
But what's nice to show the call
hierarchy is because this is something

00:27:28.700 --> 00:27:31.920
we wouldn't have done because
I think an over-objection system

00:27:31.920 --> 00:27:36.640
call hierarchy is the worst thing to
look at because it's so complicated.

00:27:36.700 --> 00:27:40.320
But someone has written a nice call
hierarchy plug-in and in fact it was

00:27:40.320 --> 00:27:42.640
so good that we decided to take it.

00:27:42.640 --> 00:27:45.280
So that's nice how the
open source stuff works.

00:27:45.280 --> 00:27:46.190
Okay.

00:27:46.320 --> 00:27:50.600
Now let's move to something
which I think is pretty fun.

00:27:50.600 --> 00:27:54.470
Our background is we came from more
-- I want to show you exploration,

00:27:54.470 --> 00:27:58.620
how we explore code, how we can navigate
code we don't know yet.

00:27:58.620 --> 00:28:00.730
So we come from Smalltalk.

00:28:00.740 --> 00:28:04.090
And what we have offered here is
when you come from Smalltalk you

00:28:04.160 --> 00:28:08.470
have typically hierarchical browsing.

00:28:08.990 --> 00:28:09.840
Do I get some types here?

00:28:09.890 --> 00:28:10.610
Yeah.

00:28:10.740 --> 00:28:13.400
Right, you do some hierarchical
top-down browsing.

00:28:13.450 --> 00:28:18.220
That's cool, but what we found,
what really helps also when you do more

00:28:18.340 --> 00:28:20.800
exploratory understanding of a program,
you want to do it way

00:28:20.800 --> 00:28:21.730
more editor-centric.

00:28:21.940 --> 00:28:23.600
You want to really have
just the editor open,

00:28:23.600 --> 00:28:26.200
and everything you want
should be at your fingertips.

00:28:26.200 --> 00:28:29.690
Okay, so let's go see and
show you how we do that.

00:28:32.820 --> 00:28:34.880
So our new look also helps us with that.

00:28:34.880 --> 00:28:36.850
So we can really-- that's how I work.

00:28:37.000 --> 00:28:38.740
Everything is the editor.

00:28:38.750 --> 00:28:42.180
Everything else is either collapsed
here with our new minimizing

00:28:42.650 --> 00:28:46.860
feature and the new look,
or I have fast use on the side.

00:28:46.860 --> 00:28:50.600
But my focus is really in the code.

00:28:50.670 --> 00:28:55.390
So what's the example
ever I want to go to?

00:28:58.160 --> 00:29:04.110
Here I have the... Yeah, that's not bad.

00:29:04.310 --> 00:29:06.840
So first of all,
if I want to navigate inside the file,

00:29:06.850 --> 00:29:09.160
of course I have this quick navigation.

00:29:09.190 --> 00:29:11.010
I can go to get type whatever I want.

00:29:11.100 --> 00:29:16.300
If I want to also see the inherited code,
I can just do it twice and then

00:29:16.300 --> 00:29:18.700
I get the inherited methods as well.

00:29:18.700 --> 00:29:22.420
If I want to understand how
is something overwritten,

00:29:22.420 --> 00:29:24.770
I have an in-place type hierarchy.

00:29:25.250 --> 00:29:30.380
which shows me what I inherited from,
how is this method overridden.

00:29:33.300 --> 00:29:34.980
Of course, you have folding.

00:29:35.140 --> 00:29:38.410
Folding we added also for that
because basically what you want

00:29:38.520 --> 00:29:41.500
is when you work editor-centric,
you want to often hide Java doc

00:29:41.500 --> 00:29:44.300
commands so we can do that out
of the box and you open a file,

00:29:44.300 --> 00:29:47.500
we collapse Java documents that
it can really focus on your code.

00:29:47.520 --> 00:29:51.240
So we have folding,
we have in-place stuff.

00:29:51.340 --> 00:29:53.240
I showed you in the debugger
we do the same thing.

00:29:53.240 --> 00:29:55.700
We have in-place diff, basically.

00:29:55.700 --> 00:29:58.790
Now when I type here something,
I don't have to go to compare

00:29:58.840 --> 00:30:00.930
view to find out what I changed.

00:30:00.960 --> 00:30:03.630
If we just show you here this change bar,

00:30:04.490 --> 00:30:06.810
Oh well,
that's something I will show you later.

00:30:06.810 --> 00:30:09.360
And in a change bar,
I can see what changed and I can

00:30:09.360 --> 00:30:11.990
retrieve my stuff if I want to.

00:30:12.000 --> 00:30:13.820
I can revert it to what it was before.

00:30:13.820 --> 00:30:15.120
So that's the same theme, right?

00:30:15.220 --> 00:30:16.940
We want to make
everything editor-centric.

00:30:16.940 --> 00:30:20.490
You don't have to do lots of hunting
around to find what's available.

00:30:21.310 --> 00:30:23.560
Similarly,
we have these occurrences highlighting,

00:30:23.560 --> 00:30:27.590
this mark occurrences feature here,
which basically, behind the scenes,

00:30:27.590 --> 00:30:30.040
we know the structure of your program.

00:30:30.040 --> 00:30:31.760
So the idea is whenever
you click somewhere,

00:30:31.760 --> 00:30:34.880
we can tell you more information about
what you have currently clicked there.

00:30:34.920 --> 00:30:39.490
For instance, you click on a parameter,
we show you where is this parameter used.

00:30:39.490 --> 00:30:41.190
Where is the result computed?

00:30:41.290 --> 00:30:43.370
It gets highlighted immediately.

00:30:43.370 --> 00:30:45.810
Or similarly, here is an exception.

00:30:45.810 --> 00:30:48.020
Where is this exception thrown?

00:30:48.020 --> 00:30:51.060
You just click at it and all the
place where this exception is thrown.

00:30:51.120 --> 00:30:52.640
It's highlighted.

00:30:52.700 --> 00:30:55.290
Or you go on the return type,
you click on it,

00:30:55.340 --> 00:30:59.010
and all the exit points of
the methods are highlighted.

00:30:59.010 --> 00:31:00.460
And of course, you go on.

00:31:00.510 --> 00:31:01.340
We will go on with that.

00:31:01.420 --> 00:31:04.370
Now, you click on an interface and we
will highlight all the methods

00:31:04.440 --> 00:31:05.400
implemented in this interface.

00:31:05.400 --> 00:31:05.980
Things like that.

00:31:06.090 --> 00:31:07.320
You will see it's really point and click.

00:31:07.340 --> 00:31:09.930
The other thing is linking.

00:31:09.930 --> 00:31:13.800
So if you just want to
see what something is,

00:31:13.800 --> 00:31:16.710
you have this link view below.

00:31:21.000 --> 00:31:23.760
I click somewhere and immediately
see the declaration of it,

00:31:23.760 --> 00:31:24.480
and that's linked.

00:31:24.520 --> 00:31:26.860
Again, I don't have to do anything,
I can just by clicking,

00:31:26.940 --> 00:31:28.900
I have all the context to do my stuff.

00:31:28.930 --> 00:31:32.460
Or if I click on a variable,
I see the declaration, I'm pretty sure.

00:31:32.600 --> 00:31:34.110
Right, this guy here.

00:31:34.270 --> 00:31:35.760
Yeah, it shows me the declaration.

00:31:35.920 --> 00:31:41.090
Same with Javadoc,
if I'm more documentation-oriented.

00:31:41.390 --> 00:31:44.840
I will see the Java doc
below as I click around.

00:31:44.900 --> 00:31:47.380
Interesting point to mention here,
this is Safari, right?

00:31:47.490 --> 00:31:49.770
So we have a native--
that's our widget story.

00:31:49.900 --> 00:31:51.940
We natively integrated the platform.

00:31:52.010 --> 00:31:53.980
So which means on the Mac,
when you're on the Mac,

00:31:54.030 --> 00:31:57.490
we integrate with Safari or the WebKit.

00:31:58.750 --> 00:32:00.520
So just if you're overwhelmed
with all this function,

00:32:00.520 --> 00:32:02.670
you actually don't need to remember
everything that Eric's saying here.

00:32:02.680 --> 00:32:08.560
The tips and tricks section goes through
and enumerates both the new capability

00:32:08.560 --> 00:32:09.630
and some of the other existing stuff.

00:32:09.770 --> 00:32:13.050
So there's a lot of
things at your fingertips.

00:32:13.060 --> 00:32:15.040
Really, navigation at your fingertips.

00:32:15.040 --> 00:32:17.670
Now, if you want to go quickly
to another open editor,

00:32:17.670 --> 00:32:19.740
it's just one keystroke away, right?

00:32:19.790 --> 00:32:22.330
All open editors, Java, Java,
stuff like that.

00:32:22.390 --> 00:32:25.770
So you see all this interaction,
code assist-like, filter as you type,

00:32:25.770 --> 00:32:26.960
this is used heavily.

00:32:27.840 --> 00:32:30.500
So that's, I think, enough for now.

00:32:30.500 --> 00:32:32.430
Well, oh no,
I want to show you one thing,

00:32:32.430 --> 00:32:33.520
and then I will stop.

00:32:33.560 --> 00:32:35.740
How are we doing with the time?

00:32:37.200 --> 00:32:50.000
[Transcript missing]

00:32:53.030 --> 00:32:56.380
Consistently,
the more validation you do as you type,

00:32:56.440 --> 00:32:57.920
the better your code gets.

00:32:57.970 --> 00:33:03.600
So we detect some unused code,
new in 3.0, we detect Java doc problems.

00:33:03.600 --> 00:33:06.380
So when you have a missing tag,
when you have the wrong tag,

00:33:06.380 --> 00:33:07.470
we will flag that.

00:33:07.640 --> 00:33:11.430
And the other thing we have added,
we try to help you as much as we can,

00:33:11.430 --> 00:33:13.600
so why should we stop checking the code?

00:33:13.660 --> 00:33:18.080
We can also help you
checking the commands.

00:33:18.290 --> 00:33:20.060
Okay, you see the weekly line here?

00:33:20.110 --> 00:33:24.200
So our spell checker has found that
in this comment I have mistyped this.

00:33:24.250 --> 00:33:28.200
Control-1 and the same thing,
like Quick Fix cannot only fix Java code,

00:33:28.200 --> 00:33:30.200
it can also help you fix your comments.

00:33:30.200 --> 00:33:34.190
So I change it back to contents
or add it to my dictionary.

00:33:36.640 --> 00:33:42.140
Beyond that, there's JUnit,
there's Ant integration.

00:33:42.140 --> 00:33:47.180
Time for some slide break.

00:33:54.640 --> 00:33:57.790
It is kind of harsh to only let you
demo that little amount of function

00:33:58.090 --> 00:34:00.590
because if you look at the amount of
things that were done in Eclipse 3.0,

00:34:00.590 --> 00:34:05.430
there were on the order of,
if you look at the pile of

00:34:05.430 --> 00:34:10.420
enhancements and bug fixes,
in the last year 10,000

00:34:10.720 --> 00:34:12.480
line items were addressed.

00:34:12.480 --> 00:34:13.620
So lots of things.

00:34:13.620 --> 00:34:15.680
This gives you a flavor
of the biggest ones,

00:34:15.680 --> 00:34:17.150
but lots of stuff occurred.

00:34:17.160 --> 00:34:20.460
So let's put JDT in place again.

00:34:20.460 --> 00:34:23.740
It's a set of plugins built
on top of the platform.

00:34:24.680 --> 00:34:27.230
And what we're going to do now is
look at the plugin architecture

00:34:27.270 --> 00:34:30.630
itself a little bit more closely.

00:34:31.160 --> 00:34:35.240
So everything in Eclipse is a plugin.

00:34:35.260 --> 00:34:37.820
Look at a plugin as a
set of contributions.

00:34:37.820 --> 00:34:39.720
You can look at it ranging
from an HTML editor,

00:34:39.720 --> 00:34:41.850
set of things,
the Java development tools.

00:34:41.880 --> 00:34:43.800
It can be a simple contribution.

00:34:43.920 --> 00:34:47.370
It can be just a menu entry with
an action for that menu entry.

00:34:47.370 --> 00:34:50.060
So the full range of
things can be contributed.

00:34:50.060 --> 00:34:53.640
The plugin defines its implementation,
its prerequisites,

00:34:53.640 --> 00:34:57.870
and it has this ability to
define an extension point,

00:34:57.890 --> 00:35:00.010
which is a named entity.

00:35:00.020 --> 00:35:04.980
So it names a concept that
can be contributed to.

00:35:04.980 --> 00:35:06.740
So we've got a very simple story here.

00:35:06.790 --> 00:35:08.250
Plugins define extension points.

00:35:09.500 --> 00:36:26.600
[Transcript missing]

00:36:32.450 --> 00:36:34.300
WWDC ImageView.

00:36:34.300 --> 00:36:41.000
So the way it helps you to create stuff,
ImageView,

00:36:42.100 --> 00:36:44.800
I want to create the
plugin with the view.

00:36:44.820 --> 00:36:46.440
There is some wizard that
helps you to do that,

00:36:46.440 --> 00:36:49.600
but it generates very little code,
so as we'll see.

00:36:49.620 --> 00:36:51.320
Again,
this is the community helping ourselves

00:36:51.450 --> 00:36:53.240
because we're building a lot of plugins.

00:36:53.240 --> 00:36:55.640
We need to build tools to make it
easier for us to build plugins.

00:36:55.640 --> 00:36:58.930
We've just kind of kept
making this better and better.

00:37:03.300 --> 00:37:06.390
So basically this extension
point model is declarative,

00:37:06.430 --> 00:37:10.470
which means we declare the
information you need to know about

00:37:10.490 --> 00:37:14.980
extension points in an XML file,
which is called the plugin XML.

00:37:14.980 --> 00:37:20.620
And we provide you with ways to
edit this in a convenient way.

00:37:20.620 --> 00:37:23.920
For instance, here we see the
extensions we define here.

00:37:23.920 --> 00:37:28.180
In this case, we'll define one extension,
which is a sample view.

00:37:28.180 --> 00:37:31.380
And you see what the extension has to do.

00:37:31.560 --> 00:37:36.510
It has a name, it has an icon,
it has a category, why this is needed,

00:37:36.740 --> 00:37:40.000
because you want to be able to
present it without having to load

00:37:40.010 --> 00:37:42.800
the code that implements the view.

00:37:42.800 --> 00:37:46.190
So here you see,
that's how we can present views.

00:37:46.220 --> 00:37:48.610
And given the information
we have in the plugin XML,

00:37:48.620 --> 00:37:50.490
we can do that without loading code.

00:37:50.500 --> 00:37:52.280
So where does the code come in?

00:37:52.280 --> 00:37:55.480
There is a class attribute,
and this class attribute

00:37:55.870 --> 00:37:59.740
will be responsible to
implement the actual behavior.

00:37:59.960 --> 00:38:02.320
Once the user has
activated the contribution,

00:38:02.320 --> 00:38:03.290
but not before.

00:38:03.300 --> 00:38:04.920
So of course this is linked.

00:38:05.020 --> 00:38:06.030
Let's look at this code.

00:38:08.100 --> 00:38:10.330
So what, ah,
I haven't told you what I want to build.

00:38:10.540 --> 00:38:11.830
So this is a true story.

00:38:12.040 --> 00:38:14.580
So we were hacking away,
Kent Beck and I were hacking away,

00:38:14.580 --> 00:38:17.850
and he came in one of these Smalltalk,
he had one of these

00:38:17.850 --> 00:38:19.360
Smalltalk retro attacks.

00:38:19.360 --> 00:38:22.590
You know, we want to find an image,
and he said, see, in Smalltalk I would

00:38:22.590 --> 00:38:25.380
have just written a plug,
some code, and would have gotten a view

00:38:25.460 --> 00:38:27.120
which shows me all these images.

00:38:27.120 --> 00:38:29.780
And of course, well,
we can do the Eclipse as well,

00:38:29.780 --> 00:38:31.690
and five minutes later, we had it.

00:38:31.840 --> 00:38:35.090
So I replay this experience now for you,
and I hope I don't make a box,

00:38:35.090 --> 00:38:36.050
any problems.

00:38:36.060 --> 00:38:39.770
So I want to have a table with all
the images that are used in Eclipse.

00:38:39.770 --> 00:38:41.300
So it's all the standard images.

00:38:41.300 --> 00:38:43.840
So that basically two
things you have to know.

00:38:43.840 --> 00:38:45.580
There is a content provider.

00:38:45.580 --> 00:38:49.960
This is the guy who defines what
is the data you show in your view.

00:38:49.960 --> 00:38:54.180
There is the label provider,
and this is the guy that

00:38:54.180 --> 00:38:56.820
knows how to render your data.

00:38:58.350 --> 00:39:02.940
Okay, so currently there's just a string,
one, two, three, not very interesting.

00:39:02.940 --> 00:39:06.100
So what we want to do is we want
to render here all the images.

00:39:06.100 --> 00:39:07.890
So let's go in here.

00:39:09.100 --> 00:39:12.600
So you will recognize some of
the stuff I've shown before.

00:39:12.610 --> 00:39:14.760
New array, list.

00:39:14.810 --> 00:39:17.610
I want to collect all these images.

00:39:18.430 --> 00:39:19.910
Of course, I'm lazy.

00:39:20.020 --> 00:39:21.800
I don't type this stuff myself.

00:39:21.800 --> 00:39:23.260
It's fine.

00:39:23.280 --> 00:39:24.630
Well, I'm still polite.

00:39:24.680 --> 00:39:26.540
I use a collection.

00:39:26.540 --> 00:39:29.400
So then I will iterate over.

00:39:35.300 --> 00:39:37.700
I'm going to iterate over the collection.

00:39:37.700 --> 00:39:44.440
So again, the flavor here is we've
got the template generated,

00:39:44.440 --> 00:39:47.220
the plugin created the view,
and now Erich's just putting

00:39:47.250 --> 00:39:48.880
the contents in for this view.

00:39:49.020 --> 00:39:54.570
So you have a class,
the shared image class,

00:39:54.570 --> 00:39:55.840
that has all these static fields in it.

00:39:55.840 --> 00:39:55.840
You're going to collect all their icons.

00:39:57.300 --> 00:39:58.140
Yes.

00:39:58.140 --> 00:40:01.300
I know I will screw up once, so.

00:40:01.300 --> 00:40:05.300
Where did I screw up?

00:40:05.300 --> 00:40:09.010
I know where.

00:40:21.000 --> 00:40:29.600
[Transcript missing]

00:40:31.880 --> 00:40:37.040
Iterate over the array
with a temporary variable.

00:40:40.360 --> 00:40:48.290
I know there is a class, Shared Images.

00:40:48.290 --> 00:40:48.290
So I go to the class.

00:40:51.700 --> 00:40:56.930
I want to get its fields because all
the images are stored in fields there.

00:40:56.940 --> 00:41:03.410
Get fields.

00:41:07.900 --> 00:41:12.680
"Array type, well,
I'm too tired to type that.

00:41:12.680 --> 00:41:16.900
So let me, Eclipse knows that, yes,
a field, that's right.

00:41:16.900 --> 00:41:20.840
Okay, here we go,
and then we have to add it,

00:41:20.840 --> 00:41:24.920
we have to add it to our list.

00:41:32.030 --> 00:41:32.960
What's the guy?

00:41:33.000 --> 00:41:34.000
Yeah, sure.

00:41:34.020 --> 00:41:36.000
Oh, the array element I want to do, huh?

00:41:36.000 --> 00:41:41.150
So, boring, boring.

00:41:41.160 --> 00:41:43.160
And we return the stuff.

00:41:44.210 --> 00:41:50.810
Return list to...

00:41:54.080 --> 00:41:56.540
So let's do some cleanup here.

00:41:56.540 --> 00:41:57.840
That's a bad name list.

00:41:57.840 --> 00:42:00.000
That's basically fields, right?

00:42:00.000 --> 00:42:00.950
Renaming file.

00:42:00.980 --> 00:42:03.660
This should be fields.

00:42:04.200 --> 00:42:06.370
All right.

00:42:06.860 --> 00:42:09.860
Again, we have some code smell here,
the duplication.

00:42:09.860 --> 00:42:12.390
Let's just extract this quickly.

00:42:15.130 --> 00:42:18.160
What is it?

00:42:18.180 --> 00:42:20.210
So let's just extract this quickly.

00:42:20.260 --> 00:42:25.140
Extract the method.

00:42:26.930 --> 00:42:30.810
So by putting this function
right at your fingertips,

00:42:30.810 --> 00:42:32.800
you're naturally inclined to
clean up your code as you go.

00:42:32.800 --> 00:42:34.200
You refactor, and you will see.

00:42:34.200 --> 00:42:35.800
We manipulate code like plastic.

00:42:35.800 --> 00:42:38.930
So you see again, it has this code,
I have a duplicate code fragment.

00:42:38.930 --> 00:42:40.780
Of course, this will be fixed as well.

00:42:40.800 --> 00:42:44.740
So, okay, now I have to get the image.

00:42:44.740 --> 00:42:51.430
So I will just show you the
object to string should do it.

00:42:53.900 --> 00:42:56.430
And now this code is almost right.

00:42:56.500 --> 00:42:59.970
I want to pass in the name of
the image and it should return

00:43:00.080 --> 00:43:02.100
it from me from this call.

00:43:02.220 --> 00:43:03.770
But it's too specific, this call.

00:43:03.830 --> 00:43:06.040
It has a hard coded parameter.

00:43:06.120 --> 00:43:09.600
So let's fix that and
do object to string.

00:43:12.500 --> 00:43:14.630
We want to here use another refactoring.

00:43:14.690 --> 00:43:16.040
We want to introduce a parameter.

00:43:16.200 --> 00:43:22.700
I want to make this method more general,
so I say here just introduce a parameter.

00:43:28.400 --> 00:43:30.600
And the parameter is called field name.

00:43:30.760 --> 00:43:33.290
Actually I have code assist
as the lamp tells me here,

00:43:33.290 --> 00:43:34.900
but it's not very helpful.

00:43:34.900 --> 00:43:36.400
Field name.

00:43:36.400 --> 00:43:39.860
Okay, so you see what happened is
here an additional parameter

00:43:39.910 --> 00:43:42.300
got added and the call,
the parameter,

00:43:42.460 --> 00:43:45.200
got also fixed up at the call sign.

00:43:45.200 --> 00:43:48.240
So I don't need the
object parameter anymore,

00:43:48.340 --> 00:43:52.590
so we do just the other refactoring,
change method signature.

00:43:54.200 --> 00:43:56.360
And remove this guy.

00:43:56.360 --> 00:43:58.380
OK.

00:43:58.420 --> 00:44:00.260
So I think we should be able to run now.

00:44:00.390 --> 00:44:04.370
So let's do it in the debugger,
just to be careful.

00:44:05.040 --> 00:44:10.080
So we run the workbench on--
did I press the debugger,

00:44:10.080 --> 00:44:10.680
John?

00:44:10.680 --> 00:44:11.480
JOHN WIGAND: Missed it.

00:44:11.480 --> 00:44:13.760
Can't quite focus from here.

00:44:34.800 --> 00:44:36.600
I did do it, right?

00:44:36.600 --> 00:44:38.640
Did you do a search?

00:44:38.640 --> 00:44:40.620
Did I do a search?

00:44:46.300 --> 00:44:48.000
I did do it, right?

00:44:48.000 --> 00:44:50.040
Did you do a search?

00:44:50.040 --> 00:44:52.020
Did I do a search?

00:45:00.890 --> 00:45:04.430
Sample, Category, Sample View,
and I will get this nice

00:45:04.430 --> 00:45:06.230
table with all the images.

00:45:06.790 --> 00:45:08.200
Oops.

00:45:08.200 --> 00:45:11.400
Hey, this is beyond pair programming.

00:45:11.400 --> 00:45:13.480
We program all together.

00:45:15.010 --> 00:45:16.500
Oops.

00:45:16.510 --> 00:45:19.700
Hey, this is beyond pair programming.

00:45:19.700 --> 00:45:20.500
We program all together.

00:45:22.660 --> 00:45:26.600
So we ran out, we got the labels,
but we didn't get the icons themselves.

00:45:26.600 --> 00:45:27.600
The name, right?

00:45:27.600 --> 00:45:33.920
I have to put the name of the field here.

00:45:38.900 --> 00:45:49.300
[Transcript missing]

00:45:53.050 --> 00:45:54.000
Did you notice?

00:45:54.000 --> 00:45:59.710
So I didn't tweet star, right?

00:46:00.630 --> 00:46:03.030
And we chose to do plugin development,
big system,

00:46:03.140 --> 00:46:04.440
hot code in place really works.

00:46:04.440 --> 00:46:05.060
And it can happen.

00:46:05.060 --> 00:46:08.740
Now, depending on the quality of your VM,
I can work for a full day

00:46:08.900 --> 00:46:10.820
without having to restart.

00:46:10.820 --> 00:46:12.310
It really depends on
the strength of your VM.

00:46:12.470 --> 00:46:17.730
I know one VM which is really good that
can almost survive one day of coding.

00:46:17.790 --> 00:46:18.770
So that gives you the flavor.

00:46:18.780 --> 00:46:20.570
Let's move on to the next part.

00:46:20.640 --> 00:46:22.770
But that gives you the flavor,
how easy it is to start in,

00:46:22.830 --> 00:46:27.090
build a plugin, and make things happen.

00:46:27.640 --> 00:46:29.590
So there's more to the
world than just plug-ins.

00:46:29.590 --> 00:46:34.240
There's cases where you want
to be able to attack additional

00:46:34.240 --> 00:46:37.240
function onto a plug-in.

00:46:37.240 --> 00:46:39.900
So logically,
there's the notion of a plug-in,

00:46:39.900 --> 00:46:44.030
but there's fragments where you can
provide platform-specific function,

00:46:44.030 --> 00:46:47.410
you can provide translations
or subsets of translations,

00:46:47.430 --> 00:46:51.430
and there's cases where you need
to be able to provide auxiliary

00:46:51.430 --> 00:46:53.310
function for other means.

00:46:53.320 --> 00:46:56.330
So logically,
we think of this as part of the plug-in,

00:46:56.410 --> 00:46:58.970
but just to show you, there's more there.

00:46:58.970 --> 00:47:02.280
So it's plug-ins plus fragments
equal the logical unit.

00:47:02.340 --> 00:47:06.230
So that's basically what
the runtime operates in,

00:47:06.340 --> 00:47:08.380
plug-ins and fragments.

00:47:08.380 --> 00:47:12.990
Then we have a notion of features,
which is the other way.

00:47:13.110 --> 00:47:15.550
This is the deployment unit.

00:47:15.560 --> 00:47:19.500
So you deploy sets of
plug-ins and fragments.

00:47:19.640 --> 00:47:22.910
This groups them into logical chunks
that make sense at the user level.

00:47:22.990 --> 00:47:26.200
So as developers, we build plug-ins.

00:47:26.200 --> 00:47:29.240
That's too small of a unit
for giving to our end users.

00:47:29.240 --> 00:47:32.320
So we have this notion of
feature for deployment purposes.

00:47:33.720 --> 00:47:35.010
Should I quickly do a feature?

00:47:35.030 --> 00:47:35.610
Two minutes?

00:47:35.620 --> 00:47:37.000
Let's keep moving on this.

00:47:37.000 --> 00:47:38.620
We can come back at the end.

00:47:38.620 --> 00:47:42.650
My next live I will demo it to you.

00:47:43.800 --> 00:47:48.920
So that gives the flavor of how
all our pieces come together.

00:47:48.920 --> 00:47:51.380
And just to reiterate,
everything from the bottom

00:47:51.390 --> 00:47:53.800
to the top of this picture,
we have the runtime,

00:47:53.970 --> 00:47:56.790
everything above that is
constructed out of plugins.

00:47:56.800 --> 00:47:59.970
So the kinds of tools that
Eric was showing here,

00:47:59.970 --> 00:48:04.450
we can leverage those for building SWT,
Jface, all these pieces and

00:48:04.450 --> 00:48:06.390
all the pieces above it.

00:48:09.010 --> 00:48:11.940
So transitioning on to what's new in 3.0.

00:48:11.940 --> 00:48:14.500
Now Eric leaked a lot of
what's new in 3.0 already.

00:48:14.500 --> 00:48:16.180
ERIC GAMMA:
It would have been too boring, right?

00:48:16.180 --> 00:48:18.460
It would have been too boring
not to hide this from you.

00:48:18.460 --> 00:48:21.790
So I-- JOHN WIANDA:
So we didn't want to hold it.

00:48:22.260 --> 00:48:25.810
So we'll give you a flavor
of what happened over the

00:48:25.850 --> 00:48:26.770
course of the last year.

00:48:26.830 --> 00:48:31.820
We started off listening to what
issues are important to the community.

00:48:31.820 --> 00:48:35.200
So back up a year, 15 months,
and the kinds of comments we were

00:48:35.200 --> 00:48:36.280
hearing are things like this.

00:48:36.280 --> 00:48:38.780
I'm lost in all these contributions.

00:48:38.780 --> 00:48:41.920
I love this plug-in story you guys have,
but I've got a lot of plug-ins,

00:48:41.920 --> 00:48:43.410
and now there's more function.

00:48:43.410 --> 00:48:45.490
I can't navigate my
way through all of it.

00:48:45.740 --> 00:48:48.500
So this is really serious,
and we're a tooling platform,

00:48:48.500 --> 00:48:51.100
and what we observe,
what we suffer from is the tools are

00:48:51.170 --> 00:48:53.220
getting bigger and bigger and bigger.

00:48:53.220 --> 00:48:56.000
Once you have thousands of
plug-ins and they all want to

00:48:56.000 --> 00:48:58.280
show their stuff in the UI,
you get lost.

00:48:58.550 --> 00:49:00.220
Consider a business process modeler.

00:49:00.220 --> 00:49:03.230
Since business process modeling
is also plugged into Eclipse,

00:49:03.230 --> 00:49:05.780
the business process model
will be exposed to Java.

00:49:05.780 --> 00:49:08.620
That's kind of not what they want,
in fact.

00:49:08.620 --> 00:49:10.330
It's confusing to them.

00:49:10.400 --> 00:49:13.650
So you have to think about how to scale
up to really large-scale applications,

00:49:13.660 --> 00:49:14.670
and that's the problem.

00:49:15.360 --> 00:49:17.360
So I think that's the problem
that you pointed out to us.

00:49:17.440 --> 00:49:17.860
Yeah.

00:49:17.860 --> 00:49:20.360
The next one,
Eric's already shown us the fix for,

00:49:20.360 --> 00:49:23.400
which is I don't want to be
blocked when I'm doing operation A,

00:49:23.400 --> 00:49:23.880
B, or C.

00:49:23.880 --> 00:49:26.350
So I'm doing searches,
or I'm doing repository synchronizations,

00:49:26.360 --> 00:49:29.700
and I'm stuck waiting all the time.

00:49:29.720 --> 00:49:30.890
So this is in the past.

00:49:30.890 --> 00:49:36.430
People were stuck waiting,
and they wanted to get that fixed.

00:49:38.240 --> 00:49:39.240
- What?

00:49:39.330 --> 00:49:40.130
This can't be true.

00:49:40.290 --> 00:49:44.980
- A year ago,
this statement was being made.

00:49:45.160 --> 00:49:46.930
So people wanted to see more.

00:49:47.080 --> 00:49:48.470
We like what we're seeing.

00:49:48.620 --> 00:49:49.880
You're on a good path.

00:49:50.020 --> 00:49:52.390
We'd like to see more coolness.

00:49:54.300 --> 00:49:55.130
We're here to serve.

00:49:55.200 --> 00:50:01.120
The third class of feedback
is very interesting.

00:50:01.120 --> 00:50:04.960
The community went off and started,
they took Eclipse,

00:50:04.960 --> 00:50:08.940
they were using it as their IDE,
and they said, I really like some of the

00:50:08.940 --> 00:50:10.300
things I'm seeing here.

00:50:10.320 --> 00:50:13.760
So the way the UI presents itself,
this plugin architecture,

00:50:13.760 --> 00:50:16.410
this is something I can
leverage in my own applications.

00:50:16.420 --> 00:50:18.870
So it's great as a tool,
but I'd actually like to

00:50:18.900 --> 00:50:25.940
leverage some of this code as the
basis for my development work.

00:50:26.000 --> 00:50:30.810
So the first few things that
happened is people took the plugins,

00:50:30.820 --> 00:50:34.500
they threw some away,
they modified a bit of code,

00:50:34.500 --> 00:50:37.200
and then they kind of
set this cookbook around.

00:50:37.560 --> 00:50:39.170
to other people, say,
here's the kinds of things we

00:50:39.170 --> 00:50:40.940
needed to do to make this work.

00:50:40.940 --> 00:50:46.300
And we went from that cookbook
into a rich client platform.

00:50:46.300 --> 00:50:49.870
So before we look at
the response point here,

00:50:49.880 --> 00:50:51.600
this is just to give you the flavor.

00:50:51.600 --> 00:50:53.790
There's lots of input and
lots of different ideas.

00:50:53.800 --> 00:50:58.040
So we structured these ideas into a
set of themes that we could work on.

00:50:58.120 --> 00:51:04.160
And the kinds of themes that we
worked on is mature the platform,

00:51:05.040 --> 00:51:08.280
so improve the user experience,
make things more responsive,

00:51:08.280 --> 00:51:09.860
one big area.

00:51:11.270 --> 00:51:13.710
enhance the Java IDE,
which actually has many facets to it.

00:51:13.770 --> 00:51:16.360
Eric,
do you want to talk about the range of

00:51:16.520 --> 00:51:18.450
things you had in mind on the platform?

00:51:18.490 --> 00:51:21.090
It's not just the
things that Eric demoed.

00:51:21.170 --> 00:51:24.360
It's JDT as a platform in
its own right at this point.

00:51:24.440 --> 00:51:24.990
Right.

00:51:25.140 --> 00:51:26.000
I will catch it later.

00:51:26.150 --> 00:51:26.470
Okay.

00:51:26.510 --> 00:51:29.500
So you'll come back to that
and then the rich client piece.

00:51:30.030 --> 00:51:35.040
So we'll walk through these and we may
or may not intersperse a few demos.

00:51:35.060 --> 00:51:36.500
We're actually moving through
the time pretty quickly.

00:51:36.500 --> 00:51:37.800
I will make fast demos.

00:51:37.800 --> 00:51:39.760
OK, so we'll get some fast demos.

00:51:39.760 --> 00:51:43.080
OK, so I'll go very fast in
the description here,

00:51:43.080 --> 00:51:45.100
and then we'll get quick demos.

00:51:45.710 --> 00:51:48.290
So the problem with large products,
now we have to help the

00:51:48.400 --> 00:51:49.480
user find their way into it.

00:51:49.480 --> 00:51:52.320
So it's kind of important how
you welcome them to the product.

00:51:52.360 --> 00:51:54.840
So we all think if the
platform supports that,

00:51:54.840 --> 00:51:58.060
it's even better than just
letting each product invent how

00:51:58.060 --> 00:52:00.260
it wants to welcome its users.

00:52:00.260 --> 00:52:02.440
So that's why we come with
a standard welcome framework

00:52:02.790 --> 00:52:05.990
where others can plug in,
and we support different learning styles.

00:52:05.990 --> 00:52:07.380
Demo in two minutes.

00:52:08.280 --> 00:52:10.420
Cheat sheets, complex workflows.

00:52:10.420 --> 00:52:14.190
Complex products have complex workflows,
like a web service.

00:52:14.190 --> 00:52:18.150
No one likes to go through
12 pages of wizards.

00:52:18.150 --> 00:52:20.180
That's kind of really modeful.

00:52:20.180 --> 00:52:24.630
You want to have a more guided way,
but less modeful way to do complex stuff.

00:52:24.720 --> 00:52:26.430
And that's what we use cheat sheets for.

00:52:26.440 --> 00:52:28.280
Demo in one minute 30.

00:52:28.280 --> 00:52:30.900
And capabilities,
I've already shown you that.

00:52:30.900 --> 00:52:34.200
So the demo you have seen for that, no,
I haven't shown that.

00:52:34.250 --> 00:52:36.930
The problem is exactly the
business process modeler.

00:52:36.980 --> 00:52:38.260
They don't want to see.

00:52:38.260 --> 00:52:39.390
They want to see Java.

00:52:39.400 --> 00:52:41.630
So they want that
Java gets hidden from them.

00:52:41.800 --> 00:52:44.870
Now, but imagine the business process
modeler that learns Java.

00:52:44.870 --> 00:52:47.630
How can they discover that
there is also Java in Eclipse?

00:52:47.680 --> 00:52:49.820
So capabilities are our means to do that.

00:52:53.000 --> 00:52:57.580
Okay, the last one in this improving
the user experience area is

00:52:57.580 --> 00:52:59.000
our work on responsiveness.

00:52:59.000 --> 00:53:01.440
We've already demoed this as
well with the search facilities.

00:53:01.440 --> 00:53:05.150
But basically we're stuck in this modal
world and we got rid of the modality,

00:53:05.150 --> 00:53:05.980
number one.

00:53:06.010 --> 00:53:07.910
Then number two,
we did such a good job of

00:53:07.910 --> 00:53:10.680
getting rid of the modality,
the users didn't realize things

00:53:10.680 --> 00:53:12.140
were happening in the background.

00:53:12.140 --> 00:53:13.270
So then there was, did I do it?

00:53:13.280 --> 00:53:16.040
And then you found the build, build,
build characteristics.

00:53:16.040 --> 00:53:19.350
Then we needed to do another
iteration on how the user experience

00:53:19.370 --> 00:53:21.610
worked to make sure the user was
in control of what was happening,

00:53:21.610 --> 00:53:23.120
they understood how it was working.

00:53:23.120 --> 00:53:25.240
I think in fact that at
least four iterations,

00:53:25.240 --> 00:53:25.650
right?

00:53:25.750 --> 00:53:29.400
So till we got this right,
that we really felt that user in control.

00:53:29.430 --> 00:53:32.740
It was really one of the most
challenging things we have.

00:53:32.740 --> 00:53:35.170
So can I have the screen please?

00:53:35.760 --> 00:53:38.780
Quickly, welcome.

00:53:38.890 --> 00:53:41.080
Imagine, I will not do it now,
you just start up your

00:53:41.120 --> 00:53:43.620
screen for the first time,
so you get the welcome experience.

00:53:43.700 --> 00:53:47.080
The welcome experience is kind of,
you can compute to it,

00:53:47.130 --> 00:53:52.380
you can compute documentation
to overview tutorials for the

00:53:52.380 --> 00:53:55.110
different learning styles.

00:53:56.820 --> 00:53:58.190
Pretty nice eye candy.

00:53:58.270 --> 00:53:59.480
Samples, that's interesting.

00:53:59.480 --> 00:54:02.760
Those samples get fetched
from an update site,

00:54:02.760 --> 00:54:07.380
installed dynamically on your workspace,
so that you can explore them.

00:54:07.390 --> 00:54:10.710
Or if you're just bored of the stuff,
you can just go to the workbench.

00:54:10.720 --> 00:54:12.680
So that's the welcome.

00:54:12.840 --> 00:54:16.660
The nice thing is it's extensible,
you can define and you have a mechanism

00:54:16.720 --> 00:54:18.580
to compute this in the platform.

00:54:18.730 --> 00:54:20.410
Cheat sheets.

00:54:20.730 --> 00:54:24.720
So this is non-modal
multi-step operations.

00:54:24.720 --> 00:54:26.710
So let's do a--

00:54:27.210 --> 00:54:28.620
Hello World application with G-G.

00:54:28.720 --> 00:54:30.100
That's not a typical application.

00:54:30.100 --> 00:54:35.090
Consider making a building a web service,
something really complex, multi-step.

00:54:36.080 --> 00:54:37.100
So here's my cheat sheet.

00:54:37.270 --> 00:54:42.410
Cheat sheets are modeless in a view.

00:54:42.410 --> 00:54:45.400
They guide you through stuff.

00:54:47.500 --> 00:54:50.100
And they're active.

00:54:50.100 --> 00:54:54.220
Some steps, they provide you with actions
that you have to fill in.

00:54:54.220 --> 00:54:58.250
When I create a Hello World project,
I have to create my Hello World project.

00:55:01.620 --> 00:55:03.990
So hello world, finish.

00:55:04.020 --> 00:55:09.150
The nice thing is now
the user is in control.

00:55:09.190 --> 00:55:13.690
Hello, source folder, finish.

00:55:19.660 --> 00:55:21.400
So you see how this basically works,
right?

00:55:21.400 --> 00:55:24.720
You have always access to documentation,
you have active links,

00:55:24.720 --> 00:55:25.620
you know where you're done.

00:55:25.700 --> 00:55:28.140
If you want,
you can go back and revisit the stuff,

00:55:28.180 --> 00:55:28.840
things like that.

00:55:28.840 --> 00:55:31.540
What's nice is it's very easy
to build these cheat sheets.

00:55:31.640 --> 00:55:34.970
It's really mostly a configuration
task and a coding task.

00:55:35.050 --> 00:55:37.460
So basically you describe
in XML what the steps are,

00:55:37.470 --> 00:55:39.840
you define the actions
that should be called out,

00:55:39.970 --> 00:55:42.330
and off you have your cheat sheet.

00:55:42.410 --> 00:55:45.750
Much less programming is involved
in coming up with a wizard,

00:55:45.810 --> 00:55:46.280
okay?

00:55:47.810 --> 00:55:48.390
What was it?

00:55:48.540 --> 00:55:49.700
Capabilities.

00:55:49.700 --> 00:55:50.700
Capabilities next.

00:55:50.700 --> 00:55:52.280
Again, it's your transition capabilities.

00:55:52.280 --> 00:55:55.200
These are all facilities provided
by the platform that plugin

00:55:55.200 --> 00:55:58.700
developers can leverage and that
users gain the advantages of.

00:55:58.700 --> 00:56:03.220
So capabilities are almost too simple in
Eclipse because Eclipse now has about 60,

00:56:03.240 --> 00:56:04.700
70 plugins by now.

00:56:04.700 --> 00:56:10.650
A real rich product can go to 100, 500,
1000 plugins, which is 5,000 features.

00:56:10.750 --> 00:56:12.600
So in Eclipse,
you basically have grouped the

00:56:12.600 --> 00:56:15.570
functionality into capabilities,
development, and team support.

00:56:15.700 --> 00:56:20.420
When I don't use CVS,
I don't want to see CVS in the UI at all.

00:56:20.700 --> 00:56:24.090
So for instance, plugin development,
I will disable it now because when

00:56:24.090 --> 00:56:26.630
I just look at Java development,
I don't want to be bothered

00:56:26.680 --> 00:56:27.690
by plugin development.

00:56:27.700 --> 00:56:29.580
So I disable it.

00:56:29.710 --> 00:56:32.700
And the thing is,
hiding function is easy.

00:56:32.700 --> 00:56:34.660
How does the user discover
it once it's hidden?

00:56:34.780 --> 00:56:38.700
So for fixing that, we have

00:56:38.750 --> 00:56:43.700
I'm going to show you how to use the
plugin project to create a new feature.

00:56:43.700 --> 00:56:45.810
The plugin project is a trigger point.

00:56:45.870 --> 00:56:46.700
I still see it.

00:56:46.700 --> 00:56:47.700
It's intentionally not filtered out.

00:56:47.700 --> 00:56:51.020
But when I say next,
the system will remind me, hey,

00:56:51.030 --> 00:56:53.650
this is actually a capability
you haven't seen yet.

00:56:53.710 --> 00:56:55.640
Do you want me to enable it?

00:56:55.650 --> 00:56:58.660
And when you say yes,
then all the contributions

00:56:58.710 --> 00:56:59.700
will show up in the UI.

00:56:59.700 --> 00:57:02.700
OK, so that's basically how it works.

00:57:02.700 --> 00:57:11.700
So the idea is reduce overload of menus,
toolbars in a feature oriented way.

00:57:11.700 --> 00:57:14.210
Back to the presentation.

00:57:18.290 --> 00:57:20.450
So enhance the JDT we've went
through for the most part.

00:57:20.510 --> 00:57:21.660
So I'm going to go through
this pretty quickly,

00:57:21.660 --> 00:57:23.280
and you can talk as fast as you want.

00:57:23.280 --> 00:57:25.300
And I'm going to keep flicking.

00:57:25.700 --> 00:57:26.680
No, I have to stop there.

00:57:26.710 --> 00:57:27.190
I haven't stopped there.

00:57:27.220 --> 00:57:28.620
Java family, that's another thing.

00:57:28.740 --> 00:57:32.040
Once you have done Java,
you notice when you do development today,

00:57:32.040 --> 00:57:34.370
you have other artifacts
which refer to Java.

00:57:34.550 --> 00:57:36.950
When you do struts development,
you have class names in the

00:57:36.970 --> 00:57:40.920
struts description files,
or when you do a web app or a new JSP.

00:57:41.010 --> 00:57:44.580
So we have thought we
really have to support that.

00:57:44.760 --> 00:57:49.620
So we open up, we allow others to
participate in our stuff.

00:57:49.630 --> 00:57:51.540
And see, I heard it that much.

00:57:51.540 --> 00:57:53.980
I'm talking to the wrong slide.

00:57:54.200 --> 00:57:55.360
Okay, still.

00:57:55.360 --> 00:57:57.790
So we have to handle
JSPs and other stuff.

00:57:57.790 --> 00:58:02.020
Rich API,
we want to make JDT a richer platform.

00:58:02.020 --> 00:58:05.310
If you want to write tools
that manipulate Java source,

00:58:05.310 --> 00:58:06.620
we have extended it.

00:58:06.650 --> 00:58:10.520
We have added abstract syntax tree APIs,
which not only allow you

00:58:10.520 --> 00:58:13.330
to analyze Java code,
but also to modify it.

00:58:13.420 --> 00:58:15.000
We have an AST rewriting API.

00:58:16.150 --> 00:58:19.740
We make our own function
open that you can extend it.

00:58:19.830 --> 00:58:22.130
Quick assist, quick fix,
you can compute to that

00:58:22.130 --> 00:58:23.230
by extension points.

00:58:23.230 --> 00:58:26.620
And what's very important, and that's,
you see, our design style,

00:58:26.620 --> 00:58:31.020
we start pioneering new stuff in JDT,
and over time we push it down

00:58:31.130 --> 00:58:35.530
into the language-neutral layer
so that others can also be cool.

00:58:35.540 --> 00:58:38.330
So the linking stuff,
you have shown the linked editing,

00:58:38.330 --> 00:58:40.960
it was pushed down one layer
below so that other tools,

00:58:40.960 --> 00:58:43.750
like the C development tools
that you also have in Eclipse,

00:58:43.810 --> 00:58:45.390
can leverage this as well.

00:58:48.580 --> 00:58:54.020
Refactoring support, just the same theme,
participation, enhanced JDT,

00:58:54.150 --> 00:58:55.340
we have seen that live.

00:58:55.420 --> 00:58:58.390
We've seen these as well.

00:58:58.420 --> 00:58:58.940
We have seen this.

00:59:02.570 --> 00:59:04.860
So we didn't talk about this one yet.

00:59:04.970 --> 00:59:10.040
The work for J2SE 1.5 has been ongoing
throughout the 3.0 development cycle.

00:59:10.170 --> 00:59:13.930
We decided somewhere in the spring
timeframe that it didn't make sense

00:59:14.000 --> 00:59:16.890
to try to release that with 3.0,
but the work's in progress.

00:59:16.930 --> 00:59:17.950
You can download it.

00:59:17.970 --> 00:59:23.230
We've codenamed the effort Cheetah,
and we're going to be working on

00:59:23.230 --> 00:59:28.660
it from when we started early this
year through the summer and fall.

00:59:29.060 --> 00:59:32.140
The primary effort so far
has been in the compiler and

00:59:32.140 --> 00:59:35.650
extending the compiler region,
but it turns out there's lots

00:59:35.670 --> 00:59:37.000
of tooling opportunities here.

00:59:37.000 --> 00:59:38.020
This was one week ago.

00:59:38.020 --> 00:59:40.280
So one week ago,
most of it was focused on compiler,

00:59:40.280 --> 00:59:43.670
but since I've shipped 3.0,
everybody was eager to do new stuff.

00:59:43.710 --> 00:59:46.490
So I guess by midnight tonight,
if you go to the update site,

00:59:46.620 --> 00:59:49.720
you get not only a core compiler plugin,
but also a UI plugin.

00:59:49.720 --> 00:59:52.290
And with this,
you can already browse code

00:59:52.290 --> 00:59:56.920
which uses 1.2.5 features,
and I also checked the JCK coverage,

00:59:56.920 --> 01:00:01.510
and we are now at 97%.
So it's tremendous progress.

01:00:01.510 --> 01:00:04.840
But the nice thing is we leverage
our plugin story to not risk

01:00:04.970 --> 01:00:06.980
the main 3.0 stream for now.

01:00:07.020 --> 01:00:10.130
But now after 3.0,
we will immediately merge the

01:00:10.130 --> 01:00:12.690
streams and work on the 1.5 support.

01:00:15.160 --> 01:00:17.090
So we've done this demo already.

01:00:17.140 --> 01:00:20.340
So we'll move on to
the rich client piece.

01:00:21.430 --> 01:00:24.780
A wide range of comments from
the community on this one.

01:00:24.790 --> 01:00:27.250
So the first is,
I've got all these plug-ins

01:00:27.560 --> 01:00:29.770
in Eclipse more than I need,
so I'd like to be able to

01:00:29.770 --> 01:00:30.790
get rid of some of them.

01:00:30.940 --> 01:00:33.830
The second,
although you've given me too much,

01:00:33.920 --> 01:00:35.920
some of these are not IDE specific.

01:00:35.940 --> 01:00:38.150
So we've kind of talked about
optional plug-ins already so

01:00:38.150 --> 01:00:39.420
you can get the flavor of that.

01:00:39.540 --> 01:00:41.640
And the third is just the request.

01:00:41.640 --> 01:00:44.690
I'd really like to be able
to build my application.

01:00:45.190 --> 01:00:46.640
on top of Eclipse.

01:00:46.640 --> 01:00:47.380
So what did we do?

01:00:47.380 --> 01:00:50.440
I'm just going to give you a little
bit of a philosophy statement here,

01:00:50.440 --> 01:00:52.200
and then we'll run a brief demo.

01:00:52.200 --> 01:00:54.780
First,
we remember we're a tools platform.

01:00:54.780 --> 01:00:56.580
We started off tool-centric.

01:00:56.620 --> 01:00:59.270
We didn't want to lose that,
so that's quite important.

01:00:59.550 --> 01:01:02.160
However,
some of our decisions were IDE-centric,

01:01:02.160 --> 01:01:05.100
so we wanted to remove that
predisposition and move

01:01:05.100 --> 01:01:06.350
that to a separate layer.

01:01:06.350 --> 01:01:09.500
So we'll have a generic workbench
with a separate layer that has the

01:01:09.540 --> 01:01:11.810
IDE specific characteristics in there.

01:01:11.810 --> 01:01:14.890
An implementation detail,
we also knew about projects.

01:01:14.890 --> 01:01:16.550
We'll projects don't make sense.

01:01:16.550 --> 01:01:19.570
That's the wrong data model
for a rich client application,

01:01:19.580 --> 01:01:21.120
so we needed to break that linkage.

01:01:22.790 --> 01:01:25.200
and then provide optional components.

01:01:25.340 --> 01:01:26.420
So that's what we set out to do.

01:01:26.420 --> 01:01:29.860
The simple version,
given we have no time anyway,

01:01:29.860 --> 01:01:33.540
is we just took the UI plugin,
carved it in half.

01:01:33.610 --> 01:01:37.920
So we took it, it was IDE specific,
we made it a generic workbench,

01:01:38.100 --> 01:01:41.080
so a generic component,
and then we layered on top of

01:01:41.080 --> 01:01:43.690
that the IDE specific stuff.

01:01:46.220 --> 01:01:47.630
So my name is there?

01:01:47.750 --> 01:01:49.210
Your name's on that one.

01:01:49.390 --> 01:01:51.960
So basically what I will show
you is now how you can liposuct

01:01:51.960 --> 01:01:56.430
Eclipse to run really simple stuff,
but still having all the Eclipse

01:01:56.430 --> 01:01:59.120
plugin infrastructure in your hands.

01:01:59.230 --> 01:02:04.500
So I will run this famous HP 35.

01:02:04.680 --> 01:02:07.000
HP 35 is a famous calculator.

01:02:07.030 --> 01:02:08.640
Mind you, it's kind of a computer museum.

01:02:08.640 --> 01:02:10.630
It can even calculate.

01:02:10.700 --> 01:02:14.040
Eight, nine, enter, nine plus.

01:02:14.290 --> 01:02:16.630
Great.

01:02:16.780 --> 01:02:19.900
What you see here,
that's an Eclipse application.

01:02:19.900 --> 01:02:22.140
But you see there is
no project management,

01:02:22.140 --> 01:02:22.700
there's no build.

01:02:22.700 --> 01:02:26.560
It's really liposucted
to vanilla application,

01:02:26.560 --> 01:02:27.330
right?

01:02:27.380 --> 01:02:28.500
So you have the choice.

01:02:28.580 --> 01:02:31.060
You can basically liposuct
it to almost nothing.

01:02:31.060 --> 01:02:34.480
And the nice thing about our rich client
platform story is everything is optional.

01:02:34.480 --> 01:02:35.530
You want to have help?

01:02:35.620 --> 01:02:35.890
Sure.

01:02:36.250 --> 01:02:37.320
Install the help plugin.

01:02:37.320 --> 01:02:39.290
You want to get some resources support?

01:02:39.390 --> 01:02:41.020
Install the resources plugin.

01:02:41.020 --> 01:02:44.780
So you can grow and there's a spectrum of
functionality you can get from Eclipse.

01:02:44.780 --> 01:02:48.250
But the key point is you
always get the component model,

01:02:48.250 --> 01:02:49.910
the plugin model with your application.

01:02:49.920 --> 01:02:52.330
Which is, I think,
a really good thing to have.

01:02:52.410 --> 01:02:55.520
So the last thing,
I'm not sure whether I'm

01:02:55.520 --> 01:02:59.830
navigating really advanced.

01:03:01.460 --> 01:03:04.090
What I want to show you
is we have a new runtime.

01:03:04.310 --> 01:03:10.140
We have built the runtime in 3.0 on
top of a standard component model,

01:03:10.280 --> 01:03:11.000
OSGI.

01:03:11.040 --> 01:03:13.780
And the idea was for 3.0,
we want to have dynamic plugins,

01:03:13.830 --> 01:03:16.930
which means plugins which
can dynamically come and go.

01:03:16.990 --> 01:03:18.010
And I will show you that.

01:03:18.040 --> 01:03:22.580
So first, let's look at the plugins
which we currently have.

01:03:23.180 --> 01:03:26.980
Okay, we see we have 15 plugins
now installed in OSGI.

01:03:26.980 --> 01:03:28.550
This is called a bundle.

01:03:28.550 --> 01:03:34.210
And I will now go in and install another
one and then see what happens in the UI.

01:03:34.210 --> 01:03:37.690
So I need to file one.

01:03:41.770 --> 01:03:44.000
So one of the characteristics
we got when we moved to OSGI is

01:03:44.000 --> 01:03:48.400
the ability to dynamically add
plug-ins and technically we're able

01:03:48.400 --> 01:03:49.840
to remove plug-ins from the system.

01:03:49.930 --> 01:03:51.770
So what Eric's doing
now is he's going in,

01:03:51.770 --> 01:03:55.080
pointing to an area in the file
system saying there's a plug-in here,

01:03:55.080 --> 01:03:57.140
let's install it please.

01:03:57.210 --> 01:04:00.960
So if he can type the path correctly.

01:04:01.040 --> 01:04:03.130
Bundle ID 16.

01:04:04.140 --> 01:04:05.250
Now we start it.

01:04:05.300 --> 01:04:06.680
And you have to watch over here.

01:04:06.860 --> 01:04:09.090
So basically I have done a
plug-in which extends the

01:04:09.150 --> 01:04:11.100
calculator to the new operator.

01:04:11.100 --> 01:04:14.780
So I start 16.

01:04:15.900 --> 01:04:17.340
Boof.

01:04:17.340 --> 01:04:19.240
Okay, dynamically the plugin gets loaded.

01:04:19.240 --> 01:04:22.440
Well, we always load plugins dynamically,
but we now have mechanisms to

01:04:22.440 --> 01:04:27.140
also update the presentation,
the UI of your plugins dynamically.

01:04:27.140 --> 01:04:32.090
And if John lets me,
I even calculated it once.

01:04:34.110 --> 01:04:34.940
Yes, you're right.

01:04:34.970 --> 01:04:36.340
Multiply with zero.

01:04:36.340 --> 01:04:37.900
Okay.

01:04:37.900 --> 01:04:39.330
You should have stopped me.

01:04:39.450 --> 01:04:41.090
Very good.

01:04:41.110 --> 01:04:45.420
Let's go back to the slides.

01:04:47.970 --> 01:04:50.840
So a reminder,
Eclipse 3.0 available today.

01:04:51.060 --> 01:04:54.860
Turns out the final bytes went up
on Friday and they're available

01:04:54.860 --> 01:04:56.200
for everyone to put to use.