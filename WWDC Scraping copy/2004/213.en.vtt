WEBVTT

00:00:16.250 --> 00:00:22.000
We're going to be talking about
changes to QuickTime Audio today.

00:00:22.000 --> 00:00:24.800
For those of you who, like me,
are having a little bit of deja vu,

00:00:24.800 --> 00:00:27.390
we stood in this room a year
ago and talked about changes

00:00:27.430 --> 00:00:30.880
in QuickTime Audio that we
intended to ship in Panther.

00:00:30.880 --> 00:00:34.340
We're going to be talking about
some of those again today because

00:00:34.340 --> 00:00:37.560
we didn't actually ship them
in Panther for various reasons.

00:00:37.610 --> 00:00:39.940
We will be shipping them in Tiger,
but what we're shipping in

00:00:39.940 --> 00:00:42.120
Tiger is a lot more than what
we were talking about last year,

00:00:42.120 --> 00:00:44.550
and you'll see that as we carry on.

00:00:45.620 --> 00:00:47.540
Okay, we're finally built on core audio.

00:00:47.540 --> 00:00:50.070
Just like the video pipeline
is being rebuilt on top of

00:00:50.240 --> 00:00:52.990
core video and core image,
we're rebuilding on top of core

00:00:52.990 --> 00:00:56.180
audio and we're doing lots of
good integration work there.

00:00:56.180 --> 00:00:58.690
We're going to be supporting
high resolution audio.

00:00:58.690 --> 00:01:00.810
We'll be talking about
that in a little bit.

00:01:02.650 --> 00:01:04.900
And we're going to be giving
you some great movie-level

00:01:04.900 --> 00:01:07.120
audio controls and access,
which is something you

00:01:07.120 --> 00:01:09.190
really haven't had before.

00:01:10.590 --> 00:01:13.780
So high resolution audio
up to 192 kilohertz.

00:01:13.780 --> 00:01:15.140
We could probably go higher.

00:01:15.140 --> 00:01:16.720
We certainly haven't
put any limits on it,

00:01:16.730 --> 00:01:19.500
but that's where we're
headed in this release.

00:01:19.540 --> 00:01:21.150
True 24-bit support.

00:01:21.160 --> 00:01:25.180
Also true 32-bit float support.

00:01:25.230 --> 00:01:28.800
If you go above that to 32-bit
integer or 64-bit float,

00:01:28.840 --> 00:01:31.500
we do all our work in 32-bit float
'cause we're using core audio

00:01:31.500 --> 00:01:35.180
and that's the way that works,
but 24-bit throughout.

00:01:35.180 --> 00:01:39.810
Up to 24 channels, and I say and beyond,
because again, there's no architectural

00:01:39.810 --> 00:01:40.720
limitation there.

00:01:40.720 --> 00:01:42.820
You can have as many
channels as you want.

00:01:42.860 --> 00:01:46.020
And also surround sound
channel configurations,

00:01:46.020 --> 00:01:49.730
which you'll be hearing a lot of today
and you heard as you were coming in.

00:01:50.780 --> 00:01:55.470
We're unlocking the power
of Core Audio for you.

00:01:55.790 --> 00:01:57.080
Core Audio is all about timestamps.

00:01:57.080 --> 00:02:00.460
If you use Core Audio at all,
you got timestamps coming out your ears.

00:02:00.490 --> 00:02:04.630
We're taking advantage of that just
like Core Video and Core Image and

00:02:04.690 --> 00:02:08.360
the new video stack is getting
timestamps through the stack.

00:02:08.360 --> 00:02:09.980
We're getting timestamps
through the stack.

00:02:10.020 --> 00:02:12.640
We're going to be
completely synchronized.

00:02:12.700 --> 00:02:15.080
We're leveraging audio units.

00:02:15.090 --> 00:02:19.350
We use audio units in our rendering
chain and between the two,

00:02:19.350 --> 00:02:22.700
between QuickTime and Core Audio,
you have the foundation

00:02:22.700 --> 00:02:24.110
for your next killer app.

00:02:25.750 --> 00:02:28.140
So what we're going to learn today,
we're going to talk about enhancing

00:02:28.140 --> 00:02:33.350
your application to do audio playback,
audio capture, and audio export.

00:02:33.490 --> 00:02:37.900
So let's talk a little
bit about audio playback.

00:02:38.100 --> 00:02:40.610
Pre-Tiger multichannel.

00:02:44.190 --> 00:02:44.980
It's more than one.

00:02:45.000 --> 00:02:49.100
It's twice as many as one.

00:02:49.210 --> 00:02:52.220
Okay, so what we had was every
track in the movie could,

00:02:52.220 --> 00:02:56.080
every soundtrack in the movie
could have one or two channels.

00:02:56.160 --> 00:02:59.290
A two-channel track implied
that it was left/right stereo,

00:02:59.430 --> 00:03:00.100
of course.

00:03:00.100 --> 00:03:03.100
Movies could have one
or more soundtracks,

00:03:03.100 --> 00:03:05.790
which sounds like you might
be able to do multi-channel,

00:03:05.790 --> 00:03:09.330
but no, actually,
they all just played to the

00:03:09.330 --> 00:03:11.550
device as stereo or mono.

00:03:12.380 --> 00:03:13.620
So, new multi-channel in Tiger.

00:03:13.620 --> 00:03:14.610
We're doing great.

00:03:14.750 --> 00:03:16.260
Track's going to have
any number of channels.

00:03:18.070 --> 00:03:22.570
We use a new sound description
extension that contains a core

00:03:22.570 --> 00:03:28.810
audio channel layout to assign those
channels to individual speakers.

00:03:29.610 --> 00:03:33.440
For example, if you've got a 5.1 movie,
now some of you guys might

00:03:33.440 --> 00:03:35.270
not know what 5.1 is.

00:03:35.350 --> 00:03:39.360
5.1 is five channels, which is center,
left and right, left and right rear.

00:03:39.360 --> 00:03:40.180
That's the five.

00:03:40.180 --> 00:03:42.880
And then the .1 is low frequency
effects and a subwoofer.

00:03:42.880 --> 00:03:44.050
So it's six channels.

00:03:44.050 --> 00:03:46.770
You could have...

00:03:46.900 --> 00:03:57.900
[Transcript missing]

00:03:58.120 --> 00:03:59.500
You could have six one-channel tracks.

00:03:59.500 --> 00:04:02.380
Each track in its sound
description could say,

00:04:02.380 --> 00:04:06.890
"I'm left, I'm left surround, I'm LFE."

00:04:07.090 --> 00:04:10.340
You could have a five-channel track
for the five speakers in the room and

00:04:10.760 --> 00:04:14.830
a one-channel LFE track that maybe was
encoded at a lower sample rate because

00:04:14.830 --> 00:04:16.480
it's only got low frequencies in it.

00:04:16.690 --> 00:04:17.780
You can save some space there.

00:04:21.280 --> 00:04:24.300
Track order in the movie is
not important because all your

00:04:24.300 --> 00:04:25.400
channel assignments are labeled.

00:04:25.420 --> 00:04:28.570
If you've got mono and stereo tracks,
one and two channel

00:04:28.660 --> 00:04:29.950
tracks without labels,
of course,

00:04:30.000 --> 00:04:33.340
we'll assume they're mono and stereo
as we've always assumed before.

00:04:33.340 --> 00:04:35.160
Are we downmix when necessary?

00:04:35.160 --> 00:04:36.040
This is kind of cool.

00:04:36.040 --> 00:04:37.520
Core Audio gives us this capability.

00:04:37.520 --> 00:04:40.550
If you've got a multi-channel
surround movie and you're

00:04:40.550 --> 00:04:43.190
playing it on a stereo speakers,
like maybe you're just

00:04:43.190 --> 00:04:46.180
listening on your headphones,
we'll mix down to stereo appropriately.

00:04:47.460 --> 00:04:50.070
If you're playing 5.1 audio
on a quadraphonic system,

00:04:50.150 --> 00:04:52.860
you only have four speakers,
we'll do the appropriate mix.

00:04:54.860 --> 00:04:58.010
So let me do a demo of
multi-channel playback.

00:04:58.210 --> 00:05:01.770
Switch over to demo two.

00:05:07.360 --> 00:05:11.030
What I want to do is I want to
play one of the trailers that we

00:05:11.120 --> 00:05:14.570
got that's got full-on 5.1 audio.

00:05:14.570 --> 00:05:19.190
But first, I would like to play you the
stupid movie for the year,

00:05:19.700 --> 00:05:23.510
which is a little documentary
on the making of the trailers.

00:08:56.700 --> 00:08:58.210
So now let's see one of those trailers.

00:08:58.240 --> 00:09:02.650
Our poor intern had no idea what she
was getting into when she came here.

00:09:06.800 --> 00:09:08.260
Okay, here is one of those.

00:09:08.260 --> 00:09:13.860
In just a moment, you'll hear the audio.

00:09:24.800 --> 00:09:27.530
Seven days ago,
one of my satellites over in

00:09:27.530 --> 00:09:30.940
Antarctica discovered a pyramid.

00:09:32.100 --> 00:09:34.260
Where exactly on the ice is this?

00:09:34.260 --> 00:09:36.200
It's not on the ice.

00:09:36.200 --> 00:09:38.750
It's 2,000 feet under it.

00:09:43.300 --> 00:09:44.300
Let's make history.

00:09:44.300 --> 00:09:45.300
Oh my god.

00:09:45.300 --> 00:09:50.460
Whoever built this pyramid
believed in ritual sacrifice.

00:10:16.400 --> 00:10:18.390
Did you say this room was called?

00:10:18.400 --> 00:10:22.350
Sacrificial chamber.

00:11:43.040 --> 00:11:45.970
Okay, so let's take a look at what's
inside this movie for a second.

00:11:46.130 --> 00:11:48.310
What we have here

00:11:48.690 --> 00:11:51.100
We actually have three
stereo tracks due to,

00:11:51.100 --> 00:11:53.230
well not stereo,
but three two-channel tracks

00:11:53.230 --> 00:11:55.410
due to the interesting way
we had to capture this stuff.

00:11:55.480 --> 00:11:57.880
You see,
one of them's got left and right,

00:11:57.880 --> 00:12:00.650
one of them got center and LFE,
and the other one's got left

00:12:00.650 --> 00:12:01.700
surround and right surround.

00:12:01.700 --> 00:12:04.700
When we mix that all together,
send it out to the right speakers,

00:12:04.700 --> 00:12:05.440
no problem.

00:12:06.820 --> 00:12:10.690
Woo, that was intense.

00:12:11.290 --> 00:12:15.310
Okay, so let me show you a
little bit of something of

00:12:15.790 --> 00:12:16.500
Channel mapping.

00:12:16.500 --> 00:12:17.320
Here's a little piece.

00:12:17.320 --> 00:12:20.560
We'll probably want to play
the rest of this piece.

00:12:20.560 --> 00:12:22.350
Yes?

00:12:24.850 --> 00:12:35.670
and Greg Chapman, Brad Ford,
Guillermo Ortiz, Jeff Brown, Paul Robins

00:12:38.700 --> 00:12:49.500
[Transcript missing]

00:12:58.000 --> 00:13:36.500
[Transcript missing]

00:13:39.100 --> 00:13:41.440
Okay, now we're talking.

00:13:41.440 --> 00:13:43.200
Whoops, where'd my mouse go?

00:13:43.210 --> 00:13:47.670
Okay,
now see if that ended up over there.

00:13:49.880 --> 00:13:51.200
Oh, it was over there.

00:13:51.200 --> 00:13:51.990
Woo-hoo.

00:13:51.990 --> 00:13:52.630
Three cheers.

00:13:52.640 --> 00:13:59.240
So we can... The interesting
thing there is the player,

00:13:59.240 --> 00:14:02.490
all it's doing is it pulls the
sample description out of the track,

00:14:02.560 --> 00:14:05.960
sets in the channel layout,
and I'll show you the very simple

00:14:05.960 --> 00:14:09.280
APIs for doing that in a little bit
and saves it back out to the movie,

00:14:09.280 --> 00:14:11.900
and then it gets sent to
the appropriate channels.

00:14:11.900 --> 00:14:15.720
Okay, let's go back to slides.

00:14:19.810 --> 00:14:22.180
Can we go back to slides?

00:14:26.100 --> 00:14:27.640
There we go.

00:14:27.680 --> 00:14:28.100
Excellent.

00:14:28.100 --> 00:14:28.850
So how do we do that?

00:14:28.850 --> 00:14:31.290
There's movie file format changes.

00:14:31.300 --> 00:14:35.080
And as you've heard in some of the
other sessions and you'll hear again

00:14:35.120 --> 00:14:38.250
in more of the sessions to come,
we are evolving the movie file

00:14:38.250 --> 00:14:42.260
format to make it a richer,
more capable container for the new kinds

00:14:42.260 --> 00:14:45.520
of video and audio that are coming along.

00:14:45.520 --> 00:14:49.440
So we've had to make file format changes,
but what we're going to do--what

00:14:49.440 --> 00:14:53.230
we're doing is giving you APIs that
hide these changes from you so that

00:14:53.230 --> 00:14:55.320
you don't have to deal with it.

00:14:55.320 --> 00:14:56.490
We got a new sound description.

00:14:56.610 --> 00:14:59.150
Obviously, we have lots of different
things to tell you about the

00:14:59.220 --> 00:15:02.890
audio in the sound description,
so we've had to come up with a new one.

00:15:04.230 --> 00:15:07.700
This new sound description version
actually borrows heavily from the

00:15:07.700 --> 00:15:11.890
AudioStream Basic Description,
which is colloquially known as the ASBD,

00:15:11.990 --> 00:15:14.260
because I can never figure
out which word comes where.

00:15:14.260 --> 00:15:17.250
That's Core Audio's way
of describing audio.

00:15:19.240 --> 00:15:22.230
There's a new optional sound
description extension where we

00:15:22.230 --> 00:15:24.300
put the audio channel layout,
which tells you where the sound

00:15:24.340 --> 00:15:25.280
goes to the different speakers.

00:15:28.260 --> 00:15:31.100
There's processing changes,
not just file format changes.

00:15:31.160 --> 00:15:32.660
We have a new sound media handler.

00:15:32.680 --> 00:15:35.600
We've rewritten it,
hosting it on Core Audio instead

00:15:35.600 --> 00:15:36.960
of on the Sound Manager.

00:15:37.970 --> 00:15:39.520
We do a multi-level mix.

00:15:39.520 --> 00:15:41.940
In the old days,
every track would get played

00:15:41.940 --> 00:15:44.720
independently to the sound
manager and would get mixed

00:15:44.720 --> 00:15:46.480
completely out of our control.

00:15:46.480 --> 00:15:48.150
We had no control over it at all.

00:15:48.160 --> 00:15:51.270
Now, there are multiple
channels in each track.

00:15:51.270 --> 00:15:55.320
There's multiple tracks in each
movie and there's multiple movies

00:15:55.320 --> 00:15:57.940
in your application's presentation.

00:15:58.940 --> 00:16:03.180
We control every single point of
that mix and we use Core Audio's

00:16:03.510 --> 00:16:07.230
Matrix Mixer audio unit for that
and they do a wonderful job.

00:16:07.410 --> 00:16:08.890
It's really great.

00:16:11.220 --> 00:16:12.520
Okay, how do you do that?

00:16:12.740 --> 00:16:13.590
This is how you do that.

00:16:13.740 --> 00:16:15.680
No changes required in your application.

00:16:15.700 --> 00:16:19.050
If I had MoviePlayer
1.0 on a floppy here,

00:16:19.110 --> 00:16:23.880
and if I had a floppy drive,
and if we shipped QuickTime 6.6 on OS 7,

00:16:23.880 --> 00:16:26.750
it would be able to play
multi-channel audio.

00:16:26.750 --> 00:16:28.860
It would have been a great demo.

00:16:32.140 --> 00:16:34.850
Okay, let's talk a little bit about
these new APIs we're giving you.

00:16:34.860 --> 00:16:38.980
You don't have to change your app at all,
but if you want to leverage these

00:16:38.980 --> 00:16:43.340
new capabilities in a more rich way,
here you go.

00:16:43.340 --> 00:16:46.710
We're giving you easy movie
audio access and control

00:16:46.710 --> 00:16:50.620
instead of what we had before,
which was you basically had to

00:16:50.620 --> 00:16:53.160
control each track individually.

00:16:53.160 --> 00:16:56.480
There was sort of an assumption there
that there would only be one soundtrack,

00:16:56.480 --> 00:16:59.180
but if there's more than one,
you could control them too.

00:16:59.180 --> 00:17:02.060
We're letting you talk about
the movie audio directly now.

00:17:02.220 --> 00:17:04.210
So, we've got movie audio parameters.

00:17:04.460 --> 00:17:05.020
Simple stuff.

00:17:05.120 --> 00:17:08.120
You set the gain, you can mute it,
you can set the balance.

00:17:08.120 --> 00:17:10.460
If you've got a
multi-channel output device,

00:17:10.460 --> 00:17:13.280
you can set the fade so you can
move it from the front of the

00:17:13.280 --> 00:17:15.050
room to the back of the room.

00:17:19.340 --> 00:17:20.380
Okay, volume metering.

00:17:20.520 --> 00:17:23.390
We let you do this
before on a track level,

00:17:23.470 --> 00:17:26.290
but never like this,
where you can just get the movies,

00:17:26.290 --> 00:17:29.760
volume meters, you know,
one for each channel.

00:17:31.430 --> 00:17:33.150
Frequency band metering.

00:17:33.260 --> 00:17:35.600
We kind of had this
before Player used it.

00:17:35.650 --> 00:17:39.640
It worked as Player used it,
and that was about it.

00:17:40.260 --> 00:17:43.360
Here, you set any number of bands.

00:17:43.400 --> 00:17:44.440
We'll lay them out for you.

00:17:44.440 --> 00:17:48.150
You can ask what the frequencies were,
and then you get the frequency levels,

00:17:48.150 --> 00:17:51.190
and you'll get frequency levels
for every band for every channel

00:17:51.190 --> 00:17:52.540
and use the ones you want.

00:17:52.540 --> 00:17:54.990
Pretty slick.

00:17:58.600 --> 00:18:01.510
You have to do a certain
move or it doesn't work.

00:18:01.580 --> 00:18:03.400
Okay, an audio context.

00:18:03.400 --> 00:18:07.020
As you may have heard in the previous
session about visual context,

00:18:07.020 --> 00:18:08.860
we have an audio context as well.

00:18:08.860 --> 00:18:12.810
An audio context is an abstraction
for a connection to the output

00:18:12.810 --> 00:18:15.200
device that's playing your audio.

00:18:15.200 --> 00:18:18.720
It is not an abstraction
for the device itself.

00:18:18.800 --> 00:18:21.040
It's an abstraction for a
connection to the device.

00:18:21.040 --> 00:18:25.660
So, you create an audio context
for a core audio device.

00:18:26.620 --> 00:18:28.280
You create one for each movie.

00:18:28.280 --> 00:18:30.090
Remember,
this is a connection to the device,

00:18:30.120 --> 00:18:32.220
so each movie has its own
connection to the device.

00:18:33.900 --> 00:18:35.800
You can set movie audio context.

00:18:35.880 --> 00:18:38.050
If you were in the last session,
they talked about new movie from

00:18:38.160 --> 00:18:42.700
properties where you could actually
instantiate a movie already

00:18:42.700 --> 00:18:43.970
playing to a visual context.

00:18:44.040 --> 00:18:45.780
You can do that with an
audio context as well.

00:18:45.780 --> 00:18:49.000
In that same API,
you can say use this visual context,

00:18:49.000 --> 00:18:50.560
use this audio context.

00:18:51.110 --> 00:18:55.560
You use this instead of the old media
set sound output component because we're

00:18:55.560 --> 00:18:57.160
not playing to the sound manager anymore.

00:18:57.160 --> 00:19:00.780
And it's at the movie level,
not at the media level,

00:19:00.780 --> 00:19:03.730
which is kind of a
weird place to do that.

00:19:04.380 --> 00:19:05.260
Okay, here's a good one.

00:19:05.260 --> 00:19:06.420
Movie audio extraction.

00:19:06.420 --> 00:19:10.620
Here's a great way to get
uncompressed audio out of a movie.

00:19:12.530 --> 00:19:16.570
You tell me what PCM format you
want and what the channel layout is.

00:19:16.570 --> 00:19:18.380
It's kind of like you're
pretending to be a device,

00:19:18.380 --> 00:19:18.820
right?

00:19:18.820 --> 00:19:21.430
You're a device,
you've got a particular set of channels,

00:19:21.430 --> 00:19:24.570
I've got left, right, and center,
or whatever you've got,

00:19:24.600 --> 00:19:28.010
and I want 24-bit integer,
or I want 32-bit float.

00:19:28.030 --> 00:19:32.890
And we will mix all the soundtracks
to that format and hand it to you.

00:19:35.550 --> 00:19:38.920
It's a bridge between QuickTime and
Core Audio so that if you've

00:19:39.030 --> 00:19:41.650
got Core Audio processing
you want to do in your app,

00:19:41.740 --> 00:19:44.560
you're a Core Audio guy,
you've got lots of this Core Audio stuff

00:19:44.560 --> 00:19:47.150
you know how to do with audio
units and all that cool stuff,

00:19:47.150 --> 00:19:51.350
you can get audio out of QuickTime to
feed into your audio unit chain

00:19:51.350 --> 00:19:53.590
or whatever it is you're doing.

00:19:53.600 --> 00:19:57.710
You use an AudioStream basic description,
which is a Core Audio type,

00:19:57.820 --> 00:20:01.300
to specify the format and it
produces an audio buffer list,

00:20:01.300 --> 00:20:04.840
which is a Core Audio structure
for passing audio around.

00:20:04.840 --> 00:20:07.560
So it just bridges that gap.

00:20:10.120 --> 00:20:13.060
Okay, we've got a begin and an end
call to begin the extraction.

00:20:13.060 --> 00:20:16.060
We've got the standard
QuickTime set property,

00:20:16.060 --> 00:20:18.060
get property, get property info trio.

00:20:18.060 --> 00:20:21.150
Here's the properties
you can set and get.

00:20:21.190 --> 00:20:23.090
The audio stream basic description.

00:20:23.090 --> 00:20:23.920
It has to be PCM.

00:20:23.920 --> 00:20:26.550
We're not going to compress
audio for you in this API.

00:20:26.550 --> 00:20:28.870
This is about getting playable audio out.

00:20:29.920 --> 00:20:31.900
You can specify an audio channel layout.

00:20:31.900 --> 00:20:33.490
And you can specify a movie start time.

00:20:33.500 --> 00:20:36.370
Maybe you want to extract just a little
bit from the middle of the movie.

00:20:36.370 --> 00:20:39.410
You can start here and just pull until
you've got what you need and stop.

00:20:39.470 --> 00:20:42.700
And then you call movie
audio extraction fill buffer.

00:20:42.700 --> 00:20:46.520
And that feels very much like if
you're used to audio converters,

00:20:46.520 --> 00:20:48.820
audio converter fill complex buffer.

00:20:48.910 --> 00:20:50.620
It's the same kind of call.

00:20:50.620 --> 00:20:53.310
Gives you an audio buffer
list and you're set.

00:20:55.440 --> 00:20:58.360
Okay, I talked earlier about how
we were setting the channel

00:20:58.360 --> 00:21:00.000
labels in that demo in Player.

00:21:00.000 --> 00:21:02.310
They had that panel they brought up.

00:21:02.590 --> 00:21:04.640
If you want to do that or if
you just want to look at a sound

00:21:04.640 --> 00:21:08.460
description and see what's going on,
we've introduced now a new

00:21:08.460 --> 00:21:09.460
kind of sound description.

00:21:09.460 --> 00:21:11.610
This is the third version
of sound description that

00:21:11.610 --> 00:21:12.760
you might see in a movie.

00:21:12.760 --> 00:21:14.340
It's getting a little bit out of hand.

00:21:14.340 --> 00:21:16.840
You don't want to know where all
those fields are in all those

00:21:16.840 --> 00:21:18.420
versions of sound descriptions.

00:21:19.420 --> 00:21:21.500
So,
we've got some utility routines for you.

00:21:21.710 --> 00:21:22.410
Easier access.

00:21:22.410 --> 00:21:25.920
Future-proofs your application because
you can continue to make these calls

00:21:26.020 --> 00:21:27.820
with version 7 sound descriptions.

00:21:27.820 --> 00:21:28.800
It doesn't matter.

00:21:28.800 --> 00:21:31.250
We're still going to give
you the same information.

00:21:31.250 --> 00:21:32.180
It's great.

00:21:33.440 --> 00:21:35.450
You can create sound descriptions.

00:21:35.460 --> 00:21:38.680
If you hand us an audio
stream basic description,

00:21:38.680 --> 00:21:40.560
an audio channel layout
if you've got one,

00:21:40.560 --> 00:21:44.560
the codex magic cookie if you need one,
we'll make a sound description and

00:21:44.560 --> 00:21:47.840
you can do whatever you need to
do with that sound description.

00:21:47.840 --> 00:21:50.320
You can specify what version
of sound description you want.

00:21:50.320 --> 00:21:51.270
You want a version 1?

00:21:51.330 --> 00:21:52.460
You want a version 2?

00:21:52.460 --> 00:21:57.530
Maybe you want the lowest possible
version given the format you gave me.

00:21:57.540 --> 00:21:59.920
So we look at it and we go, well,
you know,

00:21:59.920 --> 00:22:03.950
the sample rate is less than 64K
and there's only two channels.

00:22:03.970 --> 00:22:05.990
I could put that in a V1.

00:22:06.150 --> 00:22:08.810
And then you might be creating a
movie that is backward compatible

00:22:08.810 --> 00:22:12.030
to older versions of QuickTime,
which may be something you want to do.

00:22:15.730 --> 00:22:19.560
You can convert from one version
of a sound description to another.

00:22:19.560 --> 00:22:21.120
You don't need to know the details.

00:22:21.160 --> 00:22:23.140
You can convert to the lowest possible.

00:22:23.140 --> 00:22:25.060
You may get a V2 sound
description that's got,

00:22:25.060 --> 00:22:27.490
you know, 192 kilohertz audio,
or you don't know what

00:22:27.490 --> 00:22:29.710
the sample rate is,
you don't care, but you want to make

00:22:29.710 --> 00:22:32.190
the lowest possible one,
you can do that conversion.

00:22:34.460 --> 00:22:36.100
and we've got properties on here.

00:22:36.100 --> 00:22:38.420
And this is where if you
just want to look at a sound

00:22:38.420 --> 00:22:41.310
description and see what's in it,
here you go.

00:22:41.310 --> 00:22:43.250
We'll give you an audio
stream basic description,

00:22:43.250 --> 00:22:47.180
core audio style description of the audio
that the sound description describes.

00:22:47.220 --> 00:22:49.210
And that's future proof.

00:22:49.240 --> 00:22:51.840
I mean, we will always be able
to give you an ASBD.

00:22:51.880 --> 00:22:52.680
Life is good.

00:22:53.740 --> 00:22:56.070
You can get or set the
audio channel layout.

00:22:56.070 --> 00:22:59.270
And that's what QuickTime Player was
doing when we brought up the panel.

00:22:59.270 --> 00:23:02.360
He got the audio channel layout,
displayed it in a series of pop-ups.

00:23:02.360 --> 00:23:04.920
I changed them, set it,
it set the audio channel layout

00:23:05.070 --> 00:23:08.160
back into the sound description
and saved it in the movie.

00:23:08.160 --> 00:23:10.150
And you can get and set the magic cookie.

00:23:10.160 --> 00:23:12.260
And if you don't know
what a magic cookie is,

00:23:12.260 --> 00:23:13.450
you don't need to know.

00:23:13.450 --> 00:23:14.070
It's okay.

00:23:14.070 --> 00:23:15.920
But if you do, you really care.

00:23:18.170 --> 00:23:21.500
Okay, before I bring Brad up,
I just want to go over the main points.

00:23:21.500 --> 00:23:23.730
You don't have to change
your app to play this stuff.

00:23:23.760 --> 00:23:25.360
If you want to...

00:23:26.790 --> 00:23:29.700
Really enrich your app and
you get into the details.

00:23:29.700 --> 00:23:33.880
We've got good APIs that give you movie
level access and control of the audio.

00:23:33.880 --> 00:23:36.940
And here's Brad and he's going
to come up and talk to you about

00:23:36.940 --> 00:23:38.810
audio capture and audio export.

00:23:45.350 --> 00:23:47.420
Hi.

00:23:48.190 --> 00:23:52.380
So we've been having a lot of
fun and occasionally sleeping.

00:23:52.620 --> 00:23:56.930
And let's start out by doing a
little audience participation.

00:23:56.930 --> 00:24:01.040
So I'd like you to raise your hand if
you consider yourself an audio person.

00:24:01.040 --> 00:24:04.360
Okay.

00:24:04.830 --> 00:24:08.650
Raise your hand if you
consider yourself a QuickTime

00:24:10.640 --> 00:24:11.720
Okay.

00:24:12.140 --> 00:24:15.970
Raise your hand if you know
what the sequence grabber is.

00:24:17.040 --> 00:24:18.160
Wow, I'm surprised.

00:24:18.220 --> 00:24:23.910
OK, raise your hand if you have ever
programmed using the Sequence Grabber.

00:24:24.160 --> 00:24:25.270
Okay, pretty good.

00:24:25.330 --> 00:24:28.060
All right, so the sequence grabber,
in case you don't know,

00:24:28.060 --> 00:24:32.960
is what QuickTime uses to
capture audio and video.

00:24:32.960 --> 00:24:35.390
The idea is you create
a sequence grabber,

00:24:35.390 --> 00:24:38.120
you instantiate a sequence
grabber component,

00:24:38.200 --> 00:24:40.070
and that controls the grab.

00:24:40.070 --> 00:24:40.690
Get it?

00:24:40.690 --> 00:24:44.020
You're grabbing data,
and it's a sequence of data,

00:24:44.120 --> 00:24:47.720
be it video frames or a
sequence of samples of audio.

00:24:47.720 --> 00:24:52.140
So you create one of these to control it,
and then you instantiate sequence

00:24:52.210 --> 00:24:53.840
grabber channel components.

00:24:54.100 --> 00:24:56.100
A video one or a sound one.

00:24:56.100 --> 00:25:01.110
The video one captures from a video
capture device like a DV camera,

00:25:01.120 --> 00:25:06.980
and the sound one captures through the
sound manager from an audio device.

00:25:06.980 --> 00:25:11.720
Well, if you have programmed audio
using the sequence grabber,

00:25:11.720 --> 00:25:16.010
you may have met with some frustration,
and I feel for you,

00:25:16.010 --> 00:25:20.720
and I've heard your cries and
pleas on the QuickTime API list.

00:25:20.760 --> 00:25:22.760
So here's the state of the world now.

00:25:22.800 --> 00:25:24.080
Pre-Tiger sequence grabber.

00:25:24.130 --> 00:25:53.300
Pre-Tiger sequence grabber.

00:25:53.300 --> 00:25:56.380
Capturing from more than one device,
then who knows what you'll get.

00:25:56.560 --> 00:25:59.340
Capture limited to mono or stereo.

00:25:59.340 --> 00:26:01.410
CBR only.

00:26:01.420 --> 00:26:05.730
Now, we've supported VBR export
and playback for quite a while

00:26:05.730 --> 00:26:08.920
through the sound manager,
but we never did the work

00:26:08.920 --> 00:26:10.680
in the sequence grabber.

00:26:10.680 --> 00:26:13.840
So AAC was out,
and some of the other more interesting

00:26:13.840 --> 00:26:16.220
audio codecs were out for grabbing.

00:26:16.220 --> 00:26:19.280
No device sharing among
sequence grabber channels.

00:26:19.280 --> 00:26:21.780
This is a highly requested feature.

00:26:21.780 --> 00:26:25.230
You know, if you have... A Motu,
and you have a metric halo,

00:26:25.240 --> 00:26:28.570
and you have a DV camera,
and you want to capture from

00:26:28.600 --> 00:26:31.410
all of them at the same time
into one QuickTime movie,

00:26:31.410 --> 00:26:32.740
you currently can't do it.

00:26:32.830 --> 00:26:34.570
At least for the audio side.

00:26:34.580 --> 00:26:39.770
No simultaneous capture
from multiple devices.

00:26:40.100 --> 00:27:05.100
[Transcript missing]

00:27:05.720 --> 00:27:10.730
device sharing among SG audio channels,
channel mapping, simultaneous record

00:27:10.830 --> 00:27:16.350
from multiple devices,
timestamps, timestamps everywhere.

00:27:16.480 --> 00:27:22.830
Device Notifications, Capture to VBR,
SG Audio Callbacks,

00:27:22.830 --> 00:27:24.300
Improved Threading Model.

00:27:24.390 --> 00:27:26.910
So let's go into each one of those
in depth in case you were writing

00:27:26.920 --> 00:27:28.640
really fast and I clicked too fast.

00:27:28.710 --> 00:27:33.750
High resolution audio capture
for me means up to 192 kilohertz.

00:27:34.040 --> 00:27:37.360
Now we're not saying that we can't
go any higher than 192 kilohertz.

00:27:37.360 --> 00:27:40.300
I'm just saying that I haven't
tested anything higher than 192

00:27:40.300 --> 00:27:41.640
kilohertz and I know that works.

00:27:41.640 --> 00:27:44.110
So that's what I can put on the slide.

00:27:44.250 --> 00:27:45.480
Sample rate conversion.

00:27:45.480 --> 00:27:50.490
If you have a device that delivers
48 kilohertz or say 96 kilohertz,

00:27:50.490 --> 00:27:53.400
but ultimately what you need
in your movie is 48 kilohertz,

00:27:53.480 --> 00:27:57.280
we can sample rate convert on the fly,
including up converting.

00:27:57.280 --> 00:28:00.490
So it doesn't matter what
the source sample rate is.

00:28:00.490 --> 00:28:04.320
We'll let you capture to any
arbitrary sample rate you want.

00:28:04.300 --> 00:30:47.700
[Transcript missing]

00:30:48.930 --> 00:30:52.470
So it will be sharing this device
only using a single HAL I/O proc

00:30:53.170 --> 00:30:57.980
and delivering them on one
I/O cycle to both SG audio channels.

00:30:58.010 --> 00:30:59.680
And this is kind of interesting.

00:30:59.680 --> 00:31:04.170
We're letting you take a sneak
peek inside the SG audio channel

00:31:04.180 --> 00:31:05.590
to see what we're leveraging.

00:31:05.720 --> 00:31:08.590
Again, we've told you that we're trying
to leverage Core Audio's building

00:31:08.590 --> 00:31:10.400
blocks as well as we can.

00:31:10.510 --> 00:31:13.440
So you can see in here we're
using a Core Audio matrix mixer

00:31:13.810 --> 00:31:15.640
to do mix down and level metering.

00:31:15.700 --> 00:31:18.590
We're using an audio converter
to do format conversion,

00:31:18.590 --> 00:31:21.840
compression, interleaving,
and queuing it up.

00:31:21.900 --> 00:31:26.840
And I'll talk more to this real-time high
priority thread and main thread business.

00:31:26.890 --> 00:31:31.710
But the main takeaway message here
is that each SG channel equals

00:31:31.710 --> 00:31:33.620
one track in a QuickTime movie.

00:31:33.660 --> 00:31:38.270
And now you can share a device
amongst multiple tracks.

00:31:38.720 --> 00:31:40.560
Channel mapping is a
very powerful construct.

00:31:40.660 --> 00:31:42.010
I'll tell you why.

00:31:42.010 --> 00:31:45.120
It's a virtual patch bay trademark.

00:31:45.150 --> 00:31:46.500
I came up with that one.

00:31:46.530 --> 00:31:48.460
It enables reordering.

00:31:48.470 --> 00:31:50.230
What do I mean by that?

00:31:50.230 --> 00:31:53.730
So it wouldn't be very interesting
to capture from one of these

00:31:53.730 --> 00:31:57.500
multi-channel devices if all you could
do was capture every single channel,

00:31:57.540 --> 00:32:01.500
because sometimes you don't have enough
plugs to put in all of those inputs.

00:32:01.570 --> 00:32:04.580
So it's really nice to be able to
disable the ones you don't want and

00:32:04.580 --> 00:32:06.720
just capture from the ones you do want.

00:32:06.720 --> 00:32:08.630
Well, we take that a step further.

00:32:08.670 --> 00:32:11.440
If for some reason you
need to reorder-- oops.

00:32:18.780 --> 00:32:21.530
It's still a virtual patch bay.

00:32:21.650 --> 00:32:25.100
So let's say it has four-- this happens
to be a four-channel record device.

00:32:25.130 --> 00:32:28.500
This is an M-Audio device
that has four inputs.

00:32:28.550 --> 00:32:32.540
Let's say you want it to appear
in your QuickTime movie track.

00:32:32.630 --> 00:32:34.590
You want all the channels,
but you want them in reverse order.

00:32:34.760 --> 00:32:37.230
So you can specify,
I want one to go to four,

00:32:37.230 --> 00:32:40.430
two to go to three, three to go to two,
four to go to one.

00:32:40.550 --> 00:32:42.860
And what you end up with
in the QuickTime movie is

00:32:42.860 --> 00:32:44.550
exactly what you specified.

00:32:45.720 --> 00:32:48.940
Another powerful thing about channel
mapping is that you get to specify

00:32:48.940 --> 00:32:50.960
your desired channel valence.

00:32:50.960 --> 00:32:54.730
This allows splitting the device channels
across multiple SG audio channels,

00:32:54.730 --> 00:32:58.380
as I've already talked about,
and thus split a device's channels

00:32:58.380 --> 00:33:00.450
across QuickTime movie tracks.

00:33:00.530 --> 00:33:04.440
So you could take a six-channel
device and put them all in one track,

00:33:04.440 --> 00:33:10.870
or you could split it across six tracks
and have mono channels in each track.

00:33:10.870 --> 00:33:14.430
This also enables per-channel disabling,
as shown here.

00:33:14.440 --> 00:33:16.480
Same four-channel record device.

00:33:16.480 --> 00:33:20.350
The first SG audio channel connected
to it just wants the first two,

00:33:20.370 --> 00:33:23.310
and it gets those in the
order it asked for them.

00:33:23.310 --> 00:33:27.560
And then the second SG audio channel
happens to just want the fourth.

00:33:27.560 --> 00:33:29.260
The third gets routed nowhere.

00:33:29.260 --> 00:33:33.650
In fact, this is the only way you can
do this as an optimization

00:33:33.780 --> 00:33:37.930
because on the device side here,
it's intelligent and knows we have a

00:33:37.940 --> 00:33:42.220
little layer in between core audio and
the SG audio channel that does some

00:33:42.460 --> 00:33:44.910
intelligent enabling and disabling.

00:33:44.910 --> 00:33:48.850
So actually, if this device happens
to have separate streams,

00:33:48.860 --> 00:33:52.500
if it happens to present its
channels as separate streams,

00:33:52.510 --> 00:33:55.800
then it will turn this third
channel off completely,

00:33:55.800 --> 00:34:00.470
and you won't waste the bandwidth
capturing from that third one.

00:34:00.520 --> 00:34:01.320
one.

00:34:01.360 --> 00:34:03.150
It's really nice.

00:34:03.510 --> 00:34:04.860
It also enables molting.

00:34:05.090 --> 00:34:07.000
Molting, if you haven't worked
in a recording studio,

00:34:07.000 --> 00:34:08.900
is just a fancy term for Y-chord.

00:34:08.900 --> 00:34:15.390
So it's like taking a virtual Y-chord
inside of your computer and taking,

00:34:15.400 --> 00:34:18.690
let's say,
that same four-channel record device

00:34:18.780 --> 00:34:22.300
and taking its four channels and saying,
in the first one,

00:34:22.320 --> 00:34:25.660
I just want the first stereo pair,
but I want them twice.

00:34:25.660 --> 00:34:27.720
So you could go one, two, one, two.

00:34:27.720 --> 00:34:30.000
And in the second,
you're asking for the third

00:34:30.110 --> 00:34:31.740
and fourth channels twice.

00:34:31.950 --> 00:34:33.200
You could get three, four, three, four.

00:34:33.200 --> 00:34:40.260
Each one will have a four-channel movie,
but with the appropriate channels.

00:34:46.160 --> 00:34:49.210
Okay, it also allows multiple
simultaneous mixes.

00:34:49.360 --> 00:34:50.900
Okay, here's where it gets a
little bit interesting.

00:34:50.900 --> 00:34:52.310
I hope I didn't bore
you with all of that.

00:34:52.390 --> 00:34:54.890
I needed to lay the foundation
for some of the cool things that

00:34:54.960 --> 00:34:56.520
you might be able to do with this.

00:34:57.770 --> 00:34:59.280
Multiple simultaneous mixes.

00:34:59.440 --> 00:35:01.820
Okay, let's say you have a
six-channel record device.

00:35:01.820 --> 00:35:03.940
You can do crazy things with this now.

00:35:03.940 --> 00:35:08.730
Let's say you wanted to do a raw,
all six channels in the

00:35:08.800 --> 00:35:11.150
first SG audio channel.

00:35:11.150 --> 00:35:14.050
So you're just going to get
one through six or label them

00:35:14.050 --> 00:35:15.900
as discrete zero through five.

00:35:15.910 --> 00:35:21.960
What labeling them as discrete means is
that when you go to play that track back,

00:35:21.960 --> 00:35:26.380
the first channel in the movie
in that track will play out to

00:35:26.380 --> 00:35:28.910
the first speaker that you have.

00:35:28.910 --> 00:35:32.230
The second will play out the second
and so on until you run out of either

00:35:32.230 --> 00:35:35.560
speakers or channels in the movie,
whichever happens first.

00:35:35.570 --> 00:35:39.600
And in the second SG audio channel,
you're doing a 5.1 mix.

00:35:39.610 --> 00:35:43.280
So you're still not doing any mix down,
but you're taking those

00:35:43.370 --> 00:35:47.110
same six channels and you're
applying spatial order to them.

00:35:47.110 --> 00:35:49.720
So when you play it back,
they'll play out the

00:35:49.920 --> 00:35:51.640
appropriate speakers.

00:35:51.640 --> 00:35:57.400
And in the third SG audio channel,
you're taking those six channels that

00:35:57.480 --> 00:36:00.660
came from the record device and you
are mixing them down to stereo using

00:36:00.700 --> 00:36:02.780
that little matrix mixer right there.

00:36:02.890 --> 00:36:05.270
And in the last one,
you're doing a mono mix.

00:36:05.270 --> 00:36:09.540
So all of a sudden, you've got a one,
two, three, four track quick time movie.

00:36:09.540 --> 00:36:11.750
Each one has an independent mix.

00:36:11.880 --> 00:36:16.890
And we already have really nice APIs to
let you enable and disable tracks.

00:36:16.910 --> 00:36:21.140
So you could write a very simple
application that could capture

00:36:21.140 --> 00:36:25.540
very complex movies and then just
enable the right tracks based on

00:36:25.540 --> 00:36:27.660
whether someone pays you more money.

00:36:27.660 --> 00:36:28.890
I don't know.

00:36:32.440 --> 00:36:33.280
Okay.

00:36:33.530 --> 00:36:35.860
Also,
it enables multi-data rate movie capture.

00:36:35.860 --> 00:36:40.960
I personally think there's
a killer app potential here.

00:36:40.960 --> 00:36:43.940
So we know that we can do separate mixes.

00:36:43.940 --> 00:36:46.040
Now let's take it a step further.

00:36:46.050 --> 00:36:48.680
What if you were going to do a
separate mix and you were going to

00:36:48.680 --> 00:36:51.880
apply a different compression or
different compression ratio to it?

00:36:51.980 --> 00:36:53.990
So same six-channel device.

00:36:53.990 --> 00:36:57.980
Now we're going to do a 5.1 mix
in the first SG Audio channel.

00:36:58.120 --> 00:37:01.010
So we'll think of this
as our high-res copy.

00:37:01.010 --> 00:37:01.870
It's coming in.

00:37:01.880 --> 00:37:03.050
It's going to be pristine.

00:37:03.050 --> 00:37:07.850
The second SG Audio channel is going
to do a compressed version of it,

00:37:07.860 --> 00:37:15.080
a 5.1 AAC surround sound rendition of it
at 160 kilobits per second per channel,

00:37:15.340 --> 00:37:19.280
which is a pretty high data rate,
but it sounds great.

00:37:19.400 --> 00:37:23.570
And then let's say in the
SG Audio channel number three,

00:37:23.630 --> 00:37:28.110
you're going to get another
5.1 AAC rendition of it,

00:37:28.170 --> 00:37:30.450
but at a much lower data rate.

00:37:30.450 --> 00:37:32.260
And let's say in the fourth one,
you're going to do a mix down to stereo

00:37:32.260 --> 00:37:34.730
and apply QGIS redesign to it so that
you can broadcast that one on the web.

00:37:34.730 --> 00:37:40.860
Well, maybe you could write a streaming
application that could do some

00:37:40.860 --> 00:37:46.220
interesting mixes and compression
ratios for different broadcasting needs.

00:37:46.220 --> 00:37:47.070
I don't know.

00:37:47.070 --> 00:37:48.980
I think there is a potential there.

00:37:48.980 --> 00:37:49.630
Okay.

00:37:49.630 --> 00:37:53.520
So simultaneous record
from multiple devices.

00:37:53.530 --> 00:37:58.030
I personally have recorded
from four devices at once,

00:37:58.050 --> 00:38:03.210
and that's just because I ran out
of things to put the devices in to.

00:38:03.270 --> 00:38:05.570
But if you had lots of cards,
I think you could probably

00:38:05.570 --> 00:38:07.340
capture from a lot more.

00:38:07.360 --> 00:38:11.620
The one caveat is you can only
capture from one device per

00:38:11.620 --> 00:38:13.920
SG Audio channel at a time.

00:38:14.020 --> 00:38:14.920
Okay.

00:38:14.920 --> 00:38:17.440
So if you have two devices
that you want to record to,

00:38:17.440 --> 00:38:21.220
they're going to go
into two tracks minimum.

00:38:22.010 --> 00:38:24.970
There is no architectural limit
to the number of SG audio channels

00:38:24.980 --> 00:38:26.360
in a single record operation.

00:38:26.360 --> 00:38:27.470
We'll just leave it at that.

00:38:27.680 --> 00:38:30.540
However much horsepower you have,
however many inputs you have,

00:38:30.620 --> 00:38:34.410
however much firewire bandwidth you have,
that's how much you'll

00:38:34.410 --> 00:38:35.320
be able to capture.

00:38:36.360 --> 00:38:38.800
Capture from core audio devices
or sound manager devices.

00:38:38.810 --> 00:38:39.920
This is interesting.

00:38:39.920 --> 00:38:44.400
We asked people a long time ago to
stop writing sound input components,

00:38:44.400 --> 00:38:48.010
sound input drivers,
but there are still a few hangers on who

00:38:48.170 --> 00:38:52.520
don't have core audio implementations,
and we support those as well

00:38:52.520 --> 00:38:54.670
in this new SG audio channel.

00:38:54.740 --> 00:38:57.430
So what this should say
to you is going forward,

00:38:57.430 --> 00:39:00.670
we're not officially deprecating
the SG sound channel,

00:39:00.670 --> 00:39:03.250
but we are highly,
highly recommending that

00:39:03.250 --> 00:39:04.680
you use the new one.

00:39:04.760 --> 00:39:06.150
Because the SG audio channel is
going to be the new SG audio channel.

00:39:06.180 --> 00:39:08.400
can do everything that
the old one can do,

00:39:08.400 --> 00:39:10.090
plus a lot more.

00:39:10.400 --> 00:39:13.030
Timestamps, timestamps everywhere.

00:39:13.280 --> 00:39:16.960
Core Audio audio timestamps
flow through the signal chain.

00:39:17.000 --> 00:39:21.290
This is great because it means accurate
timing info is available to you at

00:39:21.360 --> 00:39:26.310
various tap points along the way in
these thing called SG audio callbacks,

00:39:26.320 --> 00:39:28.600
which I'll describe in a minute.

00:39:29.300 --> 00:39:32.330
This enables us to get perfect sync
among device channels which are

00:39:32.330 --> 00:39:35.230
split across QuickTime movie tracks.

00:39:35.230 --> 00:39:38.370
And in the future,
we'll be able to take those timestamps,

00:39:38.450 --> 00:39:42.510
the host timestamps that we get in
the audio stream and synchronize

00:39:42.810 --> 00:39:44.840
it with what we get in the video.

00:39:46.550 --> 00:39:48.180
Device notifications.

00:39:48.180 --> 00:39:49.790
So Sound Manager didn't
give these either,

00:39:49.930 --> 00:39:51.280
so it was kind of rude.

00:39:51.320 --> 00:39:55.280
If you were capturing audio from a device
and somebody pulled the plug on it,

00:39:55.280 --> 00:39:58.960
bad things would happen,
sort of like a horrible

00:39:59.020 --> 00:40:01.660
Monty Python-esque death.

00:40:01.780 --> 00:40:06.050
Client may register to be
notified when devices come and go.

00:40:06.390 --> 00:40:09.550
So if you happen to be capturing
and someone pulls the plug,

00:40:09.550 --> 00:40:13.240
you'll get a notification and
it will stop and not crash.

00:40:13.470 --> 00:40:19.500
We also send notifications when a
device is started or stopped by anyone,

00:40:19.500 --> 00:40:23.590
when a device's physical format changes,
which probably will lead to

00:40:23.670 --> 00:40:27.410
you stopping so that you can
redo your buffers and such.

00:40:27.830 --> 00:40:31.890
or when a device becomes hogged or
unhogged by you or by anyone else.

00:40:31.940 --> 00:40:32.790
VBR capture.

00:40:33.040 --> 00:40:37.430
Okay, this has been widely requested
feature and we finally delivered.

00:40:37.640 --> 00:40:42.140
Variable bitrate formats are first
class citizens in the SG audio channel.

00:40:42.140 --> 00:40:43.800
What does that mean for you?

00:40:44.130 --> 00:40:47.420
This includes MPEG-4
AAC including multi-channel.

00:40:47.420 --> 00:40:48.580
Apple lossless.

00:40:48.580 --> 00:40:52.780
Again, I think this is a really killer
codec for the capture arena.

00:40:52.780 --> 00:40:55.590
It's interesting on
the iTunes music store.

00:40:55.610 --> 00:40:57.680
It's even more interesting
on the iTunes music store.

00:40:57.700 --> 00:41:00.990
It's interesting in that most
people that do captures probably

00:41:01.290 --> 00:41:05.420
don't want to compress down to
something that sounds really crappy.

00:41:05.560 --> 00:41:08.400
They would probably like
to keep it at high res.

00:41:08.450 --> 00:41:11.350
Well,
now you can get the best of both worlds.

00:41:11.410 --> 00:41:15.530
If you can capture to Apple lossless,
you get to save half the space on

00:41:15.530 --> 00:41:19.720
your hard disk and you're not losing
any bits when you play it back.

00:41:19.720 --> 00:41:21.610
So that's very interesting.

00:41:21.610 --> 00:41:25.400
Also AMR narrowband,
which is what's used in 3G.

00:41:26.620 --> 00:41:28.000
SG audio callbacks.

00:41:28.000 --> 00:41:28.580
Okay.

00:41:28.580 --> 00:41:31.640
Many of you who've worked with
a sequence grabber know that we

00:41:31.640 --> 00:41:34.880
have these things called video
bottlenecks on the video side.

00:41:34.880 --> 00:41:38.540
And these are essentially tap points
where you can tap into the stream and

00:41:38.550 --> 00:41:40.700
look at the video at various points.

00:41:40.700 --> 00:41:44.920
You know, when a frame arrives,
when it's done being decompressed,

00:41:44.920 --> 00:41:48.140
when it's, you know,
all these different things.

00:41:48.140 --> 00:41:51.400
And now we are providing the
same thing on the audio side

00:41:51.430 --> 00:41:53.430
with these SG audio callbacks.

00:41:53.430 --> 00:41:55.540
They allow you to look at and or modify.

00:41:55.540 --> 00:41:55.540
I'll say that.

00:41:55.540 --> 00:41:57.090
Quietly.

00:41:57.640 --> 00:42:02.110
Because you okay, go ahead and modify it,
but don't change the size of the buffer,

00:42:02.140 --> 00:42:02.870
please.

00:42:02.980 --> 00:42:04.780
So you can look at it.

00:42:04.780 --> 00:42:07.450
As it's flowing through the
SG audio channel where okay,

00:42:07.460 --> 00:42:09.780
here's that same diagram
I showed you before.

00:42:09.780 --> 00:42:13.740
So right before that matrix mixer.

00:42:13.930 --> 00:42:14.950
That's tap point one.

00:42:14.980 --> 00:42:16.490
That's called the pre-mix callback.

00:42:16.530 --> 00:42:19.140
If you want to get the
audio right from the device,

00:42:19.140 --> 00:42:22.620
the raw samples,
you register for that callback and we'll

00:42:22.710 --> 00:42:24.420
let you see those samples right there.

00:42:24.420 --> 00:42:26.420
Second one is the post-mix callback.

00:42:26.420 --> 00:42:29.760
So if you're doing any mix down,
you ask for this callback,

00:42:29.760 --> 00:42:32.400
you'll get it right
after the mix happens.

00:42:32.400 --> 00:42:34.790
Third one is the pre-conversion callback.

00:42:34.790 --> 00:42:37.730
So right before it's going
to go to the audio converter,

00:42:37.730 --> 00:42:39.220
you can see those then.

00:42:39.220 --> 00:42:41.880
And the fourth one is
post-conversion callback.

00:42:41.940 --> 00:42:45.690
So a lot of you have posted
to the QuickTime API list

00:42:45.770 --> 00:42:48.030
about using the SGData proc.

00:42:48.030 --> 00:42:51.850
And a lot of you are probably abusing it,
using it for things it

00:42:51.880 --> 00:42:52.740
wasn't intended for.

00:42:52.740 --> 00:42:57.110
Well, this is a much better solution
than using the SGData proc.

00:42:57.260 --> 00:42:59.480
SGData proc only lets you see
the audio right before it's

00:42:59.570 --> 00:43:00.850
going to be written to disk.

00:43:00.860 --> 00:43:03.980
If you use these,
you get to see it right as it's ready.

00:43:03.980 --> 00:43:05.800
So you get much lower latency.

00:43:05.800 --> 00:43:09.870
You don't have to wait for the one
second or half a second disk writes.

00:43:11.500 --> 00:43:14.100
We've also given you a dramatically
improved threading model,

00:43:14.120 --> 00:43:16.020
as you've seen on some
of the previous slides.

00:43:16.020 --> 00:43:18.400
We're doing minimal
work on the main thread.

00:43:18.420 --> 00:43:23.620
Audio mixing and format conversion take
place on high-priority worker threads.

00:43:23.620 --> 00:43:25.180
What does that mean to you?

00:43:25.360 --> 00:43:28.920
Well, you have this thing called
SGIDLE that everyone complains about.

00:43:28.920 --> 00:43:30.430
You have to call it frequently.

00:43:30.440 --> 00:43:33.720
I think the documentation says
as frequently as possible.

00:43:34.720 --> 00:43:39.900
Well, we do work on the right threads
in this new SG Audio channel,

00:43:39.900 --> 00:43:46.540
such that the only reason that we need to
still do anything on the SGIDLE callback,

00:43:46.640 --> 00:43:48.570
which is on the main thread,
is because that's where

00:43:48.690 --> 00:43:49.850
video does its work.

00:43:49.860 --> 00:43:55.030
So in order to get good interleaving
within the file on disk,

00:43:55.060 --> 00:43:57.780
we'll still do the writing
on the main thread.

00:43:57.800 --> 00:43:59.550
Otherwise,
there's no reason why we couldn't take

00:43:59.600 --> 00:44:01.180
this to a separate thread in the future.

00:44:01.180 --> 00:44:02.940
Better performance.

00:44:02.940 --> 00:44:04.700
This means that we're going to be able
to do a lot of work on the main thread.

00:44:04.700 --> 00:44:08.660
When you are capturing audio,
things are happening on threads

00:44:08.660 --> 00:44:12.800
where it's not going to interfere
with you clicking on a pop-up button

00:44:12.800 --> 00:44:15.070
or causing a spinning beach ball.

00:44:15.280 --> 00:44:16.180
More responsive apps.

00:44:18.530 --> 00:44:20.830
Okay, enough yapping.

00:44:21.160 --> 00:44:24.660
Okay, now we're going to see what I like
to call a progressive rock demo.

00:44:24.660 --> 00:44:29.130
It's a progressive rock demo
because it's a demo in a few steps,

00:44:29.180 --> 00:44:34.120
each of which progressively will
rock more than the previous one.

00:44:34.380 --> 00:44:38.620
Okay, so I know, I know.

00:44:40.000 --> 00:47:21.400
[Transcript missing]

00:47:22.000 --> 00:47:26.970
But what we're seeing here is
not what I want because it's

00:47:27.220 --> 00:47:33.040
recording 18 channels and all
I have playing back are 1 through 6.

00:47:33.050 --> 00:47:34.660
So that's not very interesting.

00:47:34.660 --> 00:47:38.490
What I really want is to
capture just the 6 that I want.

00:47:38.490 --> 00:47:41.610
So let's do that.

00:47:42.290 --> 00:47:46.820
This command line app, by the way,
is available to you right now.

00:47:46.820 --> 00:47:49.440
After this session,
you can go download it from the

00:47:49.560 --> 00:47:51.110
disk image for this session.

00:47:51.110 --> 00:47:54.820
It works just the way it's
going to work on stage.

00:47:54.820 --> 00:47:57.220
It does just about everything
that the sequence grabber does,

00:47:57.220 --> 00:47:58.880
and it does it all from the command line.

00:47:58.880 --> 00:48:01.820
Some of your command line
parameters will get really long.

00:48:01.820 --> 00:48:12.180
Greg Chapman, Brad Ford, Guillermo Ortiz,
Jeff Brown,

00:48:12.180 --> 00:48:14.390
Paul Robins This command line app,
by the way,

00:48:14.390 --> 00:48:14.390
is available to you right now.

00:48:14.390 --> 00:48:14.390
After this session,
you can go download it from the

00:48:14.390 --> 00:48:14.390
disk image for this session.

00:48:14.390 --> 00:48:14.390
It does just about everything
that the sequence grabber does,

00:48:14.390 --> 00:48:14.390
and it does it all from the command line.

00:48:14.390 --> 00:48:14.390
Some of your command line
parameters will get really long.

00:48:14.960 --> 00:48:15.770
while we're recording.

00:48:15.950 --> 00:48:18.870
So this time we're just getting,
could you turn up the audio on

00:48:18.870 --> 00:48:23.320
that stereo pair a little bit?

00:48:23.320 --> 00:48:29.890
So what we're seeing on the top
one is the levels that are coming

00:48:29.890 --> 00:48:32.660
into the matrix mixer and the
bottom ones are the ones that are

00:48:32.660 --> 00:48:34.690
coming out of the matrix mixer.

00:48:34.690 --> 00:48:38.180
I added a lot of key commands
so you can do fun stuff like,

00:48:38.180 --> 00:48:40.690
for instance,
take the master volume down or

00:48:40.690 --> 00:48:42.410
the per channel volume down.

00:48:42.410 --> 00:48:46.200
Now you'll notice that what's coming
into the matrix mixer is a lot louder

00:48:46.200 --> 00:48:52.830
than what's coming out of it and
I could do a nice little fade out.

00:48:52.840 --> 00:48:55.670
So we're still hearing what's
coming from the device on left and

00:48:55.830 --> 00:49:00.000
right but now what's being recorded
into the movie is nothing because

00:49:00.000 --> 00:49:02.750
I turned the volume all the way down.

00:49:02.760 --> 00:49:05.840
So let's play a little bit of that back.

00:49:09.700 --> 00:49:11.240
Okay, what have we got?

00:49:11.250 --> 00:49:16.140
We've got a movie that's got a
single audio track with six channels

00:49:16.450 --> 00:49:18.580
unmarked because I didn't label them.

00:49:18.610 --> 00:49:20.700
96 kilohertz, 24 bit.

00:49:20.700 --> 00:49:21.920
Let's play it back.

00:49:21.920 --> 00:49:25.880
Four, channel five, channel six.

00:49:27.230 --> 00:49:29.960
Oh, I've got to do it again.

00:49:29.990 --> 00:49:35.830
Channel 3, channel 4, channel 5,
channel 6.

00:49:35.850 --> 00:49:38.520
Okay, so that's interesting.

00:49:38.550 --> 00:49:44.360
What it's doing is it's playing
back onto our output device like you

00:49:44.530 --> 00:49:47.250
would expect unmarked audio to do.

00:49:47.280 --> 00:49:50.490
It's playing back to...

00:49:50.700 --> 00:50:02.900
[Transcript missing]

00:50:04.310 --> 00:50:06.770
Okay, so for the next demo,
so that was neat.

00:50:06.900 --> 00:50:10.380
You just saw a 24-bit 96 kilohertz
capture using Sequence Grabber.

00:50:10.480 --> 00:50:12.980
I don't think anyone's
seen that in public before.

00:50:12.980 --> 00:50:17.160
Thank you.

00:50:22.360 --> 00:50:25.010
And now for our third demo,
which will progressively

00:50:25.060 --> 00:50:28.790
rock more than the last one,
we are going to do all six

00:50:28.790 --> 00:50:29.930
channels in reverse order.

00:50:29.940 --> 00:50:32.350
Remember I told you that
we could reorder them.

00:50:32.350 --> 00:50:37.330
So now I'm going to take the same
six channels and I'm going to

00:50:37.330 --> 00:50:40.180
capture them in reverse order.

00:50:40.180 --> 00:50:43.900
So instead of 345678,
I'm going to get 876543.

00:50:43.900 --> 00:50:47.400
And I'm also going to show off a
little bit and do a sample rate

00:50:47.400 --> 00:50:49.260
conversion at the same time.

00:50:49.260 --> 00:50:51.680
So even though it's
coming in at 96 kilohertz,

00:50:52.300 --> 00:50:53.290
it's going to be a little
bit more than that.

00:50:53.310 --> 00:50:56.170
So instead of 424 bit,
we're going to do an on the fly

00:50:56.210 --> 00:50:58.790
sample rate conversion to 44.1 16 bit.

00:50:58.790 --> 00:51:02.860
And if you want to hear if you've
forgotten what my voice sounds like.

00:51:04.000 --> 00:51:10.780
Channel six, channel one, channel two,
channel three, channel four,

00:51:10.780 --> 00:51:14.770
channel five.

00:51:17.100 --> 00:51:37.600
[Transcript missing]

00:51:38.300 --> 00:51:40.830
We're going to do channel molting.

00:51:41.110 --> 00:51:43.750
Okay, so I told you that we could
do this virtual Y-chord stuff.

00:51:43.750 --> 00:51:48.900
Well, now let's make a gratuitous
16-channel movie with silence

00:51:48.910 --> 00:51:52.170
in the first four channels,
followed by doubled stereo pairs.

00:51:52.180 --> 00:52:00.960
So what we're going to see here is 0000,
then 3434, 5656, 7878, because I can.

00:52:05.610 --> 00:52:08.030
And now you'll notice
that you'll see one,

00:52:08.130 --> 00:52:13.240
two, channel three, channel four,
channel five, channel six,

00:52:13.240 --> 00:52:14.900
but nothing ever in the
first four channels.

00:52:14.900 --> 00:52:17.730
This actually has some use.

00:52:17.750 --> 00:52:20.890
You know,
a lot of post houses need your channels

00:52:20.890 --> 00:52:23.290
on just certain tracks on the tape.

00:52:23.370 --> 00:52:26.750
You know, so if you're going out to
SDI on an eight track tape,

00:52:26.750 --> 00:52:30.060
but you only want to put your
audio on the last four channels,

00:52:30.250 --> 00:52:31.900
you could provide silence.

00:52:31.900 --> 00:52:34.600
You could just record silence in
the first four tracks in the first

00:52:34.700 --> 00:52:39.020
four channels in the movie and then
put the real audio on the last four.

00:52:39.020 --> 00:52:44.430
Okay, and then for our fifth demo,
which I like to affectionately

00:52:44.430 --> 00:52:47.170
call the didgeridoo demo,
I'd like to bring up

00:52:47.170 --> 00:52:48.790
Jeff Brown to help me out.

00:52:48.790 --> 00:52:53.110
We're going to have a little bit
more fun and do some live recording.

00:52:53.870 --> 00:52:58.980
Okay, so Jeff is an engineer
on the QuickTime team,

00:52:58.990 --> 00:53:01.920
and he also likes to play
Australian instruments.

00:53:08.180 --> 00:53:08.830
Fun stuff, yeah.

00:53:09.140 --> 00:53:15.700
So I've actually invited a didgeridoo
player to follow me around stage and

00:53:15.700 --> 00:53:17.840
blow his instrument behind my back.

00:53:17.910 --> 00:53:20.430
This is akin to inviting
a vampire into your house.

00:53:20.430 --> 00:53:21.090
Thank you.

00:53:21.130 --> 00:53:24.670
So what we're going to do with
this demo is we're actually going

00:53:24.860 --> 00:53:26.780
to label the audio this time.

00:53:26.780 --> 00:53:29.280
See what I've highlighted here.

00:53:29.280 --> 00:53:31.620
I'm going to do two tracks
in the QuickTime movie.

00:53:31.900 --> 00:53:35.540
The first one I'm going to
tell the recording device

00:53:35.540 --> 00:53:39.880
that it's coming in as left,
right, center, LFE, left surround,

00:53:39.880 --> 00:53:40.900
right surround.

00:53:40.900 --> 00:53:45.670
And I'm going to map it out to the
same places and we're going to have

00:53:45.670 --> 00:53:48.630
a 5.1 surround sound recording.

00:53:49.320 --> 00:53:52.890
And then in the second track,

00:53:53.110 --> 00:53:56.960
In the first one,
we're going to output a stereo mix.

00:53:56.960 --> 00:54:02.340
So we've got a 5.1 coming in,
and in that track we'll have a stereo

00:54:02.340 --> 00:54:05.050
mixdown of what we came in with.

00:54:05.050 --> 00:54:10.400
And then I need to set my
sample rate back to 48.

00:54:12.610 --> 00:54:15.320
In the second track,
we'll actually have the 5.1.

00:54:15.320 --> 00:54:18.260
But notice that I've done
it in a really weird,

00:54:18.260 --> 00:54:18.980
bad order.

00:54:18.980 --> 00:54:22.050
LFE, RS, LS, right, center, left.

00:54:22.090 --> 00:54:24.090
But it shouldn't matter
because I've labeled them.

00:54:24.090 --> 00:54:26.530
They'll still come out the right
speakers when we play it back.

00:54:26.620 --> 00:54:31.690
Okay,
so let's go ahead and do some of this.

00:54:35.600 --> 00:54:38.930
Okay, so I think we have these
microphones turned up.

00:54:39.060 --> 00:54:41.890
Go ahead and start giving me a drone.

00:54:43.400 --> 00:54:47.620
So this is right surround,
right surround for all

00:54:47.620 --> 00:54:49.180
you listening at home.

00:54:50.330 --> 00:54:51.920
This is the right channel.

00:54:51.970 --> 00:54:55.060
The right channel.

00:54:55.070 --> 00:54:57.140
This is center.

00:55:06.510 --> 00:55:07.530
Oh, we're clipping like mad.

00:55:07.590 --> 00:55:09.820
Back off a little bit.

00:55:09.820 --> 00:55:12.380
And then this one is the left.

00:55:13.270 --> 00:55:14.870
and this one is left surround.

00:55:14.920 --> 00:55:24.810
So left surround, excuse me, left, LFE,
center, right, right surround.

00:55:25.060 --> 00:55:31.180
Let's give them a hand.

00:55:36.720 --> 00:55:38.680
Now in our resulting movie,
what do we got?

00:55:38.690 --> 00:55:43.710
As expected, in the first track we've got
a stereo mix down at 48 kHz,

00:55:43.750 --> 00:55:48.300
and in the second track we've got the
5.1 mix in the order that we specified.

00:55:48.300 --> 00:55:52.620
LFE, RS, LS, RC, L,
which is just whacked, but hey,

00:55:52.620 --> 00:55:55.590
it'll play back in the right places.

00:55:55.600 --> 00:56:00.590
Oh, excuse me,
I need to open this up in Hipper.

00:56:01.360 --> 00:56:03.900
Um, or I mean QuickTime player.

00:56:03.930 --> 00:56:05.000
That's what I meant to say.

00:56:05.000 --> 00:56:07.890
Um, and...

00:56:08.510 --> 00:56:11.540
Now let's go in and enable tracks.

00:56:11.920 --> 00:56:14.380
So I'll turn off the second soundtrack.

00:56:14.440 --> 00:56:16.910
So we'll just hear the stereo mix.

00:56:19.260 --> 00:56:21.120
Do we have the 5.1 turned up?

00:56:21.120 --> 00:56:25.480
So we should just be hearing
it out left and right.

00:56:28.700 --> 00:56:31.000
and as expected we're only
hearing it out the right speaker.

00:56:31.000 --> 00:56:32.670
This is the right channel.

00:56:32.670 --> 00:56:33.500
The right channel.

00:56:33.500 --> 00:56:36.310
Okay, I'll move forward a little bit.

00:56:37.700 --> 00:56:41.800
So next time we'll get the levels right.

00:56:41.810 --> 00:56:48.210
And let's instead turn Soundtrack
1 off and turn Soundtrack 2 on.

00:56:48.270 --> 00:56:51.070
So now we'll just get the 5.1.

00:56:57.000 --> 00:56:57.840
It is right surround.

00:56:57.840 --> 00:56:59.120
Are you listening at home?

00:56:59.160 --> 00:57:00.670
Right.

00:57:00.680 --> 00:57:02.230
This is the right channel.

00:57:02.240 --> 00:57:03.910
The right channel.

00:57:05.400 --> 00:57:08.810
This is center.

00:57:08.910 --> 00:57:09.380
So pretty cool.

00:57:09.450 --> 00:57:12.680
It doesn't matter that I had them
listed in a wacky order in the track.

00:57:12.860 --> 00:57:15.620
They still play to the right place
because I had them labeled right.

00:57:15.620 --> 00:57:19.700
Thus concludes the
progressive rock demos.

00:57:19.700 --> 00:57:26.540
Can we go back to slides, please?

00:57:35.320 --> 00:57:37.360
The rules for audio capture.

00:57:37.370 --> 00:57:40.620
All of this does come
with somewhat of a price.

00:57:40.630 --> 00:57:43.500
I said it's all new,
so it really doesn't cost you

00:57:43.610 --> 00:57:46.850
anything except for you have to
write all of your code over again.

00:57:47.040 --> 00:57:50.480
Because it's a new SG Audio channel,
you have to opt in for it by

00:57:50.480 --> 00:57:52.570
creating this new channel type.

00:57:52.650 --> 00:57:54.400
And it has new APIs.

00:57:54.400 --> 00:57:56.400
It uses component property APIs.

00:57:56.400 --> 00:58:00.170
Get property info, get property,
set property exclusively.

00:58:01.180 --> 00:58:07.030
If you look in QuickTimeComponents.h
on your seed and search for SG Audio,

00:58:07.030 --> 00:58:09.960
you'll see a lot of really
good inline documentation.

00:58:09.970 --> 00:58:12.790
So I encourage you to go there and look,
because this stuff is very

00:58:12.860 --> 00:58:14.130
functional in your seed.

00:58:14.130 --> 00:58:18.950
And you'll see there are about 40
properties that we've defined that

00:58:18.990 --> 00:58:23.490
you can use to get and set various
things on this SG Audio channel.

00:58:23.500 --> 00:58:24.200
Other rules.

00:58:24.200 --> 00:58:27.300
A single SG Audio channel writes
to a single QuickTime movie track,

00:58:27.300 --> 00:58:27.730
right?

00:58:27.730 --> 00:58:30.500
So it doesn't record from
two devices simultaneously.

00:58:31.180 --> 00:58:32.830
You have to make two of them to do that.

00:58:32.880 --> 00:58:37.160
It reads legacy SG Sound Channel settings
stored in Atom containers.

00:58:37.190 --> 00:58:41.620
So if you have an existing app that has
used Sequence Grabber and you have old

00:58:41.620 --> 00:58:45.390
Sound Channel settings lying around,
you can feed these to

00:58:45.390 --> 00:58:48.270
the new SG Audio channel,
and it will do its best to

00:58:48.270 --> 00:58:52.420
make them into something that's
compatible with what you had.

00:58:52.440 --> 00:58:54.740
But when you ask for
new settings from it,

00:58:54.740 --> 00:58:58.840
it will never give you backward
compatible SG Sound Channel settings.

00:58:58.860 --> 00:59:04.850
So be aware that when you get... settings
back from it as an Atom container,

00:59:04.850 --> 00:59:07.330
you'll get new settings that
are not backward compatible.

00:59:07.360 --> 00:59:08.930
Okay, moving right along.

00:59:09.060 --> 00:59:10.650
That was the audio capture portion.

00:59:11.010 --> 00:59:13.280
Now, exporting audio.

00:59:13.750 --> 00:59:16.030
Pre-Tiger sound compression
had a few problems.

00:59:16.040 --> 00:59:19.410
Exports limited to sound
manager supported formats,

00:59:19.550 --> 00:59:20.920
just like playback and capture.

00:59:20.920 --> 00:59:22.910
We could only do as much
as sound manager could do.

00:59:22.920 --> 00:59:26.440
We also had problems with the
standard sound compression or

00:59:26.440 --> 00:59:28.740
stood sound dialogue component.

00:59:28.740 --> 00:59:33.430
This is what you see when you export
from QuickTime player to sound.

00:59:33.440 --> 00:59:35.760
You see that little cute dialogue.

00:59:35.760 --> 00:59:38.800
It requires displaying
QuickTime's own dialogue.

00:59:38.920 --> 00:59:42.070
It's really hard to make your own
custom UI because we didn't do a

00:59:42.070 --> 00:59:45.980
very good job of keeping your state
up to date with that old component.

00:59:45.980 --> 00:59:50.370
Also, the dialogue offers strange choices
for some compression formats.

00:59:50.420 --> 00:59:51.540
Here's what I mean.

00:59:53.000 --> 00:59:55.090
This is one of my favorites.

00:59:55.240 --> 00:59:55.790
Movie settings.

00:59:55.790 --> 01:00:02.790
My compressed format is 32-bit integer,
yet my size is 16-bit.

01:00:02.850 --> 01:00:04.540
Hmm, okay.

01:00:04.540 --> 01:00:07.330
That never really made sense to me.

01:00:07.540 --> 01:00:13.180
Now we have made it sane by giving you a
new standard audio compression component.

01:00:14.560 --> 01:00:16.400
What's good about the new export chain?

01:00:16.630 --> 01:00:18.130
Well, we use the playback chain.

01:00:18.190 --> 01:00:22.120
So if it sounds right on playback,
it's going to sound right in your export.

01:00:22.120 --> 01:00:25.900
We've leveraged all the work that we
did there in the export chain as well.

01:00:25.920 --> 01:00:29.620
The standard audio compression
component configures export to and

01:00:29.800 --> 01:00:31.620
from all our new playback formats.

01:00:31.620 --> 01:00:35.180
So again, that's the new component
that you want to work with.

01:00:35.180 --> 01:00:38.290
And you'll find him in
QuickTimeComponents.h if

01:00:38.290 --> 01:00:39.880
you search for SC Audio.

01:00:39.880 --> 01:00:41.940
And you'll find lots of
properties for him too.

01:00:42.660 --> 01:00:45.900
Stood audio works well with
or without using our dialog.

01:00:45.950 --> 01:00:49.620
So this is really good if you
like to make your own app that

01:00:50.030 --> 01:00:52.590
doesn't use System 7 dialogs.

01:00:52.660 --> 01:00:58.660
Custom UI is much easier to develop,
and new property APIs make this possible.

01:00:58.660 --> 01:01:01.650
Our dialog,
so when you see our dialog come up,

01:01:01.710 --> 01:01:05.270
our new audio export dialog,
it itself is actually a

01:01:05.290 --> 01:01:07.660
client of that state machine.

01:01:07.660 --> 01:01:12.440
So it's acting the same
way that your UI would act.

01:01:13.210 --> 01:01:14.940
Here's what it looks like.

01:01:14.980 --> 01:01:18.760
On the left,
you can see we're going to linear PCM,

01:01:18.800 --> 01:01:21.690
a 5.1 at 96 kilohertz,
so it can do all that our

01:01:21.690 --> 01:01:23.220
playback architecture can.

01:01:23.220 --> 01:01:26.220
We also get some
interesting format-specific

01:01:27.150 --> 01:01:32.040
settings in this box here,
and you can see that for AAC, too.

01:01:32.040 --> 01:01:33.580
We're doing a 5.1 AAC.

01:01:33.680 --> 01:01:36.080
Notice that the settings
here have changed,

01:01:36.080 --> 01:01:40.080
and they're specific for what AAC can
do in that given configuration.

01:01:40.840 --> 01:01:44.800
Many of you may have gone to the first
Core Audio session on Tuesday morning,

01:01:44.800 --> 01:01:47.820
Core Audio in Depth,
in which James McCartney

01:01:47.820 --> 01:01:51.820
talked to you about audio
converter settings properties,

01:01:51.820 --> 01:01:56.980
which is a CFArray of CFDictionary's that
contain basically properties that

01:01:57.260 --> 01:01:59.350
you can parse and make into UI.

01:01:59.350 --> 01:02:01.330
That's what this guy is doing.

01:02:01.520 --> 01:02:04.330
We are the first client
of that machinery.

01:02:04.380 --> 01:02:09.120
So with that, it's time for the big demo.

01:02:09.120 --> 01:02:10.780
Let's call up all the questions.

01:02:10.840 --> 01:02:12.920
Let's call up all the
quick time audio people,

01:02:12.930 --> 01:02:14.490
and let's do a killer demo.

01:02:30.100 --> 01:02:31.010
and the audio team.

01:02:31.100 --> 01:02:32.090
We have to turn off the mics.

01:02:32.120 --> 01:02:33.060
Paul Robeson: Say it again.

01:02:33.100 --> 01:02:34.090
Say it again, Paul.

01:02:34.110 --> 01:02:36.680
We're going to give you a mic.

01:02:42.780 --> 01:02:44.440
Hello.

01:02:44.440 --> 01:02:45.700
My name is Paul Robbins.

01:02:45.700 --> 01:02:47.870
I manage the audio team.

01:02:47.870 --> 01:02:50.730
And we're going to bring
together everything you've

01:02:50.740 --> 01:02:53.680
seen through the session,
all the technologies

01:02:53.680 --> 01:02:55.070
for an end-to-end demo.

01:02:55.070 --> 01:03:02.520
And what that means is you're going to
watch us record live to Apple lossless,

01:03:02.520 --> 01:03:10.170
export it to MPEG-4 AAC 5.1 surround,
and then play it back for you.

01:03:10.200 --> 01:03:13.160
All without,
you don't even have to leave your seats.

01:03:13.160 --> 01:03:18.180
And we're going to do this with the
help of the engineers you've met,

01:03:18.330 --> 01:03:18.530
Jeff.

01:03:18.530 --> 01:03:24.280
This is Siley, who you've seen before,
and Daniel and Greg and Brad.

01:03:24.280 --> 01:03:28.800
And what we're going to do,
we're making a feature film.

01:03:28.800 --> 01:03:31.880
And we're going to act out an old story.

01:03:31.950 --> 01:03:36.000
You may know it,
those of you in the music world.

01:03:36.000 --> 01:03:40.180
And if you've heard this one before,
don't stop.

01:03:40.290 --> 01:03:40.700
Don't stop us.

01:03:40.700 --> 01:03:42.700
Let us go ahead.

01:06:01.910 --> 01:06:04.340
Can I use this one?

01:06:04.340 --> 01:06:05.300
I'll use this one.

01:06:05.530 --> 01:06:07.620
Okay, so what happened?

01:06:07.620 --> 01:06:09.660
Well, this is really interesting.

01:06:09.660 --> 01:06:14.520
We just made a movie out of a codec that
can currently only do mono or stereo,

01:06:14.900 --> 01:06:17.350
namely Apple lossless,
but we really wanted

01:06:17.350 --> 01:06:20.420
to do a 5.1 recording,
so we did it anyway.

01:06:20.420 --> 01:06:23.850
We recorded to six different
tracks in a QuickTime movie,

01:06:23.850 --> 01:06:28.370
each one of them being mono,
and we labeled them as left, right, mono,

01:06:28.370 --> 01:06:31.800
LFE, left surround, right surround,
and they're all in

01:06:31.800 --> 01:06:33.630
compressed Apple lossless.

01:06:33.630 --> 01:06:35.100
We did this in real time.

01:06:35.100 --> 01:06:38.260
We also, for kicks, recorded video.

01:06:38.260 --> 01:06:40.680
So let's play that back
and let you hear it.

01:06:47.900 --> 01:06:51.900
Back in the days before
digital recording,

01:06:51.900 --> 01:06:54.900
an adventurer came to Africa.

01:06:54.900 --> 01:06:59.780
He hired a native guide
and set off into the bush.

01:06:59.780 --> 01:07:03.700
On the first day out, the drums started.

01:07:10.400 --> 01:07:12.400
The sound of those drums!

01:07:12.400 --> 01:07:14.400
He's not our usual drummer.

01:07:14.400 --> 01:07:22.400
The drums played day and night.

01:07:22.410 --> 01:07:25.400
The explorer was getting very nervous.

01:07:25.420 --> 01:07:32.220
And he asked, "Don't the drums ever
stop?" The guide answered,

01:07:32.220 --> 01:07:32.220
"Drums never stop."

01:07:38.230 --> 01:07:42.260
The Explorer couldn't eat or sleep.

01:07:42.300 --> 01:07:45.810
They've got to stop sometime.

01:07:56.300 --> 01:07:59.530
In the coach days of this,
the Explorer was going crazy.

01:07:59.530 --> 01:08:03.460
When are they going to stop?

01:08:27.900 --> 01:08:28.900
But wait, there's more.

01:08:28.950 --> 01:08:31.900
I told you this was going
to be an end-to-end demo.

01:08:31.940 --> 01:08:34.260
Well, so far we showed you Capture.

01:08:34.310 --> 01:08:36.630
Let's see if we can export this.

01:08:36.700 --> 01:08:38.620
So we've got Apple Lossless.

01:08:38.690 --> 01:08:42.510
Why don't we export it to --
we don't care about video.

01:08:42.720 --> 01:08:47.730
Video's not that important, so you know,
any old codec will do.

01:08:50.200 --> 01:08:53.080
and why don't we go 48.

01:08:53.080 --> 01:08:55.540
Let's do a 5.1 AAC.

01:08:55.540 --> 01:08:56.740
That's impressive.

01:08:56.770 --> 01:08:58.770
We'll go to a high bitrate.

01:08:59.100 --> 01:09:08.900
[Transcript missing]

01:09:12.300 --> 01:09:15.360
Export.

01:09:15.380 --> 01:09:21.320
And we can watch it-- is this going to
work in the QuickTime Player Carbon?

01:09:24.560 --> 01:09:25.830
Okay, maybe it will.

01:09:25.980 --> 01:09:28.020
In the meantime,
let's go to slides because

01:09:28.020 --> 01:09:30.540
watching an export is about as
interesting as watching paint dry.

01:09:30.540 --> 01:09:32.550
Let's go back to slides.

01:09:32.550 --> 01:09:35.340
And I'll tell you the rules for export.

01:09:36.890 --> 01:09:40.850
The rules for export are:
export via convertMovieToFile and

01:09:40.850 --> 01:09:46.970
dataRef opts in automatically unless you
open a movie exporter and pass it in.

01:09:47.380 --> 01:09:50.800
So if you use one of those APIs and you
pass in null for the last parameter,

01:09:50.820 --> 01:09:51.270
you're fine.

01:09:51.300 --> 01:09:52.800
You don't have to make any changes.

01:09:52.970 --> 01:09:55.540
But if you happen to open up
your movie exporter yourself,

01:09:55.540 --> 01:09:57.770
you're going to have to
do a little bit more.

01:09:57.870 --> 01:10:00.800
If you do that,
you're going to have to make this call:

01:10:00.800 --> 01:10:04.800
qt setComponentProperty
passing your exporter instance,

01:10:04.800 --> 01:10:09.350
and you're going to have to tell it to
set this property movieExporterPropertyId

01:10:09.380 --> 01:10:11.800
enableHighResolutionAudio to true.

01:10:11.800 --> 01:10:14.800
That tells QuickTime that you
understand high resolution audio

01:10:14.800 --> 01:10:17.690
and you're ready to talk new APIs.

01:10:17.800 --> 01:10:20.820
If you have opted in,
you only need to make further

01:10:20.860 --> 01:10:25.000
changes if you call movieExport
getSettingsAsAtomContainer and happen

01:10:25.330 --> 01:10:27.800
to parse the settings yourself,
which you should never do.

01:10:27.800 --> 01:10:29.330
We tell you this over and over.

01:10:29.340 --> 01:10:32.050
Don't do this yourself,
because we might change things

01:10:32.050 --> 01:10:33.880
underneath you like we just did.

01:10:34.360 --> 01:10:37.000
You open std audio and
configure the settings.

01:10:37.180 --> 01:10:39.020
Well, if you happen to open
up the std sound dialog,

01:10:39.050 --> 01:10:42.770
you're now going to have to open up the
std audio dialog to configure settings

01:10:43.180 --> 01:10:46.660
because you need to open the new
component and because it has new APIs.

01:10:46.660 --> 01:10:50.610
Oh, let's go back one.

01:10:50.610 --> 01:10:50.610
So...

01:10:51.920 --> 01:10:53.130
Are we done?

01:10:53.350 --> 01:10:56.300
Just about.

01:10:56.450 --> 01:10:58.810
Can we go back to demo?

01:11:03.300 --> 01:11:22.500
[Transcript missing]

01:11:24.690 --> 01:11:28.160
Now notice,
AAC only goes to one flavor of 5.1,

01:11:28.160 --> 01:11:30.120
and it's different than
what we recorded to.

01:11:30.120 --> 01:11:32.480
We recorded left, right, center LFE.

01:11:32.480 --> 01:11:36.340
It needs center, left, right, LSRS LFE,
but the channels all still come

01:11:36.340 --> 01:11:39.600
out in the right place because
we have them labeled properly and

01:11:39.600 --> 01:11:41.650
because our playback engine rocks.

01:11:43.960 --> 01:11:48.630
So go back to slides and let's wrap up.

01:11:48.740 --> 01:11:54.070
We'd like to give a big thank you to--

01:11:54.500 --> 01:12:24.800
[Transcript missing]

01:12:26.730 --> 01:12:28.460
and Motu as well.

01:12:28.460 --> 01:12:31.120
I don't know if any Motu people are here,
but you make great stuff too.

01:12:32.980 --> 01:12:36.990
So do not miss the lab,
the content creation,

01:12:37.090 --> 01:12:40.750
QuickTime development,
and very important, lab hours.

01:12:40.920 --> 01:12:44.600
We, the audio team, will be there in the
lab tomorrow morning,

01:12:44.600 --> 01:12:47.640
specifically talking about
audio and talking about the

01:12:47.640 --> 01:12:49.160
sequence grabber changes.

01:12:49.160 --> 01:12:50.980
So do make use of that time.

01:12:50.980 --> 01:12:55.520
Contact Guillermo Ortiz
if you have any questions.

01:12:55.520 --> 01:12:59.370
And for more information,
I told you we have that sample code.

01:12:59.410 --> 01:13:00.430
It's posted now.

01:13:00.720 --> 01:13:03.250
You can go find it at these places,
connect.apple.com,

01:13:03.260 --> 01:13:05.240
and then look for our session 213.