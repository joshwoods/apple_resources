WEBVTT

00:00:12.140 --> 00:00:14.400
Welcome to an overview
of QuickTime Codecs,

00:00:14.610 --> 00:00:16.360
session 702.

00:00:16.380 --> 00:00:17.500
My name is Dennis Backus.

00:00:17.500 --> 00:00:22.420
I'm a senior technical manager
in the marketing group at Apple.

00:00:22.500 --> 00:00:24.360
And it's my very,
very distinct pleasure to introduce

00:00:25.020 --> 00:00:28.570
from Ursa Major Media-- I got it right--

00:00:28.750 --> 00:00:30.700
Cliff VanMeeter.

00:00:30.700 --> 00:00:33.740
Cliff's been in the
QuickTime business for how many years?

00:00:33.740 --> 00:00:35.690
Fifteen minutes now.

00:00:35.700 --> 00:00:36.640
Fifteen minutes.

00:00:36.640 --> 00:00:36.970
Yeah.

00:00:37.060 --> 00:00:38.110
We pulled him off the street.

00:00:38.120 --> 00:00:39.300
No, no.

00:00:39.300 --> 00:00:41.120
About almost ten years.

00:00:41.180 --> 00:00:43.600
He also runs a really interesting site.

00:00:43.600 --> 00:00:45.210
If you guys haven't seen it,
you should go take a look at it.

00:00:45.220 --> 00:00:46.890
It's called QuickTiming.org.

00:00:46.920 --> 00:00:50.700
It's a very good destination
site for all things QuickTime.

00:00:50.700 --> 00:00:54.190
Both third-party products,
Apple announcements,

00:00:54.190 --> 00:00:57.690
and all sorts of things
that you've never heard of.

00:00:58.460 --> 00:00:59.480
But need to use.

00:00:59.480 --> 00:01:03.120
So without further ado,
let me bring Clifford on stage.

00:01:03.120 --> 00:01:06.730
Question and answer we want
to hold to the very end.

00:01:06.760 --> 00:01:09.430
And we want to make sure that we
use the microphones so that we can

00:01:09.430 --> 00:01:10.970
pick this up for the recording.

00:01:10.980 --> 00:01:11.420
Okay?

00:01:11.420 --> 00:01:12.180
Thanks.

00:01:20.980 --> 00:01:24.250
That's so cool, I get applause,
I haven't even done anything yet.

00:01:24.330 --> 00:01:25.130
I love that.

00:01:25.140 --> 00:01:31.450
Okay, so I'm going to talk a little bit
to you about QuickTime Codecs.

00:01:33.590 --> 00:01:37.500
I'll try to get through,
give you a little bit of information,

00:01:37.500 --> 00:01:42.500
kind of an overview of the different
QuickTime codecs that are available,

00:01:42.630 --> 00:01:44.860
what they're good for,
what you might want to use them

00:01:44.860 --> 00:01:47.590
for in a production environment,
which ones are not

00:01:47.640 --> 00:01:49.380
really all that useful.

00:01:49.380 --> 00:01:51.820
You probably want to skip over.

00:01:53.260 --> 00:01:56.430
As you all might know,
QuickTime supports about

00:01:56.430 --> 00:01:58.900
200 different media types.

00:01:59.220 --> 00:02:02.660
Sometimes that can make it a little
bit confusing as a technology,

00:02:02.920 --> 00:02:06.900
because out of 200 media types,
you're often faced with the question of,

00:02:07.140 --> 00:02:11.650
okay, 200, yeah, but which one do I need
for what I'm doing today?

00:02:11.660 --> 00:02:15.210
So, we're going to try and
cover some of that,

00:02:15.210 --> 00:02:16.360
like I said.

00:02:18.490 --> 00:02:22.660
and Armu with enough information so
that the next project that comes up,

00:02:22.700 --> 00:02:26.500
you'll be able to at least ask
some intelligent questions.

00:02:26.680 --> 00:02:29.200
So, what I want to cover specifically

00:02:30.990 --> 00:02:34.840
Criteria for choosing a codec,
categories and types of codec,

00:02:34.840 --> 00:02:38.760
strengths and weaknesses of
different types of codecs,

00:02:38.760 --> 00:02:40.900
where you might want to use them,
like I said,

00:02:40.910 --> 00:02:44.590
and also give you some resources
where you can learn more.

00:02:47.840 --> 00:02:52.600
So, I'm not going to put a lot of time
and effort in the beginning of this

00:02:52.770 --> 00:02:58.140
talking about exactly how codecs
work or exactly what they do.

00:02:58.200 --> 00:03:03.700
I do want to cover just a little bit
of information on codecs in general.

00:03:04.000 --> 00:03:07.670
Basically,
we use codecs for three reasons:

00:03:07.670 --> 00:03:13.800
save space and transfer time,
save bandwidth, or save processor cycles,

00:03:13.810 --> 00:03:15.980
get them to play on older,
slower machines.

00:03:19.230 --> 00:03:21.670
If you're looking at
uncompressed NTSC video,

00:03:21.670 --> 00:03:25.440
you're talking about 30 frames a
second at two fields per second,

00:03:25.550 --> 00:03:32.590
or 60 images at 64480, or 27 megabytes of
information passing through.

00:03:32.770 --> 00:03:36.030
If you've got a brand
new dual processor G5,

00:03:36.030 --> 00:03:39.090
you might be able to
get playback from that.

00:03:39.230 --> 00:03:43.400
But specifically on older machines,
or if you're transmitting video,

00:03:43.620 --> 00:03:47.620
want to transmit video over the web,
or put it on a CD-ROM,

00:03:47.620 --> 00:03:50.610
that's going to be problematic.

00:03:51.060 --> 00:03:57.910
The DV codec, which compresses to
about 5:1 compression,

00:03:58.130 --> 00:04:02.620
is kind of my example here,
just to kind of work the math.

00:04:02.740 --> 00:04:07.700
So if we're looking at 27 megabytes per
second transfer with uncompressed video,

00:04:07.780 --> 00:04:10.700
we're looking at about
3.5 megabytes per second,

00:04:10.700 --> 00:04:15.300
or about 30,000 kilobits
per second with DV,

00:04:15.300 --> 00:04:20.990
which is probably the codec that
y'all are most familiar with,

00:04:20.990 --> 00:04:22.700
because it's what every digital
video camera out there uses.

00:04:24.370 --> 00:04:26.280
Essentially,
you've got two types of compression.

00:04:26.280 --> 00:04:29.430
I tend to break things
down this way a lot.

00:04:29.430 --> 00:04:31.720
You're going to hear me say
there's two types of this,

00:04:31.790 --> 00:04:33.150
two types of that quite a bit.

00:04:33.170 --> 00:04:36.640
For some reason,
it just works out that way.

00:04:37.480 --> 00:04:40.960
So, with video compressors,
image compressors, audio,

00:04:41.060 --> 00:04:44.940
or specifically with video
compressors and image compressors,

00:04:44.960 --> 00:04:48.430
you've got spatial compression
and temporal compression.

00:04:48.460 --> 00:04:54.420
Spatial compression is what's used for
most codecs that you'd be familiar with

00:04:54.420 --> 00:04:59.220
for images like JPEG and PING and GIF,
where it's essentially either

00:04:59.880 --> 00:05:03.900
finding a way to copy the same
information more efficiently,

00:05:03.900 --> 00:05:06.020
or it's throwing out some
information so that it's not just

00:05:06.100 --> 00:05:07.460
a copy of the same information.

00:05:07.460 --> 00:05:10.820
it stores it in a smaller format.

00:05:11.270 --> 00:05:14.730
Temporal compression is
compression over time,

00:05:14.830 --> 00:05:16.490
hence the stopwatch.

00:05:17.400 --> 00:05:23.600
[Transcript missing]

00:05:24.500 --> 00:05:27.280
An example of spatial compression.

00:05:27.420 --> 00:05:35.240
Typically, when you write an image
in an uncompressed format,

00:05:35.240 --> 00:05:41.710
in some manner you're recording the
information as individual data blocks

00:05:41.920 --> 00:05:44.050
for individual pixels in that image.

00:05:44.080 --> 00:05:48.330
So in other words,
the pixel with coordinate x equals

00:05:48.330 --> 00:05:50.820
zero and y equals zero is black.

00:05:50.980 --> 00:05:57.700
And what happens with uncompressed data
is that amount of information is stored

00:05:57.700 --> 00:06:03.880
for every single individual pixel.

00:06:03.880 --> 00:06:03.880
It's a little bit as if in your

00:06:04.110 --> 00:06:09.820
on your Palm Pilot,
you wrote out Monday 12:30 lunch,

00:06:09.820 --> 00:06:17.690
Tuesday 12:30 lunch,
Wednesday 12:30 lunch, etc., etc., etc.

00:06:18.200 --> 00:06:20.740
So what the compressor does is
it finds a more efficient way

00:06:20.740 --> 00:06:22.000
of writing that information.

00:06:22.000 --> 00:06:27.120
It essentially says,
Monday through Friday, 12:30, lunch.

00:06:27.810 --> 00:06:35.500
So it's getting rid of information
without getting rid of data.

00:06:35.940 --> 00:06:37.920
Does that make sense to everybody?

00:06:37.970 --> 00:06:39.100
Good.

00:06:39.100 --> 00:06:42.000
I like to see the nodding,
not the shaking.

00:06:42.720 --> 00:06:46.970
Um, JPEG,
my two examples here are TIFF and JPEG.

00:06:47.120 --> 00:06:49.870
TIFF is essentially a
lossless compressor.

00:06:49.870 --> 00:06:53.540
So it finds an efficient way of writing
that information without actually

00:06:53.540 --> 00:06:55.700
throwing out any of the important data.

00:06:55.700 --> 00:06:57.700
You don't lose any of the image.

00:06:57.700 --> 00:07:02.540
JPEG is a lossy compressor,
so it does throw out some information.

00:07:02.700 --> 00:07:04.950
It starts out at higher
levels of compression,

00:07:05.050 --> 00:07:09.700
throwing out information that's
theoretically beyond human perception.

00:07:09.700 --> 00:07:15.740
So, colors that we can't see,
bits of detail that are mathematically

00:07:15.740 --> 00:07:20.620
able to be generated but can't
really be perceived by people.

00:07:20.680 --> 00:07:23.670
As you squeeze it
further and further down,

00:07:23.860 --> 00:07:28.580
it begins to throw out more
and more important information.

00:07:28.840 --> 00:07:32.880
So it, in effect, degrades the image.

00:07:32.880 --> 00:07:36.970
You're sacrificing image
quality to recover some size.

00:07:38.560 --> 00:07:44.420
So here's an example of the
same image compressed at three

00:07:44.460 --> 00:07:46.940
different levels with JPEG.

00:07:47.080 --> 00:07:50.850
If you look really
carefully right in here,

00:07:51.270 --> 00:08:00.600
and right in here and in the table here,
this is the least amount of compression.

00:08:00.980 --> 00:08:09.870
So, it's the most image information,
the least amount of compression.

00:08:09.870 --> 00:08:15.250
So, you don't see a lot of artifacting,
you don't see a lot of

00:08:15.250 --> 00:08:17.530
little sort of schmutz.

00:08:18.410 --> 00:08:19.290
Technical term.

00:08:19.430 --> 00:08:22.450
Should write that one down.

00:08:22.600 --> 00:08:24.840
When you look at this one,
this is the highest compression.

00:08:24.840 --> 00:08:28.800
You can start right in here,
particularly, to see some artifacting.

00:08:28.920 --> 00:08:32.930
In other words,
JPEG is averaging information

00:08:33.360 --> 00:08:35.700
across a group of pixels.

00:08:35.940 --> 00:08:42.550
So that it can store the resulting
information in a smaller format.

00:08:43.130 --> 00:08:46.440
And then this is medium compression,
which is still pretty decent quality,

00:08:46.440 --> 00:08:49.370
but just in a few areas,
particularly in the

00:08:49.370 --> 00:08:50.800
stained glass in here.

00:08:50.800 --> 00:08:54.830
And like right around in here,
you can start to see some artifacting.

00:08:56.880 --> 00:09:01.800
So, temporal compression is what
we typically use for video.

00:09:01.800 --> 00:09:10.300
And really good codecs, MPEG-4, Sorenson,
use a combination of spatial

00:09:10.300 --> 00:09:13.780
compression and temporal compression.

00:09:13.800 --> 00:09:17.600
In other words,
the temporally compressed frames,

00:09:17.720 --> 00:09:19.900
you're throwing out more data,

00:09:20.360 --> 00:09:25.340
The codec is examining the
video and trying to get just

00:09:25.370 --> 00:09:27.940
the information that's changed.

00:09:27.940 --> 00:09:31.630
So from frame one to frame two,
the second frame,

00:09:31.730 --> 00:09:34.740
it's trying to store just the
difference between those two things.

00:09:34.740 --> 00:09:38.980
And in fact, that second kind of frame,
we call a delta frame

00:09:39.100 --> 00:09:40.840
or a difference frame.

00:09:43.080 --> 00:09:45.300
Then every once in a
while it sets a keyframe,

00:09:45.300 --> 00:09:49.440
which is the nice, pristine,
temporally compressed image.

00:09:49.480 --> 00:09:53.350
Uh, spatially compressed image.

00:09:54.040 --> 00:09:59.530
So here's an example
with Cinepac compression.

00:09:59.740 --> 00:10:03.740
CinePack is kind of an old codec,
but it shows the

00:10:03.740 --> 00:10:06.300
differences off really nice.

00:10:06.630 --> 00:10:09.360
Here's the keyframe.

00:10:09.730 --> 00:10:13.360
Which has a fair amount of detail,
even though it's obviously

00:10:13.360 --> 00:10:16.600
being blown up quite a bit here,
and you're getting a lot of jaggies.

00:10:16.600 --> 00:10:21.600
And then here's the delta frame,
or difference frame.

00:10:21.600 --> 00:10:25.910
So you can see it's not storing
the same amount of detail at all.

00:10:26.210 --> 00:10:28.180
Much more detail over here,
much less here.

00:10:28.180 --> 00:10:32.600
And in large part, we get away with that
because video moves.

00:10:34.870 --> 00:10:39.110
So we don't always have to be presenting
the same level of information to the

00:10:39.130 --> 00:10:41.220
viewer because it sticks in their brain.

00:10:41.220 --> 00:10:46.630
They don't see the fact that we're
degrading from one image to the next.

00:10:47.560 --> 00:10:52.500
So,
here are the video rules of reduction.

00:10:52.620 --> 00:10:56.280
There's three ways to reduce
file size and/or bandwidth

00:10:56.440 --> 00:10:59.500
requirements for a piece of video.

00:10:59.500 --> 00:11:03.880
You can reduce the data rate, that is,
increase the compression.

00:11:04.500 --> 00:11:07.800
You can reduce the
physical size of the image,

00:11:07.890 --> 00:11:09.440
reduce the number of pixels.

00:11:09.530 --> 00:11:13.100
So instead of 640 by 480, you do...

00:11:13.560 --> 00:11:18.840
"You can reduce the size,
you can reduce the requirements,

00:11:18.950 --> 00:11:22.980
or you can reduce the frame rate,
reduce the number of images that

00:11:22.980 --> 00:11:25.120
you're storing in that video.

00:11:25.280 --> 00:11:34.870
All of those things allow us to
deliver video through a narrower pipe."

00:11:37.040 --> 00:11:40.240
So these are the things that I looked at.

00:11:40.250 --> 00:11:44.800
If you go to QuickTiming.org,
go to the resources section,

00:11:44.800 --> 00:11:49.820
you'll find a little place
that I call Codec Central,

00:11:50.010 --> 00:11:53.210
partly as an homage to the
old Terran Codec Central.

00:11:53.220 --> 00:11:58.830
And in Codec Central,
I did a comparison of basically

00:11:58.890 --> 00:12:02.210
every codec I could get my hands on.

00:12:02.480 --> 00:12:05.880
So I sat down and I figured out exactly
what it is that I want to compare and

00:12:05.880 --> 00:12:09.400
what my standards were going to be
for comparing one codec to another.

00:12:09.440 --> 00:12:12.940
And pretty much in this presentation
I'm going to use those same standards.

00:12:12.990 --> 00:12:20.510
And what I look at is quality, size,
compatibility, and usability.

00:12:21.490 --> 00:12:28.560
So for compatibility specifically,
I looked at a couple of different things.

00:12:28.560 --> 00:12:28.560
One is, if

00:12:29.440 --> 00:12:33.050
How old a version of
QuickTime will play it?

00:12:33.090 --> 00:12:36.090
Can you play this codec in QuickTime 2?

00:12:36.190 --> 00:12:39.510
Can you play it in QuickTime 5 and above?

00:12:40.070 --> 00:12:43.210
I also looked at
compatibility cross-platform.

00:12:43.520 --> 00:12:44.380
Does it work on Windows?

00:12:44.380 --> 00:12:45.350
Does it work on Macs?

00:12:45.420 --> 00:12:47.600
Does it work on Linux?

00:12:47.780 --> 00:12:52.410
And I also looked at compatibility
with other players besides QuickTime.

00:12:55.010 --> 00:12:59.350
Okay, it's math.

00:12:59.540 --> 00:13:01.360
I'm not going to spend
a lot of time on this.

00:13:01.500 --> 00:13:05.980
This is Sorenson's formula for
kind of helping you figure out what

00:13:06.110 --> 00:13:09.720
data rates you want to shoot for,
for a given audience.

00:13:09.850 --> 00:13:11.340
Okay?

00:13:11.370 --> 00:13:16.210
And the idea here is you want to look at,

00:13:17.000 --> 00:13:21.840
Coming up with a number
based on this formula.

00:13:21.840 --> 00:13:26.660
Once you've come up with that number,
usually your best quality is going to

00:13:26.860 --> 00:13:31.260
be at no more than half that number,
and you probably aren't going to have

00:13:31.260 --> 00:13:32.740
to go to more than twice that number.

00:13:32.740 --> 00:13:38.320
Now I'll be honest with you,
from what I've seen so far of H.264,

00:13:38.320 --> 00:13:41.090
this may all be kind of irrelevant.

00:13:44.100 --> 00:13:47.480
Okay,
so back to that two types thing again.

00:13:47.530 --> 00:13:50.100
There's two types of video codecs.

00:13:50.180 --> 00:13:54.780
Transfer codecs and delivery codecs.

00:13:54.780 --> 00:13:54.780
Transfer codecs,

00:13:55.780 --> 00:14:00.690
are used to move video from
one location to another,

00:14:00.750 --> 00:14:03.820
generally within a
production environment.

00:14:04.090 --> 00:14:07.230
So a transfer codec,
I used to work for a video

00:14:07.230 --> 00:14:12.180
effects house out in LA,
and generally we used Animation Best,

00:14:12.230 --> 00:14:17.910
which is a lossless codec
when you're at that level,

00:14:18.060 --> 00:14:19.480
at best.

00:14:20.060 --> 00:14:23.100
And that allowed us to
get smaller file sizes,

00:14:23.100 --> 00:14:26.100
reduce our transfer
times over the network.

00:14:26.740 --> 00:14:31.000
Pixlet is another example
of a transfer codec.

00:14:31.000 --> 00:14:33.720
It doesn't give you the kinds
of file sizes that you're going

00:14:33.720 --> 00:14:36.230
to need to be able to deliver,
say, over the internet,

00:14:36.230 --> 00:14:38.600
to deliver web video.

00:14:38.820 --> 00:14:45.220
But it is going to give you
minimally lossy or lossless quality.

00:14:46.550 --> 00:14:48.130
Now the other thing is delivery codecs.

00:14:48.210 --> 00:14:52.120
Delivery codecs are going to
give you just a whole heck

00:14:52.130 --> 00:14:54.330
of a lot more compression.

00:14:54.590 --> 00:14:57.740
But are going to throw
out some information.

00:14:57.740 --> 00:15:01.920
You're going to sacrifice
quality to get playability.

00:15:04.870 --> 00:15:08.080
So the first thing we're going
to look at is delivery codecs.

00:15:08.170 --> 00:15:10.490
Now with delivery codecs,

00:15:12.360 --> 00:15:16.300
I'm sorry, I was distracted by the
shiny thing at my feet.

00:15:16.470 --> 00:15:20.230
With delivery codecs,
you're typically going to see compression

00:15:20.800 --> 00:15:25.270
rates somewhere up into the 90%.
So if you have a one megabyte file,

00:15:25.300 --> 00:15:28.220
or let's say you have
a one gigabyte file,

00:15:28.290 --> 00:15:34.170
with a 90%, even 99% compression,
you're talking about being able to

00:15:34.200 --> 00:15:37.130
compress it down to a few megabytes.

00:15:41.100 --> 00:15:47.200
[Transcript missing]

00:15:48.210 --> 00:15:51.900
So I was in the room last night
making a few little changes.

00:15:51.900 --> 00:15:57.530
The first thing we're gonna look at
is the current MPEG-4 in QuickTime,

00:15:57.640 --> 00:15:58.630
which is...

00:15:59.000 --> 00:16:02.100
For simplicity's sake,
if you'll pardon the pun,

00:16:02.100 --> 00:16:07.970
the best way to refer to it,
I've found so far, is MPEG-4 simple,

00:16:08.060 --> 00:16:09.980
because it's based on the
advanced simple profile.

00:16:12.770 --> 00:16:14.600
Good quality.

00:16:14.710 --> 00:16:21.800
It's currently... It's somewhat
limited by the current MPEG-4 spec.

00:16:21.810 --> 00:16:21.810
The...

00:16:22.170 --> 00:16:26.420
MPEG-4 Simple has been
around for a long time.

00:16:26.750 --> 00:16:29.580
How many people have ever seen MPEG-3?

00:16:30.360 --> 00:16:32.340
Yeah, see, nobody's seen MPEG-3.

00:16:32.340 --> 00:16:36.840
It didn't exist because nobody
could agree on what the heck it was.

00:16:36.990 --> 00:16:40.310
So they skipped over
from MPEG-2 to MPEG-4.

00:16:40.440 --> 00:16:43.040
And it took them a long
time to come up with MPEG-4.

00:16:43.220 --> 00:16:46.720
And by the time everybody got
their ducks in a row on it,

00:16:46.720 --> 00:16:52.020
it had already been surpassed by some
more modern codecs like Sorenson 3.

00:16:52.850 --> 00:16:55.650
So the quality is OK.

00:16:55.730 --> 00:16:58.940
It's good.

00:16:58.940 --> 00:17:01.580
We're going to look at
264 here in a second,

00:17:01.580 --> 00:17:04.850
which completely blows it away.

00:17:05.140 --> 00:17:06.820
The size is good.

00:17:06.830 --> 00:17:09.210
The compatibility is excellent.

00:17:10.360 --> 00:17:12.840
works in QuickTime, works in Reel,
there's a ton of third

00:17:12.990 --> 00:17:16.250
party players out there,
and it's been around since the

00:17:16.300 --> 00:17:19.040
introduction of QuickTime 6.

00:17:19.190 --> 00:17:21.940
So, which has been a while now.

00:17:22.110 --> 00:17:24.790
And it's a good general purpose codec.

00:17:28.730 --> 00:17:36.440
H.264 or AVC,
which is Advanced Video Codec.

00:17:36.570 --> 00:17:38.220
Quick overview here.

00:17:38.840 --> 00:17:43.350
Excellent, excellent, excellent,
excellent.

00:17:44.990 --> 00:17:47.360
We're not going to see it for a while.

00:17:47.470 --> 00:17:53.400
So we're going to talk about
some of the other codecs as well.

00:17:53.500 --> 00:17:56.200
I'm in the same boat that
the rest of you all are in.

00:17:56.240 --> 00:18:00.230
I'm going to go home and I'm going to
play around with it and see what I get.

00:18:00.570 --> 00:18:03.580
But again,
from everything I've seen so far,

00:18:04.750 --> 00:18:07.680
This is going to be the way
to go for most general purpose

00:18:07.680 --> 00:18:10.120
encoding come early next year.

00:18:14.940 --> 00:18:21.400
Sorenson Video 3 is my current
favorite general purpose codec.

00:18:21.440 --> 00:18:24.490
It's higher quality than MPEG-4.

00:18:24.900 --> 00:18:35.200
[Transcript missing]

00:18:35.780 --> 00:18:42.540
I actually started out as an illustrator,
so I'm something of an image snob.

00:18:42.540 --> 00:18:47.860
For pure quality,
if I'm looking to go with something

00:18:47.860 --> 00:18:53.100
that's just got to be pretty,
I always fall back to SV3.

00:18:54.660 --> 00:18:59.320
Quality is excellent, the size is good,
compatibility is good,

00:18:59.320 --> 00:19:01.700
and the usability is good.

00:19:03.880 --> 00:19:08.510
Now,
notice my little footnote down there.

00:19:08.640 --> 00:19:12.310
We'd be having a different
discussion a year from now.

00:19:12.870 --> 00:19:22.290
Now, Sorenson also has an MPEG-4 codec
that is slightly different from

00:19:22.290 --> 00:19:23.420
Apple's MPEG-4 codec encoder.

00:19:23.910 --> 00:19:27.630
And that's included with
Sorenson Squeeze Suite.

00:19:27.690 --> 00:19:32.850
You get MPEG-4, you get SV3,
and you get the Spark codec,

00:19:32.970 --> 00:19:35.700
which is for Flash, which kind of sucks,
but you know,

00:19:35.810 --> 00:19:38.510
you've got to take the bad with the good.

00:19:38.910 --> 00:19:44.680
Good, good, excellent, good.

00:19:44.870 --> 00:19:47.380
Again, it's based on the MPEG-4 spec.

00:19:47.520 --> 00:19:51.260
It's ISO compliant,
so anything that plays MPEG-4 is going

00:19:51.260 --> 00:19:53.800
to play the Sorenson codec as well.

00:19:53.800 --> 00:19:55.880
Usability is good.

00:19:56.400 --> 00:20:01.040
It's still limited by the
MPEG-4 simple profile.

00:20:01.190 --> 00:20:04.800
It doesn't have the level of
quality that you're going to see

00:20:04.800 --> 00:20:08.010
with some proprietary codecs,
and it doesn't have the level

00:20:08.010 --> 00:20:11.550
of quality that H.264 is going
to bring us in a few months.

00:20:15.330 --> 00:20:25.470
3IVX is, at this point,
my favorite MPEG-4 variant.

00:20:26.950 --> 00:20:30.880
By the way, just so everyone knows,
all opinions expressed during

00:20:30.970 --> 00:20:32.530
this presentation are mine.

00:20:32.560 --> 00:20:38.510
It's very good quality.

00:20:40.420 --> 00:20:41.610
gives you excellent size.

00:20:41.720 --> 00:20:43.240
The compatibility is excellent.

00:20:43.400 --> 00:20:48.100
It's right now already works
for a number of set-top boxes,

00:20:48.160 --> 00:20:49.260
a number of players.

00:20:49.260 --> 00:20:52.580
It's very widespread on
the Windows platform.

00:20:53.720 --> 00:20:57.960
And I think the usability is excellent
because of all those reasons.

00:21:01.770 --> 00:21:08.960
H.263 is mostly kind of
irrelevant at this point,

00:21:08.960 --> 00:21:15.640
but I wanted to touch on most of
what you see when you pop up that

00:21:15.640 --> 00:21:16.990
little export menu in QuickTime Pro.

00:21:17.450 --> 00:21:22.780
It's marginal quality, good size,
very good compatibility.

00:21:22.780 --> 00:21:25.240
It's been around for a long time.

00:21:25.280 --> 00:21:28.100
But I still find the usability is poor.

00:21:28.200 --> 00:21:31.740
Now that said,
there are instances where I will

00:21:31.740 --> 00:21:37.680
fall back to H.263 because it
has very low processor overhead.

00:21:38.190 --> 00:21:44.520
So I've used it to do things like,
I built a video puzzle for a client,

00:21:44.520 --> 00:21:48.490
where you actually can grab pieces
of the video and move them around,

00:21:48.490 --> 00:21:52.690
and all the video is moving on all
the pieces all at the same time.

00:21:52.930 --> 00:21:59.330
Now, if I tried to do that with SV3 on
anything made before the last two years,

00:21:59.340 --> 00:22:00.940
it would choke and die.

00:22:01.190 --> 00:22:06.570
But with H263, it was light enough
that it actually worked.

00:22:06.570 --> 00:22:12.100
And in that particular instance,
quality was not paramount,

00:22:12.180 --> 00:22:13.950
playability was.

00:22:17.270 --> 00:22:29.990
Zygo Video is another codec
that I like a whole lot.

00:22:29.990 --> 00:22:29.990
It's a third-party
codec from Zygo Digital,

00:22:29.990 --> 00:22:29.990
I think.

00:22:29.990 --> 00:22:29.990
They just changed their name.

00:22:30.890 --> 00:22:36.140
It's the codec I generally go to
these days if I'm doing live streams.

00:22:36.280 --> 00:22:40.300
It's, again, quality is good.

00:22:40.380 --> 00:22:44.500
At high data rates,
it's clearly inferior to SV3 and MPEG-4,

00:22:44.680 --> 00:22:47.180
either Apple's or Sorenson's.

00:22:47.360 --> 00:22:52.570
Um, but at very low data rates,
it really starts to pull ahead of just

00:22:52.570 --> 00:22:54.100
about everything else that's out there.

00:22:54.100 --> 00:22:57.450
And when you're doing
encoding for streaming,

00:22:57.580 --> 00:23:01.340
you don't have the luxury of
the kind of spikes that you get,

00:23:01.560 --> 00:23:04.030
data rate spikes that you
get with something like SV3.

00:23:04.110 --> 00:23:05.990
You need something
that's going to give you,

00:23:05.990 --> 00:23:08.350
well, you know,
that's just going to get it there.

00:23:11.280 --> 00:23:12.820
So, compatibility is fair.

00:23:12.820 --> 00:23:17.640
It's not part of the QuickTime delivery
when you install QuickTime.

00:23:17.640 --> 00:23:21.140
It's something that people will
have to go and get and download

00:23:21.150 --> 00:23:23.160
to be able to look at your video.

00:23:23.160 --> 00:23:25.920
And I always think of
that as a disadvantage.

00:23:26.540 --> 00:23:30.400
But I've used it in a couple of places
where I have clients who are delivering

00:23:30.400 --> 00:23:34.370
real streams inside the enterprise,
and I essentially have control

00:23:34.680 --> 00:23:38.720
over what goes on all the
machines within the enterprise.

00:23:38.720 --> 00:23:43.130
So I can say, this has to be installed on
everybody's machine for them

00:23:43.220 --> 00:23:45.510
to watch the president's talk.

00:23:50.520 --> 00:23:53.120
Okay, side-by-side comparison.

00:23:53.120 --> 00:23:55.790
Okay, I worked hard on this.

00:23:55.880 --> 00:23:57.880
Ooh, ah, make noises, geez.

00:23:58.130 --> 00:24:00.060
I know you're out there,
I can hear you breathing.

00:24:00.080 --> 00:24:07.070
Okay, so, this is 3IVX.

00:24:07.550 --> 00:24:11.640
This piece is Apple's MPEG, simple codec.

00:24:11.830 --> 00:24:14.310
And this is the SP3 codec.

00:24:14.670 --> 00:24:17.660
So you can clearly see that
there's a little bit of quality

00:24:17.660 --> 00:24:20.000
difference between the three.

00:24:20.900 --> 00:24:26.850
I actually tried to get it so that
the quality was about the same,

00:24:26.850 --> 00:24:30.180
because this is what
I really wanted to show you.

00:24:30.310 --> 00:24:34.200
Even when the quality is the same,
the math is not.

00:24:34.390 --> 00:24:40.830
3IVX, I got a file size of 428
kilobytes at a data rate of 105.

00:24:40.950 --> 00:24:43.920
With Apple's MPEG,
I got a file size of one

00:24:43.920 --> 00:24:50.050
megabyte and a data rate of 254.

00:24:51.570 --> 00:24:55.660
There's not a tremendous difference
in quality between those two things,

00:24:55.690 --> 00:24:56.020
is there?

00:24:56.020 --> 00:25:02.310
But I'm getting a much more
deliverable file size with this.

00:25:03.280 --> 00:25:08.760
And then even SV3 in this particular
instance came out a little bit ahead.

00:25:09.940 --> 00:25:15.110
So, on the encode side though,
Apple's MPEG-4 had the

00:25:15.230 --> 00:25:21.190
fastest encode time,
SV3 had the slowest, and 3IVX came out

00:25:21.190 --> 00:25:23.140
somewhere in the middle.

00:25:25.610 --> 00:25:27.250
These are, by the way, my three choices.

00:25:27.250 --> 00:25:32.980
If you're doing web video or CD-ROM,
I nearly always go with

00:25:33.090 --> 00:25:33.870
one of these three.

00:25:34.090 --> 00:25:37.460
3IVX has the disadvantage, again,
that they're going to have to

00:25:37.560 --> 00:25:40.460
go and get it and download it,
or you're going to have to include

00:25:40.480 --> 00:25:43.680
it in an installer on a CD if
you're distributing that way.

00:25:43.680 --> 00:25:49.660
Apple's MPEG-4 and SV3 are both part
of the current QuickTime distribution.

00:25:52.790 --> 00:25:55.040
Transfer Codecs.

00:25:55.040 --> 00:26:01.800
As I said, Transfer Codecs exist so that
we can compress a little bit,

00:26:01.940 --> 00:26:04.260
retain the information,
and move things more easily

00:26:04.260 --> 00:26:05.300
from one place to another.

00:26:05.310 --> 00:26:07.410
Hence the transfer.

00:26:08.900 --> 00:26:10.550
So, DV.

00:26:11.320 --> 00:26:15.950
I've got like six slides worth of DV.

00:26:16.030 --> 00:26:18.200
It's like they're all-- I'm going to

00:26:18.720 --> 00:26:21.540
I feel like they're all Baptists,
but some of them are Southern Baptists,

00:26:21.540 --> 00:26:24.260
and some of them are like, you know,
Evangelical,

00:26:24.260 --> 00:26:26.980
and there's a few Pentecostals, and,
you know, they're all over the place.

00:26:28.990 --> 00:26:32.410
So, DV comes in,
or to put it another way,

00:26:32.670 --> 00:26:35.800
DV comes in multiple
flavors in QuickTime.

00:26:36.280 --> 00:26:39.480
And some of these are
more for the pro apps,

00:26:39.580 --> 00:26:42.460
and some of them are sort of the
standard DV that you're seeing

00:26:42.460 --> 00:26:44.150
when you go out and buy a camera.

00:26:44.150 --> 00:26:48.120
I'm really going to kind of blow
through these a little bit quickly.

00:26:50.050 --> 00:26:53.660
But I want to give you
a little bit of an idea.

00:26:53.660 --> 00:27:03.780
DVNTSC and PAL, quality is good,
size is fair, compatibility is excellent,

00:27:03.950 --> 00:27:09.420
usability is good.

00:27:09.460 --> 00:27:09.480
DVC Pro,

00:27:10.620 --> 00:27:12.890
Yeah, it's about the same.

00:27:12.910 --> 00:27:14.870
About the same.

00:27:15.080 --> 00:27:23.310
Okay, so we've worked our way past DV,
and now we're to my current

00:27:23.310 --> 00:27:25.570
favorite transfer codec.

00:27:25.660 --> 00:27:28.040
Which is animation.

00:27:28.120 --> 00:27:31.070
And as I was mentioning before,
back when I worked in the

00:27:31.310 --> 00:27:34.180
visual effects company,
animation is what we typically use to

00:27:34.180 --> 00:27:36.340
move things from one machine to another.

00:27:36.480 --> 00:27:40.010
Or make a file small enough,
a scene file small enough that we

00:27:40.010 --> 00:27:44.660
could write it to a CD and deliver it
to a client or do something like that.

00:27:44.870 --> 00:27:48.570
At 100% animation is lossless.

00:27:48.890 --> 00:27:54.870
Um, it may also not do a whole heck
of a lot of compressing for you.

00:27:54.870 --> 00:28:00.700
Because it was really designed to work
primarily with large flat areas of color.

00:28:00.790 --> 00:28:05.390
And with large flat areas of color,
you can get really phenomenal

00:28:05.390 --> 00:28:06.960
levels of compression.

00:28:06.960 --> 00:28:10.440
But if you're looking at standard video,
at best,

00:28:10.450 --> 00:28:15.840
you're only going to get about 50%. Now,
that's not so bad.

00:28:15.840 --> 00:28:21.050
50% is about what you can expect
from most lossless codecs.

00:28:21.260 --> 00:28:28.710
Animation also has the
advantage that it supports,

00:28:28.710 --> 00:28:28.710
somewhere here,

00:28:28.950 --> 00:28:29.480
Might not be there.

00:28:29.580 --> 00:28:32.800
Anyway, it has the advantage that
it supports transparency,

00:28:32.800 --> 00:28:34.170
so it supports alpha channels.

00:28:34.240 --> 00:28:37.810
So if you're working in
After Effects or something like that,

00:28:37.860 --> 00:28:40.000
it's a good codec to work in.

00:28:40.000 --> 00:28:41.760
It's going to save you a
little bit of drive space,

00:28:41.760 --> 00:28:46.120
and it's going to allow you
to work with alpha channels.

00:28:46.240 --> 00:28:49.220
And in general,
just about any professional

00:28:49.220 --> 00:28:53.480
video editing application is
going to support animation.

00:28:57.580 --> 00:28:59.100
Pixlet.

00:28:59.170 --> 00:29:00.010
Pixlet's new.

00:29:00.310 --> 00:29:03.000
I don't know how many of you
guys have had a chance to play

00:29:03.000 --> 00:29:04.300
around with it a little bit.

00:29:04.550 --> 00:29:10.610
Pixlet does a really,
really good job as a transfer codec.

00:29:10.870 --> 00:29:14.900
It is lossy, not lossless.

00:29:15.050 --> 00:29:19.950
So you are going to give up some data.

00:29:20.210 --> 00:29:25.770
Making it a real good archive codec,
but you don't want to be opening files

00:29:25.770 --> 00:29:28.840
and resaving them over and over again,
because you're going to

00:29:28.840 --> 00:29:30.350
continue to throw stuff away.

00:29:32.750 --> 00:29:36.960
Good size,
you can get a 6GB file down at near

00:29:36.960 --> 00:29:39.400
DVD quality down to about 250MB.

00:29:39.400 --> 00:29:42.870
That's pretty decent savings.

00:29:43.080 --> 00:29:46.700
If you're hurting for hard drive space,
it's a real good way to go.

00:29:46.760 --> 00:29:48.760
I listed the compatibility
as poor though.

00:29:48.850 --> 00:29:57.000
Right now it really only works in
OS X and that's kind of limited.

00:29:57.000 --> 00:30:02.580
As I say, usability is limited.

00:30:04.500 --> 00:30:09.950
Shear Video is a third-party
codec that I also like very

00:30:09.950 --> 00:30:12.520
much as a transfer codec.

00:30:12.760 --> 00:30:19.630
It is completely lossless and
preserves the image perfectly.

00:30:21.420 --> 00:30:25.360
It's only going to give you
about two to one compression.

00:30:25.380 --> 00:30:28.560
It's OS X only.

00:30:29.710 --> 00:30:33.000
In general,
I would try animation best first

00:30:33.420 --> 00:30:37.350
and use Pixlet as a fallback,
unless you happen to work in

00:30:37.350 --> 00:30:41.800
a studio that is all OS X G5s.

00:30:46.500 --> 00:30:53.320
This is the best way to save and
transfer video if you can afford it.

00:30:56.080 --> 00:31:00.730
Apple None is none, no compression.

00:31:00.730 --> 00:31:03.230
It's completely uncompressed format.

00:31:03.430 --> 00:31:07.400
It's going to take up one
heck of a lot of drive space,

00:31:07.510 --> 00:31:10.590
but if you're pulling it
into other applications like

00:31:10.780 --> 00:31:13.880
After Effects or Final Cut or
something like that to work on it,

00:31:13.880 --> 00:31:19.770
and you're likely to have to be
moving files around and chopping them

00:31:19.770 --> 00:31:24.650
up and saving them multiple times,
and you've got the room,

00:31:24.650 --> 00:31:27.540
that's the best way
to move things around.

00:31:28.640 --> 00:31:32.680
Otherwise,
go with animation best as your first try,

00:31:32.680 --> 00:31:38.000
and then go to something like Shear
Video or Pixlet as your second pass

00:31:38.060 --> 00:31:43.670
if animation isn't giving you the
kind of compression that you need.

00:31:47.820 --> 00:31:48.610
So other codecs.

00:31:48.800 --> 00:31:52.290
There are a bunch of other video codecs.

00:31:52.440 --> 00:31:55.100
Digital Anarchy makes
one called Microcosm,

00:31:55.140 --> 00:31:57.690
which is a 64-bit lossless codec.

00:31:57.700 --> 00:32:03.260
The last time I looked,
the only thing that really supported

00:32:03.320 --> 00:32:08.620
64-bit video was After Effects,
I think 6.

00:32:09.040 --> 00:32:13.980
So that makes it poor in
the compatibility front.

00:32:14.100 --> 00:32:16.680
Digital Anarchy also makes
something called NUN16,

00:32:16.680 --> 00:32:21.980
which again is a 64-bit lossless,
no compression codec.

00:32:21.990 --> 00:32:27.130
TechSmith makes a codec called InSharpen,
which was really designed

00:32:27.130 --> 00:32:28.780
for doing screen captures.

00:32:28.780 --> 00:32:34.750
It deals with detailed things
like text extremely well.

00:32:35.190 --> 00:32:39.920
Again, excellent quality, good size,
poor compatibility.

00:32:39.920 --> 00:32:44.050
It's not part of the standard
QuickTime distribution.

00:32:44.050 --> 00:32:48.860
It's not part of the
Apple component download program.

00:32:48.860 --> 00:32:50.670
They have to know where it is,
they have to go,

00:32:50.680 --> 00:32:52.610
they have to hunt it out,
they've got to download

00:32:52.610 --> 00:32:53.820
it if they want to use it.

00:32:56.230 --> 00:32:59.660
And then there's a whole
bunch of legacy codecs,

00:32:59.660 --> 00:33:03.140
of which the only one that's
really notable at all,

00:33:03.140 --> 00:33:05.540
I think, is Cinepac.

00:33:05.570 --> 00:33:09.080
And that's only because Cinepac has
made something of a comeback in the

00:33:09.080 --> 00:33:14.370
last year or so as the compressor
of choice for the Konoma Player,

00:33:14.530 --> 00:33:20.380
which allows you to play
back movies on Palm devices.

00:33:24.510 --> 00:33:38.890
Audio Codecs.

00:33:38.890 --> 00:33:38.890
It's that two kinds of thing thing again.

00:33:38.890 --> 00:33:38.890
There's two kinds of audio codecs.

00:33:38.890 --> 00:33:38.890
I amuse myself.

00:33:39.650 --> 00:33:44.000
Um, oops, sorry,
let me go back just a sec.

00:33:44.040 --> 00:33:51.500
Basically, the human ear is more
sensitive to slight variations

00:33:53.220 --> 00:33:56.530
When you're listening to things
like music and sound effects,

00:33:56.540 --> 00:33:59.860
then you are when you're listening
to things like the human voice.

00:33:59.960 --> 00:34:03.250
So there's really two kinds of
codecs for dealing with audio.

00:34:03.480 --> 00:34:08.200
There are codecs that are really
good at compressing sounds,

00:34:08.260 --> 00:34:11.040
Like music, like sound effects,
et cetera, et cetera.

00:34:11.040 --> 00:34:15.940
And there are codecs that are
really good at compressing voice.

00:34:16.450 --> 00:34:19.370
And as long as you don't get
these two things confused,

00:34:19.510 --> 00:34:21.280
you'll do fine.

00:34:21.380 --> 00:34:24.880
When I looked at these codecs
that we're about to go through,

00:34:24.960 --> 00:34:28.890
in terms of usability, compatibility,
etc., you'll often see

00:34:28.890 --> 00:34:31.900
that what I'm saying is,
for what they're designed for,

00:34:31.900 --> 00:34:33.250
they're excellent.

00:34:33.250 --> 00:34:36.490
But if you try to use a...

00:34:36.820 --> 00:34:40.420
"If you use a codec that was designed
for dealing with the voice to compress

00:34:40.430 --> 00:34:44.260
something like music or sound effects,
you're not going to get a

00:34:44.260 --> 00:34:45.990
pleasant sounding result.

00:34:46.030 --> 00:34:49.290
And if you try to use a codec
that was designed more to handle

00:34:49.290 --> 00:34:52.420
music and general compression,
you're not going to get

00:34:52.500 --> 00:34:54.140
as much compression."

00:34:56.060 --> 00:34:59.940
So, again, I'm going to skip over a
little bit of the detail,

00:35:00.020 --> 00:35:05.940
but basically,
music and audio CDs use AIF,

00:35:06.050 --> 00:35:08.080
which is an uncompressed sample.

00:35:08.090 --> 00:35:12.180
They sample the audio
44,100 times per second,

00:35:12.290 --> 00:35:17.430
or 44.1 kilohertz,
have a data rate of about 150,

00:35:17.820 --> 00:35:22.380
So one minute of uncompressed audio
is about 11 megabytes of storage.

00:35:22.380 --> 00:35:29.270
And that's why on your 650,
700 megabyte CD, you don't get 100 songs.

00:35:31.800 --> 00:35:34.600
So again, with the rules of reduction.

00:35:34.640 --> 00:35:39.970
There are three ways, strangely enough,
to reduce the size and bandwidth

00:35:40.070 --> 00:35:42.190
requirements for audio.

00:35:42.480 --> 00:35:43.810
You can reduce the sample rate.

00:35:43.910 --> 00:35:49.820
In other words,
if you go down from 44.1 to 22 or to 11,

00:35:50.540 --> 00:35:56.080
You're reducing the sample rate,
you're reducing the size of the audio.

00:35:56.240 --> 00:35:58.730
You can reduce the range of the sound,
which in other words,

00:35:58.730 --> 00:36:01.210
flatten out the highs and lows.

00:36:01.550 --> 00:36:03.740
Or you can shorten the clips duration.

00:36:03.820 --> 00:36:05.950
Now you see really,
you think about these,

00:36:06.100 --> 00:36:10.410
they equate on an almost
one-to-one basis with how video

00:36:10.410 --> 00:36:13.500
codecs rules of reductions work.

00:36:13.500 --> 00:36:17.500
This is the same as
reducing the image size,

00:36:17.500 --> 00:36:21.500
this is the same as
increasing the compression,

00:36:21.500 --> 00:36:24.980
and this is the same as
reducing the frame rate.

00:36:27.420 --> 00:36:29.400
Okay, audio codecs.

00:36:29.790 --> 00:36:31.400
MP3.

00:36:31.710 --> 00:36:34.060
MP3 bugs me.

00:36:34.540 --> 00:36:38.950
I have this whole thing about
language and the misuse of it.

00:36:38.950 --> 00:36:42.400
MPEG-1 Layer 3 audio.

00:36:42.670 --> 00:36:50.570
It's not MPEG-3, it's MPEG-1,
which is actually getting kind of

00:36:50.570 --> 00:36:54.470
long in the tooth at this point,
and probably should

00:36:54.470 --> 00:36:54.470
be put out to pasture.

00:36:55.090 --> 00:36:58.200
Um, quality is good.

00:36:58.320 --> 00:37:02.610
I don't think it does very
well below 128 kilohertz.

00:37:03.230 --> 00:37:09.940
So, size is good, a whole lot smaller
than AIF or WAV files.

00:37:10.080 --> 00:37:11.780
Compatibility is excellent.

00:37:11.780 --> 00:37:15.040
You can't fault MP3 for compatibility.

00:37:15.060 --> 00:37:20.950
I think there are probably shoes at this
point that will play back MP3 files.

00:37:22.080 --> 00:37:25.670
If not, I'm sure having said that,
somebody will have one on the market

00:37:25.670 --> 00:37:27.880
sometime in the next couple weeks.

00:37:28.510 --> 00:37:30.710
So, and the usability overall is good.

00:37:30.750 --> 00:37:36.600
You've got to be willing to sacrifice
a little size in favor of playability,

00:37:36.600 --> 00:37:40.320
but it does have its advantages.

00:37:41.560 --> 00:37:43.180
However,

00:37:43.880 --> 00:37:47.000
This is my current favorite audio codec.

00:37:47.070 --> 00:37:52.700
The AAC codec, which you'll notice by
the way is excellent,

00:37:52.780 --> 00:37:57.300
excellent, excellent,
and say it with me now.

00:37:57.980 --> 00:37:59.360
Okay, good.

00:37:59.550 --> 00:38:02.430
Uh, that's it.

00:38:02.570 --> 00:38:04.360
Okay, so...

00:38:04.500 --> 00:38:05.500
128k.

00:38:05.500 --> 00:38:08.600
Now remember I said MP3 is below 128k.

00:38:08.910 --> 00:38:11.490
Most people don't think
it sounds all that well.

00:38:11.600 --> 00:38:16.600
128k stereo has been judged
indistinguishable from

00:38:16.600 --> 00:38:18.200
the uncompressed source.

00:38:18.300 --> 00:38:21.480
And this is by, I don't know,
a whole bunch of people are

00:38:21.480 --> 00:38:23.000
supposed to know this stuff.

00:38:23.110 --> 00:38:25.760
You know, by audio files.

00:38:25.890 --> 00:38:29.770
Much smaller files than
MP3 at much higher quality.

00:38:30.450 --> 00:38:35.020
Cross-platform, cross-player,
and cross-device compatibility is

00:38:35.020 --> 00:38:36.570
what the MPEG-4 spec is all about.

00:38:36.790 --> 00:38:40.540
AAC has pretty widespread
support at this point,

00:38:40.730 --> 00:38:45.350
even if you ignore iTunes and the iPod,
and God knows it's awful

00:38:45.360 --> 00:38:47.700
hard to do that these days.

00:38:47.920 --> 00:38:53.690
So, and, you know, flat out,
it's quite possibly the only audio codec

00:38:53.810 --> 00:38:55.230
you're really going to need to use.

00:38:55.390 --> 00:38:59.120
It is a terrific general purpose codec.

00:38:59.190 --> 00:39:03.180
Does a nice job with voice,
does a fantastic job with

00:39:03.180 --> 00:39:05.300
music and sound effects.

00:39:08.340 --> 00:39:11.770
I haven't had a chance to play a whole
lot yet with the Apple lossless encoder,

00:39:11.770 --> 00:39:13.640
which is relatively new.

00:39:13.710 --> 00:39:17.340
I think it came out in 6.5.1.

00:39:17.680 --> 00:39:19.330
Is that right, Amy?

00:39:19.450 --> 00:39:20.300
Something like that?

00:39:20.310 --> 00:39:20.620
Okay.

00:39:21.220 --> 00:39:23.590
Anyway, it's new.

00:39:23.900 --> 00:39:26.820
And the quality is excellent.

00:39:26.890 --> 00:39:28.580
I mean, you can't beat lossless.

00:39:28.780 --> 00:39:32.110
Lossless is, well, lossless.

00:39:32.770 --> 00:39:34.300
The size is good.

00:39:34.320 --> 00:39:35.940
Again, it's a lossless encoder.

00:39:35.940 --> 00:39:39.990
You're going to get around
50%, something like that.

00:39:40.320 --> 00:39:43.500
Compatibility, eh, not so good.

00:39:43.640 --> 00:39:45.000
It's very new.

00:39:45.090 --> 00:39:48.610
You can get it to work with iTunes,
you can get it to work with 651,

00:39:49.000 --> 00:39:51.070
not a whole lot else right now.

00:39:51.500 --> 00:39:56.580
It's a nice format if you're going to
store a whole bunch of music on your

00:39:56.690 --> 00:40:01.130
hard drive for playback in iTunes,
and you want to squeeze those down,

00:40:01.130 --> 00:40:05.920
and you don't want to sacrifice
any of the quality at all.

00:40:09.050 --> 00:40:12.650
IMA41.

00:40:12.650 --> 00:40:15.000
For a long time,
this was my codec of choice.

00:40:15.000 --> 00:40:17.190
It was also the codec of choice
for a lot of people who do,

00:40:17.190 --> 00:40:19.340
like,
the movie trailers and things like that.

00:40:19.380 --> 00:40:25.190
It does a terrific job
with sound quality.

00:40:25.190 --> 00:40:30.500
I used to work for Sorenson at
their Burbank Encoding Center.

00:40:30.500 --> 00:40:31.880
We did some tests with it.

00:40:31.980 --> 00:40:38.070
And compressing with IMA41,
we discovered that it even retained

00:40:38.070 --> 00:40:42.530
the 5.1 surround sound information.

00:40:42.710 --> 00:40:45.090
It doesn't give you a lot of compression,
though.

00:40:45.110 --> 00:40:47.080
The size is only good.

00:40:47.160 --> 00:40:48.350
Compatibility is only good.

00:40:48.360 --> 00:40:51.870
It's been around for a long time.

00:40:53.280 --> 00:41:00.050
But it doesn't always give you
what you expect when you move

00:41:00.160 --> 00:41:01.980
from one platform to another.

00:41:02.100 --> 00:41:03.180
The usability is good.

00:41:03.410 --> 00:41:05.370
It's great for high bandwidth projects.

00:41:05.470 --> 00:41:10.440
It's what I will generally use if
I'm going to a project on CD-ROM.

00:41:10.540 --> 00:41:15.290
And I know I'm going to be playing back
through a computer stereo speaker system.

00:41:15.430 --> 00:41:18.280
I want something really, really nice.

00:41:20.860 --> 00:41:23.400
Qualcomm PureVoice.

00:41:23.400 --> 00:41:25.270
Now again,
you're going to see my little caveat

00:41:25.660 --> 00:41:28.590
with this one in the next slide.

00:41:28.720 --> 00:41:34.190
When used as intended,
Qualcomm PureVoice is, you guessed it,

00:41:34.290 --> 00:41:36.540
a voice compression codec.

00:41:36.660 --> 00:41:41.240
It was actually designed
for use with telephones.

00:41:41.750 --> 00:41:44.460
does a fantastic job with speech.

00:41:44.480 --> 00:41:46.530
At really high levels
of compression though,

00:41:46.540 --> 00:41:49.360
it can sound kind of tinny and flat.

00:41:49.500 --> 00:41:54.750
Sounds a little bit like you're
talking into a paper tube.

00:41:55.940 --> 00:42:06.100
and Chris Bates, and I'll be joined by
Dennis and Clifford.

00:42:06.620 --> 00:42:13.950
I would go here if you want to get
the best compression to size ratio.

00:42:14.850 --> 00:42:19.180
I'm going to compress the crap
out of it with this codec.

00:42:19.290 --> 00:42:20.210
Compatibility is good.

00:42:20.220 --> 00:42:24.390
It's been around with every
QuickTime distribution since version 3.

00:42:27.170 --> 00:42:31.740
Limited tonal range makes the usefulness
for music and sound effects limited.

00:42:31.740 --> 00:42:34.390
As I said,
this is an excellent codec when you apply

00:42:34.390 --> 00:42:36.750
it to what it's intended to be used for.

00:42:36.790 --> 00:42:40.230
If you try to use it for something else,
you're not going to get

00:42:40.230 --> 00:42:41.760
a very pleasant result.

00:42:43.770 --> 00:42:45.420
Okay.

00:42:45.480 --> 00:42:48.810
Cuedesign Music 2 is another one that's
been around for a very long time.

00:42:48.870 --> 00:42:54.190
It does a wonderful job with music.

00:42:54.910 --> 00:43:00.600
Overall, I think it's comparable
to MP3 in general quality.

00:43:00.670 --> 00:43:09.070
I think AAC beats the pants off of it,
but it comes in a solid second.

00:43:14.020 --> 00:43:15.860
Other codecs again.

00:43:15.890 --> 00:43:18.810
There are a bunch of other
codecs that you'll see.

00:43:18.950 --> 00:43:21.240
MACE is a legacy codec.

00:43:21.240 --> 00:43:26.330
16-bit, big and little Indian,
24 and 30-bit Integer, and ULAW.

00:43:26.590 --> 00:43:31.110
And these are all, unless you're doing
really high-end stuff,

00:43:31.220 --> 00:43:34.570
like you're an audio engineer,
these aren't really going to

00:43:34.610 --> 00:43:36.290
be terribly useful to you.

00:43:37.120 --> 00:43:40.640
ULAW is a Unix standard,
and MACE is a legacy codec

00:43:40.660 --> 00:43:45.440
that's completely outclassed by
any of the more modern codecs.

00:43:53.100 --> 00:43:59.360
Here's a little comparison.

00:43:59.360 --> 00:44:01.770
This is AIFF uncompressed audio.

00:44:01.780 --> 00:44:06.470
So this is what you hear
off your CD player at home.

00:44:08.460 --> 00:44:11.940
Same thing as AAC.

00:44:12.000 --> 00:44:16.740
22 kilohertz compression,
96 kilobits per second.

00:44:16.770 --> 00:44:19.960
The file size is 212K.

00:44:20.000 --> 00:44:21.960
Backing up again.

00:44:23.830 --> 00:44:24.560
I thought I was backing up.

00:44:24.560 --> 00:44:25.760
There we go.

00:44:25.940 --> 00:44:30.680
Compared to 3.4 megabytes, 172.

00:44:31.130 --> 00:44:33.020
Okay, let's crank it up, boys.

00:44:44.000 --> 00:44:46.900
Back again.

00:44:46.960 --> 00:44:47.940
Come on.

00:44:47.950 --> 00:44:49.500
There we go.

00:44:57.200 --> 00:45:01.600
That's... How many people
hear a substantial difference

00:45:01.600 --> 00:45:03.910
between those two things?

00:45:05.500 --> 00:45:14.300
[Transcript missing]

00:45:15.870 --> 00:45:20.280
I think for the vast majority of people,
they're not going to hear a substantial

00:45:20.280 --> 00:45:21.870
difference between those two things.

00:45:22.000 --> 00:45:25.760
But when you look at the data rate,
the file size,

00:45:25.900 --> 00:45:30.580
you see there is a phenomenal
difference between those two things.

00:45:31.400 --> 00:45:34.710
And that's why AAC is
currently my favorite codec.

00:45:34.770 --> 00:45:38.750
In fact, I'll often combine,
if I really need good quality,

00:45:38.750 --> 00:45:41.950
I'll combine SV3 video
with AAC encoded audio,

00:45:41.950 --> 00:45:45.970
put those two things together,
and you get a hell of a mix.

00:45:49.100 --> 00:45:50.100
I said hell.

00:45:50.100 --> 00:45:51.380
I said hell twice.

00:45:51.450 --> 00:45:53.100
I said hell three times.

00:45:53.120 --> 00:45:53.590
Oh, okay.

00:45:53.800 --> 00:45:56.160
Anyway, a note on image codecs.

00:45:56.190 --> 00:46:01.340
I'm not going to go through all
of the veritable cornucopia of

00:46:01.340 --> 00:46:06.290
image codecs that are available
to you working in QuickTime,

00:46:06.340 --> 00:46:12.420
but I did want to touch on just a couple
of them and give you a little bit of

00:46:12.440 --> 00:46:13.730
an idea about what makes these three
particular codecs kind of special.

00:46:16.510 --> 00:46:17.860
I love this codec.

00:46:17.860 --> 00:46:19.740
This is my favorite image codec.

00:46:19.800 --> 00:46:22.190
I'm crazy about ping.

00:46:22.640 --> 00:46:24.250
Particularly Ping in QuickTime.

00:46:24.260 --> 00:46:26.160
I do a lot of stuff with wired sprites.

00:46:27.390 --> 00:46:33.840
And Ping is great for
very low overhead stuff.

00:46:33.890 --> 00:46:35.740
It just works really nicely.

00:46:35.770 --> 00:46:41.020
It's got sophisticated alpha
channels so you can do much nicer

00:46:41.050 --> 00:46:45.940
compositing than what you could
do with something like say GIF.

00:46:45.960 --> 00:46:48.210
And for

00:46:50.360 --> 00:46:53.640
For flat tonal images,
you're going to get better compression

00:46:53.640 --> 00:46:55.240
than you do with GIF files.

00:46:55.240 --> 00:46:58.580
In fact, about 30% better.

00:46:58.580 --> 00:47:01.730
And for, it can't,
even though it's a little bit larger

00:47:01.740 --> 00:47:06.490
than JPEG when you use it on continuous
tone images like photographs,

00:47:06.490 --> 00:47:09.580
I really like the quality a lot better.

00:47:09.670 --> 00:47:14.550
And, unlike JPEG,
PNG is a lossless compression format.

00:47:14.740 --> 00:47:14.740
So, it, it's, it's, it's

00:47:16.810 --> 00:47:19.950
Which is to say that it compresses
similarly to what GIF does,

00:47:20.010 --> 00:47:24.620
which compresses by
limit... hello... I'm sorry.

00:47:24.650 --> 00:47:27.480
Compresses by limiting the
number of colors in the color

00:47:27.550 --> 00:47:29.180
palette that it's working with.

00:47:29.450 --> 00:47:31.180
The image.

00:47:31.310 --> 00:47:34.420
It's supported on every
browser and platform and in

00:47:34.420 --> 00:47:36.460
QuickTime since very early on.

00:47:36.460 --> 00:47:38.460
The usability is excellent.

00:47:38.530 --> 00:47:41.780
For working with images,
for working with, particularly with wired

00:47:41.780 --> 00:47:44.820
sprites in QuickTime,
or any kind of image file in QuickTime,

00:47:44.930 --> 00:47:46.590
Ping is my go-to guy.

00:47:46.600 --> 00:47:49.080
I always use Ping.

00:47:49.320 --> 00:47:51.710
Even for most of the web
work I do these days,

00:47:51.730 --> 00:47:55.470
I avoid using GIFs and
JPEGs and I stick with PNG.

00:47:58.570 --> 00:48:02.680
Oh, nobody's even going to go, oh, OK.

00:48:02.680 --> 00:48:05.740
This is my dog.

00:48:05.740 --> 00:48:08.740
His name is Lorcan Kukiran.

00:48:08.740 --> 00:48:09.340
It's Gaelic.

00:48:09.360 --> 00:48:11.870
It means fierce black hound.

00:48:13.500 --> 00:48:18.000
Anyway, so here's a comparison.

00:48:18.020 --> 00:48:20.500
You may have noticed
I like to do these things.

00:48:20.650 --> 00:48:26.400
So, here is ping 224K with transparency.

00:48:26.840 --> 00:48:33.400
Nice, soft, anti-aliased, lovely, lovely.

00:48:33.570 --> 00:48:38.790
Jeff, 64 colors, 120K, with a diffusion,
dither, and transparency.

00:48:38.790 --> 00:48:41.860
But now look at the quality difference.

00:48:41.870 --> 00:48:45.950
Even though I've got a larger file here,
I obviously can get better

00:48:45.950 --> 00:48:48.970
compression with Jeff,
but when you start looking

00:48:48.970 --> 00:48:51.410
at the quality difference,
particularly the way

00:48:51.410 --> 00:48:54.340
Jeff tends to dither,
Jeff has to use dither to

00:48:54.340 --> 00:48:58.400
replicate colors that aren't
inside its color palette,

00:48:58.650 --> 00:49:00.720
the quality is so much nicer.

00:49:00.960 --> 00:49:04.100
Look particularly right
around the eye here,

00:49:04.340 --> 00:49:06.900
and right around the eye here.

00:49:08.320 --> 00:49:14.490
And then this is JPEG at best, 344,
and you get no transparency with it.

00:49:14.580 --> 00:49:17.460
And it's lossy,
so if you have to open the file up,

00:49:17.600 --> 00:49:20.850
edit it again, and save it out again,
it's putting compression on

00:49:20.850 --> 00:49:22.620
compression on compression.

00:49:26.750 --> 00:49:32.390
JPEG 2000 now is a little
bit different thing.

00:49:32.990 --> 00:49:39.280
JPEG, standard JPEG, and JPEG 2000 are
completely different codecs.

00:49:39.440 --> 00:49:44.240
JPEG 2000 is excellent quality,
good size,

00:49:44.380 --> 00:49:51.500
poor compatibility at this point because
not everybody has caught on to it yet.

00:49:51.500 --> 00:49:56.600
There are still better compressors,
and in general right now I still

00:49:56.600 --> 00:49:58.620
think Ping is a little bit
better compressor than JPEG 2000.

00:49:58.890 --> 00:50:02.300
It's only available
in OS X for QuickTime.

00:50:02.430 --> 00:50:06.770
There is a Photoshop plug-in for
creating JPEG 2000 files that is

00:50:06.770 --> 00:50:11.020
available from this particular vendor,
from Lead Technologies,

00:50:11.020 --> 00:50:13.450
and this is a URL for it.

00:50:13.600 --> 00:50:18.000
and you know, it'll be in the,
it'll be in our home game.

00:50:18.040 --> 00:50:23.000
So, here's a little bit of a
side-by-side comparison.

00:50:23.000 --> 00:50:25.590
JPEG 2000 uses something
called wavelet compression.

00:50:25.600 --> 00:50:29.360
Without getting into a lot of detail,
it's just better.

00:50:29.360 --> 00:50:33.290
This is the bad Santa.

00:50:33.440 --> 00:50:37.210
So, here's JPEG.

00:50:38.780 --> 00:50:39.920
Here's JPEG 2000.

00:50:39.940 --> 00:50:44.140
Look right around the eye particularly
at how much artifacting there is.

00:50:44.140 --> 00:50:45.470
JPEG?

00:50:46.090 --> 00:50:47.040
JPEG 2000.

00:50:47.040 --> 00:50:51.670
So even the detail in the mustache and,
you know, it's just scary to look

00:50:51.770 --> 00:50:53.670
at my own head this large.

00:50:53.670 --> 00:50:55.620
Anyway.

00:50:57.680 --> 00:51:04.510
Okay, so, best all-round codecs,
and the winners are:

00:51:06.560 --> 00:51:11.980
For video delivery, MPEG-4 and SV3.

00:51:12.070 --> 00:51:16.840
MPEG-4 for compatibility,
SV3 for slightly higher quality.

00:51:16.930 --> 00:51:21.830
Again, a year from now,
we'll be having a different conversation.

00:51:21.930 --> 00:51:26.850
H.264 changes the landscape.

00:51:27.200 --> 00:51:30.300
For audio, go with AAC.

00:51:30.390 --> 00:51:33.670
For a general purpose audio codec,
it's the best thing that

00:51:33.670 --> 00:51:34.930
you have available to you.

00:51:38.070 --> 00:51:43.240
Graphics, paying every time.

00:51:43.370 --> 00:51:49.770
And for video and audio transfer,
my favorite is still Animation Best.

00:51:50.000 --> 00:51:58.100
[Transcript missing]

00:52:01.340 --> 00:52:06.480
For more information, a couple of sites.

00:52:06.850 --> 00:52:11.180
Being the self-serving jerk I am,
I put mine first.

00:52:12.000 --> 00:52:15.110
So QuickTiming.org,
which strangely enough

00:52:15.270 --> 00:52:17.530
is at QuickTiming.org.

00:52:17.700 --> 00:52:23.600
I have news, tutorials, reviews,
all related to QuickTime.

00:52:23.600 --> 00:52:28.890
My ultimate goal is world
domination by QuickTime.

00:52:29.690 --> 00:52:32.980
So, lots and lots of stuff on there.

00:52:33.010 --> 00:52:36.840
I try to cover anything
that's related to QuickTime,

00:52:36.840 --> 00:52:41.560
and that's almost anything that
falls into the digital hub sphere.

00:52:41.660 --> 00:52:46.780
iTunes is QuickTime, iMovie is QuickTime,
Final Cut Pro is QuickTime, iDVD,

00:52:46.840 --> 00:52:48.600
DVD Studio Pro is QuickTime.

00:52:48.640 --> 00:52:52.060
I'm missing a whole bunch of things here,
but, you know,

00:52:52.160 --> 00:52:55.770
QuickTime is the architecture
that runs all of this stuff.

00:52:56.040 --> 00:53:01.940
And in addition to that,
I also have a news section

00:53:01.940 --> 00:53:05.310
that's updated fairly often,
usually about three times a week,

00:53:05.820 --> 00:53:08.050
sometimes more often as
things are happening.

00:53:08.060 --> 00:53:11.610
And a newsletter that you can
sign up for that I refer to as

00:53:11.610 --> 00:53:14.050
my regular irregular newsletter.

00:53:14.050 --> 00:53:18.900
It kind of goes out either when
I have something really important

00:53:18.900 --> 00:53:21.100
to say or when I feel like it.

00:53:24.130 --> 00:53:29.110
Martin, and I've never actually
pronounced Martin's last name,

00:53:29.200 --> 00:53:32.160
because I've only met him by email.

00:53:32.570 --> 00:53:36.160
But Martin has a QuickTime compatibility
chart on his website.

00:53:36.160 --> 00:53:38.410
Oh, and he says hi, Amy.

00:53:41.090 --> 00:53:47.950
It is a very, very complete listing of
all the QuickTime codecs,

00:53:47.950 --> 00:53:52.360
audio, image, video,
and what version of QuickTime they

00:53:52.360 --> 00:53:53.760
were introduced with.

00:53:53.760 --> 00:53:59.750
Really tremendously useful resource.

00:54:02.800 --> 00:54:07.700
And last but not least, I wrote a book.

00:54:07.860 --> 00:54:11.590
If you buy it,
I don't have to eat my dog.

00:54:16.840 --> 00:54:20.130
Anyway,
Quick Timers Guide to Web Video will

00:54:20.280 --> 00:54:21.940
be out in a few weeks.

00:54:21.940 --> 00:54:28.060
If you go to books.ursamajormedia.com,
which is my publishing company,

00:54:28.060 --> 00:54:30.810
because I'll be honest,
I'm a control freak,

00:54:30.860 --> 00:54:34.850
and you can actually get
it at a discount right now.

00:54:34.850 --> 00:54:37.660
And that's my little commercial message.

00:54:42.640 --> 00:54:47.670
And this is who to contact
for more information.

00:54:47.680 --> 00:54:50.200
I'm at cliff@quicktiming.org.

00:54:50.240 --> 00:54:52.440
Fairly easy to remember.

00:54:52.440 --> 00:54:55.480
And then Guillermo,
QuickTimeMan@apple.com.