WEBVTT

00:00:17.780 --> 00:00:21.700
Hello everyone and welcome to
this year's Image Capture Show.

00:00:21.720 --> 00:00:25.540
Well, actually by just looking
at this slide I said,

00:00:25.540 --> 00:00:28.700
well,
I guess we have a problem in showing

00:00:28.700 --> 00:00:30.700
you a pretty cool demo later on.

00:00:30.950 --> 00:00:35.840
Because this slide says we have to
refrain from taking pictures and

00:00:35.940 --> 00:00:42.010
I guess we have set up everything here,
but I guess we just file it through.

00:00:42.270 --> 00:00:45.700
So, let's talk about Image Capture.

00:00:45.730 --> 00:00:49.190
We will start with a short overview
of what Image Capture does.

00:00:49.190 --> 00:00:53.330
And the easiest way to describe
Image Capture is really,

00:00:53.330 --> 00:01:00.200
it's a framework that allows you to
work with still image capturing devices.

00:01:00.200 --> 00:01:02.670
A camera, a scanner.

00:01:03.070 --> 00:01:09.780
And the nice thing really is we allow
a wide range of devices and we support

00:01:09.780 --> 00:01:11.900
multiple communication protocols.

00:01:11.900 --> 00:01:14.630
It's funny,
like a couple of years ago when we

00:01:14.630 --> 00:01:17.900
did the first Image Capture session,
we were forcing you,

00:01:17.910 --> 00:01:23.530
or at least asking you,
as device manufacturer, "Well,

00:01:23.530 --> 00:01:28.750
wouldn't it be great if we had a few,
maybe just a handful of protocols

00:01:28.750 --> 00:01:32.780
that we can use?" And really by
just using a handful of protocols,

00:01:32.900 --> 00:01:36.020
just using a handful of
driver or device modules,

00:01:36.140 --> 00:01:40.590
and be able to talk to as
many devices as possible.

00:01:41.910 --> 00:01:45.160
The industry trend has really
shown that most of the new devices

00:01:45.330 --> 00:01:51.400
are really mass storage or PTP,
Picture Transfer Protocol based,

00:01:51.400 --> 00:01:53.800
which is really, really great.

00:01:53.880 --> 00:01:59.300
And so later on in the session,
we will show you

00:01:59.480 --> 00:02:03.600
A couple of new APIs that we
are going to add for Tiger to

00:02:03.640 --> 00:02:10.270
make the usage of new devices,
new device classes, even easier.

00:02:11.010 --> 00:02:17.000
Let's start with a short overview of the
Image Capture Framework and its pieces.

00:02:17.000 --> 00:02:20.390
At the bottom level,
we have the hardware,

00:02:20.390 --> 00:02:22.670
the device that you connect.

00:02:22.800 --> 00:02:29.530
And this has actually a device module
that is responsible for talking,

00:02:29.670 --> 00:02:32.610
doing the communication to that device.

00:02:33.430 --> 00:02:38.390
This device module is a
user-client background application,

00:02:38.410 --> 00:02:42.250
so there's no need to write
any kernel drivers or so.

00:02:43.460 --> 00:02:46.760
And it talks to the
Image Capture extension,

00:02:46.760 --> 00:02:48.770
the Image Capture Background App.

00:02:49.200 --> 00:02:54.280
The Image Capture Extension can handle
multiple devices at the same time.

00:02:55.490 --> 00:03:00.390
and can actually handle multiple
clients at the same time.

00:03:00.400 --> 00:03:03.700
So in theory, you could use iPhoto,
you could use the

00:03:03.700 --> 00:03:07.960
Image Capture application,
FileMaker, or whatever your application,

00:03:08.070 --> 00:03:12.590
for example,
application and then at the same

00:03:12.590 --> 00:03:16.710
time access a single device.

00:03:16.950 --> 00:03:21.210
This is a bit different from,
if you're familiar with the Twain model,

00:03:21.210 --> 00:03:28.050
where all have a layering stack
that's very similar to what we have,

00:03:28.080 --> 00:03:30.450
but they all run in the same process.

00:03:30.660 --> 00:03:35.260
We have different processes and
really the Image Capture background

00:03:35.370 --> 00:03:44.430
application as a bottleneck will
serialize the device requests and

00:03:44.550 --> 00:03:50.350
really make it easy and straightforward
for a client application to talk to one

00:03:50.350 --> 00:03:53.820
or multiple devices at the same time.

00:03:54.950 --> 00:04:00.150
Now if we look at this structure here,
actually everything inside Image Capture

00:04:00.250 --> 00:04:03.580
is made up of very small building blocks.

00:04:03.680 --> 00:04:08.570
First building block is the
notion of an ICA object.

00:04:08.630 --> 00:04:13.780
An ICA object just has a type
and subtype and may contain a

00:04:14.160 --> 00:04:16.460
reference to another ICA object.

00:04:16.790 --> 00:04:22.300
And it may contain properties or
actually a collection of properties

00:04:22.300 --> 00:04:24.700
and metadata in a dictionary.

00:04:24.840 --> 00:04:26.690
Which leads us to the
second building block,

00:04:26.840 --> 00:04:29.700
that's the properties, ICA properties.

00:04:29.810 --> 00:04:34.500
Here again we have type and
subtype and these properties

00:04:34.740 --> 00:04:37.700
contain actually the real data.

00:04:37.810 --> 00:04:43.700
With real data we mean the kind of
image data and the available thumbnails.

00:04:43.900 --> 00:05:03.700
[Transcript missing]

00:05:03.970 --> 00:05:07.260
When we came up with the
initial design of Image Capture,

00:05:07.260 --> 00:05:11.000
we were thinking, well,
we could put all the metadata,

00:05:11.000 --> 00:05:14.680
all the properties,
into separate objects, I say properties.

00:05:14.740 --> 00:05:21.840
It turned out it's kind of cumbersome
to get all the metadata collected.

00:05:22.020 --> 00:05:26.740
So it was much easier,
and you will see that in a little bit,

00:05:26.830 --> 00:05:32.320
much easier to use CFDictionaryRefs or
NSDictionary's that you can pass around

00:05:32.470 --> 00:05:37.200
and they will contain all the metadata,
for example, for a given image.

00:05:37.200 --> 00:05:41.410
So all the excess data will be
in one of these dictionaries.

00:05:42.210 --> 00:05:44.300
If you look at these
three building blocks,

00:05:44.480 --> 00:05:47.470
they form kind of a unit.

00:05:47.470 --> 00:05:51.030
And so once again,
the object has basically

00:05:51.030 --> 00:05:52.920
type and subtype.

00:05:53.140 --> 00:05:58.390
The properties has the
entire image and thumbnail.

00:05:58.520 --> 00:06:05.000
And the dictionary contains the,
in this case, EXIF metadata.

00:06:05.440 --> 00:06:11.310
That allows you to work with
images in a very convenient way.

00:06:12.120 --> 00:06:17.730
Out of these,
you can build up your tree and the

00:06:17.840 --> 00:06:22.620
top level object that you see here,
the device list,

00:06:22.650 --> 00:06:27.770
is actually always available even if
you do not have any device connected.

00:06:28.510 --> 00:06:32.740
What was new with Panther was
the addition of a dictionary

00:06:33.340 --> 00:06:35.880
to that device list object.

00:06:36.270 --> 00:06:40.140
That dictionary, of course,
does not contain any metadata

00:06:40.140 --> 00:06:42.960
because there's no image
for the device list object.

00:06:43.040 --> 00:06:47.980
But what it contains is a list,
a reference to all devices

00:06:48.020 --> 00:06:49.740
that are connected.

00:06:50.010 --> 00:06:55.280
So, two calls:
"Give me the device list" and then

00:06:55.280 --> 00:06:59.540
"Give me the dictionary for that device
list." If you do these two calls,

00:06:59.700 --> 00:07:04.610
you will have the information of
what kind of devices are connected.

00:07:06.460 --> 00:07:10.710
And again,
by just using these building blocks,

00:07:10.790 --> 00:07:14.580
that's what we do inside
the Image Capture Framework.

00:07:14.650 --> 00:07:18.960
So whenever, for example,
iPhoto wants to talk to a device,

00:07:18.960 --> 00:07:23.080
first thing,
as all other clients have to do,

00:07:23.540 --> 00:07:26.950
first thing is really give
me the device list and then

00:07:26.950 --> 00:07:29.400
query the device list object.

00:07:29.400 --> 00:07:31.360
For example, get the dictionary.

00:07:31.360 --> 00:07:35.950
Get out of that dictionary the
number of devices for each device.

00:07:36.100 --> 00:07:39.450
You can get the dictionary,
and that dictionary

00:07:39.560 --> 00:07:41.110
actually will contain...

00:07:41.590 --> 00:07:46.180
"Either flattened out or as a tree,
both variants are in there,

00:07:46.300 --> 00:07:51.610
all the images,
all the files that are on that device."

00:07:52.750 --> 00:07:58.140
Now you can use that on a single machine,
but what if you have two machines?

00:07:58.280 --> 00:08:00.940
Well, of course,
you can have the same thing

00:08:00.940 --> 00:08:02.660
running on two machines.

00:08:02.800 --> 00:08:06.490
But with TIGER,
we were introducing device

00:08:06.490 --> 00:08:11.990
sharing for image capture devices.

00:08:12.140 --> 00:08:16.080
By just setting up the devices,
share on one side and

00:08:16.080 --> 00:08:20.020
listen on the other side,
you can take a standard camera or

00:08:20.270 --> 00:08:26.560
scanner and just hook it up to one
device but use it on a second device.

00:08:27.330 --> 00:08:34.040
The detection is fully automatic using
Rendezvous and you just pick and choose.

00:08:34.390 --> 00:08:41.260
But an even more cooler thing on
Panther was the Image Capture Web Server.

00:08:41.340 --> 00:08:45.370
I guess this was a best-kept
secret for Panther because a lot

00:08:45.410 --> 00:08:48.230
of people were later on in reviews,
we were seeing, well,

00:08:48.230 --> 00:08:49.740
I didn't know about that feature.

00:09:09.830 --> 00:09:09.940
That's a really cool feature.

00:09:09.940 --> 00:09:09.940
The Image Capture Web Server is a
faceless background application,

00:09:09.940 --> 00:09:09.940
a regular client for the
Image Capture Framework.

00:09:09.940 --> 00:09:09.940
And what it does is it takes the attached
camera and publishes that over the net.

00:09:10.110 --> 00:09:13.540
So what you could do,
you can connect at home,

00:09:13.650 --> 00:09:17.870
you can connect a camera, and from work,
you could actually look at

00:09:17.870 --> 00:09:20.300
the images on that camera.

00:09:20.670 --> 00:09:26.040
Or, if you have a camera that supports
PTP and allows you to take pictures,

00:09:26.130 --> 00:09:31.220
you can switch to a mode where
it actually allows you to take

00:09:31.360 --> 00:09:33.440
pictures over the internet.

00:09:33.500 --> 00:09:38.220
And it has a monitoring mode so
that every so and so many seconds,

00:09:38.220 --> 00:09:42.140
it will automatically take
a picture and display it.

00:09:42.200 --> 00:09:46.510
And that's a really convenient
way to get to your data.

00:09:49.450 --> 00:09:55.060
Now, that was really the kind of quick,
what is Image Capture and what

00:09:55.070 --> 00:09:56.470
are the Image Capture components.

00:09:56.480 --> 00:10:02.550
One thing that we are really handling in
the Image Capture Framework is devices

00:10:02.550 --> 00:10:05.270
that are connected via USB and FireWire.

00:10:05.280 --> 00:10:09.250
We handle that pretty well because, like,
out of the box,

00:10:09.310 --> 00:10:13.420
just fresh installed Mac OS X,
you connect a camera and whoops,

00:10:13.420 --> 00:10:14.640
the camera shows up.

00:10:15.560 --> 00:10:20.120
AI Photo launches or Image Capture
application launches and allows

00:10:20.340 --> 00:10:22.190
you to download the images.

00:10:23.120 --> 00:10:29.470
So, this hard plugging is done through
an IC notification framework,

00:10:29.610 --> 00:10:32.700
completely invisible to the users.

00:10:32.850 --> 00:10:36.410
But what is happening really,
the device gets connected

00:10:36.540 --> 00:10:37.970
at I/O Kit level.

00:10:37.970 --> 00:10:40.400
We learn, oh, there's a new device.

00:10:40.530 --> 00:10:46.130
We do a matching based on information
that we have inside the device modules.

00:10:46.310 --> 00:10:52.340
And we then launch actually
the appropriate device module.

00:10:53.620 --> 00:10:58.270
So that's all great if you
have USB and FireWire devices.

00:10:58.560 --> 00:11:03.090
But what about devices
that are non-HOT pluggable?

00:11:03.890 --> 00:11:06.360
Well, up to now that was a problem.

00:11:06.450 --> 00:11:09.440
And for TIGER we want to
have a solution for that.

00:11:09.540 --> 00:11:11.030
So,

00:11:11.960 --> 00:11:16.910
We really see that there
are a lot of new devices,

00:11:16.910 --> 00:11:20.420
for example cell phones,
coming out that have

00:11:20.420 --> 00:11:23.600
Bluetooth and a built-in camera.

00:11:24.290 --> 00:11:25.200
What about these devices?

00:11:25.330 --> 00:11:26.820
Or PDAs?

00:11:27.600 --> 00:11:29.340
Some of the PDAs have a built-in camera.

00:11:29.340 --> 00:11:34.240
Others have just attachments where
you can plug in a camera and a fairly

00:11:34.350 --> 00:11:36.920
decent resolution camera nowadays.

00:11:36.920 --> 00:11:42.560
And one thing that has probably
a very bright future is the

00:11:42.780 --> 00:11:45.460
area of wireless cameras.

00:11:46.610 --> 00:11:49.680
So by the end of the
year or early next year,

00:11:49.750 --> 00:11:54.370
you will see a lot of new devices
showing up that have wireless

00:11:55.250 --> 00:11:57.370
support directly built in.

00:11:57.480 --> 00:12:04.440
So these devices, well,
they may use Rendezvous or may use, like,

00:12:04.500 --> 00:12:08.480
worst case, just an edit field where
you type in an IP address.

00:12:08.710 --> 00:12:11.610
But there will be a way,
and there needs to be a way,

00:12:11.900 --> 00:12:14.350
to use these devices as well.

00:12:14.940 --> 00:12:18.960
And of course the same thing
for SCSI-based devices.

00:12:19.030 --> 00:12:23.260
Good old SCSI, non-hard pluggable,
I mean you have to really

00:12:23.380 --> 00:12:26.800
make the connection up front
before you turn on the machine.

00:12:26.870 --> 00:12:30.560
And those devices,
it would be nice if we had a simple

00:12:30.560 --> 00:12:33.160
way for the user to use those as well.

00:12:36.190 --> 00:12:41.980
So, in order to support these
non-hot-pluggable devices,

00:12:41.980 --> 00:12:44.940
we have to introduce new APIs.

00:12:45.000 --> 00:12:49.860
And it's enough to just introduce, like,
an ICA Load Device Module and

00:12:49.860 --> 00:12:52.400
Unload Device Module.

00:12:52.460 --> 00:12:55.870
For the Load and Unload,

00:12:56.360 --> 00:13:02.380
You can imagine then we probably don't
want everyone to write code to do that.

00:13:02.470 --> 00:13:06.410
So the idea is to add a device browser

00:13:06.750 --> 00:13:09.200
to the Image Capture application.

00:13:09.390 --> 00:13:13.440
So you would go to the
device menu in Image Capture,

00:13:13.520 --> 00:13:16.770
and then you could bring up a browser.

00:13:17.190 --> 00:13:22.210
to select the non-HUD-pluggable
device that you want to use.

00:13:22.950 --> 00:13:26.180
And ideally,
and that's really dependent on requests,

00:13:26.310 --> 00:13:31.260
so if you would want to have
something like a common panel,

00:13:31.260 --> 00:13:34.010
common UI for that,
we were thinking about

00:13:34.020 --> 00:13:35.700
implementing that as well.

00:13:35.700 --> 00:13:39.270
That would just allow you, again,
to do the device browsing

00:13:39.270 --> 00:13:41.060
and handle the connection.

00:13:43.960 --> 00:13:48.040
So if we look at the
ICA Load Device Module,

00:13:48.100 --> 00:13:51.790
you see we have the
same structure of calls.

00:13:51.840 --> 00:13:54.810
It's just a parameter block
and an optional callback proc.

00:13:55.000 --> 00:13:58.120
If that callback proc is nil,
it's a synchronous call,

00:13:58.190 --> 00:14:00.160
otherwise asynchronous call.

00:14:00.160 --> 00:14:07.100
And then the ICA Load Device Module's
parameter block has,

00:14:07.100 --> 00:14:10.780
beside the header,
that's in all parameter blocks we have,

00:14:10.940 --> 00:14:16.430
it has a field that allows you
to specify a device module.

00:14:16.870 --> 00:14:18.840
via URL.

00:14:18.860 --> 00:14:22.140
And we have an OS type that
specifies the transport type.

00:14:22.230 --> 00:14:24.980
So that could be Bluetooth.

00:14:25.160 --> 00:14:29.470
It could be USB, FireWire, whatever.

00:14:29.900 --> 00:14:37.280
And then a set of parameters that
are specific to the transport type.

00:14:38.340 --> 00:14:42.240
Ideally, you wouldn't have to worry
about the device module URL.

00:14:42.350 --> 00:14:47.420
So you could just pass in NULL,
specify the transport type,

00:14:47.420 --> 00:14:54.190
and then specify a Bluetooth address
that you get via any I/O Kit call.

00:14:56.680 --> 00:15:00.420
The unload device module is a
lot simpler because all you have

00:15:00.550 --> 00:15:05.550
to do is really just pass in the
ICA object that you want to unload.

00:15:08.400 --> 00:15:12.840
So let me show you very quickly
how we do that in Image Capture.

00:15:12.850 --> 00:15:15.270
Can we please switch to Demo 5?

00:15:18.100 --> 00:15:21.170
So I will launch again a small helper
app that shows you really what's

00:15:21.170 --> 00:15:23.520
going on on the image capture side.

00:15:23.540 --> 00:15:27.640
It has entries for all
image capture components,

00:15:27.640 --> 00:15:31.260
and we'll put up a check mark
right next to the name whenever

00:15:31.260 --> 00:15:33.480
one of these components is running.

00:15:34.200 --> 00:15:37.980
So let me launch Image Capture.

00:15:37.980 --> 00:15:40.720
You see Image Capture was launched.

00:15:40.720 --> 00:15:43.440
It's a checkbox,
but also the very first entry,

00:15:43.440 --> 00:15:45.300
the Image Capture extension.

00:15:45.300 --> 00:15:48.870
Image Capture extension is running now,
but we do not have any device module.

00:15:48.880 --> 00:15:51.050
Well, there's no device connected.

00:15:52.420 --> 00:15:59.530
So let me go to the device menu and
we see we have a connect item in here.

00:16:01.120 --> 00:16:04.490
And what will happen,
and this is really not the final UI,

00:16:04.490 --> 00:16:09.610
but that's just a temporary UI to
show you what direction we are going,

00:16:09.620 --> 00:16:13.210
is it will list, in this case,
the Bluetooth devices that I have

00:16:13.210 --> 00:16:14.920
right next to this machine.

00:16:14.920 --> 00:16:19.080
And that's a PDA and a phone.

00:16:21.800 --> 00:16:25.000
Down here,
it shows you similar information

00:16:25.000 --> 00:16:29.050
that you will get from the
regular Bluetooth control panel.

00:16:29.400 --> 00:16:36.010
So let me select the phone
and let's do a connect.

00:16:36.960 --> 00:16:38.500
See what's happening?

00:16:38.570 --> 00:16:43.840
The phone was recognized and yeah,
we do see the items on the

00:16:43.950 --> 00:16:45.950
phone and we can download those.

00:16:48.210 --> 00:16:57.230
And by the way,
a nice thing we added for... Actually,

00:16:57.230 --> 00:16:58.270
wrong one.

00:16:59.010 --> 00:17:03.610
For Tiger, whenever you want to
specify a download folder,

00:17:03.610 --> 00:17:09.780
you can actually drag it up here and
that should be a shortcut to the pop-up,

00:17:09.780 --> 00:17:13.200
so very easy to get to
the download folder.

00:17:13.200 --> 00:17:17.720
And yeah,
we could specify a preview to open

00:17:17.720 --> 00:17:21.200
it and then just try to download.

00:17:21.200 --> 00:17:24.690
And you see, here's the image that
we have from the phone.

00:17:28.890 --> 00:17:35.900
Okay, so that was the manual way
of loading the device module.

00:17:36.450 --> 00:17:41.580
Let me quit Image Capture
and show you another...

00:17:42.360 --> 00:17:47.510
A small application that will
actually hopefully make it to the SDK.

00:17:47.510 --> 00:17:52.280
That's an application that allows you
to just test all the Image Capture APIs.

00:17:52.390 --> 00:17:56.850
And you see on the left, you see all the
Image Capture APIs we have.

00:17:56.850 --> 00:18:01.740
And you see down here, the new one,
the ICA Unload Device Module.

00:18:01.740 --> 00:18:04.240
And up here,
you see what it takes as parameter.

00:18:04.240 --> 00:18:05.740
There's only one input parameter.

00:18:05.800 --> 00:18:06.900
That's the ICA object.

00:18:07.540 --> 00:18:10.070
And if we open the tree,
so basically we see

00:18:10.210 --> 00:18:12.770
on the left side here,
on the right side here,

00:18:12.910 --> 00:18:16.610
we see all the objects
that we have on the device.

00:18:16.610 --> 00:18:18.580
We have up front the device list.

00:18:18.580 --> 00:18:21.030
We have the device itself.

00:18:21.200 --> 00:18:25.130
And then we have three images.

00:18:25.770 --> 00:18:32.710
We could now select the device object,
copy that, and just paste that in here,

00:18:32.710 --> 00:18:36.760
and then execute the command either
synchronous or asynchronous way,

00:18:36.900 --> 00:18:38.880
and then...

00:18:40.080 --> 00:18:46.500
You see the device is gone
and the device module as well.

00:18:46.920 --> 00:18:50.340
Image Capture Extension will
quit in just a bit.

00:18:50.550 --> 00:18:53.050
Can we switch back to the slides, please?

00:18:59.110 --> 00:19:02.440
So that was just a quick demo
loading/unloading device modules

00:19:02.610 --> 00:19:08.910
and really just a very first
preliminary UI for doing that.

00:19:09.940 --> 00:19:13.070
So if you look at the cell phone,
if you want to really use

00:19:13.180 --> 00:19:17.690
it as a digital wallet,
it's a really nice way to say, hey,

00:19:17.730 --> 00:19:22.050
that's my cat, that's my kid,
that's my dog.

00:19:22.810 --> 00:19:27.700
And the cell phone, as I said,
will probably have a way to take

00:19:27.750 --> 00:19:32.360
pictures or download pictures,
but there's something missing.

00:19:34.040 --> 00:19:36.100
So what about uploading?

00:19:36.130 --> 00:19:40.530
Well, again, wouldn't it be nice if you
could upload to a device?

00:19:40.540 --> 00:19:45.320
And if you look at the API set
that we have for Image Capture,

00:19:45.320 --> 00:19:48.740
we used to have a set property data.

00:19:48.890 --> 00:19:52.180
Well, the set property data,
you would think that this is

00:19:52.180 --> 00:19:54.120
the right way to do the upload.

00:19:54.120 --> 00:19:56.870
Unfortunately, that's not just enough.

00:19:57.060 --> 00:20:01.290
Because we just don't want
to set the actual image data,

00:20:01.290 --> 00:20:06.150
we probably need a little
bit more information.

00:20:06.650 --> 00:20:10.760
So we will have a new
API to handle the uploading,

00:20:10.840 --> 00:20:12.690
device uploading.

00:20:12.730 --> 00:20:15.300
And it's, I say, upload file.

00:20:15.670 --> 00:20:18.240
And it's really just more
than just a file copy.

00:20:18.290 --> 00:20:22.260
Well,
it's a file copy for non-image files.

00:20:22.330 --> 00:20:28.910
But for image files,
it also allows you to scale the image.

00:20:33.390 --> 00:20:36.890
And the parameter block
for this looks like that.

00:20:37.220 --> 00:20:44.750
We specify a parent object and a file,
a .fsref, and a couple of flags.

00:20:46.620 --> 00:20:50.520
There's one thing about the
parent object that's just a

00:20:50.520 --> 00:20:53.360
kind of suggested parent object.

00:20:53.500 --> 00:20:59.350
So really depending on the device,
you may not be able to really

00:20:59.350 --> 00:21:03.550
upload to the specified folder.

00:21:04.670 --> 00:21:06.470
So it's always good,
I mean you could try it,

00:21:06.620 --> 00:21:10.530
it's always good to just upload to the
device itself and then normally the

00:21:10.530 --> 00:21:16.880
device takes care of the positioning
within the device file structure.

00:21:18.510 --> 00:21:23.040
So let me just give you a
quick demo of the uploading.

00:21:23.200 --> 00:21:25.750
Switch back to demo five.

00:21:32.600 --> 00:21:38.700
[Transcript missing]

00:21:43.730 --> 00:21:48.400
And now you have two
ways of doing the upload.

00:21:48.450 --> 00:21:51.760
One way is just drag it to the icon.

00:21:52.420 --> 00:21:57.450
Or whenever you are in the download mode,
just--

00:22:00.620 --> 00:22:02.580
Drag it in here.

00:22:02.620 --> 00:22:08.680
And then you get a sheet popping up
that allows you to specify the option.

00:22:08.680 --> 00:22:10.100
Do you want to scale it?

00:22:10.100 --> 00:22:11.690
Yes or no?

00:22:12.290 --> 00:22:15.630
Yeah, in this case we want to scale it.

00:22:15.630 --> 00:22:19.200
And you see,
actually it suggests the size.

00:22:19.200 --> 00:22:24.500
It knows that this device has
the screen size 120 by 160.

00:22:24.500 --> 00:22:31.920
But actually the device also supports
as native size also 288 by 352.

00:22:31.920 --> 00:22:34.050
So you could choose either one.

00:22:34.190 --> 00:22:37.860
Let's stick with the first
one and do the upload.

00:22:37.970 --> 00:22:41.650
Now really depending on
the speed of the device,

00:22:41.650 --> 00:22:42.180
you see the screen size is 120 by 160.

00:22:42.270 --> 00:22:47.390
You see we got the new entry in here.

00:22:47.390 --> 00:22:47.390
And it's not that big of a difference.

00:22:48.950 --> 00:22:55.060
It was scaled to 107 by 160, the image.

00:22:55.230 --> 00:22:58.240
The original image was larger.

00:22:58.920 --> 00:23:04.430
It was about this,
and you see it was 429 by 640.

00:23:12.200 --> 00:23:17.400
And again,
show that using the ICA API test.

00:23:17.410 --> 00:23:24.290
The upload file, well,
we just specify again a parent object.

00:23:25.670 --> 00:23:30.780
And in this case, all we want to do is
even upload a text file.

00:23:33.680 --> 00:23:41.810
And if that works,
then we should see--it takes a while.

00:23:41.950 --> 00:23:44.440
Theoretically,
we should see it on the right side.

00:23:44.540 --> 00:23:46.200
It should pop up.

00:23:46.890 --> 00:23:48.210
We're waiting for that file.

00:23:48.380 --> 00:23:50.160
Too long.

00:23:50.240 --> 00:23:53.190
Okay, can we switch back to the slides,
please?

00:24:00.090 --> 00:24:03.400
Another area that was introduced,
a new feature was introduced with

00:24:03.550 --> 00:24:06.140
Panther was the fast user switching.

00:24:06.260 --> 00:24:09.190
For Image Capture,
there were really no problems

00:24:09.560 --> 00:24:13.030
if you had a scanner or a
mass storage device connected.

00:24:13.640 --> 00:24:14.960
Mass storage device was very simple.

00:24:14.960 --> 00:24:19.550
Like all your FireWire hard drives,
you would just expect that it would

00:24:19.560 --> 00:24:22.990
work if you use a A and switch
to user B and then both users

00:24:23.150 --> 00:24:25.310
should have access to the device.

00:24:25.520 --> 00:24:30.290
For a scanner, it was also not a
problem because scanner,

00:24:30.290 --> 00:24:33.970
we from the beginning had an
ICA scanner open session and

00:24:34.370 --> 00:24:39.200
closed session and there was only
one client allowed for a session.

00:24:39.320 --> 00:24:43.710
So that simply means if you are user A,
you are working with a scanner,

00:24:43.710 --> 00:24:46.680
you have a session open,
you switch to user B,

00:24:47.000 --> 00:24:50.550
then there was no way that
user B could get the scanner.

00:24:51.130 --> 00:24:54.200
If you are User A and you
are done with your session,

00:24:54.230 --> 00:24:58.740
then User B will have
immediately access to the device.

00:25:00.320 --> 00:25:05.310
For cameras that are non-mass storage,
so PDP cameras,

00:25:06.000 --> 00:25:08.500
We do not have the concept of a session.

00:25:08.610 --> 00:25:11.390
So what's happening is really
User A uses the camera.

00:25:11.570 --> 00:25:13.290
You switch to User B.

00:25:13.390 --> 00:25:16.200
Now the question is, what should happen?

00:25:16.740 --> 00:25:18.900
User A or B have the camera.

00:25:19.010 --> 00:25:23.630
Well, instead of just unplugging the
device and reconnecting the device,

00:25:23.940 --> 00:25:27.790
which actually would give User B access,
we want to have a better solution.

00:25:27.790 --> 00:25:35.090
And what we're going to do is introduce
a session handling for cameras.

00:25:35.560 --> 00:25:40.550
So we will have an open
and closed session.

00:25:41.370 --> 00:25:46.800
These calls are really similar to the
ICA scanner open and close session.

00:25:47.140 --> 00:25:50.190
But they're different
because they're optional.

00:25:50.320 --> 00:25:52.940
Well,
we do not want to break existing apps.

00:25:53.040 --> 00:25:54.740
So the current iPhoto should just work.

00:25:54.740 --> 00:25:59.990
The current Image Capture app, FileMaker,
and your app, they should just work.

00:26:01.490 --> 00:26:04.840
And the other thing which is different
is really the number of clients.

00:26:05.000 --> 00:26:07.630
Well, for cameras,
there's no need to limit

00:26:07.630 --> 00:26:09.400
that down to a single client.

00:26:09.400 --> 00:26:12.600
So multiple clients can
still use the device.

00:26:12.750 --> 00:26:19.260
So these optional calls are just to
make fast user switching a lot easier,

00:26:19.440 --> 00:26:19.940
a lot safer.

00:26:19.940 --> 00:26:22.960
Because then, for example,
whenever the future iPhoto

00:26:23.350 --> 00:26:28.400
is done with importing,
or you're not at the Import tab,

00:26:29.630 --> 00:26:35.510
Then there's really no need to
pluck the device from a second user.

00:26:37.190 --> 00:26:44.520
So ICA Open Session just takes a
device object and returns a session ID.

00:26:44.770 --> 00:26:51.090
ICA closed session just takes the
session ID that you got on the open call.

00:26:55.130 --> 00:26:59.980
These are the main changes
we have API-wise for TIGER.

00:27:00.230 --> 00:27:04.480
So let's quickly look
at the scanner support,

00:27:04.660 --> 00:27:07.300
the scanner side,
before we go to some real

00:27:07.930 --> 00:27:10.000
camera-related demos.

00:27:10.000 --> 00:27:13.400
So on the scanner support,
since the Jaguar,

00:27:13.400 --> 00:27:20.910
we were supporting native scanner
modules and also Twain data sources.

00:27:21.390 --> 00:27:26.610
For Panther,
we added support for transparency

00:27:27.380 --> 00:27:32.130
units and also added a very
simple to use UI that allows

00:27:32.130 --> 00:27:36.060
you to do some image enhancement,
either automatically or

00:27:36.060 --> 00:27:38.570
with a manual correction.

00:27:39.850 --> 00:27:42.260
And for Tiger,
we are going to support something that

00:27:42.390 --> 00:27:51.100
was also requested by a lot of users,
the support of Document Feeder.

00:27:51.180 --> 00:27:54.260
And let me just show you that on Demo 6.

00:27:59.240 --> 00:28:02.000
So this is the standard Image Capture UI.

00:28:02.020 --> 00:28:05.030
If you have a scanner connected,
you see in this case,

00:28:05.180 --> 00:28:09.580
we are using the Twain bridge,
which means we are using

00:28:09.580 --> 00:28:11.830
a Twain data source.

00:28:12.200 --> 00:28:16.010
Using, in this case,
the Epson data source that is

00:28:16.140 --> 00:28:20.480
just rerouted through Twain
Bridge to Image Capture.

00:28:21.740 --> 00:28:28.160
And since this device here
supports as a twain capability,

00:28:28.490 --> 00:28:30.080
A document feeder.

00:28:30.080 --> 00:28:34.600
We will modify the UI and
add this extra checkbox here.

00:28:35.450 --> 00:28:42.440
So you can select the document feeder,
then the main view will change because

00:28:42.450 --> 00:28:47.300
when you are in the document feeder mode,
you are probably not in this workflow

00:28:47.300 --> 00:28:52.640
where you do a pre-scan first,
then select your scan rectangle,

00:28:52.670 --> 00:28:54.590
and then do the final scan.

00:28:54.600 --> 00:29:00.040
What you want to do in the document
feeder mode is really scan the entire

00:29:00.040 --> 00:29:03.330
page and do it quickly and do it often.

00:29:05.520 --> 00:29:10.060
So, again, this is probably not the final
UI because the one thing that you

00:29:10.170 --> 00:29:14.840
could not select right now is,
let's say, do you have an A4 or U.S.

00:29:14.840 --> 00:29:15.520
letter?

00:29:15.520 --> 00:29:16.000
U.S.

00:29:16.020 --> 00:29:16.970
letter or U.S.

00:29:16.970 --> 00:29:17.520
legal?

00:29:17.520 --> 00:29:23.220
So we need some way to allow the user to
choose between different paper formats.

00:29:23.280 --> 00:29:29.330
Right now, in this demo,
we will just scan the entire document.

00:29:32.640 --> 00:29:33.960
I hope that the scanner is working.

00:29:33.960 --> 00:29:35.850
Well, it was probably in a sleep.

00:29:36.090 --> 00:29:38.610
Hopefully, it wakes up.

00:29:42.640 --> 00:29:49.250
Light is flashing and yeah,
it is scanning the first page.

00:29:52.090 --> 00:29:57.280
So this is not a professional 24
pages or 60 pages per minute scanner.

00:29:57.300 --> 00:30:03.550
This is just a low-cost, easy to use,
kind of home type scanner that

00:30:03.600 --> 00:30:07.830
you would use in order for
scanning in multiple documents.

00:30:07.980 --> 00:30:09.430
See what's happening?

00:30:09.490 --> 00:30:13.100
The first page is scanned
in the background.

00:30:13.170 --> 00:30:15.340
Preview is launched.

00:30:15.370 --> 00:30:19.830
And as soon as a page comes in now,
it will be added.

00:30:21.470 --> 00:30:26.400
to preview and yeah,
each page will be displayed.

00:30:26.730 --> 00:30:29.620
Actually one nice thing
you could do in preview,

00:30:29.660 --> 00:30:33.260
since these pages come in one at a time,
what you can do in preview,

00:30:33.260 --> 00:30:36.290
you could set the preferences
for images to say,

00:30:36.300 --> 00:30:38.300
well, create only one.

00:30:38.340 --> 00:30:40.960
If you don't want to
create multiple windows,

00:30:40.980 --> 00:30:46.200
just only create a single window,
and then all the pages that come in

00:30:46.220 --> 00:30:49.040
will be added to the same window.

00:30:49.040 --> 00:30:53.600
And then for example, in preview,
you could do a print and print to PDF,

00:30:53.650 --> 00:30:57.170
so you have a PDF document
of whatever you have.

00:30:57.340 --> 00:31:00.500
Okay, so I guess it was done
with the four pages.

00:31:01.050 --> 00:31:04.800
Also new, just one minor remark.

00:31:04.850 --> 00:31:09.930
In the past, we were just generating like
a cryptical name based on

00:31:10.150 --> 00:31:12.340
scan and then date and time.

00:31:12.370 --> 00:31:15.500
In this case,
you can really specify a prefix,

00:31:15.500 --> 00:31:18.640
and we will just add a page number to it.

00:31:18.680 --> 00:31:23.670
So I think it's a little bit
user-friendlier than before.

00:31:23.720 --> 00:31:25.970
Okay, back to the slides, please.

00:31:35.200 --> 00:31:41.500
[Transcript missing]

00:31:41.710 --> 00:31:44.240
What do we have new for them?

00:31:44.240 --> 00:31:46.840
Well, first of all, thumbnail handling.

00:31:46.840 --> 00:31:55.070
We were introducing an API,
ICA Copy Object Thumbnail, in Panther.

00:31:55.280 --> 00:32:01.000
And the initial support was
for ICA thumbnail format.

00:32:01.090 --> 00:32:03.770
With TIGER,
we are going to extend that and really

00:32:03.770 --> 00:32:10.300
allow you to download thumbnails
directly in JPEG or TIFF format.

00:32:12.090 --> 00:32:18.490
And for the developer of a device module,
this means, well,

00:32:18.570 --> 00:32:23.790
not that much of a change,
because you can directly give us

00:32:24.090 --> 00:32:27.290
the native thumbnail that you have.

00:32:28.010 --> 00:32:31.890
Or fall back to the old way,
just return an ICA thumbnail.

00:32:31.900 --> 00:32:34.340
So if you are not going to change,
that's fine,

00:32:34.420 --> 00:32:39.540
because we will do the conversion
between ICA thumbnail to JPEG or TIFF.

00:32:39.610 --> 00:32:45.110
So the user will get whatever
thumbnail format he wants.

00:32:45.980 --> 00:32:48.300
One limitation we had
in the past was with,

00:32:48.300 --> 00:32:55.660
I say, thumbnails, was really the 128 by
128 pixel limitation.

00:32:55.710 --> 00:32:59.330
And we want to loosen that
a little bit and allow,

00:32:59.340 --> 00:33:06.820
really as described in this FEMA 15740,
allow larger thumbnails and

00:33:07.010 --> 00:33:11.880
up to a maximum of 160 by 120.

00:33:15.690 --> 00:33:20.000
One thing that we got a
lot of questions about,

00:33:20.000 --> 00:33:23.700
because I guess the documentation
was lacking a little bit on that,

00:33:23.840 --> 00:33:28.460
was what's up with the InfoP-List,
Device InfoP-List?

00:33:28.790 --> 00:33:34.920
Well, for a device module that
we have on Image Capture,

00:33:34.920 --> 00:33:40.780
we need, since it is a regular bundle,
we need an Info.plist that

00:33:40.800 --> 00:33:45.420
has all the things that are
required for an Info.plist,

00:33:45.640 --> 00:33:49.200
so bundle executable, icon name,
and these things.

00:33:50.060 --> 00:33:54.740
But we needed in the past also
information that would allow us

00:33:54.750 --> 00:33:59.920
to do the matching of the hot plug
event with this device module.

00:34:01.900 --> 00:34:04.140
And this information,
this matching information,

00:34:04.140 --> 00:34:07.040
was kept in the Info.plist.

00:34:08.190 --> 00:34:11.910
We, in addition,
needed a device Info.plist,

00:34:11.910 --> 00:34:16.550
which was in the resource
path of the device module.

00:34:16.560 --> 00:34:21.290
And that device Info.plist was
containing information about a

00:34:21.290 --> 00:34:25.570
cut-async profile or device icon,
for example.

00:34:27.600 --> 00:34:31.100
For Tiger, we are going to change that.

00:34:31.130 --> 00:34:36.830
We will have all that information
just combined in a single plist.

00:34:36.980 --> 00:34:39.500
That's the device Info.plist.

00:34:39.730 --> 00:34:43.640
You still need the Infor.plist,
but no Image Capture-related

00:34:43.640 --> 00:34:45.230
entry in there.

00:34:46.150 --> 00:34:50.240
And it will be the same location as
the current device Info.plist and

00:34:50.240 --> 00:34:55.380
really combines the entries of two,
plus some new entries.

00:34:55.540 --> 00:34:59.990
We will, for example,
specify in that Info.plist,

00:34:59.990 --> 00:35:06.180
we will specify the physical
transport or media information.

00:35:06.350 --> 00:35:11.330
For example,
does this device support JPEG, TIFF,

00:35:11.340 --> 00:35:14.730
movie, AVI, whatever format.

00:35:14.910 --> 00:35:17.200
And it sizes.

00:35:17.230 --> 00:35:19.800
And you already saw why
we were going to do that.

00:35:19.920 --> 00:35:23.120
You saw on the upload,
we had this pop-up that was

00:35:23.120 --> 00:35:25.930
giving us the size information.

00:35:27.770 --> 00:35:33.980
So Image Capture uses really this for
the upload panel and allows the user

00:35:33.980 --> 00:35:36.230
to choose the kind of native size.

00:35:36.360 --> 00:35:41.810
It has information about the
screen size of devices or sizes

00:35:41.810 --> 00:35:44.270
that this device produces.

00:35:45.500 --> 00:35:53.940
And since we are also extending
that to add the device capabilities,

00:35:54.040 --> 00:35:59.860
we will have the information,
for example, is this device able to

00:35:59.880 --> 00:36:02.260
handle uploads of JPEGs?

00:36:02.580 --> 00:36:08.680
Is this device able to handle
an erase or a take picture?

00:36:09.830 --> 00:36:15.170
Let me just show you the
current format on number five.

00:36:19.400 --> 00:36:27.610
So if we dig into the device modules,
so they are in System, Library.

00:36:28.280 --> 00:36:35.500
Image Capture devices,
and here we have a whole set of devices.

00:36:35.730 --> 00:36:40.020
So if we show the package content,
go into the resources,

00:36:40.200 --> 00:36:43.090
here we have the device Info.plist.

00:36:43.180 --> 00:36:48.930
And now,
this has some USB-related information.

00:36:49.090 --> 00:36:52.440
and some device-related information.

00:36:52.540 --> 00:36:56.240
And now you can go in and
look at all these entries,

00:36:56.340 --> 00:37:00.840
or instead of using the
Property List Editor,

00:37:00.940 --> 00:37:06.040
we can also use a small tool that
we are also going to add to the SDK,

00:37:06.040 --> 00:37:13.010
the device for the PList Viewer,
and this allows you to just, like,

00:37:13.120 --> 00:37:18.500
double-click on, for example,
the PTP module.

00:37:18.560 --> 00:37:21.800
And what is happening is just
collecting all that information.

00:37:21.800 --> 00:37:25.800
Actually, it looks up the icon and
displays that as well,

00:37:25.860 --> 00:37:29.890
and you can pick
whatever device you have.

00:37:31.330 --> 00:37:35.910
And go to the device and you see, okay,
this one supports JPEG and

00:37:35.990 --> 00:37:36.960
these resolutions.

00:37:36.960 --> 00:37:40.020
This one supports download and erase.

00:37:40.080 --> 00:37:44.020
It does not support capture, for example.

00:37:47.900 --> 00:37:51.480
And we see the protocol level.

00:37:51.480 --> 00:37:53.110
They are all PDP cameras.

00:37:53.110 --> 00:37:54.440
These are all the vendors.

00:37:54.440 --> 00:38:01.240
So see all main vendors from Canon,
Kodak, Nikon have, and Sony,

00:38:01.240 --> 00:38:04.540
they have PDP cameras that we do support.

00:38:05.340 --> 00:38:09.100
And this is just a convenient
tool to get to that information.

00:38:09.140 --> 00:38:18.100
And as I said, we are using these sizes
heavily in the future.

00:38:18.120 --> 00:38:25.610
Okay, back to the slides, please.

00:38:33.830 --> 00:38:41.290
And finally, I guess come to the main
demo part of this session.

00:38:41.420 --> 00:38:46.570
And the idea was to just give you
kind of ideas of new applications

00:38:46.680 --> 00:38:50.950
that you could do with Image Capture.

00:38:51.220 --> 00:38:54.660
First thing,
the high dynamic range images.

00:38:55.060 --> 00:38:59.100
For those of you who attended
session 207 on Wednesday,

00:38:59.220 --> 00:39:02.500
they learned everything
about high dynamic images you

00:39:02.500 --> 00:39:04.360
probably will ever need to know.

00:39:04.360 --> 00:39:08.030
Luke and Gabriel were doing just
a great job in introducing that.

00:39:10.740 --> 00:39:13.350
And to just keep it very short,
one of the problems you will have,

00:39:13.430 --> 00:39:19.040
and Gabriel was showing that,
if you look at the Apple's Garage and

00:39:19.310 --> 00:39:24.030
take a picture of that scene,
you see with the short exposure,

00:39:24.050 --> 00:39:26.920
you get pretty much
good detail in the back.

00:39:27.000 --> 00:39:30.260
Everything in the front,
you have no idea what's there.

00:39:31.420 --> 00:39:34.830
If you have too long exposure,
you see all the cars.

00:39:34.830 --> 00:39:37.450
These are not BMWs, no.

00:39:39.000 --> 00:39:46.700
[Transcript missing]

00:39:46.750 --> 00:39:51.640
You can take multiple exposures
and do a tone compression and you

00:39:51.640 --> 00:39:53.860
really get a result that's like that.

00:39:53.980 --> 00:39:56.870
So it's more or less
the best of all words.

00:39:57.140 --> 00:40:00.290
Up to this point,
it was kind of complicated to take

00:40:00.520 --> 00:40:02.890
these high dynamic range images.

00:40:03.690 --> 00:40:09.800
Because you had to go out,
put your camera on a tripod, and then

00:40:10.010 --> 00:40:14.740
Take an image, change the exposure time,
take an image, change exposure time,

00:40:14.740 --> 00:40:19.680
and do that a couple of times,
and then run that through an algorithm.

00:40:20.590 --> 00:40:26.700
Well, if you have a camera that allows
you to do that automatically,

00:40:26.760 --> 00:40:34.500
You could just use image capture calls to
really do a one-click high dynamic image,

00:40:34.500 --> 00:40:39.210
high dynamic range image capture.

00:40:39.360 --> 00:40:42.660
I really wish I could say that
you could go out and take any

00:40:42.660 --> 00:40:45.040
camera and you could do it.

00:40:45.100 --> 00:40:47.300
Right now we have one.

00:40:47.670 --> 00:40:52.880
I really hope that next year,
more vendors will open the protocol,

00:40:52.880 --> 00:40:56.390
will really support more
of these kind of things.

00:40:56.520 --> 00:41:01.000
So, the Canon D70,
that's the one we are going to use now.

00:41:01.000 --> 00:41:05.520
And... Oh, sorry, Nikon.

00:41:05.540 --> 00:41:06.700
Ah, look at that.

00:41:06.700 --> 00:41:13.210
Okay, what I want to do is...

00:41:18.170 --> 00:41:26.380
Create a scene here for a camera
that's kind of difficult to capture.

00:41:26.630 --> 00:41:33.190
We have a bright light, a box,
there's something in the box,

00:41:33.190 --> 00:41:37.040
and the camera just pointing to that.

00:41:37.410 --> 00:41:41.920
So, let me turn the camera on.

00:41:43.600 --> 00:41:49.300
[Transcript missing]

00:41:50.020 --> 00:41:54.500
What we're going to do now
is we take the first image.

00:41:54.520 --> 00:41:56.940
This is automatic exposure.

00:41:56.950 --> 00:42:01.140
And we see underneath the
image is the exposure time.

00:42:01.210 --> 00:42:05.140
So what we do is we take
out of the metadata,

00:42:05.160 --> 00:42:07.530
we display the exposure time.

00:42:07.630 --> 00:42:11.890
So basically verify that whatever
we set the exposure time to

00:42:11.940 --> 00:42:17.300
before we do the take picture,
these times are really in the image.

00:42:17.300 --> 00:42:19.310
We still have it here.

00:42:20.140 --> 00:42:25.820
And now we take a couple
of exposures and then...

00:42:26.140 --> 00:42:30.820
Take Gabriel's secret
sauce and combine that.

00:42:30.900 --> 00:42:34.840
It's already done because the
progress bar has stopped moving.

00:42:34.840 --> 00:42:39.680
And we will be able to open this.

00:42:39.900 --> 00:42:46.540
That's the current time.

00:42:50.260 --> 00:42:51.670
And we captured this scene.

00:42:51.850 --> 00:42:56.270
Now, if you look at this,

00:42:59.560 --> 00:43:04.440
It's actually pretty amazing
because what we will see up here,

00:43:04.490 --> 00:43:10.340
we can actually see the
inside of this desk lamp.

00:43:10.400 --> 00:43:12.120
But we can also see inside the box.

00:43:12.260 --> 00:43:14.920
We can actually make it
a little bit brighter.

00:43:21.370 --> 00:43:24.500
And yeah,
we can really see what's inside the box

00:43:24.540 --> 00:43:27.890
and also see what's inside the lamp.

00:43:28.490 --> 00:43:32.590
Nice thing,
these are really floating point images.

00:43:32.610 --> 00:43:36.520
So the information is
really not frozen to this,

00:43:36.590 --> 00:43:39.870
whatever you see now,
but we always have the

00:43:39.870 --> 00:43:47.790
slider to go either into the
dark or in the lighter side.

00:43:53.900 --> 00:44:04.290
So, to just give you an idea how these
images look without this processing.

00:44:07.710 --> 00:44:10.100
Well, that's what you normally see.

00:44:10.210 --> 00:44:14.040
As soon as you have the
tigers visible-- see,

00:44:14.060 --> 00:44:17.900
really, tiger is coming heavily--

00:44:20.570 --> 00:44:28.160
Yeah, you can see the tigers,
but you have no detail in the desk lamp.

00:44:28.210 --> 00:44:30.560
Or if you have the
detail in the desk lamp,

00:44:30.560 --> 00:44:31.950
the tiger is gone.

00:44:39.740 --> 00:44:44.120
So this is a pretty nice way to
capture high dynamic range images

00:44:44.240 --> 00:44:46.470
and really it's simple to do.

00:44:46.580 --> 00:44:50.600
The only thing you have to do is click
one button and it happens automatically.

00:45:02.570 --> 00:45:06.800
So the next demo is TimeLapse.

00:45:06.820 --> 00:45:09.460
And here,
I guess I have to thank all of you,

00:45:09.490 --> 00:45:14.760
because you were all really
contributing to that demo,

00:45:14.800 --> 00:45:16.680
without knowing, though.

00:45:16.870 --> 00:45:21.020
So let me just show you
what we did yesterday.

00:45:27.800 --> 00:45:56.600
[Transcript missing]

00:46:26.400 --> 00:46:45.600
[Transcript missing]

00:47:03.900 --> 00:47:18.200
[Transcript missing]

00:47:27.500 --> 00:47:32.000
Okay,
so that was the... So how did we do that?

00:47:32.000 --> 00:47:35.640
Well,
a small application sitting on top of

00:47:35.640 --> 00:47:40.610
Image Capture that just has two sliders,
very easy to use.

00:47:40.660 --> 00:47:44.710
You can specify the time
that you want to capture,

00:47:44.710 --> 00:47:51.830
in this case, whatever, 12 hours,
and how far do you want to compress it.

00:47:51.940 --> 00:47:54.280
So if you want to play 12
hours within 60 seconds,

00:47:54.350 --> 00:47:55.420
you take this setting.

00:47:55.420 --> 00:48:00.950
Otherwise, yeah, you can change it, like,
take a whole day, 24 hours,

00:48:00.950 --> 00:48:04.870
and you want to play it back in, like,
two minutes.

00:48:05.670 --> 00:48:08.480
And then just hit start and it
automatically takes the images,

00:48:08.580 --> 00:48:10.880
creates the movie,
and two hours later you're done.

00:48:10.980 --> 00:48:12.880
Or 24 hours later you're done.

00:48:17.560 --> 00:48:19.140
Okay, if we have a little bit,
we still have time?

00:48:19.140 --> 00:48:19.500
Yeah.

00:48:19.870 --> 00:48:23.770
So, last thing I want to show you is...

00:48:24.390 --> 00:48:27.760
Just for fun,
a small application that actually

00:48:27.760 --> 00:48:30.390
allows you to take 3D images.

00:48:30.530 --> 00:48:31.930
And the idea is very simple.

00:48:32.010 --> 00:48:34.000
You have a camera that flips.

00:48:34.090 --> 00:48:41.600
And so basically the distance of
the eye and we flip the camera.

00:48:41.690 --> 00:48:47.400
And just doing that, we could...

00:48:47.720 --> 00:48:49.800
We would mount it on a tripod.

00:48:49.830 --> 00:48:52.690
I just don't want to do that because
we already have those images captured.

00:48:52.700 --> 00:48:55.660
Connect the device.

00:48:55.660 --> 00:49:00.560
And then...

00:49:05.900 --> 00:49:10.770
We're going to bring up a UI that will
just look at the images on the device.

00:49:10.860 --> 00:49:14.020
And the nice thing,
since there's a sensor in the device,

00:49:14.330 --> 00:49:17.820
really showing whether you
rotate it this way or that way,

00:49:17.820 --> 00:49:23.090
we can pre-sort the images and
actually pre-sort them in a way that

00:49:23.200 --> 00:49:26.820
whenever I change one image here,
you see the one on the right

00:49:26.820 --> 00:49:32.270
side changes as well because
they are kind of grouped by date.

00:49:32.380 --> 00:49:35.070
So we know it's a left and right side.

00:49:35.900 --> 00:49:37.520
And then we can very easily group it.

00:49:37.520 --> 00:49:43.880
And yeah, just select whatever you want.

00:49:44.060 --> 00:49:47.780
And then you could say process.

00:49:47.780 --> 00:49:49.900
And then what should happen is...

00:49:53.500 --> 00:49:58.740
What should happen is it will display
it like that and you can do some

00:49:58.860 --> 00:50:03.630
fine adjustment and using one of
the red/green classes you can look

00:50:03.640 --> 00:50:05.720
at it and you have your 3D image.

00:50:05.880 --> 00:50:10.230
Also very simple to do and
without any extra effort.

00:50:14.900 --> 00:50:17.130
Okay, go back to the slides.

00:50:17.180 --> 00:50:25.390
We see we did the demo
and we are now up to Q&A.