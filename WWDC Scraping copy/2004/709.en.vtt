WEBVTT

00:00:15.600 --> 00:00:16.590
Thank you.

00:00:17.040 --> 00:00:19.380
So, yeah, as Steve said,
we're going to have a cast

00:00:19.380 --> 00:00:21.540
of characters up here,
and he forgot to mention one,

00:00:21.540 --> 00:00:26.180
which is John Anderson, at the very end,
is going to do a demo of the next version

00:00:26.180 --> 00:00:30.400
of QuickTime Streaming Server Publisher,
which has some great new features that,

00:00:30.400 --> 00:00:33.430
for the project that we're going
to talk about at my stream net,

00:00:33.430 --> 00:00:36.540
they're very, you know,
excited about the new product because

00:00:36.540 --> 00:00:38.540
of some of its new capabilities.

00:00:39.880 --> 00:00:44.130
So, the agenda is, first me,
talking about some of the how-to stuff,

00:00:44.160 --> 00:00:48.420
setting up authentication,
streaming through firewalls, etc.

00:00:48.420 --> 00:00:51.930
And then we're going to go into this
case study on the Merit Network.

00:00:52.030 --> 00:00:56.760
So, Merit Network,
they are a non-profit provider of

00:00:57.450 --> 00:01:03.260
internet access for most of the
schools and universities in Michigan.

00:01:03.260 --> 00:01:05.750
And so,
they're going to go ahead and go through

00:01:05.760 --> 00:01:09.360
details on the history of the project,
some of the objectives.

00:01:10.100 --> 00:01:13.290
How they set up relays,
how they've set it up so that to

00:01:13.290 --> 00:01:18.380
redirect clients to the right server,
some of the testing and configuration,

00:01:18.380 --> 00:01:20.110
and then future plans.

00:01:20.300 --> 00:01:23.490
So let's dive right into some
of the specifics on how to.

00:01:23.620 --> 00:01:28.240
So one of the things that a lot of people
want to do is set up authentication.

00:01:28.240 --> 00:01:31.090
And there's two main reasons to do this.

00:01:31.430 --> 00:01:35.640
One is you want to authenticate who
can broadcast through your server.

00:01:35.800 --> 00:01:39.660
So with a live streaming product,
who can actually send

00:01:39.660 --> 00:01:42.150
streams through your server?

00:01:42.520 --> 00:01:48.360
And we have this thing we call automatic
announced broadcasts that save a lot

00:01:48.360 --> 00:01:52.770
of the hassle of the way it used to
have to be done in terms of doing

00:01:52.770 --> 00:01:55.120
a live webcast through the server.

00:01:55.120 --> 00:01:59.780
So one of the reasons for setting
up authentication is for providing

00:02:00.570 --> 00:02:05.620
a friendly way to do these
automatic announced broadcasts.

00:02:05.640 --> 00:02:10.620
Then there's also just the
authentication to the media itself.

00:02:11.240 --> 00:02:13.890
And the authentication
that we've implemented,

00:02:13.930 --> 00:02:17.880
RTSP authentication, is very similar to
HTTP Digest authentication.

00:02:17.880 --> 00:02:20.740
So the protocols are similar.

00:02:20.740 --> 00:02:25.270
And the implementation is also similar
to what you would see in Apache.

00:02:25.280 --> 00:02:30.440
So just like in Apache where you have
an HT access file for authentication,

00:02:30.440 --> 00:02:34.120
in QuickTime Streaming Server you
have a QT access file for setting

00:02:34.350 --> 00:02:38.600
up authentication to a specific
directory on the streaming server.

00:02:40.080 --> 00:02:45.230
And just like Apache with HT access,
you have files,

00:02:45.230 --> 00:02:49.040
flat files on the disk that have
the users and groups in them.

00:02:49.040 --> 00:02:51.920
So let's just take a look at this.

00:02:52.120 --> 00:02:56.120
For announced broadcasts,

00:02:56.470 --> 00:03:00.740
In QuickTime Streaming Server,
we have a GUI for creating this password.

00:03:00.810 --> 00:03:02.970
And I've highlighted
them here on the screen.

00:03:03.140 --> 00:03:07.400
You would click on Accept Incoming
Broadcasts and click on Set Password.

00:03:07.400 --> 00:03:12.650
So that allows you to create a username
and password for an announced broadcast.

00:03:13.300 --> 00:05:16.500
[Transcript missing]

00:05:17.400 --> 00:05:22.140
Now under the hood,
this all uses these files

00:05:22.200 --> 00:05:23.240
that we talked about before.

00:05:23.240 --> 00:05:27.560
So in this example,
I'll try this laser pointer,

00:05:27.890 --> 00:05:29.480
I've done this cat QT access.

00:05:29.580 --> 00:05:32.250
So I'm in the movies
folder on the server,

00:05:32.250 --> 00:05:34.720
and I'm looking at this QT access file.

00:05:34.720 --> 00:05:35.910
This is what's in it.

00:05:36.010 --> 00:05:39.190
Limit write,
require group broadcaster/limit,

00:05:39.190 --> 00:05:40.570
and then require any user.

00:05:40.720 --> 00:05:43.140
So this one means that
to write to the server,

00:05:43.260 --> 00:05:46.800
you have to be this
user named broadcaster.

00:05:48.620 --> 00:05:52.020
Require any user means any other
user can just connect to the server.

00:05:52.020 --> 00:05:54.060
So there's no authentication.

00:05:54.060 --> 00:05:58.020
Anybody else can freely connect to
the server to access the streams.

00:05:58.020 --> 00:06:02.730
And then this cat command is
I'm catting the QT groups file.

00:06:02.730 --> 00:06:06.800
And actually, here's require group,
not user.

00:06:06.800 --> 00:06:12.160
So anybody in the group broadcaster
will be able to webcast to the server.

00:06:12.860 --> 00:06:18.150
So I've catted this QT groups
file and piped it into grep,

00:06:18.290 --> 00:06:21.900
being a Unix weenie here, and

00:06:22.560 --> 00:06:25.820
Look for this name broadcaster,
and these are all the users that

00:06:25.820 --> 00:06:30.800
are going to be able to broadcast
through the server in this setup.

00:06:30.990 --> 00:06:36.540
So, if you want to set up
your own authentication,

00:06:36.720 --> 00:06:39.260
you're going to have to do
some command line stuff.

00:06:39.390 --> 00:06:42.620
That's just the way it currently works.

00:06:44.530 --> 00:06:48.440
So basically what happens if you
want to authenticate access to media,

00:06:48.440 --> 00:06:50.970
you are going to have
to modify these files.

00:06:51.060 --> 00:06:55.420
So again,
I've looked at the QT access file.

00:06:55.420 --> 00:06:57.870
This time I'm saying require group users.

00:06:57.900 --> 00:07:01.980
That means in this folder,
I have this special directory off of my

00:07:02.010 --> 00:07:04.820
movies directory called authenticated.

00:07:04.820 --> 00:07:08.830
So now it's just like Apache,
it's anything in this directory

00:07:08.850 --> 00:07:12.950
will now require authentication
because I've got a QT access file in

00:07:12.950 --> 00:07:15.080
there that says require group users.

00:07:15.080 --> 00:07:19.580
So now you have to be in the users
group to be able to access media.

00:07:19.580 --> 00:07:23.520
And it's going to put up this
login dialog box when you try.

00:07:23.520 --> 00:07:28.590
So if I look through my QT groups file,
grep users, these are the users that are

00:07:28.590 --> 00:07:30.710
in that group called users.

00:07:30.720 --> 00:07:36.430
And then here I've shown what the
contents of the directory are.

00:07:36.440 --> 00:07:40.030
So what happens with QuickTime Player,
you launch QuickTime Player,

00:07:40.030 --> 00:07:41.990
you type in the URL,
you type in the URL to

00:07:41.990 --> 00:07:44.800
that authenticated media,
and then it's going to ask you

00:07:44.900 --> 00:07:47.830
for a username and password before
it streams the content to you.

00:07:47.840 --> 00:07:54.620
So to create these users,
there's a command QT password,

00:07:54.620 --> 00:08:00.410
which allows you to create new
users in the QT users file.

00:08:00.420 --> 00:08:02.680
To create the groups,
it's just a text editor.

00:08:02.680 --> 00:08:04.020
It's a very simple format.

00:08:04.020 --> 00:08:08.860
It's just the group name followed
by a space delimited list of users.

00:08:08.860 --> 00:08:13.440
So these... These files,
you can have other QT groups

00:08:13.440 --> 00:08:14.700
and QT users files.

00:08:14.700 --> 00:08:17.510
They don't have to be the default
files that are in the config folder

00:08:17.610 --> 00:08:19.160
of QuickTime Streaming Server.

00:08:19.160 --> 00:08:20.900
They can be other files.

00:08:20.920 --> 00:08:24.380
So, you know,
you can set up your own little...

00:08:24.920 --> 00:08:28.510
We see it in higher education in
particular where they want to give

00:08:28.510 --> 00:08:32.440
a faculty member the capability to
create their own users and groups file.

00:08:32.440 --> 00:08:34.310
And that works as well.

00:08:37.770 --> 00:08:41.570
So this is kind of the old way to do
things that we've been going over,

00:08:41.570 --> 00:08:44.290
which is what Apache has and what
QuickTime Streaming Server has.

00:08:44.320 --> 00:08:47.450
A lot of folks want to tie
into a more organizational

00:08:47.450 --> 00:08:49.650
authentication architecture.

00:08:49.660 --> 00:08:52.910
And QuickTime Streaming Server,
like Apache, is written in modules.

00:08:52.920 --> 00:08:56.750
So there are modules that can be
created or modified to do things

00:08:57.220 --> 00:08:59.300
like customize authentication.

00:08:59.300 --> 00:09:02.780
So one group that has done this is NYU.

00:09:02.780 --> 00:09:06.220
So NYU is involved in an Internet2
project called Shibboleth.

00:09:06.850 --> 00:09:09.110
Shibboleth is about
cross-realm authentication,

00:09:09.110 --> 00:09:14.930
which means that, for instance,
the NYU library might want to trust

00:09:15.500 --> 00:09:18.660
people from another university.

00:09:18.660 --> 00:09:19.800
We'll say Cornell University.

00:09:19.820 --> 00:09:22.030
They might say, well,
we've got an agreement with

00:09:22.030 --> 00:09:26.010
Cornell Library so that we can
both access each other's stuff.

00:09:26.140 --> 00:09:28.220
And so Shibboleth,
that's what it's about,

00:09:28.260 --> 00:09:30.220
is this cross-realm authentication.

00:09:30.220 --> 00:09:34.250
And if you go to the Internet2 webpage,
you can read all about Shibboleth.

00:09:34.340 --> 00:09:36.520
They have written an Apache module.

00:09:36.850 --> 00:09:39.790
Because it's modular, too,
for Shibboleth that allows

00:09:39.790 --> 00:09:41.530
you to do this with websites.

00:09:41.560 --> 00:09:46.340
So what NYU has done is taken
that infrastructure and extended

00:09:46.340 --> 00:09:48.720
it to the streaming server.

00:09:48.720 --> 00:09:51.780
They didn't do it directly with
the streaming server because the

00:09:51.780 --> 00:09:55.540
Shibboleth authentication they use,
it's not just a simple challenge and

00:09:55.970 --> 00:09:59.280
response kind of dialogue between
the web server and the client.

00:09:59.300 --> 00:10:00.560
There's a lot that goes on there.

00:10:00.560 --> 00:10:04.310
And that sophisticated dialogue,
the RTSP authentication,

00:10:04.430 --> 00:10:06.180
was just too simple for that.

00:10:06.480 --> 00:10:09.220
It didn't provide them with all
the infrastructure they needed.

00:10:09.220 --> 00:10:11.920
So they've set it up with Apache.

00:10:11.920 --> 00:10:16.430
So basically the flow here is
you request a URL from Safari,

00:10:16.430 --> 00:10:18.110
your web browser.

00:10:18.120 --> 00:10:22.320
It goes through this Apache module to
authenticate you against Shibboleth,

00:10:22.320 --> 00:10:24.800
which does this
cross-realm authentication.

00:10:24.820 --> 00:10:26.780
So Shibboleth can talk
to basically anything,

00:10:26.860 --> 00:10:28.560
LDAP, Kerberos, whatever you want.

00:10:28.580 --> 00:10:32.160
And then what they do is
once you've authenticated,

00:10:32.160 --> 00:10:36.260
it talks to a MySQL database,
stores the IP address of the client,

00:10:36.480 --> 00:10:40.250
the cookie, the Shib cookie,
and timestamps it,

00:10:40.300 --> 00:10:44.660
and then redirects to this
custom module they've written

00:10:44.660 --> 00:10:45.640
for QuickTime streaming server.

00:10:45.640 --> 00:10:48.590
Because it's modular,
they've written this custom module that

00:10:48.590 --> 00:10:51.480
understands these special requests,
these special URLs.

00:10:51.480 --> 00:10:55.120
The special URL comes in,
and then this custom module goes

00:10:55.120 --> 00:10:57.880
back to the MySQL database and says,
okay,

00:10:57.890 --> 00:10:59.810
what IP address are they coming from?

00:10:59.820 --> 00:11:01.540
What's the Shib cookie?

00:11:01.540 --> 00:11:05.190
And when did they do this so
you can't replay these things?

00:11:06.180 --> 00:11:09.450
And then it says yes or no and
delivers the stream or doesn't

00:11:09.450 --> 00:11:11.570
deliver the stream to the client.

00:11:11.600 --> 00:11:15.820
So this is an example of how a
customer has taken the open source

00:11:15.910 --> 00:11:20.100
part of the streaming server,
the Darwin part of the streaming server,

00:11:20.100 --> 00:11:24.320
customized the module so that they
can deliver custom authentication.

00:11:24.320 --> 00:11:28.190
And we're working with NYU to try
to make this piece available through

00:11:28.190 --> 00:11:31.040
the Darwin CVS so it would be
available to any QuickTime streaming

00:11:31.040 --> 00:11:32.620
server or Darwin streaming server.

00:11:32.620 --> 00:11:36.150
But you'd have to have all this other
stuff working too for it to work.

00:11:36.180 --> 00:11:40.560
So we're in the process of trying to
figure out how to make this available

00:11:40.560 --> 00:11:43.580
to a wider audience than NYU right now.

00:11:43.600 --> 00:11:45.600
So pretty interesting stuff.

00:11:46.990 --> 00:11:48.700
Next topic,
so we're done with authentication,

00:11:48.700 --> 00:11:51.090
let's talk about firewalls.

00:11:51.090 --> 00:11:53.980
If you have a publicly
accessible streaming server,

00:11:54.180 --> 00:11:55.540
you should turn on port 80 streaming.

00:11:55.540 --> 00:11:59.220
And this means that you can't run
a web server on that same port on

00:11:59.320 --> 00:12:01.700
that same IP address on that server.

00:12:01.700 --> 00:12:05.320
So it means that you might want to
bind your streaming server to one

00:12:05.320 --> 00:12:08.880
IP address and the web server to
a different IP address if you want

00:12:08.880 --> 00:12:12.290
them both to work over port 80,
or just run your web server

00:12:12.290 --> 00:12:14.530
on 8080 or some other port.

00:12:15.820 --> 00:12:18.970
So what this does, port 80 streaming,
is it tunnels all the

00:12:19.010 --> 00:12:22.170
RTSP/RTP traffic through HTTP port 80,
and that means it gets

00:12:22.200 --> 00:12:23.730
through most firewalls.

00:12:24.080 --> 00:12:26.900
QuickTime 6 supports
automatic configuration,

00:12:26.900 --> 00:12:30.710
so it will try RTSP over the
standard streaming ports,

00:12:30.720 --> 00:12:34.190
and if they're not available,
it will go back to port 80,

00:12:34.190 --> 00:12:36.340
fall back to port 80.

00:12:36.340 --> 00:12:39.650
And this is very recommended for these
publicly accessible servers because it

00:12:39.650 --> 00:12:43.140
allows you to get through firewalls,
and you don't know where

00:12:43.140 --> 00:12:45.260
the client's going to be.

00:12:47.280 --> 00:12:49.330
In your organization,
another thing that you might want

00:12:49.390 --> 00:12:50.920
to do is open up certain ports.

00:12:51.010 --> 00:12:53.610
So this allows you to access
streaming servers that might not

00:12:53.630 --> 00:12:54.980
have port 80 streaming enabled.

00:12:54.980 --> 00:13:00.900
So minimally,
you can open up TCP port 554 and 7070.

00:13:00.900 --> 00:13:04.320
7070 is what real servers use,
and we can use it too.

00:13:04.320 --> 00:13:07.020
But by default,
we use TCP port 554 for RTSP,

00:13:07.200 --> 00:13:09.630
which is a signaling
protocol to the server.

00:13:09.660 --> 00:13:14.140
And then UDP is the protocol that's
used to actually stream the data.

00:13:15.850 --> 00:13:18.340
And you can open up a
range of ports here.

00:13:18.360 --> 00:13:23.260
It depends on how busy your
server is and how many clients

00:13:23.260 --> 00:13:24.780
you have connected to it.

00:13:24.900 --> 00:13:30.670
So that's what sets that range up,
how many ports you actually need.

00:13:30.820 --> 00:13:34.010
But a typical range is 6970 through 9999.

00:13:34.020 --> 00:13:38.480
And then if you want to administer
the server via a web browser,

00:13:38.480 --> 00:13:40.740
you need to open up TCP port 1220.

00:13:40.740 --> 00:13:44.360
And if you want to administer it
through our server admin application,

00:13:44.380 --> 00:13:45.620
you need to open up TCP.

00:13:45.640 --> 00:13:50.110
port 311 so those are the
ports you need to have open

00:13:51.620 --> 00:13:55.220
Another way that people set up, again,
inside an organization,

00:13:55.220 --> 00:13:58.630
security through firewalls,
they have a special part of

00:13:58.630 --> 00:14:01.000
their network called a DMZ,
where they put proxy servers.

00:14:01.020 --> 00:14:04.680
And there is an RTSP proxy server
that allows you to do this.

00:14:04.730 --> 00:14:08.400
And basically what you're doing here
is you're saying the proxy server can

00:14:08.400 --> 00:14:11.930
talk to any server on the internet,
and any client can talk

00:14:11.930 --> 00:14:13.620
to the proxy server.

00:14:13.620 --> 00:14:17.580
But clients can't directly talk to
the servers out on the internet.

00:14:17.900 --> 00:14:24.100
So it puts this go-between box in there,
and we have a version of this that's

00:14:24.130 --> 00:14:28.000
posted to our Darwin site that
you can download and use as well.

00:14:28.000 --> 00:14:31.980
So this is another option,
more of an institutional option, again,

00:14:32.000 --> 00:14:35.430
for people to create firewall,
to work with a firewall.

00:14:35.440 --> 00:14:37.220
Probably the least common.

00:14:37.220 --> 00:14:38.760
This is the least common of the three.

00:14:41.000 --> 00:14:45.090
So next we'll talk about the, really,
I think the meat of this presentation,

00:14:45.090 --> 00:14:47.700
which is scaling streaming
through relays and replication.

00:14:47.700 --> 00:14:51.780
So streaming relays are a
way to conserve bandwidth,

00:14:51.780 --> 00:14:52.660
really.

00:14:52.660 --> 00:14:55.640
So when you're doing a live
stream or a playlist stream,

00:14:55.640 --> 00:15:00.090
where you're streaming stuff out in
real time to a lot of different clients,

00:15:00.100 --> 00:15:04.110
what you can do is set up a
relay so that a client doesn't

00:15:04.340 --> 00:15:06.880
have to go to the source server.

00:15:07.140 --> 00:15:09.140
So this is what we've used in Michigan.

00:15:09.140 --> 00:15:12.980
Typically a school district
doesn't have a big,

00:15:13.010 --> 00:15:15.440
you know, OC3 line or something
like that to the internet.

00:15:15.450 --> 00:15:18.980
They have a T3 or a T1 even,
which isn't a very big pipe.

00:15:18.980 --> 00:15:22.890
So you're not going to be able
to get a lot of 300 kilobit

00:15:22.930 --> 00:15:25.700
streams through a 1.5 megabit T1.

00:15:25.700 --> 00:15:28.960
It's just,
there's not a lot of bandwidth there.

00:15:28.960 --> 00:15:34.260
So instead of trying to get 50 people
to connect to a T1 on 300 kilobits,

00:15:34.330 --> 00:15:36.770
which won't work because you'll,

00:15:37.160 --> 00:15:41.440
The way overload the capacity of the T1,
you could put a relay inside the school.

00:15:41.440 --> 00:15:44.820
Then what happens is the main
server sends a stream to the relay,

00:15:44.820 --> 00:15:48.160
and all the clients inside the
school tune in on the local relay,

00:15:48.180 --> 00:15:51.410
where they have plenty of
bandwidth inside the school.

00:15:51.420 --> 00:15:54.660
So they provide these
streaming points of presence.

00:15:54.660 --> 00:15:57.830
So this is the kind of model
that Akamai is based on.

00:15:57.960 --> 00:15:59.840
So Akamai has this capability built in.

00:15:59.840 --> 00:16:02.980
You may have heard of Akamai,
which is an industrial

00:16:02.980 --> 00:16:06.500
strength replication and
service out on the internet,

00:16:06.500 --> 00:16:08.840
but they also support
this live capability.

00:16:08.880 --> 00:16:13.100
These relays can support
unicast or multicast.

00:16:13.100 --> 00:16:15.360
So what I'm doing right
now is I'm multicasting.

00:16:15.360 --> 00:16:17.410
Hopefully you're all
listening and I'm speaking,

00:16:17.410 --> 00:16:19.200
so it's one person, lots of listeners.

00:16:19.200 --> 00:16:20.930
So that's what multicast is about.

00:16:21.480 --> 00:16:24.850
Whereas unicast is if we're
all on a conference call.

00:16:24.860 --> 00:16:27.050
We'd be tying up, I don't know, eight.

00:16:27.820 --> 00:16:29.800
A hundred phone lines.

00:16:30.000 --> 00:16:32.550
So in unicast,
everyone makes a separate connection,

00:16:32.570 --> 00:16:37.030
just like we do on the phone
network when we make phone calls.

00:16:37.790 --> 00:16:40.530
These can be used with live,
or typically used with

00:16:40.590 --> 00:16:41.540
live or playlist streams.

00:16:41.540 --> 00:16:43.430
They can actually be used
with on-demand media,

00:16:43.430 --> 00:16:47.480
but it's not a very common use of them.

00:16:47.580 --> 00:16:51.280
Another way to save bandwidth
is to replicate your content.

00:16:51.350 --> 00:16:53.930
And this is what Akamai
does in a big way,

00:16:54.140 --> 00:16:56.840
but there are little ways you can
do this with a streaming server as

00:16:56.840 --> 00:16:58.480
well that are pretty interesting.

00:16:58.560 --> 00:17:00.820
And it's commonly used
for video on demand.

00:17:00.900 --> 00:17:03.930
Moving that content closer to the client.

00:17:04.270 --> 00:17:08.190
So relays,
the basics of relays is every relay has

00:17:08.190 --> 00:17:11.240
one source and one or more destinations.

00:17:11.240 --> 00:17:14.240
The source for a relay can be
one of these SDP files that

00:17:14.290 --> 00:17:16.000
comes from a live encoder.

00:17:16.000 --> 00:17:18.730
It can be an actual piece of media.

00:17:18.740 --> 00:17:24.210
And it needs to have an IP address
and port numbers for that source.

00:17:24.310 --> 00:17:26.360
Where is it going to get
that information from?

00:17:26.360 --> 00:17:28.580
And then you can have
one or more destinations.

00:17:28.630 --> 00:17:30.730
Where do you want to
send this stuff out to?

00:17:31.540 --> 00:17:35.020
So that can be an IP address
with specific port numbers.

00:17:35.040 --> 00:17:38.000
Or it can be this thing called
an announced destination,

00:17:38.000 --> 00:17:42.140
which means that it will do the
same thing the broadcaster does.

00:17:42.280 --> 00:17:45.460
It will announce the
broadcast to that destination,

00:17:45.460 --> 00:17:50.300
automatically generate the SDP file,
figure out the port numbers, etc.

00:17:52.140 --> 00:17:56.960
So a very simple configuration
for a relay is where you have a

00:17:56.960 --> 00:17:59.200
main campus and a remote campus.

00:17:59.280 --> 00:18:01.560
On the main campus, again,
you're trying to make most

00:18:01.650 --> 00:18:03.030
effective use of bandwidth.

00:18:03.250 --> 00:18:06.510
So you have a lot of clients out
on the remote campus and then a

00:18:06.510 --> 00:18:09.960
lot of clients on the main campus
that want to view this webcast.

00:18:10.060 --> 00:18:14.640
And then you have an encoder,
labeled as a broadcaster in this slide.

00:18:14.990 --> 00:18:18.520
So the broadcaster sends,
creates this SDP file,

00:18:18.570 --> 00:18:21.950
sends a stream off to
the main campus server.

00:18:22.430 --> 00:18:26.180
The clients on the main campus would
just be able to tune in on the SDP file.

00:18:26.240 --> 00:18:28.180
They're seeing what's
called a reflected stream.

00:18:28.180 --> 00:18:31.480
They're getting a reflected
stream off of the broadcaster.

00:18:31.480 --> 00:18:36.700
This allows you to scale up because
most of these webcasting products,

00:18:36.720 --> 00:18:41.880
you know, encoders, support, say,
one to ten clients at the most.

00:18:42.040 --> 00:18:45.390
So you really need a streaming
server in there to scale

00:18:45.390 --> 00:18:49.480
just internally to more than,
you know, a handful of clients.

00:18:50.700 --> 00:18:52.870
And in this case,
what we've done is we've created a

00:18:52.900 --> 00:18:56.770
relay on the main campus server to
send the stream to a remote campus.

00:18:56.780 --> 00:19:00.900
And that remote campus server reflects
the stream to all the clients.

00:19:01.000 --> 00:19:04.240
And the value of this is we only have
one stream going over the internet.

00:19:04.240 --> 00:19:06.940
Instead of all those clients
on the remote campus creating

00:19:06.940 --> 00:19:09.560
their own connections back
to the main campus server,

00:19:09.560 --> 00:19:10.970
they're just connecting locally.

00:19:10.980 --> 00:19:12.280
So that's the value of a relay.

00:19:12.280 --> 00:19:20.340
And there are, simplistically,
I described two basic kinds of relays.

00:19:20.830 --> 00:19:21.770
Pull and push.

00:19:22.000 --> 00:19:25.630
So a pull relay,
what this does is the relay is

00:19:25.630 --> 00:19:29.840
pulling a stream from a remote
source and relaying it locally.

00:19:29.920 --> 00:19:35.340
So this would be, in this case, the look,
the relay is set up on the remote campus.

00:19:35.520 --> 00:19:37.990
The remote campus is
pulling it from Merit,

00:19:38.030 --> 00:19:40.220
in this case,
that's what I call it from Merit,

00:19:40.470 --> 00:19:42.400
from a server called MIStreemNet1.

00:19:42.400 --> 00:19:45.140
And I give it the path to the SDP file.

00:19:45.420 --> 00:19:48.480
When you do this kind of pull relay,
you have to authenticate

00:19:48.480 --> 00:19:49.780
to the main server.

00:19:49.780 --> 00:19:50.540
Using the administrator.

00:19:50.540 --> 00:19:52.390
The administrator is the
administrative user name and

00:19:52.390 --> 00:19:53.550
password of the streaming server.

00:19:53.690 --> 00:19:55.540
Anybody that's in the admin group.

00:19:55.540 --> 00:19:58.180
So it doesn't have to be the
administrator of the server,

00:19:58.290 --> 00:20:00.280
which would be, I think, a bad idea.

00:20:00.300 --> 00:20:04.320
It can be anybody that's in that
QT groups file listed in the admin group.

00:20:04.320 --> 00:20:07.810
So it doesn't, that user can be not a
real user on the system.

00:20:07.860 --> 00:20:10.300
This is one of those
times when having it,

00:20:10.300 --> 00:20:12.830
the users not as real
users comes in handy,

00:20:12.830 --> 00:20:13.660
actually.

00:20:13.660 --> 00:20:19.160
So this is the remote campus server.

00:20:19.160 --> 00:20:20.460
It's pulling in this content.

00:20:20.460 --> 00:20:21.750
And relaying it locally.

00:20:21.950 --> 00:20:23.120
So that's the source.

00:20:23.270 --> 00:20:26.200
The destination is itself.

00:20:26.310 --> 00:20:29.130
It's very common for either
the source or the destination

00:20:29.170 --> 00:20:30.880
to be the loopback address.

00:20:31.050 --> 00:20:35.040
So in this case,
the destination is the server itself.

00:20:35.150 --> 00:20:39.140
And we're calling the,
giving it the same file name.

00:20:39.260 --> 00:20:43.260
Because it is the loopback address,
we don't need a user name and password.

00:20:43.280 --> 00:20:45.710
We don't need to authenticate
because we're talking to ourselves.

00:20:45.720 --> 00:20:47.780
We figure that's secure.

00:20:47.780 --> 00:20:49.080
Okay.

00:20:49.210 --> 00:20:51.880
Then the other kind of relay is,
is a push relay.

00:20:51.880 --> 00:20:53.200
And this is also very common.

00:20:53.290 --> 00:20:54.980
This is what we've used in Michigan.

00:20:54.980 --> 00:20:59.820
So this is when local streams
are pushed out to another server.

00:20:59.820 --> 00:21:02.620
So you have a stream coming into
the server and we want to push

00:21:02.620 --> 00:21:05.000
it out to multiple destinations.

00:21:05.000 --> 00:21:09.200
So in this case,
the source is the loopback

00:21:09.200 --> 00:21:11.440
address and this file name.

00:21:11.440 --> 00:21:16.080
The destination is a remote server
and there are a few different types

00:21:16.110 --> 00:21:17.710
of destinations we can use here.

00:21:17.740 --> 00:21:20.300
I'll bring up my little crib notes here.

00:21:20.300 --> 00:21:24.100
So, there's unannounced UDP is
what this is set up.

00:21:24.100 --> 00:21:28.090
So a specific IP address and port number.

00:21:28.190 --> 00:21:31.590
This destination address
can be a multicast address,

00:21:31.590 --> 00:21:33.020
as we'll see in a little bit.

00:21:33.270 --> 00:21:38.140
It can be a unicast address,
or it can be announced UDP.

00:21:38.280 --> 00:21:40.750
Announced UDP is just
like the broadcaster.

00:21:40.910 --> 00:21:43.130
So it needs a username and password.

00:21:43.150 --> 00:21:47.540
It's automatically going to
generate the SDP on the destination.

00:21:47.690 --> 00:21:51.580
So it acts basically just like
a live broadcaster would act.

00:21:54.020 --> 00:21:56.980
So beyond the basics,
a relay can pull from a source

00:21:57.080 --> 00:21:58.900
and push to a destination.

00:21:58.970 --> 00:22:02.600
A real common scenario for this would be,
let's go back to that scenario

00:22:02.600 --> 00:22:04.360
where we have the remote campus.

00:22:04.430 --> 00:22:07.290
On the remote campus we
have this server out there,

00:22:07.290 --> 00:22:10.770
and if you saw my picture,
what it was doing was it was pulling

00:22:11.640 --> 00:22:16.810
the content from the main campus and
relaying it locally as a unicast.

00:22:18.670 --> 00:22:20.100
To itself.

00:22:20.170 --> 00:22:23.160
So it was just sending it back to itself
so that people could tune in on that.

00:22:23.350 --> 00:22:25.940
But what if we wanted to relay
it as a multicast to make even

00:22:25.940 --> 00:22:27.580
more effective use of bandwidth?

00:22:27.580 --> 00:22:32.840
Then what we would do is we would pull it
from the remote server and push it to a

00:22:33.100 --> 00:22:34.970
multicast address on the local network.

00:22:35.000 --> 00:22:37.370
So you can pull and push.

00:22:37.370 --> 00:22:40.290
But as I said,
it's very common for either the source or

00:22:40.350 --> 00:22:42.760
the destination to be the machine itself.

00:22:44.640 --> 00:22:48.350
We have found that when you're
using multiple destinations,

00:22:48.350 --> 00:22:51.560
as they're doing in Michigan,
that this unannounced UDP provides

00:22:51.720 --> 00:22:53.790
the most robust configuration.

00:22:55.470 --> 00:23:00.780
The main reason is if the relay server
becomes unavailable for whatever reason,

00:23:00.880 --> 00:23:05.000
and then becomes available again,
clients automatically reconnect

00:23:05.190 --> 00:23:06.700
when you set it up this way.

00:23:06.720 --> 00:23:09.290
So the unannounced UDP,
because the packets are just

00:23:09.290 --> 00:23:13.020
flowing out on the network,
if there's an interruption in the flow,

00:23:13.020 --> 00:23:18.530
as soon as the flow is restored,
clients will continue to receive

00:23:18.540 --> 00:23:21.160
the stream without hands-off.

00:23:21.540 --> 00:23:24.150
Whereas if you're using
an announced webcast,

00:23:24.180 --> 00:23:26.300
the clients have to reconnect.

00:23:27.770 --> 00:23:31.830
Because with an announced webcast,
that STP file gets deleted

00:23:32.130 --> 00:23:34.830
when the flow is interrupted.

00:23:34.830 --> 00:23:37.230
And it goes away,
so that's why the clients

00:23:37.810 --> 00:23:39.280
need to reconnect.

00:23:39.870 --> 00:23:44.130
You can also reflect a multicast
source with the streaming server.

00:23:44.270 --> 00:23:49.080
So this means if you
had a rack of servers,

00:23:49.180 --> 00:23:51.950
each one serving a different subnet,

00:23:52.290 --> 00:23:56.600
You could multicast one stream to
all those servers from your encoder,

00:23:56.600 --> 00:23:58.860
your broadcaster,
and each one of those could

00:23:58.860 --> 00:24:04.100
reflect those as unicasts off to
different parts of your campus.

00:24:04.100 --> 00:26:42.300
[Transcript missing]

00:26:42.490 --> 00:26:44.830
If we put this on the streaming
server and people tune in on it,

00:26:45.020 --> 00:26:48.230
the streaming server reflects
the multicast as unicast,

00:26:48.230 --> 00:26:50.990
which is a useful thing,
but not what we want in this case.

00:26:51.260 --> 00:26:54.600
To actually tune in on a multicast,
you need to put the

00:26:54.600 --> 00:26:58.220
SDP file on any web server,
and that's the easiest way to do it.

00:26:58.290 --> 00:27:01.500
And you can just drag and drop
it on QuickTime Player too,

00:27:01.580 --> 00:27:06.470
or email it, or whatever you want to do,
but the easiest way is to put it on a web

00:27:06.530 --> 00:27:11.580
server and then people use an HTTP URL to
connect to the multicast SDP file.

00:27:12.940 --> 00:27:20.270
On the main campus server,
we're relaying also to the remote campus.

00:27:20.370 --> 00:27:21.980
So in this case,
what we're doing is we're sending

00:27:21.980 --> 00:27:25.430
a unicast stream from the main
campus to the destination,

00:27:25.430 --> 00:27:26.570
which is the remote campus.

00:27:26.580 --> 00:27:30.360
So the destination is that remote server,
and we've decided again we're using

00:27:30.430 --> 00:27:33.670
unannounced UDP because it's more robust.

00:27:33.750 --> 00:27:36.700
And we know that if the stream
somehow gets interrupted,

00:27:36.750 --> 00:27:42.270
this will continue to go as soon
as the things start back up again.

00:27:44.450 --> 00:27:47.440
On the remote server,
we're going to set up the same thing

00:27:47.440 --> 00:27:48.440
we have on the main campus server.

00:27:48.440 --> 00:27:52.390
We're going to tune in
on that incoming stream,

00:27:52.550 --> 00:27:58.510
so the source is ourselves,
and it's just on that IP address,

00:27:58.530 --> 00:27:59.680
listening to specific ports.

00:27:59.700 --> 00:28:01.060
So it's unannounced UDP.

00:28:01.060 --> 00:28:04.480
We're saying, look at ourselves,
look at these two specific ports.

00:28:04.480 --> 00:28:05.460
That's our source.

00:28:05.460 --> 00:28:07.700
We know we're getting a stream there.

00:28:07.900 --> 00:28:10.240
We're acting basically as
a client to that stream.

00:28:10.240 --> 00:28:12.180
And then we're going
to set the destination,

00:28:12.290 --> 00:28:14.780
and in this case,
I'm reusing the same multicast address.

00:28:14.780 --> 00:28:18.240
Because these are two separate networks,
I can do this.

00:28:18.360 --> 00:28:20.110
And I'm using the same multicast address.

00:28:20.410 --> 00:28:22.940
That's a good thing to do in this case,
because then we can

00:28:22.940 --> 00:28:24.180
use the same SDP file.

00:28:24.260 --> 00:28:25.380
We don't have to edit it again.

00:28:25.380 --> 00:28:29.040
We can just use the same
file we already edited.

00:28:29.170 --> 00:28:31.140
Put it on a web server and it just works.

00:28:31.280 --> 00:28:34.590
So that's a more sophisticated one.

00:28:34.880 --> 00:28:39.200
I have a website that tries to
untangle all this stuff for people

00:28:39.200 --> 00:28:44.150
and to help you do more sophisticated
stuff with a streaming server.

00:28:44.150 --> 00:28:45.980
It's just soundscreen.com.

00:28:45.980 --> 00:28:48.480
So if you go to that website,
you can get in touch with

00:28:48.480 --> 00:28:49.770
me through that page.

00:28:49.770 --> 00:28:53.460
Also, I've got a lot of instructional
information on the how-tos

00:28:53.580 --> 00:28:54.870
on all these things.

00:28:54.960 --> 00:28:59.400
So with that, though,
I want to turn it over here to Laurence,

00:28:59.560 --> 00:29:02.360
or Laurie Kirchmeier,
who is the Senior Engineer of

00:29:02.540 --> 00:29:05.850
Networking R&D for Merit Network,
and Patrick Bymhold,

00:29:05.900 --> 00:29:11.320
who is the Systems Engineer that supports
education in the state of Michigan,

00:29:11.320 --> 00:29:16.390
and I've worked closely with them on
their statewide streaming initiative.

00:29:26.410 --> 00:29:28.270
Hello.

00:29:28.450 --> 00:29:34.240
As we get into this,
Patrick and I have worked very closely

00:29:34.240 --> 00:29:36.900
over the last year putting this together.

00:29:36.900 --> 00:29:40.320
And so we thought that we would sort
of tag-team this presentation because

00:29:40.320 --> 00:29:42.210
there's parts that we both worked on.

00:29:42.260 --> 00:29:44.170
So we'll see how this goes.

00:29:44.200 --> 00:29:48.500
As I say,
I'm a senior engineer with Merit Network.

00:29:48.500 --> 00:29:52.480
Merit is a statewide network for sort
of educational institutions in Michigan.

00:29:52.740 --> 00:29:57.270
The 15 universities are sort of the
board members of the Merit board.

00:29:57.280 --> 00:30:01.470
And we have over 200 affiliates
connected to the statewide network,

00:30:01.520 --> 00:30:08.220
those affiliates being the ISDs,
school districts, hospitals, libraries.

00:30:08.220 --> 00:30:13.350
And so the objectives we have here...

00:30:15.210 --> 00:30:20.320
were to provide an infrastructure
for statewide live webcasting.

00:30:20.320 --> 00:30:26.260
The impetus for this was from one
of the regional educational media

00:30:26.300 --> 00:30:34.190
centers had a broadcast studio,
and they were doing satellite broadcasts

00:30:34.270 --> 00:30:40.300
of administrative broadcasts to school
administrators on various topics,

00:30:40.300 --> 00:30:46.040
like No Child Left Behind,
and that's one example.

00:30:46.040 --> 00:30:53.430
And they wanted a way to provide
that broadcast to users without

00:30:53.830 --> 00:30:59.090
the administrators having to
drive to a central location to

00:30:59.090 --> 00:31:05.230
watch this satellite broadcast,
or having to go to receive it over an

00:31:05.230 --> 00:31:09.540
HC23 stream to a video conferencing room.

00:31:10.290 --> 00:31:14.420
So, um, um,

00:31:15.600 --> 00:34:11.600
[Transcript missing]

00:34:13.020 --> 00:34:14.220
Pressing too fast, I'm sure.

00:34:14.220 --> 00:34:16.250
It's all the coffee you had this morning.

00:34:16.260 --> 00:34:16.840
I know.

00:34:16.840 --> 00:34:17.730
That's right.

00:34:17.740 --> 00:34:18.680
We'll get back.

00:34:18.700 --> 00:34:21.840
As I say, some of these school districts
are connected with a T1,

00:34:21.860 --> 00:34:25.190
and so you had four users on there,
and you overloaded their inbound

00:34:25.190 --> 00:34:27.100
connection to their network.

00:34:27.100 --> 00:34:31.320
So the solution was to deploy a
hierarchy of streaming servers

00:34:31.320 --> 00:34:34.610
with... Let's go to this slide.

00:34:34.620 --> 00:34:36.420
And so that's what we did.

00:34:36.440 --> 00:34:44.920
And so now we can have a broadcaster
at any location on the network,

00:34:44.920 --> 00:34:46.100
on the Internet, basically.

00:34:46.100 --> 00:34:49.820
There's one single,
this green dotted line,

00:34:49.820 --> 00:34:53.140
it's a single stream that is
central master relay server,

00:34:53.140 --> 00:34:57.860
and Merit Network,
we're providing the co-location

00:34:57.860 --> 00:35:01.220
space and sort of the bandwidth,
free bandwidth, basically,

00:35:01.220 --> 00:35:03.000
for this master relay server.

00:35:03.000 --> 00:35:07.850
And so this master relay server, in turn,
just redirects the broadcast out

00:35:08.050 --> 00:35:11.480
to a number of relay servers,
in the different school districts,

00:35:11.480 --> 00:35:14.410
and around the state of Michigan.

00:35:14.420 --> 00:35:18.980
So thus minimizing the bandwidth,
going across those expensive links,

00:35:19.060 --> 00:35:22.130
or for the school districts,
the expensive links to our network.

00:35:26.380 --> 00:35:29.040
So again,
with regards to multicast and unicast,

00:35:29.040 --> 00:35:31.490
MissionNet is a
multicast-enabled network.

00:35:31.500 --> 00:35:35.270
And so wherever we can,
we would like to be able to send a

00:35:35.270 --> 00:35:38.210
multicast stream to the relay servers.

00:35:38.240 --> 00:35:41.920
And we're working with our affiliates
to see whether that can be done.

00:35:44.370 --> 00:35:46.740
So now we're going to talk about,
or at least start talking about,

00:35:46.740 --> 00:35:47.510
the things we've learned.

00:35:47.520 --> 00:35:51.820
This has been an amazing
journal over the past year.

00:35:51.820 --> 00:35:52.320
A few more.

00:35:52.650 --> 00:35:53.060
Yep.

00:35:53.080 --> 00:35:56.760
I'd like to take the opportunity
right now to thank the person that

00:35:56.780 --> 00:36:00.020
has more information and has had
about QuickTime Streaming Server,

00:36:00.020 --> 00:36:02.700
which is George Cook,
than I think anybody does.

00:36:02.700 --> 00:36:05.070
So if you get a chance,
take a look at his site.

00:36:05.080 --> 00:36:09.820
But we ended up with, right now,
we have 16 locations,

00:36:09.820 --> 00:36:12.780
15 locations in the state of Michigan,
including Copper Country.

00:36:12.780 --> 00:36:14.220
It was a nice seven-hour drive.

00:36:14.300 --> 00:36:16.360
Up to Houghton, Michigan,
to set up that server.

00:36:16.360 --> 00:36:22.060
And the thing that's been most
informational about this whole project

00:36:22.060 --> 00:36:25.340
is working with 16 WAN managers,
right?

00:36:25.340 --> 00:36:29.010
Because now I have 16 people that are
responsible for their own networks.

00:36:29.020 --> 00:36:31.080
Every network has been
completely different.

00:36:31.120 --> 00:36:35.340
And so we've had some serious
growing that we had to do.

00:36:35.340 --> 00:36:37.220
So go on to the --

00:36:38.020 --> 00:36:39.380
So, um, okay.

00:36:39.380 --> 00:36:42.120
Are you,
is there something you want to add?

00:36:42.120 --> 00:36:46.300
Um, just talking about working
with these 16 WAN managers,

00:36:46.300 --> 00:36:50.110
the other interesting piece
to this is that you tend to

00:36:50.110 --> 00:36:54.310
have separate people wanting to
deliver the content on a campus.

00:36:54.320 --> 00:36:57.360
You have the content folks who
are wanting to get the stream in,

00:36:57.360 --> 00:36:59.740
and then you have the
networking WAN folks.

00:36:59.740 --> 00:37:03.400
And deploying a QuickTime Streaming
Server tends to bring those two

00:37:03.400 --> 00:37:05.680
groups closer together very quickly.

00:37:06.760 --> 00:37:08.290
And that's something which is good.

00:37:08.340 --> 00:37:12.880
I mean, and it's definitely an education
for the network administrators.

00:37:12.880 --> 00:37:16.300
And as Patrick mentioned,
he has been doing the legwork,

00:37:16.300 --> 00:37:19.950
driving to all these locations,
installing these servers,

00:37:19.960 --> 00:37:21.780
and has done an amazing job.

00:37:23.500 --> 00:37:29.000
[Transcript missing]

00:37:29.370 --> 00:37:31.670
So some of the things we
wanted to do was make sure we

00:37:31.670 --> 00:37:33.690
could broadcast from anywhere.

00:37:33.700 --> 00:37:36.620
We want to be able to eventually
have students that are working on

00:37:36.630 --> 00:37:40.760
projects in an educational institution
anywhere in Michigan broadcast.

00:37:40.760 --> 00:37:42.790
We've got a program
going on at 11 o'clock,

00:37:42.790 --> 00:37:44.200
or a program going on at noon.

00:37:44.200 --> 00:37:47.700
We have actually had conversations
about universities doing school nights.

00:37:47.700 --> 00:37:49.470
So instead of students having
to go to the university,

00:37:49.540 --> 00:37:53.000
they tune into the school night event
that's taking place in their local

00:37:53.000 --> 00:37:55.360
school district from MI StreamNet.

00:37:55.360 --> 00:37:56.760
So broadcast from anywhere.

00:37:56.800 --> 00:38:03.410
We want to be able to
have the parent node.

00:38:03.800 --> 00:38:07.520
push information out to the relays
regarding the content of the video.

00:38:07.520 --> 00:38:12.950
We'll talk about it in a minute,
but I've got this thing now that

00:38:12.960 --> 00:38:14.120
I call the Microsoft effect.

00:38:14.120 --> 00:38:17.180
And it's bad for me to say
that nobody's from Microsoft.

00:38:17.180 --> 00:38:19.440
We're in an Apple developer conference,
I can say this part.

00:38:19.440 --> 00:38:23.240
But this whole notion of servers
do a good communication in terms

00:38:23.240 --> 00:38:26.020
of announced relays over ICMP.

00:38:30.760 --> 00:38:32.700
No, the pinging between the... Yeah.

00:38:32.700 --> 00:38:36.780
And so there's some organizations
where actually ICMP's been turned off,

00:38:36.780 --> 00:38:37.380
right?

00:38:37.380 --> 00:38:39.920
And so we have servers that can't talk
with each other anymore and they just,

00:38:39.950 --> 00:38:44.770
"Oh, I'm going to stop broadcasting
now because I don't know if I can

00:38:44.770 --> 00:38:48.820
talk to the child." Replicate,
we're going to talk about replication

00:38:48.840 --> 00:38:51.940
of content over the servers over
our sync and then the thing that

00:38:51.970 --> 00:38:55.360
Laura's going to get to is how we
made all this thing come together,

00:38:55.360 --> 00:38:58.980
the Akamai effect with
the redirection script.

00:38:58.980 --> 00:39:01.450
The children notes,
we wanted them to be able

00:39:01.450 --> 00:39:04.990
to have access to the data,
meaning the video coming in from the

00:39:04.990 --> 00:39:07.100
streaming server via the STP file.

00:39:07.100 --> 00:39:09.860
And when you start--is anybody
running streaming servers?

00:39:09.870 --> 00:39:10.860
Everybody?

00:39:10.860 --> 00:39:16.940
The thing that I have to say is don't
make this any harder than it actually is.

00:39:16.940 --> 00:39:18.650
For some reason,
the hardest time we had in setting

00:39:18.650 --> 00:39:22.120
up the servers we were setting up is
we thought it had to be harder math.

00:39:22.120 --> 00:39:24.510
We thought maybe we
needed a pocket protector,

00:39:24.520 --> 00:39:27.360
some incredible slide rule,
something that, you know,

00:39:27.360 --> 00:39:28.980
would allow this to make sense to us.

00:39:28.980 --> 00:39:32.690
But really, this is just very,
very simple in the way

00:39:32.730 --> 00:39:34.740
that it can be configured.

00:39:34.740 --> 00:39:35.730
Okay.

00:39:35.740 --> 00:39:43.650
The last thing that I think is
from Merit's perspective being an

00:39:43.650 --> 00:39:49.400
ISP and we were concerned about
the--whilst we've got these 15 relay

00:39:49.410 --> 00:39:54.120
servers around the state and users
get redirected to pull their streams

00:39:54.280 --> 00:39:58.600
from these local points of presence
in their various school districts,

00:39:58.600 --> 00:40:03.160
we were concerned about how many other
users might tune in who are--don't have

00:40:03.160 --> 00:40:06.200
that--don't have a local relay server.

00:40:06.320 --> 00:40:10.510
And so, what we put in as a second
QuickTime streaming server

00:40:10.510 --> 00:40:14.070
in the Merit data center,
which would take--which would be

00:40:14.130 --> 00:40:17.470
the catch-all server for users
who are not redirected to a local

00:40:17.900 --> 00:40:20.890
streaming server in their ISD.

00:40:21.040 --> 00:40:23.540
And so,
we're sort of working to see how much

00:40:23.880 --> 00:40:28.360
bandwidth we're willing to donate for
that and how much demand there is.

00:40:28.360 --> 00:40:30.950
But again,
this is a useful tool because we

00:40:30.950 --> 00:40:34.350
can begin to see if more users come
in from another school district,

00:40:34.350 --> 00:40:37.390
we can begin to go to that target,
that school district and say, "Hey,

00:40:37.460 --> 00:40:39.410
if you put a streaming
server in your district,

00:40:39.420 --> 00:40:42.490
then you wouldn't incur those--all
the bandwidth costs across your

00:40:42.490 --> 00:40:46.270
link to our network and there'll
be a great benefit." Okay.

00:40:46.350 --> 00:40:49.760
So, the one note that we have is
we've limited the shunt server

00:40:49.760 --> 00:40:51.550
so that it allows up to 50 users.

00:40:51.560 --> 00:40:52.550
Right.

00:40:52.560 --> 00:40:54.510
Anybody that's outside of the service
area will not end up doing so.

00:40:54.630 --> 00:40:56.280
And really,
what we want to do is if it's a

00:40:56.380 --> 00:40:59.470
51st person goes and clicks on
that stream--on that shunt server,

00:40:59.600 --> 00:41:02.760
what we should really do is
put up a webpage which says,

00:41:02.760 --> 00:41:06.140
"You should go buy a QuickTime--or
get your network first or--to buy

00:41:06.210 --> 00:41:10.000
a QuickTime streaming server and
put it in your school district

00:41:10.010 --> 00:41:12.290
and then you could watch this."

00:41:12.900 --> 00:41:14.300
So some of the stuff we learned.

00:41:14.350 --> 00:41:16.520
The first time we set this up,
we used announced relay,

00:41:16.520 --> 00:41:18.450
which is the easiest way
to set up a relay network.

00:41:18.560 --> 00:41:21.760
I don't know if anybody's looked at
expanding their networks or they're

00:41:21.810 --> 00:41:25.000
doing hierarchical broadcasting.

00:41:25.070 --> 00:41:30.430
But announced relay, very simple,
put in from QuickTime Streaming Server.

00:41:30.580 --> 00:41:35.620
I'm simply setting up a-- actually,
I'm going to talk about that in a minute.

00:41:35.850 --> 00:41:38.120
The first time we set this up,
we used announced relay.

00:41:38.120 --> 00:41:40.310
So let's go on to the next slide.

00:41:40.960 --> 00:41:44.240
In an announced relay,
the parents responsible for getting the

00:41:44.240 --> 00:41:47.190
content out to the children's servers,
what I call children's servers,

00:41:47.190 --> 00:41:49.530
so they know where the
broadcast is coming from.

00:41:49.560 --> 00:41:54.010
A parent announces the STP file,
and each one of the children

00:41:54.010 --> 00:41:58.010
simply tune into the STP file,
because it's sitting inside their

00:41:58.010 --> 00:41:59.760
library slash movies directory.

00:41:59.760 --> 00:42:01.360
Next.

00:42:01.360 --> 00:42:05.180
This was a great solution.

00:42:05.180 --> 00:42:07.210
Very, very simple in setting up.

00:42:09.800 --> 00:42:11.320
Distributed streaming server network.

00:42:11.380 --> 00:42:20.380
We also found a very interesting feature
built into streaming server in that it

00:42:20.700 --> 00:42:24.860
If one of the children was not available,
the streaming server would simply say,

00:42:24.860 --> 00:42:29.100
I can't broadcast anymore,
and restart itself every two minutes.

00:42:29.100 --> 00:42:34.080
So we ended up with these live broadcasts
where the video is being restarted every

00:42:34.080 --> 00:42:36.860
two minutes over and over and over again.

00:42:36.860 --> 00:42:39.470
You just stop for two minutes and
you tune in and you see a little

00:42:39.470 --> 00:42:40.970
bit more and then it would stop.

00:42:41.000 --> 00:42:43.380
Yeah, and so we had two things
that were taking place.

00:42:43.380 --> 00:42:47.930
Firewall configurations, right,
or again the Microsoft effect,

00:42:48.060 --> 00:42:50.380
which goes back to firewall
configurations because there was no ICMP.

00:42:50.600 --> 00:42:53.820
So one of the things I would recommend
in setting up a distributed network if

00:42:53.820 --> 00:42:57.580
you're going over firewalls is make sure
that you have a one-to-one relationship.

00:42:57.600 --> 00:43:00.300
The easiest conversation for
me with the network managers,

00:43:00.300 --> 00:43:03.940
the WAN managers was, set up your parent,
set up your child,

00:43:03.960 --> 00:43:07.020
and set up the firewall in between
so that the two just can do anything

00:43:07.020 --> 00:43:08.310
they want to do with each other.

00:43:08.610 --> 00:43:10.960
There is no restriction,
there is no port mapping,

00:43:10.960 --> 00:43:15.190
it's just a completely open connection
between those two devices on the network.

00:43:15.480 --> 00:43:19.640
So we worked at this for a little while,
and we continued having problems,

00:43:19.790 --> 00:43:23.270
so we switched to...

00:43:24.600 --> 00:43:25.620
Unannounced.

00:43:25.650 --> 00:43:28.570
Basically, give a name,
give a port number.

00:43:28.700 --> 00:43:30.000
So this is on the parent server.

00:43:30.000 --> 00:43:32.310
The parent simply got a relay set up.

00:43:32.380 --> 00:43:33.890
And we'll see some in just a sec.

00:43:33.900 --> 00:43:36.670
And it simply says,
I'm sending data to this

00:43:36.760 --> 00:43:38.220
port number at this machine.

00:43:38.220 --> 00:43:41.010
It doesn't even care if
the machine's out there.

00:43:41.010 --> 00:43:42.600
It's just, here's video.

00:43:42.600 --> 00:43:44.290
You're going to tune into it.

00:43:44.330 --> 00:43:47.120
You can watch the video
to your heart's content.

00:43:47.120 --> 00:43:48.970
If not, I don't care, really.

00:43:48.970 --> 00:43:50.560
I'm just giving you video.

00:43:50.560 --> 00:43:51.020
Go on.

00:43:51.020 --> 00:43:53.550
So this is the way the network
is currently configured.

00:43:54.040 --> 00:43:57.310
I didn't mention in the first part,
we have QuickTime Broadcaster

00:43:57.320 --> 00:44:00.930
running on a machine at
Wayne County Resort right now.

00:44:00.940 --> 00:44:04.670
And we've simply taken the STP file off,
QuickTime Broadcaster exported

00:44:04.670 --> 00:44:07.720
it and put it inside the
movies directory in the parent.

00:44:07.720 --> 00:44:12.090
Each one of the children
have been set up so that they

00:44:12.280 --> 00:44:15.240
simply tune into the STP file.

00:44:15.240 --> 00:44:16.780
And we're going to look at the
STP file in a minute so you

00:44:16.780 --> 00:44:17.770
can see what that looks like.

00:44:17.780 --> 00:44:19.140
It's, again, very simple.

00:44:19.140 --> 00:44:20.200
We thought it had to be hard.

00:44:20.570 --> 00:44:22.940
Patrick went and I hardly ever use Excel.

00:44:22.940 --> 00:44:27.020
I used Excel and I got this spreadsheet
that just would cover this whole stage.

00:44:27.020 --> 00:44:30.520
And it's got this flowing set of formulas
where you can figure out port mappings.

00:44:30.520 --> 00:44:32.800
Oh my gosh,
I would open source this thing.

00:44:32.800 --> 00:44:33.400
It was so amazing.

00:44:33.400 --> 00:44:36.020
And it didn't need to be that hard,
right?

00:44:36.020 --> 00:44:38.800
So I still have it.

00:44:38.800 --> 00:44:41.120
We thought we had to
have a unique STP file.

00:44:41.120 --> 00:44:45.010
I thought about printing it,
but I really don't need it now.

00:44:45.020 --> 00:44:49.900
So anyway, so we copied the broadcaster
file up to the server.

00:44:50.560 --> 00:44:53.880
One of the relays are configured
inside the streaming server

00:44:53.880 --> 00:44:54.540
and we'll look at that.

00:44:54.540 --> 00:44:57.190
And then video goes down
to the children nodes.

00:44:57.200 --> 00:44:58.560
So this is the way we're
currently configured.

00:44:58.560 --> 00:45:01.260
And this has been the best
experience that we've had.

00:45:01.300 --> 00:45:02.240
Go on.

00:45:02.240 --> 00:45:04.140
One other thing to note.

00:45:04.160 --> 00:45:12.220
I like to think of the way this is set
up is that the STP file is the key.

00:45:12.220 --> 00:45:15.760
If you don't have the STP file
on the child relay server,

00:45:15.760 --> 00:45:20.470
the master relay, the parent server,
is sending the data down.

00:45:20.560 --> 00:45:24.520
And it's only when you get the key,
that key on that local relay server,

00:45:24.520 --> 00:45:27.640
that the stream actually
gets into that local relay

00:45:27.640 --> 00:45:29.630
server and users can watch it.

00:45:29.660 --> 00:45:32.150
And so it's a good sort of analogy.

00:45:35.900 --> 00:45:39.840
Some of the things we like about this.

00:45:39.840 --> 00:45:41.820
The fact that if the
parent ends up going away,

00:45:41.820 --> 00:45:44.460
the children don't lose the
connection to the viewers that

00:45:44.460 --> 00:45:46.900
are watching the broadcast when
the parent comes back online.

00:45:46.900 --> 00:45:50.730
If for some reason it goes down,
the children will automatically

00:45:50.820 --> 00:45:54.610
pick up in the broadcast that
they were showing to the viewers.

00:45:54.640 --> 00:46:01.240
This is a huge note with the little
pointer up in the third line up there.

00:46:01.850 --> 00:46:05.030
The same SDP file we use for children
to tune into the broadcast can be

00:46:05.030 --> 00:46:07.220
distributed throughout the children.

00:46:07.260 --> 00:46:10.370
So with our sync,
we're actually looking at the ability

00:46:10.370 --> 00:46:12.730
to say we're going to have 20 channels,
right?

00:46:12.760 --> 00:46:16.270
And channel 1 equals,
and with the information that

00:46:16.280 --> 00:46:20.760
we're going to have regarding
local host address 127.0.0.1,

00:46:20.760 --> 00:46:24.640
we will distribute that throughout the
entire network affecting all the servers.

00:46:24.760 --> 00:46:26.760
And we see this thing growing.

00:46:26.760 --> 00:46:28.760
We've got 17 servers, 16 servers now.

00:46:28.760 --> 00:46:30.150
We've got two more coming online.

00:46:30.310 --> 00:46:31.260
So it'll be a lot of fun.

00:46:31.260 --> 00:46:34.410
It'll be nice to be able to
have this easy configuration be

00:46:34.410 --> 00:46:36.760
replicable throughout the state.

00:46:36.760 --> 00:46:39.000
Next.

00:46:39.260 --> 00:46:41.840
So, let's talk about the way this works.

00:46:42.140 --> 00:46:46.200
On the left-hand side,
inside Streaming Server Admin,

00:46:46.360 --> 00:46:50.620
The next slide is the relays themselves,
and there's some information you

00:46:50.640 --> 00:46:52.300
associate with the relay itself.

00:46:52.300 --> 00:46:57.320
And then next is, on the right-hand side,
the actual servers that you're

00:46:57.320 --> 00:46:59.300
redistributing this broadcast to.

00:46:59.300 --> 00:47:02.170
So go on.

00:47:04.140 --> 00:47:06.340
I have a clicker,
but it doesn't work with that thing.

00:47:06.340 --> 00:47:11.700
But I wanted this.

00:47:13.900 --> 00:47:15.780
So we set up the server
so we have a relay name.

00:47:15.780 --> 00:47:18.260
It doesn't really affect in terms of
what the user is going to be tuning into.

00:47:18.260 --> 00:47:23.500
We have a relay point, basically 020.sdp,
and this is the mount point,

00:47:23.500 --> 00:47:27.870
or the broadcast connection point,
and the server ends up pointing

00:47:27.870 --> 00:47:32.150
it back to itself because we have
the broadcaster sending video to a

00:47:32.150 --> 00:47:34.890
specific IP address on the network.

00:47:34.890 --> 00:47:38.620
We're not going to share it with you
because it's not fair for us to do that.

00:47:39.130 --> 00:47:41.770
But we tell the server,
"Tune into yourself to watch the

00:47:41.770 --> 00:47:45.650
broadcast because it knows that this
020.sdp file has all the information it

00:47:45.660 --> 00:47:47.100
needs to be able to get to the broadcast.

00:47:47.180 --> 00:47:50.380
The broadcaster is sending."
Go on to the next one.

00:47:50.380 --> 00:47:54.410
And then within the relay setup,

00:47:56.320 --> 00:48:00.580
We have each one of the servers defined,
either by IP address or by name.

00:48:00.580 --> 00:48:05.280
This actually doesn't have to be
a name that is resolvable by DNS.

00:48:05.280 --> 00:48:07.260
It can actually be a name
that's sitting in the host file.

00:48:07.260 --> 00:48:11.140
And the port that this is
going to be broadcast to.

00:48:11.140 --> 00:48:13.520
And as I mentioned before,
we're talking about channel 20.

00:48:13.520 --> 00:48:19.680
This could be that all the servers
for channel 20 are sitting at 21.326

00:48:19.680 --> 00:48:21.540
throughout the entire network.

00:48:21.560 --> 00:48:25.650
So the server simply says I'm
broadcasting to this UDB base port.

00:48:26.300 --> 00:48:27.120
Go on to the next one.

00:48:27.120 --> 00:48:28.280
So remember this number.

00:48:28.280 --> 00:48:31.810
UDB base port actually
ends up being two ports.

00:48:31.860 --> 00:48:35.410
21.326 is the beginning port.

00:48:35.420 --> 00:48:36.980
And you will notice we
assigned this to audio.

00:48:36.980 --> 00:48:37.550
We didn't.

00:48:37.630 --> 00:48:38.250
QuickTime did.

00:48:38.260 --> 00:48:40.540
And then video is assigned to 21.328.

00:48:40.540 --> 00:48:45.900
This does not mean you can start
messing around with the port 21.327.

00:48:45.900 --> 00:48:49.730
Basically three ports are broadcast
is what you're going to be using.

00:48:49.740 --> 00:48:52.560
And I tried to get crazy
with the spreadsheet.

00:48:52.560 --> 00:48:55.180
I tried to figure out a way to
maximize my number of ports.

00:48:55.310 --> 00:48:57.740
Because when I was thinking I had
to have a look at George laughing.

00:48:57.800 --> 00:48:59.260
He had a fun time with this.

00:48:59.260 --> 00:49:00.240
He really didn't tell me this.

00:49:00.240 --> 00:49:01.050
I knew he didn't tell me.

00:49:01.060 --> 00:49:04.100
I'm making that part up.

00:49:04.140 --> 00:49:07.810
But I started to get crazy with
how I was configuring the ports.

00:49:07.830 --> 00:49:12.070
And it turned out that the 327 is a,
I don't know, sync port.

00:49:12.140 --> 00:49:14.860
Something that is used by the
server in terms of communication.

00:49:14.860 --> 00:49:19.380
So this information really isn't
pertinent to what we're talking

00:49:20.060 --> 00:49:22.220
about regarding the broadcast.

00:49:22.220 --> 00:49:24.380
Talk to myself.

00:49:24.740 --> 00:49:25.540
Look at these ports.

00:49:25.540 --> 00:49:28.760
And then start spreading video to the
viewers that are wanting to tune in.

00:49:28.760 --> 00:49:29.820
When are the next ones?

00:49:29.820 --> 00:49:30.830
The crossed out lines.

00:49:30.860 --> 00:49:33.840
I mean,
you can delete those out of the STP file.

00:49:33.860 --> 00:49:36.010
So that was the unique thing.

00:49:36.060 --> 00:49:37.300
It turned out that, go back one.

00:49:37.300 --> 00:49:40.060
It turned out that these three lines
right here are extremely important.

00:49:40.060 --> 00:49:41.850
And George can talk about that.

00:49:41.880 --> 00:49:43.260
I didn't have them.

00:49:43.260 --> 00:49:44.400
And we couldn't have a broadcast.

00:49:44.400 --> 00:49:46.500
And of course, he's like, oh, well,
you're messing with these three lines.

00:49:46.500 --> 00:49:47.870
Guy's scary.

00:49:51.340 --> 00:49:56.990
Okay, I'll talk about live redirection.

00:49:57.640 --> 00:50:06.240
As we said, we want to redirect the users
to the closest streaming server

00:50:06.630 --> 00:50:09.150
local to their school district.

00:50:09.650 --> 00:50:18.650
What we've put together is a
CGI Perl script and what will be

00:50:18.690 --> 00:50:22.560
a database right now is a flat
configuration file which contains a

00:50:22.560 --> 00:50:29.190
mapping between a set of IP address
ranges for that school district and

00:50:29.370 --> 00:50:34.120
then the address of the local relay
server to redirect the user to.

00:50:34.120 --> 00:50:38.020
And so the users can open up a URL.

00:50:38.490 --> 00:50:46.690
They pause the CGI Perl script
and they automatically get XML

00:50:47.270 --> 00:50:53.220
Data back to QuickTime Player or
to QuickTime embedded in a browser,

00:50:53.220 --> 00:50:58.610
telling it to open up the
stream from the local server.

00:50:59.400 --> 00:51:05.010
We also added, what I worked on was
some additional logging,

00:51:05.010 --> 00:51:10.150
so we could log as users get
redirected or do not get redirected,

00:51:10.150 --> 00:51:12.960
so we could begin to
see how successfully,

00:51:12.960 --> 00:51:18.980
how well the coverage was
of local relay servers.

00:51:18.980 --> 00:51:24.130
And again, we could have the ability to
redirect users to a live stream,

00:51:24.140 --> 00:51:30.630
to an STP file on a local relay server,
or to replicated movies or MP4s,

00:51:30.690 --> 00:51:35.220
whatever media we have
replicated on the local relay.

00:51:35.220 --> 00:51:38.750
This redirection script
will work with any of those.

00:51:40.400 --> 00:51:43.500
This is just a one-line example.

00:51:43.570 --> 00:51:48.630
We've just got the child IP address,
the relay address,

00:51:48.630 --> 00:51:52.580
and then the client address
range start and end.

00:51:55.990 --> 00:52:03.460
As the script is called, essentially,
you can see there's a curl statement.

00:52:03.570 --> 00:52:08.000
We're just showing that when the
script gets called by the browser,

00:52:08.000 --> 00:52:12.080
you can use curl as a command
line to make this call.

00:52:12.580 --> 00:52:16.930
This is what gets returned, this XML,
and this is passed to QuickTime,

00:52:16.960 --> 00:52:21.500
either the QuickTime player or to
QuickTime inside of the browser,

00:52:21.500 --> 00:52:26.870
and does the necessary redirection,
passing the redirection to

00:52:26.930 --> 00:52:31.620
the local relay IP address,
followed by the name of the STP file.

00:52:33.380 --> 00:52:39.700
This is showing the embed command,
how you would embed the call,

00:52:39.800 --> 00:52:43.660
the object embed command to

00:52:43.970 --> 00:52:47.410
To embed the call,
this is our master relay server,

00:52:47.410 --> 00:52:52.030
and we're calling this Perl script,
mystreamnet.perl,

00:52:52.030 --> 00:52:55.330
with the name of the SDV file.

00:52:55.340 --> 00:53:00.780
And what results from that call is
this redirection to the local server.

00:53:05.340 --> 00:53:06.780
We're going to talk, yeah.

00:53:07.060 --> 00:53:10.560
So what we wanted to do was,
as we rolled out these servers,

00:53:10.560 --> 00:53:15.530
we wanted to do a whole set of
testing and load testing as much

00:53:15.530 --> 00:53:18.290
as possible to make sure we...

00:53:18.500 --> 00:53:19.500
and many more.

00:53:19.500 --> 00:53:20.500
So, I think that's it.

00:53:20.500 --> 00:53:21.500
I think that this session, I think,
is going to be the last one.

00:53:21.500 --> 00:53:22.440
I think it would run under loads.

00:53:22.530 --> 00:53:25.750
Certainly, we wanted to stress
the redirection script,

00:53:25.750 --> 00:53:29.280
and so we developed what there's
a one -- a Python script,

00:53:29.280 --> 00:53:34.440
which George put together to stress
test the redirection script itself.

00:53:34.440 --> 00:53:36.500
And then we also used
streaming load tool,

00:53:36.570 --> 00:53:39.060
which is part of
QuickTime Streaming Server.

00:53:39.060 --> 00:53:40.060
Is it part of the release?

00:53:40.060 --> 00:53:41.050
Yeah.

00:53:41.090 --> 00:53:42.060
It's on every server, isn't it?

00:53:42.060 --> 00:53:43.060
I think.

00:53:43.060 --> 00:53:44.060
Yeah.

00:53:44.060 --> 00:53:45.030
So, do you want to talk a
little more about that?

00:53:45.060 --> 00:53:46.060
Sure.

00:53:46.060 --> 00:53:47.060
So, two things I wanted to add.

00:53:47.060 --> 00:53:50.270
So, we've been talking very
positively about MiStreamNet,

00:53:50.270 --> 00:53:54.010
and it worked incredibly well the
last two broadcasts that we had,

00:53:54.010 --> 00:53:57.830
but we actually were at a point
where we had four broadcasts and

00:53:57.830 --> 00:54:02.530
all of them ended up with some
part of the network falling apart.

00:54:02.900 --> 00:54:11.590
So we were needing to find ways,
brought George out,

00:54:11.670 --> 00:54:13.680
to figure out what the
heck was taking place.

00:54:13.680 --> 00:54:16.760
And if anybody thinks that
Mac OS X server and QuickTime Streaming

00:54:16.870 --> 00:54:21.000
Server and NXServe is not an
incredibly powerful tool to use,

00:54:21.000 --> 00:54:26.020
I just have to let you know what we
saw these things capable of doing.

00:54:26.370 --> 00:54:28.960
At my StreamNet,
our parent streaming server,

00:54:28.960 --> 00:54:35.460
we were simulating 500
broadcasts along with 17 relays.

00:54:35.460 --> 00:54:39.400
And it just ran for like hours and
hours and hours and hours and hours.

00:54:39.400 --> 00:54:40.000
And this is great.

00:54:40.000 --> 00:54:41.180
We thought this was amazing.

00:54:41.180 --> 00:54:42.930
We got a 10 megabit
connection to the network.

00:54:42.970 --> 00:54:46.510
We got a 100 megabit
connection to the network.

00:54:46.520 --> 00:54:49.370
And we've got 500 users that
are watching this video,

00:54:49.370 --> 00:54:51.330
plus we're doing video out to relays.

00:54:51.340 --> 00:54:55.160
I think overall we simulated 2,000.

00:54:56.590 --> 00:55:00.030
2,000, 3,000 users on the net because
we started stream loading each

00:55:00.030 --> 00:55:03.000
one of the relay servers or the
children's servers out on the stage.

00:55:03.000 --> 00:55:05.810
And it was great.

00:55:05.830 --> 00:55:06.200
It worked.

00:55:06.280 --> 00:55:09.830
The only problem was we had not gotten
to the point where the server failed,

00:55:09.830 --> 00:55:14.820
which is what we were trying to find,
until the day that we got Ken Schramm,

00:55:14.820 --> 00:55:18.940
who's been the most wonderful
person to work with.

00:55:18.980 --> 00:55:20.580
He grew up in the video world, right?

00:55:20.580 --> 00:55:22.340
In the video world, if something fails,
you get rid of it.

00:55:22.400 --> 00:55:24.300
There's no three strikes and you're out.

00:55:24.300 --> 00:55:26.250
If something fails in the video world,
it's just done.

00:55:26.260 --> 00:55:26.690
Dead.

00:55:26.750 --> 00:55:28.160
Don't talk to me anymore.

00:55:28.160 --> 00:55:30.220
And we were bringing him up
in this electronic world,

00:55:30.220 --> 00:55:31.620
which is a little bit different.

00:55:31.620 --> 00:55:35.960
And as soon as I got Ken on the phone,
I'm like, Ken, check this out.

00:55:35.960 --> 00:55:36.840
We're doing these broadcasts.

00:55:36.840 --> 00:55:37.520
Working just great.

00:55:37.520 --> 00:55:39.610
We got things figured out because
we reconfigured some stuff.

00:55:39.620 --> 00:55:42.580
And as soon as he got on the phone,
he's like, oh, that looks wonderful.

00:55:42.580 --> 00:55:43.530
Bam.

00:55:43.540 --> 00:55:45.830
And my StreamNet 1 goes down.

00:55:45.840 --> 00:55:49.500
And we had to go actually
restart the machine.

00:55:49.500 --> 00:55:52.600
Well, it turned out,
and the reason I'm bringing this up is,

00:55:52.640 --> 00:55:54.080
Streaming Load Tool is
a great application that

00:55:54.080 --> 00:55:55.140
comes with Streaming Server.

00:55:55.140 --> 00:55:56.180
You can simulate.

00:55:56.500 --> 00:56:00.760
A hundred, not a hundred, you know,
25 to 50 users per connection

00:56:00.760 --> 00:56:02.340
hitting the server in real time.

00:56:02.340 --> 00:56:05.240
So it's sending out the bandwidth
to each one of those connections.

00:56:08.260 --> 00:56:11.030
And so, long story short,
it turned out that we ended

00:56:11.030 --> 00:56:15.100
up with a motherboard in our
server that had a problem.

00:56:15.100 --> 00:56:17.580
Only related to power changes
that were taking place in the

00:56:17.580 --> 00:56:18.940
environment that it was in.

00:56:18.940 --> 00:56:20.970
So it was like one of those
things you would never find.

00:56:20.980 --> 00:56:23.950
But we ended up with a guy putting
a new server in the server room

00:56:23.950 --> 00:56:25.960
that we had our MIS Stream.1 in.

00:56:25.980 --> 00:56:27.460
And he turned on a server.

00:56:27.460 --> 00:56:30.950
And that little switch changed the
power enough for that configuration

00:56:31.210 --> 00:56:33.200
that the server was just like,
Come on in here.

00:56:33.440 --> 00:56:33.620
Done.

00:56:33.620 --> 00:56:35.000
See you tomorrow.

00:56:35.000 --> 00:56:36.260
So we got a new motherboard.

00:56:36.370 --> 00:56:38.100
Things have been working perfect.

00:56:38.200 --> 00:56:38.880
Ever since.

00:56:38.880 --> 00:56:42.900
But I think that,
going back to talking about working

00:56:42.960 --> 00:56:46.310
with this video production person,
I mean, with any of this,

00:56:46.310 --> 00:56:49.640
when you roll out a service like this,
I mean, you,

00:56:49.640 --> 00:56:53.010
it's important that it works.

00:56:53.020 --> 00:56:56.990
I mean, that it, it's hard,
you don't get many chances with this.

00:56:57.070 --> 00:57:00.470
You want to make sure when you
roll this out that it runs.

00:57:00.480 --> 00:57:03.860
Because if you're dealing with video
production folks from that world,

00:57:03.860 --> 00:57:06.470
they really have a very
low tolerance for failure.

00:57:06.480 --> 00:57:07.940
I mean, and so.

00:57:08.200 --> 00:57:09.660
It's important to test and.

00:57:09.660 --> 00:57:12.760
So assuming we rolled the load
tool became a great solution.

00:57:12.760 --> 00:57:16.670
Is the Python script available
at the site that you have?

00:57:16.700 --> 00:57:21.640
So basically the Python script is what
we use to simulate 100 users per second,

00:57:21.660 --> 00:57:23.940
hitting the redirect script to make
sure we weren't having some kind of

00:57:23.940 --> 00:57:27.040
memory problem with Apache or the script
we'd written to do the redirection.

00:57:27.040 --> 00:57:31.520
And the thing that ended up in the
end giving us the information we

00:57:31.520 --> 00:57:33.480
needed was the server monitor tools.

00:57:33.480 --> 00:57:37.750
Anybody using an XServe,
the server monitor tools are incredible.

00:57:38.200 --> 00:57:40.630
They're really great for what
the information it can provide.

00:57:40.760 --> 00:57:43.180
Some things that I would recommend,
all services we're

00:57:43.220 --> 00:57:45.020
running on the servers,
anything that's not

00:57:45.020 --> 00:57:45.840
necessary is turned off.

00:57:45.980 --> 00:57:47.930
So anything that's taking
place in terms of file copies,

00:57:47.940 --> 00:57:48.960
we're doing over SCP.

00:57:48.960 --> 00:57:54.200
We've actually set up firewall
rules so that the things

00:57:54.200 --> 00:57:56.720
that we need to be public,
like 1220,

00:57:56.720 --> 00:57:59.200
we have that open to the world so
we can get to it from anywhere.

00:57:59.200 --> 00:58:04.550
660 is what we actually have for
server settings on 10.2 server.

00:58:04.600 --> 00:58:06.980
We're going to be up to 10.3
by the end of the summer,

00:58:06.980 --> 00:58:07.000
which is just a little bit more time.

00:58:07.060 --> 00:58:08.180
So we're going to be able to do that.

00:58:08.210 --> 00:58:09.640
That should take us back to 3.11.

00:58:09.640 --> 00:58:16.130
And then because we're using SCP and SSH,
we actually have the firewall set up

00:58:16.140 --> 00:58:18.950
so that there's only one machine on
the Internet that has the ability to

00:58:18.960 --> 00:58:22.950
administer these servers over SSH,
which we're not going to tell you

00:58:22.980 --> 00:58:25.630
because you might try and get into it.

00:58:25.640 --> 00:58:31.000
So I would highly recommend to not run as
much on the servers as you possibly can.

00:58:31.000 --> 00:58:33.200
Lock this thing down because it's
sitting out in a public place

00:58:33.200 --> 00:58:34.380
and this thing doesn't work.

00:58:34.400 --> 00:58:35.470
What's the next one?

00:58:38.850 --> 00:58:40.700
This is where George talks.

00:58:40.700 --> 00:58:42.700
It is.

00:58:42.700 --> 00:58:44.700
We'll all say it one stage.

00:58:44.700 --> 00:58:50.490
So, streaming mode tool comes with both
Darwin and QuickTime Streaming Server,

00:58:50.550 --> 00:58:51.700
and it's a great tool for stress testing.

00:58:51.700 --> 00:58:55.760
And as these folks said,
the main thing here was testing,

00:58:55.850 --> 00:58:56.700
you know?

00:58:56.700 --> 00:58:59.700
And I see some other folks
I know in the audience,

00:58:59.710 --> 00:59:03.700
and they know that that is
the critical component here,

00:59:03.700 --> 00:59:05.810
is that when you're
rolling out something,

00:59:05.810 --> 00:59:09.700
a new set of services on the network,
especially something new like streaming,

00:59:09.700 --> 00:59:12.690
the important thing is
do some stress testing,

00:59:12.690 --> 00:59:16.700
you know, make sure that you've got
things under control before,

00:59:16.700 --> 00:59:19.700
you know,
you do a broad-scale deployment.

00:59:19.700 --> 00:59:24.700
So, some of the things we did was we,
each instance of streaming mode tool,

00:59:24.700 --> 00:59:26.700
we set up to do 50 concurrent clients.

00:59:26.700 --> 00:59:28.660
We have multiple instances running.

00:59:28.700 --> 00:59:30.700
We have three different machines
running multiple instances,

00:59:30.700 --> 00:59:33.700
and we loaded the heck out of the server,
and we're amazed.

00:59:33.700 --> 00:59:35.700
We're amazed at the performance.

00:59:35.700 --> 00:59:41.390
And I recently,
Simon again from Wirecast was showing

00:59:41.640 --> 00:59:44.100
me a Swedish newspaper that is,

00:59:44.500 --> 00:59:56.600
[Transcript missing]

00:59:56.810 --> 00:59:58.680
and the rest of the team.

01:00:26.700 --> 01:00:32.230
We're also working on some
monitoring tools and Laurie is

01:00:32.290 --> 01:00:35.770
really excited about putting some
of this stuff into a SQL database.

01:00:35.940 --> 01:00:39.660
I've just been doing flashy
QuickTime stuff so far.

01:00:40.000 --> 01:00:43.700
So this is something we're working
on for local administrators.

01:00:43.700 --> 01:00:47.810
The idea is the local WAN guys that
are out in these school districts,

01:00:47.810 --> 01:00:50.910
we want to provide them with a
tool that they can use to monitor

01:00:51.090 --> 01:00:54.980
the server but not give them full
administrative privileges to the server.

01:00:54.980 --> 01:00:58.650
I think again, monitoring,
especially during the testing phase,

01:00:58.890 --> 01:01:01.440
being able to monitor and know
how many streams are actually

01:01:01.440 --> 01:01:03.410
running on the child relays.

01:01:03.550 --> 01:01:06.710
If something does go wrong,
you've got some logs that you

01:01:06.720 --> 01:01:09.430
can go back and really begin to
figure out what was the state.

01:01:26.180 --> 01:01:27.580
So we're really excited about that.

01:01:27.700 --> 01:01:29.620
We're also working on some
of the new capabilities.

01:01:29.620 --> 01:01:32.240
We're going to be able to use the tools
that we've got in the next version

01:01:32.240 --> 01:01:34.480
to actually monitor the content,
place it on the server.

01:01:34.480 --> 01:01:36.890
There will be a website for them
to go to to get educated on that.

01:01:36.890 --> 01:01:38.330
So that's another work in progress.

01:01:38.330 --> 01:01:39.950
QuickTime streaming server publisher.

01:01:39.950 --> 01:01:41.650
We're really excited
about the new version.

01:01:41.720 --> 01:01:44.190
One of the new capabilities that's
coming in the next version is the

01:01:44.190 --> 01:01:45.650
ability for end users to use the tool.

01:01:45.650 --> 01:01:47.420
Right now it requires
an administrative user,

01:01:47.460 --> 01:01:49.750
which limits the scope of its use,
but with the capability for

01:01:49.750 --> 01:01:52.270
end users to basically publish
streaming content or downloadable

01:01:52.280 --> 01:01:53.490
content to their own devices.

01:01:53.490 --> 01:01:55.920
That's going to be a
really exciting thing.

01:01:55.920 --> 01:01:57.730
So we're really excited about that.

01:01:57.730 --> 01:02:01.120
We're also working on some of the new
capabilities that we've got in the next

01:02:01.350 --> 01:02:04.520
version to actually monitor the content,
place it on the server.

01:02:04.520 --> 01:02:07.560
There will be a website for them
to go to to get educated on that.

01:02:07.560 --> 01:02:10.730
One of the new capabilities that's
coming in the next version is the

01:02:10.730 --> 01:02:12.600
ability for end users to use the tool.

01:02:12.670 --> 01:02:14.860
Right now it requires
an administrative user,

01:02:14.860 --> 01:02:17.790
which limits the scope of its use,
but with the capability for

01:02:17.800 --> 01:02:20.950
end users to basically publish
streaming content or downloadable

01:02:20.960 --> 01:02:22.480
content to their own devices.

01:02:22.510 --> 01:02:25.110
That's going to be a
really exciting thing.

01:02:28.340 --> 01:02:30.880
So, MyStreamNet.

01:02:30.880 --> 01:02:37.520
This is the folks at Wayne Resa,
who are the third partner of

01:02:37.560 --> 01:02:39.840
MyStreamNet with Merit and Apple.

01:02:39.840 --> 01:02:46.920
We've got an amazing web designer
who's putting together this website,

01:02:46.920 --> 01:02:51.450
and this is the live
streaming page of the website.

01:02:51.460 --> 01:02:59.320
And so, we're giving the users the
ability to view the stream within

01:02:59.320 --> 01:03:01.790
a QuickTime browser window.

01:03:03.300 --> 01:03:43.400
[Transcript missing]

01:03:45.500 --> 01:03:48.120
And so the other way,
you can also click and view it

01:03:48.120 --> 01:03:50.260
in a QuickTime player window.

01:03:50.260 --> 01:03:57.660
The other piece,
we're also saving archives.

01:03:57.720 --> 01:03:59.700
Oh, maybe this isn't working.

01:04:01.360 --> 01:04:04.670
We have all the archives
of previous broadcasts that

01:04:04.670 --> 01:04:07.750
we've done over the last year,
and users can view these at any time.

01:04:07.760 --> 01:04:14.620
Do you want to show the...

01:04:15.300 --> 01:04:50.000
[Transcript missing]

01:04:50.210 --> 01:04:55.160
So this is graphing bandwidth usage
coming from the server in real time,

01:04:55.160 --> 01:04:57.190
and I can change the
interval of the graph,

01:04:57.190 --> 01:04:58.460
and I can change the bitrate.

01:04:58.570 --> 01:05:00.640
But while it's doing that,
let's go ahead and we'll start

01:05:00.740 --> 01:05:02.040
up a stream from the server.

01:05:02.040 --> 01:05:04.100
So we have this movie.

01:05:04.100 --> 01:05:08.010
So we'll go ahead and start this up,
and you see that the bandwidth jumps up.

01:05:08.020 --> 01:05:10.940
Now, it jumped up a lot
there in the beginning.

01:05:10.940 --> 01:05:16.130
That's because we're
doing the skip protection,

01:05:16.130 --> 01:05:18.660
and we're sending a whole
bunch of packets down,

01:05:18.660 --> 01:05:22.320
and then it will start to
settle down as the buffer fills.

01:05:22.360 --> 01:05:26.140
So it's kind of a cool thing to be able
to watch the bandwidth in real time,

01:05:26.140 --> 01:05:26.800
right?

01:05:26.800 --> 01:05:29.390
So that's one little hack.

01:05:29.460 --> 01:05:32.210
The other one that,
and what's neat about this is

01:05:32.210 --> 01:05:35.640
that the admin protocol that
all this stuff is talking to,

01:05:35.640 --> 01:05:39.840
Lori's really excited about logging
all this stuff into a database.

01:05:40.440 --> 01:05:42.460
I like the cool, whizzy demos myself.

01:05:42.460 --> 01:05:45.080
I like the demos as well.

01:05:45.080 --> 01:05:46.620
So here's another one that we've done.

01:05:46.620 --> 01:05:48.470
So I'm going to go ahead
and set this to one minute.

01:05:48.480 --> 01:05:50.140
So it's polling now every one minute.

01:05:50.140 --> 01:05:53.930
This is the number of connections,
RTSP connections, or we can look at

01:05:54.010 --> 01:05:55.610
HTTP tunnel connections.

01:05:55.620 --> 01:05:57.740
We can look at the RTP bandwidth.

01:05:57.740 --> 01:06:02.070
So let's crank this
back up to five seconds.

01:06:02.080 --> 01:06:04.980
So now we're looking at the individual
nodes around the network and seeing

01:06:05.130 --> 01:06:06.490
what the current bandwidth is.

01:06:06.500 --> 01:06:08.920
And this is the main server here.

01:06:09.940 --> 01:06:13.000
So, you know,
just some interesting things that

01:06:13.180 --> 01:06:14.760
you can do with wired QuickTime.

01:06:14.760 --> 01:06:16.830
So thank you totally hip for
your tool because it allows

01:06:16.830 --> 01:06:18.020
you to do all these things.

01:06:18.020 --> 01:06:25.480
And then we actually have this web page,
but I left the password over there.

01:06:25.480 --> 01:06:27.840
If you want to see the web page,
it's just talking to CGI's.

01:06:27.900 --> 01:06:30.310
And you can actually drill down
on the individual sessions.

01:06:30.320 --> 01:06:35.580
You can see what IP address somebody is
coming from and what piece of content

01:06:35.600 --> 01:06:38.930
they're watching with the admin protocol.

01:06:39.450 --> 01:06:43.120
So you can get that level of
detail with this admin protocol.

01:06:43.120 --> 01:06:45.770
Very exciting in terms
of how we log this stuff,

01:06:45.770 --> 01:06:47.570
how we track it in the future.

01:06:50.100 --> 01:06:54.000
Okay, so I think that's it
for us for right now.

01:06:54.000 --> 01:06:56.440
And what I want to do is
invite up John Anderson.

01:06:56.450 --> 01:06:59.720
And John is on the streaming
server engineering team.

01:06:59.730 --> 01:07:05.220
And he is largely responsible for
QuickTime Streaming Server Publisher.

01:07:05.220 --> 01:07:07.110
And there's a new version coming,
as I said.

01:07:07.120 --> 01:07:10.720
What's exciting to us about
this tool is to really leverage

01:07:10.720 --> 01:07:16.500
these child node servers to be
able to take those servers and,

01:07:16.680 --> 01:07:19.180
in the school district,

01:07:19.370 --> 01:07:23.270
Allow faculty to give them
a very easy-to-use tool to

01:07:23.270 --> 01:07:25.950
publish their own content,
locally hosted content,

01:07:25.950 --> 01:07:28.210
to these streaming servers,
which is something we found very

01:07:28.210 --> 01:07:31.890
effective at a lot of schools,
and now we have a great

01:07:31.910 --> 01:07:33.950
new tool to support it.

01:07:38.700 --> 01:07:39.650
Thank you.

01:07:39.760 --> 01:07:40.960
It's a little weird with the microphone.

01:07:40.960 --> 01:07:44.110
It's like karaoke or something.

01:07:44.220 --> 01:07:47.570
I'm going to go ahead and close this.

01:07:47.640 --> 01:07:50.930
As it was mentioned before,
one of the big features

01:07:50.930 --> 01:07:53.160
in QTSS Publisher 2 is...

01:08:15.070 --> 01:08:17.310
Hello?

01:08:17.440 --> 01:08:18.250
OK.

01:08:18.310 --> 01:08:20.630
As was mentioned before,
one of the major features

01:08:20.640 --> 01:08:25.420
in QTSS Publisher 2 is that
anybody can log in to their home

01:08:25.470 --> 01:08:26.940
directory and publish content.

01:08:27.000 --> 01:08:29.260
They don't have to be an administrator.

01:08:29.340 --> 01:08:30.890
So that's a great new feature.

01:08:30.910 --> 01:08:33.810
I'm going to go ahead and
start this up and log in.

01:08:36.100 --> 01:08:41.180
There's also been a lot of
great performance improvements

01:08:42.240 --> 01:08:42.240
in the application.

01:08:42.760 --> 01:08:43.880
It has a new UI now.

01:08:43.900 --> 01:08:46.800
So if anybody is familiar
with QTSS Publisher 1,

01:08:46.800 --> 01:08:49.880
you had all these different modes
that you had to go through where you

01:08:49.880 --> 01:08:52.350
were uploading your media in one mode,
and then you'd go to the

01:08:52.440 --> 01:08:54.450
settings and set that up,
and you'd go to links.

01:08:54.450 --> 01:08:56.960
At this point,
everything is all in one place.

01:08:57.970 --> 01:09:02.660
Another thing that's nice, that's new,
is if you're binding QuickTime Streaming

01:09:02.660 --> 01:09:06.180
Server to specific IP addresses,
so that, for example,

01:09:06.180 --> 01:09:09.780
you can run on port 80 and then run
your web server on another IP address,

01:09:09.780 --> 01:09:14.080
you can actually pick which IP address
you want published files through.

01:09:14.080 --> 01:09:15.770
So that's really nice.

01:09:15.780 --> 01:09:19.340
Also,
if you have multiple virtual hosts set

01:09:19.510 --> 01:09:23.940
up in server admin for the web server,
you can pick any of

01:09:23.940 --> 01:09:26.280
those sites here as well.

01:09:27.300 --> 01:09:29.000
And then of course,
if you're an administrator,

01:09:29.000 --> 01:09:29.720
you get a choice.

01:09:29.780 --> 01:09:32.910
You can work either out
of the system library,

01:09:32.910 --> 01:09:35.190
or you can work out of
your home folder as well.

01:09:35.200 --> 01:09:38.200
So that's kind of a nice feature.

01:09:38.200 --> 01:09:42.020
And so what I'm going to do here is
I'm going to go ahead and open on this

01:09:42.020 --> 01:09:45.200
up and upload one of these movies.

01:09:45.200 --> 01:09:46.600
And it's real simple.

01:09:46.600 --> 01:09:49.210
All you do is just drag
it into the library.

01:09:50.310 --> 01:09:55.230
That uploads the movie and in addition,
it will hint the movie as well.

01:09:55.240 --> 01:09:58.830
So it will add hint tracks to the
movie automatically on the server.

01:10:02.500 --> 01:10:04.540
So now what I can do is
I can click on this movie.

01:10:04.540 --> 01:10:09.910
Now when we put files into the library,
they actually go into a location outside

01:10:09.930 --> 01:10:11.680
of the QuickTime Streaming Server folder.

01:10:11.680 --> 01:10:16.740
And the reason for that is that you may
want to make a movie available only via

01:10:16.740 --> 01:10:19.780
simulated live broadcasts or playlists.

01:10:19.860 --> 01:10:22.420
And so that gives you the
opportunity to do that.

01:10:22.420 --> 01:10:25.400
But what I'm going to do is I'm going
to go ahead and check this checkbox,

01:10:25.470 --> 01:10:27.900
which is Publish Media to
QuickTime Streaming Server.

01:10:28.540 --> 01:10:31.310
And when I hit Apply,
what this is going to do is it's

01:10:31.320 --> 01:10:35.160
actually going to create a sim link in
the QuickTime Streaming Server folder.

01:10:35.160 --> 01:10:40.770
It will also go and create a
ref movie that points to the

01:10:40.770 --> 01:10:44.380
movie on the streaming server.

01:10:44.380 --> 01:10:46.140
So it does all of that automatically.

01:10:46.140 --> 01:10:50.160
Over here you get a URL that you
can copy and paste into the player,

01:10:50.160 --> 01:10:51.610
and then you can also just click Play.

01:10:51.620 --> 01:10:53.180
And the movie's up and running.

01:10:53.180 --> 01:10:55.560
So it's very simple streaming.

01:10:59.900 --> 01:11:01.570
And then of course,
if you want to set up a

01:11:01.570 --> 01:11:04.200
simulated live playlist,
which is great for relays,

01:11:04.260 --> 01:11:07.570
something that you can then
relay off to other servers,

01:11:07.770 --> 01:11:11.360
all I have to do is click
on this plus button,

01:11:11.360 --> 01:11:14.740
and I'll just name it playlist.

01:11:19.480 --> 01:11:23.060
Much like iTunes, you create the playlist
and drag the file to it.

01:11:23.120 --> 01:11:25.500
And that's it.

01:11:25.510 --> 01:11:27.190
If you want,
you can change weights on this.

01:11:27.210 --> 01:11:30.600
So you can do a weighted random playlist,
and that will actually play

01:11:30.600 --> 01:11:32.900
some tracks more than others.

01:11:32.970 --> 01:11:35.490
And then you just start it.

01:11:35.570 --> 01:11:38.790
Now the cool thing is,
I'm going to go back to the file.

01:11:39.070 --> 01:11:41.340
Not only is it publishing those
files and making them available,

01:11:41.340 --> 01:11:43.890
you can change the
annotations anytime you want,

01:11:43.890 --> 01:11:46.780
and it will re-hint the
movie when it's done.

01:11:46.780 --> 01:11:50.000
And in addition,
down here you get all of the

01:11:50.000 --> 01:11:52.660
HTML to embed the movie in a page.

01:11:52.680 --> 01:11:54.600
So basically you can
choose whether you want to,

01:11:54.600 --> 01:11:58.880
for example, open the movie in
QuickTime Player or have it autoplay.

01:11:58.880 --> 01:12:01.480
And once you choose that,
you have HTML right here that you can

01:12:01.480 --> 01:12:06.320
copy and paste into Dreamweaver or
BBEdit or any other web page editor.

01:12:08.100 --> 01:12:11.220
In addition to that,
I can actually create a web

01:12:11.310 --> 01:12:13.630
page directly from here.

01:12:17.740 --> 01:12:19.960
This is a development OS,
so this may or may not work.

01:12:19.960 --> 01:12:20.740
We'll have to see.

01:12:20.740 --> 01:12:25.730
But I'll just go ahead and create a page,
and we'll drag the file to it.

01:12:28.630 --> 01:12:32.190
This will actually generate a
page based on an XSLT template

01:12:32.540 --> 01:12:33.950
that has the movie in it.

01:12:34.060 --> 01:12:35.930
Now, of course,
I haven't set a poster frame,

01:12:35.940 --> 01:12:38.160
so it's just defaulting
to the first frame.

01:12:38.200 --> 01:12:40.330
But if I click on that,
then that automatically

01:12:40.340 --> 01:12:41.790
brings up the movie.

01:12:41.810 --> 01:12:50.400
So that's Publisher.