WEBVTT

00:00:12.610 --> 00:00:14.330
Welcome to session 216.

00:00:14.390 --> 00:00:16.100
My name is Tim Monroe.

00:00:16.140 --> 00:00:20.240
I'm with the QuickTime Engineering Group,
and in a little while I'll bring up

00:00:20.240 --> 00:00:22.400
John Cromie from Skylark Associates.

00:00:22.580 --> 00:00:25.600
We're going to talk today about
alternative programming environments,

00:00:25.600 --> 00:00:28.100
or languages as they seem
to have changed the title,

00:00:28.100 --> 00:00:28.980
for QuickTime.

00:00:29.020 --> 00:00:34.920
Let me just start off by saying that
in all the digital media sessions we've

00:00:34.960 --> 00:00:37.620
heard a whole lot about Moore's Law,
right?

00:00:37.620 --> 00:00:40.260
It seems like everyone wants
to talk about Moore's Law.

00:00:40.260 --> 00:00:43.660
Well, I'm not even going to mention the
words "Moore's Law" during this talk.

00:00:43.660 --> 00:00:46.690
But I do want to talk about something
which is really more important,

00:00:46.690 --> 00:00:50.160
and I want to call that Twain's Law.

00:00:50.430 --> 00:00:55.570
And that is, to a man with a hammer,
everything looks like a nail.

00:00:56.120 --> 00:01:01.210
Or as we might say today, modulo hammers,
it's all nails.

00:01:01.540 --> 00:01:06.400
So the truth here is that if you
have a problem you want to solve,

00:01:06.470 --> 00:01:10.150
generally you are restricted to
the tools that you know about.

00:01:10.250 --> 00:01:15.040
And so sometimes we end up
solving a problem in the wrong

00:01:15.040 --> 00:01:19.140
way because we don't really have
acquaintance with the correct tools.

00:01:19.280 --> 00:01:23.620
So one of the things I want to
do here today is sort of throw

00:01:23.620 --> 00:01:29.160
out a survey of some of the tools
that we can use to do QuickTime.

00:01:29.270 --> 00:01:32.980
I'll talk a little bit about how
we can extend some of these tools

00:01:33.080 --> 00:01:36.940
to perhaps take advantage of
more than is built into the tool.

00:01:37.140 --> 00:01:41.810
And then in a few minutes we're going
to reveal to you for the first time an

00:01:41.810 --> 00:01:44.980
exciting new tool for Windows developers.

00:01:46.250 --> 00:01:48.060
So let's talk about
traditional development.

00:01:48.120 --> 00:01:51.430
So when I talk about alternative,
we do that against the backdrop

00:01:51.900 --> 00:01:55.540
of what's the tradition that
we're working in usually.

00:01:55.770 --> 00:01:59.500
And probably for the first eight or
nine years of QuickTime's development,

00:01:59.690 --> 00:02:03.570
the standard way of doing
application development was using

00:02:03.880 --> 00:02:08.800
the C programming language with what
we now consider to be Carbon APIs,

00:02:08.870 --> 00:02:12.580
or what we would then call
the Mac User Interface Toolbox

00:02:12.580 --> 00:02:14.770
in the Mac operating system.

00:02:15.030 --> 00:02:17.820
Now on Windows we can
develop QuickTime programs,

00:02:18.020 --> 00:02:23.130
but again the standard programming
paradigm is using C with,

00:02:23.380 --> 00:02:26.900
believe it or not, the Mac OS Toolbox and
user interface toolbox.

00:02:27.070 --> 00:02:31.650
And we do that with this magical little
thing called the QuickTime Media Layer,

00:02:31.700 --> 00:02:35.610
or QTML, which essentially is just a
whole lot of the Mac Toolbox and

00:02:35.630 --> 00:02:40.810
a whole lot of the Mac OS taken
over and put on top of Windows.

00:02:40.930 --> 00:03:03.170
And where you actually had some choice
in the traditional development model

00:03:03.170 --> 00:03:03.170
was in the IDEs that you would use.

00:03:03.170 --> 00:03:03.170
So early on people
would possibly use MPW.

00:03:03.170 --> 00:03:03.170
About the System 7 timeframe
we would move to Code Warrior,

00:03:03.170 --> 00:03:03.170
a very good tool.

00:03:03.170 --> 00:03:03.170
On Windows you might
be using Visual Studio.

00:03:03.170 --> 00:03:03.170
And then nowadays you could still do the
same sort of development using Xcode.

00:03:03.910 --> 00:03:06.830
Well, that's okay, that's great.

00:03:07.230 --> 00:03:11.190
But today I want to look
at what's possible apart

00:03:11.280 --> 00:03:12.800
from this traditional model.

00:03:12.800 --> 00:03:17.580
And I've sort of roughly classified
these into three major groups.

00:03:17.800 --> 00:03:21.650
The first group is what's really fun,
and that's what we would call rapid

00:03:21.770 --> 00:03:23.710
application development tools.

00:03:23.770 --> 00:03:27.800
So we've got Cocoa, we've got some very
good third-party tools,

00:03:27.800 --> 00:03:29.700
REALbasic and Runtime Revolution.

00:03:29.800 --> 00:03:33.800
On the Windows side we have
Visual Basic and Delphi.

00:03:33.800 --> 00:03:36.800
There's this new kid on the block,
AppleScript Studio.

00:03:36.800 --> 00:03:42.800
And then there's this thing, SuperCard,
that doesn't seem to want to go away.

00:03:42.930 --> 00:03:47.800
So all of these development environments
have some built-in support for QuickTime.

00:03:48.330 --> 00:03:50.370
Actually,
there's one of these that actually

00:03:50.400 --> 00:03:52.800
has no built-in support for QuickTime.

00:03:52.800 --> 00:03:54.740
Anybody know what that is?

00:03:56.580 --> 00:04:00.010
Visual Basic is put out by
a company up in Redmond,

00:04:00.120 --> 00:04:03.030
and for some reason they seem to
have left out the QuickTime support

00:04:03.030 --> 00:04:04.430
in their application.

00:04:04.430 --> 00:04:07.860
And I'm sure this is just an oversight.

00:04:07.910 --> 00:04:14.230
But enterprising third-party
developers have actually stepped

00:04:14.270 --> 00:04:17.990
into this void and developed
what's called an ActiveX control.

00:04:18.020 --> 00:04:22.730
So the way you would, in Visual Basic,
use QuickTime is by finding an

00:04:22.780 --> 00:04:27.250
appropriate QuickTime ActiveX control,
adding it to your project,

00:04:27.410 --> 00:04:28.870
and then going from there.

00:04:29.100 --> 00:04:31.000
Now here there's sort of
an embarrassment of riches.

00:04:31.080 --> 00:04:35.290
There are in fact three different
ActiveX controls that you could

00:04:35.440 --> 00:04:42.200
get right now to do application
development in Visual Basic on Windows.

00:04:42.250 --> 00:04:46.600
It turns out that to do
even a basic multiplayer,

00:04:46.700 --> 00:04:49.520
a multi-window,
or a multiplayer application

00:04:49.520 --> 00:04:52.620
that allows you to do editing
and maybe some extra stuff,

00:04:52.720 --> 00:04:55.270
none of those three existing
ActiveX controls gives

00:04:55.270 --> 00:04:56.470
you quite what you need.

00:04:56.660 --> 00:05:01.010
So it's an embarrassment of riches,
but it's also embarrassingly

00:05:01.130 --> 00:05:05.550
bad in that you can't go very
far with any one of those three.

00:05:07.060 --> 00:05:11.610
So then we have four that I'll,
what I'll call application frameworks.

00:05:11.730 --> 00:05:15.320
So they're not really rad tools,
or maybe some of these are, I don't know.

00:05:15.420 --> 00:05:19.120
QuickTime for Java with the Java,
or QuickTime,

00:05:19.160 --> 00:05:22.640
Java with QuickTime for Java bindings,
very good story for developing

00:05:22.690 --> 00:05:23.760
QuickTime applications.

00:05:23.760 --> 00:05:29.000
There's a cross-platform
application framework called Qt,

00:05:29.190 --> 00:05:29.880
or QT.

00:05:29.880 --> 00:05:35.480
There's one that's apparently not
very well known called WX Widgets.

00:05:35.480 --> 00:05:36.970
It used to go by the name WX Widgets,
but now it's called WX Widgets.

00:05:37.020 --> 00:05:39.100
It used to be WX Windows,
but for some reason they

00:05:39.100 --> 00:05:40.280
had to change the name.

00:05:40.280 --> 00:05:45.500
And then there's a good old Power Plant,
provides a good basis for

00:05:45.500 --> 00:05:48.590
supporting QuickTime applications.

00:05:49.340 --> 00:05:53.540
The last category I want to talk about
is actually quite an interesting one,

00:05:53.710 --> 00:05:58.380
and one I've been working with recently,
and that is what we might call scripting.

00:05:58.450 --> 00:06:05.810
Scripting in the sense
that I have a text file,

00:06:05.810 --> 00:06:05.810
I type in some commands, and then somehow

00:06:06.270 --> 00:06:12.590
Those commands get interpreted at runtime
to give me a QuickTime application.

00:06:13.240 --> 00:06:16.930
The one that I will look at
in depth is tclTk with an

00:06:16.930 --> 00:06:18.480
add-on called QuickTime Tcl.

00:06:18.800 --> 00:06:21.340
It's a very interesting
little environment.

00:06:21.340 --> 00:06:25.330
We're going to be looking at a mystery
guest that I won't tell you about.

00:06:25.330 --> 00:06:29.100
And then I have question marks by Python,
Perl, and Ruby.

00:06:29.290 --> 00:06:31.570
And the reason I have
question marks is that,

00:06:31.570 --> 00:06:33.770
to my knowledge,
there's no out-of-the-box

00:06:33.770 --> 00:06:35.840
solution to use,
for instance,

00:06:35.840 --> 00:06:40.930
Perl to develop a QuickTime playback
and editing application.

00:06:41.190 --> 00:06:43.720
But once you see what I do
with this mystery guest,

00:06:43.780 --> 00:06:45.700
I think you'll be
convinced that you could,

00:06:45.700 --> 00:06:50.070
if you wanted to,
use these three other scripting languages

00:06:50.530 --> 00:06:54.280
to build a QuickTime application.

00:06:54.440 --> 00:06:58.760
So let's take a look here at
the old way of doing things.

00:07:05.260 --> 00:07:07.030
So I'm going to look at
what it used to look like.

00:07:07.190 --> 00:07:13.720
What I've got here is Code Warrior,
and I've got two project files opened.

00:07:13.880 --> 00:07:19.910
One of them is a Windows project file,
and one is a Macintosh.

00:07:20.130 --> 00:07:21.850
So I'm going to look at
what it used to look like.

00:07:22.520 --> 00:07:28.370
What I've got here is Code Warrior,
and I've got two project files opened.

00:07:28.740 --> 00:07:34.800
One of them is a Windows project file,
and one is a Macintosh.

00:07:48.820 --> 00:07:52.840
Let me bump this up a little
bit so we can actually read it.

00:07:52.840 --> 00:07:58.060
You can see that the files in each of
these two projects are very similar.

00:07:58.100 --> 00:08:00.710
There are two – oh, that's cool.

00:08:00.710 --> 00:08:05.800
There's one here called WinFramework,
which is, as you might guess,

00:08:05.810 --> 00:08:11.180
some basic application support
geared at the Windows application.

00:08:11.180 --> 00:08:13.700
On the Mac side,
you can see there's a Mac framework,

00:08:13.700 --> 00:08:16.420
which is the same stuff for the Mac side.

00:08:16.610 --> 00:08:18.780
There's some common stuff,
which is really where all

00:08:19.060 --> 00:08:20.380
the QuickTime support lies.

00:08:20.380 --> 00:08:24.750
And then there's this com application,
which is where I would put

00:08:24.750 --> 00:08:27.060
any application-specific code.

00:08:27.170 --> 00:08:30.380
And in Qt Shell, that's fairly empty,
that file.

00:08:30.640 --> 00:08:38.870
So let's look at WinFramework.c.

00:08:41.550 --> 00:08:45.360
So here we've got just some
standard C source code.

00:08:45.530 --> 00:08:47.300
Let me bump down here a little bit.

00:08:47.350 --> 00:08:51.780
One nice thing is we're seeing
Windows data types here:

00:08:51.780 --> 00:08:54.660
bool, handle, hwind, cars.

00:08:54.710 --> 00:08:57.460
We've got LP stirs here.

00:08:57.510 --> 00:08:59.400
So, and let's just look down here.

00:08:59.400 --> 00:09:02.420
We've got a window proc,
or this is our win main,

00:09:02.800 --> 00:09:03.800
where we set things up.

00:09:04.090 --> 00:09:06.180
And if you've ever done
any Windows programming,

00:09:06.210 --> 00:09:07.380
you feel right at home with this.

00:09:07.430 --> 00:09:09.810
This is just the kind of
stuff that you expect to see.

00:09:09.990 --> 00:09:12.750
Let's just go down a little bit more,
and we actually have a window

00:09:12.750 --> 00:09:14.160
proc for our frame window.

00:09:14.160 --> 00:09:17.240
So this is an MDI application.

00:09:17.410 --> 00:09:22.570
And we have a win proc for the
movie Windows inside of there.

00:09:22.910 --> 00:09:24.660
So this is a good story right there.

00:09:24.660 --> 00:09:28.980
That's the kind of mindset
that Windows developers have.

00:09:29.240 --> 00:09:35.210
If we look at the corresponding
file on the Macintosh,

00:09:35.610 --> 00:09:37.310
We get pretty much the same picture.

00:09:37.440 --> 00:09:38.970
Okay, here's Mac data types.

00:09:39.050 --> 00:09:42.430
This is the stuff that
Carbon programmers understand.

00:09:42.590 --> 00:09:47.010
If we go down here,
we'll get to installing

00:09:47.010 --> 00:09:50.850
some Carbon event handlers.

00:09:51.610 --> 00:09:53.380
Somewhere down here
we've got event loops,

00:09:53.400 --> 00:09:54.540
that's wonderful.

00:09:54.570 --> 00:09:57.800
So again,
if you learned how to program on Mac,

00:09:57.860 --> 00:10:00.660
that's just the sort of
stuff that you expect to see.

00:10:00.900 --> 00:10:04.680
Now let's look at the common file.

00:10:08.400 --> 00:10:11.340
see what we've got in there.

00:10:11.350 --> 00:10:13.900
Now as I said,
this is mostly QuickTime specific stuff.

00:10:14.140 --> 00:10:16.430
Okay, we've got some platform
specific defines here.

00:10:16.440 --> 00:10:16.990
That's okay.

00:10:17.090 --> 00:10:17.880
I can handle that.

00:10:17.880 --> 00:10:21.920
Down here sort of we've got a
file menu handling that calls

00:10:21.920 --> 00:10:24.440
application specific functions here.

00:10:24.440 --> 00:10:25.240
That's good.

00:10:25.330 --> 00:10:27.770
Again,
some more wrappers for the edit menu.

00:10:27.770 --> 00:10:30.800
Now we're getting some
QuickTime functions here.

00:10:30.970 --> 00:10:34.850
MC cut is how we're going to handle
the cut command and so forth.

00:10:34.850 --> 00:10:37.280
Let's go down a little bit further,
see what we run into.

00:10:41.840 --> 00:10:43.720
Fairly generic stuff here.

00:10:43.770 --> 00:10:44.930
Here's a nasty guy.

00:10:45.300 --> 00:10:47.750
FS make FS spec.

00:10:48.260 --> 00:10:52.310
For Windows programmers this
is wrong in so many ways.

00:10:52.460 --> 00:10:54.440
They don't want to have
to work with FS specs.

00:10:54.440 --> 00:10:58.700
FS spec is a relic of
the Mac operating system.

00:10:58.730 --> 00:11:02.460
So the barriers to entry for
this kind of development for

00:11:02.470 --> 00:11:05.050
Windows programmers are fairly high.

00:11:05.050 --> 00:11:08.480
We're asking them to learn not only
the Windows way of doing things,

00:11:08.700 --> 00:11:10.960
but also the Mac way of doing things.

00:11:11.060 --> 00:11:13.640
So again, that's a bad story.

00:11:13.830 --> 00:11:18.470
So let's go back to slides.

00:11:20.850 --> 00:11:23.300
That's also a bad story
for Cocoa developers,

00:11:23.300 --> 00:11:23.900
right?

00:11:23.970 --> 00:11:26.580
They don't want to have to work
with those Carbon data types.

00:11:26.760 --> 00:11:29.190
They'd rather work with
stuff that's good for Cocoa.

00:11:29.590 --> 00:11:32.880
Well, if you were at the last session,
the QT kit session,

00:11:32.880 --> 00:11:35.870
you saw that we have a very
good story coming out in

00:11:35.870 --> 00:11:37.930
Tiger for Cocoa programmers.

00:11:37.940 --> 00:11:42.850
We have this new QT kit that insulates
the Cocoa programmer from as much of

00:11:42.850 --> 00:11:45.570
that underlying stuff as possible.

00:11:45.710 --> 00:11:50.310
Wouldn't it be nice if we could
do the same thing for Windows?

00:11:50.450 --> 00:11:54.000
And I want to invite up John to
show you that we're announcing

00:11:54.000 --> 00:11:57.990
here exactly that same sort of
thing for Windows developers.

00:11:58.130 --> 00:12:00.440
Please welcome John Cromie.

00:12:03.650 --> 00:12:04.070
Thank you, Tim.

00:12:04.080 --> 00:12:07.320
I must say it gives me a
kind of a perverse pleasure,

00:12:07.320 --> 00:12:10.810
if you like,
to be standing up here at the

00:12:11.020 --> 00:12:14.140
Apple Developer Conference and
talking about,

00:12:14.140 --> 00:12:18.460
of all things, Visual Basic, ActiveX,
and COM.

00:12:19.260 --> 00:12:24.650
But, whether we like it or not,
Visual Basic is probably the most

00:12:24.660 --> 00:12:28.200
popular programming environment ever.

00:12:28.200 --> 00:12:32.740
There are about 8 million developers
out there using Visual Basic,

00:12:32.740 --> 00:12:37.730
and with VisualBasic.net and with
C Sharp now using many of the

00:12:37.730 --> 00:12:42.520
same ideas from Visual Basic,
that development base is bound

00:12:42.550 --> 00:12:45.000
to grow in the coming years.

00:12:45.000 --> 00:12:46.780
Now,

00:12:48.410 --> 00:12:54.040
Much of the success of Visual Basic has
been based around the component

00:12:54.040 --> 00:12:57.830
architecture that underlies
the Visual Basic platform,

00:12:58.010 --> 00:13:01.830
and that is called COM,
Component Object Model.

00:13:01.830 --> 00:13:06.010
And it's quite a similar
story to QuickTime in a way.

00:13:06.130 --> 00:13:10.900
QuickTime was based on a very
successful component architecture

00:13:11.650 --> 00:13:14.700
that underlies the platform.

00:13:14.700 --> 00:13:14.700
And

00:13:14.890 --> 00:13:18.580
If you're a COM developer or
a Visual Basic developer and

00:13:18.630 --> 00:13:22.290
attempting to use QuickTime,
as Tim has mentioned,

00:13:22.290 --> 00:13:24.940
the choices were rather limited.

00:13:24.940 --> 00:13:31.770
And some of us have been trying since
Visual Basic three days to attempt

00:13:31.770 --> 00:13:38.610
to use QuickTime in Visual Basic to
develop QuickTime applications in

00:13:38.610 --> 00:13:39.880
the COM or Windows environment,
but with limited success.

00:13:41.640 --> 00:13:45.830
So I'm delighted to announce today
that Apple is finally addressing

00:13:45.950 --> 00:13:53.150
this problem and announcing a brand
new QuickTime COM or ActiveX control

00:13:53.760 --> 00:13:57.050
for QuickTime developers.

00:13:57.720 --> 00:14:04.440
This control can be used out of
the box in the .NET development

00:14:04.440 --> 00:14:10.170
environment and also in
traditional COM development tools.

00:14:10.170 --> 00:14:14.500
So we're talking about the leading
RAD development tools here.

00:14:14.500 --> 00:14:20.400
We're talking about VB.NET,
we're talking about C#,

00:14:20.400 --> 00:14:22.460
we're talking about Delphi.

00:14:22.460 --> 00:14:22.460
Those are the three big ones.

00:14:22.680 --> 00:14:27.270
But the COM technology underlies
many other development environments

00:14:27.270 --> 00:14:31.020
and underlies many other
desktop applications as well.

00:14:31.220 --> 00:14:34.200
And because of this
shared COM environment,

00:14:34.260 --> 00:14:39.230
the QuickTime ActiveX control can
also bring this QuickTime technology

00:14:39.230 --> 00:14:41.790
into those environments as well.

00:14:43.610 --> 00:14:48.300
So rather than stand up here just
describing this control in detail,

00:14:48.390 --> 00:14:53.670
I'd like to take you through
a short development sequence.

00:14:53.760 --> 00:14:58.610
What we're going to do is put together
a very simple movie player and

00:14:58.610 --> 00:15:03.210
editor using the new ActiveX control.

00:15:07.620 --> 00:15:11.600
Thank you.

00:15:11.600 --> 00:15:13.760
Okay, so I'm going to launch VB.net.

00:15:13.760 --> 00:15:20.070
Well, in fact,
I've already launched VB.net.

00:15:20.070 --> 00:15:20.070
And I'm just going to...

00:15:20.770 --> 00:15:25.450
Drag in a sample application.

00:15:25.500 --> 00:15:32.790
Okay, so this is the,
anybody who's used visualstudio.net

00:15:32.790 --> 00:15:32.790
or VB will recognize this environment.

00:15:32.790 --> 00:15:32.790
We've got a form here.

00:15:33.330 --> 00:15:39.660
And I've made life easy by already
populating the forum with some menus.

00:15:40.750 --> 00:15:43.140
But basically this application
does nothing as is.

00:15:43.400 --> 00:15:46.350
So the first thing we have
to do is to put the new

00:15:46.350 --> 00:15:49.970
QuickTime com control on the form.

00:15:50.620 --> 00:15:56.430
Now, like most Windows controls,
the COM control resides in this toolbox

00:15:56.770 --> 00:15:58.920
containing hundreds of controls.

00:15:59.090 --> 00:16:02.900
And it's in here under
the General section,

00:16:02.990 --> 00:16:05.470
sitting beside a friend.

00:16:07.570 --> 00:16:09.340
So let's pop it on the forum.

00:16:09.340 --> 00:16:11.260
There we go.

00:16:11.310 --> 00:16:17.790
So the first public instance
of the QuickTime column control

00:16:18.640 --> 00:16:21.900
I'm going to press F4
and get some properties.

00:16:21.960 --> 00:16:25.530
And this just shows the way in
which you can manipulate the

00:16:25.900 --> 00:16:29.280
control in the design environment.

00:16:34.900 --> 00:16:40.660
So I just want to change its name
and make it slightly simpler.

00:16:40.660 --> 00:16:45.770
I'm going to give it a plain name.

00:16:46.290 --> 00:16:51.890
No border, and I'm going to set
its position to be 0,

00:16:51.890 --> 00:16:51.890
0.

00:16:53.790 --> 00:16:57.440
Now, double-click and we go into
the code behind the form.

00:16:57.540 --> 00:16:59.330
Now, Visual Basic fills in a lot of this.

00:16:59.420 --> 00:17:02.170
When you add the menus,
Visual Basic fills in the prototypes

00:17:02.240 --> 00:17:03.700
for the various functions.

00:17:03.810 --> 00:17:06.800
So most of this code has
already been written for me,

00:17:06.800 --> 00:17:10.150
and I'm just going to start
filling in the actual bits that

00:17:10.220 --> 00:17:12.240
depend on the control itself.

00:17:12.340 --> 00:17:17.760
So first thing we want to do
is we want to open a movie.

00:17:17.760 --> 00:17:17.760
So we go to the

00:17:19.270 --> 00:17:22.450
Welcome to the handler that
handles the open menu item.

00:17:22.660 --> 00:17:25.460
I've already put in some code
here that gives us a file

00:17:25.460 --> 00:17:27.150
dialogue to choose a movie.

00:17:27.160 --> 00:17:34.270
So, in a few lines of code,
hopefully less than six lines,

00:17:34.270 --> 00:17:34.270
we can create a simple
movie player application.

00:17:35.170 --> 00:17:38.500
Welcome to the handler that
handles the open menu item.

00:17:38.500 --> 00:17:41.370
I've already put in some code
here that gives us a file

00:17:41.370 --> 00:17:43.060
dialogue to choose a movie.

00:17:43.060 --> 00:17:54.560
So, in a few lines of code,
hopefully less than six lines,

00:17:54.560 --> 00:18:04.380
we can create a simple
movie player application.

00:18:06.670 --> 00:18:11.640
.file name.

00:18:11.640 --> 00:18:11.680
There we go.

00:18:11.810 --> 00:18:14.600
Syntactically checked and all for me.

00:18:14.600 --> 00:18:22.590
Now,
I want to implement a few other things,

00:18:22.590 --> 00:18:22.590
so let's allow ourselves
to close the movie.

00:18:23.430 --> 00:18:28.440
.file name.

00:18:28.440 --> 00:18:28.520
There we go.

00:18:28.520 --> 00:18:30.500
Syntactically checked and all for me.

00:18:30.500 --> 00:18:30.500
Now,
I want to implement a few other things,

00:18:30.500 --> 00:18:30.500
so let's allow ourselves
to close the movie.

00:18:31.210 --> 00:18:36.140
.file name.

00:18:36.140 --> 00:18:36.220
There we go.

00:18:36.220 --> 00:18:36.790
Syntactically checked and all for me.

00:18:36.790 --> 00:18:36.790
Now,
I want to implement a few other things,

00:18:36.790 --> 00:18:36.790
so let's allow ourselves
to close the movie.

00:18:37.430 --> 00:18:38.320
Okay, dot.

00:18:38.660 --> 00:18:39.800
Oops, dot.

00:18:39.820 --> 00:18:42.500
Now, this time instead of
telling the control to play,

00:18:42.550 --> 00:18:46.060
I actually want to tell the movie
which is inside the control to play.

00:18:46.210 --> 00:18:49.390
So we pick the next
object in the hierarchy.

00:18:49.720 --> 00:18:50.730
Okay, dot.

00:18:51.010 --> 00:18:52.100
Oops, dot.

00:18:52.100 --> 00:18:54.690
Now, this time instead of
telling the control to play,

00:18:54.750 --> 00:18:58.170
I actually want to tell the movie
which is inside the control to play.

00:18:58.170 --> 00:19:03.420
So we pick the next
object in the hierarchy.

00:19:06.180 --> 00:19:09.780
And just to show that we
can do other things as well,

00:19:09.850 --> 00:19:13.200
we've got .rewind.

00:19:15.620 --> 00:19:17.210
So let's leave it at that for now.

00:19:17.470 --> 00:19:19.500
Let's run this application.

00:19:19.500 --> 00:19:23.320
Okay, so it's building a binary.

00:19:23.320 --> 00:19:25.410
And here we are.

00:19:25.430 --> 00:19:27.780
So let's try opening a movie.

00:19:31.100 --> 00:19:32.600
And here we've got a movie.

00:19:32.600 --> 00:19:39.410
Oops, it's set at the... Okay,
I've rewind it, and I can play it.

00:19:41.160 --> 00:19:43.440
Okay,
so very simple QuickTime application

00:19:43.670 --> 00:19:47.410
developed from a Visual Basic skeleton
in a matter of minutes.

00:19:47.560 --> 00:19:51.970
That's the power of the
new QuickTime comm control.

00:19:53.110 --> 00:19:55.700
But obviously we want
to do more than that,

00:19:55.700 --> 00:19:57.540
and the control is quite fully featured.

00:19:57.540 --> 00:20:03.670
So what I'm going to drag in now
is a slightly more baked version

00:20:03.760 --> 00:20:06.790
of this skeleton application.

00:20:08.830 --> 00:20:12.470
Most of the code has been filled in now,
but we're going to add a

00:20:12.470 --> 00:20:14.120
few little interesting bits.

00:20:14.260 --> 00:20:19.450
First of all, we've seen how to tell the
movie to do certain things or

00:20:19.450 --> 00:20:21.160
send commands to the movie.

00:20:21.370 --> 00:20:25.330
Now we want to see how do we get some
information back out of that movie.

00:20:25.720 --> 00:20:29.210
So what I've done is I've set up
a little media inspector form.

00:20:29.210 --> 00:20:32.850
And what I'm going to do
is put some code in there.

00:20:32.860 --> 00:20:35.550
Here you can see the code here.

00:20:35.600 --> 00:20:39.280
I can add properties and I can
add sections to this little form.

00:20:39.510 --> 00:20:43.380
And we're just going
to type in some code.

00:20:43.550 --> 00:20:50.410
So let's get the duration of the movie,
the width, the height, some metadata,

00:20:50.410 --> 00:20:53.180
some user data from the movie.

00:20:53.250 --> 00:20:55.250
So qt control 1 dot movie

00:20:57.100 --> 00:21:02.750
Dot duration.

00:21:02.750 --> 00:21:05.550
Okay.

00:21:05.550 --> 00:21:05.670
And to save you and me a lot of time,
I'll just copy in the rest.

00:21:09.720 --> 00:21:12.680
Oh, there's one more thing
I'd like to show you.

00:21:12.710 --> 00:21:15.840
Notice this one here, track one.

00:21:17.020 --> 00:21:22.020
Let's put into this little information
dialogue the data format or the media

00:21:22.110 --> 00:21:24.660
format of the first track of the movie.

00:21:24.820 --> 00:21:27.450
Okay, so we're starting to drill
down into the movie here.

00:21:27.530 --> 00:21:29.690
Let's see how we get this.

00:21:30.000 --> 00:21:35.720
So we start off with a control,
Qt control 1, .movie.

00:21:36.010 --> 00:21:40.000
Dot, what's inside a movie, tracks.

00:21:40.210 --> 00:21:46.710
We want the first track,
and we want its format.

00:21:48.080 --> 00:21:51.760
Okay, so without looking up any
documentation virtually,

00:21:51.790 --> 00:21:55.280
I can use the autocomplete
or IntelliSense technology to

00:21:55.550 --> 00:21:59.070
work out what roughly looks
like something I might want.

00:22:01.680 --> 00:22:03.350
So that's getting
information out of the movie.

00:22:03.360 --> 00:22:07.910
Now anybody who's developed a
QuickTime application will know that very

00:22:07.910 --> 00:22:14.800
soon you need the movie or the control
to tell you what's going on inside.

00:22:14.800 --> 00:22:16.130
In other words,
you need to be able to handle

00:22:16.230 --> 00:22:18.910
callbacks or notifications.

00:22:19.100 --> 00:22:22.080
Now if you're a Visual Basic developer
and you've never come

00:22:22.080 --> 00:22:25.360
across C++ or C before,
you don't know what a callback is.

00:22:25.380 --> 00:22:27.880
You don't know what a
notification is even.

00:22:27.920 --> 00:22:30.700
The only thing you know about are events.

00:22:30.850 --> 00:22:38.330
And sure enough, we've added to the
QuickTime control a suite of events.

00:22:38.400 --> 00:22:52.200
[Transcript missing]

00:22:52.970 --> 00:22:58.830
The container window to resize
itself to fit the movie.

00:22:58.840 --> 00:23:01.440
So let's have a look down,
see what events are here.

00:23:01.440 --> 00:23:02.930
Remember,
I haven't looked up any documentation.

00:23:02.930 --> 00:23:04.860
I'm using this for the first time.

00:23:04.930 --> 00:23:10.260
There's a size changed event
that looks kind of reasonable.

00:23:10.260 --> 00:23:13.500
And here's the prototype
that VB puts in for me.

00:23:14.700 --> 00:23:20.140
So the form I'm in is called me.

00:23:20.140 --> 00:23:26.280
And I want to set its client size,
the bit inside it.

00:23:26.590 --> 00:23:32.000
And I want to make it
equal to a new size object.

00:23:32.050 --> 00:23:34.370
This is all standard VB.

00:23:35.680 --> 00:23:49.800
And the size object is
qtctl1.width and qtctl1.height.

00:23:51.330 --> 00:23:53.300
There we go.

00:23:53.390 --> 00:23:56.940
Notice the way VB immediately
syntactically checks the whole thing for

00:23:56.940 --> 00:23:59.290
me and underlines anything that's wrong.

00:24:00.820 --> 00:24:04.760
Now, so that's the control telling the
application when it's changed size.

00:24:04.940 --> 00:24:14.040
But as a QuickTime developer,
you're probably familiar with

00:24:14.040 --> 00:24:16.250
MC action events with the need to
set up a filter proc and to get

00:24:16.250 --> 00:24:16.250
information back from the movie.

00:24:16.610 --> 00:24:20.340
What I'd like to do is to have this
application know whenever the movie

00:24:20.340 --> 00:24:22.220
is playing and when it isn't playing.

00:24:22.220 --> 00:24:24.140
In fact,
what I want to do is I want to make the

00:24:24.540 --> 00:24:29.330
play item in the movie menu change from
play to stop and stop to play whenever

00:24:29.440 --> 00:24:31.350
the movie is playing and stopped.

00:24:31.350 --> 00:24:36.630
In other words,
I want to make a context-sensitive menu.

00:24:36.630 --> 00:24:41.440
First of all, let's go back up to
the code for the play.

00:24:41.440 --> 00:24:44.140
Here we are, and let's modify this.

00:24:44.140 --> 00:24:44.140
So let's say if.

00:24:44.700 --> 00:24:52.200
[Transcript missing]

00:24:53.020 --> 00:24:59.280
If it's greater than zero, zero,
then... If the rate is greater than zero,

00:24:59.280 --> 00:25:01.440
we want to make it stop.

00:25:03.710 --> 00:25:08.580
So movie.stop, all the things you might
expect are in here.

00:25:08.580 --> 00:25:10.610
And play.

00:25:13.270 --> 00:25:13.700
Great.

00:25:13.750 --> 00:25:14.630
So that will work fine.

00:25:14.640 --> 00:25:16.000
That'll stop and play the movie.

00:25:16.050 --> 00:25:24.010
But what it won't do is it won't
change the label on the menu from

00:25:24.010 --> 00:25:24.010
play to stop and from stop to play.

00:25:24.350 --> 00:25:26.520
So that would be a nice touch.

00:25:26.520 --> 00:25:30.700
And in order to do that effectively,
what we really want is for the

00:25:30.700 --> 00:25:34.890
movie to be able to tell us when
it's playing or when it's stopped.

00:25:35.020 --> 00:25:40.530
And this is where we come to the events
that are exposed from within QuickTime.

00:25:41.450 --> 00:25:45.110
Now the way this is implemented in
the QuickTime com control is that

00:25:45.160 --> 00:25:49.640
all of the objects within the control
have an event listener's collection.

00:25:49.770 --> 00:25:52.760
And if you're interested in
an event within the control,

00:25:52.960 --> 00:25:55.670
then you register for a particular event.

00:25:55.850 --> 00:26:02.800
So what I'm going to do is immediately
after I've opened the movie here,

00:26:02.800 --> 00:26:02.800
I'm going to

00:26:03.010 --> 00:26:09.140
Type qtctl1.movie.eventlisteners.add.

00:26:09.160 --> 00:26:11.660
We want to add a new event listener.

00:26:12.050 --> 00:26:15.000
Notice the various options are
popped up immediately for me.

00:26:15.000 --> 00:26:16.490
I don't have to look
up any documentation.

00:26:16.490 --> 00:26:18.810
I want a high-level event.

00:26:18.800 --> 00:26:29.700
[Transcript missing]

00:26:31.340 --> 00:26:35.340
So that tells QuickTime,
or tells the control,

00:26:35.410 --> 00:26:37.950
to let me know when the
movie rate has changed.

00:26:38.150 --> 00:26:41.470
So how do we handle this event
when it comes back to us?

00:26:42.270 --> 00:26:48.370
All of these events from within the
movie are all marshalled through

00:26:48.370 --> 00:26:54.660
a single Qt event callback or
event handler within Visual Basic.

00:26:54.660 --> 00:26:56.810
Here's the prototype for it.

00:26:56.850 --> 00:27:00.910
Now rather than typing in code,
I'm just going to copy

00:27:01.170 --> 00:27:03.960
this here and paste it in.

00:27:05.040 --> 00:27:08.070
Now, because you can get events,
lots of different events that

00:27:08.070 --> 00:27:11.470
you might register for here,
you might register for an event

00:27:11.470 --> 00:27:14.980
when the volume has changed,
when the time has changed,

00:27:15.160 --> 00:27:16.460
that kind of thing.

00:27:16.630 --> 00:27:18.800
When a sprite has moved,
lots of kind of things

00:27:18.860 --> 00:27:20.010
you can register for.

00:27:20.120 --> 00:27:25.730
So obviously we need a case
statement in here so we can do what

00:27:25.730 --> 00:27:25.730
we want to do at particular times.

00:27:26.150 --> 00:27:30.300
So I have a case here on
the event changed event,

00:27:30.300 --> 00:27:37.000
and I've got some code here which
simply looks at the movie rate

00:27:37.000 --> 00:27:45.580
and determines whether or not the
menu item should say play or stop.

00:27:46.510 --> 00:27:49.460
Okay, so let's leave it at that.

00:27:49.480 --> 00:27:51.940
Let's save this and build it.

00:27:52.010 --> 00:27:53.980
Hopefully it'll all work.

00:27:58.080 --> 00:28:01.100
Open a movie,
let's open a different bird this time.

00:28:01.100 --> 00:28:05.480
We've got bee eaters.

00:28:07.220 --> 00:28:09.970
Okay, first of all,
immediately we notice that

00:28:10.420 --> 00:28:13.940
the application window has
resized to fit the movie.

00:28:14.230 --> 00:28:16.110
Now remember that was
one line of very simple,

00:28:16.110 --> 00:28:17.210
straightforward code.

00:28:17.210 --> 00:28:22.860
Not only that, but we can scale,
and the application window

00:28:23.430 --> 00:28:26.010
scales as well to fit the movie.

00:28:26.150 --> 00:28:29.250
Okay, let's see if our play button works.

00:28:29.290 --> 00:28:34.040
Okay, good.

00:28:34.800 --> 00:28:40.200
[Transcript missing]

00:28:42.100 --> 00:28:44.260
Notice that it's already changed to stop.

00:28:44.260 --> 00:28:49.520
That's because we know that our event
callbacks are actually working here.

00:28:51.910 --> 00:28:56.270
So,
what else can you do with this control?

00:28:56.280 --> 00:29:01.370
Well, I've got a fully baked
version of this application,

00:29:01.460 --> 00:29:03.950
which I'm just about to show you now.

00:29:09.080 --> 00:29:11.700
Fullscreen works as a single call.

00:29:11.770 --> 00:29:14.540
qtcontrol.movie.fullscreen = true

00:29:20.610 --> 00:29:23.750
So I'm just going to launch
finished application here and do

00:29:23.750 --> 00:29:25.160
one or two quick things with it.

00:29:25.160 --> 00:29:33.200
Let's kill studio and kill
that and open another movie.

00:29:45.100 --> 00:29:48.290
Okay, so I've got a movie over here that
I've opened in QuickTime Player,

00:29:48.290 --> 00:29:51.300
and I'm going to say File,
New Movie here.

00:29:51.630 --> 00:29:54.680
Okay, so I've created an empty new movie.

00:29:54.780 --> 00:29:58.830
I'm going to grab a bit of this.

00:29:59.390 --> 00:30:04.620
A little bit of this
snowy egret and copy it.

00:30:04.650 --> 00:30:08.360
I'm going to go over here and paste it.

00:30:08.370 --> 00:30:09.760
What's the command for paste?

00:30:09.790 --> 00:30:11.190
qtctrl1.movie.paste.

00:30:11.340 --> 00:30:12.860
Very simple.

00:30:13.580 --> 00:30:15.500
I've now got a new movie here.

00:30:15.500 --> 00:30:22.330
Okay,
I can cut a bit out of it if I like.

00:30:23.050 --> 00:30:28.000
Okay, but best of all,
I can go to Export Movie.

00:30:28.000 --> 00:30:31.500
And all of the exporters that
are available to QuickTime are

00:30:31.800 --> 00:30:33.800
available here to the VB developer.

00:30:34.010 --> 00:30:37.780
Let's give it a name.

00:30:44.070 --> 00:30:47.540
Okay, so within the code I've popped
up the export settings dialog.

00:30:47.540 --> 00:30:49.000
I can go and change those.

00:30:49.000 --> 00:30:54.490
And it's basically exporting
the movie at the moment.

00:30:56.000 --> 00:30:59.780
Okay, and it's done,
so let's close this movie and

00:30:59.780 --> 00:31:03.400
open the one we just exported.

00:31:10.900 --> 00:31:19.700
[Transcript missing]

00:31:20.700 --> 00:31:27.700
[Transcript missing]

00:31:27.880 --> 00:31:31.370
To develop in C# is very, very similar.

00:31:31.410 --> 00:31:39.310
In fact, the code is almost identical,
just slightly syntactically different.

00:31:39.310 --> 00:31:39.310
Can we have the slides again, please?

00:31:43.940 --> 00:31:47.640
Anybody who's developed in QuickTime,
or sorry, in Visual Basic will know that

00:31:47.740 --> 00:31:51.440
the object model is something
that you deal with very often.

00:31:51.610 --> 00:31:56.270
And in order to expose the
QuickTime API in a way which

00:31:56.330 --> 00:32:00.920
made sense to comm developers,
we've imposed an object model,

00:32:00.960 --> 00:32:03.120
if you like, on QuickTime.

00:32:03.230 --> 00:32:05.590
And you can see on the

00:32:06.530 --> 00:32:10.450
right-hand side of the slide here,
that some of the elements

00:32:10.450 --> 00:32:13.800
of that object model,
and it's no coincidence that there's

00:32:13.800 --> 00:32:17.000
a lot of commonality between this
object model and between the object

00:32:17.000 --> 00:32:20.040
model that was being described
earlier as part of the QT kit.

00:32:20.260 --> 00:32:26.230
In other words,
the object model of QuickTime transcends

00:32:26.230 --> 00:32:31.080
the implementation details of
how you actually use QuickTime,

00:32:31.110 --> 00:32:32.620
and that's a really important
thing to understand.

00:32:32.620 --> 00:32:34.860
If you understand the
object model as a developer,

00:32:34.890 --> 00:32:36.520
then you really,
you can develop with QuickTime in

00:32:36.520 --> 00:32:38.690
lots of different environments.

00:32:40.860 --> 00:32:44.380
I just want to emphasize as well,
many of you might have turned up your

00:32:44.380 --> 00:32:47.400
nose when I mentioned Visual Basic,
and C developers have

00:32:47.410 --> 00:32:48.780
a habit of doing that.

00:32:48.820 --> 00:32:58.410
Let's not forget that these environments,
particularly C#, Delphi,

00:32:58.410 --> 00:33:00.120
and Visual Basic,
can all be used to produce very

00:33:00.120 --> 00:33:00.120
professional QuickTime applications.

00:33:03.210 --> 00:33:07.750
So those are the big three: Visual Basic,
C#, and VB.NET.

00:33:07.750 --> 00:33:09.380
But there are others.

00:33:09.430 --> 00:33:14.100
And many development
environments are now comm aware.

00:33:14.100 --> 00:33:16.730
There's a few listed here.

00:33:16.960 --> 00:33:19.860
I want to draw your attention
to one in particular which I've

00:33:20.140 --> 00:33:26.180
been really enjoying using,
and that is the Troll Tech Qt Framework.

00:33:26.180 --> 00:33:30.770
It's brilliant for cross-platform
Mac and Windows development,

00:33:30.810 --> 00:33:34.250
but it's also very good on
Windows because it has an

00:33:34.250 --> 00:33:36.800
excellent com container class.

00:33:37.110 --> 00:33:41.790
What I'm going to do is
very quickly show you,

00:33:41.790 --> 00:33:41.790
if we just have the

00:33:44.950 --> 00:33:49.660
Qt application, which is identical to the
Visual Basic application

00:33:49.660 --> 00:33:52.350
that I've just developed.

00:33:52.520 --> 00:33:58.140
All the QuickTime implementation
uses the QuickTime com control.

00:33:58.140 --> 00:33:58.140
There's nothing fancy going on here.

00:33:58.400 --> 00:34:01.340
And,
but I've added a little extra to this

00:34:01.340 --> 00:34:04.060
because it was so easy to program.

00:34:04.060 --> 00:34:09.650
With a few lines of code,
I can grab a series of interesting faces.

00:34:09.660 --> 00:34:12.060
Let's end with a happy face.

00:34:12.730 --> 00:34:15.420
Drag them over here.

00:34:15.420 --> 00:34:20.760
Oops, this is going to crash, sorry.

00:34:20.760 --> 00:34:22.810
Start again.

00:34:22.810 --> 00:34:22.810
Should have created a new movie first.

00:34:27.900 --> 00:34:29.900
Okay, let's create a new movie.

00:34:29.900 --> 00:34:39.350
Okay, and let's grab some
interesting faces again.

00:34:40.600 --> 00:34:47.300
So these are images that I'm dropping
on a Qt QuickTime application.

00:34:47.300 --> 00:34:50.880
You notice that it's now creating
a movie out of these images.

00:34:50.890 --> 00:34:52.400
The code is really, really simple here.

00:34:52.400 --> 00:35:01.050
It's maybe four or five lines of code,
and I've created a simple drag and drop,

00:35:01.050 --> 00:35:02.160
droplet if you like,
for creating QuickTime movies

00:35:02.160 --> 00:35:02.160
from content on your desktop.

00:35:02.660 --> 00:35:06.960
And because I can get at the export menu,
I'm going to have

00:35:06.960 --> 00:35:08.240
another go at exporting.

00:35:08.290 --> 00:35:14.050
I can export these as a DV stream.

00:35:26.750 --> 00:35:30.980
Okay, setting is again,
and it's exporting at the moment.

00:35:30.980 --> 00:35:34.180
So let's give it a bit of time this time.

00:35:34.250 --> 00:35:37.000
Close the movie, open it.

00:35:40.630 --> 00:35:44.360
And now we've got a
DV movie created from those.

00:35:44.360 --> 00:35:47.040
Using the QuickTime object
model within the control,

00:35:47.040 --> 00:35:51.920
I can play with all of the
various export settings.

00:35:51.920 --> 00:35:53.760
And as you can see here,
you've got the bones of some

00:35:53.760 --> 00:35:57.100
quite powerful production tools.

00:35:57.100 --> 00:36:00.110
Back to the slides, please.

00:36:01.690 --> 00:36:07.940
So there's a couple of other
development environments which

00:36:08.340 --> 00:36:10.760
you shouldn't forget about.

00:36:10.780 --> 00:36:14.280
Draw your attention particularly
to Delphi and Toolbook as well.

00:36:14.520 --> 00:36:21.310
Lots of developers using QuickTime in
Toolbook on Windows using a comm control.

00:36:23.170 --> 00:36:26.050
As I mentioned before,
the QuickTime abstraction is

00:36:26.090 --> 00:36:27.920
exactly the same everywhere.

00:36:28.400 --> 00:36:35.590
However, because COM underlies not
just developer environments,

00:36:35.590 --> 00:36:43.000
but many desktop applications,
then all of a sudden we've got the

00:36:43.000 --> 00:36:43.000
ability to use QuickTime in places that
we might never have dreamt of before.

00:36:53.700 --> 00:37:05.100
[Transcript missing]

00:37:06.690 --> 00:37:10.170
I've got a list of movies
down the side here,

00:37:10.170 --> 00:37:14.370
and I can click on a movie.

00:37:14.520 --> 00:37:17.920
It opens up within the
middle of my spreadsheet.

00:37:18.350 --> 00:37:22.070
And lo and behold,
with a few lines of scripting

00:37:22.070 --> 00:37:26.050
code behind this worksheet,
I've been able to populate some

00:37:26.050 --> 00:37:31.730
cells in the spreadsheet with various
pertinent details from the movie.

00:37:31.820 --> 00:37:36.500
So for example, there's the copyright,
or the full name.

00:37:37.770 --> 00:37:41.470
But not only can I read
information from the movie,

00:37:41.470 --> 00:37:45.690
why can't I just type "Greeb"
in there for the name?

00:37:46.070 --> 00:37:48.340
John for the author.

00:37:48.360 --> 00:37:52.460
And click on the Save Movie cell.

00:37:53.710 --> 00:37:56.740
Okay, just to show you I'm not doing
anything behind the scenes,

00:37:56.740 --> 00:38:01.850
I'm going to go and delete
the contents of these cells.

00:38:02.280 --> 00:38:07.560
Click on a different movie,
click back on the same movie again,

00:38:07.600 --> 00:38:13.390
and you'll notice that the name and
the author has changed on that movie.

00:38:13.430 --> 00:38:20.330
Now I won't waste time by going
into QuickTime Player to actually

00:38:20.580 --> 00:38:22.160
show you that that's happened,
but believe me, that is actually changing

00:38:22.160 --> 00:38:22.160
the user data in the movie.

00:38:22.860 --> 00:38:28.060
Now this is really useful if
you're production oriented.

00:38:28.330 --> 00:38:30.470
Have a look at this example.

00:38:31.560 --> 00:38:33.500
I've got a folder of movies here.

00:38:33.500 --> 00:38:35.490
Now there's only five
movies in this folder,

00:38:35.490 --> 00:38:39.490
but there might be 500 movies.

00:38:40.220 --> 00:38:45.170
I'm going to read four user
data fields from these movies,

00:38:45.280 --> 00:38:46.960
four metadata fields.

00:38:46.960 --> 00:38:53.200
My problem is that I want to change
the copyright on all of these.

00:38:53.260 --> 00:38:56.960
Let's change the copyright to 2005.

00:38:56.960 --> 00:39:04.960
It's a spreadsheet,
so why can't we just do an edit, fill,

00:39:04.960 --> 00:39:04.960
down.

00:39:04.960 --> 00:39:04.960
Let's

00:39:05.420 --> 00:39:07.370
Save the movie data.

00:39:07.450 --> 00:39:10.270
So we're opening up each movie
in turn and writing this data

00:39:10.320 --> 00:39:12.590
back to it from the spreadsheet.

00:39:12.830 --> 00:39:15.750
Let's clear it and get it all back again.

00:39:15.890 --> 00:39:19.590
And notice that very quickly and
very easily we've changed the

00:39:19.670 --> 00:39:21.580
copyright on a whole folder of movies.

00:39:21.580 --> 00:39:25.940
That's Excel.

00:39:28.860 --> 00:39:31.130
Many of you probably don't
realize that behind Excel on

00:39:31.140 --> 00:39:34.740
Windows is a very powerful
Visual Basic programming environment.

00:39:34.900 --> 00:39:38.810
Virtually anything you can do in
Visual Basic you can also do in Excel.

00:39:39.700 --> 00:39:48.800
[Transcript missing]

00:39:53.820 --> 00:39:56.040
Can we use the
QuickTime control in PowerPoint?

00:39:56.040 --> 00:39:56.780
Of course.

00:39:56.780 --> 00:40:02.380
I think.

00:40:02.550 --> 00:40:03.420
Yep.

00:40:03.550 --> 00:40:05.760
So here we've got a movie.

00:40:05.760 --> 00:40:08.260
I've added some buttons
to the PowerPoint slide,

00:40:08.600 --> 00:40:12.290
and I can play the movie.

00:40:17.060 --> 00:40:19.740
That's very simple,
but you can also do more.

00:40:19.740 --> 00:40:23.230
Here's a movie which is
essentially a chapter movie.

00:40:23.230 --> 00:40:29.900
It's actually a smile movie which
creates a series of chapters.

00:40:29.900 --> 00:40:33.740
And as you can see,
it's standard QuickTime chapter access.

00:40:33.880 --> 00:40:39.060
But what happens if I want to get at the
chapters using buttons within PowerPoint?

00:40:39.180 --> 00:40:43.020
Well, again, a few lines of scripting
code behind the slide,

00:40:43.310 --> 00:40:46.820
and we can jump from chapter
to chapter within the movie.

00:40:47.690 --> 00:40:49.590
Last slide, a little bit of fun.

00:40:49.640 --> 00:40:54.190
Some of you might remember this
interesting wired sprite movie.

00:40:56.150 --> 00:40:59.960
This is really to demonstrate
how deep you can get within the

00:40:59.980 --> 00:41:01.830
object model within QuickTime.

00:41:01.960 --> 00:41:04.100
I've got two buttons down here.

00:41:04.150 --> 00:41:08.380
This one turns off the left eyeball,
and this one turns off the right eyeball.

00:41:08.450 --> 00:41:10.100
How are we doing this?

00:41:10.100 --> 00:41:19.520
QuickQtControl.movie.tracks.sprites.1.
visible=false.

00:41:20.080 --> 00:41:20.990
or true.

00:41:21.460 --> 00:41:21.780
Okay?

00:41:22.000 --> 00:41:28.630
Or we can make them go cross-eyed.

00:41:29.300 --> 00:41:32.780
By enlarging each of those sprites.

00:41:33.020 --> 00:41:36.830
So essentially, within simple desktop
applications like this,

00:41:37.150 --> 00:41:39.600
with the Visual Basic environment
behind them,

00:41:39.600 --> 00:41:43.590
we can use the comm control to do
interesting things with QuickTime.

00:41:48.170 --> 00:41:54.650
Lastly, I just wanted to come revisit
the Qt framework one more time.

00:41:54.660 --> 00:42:00.560
I mentioned that it was very good
for cross-platform development.

00:42:00.560 --> 00:42:08.210
And if you choose to use
on the Windows side the new

00:42:08.940 --> 00:42:10.940
QuickTime com control and on
the Mac the new high movie view,

00:42:11.140 --> 00:42:16.130
Then you can actually create quite
powerful cross-platform applications

00:42:16.160 --> 00:42:20.630
which share a lot of the code.

00:42:20.700 --> 00:42:22.870
Here's one I've been working on.

00:42:27.070 --> 00:42:29.330
This is an application that's
going to ship hopefully shortly.

00:42:29.730 --> 00:42:36.150
It's all about birds, believe it or not.

00:42:38.800 --> 00:42:40.840
And there we've got a QuickTime movie.

00:42:40.840 --> 00:42:44.170
And unfortunately...

00:42:51.800 --> 00:43:10.700
[Transcript missing]

00:43:30.910 --> 00:43:33.660
Okay, so this uses the Qt framework.

00:43:33.680 --> 00:43:36.010
All the code is cross-platform virtually.

00:43:36.250 --> 00:43:39.440
Much of the QuickTime API code
is also cross-platform,

00:43:39.440 --> 00:43:43.860
and yet we've got applications that
look very similar on two separate

00:43:43.860 --> 00:43:46.650
platforms with shared development effort.

00:43:47.080 --> 00:43:49.790
That's really all I want to say.

00:43:49.830 --> 00:43:55.790
Any questions afterwards about other
frameworks or other common environments,

00:43:55.790 --> 00:43:55.790
I'll be happy to take.

00:43:55.790 --> 00:43:55.790
And back to you, Tim.

00:44:04.790 --> 00:44:07.350
Okay,
so let's switch gears for a little bit.

00:44:07.410 --> 00:44:10.660
We've been looking at standard
application development tools

00:44:10.660 --> 00:44:12.690
on Windows and also on Mac.

00:44:12.770 --> 00:44:16.050
We've seen that there's some really
good high-level solutions coming,

00:44:16.050 --> 00:44:20.880
the QuickTime kit for Cocoa developers,
the new ActiveX COM control

00:44:21.030 --> 00:44:22.700
for Windows developers.

00:44:22.800 --> 00:44:25.800
For Carbon developers,
we also have a new H.I.

00:44:25.800 --> 00:44:27.700
Movie View that I haven't
talked about here,

00:44:27.700 --> 00:44:29.010
but which you should look at.

00:44:29.080 --> 00:44:33.680
Now what I want to do is look at
the sort of scripting languages.

00:44:33.680 --> 00:44:35.600
And again, this is pretty cool.

00:44:36.030 --> 00:44:39.760
Let me come over here to demo one.

00:44:40.800 --> 00:44:47.540
And open -- what I'm going to do
is just show you the text file.

00:44:51.190 --> 00:44:57.690
So this is written in
a language called tcl.

00:44:58.300 --> 00:46:15.700
[Transcript missing]

00:46:16.850 --> 00:46:19.690
Top level is the way you
create a new top level window.

00:46:19.970 --> 00:46:23.480
So I'll hit return there,
and lo and behold, instantly I have a new

00:46:23.480 --> 00:46:25.100
window on the screen.

00:46:25.120 --> 00:46:33.180
So by typing in some commands,
I get a nice GUI element.

00:46:33.180 --> 00:46:33.180
So let's--

00:46:34.580 --> 00:46:35.540
So did I quit that?

00:46:35.550 --> 00:46:37.260
All right, let's launch it again.

00:46:37.300 --> 00:46:40.820
Now, I showed you that script of,
actually quite lengthy script of

00:46:41.040 --> 00:46:43.920
tcl tk and QuickTime tcl commands.

00:46:44.090 --> 00:46:47.360
I'm going to open that with
the source command here.

00:46:49.800 --> 00:46:55.160
I'm just going to... and what we notice
is that the console window and the

00:46:55.230 --> 00:46:57.730
basic window it gives me have gone away.

00:46:57.810 --> 00:46:59.240
I explicitly hid those.

00:46:59.390 --> 00:47:02.920
And now I have a menu bar
with commands that look fairly

00:47:02.920 --> 00:47:04.890
reasonable for QuickTime movies.

00:47:04.910 --> 00:47:07.320
So let's see if I can
open a QuickTime movie.

00:47:07.920 --> 00:47:12.180
Okay, here's some MPEG-4s.

00:47:13.440 --> 00:47:17.760
And it will play them
just like you'd expect.

00:47:17.840 --> 00:47:22.370
I can come in here and cut.

00:47:22.980 --> 00:47:25.920
I can come over here and say paste.

00:47:25.920 --> 00:47:29.910
Or maybe I like that clip
so much I'll paste it again.

00:47:31.000 --> 00:47:35.900
One nice thing about QuickTime tcl
is that I can then come back here,

00:47:36.010 --> 00:47:40.540
undo the second paste,
undo the first paste, excuse me,

00:47:40.600 --> 00:47:43.660
undo the cut,
so I have unlimited levels of undo.

00:47:43.970 --> 00:47:44.860
So that's really pretty cool.

00:47:44.860 --> 00:47:47.460
I showed that earlier on
Monday for the CocoaKit,

00:47:47.460 --> 00:47:49.300
and you expect that with Cocoa.

00:47:49.300 --> 00:47:55.660
You don't necessarily expect that with
just a standard scripting language.

00:47:56.050 --> 00:48:01.890
That's QuickTime, that's tcl tk,
and QuickTime tcl.

00:48:01.920 --> 00:48:03.780
Let's go back to slides briefly.

00:48:03.790 --> 00:48:06.620
Now it's time for our mystery guest.

00:48:07.790 --> 00:48:09.790
Okay, and I won't reveal what that is.

00:48:10.020 --> 00:48:13.770
Let me motivate that first,
so let me quit here.

00:48:13.990 --> 00:48:16.540
Let's open up a terminal window,
and I have some commands

00:48:16.540 --> 00:48:18.050
I've already run here.

00:48:18.390 --> 00:48:28.680
It turns out that if you, let's try this,
if I ls user bin

00:48:29.200 --> 00:49:06.100
[Transcript missing]

00:49:07.400 --> 00:49:08.840
Let's see what happens.

00:49:08.840 --> 00:49:12.900
Lo and behold,
that Wish application opened

00:49:12.900 --> 00:49:14.440
and it did what I wanted.

00:49:14.440 --> 00:49:19.500
It hid the default window you get and
it opened a new window called Foo.

00:49:19.500 --> 00:49:23.460
So what does this tell me?

00:49:23.460 --> 00:49:23.460
It tells me that

00:49:24.590 --> 00:49:31.130
I can use the standard input of
that command line version of the

00:49:31.200 --> 00:49:35.530
tcl TK interpreter to do commands.

00:49:35.740 --> 00:49:39.590
Now I've also got another one here,
let's do three.

00:49:39.830 --> 00:49:46.700
"Three is, says echo this command,
that's some tcl script,

00:49:46.700 --> 00:49:52.700
that means put string hello world,
pipe that through the tcl tk interpreter,

00:49:52.860 --> 00:49:56.160
and let's see what it does,
it echoes hello world.

00:49:56.350 --> 00:49:59.470
So that's sort of a roundabout way
of doing the hello world thing,

00:49:59.480 --> 00:50:05.500
namely send this string of tcl
commands over to the tcl tk interpreter

00:50:05.500 --> 00:50:08.840
and the tcl command is just,
to your standard output,

00:50:09.230 --> 00:50:11.120
write this string." string.

00:50:12.290 --> 00:50:14.600
So what have we learned?

00:50:14.870 --> 00:50:22.200
That command line version of the tclTk
interpreter takes standard input.

00:50:22.370 --> 00:50:24.840
It's got a standard output.

00:50:25.000 --> 00:50:27.380
Now here lights may be
going on in your head.

00:50:27.480 --> 00:50:30.200
You can do some pretty funky stuff here.

00:50:30.470 --> 00:50:30.750
Why?

00:50:31.160 --> 00:50:37.910
Well, I could write a shell script or a
Perl script or whatever that sent some

00:50:37.910 --> 00:50:42.020
standard output to the tclTk interpreter.

00:50:42.960 --> 00:50:46.680
And if I was clever,
if I had a bidirectional pipe,

00:50:46.770 --> 00:50:49.440
I could get some output back.

00:50:49.550 --> 00:50:51.880
So what this shows us is,

00:50:52.180 --> 00:50:56.700
If I know some tk,
if I know tk well enough to be able to

00:50:56.700 --> 00:51:00.430
do the graphical user interface stuff,
I don't need tcl at all.

00:51:00.750 --> 00:51:01.860
I don't need that.

00:51:02.030 --> 00:51:06.580
I could write my application in
some other language altogether.

00:51:06.640 --> 00:51:09.030
So this is where our
mystery guest comes in.

00:51:09.160 --> 00:51:12.570
So what I did is when I had
that realization that I can just

00:51:12.570 --> 00:51:16.880
plug in any language I want,
and as long as that script for that

00:51:16.880 --> 00:51:22.080
language or that application knows how
to write tk to its standard output,

00:51:22.110 --> 00:51:24.820
and read things in from
the standard input,

00:51:24.840 --> 00:51:26.090
I'm golden.

00:51:26.200 --> 00:51:27.360
So can we go back here?

00:51:27.370 --> 00:51:28.250
My mystery guest.

00:51:28.290 --> 00:51:31.670
So what I was doing,
I was looking around the Unix system,

00:51:31.680 --> 00:51:34.320
and I came across a
small little language,

00:51:34.370 --> 00:51:39.130
hasn't been used in years,
and that language is awk.

00:51:39.390 --> 00:51:42.340
So I decided I would
write a full-featured

00:51:42.490 --> 00:51:46.210
QuickTime application using just awk.

00:51:46.600 --> 00:51:48.720
And let me show you that
that actually works.

00:51:48.840 --> 00:51:51.780
So I need one more piece of this puzzle.

00:51:51.940 --> 00:51:55.830
I need something that takes the
standard output of the tclTK

00:51:55.840 --> 00:51:58.740
interpreter and sends it to awk.

00:51:58.870 --> 00:52:01.960
And then I need something that
takes the standard output of awk and

00:52:01.960 --> 00:52:04.340
sends it to the tclTK interpreter.

00:52:04.450 --> 00:52:08.440
So I wrote a little Perl script,
and because this is sort of

00:52:08.550 --> 00:52:14.020
some glue between awk and wish,
I called it the awk-to-wish adhesive,

00:52:14.100 --> 00:52:16.970
or I like to abbreviate that as awkwa.

00:52:17.130 --> 00:52:25.000
So here I've got the awkwa interface
between awk and the TK interpreter,

00:52:25.000 --> 00:52:29.050
and I'll just do 12 here again.

00:52:29.770 --> 00:52:34.300
So 12 just says let's
run this Perl script.

00:52:34.300 --> 00:52:37.990
Doesn't look like anything's happened
because I don't know how to tell Perl

00:52:38.040 --> 00:52:40.720
to make the application come forward.

00:52:40.720 --> 00:52:47.810
Down here in my doc,
this is an awk script running QuickTime.

00:52:47.890 --> 00:52:49.100
Well, there's no QuickTime movies here.

00:52:49.100 --> 00:52:50.380
It's just an about box.

00:52:50.590 --> 00:52:53.180
Let's see if we can
open a QuickTime movie.

00:52:53.720 --> 00:52:57.810
This looks just like it did before
because the graphical user interface

00:52:57.810 --> 00:53:00.100
portion of this is identical.

00:53:00.180 --> 00:53:04.600
All that has changed is that I've taken a
perfectly reasonable scripting language,

00:53:04.670 --> 00:53:08.340
namely tcl,
and replaced it with a perfectly

00:53:08.340 --> 00:53:12.600
ridiculous scripting language,
namely awk.

00:53:12.600 --> 00:53:12.600
And again, I can play this.

00:53:13.590 --> 00:53:16.600
I've got the multi-level undo and redo.

00:53:16.850 --> 00:53:18.490
I've got everything I had before.

00:53:18.500 --> 00:53:22.260
Okay, that's pretty cool.

00:53:25.800 --> 00:53:33.300
[Transcript missing]

00:53:33.400 --> 00:54:14.700
[Transcript missing]

00:54:15.220 --> 00:54:19.550
I'm kind of slow, so I thought, "Geez,
that's a wonderful

00:54:19.550 --> 00:54:21.100
solution I've just got.

00:54:21.190 --> 00:54:23.900
I know that QuickTime Tcl
has this command where

00:54:24.020 --> 00:54:27.620
I can add frames to a movie,
and it can create a new movie,

00:54:27.620 --> 00:54:29.100
and it can write it out to disk.

00:54:29.100 --> 00:54:32.780
So I'll use this great technology,
this Aqua technology I've got,

00:54:33.050 --> 00:54:38.850
and I'll write some sort of script
that sends the tk commands over to

00:54:38.850 --> 00:54:44.220
QuickTime Tcl." And suddenly I realized,
that's not what I want to do at all.

00:54:44.250 --> 00:54:48.350
What I want to do is just write a
command line tool that takes as its

00:54:48.790 --> 00:54:54.330
parameters the names of the files
I want to use and creates the movie.

00:54:54.590 --> 00:54:57.530
And let me just show you that here.

00:54:58.190 --> 00:55:02.510
I've got an Xcode project,
but using Xcode is way overkill for this.

00:55:02.610 --> 00:55:05.330
I could just do this
all on the command line.

00:55:06.910 --> 00:55:08.720
That's wonderful.

00:55:08.860 --> 00:55:11.280
So it's real simple.

00:55:11.280 --> 00:55:13.780
I've got a main routine here.

00:55:13.990 --> 00:55:16.800
It's got some arguments.

00:55:16.800 --> 00:55:19.320
One nice thing about this
script is I'm using the latest

00:55:19.320 --> 00:55:23.220
and greatest QuickTime APIs.

00:55:23.520 --> 00:55:27.900
So I do a little checking on
the number of arguments I get.

00:55:27.970 --> 00:55:30.670
If I don't get the right number,
I'll print out some nasty warnings.

00:55:30.680 --> 00:55:35.500
I'll call enter movies
to initialize QuickTime.

00:55:35.550 --> 00:55:37.900
There's actually a step
missing here that I don't have.

00:55:37.910 --> 00:55:41.820
In theory,
QuickTime likes to have a graphics

00:55:41.820 --> 00:55:44.020
port available when it's doing stuff.

00:55:44.430 --> 00:55:47.100
Even if I'm not actually going
to display any QuickTime movies,

00:55:47.100 --> 00:55:50.680
it's generally a good idea to
have a graph port lying around.

00:55:50.680 --> 00:55:53.760
So at this point,
I should call open new port.

00:55:53.760 --> 00:55:55.680
Is that what it's called?

00:55:55.680 --> 00:55:57.600
And have a port lying around.

00:55:57.680 --> 00:55:59.680
It turns out I've never
crashed without it,

00:55:59.680 --> 00:56:00.680
so let's see what happens.

00:56:00.680 --> 00:56:02.240
Let's not bother.

00:56:03.000 --> 00:56:09.310
So the first thing I want to do is grab
the first thing on the command line

00:56:10.050 --> 00:56:12.950
and do a CFString create with CString.

00:56:13.040 --> 00:56:15.480
So you're giving me a
CString on the command line,

00:56:15.540 --> 00:56:17.980
and I'm going to get
a CFString from that.

00:56:18.280 --> 00:56:22.870
I want a CFString because there's
this wonderful new QuickTime data

00:56:22.870 --> 00:56:29.540
reference utility called
QT New Data Reference from URL CFString.

00:56:29.590 --> 00:56:32.610
And what that gives me
back in its parameters

00:56:33.870 --> 00:56:38.040
"A data reference is a data reference
and the type of a data reference.

00:56:38.170 --> 00:56:42.730
Again, a data reference is our standard
way of referring to something on the

00:56:42.730 --> 00:56:47.300
disk or something out there on the
Internet or something somewhere."

00:56:47.800 --> 00:56:50.460
Once I've got the data reference,
I'm going to use this

00:56:50.460 --> 00:56:53.940
new QuickTime storage
API called CreateMovieStorage.

00:56:54.120 --> 00:56:57.490
It takes the data ref
and the data ref type,

00:56:57.770 --> 00:57:03.350
It takes the type of file I want,
takes some flags, and it gives me back a

00:57:03.350 --> 00:57:05.690
data handler and a movie.

00:57:05.700 --> 00:57:08.220
So now that I've,
with just a few lines of code,

00:57:08.290 --> 00:57:12.300
figured out what the output file should
be called and created in a movie,

00:57:12.330 --> 00:57:16.350
I can loop over all the rest
of the command line parameters,

00:57:16.350 --> 00:57:19.820
which presumably are URLs to the images.

00:57:19.850 --> 00:57:21.240
And I do sort of the same thing.

00:57:21.430 --> 00:57:24.820
I get a CFString for the argument.

00:57:25.120 --> 00:57:27.980
I get a data reference from it.

00:57:28.020 --> 00:57:32.700
I'm going to open the image as a movie,
and I can do that with

00:57:32.760 --> 00:57:34.370
Open Movie Storage.

00:57:34.660 --> 00:57:36.210
Um, get the movie.

00:57:36.660 --> 00:57:41.130
Finally, when you do that,
when you open an image as a movie,

00:57:41.130 --> 00:57:46.120
at least on Mac OS X,
the duration of that movie is, I believe,

00:57:46.120 --> 00:57:47.840
a fifth of a second.

00:57:48.570 --> 00:57:53.000
That would be pretty small for
the slideshow I want to build,

00:57:53.010 --> 00:57:56.850
so I'm going to scale the
movie segment of the movie that

00:57:56.850 --> 00:58:02.940
I just opened to some predefined

00:58:04.480 --> 00:58:06.020
Duration.

00:58:06.140 --> 00:58:09.400
Finally, I'm going to insert that segment
that I just scaled up to be the right

00:58:09.400 --> 00:58:12.910
size into the movie that I created.

00:58:13.220 --> 00:58:17.450
I'm going to do that for every
image on the command line.

00:58:17.590 --> 00:58:19.520
Finally,
I'm going to update movie in storage,

00:58:19.520 --> 00:58:22.420
which writes out the new movie,
and I'm done.

00:58:22.440 --> 00:58:26.880
So here with about, I don't know,
maybe 30 lines of fairly

00:58:26.880 --> 00:58:31.650
up-to-date QuickTime APIs,
I have a command line tool that I can

00:58:31.650 --> 00:58:38.120
specify a whole bunch of image files to,
and then it will create a movie for me.

00:58:38.350 --> 00:58:42.570
All right, so let's go back to slides.

00:58:43.870 --> 00:58:48.410
So that was the case study
for command line tools.

00:58:48.500 --> 00:58:50.130
So let me just wrap up.

00:58:50.200 --> 00:58:54.500
I hope we've shown today that we've got a
whole array of interesting sorts of tools

00:58:54.500 --> 00:58:58.160
that you can use to build QuickTime apps,
not only GUI apps,

00:58:58.160 --> 00:59:02.880
but also command line apps that will
do useful and interesting things.

00:59:02.880 --> 00:59:07.080
Many of these tools have very
standard ways of extending them.

00:59:07.080 --> 00:59:10.820
For instance, REALbasic or Revolution you
can write plug-ins for if

00:59:10.820 --> 00:59:13.900
there are QuickTime APIs that
they don't support natively.

00:59:13.960 --> 00:59:16.700
And I really think that right
now is the best time to be

00:59:16.700 --> 00:59:18.630
developing QuickTime software.

00:59:18.650 --> 00:59:22.200
We've seen at this conference
really important new tools,

00:59:22.200 --> 00:59:25.460
the QuickTime Cocoa Kit,
the ActiveX Control,

00:59:25.460 --> 00:59:30.210
and things like this that really
bring us into the 21st century.

00:59:31.790 --> 00:59:32.860
So you can contact John or me
at quicktime@quicktime.com.

00:59:33.080 --> 00:59:33.760
So you can contact John or me
at quicktime@quicktime.com.

00:59:33.760 --> 00:59:37.600
And let me just refer you to a
couple of sources of information.

00:59:37.610 --> 00:59:41.500
Mac Tech Magazine,
starting back in December of 2002,

00:59:41.650 --> 00:59:44.360
has had a nice series of
articles about various

00:59:44.360 --> 00:59:46.850
QuickTime programming environments.

00:59:46.940 --> 00:59:50.410
So virtually everything that
I've mentioned here today,

00:59:50.560 --> 00:59:53.710
there will be at some
point in this presentation,

00:59:53.710 --> 00:59:53.710
there will be a quick time program.

00:59:53.700 --> 01:00:23.800
[Transcript missing]