WEBVTT

00:00:12.690 --> 00:00:17.350
Good afternoon everybody and welcome
to the WebObjects Overview session.

00:00:17.570 --> 00:00:18.890
My name is Bob Fraser.

00:00:18.890 --> 00:00:23.360
I am the product manager for
WebObjects and also Java now.

00:00:23.360 --> 00:00:26.420
And this is going to be an introductory
overview to the WebObjects technologies.

00:00:26.520 --> 00:00:29.340
I'd like to start with
the usual exercise.

00:00:29.340 --> 00:00:32.950
Anybody who's using WebObjects,
could you please raise your hands?

00:00:33.150 --> 00:00:33.460
Yeah.

00:00:33.460 --> 00:00:36.950
And for how many of you is this
the first time you're coming to

00:00:36.950 --> 00:00:38.880
a WWDC session on WebObjects?

00:00:38.900 --> 00:00:41.890
Okay, great.

00:00:43.790 --> 00:00:47.790
So what we're going to cover
is an overview of WebObjects,

00:00:47.830 --> 00:00:50.320
some of the things that
Apple is doing with WebObjects,

00:00:50.320 --> 00:00:53.500
how to get WebObjects,
and we also have some members of

00:00:53.500 --> 00:00:56.860
the community here who are going
to talk about some of the things

00:00:56.970 --> 00:00:59.930
that are going on in the whole
general WebObjects community.

00:01:02.140 --> 00:01:07.050
So WebObjects is a great set of
tools and frameworks for doing rapid

00:01:07.050 --> 00:01:10.740
application development of Java server
applications and web services.

00:01:10.740 --> 00:01:12.590
And it's really, really neat stuff.

00:01:12.590 --> 00:01:18.320
What you get is the easiest way to
build J2EE compatible applications.

00:01:18.320 --> 00:01:21.170
So Java is the way to
do server applications,

00:01:21.170 --> 00:01:23.400
at least if you're not Microsoft.

00:01:23.500 --> 00:01:26.600
And one of the things,
it's great because it's standards based,

00:01:26.600 --> 00:01:29.550
it's cross platform,
it's interoperable with a lot of things,

00:01:29.600 --> 00:01:31.870
there's great connectivity
to a bunch of stuff.

00:01:32.000 --> 00:01:35.240
But building a real enterprise
level three tiered application,

00:01:35.330 --> 00:01:37.230
it almost takes a rocket scientist.

00:01:37.290 --> 00:01:38.710
It's a complicated thing.

00:01:38.710 --> 00:01:41.830
So if you look out there,
what have a lot of people been doing,

00:01:41.830 --> 00:01:44.900
they've been trying to reduce
the scope of effort involved,

00:01:44.950 --> 00:01:49.260
come along with tools that can increase
productivity and reduce complexity.

00:01:49.260 --> 00:01:53.050
You see that with an example
of the Sun Creator product

00:01:53.050 --> 00:01:55.310
that's been announced here.

00:01:55.540 --> 00:01:59.100
And at Java 1 is exactly trying
to solve that kind of a problem.

00:02:02.000 --> 00:02:06.180
which addresses the same kind of
issues and the same kind of problems.

00:02:06.180 --> 00:02:10.580
And what you get is everything
you need to build enterprise

00:02:10.580 --> 00:02:12.900
class applications in one box.

00:02:12.900 --> 00:02:17.110
So, with WebObjects,
you get an integrated

00:02:17.220 --> 00:02:19.730
development environment.

00:02:19.730 --> 00:02:25.140
It layers on top of X code or Windows,
and you can it gives you the IDE for

00:02:25.140 --> 00:02:27.770
all your editing and rapid prototyping.

00:02:27.930 --> 00:02:29.760
It does database mapping.

00:02:29.760 --> 00:02:33.310
It includes a full object relational
mapping model that will take you

00:02:33.400 --> 00:02:38.180
back and forth between SQL databases
or JNDI data sources and do that

00:02:38.180 --> 00:02:41.060
mapping and turn that into objects.

00:02:41.110 --> 00:02:45.590
It also gives you some really incredible
assistant and wizard technologies

00:02:45.590 --> 00:02:47.840
that let you do code free prototyping.

00:02:47.840 --> 00:02:51.350
But then these are extensible and you
can extend them and turn them into

00:02:51.360 --> 00:02:54.840
full scalable applications because
they use the powerful frameworks

00:02:54.940 --> 00:02:58.480
that are built in that are all very,
very scalable.

00:02:58.480 --> 00:03:01.840
It is also now an outstanding
package of web services,

00:03:01.920 --> 00:03:04.120
both as a consumer and a provider.

00:03:04.120 --> 00:03:08.670
And there are not that many
great web services packages for

00:03:08.800 --> 00:03:10.160
providing web services out there.

00:03:10.160 --> 00:03:11.840
We think this is a great offering.

00:03:11.880 --> 00:03:17.060
And it's one of the more common uses
of it is to do HTML presentations

00:03:17.110 --> 00:03:19.170
or three-tiered HTML-based websites.

00:03:21.400 --> 00:03:24.800
So the advantages are the usual,
the one things you want to have,

00:03:24.840 --> 00:03:26.200
the three things you want
to have in your product,

00:03:26.200 --> 00:03:27.030
faster, cheaper, better.

00:03:27.030 --> 00:03:31.540
And how that relates here is it
accelerates your time to market.

00:03:31.540 --> 00:03:34.390
Because we have a developer tool
chain that walks you through

00:03:34.510 --> 00:03:37.530
the process of building these
applications and it's visual.

00:03:37.550 --> 00:03:38.490
It's a visual IDE.

00:03:38.490 --> 00:03:41.780
So it simplifies this and makes
this much more approachable.

00:03:41.780 --> 00:03:46.240
You get better code at the end of the day
because there are years of best practices

00:03:46.490 --> 00:03:48.660
that are built into these frameworks.

00:03:48.660 --> 00:03:51.280
So we've had a lot of great people
working on this stuff for a long time.

00:03:51.300 --> 00:03:56.300
And it's all encapsulated in these
frameworks that come with WebObjects.

00:03:56.300 --> 00:03:59.390
So there's usually a tool and
a framework that go together.

00:03:59.390 --> 00:04:02.990
And what this does is it does a
lot of the heavy lifting for you.

00:04:03.140 --> 00:04:05.190
So a lot of the object
relational mapping,

00:04:05.190 --> 00:04:08.310
a lot of the templating,
a lot of the generation of web pages,

00:04:08.310 --> 00:04:11.860
a lot of the request response handling,
a lot of these things have been

00:04:11.890 --> 00:04:13.480
well designed and baked in.

00:04:13.480 --> 00:04:15.920
That lets you worry about
your domain expertise,

00:04:15.920 --> 00:04:18.530
the piece that you actually
really want to build and not

00:04:18.530 --> 00:04:21.280
have to worry about a lot of the
infrastructure and the plumbing.

00:04:21.300 --> 00:04:22.610
and I'm not complaining.

00:04:22.850 --> 00:04:25.280
And because you don't
write a lot of code,

00:04:25.420 --> 00:04:26.580
you don't maintain a lot of code.

00:04:26.600 --> 00:04:30.230
And so your overall cost
of ownership of a project,

00:04:30.240 --> 00:04:32.940
of a product,
of a life cycle of something is reduced.

00:04:32.940 --> 00:04:35.790
And the other thing you'll see
is you'll see how easy it is

00:04:35.790 --> 00:04:37.390
to do incremental development.

00:04:37.490 --> 00:04:39.250
And you get an idea and you go, oh,
what if?

00:04:39.270 --> 00:04:41.340
Or I need to make this
little change over here.

00:04:41.340 --> 00:04:42.680
You'll see how fluid that is.

00:04:42.680 --> 00:04:45.310
And that also reduces the
cost of ownership because

00:04:45.310 --> 00:04:47.070
requirements are always changing.

00:04:47.070 --> 00:04:49.540
People always come up and say,
I'd like the button,

00:04:49.540 --> 00:04:51.860
but I want it here and I want
it blue and I want to do this.

00:04:51.990 --> 00:04:54.510
And with WebObjects,
that's like really neat and easy to do.

00:04:57.080 --> 00:05:01.720
So let's look at a classical
three-tiered application architecture.

00:05:01.740 --> 00:05:04.340
And we have on the left
your data access layer.

00:05:04.340 --> 00:05:07.240
With WebObjects,
you can talk to JDBC databases

00:05:07.300 --> 00:05:09.090
and JNDI data sources.

00:05:10.210 --> 00:05:12.940
And then you'll typically
have a business logic layer or

00:05:12.940 --> 00:05:15.500
fancy word for if statements.

00:05:15.500 --> 00:05:18.200
And then you have different
presentations that you may want to do.

00:05:18.220 --> 00:05:21.590
And with WebObjects
you can do HTML based,

00:05:21.740 --> 00:05:25.390
web service based,
or rich client based presentation layers.

00:05:25.440 --> 00:05:26.200
You get your choice.

00:05:27.800 --> 00:05:30.760
So that's kind of like, you know,
when you're mapping out a

00:05:30.840 --> 00:05:34.260
nice enterprise application,
you've got your different layers.

00:05:34.260 --> 00:05:37.150
WebObjects has a tool and
framework that pretty much works

00:05:37.220 --> 00:05:39.200
in each of these different layers.

00:05:39.860 --> 00:05:42.290
So let's look at,
that's the architecture.

00:05:42.660 --> 00:05:45.800
Now let's look at what the
developer flow would be like.

00:05:47.870 --> 00:05:52.560
So with the data access layer,
we have a tool called EOModeler.

00:05:52.610 --> 00:05:54.200
So this is the modeling tool.

00:05:54.280 --> 00:05:56.300
So what we want to do is we
want to get away from tables

00:05:56.300 --> 00:06:01.670
and rows and GNDi attributes,
and we want to model that at a higher

00:06:01.870 --> 00:06:04.190
level and get that to the object level.

00:06:04.210 --> 00:06:06.540
Once we have this,
now we can operate at a higher

00:06:06.540 --> 00:06:10.400
level in our application and
in our application development.

00:06:10.440 --> 00:06:13.000
So then we bring it into Xcode,
and we start writing a little

00:06:13.000 --> 00:06:16.590
bit of business logic in
Java so everything's portable.

00:06:29.190 --> 00:06:29.190
And this is where you would
do your rapid prototyping.

00:06:29.190 --> 00:06:29.190
And then from here,
what you can do is you can take it and

00:06:29.190 --> 00:06:29.190
use our WebObjects builder design tool
for doing HTML web page generation.

00:06:29.770 --> 00:06:34.620
There's a web services assistant
for building web services.

00:06:34.690 --> 00:06:38.330
And there's also a way to do
rich Java client applications

00:06:38.340 --> 00:06:40.450
in a tool there as well.

00:06:40.710 --> 00:06:43.530
Now, one of the interesting things
to notice about this diagram,

00:06:43.540 --> 00:06:48.470
if we look in the middle here at Xcode,
we see three lines coming

00:06:48.470 --> 00:06:50.490
from that same point there.

00:06:50.490 --> 00:06:57.900
You get one model and one set of
business logic that's operating on that,

00:06:57.900 --> 00:07:01.770
and you're kind of
presentationally independent.

00:07:01.780 --> 00:07:05.770
And so what you can do from
the same model-driven design,

00:07:06.080 --> 00:07:09.390
you can actually go to a web page,
go to web services,

00:07:09.460 --> 00:07:12.550
or go to a rich client
based on that same model.

00:07:12.580 --> 00:07:15.350
Model-driven programming is a
really powerful paradigm here,

00:07:15.360 --> 00:07:16.720
and we put it to good use.

00:07:16.910 --> 00:07:19.850
And we find it very common
for a lot of our customers and

00:07:19.850 --> 00:07:21.760
partners to actually do that.

00:07:21.760 --> 00:07:26.270
They'll actually have
multiple applications,

00:07:26.270 --> 00:07:31.670
or they'll have multiple
access points driven this way.

00:07:31.670 --> 00:07:31.670
So a scenario that might make sense,

00:07:32.030 --> 00:07:34.000
You've got some data,
you've got a website.

00:07:34.020 --> 00:07:36.920
For the front of the house,
you may want to have a web interface,

00:07:36.920 --> 00:07:37.450
HTML based.

00:07:37.900 --> 00:07:40.360
People come to your website,
they click on things through an

00:07:40.360 --> 00:07:42.460
HTML interface in a standard browser.

00:07:42.460 --> 00:07:44.690
Okay, but then you may want
to have an in-house,

00:07:44.780 --> 00:07:47.070
behind the firewall DBA app,
where you're updating

00:07:47.080 --> 00:07:48.390
like a product inventory.

00:07:48.390 --> 00:07:50.400
That you might like to
have as a rich client.

00:07:50.460 --> 00:07:52.190
You can drive that off the same model.

00:07:52.250 --> 00:07:54.530
And then you decide later on,
you want to automate

00:07:54.530 --> 00:07:57.600
some business processes,
so you may want to add some web services,

00:07:57.670 --> 00:07:59.920
and that can be lights
out computer to computer.

00:07:59.920 --> 00:08:02.740
And all of those can
interact with the same model,

00:08:02.740 --> 00:08:05.870
either in the same application,
or you could just build another

00:08:06.200 --> 00:08:07.460
quick separate application.

00:08:11.830 --> 00:08:15.530
So step one is building the model.

00:08:15.550 --> 00:08:19.670
Now what EOModeler allows you to
do is it allows you to reverse

00:08:19.680 --> 00:08:21.480
engineer the data source.

00:08:21.590 --> 00:08:26.150
So all you need is a JNDI URL and
a JDBC access to a database,

00:08:26.160 --> 00:08:29.650
an ESQL database,
and you can basically go in there

00:08:29.870 --> 00:08:32.670
and it will find the tables,
the columns, the rows,

00:08:32.670 --> 00:08:35.960
and understand all of these
entities and properties.

00:08:38.020 --> 00:08:41.760
So, you can use EOModeler for
doing forward schema design.

00:08:41.760 --> 00:08:46.120
So, you can drop in entities,
drop in properties and stuff like that.

00:08:46.380 --> 00:08:49.270
And it will actually
generate the tables for you.

00:08:49.270 --> 00:08:53.320
And we support a wide variety of
databases in this modeling tool and

00:08:53.320 --> 00:08:55.620
the mapping layer that goes with it.

00:08:55.620 --> 00:08:58.810
Everything from Oracle and
Sybase and FrontBase and

00:08:58.810 --> 00:09:00.730
OpenBase and MySQL and MSSQL.

00:09:00.730 --> 00:09:04.340
And I'm probably forgetting,
but if you go to the website,

00:09:04.340 --> 00:09:06.860
there's a list of a bunch of them.

00:09:07.300 --> 00:09:10.650
And then there's other people
who've done plug-ins for like DB2

00:09:10.760 --> 00:09:12.880
and PostgreSQL and stuff like that.

00:09:12.940 --> 00:09:16.540
So, pretty much you can get out
there and get access to just

00:09:16.540 --> 00:09:18.900
about any database that you want.

00:09:18.910 --> 00:09:20.990
So, that's the design tool.

00:09:21.560 --> 00:09:24.100
Now we have this conceptual model.

00:09:24.510 --> 00:09:28.490
So, now the next step.

00:09:29.220 --> 00:09:31.980
Well, here's a picture of the tool,
and we're going to have a

00:09:31.980 --> 00:09:32.930
little demonstration here.

00:09:32.930 --> 00:09:36.740
But one thing to notice is that
we have kind of like an ER entity

00:09:36.820 --> 00:09:38.730
relationship diagram here.

00:09:38.730 --> 00:09:42.570
This was actually generated by a modeler,
and you can also see that we've also

00:09:42.570 --> 00:09:44.500
gotten the relationships as well.

00:09:44.500 --> 00:09:46.620
So not only did we
find any of the tables,

00:09:46.640 --> 00:09:49.900
any of the properties,
and we now also have the relationships

00:09:49.900 --> 00:09:52.020
and the interaction between this.

00:09:52.020 --> 00:09:55.860
Now you actually get a
high-level picture of this.

00:09:57.180 --> 00:10:00.670
This alone would already be kind of
worth the price of admission for a

00:10:00.670 --> 00:10:02.360
lot of people for a lot of projects.

00:10:02.360 --> 00:10:05.620
We get so much feedback from
places such as universities.

00:10:05.620 --> 00:10:07.480
They've got a lot of turnover.

00:10:07.480 --> 00:10:09.520
They're working on grad student power.

00:10:09.520 --> 00:10:13.200
And then basically after like five
years or four years or something,

00:10:13.310 --> 00:10:16.060
nobody knows what this
thing is doing anymore.

00:10:16.060 --> 00:10:18.350
Somebody can pop into the model,
and they can open it up

00:10:18.350 --> 00:10:20.470
and look at it and go,
oh, these are the entities,

00:10:20.720 --> 00:10:22.160
these are the things that are in there.

00:10:22.160 --> 00:10:24.130
Or you could walk up to a database,
an Oracle.

00:10:24.200 --> 00:10:26.410
We have people go in and reverse
engineer Oracle databases,

00:10:26.410 --> 00:10:27.100
and there's stuff in there.

00:10:27.100 --> 00:10:29.410
The DBAs didn't even really
know that they were really still

00:10:29.540 --> 00:10:30.400
playing around with anymore.

00:10:30.400 --> 00:10:34.500
And you can get a quick
view of everything this way.

00:10:34.540 --> 00:10:37.720
What did that just do?

00:10:42.980 --> 00:10:44.380
That's what that button does.

00:10:44.410 --> 00:10:44.900
Okay.

00:10:44.900 --> 00:10:47.700
Sorry about that.

00:10:47.880 --> 00:10:48.270
Okay.

00:10:48.350 --> 00:10:52.850
Now, at runtime, we do all of the object
relational mapping for you.

00:10:52.880 --> 00:10:55.700
So we do all of the database access.

00:10:55.700 --> 00:10:56.940
We do all the data persistence.

00:10:56.940 --> 00:10:58.320
So you don't do any SQL.

00:10:58.320 --> 00:11:02.930
We do the fetches, the read, writes,
updates, deletes, all that kind of stuff.

00:11:02.930 --> 00:11:06.780
And this model and the mapping
is database independent.

00:11:06.780 --> 00:11:10.420
So it would be analogous to
container managed persistence.

00:11:10.450 --> 00:11:13.820
Only we believe a little
easier to implement.

00:11:13.820 --> 00:11:15.760
It's database independent.

00:11:15.810 --> 00:11:20.270
And you can also query across
multiple databases simultaneously.

00:11:20.270 --> 00:11:23.390
So you can actually build
a model and actually pull

00:11:23.390 --> 00:11:27.770
data from like a GNDi source,
pull data from like an Oracle database,

00:11:27.770 --> 00:11:32.220
and then actually put those in your
application and mix with those.

00:11:32.220 --> 00:11:35.250
So it's nice because you
get transparent persistence,

00:11:35.250 --> 00:11:38.720
you get database independence,
and you get the ability to do at a

00:11:38.720 --> 00:11:40.850
nice high level data aggregation.

00:11:40.850 --> 00:11:42.880
So those are all really nice features.

00:11:42.900 --> 00:11:44.210
Cheers.

00:11:44.440 --> 00:11:47.540
And with that,
I would like to invite Darrell Lee up

00:11:47.680 --> 00:11:51.530
to give a demonstration of EOModeler.

00:11:56.070 --> 00:11:56.640
Hi, everybody.

00:11:56.830 --> 00:11:59.400
So I just want to show you a modeler.

00:11:59.400 --> 00:12:00.880
Can we bring up the demo machine?

00:12:00.880 --> 00:12:02.410
Okay, great.

00:12:02.420 --> 00:12:06.820
So I just want to show you a
quick reverse engineering demo

00:12:07.090 --> 00:12:10.920
and just how easy it is to
reverse engineer a database.

00:12:10.920 --> 00:12:23.540
So let's create a new model,
and I'm going to select

00:12:24.010 --> 00:12:29.590
a JDBC data source.

00:12:29.590 --> 00:12:29.590
And I'm selecting our standard
real estate database that comes

00:12:29.590 --> 00:12:29.590
with every copy of WebObjects.

00:12:29.590 --> 00:12:29.590
And I'm just going to take basic
defaults here and finish my model.

00:12:29.950 --> 00:12:33.750
And, boom, you know,
that couple seconds and we have our

00:12:33.750 --> 00:12:35.390
whole database reverse engineered.

00:12:35.400 --> 00:12:40.220
As you can see,
we have all of our relationships modeled.

00:12:40.300 --> 00:12:44.030
If you look on the left side,
all of these what we call entities

00:12:44.300 --> 00:12:46.560
are mapped to your tables.

00:12:46.560 --> 00:12:52.420
And if you select the user table,
we also have the attributes or what

00:12:52.420 --> 00:12:55.360
we call -- that map to your columns.

00:12:55.360 --> 00:12:58.640
So first name would map to
a column in your database.

00:12:58.640 --> 00:13:02.330
So if you use the inspector,
you can check it really quickly and that

00:13:02.330 --> 00:13:06.320
maps to the user table in the database.

00:13:06.320 --> 00:13:09.810
Another nice feature is say
instead of reverse engineering,

00:13:09.810 --> 00:13:14.580
you actually want to just model your
database and your schema first and then

00:13:14.670 --> 00:13:17.560
you want to blast that to your database.

00:13:17.560 --> 00:13:23.080
And just say we had done modeled this
already but it wasn't in our database.

00:13:23.080 --> 00:13:25.340
What you can do is select our SQL file.

00:13:25.340 --> 00:13:28.760
And then you can see that we
have a SQL generation assistant.

00:13:28.760 --> 00:13:32.810
And what you can see here is
that we've composed all the

00:13:32.820 --> 00:13:37.800
SQL queries and statements that
you'll need to create the database.

00:13:37.800 --> 00:13:41.600
All the foreign keys and primary
keys and constraints you'll

00:13:41.690 --> 00:13:43.660
need to create the database.

00:13:43.660 --> 00:13:46.960
So with that demo,
it shows you just how quickly you

00:13:46.960 --> 00:13:52.200
can get up and running and how you
can model your database in minutes.

00:13:58.550 --> 00:14:00.640
Thank you, Darrell.

00:14:00.790 --> 00:14:04.280
Okay, we have a model,
a way to get things in

00:14:04.280 --> 00:14:05.940
and out of our database.

00:14:05.940 --> 00:14:09.720
So now that we've done this,
we can start prototyping.

00:14:09.720 --> 00:14:12.940
So the next step would be to
bring this into the IDE and start

00:14:12.940 --> 00:14:17.780
writing a little bit of code
and start developing a prototype.

00:14:17.780 --> 00:14:20.870
Now, the advantages of this,
what happens in WebObjects is you

00:14:20.980 --> 00:14:23.030
get a better way to write code.

00:14:23.030 --> 00:14:24.630
It's a better development process.

00:14:24.820 --> 00:14:28.110
Basically,
what you do is you start prototyping

00:14:28.190 --> 00:14:31.910
the application and you get
something live running right away.

00:14:31.910 --> 00:14:35.090
So, contrast this to, let's say,
something like, you know,

00:14:35.100 --> 00:14:37.600
the aerospace industry where you're
going to go with a six months design

00:14:37.980 --> 00:14:41.650
requirements and then you get a
bunch of programs working on it and

00:14:41.650 --> 00:14:44.380
then six months later you decide,
that isn't quite what I wanted.

00:14:44.420 --> 00:14:45.340
All right.

00:14:45.580 --> 00:14:50.110
This is a much more fluid,
interactive way of working.

00:14:50.110 --> 00:14:52.150
Prototype is generated.

00:14:52.680 --> 00:14:58.930
is the founder of WebObjects.

00:14:58.930 --> 00:14:58.930
He's been running the WebObjects
platform for over a decade.

00:15:00.000 --> 00:15:10.400
[Transcript missing]

00:15:14.050 --> 00:15:23.690
is the founder of WebObjects.

00:15:23.690 --> 00:15:23.690
He's been working with
Apple for over a decade.

00:15:23.690 --> 00:15:23.690
He's been

00:15:23.850 --> 00:15:31.990
is the founder and CEO of Apple.

00:15:31.990 --> 00:15:31.990
He's been working with
Apple since the beginning of

00:15:44.930 --> 00:15:44.930
...the application.

00:15:44.930 --> 00:15:44.930
Each of these steps along the way,
it's... ...the application.

00:15:44.930 --> 00:15:44.930
And so what happens along the
way is continuous integration.

00:15:44.930 --> 00:15:44.930
And so... ...the...

00:15:47.890 --> 00:15:54.790
So I feel this gives you actually a
better way to develop an application.

00:15:57.100 --> 00:16:02.900
[Transcript missing]

00:16:04.210 --> 00:16:10.210
So with WebObjects, you get a tool,
a web builder.

00:16:25.900 --> 00:16:25.900
WebObjects Builder,
both like a great email editor,

00:16:25.900 --> 00:16:25.900
but a concept that it has is
kind of like a binding editor.

00:16:25.900 --> 00:16:25.910
And it allows you to actually
tie the data to the page.

00:16:26.100 --> 00:16:37.800
[Transcript missing]

00:16:38.530 --> 00:16:44.800
is the first person to be on the panel.

00:16:44.800 --> 00:16:45.050
He will be presenting
his presentation at the

00:16:49.190 --> 00:16:56.070
picture of the and at the bottom we've
got some of the keys and some of the

00:16:56.700 --> 00:17:08.800
[Transcript missing]

00:17:10.070 --> 00:17:21.390
is the founder and founder of WebObjects.

00:17:21.390 --> 00:17:21.580
He's the founder and
founder of WebObjects.

00:17:23.680 --> 00:17:29.670
Then at runtime,
what we do is we take an HTML template,

00:17:29.800 --> 00:17:31.980
we take data coming from

00:17:32.540 --> 00:17:44.950
is the founder of Apple.

00:17:45.100 --> 00:17:45.100
He's been working with
Apple for over a decade.

00:17:45.100 --> 00:17:45.100
He's been working

00:17:45.100 --> 00:17:56.700
[Transcript missing]

00:17:58.580 --> 00:18:03.380
Another demonstration here of
building a simple application and

00:18:03.380 --> 00:18:04.800
how you can finally modify it.

00:18:04.900 --> 00:18:07.100
Thank you, Bob.

00:18:07.100 --> 00:18:11.420
What I'd like to show you
is a real simple design.

00:18:22.030 --> 00:18:22.300
Hi, everyone.

00:18:22.300 --> 00:18:22.300
I'm Bob Fraser.

00:18:22.300 --> 00:18:22.300
I'm the CEO of Apple.

00:18:22.300 --> 00:18:22.300
I'm the CEO of Apple.

00:18:33.340 --> 00:18:33.340
Hi, everyone.

00:18:33.340 --> 00:18:33.340
I'm Bob Fraser.

00:18:33.340 --> 00:18:33.340
I'm the CEO of Apple.

00:18:33.340 --> 00:18:33.340
I'm the CEO of Apple.

00:18:40.970 --> 00:18:40.970
Hi, everyone.

00:18:40.970 --> 00:18:40.970
I'm Bob Fraser.

00:18:40.970 --> 00:18:40.970
I'm the CEO of Apple.

00:18:40.970 --> 00:18:40.970
I'm the CEO of Apple.

00:18:42.640 --> 00:18:46.980
So the next thing it'll ask me is what
is the main idea that I want to display.

00:18:46.980 --> 00:18:50.720
And I'll just pick listing
address to keep it simple.

00:19:05.150 --> 00:19:05.150
And in this pane,
it's giving me options to select layouts.

00:19:05.150 --> 00:19:05.150
As you can see,
the preview mode gives you an idea

00:19:05.150 --> 00:19:05.150
of what the HTML page will look like.

00:19:05.150 --> 00:19:05.150
I'll just select this layout.

00:19:07.000 --> 00:19:13.150
The first thing we're going to do is
figure out what we want to display,

00:19:13.150 --> 00:19:14.890
all the address information.

00:19:15.970 --> 00:19:19.060
And then let's just query on the city.

00:19:19.060 --> 00:19:21.600
And let's finish that.

00:19:21.610 --> 00:19:24.300
In a second, we'll Xcode.

00:19:24.300 --> 00:19:28.420
And-- whoops.

00:19:28.450 --> 00:19:29.850
Hello.

00:19:35.550 --> 00:19:42.450
And let's that really quick.

00:19:42.690 --> 00:19:47.960
So as you can see, there's really not too
much complex stuff here.

00:19:47.970 --> 00:19:51.040
What we got is a few Java files.

00:19:51.070 --> 00:19:55.590
We have one component and our model.

00:19:55.600 --> 00:20:04.300
[Transcript missing]

00:20:04.670 --> 00:20:13.430
and Bob Fraser: And boom,
we have our results really quickly.

00:20:13.430 --> 00:20:13.430
If we search for something
that wouldn't be there,

00:20:13.430 --> 00:20:13.430
then we have this table showing.

00:20:13.590 --> 00:20:16.820
So let's say I don't like
the way this interface is,

00:20:16.820 --> 00:20:20.990
and I want to make sure
this table does not show up.

00:20:21.300 --> 00:20:24.690
We can go into WebObjects Builder.

00:20:27.960 --> 00:20:29.870
Hello, everyone.

00:20:29.870 --> 00:20:33.270
I'm Bob Fraser, CEO of WebObjects.

00:20:33.270 --> 00:20:38.900
I'm going to talk about the
WebObjects and the Web Component.

00:20:38.900 --> 00:20:44.740
I'm going to talk about the
Web Component and the Web Component.

00:20:44.780 --> 00:20:50.600
I'm going to talk about the
Web Component and the Web Component.

00:20:50.600 --> 00:20:56.900
I'm going to talk about the
Web Component and the Web Component.

00:21:00.720 --> 00:21:03.650
What that says is if there's
no objects to be displayed,

00:21:03.650 --> 00:21:05.040
don't show that table.

00:21:05.260 --> 00:21:07.460
And I'm going to save that.

00:21:07.460 --> 00:21:10.710
And one great feature about
WebObjects is that you don't

00:21:10.710 --> 00:21:12.210
have to always rebuild your app.

00:21:12.220 --> 00:21:15.010
If you're editing your WoW component,
a lot of times you can just save

00:21:15.040 --> 00:21:17.090
your component and then refresh.

00:21:17.170 --> 00:21:19.500
So I'm just going to refresh this page.

00:21:19.670 --> 00:21:24.120
As you can see,
I'm not going to compile the app at all.

00:21:24.120 --> 00:21:26.870
And boom, our table's not there

00:21:27.100 --> 00:21:47.700
[Transcript missing]

00:21:53.620 --> 00:21:54.500
Thank you, Darrell.

00:21:54.500 --> 00:21:56.060
So we've built a model.

00:21:56.060 --> 00:21:59.350
We've actually generated a rapid
prototype of an application.

00:21:59.510 --> 00:22:01.950
And you've seen how with a
completely visual environment,

00:22:01.950 --> 00:22:03.970
we can get in there and
drag out the design.

00:22:03.970 --> 00:22:05.850
And it's a very rich tool.

00:22:05.860 --> 00:22:06.890
It's got images.

00:22:06.890 --> 00:22:08.250
It's got repeat loops.

00:22:08.250 --> 00:22:09.670
It's got conditionals.

00:22:09.670 --> 00:22:10.700
It's got tables.

00:22:10.700 --> 00:22:13.160
It's got all that kind of stuff in there.

00:22:13.160 --> 00:22:15.430
And you basically just
drag it all out visually.

00:22:15.630 --> 00:22:18.390
And then if you need more
complicated business logic stuff,

00:22:18.430 --> 00:22:20.610
this is when you start
putting in the code.

00:22:20.610 --> 00:22:23.290
No messing with JSPs or
any of that stuff.

00:22:23.500 --> 00:22:27.090
And this is where you can see the
power starts coming in if you need

00:22:27.090 --> 00:22:29.030
to do incremental development.

00:22:29.030 --> 00:22:30.020
You pop this up.

00:22:30.040 --> 00:22:31.330
You add new features.

00:22:31.370 --> 00:22:31.970
Save it.

00:22:31.970 --> 00:22:32.500
You go.

00:22:32.500 --> 00:22:35.760
The rapid turnaround where we
didn't have to stop the app,

00:22:35.760 --> 00:22:38.410
build a war, redeploy,
anything like that.

00:22:38.570 --> 00:22:40.890
Very seamless, very quick, very fluid.

00:22:40.890 --> 00:22:44.480
Keeps your mind going and focusing
on moving the ball forward and

00:22:44.510 --> 00:22:46.530
getting the new features in.

00:23:02.470 --> 00:23:02.470
Okay, so that's an example of kind
of how you would go about

00:23:02.470 --> 00:23:02.470
building an HTML application.

00:23:02.470 --> 00:23:02.470
We also do web services.

00:23:02.470 --> 00:23:02.470
Now, web services have been
getting a lot of buzz lately.

00:23:03.200 --> 00:23:04.800
So we have two definitions
of web services.

00:23:05.330 --> 00:23:09.800
One is anything that has something to do
with the web and it might be a service.

00:23:09.830 --> 00:23:12.090
And that's kind of like the big one
that you hear a lot about and one that

00:23:12.090 --> 00:23:13.700
gets overhyped and everything like that.

00:23:13.790 --> 00:23:17.800
Then there's the more narrow
definition of web services.

00:23:18.180 --> 00:23:20.450
And the more narrow definition of
web services is really nothing more

00:23:20.450 --> 00:23:22.850
fancy than remote procedure code
that we've been doing for 20 years,

00:23:22.850 --> 00:23:23.800
only we gave it a name.

00:23:23.800 --> 00:23:27.800
But one thing we do is we actually
define a set of standards.

00:23:27.800 --> 00:23:32.800
So we do XML, we do SOAP, and we do WSDL.

00:23:33.240 --> 00:23:35.060
In a compatible way,
we're getting everything from

00:23:35.060 --> 00:23:37.800
all the Java that Sun and IBM and
everybody else is doing and even .NET.

00:23:38.460 --> 00:23:42.160
Now this is actually a really good
thing because the reason why this

00:23:42.160 --> 00:23:46.200
is a powerful concept and it's
been taking off is that it's a real

00:23:46.260 --> 00:23:47.800
killer for application integration.

00:23:48.410 --> 00:23:52.490
So you may have different departments
that haven't been talking to each other,

00:23:52.660 --> 00:23:55.150
don't even care to,
but if they both implemented web

00:23:55.150 --> 00:23:59.390
services and defined an API set,
then both of them can hook these things

00:23:59.390 --> 00:24:02.800
together and lights out operation and
don't even have to really bug each other.

00:24:03.360 --> 00:24:05.790
And that's why I think
this is really taking off.

00:24:05.860 --> 00:24:09.050
The low hanging fruit where we're
actually seeing in this is people at

00:24:09.060 --> 00:24:13.800
group and department level who have
like their own archive or store of data

00:24:13.800 --> 00:24:14.800
and they want to be able to share it.

00:24:15.330 --> 00:24:16.800
And that is really important.

00:24:17.060 --> 00:24:17.800
And that is really important.

00:24:18.060 --> 00:24:18.800
And that is really
powerful and easy to do.

00:24:18.800 --> 00:24:20.800
And WebObjects is a great tool for that.

00:24:21.510 --> 00:24:24.540
And one of the things I'll
mention is that we do both the

00:24:24.810 --> 00:24:26.760
cloud side and the server side.

00:24:27.070 --> 00:24:30.360
So the other thing that's kind of
nice about web services is you don't

00:24:30.360 --> 00:24:31.560
really have to add a whole bunch.

00:24:31.560 --> 00:24:34.140
You know, you've got your application,
you add a layer that's basically

00:24:34.140 --> 00:24:36.460
how to call it and how to figure
out what the semantics are,

00:24:36.460 --> 00:24:37.430
and then you're done.

00:24:37.440 --> 00:24:41.000
And there's a lot of
different ways to get at it.

00:24:41.130 --> 00:24:44.060
So now all of a sudden you can
have a WebObjects Java server app,

00:24:44.270 --> 00:24:46.810
and you could vend web services
that could be consumed by

00:24:46.810 --> 00:24:49.830
an Apple script somewhere,
by Perl, by C++,

00:24:49.930 --> 00:24:52.380
by a Java app or .NET app.

00:24:52.820 --> 00:24:55.550
So now you've basically expanded
the scope of how you can consume

00:24:55.550 --> 00:24:58.520
the services that you're building,
which is always a good thing.

00:24:58.720 --> 00:25:01.230
And you empower a new class of
programmers because you don't have to get

00:25:01.320 --> 00:25:03.060
into the whole really heavy-duty thing.

00:25:03.060 --> 00:25:05.380
If you can write a Perl
script and call a web service,

00:25:05.490 --> 00:25:07.670
then you're good to go
and you're in the game.

00:25:10.410 --> 00:25:14.060
So built web services, again,
we use the model-driven approach here.

00:25:14.440 --> 00:25:16.700
We have a tool for that as well.

00:25:16.700 --> 00:25:19.380
And so we can either
consume web services,

00:25:19.380 --> 00:25:21.920
get a WSDL and a data point somewhere.

00:25:21.920 --> 00:25:24.260
We can actually get that XML,
work with that,

00:25:24.380 --> 00:25:27.680
and aggregate that with other
sources and do a presentation layer,

00:25:27.680 --> 00:25:30.820
like a web thing that may go and
get like a currency of a website to

00:25:30.980 --> 00:25:34.470
do the calculation of the current
conversion or something like that.

00:25:34.630 --> 00:25:35.300
We can do that.

00:25:41.020 --> 00:25:41.150
You've probably seen, you know,
simple examples of going and getting

00:25:41.160 --> 00:25:41.340
like Fahrenheit or something like that.

00:25:41.360 --> 00:25:45.850
Okay, that's not terribly taxing
to do that kind of thing.

00:25:45.880 --> 00:25:50.160
But taking data sources out of a database
and actually doing the server side,

00:25:50.210 --> 00:25:53.110
there's not as many
offerings out there for that.

00:25:53.380 --> 00:25:58.100
And what we can do is you
have it in a data source.

00:25:58.200 --> 00:26:02.330
We can publish it and we can publish
a web service interface for it.

00:26:02.570 --> 00:26:06.050
And any Java code that you have,
you can also wrap that in a method

00:26:06.050 --> 00:26:08.270
and wrap that in a service as well.

00:26:08.960 --> 00:26:11.120
And so you're the web
service producer game,

00:26:11.410 --> 00:26:12.490
which is really exciting.

00:26:12.490 --> 00:26:15.160
And we do this without you
having to worry about the XML,

00:26:15.340 --> 00:26:18.110
without having to worry about the SOAP,
and without having to

00:26:18.110 --> 00:26:19.470
worry about the WSDL.

00:26:19.600 --> 00:26:42.800
[Transcript missing]

00:26:42.900 --> 00:26:48.140
Which will let you basically go in
and build a server and publish an

00:26:48.140 --> 00:26:51.460
interface for consuming web services.

00:26:51.600 --> 00:26:54.860
So what we're going to do is we're
going to basically attach to a

00:26:54.900 --> 00:26:58.660
database and we're going to show how
we can actually generate complete web

00:26:58.660 --> 00:27:04.150
services producing application here
with WebObjects out of the box here.

00:27:04.170 --> 00:27:09.420
And so we have Daryl
for another demo here.

00:27:12.830 --> 00:27:19.150
Okay, so let's go back to Xcode
and create a new project.

00:27:19.150 --> 00:27:23.700
And what I'm going to do is create
a direct-to-web-services project.

00:27:24.940 --> 00:27:30.110
will just call this test
direct web services.

00:27:30.800 --> 00:27:33.620
And I'll take the default options again.

00:27:33.620 --> 00:27:37.580
And here we go back to
our real estate model.

00:27:38.710 --> 00:27:41.700
and build and launch.

00:27:41.700 --> 00:27:44.310
Now, while that's building,
what I'm going to do is launch

00:27:44.350 --> 00:27:46.070
our web services assistant.

00:27:47.780 --> 00:27:52.940
So far, Safari is going to come up and
give me a URL that I can use

00:27:53.020 --> 00:27:55.700
with the Web Services Assistant.

00:27:55.700 --> 00:28:04.100
I need to copy this URL to the
Web Services Assistant and connect

00:28:04.150 --> 00:28:07.670
to it and we'll get our app up here.

00:28:07.700 --> 00:28:14.670
So the first thing you want to do in your
web service is create a new web service.

00:28:14.700 --> 00:28:15.560
So let's start that.

00:28:15.700 --> 00:28:22.000
And I see the Web Services button and
we'll just call this a listing service.

00:28:27.020 --> 00:28:28.780
Okay,
so now that we have our listing service,

00:28:28.780 --> 00:28:31.120
I need to pick some ideas
that I want to publish.

00:28:31.120 --> 00:28:33.490
We'll just keep this really simple.

00:28:33.800 --> 00:28:49.200
[Transcript missing]

00:28:50.960 --> 00:28:54.520
I'll just call this my list operation.

00:28:54.530 --> 00:29:00.070
And I need to tell it, okay,
what entity or table do I want

00:29:00.070 --> 00:29:02.620
to display or query upon?

00:29:02.620 --> 00:29:07.440
And then I want to tell it what
type of operation I want to do.

00:29:07.440 --> 00:29:10.100
So I can delete or as an
insert or as an update.

00:29:10.210 --> 00:29:12.180
I'm just going to pick search.

00:29:14.270 --> 00:29:19.080
So, boom, we have our listing service,
our listing operation.

00:29:19.080 --> 00:29:22.440
And the first thing I called is, okay,
what parameters am I going

00:29:22.560 --> 00:29:24.120
to pass in to this operation?

00:29:24.140 --> 00:29:29.260
And I'll just, similar to our last demo,
I'm going to just take

00:29:29.320 --> 00:29:33.620
a city as a parameter,
and I'm going to add that.

00:29:35.900 --> 00:29:44.700
[Transcript missing]

00:29:45.580 --> 00:29:48.040
Next thing we want to do is figure
out what we're going to return

00:29:48.320 --> 00:29:49.940
after our operation is queried.

00:29:50.080 --> 00:29:57.460
So I want to return all the
address attributes here.

00:29:59.240 --> 00:30:04.890
Okay, so now we've got our return values
and I think we're about ready to go.

00:30:05.240 --> 00:30:07.280
Let's just save that really quick.

00:30:07.300 --> 00:30:08.820
And I want to test my server.

00:30:08.840 --> 00:30:13.450
So we have a nice little
built-in testing assistant.

00:30:13.900 --> 00:30:19.920
: I can, without writing a piece of code,
just start making queries

00:30:20.050 --> 00:30:21.220
on the application.

00:30:21.220 --> 00:30:28.000
So, San Jose,
there is our are going to be returned.

00:30:28.500 --> 00:30:34.900
[Transcript missing]

00:30:35.630 --> 00:30:40.160
Another great feature of our assistant
is once I've got my operations and

00:30:40.390 --> 00:30:45.360
all defined and stuff like that,
we actually compose all the WSDL for you.

00:30:45.360 --> 00:30:47.470
So most people,
they have to go out there and

00:30:47.470 --> 00:30:49.600
they have to hand code this,
hand edit this,

00:30:49.640 --> 00:30:52.440
and figure all this stuff out
and how to bind this and all the

00:30:52.440 --> 00:30:54.440
namespaces and stuff like that.

00:30:54.440 --> 00:30:57.920
What we do is we give
you all the WSDL for you,

00:30:58.050 --> 00:31:00.910
and you don't have to do any of this.

00:31:02.120 --> 00:31:11.260
So hopefully that demonstrates just
how easy it is to build a web service.

00:31:11.260 --> 00:31:14.670
Are we having fun yet?

00:31:19.960 --> 00:31:26.320
So then outside of WebObjects,
Mac OS X and Mac OS X,

00:31:27.600 --> 00:31:33.000
So, we have a great web services
development environment because we

00:31:33.000 --> 00:31:34.500
bake it into the operating system.

00:31:34.500 --> 00:31:37.690
So, you have all of the
services from WebObjects,

00:31:37.890 --> 00:31:43.450
but then everywhere in Mac OS X,
either client or server, Apple events,

00:31:43.730 --> 00:31:48.670
there are OS-level services that
basically can turn that into

00:31:48.710 --> 00:31:51.710
SOAP or XML RPC and back and forth.

00:31:51.780 --> 00:31:54.960
And so, you can actually, we have tools.

00:31:55.500 --> 00:31:57.690
There's one called Make Stubs.

00:31:57.720 --> 00:32:01.880
You'll find on your regular
developer tool CD that if you

00:32:01.880 --> 00:32:06.220
give it a WSDL description file,
it will generate AppleScript, Java,

00:32:06.220 --> 00:32:10.350
it will generate AppleScript, Cocoa,
or C++ bindings to actually

00:32:10.350 --> 00:32:13.360
consume and produce,
to consume that web service.

00:32:13.360 --> 00:32:17.010
So, it makes it really easy to build an
end-to-end application because we've

00:32:17.010 --> 00:32:20.940
already baked in a lot of the client
stuff already into the operating system.

00:32:20.940 --> 00:32:21.760
The transport.

00:32:21.760 --> 00:32:26.000
The marshaling and
unmarshaling of data types.

00:32:26.020 --> 00:32:27.300
All that's already in the OS.

00:32:27.380 --> 00:32:29.640
So, it's really, it's really cool.

00:32:29.730 --> 00:32:31.190
So, we've got it in Cocoa.

00:32:31.200 --> 00:32:33.580
We've got it in AppleScript.

00:32:33.600 --> 00:32:34.420
It's in Perl.

00:32:34.550 --> 00:32:35.620
It's in WebObjects.

00:32:35.730 --> 00:32:39.100
And so,
we're a great platform for all of that.

00:32:39.130 --> 00:32:42.330
And then you can always take that
client and put the web services

00:32:42.660 --> 00:32:44.770
side on another client as well.

00:32:47.560 --> 00:32:52.730
Okay, and we also have the ability
to build desktop applications

00:32:52.730 --> 00:32:54.080
or rich client applications.

00:32:54.080 --> 00:33:00.400
So the Web Services Assistant that
you saw there is actually a

00:33:00.400 --> 00:33:05.560
WebObjects application that
was generated in Java Swing.

00:33:05.570 --> 00:33:08.560
So it's actually generating
that application that we

00:33:08.910 --> 00:33:12.340
were using to build the,
to actually configure the web service.

00:33:12.340 --> 00:33:16.770
When we hit the test button,
it actually figured out on the

00:33:16.930 --> 00:33:17.480
fly what the test button was.

00:33:17.500 --> 00:33:20.040
So we figured out what the test
parameters and response types

00:33:20.060 --> 00:33:22.940
were going to be and generated the
swing panel for that on the fly.

00:33:22.940 --> 00:33:26.540
We also have that technology
baked into ability to build

00:33:26.630 --> 00:33:30.770
rich desktop applications also
from a model-driven fashion.

00:33:30.770 --> 00:33:34.850
Again, Daryl, please.

00:33:38.200 --> 00:33:40.600
Let me put all this stuff up here.

00:33:40.930 --> 00:33:44.600
So what I'd like to show you is a
direct-to-Java client location and

00:33:44.600 --> 00:33:49.820
how we're taking the same real estate
model and then just reusing it again

00:33:49.820 --> 00:33:52.980
to create a desktop Java application.

00:33:53.680 --> 00:34:01.210
So let's select that template
and we'll just name this JC.

00:34:02.060 --> 00:34:07.880
Okay, we'll take the defaults again and
then just add our real estate model.

00:34:09.280 --> 00:34:12.980
And these are some
Java client specific things,

00:34:12.990 --> 00:34:15.660
whether you want to download
your classes or you can optimize

00:34:15.660 --> 00:34:17.040
that for your efficiency.

00:34:17.050 --> 00:34:20.070
And here's some stuff
for configuring WebStart.

00:34:20.270 --> 00:34:25.390
So let's just build and run that quickly.

00:34:27.340 --> 00:34:29.930
As you can see,
there's not much different in a

00:34:29.930 --> 00:34:33.310
direct-to-Java client project layout.

00:34:33.410 --> 00:34:35.330
I mean, we still have a certain
amount of Java classes.

00:34:35.330 --> 00:34:39.660
There is one Java client component
here that helps you configure some

00:34:39.660 --> 00:34:43.040
of the Java client parameters,
but essentially, you know,

00:34:43.160 --> 00:34:46.840
a lot of the stuff is in the same place,
and you have your model right there.

00:34:48.760 --> 00:34:50.740
So it launched right here.

00:34:50.760 --> 00:34:53.130
And as you can see,
we have a fully functional

00:34:53.130 --> 00:34:54.380
app out of the box.

00:34:54.620 --> 00:34:58.230
Let's just query on
something really quick.

00:34:58.640 --> 00:35:01.300
We'll do our San Jose query again.

00:35:01.350 --> 00:35:04.510
And boom, this is a different entity.

00:35:04.550 --> 00:35:07.840
But as you can see,
there's a bunch of addresses.

00:35:08.150 --> 00:35:12.310
If I double click on one of these rows,
we have a lot of detail

00:35:12.360 --> 00:35:13.470
that we can configure.

00:35:13.590 --> 00:35:14.550
We can delete rows.

00:35:14.560 --> 00:35:20.480
We can add new information and
make new relationships with that.

00:35:21.090 --> 00:35:22.660
So it doesn't just end here.

00:35:22.840 --> 00:35:24.830
You can start configuring your interface.

00:35:25.000 --> 00:35:31.660
And what we have is an assistant that you
can bring up and tell it how to present

00:35:31.700 --> 00:35:33.520
some of the data or what to present,
what not to present.

00:35:33.520 --> 00:35:39.290
So what I'd like to do is just take
away all of these entities that we

00:35:39.290 --> 00:35:45.510
were displaying earlier and just
have it show our listing address.

00:36:05.390 --> 00:36:05.390
Great thing about all our
rapid turnaround tools is

00:36:05.390 --> 00:36:05.390
I don't have to recompile,
I don't have to do anything.

00:36:05.390 --> 00:36:05.390
I just have to hit the restart
button in the assistant and boom,

00:36:05.390 --> 00:36:05.390
it updates the interface
and everything and boom,

00:36:05.390 --> 00:36:05.390
all I have is my listing address
and exactly how I wanted it.

00:36:05.390 --> 00:36:05.390
And I can search on San Jose and boom,
there we go.

00:36:05.940 --> 00:36:09.260
And if you can notice,
in all these demos,

00:36:09.260 --> 00:36:13.340
we've been using just one EO model,
and we've published to web service,

00:36:13.340 --> 00:36:16.130
an HTML client, and a Java client.

00:36:16.130 --> 00:36:20.610
So hopefully that shows you the
power of what our tools give you.

00:36:27.150 --> 00:36:27.490
Thank you, Darrell.

00:36:27.490 --> 00:36:30.840
So this is often the
way I'll work myself.

00:36:30.840 --> 00:36:33.740
I'll get in there,
go up to some data source called

00:36:33.800 --> 00:36:36.540
reverse engineer it with the old model,
and then I'll build a

00:36:36.580 --> 00:36:37.630
directed Java client.

00:36:37.630 --> 00:36:41.020
And that way I can go in there and
start adding test data or going through

00:36:41.020 --> 00:36:44.780
and chaining and browsing through
the sources and seeing what's there.

00:36:44.780 --> 00:36:46.240
It's just phenomenal.

00:36:46.240 --> 00:36:49.490
Just that aspect of it alone
is phenomenal for exploratory

00:36:49.490 --> 00:36:53.680
programming where you're going to
work with some existing data assets.

00:36:53.740 --> 00:36:58.510
It's also great for building a
little database administration

00:36:58.510 --> 00:37:00.600
tool just right out of the box.

00:37:00.670 --> 00:37:04.230
And with the box copy of WebObjects,
if you buy the retail box,

00:37:04.390 --> 00:37:06.360
there's a couple manuals
that come with it.

00:37:06.420 --> 00:37:10.050
One of them is a manual on
building the HTML applications,

00:37:10.050 --> 00:37:14.220
and one of them is a manual on
building the desktop Java applications.

00:37:14.220 --> 00:37:16.700
And I believe that'll
get you the hard copy,

00:37:16.700 --> 00:37:20.220
but I believe all that same
information is available in either

00:37:20.220 --> 00:37:22.090
HTML or PDF form on our website.

00:37:22.230 --> 00:37:25.740
There'll be a URL for that to
our reference library later.

00:37:57.580 --> 00:37:57.580
Okay.

00:37:57.580 --> 00:37:57.580
That's building it.

00:37:57.580 --> 00:37:57.580
Now we need to deploy it because
we want somebody else to use

00:37:57.580 --> 00:37:57.580
it except just ourselves,
although I could sometimes

00:37:57.580 --> 00:37:57.580
sit on my laptop and just look
at my beautiful application.

00:37:57.580 --> 00:37:57.580
But in the real world,
somebody else should use them.

00:37:57.580 --> 00:37:57.580
So we have two different main ways
of deploying WebObjects applications.

00:37:57.580 --> 00:37:57.580
And we have our own WebObjects
deployment frameworks.

00:37:57.580 --> 00:37:57.580
And then we also have the ability
of deploying it in a J2EE container.

00:37:57.580 --> 00:37:57.580
And you can take the same application,
package slightly different,

00:37:57.580 --> 00:37:57.580
and deploy it in a J2EE container.

00:37:57.600 --> 00:38:02.200
And you can deploy either with
our application frameworks and web

00:38:02.200 --> 00:38:06.470
application server or you can put it
on a standard J2EE application server.

00:38:06.580 --> 00:38:09.960
In the case of the standard
J2EE application server,

00:38:09.960 --> 00:38:11.780
we just appear as a fat servlet.

00:38:12.050 --> 00:38:16.600
So basically,
the request response loop comes in.

00:38:16.600 --> 00:38:17.680
It comes in through the servlet handler.

00:38:17.680 --> 00:38:20.300
The URL gets transferred to us.

00:38:20.300 --> 00:38:23.260
WebObjects stuff does what it would do.

00:38:23.260 --> 00:38:26.720
And then the results get
passed up back upstream.

00:38:26.720 --> 00:38:31.640
And then you have access to things
like JDI variables and data sources.

00:38:31.750 --> 00:38:36.350
Some of the application servers
that we support are Tomcat,

00:38:36.350 --> 00:38:40.230
JBoss, IBM,
and BEA's application servers.

00:38:40.230 --> 00:38:44.530
So you can basically take a WebObjects
application and you can actually

00:38:44.530 --> 00:38:48.490
have the developer tools that you
want but also live within any kind

00:38:48.560 --> 00:38:52.440
of a deployment infrastructure
that you may need to live in.

00:38:52.480 --> 00:38:55.240
Now the WebObjects deployment.

00:38:55.240 --> 00:38:55.840
Okay.

00:38:55.840 --> 00:39:00.380
So the WebObjects deployment is
a full-featured cross-platform

00:39:00.420 --> 00:39:02.890
pure Java application server.

00:39:03.000 --> 00:39:21.900
[Transcript missing]

00:39:22.940 --> 00:39:26.030
And then you also have some
configuration and some monitoring

00:39:26.310 --> 00:39:27.600
tools that come with it.

00:39:27.900 --> 00:39:30.970
And this is not like tiered
pricing or anything like that.

00:39:31.030 --> 00:39:33.430
This is just the way the product comes.

00:39:33.500 --> 00:39:42.700
[Transcript missing]

00:39:42.790 --> 00:40:05.410
It's just a pure Java application
and you can have your database,

00:40:05.410 --> 00:40:05.410
the WebObjects application,
and your web browser all

00:40:05.410 --> 00:40:05.410
running on the same box.

00:40:05.410 --> 00:40:05.410
And then if you need to scale it up,
what you can do is you can add more

00:40:05.410 --> 00:40:05.410
WebObjects instances on the same box.

00:40:05.410 --> 00:40:05.410
So you basically just run more processes,
run more JVMs, and handle more requests.

00:40:05.410 --> 00:40:05.410
Maybe add another data source.

00:40:06.240 --> 00:40:08.810
Then you can also scale,
usually what people might do is

00:40:08.810 --> 00:40:11.740
they might separate it and have
their web server on one machine,

00:40:11.740 --> 00:40:15.080
their database server on another machine,
and then have their application

00:40:15.080 --> 00:40:16.370
server on another machine,
right?

00:40:16.420 --> 00:40:18.810
So you might go with multiple boxes.

00:40:18.890 --> 00:40:21.500
And then you can actually stack
them up and then keep going.

00:40:21.500 --> 00:40:24.980
So we support a full clustered
environment of inexpensive units,

00:40:25.050 --> 00:40:27.300
you know, and do the scaling that way.

00:40:27.350 --> 00:40:30.430
And it's quite scalable and
we'll find out how later.

00:40:30.570 --> 00:40:35.980
So WebObjects in Apple, how do we use it?

00:40:36.650 --> 00:40:41.300
Just about any way that
money can come into Apple,

00:40:41.330 --> 00:40:44.500
it comes in, Java is involved.

00:40:44.560 --> 00:40:48.250
And some of that is simple things
like the point of sale systems.

00:40:48.260 --> 00:40:49.690
If you go to our retail stores,
there are actually

00:40:49.700 --> 00:40:51.160
Java apps running on a Mac.

00:40:51.330 --> 00:40:53.710
They're actually Java applications.

00:40:53.710 --> 00:40:56.910
But a lot of revenue comes
in through WebObjects.

00:40:57.920 --> 00:41:00.460
We use it in dozens of
internal applications,

00:41:00.490 --> 00:41:04.500
everything from finding our paycheck,
I think vacation stuff.

00:41:04.500 --> 00:41:09.430
We have it on some process management
or inventory management stuff.

00:41:09.550 --> 00:41:11.400
We've got bunches of
different departments,

00:41:11.440 --> 00:41:12.580
bunches of different people using it.

00:41:12.810 --> 00:41:15.300
And it's also used in all
of our Internet offerings.

00:41:15.300 --> 00:41:19.950
So it is used if you have a .Mac
account and you have the web mail.

00:41:19.950 --> 00:41:24.040
That is actually a WebObjects 5.2
application vending the HTML that's

00:41:24.040 --> 00:41:25.850
actually going into the mail.

00:41:25.860 --> 00:41:33.620
But a rather important application
that is using WebObjects

00:41:33.620 --> 00:41:37.550
is the iTunes Music Store.

00:41:37.550 --> 00:41:37.550
The iTunes Music Store.

00:41:39.370 --> 00:41:40.720
You may have heard of it.

00:41:40.740 --> 00:41:44.800
It's entirely WebObjects 5.2.

00:41:45.600 --> 00:41:49.840
and it is running on Panther and
it is running on XSERVs and the

00:41:49.840 --> 00:41:53.560
actual music data is on XRAID.

00:41:54.570 --> 00:41:57.860
We actually have one of the people
here who works on the software there,

00:41:57.860 --> 00:42:01.330
so maybe after the end of this session,
you have some questions on it.

00:42:01.410 --> 00:42:04.260
He may be able to talk
about proprietary stuff,

00:42:04.360 --> 00:42:07.140
but he could probably
talk about some of it.

00:42:07.340 --> 00:42:10.430
It's a really interesting design because,
in a way,

00:42:10.490 --> 00:42:14.800
it's kind of a web service application
and an interesting approach.

00:42:14.860 --> 00:42:18.030
It's using WebObjects
entirely on the back end,

00:42:18.090 --> 00:42:21.560
and then the client is,
there's a Mac native client,

00:42:21.560 --> 00:42:24.250
and we just pass XML across the wire.

00:42:24.500 --> 00:42:27.970
So it's like an HTTP direct action,
and then the response,

00:42:28.040 --> 00:42:31.320
instead of being HTTP, I mean HTML,
is actually XML.

00:42:31.320 --> 00:42:36.130
So it's a nice example of being able to
use Java on the back end of the server,

00:42:36.130 --> 00:42:39.790
where it's a natural fit,
where people like to use Java,

00:42:39.790 --> 00:42:45.060
a way to have a very clean, responsive,
well-integrated desktop application,

00:42:45.160 --> 00:42:48.590
use XML across the wire
for the data interchange,

00:42:48.590 --> 00:42:51.450
and then we were able to support
the Windows environment with a

00:42:51.480 --> 00:42:54.480
different native application,
but still talk to the same client.

00:42:54.500 --> 00:43:01.660
So it's a nice example of design, well,
besides being just an outstanding store.

00:43:01.660 --> 00:43:05.310
It is the number one music store,
online music store in the world,

00:43:05.310 --> 00:43:08.480
and there's a URL that should
have an article talking just a

00:43:08.490 --> 00:43:12.510
little bit of kind of a high-level
overview of just what's involved.

00:43:12.600 --> 00:43:18.780
I mean, the fact that it's XServe
and X-Ray and WebObjects.

00:43:19.760 --> 00:43:23.140
Now, how do you get WebObjects?

00:43:23.140 --> 00:43:25.150
There's a free trial version.

00:43:25.400 --> 00:43:30.910
So if you go to apple.com/webobjects,
there's a button there, Getting Started,

00:43:30.910 --> 00:43:34.310
and it will basically tell you how
to go find our ADC online site,

00:43:34.310 --> 00:43:37.210
and you need to get an
ADC online membership,

00:43:37.220 --> 00:43:38.580
but that's free.

00:43:38.580 --> 00:43:42.780
And then you go to the Download section,
and you can actually download a trial

00:43:42.780 --> 00:43:46.780
copy of WebObjects for Mac OS X,
and it's a real full running version.

00:43:46.780 --> 00:43:49.840
It's got every feature
that you've seen here,

00:43:49.840 --> 00:43:54.250
and you need to download
a 30-day license key.

00:43:54.720 --> 00:43:57.050
"But you can download it and try it.

00:43:57.050 --> 00:44:00.620
If you're running Panther,
which we hope you are,

00:44:00.890 --> 00:44:04.670
the download that's there right now,
we haven't updated it

00:44:04.670 --> 00:44:06.750
from the 5.2 version.

00:44:06.750 --> 00:44:10.450
So you'll want to hit the
software update button and get

00:44:10.450 --> 00:44:13.770
current to WebObjects 5.2.3."

00:44:14.000 --> 00:44:16.240
So when you get the download,
you also want to go through

00:44:16.240 --> 00:44:19.620
software update and you also
want to update to 5.2.3.

00:44:19.680 --> 00:44:21.900
That gives it basically
the Panther integration.

00:44:21.900 --> 00:44:26.140
So the current version
of WebObjects is 5.2.3.

00:44:26.140 --> 00:44:29.540
There was recently a software update.

00:44:29.540 --> 00:44:34.000
And that basically had some performance
and stability fixes and it also

00:44:34.000 --> 00:44:37.380
qualified WebObjects for Java 1.4.2.

00:44:39.310 --> 00:44:44.400
Now, all of this, unit pricing,
US anyway, is $699.

00:44:44.400 --> 00:44:48.020
We also have special
education pricing at $99,

00:44:48.020 --> 00:44:51.140
and I don't recall the
government pricing,

00:44:51.140 --> 00:44:53.390
but it's around $300, $400,
somewhere in there,

00:44:53.390 --> 00:44:55.940
and I'm sure an Apple rep or
somebody would be very happy

00:44:55.950 --> 00:44:57.580
to give you that information.

00:44:58.370 --> 00:45:03.660
And that includes both a developer
license and a deployment license.

00:45:03.660 --> 00:45:08.740
So you get basically one developer
seat and one deployment seat.

00:45:08.940 --> 00:45:12.960
And on that, on the box, again,
that's also 5.2, so you'll want to update

00:45:12.960 --> 00:45:14.320
via software update.

00:45:14.910 --> 00:45:17.850
Then for more information,
the main website to find out

00:45:17.850 --> 00:45:21.290
information on WebObjects is
apple.com slash webobjects.

00:45:24.000 --> 00:45:29.290
We also include the run times,
the deployment side on Mac OS X Server.

00:45:29.370 --> 00:45:31.750
I think if you get
Mac OS X Server right now,

00:45:31.760 --> 00:45:34.230
it's at 5.2.2 is the one that's built in.

00:45:34.400 --> 00:45:37.130
And so you need to get an upgrade there.

00:45:37.480 --> 00:45:40.230
And that brings you to 5.2.3.

00:45:40.240 --> 00:45:42.680
And then as a freebie,
we throw in a later version

00:45:42.710 --> 00:45:45.460
of JBoss and a later version
of Tomcat in there as well,

00:45:45.460 --> 00:45:48.360
because it's in the same
little application download.

00:45:48.360 --> 00:45:51.630
That's the, I think the application
servers update on that.

00:45:51.750 --> 00:45:55.780
And with XServe or with Mac OS X Server,
if you buy the retail box

00:45:55.780 --> 00:45:59.220
Mac OS X Server or if you buy an XServe,
you get an unlimited

00:45:59.590 --> 00:46:02.020
WebObjects deployment license.

00:46:02.020 --> 00:46:05.410
So if you buy an application
and your target deployment is

00:46:05.450 --> 00:46:08.500
going to be XServe or if you're
owing an application for XServe,

00:46:08.830 --> 00:46:11.300
there's no run time cost
associated with that at all.

00:46:11.300 --> 00:46:12.600
So that's nice.

00:46:12.600 --> 00:46:15.090
That saves you right there.

00:46:17.170 --> 00:46:20.430
I'm also very pleased to announce
that the WebObjects training

00:46:20.430 --> 00:46:22.860
materials have been updated.

00:46:22.860 --> 00:46:25.700
So they've been brought
current with WebObjects 5.2,

00:46:25.700 --> 00:46:29.420
and there are now classes scheduled.

00:46:29.420 --> 00:46:31.680
There have been a number of
tutorials that have been,

00:46:31.780 --> 00:46:34.390
or many courses that have been
offered here during this week.

00:46:35.220 --> 00:46:37.290
And the ones that were
formerly known as P1 is

00:46:37.480 --> 00:46:39.950
Internet Application Development Using
WebObjects.

00:46:39.950 --> 00:46:41.720
That's the introductory course.

00:46:41.720 --> 00:46:45.700
And then there's also the
Advanced WebObjects Development course.

00:46:45.700 --> 00:46:47.130
So that's very good.

00:46:47.200 --> 00:46:51.080
And you can find out about
that at train.apple.com.

00:46:53.060 --> 00:46:55.160
Hey, WebObjects community.

00:46:55.210 --> 00:46:58.600
One of the really exciting things
about WebObjects is the very

00:46:58.600 --> 00:47:01.940
vibrant community out there,
very active, very involved community.

00:47:01.940 --> 00:47:06.000
And there are a lot of things beyond
the WebObjects things that you get

00:47:06.000 --> 00:47:08.120
in the box that you have access to.

00:47:08.120 --> 00:47:12.040
So what I'd like to do is I'd like
to highlight a few of those things

00:47:12.360 --> 00:47:16.230
that have come from the community
that have actually enhanced,

00:47:16.230 --> 00:47:21.260
greatly enhanced the WebObjects
product and the WebObjects experience.

00:47:21.260 --> 00:47:25.450
Let me begin by saying,
sorry if I exclude anybody,

00:47:25.450 --> 00:47:29.840
there's like a large list of
people out there and there's a

00:47:29.840 --> 00:47:34.500
large number of different places
to find components for WebObjects

00:47:34.500 --> 00:47:36.600
and information about WebObjects.

00:47:36.600 --> 00:47:42.000
You could probably just go to, let's see,
you could probably just Google WebObjects

00:47:42.000 --> 00:47:45.440
and find a lot of those just
right off the top of Google.

00:47:45.650 --> 00:47:48.160
But I'll highlight a few right here.

00:47:48.620 --> 00:47:54.090
And one of the things that has
been asked about a lot is the

00:47:54.170 --> 00:47:57.130
ability to do cross-platform
development with WebObjects.

00:47:57.190 --> 00:48:03.440
So what I'm happy to introduce are
the folks here for Woe Project.

00:48:04.340 --> 00:48:07.580
Woe Project is basically
an Ant build system.

00:48:07.580 --> 00:48:12.680
Now, one of the things that's really
interesting about Ant is it's

00:48:12.800 --> 00:48:16.700
pretty much the Java de facto
standard now for building things.

00:48:16.700 --> 00:48:20.980
And one of the main reasons it's good
is it gives you IDE independence.

00:48:20.980 --> 00:48:24.960
So let me say a couple things about IDEs.

00:48:24.960 --> 00:48:31.790
Just about any IDE you can want for
Java development is available on the Mac.

00:48:31.950 --> 00:49:00.760
and Bob Fraser: And two,
by now I'm hoping everybody is

00:49:00.760 --> 00:49:00.760
aware that some nice features
have been added into Xcode,

00:49:00.760 --> 00:49:00.760
making it a better Java IDE,
namely code completion and

00:49:00.760 --> 00:49:00.760
some ant integration in Xcode.

00:49:00.760 --> 00:49:00.760
And if you'd like to see more
about using Xcode for just

00:49:00.760 --> 00:49:00.760
plain old Java development,
there's a session

00:49:00.760 --> 00:49:00.760
tomorrow morning at 9:00.

00:49:00.760 --> 00:49:00.760
I think it's Java development with Xcode.

00:49:00.760 --> 00:49:00.760
And you can see some of
those features there,

00:49:00.760 --> 00:49:00.760
Java code completion and some
of the ant integration there.

00:49:00.760 --> 00:49:00.760
So what we're going to
do is we're going to

00:49:00.940 --> 00:49:04.650
"The WebObject would be like one of
the places where that could tie in

00:49:04.710 --> 00:49:06.900
is with the Ant build system there.

00:49:07.050 --> 00:49:11.710
Another thing that you've been hearing
about at this conference is Eclipse.

00:49:11.710 --> 00:49:11.710
And

00:49:12.030 --> 00:49:17.440
With Eclipse, there is a plugin that is
available that lets you do

00:49:17.770 --> 00:49:22.360
WebObjects application development,
either on Windows or on the Mac,

00:49:22.360 --> 00:49:23.500
with Eclipse.

00:49:23.500 --> 00:49:30.200
And so now you've got a full Eclipse
plugin that goes in there with that IDE.

00:49:30.550 --> 00:49:32.900
is someone here from Project Wonder.

00:49:32.900 --> 00:49:36.380
And this is a collection of,
it's a vast collection of a lot of

00:49:36.680 --> 00:49:40.500
frameworks and tools that kind of
extend what you get with WebObjects.

00:49:40.730 --> 00:49:45.080
So I would like to begin by
introducing Andrzej Malczyk

00:49:45.440 --> 00:49:48.350
from ObjectStyle for WebObjects.

00:50:08.860 --> 00:50:12.190
I think the mic is off.

00:50:12.210 --> 00:50:12.680
OK.

00:50:12.940 --> 00:50:17.140
Our project is an app-based
build system for WebObjects.

00:50:18.250 --> 00:50:20.540
As we all know,
there are quite a few build

00:50:20.540 --> 00:50:22.420
systems that exist already.

00:50:22.420 --> 00:50:26.720
One is Make, which is a classic thing and
everybody knows about it.

00:50:26.720 --> 00:50:28.500
Not everybody likes it, though.

00:50:28.560 --> 00:50:33.520
The other one is CodeBuild,
which ships with Xcode.

00:50:33.520 --> 00:50:38.230
Actually,
that's what people use on Mac right now.

00:50:38.690 --> 00:50:53.270
We're introducing another build system,
which is a different standard now.

00:50:53.270 --> 00:50:53.270
It's called WAP.

00:50:54.330 --> 00:50:56.410
There's plenty of reasons.

00:50:56.620 --> 00:51:03.220
One that Bob just mentioned
is cross-platform development.

00:51:03.220 --> 00:51:03.220
Maybe it's not that, you know,

00:51:04.700 --> 00:51:11.200
[Transcript missing]

00:51:15.160 --> 00:51:21.760
and more employees are
coming to the event.

00:51:22.100 --> 00:51:30.750
You may want to employ on salary
or in less than a year or more.

00:51:36.330 --> 00:51:40.840
One of the very important benefits
of WebObjects and Ant in general

00:51:41.060 --> 00:51:47.110
platform is the freedom to

00:51:47.400 --> 00:52:14.900
[Transcript missing]

00:52:20.300 --> 00:52:31.700
[Transcript missing]

00:52:47.900 --> 00:52:59.900
[Transcript missing]

00:53:08.500 --> 00:53:17.600
[Transcript missing]

00:53:23.300 --> 00:53:28.120
WebObjects is a new platform for
web-based software development.

00:53:28.120 --> 00:53:28.480
It is a platform for

00:53:30.400 --> 00:53:38.700
[Transcript missing]

00:53:40.800 --> 00:53:49.300
[Transcript missing]

00:53:50.840 --> 00:53:59.970
is the founder of WebObjects.

00:53:59.970 --> 00:53:59.970
He is the founder of WebObjects.

00:53:59.970 --> 00:53:59.970
He is the founder of WebObjects.

00:54:08.700 --> 00:54:15.600
[Transcript missing]

00:54:15.910 --> 00:54:21.720
is a member of the WebObjects team.

00:54:21.720 --> 00:54:21.720
He will be sharing his
experience with us.

00:54:23.070 --> 00:54:26.400
and finally there's a little
thing that you can do to

00:54:26.450 --> 00:54:29.070
update your app called EOMoral.

00:54:33.300 --> 00:54:47.000
[Transcript missing]

00:54:50.930 --> 00:55:02.830
We got rid of Project File.

00:55:02.830 --> 00:55:02.830
Some tools still in use.

00:55:02.830 --> 00:55:02.830
There is Warbuilder that relies
on Project File on Windows.

00:55:04.800 --> 00:55:10.600
[Transcript missing]

00:55:11.700 --> 00:55:20.900
[Transcript missing]

00:55:21.970 --> 00:55:37.680
is the founder of WebObjects.

00:55:37.700 --> 00:55:37.700
He is the founder of WebObjects.

00:55:37.700 --> 00:55:37.700
He is the founder of WebObjects.

00:55:38.800 --> 00:55:49.700
[Transcript missing]

00:55:51.770 --> 00:55:57.690
and finally,
our project around the community.

00:55:57.700 --> 00:56:00.760
The website is www.op.com.au.

00:56:01.240 --> 00:56:04.380
Please ask questions.

00:56:04.580 --> 00:56:06.880
Thank you.

00:56:13.900 --> 00:56:23.000
[Transcript missing]

00:56:29.100 --> 00:56:40.470
Thank you Bob.

00:56:40.610 --> 00:56:40.610
Once again, I'm the project lead
of the Volelabs team.

00:56:40.610 --> 00:56:40.610
I'm here to talk, to give you an overview
of the WebObjects.

00:56:45.200 --> 00:56:53.600
[Transcript missing]

00:57:02.420 --> 00:57:08.110
is the head of the WebObjects team.

00:57:11.000 --> 00:57:20.990
takes it.

00:57:20.990 --> 00:57:21.810
Eclipse is a full feature of the Eclipse.

00:57:21.810 --> 00:57:21.810
The feature contains everything you need
to know about the state of the art IDE.

00:57:21.810 --> 00:57:21.810
Like an

00:57:22.220 --> 00:57:24.880
is the head of the
WebObjects team at Apple.

00:57:24.880 --> 00:57:27.920
He will be talking about the new
features of the WebObjects app.

00:57:29.500 --> 00:57:40.800
[Transcript missing]

00:57:43.470 --> 00:57:50.890
Since we have already a whole clip,
we can concentrate on Volip.

00:57:53.400 --> 00:58:05.300
[Transcript missing]

00:58:11.400 --> 00:58:19.300
[Transcript missing]

00:58:20.960 --> 00:58:22.240
and Emma Dollar included.

00:58:22.240 --> 00:58:26.270
As an example,
just double-click the component

00:58:27.100 --> 00:58:33.040
and you'll find the WebObjects.

00:58:39.740 --> 00:58:43.380
will talk about session handling and on.

00:58:43.380 --> 00:58:49.300
Set conditions for breakpoints,
replacement or change of values,

00:58:49.540 --> 00:58:50.960
and variables.

00:58:51.320 --> 00:58:56.460
Steve Imposible, Mutibar Communications,
running on a different machine.

00:58:56.460 --> 00:58:58.080
Turnaround is the next episode.

00:59:00.910 --> 00:59:03.440
and find more information
about Eclipse and web-based

00:59:03.880 --> 00:59:05.170
software for your home page.

00:59:08.290 --> 00:59:11.620
covers installation of VOLIPS and
integration integration with

00:59:11.940 --> 00:59:14.900
the Eclipse Help System.

00:59:15.650 --> 00:59:16.690
To provide feedback

00:59:21.200 --> 00:59:36.700
[Transcript missing]

00:59:43.400 --> 00:59:50.000
[Transcript missing]

00:59:50.100 --> 01:00:06.800
[Transcript missing]

01:00:08.000 --> 01:00:17.800
[Transcript missing]

01:00:18.500 --> 01:00:23.800
[Transcript missing]

01:00:25.290 --> 01:00:29.240
I'd also like to introduce
Max Muller for Project Wonder,

01:00:29.240 --> 01:00:32.810
because there's a whole world of other
things that can be added in as well.

01:00:39.500 --> 01:00:41.580
Hello.

01:00:41.810 --> 01:00:43.340
My name is Matt Mueller.

01:00:43.450 --> 01:00:46.700
Currently I'm one of the lead
engineers for the iTunes Music Store,

01:00:46.820 --> 01:00:54.260
but also one of the founders of... So,
let's see.

01:00:56.830 --> 01:01:01.290
Project Wonder was born actually
with the death of a .NET,

01:01:01.310 --> 01:01:04.890
a number of engineers who
actually now work at Apple.

01:01:05.120 --> 01:01:08.720
We built a number of
frameworks specializing in

01:01:08.720 --> 01:01:11.060
rapid application development.

01:01:12.220 --> 01:01:18.010
... as well as just a number of
nice ... to EOF and Foundation ...

01:01:18.010 --> 01:01:20.220
frameworks and a lot of ...

01:01:21.200 --> 01:01:27.800
[Transcript missing]

01:01:27.940 --> 01:01:37.370
: We've seeded the frameworks
to Project Founder 2.0.

01:01:38.300 --> 01:01:44.400
[Transcript missing]

01:01:44.700 --> 01:01:51.200
[Transcript missing]

01:01:53.100 --> 01:02:01.100
[Transcript missing]

01:02:01.950 --> 01:02:05.700
It's mainly just a nice collection
point for a lot of open source projects.

01:02:05.700 --> 01:02:11.300
Everything from SVG generation,
that Anjo just committed in,

01:02:11.300 --> 01:02:13.550
Excel generations.

01:02:13.590 --> 01:02:16.770
I have actually WoE components
that represent a bunch of

01:02:17.110 --> 01:02:19.500
Excel sheets and tables.

01:02:19.500 --> 01:02:24.060
But it's still using WebObjects
Builder and you're just able to

01:02:24.100 --> 01:02:28.130
kind of build Excel spreadsheets,
but integrate it in

01:02:28.130 --> 01:02:30.300
with all the EF backend.

01:02:30.300 --> 01:02:34.890
So, it's just a bunch of kind of
nice frameworks written by...

01:02:36.400 --> 01:02:41.140
: I'm a developer who knows
a lot about the technology,

01:02:41.380 --> 01:02:44.200
so it also serves as a very
nice reference point for

01:02:44.400 --> 01:02:47.840
how would I actually get in,
say, a template parser if I wanted

01:02:47.840 --> 01:02:55.060
to change the of a WAD binding,
or some arcane knowledge like that,

01:02:55.060 --> 01:02:59.490
and it serves as a good reference point.

01:02:59.490 --> 01:03:01.380
Let's see.

01:03:05.690 --> 01:03:08.290
We're here to give you a few highlights
of some of the stuff that's found in

01:03:08.330 --> 01:03:11.000
some of the frameworks of Project Wonder.

01:03:11.000 --> 01:03:14.400
So one of the nice things is
we have a fairly international

01:03:14.400 --> 01:03:16.140
group on Project Wonder.

01:03:16.140 --> 01:03:19.140
So they've added in kind of
automatic localization support,

01:03:19.140 --> 01:03:21.540
so all the Japanese encoding
has taken place.

01:03:21.540 --> 01:03:27.830
And it kind of adds support
for all the other encodings

01:03:27.830 --> 01:03:32.080
that you'd want and automatic
localization on the way in and out.

01:03:32.860 --> 01:03:35.710
Oftentimes you have to worry about
making sure that you're parsing

01:03:35.710 --> 01:03:38.380
in the headers for the languages
and kind of getting that correct

01:03:38.380 --> 01:03:39.510
on the way in and the way out.

01:03:39.640 --> 01:03:42.750
So there's been a lot
of work done into that,

01:03:42.750 --> 01:03:47.640
as well as localization down into
the validation messages that pop

01:03:47.640 --> 01:03:51.090
up when you forgot to put this
into your model kind of thing.

01:03:54.740 --> 01:03:57.820
Another focus has been the rapid
application development process

01:03:57.940 --> 01:04:00.020
and taking that one step further.

01:04:00.050 --> 01:04:03.510
The configuration management tools
have really helped in the sense

01:04:03.530 --> 01:04:07.830
that you can now reload all of
your property files automatically.

01:04:07.830 --> 01:04:12.020
You can turn SQL debugging on and off.

01:04:12.020 --> 01:04:15.000
You can even change -- we use
log4j throughout the project,

01:04:15.040 --> 01:04:19.720
so you can even go in and actually
change the log4j patterns that you're

01:04:19.720 --> 01:04:22.540
printing out on the log statements.

01:04:22.540 --> 01:04:26.330
And being one of the people who
has to go in and track down a

01:04:26.330 --> 01:04:30.070
bunch of really strange behavior
that goes on at the music store,

01:04:30.070 --> 01:04:32.810
being able to go in and get a
backtrace in all of a sudden on

01:04:32.810 --> 01:04:35.780
some very strange occurring log,
and then being able to look in the

01:04:35.780 --> 01:04:39.280
log files and see that start to come
up and exactly what's triggering it,

01:04:39.280 --> 01:04:42.320
as well as, say,
the entire request with all the

01:04:42.380 --> 01:04:45.380
request values is incredibly helpful.

01:04:45.380 --> 01:04:50.180
So it's definitely saved me some time.

01:05:07.210 --> 01:05:20.850
So within the direct-to-web stuff,
there's probably about two years

01:05:20.860 --> 01:05:26.760
of very advanced development that's
gone on around kind of an overhaul

01:05:26.760 --> 01:05:29.630
of a lot of the rule caching systems.

01:05:29.630 --> 01:05:36.120
There's over 200 more components that
are useful for doing all sorts of crazy

01:05:36.690 --> 01:05:42.360
direct-to-web things in the context
of the rapid application development.

01:05:42.380 --> 01:05:45.340
So there's a whole
wealth of things there.

01:05:45.340 --> 01:05:49.900
And yeah, I mean, just really,
it's just a lot of --

01:05:49.900 --> 01:05:52.690
within the base frameworks,
there's just a lot of really nice

01:05:52.860 --> 01:05:56.420
reusable components that shows
how to do fun stuff with the HTML,

01:05:56.420 --> 01:05:58.480
fun stuff with JavaScript.

01:05:58.480 --> 01:06:01.740
Pretty much kind of all the things that
you think of when you're developing,

01:06:01.820 --> 01:06:04.900
but these are, again,
kind of specialty components

01:06:04.900 --> 01:06:10.560
that you don't run into
every day or need every day.

01:06:12.050 --> 01:06:18.340
So actually announcing
today is the Wonder 2.0.

01:06:18.340 --> 01:06:23.770
It's been a long time coming.

01:06:26.200 --> 01:06:31.140
I have been stuck in the 1.0
branch forever and getting sick

01:06:31.140 --> 01:06:32.950
of maintaining that branch.

01:06:32.960 --> 01:06:36.960
Now we are jumping to the 2.0 branch.

01:06:36.960 --> 01:06:42.880
Wonder has Eclipse support
using WoeLips and WoeProject.

01:06:42.880 --> 01:06:47.420
The whole thing builds with Ant and
works out of the box with Eclipse.

01:06:47.420 --> 01:06:48.710
We are finally getting Xcode support in.

01:06:48.710 --> 01:06:52.960
We have been dragging
our feet on that one.

01:06:52.960 --> 01:06:57.420
Most of the projects should
have Xcode projects now as well.

01:06:57.420 --> 01:06:59.860
We are at wonder.sourceforge.net.

01:06:59.860 --> 01:07:07.950
We have a fairly active CVS list as
well as an active discussion list.

01:07:08.000 --> 01:07:09.040
Check us out.

01:07:17.200 --> 01:07:22.900
[Transcript missing]

01:07:26.900 --> 01:07:30.960
So that gives you some highlights of the,
you know,

01:07:30.960 --> 01:07:33.120
all the different things that are
out there that are beyond just

01:07:33.210 --> 01:07:34.980
what Apple does with WebObjects.

01:07:35.000 --> 01:07:40.850
So to send feedback or contact us,
there's WebObjects at Apple.com,

01:07:40.860 --> 01:07:43.860
and that goes to more than just me.

01:07:43.880 --> 01:07:45.300
There's other people
who see that as well.

01:07:45.300 --> 01:07:46.700
That's a good way to give feedback.

01:07:47.250 --> 01:07:51.220
Another thing that's very important,
if you find reproducible bugs,

01:07:51.220 --> 01:07:54.430
then definitely file bugs,
and hopefully can provide

01:07:54.580 --> 01:07:57.930
detailed information or test
cases or something like that.

01:07:57.990 --> 01:07:58.880
That's always really helpful.

01:08:00.690 --> 01:08:04.650
And for more information,
there's the apple.com WebObjects site.

01:08:04.780 --> 01:08:06.900
There's also the WebObjects
reference library,

01:08:06.900 --> 01:08:07.640
which is available.

01:08:07.640 --> 01:08:11.690
You can either just go through
developer.apple.com and

01:08:11.700 --> 01:08:13.740
just hit reference library
and look for WebObjects,

01:08:13.790 --> 01:08:15.000
or here's the specific URL.

01:08:15.000 --> 01:08:17.240
And this,
the reference library has been updated

01:08:17.340 --> 01:08:18.820
and contains a wealth of stuff.

01:08:18.890 --> 01:08:20.900
It's got,
now it's got an easy way to find

01:08:20.900 --> 01:08:24.570
everything from reference APIs to
documentation to tech notes to Q&As.

01:08:24.660 --> 01:08:27.230
It's all like easily
navigable from one place.