WEBVTT

00:00:14.060 --> 00:00:17.750
Okay, hello everyone and welcome
to Enterprise IT State of

00:00:17.750 --> 00:00:21.170
the Union at WWDC for 2004.

00:00:21.530 --> 00:00:22.340
I'm Bud Tribble.

00:00:22.340 --> 00:00:26.090
I'm Vice President of
Software Technology for Apple.

00:00:27.160 --> 00:00:32.410
And about one year ago,
I stood up here and I talked

00:00:32.410 --> 00:00:35.000
about Apple's approach
to the enterprise market.

00:00:35.000 --> 00:00:38.430
And we've had a very exciting year.

00:00:38.850 --> 00:00:43.400
Lots of products introduced,
lots of new partners, lots of solutions.

00:00:43.400 --> 00:00:47.080
And I'd like to start out by
sharing that with some of you.

00:00:47.660 --> 00:00:52.640
Now, Apple's approach to the enterprise
is actually very simple.

00:00:52.640 --> 00:00:55.490
We start with an open standards approach.

00:00:55.490 --> 00:00:57.640
We leverage open source software.

00:00:57.640 --> 00:01:02.090
But Apple integrates it
to make it easy to use.

00:01:02.150 --> 00:01:07.630
The result is the power of Unix,
but the simplicity of a Mac.

00:01:08.310 --> 00:01:11.840
Now, a perfect example of
that is Mac OS X Server.

00:01:11.840 --> 00:01:14.880
This is the Panther server
I'm talking about right now.

00:01:14.930 --> 00:01:17.250
It's open source made easy.

00:01:18.000 --> 00:01:19.600
It epitomizes our approach.

00:01:19.600 --> 00:01:23.350
Again,
industry standards like BSD and open

00:01:23.450 --> 00:01:27.270
source implementation like Darwin,
which is an open source

00:01:27.300 --> 00:01:31.470
implementation of BSD plus Mach,
additional open source

00:01:31.470 --> 00:01:33.520
integrated in by Apple.

00:01:33.520 --> 00:01:37.700
What that does is it lets
Apple focus all of our efforts and

00:01:37.710 --> 00:01:42.500
our innovation on integration to
make Mac OS X server easy to use,

00:01:42.500 --> 00:01:47.090
easy to deploy, easy to manage,
and easy to develop for.

00:01:48.830 --> 00:01:53.500
Now, we don't just integrate a
few open source projects.

00:01:53.590 --> 00:01:58.070
We integrate in Panther over
80 open source projects,

00:01:58.070 --> 00:02:03.500
things like Apache, Tomcat, MySQL, JBoss,
et cetera, et cetera.

00:02:03.500 --> 00:02:07.530
Now, these are things that on other
systems you would spend a lot

00:02:07.660 --> 00:02:11.100
of time downloading packages,
getting the packages installed.

00:02:11.100 --> 00:02:15.300
We integrate it together to the point
where to get a mail service running,

00:02:15.300 --> 00:02:17.500
it's a single click of a checkbox.

00:02:18.180 --> 00:02:19.530
That's Apple's added value.

00:02:19.730 --> 00:02:24.520
So, ease of use, ease of deployment,
ease of management.

00:02:24.620 --> 00:02:29.460
Now, just simple example of this,
let's take a look at our mail server.

00:02:30.510 --> 00:02:36.360
On the server side, we integrate PostVix,
which is an open source SMTP server,

00:02:36.360 --> 00:02:41.110
Cyrus, which is an IMAP server,
and a Berkeley DB backend

00:02:41.110 --> 00:02:43.050
for the mail indexes.

00:02:43.080 --> 00:02:45.040
We don't stop there.

00:02:45.040 --> 00:02:49.480
We also integrate ScrollMail,
which is a web mail interface

00:02:49.480 --> 00:02:53.060
that's based on PHP,
so we integrate PHP as well.

00:02:53.060 --> 00:02:56.990
We integrate Mailman for a list server,
which is built on Python,

00:02:56.990 --> 00:02:59.080
so we integrate Python as well.

00:02:59.930 --> 00:03:00.800
And we don't stop there.

00:03:00.800 --> 00:03:04.720
For security,
we provide OpenSSL so that you can

00:03:04.870 --> 00:03:07.830
have SSL authentication for IMAP.

00:03:07.840 --> 00:03:13.040
We integrate OpenLDAP so you can have
LDAP authorization for your mail.

00:03:13.040 --> 00:03:16.960
All of this is packaged in such
a way that for the sysadmin,

00:03:16.960 --> 00:03:19.690
again,
a single check of a checkbox turns all

00:03:19.690 --> 00:03:21.840
this on and it runs right out of the box.

00:03:23.920 --> 00:03:26.800
Now, I want to take a moment to
just focus on that last issue,

00:03:26.900 --> 00:03:30.590
security,
because in our role as integrating

00:03:30.590 --> 00:03:36.910
all of this open source functionality,
we pay a lot of attention to security.

00:03:37.510 --> 00:03:40.200
At the Core OS level,
we're doing a lot of things.

00:03:40.200 --> 00:03:45.130
We're taking our complete package and
we're doing what's called Common Criteria

00:03:45.130 --> 00:03:47.240
Certification at EAL Level 3.

00:03:47.240 --> 00:03:53.970
This is a government program sponsored
by NIST to make sure that kind of

00:03:54.120 --> 00:03:58.430
all your T's are crossed and your
I's are dotted in terms of security,

00:03:58.830 --> 00:04:02.820
and is actually a requirement for selling
into many government accounts these days.

00:04:02.820 --> 00:04:08.180
For data security,
we provide full 128-bit AES encryption.

00:04:08.190 --> 00:04:15.080
We also implement secure delete,
including the secure delete

00:04:15.190 --> 00:04:18.480
that supposedly the NSA can't
recover your bits off the disk.

00:04:18.550 --> 00:04:20.970
I think we write it 21 times
or something like that.

00:04:20.990 --> 00:04:25.980
Network transport security layer,
mail services available

00:04:26.020 --> 00:04:30.390
through SSL version 3,
single sign-on with Kerberos,

00:04:30.400 --> 00:04:33.010
a whole variety of security features.

00:04:33.010 --> 00:04:36.150
But equally important,
what we do over time is,

00:04:36.150 --> 00:04:39.180
as the open source
community uncovers issues,

00:04:39.240 --> 00:04:42.880
their security issues,
we put those patches together,

00:04:42.890 --> 00:04:46.370
package them up as updates,
and get them out to you.

00:04:46.700 --> 00:04:48.330
And we hope a timely manner.

00:04:48.330 --> 00:04:51.830
We think we're actually getting
reasonably good at this.

00:04:51.830 --> 00:04:55.050
And one of the beauties of
open source is that the moment

00:04:55.050 --> 00:04:59.600
someone reports a security issue,
they also tend to show up with the patch.

00:04:59.780 --> 00:05:03.880
So there's not a huge lag there
for us to get those out to people.

00:05:03.880 --> 00:05:06.120
And of course,
we have client security as well

00:05:06.120 --> 00:05:09.720
that plugs right into the services
that are provided by the servers.

00:05:09.910 --> 00:05:15.520
So virtual private networks, VPNs,
FileVault, which I like,

00:05:15.530 --> 00:05:17.950
you can actually encrypt
your home directory,

00:05:18.110 --> 00:05:21.300
provide physical security in
case you lose your laptop,

00:05:21.560 --> 00:05:28.240
authentication with Kerberos again,
and secure remote administration via SSL.

00:05:28.370 --> 00:05:31.350
Now,
I'd like to just take a few minutes and

00:05:31.350 --> 00:05:34.120
go over the last year or so in review.

00:05:34.120 --> 00:05:37.210
Take a look at what's been
happening in the enterprise space,

00:05:37.220 --> 00:05:38.580
and a lot's been happening.

00:05:38.580 --> 00:05:43.350
We've really had a blazing pace of
innovation with enterprise products.

00:05:43.420 --> 00:05:48.680
And start out with, in February of 2003,
a little over a year ago,

00:05:48.680 --> 00:05:50.760
we introduced XServeRay.

00:05:50.760 --> 00:05:54.940
Now, as you may have heard about,
this was a breakthrough product

00:05:55.020 --> 00:05:58.280
in terms of price per gigabyte,
about $3 a gigabyte.

00:05:58.300 --> 00:06:01.880
Which, compared to other storage
solutions out there,

00:06:01.950 --> 00:06:04.010
pretty much blows them away.

00:06:04.020 --> 00:06:07.620
Greatly appreciated by our
multimedia customers who are

00:06:07.620 --> 00:06:09.640
generating huge amounts of data.

00:06:09.640 --> 00:06:13.290
But IT in general,
as I'll get into further on in the talk,

00:06:13.380 --> 00:06:16.780
storage is a very important
part of any solution.

00:06:16.780 --> 00:06:19.460
XServeRay is an excellent part of that.

00:06:19.480 --> 00:06:26.220
October, we introduced Panther Server,
Mac OS X Panther Server, automatic setup,

00:06:26.220 --> 00:06:28.280
server admin, open directory 2.

00:06:28.330 --> 00:06:30.860
Mac OS X Server 2 was introduced,
Samba 3.

00:06:30.860 --> 00:06:33.220
We included Postfix
Mail with that release,

00:06:33.220 --> 00:06:34.340
as well as JBoss.

00:06:34.420 --> 00:06:38.180
A lot of features,
a lot of open source integration.

00:06:38.530 --> 00:06:44.720
January 2005, XSERV G5,
so dual gigabit G5s,

00:06:44.820 --> 00:06:50.130
or two gigahertz G5s,
dual gigabit Ethernet,

00:06:50.420 --> 00:06:57.580
three serial ATA hot plug drives,
really a dynamite one-use server,

00:06:57.580 --> 00:07:03.020
which has been really snapped up by
many of our customers in the IT space,

00:07:03.020 --> 00:07:07.180
as well as I'll talk about a
little bit in the scientific

00:07:07.230 --> 00:07:08.380
computing and cluster space.

00:07:08.400 --> 00:07:10.010
space.

00:07:10.300 --> 00:07:13.830
Now, April 2004, we introduced XSAN.

00:07:13.830 --> 00:07:18.610
And it's our storage area
network solution for Mac OS X.

00:07:18.770 --> 00:07:20.030
Very important to us.

00:07:20.110 --> 00:07:23.340
It's a full 64-bit storage area solution.

00:07:23.340 --> 00:07:25.970
You can store terabytes of data online.

00:07:25.970 --> 00:07:30.320
Hooks right into XSERV,
so you get good cost per gigabyte.

00:07:30.320 --> 00:07:32.310
Very high performance.

00:07:32.330 --> 00:07:35.800
Multiple clients sharing a single volume.

00:07:36.580 --> 00:07:40.160
Gives you shared fiber channel
storage to the clients.

00:07:40.160 --> 00:07:42.720
Failover, multi-pathing, automatic.

00:07:43.180 --> 00:07:47.120
Volume management built in,
so that you don't have to, you know,

00:07:47.120 --> 00:07:50.600
move lots of data around
to manage your volumes.

00:07:50.600 --> 00:07:56.100
And interoperability with ADEX products,
so that you can interoperate

00:07:56.100 --> 00:08:00.200
with storage on Mac,
Windows, Linux, and Unix.

00:08:00.200 --> 00:08:01.830
A great product.

00:08:02.960 --> 00:08:07.080
Excellent for anybody who has to
move around large amounts of data.

00:08:07.080 --> 00:08:10.260
That includes multimedia
and multimedia pros,

00:08:10.260 --> 00:08:11.940
but also IT in general.

00:08:13.270 --> 00:08:19.160
Then finally, June, just recently,
introducing Apple Remote Desktop 2.

00:08:19.160 --> 00:08:21.160
And that's desktop management made easy.

00:08:21.160 --> 00:08:25.190
Anybody who has a lot of clients
or even a few clients to manage

00:08:25.200 --> 00:08:27.320
needs Apple Remote Desktop.

00:08:27.320 --> 00:08:31.250
Apple Remote Desktop gives you
remote software distribution,

00:08:31.250 --> 00:08:34.720
so remotely installed packages,
the ability to do

00:08:34.720 --> 00:08:36.980
remote asset management.

00:08:37.160 --> 00:08:40.660
So there's seven predefined
reports that will give you reports

00:08:40.660 --> 00:08:44.670
with over 200 attributes of
what is configured in each client.

00:08:44.700 --> 00:08:49.160
Remote administration with the ability
to run remote Unix scripts on the client.

00:08:49.160 --> 00:08:52.750
And finally,
remote assistance based on VNC so

00:08:52.770 --> 00:08:57.820
that you can actually give remote
assistance to someone running by

00:08:57.820 --> 00:09:01.820
moving the mouse and essentially
taking over control of their system.

00:09:01.820 --> 00:09:03.150
A great help desk application.

00:09:03.160 --> 00:09:07.140
So again, anybody managing any
number of Mac clients.

00:09:07.140 --> 00:09:09.030
It all really needs remote desktop.

00:09:09.040 --> 00:09:13.150
Best of all, these last two products,
which have been announced

00:09:13.150 --> 00:09:17.060
but aren't shipping yet,
Apple Remote Desktop 2 and XSAN are

00:09:17.090 --> 00:09:19.510
included in your developer pack.

00:09:19.560 --> 00:09:22.360
So you get preview releases of this.

00:09:22.440 --> 00:09:24.600
And I encourage you to
play around with them,

00:09:24.600 --> 00:09:27.380
take a look at their features,
see how they might interact

00:09:27.380 --> 00:09:28.680
with your own products.

00:09:30.280 --> 00:09:34.870
So past year or so,
blazing pace of innovation

00:09:34.870 --> 00:09:37.710
in the enterprise space.

00:09:37.710 --> 00:09:44.820
I think that's reflected in the
interest we're seeing in this room.

00:09:44.950 --> 00:09:49.290
I see we have an overflow crowd here,
lots of people standing in the back.

00:09:49.290 --> 00:09:49.290
I sort of apologize,
but hopefully we'll make

00:09:49.290 --> 00:09:49.290
it worth your while.

00:09:50.050 --> 00:09:52.840
Just a moment I'd like to take
to talk about one thing that

00:09:52.840 --> 00:09:54.800
we don't often talk about.

00:09:54.800 --> 00:09:56.820
And that is,
when you go to actually price

00:09:56.970 --> 00:10:00.020
our products and look at the
performance and the features,

00:10:00.140 --> 00:10:03.060
you find out that we're a lot
more price competitive and

00:10:03.060 --> 00:10:05.050
often beat out the competitors.

00:10:05.050 --> 00:10:08.180
That's not something people
normally associate with Apple,

00:10:08.180 --> 00:10:11.020
but in the enterprise space, believe me,
it's true.

00:10:11.510 --> 00:10:16.450
So for example, Mac OS X Server, $999.

00:10:16.550 --> 00:10:20.170
And that's an unlimited client license,
so there's no per client tax.

00:10:20.230 --> 00:10:21.620
That's a big deal.

00:10:21.620 --> 00:10:24.730
XServe G5, $2999.

00:10:24.730 --> 00:10:32.610
That's a breakthrough price for a one-use
server with that kind of performance.

00:10:33.690 --> 00:10:36.280
Fibre Channel PCI, $499.

00:10:36.320 --> 00:10:39.240
Remember when just the cables were $499?

00:10:39.240 --> 00:10:41.900
This is a great product at a great price.

00:10:41.950 --> 00:10:45.010
XServe RAID, $10,999.

00:10:45.300 --> 00:10:50.300
That works out to about $3 per gigabyte,
as I mentioned.

00:10:50.400 --> 00:10:51.040
Great price.

00:10:52.690 --> 00:10:54.330
And then finally, XSAN,
and you're not going

00:10:54.400 --> 00:10:58.960
to beat this anywhere,
has full storage area network for $999

00:10:59.130 --> 00:11:03.220
per node with no cap on storage size.

00:11:03.310 --> 00:11:05.840
So go price that out with other vendors.

00:11:05.840 --> 00:11:07.320
You're going to be very
surprised about that.

00:11:07.320 --> 00:11:11.750
So not something we talk about a lot,
but in the enterprise space,

00:11:11.750 --> 00:11:13.750
we're often the price leader.

00:11:13.870 --> 00:11:16.720
And that's really worth thinking about.

00:11:17.280 --> 00:11:21.840
Now I'd like to just take a
few minutes to talk about,

00:11:21.850 --> 00:11:26.280
in addition to our products,
a couple of emerging trends that

00:11:26.280 --> 00:11:30.130
we're seeing in the enterprise space
and in the industry in general.

00:11:30.140 --> 00:11:33.850
The first one will be no surprise,
and that's enterprise storage.

00:11:33.880 --> 00:11:38.830
So the needs for enterprise storage
are literally going through the roof.

00:11:38.860 --> 00:11:43.940
Here's a graph just looking at
the needs in kind of thousands

00:11:43.940 --> 00:11:48.170
of petabytes or petabytes,
the needs for storage based

00:11:48.170 --> 00:11:50.600
on regulatory compliance.

00:11:50.600 --> 00:11:53.760
And I don't know if you think
regulatory compliance is good or bad,

00:11:53.760 --> 00:11:56.740
but it's here to stay,
and it's driving storage needs.

00:11:56.790 --> 00:12:00.560
Whether you're an enterprise, a school,
a hospital, a medical establishment,

00:12:00.560 --> 00:12:02.690
your needs are going through the roof.

00:12:02.740 --> 00:12:05.340
64% compound annual growth.

00:12:05.420 --> 00:12:08.860
Another aspect of the storage
needs is the need for storage.

00:12:08.870 --> 00:12:11.180
And one of the reasons for
the storage explosion is,

00:12:11.180 --> 00:12:13.320
of course, digital content, multimedia.

00:12:13.380 --> 00:12:18.590
And here's an example of some of the
data rates that need to be supported,

00:12:18.590 --> 00:12:26.940
and that leads directly to data size for
things like 1080i interlaced full HD,

00:12:27.060 --> 00:12:30.250
165 megabytes per second.

00:12:30.320 --> 00:12:32.970
And for those of you
who are doing the math,

00:12:33.050 --> 00:12:36.920
that's about -- so you're using -- if
you're storing that to an XServe rate,

00:12:36.920 --> 00:12:38.820
you're using about five cents of storage.

00:12:38.820 --> 00:12:42.170
And you're using about five
cents of storage per second,

00:12:42.170 --> 00:12:44.170
or about $180 per hour.

00:12:44.400 --> 00:12:46.930
So you'll fill up your
XSERV rate pretty quickly,

00:12:47.010 --> 00:12:51.300
and it means that enterprises are
buying storage by the boatload.

00:12:51.320 --> 00:12:54.700
And we don't see this
trend slowing down at all.

00:12:55.210 --> 00:13:01.950
Once you get to or below $3 per gigabyte,
it sort of changes the equation

00:13:02.010 --> 00:13:03.560
in terms of backup strategies.

00:13:03.560 --> 00:13:09.000
And the trend we're seeing emerge is
disk-to-disk-to-tape backup strategy.

00:13:09.000 --> 00:13:15.260
In other words, live storage on disk,
you take an online backup to

00:13:15.260 --> 00:13:20.490
a second set of disk drives,
and then for archival storage,

00:13:20.500 --> 00:13:22.980
you finally start a tape at some rate.

00:13:23.500 --> 00:13:25.570
And that leads to a strategy like this.

00:13:25.570 --> 00:13:29.830
Again, backup clients on the network,
the systems that are being backed up,

00:13:30.270 --> 00:13:34.400
backup server managing the whole process,
backing up to an XServe RAID,

00:13:34.400 --> 00:13:38.220
which is online storage backup,
and then finally over fiber

00:13:38.220 --> 00:13:43.360
channel to a tape library where you
finally do your archival storage.

00:13:43.400 --> 00:13:48.330
And Apple solutions in this space
work very well and work very well

00:13:48.450 --> 00:13:51.900
with existing industry solutions
out there like Legato or Veritas.

00:13:51.900 --> 00:13:57.400
And just an example of this, Citel.

00:13:57.400 --> 00:14:01.800
Citel is a leading provider of seismic
data to the petroleum industry.

00:14:01.800 --> 00:14:03.700
They have over one petabyte of data.

00:14:03.700 --> 00:14:07.800
It's one of the largest databases
of this type in North America.

00:14:07.840 --> 00:14:11.570
And what they've done is they've
converted from tape storage for

00:14:11.670 --> 00:14:15.090
their backup to XServe RAID for
their backup so they can have

00:14:15.090 --> 00:14:17.290
all of their backup data online.

00:14:17.400 --> 00:14:20.290
So far, they've installed 10
XServe RAIDs in 2003.

00:14:20.300 --> 00:14:24.280
They're adding another 60
terabytes of storage this year.

00:14:24.300 --> 00:14:27.300
And Chris Hansen from Citel says this.

00:14:27.300 --> 00:14:30.020
"Compared to the storage
systems we used before,

00:14:30.020 --> 00:14:33.300
XServe RAID costs about 10
times less per terabyte.

00:14:33.300 --> 00:14:36.750
XServe RAID makes having seismic
data online and ready to copy

00:14:36.850 --> 00:14:41.120
substantially more cost effective."
Another thing he says is that,

00:14:41.120 --> 00:14:45.300
hey, a lot of people don't consider
Apple for their storage needs.

00:14:45.300 --> 00:14:47.340
He says, absolutely,
no matter what systems

00:14:47.340 --> 00:14:48.700
you're running as servers,
you need to have a backup.

00:14:48.700 --> 00:14:55.620
XServe RAID is a breakthrough product.

00:14:55.700 --> 00:15:00.630
Second trend we're seeing out there,
other than storage explosion,

00:15:00.690 --> 00:15:02.190
is cluster computing.

00:15:02.200 --> 00:15:04.180
And I'm going to take a few
moments to talk about this.

00:15:04.280 --> 00:15:08.200
Now, this is an emerging trend,
but here's what I think is going on.

00:15:08.330 --> 00:15:12.170
Starting in the '60s,
we had the mainframe takeoff

00:15:12.690 --> 00:15:15.190
through the '60s and '70s.

00:15:15.440 --> 00:15:19.740
Client server computing came
in in the '80s and '90s.

00:15:19.770 --> 00:15:22.940
And sort of, you know,
mainframes haven't gone away completely,

00:15:22.940 --> 00:15:30.400
but a lot of the computing that was
done by mainframes is now done by

00:15:30.400 --> 00:15:30.400
SMP systems with client server computing.

00:15:30.530 --> 00:15:37.400
The trend we think is emerging is the
move to cluster computing in IT shops.

00:15:37.400 --> 00:15:39.260
And you're not going to
see it everywhere at once,

00:15:39.260 --> 00:15:42.030
and in fact the very first place
you're seeing it is actually the

00:15:42.030 --> 00:15:45.570
first place you saw client-server
computing which is that academic

00:15:45.640 --> 00:15:50.780
computing at MIT or at CMU and then it
gradually moved into the enterprise.

00:15:50.780 --> 00:15:54.040
We're now seeing very large
clusters being deployed.

00:15:54.240 --> 00:15:57.590
A case study, Virginia Tech,
I'm sure if you're alive

00:15:57.590 --> 00:16:01.190
you've probably heard of it,
1100 G5 systems,

00:16:01.190 --> 00:16:06.480
dual G5 systems deployed,
teraflops of computing.

00:16:06.480 --> 00:16:10.930
They came out when they introduced
as number three supercomputer in

00:16:10.930 --> 00:16:15.240
the world on the top 500.org list.

00:16:15.240 --> 00:16:18.930
The total time it took them to
deploy this was four months,

00:16:18.930 --> 00:16:24.250
about 5.2 million to deploy which
is a fraction of what number one

00:16:24.250 --> 00:16:27.480
and number two supercomputer took.

00:16:27.480 --> 00:16:29.910
Fraction meaning, you know,
1/20th or 1/50th the cost.

00:16:29.940 --> 00:16:33.440
So this is a breakthrough technology.

00:16:33.670 --> 00:16:36.200
We're seeing it first
in scientific computing,

00:16:36.330 --> 00:16:42.060
but we expect and we're actually
seeing clusters making inroads into IT.

00:16:42.140 --> 00:16:45.790
And the enterprise market is driven
by the very same reasons that

00:16:45.790 --> 00:16:47.620
scientific computing is adopting it.

00:16:47.650 --> 00:16:49.880
It's a better price performance solution.

00:16:49.880 --> 00:16:53.930
You have lots of interchangeable
one-use systems racked together,

00:16:54.080 --> 00:16:55.320
very easy to manage.

00:16:55.320 --> 00:16:58.060
If one of them goes bad,
you just yank it out and put in

00:16:58.060 --> 00:17:02.380
a new one from a set of spares
versus a large expensive support

00:17:02.390 --> 00:17:04.980
agreement for an SMP system.

00:17:04.980 --> 00:17:09.510
And we have applications showing
up like Oracle 10G for clustered

00:17:09.510 --> 00:17:11.660
computing or grid computing.

00:17:11.660 --> 00:17:15.180
So the pieces are coming
together and we expect to see

00:17:15.180 --> 00:17:17.330
a trend here in the industry.

00:17:17.340 --> 00:17:19.990
Apple has great solutions in this space.

00:17:20.000 --> 00:17:24.120
We sell these things all the time to the
scientific and academic computer market.

00:17:24.120 --> 00:17:29.350
We have great partners like Miracom,
Mathematica, Lustra.

00:17:29.390 --> 00:17:33.180
BioTeam and Gridiron.

00:17:33.180 --> 00:17:36.330
Case study, Colsa just announced that
they're going to deploy,

00:17:36.330 --> 00:17:44.020
they're in the process of deploying
1,566 dual processor XR of G5s.

00:17:44.020 --> 00:17:47.580
Their target performance is 25 teraflops.

00:17:47.580 --> 00:17:50.500
They ran their own custom
benchmark to do this.

00:17:50.500 --> 00:17:53.840
They're going to do this
at a cost of 5.8 million.

00:17:53.840 --> 00:17:57.100
Incredibly cost effective
for large performance needs.

00:17:57.100 --> 00:17:58.290
A quote from Dr.

00:17:58.290 --> 00:17:59.100
Anthony.

00:17:59.100 --> 00:18:01.100
D'Arienzo at Colsa.

00:18:01.230 --> 00:18:05.810
We did a best value competition
and Apple won that competition.

00:18:05.820 --> 00:18:09.960
It was based on performance,
the power requirements, floor space,

00:18:09.980 --> 00:18:11.920
et cetera, and cost.

00:18:12.060 --> 00:18:14.500
And an assessment of vendor stability.

00:18:14.650 --> 00:18:18.040
We solicited it to six
companies and Apple won.

00:18:18.040 --> 00:18:18.760
It's a big deal.

00:18:18.760 --> 00:18:19.440
It's a trend.

00:18:19.440 --> 00:18:21.680
It's going to show up in IT.

00:18:21.820 --> 00:18:24.960
Again, here are just a few of the
places currently in government,

00:18:24.960 --> 00:18:28.820
nonprofit,
academic that are deploying Mac clusters.

00:18:28.820 --> 00:18:33.150
in the process of deploying
Mac clusters today.

00:18:34.060 --> 00:18:38.050
Okay, let's switch gears a bit
here to enterprise solutions.

00:18:38.100 --> 00:18:41.430
And over the past year,
we've had a number of partners announce

00:18:41.520 --> 00:18:47.430
great solutions in the enterprise space,
IBM, Sun, PeopleSoft, Novell, Borland,

00:18:47.430 --> 00:18:48.740
Sybase, Oracle.

00:18:48.740 --> 00:18:52.800
I want to focus in on a few things
that we're announcing new this week,

00:18:52.800 --> 00:18:55.060
or that our partners are
announcing this week.

00:18:55.100 --> 00:18:59.710
IBM Lotus software,
so expanded support for Mac OS X clients.

00:18:59.780 --> 00:19:03.260
And the big deal here is
that they're supporting the

00:19:03.610 --> 00:19:08.450
IBM Lotus workspace architecture
or framework on the Mac client.

00:19:08.450 --> 00:19:14.380
So this lets them start to move their
brands over based on that strategy,

00:19:14.380 --> 00:19:15.900
starting with Lotus.

00:19:15.900 --> 00:19:20.550
But I expect we'll see other
things following as well.

00:19:20.610 --> 00:19:25.640
This is a big deal for us and
for IBM and for our customers.

00:19:26.970 --> 00:19:29.750
PeopleSoft,
announcing Safari certification.

00:19:29.790 --> 00:19:32.510
This is also a big deal.

00:19:32.520 --> 00:19:36.440
What it represents is that Safari,
the browser we all know and love,

00:19:36.440 --> 00:19:39.900
has matured to the point
where it has really become,

00:19:39.900 --> 00:19:44.800
based on certification by PeopleSoft
and similar efforts in the case

00:19:44.800 --> 00:19:52.020
of Oracle and SAP and others,
has become the browser of choice

00:19:53.010 --> 00:19:59.740
for the Mac and the enterprise.

00:19:59.740 --> 00:20:01.040
So we've done this by
concentrating on the web,

00:20:01.040 --> 00:20:03.080
and it's going to have RSS and all
sorts of new things in the future.

00:20:03.080 --> 00:20:06.360
But we've done this by
concentrating on building

00:20:06.360 --> 00:20:10.500
Safari to implement web standards,
number one, and number two,

00:20:10.500 --> 00:20:13.860
working with our partners
like PeopleSoft to get actual

00:20:13.900 --> 00:20:16.070
certification for the product.

00:20:16.230 --> 00:20:20.050
Novell Group-Wise,
full support for Mac OS clients.

00:20:20.050 --> 00:20:22.340
Another great partner for us.

00:20:22.340 --> 00:20:27.070
And now it's my pleasure
to introduce Tim Hoechs,

00:20:27.240 --> 00:20:30.760
who's Senior Vice President of
Technology for Oracle Corporation,

00:20:30.830 --> 00:20:38.170
and he's going to tell us about some
great things that Oracle is doing

00:20:38.170 --> 00:20:41.280
with respect to the Mac OS platform.

00:20:41.280 --> 00:20:41.280
So, Tim, come on up.

00:20:41.280 --> 00:20:41.280
Thanks.

00:20:45.150 --> 00:20:46.290
Thanks, Bud.

00:20:46.510 --> 00:20:48.970
So first, nobody panic.

00:20:49.280 --> 00:20:55.570
Despite the fact that I'm sure I am
wearing the only tie in this building,

00:20:55.580 --> 00:20:59.430
I am a Macintosh user.

00:21:03.210 --> 00:21:07.000
Since my first 128K
Mac freshman year in college,

00:21:07.080 --> 00:21:10.140
I have used nothing but,
including 16 years at Oracle.

00:21:10.610 --> 00:21:13.100
Although then I think it was
used mostly for Lode Runner,

00:21:13.510 --> 00:21:19.190
now it is more productively put to use,
I hope.

00:21:19.460 --> 00:21:23.600
I'm going to spend a few minutes
talking about Oracle strategy,

00:21:23.720 --> 00:21:27.700
just to familiarize everyone with
who we are and what we're focused on,

00:21:27.700 --> 00:21:33.790
and then put that into the OS X context.

00:21:33.790 --> 00:21:33.790
And so with that, I'm going to start with
a few minutes of Q&A.

00:21:34.620 --> 00:21:39.200
First, I've had a lot of folks ask me,
so Apple and Oracle,

00:21:39.200 --> 00:21:44.300
I don't picture y'all on
the same slide together.

00:21:44.300 --> 00:21:47.810
And historically, that's been true.

00:21:47.810 --> 00:21:47.810
But

00:21:48.200 --> 00:21:51.340
We've always been very
friendly companies.

00:21:51.340 --> 00:21:59.800
And we've always been focused very
much in being innovative siblings,

00:21:59.800 --> 00:22:01.810
really, in new technology.

00:22:01.810 --> 00:22:05.460
And Apple, we all are well aware
of their innovations.

00:22:05.460 --> 00:22:09.110
And on the server side,
on the enterprise information side,

00:22:09.110 --> 00:22:11.980
we've been very proud at
Oracle of pioneering and

00:22:11.980 --> 00:22:14.330
innovating new technology as well.

00:22:14.340 --> 00:22:18.100
And so because of the relationship
we've had as friendly companies,

00:22:18.100 --> 00:22:21.420
we have over the years tried
many times to work together.

00:22:21.420 --> 00:22:23.340
As a matter of fact,
one of my first speaking

00:22:23.440 --> 00:22:26.870
opportunities was just down the
hall here at the Macworld Expo

00:22:26.870 --> 00:22:30.620
probably about 12 years ago,
12, 14 years ago,

00:22:30.620 --> 00:22:33.780
when we first introduced
Oracle for Macintosh.

00:22:33.780 --> 00:22:37.240
And it was a version 5 database
with a cool hypercard interface.

00:22:37.240 --> 00:22:39.480
And ever since then,
we've been looking for

00:22:39.480 --> 00:22:41.480
opportunities to work together.

00:22:41.480 --> 00:22:44.320
But once Oracle decided not
to release its database,

00:22:44.320 --> 00:22:44.320
we've been looking for
opportunities to work together.

00:22:44.320 --> 00:22:46.880
for desktop platforms with version 7.

00:22:46.880 --> 00:22:49.090
It just became too big to do that.

00:22:49.640 --> 00:22:52.320
Then we didn't have a
release for the Mac anymore.

00:22:52.320 --> 00:22:54.240
We focused on it as a client.

00:22:54.320 --> 00:22:58.090
So we have many customers,
particularly in our education customers,

00:22:58.090 --> 00:23:01.110
in our government customers,
that's embraced the Mac as

00:23:01.110 --> 00:23:02.620
an enterprise client.

00:23:02.620 --> 00:23:06.200
And so we focused on
making sure that our tools,

00:23:06.370 --> 00:23:11.280
and probably as importantly,
our enterprise applications,

00:23:11.280 --> 00:23:14.950
our e-business suite
for doing ERP and so on,

00:23:15.300 --> 00:23:16.780
support the Mac as a client.

00:23:16.780 --> 00:23:18.680
And so we've spent some time there.

00:23:18.680 --> 00:23:22.180
But not until now have we
started readdressing the server

00:23:22.180 --> 00:23:26.180
operating system as a platform
for our database technology.

00:23:26.180 --> 00:23:31.700
And the reason was simply that the
database technology had become so

00:23:31.700 --> 00:23:32.600
large that it needed to be re-adjusted.

00:23:32.620 --> 00:23:37.160
It needed a Unix-based server
operating system to exploit.

00:23:37.240 --> 00:23:39.500
And with OS X, that's what we have.

00:23:39.530 --> 00:23:42.860
And so what we're talking about
this week is the release of

00:23:42.860 --> 00:23:44.860
our premier database product.

00:23:44.860 --> 00:23:46.460
We call it Oracle 10G.

00:23:46.460 --> 00:23:49.100
I'll tell you what the
G stands for in just a second.

00:23:49.100 --> 00:23:52.450
And on Mac OS X.

00:23:54.330 --> 00:23:57.280
Let me take a quick step back and then
I'll tell you a little bit more about

00:23:57.320 --> 00:24:00.980
what I mean by Oracle 10G for OS X.

00:24:01.330 --> 00:24:04.450
So first,
Bud mentioned a little bit about this

00:24:04.450 --> 00:24:09.270
evolution from server-centric computing
through desktop-centric computing

00:24:09.270 --> 00:24:11.000
into network-centric computing.

00:24:11.000 --> 00:24:13.990
It was on this left side
that Oracle was first born,

00:24:13.990 --> 00:24:17.300
and we focused on providing
database management technology

00:24:17.300 --> 00:24:23.000
for large organizations and
pioneering the relational database

00:24:23.010 --> 00:24:24.770
management as a platform for that.

00:24:25.100 --> 00:24:28.960
And then, as client-server grew,
this is really where we grew up,

00:24:28.960 --> 00:24:34.300
and we focused on not only
broadening our database technology,

00:24:34.300 --> 00:24:37.720
but building tools for building
applications that ran on clients,

00:24:37.720 --> 00:24:39.960
and these two would
communicate over the network.

00:24:40.230 --> 00:24:43.600
What was important about this model,
though, is that the sophistication

00:24:43.600 --> 00:24:46.100
of the information system,
which was really locked

00:24:46.100 --> 00:24:48.530
inside the application,
was on the desktop.

00:24:48.530 --> 00:24:51.220
It was a desktop-centric view.

00:24:51.430 --> 00:24:54.870
And as much as we like our desktops,
that's great, but it's not a cost.

00:24:55.100 --> 00:24:59.100
It's a cost-effective way to build and
deploy enterprise information systems,

00:24:59.100 --> 00:25:02.140
and we've been learning that over the
last several years about client-server.

00:25:02.140 --> 00:25:04.660
What we needed, really,
was a network-centric model,

00:25:04.660 --> 00:25:08.000
where we took the complexity of our
information system off of the desktop,

00:25:08.000 --> 00:25:11.380
where it's really impossible to manage,
and put it in the network,

00:25:11.660 --> 00:25:14.530
where it can be managed centrally,
and where it can be secured centrally,

00:25:14.530 --> 00:25:16.640
and where it can be scaled centrally,
and so on.

00:25:16.900 --> 00:25:20.170
And this model is one we
entered into in the late 90s,

00:25:20.170 --> 00:25:24.860
in the 1996-97 timeframe,
with a release of our product.

00:25:24.880 --> 00:25:24.880
That was the first time we had
a product that we had a system

00:25:24.880 --> 00:25:24.880
that could be managed centrally,
and we had a system that

00:25:24.880 --> 00:25:24.880
could be secured centrally,
and we had a system that

00:25:24.880 --> 00:25:25.080
could be scaled centrally,
and so on.

00:25:25.080 --> 00:25:26.370
And this was a model
that we called Oracle 8i.

00:25:26.380 --> 00:25:31.310
And it was focused on making sure that
the database could do all the work

00:25:31.310 --> 00:25:36.200
required to serve up not just data,
but all the application functionality

00:25:36.200 --> 00:25:39.640
required to really exploit
this network-centric model,

00:25:39.640 --> 00:25:42.500
which costs less,
and is easier to secure,

00:25:42.500 --> 00:25:44.760
and easier to scale, and so on.

00:25:44.820 --> 00:25:49.040
And so as this evolution occurred,
we also saw a change in the hardware

00:25:49.300 --> 00:25:51.180
architectures to support it.

00:25:52.920 --> 00:25:56.260
In the server-centric approach,
the way I solved the problem was

00:25:56.260 --> 00:25:58.220
by making the computer bigger.

00:25:58.540 --> 00:26:01.900
In the desktop-centric approach,
the way I solved it was

00:26:01.900 --> 00:26:03.930
making our desktops bigger,
which is really where

00:26:04.030 --> 00:26:05.120
the complexity resided.

00:26:05.120 --> 00:26:08.000
But in the network-centric approach,
we've seen a whole new

00:26:08.000 --> 00:26:11.480
opportunity for new architectures,
the most significant of which

00:26:11.480 --> 00:26:13.110
is this scalability problem.

00:26:13.110 --> 00:26:15.940
We need to often make our systems bigger.

00:26:15.940 --> 00:26:16.910
Well, how are we going to do that?

00:26:17.010 --> 00:26:19.640
Well, like I said,
we could build a bigger piece of iron,

00:26:19.640 --> 00:26:21.930
and this is really what
went on with a couple paths,

00:26:22.020 --> 00:26:24.750
one on mainframes,
but also in the SMP world,

00:26:24.750 --> 00:26:26.710
making bigger and bigger boxes.

00:26:26.710 --> 00:26:30.120
This is very expensive,
and it does let us scale up,

00:26:30.120 --> 00:26:31.480
but only to a point.

00:26:31.480 --> 00:26:34.810
And the problem is,
it doesn't really effectively

00:26:34.810 --> 00:26:37.700
let us scale down,
because sometimes we want to

00:26:37.700 --> 00:26:40.770
make our systems smaller as well,
based on different loads

00:26:40.770 --> 00:26:42.750
at different seasons,
all sorts of reasons.

00:26:42.760 --> 00:26:47.950
And so what we started to investigate
was grid computing as a paradigm that

00:26:47.960 --> 00:26:52.410
not only lets us scale up and scale down,
but more importantly, lets us scale out.

00:26:52.520 --> 00:26:56.940
Instead of getting bigger equipment,
we're adding equipment to a system

00:26:56.940 --> 00:26:59.160
to allow it to get bigger gradually.

00:26:59.160 --> 00:27:04.480
What's important about this is we
can start small and add capability

00:27:04.480 --> 00:27:08.080
as we go to grow to any size we want.

00:27:08.160 --> 00:27:11.950
And we aren't constrained by the
physical proportions of the box,

00:27:11.950 --> 00:27:12.660
really.

00:27:12.660 --> 00:27:17.540
And so we love large hardware,
but more importantly now,

00:27:17.540 --> 00:27:22.500
we're focused on this low-cost
way of scaling out information.

00:27:22.520 --> 00:27:26.570
So that we can have lots of
inexpensive servers cooperating

00:27:26.570 --> 00:27:28.250
to perform a single task.

00:27:28.340 --> 00:27:30.720
Now,
Bud started to reference grid computing

00:27:31.100 --> 00:27:32.690
mostly in the scientific world.

00:27:32.740 --> 00:27:36.940
And the idea here is, actually,
I have a quick college story.

00:27:36.940 --> 00:27:41.260
I had a classmate in
college named Robert Morris.

00:27:41.260 --> 00:27:42.740
Maybe some of you have heard of him.

00:27:42.740 --> 00:27:45.440
He was the one that wrote The Worm
that got loose from Cornell when

00:27:45.440 --> 00:27:46.660
he was a graduate student.

00:27:46.660 --> 00:27:50.700
And we were taking a computer
graphics class together,

00:27:50.700 --> 00:27:52.500
and we were writing a ray-transferred
computer graphics class.

00:27:52.500 --> 00:27:52.500
And we were writing a ray-transferred
computer graphics class.

00:27:52.520 --> 00:27:52.540
And we were writing a ray-transferred
computer graphics class.

00:27:52.540 --> 00:27:52.680
And we were writing a ray-transferred
computer graphics class.

00:27:52.680 --> 00:27:55.920
I actually, to my Mac credits,
I think wrote the first

00:27:55.990 --> 00:27:57.600
ray-tracer for the Mac.

00:27:57.600 --> 00:28:01.720
It was on a Mac 2,
which was not up to the job.

00:28:01.720 --> 00:28:03.470
At least,
that's what I told my professor.

00:28:03.480 --> 00:28:08.660
But he had this ray-tracer,
and I was amazed at how rapidly he was

00:28:08.660 --> 00:28:12.240
able to get these sophisticated images.

00:28:12.240 --> 00:28:14.110
Mine would chug all night,
and they'd be the size

00:28:14.110 --> 00:28:14.990
of a postage stamp.

00:28:15.040 --> 00:28:16.780
His would go all night,
and they'd be beautiful.

00:28:16.780 --> 00:28:18.750
And I asked him how he did it,
and he said, well,

00:28:18.820 --> 00:28:20.340
I'm chunking up the problem.

00:28:20.340 --> 00:28:22.000
And I'm taking this part of the screen.

00:28:22.520 --> 00:28:25.280
And I have accounts on computers
all over the university.

00:28:25.280 --> 00:28:27.400
I'm taking this part,
and I'm sending it off to

00:28:27.400 --> 00:28:28.780
that computer to compute.

00:28:28.780 --> 00:28:30.920
And I'm taking this part,
and I'm sending it off to that computer.

00:28:30.920 --> 00:28:33.650
You see where he got the
idea for his errant worm.

00:28:33.660 --> 00:28:38.450
And he was spreading the work
of his job across machines.

00:28:38.530 --> 00:28:40.120
But those machines are separate.

00:28:40.120 --> 00:28:43.080
They're not cooperating.

00:28:43.080 --> 00:28:46.300
We chunked up the problem and
distributed it to lots of machines.

00:28:46.300 --> 00:28:49.780
And many of the scientific grid
computing problems are this way.

00:28:49.840 --> 00:28:52.300
That's not the kind of grid computing.

00:28:52.520 --> 00:28:53.580
We're talking about.

00:28:53.650 --> 00:28:58.300
What we're talking about is
really using multiple computers

00:28:58.360 --> 00:28:59.880
to attack a single problem.

00:28:59.960 --> 00:29:03.600
And for us, the data management
problem is not chunkable.

00:29:03.800 --> 00:29:06.960
We can't let all of us have
little separate databases.

00:29:07.000 --> 00:29:11.220
We're talking about all of us cooperating
to manipulate the exact same data.

00:29:11.260 --> 00:29:14.080
And how do we make sure we don't
step on each other when we do it?

00:29:14.100 --> 00:29:17.630
How do I make sure your change is
reflected in your report and so on?

00:29:17.700 --> 00:29:20.470
And so for Oracle,
when we mean grid computing,

00:29:20.500 --> 00:29:22.220
we mean these different layers.

00:29:22.520 --> 00:29:24.020
First, storage grids.

00:29:24.020 --> 00:29:27.520
And Bud already talked a lot about how
technology is advancing in this way.

00:29:27.680 --> 00:29:32.430
To make sure that we can add
storage without scaling up,

00:29:32.480 --> 00:29:33.320
but scaling out.

00:29:33.320 --> 00:29:35.820
As we need storage,
we feed it more disks.

00:29:35.940 --> 00:29:39.640
And it can make the collective
storage subsystem larger.

00:29:39.820 --> 00:29:42.620
More importantly for us
is in this database world.

00:29:42.820 --> 00:29:45.880
And for us,
that means clusters of computers

00:29:45.880 --> 00:29:48.130
cooperating to be a single database.

00:29:48.220 --> 00:29:51.320
Also true in the
application server world,

00:29:51.320 --> 00:29:52.260
where we have now multiple servers.

00:29:52.260 --> 00:29:56.670
multiple nodes in a cluster
running an application server task.

00:29:57.070 --> 00:30:01.840
So let me tell you a little bit about
10G and how it does this grid computing.

00:30:01.860 --> 00:30:06.360
When we talk about 10G,
we like to refer to the ilities.

00:30:06.360 --> 00:30:08.840
The first ility is availability.

00:30:08.870 --> 00:30:12.330
This is the idea that in this grid model,
if any of these

00:30:12.630 --> 00:30:15.400
inexpensive machines fails,
big deal.

00:30:15.400 --> 00:30:18.360
The collective system is still running.

00:30:18.360 --> 00:30:21.180
And in our case,
the database can run even when

00:30:21.460 --> 00:30:26.020
the computer or one or some number
of the computers running it fail.

00:30:27.820 --> 00:30:30.900
The things that are in 10G that are
particularly cool for this is something

00:30:30.900 --> 00:30:32.770
we call real application clusters.

00:30:32.770 --> 00:30:36.860
This is our technology that allow
these nodes in a cluster to cooperate.

00:30:37.020 --> 00:30:39.360
And DataGuard,
which gives us a higher level of

00:30:39.360 --> 00:30:41.700
availability by going to another site.

00:30:41.720 --> 00:30:43.650
The secondality is scalability.

00:30:43.650 --> 00:30:45.960
I talked about this a little bit already.

00:30:45.960 --> 00:30:47.310
My problems start small.

00:30:47.370 --> 00:30:48.760
I need to make it bigger.

00:30:49.110 --> 00:30:52.070
Rather than doing a forklift
upgrade by moving this computer

00:30:52.160 --> 00:30:55.090
out and putting a bigger one in,
we just add nodes to our

00:30:55.100 --> 00:30:56.680
cluster and it grows.

00:30:56.700 --> 00:31:01.250
This is great for developers
because you can start with a

00:31:01.250 --> 00:31:06.690
small one computer system and
then grow it as the need requires.

00:31:06.800 --> 00:31:09.700
Our next ability is secureability.

00:31:09.700 --> 00:31:11.770
It's important that we can,
at the server,

00:31:11.770 --> 00:31:13.700
manage the security of information.

00:31:13.700 --> 00:31:20.700
Bud talked about the all-important common
criteria and other certifications that

00:31:20.700 --> 00:31:25.690
enforce not just how software works,
but the whole development

00:31:25.700 --> 00:31:25.700
process used to build it.

00:31:25.700 --> 00:31:30.360
And ensuring that that is used
consistently across the applications you

00:31:30.450 --> 00:31:35.690
build in a database means that we have
to secure the information at the source.

00:31:35.700 --> 00:31:37.600
And so for us,
that means inside the server.

00:31:37.930 --> 00:31:41.100
We secure the data with the data.

00:31:42.150 --> 00:31:44.600
Usability is important, of course.

00:31:44.620 --> 00:31:48.040
And for those of you who
have used Oracle in the past,

00:31:48.090 --> 00:31:52.400
you know it is a sophisticated
piece of software.

00:31:55.410 --> 00:31:56.280
It is.

00:31:56.290 --> 00:32:02.780
And as a result, we tend often to focus
on those prior ilities.

00:32:02.780 --> 00:32:04.280
It's going to be secure.

00:32:04.280 --> 00:32:05.680
It's going to be high performance.

00:32:05.680 --> 00:32:06.700
It's going to be scalable.

00:32:06.700 --> 00:32:09.710
And this one we've often left for last.

00:32:09.730 --> 00:32:10.680
Okay?

00:32:10.680 --> 00:32:15.420
And so you needed to be a highly
qualified professional to maximize the

00:32:15.420 --> 00:32:18.310
capability of the Oracle environment.

00:32:18.320 --> 00:32:22.380
Well, in 10G,
we're focused a lot on accessing the

00:32:22.380 --> 00:32:25.890
power of the 10G database to everybody.

00:32:25.890 --> 00:32:29.320
And so one of the things we've
added is a development environment

00:32:29.360 --> 00:32:31.220
built right into the database.

00:32:31.220 --> 00:32:33.160
We call it HTMLDB.

00:32:33.160 --> 00:32:34.690
Sorry for the name.

00:32:34.770 --> 00:32:37.340
I'm not the proudest of the name.

00:32:37.340 --> 00:32:38.910
But the technology is extraordinary.

00:32:38.920 --> 00:32:42.980
It's a web-based development environment
where all development happens through

00:32:42.980 --> 00:32:44.680
the web as well as deployment.

00:32:44.680 --> 00:32:45.620
Okay?

00:32:45.620 --> 00:32:47.990
So the actual definition of
the application is that it's

00:32:48.010 --> 00:32:48.300
a web-based environment.

00:32:48.300 --> 00:32:51.350
It's just data inside an
Oracle database that's rendered on the

00:32:51.350 --> 00:32:53.420
fly inside an HTML-based web browser.

00:32:53.420 --> 00:32:54.660
It's quite extraordinary.

00:32:54.660 --> 00:32:57.550
And then finally,
and perhaps most importantly

00:32:57.670 --> 00:33:00.620
as it relates to 10G,
is manageability.

00:33:00.620 --> 00:33:04.570
If indeed we're going to have lots of
servers all over this grid cooperating,

00:33:04.570 --> 00:33:07.550
some of them today are being
database servers and tomorrow

00:33:07.550 --> 00:33:11.060
we're retooling them over to be
app servers and then one fails.

00:33:11.060 --> 00:33:14.850
When we have all this complexity,
manageability becomes a priority.

00:33:14.850 --> 00:33:17.480
And for us,
that means making sure that you

00:33:17.480 --> 00:33:18.280
can not only manage the data,
but you can also manage the data.

00:33:18.280 --> 00:33:19.590
So I think that's a
really important thing.

00:33:19.590 --> 00:33:21.690
And the other thing that we've done is
we've done a lot of research and we've

00:33:21.770 --> 00:33:23.820
done a lot of research and we've done a
lot of research on how we can actually

00:33:23.820 --> 00:33:26.030
control what servers are doing what at
any given time and how it's secured,

00:33:26.030 --> 00:33:27.560
but that you can do it
through a rich user interface,

00:33:27.560 --> 00:33:29.350
do it in a way that certainly in
the Mac world you are accustomed

00:33:29.350 --> 00:33:30.930
to interacting with your systems.

00:33:30.940 --> 00:33:33.690
So we have focused a lot
in 10G on enhancing the

00:33:33.740 --> 00:33:35.850
manageability across the board.

00:33:35.860 --> 00:33:39.330
So what's important when we
think about these ilities,

00:33:39.370 --> 00:33:44.090
we love to define our technology
around these sort of enterprise terms.

00:33:44.120 --> 00:33:47.150
Well, there's another technology
that we think of,

00:33:47.350 --> 00:33:48.260
and that's OS X.

00:33:48.260 --> 00:33:53.300
And just as Bud said,
it has grown into an enterprise-capable

00:33:53.300 --> 00:33:59.120
operating system married with the
XServe platform to give it this level

00:33:59.260 --> 00:34:03.000
of enterprise stability and scalability.

00:34:03.040 --> 00:34:08.240
And what's great about it is the grid
architecture that we're focused on

00:34:08.240 --> 00:34:13.370
across all of our hardware partners
is super consistent with this idea

00:34:13.370 --> 00:34:18.240
that Apple has with XServes to make
sure that all of these servers,

00:34:18.240 --> 00:34:21.000
can cooperate,
share the same infrastructure,

00:34:21.190 --> 00:34:22.960
share the same disk, and so on.

00:34:23.040 --> 00:34:28.760
And so we've discovered that our
technologies are very synergistic.

00:34:28.840 --> 00:34:34.880
And so as a result,
we have ported Oracle 10G to OS X.

00:34:35.200 --> 00:34:38.610
What we've also done is moved
our flagship development

00:34:39.050 --> 00:34:41.780
environment to OS X as well.

00:34:42.350 --> 00:34:44.170
We call this JDeveloper.

00:34:44.170 --> 00:34:47.060
It's an integrated development
environment for Java development,

00:34:47.170 --> 00:34:50.140
PL/SQL development, debugging,
UML modeling.

00:34:50.140 --> 00:34:54.600
It's a complete professional
development environment that

00:34:54.600 --> 00:34:59.630
has also been moved to OS X.

00:34:59.760 --> 00:35:02.870
The development environment is

00:35:05.400 --> 00:35:28.000
[Transcript missing]

00:35:28.200 --> 00:35:33.180
So what's important about
this is that the 10G database,

00:35:33.180 --> 00:35:38.250
which we like to think is the most
robust way of managing and storing

00:35:38.250 --> 00:35:42.180
your information inside an enterprise,
is now available on this

00:35:42.780 --> 00:35:48.060
important platform from Apple,
which has the same goals that we had,

00:35:48.630 --> 00:35:51.090
lowering the cost of
enterprise computing,

00:35:51.090 --> 00:35:55.620
while at the same time,
we increase performance, scalability,

00:35:55.620 --> 00:35:58.180
secureability, ease of use, and security.

00:35:58.200 --> 00:36:02.870
So I'm here to tell you
that Oracle 10G on OS X will

00:36:02.870 --> 00:36:06.750
be available this fall,
and today you can go

00:36:06.960 --> 00:36:09.560
download it from this URL.

00:36:09.560 --> 00:36:11.590
Play with it.

00:36:19.810 --> 00:36:23.970
Because we run on a lot of platforms,
its production availability is

00:36:23.970 --> 00:36:28.070
dependent on a larger release cycle,
which is scheduled now

00:36:28.070 --> 00:36:30.580
to end this summer,
the next release cycle.

00:36:30.580 --> 00:36:33.470
And this will be available
in early fall in production,

00:36:33.680 --> 00:36:35.680
but the code is available
for you to download today.

00:36:35.680 --> 00:36:38.790
Also here, you can download JDeveloper.

00:36:38.790 --> 00:36:41.590
And JDeveloper,
the development environment,

00:36:41.750 --> 00:36:44.590
is available for you in
developer preview release,

00:36:44.590 --> 00:36:48.480
and it is scheduled to go production
in the beginning of September.

00:36:48.480 --> 00:36:49.200
Okay?

00:36:49.820 --> 00:36:52.560
So we're super excited about being here.

00:36:52.580 --> 00:36:55.680
We very much enjoy our
relationship with Apple.

00:36:55.680 --> 00:36:58.820
We like to think of ourselves
as innovators in the enterprise

00:36:58.820 --> 00:37:02.980
around information management,
and we're really excited about OS X and

00:37:02.980 --> 00:37:07.580
the XServe as a platform to showcase
what we mean when we say grid computing.

00:37:07.580 --> 00:37:09.640
So to Apple, I say thank you,
and to all of you,

00:37:09.640 --> 00:37:11.060
I appreciate your attention.

00:37:11.080 --> 00:37:12.390
Thanks.

00:37:15.800 --> 00:37:16.480
Tim.

00:37:16.480 --> 00:37:18.770
Well, thanks, Tim.

00:37:18.770 --> 00:37:25.760
And as he just mentioned,
Oracle 10G and JDeveloper, download them,

00:37:25.760 --> 00:37:26.480
play with them.

00:37:26.530 --> 00:37:28.930
Now, speaking of JDeveloper,
I want to talk a bit about

00:37:28.930 --> 00:37:30.540
enterprise development tools.

00:37:30.540 --> 00:37:33.420
And this has been a huge story for us.

00:37:33.420 --> 00:37:37.290
JDeveloper is the latest,
but you're going to hear

00:37:37.290 --> 00:37:39.370
a lot more in this space.

00:37:39.370 --> 00:37:44.120
When I think of Mac OS X,
I think of development tools.

00:37:44.120 --> 00:37:48.200
And I think of not just a
toolbox of development tools,

00:37:48.200 --> 00:37:49.900
but I think of,
if you've ever been in the

00:37:49.900 --> 00:37:54.460
hardware store and you've seen
those huge tool carriers that have

00:37:54.460 --> 00:37:59.760
like three tiers and 50 drawers,
that's what I think of,

00:37:59.790 --> 00:38:02.800
because not only are all
the open source tools there,

00:38:02.930 --> 00:38:07.940
but great tools like JDeveloper, IDEs,
starting with, of course, XDeveloper.

00:38:07.990 --> 00:38:10.020
And then there's Xcode,
which is bundled in the box.

00:38:10.020 --> 00:38:14.210
And, you know,
Xcode continues to improve,

00:38:14.220 --> 00:38:17.580
especially getting great
this last year in the area of

00:38:17.670 --> 00:38:19.640
performance with zero link.

00:38:19.690 --> 00:38:24.850
So you can get around the compile, link,
debug loop with zero linking time.

00:38:24.850 --> 00:38:28.020
Fix and continue,
which actually makes it even faster.

00:38:28.280 --> 00:38:31.460
And distributed building,
which changes the paradigm so you

00:38:31.460 --> 00:38:35.680
can distribute your builds sort
of like worms over the network.

00:38:35.700 --> 00:38:37.940
Great set of development tools.

00:38:37.960 --> 00:38:40.550
And then there's the open
source development tools.

00:38:40.720 --> 00:38:43.060
And then, as I mentioned,
from third-party developers.

00:38:43.060 --> 00:38:46.770
So some announcements that
are happening this week.

00:38:46.890 --> 00:38:49.380
Borland, optimize it suite for Java.

00:38:49.380 --> 00:38:52.360
So a complete performance
solution for Java development.

00:38:52.360 --> 00:38:55.040
Shortens their development
and testing cycles.

00:38:55.040 --> 00:38:56.600
Improves your reliability.

00:38:56.660 --> 00:38:58.700
Enhances developer productivity.

00:38:58.700 --> 00:39:03.240
Eclipse,
which Eclipse.org just announced last

00:39:03.240 --> 00:39:05.410
week the availability of Eclipse.

00:39:05.410 --> 00:39:06.480
Their support for Eclipse on
Mac OS X is going to be great.

00:39:06.480 --> 00:39:06.480
And then there's the open
source development tools.

00:39:06.480 --> 00:39:06.480
And then, as I mentioned,
from third-party developers.

00:39:06.480 --> 00:39:06.480
So some announcements that
are happening this week.

00:39:06.480 --> 00:39:06.480
Borland, optimize it suite for Java.

00:39:06.480 --> 00:39:06.500
So a complete performance solution
for Java development shortens their

00:39:06.510 --> 00:39:06.600
development and testing cycles.

00:39:06.600 --> 00:39:06.600
Improves your reliability.

00:39:06.600 --> 00:39:06.600
Enhances developer productivity.

00:39:06.600 --> 00:39:06.640
Eclipse,
which Eclipse.org just announced last

00:39:06.640 --> 00:39:06.640
week the availability of Eclipse.

00:39:06.640 --> 00:39:06.640
And then, as I mentioned,
from third-party developers.

00:39:06.640 --> 00:39:06.660
So some announcements that
are happening this week.

00:39:06.660 --> 00:39:09.800
Eclipse on Mac OS X, which is big news.

00:39:09.800 --> 00:39:15.240
And I believe it's now available for
download this week from Eclipse.org.

00:39:15.400 --> 00:39:17.800
So an open source IDE for Java.

00:39:17.800 --> 00:39:24.150
And last but not least,
I want to introduce the father of Java,

00:39:24.150 --> 00:39:27.020
James Gosling,
vice president for Sun Corporation,

00:39:27.120 --> 00:39:30.230
who's going to come up and tell
us some of the great things that

00:39:30.230 --> 00:39:33.900
are coming out of Sun for the
Mac OS X development community.

00:39:33.900 --> 00:39:34.560
So, James.

00:39:34.560 --> 00:39:35.950
James Gosling.

00:39:40.860 --> 00:39:41.440
Hello.

00:39:41.440 --> 00:39:42.880
I don't actually need this.

00:39:42.880 --> 00:39:44.260
That's right.

00:39:44.260 --> 00:39:48.240
I'm actually going to
drive my own computer here.

00:39:48.240 --> 00:39:54.130
So as you may have noticed,
there's another conference going on here.

00:39:54.130 --> 00:39:58.370
And it's sort of entertaining.

00:39:58.370 --> 00:40:01.120
I mean, I'm a happy Mac user.

00:40:01.120 --> 00:40:05.280
This machine is not loaned by Apple.

00:40:05.280 --> 00:40:07.250
I actually had to pay money for this one.

00:40:07.910 --> 00:40:11.800
And it has got many, many miles on it.

00:40:11.840 --> 00:40:15.700
I drag it around and I love it dearly.

00:40:15.700 --> 00:40:21.500
So I'm going to talk to you a little bit
about what's going on in the Java world.

00:40:21.500 --> 00:40:25.580
Try to do sort of a quick summary.

00:40:25.580 --> 00:40:25.590
And I'm going

00:40:25.880 --> 00:40:33.920
A lot of what we do in the
Java universe is sort of about this,

00:40:33.920 --> 00:40:36.840
this kind of picture of sort
of ubiquitous computing.

00:40:36.840 --> 00:40:42.550
There's been this sort of evolution from
desktops to servers to lots of little

00:40:42.610 --> 00:40:48.860
devices on the edges connected to things
in the middle to databases and various

00:40:48.860 --> 00:40:50.980
things that transduce this or that.

00:40:51.020 --> 00:40:55.780
Fairly wide-ranging sets of things.

00:40:55.800 --> 00:41:01.970
So, for example, this is my, you know,
Sun ID card.

00:41:01.970 --> 00:41:05.740
If you didn't notice,
there's a little metallic pad there.

00:41:05.920 --> 00:41:07.240
This is a smart card.

00:41:07.240 --> 00:41:10.370
This has got a CPU on it.

00:41:10.480 --> 00:41:14.680
This is a Java smart card.

00:41:14.680 --> 00:41:19.940
There are about six and a half,
650 million Java smart cards

00:41:19.940 --> 00:41:22.480
out there in the world today.

00:41:22.480 --> 00:41:24.960
They're used all over the place.

00:41:24.960 --> 00:41:27.340
And you can actually run
real live Java code on here.

00:41:27.340 --> 00:41:32.240
It does, the new generation ones do,
like, you know, all kinds of fancy

00:41:32.240 --> 00:41:33.650
encryption and networking.

00:41:33.690 --> 00:41:37.100
And, you know, it's just amazing what you
can do with these things.

00:41:37.100 --> 00:41:40.570
You know,
the other really common network node

00:41:40.570 --> 00:41:43.040
in our universe is one of these.

00:41:43.080 --> 00:41:47.000
This is a Nokia cell phone.

00:41:47.000 --> 00:41:51.880
This one has, this one is actually
a Java multiprocessor.

00:41:53.120 --> 00:41:57.620
Because if, all GSM phones have what are
called SIM cards in them.

00:41:57.620 --> 00:41:59.100
SIM cards are smart cards.

00:41:59.100 --> 00:42:02.800
And all the GSM SIM cards are Java cards.

00:42:02.800 --> 00:42:06.930
Plus which the main processor does Java.

00:42:06.930 --> 00:42:11.680
This is actually a fairly modern one
that uses a standard called MidP2.0.

00:42:11.680 --> 00:42:15.480
And so it's,
the software for these things

00:42:15.560 --> 00:42:18.380
is kind of dominated by games.

00:42:18.380 --> 00:42:22.420
As one would expect, I suppose.

00:42:23.120 --> 00:42:24.640
It's like 95% games.

00:42:24.770 --> 00:42:29.200
But there's,
but the market for games on cell

00:42:29.200 --> 00:42:32.030
phones last year was about $4 billion.

00:42:32.100 --> 00:42:38.590
You know, which is, you know,
not exactly chump change.

00:42:39.230 --> 00:42:43.160
And, you know,
it's a part of the sort of incredible

00:42:43.160 --> 00:42:46.270
diversity of the Java world.

00:42:46.270 --> 00:42:55.050
One of the demos this morning was the
latest stuff in the automotive world.

00:42:55.080 --> 00:43:04.220
The upcoming sort of BMWs have complete
other -- their complete navigation

00:43:04.220 --> 00:43:09.390
and entertainment systems are all
sort of wall-to-wall Java code.

00:43:09.400 --> 00:43:15.220
There's a -- if you go to the pavilion,
you'll see a couple of BMWs that have,

00:43:15.220 --> 00:43:19.070
you know, pretty large-scale
Java multiprocessors inside them.

00:43:19.080 --> 00:43:22.470
And they do a really, really,
really nice job.

00:43:22.480 --> 00:43:25.080
And, of course, some of it's -- some of
it's not just the Java.

00:43:25.080 --> 00:43:26.710
Some of it's goofy.

00:43:26.710 --> 00:43:30.600
If any of you were at the
Java keynote this morning,

00:43:30.600 --> 00:43:35.590
which you could have seen and still
made it back here for Steve's,

00:43:35.830 --> 00:43:40.190
there was the Java-controlled
liquid nitrogen cannon --

00:43:42.200 --> 00:43:44.560
We're running this contest.

00:43:44.560 --> 00:43:47.990
We do t-shirts tossed into the audience.

00:43:48.030 --> 00:43:52.690
I had sort of run out of ideas for ways
to toss t-shirts into the audience.

00:43:52.700 --> 00:43:56.620
Last year,
I did a trebuchet going medieval,

00:43:56.620 --> 00:44:00.300
and this year we ran it as a contest
to get people to come up with

00:44:00.300 --> 00:44:04.700
interesting ways to hurl t-shirts
into the audience and maybe use

00:44:04.700 --> 00:44:06.840
a little Java code on the way.

00:44:06.840 --> 00:44:11.700
The three finalists are today, tomorrow,
and Thursday.

00:44:12.110 --> 00:44:16.100
Today's was a truly impressive cannon.

00:44:16.120 --> 00:44:20.000
If they actually let them
crank it up all the way,

00:44:20.000 --> 00:44:23.080
it actually does take chunks of
concrete out of the back wall.

00:44:23.100 --> 00:44:29.310
But we actually managed
to not injure anyone,

00:44:29.320 --> 00:44:36.550
which in the practices last
night was a big concern.

00:44:37.540 --> 00:44:44.760
So anyway, Java's role in this sort of
infrastructure that people have been

00:44:44.760 --> 00:44:49.240
building that goes from these huge
enterprise servers to these desktops

00:44:49.240 --> 00:44:56.060
to cell phones to all the smart cards
is it's kind of a conceptual framework.

00:44:56.060 --> 00:44:57.610
I mean, Java is a language.

00:44:57.640 --> 00:45:02.880
Languages are ways that people
think and express their thoughts,

00:45:02.880 --> 00:45:05.580
and in particular,
how you express what you want

00:45:05.610 --> 00:45:07.020
the damn piece of iron to do.

00:45:07.400 --> 00:45:12.450
And the lovely thing about Java is
that it actually spans all of this

00:45:12.450 --> 00:45:19.860
stuff so that developers can view this
reality of stuff out there that is

00:45:19.860 --> 00:45:24.120
extremely heterogeneous as something
that is a lot more homogeneous.

00:45:24.120 --> 00:45:28.470
You can really think about
programming for your Mac desktop as

00:45:28.470 --> 00:45:33.100
being the same thing as programming
for your Windows desktop.

00:45:33.100 --> 00:45:37.390
And it's sort of a different twist
on the sort of marketing side.

00:45:37.400 --> 00:45:41.390
It's a whole different kind of marketing
line that various people have been using,

00:45:41.400 --> 00:45:44.400
the whole "write once,
run anywhere," which I like,

00:45:44.400 --> 00:45:48.240
which is sort of "learn once,
work anywhere." And that lets you

00:45:48.370 --> 00:45:58.870
sort of build communities that span
a lot of different technologies.

00:45:58.870 --> 00:45:58.870
You see a lot of IT shops that have

00:45:59.310 --> 00:46:03.420
You know, they don't have like mainframe
developers and point-of-sale

00:46:03.420 --> 00:46:06.490
terminal developers and,
you know,

00:46:07.100 --> 00:46:09.630
VMS developers and
DOS PowerVS developers,

00:46:09.630 --> 00:46:13.530
they've just got developers and
they happen to work wherever they're

00:46:13.530 --> 00:46:17.240
needed because all the machines
kind of speak the same thing.

00:46:17.240 --> 00:46:22.880
And it gives you this sort of
freedom and flexibility that is

00:46:22.880 --> 00:46:25.750
just a wonderful thing to do.

00:46:25.860 --> 00:46:29.930
And it really has made
Java be everywhere.

00:46:29.930 --> 00:46:36.230
There are somewheres around 4
million professional developers

00:46:36.230 --> 00:46:38.690
that do Java as their day job.

00:46:38.720 --> 00:46:41.730
If you count people
who have learned Java,

00:46:41.730 --> 00:46:45.080
like university students,
you get completely stupid numbers.

00:46:45.080 --> 00:46:50.920
But it's impossible to
measure at this point.

00:46:50.920 --> 00:46:54.220
And it really is not a marketing slogan.

00:46:54.220 --> 00:46:59.230
I mean, the number of these machines out
there that speak Java is huge.

00:46:59.230 --> 00:47:04.760
Currently, we're like 350 million
Java-enabled cell phones.

00:47:04.760 --> 00:47:09.700
The vast majority of GSM cell
phones are Java cell phones.

00:47:09.700 --> 00:47:13.530
And you see it in all
kinds of embedded stuff,

00:47:13.530 --> 00:47:15.060
for instance.

00:47:15.060 --> 00:47:21.480
The Canon this morning was controlled
by a little embedded server.

00:47:21.480 --> 00:47:28.690
It's a little board about this big,
made by a Dallas semiconductor.

00:47:28.700 --> 00:47:33.130
I think they call it the tiny stick.

00:47:33.130 --> 00:47:34.390
And it's a general sort of

00:47:34.760 --> 00:47:39.220
Industrial Automation Controller,
you download Java code to it and it

00:47:39.220 --> 00:47:43.590
controls relays and servo motors and
whatever it is you wire it up to.

00:47:43.600 --> 00:47:47.360
And there's a big community
of folks doing that out there.

00:47:47.360 --> 00:47:51.550
One of the things that does make
Java work so well is that Java really

00:47:51.550 --> 00:47:53.640
isn't a product from a company.

00:47:53.640 --> 00:47:55.510
Java really is a community.

00:47:55.510 --> 00:47:58.620
There are a lot of companies
that work together.

00:47:58.640 --> 00:48:00.080
Apple works with us.

00:48:00.080 --> 00:48:01.580
Oracle works with us.

00:48:01.580 --> 00:48:03.350
IBM works with us.

00:48:04.700 --> 00:48:10.600
Not Microsoft,
but just about everybody else.

00:48:12.500 --> 00:50:33.900
[Transcript missing]

00:50:34.870 --> 00:50:35.960
That's actually pretty horrible.

00:50:35.960 --> 00:50:41.200
But outside of the U.S.,
you see a lot of Linux.

00:50:41.210 --> 00:50:46.000
You go to China, Brazil, France,
you see a lot of Linux on the desktop.

00:50:46.000 --> 00:50:49.010
And developers have really been
starting to care about that.

00:50:49.040 --> 00:50:53.530
And of course, the reason that I'm here
today is that people actually

00:50:53.530 --> 00:50:55.670
care about Macs as a desktop.

00:50:55.670 --> 00:51:00.060
They're nowhere near where Windows is,
but they're enough to get

00:51:00.140 --> 00:51:01.980
developers interested.

00:51:02.890 --> 00:51:06.000
They're really getting, you know,
pretty fascinating.

00:51:06.070 --> 00:51:10.480
And these days, we've got modern
JVMs pretty much everywhere.

00:51:10.480 --> 00:51:16.630
As near as we can tell,
there are about 650 million desktops

00:51:16.730 --> 00:51:22.940
out there in the world that are,
that have sort of modern JVMs on them.

00:51:22.960 --> 00:51:26.260
And by that,
I mean sort of anything but Microsoft.

00:51:26.260 --> 00:51:30.800
And so when people write Java apps,
they actually run pretty much anywhere.

00:51:30.800 --> 00:51:36.640
And there are a number of really
nice ways to launch them these days.

00:51:36.640 --> 00:51:40.350
There's Java Web Start and Applets.

00:51:40.420 --> 00:51:44.740
Web Start is a fairly nice one
that is a sort of combination

00:51:44.740 --> 00:51:51.590
of sort of web-friendly
navigation and easy deployment.

00:51:51.750 --> 00:51:55.140
of what are really sort
of full-up desktop apps.

00:51:55.140 --> 00:51:57.950
And most systems that
implement Web Start,

00:51:57.960 --> 00:52:01.070
and Apple is one of them,
if you Web Start the same

00:52:01.070 --> 00:52:04.560
app a couple of times,
they'll sort of ask you, well,

00:52:04.560 --> 00:52:08.000
do you want me to turn this
into a real live application?

00:52:08.000 --> 00:52:09.430
And then they do that.

00:52:09.430 --> 00:52:11.920
And then it's a real loaded desktop app.

00:52:11.920 --> 00:52:13.700
It's installed and it runs.

00:52:13.700 --> 00:52:16.770
And your users have never
had to run an installer.

00:52:16.770 --> 00:52:21.690
They just click the link on a web page
and it just sort of did the right thing.

00:52:22.700 --> 00:52:25.340
And the performance has been pretty nice.

00:52:25.340 --> 00:52:30.400
If you've watched my slides,
I'm not using Keynote.

00:52:30.400 --> 00:52:32.700
I'm actually using a slide
program that I wrote.

00:52:32.720 --> 00:52:36.950
And it's a slide program that
I kind of use as sort of an

00:52:36.960 --> 00:52:40.480
experimental testbed for being goofy.

00:52:41.480 --> 00:52:45.220
And a month or so ago,
I decided that I didn't

00:52:45.320 --> 00:52:51.530
know the 3D APIs very well,
so I shoehorned 3D into my slideshow,

00:52:51.530 --> 00:52:52.640
right?

00:52:52.680 --> 00:53:00.770
So you can sort of do all kinds
of really stupid things when

00:53:00.770 --> 00:53:00.770
you're doing a 3D project.

00:53:01.100 --> 00:55:54.700
[Transcript missing]

00:55:54.970 --> 00:55:57.990
Sun has a number of tools.

00:55:58.000 --> 00:56:00.160
Our base tool is
something called NetBeans.

00:56:00.160 --> 00:56:02.900
It's an open source project,
sort of like Eclipse,

00:56:02.900 --> 00:56:07.900
except that it's been an open source
project for at least a year longer,

00:56:07.900 --> 00:56:11.440
and it's been available on
the Mac for quite a while.

00:56:11.440 --> 00:56:19.090
And actually, where

00:56:35.430 --> 00:56:36.510
Oh, there we go.

00:56:36.620 --> 00:56:39.680
So this is NetBeans 4.0.

00:56:39.680 --> 00:56:44.350
I've got most of the
windows sort of closed away.

00:56:45.220 --> 00:56:48.650
One of the things about NetBeans
as an open source project is

00:56:48.650 --> 00:56:50.630
you can get all the latest bits.

00:56:50.720 --> 00:56:54.780
So if you go to netbeans.org,
you'll find the current FCS release,

00:56:54.800 --> 00:56:56.850
which is the 3.6 release.

00:56:56.850 --> 00:57:01.040
You'll find the upcoming release,
which is the 4.0 release.

00:57:01.040 --> 00:57:05.620
And actually, you'll find two releases
of the 4.0 release.

00:57:05.650 --> 00:57:09.790
There's something called the Daily Build,
which only the truly

00:57:09.790 --> 00:57:11.500
brave would download.

00:57:11.500 --> 00:57:13.740
And then there's something
called the Q Build,

00:57:13.740 --> 00:57:15.040
which is the daily build.

00:57:15.100 --> 00:57:20.440
Which is every day the dailies
are run through some QA.

00:57:20.440 --> 00:57:25.210
And if by some random chance
one kind of passes QA,

00:57:25.330 --> 00:57:28.820
then that gets called the Q Build.

00:57:28.820 --> 00:57:32.200
So this is a Q Build of NetBeans 4.

00:57:32.200 --> 00:57:35.640
I'm not going to really show you
anything about it other than it's there.

00:57:35.640 --> 00:57:38.880
It's a real Mac app.

00:57:38.960 --> 00:57:44.000
It does all the Mac buttons and things.

00:57:44.000 --> 00:57:47.600
Although, I won't bother showing that.

00:57:47.830 --> 00:57:54.780
But the really interesting
tool for us these days has

00:57:54.780 --> 00:57:59.590
been this thing called Creator.

00:57:59.590 --> 00:57:59.590
Creator is a very sort of...

00:58:02.280 --> 00:58:08.210
So it's really targeted at
visual basic developers,

00:58:08.210 --> 00:58:08.210
at people who--

00:58:09.100 --> 00:58:36.700
[Transcript missing]

00:58:36.800 --> 00:58:38.150
A real Mac app.

00:58:38.150 --> 00:58:39.210
Here it is.

00:58:39.210 --> 00:58:41.820
It's actually on the toolbar.

00:58:41.820 --> 00:58:47.140
And I'll actually launch it just
so you can actually believe me.

00:58:47.140 --> 00:58:50.220
And this is actually, this is a Mac.

00:58:50.220 --> 00:58:55.550
And the release of Creator that
you can get today runs on the Mac.

00:58:55.550 --> 00:59:00.080
It also runs on Linux and
on Solaris and on Windows.

00:59:04.420 --> 00:59:27.330
and the rest of the team will
be joined by Tim Hoechsst,

00:59:27.330 --> 00:59:27.330
James Gosling,
and the rest of the team will

00:59:27.330 --> 00:59:27.330
be joined by Tim Hoechsst,
James Gosling.

00:59:27.550 --> 00:59:31.160
Data flow, the business process
logic of your application,

00:59:31.160 --> 00:59:35.140
and each sort of node,
each sort of place where

00:59:35.140 --> 00:59:37.040
you stop is a web page.

00:59:37.040 --> 00:59:42.770
The web page construction
is all this sort of drag and

00:59:42.890 --> 00:59:46.250
drop kind of construction.

00:59:46.400 --> 00:59:51.800
[Transcript missing]

00:59:52.500 --> 00:59:54.850
You can edit them, stretch them.

00:59:54.850 --> 00:59:58.380
You can see properties off on the side.

00:59:58.380 --> 01:00:02.380
You can put all kinds of, you know,

01:00:02.700 --> 01:00:08.700
[Transcript missing]

01:00:20.750 --> 01:00:22.390
You can use the property sheet.

01:00:22.400 --> 01:00:23.030
You can change it.

01:00:23.040 --> 01:00:25.540
If you look closely,
you can see that's actually a

01:00:25.540 --> 01:00:27.260
Mac button that it's constructing.

01:00:27.260 --> 01:00:31.540
It's a full-blown Mac app.

01:00:31.620 --> 01:00:34.370
It does all the really nice stuff.

01:00:34.420 --> 01:00:39.550
The way that you add components
here is it's got this notion of

01:00:39.550 --> 01:00:42.300
services that you can tie in.

01:00:42.300 --> 01:00:48.960
You can drag and drop both web services,
and here's some built-in web services.

01:00:48.960 --> 01:00:50.380
Here's some data sources.

01:00:50.700 --> 01:00:55.040
You can drag and drop fields out
of databases and construct tables.

01:00:55.040 --> 01:01:00.320
I unfortunately can't show you that
because my database isn't connected.

01:01:05.600 --> 01:01:06.890
No discard.

01:01:06.900 --> 01:01:07.500
Go away.

01:01:07.500 --> 01:01:10.710
So it's a lot of fun.

01:01:12.210 --> 01:01:15.140
There are a lot of other fun
things going on in the Java world.

01:01:15.140 --> 01:01:18.940
There's a project called Mackinac,
which is a real-time system,

01:01:18.940 --> 01:01:20.510
a large-scale real-time system.

01:01:20.520 --> 01:01:25.800
So if you happen to be in need of
running a large power plant and reading

01:01:25.800 --> 01:01:31.800
tens of thousands of sensors a second
with about four microseconds jitter,

01:01:31.800 --> 01:01:33.160
Mackinac's for you.

01:01:34.260 --> 01:01:38.160
If you're next door and you
see anybody who's Brazilian,

01:01:38.160 --> 01:01:42.800
ask them about what's
happening in Brazil with Java.

01:01:42.800 --> 01:01:44.150
It's completely crazy.

01:01:44.160 --> 01:01:51.710
Things like 96% of all of their tax
returns are filed electronically.

01:01:51.760 --> 01:01:55.020
Their whole IRS equivalent
is a big bag of Java code.

01:01:55.020 --> 01:01:57.380
And the front end is a Java app.

01:01:57.390 --> 01:02:04.200
Their equivalent of the
IRS built the tax preparation.

01:02:04.260 --> 01:02:08.860
And it runs on Macs,
it runs on Linux boxes, it runs on PCs,

01:02:08.860 --> 01:02:11.260
it runs all over the place.

01:02:11.260 --> 01:02:16.800
There's Joggle, the Java OpenGL thing,
which is what is driving this.

01:02:16.800 --> 01:02:20.250
My little slideshow guy.

01:02:20.260 --> 01:02:25.260
If you want to have some real geek fun,
go look at a website called slu.com.

01:02:25.260 --> 01:02:29.790
It's got a Java applet and a
Java backend that lets you drive

01:02:29.790 --> 01:02:34.260
a giant telescope on the top of
a mountain on the Canary Islands.

01:02:34.260 --> 01:02:40.350
If you want to do an open source project
or look in the Java developer community,

01:02:40.350 --> 01:02:46.250
there's this website, dev.java.net,
which is sort of like SourceForge,

01:02:46.320 --> 01:02:50.260
but it's a big community
of Java developers.

01:02:50.260 --> 01:02:53.010
And of course,
the fun thing for me this year

01:02:53.010 --> 01:02:55.260
is the t-shirt hurling contest.

01:02:55.260 --> 01:02:59.260
The picture here is the
trebuchet that I built last year.

01:02:59.260 --> 01:03:03.230
And I invite you all to come and join us.

01:03:04.260 --> 01:03:07.260
All of you are WWDC attendees.

01:03:07.260 --> 01:03:09.260
You get Java 1 pavilion passes.

01:03:09.260 --> 01:03:12.980
All you have to do is walk across
the street to the north lobby

01:03:12.980 --> 01:03:18.260
registration area with your badge
and go to the registration counter.

01:03:18.260 --> 01:03:23.260
And you complete the online form and
where it says enter a priority code,

01:03:23.260 --> 01:03:26.250
just type in "Apple"
and you've got a badge.

01:03:26.260 --> 01:03:29.260
You can go down and visit the pavilion.

01:03:29.260 --> 01:03:33.250
My favorite place is always the
jewel cases full of cell phones.

01:03:33.260 --> 01:03:38.440
And there's lots of people there
that will show you all kinds of

01:03:38.440 --> 01:03:44.250
high-end enterprise software,
small embedded stuff, developer tools.

01:03:44.260 --> 01:03:46.260
It's like all over the map.

01:03:46.320 --> 01:03:50.260
And the vast majority of it runs on Mac.

01:03:50.280 --> 01:03:52.260
Thank you.

01:03:56.600 --> 01:03:58.380
Thanks, James.

01:03:58.380 --> 01:04:00.380
Thank you, James.

01:04:00.380 --> 01:04:06.580
So, as of today, Sun has announced that
Sun Java Studio Creator is

01:04:06.620 --> 01:04:12.980
available on Mac OS X,
and we're extremely pleased about that.

01:04:13.100 --> 01:04:15.670
And I'm extremely pleased
because having been,

01:04:15.670 --> 01:04:19.810
you know, somewhat involved a number of
years ago in the original interface

01:04:19.810 --> 01:04:23.060
builder in the next step days,
I'm a strong believer in visual

01:04:23.180 --> 01:04:25.000
building of applications.

01:04:25.000 --> 01:04:26.990
So, Creator is a great tool.

01:04:26.990 --> 01:04:31.150
I recommend you, you know,
get a copy of it, try it out,

01:04:31.150 --> 01:04:31.990
play with it.

01:04:32.010 --> 01:04:33.260
We're very pleased.

01:04:33.340 --> 01:04:34.000
Thanks.

01:04:36.700 --> 01:04:39.230
So it's been a banner
year for developers.

01:04:39.300 --> 01:04:43.210
We have over 450,000
registered developers for

01:04:43.210 --> 01:04:45.860
Mac OS X on our developer site.

01:04:45.940 --> 01:04:49.450
We have, as you've seen,
a great set of enterprise

01:04:49.450 --> 01:04:53.430
tools for the Mac,
over 12,000 application

01:04:53.430 --> 01:04:56.060
shipping on the Mac,
so a great year,

01:04:56.060 --> 01:05:01.020
and we think we're going to have a
great year going forward as well.

01:05:01.500 --> 01:05:06.230
And speaking of that,
so today I'm pleased

01:05:06.230 --> 01:05:08.750
to be able to introduce

01:05:09.030 --> 01:05:10.500
Tiger Server.

01:05:10.550 --> 01:05:16.190
I want to take you through a few
of the features of Tiger Server,

01:05:16.190 --> 01:05:18.590
some of the top features.

01:05:18.760 --> 01:05:24.150
There's over 250 new features
in Mac OS Tiger Server,

01:05:24.150 --> 01:05:28.700
over 100 open source projects included.

01:05:28.700 --> 01:05:30.750
If you remember,
there were 80 in Panther.

01:05:30.750 --> 01:05:30.750
We've upped that to over
100 open source projects.

01:05:31.030 --> 01:05:36.580
uh first feature which is kind of near
and dear to me is 64-bit applications now

01:05:36.650 --> 01:05:42.480
in panther of course you've had 64-bit
math all along what we're introducing

01:05:42.480 --> 01:05:47.760
in tiger is 64-bit pointers so you can
have 64-bit address spaces for their

01:05:47.760 --> 01:05:52.780
for your applications this is a big deal
for anyone who has to handle uh large

01:05:52.780 --> 01:05:57.990
amounts of data at once and uh what this
what might this be i was looking the

01:05:57.990 --> 01:06:05.120
other day noah's database for example
of the surface of the world with 100

01:06:05.120 --> 01:06:09.870
meter resolution in terms of how many
feet above sea level or meters above

01:06:09.870 --> 01:06:15.820
sea level that database when you unpack
it which i actually did on my mac last

01:06:15.830 --> 01:06:20.550
week is about four gigabytes in size
so you add that and a few other things

01:06:20.620 --> 01:06:24.660
to your database and you need a lot
of stuff in memory at once well 64-bit

01:06:24.660 --> 01:06:29.770
apps in tiger is going to give you that
we support 64-bit processes we have

01:06:29.770 --> 01:06:37.150
64-bit system library we're taking a
a stepped approach here what we did

01:06:37.430 --> 01:06:42.860
first is convert system library so all
the non-gui libraries are going to be

01:06:42.870 --> 01:06:48.850
converted or are converted in tiger
to support 64 bits gcc uh support 64

01:06:48.900 --> 01:06:53.990
bits so for the non-gui portion of your
application you can run right alongside

01:06:53.990 --> 01:06:59.340
32-bit apps run a 64-bit address space
and then if your app is constructed

01:06:59.420 --> 01:07:03.590
client server so the gui runs in a client
and they communicate you can actually

01:07:03.590 --> 01:07:08.940
have a full solution that that takes
advantage of very large memory sets on

01:07:08.940 --> 01:07:16.310
xserv 64-bit tools we use lp64 so longs
and pointers are 64 bits integers are

01:07:16.410 --> 01:07:20.870
32 bits this is important because that
is the standard for unix all the other

01:07:20.870 --> 01:07:25.140
vendors have settled out on that being
the standard so for porting applications

01:07:25.140 --> 01:07:31.140
between linux or unix and Mac OS X that
becomes quite easy you don't have to have

01:07:31.140 --> 01:07:35.140
different versions of your source code so
this is a big deal we expect to see great

01:07:35.140 --> 01:07:40.550
applications showing up over the next
year in this space nt migration tool for

01:07:40.550 --> 01:07:48.730
anybody who is still running nt in their
server shops and if you're running pdc's

01:07:48.730 --> 01:07:54.390
primary domain controllers we can now
take over that job with Mac OS X server

01:07:54.410 --> 01:07:59.280
with tiger so we have a migration tool
that actually sucks out all your data

01:07:59.280 --> 01:08:05.330
from your domain controller puts it into
your tiger server user and group accounts

01:08:05.330 --> 01:08:11.340
and you can upgrade your nt server to
a Mac OS X server and and run it as a

01:08:11.350 --> 01:08:17.960
primary domain controller put your users
accounts your users home directories

01:08:17.960 --> 01:08:24.280
so support windows as a client from
Mac OS X server and have a very robust

01:08:24.280 --> 01:08:32.040
high reliability modern technology
server great number of customers are in

01:08:32.040 --> 01:08:36.230
this space they're still running domain
controllers they've not moved to open

01:08:36.230 --> 01:08:41.800
directory which is a large shift if they
want to move their OS and their server

01:08:41.800 --> 01:08:46.720
rooms to a better OS we have a great
solution there software update server

01:08:46.760 --> 01:08:51.460
this has been a big request thank you

01:08:55.400 --> 01:08:56.230
So what is this?

01:08:56.260 --> 01:08:59.400
This is a proxy cache server
for Apple software updates.

01:08:59.400 --> 01:09:05.050
This lets you, inside your firewall,
run a proxy cache server for

01:09:05.270 --> 01:09:09.510
Apple software updates that lets
you control when your customer or

01:09:09.630 --> 01:09:11.750
when your users see the updates.

01:09:11.820 --> 01:09:13.690
So you have complete control over that.

01:09:13.900 --> 01:09:18.290
It only displays those updates
to users when you approve them.

01:09:18.290 --> 01:09:21.100
And it saves network bandwidth
because you're only downloading

01:09:21.220 --> 01:09:24.120
once from Apple and everything
else is inside the firewall.

01:09:24.120 --> 01:09:25.660
So, huge request.

01:09:25.660 --> 01:09:28.290
We think this is going to be a big hit.

01:09:32.550 --> 01:09:41.620
Weblog Server,
a blog server based on Blogsum.

01:09:41.620 --> 01:09:45.780
Calendar-based navigation,
customizable themes,

01:09:45.780 --> 01:09:51.410
syndication using RDF, RSS, RSS2,
and ATOM, so we support all the acronyms

01:09:51.410 --> 01:09:53.280
for the ways that you do this.

01:09:53.280 --> 01:09:57.310
And as I mentioned, based on Blogsum,
a great blog server built

01:09:57.310 --> 01:09:59.280
right into Mac OS X Tiger.

01:09:59.280 --> 01:10:04.560
And finally,
another highly requested feature.

01:10:06.210 --> 01:10:08.740
iChat server for inside your firewall.

01:10:08.740 --> 01:10:10.140
And this is great.

01:10:10.140 --> 01:10:12.740
Run the iChat server
inside your firewall.

01:10:12.740 --> 01:10:15.660
Your communication doesn't
have to leave your enterprise.

01:10:15.660 --> 01:10:16.970
It's your namespace.

01:10:17.020 --> 01:10:18.320
You manage the namespace.

01:10:18.320 --> 01:10:21.400
All traffic can be
encrypted with SSL or TSL,

01:10:21.460 --> 01:10:23.280
so it's highly secure.

01:10:23.280 --> 01:10:26.500
It supports iChat and Jabber clients.

01:10:28.500 --> 01:10:31.350
So you can interoperate between
Windows and Mac or Linux.

01:10:31.350 --> 01:10:34.350
So this is going to be, I think,
a huge hit in the enterprise.

01:10:34.350 --> 01:10:36.400
This is a highly requested feature.

01:10:36.400 --> 01:10:39.360
Other features that
are included in Tiger,

01:10:39.410 --> 01:10:41.620
XGrid 1.0 is supported.

01:10:41.760 --> 01:10:46.690
So for turnkey grid computing,
for applications that are amenable to it,

01:10:46.690 --> 01:10:51.100
you can spread it around your
network on servers or clients.

01:10:51.320 --> 01:10:54.820
I think that's going to find a wide
amount of use in the enterprise,

01:10:54.830 --> 01:10:55.900
as I mentioned.

01:10:55.940 --> 01:10:59.790
It's already being widely used in the
scientific and academic community.

01:10:59.920 --> 01:11:03.540
Small office, home office setup,
so easy out-of-the-box setup for

01:11:03.620 --> 01:11:05.240
a small office or home office.

01:11:05.990 --> 01:11:09.070
Ackles support.

01:11:10.700 --> 01:11:13.860
Access Control List,
and mobile home directories

01:11:13.860 --> 01:11:16.250
so that you can,
from a PowerBook,

01:11:16.250 --> 01:11:20.130
sync your home directory
with the directory on a disk.

01:11:20.130 --> 01:11:23.620
Take your PowerBook, come back.

01:11:26.480 --> 01:11:32.090
And as I mentioned,
over 250 other features,

01:11:32.270 --> 01:11:33.840
over 100 open source projects.

01:11:33.870 --> 01:11:38.280
So again, we're continuing to leverage
open source into the product,

01:11:38.470 --> 01:11:41.920
focusing our innovation
on making it easy to use,

01:11:41.920 --> 01:11:46.380
easy to manage, easy to deploy,
and easy to develop for.

01:11:46.450 --> 01:11:51.030
Going to be available in
the first half of 2005.

01:11:51.830 --> 01:11:55.950
and you all get a copy of
Mac OS X Server Preview Release,

01:11:55.950 --> 01:12:02.570
Developer Preview Release for
coming to the conference.

01:12:02.570 --> 01:12:02.570
So thank you very much.

01:12:06.810 --> 01:12:11.800
I just want to mention before you go,
we have a lot of great things

01:12:11.800 --> 01:12:13.100
that you should be attending.

01:12:13.100 --> 01:12:14.820
Other sessions you should be attending.

01:12:14.820 --> 01:12:16.120
Some of them are listed up here.

01:12:16.120 --> 01:12:18.740
Apple and Scientific Computing,
Mac OS X Server Update.

01:12:18.740 --> 01:12:20.820
I especially want to
mention on Wednesday,

01:12:20.820 --> 01:12:25.720
there's an Oracle session with Tom Kite.

01:12:25.720 --> 01:12:28.600
Those of you who know Ask Tom and
are familiar with Oracle,

01:12:28.700 --> 01:12:32.140
you've got to go see Tom give a
talk about Oracle on Mac OS X.

01:12:32.140 --> 01:12:36.760
X-Serve Raid, Apple Design Awards,
et cetera.

01:12:36.760 --> 01:12:38.020
So thank you very much.

01:12:38.020 --> 01:12:38.100
Thank you.