WEBVTT

00:00:14.980 --> 00:00:16.450
Thanks a lot folks.

00:00:16.520 --> 00:00:17.530
I'm Jason Anthony Guy.

00:00:17.530 --> 00:00:20.510
I manage one of the developer
technical support teams and I have

00:00:20.510 --> 00:00:23.940
the great pleasure of bringing
up two people who have a lot,

00:00:23.940 --> 00:00:26.400
who spend their days
worrying about security.

00:00:26.510 --> 00:00:30.930
Brian Sathianathan is part of our
Emerging Technologies team and Damien

00:00:31.010 --> 00:00:34.440
Weiss is part of our Apple Consulting
team and they spend their days,

00:00:34.450 --> 00:00:37.400
as I said, thinking about how to
make things more secure.

00:00:37.480 --> 00:00:41.390
So if you'll help me welcome to
the stage Brian Sathianathan.

00:00:44.200 --> 00:00:47.380
Thank you, Jason.

00:00:47.800 --> 00:00:51.900
I would want to say welcome
again for this section 635,

00:00:52.090 --> 00:00:55.480
Security Best Practices
Using Open Source Tools.

00:00:55.480 --> 00:00:57.010
My name is Brian Sathianathan.

00:00:57.020 --> 00:00:58.990
I work for a group called
Emerging Technologies.

00:00:59.130 --> 00:01:02.540
We are involved in design,
architecture and security for

00:01:02.540 --> 00:01:04.480
Apple's internal IT group.

00:01:04.480 --> 00:01:07.290
And my co-presenter
here is Damien Weiess.

00:01:07.690 --> 00:01:10.410
He is an Apple consulting engineer.

00:01:10.620 --> 00:01:14.200
He will be introducing himself
during his presentation.

00:01:14.200 --> 00:01:18.690
And having said that,
let's move to the presentation.

00:01:21.720 --> 00:01:24.820
With the growth of the internet,
more and more people are

00:01:24.820 --> 00:01:27.920
getting into the internet,
businesses are getting into the internet,

00:01:28.000 --> 00:01:30.640
there's a lot of commerce
done on the internet,

00:01:30.640 --> 00:01:32.600
all these different factors.

00:01:32.960 --> 00:01:36.060
have created the demand for security.

00:01:36.070 --> 00:01:40.420
To make things worse,
in the past five or six years,

00:01:40.450 --> 00:01:43.180
the number of vulnerabilities
that have been reported,

00:01:43.190 --> 00:01:45.920
the threats that have been reported,
the virus attacks that

00:01:45.920 --> 00:01:48.640
have been reported,
have almost doubled.

00:01:48.690 --> 00:01:53.140
So all these events
tell us a simple story.

00:01:53.190 --> 00:01:56.180
19 letters, three words, one idea.

00:01:56.290 --> 00:01:58.340
Security is important.

00:01:58.370 --> 00:02:02.670
The good news here is that
OS X is a secure platform.

00:02:03.010 --> 00:02:06.220
It's got Unix at its core,
it's got security at its core,

00:02:06.250 --> 00:02:08.970
and it's got security at
all the different levels.

00:02:09.060 --> 00:02:12.970
It also has so many different
tools to enhance security.

00:02:13.120 --> 00:02:17.340
Especially as a system administrator,
you could use OS X to increase

00:02:17.340 --> 00:02:18.940
the security of your platform.

00:02:18.940 --> 00:02:24.110
And especially, you could use OS X as an
administrative platform to administer

00:02:24.110 --> 00:02:25.400
other machines in the network.

00:02:25.610 --> 00:02:30.040
You could use OS X to do scanning,
to do detection and so many

00:02:30.090 --> 00:02:32.670
different secure activities.

00:02:35.130 --> 00:02:36.210
What are you going to learn here?

00:02:36.380 --> 00:02:39.890
In this presentation,
initially you're going to learn about

00:02:39.890 --> 00:02:42.000
some of the user level open source tools.

00:02:42.000 --> 00:02:45.000
Tools that ship default with the OS.

00:02:45.000 --> 00:02:48.440
Tools that you can use to enhance
the security in your organization.

00:02:48.550 --> 00:02:50.000
How do you configure these tools?

00:02:50.150 --> 00:02:52.060
And what are some of the
hardening techniques that

00:02:52.120 --> 00:02:53.390
you can apply to these tools?

00:02:53.400 --> 00:02:56.110
And also you're going to look at
some of the network scanning tools.

00:02:56.150 --> 00:02:57.940
How do you use intrusion
detection software?

00:02:57.940 --> 00:02:59.610
What are some of the scanning tools?

00:02:59.610 --> 00:03:01.930
What are some of the event
correlation softwares?

00:03:02.000 --> 00:03:04.940
And how can you detect file changes,
file system changes?

00:03:05.000 --> 00:03:07.800
File tampering and all
these different activities.

00:03:07.920 --> 00:03:11.000
And finally,
you're going to see how we can use

00:03:11.000 --> 00:03:14.850
some common security libraries,
which are common to all

00:03:14.850 --> 00:03:15.730
these different tools.

00:03:15.730 --> 00:03:20.080
And how we can build our own tools
and get a general awareness of what's

00:03:20.250 --> 00:03:21.990
inside these security tools and so on.

00:03:21.990 --> 00:03:25.430
So it's going to be a
real interesting journey.

00:03:31.360 --> 00:03:34.280
We're gonna approach security
from three different angles.

00:03:34.280 --> 00:03:37.180
There are three different areas
where potential and possible

00:03:37.240 --> 00:03:38.970
security attacks can come from.

00:03:39.070 --> 00:03:43.220
From the physical side of it,
from the application side,

00:03:43.250 --> 00:03:47.190
an attacker could attack your
application and gain unauthorized

00:03:47.190 --> 00:03:50.490
access through your application,
upload malicious code

00:03:50.490 --> 00:03:53.820
through your application,
so from the application side,

00:03:53.900 --> 00:03:56.320
and also from the network side.

00:03:57.790 --> 00:04:04.560
This section is actually added to
make the presentation complete,

00:04:04.560 --> 00:04:06.950
but I'm actually going to quickly
skim through this section,

00:04:07.030 --> 00:04:08.000
physical security.

00:04:08.000 --> 00:04:11.800
This is often the hardest to obtain
because this involves humans,

00:04:11.800 --> 00:04:15.190
and it also involves
responsibility of all the different

00:04:15.600 --> 00:04:17.420
departments in the organization.

00:04:17.420 --> 00:04:19.700
So this is actually
the hardest to obtain.

00:04:20.820 --> 00:04:25.560
No matter how secure your system is,
in terms of software and hardware,

00:04:25.560 --> 00:04:27.860
if somebody gains physical
access to your system,

00:04:27.860 --> 00:04:30.700
there are so many different ways
that they can jeopardize the system.

00:04:30.700 --> 00:04:32.940
And I just want to
highlight two things here.

00:04:32.940 --> 00:04:35.890
I want to talk about
unprotected wireless networks,

00:04:35.890 --> 00:04:38.600
especially networks
that aren't protected.

00:04:38.600 --> 00:04:42.770
And people can drive around with antennas
and trying to get into these networks,

00:04:42.770 --> 00:04:45.660
and attackers can use such
networks as launchpads.

00:04:45.660 --> 00:04:48.050
Especially in the network
that you have here at Apple,

00:04:48.050 --> 00:04:50.720
there are guys out there who
are detecting and scanning.

00:04:50.820 --> 00:04:54.640
And preventing vulnerabilities
as it's happening,

00:04:54.640 --> 00:04:55.620
as I speak.

00:04:55.620 --> 00:04:59.110
And the next thing I want
to talk about is...

00:05:00.640 --> 00:05:02.500
Having multiple applications.

00:05:02.550 --> 00:05:06.840
Well, having to use multiple different
applications are inevitable because

00:05:06.950 --> 00:05:10.100
you need so many different applications
to do your day-to-day activities.

00:05:10.100 --> 00:05:14.420
But all these applications need
some form of authentication and

00:05:14.420 --> 00:05:17.260
eventually it's going to be a password.

00:05:17.260 --> 00:05:19.960
So at the end of the day,
you have to remember all these

00:05:19.960 --> 00:05:23.080
different passwords and you
cannot remember all of them.

00:05:23.080 --> 00:05:24.830
You're going to write
them in yellow stickies,

00:05:24.830 --> 00:05:27.280
stick them somewhere,
and eventually they're going

00:05:27.280 --> 00:05:31.340
to go to the trash can and
get into some attacker's hand.

00:05:31.340 --> 00:05:35.750
Or somebody who has physical access is
going to get his hand on the passwords

00:05:35.750 --> 00:05:37.900
and then a compromise can happen.

00:05:37.900 --> 00:05:43.100
So it's always the best practice to move
away from multiple password systems.

00:05:43.200 --> 00:05:45.140
Move on to a single sign-on system.

00:05:45.140 --> 00:05:48.880
Or move on to a system that has
single sign-on and single password.

00:05:48.880 --> 00:05:51.230
Or single sign-on or a
multi-factor authentication or a

00:05:51.230 --> 00:05:52.860
two-factor based authentication.

00:05:53.080 --> 00:05:54.570
system.

00:05:57.690 --> 00:06:00.320
Compromises, as I said,
will also happen at

00:06:00.320 --> 00:06:01.240
the application level.

00:06:01.240 --> 00:06:05.180
Before I go into the application level,
I would like to talk about something.

00:06:05.180 --> 00:06:08.860
As I mentioned previously,
OS X is a secure system.

00:06:08.860 --> 00:06:10.880
It is secure out of the box.

00:06:11.010 --> 00:06:13.780
And there are quite a few examples.

00:06:13.780 --> 00:06:17.040
And the two things that I'd like
to bring here is that OS X has a

00:06:17.140 --> 00:06:21.440
real good separation between user
accounts and administrative accounts.

00:06:21.440 --> 00:06:24.300
The root account is disabled by default.

00:06:25.320 --> 00:06:28.030
And especially there is,
and there are file Unix level

00:06:28.110 --> 00:06:32.480
permissions that separate you between
administrative and user accounts.

00:06:32.530 --> 00:06:34.210
And with Tiger,
you're going to have all the

00:06:34.210 --> 00:06:35.870
ACLs and all the great features.

00:06:35.870 --> 00:06:40.660
And in terms of network ports, OS X,

00:06:40.980 --> 00:06:43.420
Client has zero ports open.

00:06:43.540 --> 00:06:48.140
An out-of-the-box OS X client
does not have any ports open.

00:06:48.160 --> 00:06:54.860
A server, of course, has six ports open,
and two of which are security softwares,

00:06:54.860 --> 00:06:58.770
like SSHD on 22 and
then the Kerberos port.

00:06:58.830 --> 00:07:01.660
And four of them are
administrative ports.

00:07:04.500 --> 00:07:09.320
Now we're going to look at some
tools that enhance security.

00:07:09.320 --> 00:07:11.120
The reason that we are
looking at these tools,

00:07:11.120 --> 00:07:14.150
these tools can help
you to enhance security.

00:07:14.160 --> 00:07:17.790
These tools can provide
you with authentication,

00:07:17.810 --> 00:07:22.790
can provide you with access,
can also provide you with encryption,

00:07:22.790 --> 00:07:25.930
can provide you data integrity,
and so on and so forth.

00:07:26.000 --> 00:07:29.520
So what we're going to do is
we're going to look at some

00:07:29.520 --> 00:07:32.870
configuration and some hardening
techniques by using these tools.

00:07:33.490 --> 00:07:35.710
The first tool we're going
to talk about is OpenSSL.

00:07:35.730 --> 00:07:37.600
It's ship default with the OS X.

00:07:37.600 --> 00:07:39.960
It is an open source tool.

00:07:39.960 --> 00:07:43.440
It's an open source implementation
of the SSL protocol.

00:07:43.440 --> 00:07:46.230
It's a great tool to do
certificate management.

00:07:46.230 --> 00:07:49.540
You can manage a certificate
throughout its lifecycle.

00:07:49.610 --> 00:07:51.960
Using this tool,
you can also manage a private

00:07:51.960 --> 00:07:53.700
key throughout its lifecycle.

00:07:55.420 --> 00:07:58.860
You can use this tool to do client
server-based authentication,

00:07:58.860 --> 00:08:02.170
and you can also do
encryption using these tools.

00:08:02.170 --> 00:08:05.720
It has all these different encryption
utilities embedded in this tool.

00:08:05.720 --> 00:08:09.430
Especially what you could do is you
could actually create or generate

00:08:09.780 --> 00:08:13.370
a certificate by using OpenSSL,
and then later on you can use

00:08:13.370 --> 00:08:17.380
that certificate to do both
client and server authentication.

00:08:17.380 --> 00:08:22.440
Especially when you hit an HTTPS website,
your client browser encounters

00:08:22.590 --> 00:08:24.340
a server certificate.

00:08:24.340 --> 00:08:27.620
Then by looking at the
installed CA in the client,

00:08:27.740 --> 00:08:30.940
it actually verifies
the server certificate,

00:08:30.940 --> 00:08:32.380
and the reverse also could be done.

00:08:32.380 --> 00:08:35.180
Basically,
this tool allows you to produce

00:08:35.180 --> 00:08:39.160
certificates that can be later
on used to do authentication and

00:08:39.210 --> 00:08:41.530
encryption and so on and so forth.

00:08:43.340 --> 00:08:47.600
However, at Apple,
we do ship the CDSA frameworks.

00:08:47.800 --> 00:08:50.910
The CDSA frameworks are much more secure.

00:08:51.170 --> 00:08:54.900
It provides certificate
management functions.

00:08:55.140 --> 00:08:57.420
It provides security services.

00:08:57.420 --> 00:08:59.080
It provides encryption services.

00:08:59.080 --> 00:09:01.620
It provides a lot of the
things that OpenSSL does.

00:09:01.650 --> 00:09:05.400
And there are numerous advantages
by using the CDSA frameworks.

00:09:05.430 --> 00:09:08.230
Because if you use the CDSA frameworks,
you can do export control

00:09:08.230 --> 00:09:09.620
paperwork really easily.

00:09:09.650 --> 00:09:12.660
And then you can have so many
other different features as

00:09:12.730 --> 00:09:16.500
far as handling private keys,
public keys, and so on and so forth.

00:09:16.520 --> 00:09:17.830
And it's optimized too.

00:09:17.940 --> 00:09:22.520
So at Apple, we strongly recommend you
to use the CDSA frameworks.

00:09:22.700 --> 00:09:26.540
And if you have an old
application that uses OpenSSL,

00:09:26.560 --> 00:09:28.940
that links directly to
some OpenSSL libraries,

00:09:28.960 --> 00:09:30.500
it's okay to use OpenSSL.

00:09:30.530 --> 00:09:33.800
But if you are trying to build some
cryptographic application or some

00:09:33.800 --> 00:09:38.100
kind of public key-based application,
it's always recommended that

00:09:38.100 --> 00:09:40.890
you use the CDSA frameworks.

00:09:41.330 --> 00:09:45.460
What we see here are some of the
functions that Open SSL can do.

00:09:45.650 --> 00:09:47.710
First, generating keys.

00:09:47.970 --> 00:09:51.690
Open SSL can be used to
generate private keys.

00:09:51.960 --> 00:09:55.910
It can also be used to view keys,
view your private keys and

00:09:55.910 --> 00:09:57.850
also view your certificates.

00:09:57.880 --> 00:10:00.330
It can be used to create
certificate signing requests.

00:10:00.430 --> 00:10:04.300
So you basically give the private
key in and then tell Open Source to

00:10:04.300 --> 00:10:08.240
create a CSR signing request,
and it will give you a bunch of questions

00:10:08.240 --> 00:10:10.820
in which you need to give answers,
and then it'll eventually

00:10:10.820 --> 00:10:12.590
create your signing request.

00:10:12.600 --> 00:10:13.780
You can create a CRL.

00:10:13.870 --> 00:10:16.880
In the case of verification,
when the server verifies,

00:10:16.880 --> 00:10:19.060
when the client or the server
verifies a certificate,

00:10:19.100 --> 00:10:22.910
it'll actually look, check across a CRL,
and then you can create

00:10:22.910 --> 00:10:24.200
CRLs by using OpenSSL.

00:10:24.290 --> 00:10:28.580
And you can actually do the signing
process itself by using OpenSSL,

00:10:28.580 --> 00:10:32.440
provided you are the CA or the
signing or the administrator.

00:10:32.470 --> 00:10:36.610
You can also do certificate
format changing and formatting.

00:10:36.730 --> 00:10:38.880
For example,
certificates are in multiple formats.

00:10:38.880 --> 00:10:44.360
You can turn them from PEM formats
to DER format and so on and so forth.

00:10:44.400 --> 00:10:45.620
And then finally, you can verify.

00:10:45.620 --> 00:10:48.480
You can actually tell what
role you want OpenSSL to play,

00:10:48.480 --> 00:10:51.380
and it actually will go through the
different depths that you specify,

00:10:51.380 --> 00:10:53.780
to verify your certificate.

00:10:54.580 --> 00:10:58.260
And what we have here
is a typical example.

00:10:58.260 --> 00:11:02.520
In the case of web authentication,
if a website wants to

00:11:02.520 --> 00:11:05.110
authenticate a client,
what would the web server do?

00:11:05.120 --> 00:11:07.890
It would actually have some
kind of a password username,

00:11:07.890 --> 00:11:11.860
some kind of a basic or a digest-based
mechanism to authenticate the client.

00:11:11.860 --> 00:11:14.920
We could also use a certificate
from the client side to really

00:11:14.930 --> 00:11:16.460
authenticate the server.

00:11:16.920 --> 00:11:19.460
So in order to do that, we actually,
in this example,

00:11:19.460 --> 00:11:24.270
we modified the http.d.conf and
added some configurations to it

00:11:24.270 --> 00:11:25.800
to do such an authentication.

00:11:27.470 --> 00:11:30.610
What we did first is
that we added this entry,

00:11:30.610 --> 00:11:34.500
which basically tells you which
is the CA certificate to verify

00:11:34.500 --> 00:11:35.980
the client certificate with.

00:11:35.980 --> 00:11:39.920
The name of the CA certificate that
will verify the client certificate with.

00:11:39.940 --> 00:11:43.640
And this section tells you the
directory that you want to protect,

00:11:43.690 --> 00:11:46.640
and these are some of the
SSL options that will allow you,

00:11:46.660 --> 00:11:49.970
where you tell SSL to do
certain functionality for

00:11:49.970 --> 00:11:53.370
you to protect your website.

00:11:53.890 --> 00:11:56.530
The next tool that we're
going to look at is OpenSSH.

00:11:56.580 --> 00:12:01.060
OpenSSH is the open source
implementation of the SSH protocol.

00:12:01.060 --> 00:12:04.100
OpenSSH is shipped default in OS X.

00:12:04.100 --> 00:12:05.330
It's a great tool.

00:12:05.330 --> 00:12:09.870
It provides you with encryption,
data integrity and secure communication.

00:12:10.800 --> 00:12:15.800
It actually encrypts both your data
channel as well as your command channel.

00:12:15.800 --> 00:12:19.720
So in OS X,
the remote shell is actually OpenSSH.

00:12:19.720 --> 00:12:22.300
So it provides you
file transfer services,

00:12:22.360 --> 00:12:26.900
it provides you secure shell services,
it provides you secure copy services,

00:12:26.900 --> 00:12:28.790
it replaces all the R utilities.

00:12:28.800 --> 00:12:31.970
So we recommend you to use OpenSSH.

00:12:31.970 --> 00:12:33.510
It's a great tool.

00:12:33.790 --> 00:12:37.750
And OpenSSH has the client
as well as the server side.

00:12:37.800 --> 00:12:39.800
The client is basically
the SSH or the SSH server.

00:12:40.800 --> 00:12:42.670
The client is basically the SSH server.

00:12:42.800 --> 00:12:44.790
The client is basically the SSH server.

00:12:44.800 --> 00:12:47.620
So let's look at some hardening
techniques that you can use at the

00:12:47.630 --> 00:12:52.800
SSH D daemon to increase security.

00:12:54.000 --> 00:12:56.240
The file in question here is sshd.config.

00:12:56.240 --> 00:13:00.320
And some of the changes that we're
going to make here are basically we

00:13:00.320 --> 00:13:04.660
could filter connections that are
incoming into the SSHD based on IP.

00:13:04.660 --> 00:13:11.170
And we could give access
for incoming connections.

00:13:11.360 --> 00:13:16.440
And then something else we could do is we
could also do filtering based on users.

00:13:16.470 --> 00:13:20.450
We could only allow certain
users to connect to the system.

00:13:20.670 --> 00:13:23.140
Another important thing I'd
like to highlight here is that

00:13:23.460 --> 00:13:26.050
previously I mentioned to move
away from password systems.

00:13:26.050 --> 00:13:32.110
So you could use some kind of a public
key-based system to authenticate to SSHD,

00:13:32.360 --> 00:13:36.080
or you could even move into
a system like Kerberos.

00:13:37.020 --> 00:13:39.480
Having said that,
let's move into the next section.

00:13:39.490 --> 00:13:41.600
It's IP firewalls.

00:13:41.730 --> 00:13:45.270
We said that OS X is a very
secure platform out of the box.

00:13:45.400 --> 00:13:47.500
As soon as you start using
all the different services,

00:13:47.500 --> 00:13:49.340
eventually you're gonna
open up a lot of ports.

00:13:49.380 --> 00:13:52.110
You're gonna open up different
ports and you're gonna install

00:13:52.110 --> 00:13:53.100
all your different servers.

00:13:53.180 --> 00:13:54.800
So they are gonna have
a lot of ports too.

00:13:54.920 --> 00:13:58.020
So the best way,
when you are in a public network,

00:13:58.060 --> 00:14:01.000
to protect yourself is
by using an IP firewall.

00:14:01.020 --> 00:14:04.190
And OS X, by default,
has a firewall built into it.

00:14:04.520 --> 00:14:08.550
And if you go to the client,
if you have the IP FW firewall

00:14:08.550 --> 00:14:12.320
interface in the client,
this is the system

00:14:12.350 --> 00:14:15.380
preferences sharing panel.

00:14:15.380 --> 00:14:18.680
And in the server,
you have it in the server admin panel.

00:14:18.730 --> 00:14:22.740
So you can enable your firewalls and
protect yourself from all the attack

00:14:22.840 --> 00:14:26.270
that can happen in the public internet.

00:14:26.890 --> 00:14:29.040
And if you are a command
line kind of guy,

00:14:29.040 --> 00:14:32.760
you could actually use the IPFW utility
and build your firewalls and then

00:14:33.040 --> 00:14:35.990
centrally push firewalls and do
all kinds of different activities.

00:14:36.070 --> 00:14:38.830
So the IPFW utility goes like this.

00:14:38.940 --> 00:14:42.220
The IPFW, the command,

00:14:43.540 --> 00:14:46.940
Add commands or list or zero,
all those things.

00:14:47.010 --> 00:14:50.470
Then the action, the protocol,
the addresses,

00:14:50.600 --> 00:14:55.940
and also the externals and the source,
destination, and so on and so forth.

00:14:55.970 --> 00:14:59.440
And what you see below is
a list of commands that has

00:14:59.530 --> 00:15:01.800
been installed into the IPFW.

00:15:03.090 --> 00:15:06.330
The next interesting tool that I would
like to talk about is Kerberos.

00:15:06.330 --> 00:15:09.060
Previously, I mean,
in the slides that came before,

00:15:09.060 --> 00:15:11.870
I was talking about,
the tools that I was talking about

00:15:11.870 --> 00:15:15.430
are primarily both public key
and shared key based mechanism.

00:15:15.440 --> 00:15:17.190
Now we're going to talk about Kerberos.

00:15:17.280 --> 00:15:19.440
Kerberos is primarily a
shared key based mechanism.

00:15:19.440 --> 00:15:21.020
It actually gives security.

00:15:21.110 --> 00:15:24.480
It provides you with
authentication and single sign-on.

00:15:24.480 --> 00:15:27.310
And Kerberos is shipped
default with the OS X.

00:15:27.560 --> 00:15:30.620
It's MIT's, to be technically correct,
it's MIT's three-party

00:15:30.950 --> 00:15:32.400
key agreement protocol.

00:15:32.400 --> 00:15:36.390
So basically what it does is
that it gives us single sign-on.

00:15:36.400 --> 00:15:37.380
It gives us authentication.

00:15:37.380 --> 00:15:39.290
So how does it give us single sign-on?

00:15:39.300 --> 00:15:43.560
So to understand how Kerberos
gives single sign-on,

00:15:43.560 --> 00:15:45.420
we need to understand how
it gives us single sign-on.

00:15:45.440 --> 00:15:47.430
There are three components in the system.

00:15:47.640 --> 00:15:51.360
The client, the application or the
application server,

00:15:51.360 --> 00:15:52.050
and the KDC.

00:15:52.140 --> 00:15:58.480
So the real problem here is that the
server needs to authenticate the client.

00:15:58.500 --> 00:16:01.300
So how can the server
authenticate the client?

00:16:01.300 --> 00:16:05.180
The server can authenticate the client
by some sort of a trust credential

00:16:05.180 --> 00:16:07.560
provided by a trusted entity.

00:16:07.560 --> 00:16:11.250
And that trusted entity is
the key distribution center,

00:16:11.250 --> 00:16:12.900
or the KDC in Kerberos.

00:16:12.920 --> 00:16:15.270
The KDC will have all the
different user accounts.

00:16:15.550 --> 00:16:21.930
And what happens is the clients and the
application servers will actually have

00:16:22.210 --> 00:16:23.860
Kerberos libraries installed in them.

00:16:23.860 --> 00:16:26.080
So when somebody wants
to log into Kerberos,

00:16:26.080 --> 00:16:29.280
he will log into the
client Kerberos library.

00:16:29.280 --> 00:16:32.350
And as soon as a login happens,
a ticket-granting ticket

00:16:32.500 --> 00:16:34.230
is given to the client.

00:16:34.240 --> 00:16:38.820
So what happens is this ticket-granting
ticket is stored into the client cache.

00:16:40.480 --> 00:16:43.960
And as long as you have
a ticket-granting ticket,

00:16:43.960 --> 00:16:48.000
you can actually participate in all the
other different authentication sections.

00:16:48.000 --> 00:16:51.300
For example,
if you want to use an application,

00:16:51.300 --> 00:16:55.340
the user will go and click an
application and the application opens up.

00:16:55.340 --> 00:16:58.080
And the application sees, okay,
there's a ticket-granting ticket,

00:16:58.310 --> 00:17:00.230
because the application
is sensitive of Kerberos.

00:17:00.260 --> 00:17:02.900
So it sees that there's
a ticket-granting ticket,

00:17:03.000 --> 00:17:06.430
and it takes the ticket-granting ticket,
presents it to the KDC,

00:17:06.510 --> 00:17:09.140
and it'll get a service
ticket for that session.

00:17:09.530 --> 00:17:12.680
As soon as you get a service ticket,
the application will take a one-time

00:17:12.850 --> 00:17:16.900
token from the service ticket and
present that through its custom protocol.

00:17:16.900 --> 00:17:19.590
It could also use Kerberos,
but in most applications,

00:17:19.590 --> 00:17:23.300
they use their own protocol to take
that token from the service ticket.

00:17:23.300 --> 00:17:26.780
It can be a GSS token,
or if you're familiar with the APIs,

00:17:26.780 --> 00:17:28.700
it can be a GSS or a KRB token.

00:17:28.700 --> 00:17:31.620
And it takes the token,
it presents it to the application server,

00:17:31.620 --> 00:17:34.260
and the application server
verifies and gives access.

00:17:34.260 --> 00:17:36.910
And as long as you have a TGT,
all the different

00:17:37.200 --> 00:17:39.120
applications can participate.

00:17:39.360 --> 00:17:44.250
So using one TGT,
using multiple different service tickets,

00:17:44.260 --> 00:17:46.900
the applications can
participate in a single sign-on.

00:17:46.900 --> 00:17:48.930
The beauty here is that
when a user logs in,

00:17:48.930 --> 00:17:51.220
the password never
travels across the wire.

00:17:52.860 --> 00:17:57.720
And the TGT and the service
tickets are actually time limited,

00:17:57.720 --> 00:18:01.590
so it increases the security.

00:18:02.270 --> 00:18:06.770
And what we have here is the
Kerberos configuration file.

00:18:06.850 --> 00:18:10.020
In OS X, it's in library preferences.

00:18:10.020 --> 00:18:12.240
It's called edu.mit.kerberos.

00:18:12.420 --> 00:18:15.240
And if you are using some
sort of a directory mechanism,

00:18:15.240 --> 00:18:18.100
like if you enable
Active Directory plugin,

00:18:18.100 --> 00:18:21.740
or if you enable an LDAP-based plugin,
and you want to use

00:18:21.740 --> 00:18:24.340
Kerberos along with it,
this file would be

00:18:24.340 --> 00:18:26.100
automatically created for you.

00:18:26.130 --> 00:18:32.100
And if you are connecting to
a different Kerberos server,

00:18:32.120 --> 00:18:34.810
like a Solaris server or something,
you could create this file.

00:18:34.900 --> 00:18:36.730
So let me quickly go through this file.

00:18:36.990 --> 00:18:40.700
So each KDC belongs to
a realm or a domain,

00:18:40.700 --> 00:18:43.230
just like your system,
it belongs to a domain.

00:18:43.390 --> 00:18:44.840
So it belongs to a realm.

00:18:44.850 --> 00:18:47.600
And what you see here are
the realm configurations.

00:18:47.630 --> 00:18:53.140
And what you see here is the entry
that tells your client Kerberos

00:18:53.140 --> 00:18:55.650
libraries where your KDC is.

00:18:55.750 --> 00:18:58.020
It'll give you the
domain name of the KDC,

00:18:58.050 --> 00:19:00.110
as well as the ports of the KDC.

00:19:02.040 --> 00:19:04.700
And you can have multiple
KDC entries down there.

00:19:04.710 --> 00:19:08.610
And in case of a failure,
in case of the first KDC fails,

00:19:08.800 --> 00:19:11.140
it would naturally fail
over to the second KDC,

00:19:11.160 --> 00:19:13.300
and so on and so forth.

00:19:14.000 --> 00:19:18.000
In our Apple IT group,
we did have the exact same problem.

00:19:18.000 --> 00:19:20.860
We had a number of applications,
we had tons of them,

00:19:20.860 --> 00:19:22.630
and then we had tons of
passwords to remember.

00:19:22.640 --> 00:19:26.330
So what we did is we moved on
from our password scheme to

00:19:26.330 --> 00:19:28.650
a single sign-on base scheme.

00:19:28.650 --> 00:19:30.920
How did we do that?

00:19:31.070 --> 00:19:34.890
We actually used the framework that
was deployed in the Western platform,

00:19:35.010 --> 00:19:37.270
the Kerberos framework,
and we built a login

00:19:37.270 --> 00:19:38.890
application on top of that.

00:19:39.720 --> 00:19:43.700
And we also added some more
features on top of this application.

00:19:43.700 --> 00:19:45.660
So what did we actually add?

00:19:45.680 --> 00:19:48.940
The things that we added was we
added extension based on activity.

00:19:48.940 --> 00:19:52.950
If a user is sitting actively on
his terminal and having some kind

00:19:53.020 --> 00:19:57.160
of keystrokes or mouse movements,
then the tickets will be renewed.

00:19:57.160 --> 00:19:59.360
The TGT that's obtained will be renewed.

00:19:59.360 --> 00:20:02.680
The TGT eventually will be taken
for a shorter time and will keep on

00:20:02.780 --> 00:20:04.880
renewing it according to activity.

00:20:04.880 --> 00:20:07.760
And something else we added
was selective participation.

00:20:07.760 --> 00:20:09.420
There are certain
mission-critical applications.

00:20:09.720 --> 00:20:11.320
There are certain applications
which do not want to

00:20:11.320 --> 00:20:12.460
participate in single sign-on.

00:20:12.460 --> 00:20:14.620
So these applications can
centrally be disabled from

00:20:14.620 --> 00:20:16.200
participating in single sign-on.

00:20:16.200 --> 00:20:20.000
Or the user can decide whether
his application to participate

00:20:20.000 --> 00:20:23.140
in single sign-on or not,
and so on and so forth.

00:20:23.190 --> 00:20:25.080
We also added another nice feature.

00:20:25.080 --> 00:20:27.820
It's called login slash logout hooks.

00:20:27.820 --> 00:20:30.920
Especially if somebody is logged
into the single sign-on system,

00:20:30.920 --> 00:20:34.310
and when somebody goes into the
Kerberos window and signs off,

00:20:34.420 --> 00:20:37.720
it would naturally,
the hooks would tell each application,

00:20:37.720 --> 00:20:39.700
will call back each application, and say,
hey,

00:20:39.700 --> 00:20:39.700
I'm going to log out of this application.

00:20:39.750 --> 00:20:41.430
And they would say, look,
this guy has already logged out.

00:20:41.500 --> 00:20:43.550
And the applications could
take their own actions.

00:20:43.560 --> 00:20:45.700
And the vice versa is true, too.

00:20:45.700 --> 00:20:46.870
You could actually install a hook.

00:20:46.880 --> 00:20:50.880
When people log out of applications,
the central login

00:20:50.880 --> 00:20:52.640
system would know about.

00:20:53.930 --> 00:20:58.280
One of the most interesting things we did
is that we added pluggable authentication

00:20:58.570 --> 00:21:00.100
to our single sign-on system.

00:21:00.180 --> 00:21:03.740
So we basically added Kerberos
hardware authentication,

00:21:03.740 --> 00:21:06.540
a SAM based security authentication,
module based authentication.

00:21:06.550 --> 00:21:09.730
So we could do Kerberos authentication,
we could bootstrap the

00:21:09.730 --> 00:21:12.160
authentication by using a smart card.

00:21:12.200 --> 00:21:14.300
And that was a very
cool thing that we did.

00:21:14.470 --> 00:21:17.940
And what we are going to
see here is a tiny demo.

00:21:18.200 --> 00:21:20.770
It's going to be actually a video demo.

00:21:21.010 --> 00:21:23.440
So what you see here
is a Kerberos window.

00:21:23.470 --> 00:21:25.300
And we don't have any tickets right now.

00:21:25.360 --> 00:21:29.180
So we are going to the central
application that we created.

00:21:29.220 --> 00:21:31.720
And then we are logging into the system.

00:21:31.740 --> 00:21:34.180
Oops, the caps is on.

00:21:34.180 --> 00:21:37.980
Okay, let me go back, re-tap everything.

00:21:41.440 --> 00:21:42.830
That's a long password.

00:21:42.930 --> 00:21:43.630
So let me sign in.

00:21:43.720 --> 00:21:46.700
I'm signing into the system,
and I'm also automatically

00:21:46.700 --> 00:21:48.040
signed into Kerberos.

00:21:48.040 --> 00:21:50.890
So it shows my TGT.

00:21:51.290 --> 00:21:54.630
- And I can see my TGT there,
and it's time limited.

00:21:54.630 --> 00:21:56.010
It's taken for an hour.

00:21:56.080 --> 00:21:58.450
And now let me go back to,
since I have the TGT,

00:21:58.450 --> 00:22:02.120
I can go back to the application
and sign using the applications.

00:22:02.220 --> 00:22:03.210
So now I'm signed in.

00:22:03.540 --> 00:22:06.810
So if I go back to Kerberos,
I should see...

00:22:09.030 --> 00:22:11.270
I'm actually moving,
dragging the application away.

00:22:11.270 --> 00:22:13.570
If I go back to Kerberos,
I will also see my service

00:22:13.570 --> 00:22:15.450
ticket for that application.

00:22:15.520 --> 00:22:19.190
And now I'm wiping off my service ticket,
and it automatically logged

00:22:19.190 --> 00:22:20.180
me off the application.

00:22:20.210 --> 00:22:25.700
If I try to sign in again,
it'll actually prompt me my login window.

00:22:26.470 --> 00:22:30.290
So you also can actually use the
existing Kerberos framework and start

00:22:30.420 --> 00:22:32.240
building single sign-on systems.

00:22:32.260 --> 00:22:34.880
It's really easy to do,
and it's real powerful,

00:22:34.880 --> 00:22:36.420
and it's really good.

00:22:36.690 --> 00:22:39.740
And having said that,
let's move on to the next section.

00:22:40.030 --> 00:22:41.280
It's the keychains.

00:22:41.290 --> 00:22:44.710
Well, in the OS X,
the keychain is the default

00:22:44.820 --> 00:22:47.790
central repository for all
passwords and all secrets.

00:22:47.930 --> 00:22:51.370
So you could store passwords as
well as certificates and all these

00:22:51.450 --> 00:22:52.640
different things in the keychain.

00:22:52.690 --> 00:22:56.960
And especially if you want
OS X native applications like

00:22:56.960 --> 00:23:00.380
Safari and the CF framework and
all these different components to

00:23:00.380 --> 00:23:04.420
really recognize your certificates,
you need to install

00:23:04.420 --> 00:23:05.800
them into the keychains.

00:23:05.820 --> 00:23:08.890
You have to install them
into the anchors file.

00:23:11.320 --> 00:23:13.260
So we have seen all the basic tools.

00:23:13.260 --> 00:23:16.620
Now let's see what else can be done.

00:23:17.020 --> 00:23:20.760
So I'm going to toss it on to
Damien to lead us from here.

00:23:20.920 --> 00:23:21.740
Damien, here you go.

00:23:23.950 --> 00:23:25.630
Thank you, Brian.

00:23:26.670 --> 00:23:27.820
My name's Damien Weiss.

00:23:27.860 --> 00:23:31.680
I work for the
Apple Enterprise Consulting Group,

00:23:31.760 --> 00:23:34.380
dealing with deployment
and integration issues.

00:23:34.430 --> 00:23:39.880
And I spend most of my time,
most of my focus on security issues.

00:23:39.990 --> 00:23:41.780
Going to talk about
what else can be done.

00:23:41.880 --> 00:23:45.820
We're gonna talk about password policies,
scanning, file system changes and

00:23:45.820 --> 00:23:47.590
network intrusion detection.

00:23:47.710 --> 00:23:49.880
Let's talk about password policies.

00:23:49.950 --> 00:23:56.350
You know, passwords are the main
gate into your machine.

00:23:56.710 --> 00:24:03.310
They are the easiest way in and,
if you make them so, the hardest way in.

00:24:04.280 --> 00:24:09.350
I have a friend of mine who
aspires to be a screenwriter and

00:24:09.350 --> 00:24:11.500
he loves to say all the time,
he loves to say, you know,

00:24:11.680 --> 00:24:14.080
if you had a thousand monkeys
and a thousand typewriters

00:24:14.090 --> 00:24:17.400
typing for a thousand years,
they'd eventually turn out the

00:24:17.400 --> 00:24:19.760
screenplay for The Godfather.

00:24:19.850 --> 00:24:21.920
He also likes to say that
if they give him a day,

00:24:21.920 --> 00:24:25.030
they would turn out the screenplay
for Titanic and the monkeys

00:24:25.030 --> 00:24:28.840
would have enough time to smoke
a couple of cigarettes afterwards.

00:24:28.990 --> 00:24:34.010
And that aside,
I see a lot of folks when I go on site,

00:24:34.140 --> 00:24:37.800
I see a lot of folks who have
the Titanic of passwords.

00:24:37.900 --> 00:24:41.810
Their password policies are very
lax and indeed I'll ask them,

00:24:41.870 --> 00:24:45.290
I'll say, well, you know,
what's your password or, you know,

00:24:45.300 --> 00:24:46.900
what's this user's password?

00:24:46.900 --> 00:24:50.930
And they'll tell me and generally
it's the username plus a number,

00:24:50.960 --> 00:24:54.560
which is the first thing, of course,
people scan for.

00:24:54.660 --> 00:24:58.740
You know, what do we do at Apple?

00:24:58.740 --> 00:25:05.830
We're not here to help you guys out.

00:25:06.000 --> 00:25:08.300
by actually implementing
it into Open Directory.

00:25:08.300 --> 00:25:10.360
And there's a mistake
up here on the screen,

00:25:10.360 --> 00:25:11.440
where it says work group manager.

00:25:11.440 --> 00:25:13.340
That's supposed to say server admin.

00:25:13.360 --> 00:25:16.180
So if you go to server admin,
then to the Open Directory tab,

00:25:16.180 --> 00:25:18.920
you'll actually see there,
you can set a number of things.

00:25:18.920 --> 00:25:22.370
You can set password policies,
such as whether or not the

00:25:22.370 --> 00:25:26.100
user can have a password,
with their name in it,

00:25:26.100 --> 00:25:28.140
or whether or not they
have to have numbers,

00:25:28.140 --> 00:25:30.380
or anything along those lines.

00:25:30.410 --> 00:25:33.400
Also,
password generators are great to use.

00:25:33.400 --> 00:25:34.730
There's hundreds of them out there.

00:25:34.810 --> 00:25:38.260
If you go to Google and search
for simply password generator,

00:25:38.270 --> 00:25:41.180
at least 100 will pop up.

00:25:41.220 --> 00:25:45.480
My two favorite, personally,
are those that go ahead and generate

00:25:45.480 --> 00:25:49.920
passwords that are not in the dictionary,
but nevertheless sound

00:25:50.180 --> 00:25:52.160
like normal English words.

00:25:52.160 --> 00:25:57.080
Indeed, what you find is that they're
words that sound like words

00:25:57.080 --> 00:26:00.760
that you would use every day,
but grossly misspelled.

00:26:00.810 --> 00:26:04.740
Also, are those password generators
that generate passwords,

00:26:04.750 --> 00:26:11.500
that are easy to type,
but are just an amalgam of letters,

00:26:11.500 --> 00:26:15.060
and numbers, and punctuation marks?

00:26:15.150 --> 00:26:17.860
Finally, administrator password policies.

00:26:17.880 --> 00:26:19.660
You know,

00:26:20.320 --> 00:26:25.200
I remember the first time as a system
administrator I was actually working

00:26:25.200 --> 00:26:29.110
at the defense department at DISA.

00:26:29.240 --> 00:26:34.570
And the administrator,
the root password for 35

00:26:34.570 --> 00:26:42.250
Next Step machines was simply DISA and
then the name of that computer.

00:26:42.610 --> 00:26:44.690
And that's what it was
when I first arrived.

00:26:44.700 --> 00:26:48.560
And needless to say,
about 15 years later,

00:26:48.560 --> 00:26:50.600
things don't seem to change at clients.

00:26:50.600 --> 00:26:53.990
Part of the problem is too many
machines to remember the root password,

00:26:53.990 --> 00:26:55.560
administrator password for.

00:26:55.660 --> 00:26:58.570
I would strongly suggest
that each password be unique.

00:26:58.600 --> 00:27:02.070
Don't try to go ahead and make
the mistake of setting up the

00:27:02.070 --> 00:27:06.200
administrator password based on
the company name or your manager's

00:27:06.200 --> 00:27:08.580
name or anything along those lines.

00:27:08.600 --> 00:27:10.800
Because you really need
to protect yourself,

00:27:10.950 --> 00:27:14.500
especially on the admin password,
from both external attacks

00:27:14.500 --> 00:27:16.560
but also internal attacks.

00:27:16.600 --> 00:27:20.600
The guy three cubes down knows
what your manager's name is.

00:27:21.700 --> 00:27:24.380
We're going to talk about
network scanning and monitoring,

00:27:24.380 --> 00:27:27.030
and we're going to
talk about these tools.

00:27:27.450 --> 00:27:31.990
But first, you know,
these tools really generate a lot

00:27:31.990 --> 00:27:35.880
of output and the real goal is to go
ahead and essentially break into your

00:27:35.880 --> 00:27:38.580
network and find the weaknesses for you.

00:27:38.640 --> 00:27:42.330
And a lot of folks for some reason seem
to think a good idea is just to leave the

00:27:42.330 --> 00:27:49.100
results of this on the hard drive just
somewhere unencrypted or world readable.

00:27:49.320 --> 00:27:50.520
Please secure them.

00:27:50.560 --> 00:27:55.680
My favorite technique is to
actually use one of those USB,

00:27:55.800 --> 00:28:58.400
[Transcript missing]

00:28:58.550 --> 00:29:03.230
Folks have an easy way of plugging
in a computer and then hiding it

00:29:03.230 --> 00:29:07.580
from you in order to listen to
all the traffic on the network.

00:29:10.820 --> 00:29:13.000
Let's talk about Nessus.

00:29:13.020 --> 00:29:14.800
Nessus is a great utility.

00:29:14.980 --> 00:29:19.100
It goes ahead and does
more than obviously Nmap.

00:29:19.340 --> 00:29:22.000
It goes ahead and performs scans.

00:29:22.020 --> 00:29:29.160
It looks and actively sweeps the network
based on plugins that you've given it.

00:29:29.160 --> 00:29:33.990
So, for instance,
database plugins or plugins

00:29:37.100 --> 00:29:39.740
There we go, sorry about that.

00:29:39.880 --> 00:29:44.140
It goes ahead and has plug-ins for
a number of operating systems and

00:29:44.140 --> 00:29:47.240
a number of protocols and services,
allows you to go ahead and

00:29:47.240 --> 00:29:50.140
specify exactly what it is
that you're scanning for.

00:29:50.270 --> 00:29:52.140
And those results are very good.

00:29:52.140 --> 00:29:55.560
You can go ahead and rescan
over and over and over again.

00:29:55.560 --> 00:29:59.160
I have a client who actually
runs Nessus day and night,

00:29:59.160 --> 00:30:02.890
specifically just looking for
new stuff and new vulnerabilities

00:30:02.890 --> 00:30:04.510
out there on the network.

00:30:04.900 --> 00:30:09.570
OSM really straddles the line
between scanning and monitoring

00:30:09.670 --> 00:30:12.090
and intrusion detection,
which we're going to

00:30:12.090 --> 00:30:12.960
get to later on here.

00:30:12.960 --> 00:30:15.950
But I really wanted to stick it
here in the scanning and monitoring.

00:30:15.950 --> 00:30:21.840
It really is sort of the overlord,
if you want to think of it that way,

00:30:21.840 --> 00:30:23.360
of security utilities.

00:30:23.360 --> 00:30:28.310
It gathers information from everywhere,
from log files, from scans,

00:30:28.310 --> 00:30:32.270
from anything and everything
that it can possibly find.

00:30:32.480 --> 00:30:36.820
And its goal is to bring that
all together in one place.

00:30:36.930 --> 00:30:39.190
But more importantly,
to bring it together in one place so

00:30:39.210 --> 00:30:44.110
it gets a better read on the network,
so as to eliminate any false positives,

00:30:44.140 --> 00:30:47.330
excuse me,
any false negatives of intrusion

00:30:47.340 --> 00:30:49.530
detection on your network.

00:30:51.920 --> 00:30:52.640
What else can you do?

00:30:52.640 --> 00:30:54.600
Well, you can also scan the file system.

00:30:54.600 --> 00:30:59.080
What I mean by that is scanning
the file system is simply going

00:30:59.240 --> 00:31:03.470
The first step is to look
at each file and save it.

00:31:03.500 --> 00:31:07.990
It allows you to know when
changes have been made.

00:31:07.990 --> 00:31:10.390
Why do you want to do that?

00:31:10.390 --> 00:31:15.790
When a break-in happens,
the evidence of the break-in and the

00:31:15.800 --> 00:31:22.310
attempt at a break-in is generally
found somewhere on the file system.

00:31:22.690 --> 00:31:26.860
Also, after a break-in has happened,
any back doors that are left on

00:31:26.960 --> 00:31:30.520
the machine are definitely found
somewhere within that file system.

00:31:30.600 --> 00:31:32.520
Knowing about a break-in
after it happens,

00:31:32.520 --> 00:31:35.960
very soon after it happens,
helps to prevent further break-ins.

00:31:36.080 --> 00:31:39.770
You can see that the first machine
to go is generally the beachhead,

00:31:39.770 --> 00:31:42.180
and then from there,
because all the machines are

00:31:42.180 --> 00:31:46.060
generally trusting of each
other on some level or another,

00:31:46.130 --> 00:31:49.490
or in the case of most machines,
you know, all the administrator

00:31:49.970 --> 00:31:52.490
passwords are the same,
it allows the ease of breaking

00:31:52.560 --> 00:31:53.990
into further machines.

00:31:54.000 --> 00:31:57.530
So you really want to stop
that as quickly as possible.

00:31:57.590 --> 00:32:00.560
I'm going to talk about a couple
of tools that allow you to scan,

00:32:00.560 --> 00:32:01.920
Tripwire and Radmine.

00:32:02.050 --> 00:32:03.180
First is Tripwire.

00:32:03.300 --> 00:32:05.590
Tripwire is great for
locking down one machine,

00:32:05.590 --> 00:32:07.320
even if it's not on the network.

00:32:07.370 --> 00:32:10.700
It goes ahead and just like I said,
it does a checksum on every

00:32:10.700 --> 00:32:15.460
single file on your network,
excuse me, on that one machine.

00:32:15.500 --> 00:32:18.200
And it goes ahead and
detects any changes.

00:32:18.200 --> 00:32:22.880
So you run it every night at
1:00 in the morning or whenever,

00:32:22.880 --> 00:32:26.620
and it will go ahead and tell
you what files have been changed.

00:32:26.770 --> 00:32:28.410
There's a lot of files
that change every day,

00:32:28.410 --> 00:32:32.180
obviously log files,
those kind of things, UTEM, WTEM files,

00:32:32.180 --> 00:32:34.200
those things change normally.

00:32:34.350 --> 00:32:38.650
But what you're looking for obviously
changes in files and in directories

00:32:38.680 --> 00:32:40.950
that shouldn't be changing at all.

00:32:41.000 --> 00:32:44.860
A good thing to look here is SUID bits.

00:32:44.860 --> 00:32:48.100
SUID bits that have been
changed or added to files.

00:32:48.100 --> 00:32:54.400
An old popular way of backdoor,
an old popular backdoor was to go

00:32:54.400 --> 00:33:00.840
ahead and find an SUID file or actually
create an SUID file depending on

00:33:00.840 --> 00:33:05.600
what kind of access the cracker had
to the machine and copy in shell,

00:33:05.630 --> 00:33:12.310
seashell, any shell file into that
container of a file and thus

00:33:12.620 --> 00:33:14.590
granting you an SUID shell file.

00:33:15.330 --> 00:33:16.490
Radmine.

00:33:16.490 --> 00:33:22.300
You know, Radmine won one of the design
awards for last year's WWDC.

00:33:22.300 --> 00:33:23.400
It's a great utility.

00:33:23.400 --> 00:33:26.270
If you guys haven't looked at it,
I encourage you strongly to take a look.

00:33:26.450 --> 00:33:31.760
It's really a client-server tripwire
is the best way I know to describe it.

00:33:31.760 --> 00:33:34.910
The first thing that you would
do is you'd first configure your

00:33:34.910 --> 00:33:41.640
Radmine server to take the load sets,
which are those checksum files,

00:33:41.640 --> 00:33:46.230
and go ahead then and go to each
one of the clients or use ARD,

00:33:46.230 --> 00:33:50.060
for that matter,
to run the assistant to go ahead

00:33:50.130 --> 00:33:52.410
and create those load sets.

00:33:52.420 --> 00:33:55.270
At that point,
you can go ahead and automatically

00:33:55.690 --> 00:33:59.740
check for any changes and even
possibly roll back any changes.

00:34:00.460 --> 00:34:05.240
I'm going to talk about network intrusion
detection and why you want to do that.

00:34:05.240 --> 00:34:10.500
Well, as the slide says, very simply,
another pair of eyes never hurts.

00:34:10.580 --> 00:34:14.130
And in this case,
multiple sets of eyes never hurt.

00:34:14.220 --> 00:34:16.500
And also, machines never sleep.

00:34:16.500 --> 00:34:21.060
And I have noticed that it
seems that crackers seem to work

00:34:21.830 --> 00:34:25.630
best or at the very least most
frequently from about 10 o'clock

00:34:25.760 --> 00:34:28.130
to about 4 o'clock in the morning.

00:34:28.240 --> 00:34:31.690
And that's generally the
time when I am dead asleep.

00:34:34.400 --> 00:36:27.700
[Transcript missing]

00:36:28.900 --> 00:36:31.640
Snort, you know, it is a big mouthful.

00:36:31.640 --> 00:36:36.650
I've been practicing this slide over
the last week and every time I get to

00:36:36.650 --> 00:36:38.640
the sentence I'm always just blown away.

00:36:38.790 --> 00:36:45.140
Snort uses user defined preprocessors and
rulesets to detect suspicious packets.

00:36:45.310 --> 00:36:50.720
And what that means is,
sounds like someone applauded for that.

00:36:51.940 --> 00:36:55.060
I didn't know that people
were in doubt of my literacy,

00:36:55.060 --> 00:36:57.010
but who knew?

00:36:57.250 --> 00:36:59.640
No, I'm sorry.

00:36:59.870 --> 00:37:02.200
It uses rulesets to
detect suspicious packets.

00:37:02.200 --> 00:37:06.100
And what that means is there's a number
of rulesets that run within Snort.

00:37:06.130 --> 00:37:09.190
And what it does is it uses

00:37:10.600 --> 00:37:37.100
[Transcript missing]

00:37:37.260 --> 00:37:39.600
Written like this.

00:37:39.730 --> 00:37:42.840
First you have an action,
which in this case is alert,

00:37:42.840 --> 00:37:44.440
I have in this example.

00:37:44.470 --> 00:37:49.290
And the next one is the protocol,
which will be TCP.

00:37:49.640 --> 00:37:53.840
The source address is any
and the port address is any.

00:37:53.980 --> 00:37:56.740
Now what I've gone ahead and done
is I'm going to set up this rule

00:37:56.740 --> 00:38:03.500
for detecting any Mount D access
from anywhere to my local network.

00:38:03.630 --> 00:38:11.320
So I've got my destination address which
is the 192.168 with a net mask of 24.

00:38:11.630 --> 00:38:14.490
Port number 111,
which is the mountd port,

00:38:14.490 --> 00:38:18.810
and the actual specific content,
which is within that packet,

00:38:18.810 --> 00:38:23.180
which is saying, hey, look,
this is a mountd packet.

00:38:23.240 --> 00:38:26.580
And it will actually go ahead and
what actually needs to happen,

00:38:26.580 --> 00:38:29.880
well, we're going to go ahead and
message to Snort Log that

00:38:29.880 --> 00:38:32.420
mountd access has happened.

00:38:32.860 --> 00:38:34.020
Pre-processors.

00:38:34.020 --> 00:38:36.740
Pre-processors run before the rule sets.

00:38:36.800 --> 00:38:40.630
They allow for packet modification
analysis before handing it off to that

00:38:40.630 --> 00:38:42.650
detection engine or those rule sets.

00:38:42.880 --> 00:38:50.390
And so what that means is that, you know,
it's those things, the pre-processors run

00:38:50.390 --> 00:38:51.650
before the rule sets.

00:38:51.990 --> 00:38:56.900
If you have certain packets that
you don't want to be detected or

00:38:56.900 --> 00:39:01.800
if you're getting a lot of false
negatives on specific type of

00:39:01.800 --> 00:39:07.470
packets or from one specific machine,
the place to go ahead and exempt those

00:39:07.570 --> 00:39:09.590
packets is there in the pre-processors.

00:39:09.800 --> 00:39:12.870
Go ahead and specify them
in the configuration file

00:39:12.950 --> 00:39:14.710
just like we have up here.

00:39:15.110 --> 00:39:18.810
The output modules, you know,
the output modules are simply just

00:39:18.810 --> 00:39:23.260
telling SnoRT where to send the rule
set and preprocessor information.

00:39:23.300 --> 00:39:26.840
So, you know, as a packet comes in,
goes through the rule sets,

00:39:26.960 --> 00:39:30.470
where does SnoRT,
or where is SnoRT supposed

00:39:30.560 --> 00:39:33.160
to write that information to?

00:39:33.160 --> 00:39:35.980
And that's where the output
modules come into play.

00:39:35.980 --> 00:39:40.200
I know some clients like to go
ahead and specify all the output,

00:39:40.200 --> 00:39:42.100
just go into one huge hunking file.

00:39:42.100 --> 00:39:46.100
And others like to go
ahead and break it up very,

00:39:46.100 --> 00:39:47.310
very small.

00:39:50.560 --> 00:39:52.600
We've talked about what
else you should do,

00:39:52.600 --> 00:39:55.500
and now I'm going to talk
about what you shouldn't do.

00:39:55.650 --> 00:39:57.620
Please don't enable the R utilities.

00:39:57.930 --> 00:40:00.190
R Shell, R Copy, etc.

00:40:00.240 --> 00:40:06.260
I have been guilty of
doing this in the past.

00:40:06.270 --> 00:40:07.940
However, the models have changed now.

00:40:07.940 --> 00:40:12.500
We actually have alternatives
to each one of these utilities.

00:40:12.500 --> 00:40:15.870
While the utilities themselves
specifically are not secure,

00:40:15.890 --> 00:40:18.440
in order to go ahead and
get them up and running,

00:40:18.510 --> 00:40:21.500
you have to go ahead and
open up security holes.

00:40:21.500 --> 00:40:26.270
Telnet, there's a great alternative
Brian went ahead and talked about,

00:40:26.300 --> 00:40:27.490
Secure Shell.

00:40:27.500 --> 00:40:28.420
And Finger.

00:40:28.570 --> 00:40:32.480
I've noticed,
the first time I was introduced to Unix,

00:40:32.580 --> 00:40:34.500
the first thing I was actually
introduced to was Finger.

00:40:34.500 --> 00:40:37.580
And I thought this was earth shattering,
that you could go ahead and actually

00:40:37.620 --> 00:40:40.500
stick your status in somewhere
and people could actually read it.

00:40:40.500 --> 00:40:42.380
This was the greatest
thing since sliced bread.

00:40:42.500 --> 00:40:48.670
Obviously, all the functionality of
Finger has now been replaced by

00:40:48.670 --> 00:40:51.500
AIM or by personal web pages.

00:40:52.280 --> 00:40:58.980
Also,
try not to use non-SSL mail protocols.

00:40:59.790 --> 00:41:03.830
I love to go to client sites,
set up my PowerBook,

00:41:03.950 --> 00:41:07.730
let it scan for an hour,
and then show the clients all the

00:41:07.730 --> 00:41:11.220
mail passwords and usernames that
I've gone ahead and harvested just

00:41:11.310 --> 00:41:12.690
by listening to their network.

00:41:12.700 --> 00:41:17.230
It usually brings a little bit of unease,
but then they realize, "Hey,

00:41:17.230 --> 00:41:21.250
we need to do something about
this." And that's what I enjoy,

00:41:21.270 --> 00:41:23.570
is actually fixing those problems.

00:41:23.700 --> 00:41:29.840
FTP, use SFTP or Secure Shell.

00:41:30.070 --> 00:41:34.100
While limited use of
TFTP isn't inherently insecure,

00:41:34.260 --> 00:41:38.740
you see a lot of times folks trying to
extend TFTP beyond what it was designed

00:41:38.740 --> 00:41:41.110
to do and thus making it insecure.

00:41:41.190 --> 00:41:45.240
And finally,
non-open directory based authentication.

00:41:45.240 --> 00:41:48.850
There's a lot of problems that we
see outside of open directory and

00:41:48.850 --> 00:41:51.180
I would encourage you not to enable it.

00:41:51.640 --> 00:41:53.530
So with that,
I'm going to go ahead and invite

00:41:53.540 --> 00:41:56.880
Brian back on up here and he'll talk
to you about writing your own tools.

00:41:56.880 --> 00:41:58.880
Goodbye.

00:42:03.290 --> 00:42:04.490
Thanks, Damien.

00:42:04.700 --> 00:42:05.400
That was wonderful.

00:42:05.400 --> 00:42:08.180
We saw a great list of all
these different open source

00:42:08.180 --> 00:42:12.120
tools and how you can take
advantage of them to do scanning,

00:42:12.120 --> 00:42:14.980
intuition detection, correlation and all
these different things.

00:42:15.180 --> 00:42:19.380
Especially as an administrator,
one of the things that you really need

00:42:19.380 --> 00:42:23.760
to know is when you use all these tools,
what is inside these tools?

00:42:23.800 --> 00:42:26.860
And to get a general awareness,
you have to know what are the

00:42:26.860 --> 00:42:28.490
components of these tools.

00:42:28.520 --> 00:42:31.970
So I'm going to talk to you about
some of the network components

00:42:31.970 --> 00:42:35.700
or some of the libraries these
tools are constructed with.

00:42:35.700 --> 00:42:37.790
And most of them are
open source libraries.

00:42:37.900 --> 00:42:41.520
And the first library that I'm
going to talk about is libpcap.

00:42:41.910 --> 00:42:44.140
libpcap is default in OS X.

00:42:44.370 --> 00:42:46.270
It's a packet capturing library.

00:42:46.540 --> 00:42:50.290
It listens on the wire and
it can capture both Ethernet,

00:42:50.450 --> 00:42:53.600
TCP, IP and all these different
types of packets.

00:42:53.740 --> 00:42:58.400
And any sort of application like
tcpdump would actually use libpcap.

00:42:58.400 --> 00:43:02.400
And a lot of the different
tools actually use libpcap.

00:43:02.400 --> 00:43:05.760
All the different open source tools,
they actually use libpcap

00:43:05.760 --> 00:43:07.400
to do the packet capturing.

00:43:07.400 --> 00:43:10.680
Later on, I'm going to show you a program
that I've written using libpcap.

00:43:10.860 --> 00:43:13.570
It's a great library.

00:43:13.600 --> 00:43:16.800
The next library is libnet.

00:43:16.800 --> 00:43:21.590
Libnet is a packet
injection/packet creation library.

00:43:21.600 --> 00:43:25.980
So you can use libnet to
create weird TCP packets,

00:43:25.980 --> 00:43:27.300
I would say.

00:43:27.300 --> 00:43:28.230
Or packets with different
types of packets.

00:43:28.300 --> 00:43:30.300
Or packets with different headers
and all this different stuff.

00:43:30.430 --> 00:43:34.070
So it's a great utility and a
lot of the intrusion detection

00:43:34.070 --> 00:43:36.300
tools and even SNORT uses libnet.

00:43:36.300 --> 00:43:38.130
Libnet is actually a low level tool.

00:43:38.330 --> 00:43:42.370
If you are building all these
different open source libraries,

00:43:42.370 --> 00:43:46.750
you have to build libnet first in
order to build all the other libraries.

00:43:46.900 --> 00:43:53.880
Libdnet is an abstraction library
which provides you abstracted data,

00:43:53.880 --> 00:43:57.240
abstracted kernel data,
like the interface information,

00:43:57.290 --> 00:43:59.940
like the ARP cache and
also the routing table.

00:43:59.940 --> 00:44:02.900
So you can have direct access to the
routing table by using the Libdnet.

00:44:02.900 --> 00:44:05.910
And a lot of the security
tools and applications does,

00:44:05.910 --> 00:44:07.850
in fact, use Libdnet.

00:44:07.880 --> 00:44:12.680
And the next tool is, the next library,
I keep on saying tool for libraries.

00:44:12.830 --> 00:44:14.490
The next library is LibSF.

00:44:14.490 --> 00:44:17.420
LibSF is an OS fingerprinting library.

00:44:17.420 --> 00:44:22.470
So by using LibSF, you can detect what
your destination OS is,

00:44:22.470 --> 00:44:24.810
what OS you are pinging on.

00:44:24.820 --> 00:44:29.160
So basically LibSF can work on
active as well as passive modes.

00:44:29.250 --> 00:44:32.530
And what it does is it has
a database on how the kernel

00:44:32.840 --> 00:44:35.060
responds to certain packets.

00:44:35.100 --> 00:44:37.860
And depending on the
feedback it receives,

00:44:37.860 --> 00:44:37.860
it can also send you a message that says,
hey, I'm using Libdnet.

00:44:37.860 --> 00:44:40.840
And it actually gives scores.

00:44:40.840 --> 00:44:44.620
And the system that gets the highest
score is most likely to be the

00:44:44.620 --> 00:44:46.860
system that's in the destination.

00:44:46.860 --> 00:44:50.260
So it's a great library
you can use in your tools.

00:44:50.260 --> 00:44:52.870
And the next library is LibNIDS.

00:44:52.870 --> 00:44:57.980
LibNIDS is a TCP fragmentation
and assembly detection library.

00:44:57.980 --> 00:45:01.320
Most of the intrusion detection
tools actually use LibNIDS.

00:45:01.320 --> 00:45:06.020
Tools like LNIDS and
NIDS and I guess DSNIF,

00:45:06.140 --> 00:45:07.840
all these tools are used in LibNIDS.

00:45:07.840 --> 00:45:15.260
But you can actually register a
callback function into LibNIDS.

00:45:15.260 --> 00:45:18.200
When LibNIDS encounters
a fragmented IP packet,

00:45:18.200 --> 00:45:20.180
it will actually call you back.

00:45:20.180 --> 00:45:22.060
So it has great functionality.

00:45:22.100 --> 00:45:24.290
The reason, as I said before,
why am I talking about all

00:45:24.290 --> 00:45:25.660
these different libraries?

00:45:25.660 --> 00:45:28.970
I'm talking about these different
libraries because it gives you a general

00:45:28.970 --> 00:45:30.860
awareness of what your tools are made of.

00:45:30.960 --> 00:45:33.830
Second, it gives you,
if you are a developer,

00:45:33.830 --> 00:45:37.420
it gives you the ability to
code and write up a tiny tool.

00:45:37.420 --> 00:45:37.820
Because most of the time,
you're not going to be able to code.

00:45:37.820 --> 00:45:40.980
So most of the security
tools that we have,

00:45:41.000 --> 00:45:42.600
they do a specific purpose.

00:45:42.670 --> 00:45:44.200
They are for a specific purpose.

00:45:44.200 --> 00:45:48.580
And if you might have a purpose that's
different from the tool's purpose,

00:45:48.580 --> 00:45:51.280
so you can actually quickly
write up some tool of your own

00:45:51.280 --> 00:45:53.150
by using some of these libraries.

00:45:53.160 --> 00:45:56.590
And having said that...

00:45:59.790 --> 00:46:02.450
Let's move on to see how
you can write your tool.

00:46:02.580 --> 00:46:06.180
I, in fact, wrote up a small program,
100 lines of code within

00:46:06.630 --> 00:46:07.660
less than an hour.

00:46:07.660 --> 00:46:09.340
It's very easy.

00:46:09.340 --> 00:46:12.630
I call it the Browse Program,
and there are actually programs

00:46:12.700 --> 00:46:14.040
like this in the open source arena.

00:46:14.520 --> 00:46:17.260
What this does is
actually it uses libpcap,

00:46:17.780 --> 00:46:20.960
listens on your wire,
captures IP packets,

00:46:20.960 --> 00:46:23.580
and then it strips off
Mac addresses from the packets,

00:46:23.640 --> 00:46:28.220
and if it finds a new Mac address,
it stores it in an array,

00:46:28.220 --> 00:46:31.180
and then it resolves the
Mac address to a vendor name.

00:46:31.180 --> 00:46:35.310
So basically it browses the network
and finds out all these devices

00:46:35.630 --> 00:46:37.780
and which vendor it belongs to.

00:46:37.780 --> 00:46:41.040
You could actually easily
extend this program,

00:46:41.160 --> 00:46:44.320
put libsf in it,
and you could actually do fingerprinting.

00:46:44.360 --> 00:46:48.080
So it's a very tiny program,
and what you see here is

00:46:48.080 --> 00:46:49.710
the output of the program.

00:46:49.720 --> 00:46:54.820
You see I ran it in my home network,
and you see the Mac addresses, the IPs,

00:46:54.820 --> 00:46:56.260
and the vendor names.

00:46:56.320 --> 00:47:01.240
So these tools will really allow
you to write up these libraries.

00:47:01.240 --> 00:47:05.100
The knowledge of these libraries
will allow you to write up tools and

00:47:05.100 --> 00:47:07.380
increase security in your network.

00:47:07.380 --> 00:47:10.430
Now in conclusion...

00:47:10.970 --> 00:47:13.710
Take advantage of all the
tools that we showed you.

00:47:13.990 --> 00:47:20.000
They are great tools and also use OS X as
an administrative platform to run all

00:47:20.000 --> 00:47:23.310
these tools and secure your network.

00:47:24.060 --> 00:47:29.560
And here, what you see are some of the
different URLs for these tools.

00:47:29.790 --> 00:47:34.580
Tools like Nessus, Nmap,
Radmind and the Libnet libraries.

00:47:34.820 --> 00:47:37.800
Some of the tools, the rest of them,
they actually come in the OS X.