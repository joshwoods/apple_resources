WEBVTT

00:00:13.200 --> 00:00:15.340
Okay, good afternoon.

00:00:15.510 --> 00:00:16.230
Thanks for waiting.

00:00:16.260 --> 00:00:18.070
I think the last talk
got off a little early.

00:00:18.220 --> 00:00:21.800
Everybody ready to build
some great Java applications?

00:00:24.310 --> 00:00:26.910
That's not what I was hoping for,
but okay.

00:00:26.950 --> 00:00:29.410
Let's see if I can do better at the end.

00:00:29.660 --> 00:00:33.360
I've been on stage every day,
so in case you don't already know me,

00:00:33.360 --> 00:00:35.850
my name is Matt Drance,
and I work in developer

00:00:35.980 --> 00:00:37.470
tech support for Java.

00:00:37.690 --> 00:00:40.920
And I'm going to talk to you about
making the most of the features

00:00:41.510 --> 00:00:45.440
that are provided to you both by
the Java 2 Standard Edition and

00:00:45.460 --> 00:00:48.220
provided by us on Mac OS X.

00:00:48.430 --> 00:00:52.380
We've got tips today for developers of
all shapes and sizes and backgrounds,

00:00:52.380 --> 00:00:53.300
people who are new to the Mac.

00:00:53.300 --> 00:00:57.890
How many people are
Java developers new to Mac OS X?

00:00:59.420 --> 00:00:59.940
Very few.

00:01:00.110 --> 00:01:01.060
That's great.

00:01:01.120 --> 00:01:02.090
That's really exciting.

00:01:02.200 --> 00:01:05.570
How many people are Mac developers
that are new to Java?

00:01:06.440 --> 00:01:08.060
Wow, that's really interesting.

00:01:08.100 --> 00:01:08.540
Great.

00:01:08.710 --> 00:01:09.690
Well, welcome to everybody.

00:01:09.780 --> 00:01:11.740
So we've got tips for
all kinds of people,

00:01:11.740 --> 00:01:14.300
new to the Mac, new to Java,
and people who are experienced in both.

00:01:14.300 --> 00:01:16.300
And I guess that's the
majority of our crowd,

00:01:16.540 --> 00:01:19.300
since I didn't see a lot of
hands in the first two questions.

00:01:19.300 --> 00:01:21.300
So what are we going to learn?

00:01:21.300 --> 00:01:23.240
We're going to learn about making
a standard Java application

00:01:23.310 --> 00:01:26.860
a real Mac OS X application,
something that really doesn't feel

00:01:26.860 --> 00:01:30.300
like it was written in Java and your
users would never know the difference.

00:01:30.300 --> 00:01:33.300
We're going to do step-by-step
analysis of a real Java app.

00:01:33.300 --> 00:01:37.300
I was working on demos for this
app over the last couple of weeks,

00:01:37.300 --> 00:01:41.300
and I was doing--it's 10 steps,
so I was writing 10 tiny little demos,

00:01:41.300 --> 00:01:43.260
proof of concepts of
each of these things.

00:01:43.300 --> 00:01:45.270
And, you know,
I thought that I could show these things,

00:01:45.270 --> 00:01:47.300
and you guys would say, "Yeah, well,
great, Matt.

00:01:47.300 --> 00:01:50.300
You wrote 10 lines, and you showed us how
this works in theory,

00:01:50.300 --> 00:01:55.680
but I have a real application."
So what I did was I searched around

00:01:55.680 --> 00:02:00.300
on SourceForge for something that
would be a good nominee--nominee.

00:02:00.300 --> 00:02:03.410
And I found this app called Pooka.

00:02:03.460 --> 00:02:06.770
I don't know where the name came from.

00:02:06.860 --> 00:02:08.300
Don't ask me.

00:02:08.440 --> 00:02:12.810
It's an open-source email client,
so it checks email, does IMAP and POP.

00:02:12.810 --> 00:02:16.150
It's built with Swing using Ant,
and it also uses Java--it

00:02:16.250 --> 00:02:18.250
uses Java Mail and Java Help.

00:02:18.440 --> 00:02:20.930
It does, you know,
all the things you would

00:02:20.930 --> 00:02:22.640
expect a mail client to do.

00:02:22.640 --> 00:02:25.220
And it supports multiple look and feels.

00:02:25.220 --> 00:02:27.300
It has multiple GUI formats.

00:02:27.300 --> 00:02:29.150
And it's got a really nice, dynamic,
customizable application.

00:02:29.310 --> 00:02:30.300
So I'm going to show you what it's like.

00:02:30.300 --> 00:02:32.640
You can change just
about everything--labels,

00:02:32.640 --> 00:02:34.800
menu shortcuts,
which actually will make one of

00:02:34.800 --> 00:02:36.210
our steps very easy later on.

00:02:36.410 --> 00:02:39.300
But there's the URL, sourceforge.net.

00:02:39.300 --> 00:02:41.680
I would encourage you to check it
out after this talk just to see

00:02:41.760 --> 00:02:45.300
how far we'll have come at the end
of this--at the end of the talk.

00:02:45.300 --> 00:02:47.300
So we're going to do start to finish.

00:02:47.300 --> 00:02:48.300
So what's the start?

00:02:48.310 --> 00:02:52.300
The start is downloading an
application to the desktop.

00:02:52.300 --> 00:02:54.300
And so what's the use case here?

00:02:54.300 --> 00:02:57.300
A user either installs your
application using an installer.

00:02:57.300 --> 00:02:59.300
In the case of a lot
of Java applications,

00:02:59.300 --> 00:03:02.300
you download them off the
web or off an FTP site.

00:03:02.370 --> 00:03:06.050
And usually it's just a JAR file
or a number of JAR files.

00:03:06.550 --> 00:03:10.280
And from a Mac perspective,
JAR files really aren't applications.

00:03:10.300 --> 00:03:12.680
I mean, they're files that you can
double-click and launch,

00:03:12.680 --> 00:03:13.300
and that's great.

00:03:13.500 --> 00:03:16.350
But from a Mac user's perspective,
somebody who doesn't know what

00:03:16.480 --> 00:03:19.300
Java is or Cocoa or Carbon,
they just want an app.

00:03:19.300 --> 00:03:21.290
A JAR file is going to
be very foreign to them.

00:03:21.300 --> 00:03:24.240
It's got a very generic icon,
as I'm sure you've all seen.

00:03:24.300 --> 00:03:26.300
It's usually got an unfriendly file name.

00:03:26.300 --> 00:03:28.300
We'll show you what Puka looked like
when we downloaded it in a second.

00:03:28.330 --> 00:03:32.300
And usually, or often,
there's more than one JAR file,

00:03:32.300 --> 00:03:34.210
and that becomes a real problem.

00:03:34.320 --> 00:03:35.220
Which one do I double-click?

00:03:35.530 --> 00:03:36.300
What do I do?

00:03:36.300 --> 00:03:38.300
What's the user supposed to do?

00:03:38.300 --> 00:03:40.300
Now, of course,
they could use the terminal.

00:03:40.300 --> 00:03:42.300
This is a Unix operating system.

00:03:42.300 --> 00:03:44.300
But, you know,
we like to think that we've done a lot

00:03:44.300 --> 00:03:47.300
of work so that our end users don't
ever have to know that it's Unix.

00:03:47.350 --> 00:03:49.300
So asking your user
to download something,

00:03:49.300 --> 00:03:53.300
go to the terminal and type some strings,
really not the optimal thing.

00:03:53.320 --> 00:03:55.170
You could run a shell script.

00:03:55.230 --> 00:03:55.300
It's a little easier.

00:03:55.540 --> 00:03:57.300
Depending on how you format it,
you can name it .command,

00:03:57.300 --> 00:03:59.300
and they could double-click that.

00:03:59.390 --> 00:04:01.190
Still gonna bring up a terminal window.

00:04:01.390 --> 00:04:03.300
You know, it might freak your users out.

00:04:03.300 --> 00:04:05.370
Somebody like my grandmother
would probably call me if

00:04:05.370 --> 00:04:07.300
I emailed her an application,
told her to double-click something,

00:04:07.320 --> 00:04:10.300
and then she saw something with some
really foreign-looking text on it.

00:04:10.300 --> 00:04:12.300
And, of course, there is the finder.

00:04:12.300 --> 00:04:14.240
If you've done the right
thing with your JAR,

00:04:14.490 --> 00:04:16.300
you should be able to double-click
it and launch the app.

00:04:16.360 --> 00:04:18.240
And if you haven't done the
right thing with your JAR,

00:04:18.310 --> 00:04:21.290
you might try to double-click it,
and nothing happens.

00:04:22.310 --> 00:04:23.200
So what's step one?

00:04:23.200 --> 00:04:25.700
Step one is package your
application for Mac OS X.

00:04:25.830 --> 00:04:29.100
The easiest thing to do-- you can do this
no matter what platform you're actually

00:04:29.100 --> 00:04:32.700
building on-- is just write a manifest
file with a main class attribute.

00:04:32.880 --> 00:04:36.400
This is a screenshot from Xcode of...

00:04:36.600 --> 00:04:38.500
will be presenting the manifest
file that was already in PUCA.

00:04:38.500 --> 00:04:41.500
So they actually did step one,
or half of step one already.

00:04:41.500 --> 00:04:43.500
So I applaud them for that.

00:04:43.500 --> 00:04:45.500
This is a double-clickable
jar in Mac OS X,

00:04:45.500 --> 00:04:47.500
and it comes up without any problems.

00:04:54.910 --> 00:04:55.710
But what we'd really like you to do,
of course, is use our tool, Jar Bundler,

00:04:55.740 --> 00:04:56.390
which takes all of your jars and
any of your other files and creates

00:04:56.390 --> 00:04:58.900
a real Mac OS X executable that's
double clickable on the desktop.

00:04:58.960 --> 00:05:02.020
It gives you a friendly
application name that shows up in

00:05:02.020 --> 00:05:03.900
the dock and up in the menu bar.

00:05:03.900 --> 00:05:06.900
You can set Mac and Java properties.

00:05:06.900 --> 00:05:10.900
You can set an icon to make
it look even more friendly.

00:05:10.900 --> 00:05:12.890
And we talked about
this in a couple talks,

00:05:12.940 --> 00:05:15.740
specifically the
deployment talk yesterday.

00:05:16.040 --> 00:05:17.900
But you can also ask for a Java version.

00:05:17.900 --> 00:05:19.770
And when you do that,
using the JVM version key,

00:05:19.770 --> 00:05:24.280
we'd like you to use the star and
plus modifiers instead of explicitly

00:05:24.280 --> 00:05:27.900
saying something like 131 or 141.

00:05:27.900 --> 00:05:31.240
And particularly if you have
JNI libraries and you're adding

00:05:31.240 --> 00:05:33.830
JNI libraries to a package,
those will automatically get

00:05:33.920 --> 00:05:34.900
detected by the application.

00:05:34.900 --> 00:05:38.810
You don't have to worry about setting
the java.library.path variable like you

00:05:38.810 --> 00:05:40.690
might have to do on other platforms.

00:05:41.130 --> 00:05:45.060
So, how many of you have used
Jarbundler in the past?

00:05:45.340 --> 00:05:46.400
Okay, well, about half.

00:05:46.410 --> 00:05:48.460
Okay, so then this demo won't
be totally pointless.

00:05:48.670 --> 00:05:50.850
Can we go to demo one, please?

00:05:54.000 --> 00:05:55.990
Alright.

00:05:56.250 --> 00:05:57.700
So, step one.

00:05:57.950 --> 00:06:01.620
So here's Puka, and it's one file,
which is great.

00:06:01.690 --> 00:06:05.410
Downloaded from SourceForge,
it's got a jar icon, it's got

00:06:05.660 --> 00:06:10.560
I'm guessing this is a version number and
I'm guessing this is when it was built.

00:06:10.560 --> 00:06:11.290
I have no idea.

00:06:11.490 --> 00:06:14.170
Let's try to double click
it and see what happens.

00:06:17.430 --> 00:06:18.790
The app will come up eventually.

00:06:18.800 --> 00:06:25.620
And when it does,
we see we have our dock icon,

00:06:25.620 --> 00:06:27.000
which is a generic Java icon.

00:06:27.000 --> 00:06:31.500
And it's got some interesting name,
which we all know is just the main class,

00:06:31.650 --> 00:06:33.860
which is what the
Java launcher takes by default.

00:06:33.860 --> 00:06:37.390
And well,
it looks like we have some work to do.

00:06:37.930 --> 00:06:39.650
Let's not configure an
email account right now.

00:06:39.780 --> 00:06:40.780
Let's see what we can do about this.

00:06:40.890 --> 00:06:42.980
Let's launch Jarbundler.

00:06:45.420 --> 00:06:48.300
And let's just drag
this jar right in there.

00:06:48.430 --> 00:06:50.600
And it's going to add it
to the class path for me.

00:06:50.750 --> 00:06:52.400
Set a couple of very simple properties.

00:06:52.560 --> 00:06:55.870
The bundle name is how this will show
up in the desktop and in the doc,

00:06:56.020 --> 00:06:57.840
so we'll call it...

00:06:58.300 --> 00:07:10.200
[Transcript missing]

00:07:10.500 --> 00:07:21.700
[Transcript missing]

00:07:22.530 --> 00:07:25.150
So now we have this icon here,
and what can we do about that?

00:07:25.160 --> 00:07:28.680
And this is actually such a
trivial step that I really want

00:07:28.690 --> 00:07:30.280
to show people how to do it.

00:07:30.310 --> 00:07:32.570
I pulled this icon out of the jar file.

00:07:32.620 --> 00:07:34.850
This is the logo for Pucca.

00:07:35.140 --> 00:07:39.870
And so what I'm going to do is
launch Icon Composer and just drag.

00:07:40.900 --> 00:07:46.900
[Transcript missing]

00:07:47.000 --> 00:07:56.500
[Transcript missing]

00:07:58.590 --> 00:08:01.560
Call it Pooka icon.

00:08:01.600 --> 00:08:02.440
Go out of here.

00:08:02.450 --> 00:08:05.180
I'm going to drag this guy right in,
and there's our icon.

00:08:05.260 --> 00:08:07.380
So I think we're done.

00:08:07.510 --> 00:08:11.100
So let's create our app, call it Pooka.

00:08:31.550 --> 00:08:31.550
And there's our app.

00:08:31.550 --> 00:08:31.550
And already we have a dock
icon with a proper name,

00:08:31.550 --> 00:08:31.550
proper name up here,
and obviously we still

00:08:31.550 --> 00:08:31.550
have some work to do.

00:08:31.550 --> 00:08:31.550
But there's nine steps to go.

00:08:31.550 --> 00:08:31.550
So, can we go back to the slides, please?

00:08:36.570 --> 00:08:39.640
So now I want to talk to you a little
bit about GUI themes and the concept of

00:08:39.730 --> 00:08:43.220
look and feels and colors and standards,
shapes and sizes.

00:08:43.270 --> 00:08:45.480
They talked a little bit
about this yesterday,

00:08:45.480 --> 00:08:46.120
Barry and Tom.

00:08:46.120 --> 00:08:47.300
They did a great job with it.

00:08:47.300 --> 00:08:50.250
So I'm going to run through
this as quickly as I can.

00:08:50.480 --> 00:08:53.260
So the message is that
Java is cross-platform.

00:08:53.310 --> 00:08:54.460
Write once, run everywhere.

00:08:54.610 --> 00:08:56.200
But there's also a caveat to that.

00:08:56.280 --> 00:08:57.270
It's cross-platform.

00:08:57.430 --> 00:09:00.530
You never know which platform this
application's going to be run on.

00:09:00.710 --> 00:09:04.190
You don't know what the standard
sizes are for buttons and scroll

00:09:04.510 --> 00:09:07.600
panes and all other kinds of widgets.

00:09:07.670 --> 00:09:11.360
Closed boxes, background colors,
font sizes are probably

00:09:11.360 --> 00:09:13.640
going to be different,
not only across platforms,

00:09:13.740 --> 00:09:15.020
but across look and feels.

00:09:15.020 --> 00:09:16.980
And if you make assumptions
about these things,

00:09:16.980 --> 00:09:19.320
if you're only building and
testing on one platform,

00:09:19.340 --> 00:09:20.780
you could bring it over
to another platform,

00:09:20.830 --> 00:09:22.580
building on Windows,
coming over to the Mac,

00:09:22.580 --> 00:09:24.570
and you can be in a lot of trouble.

00:09:25.050 --> 00:09:28.300
So this brings us to step two,
which is make no assumptions.

00:09:28.320 --> 00:09:29.480
Don't force the look and feel.

00:09:29.830 --> 00:09:31.040
Trust the defaults.

00:09:31.090 --> 00:09:32.090
Use layout managers.

00:09:32.100 --> 00:09:35.740
Try not to calculate explicit
sizes for your controls.

00:09:35.740 --> 00:09:39.010
Try to get your colors, your icons,
your fonts, your borders from the system.

00:09:39.020 --> 00:09:40.010
Ask the UI manager.

00:09:40.080 --> 00:09:41.820
Ask the toolkit.

00:09:41.920 --> 00:09:44.180
Things like the text
field background color,

00:09:44.180 --> 00:09:48.250
the margin for the editor panes,
close icons for your internal frames

00:09:48.250 --> 00:09:50.340
if you're using a JDesktop pane.

00:09:50.340 --> 00:09:52.240
All those things can be
gotten from the look and feel,

00:09:52.310 --> 00:09:54.730
and you'll always get the
right one instead of assuming

00:09:54.730 --> 00:09:56.540
you know where you're running.

00:09:56.600 --> 00:10:00.750
And the other thing,
which was a point from yesterday,

00:10:00.750 --> 00:10:02.750
is if you want or don't
want anti-aliasing,

00:10:03.670 --> 00:10:05.840
Make sure you say you do or don't.

00:10:05.890 --> 00:10:09.900
Don't ever assume that it's going to
be on or off from one place to another.

00:10:09.940 --> 00:10:13.390
Now I'd like to go back to demo
one and just show you what I mean.

00:10:16.800 --> 00:10:22.130
So this is the double clickable
we just built with Jarb on there.

00:10:23.650 --> 00:10:27.180
I'm so used to the Macified version,
I can't remember where

00:10:27.410 --> 00:10:29.030
the preferences are.

00:10:30.360 --> 00:10:34.700
Let's go to the Themes Options,
which are right here.

00:10:34.700 --> 00:10:36.440
And we have all our look and feels here.

00:10:36.440 --> 00:10:37.940
And this is kind of a
nice feature of Puca.

00:10:37.940 --> 00:10:39.320
It lets you select one.

00:10:39.320 --> 00:10:41.590
So let's go select Aqua.

00:10:41.850 --> 00:10:43.540
And it's in Aqua.

00:10:43.650 --> 00:10:44.810
No, it's not.

00:10:45.210 --> 00:10:48.560
Well, it kind of is.

00:10:48.650 --> 00:10:52.370
I mean, I have an Aqua control here,
and this button seems to have changed,

00:10:52.410 --> 00:10:58.370
and I see my Aqua scroll bars,
but it looks half and half.

00:10:58.370 --> 00:10:58.370
So,

00:10:58.700 --> 00:11:01.360
Let's see what went on here.

00:11:01.420 --> 00:11:03.360
And unfortunately,
I had to get the source out.

00:11:03.360 --> 00:11:06.910
It is SourceForge,
so that's not that big a deal.

00:11:08.250 --> 00:11:12.200
And what we can go to,
this is the main class

00:11:12.280 --> 00:11:14.080
of the application.

00:11:15.700 --> 00:11:29.700
[Transcript missing]

00:11:35.090 --> 00:11:36.000
Is that okay?

00:11:36.470 --> 00:11:37.000
Yeah.

00:11:37.000 --> 00:11:37.990
All right.

00:11:38.000 --> 00:11:43.890
So, once I scroll and
adjust for the new size.

00:12:02.110 --> 00:12:02.110
And I smartly marked all these steps.

00:12:02.110 --> 00:12:02.110
So here we are.

00:12:02.110 --> 00:12:02.110
We are setting the background
color of the frame to gray.

00:12:02.110 --> 00:12:02.110
And this is basically, well,
I'm running on metal, right?

00:12:02.110 --> 00:12:02.110
So let me just be extra careful
and make sure everything shows up

00:12:02.110 --> 00:12:02.110
gray in case the look and feel for
some reason forgets to paint them.

00:12:02.110 --> 00:12:02.110
And, uh,

00:12:02.460 --> 00:12:04.240
As we can see,
when we switch to something that

00:12:04.240 --> 00:12:08.310
doesn't have a default gray background,
that's not how it-- it doesn't

00:12:08.310 --> 00:12:10.030
really turn out so great.

00:12:10.120 --> 00:12:11.780
So in the interest of time,
I'm not going to build these

00:12:11.920 --> 00:12:13.200
things in front of your eyes.

00:12:13.280 --> 00:12:14.930
But we basically comment
out the gray thing,

00:12:15.140 --> 00:12:19.120
and with that one line change,
now we're truly in Aqua.

00:12:19.220 --> 00:12:22.170
Looks as you might expect it to.

00:12:22.470 --> 00:12:24.240
You probably can guess,
looking at this window,

00:12:24.240 --> 00:12:25.640
what the next step is going to be.

00:12:25.730 --> 00:12:28.400
But I will leave you in suspense
for a couple more seconds.

00:12:28.530 --> 00:12:30.910
Can we go back to the slides, please?

00:12:32.860 --> 00:12:36.310
The next step, of course,
would be the menu bar.

00:12:36.710 --> 00:12:38.380
So what's the problem with
the application menu bar?

00:12:38.380 --> 00:12:41.080
Mac OS X, as you know,
has a menu bar at the top of the screen.

00:12:41.080 --> 00:12:44.760
We have an application menu that gets
popped up for every app that you launch.

00:12:44.830 --> 00:12:46.760
But JMenuBars and Swing
appear in the window.

00:12:46.760 --> 00:12:48.920
They don't appear at
the top of the frame.

00:12:48.960 --> 00:12:52.140
The application menu that we
try to conveniently create for

00:12:52.140 --> 00:12:55.890
you isn't completely responsive,
because Java has no concept of it.

00:12:55.970 --> 00:12:58.030
The Quit Menu item will just quit.

00:12:58.180 --> 00:13:00.420
It's not intercepted by your
Java code automatically,

00:13:00.430 --> 00:13:01.600
because how can it be?

00:13:01.680 --> 00:13:04.100
Preferences item doesn't
appear by default.

00:13:04.150 --> 00:13:08.260
And the About Menu item isn't integrated
into whatever informational thing you

00:13:08.260 --> 00:13:10.810
might have had on other platforms.

00:13:11.330 --> 00:13:15.680
So this brings us to step three,
making a Macintosh menu bar.

00:13:15.700 --> 00:13:17.800
Most of you probably know this.

00:13:17.800 --> 00:13:20.300
You set the
apple.laf.usescreenmenubar property.

00:13:20.300 --> 00:13:21.600
It's a runtime property.

00:13:21.600 --> 00:13:24.100
And that immediately jumps your
JMenu bars up to the top of the

00:13:24.100 --> 00:13:25.660
screen with no additional work.

00:13:25.740 --> 00:13:28.210
This is just something you can
specify either in the properties

00:13:28.670 --> 00:13:29.900
item of your Info.plist.

00:13:29.900 --> 00:13:33.350
You can do it as a -d property
at runtime from the terminal,

00:13:33.350 --> 00:13:38.050
or you can do a system set property
with it before you initialize AWT.

00:13:38.490 --> 00:13:41.350
And the other item would
be the application menu.

00:13:41.460 --> 00:13:45.560
And unfortunately, you can't do this in a
completely universal way.

00:13:45.560 --> 00:13:48.460
We did have to write some
APIs that you guys can use.

00:13:48.560 --> 00:13:52.460
And that gives us to the extended AWT,
the EAWT package.

00:13:52.580 --> 00:13:57.240
And the main item here is the
com.apple.eawt application listener.

00:13:57.320 --> 00:13:59.300
And there's an adapter
class that you can extend,

00:13:59.300 --> 00:14:01.190
as opposed to implementing the interface.

00:14:01.310 --> 00:14:05.360
And this will allow you to handle all
the items in the application menu.

00:14:05.460 --> 00:14:08.630
About preferences quit gives you
a couple of other methods that we

00:14:08.630 --> 00:14:11.920
probably won't go through today,
because we've got a lot to cover.

00:14:11.920 --> 00:14:16.240
And once you implement those things,
you can replace the things in

00:14:16.310 --> 00:14:18.960
your file or edit menus that
you had on other platforms.

00:14:18.960 --> 00:14:21.090
You know, a lot of people have
preferences under edit.

00:14:21.100 --> 00:14:23.520
They have options or
preferences under help,

00:14:23.520 --> 00:14:24.940
or they have their
about stuff under help.

00:14:25.120 --> 00:14:27.600
So you can detect whether
or not you're on a Mac.

00:14:27.610 --> 00:14:30.080
And if you know you're doing that,
use the application listener.

00:14:30.150 --> 00:14:31.930
If you're on another platform,
go ahead and put that

00:14:31.930 --> 00:14:33.300
menu where it was before.

00:14:33.300 --> 00:14:36.460
And we have a great way of doing this
with the OS X adapter sample code,

00:14:36.640 --> 00:14:39.630
which basically uses reflection
to load a class that implements

00:14:39.630 --> 00:14:40.760
all these interfaces.

00:14:40.780 --> 00:14:43.680
So basically, you have that code,
it's built, and it runs.

00:14:43.680 --> 00:14:45.460
And you only load it
when you're on Mac OS X.

00:14:45.460 --> 00:14:47.260
And because you're
loading it reflectively,

00:14:47.260 --> 00:14:49.970
the class load never
occurs on Windows or Linux.

00:14:50.160 --> 00:14:51.860
So you don't have to worry
about forking your code and

00:14:51.860 --> 00:14:54.110
building a Mac version of this.

00:14:55.350 --> 00:14:59.640
So, I was talking about detecting a Mac,
and how do we do that?

00:14:59.660 --> 00:15:04.140
Well, this is really the most
recommended way by Apple to do it.

00:15:04.190 --> 00:15:07.520
Go ahead and get the OS.name property,
send it to lower case

00:15:07.660 --> 00:15:10.640
just to be thorough,
and then see if it starts with Mac OS X.

00:15:10.790 --> 00:15:12.290
It's pretty intuitive.

00:15:12.390 --> 00:15:14.770
Barry and Tom talked
about this yesterday.

00:15:15.020 --> 00:15:17.170
I just wanted to go
over it one more time.

00:15:17.430 --> 00:15:20.770
And this is covered in Tech Note 2110.

00:15:21.900 --> 00:15:24.900
So if we can go back to demo one,
I want to show you real quick

00:15:24.900 --> 00:15:27.900
what a Macintosh menu bar
is supposed to look like.

00:15:27.990 --> 00:15:29.950
So as you can see,
we do have the application menu,

00:15:29.950 --> 00:15:33.220
and it does have the proper name now,
because we set that bundle name item

00:15:33.220 --> 00:15:34.900
in Jar Bundler when we built it.

00:15:35.050 --> 00:15:38.170
When I click about here,
I get this default about thing

00:15:38.500 --> 00:15:42.810
that Apple pulls up if you haven't
implemented the EWT interfaces.

00:15:42.910 --> 00:15:46.590
Notice there's no preferences here,
and it gets really ugly when

00:15:46.670 --> 00:15:48.700
I do something like this.

00:15:48.700 --> 00:15:50.650
I start typing an email,
and then I go to quit.

00:15:50.900 --> 00:15:52.900
And it's gone.

00:15:53.160 --> 00:15:57.380
Now, Pooka probably had some kind of "Are
you sure you want to save?" stuff

00:15:57.600 --> 00:16:00.900
when you go to file exit or when
you go to close the window manually.

00:16:00.950 --> 00:16:03.880
But you need to intercept that quit item.

00:16:03.900 --> 00:16:04.850
And so how do we do that?

00:16:04.850 --> 00:16:08.450
Well, let's go to step three.

00:16:15.040 --> 00:16:17.920
And basically,
I just inserted some quick code here.

00:16:18.000 --> 00:16:20.530
I have a Mac integration class,
so I localized all my

00:16:20.680 --> 00:16:22.300
Mac code in one place.

00:16:22.340 --> 00:16:26.000
And I basically told it to do an
application menu registration call.

00:16:26.000 --> 00:16:27.960
It's a static method, very simple.

00:16:27.960 --> 00:16:29.910
Let's see what it does.

00:16:30.120 --> 00:16:33.760
How many of you have seen the
OS X adapter sample code in the past?

00:16:33.780 --> 00:16:36.560
Okay, all right,
so we need to go over this.

00:16:38.200 --> 00:16:40.100
So here we have my Mac integration class.

00:16:40.120 --> 00:16:43.480
And when I call the menu registration,
there's a lot of verbiage here.

00:16:43.540 --> 00:16:46.780
But basically what I'm doing is I'm
reflectively loading another class

00:16:46.780 --> 00:16:50.770
that I'll show you in a second,
my application adapter class.

00:16:51.100 --> 00:17:02.400
[Transcript missing]

00:17:03.400 --> 00:17:07.040
So what this basically does is it
creates an Apple EAWT application.

00:17:07.060 --> 00:17:09.300
And you notice that we're no
longer using reflection here.

00:17:09.350 --> 00:17:10.870
This class is completely contained.

00:17:11.050 --> 00:17:13.180
It's now calling the Apple APIs directly.

00:17:13.180 --> 00:17:15.880
And the reason it can do that is
because we're not even loading

00:17:15.990 --> 00:17:18.530
this class unless we're on the Mac.

00:17:18.660 --> 00:17:20.660
So now we can be safe.

00:17:20.690 --> 00:17:24.020
We're creating an application,
adding the application listener.

00:17:24.020 --> 00:17:26.220
This is the standard EAWT code.

00:17:26.260 --> 00:17:28.330
And then we have all our
implementations down here.

00:17:28.450 --> 00:17:31.540
Handle Quit, Handle About,
Handle Preferences.

00:17:31.570 --> 00:17:33.370
Let's see how we did.

00:17:37.380 --> 00:17:41.760
Now you can see the menu
bars at the top for starters.

00:17:41.840 --> 00:17:43.950
We create a new message here.

00:17:46.680 --> 00:17:50.320
And now when I do Apple Q, sorry,
Command Q,

00:17:50.360 --> 00:17:52.840
I do get the standard PUCA close code.

00:17:52.840 --> 00:17:54.070
I didn't write this dialog.

00:17:54.140 --> 00:17:57.600
This was part of the standard app,
but now we've hooked into it properly

00:17:57.600 --> 00:17:59.560
with a very minimal amount of effort.

00:17:59.600 --> 00:18:03.430
Can we go back to slides, please?

00:18:06.000 --> 00:18:07.720
So now I want to talk
about user interaction.

00:18:07.740 --> 00:18:10.360
And a bunch of these things I'm
not going to demo because Puka

00:18:10.360 --> 00:18:11.720
actually does them very well.

00:18:11.740 --> 00:18:14.090
But I want to talk about them anyway.

00:18:14.790 --> 00:18:18.140
So a lot of GUI apps are often written
and tested only on a single platform.

00:18:18.140 --> 00:18:20.700
I deal with this all the
time in developer support.

00:18:20.830 --> 00:18:23.730
Things like hard-coded menu modifiers,
people explicitly saying

00:18:23.960 --> 00:18:28.000
"control." I'm writing a menu,
I'm on Windows,

00:18:28.040 --> 00:18:31.700
all the apps seem to use control,
so I'll do control-C for copy.

00:18:31.750 --> 00:18:33.700
I'm on Windows,
I have a two-button mouse,

00:18:33.700 --> 00:18:37.910
so to get a contextual menu,
I'll check for the button-to mask

00:18:38.020 --> 00:18:42.960
on a mouse click or a mouse press,
and it'll magically work, right?

00:18:43.030 --> 00:18:44.700
Wrong, unfortunately.

00:18:45.540 --> 00:18:49.720
Much in the vein of the
GUI theme step earlier,

00:18:50.170 --> 00:18:51.900
there are things that
you can ask Java for,

00:18:51.900 --> 00:18:54.640
and Java will just tell you what the
right thing is for the right platform.

00:18:54.640 --> 00:18:58.520
And among those things are the menu
modifiers and the context menu trigger,

00:18:58.680 --> 00:19:01.590
what action is supposed to
trigger a contextual menu.

00:19:01.690 --> 00:19:02.440
It's very abstract.

00:19:02.550 --> 00:19:06.660
You don't have to do any event parsing
or worry about what platform you're on.

00:19:06.660 --> 00:19:10.480
It'll just do the right thing for you,
no matter where you're running.

00:19:11.060 --> 00:19:13.400
And, you know, the idea here is hard code
as little as possible.

00:19:13.520 --> 00:19:15.260
Use Java to its fullest extent.

00:19:15.380 --> 00:19:16.890
And this is the menu example.

00:19:16.890 --> 00:19:20.510
There's a toolkit,
get menu shortcut key mask method that

00:19:20.570 --> 00:19:24.170
gives you control on Windows and meta,
which is the equivalent of command,

00:19:24.210 --> 00:19:24.660
on the Mac.

00:19:24.780 --> 00:19:28.050
And with that, it will give you the right
thing wherever you go,

00:19:28.050 --> 00:19:31.320
and this is all the code you need
to do to create a JMenu item.

00:19:31.320 --> 00:19:35.300
I've seen people do halfway, and,
you know, I appreciate their effort,

00:19:35.300 --> 00:19:38.200
where they do if on Windows, use control,
if on Mac, use meta.

00:19:38.200 --> 00:19:39.070
It's way too much work.

00:19:39.130 --> 00:19:40.700
This is all you have to do, I promise.

00:19:40.900 --> 00:19:42.000
Amen.

00:19:43.300 --> 00:19:44.200
And context menus are the same thing.

00:19:44.430 --> 00:19:47.300
There's a simple method called
"IsPopupTrigger" on a mouse event,

00:19:47.300 --> 00:19:48.740
and that's the only
thing you need to ask.

00:19:48.900 --> 00:19:50.280
Don't worry about button two,
button three.

00:19:50.380 --> 00:19:53.460
Don't worry about whether or not
the control key has been held down

00:19:53.460 --> 00:19:54.660
if it's a one-button Mac mouse.

00:19:54.980 --> 00:19:58.900
Just ask Java,
"Is this a popup menu?" Say yes,

00:19:59.080 --> 00:20:01.300
then I go ahead and proceed as I can.

00:20:01.970 --> 00:20:05.160
Now, there is one caveat here,
and that's there is something

00:20:05.160 --> 00:20:08.300
of a difference between
Windows and Mac specifically.

00:20:08.300 --> 00:20:12.300
On the Mac, a context menu is activated
on the pressing of the mouse.

00:20:12.300 --> 00:20:14.880
So if you do a control click,
it's gonna--as soon as you

00:20:14.980 --> 00:20:17.320
press the mouse button down,
the menu will--the popup

00:20:17.320 --> 00:20:18.290
trigger will occur.

00:20:18.310 --> 00:20:21.300
It's not gonna be on the
release like on Windows.

00:20:21.300 --> 00:20:23.820
And the other thing is that
you never know what kind of

00:20:23.820 --> 00:20:25.300
mouse is running on a Mac.

00:20:25.300 --> 00:20:26.270
We ship a one-button mouse.

00:20:26.370 --> 00:20:28.280
You can easily buy a two, three,
five-button mouse.

00:20:28.280 --> 00:20:31.300
So somebody could have a right mouse,
or they could have configured

00:20:31.300 --> 00:20:32.480
their mouse for it to be,
you know,

00:20:32.550 --> 00:20:33.300
the thumb mouse or something like that.

00:20:33.300 --> 00:20:34.430
What's the mask for that?

00:20:34.430 --> 00:20:35.300
I don't even know.

00:20:35.300 --> 00:20:37.300
So ask the toolkit.

00:20:37.300 --> 00:20:42.280
The caveat of the mouse-pressed issue,
though, is that right-dragging as

00:20:42.280 --> 00:20:45.300
well as control-dragging
is not gonna work on a Mac.

00:20:45.300 --> 00:20:47.720
So if you have Java code
that does a right drag,

00:20:47.720 --> 00:20:50.840
that's simply not gonna work
because as soon as that right

00:20:50.840 --> 00:20:53.220
mouse button is pressed,
Java is gonna think it's

00:20:53.220 --> 00:20:54.280
time for a context menu.

00:20:54.350 --> 00:20:57.490
And that's something to be aware of.

00:20:57.880 --> 00:21:00.600
And Puka, actually, as you can see,
has done a good job of this itself.

00:21:00.770 --> 00:21:04.000
So I don't need to do
the context menu demo.

00:21:04.060 --> 00:21:07.500
Let's move right along to documents.

00:21:07.550 --> 00:21:11.680
A lot of Java applications have
documents that they read and write to.

00:21:12.920 --> 00:21:15.400
The trick is, how do I open these
from outside Java code?

00:21:15.400 --> 00:21:18.140
Meaning, it would be great if I could
double click this document,

00:21:18.200 --> 00:21:20.630
drag it over my app, whatever,
and have my application

00:21:20.640 --> 00:21:22.470
launch and open it.

00:21:22.610 --> 00:21:24.920
Because Java is not an
integral part of the system,

00:21:24.940 --> 00:21:27.290
at least other systems,

00:21:27.390 --> 00:21:29.260
This is kind of an issue.

00:21:29.350 --> 00:21:30.810
The finder should really
know how to do this.

00:21:30.890 --> 00:21:32.630
It knows for Cocoa, it knows for Carbon.

00:21:32.800 --> 00:21:34.740
How do we do it for Java?

00:21:34.850 --> 00:21:38.040
Well, this is also part of the EWT,
and it's step five,

00:21:38.130 --> 00:21:39.230
which is register your documents.

00:21:39.240 --> 00:21:40.940
And this is really remarkably easy.

00:21:41.100 --> 00:21:45.610
If you've already done the work to
do the OS X adapter style stuff,

00:21:45.610 --> 00:21:49.010
loading up the EWT implementation
reflectively and safely,

00:21:49.010 --> 00:21:50.860
all you have to do is
implement one other method,

00:21:50.860 --> 00:21:53.280
which is handle open file.

00:21:53.430 --> 00:21:56.620
And then you need to go
into your Info.plist,

00:21:56.620 --> 00:21:59.310
either in Jarbundler or
in the Finder or in Xcode,

00:21:59.390 --> 00:22:02.240
if you're building with Xcode,
and just set one very simple key,

00:22:02.320 --> 00:22:04.230
which is CFBundleDocumentTypes.

00:22:04.370 --> 00:22:07.170
It has some sub-items,
which we have documented,

00:22:07.300 --> 00:22:09.300
but this is the same thing you
would do for Cocoa and Carbon.

00:22:09.300 --> 00:22:10.300
There's no Java special stuff.

00:22:10.300 --> 00:22:13.130
So just look up the standard
Apple documentation,

00:22:13.130 --> 00:22:16.300
do this, implement this one method,
and basically all you want to do,

00:22:16.300 --> 00:22:20.580
this is going to pass you a Java.io file,
and you would just hand that file

00:22:20.580 --> 00:22:23.240
to whatever logic you already
have for opening your documents.

00:22:23.300 --> 00:22:26.450
And as a little aside,
this is supported in

00:22:26.450 --> 00:22:29.430
Java Web Start for 1.5,
so if you're doing Web Start deployment,

00:22:29.430 --> 00:22:33.300
that you'll get without even needing
to do any of this work up top.

00:22:34.490 --> 00:22:36.400
This is a screenshot
of the Info.plist keys.

00:22:36.400 --> 00:22:39.420
Obviously, you can't read them,
but it's basically a blow-up of

00:22:39.490 --> 00:22:43.400
the CFBundleDocumentTypes property.

00:22:43.400 --> 00:22:47.400
It has things like the icon that you
might want to specify for the document,

00:22:47.430 --> 00:22:50.400
file name extensions
that you want to own,

00:22:50.400 --> 00:22:53.400
MIME types if you have them,
so on and so forth.

00:22:53.400 --> 00:22:56.470
We'll have a link to
that documentation later.

00:22:56.780 --> 00:23:00.930
Okay, so this is the big winner for me.

00:23:01.120 --> 00:23:04.460
I get this a lot.

00:23:04.520 --> 00:23:06.420
This isn't Windows.

00:23:09.640 --> 00:23:11.740
When we're dealing with files,
I download a lot of

00:23:11.740 --> 00:23:15.730
applications now and then,
and I start it up and nothing happens.

00:23:15.810 --> 00:23:18.710
I go into console and sure enough,

00:23:19.820 --> 00:23:25.070
Java could not find
the file C:\ something.

00:23:49.370 --> 00:23:49.410
And this is so easy to avoid.

00:23:49.410 --> 00:23:49.410
So really, don't ever assume--I've
said assume nothing before,

00:23:49.410 --> 00:23:49.410
but that also applies to the file system,
to what--you know,

00:23:49.410 --> 00:23:49.410
what system you are on.

00:23:49.410 --> 00:23:49.410
Things like drive letters, backslashes,
or even colons,

00:23:49.410 --> 00:23:49.410
because this isn't Mac OS 9 either.

00:23:49.410 --> 00:23:49.410
Those can be potentially fatal.

00:23:49.410 --> 00:23:49.410
If you have some critical
file that you need to load and

00:23:49.410 --> 00:23:49.410
you've got a specific path,
you may be doomed.

00:23:52.500 --> 00:23:54.060
And this brings us to step six.

00:23:54.210 --> 00:23:55.700
There are Java methods for this, too.

00:23:56.090 --> 00:23:58.520
There are constants for things
like the rights file separator

00:23:58.520 --> 00:23:59.660
on the right platform.

00:23:59.720 --> 00:24:03.230
There is a path separator if there's some
kind of path that you need to construct.

00:24:03.440 --> 00:24:06.340
There's a user dir and user
home system properties just

00:24:06.450 --> 00:24:08.200
using system get property.

00:24:08.260 --> 00:24:10.240
And those will give you the user
home directory or the current

00:24:10.360 --> 00:24:12.120
running directory of the application.

00:24:12.210 --> 00:24:15.310
So if you want to do
things like do relative--

00:24:15.300 --> 00:24:26.600
[Transcript missing]

00:24:26.710 --> 00:24:29.360
And if you have things on the class path,
whether they be in your jars

00:24:29.410 --> 00:24:31.540
or just on somewhere else in
the class path that you've set,

00:24:31.600 --> 00:24:35.400
whether they be images or something else,
you can just call your class loader

00:24:35.520 --> 00:24:37.600
and ask for the system resource.

00:24:37.750 --> 00:24:40.190
and you'll get a URL to that file,
and it's all ready.

00:24:40.200 --> 00:24:41.870
You don't even need to
worry about path names.

00:24:41.880 --> 00:24:46.010
And you can also use the macros
that we make available to you in the

00:24:46.010 --> 00:24:48.550
Info.plist to do some other path access.

00:24:48.600 --> 00:24:49.980
I'm going to talk about that right now.

00:24:50.040 --> 00:24:51.640
This is a picture of the Info.plist.

00:24:51.740 --> 00:24:53.670
Oh, I'm sorry,
this is a picture of Jarbutler.

00:24:53.680 --> 00:24:57.080
And I know you can't read these,
so I have the text on the right.

00:24:57.080 --> 00:24:58.500
There are two big macros that we have.

00:24:58.560 --> 00:24:59.710
One of them is app package.

00:24:59.740 --> 00:25:03.110
The other one is java root,
and app package points to

00:25:03.310 --> 00:25:05.970
the absolute path to your
double-clickable application.

00:25:06.460 --> 00:25:09.560
And the java root is the contents,
resources,

00:25:09.560 --> 00:25:11.610
java subdirectory of that package.

00:25:11.660 --> 00:25:15.730
Now, these macros are for use
by the java launcher,

00:25:16.130 --> 00:25:18.720
meaning you'll never see them
at runtime in your java code.

00:25:18.760 --> 00:25:21.150
But what you can do is,
because you already have a

00:25:21.150 --> 00:25:23.740
plist and you have properties,
as you can see up here in Jarbutler,

00:25:23.740 --> 00:25:28.700
you can set a java system property
and set the value to app package or

00:25:28.780 --> 00:25:30.810
java root or some extension thereof.

00:25:31.590 --> 00:25:36.570
And the launcher stub up.

00:25:36.720 --> 00:25:39.390
will build these and set
them as system properties,

00:25:39.400 --> 00:25:41.860
so at runtime you can do get
system property for whatever I set,

00:25:41.860 --> 00:25:44.660
and you will have that
path available to you.

00:25:45.590 --> 00:25:47.040
So we talked about documents already.

00:25:47.040 --> 00:25:48.840
I know it sounds a little confusing.

00:25:48.930 --> 00:25:51.100
But now we're talking about
other people's documents,

00:25:51.180 --> 00:25:53.500
other people's applications.

00:25:53.620 --> 00:25:54.470
How do I launch a website?

00:25:54.530 --> 00:25:56.500
What's the default browser on the system?

00:25:56.500 --> 00:25:58.390
Do I really want to call the
system configuration framework?

00:25:59.330 --> 00:25:59.840
Probably not.

00:26:00.090 --> 00:26:02.740
How do I know if there's
a browser installed?

00:26:02.740 --> 00:26:05.000
How do I know which one I can launch?

00:26:05.000 --> 00:26:07.900
If I have another application's document,
especially with this,

00:26:07.900 --> 00:26:09.990
it's an email program,
it's going to get attachments.

00:26:10.000 --> 00:26:11.530
How do I open that attachment?

00:26:11.530 --> 00:26:12.900
How do I find it, launch it?

00:26:13.050 --> 00:26:16.090
How do I feed the doc to the application?

00:26:16.970 --> 00:26:19.700
So this is the other one that
we really haven't talked about

00:26:19.700 --> 00:26:20.580
at the conference before.

00:26:20.580 --> 00:26:22.110
It gets a lot of play
on the mailing list.

00:26:22.220 --> 00:26:25.250
The runtime exec method
can be your friend.

00:26:25.260 --> 00:26:28.170
A lot of people are afraid of it,
but particularly the open

00:26:28.230 --> 00:26:30.930
command because it's hooked
directly into launch services.

00:26:30.940 --> 00:26:32.700
And you can test this
out from the terminal.

00:26:32.700 --> 00:26:36.280
You just type open and some file name,
and it will go to whatever

00:26:36.280 --> 00:26:39.140
the currently registered
application is for that document.

00:26:39.140 --> 00:26:40.310
And it will go ahead and open it up.

00:26:40.540 --> 00:26:42.320
You feed it a URL, it will launch Safari.

00:26:42.320 --> 00:26:45.680
Or you can override that
behavior by using dash A.

00:26:45.720 --> 00:26:48.420
If you know specifically that there's
an application installed somewhere,

00:26:48.420 --> 00:26:50.590
you can tell it,
open this document with this app.

00:26:52.000 --> 00:26:54.580
And we recommend that when
you're calling runtime exec,

00:26:54.580 --> 00:26:59.000
you use a separated string
array with your spaces.

00:26:59.590 --> 00:27:02.170
Because if you use a single
space separated string,

00:27:02.170 --> 00:27:02.810
that could work.

00:27:02.930 --> 00:27:05.090
But if you have a single
argument with spaces in it,

00:27:05.200 --> 00:27:08.130
that's going to fall apart on you.

00:27:08.160 --> 00:27:10.070
But the real key here
is I'm telling you this,

00:27:10.070 --> 00:27:13.660
but I don't want you to
overuse Runtime Exec.

00:27:14.090 --> 00:27:15.500
Use the Java APIs where you can.

00:27:15.500 --> 00:27:18.500
Just like the previous steps,
there are ways of doing this.

00:27:18.500 --> 00:27:22.500
If you want to get a list of files,
don't do a runtime exec on LS.

00:27:22.510 --> 00:27:26.500
Just ask the--get a file object
for the directory that you're in.

00:27:26.500 --> 00:27:28.000
Ask it to list the files.

00:27:28.180 --> 00:27:31.470
You can do a make--you can do
a makeder with the file class.

00:27:31.520 --> 00:27:35.310
You can rename a file
with the file class.

00:27:36.850 --> 00:27:39.640
And this is just a code example,
it looks pretty legible,

00:27:39.640 --> 00:27:40.900
of how we would do this.

00:27:41.200 --> 00:27:42.630
Constructing a string array here.

00:27:42.780 --> 00:27:45.960
Obviously the first item is open,
because that's the command we

00:27:46.020 --> 00:27:47.460
want to send to the terminal.

00:27:47.790 --> 00:27:49.500
And then look, I'm using user.home.

00:27:49.690 --> 00:27:52.800
So this is going to open an
MS Word doc called mydoc in

00:27:52.800 --> 00:27:54.620
the user's home directory.

00:27:54.620 --> 00:27:58.170
And basically,
Runtime Exec returns a process object.

00:27:58.240 --> 00:28:02.300
So you can get that process object,
and if you need to do I/O with it or

00:28:02.300 --> 00:28:06.680
just take care of any error reporting,
anything like that, you can do that.

00:28:06.700 --> 00:28:09.140
You can do that through
the process object.

00:28:09.210 --> 00:28:12.020
And I would like to show you
a demo of that right now.

00:28:16.080 --> 00:28:17.960
Just to make sure I'm on schedule here.

00:28:17.960 --> 00:28:20.240
I think so.

00:28:20.310 --> 00:28:22.740
So here we are with our
application menu bar,

00:28:22.740 --> 00:28:27.020
and we have our correct menu
shortcuts with the command key

00:28:27.020 --> 00:28:28.100
as we'd expect to see them.

00:28:28.200 --> 00:28:29.900
So we're making good progress.

00:28:29.900 --> 00:28:31.900
But then I was playing
around with Pooka some more,

00:28:31.900 --> 00:28:33.740
and there's this address book item.

00:28:33.750 --> 00:28:35.880
So let me open up the address book.

00:28:35.880 --> 00:28:37.680
And it brings me to this
address book editor.

00:28:37.680 --> 00:28:40.740
Obviously, it's Pooka's address book.

00:28:40.740 --> 00:28:43.450
And I go over the addresses,
and they're empty.

00:28:44.430 --> 00:28:48.400
I really don't want to enter
all my friends' addresses again.

00:28:48.610 --> 00:28:52.390
So what can we possibly do about this?

00:28:53.170 --> 00:28:55.940
Well, this is where the beauty
of Runtime Exec comes in.

00:28:55.980 --> 00:28:59.400
I know I have an address book
application here on the system,

00:28:59.460 --> 00:29:02.940
and it would be a shame if
I had to do cutting and pasting,

00:29:03.010 --> 00:29:03.590
anything like that.

00:29:03.600 --> 00:29:04.090
Where are we?

00:29:04.100 --> 00:29:04.710
Step seven?

00:29:04.760 --> 00:29:05.250
I think.

00:29:05.260 --> 00:29:07.970
OK.

00:29:08.000 --> 00:29:12.880
And that brings us here.

00:29:15.460 --> 00:29:19.900
I wrote some really simple
methods in my Mac integration

00:29:19.900 --> 00:29:23.300
class to open the address book,
the real address book.

00:29:23.510 --> 00:29:26.280
And again,
I know where address book is installed.

00:29:26.550 --> 00:29:30.070
Everything system standard is
installed in /applications.

00:29:30.190 --> 00:29:31.620
So we have a path here.

00:29:31.680 --> 00:29:34.740
And here's the same runtime exec code,
or roughly the same code,

00:29:34.740 --> 00:29:37.620
that I showed you in the slide.

00:29:37.670 --> 00:29:40.100
And I'm calling this over here.

00:29:44.770 --> 00:29:49.660
This is the code that responds to
the menu item up in the menu bar.

00:29:49.660 --> 00:29:51.070
This is from the PUGA code.

00:29:51.080 --> 00:29:52.270
This is nothing that I wrote.

00:29:52.370 --> 00:29:55.010
And basically all I did was
insert something right here

00:29:56.270 --> 00:29:59.260
to open the address book.

00:29:59.400 --> 00:30:01.400
So let's see how that works.

00:30:04.000 --> 00:30:05.450
And again,
the app shouldn't look any different,

00:30:05.560 --> 00:30:07.780
because all we're doing
is changing the menu item.

00:30:07.820 --> 00:30:10.650
If I go ahead and I click
the address book menu item,

00:30:10.650 --> 00:30:11.580
and-- oh, right.

00:30:11.700 --> 00:30:13.440
So that's what I'm used to seeing.

00:30:13.480 --> 00:30:15.580
Now I don't have to enter
all this stuff again.

00:30:15.650 --> 00:30:18.540
If I need to edit addresses,
I can do it the way I'm used to doing.

00:30:18.930 --> 00:30:20.550
This was six lines of code.

00:30:20.730 --> 00:30:24.580
Shouldn't be any problem at all.

00:30:24.780 --> 00:30:28.150
So let's go back to the slides, please.

00:30:34.710 --> 00:30:37.020
Here's the next item, help.

00:30:37.220 --> 00:30:38.900
And I'm not asking for help.

00:30:39.140 --> 00:30:40.970
I'm just talking about help.

00:30:41.340 --> 00:30:43.790
There are plenty of
concepts of user assistance,

00:30:43.790 --> 00:30:45.200
and Java provides those as well.

00:30:45.200 --> 00:30:48.200
Obviously,
the most popular one is Java Help.

00:30:48.200 --> 00:30:49.200
And Java Help's fine.

00:30:49.200 --> 00:30:50.080
It works on the Mac just fine.

00:30:50.240 --> 00:30:52.130
You saw a screenshot of it up there.

00:30:52.380 --> 00:30:55.200
The trick is that it's not a
part of the standard edition.

00:30:55.200 --> 00:31:00.200
And part of our idea behind
distributing the whole JDK as part

00:31:00.200 --> 00:31:03.200
of our system is that you don't
have to worry about redistribution.

00:31:03.200 --> 00:31:05.280
And then you go into
these additional features,

00:31:05.280 --> 00:31:07.700
and I have to do Java Help,
I have to go find some third-party

00:31:08.020 --> 00:31:11.550
tool to generate a Java Help help set,
and that's not the kind

00:31:11.550 --> 00:31:13.200
of work we want you to do.

00:31:13.200 --> 00:31:15.200
And furthermore,
after you do all that work,

00:31:15.200 --> 00:31:19.200
you have this Java Help window come up,
and it really doesn't look that Mac-like.

00:31:19.200 --> 00:31:21.200
There's nothing wrong with it,
but it's just not familiar.

00:31:21.200 --> 00:31:25.800
Mac users in particular are used
to using the system help viewer.

00:31:26.090 --> 00:31:28.760
And now some people might say, whoa,
hold on,

00:31:28.920 --> 00:31:31.500
I'm not rewriting my entire help.

00:31:38.720 --> 00:31:39.000
But the Java help sets are
already written in HTML,

00:31:39.000 --> 00:31:39.310
which is the same thing
that the help viewer uses.

00:31:39.310 --> 00:31:39.700
So we have a very
portable situation here.

00:31:39.700 --> 00:31:42.700
So that brings us to step eight:
use the help viewer.

00:31:42.700 --> 00:31:46.010
You can create a help book to
support your application very,

00:31:46.010 --> 00:31:46.700
very easily.

00:31:46.700 --> 00:31:50.700
You can use the existing
HTML from your Java help set.

00:31:50.700 --> 00:31:53.700
Java help will still work
if you did things correctly.

00:31:53.810 --> 00:31:56.700
You shouldn't have to interfere
with anything you've already done.

00:31:56.820 --> 00:32:00.930
And the great thing about integration
with the Mac OS X help viewer is

00:32:01.020 --> 00:32:04.140
that after you load up your help,

00:32:04.770 --> 00:32:09.210
Mac OS X Help will now search
your application's help content,

00:32:09.470 --> 00:32:10.500
even when the app isn't running.

00:32:10.600 --> 00:32:12.340
If you're using Java Help,
you have to launch the

00:32:12.470 --> 00:32:14.600
app and then go to Help.

00:32:14.600 --> 00:32:18.600
And then only within the context of your
application can your user get assistance.

00:32:18.600 --> 00:32:22.600
And I'll show you why that
may be a good thing later.

00:32:22.600 --> 00:32:25.110
So here's what you have to
do to actually use the help

00:32:25.110 --> 00:32:26.600
viewer from your application.

00:32:26.600 --> 00:32:28.550
Here's another InfoP-List screenshot.

00:32:28.870 --> 00:32:30.390
There's two big InfoP-List keys.

00:32:30.600 --> 00:32:32.600
One of them is CFBundle Help Book Folder.

00:32:32.600 --> 00:32:36.020
The other one is CFBundle Help Book Name.

00:32:36.370 --> 00:32:37.300
And that's it.

00:32:37.370 --> 00:32:40.900
Basically, you obviously put the
name of your folder.

00:32:41.140 --> 00:32:43.840
And the help book name is
something a little more specific,

00:32:43.900 --> 00:32:47.300
and I'll go into that in a second.

00:32:47.300 --> 00:32:49.220
And I will show you a demo now.

00:32:49.420 --> 00:32:51.270
Can we go to demo one?

00:32:53.030 --> 00:32:54.420
So let me first show you
what I'm talking about.

00:32:54.420 --> 00:32:56.440
This is our Step 7 application.

00:32:56.480 --> 00:32:58.750
So I go up here to the Help menu.

00:32:59.080 --> 00:33:00.320
And here's our Java help.

00:33:00.370 --> 00:33:01.360
Now, it's not that bad.

00:33:01.360 --> 00:33:02.480
It's in Aqua.

00:33:02.480 --> 00:33:04.240
Everything's cool.

00:33:04.940 --> 00:33:06.110
And here's our Java help.

00:33:06.120 --> 00:33:07.160
Now, it's not that bad.

00:33:07.160 --> 00:33:08.260
It's in Aqua.

00:33:08.330 --> 00:33:10.040
Everything's cool.

00:33:18.050 --> 00:33:19.220
And here's our Java help.

00:33:19.220 --> 00:33:20.260
Now, it's not that bad.

00:33:20.290 --> 00:33:21.310
It's in Aqua.

00:33:21.460 --> 00:33:23.110
Everything's cool.

00:33:32.770 --> 00:33:35.840
So here's our Step 8 project.

00:33:35.840 --> 00:33:39.810
And what I've written here is-- yes,
don't gasp.

00:33:40.200 --> 00:33:42.170
It's JNI code.

00:33:42.900 --> 00:33:47.940
It's a very simple native void
here with a show help method,

00:33:48.150 --> 00:33:53.100
and I'll explain what the bad show
help is when we go back to the slides.

00:33:53.800 --> 00:33:54.940
And here's our JNI function.

00:33:54.940 --> 00:33:57.740
We go to Show Help,
and all we have to do is get

00:33:57.820 --> 00:33:59.540
the standard NS application,
because again,

00:33:59.540 --> 00:34:01.700
we're running on top of Cocoa.

00:34:01.740 --> 00:34:05.470
And there's a very simple
method called Show Help.

00:34:06.000 --> 00:34:09.630
And once we do that,
the Cocoa system goes in,

00:34:09.820 --> 00:34:12.900
looks at the Info.plist,
finds out what the helpbook folder is,

00:34:12.900 --> 00:34:15.370
finds out the helpbook name,
and that's how it knows to load up the

00:34:15.370 --> 00:34:17.100
help folder and what the front page is.

00:34:17.100 --> 00:34:23.170
And the only remaining step--

00:34:25.800 --> 00:34:30.890
was for me to call this new
method from the help action,

00:34:30.890 --> 00:34:32.640
which was already written in PUCA.

00:34:32.700 --> 00:34:39.070
Now there's something missing here,
and that's the help bundle itself.

00:34:39.310 --> 00:34:43.490
So what you're looking at right here
is the Java Help help set from Pooka.

00:34:43.700 --> 00:34:45.200
I took it out of the jar.

00:34:45.420 --> 00:34:47.080
This is the folder that it always was.

00:34:47.270 --> 00:34:49.060
It's got the same content,
everything else.

00:34:49.200 --> 00:34:51.200
I did a couple simple things.

00:34:51.250 --> 00:34:55.460
You can see this Mac Help index item.

00:34:55.750 --> 00:34:57.700
This is a very simple
front page that I wrote.

00:34:57.700 --> 00:34:59.610
It's got a frame set.

00:35:00.220 --> 00:35:04.230
I wrote another simple page because
I wanted this to be a frame set thing

00:35:04.610 --> 00:35:08.580
with all the table of contents in the
left looking just like the Java help did.

00:35:09.690 --> 00:35:13.400
And the real thing here is this
meta tag that I added to the front.

00:35:13.490 --> 00:35:14.760
This is the Apple title meta tag.

00:35:14.810 --> 00:35:19.100
This is what Help Viewer looks for
when it goes to load up a help set.

00:35:19.100 --> 00:35:21.600
So this needs to match the content here.

00:35:21.600 --> 00:35:28.220
It needs to match what you put in
your CFBundle help book name property.

00:35:28.850 --> 00:35:30.320
And that's really all I did.

00:35:30.400 --> 00:35:32.700
I didn't change any of the other content.

00:35:32.850 --> 00:35:36.500
The other thing I did was I dropped this
guy on top of the Apple Help indexer,

00:35:36.730 --> 00:35:39.870
which is part of the develop-- which
is under Developer/Applications

00:35:40.130 --> 00:35:41.460
in your developer tools.

00:35:41.610 --> 00:35:43.460
And what that does is
it makes it searchable.

00:35:43.460 --> 00:35:46.200
I added a few keywords,
meta tags in a few places,

00:35:46.350 --> 00:35:49.460
and I created a search
index for Apple Help.

00:35:49.610 --> 00:35:51.800
So let's see where that gets us.

00:35:57.300 --> 00:35:59.510
brings up our Step 8 Pucca app.

00:35:59.550 --> 00:36:03.820
And now when I go to Help,
we're launching Help Viewer.

00:36:05.590 --> 00:36:07.490
And it's going to go ahead
and parse the help content.

00:36:07.570 --> 00:36:09.180
This is inside the .app package.

00:36:09.210 --> 00:36:12.600
This is the same content
that was in the Java help.

00:36:13.440 --> 00:36:16.600
And if I did my HTML right,
which I can't guarantee,

00:36:16.680 --> 00:36:18.900
these links should work.

00:36:19.080 --> 00:36:19.800
Well, that's great.

00:36:19.800 --> 00:36:20.190
OK.

00:36:20.310 --> 00:36:22.130
I mean, really.

00:36:23.050 --> 00:36:25.230
This doesn't seem like a big
win for a Java developer,

00:36:25.240 --> 00:36:27.000
especially somebody that's
new to the platform.

00:36:27.140 --> 00:36:31.600
So great, I did this work,
and I have the same help I had before.

00:36:31.670 --> 00:36:33.450
But where this really gets
interesting is you'll notice

00:36:33.520 --> 00:36:35.130
I'm not running in PUCA anymore.

00:36:35.270 --> 00:36:37.070
Let's go to the Finder.

00:36:37.720 --> 00:36:39.840
I'll go to Mac Help.

00:36:40.090 --> 00:36:44.840
And this is just the
standard Macintosh help.

00:36:44.840 --> 00:36:48.670
Where is the finder?

00:36:52.270 --> 00:36:53.800
And I get a bunch of hits here.

00:36:54.020 --> 00:36:57.240
But what if I searched
all hell and asked,

00:36:57.280 --> 00:37:01.990
how do I encrypt email messages?

00:37:04.650 --> 00:37:08.230
And now, if I sort this by relevance,
you see that puka appears at

00:37:08.310 --> 00:37:10.800
the top because of the keywords
I entered in the meta tag.

00:37:10.980 --> 00:37:13.340
And the key is that puka
is not running anymore.

00:37:13.530 --> 00:37:16.780
And so your user may use your
application all the time,

00:37:16.940 --> 00:37:19.580
and if it's not running,
and they're running in the fire,

00:37:19.580 --> 00:37:21.010
and they want to know
how to do something,

00:37:21.200 --> 00:37:24.730
they can search the Macintosh help,
and your application will pop up and

00:37:24.730 --> 00:37:27.560
maybe show them something that they
didn't even know how to do before.

00:37:27.680 --> 00:37:29.490
If you're using Java help,
they have to be using your

00:37:29.500 --> 00:37:30.960
application to learn about it.

00:37:31.040 --> 00:37:34.190
If you're using the Macintosh help,
they don't have to be.

00:37:35.010 --> 00:37:35.900
And that's the big win there.

00:37:35.900 --> 00:37:38.660
And again,
this was five minutes of HTML work and

00:37:38.660 --> 00:37:40.900
about 30 seconds of info P list work.

00:37:41.150 --> 00:37:44.280
And obviously, I'm going to make this,
that help code available to

00:37:44.340 --> 00:37:46.900
you so you don't have to do
anything but call a Java method.

00:37:46.900 --> 00:37:51.340
Can we go back to the slides, please?

00:37:53.910 --> 00:37:57.590
So this is where the bad
show help method comes in.

00:37:57.650 --> 00:37:59.840
Once we start working with JNI,
there are some things

00:37:59.840 --> 00:38:01.080
to be careful about.

00:38:01.130 --> 00:38:03.840
Whether you're calling
to or from native code,

00:38:03.840 --> 00:38:04.980
there are threading issues.

00:38:05.000 --> 00:38:09.700
The AWT and the AppKit, the Cocoa, GUI,
operate on separate threads.

00:38:09.700 --> 00:38:12.360
And they expect their events
to appear in certain places.

00:38:12.360 --> 00:38:16.360
If you're calling from Java into AppKit,
you need to be careful because,

00:38:16.420 --> 00:38:19.540
typically, if you're coming from Java,
you're coming from a Java thread.

00:38:19.540 --> 00:38:21.920
You may even be coming
from the AWT thread.

00:38:21.930 --> 00:38:23.270
And Cocoa has a mechanism for this.

00:38:23.410 --> 00:38:25.340
It's called performSelectorOnMainThread.

00:38:25.350 --> 00:38:28.640
And that basically sends an asynchronous
message to the event queue so that when

00:38:28.680 --> 00:38:33.940
you're doing some AppKit operations,
you don't have to worry about a deadlock.

00:38:33.960 --> 00:38:39.620
And likewise,
if you're calling from Cocoa into Java,

00:38:39.620 --> 00:38:41.860
if you're going to do
things like update the UI,

00:38:41.860 --> 00:38:44.300
you want to make sure you
get on the event queue,

00:38:44.420 --> 00:38:47.040
especially in the case of Swing,
which is single-threaded.

00:38:47.040 --> 00:38:49.130
And you can do that using
event queue invoke later or

00:38:49.320 --> 00:38:51.650
Swing utilities invoke later,
which is just a wrapper

00:38:51.660 --> 00:38:52.960
around that same call.

00:38:52.970 --> 00:38:55.620
You want to let Java return
as soon as possible.

00:38:55.620 --> 00:38:56.700
And that's what this does.

00:38:56.770 --> 00:38:59.300
It will drop you on a new
thread-- on a new runnable,

00:38:59.300 --> 00:39:02.400
rather, and put yourself on the
AWT thread so you can return.

00:39:02.400 --> 00:39:07.120
I mean, I think you can probably see the
situation here where I have a Java event.

00:39:07.200 --> 00:39:11.400
And in response to that Java event,
I make a call to AppKit.

00:39:11.410 --> 00:39:15.620
And then AppKit makes a call back into
Java to do something like a repaint.

00:39:15.640 --> 00:39:17.190
And we're done.

00:39:17.920 --> 00:39:20.960
So, and that's where the
Badge Show Help came in.

00:39:20.960 --> 00:39:24.360
I'm not going to demo that,
but what the Badge Show Help did

00:39:24.360 --> 00:39:29.800
was it made the help request
off of the main AppKit thread.

00:39:29.800 --> 00:39:32.730
And that's really not, you know,
you might say, what's the big deal?

00:39:32.840 --> 00:39:34.800
All we did was launch
a separate application.

00:39:34.800 --> 00:39:35.440
And that's true.

00:39:35.490 --> 00:39:36.800
It's not that big a deal in this case.

00:39:36.800 --> 00:39:40.850
But what happens is if there's
no help book folder specified,

00:39:40.850 --> 00:39:42.800
or it can't find the help book folder,
a dialog comes up,

00:39:42.800 --> 00:39:44.800
and that dialog comes up from Cocoa.

00:39:44.800 --> 00:39:47.530
So if we did this directly
on the AWT thread,

00:39:47.620 --> 00:39:51.710
and an AppKit dialog came up,
we would have been in big trouble.

00:39:51.900 --> 00:39:53.800
And again,
it's my job to make sure you guys

00:39:53.800 --> 00:39:55.560
don't have to worry about this.

00:39:55.690 --> 00:39:57.630
But I need to say it.

00:39:57.790 --> 00:40:01.260
It was mentioned earlier in Ted's
talk in Xcode for Java Development,

00:40:01.260 --> 00:40:03.460
because he was talking
about some JNI things too.

00:40:03.560 --> 00:40:04.870
And this is very, very important.

00:40:05.100 --> 00:40:07.050
If any of you are going
to do any JNI stuff,

00:40:07.190 --> 00:40:09.590
you really need to be aware of this.

00:40:10.900 --> 00:40:15.100
So with that, I'd like to talk some more
about the really cool stuff.

00:40:15.240 --> 00:40:16.920
What can we really do?

00:40:16.920 --> 00:40:19.370
So far we've been talking
about compatibility and cute

00:40:19.370 --> 00:40:22.860
little bells and whistles,
but what can we do to really,

00:40:22.860 --> 00:40:24.680
really make this app cool?

00:40:27.320 --> 00:40:30.200
And, you know, it's a sad fact,
but Java can't do everything.

00:40:30.290 --> 00:40:31.000
It just can't.

00:40:31.030 --> 00:40:32.040
It's cross-platform.

00:40:32.200 --> 00:40:33.990
It doesn't know which
platform it's running on,

00:40:34.000 --> 00:40:36.030
which is, you know,
a good thing for you if you want to

00:40:36.030 --> 00:40:37.440
deploy as many places as you can.

00:40:37.440 --> 00:40:39.440
But it doesn't know its host that deeply.

00:40:39.440 --> 00:40:41.380
We've already seen that
with the screen menu bar,

00:40:41.600 --> 00:40:45.430
with the application menu,
and to an extent with the help viewer.

00:40:46.050 --> 00:40:49.200
There are plenty of system APIs that
you've learned about all week.

00:40:49.260 --> 00:40:50.950
There are plenty of components.

00:40:51.020 --> 00:40:54.240
And you may think that
they're unavailable to you.

00:40:54.290 --> 00:40:55.980
Or are they?

00:40:56.240 --> 00:40:57.190
And so this is step nine.

00:40:57.200 --> 00:41:01.600
We have another piece of the
extended AWT called Cocoa Component.

00:41:01.600 --> 00:41:05.290
And what Cocoa Component lets you do is,
it's a Java AWT component,

00:41:05.290 --> 00:41:09.390
but what it lets you do is it creates
a hook that allows you to write a

00:41:09.390 --> 00:41:15.950
JNI library to extend any NSView and
implant that in a Java hierarchy.

00:41:16.040 --> 00:41:16.780
So you can do anything.

00:41:16.800 --> 00:41:20.500
You can get a WebView, NSOpenGLView,
an AB People Picker View,

00:41:20.560 --> 00:41:23.910
even the QT Movie View from
the new QT kit that they've

00:41:24.020 --> 00:41:25.820
been talking about this week.

00:41:25.950 --> 00:41:28.240
You can drop any of those
into a Java application.

00:41:28.510 --> 00:41:31.680
You can bring these
features right to Java.

00:41:31.680 --> 00:41:32.900
And I'm going to show you
how to do that right now.

00:41:32.920 --> 00:41:35.870
Can we go to demo one, please?

00:41:41.900 --> 00:41:44.840
I should have done that earlier.

00:41:44.870 --> 00:41:48.620
OK, so let's run step eight again.

00:41:48.700 --> 00:41:54.080
And we got halfway there with step seven,
when we launched the address

00:41:54.130 --> 00:41:55.280
book to do our editing.

00:41:55.340 --> 00:42:01.480
And now what I want to do
is I want to write an email.

00:42:03.900 --> 00:42:07.640
So here's this little address
icon that Puka has right here.

00:42:07.660 --> 00:42:13.460
And great, I'm back to that address book
that I didn't want to enter all

00:42:13.460 --> 00:42:15.800
my email addresses in yet again.

00:42:15.980 --> 00:42:17.200
So what can we do about this?

00:42:17.200 --> 00:42:21.390
Well, we can do a little bit of work.

00:42:24.420 --> 00:42:25.920
See if we can get a
Cocoa component in here.

00:42:25.960 --> 00:42:33.510
And of course, we already did,
but I'll show you how.

00:42:34.110 --> 00:42:35.960
So here's my Java People Picker view.

00:42:35.960 --> 00:42:38.450
It extends the Cocoa component.

00:42:38.450 --> 00:42:39.540
And it's actually pretty simple.

00:42:39.590 --> 00:42:41.050
Obviously we load a library.

00:42:41.090 --> 00:42:43.080
It uses JNI.

00:42:43.440 --> 00:42:45.690
There are a couple of things
you have to implement that I'll

00:42:45.870 --> 00:42:48.090
leave to you after the talk.

00:42:48.190 --> 00:42:51.280
We have a pretty extensive
Java documentation on this.

00:42:51.340 --> 00:42:54.270
You need to have something
that creates the NSView.

00:42:55.200 --> 00:43:08.000
[Transcript missing]

00:43:10.220 --> 00:43:14.500
And we have the JNI callbacks
shown right here.

00:43:14.500 --> 00:43:18.160
Let me open this up for
you a little better.

00:43:19.260 --> 00:43:21.190
I know it's scary, it's C code.

00:43:21.230 --> 00:43:24.380
I bet you didn't think you were
going to see that in this talk,

00:43:24.380 --> 00:43:24.380
huh?

00:43:25.790 --> 00:43:30.860
So this is our standard
Cocoa initialization code.

00:43:30.860 --> 00:43:33.970
We create a new People Picker view,
and of course this extends the

00:43:34.100 --> 00:43:36.700
AB People Picker view from Address Book.

00:43:37.050 --> 00:43:39.700
And I think you can see
where we're going with this.

00:43:39.700 --> 00:43:45.150
Let's just go ahead and run it
before I explain anything else.

00:43:50.910 --> 00:43:54.050
create another new message,
click my button.

00:43:54.100 --> 00:43:57.300
And this time,
we have the real address book.

00:43:57.380 --> 00:43:59.480
And this is really what I wanted to see.

00:43:59.530 --> 00:44:01.360
I didn't want to enter
this stuff all again.

00:44:01.560 --> 00:44:06.450
I didn't want to look around and
figure out who I wanted to email it,

00:44:06.450 --> 00:44:08.460
copy it, paste it into the other thing.

00:44:08.520 --> 00:44:13.040
And once we have this in the app,
and we got the whole Java team in here,

00:44:13.100 --> 00:44:14.630
we can email whoever we want.

00:44:14.670 --> 00:44:17.400
Email Scott, email Caroline.

00:44:17.460 --> 00:44:21.140
And so what's happening here is I'm
double clicking into this Cocoa view,

00:44:21.250 --> 00:44:25.040
and I'm intercepting the event,
taking the address book information,

00:44:25.160 --> 00:44:26.350
sending it back to Java.

00:44:26.580 --> 00:44:27.970
Because remember, this is a Java frame.

00:44:28.070 --> 00:44:32.040
So I'm taking these strings and
putting them in the to field.

00:44:32.090 --> 00:44:33.870
I admit it's slightly complicated.

00:44:33.950 --> 00:44:36.830
But let me show you how I'm doing that.

00:44:37.040 --> 00:44:39.040
Here's our people picker view.

00:44:39.080 --> 00:44:45.770
And as soon as I remember how I did it.

00:44:51.370 --> 00:44:53.940
So Cocoa is pretty dynamic.

00:44:53.960 --> 00:44:58.240
And with this view, this is specifically
an address book method,

00:44:58.380 --> 00:45:02.010
which is the set name double action,
as in I have a double click on this view.

00:45:02.090 --> 00:45:03.540
What do I do with it?

00:45:03.570 --> 00:45:06.920
And I told it to do the
mail to selection method.

00:45:07.090 --> 00:45:08.460
And this is it right here.

00:45:08.500 --> 00:45:10.710
And basically,
you can see a lot of AB methods here.

00:45:10.730 --> 00:45:11.940
This is address book API.

00:45:11.940 --> 00:45:13.440
I really don't want to
teach you the address book.

00:45:13.440 --> 00:45:14.770
That's not the point here.

00:45:14.920 --> 00:45:19.480
What I'm doing is I'm getting the
person that was just double clicked.

00:45:19.510 --> 00:45:23.210
And then down here,
we call back to the Java object

00:45:23.360 --> 00:45:24.360
that instantiated us.

00:45:24.360 --> 00:45:25.290
Now, how did we do that?

00:45:25.410 --> 00:45:29.120
How did we know where our Java peer is?

00:45:29.130 --> 00:45:30.540
Well, I do that up here.

00:45:30.580 --> 00:45:33.420
First thing we need to do is have
the Java VM on hand at all times.

00:45:33.420 --> 00:45:36.320
And there's a handy
JNI function called JNI onload.

00:45:36.320 --> 00:45:39.810
And basically,
as soon as you call system load library,

00:45:40.060 --> 00:45:41.850
This method gets called,
this function gets called.

00:45:41.890 --> 00:45:45.410
And then you can just have the
JVM sitting there and just grab

00:45:45.410 --> 00:45:49.430
the JVM on load and then you have
it available to you at any point.

00:45:50.610 --> 00:45:56.130
And what we do then is when
the view is initialized,

00:45:57.730 --> 00:46:01.880
And here's our create NSView method.

00:46:01.920 --> 00:46:04.510
And whenever you get a
JNI callback from Java,

00:46:04.520 --> 00:46:05.640
there's two possibilities.

00:46:05.680 --> 00:46:10.490
One of them is you have,
if it's an object method,

00:46:10.810 --> 00:46:14.690
you get a reference to the
J object that was calling you.

00:46:14.870 --> 00:46:21.370
If it's a static method,
you get a reference to the J class.

00:46:21.370 --> 00:46:21.370
So basically, I just

00:46:24.300 --> 00:46:31.170
Basically, we just cast that object and
make sure we have a hold of it.

00:46:38.600 --> 00:46:38.600
Here's our init.

00:46:38.600 --> 00:46:38.610
We pass the J object.

00:46:38.610 --> 00:46:38.650
And so how you hold onto this is you
create something called the global ref.

00:46:38.650 --> 00:46:42.590
And this is something you do in JNI to
hold onto a Java object in native code.

00:46:42.670 --> 00:46:46.010
And there are some caveats to that,
namely the fact that this

00:46:46.010 --> 00:46:47.590
is a real Java reference.

00:46:47.590 --> 00:46:51.260
So if you know out all your
references in your Java code,

00:46:51.260 --> 00:46:52.600
you still have this one.

00:46:52.670 --> 00:46:54.030
So garbage collection may not occur.

00:46:55.130 --> 00:46:57.630
Now there's also an equivalent to this,
which is a weak global reference,

00:46:57.630 --> 00:46:58.670
which works like a weak reference.

00:46:58.760 --> 00:47:00.340
And that's probably
the way you want to go.

00:47:00.720 --> 00:47:04.420
But in the interest of thread
safety and all those things,

00:47:04.460 --> 00:47:06.600
I wanted to create a global ref here.

00:47:08.710 --> 00:47:10.350
And that's really where we are.

00:47:10.540 --> 00:47:13.580
We have the cache VM.

00:47:13.680 --> 00:47:16.420
We go ahead and we get the
JNI environment from it.

00:47:16.540 --> 00:47:18.180
We get the class from our Java peer.

00:47:18.180 --> 00:47:22.380
We go find a method called new
email to that I wrote in Java.

00:47:22.480 --> 00:47:27.660
And we pass the string that we got from
address book back to our Java object.

00:47:27.770 --> 00:47:30.830
And that's exactly what's
happening in the demo.

00:47:30.940 --> 00:47:33.040
We double click the address book view.

00:47:33.160 --> 00:47:34.820
It gets an AB person.

00:47:34.910 --> 00:47:36.100
I ask for the email address.

00:47:36.280 --> 00:47:37.400
I send that back to Java.

00:47:37.400 --> 00:47:41.460
Java gets the string and
puts it in the to field.

00:47:41.600 --> 00:47:41.750
All right.

00:47:41.850 --> 00:47:42.910
I think I've beaten that to death.

00:47:43.080 --> 00:47:45.330
So can we go back to the slides?

00:47:47.810 --> 00:47:48.980
So what's the last thing?

00:47:49.120 --> 00:47:51.560
The last thing, of course,
would be the dock.

00:47:51.620 --> 00:47:56.720
It's a really nice,
innovative thing in Mac OS X, and

00:48:03.810 --> 00:48:04.330
It really doesn't work with Java,
or maybe it does.

00:48:04.330 --> 00:48:04.890
You do get a lot of things for free,
as you've seen already.

00:48:04.920 --> 00:48:05.480
You get the name in the dock,
you get your dock icon if you set it,

00:48:05.830 --> 00:48:09.770
and a new feature in Java 1.4.2
Update 1 is window tracking.

00:48:09.800 --> 00:48:12.490
Any of your Java frames
appear in the dock menu,

00:48:12.490 --> 00:48:14.580
and you can go ahead and select those.

00:48:14.810 --> 00:48:16.640
There's no work from you,
and I think that's a

00:48:16.640 --> 00:48:17.800
nice little addition.

00:48:17.800 --> 00:48:19.800
That's all you get, though.

00:48:19.800 --> 00:48:21.800
You're not able to daz the
dock or change the icon.

00:48:21.800 --> 00:48:25.940
You can't bounce the dock,
and you can't set any custom menu items,

00:48:25.940 --> 00:48:27.000
either.

00:48:27.430 --> 00:48:28.690
Or can you?

00:48:28.910 --> 00:48:29.980
So here's step 10.

00:48:30.060 --> 00:48:32.120
Step 10 would be to really use the doc.

00:48:32.180 --> 00:48:34.460
And I've written a sample
code called javadoc,

00:48:34.620 --> 00:48:37.820
not to be confused with
the javadoc without the K.

00:48:37.860 --> 00:48:42.520
And I'll be releasing that after the show
once I get rid of the lewd comments in

00:48:42.520 --> 00:48:45.300
it while I was cramming for this show.

00:48:45.340 --> 00:48:48.130
And basically it opens up
the doc to Java developers.

00:48:48.360 --> 00:48:51.700
Anything you want to do,
you can do from Java code now.

00:48:51.700 --> 00:48:54.530
You can change the icon at runtime,
you can add items to the menu,

00:48:54.800 --> 00:48:58.120
and you can alert the user
if you're not in the front.

00:48:58.130 --> 00:48:59.270
I'd like to show you a demo of that.

00:48:59.380 --> 00:49:05.670
So this is our step 9 application,
still open.

00:49:07.840 --> 00:49:09.510
And so here's our dock menu.

00:49:09.620 --> 00:49:10.530
Can everybody see that?

00:49:10.790 --> 00:49:12.900
You don't need to read it,
but you can see it.

00:49:13.070 --> 00:49:18.690
This item up here is that free window
tracking menu that I mentioned earlier.

00:49:18.700 --> 00:49:22.690
Any Java frame that comes up is
going to be selectable in the dock.

00:49:22.830 --> 00:49:26.100
But wouldn't it be great if
I could do more than that?

00:49:26.270 --> 00:49:29.130
And so what I'm going to do first is,

00:49:31.970 --> 00:49:35.780
I've got some of the Java team
sitting in the front row here,

00:49:35.840 --> 00:49:37.900
trying to figure out who
I want to send an email to.

00:49:37.900 --> 00:49:41.300
I'll send an email to my fiance.

00:49:42.390 --> 00:49:45.360
Just give her a little free
advertisement for her company

00:49:45.360 --> 00:49:48.500
while I'm at this conference here.

00:50:03.100 --> 00:50:04.500
And, you know,
the real convenience here is

00:50:04.500 --> 00:50:07.230
that Kyanne works for a wireless
company called Good Technology,

00:50:07.230 --> 00:50:11.100
and she basically carries an
email device everywhere with her.

00:50:11.100 --> 00:50:13.320
And we have a minor problem here,
which is that I haven't

00:50:13.320 --> 00:50:15.100
logged into my email account.

00:50:15.100 --> 00:50:16.790
Let's take care of that.

00:50:24.030 --> 00:50:25.600
Okay.

00:50:25.600 --> 00:50:26.750
Let's try that one more time.

00:50:26.750 --> 00:50:29.000
Okay.

00:50:29.000 --> 00:50:33.340
We'll do it again.

00:50:56.850 --> 00:50:58.590
And as you can see,
I've been using either the file

00:50:58.590 --> 00:51:03.390
menu or this button at the top of
the frame to create a new message.

00:51:03.700 --> 00:51:06.040
That's really not the best way to go.

00:51:06.080 --> 00:51:08.600
Let's see if we can come
up with something better.

00:51:08.660 --> 00:51:12.620
Let me go ahead and run Step 10.

00:51:20.800 --> 00:51:28.560
Let me log into my email one more time.

00:51:28.560 --> 00:51:29.140
And here we go.

00:51:29.320 --> 00:51:32.190
So, looks like the same app, obviously.

00:51:32.670 --> 00:51:36.100
The difference now is, of course,
I have some doc menu items here.

00:51:36.180 --> 00:51:37.650
And, you know, I only created two.

00:51:37.800 --> 00:51:40.120
I didn't want to get too creative,
and I didn't want to make the

00:51:40.140 --> 00:51:41.900
doc menu take up everything else.

00:51:42.000 --> 00:51:44.950
But, so, I click New Message.

00:51:45.080 --> 00:51:46.240
And I get a new message.

00:51:46.490 --> 00:51:49.510
Basically what I did here
was--I'll show you in a minute,

00:51:49.620 --> 00:51:54.490
but this is Java code that is calling,
you know, a utility function to

00:51:54.490 --> 00:51:55.490
create a doc menu item.

00:51:55.490 --> 00:51:59.170
I passed it an action and a string,
so it knew what the label

00:51:59.170 --> 00:52:02.080
should be and it knew how to
respond when it was clicked.

00:52:04.160 --> 00:52:06.930
And there's our response.

00:52:07.060 --> 00:52:11.930
And let's see if-- the other cool thing
about the doc is if something special

00:52:12.010 --> 00:52:13.950
happens when it's not in the front,

00:52:14.630 --> 00:52:16.090
You get some kind of notification.

00:52:16.160 --> 00:52:20.300
You do the bounces,
or maybe it badges if you're on mail.

00:52:20.300 --> 00:52:23.240
And so this is as penance for
what went wrong on Monday night.

00:52:23.410 --> 00:52:25.860
I did something at the last minute.

00:52:27.090 --> 00:52:33.390
I went to the library
yesterday to see if I could

00:52:34.000 --> 00:52:45.600
[Transcript missing]

00:52:52.440 --> 00:52:56.240
As you can see, I've been testing this
pretty extensively.

00:52:56.310 --> 00:52:59.110
Let's create a new message.

00:53:05.100 --> 00:53:07.000
The other thing I need to be careful of.

00:53:07.000 --> 00:53:11.620
Let's edit that.

00:53:11.690 --> 00:53:19.140
And this will be another neat demo.

00:53:19.430 --> 00:53:22.020
Notice I just changed that address.

00:53:31.160 --> 00:53:34.230
So in a sense, we'll try to check the
email one more time,

00:53:34.230 --> 00:53:35.950
see what happens.

00:53:36.250 --> 00:53:40.150
And if nothing seems to happen,
I'll go ahead and just--

00:53:43.660 --> 00:53:45.970
Maybe she's in a meeting.

00:53:46.100 --> 00:53:48.910
But I swear her technology
works very well.

00:53:50.800 --> 00:53:52.460
All right,
so we go ahead and send an email,

00:53:52.460 --> 00:53:56.170
and let's see if this one shows up.

00:53:56.570 --> 00:53:59.090
Ah, look, she did respond.

00:53:59.530 --> 00:54:01.020
And the dock is bouncing.

00:54:01.030 --> 00:54:03.880
Not only is it bouncing,
but it's changed.

00:54:05.070 --> 00:54:06.760
So what happened here?

00:54:06.760 --> 00:54:09.780
What happened was,
because Kyanne is in my address book,

00:54:09.790 --> 00:54:11.240
we got a new email from her.

00:54:11.280 --> 00:54:14.010
We got the email address
from the message,

00:54:14.030 --> 00:54:15.120
because we're in Java.

00:54:15.120 --> 00:54:18.540
Went back into address book,
did a search on her address,

00:54:18.540 --> 00:54:22.130
returned a person from address book,
got the picture, and put it in the doc,

00:54:22.130 --> 00:54:23.600
and then bounced it.

00:54:23.680 --> 00:54:27.590
So basically,
I could probably check mail again.

00:54:27.660 --> 00:54:29.770
Let's see what happens,
because my message should

00:54:29.770 --> 00:54:30.820
be in there somewhere.

00:54:30.820 --> 00:54:33.380
Oh, there's my email.

00:54:33.380 --> 00:54:35.070
Look at that neck.

00:54:35.930 --> 00:54:36.710
That's an old picture.

00:54:36.990 --> 00:54:39.960
See, it's funny, you know,
before I started working at Apple,

00:54:40.070 --> 00:54:41.820
I had time to do things
like lift weights,

00:54:41.890 --> 00:54:43.730
and it was kind of cool.

00:54:43.860 --> 00:54:49.060
So let's look at how I did this.

00:54:53.200 --> 00:54:56.780
So here's our Doc Utilities class,
and this is in a separate project that

00:54:56.780 --> 00:55:01.030
I didn't have the time to build in here.

00:55:01.530 --> 00:55:04.220
This is not a COCA component,
this is regular JNI code,

00:55:04.220 --> 00:55:05.650
and there's two things here.

00:55:05.790 --> 00:55:09.560
There's an action from doc menu item,
and that's going to be our callback,

00:55:09.560 --> 00:55:11.400
that's going to be what C sends us.

00:55:11.400 --> 00:55:14.520
And then we have all
these native functions.

00:55:14.520 --> 00:55:17.720
So this is the one to bounce
the doc if we need to,

00:55:17.720 --> 00:55:20.400
this is the one to set the image back.

00:55:20.400 --> 00:55:22.950
And I don't know if you noticed,
but when I clicked on the doc icon,

00:55:23.060 --> 00:55:24.300
the standard one came back.

00:55:24.600 --> 00:55:28.400
And that was part of the
EAWT Reopen Application event.

00:55:28.400 --> 00:55:30.400
So when I notice that we've
been focused back to the front,

00:55:30.430 --> 00:55:33.450
we go ahead and get the standard icon,
put it back, because we're no longer

00:55:33.450 --> 00:55:36.270
alerting the user,
and we want to go back to normal.

00:55:36.840 --> 00:55:39.880
So this will bounce us,
and here's our API to

00:55:39.880 --> 00:55:41.080
add the doc menu item.

00:55:41.080 --> 00:55:42.190
You can do it two ways.

00:55:42.200 --> 00:55:44.660
You can do a J menu item,
or you can do it with an action,

00:55:44.660 --> 00:55:48.730
which is really the more politically
correct way of doing it in swing.

00:55:49.630 --> 00:55:52.930
And now we take our
dive into native code.

00:55:53.030 --> 00:55:55.330
And hopefully,
if I played my cards right,

00:55:55.370 --> 00:55:56.900
when I release this,
you guys won't ever have

00:55:56.900 --> 00:55:57.900
to look at this code.

00:55:57.900 --> 00:55:59.900
The idea is for you guys to
be able to do this from Java.

00:55:59.900 --> 00:56:03.190
But I'm going to show it to you anyway.

00:56:04.200 --> 00:56:06.850
So here's our addDocMenuItem function.

00:56:06.940 --> 00:56:07.630
We had a bunch of stuff.

00:56:07.870 --> 00:56:12.130
This is the class that called us
because it's a static function.

00:56:12.430 --> 00:56:17.660
This is the object which could
either be an action or a JMenuItem.

00:56:18.070 --> 00:56:19.210
and this is the name that we pass.

00:56:19.310 --> 00:56:22.000
So these are our two
arguments from the Java world.

00:56:22.010 --> 00:56:24.910
We basically get these guys and
this is a simple call to our

00:56:25.080 --> 00:56:29.200
Cocoa DocuTools is my Objective-C class.

00:56:29.240 --> 00:56:31.690
Let's go see what that does.

00:56:35.100 --> 00:56:53.300
[Transcript missing]

00:56:53.510 --> 00:56:56.540
And there's a delegate method
called application doc menu,

00:56:56.540 --> 00:57:00.400
which is basically every time I do this,
every time I click on the doc icon,

00:57:00.470 --> 00:57:03.180
the application calls its
delegate and asks for a menu.

00:57:03.330 --> 00:57:06.900
So we respond by giving it
the menu that we've created.

00:57:07.000 --> 00:57:10.430
What happens now when we-- and
you can see the problem here.

00:57:10.720 --> 00:57:13.370
So it's not really a Java menu,
it's a Cocoa menu.

00:57:13.540 --> 00:57:16.870
So how do we get back to
Java when this is clicked?

00:57:17.040 --> 00:57:18.670
How do we know?

00:57:21.310 --> 00:57:23.680
And as soon as I remember
which one it is,

00:57:23.790 --> 00:57:25.440
there are a lot of functions here.

00:57:25.440 --> 00:57:27.470
Ah, yes, action from doc menu item.

00:57:27.650 --> 00:57:31.820
That seems pretty standard.

00:57:32.480 --> 00:57:33.600
We basically get our callback.

00:57:33.600 --> 00:57:37.400
I set this as the action
responder on the doc menu.

00:57:37.400 --> 00:57:40.980
And we cast our peer when
we initialize the object,

00:57:40.980 --> 00:57:43.120
again,
using the same technique as we did in

00:57:43.120 --> 00:57:46.220
the AB-- the AB people picker example.

00:57:46.400 --> 00:57:50.750
We do the same thing, get the JNI end,
find the class,

00:57:50.780 --> 00:57:55.320
and find our action from doc menu item,
the Java action from

00:57:55.320 --> 00:57:57.610
doc menu item option.

00:57:58.630 --> 00:58:01.600
And we pass back the peer,
the originator,

00:58:01.600 --> 00:58:04.300
because Java's going to need to--
you have more than one menu item,

00:58:04.300 --> 00:58:06.600
and you need to know
which one got clicked.

00:58:06.770 --> 00:58:09.900
So we go back to the dock utilities.

00:58:10.060 --> 00:58:10.930
Here we go.

00:58:11.060 --> 00:58:12.590
This is what C is going to call to us.

00:58:12.770 --> 00:58:14.060
It's going to pass us
some kind of object,

00:58:14.060 --> 00:58:15.510
and like I said earlier,
it could be either an

00:58:15.510 --> 00:58:17.400
action or a JMenuItem.

00:58:17.590 --> 00:58:19.810
So if it's a JMenuItem,

00:58:20.250 --> 00:58:22.050
we just get that and do a do click on it.

00:58:22.120 --> 00:58:24.560
And the reason this is, you know,
like I said, the real politically correct

00:58:24.560 --> 00:58:25.520
way to do it is with an action.

00:58:25.520 --> 00:58:29.160
But the idea here is the human interface
guidelines say that you should only do,

00:58:29.160 --> 00:58:32.530
you should only put things in the
dock that are already in the menu bar.

00:58:32.540 --> 00:58:35.420
So if you already have something,
you already have a J menu there,

00:58:35.420 --> 00:58:38.740
just go ahead and pass it to this API,
and we'll take that and we'll do it as if

00:58:38.740 --> 00:58:42.570
the user had clicked it in the menu bar,
which is supposed to be how it operates.

00:58:42.640 --> 00:58:45.540
Of course, if you have an action,
that would be the same idea.

00:58:45.540 --> 00:58:49.660
And, you know, as a result,
we respond to it.

00:58:49.720 --> 00:58:51.920
We either go to that new message
action that we had earlier

00:58:52.350 --> 00:58:54.370
or the check mail action.

00:58:56.080 --> 00:58:59.320
And I believe that's all I got.

00:58:59.400 --> 00:59:01.310
Can we go back to the slides?

00:59:04.400 --> 00:59:06.540
Where have we gone in the last hour?

00:59:06.620 --> 00:59:09.850
We started with this anonymous,
random application off of source

00:59:10.000 --> 00:59:14.240
boards that had an obscure file name,
didn't look anything like it

00:59:14.280 --> 00:59:18.300
belonged on the Macintosh,
and we ended up with this.

00:59:18.300 --> 00:59:21.680
We have an application
with an application icon,

00:59:21.680 --> 00:59:25.120
with a proper name, with a dock icon,
a dock menu.

00:59:25.280 --> 00:59:28.070
It has integration with the address book,
has integration with

00:59:28.120 --> 00:59:30.260
other system applications,
and it has integration

00:59:30.260 --> 00:59:31.120
with the system help.

00:59:31.350 --> 00:59:32.850
This is a Macintosh application.

00:59:32.890 --> 00:59:36.100
This isn't just a Java app
that runs on the Mac.

00:59:37.630 --> 00:59:39.360
So we did this in an hour.

00:59:39.380 --> 00:59:41.400
It didn't really take me an hour.

00:59:41.420 --> 00:59:44.300
But I downloaded this program randomly.

00:59:44.300 --> 00:59:47.950
And I wanted to do that to demonstrate
to you that this is not precooked stuff.

00:59:47.980 --> 00:59:50.800
I never saw the source
code to this app before.

00:59:50.810 --> 00:59:54.560
And if I was able to do this, you guys,
who know the code to your own app,

00:59:54.610 --> 00:59:56.890
should be able to do
it without a problem.

00:59:57.870 --> 00:59:58.920
And it's still cross-platform.

00:59:58.920 --> 01:00:01.320
Because of those reflective techniques,
even the JNI stuff,

01:00:01.430 --> 01:00:04.140
if we don't load those classes
that call the JNI code,

01:00:04.180 --> 01:00:05.940
they'll never load the native libraries.

01:00:06.050 --> 01:00:09.560
So you can dump all these files in your
standard distribution and never worry

01:00:09.560 --> 01:00:11.720
about link errors or anything like that.

01:00:11.860 --> 01:00:15.780
There's no need to be afraid of the
fact that we're using native code here.

01:00:16.530 --> 01:00:19.490
So, if nothing else,
make an application bundle,

01:00:19.560 --> 01:00:20.740
or at least a manifest file.

01:00:20.740 --> 01:00:23.740
Make your application double clickable,
as Mac-like as possible.

01:00:23.740 --> 01:00:25.740
Give yourself a nice desktop icon.

01:00:25.740 --> 01:00:28.390
It usually takes just a couple seconds.

01:00:28.510 --> 01:00:30.360
Watch for your portability pitfalls.

01:00:30.400 --> 01:00:32.210
I didn't beat those to death
because I've beat them to

01:00:32.210 --> 01:00:35.260
death over the last two years,
and Tom and Barry talked about them

01:00:35.330 --> 01:00:37.400
to a pretty good length yesterday.

01:00:37.400 --> 01:00:44.390
Use your Info.plist and use the
EWT API to do quite a bit already.

01:00:44.400 --> 01:00:46.300
Get your application menu stuff.

01:00:46.470 --> 01:00:49.330
You can set your properties,
get the menu bar at the top,

01:00:49.400 --> 01:00:53.400
do things like banish the grow box,
so on and so forth.

01:00:53.400 --> 01:00:54.400
Use the Apple Help.

01:00:54.400 --> 01:00:57.310
That's probably the easiest of
the steps that I've showed you.

01:00:57.460 --> 01:01:01.010
All I had to do was change a little
bit of HTML code and drag the

01:01:01.010 --> 01:01:04.400
folder over the Apple Help indexer,
which isn't even necessary.

01:01:04.400 --> 01:01:06.400
That was just to make
the search more robust.

01:01:06.400 --> 01:01:08.360
I hate that word.

01:01:10.600 --> 01:01:14.300
And, you know, Runtime Exec, Jay and I,
you can use them.

01:01:14.300 --> 01:01:15.480
You don't need to be afraid.

01:01:15.490 --> 01:01:17.000
You just need to be careful.

01:01:17.000 --> 01:01:19.700
And once you know the rules,
it's just like anything else.

01:01:19.870 --> 01:01:22.490
All of you have been new to some kind
of programming technique in the past.

01:01:22.490 --> 01:01:24.370
You just need to know what you're doing.

01:01:24.380 --> 01:01:27.390
And that's why I'm here, to tell you.

01:01:29.150 --> 01:01:32.880
If you want to learn some more,
obviously we have a disk image,

01:01:33.050 --> 01:01:35.630
and I'm sorry,
but I don't have the finished

01:01:35.740 --> 01:01:42.790
Pooka product on the disk image,
and that's because I was cramming it

01:01:42.790 --> 01:01:42.790
well after the disk image was due.

01:01:43.260 --> 01:01:45.860
The reference library,
which has a great document called

01:01:45.860 --> 01:01:48.690
Java 1.4 Development for Mac OS X,
talks a lot about the

01:01:48.770 --> 01:01:50.960
portability pitfalls,
the EAWT stuff that I was

01:01:51.390 --> 01:01:52.500
talking about earlier.

01:01:52.500 --> 01:01:56.610
We have a Java doc reference for
the Apple extensions for the EAWT.

01:01:56.730 --> 01:02:00.260
There's also an EIO class,
extended I/O class,

01:02:00.260 --> 01:02:03.200
that will let you do some
Mac-specific file interaction,

01:02:03.200 --> 01:02:06.410
but that's really for legacy development,
people who are used to

01:02:06.410 --> 01:02:07.900
using MRJ on Mac OS 9.

01:02:07.900 --> 01:02:11.330
So unless you're one of those people,
that's probably something

01:02:11.390 --> 01:02:12.200
you can skip over.

01:02:12.200 --> 01:02:15.000
And I'd really like you to read the
human interface guidelines also,

01:02:15.000 --> 01:02:18.500
if you're really interested in making
your Java apps as Mac-like as possible.

01:02:18.500 --> 01:02:21.830
There's a lot of stuff that
speaks within the context of,

01:02:21.880 --> 01:02:24.400
you know, assuming you're programming
with C or Objective-C,

01:02:24.400 --> 01:02:28.170
but there are a lot of high-level
design aesthetic things that can

01:02:28.190 --> 01:02:29.900
easily apply to your Java application.

01:02:29.910 --> 01:02:33.300
And a particularly useful thing is
that the human interface guidelines

01:02:33.300 --> 01:02:40.500
have a table with all of our
reserved system keyboard shortcuts.

01:02:40.500 --> 01:02:42.100
And that can be really useful,
where if you're using a Java application,

01:02:42.100 --> 01:02:44.800
or if you're worrying about your
keyboard shortcuts on the Mac,

01:02:44.800 --> 01:02:47.900
and, you know, you say,
"I did F12 on my app,

01:02:47.900 --> 01:02:51.600
and it works on Windows,
and when I do it on the Mac,

01:02:51.650 --> 01:02:56.760
some kind of crazy stuff drops down and
makes a splash on the screen." So if

01:02:56.760 --> 01:03:01.600
you read the human interface guidelines,
you would not have to worry about that.

01:03:04.000 --> 01:04:03.800
[Transcript missing]

01:04:04.000 --> 01:04:05.880
and providing user
assistance for Apple Help.

01:04:05.970 --> 01:04:08.700
This is both design guidelines
for building a help book,

01:04:08.810 --> 01:04:12.040
but it also talks about setting those
info P list keys in case you didn't

01:04:12.090 --> 01:04:16.300
write them down fast enough earlier,
as well as what you need to do.

01:04:16.300 --> 01:04:18.050
There's going to be some
stuff talking about calling

01:04:18.160 --> 01:04:20.770
Carbon functions and stuff like that,
but again, you won't need to worry about

01:04:20.770 --> 01:04:23.140
that because we're going to get
you the code to do it from Java.