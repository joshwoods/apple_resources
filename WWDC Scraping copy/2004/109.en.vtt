WEBVTT

00:00:12.600 --> 00:04:14.400
[Transcript missing]

00:04:15.190 --> 00:04:16.540
So what are EAs good for?

00:04:16.540 --> 00:04:20.520
I mentioned things like comments
and labels and things like that.

00:04:20.590 --> 00:04:23.440
But it's basically used as a
generic method for being able

00:04:23.440 --> 00:04:29.530
to do storing and retrieving of
attributes on a particular file.

00:04:29.580 --> 00:04:31.310
And you want these attributes
to sort of live in the file

00:04:31.310 --> 00:04:33.040
and follow the file around.

00:04:33.040 --> 00:04:36.770
So if a user goes ahead and tags a
particular file in their desktop and then

00:04:36.780 --> 00:04:41.220
sorts it into their documents folder,
that information then transmits

00:04:41.220 --> 00:04:45.740
itself along with that file and
continues to persist with the file.

00:04:49.000 --> 00:06:22.200
[Transcript missing]

00:06:23.380 --> 00:06:27.800
attributes themselves are small,
again emphasizing small,

00:06:27.820 --> 00:06:29.540
arbitrary data blobs.

00:06:29.650 --> 00:06:33.300
We'd like to keep the limit
right now under 4 kilobytes.

00:06:33.300 --> 00:06:38.300
There's many reasons for both
implementation and performance concerns.

00:06:38.730 --> 00:06:42.430
This may be increased in the future
so we don't want you to statically

00:06:42.550 --> 00:06:46.410
code this into your applications
but it would definitely stay under

00:06:46.560 --> 00:06:48.300
the limit for at least Tiger.

00:06:48.630 --> 00:06:52.220
They also contain separate
permissions for the files.

00:06:52.290 --> 00:06:54.490
Again from the
AclTalk Mike Smith mentioned that

00:06:54.490 --> 00:06:57.760
there's a particular right that you
can give not just to the file but

00:06:57.760 --> 00:07:01.930
also to the meta-data associated
with the file so you can control

00:07:01.930 --> 00:07:04.450
that with very fine-grained access.

00:07:05.130 --> 00:07:08.060
The extended attribute is
treated as a blob entirely.

00:07:08.060 --> 00:07:12.100
You can't do extended attribute
control over individual elements.

00:07:12.120 --> 00:07:14.300
Where does it live?

00:07:14.550 --> 00:07:17.950
Apple's come up with a very
ambitious goal of providing a file

00:07:17.950 --> 00:07:20.140
system agnostic implementation.

00:07:20.550 --> 00:07:23.590
If you're dealing with a file
system that's really modern and

00:07:23.720 --> 00:07:25.660
supports these sort of functions,
it can be done there.

00:07:25.660 --> 00:07:30.030
But also file systems that are much
older that don't have this concept

00:07:30.090 --> 00:07:33.910
of extended meta-data you can
modify or it will be able to be used

00:07:33.940 --> 00:07:37.640
transparently and be able to store
and retrieve this extended meta-data.

00:07:37.660 --> 00:07:41.000
Again, these aren't streams though.

00:07:41.000 --> 00:07:42.440
The extended attributes,
you want to keep them

00:07:42.440 --> 00:07:43.920
down as key value pairs.

00:07:43.920 --> 00:07:47.170
And one of the key distinctions
between these two is the extended

00:07:47.190 --> 00:07:50.780
attributes are basically items
that you want to set atomically,

00:07:50.930 --> 00:07:54.380
but you're not going to be able to
seek around this like as a large

00:07:54.380 --> 00:07:58.060
data blob or separate file stream.

00:07:58.060 --> 00:08:01.480
Currently for Tiger we're
planning HFS+ and AFP support.

00:08:01.540 --> 00:08:05.820
HFS+ is on your Tiger DVD.

00:08:05.820 --> 00:08:07.900
And it's backwards compatible.

00:08:07.900 --> 00:08:08.860
Changed the volume format.

00:08:08.900 --> 00:08:11.520
So it doesn't require a new format.

00:08:11.520 --> 00:08:14.000
You can go ahead and have a
Panther machine do an upgrade to

00:08:14.000 --> 00:08:17.540
Tiger and start to be able to set
these extended attributes on a file.

00:08:17.540 --> 00:08:20.050
Now there's a caveat
associated with that.

00:08:20.130 --> 00:08:24.980
If you now boot back into
Panther and look at a file,

00:08:24.980 --> 00:08:28.200
the extended attribute information is
going to encompass the resource fork.

00:08:28.200 --> 00:08:29.940
So you'll still be able to
access the resource fork in a

00:08:29.990 --> 00:08:31.100
backwards compatible manner.

00:08:31.210 --> 00:08:35.030
But any extended attributes
that you set in Tiger you won't

00:08:35.100 --> 00:08:37.080
be able to view in Panther.

00:08:37.080 --> 00:08:40.610
Moreover if you go ahead and try
to move that file on Panther,

00:08:40.610 --> 00:08:43.860
you can also potentially
lose that metadata.

00:08:43.860 --> 00:08:47.650
So it's recommended that you do
a full one-way transition when

00:08:47.650 --> 00:08:51.970
going from Tiger to Panther as
far as metadata is concerned.

00:08:52.770 --> 00:08:55.670
Other file systems is going
to be implemented in terms

00:08:55.670 --> 00:08:58.300
of an Apple double file,
which is very similar to what

00:08:58.490 --> 00:09:00.100
we do for resource forks today.

00:09:00.270 --> 00:09:03.860
So for those of you who aren't
familiar with an Apple double file,

00:09:03.890 --> 00:09:11.430
if I have a file with HFS+ I can
have two separate sort of data

00:09:11.610 --> 00:09:13.200
containers within this file.

00:09:13.400 --> 00:09:15.760
The data fork,
which is what you consider the

00:09:15.780 --> 00:09:19.170
normal contents of the file
if you open it up in TextEdit,

00:09:19.200 --> 00:09:20.260
that's what you see.

00:09:20.760 --> 00:09:22.700
Also a resource fork.

00:09:22.860 --> 00:09:27.700
Now some file systems can't
support the data and resource fork

00:09:27.700 --> 00:09:29.070
within a single container object.

00:09:29.200 --> 00:09:32.770
So there's a file format
called Apple double,

00:09:32.770 --> 00:09:37.740
which if you have a file called my file,
you'll now get a dot underscore

00:09:37.740 --> 00:09:40.700
my file and that will contain
all the resource information.

00:09:40.700 --> 00:09:45.830
And this will allow us on NFS and
UFS and other file systems that don't

00:09:45.830 --> 00:09:53.690
support extended metadata directly to
be able to still contain this metadata.

00:09:54.250 --> 00:09:59.230
When I mention copy engines,
there's a very broad

00:09:59.230 --> 00:10:01.860
term for copy engines.

00:10:01.860 --> 00:10:05.620
Anything that deals with files,
that opens them up and saves them,

00:10:05.980 --> 00:10:07.660
potentially has a copy engine.

00:10:07.770 --> 00:10:11.290
If you're at the POSIX layer and
you have a file called foo and it

00:10:11.400 --> 00:10:15.170
has an extended attribute blob,
and you open it up in an editor,

00:10:15.170 --> 00:10:18.990
your editor might make a copy foo.temp,
which is where all the

00:10:18.990 --> 00:10:20.900
modifications get done.

00:10:20.900 --> 00:10:25.370
When the editor goes to save that file,
it doesn't have a copy of the

00:10:25.370 --> 00:10:30.340
extended attributes because it's not
aware of the extended attributes.

00:10:30.340 --> 00:10:32.500
Then you'll end up losing
those extended attributes.

00:10:32.500 --> 00:10:35.940
That will represent metadata loss.

00:10:35.940 --> 00:10:38.760
As time progresses,
we expect this extended attribute

00:10:38.760 --> 00:10:42.470
information to become very valuable,
so your users are not going

00:10:42.490 --> 00:10:44.400
to want to be able to lose it.

00:10:44.400 --> 00:10:47.550
In this particular case,
we're looking at a

00:10:47.550 --> 00:10:49.780
possible trick to help you.

00:10:49.780 --> 00:10:52.920
If you create a copy of a file
and it doesn't have any extended

00:10:52.920 --> 00:10:55.980
attributes and you try to rename
it on top of another file,

00:10:55.980 --> 00:10:59.180
there might be some things that
we can do to help save you.

00:10:59.560 --> 00:11:02.850
Other things we're doing or at
least investigating to sort of ease

00:11:02.860 --> 00:11:07.940
the transition between the sort
of metadata-less sort of world and

00:11:07.940 --> 00:11:09.040
more of this extended meta-data.

00:11:09.060 --> 00:11:12.620
If you have an application that
currently supports meta-data

00:11:12.620 --> 00:11:15.390
but through a different API set,
like both FreeUSD and

00:11:15.390 --> 00:11:20.410
Linux support sort of POSIX layer,
you know, extended attribute API,

00:11:20.410 --> 00:11:23.940
we're investigating providing
compatibility with that so your

00:11:23.940 --> 00:11:25.480
application would just work.

00:11:26.420 --> 00:11:29.270
We're not quite sure exactly what
the usage coverage is in this

00:11:29.270 --> 00:11:32.590
and since there is so much work,
again, I'm not promising anything

00:11:32.590 --> 00:11:35.490
but we're trying to make your
lives as easy as possible.

00:11:35.500 --> 00:11:38.420
Other things like a copy engine API.

00:11:38.420 --> 00:11:40.920
Some of us when we're looking
at a lot of these codes,

00:11:40.920 --> 00:11:43.160
I mean,
there's probably a dozen copy engines

00:11:43.160 --> 00:11:46.390
in Mac OS X alone if you sort of
look around and it's sort of silly,

00:11:46.390 --> 00:11:49.160
you know, not to have a particular
call where I can say,

00:11:49.190 --> 00:11:50.500
you know, copy this file.

00:11:50.500 --> 00:11:53.290
In particular with both
extended attributes and

00:11:53.330 --> 00:11:55.060
ACLs going into the system.

00:11:55.060 --> 00:11:56.340
It might be nice.

00:11:56.340 --> 00:11:59.500
For developers to be able to
say just call this copy API,

00:11:59.560 --> 00:12:03.200
any changes that we sort of add to
the file system layer will be sort

00:12:03.250 --> 00:12:07.610
of shielded from and the copy will
always copy everything that's there.

00:12:07.700 --> 00:12:10.800
Also support things like
external serialization.

00:12:11.290 --> 00:12:14.820
Being able to say take the
extended meta-data from file foo,

00:12:14.820 --> 00:12:17.910
extract it out and then
put it on the file bar.

00:12:18.020 --> 00:12:21.620
There are lots of cases where that
sort of functionality would be very

00:12:21.750 --> 00:12:25.200
useful and to encapsulate it into
a particular library is something

00:12:25.200 --> 00:12:29.220
that that we're looking at providing.

00:12:30.310 --> 00:12:35.980
Also, we've gotten a lot of complaints
about the ._files on things like

00:12:35.980 --> 00:12:41.630
NFS mounts and looking at Reader
filtering out those ._files because,

00:12:41.630 --> 00:12:45.930
again, that resource half of the
Apple double file isn't really a file.

00:12:45.960 --> 00:12:47.410
I mean, it sure looks like a file.

00:12:47.460 --> 00:12:48.480
It kind of smells like a file.

00:12:48.540 --> 00:12:51.060
But it really shouldn't
be treated like a file.

00:12:51.060 --> 00:12:54.550
So if you wanted to go ahead and
iterate through a directory of files

00:12:54.550 --> 00:12:57.990
and studying the extended attributes,
you wouldn't want to be trying to

00:12:57.990 --> 00:13:00.180
set the extended attributes on the
container that's holding the file.

00:13:00.200 --> 00:13:02.380
You're just building
your extended attributes.

00:13:02.380 --> 00:13:04.020
That's just not valid behavior.

00:13:04.020 --> 00:13:07.390
So although they're there,
looking at possibly providing a

00:13:07.390 --> 00:13:11.710
mechanism to be able to mask those out,
but, again, if that provides a problem,

00:13:11.820 --> 00:13:13.860
an option so that they still show up.

00:13:13.940 --> 00:13:17.320
Conversely, in the other direction,
if you've ever shared an

00:13:17.320 --> 00:13:20.810
HFS plus volume over NFS,
you don't have any of those .underbar

00:13:20.810 --> 00:13:22.780
files that are actually there.

00:13:22.780 --> 00:13:25.950
And this provides some sort
of problems for applications

00:13:25.950 --> 00:13:28.100
depending on how you share things.

00:13:28.100 --> 00:13:32.840
Now, by far the best thing you can
do is go ahead and use AFP,

00:13:32.840 --> 00:13:35.890
which will be, you know, completely,
have a complete layer of support

00:13:35.890 --> 00:13:37.460
for the extended attributes.

00:13:37.460 --> 00:13:41.080
But in some situations, you know,
we know that that's not possible.

00:13:41.240 --> 00:13:45.120
So we're looking at trying to
mitigate that sort of transition.

00:13:47.880 --> 00:13:50.870
So again,
we're basically at a point now where

00:13:50.870 --> 00:13:54.100
we have Apple double revisited.

00:13:54.100 --> 00:13:57.760
Before we had the command line
utilities weren't really aware

00:13:57.780 --> 00:14:01.480
of these sort of files and they
didn't really respect them.

00:14:01.480 --> 00:14:04.130
But for Tiger,
we're planning full command

00:14:04.130 --> 00:14:07.450
line support for all of the
utilities that access files.

00:14:07.450 --> 00:14:12.180
So if you have extended attributes
associated with a particular file and use

00:14:12.180 --> 00:14:17.330
copy or move or ditto or you use R sync,
we're looking at ways of either

00:14:17.390 --> 00:14:20.360
extending the protocol where
possible or just going and using

00:14:20.360 --> 00:14:23.750
the Apple double file over the wire.

00:14:23.770 --> 00:14:28.520
Archivers, tar, zip,
be able to make archives of things and

00:14:28.520 --> 00:14:32.680
not have to worry about whether or not
you're preserving the metadata or not.

00:14:32.680 --> 00:14:36.760
And then the command line
editors and things like that.

00:14:37.280 --> 00:14:42.070
Basically sort of making it so that you
don't have to use the sort of R sync X,

00:14:42.180 --> 00:14:46.470
tar HFS, these projects on the web that
have involved in the data.

00:14:46.550 --> 00:14:48.290
So we're going to sort of fill
this space where Apple sort of,

00:14:48.410 --> 00:14:52.400
you know, sort of neglected their command
line users being able to treat

00:14:52.560 --> 00:14:54.240
this data as first class data.

00:14:55.750 --> 00:15:00.880
So, the short of it is, tiger to tiger,
you know, should just work.

00:15:00.880 --> 00:15:05.170
And anything that, you know,
any place where that doesn't work,

00:15:05.300 --> 00:15:07.860
it's definitely going to be a bug.

00:15:07.910 --> 00:15:11.000
Now, tiger to non-tiger,
we absolutely want to support,

00:15:11.040 --> 00:15:16.940
but there are a lot of very tricky issues
and a lot of very tricky situations.

00:15:16.940 --> 00:15:18.990
The matrix of compatibility
is actually very,

00:15:18.990 --> 00:15:20.400
very large if you iron it out.

00:15:20.400 --> 00:15:24.970
We've looked at a lot of these issues
and trying to come up with the best

00:15:25.160 --> 00:15:28.030
scenario and the best situations to
be able to deal with those situations.

00:15:28.100 --> 00:15:32.430
But it is going to be somewhat
difficult while everyone transitions

00:15:32.430 --> 00:15:35.820
to be able to support this metadata.

00:15:35.820 --> 00:15:37.810
Fortunately,
from past history and stuff like that,

00:15:37.810 --> 00:15:42.380
everybody should be using this
stuff within 10 or 15 years.

00:15:43.950 --> 00:15:45.820
Here's an overview of the API.

00:15:45.880 --> 00:15:51.210
All the functions that you need are
stored in sysxaddr.h and userinclude.

00:15:51.220 --> 00:15:54.840
And there's one particular
important data structure,

00:15:54.900 --> 00:15:59.580
xaddr.io, which contains an XA position,
which is basically a

00:15:59.580 --> 00:16:00.720
reserve for future use.

00:16:00.740 --> 00:16:03.590
For now, we want you to set that to zero.

00:16:03.710 --> 00:16:06.900
XA size should be the
size of an attribute.

00:16:07.320 --> 00:16:11.140
And then an XADATAPointer,
which is going to be a block of

00:16:11.290 --> 00:16:14.500
data that you've allocated to be
able to store these attributes.

00:16:14.500 --> 00:16:19.140
And then there's going to be
basically three sets of functions:

00:16:19.140 --> 00:16:21.420
setXaddr, getXaddr, and listXaddr.

00:16:21.430 --> 00:16:24.910
And corresponding components that
are prefixed to the letter F,

00:16:25.070 --> 00:16:26.870
that instead of dealing
with file names directly,

00:16:27.170 --> 00:16:31.570
deal with file descriptors
as the arguments on files.

00:16:32.500 --> 00:17:39.600
[Transcript missing]

00:17:39.660 --> 00:17:42.970
To read that data back,
we go ahead and have a test file,

00:17:43.030 --> 00:17:47.440
confu-mothership-url,
and we'll make a call to get x-addr.

00:17:47.530 --> 00:17:50.740
But in this particular case,
the third argument you'll notice is zero,

00:17:50.740 --> 00:17:54.460
which would normally be that
pointer to the x-addr-io struct.

00:17:54.520 --> 00:18:00.280
This tells the API to return the size
of the particular value of that key,

00:18:00.410 --> 00:18:03.680
so you can then go ahead and allocate
the appropriate amount of storage.

00:18:03.700 --> 00:18:08.680
So we go ahead and set x-is
to x-a size for x-a attribute,

00:18:08.710 --> 00:18:10.700
and then malloc sufficient data.

00:18:11.120 --> 00:18:14.620
Calling again, now with a pointer to
the x-addr-io struct.

00:18:14.880 --> 00:18:17.570
Again, negative one indicates an error.

00:18:18.070 --> 00:18:21.260
Otherwise, it should be set correctly.

00:18:22.310 --> 00:18:25.400
Now that you can set and
get these attributes,

00:18:25.410 --> 00:18:27.760
how do you find out what particular
attributes are signed on a file?

00:18:27.860 --> 00:18:30.200
That's using the listXAdder API.

00:18:30.470 --> 00:18:34.200
Very similar to the getXAdder API,
if the third argument is null,

00:18:34.200 --> 00:18:38.990
it returns the amount of space required
to hold all of the particular keys.

00:18:39.170 --> 00:18:44.100
The format returned by listXAdder is
a series of null terminated strings

00:18:44.100 --> 00:18:45.700
that are concatenated together.

00:18:45.700 --> 00:18:49.580
So we go ahead and malloc sufficient
size to be able to store the block,

00:18:49.650 --> 00:18:51.200
call listXAdder again.

00:18:51.200 --> 00:18:55.030
And then to iterate over that block,
you just go ahead and have like a

00:18:55.030 --> 00:18:58.910
little pointer to the first key,
and then while you're still

00:18:58.920 --> 00:19:02.540
within that range of that block,
you go ahead and increment by

00:19:02.540 --> 00:19:06.990
the length of that particular
key plus its null terminator.

00:19:07.600 --> 00:19:12.880
So now I have a couple little
demos and things like that.

00:19:12.900 --> 00:19:19.500
Unfortunately for the WWDC build,
you do have support for HFS.

00:19:19.900 --> 00:19:25.860
But the copying utilities and things like
that like CPMV haven't been included yet.

00:19:26.060 --> 00:19:32.400
Some of that work is
still yet to be done.

00:19:37.820 --> 00:19:40.520
We have three parts to this demo.

00:19:40.520 --> 00:19:44.960
First we'll go ahead and we
have a couple of command-line

00:19:45.350 --> 00:19:47.320
utilities that we'll be using.

00:19:47.320 --> 00:19:50.900
These aren't going to be shipping
in Tiger but they'll be some sort

00:19:50.900 --> 00:19:54.350
of interface very similar to it
that allows you to both store and

00:19:54.350 --> 00:19:58.360
retrieve the extended attributes
directly from the command-line.

00:19:58.360 --> 00:20:01.960
So let's start with an
empty file called foo.

00:20:01.970 --> 00:20:08.390
Set an attribute on it, com, Apple, demo,
and the value being metadata is cool.

00:20:09.920 --> 00:20:12.570
I'll go ahead and set another thing,
a comment, you know,

00:20:12.660 --> 00:20:13.900
the command-line rocks.

00:20:13.900 --> 00:20:17.700
And give credits to a person named Kevin.

00:20:18.070 --> 00:20:26.000
LSX, you can go ahead and
list these attributes,

00:20:26.000 --> 00:20:26.020
indicates the length of the attribute,
the key name and also the value.

00:20:26.520 --> 00:20:31.090
You can see I have modified
CP here so if I do CP foo and bar

00:20:31.340 --> 00:20:36.350
and do a list on them you can see
the metadata is being preserved.

00:20:37.720 --> 00:20:41.220
You can also do things like symlinks.

00:20:41.220 --> 00:20:44.140
Again, listing on a symlink,
you could list on a backing file.

00:20:44.140 --> 00:20:46.500
With those options,
you can control whether or not

00:20:46.510 --> 00:20:49.590
you read the extended attribute
information off the file itself or

00:20:49.590 --> 00:20:52.940
you can also put extended attributes
on the symlinks themselves.

00:20:53.050 --> 00:20:56.890
You can also put extended
attributes on directories.

00:20:57.120 --> 00:21:04.400
in this case you'll see system.finder
info is set by default on symlinks.

00:21:04.400 --> 00:21:07.970
For hard links,
you have the extended attribute

00:21:07.970 --> 00:21:10.660
information show up just as you'd expect.

00:21:10.660 --> 00:21:13.310
If you delete an
extended attribute value,

00:21:13.320 --> 00:21:19.760
in this case removing com apple credits,
you'll see that it's been removed from

00:21:19.920 --> 00:21:23.080
the hard link end and the actual file.

00:21:23.800 --> 00:21:29.900
[Transcript missing]

00:21:30.980 --> 00:21:36.520
I also mentioned that you should
be modifying your copy engines

00:21:36.520 --> 00:21:40.900
and show this is a pretty
straightforward sort of mechanism.

00:21:40.900 --> 00:21:43.010
I'm going to walk through function.

00:21:43.290 --> 00:21:46.620
It's 80 lines and does all the
work that you need to be able to

00:21:46.620 --> 00:21:50.790
do to take one file name and then
extract all the extended attributes

00:21:50.790 --> 00:21:52.780
and save it on another file.

00:21:52.920 --> 00:21:56.460
So we'll start with the
options for the argument,

00:21:56.460 --> 00:22:00.820
the source file name,
destination file name, and those options.

00:22:00.820 --> 00:22:07.130
We'll have a set of local variables,
a name for iterating over the key space,

00:22:07.410 --> 00:22:10.730
like in that for loop that
I showed on the list x adder slide,

00:22:10.760 --> 00:22:13.900
a name buff to be able to store the
names returned from list x adder,

00:22:13.900 --> 00:22:16.770
and an attribute buff to be
able to hold the attributes

00:22:16.770 --> 00:22:18.620
as we get them and set them.

00:22:18.620 --> 00:22:22.650
Again, the x position argument
should be set to zero.

00:22:25.200 --> 00:22:29.280
So much like we showed on the slide,
listx adder with a null gives you the

00:22:29.280 --> 00:22:33.760
size and you can malloc a block and call
it listx adder again with the appropriate

00:22:33.760 --> 00:22:39.780
information being set and you'll have all
of the names stored in this name buffer.

00:22:39.780 --> 00:22:43.270
Now we'll iterate over the list of names.

00:22:43.590 --> 00:22:47.220
Again, that's the four-loop construct
where we keep advancing by

00:22:47.220 --> 00:22:49.000
the length of the string.

00:22:49.050 --> 00:22:53.340
And then we'll need to determine how much
space is necessary for the attribute.

00:22:53.360 --> 00:22:55.430
You know, allocate that space,
get the attribute,

00:22:55.430 --> 00:22:56.380
then set the attribute.

00:22:56.400 --> 00:22:58.890
And again,
that's relatively straightforward.

00:22:58.970 --> 00:23:01.380
Get xAdder with the third
argument being null.

00:23:01.400 --> 00:23:03.810
Save that as xA size.

00:23:03.900 --> 00:23:07.040
Call malloc,
allocate the appropriate amount of space.

00:23:07.160 --> 00:23:09.280
Save that in the dataport argument.

00:23:09.330 --> 00:23:11.080
Get the attribute.

00:23:11.490 --> 00:23:16.770
:::: and then move us to
the top of the screen.

00:23:18.660 --> 00:23:23.600
and call set x adder
setting that attribute.

00:23:23.600 --> 00:23:26.270
The reason I did this in the
terminal and the slides is so now

00:23:26.320 --> 00:23:28.890
I can give a demo of that running.

00:23:28.890 --> 00:23:32.620
So we'll touch a file foo,
touch a file bar,

00:23:32.620 --> 00:23:37.050
set a series of attributes
on that file foo,

00:23:37.100 --> 00:23:41.610
and then call this ‑‑ sorry,
I'm listing now the

00:23:41.730 --> 00:23:45.350
attributes on foo and bar,
notice no attributes on bar.

00:23:45.350 --> 00:23:50.950
Execute this copy x adder utility
and copying them from foo to bar,

00:23:50.950 --> 00:23:55.400
doing the list again shows you the
attributes have been preserved.

00:23:55.400 --> 00:24:00.310
So again, the amount of work necessary
to go ahead and preserve this

00:24:00.310 --> 00:24:02.550
metadata isn't that hard,
but adding it to the

00:24:02.550 --> 00:24:05.660
appropriate locations,
not just again these files that

00:24:05.750 --> 00:24:10.180
you create but also any directories
that you create is pretty critical.

00:24:10.990 --> 00:24:27.280
For the second part, you need to show,
so let's touch a file foo,

00:24:27.280 --> 00:24:27.280
touch a file bar, set a bunch of testing,
oops, wrong one.

00:24:27.280 --> 00:24:27.280
Sorry.

00:24:28.990 --> 00:24:37.020
: I did that, didn't I?

00:24:37.020 --> 00:24:37.080
All right.

00:24:37.090 --> 00:24:38.650
First, I want to look at the source.

00:24:38.660 --> 00:24:42.840
What's an example of
using extended attributes?

00:24:42.860 --> 00:24:45.840
I thought of something that's
probably something that you

00:24:45.840 --> 00:24:48.650
shouldn't be doing by default,
but illustrates an

00:24:48.650 --> 00:24:50.360
interesting sort of point.

00:24:50.370 --> 00:24:55.420
I'm going to be saying profile
encryption using an extended

00:24:55.420 --> 00:24:58.400
attribute to store key information.

00:24:59.100 --> 00:25:01.800
One of the reasons why I'm doing this
is because you don't want to go ahead

00:25:01.830 --> 00:25:07.640
and be searching for the particular key,
like through a list of files.

00:25:07.660 --> 00:25:08.720
That's not a common operation.

00:25:08.940 --> 00:25:11.770
But you do want that information
to be persistent across,

00:25:11.770 --> 00:25:14.020
you know, copies and moves and things.

00:25:14.020 --> 00:25:16.090
So we'll open up a file.

00:25:16.100 --> 00:25:18.510
I can actually scroll
around with a pointer.

00:25:18.520 --> 00:25:19.520
Open up a file.

00:25:19.610 --> 00:25:22.100
And then we're going to try to get a key.

00:25:22.100 --> 00:25:25.000
We have this little function
called get attribute.

00:25:25.030 --> 00:25:27.220
Takes a file pointer,
the name of the attribute,

00:25:27.230 --> 00:25:29.680
and a small little
buffer to store this key.

00:25:29.680 --> 00:25:33.510
And then we'll call encrypt
on it and then be done.

00:25:33.520 --> 00:25:34.470
Getting the attribute.

00:25:34.550 --> 00:25:37.680
Again, XA position should be null.

00:25:37.680 --> 00:25:41.340
Setting the attribute buff,
data pointer value and the size.

00:25:41.340 --> 00:25:44.070
And then calling the
variant X or F get X adder,

00:25:44.070 --> 00:25:47.850
which I mentioned takes the first
argument as a file descriptor

00:25:47.850 --> 00:25:49.490
as opposed to a file name.

00:25:49.910 --> 00:25:56.960
and then a little poorly written
encrypt loop just doing XOR on the key,

00:25:56.960 --> 00:26:00.400
entering back over and
writing it out as a file.

00:26:00.430 --> 00:26:02.950
So how does this work?

00:26:04.730 --> 00:26:09.380
So create a file foo,
put a secret message in there,

00:26:09.400 --> 00:26:12.660
and then look at it in hexdump because
it will get ugly when we encrypt it.

00:26:12.660 --> 00:26:17.700
As you can see it still says
this is a secret sentence.

00:26:17.700 --> 00:26:20.700
Listing the attributes on the file,
there are no current attributes.

00:26:20.700 --> 00:26:24.330
Attempting to encrypt the file,
we get an error from fgetx

00:26:24.530 --> 00:26:27.200
that that key has not been set.

00:26:27.200 --> 00:26:31.190
We'll call it a little command-line
utility setting it to the letter x.

00:26:32.210 --> 00:26:34.760
Doing another list,
making sure that it's been set.

00:26:34.760 --> 00:26:38.930
Encrypting it, it's now super secret.

00:26:39.140 --> 00:26:41.670
You can see.

00:26:42.770 --> 00:26:49.290
calling it again and since our
super secret cipher is symmetric.

00:26:51.540 --> 00:26:54.850
: This is a secret sentence.

00:26:54.850 --> 00:26:59.400
So, again,
it's not really difficult to be dealing

00:26:59.400 --> 00:27:02.990
with this extended attribute information,
but it is very critical

00:27:02.990 --> 00:27:08.140
because things like this key,
if you were to lose it by saving a file,

00:27:08.140 --> 00:27:12.580
now a user might not be able
to have access to their data,

00:27:12.580 --> 00:27:15.040
and that's sort of horrible.

00:27:15.040 --> 00:27:15.810
Actually, I'm thinking,
done with the demo,

00:27:15.810 --> 00:27:15.810
we can cut back to the slides.

00:27:16.960 --> 00:27:20.260
in summary, metadata is great.

00:27:20.260 --> 00:27:21.970
There are a lot of uses that
I know you guys are going to

00:27:21.970 --> 00:27:27.540
come up with for being able to
manipulate and do interesting things.

00:27:27.630 --> 00:27:32.150
But by far the focus for Tiger is not
just innovating around the metadata but

00:27:32.170 --> 00:27:36.030
by far preserving it as we're going to
be creating it hopefully we don't also

00:27:36.280 --> 00:27:40.400
want to be destroying it a lot at the
same time particularly accidentally.

00:27:40.430 --> 00:27:44.660
Prevent namespace collisions
using the reverse DNS names only

00:27:44.710 --> 00:27:49.640
instead of dots use underscores and
stick to small and ounce for now.

00:27:49.640 --> 00:27:54.300
The values should be under 4K
and we'd really appreciate that.

00:27:55.790 --> 00:28:00.700
Also, don't go hog wild and implement
a file system layer on top

00:28:00.820 --> 00:28:03.420
of the extended attributes.

00:28:03.420 --> 00:28:05.930
It's not what it's for.

00:28:06.510 --> 00:28:10.380
for more information
please contact Jason Yao.

00:28:10.390 --> 00:28:13.400
This is email address Jason@apple.com.

00:28:13.400 --> 00:28:17.120
He's a lucky guy.

00:28:17.120 --> 00:28:20.820
For more information on encryption you
can look at the key chain services.

00:28:20.820 --> 00:28:24.630
Then for the extended attributes
information in general there's the

00:28:24.790 --> 00:28:28.130
Mac OS X file system information
on the DVD and then we'll be

00:28:28.130 --> 00:28:31.020
actually on hopefully be putting up
some stuff on the reference site.