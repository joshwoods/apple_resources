WEBVTT

00:00:12.100 --> 00:00:13.680
Happy Wednesday.

00:00:13.720 --> 00:00:14.640
Thanks for coming.

00:00:14.660 --> 00:00:16.980
I'm not actually
speaking in this session.

00:00:16.980 --> 00:00:18.500
I just wanted to give
a quick introduction.

00:00:18.500 --> 00:00:19.370
My name is Matt Drance.

00:00:19.370 --> 00:00:22.440
I work in DTS,
and I'll be coming back at the end of

00:00:22.440 --> 00:00:25.250
the talk to talk a little bit about DTS,
what DTS does,

00:00:25.370 --> 00:00:27.450
in case some of you don't know about it.

00:00:27.520 --> 00:00:31.590
But I just wanted to introduce you
because I think that this is probably

00:00:31.610 --> 00:00:35.740
the most useful Java talk this week,
as far as you guys are concerned,

00:00:35.740 --> 00:00:37.580
aside from mine tomorrow.

00:00:39.720 --> 00:00:41.840
But when you guys are out of
here in an hour and a half,

00:00:41.940 --> 00:00:44.010
you're not going to have to go
read any documentation or download

00:00:44.010 --> 00:00:45.140
anything at the end of the day.

00:00:45.140 --> 00:00:48.660
You're going to know everything
we know about debugging,

00:00:48.700 --> 00:00:52.620
analyzing,
monitoring Java applications on the Mac.

00:00:52.700 --> 00:00:55.200
And I think that's something
that a lot of people have

00:00:55.200 --> 00:00:56.700
been waiting to hear about.

00:00:56.720 --> 00:00:59.440
So without further ado,
I would like to introduce

00:00:59.550 --> 00:01:02.510
Tom O'Brien from the
product engineering team.

00:01:02.540 --> 00:01:04.060
Thanks, Matt.

00:01:09.390 --> 00:01:12.090
You're in the right talk if you're
a Java developer who wants to

00:01:12.100 --> 00:01:16.380
deploy your Java on Mac OS X,
but you want to find ways to

00:01:16.380 --> 00:01:21.900
avoid cross-platform compatibility
issues that you might run into.

00:01:22.490 --> 00:01:24.900
or if you want to know ways
to isolate problems that

00:01:24.920 --> 00:01:29.420
you find running Java on 10,
or report problems back to Apple when

00:01:29.420 --> 00:01:30.400
you think it's Apple's bug.

00:01:30.460 --> 00:01:32.520
So how are we going to approach this?

00:01:32.520 --> 00:01:34.640
The talk is going to be
in three parts today.

00:01:34.640 --> 00:01:38.790
First, we're going to show you coding
techniques and tips for getting the best

00:01:38.900 --> 00:01:40.740
cross-platform behavior out of Java.

00:01:40.740 --> 00:01:46.280
Second, we're going to show you testing
and bug isolation techniques that

00:01:46.610 --> 00:01:49.820
help you find problems using the
tools available to you on Mac OS X.

00:01:50.430 --> 00:01:53.100
And third, we're going to tell you how to
write an effective bug report.

00:01:53.100 --> 00:01:56.410
So let's get started
with the first section.

00:02:00.800 --> 00:02:05.700
Java is positioned as a cross-platform
development and deployment environment,

00:02:05.730 --> 00:02:06.580
and that's true.

00:02:06.580 --> 00:02:11.450
And its catchphrase is, "Write once,
run anywhere." Everyone has heard that.

00:02:11.830 --> 00:02:14.650
But in the finer levels of detail,
the platform independence isn't an

00:02:14.650 --> 00:02:17.300
automatic thing that you get for free.

00:02:17.370 --> 00:02:21.020
Your application may run great on one
Java implementation on one platform,

00:02:21.080 --> 00:02:24.340
but the same code running on
another platform may run well,

00:02:24.340 --> 00:02:27.890
but not in the exact same way
at the finest level of detail.

00:02:28.000 --> 00:02:30.470
You may not even be aware of
all the areas that have subtle

00:02:30.470 --> 00:02:32.390
differences in Java implementations.

00:02:32.550 --> 00:02:35.310
We're going to highlight
some of those today.

00:02:35.620 --> 00:02:37.100
How are we going to approach this?

00:02:37.130 --> 00:02:40.760
Well, first we want to have you thinking
about it in a slightly different way.

00:02:40.760 --> 00:02:43.540
We want to show you the tips
to get the best cross-platform

00:02:43.540 --> 00:02:45.400
behavior out of your code.

00:02:45.420 --> 00:02:49.380
And the things we show you today are
applicable to all Java implementations.

00:02:49.400 --> 00:02:51.880
Even though we're going to
be focusing on Mac OS X,

00:02:51.910 --> 00:02:54.380
we're not trying to do it
in a platform-specific way.

00:02:54.410 --> 00:02:57.490
We're trying to show you general
techniques that allow you to run

00:02:57.620 --> 00:03:01.320
equally well everywhere without
doing something platform-specific,

00:03:01.320 --> 00:03:03.050
if you can help it.

00:03:05.750 --> 00:03:08.300
will help you be aware of the
areas where different platform

00:03:08.300 --> 00:03:11.560
implementations can differ so that
you can adapt to those differences,

00:03:11.560 --> 00:03:13.910
or again,
design in a platform-neutral way

00:03:13.910 --> 00:03:16.380
so that you don't have to adapt.

00:03:17.510 --> 00:03:20.260
So let's move on to an example.

00:03:20.320 --> 00:03:23.370
The anti-aliasing settings
for text and graphics vary

00:03:23.370 --> 00:03:25.950
from platform implementation
to platform implementation.

00:03:26.060 --> 00:03:29.620
And in fact, on Mac OS X,
for applets in the browser,

00:03:29.620 --> 00:03:33.200
users can set whether anti-aliasing
is on or off as a preference.

00:03:33.200 --> 00:03:35.060
So it varies from run to run.

00:03:35.250 --> 00:03:39.990
So you can't guarantee that it's on
or off in any particular situation.

00:03:40.320 --> 00:03:43.520
Here, just to remind you,
here's the same code drawing

00:03:43.520 --> 00:03:46.550
aliased and with anti-aliasing on.

00:03:46.940 --> 00:03:49.810
And you'll notice that line
rendering gets much smoother

00:03:49.880 --> 00:03:53.190
in the image on the right,
but it also changes the appearance.

00:03:53.190 --> 00:03:54.620
And this may matter to your application.

00:03:54.620 --> 00:03:55.990
So what should you do?

00:03:56.000 --> 00:03:59.490
If it matters to your application,
you should set and check the

00:03:59.650 --> 00:04:02.980
anti-aliasing settings explicitly,
rather than assuming

00:04:02.980 --> 00:04:04.430
that they're on or off.

00:04:05.000 --> 00:04:06.820
Here's how to deal with it for text only.

00:04:06.880 --> 00:04:09.880
And this is using standard
Sun Java 2D APIs to deal

00:04:09.880 --> 00:04:11.640
with the rendering hints.

00:04:11.640 --> 00:04:14.320
Here's how to do it for
both text and graphics.

00:04:14.420 --> 00:04:19.810
And these are just, again,
standard Sun APIs in Java 2D.

00:04:20.200 --> 00:04:22.300
Moving on to a more specific example.

00:04:22.430 --> 00:04:26.870
For anti-aliasing for text,
in the swing Aqua look

00:04:26.950 --> 00:04:30.690
and feel on Mac OS X,
text anti-aliasing is on by default.

00:04:30.760 --> 00:04:34.440
And this is in order to fit in better
with the other Mac OS X applications

00:04:34.440 --> 00:04:36.170
and match the Mac OS X Aqua guidelines.

00:04:36.420 --> 00:04:39.210
It improves readability of
text at small point sizes,

00:04:39.210 --> 00:04:42.620
but text metrics are likely
to be different between

00:04:42.620 --> 00:04:44.900
aliased and anti-aliased text.

00:04:44.900 --> 00:04:47.360
And you see here,
this is the same code running with

00:04:47.360 --> 00:04:49.040
anti-aliasing on and then off.

00:04:49.040 --> 00:04:52.380
You notice that not only does the
appearance of the text change,

00:04:52.380 --> 00:04:54.310
but the length of the text changes.

00:04:54.310 --> 00:04:58.010
And so metrics that you gather with the
setting in one position aren't valid

00:04:58.340 --> 00:05:00.340
when you switch to the other position.

00:05:00.340 --> 00:05:01.550
So how do you deal with this?

00:05:01.560 --> 00:05:05.470
Once again,
check and calculate things rather

00:05:05.470 --> 00:05:06.400
than hard-coding or coding.

00:05:06.420 --> 00:05:10.240
Here, again,
is a standard-sun API for dealing with,

00:05:10.240 --> 00:05:13.460
in this case,
calculating the string length of a

00:05:13.460 --> 00:05:18.070
particular string rendered in the current
rendering context with a particular font.

00:05:18.130 --> 00:05:20.870
And this tells you how long that
string is going to be right now.

00:05:20.880 --> 00:05:23.140
It's referred to as width, of course,
because it's graphical,

00:05:23.150 --> 00:05:24.480
but we think of it as string length.

00:05:24.540 --> 00:05:28.930
So you can find out how many pixels wide
that string is going to be right now when

00:05:29.130 --> 00:05:33.780
it's rendered on screen and deal with
that appropriately if it matters to you.

00:05:35.260 --> 00:05:37.100
Moving on to other metrics issues.

00:05:37.260 --> 00:05:43.090
Control sizes for Java implementation
widgets vary across platforms.

00:05:43.290 --> 00:05:47.390
The same controls rendered on
Mac OS X using the same code

00:05:47.400 --> 00:05:50.560
running on other platforms
don't have the same appearance,

00:05:50.560 --> 00:05:52.600
the same font, the same size.

00:05:52.600 --> 00:05:59.900
And this is a standard change that
happens from one platform to another that

00:05:59.970 --> 00:06:05.240
is intended to fit in with the platform
look on that particular native platform.

00:06:05.240 --> 00:06:08.990
But it makes it fragile to hard-code
widget and font sizes where you've

00:06:08.990 --> 00:06:13.150
gathered information based on the
behavior and metrics on one platform.

00:06:13.160 --> 00:06:14.560
So how do you deal with this?

00:06:14.560 --> 00:06:16.830
Once again,
there are APIs that let you check

00:06:16.830 --> 00:06:20.490
rather than hard-coding based on
what you've measured on one platform.

00:06:20.500 --> 00:06:22.500
For widget sizes,
the Sun API is the same as the Java API.

00:06:22.600 --> 00:06:26.100
To get the preferred size of
a component is relevant here.

00:06:26.150 --> 00:06:27.830
For fonts,
you can find out what font you got

00:06:27.910 --> 00:06:30.590
back for a particular default font,
and you can find out the

00:06:30.620 --> 00:06:32.300
metrics for that font,
again,

00:06:32.300 --> 00:06:35.600
in the current situation and the current
rendering context and deal with it.

00:06:35.600 --> 00:06:38.460
And we already showed you how to
calculate the string length in the

00:06:38.570 --> 00:06:42.170
particular rendering context that
you're in right now with the particular

00:06:42.170 --> 00:06:44.210
font you're running with right now.

00:06:45.740 --> 00:06:48.670
A more general approach for dealing
with the fact that UI metrics vary

00:06:48.670 --> 00:06:52.730
among different implementations of
Java is to use a layout manager.

00:06:52.820 --> 00:06:56.530
The layout manager will arrange the
UI for you based on the situation that's

00:06:56.530 --> 00:06:58.600
happening on your platform right now.

00:06:58.780 --> 00:07:01.590
This has the additional benefit,
if you're even on just one platform,

00:07:01.590 --> 00:07:05.390
of handling what happens when you
localize strings to other languages.

00:07:05.390 --> 00:07:06.680
They tend to change length.

00:07:06.760 --> 00:07:09.990
Localizing out of English into other
languages often tends to make for longer

00:07:09.990 --> 00:07:13.010
strings that may not fit into fixed
bounds that you've already picked.

00:07:13.120 --> 00:07:15.680
And the layout manager will deal
with that gracefully for you.

00:07:15.700 --> 00:07:21.010
In order to discover whether you
have successfully made your code

00:07:21.150 --> 00:07:25.480
metrics-independent and can flexibly
deal with different platforms,

00:07:25.480 --> 00:07:28.110
you should try your code
out on multiple platforms.

00:07:28.140 --> 00:07:33.320
If you're using this example here,
this is something that's running in

00:07:33.320 --> 00:07:35.700
the Java implementation on Windows.

00:07:35.700 --> 00:07:39.250
And if we use the same code and hard-set
the window size based on what we

00:07:39.250 --> 00:07:44.020
measured that it fit into on Windows,
you notice that the button and even more

00:07:44.020 --> 00:07:45.680
the label at the bottom are the same.

00:07:45.700 --> 00:07:48.250
You can see that the buttons
are clipped because those don't

00:07:48.250 --> 00:07:49.410
fit in the look on Mac OS X.

00:07:49.410 --> 00:07:51.660
However, if you use a layout
manager and then pack,

00:07:51.660 --> 00:07:53.560
it all fits in nicely and looks great.

00:07:55.440 --> 00:07:59.090
For more details on the Layout Manager,
you can go to the Sun website

00:07:59.170 --> 00:08:03.070
and pick up more information
about this and other topics.

00:08:06.810 --> 00:08:11.040
Another UI thing that varies
between Java implementations and is

00:08:11.040 --> 00:08:14.820
especially important on Mac OS X is
that the window resize user

00:08:14.820 --> 00:08:18.580
interface is in a different location,
again, in order to fit in with what

00:08:18.740 --> 00:08:20.010
fits on that particular platform.

00:08:20.020 --> 00:08:22.340
On Mac OS X,
the resize box actually takes up

00:08:22.340 --> 00:08:26.520
space in the window content region in
the extreme lower right-hand corner,

00:08:26.520 --> 00:08:29.650
and that's intended to tile in with the
scroll bars that are normally on the

00:08:29.650 --> 00:08:31.650
lower and right-hand edge of the window.

00:08:31.710 --> 00:08:33.850
But for Java code that's
coming from other platforms,

00:08:33.850 --> 00:08:36.060
that may end up covering up
content that's in the extreme

00:08:36.090 --> 00:08:37.780
right-hand corner of the window.

00:08:37.780 --> 00:08:41.990
You notice in this sample application,
the extreme right-hand button

00:08:41.990 --> 00:08:44.060
is covered up by the resize box.

00:08:44.060 --> 00:08:45.560
So how do you deal with this?

00:08:45.560 --> 00:08:47.190
Well,
there's several different approaches.

00:08:47.200 --> 00:08:50.120
The general approach would be,
if you didn't crowd your UI so

00:08:50.120 --> 00:08:53.760
that the extreme lower right-hand
corner of the window is important,

00:08:53.760 --> 00:08:56.600
it may open up your UI and
make it look cool anyway.

00:08:56.600 --> 00:08:59.680
That may fit in with what you
plan for your application.

00:08:59.680 --> 00:09:01.640
If you're using a layout manager,
it's within your control.

00:09:01.640 --> 00:09:03.220
And if you're using a layout manager,
it's within your control.

00:09:03.330 --> 00:09:05.510
So you may have to use an empty
placeholder component to hold

00:09:05.590 --> 00:09:08.040
out space underneath the grow
box in order to make this work.

00:09:08.100 --> 00:09:12.860
Another alternative on Mac OS X is
to use this Mac OS X system.

00:09:14.900 --> 00:09:39.900
[Transcript missing]

00:09:43.800 --> 00:09:47.230
This may end up being one of the cases
where you actually have to hard code

00:09:47.230 --> 00:09:49.020
something for a particular platform.

00:09:49.020 --> 00:09:53.240
There may be situations where there's no
way you can design your code in a really

00:09:53.240 --> 00:09:56.200
platform-neutral way and you really have
to do something special for Mac OS X.

00:09:56.340 --> 00:10:00.860
I want to emphasize that you want to
do this only if you really have to.

00:10:00.860 --> 00:10:02.210
It's kind of a last-resort thing.

00:10:02.280 --> 00:10:05.200
You really want to design in a
platform-neutral way if you can,

00:10:05.200 --> 00:10:07.750
but if you have to,
this is the way to deal with

00:10:07.850 --> 00:10:09.800
it on Mac OS X the right way.

00:10:09.800 --> 00:10:11.750
You want to get the
OS name system property,

00:10:11.750 --> 00:10:13.780
lowercase it,
and then find out whether it

00:10:13.780 --> 00:10:17.660
starts with Mac space OS space X.

00:10:17.660 --> 00:10:21.560
Tech Note 2110 has more
details about this approach.

00:10:21.690 --> 00:10:26.590
Again, I want to say that if there are
APIs that you get at specific metrics,

00:10:26.670 --> 00:10:28.320
you want to deal with those APIs.

00:10:28.320 --> 00:10:33.320
If you're interested in specific
behaviors or metrics on that platform,

00:10:33.370 --> 00:10:36.950
ask for those specifically
rather than trying to infer

00:10:36.950 --> 00:10:38.830
them from being on Mac OS X.

00:10:38.970 --> 00:10:42.240
Things may change from one
implementation to another,

00:10:42.370 --> 00:10:45.700
or in some cases may even
change from one to another,

00:10:45.700 --> 00:10:47.210
as we saw earlier.

00:10:50.420 --> 00:10:52.290
So what have we dealt with?

00:10:52.300 --> 00:10:56.950
Well, the general way is to design your
code in a platform-neutral way.

00:10:57.110 --> 00:11:00.320
And the way you confirm that you designed
in a platform-neutral way is to try

00:11:00.320 --> 00:11:04.310
your code out on multiple platforms
to see whether your assumptions work.

00:11:05.600 --> 00:11:08.200
This will help you discover
inadvertent platform dependencies.

00:11:08.200 --> 00:11:10.840
In addition to the metrics issues
we were talking about earlier,

00:11:11.040 --> 00:11:14.610
there's other things that you may be
inadvertently depending on that you

00:11:14.790 --> 00:11:16.590
don't know about that you can try.

00:11:16.830 --> 00:11:21.400
For example,
if on a particular implementation

00:11:21.400 --> 00:11:21.400
there are special characteristics

00:11:21.500 --> 00:11:30.200
[Transcript missing]

00:11:30.560 --> 00:11:42.780
and Matt Drance, the two of you,
will be presenting the

00:11:42.780 --> 00:11:42.780
first session of the Java

00:11:43.600 --> 00:11:57.500
[Transcript missing]

00:11:57.920 --> 00:12:01.990
In the current situation,
we've been hard-coding them based on a

00:12:02.320 --> 00:12:04.790
previous platform or on a previous run.

00:12:04.800 --> 00:12:07.100
If all else fails,
we will show you something

00:12:07.320 --> 00:12:08.350
platform-specific.

00:12:08.420 --> 00:12:20.200
We showed you the right way to build
a Java application on Mac OS X.

00:12:20.200 --> 00:12:20.390
We have Barry Langdon-Lassagne,
who's going to show you some tips for

00:12:20.390 --> 00:12:20.390
building full-time Java applications.

00:12:27.020 --> 00:12:27.700
Thank you, Tom.

00:12:27.750 --> 00:12:29.290
Good afternoon.

00:12:29.380 --> 00:12:31.140
Welcome.

00:12:31.220 --> 00:12:31.380
Thanks for coming.

00:12:31.390 --> 00:12:33.850
I'm going to talk about two things
in this portion of the talk.

00:12:33.890 --> 00:12:36.210
First,
I'm going to talk about JUnit and how

00:12:36.380 --> 00:12:46.540
you can integrate Java into Mac OS X.

00:12:52.730 --> 00:13:00.790
and David Dorn, are here to talk about
the problems with Java.

00:13:02.200 --> 00:13:04.280
and David That's great.

00:13:04.280 --> 00:13:05.600
So you already know what JUnit is.

00:13:05.600 --> 00:13:08.760
It's an open source framework
for incorporating unit...

00:13:11.500 --> 00:13:31.700
[Transcript missing]

00:13:34.430 --> 00:13:37.120
recently made available,
and it's available on

00:13:37.120 --> 00:13:39.610
both Tiger and Panther.

00:13:41.700 --> 00:13:57.100
[Transcript missing]

00:13:59.610 --> 00:14:03.910
One is here you can see
I import the unit framework.

00:14:04.160 --> 00:14:07.530
And at the beginning of my
class you can see that I have

00:14:30.330 --> 00:14:34.260
Download JANET from janet.org and
install it in your class path.

00:14:34.290 --> 00:14:36.310
Be important as well.

00:14:37.480 --> 00:14:41.380
Download JANET from janet.org and
install it in your class path.

00:14:41.380 --> 00:14:43.300
Be important as well.

00:14:48.000 --> 00:14:49.660
I'm not going to go
into detail about this.

00:14:49.660 --> 00:14:50.900
This is all standard.

00:14:50.910 --> 00:14:58.750
And then back down below, in my target,
test target.

00:15:03.600 --> 00:15:06.090
I thought I had-- I can try to
bring it up a little higher.

00:15:06.160 --> 00:15:07.420
Sure.

00:15:07.430 --> 00:15:11.210
I have a slide that has bigger fonts,
too, for that code.

00:15:13.390 --> 00:15:14.840
and you notice the output.

00:15:14.860 --> 00:15:19.600
In Xcode currently,
the output from AMP happens over pain.

00:15:19.620 --> 00:15:23.810
So this window, and if you notice,
the lower pain has a slider.

00:15:23.820 --> 00:15:26.370
And let me just open
that up so you can see.

00:15:26.670 --> 00:15:29.100
Here's the compile target .

00:15:31.670 --> 00:15:37.670
And then, I'm going to change the
font size on this slide.

00:15:37.670 --> 00:15:37.670
At least I don't know
where the settings are.

00:15:39.110 --> 00:15:47.060
This is the output from the
test target in my build.xml.

00:15:48.000 --> 00:16:03.300
[Transcript missing]

00:16:04.260 --> 00:16:07.470
And then a stat crawl
from the point of failure.

00:16:07.610 --> 00:16:13.690
So let me move over to my test code,
which is in my test file.

00:16:14.070 --> 00:16:18.600
The name of the failing method
was TestForceFalseFailure.

00:16:18.620 --> 00:16:22.340
And I used the JUnits
method to assert true.

00:16:22.340 --> 00:16:24.740
And for purposes of the demo,
I set that to false so that

00:16:24.740 --> 00:16:26.040
we would get a failure.

00:16:26.060 --> 00:16:28.510
I'm going to change that to true.

00:16:30.410 --> 00:16:31.450
And then I'm going to run it again.

00:16:31.460 --> 00:16:36.690
And you'll see a little
bit different behavior.

00:16:38.430 --> 00:16:43.150
Again, this time you can see
in the compile target,

00:16:43.220 --> 00:16:48.790
it actually does compile
because I changed my test case.

00:16:50.900 --> 00:16:53.700
In the test section you can
see all of the tests ran

00:16:53.700 --> 00:16:55.150
and all of the tests passed.

00:16:55.370 --> 00:16:58.990
And because the tests passed,
it was able to connect to the jar

00:16:59.000 --> 00:17:00.900
section and then execute the code.

00:17:00.900 --> 00:17:05.650
And here's the application running where
we show alias versus anti-alias text,

00:17:05.680 --> 00:17:07.900
which you saw in a previous slide.

00:17:07.900 --> 00:17:14.900
So that's JUnit running
inside Xcode on Mac OS X.

00:17:15.050 --> 00:17:16.880
So back to slides.

00:17:27.690 --> 00:17:28.610
The things you need to do.

00:17:28.860 --> 00:17:31.110
One, you need to write tests.

00:17:31.190 --> 00:17:33.120
You've got to write tests
in order for them to run.

00:17:33.290 --> 00:17:35.940
Number two,
you need to get a copy of JUnit and put

00:17:35.940 --> 00:17:38.320
it in your class path on your machine.

00:17:38.320 --> 00:17:41.460
On the demo machine,
I put mine in library Java extensions.

00:17:41.460 --> 00:17:43.960
There's lots of different ways
to add to your class path.

00:17:44.000 --> 00:17:49.360
And then third, you need to modify your
build.xml file to execute JUnit.

00:17:49.400 --> 00:17:53.320
And this, on the screen,
you see a very simple--

00:17:53.390 --> 00:17:57.620
a minimal way of executing JUnit tests.

00:17:58.040 --> 00:18:01.460
And then here,
I've added one more argument

00:18:01.790 --> 00:18:04.680
to the JUnit command,
the Halt on Failure argument.

00:18:04.820 --> 00:18:08.750
And if Halt on Failure is set to yes,
then when you build

00:18:08.750 --> 00:18:12.740
with your ant project,
if there are any test failures,

00:18:12.740 --> 00:18:14.350
then it will stop at that point.

00:18:14.360 --> 00:18:17.430
You'll get a failure and you know,
your build will be

00:18:17.430 --> 00:18:18.680
considered to have failed.

00:18:18.720 --> 00:18:20.640
If you set that to no,
it'll run the test,

00:18:20.720 --> 00:18:22.220
but it'll go on and build and run.

00:18:22.220 --> 00:18:24.590
So again, it's your choice.

00:18:25.330 --> 00:18:26.980
The way you design projects,
whether you want to

00:18:26.980 --> 00:18:28.080
set that true or false.

00:18:28.090 --> 00:18:29.760
I'd recommend true.

00:18:29.780 --> 00:18:34.240
Down at the bottom, you can see just the
beginning of my jar target,

00:18:34.240 --> 00:18:38.540
and the default template
for AMP-based projects

00:18:39.310 --> 00:18:43.340
For the depends clause set to compile,
I've modified it to be dependent upon

00:18:43.450 --> 00:18:48.190
test so that it would execute the
test as part of building the project.

00:18:50.940 --> 00:18:52.220
So that's JUnit.

00:18:52.260 --> 00:18:54.260
Tests are integrated into
your development process.

00:18:54.270 --> 00:18:56.480
You write your tests.

00:18:56.970 --> 00:19:03.340
It's a really nice way of integrating
testing into your development process.

00:19:03.400 --> 00:19:04.910
It works really great with Xcode.

00:19:05.000 --> 00:19:06.540
I've been using it for a while now.

00:19:06.670 --> 00:19:09.560
Other IDEs, Eclipse,

00:19:09.790 --> 00:19:12.690
and Maria also support JUnit.

00:19:12.810 --> 00:19:14.040
It's cross-platform.

00:19:14.210 --> 00:19:16.060
There's a large, active community.

00:19:16.060 --> 00:19:23.700
Most of you raised your hands,
so you already know a lot of this.

00:19:23.700 --> 00:19:28.250
And for more information,
go to JUnit.org and read

00:19:28.250 --> 00:19:28.250
the documentation there.

00:19:28.250 --> 00:19:28.250
So the other part, when things go wrong.

00:19:29.020 --> 00:19:31.340
Sometimes it's a problem in your code.

00:19:31.340 --> 00:19:33.080
Sometimes it's underneath you.

00:19:33.080 --> 00:19:36.000
Sometimes it's out of your control,
and I'm going to cover

00:19:36.000 --> 00:19:37.570
both of those areas.

00:19:39.910 --> 00:19:43.140
So I'm going to cover several things.

00:19:43.140 --> 00:19:46.860
I will show you some Mac OS X tools
for isolating problems.

00:19:46.860 --> 00:19:48.700
Many of the tools-- well,
some of the tools are

00:19:48.790 --> 00:19:49.800
specific to Mac OS X.

00:19:49.800 --> 00:19:53.440
Many of the tools are cross-platform
tools you may already be familiar with.

00:19:53.440 --> 00:19:56.860
I will mention when I'm using
a tool that's cross-platform,

00:19:56.860 --> 00:19:58.560
just so that it's clear.

00:19:58.560 --> 00:20:02.000
And the goal is to give you the
knowledge you need to fix the problem,

00:20:02.030 --> 00:20:04.830
or if the problem is outside
the scope of your code,

00:20:04.830 --> 00:20:08.310
in order to isolate it and
to report an effective bug.

00:20:12.750 --> 00:20:14.840
Let's go to a demo again.

00:20:15.060 --> 00:20:17.680
I'm going to do a little
bit of role playing here.

00:20:17.720 --> 00:20:24.060
I am a developer fairly new to Mac OS X,
and I'm starting to bring

00:20:24.060 --> 00:20:26.200
up my projects on the Mac.

00:20:26.240 --> 00:20:33.460
And Tom here, Tom is the expert,
and I'm going to be calling him .

00:20:33.510 --> 00:20:35.800
So let me get this stuff out of the way.

00:20:38.750 --> 00:20:40.160
Okay, Tom.

00:20:40.200 --> 00:20:41.840
I've written a little simple program.

00:20:41.840 --> 00:20:43.300
It does some painting.

00:20:43.340 --> 00:20:46.080
It has two separate threads,
and both of the threads

00:20:46.080 --> 00:20:48.510
paint to the screen,
and it's supposed to animate

00:20:48.510 --> 00:20:50.040
in between the two threads.

00:20:50.130 --> 00:20:53.200
But it doesn't animate.

00:20:53.550 --> 00:20:55.360
It's just sitting there.

00:20:55.510 --> 00:20:57.530
So you know Mac OS X.

00:20:58.000 --> 00:20:59.500
What should I do here?

00:20:59.600 --> 00:21:01.980
Why don't you try Activity Monitor?

00:21:01.980 --> 00:21:03.060
TOM O' Okay.

00:21:03.060 --> 00:21:05.130
Let's try Activity Monitor.

00:21:07.300 --> 00:21:07.950
Oh, Thread Painter.

00:21:07.960 --> 00:21:09.090
There's my Thread Painter.

00:21:09.330 --> 00:21:12.000
So what am I looking at?

00:21:12.110 --> 00:21:15.110
This is showing you the state
of all the processes that are

00:21:15.110 --> 00:21:17.300
running for you in Mac OS X.

00:21:17.300 --> 00:21:19.560
There's Thread Painter,
and it looks pretty quiet.

00:21:19.600 --> 00:21:22.900
It's using no CPU, or essentially no CPU.

00:21:22.940 --> 00:21:28.440
So your application is basically stopped.

00:21:28.440 --> 00:21:29.130
OK.

00:21:29.180 --> 00:21:31.870
So I can tell my application doesn't
seem to be doing a whole lot.

00:21:32.100 --> 00:21:38.060
So let's find out more about what's
going on inside Java right now.

00:21:38.090 --> 00:21:41.100
If you send a kill-minus-quit
signal to that Java process,

00:21:41.100 --> 00:21:43.980
the VM will dump the state of
all the threads that are running.

00:21:44.000 --> 00:21:45.840
Tom O' Okay.

00:21:45.840 --> 00:21:47.970
So I guess I need terminal.

00:21:48.610 --> 00:21:50.040
Is that font big enough?

00:21:50.320 --> 00:21:51.800
Can you guys read?

00:21:52.170 --> 00:21:56.570
So kill minus quit,
this is standard on Unix platforms.

00:21:56.720 --> 00:22:01.620
I send kill a quit signal
with the process ID,

00:22:01.620 --> 00:22:05.010
which I can see here is 629.

00:22:05.630 --> 00:22:09.800
It should dump a stack
trace out to standard out,

00:22:09.830 --> 00:22:12.490
but Tom, I don't see anything.

00:22:12.620 --> 00:22:14.900
TOM O' Well, how'd you launch?

00:22:15.470 --> 00:22:17.040
How did you launch?

00:22:17.080 --> 00:22:18.560
I double-clicked the jar in the finder.

00:22:18.750 --> 00:22:19.820
Ah.

00:22:20.060 --> 00:22:21.850
It's going to end up
in the system console.

00:22:21.870 --> 00:22:23.300
So go look in the system console.

00:22:23.380 --> 00:22:26.520
OK,
let's take a look at system console here.

00:22:26.520 --> 00:22:29.090
This looks kind of like a stack.

00:22:29.770 --> 00:22:30.460
Thread dump here.

00:22:30.460 --> 00:22:33.100
OK, look,
I see this is some old debugging

00:22:33.100 --> 00:22:34.760
output from my application.

00:22:34.770 --> 00:22:36.160
I can see it--

00:22:38.980 --> 00:22:39.600
Thread dump here.

00:22:39.730 --> 00:22:42.300
OK, look,
I see this is some old debugging

00:22:42.300 --> 00:22:43.960
output from my application.

00:22:44.680 --> 00:22:45.360
Thread dump here.

00:22:45.360 --> 00:22:48.000
OK, look,
I see this is some old debugging

00:22:48.000 --> 00:22:49.580
output from my application.

00:22:49.690 --> 00:22:51.060
I can see it--

00:22:57.720 --> 00:22:59.290
Found one Java-level deadlock.

00:22:59.490 --> 00:23:02.800
Sure enough, it looks like I found
a deadlock in my code.

00:23:02.800 --> 00:23:04.560
Let's take a look at my code.

00:23:04.690 --> 00:23:07.710
Threadpainter.java line 70.

00:23:08.200 --> 00:23:10.200
I'm going to open up
Threadpainter and Xcode here.

00:23:10.200 --> 00:23:13.890
I'll go to line 70.

00:23:17.240 --> 00:23:23.020
And there's my odd thread,
and there's my even thread.

00:23:23.060 --> 00:23:26.920
And I have synchronized this even thread
with an outer lock and inner lock,

00:23:26.980 --> 00:23:30.180
and--

00:23:30.340 --> 00:23:32.920
I have an interlock and an
outerlock on the odd thread.

00:23:33.010 --> 00:23:36.160
Looks like you've set
up a classic deadlock.

00:23:36.310 --> 00:23:37.320
Did you do this deliberately?

00:23:37.460 --> 00:23:39.320
Oh, what do you think?

00:23:39.750 --> 00:23:42.320
Usually it's not quite
this straightforward,

00:23:42.320 --> 00:23:45.230
but you get the idea, the tool,
how to use the tool to

00:23:45.260 --> 00:23:46.640
find this type of problem.

00:23:46.800 --> 00:23:48.520
Let's go back to slides.

00:23:55.340 --> 00:23:58.430
So the tools that we just used,
you saw kill minus quit,

00:23:58.530 --> 00:24:00.880
you saw activity monitor,
and kill minus quit.

00:24:01.010 --> 00:24:02.830
Kill minus quit works cross-platform.

00:24:03.030 --> 00:24:05.120
If you're running in terminal,
if you're executing

00:24:05.210 --> 00:24:07.400
from the command line,
you can also do control backslash

00:24:07.420 --> 00:24:08.800
and get the same information.

00:24:08.940 --> 00:24:11.460
If you're on a machine,
you can do control break and

00:24:11.480 --> 00:24:13.600
also get the same information.

00:24:13.600 --> 00:24:15.520
So up on the screen,
the little sample you see,

00:24:15.520 --> 00:24:19.100
I used top to get the process ID,
and kill minus quit for that

00:24:19.100 --> 00:24:22.000
process ID to dump the stack trace.

00:24:22.010 --> 00:24:25.760
And it pointed out one of the
slight points of confusion,

00:24:25.760 --> 00:24:30.760
especially for people new to Mac OS X,
where does the output go?

00:24:30.820 --> 00:24:33.480
If I was running in terminal,
as you would expect,

00:24:33.500 --> 00:24:36.140
the output goes to the
terminal right where you are.

00:24:36.440 --> 00:24:39.150
But if you're double-clicking a jar,
or if you have a .app

00:24:39.150 --> 00:24:42.120
application in the finder,
the output is going to

00:24:42.120 --> 00:24:45.160
go to the system console,
console.app.

00:24:45.170 --> 00:24:47.880
And similarly,
if you're running in Safari,

00:24:48.010 --> 00:24:50.310
you have an applet in Safari,
the output's going to

00:24:50.310 --> 00:24:51.760
go to console as well.

00:24:51.890 --> 00:24:55.640
Unless you have turned
on the Java console using

00:24:55.640 --> 00:24:58.410
the Java Settings plugin,
the Java Settings application,

00:24:58.480 --> 00:25:00.560
in which case the output
goes to the Java console,

00:25:00.560 --> 00:25:04.630
which also has some other debugging
tools that you can take a look at.

00:25:04.670 --> 00:25:07.780
There's a help screen that shows up
when you first invoke that console,

00:25:07.800 --> 00:25:09.680
useful for debugging applets.

00:25:09.700 --> 00:25:12.920
Lastly, if you're running-- if you're
executing your code from Xcode,

00:25:13.240 --> 00:25:16.200
you'll see the output
right in the run log.

00:25:16.200 --> 00:25:17.470
OK.

00:25:18.080 --> 00:25:20.160
So let's go to another demo.

00:25:20.190 --> 00:25:21.300
Same role.

00:25:21.320 --> 00:25:22.940
I'm a developer.

00:25:23.050 --> 00:25:27.910
Still getting my sea
legs here on Mac OS X.

00:25:28.620 --> 00:25:32.140
I had some of this stuff so
that it's not distracting.

00:25:32.370 --> 00:25:36.210
And I have another little
application I call Drawing Loop.

00:25:36.400 --> 00:25:38.360
And it does some animation.

00:25:38.420 --> 00:25:39.670
This time it does do animation.

00:25:39.750 --> 00:25:41.480
See, it's working.

00:25:41.680 --> 00:25:43.430
and I can turn on and
off the box numbers.

00:25:43.440 --> 00:25:46.480
Each square has a number
associated with the slider,

00:25:46.480 --> 00:25:48.350
the J slider down here at the bottom.

00:25:48.460 --> 00:25:50.580
But Tom, I have a problem here.

00:25:50.810 --> 00:25:56.240
When I drag it all the way to the right,
it just kind of stops responding.

00:25:56.300 --> 00:26:00.590
And then if I resize, it gets even worse.

00:26:01.420 --> 00:26:04.170
And there's that rainbow cursor.

00:26:04.280 --> 00:26:07.280
So I just saw Activity
Monitor with the last one,

00:26:07.280 --> 00:26:08.700
and I can remember these things.

00:26:08.700 --> 00:26:13.390
So I'm going to look at Activity
Monitor again and see what it tells me.

00:26:14.290 --> 00:26:16.450
So here, look at this.

00:26:16.460 --> 00:26:17.530
This is very helpful.

00:26:17.720 --> 00:26:19.170
Drawing loop is hung.

00:26:19.340 --> 00:26:22.240
Activity Monitor, at least,
thinks my application is hung.

00:26:22.320 --> 00:26:24.170
And I'm using a lot of CPU.

00:26:24.370 --> 00:26:26.340
So now what should I do?

00:26:26.340 --> 00:26:28.000
Should I use kill minus quit again?

00:26:28.120 --> 00:26:29.170
Get a stack dump?

00:26:29.360 --> 00:26:31.710
JOHN MCCUTCHAN: You'd find out what state
the Java threads were in,

00:26:31.710 --> 00:26:33.580
but we have an even cooler tool for this.

00:26:33.580 --> 00:26:34.490
It's new this week.

00:26:34.520 --> 00:26:36.320
It's Shark for Java.

00:26:36.590 --> 00:26:36.980
BRYAN LAMBERT: That's right.

00:26:37.060 --> 00:26:38.640
JOHN MCCUTCHAN: So go launch Shark.

00:26:38.690 --> 00:26:40.670
BRYAN LAMBERT:
I was at the VM performance

00:26:40.670 --> 00:26:44.060
talk yesterday afternoon when
Christy demonstrated Shark.

00:26:44.190 --> 00:26:46.620
So I do know a little
bit about Shark now,

00:26:46.620 --> 00:26:47.780
because I just saw a demo.

00:26:47.990 --> 00:26:51.440
So let me try it with my application.

00:26:51.530 --> 00:26:55.560
So there is one piece of setup you
have to do in order to use Shark.

00:26:55.730 --> 00:26:58.600
And you might have seen
it in some of the output.

00:26:58.720 --> 00:27:03.600
In fact, I think in the console,
it'll still say it right here.

00:27:03.910 --> 00:27:06.140
Here, picked up Java options.

00:27:06.160 --> 00:27:11.810
I have set -x run shark in order to give
shark the data that it needs from the

00:27:11.810 --> 00:27:16.000
Java runtime for it to do its magic.

00:27:16.000 --> 00:27:17.980
So shark is a profiling tool.

00:27:18.060 --> 00:27:19.170
You can use it to isolate bugs.

00:27:19.180 --> 00:27:22.080
I'm just going to do a time trace here.

00:27:22.080 --> 00:27:23.080
And I'm going to start it.

00:27:23.080 --> 00:27:26.480
And it's sampling what's going on in
my application there in the background,

00:27:26.480 --> 00:27:29.330
the one with the spinning rainbow cursor.

00:27:30.500 --> 00:27:34.320
Now let me stop,
and it will produce this nice report.

00:27:34.320 --> 00:27:40.060
So this tells me where I was when
Shark was sampling my application,

00:27:40.060 --> 00:27:41.340
where I'm spending time.

00:27:41.340 --> 00:27:46.180
And at the very top you see
C:\SurfaceData Finish Lazy Drawing.

00:27:46.180 --> 00:27:48.530
That's probably not very readable.

00:27:48.730 --> 00:27:52.100
This one, the one at the top,
is the one where the

00:27:52.100 --> 00:27:58.050
most time is being spent,
where Shark sampled the most times.

00:27:58.130 --> 00:28:02.550
So I'm just going to open it up
and see what I can learn from here.

00:28:02.730 --> 00:28:04.920
This is a stack crawl.

00:28:05.230 --> 00:28:06.360
The leaf is at the top.

00:28:06.360 --> 00:28:09.600
And as I drill down,
you can see I spend a lot of time in AWT,

00:28:09.690 --> 00:28:11.680
which was called by Java 2D.

00:28:11.680 --> 00:28:13.880
And then I get down to
these blank ones here.

00:28:13.930 --> 00:28:19.130
But I recognize these-- drawRacks,
fillScreenWithRacks, paint as my code.

00:28:19.330 --> 00:28:21.960
That's my code executing there.

00:28:23.570 --> 00:28:24.720
knows about Java.

00:28:24.810 --> 00:28:26.980
The other tools that you
may be used to using,

00:28:26.980 --> 00:28:29.720
such as Sampler or Sample
on the Command Line,

00:28:29.780 --> 00:28:32.800
they don't have this kind of
intimate knowledge of Java.

00:28:32.840 --> 00:28:35.760
Now, Paint, Fill Screen with Rx, Draw Rx.

00:28:35.790 --> 00:28:38.260
I want to go take a look
at my paint routine.

00:28:38.310 --> 00:28:41.530
And Tom, maybe you can help me
because you're an expert.

00:28:41.630 --> 00:28:45.990
See if there's anything
here I'm doing that might be

00:28:45.990 --> 00:28:49.220
causing that rainbow cursor.

00:28:49.280 --> 00:28:51.970
So there's my paint method.

00:28:52.040 --> 00:28:54.340
Right here, down at the bottom.

00:28:55.400 --> 00:28:58.420
Barry, you want to tell me what
extreme count mode is?

00:28:58.450 --> 00:28:59.950
BARRY LANGDON- Oh, yeah,
extreme count mode.

00:29:00.000 --> 00:29:01.860
Yeah, I just recently added that.

00:29:01.940 --> 00:29:06.070
When I drag it to the right,
it's supposed to fill the

00:29:06.070 --> 00:29:07.020
screen with rectangles.

00:29:07.020 --> 00:29:10.260
And that's actually right here,
fill screen with rects.

00:29:10.320 --> 00:29:15.260
And maybe I set the bar
a little bit too high.

00:29:15.440 --> 00:29:16.700
This is a dual processor D5.

00:29:16.700 --> 00:29:21.070
It can handle 10,000 runs
of 10,000 rectangles,

00:29:21.100 --> 00:29:22.500
can't it?

00:29:22.750 --> 00:29:23.600
Eventually.

00:29:23.600 --> 00:29:24.550
Eventually.

00:29:24.720 --> 00:29:25.600
Yeah, actually, this is not hung.

00:29:25.600 --> 00:29:27.400
Even though Activity
Monitor said it was hung,

00:29:27.410 --> 00:29:30.000
it would eventually return,
but it would take a while.

00:29:30.000 --> 00:29:31.670
And I said it such that
it would take a while.

00:29:31.700 --> 00:29:34.260
It's usually not that straightforward.

00:29:34.280 --> 00:29:36.230
So back to slides.

00:29:37.830 --> 00:29:40.460
Here you saw, again, Activity Monitor.

00:29:40.490 --> 00:29:44.020
The CPU level was really high that time,
so you did get some interesting

00:29:44.020 --> 00:29:45.650
information from Activity Monitor.

00:29:45.770 --> 00:29:49.530
You could have used Top in that same
situation and seen similar data,

00:29:49.530 --> 00:29:53.800
and Top is cross-platform,
at least for other Unix machines.

00:29:53.800 --> 00:29:57.420
And I showed you Shark, a great tool,
recently enhanced,

00:29:57.530 --> 00:29:59.860
to tell you a lot more about Java.

00:29:59.880 --> 00:30:04.080
And there's a Shark Talk this
Friday I'd like to tell you about,

00:30:04.080 --> 00:30:05.100
and you should go.

00:30:05.210 --> 00:30:08.720
Christy is giving the talk,
and that's at 3:30,

00:30:08.740 --> 00:30:12.670
and I don't know the room name,
but it's session number 307.

00:30:16.380 --> 00:30:18.980
Oh,
Sanjay and Nathan are giving the talk.

00:30:19.000 --> 00:30:22.540
And the talk is not specific to Java,
but the techniques that you learn there

00:30:22.540 --> 00:30:25.740
should be useful for Java as well.

00:30:25.770 --> 00:30:29.620
So did I go back to demo already?

00:30:29.620 --> 00:30:32.100
OK, this is my last demo.

00:30:35.610 --> 00:30:37.820
Let's hide some stuff here.

00:30:37.820 --> 00:30:41.780
Oh, and so here's a little tiny tool,
a little tiny technique.

00:30:41.800 --> 00:30:46.050
If you hold down the mouse on the icon,
Force Quit comes up as an option.

00:30:46.060 --> 00:30:48.290
And if you don't see Force Quit,
you can hold down the

00:30:48.290 --> 00:30:49.630
Option key to force Force Quit.

00:30:49.690 --> 00:30:53.090
It's a nice way of getting
rid of your frozen app.

00:30:53.280 --> 00:30:58.020
OK, my last app here, Tom,
JNIwrapper.jar.

00:30:58.020 --> 00:31:02.430
This is a little piece of Java that
calls a little piece of native code.

00:31:02.560 --> 00:31:03.870
So I can bring it up here.

00:31:04.190 --> 00:31:07.300
And when I click on this button,
at this point it will call my

00:31:07.300 --> 00:31:11.070
native library that I've written,
and it crashes.

00:31:11.150 --> 00:31:13.050
So what should I do?

00:31:13.060 --> 00:31:16.110
Should I click Submit Report here
and send the bug to Apple?

00:31:16.260 --> 00:31:16.960
TOM WALSH: Hold on.

00:31:17.080 --> 00:31:19.490
Just hold that thought.

00:31:19.690 --> 00:31:20.800
We'll come back to that.

00:31:20.800 --> 00:31:21.700
Just put that aside.

00:31:21.880 --> 00:31:22.120
Tom O'Brien: All right.

00:31:22.190 --> 00:31:23.900
Let me move that out of the way here.

00:31:23.910 --> 00:31:26.630
So what should I do
with this application?

00:31:28.240 --> 00:31:31.820
Well, you said it was needed
code that you're calling?

00:31:31.850 --> 00:31:33.400
TOM O' Yeah.

00:31:33.440 --> 00:31:36.700
Well, if you don't have
source available to you,

00:31:36.750 --> 00:31:40.000
your best debugging tool that
you have available would be GDB.

00:31:40.070 --> 00:31:43.520
So why don't you try attaching
to it in GDB before the crash?

00:31:43.560 --> 00:31:45.160
TOM O' That actually brings
up a very important point.

00:31:45.210 --> 00:31:46.450
Sometimes you do have source.

00:31:46.640 --> 00:31:48.610
If you have source,
Xcode is the way to go.

00:31:48.680 --> 00:31:50.600
Single step in Xcode, trace these.

00:31:50.900 --> 00:31:52.670
But there are lots of
different situations where

00:31:52.670 --> 00:31:53.530
you might not have source.

00:31:53.550 --> 00:31:55.660
You might have a third
party native library.

00:31:55.700 --> 00:32:00.170
You might be on a customer's computer
trying to do debugging with what's there.

00:32:00.180 --> 00:32:02.260
You might be on a test
machine in your labs.

00:32:02.290 --> 00:32:04.660
Lots of different times
you won't have source,

00:32:04.670 --> 00:32:06.900
and so you want to use other
tools that are available too.

00:32:06.920 --> 00:32:07.790
And you said GDB.

00:32:07.860 --> 00:32:09.690
I know GDB.

00:32:09.890 --> 00:32:12.480
So let me launch the app here.

00:32:12.970 --> 00:32:15.240
I'm not going to press the button yet.

00:32:15.270 --> 00:32:17.520
I'm going to use top this time.

00:32:17.650 --> 00:32:18.920
See what process it is.

00:32:18.920 --> 00:32:21.350
It looks like process 654.

00:32:21.450 --> 00:32:23.460
Copy that.

00:32:23.480 --> 00:32:26.270
And I will do a gdb attach.

00:32:26.850 --> 00:32:28.180
I'm not going to teach you GDB.

00:32:28.180 --> 00:32:30.880
I'm just going to show
you a tiny bit of GDB.

00:32:30.930 --> 00:32:35.730
Being aware that it's there and that
it's useful is the main point here.

00:32:35.860 --> 00:32:37.580
GDB is now attached to my process.

00:32:37.700 --> 00:32:42.300
I'm going to tell it to continue so
that my application has control again.

00:32:42.310 --> 00:32:44.360
And now I'm going to press this button.

00:32:44.370 --> 00:32:48.040
And you can see GDB immediately
catches the crash.

00:32:48.120 --> 00:32:53.700
So here I can do a thread
apply all backtrace.

00:32:53.780 --> 00:32:56.280
Yes, there are shortcuts for this.

00:32:56.440 --> 00:33:00.670
And now I have a dump of all of
the native threads that are running

00:33:00.680 --> 00:33:02.200
associated with my application.

00:33:02.220 --> 00:33:05.660
Many of these are Java threads
like the event thread.

00:33:05.700 --> 00:33:08.470
But at least one of
them should be my code.

00:33:08.560 --> 00:33:11.020
Let me go back up to the top here.

00:33:11.470 --> 00:33:17.370
It looks like it could not
access memory on thread 0xf603.

00:33:17.550 --> 00:33:20.670
And that's right here.

00:33:20.910 --> 00:33:26.120
So it's pointing to line 29 of my code.

00:33:26.210 --> 00:33:28.230
So sometimes you don't have source code.

00:33:28.340 --> 00:33:29.110
This time we do.

00:33:29.260 --> 00:33:31.670
So we're just going to take a quick peek.

00:33:32.050 --> 00:33:34.460
at my little JNI line.

00:33:34.530 --> 00:33:38.720
And we will go to line 29 in Xcode.

00:33:38.840 --> 00:33:43.040
And here, Tom-- well,
it may be fairly clear to you,

00:33:43.040 --> 00:33:45.110
but here I have a pointer
and I'm dereferencing it.

00:33:45.150 --> 00:33:49.080
But oh, look, just above here the
pointer got set to zero.

00:33:49.080 --> 00:33:50.490
TOM O' How could that have happened?

00:33:50.620 --> 00:33:53.150
Yeah, that could be a problem.

00:33:53.290 --> 00:33:58.020
And if you've ever debugged C code,
you probably know that it's not

00:33:58.100 --> 00:33:59.930
that straightforward usually.

00:34:00.130 --> 00:34:01.240
Sometimes it is.

00:34:01.320 --> 00:34:02.230
Sometimes it is.

00:34:02.350 --> 00:34:04.850
So why did you want me to
set this window aside here?

00:34:05.030 --> 00:34:07.020
TOM O' Well,
the Submit Report button has hiding

00:34:07.020 --> 00:34:11.230
behind it something very similar
to what you just got in GDB,

00:34:11.480 --> 00:34:15.390
which is a native crash report showing
all the native threads that were

00:34:15.390 --> 00:34:17.960
running at the point of the crash,
including a little bit more

00:34:17.960 --> 00:34:21.080
helpful stuff pointing you to the
exact thread number that crashed.

00:34:21.080 --> 00:34:24.130
So it's containing basically
the same information you got.

00:34:24.240 --> 00:34:27.460
And you sometimes get this if your
application has a user interface.

00:34:27.460 --> 00:34:30.480
That's the basic rule,
that you'll get this crash report window.

00:34:30.480 --> 00:34:33.260
You can copy and paste this
information into a bug report,

00:34:33.300 --> 00:34:36.400
or you can use it for further
isolation on your machine.

00:34:36.520 --> 00:34:38.800
TOM O' So now I can send to Apple?

00:34:38.890 --> 00:34:40.150
Sure.

00:34:40.740 --> 00:34:41.480
Go ahead.

00:34:41.510 --> 00:34:43.620
TOM O' Well, you know,
I just reported to Apple my own bug.

00:34:43.640 --> 00:34:46.780
So you probably shouldn't do
that if it's in your own code.

00:34:46.810 --> 00:34:49.650
Let me point out,
sometimes you'll get a report.

00:34:49.810 --> 00:34:51.280
Somebody says, my application crashed.

00:34:51.420 --> 00:34:53.520
And you said, well,
did you grab the stat crawl?

00:34:53.520 --> 00:34:54.440
And they say, no.

00:34:54.660 --> 00:34:56.540
Those stat crawls are actually
saved on your machine.

00:34:56.630 --> 00:35:00.280
And in this case,
it's in my home directory in library log.

00:35:00.480 --> 00:35:01.910
folks.

00:35:02.450 --> 00:35:06.160
And inside Crash Reporter,
you see a java.crash.log file.

00:35:06.470 --> 00:35:09.830
This contains the log that you just
saw on the screen for all of the

00:35:09.920 --> 00:35:12.720
crashes that have ever happened
for this user on this system.

00:35:12.780 --> 00:35:14.690
And you may have noticed
as I was navigating here,

00:35:14.860 --> 00:35:19.880
I went past a folder full of a
bunch of Java native crash logs.

00:35:19.930 --> 00:35:22.040
And they have a PID associated with them.

00:35:22.150 --> 00:35:27.640
If I look back here at my GDB output,
process 654 was the one that had crashed.

00:35:27.690 --> 00:35:29.710
And so that would be
this one here at the top.

00:35:29.980 --> 00:35:32.600
And let's just take a quick peek at that.

00:35:33.330 --> 00:35:36.840
If you're reporting bugs,
this file can come in handy in

00:35:36.840 --> 00:35:38.300
isolating where the problem is.

00:35:38.390 --> 00:35:42.310
In this case, you see here,
this is a Java stat crawl from

00:35:42.310 --> 00:35:44.450
the point where it crashed.

00:35:44.590 --> 00:35:48.010
And up near the top, we were in Java,
and at the very top,

00:35:48.010 --> 00:35:49.560
it called a native method.

00:35:49.560 --> 00:35:52.200
So that's the point at which it
kind of jumped out and left Java.

00:35:52.200 --> 00:35:55.860
And that's the limit of the
information that the Java VM can

00:35:55.900 --> 00:35:57.690
give you about the crash.

00:35:58.150 --> 00:36:00.890
There's also a little helpful
reminder here at the bottom,

00:36:00.890 --> 00:36:03.620
and this has helped reduce
some of the bug reports we get.

00:36:03.660 --> 00:36:08.260
It says, the exception above was detected
in native code outside the VM.

00:36:08.270 --> 00:36:11.380
And it's usually accurate,
maybe not always,

00:36:11.380 --> 00:36:14.870
but what that usually means
is it wasn't Java crashing,

00:36:15.010 --> 00:36:17.450
it was something else crashing.

00:36:17.530 --> 00:36:19.240
It may have been a native
library that you had written.

00:36:19.280 --> 00:36:19.970
It might be an OS bug.

00:36:19.970 --> 00:36:21.870
It may still be something
that you'd want to report.

00:36:21.940 --> 00:36:24.500
I just wanted to point
out that little detail.

00:36:24.500 --> 00:36:26.690
Okay, back to slides.

00:36:31.610 --> 00:36:33.920
I guess the font could
be a little bigger.

00:36:33.950 --> 00:36:35.190
So what tools did we use there?

00:36:35.370 --> 00:36:39.140
GDB Attach, GDB Cross-Platform,
handy tool.

00:36:39.160 --> 00:36:44.200
We used the Crash Reporter window
as a bug isolation tool.

00:36:44.200 --> 00:36:50.920
And you saw where I had found some of
the crash logs in my library logs folder.

00:36:53.420 --> 00:36:54.540
What have we learned here?

00:36:54.670 --> 00:36:56.340
This is a summary.

00:36:56.470 --> 00:37:00.080
First, in the first crash demo,
in the first hang demo, I was spinning.

00:37:00.080 --> 00:37:01.800
The CPU was low.

00:37:01.800 --> 00:37:03.880
I found that out by looking
in Activity Monitor.

00:37:03.880 --> 00:37:07.190
Could have used top, PS,
similar techniques for finding that out.

00:37:07.270 --> 00:37:09.720
I did a kill minus quit
to get the information.

00:37:09.790 --> 00:37:11.660
Control backslash also works.

00:37:12.580 --> 00:37:15.770
In the second example,
I had high CPU usage,

00:37:15.890 --> 00:37:18.490
which I saw from Activity Monitor.

00:37:18.740 --> 00:37:21.390
And in this situation, we used Shark.

00:37:21.500 --> 00:37:23.570
If you don't have Shark,
you should download it.

00:37:23.620 --> 00:37:25.880
You want to get the
latest version of Shark,

00:37:25.880 --> 00:37:27.580
both for Tiger and for Panther.

00:37:27.580 --> 00:37:30.900
The download is available
on developer.apple.com

00:37:30.900 --> 00:37:33.670
tools slash performance.

00:37:33.690 --> 00:37:34.190
Do I have it right?

00:37:34.260 --> 00:37:34.760
Okay.

00:37:35.950 --> 00:37:38.620
And you could use kill-minus-quit
in this situation.

00:37:38.620 --> 00:37:41.240
You would get some information
that may help isolate it.

00:37:41.310 --> 00:37:44.510
The detail that you get from
Shark is a lot finer grained,

00:37:44.550 --> 00:37:47.990
a lot more detailed, a lot more useful.

00:37:49.800 --> 00:37:52.120
And then the last example,
the crashes in native code.

00:37:52.160 --> 00:37:53.230
We used GDB.

00:37:53.500 --> 00:37:55.670
We also looked at
Crash Reporter and the Java logs,

00:37:55.710 --> 00:37:56.700
as you just saw.

00:37:56.760 --> 00:38:00.120
But there's one more thing
relative to that last one.

00:38:00.170 --> 00:38:02.650
What if it crashed and you
didn't have a native library?

00:38:02.680 --> 00:38:05.680
What if there was no
native code on your side,

00:38:05.720 --> 00:38:06.460
if it was pure Java?

00:38:06.600 --> 00:38:09.280
Well, pure Java shouldn't crash, right?

00:38:09.490 --> 00:38:11.060
It's not supposed to crash.

00:38:11.150 --> 00:38:16.620
So sometimes you find a bug in Java,
or perhaps in the OS, below that.

00:38:16.680 --> 00:38:18.400
So what do you do in that situation?

00:38:18.400 --> 00:38:20.680
Well, you probably want to
get working right away.

00:38:20.680 --> 00:38:23.640
So the first thing you would
want to do is find a workaround,

00:38:23.640 --> 00:38:27.240
or maybe see if you can get by without
that specific piece of functionality.

00:38:27.280 --> 00:38:29.760
There's a very active
developer community out there.

00:38:29.810 --> 00:38:32.560
The Java dev mailing list is the
best way to get in touch with that.

00:38:32.590 --> 00:38:35.510
How many people here
are already on Java dev?

00:38:36.500 --> 00:38:37.700
Little less than half.

00:38:37.770 --> 00:38:39.880
Highly recommend Java Dev.

00:38:40.000 --> 00:38:42.140
You should sign up at lists.apple.com.

00:38:42.140 --> 00:38:45.060
It's a free mailing list
and very active community.

00:38:45.210 --> 00:38:47.900
They can often help you find workarounds.

00:38:47.930 --> 00:38:50.100
Apple engineers are on there.

00:38:50.140 --> 00:38:54.790
Don't consider writing to Java Dev as
being the same as logging a bug report.

00:38:56.150 --> 00:38:58.580
And if you do get a crash,
we do want you to file a bug report.

00:38:58.680 --> 00:39:00.920
And we don't want you to
just file any bug report.

00:39:00.970 --> 00:39:03.740
Part of the reason we're giving you
all these tools and techniques is so

00:39:03.740 --> 00:39:06.930
that you can file a great bug report,
which leads me to the

00:39:07.030 --> 00:39:10.070
last part of the talk,
where Tom is going to tell

00:39:10.070 --> 00:39:11.960
you how to do such a thing.

00:39:11.960 --> 00:39:13.670
Click.

00:39:13.710 --> 00:39:15.100
TOM O' Thank you.

00:39:23.550 --> 00:39:26.130
So when you find a problem that
you want to report to Apple,

00:39:26.130 --> 00:39:31.620
the best way to get that information
to Apple is to log a bug report.

00:39:31.900 --> 00:39:34.570
Apple's radar database is
the way we track hardware and

00:39:34.620 --> 00:39:38.930
software issues that come up and

00:39:40.060 --> 00:39:43.700
The best way we track hardware
and software issues that come up.

00:39:43.790 --> 00:39:48.130
As Apple developers,
your way into the radar database

00:39:48.150 --> 00:39:50.570
is through the bug reporter web
page that Barry just mentioned.

00:39:50.580 --> 00:39:54.440
He also talked about sending email to
Java devs so you can find a workaround

00:39:54.440 --> 00:39:56.860
or discuss your problem with other folks.

00:39:56.860 --> 00:40:01.940
Apple engineers are often present there,
but their presence isn't

00:40:02.090 --> 00:40:04.130
the same as filing a bug.

00:40:04.140 --> 00:40:06.790
So you need to use the
official mechanisms to get

00:40:06.790 --> 00:40:08.660
your bug report back to Apple.

00:40:09.420 --> 00:40:12.540
The crash report window that we just
saw is intended mostly for end users,

00:40:12.540 --> 00:40:15.850
though we saw how we could use it to find
out more about isolating the problem.

00:40:15.860 --> 00:40:19.520
But just clicking send report to Apple is
intended as an end user technique.

00:40:19.520 --> 00:40:23.260
You guys have more powerful techniques,
some of which we've showed you,

00:40:23.260 --> 00:40:26.300
in order to isolate the
problem further in better ways.

00:40:26.300 --> 00:40:29.030
So what's in a good bug report?

00:40:29.040 --> 00:40:32.780
There's three major areas that
characterize a great bug report.

00:40:32.780 --> 00:40:35.840
A good problem description,
clear steps to reproduce,

00:40:35.840 --> 00:40:40.600
and technical information that gives the
context for the problem that you found.

00:40:40.620 --> 00:40:42.620
We're going to go through
each of these in turn.

00:40:42.960 --> 00:40:45.400
First,
the description of the bug that you

00:40:45.660 --> 00:40:47.970
found is a summary of what happened.

00:40:48.500 --> 00:40:52.450
First, what you expected to happen,
and then what actually happened.

00:40:52.460 --> 00:40:56.380
And if you have to explain why you
expected what you expected to happen,

00:40:56.380 --> 00:40:58.060
you can spell that out too.

00:40:58.060 --> 00:41:00.460
But you want to contrast those
two things so that we know

00:41:00.460 --> 00:41:02.060
what you were really expecting.

00:41:02.060 --> 00:41:07.830
This is a modified excerpt
from a real bug report.

00:41:11.190 --> 00:41:13.780
You notice the developer has
summarized the problem by setting

00:41:13.780 --> 00:41:18.070
forth what they were doing and
what problem they ran into.

00:41:18.380 --> 00:41:20.520
And you also notice that they
referred to a screenshot,

00:41:20.600 --> 00:41:24.010
which is an invaluable piece
of information in bugs that

00:41:24.140 --> 00:41:27.680
end up being graphical,
because it really does tell

00:41:27.690 --> 00:41:29.590
the story in a great way.

00:41:30.420 --> 00:41:34.350
The second component of a great bug
report is clear steps to reproduce.

00:41:34.560 --> 00:41:38.610
You want specific step-by-step
instructions that a naive user

00:41:38.870 --> 00:41:43.180
could use to reproduce the same
situation you ran into with little

00:41:43.180 --> 00:41:47.380
or no knowledge of your product
or your particular problem domain.

00:41:47.450 --> 00:41:51.550
If those steps don't always end up
having the problem that you ran into,

00:41:51.550 --> 00:41:55.050
you should indicate approximately
how often it takes to run through

00:41:55.050 --> 00:41:57.040
those steps and hit the problem.

00:41:57.100 --> 00:41:59.800
Again, another excerpt from a bug.

00:42:02.920 --> 00:42:06.470
You notice the developer has spelled
out numbered steps of what you

00:42:06.480 --> 00:42:11.240
should do in pretty clear language,
and has also contrasted that with

00:42:11.350 --> 00:42:13.360
what the computer was responding with.

00:42:13.450 --> 00:42:16.480
And a common way to do that
is to use an ASCII art arrow,

00:42:16.570 --> 00:42:19.820
but there's plenty of other
ways to make that clear.

00:42:22.120 --> 00:42:24.740
The third area for context
of the problem that you ran

00:42:24.740 --> 00:42:27.000
into is the technical details.

00:42:27.170 --> 00:42:31.000
And this breaks down into three further
sub-areas that we'll go through.

00:42:31.000 --> 00:42:33.500
First, more detail about the failure.

00:42:33.570 --> 00:42:35.000
We saw how to capture crash logs.

00:42:35.030 --> 00:42:37.600
And in most cases,
both the Java and the native stack

00:42:37.600 --> 00:42:42.000
crawls are important here for
crashes that you run into in Java.

00:42:42.000 --> 00:42:44.990
In the cases of bugs that
do or don't involve a crash,

00:42:45.000 --> 00:42:48.400
any exceptions or messages that
end up in the console leading up

00:42:48.400 --> 00:42:52.000
to that problem are also useful
in isolating the problem further,

00:42:52.000 --> 00:42:54.000
and so you should include those.

00:42:54.410 --> 00:43:00.860
And we saw that for graphical issues,
the screenshot is an invaluable

00:43:00.860 --> 00:43:06.000
piece of information in spelling
out the story of what's going wrong.

00:43:07.460 --> 00:43:09.870
The next subcomponent of
technical details is the software

00:43:09.950 --> 00:43:11.760
configuration that you're running on.

00:43:11.810 --> 00:43:15.340
The Mac OS X version you found it on,
the Java version you were running with,

00:43:15.470 --> 00:43:16.700
both of those in detail.

00:43:16.960 --> 00:43:21.640
And if it only happens on some
Java versions or some Mac OS X versions,

00:43:21.640 --> 00:43:24.730
spelling those out and saying where
it does and doesn't happen is useful

00:43:24.730 --> 00:43:26.460
in isolating the problem further.

00:43:27.410 --> 00:43:31.260
Additionally, if you have access to
Java implementations on other platforms,

00:43:31.270 --> 00:43:35.740
contrasting the behavior of the same
steps or the same test case on those

00:43:35.800 --> 00:43:40.120
other platforms is also useful in
tracking down the problem further.

00:43:40.120 --> 00:43:44.350
In the special case of swing bugs,
saying whether the problem you see

00:43:44.440 --> 00:43:49.040
happens with the Aqua look and feel or
with the metal look and feel or both of

00:43:49.040 --> 00:43:54.600
them is useful information because those
are two different implementation paths.

00:43:56.420 --> 00:44:01.150
And another excerpt from a bug report
summarizing the software config.

00:44:04.120 --> 00:44:08.140
You notice the developers detailed
the Mac OS X and Java versions.

00:44:08.210 --> 00:44:11.540
They've regressed with a
previous version of Java to say

00:44:11.540 --> 00:44:13.330
whether it did or didn't happen.

00:44:13.730 --> 00:44:17.180
And they've even compared
with Java on another platform.

00:44:19.480 --> 00:44:23.540
You notice the developers detailed
the Mac OS X and Java versions.

00:44:23.540 --> 00:44:26.940
They've regressed with a
previous version of Java to say

00:44:26.940 --> 00:44:28.960
whether it did or didn't happen.

00:44:29.000 --> 00:44:32.580
And they've even compared
with Java on another platform.

00:44:50.400 --> 00:44:58.140
You notice the developers detailed
the Mac OS X and Java versions.

00:44:58.140 --> 00:45:04.500
They've regressed with a
previous version of Java to say

00:45:04.500 --> 00:45:08.420
whether it did or didn't happen.

00:45:08.420 --> 00:45:15.390
And they've even compared
with Java on another platform.

00:45:18.890 --> 00:45:22.370
You notice that they've compared it
with a platform where it doesn't occur,

00:45:22.450 --> 00:45:25.730
and you notice they've also referred
to the Apple System Profiler

00:45:25.730 --> 00:45:27.800
information that they captured.

00:45:27.870 --> 00:45:30.730
The Apple System Profiler can do
kind of a brain dump of the entire

00:45:30.730 --> 00:45:33.800
configuration of your machine down
to really fine levels of detail,

00:45:33.800 --> 00:45:36.390
most of which aren't usually
relevant in Java bugs,

00:45:36.390 --> 00:45:37.300
but you never know.

00:45:37.370 --> 00:45:40.900
So it doesn't hurt to throw it in,
but it's also useful just to have this

00:45:40.900 --> 00:45:44.290
brief summary of your configuration
that I described with the CPU type

00:45:44.330 --> 00:45:47.730
and monitor configuration and
other basic things like that.

00:45:56.090 --> 00:45:58.510
We're into the fourth part of the
three that I originally promised.

00:45:58.610 --> 00:46:01.580
The fourth part is great bug
reports have a test case.

00:46:01.580 --> 00:46:05.580
A test case is self-contained
steps to reproduce your problem.

00:46:05.600 --> 00:46:09.140
If we have a test case,
it means that Apple knows that they're

00:46:09.280 --> 00:46:12.410
trying to reproduce the exact same
problem that you originally found,

00:46:12.420 --> 00:46:15.170
because they're running the same test
case that you ran to show your bug.

00:46:15.220 --> 00:46:18.820
Ideally, your test case shouldn't
require user intervention.

00:46:18.820 --> 00:46:21.320
That's not always the case,
but if your test case can

00:46:21.350 --> 00:46:24.090
discover whether the bug is
present or not all by itself,

00:46:24.090 --> 00:46:25.460
that's really great.

00:46:26.000 --> 00:46:29.320
A test case that can be run from the
command line that's been whittled

00:46:29.320 --> 00:46:33.780
down to a simple public static void
main test or is in the form of a JUnit

00:46:33.780 --> 00:46:36.590
test is a great way to present that.

00:46:36.640 --> 00:46:40.950
And if you have a JUnit test that can
determine pass or fail all by itself,

00:46:41.000 --> 00:46:44.550
it may end up being put into our
regression harness internally

00:46:44.550 --> 00:46:48.000
so that we run it periodically
on upcoming builds of Java,

00:46:48.000 --> 00:46:51.200
and your test case will
live on in immortality.

00:46:53.640 --> 00:46:55.510
Here's a reference from a real bug.

00:46:55.710 --> 00:46:58.110
You notice that the person who
originally filed the triangle

00:46:58.120 --> 00:47:01.300
bug referred to a test case.

00:47:02.600 --> 00:47:05.700
So let's recap what's
in a great bug report.

00:47:05.770 --> 00:47:11.010
First, a clear description that contrasts
the actual and expected behavior.

00:47:11.210 --> 00:47:13.780
Second,
simple steps to reproduce that a naive

00:47:13.780 --> 00:47:19.540
user could go through to get to the same
situation that you originally ran into.

00:47:19.800 --> 00:47:23.080
Finally, technical details,
the crash logs that we showed

00:47:23.080 --> 00:47:26.660
you how to gather earlier,
any messages to the terminal or console,

00:47:26.660 --> 00:47:30.200
any exceptions are useful to include,
and the configuration

00:47:30.200 --> 00:47:33.680
information that we broke down,
hardware and software configuration,

00:47:33.730 --> 00:47:36.840
comparisons if you have them
with other versions of Java,

00:47:36.890 --> 00:47:39.080
Mac OS X, or even on other platforms.

00:47:39.120 --> 00:47:42.910
And the single most important
part could be the test case,

00:47:42.990 --> 00:47:46.480
the self-contained steps to reproduce
your problem that guarantees that we're

00:47:46.480 --> 00:47:48.750
talking about the same bug that you are.

00:47:51.370 --> 00:47:53.730
Getting back to the triangle bug,
the triangles draw just fine

00:47:53.730 --> 00:47:56.940
now in case you were worried.

00:47:57.010 --> 00:47:59.020
So where have we been today?

00:47:59.070 --> 00:48:02.730
We showed you techniques for doing
platform-neutral Java coding when

00:48:02.730 --> 00:48:08.430
it's possible using the APIs that are
available to you from Sun's Java that

00:48:08.530 --> 00:48:14.100
allow you to have your code work
flexibly with Java implementations

00:48:14.210 --> 00:48:16.960
on multiple platforms and work great.

00:48:17.820 --> 00:48:21.990
We showed you some bug isolation
techniques for finding and isolating

00:48:22.060 --> 00:48:25.860
problems further when you run into
them running Java on Mac OS X.

00:48:25.890 --> 00:48:28.990
And we showed you how to file an
effective bug report to get information

00:48:28.990 --> 00:48:33.400
back to Apple when you think you found
something that Apple should be aware of.

00:48:33.420 --> 00:48:37.570
Now I'd like to bring back Matt Drance,
who has some additional points.

00:48:42.910 --> 00:48:44.300
Thank you very much, Tom.

00:48:44.300 --> 00:48:47.810
So there have been a couple questions
floating around this week and

00:48:47.810 --> 00:48:51.230
in weeks past about DTS and what
DTS does and what DTS stands for.

00:48:51.230 --> 00:48:54.910
How many of you have actually logged
an incident with DTS in the past?

00:48:54.910 --> 00:48:57.130
Okay, that's a pretty good crowd.

00:48:57.270 --> 00:49:01.950
So DTS is Developer Technical Support,
and I'm going to just reiterate

00:49:01.950 --> 00:49:04.930
what Barry and Tom said,
is that the Java dev mailing

00:49:04.930 --> 00:49:07.470
list is a priceless resource.

00:49:07.480 --> 00:49:11.310
There are both Apple and non-Apple
experts on the list that reply

00:49:11.770 --> 00:49:16.300
very frequently and very rapidly,
sometimes too much frequently.

00:49:16.300 --> 00:49:19.720
I think in most of the sessions
this week we've been telling people,

00:49:19.720 --> 00:49:22.780
if you join Java dev, set up a filter,
because there's quite

00:49:22.780 --> 00:49:23.910
a bit of volume in it.

00:49:23.910 --> 00:49:26.620
But a lot of the information is very,
very useful.

00:49:28.300 --> 00:49:32.050
And if just community
conversation doesn't help you out,

00:49:32.160 --> 00:49:35.540
you can talk to DTS and send
an email to DTS@apple.com.

00:49:35.680 --> 00:49:38.860
And what DTS does is basically
we give people code-level

00:49:38.860 --> 00:49:42.300
assistance on a per-incident
basis or a per-problem basis.

00:49:42.300 --> 00:49:45.880
And that could be something as simple as,
"Hey, I read about this new

00:49:45.880 --> 00:49:46.790
API or this new feature.

00:49:46.870 --> 00:49:47.960
I don't know how to implement it.

00:49:47.960 --> 00:49:51.280
Can you guys help me understand
how this works?" Or it could be,

00:49:51.280 --> 00:49:53.650
"I have this bug,
and I don't know how to work around it,

00:49:53.650 --> 00:49:58.330
and it's critical to my application."
And we do anything in between

00:49:58.330 --> 00:50:00.740
or including those two things.

00:50:00.790 --> 00:50:05.610
Now, the reason I'm emphasizing this is
because DTS does not actually fix bugs

00:50:06.270 --> 00:50:09.480
in the JVM or in the OS anywhere else.

00:50:09.570 --> 00:50:12.310
Engineering works on the bugs,
and DTS works around them.

00:50:12.460 --> 00:50:14.900
And I wanted to emphasize
that because sometimes we get

00:50:14.900 --> 00:50:17.330
people writing in and saying,
"Okay, I bought an incident.

00:50:17.340 --> 00:50:19.910
Will you fix my bug now,
please?" And that's

00:50:20.000 --> 00:50:21.890
not really how we work.

00:50:21.950 --> 00:50:26.300
We'd like to think that we fix
your bugs even if you don't pay us.

00:50:27.160 --> 00:50:29.760
But some people out there
may be more skeptical.

00:50:29.780 --> 00:50:32.310
That's really the only
message I wanted to send.

00:50:32.480 --> 00:50:33.530
DTS is out there.

00:50:33.680 --> 00:50:36.240
There are people for Java,
there are people for printing,

00:50:36.240 --> 00:50:39.270
core graphics, sound, QuickTime,
every technology area.

00:50:39.280 --> 00:50:41.370
And I think that's about it.

00:50:43.320 --> 00:50:46.420
So, of all the things we've been
referencing this afternoon,

00:50:46.420 --> 00:50:51.480
there's obviously the disk image that's
been showing up for every talk this week.

00:50:51.720 --> 00:50:55.120
There's the Java reference library
off of the reference library home.

00:50:55.120 --> 00:50:59.170
There's a great document on general
Java 1.4 development for Mac OS X,

00:50:59.180 --> 00:51:02.620
which talks about cross-platform
issues as well as things you can do

00:51:02.620 --> 00:51:04.600
to enhance your Mac look and feel.

00:51:04.600 --> 00:51:07.640
And there's the tech note
that was cited earlier,

00:51:07.640 --> 00:51:10.680
number 2110, for identifying Java.

00:51:10.820 --> 00:51:15.010
You need to do something Mac-specific,
the best way to identify

00:51:15.010 --> 00:51:18.170
Java on Mac OS X,
as well as identifying a specific

00:51:18.170 --> 00:51:20.880
Java release on Mac OS X that has
version strings and everything.