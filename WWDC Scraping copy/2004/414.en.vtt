WEBVTT

00:00:13.900 --> 00:00:15.400
Good morning.

00:00:15.400 --> 00:00:17.400
This is session 414.

00:00:17.400 --> 00:00:23.470
And we'll get the slides in a second.

00:00:26.920 --> 00:00:29.380
My name is Richard Williamson,
and this is Taking Advantage

00:00:29.380 --> 00:00:30.790
of New Web Kit Features.

00:00:30.790 --> 00:00:34.680
And I'm going to be telling you
about some of the new features in

00:00:34.680 --> 00:00:37.390
Web Kit that we're introducing this year.

00:00:39.600 --> 00:00:41.920
Just over a year ago now,
we introduced Safari,

00:00:42.050 --> 00:00:43.640
and it's a great web browser.

00:00:43.880 --> 00:00:48.660
Millions of people are using it,
and we're pretty proud of it.

00:00:48.740 --> 00:00:53.380
But the technology behind Safari is
not just about web browsing.

00:00:55.120 --> 00:00:57.650
Already last year,
some of the system applications

00:00:57.660 --> 00:01:03.060
in OS X started to take advantage
of the technology behind Safari.

00:01:04.000 --> 00:01:06.630
And this year,
Mail.app is going one step further.

00:01:06.820 --> 00:01:11.060
Not only will it use the
Safari technology to display content,

00:01:11.210 --> 00:01:14.450
you'll be able to compose
rich HTML messages using

00:01:14.450 --> 00:01:16.310
the Safari technology.

00:01:17.050 --> 00:01:19.140
We introduced one new app this year,
the Calculator.

00:01:19.140 --> 00:01:22.050
Well, actually, a bunch of apps.

00:01:23.890 --> 00:01:31.260
The technology behind Dashboard is
the same technology behind Safari.

00:01:31.260 --> 00:01:33.460
And that technology is Web Kit.

00:01:34.780 --> 00:01:36.310
So in this session,
I'm going to talk about the

00:01:36.310 --> 00:01:38.280
new features in Web Kit,
but also I'm going to talk

00:01:38.340 --> 00:01:42.180
about what it means to use this
technology not just for browsing,

00:01:42.200 --> 00:01:44.680
but going beyond browsing.

00:01:46.270 --> 00:01:46.890
So, quick recap.

00:01:46.990 --> 00:01:48.990
What is Web Kit?

00:01:49.030 --> 00:01:52.630
It's a framework that's shipped in OS X,
and it allows you to embed web content.

00:01:52.680 --> 00:01:57.600
Obviously, HTML, images, plug-in data,
and it's highly scriptable.

00:01:57.600 --> 00:02:01.170
And this last topic is something
which I'm going to focus on

00:02:01.330 --> 00:02:03.090
quite a bit in this session.

00:02:04.540 --> 00:02:09.000
Behind me is a high-level
architecture diagram of Web Kit.

00:02:09.000 --> 00:02:13.070
The Web Kit framework actually
encapsulates the open source

00:02:13.070 --> 00:02:14.900
KHTML and KJS engines.

00:02:15.180 --> 00:02:18.250
And it's layered on top of
the App Kit for UI controls,

00:02:18.250 --> 00:02:23.360
core graphics for rendering,
and foundation for NSURL loading.

00:02:23.400 --> 00:02:28.400
And layered above the Web Kit framework
is a C API to allow Carbon applications

00:02:28.400 --> 00:02:30.480
to access this technology.

00:02:31.580 --> 00:02:35.720
Now, even though it's layered
on an open source engine,

00:02:35.790 --> 00:02:38.350
we encourage you to use the Web Kit API.

00:02:38.650 --> 00:02:40.660
You can look at the source
code in the implementation,

00:02:40.750 --> 00:02:43.850
but please implement
against the Web Kit API.

00:02:45.200 --> 00:02:46.930
Okay, what's new?

00:02:47.040 --> 00:02:52.060
Well, an awful lot is new this year,
and I'm going to cover some new API areas

00:02:52.140 --> 00:02:55.010
and also some new features in Web Kit.

00:02:56.020 --> 00:02:59.060
One new area we've added this year is
support for what we call web archives.

00:02:59.210 --> 00:03:03.950
And a web archive is simply a way
of representing both a page and its

00:03:03.950 --> 00:03:06.970
associated resources in one package.

00:03:07.940 --> 00:03:09.270
Lots of new scripting support.

00:03:09.290 --> 00:03:12.160
And some of you may have seen
some of this already in some

00:03:12.160 --> 00:03:13.140
of the dashboard sessions.

00:03:13.250 --> 00:03:17.390
Dashboard relies heavily on the new
scripting technology that we have.

00:03:18.130 --> 00:03:19.300
Editing APIs.

00:03:19.330 --> 00:03:25.240
This is a big new area in Web Kit,
and the APIs we're introducing are pretty

00:03:25.240 --> 00:03:28.980
comprehensive here to support the DOM,
the Document Object Model in Objective-C,

00:03:28.980 --> 00:03:34.670
and also to support editing
in a very Cocoa-style fashion.

00:03:35.820 --> 00:03:37.800
There's a session on Friday that
will drill down into quite

00:03:37.800 --> 00:03:39.250
some depth in the editing APIs.

00:03:39.250 --> 00:03:42.030
It was misnamed in the brochure,
and the real name should be

00:03:42.030 --> 00:03:43.540
Web Kit HTML Editing APIs.

00:03:43.540 --> 00:03:46.860
That's Friday at 10:30,
and I strongly encourage you

00:03:46.870 --> 00:03:48.490
to go attend that session.

00:03:51.000 --> 00:03:52.900
Dragging support.

00:03:52.910 --> 00:03:56.170
We had a lot of requests from
you all to override the default

00:03:56.230 --> 00:03:58.800
dragging behavior of the WebView.

00:03:58.800 --> 00:04:01.000
You can now do that with the new APIs.

00:04:01.370 --> 00:04:02.940
Plugins.

00:04:03.040 --> 00:04:06.990
We've always supported plugins,
Netscape-style plugins in Web Kit.

00:04:07.240 --> 00:04:09.560
But it's always been difficult
to write a plugin for Web Kit.

00:04:09.590 --> 00:04:11.690
So this year,
we're including everything necessary

00:04:11.800 --> 00:04:16.820
to write a Netscape plugin in the OS.

00:04:16.900 --> 00:04:18.900
We've also introduced
a new form of plugins,

00:04:18.900 --> 00:04:21.420
Cocoa plugins,
that make it vastly simpler

00:04:21.900 --> 00:04:24.450
to add a plugin for Web Kit.

00:04:25.330 --> 00:04:27.380
There's a great session
later this afternoon,

00:04:27.760 --> 00:04:29.760
session 413,
that will go into some detail

00:04:29.760 --> 00:04:35.110
about both the Cocoa plugin
API and the Netscape API.

00:04:37.200 --> 00:04:38.960
and there's many, many other tweaks.

00:04:38.960 --> 00:04:41.100
We don't really have enough
time to describe them all,

00:04:41.110 --> 00:04:44.040
but a lot of these tweaks
were inspired by you all.

00:04:44.060 --> 00:04:46.990
There's some activity on the
Web Kit SDK mailing list,

00:04:46.990 --> 00:04:49.370
and we went through that list and
we gleaned a lot of information,

00:04:49.370 --> 00:04:52.340
and there's also a lot of features
that you all have requested.

00:04:52.340 --> 00:04:55.420
We pay attention,
so if there's a feature you'd like,

00:04:55.420 --> 00:04:56.780
please let us know.

00:04:58.920 --> 00:05:02.430
So in terms of these new APIs,
I'm going to focus on just two

00:05:02.430 --> 00:05:06.960
areas in this presentation,
web archives and scripting.

00:05:06.960 --> 00:05:10.500
But before I drill down into that,
I'm going to describe some of the new

00:05:10.500 --> 00:05:12.490
features that we've added to Web Kit.

00:05:12.980 --> 00:05:17.370
We now have comprehensive
support for CSS 2.1,

00:05:17.370 --> 00:05:23.700
and we also have support for a lot
of advanced new CSS 3 features.

00:05:23.700 --> 00:05:26.140
I'm still waking up.

00:05:26.600 --> 00:05:30.570
There was a session yesterday,
Dave Haya gave, 419,

00:05:30.580 --> 00:05:34.710
that went into a lot of detail about some
of the new CSS features that we have.

00:05:34.710 --> 00:05:38.150
Even though that session has passed,
I encourage you to go and

00:05:38.150 --> 00:05:42.200
review the slides and the
DVD material for that presentation.

00:05:44.850 --> 00:05:49.650
So I talked about dragging support
at the Web Kit framework level.

00:05:49.730 --> 00:05:52.800
We also added dragging support
at the JavaScript level.

00:05:52.810 --> 00:05:57.360
What this means is that your pages
can interact with drag operations.

00:05:57.490 --> 00:05:59.510
So you can actually have
an element participate,

00:05:59.510 --> 00:06:02.050
an element on a web page
participate in a drag operation.

00:06:02.050 --> 00:06:03.800
This is a very nice feature.

00:06:03.800 --> 00:06:10.970
And the implementation of this follows
the Microsoft dragging support standards,

00:06:10.970 --> 00:06:10.970
the factor standards.

00:06:11.680 --> 00:06:12.460
Live Connect.

00:06:12.530 --> 00:06:14.390
Safari 1.2 introduced Live Connect.

00:06:14.390 --> 00:06:17.390
That's the ability to interact
between Java and JavaScript,

00:06:17.580 --> 00:06:19.790
bridging those two languages.

00:06:20.670 --> 00:06:25.200
We also introduced
XML HTTP support in Safari 1.2.

00:06:25.470 --> 00:06:29.300
This is the ability to initiate
an HTTP request from JavaScript.

00:06:29.430 --> 00:06:33.360
Very useful, for example,
if you want to dynamically add stock

00:06:33.360 --> 00:06:35.880
data from a web service to a web page.

00:06:35.880 --> 00:06:38.000
Many other applications.

00:06:38.440 --> 00:06:41.280
There was a great session that's
also been given already on Monday,

00:06:41.280 --> 00:06:44.020
but I refer you to that in the
DVD material that discussed

00:06:44.020 --> 00:06:47.670
these last three things,
dragging support, live connect,

00:06:47.670 --> 00:06:49.230
and XML HTTP request.

00:06:51.210 --> 00:06:53.810
And finally, many,
many compatibility fixes.

00:06:54.000 --> 00:06:57.200
This isn't a very glamorous topic,
but we spend a lot of time

00:06:57.200 --> 00:07:01.100
trying to make Web Kit work
with the existing web content.

00:07:01.100 --> 00:07:03.970
And believe me,
there's a lot of crazy content out there.

00:07:04.000 --> 00:07:07.200
So it takes a lot of effort
sometimes to figure out what the

00:07:07.380 --> 00:07:09.400
problem is before you even fix it.

00:07:11.730 --> 00:07:15.000
So in addition to pushing
supported in Safari,

00:07:15.000 --> 00:07:18.380
we've added some features
that go beyond the standards.

00:07:18.620 --> 00:07:23.650
Many of these features were inspired
by Safari RSS and Dashboard.

00:07:24.020 --> 00:07:26.650
They're things that we wanted
to do that you couldn't quite

00:07:26.650 --> 00:07:29.370
do with existing standards.

00:07:29.580 --> 00:07:31.660
One of those things is image compositing.

00:07:31.720 --> 00:07:35.310
What this will allow you to do is
on the image tag on an HTML page,

00:07:35.410 --> 00:07:38.500
specify a composite operator.

00:07:38.500 --> 00:07:41.690
And for those of you that don't
know what composite operators are,

00:07:41.690 --> 00:07:46.570
it's the ability to take advantage
of the alpha channel in an image when

00:07:46.570 --> 00:07:49.270
you blip that image into a surface.

00:07:49.620 --> 00:07:52.260
So all of the power of the
composite operations that are

00:07:52.260 --> 00:07:55.810
provided by CG core graphics are
now available to you in web pages.

00:07:58.160 --> 00:08:02.880
We added a few CSS extensions
to support the Flexbox model.

00:08:03.010 --> 00:08:05.250
This is used in Safari RSS.

00:08:05.500 --> 00:08:08.590
There are also a few other
things that we've added that

00:08:08.590 --> 00:08:10.510
you can use in your web pages.

00:08:11.050 --> 00:08:13.710
A couple of new input elements
that are also in Safari RSS,

00:08:13.860 --> 00:08:16.400
the slider widget,
so you can actually have a slider

00:08:16.400 --> 00:08:20.040
that will provide range values,
and a search field,

00:08:20.410 --> 00:08:22.390
both very nice features.

00:08:23.110 --> 00:08:25.760
And finally, the Canvas element.

00:08:25.760 --> 00:08:29.980
So we found that we wanted to dynamically
draw into content on a web page.

00:08:30.000 --> 00:08:32.500
You can't do that with anything
that's out there that's a standard.

00:08:32.630 --> 00:08:35.790
So we introduced this new
element that will support that.

00:08:36.510 --> 00:08:39.370
After talking about the new API in depth,
I'm going to drill down some

00:08:39.380 --> 00:08:42.800
more on the Canvas element and
show you some examples of that.

00:08:42.810 --> 00:08:47.400
So let's get into it and talk
about the Web Archive API.

00:08:50.900 --> 00:08:54.490
Well, a web page is a lot more than
just the initial HTML page that

00:08:54.490 --> 00:08:57.620
you use to lay out your document.

00:08:57.770 --> 00:09:02.620
It's also the associated resource data,
images, JavaScript, and CSS.

00:09:02.670 --> 00:09:06.970
So Web Archive is all of those
things collectively put together.

00:09:07.070 --> 00:09:11.120
We represent resources by a new class,
Web Resource,

00:09:11.170 --> 00:09:14.410
and the entire thing by a new class,
the Web Archive.

00:09:14.970 --> 00:09:18.340
The on-disk format of a web
archive is a single file,

00:09:18.340 --> 00:09:20.810
a single binary file,
which makes it very convenient

00:09:20.880 --> 00:09:22.960
to move these things around.

00:09:23.610 --> 00:09:26.050
There's also an in-memory format,
a pasteboard format,

00:09:26.220 --> 00:09:27.710
that is used to facilitate editing.

00:09:27.770 --> 00:09:30.480
So, for example,
if I have two web views and I make a

00:09:30.480 --> 00:09:33.640
selection in one web view and drag that
to another web view that's editable,

00:09:33.640 --> 00:09:36.330
the pasteboard representation
will be a web archive.

00:09:36.330 --> 00:09:40.330
So this facilitates editing.

00:09:41.950 --> 00:09:44.770
So you typically don't create
a web archive directly.

00:09:44.900 --> 00:09:50.020
Instead,
you have an existing web page that

00:09:50.020 --> 00:09:52.700
you create a web archive from,
or alternatively,

00:09:52.700 --> 00:09:56.170
an existing selection that
you create a web archive from.

00:09:56.750 --> 00:09:59.590
Once you have a web archive,
it's really simple to take that archive

00:09:59.590 --> 00:10:04.690
and load it into a web view or use
it to replace a current selection.

00:10:05.630 --> 00:10:07.520
So what does the code
look like to do this?

00:10:07.550 --> 00:10:08.810
Very straightforward.

00:10:09.010 --> 00:10:11.140
For those of you that are
familiar with Web Kit,

00:10:11.150 --> 00:10:14.780
this will look very familiar.

00:10:15.210 --> 00:10:17.600
We get the mainframe of the WebView,
we get the data source

00:10:17.600 --> 00:10:19.990
associated with the frame,
and then we ask it to

00:10:19.990 --> 00:10:21.660
create a web archive.

00:10:21.740 --> 00:10:23.510
That's all it takes.

00:10:24.400 --> 00:10:26.160
created a web archive from a selection.

00:10:26.160 --> 00:10:28.910
You get the selected DOM range,
and you ask that.

00:10:28.910 --> 00:10:30.300
Give me a web archive.

00:10:30.350 --> 00:10:32.800
Now, that second method,
that selected DOM range,

00:10:32.800 --> 00:10:35.600
is a new method that we're
introducing as part of the DOM API.

00:10:35.600 --> 00:10:42.250
And again, I encourage you to attend
Friday's session to learn

00:10:42.250 --> 00:10:42.250
more about that new DOM API.

00:10:43.580 --> 00:10:48.180
So once I have a web archive,
how do I get it into the page?

00:10:48.180 --> 00:10:51.340
The existing methods to get content
into a web view look like this.

00:10:51.440 --> 00:10:54.740
Load request,
that takes an NSURL request,

00:10:54.900 --> 00:10:58.300
and we'll go and retrieve the
data and put it into the web view.

00:10:58.400 --> 00:10:59.470
Or load HTML string.

00:10:59.660 --> 00:11:04.420
This will actually take an HTML snippet
and stick it into a web view.

00:11:05.000 --> 00:11:06.660
The API looks like this,
very much what you would

00:11:06.660 --> 00:11:07.890
expect to load a web archive.

00:11:08.090 --> 00:11:09.650
Load archive,
and you pass in the archive.

00:11:09.650 --> 00:11:12.390
Alternatively,
you can replace the current

00:11:12.390 --> 00:11:13.900
selection like this.

00:11:13.900 --> 00:11:15.130
Replace selection with archive.

00:11:15.140 --> 00:11:21.530
Okay, to really drive this point home,
let me do a quick demo.

00:11:26.570 --> 00:11:30.310
So there's a new way of saving a
page in Safari that takes advantage

00:11:30.310 --> 00:11:31.660
of the Web Archive feature.

00:11:31.660 --> 00:11:35.770
I can either save a page as raw source,
which I'll do here.

00:11:37.710 --> 00:11:42.620
Go ahead and save that
in my documents folder.

00:11:42.780 --> 00:11:45.310
All I can save is a web archive.

00:11:56.000 --> 00:12:16.000
[Transcript missing]

00:12:20.200 --> 00:12:34.980
Let's go ahead and load the Web Archive.

00:12:34.980 --> 00:12:34.980
Much more like what you would expect.

00:12:34.980 --> 00:12:34.980
So this is a great way --

00:12:38.920 --> 00:12:42.580
This is a great way in your applications
if you want to create content that can

00:12:42.590 --> 00:12:46.230
efficiently be packaged and loaded,
you can create web archives and include

00:12:46.230 --> 00:12:48.290
them in your application bundles.

00:12:48.370 --> 00:12:50.290
Back to the slides, please.

00:12:54.650 --> 00:12:57.780
Okay, how about some stuff that can
really help you build a good widget?

00:12:58.030 --> 00:13:00.320
That's what we're going
to talk about now.

00:13:00.420 --> 00:13:02.410
But first, a little bit of homework.

00:13:02.460 --> 00:13:04.390
There's always homework.

00:13:05.260 --> 00:13:09.330
I'm going to talk about scripting
in quite some depth here.

00:13:09.500 --> 00:13:10.580
What do I mean by scripting?

00:13:10.790 --> 00:13:12.870
We've had JavaScript for a long time.

00:13:12.960 --> 00:13:15.760
We all know about
JavaScript on web pages.

00:13:15.830 --> 00:13:19.700
What I'm going to focus on in this
discussion is scripting in the context

00:13:19.720 --> 00:13:22.410
of binding JavaScript to native code.

00:13:22.540 --> 00:13:24.980
So that I can message from
JavaScript into native code

00:13:25.210 --> 00:13:29.470
and in the other direction,
message JavaScript from native code.

00:13:30.600 --> 00:13:33.780
Specifically, what I mean by native code
is a chunk of code like this.

00:13:33.850 --> 00:13:37.030
This is some Objective-C code that
wants to call into JavaScript.

00:13:37.110 --> 00:13:40.030
It wants to invoke this function
set image in JavaScript.

00:13:40.040 --> 00:13:43.720
Alternatively,
I could have a hunk of JavaScript code

00:13:43.720 --> 00:13:47.830
like this that wants to call
into an Objective-C instance.

00:13:47.870 --> 00:13:49.720
In this case, an address book object.

00:13:49.720 --> 00:13:51.750
I'm going to get some
address book records.

00:13:54.460 --> 00:13:58.730
So when we talk about scripting,
it's really how do we bind native

00:13:58.730 --> 00:14:02.100
code to JavaScript in Objective-C.

00:14:02.660 --> 00:14:07.700
We've also introduced support
for binding JavaScript to C.

00:14:07.700 --> 00:14:09.000
You don't have to
implement in Objective-C.

00:14:09.000 --> 00:14:10.680
You could do this in C, too.

00:14:10.780 --> 00:14:14.060
And this is really useful for plugins,
in particular,

00:14:14.120 --> 00:14:18.080
existing Netscape plugins that
aren't implemented in Cocoa.

00:14:19.530 --> 00:14:21.450
I'm going to talk about
the Objective-C to

00:14:21.490 --> 00:14:23.860
JavaScript bridging in this session.

00:14:24.100 --> 00:14:27.580
The plug-in session this afternoon
is going to describe in more detail

00:14:27.620 --> 00:14:29.410
the C bindings to JavaScript.

00:14:32.580 --> 00:14:38.440
First, let's talk about calling
JavaScript from Objective-C.

00:14:38.470 --> 00:14:42.600
So JavaScript objects in
Objective-C are represented by

00:14:42.600 --> 00:14:44.460
what we call a WebScript object.

00:14:44.560 --> 00:14:49.350
And a WebScript object is an
Objective-C class that has methods

00:14:49.470 --> 00:14:54.640
to allow you to call functions
and get and set properties on the

00:14:54.640 --> 00:14:54.640
corresponding JavaScript instance.

00:14:55.730 --> 00:14:58.400
How do you get to the
JavaScript interpreter?

00:14:58.400 --> 00:14:59.420
What is the root?

00:14:59.560 --> 00:15:02.000
How do you get that hook into
the JavaScript interpreter?

00:15:02.200 --> 00:15:04.000
Well, it's a JavaScript window object.

00:15:04.050 --> 00:15:07.090
And the JavaScript window object
in Objective-C corresponds to

00:15:07.110 --> 00:15:10.820
the window object that is the
root object on your web pages.

00:15:10.820 --> 00:15:17.990
And there's a new method on WebView,
Windows Script Object,

00:15:17.990 --> 00:15:17.990
that gets you that initial
hook into a web page.

00:15:19.400 --> 00:15:20.780
Here's an example of
how you could use it.

00:15:20.920 --> 00:15:25.860
Very simply, to get the location.href
property from a web page.

00:15:25.970 --> 00:15:29.740
So in this case, I'm asking the WebView,
give me the Windows script object,

00:15:29.850 --> 00:15:32.750
and then give me your location property,
which is an object, JavaScript,

00:15:32.750 --> 00:15:33.920
WebScript object again.

00:15:33.920 --> 00:15:39.580
And then I ask that object,
give me the href property.

00:15:39.580 --> 00:15:39.580
It's as simple as that.

00:15:40.340 --> 00:15:42.640
There's an alternative
method to do the same thing.

00:15:42.680 --> 00:15:46.070
I can take a little chunk of
JavaScript and evaluate that on

00:15:46.140 --> 00:15:47.890
a particular WebScript object.

00:15:48.060 --> 00:15:51.020
In this case,
I'm evaluating location.href

00:15:51.070 --> 00:15:53.160
on the window WebScript object.

00:15:53.320 --> 00:15:55.970
These two mechanisms are equivalent.

00:15:58.070 --> 00:16:02.180
How do I invoke that
JavaScript function from Objective-C?

00:16:02.180 --> 00:16:04.880
Well, first,
I get the WinDescript object again,

00:16:04.880 --> 00:16:08.170
then I create an array that
represents the arguments that I'm

00:16:08.290 --> 00:16:09.880
going to pass into JavaScript.

00:16:09.880 --> 00:16:13.100
In this case,
it's just a single element in the array,

00:16:13.100 --> 00:16:16.900
the name of an image that
I'm going to pass to @image.

00:16:16.900 --> 00:16:20.610
And then I invoke the JavaScript function
by calling call_webscript_method

00:16:20.630 --> 00:16:23.060
with the name of the function
@image and the arguments.

00:16:23.060 --> 00:16:25.660
Again, alternatively,
I can use a snippet of

00:16:25.660 --> 00:16:27.510
JavaScript to do the same thing.

00:16:27.780 --> 00:16:30.190
So in this case, add image.

00:16:30.400 --> 00:16:32.500
Again,
these two mechanisms are equivalent.

00:16:32.700 --> 00:16:36.570
Depending upon your usage patterns,
you can use one or the other.

00:16:38.700 --> 00:16:41.190
What kinds of things can
I pass to and from JavaScript?

00:16:41.350 --> 00:16:44.200
Well,
you can pass any object to JavaScript,

00:16:44.260 --> 00:16:46.260
any Objective-C object.

00:16:46.310 --> 00:16:48.700
NSStrings and NSNumbers are
treated specially.

00:16:48.700 --> 00:16:52.140
An NSString is converted
to a string in JavaScript.

00:16:52.290 --> 00:16:56.100
An NSNumber is converted
to a number in JavaScript.

00:16:56.580 --> 00:16:58.220
: Web Script Objects.

00:16:58.220 --> 00:17:01.510
Again,
the Web Script Object represents the

00:17:01.510 --> 00:17:04.230
JavaScript Object in Objective-C.

00:17:04.270 --> 00:17:07.610
When you pass one of
these back to JavaScript,

00:17:07.660 --> 00:17:11.310
it becomes unwrapped and
you have a reference to the

00:17:11.310 --> 00:17:13.840
original JavaScript Object.

00:17:14.710 --> 00:17:19.970
All other kinds of Objective-C instances
are represented by a proxy in JavaScript.

00:17:21.060 --> 00:17:25.670
Here's a summary of the type matching
between JavaScript and Objective-C when

00:17:25.670 --> 00:17:27.990
calling JavaScript from Objective-C.

00:17:28.120 --> 00:17:31.000
NSString, String, NSNumbers,
mapped to a number.

00:17:31.000 --> 00:17:34.850
Now, an NSArray is a special case.

00:17:35.080 --> 00:17:40.000
Arrays in JavaScript are strange,
flexible, but strange beasts.

00:17:40.000 --> 00:17:43.000
You can have sparse arrays,
you can have associative arrays,

00:17:43.000 --> 00:17:43.980
and it's all the same object.

00:17:44.020 --> 00:17:47.000
NSArrays are much simpler,
straightforward arrays,

00:17:47.000 --> 00:17:49.910
but there isn't a one-to-one
correspondence between a

00:17:49.910 --> 00:17:52.000
JavaScript array and an NSArray.

00:17:52.010 --> 00:17:55.980
The array you get in JavaScript is
read-only and limited.

00:17:56.120 --> 00:17:58.420
You can't use it like
an associative array,

00:17:58.480 --> 00:18:01.190
but you can access the
elements positionally.

00:18:01.650 --> 00:18:03.820
A Web Script object, of course,
as I've said,

00:18:03.850 --> 00:18:07.500
gets unwrapped in JavaScript and
becomes the original JavaScript object.

00:18:07.630 --> 00:18:11.170
And any other Objective-C instance
is mapped to a proxy in JavaScript.

00:18:11.290 --> 00:18:14.200
And I'll talk a little bit
more about proxies next.

00:18:15.340 --> 00:18:17.060
First, let's do a demo.

00:18:17.060 --> 00:18:20.680
And I'll do a quick demo to show you
how to write a Web Kit application

00:18:21.360 --> 00:18:31.020
to interact between Cocoa components,
Cocoa widgets, and a web page.

00:18:35.630 --> 00:18:36.760
So let's build this from scratch.

00:18:36.760 --> 00:18:40.430
I've got a fresh Xcode project here.

00:18:40.660 --> 00:18:43.850
First, let's build an .ib file.

00:18:44.100 --> 00:19:00.670
: I'm going to take the components
from the existing project and

00:19:00.670 --> 00:19:00.670
copy them in to this new project.

00:19:00.670 --> 00:19:00.670
So let's get a Nib file.

00:19:02.980 --> 00:19:08.400
Copy that into the project.

00:19:09.230 --> 00:19:09.230
And open up this nib file.

00:19:11.010 --> 00:19:14.380
So you can see here I've got
three controls that are going to

00:19:14.400 --> 00:19:15.870
specify three different images.

00:19:15.870 --> 00:19:17.370
And when I click on
one of these controls,

00:19:17.510 --> 00:19:22.170
it's going to set the content
of the web view to be the

00:19:22.170 --> 00:19:27.190
appropriate image for that button.

00:19:27.190 --> 00:19:27.190
And you'll see that

00:19:29.310 --> 00:19:32.980
The controller is just going to send
-- or the radio matrix is just going to

00:19:33.000 --> 00:19:38.250
send a message to a controller object
to pick an appropriate picture type.

00:19:40.070 --> 00:19:45.820
So let's go ahead and hide this
and pull in the code to do that.

00:19:53.300 --> 00:20:02.280
Here we go.

00:20:02.280 --> 00:20:04.020
So this code is very straightforward.

00:20:04.020 --> 00:20:06.110
It has the single method -- well,
it has two methods.

00:20:06.120 --> 00:20:07.560
I'll talk about this one first.

00:20:07.560 --> 00:20:09.380
Picture type clicked.

00:20:09.810 --> 00:20:13.200
This looks very much like the
example I showed you on the slides.

00:20:13.200 --> 00:20:16.860
We get the Windows script object,
which corresponds to the

00:20:16.890 --> 00:20:19.170
window object of the web page.

00:20:19.630 --> 00:20:23.650
Then I go ahead and call set
image with arguments that I'm

00:20:23.650 --> 00:20:28.360
constructing to set the appropriate
URL for that particular image.

00:20:28.870 --> 00:20:32.900
Let me back up a second and show you
what we do in our Wake from Nib method.

00:20:33.020 --> 00:20:37.240
What I'd like to do is load content
into that web view that represents

00:20:37.240 --> 00:20:38.800
the page that I'd like to show.

00:20:38.820 --> 00:20:42.800
So I do that by extracting a resource
out of the bundle that is a string.

00:20:42.800 --> 00:20:44.300
It's basically just a text file.

00:20:44.300 --> 00:20:47.300
I convert that to a string and
then load it into the web view.

00:20:47.300 --> 00:20:51.960
So let's take a look at the web
page that we're going to use here.

00:20:52.110 --> 00:20:54.140
Add it as a resource.

00:20:58.160 --> 00:20:59.040
Very straightforward page.

00:20:59.090 --> 00:21:00.900
It has a single JavaScript function.

00:21:01.000 --> 00:21:02.970
It's going to get the
image element by ID,

00:21:03.020 --> 00:21:06.340
and then it's going to set the
source of the image element.

00:21:06.340 --> 00:21:09.610
And this source is a URL.

00:21:10.300 --> 00:21:18.610
The final thing I need
to do is add some images.

00:21:18.610 --> 00:21:18.610
Picture of a fire.

00:21:18.610 --> 00:21:18.610
Let's add that.

00:21:35.790 --> 00:21:35.790
And a picture of the Grand Canyon and
a picture of Napa Valley.

00:21:35.790 --> 00:21:35.790
Go ahead and add those.

00:21:35.790 --> 00:21:35.790
And then let's build
this project and run it.

00:21:48.240 --> 00:21:50.200
Okay, so here's my application.

00:21:50.210 --> 00:21:53.040
Now, when I click on Napa,
what actually happened there is I sent

00:21:53.040 --> 00:21:57.470
a message from this Objective-C control
to my Objective-C controller instance,

00:21:57.510 --> 00:22:00.400
which in turn sent a message to
JavaScript to load the Napa image.

00:22:00.400 --> 00:22:03.100
Click on the fire button.

00:22:03.180 --> 00:22:10.020
It's sending the fire URL to
JavaScript and Grand Canyon.

00:22:15.800 --> 00:22:16.800
Back to the slides.

00:22:16.800 --> 00:22:21.240
Okay.

00:22:21.240 --> 00:22:22.720
What about the other direction?

00:22:22.840 --> 00:22:27.630
I have some JavaScript code that
wants to call into Objective-C.

00:22:28.030 --> 00:22:30.050
Well, this is where proxies come in.

00:22:30.120 --> 00:22:35.900
If you have an Objective-C object that
you want to have appear in JavaScript,

00:22:35.900 --> 00:22:39.400
we'll represent that object by proxy
and we'll automatically reflect the

00:22:39.480 --> 00:22:45.050
methods and the properties of the
Objective-C instance in JavaScript.

00:22:45.490 --> 00:22:48.010
And this is an opt-- we have an
opt-in policy for the methods

00:22:48.240 --> 00:22:49.650
that we expose to JavaScript.

00:22:49.800 --> 00:22:52.900
What that means is you have to tell us,
"I want this particular method

00:22:52.900 --> 00:22:56.470
or this particular property
to appear in JavaScript."

00:22:58.200 --> 00:23:01.180
And the kinds of things that
you can expose to JavaScript are

00:23:01.230 --> 00:23:02.620
any Objective-C object.

00:23:02.620 --> 00:23:05.600
You can expose methods that
take scalar parameters.

00:23:05.740 --> 00:23:10.090
Scalars are in some floats, of course,
and other kinds of scalar types.

00:23:10.240 --> 00:23:13.200
You can also expose
scalar instance variables.

00:23:13.200 --> 00:23:16.600
What you can't do is expose structures
or pointers to arbitrary memory.

00:23:16.600 --> 00:23:20.590
You can expose a pointer to an object,
but no other kinds of pointer types.

00:23:22.330 --> 00:23:24.960
Okay, so again,
let's say I have this example class,

00:23:24.960 --> 00:23:26.910
an address book class,
and it has these methods,

00:23:26.910 --> 00:23:29.020
get a shared instance,
get a composite name,

00:23:29.020 --> 00:23:31.330
the first and the last name,
and a way to position the

00:23:31.330 --> 00:23:34.300
cursor in the address book,
position, card, and index.

00:23:35.920 --> 00:23:37.380
: I want to expose this to JavaScript.

00:23:37.440 --> 00:23:38.040
How do I do it?

00:23:38.040 --> 00:23:40.800
Well, I get the instance,
the shared instance,

00:23:41.000 --> 00:23:43.960
and then I simply set the
Objective-C object as a

00:23:44.000 --> 00:23:45.560
property on the Window object.

00:23:45.560 --> 00:23:48.430
I get the Window script
object and call setValueForKey

00:23:48.530 --> 00:23:49.960
with the name address book.

00:23:50.060 --> 00:23:52.670
That name is the name that will
appear in your JavaScript code

00:23:52.670 --> 00:23:54.210
for this particular property.

00:23:55.150 --> 00:23:57.330
: So from JavaScript,
if I wanted to write something

00:23:57.350 --> 00:24:00.300
to retrieve the first
name in my address book,

00:24:00.300 --> 00:24:01.610
this is how I do it.

00:24:01.850 --> 00:24:04.460
Window.addressBook gets
me the Window object,

00:24:04.520 --> 00:24:08.700
and I call positionCardAtIndex to
position it at the first record,

00:24:09.010 --> 00:24:12.210
and then I call compositeName.

00:24:12.210 --> 00:24:12.210
Simple as that.

00:24:13.230 --> 00:24:17.290
For those of you paying attention,
that last slide had something

00:24:17.290 --> 00:24:19.220
that was a little bit strange,
that underbar at the

00:24:19.220 --> 00:24:20.560
end of that method name.

00:24:20.560 --> 00:24:24.590
What's that all about?

00:24:24.590 --> 00:24:24.590
It's kind of ugly.

00:24:25.340 --> 00:24:28.890
Well, by default,
we have to map Objective-C names

00:24:29.020 --> 00:24:31.460
to JavaScript names,
and Objective-C names have colons

00:24:31.460 --> 00:24:33.570
after each or before each parameter.

00:24:33.850 --> 00:24:36.590
So a colon gets mapped to an underbar.

00:24:36.740 --> 00:24:42.170
If you want to override the default
name of an Objective-C method

00:24:42.190 --> 00:24:44.680
that gets mapped to JavaScript,
you can implement this

00:24:44.690 --> 00:24:48.000
method on your class,
the class that's exported to JavaScript.

00:24:48.280 --> 00:24:50.000
Webscript name for selector.

00:24:50.000 --> 00:24:54.150
In this case,
we take a selector in and we return the

00:24:54.150 --> 00:24:56.400
name that will be exposed to JavaScript.

00:24:56.640 --> 00:25:00.600
I'm going to use position card
at index with no underbar.

00:25:00.720 --> 00:25:04.820
Now my JavaScript code
will look like this.

00:25:04.820 --> 00:25:04.820
Position card at index.

00:25:06.950 --> 00:25:10.800
Okay, so in practice,
you typically want to expose

00:25:11.110 --> 00:25:16.350
functionality into JavaScript very early
on in the construction of your page.

00:25:16.350 --> 00:25:19.700
So you might have JavaScript code
in the head section of your page,

00:25:19.700 --> 00:25:23.120
and that JavaScript code
needs to access functionality,

00:25:23.230 --> 00:25:24.700
native functionality.

00:25:26.320 --> 00:25:29.810
So when do you actually publish
your objects into JavaScript?

00:25:29.810 --> 00:25:32.470
Well, you can do that really early on.

00:25:32.470 --> 00:25:35.180
We've added a new web
frame load delegate method,

00:25:35.180 --> 00:25:37.740
which is Windows Script Object Available.

00:25:37.740 --> 00:25:41.620
And this method will be called before
we do any processing on the page.

00:25:41.620 --> 00:25:45.550
So you can insert your functionality
into the JavaScript interpreter before

00:25:45.550 --> 00:25:48.220
we evaluate any JavaScript on the page.

00:25:48.220 --> 00:25:52.350
So in this case, I'm going to insert the
address book instance into the

00:25:52.580 --> 00:25:54.970
JavaScript namespace very early on.

00:25:56.420 --> 00:26:00.100
Okay, to summarize the time
matching in this direction,

00:26:00.100 --> 00:26:03.880
a JavaScript string is
mapped to an NSString.

00:26:03.940 --> 00:26:07.210
A JavaScript number is
mapped to an NSNumber.

00:26:08.160 --> 00:26:12.140
All other kinds of JavaScript objects,
including JavaScript arrays,

00:26:12.150 --> 00:26:15.760
are mapped to WebScript objects,
and JavaScript proxies,

00:26:15.790 --> 00:26:23.930
or an Objective-C proxy in JavaScript,
when it's passed back to Objective-C,

00:26:23.930 --> 00:26:23.930
is represented by the
original Objective-C instance.

00:26:24.370 --> 00:26:26.540
Okay, let's do a demo in this direction.

00:26:26.660 --> 00:26:29.930
And what I'm going to show you is a demo

00:26:30.060 --> 00:26:34.980
To dynamically construct a web page
using the records from my address book.

00:26:34.980 --> 00:26:39.980
Let's close this project.

00:27:00.390 --> 00:27:00.390
And again, we'll build this from scratch
to show you how simple this is.

00:27:00.390 --> 00:27:00.390
And I've built it already,
so it's not really from scratch, but --

00:27:01.670 --> 00:27:03.950
So first thing,
we'll copy the Nib file again

00:27:04.200 --> 00:27:07.870
for this project into Xcode.

00:27:11.070 --> 00:27:13.340
And this Nib file is
really straightforward.

00:27:13.440 --> 00:27:16.270
It's just a single
window with a web view.

00:27:16.390 --> 00:27:18.910
Now,
one thing that we've done here is we've

00:27:18.910 --> 00:27:23.520
set up the frame load delegate of the
web view to be the controller instance.

00:27:23.520 --> 00:27:26.160
So this is the instance that
will receive that message,

00:27:26.280 --> 00:27:33.010
"Window script object available."
So let's go ahead and go into Xcode.

00:27:44.490 --> 00:27:44.490
Let's take a look at the source code.

00:27:44.490 --> 00:27:44.490
Well, actually,
first let me show you the address

00:27:44.490 --> 00:27:44.490
book class that we'll be exposing.

00:27:52.860 --> 00:27:56.000
So it's a pretty simple
object with a shared instance.

00:27:56.040 --> 00:27:59.110
It implements two methods that we -- or
two or three methods that we care about.

00:27:59.120 --> 00:28:00.950
Composite name.

00:28:01.080 --> 00:28:05.620
This will return the name of one
of my contacts in my address book,

00:28:05.620 --> 00:28:08.760
a way to position the
cursor in the address book,

00:28:08.760 --> 00:28:11.280
and a way to get the number of cards.

00:28:11.350 --> 00:28:16.840
We're actually using the address book
framework here to download my entire

00:28:16.840 --> 00:28:19.640
address book into a simple NSArray.

00:28:19.640 --> 00:28:19.670
That's how we're going to get the data.

00:28:20.270 --> 00:28:23.640
There are a few things that
are relevant to this demo.

00:28:23.750 --> 00:28:25.520
Webscript name for selector.

00:28:25.660 --> 00:28:31.010
This is how we map the name position card
at index colon to position card at index.

00:28:32.560 --> 00:28:36.070
And this method is the method that
we implement to expose the methods.

00:28:36.080 --> 00:28:39.740
This says, yes, I want these methods
available in JavaScript.

00:28:39.840 --> 00:28:42.090
And you have to implement this method.

00:28:42.970 --> 00:28:46.500
If you didn't implement this method,
or if you returned no to this method,

00:28:46.760 --> 00:28:49.540
every single method of your
Objective-C object would be exposed,

00:28:49.620 --> 00:28:51.310
including things like Dialog.

00:28:51.430 --> 00:28:58.830
And it doesn't make a lot of sense
to call Dialog from JavaScript.

00:28:58.870 --> 00:29:01.580
Let's add the controller
instance source code.

00:29:06.200 --> 00:29:08.700
This looks pretty similar
to the previous demo.

00:29:08.700 --> 00:29:11.830
I'm going to extract some content,
HTML content,

00:29:11.910 --> 00:29:14.960
out of the application bundle.

00:29:14.960 --> 00:29:18.940
And I'm going to set that content
as the HTML of the web frame

00:29:18.940 --> 00:29:21.110
in my Awake from Nib method.

00:29:21.370 --> 00:29:24.600
Now, very simply,
in the frame load delegate method,

00:29:24.690 --> 00:29:28.640
I'm going to set the address
book as the address book

00:29:28.640 --> 00:29:29.780
property of the window object.

00:29:29.800 --> 00:29:33.150
So I need to do one
additional thing here,

00:29:33.190 --> 00:29:36.590
and that is add the
address book framework.

00:29:43.200 --> 00:29:45.220
One additional thing, too,
I have to copy over the

00:29:45.220 --> 00:29:46.180
source for the page.

00:29:46.210 --> 00:29:48.380
Let's take a look at that.

00:29:54.710 --> 00:29:57.150
So this is a pretty simple page.

00:29:57.440 --> 00:30:00.260
Initially, it has an empty body.

00:30:00.520 --> 00:30:01.520
There's no content in the page.

00:30:01.520 --> 00:30:05.130
We're going to dynamically
construct the entire page,

00:30:05.290 --> 00:30:08.990
and that's going to be done
in GetContacts on LoadHandler.

00:30:09.000 --> 00:30:11.630
And this simply accesses the
address book instance that

00:30:11.630 --> 00:30:14.890
we've exported to JavaScript,
gets a number of cards,

00:30:14.890 --> 00:30:18.660
and then iterates over the cards,
getting the name of each

00:30:18.700 --> 00:30:19.940
record in the address book.

00:30:19.940 --> 00:30:23.790
And then it creates a div and
adds that to the document.

00:30:23.800 --> 00:30:26.420
Let's go ahead and build and run this.

00:30:32.920 --> 00:30:41.520
There we go.

00:30:41.790 --> 00:30:41.790
Let's pull up the address book and
make sure that these records match.

00:30:41.790 --> 00:30:41.790
Whoops.

00:30:41.790 --> 00:30:41.790
Phone number's in there.

00:30:42.670 --> 00:30:45.850
All of the records in the
address book match the

00:30:45.850 --> 00:30:48.800
dynamically constructed web page.

00:30:54.700 --> 00:30:56.190
So it's really simple to do this stuff.

00:30:56.280 --> 00:30:58.750
If you have native functionality
and you want to get into JavaScript,

00:30:58.750 --> 00:31:00.060
it's very straightforward.

00:31:00.060 --> 00:31:01.990
And I think there's going to
be a lot of synergy between the

00:31:01.990 --> 00:31:03.900
Cocoa frameworks and this technology.

00:31:03.900 --> 00:31:11.380
So, for example,
Core Data is going to really allow

00:31:11.380 --> 00:31:12.930
a lot of interesting applications
that use web pages as front

00:31:12.930 --> 00:31:12.930
end to relational databases.

00:31:14.250 --> 00:31:18.140
One last topic on scripting,
and that's the DOM.

00:31:18.470 --> 00:31:23.020
Well, we've introduced a significant
new set of Objective-C APIs to

00:31:23.090 --> 00:31:25.700
expose the DOM in Objective-C.

00:31:25.700 --> 00:31:28.540
Now, just a quick recap,
the DOM is the document

00:31:28.580 --> 00:31:31.360
object model of a web page,
and there's a set of

00:31:31.360 --> 00:31:35.620
standardized APIs from the
W3C that define the DOM API,

00:31:35.690 --> 00:31:39.460
and we have a mapping of
that API in Objective-C.

00:31:40.320 --> 00:31:41.900
Now,
if I get a DOM object in Objective-C,

00:31:41.980 --> 00:31:43.770
what does that mean
in terms of scripting?

00:31:43.780 --> 00:31:48.180
Well, all DOM objects inherit
from WebScript object,

00:31:48.180 --> 00:31:51.970
so that means if you have a DOM object,
it's inherently scriptable.

00:31:54.420 --> 00:31:57.300
Let me have another call out
to the session of Friday.

00:31:57.420 --> 00:31:58.940
Again,
that's going to be a great session.

00:31:58.940 --> 00:32:00.260
It talks about the DOM API in detail.

00:32:00.260 --> 00:32:04.210
But let me show you a quick
example of how you would do this.

00:32:04.910 --> 00:32:07.880
There's a new method on Webframe
to get the DOM document.

00:32:07.920 --> 00:32:11.900
That's the document object
that represents your page.

00:32:12.540 --> 00:32:15.000
And you can evaluate WebScript on it,
just as you can any

00:32:15.000 --> 00:32:16.040
other WebScript object.

00:32:16.080 --> 00:32:19.950
In this case,
I'm going to call getElementById to get

00:32:19.950 --> 00:32:22.920
the element with the ID context div.

00:32:23.020 --> 00:32:25.830
This is equivalent to
the Objective-C method,

00:32:26.040 --> 00:32:27.050
getElementById.

00:32:27.300 --> 00:32:30.820
getElementById is a new method in
the DOM API that we're introducing.

00:32:30.820 --> 00:32:32.710
These two mechanisms are equivalent.

00:32:32.800 --> 00:32:34.510
So why would you use one over the other?

00:32:34.510 --> 00:32:37.850
Well, it's much more efficient to use
the Objective-C API directly.

00:32:37.920 --> 00:32:41.740
So, for example, if you're doing things
that iterate over a tree,

00:32:41.900 --> 00:32:45.110
it's much more efficient to use the
getElementById if you're going to scan

00:32:45.110 --> 00:32:47.140
the entire document for an element,
say.

00:32:47.140 --> 00:32:51.450
On the other hand, if you're doing stuff
dynamically with JavaScript,

00:32:51.610 --> 00:32:54.310
the first method is appropriate.

00:32:55.350 --> 00:32:57.970
So there's a lot of flexibility
in the scripting API.

00:32:57.970 --> 00:33:00.510
We think it's going to give
you a lot of new capabilities

00:33:00.910 --> 00:33:02.900
that are pretty significant.

00:33:02.960 --> 00:33:05.910
Okay, finally,
last feature that we're going

00:33:05.910 --> 00:33:07.580
to discuss in some detail.

00:33:07.830 --> 00:33:12.810
The Canvas Element.

00:33:12.810 --> 00:33:12.810
When we were putting
together the dashboard,

00:33:13.000 --> 00:33:15.850
We came to the conclusion pretty quickly
there were some things we wanted to

00:33:15.850 --> 00:33:20.600
do that we just couldn't do in the
dashboard with existing HTML technology.

00:33:20.600 --> 00:33:26.860
One of those things was doing
procedural rendering into a gadget.

00:33:27.490 --> 00:33:31.250
We introduced the
Canvas element to support that.

00:33:31.250 --> 00:33:35.780
What it allows you to do is to draw
into an HTML element on a page.

00:33:35.880 --> 00:33:39.500
Specifically,
you draw into a page using a context.

00:33:39.620 --> 00:33:43.570
We've created a 2D context that
allows you to do 2D drawing

00:33:43.570 --> 00:33:46.140
operations into a canvas element.

00:33:46.290 --> 00:33:48.730
The canvas element is treated
very much like the image element.

00:33:48.900 --> 00:33:52.300
By default,
it's a replaced inline element,

00:33:52.300 --> 00:33:56.210
which means it flows just
like an image on a page.

00:33:58.020 --> 00:34:00.560
And because the context is
backed by Core graphics,

00:34:00.610 --> 00:34:02.900
you have all of the power of
Core graphics in terms of the

00:34:02.910 --> 00:34:07.280
rendering capabilities into a canvas,
which means it's hardware accelerated

00:34:07.340 --> 00:34:09.350
if you have the appropriate hardware.

00:34:10.000 --> 00:34:18.100
[Transcript missing]

00:34:19.400 --> 00:34:21.820
So specifically,
the drawing operations that we expose

00:34:21.820 --> 00:34:25.360
are the same drawing operations
that you can do with a CG context.

00:34:25.480 --> 00:34:28.690
You can construct arbitrary paths,
including curves.

00:34:28.800 --> 00:34:30.620
You can fill and stroke those paths.

00:34:30.810 --> 00:34:32.000
You can composite images.

00:34:32.000 --> 00:34:35.870
And you have control over the
transparency levels and the compositing

00:34:35.880 --> 00:34:37.690
operation at the global level.

00:34:37.830 --> 00:34:42.950
So you can actually set a
composite operator for drawing

00:34:42.950 --> 00:34:42.950
other than just image compositing.

00:34:44.130 --> 00:34:48.250
This is an example of how you'd
specify a canvas element on a web page.

00:34:48.460 --> 00:34:49.710
It looks very much like the image tag.

00:34:49.790 --> 00:34:53.040
You specify a width and a height,
a composite operator.

00:34:53.040 --> 00:34:56.310
This is the operator that will be
used to composite the resulting

00:34:56.310 --> 00:34:57.800
image into your web page.

00:34:57.800 --> 00:35:00.690
And this, by the way,
the same attribute name that

00:35:00.690 --> 00:35:02.870
we've added to the image element.

00:35:04.540 --> 00:35:07.460
Okay, so how do I actually do the
drawing into the Canvas element?

00:35:07.550 --> 00:35:08.670
Well, here's an example.

00:35:08.730 --> 00:35:10.800
In this case,
I'm going to draw a line from the top

00:35:10.800 --> 00:35:13.140
left to the lower right of the Canvas.

00:35:13.140 --> 00:35:15.960
The first thing we do is we
get the Canvas element using

00:35:15.970 --> 00:35:19.220
the familiar get element by ID,
and then we ask that element,

00:35:19.220 --> 00:35:20.440
give me a context.

00:35:20.440 --> 00:35:22.940
In this case, a 2D context.

00:35:22.940 --> 00:35:24.870
Now I begin my drawing.

00:35:24.880 --> 00:35:26.280
I'm going to use the clear context.

00:35:26.280 --> 00:35:28.820
It's going to fill the
context with transparency.

00:35:28.900 --> 00:35:35.080
Construct a path, you know,
00 to the lower left, I mean lower right.

00:35:35.080 --> 00:35:37.700
Set the stroke color
and stroke that path.

00:35:37.890 --> 00:35:39.820
Pretty straightforward.

00:35:40.410 --> 00:35:42.840
So I think this stuff is best
illustrated with some demos.

00:35:42.930 --> 00:35:45.480
Let me show you some demos of the canvas.

00:35:59.810 --> 00:36:02.300
Let me increase the font size here a bit.

00:36:02.310 --> 00:36:03.960
Okay.

00:36:04.020 --> 00:36:08.250
So here's a really simple web page
that specifies a Canvas element.

00:36:08.480 --> 00:36:09.600
Not too exciting yet.

00:36:09.690 --> 00:36:12.820
Let's open up Safari and load the page.

00:36:12.820 --> 00:36:16.820
Now let me turn the network back
on before I forget to do that.

00:36:27.190 --> 00:36:28.630
So what does this look like?

00:36:28.700 --> 00:36:30.200
Well, that's it.

00:36:30.230 --> 00:36:30.670
A rectangle.

00:36:30.670 --> 00:36:31.890
Not too exciting.

00:36:31.890 --> 00:36:34.050
But we're just starting.

00:36:36.800 --> 00:36:41.130
So let's go ahead and draw
some lines into the canvas.

00:36:41.200 --> 00:36:43.860
So what I'm going to do is
add a little script in here.

00:36:50.890 --> 00:36:55.370
And this is actually going to draw
two lines like this through the page.

00:36:55.490 --> 00:36:59.150
But we're going to do it in the
onload handler of the body element.

00:36:59.150 --> 00:37:04.300
Okay.

00:37:04.300 --> 00:37:09.480
Let's go ahead and save
this as something different.

00:37:20.800 --> 00:37:22.800
These lines in Canvas, ooh.

00:37:22.800 --> 00:37:27.600
Okay, let's crank this up a bit.

00:37:27.600 --> 00:37:29.560
Show something a bit more whizzy.

00:37:37.100 --> 00:37:39.310
Okay, this looks more interesting.

00:37:39.430 --> 00:37:41.730
Let's hide the other applications.

00:37:42.070 --> 00:37:44.580
So what I have here is a rectangle.

00:37:46.290 --> 00:37:49.500
So, we're going to start off with some
shapes that we're drawing dynamically

00:37:49.520 --> 00:37:50.890
frame by frame using a canvas.

00:37:50.940 --> 00:37:53.710
And we can do things, of course,
you know, change the colors.

00:37:54.440 --> 00:37:57.610
And because the canvas
itself is an element on the

00:37:57.610 --> 00:38:01.380
page like any other element,
we can do CSS tricks like positioning.

00:38:01.400 --> 00:38:06.390
So I'm going to dynamically move
the canvas as I render each frame.

00:38:09.700 --> 00:38:12.480
continue to do things
like change the colors.

00:38:12.520 --> 00:38:14.410
There's one other thing I want
to show you on this page

00:38:14.460 --> 00:38:17.120
which is kind of interesting,
and that's the circle up here.

00:38:17.150 --> 00:38:19.490
This is another canvas,
but it's a canvas used

00:38:19.490 --> 00:38:23.070
to implement a widget,
a new kind of widget on the web page.

00:38:23.270 --> 00:38:27.280
And what this widget does is
specify the offset and the angle

00:38:27.280 --> 00:38:28.780
of the shadow in each shape.

00:38:28.910 --> 00:38:32.270
So you'll notice there's a
blurred shadow in each shape.

00:38:32.310 --> 00:38:36.840
As I move this control,
you'll see that shadow change.

00:38:37.130 --> 00:38:40.680
So this is implemented using
standard JavaScript event handling

00:38:41.350 --> 00:38:44.530
and the canvas to render the widget.

00:38:44.630 --> 00:38:46.170
Pretty nifty.

00:38:46.400 --> 00:38:48.760
Of course,
we can change the blur rate with

00:38:49.000 --> 00:38:50.860
the new slider input element.

00:38:50.860 --> 00:38:54.610
I can do things like change
the background color.

00:38:55.320 --> 00:38:57.190
So this is pretty cool.

00:38:57.190 --> 00:39:00.540
Let me show you one other thing
that I think is pretty cool.

00:39:00.540 --> 00:39:02.620
Let's stop this thing moving.

00:39:04.020 --> 00:39:09.080
There's a new debug menu in
JavaScript that I call Dashboard Mode.

00:39:11.970 --> 00:39:15.570
And what it does is it takes away
all the stuff that Safari adds,

00:39:15.570 --> 00:39:19.530
and you just have the pure
HTML here with no background.

00:39:19.680 --> 00:39:20.280
So pretty nifty.

00:39:20.280 --> 00:39:21.990
Let me just show you how
powerful this really is.

00:39:22.090 --> 00:39:24.320
Let's pull up another window.

00:39:25.000 --> 00:39:28.900
I'm going to load some
interesting content here.

00:39:28.900 --> 00:39:29.740
The Incredibles.

00:39:29.890 --> 00:39:30.660
This trailer.

00:39:30.660 --> 00:39:32.700
I love this trailer.

00:39:32.700 --> 00:39:32.700
Okay.

00:39:34.560 --> 00:39:37.030
And you can see that it's
doing everything you'd expect.

00:39:37.140 --> 00:39:41.140
This is a web page being rendered
transparently over a QuickTime movie.

00:39:41.140 --> 00:39:42.870
Pretty amazing.

00:39:55.280 --> 00:40:03.200
Just a few more slides.

00:40:03.200 --> 00:40:05.260
So it's not just about web browsing.

00:40:05.340 --> 00:40:07.420
This Web Kit technology
is really powerful,

00:40:07.420 --> 00:40:10.310
and now with this ability to
bind all the Cocoa framework

00:40:10.410 --> 00:40:16.120
technology into JavaScript,
there's a lot of new capabilities

00:40:16.120 --> 00:40:16.120
that we're providing to you.

00:40:16.370 --> 00:40:19.250
You can build visually compelling
applications really quickly,

00:40:19.300 --> 00:40:22.790
and you can leverage your
existing web design skills.

00:40:22.830 --> 00:40:23.640
Rapid prototyping.

00:40:23.640 --> 00:40:26.640
This is an interpreted environment,
so you don't have to go

00:40:26.640 --> 00:40:27.470
through a compile phase.

00:40:27.520 --> 00:40:28.580
It's great.

00:40:28.830 --> 00:40:29.470
Simple deployment.

00:40:29.470 --> 00:40:31.590
These are just web pages.

00:40:32.060 --> 00:40:33.800
So I said we'd build a gadget.

00:40:33.810 --> 00:40:36.190
So let me do that now in the
remaining time that we have.

00:40:41.200 --> 00:40:44.520
This is actually a really simple gadget.

00:40:44.600 --> 00:40:46.600
It's the clock.

00:40:46.600 --> 00:40:52.680
It's most of the clock that
is included in the dashboard.

00:40:54.470 --> 00:41:00.080
So the first thing we're going
to do is construct a web page.

00:41:00.100 --> 00:41:01.400
Let's close this.

00:41:02.540 --> 00:41:08.220
Increase the font size.

00:41:08.220 --> 00:41:08.220
Let's save this.

00:41:14.110 --> 00:41:14.990
Okay, not very interesting.

00:41:15.110 --> 00:41:19.020
Right now,
I'm just creating the face of the clock.

00:41:19.150 --> 00:41:24.870
It's simply an image.

00:41:24.870 --> 00:41:24.870
We need to put a...

00:41:25.380 --> 00:41:35.580
I'm going to load an
HTML element around this.

00:41:36.060 --> 00:41:36.690
I'm being kind of sloppy.

00:41:36.690 --> 00:41:36.690
I'm not specifying the doc type.

00:41:36.690 --> 00:41:36.690
Okay.

00:41:36.690 --> 00:41:36.690
Let's load this into Safari.

00:41:40.360 --> 00:41:43.200
Very sloppy HTML at this point,
but that's the clock face.

00:41:43.200 --> 00:41:44.650
That's the beginning of the web page.

00:41:44.650 --> 00:41:48.150
Of the gadget, I should say.

00:41:53.080 --> 00:41:58.690
Now what I'd like to do is
add some JavaScript code

00:41:59.710 --> 00:42:05.480
To load in the images that I want
to use for the clock hands.

00:42:06.680 --> 00:42:09.630
So what I'd like to do is have just
three images that I use for the hours,

00:42:09.690 --> 00:42:13.350
minutes, and secondhand,
and use the Canvas element to

00:42:13.380 --> 00:42:18.690
apply transforms to the images as
I composite them into the Canvas.

00:42:18.700 --> 00:42:28.400
[Transcript missing]

00:42:29.220 --> 00:42:53.480
The minute hand, second hand,
and hour hand,

00:42:53.480 --> 00:42:53.480
and it goes ahead and loads them.

00:42:53.480 --> 00:42:53.480
And I have this little function
that counts up the images as

00:42:53.480 --> 00:42:53.480
they're loaded because in this case,
the images are all local,

00:42:53.480 --> 00:42:53.480
but they could be remote.

00:42:53.480 --> 00:42:53.480
So it may take some
time to load the images.

00:42:53.480 --> 00:42:53.480
And I don't want to start compositing
until I have all of the images.

00:42:53.480 --> 00:42:53.480
Okay, what next?

00:42:53.480 --> 00:42:53.480
Let's add a load handler.

00:42:59.500 --> 00:43:04.370
: So what I've done here is I've
added a canvas element that's going

00:43:04.370 --> 00:43:09.050
to be positioned using CSS right
on top of the image element.

00:43:09.270 --> 00:43:13.000
Initially, it's just transparent,
but it's positioned

00:43:13.000 --> 00:43:14.090
over the image element.

00:43:14.230 --> 00:43:18.190
This is standard CSS.

00:43:18.190 --> 00:43:23.090
You can see I'm specifying
absolute positioning at 0,

00:43:23.090 --> 00:43:23.090
0.

00:43:26.220 --> 00:43:30.720
So let's take a look at what
this looks like now in Safari.

00:43:30.740 --> 00:43:31.550
That's exactly the same.

00:43:31.560 --> 00:43:32.460
There's nothing new.

00:43:32.460 --> 00:43:33.780
OK.

00:43:33.860 --> 00:43:36.430
Let's add some code to draw the hands.

00:43:41.990 --> 00:43:44.040
First,
I guess we have to add one more thing.

00:43:44.040 --> 00:43:51.750
We have to add the code that will figure
out the appropriate angle to composite

00:43:52.640 --> 00:44:11.630
We have to know where to
position the second hand,

00:44:11.630 --> 00:44:11.630
the minute hand, and the hour hand.

00:44:11.630 --> 00:44:11.630
We do this using the standard
JavaScript data object,

00:44:11.630 --> 00:44:11.630
some simple math.

00:44:11.630 --> 00:44:11.630
We compute the angles for the
second minute and hour hand.

00:44:11.630 --> 00:44:11.630
Then we go ahead and draw the hands.

00:44:14.540 --> 00:44:16.000
Let's load this again.

00:44:16.080 --> 00:44:17.150
Still nothing new.

00:44:17.180 --> 00:44:17.620
Okay.

00:44:17.760 --> 00:44:22.710
Let's get to the final piece,
actually drawing the hands.

00:44:33.100 --> 00:44:41.740
So what we did with the unload handler
is we added a JavaScript function

00:44:41.740 --> 00:44:45.770
that's going to be called every second.

00:44:45.770 --> 00:44:45.770
And this JavaScript function

00:44:46.580 --> 00:44:51.870
will go ahead and compute the angles
for each of the hands and then call

00:44:51.870 --> 00:44:56.490
a drawHands method that will do the
actual work of compositing the images.

00:44:56.560 --> 00:44:58.590
And the drawHands method

00:44:58.950 --> 00:45:06.190
The first thing we do is make sure
we have all of the images available.

00:45:06.190 --> 00:45:06.190
The image count has to be three.

00:45:06.700 --> 00:45:08.700
Let's clear the context.

00:45:08.700 --> 00:45:09.340
And then we call save.

00:45:09.380 --> 00:45:10.760
Well, what's save all about?

00:45:10.760 --> 00:45:14.860
Save saves the graphic state
of the context that's used

00:45:15.080 --> 00:45:17.080
to render into the canvas.

00:45:17.310 --> 00:45:20.170
So after calling save
followed by restore,

00:45:20.170 --> 00:45:24.460
if you've done any transform operations
in between a save and restore,

00:45:24.480 --> 00:45:26.940
they'll be restored as appropriate.

00:45:26.940 --> 00:45:29.810
So what we actually are doing
here is we're translating to

00:45:29.850 --> 00:45:32.950
the center of the clock face,
actually just a little bit above

00:45:33.000 --> 00:45:36.260
the center of the clock face because
that's the center of the circle.

00:45:36.870 --> 00:45:41.580
Then we go ahead and call drawHand,
which is my JavaScript function up here,

00:45:41.580 --> 00:45:43.320
to composite that image.

00:45:43.350 --> 00:45:46.330
Now,
we've translated already to the center,

00:45:46.520 --> 00:45:52.240
but now I need to rotate as appropriate
to composite the image hand.

00:45:52.240 --> 00:45:55.660
So here's a rotate of the angle
that we previously computed.

00:45:55.660 --> 00:46:00.200
And finally, finally,
we get to draw the image using

00:46:00.200 --> 00:46:02.700
drawImage on the context.

00:46:02.700 --> 00:46:06.780
And then we restore the angle because the
next hand is going to be the image hand.

00:46:06.800 --> 00:46:11.080
And we painted a different rotation.

00:46:11.080 --> 00:46:12.030
So that's it.

00:46:12.050 --> 00:46:12.940
Let's go ahead and load it now.

00:46:16.790 --> 00:46:19.060
There we have hands working,
but they're not quite in the center.

00:46:19.060 --> 00:46:20.700
What's going on with that?

00:46:20.830 --> 00:46:25.200
Well, by default,
the style of the body element on a

00:46:25.200 --> 00:46:28.610
web page has a margin that isn't 00.

00:46:28.610 --> 00:46:36.730
So let's go ahead and add some
style to adjust the margin.

00:46:39.280 --> 00:46:45.020
is the founder of the body element.

00:46:45.020 --> 00:46:45.020
We're going to set the margins to zero.

00:46:47.360 --> 00:46:48.300
We learned that.

00:46:48.300 --> 00:46:49.480
Looks much better.

00:46:50.670 --> 00:46:52.540
There we have the clock widget.

00:46:56.310 --> 00:46:59.180
Let's go ahead and
turn on dashboard mode.

00:46:59.260 --> 00:47:03.840
Whoops.

00:47:03.850 --> 00:47:07.490
Just like it appears in dashboard.

00:47:16.810 --> 00:47:21.460
So I want to say a few final words about
the availability of these technologies.

00:47:21.540 --> 00:47:24.830
Of course, everything we've talked about
today is going to be available

00:47:24.830 --> 00:47:26.680
in Safari 2.0 and Tiger.

00:47:27.110 --> 00:47:29.390
All of the Web Kit features that we've
talked about today are also going

00:47:29.410 --> 00:47:33.620
to be available on Panther in 10.3,
and there's already a developer

00:47:33.620 --> 00:47:37.360
preview of that release
that you can download today.

00:47:44.810 --> 00:47:45.800
Just one final point.

00:47:45.800 --> 00:47:48.120
There's lots of documentation
and sample code available on

00:47:48.120 --> 00:47:51.030
the connect.apple.com site.

00:47:51.080 --> 00:47:52.550
I encourage you to check that out.