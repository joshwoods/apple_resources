WEBVTT

00:00:12.900 --> 00:00:18.430
Welcome to session 403 regarding
the Mac OS X installer application.

00:00:21.460 --> 00:00:25.110
My name is Jean-Pierre Ciudaad,
and I work at Apple in the

00:00:25.110 --> 00:00:27.960
installation and setup group.

00:00:27.960 --> 00:00:31.020
We write applications like
the installer application,

00:00:31.190 --> 00:00:34.160
the software update application,
and the setup assistant,

00:00:34.290 --> 00:00:37.510
which is the first application
you see after installing the

00:00:37.550 --> 00:00:40.400
OS once you reboot the machine.

00:00:42.210 --> 00:00:44.180
First, I have a question for you.

00:00:44.290 --> 00:00:48.810
How many of you are familiar with
creating installation packages?

00:00:50.240 --> 00:00:54.620
Okay, maybe 60%, 70%. So,
for those of you who are not

00:00:54.690 --> 00:00:58.460
familiar with creating packages,
I'm gonna start by giving you an

00:00:58.460 --> 00:01:02.200
overview of what are the options
available for you on Mac OS X.

00:01:02.590 --> 00:01:05.490
For those of you who are familiar,
after the overview,

00:01:05.490 --> 00:01:08.470
we'll talk about some of the
new and updated features that

00:01:08.470 --> 00:01:10.460
we are bringing to you in Tiger.

00:01:10.460 --> 00:01:13.520
Most importantly,
we'll talk about installation

00:01:13.630 --> 00:01:17.010
plugins and distributions.

00:01:17.330 --> 00:01:21.520
Then we'll talk about how you can
create compatible packages that will

00:01:21.520 --> 00:01:25.440
install all the way from 10.1 to Tiger.

00:01:25.610 --> 00:01:29.630
And at the end we'll talk about
where you can find some more

00:01:29.630 --> 00:01:32.870
documentation about all these things.

00:01:33.920 --> 00:01:39.300
There are two types of installations
that are available to you on Mac OS X.

00:01:39.430 --> 00:01:42.170
The first one, drag and drop installs.

00:01:42.380 --> 00:01:46.980
This is the simplest way to deliver
your application to your users.

00:01:48.500 --> 00:01:51.730
In addition to that,
Apple also provides you with

00:01:51.950 --> 00:01:55.720
an application called Package
Maker to create packages and the

00:01:55.720 --> 00:01:59.590
installer application to install
them on the user's machine.

00:01:59.690 --> 00:02:01.060
So let's start with drag and drop.

00:02:01.130 --> 00:02:03.300
What are the advantages?

00:02:03.390 --> 00:02:05.540
Well,
the advantages to users are obvious.

00:02:05.550 --> 00:02:08.880
It's only one file,
one application bundle that your

00:02:08.880 --> 00:02:12.150
user can just drag to wherever
he wants in the file system.

00:02:12.240 --> 00:02:14.300
It's very simple to install.

00:02:14.300 --> 00:02:16.520
It's also very easy to remove.

00:02:16.640 --> 00:02:22.310
The user can just grab the application
bundle and drag it to the trash.

00:02:22.700 --> 00:02:25.940
The advantages for you:
there is absolutely no complex

00:02:25.940 --> 00:02:28.830
installation instructions to write.

00:02:28.830 --> 00:02:31.750
It's a very simple process.

00:02:31.900 --> 00:02:53.600
[Transcript missing]

00:02:53.930 --> 00:02:57.140
Your application will
need to handle any README,

00:02:57.350 --> 00:02:58.730
any license agreement.

00:02:58.940 --> 00:03:03.290
It will also have to check for proper
configuration when it's launched.

00:03:03.530 --> 00:03:08.710
Again, you have no way to do
additional checking.

00:03:10.200 --> 00:04:16.800
[Transcript missing]

00:04:16.980 --> 00:04:20.810
So you may have noticed that one of the
first panel that you see in the setup

00:04:20.810 --> 00:04:24.870
assistant is a migration panel that asks
you if you want to migrate from another

00:04:24.920 --> 00:04:27.260
machine or from another partition.

00:04:27.290 --> 00:04:30.590
When we do this migration,
we do not carry over files that

00:04:30.590 --> 00:04:33.060
were installed into Slash system.

00:04:33.090 --> 00:04:37.400
Or to be more precise, we do it,
but we do it on a case-for-case basis.

00:04:37.420 --> 00:04:41.090
So if we don't know about your file,
it will not be migrated.

00:04:42.660 --> 00:04:46.510
So you may have noticed that one of the
first panel that you see in the setup

00:04:46.510 --> 00:04:47.780
assistant is a migration panel that asks
you if you want to migrate from another

00:04:47.780 --> 00:04:47.780
machine or from another partition.

00:04:48.090 --> 00:04:51.340
If your application needs to
restart or needs a logout,

00:04:51.380 --> 00:04:54.720
we will ask the user to
restart or to logout.

00:04:54.870 --> 00:05:01.120
We will also do the optimizing system
performance section of the installer,

00:05:01.120 --> 00:05:05.590
which is we will run the pre-binding
tool to pre-bind your executable.

00:05:05.780 --> 00:05:10.210
If you're installing an application,
we will register it with Launch Services,

00:05:10.250 --> 00:05:15.510
and we will also allow you to provide
some customizable parts of the UI,

00:05:15.510 --> 00:05:19.340
namely the welcome panel,
the background image,

00:05:19.410 --> 00:05:23.290
and a localized readme
or license agreement.

00:05:24.660 --> 00:05:29.600
So, how do you, sorry,
what is an installer package?

00:05:29.600 --> 00:05:34.910
So first and foremost,
an installer package contains the

00:05:35.030 --> 00:05:36.290
files that you want to install.

00:05:36.380 --> 00:05:38.520
This is what we call the payload.

00:05:38.580 --> 00:05:42.000
The payload is just a Pax archive.

00:05:43.920 --> 00:05:49.510
In addition to that,
a package bundle contains a catalog.

00:05:49.880 --> 00:05:51.790
The catalog is a bill of materials.

00:05:51.900 --> 00:05:56.400
It's an index list of the files
that are contained in your archive.

00:05:57.200 --> 00:06:00.410
In addition to that,
you provide a description file

00:06:00.630 --> 00:06:04.260
that gives us the title and
the description of the package.

00:06:04.360 --> 00:06:07.120
Also, you provide some flags that
tells us how to behave.

00:06:07.270 --> 00:06:09.860
Do you want an authorization
and things like that?

00:06:09.860 --> 00:06:12.330
Do you want to follow sim links?

00:06:14.290 --> 00:06:18.810
Then you also provide all the
UI parts of the installation process,

00:06:18.810 --> 00:06:20.960
the background image, the readme,
the license agreement,

00:06:20.960 --> 00:06:22.340
the welcome screen.

00:06:22.440 --> 00:06:26.460
You also provide the check tools that
will check the system to make sure

00:06:26.460 --> 00:06:30.090
that your package can be installed on,
and same thing for the volume,

00:06:30.200 --> 00:06:32.600
the installation check
and volume check tool.

00:06:32.710 --> 00:06:36.830
And then you provide a collection
of scripts that you may want to be

00:06:37.140 --> 00:06:39.530
run before you install the files
or after you install the files.

00:06:39.600 --> 00:06:44.400
We make a difference between pre-install
and pre-upgrade depending if you're

00:06:44.400 --> 00:06:47.400
doing an upgrade or an install,
obviously.

00:06:47.460 --> 00:06:50.360
Now you can create as
many packages as you want,

00:06:50.360 --> 00:06:55.220
and then you can group them together
in the UI by using a meta package.

00:06:55.790 --> 00:07:00.550
An installer meta package structure
is very similar to a package,

00:07:00.550 --> 00:07:02.800
except that it does not
contain any payload.

00:07:03.040 --> 00:07:06.140
Its only purpose is to group
things together in the UI.

00:07:06.260 --> 00:07:09.020
The way you list those packages,
the packages that belong

00:07:09.080 --> 00:07:13.690
to this meta package,
is by adding a key in the Info.plist that

00:07:14.110 --> 00:07:17.880
will contain the list of packages.

00:07:18.020 --> 00:07:21.380
Now, a meta package also
contains some UI sections,

00:07:21.380 --> 00:07:24.760
the check tools,
and the different scripts.

00:07:24.870 --> 00:07:27.500
So how do you create a package?

00:07:28.010 --> 00:07:31.060
You create a package using Packagemaker.

00:07:31.120 --> 00:07:35.900
Packagemaker is installed on your
system as part of the Xcode tools.

00:07:35.970 --> 00:07:39.400
It's installed in developer
application utilities,

00:07:39.460 --> 00:07:43.000
and you can run Packagemaker
as an application,

00:07:43.080 --> 00:07:46.430
or you can also run it as a
command line tool that you can

00:07:46.550 --> 00:07:48.760
include in your build scripts.

00:07:49.960 --> 00:07:54.350
As it is today, on your CD,
on the Tiger CD that you have,

00:07:54.350 --> 00:07:57.940
the PackageMaker is a very simple
version of the application.

00:07:57.940 --> 00:07:59.950
It only creates very simple packages.

00:08:00.070 --> 00:08:05.080
You will most likely have to go and
edit the files that get created in

00:08:05.080 --> 00:08:08.950
order to support some of the more
advanced features of the installer.

00:08:09.140 --> 00:08:11.860
However,
we are actively working on PackageMaker,

00:08:11.860 --> 00:08:14.560
and we really hope to deliver
to you a much better application

00:08:14.560 --> 00:08:17.480
of PackageMaker for GM.

00:08:20.080 --> 00:08:24.000
So in Packagemaker, you provide the root
directory of your software,

00:08:24.030 --> 00:08:28.160
you specify the different installation
flags that you want to use,

00:08:28.180 --> 00:08:32.160
and you give us the name of your package,
the description, and then the location of

00:08:32.270 --> 00:08:35.870
all the additional files,
like the readme, the license agreement,

00:08:35.870 --> 00:08:36.320
etc.

00:08:36.390 --> 00:08:39.350
On output,
Packagemaker will create a package,

00:08:39.350 --> 00:08:44.120
a .pkg bundle,
that you will distribute to your users.

00:08:45.100 --> 00:08:49.050
That package will be installed on the
user's machine using the Apple installer,

00:08:49.050 --> 00:08:51.100
which is located in
Application Utilities.

00:08:51.180 --> 00:08:54.730
The installer has been shipping in
every single version of Mac OS X.

00:08:54.810 --> 00:08:56.020
It's always available.

00:08:56.090 --> 00:08:57.270
Users are familiar with it.

00:08:57.380 --> 00:08:59.840
It's very easy to use.

00:09:00.560 --> 00:09:03.780
So now I would like to
introduce you to Jack Matthew,

00:09:03.870 --> 00:09:06.250
the field shearer of installation.

00:09:07.300 --> 00:09:11.310
and he's also the person at
Apple who made a career out of

00:09:11.430 --> 00:09:12.900
creating installer packages.

00:09:12.970 --> 00:09:13.900
Jack?

00:09:14.200 --> 00:09:14.900
Thanks a lot, Jean-Pierre.

00:09:14.900 --> 00:09:16.900
My car isn't nice as Phil's.

00:09:16.900 --> 00:09:22.960
I drive a Toyota,
so not quite as -- not quite Phil.

00:09:22.960 --> 00:09:27.120
So as Jean-Pierre mentioned,
PackageMaker is a really

00:09:27.120 --> 00:09:29.180
simple application.

00:09:29.180 --> 00:09:32.890
The things that you need in
order to use PackageMaker are,

00:09:33.280 --> 00:09:38.130
first of all, a root,
and you can think of this as slash.

00:09:38.130 --> 00:09:42.390
And let's just take a
look at our root here.

00:09:42.390 --> 00:09:42.390
Oops.

00:09:42.390 --> 00:09:42.390
And

00:09:43.460 --> 00:09:49.280
So our root contains applications
and then our application.

00:09:49.280 --> 00:09:52.640
And one of the reasons we might want
to use a package based installer

00:09:52.650 --> 00:09:56.000
is because we're installing more
than one thing on the file system,

00:09:56.000 --> 00:09:57.890
otherwise we'd want
to use a drag install.

00:09:57.930 --> 00:10:02.080
So we also install something
into library application support.

00:10:02.560 --> 00:10:05.380
So in addition to the root,
we also have this

00:10:05.380 --> 00:10:08.280
package resources folder.

00:10:08.300 --> 00:10:11.470
And it contains, let's say,
a post processing script

00:10:11.470 --> 00:10:13.200
that we would want to run.

00:10:13.200 --> 00:10:17.860
It also includes Lproj folders that
contain our localized resources.

00:10:17.860 --> 00:10:21.080
So in this case,
I've got an English readme.

00:10:21.100 --> 00:10:24.550
And in honor of Jean-Pierre,
we've got a French Lproj,

00:10:24.550 --> 00:10:25.970
the French readme.

00:10:26.000 --> 00:10:28.980
And so now we can begin
actually making our package.

00:10:29.010 --> 00:10:31.100
So let's go ahead and
launch PackageMaker.

00:10:31.110 --> 00:10:33.080
Really simple UI.

00:10:33.080 --> 00:10:40.570
So title, let's call it My Application.

00:10:40.570 --> 00:10:40.570
Oops.

00:10:42.950 --> 00:10:44.600
Version 1.0.

00:10:44.630 --> 00:10:45.260
And description.

00:10:45.260 --> 00:10:49.240
Description is what appears in
custom install if this package is

00:10:49.280 --> 00:10:51.310
included as part of a meta package.

00:10:51.330 --> 00:10:53.440
This is good.

00:10:53.440 --> 00:10:53.750
OK.

00:10:53.890 --> 00:10:55.020
So files.

00:10:55.040 --> 00:10:59.080
This is where we select our route.

00:10:59.100 --> 00:11:00.800
So where is that?

00:11:00.800 --> 00:11:03.660
I've got it right here.

00:11:03.660 --> 00:11:05.280
There's our route.

00:11:05.280 --> 00:11:07.870
Resources.

00:11:08.370 --> 00:11:10.370
Here are the resources.

00:11:11.960 --> 00:11:16.130
and Info, this is where you can set up
some of the meta install flags.

00:11:16.230 --> 00:11:19.120
In this particular case,
we're installing an application and

00:11:19.120 --> 00:11:21.500
something into application support.

00:11:21.510 --> 00:11:28.100
So you're going to want
to have admin privileges,

00:11:28.170 --> 00:11:30.650
otherwise it's not going to work
if you have a really restricted

00:11:30.660 --> 00:11:32.220
user that's running the package.

00:11:32.350 --> 00:11:34.070
So that's actually all there is to it.

00:11:34.110 --> 00:11:38.070
So let's go ahead and create
package and we'll call it.

00:11:38.420 --> 00:11:43.410
MyApp.pkg.

00:11:43.410 --> 00:11:43.410
And we'll go ahead and
put that on the desktop.

00:11:45.620 --> 00:11:47.150
Ta-da, that's it.

00:11:47.160 --> 00:11:50.780
So we can go ahead and
launch the package.

00:11:50.780 --> 00:11:54.740
That's all there is to it.

00:11:54.740 --> 00:12:00.210
And I'm going to turn the
stage back over to Jean-Pierre.

00:12:03.310 --> 00:12:06.060
Thank you, Jack.

00:12:06.140 --> 00:12:07.860
So this is very simple.

00:12:07.880 --> 00:12:09.660
You know, there's not much to it.

00:12:09.660 --> 00:12:11.610
This is very useful.

00:12:11.760 --> 00:12:15.330
So now I would like to talk
to you about our new features.

00:12:15.500 --> 00:12:18.300
So first,
where do we get ideas for new features?

00:12:18.320 --> 00:12:20.180
Well, we mostly get them from you.

00:12:20.360 --> 00:12:26.370
You send us feedback,
we meet you at WWDC, you report bugs.

00:12:26.460 --> 00:12:29.500
Often they're more announcements
requests than bugs,

00:12:29.500 --> 00:12:33.600
and sometimes they are real new features,
and we listen to what you have to say.

00:12:33.630 --> 00:12:37.110
We also listen to people like Jack,
who create packages at Apple,

00:12:37.150 --> 00:12:39.960
who create packages for
DOS and also for applications.

00:12:39.980 --> 00:12:42.400
They are a great source
of information for us,

00:12:42.400 --> 00:12:46.380
and we are,
please keep the feedback coming.

00:12:46.700 --> 00:12:48.150
So what have we done in Tiger?

00:12:48.380 --> 00:12:52.760
So here are some of the new features
that might be of interest for you.

00:12:52.840 --> 00:12:54.540
File version checking.

00:12:54.670 --> 00:12:57.660
Some of you may be familiar
with bundle version checking,

00:12:57.700 --> 00:13:02.090
which is what prevents the installer
from overriding a newer version

00:13:02.190 --> 00:13:04.800
of a bundle on the user's disk.

00:13:04.830 --> 00:13:06.820
We have extended that to files.

00:13:06.850 --> 00:13:10.540
The reason for that is because some
files are not part of a bundle.

00:13:10.590 --> 00:13:12.480
Things like fonts, for example.

00:13:12.510 --> 00:13:15.450
And currently what our installer
would be doing is that it would

00:13:15.450 --> 00:13:19.780
just go and install an older version
of the font over a newer one.

00:13:19.810 --> 00:13:22.380
So this is bad,
so we decided to address that.

00:13:22.600 --> 00:13:26.200
It works in a very simple way.

00:13:26.640 --> 00:13:30.840
For every file that you want to check,
we give you a hook where you

00:13:30.920 --> 00:13:33.760
can provide your own tool and
basically tell us whether or

00:13:33.760 --> 00:13:35.300
not the file should be replaced.

00:13:35.300 --> 00:13:39.880
We are gonna provide some standard ways,
some standard version

00:13:39.880 --> 00:13:41.440
checks for some files.

00:13:41.730 --> 00:13:44.600
Multiple CD installations.

00:13:44.740 --> 00:13:49.310
That's a request that we heard
last year that a lot of people

00:13:49.310 --> 00:13:54.230
wanted to be able to actually,
they wanted the installer to be able to

00:13:54.230 --> 00:13:59.400
handle multiple CDs or multiple DVDs,
so we now have implemented that.

00:13:59.430 --> 00:14:03.310
It will be available through
distribution scripts.

00:14:03.320 --> 00:14:06.270
You will hear about distributions later.

00:14:07.460 --> 00:14:09.030
Minimum UI Installation.

00:14:09.220 --> 00:14:14.720
So this is in order to provide a
better solution for automated installs.

00:14:14.780 --> 00:14:19.410
We now allow the package writer
to specify if some panels in

00:14:19.410 --> 00:14:21.680
the installer should be skipped.

00:14:21.740 --> 00:14:26.050
We also provide, for some of the panels,
we provide a minimal UI,

00:14:26.050 --> 00:14:31.300
which means that we do not force
the user to always answer a

00:14:31.300 --> 00:14:33.230
question in the installer panel.

00:14:33.240 --> 00:14:36.340
We can assume certain replies.

00:14:37.400 --> 00:14:39.520
So it's useful for automated install.

00:14:39.580 --> 00:14:42.940
It will also be available
through distribution scripts.

00:14:42.950 --> 00:14:45.080
Application selection.

00:14:45.190 --> 00:14:48.750
One of the panels that you have in the
installer today is target selection,

00:14:48.860 --> 00:14:51.880
where we list all the volumes
that you have on your machine.

00:14:51.910 --> 00:14:53.560
This is great when
you're installing the OS,

00:14:53.580 --> 00:14:57.560
but really when you deliver a new
version of your application to the user,

00:14:57.960 --> 00:15:02.040
you want to upgrade the existing one.

00:15:02.080 --> 00:15:06.860
So what application selection is,
is a replacement for volume selection.

00:15:06.860 --> 00:15:09.450
Instead of disk,
you will see older versions of your

00:15:09.550 --> 00:15:12.240
application on the user's machine,
and the user can say,

00:15:12.340 --> 00:15:14.980
this is the one I want to upgrade.

00:15:16.350 --> 00:15:21.400
And then we have two more features
that I would like to call,

00:15:22.230 --> 00:15:24.540
two more features that I would
like to go into more details.

00:15:24.620 --> 00:15:27.440
And for that, I'm going to call two
engineers in my team.

00:15:27.530 --> 00:15:30.150
And we're going to start with plugins,
installer plugins,

00:15:30.150 --> 00:15:32.550
and I would like to call Chris Ryan.

00:15:36.460 --> 00:15:38.950
Thank you, Jean-Pierre.

00:15:39.070 --> 00:15:41.820
So, I'm going to talk--my name is
Christopher Ryan and I work on

00:15:41.830 --> 00:15:44.280
the setup and installation team,
and I'm going to talk

00:15:44.280 --> 00:15:49.700
about installer plug-ins.

00:15:49.700 --> 00:15:49.710
So--oh.

00:15:50.360 --> 00:15:52.430
Installer Plugins.

00:15:52.540 --> 00:15:55.860
So, I'm going to talk about why
we have installer plugins,

00:15:55.910 --> 00:16:00.530
what they are and how they're used,
how to create an installer plugin,

00:16:00.710 --> 00:16:02.980
some requirements,
when they should be used and

00:16:02.980 --> 00:16:05.480
when they shouldn't be used,
as well as some demos.

00:16:05.780 --> 00:16:07.600
So let's get started.

00:16:08.960 --> 00:16:10.630
Why do we have installer plugins?

00:16:10.730 --> 00:16:13.860
So as Jean-Pierre mentioned,
there are many ways to customize

00:16:13.860 --> 00:16:15.360
your installer's experience.

00:16:15.410 --> 00:16:19.000
You have a readme, a license,
a welcome panel,

00:16:19.050 --> 00:16:20.850
as well as a custom background.

00:16:20.850 --> 00:16:24.590
But we've been hearing requests from
many developers that you want to do more.

00:16:24.970 --> 00:16:26.500
You want to do things
we haven't thought of.

00:16:26.550 --> 00:16:30.260
You want registration, serialization,
maybe even a summary or conclusion

00:16:30.260 --> 00:16:31.650
at the end of the install.

00:16:31.740 --> 00:16:36.160
And so we're going to provide you some
plugin support so you can do this.

00:16:36.970 --> 00:16:38.060
So what are they?

00:16:38.060 --> 00:16:40.360
They are a customizable
section in the installer,

00:16:40.360 --> 00:16:45.110
similar to how you see the README and
license and the target select panels.

00:16:45.180 --> 00:16:49.020
They're provided by developers inside
your packages or distributions.

00:16:49.020 --> 00:16:52.310
They are loadable code,
which can have nibs as well

00:16:52.350 --> 00:16:54.580
as other resources you need.

00:16:54.590 --> 00:16:57.190
But to best show you these plug-ins,
we're going to bring Jack Matthew up

00:16:57.190 --> 00:16:58.910
to show you a quick demo.

00:16:58.910 --> 00:16:58.910
Jack.

00:17:06.560 --> 00:17:07.700
Thanks a lot, Chris.

00:17:07.790 --> 00:17:10.920
So again, this is just best seen.

00:17:10.980 --> 00:17:13.140
So let's go ahead and launch
a package that is using a

00:17:13.140 --> 00:17:15.390
couple of custom plug-ins.

00:17:15.490 --> 00:17:20.920
So the first thing you might
notice here is on the left,

00:17:21.490 --> 00:17:23.770
there's some more stuff.

00:17:23.770 --> 00:17:23.770
So,

00:17:25.060 --> 00:17:28.680
Let's just go ahead and continue
on to one of these custom plugins.

00:17:28.760 --> 00:17:31.040
Here's a registration plugin.

00:17:31.240 --> 00:17:34.900
This is what we call a section,
and we're going to go into

00:17:34.950 --> 00:17:37.120
more details in a moment.

00:17:37.160 --> 00:17:40.160
But let's go ahead and fill this out.

00:17:43.700 --> 00:17:48.730
and then we're going to enter our serial
number and you might notice that the

00:17:48.830 --> 00:17:56.490
continue button is grayed out until we
enter our extremely secure product key.

00:17:57.730 --> 00:18:02.700
and then we're going to enter our serial
number and you might notice that the

00:18:02.700 --> 00:18:10.400
continue button is grayed out until we
enter our extremely secure product key.

00:18:20.830 --> 00:18:25.020
and incidentally your various
plugins can talk to each other

00:18:25.130 --> 00:18:27.190
through a shared dictionary.

00:18:29.230 --> 00:18:30.100
Here we go.

00:18:30.100 --> 00:18:32.250
And we're done.

00:18:32.510 --> 00:18:33.590
Yay!

00:18:33.660 --> 00:18:35.690
And look at this.

00:18:36.860 --> 00:18:38.990
This is an example of a
late breaking news plugin.

00:18:39.050 --> 00:18:41.890
You might want to just give
someone the latest information

00:18:41.890 --> 00:18:43.290
off of your own webpage.

00:18:43.340 --> 00:18:45.790
This is just something we were
able to make really quick.

00:18:45.870 --> 00:18:49.150
So you'll see over here, breaking news.

00:18:49.200 --> 00:18:54.150
and Casey didn't notice the
installer window is resizable now,

00:18:54.150 --> 00:18:54.150
which is nice.

00:18:57.190 --> 00:19:00.840
That is a package with
two custom plugins.

00:19:00.840 --> 00:19:02.640
Back over to Chris.

00:19:02.740 --> 00:19:04.450
Thank you, Jack.

00:19:08.060 --> 00:19:11.510
So as you can see, you can customize the
installer's experience.

00:19:11.810 --> 00:19:13.340
How do we do this?

00:19:13.390 --> 00:19:16.640
So we have an Xcode
template now in Tiger,

00:19:16.640 --> 00:19:19.880
which will create a very basic
plugin you can use to extend.

00:19:19.910 --> 00:19:22.700
We have a new framework called
the installer plugins framework,

00:19:22.700 --> 00:19:24.980
which contains two new
concepts that Jack alluded to,

00:19:24.980 --> 00:19:27.090
the installer section and installer pane.

00:19:27.100 --> 00:19:29.820
I'm going to go over those in a second.

00:19:29.880 --> 00:19:32.550
So here's the window that you saw
that Jack showed on the screen

00:19:32.900 --> 00:19:36.260
with the late breaking news plugin.

00:19:36.950 --> 00:19:39.130
Each plugin contains one section.

00:19:39.240 --> 00:19:40.950
So here's the registration section.

00:19:41.060 --> 00:19:43.100
It's provided by the registration plugin.

00:19:43.180 --> 00:19:45.790
It also contains two panes.

00:19:46.240 --> 00:19:48.740
and the Late Breaking News section
contains one pane,

00:19:48.740 --> 00:19:52.110
so you can have one or
more panes per section.

00:19:53.720 --> 00:19:57.140
In an installer section,
you can customize a few things.

00:19:57.200 --> 00:19:58.440
One is the title.

00:19:58.790 --> 00:20:02.940
This can be either dynamic or static,
so you can decide the title at runtime.

00:20:03.030 --> 00:20:05.500
You can also decide whether to
actually show the section or not.

00:20:05.590 --> 00:20:08.120
For registration, for example,
you may not want to show the

00:20:08.120 --> 00:20:12.210
registration section if your product
is already registered on that machine.

00:20:12.320 --> 00:20:16.830
Also, you can decide the panel ordering
at runtime from your section.

00:20:16.930 --> 00:20:20.580
So here's the example
registration section,

00:20:20.580 --> 00:20:23.550
and the title, which you can customize,
is highlighted.

00:20:24.710 --> 00:20:25.750
How do we do this?

00:20:25.980 --> 00:20:28.620
You can customize the title of
your installer section using

00:20:28.620 --> 00:20:31.570
the installer section title
key in your Info.plist file.

00:20:31.600 --> 00:20:35.600
And this is localized using
the Info.plist.strings file.

00:20:35.600 --> 00:20:40.580
Also, you can do this at runtime by using
the installer section's title method

00:20:40.580 --> 00:20:42.600
in the installer section subclass.

00:20:42.600 --> 00:20:47.400
And to subclass an installer section,
you need to provide the

00:20:47.580 --> 00:20:52.210
NSPrincipleClass key in your
Info.plist so the installer knows exactly

00:20:52.260 --> 00:20:54.600
which installer section class to load.

00:20:54.750 --> 00:20:57.680
And then we also have a very
important method called shouldLoad,

00:20:57.680 --> 00:20:59.930
which allows you to decide at
runtime whether your section should

00:20:59.930 --> 00:21:01.600
load in the installer's UI or not.

00:21:01.600 --> 00:21:03.600
So here's a quick example
of the shouldLoad method.

00:21:03.600 --> 00:21:06.460
In this example,
we have a section that should only run

00:21:06.460 --> 00:21:08.600
on a machine with one gigabyte of memory.

00:21:08.600 --> 00:21:11.190
So as you notice,
you can use syscontrol or any other

00:21:11.190 --> 00:21:14.600
system libraries to decide whether
your section should load or not.

00:21:14.600 --> 00:21:18.700
And it checks for one gigabyte of memory,
and if there's one gigabyte of memory,

00:21:18.780 --> 00:21:19.500
it returns yes.

00:21:19.610 --> 00:21:20.600
The installer will load
the section automatically.

00:21:20.600 --> 00:21:24.560
Otherwise, it's not loaded.

00:21:25.330 --> 00:21:28.650
The real meat is the view and
what you see on the screen.

00:21:28.740 --> 00:21:31.500
So you can customize this
using an installer pane.

00:21:31.560 --> 00:21:36.800
The installer pane provides a title,
just shown here at the top.

00:21:36.880 --> 00:21:39.080
Provides the content view.

00:21:41.590 --> 00:21:44.360
and other developers are also here.

00:21:44.360 --> 00:21:52.310
We will also be talking
about the Mac OS X installer.

00:21:54.000 --> 00:22:03.100
[Transcript missing]

00:22:03.800 --> 00:22:32.200
[Transcript missing]

00:22:33.300 --> 00:22:47.800
[Transcript missing]

00:22:47.910 --> 00:22:50.860
and there are also some
entering and exit methods,

00:22:50.940 --> 00:22:54.040
will enter, will exit, did enter,
did exit,

00:22:54.160 --> 00:22:58.190
as well as a very important should exit
method which gets called when the user

00:22:58.240 --> 00:23:01.550
clicks the continue or go back button on
your pane so you can decide whether you

00:23:01.550 --> 00:23:03.920
want to exit the pane or not at run time.

00:23:04.000 --> 00:23:05.190
So here's an example of that.

00:23:05.340 --> 00:23:08.130
So in this example,
you may want to warn the user

00:23:08.130 --> 00:23:10.460
that they have to--that they might
have--we might have to send their

00:23:10.460 --> 00:23:12.700
registration over the internet.

00:23:12.700 --> 00:23:15.730
And so when the user
clicks the continue button,

00:23:15.760 --> 00:23:17.940
we're we're going to

00:23:18.200 --> 00:23:21.340
The installer is going to call the
should exit pane method on your pane,

00:23:21.390 --> 00:23:24.480
and you're going to return no and
show an alert warning them that we're

00:23:24.480 --> 00:23:25.660
going to send their registration.

00:23:25.660 --> 00:23:29.170
And when the alert's complete,
there's the installer pane's

00:23:29.190 --> 00:23:31.360
go to next pane method,
which you call to

00:23:31.360 --> 00:23:32.550
advance to the next pane.

00:23:35.270 --> 00:23:38.440
The installer is going to call the
should exit pane method on your pane,

00:23:38.440 --> 00:23:41.540
and you're going to return no and
show an alert warning them that we're

00:23:41.620 --> 00:23:42.760
going to send their registration.

00:23:42.760 --> 00:23:46.230
And when the alert's complete,
there's the installer pane's

00:23:46.270 --> 00:23:48.460
go to next pane method,
which you call to

00:23:48.460 --> 00:23:49.660
advance to the next pane.

00:24:05.200 --> 00:24:08.880
Each of the installer sections
are installer plugins.

00:24:08.900 --> 00:24:10.570
So let's show you how
to create one of these.

00:24:10.740 --> 00:24:12.120
Jack?

00:24:20.400 --> 00:24:37.500
[Transcript missing]

00:24:38.160 --> 00:24:41.780
Each of the installer sections
are installer plugins.

00:24:41.780 --> 00:24:44.770
So, let's show you how to
create one of these.

00:24:45.020 --> 00:24:45.020
Jack?

00:24:52.800 --> 00:25:10.600
[Transcript missing]

00:25:18.700 --> 00:25:37.000
[Transcript missing]

00:25:37.100 --> 00:25:39.500
I'm going to go ahead
and paste in this code.

00:25:39.500 --> 00:25:42.250
And this is going to, believe it or not,
just going to make us a very, very,

00:25:42.250 --> 00:25:44.650
very simple, basic plugin.

00:25:44.840 --> 00:25:47.400
This is the should exit pane
method that Chris mentioned.

00:25:47.400 --> 00:25:51.160
This is going to get called by
the installer when you click

00:25:51.310 --> 00:25:53.860
the continue or go back button.

00:25:53.910 --> 00:25:59.370
And we're going to use this to present a
goodbye message before the user actually

00:25:59.750 --> 00:26:02.180
is able to go to the next plugin.

00:26:02.700 --> 00:26:05.260
So we'll go ahead and save that.

00:26:05.290 --> 00:26:11.100
And then we're also going to go into
the nib and add some hello world text.

00:26:11.100 --> 00:26:18.760
OK, so here's our content view.

00:26:31.140 --> 00:26:31.940
Save.

00:26:31.940 --> 00:26:37.010
And let's go ahead and build it,
see what happens.

00:26:44.600 --> 00:26:46.120
Okay, and I believe we are done.

00:26:46.160 --> 00:26:52.670
So let's look at,
I've got a package ready to

00:26:52.670 --> 00:26:54.810
go here to take our plugin.

00:26:54.820 --> 00:26:58.130
Just copy this to the desktop in case.

00:26:58.140 --> 00:27:02.320
Okay, show package contents.

00:27:04.610 --> 00:27:06.320
and here's the contents folder.

00:27:06.330 --> 00:27:10.800
Now you're going to need to create
a plugins folder inside of contents.

00:27:17.380 --> 00:27:20.380
So, as Chris mentioned,
it's going to need to contain two things.

00:27:20.430 --> 00:27:23.210
The first is, of course,
your plugin bundle that you've built.

00:27:23.350 --> 00:27:27.130
The other thing is the
installer section's plist file,

00:27:27.130 --> 00:27:33.740
and that determines the order
of your plugin relative to the

00:27:33.800 --> 00:27:39.900
[Transcript missing]

00:27:40.560 --> 00:27:41.500
Here's our bundle.

00:27:41.500 --> 00:27:44.330
And that should be it.

00:27:44.400 --> 00:27:49.200
Now let's go ahead and double click
our package and see what happens.

00:27:49.840 --> 00:27:55.360
Now I didn't change the
installer section's plist file,

00:27:55.420 --> 00:27:58.030
but if we wanted to have
our hello world be first,

00:27:58.040 --> 00:28:00.670
we would have done that and
we could have made it first.

00:28:01.210 --> 00:28:02.920
Can you read me?

00:28:02.920 --> 00:28:03.740
And there you go.

00:28:03.740 --> 00:28:06.340
And so let's try to click
continue and goodbye.

00:28:06.600 --> 00:28:10.100
And that is a simple plugin.

00:28:16.820 --> 00:28:17.700
Thank you, Jack.

00:28:17.730 --> 00:28:19.200
As you can see,
it's pretty easy to create

00:28:19.200 --> 00:28:19.830
an installer plugin.

00:28:19.840 --> 00:28:23.530
So, some of the requirements and
restrictions on these plugins.

00:28:23.540 --> 00:28:26.960
First of all, installer plugins are
only available on Tiger.

00:28:26.960 --> 00:28:29.920
So if you make a package and
you include an installer plugin,

00:28:29.920 --> 00:28:32.570
these plugins will be
ignored on previous builds.

00:28:32.600 --> 00:28:38.630
What this means is that you shouldn't
rely on your plugins for serialization

00:28:38.630 --> 00:28:40.320
of your application or for registration.

00:28:42.300 --> 00:28:47.490
You should use this as a helper to
get the best user experience for your

00:28:47.570 --> 00:28:48.440
customers while they're installing.

00:28:48.440 --> 00:28:51.870
Also,
it's important to note that now we have

00:28:51.870 --> 00:28:54.720
a new feature in the installer in Tiger,
which is multiple CD or

00:28:54.790 --> 00:28:57.230
disc DVD installs.

00:28:57.310 --> 00:29:00.100
And with this,
that means that your plugin's resources

00:29:00.130 --> 00:29:01.680
may not be available at all times.

00:29:01.680 --> 00:29:04.540
So it's very important that
your plugins do not access their

00:29:04.540 --> 00:29:07.780
resources or data while they are
not currently active or not being,

00:29:07.780 --> 00:29:10.290
methods aren't being called from
the installer on your plugins.

00:29:10.300 --> 00:29:13.520
So with that, I'm going to hand it
over to Peter Bierman,

00:29:13.520 --> 00:29:15.420
who's going to talk about
distribution scripts.

00:29:15.420 --> 00:29:15.960
Peter?

00:29:22.560 --> 00:29:23.790
- Thank you, Chris.

00:29:23.800 --> 00:29:24.750
I'm Peter Bierman.

00:29:24.760 --> 00:29:27.840
I work on the installer team
with Chris and Jean-Pierre

00:29:27.840 --> 00:29:28.770
and some other people.

00:29:28.780 --> 00:29:30.740
I'm gonna be talking about
distribution scripts,

00:29:30.740 --> 00:29:32.540
another new feature we have in Tiger.

00:29:32.990 --> 00:29:34.510
Pretty excited about this.

00:29:34.640 --> 00:29:37.280
It's gonna give us
some cool new features.

00:29:37.840 --> 00:29:40.600
So distribution scripts are
all about controlling the

00:29:40.600 --> 00:29:42.480
installer's user interface.

00:29:42.480 --> 00:29:46.040
I spend a lot of my time advising
developers that if they can,

00:29:46.040 --> 00:29:47.980
they should use a drag
and drop installer,

00:29:47.980 --> 00:29:49.760
but often they can't and
it's because they have a more

00:29:49.760 --> 00:29:51.060
complicated piece of software.

00:29:51.060 --> 00:29:53.800
Usually as their software
gets more complicated,

00:29:53.870 --> 00:29:57.070
they move into using what we
call M packages or meta packages

00:29:57.070 --> 00:29:58.980
that Jean-Pierre talked about.

00:29:59.190 --> 00:30:02.360
And when you start using meta packages,
it gets to be difficult to

00:30:02.450 --> 00:30:04.200
control the installer's UI.

00:30:05.380 --> 00:30:07.730
The good thing about using
the installer is that you get

00:30:07.800 --> 00:30:09.270
a consistent user experience.

00:30:09.280 --> 00:30:13.550
The downside of especially meta
packages is it's hard to create

00:30:13.550 --> 00:30:15.870
that consistent user experience.

00:30:16.120 --> 00:30:19.480
So here's the diagram of the
installation package that

00:30:19.690 --> 00:30:21.720
Jean-Pierre showed you earlier.

00:30:21.810 --> 00:30:23.620
As you can see,
there's lots of little files

00:30:23.650 --> 00:30:25.030
you have to keep track of.

00:30:25.040 --> 00:30:27.520
In particular,
this section in the middle is all

00:30:27.580 --> 00:30:31.180
the user interface controlling files.

00:30:31.180 --> 00:30:34.530
Lots of flags, lots of keywords,
things that have been

00:30:34.530 --> 00:30:35.810
added over the years.

00:30:35.910 --> 00:30:37.780
When you start to deal
with meta packages,

00:30:37.840 --> 00:30:41.040
you have all the same packages
and all the same flags.

00:30:41.210 --> 00:30:43.320
They're just scattered everywhere.

00:30:43.430 --> 00:30:45.300
So we've created distribution scripts.

00:30:45.330 --> 00:30:49.980
Distribution scripts take all of those
flags and move them into a single file.

00:30:50.330 --> 00:30:54.200
Hopefully it makes it easier for
you guys to create your packages,

00:30:54.270 --> 00:30:57.810
keep track of how the user
interface is going to look when

00:30:57.810 --> 00:31:01.190
the user is using your installer.

00:31:01.440 --> 00:31:02.600
So how do we do this?

00:31:02.650 --> 00:31:05.130
We're going to use XML and JavaScript.

00:31:05.240 --> 00:31:09.610
We've decided to use XML because it's
easy for machines to read and write,

00:31:09.710 --> 00:31:12.380
and because we're using
application specific elements,

00:31:12.430 --> 00:31:14.620
it can be easy for
humans to read and write.

00:31:14.620 --> 00:31:16.880
We're also using JavaScript.

00:31:17.590 --> 00:31:20.650
JavaScript looks like C,
but it has a lot of cool

00:31:20.650 --> 00:31:25.350
features like garbage collection
and associative arrays.

00:31:25.360 --> 00:31:27.140
It makes some things a
lot easier to deal with.

00:31:27.690 --> 00:31:32.500
It's also sandboxed inside
of the installer application.

00:31:32.500 --> 00:31:32.600
That means it's not going to
be able to do anything else.

00:31:32.600 --> 00:31:35.480
So we're going to use the
Mac OS X installer technology and

00:31:35.480 --> 00:31:37.600
introduce new top requested features.

00:31:37.600 --> 00:31:38.290
We're going to use XML and JavaScript.

00:31:38.290 --> 00:31:39.560
We've decided to use XML because it's
easy for machines to read and write,

00:31:39.560 --> 00:31:40.590
and because we're using
application specific elements,

00:31:40.590 --> 00:31:41.590
it can be easy for
humans to read and write.

00:31:41.600 --> 00:31:43.660
We're also using JavaScript.

00:31:43.770 --> 00:31:46.690
JavaScript looks like C,
but it has a lot of cool

00:31:46.690 --> 00:31:50.670
features like garbage collection
and associative arrays.

00:31:50.670 --> 00:31:53.900
It makes some things a
lot easier to deal with.

00:31:53.900 --> 00:31:54.470
We're also using XML and
JavaScript because it's easy

00:31:54.480 --> 00:31:54.890
for humans to read and write.

00:31:54.990 --> 00:32:05.100
It makes some things a
lot easier to deal with.

00:32:06.370 --> 00:32:08.880
Well, you'd have a file.

00:32:08.880 --> 00:32:09.940
It can be called anything.

00:32:09.940 --> 00:32:12.350
We've gotten away from those
package-based file names.

00:32:12.480 --> 00:32:15.300
It has to have a .dist extension.

00:32:15.480 --> 00:32:20.480
It ends up in the contents subfolder
of your package or mPackage.

00:32:20.640 --> 00:32:22.770
And within the
distribution script itself,

00:32:23.080 --> 00:32:27.820
any of the strings you use that are
user interface items can actually

00:32:27.970 --> 00:32:31.890
be keys for the localized strings
elsewhere in your package bundle.

00:32:34.510 --> 00:32:36.220
So let's take a closer look
at distribution scripts.

00:32:36.240 --> 00:32:40.200
Here's some of the beginnings of
the distribution script vocabulary.

00:32:40.200 --> 00:32:43.830
You can see here there's the first
element is installer GUI script.

00:32:44.040 --> 00:32:47.130
This actually is the container
element for all the other elements

00:32:47.180 --> 00:32:48.490
used inside the distribution script.

00:32:48.580 --> 00:32:53.980
Then we see a title element which within
the title element contains your title,

00:32:53.980 --> 00:32:57.930
your package title, and a welcome,
a read me, and license elements.

00:32:58.240 --> 00:33:01.870
These use a file attribute to
specify a file located in your

00:33:01.870 --> 00:33:06.340
package resources much like there
are flags for these same things in

00:33:06.340 --> 00:33:08.990
the current installer package format.

00:33:09.720 --> 00:33:11.400
Things get a little
more complicated here.

00:33:11.410 --> 00:33:13.940
We have a package reference element.

00:33:13.940 --> 00:33:18.970
This has an ID attribute that's used to
refer to the package reference element

00:33:19.090 --> 00:33:20.450
elsewhere in the distribution script.

00:33:20.550 --> 00:33:24.690
It also has a kilobytes attribute,
which will be used by the installer

00:33:24.690 --> 00:33:28.540
UI to show how big your package is,
this particular package.

00:33:28.540 --> 00:33:30.900
Finally,
there's a file URL here for where

00:33:30.980 --> 00:33:34.540
the installer framework itself
will go and get your package when

00:33:34.540 --> 00:33:36.450
it comes down to do installing.

00:33:36.540 --> 00:33:40.320
One of the interesting things about
this is what you're seeing here

00:33:40.320 --> 00:33:42.540
is the beginnings of the installer
doesn't actually need to look at your

00:33:42.540 --> 00:33:44.540
packages to present any of the UI.

00:33:44.540 --> 00:33:48.240
It's actually going to try to get
as much of this information from you

00:33:48.240 --> 00:33:52.600
up front and then hand your list of
packages to the framework when it's done.

00:33:53.720 --> 00:33:56.480
So, when we get to the UI,
we get to the custom install panel,

00:33:56.480 --> 00:33:58.350
and things get even more interesting.

00:33:58.430 --> 00:34:00.720
Here we see a choices outline element.

00:34:00.740 --> 00:34:04.120
This is the beginnings of you
setting up what exactly that custom

00:34:04.120 --> 00:34:05.980
install panel should look like.

00:34:06.030 --> 00:34:07.800
There's two line elements here.

00:34:07.830 --> 00:34:11.260
They refer to two choice
elements named app and extra.

00:34:11.450 --> 00:34:13.220
These names can be whatever you want.

00:34:13.340 --> 00:34:17.380
The choice element,
the first choice element here,

00:34:17.380 --> 00:34:18.320
we've called app.

00:34:18.330 --> 00:34:19.040
It has a title.

00:34:19.270 --> 00:34:20.640
In this case, it's not localized.

00:34:20.640 --> 00:34:22.580
It's just right in the
distribution script.

00:34:22.600 --> 00:34:26.190
And it also has within it a
connection to the package ref element

00:34:26.220 --> 00:34:27.580
you saw in the previous slide.

00:34:27.600 --> 00:34:30.140
And we do that again
with the extras item.

00:34:30.660 --> 00:34:33.010
So you put those two together
and we end up with a very

00:34:33.010 --> 00:34:35.420
familiar custom install panel.

00:34:35.450 --> 00:34:38.420
There's nothing on this screen that
you can't do yourself currently

00:34:38.420 --> 00:34:41.860
with packages or mPackages,
but it's a little simpler to

00:34:41.860 --> 00:34:43.590
do with distribution scripts.

00:34:44.590 --> 00:34:46.150
and we can throw that all together.

00:34:46.420 --> 00:34:49.340
Here's the whole thing,
all of them combined.

00:34:49.410 --> 00:34:53.100
You can see the various choice elements,
line elements,

00:34:53.230 --> 00:34:56.080
how they all are connected to each other.

00:34:56.830 --> 00:35:00.170
So that's what you can do
today with a new syntax,

00:35:00.370 --> 00:35:01.890
XML file, yeah, it sounds great.

00:35:02.070 --> 00:35:04.330
But there's a bunch of cool
new things you can do with it.

00:35:04.380 --> 00:35:09.220
For example, you can now attach multiple
packages to any one choice.

00:35:09.220 --> 00:35:12.870
You can break up your software in
any way you want and connect the

00:35:12.920 --> 00:35:16.680
things to the choices the user sees
in the UI completely separately

00:35:16.680 --> 00:35:18.030
from how you package your software.

00:35:18.040 --> 00:35:20.990
You can attach the same
package to different choices.

00:35:21.020 --> 00:35:25.970
You can have some app support
package that never changes that's

00:35:26.070 --> 00:35:29.530
attached to all the various things
that the user could install.

00:35:29.750 --> 00:35:31.800
You can show the same choice
in more than one place.

00:35:31.920 --> 00:35:37.060
You could create a very creative
custom install UI where you've

00:35:37.060 --> 00:35:41.630
got groups of things and,
well, you can use your imagination there.

00:35:42.010 --> 00:35:45.860
and you can enable or select
choices based on the user's other

00:35:45.860 --> 00:35:49.390
selections inside the customization
panel and the system configuration.

00:35:49.600 --> 00:35:52.430
Now, with M packages, you can do this,
but it's difficult.

00:35:52.660 --> 00:35:56.530
There are flags and most of it
involves packages ruling themselves

00:35:56.630 --> 00:35:59.460
out because they don't like how
the machine's configured or so on.

00:35:59.530 --> 00:36:01.550
With distribution scripts,
it's much more explicit.

00:36:01.690 --> 00:36:05.710
You have very complete control over
whether a package is enabled or disabled,

00:36:05.710 --> 00:36:07.940
selected or deselected.

00:36:09.310 --> 00:36:10.610
So how do we do that?

00:36:10.720 --> 00:36:13.900
Well, we have these choice elements
I showed you a few seconds ago.

00:36:13.940 --> 00:36:17.210
And the choice elements represent
the choices a user can make

00:36:17.360 --> 00:36:18.770
inside the customization UI.

00:36:18.980 --> 00:36:22.500
The choice elements have
attributes like selected,

00:36:22.500 --> 00:36:23.740
enabled, and visible.

00:36:23.780 --> 00:36:27.690
And the values of those attributes
can be JavaScript expressions.

00:36:29.530 --> 00:36:33.330
So here we see again a very
simple representation of

00:36:33.450 --> 00:36:35.560
the custom install panel.

00:36:35.560 --> 00:36:40.360
And let's take a closer
look at those two choices.

00:36:40.360 --> 00:36:46.320
A very common idiom is for people to
have an app in some dependent package.

00:36:46.320 --> 00:36:48.680
Or they want these two things
to be related to each other.

00:36:48.730 --> 00:36:52.220
For example, if I deselect the app,
I want the extras to become

00:36:52.270 --> 00:36:53.780
deselected and disabled.

00:36:53.780 --> 00:36:57.280
So the user can't install the
extras separately from the app.

00:36:57.280 --> 00:37:01.470
I reselect the app,
the extras become enabled, et cetera.

00:37:01.640 --> 00:37:04.790
So how would we do that
using a distribution script?

00:37:05.100 --> 00:37:09.480
Here we see the choices outline again
that just sets up the outline view.

00:37:09.480 --> 00:37:12.930
And we see our two choices,
our app and our extras choice.

00:37:13.840 --> 00:37:19.730
In the attributes for the extras choice,
we have an enabled attribute

00:37:19.730 --> 00:37:21.560
and a selected attribute.

00:37:22.620 --> 00:37:25.740
The enabled attribute is
a JavaScript expression.

00:37:25.780 --> 00:37:28.080
It's choices.app.selected.

00:37:28.080 --> 00:37:34.650
Now that refers back to the app choice
that's in the middle of the screen there.

00:37:36.130 --> 00:37:40.780
That choices word there that's
in that JavaScript expression is

00:37:40.900 --> 00:37:44.370
actually an object that's provided by
the installer's runtime that allows

00:37:44.370 --> 00:37:48.640
you to connect to the attributes
to the choices declared in XML.

00:37:48.800 --> 00:37:53.300
These are all the attributes of
the choices are dynamic at runtime,

00:37:53.300 --> 00:37:56.580
so when the user checks something,
you can determine whether it's checked,

00:37:56.760 --> 00:38:00.250
which one's checked,
whether it's enabled, things like that.

00:38:01.300 --> 00:38:05.600
The selected attribute is
a little more complicated.

00:38:05.620 --> 00:38:08.240
In this case,
we want the user to only be able to

00:38:08.240 --> 00:38:10.640
select it if the app is selected.

00:38:10.690 --> 00:38:14.640
So that's that first half of
that and expression there.

00:38:14.640 --> 00:38:18.820
The other half of it is
sort of self-referring.

00:38:18.850 --> 00:38:21.120
What that means is that
if the app is selected,

00:38:21.150 --> 00:38:25.100
the value of the selected
attribute of the extras is equal to

00:38:25.230 --> 00:38:27.000
whatever the user wants it to be.

00:38:27.000 --> 00:38:29.010
If the user clicks it, it's selected.

00:38:29.170 --> 00:38:33.130
If the user unselects it,
it's deselected.

00:38:34.560 --> 00:38:37.000
And again,
that choices object is provided

00:38:37.000 --> 00:38:40.380
by the installer runtime,
connects you to all the live state

00:38:40.380 --> 00:38:42.700
of the various choice elements.

00:38:42.750 --> 00:38:46.900
Now, there's a couple other objects that
we provide in the installer runtime,

00:38:46.900 --> 00:38:48.890
and I'll talk about those.

00:38:49.170 --> 00:38:52.860
So here we have the
JavaScript system object.

00:38:52.860 --> 00:38:56.280
This is, again,
provided by the installer's runtime.

00:38:56.280 --> 00:39:00.980
It contains a bunch of methods
and static data about the

00:39:01.070 --> 00:39:03.000
configuration of the machine.

00:39:03.000 --> 00:39:06.140
It lets you inspect that from
your distribution script.

00:39:06.140 --> 00:39:07.000
And it's read only.

00:39:07.000 --> 00:39:09.860
You can't go into it and change
things about the machine.

00:39:09.860 --> 00:39:12.080
You can't say, oh,
the machine has two gigs of RAM now.

00:39:12.080 --> 00:39:13.700
That's not going to be possible.

00:39:13.740 --> 00:39:15.820
But you can use things like sysctl.

00:39:15.820 --> 00:39:19.910
You can get the values out of a
plist anywhere on the file system.

00:39:19.920 --> 00:39:23.380
And you can use the I/O registry to
find out if your hardware is connected,

00:39:23.380 --> 00:39:24.170
for example.

00:39:25.430 --> 00:39:26.540
Here's an example.

00:39:26.540 --> 00:39:30.020
We can set up our application
to only be enabled if the

00:39:30.120 --> 00:39:31.940
machine has 128 megs of RAM.

00:39:31.940 --> 00:39:36.010
Here you see the enabled
attribute of the choice,

00:39:36.010 --> 00:39:37.640
of the app choice.

00:39:37.640 --> 00:39:41.950
It's connected to a JavaScript function
that we've named has 128 megabytes.

00:39:42.010 --> 00:39:45.120
And that function's contained
within a script element.

00:39:45.120 --> 00:39:47.260
You can have as many of these
script elements as you'd like

00:39:47.260 --> 00:39:48.650
within your distribution script.

00:39:48.890 --> 00:39:52.350
And you can put any JavaScript you'd
like inside these script elements.

00:39:52.360 --> 00:39:55.840
Here we have a function that
I've written has 128 megs of RAM.

00:39:55.840 --> 00:40:00.230
It uses the system.sysctl method to
find out how much physical RAM the

00:40:00.230 --> 00:40:03.680
machine has and returns yes or no
depending on whether there's enough.

00:40:06.170 --> 00:40:09.460
So that's a pretty quick look at
some of the neat things you can do.

00:40:09.480 --> 00:40:12.620
Jack's gonna look at some of the more
advanced things we can do with it.

00:40:12.620 --> 00:40:13.970
Jack?

00:40:20.310 --> 00:40:22.680
Okay, got the clip on too.

00:40:22.680 --> 00:40:27.340
So,
first let's just go ahead and dive into

00:40:27.340 --> 00:40:30.930
a package that is using a distribution
script and look at something that

00:40:31.180 --> 00:40:33.040
you've never been able to do before.

00:40:33.040 --> 00:40:34.790
We're really excited about this.

00:40:34.800 --> 00:40:38.360
Okay.

00:40:45.200 --> 00:40:50.400
[Transcript missing]

00:40:53.200 --> 00:41:02.600
So first off, just going over what
Peter showed you in the slides,

00:41:03.170 --> 00:41:04.400
You can do this.

00:41:04.420 --> 00:41:05.980
Again, this is a very common idiom.

00:41:06.020 --> 00:41:11.310
Say you had a font that needed
to go with your application

00:41:11.370 --> 00:41:15.540
and you wanted to provide this
kind of optional install here,

00:41:15.540 --> 00:41:17.360
but the font's no good without the app.

00:41:17.380 --> 00:41:19.300
Something like that you can do now.

00:41:19.340 --> 00:41:21.870
Now, let's look at this.

00:41:22.120 --> 00:41:25.340
This is a little more interesting.

00:41:25.340 --> 00:41:29.990
You'll notice that I clicked on this,
but you see something happened in here.

00:41:30.000 --> 00:41:32.040
- All right.

00:41:32.050 --> 00:41:34.330
- So let's go ahead and...

00:41:38.400 --> 00:41:46.980
We look at this expanded here and
you'll see that as I click these items,

00:41:46.980 --> 00:41:49.040
other items become selected.

00:41:49.110 --> 00:41:50.400
Finally we can do stuff like this.

00:41:50.400 --> 00:41:51.400
This is great.

00:41:51.400 --> 00:41:54.010
So let's look at another example.

00:42:03.900 --> 00:42:04.900
and the rest of the team.

00:42:04.900 --> 00:42:07.090
So, well this isn't very interesting,
is it?

00:42:07.100 --> 00:42:13.020
But let's just go ahead for a moment
and look at the code for this.

00:42:13.020 --> 00:42:14.940
This is,
let me introduce you to the first

00:42:14.940 --> 00:42:17.220
JavaScript I've ever written,
literally.

00:42:17.220 --> 00:42:19.810
This took me minutes to figure out.

00:42:19.940 --> 00:42:21.980
It's very, very, very simple.

00:42:21.980 --> 00:42:27.060
So we have some standard stuff
in here like has a welcome.rtf.

00:42:27.060 --> 00:42:29.060
Okay, fine.

00:42:29.060 --> 00:42:31.780
Then we start talking
about here the choices,

00:42:31.780 --> 00:42:37.140
the line items that appear in the
custom pane and the custom install UI.

00:42:37.140 --> 00:42:41.390
And then we begin to actually accumulate
information about each of these choices

00:42:41.400 --> 00:42:44.770
in a few different other XML tags here.

00:42:44.820 --> 00:42:47.360
First we're saying here,
here's choice that

00:42:47.360 --> 00:42:48.950
we're referring to as A.

00:42:48.970 --> 00:42:50.150
It's got a title.

00:42:50.210 --> 00:42:52.220
It's called Nifty Application.

00:42:52.220 --> 00:42:55.220
Then we have a choice called B.

00:42:55.220 --> 00:42:57.490
B has a title as well.

00:42:57.600 --> 00:43:01.280
And we're saying that it's enabled.

00:43:01.280 --> 00:43:05.160
You can select this package.

00:43:05.190 --> 00:43:08.840
But here's another
interesting field here,

00:43:08.840 --> 00:43:09.910
Start Selected.

00:43:10.150 --> 00:43:15.020
What is the default selection
state of this choice?

00:43:15.540 --> 00:43:17.860
Well, it's a function.

00:43:18.060 --> 00:43:19.980
So what does this function do?

00:43:20.150 --> 00:43:28.570
Well, we've gone and embedded some
JavaScript here inside of this XML tag.

00:43:28.610 --> 00:43:29.730
Has cookie.

00:43:29.770 --> 00:43:33.740
So say you wanted to,
say your application goes

00:43:33.740 --> 00:43:36.820
and lays down a cookie file,
and then on subsequent

00:43:36.820 --> 00:43:39.310
use of an installer,
you don't want to present

00:43:39.430 --> 00:43:40.980
that option by default.

00:43:40.980 --> 00:43:44.920
So on easy install,
a more reasonable thing happens.

00:43:45.080 --> 00:43:49.640
So, simply here, I go ahead and use the
built-in system object,

00:43:49.690 --> 00:43:54.000
system, files, file exists at path,
and then I give it a path.

00:43:54.110 --> 00:43:59.590
So, let's go ahead and, for fun,
go ahead and create that path.

00:44:05.900 --> 00:44:06.730
Permission denied.

00:44:06.730 --> 00:44:07.900
I've been denied.

00:44:07.900 --> 00:44:10.900
We have our ways.

00:44:10.900 --> 00:44:13.440
Oh.

00:44:13.450 --> 00:44:14.280
- Uh oh.

00:44:14.280 --> 00:44:15.120
- Perhaps we don't.

00:44:15.120 --> 00:44:18.540
Okay.

00:44:39.970 --> 00:44:47.030
Well, I assure you that if I had
successfully authorized here,

00:44:47.030 --> 00:44:53.880
that upon second launch of that package,
we would have seen that by default,

00:44:53.880 --> 00:44:57.110
that optional item would
have been deselected.

00:45:01.890 --> 00:45:06.780
So that is a quick demo
of distribution scripts.

00:45:06.800 --> 00:45:14.080
And I'm going to hand the
stage back over to Peter.

00:45:20.140 --> 00:45:21.100
Thanks Jack.

00:45:21.110 --> 00:45:24.540
We actually tried a lot of this stuff
earlier today and something's got to go

00:45:24.540 --> 00:45:27.770
wrong during the actual presentation,
so there you have it.

00:45:28.580 --> 00:45:30.770
So if you do these, if you work on these,
there's a couple things

00:45:30.810 --> 00:45:31.910
you should watch out for.

00:45:31.920 --> 00:45:35.700
Both XML and JavaScript are
case sensitive.

00:45:35.700 --> 00:45:38.870
If you run into some mysterious problems,
you're confused,

00:45:38.890 --> 00:45:41.280
try using user bin XML lint.

00:45:41.340 --> 00:45:43.300
It's included in the system.

00:45:43.300 --> 00:45:46.160
It'll look through your XML,
point out any problems you have,

00:45:46.160 --> 00:45:48.510
missing characters, missing slashes,
things like that.

00:45:48.560 --> 00:45:52.640
One of the most common things you have to
watch out for is there's five characters

00:45:52.640 --> 00:45:54.730
you have to escape in all XML documents.

00:45:54.740 --> 00:45:57.150
That's the left and right angle brackets.

00:45:57.580 --> 00:45:59.480
The single and double
quote and the ampersand.

00:45:59.480 --> 00:46:02.540
If you decide to write some
software or some scripts to

00:46:02.540 --> 00:46:05.620
create distribution scripts for
you instead of doing them by hand,

00:46:05.620 --> 00:46:08.900
you can use a function
such as the CF function,

00:46:08.900 --> 00:46:11.680
CFXML,
create string by escaping entities.

00:46:12.960 --> 00:46:14.810
That's a mouthful.

00:46:14.940 --> 00:46:18.000
But beware,
that function has a bug in 10.3.

00:46:18.000 --> 00:46:20.440
It doesn't make it very useful,
but it is fixed in the tiger

00:46:20.440 --> 00:46:22.160
build that you all have.

00:46:22.190 --> 00:46:26.270
You can also use similar functions
in your favorite scripting languages.

00:46:27.130 --> 00:46:29.160
So, distribution scripts.

00:46:29.220 --> 00:46:31.680
This was just a teaser.

00:46:31.680 --> 00:46:35.230
We hope to, by the GM version of Tiger,
have what we're going to call a

00:46:35.310 --> 00:46:38.150
package translator that will look
at your existing M packages and

00:46:38.150 --> 00:46:40.730
build you a distribution script so
you'll have something to start with.

00:46:40.840 --> 00:46:45.530
There's also a session download that's
available on connect.apple.com for this

00:46:45.530 --> 00:46:49.980
session that includes a documentation,
a test app to play with distributions,

00:46:49.980 --> 00:46:52.380
and some sample distribution scripts.

00:46:53.000 --> 00:46:56.110
Unfortunately,
the installer that is in the Tiger build

00:46:56.110 --> 00:46:59.250
that you all have doesn't currently
deal with distribution scripts.

00:46:59.320 --> 00:47:04.800
We're in the process of building them
up and adding more support for them.

00:47:04.950 --> 00:47:08.160
So, now's a great time for us to
hear your feedback about it.

00:47:08.340 --> 00:47:09.880
It's still under construction.

00:47:10.050 --> 00:47:13.750
Please play with it and send your
feedback to installer-dist-feedback

00:47:13.780 --> 00:47:15.390
at group.apple.com.

00:47:17.050 --> 00:47:21.110
and now the man you've been
listening to all through the session,

00:47:21.110 --> 00:47:23.780
Jack, is going to come up and
give his presentation on

00:47:23.780 --> 00:47:25.640
building compatible packages.

00:47:25.670 --> 00:47:27.040
Jack.

00:47:30.800 --> 00:47:32.000
Hello, hello, hello, hello, hello.

00:47:32.000 --> 00:47:32.730
Is the mic on?

00:47:32.800 --> 00:47:33.320
Okay.

00:47:33.470 --> 00:47:36.930
So,
let me formally introduce myself here.

00:47:37.100 --> 00:47:41.360
My name is Jack Matthew,
and my team at Apple are Apple's...

00:47:41.360 --> 00:47:44.010
Can we get the slides on,
please?

00:47:48.550 --> 00:47:51.550
So my team are Apple's
package developers.

00:47:51.570 --> 00:47:53.100
We're like you guys.

00:47:53.210 --> 00:47:58.330
We work on the OS install,
the OS updates, the iLife applications,

00:47:58.400 --> 00:48:02.590
the Pro applications such as Final Cut,
DVD Studio Pro,

00:48:02.690 --> 00:48:05.830
a bunch of other little random
small updates like security updates.

00:48:05.840 --> 00:48:09.250
We also help keep
software update running.

00:48:09.710 --> 00:48:13.290
And we work on the
Windows installers as well.

00:48:13.530 --> 00:48:17.470
So I'm here to talk about compatibility.

00:48:17.580 --> 00:48:20.920
We've seen some really great
new features here today,

00:48:20.990 --> 00:48:24.050
but if you're like us,
you have to deliver software to

00:48:24.050 --> 00:48:25.980
people that have older machines.

00:48:26.130 --> 00:48:29.460
So let me just go over what
I'm gonna talk about here.

00:48:29.650 --> 00:48:33.360
First of all,
making packages that work with

00:48:33.480 --> 00:48:35.360
both 10.1 as well as Tiger.

00:48:35.360 --> 00:48:38.400
We're going to talk about some
of the things that have happened

00:48:38.400 --> 00:48:41.420
to the package format over time,
go over some features that you

00:48:41.480 --> 00:48:42.830
may or may not be aware of.

00:48:42.940 --> 00:48:50.430
We're going to talk about if your
application or if your package really

00:48:50.430 --> 00:48:54.260
must use some of these new features
that we've been talking about here,

00:48:54.840 --> 00:48:58.020
that if someone gets a hold
of that on an older system,

00:48:58.020 --> 00:49:00.200
that the right thing happens.

00:49:00.200 --> 00:49:02.640
And then we're going to talk
about packages that are a

00:49:02.640 --> 00:49:04.220
little bit more complicated.

00:49:04.220 --> 00:49:10.470
They use things like custom install and
a mixture of some of these new and old

00:49:10.470 --> 00:49:14.860
features and kind of how to get the best,
make some compromises,

00:49:14.860 --> 00:49:18.450
and deliver something that's going to
work for the maximum number of people.

00:49:19.820 --> 00:49:22.540
So, first off, simple packages.

00:49:22.540 --> 00:49:23.400
What do I mean by that?

00:49:23.570 --> 00:49:27.200
Packages that basically
just install your bits.

00:49:27.270 --> 00:49:28.140
Little more than that.

00:49:28.140 --> 00:49:32.110
Maybe they run a pre or
post processing script.

00:49:32.710 --> 00:49:38.720
So the first thing to understand is that
a package that you built on 10.1 is still

00:49:38.720 --> 00:49:41.660
going to run when you launch it on Tiger.

00:49:41.830 --> 00:49:47.870
And similarly, if you built your package
using PackageMaker on Tiger,

00:49:48.090 --> 00:49:51.350
it's going to run on 10.1.

00:49:51.780 --> 00:49:55.510
and if you need a little bit more
functionality in your script,

00:49:55.590 --> 00:49:59.820
the installation check and volume
check scripts as well as the pre and

00:49:59.820 --> 00:50:05.900
post flight scripts still work in
Tiger and work all the way back to 10.1.

00:50:06.380 --> 00:50:10.050
and if you need a little bit more
functionality in your script,

00:50:10.090 --> 00:50:11.630
the installation check and volume
check scripts as well as the pre and

00:50:11.630 --> 00:50:11.630
post flight scripts still work in
Tiger and work all the way back to 10.1.

00:50:12.050 --> 00:50:16.360
So 10.1, something called myapp.pkg.

00:50:16.660 --> 00:50:20.680
As you can see,
especially in the scripts up there,

00:50:20.720 --> 00:50:25.370
my app is attached to a lot
of these resource names.

00:50:25.790 --> 00:50:27.480
and We dumped that in 10.2.

00:50:27.570 --> 00:50:31.590
In 10.2,
packages became a real NSBundle and

00:50:31.590 --> 00:50:35.180
they have things like an info P list
and all the resources inside of

00:50:35.180 --> 00:50:37.520
that package have a consistent name.

00:50:38.620 --> 00:50:39.400
This is good.

00:50:39.400 --> 00:50:44.460
This is good because, well, first of all,
for users, if they rename that package,

00:50:44.460 --> 00:50:45.320
it works.

00:50:45.320 --> 00:50:46.660
It used to break.

00:50:46.660 --> 00:50:51.230
Consistent file names are really
useful for things like automation.

00:50:51.240 --> 00:50:56.760
And Apple localizes its software
into 15 different languages.

00:50:56.760 --> 00:51:02.270
A nice little bonus that happened
was that by separating the

00:51:02.270 --> 00:51:08.320
meta install flags from things
like the description and title,

00:51:08.750 --> 00:51:12.300
now we no longer have some
of these meta install flags

00:51:12.300 --> 00:51:13.800
accidentally localized for us.

00:51:13.800 --> 00:51:15.460
So that was a nice little thing.

00:51:15.810 --> 00:51:18.870
Additionally,
the payload and catalog files,

00:51:18.890 --> 00:51:20.730
that is the bill of
materials and the archive,

00:51:20.730 --> 00:51:22.990
changed in file name only.

00:51:23.000 --> 00:51:25.830
So under the hood,
they're the same exact files.

00:51:25.840 --> 00:51:30.060
So what PackageMaker does for you
is create symlinks that when you

00:51:30.070 --> 00:51:33.500
run that package on an older system,
it's tricked into the

00:51:33.500 --> 00:51:34.610
right thing happening.

00:51:37.150 --> 00:51:40.780
So, some features and changes here.

00:51:40.780 --> 00:51:46.070
In 10.2,
we added a feature called Find Files.

00:51:46.070 --> 00:51:50.860
And Find Files is useful for updating
your application in a location

00:51:50.860 --> 00:51:52.760
that the user may have moved it to.

00:51:52.760 --> 00:51:56.250
We use this extensively in all
the OS updates because we only

00:51:56.250 --> 00:51:58.340
ship parts of each application.

00:51:58.340 --> 00:52:00.520
We don't reship mail when
we want to update it.

00:52:00.600 --> 00:52:02.410
Just a little bit that changed.

00:52:04.170 --> 00:52:06.100
So, we use it quite a lot.

00:52:06.320 --> 00:52:07.630
We depend on it.

00:52:07.820 --> 00:52:11.220
We also added the
background pictures feature,

00:52:11.220 --> 00:52:13.960
which allows you to include custom
artwork for the installer to display.

00:52:13.960 --> 00:52:17.580
And in 10.3,
we made that Find Files feature

00:52:17.580 --> 00:52:19.520
a little bit easier to use.

00:52:19.520 --> 00:52:23.890
And another notable thing for app
package authors here is that we

00:52:23.890 --> 00:52:28.600
enhanced the Follow Sim Links feature
so that if those Sim Links point

00:52:28.600 --> 00:52:32.020
to things on other devices,
that it works.

00:52:34.090 --> 00:52:36.960
and on Tiger for application
package developers,

00:52:36.960 --> 00:52:44.870
there are more features that apply to
you guys than any other OS release.

00:52:45.690 --> 00:52:51.110
So, I also wanted to mention some
things that you should be aware

00:52:51.660 --> 00:52:57.380
of if your application has
to work on 10.2 or earlier.

00:52:57.380 --> 00:53:01.120
Now, these are things that
we've fixed in 10.3,

00:53:01.120 --> 00:53:05.260
but things to keep in mind,
and we'd just like to mention

00:53:05.260 --> 00:53:06.240
them really quickly here.

00:53:06.270 --> 00:53:10.080
So, first of all,
when you make your root,

00:53:10.090 --> 00:53:12.860
make it relative from slash.

00:53:13.400 --> 00:53:15.360
In other words,
if you are creating an application,

00:53:15.360 --> 00:53:18.610
if you are installing an application,
your root should look like root,

00:53:18.610 --> 00:53:22.610
and then applications, and then your app.

00:53:22.840 --> 00:53:26.710
This is as opposed to just selecting
the app as your root and changing the

00:53:26.710 --> 00:53:29.440
default location inside of PackageMaker.

00:53:29.440 --> 00:53:33.330
This actually gets around a
few little edge case bugs,

00:53:33.330 --> 00:53:38.380
and is especially important if
you're using the find files feature.

00:53:38.420 --> 00:53:43.220
What you expect would happen might
not happen if you don't do that.

00:53:43.510 --> 00:53:46.330
Additionally,
make sure that in your root,

00:53:46.570 --> 00:53:48.450
the permissions are correct.

00:53:48.560 --> 00:53:55.040
It should be, you know,
1775 for your root, and so on.

00:53:55.060 --> 00:53:59.110
This is because there's a bug
where on upgrade installs,

00:53:59.130 --> 00:54:03.420
the state of the overwrite
permissions flag is ignored.

00:54:03.420 --> 00:54:05.790
So,
you reinstall the package a second time,

00:54:05.790 --> 00:54:09.070
it's going to make the permissions
be whatever was in your root,

00:54:09.070 --> 00:54:11.000
which might not be what you want.

00:54:11.430 --> 00:54:17.080
Additionally, meta packages do not run
the installation check tool.

00:54:17.080 --> 00:54:21.580
So, simply include that logic inside of
a packages installation check tool.

00:54:21.580 --> 00:54:24.640
And again, all this stuff works
in 10.3 and in Tiger.

00:54:26.840 --> 00:54:29.660
Tiger-only packages.

00:54:29.660 --> 00:54:32.600
You need to use the distribution scripts.

00:54:32.600 --> 00:54:35.220
You need to use plug-ins.

00:54:35.220 --> 00:54:39.300
You want to make sure that if
someone gets a hold of that

00:54:39.300 --> 00:54:44.040
on a 10.3 or earlier system,
that they're not able

00:54:44.040 --> 00:54:45.480
to install that package.

00:54:45.620 --> 00:54:49.180
Because remember,
the 10.3 and earlier don't understand

00:54:49.180 --> 00:54:50.520
what a distribution script is.

00:54:50.520 --> 00:54:51.970
So what do you do?

00:54:52.330 --> 00:54:56.650
So you include an installation
check tool that is going to

00:54:56.900 --> 00:54:59.220
exit with an error value.

00:54:59.220 --> 00:55:01.700
And then on Tiger,
the distribution script is

00:55:01.700 --> 00:55:03.690
going to take precedence.

00:55:05.310 --> 00:55:08.820
So you put your real requirements
inside of your distribution script

00:55:08.910 --> 00:55:12.260
for your Tiger or later customers.

00:55:12.290 --> 00:55:16.380
And on the older systems,
installation check gets run and

00:55:16.380 --> 00:55:18.670
it just exits with an error.

00:55:18.720 --> 00:55:24.440
And one nice thing about this
is that it doesn't require

00:55:24.440 --> 00:55:26.120
any special strings files.

00:55:26.120 --> 00:55:28.720
It's going to use a generic error
message built into the installer.

00:55:28.740 --> 00:55:32.240
So it's going to be
localized for all languages.

00:55:32.280 --> 00:55:35.750
As you can see here,
it just exit with the value 96.

00:55:36.020 --> 00:55:36.730
Very, very simple.

00:55:36.760 --> 00:55:39.310
It's just with bits 5 and 6 set.

00:55:40.590 --> 00:55:48.370
So, packages that use some more advanced
features and are still compatible.

00:55:49.410 --> 00:55:53.380
So, as I mentioned before,
you can include a distribution

00:55:53.380 --> 00:55:57.010
script as well as installation
check and volume check scripts.

00:55:57.060 --> 00:55:59.990
The installation check and
volume check scripts can,

00:56:00.050 --> 00:56:02.760
of course, meet the requirements
for your 10.3 customers,

00:56:02.790 --> 00:56:06.140
and the distribution script
is going to get run on Tiger,

00:56:06.140 --> 00:56:09.800
and you can take advantage of
some of the more subtle controls,

00:56:09.800 --> 00:56:12.780
like the default selection state,
for example.

00:56:14.090 --> 00:56:17.620
Probably some of you have seen this.

00:56:17.670 --> 00:56:21.380
Even if the installation check and
volume check script meet your needs,

00:56:21.440 --> 00:56:26.970
you should also, or you can also,
include a distribution script,

00:56:26.970 --> 00:56:29.990
and on Tiger systems,
it's gonna get rid of

00:56:29.990 --> 00:56:31.790
this user interface.

00:56:33.900 --> 00:56:40.160
So, distribution scripts, again,
are a place where custom install is,

00:56:40.160 --> 00:56:43.310
when we talk about custom install,
we talk about distribution scripts.

00:56:43.390 --> 00:56:46.870
So, there are a few things
to keep in mind here.

00:56:46.880 --> 00:56:51.650
A package or a meta package
is a line item in custom

00:56:51.650 --> 00:56:56.020
install for 10.3 and earlier.

00:56:56.020 --> 00:56:57.720
You're going to have
to package around this.

00:56:58.200 --> 00:57:01.470
Now, there's nothing that says that you
can't make a little bit more subtle

00:57:01.470 --> 00:57:08.680
behavior in 10.3 or in Tiger and have
a slightly different user experience.

00:57:08.680 --> 00:57:10.550
There's nothing wrong with that.

00:57:10.600 --> 00:57:16.560
And also keep in mind that the check
scripts can only skip packages.

00:57:16.560 --> 00:57:19.760
Can this package be
installed at all or not?

00:57:19.760 --> 00:57:24.990
And, again, you can't affect the
default selection state.

00:57:28.100 --> 00:57:32.000
So, moving on to file version checking.

00:57:32.070 --> 00:57:35.070
File version checking provides
a really nice framework for

00:57:35.070 --> 00:57:37.740
you to check versions of files.

00:57:38.120 --> 00:57:42.460
Now, if you really have to check
the version of a file,

00:57:42.480 --> 00:57:46.450
there's nothing that prevents you
today from taking advantage of the

00:57:46.660 --> 00:57:51.600
pre- and post-flight hooks to run
your own code and do the right thing.

00:57:51.600 --> 00:57:55.710
It's more effort, but hey,
you can still do it.

00:57:56.560 --> 00:58:01.000
Multi-CD installation is
another great new feature.

00:58:01.040 --> 00:58:05.610
Now, on Tiger,
you can use distribution scripts to make

00:58:06.090 --> 00:58:11.610
everything happen and have that nice
user experience for Tiger customers.

00:58:11.810 --> 00:58:17.550
And for pre-Tiger customers,
you can simply include extra

00:58:17.550 --> 00:58:23.260
meta packages on each CD that
guide the user into installing.

00:58:23.340 --> 00:58:27.470
For example, install me first .mpkg,
install me second .mpkg,

00:58:27.470 --> 00:58:29.140
install me third .mpkg.

00:58:29.140 --> 00:58:32.180
The important thing to remember
here is that you don't actually

00:58:32.270 --> 00:58:33.600
have to repackage your bits.

00:58:33.670 --> 00:58:36.170
The .pkgs are the same thing.

00:58:36.480 --> 00:58:41.170
You're just including this extra
little thing that make it work.

00:58:42.000 --> 00:58:48.800
[Transcript missing]

00:58:49.070 --> 00:58:52.610
The pre-Tiger installer ignores plugins.

00:58:52.620 --> 00:58:57.710
You can include the plugin and
it will run for Tiger customers.

00:58:57.810 --> 00:59:02.770
What we recommend that you do is
if that UI is really important,

00:59:02.840 --> 00:59:07.130
to move it into your
application and on first launch,

00:59:07.130 --> 00:59:08.280
display it.

00:59:08.530 --> 00:59:12.960
This is a really obvious use for
these plugins as some sort of

00:59:13.030 --> 00:59:16.060
product key or serialization.

00:59:16.060 --> 00:59:24.100
Now, you should keep in mind that someone
can always go in from either the command

00:59:24.100 --> 00:59:30.400
line or third party tools and just
pluck the contents out of your package.

00:59:30.400 --> 00:59:31.600
It's not secure.

00:59:31.600 --> 00:59:33.560
It's not going to be secure in that way.

00:59:33.560 --> 00:59:35.820
It's not a real gateway
for copy protection.

00:59:35.820 --> 00:59:42.370
So you should move that kind
of stuff into your app anyways.

00:59:42.560 --> 00:59:44.250
Here's a screenshot.

00:59:44.390 --> 00:59:49.430
This is the Final Cut Express installer
and you can see some user

00:59:49.430 --> 00:59:53.080
interface that kind of looks
like it's part of the installer.

00:59:53.170 --> 00:59:53.630
It's not.

00:59:53.720 --> 00:59:57.280
It's its own application.

00:59:57.490 --> 01:00:00.840
We don't recommend that you do this,
but it is possible.

01:00:00.840 --> 01:00:03.340
This particular example
used the volume check hook,

01:00:03.390 --> 01:00:05.600
and the installer is just
running an executable,

01:00:05.620 --> 01:00:09.820
so your executable can be as clever
as it needs to be to kind of pretend

01:00:09.820 --> 01:00:12.030
that it's a part of the installer.

01:00:12.100 --> 01:00:14.720
Again, don't do this if you can avoid it.

01:00:14.720 --> 01:00:16.460
There are a number of edge case bugs.

01:00:16.480 --> 01:00:19.280
It just doesn't integrate well.

01:00:21.060 --> 01:00:25.300
So, to summarize what I've talked about,
some of the things that you should

01:00:25.300 --> 01:00:27.530
remember to take away from this.

01:00:27.670 --> 01:00:31.360
So, with regard to compatibility,

01:00:33.400 --> 01:00:35.990
Packages that you made will still work.

01:00:36.000 --> 01:00:43.920
Packages that you make in Tiger can
still work on older versions of the OS.

01:00:43.950 --> 01:00:47.760
And this is all true if you use
PackageMaker as a starting point.

01:00:47.780 --> 01:00:50.230
Now, it doesn't have a lot of features.

01:00:50.260 --> 01:00:53.920
Hopefully we can add those over time,
but still use it as a starting point.

01:00:53.920 --> 01:00:57.640
It's going to create the
basic structure of a package

01:00:57.640 --> 01:00:59.700
that's going to be compatible.

01:01:00.070 --> 01:01:05.940
Now,
as you saw in the 10.1 package diagram,

01:01:05.940 --> 01:01:10.660
there are a lot of other little names
attached to the various resources,

01:01:10.660 --> 01:01:12.530
with the exception of
preflight and postflight.

01:01:12.580 --> 01:01:17.840
So if you use preflight and
postflight across the board,

01:01:17.880 --> 01:01:20.090
it's going to work everywhere.

01:01:20.470 --> 01:01:24.960
and finally you can use a mixture of
both some of the new features we've

01:01:25.030 --> 01:01:28.970
talked about and the old features
together all in the same package.

01:01:29.090 --> 01:01:32.490
And it's going to get you something
that will basically work out for you.

01:01:32.570 --> 01:01:35.540
So at this point I'm going to turn
the stage back over to Jean-Pierre.

01:01:35.580 --> 01:01:37.100
Thanks a lot.

01:01:41.200 --> 01:01:42.510
Thank you.

01:01:42.510 --> 01:01:45.520
So where to find documentation?

01:01:45.630 --> 01:01:48.300
Well,
you can find documentation in two places.

01:01:48.410 --> 01:01:50.870
Let me start with the
second one on that slide,

01:01:50.870 --> 01:01:53.150
the software distribution document.

01:01:53.220 --> 01:01:56.710
This does not refer to the distribution
script that we talked about today.

01:01:56.720 --> 01:02:01.380
This is a document that we have
that explains how to create packages

01:02:01.390 --> 01:02:03.740
and how to use PackageMaker.

01:02:03.740 --> 01:02:06.010
This is actually on our website.

01:02:06.210 --> 01:02:08.060
You can go ahead and download it.

01:02:08.100 --> 01:02:11.870
It's very useful,
explains all the flags in the Info.plist.

01:02:12.010 --> 01:02:15.330
But that's for Panther,
for 10.3 packages.

01:02:15.330 --> 01:02:19.690
We will extend it to include
some of the Tiger features,

01:02:19.830 --> 01:02:22.640
but it's not been updated yet.

01:02:22.640 --> 01:02:26.160
Now we have a session download,
connect.apple.com.

01:02:26.340 --> 01:02:30.770
If you go to the session 403,
you will find something that contains all

01:02:30.770 --> 01:02:32.920
the examples that we showed you today.

01:02:32.920 --> 01:02:37.610
You will find a simple example of file
version checking and how it works,

01:02:37.710 --> 01:02:39.600
some documentation.

01:02:39.600 --> 01:02:39.600
You will also find a few other examples.

01:02:39.600 --> 01:02:42.460
You will also find a folder called
installer plugins that will contain the

01:02:42.460 --> 01:02:49.940
plugins that we showed you today and the
sources and the project file for Xcode.

01:02:49.940 --> 01:02:53.640
And you will also find in there
a distributions folder which

01:02:53.640 --> 01:02:56.480
contains the distribution test app.

01:02:56.480 --> 01:02:59.680
Remember that distributions do not work
with the Tiger installer right now.

01:02:59.780 --> 01:03:03.670
So you need to use the distribution
test app and some of the examples

01:03:03.740 --> 01:03:06.200
that you were shown today as well.

01:03:06.200 --> 01:03:07.580
So thank you for coming for this session.

01:03:07.580 --> 01:03:08.800
We're now going to have a Q&A.

01:03:08.800 --> 01:03:09.340
And I will see you in a few minutes.

01:03:09.340 --> 01:03:09.780
Thank you.

01:03:09.940 --> 01:03:15.800
And I would like to call the
people in my group back on stage,

01:03:15.800 --> 01:03:19.000
including Jonathan Stuecker and Aldo,
our installer tech lead.