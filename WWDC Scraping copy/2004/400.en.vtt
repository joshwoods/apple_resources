WEBVTT

00:00:14.700 --> 00:00:18.060
Thank you very much.

00:00:18.110 --> 00:00:19.020
My name is Scott Adler.

00:00:19.020 --> 00:00:22.420
I'm the Java Classes tech lead,
and welcome to the

00:00:22.420 --> 00:00:25.890
Java State of the Union.

00:00:25.890 --> 00:00:25.890
So this year,

00:00:26.220 --> 00:00:30.340
We're excited that we have
more Java than ever before.

00:00:30.340 --> 00:00:33.300
I mean, this is more than any other year.

00:00:33.350 --> 00:00:34.700
So what do I mean by that?

00:00:34.810 --> 00:00:37.340
We have more releases in the
past year than ever before.

00:00:37.340 --> 00:00:38.980
If you just look,
this is a sample of some of

00:00:38.990 --> 00:00:40.130
the releases we've put out.

00:00:40.210 --> 00:00:42.390
This is more than we've ever
done in one year before,

00:00:42.450 --> 00:00:44.360
and we'll get into detail later on this.

00:00:45.240 --> 00:00:48.540
We've had, of 1.4.2,
which is our most recent release,

00:00:48.540 --> 00:00:51.030
we've had over 2 million
downloads of this.

00:00:51.100 --> 00:00:53.120
And this is not what's
bundled on machines.

00:00:53.120 --> 00:00:56.010
This is people who've gone out and
downloaded it through software update

00:00:56.030 --> 00:00:57.530
or actually gone to our ADC site.

00:00:57.530 --> 00:01:00.280
So this means that people
actually have the latest version

00:01:00.280 --> 00:01:01.660
of Java on their machine.

00:01:01.660 --> 00:01:05.800
We also have more
features than ever before.

00:01:07.430 --> 00:01:09.540
These are just a selection
of some of the features that

00:01:09.540 --> 00:01:10.900
we've added in the past year.

00:01:10.900 --> 00:01:13.840
Some of the key ones are Java3D and JAI.

00:01:13.840 --> 00:01:16.140
We have new features in Xcode
that you might have seen at

00:01:16.140 --> 00:01:18.140
the Xcode session earlier,
and we have some new

00:01:18.140 --> 00:01:19.430
APIs we want to talk about.

00:01:19.450 --> 00:01:22.820
And we have more compatibility
than ever before.

00:01:22.820 --> 00:01:26.750
Now, this is really important because the
key to Java is that you can write once,

00:01:26.750 --> 00:01:29.060
run anywhere,
or that's the promise of Java.

00:01:29.060 --> 00:01:32.540
And we're trying to make run anywhere
as true as possible on Mac OS X.

00:01:32.540 --> 00:01:35.840
We also have support for legacy applets,
and we'll talk more about that.

00:01:35.870 --> 00:01:39.130
And we have a lot of Mac OS X features,
so not just compatibility

00:01:39.130 --> 00:01:42.360
across platforms,
but compatibility between applications

00:01:42.360 --> 00:01:46.710
on the Mac and Java applications,
and of course, enterprise applications.

00:01:46.720 --> 00:01:48.800
And we have more performance
than ever before.

00:01:48.800 --> 00:01:52.300
We now are taking advantage
of these 64-bit CPUs for you.

00:01:52.310 --> 00:01:54.670
We also are taking advantage of the GPU.

00:01:54.670 --> 00:01:56.500
You've seen a lot of that
in the keynote this morning,

00:01:56.500 --> 00:01:58.080
and we'll talk in some detail about that.

00:01:58.120 --> 00:02:00.460
And then we have
performance-tuned releases.

00:02:00.460 --> 00:02:03.690
And what I mean by that is that
we're taking each of our releases,

00:02:03.820 --> 00:02:06.200
we're looking at our
performance bottlenecks,

00:02:06.200 --> 00:02:10.500
and we're solving those bottlenecks so
that we can move on to new bottlenecks.

00:02:11.770 --> 00:02:15.580
So, as I like to tell everyone else,
that was the marketing presentation.

00:02:15.620 --> 00:02:17.620
Now I'm going to take off the
whole marketing hat and I'm going

00:02:17.710 --> 00:02:19.800
to talk a little bit more in depth
about what's really going on here

00:02:19.870 --> 00:02:21.880
because I'm not a marketing person,
I'm a tech lead.

00:02:21.950 --> 00:02:23.510
So, let's look at that.

00:02:23.580 --> 00:02:24.480
So, more releases.

00:02:24.480 --> 00:02:25.880
What are we talking about here?

00:02:25.880 --> 00:02:29.460
We showed these releases before
and one of the keys here is

00:02:29.460 --> 00:02:31.460
that we had JAI and Java3D.

00:02:31.460 --> 00:02:35.630
Last year we released Panther,
which had both 1.3.1 and 1.4 in it.

00:02:36.180 --> 00:02:40.140
And then February of this year,
we released Java 1.4.2 and that

00:02:40.140 --> 00:02:43.290
was a milestone for us because
we're up to date with what Sun has

00:02:43.290 --> 00:02:45.050
actually released at that point.

00:02:45.180 --> 00:02:46.670
So, that was a good time for us.

00:02:46.690 --> 00:02:49.300
We're actually up to date with Sun and
we're still up to date with them.

00:02:49.300 --> 00:02:53.450
So, now you're here at the Developers
Conference and if you are on

00:02:53.610 --> 00:02:57.170
ADC looking at the Java downloads,
we've actually shipped developer

00:02:57.170 --> 00:02:58.890
previews of our work on 1.4.2.

00:02:58.890 --> 00:03:02.700
We've been working hard on
1.4.2 on making it better.

00:03:03.210 --> 00:03:07.240
Today you got your preview of Tiger,
and tonight you'll also be able to

00:03:07.240 --> 00:03:12.220
download an Enterprise preview of One5,
and we'll talk about what that means.

00:03:16.900 --> 00:03:20.800
Now before we dive into 1.5,
we're going to be releasing

00:03:20.800 --> 00:03:22.040
a final release of 1.4.

00:03:22.040 --> 00:03:23.160
That's in the future.

00:03:23.160 --> 00:03:26.620
I'm not going to say exactly when,
but that's in the future.

00:03:26.620 --> 00:03:29.360
We're hopefully going to get
lots of feedback from you of our

00:03:29.360 --> 00:03:32.240
developer preview and then roll
that feedback into it and put out

00:03:32.390 --> 00:03:34.330
our final release of 1.4.2 update 1.

00:03:34.360 --> 00:03:37.610
But this update is actually
a very significant update.

00:03:37.720 --> 00:03:39.550
We've been working on
a lot of new features,

00:03:39.610 --> 00:03:42.160
and I want to show a little bit
about some of the performance

00:03:42.160 --> 00:03:44.120
gains we've had in 1.4.2.

00:03:44.550 --> 00:03:47.610
So with that,
I'd like to bring up Caroline to

00:03:47.680 --> 00:03:50.890
show a demo of 1.4.2 update 1.

00:03:58.320 --> 00:04:01.360
So this demo is just a quick preview
of some of the performance improvements

00:04:01.450 --> 00:04:03.580
that we've made in 1.4.2 Update 1.

00:04:03.700 --> 00:04:05.830
We're going to talk a lot more
in detail about the graphics

00:04:05.970 --> 00:04:09.170
performance improvements on Friday at
the Java 2D/3D graphics session,

00:04:09.410 --> 00:04:11.380
so you should all stick around for that.

00:04:11.470 --> 00:04:14.490
But if you'd bring up the PC, please.

00:04:20.010 --> 00:04:25.300
So you can see here the Java 2D demo
running on a dual Xeon 2.8 GHz PC.

00:04:25.300 --> 00:04:27.830
And this is running under 1.4.2.

00:04:28.540 --> 00:04:30.900
You've all probably seen
the Java 2D demo before.

00:04:30.980 --> 00:04:37.180
It's a standard demo that Sun ships
with the JDK and that Apple ships

00:04:37.550 --> 00:04:40.530
with the developer examples.

00:04:40.660 --> 00:04:45.210
So the important point to notice
is that the performance readout

00:04:45.210 --> 00:04:47.530
is around 100 frames per second.

00:04:48.170 --> 00:04:57.180
All right, so now if we skip to demo two,
you can see what this looks like—oh no,

00:04:57.180 --> 00:04:57.180
wrong one.

00:04:59.650 --> 00:05:02.590
You can see what this—ah,
wrong one again.

00:05:02.590 --> 00:05:06.210
Demo 2?

00:05:09.650 --> 00:05:11.600
Yeah, this is the other machine, please.

00:05:11.600 --> 00:05:21.270
So I need to set this up to onscreen,
because that's where we've

00:05:21.270 --> 00:05:22.970
made our improvements.

00:05:23.900 --> 00:05:29.940
So, you can see the Java 2D demo
running on 1.4.2 update 1 has about

00:05:29.940 --> 00:05:32.720
twice the performance of a PC.

00:05:32.720 --> 00:05:39.140
And this is a dual 2 gigahertz
machine running 1.4.2 update 1.

00:05:39.140 --> 00:05:43.450
And you can see this for yourself
if you get the developer preview 3,

00:05:43.450 --> 00:05:45.760
which is now available on the ADC site.

00:05:46.080 --> 00:05:47.490
So with that, I'll hand it back to Scott.

00:05:47.990 --> 00:05:49.460
Thank you.

00:05:54.750 --> 00:05:57.210
So there was a lot of work going
on here in our graphic state

00:05:57.260 --> 00:06:00.530
management and removing a lot of
bottlenecks to get this performance.

00:06:00.620 --> 00:06:02.890
So we can go back to the slides.

00:06:04.700 --> 00:06:08.010
So if we go back to the timeline,
1.4.2 Update 1 is going to be a

00:06:08.020 --> 00:06:11.270
major release for us in terms of
performance and compatibility.

00:06:11.400 --> 00:06:16.300
But if we go forward into the future,
the future of Mac OS X is Mac OS X Tiger.

00:06:16.300 --> 00:06:19.410
Now,
there's also another release coming out,

00:06:19.410 --> 00:06:23.160
Java 1.5,
which has also been codenamed Tiger.

00:06:23.160 --> 00:06:27.160
So we just like to play on this,
and we'll just call it Tiger on Tiger.

00:06:28.020 --> 00:06:30.250
So Java 1.5,
we're going to release a version

00:06:30.250 --> 00:06:31.790
that will run on your Tiger seed.

00:06:31.840 --> 00:06:35.190
So let's talk a little bit
about Java 1.5 for Mac OS X.

00:06:35.430 --> 00:06:38.220
I know a lot of you are
eagerly anticipating this.

00:06:38.280 --> 00:06:41.240
So this is Sun's biggest change to Java.

00:06:41.330 --> 00:06:44.350
We're releasing a developer preview,
and it's targeted towards

00:06:44.350 --> 00:06:46.020
non-GUI applications.

00:06:46.020 --> 00:06:49.030
That's enterprise applications,
web objects, and JBoss,

00:06:49.420 --> 00:06:50.940
those kinds of applications.

00:06:50.940 --> 00:06:54.320
It includes all the source
changes from Beta 52.

00:06:55.040 --> 00:06:57.490
Our final release of this,
when we do release the final version,

00:06:57.490 --> 00:07:00.640
we're going to be taking all of the
1.4.2.1 improvements that you saw

00:07:00.640 --> 00:07:02.640
here and we're rolling that into 1.5.

00:07:02.640 --> 00:07:05.510
So you can count on all those
speed improvements being in 1.5

00:07:05.510 --> 00:07:07.000
when we do the final release.

00:07:08.910 --> 00:07:11.880
So these are just a bunch of
the One5 language features.

00:07:11.880 --> 00:07:14.300
You probably know about these if you've
been following Sun's developments.

00:07:14.300 --> 00:07:15.340
There are a lot of good ones.

00:07:15.340 --> 00:07:17.440
Generics is what people
have been clamoring for,

00:07:17.440 --> 00:07:18.720
enums and static imports.

00:07:18.760 --> 00:07:22.360
You can learn more about these at the
Maximizing the Virtual Machine talk.

00:07:22.440 --> 00:07:25.460
And you can also go to the
website and read all about them.

00:07:25.480 --> 00:07:28.240
And there are a bunch of new
framework features in One5.

00:07:28.240 --> 00:07:29.350
These are just some highlights.

00:07:29.400 --> 00:07:31.530
And the first two we like to
highlight because they're things

00:07:31.530 --> 00:07:32.760
we innovated on here at Apple.

00:07:32.760 --> 00:07:35.000
Classes sharing we've
had for a long time.

00:07:35.020 --> 00:07:38.540
And the OpenGL 2D pipeline is
something we innovated in One3.

00:07:38.700 --> 00:07:40.780
And Sun has rolled into One5.

00:07:40.780 --> 00:07:42.690
And there's a bunch of
other features that will,

00:07:42.770 --> 00:07:45.170
again,
be talked about on Tuesday's session.

00:07:47.140 --> 00:07:50.220
So now our Mac OS X Tiger,
what's important in here

00:07:50.270 --> 00:07:51.200
for Java developers?

00:07:51.360 --> 00:07:55.070
The important thing in
here is Quartz Extreme.

00:07:55.340 --> 00:07:56.980
This is one of the most important things.

00:07:56.980 --> 00:08:00.080
The Quartz Extreme that's going
to be in Tiger on the correct

00:08:00.080 --> 00:08:04.210
configurations is going to be able to
accelerate all of your Java 2D drawing.

00:08:04.360 --> 00:08:06.680
This is very similar to the
stuff we've done in the past,

00:08:06.680 --> 00:08:09.300
but it's going to be on the OS level,
so all your Quartz

00:08:09.300 --> 00:08:10.640
drawing will be sped up.

00:08:10.640 --> 00:08:13.110
We also have new enhanced tech support.

00:08:13.120 --> 00:08:15.100
There's going to be system-wide
performance improvements,

00:08:15.110 --> 00:08:17.560
which again will lead us to
detecting what other things might

00:08:17.560 --> 00:08:19.120
be bottlenecks and fix those.

00:08:19.120 --> 00:08:21.540
And of course,
all of our 1.4.2 update one

00:08:21.760 --> 00:08:25.370
work that's being shipped on
Panther will be moved into Tiger.

00:08:25.460 --> 00:08:26.540
And of course, there's a lot more.

00:08:26.540 --> 00:08:28.420
I'm not going to get into all those.

00:08:28.470 --> 00:08:29.920
So back to features.

00:08:29.960 --> 00:08:33.280
When we talk about more features,
one of the big places where we

00:08:33.280 --> 00:08:36.580
always are adding features is
inside of Safari and applet support.

00:08:36.690 --> 00:08:38.790
So what we're trying to be
is tightly integrated with

00:08:38.790 --> 00:08:40.480
Safari as tightly as we can be.

00:08:40.480 --> 00:08:42.990
So the big thing that we
released that everyone's been

00:08:43.270 --> 00:08:44.600
asking for is live connect.

00:08:44.600 --> 00:08:48.980
We have live connect support now,
with Safari and with Java 1.4.2.

00:08:49.020 --> 00:08:51.800
So all those legacy applications
with live connect support that

00:08:51.800 --> 00:08:54.630
people were complaining about before,
now work just fine.

00:08:54.740 --> 00:08:56.560
So we've delivered that in the past year.

00:08:56.560 --> 00:08:59.560
We're really happy that now you can
actually use your live connect things.

00:08:59.560 --> 00:09:01.500
It's an older technology,
and we don't recommend

00:09:01.550 --> 00:09:04.590
people use it all the time,
but if you have applications that use it,

00:09:04.740 --> 00:09:05.850
you can run it.

00:09:06.080 --> 00:09:09.760
And also security,
we actually store all of our

00:09:10.050 --> 00:09:12.020
cookies with Safari's cookies.

00:09:12.060 --> 00:09:13.960
We share cookies with them,
and we use the key chain to

00:09:13.960 --> 00:09:15.720
actually store our certificates.

00:09:17.390 --> 00:09:20.360
So some other new features we have.

00:09:20.440 --> 00:09:23.020
We've got Java 3D and
Java Advanced Imaging.

00:09:23.020 --> 00:09:27.160
Now, these are two key technologies from
Sun that we licensed from them,

00:09:27.160 --> 00:09:29.400
and we've released in December.

00:09:29.400 --> 00:09:33.300
And you can get them as a free download.

00:09:33.300 --> 00:09:34.840
They're going to be bundled with Tiger.

00:09:34.840 --> 00:09:39.100
And you can just download
Java 3D directly from our website,

00:09:39.100 --> 00:09:39.720
NJAI.

00:09:39.720 --> 00:09:45.080
And Java 3D is really a
high-level scene description API.

00:09:45.360 --> 00:09:48.120
It's different from OpenGL and some
of the other things you might know of.

00:09:48.120 --> 00:09:49.910
It's for high-level scenes,
so if you just want

00:09:49.910 --> 00:09:51.690
to describe the scene,
let it take care of all the

00:09:51.690 --> 00:09:52.820
descriptions underneath.

00:09:52.820 --> 00:09:58.270
Java Advanced Imaging is sort of an
image manipulation API that's similar

00:09:58.270 --> 00:10:01.020
to the kinds of things you can do
in Photoshop and similar to some

00:10:01.160 --> 00:10:02.980
of the stuff we do in Core Image.

00:10:02.980 --> 00:10:06.340
So you can do large-scale
image manipulation using JAI,

00:10:06.340 --> 00:10:07.420
and it's all cross-platform.

00:10:07.420 --> 00:10:09.130
This has been implemented
on the other platforms.

00:10:09.140 --> 00:10:12.210
So you can write something in
JAI and Java 3D and bring it to

00:10:12.210 --> 00:10:15.030
other platforms or take your app from
those platforms and bring it back.

00:10:15.360 --> 00:10:18.930
So one of the key examples of this is

00:10:19.320 --> 00:10:32.250
and some of the tools used on the
Mars Exploration Rover mission.

00:10:32.250 --> 00:10:32.250
And so we're lucky enough to have
two of the engineers from the

00:10:32.250 --> 00:10:32.250
Mars Exploration Rover mission here,
Jeff Norris and Mark Powell.

00:10:32.250 --> 00:10:32.250
I'd like to bring them up
to show you a little demo.

00:10:39.230 --> 00:10:39.760
Thank you, Scott.

00:10:39.760 --> 00:10:40.260
Good evening.

00:10:40.260 --> 00:10:42.600
We're here to talk a
little bit about Maestro,

00:10:42.600 --> 00:10:46.470
which is the science operations tool
for the Mars Exploration Rover mission,

00:10:46.480 --> 00:10:49.780
written entirely in Java and brought
to the Macintosh platform with the

00:10:49.780 --> 00:10:51.400
help of the Java team at Apple.

00:10:51.400 --> 00:10:55.490
This tool is the tool we use to analyze
data that's received from the rover,

00:10:55.600 --> 00:10:58.820
Spirit and Opportunity,
each day in a scientific framework

00:10:58.820 --> 00:11:02.560
and then build a high-level activity
plan for the rovers to execute on

00:11:02.610 --> 00:11:04.870
the next Sol or Martian day on Mars.

00:11:05.500 --> 00:11:08.850
It's also a public engagement tool that
we've distributed to the general public,

00:11:08.850 --> 00:11:11.190
and all of you,
and some of you may have already done it,

00:11:11.270 --> 00:11:13.190
can download Maestro
onto your own computers,

00:11:13.200 --> 00:11:15.650
onto your own Macintoshes,
and use it to follow along with

00:11:15.650 --> 00:11:17.100
the progress of the mission.

00:11:17.100 --> 00:11:19.320
We'll switch to demo computer number one.

00:11:21.700 --> 00:11:24.460
This is one of the mini-updates
we've released for Maestro,

00:11:24.470 --> 00:11:27.310
which steps users through
the progress of the mission.

00:11:27.310 --> 00:11:29.530
They come back and download
data updates from Maestro,

00:11:29.530 --> 00:11:32.070
which kind of bring them up to
date with what's been going on.

00:11:32.080 --> 00:11:34.000
So we'll start this first update.

00:11:34.150 --> 00:11:40.150
You can hear a little bit from
our mission control as we were

00:11:40.150 --> 00:11:40.150
coming in for landing on Spirit.

00:11:44.100 --> 00:11:47.460
I guess we're not going to hear that.

00:11:47.460 --> 00:11:51.300
What the software has allowed
us to do is to reach out to the

00:11:51.300 --> 00:11:55.790
public in a fundamentally new way
because this is an actual mission

00:11:55.800 --> 00:12:00.440
operations tool for the first time
released to the general public.

00:12:00.440 --> 00:12:05.990
Now, it was developed primarily for the
mission operations workstations that we

00:12:05.990 --> 00:12:11.050
have at the Mission Operations Center at
the Jet Propulsion Laboratory.

00:12:11.050 --> 00:12:11.290
Okay, this is going to be really loud.

00:12:19.500 --> 00:12:22.590
cheering very loudly at the
successful arrival of Spirit on Mars.

00:12:22.600 --> 00:12:27.860
What I was saying was this has
allowed us to reach out to people

00:12:27.860 --> 00:12:28.960
because it's the real thing.

00:12:28.960 --> 00:12:30.760
It's giving them a hands-on
experience with the tool.

00:12:30.760 --> 00:12:33.680
We developed this tool
for the Linux workstations

00:12:33.680 --> 00:12:35.880
and mission operations,
but the Macintosh platform is an

00:12:35.880 --> 00:12:37.590
important one to us for two reasons.

00:12:37.600 --> 00:12:42.900
First, our primary user community,
which are the scientists on the mission,

00:12:42.900 --> 00:12:45.680
use Macintoshes in their daily
work for a lot of other purposes,

00:12:45.700 --> 00:12:49.260
and they wanted to bring this tool
onto their primary computers along

00:12:49.260 --> 00:12:50.320
with their other applications.

00:12:50.360 --> 00:12:55.200
And also, since we are distributing this
tool as an educational tool,

00:12:55.200 --> 00:12:58.020
the Macintosh platform is critical
for the educational market.

00:12:59.520 --> 00:13:03.400
So when it was time, well, actually,
right after we launched

00:13:03.510 --> 00:13:06.430
these rovers to Mars,
we were thrilled to learn that

00:13:06.430 --> 00:13:10.310
Apple had released support for
Java 3D and Java Advanced Imaging

00:13:10.360 --> 00:13:13.800
and literally called up these
folks at Apple and shipped them

00:13:13.800 --> 00:13:16.210
the binaries of our application.

00:13:16.220 --> 00:13:19.050
And we got an email back a couple
weeks later saying it works great.

00:13:19.080 --> 00:13:21.460
It didn't have to change anything,
which was really a great

00:13:21.460 --> 00:13:23.820
relief to us because,
believe me, we had other things to be

00:13:23.820 --> 00:13:25.240
worried about right then.

00:13:25.420 --> 00:13:27.760
But literally,
we were able to turn right around

00:13:27.810 --> 00:13:30.680
to our customers and to the
public and say this application,

00:13:30.690 --> 00:13:33.620
which was developed for Linux,
primarily for operations,

00:13:33.620 --> 00:13:35.960
is now available to you all on Macintosh.

00:13:35.960 --> 00:13:38.070
It really made us look good,
so we certainly

00:13:38.080 --> 00:13:39.660
appreciate that from them.

00:13:39.660 --> 00:13:42.690
Now I'm going to step through a few
of the features of this application

00:13:42.690 --> 00:13:45.800
just so you can kind of get a feeling
for how we use it in operations.

00:13:45.820 --> 00:13:49.690
I'm going to do this from the point of
view of a scientist who's using the tool

00:13:49.690 --> 00:13:53.700
to understand the Martian environment
and plan for another salt on Mars.

00:13:53.700 --> 00:13:55.200
So.

00:13:55.450 --> 00:13:58.060
What you're looking at here is
what a scientist might use in order

00:13:58.140 --> 00:13:59.640
to just get his bearings on Mars.

00:13:59.640 --> 00:14:03.500
This is the cylindrical projection
of images taken by the vehicle.

00:14:03.500 --> 00:14:06.460
Now, we have a mast on top that takes
pictures in different directions.

00:14:06.460 --> 00:14:09.530
And what we're using here is
Java Advanced Imaging to stitch

00:14:09.610 --> 00:14:12.740
these images together in real
time using a component developed

00:14:12.830 --> 00:14:15.410
at JPL called Jade Display,
something else which is

00:14:15.450 --> 00:14:16.800
freely available to anyone.

00:14:16.800 --> 00:14:21.990
We also use these Java Advanced Imaging
technologies to render other

00:14:22.080 --> 00:14:24.450
projections of this imaging.

00:14:24.830 --> 00:14:28.580
of this image,
and Mark's going to talk about that.

00:14:29.050 --> 00:14:32.160
So here I'm going to bring up what
we call an azimuthal mosaic view.

00:14:32.160 --> 00:14:35.200
This is kind of an overhead image
that gives you on one page the

00:14:35.200 --> 00:14:38.920
entire vista of possibilities that
a scientist might want to explore.

00:14:38.920 --> 00:14:43.310
We might start by saying where our
rover is currently here and if we're

00:14:43.320 --> 00:14:46.170
going to drive five meters today,
do we want to travel in this

00:14:46.170 --> 00:14:49.460
direction to the northwest or
this direction to the northeast?

00:14:49.460 --> 00:14:52.700
And as Jeff was saying,
we are rendering all these mosaics

00:14:52.740 --> 00:14:54.080
in the fly from the source images.

00:14:54.080 --> 00:14:56.960
This is 20 images being composited
together into this mosaic.

00:14:57.760 --> 00:15:00.900
And Java Advanced Imaging is a
very powerful tool for doing this.

00:15:00.900 --> 00:15:05.500
We've downlinked upwards of 35,000 images
now from both of our rovers on Mars,

00:15:05.510 --> 00:15:06.720
Spirit, and Opportunity.

00:15:06.720 --> 00:15:10.560
And the scientists have used this
tool in its mission form to view

00:15:10.560 --> 00:15:14.450
every one of those images for quality
control and scientific investigation.

00:15:14.460 --> 00:15:18.890
And when they really want to get
an immersive sense of where the

00:15:18.890 --> 00:15:21.900
rover is and what it's doing,
we also have this 3D view

00:15:21.950 --> 00:15:23.600
which is enabled by Java 3D.

00:15:23.600 --> 00:15:26.390
It really lets you get down through
the rover's point of view and

00:15:26.390 --> 00:15:27.720
take a look at the Martian data.

00:15:27.720 --> 00:15:32.100
on terrain, up close and personal,
from any vantage point that you want.

00:15:32.400 --> 00:15:37.120
We're also taking advantage of some of
the advanced features in the Java 1.4 VM,

00:15:37.120 --> 00:15:40.180
including NIO buffers,
which is what has enabled us to

00:15:40.180 --> 00:15:43.480
load what is a very large data set
right in front of you right there.

00:15:43.480 --> 00:15:46.440
I mean, we didn't have that preloaded,
so we can load these data

00:15:46.440 --> 00:15:50.240
sets in just a few seconds,
really kind of blowing away all of

00:15:50.240 --> 00:15:51.600
our hopes in terms of performance.

00:15:51.620 --> 00:15:56.170
The other things that we use this
tool for is actually constructing

00:15:56.280 --> 00:15:59.680
plans for the spacecraft to operate
on the following sol on Mars.

00:15:59.680 --> 00:16:02.820
So what we're going to show you
now is how a scientist might use

00:16:02.820 --> 00:16:07.700
Maestro to plan a basic arm sequence,
a sequence that uses the rover arm.

00:16:07.700 --> 00:16:10.720
So what Mark's doing right
now is he's building a target.

00:16:10.720 --> 00:16:14.540
It's a named position on Mars,
and our scientists and engineers

00:16:14.540 --> 00:16:19.180
on this mission use Maestro to
name every single location that's

00:16:19.180 --> 00:16:20.940
stored on the Martian surface.

00:16:20.940 --> 00:16:22.970
So if you hear about us
talking about a rock called

00:16:23.080 --> 00:16:24.930
the Pot of Gold quite recently,
it's this tool that

00:16:24.990 --> 00:16:26.130
they're using to name it.

00:16:26.180 --> 00:16:28.400
What you're looking at
now is a simulation,

00:16:28.400 --> 00:16:32.500
a basic plan that's using the
rover to plan a basic arm sequence.

00:16:32.570 --> 00:16:35.120
So what we're going to show you now
is a simulation of the rover's arm,

00:16:35.120 --> 00:16:37.320
and as Mark clicks
through this simulation,

00:16:37.320 --> 00:16:40.820
you see Maestro kind of giving
you a peek into the future of what

00:16:40.820 --> 00:16:43.960
the rover's going to accomplish
if the plan that's currently on,

00:16:43.960 --> 00:16:46.600
as it's been built right now,
is left that way and

00:16:46.600 --> 00:16:47.700
sent to the spacecraft.

00:16:47.700 --> 00:16:49.860
This is a valuable simulation tool

00:16:50.040 --> 00:16:52.040
I thought we'd finish up
with a few pretty pictures,

00:16:52.040 --> 00:16:54.920
and you've probably been wondering
why you had these red-blue glasses,

00:16:54.920 --> 00:16:56.240
and you came in the door.

00:16:56.240 --> 00:16:59.290
So if you put them on with
the red side on your left,

00:16:59.320 --> 00:17:02.880
then you will not get a headache,
and see what we're actually

00:17:03.320 --> 00:17:04.340
trying to show you.

00:17:04.360 --> 00:17:07.120
We'll load a couple now,
and they'll show some more at the end.

00:17:07.120 --> 00:17:13.280
But what you're looking at here
is the view we had coming out,

00:17:13.280 --> 00:17:18.030
the rear camera from the Spirit Rover,
right after we drove

00:17:18.100 --> 00:17:22.060
off for the first time,
in Gusev Crater to begin exploring Mars.

00:17:22.060 --> 00:17:24.660
I can't tell you how excited we
were to see that looking back.

00:17:24.700 --> 00:17:26.540
We didn't stay here very long.

00:17:26.540 --> 00:17:29.180
We drove far away from the spot,
but this is the first view

00:17:29.180 --> 00:17:33.480
we had to confirm that we
had safely left the lander.

00:17:33.590 --> 00:17:39.280
I think the next thing we might show,
what do we got next here?

00:17:43.100 --> 00:17:47.560
This is going to be Bonneville Crater,
a place we got to after about

00:17:47.620 --> 00:17:49.850
two months of driving on Mars.

00:17:49.870 --> 00:17:51.340
We've driven a lot further now.

00:17:51.340 --> 00:17:58.770
We've driven now upwards of two
and a half kilometers—sorry,

00:17:58.770 --> 00:18:01.010
three and a half kilometers—on
Mars since the beginning of the mission,

00:18:01.010 --> 00:18:01.010
much further than we
ever expected to drive.

00:18:01.230 --> 00:18:04.200
So Mark's going to scroll us across,
and as you're scrolling over here,

00:18:04.200 --> 00:18:08.130
you can see right here,
that little white dot there is

00:18:08.130 --> 00:18:11.440
actually the heat shield of the lander.

00:18:11.440 --> 00:18:14.540
So as we were coming in on Mars,
the heat shield separates

00:18:14.620 --> 00:18:17.950
from the spacecraft,
hit the ground and rolled for a long way,

00:18:17.960 --> 00:18:20.390
and we found it again
while we were driving.

00:18:20.400 --> 00:18:22.750
Amazingly enough,
we found the heat shields

00:18:22.900 --> 00:18:24.190
for both of the rovers.

00:18:24.190 --> 00:18:28.650
It's amazing how something that we made
sticks out on this very alien landscape.

00:18:28.650 --> 00:18:30.630
So that's something we brought with us.

00:18:32.770 --> 00:18:34.500
So I think we'll be showing
some more pretty pictures later,

00:18:34.500 --> 00:18:35.900
but I'm going to wrap it up with that.

00:18:36.020 --> 00:18:39.180
Thank the Java team and Apple again,
and hand it back over to Scott.

00:18:39.440 --> 00:18:41.010
Thank you.

00:18:47.430 --> 00:18:49.400
So can we go back to slides?

00:18:49.400 --> 00:18:51.890
So that's really exciting.

00:18:51.900 --> 00:18:54.560
We were glad that we were able
to work with JPL on getting this

00:18:54.570 --> 00:18:57.730
all working on the Macintosh and
that all of our Macintosh users

00:18:57.980 --> 00:18:59.670
can run Maestro and try it out.

00:18:59.770 --> 00:19:01.340
We also love the fact
that in Mission Control,

00:19:01.340 --> 00:19:02.720
they had a bunch of PowerBooks there.

00:19:02.800 --> 00:19:03.900
That's kind of fun.

00:19:03.900 --> 00:19:06.760
Oh, and this is in case the
demo crashed or something.

00:19:06.930 --> 00:19:09.220
You can see the pretty pictures.

00:19:09.600 --> 00:19:11.410
So let's talk a little bit more here.

00:19:11.410 --> 00:19:15.500
When we're talking about features,
Xcode has a lot of new features for Java.

00:19:15.500 --> 00:19:20.460
We've heard you, we know you want better
indexing in Java—that's in 1.5.

00:19:20.460 --> 00:19:23.830
Better code sense—actually
working code sense for Java,

00:19:24.070 --> 00:19:26.220
which is a new feature in 1.5.

00:19:26.340 --> 00:19:30.290
And we have some new things with
Ant and JUnit and new J2EE support.

00:19:30.300 --> 00:19:34.200
So check out these other sessions that
will talk more in depth about this.

00:19:35.240 --> 00:19:37.140
So Shark,
I don't know how many people out

00:19:37.200 --> 00:19:39.170
there know—who knows what is Shark?

00:19:39.170 --> 00:19:40.450
Oh, that's good.

00:19:40.480 --> 00:19:42.300
Okay, so the next slide,
you can read the beginning,

00:19:42.300 --> 00:19:43.200
you know what Shark is.

00:19:43.200 --> 00:19:45.510
Shark is a profiling tool
that we use here internally.

00:19:45.590 --> 00:19:51.900
And the biggest point is that, for you,
is that Shark now

00:19:51.900 --> 00:19:51.900
supports Java profiling.

00:19:56.400 --> 00:19:58.310
So not only can you
profile your native stuff,

00:19:58.310 --> 00:19:59.800
you can profile your Java stuff.

00:19:59.800 --> 00:20:02.190
So please download, take a look at Shark,
try it out.

00:20:02.290 --> 00:20:04.510
There are a couple demos that
will be done at the maximizing

00:20:04.510 --> 00:20:05.710
the Java virtual machine.

00:20:07.860 --> 00:20:08.840
So this is Rendezvous.

00:20:08.840 --> 00:20:11.620
I don't know how many of you actually
know details about Rendezvous,

00:20:11.620 --> 00:20:15.840
but Rendezvous is basically
a way to discover devices

00:20:15.840 --> 00:20:17.260
without any configuration.

00:20:17.260 --> 00:20:21.590
So what we're announcing today is that
we have Rendezvous for Java support,

00:20:21.600 --> 00:20:24.320
which means we've wrapped
all the APIs for you.

00:20:24.320 --> 00:20:25.930
You don't have to do any native code.

00:20:25.940 --> 00:20:28.840
You can get directly to that
open source implementation

00:20:28.840 --> 00:20:31.320
just using your 100% Java code.

00:20:31.320 --> 00:20:34.340
So this is great if you're trying
to connect to set-top boxes or

00:20:34.340 --> 00:20:35.490
printers or something like that.

00:20:35.580 --> 00:20:38.160
And this will actually be
bundled into our Tiger release,

00:20:38.160 --> 00:20:39.260
so you can count on it there.

00:20:39.260 --> 00:20:40.200
You can download it now.

00:20:42.370 --> 00:20:45.400
So let's go back to compatibility,
because compatibility

00:20:45.490 --> 00:20:46.690
is a key point for us.

00:20:46.770 --> 00:20:49.160
If we're not compatible,
you won't port your

00:20:49.160 --> 00:20:50.740
applications to the Mac.

00:20:51.270 --> 00:20:53.360
So write once, run anywhere.

00:20:53.400 --> 00:20:54.650
This is the promise of Java.

00:20:54.660 --> 00:20:57.760
A lot of people know that it's
more difficult than just that.

00:20:57.810 --> 00:21:01.740
But what we're doing to try to solve
it is we're shipping up-to-date

00:21:01.740 --> 00:21:04.400
Java with every single box that you buy.

00:21:04.400 --> 00:21:07.960
So when you go out and you buy a Mac,
it's got Java installed on it.

00:21:08.020 --> 00:21:11.650
It's not like other platforms where
you have to download it or you have

00:21:11.750 --> 00:21:14.980
to go hunt for it or some other
people like HP are now bundling

00:21:14.980 --> 00:21:18.620
Java on theirs because they know
it's a good idea to have it there.

00:21:18.620 --> 00:21:21.150
People want their applets just to work.

00:21:21.780 --> 00:21:25.220
So what does this mean for enterprise?

00:21:25.220 --> 00:21:27.680
In enterprise,
we bundle Mac OS X Server with

00:21:27.680 --> 00:21:30.830
all of our hardware,
and we also include with that JBoss,

00:21:30.840 --> 00:21:32.810
Apache, Tomcat, WebObjects.

00:21:32.920 --> 00:21:35.970
So your enterprise applications
will work right out of the box

00:21:35.970 --> 00:21:37.550
with the software you have.

00:21:37.620 --> 00:21:39.090
You don't have to go
out and buy anything.

00:21:39.100 --> 00:21:40.280
You can just run it right there.

00:21:40.300 --> 00:21:45.840
And there's a lot of information in this
session on JBoss about these details,

00:21:45.840 --> 00:21:49.470
about how to get your WAR files and other
things running on your J2EE servers.

00:21:50.120 --> 00:21:52.000
So, Micro Edition.

00:21:52.000 --> 00:21:55.400
Micro Edition is an interesting
thing because obviously we don't have

00:21:55.400 --> 00:21:58.810
any devices that run Micro Edition,
but you can use the Mac to

00:21:58.810 --> 00:22:00.720
develop for Micro Edition.

00:22:00.720 --> 00:22:06.060
You can build your midlets
right on the Mac in Xcode.

00:22:06.060 --> 00:22:09.570
You can run a simulator right on the Mac,
and you can try it out,

00:22:09.570 --> 00:22:12.480
and then you can download
it right to your phone.

00:22:12.480 --> 00:22:19.690
So, to show this, I'd like to bring up
Ted Jucevic to show us a demo.

00:22:23.110 --> 00:22:30.650
So, you know, this really isn't, um...

00:22:30.630 --> 00:22:34.300
What I'm really trying to show
here is actually using Xcode to

00:22:34.300 --> 00:22:38.770
do AMP builds and stuff like that.

00:22:38.770 --> 00:22:38.790
But by itself,

00:22:39.050 --> 00:22:40.760
That can only go so far for excitement.

00:22:40.760 --> 00:22:45.740
So what we're going to do
here is actually show using

00:22:49.760 --> 00:23:03.580
and David Koehn,
and the rest of the team will

00:23:03.580 --> 00:23:03.580
be joined by Ted Jucevic,
who will be

00:23:03.880 --> 00:23:05.200
and other members of the team.

00:23:06.170 --> 00:23:10.890
And what I'm going to do over here
is actually just go ahead and build

00:23:10.900 --> 00:23:13.270
and deploy this to an emulator.

00:23:13.270 --> 00:23:16.920
I actually have over
here X11 up and running.

00:23:16.920 --> 00:23:21.160
Should just go ahead and build
and launch up the emulator.

00:23:21.160 --> 00:23:25.240
This emulator I actually got
from Mike Powers' website,

00:23:25.240 --> 00:23:26.580
mpowers.net.

00:23:26.580 --> 00:23:32.150
You can download it and we're actually
going to be showing a template.

00:23:32.110 --> 00:23:35.470
in 318 on Wednesday morning.

00:23:35.480 --> 00:23:39.540
So that's pretty exciting.

00:23:39.540 --> 00:23:41.460
You've got your mid-light up and running.

00:23:41.460 --> 00:23:45.880
If any debug stuff comes out,
it goes back to the terminal.

00:23:45.880 --> 00:23:48.940
But let's actually just go in here,
change something,

00:23:48.940 --> 00:23:54.130
so that it's obvious it's not just a
canned movie or something like that.

00:23:54.200 --> 00:23:59.670
And asteroids in Xcode,
let's go ahead and just

00:24:00.180 --> 00:24:01.900
change this back to zone.

00:24:02.100 --> 00:24:05.940
Z-O-N-E, if I can spell correctly.

00:24:09.090 --> 00:24:11.830
And let's go ahead and
relaunch that and rerun it.

00:24:11.960 --> 00:24:13.560
And you can see it's not a canned thing.

00:24:13.600 --> 00:24:16.060
Now, that's great.

00:24:16.080 --> 00:24:19.850
You get it up and running on the
computer and stuff like that.

00:24:19.960 --> 00:24:22.690
But the real world is where
things actually happen.

00:24:22.700 --> 00:24:27.400
So let's go ahead and just go ahead
and deploy this to the cell phone.

00:24:27.400 --> 00:24:32.880
We have over here, let's see,
Cocoa component.

00:24:32.880 --> 00:24:36.540
And with any luck,
we should have the cell phone over there.

00:24:37.600 --> 00:24:41.870
And expand it out so it looks a
little bit more like a cell phone.

00:24:41.880 --> 00:24:43.800
Let's go ahead and push this jar over.

00:24:43.800 --> 00:24:47.010
With MidP 1.0...

00:24:47.160 --> 00:24:51.200
You don't have to use the JAD file if
you're just deploying the JAR file,

00:24:51.200 --> 00:24:56.880
as long as you don't have any properties
in the JAD file that it needs.

00:24:56.880 --> 00:24:57.540
So we're pushing it over.

00:24:57.540 --> 00:24:59.280
It says, do you want to accept it?

00:24:59.430 --> 00:25:04.950
Let me go ahead and say yes.

00:25:04.950 --> 00:25:04.950
Push it over.

00:25:05.950 --> 00:25:09.130
and with any luck it
should install and save.

00:25:09.240 --> 00:25:12.050
And then let's go ahead and run it.

00:25:14.900 --> 00:25:19.940
So it's pretty easy to do
Java deployment to phones from Mac OS X.

00:25:19.940 --> 00:25:22.510
And if you come to my
session Wednesday morning,

00:25:22.510 --> 00:25:27.120
3:18, you'll actually see and we'll
be demoing a template that will

00:25:27.120 --> 00:25:29.420
be available after the session.

00:25:29.420 --> 00:25:31.430
So thank you very much.

00:25:38.400 --> 00:25:42.050
"So that shows you can easily develop
stuff for your phones right on the Mac.

00:25:42.170 --> 00:25:44.290
You don't actually have to
go out and install another

00:25:44.420 --> 00:25:46.070
emulator or something like that.

00:25:46.130 --> 00:25:49.980
It's just right there for you."
"Finder running application."

00:25:56.260 --> 00:25:59.920
So now let's talk about desktop Java,
because we spend a lot of time

00:25:59.920 --> 00:26:03.490
on desktop Java making this a
smooth experience for people.

00:26:03.600 --> 00:27:40.800
[Transcript missing]

00:27:41.720 --> 00:27:44.140
So let's back up again and
talk about desktop Java.

00:27:44.140 --> 00:27:47.370
And applets is one of the
biggest use of desktop Java.

00:27:47.380 --> 00:27:48.500
It's games.

00:27:48.500 --> 00:27:49.820
It's stock tickers.

00:27:49.820 --> 00:27:52.430
It's almost anything you
can find in an applet.

00:27:52.530 --> 00:27:55.860
And so we've been working
hard on web compatibility.

00:27:55.860 --> 00:28:01.080
We added a bunch of things into 142
Update 1 that address multithreaded

00:28:01.080 --> 00:28:03.170
event processing on applets.

00:28:03.300 --> 00:28:06.040
We also have fixed hundreds
of very specific applet bugs.

00:28:06.040 --> 00:28:09.460
You filed bugs saying this specific
applet doesn't work right on the Macs.

00:28:09.460 --> 00:28:10.380
We fixed those.

00:28:10.610 --> 00:28:13.850
Plus, we also updated our whole
drawing architecture to handle

00:28:13.850 --> 00:28:15.880
the old style 1.1 drawing.

00:28:15.880 --> 00:28:19.920
Now, if you know old style 1.1 applets,
they do a lot of things that are

00:28:19.920 --> 00:28:24.110
not really recommended today,
like grabbing graphics from a second

00:28:24.110 --> 00:28:27.840
thread and just pounding on them
instead of calling repaint and updating.

00:28:27.840 --> 00:28:30.800
So we're handling those
cases much more smoothly now.

00:28:30.800 --> 00:28:34.320
And so that actually means thousands
of legacy applets that might have

00:28:34.320 --> 00:28:38.360
had little quirky problems no longer
have those problems because we now

00:28:38.360 --> 00:28:42.300
are much more compatible when it
comes to multithreaded drawing.

00:28:42.300 --> 00:28:45.120
And also we have Web Start,
which is a great way to keep

00:28:45.190 --> 00:28:48.890
compatible applications so that you
can download full-fledged desktop

00:28:48.930 --> 00:28:51.060
applications from your browser.

00:28:51.060 --> 00:28:54.990
And you can have things like
custom JNI code inside of those

00:28:54.990 --> 00:28:57.500
Web Start applications and have
different JNI code for different

00:28:57.570 --> 00:29:01.250
platforms if you need any
platform-specific stuff in Web Start.

00:29:02.200 --> 00:29:03.210
Now, application compatibility.

00:29:03.220 --> 00:29:07.360
One of the big things we've done for
compatibility in Tiger specifically is

00:29:07.360 --> 00:29:09.460
that we're going to ship 1.3 with Tiger.

00:29:09.460 --> 00:29:14.080
Now, the important thing is you
should migrate off of 1.3 now.

00:29:14.080 --> 00:29:17.630
And the reason for this is
that we're going to be removing

00:29:17.630 --> 00:29:19.420
1.3 from a future OS release.

00:29:19.420 --> 00:29:20.550
I'll repeat that again.

00:29:20.580 --> 00:29:23.320
We're going to be removing
1.3 from a future OS release.

00:29:23.320 --> 00:29:27.230
So if you're dependent on 1.3 and
you have a bug that's stopping you

00:29:27.330 --> 00:29:31.260
from migrating from 1.3 to 1.4,
you need to get us that bug

00:29:31.390 --> 00:29:34.320
immediately because if it's
something that we have to fix,

00:29:34.320 --> 00:29:35.930
we need to address it right away.

00:29:35.960 --> 00:29:39.620
So it's very important that,
as at all possible,

00:29:39.620 --> 00:29:44.140
you can move off of 1.3 onto 1.4 because
1.4 and 1.5 are the future of Java.

00:29:46.190 --> 00:29:49.080
So let's talk about 142 Update 1,
what we have for compatibility.

00:29:49.080 --> 00:29:50.460
We've talked a little bit about this.

00:29:50.460 --> 00:29:53.660
Multi-threaded painting is really
important for legacy applications,

00:29:53.660 --> 00:29:57.280
and this means being able to just
slam a graphics object from lots of

00:29:57.280 --> 00:29:58.600
different threads at the same time.

00:29:58.600 --> 00:30:00.460
We now can handle that really well.

00:30:00.480 --> 00:30:04.230
We also manage our own
context and surfaces separate

00:30:04.230 --> 00:30:07.380
from the Cocoa framework,
so we're able to not have to worry

00:30:07.380 --> 00:30:10.620
about when Cocoa does some drawing,
we know what our current state is.

00:30:10.620 --> 00:30:13.230
And that's one of the ways we got that
great performance in the first demo

00:30:13.240 --> 00:30:15.170
you saw of the ball spinning around.

00:30:15.920 --> 00:30:17.820
And, of course,
the repaint mechanism compatibility.

00:30:17.820 --> 00:30:19.880
So we're now actually much
more compatible to all

00:30:20.000 --> 00:30:21.090
the legacy applications.

00:30:23.020 --> 00:30:25.610
So the other thing that
we've done is we have lots of

00:30:25.610 --> 00:30:27.440
Mac OS X enhancements to Java.

00:30:27.440 --> 00:30:30.360
And these are enhancements that are
optional things you can do to try

00:30:30.370 --> 00:30:31.900
to be a better Mac OS X citizen.

00:30:32.000 --> 00:30:34.300
And these aren't things
you're required to do,

00:30:34.320 --> 00:30:36.290
but most Mac OS X users are pretty savvy.

00:30:36.600 --> 00:30:38.890
And if your application doesn't
look—if they don't find the

00:30:38.980 --> 00:30:41.600
Quit menu where they expect it,
if they don't find the Preferences

00:30:41.600 --> 00:30:43.780
menu where they expect it,
they're going to think that

00:30:43.780 --> 00:30:45.290
you're not a good programmer.

00:30:45.420 --> 00:30:47.830
They're not going to think, oh,
that's fine.

00:30:47.960 --> 00:30:51.170
They're going to want it to
look just like everything else,

00:30:51.230 --> 00:30:52.330
where it's consistency.

00:30:52.930 --> 00:30:55.140
So one of the things we have
is we have accessibility.

00:30:55.140 --> 00:30:59.910
So in accessibility,
what you can do with this is you can

00:30:59.910 --> 00:31:03.540
support the Java accessibility APIs,
and then our accessibility frameworks

00:31:03.610 --> 00:31:07.130
that are built into the OS will just
use those Java accessibility APIs.

00:31:07.140 --> 00:31:10.790
So things like the screen reader for the
spoken user interface will just work as

00:31:10.790 --> 00:31:12.480
long as you support Java accessibility.

00:31:12.480 --> 00:31:16.000
We've done all the work to get that
middle layer so it all works together.

00:31:16.000 --> 00:31:19.930
It also lets you do things
like scriptable applications.

00:31:20.270 --> 00:31:22.880
So you can actually support
your buttons being scripted

00:31:22.960 --> 00:31:24.180
for button presses and things.

00:31:24.180 --> 00:31:27.590
So things like the automator
application could work with your

00:31:27.640 --> 00:31:29.990
application if you have it scriptable.

00:31:32.200 --> 00:31:34.240
The other thing is that
we've made Aqua everywhere.

00:31:34.240 --> 00:31:38.000
Now you've probably seen this before,
but we just want to mention again, AWT,

00:31:38.000 --> 00:31:41.540
since it's using Cocoa,
has all the Aqua look and feel.

00:31:41.540 --> 00:31:44.760
Swing, we have the Aqua look and feel,
and we've put a lot of effort

00:31:44.760 --> 00:31:47.360
into the Aqua look and feel to
make it look just like native.

00:31:47.360 --> 00:31:50.220
We actually use native rendering
for the swing Aqua look and feel.

00:31:50.220 --> 00:31:54.180
So your swing lightweight components are
actually using the very same rendering

00:31:54.240 --> 00:31:57.330
path as the Cocoa heavyweight components.

00:31:57.380 --> 00:31:59.350
So everything looks exactly the same.

00:32:00.040 --> 00:32:02.170
Obviously, the swing components
are a lot more flexible,

00:32:02.180 --> 00:32:06.460
but when you have a swing application
and you use the swing Aqua look and feel,

00:32:06.460 --> 00:32:09.330
users should not be able to tell
the difference between a native

00:32:09.330 --> 00:32:11.360
application and your Java application.

00:32:11.360 --> 00:32:14.830
We also have support for things
like brush metal windows and moving

00:32:14.830 --> 00:32:18.080
the menu bar out of the window
and up into the screen menu bar

00:32:18.080 --> 00:32:19.880
where Mac OS X users expect it.

00:32:21.760 --> 00:32:23.070
And then the bundling of applications.

00:32:23.080 --> 00:32:25.660
This we've been doing for a long time,
but it's worth repeating.

00:32:25.660 --> 00:32:30.980
We allow you to easily bundle your
application from jar bundlers,

00:32:30.980 --> 00:32:32.480
our application to let you do this.

00:32:32.480 --> 00:32:34.830
And it takes your jar files,
all your other support files,

00:32:34.840 --> 00:32:36.280
and puts it into an application bundle.

00:32:36.280 --> 00:32:39.040
So you can have just one
double clickable application.

00:32:39.040 --> 00:32:45.040
You don't have to have a jar file with
an associated file of a bunch of images

00:32:45.040 --> 00:32:48.700
or whatever you might have on other
platforms with a batch file to run it.

00:32:48.760 --> 00:32:49.700
I mean, that's crazy.

00:32:50.160 --> 00:32:53.660
So we just want you to bundle everything
into one application because users just

00:32:53.660 --> 00:32:55.440
want a double clickable application.

00:32:55.440 --> 00:32:57.270
They don't want a folder
filled with stuff.

00:32:57.380 --> 00:33:00.620
And, of course,
we have native extensions.

00:33:00.620 --> 00:33:04.640
So one of the things you can do on
every platform is you can use JNI and

00:33:04.640 --> 00:33:05.770
you can get directly to native.

00:33:05.780 --> 00:33:08.250
So if there's something we
haven't bundled already for you,

00:33:08.260 --> 00:33:12.850
you can write your own JNI layer
and then use native code to get

00:33:12.850 --> 00:33:15.210
right to any of our native services.

00:33:15.220 --> 00:33:17.470
So if there's something you saw
in the tiger demo that you really

00:33:17.470 --> 00:33:21.480
like and you see APIs for it,
you can go write your own JNI library

00:33:21.480 --> 00:33:25.040
for that and then just use JNI to
call those in and provide a very

00:33:25.040 --> 00:33:27.420
thin glue layer between those two.

00:33:27.460 --> 00:33:31.280
And now to show you a little bit
about all these different things,

00:33:31.280 --> 00:33:32.540
I'd like to bring up Matt Drance.

00:33:39.220 --> 00:33:39.660
Thanks, Scott.

00:33:39.660 --> 00:33:41.660
I just can't stay off the stage.

00:33:41.660 --> 00:33:42.180
Forgive me.

00:33:42.180 --> 00:33:48.910
So, I think we've already seen
commercials for Friday's talk

00:33:48.920 --> 00:33:50.830
and for Wednesday's talk.

00:33:50.840 --> 00:33:52.580
And so,
I'm here to give you a little preview of

00:33:52.580 --> 00:33:54.280
what we'll be talking about on Thursday.

00:33:54.280 --> 00:33:57.430
Like Scott said,
we've got a lot of native

00:33:57.780 --> 00:33:59.940
additions and simple things.

00:33:59.970 --> 00:34:02.170
Some that you get for free,
some that you don't,

00:34:02.240 --> 00:34:04.340
but are still as easy
as free to implement.

00:34:04.340 --> 00:34:07.690
So, what I've got here is an email client
that I downloaded from SourceForge.

00:34:08.800 --> 00:34:11.210
And it didn't actually
come just like this,

00:34:11.320 --> 00:34:13.680
but I did a little work to make
it as Mac-like as possible.

00:34:13.680 --> 00:34:15.220
So, it comes up in Aqua, as you can see.

00:34:15.220 --> 00:34:18.090
You have the screen menu bar up
here with all the menu shortcuts

00:34:18.130 --> 00:34:19.740
as you might expect them to be.

00:34:19.740 --> 00:34:21.700
And you have the application menu here.

00:34:21.750 --> 00:34:25.000
And, you know,
I used our EAWT API to hook

00:34:25.010 --> 00:34:28.680
in the about menu item,
the preferences menu item,

00:34:28.680 --> 00:34:30.850
and the quit menu item.

00:34:30.860 --> 00:34:33.020
But I don't want to,
we don't want to quit just yet.

00:34:33.110 --> 00:34:38.140
And, you know, it's a Java application,
so it has these toolbar items for, say,

00:34:38.400 --> 00:34:40.510
creating a new message.

00:34:42.310 --> 00:34:44.300
That works just fine,
and it works fine from the menu,

00:34:44.300 --> 00:34:47.390
but there's this thing on
Mac OS X called the dock,

00:34:47.400 --> 00:34:49.440
and wouldn't it be great
if Java developers could

00:34:49.440 --> 00:34:50.810
do something with the dock?

00:34:50.870 --> 00:34:54.260
So I wrote a very simple JNI library
to add menu items into the dock.

00:34:54.280 --> 00:34:57.630
So I go up here, select a new message,
and it hooks right into the

00:34:57.630 --> 00:34:58.940
Java action as expected.

00:34:58.940 --> 00:35:00.890
Really not very hard.

00:35:00.900 --> 00:35:05.200
It was about five lines of code,
and if I'm in a good mood,

00:35:05.200 --> 00:35:06.300
I'll release it to you guys.

00:35:06.300 --> 00:35:09.790
So the other thing I did was
this app originally shipped

00:35:09.800 --> 00:35:10.750
with its own address book.

00:35:10.940 --> 00:35:13.190
It makes you enter all
your old addresses,

00:35:13.200 --> 00:35:15.020
all your email addresses,
all your friends,

00:35:15.020 --> 00:35:16.460
and everything like that,
and that's kind of useless.

00:35:16.460 --> 00:35:20.030
So I figured I'd just write a
couple more lines of code with

00:35:20.040 --> 00:35:23.140
the E-A-W-T Cocoa component,
and here we have an address

00:35:23.140 --> 00:35:25.210
book people picker view,
which is part of the

00:35:25.320 --> 00:35:26.900
Cocoa API to address book.

00:35:27.030 --> 00:35:30.270
And so this is a J frame with
a people picker view inside it,

00:35:30.370 --> 00:35:34.800
and it's tied into our app,
and it's not redrawing.

00:35:34.820 --> 00:35:39.790
Let's try that again.

00:35:46.740 --> 00:35:51.200
So we bring up the People Picker view,
and here are all our people.

00:35:51.200 --> 00:35:52.740
And let me send an email to myself.

00:35:52.740 --> 00:35:55.290
So I double-click this
from the address book,

00:35:55.290 --> 00:35:58.630
and this is actually receiving an
event in Cocoa and then calling

00:35:58.860 --> 00:36:02.040
back up through JNI to the
Java code with an email address,

00:36:02.330 --> 00:36:04.310
which I then put into the email message.

00:36:04.360 --> 00:36:07.790
Now, this is where the demo falls apart,
because I haven't paid

00:36:07.870 --> 00:36:11.160
Fastmail this month,
and they're not letting me use SMTP.

00:36:11.200 --> 00:36:13.290
So let's pretend I sent the message.

00:36:13.290 --> 00:36:16.200
Or better yet,
I'll send one from my Yahoo account.

00:36:19.500 --> 00:36:21.300
And there are plenty of
other things the dock can do.

00:36:21.300 --> 00:36:24.730
You can set the dock icon and, you know,
among other things,

00:36:24.870 --> 00:36:26.530
you can also bounce the dock.

00:36:26.700 --> 00:36:29.730
So wouldn't it be great if we
could get user alerts just like

00:36:29.740 --> 00:36:32.450
the regular mail application?

00:36:33.060 --> 00:36:34.000
And there we go.

00:36:34.000 --> 00:36:36.440
It's bouncing the dock
when I have a new email.

00:36:36.440 --> 00:36:38.260
And it's already read.

00:36:38.310 --> 00:36:40.600
That's about all I got to say.

00:36:40.710 --> 00:36:42.800
This doesn't look exactly like
the Apple Mail application.

00:36:42.800 --> 00:36:50.080
I wouldn't necessarily call
it a best-of-breed Mac app.

00:36:50.080 --> 00:36:50.080
But this is what the application
looked like when I downloaded

00:36:50.080 --> 00:36:50.080
it from SourceForge.

00:36:51.130 --> 00:36:53.700
So we did pretty good.

00:36:53.740 --> 00:37:02.360
And if you're interested in
seeing how I did all this stuff,

00:37:02.360 --> 00:37:02.360
we'll be talking about it on Thursday,
and you get through it in an hour.

00:37:02.360 --> 00:37:02.360
I'll take it back to Scott.

00:37:08.320 --> 00:37:11.030
So one of the things Matt didn't say
is that he really didn't spend much

00:37:11.030 --> 00:37:12.290
time trying to clean up that app.

00:37:12.400 --> 00:37:16.540
It's actually a really ugly app, I think,
when you look at the images and things.

00:37:16.540 --> 00:37:20.270
So the things that we're asking
people to do are things like

00:37:20.270 --> 00:37:24.470
don't design your graphics to
necessarily match a specific OS.

00:37:24.550 --> 00:37:29.580
And they had little tiny graphics
that look really bad compared to our

00:37:29.650 --> 00:37:32.240
photorealistic stuff on Mac OS X.

00:37:32.240 --> 00:37:34.850
So those are the kinds of cross-platform
things you have to pay attention to.

00:37:35.670 --> 00:37:37.420
So now let's get on to performance.

00:37:37.670 --> 00:37:39.100
We've been concentrating on performance.

00:37:39.100 --> 00:37:40.980
Compatibility has been
our number one goal.

00:37:41.130 --> 00:37:44.430
Performance has been our number two goal,
because if your applications don't run,

00:37:44.430 --> 00:37:46.100
it doesn't matter how fast they run.

00:37:46.100 --> 00:37:48.260
So let's look at performance.

00:37:48.260 --> 00:37:49.220
So G5.

00:37:49.600 --> 00:37:52.150
G5 is our big thing that
we announced last year,

00:37:52.160 --> 00:37:55.670
and we've been working really hard
to make the G5 Java implementation

00:37:55.670 --> 00:37:56.700
as fast as possible.

00:37:56.910 --> 00:38:00.220
So what we've done for you—and
we announced some of this before,

00:38:00.320 --> 00:38:03.240
but I just want to clarify—is
that G5 instructions are

00:38:03.260 --> 00:38:05.070
automatically put in place for you.

00:38:05.430 --> 00:38:08.630
So what this means is your code
that you've already compiled,

00:38:08.640 --> 00:38:12.100
your Java code,
doesn't need to be recompiled for the G5.

00:38:12.100 --> 00:38:15.780
It automatically—our bytecode compiler
automatically does that for you.

00:38:15.860 --> 00:38:18.080
So if you have things that
are using longs and doubles,

00:38:18.200 --> 00:38:20.830
we automatically are going to
use that and convert it into

00:38:20.830 --> 00:38:22.920
full native 64-bit operations.

00:38:23.020 --> 00:38:26.170
This means that if you used to have
four instructions to do an add,

00:38:26.200 --> 00:38:27.340
now it's only two.

00:38:27.470 --> 00:38:29.600
So it'll be a lot faster on the G5.

00:38:29.690 --> 00:38:35.050
There also are G5-specific optimizations
that are just in the system itself.

00:38:35.200 --> 00:38:37.780
We know things like how fast the
bus is and other stuff like that.

00:38:37.800 --> 00:38:40.360
And the key—I'm just going to
say it again—is you don't need to

00:38:40.360 --> 00:38:42.000
recompile to get these advantages.

00:38:42.000 --> 00:38:46.800
So your JAR file or your double-clickable
application will just be faster.

00:38:47.360 --> 00:38:49.980
So to show you a little bit about this,
we want to show you the

00:38:50.050 --> 00:38:51.360
Cymark Composite Index.

00:38:51.360 --> 00:38:55.300
And this is a benchmark for
scientific applications.

00:38:55.300 --> 00:39:01.180
It does a lot of math and things a
lot of times with longs and doubles.

00:39:01.180 --> 00:39:01.180
And

00:39:01.420 --> 00:39:05.510
So we want to compare a
G4 dual 1.25 GHz machine,

00:39:05.560 --> 00:39:08.460
and we got 98 was our score.

00:39:08.460 --> 00:39:09.530
And bigger is better on this.

00:39:09.560 --> 00:39:12.280
I don't know exactly what 98 means,
but 98 was the score.

00:39:12.280 --> 00:39:18.150
So now when we compare that
to a G5 dual 2.5 GHz machine,

00:39:18.150 --> 00:39:23.490
it would be unfair because
it's 2.5 GHz compared to 1.25.

00:39:24.120 --> 00:39:28.230
So what we did is we just sort of said,
hey, let's just double it because,

00:39:28.230 --> 00:39:31.150
you know, 1.25 times 2 is 2.5.

00:39:31.160 --> 00:39:32.280
So that should be pretty close.

00:39:32.280 --> 00:39:36.400
And then we look at the G5,
we get 289 compared to 196.

00:39:36.400 --> 00:39:41.980
So the important point here is
that it's nonlinear improvement.

00:39:41.980 --> 00:39:45.120
That's really important because
what that means is it means the

00:39:45.240 --> 00:39:49.000
new architecture of the G5 plus the
G5 instructions means that we're

00:39:49.000 --> 00:39:51.180
getting an extra 47% just for free.

00:39:51.180 --> 00:39:54.030
It's not just, hey, we're twice as fast,
we're going to be twice as good.

00:39:54.120 --> 00:39:56.500
were more than twice as good.

00:39:57.410 --> 00:39:59.620
So let's move on to talk about the GPUs.

00:39:59.850 --> 00:40:01.400
We have a lot of powerful GPUs.

00:40:01.400 --> 00:40:04.210
You've seen a lot of the ways
they can be used by things like

00:40:04.230 --> 00:40:08.430
Core Image and some other utilities,
and we're going to be using these.

00:40:08.840 --> 00:40:11.600
So first,
I want to show you a little demo.

00:40:11.600 --> 00:40:15.510
And if I can go to demo two.

00:40:21.500 --> 00:40:36.800
[Transcript missing]

00:40:39.250 --> 00:40:43.810
So what you're seeing here
is a full implementation

00:40:43.810 --> 00:40:46.360
of Quake 2 written in Java.

00:40:46.600 --> 00:40:49.440
So this is all of Quake 2
taken from the open source.

00:40:49.440 --> 00:40:52.480
Some guys out there ported
the whole thing to Java,

00:40:52.480 --> 00:40:55.290
and it's using OpenGL for
all the rendering.

00:40:55.300 --> 00:40:57.800
But as you can see, it's really smooth.

00:40:57.800 --> 00:40:58.780
It's really good.

00:40:58.780 --> 00:41:02.500
It uses the JavaX sound
APIs for all the sound.

00:41:02.500 --> 00:41:05.040
It kind of reminds me of when
I used to play a lot of games

00:41:05.040 --> 00:41:06.740
before working on the Java team.

00:41:06.740 --> 00:41:11.000
And it's really good.

00:41:11.000 --> 00:41:13.000
And really,
what I wanted to show you this

00:41:13.000 --> 00:41:17.570
for is just as a teaser for
the graphic session on Friday.

00:41:17.770 --> 00:41:19.040
This is a program called Jake 2.

00:41:19.040 --> 00:41:21.370
I just turned the sound down,
so it's not bothering you.

00:41:21.380 --> 00:41:24.430
But it's a program called Jake 2,
and they're going to be talking about

00:41:24.440 --> 00:41:28.460
a lot more at that session about what
you can do with OpenGL and what you

00:41:28.460 --> 00:41:32.710
can do with games on the Mac in Java,
which who would have thought

00:41:32.710 --> 00:41:34.560
you'd be able to do that?

00:41:34.590 --> 00:41:36.770
So let's go back to slides.

00:41:40.300 --> 00:41:43.400
So we are talking about the GPU and
you just saw this game running on

00:41:43.490 --> 00:41:47.160
the Mac and really the reason you can
do it is because all this rendering

00:41:47.160 --> 00:41:53.460
that just is impossible to do in
software is working using Joggle.

00:41:53.460 --> 00:41:55.990
It's also working because our
Java is now fast enough to

00:41:55.990 --> 00:41:59.540
actually compute all the things,
all the physics that needs to be

00:41:59.540 --> 00:42:01.820
computed is being done in real time.

00:42:01.820 --> 00:42:04.620
So Joggle in case you don't know
it is an open source implementation

00:42:04.620 --> 00:42:06.890
of bindings for OpenGL.

00:42:06.950 --> 00:42:11.120
It's freely available through their
website and I don't know what that

00:42:11.120 --> 00:42:18.110
last bullet point is but Java 3D is
also another way to use the GPU and

00:42:18.160 --> 00:42:23.990
we've talked about it in depth but it's
also a high level way to get into scene

00:42:24.130 --> 00:42:27.430
descriptions and doing sort of high
level scenes but if you're really writing

00:42:27.430 --> 00:42:30.190
a game and you want to get into low
level stuff Joggle is the way to go and

00:42:30.320 --> 00:42:35.080
there will be a lot of talk about this
in the Friday Java 2D and 3D session.

00:42:36.810 --> 00:42:39.860
And, of course,
using the GPU is Quartz Extreme on Tiger.

00:42:39.860 --> 00:42:41.800
This is the biggest way
we're using the GPU.

00:42:41.800 --> 00:42:45.010
And what this means is
hardware-accelerated Quartz 2D.

00:42:45.020 --> 00:42:48.800
So that means your applications
will just run faster.

00:42:48.800 --> 00:42:52.350
We're going to be able to do millions
of lines in times that we could

00:42:52.400 --> 00:42:54.480
only do hundreds of lines or tens.

00:42:54.480 --> 00:42:56.030
I don't actually have
numbers in front of me.

00:42:56.120 --> 00:43:00.260
But it's so much faster because all that
drawing that was happening on the CPU,

00:43:00.260 --> 00:43:03.020
all that anti-aliasing that
was happening on the CPU is now

00:43:03.020 --> 00:43:04.160
being pushed off to the GPU.

00:43:04.960 --> 00:43:07.080
And it just happens
automatically for you.

00:43:07.140 --> 00:43:08.100
So that's the best part of it.

00:43:08.120 --> 00:43:12.130
You can try some of this out in Tiger,
but we're actually going to be

00:43:12.130 --> 00:43:15.740
working closely with the Quartz
team to make sure that we don't

00:43:15.750 --> 00:43:17.060
have any bottlenecks anymore.

00:43:17.060 --> 00:43:20.680
Because if you can imagine,
we have all of our drawing code,

00:43:20.680 --> 00:43:23.700
and the bottleneck before
was actually drawing the

00:43:23.710 --> 00:43:25.080
squares and drawing the lines.

00:43:25.160 --> 00:43:26.600
Now that's all gone.

00:43:26.620 --> 00:43:30.070
Now we get to concentrate on everything
else that's in there and what might

00:43:30.070 --> 00:43:33.280
be slow in our part of the code and
also for you in your part of the code.

00:43:33.290 --> 00:43:36.630
Because if the drawing code goes away,
then it becomes your image

00:43:36.630 --> 00:43:39.780
manipulation code or your layout
code or something like that.

00:43:39.820 --> 00:43:43.330
The other key important
thing here is that software

00:43:43.330 --> 00:43:44.660
rendering has gotten faster.

00:43:44.660 --> 00:43:47.610
One of the things that the Quartz
team did is they implemented

00:43:47.610 --> 00:43:50.050
this hardware acceleration,
and they did the exact same

00:43:50.050 --> 00:43:51.190
thing that I was talking about.

00:43:51.480 --> 00:43:55.090
They said, hey,
our hardware acceleration is really fast,

00:43:55.100 --> 00:43:57.160
but our setup time takes forever.

00:43:57.160 --> 00:43:58.150
What's going on there?

00:43:58.160 --> 00:44:02.380
And when it was taking 10 seconds
to render something and it was only

00:44:02.380 --> 00:44:06.010
one second for doing your setup,
and now it only takes a tenth

00:44:06.320 --> 00:44:08.380
of a second for your rendering,
and it still takes a

00:44:08.380 --> 00:44:10.900
second for your setup,
you're going to optimize that setup.

00:44:10.900 --> 00:44:14.080
So everything is going to be a
little faster because of this.

00:44:16.640 --> 00:44:19.400
So we also talked about
performance-tuned releases.

00:44:19.420 --> 00:44:20.640
And what does this mean?

00:44:20.640 --> 00:44:23.930
It means we're gonna be
optimizing each of these releases.

00:44:24.050 --> 00:44:28.320
So we've talked about 142 Update One and
our multi-threaded drawing updates.

00:44:28.370 --> 00:44:32.270
And this is a big performance
increase because before we were

00:44:32.710 --> 00:44:34.760
having to wait for one thread.

00:44:34.990 --> 00:44:37.220
We were gonna have to block
the main thread of your

00:44:37.220 --> 00:44:39.720
application to be able to draw.

00:44:39.750 --> 00:44:41.460
We don't have to do that anymore.

00:44:41.480 --> 00:44:42.290
And what does that mean?

00:44:42.300 --> 00:44:45.220
That means as your application
is doing something,

00:44:45.250 --> 00:44:48.140
interacting with the Cocoa framework,
let's say resizing or

00:44:48.140 --> 00:44:50.130
something like that,
we can keep drawing.

00:44:50.290 --> 00:44:53.380
You can be drawing from another thread,
from a Java update thread.

00:44:53.410 --> 00:44:55.620
So you can be repainting
while you're live resizing.

00:44:55.720 --> 00:44:58.320
Before we had to wait
for some of those things.

00:44:58.320 --> 00:45:01.320
And if you have multiple threads drawing,
they're not gonna be

00:45:01.320 --> 00:45:03.260
contending with each other,
especially if they're

00:45:03.260 --> 00:45:04.650
drawing to separate contexts.

00:45:04.720 --> 00:45:06.790
So this is a huge performance upgrade.

00:45:07.120 --> 00:45:12.540
You also can get
intelligent display updates.

00:45:12.550 --> 00:45:15.220
And what this means is this is
what's called in the graphics,

00:45:15.330 --> 00:45:18.860
in the graphics world as flushing
or sinking to the screen.

00:45:19.000 --> 00:45:21.050
So people over flush.

00:45:21.460 --> 00:45:23.370
What happens is you
over sync to the screen.

00:45:23.380 --> 00:45:27.970
You're trying to push frames up to
the screen at 300 frames a second,

00:45:28.100 --> 00:45:29.560
400 frames a second.

00:45:29.760 --> 00:45:33.200
And that's a waste because your
screen is refreshing on an LCD screen,

00:45:33.200 --> 00:45:35.690
60 frames a second,
on a high end monitor,

00:45:35.700 --> 00:45:37.190
maybe a hundred frames a second.

00:45:37.320 --> 00:45:40.640
There's no need to actually
push that data up to the screen.

00:45:40.720 --> 00:45:44.840
So we've optimized this so that you
aren't doing all those extra data pushes.

00:45:44.880 --> 00:45:46.900
So you're only doing data
pushing when you need to.

00:45:46.920 --> 00:45:50.040
So if you're over pushing,
it's only gonna do it when it has to.

00:45:50.040 --> 00:45:52.810
And this is the same implementation
that we've actually received this

00:45:52.870 --> 00:45:54.270
reference implementation from Sun.

00:45:54.280 --> 00:45:56.020
So we're not playing any tricks here.

00:45:56.190 --> 00:45:58.500
We're actually doing the correct thing.

00:45:58.510 --> 00:46:00.280
'Cause some people think, oh,
you guys are flushing.

00:46:00.280 --> 00:46:01.100
Is that a trick?

00:46:01.100 --> 00:46:01.930
No, it's not a trick.

00:46:01.970 --> 00:46:04.560
It's the way you're
supposed to do things.

00:46:05.670 --> 00:46:08.850
So 1.4.2 update 1,
these are just some benchmarks

00:46:09.050 --> 00:46:11.920
that I grabbed from the team,
and these are just some

00:46:11.920 --> 00:46:14.970
benchmarks we use internally,
and we're getting as much as 50%

00:46:14.970 --> 00:46:16.760
improvement on just standard benchmarks.

00:46:16.770 --> 00:46:20.400
And this doesn't just measure our
graphics performance like you saw before.

00:46:20.400 --> 00:46:22.590
This is system-wide performance
on some of these things.

00:46:22.610 --> 00:46:25.820
Swingmark Aqua is the second one there,
and that actually involves opening

00:46:25.820 --> 00:46:28.750
lots of windows and things that
graphics really doesn't affect.

00:46:28.760 --> 00:46:32.770
So there's a lot of things
that we've sped up in general.

00:46:32.840 --> 00:46:34.910
And these are great numbers to see.

00:46:35.510 --> 00:46:37.840
And then the other performance
tune release is Tiger.

00:46:37.840 --> 00:46:40.320
So we've talked a little bit about Tiger.

00:46:40.320 --> 00:46:43.490
One of the big things in Tiger is
that we have new Tiger APIs to

00:46:43.490 --> 00:46:48.090
use for things like the whole
tech system is being redone for

00:46:48.090 --> 00:46:50.810
performance underneath the covers,
and we're going to do that for you.

00:46:50.820 --> 00:46:53.550
So we're going to take care of
using the new tech system for you.

00:46:53.600 --> 00:46:55.930
Like I said before,
Quartz Extreme lets us

00:46:55.930 --> 00:46:59.610
discover new bottlenecks,
so we'll be able to find out what really

00:46:59.610 --> 00:47:01.750
is slow beyond the graphics drawing.

00:47:01.760 --> 00:47:03.940
And there's going to be
lots more coming in Tiger.

00:47:04.240 --> 00:47:07.160
We have a while to work on
polishing our Tiger release,

00:47:07.160 --> 00:47:09.560
and so we're just going to be putting
a lot more performance things into it.

00:47:12.150 --> 00:47:14.820
So one other thing I wanted to talk
about—and Steve covered a little

00:47:14.820 --> 00:47:19.040
bit of this this morning in his
keynote—is that we have more developer

00:47:19.080 --> 00:47:21.570
tools than ever before on Mac OS X.

00:47:21.830 --> 00:47:25.040
And this is just a sample of
some of the tools we have.

00:47:25.040 --> 00:47:27.380
And there's a lot of people
who are going to be here at the

00:47:27.440 --> 00:47:29.940
conference to talk about this,
and I wanted to highlight

00:47:30.010 --> 00:47:30.900
a couple of them.

00:47:30.930 --> 00:47:35.490
Eclipse 3.0—how many
people here use Eclipse?

00:47:36.140 --> 00:47:36.980
Okay, great.

00:47:37.060 --> 00:47:43.250
So I really strongly am encouraging
you to go to the Eclipse session.

00:47:43.450 --> 00:47:46.210
There are going to be a couple of the
key people who work on the Eclipse

00:47:46.460 --> 00:47:47.800
project there talking about it.

00:47:47.800 --> 00:47:49.000
It's not just an introduction.

00:47:49.000 --> 00:47:50.990
They'll be talking a
little more in depth.

00:47:51.000 --> 00:47:52.870
So it's Tuesday at 2 p.m.

00:47:52.870 --> 00:47:55.460
They're going to be
here to talk about it.

00:47:55.460 --> 00:48:00.310
And I know a lot of people love this
whole—love the whole platform of Eclipse,

00:48:00.310 --> 00:48:03.210
so I definitely encourage
you to check it out.

00:48:03.210 --> 00:48:05.110
Check out their IDE and their whole SWT.

00:48:06.300 --> 00:48:09.490
Sun also announced today
that Java Studio Creator is

00:48:09.500 --> 00:48:11.090
available for Mac OS X.

00:48:11.100 --> 00:48:15.000
How many saw James Gosling
demo it earlier?

00:48:15.000 --> 00:48:17.710
So he demoed it in the
enterprise State of the Union.

00:48:17.880 --> 00:48:19.680
And it's a great IDE.

00:48:19.680 --> 00:48:22.540
It's based off of NetBeans.

00:48:22.540 --> 00:48:26.260
It lets you deploy J2EE applications
and all these different things.

00:48:26.280 --> 00:48:30.090
So it's a great tool,
and they're doing a whole session on it.

00:48:30.110 --> 00:48:33.820
It's Tuesday at 10:30,
so I strongly encourage you

00:48:33.820 --> 00:48:35.670
to go check out that session,
too.

00:48:36.150 --> 00:48:37.100
And Oracle.

00:48:37.100 --> 00:48:39.100
Oracle released JDeveloper 10G.

00:48:39.180 --> 00:48:41.930
They're going to be fully supporting it.

00:48:41.940 --> 00:48:44.660
They have a developer preview
available this summer.

00:48:44.660 --> 00:48:46.850
Their final release is
going to be in the fall.

00:48:46.880 --> 00:48:53.440
This is a big deal to have Oracle 10G on
our platform so that you can actually

00:48:53.440 --> 00:48:53.440
use this for developing applications.

00:48:54.640 --> 00:48:58.360
And finally,
I'd like to bring up Axel from Borland

00:48:58.530 --> 00:49:04.580
to tell you a little bit about Borland's
announcements that happened this morning.

00:49:09.570 --> 00:49:10.100
Hi, everyone.

00:49:10.100 --> 00:49:12.620
Well, we're going to have to do
something about that list.

00:49:12.620 --> 00:49:15.720
The JBuilder, you know,
we kind of got to notch it up to the top,

00:49:15.720 --> 00:49:16.240
right?

00:49:16.240 --> 00:49:19.230
Okay,
so how many people here use JBuilder?

00:49:19.260 --> 00:49:21.760
Okay, so we have quite a few hands.

00:49:21.760 --> 00:49:26.980
Well, I've got some great news today,
because what Borland just announced is

00:49:26.990 --> 00:49:33.590
that we're going to be supporting the
Mac platform with our Optimize It suite,

00:49:33.600 --> 00:49:36.520
and that includes a
full profiler for Java,

00:49:37.190 --> 00:49:40.760
which allows you to do memory profiling,
CPU profiling.

00:49:40.760 --> 00:49:43.400
And if you're familiar
with Optimize It out here,

00:49:43.400 --> 00:49:48.720
well, it's really the industry's
best profiling tool for Java.

00:49:48.720 --> 00:49:51.920
And in addition, of course,
we also have a thread

00:49:51.920 --> 00:49:54.160
debugger and code coverage.

00:49:54.160 --> 00:49:56.950
If you do a lot of unit testing,
you'll find code coverage

00:49:56.950 --> 00:49:58.070
is quite handy as well.

00:49:58.170 --> 00:50:01.400
So we're pretty excited about this.

00:50:01.400 --> 00:50:06.080
There's a long standing
history for us with Apple.

00:50:06.080 --> 00:50:07.120
We started supporting Apple.

00:50:07.140 --> 00:50:10.460
We started supporting
Apple with JBuilder 6.

00:50:10.460 --> 00:50:14.080
And then when we got Optimize It,
it got a little bit more difficult,

00:50:14.080 --> 00:50:19.240
because Optimize It actually needs to
sync its claws into actually native

00:50:19.620 --> 00:50:22.530
code in order to do the profiling.

00:50:22.540 --> 00:50:24.840
But that's no longer
going to be a problem,

00:50:24.840 --> 00:50:31.300
and we're pretty excited about this,
because OS X is just a great platform.

00:50:31.300 --> 00:50:35.870
I still remember going to one of my
first usability sessions at Borland,

00:50:35.880 --> 00:50:40.420
and the engineer,
I just looked at our ID, and I go, wow,

00:50:40.420 --> 00:50:41.470
this is incredible.

00:50:41.480 --> 00:50:42.930
Absolutely fantastic.

00:50:42.940 --> 00:50:43.730
Couldn't believe it.

00:50:43.800 --> 00:50:45.460
And I thought, wow,
I've got to get the latest

00:50:45.550 --> 00:50:46.700
build and put it on my laptop.

00:50:46.700 --> 00:50:50.230
And sure enough, I put it on my laptop,
and it doesn't look anything like it.

00:50:50.260 --> 00:50:52.020
It says, what the heck happened here?

00:50:52.020 --> 00:50:57.320
Well, the developer was using the
Mac OS X for the usability review.

00:50:57.320 --> 00:51:01.430
So you can imagine,
we got quite a bit of fans at Borland.

00:51:01.440 --> 00:51:06.880
So I hope you all take an opportunity to
take a look at what Borland has to offer.

00:51:07.390 --> 00:51:10.790
With that, I'm also going to add,
what's not on the slides today is

00:51:10.850 --> 00:51:15.800
the fact that JBuilder 11 will be
fully supported on the Mac platform,

00:51:15.800 --> 00:51:20.480
whether you get JBuilder Foundation,
JBuilder Developer, or Enterprise.

00:51:20.480 --> 00:51:25.470
It'll be easy to install, full installer,
and full support for Mac OS X.

00:51:25.480 --> 00:51:28.740
We have JBoss support in
the Enterprise Edition.

00:51:28.740 --> 00:51:30.420
I know you mentioned JBoss.

00:51:30.420 --> 00:51:32.820
It's something that you
guys deliver as well.

00:51:32.820 --> 00:51:36.360
So this should be a
pretty useful ID for you.

00:51:36.360 --> 00:51:37.120
I do hope you guys all get it.

00:51:37.140 --> 00:51:38.050
it a shot.

00:51:38.140 --> 00:51:38.750
Thank you very much.

00:51:45.740 --> 00:51:46.100
Thanks a lot.

00:51:46.230 --> 00:51:49.560
So there's a lot of IDEs for you to use.

00:51:49.560 --> 00:51:51.230
I didn't mention all of them.

00:51:51.240 --> 00:51:54.850
I know a lot of people use Jetbrain's
IDEA and people who are using

00:51:54.850 --> 00:51:59.180
Borland for JBuilder and Optimize it,
which it was one of the exciting things

00:51:59.180 --> 00:52:04.370
when we worked on our 1.4.2 update
1 was I just installed my version of

00:52:04.370 --> 00:52:08.620
Optimize and a bunch of features that
were broken earlier just started working.

00:52:08.620 --> 00:52:11.720
And I was really excited that
this is a legacy application

00:52:11.720 --> 00:52:15.520
because it's built on top of IFC,
but that's the style of that

00:52:15.520 --> 00:52:18.060
application and it just worked
fine with our new update.

00:52:18.060 --> 00:52:18.980
So it's really exciting.

00:52:18.980 --> 00:52:23.640
So with that, I'd like to wrap up and I'd
like to bring up Alan Samuel,

00:52:23.640 --> 00:52:26.230
our Java evangelist.

00:52:35.370 --> 00:52:38.070
So I'm going to tell you guys a
little bit about sort of our year

00:52:38.070 --> 00:52:43.810
in review and sort of what I've done
from a Java evangelism perspective.

00:52:46.300 --> 00:52:48.970
So I think it was last summer,
James Gosling and I were

00:52:48.970 --> 00:52:52.160
having lunch one day,
and I sort of said, how do I get at,

00:52:52.160 --> 00:52:55.380
how do I talk to more
Java developers than I currently do?

00:52:55.380 --> 00:52:59.500
And he started telling us about
these things called Sun Tech Days,

00:52:59.500 --> 00:53:03.650
and it's sort of this sort of roving
outreach program that Sun does,

00:53:03.660 --> 00:53:06.530
and it's not just Java,
but it was something that Apple could

00:53:06.590 --> 00:53:08.580
actually sponsor and become a part of.

00:53:08.580 --> 00:53:11.550
And so I'd say for, I don't know,
it's been over a year that we've

00:53:11.550 --> 00:53:13.170
actually been out on the road.

00:53:14.120 --> 00:53:17.510
Matt and Ted,
two of our Java engineers and myself,

00:53:17.510 --> 00:53:19.560
traveled around the world.

00:53:19.560 --> 00:53:22.070
Some of you may have already actually
seen us in some of the other venues.

00:53:22.080 --> 00:53:23.950
These are just some of
the locations we went to.

00:53:23.960 --> 00:53:27.620
We started right in Microsoft's backyard,
which I thought was a great

00:53:27.680 --> 00:53:29.210
location to start our event.

00:53:29.260 --> 00:53:32.890
We went right to Seattle,
and the amazing thing was we had

00:53:32.890 --> 00:53:35.200
this huge Java community there.

00:53:35.200 --> 00:53:36.480
Some of you may be from Seattle.

00:53:36.480 --> 00:53:40.720
A huge number of people came
and attended our session.

00:53:40.720 --> 00:53:43.870
We had one session there and spent a lot
of time talking with us in the booth.

00:53:43.940 --> 00:53:46.460
So it was great to know that there
are that many Java developers there.

00:53:46.460 --> 00:53:51.280
We spent some time in the U.K.

00:53:51.280 --> 00:53:53.630
All of these events,
we actually went out.

00:53:53.640 --> 00:53:55.320
I mean, a lot of you that are here today.

00:53:55.320 --> 00:53:56.060
Well, let me ask you this.

00:53:56.130 --> 00:53:59.100
How many of you in the audience,
is this your first time here?

00:54:02.800 --> 00:54:03.800
All right, let me ask you this.

00:54:03.800 --> 00:54:06.560
Have any of you seen myself or
any of the other Java engineers

00:54:06.560 --> 00:54:08.540
speak at any of the SunTech days?

00:54:08.570 --> 00:54:09.020
All right, a couple.

00:54:09.130 --> 00:54:10.360
All right, that's excellent.

00:54:10.460 --> 00:54:12.660
So I guess it was working.

00:54:15.230 --> 00:54:18.890
Really, the whole idea on this was just
to go out and reach out more to

00:54:18.890 --> 00:54:22.590
the Java community and get those
people interested in developing and

00:54:22.630 --> 00:54:25.820
deploying those applications and
those solutions on the platform.

00:54:25.820 --> 00:54:27.710
So I think it's worked.

00:54:27.740 --> 00:54:29.690
We'll talk about a
couple other locations.

00:54:29.700 --> 00:54:35.740
Here's a great picture of Ted and
I actually in Sao Paulo at Red ATV.

00:54:35.740 --> 00:54:39.350
Now, actually, I've seen some of our
Brazilian counterparts

00:54:39.350 --> 00:54:40.840
who work for us there.

00:54:40.840 --> 00:54:44.210
This is an excellent success
story sort of for Apple,

00:54:44.210 --> 00:54:45.620
Java, QuickTime.

00:54:45.620 --> 00:54:49.420
This is a Brazilian television
station that runs their entire studio,

00:54:49.420 --> 00:54:53.830
including all of their ad placement,
using a QuickTime for Java-based system.

00:54:53.860 --> 00:54:57.130
So that one of the things that I saw,
you can actually,

00:54:57.130 --> 00:55:00.400
as a commercial provider,
let's say I've got a product

00:55:00.400 --> 00:55:03.880
that I'm advertising,
I can watch the real-time statistics

00:55:03.880 --> 00:55:07.150
of how many people are tuning into
my show and actually insert in

00:55:07.380 --> 00:55:10.520
the middle of that television show
with a QuickTime for Java system.

00:55:10.520 --> 00:55:14.140
So I can sit there in
the audience and go,

00:55:14.140 --> 00:55:16.020
hey, guess what?

00:55:16.050 --> 00:55:17.450
I've got a lot of people watching.

00:55:17.450 --> 00:55:18.940
Let's put the commercial there.

00:55:18.940 --> 00:55:20.740
I couldn't believe this.

00:55:20.740 --> 00:55:25.050
This entire television station in
Brazil was run using Apple products,

00:55:25.140 --> 00:55:26.940
using QuickTime for Java.

00:55:26.940 --> 00:55:32.540
I mean, these guys go so far as I believe
they've even got chest-mounted laptops.

00:55:32.540 --> 00:55:37.420
They were running like iMacs with
DV cameras that went and connected back

00:55:37.420 --> 00:55:40.020
to like a mobile television studio.

00:55:40.200 --> 00:55:41.280
And then microwaved it back.

00:55:41.440 --> 00:55:42.720
Nothing was even going to tape.

00:55:42.720 --> 00:55:43.860
They were that advanced.

00:55:43.860 --> 00:55:45.280
And here we were in Brazil.

00:55:45.280 --> 00:55:48.930
Our biggest event by far was China.

00:55:48.930 --> 00:55:52.090
And I guess I should have expected this,
but all of you that are here

00:55:52.360 --> 00:55:55.650
today are all registered
Apple Developer Connection members,

00:55:55.650 --> 00:55:56.300
right?

00:55:56.300 --> 00:56:02.730
We had 500 Java developers like yourself
sign up in one day in our booth.

00:56:02.730 --> 00:56:05.510
It was absolutely incredible.

00:56:05.520 --> 00:56:09.880
So I think the thing is you've seen a
lot of the stuff that's skyrocketing.

00:56:09.880 --> 00:56:39.830
And I think the thing is you've seen a
lot of the stuff that's skyrocketing.

00:56:39.910 --> 00:56:43.980
And I want to make one more statement
about that because it is going away.

00:56:43.980 --> 00:56:46.800
We want to give you all
of these new features,

00:56:46.800 --> 00:56:50.450
all this new work that the
Java engineering team has done is

00:56:50.450 --> 00:56:53.410
all going to be on 1.4 and 1.5.

00:56:53.420 --> 00:56:56.220
And that's how you're going to get all
those advantages that you've seen today.

00:56:56.220 --> 00:56:59.320
So please let us know if there are
things that are holding you over

00:56:59.320 --> 00:57:01.660
from making that conversion to 1.4.

00:57:01.660 --> 00:57:03.000
That's really important for us.

00:57:03.000 --> 00:57:06.320
So I think with that,
I'm going to go ahead and wrap it up.

00:57:06.490 --> 00:57:09.670
Before we leave, I think we've got a
slideshow with some more.

00:57:09.880 --> 00:57:10.640
3D images.

00:57:10.640 --> 00:57:13.300
Is that already set to go on demo?

00:57:13.300 --> 00:57:15.890
Demo 2, I think it is.

00:57:15.900 --> 00:57:17.790
So if you guys want to.

00:57:17.800 --> 00:57:20.720
I got to put mine back on too.

00:57:20.720 --> 00:57:22.450
Check this out.

00:57:22.520 --> 00:57:27.520
Well, that's pretty cool.

00:57:36.300 --> 00:57:38.440
Well again,
I wanna thank everybody for coming,

00:57:38.440 --> 00:57:42.780
and we appreciate your time.

00:57:42.780 --> 00:57:53.900
- Too much of anything
is not good for you,

00:57:53.900 --> 00:57:56.200
baby.

00:57:56.200 --> 00:58:01.080
But I don't know about that.

00:58:01.080 --> 00:58:06.280
There's many times when we've loved,
and we've shared love, and made love,

00:58:06.580 --> 00:58:11.300
and made love, and made love,
and made love, and made love.