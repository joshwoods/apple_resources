WEBVTT

00:00:12.800 --> 00:00:17.800
Ladies and gentlemen,
please welcome Todd Fernandez.

00:00:17.800 --> 00:00:24.280
Well, good morning.

00:00:24.280 --> 00:00:27.280
Welcome to session 303,
Developing for Automator.

00:00:27.280 --> 00:00:29.560
As I was just introduced,
I'm Todd Fernandez,

00:00:29.560 --> 00:00:31.580
the Automator Engineering Manager.

00:00:31.600 --> 00:00:33.320
And I'm thrilled to be
here with you this morning,

00:00:33.320 --> 00:00:36.650
representing the Automator team,
to tell you what you need to know about

00:00:36.650 --> 00:00:42.620
how to take advantage of this exciting
new technology for your applications.

00:00:45.030 --> 00:00:47.680
So what I hope you take away from this
session this morning is a much better

00:00:47.680 --> 00:00:51.150
understanding of what Automator is,
including its key

00:00:51.240 --> 00:00:55.300
features and terminology,
why it's important to you,

00:00:55.330 --> 00:00:59.960
and most importantly,
how you can take advantage of this

00:00:59.960 --> 00:01:02.240
new technology for your applications.

00:01:02.240 --> 00:01:06.560
We'll cover the SDK and
design guidelines to help you.

00:01:09.470 --> 00:01:12.670
So I would like to set the stage a
little bit by first talking about what

00:01:12.790 --> 00:01:15.150
things were like before yesterday.

00:01:16.000 --> 00:01:18.980
With current technology,
it's been very difficult to take

00:01:18.980 --> 00:01:22.580
advantage and exploit powerful
network effects of combining disparate

00:01:22.580 --> 00:01:26.010
applications into automated workflows.

00:01:29.700 --> 00:01:33.900
It's been possible with
technology like AppleScript,

00:01:33.920 --> 00:01:36.350
but the problem has been that
it requires a relatively large

00:01:36.360 --> 00:01:40.400
investment of time and resources
to develop the necessary expertise.

00:01:40.540 --> 00:01:44.160
Small business and the vast majority
of end users have not been able

00:01:44.200 --> 00:01:46.230
to take advantage of this power.

00:02:08.090 --> 00:02:10.610
And in fact,
even those of us that have the

00:02:10.610 --> 00:02:13.830
necessary expertise sometimes
have to make the calculation,

00:02:13.830 --> 00:02:17.460
"Is it going to take me longer
to write and debug a script or to

00:02:17.460 --> 00:02:20.030
just do what I need to do by hand?"

00:02:21.180 --> 00:02:24.660
Well, fortunately,
Automator fundamentally changes this

00:02:24.660 --> 00:02:29.340
calculation and dramatically lowers the
bar for automating tasks on Mac OS X.

00:02:29.440 --> 00:02:33.370
Now you don't need a map,
you don't need an expert guide,

00:02:33.370 --> 00:02:37.420
that guru colleague or precocious nephew,
to help you make the connections

00:02:37.450 --> 00:02:40.310
to get your data from
application A to application B.

00:02:40.440 --> 00:02:44.770
For the first time,
end users can seamlessly extend and

00:02:44.770 --> 00:02:47.590
combine applications on their own.

00:02:48.540 --> 00:02:51.500
And in fact,
once developers of complex and powerful

00:02:51.500 --> 00:02:55.920
applications start exposing their
application technology through Automator,

00:02:55.920 --> 00:02:59.890
users will be able to take advantage of
applications they never could before.

00:03:00.510 --> 00:03:03.660
Automator allows customers
to take advantage of the best

00:03:03.790 --> 00:03:07.360
that every application has
to offer for their benefit.

00:03:07.430 --> 00:03:09.610
Now this is where you come in.

00:03:10.050 --> 00:03:12.480
I recently learned how to surf,
and though you can tell from that

00:03:12.540 --> 00:03:15.530
awkward little leap that I still
have a lot to learn about surfing,

00:03:15.580 --> 00:03:19.000
I do remember one important
lesson from my instructor.

00:03:19.130 --> 00:03:22.900
And that is, when a great wave comes,
you'd better catch it because you don't

00:03:22.900 --> 00:03:25.000
know when the next one's going to come.

00:03:25.000 --> 00:03:28.760
This is a unique opportunity for
you to attract new customers to

00:03:28.760 --> 00:03:32.450
your applications by allowing them
to incorporate your application

00:03:32.450 --> 00:03:34.000
into Automator workflows.

00:03:34.000 --> 00:03:37.150
What we've seen with AppleScript is
that once a customer incorporates your

00:03:37.150 --> 00:03:40.740
application into an automated workflow,
they remain loyal.

00:03:41.000 --> 00:03:43.980
They do not want to have to
go back and do things by hand.

00:03:44.000 --> 00:03:48.000
And for existing customers,
Automator is a breakthrough,

00:03:48.000 --> 00:03:52.000
and they are going to expect that their
favorite applications work well with it.

00:03:52.000 --> 00:03:53.690
If they don't,
they're going to be forced to

00:03:53.690 --> 00:03:56.290
look for third-party solutions,
or if they have the necessary

00:03:56.370 --> 00:04:02.000
development or scripting expertise,
to develop their own Automator actions.

00:04:02.020 --> 00:04:04.000
The problem for you is
that then you lose control.

00:04:04.000 --> 00:04:07.890
You lose control over how your
technology is presented and defined.

00:04:08.060 --> 00:04:11.320
So I'd like to encourage you
to get in front of the curve,

00:04:11.570 --> 00:04:15.000
catch the wave,
and get to the beach as soon as you can.

00:04:15.990 --> 00:04:17.840
So we've been talking
at a very high level.

00:04:17.840 --> 00:04:20.620
I'd like to come back to Earth and
talk in a little bit more

00:04:20.620 --> 00:04:22.780
detail about what Automator is.

00:04:22.880 --> 00:04:27.530
Well, first we're calling it your own
personal automation assistant.

00:04:27.530 --> 00:04:29.980
And what it consists of
are four main pieces:

00:04:30.090 --> 00:04:33.170
an application to create workflows,

00:04:33.360 --> 00:04:37.930
A large set of pre-built actions that
you can use to create those workflows,

00:04:38.030 --> 00:04:41.230
tools to create new workflows,
this is where you come in,

00:04:41.230 --> 00:04:45.010
and a set of examples of
both actions and workflows.

00:04:47.480 --> 00:04:52.260
So, I've been throwing around words here,
actions, workflows, Automator,

00:04:52.260 --> 00:04:55.440
and I expect that some of you
who have installed the TigerSeed

00:04:55.440 --> 00:04:59.200
DVD may be puzzled and disappointed
that Automator isn't there.

00:04:59.340 --> 00:05:02.170
Well, I have a confession to make.

00:05:02.350 --> 00:05:05.890
In fact, it is there,
it's just called "Pipeline."

00:05:09.900 --> 00:05:14.160
So in fact it is there for
you to start working with.

00:05:14.190 --> 00:05:16.670
And I've been talking about actions
and workflows and there are a

00:05:16.670 --> 00:05:20.480
couple of other changes like that
which I'll come on to in a moment.

00:05:20.850 --> 00:05:22.980
Specifically, an action,
so we can define it for everyone so

00:05:23.080 --> 00:05:27.200
you can have a productive conversation,
is a discrete bit of functionality.

00:05:27.310 --> 00:05:30.720
This is what developers and scripters
will create and what customers

00:05:30.720 --> 00:05:32.740
will use to build their workflows.

00:05:32.850 --> 00:05:34.720
An example,
a very simple example that many

00:05:34.880 --> 00:05:37.850
people will need to use for
their workflows is copy files.

00:05:37.960 --> 00:05:42.390
It takes input files and
copies them to a new location.

00:05:42.800 --> 00:05:46.410
Now, here's where we come into one
of the additional terminologies.

00:05:46.410 --> 00:05:49.940
We also, in various places,
as you'll see during my presentation,

00:05:49.980 --> 00:05:51.340
refer to actions as stages.

00:05:51.340 --> 00:05:54.060
And that currently is mostly
on the developer side,

00:05:54.070 --> 00:05:57.800
but we will certainly be unifying
on a single term for this concept.

00:05:58.190 --> 00:05:59.630
So where do users get actions?

00:05:59.850 --> 00:06:03.200
Well, first of all,
we have over 120 in the Tiger seed today,

00:06:03.200 --> 00:06:06.740
and we plan to have quite a few
more by the time we ship Tiger.

00:06:06.840 --> 00:06:09.330
Some users will be able
to create their own,

00:06:09.420 --> 00:06:11.640
and finally we get to where you come in.

00:06:11.970 --> 00:06:14.850
We hope that third parties will
create their own set of actions

00:06:14.860 --> 00:06:15.940
for their own applications.

00:06:16.040 --> 00:06:19.590
You know your application best and
can create a rich set of actions

00:06:19.610 --> 00:06:23.570
for your customers to take advantage
of and attract new customers.

00:06:24.700 --> 00:06:26.850
So a workflow is composed of actions.

00:06:27.100 --> 00:06:29.560
This is what users
will create themselves.

00:06:29.620 --> 00:06:32.800
And here's a relatively simple example.

00:06:32.850 --> 00:06:36.420
I might want to email to the members
of my address book group family a new

00:06:36.420 --> 00:06:42.150
archive of a copy of every image with
keyword "family", "crops 15%" and "CPU

00:06:42.150 --> 00:06:45.500
filtered". Now you can think about how
long that would take you to do manually,

00:06:45.500 --> 00:06:48.980
especially for more than
a handful of pictures.

00:06:50.480 --> 00:06:52.510
But with Automator, it's very simple.

00:06:52.520 --> 00:06:55.930
And I'll just point out the fact that
the copy files example action I mentioned

00:06:56.060 --> 00:07:00.570
a couple slides ago appears here as
one of the actions in this workflow.

00:07:01.040 --> 00:07:04.390
And in fact,
this workflow is composed of six actions,

00:07:04.390 --> 00:07:07.120
which are highlighted in color,
so you can get an idea

00:07:07.120 --> 00:07:08.670
of how they break down.

00:07:13.080 --> 00:07:15.240
So now I'd like to give you a little
tour of the Automator interface.

00:07:15.240 --> 00:07:17.500
You saw some of it yesterday
in the keynote and in the

00:07:17.500 --> 00:07:19.000
developer tools overview.

00:07:19.000 --> 00:07:20.850
I'd like to show you a little bit more.

00:07:21.390 --> 00:07:24.000
Here's a new document.

00:07:24.190 --> 00:07:25.540
You can see the Filtered Action List.

00:07:25.610 --> 00:07:29.100
This is the list of actions that the user
building the workflow can select from.

00:07:29.280 --> 00:07:35.490
And it's controlled by the search field
and the action category filtering above.

00:07:36.630 --> 00:07:38.470
I've already mentioned the
search field that allows you to

00:07:38.610 --> 00:07:42.670
further filter the actions from
the category you have selected.

00:07:43.220 --> 00:07:45.270
And this, the view control we
didn't show yesterday,

00:07:45.280 --> 00:07:48.320
but this allows you to switch
between filtering by category

00:07:48.440 --> 00:07:50.710
and filtering by keyword.

00:07:51.130 --> 00:07:54.550
Here we're showing an example of
selecting the change and name keywords,

00:07:54.550 --> 00:07:57.700
which then shows us in the filtered
action list the list of actions

00:07:57.700 --> 00:08:00.270
having to do with changing file names.

00:08:02.090 --> 00:08:03.610
So again,
the area to the right is where you

00:08:03.620 --> 00:08:06.640
actually construct your workflow,
and I'd just like to step us

00:08:06.640 --> 00:08:08.900
through building a simple example.

00:08:09.000 --> 00:08:11.220
We're going to start off finding files,
and in fact,

00:08:11.330 --> 00:08:14.660
this action takes advantage of the great
new spotlight technology you heard about

00:08:14.660 --> 00:08:18.040
yesterday to find files on my computer.

00:08:18.120 --> 00:08:22.440
And I'm looking for files with "icon"
in the name and that are TIFFs.

00:08:22.570 --> 00:08:24.910
So I find a bunch of files.

00:08:25.150 --> 00:08:28.900
Now I want to scale these
images to a common size.

00:08:28.910 --> 00:08:32.580
But what happens when I try to add
the scale images action to my workflow

00:08:32.580 --> 00:08:35.870
is I get a warning from Automator,
letting me know that this action

00:08:35.870 --> 00:08:38.810
can change the data that's being
passed into it and asks me if

00:08:38.810 --> 00:08:42.720
I'd like to actually copy them
first and add a copy files action,

00:08:42.720 --> 00:08:46.340
so I'm working with the
copies and not the originals.

00:08:46.630 --> 00:08:49.580
So I'm going to say yes,
I want to add that too.

00:08:49.580 --> 00:08:51.850
And now I've got three actions
in my workflow and I'm scaling

00:08:51.860 --> 00:08:56.540
each image passed to the scale
images action to 480 pixels.

00:08:56.610 --> 00:09:00.250
Next,
let's use some fancy quartz technology

00:09:00.250 --> 00:09:02.620
and let's apply a blue filter.

00:09:03.140 --> 00:09:07.080
And let's see, then we're going to
convert the TIFFs to JPEG,

00:09:07.150 --> 00:09:09.760
and then we want to
import them into iPhoto.

00:09:09.760 --> 00:09:12.240
And indicated here is once
I've built my workflow,

00:09:12.260 --> 00:09:15.670
I can easily click the
"Run" button to execute it.

00:09:16.060 --> 00:09:18.410
And once I've built
and tested my workflow,

00:09:18.410 --> 00:09:19.500
I can save it.

00:09:19.510 --> 00:09:23.510
I can save it as a workflow document,
and in that case I can either

00:09:23.590 --> 00:09:26.580
reopen it in Automator and
run it from the tool itself,

00:09:26.580 --> 00:09:30.400
or I can save it to Scripts
menu to run from there.

00:09:30.440 --> 00:09:32.660
The other choice is to
save it as an application.

00:09:32.700 --> 00:09:35.040
This opens up a lot of
additional opportunities.

00:09:35.100 --> 00:09:36.830
First of all, then,
it can be double-clicked

00:09:36.830 --> 00:09:40.000
and launched from Finder,
but it can also be used as a droplet.

00:09:40.000 --> 00:09:43.990
You can then drop files on to feed
the beginning of your workflow.

00:09:44.080 --> 00:09:48.280
And still more, you can actually attach a
workflow application as an alarm

00:09:48.280 --> 00:09:52.000
in iCal so you can schedule
the execution of your workflows.

00:09:52.170 --> 00:09:55.320
And one more little tidbit,
if you use Image Capture to download your

00:09:55.320 --> 00:09:58.980
digital photos from your digital camera,
you can actually tell Image Capture

00:09:58.980 --> 00:10:02.400
to launch an application when
it's done downloading your photos,

00:10:02.530 --> 00:10:05.850
which allows you to build in
an image processing workflow

00:10:05.850 --> 00:10:07.510
right in Image Capture.

00:10:08.390 --> 00:10:10.480
So that's our little tour
of the Automator interface.

00:10:10.560 --> 00:10:14.300
Now I'd like to give you a brief
demo of creating a workflow.

00:10:14.300 --> 00:10:16.290
We switch to demo one.

00:10:20.100 --> 00:10:22.100
And what I'd like to do since
this is a developer conference

00:10:22.100 --> 00:10:24.860
is show you something that's
focused on developers' needs.

00:10:24.880 --> 00:10:28.660
Now, we in the Automator team have
over 120 action projects.

00:10:28.670 --> 00:10:31.430
And while you may not have that
many projects for your application,

00:10:31.430 --> 00:10:34.240
although you may,
I'm sure you have enough that you don't

00:10:34.240 --> 00:10:36.990
like to do things manually with them.

00:10:38.330 --> 00:10:43.400
Automator can help you eliminate a lot
of the drudgery in your development life.

00:10:43.530 --> 00:10:44.630
And it really has for us.

00:10:44.720 --> 00:10:47.440
We've used various Automator
workflows as we've developed the

00:10:47.440 --> 00:10:49.190
application to simplify our lives.

00:10:49.330 --> 00:10:51.130
One very similar to what
I'm going to show you today,

00:10:51.210 --> 00:10:55.200
and another that through most of
our development life of Automator

00:10:55.200 --> 00:11:00.410
we've used to build the project,
to start with the Xcode project files,

00:11:00.620 --> 00:11:05.200
bump the version, build the projects,
package them up,

00:11:05.340 --> 00:11:09.530
and attach the Mac OS X package to a
new email to the project team to send

00:11:09.530 --> 00:11:11.970
out routes every time we do a new build.

00:11:12.380 --> 00:11:16.200
This is just one simple example of
how Automator can simplify your life.

00:11:16.200 --> 00:11:19.790
So what I want to do for you today,

00:11:20.580 --> 00:11:22.260
is showing yet another feature.

00:11:22.260 --> 00:11:25.200
We've got a contextual menu in Finder
which allows you to start building

00:11:25.200 --> 00:11:27.830
workflows directly from Finder.

00:11:27.930 --> 00:11:32.540
So I don't want to show you 120 projects,
I've just got three here for an example.

00:11:32.650 --> 00:11:34.600
And what I want to do is build.

00:11:34.720 --> 00:11:38.750
So let's switch over to the keyword
interface just to show you that.

00:11:38.750 --> 00:11:41.860
And I'm going to select the
right keyword this time.

00:11:41.960 --> 00:11:45.260
Drag over the "Build
Xcode Project" action.

00:11:45.340 --> 00:11:48.210
And let's see,
I just want to do a clean build.

00:11:48.330 --> 00:11:51.870
And then finally,
I want to capture the build results

00:11:51.940 --> 00:11:54.250
in a new text edit document.

00:11:56.200 --> 00:12:00.500
So, alright, let's go ahead and try
running that workflow.

00:12:00.520 --> 00:12:02.690
So as you can see,
each action is marked with a

00:12:02.740 --> 00:12:05.440
green check to let you know that
it's completed successfully.

00:12:05.440 --> 00:12:08.960
Now we're building the projects,
and here are our build results.

00:12:10.240 --> 00:12:15.100
Great, so we've built our three projects,
but what I want to do is go back

00:12:15.360 --> 00:12:19.120
to Automator and save our workflow.

00:12:20.750 --> 00:12:24.040
We're going to be using this
throughout our demos today.

00:12:24.040 --> 00:12:27.410
And let's see, build projects.

00:12:28.000 --> 00:12:33.490
All right, and what I want to do now is
go back and look at our build

00:12:34.110 --> 00:12:35.400
and see what we've got here.

00:12:35.510 --> 00:12:39.350
So here I'd like to explain
that an Automator action is

00:12:39.350 --> 00:12:40.900
a standard Mac OS X bundle.

00:12:40.900 --> 00:12:43.740
It has the same contents
that you'd expect.

00:12:43.930 --> 00:12:46.650
It's contents, resources.

00:12:47.340 --> 00:12:49.000
And we've got a scripts folder here.

00:12:49.000 --> 00:12:51.340
This action is built using Apple Scripts,
though you can use other

00:12:51.350 --> 00:12:55.140
development languages,
which we'll show you during this session.

00:12:55.250 --> 00:12:58.040
And I want to look in
the main.script and,

00:12:58.120 --> 00:12:59.260
oh, that's a problem.

00:12:59.400 --> 00:13:02.250
I don't want to ship the source
of my action to my users.

00:13:02.400 --> 00:13:04.450
I need to strip that out.

00:13:05.470 --> 00:13:09.740
The problem is I don't have an action
to set a new build setting in Xcode,

00:13:09.740 --> 00:13:12.310
but in fact I will show you
how to do that in a moment.

00:13:12.400 --> 00:13:16.790
So can we go back to slides please?

00:13:19.900 --> 00:13:23.020
So I showed you a very simple workflow,
just three actions,

00:13:23.020 --> 00:13:25.300
but I've already found
a hole in my workflow.

00:13:25.340 --> 00:13:27.870
I want to build the projects,
but they're not building the way I want,

00:13:27.910 --> 00:13:29.400
and I don't want to have
to go through three.

00:13:29.400 --> 00:13:32.500
One thing,
you could open each up in Xcode manually,

00:13:32.560 --> 00:13:36.330
add the new build setting,
close it again, but for 120,

00:13:36.330 --> 00:13:38.600
you do not want to do that manually.

00:13:38.670 --> 00:13:41.830
But I've now got a hole in my workflow,
so how do I fill that in?

00:13:41.920 --> 00:13:44.800
Well, the easiest way is to just do
it right there in Automator.

00:13:44.800 --> 00:13:48.960
You can add a run script action,
which allows you to enter whatever

00:13:48.960 --> 00:13:52.490
Apple script you need to do
what the action needs to do,

00:13:52.490 --> 00:13:53.800
right there in the interface.

00:13:53.830 --> 00:13:57.500
And you can use this as an easy
way to prototype a new action.

00:13:57.540 --> 00:14:01.500
Once you've done that and tested it
and seen that it's useful to you,

00:14:01.500 --> 00:14:04.530
you may then want to turn
it into a fully fledged

00:14:04.600 --> 00:14:24.500
[Transcript missing]

00:14:26.380 --> 00:14:27.960
So before we get to
creating stages though,

00:14:27.960 --> 00:14:31.300
we need to talk a little bit about what
is necessary in your application so that

00:14:31.300 --> 00:14:34.000
you can actually write Automator actions.

00:14:34.040 --> 00:14:37.470
And first,
your application's technology needs

00:14:37.470 --> 00:14:40.600
to be either or both have a scripting
dictionary which allows you to

00:14:40.600 --> 00:14:44.870
write Apple script-based actions,
or APIs which would allow you

00:14:44.870 --> 00:14:47.090
to create actions using Cocoa.

00:14:48.890 --> 00:14:51.980
So the framework for the rest of what
you're going to see today is that if you

00:14:51.980 --> 00:14:54.900
need to make your application scriptable,
you need to be familiar with Apple events

00:14:54.900 --> 00:14:57.700
and if your app is a Cocoa app,
Cocoa scripting.

00:14:57.780 --> 00:15:00.590
But what I'm primarily going
to talk about today are

00:15:00.620 --> 00:15:05.100
Apple Script Studio and Cocoa bindings
and Xcode to actually build actions.

00:15:05.200 --> 00:15:08.100
Now all these technologies have
lots of documentation on both

00:15:08.100 --> 00:15:11.590
the C:/DVD and the Apple website,
and there are a number of sessions on

00:15:11.590 --> 00:15:13.690
all of these topics this week as well.

00:15:15.620 --> 00:15:18.260
So with that, I've now promised you to,
I'll show you how to

00:15:18.260 --> 00:15:19.310
fill in that workflow.

00:15:19.310 --> 00:15:21.570
Can we come back to demo one please?

00:15:26.500 --> 00:15:29.060
So let's clean things up here.

00:15:29.080 --> 00:15:36.090
So what we need to do is add a
run script action to our workflow.

00:15:37.560 --> 00:15:39.620
We'll add that in right there,
that's where we need it.

00:15:39.620 --> 00:15:42.460
Let's remove the comment we get.

00:15:42.550 --> 00:15:45.080
To save you watching me type,
I'm just going to drag in

00:15:45.150 --> 00:15:48.690
this clipping of the code,
compile it to format it.

00:15:49.330 --> 00:15:52.850
And what we're doing here is we
need to tell Xcode to do something,

00:15:52.850 --> 00:15:54.930
so we're relying on
Xcode's scriptability.

00:15:55.050 --> 00:15:59.420
And all we need Xcode to do is
open the projects that we pass in,

00:15:59.420 --> 00:16:01.160
and then use

00:16:01.570 --> 00:16:04.800
Xcode Scriptability to add
a new build setting to the

00:16:04.800 --> 00:16:06.500
first target in my project.

00:16:06.630 --> 00:16:08.730
And what I'm going to do is add
a build setting with the key

00:16:08.790 --> 00:16:13.310
"other_osa" flags and a value "-x".
And what this option does when it's

00:16:13.310 --> 00:16:17.500
passed to OSACompile is strip out
the source in the built product.

00:16:17.500 --> 00:16:24.410
So, let's go ahead and run that workflow.

00:16:26.400 --> 00:16:29.620
So Xcode now is opening each project
and adding that build setting and

00:16:29.620 --> 00:16:32.380
then now building the project and
we're doing a clean so we remove the

00:16:32.380 --> 00:16:35.130
version that had the script in there.

00:16:35.360 --> 00:16:38.840
And here's our build results,
and we can search through here to find,

00:16:38.840 --> 00:16:41.910
to make sure that the option has
now been passed to OSA Compile,

00:16:41.910 --> 00:16:43.490
and there it is.

00:16:43.980 --> 00:16:47.070
And just to be paranoid,
let's go back to Finder and look

00:16:47.070 --> 00:16:51.450
in our build products and make
sure the script is no longer there.

00:16:54.370 --> 00:16:55.300
and it's gone.

00:16:55.300 --> 00:16:58.020
So now this action is safe to
send to our customers if we don't

00:16:58.020 --> 00:16:59.290
want them to see the source.

00:16:59.300 --> 00:17:00.170
So this is great.

00:17:00.430 --> 00:17:05.300
I've solved my immediate problem,
but it's completely specific to the

00:17:05.300 --> 00:17:11.290
exact problem I'm trying to solve.

00:17:11.300 --> 00:17:15.460
You can imagine that you might want
to set different build settings and

00:17:15.460 --> 00:17:17.300
different values at different times.

00:17:17.300 --> 00:17:21.300
So maybe this would be a useful action
to create a fully fledged action.

00:17:22.200 --> 00:17:23.070
and you'll see that soon.

00:17:23.180 --> 00:17:27.100
But before we get to that,
we need to talk about the SDK.

00:17:27.100 --> 00:17:30.540
So what I hope you'll get out of this
portion of the session is a better

00:17:30.540 --> 00:17:33.100
understanding of the various steps
that go into building an action.

00:17:33.100 --> 00:17:36.160
From understanding the way
the Xcode project is laid out,

00:17:36.220 --> 00:17:40.050
to building the user interface in IB,
using Cocoa bindings to

00:17:40.100 --> 00:17:43.100
connect the elements of your
user interface to your code.

00:17:43.210 --> 00:17:46.490
And the demos we're going to show you
today will be shown in both writing the

00:17:46.490 --> 00:17:49.100
code in AppleScript and Objective-C.

00:17:49.100 --> 00:17:50.900
And to do that,
you need to know about the

00:17:50.900 --> 00:17:53.100
Automator APIs and public classes.

00:17:53.100 --> 00:17:54.290
And finally,
the info P list that's part of

00:17:54.290 --> 00:17:55.780
the action is very important.

00:17:55.880 --> 00:17:58.110
It gives Automator a lot
more information about how to

00:17:58.110 --> 00:18:01.100
present your action to the user.

00:18:03.600 --> 00:18:04.430
But wait, there's more.

00:18:04.560 --> 00:18:07.220
I'll also touch briefly on how
you test an Automator action

00:18:07.380 --> 00:18:09.100
and then how you install it.

00:18:09.130 --> 00:18:11.580
And finally,
some design guidelines analogous to

00:18:11.580 --> 00:18:15.390
the Apple Human Interface guidelines
that we've developed for making actions

00:18:15.400 --> 00:18:20.130
that will work and feel to users the
way that the ones that we create will.

00:18:21.770 --> 00:18:24.200
So the project layout,
this is-- Actions are built

00:18:24.200 --> 00:18:25.900
using standard Xcode projects.

00:18:25.900 --> 00:18:28.670
And again,
we've got the two templates today.

00:18:29.200 --> 00:18:33.330
and depending on which one you choose,
you will get either a main script

00:18:33.380 --> 00:18:35.940
or a header and source file pair.

00:18:35.990 --> 00:18:38.860
A main.nib to hold your actions
user interface if it needs one,

00:18:38.860 --> 00:18:39.940
it doesn't have to have one.

00:18:39.940 --> 00:18:42.940
You saw the new text edit document action
doesn't have a user interface because

00:18:42.940 --> 00:18:45.270
there's no options that are necessary.

00:18:45.350 --> 00:18:48.420
A description.rtfd which is a
textual description of what your

00:18:48.430 --> 00:18:52.100
action does and that's what appears
in the lower left hand corner

00:18:52.100 --> 00:18:54.640
of the Automator user interface.

00:18:54.730 --> 00:18:58.090
And finally the Info.plist which
I mentioned a moment ago.

00:18:58.230 --> 00:19:01.750
And instead of telling you more about the
rest of the steps in building an action,

00:19:01.750 --> 00:19:03.940
I'd like to ask Tim Bumgarner
from the Automator team to come

00:19:03.940 --> 00:19:07.340
up and give you a demonstration of
creating an action using AppleScript.

00:19:07.430 --> 00:19:09.420
Please welcome Tim.

00:19:10.560 --> 00:19:11.830
Thank you, Todd.

00:19:11.890 --> 00:19:14.200
So what I'd like to do is we're going
to go ahead and we're going to save

00:19:14.200 --> 00:19:15.260
this and we're going to close it off.

00:19:15.290 --> 00:19:17.060
We'll reuse that workflow.

00:19:17.300 --> 00:19:21.240
And we're going to take and replace
the run script stage that he created,

00:19:21.300 --> 00:19:22.250
stage action.

00:19:22.340 --> 00:19:24.640
We're going to create that and
replace that action with something

00:19:24.640 --> 00:19:26.000
that we create using Apple Script.

00:19:26.150 --> 00:19:29.250
And as he mentioned,
we do have two templates for you.

00:19:29.260 --> 00:19:35.080
So if you were to go to the
file menu of Xcode itself,

00:19:35.080 --> 00:19:38.710
and after it crashes, lucky me.

00:19:39.840 --> 00:19:41.490
Thank heavens for G5s.

00:19:41.570 --> 00:19:43.120
Okay, so new project.

00:19:43.200 --> 00:19:45.740
We go to a new project and you'll
see that there are two choices

00:19:45.740 --> 00:19:47.080
and you have to look for them.

00:19:47.080 --> 00:19:48.110
They're a little further down.

00:19:48.120 --> 00:19:51.160
They are down in the
standard Apple plug-ins.

00:19:51.160 --> 00:19:53.350
You'll see that there's an
AppleScript pipeline stage.

00:19:53.380 --> 00:19:56.700
This is the project template you'll
want to use if you want to create

00:19:56.860 --> 00:19:58.760
it predominantly using AppleScript.

00:19:58.930 --> 00:20:02.200
It doesn't preclude you to
adding additional languages,

00:20:02.200 --> 00:20:06.390
but if you do want to include at
least have your main run part of

00:20:06.390 --> 00:20:11.080
the stage or action be part of that,
you'll want to use this template.

00:20:11.080 --> 00:20:14.760
If you want it to use Objective-C or
other C-based languages,

00:20:14.760 --> 00:20:16.610
you would choose the
Cocoa Pipeline stage.

00:20:16.620 --> 00:20:20.110
But for our demo purposes,
let's go ahead and open up a project

00:20:20.110 --> 00:20:24.040
that I've got sort of started so we
don't have to watch me laboriously

00:20:24.040 --> 00:20:25.960
drag out user interface items.

00:20:26.000 --> 00:20:27.980
So I'm going to open up my project.

00:20:27.980 --> 00:20:30.880
And as he mentioned, it looks very,
to those of you that have

00:20:30.990 --> 00:20:33.200
used AppleScript Studio,
very similar.

00:20:33.200 --> 00:20:35.820
We have a scripts folder here
that has our main script.

00:20:35.940 --> 00:20:37.540
Let me open up an editor window.

00:20:38.870 --> 00:20:40.850
And we've got, of course,
the other part that's

00:20:40.890 --> 00:20:42.340
interesting to us is our NIM.

00:20:42.340 --> 00:20:45.310
So I'm going to go ahead and
look at the interface for this

00:20:45.450 --> 00:20:47.560
action that I'm about to write.

00:20:47.630 --> 00:20:52.050
And you can see that in his run script,
what he did is he took a key and

00:20:52.050 --> 00:20:56.160
a value and he put it in the build
settings of the first target of each

00:20:56.160 --> 00:20:58.810
project as it came in to the action.

00:20:58.900 --> 00:21:01.180
So what we're going to do is build
this action so it can be used

00:21:01.180 --> 00:21:02.600
much more in a generic manner.

00:21:02.600 --> 00:21:06.690
At any time I decide I need to add a new
setting or change an existing setting,

00:21:06.690 --> 00:21:08.430
I could use this action.

00:21:08.620 --> 00:21:09.860
And you can see I've got it laid out.

00:21:09.860 --> 00:21:10.650
I've got the setting.

00:21:10.660 --> 00:21:14.160
This will be the name of the setting
and the value that we might put in.

00:21:14.160 --> 00:21:16.180
And I've added one additional twist.

00:21:16.320 --> 00:21:19.290
I can not only choose that
I want it for the first target,

00:21:19.290 --> 00:21:22.140
I can actually have it applied
to all the targets that

00:21:22.140 --> 00:21:23.960
happen to be in that project.

00:21:24.110 --> 00:21:27.760
But the way that we put this together
is that we will use this object you'll

00:21:27.760 --> 00:21:29.760
see down here in the project window.

00:21:29.940 --> 00:21:32.860
This is the parameters object
that gets passed to your action

00:21:33.160 --> 00:21:34.300
from one step to the next.

00:21:34.370 --> 00:21:38.320
So as your action gets executed,
this is what's going to be passed to it.

00:21:38.320 --> 00:21:39.300
So what we're going to do
is we're going to bind.

00:21:39.360 --> 00:21:41.040
If any of you got to see
the Cocoa bindings or

00:21:41.040 --> 00:21:43.050
are experienced with it,
we use Cocoa bindings in

00:21:43.050 --> 00:21:44.960
nearly all of our actions.

00:21:45.040 --> 00:21:48.520
So I'm going to go to the info panel,
go to the bindings,

00:21:48.580 --> 00:21:51.100
and on this first one I'm
going to bind it to its value.

00:21:51.340 --> 00:21:53.680
And I know that I want to
call this setting name.

00:21:53.770 --> 00:21:55.860
Go ahead and hit enter and bind that.

00:21:55.910 --> 00:22:00.420
I'll go to the value and we'll
bind this to setting value.

00:22:00.470 --> 00:22:03.240
And on the last one,
it's not bound to its value.

00:22:03.290 --> 00:22:06.020
It's actually going to
be bound to its index.

00:22:06.120 --> 00:22:09.320
We want to know that if it's going
to pass an integer in as a parameter.

00:22:09.320 --> 00:22:11.860
Zero will be for first,
one will be for all.

00:22:11.950 --> 00:22:15.050
So I'll go ahead and type
in which target that I want.

00:22:15.170 --> 00:22:16.530
So everything is pretty well set.

00:22:16.690 --> 00:22:18.640
That's all I need to
do for the interface.

00:22:18.640 --> 00:22:21.450
Keeping in mind that this is
the portion that's inside of

00:22:21.450 --> 00:22:23.180
each little action that you see.

00:22:23.330 --> 00:22:27.010
So we're just responsible as an
action writer for the content.

00:22:27.230 --> 00:22:30.250
Automator takes care of making sure you
end up in the right order and passing

00:22:30.260 --> 00:22:31.870
all the information that you need.

00:22:32.100 --> 00:22:34.710
So let's go back over and we're
now going to edit our script.

00:22:34.710 --> 00:22:37.840
And let's make this
window a little larger.

00:22:37.990 --> 00:22:41.310
And you'll see that I have the,
the template starts out

00:22:41.310 --> 00:22:42.310
with a simple on run.

00:22:42.480 --> 00:22:46.180
This is what gets executed as the stage,
as the workflow is going

00:22:46.180 --> 00:22:47.380
through its process.

00:22:47.580 --> 00:22:51.980
And what comes in is the input is
the output from the previous stage.

00:22:52.100 --> 00:22:55.900
And then the next thing that comes
in is the parameters that the user

00:22:55.900 --> 00:22:57.940
set up in your UI for your action.

00:22:58.080 --> 00:23:01.170
And so what I'm going to do is reuse
Todd's little script because it's

00:23:01.260 --> 00:23:03.680
predominantly very much the same script.

00:23:03.680 --> 00:23:05.600
We're going to make a
couple additions to it.

00:23:05.700 --> 00:23:07.600
So the first thing I need to do
is get some values out of this.

00:23:07.600 --> 00:23:09.850
And then the second thing
I need to do is get some values

00:23:09.850 --> 00:23:11.250
out of that parameters object.

00:23:11.250 --> 00:23:13.400
And let's see,
we'll do a little one-handed typing

00:23:13.400 --> 00:23:14.800
here and put in a couple things.

00:23:14.800 --> 00:23:16.020
So we've got a setting name.

00:23:16.050 --> 00:23:18.400
We're going to pull that out
of the parameters object.

00:23:18.400 --> 00:23:19.690
Let's check syntax so far.

00:23:19.960 --> 00:23:22.790
And we've got the value,
and we've got our target,

00:23:22.790 --> 00:23:24.650
and we coerce it to an integer
just to make sure we get

00:23:24.650 --> 00:23:26.290
it in the format we want.

00:23:26.430 --> 00:23:29.510
The only thing that's left to do is,
the way that the script was originally

00:23:29.570 --> 00:23:33.000
written was to only apply a fixed value.

00:23:33.110 --> 00:23:36.380
He was always passing in other OSA flags,
and he was passing in a key.

00:23:36.510 --> 00:23:37.970
And he was always doing
it to the first target.

00:23:38.000 --> 00:23:41.600
So what I want to do is grab this,
and I'm going to replace it.

00:23:41.730 --> 00:23:43.470
And I'm going to test that which target.

00:23:43.560 --> 00:23:46.800
If it's zero, that means I want to apply
it just to the first target.

00:23:46.910 --> 00:23:49.020
So it looks very similar
to what we just had,

00:23:49.020 --> 00:23:51.750
except for now I get to
pass in the real value,

00:23:51.860 --> 00:23:54.060
or the value that's
passed in our parameter,

00:23:54.060 --> 00:23:56.340
and also the name.

00:23:56.800 --> 00:23:59.490
If I continue on,
it says if which target is one,

00:23:59.490 --> 00:24:00.500
this means all.

00:24:00.500 --> 00:24:03.380
So I'm going to go through and I'm
going to do a little repeat loop for

00:24:03.430 --> 00:24:07.660
each target in the specified project,
and I'm going to do the same thing.

00:24:07.660 --> 00:24:08.700
I'm going to apply it there.

00:24:08.700 --> 00:24:10.700
So let's finish off the rest of this.

00:24:10.700 --> 00:24:12.700
I'll go ahead and save that.

00:24:12.830 --> 00:24:15.690
And what I'm going to do is we use
a custom executable as setup for

00:24:15.690 --> 00:24:17.700
you automatically in your template.

00:24:17.730 --> 00:24:20.280
So when it's time to run,
what you can do is edit

00:24:20.360 --> 00:24:21.790
your argument setting.

00:24:21.790 --> 00:24:23.600
I'll bring up the inspector.

00:24:23.660 --> 00:24:25.690
And you pass in the argument.

00:24:25.700 --> 00:24:29.590
Currently it's called "dash stage."
It'll be "dash action" hopefully.

00:24:29.590 --> 00:24:32.280
And you just give it in
quotes the name of your stage,

00:24:32.290 --> 00:24:34.690
your built product that you're building.

00:24:34.710 --> 00:24:39.700
And what we'll do is when I run this,
Automator looks for that argument.

00:24:39.700 --> 00:24:41.440
It's an optional launch argument.

00:24:41.440 --> 00:24:44.700
And it'll take your built version
and use it inside of Automator.

00:24:44.700 --> 00:24:46.700
Instead of having to
worry about putting it,

00:24:46.700 --> 00:24:49.700
building it, copying it,
to the right location so it can find it.

00:24:49.700 --> 00:24:50.700
It's much easier to do this.

00:24:50.700 --> 00:24:53.700
Particularly if you're doing
Objective C or Cocoa programming,

00:24:53.700 --> 00:24:56.510
you can debug these very
simply using the same process.

00:24:56.700 --> 00:24:58.050
So we've got our application.

00:24:58.050 --> 00:24:59.700
I'm going to go ahead and close that.

00:24:59.700 --> 00:25:03.060
Go back to our previously saved one.

00:25:04.170 --> 00:25:06.820
And what I'm going to do
is go ahead and go up here.

00:25:06.820 --> 00:25:10.850
We're going to delete this,
ignore the little artifact.

00:25:10.850 --> 00:25:12.780
And I'm going to go find
the one that I just created.

00:25:12.790 --> 00:25:15.340
I believe I called it "Set
Build Settings." So I'm

00:25:15.340 --> 00:25:16.840
going to drag this in here.

00:25:16.840 --> 00:25:19.260
I'll put it in its place
where it was before.

00:25:19.380 --> 00:25:22.590
I'm going to put other OSA flags.

00:25:22.950 --> 00:25:25.800
And I'm going to pass that -x.

00:25:25.800 --> 00:25:27.460
And in this case,
instead of just the first,

00:25:27.460 --> 00:25:28.690
I want to apply it to all.

00:25:28.700 --> 00:25:29.800
So I think everything looks good.

00:25:29.800 --> 00:25:32.010
I'll go ahead and build and run.

00:25:32.300 --> 00:25:33.740
And you'll see if you can
right here in the back,

00:25:33.740 --> 00:25:37.340
it's actually opening each project
in Xcode and setting the value.

00:25:37.430 --> 00:25:39.040
It's now building those.

00:25:39.040 --> 00:25:44.780
And if I do the same sort of thing
and search for "dash x" or "dash

00:25:44.790 --> 00:25:47.160
x," you'll see that it is indeed
being passed to the OSI compile.

00:25:47.180 --> 00:25:48.770
So you can see how very simple it is now.

00:25:48.770 --> 00:25:51.170
I can put whatever build
setting I need to apply to that.

00:25:51.170 --> 00:25:53.480
So it's very simple to take
that prototype and wrap it

00:25:53.480 --> 00:25:56.110
up into a user interface and
put it in using AppleScript.

00:25:56.570 --> 00:25:58.180
Thank you, Todd.

00:26:04.010 --> 00:26:08.180
So now you've seen how to create
an action using Apple Script.

00:26:08.200 --> 00:26:10.660
The next thing is to talk about how
you create an action using Cocoa.

00:26:10.660 --> 00:26:14.300
And to do that, we need to discuss
briefly the Cocoa APIs.

00:26:15.000 --> 00:26:17.900
So again,
we see the name "Pipeline," but these

00:26:17.900 --> 00:26:21.900
are in the PipelineEngine.framework,
and there are two public classes

00:26:21.900 --> 00:26:26.250
of interest to developers
that want to create Pipeline

00:26:26.730 --> 00:26:29.150
Automator actions using Cocoa.

00:26:29.290 --> 00:26:32.360
PE Stage is the abstract base class,
but PE Bundle Stage,

00:26:32.360 --> 00:26:36.330
which is a subclass of PE Stage,
is the stage that you will want to

00:26:36.330 --> 00:26:39.410
subclass from to create your own actions.

00:26:39.890 --> 00:26:45.640
and Eric Peiton,
another one of our Automator engineers,

00:26:45.640 --> 00:26:51.490
will come up and show you how
to build an action using Cocoa.

00:26:51.610 --> 00:26:53.430
Thanks, Todd.

00:26:56.240 --> 00:26:59.140
So we saw Tim do the whole
thing in AppleScript,

00:26:59.180 --> 00:27:01.150
and it was fast and it
was quick and it was easy.

00:27:01.220 --> 00:27:05.100
It's just as easy to do the same
kind of thing in Objective-C.

00:27:05.400 --> 00:27:08.820
However, instead of repeating what
Todd and Tim have both done,

00:27:08.820 --> 00:27:12.440
I'm going to go ahead and create
a different action that does

00:27:12.520 --> 00:27:14.100
something a little bit different.

00:27:14.100 --> 00:27:16.220
What I'd like to do is,
one of the things that all

00:27:16.220 --> 00:27:19.070
of this generates is this big
text edit document at the end.

00:27:19.140 --> 00:27:24.100
Well, 95% of what's in that text edit
document is what was successful.

00:27:24.100 --> 00:27:26.060
Well, you don't really care about
what was successful in a build.

00:27:26.110 --> 00:27:29.100
That's great, fine, wonderful.

00:27:29.180 --> 00:27:31.480
What you really are worried about is,
what warnings did I get,

00:27:31.480 --> 00:27:33.070
what errors did I get during my build?

00:27:33.100 --> 00:27:36.030
So what I'd like to do is,
I'd like to create a small action

00:27:36.180 --> 00:27:40.100
that parses through all that text,
finds the warnings and errors,

00:27:40.100 --> 00:27:42.150
encapsulates that information,
creates new text,

00:27:42.250 --> 00:27:46.100
and passes that to the text
edit document that gets created.

00:27:46.100 --> 00:27:49.100
And to do that,
we're going to use a Cocoa Automator.

00:27:49.100 --> 00:27:52.090
So, we're going to use a Cocoa Automator
action instead of an AppleScript one.

00:27:52.320 --> 00:27:55.790
Now, as Tim showed,
you just go into Project, New,

00:27:55.790 --> 00:28:01.100
Cocoa Pipeline Stage in the
seed and create your action.

00:28:01.100 --> 00:28:03.370
We'll do the exact same thing,
and I'm going to go ahead and

00:28:03.420 --> 00:28:10.100
start off with a pre-built
stage so that you can see it.

00:28:10.100 --> 00:28:12.060
We can go ahead and close this.

00:28:12.100 --> 00:28:16.610
We don't need that open right now.

00:28:18.310 --> 00:28:22.370
pre-built one called create build report
you'll notice it has the executable

00:28:22.600 --> 00:28:25.920
automator executable already set up
for us and all that kind of stuff if

00:28:25.950 --> 00:28:29.960
you look in here in the classes you'll
notice that there's a create build report

00:28:29.960 --> 00:28:33.700
dot h and a create build report dot
m in the dot h you'll notice that it is

00:28:33.700 --> 00:28:38.380
a pe bundle stage as todd just mentioned
in the last slide and in the code you'll

00:28:38.380 --> 00:28:44.980
notice that it it has a one method run
with input from stage error now this

00:28:44.980 --> 00:28:48.840
method uh is all you really have to
have to make one of these things of

00:28:48.840 --> 00:28:53.110
course you can extend and do as much as
you want outside of this but this method

00:28:53.110 --> 00:28:57.850
is called at runtime when it's your
turn to go we pass you the input from

00:28:57.850 --> 00:29:03.520
the previous stages or previous actions
output we pass you who that person was

00:29:03.520 --> 00:29:08.070
in this case it's called pe stage and
we pass you an empty dictionary which you

00:29:08.070 --> 00:29:11.810
can fill up with your error information
that can be passed back then presented to

00:29:11.810 --> 00:29:17.170
the user if something happens during the
flow that you want to return um before we

00:29:17.170 --> 00:29:20.910
add the code into here we need to go into

00:29:21.200 --> 00:29:26.720
the nib and do essentially
the same thing that Tim did.

00:29:26.720 --> 00:29:28.800
And everything is managed using bindings.

00:29:29.060 --> 00:29:32.170
This saves you the work of managing
saving the preferences off.

00:29:32.170 --> 00:29:33.550
We take care of everything.

00:29:33.550 --> 00:29:35.850
If everything is bound correctly,
there's nothing for you to do.

00:29:35.860 --> 00:29:38.210
You draw your interface,
you hook it up to the bindings,

00:29:38.210 --> 00:29:40.220
and the parameters object,
and you're done.

00:29:40.220 --> 00:29:42.270
In this case,
we have included a checkbox,

00:29:42.270 --> 00:29:44.180
include warnings in the build report.

00:29:44.180 --> 00:29:46.050
And what this will allow
you to do is if checked,

00:29:46.050 --> 00:29:48.980
it will show you the actual warnings
in the build report instead of

00:29:48.990 --> 00:29:50.740
just the number of warnings.

00:29:50.740 --> 00:29:53.660
So we will go ahead and move that,
go to the bindings.

00:29:53.660 --> 00:29:59.370
We will add a value, include warnings.

00:29:59.370 --> 00:29:59.370
And we're going to go ahead and

00:29:59.530 --> 00:30:00.400
and we're done.

00:30:00.400 --> 00:30:03.040
We'll save off that nib and it's
literally just as easy as that.

00:30:03.050 --> 00:30:05.800
You drop a checkbox,
you add it to a binding, you're done.

00:30:05.840 --> 00:30:08.150
When Todd a little later
talks about the InfoP-List,

00:30:08.150 --> 00:30:11.710
you'll be able to see how these defaults
are set for these different bindings and

00:30:11.710 --> 00:30:13.800
everything for you in our InfoP-List.

00:30:13.820 --> 00:30:17.060
But for the most part, at this point,
your interface is complete.

00:30:17.180 --> 00:30:19.610
We'll go back to our code and

00:30:22.590 --> 00:30:26.730
For expediency's sake,
instead of showing you all this code,

00:30:26.730 --> 00:30:30.500
I will go ahead and just
copy and paste it here.

00:30:30.810 --> 00:30:35.500
And what I've got is I've got a run
with input that's already filled out.

00:30:35.500 --> 00:30:37.690
The intention here is to take
that data that is passed to us,

00:30:37.690 --> 00:30:40.470
coerce it into a string,
parse through that string

00:30:40.500 --> 00:30:43.550
looking for specific tokens,
count up the number of

00:30:43.550 --> 00:30:45.560
warnings and errors,
create a new string that we

00:30:45.570 --> 00:30:48.540
want to show to the user,
and then coerce that back into

00:30:48.630 --> 00:30:52.500
whatever needs to be passed to
the next object in the flow.

00:30:53.710 --> 00:31:01.660
We'll get a string out of
what came in previously,

00:31:01.750 --> 00:31:03.420
which we call the build report here.

00:31:03.420 --> 00:31:04.680
It's the input.

00:31:04.700 --> 00:31:06.690
We go through, we course,
we look for certain things that

00:31:06.750 --> 00:31:08.600
happen to be in the Xcode output.

00:31:08.710 --> 00:31:10.290
Of course, in your code,
you might want to do something far more

00:31:10.290 --> 00:31:14.020
fancy using reg Xs and stuff like that,
but this is just an example.

00:31:14.020 --> 00:31:16.120
We look for warnings.

00:31:16.320 --> 00:31:18.900
We look for errors,
we add them all up and

00:31:18.990 --> 00:31:21.250
create a new string,
and then we return, and at the very end,

00:31:21.250 --> 00:31:23.370
you'll notice here,
we return an NSAppleEventDescriptor

00:31:23.370 --> 00:31:24.730
descriptor with string.

00:31:24.740 --> 00:31:27.780
Now we're doing this because of something
else you're going to learn about later.

00:31:27.780 --> 00:31:29.170
You declare your data types.

00:31:29.260 --> 00:31:31.540
In this type,
we're saying we're a data blob,

00:31:31.540 --> 00:31:35.840
and a data blob is defined as
our NSAppleEventDescriptor.

00:31:35.840 --> 00:31:39.270
There's more about this in the SDK,
and it's not something that is

00:31:39.500 --> 00:31:41.740
germane to this exact situation.

00:31:41.740 --> 00:31:45.800
But let's go ahead and save and build.

00:31:49.400 --> 00:31:52.560
and it should finish and run.

00:31:52.670 --> 00:31:55.310
And you notice when
Automator starts here,

00:31:55.440 --> 00:31:59.810
"I should have a build report
stage." So here you can

00:31:59.830 --> 00:32:01.440
see the build report stage.

00:32:01.440 --> 00:32:06.790
So let's go ahead and open up
our previously built document.

00:32:06.790 --> 00:32:06.790
And we will...

00:32:07.650 --> 00:32:13.270
add our Create Build Report at
the end of our workflow but

00:32:13.270 --> 00:32:15.290
before our new TextEdit document.

00:32:15.290 --> 00:32:19.880
You notice here that it's already
automatically checked for us.

00:32:19.880 --> 00:32:19.880
You'll see later that

00:32:20.960 --> 00:32:25.210
You'll see later that the defaults
parameters we had set for our bundle have

00:32:25.470 --> 00:32:27.700
this already set to be on by default.

00:32:27.700 --> 00:32:30.720
Even though we didn't have
to turn it on in the nib,

00:32:30.720 --> 00:32:34.800
we already read the defaults out
of the bindings and set that.

00:32:34.800 --> 00:32:38.050
One thing we'll also do is we'll go
ahead and disable the set build settings.

00:32:38.050 --> 00:32:40.730
We've already set the build
settings in all these projects.

00:32:40.860 --> 00:32:44.040
When I disabled it,
I checked on the enable/disable

00:32:44.360 --> 00:32:48.980
box up there in the upper right
hand corner of each of the actions.

00:32:49.030 --> 00:32:51.790
That action will be skipped
over in the workflow.

00:32:51.800 --> 00:32:55.800
It will not execute and
it's grayed out and stuff.

00:32:55.800 --> 00:32:58.370
You notice the little dash there
instead of a number letting

00:32:58.370 --> 00:32:59.620
you know that it's disabled.

00:32:59.800 --> 00:33:03.800
I should now be able to
save and run this thing.

00:33:03.800 --> 00:33:05.800
What it will do is it will
clean and build all my projects.

00:33:05.800 --> 00:33:07.800
It will create a build report.

00:33:07.800 --> 00:33:09.800
There we have our little build report.

00:33:09.800 --> 00:33:10.800
It threw away all of my projects.

00:33:10.800 --> 00:33:12.800
It threw away all the
stuff we didn't care about.

00:33:12.800 --> 00:33:17.800
It left us with the total warnings, one,
and a copy of the warnings,

00:33:17.800 --> 00:33:18.800
unused variable, unused variable.

00:33:18.800 --> 00:33:22.800
We don't write code with warnings,
so we had to actually insert one.

00:33:22.850 --> 00:33:24.750
For your sake, of course.

00:33:24.800 --> 00:33:26.660
That's my demo.

00:33:26.770 --> 00:33:27.670
Back to you, Todd.

00:33:33.710 --> 00:33:34.920
Thank you very much, Eric.

00:33:34.970 --> 00:33:37.820
I just wanted to underline
two points that Eric made,

00:33:37.820 --> 00:33:40.100
but to make sure you get this.

00:33:40.150 --> 00:33:42.760
If you saw, there was no script smart
group in Xcode there.

00:33:42.760 --> 00:33:44.100
There's no Apple script there at all.

00:33:44.100 --> 00:33:47.660
Now, we love Apple script,
but if you prefer to work in Cocoa,

00:33:47.700 --> 00:33:48.050
that's great.

00:33:48.110 --> 00:33:53.110
You can do that to create
your Automator actions.

00:33:53.140 --> 00:33:56.160
The other thing to mention is that we've
been showing Cocoa Bindings exclusively

00:33:56.160 --> 00:33:58.100
for managing the Actions User Interface.

00:33:58.100 --> 00:34:02.180
But in fact, you can use what you used in
Cocoa before Cocoa Bindings existed,

00:34:02.180 --> 00:34:08.070
or you can use AppleScript Studio also,
if you already know that technology.

00:34:09.740 --> 00:34:14.810
So we've already made several references
to the Info.plist of your action.

00:34:14.810 --> 00:34:19.400
And what I'd like to do now is give
you a little roadmap for which keys

00:34:19.400 --> 00:34:22.110
are there and what they're used for.

00:34:23.240 --> 00:34:25.290
So there are four kind of basic keys.

00:34:25.340 --> 00:34:28.290
These are all strings,
and they're reflected in various

00:34:28.300 --> 00:34:30.160
ways in the Automator user interface.

00:34:30.200 --> 00:34:33.030
PL application is the first one,
and this is used to specify

00:34:33.360 --> 00:34:37.180
which application that your
action uses to do its work.

00:34:37.240 --> 00:34:40.790
And you can use that to
search to find actions.

00:34:41.810 --> 00:34:46.680
PL category is again a string and you
can use one of ours that are shown in

00:34:46.680 --> 00:34:50.200
the user interface or you can create
your own which can be used by users

00:34:50.200 --> 00:34:53.090
to do searches for your actions.

00:34:55.260 --> 00:34:59.450
PLIcon is used for the icon that
appears next to the action's name

00:34:59.470 --> 00:35:01.430
in the filtered actions list.

00:35:01.960 --> 00:35:05.370
NPL name is used for both searches
as well as for displaying the

00:35:05.370 --> 00:35:09.250
action in the filtered action
list as you see on the screenshot.

00:35:10.880 --> 00:35:12.950
So let's get into one of
the keys that's a little bit

00:35:12.950 --> 00:35:14.740
more complex and interesting.

00:35:14.800 --> 00:35:18.800
The accepts and provides dictionaries
are the actions way of telling Automator

00:35:18.900 --> 00:35:22.750
what kinds of valid input it can handle,
as well as what kind

00:35:22.750 --> 00:35:25.070
of output it provides.

00:35:25.280 --> 00:35:29.550
So both of these dictionaries contain a
types array which allows you to specify

00:35:29.770 --> 00:35:34.400
one or more type identifier strings,
which I'll get to in a moment,

00:35:34.400 --> 00:35:39.060
again to tell Automator what
kinds of data it handles.

00:35:39.150 --> 00:35:41.370
The accepts dictionary
includes an additional key,

00:35:41.400 --> 00:35:44.790
an optional boolean,
which tells Automator whether or not your

00:35:44.790 --> 00:35:47.650
action requires input to do its work.

00:35:47.710 --> 00:35:51.160
Some actions don't need any input
to do what they're going to do,

00:35:51.160 --> 00:35:54.680
and you can tell Automator that
in the accepts optional boolean.

00:35:54.850 --> 00:35:58.460
That will allow Automator to tell
users whether or not a particular

00:35:58.460 --> 00:36:01.670
action can be used to start a workflow,
for example.

00:36:03.320 --> 00:36:04.830
So type identifiers.

00:36:04.870 --> 00:36:08.530
They're loosely based on Apple's
uniform type identifiers.

00:36:08.590 --> 00:36:12.460
These are just a few examples,
the first being the most general type

00:36:12.620 --> 00:36:15.960
that is the default that you will get
when you create a new action project.

00:36:16.010 --> 00:36:19.300
And the, I guess we don't actually
have it up there,

00:36:19.300 --> 00:36:22.660
but public.data is the type
that is returned by the

00:36:22.660 --> 00:36:26.040
Create Build Report action
that Eric just built.

00:36:26.130 --> 00:36:28.590
But this just gives you kind of a flavor.

00:36:28.590 --> 00:36:31.950
The complete list of current
type identifiers is in the

00:36:31.950 --> 00:36:33.850
release notes on the seed DVD.

00:36:34.650 --> 00:36:38.440
So a few more guidelines on
accepts and provides dictionaries.

00:36:38.470 --> 00:36:40.930
You really want to keep in mind
that the more other actions

00:36:40.930 --> 00:36:43.020
that your action works with,
the more useful it's

00:36:43.070 --> 00:36:44.040
going to be to users.

00:36:44.040 --> 00:36:46.910
So you should really think about
how interoperable it will be based

00:36:46.910 --> 00:36:48.680
on the types that you support.

00:36:48.730 --> 00:36:51.470
You should make the accepts and
provides types as specific as you can.

00:36:51.480 --> 00:36:55.510
That gives Automator the maximum guidance
so that it can provide guidance to users

00:36:55.730 --> 00:37:00.320
on which actions are appropriate to go
next in the workflow they're building.

00:37:01.370 --> 00:37:04.310
I've alluded to this,
that the types is an array that

00:37:04.310 --> 00:37:06.590
you can specify multiple types,
and you should definitely do that

00:37:06.600 --> 00:37:08.230
if your action can handle them.

00:37:08.330 --> 00:37:11.920
We have several actions in the
seed that can handle multiple types

00:37:11.920 --> 00:37:13.740
such as iPhoto photos and albums.

00:37:13.740 --> 00:37:18.320
It can by itself extract the photos
from an album that's passed in.

00:37:18.750 --> 00:37:21.270
If your action doesn't need any
input to do what it's going to do,

00:37:21.270 --> 00:37:24.340
for example, our log output action,
which just allows you to see

00:37:24.340 --> 00:37:28.840
what the input from the previous
action is in the workflow,

00:37:28.880 --> 00:37:32.220
you should just return the
input you're given as the output

00:37:32.300 --> 00:37:35.530
and leave the types general,
which is the default.

00:37:36.230 --> 00:37:40.760
So, yet another kind of side issue
here is that when you create

00:37:40.780 --> 00:37:43.590
actions for your own applications,
your applications have different

00:37:43.630 --> 00:37:46.500
types than say iPhoto does,
so you may want to create your

00:37:46.500 --> 00:37:48.620
own type identifier strings.

00:37:48.710 --> 00:37:50.880
And you can definitely do that.

00:37:51.120 --> 00:37:53.500
What you might want to do in addition,
if you do that,

00:37:53.500 --> 00:37:55.080
is to create conversion actions.

00:37:55.260 --> 00:37:58.710
And what conversion actions are,
are to link actions whose

00:37:58.730 --> 00:38:00.310
types don't directly match.

00:38:00.450 --> 00:38:04.410
For example, in Sal's demo yesterday,
you saw that he had an import

00:38:04.670 --> 00:38:08.720
images into iPhoto action,
which returns iPhoto photo objects,

00:38:08.720 --> 00:38:12.800
and that as the input for the
create new IVD slideshow action,

00:38:12.800 --> 00:38:14.930
which expects files.

00:38:15.010 --> 00:38:17.240
Now, why did that work?

00:38:17.330 --> 00:38:21.080
Because the IVD action doesn't
know anything about iPhoto photos.

00:38:21.230 --> 00:38:23.800
Well, what happened is that we
have a conversion action

00:38:23.800 --> 00:38:26.540
from iPhoto photos to files.

00:38:26.590 --> 00:38:30.170
And the neat thing here is that,
as you saw,

00:38:30.220 --> 00:38:32.180
there was no extra action inserted there.

00:38:32.180 --> 00:38:34.610
Automator automatically
detected the need for it,

00:38:34.780 --> 00:38:38.910
but it invisibly adds it to the workflow,
so the user needs to know neither that

00:38:38.970 --> 00:38:41.320
it's necessary or that it's there.

00:38:41.360 --> 00:38:44.560
And you can add these for the
new types that you create.

00:38:46.070 --> 00:38:48.300
One last detail there
that's on the slide,

00:38:48.310 --> 00:38:51.560
which you can obviously read,
but these are built exactly

00:38:51.560 --> 00:38:53.600
like any other Automator action.

00:38:53.600 --> 00:38:56.980
The only difference is once you build it,
you need to change the extension of

00:38:56.980 --> 00:39:00.590
the bundle from .stage to .cstage.

00:39:01.990 --> 00:39:04.850
So the next key I'd like to talk about,
and Eric mentioned this already,

00:39:04.980 --> 00:39:06.630
the PL default parameters.

00:39:06.730 --> 00:39:10.790
This key is used to hold default
values for the values that you're

00:39:11.100 --> 00:39:13.060
managing using Cocoa bindings.

00:39:13.140 --> 00:39:16.080
And this is why the checkbox that
Eric added to the user interface

00:39:16.080 --> 00:39:19.100
was checked when we launched the
action because we had a PL default

00:39:19.250 --> 00:39:23.140
parameter in there to set the
value of the checkbox to true.

00:39:23.450 --> 00:39:27.180
and these are just based on the types for
what the user interface element needs.

00:39:27.180 --> 00:39:29.470
These are just a few examples.

00:39:30.400 --> 00:39:33.750
So I showed you the keyword
interface in the first demo.

00:39:33.750 --> 00:39:34.800
This is an array of keywords.

00:39:34.800 --> 00:39:36.640
You can specify as many
keywords as you like,

00:39:36.640 --> 00:39:38.630
and you can use the
ones that we've created,

00:39:38.630 --> 00:39:41.170
which you can see in the interface,
as well as create your own.

00:39:41.370 --> 00:39:43.920
Again,
users can still search for keywords that

00:39:43.920 --> 00:39:46.230
don't appear in the keyword interface.

00:39:48.720 --> 00:39:51.600
PL Required Resources is
a little more complicated,

00:39:51.600 --> 00:39:52.840
but it's very useful.

00:39:52.840 --> 00:39:56.360
If your action needs some resource
to be installed on the user's

00:39:56.360 --> 00:40:01.030
system for it to work properly,
this allows you to tell Automator, "Hey,

00:40:01.030 --> 00:40:03.670
I need this thing or I can't work,
so let the user know that I'm

00:40:03.670 --> 00:40:06.590
not going to work." There are
three ways to do this.

00:40:06.590 --> 00:40:08.600
The first is shown here on the screen.

00:40:08.600 --> 00:40:12.750
You specify the type "application,"
and then you can specify the

00:40:12.750 --> 00:40:17.600
application's resource by its bundle ID,
its display name,

00:40:17.600 --> 00:40:19.890
which is what's shown in Finder,
and its version.

00:40:20.420 --> 00:40:23.330
The warning screen shot shows what
the user will see if they try to

00:40:23.370 --> 00:40:26.800
add such an action without that
resource being present on the system.

00:40:27.060 --> 00:40:29.300
There are two additional
ways to specify this.

00:40:29.320 --> 00:40:32.770
You can also specify it by creator code,
and you just change the type

00:40:32.920 --> 00:40:35.630
from application to creator code,
and then specify the creator

00:40:35.630 --> 00:40:37.800
code as the resource string.

00:40:37.990 --> 00:40:40.350
And finally,
if it's not an application that you

00:40:40.350 --> 00:40:43.480
need on the system for this to work,
it's some other file

00:40:43.480 --> 00:40:46.670
or folder of some sort,
you can do that as well by specifying

00:40:46.790 --> 00:40:52.100
a required resource of type file and
specifying the full path as the resource.

00:40:53.940 --> 00:40:58.080
Now this I also showed
in my first demo today.

00:40:58.080 --> 00:41:03.600
If you add an action that can lose
data from what's passed into it,

00:41:03.710 --> 00:41:07.020
you need to tell Automator that
with this PL warning key and the

00:41:07.020 --> 00:41:10.800
user will see a warning as shown
here and as you saw earlier.

00:41:10.930 --> 00:41:14.570
What you can do is propose a new
action to be added before your action

00:41:14.580 --> 00:41:16.800
that will make the workflow safe.

00:41:16.800 --> 00:41:20.800
And that's what I did in my demo
when I was going to scale images.

00:41:20.820 --> 00:41:23.510
Another example of crop images,
you obviously could lose

00:41:23.510 --> 00:41:24.700
data from what's input.

00:41:24.790 --> 00:41:26.800
That would be a level 2.

00:41:26.800 --> 00:41:30.800
Level 1,
we're using for reversible changes.

00:41:30.800 --> 00:41:31.800
For example, flipping an image.

00:41:31.800 --> 00:41:35.710
You can always flip it again
to get back the original.

00:41:37.610 --> 00:41:40.640
And you can also specify exactly
the way that warning will look,

00:41:40.740 --> 00:41:44.030
the message,
the action that's proposed if necessary,

00:41:44.030 --> 00:41:46.900
and the button labels as well.

00:41:49.200 --> 00:41:52.630
So those are the major steps in
creating an Automator action.

00:41:52.630 --> 00:41:54.920
Now I'd like to just talk briefly about,
well, OK,

00:41:54.920 --> 00:41:56.630
I've created this thing in Xcode.

00:41:56.660 --> 00:41:59.720
Now how do I make sure it works properly?

00:42:00.210 --> 00:42:01.600
Well, we've shown you this already.

00:42:01.680 --> 00:42:04.950
What you can do is add a custom
executable to your action project,

00:42:04.950 --> 00:42:09.500
and with the seed, it will need to be a
pipeline custom executable.

00:42:10.020 --> 00:42:14.490
Add a launch argument,
"dash stage" and then pass the project

00:42:14.720 --> 00:42:19.880
name "dot stage". And what this does is
it passes that argument to pipeline when

00:42:20.220 --> 00:42:25.240
it runs and it will appear as if your
action is already loaded in pipeline.

00:42:25.240 --> 00:42:28.030
This makes the development cycle
much more efficient and very much

00:42:28.210 --> 00:42:32.390
like what you would be used to
from building a normal application.

00:42:33.580 --> 00:42:37.560
So once you've got Automator running
and your new action is there,

00:42:37.560 --> 00:42:40.420
you need to test it in
the context of a workflow.

00:42:40.460 --> 00:42:42.960
And when testing workflows,
what you can do is use

00:42:42.960 --> 00:42:45.860
the log output action,
which I've already mentioned,

00:42:45.890 --> 00:42:51.010
and you can add that in between each
action that you want to see the input

00:42:51.020 --> 00:42:55.080
going into the next one to verify
that your action is working properly.

00:42:55.100 --> 00:42:58.600
If you also want to be able to pause or
cancel the workflow at any step in there,

00:42:58.600 --> 00:43:01.820
you can add another action
which is on your seed,

00:43:01.820 --> 00:43:02.980
confirmation dialog.

00:43:02.980 --> 00:43:06.860
And if you add this pair of actions
between every action in your workflow,

00:43:06.880 --> 00:43:09.100
you can actually step
through each step of the way,

00:43:09.100 --> 00:43:12.980
seeing the output as it goes
into the input of the next stage.

00:43:16.130 --> 00:43:18.860
So where do actions live?

00:43:18.910 --> 00:43:23.080
Well, the actions that we provide are in
System Library Pipeline currently,

00:43:23.250 --> 00:43:25.500
and that again will obviously change.

00:43:25.530 --> 00:43:27.980
When you build your own actions,
it depends on whether you want

00:43:27.980 --> 00:43:30.840
them to be available on a per
user or a per machine basis,

00:43:30.840 --> 00:43:34.650
and you can then install them
in the proper library folder.

00:43:38.740 --> 00:43:43.350
So now that we've talked about from the
beginning to end of building your action,

00:43:43.350 --> 00:43:46.540
I'd like to kind of back up and
get you to think about some of

00:43:46.540 --> 00:43:49.320
the guidelines that you should
think about as you're laying out

00:43:49.320 --> 00:43:53.090
your interface and even thinking
about what should your action do.

00:43:54.080 --> 00:43:56.300
So why do we need design guidelines?

00:43:56.490 --> 00:43:59.160
Well, we want to help you to achieve
a consistent look and feel with

00:43:59.270 --> 00:44:01.920
every other action out there,
both that we create and that

00:44:01.920 --> 00:44:03.650
your colleagues will create.

00:44:03.790 --> 00:44:06.300
We encourage you to use
our actions as examples.

00:44:06.300 --> 00:44:08.860
You can see all of their user
interfaces and how they operate,

00:44:08.860 --> 00:44:10.700
obviously, in workflows.

00:44:10.800 --> 00:44:17.220
And we will ship as many examples as
we can with the actual project source.

00:44:17.310 --> 00:44:20.170
The materials that you can download
from connect.apple.com for this

00:44:20.170 --> 00:44:25.900
session include three example projects
of actions that we've created.

00:44:27.080 --> 00:44:29.730
and the draft guidelines which cover
a little bit more than what I'm

00:44:29.730 --> 00:44:34.200
going to talk about today are in
your release notes on the Seed DVD.

00:44:35.590 --> 00:44:37.700
So first,
a little bit of philosophy about

00:44:37.700 --> 00:44:38.880
how we think about actions.

00:44:38.920 --> 00:44:41.140
We think that you really should
try to keep them as small

00:44:41.140 --> 00:44:42.450
and discreet as possible.

00:44:42.690 --> 00:44:45.500
Keep separate actions separate.

00:44:45.680 --> 00:44:49.290
The better way to combine two
different tasks is to combine two

00:44:49.290 --> 00:44:52.920
different actions in a workflow,
not to kind of cram them

00:44:52.930 --> 00:44:56.500
together into one large,
complex, single action.

00:44:56.500 --> 00:44:59.720
That's going to be both harder
for users to understand what

00:44:59.930 --> 00:45:02.490
it does and to configure,
and also it will probably

00:45:02.490 --> 00:45:06.500
make it less likely to be
interoperable with other actions.

00:45:06.500 --> 00:45:10.180
So again, the overriding goal here
is to keep it simple.

00:45:11.780 --> 00:45:14.020
So a little bit about naming actions.

00:45:14.050 --> 00:45:16.220
We encourage you to use longer,
more descriptive names.

00:45:16.230 --> 00:45:18.280
As you've seen in the
filtered action list,

00:45:18.330 --> 00:45:22.180
there's quite a bit of real estate
there for you to use a longer name.

00:45:22.300 --> 00:45:24.700
For example,
"Add attachments to front mail message."

00:45:24.700 --> 00:45:27.500
That gives a very good description
when a user's looking through the list.

00:45:27.510 --> 00:45:30.000
Is this really what I'm looking for?

00:45:30.070 --> 00:45:31.760
Do use plural objects.

00:45:31.820 --> 00:45:34.730
Actions should handle multiple objects.

00:45:34.950 --> 00:45:38.750
It may be that you're only past one,
but you should not have an action

00:45:38.840 --> 00:45:41.000
that only accepts one object.

00:45:41.010 --> 00:45:43.900
In that case, the name should match.

00:45:43.900 --> 00:45:49.090
The only time you should use a singular
object is if the action accepts only a

00:45:49.340 --> 00:45:52.390
single object to multiple other objects.

00:45:52.410 --> 00:45:57.200
An example here is we've got a series
of actions to change file names.

00:45:57.200 --> 00:46:00.800
In the "Add date to file names" action,
there's a single date that

00:46:00.800 --> 00:46:02.100
gets added to each file name.

00:46:02.100 --> 00:46:04.930
In that case, the date would be singular.

00:46:05.250 --> 00:46:09.620
Finally, don't use "s" in parentheses
to indicate that your action

00:46:09.620 --> 00:46:12.700
handles one or more objects.

00:46:12.730 --> 00:46:14.490
Every action should
handle multiple objects,

00:46:14.520 --> 00:46:19.660
so you don't need to let people know
that it handles both one or more.

00:46:20.850 --> 00:46:23.700
Again,
in the interest of keeping it simple,

00:46:23.710 --> 00:46:25.940
you should minimize the use of boxes.

00:46:25.940 --> 00:46:28.700
There's one specific example
I'll come onto in a moment

00:46:28.700 --> 00:46:30.790
where a box is a good idea,
but you should try to

00:46:30.890 --> 00:46:31.900
keep it to a minimum.

00:46:32.010 --> 00:46:35.100
Your user interface should be
as small and clean as possible.

00:46:35.100 --> 00:46:37.660
If you've got too many things
that need separate boxes,

00:46:37.740 --> 00:46:41.540
you may want to think about splitting
it up into multiple actions.

00:46:41.670 --> 00:46:44.040
And as you've seen,
we've got kind of more width

00:46:44.040 --> 00:46:46.930
and depth in the workflow area,
so you want to minimize

00:46:46.930 --> 00:46:48.600
the use of vertical space.

00:46:48.730 --> 00:46:52.900
One good way to do that is avoid radio
buttons and use pop-up menus instead,

00:46:52.900 --> 00:46:57.460
even for as little as two choices,
because the pop-up menu is going

00:46:57.460 --> 00:46:59.480
to use less vertical space.

00:47:01.190 --> 00:47:03.660
More on keeping it simple,
you should avoid tab views.

00:47:03.660 --> 00:47:06.100
Again, this is a pretty good sign
that your action is getting too

00:47:06.100 --> 00:47:08.190
complicated if you need a tab view.

00:47:08.340 --> 00:47:10.770
Again,
there's an exception that we will have

00:47:10.800 --> 00:47:14.360
in one of the actions that we've created,
crop images.

00:47:14.440 --> 00:47:16.450
When cropping images,
you might want to crop by

00:47:16.450 --> 00:47:19.680
dimensions or by percentages,
and as you can see in the screenshots,

00:47:19.680 --> 00:47:24.060
those two different types of cropping
require very different user interfaces.

00:47:24.150 --> 00:47:26.700
And instead of having them
both there in the action,

00:47:26.700 --> 00:47:29.530
one way to avoid that problem
is to use a hidden tab view,

00:47:29.530 --> 00:47:32.420
and then when the user
makes the top level choice,

00:47:32.420 --> 00:47:36.230
you can swap to the proper
interface and keep things simple.

00:47:37.980 --> 00:47:42.320
Another thing that will give users a
lot of guidance is to provide feedback.

00:47:42.320 --> 00:47:45.300
And again, one example of that are
progress indicators.

00:47:45.300 --> 00:47:48.570
We've got an action called "Create
Events for People" that needs

00:47:48.570 --> 00:47:52.180
to populate a pop-up menu with
the iCal calendars that the user

00:47:52.180 --> 00:47:54.010
already has on their system.

00:47:54.110 --> 00:47:56.590
So when the user adds the
action to the workflow,

00:47:56.590 --> 00:48:00.230
we need to ask iCal for those
calendars to populate the pop-up menu.

00:48:00.490 --> 00:48:02.540
So there's a little progress
indicator that lets the user know,

00:48:02.540 --> 00:48:03.560
"Hey, wait a second.

00:48:03.560 --> 00:48:06.140
Before you start trying
to configure this action,

00:48:06.190 --> 00:48:07.890
I need to do something."

00:48:10.770 --> 00:48:14.440
Another way to provide feedback is to
give the user an example of what actually

00:48:14.440 --> 00:48:16.400
the action is going to do to their data.

00:48:16.530 --> 00:48:18.000
And there are two good examples here.

00:48:18.000 --> 00:48:20.280
This could be textually or graphically.

00:48:20.550 --> 00:48:24.960
The "Flip Images" action does it very
well graphically by giving you an

00:48:24.960 --> 00:48:28.700
example image and then what it will
look like after the action is through.

00:48:28.850 --> 00:48:32.100
And for the "Make Sequential
File Names" action,

00:48:32.170 --> 00:48:38.140
down in the lower left hand corner,
it gives you exactly what the resulting

00:48:38.140 --> 00:48:42.200
file names will look like based on the
configuration that the user has chosen.

00:48:42.200 --> 00:48:46.850
In that case, you should put these
examples inside a box,

00:48:46.920 --> 00:48:48.750
this is the one exception,
labeled "Example" and use the same

00:48:48.870 --> 00:48:52.240
font size and color that you've
used in the rest of your user

00:48:52.240 --> 00:48:53.700
interface so it's not glaring.

00:48:53.700 --> 00:48:58.270
It's there for the user to find
but not necessarily in their face.

00:49:00.350 --> 00:49:03.060
So a little more guidelines
about the guidance on the

00:49:03.060 --> 00:49:05.100
layout of your user interface.

00:49:05.120 --> 00:49:09.360
We do use 10 pixel margins around the
outside of your Actions user interface.

00:49:09.420 --> 00:49:12.730
As Tim mentioned during his demo,
you only have control over that

00:49:12.730 --> 00:49:14.390
piece of the user interface.

00:49:14.400 --> 00:49:17.740
Automator itself then needs to add around
it the title bar and the other pieces

00:49:17.760 --> 00:49:19.960
that you've seen in the workflow area.

00:49:20.050 --> 00:49:23.160
And by using a consistent margin
around the interface you control,

00:49:23.180 --> 00:49:26.010
that allows us to do a better job
of making your Action look good

00:49:26.080 --> 00:49:27.880
when a user adds it to a workflow.

00:49:28.180 --> 00:49:30.600
Use small controls and small
text within the interface.

00:49:30.600 --> 00:49:34.590
Again, this helps to keep things,
use little space so that users

00:49:34.790 --> 00:49:37.670
can fit more actions in the
visible area in their workflow.

00:49:37.980 --> 00:49:40.300
Unless, of course, you've got one of our
great new 30-inch displays,

00:49:40.300 --> 00:49:43.770
in which case that's really
not relevant anymore.

00:49:45.580 --> 00:49:48.200
And we encourage you again to
follow the Apple Human Interface

00:49:48.270 --> 00:49:50.790
Guidelines wherever possible.

00:49:51.820 --> 00:49:53.820
One thing to avoid,
and we've confessed here,

00:49:53.820 --> 00:49:56.430
this one is still in your seat
and hasn't been cleaned up yet,

00:49:56.560 --> 00:50:00.670
but don't repeat what's in the title
in the user interface that you create.

00:50:00.730 --> 00:50:03.080
That just, again, wastes space.

00:50:03.110 --> 00:50:06.350
The user can read the title and
understand that this is about

00:50:06.400 --> 00:50:08.400
changing the case of file names.

00:50:10.300 --> 00:50:12.910
Finally,
one thing that many actions need to do

00:50:12.910 --> 00:50:18.300
is ask the user for a location to either
save a file or find a file or folder.

00:50:18.300 --> 00:50:22.200
And we'd like to standardize this across
actions so users know what to expect.

00:50:22.350 --> 00:50:24.210
This gives you an idea of
what that should look like.

00:50:24.300 --> 00:50:29.300
A pop-up menu with standard locations
as well as three additional options.

00:50:29.300 --> 00:50:33.000
A "Choose" option,
which allows a user to choose another

00:50:33.000 --> 00:50:35.300
arbitrary folder on their system.

00:50:35.370 --> 00:50:39.300
A "Prompt User" which,
as Sal showed in his demo yesterday,

00:50:39.300 --> 00:50:41.420
will allow the,
when the workflow is executed,

00:50:41.420 --> 00:50:46.300
will then prompt the user that's running
it to enter the selection at that time.

00:50:46.390 --> 00:50:50.060
And finally, a "Temporary Items" option,
which means that this is for files

00:50:50.210 --> 00:50:53.820
that are only needed during the
context of the workflow and then

00:50:53.900 --> 00:50:58.230
will be removed by Automator at
the end of the workflow execution.

00:50:58.820 --> 00:51:03.380
And what we will do to help you
standardize this is we will provide

00:51:03.470 --> 00:51:07.720
a widget in a pipeline IB palette,
well it will be called an Automator

00:51:07.720 --> 00:51:10.460
IB palette when you see it,
that you can just drag out into your

00:51:10.460 --> 00:51:14.240
user interface and it will be configured
properly to meet the guidelines.

00:51:14.410 --> 00:51:18.150
This is not in the seed yet,
but we will give this to you.

00:51:20.060 --> 00:51:24.020
So to sum up,
I hope that you've learned and

00:51:24.020 --> 00:51:28.710
understand much better what Automator is,
why it's important to you,

00:51:28.710 --> 00:51:32.870
and how you can develop for Automator
using your application's technology.

00:51:33.170 --> 00:51:36.490
We really want users to be able to
use Automator to automate all sorts

00:51:36.490 --> 00:51:39.600
of interesting tasks on Mac OS X,
and the more applications

00:51:39.600 --> 00:51:42.180
that have actions,
the easier it will be

00:51:42.180 --> 00:51:43.740
for them to do that.

00:51:46.490 --> 00:51:49.740
So you have a few actions items,
as it were.

00:51:49.740 --> 00:51:52.320
Make your application
scriptable if it is not,

00:51:52.320 --> 00:51:56.360
so that you and your customers can
create actions using AppleScript.

00:51:56.380 --> 00:51:59.480
To create a set of APIs that you
can use or your customers can use

00:51:59.480 --> 00:52:02.300
to create actions using Cocoa.

00:52:02.300 --> 00:52:05.830
And to create a great set of actions
that make your application look good

00:52:05.830 --> 00:52:09.790
and allow customers to incorporate
it into their automated workflows,

00:52:09.790 --> 00:52:13.910
and therefore you've
got a customer for life.

00:52:17.780 --> 00:52:20.040
So we have some hours when the
Automator team will be available to

00:52:20.040 --> 00:52:24.710
speak with you to answer any questions
you may have this afternoon in the

00:52:24.930 --> 00:52:27.610
Mac OS X labs and tomorrow morning.

00:52:28.430 --> 00:52:31.460
There's not a lot of
documentation yet available.

00:52:31.460 --> 00:52:36.410
There are release notes on your
C:/DVD and updated release notes

00:52:36.470 --> 00:52:40.230
in the materials for this session,
as well as a tutorial and the

00:52:40.270 --> 00:52:42.500
sample code I mentioned earlier.

00:52:42.600 --> 00:52:51.500
[Transcript missing]

00:52:52.530 --> 00:52:56.840
Here's some contact information in
DTS and the technology management.