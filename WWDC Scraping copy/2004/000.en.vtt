WEBVTT

00:00:15.500 --> 00:00:17.000
Good afternoon.

00:00:17.000 --> 00:00:18.510
It's a pleasure to be here again.

00:00:18.510 --> 00:00:22.640
My agenda today is very, very simple.

00:00:22.640 --> 00:00:26.680
I'm going to start with the past,
move into the present, and then,

00:00:26.680 --> 00:00:28.240
of course, talk about the future.

00:00:28.460 --> 00:00:32.210
So let's start with the past,
the history, and, of course,

00:00:32.210 --> 00:00:35.460
I'm going to talk about the
history of the Macintosh,

00:00:35.460 --> 00:00:39.540
and the history started in
1984 with the ad campaign,

00:00:39.540 --> 00:00:43.430
and that's the software
that went along with it,

00:00:43.500 --> 00:00:47.530
the Macintosh OS,
the first version of that OS.

00:00:47.540 --> 00:00:51.940
Now, I'm not really here to
talk about this time,

00:00:51.970 --> 00:00:53.540
1984.

00:00:53.670 --> 00:00:57.520
What I really want to talk to
you about is the transitions.

00:00:58.180 --> 00:01:06.150
So, the first major transition took place
in 1994 when we switched from the

00:01:06.150 --> 00:01:12.010
original processor of the Macintosh,
the 68000 series, to the PowerPC.

00:01:12.070 --> 00:01:17.000
And that was a hardware transition,
of course, but the software was heavily

00:01:17.000 --> 00:01:21.350
involved in that transition because
there was the emulator that was

00:01:21.350 --> 00:01:26.260
emulating the 68000 instructions,
and it was doing that job very

00:01:26.350 --> 00:01:27.900
well of interpreting the software.

00:01:27.900 --> 00:01:32.960
celebrating the instruction of the
68,000 that in fact most of the Macintosh

00:01:33.080 --> 00:01:39.390
OS still in 96 was still running emulated
Which is kind of amazing and it took

00:01:39.390 --> 00:01:46.180
like two more years to convert most
of the u.s To be finally native power PC.

00:01:46.180 --> 00:01:49.700
So what's the morale of
this kind of transition?

00:01:49.700 --> 00:01:54.170
That was a successful transition
But it was very hard the

00:01:54.170 --> 00:01:55.560
transitions are very hard.

00:01:55.600 --> 00:01:59.860
They take a lot of time You know
number of years even for a transition

00:01:59.860 --> 00:02:04.670
with a perfect emulator and you really
need to have very strong goals to

00:02:04.720 --> 00:02:09.860
succeed for your transitions So there's
been another transition Of course,

00:02:10.010 --> 00:02:15.500
I've been heavily involved with and
that's the transition from Mac OS 9 and

00:02:15.500 --> 00:02:22.160
its predecessors to Mac OS X and We had
an overriding goal for that transition

00:02:22.160 --> 00:02:26.990
which was to ally the simplicity of
the Macintosh The ease of use the

00:02:27.160 --> 00:02:31.840
elegance of the Macintosh retain all
those great characters that we have

00:02:31.840 --> 00:02:36.740
But allies that with the power of
unix and I don't know if you remember

00:02:36.740 --> 00:02:42.730
Unix was kind of a bet in those years
when we did that Of course unix runs,

00:02:42.820 --> 00:02:46.270
you know the internet and
nowadays it's maybe less of a

00:02:46.270 --> 00:02:47.890
bet It's more an obvious things.

00:02:47.990 --> 00:02:51.810
But back then that was quite a
significant bet that we did We had

00:02:52.120 --> 00:02:57.160
some sub goals if you want to double
click to use The kind of Macintosh

00:02:57.350 --> 00:03:01.710
parlance we had a number of sub
goals We wanted to base our stack on

00:03:02.060 --> 00:03:05.980
open standards open standards means
that we didn't want to reinvent the

00:03:06.040 --> 00:03:10.480
wheel We wanted to add value where we
are strong where we have some strong

00:03:10.480 --> 00:03:15.190
technologies to contribute not reinvent
You know some of the basics are likely,

00:03:15.190 --> 00:03:17.600
you know,
the POSIX layer kind of thing We wanted

00:03:17.680 --> 00:03:19.980
to have a really strong design.

00:03:20.010 --> 00:03:24.860
We wanted to have you know layered
system with all those layers having a

00:03:24.860 --> 00:03:30.260
really strong Api's and this is really
important because it means that we are

00:03:30.400 --> 00:03:36.140
bound that our liability is the API It's
not the implementation and that means

00:03:36.140 --> 00:03:40.820
that over the years we can substitute
a better implementation to the previous

00:03:40.820 --> 00:03:46.330
implementation So by us having the strong
API's you have a guarantee to always

00:03:46.330 --> 00:03:48.820
get the best technology over the years

00:03:50.360 --> 00:03:52.780
We also, of course,
had a goal to have the

00:03:52.800 --> 00:03:54.360
highest performance.

00:03:54.390 --> 00:03:58.920
And that, again,
was based on having the right structure,

00:03:58.920 --> 00:04:02.620
having a modern OS,
as we used to say many years ago,

00:04:02.620 --> 00:04:06.180
and having just something
that's designed for performance,

00:04:06.210 --> 00:04:11.660
designed for low latency,
things like Core Audio nowadays exploits.

00:04:11.720 --> 00:04:15.580
We wanted to have great tools,
because we believe that in order to

00:04:15.590 --> 00:04:20.020
really leverage all your frameworks,
you need to have great tools and

00:04:20.130 --> 00:04:22.160
great runtime that goes along.

00:04:22.180 --> 00:04:25.100
And overall,
our maybe overriding goal there was

00:04:25.100 --> 00:04:28.180
to have a platform for innovation.

00:04:28.970 --> 00:04:34.060
So looking at the timeline,
I started the timeline in 1998.

00:04:34.060 --> 00:04:38.610
I could have started it a
few decades before with Pink,

00:04:38.750 --> 00:04:40.780
Taligent, Maxwell, Copeland.

00:04:40.780 --> 00:04:42.970
There's been a number of names like that.

00:04:43.050 --> 00:04:49.810
But 1998 was when we had all
the elements of Mac OS X,

00:04:49.810 --> 00:04:50.900
including Carbon.

00:04:50.960 --> 00:04:53.980
And I know a lot of your
applications are Carbon applications.

00:04:53.980 --> 00:04:59.120
That was a key central element,
a part of the Mac OS X concept.

00:04:59.170 --> 00:05:03.850
And we were very much at work to make
sure that this was actually going

00:05:03.960 --> 00:05:05.930
to work and to prototype things.

00:05:05.940 --> 00:05:11.740
And in fact, at WWDC in May of that year,
we were able to demo Photoshop with

00:05:11.740 --> 00:05:13.250
our friends at Adobe.

00:05:13.300 --> 00:05:15.700
We put together a proof of concept.

00:05:15.740 --> 00:05:17.260
Then we were back to work.

00:05:17.260 --> 00:05:20.910
And finally, we shipped 10.2 in 2001.

00:05:21.140 --> 00:05:23.070
It wasn't a perfect release,
and we knew that.

00:05:23.210 --> 00:05:23.940
We positioned it.

00:05:24.020 --> 00:05:25.950
We did it very carefully
for early adopters.

00:05:26.010 --> 00:05:29.610
But it was a necessary release
to start the pump of application,

00:05:29.660 --> 00:05:32.900
to start your applications,
because we knew that you couldn't

00:05:32.900 --> 00:05:36.680
ship until we had this 1.0 label.

00:05:36.720 --> 00:05:38.490
And quickly, we followed with 10.1.

00:05:38.500 --> 00:05:42.630
That was filling all the
gaps that were in need.

00:05:42.690 --> 00:05:44.050
And then we had Jaguars.

00:05:44.120 --> 00:05:46.140
That was a great success.

00:05:46.140 --> 00:05:48.720
I'm sure everyone is familiar
with the Jaguar logos.

00:05:48.790 --> 00:05:50.700
That, I think, is in everyone's mind.

00:05:50.700 --> 00:05:53.880
And we had, beyond the logo, 150 figures.

00:05:53.950 --> 00:05:58.100
And we had a lot of
features in that release.

00:05:58.180 --> 00:06:01.170
Now, we followed last year, last fall,
with Panther.

00:06:01.180 --> 00:06:05.140
Again, we added a lot and a lot of
features in that release.

00:06:05.280 --> 00:06:07.790
This has been, as Steve said,
the most successful

00:06:07.790 --> 00:06:09.940
OS release in Apple's history.

00:06:09.940 --> 00:06:14.180
And a milestone was reached at
the beginning of this year when

00:06:14.180 --> 00:06:15.940
we had over 10 million users.

00:06:15.940 --> 00:06:19.660
And of course,
now we have like 12 million users

00:06:19.660 --> 00:06:21.410
and 10,000 of your applications.

00:06:21.920 --> 00:06:24.420
So the transition is complete.

00:06:24.430 --> 00:06:27.960
We've transitioned the
US over the last few years,

00:06:28.030 --> 00:06:28.840
thanks to you.

00:06:29.060 --> 00:06:33.160
That's been quite a transition,
quite a lot of hard work.

00:06:33.160 --> 00:06:34.640
It was a little frightening.

00:06:34.700 --> 00:06:37.040
I mean,
it felt like several years ago that there

00:06:37.200 --> 00:06:39.980
was this big chasm that we had to cross.

00:06:40.010 --> 00:06:44.650
And with Jaguar and then PanFar,
we crossed it.

00:06:44.730 --> 00:06:49.040
We went on the side
where the sky is bluer.

00:06:49.170 --> 00:06:50.250
So thank you.

00:06:51.910 --> 00:06:53.790
Thank you a lot.

00:06:58.260 --> 00:07:03.440
We could not have made this transition
without the whole ecology moving along.

00:07:03.540 --> 00:07:06.480
Now, of course, moving along,
there's this tiger coming up.

00:07:06.540 --> 00:07:11.510
And I'd like to do a promise to you,
which is we are not going to disrupt

00:07:11.630 --> 00:07:14.480
the API set for the foreseeable future.

00:07:14.540 --> 00:07:19.700
That means that we are going
to add to the existing APIs.

00:07:21.340 --> 00:07:26.630
Now, in contrast,
I know there's this other

00:07:26.630 --> 00:07:29.690
animal that's thinking,
"Should I jump maybe

00:07:29.690 --> 00:07:32.200
halfway across the chasm?"

00:07:34.780 --> 00:07:38.600
So this was talking about the past.

00:07:38.600 --> 00:07:41.480
Now let's move on to the present.

00:07:41.480 --> 00:07:45.130
And as I said,
one of our goals is to have a

00:07:45.130 --> 00:07:48.320
great platform for innovation.

00:07:48.320 --> 00:07:52.440
Now, platform is really our mission.

00:07:52.440 --> 00:07:56.020
All the team at Apple,
all the software team,

00:07:56.060 --> 00:07:58.460
wants to provide you
with the best platform.

00:07:58.460 --> 00:08:00.960
That's what we have in our guts here.

00:08:00.960 --> 00:08:03.520
Now,
innovation is a joint responsibility.

00:08:03.520 --> 00:08:07.310
It's a responsibility for us
to provide great technologies

00:08:07.520 --> 00:08:11.350
as part of that platform,
and a responsibility for you to

00:08:11.350 --> 00:08:13.800
innovate on top of the platform.

00:08:13.870 --> 00:08:16.860
And you have been doing
that with Panther.

00:08:16.870 --> 00:08:21.510
And there's a lot of very innovative
apps that have come out of Panther,

00:08:21.640 --> 00:08:22.840
on top of Panther.

00:08:22.890 --> 00:08:27.020
And what I'd like to do now is
to invite Christine O'Sullivan,

00:08:27.070 --> 00:08:29.590
who is the senior
director for integration,

00:08:29.690 --> 00:08:32.830
who's going to show some of the most
innovative apps you've come up with.

00:08:33.530 --> 00:08:34.360
Thanks, Bertrand.

00:08:42.360 --> 00:08:47.020
Panther shipped 150 breakthrough
new features last fall.

00:08:47.030 --> 00:08:50.690
It has been absolutely fantastic
to see the innovation that you,

00:08:50.690 --> 00:08:53.020
the developers,
have built into your application

00:08:53.680 --> 00:08:56.430
leveraging core Panther technologies.

00:08:56.610 --> 00:09:00.380
So today I'd like to show you three
applications that I think truly

00:09:00.380 --> 00:09:02.650
shows this type of innovation.

00:09:02.890 --> 00:09:05.200
So let's get going.

00:09:09.630 --> 00:09:11.740
This is an application called NeuroLens.

00:09:12.000 --> 00:09:13.770
It was developed by Dr.

00:09:14.060 --> 00:09:18.920
Rick Hoag from Harvard Medical School and
Massachusetts General Hospital.

00:09:18.940 --> 00:09:22.040
This is a brain mapping application.

00:09:22.060 --> 00:09:26.080
What we have here is a set of MRI scans.

00:09:26.080 --> 00:09:31.100
And as you can see,
as I move the cursor slowly,

00:09:31.370 --> 00:09:36.110
I can go through slices of the
brain and this is very very exciting

00:09:36.110 --> 00:09:41.870
for researchers as in a single
application researchers can display

00:09:42.090 --> 00:09:48.150
both functional and structural MRI data
in a very fast and interactive way.

00:09:50.860 --> 00:09:56.560
If I close this window,
what you have here is a beautiful 3D

00:09:56.700 --> 00:09:58.800
view of the structure of the brain.

00:09:58.990 --> 00:10:02.800
And this really truly shows
the power of quartz and OpenGL.

00:10:02.800 --> 00:10:08.800
What you can see here is a different
coloring on the structure of the brain.

00:10:08.800 --> 00:10:12.080
And actually the author who
developed this application,

00:10:12.190 --> 00:10:16.800
his colleague,
participated in taking an MRI scan.

00:10:16.900 --> 00:10:19.800
And when she was in the MRI machine,
she moved her fingers.

00:10:19.800 --> 00:10:23.440
And what you're seeing here are
the parts of the brain that were

00:10:23.440 --> 00:10:25.350
activated when she did that.

00:10:27.800 --> 00:10:29.670
So let me rotate the brain.

00:10:29.740 --> 00:10:37.930
Again, using the power of quartz,
I can decrease the opacity.

00:10:39.300 --> 00:10:41.520
Isn't that gorgeous?

00:10:41.520 --> 00:10:45.030
And what you can see here are
the brain fibers mapped into the

00:10:45.150 --> 00:10:49.260
parts of the brain that is really,
really important for neurosurgeons

00:10:49.260 --> 00:10:51.660
as they prepare for brain surgery.

00:10:51.660 --> 00:10:55.940
So this is a very simple
Cocoa application building on a key

00:10:55.990 --> 00:10:59.980
core technology shipped with Panther.

00:10:59.980 --> 00:11:01.260
It's a great app, of course.

00:11:01.400 --> 00:11:05.050
For those of you that want to try it out,
I think you should.

00:11:05.060 --> 00:11:08.390
And for those of you who are not
neuroscientists neurosurgeons,

00:11:08.470 --> 00:11:11.680
I recommend you don't try this at home.

00:11:13.530 --> 00:11:18.520
Let's get going to the next application.

00:11:18.600 --> 00:11:22.280
Panther shipped professional
audio technologies.

00:11:22.340 --> 00:11:25.810
This is a great application by
a developer called Celimony.

00:11:26.120 --> 00:11:28.840
It's an application called Melodyne.

00:11:28.890 --> 00:11:35.780
This is a multi-track recording and
editing application for music and vocals.

00:11:35.830 --> 00:11:38.290
What's really,
really fantastic about this

00:11:38.290 --> 00:11:45.240
application is that it enables
you to very easily edit pitch,

00:11:45.280 --> 00:11:49.760
format, and timing information,
and edit audio as easy

00:11:49.760 --> 00:11:52.100
as if it was MIDI data.

00:11:52.240 --> 00:11:54.620
So let me show you.

00:11:54.680 --> 00:11:58.710
I have a reggae track
here that we prepared.

00:12:05.850 --> 00:12:09.310
Now I think even for those
of you that do like reggae,

00:12:09.510 --> 00:12:11.500
that did sound a little off.

00:12:11.500 --> 00:12:14.910
And as I said,
the power of Melodyne enables

00:12:14.920 --> 00:12:17.510
you to very easily edit audio.

00:12:17.530 --> 00:12:20.020
So let's go ahead and
show you how simple it is.

00:12:20.020 --> 00:12:22.380
Bring up a new window.

00:12:22.490 --> 00:12:24.290
Let's resize that.

00:12:25.910 --> 00:12:31.210
I can go to the toolbar and choose a
tool that enables me to edit pitch.

00:12:31.960 --> 00:12:33.660
Scale to Snap.

00:12:33.690 --> 00:12:37.600
And what you're seeing here in the blue
rectangles is actually the target regions

00:12:38.150 --> 00:12:40.360
that the notes should actually be at.

00:12:40.590 --> 00:12:45.290
So the ease of use of this
application simply allows me

00:12:45.290 --> 00:12:50.010
to select all of the notes and
drag them to that target region.

00:12:50.710 --> 00:12:51.900
So let's try that again.

00:12:51.900 --> 00:12:55.780
If what you said is what you want.

00:12:56.500 --> 00:13:03.500
I actually really don't like
reggae music but that's still off.

00:13:03.500 --> 00:13:06.820
And I think I have the pitch right
but I think what's really wrong

00:13:06.820 --> 00:13:10.440
here is there's an offending note
and I think I know which one it is.

00:13:10.440 --> 00:13:16.300
And again it's as simple as grabbing
this note and positioning it,

00:13:16.500 --> 00:13:18.840
let's say somewhere around here.

00:13:18.840 --> 00:13:21.330
So let's see if I got this right.

00:13:22.300 --> 00:13:32.500
[Transcript missing]

00:13:35.260 --> 00:13:36.890
So that's Melodyne.

00:13:37.000 --> 00:13:39.820
It heavily leverages core
audio and audio units,

00:13:39.820 --> 00:13:43.190
and it's a great application
that was just released.

00:13:43.450 --> 00:13:48.600
So let's go to my third
and certainly not last.

00:13:48.600 --> 00:13:54.460
This is an absolutely beautiful
demonstration of integrating many,

00:13:54.460 --> 00:13:58.240
many, many core Panther technologies
into one application.

00:13:58.240 --> 00:14:01.580
This is Big Bang Chess
by Freeverse Software.

00:14:01.580 --> 00:14:08.980
And this is a game that enables
you to either play online opponents

00:14:08.980 --> 00:14:12.200
or in solo state a chess game.

00:14:12.200 --> 00:14:14.040
Now what you have here
is the integration,

00:14:14.040 --> 00:14:15.650
as I said, of many technologies.

00:14:15.830 --> 00:14:23.200
For example,
iChat for online play with my buddy list.

00:14:25.240 --> 00:14:27.340
Let's go into preferences here.

00:14:27.370 --> 00:14:32.940
Address book for recording and
publishing game and contact information.

00:14:33.540 --> 00:14:39.970
email for automatically
relaying play by email moves.

00:14:39.980 --> 00:14:44.530
And of course, iTunes for some nice
background music as you play.

00:14:46.030 --> 00:14:48.040
I happen to be a really
good chess player.

00:14:48.040 --> 00:14:50.660
Well,
now I've lied in front of 5,000 people.

00:14:50.660 --> 00:14:54.880
I'm actually a really bad chess player,
so I chose to play a solo game today so

00:14:54.880 --> 00:14:57.380
that I wouldn't get annihilated on stage.

00:14:57.380 --> 00:15:01.340
So I'm going to bring up a solo game,
and I think I feel like

00:15:01.470 --> 00:15:03.210
being the sun today.

00:15:04.820 --> 00:15:07.930
and as you can see that is just
absolutely beautiful using the

00:15:07.930 --> 00:15:09.800
graphics that shipped in Panther.

00:15:09.800 --> 00:15:12.790
So let's do a few moves here.

00:15:22.100 --> 00:15:24.930
I'm getting bored.

00:15:24.980 --> 00:15:28.900
What you see here is the
sun and the moon rotating.

00:15:28.900 --> 00:15:32.990
What this actually is is a
QuickTime movie that's embedded and

00:15:32.990 --> 00:15:36.040
it's rotating in an OpenGL context.

00:15:36.240 --> 00:15:40.300
So that's just three great applications
that I think definitely showcase

00:15:40.690 --> 00:15:46.320
innovations and leveraging core
technologies that's used with Panther.

00:15:46.320 --> 00:15:51.440
Of course there are other well-known
developers such as Microsoft.

00:15:51.460 --> 00:15:57.440
So Microsoft released Office 2004
a few months ago and as is often

00:15:57.440 --> 00:16:02.370
seen with Office innovation,
things come to the Mac first

00:16:02.370 --> 00:16:04.460
before going to Windows.

00:16:04.460 --> 00:16:07.370
And of course Adobe and Creative Suite.

00:16:07.390 --> 00:16:10.830
Well, I was trying to figure what would
I say about Creative Suite other

00:16:10.830 --> 00:16:14.940
than it's creative and it's
for creative professionals and

00:16:14.980 --> 00:16:18.860
I actually want to thank Adobe for
being very creative using Panther.

00:16:18.900 --> 00:16:18.900
Thank you.

00:16:18.940 --> 00:16:20.480
You getting tired of me talking?

00:16:20.620 --> 00:16:21.480
Okay.

00:16:21.480 --> 00:16:26.140
So I think what we have done and what the
Mac OS X team has been tasked to do has

00:16:26.450 --> 00:16:30.870
been to deliver a platform as Bertrand
said for you the developers to innovate.

00:16:30.970 --> 00:16:35.100
I think you're doing a fantastic
job and keep up the great work.

00:16:35.100 --> 00:16:36.010
Thank you.

00:16:41.370 --> 00:16:42.970
Thank you, Christine.

00:16:42.970 --> 00:16:46.530
So we've moved along
quite fast in the agenda.

00:16:46.530 --> 00:16:50.410
We were talking about the present,
but I know a lot of you are

00:16:50.530 --> 00:16:51.740
here to hear about the future.

00:16:51.750 --> 00:16:55.080
So let's start now into
the future section.

00:16:55.080 --> 00:16:58.140
And the future is, of course, Tiger.

00:16:58.900 --> 00:17:00.610
So there's a lot in Tiger.

00:17:00.610 --> 00:17:03.640
In fact,
I think there's more in Tiger relative

00:17:03.640 --> 00:17:07.320
to Panther than there was in
Panther relative to Jaguar.

00:17:07.320 --> 00:17:10.320
And I think you'll find
that out on your DVD.

00:17:10.400 --> 00:17:16.180
So I couldn't talk about everything,
so I chose six areas to focus on.

00:17:16.190 --> 00:17:21.000
So let's start with the first one,
denoted with this I.

00:17:21.000 --> 00:17:22.190
Okay.

00:17:23.640 --> 00:17:26.900
Now this section is all about data.

00:17:26.910 --> 00:17:30.560
And what do you think
about when you think data?

00:17:30.580 --> 00:17:34.350
Maybe you are thinking about
the character from Star Trek?

00:17:34.780 --> 00:17:35.410
No, of course not.

00:17:35.470 --> 00:17:39.580
You think about computer data, you know,
all the bits generated by your computers.

00:17:39.580 --> 00:17:41.990
But there's something that has
happened over the last few years,

00:17:41.990 --> 00:17:45.310
which is quite interesting,
is that a lot of the bits are

00:17:45.420 --> 00:17:49.980
not just generated by computers,
they're generated by our devices.

00:17:49.980 --> 00:17:54.200
In our digital life, we have, you know,
the digital hub and all those

00:17:54.250 --> 00:17:56.600
things that generate a lot of bits.

00:17:56.690 --> 00:17:59.690
And in our private life,
we use a lot of those bits

00:17:59.720 --> 00:18:03.780
rather than just computer bits,
which is kind of a lot more interesting.

00:18:04.550 --> 00:18:09.740
We've gone over the last few years from
an analog world to a digital world.

00:18:09.760 --> 00:18:14.200
I mean, I'm sure that everyone here a few
years ago was using an analog camera,

00:18:14.200 --> 00:18:16.500
and now it's digital.

00:18:16.500 --> 00:18:19.990
Maybe we are at the forefront,
but I'm sure pretty much everyone

00:18:19.990 --> 00:18:21.700
here uses a digital camera.

00:18:21.700 --> 00:18:26.090
And if you look at music,
the icon of the 80s, of course,

00:18:26.090 --> 00:18:27.330
was a Walkman.

00:18:27.340 --> 00:18:32.010
And the modern-day icon is the iPod,
of course.

00:18:32.010 --> 00:18:36.080
And if you look at the documents that
you have in your file cabinet at home,

00:18:36.170 --> 00:18:40.760
there's a lot of papers that
you used to have for your tax

00:18:40.940 --> 00:18:42.260
returns and all those things.

00:18:42.510 --> 00:18:45.800
And nowadays, they're just PDF documents.

00:18:46.500 --> 00:18:50.980
So we have really,
really started to use this

00:18:51.100 --> 00:18:52.880
power of this digital world.

00:18:52.880 --> 00:18:57.510
And we have now a lot of digital
assets that are the result

00:18:57.510 --> 00:18:59.900
of this digital activity.

00:19:00.710 --> 00:19:07.240
But we are not fully exploiting all the
capabilities of those digital assets.

00:19:07.310 --> 00:19:09.700
Because for the most part,
those documents are what

00:19:09.700 --> 00:19:11.100
you see is what you get.

00:19:11.170 --> 00:19:14.280
You know,
the picture is what you can see.

00:19:14.290 --> 00:19:16.980
But there's a lot more that
you can do with that picture,

00:19:17.000 --> 00:19:21.010
because you can attach
information about the picture.

00:19:21.290 --> 00:19:23.370
The camera, for example, can attach,
of course,

00:19:23.450 --> 00:19:26.220
the date at which the picture was taken,
and in a few years,

00:19:26.220 --> 00:19:29.720
maybe the place at which
the picture was taken.

00:19:29.780 --> 00:19:32.710
And the camera, I hope,
one day is going to attach all the

00:19:32.780 --> 00:19:38.760
parameters of the picture so that you
can enhance that picture down the pipe.

00:19:38.760 --> 00:19:41.460
If you look at your songs, of course,
they contain a lot of

00:19:41.550 --> 00:19:42.960
information about the songs.

00:19:42.960 --> 00:19:45.340
It's not just what you can hear.

00:19:45.340 --> 00:19:46.720
And something goes with documents.

00:19:46.720 --> 00:19:51.220
It can be copyright notice, offer shape,
titles, all those things.

00:19:51.230 --> 00:19:54.520
All this is metadata.

00:19:54.520 --> 00:19:58.360
Metadata is information about data.

00:19:58.360 --> 00:19:59.560
And when you have files-- - Yes.

00:19:59.560 --> 00:19:59.660
- Yes.

00:19:59.660 --> 00:19:59.700
- Yes.

00:19:59.700 --> 00:20:04.740
and you want to inspect the metadata,
one thing that you can do is to get info.

00:20:04.740 --> 00:20:08.300
And that's why I chose the
I symbol for this section because

00:20:08.300 --> 00:20:12.880
this is a fundamental concept,
how to access the metadata.

00:20:12.880 --> 00:20:16.850
And we actually have a number
of applications that enable

00:20:16.850 --> 00:20:19.180
you to view and edit metadata.

00:20:19.180 --> 00:20:21.480
iTunes is obviously one.

00:20:21.480 --> 00:20:23.600
Okay,
you have all your list of songs there,

00:20:23.600 --> 00:20:25.920
and when you select a song,
you can ask for all the

00:20:25.920 --> 00:20:29.040
information about the song,
and you get the offer, et cetera.

00:20:29.700 --> 00:20:32.100
If you download a trailer, same thing.

00:20:32.100 --> 00:20:35.300
The metadata contains
the copyright notice,

00:20:35.410 --> 00:20:38.040
which typically has the
company who made the trailer.

00:20:39.500 --> 00:20:42.630
Even if you have Office documents,
there's this pane that

00:20:42.630 --> 00:20:45.550
you may not have seen,
which is a properties sheet,

00:20:45.600 --> 00:20:48.350
where you can actually not
just view the metadata,

00:20:48.350 --> 00:20:49.490
but also edit it.

00:20:49.630 --> 00:20:52.150
You can add a copyright notice and so on.

00:20:52.160 --> 00:20:55.550
The problem is that very few
of you probably have ever

00:20:55.550 --> 00:20:59.560
noticed this properties sheet,
because it's not that useful

00:20:59.560 --> 00:21:01.710
to capture all this metadata.

00:21:01.780 --> 00:21:07.060
The real power of metadata
comes in once you can search it.

00:21:07.920 --> 00:21:12.160
If you can search metadata,
then you can have rich queries.

00:21:12.390 --> 00:21:16.360
You can ask for things like,
"What are the images I opened in

00:21:16.360 --> 00:21:21.040
the last month?" Because a computer
knows what are all your recent opens.

00:21:21.040 --> 00:21:26.150
And you can ask more complex queries,
like, "All my WWC documents,

00:21:26.170 --> 00:21:32.560
where WWC is a string that can be
both either in the metadata or in

00:21:32.560 --> 00:21:36.100
the contents of the document itself."

00:21:36.890 --> 00:21:40.060
So the question is,
how can we devise such a

00:21:40.190 --> 00:21:44.920
system that deals with metadata
as a first class citizen?

00:21:46.110 --> 00:21:47.800
So there's one approach.

00:21:47.840 --> 00:21:51.910
That approach consists in saying, well,
let's put everything into a database,

00:21:51.910 --> 00:21:54.240
a relational database.

00:21:54.290 --> 00:21:57.120
And then, of course,
we would define the schemas

00:21:57.120 --> 00:22:01.010
that you have to use,
OK, because database need very

00:22:01.120 --> 00:22:02.970
strict kind of schemas.

00:22:03.060 --> 00:22:07.740
You probably need to rewrite every
application to conform to the schemas,

00:22:07.750 --> 00:22:10.180
because we've defined
the schemas for you.

00:22:10.230 --> 00:22:12.660
And you must comply,
because if you don't comply,

00:22:12.740 --> 00:22:15.980
we are not going to be able
to find your documents.

00:22:16.100 --> 00:22:22.350
That's what I call the Borg approach.

00:22:24.280 --> 00:22:29.280
Now we are not going to do that,
I want to reassure you.

00:22:29.280 --> 00:22:32.880
We have a much softer approach.

00:22:32.880 --> 00:22:37.020
Our approach is to
devise a system service,

00:22:37.020 --> 00:22:40.240
a system-wide metadata store.

00:22:40.240 --> 00:22:42.860
This is the heart of the
spotlight technologies that

00:22:42.860 --> 00:22:44.180
were shown this morning.

00:22:46.500 --> 00:22:49.540
The way it works is that
metadata flows into it and of

00:22:49.660 --> 00:22:51.600
course is used from the store.

00:22:51.600 --> 00:22:54.710
So let's look at the two
sides of that picture.

00:22:54.720 --> 00:23:00.640
First getting metadata into the store and
that's done with a very straightforward

00:23:00.640 --> 00:23:03.180
technology that we call the importers.

00:23:03.180 --> 00:23:07.070
What an importer is,
is just a piece of code that runs

00:23:07.200 --> 00:23:12.390
when a file changes and that given a
file is able to extract a dictionary,

00:23:12.390 --> 00:23:17.980
you know, a list of key value pairs with
all the metadata information.

00:23:17.980 --> 00:23:22.350
And we've enhanced our kernel
and file system to have a whole

00:23:22.350 --> 00:23:27.500
notification infrastructure
so that as files get modified,

00:23:27.510 --> 00:23:33.240
the importer get automatically
called and import the metadata.

00:23:33.700 --> 00:23:39.040
We will ship with a lot of the
standard formats for files.

00:23:39.070 --> 00:23:44.520
And so if you use in your application
one of the common formats,

00:23:44.520 --> 00:23:45.840
you have nothing to do.

00:23:45.840 --> 00:23:49.350
It's going to be understood
automatically by the system.

00:23:49.450 --> 00:23:50.580
But it's extensible.

00:23:50.860 --> 00:23:52.280
So there's a very simple API.

00:23:52.280 --> 00:23:58.400
It's actually a one-function API that,
again, given a file, you must produce the

00:23:58.400 --> 00:24:00.080
dictionary of the metadata.

00:24:00.230 --> 00:24:04.760
So that's how you extend if
you have a unique format.

00:24:05.050 --> 00:24:07.860
Okay, so you got all your data,
all your metadata into

00:24:07.880 --> 00:24:09.450
the metadata store.

00:24:09.480 --> 00:24:12.550
So now let's say you are an application,
say the finder as was shown

00:24:12.610 --> 00:24:14.160
this morning that does a query.

00:24:14.160 --> 00:24:18.170
So there's a query that
goes to the metadata store.

00:24:18.450 --> 00:24:23.500
Then there's the results that are going
to come asynchronously from the metadata

00:24:23.500 --> 00:24:26.120
store to the requester application.

00:24:26.120 --> 00:24:29.520
And you will then display the results.

00:24:29.880 --> 00:24:34.320
Now the display of the results might
be a mix of content information,

00:24:34.320 --> 00:24:34.980
pure content information,
and the results.

00:24:35.000 --> 00:24:37.890
So you can display your
data as well as metadata,

00:24:37.920 --> 00:24:41.320
some of the columns returned
if you want by your query.

00:24:43.040 --> 00:24:45.180
So you can have really rich queries.

00:24:45.310 --> 00:24:49.580
There's a little query interpreter in
the metadata store that understands

00:24:49.580 --> 00:24:51.920
a tree-shaped kind of query.

00:24:52.020 --> 00:24:54.820
So you can really build
complex queries here.

00:24:55.070 --> 00:24:56.390
But it's super fast.

00:24:56.630 --> 00:24:57.910
You've seen the speed this morning.

00:24:57.940 --> 00:25:01.580
This is really,
really super fast technology.

00:25:01.690 --> 00:25:05.890
and it provides for live updates
which is the underlying technology

00:25:06.300 --> 00:25:08.200
for getting to smart folders.

00:25:08.300 --> 00:25:13.680
That means that your query keeps there,
okay, unless you want to close it,

00:25:13.750 --> 00:25:14.960
so it's still alive.

00:25:15.030 --> 00:25:21.110
And as new files get added to the system,
the system will automatically

00:25:21.110 --> 00:25:25.160
notify that there are some new
files that matched and then you'll

00:25:25.160 --> 00:25:27.360
get that added to your results.

00:25:27.570 --> 00:25:29.500
Standing queries.

00:25:30.830 --> 00:25:36.200
So that's the metadata store technology,
the spotlight technology.

00:25:36.250 --> 00:25:40.460
There's two key new APIs for
your application to leverage.

00:25:40.500 --> 00:25:44.260
One is the importer API to
define a new importer.

00:25:44.300 --> 00:25:49.680
And one is a query API, of course,
to submit a query and get the results.

00:25:49.700 --> 00:25:58.170
So just to summarize our approach,
the documents continue

00:25:58.170 --> 00:26:00.300
to be stored in files.

00:26:00.600 --> 00:26:04.450
This is not like you don't have to
restore everything into a relational

00:26:04.450 --> 00:26:06.170
database or anything like that.

00:26:06.230 --> 00:26:08.840
We keep the storage the same.

00:26:08.890 --> 00:26:11.040
The formats aren't changed.

00:26:11.070 --> 00:26:13.130
There's no new format added here.

00:26:13.180 --> 00:26:17.040
It's all those common formats
that you find all over the place.

00:26:17.110 --> 00:26:20.810
We just add a new service,
a system service that

00:26:20.810 --> 00:26:22.020
handles the metadata.

00:26:22.060 --> 00:26:26.030
Essentially,
we boost the file system for metadata.

00:26:26.090 --> 00:26:29.160
And all new applications
continue to run and modify.

00:26:29.160 --> 00:26:33.290
When Tiger ships-- if you have a
new file-- if you have a file format

00:26:33.290 --> 00:26:37.380
that's specific to your application for
which we didn't provide an importer,

00:26:37.380 --> 00:26:42.040
you can ship the importer outside
your application on top of Tiger.

00:26:42.040 --> 00:26:45.160
You don't have to even
reshape your application.

00:26:45.160 --> 00:26:48.020
Your application continues
to work unmodified.

00:26:48.020 --> 00:26:53.060
This is very evolutionary
as a general philosophy.

00:26:53.890 --> 00:26:57.720
Now, there's other technologies
as part of Spotlight.

00:26:57.740 --> 00:27:03.560
I had one of those rich queries,
which was find all the WWDC documents.

00:27:03.630 --> 00:27:07.780
And WWDC could match in the metadata,
or it could match in the

00:27:07.780 --> 00:27:09.670
content of the document.

00:27:09.800 --> 00:27:12.030
To do that, you need full text indexing.

00:27:12.350 --> 00:27:15.820
So we've been working hard
to really improve our full

00:27:15.820 --> 00:27:17.680
text indexing technology.

00:27:17.740 --> 00:27:21.800
Last year, we introduced Search Kit with
a whole bunch of APIs,

00:27:21.820 --> 00:27:23.220
and we've enhanced that.

00:27:23.290 --> 00:27:29.260
We've made that a lot faster,
up to 20 times when you search,

00:27:29.260 --> 00:27:30.480
and three times to index.

00:27:30.480 --> 00:27:35.380
And I think we still have some room
to go there to really optimize things.

00:27:35.470 --> 00:27:40.820
But the key thing is that the full
text index is now always up to date.

00:27:40.960 --> 00:27:44.590
So you don't have to have the
user force an index of everything.

00:27:44.630 --> 00:27:47.740
It's always ready for
you to ask that question.

00:27:47.810 --> 00:27:49.880
And as you saw again
this morning in the demo,

00:27:49.880 --> 00:27:52.100
it's really fast.

00:27:52.630 --> 00:27:58.430
And we've mixed the metadata query
engine with the full text search

00:27:58.620 --> 00:28:01.080
so that you can have mixed queries,
of course.

00:28:01.080 --> 00:28:04.560
That's how the Find Me or
the WWDC documents works.

00:28:06.290 --> 00:28:13.950
So I think we have a lot for you with
just those two very simple API additions

00:28:14.210 --> 00:28:18.090
to really leverage the power of metadata.

00:28:18.320 --> 00:28:21.310
Now, the key, though,
is that you need to really now

00:28:21.470 --> 00:28:23.780
pay more attention to metadata.

00:28:23.860 --> 00:28:27.590
So when you have an application
that creates new document,

00:28:27.660 --> 00:28:32.370
you need to make sure you capture
all the metadata and you put that in

00:28:32.370 --> 00:28:35.060
the document along with the document.

00:28:35.110 --> 00:28:38.790
That's really critical to
make all this kind of really

00:28:38.920 --> 00:28:40.970
work well for the end user.

00:28:41.070 --> 00:28:43.980
If you have an application
that transforms from one

00:28:43.980 --> 00:28:47.940
document to another document,
you should make sure that you preserve

00:28:47.950 --> 00:28:49.720
the metadata as you transform.

00:28:49.760 --> 00:28:54.050
And the good news is that most of the
applications out there already do that.

00:28:54.070 --> 00:28:57.330
That's why the system
works so well already.

00:28:57.830 --> 00:29:02.460
If you have a new type of document,
one that's not common,

00:29:02.460 --> 00:29:06.000
you can add an importer.

00:29:06.000 --> 00:29:09.280
And I'm sure that you are going
to find very unique ways to

00:29:09.450 --> 00:29:11.580
leverage all the query API.

00:29:11.720 --> 00:29:15.280
It really changes the way
you program when suddenly you

00:29:15.360 --> 00:29:18.460
can have a query and very,
very quickly get all the

00:29:18.460 --> 00:29:20.180
results of that query.

00:29:20.180 --> 00:29:22.840
You do programming in a
different way once you have such

00:29:22.840 --> 00:29:25.090
a functionality in the system.

00:29:27.080 --> 00:29:29.180
So that was metadata.

00:29:29.180 --> 00:29:33.040
Let's move on to another topic.

00:29:33.430 --> 00:29:36.090
and that's about storing data.

00:29:36.090 --> 00:29:39.460
For the last few years
we've had this request.

00:29:39.520 --> 00:29:42.900
So when are you guys
going to ship a database?

00:29:43.030 --> 00:29:47.550
Now I just talked about metadata
and how we enrich a file system.

00:29:47.670 --> 00:29:50.260
Do we still need a database?

00:29:50.350 --> 00:29:54.800
Now that you can have, you know,
fancy attributes along with your files?

00:29:54.920 --> 00:30:00.670
Well the answer is yes because sometimes
you have lots of little objects that

00:30:00.670 --> 00:30:03.200
you want to put in your database.

00:30:03.240 --> 00:30:08.410
And as we all know the file system
has a fairly coarse granularity.

00:30:08.530 --> 00:30:10.500
Each object is a few kilobytes.

00:30:10.570 --> 00:30:13.270
And sometimes the things
that you want to put in your

00:30:13.270 --> 00:30:15.030
database are just a few bytes.

00:30:15.150 --> 00:30:18.700
Databases are very good at
doing that kind of stuff.

00:30:18.830 --> 00:30:24.300
Now also databases are very
good at storing relationships.

00:30:24.300 --> 00:30:27.760
Entities and relationships, ER diagrams,
you know, all these things.

00:30:27.760 --> 00:30:31.000
I mean there's a reason why
this is associated with RDB.

00:30:31.000 --> 00:30:33.090
The R stands for relational.

00:30:33.100 --> 00:30:37.210
Databases are very good to maintain
the atomicity across relationships,

00:30:37.210 --> 00:30:38.190
for example.

00:30:38.930 --> 00:30:43.320
And some of you may want to do SQL.

00:30:43.330 --> 00:30:46.670
Now, to be fair, there's probably half of
you who want to do SQL,

00:30:46.670 --> 00:30:51.980
and there's probably another half of you
who wants to have nothing to do with SQL.

00:30:55.470 --> 00:30:58.840
So we wanted to really satisfy
your need for a database.

00:30:58.900 --> 00:31:02.940
So we searched for a database
we could add to the system.

00:31:02.940 --> 00:31:06.180
We wanted to have an embedded database,
something that you can

00:31:06.180 --> 00:31:12.020
embed to your application,
link it in, and use that as a library.

00:31:12.020 --> 00:31:15.500
We wanted the database to do SQL,
of course.

00:31:15.500 --> 00:31:19.200
And we wanted to use an
open source database.

00:31:19.200 --> 00:31:21.860
We didn't want to reinvent
the wheel for database.

00:31:21.860 --> 00:31:25.600
I mean, there's a number of database
that are very popular there.

00:31:25.730 --> 00:31:29.680
But above all, we wanted something
extremely lightweight,

00:31:29.690 --> 00:31:32.470
because this is for your
application to link with it.

00:31:32.580 --> 00:31:36.290
So we didn't want to have a full
heavy duty kind of database.

00:31:36.400 --> 00:31:39.200
We wanted something that
you can embed that's really,

00:31:39.200 --> 00:31:41.370
really, really lightweight.

00:31:41.740 --> 00:31:44.700
So we search for all this.

00:31:44.720 --> 00:31:47.890
And as we search,
we find out that there are several

00:31:47.890 --> 00:31:52.780
groups within Apple that were already
using the same little database.

00:31:52.870 --> 00:31:55.440
So we said, hey,
why don't we bundle that one?

00:31:55.440 --> 00:31:58.190
Because it seems that independently,
many small groups within

00:31:58.300 --> 00:32:00.710
Apple have met that already,
have evaluated,

00:32:00.710 --> 00:32:04.480
and find out that there's one
that's better than the others.

00:32:04.820 --> 00:32:10.200
So we will ship with Tiger SQLite.

00:32:11.290 --> 00:32:16.730
That is a very lightweight
database that has all the

00:32:16.730 --> 00:32:19.700
characteristics that we wanted.

00:32:21.210 --> 00:32:26.500
So that should really satisfy
the half of you who wanted to do

00:32:26.500 --> 00:32:29.160
SQL queries in your application.

00:32:29.230 --> 00:32:35.760
But there's the other half of you who
wanted to have nothing to do with SQL.

00:32:35.780 --> 00:32:39.560
You want to hide the SQL generation.

00:32:39.590 --> 00:32:40.900
And we have something for you.

00:32:40.900 --> 00:32:43.620
It's called Core Data.

00:32:43.860 --> 00:32:47.700
Core Data is an object-oriented
framework that's built on

00:32:47.810 --> 00:32:50.890
top of SQLite and for debug,
it's actually,

00:32:51.170 --> 00:32:53.660
you can also go to a flat XML file.

00:32:53.660 --> 00:32:56.020
Obviously,
you cannot ship that way because an

00:32:56.100 --> 00:32:59.750
XML file doesn't scale very well,
but for debugging your applications,

00:32:59.810 --> 00:33:00.950
that's fantastic.

00:33:01.540 --> 00:33:05.390
It leverages Cocoa Bindings,
this framework.

00:33:05.390 --> 00:33:08.810
So,
I maybe need to explain Cocoa Bindings.

00:33:08.960 --> 00:33:14.240
It's a technology that we introduced
last year that enables you to keep

00:33:14.510 --> 00:33:17.030
the model and the view in sync.

00:33:17.060 --> 00:33:21.840
So, if you have your model for your data,
you have a database or, you know,

00:33:21.840 --> 00:33:25.570
in-memory kind of store of some kind,
and you have your UI,

00:33:25.570 --> 00:33:27.630
let's say both have fields.

00:33:27.650 --> 00:33:31.520
You know, there's a person field here and
there's a person field in the UI.

00:33:31.520 --> 00:33:36.900
What you have to do is maintain those two
things in sync so that if the database,

00:33:36.900 --> 00:33:40.620
the store changes,
that value is reflected in the UI.

00:33:40.760 --> 00:33:43.740
Vice versa,
if the user edits the name of the

00:33:43.740 --> 00:33:47.490
person or something like that,
you want that value to be

00:33:47.630 --> 00:33:49.950
propagated to the database.

00:33:51.550 --> 00:33:57.390
The Cocoa bindings enable you to specify
that this field in the database is

00:33:57.390 --> 00:33:59.780
really bound to this field in the UI.

00:33:59.780 --> 00:34:02.920
And so automatically,
it does this binding and it

00:34:02.920 --> 00:34:06.170
gets rid of all the code to make
sure those tools stay in sync.

00:34:06.200 --> 00:34:10.060
So Core Data leverages
that functionality.

00:34:10.060 --> 00:34:16.040
We also have some modeling tools to
enable you to have some basic database,

00:34:16.110 --> 00:34:17.820
SQLite database.

00:34:18.560 --> 00:34:22.400
And all together,
it enables you to do rapid application

00:34:22.400 --> 00:34:27.160
development because you can do
significant applications with

00:34:27.170 --> 00:34:29.930
significant functionality with no code.

00:34:29.940 --> 00:34:33.530
And I know that's hard to believe,
so I'd like to invite at

00:34:33.530 --> 00:34:37.740
this point Andreas Wendker to
demonstrate usage of Core Data.

00:34:37.740 --> 00:34:40.570
Thank you, Bertrand.

00:34:45.210 --> 00:34:47.700
So Core Data makes it really
easy for you to manage your

00:34:47.800 --> 00:34:50.740
application's data objects,
both in memory and on disk.

00:34:50.860 --> 00:34:54.170
And we are going to support three
different types of file formats--

00:34:54.230 --> 00:34:58.860
SQL databases on top of SQLite,
human readable XML files,

00:34:58.930 --> 00:35:01.800
and binary archive files.

00:35:03.500 --> 00:35:07.840
What you see here on the screen
is actually a typical XML file,

00:35:07.890 --> 00:35:09.760
as it could be managed by Core Data.

00:35:09.840 --> 00:35:12.670
And I'm now going to build
an application for it.

00:35:14.510 --> 00:35:16.540
So I'm going to switch into Xcode.

00:35:16.570 --> 00:35:19.640
I'm going to start
creating a new project.

00:35:19.670 --> 00:35:21.780
I'm going to choose one of
the new project templates,

00:35:21.830 --> 00:35:26.130
the Core Data Document-Based Application.

00:35:26.240 --> 00:35:28.410
Just have to enter a name.

00:35:32.240 --> 00:35:33.960
In just a moment,
my project should come up.

00:35:33.960 --> 00:35:40.260
It really will.

00:35:40.300 --> 00:35:41.790
There it is.

00:35:49.760 --> 00:35:52.240
So as it is common with
Cocoa applications,

00:35:52.240 --> 00:35:55.450
my project comes preconfigured
with a document class that I can

00:35:55.570 --> 00:35:57.180
use for my own customizations.

00:35:57.180 --> 00:35:59.800
And what's new here is that
it has a new superclass,

00:35:59.800 --> 00:36:02.750
the NS Persistent document,
which already knows how to use core

00:36:02.750 --> 00:36:08.160
data to automatically read and write
my data objects to the file system.

00:36:08.160 --> 00:36:10.830
The project also comes
with a new component,

00:36:10.830 --> 00:36:11.640
the model.

00:36:14.060 --> 00:36:16.950
The model is a description of
my application's data object,

00:36:17.030 --> 00:36:19.030
and it's needed by Core Data.

00:36:19.100 --> 00:36:22.150
Instead of entering it here by hand,
I'm simply going to import it from the

00:36:22.240 --> 00:36:23.620
XML file I showed you a moment ago.

00:36:23.760 --> 00:36:32.940
So what you see here--

00:36:39.330 --> 00:36:41.930
What you see here is an entity
relationship diagram of the

00:36:41.930 --> 00:36:44.100
object stored in the XML file.

00:36:44.130 --> 00:36:46.140
And we derived it from
the structure of the XML.

00:36:46.140 --> 00:36:48.480
As you can see,
we are dealing with persons, locations,

00:36:48.610 --> 00:36:49.590
events, equipment.

00:36:49.600 --> 00:36:52.670
So we have a little event
management system in front of us.

00:36:54.810 --> 00:36:57.200
Now I just need to generate
the user interface.

00:36:57.240 --> 00:37:01.090
So I'm going to open the document,
document.snip file in Interface Builder.

00:37:01.140 --> 00:37:04.450
And then I'm simply going to
drag over one of the entities

00:37:04.840 --> 00:37:07.110
from our model into my window.

00:37:16.060 --> 00:37:19.060
So this uses Cocoa binding so that
I don't have to worry about writing

00:37:19.160 --> 00:37:21.370
code to populate my user interface.

00:37:22.870 --> 00:37:25.040
Now let me start building my project.

00:37:25.110 --> 00:37:28.110
And while it's building,
I have to show you one more thing.

00:37:28.840 --> 00:37:31.540
The project comes pre-configured
with three different document types,

00:37:31.630 --> 00:37:33.570
one for each of the
five formats we support,

00:37:33.580 --> 00:37:36.280
binary, SQL, and XML.

00:37:36.910 --> 00:37:40.660
So it's finished building,
so let me run my project.

00:37:40.660 --> 00:37:41.550
Here it is.

00:37:41.760 --> 00:37:45.280
The first thing I'm going to do
is I'm going to open the XML file.

00:37:46.130 --> 00:37:49.000
Here's the data in the XML file.

00:37:49.000 --> 00:37:51.000
It even has some pictures in there.

00:37:51.000 --> 00:37:54.000
I can also enter some new
data in the other window.

00:37:54.000 --> 00:37:59.060
Maybe one more.

00:38:02.520 --> 00:38:05.960
I'm now going to save this file.

00:38:05.970 --> 00:38:08.070
And here it's asking me for what
kind of file format I want to use.

00:38:08.160 --> 00:38:10.380
These are the three different
document types that are

00:38:10.380 --> 00:38:11.670
pre-configured in the project.

00:38:11.840 --> 00:38:14.330
So I'm going to use SQL this time.

00:38:15.960 --> 00:38:18.600
Now I have an SQL database on my desktop.

00:38:18.670 --> 00:38:19.560
So let me close this.

00:38:19.690 --> 00:38:21.780
Let me open it again.

00:38:22.390 --> 00:38:23.740
There's my data again.

00:38:23.820 --> 00:38:25.900
So as you can see,
without writing a single line of code,

00:38:25.900 --> 00:38:28.490
I was able to write a fully
functional desktop application.

00:38:28.590 --> 00:38:30.810
And with that, back to Bertrand.

00:38:38.750 --> 00:38:40.590
Thank you, Andreas.

00:38:40.750 --> 00:38:45.240
So I think we have a rich array of
technologies for you to store data.

00:38:45.330 --> 00:38:48.740
We've the enriched file
system with metadata,

00:38:48.810 --> 00:38:54.900
and now with SQLite,
and RAD development with Core Data.

00:38:54.910 --> 00:38:57.510
Let's move on to another topic.

00:39:00.880 --> 00:39:03.990
This topic is thinking, thinking data.

00:39:04.150 --> 00:39:06.880
So maybe I need to
motivate that a little.

00:39:06.880 --> 00:39:10.210
We live nowadays in a very mobile world.

00:39:10.210 --> 00:39:16.950
People use computers all over the place,
even in airplanes to do iChat as we saw.

00:39:17.000 --> 00:39:22.700
And we released great new products
that really support all this mobility.

00:39:22.700 --> 00:39:26.170
Now you can be in your hotel room,
plug in the base station and you

00:39:26.170 --> 00:39:28.080
have full freedom of movement.

00:39:28.080 --> 00:39:32.680
You can be with your portable wherever
in that room without being wired.

00:39:32.680 --> 00:39:36.470
So this is really the
hardware side of mobility.

00:39:36.680 --> 00:39:40.800
But there's also a whole
software side to mobility.

00:39:40.950 --> 00:39:44.690
We've worked really,
really hard to make Mac OS X a

00:39:44.690 --> 00:39:46.680
very mobile platform.

00:39:47.130 --> 00:39:48.310
From a software perspective.

00:39:48.430 --> 00:39:51.910
We work really,
really hard each release to make

00:39:51.910 --> 00:39:56.600
sure you can open that portable
and right away be able to use it.

00:39:56.660 --> 00:40:01.030
We really work hard to make sure
you can sleep and wake it up and

00:40:01.030 --> 00:40:06.000
connect and disconnect from after
having mounted file servers.

00:40:06.000 --> 00:40:07.440
And all those things.

00:40:07.640 --> 00:40:09.770
We added VPN in the last release.

00:40:09.790 --> 00:40:14.270
So there's really a lot of work that
goes into making all that really,

00:40:14.270 --> 00:40:15.550
really smooth.

00:40:15.600 --> 00:40:16.980
But there's still some work to be done.

00:40:16.980 --> 00:40:22.500
So if you have a lot of your world
on your portable and if you have

00:40:22.500 --> 00:40:28.460
another computer as many of us do,
whether it's at home or at work,

00:40:28.460 --> 00:40:34.390
you really want to have the same
data on both of your computers.

00:40:34.400 --> 00:40:38.570
And the problem gets even worse once
you start putting some of your addresses

00:40:38.570 --> 00:40:42.440
on your telephone and here you are,
you meet a friend and type in this new

00:40:42.440 --> 00:40:46.960
address on that little keyboard and now
you have this address on your phone.

00:40:46.960 --> 00:40:51.960
You also have the iPod where you may have
things like your calendar information

00:40:51.960 --> 00:40:59.180
and half a million of our users have
a .Mac account with this server in the

00:40:59.200 --> 00:41:01.740
sky that holds a lot of information.

00:41:01.740 --> 00:41:05.660
So the key to all this
is syncing technology.

00:41:05.690 --> 00:41:09.610
And we've had a product for the
last few years that's called iSync

00:41:09.730 --> 00:41:11.910
that really does well that job.

00:41:11.940 --> 00:41:16.820
But what we are doing now is we
are taking the engine from iSync.

00:41:16.940 --> 00:41:19.570
And adding that to the best OS.

00:41:19.920 --> 00:41:21.890
We call that sync services.

00:41:22.010 --> 00:41:27.290
And it can do all the same tricks that
iSync used to be able to do in terms

00:41:27.290 --> 00:41:29.460
of the data types it understands.

00:41:29.520 --> 00:41:33.960
Your contacts information, your calendar,
your bookmarks.

00:41:34.020 --> 00:41:40.220
And it can do a few more tricks like it
will be able to sync your key chains.

00:41:42.200 --> 00:41:46.240
So that wherever you go, any website,
on any machine, you'll be able to find

00:41:46.260 --> 00:41:48.020
all your passwords again.

00:41:48.080 --> 00:41:51.220
It can do mail preferences, mail rules.

00:41:51.220 --> 00:41:54.860
I'm sure you encounter the program
daily when you switch machines.

00:41:54.900 --> 00:41:58.770
And there's a number of
applications that we intend to sync,

00:41:58.770 --> 00:42:01.870
for which we intend to
sync the preferences.

00:42:02.780 --> 00:42:07.110
The engine is also revamped
in this version too.

00:42:07.110 --> 00:42:12.310
Rather than having to sync all the
devices with all the data types at once,

00:42:12.380 --> 00:42:16.980
you'll have really fine control over
exactly which data type you sync on

00:42:17.190 --> 00:42:19.190
which device or for which client.

00:42:19.200 --> 00:42:22.090
It's going to support
incremental syncing,

00:42:22.200 --> 00:42:26.340
optimizing the connection so
that you minimize the traffic.

00:42:27.120 --> 00:42:30.650
And it has some great
facilities to solve conflicts.

00:42:30.680 --> 00:42:32.900
Now,
conflicts is really important in syncing

00:42:32.900 --> 00:42:36.310
because when you have no conflicts,
well, syncing is just copying.

00:42:36.320 --> 00:42:37.810
That's really easy.

00:42:37.820 --> 00:42:40.940
The problem,
the difficulty of syncing comes with

00:42:41.020 --> 00:42:45.220
recognizing the conflicts and not
having too many conflicts and then

00:42:45.220 --> 00:42:48.010
having the proper UI to solve conflicts.

00:42:48.020 --> 00:42:54.080
So all this functionality is going
to be available in sync services.

00:42:54.080 --> 00:42:57.700
But the one thing that I know you've
been asking for a while... is to

00:42:57.790 --> 00:43:01.250
have an SDK for sync services.

00:43:04.820 --> 00:43:09.780
So this SDK will enable you to use
all the standard data types that

00:43:09.910 --> 00:43:13.210
Think Services already understands,
things like bookmarks.

00:43:13.240 --> 00:43:15.550
And by the way,
this is a very good way to

00:43:15.550 --> 00:43:17.370
manipulate the bookmarks.

00:43:17.480 --> 00:43:21.440
As you know, there's no API to Safari to
access the bookmarks of Safari,

00:43:21.440 --> 00:43:24.260
but you'll be able to do
that via Think Services.

00:43:24.410 --> 00:43:28.280
You can extend the existing
data types that are programmed

00:43:28.390 --> 00:43:30.600
already into Think Services.

00:43:30.600 --> 00:43:32.940
For example, if you want to add,
let's say,

00:43:33.020 --> 00:43:36.230
a click count to your bookmarks,
you'll be able to add that field,

00:43:36.240 --> 00:43:39.160
and that will be understood
by Think Services.

00:43:39.160 --> 00:43:42.120
And of course,
you'll be able to define new data types.

00:43:42.200 --> 00:43:47.430
In terms of the clients and the devices,
you will be able, using Think Services,

00:43:47.530 --> 00:43:51.790
to really simplify adding a new device,
adding a new client.

00:43:51.800 --> 00:43:54.720
Because what we brought
is the connection,

00:43:54.720 --> 00:43:58.110
the knowledge of one client
of the other clients.

00:43:58.200 --> 00:44:03.020
So each client is... programmed in
its relation of the other clients.

00:44:03.180 --> 00:44:07.400
So if you have a new device, you know,
some gadget of some kind for which

00:44:07.400 --> 00:44:11.200
you think a certain data type,
you don't need to know about all the

00:44:11.200 --> 00:44:13.540
other clients for that data type.

00:44:13.540 --> 00:44:15.190
We've broken that connection.

00:44:15.200 --> 00:44:18.930
And you'll be able to do
machine-to-machine syncing

00:44:18.930 --> 00:44:25.130
via .Mac for all our users who
have a lot of .Mac accounts.

00:44:25.350 --> 00:44:27.150
So this brings me to .Mac.

00:44:27.230 --> 00:44:30.880
It's really,
really powerful to have a server

00:44:30.880 --> 00:44:33.150
in the sky just like what .Mac is.

00:44:33.190 --> 00:44:35.720
It means wherever you
are on the Internet,

00:44:35.800 --> 00:44:37.980
suddenly you can access your data.

00:44:37.980 --> 00:44:44.840
Now, I'm pleased to announce that we're
making the .Mac API public so that

00:44:44.860 --> 00:44:49.140
you will be able to enjoy the same
level of integration that we've been

00:44:49.140 --> 00:44:53.040
enjoying at Apple with our applications,
the integration between

00:44:53.040 --> 00:44:54.410
the apps and .Mac.

00:44:55.410 --> 00:45:01.560
We believe this is going to enable
a totally new category of features.

00:45:01.560 --> 00:45:04.000
I mean, we don't know exactly what
kind of features you're

00:45:04.010 --> 00:45:07.180
going to come out with this,
but we know there's something big there.

00:45:07.180 --> 00:45:12.550
Because once you have storage, you know,
on .Mac, now you can store your own

00:45:12.660 --> 00:45:15.180
information on behalf of the user.

00:45:15.180 --> 00:45:18.860
You can add to that storage,
and you can republish that information

00:45:18.860 --> 00:45:20.560
by whatever means you want.

00:45:20.620 --> 00:45:24.980
So think, for example, if you have, like,
a program that generates labels.

00:45:25.200 --> 00:45:28.310
Okay,
and you have this database of labels.

00:45:28.320 --> 00:45:31.810
Now you can use that information
in .Mac to publish it.

00:45:31.820 --> 00:45:34.010
Lots and lots of possibilities.

00:45:34.140 --> 00:45:38.780
The API to .Mac is very,
very straightforward.

00:45:38.780 --> 00:45:41.060
There's no networking involved.

00:45:41.140 --> 00:45:42.960
It's just a simple connection.

00:45:42.960 --> 00:45:48.400
And .Mac uses standard protocols and
standard ways to access information.

00:45:48.420 --> 00:45:52.040
For example, the filing protocol is
all based on WebDAV.

00:45:52.100 --> 00:45:54.820
And so it's going to be
extremely simple to use.

00:45:55.200 --> 00:45:56.380
That's storage in the sky.

00:45:56.380 --> 00:46:00.860
And because we believe
in using our own APIs,

00:46:00.860 --> 00:46:04.980
that's the way we can convince ourselves
that they're good enough for you.

00:46:04.980 --> 00:46:08.700
.Mac syncing is, of course,
going to use the .Mac API.

00:46:10.570 --> 00:46:16.230
So there's a lot of new
possibilities with having a

00:46:16.370 --> 00:46:18.670
sync engine down into the US.

00:46:18.800 --> 00:46:23.390
And I'm sure you're going to find really,
really new innovative ways

00:46:23.590 --> 00:46:24.910
to use that in the future.

00:46:28.130 --> 00:46:34.780
So let's move on another topic that has
nothing to do with data for a change.

00:46:34.900 --> 00:48:28.700
[Transcript missing]

00:48:30.050 --> 00:48:32.860
So there's a lot of power in the G5.

00:48:32.860 --> 00:48:34.960
How to get more power?

00:48:34.990 --> 00:48:36.240
Well, power of two.

00:48:36.460 --> 00:48:39.210
Put two G5s together.

00:48:39.210 --> 00:48:43.390
And luckily,
all the PowerMax we ship now are dual G5.

00:48:43.390 --> 00:48:48.300
And the XSERVs that we introduced
a few months ago is also dual G5.

00:48:49.020 --> 00:48:53.890
And what really is powerful to have two
G5 is because we have this technology

00:48:54.050 --> 00:48:57.000
that's called symmetric multiprocessing.

00:48:57.000 --> 00:48:59.680
We've had that from day one on Mac OS X.

00:48:59.680 --> 00:49:03.310
This enables your application if
your application is programmed

00:49:03.470 --> 00:49:05.300
using the standard threads.

00:49:05.300 --> 00:49:09.450
And there's lots of things that
generate threads and that use threads.

00:49:09.560 --> 00:49:13.700
Some on your behalf and some that
you can just program yourself.

00:49:13.760 --> 00:49:17.090
So if you use several threads,
you can essentially have

00:49:17.090 --> 00:49:18.610
the ability to process.

00:49:19.020 --> 00:49:20.030
Things in parallel.

00:49:20.040 --> 00:49:25.160
Both your G5s are busy at the
same time on your application.

00:49:25.160 --> 00:49:28.150
But for the kernel,
we've had to put some locking

00:49:28.150 --> 00:49:32.080
because there's some system
resources that you need to lock.

00:49:32.150 --> 00:49:36.240
You don't want to have like two
kernel threads in the same time in the

00:49:36.310 --> 00:49:41.120
networking stack or two kernel threads
in the same time in the file system.

00:49:41.120 --> 00:49:45.150
So what we did in previous releases,
we had this big lock at the entrance

00:49:45.160 --> 00:49:48.970
of the networking stack and at
the entrance of the file system.

00:49:49.050 --> 00:49:50.560
And we've done this for
the entire system stack.

00:49:50.560 --> 00:49:55.530
What we have done for Tiger is break
down that lock into smaller locks

00:49:55.720 --> 00:49:59.530
that have a much finer granularity.

00:50:02.830 --> 00:50:05.690
This sounds really easy
to do with such a picture,

00:50:05.790 --> 00:50:10.180
but this picture simplifies
reality quite a bit.

00:50:11.310 --> 00:50:16.070
Now, what this enables you, of course,
is to have much more

00:50:16.070 --> 00:50:20.390
improved parallelism,
much greater throughput,

00:50:20.390 --> 00:50:24.040
both with the file system and networking,
in the right condition,

00:50:24.050 --> 00:50:29.240
when you have a dual processor
and when you load those things.

00:50:29.630 --> 00:50:32.540
We also used that opportunity
to do something that we wanted

00:50:32.620 --> 00:50:34.300
to do for a very long time.

00:50:34.300 --> 00:50:42.500
We've had an IOCit that has a stable API,
so all the drivers, the IOCit drivers,

00:50:42.930 --> 00:50:47.020
continue to work from one release
to the next because we have an API.

00:50:47.020 --> 00:50:52.560
We did not have that for file system
and networking kernel extensions.

00:50:52.560 --> 00:50:55.850
And we did not have that
because the data structures,

00:50:55.850 --> 00:50:59.270
the structs,
records of the kernel were wide open.

00:50:59.280 --> 00:51:01.640
And so if you were programming
a kernel extension,

00:51:01.640 --> 00:51:03.510
you were of course using that struct.

00:51:03.530 --> 00:51:05.800
And therefore,
as we were changing the struct,

00:51:05.800 --> 00:51:07.840
this would break from release to release.

00:51:07.940 --> 00:51:11.440
So because we were changing the structs,
because we had to put

00:51:11.470 --> 00:51:15.360
the locks somewhere,
so we took that opportunity

00:51:15.360 --> 00:51:17.640
to also provide an API.

00:51:17.640 --> 00:51:22.540
So that means that from now on,
we can have stable kernel interfaces.

00:51:22.540 --> 00:51:26.410
Beyond IOCit for file
system and networking.

00:51:34.210 --> 00:51:37.640
Two G5s, that's pretty good power,
isn't it?

00:51:37.710 --> 00:51:39.680
How about more power?

00:51:39.690 --> 00:51:42.300
Let's talk about power of 10.

00:51:42.310 --> 00:51:45.680
Let's just take a rack full of G5s.

00:51:46.830 --> 00:51:51.900
And of course what this rack
runs is Mac OS X Server.

00:51:52.040 --> 00:51:55.940
So let me go over the strategy
for the server very quickly.

00:51:55.940 --> 00:51:59.050
There's kind of three
fundamentals for the server.

00:51:59.150 --> 00:52:01.740
The server is Unix based,
just like the client,

00:52:01.740 --> 00:52:06.820
but that's a place where it's
definitely even more important.

00:52:06.880 --> 00:52:08.000
We build on open source.

00:52:08.100 --> 00:52:11.720
In fact, the server is really taking
all those open source services

00:52:11.970 --> 00:52:13.620
and making them easy to use.

00:52:13.630 --> 00:52:17.160
And that brings me to the third point,
the ease of use and the integration.

00:52:17.280 --> 00:52:20.770
So let's go a little deeper on that.

00:52:20.840 --> 00:52:21.840
Unix.

00:52:21.880 --> 00:52:26.180
Unix has been a bet for Mac OS X,
and this was the right bet.

00:52:26.380 --> 00:52:27.980
Unix is a power.

00:52:27.980 --> 00:52:32.480
Unix is the base on which we
build both client and server,

00:52:32.480 --> 00:52:33.450
and it's really robust.

00:52:33.540 --> 00:52:35.970
That's why Mac OS X is so resilient.

00:52:36.270 --> 00:52:38.460
It's a Unix infrastructure.

00:52:38.480 --> 00:52:40.320
Unix powers the internet.

00:52:40.520 --> 00:52:44.060
Over 3/4 of all the servers
on the internet are powered

00:52:44.070 --> 00:52:45.220
by one Unix and other.

00:52:45.480 --> 00:52:51.270
That's amazing when you consider the
geopolitics of the computing world.

00:52:51.640 --> 00:52:55.720
and Unix is an industry standard,
of course.

00:52:55.740 --> 00:52:59.440
And because it is an industry standard,
it has created this whole

00:52:59.490 --> 00:53:00.960
open source movement.

00:53:00.980 --> 00:53:04.550
And there's lots and lots of open
source services that are out there.

00:53:04.690 --> 00:53:07.740
So what we do is we pick what
we think are the best ones,

00:53:07.760 --> 00:53:09.600
and we bundle them.

00:53:09.620 --> 00:53:10.980
We integrate them.

00:53:10.990 --> 00:53:14.280
In fact, in Tiger,
on the server version of Tiger,

00:53:14.360 --> 00:53:18.960
we will ship more than
100 open source projects.

00:53:19.010 --> 00:53:20.430
And that's the third point.

00:53:20.490 --> 00:53:24.870
What we do with the services is
we make them really easy to use.

00:53:25.150 --> 00:53:31.640
We create a consistent and approachable
UI to really make like memortals,

00:53:31.640 --> 00:53:37.170
people like teachers,
manage Mac OS X server boxes.

00:53:37.250 --> 00:53:39.570
And we also integrate
the services together.

00:53:39.580 --> 00:53:43.190
We tweak them as necessary so that
they really interplay something that

00:53:43.210 --> 00:53:46.100
is not done by the open source world.

00:53:46.190 --> 00:53:48.580
And we also test them working together.

00:53:48.820 --> 00:53:50.440
That's another thing that nobody does.

00:53:50.460 --> 00:53:53.290
as in the open source world.

00:53:55.020 --> 00:53:59.900
So lots of features on the Tiger server.

00:53:59.940 --> 00:54:02.080
I'm not going to go through all of them.

00:54:02.080 --> 00:54:03.790
There's a lot more than this list here.

00:54:04.080 --> 00:54:05.580
Just a few I wanted to mention.

00:54:05.660 --> 00:54:09.180
Access control list, heavily requested.

00:54:09.180 --> 00:54:15.040
Syncing,
so that if you have an education setting

00:54:15.040 --> 00:54:18.920
with some students who have an iBook,
you can connect and

00:54:18.920 --> 00:54:20.820
sync your network home.

00:54:20.870 --> 00:54:25.340
A number of servers, weblog servers,
that will complement very well

00:54:25.560 --> 00:54:28.010
the personal clipping service,
Safari RSS,

00:54:28.010 --> 00:54:30.340
that was introduced this morning.

00:54:30.340 --> 00:54:34.620
An iChat server,
so that you can within the company,

00:54:34.620 --> 00:54:35.850
iChat.

00:54:38.090 --> 00:54:40.760
As you can see,
there's a lot of complementarity

00:54:40.760 --> 00:54:42.270
between the client and the server.

00:54:42.270 --> 00:54:44.200
That's another thing that we do.

00:54:44.310 --> 00:54:48.570
And we make it easy to switch to
Mac OS X server with an assistant so

00:54:48.650 --> 00:54:53.980
that you can easily connect if you have
a small business to the internet because

00:54:53.980 --> 00:54:56.190
it's fairly complex to do those things.

00:54:56.190 --> 00:54:58.930
There's a number of things that
you need to do and the assistant

00:54:59.030 --> 00:55:00.900
makes all that really smooth.

00:55:01.040 --> 00:55:05.510
And some migration tools if
you come from another OS.

00:55:07.480 --> 00:55:10.100
So one rack is a lot of power.

00:55:10.130 --> 00:55:12.020
How to get more power?

00:55:12.020 --> 00:55:15.400
Well, why don't you roll in another rack?

00:55:15.400 --> 00:55:17.050
And maybe another rack.

00:55:17.060 --> 00:55:19.360
Money is no issue, right?

00:55:20.180 --> 00:55:24.210
But if money is an issue,
why don't you use instead

00:55:24.500 --> 00:55:26.410
the power of the grid?

00:55:26.420 --> 00:55:33.020
Why don't you turn a whole network of
idle iMacs into a giant supercomputer?

00:55:33.110 --> 00:55:36.200
Something that's virtually
hundreds of gigahertz.

00:55:36.210 --> 00:55:41.370
And now you can do like factorize
prime numbers or whatever

00:55:41.370 --> 00:55:45.350
scientific computation you
have on top of this network,

00:55:45.350 --> 00:55:47.880
the X Grid enabled network.

00:55:47.920 --> 00:55:53.380
So X Grid is this product we
introduced a few months ago.

00:55:53.380 --> 00:55:56.590
We had a pre-release,
a technical preview, I believe,

00:55:56.590 --> 00:55:57.880
in January.

00:55:57.880 --> 00:56:03.300
And what this does is that
it can exploit idle machines.

00:56:03.300 --> 00:56:09.780
And it's very easy to submit a new
task to the grid and to contribute

00:56:09.790 --> 00:56:12.320
your own machine to the grid as well.

00:56:13.500 --> 00:56:18.440
So there's a lot of power
coming up with Tiger.

00:56:18.440 --> 00:56:21.190
If you have a large data set, use 64-bit.

00:56:21.200 --> 00:56:24.600
Recompile your Unix
application for 64-bit.

00:56:24.600 --> 00:56:27.180
If you have something that
has large parallelism,

00:56:27.190 --> 00:56:28.580
use a grid.

00:56:28.590 --> 00:56:31.760
If you are developing a kernel
extension that's a file system

00:56:31.920 --> 00:56:35.540
or networking kernel extension,
now you have an API to do that,

00:56:35.610 --> 00:56:38.990
a stable KPI,
Kernel Programming Interface.

00:56:39.090 --> 00:56:42.830
But the best thing of all is that
if you develop an application

00:56:42.830 --> 00:56:46.600
that's outside this domain,
that's a standard application,

00:56:46.600 --> 00:56:51.080
document-centric application--
I know there's a large set of you

00:56:51.080 --> 00:56:53.540
who do that-- you have nothing to do.

00:56:53.560 --> 00:56:56.790
All this power is for free.

00:56:58.900 --> 01:00:36.700
[Transcript missing]

01:00:37.050 --> 01:00:42.110
In CF Network, we are constantly adding
support for new protocols.

01:00:42.110 --> 01:00:46.540
We add support for new proxy servers,
new authentication protocols,

01:00:46.540 --> 01:00:50.400
and we always try to be down to
the metal in terms of performance.

01:00:50.400 --> 01:00:55.130
Always try to strive for the
topmost performance with CF Network.

01:00:55.760 --> 01:00:58.610
But the bulk of our work is in WebKit.

01:00:58.770 --> 01:01:02.470
We are doing a number of
things in the WebKit area.

01:01:02.470 --> 01:01:07.740
We're making it easy to access the DOM,
the Document Object Model.

01:01:07.740 --> 01:01:12.800
We are making it easy to write plugins,
plugins APIs.

01:01:12.800 --> 01:01:15.380
All these things have
been seriously revamped.

01:01:15.420 --> 01:01:19.460
But there's one feature
that I want to outline.

01:01:19.460 --> 01:01:23.840
It used to be that
WebKit was rendering HTML.

01:01:23.890 --> 01:01:25.410
What it does now?

01:01:26.110 --> 01:01:31.070
It's editing HTML.

01:01:34.170 --> 01:01:38.100
What I'd like to do is to
re-invite back Christine to do a

01:01:38.100 --> 01:01:41.580
very quick demo of HTML editing.

01:01:41.800 --> 01:01:43.370
Thanks Bertrand.

01:01:43.370 --> 01:01:47.480
So for Tiger we want to make
HTML editing very simple,

01:01:47.480 --> 01:01:51.940
but we also want to provide some
power to enable you to edit complex

01:01:51.940 --> 01:01:54.150
web pages very easily as well.

01:01:54.340 --> 01:01:59.710
So let's go ahead and launch
an application that we

01:02:00.930 --> 01:02:04.380
We wrote using the new WebKit HTML APIs.

01:02:04.460 --> 01:02:06.300
So let's type in some text.

01:02:06.300 --> 01:02:08.220
So let's see.

01:02:09.200 --> 01:02:13.530
Christine, you need a raise.

01:02:13.530 --> 01:02:14.870
Bertrand.

01:02:15.210 --> 01:02:18.790
Okay, so there's just some random text.

01:02:22.170 --> 01:02:27.850
Let me bold that in case
I forget and let me save that.

01:02:28.130 --> 01:02:30.960
So I'll save it to my desktop.

01:02:31.000 --> 01:02:33.370
And I'll save it as urgent.

01:02:35.790 --> 01:02:41.330
And now what I have is, let me drag.

01:02:41.530 --> 01:02:47.970
This is an HTML document.

01:02:47.970 --> 01:02:52.270
You can also see that there's a word
here called race and it is bolded

01:02:52.400 --> 01:02:54.210
because it's surrounded by the B tag.

01:02:54.230 --> 01:03:01.940
So our application created HTML from the
text that I typed from that document.

01:03:02.590 --> 01:03:07.870
So now I mentioned that we also
want to make it easy to edit.

01:03:08.600 --> 01:03:12.700
I'm going to go back here
to edit complex web pages.

01:03:12.720 --> 01:03:16.060
So this is a web page that
you're all familiar with,

01:03:16.060 --> 01:03:17.540
yahoo.com.

01:03:17.540 --> 01:03:25.430
And I would like to-- an insertion
point here-- and just start changing.

01:03:30.110 --> 01:03:34.000
and as you can see, I have live resizing,
updating as I'm typing

01:03:34.000 --> 01:03:35.780
in my modifications.

01:03:35.780 --> 01:03:40.210
This has all been made possible
with the new WebKit HTML APIs that

01:03:40.210 --> 01:03:41.670
we're shipping with Tiger.

01:03:41.710 --> 01:03:44.940
Thanks.

01:03:50.680 --> 01:03:54.760
So we really, really want you to embed
Safari functionality

01:03:54.760 --> 01:03:56.010
into your application.

01:03:56.020 --> 01:03:58.790
You have access to the core
functionality of Safari.

01:03:58.800 --> 01:04:04.370
You can go to any of the layers and you
can use whatever APIs you want there,

01:04:04.370 --> 01:04:06.100
especially WebKit.

01:04:06.460 --> 01:04:09.530
And if you do so,
you will leverage all the investments

01:04:09.530 --> 01:04:11.900
that we are making in those technologies.

01:04:12.010 --> 01:04:15.050
We continue to push forward
as much as we can there.

01:04:15.050 --> 01:04:16.420
And it's not just us.

01:04:16.500 --> 01:04:20.850
It's also the open source world
because we are exchanging all those

01:04:20.850 --> 01:04:26.820
improvements with the open source world,
the portion of WebKit that's open source.

01:04:26.860 --> 01:04:30.140
And last but not least,
the HTML editing that I'm sure

01:04:30.140 --> 01:04:34.200
many of you think already of
leveraging in your application.

01:04:37.030 --> 01:04:41.880
Oh, there's one more thing
about web development.

01:04:42.000 --> 01:04:46.730
This morning you saw Dashboard,
the introduction of Dashboard,

01:04:46.860 --> 01:04:49.800
and Dashboard is instant
access to all your widgets.

01:04:49.800 --> 01:04:51.110
Now, what's a widget?

01:04:51.460 --> 01:04:55.290
Well,
a widget is actually a piece of HTML and

01:04:55.470 --> 01:04:58.780
JavaScript packaged all together.

01:04:59.150 --> 01:05:04.580
In fact, the development environment
for widgets is Safari itself.

01:05:04.660 --> 01:05:08.180
That's how you can test
that your widget runs.

01:05:09.430 --> 01:05:14.180
Not quite, though, because there are some
limitations in HTML.

01:05:14.180 --> 01:05:20.100
If you just limit yourself to the
regular HTML and regular JavaScript,

01:05:20.110 --> 01:05:25.150
you will actually not have the fancy
graphics of the hands of a clock,

01:05:25.210 --> 01:05:27.190
because that's really hard.

01:05:27.200 --> 01:05:30.290
I mean, I guess you could do it
by kind of moving images,

01:05:30.340 --> 01:05:33.690
having a fixed set of images,
but what you really want is

01:05:33.790 --> 01:05:35.740
the full power of quarts there.

01:05:35.740 --> 01:05:39.620
So to address those limitations,
we've added two things, and just two.

01:05:39.620 --> 01:05:43.060
We added a tag,
a property on the image tag that

01:05:43.150 --> 01:05:47.570
enables you to do compositing,
and we added a new class,

01:05:47.580 --> 01:05:52.080
a new JavaScript class that
we call a canvas that enables

01:05:52.080 --> 01:05:54.450
you to render using quarts.

01:05:54.580 --> 01:06:00.490
And with those two things,
the class... can get its hands.

01:06:01.610 --> 01:06:05.820
So we really want you to
develop dashboard widgets.

01:06:05.860 --> 01:06:11.390
We want you to prototype them in Safari,
to use HTML, CSS, cascading style sheets,

01:06:11.390 --> 01:06:14.260
JavaScript, and our two small extensions.

01:06:14.280 --> 01:06:16.220
You can do native plugins.

01:06:16.350 --> 01:06:19.800
So you can really tap into
the APIs of the system,

01:06:19.800 --> 01:06:22.500
like the address API, things like that.

01:06:22.520 --> 01:06:25.720
And it's really easy to develop a widget.

01:06:25.770 --> 01:06:31.800
In fact, it's so easy that we thought we
could have a little bit of fun here.

01:06:31.800 --> 01:06:35.880
I know that many of you will have
come from all over the world,

01:06:35.880 --> 01:06:38.710
like Peru and a few other
countries like that,

01:06:38.860 --> 01:06:40.230
44 countries.

01:06:40.310 --> 01:06:45.280
And you'll go to your hotel room tonight,
and you'll turn on the TV and watch TV.

01:06:45.380 --> 01:06:51.060
Well, what if instead of watching TV,
you were to develop a widget?

01:06:51.200 --> 01:06:59.990
So I'm introducing the WWDC 2004
Dashboard Widget Contest to encourage the

01:06:59.990 --> 01:07:03.300
creation of the best innovative widgets.

01:07:03.300 --> 01:07:04.760
This is how it's going to work.

01:07:04.760 --> 01:07:08.070
It starts now,
and the deadline is Thursday.

01:07:08.160 --> 01:07:11.460
So we believe it's really
easy to develop a widget,

01:07:11.460 --> 01:07:14.390
and that's why we believe we can do that.

01:07:14.740 --> 01:07:17.030
and there's some training
starting tomorrow.

01:07:17.090 --> 01:07:20.490
There's also an SDK that you
have on your DVDs that contains

01:07:20.540 --> 01:07:22.760
information on how to write widgets.

01:07:22.780 --> 01:07:25.280
And there's more details on the web.

01:07:25.290 --> 01:07:30.210
Now to motivate that a little bit,
there's even some prizes.

01:07:31.100 --> 01:07:36.060
15 inch power boot and
for the runner-up an iPod.

01:07:36.060 --> 01:07:37.130
So this should be fun.

01:07:41.080 --> 01:07:44.410
So let me now go to the last topic.

01:07:44.850 --> 01:07:49.740
And it's connected to dashboard because
there's fancy graphics in dashboard.

01:07:49.770 --> 01:07:50.720
And that's quarts.

01:07:50.720 --> 01:07:52.020
That's graphics.

01:07:52.100 --> 01:07:56.440
And who's best to talk about
graphics than Peter Graffagnino,

01:07:56.470 --> 01:08:02.560
who has been providing the vision
for graphics over the last few years?

01:08:02.580 --> 01:08:04.350
Thanks, Bertrand.

01:08:05.800 --> 01:08:10.750
Hi, everybody.

01:08:10.910 --> 01:08:14.520
I wanted to spend a few minutes
today to talk about some kind of

01:08:14.660 --> 01:08:18.480
high-level industry trends that we
see going on in the graphics stack.

01:08:18.560 --> 01:08:20.640
There are going to be a lot of
sessions on the details and the

01:08:20.890 --> 01:08:22.650
low-level APIs we're providing.

01:08:22.790 --> 01:08:26.790
But can I get the slides back, please?

01:08:30.390 --> 01:08:31.700
Thanks.

01:08:31.700 --> 01:08:37.080
But let's go through a
few things we have here.

01:08:37.100 --> 01:08:38.800
I think I might need the other remote.

01:08:38.800 --> 01:08:40.520
Oh, there we go.

01:08:40.580 --> 01:08:45.180
Graphics processing power,
as you may have heard in the keynote,

01:08:45.380 --> 01:08:49.120
has really been exceeding at a
rate greater than Moore's Law.

01:08:49.120 --> 01:08:51.330
I mean,
it's really been quite incredible,

01:08:51.440 --> 01:08:54.370
all the parallelism and the
capabilities of the chips.

01:08:54.580 --> 01:08:57.740
The other thing that's kind of
interesting that's also going along at

01:08:57.780 --> 01:09:01.740
the same time is that these graphics
processors are moving from being sort

01:09:02.120 --> 01:09:07.710
of special purpose game engines to more
general purpose programmable engines.

01:09:07.720 --> 01:09:10.540
So at the same time they're making
all those performance gains,

01:09:10.540 --> 01:09:12.740
they're also becoming
more general purpose.

01:09:12.740 --> 01:09:15.480
And in fact,
there's a whole kind of culture of

01:09:15.480 --> 01:09:20.190
folks who are doing general purpose
computing on graphics processors now.

01:09:20.200 --> 01:09:24.470
Here's a website called GPGPU where
you can learn about doing.

01:09:24.650 --> 01:09:26.990
Services and modeling
computational geometry,

01:09:27.070 --> 01:09:29.280
all kinds of things on
the graphics processor.

01:09:29.340 --> 01:09:33.620
Now, one of the things you might
wonder is how can the graphics?

01:09:33.760 --> 01:09:38.270
How can the graphics processors
be able to continue at this rate?

01:09:38.400 --> 01:09:40.730
What do they know that
the CPU designers don't?

01:09:40.780 --> 01:09:43.330
Well,
the issue is really that their problem

01:09:43.330 --> 01:09:47.190
is much more parallel and to quote
one of the scientists at Nvidia,

01:09:47.250 --> 01:09:50.890
David Kirk, graphics computation is sort
of embarrassingly parallel.

01:09:51.310 --> 01:09:53.540
There's just so much
data to work through.

01:09:53.840 --> 01:09:54.580
That you can.

01:09:54.580 --> 01:09:56.620
Do lots of things at the same time.

01:09:56.620 --> 01:10:00.980
For example, within a pixel you might
have RGBA components.

01:10:01.120 --> 01:10:04.760
So you've got already four
components of parallelism.

01:10:04.760 --> 01:10:08.330
So that's just a floating
point for vector,

01:10:08.430 --> 01:10:10.970
just like a velocity engine.

01:10:11.430 --> 01:10:15.370
Now, what you can do since you're
processing multiple pixels at once,

01:10:15.460 --> 01:10:17.000
you're usually not
just drawing one pixel,

01:10:17.000 --> 01:10:19.400
you're usually drawing a whole bunch.

01:10:19.410 --> 01:10:23.260
The graphics processors actually
process more than one pixel at once.

01:10:23.350 --> 01:10:26.170
So for example, if you have eight pixels
getting processed at once,

01:10:26.200 --> 01:10:29.130
each one with four vectors,
you've basically got 32 floating

01:10:29.130 --> 01:10:32.400
point operations happening per clock.

01:10:32.420 --> 01:10:35.840
And it gets even wilder than that.

01:10:36.120 --> 01:10:40.030
is in the current generations
of chips like the ones announced

01:10:40.040 --> 01:10:43.960
this morning and in recent months,
the processor is actually able to do

01:10:43.960 --> 01:10:47.090
128 floating point operations per clock.

01:10:47.230 --> 01:10:51.370
There's basically a dual issue 16
wide four vector floating point

01:10:51.370 --> 01:10:53.880
operation happening in parallel.

01:10:53.880 --> 01:10:58.340
And because there's all this parallelism,
one of the things that's really

01:10:58.450 --> 01:11:03.860
important is to look at new approaches
to computing because the evaluation

01:11:03.860 --> 01:11:05.670
substrate is radically changing.

01:11:05.680 --> 01:11:10.150
We've got these highly parallel graphics
processors and we've got AlteVac,

01:11:10.150 --> 01:11:14.340
SMP CPUs and a lot of data parallel
architectures coming along.

01:11:14.420 --> 01:11:18.410
So one of the things we wanted
to do with Tiger is try to tame

01:11:18.850 --> 01:11:23.770
this complexity for you and that's
where we get to core imaging.

01:11:23.990 --> 01:11:26.300
Core image,
and here's a picture of the documentation

01:11:26.300 --> 01:11:28.580
which we got ready for you today.

01:11:28.630 --> 01:11:31.670
It's a preliminary version,
but it's a great reference

01:11:31.670 --> 01:11:33.430
if you want to get started.

01:11:33.980 --> 01:11:37.200
Core Image is a GPU-aware
image processing library,

01:11:37.200 --> 01:11:41.420
but it can also process on the CPU.

01:11:41.460 --> 01:11:45.300
It's a floating point data precision,
as you heard this morning.

01:11:45.370 --> 01:11:49.620
The plug-ins-- we have plug-in
architecture called image units.

01:11:49.650 --> 01:11:53.430
And the parallelism in these
algorithms is what we call implicit.

01:11:53.480 --> 01:11:55.270
In other words,
there's not loops and threads.

01:11:55.470 --> 01:11:57.570
It's a stream computation model.

01:11:57.600 --> 01:12:01.160
And let me give you some details
on that so you understand.

01:12:02.300 --> 01:13:17.100
[Transcript missing]

01:13:17.750 --> 01:13:21.620
So another important thing about
core image is deferred evaluation.

01:13:21.670 --> 01:13:25.220
So what happens in this part of
the stream computing model in core

01:13:25.220 --> 01:13:28.940
imaging is an input image gets
passed through processing kernels,

01:13:28.940 --> 01:13:33.000
and no work actually happens until
at the end of the pipeline when

01:13:33.060 --> 01:13:35.880
the final output image is rendered.

01:13:35.880 --> 01:13:40.440
What this allows us to do is do what
we call computational conspiracy.

01:13:40.550 --> 01:13:43.280
So you can imagine two
subsystems in the OS,

01:13:43.280 --> 01:13:46.680
like a video decompression subsystem,
needs to do a color matrix

01:13:46.870 --> 01:13:52.040
correction to get the
NTSC decoding or whatever correct.

01:13:52.100 --> 01:13:56.050
So it gets the source video frame and
puts on a color matrix computation,

01:13:56.210 --> 01:13:59.260
and then passes that image
along down the chain to,

01:13:59.260 --> 01:14:00.940
say, a display subsystem.

01:14:00.940 --> 01:14:02.860
Now no computation has occurred yet.

01:14:02.860 --> 01:14:05.410
We've just sort of annotated
that image and promised that,

01:14:05.480 --> 01:14:08.080
oh yeah,
we're going to add a color matrix to it.

01:14:08.080 --> 01:14:09.800
And then later on,
the video decode system

01:14:09.860 --> 01:14:12.480
can get that image and say,
well, I don't know what's in here now,

01:14:12.480 --> 01:14:14.340
but I know it needs
to be gamma corrected,

01:14:14.340 --> 01:14:17.100
and slap a gamma correct kernel on there.

01:14:17.100 --> 01:14:19.040
And then when finally
the frame gets rendered,

01:14:19.110 --> 01:14:22.260
what happens is the evaluation
system looks at all of these things,

01:14:22.260 --> 01:14:25.520
and in simple cases like this,
will just render one quad

01:14:25.520 --> 01:14:27.120
with the result of the image.

01:14:27.120 --> 01:14:29.640
So this allows us to have a
really modular architecture,

01:14:29.640 --> 01:14:32.440
and not everyone's looping over the
pixels and doing their own thing.

01:14:32.440 --> 01:14:34.780
We can evaluate it all at once.

01:14:34.780 --> 01:14:36.460
So that's a little bit about core image.

01:14:36.460 --> 01:14:39.360
I thought I would just spend
some time kind of motivating

01:14:39.360 --> 01:14:40.570
the architecture in general.

01:14:40.650 --> 01:14:42.360
I think we're starting
to run a little late,

01:14:42.450 --> 01:14:46.800
so I'm going to point you
at our session later on.

01:14:46.800 --> 01:14:49.750
But I'm going to go ahead
and do that this afternoon,

01:14:49.750 --> 01:14:53.520
where you can hear more
details in a second.

01:14:53.530 --> 01:14:55.290
But let me do a quick demo.

01:14:56.400 --> 01:15:02.690
So we have a tool called Quartz Composer,
which we're shipping in a developer DVD.

01:15:03.180 --> 01:15:05.910
which I heard someone installing
as I was waiting to come up here,

01:15:05.920 --> 01:15:08.340
so I know you guys have a disk.

01:15:08.470 --> 01:15:11.080
Let me show you real quick
where the examples are.

01:15:11.270 --> 01:15:14.100
If you go on the desktop,

01:15:14.400 --> 01:15:23.060
two developer examples you will find
towards the bottom Quartz Composer.

01:15:23.080 --> 01:15:25.670
And I'll show you a few
things with Quartz Composer.

01:15:25.770 --> 01:15:28.490
Quartz Composer is a tool-- you'll
hear a lot more about it in other

01:15:28.490 --> 01:15:32.140
sessions and later on today in
Tim Schaaf's talk-- that lets you

01:15:32.140 --> 01:15:36.100
bring together the power of Core Image,
Core Video, and OpenGL and all of the

01:15:36.100 --> 01:15:38.090
various technologies we have.

01:15:38.180 --> 01:15:41.620
So let me show a few things first.

01:15:42.470 --> 01:15:43.540
This is the composition.

01:15:43.540 --> 01:15:44.640
It's a data flow model.

01:15:44.640 --> 01:15:47.840
You've got all the core image units
as well as a bunch of controllers

01:15:47.840 --> 01:15:49.400
like low frequency oscillators.

01:15:49.400 --> 01:15:52.310
And you can kind of,
it's almost a rad tool

01:15:52.440 --> 01:15:54.390
for doing visual stuff.

01:15:54.400 --> 01:15:55.260
It's really fun to play with.

01:15:55.390 --> 01:15:59.280
And this is one of the examples we have
that tells you about Quartz Composer.

01:15:59.400 --> 01:16:01.740
Every tool has to be able
to tell you about itself,

01:16:01.740 --> 01:16:03.390
otherwise it's not a good tool.

01:16:03.500 --> 01:16:09.290
And the background is getting blurred
with core image and then there's a cube.

01:16:09.440 --> 01:16:11.400
I can show you the
composition a little bit here.

01:16:11.400 --> 01:16:18.880
You can see the four bitmaps coming in
into the faces of the cube and those

01:16:19.030 --> 01:16:21.370
were just transparently being rotated.

01:16:21.790 --> 01:16:25.720
Let me show one other demo real quick.

01:16:26.010 --> 01:16:30.520
This is a prototype of kind
of a wedding scene like you

01:16:30.520 --> 01:16:32.400
might see in an iDVD title.

01:16:32.510 --> 01:16:40.890
We've got some video coming through on
a texture using this component here,

01:16:40.900 --> 01:16:44.000
which is basically creating
texture using core video,

01:16:44.150 --> 01:16:47.740
passing it into a background patch,
which I can go inside of,

01:16:47.850 --> 01:16:49.750
and you can see it's
doing various things.

01:16:49.960 --> 01:16:53.390
I get tool tips and I can see what's
happening at the various stages.

01:16:53.480 --> 01:16:56.400
This is actually making
a mask out of the image.

01:16:56.400 --> 01:17:00.260
And this example is not on the DVD,
but there's a bunch

01:17:00.260 --> 01:17:01.400
there you can look at.

01:17:01.400 --> 01:17:05.390
Let me show you one other fun one.

01:17:05.390 --> 01:17:08.400
It's an Apple RSS news feed.

01:17:08.400 --> 01:17:10.400
Actually,
we have an RSS parser component,

01:17:10.400 --> 01:17:12.400
which can read from a URL.

01:17:12.400 --> 01:17:15.990
It's going to read from
Apple Hot News and create some text,

01:17:15.990 --> 01:17:20.400
and the text is going to go downstream
and get put onto bitmaps and textured,

01:17:20.400 --> 01:17:22.390
and you'll see what we have with the...

01:17:24.120 --> 01:17:27.940
With that, this is actually the
RSS feed from apple.com,

01:17:27.940 --> 01:17:30.250
which is kind of cool.

01:17:30.540 --> 01:17:34.260
And there's also a screensaver
you can go look at inside the DVD,

01:17:34.400 --> 01:17:36.560
which does it like this.

01:17:40.500 --> 01:17:49.500
[Transcript missing]

01:17:50.290 --> 01:17:53.130
and I'll try to get you
guys to your next session.

01:17:53.270 --> 01:17:54.250
Quartz Composer.

01:17:54.380 --> 01:17:56.840
So we have a lot of ways to
attack GPU computing in Tiger.

01:17:56.840 --> 01:17:59.180
We're going to be a lot of
sessions at the conference.

01:17:59.250 --> 01:18:01.560
Hear them all come to our lab.

01:18:01.630 --> 01:18:04.790
And most importantly,
come to Tim's talk at 5 o'clock

01:18:05.280 --> 01:18:08.720
to hear about how we're layering
all of the-- both core audio,

01:18:08.720 --> 01:18:12.190
core video, core image, core graphics,
OpenGL, QuickTime,

01:18:12.200 --> 01:18:14.580
everything all together
in some really cool stuff.

01:18:14.720 --> 01:18:16.620
So anyway, that's all I had.

01:18:16.690 --> 01:18:20.390
Let me just remind you to join the
GPU computing revolution and take

01:18:20.390 --> 01:18:24.590
all the great tools we have in
Tiger and build the next killer app.

01:18:24.680 --> 01:18:25.960
Thanks a lot.

01:18:26.010 --> 01:18:28.020
Thanks, Peter.

01:18:33.550 --> 01:18:36.870
So we've covered six of
the major areas of TIGER,

01:18:36.870 --> 01:18:38.760
but of course there's a lot more.

01:18:38.820 --> 01:18:42.130
I, for example,
did not mention development tools,

01:18:42.130 --> 01:18:45.640
and we have a lot of really
interesting stuff in the tools,

01:18:45.770 --> 01:18:47.850
but I want to leave that
to the next session,

01:18:47.850 --> 01:18:50.220
that's just in a few minutes.

01:18:50.220 --> 01:18:55.140
And I did not go over the usual, okay,
let's talk about Carbon and let's talk

01:18:55.140 --> 01:18:57.580
about Cocoa and all the other frameworks.

01:18:57.580 --> 01:19:01.160
Now, we are continuing to invest
heavily in those frameworks,

01:19:01.180 --> 01:19:05.240
but there's about like 200 sessions
that talk about all those things,

01:19:05.410 --> 01:19:08.380
so I wanted to leave
something for those sessions.

01:19:08.380 --> 01:19:12.300
Altogether,
we have a great platform for innovation,

01:19:12.400 --> 01:19:16.600
and we really hope that you are going
to develop great innovation on top

01:19:16.600 --> 01:19:19.140
of the platforms that we provide.

01:19:19.200 --> 01:19:22.560
I want to remind you that we've
been through an operating system

01:19:22.560 --> 01:19:26.780
transition over the last few years,
a successful transition,

01:19:26.780 --> 01:19:29.200
that's the animals on that side.

01:19:29.200 --> 01:19:30.200
And I'm going to end with a few words.

01:19:30.200 --> 01:19:30.220
Thank you.

01:19:30.220 --> 01:19:30.240
Thank you.

01:19:30.240 --> 01:19:30.260
Thank you.

01:19:30.260 --> 01:19:30.300
Thank you.

01:19:30.300 --> 01:19:30.340
Thank you.

01:19:30.400 --> 01:19:35.380
Also,
I hope that you are enjoying the DVD.

01:19:35.380 --> 01:19:39.380
I saw a number of you
already installed the DVD.

01:19:39.420 --> 01:19:43.120
It is pre-release software
but I've been running it and

01:19:43.120 --> 01:19:45.280
I think it runs pretty great.

01:19:45.690 --> 01:19:49.180
There's still a lot of time before
it's shipping because this time the

01:19:49.180 --> 01:19:51.400
development cycle is a little longer.

01:19:51.440 --> 01:19:56.200
We will ship next year so we are a little
not as advanced in the development cycle.

01:19:56.580 --> 01:20:00.120
However, I still believe it's a great
DVD and it's a great release.

01:20:00.120 --> 01:20:03.420
We worked really hard for you
to get it in your hands today.

01:20:03.420 --> 01:20:07.370
And I think overall,
Tiger promises to be a great release.

01:20:07.370 --> 01:20:08.290
Thank you.