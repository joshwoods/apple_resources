WEBVTT

00:00:21.230 --> 00:00:23.350
Good morning.

00:00:23.410 --> 00:00:25.980
I'm Guy Fullerton,
manager of the high-level toolbox,

00:00:25.980 --> 00:00:26.680
Xleaf Node.

00:00:26.680 --> 00:00:30.810
Hello, my name is Mike Engber,
and I'm an engineer in the Cocoa group.

00:00:30.820 --> 00:00:34.080
And just to make things more confusing,
we're going to change sides now.

00:00:37.980 --> 00:00:41.270
So hopefully everybody got a chance to
see the voiceover session yesterday.

00:00:41.350 --> 00:00:45.050
And hopefully you got a really good feel
about how important accessibility is

00:00:45.080 --> 00:00:47.400
to Mac OS X and how powerful it can be.

00:00:47.470 --> 00:00:49.480
So in this session,
we're going to build on yesterday's

00:00:49.490 --> 00:00:52.200
session and describe some of
the implementation details you

00:00:52.200 --> 00:00:55.360
need to go through with your
applications to make them accessible.

00:00:55.370 --> 00:00:58.150
We're going to give you a
brief architectural overview

00:00:58.150 --> 00:00:59.700
of how accessibility works.

00:00:59.860 --> 00:01:02.470
We're going to talk about how to
accessorize two types of widgets.

00:01:02.540 --> 00:01:05.050
We're going to tell you how to
add stuff to a standard widget,

00:01:05.060 --> 00:01:07.900
augment it with a few extra things
you might want to augment it with.

00:01:07.910 --> 00:01:11.320
And then we're going to tell you how
to accessorize a custom widget that

00:01:11.320 --> 00:01:12.760
derives from one of our standard ones.

00:01:12.950 --> 00:01:15.930
And finally, we're going to have a long
section on troubleshooting and

00:01:15.930 --> 00:01:19.940
giving you tips and tricks for
accessorizing your application.

00:01:20.670 --> 00:01:24.000
So I think Mike's going to start
out with the conceptual overview.

00:01:24.050 --> 00:01:28.640
Okay, so before we get into the details
on what you need to do to make your

00:01:28.650 --> 00:01:32.200
applications work with accessibility,
I'm going to give you a little bit of

00:01:32.200 --> 00:01:35.700
background on the Accessibility APIs.

00:01:38.970 --> 00:01:41.560
So when we talk about
the Accessibility APIs,

00:01:41.600 --> 00:01:44.610
there are really three
things to consider.

00:01:44.870 --> 00:01:47.400
First, there's the Accessibility
APIs themselves.

00:01:47.400 --> 00:01:50.640
And in this slide,
they're shown with the green box.

00:01:50.670 --> 00:01:54.500
And these are the APIs that we
introduced back in Jaguar and that

00:01:54.500 --> 00:01:59.060
assistive apps use to examine the
user interface and interact with

00:01:59.160 --> 00:02:01.680
other applications on the system.

00:02:02.190 --> 00:02:05.440
The second part of the story are
the assistive apps themselves.

00:02:05.650 --> 00:02:10.080
And those of you who went to
session 424 yesterday got to see a

00:02:10.110 --> 00:02:14.700
prime example of an assistive app,
which was VoiceOver.

00:02:15.060 --> 00:02:19.500
And the third part of the story are
the Cocoa apps and the Carbon apps,

00:02:19.500 --> 00:02:22.720
which the assistive apps examine.

00:02:22.800 --> 00:02:24.680
And that's what we're going
to be focusing on today,

00:02:24.680 --> 00:02:28.330
specifically what you need to do to
make sure that your application works

00:02:28.660 --> 00:02:32.410
properly with the Accessibility APIs.

00:02:32.610 --> 00:02:36.000
Now one thing to bear in mind,
even though we talk a lot about

00:02:36.110 --> 00:02:38.950
VoiceOver as being a prime
example as an assistive app,

00:02:39.100 --> 00:02:42.900
nothing in this presentation
is specific to VoiceOver.

00:02:43.170 --> 00:02:47.320
The things you do here are going to
enable your application to work with all

00:02:47.320 --> 00:02:51.540
kinds of different assistive apps that
have been developed for the Macintosh OS.

00:02:55.470 --> 00:02:58.720
Now this slide is an abstract
representation of an assistive app

00:02:58.840 --> 00:03:03.340
trying to examine the user interface
of either a Cocoa app or a Carbon app.

00:03:03.400 --> 00:03:09.040
And the question marks show one of the
key design problems that we had to make

00:03:09.100 --> 00:03:11.700
a decision on when developing these APIs.

00:03:11.750 --> 00:03:15.050
How are the applications
going to represent their user

00:03:15.050 --> 00:03:17.220
interface to the assistive app?

00:03:17.660 --> 00:03:22.810
Now, an obvious choice would be
to use the natural way each

00:03:22.810 --> 00:03:26.000
application implements its objects.

00:03:26.200 --> 00:03:29.420
So in a Cocoa app,
that's NSWindows and NSControls.

00:03:29.640 --> 00:03:33.980
And for a Carbon app,
that's WindowRefs and ControlRefs.

00:03:34.450 --> 00:03:37.020
But the problem with doing it
this way is it puts an extra

00:03:37.190 --> 00:03:38.360
burden on the assistive app.

00:03:38.710 --> 00:03:40.360
You have to do twice as much code.

00:03:40.360 --> 00:03:44.250
You have to have one set of code
that knows the Cocoa objects,

00:03:44.250 --> 00:03:47.440
and then you have to have another set of
code that understands the Carbon objects.

00:03:47.480 --> 00:03:52.310
And the situation only gets worse if we
introduce other frameworks into the mix.

00:03:57.250 --> 00:03:59.940
So in this slide,
we outline our solution.

00:04:00.070 --> 00:04:04.960
And the basic way we represent
the user interface is through

00:04:05.030 --> 00:04:06.680
something called a UI element.

00:04:06.740 --> 00:04:07.990
Everything's a UI element.

00:04:08.150 --> 00:04:09.390
Windows are UI elements.

00:04:09.620 --> 00:04:10.660
Buttons are UI elements.

00:04:10.850 --> 00:04:14.180
Even the application
itself is a UI element.

00:04:14.330 --> 00:04:20.330
So both Cocoa apps and Carbon apps
are going to return to the through

00:04:20.330 --> 00:04:26.610
the Accessibility APIs their
UI represented as a bunch of UI elements.

00:04:31.640 --> 00:04:35.590
So, to summarize,
a UI element is an abstract

00:04:35.680 --> 00:04:40.390
object we use to represent a
part of the user interface.

00:04:40.670 --> 00:04:46.790
And the applications represent themselves
as a whole hierarchy of UI elements.

00:04:46.890 --> 00:04:52.100
Assistive apps will look at a
UI element which has attributes.

00:04:52.160 --> 00:04:54.350
And the assistive app can
use these attributes to get

00:04:54.350 --> 00:04:56.000
information about the UI element.

00:04:56.080 --> 00:04:59.860
For example, its title or its value,
or it could use the children

00:04:59.860 --> 00:05:04.240
attribute in order to start traversing
the hierarchy of UI elements.

00:05:04.870 --> 00:05:08.620
UI elements also support actions,
and these are what assistive apps

00:05:08.800 --> 00:05:11.190
use to actually drive applications.

00:05:11.190 --> 00:05:16.150
For instance, to press a button or
to increment a slider.

00:05:18.380 --> 00:05:23.600
So to sort of bring these concepts alive,
Guy is going to demonstrate one

00:05:23.600 --> 00:05:27.900
of our tools called Accessibility
Inspector and do a live demonstration

00:05:28.020 --> 00:05:31.850
of inspecting one text edit.

00:05:32.540 --> 00:05:35.030
Yeah, so if I could have the
second computer please.

00:05:41.800 --> 00:05:42.300
Perfect.

00:05:42.300 --> 00:05:43.360
Thank you.

00:05:43.360 --> 00:05:44.350
All right.

00:05:44.350 --> 00:05:47.260
So what I have running here is TextEdit,
and I've got a document open that

00:05:47.260 --> 00:05:49.620
has just a little bit of text in it.

00:05:49.750 --> 00:05:52.560
And I'm going to run the
Accessibility Inspector application,

00:05:52.560 --> 00:05:55.400
which is part of the
developer's Tools install.

00:05:55.420 --> 00:05:57.540
And when I run the
Accessibility Inspector,

00:05:57.540 --> 00:06:01.440
you get this floating window that
describes whatever the mouse is over.

00:06:01.440 --> 00:06:03.800
Now, by default,
the font size is really small,

00:06:03.800 --> 00:06:06.060
and I can see it fine,
but something tells me you won't be

00:06:06.060 --> 00:06:07.840
able to read it unless I make it bigger.

00:06:07.850 --> 00:06:09.240
That should be okay.

00:06:09.240 --> 00:06:12.900
So now as I move my mouse around the
screen and point at different things,

00:06:12.900 --> 00:06:15.920
the Accessibility Inspector updates
with information about each of

00:06:15.920 --> 00:06:17.500
the elements that I roll over.

00:06:17.500 --> 00:06:21.970
So if I stop on this text area,
for example, you can see the hierarchy

00:06:22.030 --> 00:06:23.450
that contains that text area.

00:06:23.590 --> 00:06:26.860
It's inside the application TextEdit,
inside the window Document,

00:06:26.870 --> 00:06:30.830
inside a scroll area, inside a text area,
and then it's a link.

00:06:30.890 --> 00:06:33.290
As you can see in the Attributes section,
there's a number of

00:06:33.290 --> 00:06:34.330
attributes it supports.

00:06:34.440 --> 00:06:36.280
It's got a role, ax-link.

00:06:36.390 --> 00:06:39.460
It has a role description,
which looks like it's a bug,

00:06:39.460 --> 00:06:40.310
to tell you the truth.

00:06:40.520 --> 00:06:42.490
It's got a sub-role,
and it's got a parent,

00:06:42.700 --> 00:06:45.100
various other pieces of
information about it.

00:06:45.100 --> 00:06:47.500
And of course,
the attributes that an element

00:06:47.500 --> 00:06:49.900
supports varies based on the element.

00:06:49.900 --> 00:06:52.980
So if I go and hover over a push button,
you can see a different

00:06:52.980 --> 00:06:55.800
set of attributes,
and even some actions in this case.

00:06:55.830 --> 00:06:58.440
One cool thing that the
Accessibility Inspector can

00:06:58.540 --> 00:07:00.680
do is lock onto a UI element.

00:07:00.800 --> 00:07:04.800
So if I press F5,
you see the text in the Inspector go red,

00:07:04.800 --> 00:07:06.800
and you see another
floating window appear.

00:07:06.800 --> 00:07:08.600
And now when I move the mouse,
the text in the

00:07:08.600 --> 00:07:10.000
Inspector no longer updates.

00:07:10.000 --> 00:07:12.100
So I'm locked onto the UI element,
and I'm locked on that push button,

00:07:12.100 --> 00:07:14.100
which lets me do a couple
really cool things.

00:07:14.100 --> 00:07:16.850
The first thing is I can potentially
manipulate other parts of the

00:07:16.930 --> 00:07:19.550
UI with my mouse without disrupting
what the Inspector's showing.

00:07:19.600 --> 00:07:23.310
But the second cool thing I can
do is potentially go up and

00:07:23.310 --> 00:07:25.100
down the containment hierarchy.

00:07:25.100 --> 00:07:28.600
In the second window that shows up,
there's a Go To menu,

00:07:28.600 --> 00:07:31.070
and I can choose other things
from within that Go To menu.

00:07:31.120 --> 00:07:33.680
I can go to the button's parent,
which is the Preferences

00:07:33.680 --> 00:07:34.600
window as a whole.

00:07:34.600 --> 00:07:40.200
Now this is really important if you need
to get to an element in your application

00:07:40.200 --> 00:07:45.200
because you don't really have much of a
visible UI widget that you can point at,

00:07:45.300 --> 00:07:47.200
but you can point to some child of that.

00:07:47.200 --> 00:07:49.700
So if you can point to a child of it,
you can continually traverse up

00:07:49.700 --> 00:07:52.700
the parent hierarchy until you
get to the element you want.

00:07:52.700 --> 00:07:55.200
Not only can you go up,
but you can also go down.

00:07:55.200 --> 00:07:58.200
So now that I'm looking at the
Preferences window element,

00:07:58.200 --> 00:08:00.250
I bring up the Go To menu,
and I can see that there's

00:08:00.250 --> 00:08:01.190
a list of children.

00:08:01.230 --> 00:08:03.700
So I can go to any of these groups,
and from within those groups,

00:08:03.740 --> 00:08:06.700
go into the children of the group,
and so I can find all kinds of

00:08:06.700 --> 00:08:08.690
different things out about elements.

00:08:08.710 --> 00:08:09.800
So let's go ahead and
get back to the button,

00:08:09.810 --> 00:08:10.660
real quick.

00:08:10.800 --> 00:08:12.800
I want to show you another
cool thing you can do.

00:08:12.960 --> 00:08:18.010
So also in this secondary window,
there's a pop-up with all of the-- let

00:08:18.010 --> 00:08:22.800
me bring this up a little bit-- all of
the attributes that the button supports.

00:08:22.800 --> 00:08:25.800
So you can choose one,
and it changes the little value

00:08:25.800 --> 00:08:29.790
in the text area here to represent
the value for that attribute.

00:08:29.840 --> 00:08:31.300
Now this doesn't show it really well.

00:08:31.300 --> 00:08:32.800
Let me see if I can find one here.

00:08:32.800 --> 00:08:35.490
If I lock onto a text field,

00:08:37.310 --> 00:08:41.920
Indeed, I am in a text field
and I choose the value.

00:08:42.180 --> 00:08:44.400
Actually, when I pop up this menu,
you can see that there's a

00:08:44.400 --> 00:08:45.790
W next to the AX value attribute.

00:08:46.060 --> 00:08:47.860
That means the value is writable.

00:08:48.110 --> 00:08:51.200
So now,
when I choose value from the pop-up,

00:08:51.220 --> 00:08:57.470
you can see that the text is now
writable inside the secondary window

00:08:57.470 --> 00:09:00.910
and I can change that to say 80,
press set value, and you see it actually

00:09:00.910 --> 00:09:00.910
updates in the interface.

00:09:01.100 --> 00:09:02.830
Another cool thing you can do
with the secondary window is

00:09:02.830 --> 00:09:04.000
click the highlight checkbox.

00:09:04.000 --> 00:09:08.240
This is an easy way that you can test to
make sure the size and position you're

00:09:08.240 --> 00:09:09.520
returning for an element is correct.

00:09:09.540 --> 00:09:13.530
So I've locked onto this text field
and when I click highlight you get

00:09:13.530 --> 00:09:17.090
that pink window that shows what
you're highlighting or the bounds

00:09:17.090 --> 00:09:18.330
of the thing you're highlighting.

00:09:18.340 --> 00:09:21.620
And in fact highlight sort of
stays on once you've clicked it.

00:09:21.680 --> 00:09:23.170
You can click it again to turn it off.

00:09:23.230 --> 00:09:26.710
But the cool part about that is
you can hit F5 again to unlock,

00:09:26.710 --> 00:09:30.250
go point at some other object,
and it now highlights that other object.

00:09:30.260 --> 00:09:32.970
So it's really good for testing
those kinds of problems,

00:09:32.970 --> 00:09:34.420
bounds related problems.

00:09:34.420 --> 00:09:36.230
Let's go back to the button
again because there's one

00:09:36.230 --> 00:09:37.400
more thing I want to show you.

00:09:37.490 --> 00:09:38.920
Don't need the highlight anymore.

00:09:39.020 --> 00:09:42.420
Alright, so I hovered over the button and
it's revert to default settings.

00:09:42.480 --> 00:09:45.020
And you see that I had already
changed the window width to 75.

00:09:45.020 --> 00:09:46.960
So I've already varied from the default.

00:09:47.040 --> 00:09:49.460
Another thing in the secondary
window is a set of actions

00:09:49.460 --> 00:09:50.810
that an element supports.

00:09:50.880 --> 00:09:53.220
Buttons support a press action
because you can press buttons.

00:09:53.240 --> 00:09:56.050
And the cool thing about the palette
is I can perform that action.

00:09:56.130 --> 00:09:59.900
And when I perform that action you see
the revert button actually flash and then

00:09:59.900 --> 00:10:02.120
the window width gets updated back to 75.

00:10:02.190 --> 00:10:04.480
So Accessibility Inspector is
a really powerful tool.

00:10:04.590 --> 00:10:07.720
Probably the most common tool
you'll use when you're accessorizing

00:10:07.720 --> 00:10:10.920
your application to test that
you're doing things correctly.

00:10:11.010 --> 00:10:13.440
So I'd like to go back to slides now.

00:10:21.580 --> 00:10:23.180
So that's a brief overview
of one of the tools.

00:10:23.320 --> 00:10:25.880
So now it's time to dive down into the
nitty gritty of how you can sort of

00:10:25.880 --> 00:10:28.200
implement this in your own applications.

00:10:28.260 --> 00:10:31.640
But some of you are probably wondering,
how hard is this going to be?

00:10:31.690 --> 00:10:36.320
So we have this fancy little chart
here that can illustrate that for you.

00:10:36.380 --> 00:10:41.220
OK, colors and jokes aside,
the basic principle is the

00:10:41.220 --> 00:10:43.880
more standard stuff you use,
the far easier it is

00:10:43.880 --> 00:10:45.090
to become accessible.

00:10:45.230 --> 00:10:47.770
The more custom stuff you use,
the more work you have to

00:10:47.770 --> 00:10:49.300
spend making it accessible.

00:10:49.300 --> 00:10:51.550
And that's just, you know,
it's regardless of whether you're

00:10:51.550 --> 00:10:53.000
a Cocoa app or a Carbon app.

00:10:53.000 --> 00:10:56.390
For example, if you're a modern Cocoa app
or a modern Carbon app that's

00:10:56.390 --> 00:11:00.250
based on HIV and compositing,
it's really, really easy to accessorize

00:11:00.250 --> 00:11:01.540
that application.

00:11:01.540 --> 00:11:04.220
But most apps can't use just
the standard system widgets,

00:11:04.220 --> 00:11:04.720
right?

00:11:04.760 --> 00:11:06.610
Most apps have a few custom things.

00:11:06.680 --> 00:11:08.760
And so those apps, you know,
they'll need to do a little bit more

00:11:08.760 --> 00:11:10.800
work to accessorize those custom widgets.

00:11:10.860 --> 00:11:12.150
And that's not too tough either.

00:11:12.270 --> 00:11:15.410
The real problem case is when you're
at the far other end of the spectrum

00:11:15.600 --> 00:11:18.600
and you're a completely custom
app doing all kinds of old stuff.

00:11:18.670 --> 00:11:21.350
Let's say you're on a really old
class library and you ported your

00:11:21.350 --> 00:11:24.900
application to 10 and made it run,
but it's not using the very modern

00:11:24.900 --> 00:11:26.640
technologies of either framework.

00:11:26.680 --> 00:11:28.190
Well,
that's going to be really challenging

00:11:28.190 --> 00:11:30.130
to accessorize because you're
pretty much going to need to

00:11:30.130 --> 00:11:33.030
add accessibility information to
everything in your interface except

00:11:33.030 --> 00:11:35.240
for the few standard widgets you use.

00:11:35.270 --> 00:11:39.960
So the take home is really maybe this
is the time not just to accessorize

00:11:40.070 --> 00:11:43.680
but to adopt other Apple technology
like HIV in your application.

00:11:43.790 --> 00:11:46.540
Sure, it's going to take a little
bit of effort to adopt HIV,

00:11:46.540 --> 00:11:47.980
but that effort is going
to pay off in two ways.

00:11:48.020 --> 00:11:50.480
You're going to get a bunch
of other benefits from HIV,

00:11:50.480 --> 00:11:52.200
and of course it's going
to make your accessibility

00:11:52.200 --> 00:11:53.980
implementation a lot easier as well.

00:11:53.980 --> 00:11:57.940
So you should seriously consider that
when you're accessorizing your apps.

00:11:58.790 --> 00:12:00.700
Okay, so I showed you some
attributes in the Inspector,

00:12:00.700 --> 00:12:03.340
but let's talk a little bit
more about some of them.

00:12:03.480 --> 00:12:07.100
So fundamentally,
attributes provide information

00:12:07.150 --> 00:12:11.250
to an accessible application
about the elements in your app.

00:12:11.340 --> 00:12:15.350
And an assistive application will want
to make four main requests of your

00:12:15.350 --> 00:12:17.100
app with respect to its attributes.

00:12:17.150 --> 00:12:19.600
Given an element,
an assistive app needs to know what

00:12:19.680 --> 00:12:21.720
attributes does that element support.

00:12:21.840 --> 00:12:24.300
It might want to get the
values of certain attributes.

00:12:24.330 --> 00:12:26.500
And of course, it'll want to see if an
attribute is settable.

00:12:26.520 --> 00:12:29.500
And if it's settable,
it's going to want to set the attribute.

00:12:29.500 --> 00:12:31.690
Now all of the attributes,
at least all the standard attributes,

00:12:31.690 --> 00:12:34.710
can be seen in the HI Services header
I've put on the slide.

00:12:34.810 --> 00:12:37.630
But when you open that header,
don't be scared by the sheer

00:12:37.670 --> 00:12:38.990
quantity of attributes in there.

00:12:39.000 --> 00:12:39.530
There's a lot.

00:12:39.620 --> 00:12:41.990
There's dozens and dozens and dozens.

00:12:42.000 --> 00:12:45.190
Don't let that make you think
it's really hard to accessorize.

00:12:45.210 --> 00:12:48.200
Most elements only support a
small handful of attributes.

00:12:48.200 --> 00:12:51.300
As I was showing in the Inspector,
you know, push buttons have about 10.

00:12:51.300 --> 00:12:52.790
Various other things might have about 15.

00:12:52.800 --> 00:12:53.770
So it's really not that tough.

00:12:53.820 --> 00:12:55.900
So don't feel daunted when
you open up the header.

00:12:58.210 --> 00:13:01.080
So I want to talk about some of
the very most common attributes

00:13:01.150 --> 00:13:04.210
that you're going to have to use
and you're going to come across.

00:13:04.330 --> 00:13:06.630
The most fundamental
attribute is the role.

00:13:06.810 --> 00:13:08.840
Every element must have a role.

00:13:08.900 --> 00:13:11.530
A role describes an
element's basic purpose.

00:13:11.660 --> 00:13:15.590
And in fact, a role is what an assistive
application uses to determine how

00:13:15.590 --> 00:13:18.800
it should present this interface
to the user in some other way.

00:13:18.800 --> 00:13:21.160
VoiceOver, for example,
when it sees a button,

00:13:21.320 --> 00:13:24.100
it knows the button's got certain
properties associated with it.

00:13:24.100 --> 00:13:27.740
And it knows it can communicate
with the user in a certain very

00:13:27.740 --> 00:13:29.810
specific way about the button.

00:13:30.990 --> 00:13:33.620
However,
an assistive application can't use that

00:13:33.700 --> 00:13:38.630
role as sort of a spoken description
to the user about what the element is,

00:13:38.690 --> 00:13:42.340
because mainly the role
strings are prefixed with AX,

00:13:42.390 --> 00:13:44.100
and they're just there to
be sort of switched on at

00:13:44.100 --> 00:13:45.360
runtime by the application.

00:13:45.450 --> 00:13:49.430
So if an assistive application
wants to present a human readable

00:13:49.460 --> 00:13:54.730
representation of that role's purpose,
it uses the role description attribute,

00:13:54.730 --> 00:13:57.900
which is a localized string that
can be spoken to the user or

00:13:57.900 --> 00:13:57.900
shown to the user in some fashion.

00:13:58.620 --> 00:14:02.340
Now another really common
attribute is the title attribute.

00:14:02.340 --> 00:14:04.020
It's generally obvious when to use this.

00:14:04.020 --> 00:14:07.710
The "Don't Apply" button up there,
its title is "Don't Apply."

00:14:07.710 --> 00:14:10.590
The checkboxes in the other window,
the title's right next to them.

00:14:10.590 --> 00:14:11.430
Those are pretty easy.

00:14:11.430 --> 00:14:15.640
But the thing to realize is that the
title attribute is only for visible text.

00:14:15.780 --> 00:14:18.330
Don't try to put a title in
place for a push button that

00:14:18.330 --> 00:14:19.570
just has a picture on it.

00:14:19.570 --> 00:14:20.950
That doesn't make sense.

00:14:21.010 --> 00:14:24.260
The assistive applications assume
that if there is a title attribute,

00:14:24.470 --> 00:14:27.100
there is visible text
associated with that element.

00:14:27.110 --> 00:14:29.990
If you have an icon button,
there are other ways to provide

00:14:29.990 --> 00:14:32.430
information to an assistive app,
and we'll cover that a little bit later.

00:14:35.150 --> 00:14:37.500
Another really common attribute
is the value attribute.

00:14:37.670 --> 00:14:39.690
Again, this is self-explanatory
for the most part,

00:14:39.700 --> 00:14:43.190
but there's a really cool aspect,
and that is that,

00:14:43.300 --> 00:14:46.300
unlike a lot of other attributes,
the value attribute can

00:14:46.300 --> 00:14:47.700
be of just about any type.

00:14:47.700 --> 00:14:49.480
Of course,
the type depends on the role of

00:14:49.480 --> 00:14:51.400
the element you're talking about.

00:14:51.400 --> 00:14:54.570
The checkboxes on the furthest
back window there on the screen,

00:14:54.600 --> 00:14:56.400
they're going to have a
value that's a number,

00:14:56.400 --> 00:15:00.690
and it's going to be either zero or one
based on whether the checkbox is checked.

00:15:00.780 --> 00:15:03.770
By contrast, the text field on the
terminal info window,

00:15:04.070 --> 00:15:07.450
its value is the text inside the field,
and that's going to be

00:15:07.450 --> 00:15:09.450
a CFStringRef generally,
possibly some slightly

00:15:09.450 --> 00:15:10.700
different representation.

00:15:10.700 --> 00:15:12.790
But again,
it's two completely different data

00:15:12.790 --> 00:15:17.700
types that depend on the role of
the element you're talking about.

00:15:17.880 --> 00:15:21.490
Now, as Mike said,
elements are hierarchically organized

00:15:21.500 --> 00:15:23.490
within an accessible application.

00:15:23.500 --> 00:15:27.320
You've got an application that has,
as children, probably a menu bar,

00:15:27.450 --> 00:15:29.570
several windows,
and each of those windows are

00:15:29.570 --> 00:15:32.060
going to have child elements that
are various views and buttons and

00:15:32.060 --> 00:15:32.800
things like that within the window.

00:15:32.800 --> 00:15:33.890
And then, of course,
the other thing that's going

00:15:33.900 --> 00:15:34.890
to be a parent element.

00:15:35.040 --> 00:15:36.890
So every element has a parent.

00:15:36.940 --> 00:15:38.170
Now, that's not technically true.

00:15:38.230 --> 00:15:40.000
There is one element that
doesn't have a parent,

00:15:40.060 --> 00:15:42.650
but that's something that we write,
so you'll never need to worry

00:15:42.650 --> 00:15:44.100
about that in your applications.

00:15:44.210 --> 00:15:46.560
So for your purposes,
just remember that every

00:15:46.560 --> 00:15:48.530
element has a parent.

00:15:48.820 --> 00:15:51.490
The children attribute, however,
are not necessarily

00:15:51.490 --> 00:15:53.070
supported by every element.

00:15:53.190 --> 00:15:57.820
The children attribute only needs
to be supported for elements that

00:15:57.920 --> 00:15:59.790
obviously contain other elements.

00:15:59.880 --> 00:16:01.260
A window is going to have children.

00:16:01.300 --> 00:16:03.420
It's going to be the
views within the window.

00:16:03.520 --> 00:16:05.700
But a push button, for example,
doesn't have children.

00:16:05.700 --> 00:16:08.520
It doesn't make sense because
the text in the button is

00:16:08.520 --> 00:16:10.580
already represented as its title.

00:16:12.870 --> 00:16:15.020
So Mike is now going to take
you through the easiest case of

00:16:15.020 --> 00:16:16.800
accessorizing an application.

00:16:16.800 --> 00:16:17.800
Okay.

00:16:18.000 --> 00:16:21.800
So as Guy said,
if you stick to the standard widgets,

00:16:21.800 --> 00:16:24.800
you're going to get most of
your accessibility for free.

00:16:24.800 --> 00:16:27.440
And in fact,
all the attributes Guy was just talking

00:16:27.550 --> 00:16:31.060
about are things that the frameworks,
you know, either Cocoa or Carbon are

00:16:31.060 --> 00:16:32.800
going to provide for you.

00:16:32.800 --> 00:16:34.800
And there's lots of other attributes
like the position and size,

00:16:34.800 --> 00:16:37.960
which he didn't go over,
that the frameworks are

00:16:37.960 --> 00:16:39.350
going to provide for you.

00:16:40.260 --> 00:16:43.400
But there are some things
that we can't figure out.

00:16:43.400 --> 00:16:46.000
And the example Guy gave
of a graphical button,

00:16:46.000 --> 00:16:50.320
a button that just has a picture in it,
is one case where we cannot

00:16:50.440 --> 00:16:52.330
figure out what that button means.

00:16:52.540 --> 00:16:54.650
And that's what we're going to
discuss in the next few slides.

00:16:54.730 --> 00:17:00.280
A handful of attributes that you're going
to need to implement because there's

00:17:00.460 --> 00:17:04.810
just not enough information for us to
provide them at the framework level.

00:17:09.410 --> 00:17:11.500
So the first of the,
for lack of a better name,

00:17:11.500 --> 00:17:13.400
I'm going to call these
instance attributes.

00:17:13.540 --> 00:17:16.740
And that's because you have
to go in by hand and for each

00:17:16.740 --> 00:17:21.420
instance of these kind of widgets,
you're going to have to provide

00:17:21.420 --> 00:17:23.450
this sort of information for us.

00:17:23.520 --> 00:17:27.410
And the first one I want to
talk about is the description.

00:17:28.010 --> 00:17:33.250
Now the description is a string
that describes what a widget does,

00:17:33.420 --> 00:17:35.650
but it doesn't describe
what the widget is.

00:17:35.710 --> 00:17:37.240
Now let me reiterate that.

00:17:37.350 --> 00:17:39.520
It describes what the widget does.

00:17:39.680 --> 00:17:42.400
What the widget is is
covered by the role.

00:17:42.480 --> 00:17:45.670
And so, for instance,
a button is known to be a button

00:17:45.780 --> 00:17:47.900
because of the role attribute.

00:17:48.110 --> 00:17:52.980
And if this button happens to
cause the text to be left aligned,

00:17:53.210 --> 00:17:57.440
That's the information we want to be
provided by the description attribute.

00:18:00.950 --> 00:18:04.090
So if we take a look
at the DVD controller,

00:18:04.260 --> 00:18:09.340
we can see that a lot of the
buttons there don't have any text.

00:18:09.350 --> 00:18:12.060
And so in this case,
the assistive app is going to rely on you

00:18:12.060 --> 00:18:13.870
to provide a description of what they do.

00:18:13.930 --> 00:18:17.390
Otherwise, all it's going to know
is that this is a button.

00:18:17.630 --> 00:18:22.250
And the users, you know,
will be able to press it,

00:18:22.250 --> 00:18:25.660
but they'll have no way to figure
out in advance of pressing it

00:18:25.660 --> 00:18:25.660
what the heck it's going to do.

00:18:27.030 --> 00:18:31.300
Now even buttons that have titles
are sometimes hard to figure out.

00:18:31.450 --> 00:18:33.140
Take a look at the calculator.

00:18:33.270 --> 00:18:37.360
All the buttons there have a title,
but a good percentage of those titles

00:18:37.410 --> 00:18:40.400
aren't particularly informative.

00:18:41.590 --> 00:18:47.000
So for instance, you know,
the MC button or the period button.

00:18:47.200 --> 00:18:49.230
You know,
if you don't provide a description,

00:18:49.360 --> 00:18:53.010
it's going to be pretty mysterious
as to what these buttons do.

00:18:56.620 --> 00:18:58.750
So in case all this is
a little bit confusing,

00:18:58.750 --> 00:19:01.490
all these attributes,
let's just go over an example.

00:19:01.580 --> 00:19:04.690
Let's take the MC button
in the calculator.

00:19:05.210 --> 00:19:07.070
That button is going to have a role.

00:19:07.100 --> 00:19:11.690
The role is going to be AX button,
and that's provided by the framework.

00:19:12.500 --> 00:19:15.450
The button's also going to
have a role description.

00:19:15.450 --> 00:19:16.580
And that's going to be button.

00:19:16.680 --> 00:19:18.810
And this is a human readable string.

00:19:18.910 --> 00:19:20.000
It's going to be localized.

00:19:20.160 --> 00:19:23.270
And again,
we provide that in the framework.

00:19:23.350 --> 00:19:26.540
It's going to have a title,
and the title is going to

00:19:26.540 --> 00:19:29.240
be a two-character string,
the letters MC.

00:19:29.440 --> 00:19:32.510
And once again,
that's provided by the framework.

00:19:33.210 --> 00:19:36.540
And then there'll be some other
attributes like its position and size

00:19:36.540 --> 00:19:39.200
that are also provided by the framework,
but that's it.

00:19:39.290 --> 00:19:43.490
And we're going to rely on you guys to
go in and give that button a description,

00:19:43.690 --> 00:19:46.340
which would be a string,
something like memory clear.

00:19:54.280 --> 00:19:57.290
The next instance attribute
I'm going to talk about is the

00:19:57.840 --> 00:20:00.220
Title UI element attribute.

00:20:00.330 --> 00:20:05.590
Now recall that we mentioned before
that the Title attribute is a string

00:20:06.040 --> 00:20:08.920
that a widget actually displays.

00:20:08.970 --> 00:20:11.860
And take a look at the lock button.

00:20:12.140 --> 00:20:17.520
The string next to it isn't part of it,
so the lock button will not have a title.

00:20:17.550 --> 00:20:20.660
But yet,
there's this piece of static text next

00:20:20.770 --> 00:20:26.200
to it that a sighted user can figure
out serves as the title for that lock.

00:20:26.930 --> 00:20:31.940
In order to make this relationship
available for assistive applications,

00:20:32.060 --> 00:20:35.580
you need to implement the
title UI element attribute,

00:20:35.580 --> 00:20:39.850
and its value will be a reference to
another element that serves as its title,

00:20:39.860 --> 00:20:42.730
in this case,
the piece of static text next to it.

00:20:43.460 --> 00:20:48.380
In order to make this relationship
available for assistive applications,

00:20:48.600 --> 00:20:52.180
you need to implement the
title UI element attribute,

00:20:52.180 --> 00:20:56.450
and its value will be a reference to
another element that serves as its title,

00:20:56.450 --> 00:20:59.340
in this case,
the piece of static text next to it.

00:21:10.190 --> 00:21:15.240
In order to make this relationship
available for assistive applications,

00:21:15.240 --> 00:21:18.840
you need to implement the
title UI element attribute,

00:21:18.890 --> 00:21:23.150
and its value will be a reference to
another element that serves as its title,

00:21:23.150 --> 00:21:26.040
in this case,
the piece of static text next to it.

00:21:28.960 --> 00:21:32.340
There's a related attribute
called the serves as title

00:21:32.340 --> 00:21:34.270
for UI elements attribute.

00:21:34.510 --> 00:21:36.240
This is the back pointer.

00:21:36.590 --> 00:21:40.640
This could be useful if an assistive
app allows the user to mouse over

00:21:40.640 --> 00:21:44.230
a piece of text and it wants to
decide what purpose does this

00:21:44.320 --> 00:21:46.270
text serve in the user interface.

00:21:46.400 --> 00:21:50.540
If it has a serves as title
for UI elements attribute,

00:21:50.540 --> 00:21:53.550
then it will know that this
piece of text is the title

00:21:53.550 --> 00:21:55.390
for this list of UI elements.

00:21:55.600 --> 00:22:00.270
The value for this attribute is an array
because a single piece of text often

00:22:00.320 --> 00:22:03.320
serves as the title for multiple widgets.

00:22:08.880 --> 00:22:15.240
Another very important instance attribute
is the Linked UI Elements attribute.

00:22:15.250 --> 00:22:19.890
A common model in user interfaces is
to allow the user to make a selection

00:22:20.030 --> 00:22:24.830
from a list or a table or a radio group,
and then another part of the

00:22:24.830 --> 00:22:29.470
user interface reconfigures
itself to reflect that selection.

00:22:29.850 --> 00:22:35.220
Now, just because you make a selection in
one spot and other widgets change,

00:22:35.270 --> 00:22:42.020
there's no way for the frameworks
to sort of detect this relationship.

00:22:42.460 --> 00:22:46.940
And that's why we rely on you
to give the list or the table a

00:22:46.940 --> 00:22:52.870
linked UI elements attribute that
shows us that the selection in this

00:22:52.970 --> 00:22:56.790
object affects these other widgets.

00:23:00.960 --> 00:23:03.800
Now the linked UI elements
attribute is an array because

00:23:03.800 --> 00:23:07.380
often this selection affects a
whole bunch of other UI elements.

00:23:07.410 --> 00:23:11.000
And it might look like in this
slide that that's the case here,

00:23:11.000 --> 00:23:12.070
but it really isn't.

00:23:12.180 --> 00:23:15.300
In this case,
the array would contain just one element,

00:23:15.360 --> 00:23:16.110
the tab group.

00:23:16.140 --> 00:23:19.790
Now if the tab group weren't there,
then it would contain the whole host

00:23:19.910 --> 00:23:21.320
of elements you see on the screen.

00:23:21.690 --> 00:23:27.180
And I think in most cases you'll
find that the linkage will be to a

00:23:27.270 --> 00:23:29.310
single sort of grouping UI element.

00:23:35.590 --> 00:23:40.640
The last instance attribute I'm going
to talk about is specific to sliders.

00:23:40.750 --> 00:23:45.800
Another common practice is to create
a slider and then create separate

00:23:46.300 --> 00:24:25.200
[Transcript missing]

00:24:31.300 --> 00:24:35.360
All right, so now we've talked about some
of these instance attributes.

00:24:35.390 --> 00:24:38.970
And the next question is, well,
how do you go about implementing them?

00:24:39.380 --> 00:24:42.290
And before Tiger,
the answer was you had to

00:24:42.290 --> 00:24:45.680
actually subclass the widget in
order to add these attributes.

00:24:45.680 --> 00:24:47.560
And that's pretty cumbersome.

00:24:47.560 --> 00:24:52.340
And now that we're trying to encourage
developers to add all these attributes,

00:24:52.340 --> 00:24:56.430
it's not a really nice story to say,
well, you have to create a subclass for

00:24:56.430 --> 00:25:00.900
every widget in your user interface
just in order to provide descriptions.

00:25:01.620 --> 00:25:04.450
So in Tiger,
both Cocoa and Carbon have introduced

00:25:04.580 --> 00:25:07.810
APIs that allow you to take a
particular instance of a widget and

00:25:08.150 --> 00:25:09.890
associate a new attribute with it.

00:25:09.940 --> 00:25:13.950
And that's what we're going to
talk about in the next few slides.

00:25:14.140 --> 00:25:16.550
First, I'm going to discuss
how it's done in Cocoa.

00:25:16.680 --> 00:25:19.240
Guy's going to cover
how it's done in Carbon.

00:25:19.240 --> 00:25:24.350
And then we're going to give you a sneak
preview of how this can be done in IB,

00:25:24.400 --> 00:25:27.900
Interface Builder,
without writing any code.

00:25:27.920 --> 00:25:31.590
But that doesn't quite work.

00:25:31.620 --> 00:25:33.280
It doesn't quite work
yet in your Tiger seed.

00:25:33.280 --> 00:25:35.520
So that's sort of a future direction.

00:25:35.520 --> 00:25:39.000
But the slides we're going to
present next on how to do it in code

00:25:39.000 --> 00:25:41.150
work today with your Tiger seed.

00:25:46.110 --> 00:25:50.200
So I'm going to start by just giving
you the API in Cocoa that performs this.

00:25:50.300 --> 00:25:53.290
It's called Accessibility
Set Override Value.

00:25:53.290 --> 00:25:57.230
And you pass it the attribute and
the value you want it to have.

00:25:57.280 --> 00:25:59.000
And that's pretty simple.

00:25:59.020 --> 00:26:02.380
Well, it's not quite that simple.

00:26:03.100 --> 00:26:06.480
The first thing is,
even though this is a method on NSObject,

00:26:06.480 --> 00:26:08.730
you can't use it on any old NSObject.

00:26:08.810 --> 00:26:13.590
You can only use it on objects that
implement the accessibility protocol.

00:26:14.240 --> 00:26:19.430
And the second point goes back to
another thing I alluded to earlier.

00:26:19.630 --> 00:26:24.160
One of the big advantages of the
whole scheme of UI elements is that

00:26:24.290 --> 00:26:29.490
we squish some extraneous detail out
of the natural representation and

00:26:29.550 --> 00:26:32.650
we don't expose it to accessibility.

00:26:32.930 --> 00:26:37.590
So for instance, in a Cocoa app,
there's a button on the screen

00:26:37.750 --> 00:26:40.940
actually consists of a button
object and then inside is another

00:26:40.940 --> 00:26:42.500
object called the button cell.

00:26:42.530 --> 00:26:46.000
And the real meat of the button is
implemented in the button cell and that's

00:26:46.030 --> 00:26:48.580
all that's exposed to accessibility.

00:26:48.690 --> 00:26:52.700
So if you set the attribute
on the outer button,

00:26:52.840 --> 00:26:55.960
not the button cell,
it's going to have no useful effect

00:26:56.120 --> 00:27:00.070
because the button cell-- the button
is not exposed to accessibility,

00:27:00.100 --> 00:27:01.760
only the button cell.

00:27:02.010 --> 00:27:06.870
And if that sounds a little confusing,
I'd like to refer you to

00:27:06.870 --> 00:27:08.660
the AppKit release notes.

00:27:08.700 --> 00:27:11.780
And there's a long section
that's written about how,

00:27:11.920 --> 00:27:14.570
you know, these sorts of gotchas.

00:27:15.680 --> 00:27:21.060
Another thing that might cause
some confusion is the fact that

00:27:21.200 --> 00:27:24.250
there's a couple of these methods
that both have the word set

00:27:24.250 --> 00:27:26.320
and attribute in their names.

00:27:26.380 --> 00:27:29.800
Now, there's an entirely different
concept in accessibility,

00:27:29.800 --> 00:27:33.630
and that is allowing assistive
apps are allowed to set the

00:27:33.630 --> 00:27:35.150
values of certain attributes.

00:27:35.230 --> 00:27:38.570
So, for instance, an assistive app might
want to move a window,

00:27:38.590 --> 00:27:42.100
and it does this by setting the
value of the position attribute.

00:27:42.100 --> 00:27:45.330
But that's an entirely
different thing than giving the

00:27:45.460 --> 00:27:47.600
window a position attribute.

00:27:47.600 --> 00:27:49.570
The window already has
a position attribute,

00:27:49.590 --> 00:27:54.590
and the giving it of it,
the method I'm describing here allows

00:27:54.590 --> 00:27:56.480
you to add attributes to things.

00:27:56.480 --> 00:27:57.830
And this is something you do.

00:27:58.200 --> 00:28:01.720
Whereas the method accessibility
set value for attribute,

00:28:01.720 --> 00:28:05.960
that's where the assistive apps come in,
and they set the attributes values

00:28:05.960 --> 00:28:08.780
for the attributes where you allow it.

00:28:12.460 --> 00:28:17.580
So here's a bit of example code on how
you might accomplish this in a Cocoa app.

00:28:18.030 --> 00:28:21.730
We're going to give a description to
a back arrow button that otherwise

00:28:22.100 --> 00:28:24.930
has no text associated with it.

00:28:25.340 --> 00:28:32.080
The AwakeFromNib method is called on the
file's owner when this widget is loaded.

00:28:32.190 --> 00:28:35.200
So that's a natural
place to try to do this.

00:28:35.360 --> 00:28:38.200
And notice the first thing we do
is we extract the proper thing.

00:28:38.200 --> 00:28:40.140
We extract the button
cell out of the button.

00:28:40.140 --> 00:28:41.920
And then we make our call.

00:28:41.920 --> 00:28:43.990
Accessibility set override value.

00:28:43.990 --> 00:28:47.810
We pass it the string back and the
name of the attribute we want to set.

00:28:47.810 --> 00:28:49.600
And that's all there is to it.

00:28:53.000 --> 00:28:55.680
and now Guy is going to explain
how this works in Carbon.

00:28:55.760 --> 00:28:58.350
So before I dive into this new
API that we added for Tiger,

00:28:58.350 --> 00:28:59.780
I want to cover one other detail.

00:28:59.870 --> 00:29:03.730
And that's the notion of what
is exactly accessible in Carbon.

00:29:03.800 --> 00:29:06.150
As you can see,
this API's first parameter

00:29:06.150 --> 00:29:07.240
is an HI Object Ref.

00:29:07.280 --> 00:29:10.840
HI Object Refs are the key
to accessibility on Carbon.

00:29:10.970 --> 00:29:16.000
Any HI Object Ref and controls, windows,
menus, they're all HI objects.

00:29:16.050 --> 00:29:18.610
Each of those constructs
is inherently accessible.

00:29:18.740 --> 00:29:20.730
In fact, controls,
windows and menus already have a bunch

00:29:20.750 --> 00:29:22.860
of built-in accessibility infrastructure.

00:29:22.860 --> 00:29:26.190
And that's how we're going to
provide all the default attributes.

00:29:26.260 --> 00:29:29.420
So you'll see some of our
accessibility APIs take HI Objects.

00:29:29.470 --> 00:29:32.420
And essentially what you can do is you
can take any window Ref or control Ref,

00:29:32.460 --> 00:29:36.120
menu Ref, cast it into an HI Object and
just call these APIs.

00:29:36.190 --> 00:29:39.960
So the equivalent API to what Mike just
showed is called HI Object Set Auxiliary

00:29:39.960 --> 00:29:41.740
Accessibility Attribute.

00:29:41.850 --> 00:29:44.930
Wow, I actually got that out.

00:29:45.370 --> 00:29:48.200
First thing you need to pass in
is the HI object and an identifier

00:29:48.200 --> 00:29:51.200
that represents the element you
wish to add the attribute to.

00:29:51.390 --> 00:29:54.200
Then you give it a name and you give
it the data you want to associate.

00:29:54.200 --> 00:29:56.200
So again, same sort of example.

00:29:56.200 --> 00:29:59.200
There's a back button in your interface,
but it just has an icon on it, no text.

00:29:59.200 --> 00:30:00.400
You want to give it a description.

00:30:00.400 --> 00:30:01.200
Here's how you do it.

00:30:01.200 --> 00:30:03.200
Let's say you happen to
create your window from a nib.

00:30:03.200 --> 00:30:06.200
You can call hiview findbyid
to look up your back button.

00:30:06.200 --> 00:30:08.080
So now you've got a reference
to your back button.

00:30:08.200 --> 00:30:12.200
Then you call this new API,
pass the back button and zero.

00:30:12.200 --> 00:30:15.140
See how I've casted the back button,
which is normally an hiv ref,

00:30:15.140 --> 00:30:16.190
into an object ref.

00:30:16.200 --> 00:30:18.190
Pass that back button and
an identifier of zero,

00:30:18.270 --> 00:30:20.730
which says, "Hey,
I want to associate some data with

00:30:20.870 --> 00:30:23.720
the element that represents the
whole button." You give it the

00:30:23.720 --> 00:30:26.060
attribute you want to add and you
give it the data you want to add,

00:30:26.060 --> 00:30:27.200
which is the string back.

00:30:27.200 --> 00:30:30.630
And once you've done that,
the accessibility infrastructure

00:30:30.630 --> 00:30:33.200
in Carbon will take care of
the rest for you automatically.

00:30:33.200 --> 00:30:34.990
It's really pretty cool.

00:30:36.450 --> 00:30:38.670
So now I'd like to bring up
Aaron Haney to give you a brief

00:30:38.670 --> 00:30:42.360
demo of Interface Builder and how
it can make your lives a lot easier.

00:30:42.360 --> 00:30:45.100
Or will be able to make
your lives a lot easier.

00:30:45.860 --> 00:30:48.000
Thanks, Guy.

00:30:48.020 --> 00:30:49.420
OK.

00:30:49.520 --> 00:30:52.680
So this is very similar to the demo I did
yesterday during the voiceover session,

00:30:52.680 --> 00:30:54.720
but I'm going to show a
few additional things.

00:30:54.840 --> 00:30:59.780
So what we have here in Xcode is a small
Hello World style app that just has

00:30:59.790 --> 00:31:01.410
a couple of text fields and a button.

00:31:01.490 --> 00:31:05.090
And right now,
it doesn't have anything other

00:31:05.090 --> 00:31:10.750
than the default accessibility
information in all of the UI elements.

00:31:10.810 --> 00:31:13.680
As Guy and Mike say,
a lot of the standard widgets will

00:31:13.840 --> 00:31:16.740
give you a lot of the stuff for free,
but it doesn't quite give you everything.

00:31:16.840 --> 00:31:21.330
So let me just show you real quick
what happens if you look at this

00:31:21.330 --> 00:31:24.190
with an accessibility application.

00:31:24.710 --> 00:31:26.900
: The spoken interface is inactive.

00:31:27.010 --> 00:31:30.400
Press Control Option F6 to learn more.

00:31:30.410 --> 00:31:32.400
Demo app application.

00:31:32.760 --> 00:31:37.400
Window accessibility demo
onto edit text field.

00:31:37.430 --> 00:31:40.390
Now you can see it's just
saying edit text field.

00:31:40.590 --> 00:31:42.300
In a text field.

00:31:42.400 --> 00:31:43.200
And down here.

00:31:43.230 --> 00:31:44.700
Button.

00:31:44.770 --> 00:31:45.840
That's not very descriptive.

00:31:45.920 --> 00:31:48.270
It tells you what kind of control it is,
but it doesn't say

00:31:48.270 --> 00:31:49.970
anything else about it.

00:31:49.980 --> 00:31:53.100
Let me turn this off
before it gets too chatty.

00:31:54.740 --> 00:31:57.870
So to fix this, we can open the nib.

00:31:57.880 --> 00:32:06.340
And you'll notice in the info window,
there's an extra item, Accessibility.

00:32:07.000 --> 00:32:09.660
So let's select these edit text fields.

00:32:09.690 --> 00:32:14.810
Now this is a case where we don't want to
enter a title for this UI element itself.

00:32:14.820 --> 00:32:19.670
What we want to do is link it to
another UI element and have it use the

00:32:19.700 --> 00:32:22.700
title of the one that it's linked to.

00:32:23.120 --> 00:32:27.920
What we can do is just control click and
drag and create a connection and select

00:32:28.180 --> 00:32:31.990
title UI element and connect that up.

00:32:32.080 --> 00:32:35.150
Now let's do the same thing
for the last name field.

00:32:44.060 --> 00:32:47.290
And while I'm here,
I'm going to take a look at this button,

00:32:47.300 --> 00:32:50.390
which is an image button,
a fairly common case.

00:32:50.740 --> 00:32:54.600
As Guy mentioned,
a title is for a case where

00:32:54.600 --> 00:32:56.250
there's actual text on the control.

00:32:56.460 --> 00:32:57.910
And in this case,
there is no actual text,

00:32:57.910 --> 00:32:59.060
so a title is inappropriate.

00:32:59.060 --> 00:33:00.850
What we want to do is add a description.

00:33:01.100 --> 00:33:05.090
So we'll go to the description
field here and type in some text.

00:33:06.060 --> 00:33:09.810
Now the fact that it's a button comes
out of the role description attribute.

00:33:09.900 --> 00:33:13.010
So you don't want to put button in
this field because then it would read,

00:33:13.010 --> 00:33:15.180
OK, button, button.

00:33:15.280 --> 00:33:20.420
So we just want to put just a
description of the control itself,

00:33:20.420 --> 00:33:22.500
not what kind of control it is.

00:33:22.640 --> 00:33:26.280
So let's try this again.

00:33:31.200 --> 00:33:33.440
Spoken Interface is inactive.

00:33:33.440 --> 00:33:38.400
Press Control Option F6 to
Interface Builder Application.

00:33:38.410 --> 00:33:44.340
Window Accessibility Demo onto
First Name Edit Text Field.

00:33:44.370 --> 00:33:45.780
And there it is.

00:33:45.790 --> 00:33:49.450
Last Name Edit Text Field.

00:33:49.610 --> 00:33:51.100
OK button.

00:33:51.680 --> 00:33:55.870
So now with just a little bit
of work in Interface Builder,

00:33:55.870 --> 00:33:59.800
we've added accessibility to this
small Hello World application.

00:33:59.870 --> 00:34:03.820
Now a couple of other things
that I want to show you is,

00:34:05.920 --> 00:34:10.000
An accessibility inspector.

00:34:10.100 --> 00:34:12.670
Guy already mentioned
that in the locked view,

00:34:12.690 --> 00:34:18.380
let's lock on one of these text fields.

00:34:18.380 --> 00:34:21.280
And we'll highlight it just so
you know which one I'm locked on.

00:34:25.000 --> 00:34:38.700
[Transcript missing]

00:34:40.380 --> 00:34:43.400
You can also go to any linked
elements such as the title you want.

00:34:43.400 --> 00:34:46.200
And now you can see it jump
over to the first name field.

00:34:46.250 --> 00:34:48.280
And from now on,
whenever I update the text

00:34:48.360 --> 00:34:52.360
in that static text field,
it will automatically get picked up.

00:34:52.360 --> 00:34:57.890
As far as accessibility is concerned,
the title of these edit text fields will

00:34:58.530 --> 00:35:03.930
and Mike Schumacher will be
presenting their presentations.

00:35:09.280 --> 00:35:10.320
So that's it.

00:35:10.320 --> 00:35:17.590
Now we want to emphasize that the support
that's on the CD/DVD is incomplete.

00:35:17.600 --> 00:35:20.240
This is just to show you the
direction that we're moving in.

00:35:20.240 --> 00:35:23.350
We advise you to not use
it as it is right now.

00:35:23.370 --> 00:35:25.660
We hope to get that addressed
as soon as possible.

00:35:25.690 --> 00:35:28.540
But anyway, this is where we're headed.

00:35:28.540 --> 00:35:32.120
We want it to be as easy and
convenient as possible so that you

00:35:32.120 --> 00:35:35.360
can add accessibility information
from all sorts of places,

00:35:35.360 --> 00:35:36.990
including Interface Builder.

00:35:37.010 --> 00:35:37.870
And that's the demo.

00:35:37.990 --> 00:35:38.800
Thanks, Guy.

00:35:39.200 --> 00:35:40.200
Thanks, Aaron.

00:35:45.700 --> 00:35:48.370
Okay, so now we've talked about the
easy case and what you have

00:35:48.370 --> 00:35:50.000
to do with standard widgets.

00:35:50.010 --> 00:35:54.090
And we anticipate that's going to be the
vast majority of the work that's needed

00:35:54.110 --> 00:35:56.710
by applications to support accessibility.

00:35:56.820 --> 00:35:59.940
But now we're going to bump things up
a notch and we're going to talk about

00:35:59.940 --> 00:36:03.460
what you need to do for custom views.

00:36:03.460 --> 00:36:06.450
And in the example we're
going to be working through,

00:36:06.550 --> 00:36:09.440
we're going to be talking about
if you created your own button

00:36:09.460 --> 00:36:17.100
class and instead of starting
from NSButton or a button ref,

00:36:17.100 --> 00:36:19.600
you start from just a plain view.

00:36:19.610 --> 00:36:24.190
And Guy and I are each going to
show how you do this in Carbon and

00:36:24.190 --> 00:36:29.090
Cocoa and how you give a title to
this widget and a title attribute and

00:36:29.190 --> 00:36:31.770
how you'd implement a press action.

00:36:34.720 --> 00:36:37.180
Now the first,
some of you might be thinking, "Okay,

00:36:37.380 --> 00:36:39.540
we just showed you how to add attributes.

00:36:39.650 --> 00:36:43.060
Can't I just add a title that
way?" And the answer is yes,

00:36:43.060 --> 00:36:44.680
that will work just fine.

00:36:45.030 --> 00:36:50.300
And if you only have a couple instances
of your custom button in your app,

00:36:50.420 --> 00:36:52.600
that might be good enough.

00:36:52.720 --> 00:36:56.390
But maybe you're providing this
class for other people to use,

00:36:56.400 --> 00:37:00.040
and wouldn't it be nice if the title
attribute came along for free instead

00:37:00.040 --> 00:37:02.820
of making everyone implement it?

00:37:03.010 --> 00:37:06.370
or another thing to think about is
maybe it's some other attribute like

00:37:06.470 --> 00:37:09.140
the value in your widgets a slider.

00:37:09.140 --> 00:37:13.100
The methods we just showed you take
a name of an attribute and a constant

00:37:13.140 --> 00:37:16.460
value and that's not going to really
work so well for the value of a slider.

00:37:16.460 --> 00:37:20.910
I mean I guess you could every time the
slider changes value reset that attribute

00:37:20.910 --> 00:37:23.050
but that's not really very elegant.

00:37:23.050 --> 00:37:27.680
So we're going to show you how to get
some code to run in order to implement

00:37:27.680 --> 00:37:32.900
attributes and then we're also going
to show you how to do this for actions.

00:37:36.860 --> 00:37:40.880
Now in Cocoa,
there's a protocol or a suite of

00:37:40.880 --> 00:37:44.700
methods that you implement on an
object to support accessibility.

00:37:44.700 --> 00:37:48.700
And there's four of those
methods relating to attributes.

00:37:48.700 --> 00:37:51.320
And they correspond to the
four things that assistive

00:37:51.320 --> 00:37:52.690
apps can do with attributes.

00:37:52.810 --> 00:37:56.300
One of them is to get a list of the
attributes supported by a UI element.

00:37:56.300 --> 00:37:59.200
The second is to get the value
of a particular attribute.

00:37:59.200 --> 00:38:02.300
The third is to test if a
particular attribute is settable.

00:38:02.300 --> 00:38:05.370
And the fourth is to
finally set that value.

00:38:06.730 --> 00:38:11.730
And this code on this screen shows how
you implement the first of those methods,

00:38:11.730 --> 00:38:15.020
Accessibility Attribute Names.

00:38:15.030 --> 00:38:19.570
Now here, I've chosen to cache the
attribute names in a local static

00:38:19.660 --> 00:38:22.580
variable just so I don't have to
compute them over and over again.

00:38:22.580 --> 00:38:26.630
And the first thing we do is check if
the cache is full because if it is,

00:38:26.760 --> 00:38:27.880
we don't have to do anything else.

00:38:27.880 --> 00:38:28.650
It'll get returned.

00:38:28.650 --> 00:38:31.840
But if we haven't computed the
list of attribute names yet,

00:38:31.880 --> 00:38:35.420
the first thing we do is go
to the super class and get the

00:38:35.570 --> 00:38:36.680
standard list of attributes.

00:38:36.700 --> 00:38:41.000
Then we create a new array by
adding the attribute we want to add,

00:38:41.200 --> 00:38:43.250
the title attribute,
to the end of the list.

00:38:43.410 --> 00:38:45.700
And finally,
we tuck that away in the cache.

00:38:45.950 --> 00:38:48.120
And that's all we need to do.

00:38:56.200 --> 00:39:02.420
All right, this is the code that supports
returning the value for an attribute.

00:39:02.420 --> 00:39:05.520
The method name is
AccessibilityAttributeValue.

00:39:05.520 --> 00:39:09.090
And the first thing we do is check
if the attribute being queried

00:39:09.390 --> 00:39:13.440
is the attribute of interest,
in this case, the title attribute.

00:39:13.440 --> 00:39:15.870
And if it is,
we return our notion of the title.

00:39:16.060 --> 00:39:19.490
Otherwise,
we let the superclass handle it.

00:39:23.190 --> 00:39:27.900
And the last method I'm going to show
you is the method that handles returning

00:39:27.900 --> 00:39:30.030
whether or not an attribute can be set.

00:39:30.140 --> 00:39:33.390
And once again, we test,
is this the title attribute?

00:39:33.420 --> 00:39:37.250
And if so, we return no,
because we don't allow users to

00:39:37.300 --> 00:39:39.670
change the title of our button.

00:39:39.950 --> 00:39:42.380
and if it's not,
we let the superclass handle it.

00:39:42.380 --> 00:39:45.430
Now those of you who have been
paying attention might realize

00:39:45.440 --> 00:39:47.040
I said there's four methods.

00:39:47.210 --> 00:39:52.610
Well, the fourth method involves actually
setting the attribute and since we

00:39:53.130 --> 00:39:59.190
don't allow the title ever to be set,
the code for this method would

00:39:59.190 --> 00:39:59.190
always just defer to the superclass,
so there's really no

00:39:59.190 --> 00:39:59.190
point in implementing it.

00:40:01.830 --> 00:40:04.330
So from Carbon,
it's a very similar protocol

00:40:04.440 --> 00:40:05.840
to what Mike described.

00:40:05.840 --> 00:40:08.520
In Carbon,
accessibility is achieved through,

00:40:08.540 --> 00:40:11.000
I think it's nine
different Carbon events.

00:40:11.190 --> 00:40:14.220
You can install those however you
would normally install Carbon events.

00:40:14.240 --> 00:40:16.220
In this example here,
I happen to be doing it in an

00:40:16.220 --> 00:40:18.220
HIA Object subclass registration time.

00:40:18.480 --> 00:40:20.290
You don't have to do it that way.

00:40:20.360 --> 00:40:22.820
If you use Create Custom Control or
Create Custom Window or

00:40:22.830 --> 00:40:24.580
something like that,
after you create the

00:40:24.650 --> 00:40:27.030
control of the window,
you can call Install Event Handler and

00:40:27.030 --> 00:40:28.930
install your event handlers afterwards.

00:40:28.930 --> 00:40:30.760
It's all going to work just the same.

00:40:30.760 --> 00:40:34.660
So three of the Carbon events
that we have up here are

00:40:34.660 --> 00:40:37.520
the Get All Attribute Names,
Is Named Attribute Settable,

00:40:37.520 --> 00:40:40.000
and Get Named Attribute Carbon Events.

00:40:40.030 --> 00:40:42.660
Again, there's also an event
that's used for setting.

00:40:42.660 --> 00:40:45.300
There's some events that we'll
talk about later used for actions.

00:40:45.500 --> 00:40:47.200
There's also some events
used for hit testing.

00:40:47.200 --> 00:40:48.790
We're not really going
to cover that today.

00:40:48.790 --> 00:40:51.560
But there's lots and lots of
documentation in CarbonEvents.h

00:40:51.560 --> 00:40:53.670
on exactly how you need
to handle these events,

00:40:53.870 --> 00:40:57.000
what parameters you need to look for,
and what parameters you take out.

00:40:57.000 --> 00:40:58.200
So let's dive into the example.

00:40:58.200 --> 00:40:59.200
Thank you.

00:41:00.380 --> 00:41:02.300
Okay, so the same example
Mike was talking about.

00:41:02.300 --> 00:41:06.070
You've got a custom view that has a
title and you want to provide that

00:41:06.070 --> 00:41:08.600
attribute because it's not being
provided for you automatically by

00:41:08.600 --> 00:41:12.900
the view system because it doesn't
know your custom view has a title.

00:41:13.090 --> 00:41:16.320
So here's what your handler for get
all attribute names might look like.

00:41:16.440 --> 00:41:17.520
The Carbon event comes in.

00:41:17.630 --> 00:41:21.670
You need to call next event handler to
let the inherited HIVU implementation

00:41:21.850 --> 00:41:23.800
pre-populate it with a bunch
of the standard attributes,

00:41:23.800 --> 00:41:25.790
like the size and position
and stuff like that,

00:41:25.790 --> 00:41:28.390
all the stuff you want the
system to provide for you.

00:41:28.480 --> 00:41:32.530
Then you extract the mutable array
of attribute names from the event,

00:41:32.530 --> 00:41:36.030
and you add your attribute to that array,
and you return.

00:41:36.030 --> 00:41:39.040
And that lets the
accessibility system know that,

00:41:39.040 --> 00:41:41.470
hey, there's this additional
attribute that's been added in.

00:41:41.770 --> 00:41:43.890
The next event I want to
talk about is the Is Named

00:41:43.920 --> 00:41:45.700
Attribute Settable Carbon Event.

00:41:45.700 --> 00:41:49.850
When this Carbon Event comes in,
fetch the attribute name out

00:41:49.870 --> 00:41:52.690
of the event and see if it's
the attribute you support.

00:41:52.700 --> 00:41:56.800
If so, in this case,
obviously the title is not settable,

00:41:56.820 --> 00:42:00.700
so we just stuff an event parameter
into the event indicating that no,

00:42:00.700 --> 00:42:03.650
it's not settable, and then you return.

00:42:04.300 --> 00:42:05.900
Let me jump back here.

00:42:05.900 --> 00:42:07.500
Something I left out
of this code example.

00:42:07.500 --> 00:42:10.190
Obviously, if it's not one of the
attributes you support,

00:42:10.340 --> 00:42:12.580
call next event handler or
return event not handled error,

00:42:12.580 --> 00:42:15.750
and that will let the inherited
implementation provide all

00:42:15.780 --> 00:42:17.570
the right information for it.

00:42:17.890 --> 00:42:20.290
So when an assistive application
wants to query a value,

00:42:20.460 --> 00:42:21.980
again, very simple.

00:42:22.050 --> 00:42:24.080
Extract the attribute name
out of the Carbon event.

00:42:24.210 --> 00:42:26.810
If it's the one you support,
stuff an event parameter in

00:42:26.810 --> 00:42:28.100
the event with the value.

00:42:28.150 --> 00:42:29.590
In this case,
we're stuffing the title in.

00:42:29.590 --> 00:42:32.030
Presumably, the title's a CFStringRef.

00:42:32.030 --> 00:42:35.200
And the Carbon event manager's
going to do all the write,

00:42:35.200 --> 00:42:37.760
retain, release semantics for CF types.

00:42:41.480 --> 00:42:44.560
So now Mike's going to talk
a little bit about actions.

00:42:45.460 --> 00:42:45.900
OK.

00:42:46.020 --> 00:42:48.640
So we've shown how to add an
attribute to your custom view.

00:42:48.640 --> 00:42:51.260
Next we're going to get
into how to add an action.

00:42:51.260 --> 00:42:54.640
But first,
a little background on what actions are.

00:42:55.120 --> 00:42:57.330
First, actions are very simple things.

00:42:57.420 --> 00:43:01.730
They're about approximately what you
could accomplish with a mouse click.

00:43:02.010 --> 00:43:05.620
And they're generic
things like pick or press.

00:43:05.710 --> 00:43:08.600
Now often developers think, "Oh,
I've got a print button.

00:43:08.600 --> 00:43:10.440
I need a print action," or
"I have a cancel button.

00:43:10.440 --> 00:43:13.270
I need a cancel action."
And that's not the case.

00:43:13.320 --> 00:43:15.990
If it's a button,
it should support the press action.

00:43:16.110 --> 00:43:21.910
The fact that this button prints
can be discovered by looking at

00:43:21.910 --> 00:43:22.000
its title or its description.

00:43:22.220 --> 00:43:25.310
So don't fall into the trap of
thinking you need a lot of actions.

00:43:25.450 --> 00:43:30.100
In fact, there's less than 10 actions
to find and I don't anticipate

00:43:30.150 --> 00:43:32.590
that list growing very much.

00:43:34.090 --> 00:43:39.680
The Accessibility APIs support
three basic operations with actions.

00:43:39.810 --> 00:43:41.760
First,
you can ask a UI element for a list

00:43:41.820 --> 00:43:44.560
of all the actions it supports,
and in most cases it's the

00:43:44.560 --> 00:43:47.460
empty list or just one thing.

00:43:47.470 --> 00:43:54.680
Then you can ask to get a human
readable string for a particular action,

00:43:54.770 --> 00:43:56.250
that's its description.

00:43:56.570 --> 00:43:59.720
And finally,
you can try to perform that action.

00:44:01.870 --> 00:44:07.700
Now, Cocoa's accessibility protocol
has three methods that correspond

00:44:07.700 --> 00:44:10.420
to those three operations,
and this slide shows an

00:44:10.420 --> 00:44:15.170
implementation of the first,
returning a list of action names.

00:44:15.270 --> 00:44:18.140
And it's very similar to what
you do with an attribute.

00:44:18.260 --> 00:44:22.360
First, you call the superclass to get
a list of inherited actions,

00:44:22.360 --> 00:44:27.800
and then we slap our action on the end of
the list and return the augmented list.

00:44:31.260 --> 00:44:35.880
This is the method that handles returning
the description for a particular action.

00:44:35.910 --> 00:44:38.450
As with attributes,
the first thing we do is check,

00:44:38.560 --> 00:44:41.620
is this action the one of interest?

00:44:41.620 --> 00:44:44.430
Because if it's not,
we'll let the superclass handle it.

00:44:44.720 --> 00:44:48.410
But if it is,
we're going to call the NS Accessibility

00:44:48.410 --> 00:44:51.020
Action Description function.

00:44:51.020 --> 00:44:53.840
And this is something new in Tiger.

00:44:53.840 --> 00:45:00.200
Before Tiger, if you were to return
an action description,

00:45:00.200 --> 00:45:01.750
you sort of had to look around and say,
well,

00:45:01.750 --> 00:45:03.880
how did we describe the press action?

00:45:03.880 --> 00:45:06.510
And you might use Accessibility
Inspector and discover,

00:45:06.580 --> 00:45:08.740
you know, the buttons had a press action.

00:45:08.740 --> 00:45:13.380
And then you also had to maybe
guess how might they localize that?

00:45:13.400 --> 00:45:17.060
So we're sort of taking the mystery
out of that process and giving

00:45:17.060 --> 00:45:21.000
you a function that's going to
return what our standard widgets do.

00:45:21.080 --> 00:45:22.740
For action descriptions.

00:45:22.740 --> 00:45:25.680
And I refer you to the
AppKit release notes where this

00:45:25.800 --> 00:45:29.030
function is described in detail,
along with some related

00:45:29.030 --> 00:45:30.990
ones for role descriptions.

00:45:34.620 --> 00:45:40.260
And the final method in this action suite
is for actually performing the action.

00:45:40.310 --> 00:45:43.480
And first, again, we check,
is this the press action

00:45:43.480 --> 00:45:44.530
that we care about?

00:45:44.530 --> 00:45:46.260
If so, we do the appropriate thing.

00:45:46.370 --> 00:45:48.060
Otherwise, the super class handles it.

00:45:48.070 --> 00:45:50.910
And now Guy's going to
show what you do in Carbon.

00:45:51.400 --> 00:45:55.660
So three of those nine Carbon events
are pretty much identical to the

00:45:55.660 --> 00:45:58.400
AppKit methods for performing actions.

00:45:58.400 --> 00:46:00.390
The first one is getAllActionNames.

00:46:00.390 --> 00:46:02.010
It's a lot like getAllAttributeNames.

00:46:02.010 --> 00:46:03.360
And in fact, you handle it the same way.

00:46:03.390 --> 00:46:05.400
You call the next event
handler to let the inherited

00:46:05.400 --> 00:46:06.400
implementation add any names.

00:46:06.400 --> 00:46:12.380
You extract the mutable array of names
and you add your new action to it.

00:46:13.330 --> 00:46:15.430
Get named action
description is also simple,

00:46:15.440 --> 00:46:18.200
but there's one kind of weird catch here.

00:46:18.200 --> 00:46:21.120
There is a mutable
string ref in this event.

00:46:21.220 --> 00:46:25.360
You need to extract that string
ref and replace it with your text.

00:46:25.360 --> 00:46:27.950
Replace the text in the string
with your text and return.

00:46:27.960 --> 00:46:29.720
And so that's how you provide
an action description.

00:46:29.830 --> 00:46:33.020
I've left out the code here just for
simplicity of where we are looking to

00:46:33.060 --> 00:46:34.980
see if it's the action that we support.

00:46:35.050 --> 00:46:37.380
And if not, of course,
it's going to call Next Event Handler.

00:46:39.540 --> 00:46:42.560
Now, this is the only tricky part of
the accessibility Carbon events,

00:46:42.560 --> 00:46:45.060
and that has to do with
performing named actions.

00:46:45.070 --> 00:46:47.520
But before I kind of dive into this,
let me give you a little bit of

00:46:47.540 --> 00:46:49.320
background for why this is complex.

00:46:49.400 --> 00:46:53.600
When an assistive application is telling
your app to do a press operation,

00:46:53.600 --> 00:46:56.740
that assistive application is blocking,
waiting for a response from

00:46:56.740 --> 00:46:59.870
a messaging protocol to say
whether or not the app is alive,

00:46:59.870 --> 00:47:00.390
right?

00:47:00.390 --> 00:47:03.570
Your app might be crashed or
hung or in GDB or something.

00:47:03.570 --> 00:47:07.520
And so the assistive application needs
to know if a timeout has elapsed and,

00:47:07.520 --> 00:47:11.240
you know,
it's got to forego the attempt to press.

00:47:11.240 --> 00:47:14.750
However, that need often contradicts
what actually happens in an

00:47:14.750 --> 00:47:17.900
application when you perform a
press type operation on a button.

00:47:17.900 --> 00:47:20.510
A lot of buttons will bring up
some kind of modal interface or

00:47:20.510 --> 00:47:23.390
might cause a menu to be tracked,
which means that your

00:47:23.390 --> 00:47:26.840
accessibility event handler is
not going to return right away,

00:47:26.840 --> 00:47:27.170
right?

00:47:27.170 --> 00:47:29.720
It's not going to return until the
user's done dealing with the dialogue,

00:47:29.760 --> 00:47:32.960
which could potentially take minutes
depending on what the dialogue's for.

00:47:33.090 --> 00:47:36.300
Which means that assistive application
who just sent the press request over is

00:47:36.300 --> 00:47:39.130
going to get a timeout and it's going
to think the press failed and it's

00:47:39.130 --> 00:47:41.040
going to communicate that to the user.

00:47:41.170 --> 00:47:43.260
So now the user's going to be
really confused because they thought

00:47:43.440 --> 00:47:46.210
something didn't work but now
there's this new interface that's

00:47:46.210 --> 00:47:48.000
showing up and it's just a big mess.

00:47:48.110 --> 00:47:51.860
So the way we solve that mess
is by a parameter in the perform

00:47:51.860 --> 00:47:53.860
named action Carbon event.

00:47:53.950 --> 00:47:56.720
There is a parameter indicating
whether or not this event was sent

00:47:56.720 --> 00:47:58.550
to your element in a queued state.

00:47:58.550 --> 00:48:02.240
Now by default, and this is mainly for
compatibility purposes,

00:48:02.240 --> 00:48:05.640
the event gets sent to your element
initially in an unqueued state.

00:48:05.640 --> 00:48:06.880
We dispatch it directly.

00:48:06.900 --> 00:48:09.850
That's just the way we've been
doing it since our initial

00:48:09.850 --> 00:48:11.920
accessibility implementations.

00:48:11.920 --> 00:48:14.520
So if you see that happen, well,
let's go to the other case.

00:48:14.520 --> 00:48:15.870
Let's say it hasn't been queued.

00:48:15.950 --> 00:48:17.280
Or sorry, it has been queued.

00:48:17.280 --> 00:48:18.880
That's the case you want to handle.

00:48:18.890 --> 00:48:20.540
If it has been queued,
you can go ahead and

00:48:20.540 --> 00:48:21.600
carry out your action.

00:48:21.620 --> 00:48:23.520
In this particular situation,
we've got a button.

00:48:23.520 --> 00:48:26.370
We just call HIV simulate click,
which will cause the button to flash,

00:48:26.370 --> 00:48:30.460
send out all the right Carbon events
so your application can respond to it.

00:48:30.460 --> 00:48:32.450
And it's safe to do it now
because the event's been queued.

00:48:32.450 --> 00:48:34.760
You already know the assistive
app has received an appropriate

00:48:34.760 --> 00:48:37.520
return value saying,
yeah, yeah, yeah, it was successful.

00:48:37.520 --> 00:48:39.720
And if it wasn't queued,
you need to return the

00:48:39.720 --> 00:48:42.510
event for access--sorry,
event defer accessibility

00:48:42.520 --> 00:48:44.240
event error from your handler.

00:48:44.250 --> 00:48:47.880
And that essentially is a request
to please queue this event and send

00:48:47.880 --> 00:48:49.950
it to me at some time later because
I know I'm going to put up some

00:48:49.970 --> 00:48:52.290
potentially blocking kind of interface.

00:48:52.290 --> 00:48:54.660
So that's really the only trick to it.

00:48:56.200 --> 00:48:59.290
Okay, so, so far we've been talking
about fairly easy cases,

00:48:59.300 --> 00:48:59.650
right?

00:48:59.900 --> 00:49:02.100
You've got an existing
view like a push button,

00:49:02.100 --> 00:49:05.770
you just want to add a description to it,
or then you've got an NHIViewer or an

00:49:05.770 --> 00:49:09.340
NSView subclass and you need to provide
some accessibility information above and

00:49:09.340 --> 00:49:11.100
beyond what the frameworks offer for you.

00:49:11.270 --> 00:49:15.720
But now the hardest case
is you've got some class,

00:49:15.720 --> 00:49:21.120
it's not derived from NSViewer or
NHIViewer and you have to provide all

00:49:21.120 --> 00:49:21.120
the accessibility information for it.

00:49:21.720 --> 00:49:23.170
Now we're not going to
go into tons of detail,

00:49:23.170 --> 00:49:26.000
mainly because we've already shown you
how to do this in the other examples.

00:49:26.000 --> 00:49:27.550
There's just some things
you need to realize.

00:49:27.600 --> 00:49:30.800
The first is that if you don't
inherit behavior from our

00:49:30.860 --> 00:49:34.260
standard views and objects,
you have to provide all the accessibility

00:49:34.260 --> 00:49:35.600
information for your objects.

00:49:35.600 --> 00:49:37.600
That means all the attributes.

00:49:37.600 --> 00:49:39.910
You have to tell size, position,
everything else you saw in

00:49:39.910 --> 00:49:41.600
the accessibility inspector.

00:49:41.600 --> 00:49:43.600
You have to provide all that.

00:49:43.600 --> 00:49:47.280
You also need to provide handlers
for hit testing and focus testing

00:49:47.280 --> 00:49:49.510
parts of the accessibility protocol.

00:49:49.600 --> 00:49:53.600
This allows assistive applications
to figure out what's under the mouse.

00:49:53.600 --> 00:49:56.600
In fact, that's the key for how
accessibility inspector works.

00:49:56.600 --> 00:49:59.690
It finds the mouse position and calls
an accessibility API to try to find

00:49:59.690 --> 00:50:01.580
out the element at that mouse position.

00:50:01.600 --> 00:50:04.530
And so if your custom elements don't
support hit testing and focus testing,

00:50:04.640 --> 00:50:08.600
there's no way accessibility browser
is going to work with your app.

00:50:08.600 --> 00:50:11.550
Another thing you have a responsibility
for is sending notifications.

00:50:11.610 --> 00:50:13.590
There's a handful of notifications.

00:50:13.600 --> 00:50:16.110
It's in the HI Services headers,
so you can take a look there

00:50:16.190 --> 00:50:17.580
for what needs to get sent out.

00:50:17.630 --> 00:50:19.820
But essentially it's for things like,
"My object's about to be

00:50:19.820 --> 00:50:22.600
destroyed," or "There was some
major state change with my object,

00:50:22.600 --> 00:50:26.170
like a value change." Well,
if you are implementing

00:50:26.170 --> 00:50:28.420
an element from scratch,
you need to make sure you send out

00:50:28.490 --> 00:50:29.600
those notifications appropriately.

00:50:29.600 --> 00:50:32.600
And we have both Carbon and
Cocoa APIs to do that.

00:50:38.840 --> 00:50:39.520
There we go.

00:50:39.680 --> 00:50:39.830
All right.

00:50:39.940 --> 00:50:44.190
So now let's talk about some things
you need to think about when you're

00:50:44.190 --> 00:50:46.180
accessorizing your application.

00:50:47.740 --> 00:50:49.260
Said it before,
we've said it actually a number

00:50:49.290 --> 00:50:50.440
of times in this session.

00:50:50.490 --> 00:50:51.920
If you can switch over
to the standard controls,

00:50:51.920 --> 00:50:53.690
you'll be much better off
because we're going to give

00:50:53.690 --> 00:50:55.000
you a lot of support for free.

00:50:55.000 --> 00:50:57.420
So again,
look at your applications interface.

00:50:57.420 --> 00:51:00.390
See if maybe you're using
some custom objects that we've

00:51:00.390 --> 00:51:04.080
provided some modern equivalents
for in recent operating systems,

00:51:04.080 --> 00:51:05.640
try to switch over to those.

00:51:05.640 --> 00:51:08.020
It's going to make your applications
interface better in a lot of ways.

00:51:08.020 --> 00:51:11.390
Obviously it's going to meet the
latest Aqua guidelines because hey,

00:51:11.390 --> 00:51:12.360
we're doing it.

00:51:12.360 --> 00:51:14.780
And it's going to give you
accessibility support for free.

00:51:14.780 --> 00:51:18.680
Now, a very subtle point is
don't invent new stuff.

00:51:19.030 --> 00:51:20.270
Don't try to come up with new roles.

00:51:20.360 --> 00:51:22.350
Don't think you need to
come up with new roles.

00:51:22.520 --> 00:51:25.630
And the main reason is that
assistive apps won't know how

00:51:25.640 --> 00:51:27.430
to deal with your new roles.

00:51:27.460 --> 00:51:31.550
Assistive apps are designed around
this fairly finite set of roles

00:51:31.590 --> 00:51:32.730
that we've already described.

00:51:32.800 --> 00:51:35.360
You know, there's groups,
there's lists and things like that.

00:51:35.460 --> 00:51:38.360
And if you invent a new role,
you're essentially asking every

00:51:38.360 --> 00:51:42.880
assistive application out there to
rev just to support your new widget.

00:51:43.110 --> 00:51:46.100
So really what you have to do is kind
of-- turn your widget around and think

00:51:46.100 --> 00:51:50.520
about what your widget is a lot like
in terms of the standard widgets.

00:51:50.520 --> 00:51:53.740
The best example I can give
for this is the crayon picker

00:51:53.740 --> 00:51:55.080
in the color picker panel.

00:51:55.130 --> 00:51:58.230
As we were going and accessorizing
various parts of the system,

00:51:58.250 --> 00:52:00.700
we got to the color picker and we said,
oh, wow, crayons.

00:52:00.830 --> 00:52:02.280
What are these things?

00:52:02.300 --> 00:52:02.600
I don't know.

00:52:02.600 --> 00:52:03.780
Do we need a new role for that?

00:52:03.780 --> 00:52:06.030
Is it a crayon role in a crayon box?

00:52:06.040 --> 00:52:06.900
I don't know.

00:52:06.960 --> 00:52:09.340
But we took a good hard
look at this and said,

00:52:09.340 --> 00:52:10.840
no, we don't need a new role.

00:52:10.920 --> 00:52:12.730
Because really,
when you click on one crayon,

00:52:12.810 --> 00:52:14.000
it selects that crayon.

00:52:14.050 --> 00:52:14.760
And it selects all the other crayons.

00:52:14.760 --> 00:52:17.980
It unselects all the
other crayons in the box.

00:52:18.000 --> 00:52:21.220
So really what you're talking about is
a radio button inside a radio group.

00:52:21.270 --> 00:52:22.760
So that's how we accessorized it.

00:52:22.760 --> 00:52:25.300
Every crayon's role is a radio button.

00:52:25.300 --> 00:52:28.380
And then the group around all
those crayons is a radio group.

00:52:28.450 --> 00:52:30.210
And suddenly,
assistive applications can just deal

00:52:30.210 --> 00:52:34.220
with that for free the way they've
already been dealing with radio groups.

00:52:39.650 --> 00:52:43.380
OK, so you've found some
part of your application,

00:52:43.430 --> 00:52:46.960
and you've decided to use one of
the standard rules to represent it.

00:52:47.030 --> 00:52:50.250
Now here's some of your
responsibilities after you do that.

00:52:50.320 --> 00:52:52.800
Take a look with
Accessibility Browser-- sorry,

00:52:52.800 --> 00:52:56.040
Accessibility Inspector--
and find some element in the

00:52:56.040 --> 00:52:57.400
system that has that same role.

00:52:57.470 --> 00:53:00.430
And make sure you support
all the same attributes.

00:53:00.500 --> 00:53:04.130
Assistive applications rely
on the fact that a given role

00:53:04.130 --> 00:53:08.640
implies certain attributes,
and actions, in fact, as well.

00:53:08.640 --> 00:53:11.610
For example,
an assistive application sees a button,

00:53:11.770 --> 00:53:13.800
it knows it's got a press action.

00:53:13.800 --> 00:53:16.080
It needs to be able to
assume that kind of thing.

00:53:16.150 --> 00:53:19.310
So make sure you support the
same attributes and actions

00:53:19.350 --> 00:53:21.240
as the standard roles.

00:53:21.430 --> 00:53:25.130
Now if you run into a
situation where your element,

00:53:25.130 --> 00:53:27.400
yeah,
pretty much fits into a standard role,

00:53:27.400 --> 00:53:30.940
but there's enough subtle difference
that you kind of want to call it out.

00:53:30.990 --> 00:53:33.100
But you don't want to force
all the assistive applications

00:53:33.160 --> 00:53:34.220
to rev to support you.

00:53:34.220 --> 00:53:37.680
You'd like to work for
free with voiceover.

00:53:37.680 --> 00:53:40.420
But you can do that through
a mechanism called sub-roles.

00:53:40.460 --> 00:53:44.700
Sub-role is just another
attribute on an element.

00:53:44.730 --> 00:53:46.640
The best example of this are windows.

00:53:46.640 --> 00:53:48.240
There's a bunch of different
types of windows on the system.

00:53:48.240 --> 00:53:51.510
We've got document windows,
floating windows, system windows, sheets,

00:53:51.560 --> 00:53:53.170
all these kinds of things.

00:53:53.180 --> 00:53:55.910
Sheets was a bad example because
that actually has a different role.

00:53:56.090 --> 00:53:59.500
But all those other types of
windows all use the window role.

00:53:59.500 --> 00:54:02.770
But we found that in some cases,
assistive applications need to tell

00:54:02.770 --> 00:54:06.240
the difference between a dialogue
window and a document window.

00:54:06.240 --> 00:54:07.650
So we do that with a sub-role.

00:54:07.780 --> 00:54:09.560
The sub-role says, oh, it's a document.

00:54:09.560 --> 00:54:10.560
Oh, it's a dialogue.

00:54:10.570 --> 00:54:14.470
And now an assistive application can,
if it wants, look at that sub-role and

00:54:14.470 --> 00:54:16.860
make a better decision about
what to do with your element.

00:54:16.930 --> 00:54:19.230
But at the same time,
it can keep working just like a

00:54:19.240 --> 00:54:20.720
window normally could in that app.

00:54:20.720 --> 00:54:23.080
So you don't force anybody to rev.

00:54:24.090 --> 00:54:27.900
Another thing we found is people
are very tempted to come up with

00:54:27.960 --> 00:54:32.370
a special role because they look
at an element's purpose in the

00:54:32.440 --> 00:54:35.040
sense of their overall application.

00:54:35.040 --> 00:54:37.090
For example,
you might have a toolbar and that

00:54:37.090 --> 00:54:39.000
toolbar might have a print button on it.

00:54:39.000 --> 00:54:41.640
And you realize that, hey,
printing is very fundamental

00:54:41.640 --> 00:54:42.510
to my application.

00:54:42.540 --> 00:54:45.030
So I really want this to be a print role.

00:54:45.030 --> 00:54:48.600
We need to avoid that temptation,
mainly because the notion that

00:54:48.600 --> 00:54:52.520
this button is a print button is
already conveyed by something else.

00:54:52.520 --> 00:54:53.980
We've given you a couple of
ways that that's possible.

00:54:54.000 --> 00:54:56.670
Obviously, that button might have
a title that says print,

00:54:56.670 --> 00:54:58.260
so the user already knows it prints.

00:54:58.260 --> 00:55:00.730
If it doesn't have a title,
you probably put a description

00:55:00.790 --> 00:55:01.900
on it that says print.

00:55:01.900 --> 00:55:04.970
So the user already has these ways
for determining a button's purpose.

00:55:04.970 --> 00:55:07.400
So don't be tempted to give it a
new role just because it has some

00:55:07.430 --> 00:55:09.080
unique purpose in your application.

00:55:11.960 --> 00:55:15.220
Again, just like with attributes,
you need to use the standard actions.

00:55:15.330 --> 00:55:19.980
There's a small handful of them,
and they support just the

00:55:20.070 --> 00:55:24.430
most basic mouse interaction.

00:55:24.560 --> 00:55:27.560
If you're tempted to give
an element a new action,

00:55:27.670 --> 00:55:30.660
see if maybe you can't achieve
the same thing by giving it

00:55:30.660 --> 00:55:32.490
an attribute that's settable.

00:55:32.620 --> 00:55:36.390
Best example of this is the
selectability of text in an edit field.

00:55:36.500 --> 00:55:40.030
We could have introduced some complex set
of actions so that you can set selection

00:55:40.030 --> 00:55:41.160
here and then set selection there.

00:55:41.160 --> 00:55:42.160
No, we don't bother with that.

00:55:42.160 --> 00:55:43.520
That gets really complex.

00:55:43.580 --> 00:55:45.550
Instead,
there's just a writable attribute

00:55:45.570 --> 00:55:49.750
that is the selected text range,
so the user can set that that way.

00:55:52.300 --> 00:57:20.800
[Transcript missing]

00:57:22.660 --> 00:57:25.470
So as we implement our interfaces,
a lot of us use grouping views.

00:57:25.470 --> 00:57:28.350
And in fact, some of these grouping views
that we put in our windows,

00:57:28.390 --> 00:57:29.880
they're forced on us by, well, me.

00:57:30.000 --> 00:57:31.970
You know,
I put various views in your windows,

00:57:31.970 --> 00:57:33.820
and Mike puts Cocoa views
in your windows.

00:57:33.820 --> 00:57:37.050
And so the real implementation hierarchy
might look something like this.

00:57:37.050 --> 00:57:38.000
You've got a window.

00:57:38.000 --> 00:57:39.850
Inside the window, there's a frame view.

00:57:39.850 --> 00:57:41.950
Inside that frame view,
there's a content view.

00:57:42.000 --> 00:57:44.710
Of course, there's other views for
implementation details.

00:57:44.730 --> 00:57:45.690
And there's a button.

00:57:45.760 --> 00:57:48.060
And in Cocoa,
there's even a button cell inside that.

00:57:48.240 --> 00:57:50.570
Well, you don't want all that
complexity to be seen by a user

00:57:50.570 --> 00:57:52.500
of an assistive application.

00:57:52.600 --> 00:57:55.110
Like VoiceOver,
mainly because a sighted user

00:57:55.110 --> 00:57:58.380
doesn't see that complexity either
when they glance at the interface.

00:57:58.380 --> 00:58:01.040
So for accessibility purposes,
you want your interface

00:58:01.120 --> 00:58:02.060
to look like this.

00:58:02.060 --> 00:58:03.820
There's a window,
and there's a button in it.

00:58:03.860 --> 00:58:07.010
And the way you achieve this is
through the notion of ignored elements.

00:58:07.090 --> 00:58:10.800
There's a Carbon API called
HIObjectSetAccessibilityIgnored.

00:58:10.800 --> 00:58:13.230
You can pass any HIObject,
which means any control.

00:58:13.230 --> 00:58:15.180
You really only want
to use it on controls.

00:58:15.180 --> 00:58:17.180
And you can say, hey,
ignore this control.

00:58:17.310 --> 00:58:19.640
You know,
I just use it for grouping purposes.

00:58:19.640 --> 00:58:22.760
And I think in Cocoa,
the method name is just

00:58:22.760 --> 00:58:23.960
set accessibility ignored.

00:58:23.960 --> 00:58:24.700
Accessibility is ignored.

00:58:24.700 --> 00:58:25.820
Accessibility is ignored.

00:58:25.820 --> 00:58:28.460
And you can just call that with
true to mark an object as ignored.

00:58:31.530 --> 00:58:33.460
Now,
a similar but subtly different point is

00:58:33.460 --> 00:58:35.720
the concept of suppressing an element.

00:58:35.720 --> 00:58:39.600
Some applications that we've
played with bring up parts of their

00:58:39.600 --> 00:58:42.080
interface just at a certain time.

00:58:42.080 --> 00:58:45.760
A good example might be a
download status dialog in an app.

00:58:45.760 --> 00:58:49.330
When the file's done downloading and
the app wants to get rid of that window,

00:58:49.330 --> 00:58:50.810
some apps just move it off screen.

00:58:50.940 --> 00:58:52.580
You know, they make sure they move it
to some crazy coordinate,

00:58:52.600 --> 00:58:55.760
10,000, 20,000, so they know it's not
visible to the user.

00:58:55.760 --> 00:58:58.330
Well, the problem with that
technique is accessibility

00:58:58.330 --> 00:58:59.900
still knows about that window.

00:58:59.960 --> 00:59:02.860
It still looks logically visible
from our API perspective,

00:59:02.950 --> 00:59:05.200
so both frameworks
report that to the user.

00:59:05.200 --> 00:59:07.550
And so that's really odd that a
user of VoiceOver can get this

00:59:07.550 --> 00:59:08.870
window that's off in la-la land.

00:59:09.140 --> 00:59:10.630
You want to avoid those
situations entirely.

00:59:10.760 --> 00:59:12.660
And it doesn't just happen with windows.

00:59:12.660 --> 00:59:15.430
Some applications move their controls
away to some crazy coordinate just so

00:59:15.430 --> 00:59:18.300
that they're not visible to the user.

00:59:18.300 --> 00:59:21.330
So if you are one of these applications
or you see your code doing this,

00:59:21.360 --> 00:59:24.760
make sure to logically hide the objects,
logically hide your windows,

00:59:24.760 --> 00:59:26.350
logically hide your controls.

00:59:26.360 --> 00:59:29.090
So one thing.

00:59:29.220 --> 00:59:29.900
Sometimes people new to accessibility.

00:59:29.900 --> 00:59:34.580
Get these two concepts mixed up,
ignored and hidden.

00:59:34.580 --> 00:59:37.850
So when something's ignored,
even though it's not there from

00:59:37.920 --> 00:59:43.070
an accessibility point of view,
its children sort of pass through.

00:59:43.370 --> 00:59:46.820
If you hide a view,
it's gone along with all its descendants.

00:59:46.970 --> 00:59:49.140
So those are really different concepts.

00:59:49.230 --> 00:59:53.540
And usually if something's ignored,
it's always ignored.

00:59:53.560 --> 00:59:57.330
And whereas as your UI,
if your UI is dynamics,

00:59:57.430 --> 01:00:00.800
whether something's hidden or
not might change over time.

01:00:00.880 --> 01:00:04.860
And so try not to get
those two things confused.

01:00:06.860 --> 01:00:10.320
So you'll also find other cases where
you need to provide accessibility

01:00:10.320 --> 01:00:14.540
information for an element that
doesn't have an object to back it.

01:00:14.590 --> 01:00:16.530
Best example of this is the scroll bar.

01:00:16.600 --> 01:00:19.240
If you use Accessibility Inspector and
you look at a scroll bar,

01:00:19.270 --> 01:00:22.490
sure, there's a scroll bar element there,
but there's also some button elements

01:00:22.490 --> 01:00:24.860
in the scroll bar to represent the up,
down, and left, right buttons.

01:00:24.900 --> 01:00:26.620
And in fact,
there's buttons to represent the

01:00:26.650 --> 01:00:29.480
page up and page down regions,
and then there's an indicator

01:00:29.480 --> 01:00:31.500
element to represent the thumb.

01:00:31.570 --> 01:00:34.640
Well, there's no actual view in our view
system to represent those subcomponents.

01:00:34.640 --> 01:00:37.340
It's all part of the
overarching scroll bar view.

01:00:37.400 --> 01:00:39.750
So if you have a similar sort of
situation in your application,

01:00:39.900 --> 01:00:42.630
the way to deal with that
is by creating objects,

01:00:42.740 --> 01:00:45.380
sort of dummy objects,
to represent them as

01:00:45.380 --> 01:00:47.110
accessibility objects.

01:00:47.160 --> 01:00:51.080
In Carbon, you'd create an HI object
subclass potentially to do that.

01:00:51.390 --> 01:00:53.470
When you do this,
you're fundamentally creating a

01:00:53.480 --> 01:00:55.440
new accessible object from scratch.

01:00:55.520 --> 01:00:58.170
So again,
you are responsible for providing all the

01:00:58.220 --> 01:01:01.060
attributes and actions for that object.

01:01:01.120 --> 01:01:04.540
But there's some shortcuts you can use
to sort of get around that requirement.

01:01:04.540 --> 01:01:08.500
Generally, you want the instance,
the dummy object, to provide things like

01:01:08.570 --> 01:01:09.410
the parent and the role.

01:01:09.690 --> 01:01:11.940
But oftentimes, you can either,
by routing Carbon events or

01:01:12.000 --> 01:01:14.440
calling methods on the parent,
you can delegate some of the

01:01:14.440 --> 01:01:16.830
responsibility to the parent
code to at least keep your

01:01:16.940 --> 01:01:18.640
code kind of self-contained.

01:01:18.740 --> 01:01:21.300
Another cool thing about this
is since they're dummy objects,

01:01:21.300 --> 01:01:23.500
you don't really need to create
them until they're needed.

01:01:23.500 --> 01:01:25.540
Don't instantiate them at
view construction time,

01:01:25.590 --> 01:01:27.850
because you don't necessarily
know that accessibility is on.

01:01:27.860 --> 01:01:30.430
And even if accessibility is on,
maybe the user's never going to

01:01:30.430 --> 01:01:31.930
go to that scroll bar or whatever.

01:01:32.020 --> 01:01:34.240
So create the instances
only when they're needed.

01:01:34.240 --> 01:01:39.040
Maybe the first time the
parent object is hit tested,

01:01:39.040 --> 01:01:41.690
or the parent object is asked
for its children attribute

01:01:41.700 --> 01:01:43.580
or something like that.

01:01:44.170 --> 01:01:46.140
And the other important point
is make sure the parent does the

01:01:46.140 --> 01:01:47.510
hit testing and focus testing.

01:01:47.700 --> 01:01:51.620
Otherwise, Accessible--sorry,
Assistive Applications won't be

01:01:51.680 --> 01:01:53.820
able to find those dummy objects.

01:01:55.290 --> 01:01:58.030
So now Mike is going to go into
some details on troubleshooting

01:01:58.040 --> 01:02:01.700
some common problems with the
accessorization of your applications.

01:02:01.920 --> 01:02:04.860
Okay, so yeah,
I have a few slides and I'm going to

01:02:04.860 --> 01:02:10.230
talk about some common problems that you
might run into accessorizing your app.

01:02:10.960 --> 01:02:12.760
So the first one's pretty simple.

01:02:12.770 --> 01:02:16.960
Make sure accessibility is on.

01:02:17.060 --> 01:02:21.820
You need to go to System Prefs,
and there's a checkbox that says,

01:02:21.920 --> 01:02:25.840
"Enable access for assistive devices."
And you need to make sure that's on.

01:02:25.870 --> 01:02:32.720
Now, this is not the same as turning
on Spoken Interface or VoiceOver,

01:02:32.720 --> 01:02:37.870
which is an assistive app
that requires the access for

01:02:37.870 --> 01:02:38.990
assistive devices to be on.

01:02:39.350 --> 01:02:43.340
and David So it's up to you whether
or not you want to enable voiceover.

01:02:45.070 --> 01:02:47.840
The next point is really
specific to Cocoa apps.

01:02:47.840 --> 01:02:52.130
And this is a pretty good habit
to run into if you're implementing

01:02:52.130 --> 01:02:54.750
accessibility on your Cocoa app.

01:02:54.770 --> 01:03:00.230
And that is to run with
NS Accessibility debug log level of 1.

01:03:00.390 --> 01:03:02.360
And I usually do this with
a command line argument,

01:03:02.360 --> 01:03:06.840
although you could write it to your
system prefs and always run that way.

01:03:06.940 --> 01:03:13.280
And I'll neither confirm nor deny
what values other than 1 will do.

01:03:13.560 --> 01:03:18.030
But if you specify one,
what's going to happen is,

01:03:18.030 --> 01:03:20.930
as the Cocoa app runs,
it's going to spew informative

01:03:20.930 --> 01:03:24.700
error messages to the console
concerning accessibility.

01:03:24.730 --> 01:03:28.740
Now, perhaps what's more important than
the error messages themselves is

01:03:28.790 --> 01:03:32.500
the fact that you're going to get a
clue that something's going wrong.

01:03:32.720 --> 01:03:35.480
One thing that both
Carbon and Cocoa do is,

01:03:35.930 --> 01:03:39.170
when handling requests from
assistive applications,

01:03:39.170 --> 01:03:42.750
is we eat any errors or any exceptions
that are raised during the process,

01:03:42.890 --> 01:03:45.430
because we don't want an assistive
app to be able to go in and

01:03:45.590 --> 01:03:47.150
crash some other application.

01:03:47.260 --> 01:03:51.980
And because we just eat these exceptions,
you may have no clue that

01:03:52.110 --> 01:03:55.950
something's going wrong,
and your app may just sort

01:03:55.950 --> 01:04:00.080
of mysteriously seem to not
work with accessibility.

01:04:00.080 --> 01:04:01.200
So if you turn on this option,

01:04:01.380 --> 01:04:04.000
If your app's not working
and you turn on this option,

01:04:04.000 --> 01:04:07.560
it's likely you're going to see
all kinds of spewage informing

01:04:07.630 --> 01:04:10.000
you of what might be going wrong.

01:04:13.460 --> 01:04:17.870
Now if we return to the example
Guy gave of a scroll bar and

01:04:17.940 --> 01:04:21.380
has it with its five children,
the up and down arrows and the page up

01:04:21.450 --> 01:04:26.360
and the page down region and the thumb,
and say you've gone through the trouble

01:04:26.360 --> 01:04:30.770
of implementing something like that,
and then you go over and you use the

01:04:30.830 --> 01:04:36.400
accessibility inspector and none of the
little pieces of your scroll bar show up.

01:04:36.590 --> 01:04:39.820
And that's pretty frustrating,
so I'm going to give you some tips on how

01:04:39.820 --> 01:04:42.240
I would go about sort of debugging that.

01:04:42.330 --> 01:04:45.190
First off, it could be that there's
something going wrong,

01:04:45.210 --> 01:04:48.750
some exception's being thrown,
and you just don't realize it.

01:04:48.900 --> 01:04:54.840
So if you use the NS Accessibility
Debug Log Level of 1,

01:04:54.990 --> 01:04:59.410
look at that console output,
see if some exception's being thrown,

01:04:59.410 --> 01:04:59.410
and that's the root of your problem.

01:05:00.690 --> 01:05:05.080
The next thing that might be going
wrong is in Accessibility Inspector,

01:05:05.080 --> 01:05:07.520
you're using the mouse to
sort of mouse over the widgets

01:05:07.520 --> 01:05:08.810
you're interested in looking at.

01:05:08.880 --> 01:05:10.860
And so that involves hit testing.

01:05:10.860 --> 01:05:14.620
Now, in the frameworks,
we can do hit testing and we can

01:05:14.620 --> 01:05:19.000
figure out if this points over a
window or even what view it's over.

01:05:19.000 --> 01:05:21.790
But the fact that there's
a thumb in your scroll bar,

01:05:21.790 --> 01:05:23.930
we have no idea that that's going on.

01:05:23.950 --> 01:05:28.100
And how accessibility works is we're
going to tell your scroll bar view,

01:05:28.100 --> 01:05:29.780
look, we think the mouse is in you.

01:05:29.990 --> 01:05:32.240
And now this is your chance
to refine that search and

01:05:32.320 --> 01:05:33.880
tell us about some children.

01:05:33.880 --> 01:05:37.490
And if you don't do that,
your children are not going to show up.

01:05:37.670 --> 01:05:38.950
So that's a common mistake.

01:05:42.560 --> 01:05:45.940
So, the next thing you might
want to look at is,

01:05:46.140 --> 01:05:49.660
if the children aren't showing up,
is actually go to the parent object.

01:05:49.760 --> 01:05:53.320
Maybe you can get your mouse over
that in Accessibility Inspector and

01:05:53.320 --> 01:05:54.580
look at the array of children.

01:05:54.580 --> 01:05:57.410
And if you're, you know,
if the thumb and the up and the down

01:05:57.410 --> 01:06:00.140
arrow aren't even in that array,
well then you've got even

01:06:00.260 --> 01:06:01.970
more fundamental problem.

01:06:01.970 --> 01:06:05.070
Perhaps there's some exception
being thrown that's keeping

01:06:05.170 --> 01:06:08.500
your children attribute from
returning the proper value.

01:06:12.100 --> 01:06:15.990
And if none of that is the problem,
then one other thing you might

01:06:15.990 --> 01:06:19.660
want to look at is the coordinates
you're using for your hit testing.

01:06:19.660 --> 01:06:24.930
Remember that the Accessibility APIs all
deal in terms of screen coordinates.

01:06:24.940 --> 01:06:28.820
Now, on the framework end,
we each have a slight twist on it.

01:06:28.820 --> 01:06:31.490
In Carbon apps,
you're going to get a coordinate in

01:06:31.650 --> 01:06:33.800
top left relative screen coordinates.

01:06:33.800 --> 01:06:36.810
And in Cocoa,
it's going to be bottom left relative.

01:06:36.910 --> 01:06:39.180
But in either case,
it's global coordinates.

01:06:39.260 --> 01:06:42.850
So if you're doing your computations
in sort of view relative coordinates,

01:06:42.890 --> 01:06:45.260
that could easily be what's going wrong.

01:06:45.260 --> 01:06:48.520
And then the final point is
something Guy already touched on,

01:06:48.520 --> 01:06:50.760
and that's the issue of
something being ignored.

01:06:50.760 --> 01:06:53.980
If the element you're
returning is ignored,

01:06:54.040 --> 01:06:56.920
then it's not going to work properly.

01:06:56.920 --> 01:07:03.060
And as an example, in Cocoa,
NSViews have no visible, you know,

01:07:03.060 --> 01:07:06.200
a plain generic view has nothing
to show for itself on the screen,

01:07:06.200 --> 01:07:07.840
no way for the user to interact with it.

01:07:07.980 --> 01:07:09.560
So by default, views are ignored.

01:07:09.560 --> 01:07:14.620
And if your object descends from NSView,
you need to go in there and have

01:07:14.620 --> 01:07:16.880
the accessibility is ignored method.

01:07:16.880 --> 01:07:19.220
You need to override it to return no.

01:07:25.200 --> 01:07:28.860
Here's a couple more problems
that sometimes arise.

01:07:28.890 --> 01:07:33.540
It's important that the hierarchy
be sort of self-consistent.

01:07:33.540 --> 01:07:36.830
And that means that if the
UI element says that some

01:07:36.880 --> 01:07:40.350
other UI element is its parent,
if I go to that parent and

01:07:40.350 --> 01:07:43.870
I look in the children list,
I better find that child in the list.

01:07:44.380 --> 01:07:47.810
And if that's not the case,
then you might get

01:07:47.810 --> 01:07:49.440
sort of weird behavior.

01:07:49.440 --> 01:07:52.850
You know,
the assistive app might work in an

01:07:52.870 --> 01:07:56.900
inconsistent way because depending on
what path it takes through the hierarchy,

01:07:57.010 --> 01:07:59.000
it may discover the child or it may not.

01:07:59.040 --> 01:08:03.190
So that's a common thing to look at,
and we actually have a tool

01:08:03.210 --> 01:08:05.530
that makes these checks for you.

01:08:08.130 --> 01:08:12.730
And then the last point is once
again something Guy mentioned before.

01:08:13.550 --> 01:08:18.120
Sometimes people's user interfaces
are dynamic and you hide things.

01:08:18.210 --> 01:08:22.270
Maybe you move it way off screen or
maybe you obscure it with something

01:08:22.270 --> 01:08:25.960
that draws opaque white over it.

01:08:26.040 --> 01:08:29.210
Well, if you do that,
the underlying elements are still going

01:08:29.370 --> 01:08:31.280
to be available to assistive apps.

01:08:31.280 --> 01:08:34.360
And assistive apps, you know,
they may press a button that

01:08:34.620 --> 01:08:36.280
no user could normally press.

01:08:36.280 --> 01:08:39.830
And this may exercise code paths in
your app that haven't been tested,

01:08:39.830 --> 01:08:41.880
rather dangerous thing to be doing.

01:08:41.880 --> 01:08:44.750
So you want to hide things
in a sort of proper way,

01:08:44.900 --> 01:08:48.550
either rip them out of the view
hierarchy completely or use the

01:08:48.620 --> 01:08:53.820
appropriate method from your
framework to actually hide the view.

01:08:56.880 --> 01:08:58.970
Our last major section is on performance.

01:08:59.060 --> 01:09:03.810
I have a couple slides that discuss
how should doing all this affect

01:09:03.890 --> 01:09:05.800
the performance of your application.

01:09:05.800 --> 01:09:09.040
The bottom line is it really shouldn't
affect the performance of your

01:09:09.090 --> 01:09:11.790
application unless accessibility is on.

01:09:11.800 --> 01:09:15.160
That's the principle that both
Carbon and Cocoa have used

01:09:15.160 --> 01:09:18.070
in implementing this stuff,
that we don't want anyone to

01:09:18.190 --> 01:09:21.800
pay any price for this unless
accessibility is turned on.

01:09:21.800 --> 01:09:24.920
And so to help you out with that,
you don't have to really

01:09:24.930 --> 01:09:26.800
worry about making our calls.

01:09:26.800 --> 01:09:27.800
We're pretty careful.

01:09:27.800 --> 01:09:32.780
If you want to set an attribute or
you want to post a notification,

01:09:32.800 --> 01:09:35.240
you know,
go ahead and do it because we're

01:09:35.240 --> 01:09:37.800
going to bail out really quickly
if accessibility is not on.

01:09:37.800 --> 01:09:38.800
And sometimes we're even smarter.

01:09:38.800 --> 01:09:43.630
When it comes to posting notifications,
if we're actually going to check,

01:09:43.810 --> 01:09:46.800
is anyone even listening for
notifications on this object?

01:09:46.800 --> 01:09:50.800
Because if no one is, you know,
we're going to do nothing.

01:09:50.800 --> 01:09:54.800
Now when it comes to your code,
if you want to optimize it this way,

01:09:54.800 --> 01:09:57.800
you're going to need a way to
test if accessibility is on.

01:09:57.850 --> 01:10:02.020
And you might want to use, in fact,
the only way to do this is to

01:10:02.100 --> 01:10:06.800
test if the accessibility API is
turned on using AX API enabled.

01:10:06.800 --> 01:10:12.640
And this is a call from the
accessibility API that you can make.

01:10:12.800 --> 01:10:16.800
And you should check it out before
you do any expensive operations.

01:10:16.800 --> 01:10:18.480
Another thing to note is
you shouldn't have to worry

01:10:18.580 --> 01:10:19.800
about accessibility being on.

01:10:19.800 --> 01:10:22.800
Don't worry about accessibility being
turned on while your app's running.

01:10:22.800 --> 01:10:25.110
If you make this check
at the beginning of,

01:10:25.220 --> 01:10:26.660
at launch, that's fine.

01:10:26.800 --> 01:10:28.800
I know if you get in
there and you play around,

01:10:28.800 --> 01:10:31.080
it kind of seems to work that
you can turn it on while an

01:10:31.080 --> 01:10:32.800
app's running and things work.

01:10:32.800 --> 01:10:34.740
But that's not something you can rely on.

01:10:35.240 --> 01:10:36.800
And it's, you know,
it's a little bit of a challenge.

01:10:38.200 --> 01:10:39.980
And so, again,
that's sort of a warning to

01:10:39.980 --> 01:10:41.860
the assistive app developers,
too.

01:10:41.860 --> 01:10:46.590
If accessibility gets turned on,
users are expected to quit and

01:10:46.590 --> 01:10:48.610
restart any running applications.

01:10:48.620 --> 01:10:52.240
And a final tip is something
also that Guy mentioned,

01:10:52.240 --> 01:10:55.370
is sort of be lazy about
creating any data structures

01:10:55.520 --> 01:10:56.740
associated with accessibility.

01:10:57.340 --> 01:11:00.780
So if we go back to the example of
the scroll bar with all the children,

01:11:00.780 --> 01:11:02.760
you know,
I would create the children when I'm

01:11:02.760 --> 01:11:06.680
asked for them and then only keep
them around long enough to satisfy

01:11:06.680 --> 01:11:08.210
that request and then throw them out.

01:11:08.220 --> 01:11:11.750
There's no reason to have these things
around and then they'll get out of

01:11:11.750 --> 01:11:13.860
sync if your scroll bar changes state.

01:11:13.860 --> 01:11:16.660
So it's much simpler just
to create them as needed.

01:11:20.510 --> 01:11:24.240
And now we have a couple slides talking
about the resources available to you.

01:11:24.240 --> 01:11:31.740
And the first one I want to plug is
our accessibility dev mailing list.

01:11:31.920 --> 01:11:35.070
And this is a public mailing list
that you should subscribe to.

01:11:35.070 --> 01:11:37.320
You can ask all your questions on it.

01:11:37.320 --> 01:11:41.540
If you come up with some weird widget
and you don't know how to accessorize it,

01:11:41.540 --> 01:11:43.560
you know, post an email.

01:11:43.620 --> 01:11:49.230
This list is trolled by Guy and myself
actively and some other engineers.

01:11:49.480 --> 01:11:52.090
And, you know, we don't promise that
we have all the answers.

01:11:52.230 --> 01:11:56.150
Accessibility has been a--the whole
story has been evolving since Jaguar.

01:11:56.150 --> 01:12:00.370
And more often than we'd like to admit,
you know, people come up with weird

01:12:00.380 --> 01:12:02.010
UIs that we hadn't thought about.

01:12:02.010 --> 01:12:04.280
How is this going to
work with accessibility?

01:12:04.320 --> 01:12:07.130
But if you post to this list,
we can usually steer you

01:12:07.130 --> 01:12:08.650
in the right direction.

01:12:10.290 --> 01:12:14.030
And finally, there's three documents
relating to accessibility.

01:12:14.040 --> 01:12:16.510
One of them is for people
writing assistive apps.

01:12:16.650 --> 01:12:19.000
And even if you're just
accessorizing your app,

01:12:19.070 --> 01:12:20.660
it might be useful to peruse that one.

01:12:20.660 --> 01:12:24.300
And then there's a Cocoa-specific
document and a Carbon-specific document

01:12:24.300 --> 01:12:26.420
for accessorizing your applications.

01:12:26.420 --> 01:12:31.530
And now we'll open it up for Q&A.