WEBVTT

00:00:12.290 --> 00:00:13.440
Thank you.

00:00:13.440 --> 00:00:15.320
Thank you and good morning.

00:00:15.400 --> 00:00:20.510
I went backwards already.

00:00:22.780 --> 00:00:37.030
This session is called
Understanding Document Binding.

00:00:37.030 --> 00:00:37.030
I thought that I should start
by explaining what we mean by

00:00:37.030 --> 00:00:37.030
document binding so we know
what we're talking about.

00:00:39.960 --> 00:00:46.900
One of the breakthrough or revolutionary
features of the original Mac back in

00:00:46.900 --> 00:00:52.050
1984 was the ability to let users double
click on a document and have it open in

00:00:52.050 --> 00:00:56.080
the right application or an application
that could work with the document.

00:00:56.200 --> 00:00:59.720
And this was revolutionary just
because the user didn't have to

00:00:59.740 --> 00:01:02.060
figure out which tools to use anymore.

00:01:02.100 --> 00:01:06.200
The user could just start
working on a document.

00:01:06.230 --> 00:01:09.780
And it's still a very
critical feature today.

00:01:10.920 --> 00:01:14.400
So very narrowly defined,
document binding is what makes that work.

00:01:14.400 --> 00:01:21.500
It's how the OS associates documents with
applications that can view and edit them.

00:01:21.540 --> 00:01:26.120
And on Mac OS X,
that service is provided by

00:01:26.120 --> 00:01:28.240
the Launch Services Framework.

00:01:28.310 --> 00:01:31.860
So that's the technology we're gonna
be talking about for the next hour,

00:01:31.860 --> 00:01:37.710
and specifically going into what's
new with Launch Services on Tiger.

00:01:37.900 --> 00:01:40.280
First, I gave a very narrow definition.

00:01:40.280 --> 00:01:43.020
Launch Services actually does
more than simply associate

00:01:43.090 --> 00:01:46.540
documents and applications,
and I wanted to review

00:01:46.540 --> 00:01:48.800
what those things are.

00:01:48.800 --> 00:01:53.740
It's an API that is used heavily
by the Finder and the Dock,

00:01:53.820 --> 00:01:59.800
other applications,
third-party applications to open things.

00:01:59.800 --> 00:02:02.740
It's an API that can actually
just open an application,

00:02:02.740 --> 00:02:08.940
open documents, and on Mac OS X,
we added the ability to associate URLs,

00:02:08.940 --> 00:02:12.020
specifically URL schemes,
with applications that

00:02:12.120 --> 00:02:13.800
can handle those URLs.

00:02:14.040 --> 00:02:18.200
And so there's API for opening all
of those things and creating new

00:02:18.200 --> 00:02:21.060
applications in the user's workspace.

00:02:21.670 --> 00:02:25.580
As I said, in order to make that work,
Launch Services figures out and keeps

00:02:25.580 --> 00:02:28.020
track of application document bindings.

00:02:28.040 --> 00:02:31.120
So it looks at your application,
looks at your info P list and

00:02:31.120 --> 00:02:34.330
figures out what kind of documents
and URLs you can handle and it

00:02:34.330 --> 00:02:36.370
remembers all those associations.

00:02:36.540 --> 00:02:39.620
Now, with so many applications
available today,

00:02:39.630 --> 00:02:43.740
there's often a number of applications
on the system that can handle

00:02:43.820 --> 00:02:46.170
any particular type of document.

00:02:46.480 --> 00:02:50.620
Launch Services keeps track of user
preferences so that we know actually

00:02:50.680 --> 00:02:55.550
which application is preferred when the
user double clicks on a given document.

00:02:56.580 --> 00:03:01.440
And then finally,
because there are certain things

00:03:01.550 --> 00:03:06.160
provided or related to document
binding that appear in the UI,

00:03:06.160 --> 00:03:08.860
such as in the finder and
in other applications,

00:03:08.860 --> 00:03:14.270
such as kind strings for a document,
localized display names for documents

00:03:14.270 --> 00:03:18.810
and applications and folders,
there's this abstraction layer,

00:03:18.830 --> 00:03:22.860
a thin abstraction layer above the file
system that Launch Services provides

00:03:22.860 --> 00:03:26.950
additional attributes that appear
in the UI that give us the nice user

00:03:27.050 --> 00:03:29.740
experience that we expect on the Mac.

00:03:29.810 --> 00:03:32.610
So those are the things
that Launch Services does.

00:03:32.620 --> 00:03:35.830
And I'd like to talk
then about the topics,

00:03:36.030 --> 00:03:37.930
if I can get this to work.

00:03:39.390 --> 00:03:42.720
The topics we want to talk
about today as far as what's

00:03:42.720 --> 00:03:46.080
new in Launch Services on Tiger.

00:03:47.420 --> 00:03:49.040
The first one is actually not new.

00:03:49.040 --> 00:03:53.560
Uniform Type Identifiers
were introduced in 10.3,

00:03:53.590 --> 00:03:57.300
but they were very specifically
introduced for one purpose,

00:03:57.370 --> 00:04:00.210
which was to support the
new Carbon Pasteboard API.

00:04:00.350 --> 00:04:03.180
And they're going to be used
much more widely on Tiger,

00:04:03.340 --> 00:04:06.070
and I want to give a quick
overview of what they are,

00:04:06.070 --> 00:04:10.750
how they work, because it's relevant to
the rest of the session.

00:04:11.600 --> 00:04:16.040
Uniform Type Identifiers are
going to be used in a new way to

00:04:16.070 --> 00:04:21.250
declare your document kinds in your
InfoP list so that you can simplify

00:04:21.580 --> 00:04:27.170
your InfoP list and benefit from
other features that UTIs provide.

00:04:27.690 --> 00:04:31.070
There are three new sets
of API in Launch Services.

00:04:31.170 --> 00:04:35.090
The first one is a new way
to access item attributes.

00:04:35.130 --> 00:04:38.320
That's the abstraction
layer over the file system.

00:04:38.320 --> 00:04:44.280
New API for actually setting and
reading user binding preferences.

00:04:44.280 --> 00:04:49.580
And new options for opening things.

00:04:49.580 --> 00:04:50.890
New ways to open documents, URLs,
and applications.

00:04:51.380 --> 00:04:56.960
I've got a little spiel about security
and how it relates to Launch Services.

00:04:57.170 --> 00:05:00.540
And I want to finish up with some
interesting ways in which we're extending

00:05:00.540 --> 00:05:04.670
the whole idea of opening things and how,
what kinds of things can be

00:05:04.670 --> 00:05:08.700
opened in the user's workspace.

00:05:08.810 --> 00:05:11.710
So let's start with
Uniform Type Identifiers.

00:05:17.290 --> 00:05:22.100
When Mac OS X was introduced,
we wanted to play really well with

00:05:22.190 --> 00:05:24.090
the rest of the computing world.

00:05:24.430 --> 00:05:28.580
One of the controversial things we did
was recognize file name extensions.

00:05:28.580 --> 00:05:30.960
We also wanted to work really
well with the Internet.

00:05:30.960 --> 00:05:34.560
These things were all facts of
life that we had to interoperate

00:05:34.760 --> 00:05:36.640
well with the computing world.

00:05:36.680 --> 00:05:43.780
It led to a kind of Tower of Babel as
far as how we identify data and file

00:05:43.780 --> 00:05:47.790
system object types on the system.

00:05:48.030 --> 00:05:51.590
And to use an example of this,
these are all the different

00:05:51.590 --> 00:05:54.970
ways that TIFF data might
be identified on Mac OS X.

00:05:54.970 --> 00:05:56.390
There's a MIME type.

00:05:56.410 --> 00:05:59.880
There's two file name
extensions that are distinct,

00:05:59.920 --> 00:06:01.900
but they mean the same thing.

00:06:01.900 --> 00:06:05.880
There's COCO's NS TIFF keyboard
type for the NS Pasteboard.

00:06:05.880 --> 00:06:10.430
And then there's the TIFF OS type,
which might be on the Carbon scrap or

00:06:10.610 --> 00:06:13.600
could be associated with a file on disk.

00:06:13.630 --> 00:06:17.670
And there was no system service
to kind of tie all these together.

00:06:17.900 --> 00:06:20.000
And make it clear that they were related.

00:06:20.000 --> 00:06:23.180
There was Internet config,
but it didn't cover all

00:06:23.180 --> 00:06:26.100
of these namespaces,
and it was really geared

00:06:26.100 --> 00:06:27.760
towards the Internet.

00:06:27.760 --> 00:06:33.570
And we wanted to provide a general
service for abstractly recognizing types,

00:06:33.570 --> 00:06:35.720
and that's what UTIs are.

00:06:35.740 --> 00:06:39.790
We decided we needed to introduce
a new namespace because none of the

00:06:40.110 --> 00:06:42.180
existing ones really did the trick.

00:06:42.260 --> 00:06:46.420
They were too prone to collisions,
or in order to avoid collisions,

00:06:46.420 --> 00:06:49.370
like MIME type,
they required registration.

00:06:49.380 --> 00:06:53.870
And there were all sorts of MIME types
that aren't even declared or don't

00:06:53.870 --> 00:06:58.270
exist yet that we wanted to associate
with the files on the system.

00:06:58.280 --> 00:07:02.330
And so we didn't want to
be tied to MIME types.

00:07:02.490 --> 00:07:06.580
We created a new naming convention
called Uniform Type Identifier.

00:07:06.610 --> 00:07:08.780
This is an example, public.tiff.

00:07:08.880 --> 00:07:13.930
And what's key to making it not
just another namespace is that built

00:07:13.930 --> 00:07:19.230
into the system is the ability to
map it to other type namespaces.

00:07:20.810 --> 00:07:24.880
The API associated with UTIs
allows you to go back and forth

00:07:24.880 --> 00:07:29.500
between a UTI and a MIME type,
file name extension, and so on.

00:07:29.550 --> 00:07:33.500
It's very easy to, given a file,
figure out what its UTI is,

00:07:33.670 --> 00:07:37.410
given some data on the pasteboard,
see its UTI, and so on.

00:07:38.320 --> 00:07:41.490
That's one thing that's built in that

00:07:42.090 --> 00:07:44.940
helps us make sense of all
this type identification stuff.

00:07:44.940 --> 00:07:49.040
I'm gonna have to bend down like
this to get the slides to go forward.

00:07:49.050 --> 00:07:50.520
What about the namespace?

00:07:50.600 --> 00:07:53.830
Well, we...

00:07:54.040 --> 00:07:59.640
When Mac OS X was introduced,
we borrowed from Java to use the reverse

00:07:59.720 --> 00:08:02.140
DNS namespace for bundle identifiers.

00:08:02.260 --> 00:08:04.300
In a way,
a bundle identifier is the modern

00:08:04.300 --> 00:08:07.420
replacement for the creator
signature on an application.

00:08:07.420 --> 00:08:12.300
It was natural to extend
that to type identifiers.

00:08:12.300 --> 00:08:16.380
Let me bring up a couple
of other examples.

00:08:16.380 --> 00:08:20.770
For types that are proprietary or
owned by a particular organization,

00:08:20.770 --> 00:08:23.460
we use the reverse DNS naming convention.

00:08:23.460 --> 00:08:27.010
com.apple.picked is a
quick draw picture data.

00:08:27.190 --> 00:08:33.020
com.adobe.photoshop.psd would be
an example of a Photoshop document.

00:08:33.020 --> 00:08:35.820
The important thing is
that they're unique.

00:08:35.900 --> 00:08:40.780
The name doesn't imply any
sort of type hierarchy,

00:08:40.780 --> 00:08:42.460
as with mind types.

00:08:42.460 --> 00:08:47.180
But the important thing is that using
reverse DNS makes it naturally unique,

00:08:47.180 --> 00:08:48.540
and we're not going to have collisions.

00:08:48.540 --> 00:08:49.940
They're also kind of verbose.

00:08:49.940 --> 00:08:50.700
You can read them.

00:08:50.700 --> 00:08:52.940
You know what organization
they're associated with,

00:08:52.940 --> 00:08:56.290
who to go to for more information
about a type you're not familiar with.

00:08:56.300 --> 00:09:00.800
And then for types that really
are in the public domain or not

00:09:00.800 --> 00:09:05.260
owned by any of the standard types,
we just put those in the public.

00:09:05.340 --> 00:09:13.510
So that it's clear that they're
UTIs and that they're standard.

00:09:15.570 --> 00:09:19.160
Now, I mentioned the type
hierarchy with MIME types.

00:09:19.160 --> 00:09:21.570
We wanted to go further than that.

00:09:22.050 --> 00:09:24.500
The MIME type hierarchy is very fixed.

00:09:24.500 --> 00:09:28.640
It's built into the
name and fairly simple.

00:09:28.640 --> 00:09:33.450
You've got images, audio, video, text.

00:09:33.690 --> 00:09:39.240
We felt it was important to have a
runtime to identify types in a hierarchy.

00:09:39.240 --> 00:09:42.070
As we go through the session and
other sessions later this week,

00:09:42.270 --> 00:09:44.600
you'll see how that hierarchy is useful.

00:09:44.720 --> 00:09:48.430
These are all examples of images,
the same types I had on the last slide.

00:09:48.970 --> 00:09:54.570
They are declared as being subtypes
or conforming to public.image,

00:09:54.680 --> 00:09:56.510
an abstract type.

00:09:57.020 --> 00:10:02.320
This is important because users
think of these files as images.

00:10:02.320 --> 00:10:06.760
By associating them as subtypes
of something called public.image,

00:10:06.780 --> 00:10:11.560
we can associate certain attributes
that are associated with images,

00:10:11.560 --> 00:10:15.770
such as the resolution, height, width,
and so on.

00:10:15.800 --> 00:10:21.890
This is something that Spotlight uses
a lot for building the metadata store.

00:10:22.800 --> 00:10:25.820
To go a step further,
all images are data streams,

00:10:25.860 --> 00:10:31.380
and so pretty much every file on
disk is a subtype of public.data

00:10:31.650 --> 00:10:34.020
because it's a data stream.

00:10:34.500 --> 00:10:37.890
But because it's a multiple
inheritance hierarchy,

00:10:37.890 --> 00:10:42.790
we can add other tags, if you will,
or names to a type.

00:10:42.900 --> 00:10:46.830
And content is something that
reflects document content,

00:10:46.910 --> 00:10:49.160
something that when the
user double clicks on it,

00:10:49.160 --> 00:10:51.710
it's going to open as a document,
something they can edit.

00:10:53.100 --> 00:10:56.860
Just some other examples of
abstract types like that.

00:10:56.860 --> 00:11:00.700
Let's look at subtypes of content.

00:11:00.900 --> 00:11:04.920
We've got images,
of which I gave a few concrete examples.

00:11:05.170 --> 00:11:10.060
We've also got public.text,
which is anything which is text encoded.

00:11:10.120 --> 00:11:14.330
This is not going to be a complete
overview of the type hierarchy.

00:11:14.340 --> 00:11:17.570
This session is not
supposed to be about UTIs,

00:11:17.700 --> 00:11:21.540
but it's important to get
a feel for what it's like.

00:11:21.540 --> 00:11:21.540
There's some documentation
I can point you at later.

00:11:22.140 --> 00:11:29.160
Audiovisual Content Audiovisual
Content is a way to group all

00:11:29.160 --> 00:11:29.160
time-based media together.

00:11:32.800 --> 00:11:35.510
We can also model different
kinds of directories.

00:11:35.620 --> 00:11:41.580
So we use directories in a lot of
different ways in the file system now.

00:11:41.580 --> 00:11:45.360
But the root type for
directories is public.directory.

00:11:45.490 --> 00:11:47.460
And everything pretty much
goes into two categories.

00:11:47.460 --> 00:11:50.060
Either it's a folder,
which is something the

00:11:50.060 --> 00:11:52.600
user can navigate into,
or it's a package,

00:11:52.600 --> 00:11:57.250
which is something we define as something
that to the user looks like a file.

00:11:57.260 --> 00:12:02.900
And an example of a concrete
package is an application bundle.

00:12:04.520 --> 00:12:07.060
Finally,
I just wanted to give another example

00:12:07.130 --> 00:12:10.090
of how multiple inheritance can be used.

00:12:11.370 --> 00:12:13.290
There's several kinds of
applications on the system.

00:12:13.330 --> 00:12:14.440
There's application bundles.

00:12:14.440 --> 00:12:17.500
There's also files with the type APPL,
which can be applications.

00:12:17.600 --> 00:12:21.820
And so we have an abstract
supertype com.apple.application.

00:12:21.900 --> 00:12:26.190
And you can use that, for instance,
in a file selection dialog.

00:12:26.200 --> 00:12:31.940
If you filter for just one UTI,
com.apple.application,

00:12:31.970 --> 00:12:34.680
the user will be able to
select any kind of application,

00:12:34.680 --> 00:12:38.520
whether it's a bundle or a file.

00:12:39.490 --> 00:12:43.950
So it gives us this very
rich type description model.

00:12:43.950 --> 00:12:45.390
And it's extensible.

00:12:45.430 --> 00:12:49.520
Because the name space
naturally avoids collisions,

00:12:49.770 --> 00:12:53.730
you can add your type to the hierarchy.

00:12:53.970 --> 00:12:57.260
And you do that by putting a
declaration in your info P list.

00:12:57.300 --> 00:12:59.660
It's some XML, which is pretty simple.

00:12:59.660 --> 00:13:02.840
It's similar to how document
types are currently declared.

00:13:02.840 --> 00:13:05.080
You give the type identifier.

00:13:05.080 --> 00:13:06.640
You say what it conforms to.

00:13:06.640 --> 00:13:11.470
And then you list out the different
kinds of tags or other name spaces,

00:13:11.480 --> 00:13:17.240
such as this one has two file
name extensions and one mind type.

00:13:17.250 --> 00:13:21.620
And that's how you create
automatic mappings between the UTI,

00:13:21.720 --> 00:13:26.110
the abstract type, that is,
and specific name space tags.

00:13:26.790 --> 00:13:29.920
So those are the key points about UTIs.

00:13:30.000 --> 00:13:33.500
We've got naming conventions
that ensure uniqueness.

00:13:33.500 --> 00:13:37.740
It gives us an abstract idea of
what a type is independent of

00:13:37.740 --> 00:13:39.920
all the different namespaces.

00:13:40.310 --> 00:13:44.430
They also exist in a hierarchy,
which gives us a nice model for

00:13:44.550 --> 00:13:47.400
filtering and associating metadata.

00:13:47.450 --> 00:13:51.250
And the key is to declare your own
types so that other applications

00:13:51.250 --> 00:13:53.000
can take advantage of them.

00:13:53.070 --> 00:13:55.760
And you'll see some
advantages of that later on.

00:13:55.790 --> 00:13:59.000
In 10.3, there were not a whole lot
of types declared because,

00:13:59.010 --> 00:14:01.840
as I said, it was targeted really
just the pasteboard.

00:14:01.870 --> 00:14:03.850
But we've added a lot more.

00:14:03.850 --> 00:14:09.470
There are string constants for them along
with some commentary in this header,

00:14:09.520 --> 00:14:10.790
UTCoreTypes.h.

00:14:11.450 --> 00:14:12.710
So enough of that.

00:14:12.720 --> 00:14:17.130
Let's go on more specifically to
Launch Services and how UTIs can

00:14:18.030 --> 00:14:21.410
simplify your application development.

00:14:27.430 --> 00:14:31.350
When you declare your document types,
that is, what kinds of documents you

00:14:31.350 --> 00:14:33.670
can open in your application,

00:14:34.850 --> 00:14:36.330
It's fairly laborious.

00:14:36.400 --> 00:14:41.360
You have to,
even for basic types like JPEG, TIFF,

00:14:41.360 --> 00:14:44.350
or text files,
you have to go through and you

00:14:44.410 --> 00:14:46.860
list every possible OS type,
every MIME type,

00:14:46.940 --> 00:14:50.030
every file name extension
that you want to recognize.

00:14:50.050 --> 00:14:52.280
It's kind of very literal.

00:14:52.320 --> 00:14:56.020
And there's no notion of
abstractly recognizing a type.

00:14:56.100 --> 00:14:59.320
And that means every application
that opens JPEGs has to come up with

00:14:59.320 --> 00:15:01.500
the right list of JPEG identifiers.

00:15:01.640 --> 00:15:03.880
And more importantly, if you open text,
well,

00:15:03.880 --> 00:15:07.170
there's no way in the world that you
can possibly list every file name

00:15:07.170 --> 00:15:10.120
extension that might be a text type.

00:15:11.050 --> 00:15:13.550
So,
UTIs allow us to simplify that process

00:15:13.780 --> 00:15:17.970
and leverage the type hierarchy
and type knowledge contributed by

00:15:17.970 --> 00:15:20.110
other applications on the system.

00:15:20.660 --> 00:15:25.660
is the founder of the company,
and he's been working

00:15:25.660 --> 00:15:28.240
with us for a long time.

00:15:30.080 --> 00:15:33.940
Here is, this is pulled from preview.app.

00:15:34.070 --> 00:15:35.950
This is...

00:15:36.390 --> 00:15:39.360
Not even the whole type declaration,
but this is just for three types.

00:15:39.490 --> 00:15:43.740
We've got TIFF, JPEG, and PICT.

00:15:43.860 --> 00:15:47.040
And it's saying that it's a
viewer for these three types.

00:15:47.110 --> 00:15:52.580
It lists all of the different
file name extensions and OS types,

00:15:52.580 --> 00:15:55.200
and it provides an
icon and a kind string.

00:15:55.200 --> 00:15:58.060
And it's a lot of text.

00:15:58.060 --> 00:15:59.760
I purposely made it unreadable.

00:15:59.790 --> 00:16:06.630
That's the point.

00:16:06.630 --> 00:16:06.630
It's small because there's a lot of it,
and I had to fit it all in one slide.

00:16:08.700 --> 00:16:11.750
On Tiger, you can simplify all that.

00:16:11.860 --> 00:16:16.100
We've got one dictionary here of
listing several document types,

00:16:16.100 --> 00:16:20.440
and it uses a new key:
LS_ITEM_CONTENT_TYPES.

00:16:20.600 --> 00:16:23.890
And it's an array of UTIs.

00:16:25.100 --> 00:16:30.000
claiming JPEG, TIFF, and PICT,
the same three types from the last slide.

00:16:30.000 --> 00:16:34.100
And it says that the application
is a viewer for these types.

00:16:34.100 --> 00:16:38.330
And it doesn't... If you don't want to,
you don't even have to provide an icon

00:16:38.360 --> 00:16:42.120
or a kinestring because the system
will provide the default icon and

00:16:42.120 --> 00:16:44.700
kinestring associated with those types.

00:16:44.700 --> 00:16:48.060
You still can if you want to
have a branded icon when a

00:16:48.070 --> 00:16:49.740
file is bound to your app.

00:16:49.830 --> 00:16:51.460
You can provide an icon,
but you don't have to.

00:16:51.920 --> 00:16:55.830
You don't risk having a completely
generic document show up,

00:16:56.170 --> 00:16:58.580
document icon show up
by not providing one.

00:16:58.580 --> 00:17:01.080
So as you can see, this is much simpler.

00:17:01.080 --> 00:17:06.990
And it allows all applications using
this style of declaration to have the

00:17:07.410 --> 00:17:12.210
same definition of what a JPEG is,
what a TIFF is, and what a PICT is.

00:17:12.220 --> 00:17:15.600
So everyone's using the same extensions,
the same OS types,

00:17:15.690 --> 00:17:18.560
because that's controlled
elsewhere by the type declaration.

00:17:18.560 --> 00:17:23.400
Another way to think of it is that
we've... We took what was document

00:17:23.400 --> 00:17:27.840
type declarations and we split it
up into an abstract type and then an

00:17:27.840 --> 00:17:31.840
association of the type with a role,
in this case, viewer.

00:17:38.240 --> 00:17:42.720
Another example,
I call this a free lunch,

00:17:42.810 --> 00:17:49.040
because if you want to claim
to open all plain text files,

00:17:49.910 --> 00:17:54.910
The advantage of doing this is that
you suddenly gain the ability to

00:17:54.950 --> 00:17:59.800
open a plain text file declared by
some other application on the system.

00:17:59.820 --> 00:18:03.180
So you don't even have to
know what the extension is or

00:18:03.180 --> 00:18:05.300
how it's identified as text.

00:18:05.420 --> 00:18:07.260
You rely on the system to determine that.

00:18:24.670 --> 00:18:24.670
If you declare this this way,
then somebody will

00:18:24.670 --> 00:18:24.670
take a plain text file,
try to drop it on your application,

00:18:24.670 --> 00:18:24.670
and they'll get the right feedback,
and the document can be dropped,

00:18:24.670 --> 00:18:24.670
even though you might have no
idea what the extension is.

00:18:26.700 --> 00:18:38.300
[Transcript missing]

00:18:38.300 --> 00:18:43.360
is a new way to allow folders and hard
disks to be dropped onto an application.

00:18:43.390 --> 00:18:47.160
Now we have UTIs for those,
as well as for package types and so on.

00:18:47.210 --> 00:18:51.420
And those can be listed as LS item
content types in your plist.

00:18:51.600 --> 00:18:56.310
So I think what I should do now
is switch over to the demo machine

00:18:56.380 --> 00:19:01.010
and just give an example here
of what I've been talking about.

00:19:01.660 --> 00:19:04.900
The example I picked is TextEdit.

00:19:04.900 --> 00:19:07.600
Everyone knows what it is.

00:19:07.600 --> 00:19:14.740
The source code is available as an
example on the DVD you received.

00:19:14.850 --> 00:19:18.530
We're starting out with stock TextEdit.

00:19:18.690 --> 00:19:19.600
Let's see what it can do.

00:19:19.600 --> 00:19:24.160
I'm going to show a series of drag
and drop operations because that's

00:19:24.250 --> 00:19:25.960
an easy way to test document binding.

00:19:25.960 --> 00:19:28.940
You get feedback as to
whether the application is

00:19:28.960 --> 00:19:30.830
going to accept a document.

00:19:30.870 --> 00:19:32.920
Here's a plain text shopping list.

00:19:32.990 --> 00:19:36.920
Obviously, that is going to work.

00:19:37.340 --> 00:19:39.600
Let's move along.

00:19:40.010 --> 00:19:41.580
Here's a .c file, source code.

00:19:41.580 --> 00:19:44.810
Is it going to be able to handle that?

00:19:44.810 --> 00:19:44.810
Probably.

00:19:45.140 --> 00:19:46.160
Here's some HTML.

00:19:46.160 --> 00:19:49.660
I'm not sure what it's
gonna do with that,

00:19:49.690 --> 00:19:52.450
but it is text, so let's see.

00:19:52.720 --> 00:19:56.280
Okay, so actually TextEdit
knows how to render HTML.

00:19:56.280 --> 00:19:57.590
That's kind of nice.

00:19:57.660 --> 00:19:59.600
It gives me a nice rich text display.

00:19:59.600 --> 00:20:01.520
Now here's a PDF.

00:20:01.920 --> 00:20:04.260
That's not really a text file,
but let's see what

00:20:04.260 --> 00:20:05.590
TextEdit's going to do.

00:20:05.590 --> 00:20:06.830
Looks like maybe it is going to open it.

00:20:06.900 --> 00:20:11.180
Oh, that's kind of disappointing,
isn't it?

00:20:13.660 --> 00:20:17.420
It's kind of a downer because it looked
like it was going to do the right thing,

00:20:17.420 --> 00:20:19.050
and it really didn't.

00:20:19.160 --> 00:20:22.150
This just -- that's not what I want.

00:20:22.170 --> 00:20:23.550
Well, so that's not so good.

00:20:23.690 --> 00:20:26.060
I wonder -- well,
I wonder what would happen

00:20:26.060 --> 00:20:27.480
if I grabbed a hard disk.

00:20:27.480 --> 00:20:29.830
Well, it looks like it can open those,
too.

00:20:30.250 --> 00:20:35.470
At least it didn't try to display
the contents of my hard disk.

00:20:36.000 --> 00:20:53.200
[Transcript missing]

00:20:53.460 --> 00:20:58.580
gives a stab at recognizing anything as
a text file and trying to display it.

00:20:58.700 --> 00:21:24.500
[Transcript missing]

00:21:26.840 --> 00:21:37.510
is a very good example of how to
use the CFBundle document types.

00:21:37.770 --> 00:21:41.070
is a very interesting person.

00:21:41.070 --> 00:21:48.130
He's been working on a lot of
things in the last couple of years.

00:21:48.790 --> 00:21:54.480
and that asterisk is really what,
they don't even have to list

00:21:54.610 --> 00:21:55.720
anything else in their P list.

00:21:55.720 --> 00:21:59.540
If you just list an asterisk, it says,
let anything be dropped

00:21:59.630 --> 00:22:00.640
on this application.

00:22:00.640 --> 00:22:04.280
And with UTIs,
we can do a little bit better than that.

00:22:04.280 --> 00:22:06.100
And I'm gonna,

00:22:07.220 --> 00:22:13.820
Go in here and just
get rid of everything.

00:22:13.820 --> 00:22:14.900
And I even want to...

00:22:15.120 --> 00:22:17.240
Get rid of most of these here.

00:22:17.240 --> 00:22:23.060
Get rid of the icon, line types,
type name.

00:22:23.700 --> 00:22:26.850
OS types, we need that.

00:22:27.040 --> 00:22:28.940
We've got the role, it's an editor.

00:22:28.940 --> 00:22:37.300
And I'm gonna create a new key,
LS item content types.

00:22:37.300 --> 00:22:44.100
And if I don't get it exactly right,
it'll be a sad demo.

00:22:44.100 --> 00:22:49.490
And this is an array.

00:22:54.000 --> 00:22:59.840
And let's add a UTI here.

00:22:59.840 --> 00:23:01.810
Public.Text.

00:23:01.850 --> 00:23:05.510
So this is saying open
any kind of text file.

00:23:05.990 --> 00:23:09.220
By the way,
the difference between text and

00:23:09.220 --> 00:23:14.030
plain dash text is that text
includes things like HTML or RTF,

00:23:14.230 --> 00:23:15.720
text with markup.

00:23:15.890 --> 00:23:18.240
Plain text has no markup.

00:23:18.380 --> 00:23:20.930
So I built it, I think.

00:23:21.320 --> 00:23:26.190
and let's see, this was actually the
build target right here.

00:23:26.220 --> 00:23:27.000
Let's see what happens.

00:23:27.070 --> 00:23:30.030
We can still open shopping lists.

00:23:31.700 --> 00:23:46.600
[Transcript missing]

00:23:46.940 --> 00:23:50.570
If we grab PDF, however,
it won't let us drop it anymore,

00:23:50.660 --> 00:23:53.340
because PDF is not a type of text.

00:23:53.370 --> 00:23:56.330
And why don't we grab the hard disk,
and sure enough,

00:23:56.330 --> 00:23:57.960
it won't let us drop that either.

00:23:57.980 --> 00:24:01.360
In fact, the finder is showing
the Make Alias icon,

00:24:01.370 --> 00:24:05.070
because it's gonna make an alias
in this folder if I drop it here.

00:24:05.730 --> 00:24:08.840
So we've improved the user
feedback there and simplified

00:24:08.840 --> 00:24:10.250
the P list at the same time.

00:24:10.400 --> 00:24:14.600
Now, just one more quick example.

00:24:14.710 --> 00:24:18.280
Suppose for some reason we wanted to
add back the ability to open volumes,

00:24:18.420 --> 00:24:20.480
TextEdit suddenly could browse volumes.

00:24:20.480 --> 00:24:23.770
So let's add one more UTI in here.

00:24:38.210 --> 00:24:41.500
should be able to drop
that if we wanted to.

00:24:41.520 --> 00:24:50.700
So by adding one value to the P list,
we can really get very precise

00:24:50.900 --> 00:24:55.280
definition or declaration,
if you will, of what kinds of documents

00:24:55.750 --> 00:24:58.030
your application can open.

00:25:00.700 --> 00:25:10.400
[Transcript missing]

00:25:10.870 --> 00:25:13.160
When you double click a
particular kind of document,

00:25:13.270 --> 00:25:17.720
if there's an application
that specifically claims

00:25:17.800 --> 00:25:21.280
that UTI or document kind,
it will be preferred.

00:25:21.370 --> 00:25:24.720
But if there is no specific
application available like that,

00:25:24.910 --> 00:25:29.140
then an application, say,
claiming plain text will become a

00:25:29.140 --> 00:25:31.810
candidate for opening a text file.

00:25:34.100 --> 00:25:37.730
So one problem with all this
is that you're going to start

00:25:37.740 --> 00:25:40.600
getting open document events,
ODoc, Apple events,

00:25:40.600 --> 00:25:43.410
for files that you may
not know anything about.

00:25:43.670 --> 00:25:48.420
You may not recognize any of the
metadata associated with that file.

00:25:48.420 --> 00:25:50.440
So you need to know
what kind of file it is.

00:25:50.440 --> 00:25:54.840
And for that, we're providing new
API in Launch Services.

00:25:55.280 --> 00:25:59.710
There's a new content type property
associated with everything on disk.

00:25:59.720 --> 00:26:02.220
It's not actually on disk,
but you get at it

00:26:02.600 --> 00:26:04.040
through Launch Services.

00:26:04.040 --> 00:26:08.320
There's really no need to store yet
another type identifier on disk,

00:26:08.320 --> 00:26:12.370
because we've got file name extensions,
we've got OS types.

00:26:12.380 --> 00:26:16.140
And so the content type is a
UTI that is essentially derived

00:26:16.150 --> 00:26:19.870
from all the available metadata,
and you just have to ask

00:26:20.170 --> 00:26:24.230
Launch Services what the content type is,
and then you know.

00:26:24.990 --> 00:26:26.980
And it may be a very
specific subtype that,

00:26:26.980 --> 00:26:30.510
again, you don't know anything about,
but you can test it for conformance

00:26:30.620 --> 00:26:32.220
to the types you do recognize.

00:26:32.220 --> 00:26:36.460
So if you recognize plain text, you say,
okay, I've got a UTI.

00:26:36.460 --> 00:26:38.310
Does it conform to plain text?

00:26:38.350 --> 00:26:42.380
You ask us that, and we say yes,
and then you know what to do with it.

00:26:46.000 --> 00:26:49.420
As far as API,
to get at the content type attribute,

00:26:49.420 --> 00:26:53.660
we could have just added a new method,
say, given this FSRef,

00:26:53.660 --> 00:26:55.590
what is the content type?

00:26:55.620 --> 00:26:59.920
The reason we didn't do that was that
we kind of have been adding a number of

00:26:59.920 --> 00:27:02.080
those on with each release of Mac OS X.

00:27:02.080 --> 00:27:04.840
First, there was the kind string
that you could get for a file.

00:27:04.840 --> 00:27:07.180
Then there was the display name.

00:27:07.180 --> 00:27:10.590
The problem is that each
of those introduce I.O.

00:27:10.590 --> 00:27:11.830
or cause I.O.

00:27:11.830 --> 00:27:12.780
to happen.

00:27:12.780 --> 00:27:15.230
And so if you have to
get several attributes,

00:27:15.230 --> 00:27:15.920
the I.O.

00:27:15.920 --> 00:27:17.680
gets done over and over again.

00:27:17.830 --> 00:27:20.430
So we've generalized that
to two new functions,

00:27:20.570 --> 00:27:23.480
LS copy item attribute and,
more interestingly,

00:27:23.480 --> 00:27:26.460
LS copy item attributes, a bulk call.

00:27:26.460 --> 00:27:33.320
So that attributes have names,
and you also have to provide a role mask,

00:27:33.410 --> 00:27:36.480
which means, you know,
you're asking for an attribute

00:27:36.900 --> 00:27:39.920
as an editor or a viewer,
because the role can affect

00:27:39.980 --> 00:27:41.240
the document binding.

00:27:41.240 --> 00:27:44.190
And you get back a value,
which is often a string,

00:27:44.190 --> 00:27:47.080
but it could be any core
foundation object type,

00:27:47.080 --> 00:27:49.060
such as a Boolean, a number.

00:27:49.060 --> 00:27:54.270
In the case of the bulk call,
you pass in an array of attribute names,

00:27:54.270 --> 00:27:58.170
and you get back a dictionary
of key value pairs.

00:27:58.180 --> 00:28:00.060
And the bulk call is really nice.

00:28:00.100 --> 00:28:02.160
If you know what attributes
you need in your UI,

00:28:02.160 --> 00:28:04.320
what you're going to have
to display or work with,

00:28:04.320 --> 00:28:07.930
you can ask for all of those at once,
and we only have to do the I.O.

00:28:07.930 --> 00:28:10.360
once on the file to get the attributes.

00:28:13.740 --> 00:28:17.160
So there's a number of string
constants naming the attributes

00:28:17.160 --> 00:28:20.480
now in the Launch Services headers.

00:28:20.530 --> 00:28:22.720
The attributes include,
and there's a few other ones,

00:28:22.740 --> 00:28:26.220
but the major ones are the content type,
which is the UTI.

00:28:26.220 --> 00:28:29.630
And by the way,
content type is also the term used for

00:28:29.720 --> 00:28:33.750
Spotlight for the metadata framework,
which you'll learn more about tomorrow.

00:28:33.760 --> 00:28:39.900
And it's very important property
for categorizing metadata.

00:28:40.350 --> 00:28:43.340
Content type is the only new attribute.

00:28:43.340 --> 00:28:47.000
We also provide the display name,
the kind string,

00:28:47.010 --> 00:28:51.100
and just for completeness
and to allow bulk access,

00:28:51.100 --> 00:28:56.680
you can get the type, the creator,
and the extension of the target object.

00:28:57.510 --> 00:28:58.880
So that's the Attributes API.

00:28:58.980 --> 00:29:03.150
I want to go on now to
the next set of API,

00:29:03.160 --> 00:29:06.190
which is new in Tiger,
which is setting handler preferences.

00:29:06.250 --> 00:29:11.320
I didn't want to go through another
WWDC without being able to say

00:29:11.320 --> 00:29:18.900
that we can essentially replace
the Internet config functionality.

00:29:19.100 --> 00:29:23.850
Finally, on Mac OS X, and that's what the
Preferences API provides,

00:29:23.950 --> 00:29:28.990
is a way to do part of
what Internet Config did,

00:29:28.990 --> 00:29:35.390
which was associate file types
and extensions with a creator code

00:29:35.760 --> 00:29:39.320
that would be the default handler,
and also associate schemes

00:29:39.480 --> 00:29:42.640
with a creator code,
which would be the default

00:29:42.750 --> 00:29:44.080
handler for a given URL.

00:29:44.080 --> 00:29:49.220
And we've tried to keep it
simple and in that spirit,

00:29:49.290 --> 00:29:54.660
but using the data types that
are in common use on Mac OS X.

00:29:54.760 --> 00:29:59.160
So the terminology goes like this:
A handler is an application which is

00:29:59.160 --> 00:30:05.460
capable of opening a particular kind
of document or a particular URL scheme.

00:30:05.970 --> 00:30:11.870
And for a given document type or scheme,
you can get what the default handler is,

00:30:11.940 --> 00:30:15.270
that is the one that the user prefers.

00:30:15.280 --> 00:30:19.960
You can get all the
known handlers in a list,

00:30:19.960 --> 00:30:24.070
and that's useful for driving a UI,
say for a pop-up menu.

00:30:24.220 --> 00:30:27.190
and you can set the default handler.

00:30:27.310 --> 00:30:31.090
Now, handlers are specified not by a
specific application instance,

00:30:31.150 --> 00:30:32.160
but by bundle ID.

00:30:32.160 --> 00:30:38.090
And so it allows us to pick
the user's preferred app.

00:30:38.150 --> 00:30:41.560
Say if an app is already running,
for instance,

00:30:41.580 --> 00:30:46.240
and the user prefers that bundle ID,
we're gonna use the app

00:30:46.340 --> 00:30:49.180
that's already running,
not another one on disk.

00:30:49.250 --> 00:30:53.030
So when you set preferences,
you give a bundle identifier.

00:30:53.070 --> 00:30:55.720
And as I mentioned,
this pretty much replaces a key

00:30:55.730 --> 00:30:58.280
part of the Internet Config API.

00:30:58.340 --> 00:31:02.850
So here's a simple
example of a bundle ID.

00:31:04.350 --> 00:31:10.880
Content type handlers are driven by UTIs,
expressed with a content type,

00:31:11.090 --> 00:31:13.550
in this case, JPEG.

00:31:13.840 --> 00:31:17.390
If you were to ask Launch Services for
a list of possible handlers,

00:31:17.460 --> 00:31:20.600
you would actually get back a pretty
long list of JPEG handlers on the system.

00:31:20.600 --> 00:31:24.980
But to simplify it, here are three:
Preview, of course,

00:31:24.980 --> 00:31:27.580
which is the one that ships
out of the box as the default.

00:31:27.610 --> 00:31:35.010
BBEdit can actually display JPEGs,
I found, and Internet Explorer.

00:31:35.770 --> 00:31:39.650
and each handler has a role.

00:31:39.810 --> 00:31:46.090
So this is saying that the default
viewer for JPEG is com.apple.preview.

00:31:46.540 --> 00:31:51.740
and so if you ask the default viewer,
you'll get back that bundle identifier.

00:31:52.440 --> 00:31:57.320
If you set the default viewer to BBEdit,
it will create an association to

00:31:57.580 --> 00:32:00.700
handle JPEGs by default in BBEdit.

00:32:02.210 --> 00:32:04.300
Now,

00:32:05.270 --> 00:32:07.200
Here are the APIs real quick.

00:32:07.450 --> 00:32:11.220
All I need to say about them is that
there's three functions for UTIs.

00:32:11.260 --> 00:32:15.740
You can get the default role handler,
copy all the role

00:32:15.740 --> 00:32:17.510
handlers to get a list of

00:32:17.700 --> 00:32:25.600
[Transcript missing]

00:32:26.210 --> 00:32:30.260
It's a little bit
simpler for URL schemes,

00:32:30.310 --> 00:32:31.860
but the same idea.

00:32:31.860 --> 00:32:34.380
You can pass in a URL scheme.

00:32:34.380 --> 00:32:37.860
There's no roles with handling URLs,
but you pass in a URL scheme,

00:32:37.860 --> 00:32:42.100
you can get the default handler,
you can get a list of all the

00:32:42.100 --> 00:32:44.330
available handlers for a given scheme.

00:32:44.470 --> 00:32:47.860
So you pass in HTTP, you get back all the
browsers on the system,

00:32:47.880 --> 00:32:52.590
for example, and you can set what
the default handler is.

00:32:54.660 --> 00:33:00.770
So, very simple API,
and this is something that developers

00:33:00.770 --> 00:33:03.160
have requested for some time.

00:33:03.160 --> 00:33:06.390
There are various reasons why
in your preferences dialogue

00:33:06.390 --> 00:33:10.480
or at application launch,
you might want to give the user some

00:33:10.480 --> 00:33:14.100
choice about making your app the default.

00:33:14.100 --> 00:33:17.590
But I want to put some guidelines
out there for setting handlers

00:33:17.590 --> 00:33:19.340
that you need to remember.

00:33:19.340 --> 00:33:22.460
These are -- because we're taking a
little bit of a risk by making all

00:33:22.460 --> 00:33:25.820
these public because they can be abused.

00:33:25.820 --> 00:33:29.140
The idea of these APIs is that
they set user preferences,

00:33:29.200 --> 00:33:31.080
not developer preferences.

00:33:31.080 --> 00:33:35.950
You may want all of your documents
and URLs to go to your application,

00:33:35.950 --> 00:33:40.070
but this is not an invitation
to just slam the settings.

00:33:40.070 --> 00:33:44.080
All of these should be used
with the user's wishes in mind.

00:33:44.080 --> 00:33:46.360
So, if you're going to be
changing preferences,

00:33:46.360 --> 00:33:48.400
you should be informative
about what you're doing,

00:33:48.400 --> 00:33:49.580
what you're changing.

00:33:49.780 --> 00:33:55.780
Give the user a choice and make sure
that you have the user's consent.

00:33:55.780 --> 00:33:59.980
You follow what the user asks
for and don't pester the user.

00:34:00.050 --> 00:34:04.120
I know that there's a desire
sometimes on first launch of an

00:34:04.130 --> 00:34:08.230
application to ask if you want
the app to be the default handler.

00:34:08.600 --> 00:34:09.970
And that's okay.

00:34:10.030 --> 00:34:15.290
Throwing up an alert isn't the ideal UI,
but just don't do it every time.

00:34:15.300 --> 00:34:17.460
If the user says no,
the user has said no.

00:34:17.460 --> 00:34:19.010
If the user says yes, great.

00:34:19.060 --> 00:34:20.300
Thank you.

00:34:22.780 --> 00:34:27.700
The third set of new API that I want
to talk about today is opening things.

00:34:27.960 --> 00:34:32.180
We've had a bunch of developer
requests over the last couple of years,

00:34:32.210 --> 00:34:42.090
and they've piled up enough so that we
can provide them all in one fell swoop.

00:34:42.090 --> 00:34:42.090
So I actually tried to include

00:34:42.290 --> 00:34:45.200
Everything we had a record of in
our bug database for things people

00:34:45.200 --> 00:34:48.080
wanted from the LS open calls.

00:34:48.860 --> 00:34:53.090
Those include getting back a
process serial number when you

00:34:53.190 --> 00:34:56.950
open a document or an application.

00:34:59.140 --> 00:35:03.440
works with me.

00:35:03.440 --> 00:35:07.470
The initial Apple event,
so you can put together any arbitrary

00:35:07.500 --> 00:35:11.730
Apple event you want and pass it to
an application that you're launching.

00:35:12.000 --> 00:35:29.300
[Transcript missing]

00:35:29.700 --> 00:35:33.970
Finally, being able to open a document
with a specific role.

00:35:34.060 --> 00:35:38.540
If you want to open a document
for viewing or specifically for

00:35:38.540 --> 00:35:44.700
editing or for some other role,
this API lets you do that.

00:35:44.700 --> 00:35:44.700
What does it look like?

00:35:45.080 --> 00:35:47.530
Well, first of all,
there's a structure which is

00:35:47.530 --> 00:35:51.320
used by the three functions
which are going to follow.

00:35:51.320 --> 00:35:54.850
And inside the structure is
everything related to specifically

00:35:54.850 --> 00:35:56.420
launching an application.

00:35:56.590 --> 00:35:58.970
That is,
nothing related to documents or URLs,

00:35:59.070 --> 00:36:07.200
but just specifying an application
and how it should be launched.

00:36:07.200 --> 00:36:07.200
It's called LS application parameters.

00:36:07.200 --> 00:36:07.200
And

00:36:08.170 --> 00:36:11.960
There's Launch Flags,
which are already used

00:36:11.960 --> 00:36:14.700
in the old LS Open API.

00:36:14.860 --> 00:36:19.260
There is an FS Ref for which
application should be launched.

00:36:19.300 --> 00:36:22.250
And then there's some other
things like the environment as

00:36:22.250 --> 00:36:26.450
a dictionary of key value pairs,
the command line arguments

00:36:26.460 --> 00:36:30.600
as an array of strings,
and the initial Apple event.

00:36:30.630 --> 00:36:31.140
And this is nice.

00:36:31.250 --> 00:36:33.630
You don't even have to flatten
the Apple event like you did

00:36:33.670 --> 00:36:35.060
with the Process Manager APIs.

00:36:35.270 --> 00:36:38.490
You just create an Apple event.

00:36:38.800 --> 00:36:45.800
is the first Apple event to be
delivered to the Target app.

00:36:47.280 --> 00:36:51.630
If you want to open an application,
you have this simple function to call:

00:36:51.750 --> 00:36:53.280
lsopenapplication.

00:36:53.280 --> 00:36:56.400
You pass in the parameters
structure that we just looked at,

00:36:56.660 --> 00:37:01.590
and you get back a process serial number.

00:37:01.590 --> 00:37:01.590
That's a nice simple one.

00:37:03.000 --> 00:38:02.400
[Transcript missing]

00:38:03.350 --> 00:38:07.440
And then there's a similar API for URLs.

00:38:07.470 --> 00:38:10.430
In this case, it's very similar,
except that you have an

00:38:10.430 --> 00:38:11.700
array of URLs to open.

00:38:11.850 --> 00:38:17.190
These could be document URLs, by the way,
which is especially convenient for, say,

00:38:17.200 --> 00:38:19.200
Cocoa apps.

00:38:19.200 --> 00:38:25.530
You can pass in file URLs here,
and they'll be handled as documents.

00:38:30.300 --> 00:38:32.190
That's all the new
API I want to talk about.

00:38:32.420 --> 00:38:35.630
There's a few other odds and ends,
but that is the bulk of it.

00:38:35.720 --> 00:38:37.750
It's new in Tiger.

00:38:38.610 --> 00:38:42.450
Now I want to talk about security.

00:38:42.520 --> 00:38:44.500
Just earlier this month,
there was a security

00:38:44.500 --> 00:38:47.690
update that went out,
and Launch Services was

00:38:47.690 --> 00:38:49.720
in that security update.

00:38:49.720 --> 00:38:54.670
In fact, it was happening just as I was
trying to gear up for WWDC,

00:38:54.670 --> 00:38:56.950
so it distracted me for a while.

00:38:56.960 --> 00:39:01.250
But we actually had to change the
Launch Services behavior in order

00:39:01.290 --> 00:39:05.320
to avoid running an application
that the user didn't trust.

00:39:05.490 --> 00:39:07.800
That is, an application which the
user may have downloaded,

00:39:07.800 --> 00:39:11.560
perhaps accidentally,
and then maybe the user

00:39:11.700 --> 00:39:16.220
clicked on a URL on a web page,
and that application was

00:39:16.320 --> 00:39:18.760
a handler for the URL,
and it would get launched.

00:39:18.760 --> 00:39:22.300
So there's a small chance there
could be a malicious application

00:39:22.300 --> 00:39:24.010
that got launched this way.

00:39:24.020 --> 00:39:25.680
We didn't actually
have any cases of this,

00:39:25.680 --> 00:39:26.930
but we wanted to close that.

00:39:26.940 --> 00:39:29.370
that up as soon as possible.

00:39:29.750 --> 00:39:33.790
So the important thing I want to
pass along is kind of what changed in

00:39:33.800 --> 00:39:39.160
Launch Services and also how you guys
participate in maintaining security

00:39:39.500 --> 00:39:42.200
with respect to launching things.

00:39:42.260 --> 00:39:47.510
The main goal was don't run
untrusted code without user consent.

00:39:49.930 --> 00:39:55.720
In this context, untrusted code we define
as an application which has

00:39:55.720 --> 00:39:58.060
never before been launched.

00:39:58.060 --> 00:40:01.480
If the application has been launched,
we take that as kind of an

00:40:01.480 --> 00:40:02.800
implicit statement of trust.

00:40:02.900 --> 00:40:05.780
The user asked for that
application to be launched.

00:40:05.790 --> 00:40:08.900
If it's a malicious app,
once it's launched, it's done its thing.

00:40:08.900 --> 00:40:11.500
Running it again probably
isn't going to be any worse.

00:40:11.530 --> 00:40:14.290
And furthermore, it's the user's system.

00:40:14.300 --> 00:40:17.300
We have to allow the user to
do what the user wants to do.

00:40:17.620 --> 00:40:20.460
So once an app is launched, it's trusted.

00:40:20.500 --> 00:40:23.980
But if it's never been launched before,
then we don't necessarily

00:40:23.980 --> 00:40:25.530
want to trust its bindings.

00:40:25.580 --> 00:40:30.250
That is, we don't want to use it in
particular when the user double

00:40:30.250 --> 00:40:35.400
clicks a document or opens a URL,
which is bound only to that application.

00:40:35.670 --> 00:40:39.620
So the design principles,
we kind of had to be really

00:40:39.620 --> 00:40:43.740
careful because we didn't want
to ruin the user experience.

00:40:43.740 --> 00:40:48.270
But the design principles are
do what the user is asking for.

00:40:48.510 --> 00:40:51.550
When we're evaluating document
bindings and URL bindings,

00:40:51.820 --> 00:40:53.440
always prefer trusted applications.

00:40:53.440 --> 00:40:55.830
If there's several
choices of applications,

00:40:56.000 --> 00:40:59.590
pick a trusted one,
one that the user has run before.

00:41:00.330 --> 00:41:04.990
If there are no trusted apps,
then give the user a chance to

00:41:04.990 --> 00:41:09.640
intervene and stop an app from launching
that they may not be expecting.

00:41:09.640 --> 00:41:19.710
But then once an app does launch,
trust that application in the future.

00:41:19.710 --> 00:41:19.710
So this results in

00:41:20.100 --> 00:41:25.140
A minimal, I guess,
disruption of the user experience.

00:41:25.250 --> 00:41:28.380
But now, if the user double clicks,
essentially when an app

00:41:28.450 --> 00:41:31.400
is first installed on the
system or it's downloaded,

00:41:31.400 --> 00:41:33.290
it's in an untrusted state.

00:41:33.320 --> 00:41:36.410
And if the user launches
that application,

00:41:36.450 --> 00:41:39.020
there's no intervention, no UI.

00:41:39.020 --> 00:41:41.750
If the user drags something and
drops it on that application,

00:41:41.750 --> 00:41:44.360
that's an explicit gesture
to launch an application.

00:41:45.060 --> 00:41:49.030
But if the user clicks a URL in
the browser and we're about

00:41:49.030 --> 00:41:54.040
to launch an untrusted app,
then we actually will show some UI.

00:41:54.040 --> 00:41:55.780
And it's a warning.

00:41:55.810 --> 00:41:59.450
The internet location you are
opening will open the application

00:41:59.450 --> 00:42:01.160
malware for the first time.

00:42:01.160 --> 00:42:03.140
Are you sure you want to
open this application?

00:42:03.140 --> 00:42:08.940
And this is the chance we're giving
the user to intervene and say no.

00:42:08.940 --> 00:42:11.740
And there's no default button.

00:42:11.740 --> 00:42:14.170
They have to make a choice.

00:42:14.550 --> 00:42:19.300
This is the way we came up with to
minimally disrupt the user experience,

00:42:19.330 --> 00:42:26.040
but also give the user a chance to stop
an application from running unexpectedly.

00:42:26.040 --> 00:42:34.110
So, what are your responsibilities
in making all this work?

00:42:35.490 --> 00:42:37.540
As I said,
if the user double clicks an application,

00:42:37.560 --> 00:42:38.560
we're going to launch it.

00:42:38.730 --> 00:42:43.990
And all the finder is doing is
calling LS open on the application.

00:42:44.120 --> 00:42:47.140
So likewise, if you are going to
launch an application,

00:42:47.200 --> 00:42:50.180
we're not going to put up a dialogue.

00:42:50.300 --> 00:42:52.170
asking the user if this is
what they really want to do.

00:42:52.180 --> 00:42:55.620
So it's up to you guys to make
sure that you're launching an

00:42:55.620 --> 00:42:57.360
application which is trusted.

00:42:57.360 --> 00:42:59.820
Either it's an application
you know about,

00:42:59.840 --> 00:43:03.860
like it's one of the applications
in your suite of applications,

00:43:03.860 --> 00:43:07.050
one of your helper apps,
or it's something that was

00:43:07.110 --> 00:43:11.350
explicitly selected by the user,
like in James Thompson's

00:43:11.390 --> 00:43:13.910
drag thing is a launcher app.

00:43:13.920 --> 00:43:18.310
So if the user clicks a tile there,
it's essentially user consent.

00:43:19.040 --> 00:43:20.230
So those are the main things.

00:43:20.240 --> 00:43:23.290
If you launch an application,
either it's one of your trusted

00:43:23.290 --> 00:43:26.280
apps or it's something the
user explicitly asked for.

00:43:28.670 --> 00:43:31.560
If you are going to open
a document or a URL,

00:43:31.590 --> 00:43:35.210
generally just let
Launch Services choose which application.

00:43:35.330 --> 00:43:39.440
If you pass in a document and
a specific application to use,

00:43:39.490 --> 00:43:41.040
it's like a drag and drop gesture.

00:43:41.110 --> 00:43:45.060
It's interpreted as an explicit
request to launch an app,

00:43:45.060 --> 00:43:49.590
and we're not going to pester the
user with an alert in that case.

00:43:50.090 --> 00:43:53.750
But if you just say open a document
and let Launch Services choose,

00:43:53.760 --> 00:44:00.110
that is specify null for the application,
then you'll get two benefits.

00:44:00.230 --> 00:44:02.050
First of all,
it'll be respecting the user's

00:44:02.050 --> 00:44:06.240
binding preferences because
LS will follow that choice.

00:44:06.310 --> 00:44:10.160
And it will also enable us to show
the consent alert if it's necessary to

00:44:10.260 --> 00:44:13.230
block an untrusted app from launching.

00:44:15.770 --> 00:44:19.860
There's one other new thing in
Tiger which we want to build

00:44:19.870 --> 00:44:24.460
awareness of and over time
will help us improve security.

00:44:25.360 --> 00:44:28.460
We want to encourage people
to use a new role of shell,

00:44:28.470 --> 00:44:31.570
role shell, in your info.p list.

00:44:31.900 --> 00:44:35.490
Prior to Tiger,
the only two roles you could list in

00:44:35.490 --> 00:44:39.500
your InfoP list were editor and viewer.

00:44:39.500 --> 00:44:44.040
It turns out that there's really another
kind of document commonly in use,

00:44:44.040 --> 00:44:45.480
which isn't really a document.

00:44:45.580 --> 00:44:48.540
It's an executable,
which isn't an application.

00:44:48.550 --> 00:44:52.200
It could be a JAR file,
a Java application,

00:44:52.350 --> 00:44:57.940
or an Apple script or any other kind
of proprietary scripting language.

00:44:57.940 --> 00:45:01.890
People clicking it is going to
execute the program in that document.

00:45:03.690 --> 00:45:08.690
And if you are offering that kind of
service for one of your documents,

00:45:08.810 --> 00:45:11.910
put it in your info.p list as role shell.

00:45:12.680 --> 00:45:16.560
This will allow us to know
that you're not actually going

00:45:16.560 --> 00:45:19.700
to edit or view the document,
you're going to execute the document.

00:45:19.800 --> 00:45:24.360
And so there may be special security
measures that we want to provide

00:45:24.360 --> 00:45:28.440
in the future in order to help the
user know what's going to happen.

00:45:28.440 --> 00:45:31.850
For instance,
we might change the appearance

00:45:31.850 --> 00:45:35.600
of things which are going to get
executed when they're double clicked.

00:45:35.610 --> 00:45:38.770
It might look a little bit
different than regular documents.

00:45:39.230 --> 00:45:40.400
I'm not saying we're going to do that.

00:45:40.400 --> 00:45:44.950
In fact, we haven't even tried that,
but it's a possibility.

00:45:45.580 --> 00:45:52.320
So, likewise, if all executable files are
claimed with role shell,

00:45:52.350 --> 00:45:56.110
then when you go to LS open something,
if you want to make

00:45:56.170 --> 00:45:59.460
sure it's not executed,
you can just specify role

00:45:59.460 --> 00:46:02.880
editor or role viewer,
and we'll refuse to pick an app

00:46:02.880 --> 00:46:06.900
that claims role shell for the type
of document that you're opening.

00:46:08.010 --> 00:46:12.090
So that's something new to Tiger,
and we just are encouraging

00:46:12.090 --> 00:46:13.890
people to start using it.

00:46:13.920 --> 00:46:16.470
It will become more useful over time.

00:46:18.260 --> 00:46:25.200
The last topic today I want to talk
about is extending the open metaphor.

00:46:26.390 --> 00:46:28.800
This is something I've been
wanting to do for a while,

00:46:28.820 --> 00:46:32.720
and it's fun to show it in Tiger now.

00:46:32.850 --> 00:46:36.600
Since the doc was introduced,
it's this really

00:46:37.000 --> 00:46:40.080
nice access point for applications.

00:46:40.080 --> 00:46:42.940
And from the beginning,
we've been able to drag documents

00:46:42.940 --> 00:46:47.270
down to the dock and drop
them onto application tiles.

00:46:47.340 --> 00:46:52.210
And it's a great drop target
because it's always there,

00:46:52.440 --> 00:46:55.880
it's always at the top layer,
it's never hidden behind anything.

00:46:55.900 --> 00:47:01.060
And I found that there were times when
I was frustrated because there were

00:47:01.070 --> 00:47:04.120
other things I wanted to drag down
to the dock and nothing would happen.

00:47:04.120 --> 00:47:07.960
I would hover over an application
tile and there's no feedback,

00:47:08.070 --> 00:47:11.160
you can't drop anything.

00:47:11.160 --> 00:47:12.900
And so,

00:47:13.200 --> 00:47:17.290
By extending the open metaphor,
I'm looking at what other

00:47:17.290 --> 00:47:19.110
kinds of things can we open.

00:47:19.300 --> 00:47:23.010
Currently, we can open applications,
documents, and URLs, and we can do that

00:47:23.010 --> 00:47:25.560
through various methods,
such as the open menu

00:47:25.560 --> 00:47:28.770
command in the finder,
single clicking a URL,

00:47:28.840 --> 00:47:34.190
double clicking a document,
and then there's drag and drop.

00:47:34.430 --> 00:47:38.760
Drag and drop is something
that you can do with documents,

00:47:38.870 --> 00:47:41.900
but you can also drag content
out of an application window.

00:47:41.900 --> 00:47:45.570
You can drag a URL out
of an application window.

00:47:45.810 --> 00:47:48.970
And wouldn't it be nice if we could
do something with that in the doc?

00:47:49.110 --> 00:47:56.180
And in order to really
help you understand,

00:47:56.180 --> 00:47:56.180
I'm just going to show it to you.

00:48:01.740 --> 00:48:05.360
I've done this demo a couple of times
now for various people at Apple,

00:48:05.360 --> 00:48:08.840
and a common reaction is,
"Can't we do that already?"

00:48:10.620 --> 00:48:14.960
And that's very promising,
very... I like that reaction because

00:48:14.960 --> 00:48:16.290
it means it's a natural thing.

00:48:16.300 --> 00:48:19.900
And amazingly,
all the stuff I'm about to do,

00:48:19.900 --> 00:48:24.130
we can't do in Panther, in 10.3.

00:48:24.290 --> 00:48:29.900
So, I'm in mail,
and my friend Keith has sent me an email,

00:48:29.950 --> 00:48:31.800
which I want to take a look at.

00:48:31.860 --> 00:48:34.880
It says, "Chris,
did you see this morning's news about

00:48:34.880 --> 00:48:38.300
Spaceship One?" This was last week.

00:48:39.090 --> 00:48:41.900
No, I hadn't seen the news
about Spaceship One,

00:48:41.930 --> 00:48:42.990
but I'm wondering what he means.

00:48:43.000 --> 00:48:45.710
Then I noticed Keith's
kind of a knucklehead.

00:48:45.910 --> 00:48:51.600
He put the URL up in the subject line.

00:48:52.340 --> 00:48:56.000
You know, mail doesn't expect a
URL in subject line,

00:48:56.000 --> 00:48:59.540
so it's not a live link like
it would be in the body.

00:48:59.570 --> 00:49:01.560
And invariably, this happens, right?

00:49:01.610 --> 00:49:04.100
You get into some context
where there's not a live link,

00:49:04.140 --> 00:49:06.930
and you've got a URL,
and you have to copy it

00:49:07.320 --> 00:49:09.640
out onto the pasteboard,
go to a browser, paste it in,

00:49:09.640 --> 00:49:11.980
press return to get there.

00:49:12.010 --> 00:49:16.320
And it would be much smoother if we could
just grab that URL and drag it down,

00:49:16.320 --> 00:49:19.690
say, to Safari, and have it open the URL.

00:49:24.250 --> 00:49:26.310
So, it's much faster.

00:49:26.410 --> 00:49:30.290
And it got me here to this
article about Spaceship One,

00:49:30.290 --> 00:49:35.200
the first privately funded
spaceship to leave the atmosphere.

00:49:35.340 --> 00:49:36.440
And that's pretty cool.

00:49:36.570 --> 00:49:42.810
And there's some info about the first
successful test flight and some photos.

00:49:42.960 --> 00:49:47.900
But I really actually would like to get
to the Spaceship One official website.

00:49:48.000 --> 00:49:50.460
And I'm wondering if there's
any way I can do that.

00:49:50.510 --> 00:49:55.300
Well, maybe I can grab this
and drag it down here.

00:49:55.380 --> 00:49:57.390
But that's not a URL,
so what does Safari do with it?

00:49:57.410 --> 00:49:59.700
Well, it does a Google search on it.

00:50:01.400 --> 00:50:03.680
And the first...

00:50:06.610 --> 00:50:15.170
The first hit here is the
SpaceshipOne homepage.

00:50:15.170 --> 00:50:15.170
So let's go there and see what we've got.

00:50:15.710 --> 00:50:16.430
Here it is.

00:50:16.440 --> 00:50:20.100
They've got a bunch of information
about the spaceship and the test flight.

00:50:20.280 --> 00:50:24.430
And let us, oh, there's some photos.

00:50:24.900 --> 00:50:41.600
[Transcript missing]

00:50:42.230 --> 00:50:43.920
- I kind of would like
to get a closer look,

00:50:43.950 --> 00:50:49.200
so I'm gonna grab that photo and drag it
down to preview and drop it on preview.

00:50:49.200 --> 00:50:52.220
And I get a new window here in preview.

00:50:52.220 --> 00:50:54.420
Whoops, switch back to preview.

00:50:54.430 --> 00:50:57.100
And that's kind of useful
because I can zoom in.

00:50:57.100 --> 00:50:59.670
I'm not really getting more resolution,
but I can see it a little bit

00:50:59.790 --> 00:51:01.880
better and I can grab it around.

00:51:01.980 --> 00:51:04.520
So it was just a nice,
simple way to get an image

00:51:04.520 --> 00:51:06.280
into another application.

00:51:06.280 --> 00:51:09.460
Maybe I wanna save it at this point,
or I could even drag it

00:51:09.460 --> 00:51:11.380
into an image editor.

00:51:13.090 --> 00:51:15.000
Let's go back to the website.

00:51:15.220 --> 00:51:18.690
Here's the press release page.

00:51:18.800 --> 00:51:24.120
Here's their press release for
announcing their first successful flight.

00:51:24.240 --> 00:51:26.390
Maybe I want to send that
back to my friend Keith.

00:51:26.470 --> 00:51:32.620
I'm going to do select all and
grab that and drag it down to mail.

00:51:32.620 --> 00:51:35.720
I get a new message ready
to be addressed to mail.

00:51:36.420 --> 00:51:38.430
It doesn't have the image yet,
but we're working on that.

00:51:40.330 --> 00:51:43.300
As you can see,
this is all very natural gestures,

00:51:43.300 --> 00:51:47.800
saves time,
and it really leverages the dock

00:51:47.880 --> 00:51:52.290
as a great drop destination.

00:51:54.520 --> 00:51:59.930
Now I get to one of the coolest
parts about this is that

00:52:00.450 --> 00:52:03.600
I didn't have to change those
applications except for preview.

00:52:03.660 --> 00:52:07.040
I made no changes to those
applications to make that demo work.

00:52:07.130 --> 00:52:12.000
I added about five lines to preview in
order to allow it to accept the drop.

00:52:12.100 --> 00:52:16.630
But otherwise, Mail and Safari were
already set up to do this,

00:52:16.630 --> 00:52:19.590
and you wonder, how can that speed?

00:52:19.840 --> 00:52:27.010
The way it works is that we already
have a very well-established mechanism

00:52:27.360 --> 00:52:30.500
for working with data on the pasteboard
coming from another application,

00:52:30.670 --> 00:52:32.040
and that is the Services menu.

00:52:32.040 --> 00:52:36.700
Applications in their
InfoP list can declare services,

00:52:36.700 --> 00:52:40.930
and they show up under
the application menu,

00:52:40.930 --> 00:52:42.460
say for mail.

00:52:42.460 --> 00:52:44.860
You can select some text,
go to the Services menu,

00:52:44.860 --> 00:52:47.790
and you see a bunch of services
offered by other applications

00:52:47.790 --> 00:52:49.630
that operate on text,
for example.

00:52:49.640 --> 00:52:50.730
Amen.

00:52:52.150 --> 00:52:56.130
This is really then just a
new way to invoke a service.

00:52:56.160 --> 00:52:58.740
So we're integrating existing
technology with the doc,

00:52:59.070 --> 00:53:02.460
and this is the details of how it works.

00:53:02.650 --> 00:53:04.060
Some of the details, I guess.

00:53:04.340 --> 00:53:09.820
We do use an Apple event in order to send
the data between applications because

00:53:09.820 --> 00:53:12.280
we want it to be all asynchronous.

00:53:12.290 --> 00:53:18.970
And so there's the new Apple event,
KAEOpenContents, or Ocon, and it...

00:53:20.300 --> 00:53:23.760
is very similar to an ODOC event,
except instead of a list

00:53:23.820 --> 00:53:29.960
of document references,
it's a list of data items, of AE desks.

00:53:29.960 --> 00:53:33.000
And each desk contains
the data to be opened.

00:53:33.150 --> 00:53:37.320
So when I drag that image out
of Safari down to preview,

00:53:37.320 --> 00:53:40.200
we created an Ocon event,
we stuffed the entire

00:53:40.200 --> 00:53:43.210
image into the Ocon event,
and we very efficiently

00:53:43.210 --> 00:53:46.990
moved it between processes,
delivered it to preview.

00:53:47.000 --> 00:53:49.600
But preview doesn't have
an Ocon event handler,

00:53:49.600 --> 00:53:52.780
and none of those applications
have an Ocon event handler.

00:53:52.780 --> 00:53:56.720
You can choose to handle the
Ocon event directly if you want,

00:53:56.800 --> 00:54:01.820
or you can allow Launch Services to
handle it for you.

00:54:01.900 --> 00:54:05.920
And what Launch Services does
in Tiger is it installs a system

00:54:05.920 --> 00:54:08.520
default handler for the Ocon event.

00:54:08.540 --> 00:54:11.880
And when an Ocon event goes unhandled,
we look at the current

00:54:11.980 --> 00:54:14.760
application's list of services,
and we look to see,

00:54:14.760 --> 00:54:16.900
is there a service that the app provides?

00:54:16.900 --> 00:54:18.500
Which can handle this type of data?

00:54:18.500 --> 00:54:20.790
And if there is,
we just invoke the service.

00:54:21.030 --> 00:54:24.120
So if you adopt services,
not only will you appear

00:54:24.550 --> 00:54:28.300
in the services menu,
but now you will also be able to

00:54:28.340 --> 00:54:33.860
have the service invoked as a drop
target on your application icon.

00:54:34.710 --> 00:54:38.130
We'll also integrate this
into the Finder for dropping

00:54:38.130 --> 00:54:39.600
things in the Finder as well.

00:54:39.600 --> 00:54:43.600
That is, dropping things on application
icons in the Finder.

00:54:43.600 --> 00:54:47.560
And that might be it.

00:54:47.710 --> 00:54:49.510
Oh, one more slide.

00:54:50.550 --> 00:54:53.020
So, some of this I already went over.

00:54:53.310 --> 00:54:57.470
You add a services
declaration to your P-list.

00:54:58.890 --> 00:55:03.810
I'm going to share some of the
tips and tricks I use to help

00:55:03.810 --> 00:55:06.800
you understand how to use Ocon.

00:55:06.820 --> 00:55:11.820
You can be a little more
creative than that if you wish.

00:55:11.820 --> 00:55:14.920
Safari was a good example there.

00:55:14.920 --> 00:55:17.170
It got some plain text.

00:55:17.170 --> 00:55:21.990
It was able to take that and
figure out that it should do a

00:55:22.070 --> 00:55:28.740
Google search on it because that's
the most logical thing to happen.

00:55:28.820 --> 00:55:34.380
So feel free to be creative.

00:55:36.840 --> 00:55:40.700
So what are the main points
I want you to take away today?

00:55:40.730 --> 00:55:42.840
They are the following.

00:55:43.730 --> 00:55:46.500
Uniform Type Identifiers
are used much more widely in

00:55:46.500 --> 00:55:50.140
Tiger than they were on Panther,
both in Launch Services,

00:55:50.140 --> 00:55:53.730
Carbon Pasteboard, what else?

00:55:53.740 --> 00:55:57.200
The new Translation Services Carbon API.

00:55:57.200 --> 00:56:02.000
We have plans in Tiger to use them
in Navigation Services for filtering,

00:56:02.000 --> 00:56:06.830
and Cocoa has plans to adopt
them more widely also in its API.

00:56:07.180 --> 00:56:16.500
Spotlight organizes metadata
around Uniform Type Identifiers.

00:56:16.500 --> 00:56:20.410
It's a great foundational
technology on the system.

00:56:21.240 --> 00:56:24.490
We have new API for setting
handler preferences.

00:56:24.560 --> 00:56:27.490
Use them, don't abuse them.

00:56:29.370 --> 00:56:32.430
We have new LS Open functions
with a bunch of features

00:56:32.490 --> 00:56:34.410
that you guys have asked for.

00:56:35.630 --> 00:56:39.060
Please try to follow our new guidelines
for opening things and help us

00:56:39.060 --> 00:56:41.670
maintain security on the system.

00:56:42.760 --> 00:56:47.590
and finally,
using services now with integration

00:56:47.590 --> 00:56:52.080
with drag and drop gives you a great new
kind of portal into your application,

00:56:52.080 --> 00:56:54.320
increasing the value of your
application to the user.

00:56:54.340 --> 00:56:57.650
And I am done now.

00:56:57.660 --> 00:57:00.680
I think we have one more.

00:57:00.720 --> 00:57:03.170
I asked documentation.

00:57:03.780 --> 00:57:07.520
We have some documentation now
on Uniform Type Identifiers.

00:57:07.520 --> 00:57:09.800
It was just finished
a couple of weeks ago,

00:57:09.800 --> 00:57:13.700
and it's available on the
WWDC Reference Library site.

00:57:13.830 --> 00:57:16.520
And also, it didn't make the DVD,
but I encourage you to

00:57:16.520 --> 00:57:20.200
read the release notes,
also the Launch Services release notes.

00:57:20.250 --> 00:57:23.700
Not everything you've
seen is implemented yet.

00:57:23.700 --> 00:57:27.700
And so, it's good to read the release
notes before you get frustrated.

00:57:27.700 --> 00:57:30.690
We're going to get it to
you as soon as we can.