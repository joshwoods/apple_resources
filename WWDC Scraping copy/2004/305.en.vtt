WEBVTT

00:00:12.300 --> 00:00:15.300
Please now welcome to the stage,
Tim Bumgarner.

00:00:15.370 --> 00:00:21.240
Welcome.

00:00:21.260 --> 00:00:22.490
It's exciting to be here.

00:00:22.500 --> 00:00:26.420
This is our fourth year, I believe,
at presenting AppleScript Studio at

00:00:26.420 --> 00:00:27.800
a developer conference.

00:00:27.800 --> 00:00:31.250
And it's been an exciting,
terrific ride that we've

00:00:31.250 --> 00:00:33.200
been working on here.

00:00:33.230 --> 00:00:35.200
Before I get started
with my presentation,

00:00:35.200 --> 00:00:37.200
I'd actually like to take
a little bit of a poll,

00:00:37.230 --> 00:00:40.200
so it'll help me gear what we talk about.

00:00:40.310 --> 00:00:44.290
How many people have ever
actually used AppleScript Studio?

00:00:44.920 --> 00:00:45.190
Great.

00:00:45.560 --> 00:00:49.300
How many use AppleScript Studio on
a regular basis?

00:00:49.400 --> 00:00:50.030
Okay, terrific.

00:00:50.130 --> 00:00:52.610
So I'll keep it at about
that intermediate level.

00:00:52.730 --> 00:00:53.600
Thank you.

00:00:53.720 --> 00:00:56.100
All right,
let's talk a little bit about it.

00:00:56.160 --> 00:00:59.800
And of course, I'm Tim Bumgarner,
AppleScript Studio Lead Engineer.

00:00:59.800 --> 00:01:03.750
What I'd like to do is to show you
a little bit about what you're going

00:01:03.750 --> 00:01:05.200
to learn today in this session.

00:01:05.310 --> 00:01:07.300
And we're going to do an
overview of AppleScript Studio.

00:01:07.300 --> 00:01:10.300
So for those of you that haven't
ever seen it or ever used it,

00:01:10.300 --> 00:01:13.420
we'll give you a quick tour
of what it's like to create an

00:01:13.420 --> 00:01:15.300
AppleScript Studio application.

00:01:15.360 --> 00:01:19.230
We're going to touch a little bit upon
the enhancements we've made for Xcode

00:01:19.410 --> 00:01:21.300
to better support AppleScript Studio.

00:01:21.300 --> 00:01:23.880
And of course,
the most exciting thing is to talk about

00:01:23.880 --> 00:01:28.250
some of the new features that we're going
to be providing in studio for Tiger.

00:01:30.690 --> 00:01:32.460
So what is AppleScript Studio?

00:01:32.470 --> 00:01:36.000
AppleScript Studio is this very exciting
technology that we've put together,

00:01:36.000 --> 00:01:39.780
and it pulls together a lot of
different aspects of technologies

00:01:39.780 --> 00:01:40.900
that we have at Apple.

00:01:40.900 --> 00:01:44.170
It takes advantage of the developer
tools we have so that we could

00:01:44.170 --> 00:01:47.640
integrate AppleScript support
into Xcode and Interface Builder

00:01:47.680 --> 00:01:50.830
to make it very easy for you to
create these applications that are,

00:01:50.950 --> 00:01:53.780
in fact, native Mac OS X applications.

00:01:53.780 --> 00:01:55.740
So that when you build these
and construct them using

00:01:56.010 --> 00:01:59.020
AppleScript as your language,
you can save and distribute

00:01:59.320 --> 00:02:03.620
these applications to anybody
else that has a Mac OS X system.

00:02:03.620 --> 00:02:06.790
And they can run that application
without needing any other additional

00:02:06.850 --> 00:02:08.960
frameworks or components to go with it.

00:02:08.960 --> 00:02:10.910
It all just works.

00:02:11.290 --> 00:02:13.680
Now, additionally,
you can take advantage of all the

00:02:13.760 --> 00:02:16.970
features of Xcode such that you
could add additional functionality

00:02:17.290 --> 00:02:21.440
using either AppleScript or
Objective-C or other languages,

00:02:21.440 --> 00:02:22.160
even Java.

00:02:22.160 --> 00:02:26.700
And you get to take advantage of Cocoa,
its rich user interface.

00:02:26.700 --> 00:02:29.300
So it's really a two-part solution.

00:02:29.300 --> 00:02:33.210
It has a runtime component,
and this is an AppleScript kit.

00:02:33.220 --> 00:02:35.480
It's a public framework that's
provided with the system.

00:02:35.480 --> 00:02:39.320
It contains, in essence,
it's the glue between

00:02:39.320 --> 00:02:42.040
Cocoa and AppleScript itself.

00:02:42.040 --> 00:02:44.330
So it'll know when something
happens in the user interface,

00:02:44.330 --> 00:02:47.720
and it knows how to call your script
and execute a particular handler.

00:02:47.720 --> 00:02:50.930
And that's what provides the
functionality of a Studio application

00:02:50.990 --> 00:02:52.250
as it's run by the user.

00:02:52.260 --> 00:02:55.470
Now,
it's also a development side piece to it.

00:02:55.480 --> 00:02:59.160
And we've developed plugins into
Xcode so that it knows how to edit,

00:02:59.300 --> 00:03:03.070
add, or edit, compile, and build,
and even debug AppleScript inside

00:03:03.070 --> 00:03:05.100
of the development environment.

00:03:05.480 --> 00:03:08.310
And we've also added a palette and
interface builder to make it very

00:03:08.310 --> 00:03:10.120
easy to put these things all together.

00:03:12.230 --> 00:03:13.440
So how's it being used?

00:03:13.440 --> 00:03:15.260
Well, it has been about four years.

00:03:15.270 --> 00:03:17.990
So we've been paying attention,
watching what's been happening with

00:03:18.030 --> 00:03:21.020
Studio and how people are actually
using it out there in the real world.

00:03:21.080 --> 00:03:23.840
And we found that a lot of
people have taken Studio,

00:03:23.840 --> 00:03:26.740
and it's a great tool to
use to wrap shell commands.

00:03:26.740 --> 00:03:29.940
So there's these low-level tools that
are laying around in this wonderful

00:03:29.940 --> 00:03:33.060
Unix environment that we have,
but smear mortals don't know how

00:03:33.060 --> 00:03:34.620
to use them for the most part.

00:03:34.700 --> 00:03:36.110
There's a lot of parameters.

00:03:36.110 --> 00:03:39.090
I don't know how many have ever
actually pulled up a man page and go,

00:03:39.150 --> 00:03:40.190
hmm, what was that?

00:03:40.860 --> 00:03:41.970
Some of them are quite long.

00:03:42.000 --> 00:03:45.000
But people that do understand it,
understand Studio,

00:03:45.000 --> 00:03:49.020
can take and put the best of both
together so that they can provide a nice,

00:03:49.020 --> 00:03:53.360
simple user interface that has
checkboxes and pop-ups and little fields.

00:03:53.360 --> 00:03:55.220
And when it runs,
it actually executes that

00:03:55.220 --> 00:03:56.540
low-level functionality.

00:03:56.540 --> 00:03:59.700
And there's a lot of great
examples of that in use.

00:03:59.700 --> 00:04:02.760
We also find it's a
great prototyping tool.

00:04:02.760 --> 00:04:06.530
And the reason it's such a good
prototyping tool is that you get to

00:04:06.530 --> 00:04:09.990
use the same exact developer tools,
the same process,

00:04:10.020 --> 00:04:10.840
as you do in the real world.

00:04:10.860 --> 00:04:13.490
And that's because you can use
Studio as if you were to start off

00:04:13.580 --> 00:04:15.620
with a Cocoa application so that
you learn all of the methodology

00:04:15.730 --> 00:04:17.860
of creating that application.

00:04:17.860 --> 00:04:20.860
And so you can start off in Studio,
put together some things very quickly,

00:04:20.860 --> 00:04:24.100
get a look and feel that you like,
and then as needed,

00:04:24.100 --> 00:04:29.980
you can replace performance-critical
areas with direct Cocoa calls or

00:04:29.980 --> 00:04:31.840
correct Cocoa classes as you need them.

00:04:31.860 --> 00:04:34.610
And of course,
the other thing that we've seen is

00:04:34.610 --> 00:04:38.910
people create applications using
Studio to control other applications,

00:04:38.910 --> 00:04:40.220
because that's really where
the leverage comes in.

00:04:40.220 --> 00:04:43.900
Apple Script is awesome at
being able to talk to other

00:04:44.260 --> 00:04:48.430
applications that are scriptable,
of course, and get data from the other

00:04:48.510 --> 00:04:50.520
application and even to control them.

00:04:50.520 --> 00:04:53.700
So we find a lot of examples of that.

00:04:54.600 --> 00:04:59.150
And we also find that, of course,
our core customers really use

00:04:59.150 --> 00:05:00.750
that for their workflow solutions.

00:05:00.860 --> 00:05:04.800
So they will create workflows as
needed and use these controls.

00:05:05.770 --> 00:05:06.290
Excuse me.

00:05:06.490 --> 00:05:11.350
So that they can put together these
nice interfaces and have this workflow.

00:05:11.350 --> 00:05:13.640
Instead of the old way with
AppleScript is you would have

00:05:13.750 --> 00:05:17.860
to prompt the user dialogue
after dialogue after dialogue.

00:05:17.860 --> 00:05:20.510
You'd have a dialogue that come up,
ask a question, hit okay,

00:05:20.510 --> 00:05:22.280
and it would bring up another dialogue.

00:05:22.280 --> 00:05:24.760
Well, you can do away with all of
that with AppleScript Studio.

00:05:25.340 --> 00:05:28.760
And last but not least,
and the thing I'm most excited about,

00:05:28.900 --> 00:05:31.070
is that Automator uses Studio itself.

00:05:31.120 --> 00:05:33.980
As a matter of fact,
many of the actions that you've

00:05:33.980 --> 00:05:37.740
seen in Automator are done with
AppleScript Studio in conjunction

00:05:37.740 --> 00:05:40.180
with Cocoa Bindings and Objective-C.

00:05:40.180 --> 00:05:42.810
And they all work just
seamlessly together.

00:05:42.810 --> 00:05:44.950
And we're very excited about that.

00:05:47.330 --> 00:05:49.860
So what I would like to
do is just take a moment,

00:05:49.860 --> 00:05:52.360
switch over to the demo machine,
and just give you a quick feel

00:05:52.360 --> 00:05:56.640
of what it's like to create a
studio application from scratch.

00:05:56.640 --> 00:06:00.980
So I'm going to go into
Xcode and close this project.

00:06:00.980 --> 00:06:03.850
And we're going to start off with
a new project in the file menu.

00:06:03.860 --> 00:06:07.870
And you'll notice that when I bring
up the new project assistant that

00:06:07.990 --> 00:06:11.980
there are several different templates
that are already pre-built for you in

00:06:12.200 --> 00:06:14.120
order to create studio applications.

00:06:14.740 --> 00:06:18.860
The first one will create a very simple
application that has a single window.

00:06:18.860 --> 00:06:21.800
The second one is a
document-based application.

00:06:21.800 --> 00:06:24.260
So if you need multiple documents,
this will be the one you choose.

00:06:24.260 --> 00:06:26.430
The third one is a droplet.

00:06:26.440 --> 00:06:30.190
So if you need to be able to create
an application that sits on the

00:06:30.340 --> 00:06:33.550
desktop and users drag files onto it,
you can process those

00:06:33.550 --> 00:06:34.890
files in interesting ways.

00:06:34.900 --> 00:06:38.150
For those of you that have used
AppleScript a lot in the past,

00:06:38.240 --> 00:06:42.070
this is very similar to an applet that
you would save or a droplet that you

00:06:42.080 --> 00:06:44.300
would save from the script editor.

00:06:44.870 --> 00:06:46.820
For our purposes,
we're going to go ahead and choose

00:06:46.820 --> 00:06:48.280
the AppleScript application.

00:06:48.280 --> 00:06:51.980
And I'm going to call
this project user info.

00:06:51.980 --> 00:06:56.550
And we're going to go ahead and
override these selected files.

00:07:00.050 --> 00:07:03.020
And I'm going to go into the very
first thing we're going to do,

00:07:03.020 --> 00:07:05.950
just a quick overview of where
things are located in a project.

00:07:06.080 --> 00:07:07.460
First is there's a scripts folder.

00:07:07.460 --> 00:07:09.490
This is typically where you
put all of your .AppleScript

00:07:09.590 --> 00:07:11.450
files and the resources.

00:07:11.470 --> 00:07:13.400
And here is our main menu .nib.

00:07:13.460 --> 00:07:16.280
Those are the two most
important aspects that we need

00:07:16.330 --> 00:07:17.370
to deal with in this project.

00:07:17.470 --> 00:07:20.950
So I'm going to go ahead and
double click on this nib,

00:07:21.050 --> 00:07:22.350
which is our interface.

00:07:22.600 --> 00:07:25.340
And it'll open it up inside
of Interface Builder.

00:07:25.370 --> 00:07:27.900
And here I've got a simple window.

00:07:28.840 --> 00:07:32.730
And what I'm going to do is actually,
instead of creating a simple hello world,

00:07:32.740 --> 00:07:35.090
which I've done in the past,
it has a simple button, you click it,

00:07:35.100 --> 00:07:37.810
and it says hello world,
we're going to take advantage

00:07:37.810 --> 00:07:41.400
of a new feature that we have in
AppleScript that we've added for Tiger,

00:07:41.400 --> 00:07:43.510
and it's called system information.

00:07:43.520 --> 00:07:47.920
So actually, if I fire up Script Editor,
and we'll take a look

00:07:47.920 --> 00:07:49.810
at the library window.

00:07:51.280 --> 00:07:55.190
This is an easy way to get to the
dictionary of the standard editions.

00:07:55.190 --> 00:07:58.010
I'm going to double click
this and take a look at,

00:07:58.010 --> 00:08:01.690
and I believe it's under
the miscellaneous classes.

00:08:02.200 --> 00:08:04.630
You will see that there's this new
thing called system information.

00:08:04.650 --> 00:08:06.090
It's a new class or record.

00:08:06.090 --> 00:08:09.240
So now it's very simple to get,
for instance, the AppleScript version.

00:08:09.240 --> 00:08:10.700
I can get the system version.

00:08:10.700 --> 00:08:13.240
I can get the short
username or long username.

00:08:13.240 --> 00:08:15.820
There's other things
like its home directory,

00:08:15.970 --> 00:08:18.470
the computer name, IP address,
the CPU type.

00:08:18.610 --> 00:08:20.510
So it's some really
new functionality here,

00:08:20.510 --> 00:08:23.420
so it makes it very easy for you to
determine what type of environment

00:08:23.490 --> 00:08:24.860
is this script running in.

00:08:25.020 --> 00:08:29.640
So for our purposes of the demo,
all I want to do is grab the username,

00:08:29.780 --> 00:08:33.130
the long username,
and I want to also use the computer name.

00:08:33.170 --> 00:08:39.090
So I'll go ahead and hide this,
and we'll drag out a text field.

00:08:39.280 --> 00:08:42.400
And you'll see as I'm dragging around,
I get the nice interface builder we'll

00:08:42.400 --> 00:08:45.920
put off the guidelines so I know that
I'm actually putting everything as far as

00:08:45.920 --> 00:08:48.340
Aqua is concerned in the right location.

00:08:48.380 --> 00:08:50.590
And I'll drag out a text field.

00:08:51.340 --> 00:08:54.130
And we'll go ahead and
call this one username.

00:08:54.160 --> 00:08:55.940
And we'll write a line
that as it should be.

00:08:55.940 --> 00:08:59.120
And get those all lined up nice and neat.

00:08:59.250 --> 00:09:01.340
Make a copy of that.

00:09:01.380 --> 00:09:06.080
And just we'll add a simple button
in order to fill that data out.

00:09:06.980 --> 00:09:09.800
And we'll call this Get Info.

00:09:09.800 --> 00:09:11.530
And grab-- don't quit.

00:09:11.880 --> 00:09:13.360
Grab all these.

00:09:13.370 --> 00:09:17.070
Again, line them up here as close
enough for the moment.

00:09:17.320 --> 00:09:21.470
And then the next thing we need to do
is we've got our interface laid out.

00:09:21.640 --> 00:09:23.900
Now AppleScript is very
containment oriented.

00:09:23.900 --> 00:09:27.900
It needs to be able to talk to
objects through its containment.

00:09:27.980 --> 00:09:31.900
In this case, window is the top level,
and I'll make sure that

00:09:31.900 --> 00:09:33.390
I name that window.

00:09:34.750 --> 00:09:38.150
by going to the AppleScript panel
in the info window,

00:09:38.150 --> 00:09:40.330
and we'll call this main.

00:09:40.510 --> 00:09:43.400
And I'm going to then name some other
objects that I need to reference.

00:09:43.400 --> 00:09:45.480
So I'm going to reference this field,
and I'm going to give

00:09:45.480 --> 00:09:47.630
that a name of user name.

00:09:50.180 --> 00:09:50.900
Good, thank you.

00:09:50.900 --> 00:09:51.470
Good catch.

00:09:51.470 --> 00:09:53.000
Thank you, Paul.

00:09:53.000 --> 00:09:54.700
So we're going to call
this one Computer Name.

00:09:57.510 --> 00:10:00.400
and Nehmer, not Nehmer, okay,
there we go.

00:10:00.400 --> 00:10:02.800
And we'll change this to computer name,
thanks.

00:10:02.820 --> 00:10:03.630
Okay.

00:10:03.750 --> 00:10:06.870
Well, not quite wide enough,
so we'll fix that.

00:10:12.400 --> 00:11:50.300
[Transcript missing]

00:11:52.180 --> 00:11:53.800
and it will launch the application.

00:11:53.800 --> 00:11:57.980
If everything is right,
I'm going to click Get Info.

00:11:58.400 --> 00:11:59.060
And there you go.

00:11:59.060 --> 00:12:02.100
It went and got the user name
logged in as AppleScript Studio,

00:12:02.100 --> 00:12:05.800
and it happens to be the
computer name is WWDC 2004.

00:12:05.920 --> 00:12:06.800
And just that simple.

00:12:06.800 --> 00:12:08.200
Now it's an iterative process.

00:12:08.200 --> 00:12:10.400
Then you just go back
into Interface Builder,

00:12:10.540 --> 00:12:13.530
add your additional interface,
and just keep attaching handlers

00:12:13.530 --> 00:12:15.390
and scripts and filling those out.

00:12:15.520 --> 00:12:17.880
So I can go back to slides, please.

00:12:21.920 --> 00:12:25.330
So let's talk just a few minutes about
the new Xcode support we've added.

00:12:25.340 --> 00:12:29.070
We've added native
target support to Xcode.

00:12:29.080 --> 00:12:32.640
So now, and that's very important
for several good reasons.

00:12:32.640 --> 00:12:37.280
The main reason is that the native target
system or native build system in Xcode is

00:12:37.280 --> 00:12:38.830
where all the new features are going in.

00:12:38.850 --> 00:12:42.480
So for things like ZeroLink,
we now get to take advantage of.

00:12:42.500 --> 00:12:45.900
So it's very quick in your turnaround
as you build your application.

00:12:45.900 --> 00:12:48.480
You don't have to go through
this long link process.

00:12:48.480 --> 00:12:49.690
It's very quick.

00:12:50.160 --> 00:12:52.440
And so any other new features
that come into Xcode,

00:12:52.440 --> 00:12:53.840
we'll be able to take advantage of that.

00:12:53.840 --> 00:12:56.520
So we stay current with all the
other languages that are supported.

00:12:56.520 --> 00:13:02.500
We also took advantage of
improving the code assistant.

00:13:02.500 --> 00:13:04.460
It had a very limited amount of support.

00:13:04.460 --> 00:13:06.970
We've now increased that so
that it's on the parity with the

00:13:06.970 --> 00:13:10.210
script editor script assistance,
which also got enhanced.

00:13:10.220 --> 00:13:12.670
So now you're going to have the
same look and feel no matter

00:13:12.700 --> 00:13:14.100
where you're editing scripts.

00:13:14.240 --> 00:13:17.740
It will have all the same terminologies
and autocompletions for you.

00:13:17.760 --> 00:13:19.580
So it's a consistent look and feel.

00:13:20.160 --> 00:13:22.950
And we've also added support
for compiled scripts.

00:13:23.020 --> 00:13:27.000
Up to this point, AppleScript files have
been saved as .AppleScript.

00:13:27.020 --> 00:13:31.380
And what we wanted to do was also be able
to support .SCPT or compiled scripts.

00:13:31.380 --> 00:13:34.420
So that you can compile
a script on your machine,

00:13:34.420 --> 00:13:38.080
which might do something like a
tell application FileMaker Pro.

00:13:38.080 --> 00:13:39.820
It will save that application.

00:13:39.820 --> 00:13:42.500
If I give that project to somebody else,
they don't necessarily have to

00:13:42.500 --> 00:13:45.320
have FileMaker Pro on their system,
whereas before they did.

00:13:45.320 --> 00:13:46.780
So this makes it a
little more convenient.

00:13:46.780 --> 00:13:49.120
And then if anything in
the terminology changes,

00:13:49.720 --> 00:13:50.840
you get that for free.

00:13:50.840 --> 00:13:53.470
The next time you open up that script,
the terminology will

00:13:53.470 --> 00:13:54.380
automatically change.

00:13:54.380 --> 00:13:59.710
Whereas before, you would have to go and
fix the broken terminology.

00:14:00.840 --> 00:14:02.410
Finally, we get to the fun stuff.

00:14:02.410 --> 00:14:04.580
Since we're at an intermediate level,
we'll talk about some

00:14:04.580 --> 00:14:06.960
of the new technologies,
the new features that we've added to

00:14:06.960 --> 00:14:10.740
AppleScript Studio for the Tiger release.

00:14:10.960 --> 00:14:13.460
The first thing I want to
say is we actually do listen.

00:14:13.510 --> 00:14:16.350
I personally read every
mail that comes across the

00:14:16.350 --> 00:14:18.130
AppleScript Studio mailing list.

00:14:18.130 --> 00:14:19.090
And we look at that.

00:14:19.160 --> 00:14:20.840
I try to answer as many as I can.

00:14:20.840 --> 00:14:22.650
Unfortunately,
it's not as many as I'd like to.

00:14:22.720 --> 00:14:25.060
But we do read them
and we see the trends.

00:14:25.060 --> 00:14:26.450
Where are people struggling?

00:14:26.600 --> 00:14:28.060
What are they having difficulties with?

00:14:28.090 --> 00:14:30.710
What areas are a performance issue?

00:14:30.710 --> 00:14:33.140
Where is it not flexible enough?

00:14:33.270 --> 00:14:37.970
And so we've tried to incorporate as
many of those as we could in the best

00:14:38.140 --> 00:14:39.050
priority that we could determine.

00:14:39.640 --> 00:14:41.940
So what are some of those new features?

00:14:41.990 --> 00:14:43.500
We've got more data view support.

00:14:43.530 --> 00:14:46.700
The data view seemed to be one of the
top things that people want to script.

00:14:46.700 --> 00:14:50.940
And so we've found that we've tried to
make it easier and better performance

00:14:50.940 --> 00:14:52.900
to add data to your data source.

00:14:52.930 --> 00:14:55.520
But we found that it's still difficult
to get that data back out so that you

00:14:55.660 --> 00:14:57.150
can do something meaningful with it.

00:14:57.260 --> 00:14:59.540
For instance,
store that data and put it back with

00:14:59.540 --> 00:15:01.170
the same fidelity as you put it in.

00:15:01.170 --> 00:15:02.700
So we've made that simpler.

00:15:02.740 --> 00:15:06.070
We've also made it sure that it works
for both table views and outline views.

00:15:06.650 --> 00:15:09.310
Outline views have sort
of been the stepchild,

00:15:09.490 --> 00:15:10.780
a little often ignored.

00:15:10.780 --> 00:15:12.460
So we've taken care of that.

00:15:12.540 --> 00:15:16.060
We've also found that people wanted
to be able to have better control in

00:15:16.060 --> 00:15:18.120
their drag and drop for data views.

00:15:18.120 --> 00:15:21.290
So we've had some support
so you could drag in items,

00:15:21.290 --> 00:15:24.810
but we haven't given you the
opportunity to determine where in

00:15:24.810 --> 00:15:27.070
that view you want that data to drop.

00:15:27.120 --> 00:15:30.090
And more importantly,
people wanted to be able to

00:15:30.090 --> 00:15:34.020
reorder items within their table
or outline view very simply.

00:15:34.020 --> 00:15:35.360
So we've provided that.

00:15:35.360 --> 00:15:38.750
And another one I'm very excited
about is toolbar support.

00:15:38.800 --> 00:15:41.860
That's sort of the one thing
that if you looked at Studio,

00:15:41.860 --> 00:15:45.360
it was sort of missing from
a native Cocoa application.

00:15:45.360 --> 00:15:49.260
That was very difficult for you
to actually add your own toolbar.

00:15:49.260 --> 00:15:51.100
You would have to go
directly to Cocoa to do that.

00:15:51.160 --> 00:15:53.380
We've made it incredibly
simple for you to do that,

00:15:53.380 --> 00:15:55.040
to add to your own applications.

00:15:57.290 --> 00:15:59.620
We've also taken care of some of
the term-- we're going to look

00:15:59.620 --> 00:16:01.130
at the terminology that we have.

00:16:01.130 --> 00:16:04.930
And I had to do a review over the
documentation of the reference manual.

00:16:05.030 --> 00:16:07.800
And there were just too many
places where it said not supported.

00:16:07.890 --> 00:16:09.500
We'd have it defined, but not supported.

00:16:09.500 --> 00:16:11.760
So we're going to address that as well.

00:16:11.860 --> 00:16:14.350
And of course,
we've added some additional functionality

00:16:14.740 --> 00:16:16.120
to better support Automator.

00:16:16.120 --> 00:16:19.420
So that's built right into
the new features that we have.

00:16:19.550 --> 00:16:21.940
So let's go look through
these one at a time.

00:16:22.020 --> 00:16:23.300
More data view support.

00:16:23.380 --> 00:16:26.300
We've had this command for a
little while called append.

00:16:26.390 --> 00:16:29.400
And it was very simple to
append data to a data source.

00:16:29.460 --> 00:16:31.610
Unfortunately,
it only worked for table views.

00:16:31.720 --> 00:16:33.320
Now it works for outline views.

00:16:33.320 --> 00:16:36.140
So you can append hierarchical
data at any place that you

00:16:36.140 --> 00:16:37.740
want within the data source.

00:16:37.830 --> 00:16:41.460
And the thing that's really
cool is the content property.

00:16:41.570 --> 00:16:43.940
For most of the AppleScript people,
it's like sort of those duh things.

00:16:43.940 --> 00:16:45.390
Why wasn't there one to begin with?

00:16:45.570 --> 00:16:47.000
But now there's a content property.

00:16:47.000 --> 00:16:51.650
So it's very simple to simply say set
content of table view to some data.

00:16:51.720 --> 00:16:53.340
And it just creates it for you.

00:16:53.420 --> 00:16:55.540
It takes care of all of the
work that needs to be done.

00:16:55.590 --> 00:16:58.530
But since it is a content property,
you can get it right back out.

00:16:58.580 --> 00:17:01.690
You can say get content of
table view or outline view,

00:17:01.840 --> 00:17:04.200
and you get all your data right back.

00:17:05.410 --> 00:17:07.570
And you can also control
how that data comes back.

00:17:07.680 --> 00:17:10.840
You can put the data in as a list
of lists or a list of records,

00:17:10.850 --> 00:17:15.280
and then you can also figure out how you
want to get it back as the same format.

00:17:15.830 --> 00:17:19.460
And we've also added support
for the sort indicators.

00:17:19.470 --> 00:17:22.310
And the last one is that data
sources historically have

00:17:22.310 --> 00:17:26.900
been sort of this all-knowing,
all-powerful thing that gave you great

00:17:27.030 --> 00:17:29.060
performance but was very inflexible.

00:17:29.060 --> 00:17:31.720
It didn't want to give any control
back to you as the scripter

00:17:31.790 --> 00:17:33.240
or the application writer.

00:17:33.240 --> 00:17:36.430
And so we've tried to
add that support as well.

00:17:37.240 --> 00:17:39.330
and as I discussed,
and now the append command works

00:17:39.460 --> 00:17:41.300
for both outline and data views.

00:17:41.300 --> 00:17:43.500
You can append data as a list of strings.

00:17:43.740 --> 00:17:46.920
So if you have a simple table with
a call or table view with one data,

00:17:47.040 --> 00:17:53.040
one table column,
you can list that as add as

00:17:53.040 --> 00:17:55.080
a list of strings or list
of lists or list of records,

00:17:55.080 --> 00:17:55.080
whatever is the most
convenient for you to use.

00:17:56.410 --> 00:17:57.700
The content property.

00:17:57.860 --> 00:18:01.870
What's exciting about this is that you
can set the content of that table view

00:18:02.110 --> 00:18:03.540
and it will do everything for you.

00:18:03.620 --> 00:18:07.590
It will create the data source,
create all the necessary data columns,

00:18:07.680 --> 00:18:10.780
and create all the data rows or data
items that are needed for that view,

00:18:10.780 --> 00:18:12.540
for all the data that's provided.

00:18:12.540 --> 00:18:19.270
With one line of script,
you can now populate an entire

00:18:19.270 --> 00:18:19.650
data source or data view.

00:18:19.650 --> 00:18:19.650
And that's very exciting.

00:18:23.710 --> 00:18:27.640
And again, as I mentioned before,
both table view and outline view.

00:18:27.730 --> 00:18:30.510
Outline view is no longer the stepchild.

00:18:32.650 --> 00:18:33.410
Getting data out.

00:18:33.440 --> 00:18:35.970
Again, as I mentioned,
you simply ask for the content

00:18:36.320 --> 00:18:39.050
of a table view or an outline
view and you get that data back.

00:18:39.120 --> 00:18:43.130
Now, the problem with a content getting
the data is that we have to give

00:18:43.130 --> 00:18:44.460
it back to you in some format.

00:18:44.460 --> 00:18:48.200
And there's unfortunately in
AppleScript it's not possible to say

00:18:48.200 --> 00:18:52.640
get content of table view as a list
of records or as a list of lists.

00:18:52.640 --> 00:18:53.700
It just doesn't work that way.

00:18:53.700 --> 00:18:55.600
So we have a property on the data source.

00:18:55.600 --> 00:18:57.120
It's called returns records.

00:18:57.840 --> 00:18:58.870
You can set that to true.

00:18:58.930 --> 00:19:00.860
The data comes back as a list of records.

00:19:00.920 --> 00:19:02.920
Faults,
you get it back as a list of lists.

00:19:03.000 --> 00:19:05.680
So you get the flexibility
that you want to decide what

00:19:05.680 --> 00:19:07.370
format you want that data in.

00:19:09.870 --> 00:19:11.460
And here's back to that
sort of all-knowing,

00:19:11.460 --> 00:19:12.760
all-powerful data source.

00:19:12.760 --> 00:19:16.920
It's been a wonderful thing because
the performance is so much better.

00:19:16.920 --> 00:19:20.400
The very first iterations is that you
had to provide all the event handlers,

00:19:20.400 --> 00:19:23.290
but the table view,
every time it needed to update that cell,

00:19:23.300 --> 00:19:24.930
it would ask you for the value.

00:19:25.070 --> 00:19:28.520
Well, that's terribly slow because it has
to send an event every single time.

00:19:28.520 --> 00:19:32.530
When we added the data source support,
it all came very fast because

00:19:32.530 --> 00:19:33.500
it took care of everything.

00:19:33.500 --> 00:19:34.710
That was sort of the problem.

00:19:34.710 --> 00:19:35.980
It took care of everything.

00:19:36.480 --> 00:19:39.030
You didn't get an opportunity
to know when the user changed

00:19:39.060 --> 00:19:40.600
something in your table view.

00:19:40.600 --> 00:19:44.180
So if they edited a data, a table cell,
you didn't know.

00:19:44.180 --> 00:19:45.000
It's a little event handler.

00:19:45.000 --> 00:19:46.850
Even we would let you
add the event handler,

00:19:46.850 --> 00:19:47.630
we just ignored it.

00:19:47.760 --> 00:19:49.560
So that little table
event handler would go,

00:19:49.800 --> 00:19:52.400
tell me, tell me,
tell me when you change data, please.

00:19:52.400 --> 00:19:53.420
And the data source would say,
I know better.

00:19:53.420 --> 00:19:55.060
I know better.

00:19:55.060 --> 00:19:56.350
I'm not going to talk
to this guy over here.

00:19:56.460 --> 00:19:58.510
So he'd go ahead and do it,
and he'd just ignore it.

00:19:58.580 --> 00:20:01.060
But we finally realized the
data source got smart and said,

00:20:01.060 --> 00:20:03.610
you know what, that little event handler
knows something I don't.

00:20:03.740 --> 00:20:06.250
So it gives him an
opportunity to call you.

00:20:06.360 --> 00:20:10.050
So you get to pick and choose which
event handler you want to implement in

00:20:10.180 --> 00:20:14.760
your table view so that you can get the
best flexibility out of it as you want.

00:20:14.760 --> 00:20:16.980
So we're much happier with the new way.

00:20:18.530 --> 00:20:19.460
and sort indicators.

00:20:19.460 --> 00:20:23.200
So it's very simple to set now a
Boolean property on the table view

00:20:23.200 --> 00:20:26.420
to say whether or not you want little
indicators up in your table column.

00:20:26.420 --> 00:20:28.800
You don't have to call Cocoa to do that.

00:20:28.810 --> 00:20:31.340
And the default is false at the moment.

00:20:31.630 --> 00:20:33.780
So what I'd like to do
is invite John Coelho.

00:20:33.830 --> 00:20:38.240
He's our AppleScript Studio quality
assurance engineer and to help make

00:20:38.240 --> 00:20:40.860
sure I don't mess up like I did before.

00:20:40.890 --> 00:20:42.030
Thank you, John.

00:20:42.080 --> 00:20:46.650
And we're going to give you some quick
demonstrations of this technology.

00:20:47.580 --> 00:20:53.190
So what he's going to do is we're going
to first start off with our table view.

00:20:54.840 --> 00:20:57.410
And the first thing we do is
go into the interface builder,

00:20:57.410 --> 00:21:00.260
and we're going to see we have a very
simple table view here with two columns.

00:21:00.260 --> 00:21:03.340
And he's going to drill down
and select the table view.

00:21:03.340 --> 00:21:06.350
And what we're going to do is
we're going to use Awake from Nib.

00:21:06.360 --> 00:21:09.890
That's a handler that gets
called when the window is open,

00:21:09.890 --> 00:21:11.930
and it's a good place
to populate our data.

00:21:11.940 --> 00:21:15.070
And then let's go to
the application object,

00:21:15.130 --> 00:21:17.900
and we're going to make sure that
we've got the launched handler.

00:21:17.900 --> 00:21:20.500
Because a very good strategy in
Studio is if there's something

00:21:20.500 --> 00:21:24.540
you need to put in the window,
add data, change the UI,

00:21:24.700 --> 00:21:27.060
make sure you do that before
the window becomes visible.

00:21:27.060 --> 00:21:30.330
So by default, we make sure that the
window is not visible,

00:21:30.340 --> 00:21:33.150
and launched is a good
place to show our window.

00:21:33.160 --> 00:21:34.720
So let's go ahead and save that, John.

00:21:34.720 --> 00:21:36.980
And we'll go back in
and we'll add our code.

00:21:36.980 --> 00:21:40.660
So from Awake from Nib,
he's going to add our code.

00:21:40.660 --> 00:21:42.840
And go ahead and add that line.

00:21:42.840 --> 00:21:43.970
And we're going to add our code.

00:21:44.500 --> 00:21:45.260
And let's take a look at that.

00:21:45.470 --> 00:21:46.550
There you go.

00:21:46.640 --> 00:21:49.680
One line of script is going
to populate the table.

00:21:49.840 --> 00:21:51.240
It does all of that
work that I mentioned,

00:21:51.240 --> 00:21:53.370
creates the data source,
creates the data columns,

00:21:53.510 --> 00:21:55.180
creates all the necessary data rows.

00:21:55.300 --> 00:21:57.610
Before this would have been
about ten lines of script.

00:21:57.670 --> 00:21:58.640
Now it's one.

00:21:58.640 --> 00:22:01.160
So let's go ahead and build and run this.

00:22:03.010 --> 00:22:03.730
And there you go.

00:22:03.860 --> 00:22:08.540
Just that quick, it's populated the table
view and it works just fine.

00:22:08.650 --> 00:22:11.090
Matter of fact, let's show you now how
easy it was to get it in,

00:22:11.090 --> 00:22:13.120
that's how easy it is to get it back out.

00:22:13.210 --> 00:22:16.170
And he's going to go into Script Editor,
drag in a little bit of script

00:22:16.230 --> 00:22:20.330
that's going to talk to the table
view and ask it for its contents.

00:22:20.520 --> 00:22:23.960
Now you'll notice that it came
back as a list of records.

00:22:24.040 --> 00:22:25.330
How did we put it in?

00:22:25.370 --> 00:22:26.800
It was a list of lists.

00:22:26.890 --> 00:22:33.290
So we can go ahead and set our returns
records to false and run it again.

00:22:33.600 --> 00:22:35.830
And you see it comes back
now as a list of lists.

00:22:35.930 --> 00:22:38.580
So you've got fidelity with the
data going into your data source.

00:22:38.640 --> 00:22:40.230
You can get it back out
in that same format.

00:22:40.340 --> 00:22:42.920
That way it makes it very
simple to store it in just any

00:22:42.930 --> 00:22:44.510
type of a file that you like.

00:22:44.630 --> 00:22:45.200
Okay.

00:22:45.420 --> 00:22:48.150
Now one more thing we talked
about is that flexibility issue.

00:22:48.290 --> 00:22:51.380
What we want to know is when the user
actually changes one of the table cells

00:22:51.380 --> 00:22:53.150
so that we can do something about it.

00:22:53.290 --> 00:22:55.740
So let's quit the application, John.

00:22:55.790 --> 00:22:57.880
Glen Interface Builder.

00:23:01.070 --> 00:23:04.170
And what we're going to do is we're
going to go to the table view category,

00:23:04.170 --> 00:23:07.100
and we're going to add a change
cell value event handler.

00:23:07.100 --> 00:23:09.900
This handler gets called when the
user tries to change the data.

00:23:09.970 --> 00:23:11.940
So let's say that.

00:23:13.290 --> 00:23:14.690
and go ahead and add our line.

00:23:14.860 --> 00:23:18.070
Now, looking at the handler itself,
it passes a few objects.

00:23:18.100 --> 00:23:20.980
The interesting one is
at the end is the value.

00:23:21.190 --> 00:23:23.800
This value is whatever the user typed in.

00:23:23.890 --> 00:23:26.480
So you can decide to do something
interesting like if a checkbox

00:23:26.560 --> 00:23:29.940
got changed in one column,
update something in another column.

00:23:30.080 --> 00:23:32.200
In this case,
we're just going to force it to return a

00:23:32.200 --> 00:23:35.280
different value so that we can actually
change the value as it comes in.

00:23:35.280 --> 00:23:37.320
So let's build and run this.

00:23:40.070 --> 00:23:43.070
Okay, and so when John goes
over and tries to type no,

00:23:43.070 --> 00:23:44.790
it'll let him type no,
but as soon as he goes off of it,

00:23:44.800 --> 00:23:46.960
you'll see it says, I don't think so.

00:23:46.960 --> 00:23:49.840
So we actually got to control,
we get to work with the data

00:23:49.840 --> 00:23:52.200
source instead of the data
source working against us.

00:23:52.200 --> 00:23:53.290
All right, thank you, John.

00:23:53.300 --> 00:23:55.080
Let's go back to slides, please.

00:24:04.520 --> 00:24:05.260
Drag and drop support.

00:24:05.280 --> 00:24:07.490
Don't go anywhere, John.

00:24:07.490 --> 00:24:09.600
I thought he was going to get away.

00:24:09.600 --> 00:24:12.800
So we're going to do our
drag and drop support.

00:24:12.800 --> 00:24:13.810
Talk a little bit about that.

00:24:13.840 --> 00:24:18.550
Now what we've done is that made it very
simple for you to not only drag items in,

00:24:18.550 --> 00:24:21.350
but control where they
go within the drag.

00:24:21.360 --> 00:24:24.430
And then also be able to
reorder items within the drag.

00:24:25.160 --> 00:24:27.600
And we've done this also
by making it very simple.

00:24:27.600 --> 00:24:31.270
With one property,
you set allows reordering to true.

00:24:31.310 --> 00:24:32.580
You don't have to do anything.

00:24:32.590 --> 00:24:34.140
You just set the one line of script.

00:24:34.300 --> 00:24:35.760
And you can automatically drag items.

00:24:35.770 --> 00:24:37.510
Cocoa doesn't even make this available.

00:24:37.510 --> 00:24:39.560
So this is something
we've got to leg up on.

00:24:41.070 --> 00:24:44.760
We do the new drag and drop
through three new event handlers.

00:24:44.760 --> 00:24:47.280
So now that there is a handler
for when the drag begins,

00:24:47.310 --> 00:24:49.990
and you can put whatever type of
data you want on the Paceboard

00:24:49.990 --> 00:24:51.570
as the user drags things around.

00:24:51.700 --> 00:24:54.780
There's a handler that gets
called as the drag is happening.

00:24:54.780 --> 00:24:57.480
So you get to decide whether
it's a copy or a move,

00:24:57.480 --> 00:24:59.820
or if it should happen
at a particular location.

00:24:59.940 --> 00:25:02.540
And then there's another handler that
gets called when the item is dropped.

00:25:02.700 --> 00:25:04.440
And there's three
handlers for table view,

00:25:04.720 --> 00:25:07.110
three handlers for outline view.

00:25:07.560 --> 00:25:08.910
and there's also two additional ones.

00:25:09.010 --> 00:25:11.970
We've added two event handlers called
rows changed and items changed.

00:25:12.050 --> 00:25:16.520
You can have these handlers attached
to a view so that you can find

00:25:16.520 --> 00:25:17.840
out whenever the data changes.

00:25:17.840 --> 00:25:20.670
So for instance,
if some other data is driving the source,

00:25:20.800 --> 00:25:23.540
you can get notified of those changes.

00:25:23.590 --> 00:25:26.960
And reordering support I mentioned
is simply setting a Boolean

00:25:27.030 --> 00:25:28.760
property on the table view.

00:25:28.800 --> 00:25:30.400
Just a couple notes.

00:25:30.460 --> 00:25:34.180
Obviously if you're going to reorder,
that means it's not a sorted data view.

00:25:34.240 --> 00:25:36.290
So if you set sorting on,
you're not going to be able to reorder.

00:25:36.300 --> 00:25:38.400
You have to decide
which is more important.

00:25:38.420 --> 00:25:40.860
It only works,
this automatic support only works if

00:25:40.860 --> 00:25:42.700
you drag items within a table view.

00:25:42.700 --> 00:25:44.640
If you need to support
dragging things in,

00:25:44.650 --> 00:25:46.750
you're going to have to
do that work as well.

00:25:46.810 --> 00:25:51.010
So it's not, it doesn't automatically
support the external drags.

00:25:52.150 --> 00:25:54.610
So let's take a look
at an example of this.

00:25:54.770 --> 00:25:57.530
Now, we've showed you the table view,
and just to prove the fact that it

00:25:57.530 --> 00:25:59.800
actually does work with the outline view,
this time we're going to

00:25:59.840 --> 00:26:01.200
start with an outline view.

00:26:01.350 --> 00:26:03.190
And let's look at the nib.

00:26:04.010 --> 00:26:07.310
And again, he's going to drill in,
and we need to attach-- we're

00:26:07.330 --> 00:26:09.590
going to go to our outline view.

00:26:10.430 --> 00:26:13.050
and we're going to add these
three new event handlers.

00:26:13.150 --> 00:26:15.480
Can't quite see it down there,
so I'll have to look up here.

00:26:15.530 --> 00:26:18.240
And what we're going to add
is the prepare outline drag.

00:26:18.260 --> 00:26:20.220
We're going to add prepare outline drop.

00:26:20.240 --> 00:26:22.180
And the last one is accept outline drop.

00:26:22.210 --> 00:26:23.520
And that's all we need to do in this.

00:26:23.520 --> 00:26:25.420
So we'll go ahead and
save and edit the script.

00:26:25.440 --> 00:26:29.220
And John's going to enter in,
the first thing we need to do is whenever

00:26:29.220 --> 00:26:32.280
you're going to start a drag and drop,
you need to tell the view what

00:26:32.280 --> 00:26:34.270
type of drags you want to receive.

00:26:34.370 --> 00:26:37.760
So whether it's files or other
type of things or colors.

00:26:37.790 --> 00:26:39.990
In this case,
we want to make sure that we register

00:26:40.070 --> 00:26:42.940
for the items that are being drugged
so that we can do reordering.

00:26:42.980 --> 00:26:45.130
Or we want also to support file names.

00:26:45.250 --> 00:26:51.000
So let's go down to the prepare
for drag and add that script.

00:26:52.580 --> 00:26:55.680
and what it does is it sets
the contents on the pasteboard.

00:26:55.680 --> 00:26:57.990
And then the very last thing
in that handler is to make

00:26:57.990 --> 00:26:59.390
sure you return true or false.

00:26:59.530 --> 00:27:02.150
If you don't want the drag to start,
just simply return

00:27:02.220 --> 00:27:03.430
false and it will stop.

00:27:03.560 --> 00:27:05.460
But you always typically
want to return true.

00:27:05.610 --> 00:27:09.550
So it's now going to fill out the
handler that gets called as the user

00:27:09.550 --> 00:27:12.080
drags things up and down in your view.

00:27:17.110 --> 00:27:19.630
And the thing that's most
important in here is we have to

00:27:19.630 --> 00:27:21.440
return a type of drag operation.

00:27:21.440 --> 00:27:22.740
And it's an enumerated type.

00:27:22.890 --> 00:27:25.840
There's like a no drag operation,
move or copy.

00:27:25.840 --> 00:27:30.530
And we determine that based on whether or
not they're holding down the option key.

00:27:31.600 --> 00:27:32.900
and now we'll go down to the last one.

00:27:32.900 --> 00:27:36.810
Now admittedly,
this is a fairly long bit of script here.

00:27:36.900 --> 00:27:41.610
and we'll let John put those in there
till we get down to right about here.

00:27:41.850 --> 00:27:44.450
You are an incredibly fast typer, John.

00:27:45.970 --> 00:27:48.850
Okay, so we're down at the
bottom of this handler.

00:27:48.880 --> 00:27:50.950
And let's go ahead and check this index.

00:27:51.020 --> 00:27:52.760
And let's go back up and
look at it just very quickly.

00:27:52.760 --> 00:27:55.600
This is the handler that gets
called when the user drops

00:27:55.600 --> 00:27:57.420
something on the outline view.

00:27:57.420 --> 00:28:00.820
And what it will do is it gets
the data from the pasteboard.

00:28:00.820 --> 00:28:03.020
It's going to check to see
what type of data it is.

00:28:03.020 --> 00:28:04.740
If it's items, that means it's a reorder.

00:28:04.740 --> 00:28:08.280
It then looks to see if the option,
the state of the key, the option key,

00:28:08.280 --> 00:28:10.480
if it's a copy operation,
it's going to do a copy.

00:28:10.650 --> 00:28:11.960
So scroll down a little further, John.

00:28:11.960 --> 00:28:14.200
And if it's a move, we'll do that.

00:28:14.280 --> 00:28:16.000
Otherwise, it goes down further.

00:28:16.000 --> 00:28:18.710
Else,
if the file names is being dragged in,

00:28:18.710 --> 00:28:22.120
then we look at it again and
decide it's always a copy.

00:28:22.120 --> 00:28:23.870
And we're just going
to copy in that item.

00:28:23.880 --> 00:28:25.330
So let's go ahead and build and run this,
John.

00:28:25.400 --> 00:28:25.900
Take a look.

00:28:29.580 --> 00:28:31.260
So here's our outline view,
and he's going to go

00:28:31.260 --> 00:28:32.400
ahead and expand that.

00:28:32.410 --> 00:28:34.930
And he's going to drag one of the items.

00:28:36.700 --> 00:28:37.860
And you'll see that
when he lets go of it,

00:28:37.980 --> 00:28:40.260
it puts it inside of that one actually.

00:28:40.260 --> 00:28:42.840
And we can actually take another one on
the bottom and put it inside that we can

00:28:42.840 --> 00:28:46.380
reorder and put items wherever we like.

00:28:46.470 --> 00:28:49.710
Now he's going to take an item
from the desktop and drag it in.

00:28:51.520 --> 00:28:53.060
and you'll notice that if
he drags on the outside,

00:28:53.060 --> 00:28:54.040
it would have added it to the end.

00:28:54.040 --> 00:28:57.900
Or he can decide where he wants to
put that item in the outline view.

00:28:57.950 --> 00:29:00.940
So it's just that simple in order
to now support the fine control

00:29:00.940 --> 00:29:02.030
that you need in an outline view.

00:29:02.210 --> 00:29:03.680
Thanks, John.

00:29:03.680 --> 00:29:05.700
Slides, please.

00:29:07.780 --> 00:29:09.700
Toolbar support.

00:29:09.710 --> 00:29:11.640
As I said,
very excited about this because it sort

00:29:11.640 --> 00:29:14.240
of fills in that missing gap that we had.

00:29:14.280 --> 00:29:16.600
And we do this through
a couple new classes.

00:29:16.860 --> 00:29:19.090
There's a toolbar class.

00:29:19.100 --> 00:29:47.100
[Transcript missing]

00:29:47.290 --> 00:29:48.040
Take a look at that.

00:29:48.040 --> 00:29:48.510
So the process.

00:29:48.610 --> 00:29:49.440
How do you create a toolbar?

00:29:49.440 --> 00:29:53.190
In order to create a toolbar,
you simply make it,

00:29:53.190 --> 00:29:55.120
just like you do anything
else in AppleScript.

00:29:55.120 --> 00:29:57.600
You set its allowed and
default identifiers.

00:29:57.600 --> 00:30:01.160
These are identifiers that say,
the allowed are what possible set of

00:30:01.160 --> 00:30:03.360
toolbar items can I have in my toolbar.

00:30:03.360 --> 00:30:11.240
So, for instance,
if you go to the customization palette,

00:30:11.240 --> 00:30:11.510
you'll see all of the possible choices.

00:30:11.510 --> 00:30:11.510
The

00:30:12.000 --> 00:30:15.480
The default identifiers are
the identifiers that the user

00:30:15.480 --> 00:30:18.100
sees the initial time that
he starts your application.

00:30:18.200 --> 00:30:21.290
So you set those two sets of
-- they're a list of strings.

00:30:21.350 --> 00:30:22.450
You make the toolbar items.

00:30:22.570 --> 00:30:24.900
So now you go through and create
all the custom toolbar items

00:30:24.900 --> 00:30:26.760
that you have in your toolbar.

00:30:26.820 --> 00:30:29.750
And then you assign that
toolbar to the window.

00:30:31.570 --> 00:30:33.900
Now, what happens when the user
starts working with your toolbar?

00:30:33.900 --> 00:30:36.110
So as I mentioned,
the update toolbar item

00:30:36.110 --> 00:30:37.490
gets called by the system.

00:30:37.490 --> 00:30:40.290
The system will say, okay,
these toolbar items need to be adjusted.

00:30:40.400 --> 00:30:43.190
The user's done something in
the menu or clicked somewhere,

00:30:43.200 --> 00:30:46.180
and we need to make sure that the
toolbar states are all correct.

00:30:46.240 --> 00:30:49.110
And so it will call that,
and you get the opportunity

00:30:49.110 --> 00:30:51.580
to change the title,
you can change the icon,

00:30:51.970 --> 00:30:54.620
change the tool tip as they
move the mouse over that.

00:30:55.460 --> 00:30:58.950
And the most important thing in this
handler is that you decide whether or

00:30:58.950 --> 00:31:01.370
not that given toolbar item is enabled.

00:31:01.370 --> 00:31:03.420
And you return true if
you want it enabled,

00:31:03.610 --> 00:31:04.260
false if not.

00:31:04.280 --> 00:31:07.240
And then when the user actually
clicks on a toolbar item,

00:31:07.290 --> 00:31:10.430
you just respond and add this
event handler to your window,

00:31:10.430 --> 00:31:14.080
and you can find out which one was
clicked by just comparing its name,

00:31:14.080 --> 00:31:15.340
its identifier.

00:31:15.340 --> 00:31:18.280
There are several different ways that
you can find out which one was clicked.

00:31:18.340 --> 00:31:21.730
Now, if you're really advanced,
we actually can set the script

00:31:21.950 --> 00:31:23.510
object of a toolbar item.

00:31:23.940 --> 00:31:26.440
So if that script object
contains a clicked handler,

00:31:26.560 --> 00:31:27.980
we're going to call that one.

00:31:27.990 --> 00:31:30.160
So it's not,
you don't necessarily have to

00:31:30.160 --> 00:31:33.300
say if name of this is that,
else if name is this, else if that.

00:31:33.320 --> 00:31:37.620
You can just go ahead and define separate
scripts for each item in your toolbar.

00:31:37.620 --> 00:31:41.120
And we'd like to show you how that works.

00:31:41.120 --> 00:31:42.700
So demo machine.

00:31:52.900 --> 00:31:54.130
Okay.

00:31:54.160 --> 00:31:57.320
Now, one reason why there hasn't been
support is that Interface Builder

00:31:57.340 --> 00:32:00.710
itself doesn't support toolbar
creation right inside of it.

00:32:00.790 --> 00:32:02.860
So we needed to be able
to do this from script.

00:32:03.050 --> 00:32:05.950
And what we're going to do is we
make sure we go to the window that

00:32:05.950 --> 00:32:08.060
we want the toolbar attached to.

00:32:08.100 --> 00:32:09.660
And we're going to go to it.

00:32:09.660 --> 00:32:12.290
Go ahead and go to the AppleScript panel.

00:32:12.980 --> 00:32:16.240
and we're going to set the Wake from Nib.

00:32:16.250 --> 00:32:17.540
That'll be the place to create it.

00:32:17.720 --> 00:32:19.540
And then there's a new toolbar category.

00:32:19.600 --> 00:32:22.940
And we're going to use the
clicked and updated items.

00:32:22.950 --> 00:32:24.930
Go ahead and edit that script.

00:32:25.840 --> 00:32:28.510
Ah, but it doesn't.

00:32:28.540 --> 00:32:29.510
We'll see.

00:32:29.670 --> 00:32:31.540
If you may be right,
then I'll look really foolish.

00:32:31.680 --> 00:32:33.030
I'll really owe you twice.

00:32:33.040 --> 00:32:34.630
Okay, let's go through.

00:32:34.870 --> 00:32:37.630
And this was a
document-based application,

00:32:37.640 --> 00:32:40.490
so it already had a couple of items here.

00:32:40.560 --> 00:32:43.630
And we're going to go down
to the Awake from Nib.

00:32:43.680 --> 00:32:47.780
And he's going to paste that in.

00:32:47.870 --> 00:32:50.240
And we'll let him go
ahead and fill that out.

00:32:57.500 --> 00:32:59.020
And when it's finished,
we'll go ahead and check the

00:32:59.020 --> 00:33:04.500
syntax on this handler and then
talk about each of the items.

00:33:04.510 --> 00:33:06.500
That's very difficult
to see on this monitor,

00:33:06.500 --> 00:33:08.500
so I'm going to look up here.

00:33:08.500 --> 00:33:10.490
And one more.

00:33:10.650 --> 00:33:13.490
So let's go back up to
the Awake from Nebjhan.

00:33:15.340 --> 00:33:17.100
and look at each of the pieces to this.

00:33:17.230 --> 00:33:19.880
So the object again is the window.

00:33:20.120 --> 00:33:23.200
This is what the event
handler is attached to.

00:33:23.360 --> 00:33:26.810
And it's going to make them
toolbar and it's going to

00:33:26.890 --> 00:33:28.200
create it with some properties.

00:33:28.220 --> 00:33:31.300
One is the name and that's just
like anything we use in Studio.

00:33:31.300 --> 00:33:32.200
That's the name of the toolbar.

00:33:32.200 --> 00:33:35.200
Then it's going to create
and use an identifier.

00:33:35.200 --> 00:33:38.140
Identifiers are very important
to toolbars in Cocoa.

00:33:38.200 --> 00:33:40.200
Each of them have to have a unique name.

00:33:40.200 --> 00:33:42.160
And so we've got an identifier here.

00:33:42.240 --> 00:33:44.200
And then there's some other
properties that you can set.

00:33:44.200 --> 00:33:48.200
Whether or not the toolbar is
resizable or can be customized.

00:33:48.200 --> 00:33:49.750
What size it starts off in.

00:33:49.750 --> 00:33:53.170
In our case, we're going to set these
all to default values.

00:33:53.200 --> 00:33:56.190
And then the next line is
the allowed identifiers.

00:33:56.250 --> 00:33:59.530
And this is the possible set
of identifiers that we want

00:33:59.530 --> 00:34:01.050
to allow in our toolbar.

00:34:01.220 --> 00:34:06.200
You'll notice the first three is compile,
run and stop.

00:34:06.200 --> 00:34:10.110
These are our toolbar items that
we want to add to the toolbar.

00:34:10.390 --> 00:34:13.230
Everything from that point
on are standard identifiers.

00:34:13.350 --> 00:34:16.190
So there are such things as,
what do we have there?

00:34:16.200 --> 00:34:19.810
We've got customize, flexible space,
a space, a separator.

00:34:19.810 --> 00:34:24.200
Those are, we just set those in there and
we'll get those support for free.

00:34:24.200 --> 00:34:27.270
The next line is the
default set of identifiers.

00:34:27.270 --> 00:34:30.980
What do I want my toolbar to look
like initially the first time

00:34:30.980 --> 00:34:33.150
they start their application?

00:34:33.210 --> 00:34:36.560
And so that we'll set that, in our case,
we just want the compile,

00:34:36.580 --> 00:34:38.200
run and stop toolbar items.

00:34:38.200 --> 00:34:38.740
And then what we do is we'll set
the default set of identifiers.

00:34:38.740 --> 00:34:39.200
And then we'll set the
default set of identifiers.

00:34:39.200 --> 00:34:40.200
And then what we do is we'll set
the default set of identifiers.

00:34:40.200 --> 00:34:40.200
And then we'll set the
default set of identifiers.

00:34:40.200 --> 00:34:42.050
as we create each of those toolbar items.

00:34:42.120 --> 00:34:44.920
So we have make new toolbar item.

00:34:44.920 --> 00:34:48.560
And again, with the properties,
we make sure that the identifier

00:34:48.560 --> 00:34:53.160
is exactly the same as what we
specified in the other lists above.

00:34:53.160 --> 00:34:55.840
If there's a misspelling or
you've not quite got it right,

00:34:55.860 --> 00:34:57.320
it's not going to work correctly.

00:34:57.320 --> 00:34:58.640
So make sure that those are the same.

00:34:58.640 --> 00:35:02.360
And so we've created one for our compile,
we've created one for the run,

00:35:02.360 --> 00:35:03.860
and we've created one for the stop.

00:35:03.920 --> 00:35:07.090
And finally,
now we've got all the pieces in place,

00:35:07.350 --> 00:35:10.960
we just set the toolbar item,
or the toolbar property of the window.

00:35:10.960 --> 00:35:12.160
It's all done.

00:35:12.160 --> 00:35:15.060
This is even simpler than
it is in Cocoa as well.

00:35:15.060 --> 00:35:17.940
And then the last thing we do is
look at the last two handlers.

00:35:17.940 --> 00:35:20.030
If the user clicks,
in this case we're going

00:35:20.030 --> 00:35:21.110
to only look for one click.

00:35:21.120 --> 00:35:24.430
We're going to look and see if
they clicked on the compile button.

00:35:24.440 --> 00:35:26.760
And if it does,
we're going to simply display a dialog.

00:35:28.460 --> 00:35:32.560
If they click on the update toolbar item,
or when this update gets called,

00:35:32.660 --> 00:35:34.920
we're going to just simply
say we want them all enabled.

00:35:34.990 --> 00:35:36.950
I could have easily checked for a state.

00:35:37.030 --> 00:35:38.700
I might have been compiling,
and therefore,

00:35:38.700 --> 00:35:41.640
I want to make sure the stop is enabled,
but the run is disabled

00:35:41.640 --> 00:35:42.650
or change the state.

00:35:42.690 --> 00:35:44.470
This is the place to do that.

00:35:44.660 --> 00:35:46.760
So let's go ahead and build and run that.

00:35:49.480 --> 00:35:51.400
And you'll see there's our toolbar.

00:35:51.400 --> 00:35:52.700
Very simply done.

00:35:52.700 --> 00:35:53.610
We can customize it.

00:35:53.640 --> 00:35:58.290
We can go in and look at
that and add our items.

00:35:58.470 --> 00:35:59.930
and finish that up.

00:36:00.010 --> 00:36:01.980
And we can see that when
we actually click on it,

00:36:02.030 --> 00:36:05.750
it adds our, calls our display dialogue
and create a new window.

00:36:06.350 --> 00:36:08.740
and there you go, just that simple.

00:36:08.770 --> 00:36:09.580
Thank you, John.

00:36:09.580 --> 00:36:12.690
Let's go back to slides, please.

00:36:15.690 --> 00:36:17.480
Okay,
I mentioned terminology improvements.

00:36:17.650 --> 00:36:19.830
We are going to look at all
of the broken terminology,

00:36:19.840 --> 00:36:22.560
all the terminology
that says not supported.

00:36:22.560 --> 00:36:25.920
If it's defined and we can fix it,
we'll fix it.

00:36:26.090 --> 00:36:29.020
If it's defined and we just can't fix it,
well, it didn't work to begin with,

00:36:29.020 --> 00:36:31.400
so we'll just deprecate it and
take it out of the terminology.

00:36:31.400 --> 00:36:33.760
There are a couple conflicts currently.

00:36:33.780 --> 00:36:36.520
I believe file type and
file kind is a problem.

00:36:36.520 --> 00:36:38.360
We'll address that and
make sure that's fixed.

00:36:38.360 --> 00:36:42.220
And we'll, of course,
add any new terminology as needed.

00:36:45.880 --> 00:36:46.500
There's my guy.

00:36:46.500 --> 00:36:48.120
I like that robot.

00:36:48.120 --> 00:36:48.830
All right.

00:36:48.940 --> 00:36:51.130
We've added some support for Automator.

00:36:51.140 --> 00:36:54.040
One of the things you'll find
is that as you're putting

00:36:54.040 --> 00:36:57.150
together an Automator action,
that you can quite often do

00:36:57.150 --> 00:36:59.670
everything with Cocoa Bindings.

00:36:59.680 --> 00:37:01.210
As a matter of fact,
that's what we recommend.

00:37:01.220 --> 00:37:02.240
Use Cocoa Bindings.

00:37:02.240 --> 00:37:03.610
It's very simple.

00:37:03.610 --> 00:37:06.350
It takes care of the UI issues for you.

00:37:06.360 --> 00:37:08.270
But sometimes it's not enough.

00:37:08.380 --> 00:37:11.010
For instance,
we have many actions that when

00:37:11.250 --> 00:37:14.350
the action is added to Automator,
it needs to go talk to another

00:37:14.350 --> 00:37:17.520
application in order to populate
something like a pop-up button.

00:37:17.520 --> 00:37:20.050
So, for instance,
when we bring in the new

00:37:20.050 --> 00:37:22.920
Mail Automator action,
the first thing we do is we go

00:37:23.040 --> 00:37:26.330
talk to Mail and ask it for all of
its accounts so that we can then

00:37:26.330 --> 00:37:28.740
populate that account pop-up for you.

00:37:28.800 --> 00:37:31.120
So Cocoa Bindings can't
quite do that unless I were

00:37:31.120 --> 00:37:32.640
to go write some Cocoa code.

00:37:32.640 --> 00:37:35.980
Well, that's not sufficient if we were
trying to do it all in AppleScript.

00:37:35.980 --> 00:37:37.660
So this is where Studio comes in.

00:37:37.690 --> 00:37:39.500
It makes it very simple for you to go in.

00:37:39.500 --> 00:37:42.800
There is a wake from nib that you
can attach to the view and then

00:37:42.810 --> 00:37:44.740
populate whatever you need to do.

00:37:44.740 --> 00:37:45.890
So another example.

00:37:45.960 --> 00:37:51.700
There are several actions that change
the file names in certain ways.

00:37:51.720 --> 00:37:53.800
And so we've added an example section.

00:37:53.800 --> 00:37:57.370
So as you click on the UI objects,
we update that example so you

00:37:57.560 --> 00:38:01.260
can see how that is actually
going to change your file names.

00:38:01.260 --> 00:38:02.670
It makes it much more obvious.

00:38:02.680 --> 00:38:04.160
So there's another great example of that.

00:38:05.460 --> 00:38:08.590
But then we found that it was
necessary at the point when you want

00:38:08.590 --> 00:38:13.560
to run or save your workflow that we
find out what things have changed.

00:38:13.610 --> 00:38:15.120
Because it wasn't bound
with Cocoa Bindings,

00:38:15.170 --> 00:38:17.830
which takes a lot of this for you,
we have to give you an

00:38:17.830 --> 00:38:20.610
opportunity so that you can
update that parameters object.

00:38:20.640 --> 00:38:24.010
So if you saw our demos yesterday,
you saw that parameters object.

00:38:24.110 --> 00:38:27.470
This is what we're doing to
give you that functionality.

00:38:28.340 --> 00:38:30.640
and as we mentioned before,
it works right alongside

00:38:30.640 --> 00:38:31.450
of Cocoa Bindings.

00:38:31.470 --> 00:38:32.920
It's not in competition with it.

00:38:33.040 --> 00:38:34.510
One doesn't replace the other.

00:38:34.670 --> 00:38:36.530
They can work together seamlessly.

00:38:36.530 --> 00:38:39.560
And you can mix in Cocoa as needed.

00:38:41.600 --> 00:38:42.520
Going very fast today.

00:38:42.520 --> 00:38:46.420
This is going to be a short session,
which probably makes you all very happy.

00:38:46.420 --> 00:38:50.300
So we've got the new incredibly
easy-to-use data sources.

00:38:50.300 --> 00:38:53.040
We've made it even easier
than we've done in the past,

00:38:53.160 --> 00:38:55.450
but at the same time,
we've made it much more flexible

00:38:55.480 --> 00:38:58.120
so that you have the opportunity
to decide what it is that you

00:38:58.120 --> 00:38:59.420
want to do to interact with it.

00:38:59.420 --> 00:39:01.470
We've added cool new
drag-and-drop support.

00:39:01.480 --> 00:39:04.400
And actually, we forgot one demo.

00:39:04.400 --> 00:39:05.400
Yes, we did.

00:39:05.400 --> 00:39:05.960
Thank you.

00:39:05.960 --> 00:39:06.320
That's okay.

00:39:06.320 --> 00:39:07.200
I've got time to burn.

00:39:07.200 --> 00:39:08.160
Going anywhere?

00:39:08.160 --> 00:39:08.780
All right.

00:39:08.960 --> 00:39:09.800
Let's go over here.

00:39:09.800 --> 00:39:11.230
I'll actually run this one by myself.

00:39:11.340 --> 00:39:12.320
Let's go back to the demo machine.

00:39:12.320 --> 00:39:14.580
I'm sorry, John,
you should have said something.

00:39:14.580 --> 00:39:19.120
One of them we forgot to show you
was the auto support for reordering.

00:39:19.120 --> 00:39:22.140
And I'm going to go ahead
and fire up that demo.

00:39:22.140 --> 00:39:25.300
And we'll go into the interface builder.

00:39:30.030 --> 00:39:30.440
I forgot this.

00:39:30.440 --> 00:39:31.360
Very cool demo.

00:39:31.360 --> 00:39:32.040
I can't believe that.

00:39:32.090 --> 00:39:36.840
So what we're going to do is
go into the table view itself.

00:39:36.920 --> 00:39:39.480
I'm going to go ahead and add
the Awake from Nib so that

00:39:39.670 --> 00:39:41.120
I can populate the table view.

00:39:41.120 --> 00:39:44.120
And then I'm going to actually
add a handler to this checkbox

00:39:44.120 --> 00:39:46.640
so as the user checks it,
it will turn on that state

00:39:46.640 --> 00:39:48.000
of allows reordering.

00:39:48.000 --> 00:39:49.850
So I'm going to go ahead
and click on the clicked.

00:39:49.940 --> 00:39:52.270
And assign it to there.

00:39:52.270 --> 00:39:53.260
Save it.

00:39:53.260 --> 00:39:55.050
Edit the script.

00:39:55.130 --> 00:39:59.100
Now the interesting part is
remembering what the code is for this.

00:39:59.100 --> 00:40:02.190
So I believe that we have the final one.

00:40:07.200 --> 00:40:10.000
Because now I don't get to use
my fancy-dancy demo assistant.

00:40:10.000 --> 00:40:13.270
So let's open this up in TextEdit.

00:40:13.900 --> 00:40:17.640
And we'll grab everything that's
inside of this Awake from Nib.

00:40:17.680 --> 00:40:20.100
And we'll put it inside of here,
so we populate the data

00:40:20.100 --> 00:40:21.340
in the Awake from Nib.

00:40:21.390 --> 00:40:24.690
And we'll go down here and
we'll grab this simple line

00:40:24.730 --> 00:40:27.000
and go back up here to clicked.

00:40:27.070 --> 00:40:28.690
Check the syntax, looks good.

00:40:28.740 --> 00:40:32.460
So, that one extra Awake from Nib,
good catch.

00:40:32.560 --> 00:40:34.720
And we'll run that.

00:40:34.930 --> 00:40:36.530
And you'll see here is my application.

00:40:36.550 --> 00:40:37.220
It's up and running.

00:40:37.220 --> 00:40:39.680
And if I try to drag,
it won't let me drag.

00:40:39.710 --> 00:40:42.140
So if I go down and
click allows reordering,

00:40:42.140 --> 00:40:46.040
I can now reorder items without
having to write any code whatsoever

00:40:46.140 --> 00:40:48.360
other than simply enabling that.

00:40:48.420 --> 00:40:49.400
So let's look at that again.

00:40:49.400 --> 00:40:52.660
So it's just a matter
of populating the table,

00:40:52.660 --> 00:40:56.000
and then you just turn
on that simple property,

00:40:56.050 --> 00:40:57.880
and it's very simple.

00:40:57.880 --> 00:41:00.490
Again, this works for both table
views and outline views.

00:41:00.490 --> 00:41:01.850
We make sure it works for both.

00:41:01.850 --> 00:41:03.770
So let's go back to the slides, please.

00:41:04.800 --> 00:41:06.020
My apologies, John.

00:41:06.020 --> 00:41:06.820
Sorry.

00:41:07.550 --> 00:41:09.600
Okay, and also toolbar support.

00:41:09.600 --> 00:41:12.500
So we've shown you how easy
it is to add toolbar support.

00:41:12.500 --> 00:41:14.990
Now,
we showed you that there are actually on

00:41:15.010 --> 00:41:18.500
clicked and on update for the toolbar.

00:41:18.500 --> 00:41:20.500
We've actually added a
couple additional pieces.

00:41:20.500 --> 00:41:23.500
You can even call Cocoa things
from these toolbars.

00:41:23.500 --> 00:41:26.490
So now there's an optional
parameters to a toolbar item.

00:41:26.540 --> 00:41:27.500
One of them is target.

00:41:27.500 --> 00:41:30.500
So just as you've used in Cocoa,
if you know anything of Cocoa,

00:41:30.500 --> 00:41:33.500
you can actually establish
the target of that action.

00:41:33.500 --> 00:41:36.500
And then you get to define
what Cocoa method gets called.

00:41:36.500 --> 00:41:40.150
And it makes it very simple to tie into
other applications and take advantage

00:41:40.150 --> 00:41:43.490
of things like WebKit or something
else that we might make available.

00:41:43.500 --> 00:41:45.500
And Automator absolutely loves Studio.

00:41:45.500 --> 00:41:50.790
I can't express it enough that it's
a very powerful combination in order

00:41:50.790 --> 00:41:55.500
to make it very easy for you to
create these actions for Automator.

00:41:55.500 --> 00:41:58.310
Now,
it seems like I've been very forgetful.

00:41:58.550 --> 00:42:00.500
I've already forgotten at least one demo.

00:42:00.500 --> 00:42:02.500
And I know that there's something else.

00:42:02.610 --> 00:42:03.490
What did I forget?

00:42:03.570 --> 00:42:05.440
There was something else.

00:42:05.440 --> 00:42:07.400
I remember--

00:42:08.590 --> 00:42:09.960
Oh yeah, OSA Kit.

00:42:10.030 --> 00:42:11.300
You know,
I thought about this and I thought,

00:42:11.360 --> 00:42:13.730
you know, WebKit has its own web,
you know,

00:42:13.730 --> 00:42:15.300
or web services has its own WebKit.

00:42:15.300 --> 00:42:20.760
I see that QuickTime now has a QT Kit,
so why doesn't OSA get its own kit?

00:42:20.780 --> 00:42:22.100
So that's what we've done.

00:42:22.100 --> 00:42:25.950
We've actually taken and created a
public framework so that you can take

00:42:25.950 --> 00:42:30.740
advantage of the same things that we have
underlying all of our Cocoa technologies.

00:42:30.740 --> 00:42:32.820
So there's actually a public framework.

00:42:32.820 --> 00:42:34.000
It's called OSA Kit.

00:42:34.000 --> 00:42:37.850
It provides several public
classes for you to use.

00:42:38.410 --> 00:42:39.780
There's an OSA Script class.

00:42:39.780 --> 00:42:46.060
This class is a superset of abilities of
the NSAppleScript class that's in Cocoa.

00:42:46.060 --> 00:42:49.880
It will allow you to do load and execute,
which NSAppleScript does,

00:42:49.920 --> 00:42:52.140
but it will also let you save scripts.

00:42:52.220 --> 00:42:54.960
And it will also let you execute
scripts in different ways that

00:42:54.960 --> 00:42:56.560
are provided by NSAppleScript.

00:42:56.560 --> 00:43:01.680
I will say a note that it in
no way replaces NSAppleScript.

00:43:01.680 --> 00:43:03.980
If you need to simply do
the things that it provides,

00:43:03.980 --> 00:43:06.490
then we recommend that because
then you don't have to link

00:43:06.600 --> 00:43:07.940
in this additional framework.

00:43:07.940 --> 00:43:11.420
But if you do have a little higher needs,
we recommend that you then

00:43:11.450 --> 00:43:12.980
use the OSA Script class.

00:43:12.980 --> 00:43:16.560
We have this OSA Script view
that then makes it very simple

00:43:16.560 --> 00:43:18.160
for you to edit scripts.

00:43:18.240 --> 00:43:21.690
And we do this by
providing a new palette.

00:43:21.760 --> 00:43:25.450
And so that you can actually go
into Interface Builder and drag out

00:43:25.460 --> 00:43:29.860
a view and embed within your own
application the ability to edit scripts.

00:43:29.920 --> 00:43:34.780
And so I'd actually want to also mention
that we use this as our foundation.

00:43:37.660 --> 00:43:39.430
We use this for all of
our Cocoa AppleScript uses

00:43:39.430 --> 00:43:40.710
within the AppleScript team.

00:43:40.740 --> 00:43:42.740
So it underlies the
AppleScript kit itself.

00:43:42.740 --> 00:43:44.710
We use it in the script editor.

00:43:44.750 --> 00:43:51.210
Much of the functionality moved from
a script editor into OSA kit itself.

00:43:51.320 --> 00:43:52.840
It's being used in Automator.

00:43:53.040 --> 00:43:56.820
How many saw the RunScript action in use?

00:43:57.190 --> 00:43:59.600
Well, that's being driven by OSAKit.

00:43:59.790 --> 00:44:04.830
And then all the plugins we added to
Xcode for Studio are driven with OSAKit.

00:44:04.990 --> 00:44:07.850
And so I'd like to give
you a demo of that as well.

00:44:07.880 --> 00:44:09.560
Back up.

00:44:09.590 --> 00:44:10.380
Demo machine.

00:44:10.520 --> 00:44:16.280
So what I'm going to do is we're going
to build an entire script editor in IB,

00:44:16.370 --> 00:44:17.340
no code.

00:44:18.430 --> 00:44:21.900
And I'm going to go ahead
and create a new application.

00:44:21.940 --> 00:44:25.000
And there is a new palette called OSA.

00:44:25.010 --> 00:44:27.140
Now I will mention that
it's not in by default.

00:44:27.140 --> 00:44:33.380
You actually have to go to the developer
extras and add that palette to your

00:44:33.380 --> 00:44:34.960
application in order for it to show up.

00:44:35.010 --> 00:44:36.040
But once you do, it stays there.

00:44:36.040 --> 00:44:39.080
So you'll see that I have two
objects here and I have a window.

00:44:39.240 --> 00:44:42.360
I'm going to drag out this script view.

00:44:42.390 --> 00:44:46.520
And we'll drop it right
about here and drag it over.

00:44:47.460 --> 00:44:49.900
and then we'll drag that down a little
further so we get some room to type.

00:44:49.910 --> 00:44:51.000
And then I'm going to put a few buttons.

00:44:51.000 --> 00:44:52.840
Now again,
I could easily put this back into

00:44:52.840 --> 00:44:56.610
our toolbar example if we needed to,
but for purposes of this,

00:44:56.660 --> 00:44:58.640
we're going to do it right here.

00:44:58.690 --> 00:45:04.260
And I'm going to do a compile and
let's do another one with run.

00:45:04.370 --> 00:45:06.210
So I'll drag that over.

00:45:06.440 --> 00:45:09.760
Now I just simply have to make a
few connections by going back to the

00:45:09.950 --> 00:45:13.060
OSA palette and I drag off what's
called an OSA script controller.

00:45:13.200 --> 00:45:17.140
This is the thing that knows how to talk
between commands and the different views.

00:45:17.320 --> 00:45:20.550
And so I'm going to make a connection
from that controller and go into

00:45:20.550 --> 00:45:24.260
the connections palette and I'm
going to assign it as a script view.

00:45:24.380 --> 00:45:26.810
And then I'm going to take the
compile button and I'm not going

00:45:26.930 --> 00:45:28.300
to tell the script view directly.

00:45:28.360 --> 00:45:32.080
I'm going to tell the
controller that it's time to,

00:45:32.080 --> 00:45:35.030
in this case, compile and also run.

00:45:35.250 --> 00:45:36.700
And we'll bind those together.

00:45:36.700 --> 00:45:38.130
And I'll go ahead and run this.

00:45:38.150 --> 00:45:41.210
And you'll see as I begin to type,

00:45:41.290 --> 00:45:43.340
It's also doing all the script assistant.

00:45:43.340 --> 00:45:45.370
I don't have to do
anything to support this.

00:45:45.390 --> 00:45:46.560
It just happens.

00:45:46.710 --> 00:45:49.900
So that now as I bring up the...

00:45:50.150 --> 00:45:52.440
Oops, hit the right thing here.

00:45:52.580 --> 00:45:52.970
There we go.

00:45:53.000 --> 00:45:54.100
So it brings up the assistant.

00:45:54.100 --> 00:45:57.600
It'll have nice little icons
to differentiate between types.

00:45:57.600 --> 00:45:59.790
Let's do finder.

00:46:00.080 --> 00:46:02.600
Name of every window.

00:46:02.600 --> 00:46:04.080
And I'll wait for the window to populate.

00:46:04.220 --> 00:46:07.230
Well, let's see if it's not going
to come up by default.

00:46:07.300 --> 00:46:09.930
Once again, window and end.

00:46:10.080 --> 00:46:11.980
So I'm going to go ahead and
click on the compile button.

00:46:12.000 --> 00:46:15.880
And just that simply
compiles it and I'll run.

00:46:15.910 --> 00:46:18.880
Well, in this case, nothing happened nor
did I see any results.

00:46:18.880 --> 00:46:21.170
So it might be actually kind of
interesting to see the results.

00:46:21.180 --> 00:46:24.580
So I'm gonna go back, choose a text view.

00:46:24.580 --> 00:46:25.470
Any old text view will work.

00:46:25.540 --> 00:46:28.350
Drag that out.

00:46:28.760 --> 00:46:30.240
And we'll put it down here.

00:46:30.240 --> 00:46:34.140
And all I have to do in order to
enable results is to make a connection,

00:46:34.140 --> 00:46:35.760
assign it to the result view.

00:46:35.810 --> 00:46:40.640
So now that when I run this and type
in like current date and compile,

00:46:40.640 --> 00:46:45.080
run, you'll see that I get the result
there with no work whatsoever.

00:46:50.010 --> 00:46:51.860
But wait, it gets better.

00:46:51.900 --> 00:46:57.670
So we'll actually come in here and we'll,
this time let's try recording.

00:46:57.930 --> 00:47:01.270
I'm going to put in a record button
and I'm going to wire that again to

00:47:01.270 --> 00:47:04.140
my controller and we'll assign that.

00:47:04.190 --> 00:47:05.030
And let's go ahead and run this.

00:47:05.060 --> 00:47:08.500
And now if I click record and go
over here and start opening windows,

00:47:08.500 --> 00:47:12.400
you'll see that the recording goes
right into that view again with no code.

00:47:12.420 --> 00:47:14.410
Just that simple.

00:47:19.730 --> 00:47:20.700
Slides, please.

00:47:20.700 --> 00:47:23.080
Now, you might ask, well,
that's interesting,

00:47:23.080 --> 00:47:23.870
but why is it important?

00:47:23.880 --> 00:47:26.050
I think we found that in
particularly an automator where

00:47:26.110 --> 00:47:28.980
we're trying to script a workflow,
sometimes it is important to be

00:47:28.980 --> 00:47:31.210
able to edit your script in line,
and particularly if

00:47:31.260 --> 00:47:33.890
you support recording,
you can record from within yourself,

00:47:33.890 --> 00:47:35.620
and that might be very interesting.

00:47:35.620 --> 00:47:38.280
I think we're looking forward
to some very wonderful examples

00:47:38.280 --> 00:47:39.760
of how to use this technology.

00:47:39.900 --> 00:47:42.980
And, of course,
the great benefit is that as we add new

00:47:42.980 --> 00:47:46.810
features and functionality to OSA Kit,
not only will all of Apple's

00:47:46.810 --> 00:47:50.200
tools take advantage of that,
but whatever you put on top of it

00:47:50.210 --> 00:47:51.820
will also get advantage of that.

00:47:51.880 --> 00:47:56.700
And so, just to quickly wrap up here,
is to talk about the reference library.

00:47:56.700 --> 00:48:00.130
We did provide all of the sample
demos that you saw today are

00:48:00.130 --> 00:48:04.180
available as session material
wherever you get those from ADC site,

00:48:04.210 --> 00:48:05.020
I believe.

00:48:05.020 --> 00:48:08.310
So, go ahead and grab those,
take a look at them, see how they work.

00:48:08.390 --> 00:48:09.880
They're very clear in symbol.

00:48:09.880 --> 00:48:11.140
Some of it's even boilerplate.

00:48:11.140 --> 00:48:13.360
You just copy and paste it
into your own applications.

00:48:13.360 --> 00:48:15.620
Then, of course,
all the various other documentation.

00:48:15.620 --> 00:48:17.480
We have a great
AppleScript documentation.

00:48:17.480 --> 00:48:21.560
If you go to the AppleScript site,
you'll find the studio terminology

00:48:21.640 --> 00:48:23.680
reference and a building guide.

00:48:23.680 --> 00:48:27.210
There's also Cocoa and Xcode
documentation to go along with that.

00:48:29.650 --> 00:48:30.560
Who to contact?

00:48:30.650 --> 00:48:31.830
You can talk to Jason.

00:48:31.970 --> 00:48:33.550
John Montbriand for DTS needs.

00:48:33.680 --> 00:48:37.500
And I highly, highly recommend the
AppleScript Studio mailing list.

00:48:37.560 --> 00:48:40.070
There are some terrific
people on that list.

00:48:40.070 --> 00:48:41.690
Some of them are here today.

00:48:41.690 --> 00:48:43.480
I thank them for their support.

00:48:43.480 --> 00:48:46.840
It's really beginning to grow
into a very wonderful community

00:48:46.840 --> 00:48:48.190
to help each other out.

00:48:48.310 --> 00:48:51.710
And we try to put our foot in
wherever we can to help along the way.

00:48:51.720 --> 00:48:52.940
And it's wonderful.

00:48:52.940 --> 00:48:54.420
So make sure you go there.

00:48:54.420 --> 00:48:57.030
Sign up for it if you haven't already.

00:48:57.030 --> 00:48:59.540
And then the AppleScript mailing
list is exactly the same.

00:48:59.600 --> 00:49:00.030
same way.