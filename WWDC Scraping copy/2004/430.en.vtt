WEBVTT

00:00:14.840 --> 00:00:15.640
Good afternoon.

00:00:15.660 --> 00:00:16.660
My name is Mark Piccirelli.

00:00:16.660 --> 00:00:20.170
I'm an engineer in the
Cocoa Frameworks group.

00:00:22.150 --> 00:00:25.950
Tiger is going to include a lot
of new Cocoa Scripting features,

00:00:25.950 --> 00:00:29.510
and the focus of all these is to
make it as easy as possible for you

00:00:29.510 --> 00:00:31.760
to implement great scriptability.

00:00:33.160 --> 00:00:35.970
The prerequisites for this talk:
If you've already done a lot

00:00:35.970 --> 00:00:39.250
of basic Cocoa programming,
you'll find out how to add scriptability

00:00:39.310 --> 00:00:41.030
to your existing applications.

00:00:41.150 --> 00:00:43.480
If you've been working with
Cocoa Scripting already,

00:00:43.650 --> 00:00:45.330
you'll find out what's new in Tiger.

00:00:45.330 --> 00:00:46.460
There's a bunch.

00:00:46.640 --> 00:00:48.870
And if so far you've been
programming in Carbon land,

00:00:48.870 --> 00:00:52.620
but you know a bunch about scriptability,
this will be a good opportunity

00:00:52.620 --> 00:00:55.750
for you to get a sort of a
feel for how Cocoa differs.

00:00:57.740 --> 00:01:00.880
Today I'll be specifically talking
about the new SDF file format

00:01:00.940 --> 00:01:04.430
that Cocoa supports for you
to declare your scriptability.

00:01:04.440 --> 00:01:09.030
I'll go into a good bit of detail about
how scripting uses key-value coding,

00:01:09.030 --> 00:01:11.440
a fundamental mechanism and
foundation that's being reused

00:01:11.530 --> 00:01:14.160
for a lot of things now in Cocoa.

00:01:14.160 --> 00:01:17.430
I'll talk about error handling
because it's so important.

00:01:17.450 --> 00:01:20.180
I'll go into some detail
about scriptability in apps

00:01:20.190 --> 00:01:22.920
that use Cocoa bindings,
and I'll leave you with

00:01:22.920 --> 00:01:24.350
some debugging hints.

00:01:24.980 --> 00:01:26.740
So today's sample app.

00:01:26.770 --> 00:01:29.900
If you're on the Cocoa Dev mailing list,
you know that Scott Anguish and

00:01:29.900 --> 00:01:32.360
Malcolm Crawford have been doing
a tremendous job of answering

00:01:32.360 --> 00:01:34.640
questions about Cocoa bindings.

00:01:34.750 --> 00:01:38.020
And Malcolm has actually gone
through the trouble of creating a

00:01:38.020 --> 00:01:43.660
pretty nice little sample of how to
hook up a custom view to bindings.

00:01:43.710 --> 00:01:46.860
So as a casting about for
what should I make scriptable,

00:01:46.860 --> 00:01:49.410
this seemed like a pretty obvious choice,
because one of the things I want

00:01:49.410 --> 00:01:53.820
to show you is how well bindings
and scripting interact now.

00:01:55.930 --> 00:01:58.710
The first thing you do when you add
scriptability to an application is that

00:01:58.710 --> 00:02:03.350
you have to declare the scriptability so
that applications like Script Editor that

00:02:03.350 --> 00:02:06.880
will drive the scripting can
get the scripting dictionary,

00:02:06.960 --> 00:02:12.000
can show it to the user,
can compile scripts and things like that.

00:02:12.130 --> 00:02:15.420
And in Tiger,
we're adding a new mechanism to do that,

00:02:15.420 --> 00:02:19.090
a new file format actually
called the SDEF file format.

00:02:25.810 --> 00:02:28.700
So what is there to declare for
an application's scriptability?

00:02:28.700 --> 00:02:32.140
Well, as you can see in the screenshot,
which is from Script Editor,

00:02:32.160 --> 00:02:35.070
there's scriptable classes and
there's scriptable commands.

00:02:35.200 --> 00:02:37.550
This is the scripting dictionary
for the graphics bindings

00:02:37.550 --> 00:02:38.700
that I'll be showing you.

00:02:38.700 --> 00:02:40.560
And it has a document class.

00:02:40.560 --> 00:02:41.400
It's very simple.

00:02:41.400 --> 00:02:45.280
It just has circles,
the circles you saw on the screen there.

00:02:45.280 --> 00:02:50.250
And there is a circle class also with a
variety of properties associated with it,

00:02:50.250 --> 00:02:53.400
like the position and the
color and the radius of the

00:02:53.400 --> 00:02:54.850
circle and some shadow aspects.

00:02:57.260 --> 00:03:00.200
So there are three main categories of
things you declare in Scriptability:

00:03:00.200 --> 00:03:05.440
the classes that the scripter sees,
the commands that the scripter, you know,

00:03:05.440 --> 00:03:08.540
the person who's writing the script,
can use,

00:03:08.700 --> 00:03:13.600
and then types that are used by class
properties and command parameters.

00:03:13.680 --> 00:03:16.560
And we have a pretty big
variety of types available now.

00:03:16.560 --> 00:03:20.110
It expanded a lot actually in Tiger,
but just some of the more

00:03:20.110 --> 00:03:22.500
common ones you'll be using
are enumerations and records,

00:03:22.500 --> 00:03:26.510
which are new,
and support for some custom types too.

00:03:28.870 --> 00:03:32.510
So the old way, in Panther and earlier,
for declaring your

00:03:32.510 --> 00:03:36.270
application scriptability,
it was done by providing a pair

00:03:36.270 --> 00:03:39.280
of files in your application,
a script suite file and a

00:03:39.280 --> 00:03:40.480
script terminology file.

00:03:40.480 --> 00:03:43.350
The script suite file was full
of implementation details,

00:03:43.350 --> 00:03:46.190
and the script terminology
file was full of human-readable

00:03:46.240 --> 00:03:47.800
strings to show to the user.

00:03:47.800 --> 00:03:51.700
These always lived in your
application's resources directory,

00:03:51.700 --> 00:03:55.350
and they're kind of hard to work with,
mostly because they're split

00:03:55.390 --> 00:03:58.280
across two different files that
you always had to keep in sync.

00:03:58.830 --> 00:04:01.790
It was a feature, it had something to do
with internationalization,

00:04:01.790 --> 00:04:05.950
it's not really being used that much,
and actually there are other

00:04:05.950 --> 00:04:09.180
mechanisms in Cocoa for
getting roughly the same thing.

00:04:09.180 --> 00:04:11.530
But when I say that it
was hard to work with,

00:04:11.530 --> 00:04:15.080
don't let me talk you out of
trying scriptability right now.

00:04:15.080 --> 00:04:16.400
They're not that hard to work with.

00:04:16.500 --> 00:04:20.930
You don't have to wait for Tiger to
get a good head start on adding

00:04:20.930 --> 00:04:23.800
scriptability to your application.

00:04:23.800 --> 00:04:26.490
And also,
some of the things we're doing while

00:04:26.570 --> 00:04:28.780
adding support for this new system.

00:04:28.800 --> 00:04:31.920
The new scripting declaration
file format are kind of carrying

00:04:31.920 --> 00:04:33.960
over into the script suite world.

00:04:33.960 --> 00:04:36.190
So, you know,
warnings about things that you

00:04:36.190 --> 00:04:39.320
do wrong and stuff like that are
also being applied to the old

00:04:39.330 --> 00:04:41.550
file formats just serendipitously.

00:04:41.570 --> 00:04:44.420
So working with them is also getting
easier while we're doing this.

00:04:44.460 --> 00:04:47.980
And of course, if you add scriptability
to your application now,

00:04:48.020 --> 00:04:51.430
because it's such a valuable feature,
you know, users want to do workflow,

00:04:51.430 --> 00:04:52.650
things like that.

00:04:52.720 --> 00:04:55.460
You know, of course,
we won't break compatibility

00:04:55.460 --> 00:04:57.770
for your application in Tiger,
even though we are doing

00:04:57.770 --> 00:04:58.080
some pretty big work.

00:04:58.080 --> 00:04:58.570
So, you know, we're working with them.

00:04:58.580 --> 00:04:58.780
So, you know, we're working with them.

00:04:58.800 --> 00:05:00.510
changes.

00:05:02.390 --> 00:05:03.890
So that was the old way of doing it.

00:05:04.010 --> 00:05:05.500
I won't go into too
much detail about that.

00:05:05.500 --> 00:05:08.060
I actually went into quite a bit of
detail about it like two years ago.

00:05:08.060 --> 00:05:11.170
The new way,
which I will discuss in detail,

00:05:11.190 --> 00:05:12.420
is SDEF files.

00:05:12.420 --> 00:05:15.000
The SDEF file format itself is not new.

00:05:15.000 --> 00:05:19.340
It was introduced way back in Mac OS 10.2
in the form of some documentation

00:05:19.340 --> 00:05:21.420
and a command line tool called SDP.

00:05:21.420 --> 00:05:23.480
That was pretty handy.

00:05:23.480 --> 00:05:27.340
You could start with an SDEF file,
and it would parse that and

00:05:27.450 --> 00:05:31.320
output Carbon AETE resources,
as well as Cocoa Script Suite and

00:05:31.360 --> 00:05:32.280
Script Terms.

00:05:33.230 --> 00:05:36.120
So even though Cocoa didn't
have built-in support for this

00:05:36.120 --> 00:05:40.130
more convenient file format,
more powerful file format,

00:05:40.300 --> 00:05:44.590
it was still useful for you
to build your scriptability.

00:05:44.600 --> 00:05:47.890
I think some applications at Apple,
like Mail, for instance,

00:05:48.040 --> 00:05:50.970
actually write all their
scriptability support in SDEF,

00:05:50.970 --> 00:05:53.420
and then they use SDP during
a build phase to output the

00:05:53.420 --> 00:05:56.900
Script Suite and Script Terminology
files that Cocoa needs at runtime.

00:05:59.400 --> 00:06:01.100
But that won't be necessary anymore.

00:06:01.100 --> 00:06:04.580
What's new in Cocoa is that it
parses these SDef files natively.

00:06:04.580 --> 00:06:07.400
They still in general
will probably live in your

00:06:07.400 --> 00:06:09.880
application's resources directory.

00:06:09.980 --> 00:06:12.600
But Cocoa is not going to just
load them automatically every

00:06:12.600 --> 00:06:15.610
SDef in your resources directory
like it did with ScriptSuite and

00:06:15.610 --> 00:06:20.780
Script Terminology files because that
was pretty inconvenient in the past.

00:06:20.780 --> 00:06:23.980
ScriptSuite declarations would
get loaded into every application

00:06:23.980 --> 00:06:26.460
whether they were applicable or not.

00:06:26.460 --> 00:06:29.920
And it wasn't exactly the
perfect way to do things.

00:06:29.930 --> 00:06:35.420
So now what we're going to let you do is
you specifically specify in an entry in

00:06:35.420 --> 00:06:40.140
your application's Info.plist what the
top level scripting definition file is.

00:06:40.140 --> 00:06:43.560
In our example it's going to
be graphics bindings.sdef.

00:06:43.560 --> 00:06:46.310
One thing that hasn't changed is
that you still need an entry in your

00:06:46.310 --> 00:06:49.540
Info.plist NSAppleScript enabled
equals yes to turn on

00:06:49.600 --> 00:06:51.810
scripting in the first place.

00:06:52.550 --> 00:06:55.480
So the SDF file format is XML-based.

00:06:55.480 --> 00:06:57.520
Nonetheless,
it is easier to edit than the

00:06:57.520 --> 00:06:59.660
old script-sweetened script
terminology formats were.

00:06:59.680 --> 00:07:02.960
A lot of that ease comes from the
fact that it's just one file now.

00:07:02.960 --> 00:07:05.750
Programmatic information and
human-readable information

00:07:05.750 --> 00:07:07.030
are all in the same file.

00:07:07.040 --> 00:07:13.120
It lends itself well to attractive,
informative scripting dictionaries.

00:07:13.140 --> 00:07:18.690
It was really designed to represent
easily the things that users need to

00:07:18.690 --> 00:07:22.000
see to be able to write scripts easily.

00:07:22.400 --> 00:07:26.360
If you want to get every last bit
of detail about this file format,

00:07:26.360 --> 00:07:28.730
just go to Terminal and type man sdef.

00:07:28.730 --> 00:07:33.610
There's a pretty large manual page
that declares everything in big detail.

00:07:33.910 --> 00:07:37.110
So the first category of things
that you declare in SDEF files

00:07:37.180 --> 00:07:38.800
are class declarations.

00:07:38.910 --> 00:07:41.760
And you're declaring your
application scripting classes,

00:07:41.890 --> 00:07:44.200
which very often have a
very tight coupling with

00:07:44.200 --> 00:07:47.510
your implementation classes,
you know, the ones that came about just

00:07:47.510 --> 00:07:49.900
as a result of your design,
your object model.

00:07:49.900 --> 00:07:51.250
But not always.

00:07:51.300 --> 00:07:55.810
Sometimes there are places where you'll
have classes that are just for scripting.

00:07:56.740 --> 00:07:59.010
When you declare classes,
you typically declare the scriptable

00:07:59.110 --> 00:08:01.140
properties of those classes.

00:08:01.140 --> 00:08:03.990
And something that's a little rarer,
you declare the commands that

00:08:03.990 --> 00:08:06.150
instances of those classes can handle.

00:08:06.300 --> 00:08:09.140
And I say it's rare because
the AppleScript standard suite

00:08:09.320 --> 00:08:14.040
includes a pretty complete
set of fundamental operations,

00:08:14.040 --> 00:08:18.900
and customizing that is
very often not necessary.

00:08:20.330 --> 00:08:23.720
A scripting class declaration has a
human readable name and description,

00:08:23.720 --> 00:08:27.380
a four-character code that identifies it,
and if you're hoping that I'd be saying,

00:08:27.450 --> 00:08:30.130
"There are no more four-character
codes," for people who've

00:08:30.160 --> 00:08:32.180
worked with this in the past,
I won't be.

00:08:32.180 --> 00:08:34.070
They're still there,
but we know that people

00:08:34.090 --> 00:08:35.160
hate to work with them.

00:08:35.160 --> 00:08:38.290
So we may make some progress
in that in the future.

00:08:38.300 --> 00:08:41.270
So it also has implementation
details like the name of the

00:08:41.270 --> 00:08:44.750
objective C or Java class,
and property declarations and

00:08:44.750 --> 00:08:48.020
just a terminology mismatch
for historical reasons.

00:08:48.130 --> 00:08:50.100
What we call properties in
AppleScript are usually called

00:08:50.110 --> 00:08:52.610
attributes in 200 relationships
by Cocoa programmers,

00:08:52.610 --> 00:08:55.840
and element class declarations in
AppleScript are usually called too many

00:08:55.840 --> 00:08:57.700
relationships by Cocoa programmers.

00:08:59.720 --> 00:09:05.060
So here's zooming in on the circle
of the document and the circle

00:09:05.110 --> 00:09:07.200
class of that graphics binding app.

00:09:07.200 --> 00:09:09.890
So you can see the document
class has just one element class,

00:09:09.990 --> 00:09:10.380
circle.

00:09:10.560 --> 00:09:13.700
So the elements of one of
these documents are circles.

00:09:13.730 --> 00:09:18.130
And there is a circle class with
the properties I mentioned earlier.

00:09:19.320 --> 00:09:21.620
Here's what you do to make
that sort of thing appear in

00:09:21.730 --> 00:09:23.130
your scripting dictionary.

00:09:23.150 --> 00:09:26.490
This is part of the declaration,
this is most of the declaration

00:09:26.490 --> 00:09:27.200
for the Circle class.

00:09:27.200 --> 00:09:32.320
It has a name and a human-readable
description and a four-character code.

00:09:32.510 --> 00:09:39.430
When I talk about four-character codes,
by the way, I'll be pointing you later

00:09:39.430 --> 00:09:40.760
to some documentation,
the new scripting interface guidelines

00:09:40.760 --> 00:09:40.760
that give advice about how to pick those.

00:09:41.200 --> 00:09:43.520
Implementation details
like the Cocoa class.

00:09:43.560 --> 00:09:45.500
We have an Objective-C class
in our project,

00:09:45.590 --> 00:09:47.100
also called Circle.

00:09:47.270 --> 00:09:51.140
Whenever in an SDEF file you
see a Cocoa element with an

00:09:51.140 --> 00:09:55.100
attribute like class after it,
that's always an implementation detail.

00:09:55.100 --> 00:10:00.100
These SDEF files are made to be read
by a number of different clients,

00:10:00.100 --> 00:10:03.470
like Script Editor will be reading them,
as well as Cocoa reading

00:10:03.470 --> 00:10:04.600
them for its own purposes.

00:10:04.600 --> 00:10:09.000
So all the implementation details
are kept separate that way.

00:10:26.180 --> 00:10:26.180
Properties also have names and
descriptions and four-character codes,

00:10:26.180 --> 00:10:26.180
but they also have something else.

00:10:26.180 --> 00:10:26.180
They have a type.

00:10:26.180 --> 00:10:26.180
So in our simple example here,
the types of the X position

00:10:26.180 --> 00:10:26.180
and the Y positions are reals,
you know, floats.

00:10:26.180 --> 00:10:26.180
And the type for the color
is a color that's built into

00:10:26.180 --> 00:10:26.180
our system called color.

00:10:27.880 --> 00:10:31.420
An implementation detail that
you get to provide when you're

00:10:31.420 --> 00:10:36.190
declaring that a class has properties
is the key for the property.

00:10:36.270 --> 00:10:38.450
And I'm going to be talking
about key-value coding and

00:10:38.450 --> 00:10:39.850
key-value observing a lot today.

00:10:40.030 --> 00:10:46.350
These keys are the strings that
identify the properties for use by

00:10:46.350 --> 00:10:46.350
these fundamental systems in Foundation.

00:10:48.170 --> 00:10:51.820
Cocoa command declarations,
which I won't go into in too much

00:10:51.820 --> 00:10:55.100
detail because declaring custom
commands is hopefully very rare,

00:10:55.100 --> 00:11:00.260
look very similar in SDEF,
same sort of shape.

00:11:00.310 --> 00:11:04.490
Cocoa already includes declarations
of the commands in the standard suite,

00:11:04.500 --> 00:11:08.510
get, set, move, duplicate, open, print,
close, quit, save, things like that.

00:11:09.300 --> 00:11:11.730
A new feature in SDEF,
something that people

00:11:11.740 --> 00:11:15.240
have been asking for,
is the ability to, in rare situations,

00:11:15.240 --> 00:11:18.650
replace our command declarations
with customized ones that

00:11:18.660 --> 00:11:21.170
have more parameters,
things like that.

00:11:21.180 --> 00:11:24.580
So you're going to be able to do that now
with this new file format we've adopted.

00:11:24.580 --> 00:11:27.640
And you can, as always,
add your own custom commands.

00:11:29.870 --> 00:11:33.500
So a command declaration has
human readable name description,

00:11:33.500 --> 00:11:35.650
two four character codes
instead of just one,

00:11:35.650 --> 00:11:39.080
and then an implementation detail
like the name of the objective C or

00:11:39.080 --> 00:11:43.130
Java class that encapsulate instances
of those commands that come over

00:11:43.130 --> 00:11:45.780
as a result of running the script.

00:11:45.820 --> 00:11:51.220
And commands have direct parameters and
they also have other kinds of parameters.

00:11:51.220 --> 00:11:54.840
These are mentioned pretty much in the
Apple script language guide but we do

00:11:54.840 --> 00:11:59.390
let you declare them with great fidelity
so you're able to do things that match

00:11:59.430 --> 00:12:03.900
exactly what people who've read the
Apple script language guide would expect.

00:12:03.900 --> 00:12:08.450
And if a command has a return code you
get to declare the type of that too.

00:12:08.470 --> 00:12:13.920
Just a quick example,
the send command from mails scriptability

00:12:13.960 --> 00:12:16.800
declared as a nestf is very simple.

00:12:16.800 --> 00:12:19.740
It has a name and description,
a pair of four character codes,

00:12:19.790 --> 00:12:24.150
and this one has a direct parameter that
represents the receiver of the command.

00:12:24.160 --> 00:12:25.640
In this case the type of the receiver.

00:12:25.640 --> 00:12:26.940
The receiver will be a message.

00:12:26.940 --> 00:12:30.240
Message is another class that's also
declared in mails scriptability.

00:12:32.400 --> 00:12:35.240
So basic types that you get to use.

00:12:35.240 --> 00:12:38.000
The set is pretty clean.

00:12:38.000 --> 00:12:40.690
The names that you use in the SDEF are
pretty much the human-readable

00:12:40.690 --> 00:12:43.790
names that users see in scripting
dictionaries when they're opening it up

00:12:43.790 --> 00:12:45.600
in Script Editor or something like that.

00:12:45.660 --> 00:12:47.690
So we provide the set
that people are expecting,

00:12:47.690 --> 00:12:50.770
things like Boolean, color, date, file,
integer, real, so on.

00:12:51.910 --> 00:12:55.900
Each of these maps to a Cocoa class
so that your scriptability code will

00:12:55.980 --> 00:12:59.540
get an instance of the Cocoa class
whenever one of those fundamental

00:12:59.540 --> 00:13:01.140
types appears in the script.

00:13:01.150 --> 00:13:06.100
So Booleans map to NSNumbers,
integers also map to NSNumbers,

00:13:06.200 --> 00:13:09.000
colors map to NS colors, and so on.

00:13:11.980 --> 00:13:14.730
Another type that you'll see
in S-DEF is the specifier type.

00:13:14.830 --> 00:13:17.120
It corresponds to an
AppleScript reference,

00:13:17.120 --> 00:13:20.460
what's called an AppleScript language
guide or reference.

00:13:20.460 --> 00:13:22.910
And in Cocoa,
the class that represents this

00:13:22.910 --> 00:13:24.780
is NSScriptObjectSpecifier.

00:13:24.780 --> 00:13:27.660
And a specifier identifies one
or more scriptable objects,

00:13:27.660 --> 00:13:33.340
like words four through eight of text,
of a text-edit document,

00:13:33.340 --> 00:13:35.380
or something like that.

00:13:36.710 --> 00:13:38.050
And here's an example use of that.

00:13:38.110 --> 00:13:42.170
Just the close command has a direct
parameter that represents the

00:13:42.170 --> 00:13:44.660
receivers of the close command,
and the type is specifier,

00:13:44.660 --> 00:13:50.640
which means that you send a close command
to a set of objects that are specified,

00:13:50.640 --> 00:13:54.090
like, for example, you know,
documents one through three

00:13:54.090 --> 00:13:55.670
or something like that.

00:13:57.450 --> 00:14:00.160
Another type that you'll see in
SDEF is a location specifier,

00:14:00.160 --> 00:14:02.990
which is a lot like a specifier,
but not quite.

00:14:03.010 --> 00:14:08.340
It corresponds to an AppleScript language
guide insertion point,

00:14:08.340 --> 00:14:11.040
and in Cocoa,
the class that's used to represent

00:14:11.040 --> 00:14:13.150
this is NSPositionalSpecifier.

00:14:13.250 --> 00:14:17.400
And it identifies an object location,
which will very often be the same

00:14:17.400 --> 00:14:19.640
as the location of an actual object.

00:14:19.770 --> 00:14:26.070
Sometimes it'll be the position
before or after a specified object.

00:14:27.850 --> 00:14:29.100
Here's an example use.

00:14:29.100 --> 00:14:33.800
The standard suites move
command has a to parameter.

00:14:33.800 --> 00:14:37.800
It's very popular to name
parameters with prepositions.

00:14:37.800 --> 00:14:41.740
In this case,
this very fundamental command,

00:14:41.820 --> 00:14:48.850
the to parameter,
its type is location specifier.

00:14:48.910 --> 00:14:51.790
You're specifying the location
to which things should be moved.

00:14:56.540 --> 00:14:59.130
Some more types that
you get to use in SDEF.

00:14:59.130 --> 00:15:01.160
Another one is enumerations.

00:15:01.180 --> 00:15:03.630
If you've been programming in C,
this is very old news.

00:15:03.650 --> 00:15:05.310
It's the same concept in Apple Script.

00:15:05.470 --> 00:15:07.070
They're named values.

00:15:07.100 --> 00:15:08.400
Here's an example.

00:15:08.400 --> 00:15:12.590
It's the declaration for the
printing error handling enumeration,

00:15:12.590 --> 00:15:15.760
which is used by the new
enhanced print Apple event,

00:15:15.760 --> 00:15:19.680
about which a tech note appeared
on our web about a year ago.

00:15:21.360 --> 00:15:24.100
So when you send a print
command to an application that

00:15:24.100 --> 00:15:27.290
supports everything properly,
you get to specify what kind of

00:15:27.370 --> 00:15:31.460
post-script error handling gets done,
detailed or standard.

00:15:31.480 --> 00:15:34.440
And that's specified
just with an enumeration,

00:15:34.440 --> 00:15:38.540
so scripters don't have to type
in integers or things like that.

00:15:40.720 --> 00:15:43.740
of ancient AppleScript concept
is the list type,

00:15:43.750 --> 00:15:46.800
but Cocoa hasn't really
supported it properly until now.

00:15:46.800 --> 00:15:48.690
In Tiger, it will.

00:15:48.690 --> 00:15:56.520
You can preface just about
any type name with list of,

00:15:56.530 --> 00:15:59.960
and that indicates that it should
be one or more of those things.

00:16:00.920 --> 00:16:05.470
Your implementation in this
case will always be passed,

00:16:05.470 --> 00:16:10.360
in this example, for list of file,
an NSArray of NSURLs.

00:16:10.360 --> 00:16:13.860
So even when the script specifies,
for example, just one file,

00:16:13.860 --> 00:16:17.280
we want to make it very easy for
your implementation code not to

00:16:17.280 --> 00:16:19.300
have to check multiple types.

00:16:19.300 --> 00:16:20.900
You know, is it a bare NSURL?

00:16:20.900 --> 00:16:22.720
Is it an NSArray of URLs?

00:16:22.750 --> 00:16:27.450
If you declared list of file,
you'll always get an NSArray of NSURLs.

00:16:29.650 --> 00:16:33.010
A new feature in SDEF that
we think will turn out to be

00:16:33.100 --> 00:16:35.400
pretty useful is complex types.

00:16:35.400 --> 00:16:37.480
And I don't mean it has a
real and imaginary part.

00:16:37.670 --> 00:16:43.620
I mean that the types is one of
a variety of different types,

00:16:43.620 --> 00:16:44.980
alternative types.

00:16:44.980 --> 00:16:50.210
So this will be useful in situations
like specifying the address book

00:16:50.210 --> 00:16:55.120
label in address book scripting for
a phone number or an email message.

00:16:55.120 --> 00:16:57.620
You can say home or work
or something like that.

00:16:57.620 --> 00:17:00.230
You can just do this with
a string if you want,

00:17:00.280 --> 00:17:04.440
but there's a little bit more
checking that can go on at compile

00:17:04.590 --> 00:17:10.210
time if you support either a string
for custom labels or one of an

00:17:10.230 --> 00:17:14.160
enumeration for predefined labels.

00:17:14.160 --> 00:17:17.420
And this not only lets scripters
write what they want to write,

00:17:17.430 --> 00:17:21.460
it lets them know that they can write it
because information about this actually

00:17:21.470 --> 00:17:23.420
appears in the scripting dictionary.

00:17:23.420 --> 00:17:25.000
So scripting dictionary is an SDEF.

00:17:25.940 --> 00:17:26.630
A lot of the things that we're
going to be talking about in

00:17:26.630 --> 00:17:29.400
SDEF are going to be much richer,
filled with a lot more hints to scripters

00:17:29.400 --> 00:17:32.760
about what they can actually do,
what's worth trying.

00:17:34.760 --> 00:17:39.480
And here's a sample from the
standard enhanced print Apple event.

00:17:39.500 --> 00:17:43.700
The type of the direct parameter,
the receiver of this command,

00:17:43.700 --> 00:17:48.550
is list of file or specifier,
which means you can either print a

00:17:48.550 --> 00:17:53.590
list of files or one file that is
being picked with the standard file

00:17:53.590 --> 00:17:59.080
chooser dialog or something like that,
or a specifier, for example,

00:17:59.120 --> 00:18:02.490
a list of documents
that are already open.

00:18:02.490 --> 00:18:03.170
You can print those too.

00:18:08.350 --> 00:18:13.100
So something that SDEF has that the
older mechanisms didn't have is a way

00:18:13.100 --> 00:18:20.430
to take real control over the reuse
of Cocoa's standard declarations.

00:18:20.510 --> 00:18:22.450
As I mentioned,
Cocoa doesn't automatically just

00:18:22.450 --> 00:18:24.180
read all its own files anymore.

00:18:24.180 --> 00:18:29.100
It makes you import them,
so you'll have much better control.

00:18:30.280 --> 00:18:33.030
This is done with an import tag,
and here's a sample of

00:18:33.030 --> 00:18:34.250
what it'll look like.

00:18:34.320 --> 00:18:38.250
Import name equals foundation
standard commands dot SDEF.

00:18:38.290 --> 00:18:42.820
We'll be bundling up all of our standard
command declarations in an SDEF,

00:18:42.910 --> 00:18:45.740
and you can import them if you
want to save space in your own

00:18:45.740 --> 00:18:49.160
SDEF and also to take advantage of
when we add new standard commands,

00:18:49.160 --> 00:18:50.620
should that ever happen.

00:18:51.420 --> 00:18:55.040
Or if you're doing heavy customization,
you can just copy and paste that all

00:18:55.050 --> 00:18:59.070
into your own SDEF and make sure that you
have complete control over what goes on.

00:18:59.280 --> 00:19:00.360
Thank you.

00:19:03.300 --> 00:19:54.700
[Transcript missing]

00:19:56.900 --> 00:19:59.560
Something else that
Cocoa has been lacking,

00:19:59.560 --> 00:20:02.270
but we now have because
we've adopted SSTEP,

00:20:02.270 --> 00:20:04.270
is called the class extension tag.

00:20:04.290 --> 00:20:06.180
And if you've been working
with Objective-C and you

00:20:06.180 --> 00:20:08.620
know all about categories,
it's pretty much the same thing.

00:20:08.680 --> 00:20:11.450
So actually you can do a few other
things that you wouldn't expect

00:20:11.450 --> 00:20:13.070
to be able to do with categories.

00:20:16.630 --> 00:20:18.160
So we're putting this
here for one reason.

00:20:18.160 --> 00:20:21.290
It's going to make putting
scriptability in bundles easier.

00:20:21.290 --> 00:20:27.640
So if you have a bundle or a
plug-in that adds properties to

00:20:27.640 --> 00:20:30.500
the top-level application class,
this is how you'll do it.

00:20:30.560 --> 00:20:32.420
You'll extend the application class.

00:20:32.420 --> 00:20:35.110
In the past,
people have had to do strange things

00:20:35.110 --> 00:20:39.000
like subclassing the application class,
even when there wasn't really

00:20:39.140 --> 00:20:42.680
much reason to do that,
except we didn't provide a better way.

00:20:42.690 --> 00:20:45.030
So now we are providing a better way.

00:20:47.500 --> 00:20:50.000
Other features.

00:20:50.000 --> 00:20:51.890
If you've been working with
Cocoa Scripting and you've seen the

00:20:51.900 --> 00:20:55.400
scripting dictionaries that result where
things are a little bit randomized,

00:20:55.560 --> 00:21:00.570
that's because the script suite
format is property list based,

00:21:00.730 --> 00:21:03.420
and what's more is using
property list dictionaries,

00:21:03.470 --> 00:21:05.640
which of course have no inherent order.

00:21:05.640 --> 00:21:10.780
So things get moved around a little bit,
and you can't really control how

00:21:10.780 --> 00:21:15.280
things are presented to the user,
the writer of the scripts.

00:21:15.280 --> 00:21:17.280
SDEF has no such problem.

00:21:17.960 --> 00:21:21.680
A big feature of SDEF is that it's
because it's going to be a file format

00:21:21.680 --> 00:21:24.880
that's shared outside of just Cocoa.

00:21:24.900 --> 00:21:29.160
There's actually API in the
OSA framework for reading these.

00:21:29.160 --> 00:21:32.160
They're going to be recognized
natively by Script Editor,

00:21:32.160 --> 00:21:35.300
and presumably, hopefully,
other scripting tools too.

00:21:36.840 --> 00:21:40.510
A big feature of SDEF is that it's
going to be a file format that's

00:21:40.510 --> 00:21:42.330
shared outside of just Cocoa.

00:21:42.420 --> 00:21:46.040
There's actually API in the
OSA framework for reading these.

00:21:46.040 --> 00:21:49.500
They're going to be recognized
natively by Script Editor,

00:21:49.500 --> 00:21:52.450
and presumably,
other scripting tools too.

00:21:53.800 --> 00:21:56.200
So yes,
very old news in the Carbon world,

00:21:56.210 --> 00:21:59.180
and Cocoa is finally
catching up in this regard.

00:21:59.180 --> 00:22:02.030
So yeah, there won't be any more
application launching.

00:22:02.070 --> 00:22:04.840
Script Editor will just dig
around in the info P list and,

00:22:04.910 --> 00:22:11.070
you know, we'll be able to, you know,
follow the imports and things like that.

00:22:11.780 --> 00:22:14.590
One caveat with that, by the way,
is that if you're doing

00:22:14.590 --> 00:22:17.700
the dynamic SDEF feature,
well, just as in, you know,

00:22:17.700 --> 00:22:25.710
old Carbon tradition, well,
then your application will still

00:22:25.710 --> 00:22:25.710
have to be launched so that you
can actually build it right then.

00:22:26.550 --> 00:22:30.460
Other features,
SDEF includes help for letting you

00:22:30.460 --> 00:22:34.040
provide backwards script compatibility.

00:22:34.040 --> 00:22:37.480
When you're rearranging your scripting,
and it seems that nobody ever

00:22:37.480 --> 00:22:41.000
gets it right on the first try,
you want to remove things,

00:22:41.080 --> 00:22:45.170
you want to rename things,
but you don't want to break people's

00:22:45.170 --> 00:22:47.420
existing scripts gratuitously.

00:22:47.460 --> 00:22:48.700
That's kind of rude.

00:22:48.700 --> 00:22:52.340
So SDEF has a couple
features like the hidden tag,

00:22:52.340 --> 00:22:57.400
which means if you have an element class
or a command or something like that that

00:22:57.540 --> 00:23:00.160
you're deprecating because it's not,
you know,

00:23:00.160 --> 00:23:03.000
you don't want it around anymore,
it's just cruft, you know,

00:23:03.000 --> 00:23:06.570
you can leave that in there so
that existing scripts keep running,

00:23:06.570 --> 00:23:10.330
but new users who open up your scripting
dictionary and look at it won't

00:23:10.330 --> 00:23:12.420
ever know that those ever existed.

00:23:12.420 --> 00:23:14.300
They're hidden.

00:23:14.300 --> 00:23:18.800
And the synonym tag fixes similar
problems when you're renaming things or,

00:23:18.800 --> 00:23:21.280
you know,
getting the four character codes

00:23:21.280 --> 00:23:23.260
just right or something like that.

00:23:24.240 --> 00:23:27.940
One thing that's been a source
of big confusion in Cocoa is how

00:23:27.940 --> 00:23:31.040
we handle the scripting of files.

00:23:31.040 --> 00:23:34.250
And with SDef,
we're really going to be cleaning it up.

00:23:34.300 --> 00:23:38.730
There is a single type,
it's a public type, it's called file,

00:23:38.730 --> 00:23:42.080
and it's public unlike the old
NSString file path that some of you

00:23:42.140 --> 00:23:44.480
are using in your ScriptSuite files.

00:23:44.480 --> 00:23:46.080
This one is genuinely public.

00:23:46.080 --> 00:23:51.430
And of course, you can use list of file,
and when you do, your code will always

00:23:51.430 --> 00:23:53.260
get an NSArray of URLs.

00:23:54.220 --> 00:23:56.820
And scripters, you know,
through the magic of

00:23:56.820 --> 00:24:00.200
Apple event coercions,
get to use files, aliases, HFS paths,

00:24:00.250 --> 00:24:02.840
POSIX paths,
whatever they're most comfortable with,

00:24:02.840 --> 00:24:05.570
and your code will never be
able to tell the difference.

00:24:05.580 --> 00:24:08.480
It always just gets URLs.

00:24:20.230 --> 00:24:22.440
So implementing your
application scriptability.

00:24:22.440 --> 00:24:25.160
You've declared it to the outside world,
and now you actually want to

00:24:25.220 --> 00:24:26.380
hook it up and make it work.

00:24:26.460 --> 00:24:30.370
And this requires you to know
all about key-value coding.

00:24:32.120 --> 00:24:34.250
And this isn't a change in Tiger.

00:24:34.330 --> 00:24:37.380
Cocoa Scripting has always been
built on top of key-value coding.

00:24:37.500 --> 00:24:40.220
And what that means is you have
to make your scriptable classes

00:24:40.220 --> 00:24:41.750
key-value coding compliant.

00:24:41.860 --> 00:24:49.020
And just to do the same
old terminology review,

00:24:49.020 --> 00:24:49.020
properties are attributes and element
classes are too many relationships.

00:24:49.870 --> 00:24:51.180
What does key value coding do?

00:24:51.180 --> 00:24:54.260
Well first of all it's worth mentioning
that it's the same mechanism that

00:24:54.340 --> 00:24:56.290
Cocoa Bindings and now Core Data uses.

00:24:56.300 --> 00:24:59.950
It gives access to object
properties using a very generic

00:24:59.950 --> 00:25:02.220
API that identifies them by key.

00:25:02.240 --> 00:25:04.480
And keys in this case are just strings.

00:25:04.490 --> 00:25:07.760
Like in today's example of the
Graphics Bindings application,

00:25:07.760 --> 00:25:11.280
the circles of a Graphics Binding
document or the color or the

00:25:11.370 --> 00:25:13.720
radius of one of those circles.

00:25:14.510 --> 00:25:18.850
So the same keys that appear in
SDEF files and are actually also

00:25:18.850 --> 00:25:24.990
used in IB's Bindings Inspector are
used throughout this API.

00:25:27.350 --> 00:25:31.030
So to be KVC compliant, the short,
terse answer is you have to implement

00:25:31.030 --> 00:25:35.650
enough methods or whatever to make
these two methods in NSObject work,

00:25:35.780 --> 00:25:38.580
value for key and set value for key.

00:25:38.580 --> 00:25:42.360
So the quick and easy way to do
that is for each one of the keys,

00:25:42.480 --> 00:25:46.200
implement a method that has
the exact same name as the key,

00:25:46.200 --> 00:25:49.890
so that when Cocoa Scripting
calls or invokes value for key,

00:25:50.090 --> 00:25:53.970
value for key is smart enough to root
around in your class's method list and

00:25:53.970 --> 00:25:57.250
find that key method and invoke it.

00:25:57.950 --> 00:26:00.660
If the property is mutable,
is read-write,

00:26:00.730 --> 00:26:03.850
then you also implement a set-key method.

00:26:04.850 --> 00:26:08.200
and these are just as simple
looking as they sound.

00:26:08.200 --> 00:26:14.180
For our radius property,
where the KVC key is radius,

00:26:14.180 --> 00:26:15.930
there's a method named radius and
there's a method named setRadius.

00:26:18.390 --> 00:26:22.120
For each too-many relationship,
for each collection of pointers to

00:26:22.130 --> 00:26:25.780
other objects that your scriptable has,
you have a choice of

00:26:25.780 --> 00:26:28.060
how you implement that.

00:26:28.140 --> 00:26:31.420
Typically, you would, again,
implement a method named key

00:26:31.420 --> 00:26:34.980
that would return an NSArray,
a collection of the related objects.

00:26:34.980 --> 00:26:39.040
But sometimes for implementation reasons,
complexities arise,

00:26:39.040 --> 00:26:43.620
and you don't have the pointers to the
other objects stored in an NSArray.

00:26:44.760 --> 00:26:47.920
If that's the case,
then instead of implementing key,

00:26:47.920 --> 00:26:51.320
just implement count of key
and object in key at index.

00:26:51.320 --> 00:26:54.870
And again, key is replaced by the actual
key that we're talking about.

00:26:54.900 --> 00:26:59.040
And key-value coding is smart
enough that it'll find those methods

00:26:59.090 --> 00:27:01.070
and use them when it needs to.

00:27:01.080 --> 00:27:03.490
So how do you decide
between the two of them?

00:27:03.500 --> 00:27:06.930
Just whichever is easiest to
implement is the general rule.

00:27:06.930 --> 00:27:10.420
If you change your mind later,
perhaps as a result of measuring

00:27:10.420 --> 00:27:14.730
and doing performance analysis,
it really makes no difference.

00:27:14.740 --> 00:27:18.700
There's nothing outside of key-value
coding that's really going to see this,

00:27:18.790 --> 00:27:21.420
unless, of course,
you declare these methods in a

00:27:21.420 --> 00:27:24.790
header and show them to other
programmers on your project.

00:27:25.340 --> 00:27:28.700
For each mutable-to-many relationship,
where objects can be inserted

00:27:28.700 --> 00:27:33.300
or removed via scripting,
via Cocoa bindings, via core data,

00:27:33.300 --> 00:27:38.800
you would also implement insert
and remove methods whose names

00:27:38.800 --> 00:27:38.800
follow the patterns you see here.

00:27:40.730 --> 00:27:41.980
So a quick sample.

00:27:41.980 --> 00:27:44.840
The Graphics Binding
Applications Document Class has

00:27:44.840 --> 00:27:47.180
a circles relationship.

00:27:47.180 --> 00:27:51.140
All the accessors that key-value
coding needs are right here.

00:27:51.180 --> 00:27:56.550
So circles returns a pointer,
returns an IVAR,

00:27:56.550 --> 00:28:04.180
insert object in circles at index,
remove object from circles at index,

00:28:04.180 --> 00:28:04.180
just invoke the regular
NSMutable array methods.

00:28:06.220 --> 00:28:08.440
So that was just the tip of
the iceberg as far as what

00:28:08.440 --> 00:28:09.800
key-value coding lets you do.

00:28:09.800 --> 00:28:13.860
You know,
having you write accessor methods

00:28:13.860 --> 00:28:18.190
is the simple way to introduce
it and is what people are most

00:28:18.190 --> 00:28:20.210
comfortable with right off the bat.

00:28:20.240 --> 00:28:25.610
Key-value coding has a couple other
different ways to grub in your objects.

00:28:25.690 --> 00:28:27.620
It even has direct IVAR access.

00:28:27.620 --> 00:28:30.620
So you don't even have to write
any accessor methods at all.

00:28:30.620 --> 00:28:33.120
You just have to give your
IVAR the same name as the key.

00:28:33.740 --> 00:28:36.480
And key-value coding's value
for key and set value for key

00:28:36.480 --> 00:28:39.430
methods will poke at it directly.

00:28:39.440 --> 00:28:42.700
This is kind of nice because, of course,
it's less code.

00:28:42.700 --> 00:28:46.320
And it's also kind of nice because
if you do have to add code,

00:28:46.320 --> 00:28:49.810
you actually have to do something
when somebody sets the value.

00:28:49.820 --> 00:28:51.700
You have to, you know,
make something else consistent

00:28:51.700 --> 00:28:52.610
or something like that.

00:28:52.620 --> 00:28:56.550
You can add the set accessor method,
and key-value coding will

00:28:56.550 --> 00:28:58.170
simply start using it.

00:28:58.300 --> 00:29:01.330
It'll stop grubbing at the IVAR directly
and use your set accessor method.

00:29:01.360 --> 00:29:03.710
So we have different lines.

00:29:03.740 --> 00:29:06.200
We have different layers of
functionality for you to use,

00:29:06.200 --> 00:29:09.420
depending on how much
customization you need to do,

00:29:09.420 --> 00:29:10.890
how much code you're willing to write.

00:29:10.920 --> 00:29:13.300
You know,
it goes all the way from virtually

00:29:13.300 --> 00:29:16.010
no code to not that much code.

00:29:16.020 --> 00:29:21.560
So see the documentation where this
is all now described in great detail.

00:29:21.560 --> 00:29:27.160
For even greater detail,
see the turgid pros in the

00:29:27.220 --> 00:29:31.360
nskeyvaluecoding.h header file,
which explains the default

00:29:31.360 --> 00:29:35.220
implementations of methods like value,
set value for key and set value for

00:29:35.220 --> 00:29:37.260
key in just excruciating detail.

00:29:40.000 --> 00:29:43.780
So great error handling is
worth singling out because it's

00:29:43.780 --> 00:29:46.170
something that Cocoa Scripting
hasn't done so well in the past

00:29:46.230 --> 00:29:49.080
and it is tremendously important.

00:29:50.190 --> 00:29:53.940
Error handling is important because
it helps scripters learn the language.

00:29:53.940 --> 00:29:55.090
They learn by doing.

00:29:55.090 --> 00:29:55.880
It's a scripting language.

00:29:55.910 --> 00:29:57.790
They learn by experimenting,
making mistakes.

00:29:57.860 --> 00:30:00.890
They need feedback about
what their mistake was.

00:30:00.900 --> 00:30:04.700
And as a nice side benefit,
when you're testing your scriptability,

00:30:04.740 --> 00:30:07.210
good error handling helps you debug, too.

00:30:07.290 --> 00:30:10.600
We've made big improvements
to our error handling.

00:30:10.600 --> 00:30:13.150
If you've ever scripted a
Cocoa app and gotten it wrong,

00:30:13.150 --> 00:30:16.360
or worked with things like
Apple Script Studio and gotten it wrong,

00:30:16.380 --> 00:30:20.000
you've seen these incredibly
unfriendly error messages.

00:30:20.000 --> 00:30:23.860
Like, "NS cannot create command script
error." And tiger messages like those

00:30:23.860 --> 00:30:25.700
will be just completely disappearing.

00:30:25.700 --> 00:30:28.110
We're just going to do...

00:30:31.070 --> 00:30:34.280
We're just going to be doing the
normal Apple event error messages that

00:30:34.290 --> 00:30:36.730
we should have been doing all along.

00:30:36.850 --> 00:30:39.570
So let me show you what I mean.

00:30:43.950 --> 00:30:48.080
So this is the graphics binding project
that I was just telling you about.

00:30:48.080 --> 00:30:51.320
Let me just point you at
the S stuff real quick.

00:30:54.200 --> 00:30:55.720
Here are some import directives.

00:30:55.890 --> 00:30:58.650
In the shipping version of Tiger,
these will actually be a little

00:30:58.650 --> 00:31:01.140
more complicated because it will
actually point to things in Cocoa.

00:31:01.190 --> 00:31:03.680
But right now,
I just copied these standard SDEFs into

00:31:03.710 --> 00:31:05.520
the project to demonstrate it here.

00:31:05.520 --> 00:31:09.940
So, some imports of the standard
types and items and commands and

00:31:09.940 --> 00:31:12.490
classes that are built into Cocoa.

00:31:12.520 --> 00:31:16.030
Here's that circle class
I was telling you about.

00:31:16.050 --> 00:31:16.710
Very simple.

00:31:16.710 --> 00:31:21.630
Implementation details are
tagged with the Cocoa element.

00:31:22.680 --> 00:31:23.950
And this is interesting.

00:31:23.950 --> 00:31:26.030
Down here,
you see these have no Cocoa key,

00:31:26.040 --> 00:31:29.680
and it's because there's
a default value for those.

00:31:29.680 --> 00:31:33.510
In this case, it's just color or
radius or shadow angle.

00:31:33.520 --> 00:31:35.390
So, it tries to save you a
little bit of typing,

00:31:35.390 --> 00:31:37.620
but if you want to be explicit,
that's okay, too.

00:31:37.620 --> 00:31:38.990
So, let's go ahead and start.

00:31:43.700 --> 00:31:48.690
So the class, the actual source code,
is pretty simple.

00:31:48.810 --> 00:31:52.040
Here is the accessors
for the radius methods.

00:31:52.040 --> 00:31:55.740
And really, these aren't even
actually necessary either.

00:31:55.740 --> 00:31:57.480
But if you get,
things get a little complicated

00:31:57.480 --> 00:31:59.780
and you do have to start
writing accessor methods,

00:31:59.780 --> 00:32:01.810
this is what they'll look like.

00:32:11.400 --> 00:32:16.960
Let's launch Graphics Binance.

00:32:16.960 --> 00:32:16.960
I can show it to you.

00:32:16.960 --> 00:32:16.960
Here it is.

00:32:20.770 --> 00:32:22.080
- It's pretty neat.

00:32:22.080 --> 00:32:25.320
It's like super dot view
or something like that.

00:32:25.320 --> 00:32:28.570
So you can do things like
select different dots.

00:32:28.570 --> 00:32:32.920
And this is all done with
Cocoa bindings with very little code.

00:32:33.900 --> 00:32:36.620
There's a good bit of
code in the actual view,

00:32:36.790 --> 00:32:38.730
the graphics view that
you're seeing here,

00:32:38.800 --> 00:32:40.120
but that's meant to be highly reusable.

00:32:40.160 --> 00:32:43.620
The rest of it is nearly nothing.

00:32:44.330 --> 00:32:46.720
So you can move things around.

00:32:46.720 --> 00:32:49.700
You can select a bunch of them.

00:32:49.860 --> 00:32:54.660
There's this neat little joystick
control for moving the shadows around.

00:32:55.720 --> 00:33:00.180
Of course,
the controls take effect on the

00:33:00.180 --> 00:33:05.500
entire selection at the time.

00:33:05.500 --> 00:33:15.600
So to script that a little bit,
let's open an even simpler document.

00:33:25.420 --> 00:33:27.560
does not actually work quite yet.

00:33:27.570 --> 00:33:34.800
So,
and plus this is already compiled anyway.

00:33:34.800 --> 00:33:34.800
So,

00:33:35.660 --> 00:33:39.500
But as standard Apple script, you know,
you get to do things

00:33:39.500 --> 00:33:41.840
like setting the radius.

00:33:41.840 --> 00:33:44.000
Apple event coercions and
things like that work,

00:33:44.000 --> 00:33:47.690
so you get to set the radius
to an actual text string.

00:33:49.560 --> 00:33:53.710
And if you set it to something
that's complete nonsense,

00:33:53.830 --> 00:34:00.250
finally, it actually says so.

00:34:01.300 --> 00:34:03.300
Hopefully you can all read that.

00:34:03.300 --> 00:34:06.890
It says, "Cannot make gobbledygook into
type real," which is what it

00:34:06.890 --> 00:34:08.650
should have said all along.

00:34:12.350 --> 00:34:15.820
and I will be doing more
than just type errors,

00:34:15.900 --> 00:34:18.540
checking for indexes
and things like that.

00:34:18.540 --> 00:34:22.270
Graphics binding cannot get an error,
can't get document 7, invalid index,

00:34:22.430 --> 00:34:24.770
because there's only one of them open.

00:34:31.360 --> 00:34:31.770
That's it.

00:34:31.920 --> 00:34:33.980
It's not supposed to be
anything earth-shattering,

00:34:34.050 --> 00:34:36.480
so it just works now.

00:34:46.300 --> 00:34:50.600
So the kind of things that Cocoa is
going to be able to check for you are

00:34:50.750 --> 00:34:56.430
when the script uses the wrong types,
nonsense object specifiers you know

00:34:56.470 --> 00:35:00.790
document four of word eight might not
really be what they intended to type

00:35:00.790 --> 00:35:02.520
we're going to catch stuff like that.

00:35:02.530 --> 00:35:04.000
Things like out of
range index specifiers,

00:35:04.000 --> 00:35:07.100
we're going to be able to catch
pretty much everything except

00:35:07.100 --> 00:35:10.680
invalid property values pretty much.

00:35:10.680 --> 00:35:15.080
So when you want to clamp the values
of numbers or something like that

00:35:15.080 --> 00:35:18.280
Cocoa can't catch that for you.

00:35:18.280 --> 00:35:19.270
Everything else it will.

00:35:19.280 --> 00:35:22.030
What you're going to be doing and
this is not implemented in the

00:35:22.030 --> 00:35:25.790
seed right here is use the standard
key value coding compliant or the

00:35:25.790 --> 00:35:28.400
standard key value coding mechanism.

00:35:28.400 --> 00:35:32.510
There's a method on NSObject called
validate value for key error and what

00:35:32.630 --> 00:35:36.910
you'll be doing is just implementing
a method whose name is validate

00:35:36.910 --> 00:35:39.000
key error to return an error.

00:35:39.000 --> 00:35:41.760
So validate radius colon error colon.

00:35:41.760 --> 00:35:45.820
So and what's really great about this is
it's tremendous code reuse because the

00:35:45.820 --> 00:35:49.460
exact mechanism that Cocoa bindings uses.

00:35:52.200 --> 00:35:55.430
In more complicated situations,
if you end up implementing

00:35:55.430 --> 00:35:58.980
your own custom commands,
you should know about these methods.

00:35:58.980 --> 00:36:01.770
I think these are all added in Panther,
actually.

00:36:01.770 --> 00:36:05.230
NSScriptCommand, CurrentCommand,
they weren't all added.

00:36:05.230 --> 00:36:07.130
CurrentCommand was added.

00:36:08.380 --> 00:36:12.270
We'll get you the script command
that's being executed right now.

00:36:12.270 --> 00:36:16.630
So if your accessor method is being
called and you want to set an error

00:36:16.630 --> 00:36:20.770
number in it or something like that,
this is how you find out, number one,

00:36:20.770 --> 00:36:23.760
whether or not your code is being
called because of scripting.

00:36:23.760 --> 00:36:25.450
It's all meant to be highly reusable.

00:36:25.460 --> 00:36:28.380
It might be being called because
of Cocoa bindings or core data.

00:36:28.380 --> 00:36:30.430
But if it's being called
because of scripting,

00:36:30.430 --> 00:36:32.040
there will be a current command.

00:36:32.040 --> 00:36:35.510
And one of the things you can
do if something goes wrong is

00:36:35.530 --> 00:36:38.360
to send that current command,
set scripting, and then call it.

00:36:38.440 --> 00:36:39.170
Script error number.

00:36:39.170 --> 00:36:44.940
Now, you shouldn't just pick a number
out of the ether before you,

00:36:44.940 --> 00:36:47.540
or you may end up having to.

00:36:47.540 --> 00:36:50.580
But before you do that,
have a look at the AppleScript language

00:36:50.580 --> 00:36:53.740
guide where a bunch of error codes
that people who write scripts are

00:36:53.810 --> 00:36:55.770
expecting to see are documented.

00:36:55.780 --> 00:36:59.940
And they're all declared
as constants in CarbonCore,

00:36:59.960 --> 00:37:05.390
MacTypes.h, which you typically import
with the umbrella header,

00:37:05.390 --> 00:37:07.420
so Coreservices.h.

00:37:08.530 --> 00:37:12.010
There's another method on NSScriptCommand
called setScriptErrorString.

00:37:12.020 --> 00:37:16.440
Don't use this gratuitously like we were.

00:37:16.440 --> 00:37:19.740
That's how we ended up with things
like NSCannotCreateCommandScriptError.

00:37:19.740 --> 00:37:23.110
If you're using one of the numbers
that AppleScript recognizes,

00:37:23.110 --> 00:37:26.210
and it recognizes a bunch,
don't set any error string.

00:37:26.220 --> 00:37:28.120
Just set the number,
and AppleScript will pick

00:37:28.120 --> 00:37:29.320
the right string for you.

00:37:32.790 --> 00:37:36.510
And when talking about error handling,
it is worth focusing on the

00:37:36.510 --> 00:37:39.040
specific brand of error handling,
type checking.

00:37:39.040 --> 00:37:43.190
Because in addition to all the
other things where you want

00:37:43.190 --> 00:37:47.310
to help scripters experiment,
there's a big reliability issue

00:37:47.310 --> 00:37:50.790
here that you might not have
realized while implementing your own

00:37:50.790 --> 00:37:53.090
scriptability if you've been doing so.

00:37:53.100 --> 00:37:56.430
Is that it's possible for scripters
to crash your app by arranging

00:37:56.430 --> 00:37:59.720
for objects of just the wrong
type to be passed to your code.

00:38:00.020 --> 00:38:04.650
So we're going to be closing that up
because SDEF has very good support

00:38:04.700 --> 00:38:09.740
for declaring exactly the types
that your implementation can handle.

00:38:09.740 --> 00:38:14.590
Cocoa is going to make sure that your
implementation is only passed objects

00:38:14.590 --> 00:38:16.690
of the exact right type to you.

00:38:16.760 --> 00:38:19.590
And as a result of the
good type declaration,

00:38:19.590 --> 00:38:23.920
the user is going to get good hints
about what their scripts can do.

00:38:25.800 --> 00:38:30.500
So sometimes in programming systems,
when there's a lot of type checking,

00:38:30.500 --> 00:38:33.440
that can impinge flexibility.

00:38:33.440 --> 00:38:36.660
But in this case, we don't think it will.

00:38:36.660 --> 00:38:38.250
We think there'll be
more flexibility now,

00:38:38.360 --> 00:38:42.480
because Apple Events, upon which all this
scripting stuff is built,

00:38:42.480 --> 00:38:46.050
has always had a pretty good
Apple Event coercion scheme for

00:38:46.180 --> 00:38:48.700
coercing things of one type to another.

00:38:49.940 --> 00:38:54.090
And when Cocoa has good type information,
it uses that properly.

00:38:54.110 --> 00:38:57.450
So the user will be able to do
things that are close enough,

00:38:57.560 --> 00:39:00.140
typing in text,
typing in a number in textual

00:39:00.180 --> 00:39:03.500
form instead of actually
getting the number right.

00:39:07.700 --> 00:39:09.870
Scriptability and Cocoa Bindings.

00:39:09.870 --> 00:39:12.330
Cocoa Bindings,
as hopefully you all know by now,

00:39:12.340 --> 00:39:16.000
is a big new technology that
was introduced last year at

00:39:16.000 --> 00:39:20.660
WWDC for creating user interfaces
with not a lot of glue code.

00:39:20.660 --> 00:39:27.430
We are making improvements to how nicely
scriptability interacts with that.

00:39:27.460 --> 00:39:31.060
So,
both scriptability and Cocoa Bindings,

00:39:31.060 --> 00:39:35.880
and now Core Data too,
use key-value coding very heavily.

00:39:36.520 --> 00:39:39.560
So, when you make your classes
key-value coding compliant,

00:39:39.560 --> 00:39:44.620
you're killing two or
three birds with one stone.

00:39:44.810 --> 00:39:47.980
We also introduced last year something
that goes on top of key-value

00:39:47.980 --> 00:39:49.740
coding called key-value observing.

00:39:49.740 --> 00:39:53.960
Now, scriptability is not interested
in key-value observing.

00:39:53.960 --> 00:39:57.430
There's no way to write a script that
observes objects in another application,

00:39:57.430 --> 00:39:59.360
though that would be very interesting.

00:39:59.360 --> 00:40:01.790
It just depends on key-value coding.

00:40:01.790 --> 00:40:06.610
But those same classes are very often
implemented or are very often reused

00:40:06.610 --> 00:40:09.350
between scriptability and bindings.

00:40:09.360 --> 00:40:11.830
So for bindings, you have to be key-value
observing compliant.

00:40:12.440 --> 00:40:15.820
And we've made some improvements
to how scripting uses KVC to

00:40:15.840 --> 00:40:17.460
make that easier for you.

00:40:18.920 --> 00:40:21.690
So Cocoa Scripting now
uses setValueForKey,

00:40:21.730 --> 00:40:27.140
which is a new method that
was introduced last year.

00:40:27.140 --> 00:40:30.980
This makes it easier for you to use
the automatic KVO notification feature.

00:40:30.980 --> 00:40:34.680
The old takeValueForKey method,
which Scripting was using,

00:40:34.680 --> 00:40:35.980
is now deprecated.

00:40:35.980 --> 00:40:40.520
If you have existing code and you're
overriding it for some reason,

00:40:40.520 --> 00:40:42.770
we'll still invoke it in that
case because we don't want

00:40:42.780 --> 00:40:45.370
to break your application,
but we encourage you to move

00:40:45.370 --> 00:40:48.220
to the newer method because
it works properly with KVO.

00:40:51.600 --> 00:40:54.930
Something else that was added to
key-value coding as part of the

00:40:54.930 --> 00:40:59.120
Cocoa Bindings feature is a new method
called mutable array value for key.

00:40:59.120 --> 00:41:02.890
When I was talking about those insert
and remove methods that you have to

00:41:02.930 --> 00:41:06.710
implement on your too-many-relationships,
this is the method that has

00:41:06.720 --> 00:41:08.500
the smarts to go find those.

00:41:08.500 --> 00:41:13.280
Again, it takes advantage of this
automatic KVO notification feature,

00:41:13.280 --> 00:41:17.200
where key-value observers are
notified merely because a set

00:41:17.200 --> 00:41:21.510
accessor or an insertion method
or a remove method is invoked.

00:41:21.540 --> 00:41:26.490
And just as in the simpler case,
old methods like insert value

00:41:26.550 --> 00:41:31.120
index and property with key
will continue to be invoked in

00:41:31.120 --> 00:41:37.350
Tiger for the foreseeable future
for backwards compatibility reasons.

00:41:39.320 --> 00:41:44.780
So automatic KVO means,
because you have to be key-value

00:41:44.780 --> 00:41:49.740
coding compliant anyway for all your
properties that you're making scriptable,

00:41:49.740 --> 00:41:54.610
means that you're probably already
KVO compliant for those same properties.

00:41:54.620 --> 00:41:58.400
So you can do things like binding
to them from the user interface.

00:41:59.800 --> 00:42:03.530
So for example, how this works,
when you're scripting the object,

00:42:03.530 --> 00:42:08.310
it sends setValueForKey because
the scripter ran a script like

00:42:08.310 --> 00:42:13.970
setRadius of circle1 of frontDocument,
something like that.

00:42:14.000 --> 00:42:19.160
So setValueForKey will call
and find your setKey method,

00:42:19.160 --> 00:42:24.560
but then it also goes ahead and
notifies observers like bound

00:42:24.560 --> 00:42:27.600
UI objects of that change too.

00:42:27.820 --> 00:42:31.540
So the UI will update automatically
without you having to write

00:42:31.540 --> 00:42:33.560
anything into your accessors.

00:42:34.920 --> 00:42:39.800
For too many relationships,
mutable array value for key is

00:42:39.800 --> 00:42:42.410
used by Cocoa Scripting now.

00:42:43.210 --> 00:42:46.200
How that works is Cocoa Scripting
calls mutable array value for key,

00:42:46.200 --> 00:42:49.960
and what's returned is actually a
collection proxy that represents

00:42:49.960 --> 00:42:53.960
the relationship that your class
has to those other objects,

00:42:53.960 --> 00:42:58.960
like an NS Graphics Bindings
document's relationship to circles.

00:42:59.260 --> 00:43:02.550
So it's returned,
looks just like an NS mutable

00:43:02.550 --> 00:43:05.580
array to the client,
Cocoa Scripting itself in this case,

00:43:05.580 --> 00:43:12.540
and as NS mutable array API is used to
insert and remove or replace objects,

00:43:12.540 --> 00:43:17.840
the container objects,
insert object in key to index,

00:43:17.840 --> 00:43:20.450
and remove methods are
invoked automatically.

00:43:20.560 --> 00:43:24.420
So the client of key-value
coding has a tremendous amount of

00:43:24.420 --> 00:43:27.040
flexibility about what they can do.

00:43:27.040 --> 00:43:29.240
Anything that an NS mutable array can do.

00:43:29.240 --> 00:43:30.990
Including things added in categories.

00:43:31.060 --> 00:43:35.590
But the owner of that relationship only
has to implement a pair of methods.

00:43:35.620 --> 00:43:38.400
And as all this happens,
bound UI objects get

00:43:38.400 --> 00:43:40.150
updated automatically.

00:43:41.610 --> 00:43:45.090
I've been talking about
automatic KVO notification,

00:43:45.090 --> 00:43:48.520
so I guess I should mention
manual KVO notification,

00:43:48.550 --> 00:43:52.800
just so you know why we bother
to call it automatic at all,

00:43:52.820 --> 00:43:54.710
because there's another system, too.

00:43:54.810 --> 00:43:56.440
And they coexist very well.

00:43:56.440 --> 00:43:59.960
You can have automatic
KVO notification turned on for class,

00:44:00.020 --> 00:44:04.640
and then also use manual KVO notification
for more complicated situations.

00:44:06.610 --> 00:44:08.800
Shouldn't be needed that often
for scriptable properties,

00:44:08.800 --> 00:44:13.570
but you can use it, for example,
when your class is changing

00:44:13.570 --> 00:44:18.740
its own IVARs directly outside
of a KVC compliance method,

00:44:18.740 --> 00:44:19.530
like setKey.

00:44:19.540 --> 00:44:21.160
And it's pretty easy to use.

00:44:21.190 --> 00:44:24.230
You just do a will change value
for key before the change,

00:44:24.340 --> 00:44:26.980
and a did change value
for key after the change.

00:44:30.080 --> 00:44:33.260
So I'd like to leave you with
some hints about debugging

00:44:33.260 --> 00:44:36.180
your application scriptability.

00:44:36.180 --> 00:44:40.060
There's a lot of logging available
that Cocoa Scripting will do to help

00:44:40.060 --> 00:44:42.100
you figure out what's going wrong.

00:44:42.100 --> 00:44:46.230
And also, every time we touch this stuff,
we seem to add or clean up a

00:44:46.230 --> 00:44:51.650
description method in any of
the Cocoa Scripting classes.

00:44:52.530 --> 00:44:54.220
So logging.

00:44:54.310 --> 00:44:57.280
Cocoa,
as we wrote in the support for SDEF,

00:44:57.470 --> 00:45:02.080
we made sure that all the errors and
warnings that it spits out are useful.

00:45:02.080 --> 00:45:05.490
So I'll demonstrate that in a little bit.

00:45:05.590 --> 00:45:08.660
So mistakes that you make are
easy to pin down instead of things

00:45:08.700 --> 00:45:10.520
just going mysteriously wrong.

00:45:10.520 --> 00:45:14.880
And we also added this support
for warnings and errors,

00:45:14.880 --> 00:45:18.940
improvements,
serendipitously to the old file formats,

00:45:18.940 --> 00:45:19.170
too.

00:45:19.380 --> 00:45:20.620
Script Suite and Script Terminology.

00:45:21.310 --> 00:45:23.570
So when you see these, fix the warnings.

00:45:23.580 --> 00:45:25.100
They all actually mean something.

00:45:25.100 --> 00:45:28.620
And if it's not descriptive enough,
you know, send an email to one of

00:45:28.620 --> 00:45:30.570
the public lists or to,
you know,

00:45:30.570 --> 00:45:32.910
Cocoa Feedback or something like that.

00:45:36.450 --> 00:45:41.270
You can have Cocoa log information about
every scriptable command as it happens,

00:45:41.420 --> 00:45:42.720
just with a simple default.

00:45:42.850 --> 00:45:45.880
Defaults write,
NS Global Domain NS Scripting

00:45:45.880 --> 00:45:47.400
Debug Log Level 1.

00:45:47.400 --> 00:45:50.850
And if you only want to turn
on logging for one application,

00:45:51.000 --> 00:45:55.590
substitute NS Global Domain with the
bundle identifier for that application.

00:45:58.460 --> 00:46:02.270
I mentioned that we added a bunch
of description methods to classes.

00:46:02.280 --> 00:46:05.660
One of them is NSScriptSuiteRegistry,
and then all the classes

00:46:05.670 --> 00:46:09.500
like NSClassDescription,
NSScriptCommandDescription,

00:46:09.500 --> 00:46:10.400
things like that.

00:46:10.400 --> 00:46:13.920
So if you want to see what
Cocoa pulled out of your SDef

00:46:13.920 --> 00:46:18.400
file or your old ScriptSuite file,
just break the application anywhere

00:46:18.400 --> 00:46:21.400
and type what you see here:
po nsclass from string,

00:46:21.400 --> 00:46:24.400
NSScriptSuiteRegistry,
shared ScriptSuiteRegistry.

00:46:24.400 --> 00:46:28.530
And it'll send a description
message to the ScriptSuiteRegistry,

00:46:28.530 --> 00:46:31.990
and just an enormous amount of
information will be presented

00:46:31.990 --> 00:46:35.570
to you so you can see exactly
what Cocoa thinks you said about

00:46:35.570 --> 00:46:38.140
your application scriptability.

00:46:41.120 --> 00:46:43.450
There are some other
description methods too,

00:46:43.520 --> 00:46:44.900
and a script command has one.

00:46:44.900 --> 00:46:47.660
I don't know if everybody's found it yet.

00:46:47.660 --> 00:46:52.280
If you're in the middle of one
of your scriptability accessors,

00:46:52.310 --> 00:46:56.420
and you're wondering why was this called,
you're watching script

00:46:56.420 --> 00:46:59.150
editor send events,
but it's still not obvious,

00:46:59.320 --> 00:47:02.740
then you can print a description
of the current command.

00:47:02.750 --> 00:47:06.700
So,
and if you are an old Apple Events hand,

00:47:06.710 --> 00:47:09.270
and you wanna see what
Apple Event resulted in the

00:47:09.270 --> 00:47:13.040
creation of that NS script command,
you can get the Apple Event from

00:47:13.040 --> 00:47:16.450
the current command and
print its description too.

00:47:16.560 --> 00:47:20.450
So, demo.

00:47:32.700 --> 00:47:44.200
[Transcript missing]

00:48:01.810 --> 00:48:08.940
And I just, you know,
fat-fingered one of the type names here.

00:48:08.940 --> 00:48:14.140
And caused the dictionary to be loaded,
and it now gives you a super informative

00:48:14.140 --> 00:48:15.790
message that'll help people debug.

00:48:15.820 --> 00:48:18.800
SDF warning for attribute
display name of class document

00:48:18.820 --> 00:48:20.760
in suite graphics binding suite.

00:48:20.770 --> 00:48:22.710
Strang is not a valid type name.

00:48:22.710 --> 00:48:29.760
So we're trying to help make
it easier to debug this stuff.

00:48:39.680 --> 00:48:42.560
So I won't leave that broken.

00:48:52.600 --> 00:48:57.100
And just relaunch graphics binding again.

00:48:57.100 --> 00:49:00.980
And let's look at all the
information that's available

00:49:00.980 --> 00:49:03.410
to help you debug this stuff.

00:49:15.200 --> 00:49:36.800
[Transcript missing]

00:49:40.780 --> 00:49:46.560
And while I'm here,
let me show you another debugging

00:49:46.560 --> 00:49:49.080
trick that I think you'll like.

00:49:53.800 --> 00:49:57.800
Let me put a breakpoint on one
of our simple accessor methods.

00:49:57.800 --> 00:50:03.400
So just set radius.

00:50:03.400 --> 00:50:09.470
And continue that.

00:50:29.000 --> 00:50:32.060
will be presenting his presentation.

00:50:32.060 --> 00:50:34.950
Mark Piccirelli: Thank you, Mark.

00:50:38.740 --> 00:50:41.690
So let me show you what
Cocoa Scripting is doing right here,

00:50:41.700 --> 00:50:43.120
by the way.

00:50:43.120 --> 00:50:47.080
If you follow the stack trace,

00:50:47.900 --> 00:50:51.120
The Apple Event Manager is
getting the Apple Event,

00:50:51.120 --> 00:50:55.800
this is Cocoa's Apple Event Manager,
making a script command out of it,

00:50:55.950 --> 00:51:00.800
executing the script command,
and this is the set command.

00:51:00.800 --> 00:51:03.950
It eventually boils down to a
call to the key-value coding

00:51:04.020 --> 00:51:05.590
set value for key method.

00:51:06.060 --> 00:51:08.130
is the director of the NMSS program,
which is smart enough to

00:51:08.130 --> 00:51:10.320
call your set radius method.

00:51:10.320 --> 00:51:11.800
Now this one is interesting.

00:51:11.800 --> 00:51:13.590
If you look at this,
if you take a peek at one of

00:51:13.590 --> 00:51:19.200
these private function names,
NS set float value and notify,

00:51:19.200 --> 00:51:20.620
what does and notify mean?

00:51:20.620 --> 00:51:25.080
Well, it means that there are key-value
observers registered with this

00:51:25.080 --> 00:51:29.040
object as a result of the bindings
that are in the UI of this program,

00:51:29.040 --> 00:51:32.240
and it's going to tell them
that the value changed,

00:51:32.240 --> 00:51:36.270
even though this method
that does almost nothing.

00:51:38.100 --> 00:51:44.240
So let me put a good break point
at the method that does that.

00:51:48.060 --> 00:51:52.930
The way automatic KVO works, by the way,
is it causes invocations of "will

00:51:52.950 --> 00:51:57.020
change value for key" and "did
change value for key" around the

00:51:57.020 --> 00:51:59.220
invocation of your set method.

00:51:59.200 --> 00:52:06.870
So let's put a breakpoint around on
did change value for key and continue.

00:52:08.540 --> 00:52:11.790
Xcode wants my attention,
but I don't want to talk to it.

00:52:11.790 --> 00:52:16.150
So set float value and notify just
finished calling your set accessor.

00:52:16.150 --> 00:52:18.580
Now it's calling did
change value for key.

00:52:18.580 --> 00:52:22.650
So it's going to send did change
value for key is where notifications

00:52:22.650 --> 00:52:24.700
are sent out to any observers.

00:52:24.700 --> 00:52:27.590
So if you've been working
with Cocoa bindings,

00:52:27.590 --> 00:52:30.200
by the way,
you might have had some trouble

00:52:30.200 --> 00:52:32.580
figuring out who's observing who.

00:52:32.580 --> 00:52:35.270
Let me show you this
little trick right now.

00:52:35.270 --> 00:52:38.360
PO self-observation info.

00:52:38.500 --> 00:52:41.180
Observation info is
declared as a void start.

00:52:41.230 --> 00:52:42.480
It's an opaque type.

00:52:42.560 --> 00:52:44.580
I don't want you digging
around in there too much.

00:52:44.600 --> 00:52:48.630
I don't want you to write dependencies
on the internal structure of that,

00:52:48.700 --> 00:52:50.300
but it's okay to take a peek.

00:52:50.350 --> 00:52:57.390
So here's what it outputs.

00:52:58.740 --> 00:53:01.810
This object is one of the
circles in graphics binding,

00:53:01.810 --> 00:53:04.970
and there's observers of
its shadow offset property,

00:53:04.970 --> 00:53:07.660
color radius, shadow angle, X lock,
Y lock.

00:53:07.660 --> 00:53:12.090
It's because the graphics view is
observing all this stuff so that it knows

00:53:12.090 --> 00:53:14.640
whether or not to redraw the circle.

00:53:14.640 --> 00:53:20.980
So great deal of
information there for you.

00:53:20.980 --> 00:53:25.250
So that's it for demos.

00:53:29.770 --> 00:53:32.110
So one thing we've learned over
the past year since releasing

00:53:32.110 --> 00:53:35.710
the Cocoa Bindings functionality
is that we achieved our goals of

00:53:35.710 --> 00:53:41.610
helping you to write not much code,
but I think we ramped up the learning

00:53:41.680 --> 00:53:44.320
curve a little bit for Cocoa.

00:53:44.500 --> 00:53:47.960
And a big part of that is debug ability.

00:53:47.960 --> 00:53:53.860
And if you were at the Cocoa binding
session a couple of days ago,

00:53:53.860 --> 00:53:58.170
we pointed you to a new default that
we're adding for binding to give you

00:53:58.170 --> 00:54:01.870
more logging of what goes on in bindings.

00:54:01.880 --> 00:54:04.100
We're going to be doing
more stuff like that.

00:54:04.100 --> 00:54:06.930
We want to make it as easy as
possible for you to find your

00:54:06.930 --> 00:54:09.380
mistakes while you're learning
to use this stuff quickly.

00:54:09.380 --> 00:54:13.540
So you'll see more description stuff,
more logging,

00:54:13.540 --> 00:54:17.130
special defaults that you can
turn on to do sorts of trickery,

00:54:17.140 --> 00:54:18.970
things like that.

00:54:20.470 --> 00:54:22.830
So before I go,
I want you to point you to

00:54:22.830 --> 00:54:24.580
this very important document,
make sure absolutely

00:54:24.580 --> 00:54:26.960
everybody has read it,
the scripting interface guidelines,

00:54:26.960 --> 00:54:30.340
which are pretty new,
but they're not that new.

00:54:30.340 --> 00:54:31.980
I think they're about
four months old now.

00:54:31.980 --> 00:54:34.010
They're since last WWDC, though.

00:54:35.420 --> 00:54:39.160
And I want you to read this because
consistency across apps is tremendously

00:54:39.390 --> 00:54:42.130
important in scriptability,
just like as it is in regular

00:54:42.130 --> 00:54:43.700
graphical user interfaces.

00:54:43.790 --> 00:54:47.120
People want to learn stuff once
and reapply it over and over again.

00:54:47.120 --> 00:54:49.520
Following the guidelines
helps them do that.

00:54:49.520 --> 00:54:52.220
It makes your scriptable
application look better.

00:54:52.220 --> 00:54:54.980
It makes other scriptable
applications look better,

00:54:54.980 --> 00:54:57.250
too, when everybody's looking the same.

00:54:58.440 --> 00:55:02.350
So Cocoa itself, of course,
either follows these rules scrupulously

00:55:02.350 --> 00:55:04.560
right now or is about to follow them.

00:55:04.820 --> 00:55:05.870
So Cocoa itself, of course,
either follows these rules scrupulously

00:55:05.870 --> 00:55:06.580
right now or is about to follow them.

00:55:06.580 --> 00:55:10.060
It's not that we're about to start
following these rules scrupulously,

00:55:10.060 --> 00:55:12.670
or we might just change some
of the rules a little bit.

00:55:12.670 --> 00:55:15.310
But in general,
what Cocoa does is going to be perfectly

00:55:15.340 --> 00:55:17.340
consistent with what we suggest you do.

00:55:17.340 --> 00:55:21.090
And we're making it easy for you to
follow these guidelines yourself.

00:55:21.900 --> 00:55:24.120
And now that you know about this,
read this.

00:55:24.120 --> 00:55:26.600
If you're about to start
work on a new application and

00:55:26.600 --> 00:55:29.780
you haven't read this yet,
read it now because it actually has some

00:55:29.780 --> 00:55:33.540
design advice about how you can save
yourself a little bit of work later.

00:55:35.580 --> 00:55:37.130
And now that you know about this,
read this.

00:55:37.150 --> 00:55:38.910
If you're about to start
work on a new application and

00:55:39.020 --> 00:55:41.220
you haven't read this yet,
read it now because it actually has some

00:55:41.220 --> 00:55:44.110
design advice about how you can save
yourself a little bit of work later.

00:55:44.760 --> 00:55:49.580
So for more information,
you can go to our website and just click,

00:55:49.580 --> 00:55:51.900
click, click away.

00:55:51.900 --> 00:55:53.900
Or you can send an email to Matt Formica.