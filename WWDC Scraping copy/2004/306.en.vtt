WEBVTT

00:00:12.170 --> 00:00:16.140
Gentlemen, please welcome
Cocoa Developer Tools Evangelist,

00:00:16.270 --> 00:00:18.560
Matt Formica.

00:00:23.260 --> 00:00:28.340
I want to welcome you to session 306,
importing development projects for Xcode.

00:00:28.340 --> 00:00:31.980
You've heard a lot so far in the last
few days about how to use Xcode and

00:00:31.980 --> 00:00:36.250
many of the new features of Xcode,
but you may be sitting here

00:00:36.260 --> 00:00:40.130
today thinking that you've,
realizing you've got a project in

00:00:40.230 --> 00:00:43.220
some other environment that you're
wondering how you can get into Xcode

00:00:43.300 --> 00:00:47.480
in order to take advantage of some of
the features that we've talked about.

00:00:47.480 --> 00:00:51.970
Or you may have a lot of experience
with another development model

00:00:51.970 --> 00:00:55.450
and want to figure out how you
can leverage your experience

00:00:55.510 --> 00:00:57.280
in Xcode to be more productive.

00:00:57.280 --> 00:00:59.880
And that's what the
goal of this session is.

00:00:59.880 --> 00:01:04.830
Here to talk to us about that
today is actually Scott Tooker,

00:01:04.830 --> 00:01:09.900
currently the lead architect of
Xcode's importing technology as

00:01:09.990 --> 00:01:12.520
well as other aspects of Xcode.

00:01:12.520 --> 00:01:16.540
He's a long-term,
a long-time tools engineer at Apple.

00:01:16.560 --> 00:01:17.460
Since the dawn of Xcode.

00:01:17.460 --> 00:01:18.900
of Mac OS X.

00:01:18.910 --> 00:01:22.390
So here,
please join me in welcoming Scott Tucker.

00:01:27.690 --> 00:01:30.360
So one thing I wanted to make
clear up front is in past years,

00:01:30.360 --> 00:01:33.190
we've talked a lot about
importing from CodeWarrior,

00:01:33.310 --> 00:01:35.700
moving people from CodeWarrior to Xcode.

00:01:35.710 --> 00:01:38.910
And we thought, you know, this year,
that's not the only message.

00:01:38.970 --> 00:01:41.710
Yes,
we're going to talk today about moving

00:01:41.710 --> 00:01:45.870
from CodeWarrior to Xcode and the
things you have to watch out for,

00:01:45.870 --> 00:01:50.470
but we're also going to talk about
moving from Makefile-based projects,

00:01:50.690 --> 00:01:53.510
AMP-based projects, PbWo,
even from Project Builder.

00:01:53.510 --> 00:01:53.510
So this isn't just about
CodeWarrior anymore.

00:01:57.080 --> 00:01:59.940
So what we'll cover today.

00:02:00.000 --> 00:02:02.110
For this session we're kind
of assuming most of you have

00:02:02.110 --> 00:02:04.630
not used Xcode extensively or
you've used it a little bit.

00:02:04.740 --> 00:02:08.720
But you're using other
development environments mainly.

00:02:08.880 --> 00:02:11.260
So we're going to go over
the basics of Xcode's project

00:02:11.260 --> 00:02:13.640
model and the build system.

00:02:13.660 --> 00:02:16.500
Then we'll talk about importing
your project and the different

00:02:16.500 --> 00:02:18.320
options that are available there.

00:02:18.350 --> 00:02:21.240
Then once you've imported your project,
that's just kind of the first step.

00:02:21.490 --> 00:02:23.560
So we'll talk a little bit
about moving to GCC and some

00:02:23.560 --> 00:02:25.080
of the pitfalls to avoid there.

00:02:25.230 --> 00:02:28.330
And then finally,
what you can do in Xcode to not

00:02:28.330 --> 00:02:31.700
only make Xcode more familiar,
but make your own workflow more powerful

00:02:31.700 --> 00:02:34.370
by leveraging some of its features.

00:02:34.790 --> 00:02:37.420
So let's talk about the project model.

00:02:37.450 --> 00:02:42.560
The core of the project model
is references and groups.

00:02:42.560 --> 00:02:46.360
References are used to point
to files or folders on disk.

00:02:46.470 --> 00:02:48.120
You can use relative or absolute paths.

00:02:48.140 --> 00:02:50.280
And there are different
relative path types available.

00:02:50.370 --> 00:02:53.270
For example,
we have project relative or what we

00:02:53.340 --> 00:02:55.700
call the build product relative path,
relative to where your

00:02:55.700 --> 00:02:56.820
build products are placed.

00:02:56.990 --> 00:02:57.940
And there are a number of others.

00:02:57.940 --> 00:02:59.040
And you can even define your own.

00:02:59.130 --> 00:03:01.180
And I'll get into that in a second.

00:03:01.220 --> 00:03:02.580
We also have groups.

00:03:02.600 --> 00:03:05.120
Groups are very similar to
Code Warrior's idea of groups,

00:03:05.120 --> 00:03:06.520
if you've used Code Warrior before.

00:03:06.640 --> 00:03:09.800
It's a hierarchy that's
independent of the file system.

00:03:09.830 --> 00:03:11.770
What this means is that
I can have a group,

00:03:11.820 --> 00:03:13.630
and it can point to a folder on disk.

00:03:13.730 --> 00:03:16.520
But it can also just be a
totally logical construct.

00:03:16.540 --> 00:03:20.030
This allows you to have
organization within Xcode that's

00:03:20.030 --> 00:03:21.280
independent of your file structure.

00:03:21.280 --> 00:03:23.080
It gives you the freedom to
organize your code how you

00:03:23.080 --> 00:03:25.680
want to see it in the project.

00:03:25.680 --> 00:03:28.500
Now I should note, Xcode,
unlike some other systems,

00:03:28.600 --> 00:03:31.710
prefers explicit references
to files that are used.

00:03:31.910 --> 00:03:34.680
So there's currently no support
for recursive search paths.

00:03:34.760 --> 00:03:37.300
And we do prefer, as I said,
that all files referenced,

00:03:37.300 --> 00:03:40.290
including header files,
are in the project.

00:03:40.970 --> 00:03:41.980
source trees.

00:03:42.090 --> 00:03:44.500
So this is something we
added with Xcode 1.0,

00:03:44.590 --> 00:03:48.840
and what this allows you to do is
define your own custom path types.

00:03:49.010 --> 00:03:50.500
So for example,
I mentioned before we have

00:03:50.680 --> 00:03:53.380
project relative and we
have build product relative.

00:03:53.600 --> 00:03:57.070
Well, we allow you to define your own
absolute relative path types,

00:03:57.090 --> 00:03:59.740
and you can even reference
other source trees.

00:03:59.860 --> 00:04:03.450
The main place we see this being used
is when you have a big bunch of code

00:04:03.450 --> 00:04:07.380
that's outside a project and it's shared
among a number of different projects.

00:04:07.460 --> 00:04:10.450
For example, Power Plant is one example,
or Qt.

00:04:10.640 --> 00:04:13.200
This technology is actually used by
default by the Code Warrior importer.

00:04:13.200 --> 00:04:15.210
Whenever you import a
project from Code Warrior,

00:04:15.210 --> 00:04:17.500
we automatically create a
source tree that points to the

00:04:17.500 --> 00:04:22.370
MetroWorks Code Warrior directory,
for example, to find Power Plant files.

00:04:23.270 --> 00:04:25.460
So you've got all these files,
you've got all these folders,

00:04:25.460 --> 00:04:27.610
that's great,
but you want to do something with them.

00:04:27.630 --> 00:04:29.040
Well, that's where targets come in.

00:04:29.110 --> 00:04:31.100
Targets describe how to build products.

00:04:31.100 --> 00:04:35.470
They consist of file references and
folder references in some cases,

00:04:35.470 --> 00:04:37.400
and a set of build settings.

00:04:37.410 --> 00:04:41.730
And then we take all this information,
and most targets will use

00:04:41.730 --> 00:04:43.710
that to generate a product.

00:04:43.790 --> 00:04:45.660
Product is fairly simple.

00:04:45.660 --> 00:04:49.370
It's just an application,
a static library, dynamic library,

00:04:49.370 --> 00:04:49.370
command line tool, bundle, et cetera.

00:04:50.220 --> 00:04:52.860
Now, I want to talk a little
bit-- jump back for a second.

00:04:52.860 --> 00:04:53.920
Now, I mentioned products.

00:04:54.090 --> 00:04:56.820
Well, it may turn out,
especially in other environments,

00:04:56.850 --> 00:05:01.260
that you have your application split
across a number of different projects.

00:05:01.350 --> 00:05:03.400
And you actually like this
for a variety of reasons.

00:05:03.500 --> 00:05:05.920
We can actually support this in
Xcode because we have what are

00:05:05.920 --> 00:05:07.480
called cross-project references.

00:05:07.550 --> 00:05:10.590
This allows you to refer to
targets and other projects for

00:05:10.590 --> 00:05:14.120
purposes of dependency analysis,
but it also allows you to refer to the

00:05:14.240 --> 00:05:16.340
products that that project generates.

00:05:16.420 --> 00:05:19.100
So for example, if you have a bundle that
needs to go into your app,

00:05:19.100 --> 00:05:21.260
but that bundle's
created another project,

00:05:21.290 --> 00:05:25.200
you can actually bring in the project
reference and then directly say,

00:05:25.200 --> 00:05:28.310
I want to take that bundle
and put it in my application.

00:05:28.420 --> 00:05:32.680
This is also a technology that
is used by the CodeWare importer,

00:05:32.680 --> 00:05:35.410
and I'll get more into that later.

00:05:35.900 --> 00:05:37.510
So OK, so we've built something now.

00:05:37.540 --> 00:05:39.250
Well, now you want to run or debug it.

00:05:39.340 --> 00:05:43.120
So in order to manage kind
of launch time information,

00:05:43.280 --> 00:05:46.920
settings and such,
Xcode has what are called executables.

00:05:46.940 --> 00:05:50.160
These provide the ability, as I said,
to run or debug products.

00:05:50.160 --> 00:05:53.010
They're automatically created for
targets that create executables,

00:05:53.060 --> 00:05:56.360
like a command line
tool or an application.

00:05:56.380 --> 00:05:58.980
Users can also create custom executables.

00:05:59.000 --> 00:06:03.090
This is especially useful to run or
debug executables outside the project.

00:06:03.300 --> 00:06:07.020
And where this really comes in to
be really useful is let's say you're

00:06:07.020 --> 00:06:10.510
building a framework or a bundle,
or you need to run some sort

00:06:10.510 --> 00:06:13.240
of test harness with your code,
but it's outside the project.

00:06:13.410 --> 00:06:15.160
Well, for example,
if you have the framework,

00:06:15.160 --> 00:06:17.790
then you can create a custom
executable for the app that uses

00:06:17.790 --> 00:06:18.970
the framework and set it all up.

00:06:19.060 --> 00:06:21.440
And then within Xcode,
you can launch your application,

00:06:21.440 --> 00:06:23.380
which is using your framework.

00:06:23.550 --> 00:06:26.440
It also lets you set up multiple
environments for an executable.

00:06:26.590 --> 00:06:28.560
For example,
if you have a demo version of an app,

00:06:28.560 --> 00:06:31.160
maybe you want to set certain
command line options to change

00:06:31.160 --> 00:06:32.220
how the app will behave.

00:06:32.560 --> 00:06:34.800
And you can have multiple
executables so you can try the

00:06:34.800 --> 00:06:35.800
non-demo and the demo versions.

00:06:37.550 --> 00:06:39.890
Finally, I'd like to talk a little
bit about the project format.

00:06:39.980 --> 00:06:41.900
We get a number of questions
about our project format.

00:06:41.900 --> 00:06:42.650
You know, can we read it?

00:06:42.770 --> 00:06:44.380
Can we munch it outside of Xcode?

00:06:44.500 --> 00:06:48.500
So to start with, we have a single file
package per project.

00:06:48.500 --> 00:06:51.500
And just for quick review,
a file package is basically a folder

00:06:51.500 --> 00:06:53.490
that looks like a file in the Finder.

00:06:53.500 --> 00:06:57.500
Inside this package,
we have two pieces of information.

00:06:57.500 --> 00:07:00.320
We have the project-level data,
which is stored in the

00:07:00.320 --> 00:07:02.500
project.pbxproj file.

00:07:02.570 --> 00:07:04.660
And that contains things that
are common to--that will be

00:07:04.700 --> 00:07:09.450
seen by all users--references,
products, targets, for example.

00:07:09.600 --> 00:07:11.500
Then there are user-level data files.

00:07:11.500 --> 00:07:13.500
These are usually the username.pbxuser.

00:07:13.500 --> 00:07:16.100
These contain things that are
only--that are per user and only

00:07:16.100 --> 00:07:17.500
seen by the individual user.

00:07:17.500 --> 00:07:23.500
For example, executables, bookmarks,
breakpoints, UI configuration.

00:07:23.670 --> 00:07:26.500
And I should note,
the project file and the user files

00:07:26.500 --> 00:07:28.500
are not meant to be hand-edited.

00:07:28.500 --> 00:07:32.500
We encourage people to use Xcode
or AppleScript to make changes.

00:07:32.500 --> 00:07:34.410
But I know someone will ask this,
so I'll just get this

00:07:34.420 --> 00:07:35.500
out of the way right now.

00:07:35.500 --> 00:07:39.500
If you would like to see more of
an XML-style format or whatever,

00:07:39.500 --> 00:07:42.580
I encourage you to file bugs,
send messages to Xcode feedback to

00:07:42.720 --> 00:07:46.560
let us know how you want to be able
to interact with the project file

00:07:46.680 --> 00:07:48.500
outside of the Xcode environment.

00:07:49.410 --> 00:07:51.540
OK, so let's talk about the build system.

00:07:51.640 --> 00:07:53.420
Actually,
this title's a little misleading,

00:07:53.420 --> 00:07:56.510
because there are actually three
different build systems we have in Xcode.

00:07:56.520 --> 00:07:58.450
This is almost we're talking
about the meta build system,

00:07:58.460 --> 00:08:01.790
because the three that we provide are,
there's the Xcode build system,

00:08:02.010 --> 00:08:04.230
which we commonly call
the native build system,

00:08:04.420 --> 00:08:07.290
the external build system,
which allows you to access

00:08:07.290 --> 00:08:09.820
external build tools,
and then the Project Builder

00:08:09.820 --> 00:08:11.410
build system,
also commonly known as the

00:08:11.470 --> 00:08:12.530
Jam-based build system.

00:08:12.550 --> 00:08:14.420
And this comes from the
old Project Builder,

00:08:14.440 --> 00:08:16.180
and it's there for legacy reasons.

00:08:16.180 --> 00:08:19.100
I'm going to mainly talk about
the native system and a little bit

00:08:19.100 --> 00:08:21.170
about external build systems today.

00:08:21.360 --> 00:08:24.360
The choice of build system
is the target level.

00:08:24.410 --> 00:08:26.740
So what this means is you
can have a native target,

00:08:26.740 --> 00:08:29.700
and then you can have an-- maybe you have
a native target that builds your app,

00:08:29.740 --> 00:08:32.300
but you're using an open source
library that you link in statically.

00:08:32.300 --> 00:08:34.040
And so you're using an
external build system there,

00:08:34.130 --> 00:08:35.460
since they have a makefile.

00:08:35.510 --> 00:08:38.440
And then for some reason,
you also have maybe another target.

00:08:38.440 --> 00:08:39.880
Maybe you're doing
something also with Java,

00:08:39.880 --> 00:08:43.310
and so you have another target
that's using the Jam-based.

00:08:43.420 --> 00:08:45.830
The nice thing is that since
this is at the target level,

00:08:45.980 --> 00:08:48.820
we have infrastructure outside of
the targets that allows us to set

00:08:48.880 --> 00:08:50.600
up dependencies between these types.

00:08:50.860 --> 00:08:54.080
So you can mix and match
the different targets.

00:08:55.660 --> 00:08:58.340
OK, so let's talk a little
bit more about products.

00:08:58.670 --> 00:09:03.760
We actually track two things in regards
to products that you should know about.

00:09:03.760 --> 00:09:05.830
One is called the build
products location,

00:09:05.980 --> 00:09:07.780
and the other is the
intermediate's location.

00:09:07.780 --> 00:09:10.360
The build products location is
basically when you build your app,

00:09:10.360 --> 00:09:11.480
this is where it's going to go.

00:09:11.480 --> 00:09:13.720
When you build your framework,
this is where it's going to go.

00:09:13.890 --> 00:09:17.400
Intermediates are things like .o files,
intermediate generated files, et cetera,

00:09:17.400 --> 00:09:19.600
going to the intermediate's location.

00:09:19.760 --> 00:09:25.390
These locations can be per user,
per user, per project, or per user,

00:09:25.430 --> 00:09:27.790
per project, per build style.

00:09:28.090 --> 00:09:30.420
But it's interesting,
I didn't mention that they were shared.

00:09:30.470 --> 00:09:32.330
Well,
the interesting thing here is that if you

00:09:32.330 --> 00:09:35.410
have a number of projects-- for example,
Xcode consists of several

00:09:35.530 --> 00:09:38.530
different projects-- if you have
all the projects point to the

00:09:38.530 --> 00:09:41.140
same build products location,
we'll automatically

00:09:41.350 --> 00:09:43.070
pick up the version of,
say,

00:09:43.190 --> 00:09:45.900
your framework that's next to your app.

00:09:45.970 --> 00:09:47.940
What this allows you to
do is I can make changes,

00:09:48.050 --> 00:09:50.520
for example,
to the DevTools interface framework,

00:09:50.580 --> 00:09:55.940
and then run Xcode against it
without having to actually go out

00:09:55.940 --> 00:09:59.150
and install the framework and try
to get this test environment set up.

00:09:59.160 --> 00:10:01.900
It's just all from within Xcode,
and it all just happens.

00:10:01.970 --> 00:10:06.720
So I strongly encourage people who have
applications that are multiple pieces,

00:10:06.720 --> 00:10:09.980
where you have a framework and a
dynamic library and application,

00:10:09.990 --> 00:10:14.710
to leverage this shared build location,
because it's very useful.

00:10:15.350 --> 00:10:17.460
So let's talk a little bit
more about build settings.

00:10:17.460 --> 00:10:19.350
As you probably-- if you've
been to the earlier sessions,

00:10:19.410 --> 00:10:21.950
they talked in much more depth than I'm
going to today about build settings.

00:10:22.040 --> 00:10:25.140
But basically, build settings control the
inner workings of a build.

00:10:25.170 --> 00:10:28.140
Do I want it to have debug symbols,
optimization?

00:10:28.200 --> 00:10:31.240
Do I want warnings when I'm compiling,
et cetera?

00:10:31.240 --> 00:10:33.280
However,
we do have this idea of multiple levels

00:10:33.280 --> 00:10:34.860
of precedence for a build setting.

00:10:34.890 --> 00:10:37.280
And the higher levels are going
to override the lower levels.

00:10:37.320 --> 00:10:39.810
And since it's so important-- we
get so many questions about this,

00:10:39.820 --> 00:10:42.880
I thought it was worth
going over again quickly.

00:10:42.970 --> 00:10:44.660
So you may have seen this graph before.

00:10:44.910 --> 00:10:48.220
So at the lowest level,
we have the environment variables.

00:10:48.270 --> 00:10:49.800
Things like $PATH, $HOME.

00:10:49.800 --> 00:10:52.730
These are things we get from the
environment when we launch Xcode.

00:10:52.950 --> 00:10:56.060
And they're basically
the lowest level setting.

00:10:56.600 --> 00:10:58.610
Over there are the
built-in default settings.

00:10:58.710 --> 00:11:01.600
These are things that,
at the target level in our code, we set.

00:11:01.740 --> 00:11:06.990
So for example, we decide that -OS is
the default optimization.

00:11:07.690 --> 00:11:08.600
Then there are the target settings.

00:11:08.600 --> 00:11:10.000
These are things that you are setting.

00:11:10.140 --> 00:11:13.820
So for example, you might go in and say,
I don't want -OS.

00:11:13.840 --> 00:11:16.750
I want -03 by default for my target.

00:11:17.500 --> 00:11:18.940
Then there are build style settings.

00:11:19.000 --> 00:11:21.920
Build styles are kind of like--
if you imagine back in school,

00:11:21.920 --> 00:11:25.160
you had the transparencies where you
could lay them on top of one another.

00:11:25.190 --> 00:11:26.760
A build style is like a transparency.

00:11:26.800 --> 00:11:29.790
It lays on top of the target,
and any settings you put in that

00:11:29.910 --> 00:11:31.220
build style override the target.

00:11:31.300 --> 00:11:34.200
So for example,
we have a development build style.

00:11:34.390 --> 00:11:36.480
And one thing you'll want
to do is you want to say,

00:11:36.480 --> 00:11:39.660
well, my development build style,
I want to make there be

00:11:39.660 --> 00:11:42.100
no optimization or -0.

00:11:42.300 --> 00:11:44.630
And then finally,
if you leverage Xcode build,

00:11:44.650 --> 00:11:51.790
our command line build tool,
you can also set command lines--

00:11:51.790 --> 00:11:51.790
you can set build settings at the
command line that override everything.

00:12:14.280 --> 00:12:14.280
So, overriding target settings.

00:12:14.280 --> 00:12:14.280
So, build styles, as I just said,
were used to override target settings.

00:12:14.280 --> 00:12:14.280
One of the key things to remember here
is we have the macro dollar paren value.

00:12:14.280 --> 00:12:14.280
And this isn't value you replace it
with the name of the build setting.

00:12:14.280 --> 00:12:14.280
This is actually dollar paren value.

00:12:14.280 --> 00:12:14.280
And it's used to refer the setting
value from the previous level.

00:12:28.600 --> 00:12:28.600
And so now I want to show you a demo,
if I can get the demo machine.

00:12:28.600 --> 00:12:28.600
One of the things we're
commonly asked is,

00:12:28.600 --> 00:12:28.600
"Well, you know, I came from CodeWarrior,
and I would like to put

00:12:28.600 --> 00:12:28.600
my debug in my demo one.

00:12:28.600 --> 00:12:28.600
Thank you."

00:12:28.890 --> 00:12:34.040
I'd like to put my release and
my debug in different locations.

00:12:35.370 --> 00:12:38.990
And in past releases,
this has been actually not

00:12:39.050 --> 00:12:42.620
as easy as it should be.

00:12:42.620 --> 00:12:42.620
So here, let me resize this a little bit.

00:12:42.760 --> 00:12:48.280
I'm going to show you how you can easily
set up though now with One Five and get

00:12:48.280 --> 00:12:57.350
not only your debug version and your
optimized version in separate locations,

00:12:57.350 --> 00:12:57.350
you can also provide
different names for each,

00:12:57.350 --> 00:12:57.350
and you can also do
preprocessor macros for each.

00:12:57.600 --> 00:13:00.880
So the key here, as we said before,
is the build style.

00:13:01.120 --> 00:13:04.400
So for example,
here we're looking at-- we have two.

00:13:04.400 --> 00:13:08.760
We have development, which is debug,
and deployment, release.

00:13:09.480 --> 00:13:12.080
And so you'll notice here-- let
me expand this out and see if

00:13:12.090 --> 00:13:13.520
I can get a little bit more.

00:13:13.670 --> 00:13:15.720
What I've done here is
that we have this setting,

00:13:15.720 --> 00:13:17.280
the Development Build Products Path.

00:13:17.410 --> 00:13:21.260
This is basically the shared build
products I was talking about earlier.

00:13:21.380 --> 00:13:26.360
And so what I've done is I've said, well,
take the default value and add /Debug.

00:13:26.510 --> 00:13:29.700
So I'm creating a debug folder
in that general location.

00:13:29.820 --> 00:13:31.780
The other thing I've done is
I've changed the product name.

00:13:31.780 --> 00:13:34.000
I've said, well,
take the product name value

00:13:34.150 --> 00:13:35.300
and append debug to it.

00:13:35.610 --> 00:13:37.150
So in this case, we're looking at Sketch.

00:13:37.210 --> 00:13:39.110
It's a simple, small program.

00:13:39.120 --> 00:13:41.240
We'll get Sketch debug.

00:13:41.400 --> 00:13:43.520
And then finally, I want to say, oh,
well, you know,

00:13:43.520 --> 00:13:44.740
there's some debug code I want to run.

00:13:44.740 --> 00:13:46.840
So let's take the previous
value of the preprocessor

00:13:47.030 --> 00:13:49.920
macros and append debug to it.

00:13:50.050 --> 00:13:52.440
And then in my deployment,
I do the same type of thing.

00:13:52.560 --> 00:13:54.520
Except in this case,
I don't have any preprocessor

00:13:54.580 --> 00:13:56.540
macros I want to set.

00:13:57.080 --> 00:13:58.810
I just set the
Development Build Products Path to

00:13:58.810 --> 00:14:02.660
have /Release,
append release to the product name.

00:14:02.660 --> 00:14:05.740
And one thing I do here is that I turn
off using the deployment location.

00:14:05.740 --> 00:14:08.140
Because in this case,
I just want to have my optimized

00:14:08.190 --> 00:14:08.840
thing alongside my deployment.

00:14:08.900 --> 00:14:12.940
I don't want to create a root
that I'm going to install later.

00:14:12.940 --> 00:14:14.580
So now there's one more thing.

00:14:14.580 --> 00:14:17.870
And this is what I actually
discovered last night.

00:14:18.990 --> 00:14:21.010
One of the problems you have
is if you try to do this,

00:14:21.040 --> 00:14:23.630
just what we've done so far,
is you'll find that you

00:14:23.630 --> 00:14:25.680
load the application,
but it never fully loads.

00:14:25.810 --> 00:14:28.530
And I was like, why doesn't this work?

00:14:28.780 --> 00:14:31.600
Well,
it turns out that the Info.plist for

00:14:31.600 --> 00:14:33.820
applications needs to be set up properly.

00:14:33.940 --> 00:14:40.010
And in 1.5, one cool thing you can do now
is you can actually put in build

00:14:40.010 --> 00:14:43.320
settings in your Info.plist,
and they'll get evaluated properly.

00:14:43.560 --> 00:14:45.450
So for example--

00:14:45.720 --> 00:14:46.830
Thank you.

00:14:47.140 --> 00:14:50.970
I didn't do the work, but someone did,
obviously.

00:15:19.060 --> 00:15:19.060
You can put in, for example,
product name.

00:15:19.060 --> 00:15:19.060
And the really cool thing is,
is that it gives you what the

00:15:19.060 --> 00:15:19.060
build style will give you.

00:15:19.060 --> 00:15:19.060
I mean, it's -- everything's
working the way it should.

00:15:19.060 --> 00:15:19.060
And so let me just -- I'm
not going to build this here,

00:15:19.060 --> 00:15:19.060
but I just want to launch
to just show you guys that,

00:15:19.060 --> 00:15:19.060
you know, this actually is real.

00:15:19.060 --> 00:15:19.060
All I have to do -- I don't
have to create -- oh,

00:15:19.060 --> 00:15:19.060
and the cool thing is,
you used to have to create, you know,

00:15:19.060 --> 00:15:19.060
custom executables to manage all this.

00:15:19.060 --> 00:15:19.060
Mm-mm.

00:15:19.060 --> 00:15:19.060
All you need to do is just
add the build style here,

00:15:19.060 --> 00:15:19.060
add these flags, and then, for example,
if I build and go,

00:15:19.060 --> 00:15:19.060
and then you'll notice down here,
sketch debug.

00:15:20.900 --> 00:15:23.550
And so, for example,
I put in some code on--

00:15:23.560 --> 00:15:26.210
what was it?-- top edges.

00:15:26.210 --> 00:15:35.070
So you see here, I got this-- maybe a
little harder to see,

00:15:35.070 --> 00:15:38.200
but I got this little NS log
here-- ran align top edges.

00:15:38.200 --> 00:15:38.200
So let me terminate that.

00:15:38.200 --> 00:15:38.200
Go to deployment.

00:15:39.430 --> 00:15:40.600
And so here's Sketch release.

00:15:40.600 --> 00:15:43.340
Well, let me try the same thing,
just to show that it's actually,

00:15:43.340 --> 00:15:44.480
you know--

00:15:46.910 --> 00:15:47.900
No log.

00:15:47.990 --> 00:15:51.370
So here we're showing you an easy way
to have separate locations for your

00:15:51.370 --> 00:15:53.010
different variants of your targets.

00:15:53.280 --> 00:15:58.510
We're showing you how to have
different names so you can

00:15:58.510 --> 00:16:03.430
easily tell from the docker,
from the finder, which is which.

00:16:03.430 --> 00:16:03.430
And finally, how to also set up the
preprocessor macros,

00:16:03.430 --> 00:16:03.430
because many times,
that's exactly what you want to do.

00:16:04.500 --> 00:16:06.550
Oh, one final thing I should
show this to you.

00:16:06.560 --> 00:16:08.340
This is really cool, actually.

00:16:08.640 --> 00:16:10.640
I mentioned about the executable.

00:16:10.640 --> 00:16:12.780
It actually turns out
that as I change this--

00:16:13.760 --> 00:16:17.220
There's one bug right now,
but if you reopen it,

00:16:17.220 --> 00:16:20.090
it will actually-- meh.

00:16:21.310 --> 00:16:23.700
If you reopen it,
it actually refreshes properly.

00:16:23.700 --> 00:16:25.340
So now you no longer need to.

00:16:25.390 --> 00:16:27.180
In one two, you had to set up your
own custom executables.

00:16:27.290 --> 00:16:28.760
That no longer needs to happen.

00:16:28.890 --> 00:16:33.200
The only caveat currently,
and this is stuff we'll work on for 2.0,

00:16:33.200 --> 00:16:36.820
is that our products currently don't
automatically refresh when they should.

00:16:36.820 --> 00:16:39.370
And there are some issues around if you
have multiple variants and you want to

00:16:39.420 --> 00:16:42.140
copy those products to other targets,
we need to work through.

00:16:42.270 --> 00:16:44.560
But for most of your usages,
this should work fine.

00:16:44.560 --> 00:16:46.920
And unfortunately,
I figured this out last night,

00:16:46.920 --> 00:16:49.000
so it's not in the image,
but I'm going to work with

00:16:49.000 --> 00:16:52.080
Matthew Formica to get up some sort
of tech note or example so that

00:16:52.080 --> 00:16:54.060
everyone can see how to do this.

00:16:54.060 --> 00:16:55.750
So there we go.

00:17:00.870 --> 00:17:02.560
If we can go back to slides?

00:17:02.560 --> 00:17:03.940
OK.

00:17:03.950 --> 00:17:06.200
So we talked a lot about
the native build system.

00:17:06.250 --> 00:17:09.660
Let's talk a little bit about
our external build system.

00:17:09.660 --> 00:17:12.670
Our external build system support
mainly comes through one thing,

00:17:12.680 --> 00:17:14.800
which is the external target target.

00:17:14.800 --> 00:17:18.250
It delegates build responsibilities
to the external build system.

00:17:18.340 --> 00:17:20.300
So if you're using make,
this means that make

00:17:20.300 --> 00:17:22.930
gets to run your build,
that it's responsible

00:17:22.930 --> 00:17:25.620
for the dependencies,
et cetera.

00:17:25.750 --> 00:17:27.840
You can still use Xcode
to edit your files.

00:17:27.840 --> 00:17:30.360
You can still use Xcode
to-- I'll show later,

00:17:30.360 --> 00:17:32.250
to run, to debug.

00:17:32.350 --> 00:17:38.480
All this means is that the build portion
is now being handled by someone else.

00:17:38.480 --> 00:17:39.900
You can also do the opposite thing.

00:17:39.900 --> 00:17:43.180
Let's say you just have some extra tools
that you want to get into your process.

00:17:43.280 --> 00:17:45.440
You can use things like the
shell script build phases and

00:17:45.440 --> 00:17:49.120
the copy files build phase to
integrate these tools into Xcode.

00:17:49.470 --> 00:17:51.660
There's also one that
I forgot to mention on here.

00:17:51.790 --> 00:17:52.680
Anders would kill me.

00:17:52.680 --> 00:17:53.640
I forgot to mention build rules.

00:17:53.850 --> 00:17:55.880
This is another way that
you can integrate external

00:17:55.940 --> 00:17:56.750
tools into your process.

00:17:56.920 --> 00:17:59.920
And I'd encourage you to go
look back at the increasing

00:17:59.920 --> 00:18:02.200
productivity part two session,
where we talk a lot about

00:18:02.200 --> 00:18:05.500
the build system and how
to do exactly these things.

00:18:06.830 --> 00:18:09.270
So now we've talked
about the project model.

00:18:09.280 --> 00:18:10.170
We've talked about the build system.

00:18:10.200 --> 00:18:13.610
Let's talk about actually
getting your project into Xcode.

00:18:13.880 --> 00:18:16.980
So there are a couple of different
talks I'm going to cover here.

00:18:17.100 --> 00:18:19.900
First,
we support bringing in Code Warrior Pro.

00:18:20.010 --> 00:18:24.040
We support bringing in Project Builder,
Project Builder Woe.

00:18:24.080 --> 00:18:26.420
And also, I put make file-based projects.

00:18:26.420 --> 00:18:29.240
Make files in quotes,
because it's anything that's make-like,

00:18:29.240 --> 00:18:30.700
really, and even more than that.

00:18:30.860 --> 00:18:35.080
But the common ones are make, ant, jam,
if you use it.

00:18:35.080 --> 00:18:37.320
But anything really that's
on the command line,

00:18:37.320 --> 00:18:39.480
you access from the command line,
you can make work.

00:18:39.540 --> 00:18:40.960
So Code Warrior Pro.

00:18:41.020 --> 00:18:45.170
Code Warrior Pro works with
Code Warrior Pro 8.3 and 9.x.

00:18:45.210 --> 00:18:47.590
It supports importing reference projects.

00:18:47.750 --> 00:18:49.750
It supports importing
most Code Warrior target

00:18:49.840 --> 00:18:51.060
types that are relevant.

00:18:51.100 --> 00:18:52.930
So for example,
we're not going to bother to import

00:18:53.090 --> 00:18:58.050
types that build 68k or build 68k CFM.

00:18:58.580 --> 00:19:00.440
What we do focus on is
things like the Carbon.

00:19:00.440 --> 00:19:06.070
We will bring in Carbon CFM targets and
just create the relevant Mako equivalent.

00:19:06.230 --> 00:19:08.020
We'll bring in the Mako targets,
et cetera.

00:19:08.200 --> 00:19:12.000
The two noticeable omissions at
this point are-- we'll bring in

00:19:12.200 --> 00:19:14.720
the res targets and Java targets.

00:19:14.770 --> 00:19:17.880
Converted projects use the
Xcode native build system.

00:19:17.890 --> 00:19:20.660
And the overall structure
of the project is preserved.

00:19:20.670 --> 00:19:23.880
Although we will add some files,
we won't remove any

00:19:24.130 --> 00:19:25.610
that are still relevant.

00:19:25.780 --> 00:19:29.000
Source code, however,
across all of our importing,

00:19:29.000 --> 00:19:30.070
there's one key thing.

00:19:30.210 --> 00:19:31.760
Source code is not modified.

00:19:32.030 --> 00:19:33.760
This is not about locking you into Xcode.

00:19:33.760 --> 00:19:36.680
This is about getting you over to
Xcode and still being able to use your

00:19:36.680 --> 00:19:39.260
Code Warrior project at the same time
so that you can make the transition

00:19:39.260 --> 00:19:40.750
more smoothly if you need to jump back.

00:19:40.960 --> 00:19:44.990
And new for 1.5 and later,
you can now script importing

00:19:44.990 --> 00:19:49.270
projects in Apple Script,
specifically Code Warrior.

00:19:50.780 --> 00:19:54.600
So now what I'm going to show you is just
a quick example of kind of a comparison

00:19:54.600 --> 00:20:00.100
between the CodeWarrior and the--

00:20:09.570 --> 00:20:09.570
So here, let me do this.

00:20:09.570 --> 00:20:09.570
So if you can switch to demo.

00:20:09.570 --> 00:20:09.570
And one thing I'm going to do just
to kind of show off another feature

00:20:09.570 --> 00:20:09.570
I'll talk about later is I'm going
to use the condensed workspace.

00:20:10.120 --> 00:20:15.810
So I've taken one of the
CodeWarrior examples here,

00:20:15.810 --> 00:20:18.220
and let's just drag this
down to CodeWarrior IDE.

00:20:35.820 --> 00:20:35.830
So, for example, this is PowerPaint.

00:20:35.830 --> 00:20:35.830
This is one of their PowerPlant examples.

00:20:35.830 --> 00:20:35.830
And so, you know,
for those of you who use CodeWarrio,

00:20:35.830 --> 00:20:35.830
this is going to be boring.

00:20:35.830 --> 00:20:35.830
I'm sorry.

00:20:35.830 --> 00:20:35.830
But I just wanted to give a
little bit of background here.

00:20:35.830 --> 00:20:35.830
So you notice they have files, you know,
the files and folders,

00:20:35.830 --> 00:20:35.830
the files and -- let's find one.

00:20:35.830 --> 00:20:35.830
Yeah, so files, folders.

00:20:35.830 --> 00:20:35.830
Then you also have your targets.

00:20:35.830 --> 00:20:35.830
You have your link order.

00:20:36.130 --> 00:20:39.440
And then for a given target,
they have the active target there,

00:20:39.440 --> 00:20:41.340
you can have your settings.

00:20:41.620 --> 00:20:44.000
So just to give kind of
a compare and contrast,

00:20:44.000 --> 00:20:46.410
just to show you what happens,
this is an example of a project

00:20:46.420 --> 00:20:47.650
that's already been imported.

00:20:47.670 --> 00:20:49.400
So let me move actually
this guy over here,

00:20:49.400 --> 00:20:50.740
and let's put him on files.

00:20:50.750 --> 00:20:52.640
So you notice that our
condensed workspace looks

00:20:52.940 --> 00:20:55.340
amazingly similar to codeware.

00:20:55.470 --> 00:20:58.320
But what I wanted to go over
wasn't so much the look,

00:20:58.420 --> 00:20:59.920
but just what we actually bring in.

00:20:59.920 --> 00:21:01.740
So for example,
you'll notice we keep pretty

00:21:01.740 --> 00:21:03.820
much the same structure.

00:21:03.930 --> 00:21:06.780
There are, though,
a few important things to note.

00:21:06.910 --> 00:21:08.760
For example,
we had this imported files group.

00:21:08.980 --> 00:21:10.320
And you'll notice, wow,
there's a bunch of headers

00:21:10.320 --> 00:21:12.480
in there and various files.

00:21:12.530 --> 00:21:16.760
As I said before,
codeware uses recursive search paths.

00:21:16.760 --> 00:21:19.020
And they don't have you include headers,
for example.

00:21:19.070 --> 00:21:22.140
Xcode really, really wants to have those
headers in the project.

00:21:22.280 --> 00:21:23.600
And it works a lot better if they are.

00:21:23.750 --> 00:21:26.580
So when we do the import,
the reason actually importing

00:21:26.630 --> 00:21:28.690
takes as long as it does is
that we actually go through,

00:21:28.760 --> 00:21:31.660
scan your code, and figure out all the
headers we need to bring in.

00:21:31.730 --> 00:21:33.370
And so for example,
we'll add just general

00:21:33.370 --> 00:21:35.240
ones in imported files.

00:21:35.320 --> 00:21:38.320
But for example, if I go to PP actions,
you'll notice, well,

00:21:38.320 --> 00:21:39.640
here's a header file.

00:21:39.640 --> 00:21:40.060
How'd that get there?

00:21:40.160 --> 00:21:42.900
We'll actually look and see, well,
if we find a header file,

00:21:42.900 --> 00:21:44.600
is there an associated C file already?

00:21:44.600 --> 00:21:47.480
If so, we put it in line with it.

00:21:49.750 --> 00:21:52.920
Now here, if you go to the targets,
you'll notice that I've created

00:21:52.950 --> 00:21:54.280
a PowerPaint PPC target.

00:21:54.280 --> 00:21:56.200
So this is just bringing it over.

00:21:56.240 --> 00:21:57.930
We do bring over some of the settings.

00:21:57.950 --> 00:22:01.350
I'm not going to go into
details about which ones,

00:22:01.360 --> 00:22:05.750
but we bring over all the ones
that are relevant to the project.

00:22:05.750 --> 00:22:09.090
However,
we also provide defaults that are more

00:22:09.090 --> 00:22:11.760
appropriate for Xcode in some cases.

00:22:11.790 --> 00:22:13.730
And so here's your target.

00:22:13.730 --> 00:22:14.080
And then we also, as I said before,
an executable is automatically generated.

00:22:14.240 --> 00:22:15.950
Now,
one thing is that you'll notice here,

00:22:15.950 --> 00:22:17.170
well, we don't have a link order.

00:22:17.360 --> 00:22:18.700
Well, so how do you manage link order?

00:22:18.700 --> 00:22:23.240
This is something that's
asked from time to time.

00:22:23.240 --> 00:22:28.420
It actually turns out if I go
open up the target in PowerPC,

00:22:28.420 --> 00:22:31.890
you actually can open
up the sources phase.

00:22:31.890 --> 00:22:31.890
And in here is your link
order for all your C files.

00:22:31.890 --> 00:22:31.890
So you can just rearrange those,
and those will rearrange the link order.

00:22:33.860 --> 00:22:36.220
And then finally,
one thing that CodeWarrior

00:22:36.240 --> 00:22:40.770
doesn't have separately,
I just wanted to quickly go over the--

00:22:40.940 --> 00:22:41.900
is the executable.

00:22:41.900 --> 00:22:44.400
I just want to point out, you know,
we have the executable here.

00:22:44.400 --> 00:22:46.230
It's something I'm going to
show more in the future demo.

00:22:46.320 --> 00:22:51.410
But just the idea that in CodeWarrio,
you kind of look in one place,

00:22:51.410 --> 00:22:54.140
the target, to set all this stuff.

00:22:54.290 --> 00:22:58.160
Sometimes if you don't see
something in the target,

00:22:58.160 --> 00:23:02.650
you might want to go look in the
executable editor-- executable inspector

00:23:02.650 --> 00:23:02.650
to set some launch time properties.

00:23:02.650 --> 00:23:02.650
And so that's that.

00:23:02.650 --> 00:23:02.650
So let's go back to the slides.

00:23:14.260 --> 00:23:15.880
Project Builder.

00:23:16.330 --> 00:23:18.970
It's kind of weird to talk about in
this session because we actually don't

00:23:19.120 --> 00:23:20.830
do any importing of Project Builder.

00:23:20.990 --> 00:23:22.660
They just automatically
convert as soon as you open.

00:23:22.750 --> 00:23:24.000
There's no import process at all.

00:23:24.000 --> 00:23:25.960
We just upgrade the project file,
essentially.

00:23:25.960 --> 00:23:28.840
Targets continue to use
the Jam-based build system.

00:23:28.840 --> 00:23:29.840
This makes it really easy.

00:23:29.840 --> 00:23:31.870
You don't have to worry about, oh,
I've changed to Xcode and

00:23:31.870 --> 00:23:33.020
I've changed my build system.

00:23:33.020 --> 00:23:34.440
You can take it in tiny baby steps.

00:23:35.180 --> 00:23:38.130
There are, though,
very easy options to convert your

00:23:38.180 --> 00:23:40.190
targets to use native targets.

00:23:40.320 --> 00:23:43.560
And we can do this either for
an individual target or the

00:23:43.660 --> 00:23:47.530
more recommended way these days,
unless you have some Java targets,

00:23:47.580 --> 00:23:49.580
is just to do the whole project,
since it will then do all

00:23:49.580 --> 00:23:50.800
the dependencies correctly.

00:23:50.800 --> 00:23:53.130
In either case,
the original targets are currently

00:23:53.130 --> 00:23:55.960
preserved so that you can always
fall back to the originals.

00:23:58.160 --> 00:23:59.400
Project Builder Woe.

00:23:59.400 --> 00:24:01.660
Before Project Builder,
there was Project Builder Woe.

00:24:01.660 --> 00:24:04.960
We still support importing most
project types for Project Builder Woe.

00:24:05.170 --> 00:24:09.700
Most subprojects are now, as of 1.5,
imported as native targets.

00:24:09.700 --> 00:24:13.600
However, WebObjects subprojects are still
imported using Jam-based targets.

00:24:13.730 --> 00:24:18.030
As with all the other importers,
project hierarchy is maintained.

00:24:19.850 --> 00:24:21.140
External build system projects.

00:24:21.300 --> 00:24:22.720
So there's no direct importer.

00:24:22.720 --> 00:24:24.490
We get lots of requests, "Oh,
can you make a makefile

00:24:24.570 --> 00:24:27.110
importer?" And then we think
about going back to college,

00:24:27.190 --> 00:24:29.230
because that's where we'd
have to be to make it,

00:24:29.230 --> 00:24:31.290
because it would take four or five years.

00:24:31.290 --> 00:24:33.430
But what we do allow for is,
as I said before,

00:24:33.550 --> 00:24:35.150
we have the external target target.

00:24:35.380 --> 00:24:38.430
So what we encourage people to do
is use the external target target

00:24:38.540 --> 00:24:40.310
to wrap your external build system.

00:24:40.310 --> 00:24:42.570
If you don't desperately
need it to be in Xcode,

00:24:42.570 --> 00:24:45.300
if you've got this makefile
that people are supporting,

00:24:45.310 --> 00:24:47.960
like in an open source project,
leverage the fact that

00:24:47.960 --> 00:24:49.360
we have this capability.

00:24:50.020 --> 00:24:52.570
So now, one thing I wanted to
show is an Ant demo.

00:24:52.620 --> 00:24:54.910
So if we can come back,
I'm going to show you how to quickly

00:24:55.490 --> 00:24:58.090
bring in an open source Ant project.

00:24:58.280 --> 00:25:03.380
And for this one, we will be starring the
All-in-One Workspace.

00:25:04.500 --> 00:25:08.240
So most people on the team
know I'm somewhat of a gamer.

00:25:08.240 --> 00:25:08.900
I board game.

00:25:08.900 --> 00:25:09.600
I play games.

00:25:09.640 --> 00:25:11.500
I have video consoles, everything.

00:25:11.560 --> 00:25:13.620
So one of the things I've been doing
lately is playing Diplomacy Online.

00:25:13.620 --> 00:25:20.460
So I pulled down this open source
project that basically helps

00:25:20.460 --> 00:25:20.460
email players map out diplomacy.

00:25:20.830 --> 00:25:23.190
But you'll notice there's
no Xcode project here.

00:25:23.300 --> 00:25:25.510
But there is an ant file.

00:25:25.640 --> 00:25:29.020
So what I can do is I can go to Xcode.

00:25:29.020 --> 00:25:31.130
I can say new project.

00:25:31.440 --> 00:25:35.890
And new with 1.5, you notice we have some
AMP-based templates.

00:25:36.010 --> 00:25:38.500
So I'm going to use the empty project.

00:25:40.100 --> 00:25:40.700
So let's see.

00:25:40.700 --> 00:25:43.750
I want to call it jdep.

00:25:43.790 --> 00:25:46.270
And then I need to choose a directory.

00:25:46.830 --> 00:25:50.700
So let me go to-- come on.

00:25:50.950 --> 00:25:54.190
Ooh, that's pretty.

00:25:54.190 --> 00:25:56.280
I like that.

00:25:56.280 --> 00:25:58.700
Let's try now.

00:25:58.700 --> 00:25:59.750
Now.

00:25:59.750 --> 00:26:00.620
OK.

00:26:01.550 --> 00:26:03.070
Interesting.

00:26:03.070 --> 00:26:04.100
Ah.

00:26:29.400 --> 00:26:30.100
There we go.

00:26:30.150 --> 00:26:31.800
OK, so you'll notice, for example,
in the Finder window,

00:26:31.800 --> 00:26:34.010
now I have this jdip.xcode file.

00:26:34.100 --> 00:26:35.940
So the empty project
doesn't have much in it.

00:26:35.940 --> 00:26:38.360
So what I want to do is actually
just bring in everything.

00:26:38.360 --> 00:26:42.330
So actually, in this particular case,
I could just-- I could drag-- well,

00:26:42.390 --> 00:26:43.440
actually, I'll just drag it in.

00:26:43.530 --> 00:26:44.900
So let me just select everything.

00:26:45.120 --> 00:26:49.110
But I don't want you,
and I don't want the build directory.

00:26:56.190 --> 00:26:57.070
Quick tutorial on this.

00:26:57.120 --> 00:26:58.580
We get lots of questions about this.

00:26:58.720 --> 00:27:02.050
You'll notice this copy items just
let you copy them into wherever

00:27:02.050 --> 00:27:03.500
your project file might be.

00:27:03.610 --> 00:27:05.490
In this case, I don't want to do that.

00:27:05.520 --> 00:27:09.420
The reference type and text encoding,
for the most part, leave those alone.

00:27:09.420 --> 00:27:12.390
There are some known issues there,
but in general,

00:27:12.390 --> 00:27:15.980
it does what you want if you're
inside the project folder.

00:27:16.000 --> 00:27:17.860
The one that we get a lot of
questions on is this next one.

00:27:17.860 --> 00:27:21.240
It says recursively create groups,
create folder references.

00:27:21.240 --> 00:27:24.820
The create groups means basically we
create these groups that are logical and

00:27:24.820 --> 00:27:27.440
they might be tied to the file system,
might not.

00:27:27.440 --> 00:27:29.960
Folder references basically say
we're going to create a reference

00:27:30.070 --> 00:27:33.460
to the folder and then we'll
dynamically track what's inside of it,

00:27:33.460 --> 00:27:37.160
but we won't create persistent
references for what's inside of it.

00:27:37.160 --> 00:27:39.220
In this case, I want groups,
but there are cases like when

00:27:39.230 --> 00:27:41.930
you have a bunch of images or a
hierarchy of resources you want

00:27:41.930 --> 00:27:45.280
just dumped into your bundle,
it's sometimes better just to make

00:27:45.280 --> 00:27:49.110
a folder reference directly to
the folder and copy that directly

00:27:49.220 --> 00:27:52.910
in because that way you can add
references inside that hierarchy and

00:27:53.000 --> 00:27:56.190
you don't have to go edit the later.

00:28:01.960 --> 00:28:02.400
So there we go.

00:28:02.400 --> 00:28:03.020
There's all my stuff.

00:28:03.020 --> 00:28:07.080
Now, it turns out that when I was looking
at this-- let me just open up--

00:28:07.940 --> 00:28:10.560
The default really isn't what I--
this is the one source code change

00:28:10.560 --> 00:28:13.130
I have to do to make this demo work.

00:28:13.130 --> 00:28:18.120
I was really bummed,
because I was hoping I could do it

00:28:18.120 --> 00:28:22.120
without making any source code changes.

00:28:22.120 --> 00:28:25.390
But it turns out their default
action isn't what I want.

00:28:25.390 --> 00:28:25.390
What I want to do is
I want to generate a jar.

00:28:25.390 --> 00:28:25.390
So I'm going to use their dist option.

00:28:25.390 --> 00:28:25.390
So then let's-- oops.

00:28:28.750 --> 00:28:29.910
So let's just scroll up.

00:28:29.990 --> 00:28:32.320
In fact, we can just close this all out,
because I don't have to do

00:28:32.320 --> 00:28:34.340
any more source code changes.

00:28:34.350 --> 00:28:36.370
All I have to do--

00:28:36.700 --> 00:28:55.700
[Transcript missing]

00:28:56.930 --> 00:29:00.200
And so there's nothing that
needs to be changed here,

00:29:00.210 --> 00:29:03.160
but I do need to create
a custom executable.

00:29:03.160 --> 00:29:05.500
If I can just remember-- there we go.

00:29:05.990 --> 00:29:09.400
So what I'm going to call this one
is I'm just going to call it JDIP.

00:29:09.400 --> 00:29:14.690
And it turns out what we want to do here,
since it's just a JAR file,

00:29:14.690 --> 00:29:17.290
let's just do user-bin Java.

00:29:19.690 --> 00:29:20.520
So there we go.

00:29:20.520 --> 00:29:22.520
And so this is the executable inspector.

00:29:22.520 --> 00:29:24.180
You'll notice here I have my executable.

00:29:24.180 --> 00:29:25.170
It's user-bend Java.

00:29:25.360 --> 00:29:26.720
I can have some settings here.

00:29:26.720 --> 00:29:30.400
I also want to set a
custom build directory,

00:29:30.400 --> 00:29:35.790
which is-- I believe it's a jar dist.

00:29:41.420 --> 00:29:44.790
And then the other thing I can do
is I can set up one argument here.

00:29:44.840 --> 00:29:49.930
And let's do -jar jdip.jar.

00:29:50.690 --> 00:29:52.750
Because it actually turns
out that for whatever reason,

00:29:52.750 --> 00:29:55.250
JDIP has this nasty dependency
on the common working directory.

00:29:55.250 --> 00:29:57.660
So I need to make sure my common
working directory is set up.

00:29:57.740 --> 00:30:05.950
But that's pretty much
all I need to set up.

00:30:06.190 --> 00:30:10.240
And so now if I go to, say, build and go,
and let's bring up the build panel.

00:30:13.590 --> 00:30:17.030
You notice I had it previously pre-built,
and since Ant is kind of cool

00:30:17.030 --> 00:30:19.710
in that it notices this stuff
and doesn't rebuild stuff,

00:30:19.800 --> 00:30:21.000
so now it's coming up.

00:30:21.050 --> 00:30:22.940
And we'll see if I remembered
the correct path and everything.

00:30:22.980 --> 00:30:23.460
And there you go.

00:30:23.460 --> 00:30:25.680
Now we've got something up.

00:30:25.730 --> 00:30:30.540
And that was what, like five minutes,
bringing a Java project.

00:30:30.660 --> 00:30:34.450
And just to be clear, I mean,
let me quit this.

00:30:34.450 --> 00:30:36.140
I haven't done-- I've
done like five minutes.

00:30:36.190 --> 00:30:37.820
Let me go back to here.

00:30:37.930 --> 00:30:42.100
And if I was to go to say-- let
me bring up the activity viewer.

00:30:42.230 --> 00:30:45.560
So you can see, OK, well,
we're done indexing,

00:30:45.560 --> 00:30:50.930
but let's bring up the class browser.

00:30:50.930 --> 00:30:50.930
Come on.

00:30:54.300 --> 00:30:58.800
Just like we've shown before,
the index is populated.

00:30:58.800 --> 00:31:00.950
You're going to have access
to all the Java information.

00:31:01.130 --> 00:31:04.160
All that's being done here is ANT is
taking control of your builds.

00:31:04.250 --> 00:31:05.130
You're still going to be able to run it.

00:31:05.260 --> 00:31:07.200
You're still going to
be able to debug it.

00:31:07.430 --> 00:31:15.630
It's a very quick way to
get into Xcode very cheaply.

00:31:15.630 --> 00:31:15.630
Why don't we go back to the slides?

00:31:20.390 --> 00:31:22.600
Oh, but Scott, you say,
you don't have my IDE.

00:31:22.600 --> 00:31:23.600
I'm using Visual Studio.

00:31:23.600 --> 00:31:25.600
I'm using something.

00:31:25.750 --> 00:31:27.380
Something that's not here.

00:31:27.450 --> 00:31:28.980
Yeah, we can't do everything.

00:31:29.230 --> 00:31:31.660
We'd love to,
but it just doesn't happen overnight.

00:31:31.850 --> 00:31:34.690
So the best thing to do at
this point is do something

00:31:34.690 --> 00:31:36.140
similar to what I did with Ant.

00:31:36.240 --> 00:31:40.730
It's create a new project,
add new targets if needed,

00:31:40.740 --> 00:31:43.920
and drag in the relevant files,
and just kind of go from there.

00:31:43.920 --> 00:31:46.180
If you can,
using external build systems when you're

00:31:46.180 --> 00:31:48.970
dealing with some of these other IDEs,
especially when they're

00:31:48.980 --> 00:31:53.830
make-based or make-like,
is very powerful in the recommended way.

00:31:54.990 --> 00:31:57.240
So you've got your project in there,
especially if you move to

00:31:57.240 --> 00:31:58.340
something like CodeWarrio.

00:31:58.460 --> 00:32:00.580
Well, now you have to deal
with a compiler change.

00:32:00.580 --> 00:32:01.940
You used to be using MWCC.

00:32:01.940 --> 00:32:03.510
Now you're using GCC.

00:32:03.640 --> 00:32:06.480
So let's talk a little bit about
moving to GCC and some of the

00:32:06.480 --> 00:32:08.210
pitfalls you might encounter.

00:32:09.160 --> 00:32:11.800
GCC has a different heritage
than other compilers.

00:32:12.050 --> 00:32:13.380
It's open source for one.

00:32:13.380 --> 00:32:19.270
It's also been really focused
on portability and compliance.

00:32:20.370 --> 00:32:23.460
GCC, in many cases,
is stricter than other compilers,

00:32:23.460 --> 00:32:26.160
which makes sense,
because of the compliance.

00:32:26.160 --> 00:32:28.680
And then one thing to
note is when converting,

00:32:28.680 --> 00:32:30.120
you'll get a lot of errors.

00:32:30.400 --> 00:32:32.540
You'll get, oh, my God, so many errors.

00:32:32.590 --> 00:32:36.450
But what you'll find out is that there
are just a few common constructs,

00:32:36.450 --> 00:32:39.130
a few common patterns that
you just need to tweak,

00:32:39.250 --> 00:32:41.340
and then a lot of them will just go away.

00:32:41.380 --> 00:32:42.890
I'm not saying there won't potentially be
some nasty things you have to deal with,

00:32:42.890 --> 00:32:42.890
but for the most part,
it's all very just simple changes.

00:32:43.130 --> 00:32:45.000
So some of those simple changes.

00:32:45.000 --> 00:32:45.500
Let's talk a little bit.

00:32:45.500 --> 00:32:49.330
In the past, you'd do things like ifdef
mworks to specify Mac OS X code.

00:32:49.520 --> 00:32:50.270
Don't do that.

00:32:50.480 --> 00:32:54.580
Use things like ifdef applecc or
something more appropriate to specify

00:32:54.580 --> 00:32:56.180
the compiler you're working with.

00:32:56.210 --> 00:33:02.220
For example, use applecc when you're
specifying GCC-only code.

00:33:02.470 --> 00:33:06.610
It's still appropriate to use mworks
if you want to support both compiling

00:33:06.610 --> 00:33:06.610
with MetroWorks and compiling with GCC.

00:33:06.950 --> 00:33:10.240
But to be clear,
it's not appropriate to use that to

00:33:10.260 --> 00:33:12.620
indicate what platform you're on.

00:33:13.010 --> 00:33:15.470
This is kind of old hat,
but don't include universal headers,

00:33:15.570 --> 00:33:17.400
things like MacWindows.h directly.

00:33:17.400 --> 00:33:18.780
Use framework includes instead.

00:33:19.040 --> 00:33:21.050
Trust me,
the MacWindows.h on the system that's

00:33:21.100 --> 00:33:24.500
there for compatibility is just going
to do the Carbon/Carbon.h anyway.

00:33:24.650 --> 00:33:28.960
So you're not saving yourself anything,
including universal headers.

00:33:31.340 --> 00:33:36.240
Don't assume that inlining works the
same way between your compiler and GCC.

00:33:36.240 --> 00:33:39.060
Use things like -finline limit
to set the maximum size of

00:33:39.060 --> 00:33:41.160
functions that will be inlined.

00:33:41.160 --> 00:33:42.040
This is very important.

00:33:42.040 --> 00:33:45.050
The inline rules are different,
especially between CodeWarrio and GCC.

00:33:45.080 --> 00:33:46.280
Be aware of that.

00:33:46.280 --> 00:33:48.740
And we'll talk more about some
documentation later that you

00:33:48.740 --> 00:33:52.630
can read through that talks
about some of these things.

00:33:52.740 --> 00:33:55.540
Don't rely on #pragmasupport in GCC.

00:33:55.540 --> 00:33:57.060
Currently, it's just not there.

00:33:57.070 --> 00:34:01.280
There's some stuff, but not as much as,
for example, what's in CodeWarrio.

00:34:01.280 --> 00:34:04.570
Try to use per build file
settings instead where you can.

00:34:05.760 --> 00:34:07.650
Don't rely on the size of Bool.

00:34:07.690 --> 00:34:10.410
Note that the size of
Bool is four bytes on GCC,

00:34:10.460 --> 00:34:14.140
but one, for example,
with CodeWarrior and Windows.

00:34:14.220 --> 00:34:18.940
So if you want to make
truly portable code,

00:34:18.940 --> 00:34:18.940
don't rely on the fact that a
Bool is only going to be one byte.

00:34:20.610 --> 00:34:23.600
Don't assume that true and
one are the same value across

00:34:23.600 --> 00:34:25.770
compilers and defined statements.

00:34:25.770 --> 00:34:29.170
Use things like define foobar
one and then if foobar to get the

00:34:29.170 --> 00:34:31.690
correct results across compilers.

00:34:35.180 --> 00:34:36.090
We've got your project in.

00:34:36.100 --> 00:34:37.900
We've talked about GCC a little bit.

00:34:37.910 --> 00:34:42.120
Let's talk about how you can use
Xcode now to make your experience

00:34:42.120 --> 00:34:44.410
with Xcode more familiar.

00:34:44.600 --> 00:34:51.350
But not only that,
I'm going to also briefly kind

00:34:51.700 --> 00:34:53.590
of highlight the technologies
that you can use to make yourself

00:34:53.590 --> 00:34:53.590
more powerful by using Xcode.

00:34:55.300 --> 00:34:56.420
So making Xcode familiar.

00:34:56.510 --> 00:34:58.080
New for 2.0, workspaces.

00:34:58.080 --> 00:35:00.140
You saw all three
different workspaces there.

00:35:00.180 --> 00:35:02.740
I would strongly encourage
everyone here to take a spin with

00:35:02.740 --> 00:35:04.530
the developer preview for Tiger.

00:35:04.540 --> 00:35:05.650
Play with the workspaces.

00:35:05.670 --> 00:35:07.680
See which ones you like,
which ones you don't.

00:35:07.790 --> 00:35:09.680
And for the ones that you like,
if you see things that are missing that

00:35:09.680 --> 00:35:12.030
would make it just that much better,
please file bugs.

00:35:12.140 --> 00:35:14.680
We do want to get feedback
on these workspaces and make

00:35:14.690 --> 00:35:16.570
sure they're working for you.

00:35:17.180 --> 00:35:20.340
So quickly,
what workspaces are-- actually,

00:35:20.560 --> 00:35:26.630
can we come back to the
demo machine for one second?

00:35:26.630 --> 00:35:26.630
For those of you who didn't go to
the increasing productivity one,

00:35:29.730 --> 00:35:32.650
So we have the all-in-one workspace,
which I showed before.

00:35:32.880 --> 00:35:35.530
And let me just-- I'll just
use Sketch for all three.

00:35:35.540 --> 00:35:38.810
So what this does is allows you
to have one window per project.

00:35:42.880 --> 00:35:47.050
So, this is pretty simple.

00:35:47.050 --> 00:35:49.020
There are still going to be some separate
global windows like the Activity Viewer,

00:35:49.020 --> 00:35:49.020
but pretty much when you're
working your project,

00:35:49.020 --> 00:35:49.020
you'll be working in one window.

00:35:50.690 --> 00:35:53.380
And currently, for right now,
you have to close projects when

00:35:53.380 --> 00:35:57.630
you change workspaces for the seed.

00:35:57.750 --> 00:36:00.190
But then I can switch to--

00:36:00.950 --> 00:36:03.540
The condensed project workspace.

00:36:03.540 --> 00:36:05.780
And let me open Sketch again.

00:36:05.850 --> 00:36:07.440
You'll notice this is much more compact.

00:36:07.440 --> 00:36:10.400
You'll notice that we have a
much smaller project window.

00:36:10.400 --> 00:36:13.740
It doesn't have the attached detail view.

00:36:13.760 --> 00:36:21.020
It's designed more for those people
who like to have lots and lots of

00:36:21.020 --> 00:36:21.370
windows and want their project window
to not take up the whole screen,

00:36:21.370 --> 00:36:21.370
to be very small.

00:36:22.220 --> 00:36:25.100
And then one of the things, too,
on these is that we've also

00:36:25.100 --> 00:36:28.600
made things so the tabs actually
will allow you to drag around.

00:36:28.600 --> 00:36:30.950
So for example,
if you wanted to add this to a target,

00:36:30.950 --> 00:36:33.590
you can just drag things around,
which makes this actually

00:36:33.590 --> 00:36:34.900
a pretty powerful view.

00:36:35.070 --> 00:36:37.010
And then finally,

00:36:37.930 --> 00:36:41.130
We have the old original workspace.

00:36:41.370 --> 00:36:46.150
So this is what we call the Xcode 1.2++.

00:37:12.530 --> 00:37:13.020
So, for example,
you'll notice here we have a

00:37:13.020 --> 00:37:13.020
separate window for each task.

00:37:13.020 --> 00:37:13.020
You'll also notice we've
gone back to normal sliders.

00:37:13.020 --> 00:37:13.020
And then in certain cases, for example,
when we bring up the find window,

00:37:13.020 --> 00:37:13.020
you'll notice now we have
attached editors on most windows,

00:37:13.020 --> 00:37:13.020
so that when you do a find,
you can just do inline -- you can do

00:37:13.020 --> 00:37:13.020
your -- you find replace inline without
having to go between multiple windows.

00:37:13.020 --> 00:37:13.020
But otherwise, this is very similar to
the Xcode 1.2 work style.

00:37:15.490 --> 00:37:17.860
So that's the quick two-second
version of WorkSpaces.

00:37:17.860 --> 00:37:22.300
I strongly encourage people to review
the Increasing Productivity Part 1

00:37:22.360 --> 00:37:24.400
session that was given on Wednesday.

00:37:24.440 --> 00:37:26.800
That will go into much more detail.

00:37:26.820 --> 00:37:29.100
So if we can go back to
the slides real quick.

00:37:29.240 --> 00:37:30.600
So that's WorkSpaces.

00:37:30.600 --> 00:37:32.500
We also have key bindings since 1.0.

00:37:32.500 --> 00:37:37.710
We've supported key bindings for BBEdit,
for MPW, CodeWarrior.

00:37:38.060 --> 00:37:41.800
You can also create your own custom
key bindings off of any of these.

00:37:41.800 --> 00:37:45.680
If there is an IDE that you would
like to see us make key bindings for,

00:37:45.800 --> 00:37:48.100
please follow radars and let us know.

00:37:48.200 --> 00:37:49.300
External editors.

00:37:49.300 --> 00:37:51.230
Sometimes you just really,
really like the editor

00:37:51.320 --> 00:37:53.030
you're working with,
and you don't necessarily

00:37:53.030 --> 00:37:54.100
want to use the Xcode editor.

00:37:54.100 --> 00:37:59.110
So we have support for BBEdit,
TextWrangler, SubEtherEdit, Emacs,

00:37:59.110 --> 00:38:01.350
and partial support for VI.

00:38:04.300 --> 00:38:06.090
Just a clarification,
unless you see the 2.0

00:38:06.170 --> 00:38:09.140
bubble or the 1.5 bubble,
this is stuff that already exists.

00:38:09.140 --> 00:38:13.710
Most of the stuff I talk about
today is already existing.

00:38:14.030 --> 00:38:16.860
Finally, with text editing,
I'm about to do a demo.

00:38:16.860 --> 00:38:18.980
I'm going to show you
some text editing things.

00:38:18.980 --> 00:38:21.220
We get a lot of questions about, oh,
I want to turn off line-wrapping

00:38:21.220 --> 00:38:22.840
or I want to turn off indentation.

00:38:22.840 --> 00:38:23.860
Where do I set all this stuff?

00:38:23.860 --> 00:38:27.260
I'm just going to do a quick
tour to show you that stuff.

00:38:27.350 --> 00:38:29.600
Let's just go ahead and do
the customizing Xcode demo.

00:38:29.640 --> 00:38:31.060
So if we can switch back real quick.

00:38:33.690 --> 00:38:35.780
So we'll use Sketch again.

00:38:45.480 --> 00:38:46.220
So here we have Xcode.

00:38:46.300 --> 00:38:48.140
So let's-- oh, actually,
I don't want Xcode.

00:38:48.210 --> 00:38:53.640
What I want is JDIP.

00:38:53.740 --> 00:39:00.310
So let's start out-- I talked a little
about workspaces a little bit earlier.

00:39:00.310 --> 00:39:00.310
So next thing I want
to talk about is the--

00:39:00.470 --> 00:39:01.400
Let's just jump real quick.

00:39:01.400 --> 00:39:02.400
I'll just show the keybinds real quickly.

00:39:02.400 --> 00:39:03.330
Here's the keybindings.

00:39:03.330 --> 00:39:04.240
It's in the general preps.

00:39:04.520 --> 00:39:07.200
And as you'll notice up here,
I'm using Xcode default.

00:39:07.310 --> 00:39:09.780
But for example,
we also have BBEdit compatible,

00:39:09.780 --> 00:39:12.110
MetroWorks compatible,
and MPW compatible.

00:39:12.390 --> 00:39:16.700
You can also create your-- you can
duplicate one of any of these and

00:39:16.700 --> 00:39:19.490
create your own custom keybinding set.

00:39:19.500 --> 00:39:22.140
This should just work as advertised.

00:39:22.140 --> 00:39:24.430
If it's not, please let us know.

00:39:24.470 --> 00:39:27.980
And also, like I said, if there are other
sets you'd like to see,

00:39:27.980 --> 00:39:27.980
please let us know.

00:39:29.580 --> 00:39:32.530
Some sets are harder than others.

00:39:32.560 --> 00:39:35.050
I should point out, for those people that
are asking for Emacs,

00:39:35.160 --> 00:39:38.000
it actually turns out that Cocoa has
a number of the basic Emacs

00:39:38.000 --> 00:39:40.160
key bindings already in place,
in case you didn't know.

00:39:40.160 --> 00:39:43.740
But I understand there are more
complex ones that you want.

00:39:43.810 --> 00:39:47.100
So the next thing I want to talk
about a little bit is file types.

00:39:47.210 --> 00:39:51.510
So we have this idea of file types
in Xcode that allows us to say,

00:39:51.510 --> 00:39:53.100
oh, this is of a certain type.

00:39:53.100 --> 00:39:54.700
And those types can get pretty specific.

00:39:54.740 --> 00:39:59.120
So for example, if I want to,
I can get down to this is documentation,

00:39:59.120 --> 00:40:03.640
or I can go all the way down and say, oh,
this is a Java file, a res file,

00:40:03.640 --> 00:40:04.530
et cetera.

00:40:04.610 --> 00:40:08.940
I just wanted to show real quickly,
though, that our external editor support,

00:40:09.130 --> 00:40:11.750
the way it's set up-- for example,
here you see, oh, it's currently bbedit,

00:40:11.860 --> 00:40:12.910
currently subethaedit.

00:40:12.980 --> 00:40:14.700
It's not just one editor
you get to choose.

00:40:14.700 --> 00:40:17.240
You get to say on a per file type
basis which editor you want to use.

00:40:17.240 --> 00:40:20.000
So in this case,
I like to use bbedit for HTML,

00:40:20.030 --> 00:40:22.580
but I want to use
subethaedit to code with,

00:40:22.640 --> 00:40:27.220
so I can do some extreme coding
with someone in New York.

00:40:27.640 --> 00:40:31.190
But just to show how this works,
so for example, if I do Java,

00:40:34.410 --> 00:40:38.280
Then I can use sub-eth edit,
but if I want to do HTML,

00:40:38.310 --> 00:40:41.400
it'll launch bbedit.

00:40:41.400 --> 00:40:43.470
There we go.

00:40:43.470 --> 00:40:43.480
Yay.

00:40:45.490 --> 00:40:47.230
So anyway,
this is just a really simple way.

00:40:47.230 --> 00:40:50.560
Like, if you really like BBEdit-- we
know a lot of people love BBEdit.

00:40:50.640 --> 00:40:52.050
You can still use BBEdit.

00:40:52.130 --> 00:40:52.740
Go to town.

00:40:52.740 --> 00:40:53.600
It just works.

00:40:53.750 --> 00:40:57.930
It'll notice when you've changed files.

00:40:57.940 --> 00:41:03.380
It'll be able to open bookmarks,
breakpoints, et cetera.

00:41:03.380 --> 00:41:03.380
It'll be able to open bookmarks to files.

00:41:03.380 --> 00:41:03.380
Clicking on Find Results
should just work.

00:41:03.380 --> 00:41:03.380
It should all just work.

00:41:05.540 --> 00:41:09.550
And this has been in actually since 1.0,
although I believe Text Wrangler

00:41:09.550 --> 00:41:11.600
was added more recently.

00:41:12.220 --> 00:41:15.530
And then finally, I just want to talk
briefly about text editing.

00:41:15.740 --> 00:41:18.320
So text editing is the main
part to see all this stuff.

00:41:18.320 --> 00:41:21.280
And so for example,
some of the common ones are oh,

00:41:21.320 --> 00:41:23.320
I want to wrap lines or not wrap lines.

00:41:23.340 --> 00:41:28.650
I want to show the column position,
or I want to show my gutter, et cetera.

00:41:28.920 --> 00:41:31.850
We also have a page guide, for example,
if you like having a page guide

00:41:31.850 --> 00:41:35.530
at a certain number of columns,
whether the editor uses tabs or not.

00:41:35.670 --> 00:41:39.760
And then indentation,
here's our syntax aware indentation,

00:41:39.760 --> 00:41:42.040
and all the controls for that.

00:41:42.120 --> 00:41:45.150
And then finally, just to recap,
for the code sense and

00:41:45.150 --> 00:41:48.100
the function pop up,
that's all in navigation.

00:41:48.410 --> 00:41:49.380
So let's go back to the slides.

00:41:49.430 --> 00:41:51.900
That's just kind of a quick-- those
are some things that we find people,

00:41:51.960 --> 00:41:54.490
once they get those things changed,
suddenly they go from being

00:41:54.490 --> 00:41:55.960
really angry to kind of happy.

00:41:56.040 --> 00:41:59.500
And then they eventually get to really
happy when they get to this next part.

00:41:59.640 --> 00:42:00.440
So, great.

00:42:00.740 --> 00:42:02.750
Now Xcode works more how
you'd like it to work.

00:42:02.830 --> 00:42:04.360
You've got a nice work
space you can deal with.

00:42:04.470 --> 00:42:08.520
You've made some changes to how we
lay out files that you're happy with.

00:42:08.660 --> 00:42:12.060
But to take it to the next level,
we've got a bunch of features in Xcode

00:42:12.210 --> 00:42:13.440
that will make you more productive.

00:42:13.590 --> 00:42:15.900
SDKs.

00:42:15.900 --> 00:42:17.840
Now you can develop for 10.4.

00:42:17.840 --> 00:42:19.260
You can develop for Tiger on 10.3.

00:42:19.260 --> 00:42:21.510
You can develop for 10.3 on Tiger.

00:42:21.650 --> 00:42:22.630
Fix and continue.

00:42:22.820 --> 00:42:28.390
Being able to edit your code and
make changes while debugging.

00:42:28.500 --> 00:42:30.400
Integrated documentation.

00:42:30.400 --> 00:42:32.450
We have great documentation support.

00:42:32.520 --> 00:42:33.360
I mean, it's awesome.

00:42:33.360 --> 00:42:36.480
You can get to almost anything in
the ADC just directly from Xcode.

00:42:36.710 --> 00:42:38.160
And it's integrated even
into your source code.

00:42:38.160 --> 00:42:42.390
So you double click on a symbol
that's in Cocoa or Carbon or wherever,

00:42:42.390 --> 00:42:43.960
we'll take you right--
option double click,

00:42:43.960 --> 00:42:46.310
and we'll take you right
to the documentation.

00:42:46.430 --> 00:42:47.230
Distributed builds.

00:42:47.280 --> 00:42:50.070
Especially if you have a lot of machines,
some of which aren't being used.

00:42:50.120 --> 00:42:52.720
This is a great way to
utilize idle processor time

00:42:53.060 --> 00:42:54.220
to make your builds faster.

00:42:54.240 --> 00:42:55.440
Don't just use your own machine.

00:42:55.440 --> 00:42:57.760
Use everyone else's machine, too.

00:42:57.770 --> 00:42:58.800
SCM integration.

00:42:58.920 --> 00:43:01.460
Like we said earlier,
we've added support for Subversion.

00:43:01.540 --> 00:43:05.060
So now we support CVS, Perforce,
and Subversion.

00:43:05.160 --> 00:43:06.600
And they're all integrated the same way.

00:43:06.600 --> 00:43:09.930
You don't have different
UIs for different systems.

00:43:10.350 --> 00:43:11.640
Command Line Build Support.

00:43:11.640 --> 00:43:14.190
Xcode Build is a great way to
do automated nightly builds or

00:43:14.190 --> 00:43:17.220
provide scripts that allow you to
automate your process so you're

00:43:17.220 --> 00:43:20.440
not always having to sit in front
of the IDE just to get a build out.

00:43:20.520 --> 00:43:23.160
And finally, Xcode is Apple Scriptable.

00:43:23.160 --> 00:43:25.440
It's not fully there,
but we've added the beginning

00:43:25.440 --> 00:43:29.420
so you can do things like build,
you can modify projects,

00:43:29.510 --> 00:43:30.860
you can look at properties.

00:43:30.940 --> 00:43:32.160
And we definitely would
like feedback here.

00:43:32.160 --> 00:43:33.440
What's missing that you want?

00:43:33.580 --> 00:43:37.960
Because we want to make this really
usable so that you can use it to make

00:43:37.960 --> 00:43:42.530
yourselves more productive and spend less
time having to do these mundane tasks.

00:43:42.590 --> 00:43:44.690
So, in summary.

00:43:46.500 --> 00:43:48.640
So in summary,
moving your project to Xcode is easy.

00:43:48.960 --> 00:43:50.250
For many cases, it's automated.

00:43:50.360 --> 00:43:53.400
For example, Code Warrior,
Project Builder, Project Builder Woe.

00:43:53.430 --> 00:43:55.800
Other projects need
some more hand-holding.

00:43:55.800 --> 00:43:57.620
They may have to be imported manually.

00:43:57.650 --> 00:44:03.130
Make, Ant, Jam, and as we said,
Visual Studio, other systems you may

00:44:03.130 --> 00:44:04.590
have to develop manually.

00:44:04.740 --> 00:44:06.120
Be aware of compiler differences.

00:44:06.120 --> 00:44:08.210
I went over just some
high-level items there.

00:44:08.260 --> 00:44:11.260
But what I found,
I used to work on what's

00:44:11.370 --> 00:44:14.060
called the DTSWAT team,
where we would help people move

00:44:14.470 --> 00:44:18.740
over from Code Warrior to Xcode,
from Mac OS 9 to Mac OS X, et cetera.

00:44:18.780 --> 00:44:20.480
A lot of time was spent
with the compiler.

00:44:20.600 --> 00:44:23.080
So don't just-- the
import is the first step.

00:44:23.080 --> 00:44:26.220
Respect the fact that you're going
to be moving to a different compiler,

00:44:26.220 --> 00:44:27.470
and there may be differences.

00:44:27.730 --> 00:44:30.690
Even if you're already a Unix program,
respect the fact that you are

00:44:30.690 --> 00:44:31.840
moving to a different platform.

00:44:31.840 --> 00:44:34.000
Don't just assume that it's all
just going to come together.

00:44:34.000 --> 00:44:36.190
It's just all magically going to build.

00:44:36.600 --> 00:44:39.370
And then finally,
once you've gotten there,

00:44:39.370 --> 00:44:42.170
once you've got something
that's building,

00:44:42.170 --> 00:44:43.940
Xcode is easy to leverage.

00:44:43.940 --> 00:44:46.710
You know,
you have the flexibility to adjust

00:44:46.780 --> 00:44:50.360
Xcode to how you want to use it,
but it also provides you the

00:44:50.360 --> 00:44:54.220
power to improve your existing
workflow so that you can then go

00:44:54.220 --> 00:44:58.210
and make those Xcode -- you know,
make those improvements so that

00:44:58.210 --> 00:45:02.570
you'll run even better on Mac OS X,
so you can take advantage of things

00:45:02.570 --> 00:45:02.990
like AltaVec and Searchlight and WebKit,
et cetera.

00:45:03.980 --> 00:45:06.660
So some documentation,
I mentioned earlier.

00:45:06.660 --> 00:45:09.210
The first thing obviously is Xcode help.

00:45:09.390 --> 00:45:10.620
It's right up in the Help menu.

00:45:10.720 --> 00:45:11.930
It's the first item, Xcode help.

00:45:12.040 --> 00:45:14.750
This will provide you
documentation on how to use Xcode.

00:45:14.830 --> 00:45:16.640
That's the first place you should
probably go when you have a

00:45:16.680 --> 00:45:18.300
question about how something works.

00:45:18.560 --> 00:45:21.660
If you're moving from CodeWare to Xcode,
we have some awesome documentation

00:45:21.660 --> 00:45:24.110
about moving from CodeWare to Xcode.

00:45:24.270 --> 00:45:26.800
It's in the installed
Tiger docs on your system.

00:45:26.880 --> 00:45:29.930
Also,
porting Linux applications to Mac OS X.

00:45:30.260 --> 00:45:32.400
And then finally,
the Mac OS X technology overview.

00:45:32.400 --> 00:45:34.460
I strongly encourage
everyone to read this.

00:45:34.520 --> 00:45:37.760
It contains a lot of basic
information about how Mac OS X works.

00:45:37.840 --> 00:45:40.280
And you may think, oh,
I don't need to understand that now.

00:45:40.510 --> 00:45:42.420
But trust me,
it'll go over things like file

00:45:42.420 --> 00:45:45.640
packages and all the basics,
frameworks, and just give you a better

00:45:45.780 --> 00:45:49.210
feel for how things work,
especially if you're new to the platform.

00:45:49.690 --> 00:45:50.400
So who to contact.

00:45:50.400 --> 00:45:52.260
If you have issues and you
need to talk to someone,

00:45:52.260 --> 00:45:53.890
I encourage you to
contact Matthew Formica,

00:45:53.890 --> 00:45:55.840
who is the Cocoa and
Developer Tools Evangelist.