WEBVTT

00:00:12.270 --> 00:00:13.700
and Chris Apple.

00:00:13.700 --> 00:00:16.200
We're going to be talking today
about data synchronization.

00:00:16.690 --> 00:00:17.110
Hello.

00:00:17.600 --> 00:00:19.680
Oops,

00:00:19.980 --> 00:00:23.740
Okay, this is the second talk
on Data Synchronization.

00:00:23.740 --> 00:00:28.450
The first talk covered the architecture,
kind of the core concepts and the API.

00:00:28.960 --> 00:00:32.280
Talked a lot about basically
what Sync Services is,

00:00:32.280 --> 00:00:34.500
all the different parts
and what it means.

00:00:34.500 --> 00:00:36.960
This talk's a bit more of a how-to.

00:00:36.960 --> 00:00:41.070
How do you take an application
and get it to synchronize data?

00:00:41.750 --> 00:00:44.670
Now, there's going to be a little bit
of overlap from the first talk,

00:00:44.780 --> 00:00:47.080
so I don't know if anybody
was at the previous talk.

00:00:47.170 --> 00:00:48.950
If you were,
feel free to doze off a little

00:00:48.950 --> 00:00:50.290
bit as I go over things.

00:00:50.290 --> 00:00:54.190
But I do want to make sure that we
frame all the context and all the

00:00:54.300 --> 00:00:56.690
concepts so that it all makes sense.

00:00:58.900 --> 00:01:02.160
So let's talk about Sync Services,
what it is.

00:01:02.270 --> 00:01:05.800
Initially, we had three applications
that you could synchronize,

00:01:05.840 --> 00:01:09.100
or three data types: contacts, calendars,
and bookmarks.

00:01:09.150 --> 00:01:12.640
You could also synchronize
these to devices,

00:01:13.240 --> 00:01:18.600
phones, iPod, and you could synchronize
them up to .Mac.

00:01:18.600 --> 00:01:21.480
Now what we've added is the
ability for you to synchronize

00:01:21.480 --> 00:01:23.640
your own custom applications.

00:01:23.640 --> 00:01:26.860
So you can take your app and
you can synchronize your data.

00:01:26.860 --> 00:01:29.860
You can either synchronize
with the existing types of

00:01:29.930 --> 00:01:33.230
data we already provide,
so you can kind of join in on the party,

00:01:33.410 --> 00:01:36.890
or you can sync your own data
and you can get it up to .Mac

00:01:36.890 --> 00:01:38.990
and across to other machines.

00:01:40.100 --> 00:01:42.340
So what are we going to show you today?

00:01:42.480 --> 00:01:44.880
We're going to go over a
review of the syncing concepts.

00:01:45.060 --> 00:01:47.680
This will be a bit of a refresher
if you saw the previous talk or

00:01:47.680 --> 00:01:50.000
have read about some of this before.

00:01:50.110 --> 00:01:53.000
But I want to make sure that I cover
the basic concepts so you know

00:01:53.000 --> 00:01:55.670
basically what I'm talking about.

00:01:55.860 --> 00:01:59.160
I'm going to talk about what you
need to do in an application.

00:01:59.220 --> 00:02:00.790
I want to make sure I cover the what.

00:02:00.800 --> 00:02:02.800
What is it that you're doing?

00:02:02.960 --> 00:02:06.790
We'll give you a demo that will highlight
and illustrate what we just told you.

00:02:06.800 --> 00:02:10.890
So first I'll tell you what to do,
then we'll show you what that looks like,

00:02:11.020 --> 00:02:12.800
and then what I'm going to
do is cover how to do it.

00:02:12.800 --> 00:02:17.290
We'll show some small code snippets
and we'll talk about exactly

00:02:17.290 --> 00:02:19.470
how you do all these things.

00:02:20.970 --> 00:02:24.700
When you walk away from here,
this is what I want you to take with you.

00:02:24.770 --> 00:02:27.610
I want to make sure that I'm covering
enough of the overall architecture that

00:02:27.610 --> 00:02:31.810
you understand what Sync Services is,
and that you understand what it means

00:02:32.230 --> 00:02:35.040
for your application to be synchronizing.

00:02:35.080 --> 00:02:39.370
That consists of three main things:
how to work with schemas,

00:02:39.370 --> 00:02:40.660
if I can get that to highlight.

00:02:41.680 --> 00:02:44.250
Data schemas are used to identify
the different types of data

00:02:44.260 --> 00:02:45.780
that you'll be synchronizing.

00:02:45.880 --> 00:02:48.650
So we're going to cover how you can
make your own schema and how to use

00:02:48.650 --> 00:02:51.420
schemas that are already in the system.

00:02:51.860 --> 00:02:53.800
How do you manage a sync session?

00:02:53.800 --> 00:02:54.800
This is the core of the talk.

00:02:54.800 --> 00:02:57.750
What do you do when you're
actually synchronizing your data?

00:02:57.750 --> 00:03:00.800
We'll go into that in pretty good detail.

00:03:00.800 --> 00:03:03.800
We're going to talk a lot today, tonight,
seems dark in here.

00:03:03.800 --> 00:03:07.790
We're going to talk a lot
about how you trickle sync.

00:03:08.000 --> 00:03:13.250
Trickle syncing is a way to basically
push small bits of data very frequently

00:03:13.840 --> 00:03:16.980
so that from the user's perspective,
their data is just

00:03:17.070 --> 00:03:18.900
constantly trickling out.

00:03:18.900 --> 00:03:20.900
When you make changes
in your application,

00:03:20.900 --> 00:03:23.900
you want to trickle the
changes out as soon as you can.

00:03:23.900 --> 00:03:26.900
And when changes are made in other
applications that you're syncing with,

00:03:26.920 --> 00:03:31.890
you want to be able to pull those
changes in transparently to the user.

00:03:32.040 --> 00:03:33.720
I'm going to cover a
little bit of terminology.

00:03:33.850 --> 00:03:36.960
Clearly, we need to define our terms,
so we'll introduce some of

00:03:36.960 --> 00:03:39.000
that as we go through the talk.

00:03:39.260 --> 00:03:43.000
And I'm also going to talk
a bit about best practices.

00:03:43.000 --> 00:03:47.550
By that I mean things that you can do
in an application in order to provide

00:03:47.550 --> 00:03:49.000
the user with the best experience.

00:03:49.000 --> 00:03:52.310
Things that you can do so
that syncing goes smoothly,

00:03:52.800 --> 00:03:54.990
fairly transparently,
and so that when problems occur,

00:03:55.050 --> 00:03:58.870
the user has choices on what they can do.

00:04:01.100 --> 00:05:33.200
[Transcript missing]

00:05:33.380 --> 00:05:37.090
Each user on each machine
will have a truth database.

00:05:37.370 --> 00:05:40.940
That means if you,
as a specific MacÂ OS user,

00:05:41.030 --> 00:05:43.260
have two different machines
that you're syncing,

00:05:43.330 --> 00:05:46.440
you'll have a truth
database on each machine.

00:05:46.550 --> 00:05:49.680
And if you have more than
one user on a machine,

00:05:49.760 --> 00:05:53.060
each one of those users has
their own truth database.

00:05:53.180 --> 00:05:55.690
And the truth is an aggregate.

00:05:55.780 --> 00:05:59.720
It's an aggregate of all the data
that's synced by every client.

00:05:59.830 --> 00:06:02.260
So although your client
might be syncing some data,

00:06:02.350 --> 00:06:05.740
you might not sync every
field or attribute that's in

00:06:05.880 --> 00:06:07.780
a certain set of record types.

00:06:07.830 --> 00:06:11.000
You might sync contacts,
but you only sync a few of the fields.

00:06:11.130 --> 00:06:14.130
There might be a richer client
that syncs many more fields.

00:06:14.230 --> 00:06:17.440
So the aggregate is the
combination of everything,

00:06:17.520 --> 00:06:20.590
even if your client
isn't synchronizing it.

00:06:22.590 --> 00:06:28.790
We have three main sync modes: Fast Sync,
Slow Sync, and Refresh.

00:06:28.800 --> 00:06:30.760
Fast Sync is the most desirable.

00:06:30.960 --> 00:06:35.490
That's done when what you want to push
is just the changes from the last sync.

00:06:35.500 --> 00:06:39.570
If you're able to keep track of
deltas between sync operations,

00:06:39.570 --> 00:06:43.500
then when you synchronize,
you can just push up changes.

00:06:43.610 --> 00:06:47.450
Added this record, deleted this record,
made a mod to this record.

00:06:47.500 --> 00:06:51.140
So you push up little changes,
and then you pull down from the

00:06:51.150 --> 00:06:53.500
engine only what's changed there.

00:06:53.500 --> 00:06:56.330
If you don't keep track of the deltas,
or if it's the very first

00:06:56.360 --> 00:07:00.490
time you're syncing,
you'll need to do a slow sync.

00:07:00.500 --> 00:07:04.500
When you do a slow sync,
you push up all of your records.

00:07:04.500 --> 00:07:07.500
What the engine does is it looks at
all the records you're pushing up

00:07:07.500 --> 00:07:12.500
and compares them to the last set of
records that your client had pushed.

00:07:12.540 --> 00:07:15.760
If you don't push a record up
that you had previously sent,

00:07:15.760 --> 00:07:17.270
that's treated as a delete.

00:07:17.500 --> 00:07:22.480
It also compares all the fields so it
can tell what records have changed.

00:07:22.500 --> 00:07:24.970
This is clearly a fairly
expensive operation,

00:07:24.970 --> 00:07:27.490
especially if you have
thousands of records.

00:07:27.500 --> 00:07:31.270
So it's always more desirable
to do a fast sync when you can.

00:07:31.500 --> 00:07:34.500
But there are a few cases where
you'll have to do a slow sync,

00:07:34.500 --> 00:07:38.590
and I'll talk about that in a little
more detail as we go through the slides.

00:07:38.760 --> 00:07:41.340
Finally, you can do a refresh sync.

00:07:41.400 --> 00:07:45.140
This is typically done when you've
lost all the data on your machine

00:07:45.140 --> 00:07:49.100
or you've lost all semblance of
state regarding your sync sessions.

00:07:49.270 --> 00:07:51.990
If this happens,
you can tell the sync server,

00:07:52.070 --> 00:07:54.530
"Forget anything you ever knew about me.

00:07:54.600 --> 00:07:55.960
I'm just going to refresh.

00:07:55.960 --> 00:07:59.500
We're going to start over as if we've
never synced before." Typically,

00:07:59.500 --> 00:08:02.790
you'll be doing that to pull
everything down from the engine

00:08:02.790 --> 00:08:04.560
so you can reset your state.

00:08:04.680 --> 00:08:07.260
But there are cases where you
might have added a few records and

00:08:07.290 --> 00:08:11.600
you want to also push those up to
the engine but still do a refresh.

00:08:11.600 --> 00:08:13.920
For instance,
you may have lost a battery or power

00:08:13.920 --> 00:08:15.460
in a phone and lost all the data.

00:08:15.500 --> 00:08:18.860
But you're traveling and you've
added a couple new contacts,

00:08:18.940 --> 00:08:21.550
so you've just got two
contacts on this phone.

00:08:21.550 --> 00:08:24.040
You tell the engine to do a refresh sync.

00:08:24.410 --> 00:08:26.160
You just push up your two contacts.

00:08:26.460 --> 00:08:29.060
They're added and all of the
contacts that had initially

00:08:29.060 --> 00:08:33.030
been in the sync engine are
pushed back down to your phone.

00:08:33.120 --> 00:08:37.340
So with these different modes of syncing,
we give you the performance

00:08:37.340 --> 00:08:40.060
when you need it,
we also provide security that

00:08:40.070 --> 00:08:43.490
you'll always be able to recover
all your data and that you'll

00:08:43.500 --> 00:08:45.480
always be able to sync every record.

00:08:45.490 --> 00:08:48.790
Most important thing when
you're syncing is correctness.

00:08:49.120 --> 00:08:50.640
Second most important is speed.

00:08:50.950 --> 00:08:53.880
And most users are going to think
the most important thing is speed,

00:08:53.880 --> 00:08:56.610
especially when things are
slow and take a long time.

00:08:56.740 --> 00:08:58.820
But trust me,
the minute you lose some of their data,

00:08:58.820 --> 00:09:01.550
they're going to realize
what was most important,

00:09:01.550 --> 00:09:03.170
and that's being correct.

00:09:03.610 --> 00:09:04.320
Oh, I'm sorry.

00:09:04.380 --> 00:09:05.740
I was supposed to show you that before.

00:09:05.740 --> 00:09:09.380
I'll be doing that throughout the talk,
so get used to it.

00:09:09.640 --> 00:09:13.280
There's one other mode of syncing,
which we call Trickle Sync.

00:09:13.530 --> 00:09:16.600
And it's not really a mode in the
same sense as the other three.

00:09:16.600 --> 00:09:18.030
It's more like a way of life.

00:09:18.030 --> 00:09:21.280
For your application,
if you Trickle Sync,

00:09:21.330 --> 00:09:23.640
you routinely Fast Sync.

00:09:23.640 --> 00:09:27.510
And there's a number of different places,
opportune moments when your

00:09:27.510 --> 00:09:29.320
application can do a Fast Sync.

00:09:29.400 --> 00:09:33.250
You try to do it in the background,
make it transparent to the user.

00:09:33.680 --> 00:09:37.200
And one important point,
an application probably shouldn't ever

00:09:37.200 --> 00:09:39.500
synchronize unless a user's told it to.

00:09:39.500 --> 00:09:43.740
So when your application starts for the
first time and the user starts to use it,

00:09:43.800 --> 00:09:47.540
you should provide them some
configuration so that they can say,

00:09:47.540 --> 00:09:49.360
yes, I want to sync my data.

00:09:49.360 --> 00:09:52.450
Now, at that point when they do,
they've given you carte blanche

00:09:52.540 --> 00:09:54.000
to sync it whenever you want.

00:09:54.080 --> 00:09:58.080
So you should go off and sync
small changes frequently.

00:09:58.160 --> 00:10:01.620
We talked in the previous
presentation about how the

00:10:01.660 --> 00:10:05.660
more frequently you can sync,
the less data you have to sync each time.

00:10:05.660 --> 00:10:09.310
So it's more like a continuous flow that
doesn't put much load on the system.

00:10:09.320 --> 00:10:11.730
It doesn't seem to take
a long time for the user,

00:10:11.730 --> 00:10:14.660
and it keeps things
synchronized more expediently.

00:10:14.680 --> 00:10:17.950
If you make changes in your app
and push them out right away,

00:10:17.960 --> 00:10:21.570
they're available to other applications
and available to get pushed up

00:10:21.570 --> 00:10:23.320
to .Mac right then and there.

00:10:23.320 --> 00:10:26.580
Similarly, when changes are made
in other applications,

00:10:26.580 --> 00:10:29.920
you'll be notified and you want to
pull them in as soon as you can so

00:10:30.110 --> 00:10:33.270
you always have the most up-to-date
representation for the user.

00:10:36.300 --> 00:10:40.100
So let's talk about what you need
to do in an application to sync it.

00:10:40.270 --> 00:10:43.480
What are the five most important things,
the five main things?

00:10:43.510 --> 00:10:47.500
I've grouped what I think are the core
fundamental pieces that you're going to

00:10:47.630 --> 00:10:50.140
have to put into an application to sync.

00:10:50.140 --> 00:10:53.410
The first one is setting
up a data schema.

00:10:54.160 --> 00:10:57.460
A data schema represents the
type of records that you'll be

00:10:57.460 --> 00:11:00.900
syncing in a canonical format
the engine can understand.

00:11:00.950 --> 00:11:03.550
This is important for a few reasons.

00:11:03.710 --> 00:11:06.650
Most applications have their
own way of representing data.

00:11:06.930 --> 00:11:08.810
You could use objects all the way down.

00:11:09.010 --> 00:11:11.580
You might archive them
or store them in a graph.

00:11:11.610 --> 00:11:15.680
You might just have a simple text file,
comma separated values.

00:11:15.900 --> 00:11:17.840
You could be using a database.

00:11:17.960 --> 00:11:20.780
And all of these things are
going to be different for your

00:11:20.780 --> 00:11:23.450
application from other applications.

00:11:23.450 --> 00:11:28.120
But the engine needs to know one
specific way of representing this data.

00:11:28.240 --> 00:11:31.940
So you'll define in a data schema
the set of entity types that

00:11:31.940 --> 00:11:34.180
you're going to be synchronizing.

00:11:34.180 --> 00:11:38.240
An entity is kind of like class for
objects and instances of classes.

00:11:38.300 --> 00:11:42.290
An entity is the type of object and
it will have a set of attributes.

00:11:42.390 --> 00:11:45.770
So when you sync contacts,
you'll define a contact entity,

00:11:45.770 --> 00:11:48.700
a phone number entity,
and you'll define all

00:11:48.700 --> 00:11:50.240
of this in a schema.

00:11:50.240 --> 00:11:52.420
And you'll define a schema
that can be used by the engine.

00:11:52.430 --> 00:11:55.270
Another important point about this,
when you sync,

00:11:55.270 --> 00:11:58.790
you're not just syncing your
application to the sync engine.

00:11:58.930 --> 00:12:02.300
You're syncing with every
other client that synchronizes.

00:12:02.320 --> 00:12:05.250
Those clients don't want to know how
you represent your data and you don't

00:12:05.250 --> 00:12:08.050
want to have to know how all these
other clients represent their data.

00:12:08.050 --> 00:12:10.960
You don't want to have to know how
data is represented on a phone.

00:12:11.020 --> 00:12:13.980
You don't want to know how
it's represented on a server.

00:12:14.060 --> 00:12:15.280
And you don't need to.

00:12:15.280 --> 00:12:18.580
You just need to know one way to
represent it and that's the way

00:12:18.580 --> 00:12:20.000
that's defined in the schema.

00:12:20.000 --> 00:12:21.260
Amen.

00:12:22.100 --> 00:12:25.300
Second thing you have to do
is configure your application.

00:12:25.330 --> 00:12:27.600
You could have the greatest
sync client in the world.

00:12:27.620 --> 00:12:30.300
If you don't configure it,
nobody's going to know about it.

00:12:30.330 --> 00:12:31.960
It's never going to run.

00:12:32.000 --> 00:12:34.250
Configuration is actually fairly simple.

00:12:34.370 --> 00:12:38.200
It's a combination of a static file
that defines some properties and a

00:12:38.200 --> 00:12:40.800
very small bit of API that you use.

00:12:40.950 --> 00:12:44.070
By configuring your client,
you're registering it with the engine,

00:12:44.430 --> 00:12:48.030
making sure that the data schemas
that you want to use are registered,

00:12:48.070 --> 00:12:50.980
and specifying any alerts that
you might want to get when

00:12:50.980 --> 00:12:52.460
other clients synchronize.

00:12:52.460 --> 00:12:54.090
It's pretty straightforward.

00:12:54.270 --> 00:12:58.790
The fun stuff is the actual
syncing control flow.

00:12:59.010 --> 00:13:02.400
We have a syncing state
machine API that you use.

00:13:02.510 --> 00:13:05.340
We have a fairly
object-oriented API in general,

00:13:05.380 --> 00:13:08.900
but the actual act of data
synchronization is a state machine.

00:13:08.900 --> 00:13:13.900
It's a procedural API with methods
you invoke on a sync session object.

00:13:13.950 --> 00:13:18.900
We went with a state machine with
a procedural API for flexibility.

00:13:18.910 --> 00:13:21.790
By providing an API like this,
there's a lot of different

00:13:21.800 --> 00:13:24.960
junctures and points where you
can opt in and out of the sync,

00:13:24.960 --> 00:13:27.900
and you have a lot of flexibility
on how you want to do the sync.

00:13:27.900 --> 00:13:31.200
If you get involved in a sync
operation that starts to take too long

00:13:31.200 --> 00:13:34.750
because other clients are also syncing
and they're taking a long time,

00:13:34.750 --> 00:13:36.830
you can opt out of the sync.

00:13:36.900 --> 00:13:39.820
You can cancel a sync if
something goes wrong at any time.

00:13:39.950 --> 00:13:42.420
You can complete it in the
middle and take up where you

00:13:42.420 --> 00:13:43.900
left off on the next sync.

00:13:43.900 --> 00:13:47.520
You have to do the sync steps in
the order we're showing you here,

00:13:47.520 --> 00:13:51.670
but other than that, you can leave after
you push your changes.

00:13:51.970 --> 00:13:53.900
You can stop syncing before
you pull anything down,

00:13:53.900 --> 00:13:55.830
or you can go all the way through.

00:13:55.910 --> 00:13:56.850
It's up to your application.

00:13:56.900 --> 00:13:58.350
application.

00:13:58.950 --> 00:14:01.850
I talked before about having a
data schema to represent your

00:14:01.900 --> 00:14:03.750
data in a canonical format.

00:14:03.840 --> 00:14:05.270
That's kind of the class.

00:14:05.470 --> 00:14:06.590
This is the object.

00:14:06.900 --> 00:14:10.560
When you take any of your data and want
to transform it over to the Sync Engine,

00:14:10.560 --> 00:14:14.100
you'll be creating essentially instances,
which we call records,

00:14:14.270 --> 00:14:16.920
of the schema types that you've defined.

00:14:17.070 --> 00:14:20.440
When you are pushing records up,
you take the records or the

00:14:20.440 --> 00:14:24.240
objects in your application,
you transform them into records

00:14:24.240 --> 00:14:27.910
based on the data schema,
and these are essentially NSDictionary's.

00:14:28.220 --> 00:14:30.310
You push these dictionaries
into the Engine,

00:14:30.350 --> 00:14:34.350
and when you get changes back,
you'll be taking dictionaries or sets

00:14:34.360 --> 00:14:38.310
of field changes that are represented
in something we call an iSync change,

00:14:38.310 --> 00:14:44.700
and you'll be transforming that back
into your own record types for your app.

00:14:44.700 --> 00:14:49.080
Finally, for fast syncing,
you need to do some state management.

00:14:49.150 --> 00:14:51.620
If you want to fast sync,
you have to keep track of the

00:14:51.620 --> 00:14:55.010
differences between the first sync
or the previous sync you did and

00:14:55.110 --> 00:14:57.940
the current state of your data.

00:14:57.940 --> 00:15:02.040
This is for both adds and deletes,
modifies being somewhat

00:15:02.110 --> 00:15:03.500
of a special case of add.

00:15:03.620 --> 00:15:05.760
If you've modified a
record or added a record,

00:15:06.040 --> 00:15:07.140
you can put it on a list.

00:15:07.140 --> 00:15:10.300
When you delete a record,
you can put the ID in a list.

00:15:10.330 --> 00:15:12.650
When you go to sync,
you just consult these lists,

00:15:12.650 --> 00:15:15.170
and that's all you'll have
to hand to the Engine.

00:15:15.200 --> 00:15:18.220
I added this, I modified this,
I deleted this.

00:15:18.220 --> 00:15:20.740
If you don't do that,
you'll have to give the

00:15:20.750 --> 00:15:21.770
Engine every record.

00:15:21.770 --> 00:15:25.600
So there's a few different ways
that you can maintain a state.

00:15:25.710 --> 00:15:28.320
You could keep time stamps
on all your records.

00:15:28.320 --> 00:15:30.510
You could keep a dirty
bit on the records.

00:15:30.510 --> 00:15:33.920
You could have a list of
what records you've changed.

00:15:34.030 --> 00:15:37.360
What you do is going to be something that
you'll choose that's most appropriate

00:15:37.520 --> 00:15:39.660
for your application's data model.

00:15:39.740 --> 00:15:43.980
I find typically keeping a list of
what's changed is very straightforward.

00:15:44.000 --> 00:15:47.090
You'll also want to save that
list in a file if you quit out of

00:15:47.090 --> 00:15:49.310
your application without syncing.

00:15:49.430 --> 00:15:52.460
That way, when you restore your
application the next time,

00:15:52.460 --> 00:15:54.180
you'll still remember the delta.

00:15:54.230 --> 00:15:56.720
so you'll know what you can sync.

00:15:59.230 --> 00:16:03.000
There's a few other things that
you can do too when you're syncing.

00:16:03.120 --> 00:16:04.530
You're an application.

00:16:04.680 --> 00:16:07.840
Whenever an application does anything,
you shouldn't just go off

00:16:07.920 --> 00:16:10.440
and do something without the
user knowing what's going on.

00:16:10.550 --> 00:16:13.230
So you need to provide
some sort of feedback.

00:16:13.340 --> 00:16:15.660
Most sync operations will
hopefully be very brief.

00:16:15.780 --> 00:16:19.460
Some of them might be so fast that
the user couldn't even detect them.

00:16:19.580 --> 00:16:22.060
But others may take a
few seconds or longer.

00:16:22.190 --> 00:16:25.420
So if you're engaged in
any kind of sync operation,

00:16:25.570 --> 00:16:29.840
make sure that you put some animation
up so the user knows what's going on.

00:16:29.910 --> 00:16:31.970
You can use a spinning bar animation.

00:16:32.160 --> 00:16:33.770
You could put up a status pane.

00:16:33.860 --> 00:16:36.630
You could just put some status
text somewhere so the user can

00:16:36.740 --> 00:16:38.320
look and see what's happening.

00:16:38.670 --> 00:16:42.030
Users tend to get very annoyed
if an app becomes unresponsive.

00:16:42.180 --> 00:16:44.500
If you're syncing in the main
loop of your application,

00:16:44.500 --> 00:16:47.680
the user might be clicking in a
text field trying to do something.

00:16:47.920 --> 00:16:50.240
Even if it's just a
second or two seconds,

00:16:50.310 --> 00:16:53.200
it'll get kind of confounding to
someone that's trying to use your

00:16:53.200 --> 00:16:55.070
application if it doesn't respond.

00:16:55.300 --> 00:16:58.420
But if they see something spinning,
that's kind of a cue.

00:16:58.440 --> 00:16:59.850
Okay, something's going on here.

00:16:59.860 --> 00:17:04.160
And they'll get used to seeing that,
and it'll be less troublesome for them.

00:17:04.160 --> 00:17:06.300
I mentioned before about trickle syncing.

00:17:06.710 --> 00:17:10.040
Sync often and then try to sync fast.

00:17:10.040 --> 00:17:13.060
If you can do that in an application,
it's gonna be a much smoother

00:17:13.060 --> 00:17:14.580
experience for the user.

00:17:15.830 --> 00:17:17.820
So I just told you what you have to do.

00:17:17.850 --> 00:17:19.700
But there's a lot of things
you don't have to do.

00:17:19.700 --> 00:17:21.630
You're probably thinking, "Boy,
I have to do all these things.

00:17:21.740 --> 00:17:25.350
What did you guys do?" Well,
we actually did quite a lot.

00:17:25.350 --> 00:17:27.890
And I think we did a lot of the
heavy lifting so that we're going

00:17:27.890 --> 00:17:31.190
to make it fairly straightforward
for an application to synchronize.

00:17:31.200 --> 00:17:34.610
And these things that you don't
have to do are fairly complex.

00:17:34.950 --> 00:17:37.190
First one is conflict management.

00:17:37.190 --> 00:17:40.700
You don't have to worry about
conflicts between different sources.

00:17:40.710 --> 00:17:44.200
In fact, you can treat syncing almost
as if you're in isolation.

00:17:44.450 --> 00:17:46.700
Your application just
syncs into the engine.

00:17:46.700 --> 00:17:49.700
If there's conflicts with
records for other clients,

00:17:49.700 --> 00:17:50.700
we'll take care of that.

00:17:50.700 --> 00:17:53.700
We'll notice the conflicts,
we'll keep track of them,

00:17:53.700 --> 00:17:56.700
we'll present UI to the
user to resolve them,

00:17:56.700 --> 00:18:00.200
and then we'll handle merging
in the conflicts correctly.

00:18:00.240 --> 00:18:03.700
Also, you don't need to present
what will change to a user.

00:18:03.700 --> 00:18:05.700
If you're going to
make a hundred changes,

00:18:05.700 --> 00:18:07.620
if you're going to remove
a thousand records,

00:18:07.770 --> 00:18:10.200
we'll pop up something we call an airbag.

00:18:10.200 --> 00:18:12.640
It's an opportunity for the
user to opt out of that sync.

00:18:12.710 --> 00:18:15.910
We'll tell them,
"These changes are about to be made

00:18:15.910 --> 00:18:19.130
by this sync client." So you won't
have to worry about doing anything

00:18:19.230 --> 00:18:23.700
to notify the user about changes
that you're making due to a sync.

00:18:23.810 --> 00:18:27.180
You don't have to detect
duplicate records.

00:18:27.410 --> 00:18:30.000
Sometimes when you sync two
sources for the first time,

00:18:30.000 --> 00:18:32.680
in a very common case, is a phone,
an address book,

00:18:32.680 --> 00:18:36.120
or a phone with calendar data,
and a calendar, you'll have the same

00:18:36.120 --> 00:18:39.440
record on both devices,
or on both clients.

00:18:39.570 --> 00:18:43.860
We'll detect if those are duplicates,
and we'll handle merging them together

00:18:43.860 --> 00:18:45.700
to present them as one unified record.

00:18:45.800 --> 00:18:48.970
So you won't end up duplicating every
contact you have just because you

00:18:49.070 --> 00:18:54.110
synchronized a phone that happened to
have all the same contacts on it already.

00:18:54.600 --> 00:18:58.190
You don't really have to pay attention
to other clients or worry about .Mac.

00:18:58.240 --> 00:19:01.830
We've got a decoupled architecture
regarding all the clients.

00:19:01.920 --> 00:19:04.380
Your client just syncs to the engine.

00:19:04.380 --> 00:19:05.640
You worry about that.

00:19:05.700 --> 00:19:08.520
If you get that right,
we'll fan all of your changes

00:19:08.530 --> 00:19:09.680
out to the other clients.

00:19:09.720 --> 00:19:11.980
We'll get the changes from them into you.

00:19:11.980 --> 00:19:13.310
We'll take care of everything.

00:19:13.400 --> 00:19:16.600
You don't have to do anything
special to sync to .Mac.

00:19:16.660 --> 00:19:20.520
.Mac will automatically be able
to sync your data types up and

00:19:20.530 --> 00:19:23.930
down to other machines as long as
you've defined a schema for them.

00:19:26.630 --> 00:19:29.350
Okay, now I'm going to bring
Nancy Craighill up to do a demo.

00:19:29.480 --> 00:19:33.380
She's going to illustrate many of
the things I just talked about.

00:19:35.020 --> 00:19:36.000
You wired up?

00:19:36.000 --> 00:19:40.000
The clicker, please.

00:19:41.600 --> 00:19:42.500
: Sorry.

00:19:42.500 --> 00:19:43.600
I like it.

00:19:43.610 --> 00:19:47.480
Then we'll go to the slides first.

00:19:48.530 --> 00:19:51.590
So we want you to feel confident
when you leave the session that you

00:19:51.640 --> 00:19:53.520
too can write syncable applications.

00:19:53.540 --> 00:19:55.560
So we did select a little
more sophisticated example,

00:19:55.560 --> 00:19:57.900
not a trivial one,
so you can get the most

00:19:57.980 --> 00:19:59.100
out of this session.

00:19:59.100 --> 00:20:01.700
And also when you're watching the
demo and the rest of Gordie's slides,

00:20:01.720 --> 00:20:05.750
I think it's time to begin to think
about how you might modify your existing

00:20:05.750 --> 00:20:10.730
apps to sync and how you might create
a new application that's syncable.

00:20:11.480 --> 00:20:12.950
Okay,
so what you're going to learn from the

00:20:12.950 --> 00:20:16.980
demo and the rest of the talk really
is how to sync your custom objects.

00:20:17.100 --> 00:20:21.520
You can sync, like Toby and Gordie said,
you can sync all the contacts

00:20:21.520 --> 00:20:26.940
and calendars and bookmarks,
but we think it's a lot more exciting

00:20:26.940 --> 00:20:30.400
if you create your own object
models and you sync those objects.

00:20:30.400 --> 00:20:35.140
You're going to learn how to sync
relationships in your object models.

00:20:38.110 --> 00:20:41.790
and you're going to learn how to
sync your application simultaneously.

00:20:41.820 --> 00:20:44.990
If you combine that with
syncing your applications often,

00:20:44.990 --> 00:20:47.440
then you'll learn how to trickle sync.

00:20:47.440 --> 00:20:50.840
And the good news is that these
demos that you're seeing today are

00:20:50.870 --> 00:20:55.350
available now on your Tiger Seed DVD,
so you can go to Developer, Example,

00:20:55.410 --> 00:20:59.510
Sync Services, and if you're gung-ho,
you can open up your Xcode project

00:20:59.510 --> 00:21:02.960
now and you can follow along because
Gordie's going to actually show a lot

00:21:02.960 --> 00:21:07.380
of the details later that relates to the
schema files and the client description,

00:21:07.380 --> 00:21:08.380
et cetera.

00:21:08.380 --> 00:21:11.620
So because it's a sophisticated example,
I'm just going to take a moment to just

00:21:11.850 --> 00:21:16.340
tell you what the architecture is and the
object-oriented model behind these apps.

00:21:16.340 --> 00:21:20.900
So of course you have the Sync Engine and
the Truth database at the center.

00:21:20.940 --> 00:21:23.310
We have one app we call Events.

00:21:23.350 --> 00:21:28.040
It's just going to import iCal files
and create custom event objects.

00:21:28.050 --> 00:21:33.500
The second application is Media Assets
and it's just going to go to any old

00:21:33.680 --> 00:21:36.760
iPhoto library year folder and parse it.

00:21:36.760 --> 00:21:45.510
And each of these applications has
their own local database store.

00:21:45.770 --> 00:21:48.100
So what does the object model look like?

00:21:48.100 --> 00:21:49.160
There's an event object.

00:21:49.230 --> 00:21:53.820
It corresponds to a wedding or a
birthday party and a media object,

00:21:53.820 --> 00:21:57.130
and it corresponds to a photograph
that was taken at an event.

00:21:57.180 --> 00:22:01.800
So naturally there's a 2-1 relationship
from media to event and a 2-many

00:22:01.800 --> 00:22:04.020
relationship from event to media.

00:22:04.340 --> 00:22:07.600
So this is a special relationship
because if you set the 2-1

00:22:07.600 --> 00:22:11.070
relationship from media to event,
you would expect that media

00:22:11.070 --> 00:22:14.900
object to be added as one of the
destination objects of the 2-many

00:22:14.900 --> 00:22:16.690
from that event to the media.

00:22:16.700 --> 00:22:22.170
So we call this an inverse relationship.

00:22:23.500 --> 00:22:27.330
And the good news is that Sync
Services is supporting inverse

00:22:27.330 --> 00:22:31.350
relationships in the Sync Engine and
will maintain the integrity of inverse

00:22:31.350 --> 00:22:33.160
relationships even if you don't.

00:22:34.920 --> 00:22:37.780
Okay,
and then this is an example of an event.

00:22:37.930 --> 00:22:40.960
We went to Mendocino to the beach,
and here's the photographs.

00:22:41.110 --> 00:22:43.550
In retrospect,
this slide was probably not needed,

00:22:43.630 --> 00:22:45.790
but I just wanted to
show off my photography.

00:22:45.790 --> 00:22:49.510
So can we go to demo one?

00:22:51.570 --> 00:22:52.730
All right.

00:22:52.860 --> 00:22:56.500
So this is the events application.

00:22:56.500 --> 00:22:58.480
It's a simple master detail interface.

00:22:58.550 --> 00:23:02.690
I've already loaded the iCal file,
by the way.

00:23:03.980 --> 00:23:07.380
For those of you in the back row,
I'm just going to zoom in.

00:23:07.640 --> 00:23:09.230
Can you see that?

00:23:10.980 --> 00:23:14.520
Event has just the title attribute,
start date, and end date.

00:23:14.580 --> 00:23:16.580
So I'm going to point out
a couple of other things.

00:23:16.580 --> 00:23:19.980
Down here, you see the record ID.

00:23:20.290 --> 00:23:23.320
and below that is the client ID.

00:23:23.400 --> 00:23:27.620
So each application
has its own client ID.

00:23:27.710 --> 00:23:30.560
Okay, another area I want you to look at.

00:23:33.900 --> 00:23:35.280
Over here.

00:23:35.280 --> 00:23:38.200
Now, when you do your applications,
you're not going to have a big, old,

00:23:38.290 --> 00:23:40.960
ugly Sync button here
and a trickle checkbox.

00:23:40.980 --> 00:23:45.610
But we added that there because we're
going to first show this demo slowly,

00:23:45.630 --> 00:23:47.580
step by step,
to show you the process of what's

00:23:47.580 --> 00:23:49.320
happening between the two apps.

00:23:49.320 --> 00:23:52.770
And then we'll speed it up later
by turning trickle syncing on.

00:23:55.790 --> 00:23:59.190
And we also implemented a calendar view,
because you typically want to

00:23:59.190 --> 00:24:02.030
view your events on a calendar.

00:24:02.380 --> 00:24:05.100
So at this point,
the events application has

00:24:05.250 --> 00:24:06.470
the local event objects.

00:24:06.540 --> 00:24:07.820
I'm going to push the sync button.

00:24:07.900 --> 00:24:10.050
There's going to be a progress
indicator that runs here,

00:24:10.160 --> 00:24:14.330
and it's going to push the local event
objects out to the truth database.

00:24:15.130 --> 00:24:17.100
And that's the end of the demo.

00:24:17.150 --> 00:24:18.100
No.

00:24:18.160 --> 00:24:25.640
So this must be a tiger bug
because I can't hide it.

00:24:25.640 --> 00:24:27.850
So let me hide it like that.

00:24:27.910 --> 00:24:30.520
Let's bring up the Media Assets app.

00:24:44.210 --> 00:24:45.740
Okay, here's the Media Assets app.

00:24:45.870 --> 00:24:50.270
Same thing,
it's a master detail interface.

00:24:50.270 --> 00:24:50.270
I'll import some

00:24:52.760 --> 00:24:59.610
and I have an iPhoto
library of 2004 photos.

00:24:59.700 --> 00:25:04.480
Down here you see,
I don't know if it helps if I zoom in,

00:25:04.520 --> 00:25:07.410
but basically there's a title
is one of the attributes,

00:25:07.570 --> 00:25:09.380
the date of the media object.

00:25:09.540 --> 00:25:12.600
The image is just a URL and
it's being shown here below.

00:25:12.780 --> 00:25:14.600
Now there's an event pull down menu.

00:25:14.600 --> 00:25:16.600
You can't tell,
but I'm actually pushing the mouse

00:25:16.600 --> 00:25:20.040
on there and nothing is appearing
because this application doesn't know

00:25:20.040 --> 00:25:22.580
anything about event objects right now.

00:25:22.600 --> 00:25:29.160
Again, it has a record ID under here for
each record and has a client ID.

00:25:32.100 --> 00:25:36.690
Okay, so if I now push the import button,
it's gonna push the media objects

00:25:36.840 --> 00:25:39.620
to the truth database and it's
gonna pull out the event objects.

00:25:39.620 --> 00:25:43.850
I do that all the time, sorry.

00:25:46.900 --> 00:25:48.090
There we go.

00:25:48.130 --> 00:25:52.080
So as the events just got pulled
over and populated into the menu.

00:25:54.190 --> 00:25:58.500
So I happen to know that's Chinatown
and this picture was taken at Chinatown,

00:25:58.500 --> 00:26:01.670
but I'm not going to make you sit there
while I set all of these relationships.

00:26:01.700 --> 00:26:04.270
So what we did was we created
a Smart Events button,

00:26:04.290 --> 00:26:07.310
and it's just going to run down these
media objects and assign them to the

00:26:07.420 --> 00:26:09.360
most logical event matching the dates up.

00:26:09.400 --> 00:26:13.540
So if you push that button,
now all my media objects have events.

00:26:13.620 --> 00:26:17.100
So again, just to review,
we've just created two one relationships

00:26:17.100 --> 00:26:20.170
between the media and the events
object and too many relationships

00:26:20.170 --> 00:26:21.830
from all the event objects to the media.

00:26:22.500 --> 00:26:25.900
Again, it's just local and
I haven't pushed it yet.

00:26:27.550 --> 00:26:31.310
So if I push Sync,
it's going to push it out.

00:26:31.320 --> 00:26:36.770
And then we'll bring up the events
application and the calendar view.

00:26:38.540 --> 00:26:40.790
And when I push sync
here on the Events app,

00:26:40.790 --> 00:26:43.200
it's going to pull both the
media objects and the too one

00:26:43.200 --> 00:26:44.900
and the too many relationships.

00:26:45.000 --> 00:26:50.230
And hopefully we'll see
them on the calendar there.

00:26:53.320 --> 00:26:57.000
So let's turn on trickle
syncing on the Events app.

00:26:57.070 --> 00:26:58.160
And then we go back to Media.

00:26:58.160 --> 00:27:00.520
We'll import some more photos.

00:27:05.810 --> 00:27:07.580
February, March.

00:27:07.580 --> 00:27:10.040
OK, they're down at the bottom.

00:27:10.050 --> 00:27:12.040
Put Smart Events,
create some more relationships.

00:27:12.040 --> 00:27:15.610
Let's move this up to February.

00:27:15.640 --> 00:27:20.420
OK, now when I push the Sync button,
the Events app is set to trickle sync.

00:27:20.500 --> 00:27:23.250
So it's going to get an alert
that Media Assets is syncing,

00:27:23.250 --> 00:27:25.600
and it will begin syncing simultaneously.

00:27:25.600 --> 00:27:26.940
So you have to look quick.

00:27:27.000 --> 00:27:28.600
There'll be a progress
indicator over here.

00:27:28.600 --> 00:27:32.580
There'll be another progress
indicator over here.

00:27:32.790 --> 00:27:34.600
And there's the photos.

00:27:37.530 --> 00:27:42.500
Okay, now we'll go back to events.

00:27:42.500 --> 00:27:46.430
This is a multi-day event,
Tahoe skiing trip.

00:27:46.570 --> 00:27:48.660
Let's say we want to
change the name of that,

00:27:48.660 --> 00:27:51.070
but I want to show this off,
so I'm going to find Tahoe

00:27:51.070 --> 00:27:52.020
skiing over here too.

00:27:52.020 --> 00:27:57.010
And let's change that to winter.

00:27:58.870 --> 00:28:02.620
Now when I hit the tab,
it's going to modify the local objects.

00:28:02.690 --> 00:28:06.960
It's set to sync about
every five seconds.

00:28:07.060 --> 00:28:08.080
So there'll be a moment delay.

00:28:08.170 --> 00:28:09.760
It will sync.

00:28:09.810 --> 00:28:12.780
When it updates the local changes,
it will update the

00:28:12.780 --> 00:28:14.790
Tahoe skiing down here.

00:28:15.040 --> 00:28:18.870
And then when it pushes the changes out,
it'll update media assets if

00:28:18.870 --> 00:28:21.420
I turn trickle syncing on.

00:28:22.400 --> 00:28:24.000
All right,
so I haven't hit the tab button yet.

00:28:24.000 --> 00:28:26.800
Now I'm going to hit the tab.

00:28:26.800 --> 00:28:30.840
There it

00:28:31.830 --> 00:28:32.700
There it goes.

00:28:32.840 --> 00:28:33.540
All right.

00:28:33.650 --> 00:28:34.180
Good work.

00:28:34.180 --> 00:28:35.940
Slow.

00:28:35.940 --> 00:28:36.930
Okay.

00:28:36.990 --> 00:28:37.680
So let's have a little more fun.

00:28:37.800 --> 00:28:41.740
This is a multi-day event,
so let's move some of the pictures.

00:28:41.740 --> 00:28:46.860
Let's say that this picture
was actually taken on the 16th.

00:28:47.490 --> 00:28:51.000
And it should appear over
here on the date of the 16th.

00:28:51.180 --> 00:28:52.710
Hit Tab.

00:28:53.000 --> 00:28:56.050
You're waiting for the sync.

00:28:56.120 --> 00:28:57.130
There it goes.

00:28:57.170 --> 00:28:58.880
Now it moves.

00:28:58.990 --> 00:29:00.850
For those of you who missed it,
we'll do it one more time.

00:29:00.970 --> 00:29:03.540
We'll move this photo to the 18th.

00:29:03.630 --> 00:29:05.100
Hit Tab.

00:29:05.100 --> 00:29:07.170
It should sync up here.

00:29:10.400 --> 00:29:20.000
[Transcript missing]

00:29:25.170 --> 00:29:27.950
OK, you're all probably wondering a
little bit how it's implemented,

00:29:28.050 --> 00:29:31.370
so I'm just going to cover that briefly,
especially if you're looking at the code.

00:29:31.510 --> 00:29:34.260
So it does use a model
view controller paradigm,

00:29:34.260 --> 00:29:38.530
and the models are the
syncable objects in the design.

00:29:44.710 --> 00:29:46.280
There we go.

00:29:46.300 --> 00:29:46.780
There we go.

00:29:46.780 --> 00:29:47.070
OK.

00:29:47.500 --> 00:29:51.140
And we use Cocoa Bindings, of course,
to update all of the changes

00:29:51.140 --> 00:29:52.700
that are done locally in the app.

00:29:52.840 --> 00:29:54.830
But in addition,
when you're pulling all of the changes

00:29:54.900 --> 00:29:58.060
and applying them to the local objects,
that's how the displays

00:29:58.060 --> 00:29:59.310
are being updated.

00:29:59.500 --> 00:30:03.300
We also used Key Value Observing,
which is the underpinnings

00:30:03.340 --> 00:30:05.390
to Cocoa Bindings,
and we used that to record

00:30:05.450 --> 00:30:06.800
all of the local changes.

00:30:06.800 --> 00:30:09.860
As Toby and Gordie were saying,
that's one of your jobs,

00:30:09.860 --> 00:30:12.680
to record all the changes you
make locally for pushing later.

00:30:13.280 --> 00:30:16.990
And we also found Transformers,
that is the NS Transformer class,

00:30:17.150 --> 00:30:20.450
useful for converting your models
to records before you push,

00:30:20.450 --> 00:30:23.040
and then when you pull the
changes in from the Sync Engine,

00:30:23.100 --> 00:30:26.510
you need to apply them to your models,
and sometimes when you get additions,

00:30:26.570 --> 00:30:29.480
you need to create models,
so we used Transformers there.

00:30:29.480 --> 00:30:32.460
We also used Transformers for
resolving the relationships.

00:30:32.480 --> 00:30:34.610
So Gordie's going to
show that in more detail,

00:30:34.610 --> 00:30:38.250
but the relationships that come from
the Sync Engine are not what you expect.

00:30:38.270 --> 00:30:41.520
You have to convert that to
actual references to your objects.

00:30:41.520 --> 00:30:43.260
And I think that's it.

00:30:43.260 --> 00:30:47.190
We'll go back to Gordie
for more details on how to.

00:30:55.230 --> 00:30:59.200
Let's talk a little bit about how we did
many of the things you saw in the demo.

00:30:59.200 --> 00:31:02.290
Nancy actually wrote the demo,
so she gets all the credit,

00:31:02.380 --> 00:31:04.140
but if I get it wrong,
you've got to forgive me.

00:31:04.290 --> 00:31:07.420
But I do promise to do
better with the clicker now.

00:31:08.120 --> 00:31:11.660
Okay, I talked about the five main
things you need to do to sync.

00:31:11.820 --> 00:31:13.080
Let's just recap quickly.

00:31:13.210 --> 00:31:15.400
You'll set up a data schema.

00:31:15.440 --> 00:31:17.860
You'll have configuration
for your application.

00:31:17.870 --> 00:31:19.640
Then we'll have the main sync loop.

00:31:19.640 --> 00:31:22.890
Before,
we mentioned that's the meat of syncing.

00:31:22.960 --> 00:31:26.580
For any vegetarians out there,
that's the tofu of syncing.

00:31:26.860 --> 00:31:29.330
You'll have data transformation,
and Nancy just touched

00:31:29.430 --> 00:31:30.520
on that a little bit.

00:31:30.520 --> 00:31:32.920
And then, of course,
keeping track of your data

00:31:32.920 --> 00:31:34.350
so that you can fast sync.

00:31:34.470 --> 00:31:36.450
So let's go over that now.

00:31:36.680 --> 00:31:38.360
Let's look at a schema.

00:31:38.470 --> 00:31:39.760
So what goes in a schema?

00:31:39.820 --> 00:31:41.830
Essentially, you're defining entities.

00:31:41.920 --> 00:31:45.410
So in the example we just showed you,
we had two entity types.

00:31:45.500 --> 00:31:50.990
MediaAssets object, which had a picture,
a title, and a date associated with it.

00:31:51.260 --> 00:31:54.850
And we also had an event object,
which had a title and a date.

00:31:55.020 --> 00:31:58.560
And we mapped the media
objects to the event objects.

00:31:58.690 --> 00:32:02.360
We have attributes,
such as the title and the date.

00:32:02.400 --> 00:32:06.110
We also have the relationships,
such as the relationship from the media

00:32:06.110 --> 00:32:10.020
asset to an event and the relationship
back from the event to the media asset.

00:32:10.080 --> 00:32:12.240
Now, I'm being a little bit redundant,
but I want to make sure that we

00:32:12.570 --> 00:32:14.160
didn't skip over anything here.

00:32:14.160 --> 00:32:16.280
So this is kind of a
pictorial representation.

00:32:16.280 --> 00:32:19.390
I'm just going to run through it
from the top just to tell you all

00:32:19.390 --> 00:32:21.330
the different parts of a schema.

00:32:21.470 --> 00:32:23.460
You start off with a data class.

00:32:23.500 --> 00:32:26.930
A data class is actually somewhat
of an informal construct.

00:32:26.950 --> 00:32:29.960
It's used to present what
you're syncing to the user.

00:32:29.960 --> 00:32:33.460
So if your application has a number of
different entities that you want to sync,

00:32:33.460 --> 00:32:33.950
you can sync them to the data class.

00:32:33.960 --> 00:32:36.830
You can group them
together in one data class.

00:32:36.890 --> 00:32:40.400
An example of that is
contacts and calendars.

00:32:40.420 --> 00:32:43.240
Rather than specifying every
entity type to the user,

00:32:43.240 --> 00:32:46.100
providing them with way
too much information,

00:32:46.100 --> 00:32:50.260
you can sort of summarize it
by naming it in a data class.

00:32:50.460 --> 00:32:53.130
As I mentioned before,
you're syncing entities.

00:32:53.270 --> 00:32:55.640
So a data class consists
of a number of entities.

00:32:55.710 --> 00:32:59.140
And then deconstructing further,
we can see attributes.

00:32:59.200 --> 00:33:02.520
These are primitive types that you use,
basically what you would

00:33:02.520 --> 00:33:03.830
put in an NSDictionary.

00:33:04.160 --> 00:33:06.550
They represent the different
attributes of each entity.

00:33:06.580 --> 00:33:09.990
In a contact, you would have name,
first name, last name,

00:33:09.990 --> 00:33:13.240
and clearly we just saw an
example in what we showed you.

00:33:13.300 --> 00:33:15.160
You also have the relationships.

00:33:15.210 --> 00:33:18.040
And one other thing that
we didn't mention before,

00:33:18.040 --> 00:33:19.340
identity properties.

00:33:19.590 --> 00:33:24.020
The first time you synchronize a new
object or a new record from one source,

00:33:24.020 --> 00:33:28.110
what we'll do in the engine is
compare it to all the records

00:33:28.110 --> 00:33:30.550
we have from existing sources.

00:33:30.710 --> 00:33:33.790
If we see that it's the same record,
we won't duplicate it.

00:33:33.920 --> 00:33:37.290
That way, and I mentioned this before,
when you sync your phone for the

00:33:37.440 --> 00:33:41.320
first time with address book,
you're not going to duplicate every entry

00:33:41.320 --> 00:33:43.870
that you've entered dutifully into both.

00:33:43.950 --> 00:33:49.700
The way we do that is by having schema
specify the identity properties.

00:33:49.840 --> 00:33:52.460
These can be attributes or relationships.

00:33:52.510 --> 00:33:56.170
You might want to scope the identity
of something through a relationship.

00:33:56.310 --> 00:33:59.730
For instance, for a phone number,
you might scope its identity

00:33:59.740 --> 00:34:03.280
through the enclosing contact by
specifying the relationship from

00:34:03.480 --> 00:34:07.600
that phone number back to a contact,
as well as the type and the value,

00:34:07.610 --> 00:34:10.020
which would both be attributes.

00:34:10.140 --> 00:34:12.470
So you tell us dynamically,
this isn't something

00:34:12.470 --> 00:34:15.280
that you're stuck with,
it's not a static description,

00:34:15.290 --> 00:34:18.210
but it's something that you put in
your schema that we can use that can

00:34:18.210 --> 00:34:19.440
be different for each data class.

00:34:19.440 --> 00:34:22.180
For each entity type,
you tell us what the

00:34:22.180 --> 00:34:25.820
identity of an object is,
how to notice that, and we'll take care

00:34:25.820 --> 00:34:27.670
of mapping duplicates.

00:34:28.990 --> 00:34:31.100
So let's look a little
bit more at a Sync schema.

00:34:31.100 --> 00:34:34.540
It's a plist, straight up,
it's very straightforward.

00:34:34.550 --> 00:34:36.080
You'll have a name for your schema.

00:34:36.090 --> 00:34:40.360
That way, any introspection tools,
any UI can be used to look at it.

00:34:40.360 --> 00:34:43.360
We'll be able to determine
the exact name of the schema.

00:34:43.380 --> 00:34:46.990
Also, the engine has to be able to
identify schemas uniquely.

00:34:47.130 --> 00:34:49.240
You don't want two schemas
with the same name,

00:34:49.280 --> 00:34:52.220
so we recommend that you
use a DNS style name.

00:34:52.260 --> 00:34:56.670
Here we have
com.apple.sync_examples as our name.

00:34:57.020 --> 00:34:58.900
You have a set of data classes.

00:34:59.020 --> 00:35:01.110
Usually you'll just have one data class.

00:35:01.260 --> 00:35:05.780
For instance, with the contacts schema,
we just have the contacts data class.

00:35:05.800 --> 00:35:09.510
But depending on the complexity of your
application and the choices you make as

00:35:09.590 --> 00:35:13.690
to how you want to organize your schema,
you could put more than one

00:35:13.690 --> 00:35:15.480
data class in one schema.

00:35:15.480 --> 00:35:16.860
It's up to you.

00:35:16.860 --> 00:35:20.100
You have a list of entities and that's
really the main thing that you're going

00:35:20.100 --> 00:35:22.940
to be putting inside of a data schema.

00:35:23.370 --> 00:35:24.900
So let's look at an entity.

00:35:24.920 --> 00:35:26.960
Each entity also has a name.

00:35:26.980 --> 00:35:30.300
It's DNS qualified as well,
so that it doesn't conflict

00:35:30.300 --> 00:35:31.320
with other entities.

00:35:31.360 --> 00:35:33.420
Entity names are in a global name space.

00:35:33.510 --> 00:35:36.800
They're not just mapped within the
schema that they exist inside of.

00:35:36.850 --> 00:35:39.120
The entities are treated as global.

00:35:39.180 --> 00:35:43.610
That way you can refer to an entity in
another schema if you want to extend

00:35:43.610 --> 00:35:46.780
something or if you wanted to refer
to a data class in another schema

00:35:46.830 --> 00:35:49.540
that you're adding an entity type to.

00:35:49.540 --> 00:35:52.800
So you have to make sure
that you use a unique name.

00:35:53.130 --> 00:35:55.630
You specify the data class
that your entity's in,

00:35:55.800 --> 00:35:57.500
and you give it a display name.

00:35:57.500 --> 00:36:00.270
The display name would be used, again,
by any user interface,

00:36:00.270 --> 00:36:03.830
something so that the user doesn't
get stuck looking at really long,

00:36:03.830 --> 00:36:05.730
weird, disambiguated names.

00:36:05.880 --> 00:36:09.170
In this case,
media makes a lot more sense to the user.

00:36:09.320 --> 00:36:12.440
Then you have your attributes,
relationships, and identity properties,

00:36:12.440 --> 00:36:14.690
and let's look at those.

00:36:15.450 --> 00:36:16.630
Attributes are very simple.

00:36:16.640 --> 00:36:18.080
I've just included two here.

00:36:18.080 --> 00:36:20.640
I put ellipses at the bottom
because this isn't everything.

00:36:20.640 --> 00:36:23.630
It's kind of hard to fit things
and I hope you can see this.

00:36:23.820 --> 00:36:26.930
Actually, I've noticed in some of the
presentations it's hard from the back

00:36:26.930 --> 00:36:30.920
to be able to see when we put code
up or any kind of text like this.

00:36:30.920 --> 00:36:34.350
But in this case,
I'm specifying two of the attributes,

00:36:34.350 --> 00:36:36.100
the date and the title.

00:36:36.100 --> 00:36:38.180
This is for an event object.

00:36:38.320 --> 00:36:41.190
You specify the name and the type.

00:36:41.370 --> 00:36:44.460
The name is the field that you're going
to use in a record dictionary that

00:36:44.530 --> 00:36:47.210
represents one of these entity types.

00:36:47.320 --> 00:36:50.270
And then the type is
just simply what it is.

00:36:50.970 --> 00:36:53.090
Here's a list of the attribute
types that you can use.

00:36:53.090 --> 00:36:55.270
I just put it here
quickly for completeness.

00:36:55.510 --> 00:36:58.800
Standard stuff that you can
put into a property list.

00:36:59.140 --> 00:37:02.910
Also, you can use an array or a
dictionary as a primitive type,

00:37:03.020 --> 00:37:04.210
but you need to be careful.

00:37:04.300 --> 00:37:06.300
We're doing field level differencing.

00:37:06.300 --> 00:37:09.800
If you have a record and it's
got five different fields,

00:37:09.910 --> 00:37:12.200
we'll difference those
fields independently.

00:37:12.260 --> 00:37:15.800
So if one record from one
source changed field one,

00:37:15.970 --> 00:37:18.710
another record from another
source changed field two,

00:37:18.890 --> 00:37:19.740
that's not a conflict.

00:37:19.850 --> 00:37:20.800
We'll merge it together.

00:37:20.800 --> 00:37:24.800
But if one of your fields
is an array or a dictionary,

00:37:24.800 --> 00:37:27.400
that entire collection is
going to be considered the

00:37:27.410 --> 00:37:28.800
atomic unit for that field.

00:37:28.800 --> 00:37:31.800
So if you make one small change in that,
in one source,

00:37:31.800 --> 00:37:35.800
and another change in another,
that's going to cause a conflict.

00:37:35.960 --> 00:37:38.540
There are some cases, though,
where it's very convenient to

00:37:38.540 --> 00:37:41.000
be able to use a collection,
but wherever you can,

00:37:41.000 --> 00:37:43.950
it's best to split up your
attributes into separate,

00:37:43.950 --> 00:37:45.800
or use separate attributes.

00:37:45.800 --> 00:37:47.800
for each one of your semantic fields.

00:37:47.800 --> 00:37:49.800
There's a few additional types.

00:37:49.970 --> 00:37:51.800
Calendar date,
just because it's so useful.

00:37:51.800 --> 00:37:53.800
You can't put calendar
dates into property lists,

00:37:53.800 --> 00:37:55.800
but you can put them inside of a record.

00:37:55.800 --> 00:38:00.310
We have NSData in case you want to take
something like an image or something

00:38:00.310 --> 00:38:04.780
that's your own object type that's
not represented by one of these.

00:38:04.830 --> 00:38:07.800
You can just sort of
stuff it into an NSData.

00:38:07.800 --> 00:38:10.800
You can also specify an
enumeration of strings.

00:38:10.800 --> 00:38:12.870
This is useful to have a
bounded set of strings,

00:38:12.870 --> 00:38:16.800
and the engine will actually do
some consistency checks for you.

00:38:16.820 --> 00:38:19.800
So if you want to have weekdays, Monday,
Tuesday, Wednesday, and so on,

00:38:19.800 --> 00:38:22.990
you can specify those,
rather than just saying "string" and

00:38:22.990 --> 00:38:24.790
then possibly mistyping something.

00:38:24.800 --> 00:38:27.640
You can also have a URL,
which is very useful to

00:38:27.730 --> 00:38:29.800
reference things elsewhere.

00:38:31.400 --> 00:38:34.060
So let's look a little
bit at a relationship.

00:38:34.100 --> 00:38:37.170
Relationship starts off with a
name just like an attribute does.

00:38:37.420 --> 00:38:38.570
It has a display name.

00:38:38.870 --> 00:38:41.800
Now I didn't show this for the attribute
because it wouldn't fit on the slide,

00:38:41.800 --> 00:38:44.540
but both attributes and
relationships have a display name.

00:38:44.710 --> 00:38:48.150
That way as tools are developed that
can do introspection to these things,

00:38:48.150 --> 00:38:51.170
you can display something a
little bit more meaningful than

00:38:51.290 --> 00:38:53.280
the normal name that you'll pick.

00:38:53.300 --> 00:38:56.390
Notice that the names of the
attributes and relationships

00:38:56.390 --> 00:38:58.240
don't need to be DNS qualified.

00:38:58.270 --> 00:39:01.970
Their scoping is local to the
entity that they reside in.

00:39:02.150 --> 00:39:04.200
For a relationship,
you specify whether it's

00:39:04.200 --> 00:39:06.880
one to one or one to many.

00:39:06.890 --> 00:39:10.330
We have a one to one relationship
in our example from a media

00:39:10.330 --> 00:39:12.500
asset object back to an event.

00:39:12.500 --> 00:39:15.640
Each media object
corresponds to one event.

00:39:15.670 --> 00:39:18.650
However,
the events can have many objects.

00:39:18.650 --> 00:39:21.050
They can have many media objects.

00:39:21.180 --> 00:39:24.460
So in one direction we're specifying
a one to one relationship.

00:39:24.560 --> 00:39:26.260
In the other, it's a one to many.

00:39:26.280 --> 00:39:28.260
We're showing the media right here.

00:39:28.260 --> 00:39:29.260
This is the relationship.

00:39:29.260 --> 00:39:31.360
I probably should have mentioned this.

00:39:31.420 --> 00:39:36.260
This is the relationship in a
media record back to an event.

00:39:36.360 --> 00:39:37.820
You specify the target type.

00:39:38.060 --> 00:39:40.640
This is the fully qualified
target type of event.

00:39:40.640 --> 00:39:42.850
So here we're just simply
specifying we've got a one to

00:39:42.850 --> 00:39:44.640
one relationship to an event.

00:39:44.640 --> 00:39:45.660
I did a lot of talking.

00:39:45.660 --> 00:39:48.100
That was actually something
that's fairly simple.

00:39:48.100 --> 00:39:50.830
You can also specify an
inverse relationship.

00:39:51.160 --> 00:39:54.040
These are very useful when
you want the engine to do some

00:39:54.040 --> 00:39:56.220
consistency checking for you.

00:39:56.220 --> 00:39:57.280
If you've set up a media asset to
put a link to a specific event,

00:39:57.280 --> 00:39:57.280
you can specify the inverse relationship.

00:39:57.280 --> 00:39:57.280
You can also specify the
inverse relationship.

00:39:57.280 --> 00:39:57.280
These are very useful when
you want the engine to do some

00:39:57.280 --> 00:39:57.280
consistency checking for you.

00:39:57.280 --> 00:39:59.720
If you want a media asset
to point back to an event,

00:39:59.720 --> 00:40:02.520
you want that event to
contain that media asset.

00:40:02.730 --> 00:40:05.260
Similarly,
if you move a media asset's relationship

00:40:05.410 --> 00:40:08.620
from one event to the other,
you want to make sure that it's

00:40:08.630 --> 00:40:12.080
unwired from that first event
and wired into the second one.

00:40:12.080 --> 00:40:14.080
You can specify an inverse relationship.

00:40:14.080 --> 00:40:17.290
Now, this is a little tricky to
look at outside of context.

00:40:17.350 --> 00:40:19.450
If you look at the examples
that we've provided and you

00:40:19.450 --> 00:40:23.530
look at the entire schema,
you'll be able to see how this is

00:40:23.530 --> 00:40:26.280
wired up a little more clearly.

00:40:26.280 --> 00:40:30.240
If I could say that clearly,
there's a metaphor in there somewhere.

00:40:30.240 --> 00:40:33.320
We have the entity name for the
inverse relationship and the name

00:40:33.320 --> 00:40:35.120
of the relationship that's back.

00:40:35.120 --> 00:40:38.810
So we're saying a media object
has a relationship to an event,

00:40:38.920 --> 00:40:42.320
and then their inverse
relationship is from the event's

00:40:42.430 --> 00:40:45.180
media relationship field.

00:40:47.330 --> 00:40:49.630
This is just how you
specify identity properties.

00:40:49.770 --> 00:40:50.530
It's very simple.

00:40:50.660 --> 00:40:54.190
It's just a list of attributes and
relationships that are being used

00:40:54.320 --> 00:40:55.920
for the identity for that record.

00:40:56.060 --> 00:40:58.830
In this case,
we're using the date and the title

00:40:58.870 --> 00:41:01.270
of an event to identify it uniquely.

00:41:01.940 --> 00:41:04.200
Okay,
so let's talk about what you're syncing.

00:41:04.210 --> 00:41:06.000
I just described the classes.

00:41:06.000 --> 00:41:09.960
Now let's talk about the
instances of those or the records.

00:41:10.540 --> 00:41:13.690
When you're syncing an object,
you have to push up two things:

00:41:13.780 --> 00:41:17.400
a record dictionary and a
unique identifier for it.

00:41:17.540 --> 00:41:21.400
Now, the identifier must be unique
across all of the entity types

00:41:21.400 --> 00:41:22.900
that you're synchronizing.

00:41:22.900 --> 00:41:25.310
So if you have contacts
and you have phone numbers,

00:41:25.410 --> 00:41:29.040
you can't use the same identifier
for a contact that you use for

00:41:29.160 --> 00:41:31.750
a phone number just because
they're different entity types.

00:41:31.960 --> 00:41:36.400
You always have to make sure that all of
your identifiers are completely unique.

00:41:36.460 --> 00:41:38.940
However, you don't have to worry
about other clients.

00:41:39.130 --> 00:41:43.990
Your client has its own namespace
for all of its identifiers.

00:41:44.210 --> 00:41:46.600
You need to put the
entity name in a record.

00:41:46.710 --> 00:41:51.740
That's essentially like the is a pointer
back to a class inside of an object.

00:41:51.740 --> 00:41:54.140
By specifying that,
the engine now knows what kind

00:41:54.140 --> 00:41:55.510
of record it's dealing with.

00:41:55.510 --> 00:41:58.540
If you didn't put that in the record,
we'd look at this NSDictionary,

00:41:58.540 --> 00:42:00.360
it'd be filled with all
kinds of great fields,

00:42:00.360 --> 00:42:01.820
but we wouldn't know what it was.

00:42:01.960 --> 00:42:05.370
So you always have to make sure
that you put the entity name in.

00:42:05.570 --> 00:42:09.540
Now, everything that goes in that record
is just a set of key value properties.

00:42:09.630 --> 00:42:12.860
For an attribute, it's one of the types
I showed you before.

00:42:12.860 --> 00:42:15.940
So it's just a set
straight up dictionary.

00:42:15.940 --> 00:42:19.600
For a relationship,
if it's a one-to-one relationship,

00:42:19.660 --> 00:42:21.500
you'll have an array
with one element in it.

00:42:21.500 --> 00:42:24.680
If it's a one-to-many relationship,
you'll have an array with

00:42:24.760 --> 00:42:27.140
zero or more elements.

00:42:27.140 --> 00:42:31.160
The reason that a one-to-one relationship
still uses an array is for consistency.

00:42:31.160 --> 00:42:33.770
So you don't have to have code
that's doing is kind of all over

00:42:33.770 --> 00:42:38.520
the place to see if this is an
array or just a singleton object.

00:42:38.650 --> 00:42:39.620
Relationships are specified by use.

00:42:39.620 --> 00:42:43.610
using the unique record
identifier of the target.

00:42:44.100 --> 00:42:46.240
Now one thing about record identifiers.

00:42:46.330 --> 00:42:48.860
Often when you're using
a relational database,

00:42:48.860 --> 00:42:53.040
you can construct a unique identifier
with some combination of your primary

00:42:53.040 --> 00:42:55.410
key and your record type in the database.

00:42:55.410 --> 00:42:58.550
So you might want to use what
you have for a primary key as

00:42:58.560 --> 00:43:01.260
part of the record identifier.

00:43:01.290 --> 00:43:04.370
If you do that,
you may not want to put those fields

00:43:04.430 --> 00:43:08.760
into the dictionary for the record or
into your schema because it's redundant.

00:43:09.020 --> 00:43:11.180
You'll be using them for
the record identifier.

00:43:11.440 --> 00:43:15.990
There's no reason for you to also
put them inside of the record itself.

00:43:18.780 --> 00:43:21.060
So let's look at what
an application sees.

00:43:21.060 --> 00:43:24.940
A user will look at an application and
they'll be presented with some kind of

00:43:24.940 --> 00:43:27.070
visual representation of your objects.

00:43:27.210 --> 00:43:30.190
In the application,
you've got your own objects internally.

00:43:30.190 --> 00:43:32.290
Like I said before,
these could be structs,

00:43:32.370 --> 00:43:35.310
they could be objects,
they could be constructed out of strings,

00:43:35.310 --> 00:43:36.760
it could be whatever you want.

00:43:36.900 --> 00:43:40.270
When you're syncing,
you need to transform those into records.

00:43:40.380 --> 00:43:42.710
So these are probably a little
hard to see from the back,

00:43:42.710 --> 00:43:45.560
but these are just straight
up NSDictionary's and that's

00:43:45.660 --> 00:43:48.510
what you're going to be syncing
back and forth to the engine.

00:43:48.690 --> 00:43:49.960
So let's look at one in more detail.

00:43:51.610 --> 00:43:53.280
This is a media record.

00:43:53.390 --> 00:43:56.020
In white I have the
actual name of the entity.

00:43:56.180 --> 00:43:58.900
And then I'm just highlighting
the relationship to separate

00:43:58.950 --> 00:44:00.280
it from the attributes.

00:44:00.360 --> 00:44:01.420
Very straightforward.

00:44:01.430 --> 00:44:02.580
It's just a dictionary.

00:44:02.750 --> 00:44:05.390
We've got an array for the event,
which is a relationship

00:44:05.390 --> 00:44:06.940
back to the enclosing event.

00:44:09.120 --> 00:44:11.000
Hello.

00:44:11.020 --> 00:44:11.760
OK.

00:44:11.790 --> 00:44:14.580
This is what a event looks like.

00:44:14.780 --> 00:44:18.000
And the only difference here is
that it has a list of media objects,

00:44:18.010 --> 00:44:19.660
since it's a one to many.

00:44:19.670 --> 00:44:21.000
Otherwise, very similar.

00:44:21.110 --> 00:44:23.380
So we have a very regular
way of specifying all the

00:44:23.380 --> 00:44:24.470
records when you're syncing.

00:44:24.480 --> 00:44:27.760
You don't have to worry about pushing
up different objects in different ways.

00:44:27.790 --> 00:44:32.100
Everything eventually grounds
down to just being a dictionary.

00:44:32.990 --> 00:44:35.750
So now let's talk about configuration.

00:44:35.860 --> 00:44:39.060
We know how to describe the
schema for the data in our client.

00:44:39.090 --> 00:44:41.310
Now what we're going to do is
we're going to set up a client

00:44:41.310 --> 00:44:43.090
description property list.

00:44:43.090 --> 00:44:44.660
This is also a plist file.

00:44:44.970 --> 00:44:49.250
It statically describes the
characteristics of your client.

00:44:49.350 --> 00:44:51.260
So what does it have?

00:44:52.180 --> 00:44:55.860
We've got a list of the entities and
the properties in those entities.

00:44:55.860 --> 00:44:58.300
Now you might have a data schema
that you're sharing with other

00:44:58.300 --> 00:45:01.290
applications and there could be a
whole slew of entities in there and

00:45:01.300 --> 00:45:04.880
a lot of properties because you're
trying to cover all the bases.

00:45:04.930 --> 00:45:08.620
This particular sync client that you're
writing may not use all those entities.

00:45:08.620 --> 00:45:10.680
It might not use all of those fields.

00:45:10.870 --> 00:45:11.590
That's fine.

00:45:11.700 --> 00:45:16.350
In your client description property list,
you'll specify the subset that you use.

00:45:16.640 --> 00:45:20.140
That way the engine knows which
entities and which fields to be

00:45:20.140 --> 00:45:23.550
giving to your client and it also
knows what to expect from your client.

00:45:23.550 --> 00:45:26.910
So it won't erroneously delete
things just because your client

00:45:27.030 --> 00:45:29.210
doesn't pass up certain attributes.

00:45:29.370 --> 00:45:32.490
You can specify whether
entities are push or pull only.

00:45:32.560 --> 00:45:36.360
Most of the time, you'll be both pushing
and pulling entities.

00:45:36.360 --> 00:45:38.490
You'll be contributing
to the pool of data.

00:45:38.490 --> 00:45:40.060
You'll be pulling in changes.

00:45:40.110 --> 00:45:42.900
But sometimes, for instance,
in the case of an iPod,

00:45:42.900 --> 00:45:44.880
you'll only be pulling things down.

00:45:44.920 --> 00:45:47.860
The engine can make certain
optimizations in its data store

00:45:48.080 --> 00:45:50.140
when you give it that information.

00:45:50.760 --> 00:45:53.990
You also specify what type of
clients you want to sync with.

00:45:54.120 --> 00:45:57.330
So if you're an application,
typically when other applications

00:45:57.330 --> 00:46:00.420
sync the same data types that you do,
you'll want to get

00:46:00.420 --> 00:46:02.090
notified so you can sync.

00:46:02.180 --> 00:46:04.910
When .Mac syncs, you'll want to start up.

00:46:05.120 --> 00:46:07.450
When devices sync,
you'll want to start up.

00:46:07.500 --> 00:46:09.520
And we'll show that
for our examples here,

00:46:09.590 --> 00:46:14.180
we specified that we wanted to sync
when .Mac syncs and also when each

00:46:14.180 --> 00:46:16.610
of the other applications sync.

00:46:18.030 --> 00:46:20.160
Here's a look at a property list.

00:46:20.160 --> 00:46:21.330
Very straightforward.

00:46:21.340 --> 00:46:25.860
We have the display name for the
client and you can also specify,

00:46:25.860 --> 00:46:28.960
if I can get this to go here,
an image path.

00:46:28.980 --> 00:46:31.980
When you have a user interface
that presents a list of clients,

00:46:31.980 --> 00:46:34.670
which we provide for you,
it's nice not only to have

00:46:34.680 --> 00:46:36.860
the name of the client,
but to have some kind of

00:46:36.920 --> 00:46:38.460
an icon that represents it.

00:46:38.570 --> 00:46:41.130
Often it will be the same
as your application icon,

00:46:41.210 --> 00:46:44.100
but in some cases you might
choose something different,

00:46:44.100 --> 00:46:48.150
something that sort of illustrates that
this is data that you're synchronizing.

00:46:48.270 --> 00:46:54.570
So you can specify an icon relative
to the path of this property list,

00:46:54.570 --> 00:47:00.110
and that way it will present something
nicer to the user than just simply text.

00:47:00.330 --> 00:47:03.400
We also have a list of the
entities as I described.

00:47:03.460 --> 00:47:06.760
Here we're specifying the event
entity and the fields that

00:47:06.760 --> 00:47:08.710
we're going to synchronize.

00:47:10.130 --> 00:47:11.720
I'm kind of going through
these fast because this is

00:47:11.850 --> 00:47:15.340
pretty straightforward stuff.

00:47:15.430 --> 00:47:17.370
Okay, let's talk about syncing now.

00:47:17.520 --> 00:47:18.970
This is the interesting part.

00:47:19.120 --> 00:47:22.050
When you're going to synchronize,
the first thing you need to do

00:47:22.130 --> 00:47:23.850
is register your data schema.

00:47:23.930 --> 00:47:26.870
Now, it's not that expensive to
re-register the schema every

00:47:26.880 --> 00:47:28.510
time your application starts.

00:47:28.580 --> 00:47:31.550
You don't want to do it every
time you sync if you can avoid it,

00:47:31.670 --> 00:47:34.760
but what you can do is start your
application and just register

00:47:34.760 --> 00:47:37.530
the schema without worrying
if it was already registered.

00:47:37.690 --> 00:47:39.860
Typically,
your data schema file isn't changing,

00:47:39.890 --> 00:47:43.040
so all this amounts to is a
quick stat by the sync server.

00:47:43.100 --> 00:47:44.700
It checks to see if
there's any differences,

00:47:44.700 --> 00:47:47.640
and if there's not,
it actually doesn't do anything.

00:47:47.640 --> 00:47:50.500
So when your application starts up,
make sure that your schemas are

00:47:50.500 --> 00:47:52.060
registered that you're using.

00:47:52.060 --> 00:47:54.750
Then you need to register the client.

00:47:54.900 --> 00:47:55.630
Now, I'm sorry.

00:47:55.710 --> 00:47:57.150
I screwed up this slide.

00:47:57.150 --> 00:47:59.840
I've done this so many times.

00:47:59.930 --> 00:48:01.840
Let's talk a little bit more
about registering the schema.

00:48:01.870 --> 00:48:02.880
I'm just going to show you the code.

00:48:03.150 --> 00:48:04.750
Now, can you -- I don't know
if you can see this,

00:48:04.750 --> 00:48:06.700
and if you can,
I'll talk through it a little bit more,

00:48:06.700 --> 00:48:08.100
but it's very straightforward.

00:48:08.100 --> 00:48:11.980
What you'll do is you'll keep your
schema in a bundle in your application.

00:48:11.980 --> 00:48:14.080
You might as well keep
the schema localized if it

00:48:14.170 --> 00:48:15.820
corresponds to your application.

00:48:15.920 --> 00:48:20.620
Now, we mentioned that sometimes data
schemas are decoupled from applications.

00:48:20.710 --> 00:48:22.360
Certainly from the
engine's point of view,

00:48:22.460 --> 00:48:25.430
it doesn't make any assumption
that a schema correlates to

00:48:25.500 --> 00:48:27.750
any one given application.

00:48:27.820 --> 00:48:31.250
If you're just providing a schema in
your application for your own use,

00:48:31.390 --> 00:48:33.920
you can keep it inside of your resources.

00:48:33.940 --> 00:48:35.700
If you're not,
you might want to put it inside

00:48:35.700 --> 00:48:38.080
of a framework somewhere so
other applications can access it.

00:48:38.080 --> 00:48:41.800
Once you have it, it's a simple path,
and you make a call

00:48:41.820 --> 00:48:43.000
into the sync manager.

00:48:43.000 --> 00:48:46.120
Now, I'm introducing the sync
manager and API here.

00:48:46.120 --> 00:48:49.960
There's just a few objects that you'll
need to use in order to effect a sync.

00:48:50.220 --> 00:48:52.680
And the sync manager,
as the name implies,

00:48:52.710 --> 00:48:54.850
does mostly management type of functions.

00:48:54.850 --> 00:48:56.390
You use it to register your schema.

00:48:56.700 --> 00:48:59.120
You use it to register your client,
as you'll see.

00:48:59.160 --> 00:49:00.440
Very straightforward call.

00:49:00.440 --> 00:49:03.070
You just pass in the path,
and you're done.

00:49:03.160 --> 00:49:07.200
Now, the second thing I started to talk
about is registering your client.

00:49:07.200 --> 00:49:09.610
Now, you only register your client if
you haven't registered it before.

00:49:09.680 --> 00:49:13.370
So when we look at the code,
if I can get to it,

00:49:13.370 --> 00:49:19.690
I'm convinced somebody's got a voodoo
doll for this clicker somewhere.

00:49:21.490 --> 00:49:22.060
There we go.

00:49:22.110 --> 00:49:22.470
OK.

00:49:22.680 --> 00:49:25.490
So when you're registering a client,
you check to see if the

00:49:25.490 --> 00:49:27.160
client is already registered.

00:49:27.320 --> 00:49:31.120
So what you do is,
by specifying the client's identifier,

00:49:31.130 --> 00:49:33.860
you ask the sync manager
for your client object.

00:49:33.980 --> 00:49:36.750
If you get it back, great, you're done.

00:49:36.880 --> 00:49:38.240
You can just return.

00:49:38.370 --> 00:49:41.040
If not, then you'll need to register it.

00:49:41.210 --> 00:49:43.670
To register it is very similar
to registering a schema.

00:49:43.820 --> 00:49:47.100
You just tell the sync manager
that you want to register a client.

00:49:47.100 --> 00:49:49.960
Now the one difference is
when you register a client,

00:49:49.960 --> 00:49:52.100
you provide an identifier.

00:49:52.460 --> 00:49:55.760
provide both the client description
file and the identifier so that you

00:49:55.760 --> 00:50:00.300
can refer to it again in the future,
for instance, to start a sync operation.

00:50:00.460 --> 00:50:03.410
And the other difference is that
you'll get a client object back,

00:50:03.500 --> 00:50:08.300
so you can then use that to
proceed through the sync operation.

00:50:08.520 --> 00:50:10.790
Well, this is really hard.

00:50:12.550 --> 00:50:15.560
Okay, the second thing you'll do
when you register a client

00:50:15.560 --> 00:50:17.000
is specify an alert handler.

00:50:17.000 --> 00:50:18.240
This is pretty straightforward.

00:50:18.240 --> 00:50:22.980
We're just doing this so that we can sync
when other applications or servers sync.

00:50:23.020 --> 00:50:26.740
In the example that we had,
we specified programmatically to the

00:50:26.830 --> 00:50:31.910
engine that we wanted to synchronize
when applications or when servers synced.

00:50:31.960 --> 00:50:36.510
We also specified an alert handler that
gets called inside of our application.

00:50:36.520 --> 00:50:38.440
So you've got a running application.

00:50:39.060 --> 00:50:43.250
While it's executing,
if some other server or

00:50:43.250 --> 00:50:47.280
application goes off to sync,
you want to get notified so you can

00:50:47.280 --> 00:50:49.340
join in and sync at the same time.

00:50:49.360 --> 00:50:52.060
That'll happen in the main
run loop of your application,

00:50:52.060 --> 00:50:55.190
and it'll happen just with a simple
callback that we're specifying here.

00:50:55.200 --> 00:51:00.140
You should note that you could
also specify what types of clients

00:51:00.250 --> 00:51:03.480
you want to sync with in your
client description property list.

00:51:03.480 --> 00:51:07.040
It didn't really fit on the screen
when I made an example of that before,

00:51:07.040 --> 00:51:08.580
and I also wanted to highlight that.

00:51:08.660 --> 00:51:11.530
You can do it programmatically.

00:51:11.850 --> 00:51:14.790
Okay, once you've got all that done,
you're ready to sync data.

00:51:14.800 --> 00:51:16.520
So let's see what we have to do for that.

00:51:20.850 --> 00:51:25.540
The very first time you sync,
you need to do a slow sync.

00:51:25.710 --> 00:51:28.850
You do a slow sync because you don't
really have any basis to compare to.

00:51:28.940 --> 00:51:31.700
So you're going to push
up every record you have.

00:51:31.970 --> 00:51:34.040
After you've done that,
you'll be able to fast

00:51:34.040 --> 00:51:35.200
sync the next time.

00:51:35.200 --> 00:51:39.770
And we've pointed out that you want to
try to trickle sync as often as possible,

00:51:39.770 --> 00:51:42.210
and when you trickle sync,
you only want to push up

00:51:42.230 --> 00:51:43.920
deltas to make it fast.

00:51:44.310 --> 00:51:47.200
When your application is launched,
you'll want to sync.

00:51:47.360 --> 00:51:50.660
Now, when we showed the demo before,
we had a checkbox for trickle

00:51:50.660 --> 00:51:52.560
sync and a button for syncing.

00:51:52.600 --> 00:51:55.830
In a real application,
you wouldn't have a sync button,

00:51:55.870 --> 00:51:57.470
nor would you have that checkbox.

00:51:57.470 --> 00:52:00.900
You would just have trickle
sync behavior all the time.

00:52:01.120 --> 00:52:04.040
When your application starts up,
it would make sure that it had

00:52:04.040 --> 00:52:07.210
the most current set of changes,
so it would sync immediately

00:52:07.210 --> 00:52:09.050
and pull changes down.

00:52:09.160 --> 00:52:13.700
Similarly, before you exit,
you want to synchronize.

00:52:14.790 --> 00:52:17.110
If you synchronize before you
terminate your application,

00:52:17.110 --> 00:52:19.810
that ensures that changes the
user have made are not only

00:52:19.990 --> 00:52:23.900
flushed to a data file and saved,
but they're also synchronized

00:52:23.910 --> 00:52:25.570
out to the rest of the world.

00:52:27.500 --> 00:52:29.940
I've really got to figure this thing out.

00:52:29.990 --> 00:52:31.840
It's like if I pointed
at somebody over there,

00:52:31.840 --> 00:52:33.240
it seems to go.

00:52:33.260 --> 00:52:37.570
OK, so we mentioned before that Sync
Session is a finite state machine.

00:52:37.690 --> 00:52:39.950
So you have a certain set
of steps you go through.

00:52:39.990 --> 00:52:42.810
I want to point out that pulling
changes down is optional.

00:52:42.840 --> 00:52:45.030
If you want to,
you can just push changes up.

00:52:45.300 --> 00:52:47.620
So when would you want to do that?

00:52:47.690 --> 00:52:50.000
Possibly when your application's exiting.

00:52:50.020 --> 00:52:52.450
You'll just push your
changes up and quit.

00:52:52.720 --> 00:52:55.420
When users quit an application,
they don't want the application

00:52:55.470 --> 00:52:57.700
to sit there forever while
they're waiting for it to sync.

00:52:57.700 --> 00:53:00.900
They want it to just get its
business done and exit quickly.

00:53:00.900 --> 00:53:03.400
So you want to make sure you
don't spend a lot of time when

00:53:03.400 --> 00:53:06.760
an application's terminating
going in a full sync operation.

00:53:06.790 --> 00:53:09.400
So you can opt out of this at any point.

00:53:09.400 --> 00:53:11.300
And in this case,
you would just push your

00:53:11.300 --> 00:53:13.580
changes up and then exit.

00:53:13.580 --> 00:53:15.520
You do have to execute
these steps in order,

00:53:15.520 --> 00:53:15.960
though.

00:53:16.040 --> 00:53:18.500
So let's look at them in more detail.

00:53:19.710 --> 00:53:22.620
When you start a sync session,
you can specify a blocking

00:53:23.480 --> 00:53:25.450
call or a non-blocking call.

00:53:25.560 --> 00:53:28.560
A blocking call would
typically take a timeout.

00:53:28.660 --> 00:53:32.780
You don't want to call into a blocking
method and then just wait forever

00:53:32.840 --> 00:53:34.680
and have your user locked out.

00:53:34.760 --> 00:53:36.880
If you call a blocking call
from the main run loop,

00:53:36.990 --> 00:53:40.380
you typically want to specify
a timeout around two seconds.

00:53:40.430 --> 00:53:42.390
After two seconds,
you're going to get the

00:53:42.390 --> 00:53:43.850
little spinning beach ball.

00:53:43.850 --> 00:53:47.220
So you could specify an extra
second and hope it doesn't happen,

00:53:47.480 --> 00:53:50.740
but typically you want the sync
operation to start quickly or

00:53:50.740 --> 00:53:52.380
you're going to bail out of it.

00:53:52.540 --> 00:53:56.080
With a non-blocking call,
you give a call back into the engine,

00:53:56.470 --> 00:54:00.840
make a call that returns immediately,
and then at some point in the future,

00:54:00.940 --> 00:54:02.420
the sync operation will start.

00:54:02.480 --> 00:54:04.960
Now, there's a couple of issues
you have to be careful about.

00:54:05.110 --> 00:54:06.060
One is responsiveness.

00:54:06.060 --> 00:54:10.090
I just mentioned you don't want to go
off forever waiting for a sync to start.

00:54:10.190 --> 00:54:15.080
Secondly, if a user goes and makes
modifications to data,

00:54:15.080 --> 00:54:15.080
they're going

00:54:15.490 --> 00:54:17.990
You want to make sure that
you use the data at the point

00:54:18.080 --> 00:54:20.040
the session actually starts.

00:54:20.170 --> 00:54:22.960
So if your application decides
to sync and makes that call

00:54:22.960 --> 00:54:25.500
to start a sync session,
don't collect any data

00:54:25.500 --> 00:54:26.720
to use in the sync.

00:54:26.870 --> 00:54:30.460
Wait until the sync session actually
starts and then you can use it.

00:54:30.460 --> 00:54:33.780
If you have a blocking call, don't loop.

00:54:33.830 --> 00:54:37.640
If you call this blocking method and
it returns without being able to sync,

00:54:37.640 --> 00:54:41.160
it actually returns yes or no
whether or not you've got a session.

00:54:41.160 --> 00:54:42.960
Don't immediately call it again.

00:54:42.960 --> 00:54:45.540
First of all,
you'll just be banging on the engine.

00:54:45.710 --> 00:54:49.670
Typically, the reason it returned no is
because another client is syncing

00:54:49.670 --> 00:54:52.000
the same entity types as you.

00:54:52.000 --> 00:54:54.770
So if you have a phone that's
synchronizing and then address book

00:54:54.770 --> 00:54:57.960
decides it wants to trickle sync but
the phone's already synchronizing,

00:54:58.010 --> 00:55:00.750
it could take a while for
that device to finish.

00:55:00.890 --> 00:55:04.710
So if you ask the question to the engine
to start a session and it returns no,

00:55:04.710 --> 00:55:08.860
you probably want to wait a sufficient
amount of time before you try again.

00:55:08.860 --> 00:55:14.080
Or an even better approach is to just
use the non-blocking call all the

00:55:14.280 --> 00:55:16.180
So here's some code to begin a session.

00:55:16.180 --> 00:55:18.600
And notice at the very top,
the first thing that we

00:55:18.660 --> 00:55:20.350
do is we save our file.

00:55:20.360 --> 00:55:22.200
Now the code snippets I'm
showing you are actually,

00:55:22.230 --> 00:55:24.540
they're taken from the demo.

00:55:24.540 --> 00:55:27.780
So here we save our data
before we start a sync.

00:55:27.820 --> 00:55:30.480
You don't want to synchronize data
you haven't saved in a file because

00:55:30.480 --> 00:55:33.160
the next time your app starts,
if it was unable to save,

00:55:33.160 --> 00:55:36.570
you're going to be out of sync,
no pun intended, with the engine.

00:55:36.900 --> 00:55:39.760
So the first thing to do when
you're going to synchronize,

00:55:39.760 --> 00:55:40.860
save all your data.

00:55:40.940 --> 00:55:42.670
And then at the bottom here,
you can see that we're

00:55:42.680 --> 00:55:43.620
starting a session.

00:55:43.620 --> 00:55:47.090
Now I actually committed
an egregious crime here.

00:55:47.110 --> 00:55:48.560
I specified five seconds.

00:55:48.560 --> 00:55:52.920
I did that just for testing and I ended
up leaving it in the slide by mistake.

00:55:53.170 --> 00:55:56.450
I'm using a blocking call and
specifying a time long enough that

00:55:56.550 --> 00:55:59.640
the beach ball is going to come up
if it takes more than two seconds.

00:55:59.640 --> 00:56:01.190
That's going to annoy a user.

00:56:01.190 --> 00:56:04.310
So you typically want to keep that
limited to two seconds or less

00:56:04.310 --> 00:56:07.180
when you use the blocking call.

00:56:07.180 --> 00:56:10.130
The next thing you need to do
once you've actually established

00:56:10.150 --> 00:56:11.620
a sync session is negotiate.

00:56:11.620 --> 00:56:14.100
Do you want to do a slow
sync or a fast sync?

00:56:14.100 --> 00:56:17.800
So I'm going to show a little
code here from our app.

00:56:17.830 --> 00:56:20.820
Even though we mentioned that you
need to do negotiation up front

00:56:20.820 --> 00:56:23.980
and we sort of show it at the
beginning of the sync operation,

00:56:24.020 --> 00:56:27.590
you can spread a little bit of it out
if it's more natural for your app.

00:56:27.690 --> 00:56:29.970
And you'll see how we
actually did spread that out.

00:56:30.110 --> 00:56:33.250
Now in the previous talk,
we discussed the syncing modes

00:56:33.250 --> 00:56:37.300
and then talked about how we don't
actually have a call into the engine,

00:56:37.300 --> 00:56:39.660
I want a fast sync or I want a slow sync.

00:56:39.660 --> 00:56:41.620
There's no call back to your
client asking you to do that.

00:56:41.640 --> 00:56:43.060
So we're not asking it
what it wants to do.

00:56:43.060 --> 00:56:45.540
We actually have a set of
methods that you can use

00:56:45.540 --> 00:56:47.980
because it's much more flexible.

00:56:48.070 --> 00:56:50.960
So in this case,
we're checking to see if we

00:56:50.960 --> 00:56:52.300
want to do a refresh sync.

00:56:52.510 --> 00:56:57.320
So we would do a refresh sync in our
example if we lost our data file.

00:56:57.420 --> 00:57:00.750
So if we start our example code
up and our data file is gone,

00:57:00.750 --> 00:57:02.620
we'll refresh sync.

00:57:02.620 --> 00:57:04.500
That way we'll restore
everything from the engine.

00:57:04.520 --> 00:57:07.970
We'll also do a slow sync in some cases.

00:57:08.120 --> 00:57:12.410
We do a slow sync the very first
time we ever do a slow sync.

00:57:12.760 --> 00:57:16.290
Also, we catch errors with exceptions
during the sync operation.

00:57:16.370 --> 00:57:18.960
If anything goes wrong
during sync operation,

00:57:18.960 --> 00:57:22.860
on the next sync,
we force ourselves to do a slow sync.

00:57:22.860 --> 00:57:26.000
So in this case,
we're telling the session whether

00:57:26.000 --> 00:57:29.850
or not we've actually reset all the
entity names so that we can refresh.

00:57:29.850 --> 00:57:31.040
That's the first line.

00:57:31.190 --> 00:57:34.170
Or in the second if clause,
we're actually checking and

00:57:34.170 --> 00:57:37.600
we're telling the engine that we
want to push all of our records,

00:57:37.620 --> 00:57:41.550
which essentially amounts to a slow sync.

00:57:41.620 --> 00:57:44.420
But besides what you're doing,
you're also asking the engine

00:57:44.420 --> 00:57:46.360
what it wants you to do.

00:57:46.360 --> 00:57:49.760
A user might have gone and said,
"I want to reset every client

00:57:49.760 --> 00:57:53.890
from .mac." At that point,
when you sync, the engine won't want

00:57:53.890 --> 00:57:55.330
you to push any records.

00:57:55.330 --> 00:57:56.820
You're going to be reset.

00:57:56.990 --> 00:58:00.220
Also, something might have gone
wrong during the sync operation

00:58:00.220 --> 00:58:03.100
from the engine's perspective,
so the next time you sync,

00:58:03.100 --> 00:58:05.140
it will want you to do a slow sync.

00:58:05.330 --> 00:58:09.810
And we'll see where we ask those
questions in the API as we proceed.

00:58:10.050 --> 00:58:12.150
Now we're going to go push changes.

00:58:12.150 --> 00:58:14.850
Very simple flowchart here just
to show you what we're doing.

00:58:14.850 --> 00:58:17.460
If we want to push all of our records,
then we're going to get

00:58:17.460 --> 00:58:20.990
every record that we have,
convert it, and push it up to the engine.

00:58:21.010 --> 00:58:23.880
Otherwise, we'll just push up the deltas.

00:58:24.170 --> 00:58:26.000
I want to point out one thing.

00:58:26.080 --> 00:58:28.580
When you're pushing records,
you don't have to push an

00:58:28.580 --> 00:58:30.600
entire NSDictionary record.

00:58:30.800 --> 00:58:34.020
You can push something
we call an iSync change.

00:58:34.020 --> 00:58:36.580
In this case,
we've got one change to a record.

00:58:36.630 --> 00:58:41.130
We've changed the title of an event
to "Sean's Birthday." So I've got

00:58:41.130 --> 00:58:43.050
a very small iSync change object.

00:58:43.130 --> 00:58:45.700
But if I wanted to push
up the entire record,

00:58:45.740 --> 00:58:48.700
I'd have to push up all the
relationships and all the other fields.

00:58:48.700 --> 00:58:51.200
And you can see that's
a lot more information.

00:58:51.360 --> 00:58:53.620
And that can add up if you're
doing that for every record

00:58:53.620 --> 00:58:55.960
and you have a large amount,
especially when you're

00:58:55.960 --> 00:58:57.150
doing an initial sync.

00:58:57.340 --> 00:59:01.050
So if you push up an iSync change,
you'll save the engine a lot of

00:59:01.050 --> 00:59:04.050
time walking through an entire
record trying to figure out

00:59:04.050 --> 00:59:05.420
what exactly has changed in it.

00:59:07.330 --> 00:59:08.200
Here's our code.

00:59:08.200 --> 00:59:10.200
This is a little bit dense.

00:59:10.220 --> 00:59:12.700
I pointed out that negotiation
is actually split up.

00:59:12.700 --> 00:59:16.810
I showed you a previous slide where
we told the engine our intentions,

00:59:16.970 --> 00:59:19.520
but you also have to ask the
engine what it wants you to do.

00:59:19.520 --> 00:59:23.620
So we're asking it if we should actually
push changes for this entity type.

00:59:23.750 --> 00:59:25.960
We're walking through
all of our entity types,

00:59:25.960 --> 00:59:29.270
so in this case, media, assets, objects,
and event objects.

00:59:29.520 --> 00:59:31.450
We're going to ask the engine,
should we push them?

00:59:31.560 --> 00:59:33.740
There's a few reasons why it
might tell you you shouldn't.

00:59:33.820 --> 00:59:36.840
It might be resetting you
from state somewhere else,

00:59:36.840 --> 00:59:39.860
or you might have, in configuration,
told the engine,

00:59:39.860 --> 00:59:42.390
I'm not going to actually
sync this entity type.

00:59:42.470 --> 00:59:44.640
A user should be offered the choice.

00:59:44.640 --> 00:59:48.020
You might only want to sync
events and not media assets.

00:59:48.090 --> 00:59:50.500
So if you turn one of them off,
you don't have to remember it.

00:59:50.500 --> 00:59:52.260
You don't have to keep track anywhere.

00:59:52.260 --> 00:59:54.210
The engine knows that you've disabled it.

00:59:54.290 --> 00:59:56.400
So when you ask it if
you should push changes,

00:59:56.450 --> 00:59:57.210
it'll say no.

00:59:57.220 --> 01:00:00.840
If it wants you to push changes...
Then you need to ask it if it

01:00:00.840 --> 01:00:02.520
wants you to push all changes.

01:00:02.520 --> 01:00:05.690
So I just mentioned before,
sometimes the engine needs you to

01:00:05.690 --> 01:00:07.450
push everything and do a slow sync.

01:00:07.480 --> 01:00:08.980
This is where you ask it.

01:00:09.080 --> 01:00:11.950
Now the rest of this code
is pretty straightforward.

01:00:12.050 --> 01:00:14.240
We're just walking through
all of the records,

01:00:14.240 --> 01:00:17.520
either every record if we're doing
a slow sync and pushing them all,

01:00:17.520 --> 01:00:19.410
or just the changed records.

01:00:19.420 --> 01:00:21.980
And we're going through,
and at the bottom you can see

01:00:21.980 --> 01:00:24.910
the call to session to push
the changes from that record.

01:00:24.910 --> 01:00:28.760
So we're just simply pushing it up,
specifying a unique identifier.

01:00:28.760 --> 01:00:29.110
That's it.

01:00:29.120 --> 01:00:29.220
So we're going to ask it if it
wants you to push all changes.

01:00:29.220 --> 01:00:29.220
So I just mentioned before,
sometimes the engine needs you to

01:00:29.220 --> 01:00:29.240
push everything and do a slow sync.

01:00:29.240 --> 01:00:29.240
This is where you ask it.

01:00:29.350 --> 01:00:32.540
At the very bottom,
I wasn't able to fit this on this slide,

01:00:32.540 --> 01:00:35.340
so I'm going to show you another
slide that's the continuation here.

01:00:35.340 --> 01:00:38.150
If you're doing a fast sync,
you need to explicitly

01:00:38.150 --> 01:00:39.320
delete your records.

01:00:39.340 --> 01:00:43.120
So what we do here is check to see
if we've kept track of state and we

01:00:43.120 --> 01:00:45.390
have a list of any deleted records.

01:00:45.400 --> 01:00:50.170
If we do, and the engine isn't forcing
us to do a slow sync,

01:00:50.210 --> 01:00:52.590
then we push the records, the deletes up.

01:00:52.640 --> 01:00:55.760
Now why wouldn't we push the deletes
up if we're doing a slow sync?

01:00:55.800 --> 01:00:58.930
Reasoning is, the engine knows what
your previous state is.

01:00:58.940 --> 01:01:02.440
So if you push up your
entire set of records,

01:01:02.770 --> 01:01:05.400
anything you don't push up,
it treats as a delete.

01:01:05.400 --> 01:01:06.550
So that's the first step.

01:01:09.460 --> 01:01:11.860
Now we come to the fun part: Mingling.

01:01:11.920 --> 01:01:14.040
Mingling is actually pretty simple.

01:01:14.090 --> 01:01:16.380
You're going to tell the engine
that you're ready to pull changes

01:01:16.540 --> 01:01:19.900
and then the session is going to
enter into the mingling state.

01:01:20.010 --> 01:01:22.340
If other clients are
syncing at the same time,

01:01:22.340 --> 01:01:25.650
the engine is not going to return
until they've finished pushing

01:01:25.650 --> 01:01:29.200
all their changes and it's been
able to mingle from all sources.

01:01:29.320 --> 01:01:31.180
So this can take a while.

01:01:31.180 --> 01:01:33.610
The engine is going to be doing
field level differencing here,

01:01:33.610 --> 01:01:36.550
so it's going to be walking through
all the changes that come in from

01:01:36.550 --> 01:01:39.510
every source that's syncing at
this time and it's going to compare

01:01:39.590 --> 01:01:42.640
them on a field by field basis.

01:01:42.640 --> 01:01:45.720
You can call this
blocking or non-blocking.

01:01:45.740 --> 01:01:48.820
If you call it blocking, again,
you have the same set of issues.

01:01:48.940 --> 01:01:51.600
You want to make sure that
you're being responsive,

01:01:51.680 --> 01:01:54.500
so you don't want to go in and
start mingling and waiting too long

01:01:54.620 --> 01:01:56.400
for the user and a blocking call.

01:01:56.480 --> 01:02:00.340
If you call it non-blocking, though,
you have to be careful.

01:02:00.500 --> 01:02:03.870
If the user makes modifications
to data while you're syncing,

01:02:03.870 --> 01:02:07.240
the engine is going to be pushing
changes down to you that are

01:02:07.630 --> 01:02:11.200
predicated on the state you had
before you started mingling.

01:02:11.390 --> 01:02:14.290
If the user has made changes
to any of the records that the

01:02:14.290 --> 01:02:18.320
engine also has changes for,
you typically want to let the user win.

01:02:18.320 --> 01:02:22.280
So you need to have some mechanism
in your application to keep track of

01:02:22.280 --> 01:02:26.730
changes that are being made during a sync
operation and make sure they override any

01:02:26.730 --> 01:02:29.590
changes that come down from the engine.

01:02:29.890 --> 01:02:31.320
So here's our call.

01:02:31.340 --> 01:02:33.040
We're going to make a blocking call in.

01:02:33.090 --> 01:02:35.590
First, we're going to build a filtered
list of all the entities.

01:02:35.590 --> 01:02:38.150
This is similar to what we
did when we pushed entities.

01:02:38.150 --> 01:02:41.100
We asked the engine,
should I pull these entity types?

01:02:41.100 --> 01:02:43.440
If they're disabled,
or if the engine wants to

01:02:43.440 --> 01:02:46.600
be reset from your client,
it won't tell you to pull anything,

01:02:46.620 --> 01:02:48.470
so you may end up with an empty list.

01:02:48.470 --> 01:02:52.100
Then you simply ask the engine
to prepare to pull changes.

01:02:52.160 --> 01:02:54.810
That's the call that goes
into the mingling state.

01:02:55.040 --> 01:02:57.050
Now, I committed an even worse sin here.

01:02:57.050 --> 01:02:58.200
Can anybody spot it?

01:02:58.200 --> 01:03:01.030
And if you can read this,
you'll see I specified the date,

01:03:01.030 --> 01:03:02.200
distant future.

01:03:02.200 --> 01:03:04.460
So this application is
going to wait forever.

01:03:04.500 --> 01:03:06.550
Now, we actually didn't do
that in the example.

01:03:06.650 --> 01:03:09.080
I think I took this slide
from an older version of it.

01:03:09.160 --> 01:03:11.860
This is an example of something
to be very careful about.

01:03:11.860 --> 01:03:15.190
Here, your application is just going to
go and wait for the engine forever.

01:03:15.200 --> 01:03:18.500
So if something takes an incredibly
long time in another client,

01:03:18.500 --> 01:03:20.520
your client's going to be penalized.

01:03:22.660 --> 01:03:24.500
Finally, we get to pulling.

01:03:24.500 --> 01:03:27.740
When you pull records down,
you need to ask the engine if you're

01:03:27.740 --> 01:03:30.210
supposed to replace every record.

01:03:30.290 --> 01:03:32.850
If the engine's trying to replace
everything because the user said,

01:03:32.860 --> 01:03:35.850
I want to pull everything down
from .mac and clear everything and

01:03:35.850 --> 01:03:38.920
replace it from there on my machine,
it's going to tell you to

01:03:38.920 --> 01:03:40.570
replace all of your records.

01:03:40.600 --> 01:03:43.440
If that's true,
don't go and whack your data store,

01:03:43.440 --> 01:03:46.920
because you don't know if the
sync is going to be successful.

01:03:46.920 --> 01:03:48.020
Anything could go wrong.

01:03:48.020 --> 01:03:49.960
The user could pull the
plug on the machine,

01:03:49.960 --> 01:03:53.150
something could happen that could
cause your application to crash.

01:03:53.600 --> 01:03:57.550
Instead, just internally set all your
data aside and take everything

01:03:57.550 --> 01:04:00.310
you get from the engine,
and only when you're able to

01:04:00.310 --> 01:04:03.600
save that completely should you
then throw out your other data.

01:04:05.800 --> 01:04:07.500
This is pretty straightforward.

01:04:07.560 --> 01:04:10.100
You get an enumerator when
you're pulling changes.

01:04:10.100 --> 01:04:12.820
The enumerator is pretty much
like an array enumerator,

01:04:12.820 --> 01:04:14.950
except it contains iSync change objects.

01:04:15.020 --> 01:04:17.420
I talked a little bit about these before.

01:04:17.420 --> 01:04:21.650
This is an object that just contains
a list of the changes for a record.

01:04:21.650 --> 01:04:24.710
It's often more efficient,
particularly when a record

01:04:24.710 --> 01:04:27.800
has a lot of attributes and
there's only a few changes.

01:04:27.820 --> 01:04:31.970
However, sometimes with your client,
the logic might be simpler if you

01:04:31.970 --> 01:04:35.640
could just get the entire record
from the engine and just map it.

01:04:35.720 --> 01:04:39.930
You can do that by pulling the
complete record out of an iSync change.

01:04:40.060 --> 01:04:44.030
So you have your choice as to whether
or not you want to use the fields that

01:04:44.390 --> 01:04:49.310
are indicated in the change or whether
you want to pull out the entire record.

01:04:49.320 --> 01:04:51.970
We walk through the change enumerator.

01:04:52.300 --> 01:04:55.320
We pull out each iSync
change with next object,

01:04:55.360 --> 01:04:58.910
and then we apply each one
based on the change type.

01:04:58.910 --> 01:05:00.730
So let's look at that.

01:05:01.250 --> 01:05:04.250
When we're applying the changes,
we're going to use a two-phase commit.

01:05:04.260 --> 01:05:06.920
For each change that
we get from the engine,

01:05:06.920 --> 01:05:10.240
we'll either accept, reject,
or ignore it.

01:05:10.320 --> 01:05:13.420
If we accept it,
the engine will assume that we've

01:05:13.570 --> 01:05:16.560
taken it and won't give it to us again,
assuming we successfully

01:05:16.560 --> 01:05:18.110
complete the sync session.

01:05:18.120 --> 01:05:22.520
If we reject it, the engine will assume,
for some reason, we don't want it.

01:05:22.770 --> 01:05:25.320
Perhaps you have a device or
an application that doesn't

01:05:25.340 --> 01:05:27.490
fit every field on it,
so some of the fields

01:05:27.490 --> 01:05:29.930
that are handed to you,
you just can't use.

01:05:30.190 --> 01:05:33.930
So you reject that chain so you
don't keep getting hit with it.

01:05:34.130 --> 01:05:36.560
If you don't do anything,
the next time you sync,

01:05:36.740 --> 01:05:38.840
the engine is going to push
that record at you again.

01:05:39.000 --> 01:05:42.520
Now, after you've gotten every
record and successfully

01:05:42.520 --> 01:05:45.000
applied them or rejected them,
if that's what you want to do,

01:05:45.000 --> 01:05:48.000
you tell the engine to commit.

01:05:48.000 --> 01:05:52.130
At that point, the engine says, "Great,
whatever this client just told me,

01:05:52.130 --> 01:05:55.440
I'm going to believe is the truth,
and I'm going to keep track of

01:05:55.470 --> 01:05:58.460
this." So the next time you sync,
everything you accepted doesn't

01:05:58.470 --> 01:05:59.950
get pushed to you again.

01:06:00.230 --> 01:06:02.930
Everything you rejected doesn't
get pushed to you again.

01:06:03.000 --> 01:06:06.660
But if you don't make it to commit,
if your application blows up before

01:06:06.820 --> 01:06:09.640
that or something goes wrong,
the engine will then try to

01:06:09.640 --> 01:06:12.940
push all those changes back
to you on the next sync.

01:06:13.020 --> 01:06:15.860
And that's good,
because if something goes wrong,

01:06:15.860 --> 01:06:17.710
you don't want to lose all that data.

01:06:18.540 --> 01:06:20.200
So let's look at the code for it.

01:06:20.230 --> 01:06:23.450
We look at the change type,
we switch on it.

01:06:23.540 --> 01:06:27.500
If we have an add or a modify,
we simply try to apply it.

01:06:27.600 --> 01:06:29.860
What we're using is a transformer here.

01:06:29.990 --> 01:06:31.980
If we're able to
successfully transform it,

01:06:31.980 --> 01:06:34.760
then we tell the engine that
we've accepted the record.

01:06:34.760 --> 01:06:37.830
Otherwise, we tell the engine that
we're refusing the record.

01:06:38.120 --> 01:06:41.820
So in our example, if there was something
malformed in a record,

01:06:41.820 --> 01:06:44.590
something wrong with it,
we would reject it.

01:06:44.890 --> 01:06:48.570
Otherwise, if the record looked good,
we would accept it.

01:06:48.960 --> 01:06:50.890
You do the same thing for deletes.

01:06:51.010 --> 01:06:53.440
You take the delete down,
check for consistency.

01:06:53.440 --> 01:06:56.380
If you've got that ID for
that record it's referring to,

01:06:56.380 --> 01:06:57.430
you just delete it.

01:06:59.900 --> 01:07:01.980
Once you're done going
through all of that,

01:07:01.990 --> 01:07:05.110
make sure that you save all
the data to your data store

01:07:05.110 --> 01:07:07.230
before you commit to the engine.

01:07:07.390 --> 01:07:10.020
You don't want to tell the engine, "Sure,
I've taken all your changes

01:07:10.030 --> 01:07:13.100
because you've got them in
memory," and then crash and not

01:07:13.120 --> 01:07:14.830
actually write them out to a file.

01:07:14.920 --> 01:07:16.620
So we're just showing that here.

01:07:16.690 --> 01:07:18.710
And then at the very end,
we tell the session that we're

01:07:18.710 --> 01:07:20.060
finished and we're all done.

01:07:21.590 --> 01:07:23.740
So I talked a little bit
about state management before.

01:07:23.740 --> 01:07:27.300
I'll just reiterate,
you need to keep track of the adds,

01:07:27.300 --> 01:07:30.060
the deletes,
and the modifies that you do.

01:07:30.060 --> 01:07:33.020
That way, each time you sync,
you can just push up deltas,

01:07:33.100 --> 01:07:34.240
which is much faster.

01:07:34.240 --> 01:07:39.050
You need to save this info if your
application exits without synchronizing.

01:07:39.190 --> 01:07:41.320
If you don't save it,
the next time you start up,

01:07:41.400 --> 01:07:43.630
if you try to fast sync,
you'll have forgotten about

01:07:43.630 --> 01:07:44.860
the deltas from before.

01:07:44.860 --> 01:07:49.190
If you lose the delta information,
make sure that you slow sync.

01:07:49.190 --> 01:07:54.710
Remember, the most important thing is
correctness after that comes speed.

01:07:55.120 --> 01:08:00.160
So I've just got a few best practices
to describe to you before we close.

01:08:00.250 --> 01:08:01.460
Sync quickly and often.

01:08:01.460 --> 01:08:03.260
We keep talking about trickle syncing.

01:08:03.320 --> 01:08:06.470
I keep banging on this and
saying it over and over again.

01:08:06.470 --> 01:08:08.980
It's really the best
thing to do for the user.

01:08:08.980 --> 01:08:11.150
The more often you sync,
the more frequently and

01:08:11.150 --> 01:08:14.100
the quicker you can sync,
the more transparent it becomes,

01:08:14.120 --> 01:08:17.610
the less load on the system and the
better the experience for the user.

01:08:17.730 --> 01:08:21.200
Your data is getting moved around
and it's where people want it

01:08:21.200 --> 01:08:23.140
at the time that it's changed.

01:08:23.140 --> 01:08:24.840
You want to be responsive.

01:08:24.840 --> 01:08:28.920
It's very important that you don't
lose responsiveness in an application.

01:08:28.920 --> 01:08:31.950
Users hate it when they're banging in
the text field or trying to do something

01:08:32.010 --> 01:08:36.880
or get a menu to come down and they
don't know why the application is hung.

01:08:36.880 --> 01:08:38.460
You want to provide user feedback.

01:08:38.480 --> 01:08:43.760
By that I'm talking about something like
a progress indicator or a progress bar,

01:08:43.860 --> 01:08:47.660
possibly a status line with some text
telling the user what's going on.

01:08:47.760 --> 01:08:50.250
Depending on how much data
your application syncs and

01:08:50.300 --> 01:08:53.100
what type of application it is,
if it's a pro app or if it's

01:08:53.100 --> 01:08:53.100
a user-friendly application,
you want to be responsive.

01:08:53.100 --> 01:08:53.100
You want to be responsive.

01:08:53.100 --> 01:08:53.100
It's very important that you don't
lose responsiveness in an application.

01:08:53.100 --> 01:08:53.100
Users hate it when they're banging in
the text field or trying to do something

01:08:53.100 --> 01:08:53.140
or get a menu to come down and they
don't know why the application is hung.

01:08:53.140 --> 01:08:53.140
It's very important that you don't
lose responsiveness in an application.

01:08:53.140 --> 01:08:55.510
Depending on how much data or if it's
just a simple application that users

01:08:55.510 --> 01:08:58.470
don't really pay much attention to,
you might want to give them

01:08:58.470 --> 01:09:00.940
more or less information,
but make sure that you

01:09:00.950 --> 01:09:02.140
show them something.

01:09:02.140 --> 01:09:04.030
You need to offer choices to the user.

01:09:04.030 --> 01:09:07.540
If you go to quit an application and
start syncing and you can't get a session

01:09:07.770 --> 01:09:10.460
within a reasonable amount of time,
you might want to pop a

01:09:10.560 --> 01:09:13.200
panel up to the user saying,
do you want me to synchronize

01:09:13.210 --> 01:09:14.480
your data before I exit?

01:09:14.480 --> 01:09:16.340
That way the user has more of a choice.

01:09:16.340 --> 01:09:19.050
Similarly, when you start up,
if you're not able to get

01:09:19.050 --> 01:09:23.060
a sync session right away,
you might want to do a synch session.

01:09:23.060 --> 01:09:29.450
You might want to notify the user
that you don't have all the data,

01:09:29.450 --> 01:09:33.720
but you certainly don't
want to make a user wait 10,

01:09:33.830 --> 01:09:36.650
15,
30 seconds for another client to finish

01:09:36.650 --> 01:09:39.100
syncing before your application starts.

01:09:39.100 --> 01:09:42.270
Now, I put this here almost as a joke
when I first wrote the slides,

01:09:42.270 --> 01:09:43.820
and it sounds kind of ridiculous.

01:09:43.820 --> 01:09:45.370
Don't corrupt the user's data.

01:09:45.390 --> 01:09:48.030
I might as well tell you,
write an application that links

01:09:48.030 --> 01:09:49.660
and doesn't crash when it runs.

01:09:49.660 --> 01:09:52.480
But this is actually a critical point.

01:09:52.690 --> 01:09:53.020
Keep in mind that when you start up,
you don't want to have a user wait 10,

01:09:53.020 --> 01:09:53.020
15,
30 seconds for another client to finish

01:09:53.020 --> 01:09:53.020
syncing before your application starts.

01:09:53.020 --> 01:09:56.150
So keep in mind that the data that
you're synchronizing is not only being

01:09:56.150 --> 01:09:59.430
synchronized with your application,
but it's being pushed out

01:09:59.430 --> 01:10:00.950
to other applications.

01:10:01.010 --> 01:10:03.460
So if you corrupt some data,
it's going to fan out

01:10:03.550 --> 01:10:04.860
to other applications.

01:10:05.040 --> 01:10:06.170
It might fan out to devices.

01:10:06.170 --> 01:10:10.400
It'll fan out across .Mac,
and it'll have catastrophic effects.

01:10:10.400 --> 01:10:15.930
So it's very important to test that last
1%. Test all the boundary conditions.

01:10:15.930 --> 01:10:17.820
Make sure that you handle errors.

01:10:17.820 --> 01:10:20.630
It's really critical when
you write a sync client that

01:10:20.630 --> 01:10:22.170
you get all of that right.

01:10:22.170 --> 01:10:22.980
It's very important.

01:10:22.980 --> 01:10:25.590
important to have correctness.

01:10:28.060 --> 01:10:29.760
A couple people you can contact.

01:10:29.810 --> 01:10:31.330
We have Developer Relations.

01:10:31.520 --> 01:10:33.660
We also have Technology Evangelist.

01:10:33.690 --> 01:10:35.390
The names are here.

01:10:35.520 --> 01:10:39.010
Please also, we're looking forward to
getting suggestions from people.

01:10:39.230 --> 01:10:42.240
File radars when you encounter
problems and stay in touch with us.

01:10:42.440 --> 01:10:46.160
And don't hesitate to contact these two
people if you have additional questions.

01:10:46.180 --> 01:10:49.840
So a couple more things you
can look at for information.

01:10:49.840 --> 01:10:51.760
If I can get to it.

01:10:51.940 --> 01:10:52.270
Okay.

01:10:52.640 --> 01:10:54.620
We've got a lot of
reference documentation.

01:10:54.620 --> 01:10:58.150
We've got some concept documentation
that's only available online.

01:10:58.370 --> 01:11:03.160
The reference is actually also available
on the Tiger DVD that we gave you.

01:11:03.160 --> 01:11:05.990
Also on the Tiger DVD,
the examples that we showed you,

01:11:06.050 --> 01:11:08.040
all the source code
is there in a project.

01:11:08.160 --> 01:11:10.660
It's in Developer Example Sync Services.

01:11:10.740 --> 01:11:11.240
Have a look at it.

01:11:11.240 --> 01:11:14.990
You'll see everything I talked
about in as much detail as you want.