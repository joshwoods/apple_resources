WEBVTT

00:00:12.500 --> 00:00:16.240
Please welcome from Apple Computer,
Robin Mikawa.

00:00:16.240 --> 00:00:25.140
All right, so let's get started.

00:00:25.750 --> 00:00:27.110
My name is Robin Mikawa.

00:00:27.310 --> 00:00:30.720
I'm the manager of the type
engineering team at Apple Computer,

00:00:30.880 --> 00:00:37.190
and I'm going to be here talking to you
today about the font APIs on Mac OS X.

00:00:37.380 --> 00:00:41.330
So before I get started,
let me give you some background and an

00:00:41.330 --> 00:00:43.640
explanation why are we all here today.

00:00:43.780 --> 00:00:46.310
Why are fonts so important?

00:00:50.190 --> 00:00:53.170
First and foremost,
the thing to remember about fonts

00:00:53.250 --> 00:00:56.300
is that they're inextricably
tied together with text.

00:00:56.360 --> 00:00:59.300
So if you're working with text,
you are working with fonts.

00:00:59.630 --> 00:01:01.100
That's really the thing to remember.

00:01:01.100 --> 00:01:06.870
Even if you're developing, let's say,
a simple application terminal emulator

00:01:06.920 --> 00:01:12.420
that only uses one font at a time,
even nowadays, we provide the option for

00:01:12.530 --> 00:01:14.830
users to set your preferences.

00:01:14.940 --> 00:01:17.030
So in that case,
you'll have to deal with fonts and

00:01:17.030 --> 00:01:20.080
being able to list it and allow
your users to set your preferences.

00:01:20.100 --> 00:01:22.990
users to select the fonts.

00:01:23.420 --> 00:01:26.000
Now, second, fonts have a long history.

00:01:26.000 --> 00:01:27.700
They've evolved over time.

00:01:27.700 --> 00:01:31.360
You've got all these
different formats available,

00:01:31.360 --> 00:01:35.430
and users can and have found them
frustrating or difficult to use.

00:01:35.430 --> 00:01:36.360
They're tricky.

00:01:36.360 --> 00:01:39.130
Some have multiple files that
you have to carry across.

00:01:39.290 --> 00:01:42.190
Others, well,
they're all different formats.

00:01:42.190 --> 00:01:43.450
They're all different styles.

00:01:43.450 --> 00:01:47.550
So what we've done on the system is
made it a lot easier for both the

00:01:47.550 --> 00:01:52.500
users and you as developers to take
advantage of all these technologies.

00:01:52.500 --> 00:01:57.530
And have consistent, reliable results,
make it really simple to work with fonts.

00:01:57.730 --> 00:02:01.330
And so what you're going to get
out of today's session is how to

00:02:01.330 --> 00:02:05.750
hook into the operating system and
really make your applications shine,

00:02:05.750 --> 00:02:08.150
take up to the front of the pack,
you know,

00:02:08.150 --> 00:02:10.490
become leaders in the world of fonts.

00:02:12.000 --> 00:02:15.780
So just to give you a short overview
of what the presentation is,

00:02:15.780 --> 00:02:18.520
I'm going to be talking about
just how to get started.

00:02:18.520 --> 00:02:21.340
We're going to go right
into the meat of the matter.

00:02:21.340 --> 00:02:23.750
We're going to show you
programming techniques,

00:02:23.750 --> 00:02:26.630
tips and tricks, hints,
stuff that you shouldn't do.

00:02:26.630 --> 00:02:29.910
And along the way,
you're going to get some

00:02:29.990 --> 00:02:34.550
glimpses into the future,
what we're working on for Tiger,

00:02:34.550 --> 00:02:38.880
as well as the roadmap for
longer term beyond Tiger.

00:02:40.050 --> 00:02:42.420
So let's get started.

00:02:45.010 --> 00:02:48.370
All right, as developers,
and I know exactly how you feel,

00:02:48.540 --> 00:02:50.940
one of the first questions,
maybe not the first one,

00:02:50.940 --> 00:02:52.990
but at least maybe the
second or third one,

00:02:52.990 --> 00:02:55.740
is what APIs are available
and how should I use them?

00:02:55.740 --> 00:02:59.700
What I've shown you here
is not only the layering,

00:02:59.960 --> 00:03:04.990
but also what each component or
API set is really tailored for.

00:03:05.020 --> 00:03:07.470
So to get started...

00:03:08.120 --> 00:03:10.500
Up at the upper left, we've got Cocoa.

00:03:10.590 --> 00:03:14.500
That is the application
framework for Mac OS X.

00:03:14.580 --> 00:03:17.550
So if you're starting from scratch
or you have the option to switch

00:03:17.740 --> 00:03:20.080
over to the Cocoa framework,
great.

00:03:20.280 --> 00:03:22.230
You're going to get a lot
of this support for free.

00:03:23.120 --> 00:03:25.160
Now,
if you want to do user interface text,

00:03:25.320 --> 00:03:26.870
you've got HIToolbox.

00:03:27.060 --> 00:03:31.150
That is the engine for drawing
user interface text as well as

00:03:31.150 --> 00:03:34.600
measuring it and then handling all
the font support underneath it,

00:03:34.600 --> 00:03:38.560
such as substituting the appropriate
fonts for different languages.

00:03:38.560 --> 00:03:42.560
Now, underlying that is the
multilingual text engine.

00:03:42.560 --> 00:03:48.290
What that does is it handles
the text editing and static text

00:03:48.290 --> 00:03:51.550
behavior in HIToolbox itself.

00:03:52.230 --> 00:03:56.130
There's also support for
handling a document-based model,

00:03:56.130 --> 00:03:59.440
as well as doing a font user interface.

00:03:59.550 --> 00:04:04.660
And so all of that allows you to
build essentially a very basic text

00:04:04.660 --> 00:04:08.220
editing application just by using MLTE.

00:04:09.340 --> 00:04:12.480
Now, underlying all of this is Atsui.

00:04:12.480 --> 00:04:16.500
You've got Apple Type Services for
Unicode imaging.

00:04:16.500 --> 00:04:18.220
People have asked me that before.

00:04:18.220 --> 00:04:19.570
That's the official name.

00:04:19.570 --> 00:04:23.740
What it is is the text
layout engine for Mac OS X.

00:04:23.740 --> 00:04:27.610
It provides support for positioning
text in the right places,

00:04:27.610 --> 00:04:29.980
handling the fonts, the graphics.

00:04:30.200 --> 00:04:32.760
All of that stuff is abstracted
out from underneath you.

00:04:32.760 --> 00:04:35.090
It also handles things
like justification,

00:04:35.200 --> 00:04:38.880
font features, a lot of details that you
don't need to worry about.

00:04:39.200 --> 00:04:42.810
But that you can hook in at that layer
if you just want to take advantage

00:04:42.940 --> 00:04:44.630
of some parts of the system services.

00:04:46.430 --> 00:04:48.450
Now, of course,
we've got the graphics system.

00:04:48.460 --> 00:04:49.660
You've all heard about it.

00:04:49.820 --> 00:04:52.690
It's Quartz.

00:04:52.800 --> 00:05:09.300
[Transcript missing]

00:05:09.760 --> 00:05:12.370
And then underlying all
of that is ATS itself.

00:05:12.590 --> 00:05:14.240
That's Apple Type Services.

00:05:14.280 --> 00:05:17.160
And that's the core
font system on Mac OS X.

00:05:17.220 --> 00:05:21.700
And so what that gives you is a way to
hook into the way fonts are tracked,

00:05:22.210 --> 00:05:25.660
detailed information about the fonts,
such as the metrics,

00:05:25.780 --> 00:05:29.240
and it's really what serves
all the font information up to

00:05:29.250 --> 00:05:31.390
the other parts of the system.

00:05:31.630 --> 00:05:34.170
Now you'll notice there's one
component I've mentioned in

00:05:34.190 --> 00:05:36.740
the past that isn't up here,
and that's Quick Draw.

00:05:36.740 --> 00:05:40.960
Quick Draw as a tiger
has been deprecated.

00:05:40.960 --> 00:05:42.130
Now don't panic.

00:05:42.220 --> 00:05:43.450
It's not going away.

00:05:43.450 --> 00:05:47.100
It's just we've marked it in
the interfaces and allowed you

00:05:47.310 --> 00:05:51.110
to or let you know that we're
recommending that you move on to

00:05:51.110 --> 00:05:53.800
other technologies such as Quartz.

00:05:53.880 --> 00:05:57.960
We've made sure there's additional
support in there to at least match

00:05:57.960 --> 00:06:01.360
or parallel the functionality
that you become used to.

00:06:01.500 --> 00:06:04.480
There's going to be a discussion
about it later in the week

00:06:04.610 --> 00:06:07.630
at the graphics session,
and you can listen in on

00:06:07.630 --> 00:06:09.740
those at that point in time.

00:06:12.390 --> 00:06:12.690
All right.

00:06:12.760 --> 00:06:15.950
So next up,
as opposed to you as developers,

00:06:16.040 --> 00:06:18.740
where do your users get started?

00:06:18.740 --> 00:06:20.560
Where are they going to
see the user interface?

00:06:20.560 --> 00:06:22.890
How do they get at the
fonts that they want?

00:06:22.960 --> 00:06:24.280
Where are the commands?

00:06:24.410 --> 00:06:26.240
How do they process the fonts?

00:06:26.280 --> 00:06:30.320
And so one of the things we noticed
at Apple was that there really hasn't

00:06:30.410 --> 00:06:34.880
been any guidelines for providing a
consistent user interface for fonts.

00:06:34.950 --> 00:06:36.760
Think of it this way.

00:06:36.760 --> 00:06:38.720
You've got the file menu.

00:06:38.720 --> 00:06:41.000
Most of you know it's like, okay,
we've got a couple commands in

00:06:41.000 --> 00:06:42.280
there that should be in there.

00:06:42.300 --> 00:06:43.100
Edit menus.

00:06:43.100 --> 00:06:45.970
In a similar way,
we're recommending that you move

00:06:45.970 --> 00:06:47.980
to this model for your font menu.

00:06:47.980 --> 00:06:51.820
Now, the key thing to remember here
is that first command up there,

00:06:51.820 --> 00:06:52.640
show fonts.

00:06:52.730 --> 00:06:56.960
That's really where we're going
to focus all of our new features,

00:06:56.960 --> 00:07:00.520
our development,
our ease of use on the font panel.

00:07:00.520 --> 00:07:03.480
That command shows and
hides the font panel.

00:07:03.480 --> 00:07:05.850
Now,
we've made it really easy by building

00:07:05.850 --> 00:07:08.030
in the support in Interface Builder.

00:07:08.030 --> 00:07:10.140
You can just drag in the font menu.

00:07:11.190 --> 00:07:13.320
The other items,
the other commands in there,

00:07:13.320 --> 00:07:17.020
if you don't want to support them,
you can simply gray them out in the menu.

00:07:17.020 --> 00:07:20.250
But you probably already have
commands like this spread out

00:07:20.250 --> 00:07:22.320
somewhere in your menu structure.

00:07:22.320 --> 00:07:26.300
The idea is so that users know exactly
where to go for at least their really

00:07:26.300 --> 00:07:28.580
basic commands for dealing with fonts.

00:07:30.130 --> 00:07:33.580
Now, going along with Quickdraw
being deprecated,

00:07:33.580 --> 00:07:37.620
we're highly recommending that
you move away from the old font

00:07:37.620 --> 00:07:40.700
and style menus that you used to
see in Quickdraw applications.

00:07:40.700 --> 00:07:45.200
One of the key things is that
users have found it confusing.

00:07:45.240 --> 00:07:48.620
Sometimes they wouldn't even use the
style menu because they couldn't get

00:07:48.620 --> 00:07:50.540
at exactly the fonts that they wanted.

00:07:50.540 --> 00:07:54.390
And so we've been working on ways
to make sure that that's much more

00:07:54.390 --> 00:07:56.370
easy to do with the font panel.

00:07:58.050 --> 00:08:00.000
All right, so that's the basics.

00:08:00.020 --> 00:08:02.850
I just covered how to get started,
and let's just dive into the

00:08:02.850 --> 00:08:03.900
rest of the presentation.

00:08:03.900 --> 00:08:07.620
And I'll give you another
engineer on my team,

00:08:07.860 --> 00:08:09.370
Nathan Taylor, to talk about them.

00:08:13.170 --> 00:08:15.700
Thank you, Robin.

00:08:15.770 --> 00:08:17.240
Hi, I'm Nathan Taylor.

00:08:17.540 --> 00:08:19.620
I'm a software engineer with
the Type Engineering team,

00:08:19.620 --> 00:08:22.230
and my responsibilities
include many of the APIs that

00:08:22.230 --> 00:08:23.910
we're going to show you today.

00:08:23.920 --> 00:08:26.070
So,
what I'm here to talk about are some of

00:08:26.070 --> 00:08:30.150
the basic programming techniques that
you can implement in your applications

00:08:30.150 --> 00:08:32.940
to bring it to the head of the pack,
as Robin said.

00:08:32.960 --> 00:08:36.480
There are three basic items
we want you to take from this.

00:08:36.480 --> 00:08:40.280
One, and foremost,
adopt the font panel in your application.

00:08:40.880 --> 00:08:43.430
The font panel is the common
interface that we have

00:08:43.430 --> 00:08:45.120
provided for accessing fonts.

00:08:45.220 --> 00:08:48.970
It solves a lot of the previous
problems with font menus and adds

00:08:49.080 --> 00:08:51.810
new functionality for the users.

00:08:52.150 --> 00:08:55.900
It's also important to consider
this in providing a consistent user

00:08:55.900 --> 00:09:02.220
interface for accessing fonts throughout
the system via your application.

00:09:02.290 --> 00:09:06.350
The second item is to handle font
notifications in your application.

00:09:06.510 --> 00:09:11.510
These notifications are provided to you
so that you can respond to changes to

00:09:11.510 --> 00:09:14.940
the font registry that a user may enact.

00:09:15.420 --> 00:09:19.400
And the third item up here,
store font references.

00:09:19.570 --> 00:09:24.040
How should you store font references in
your document-- in the user documents

00:09:24.340 --> 00:09:26.340
now and going forward with the system?

00:09:26.380 --> 00:09:28.610
And I'll cover that a bit later.

00:09:28.830 --> 00:09:32.980
Before I show you how to do this,
let me give you a brief demo

00:09:32.980 --> 00:09:36.630
of what these things will
provide for your application.

00:09:42.330 --> 00:09:44.700
What I'm going to do is
fire up a simple app here.

00:09:44.820 --> 00:09:48.270
This is your basic
Hello World application written

00:09:48.270 --> 00:09:50.040
with the Carbon frameworks.

00:09:50.240 --> 00:09:53.840
And what I have here is a basic
window with some pretty plain text.

00:09:53.840 --> 00:09:56.590
So now I'm going to
bring up the font panel.

00:09:57.280 --> 00:10:00.340
And as you can see,
we have the font panel implemented

00:10:01.800 --> 00:10:07.880
through a pretty standard fonts
menu according to the HI guidelines.

00:10:08.240 --> 00:10:10.460
Now,
one of the first things your application

00:10:10.460 --> 00:10:14.160
is going to need to do when a user
changes a font is respond to that and

00:10:14.260 --> 00:10:16.860
actually change the font in the document.

00:10:16.970 --> 00:10:20.700
So let me pick another font here,
Heffler Text 96 point,

00:10:20.820 --> 00:10:24.180
and you can see that I've
implemented basic font changing

00:10:24.680 --> 00:10:27.490
within this application.

00:10:28.340 --> 00:10:31.200
So besides just the basic
support for the font panel,

00:10:31.200 --> 00:10:34.960
which you can see right here,
there's also additional functionality

00:10:34.960 --> 00:10:37.900
that the font panel provides
and you can choose to implement.

00:10:37.970 --> 00:10:42.550
This is some nice features
such as font effects.

00:10:42.610 --> 00:10:45.900
You can see I just implemented
this panel bar right here.

00:10:45.970 --> 00:10:49.380
These effects provide things like shadow,

00:10:49.630 --> 00:10:53.640
Colors, Underline, and Strike Through,
things that go above and beyond what

00:10:53.640 --> 00:10:55.260
the font itself actually provides.

00:10:55.260 --> 00:10:57.950
This information is provided
to your application through the

00:10:57.950 --> 00:11:00.680
same mechanism that a lot of
the font panel information is.

00:11:02.370 --> 00:11:07.010
In addition to the font effects,
there are also typographic

00:11:07.060 --> 00:11:11.380
features that the user can access
through the typography panel.

00:11:11.610 --> 00:11:14.850
As you can see, Heffler Text has a
bunch of features here,

00:11:14.850 --> 00:11:17.500
and these include things
like ligature control.

00:11:17.580 --> 00:11:19.970
This allows the user to have
extra control over the fonts

00:11:19.970 --> 00:11:22.750
that support these features,
so they can turn off or turn on

00:11:22.910 --> 00:11:25.480
some of the special ligatures
that a font might have.

00:11:25.500 --> 00:11:27.870
For example,
our Zappfino font has this cool

00:11:28.230 --> 00:11:31.810
ligature that when you type Zappfino,
it makes one single glyph for

00:11:31.810 --> 00:11:33.570
the whole name of the font.

00:11:35.030 --> 00:11:38.020
Now, the other thing to worry about
when implementing support for the

00:11:38.120 --> 00:11:40.780
font panel is handling user focus.

00:11:40.870 --> 00:11:45.050
The most common user focus change that
you need to be worried about and that

00:11:45.050 --> 00:11:48.240
you won't probably forget is tracking
the user's position through a body of

00:11:48.240 --> 00:11:51.260
text and through different style runs.

00:11:51.260 --> 00:11:56.480
But one that is often forgotten is
tracking the change between windows.

00:11:56.510 --> 00:12:00.760
So I just brought up a second
window here with another greeting.

00:12:00.760 --> 00:12:03.500
And let me set the font
on that real quick.

00:12:06.290 --> 00:12:10.100
Now, you see I have Cochin selected here.

00:12:10.550 --> 00:12:13.080
If I change windows,
I've implemented here tracking of

00:12:13.080 --> 00:12:15.240
the user focus between windows.

00:12:15.290 --> 00:12:18.630
When I switch to the other window,
Heffler text is selected.

00:12:18.800 --> 00:12:21.200
Let me do that again so you can see.

00:12:21.270 --> 00:12:23.220
Now it's back to Cochin.

00:12:23.920 --> 00:12:27.340
Finally, I mentioned font notifications.

00:12:27.380 --> 00:12:30.480
And so let me turn on
notifications to my application.

00:12:30.490 --> 00:12:31.920
I'm going to subscribe to them.

00:12:31.950 --> 00:12:34.920
Now the demo app is listening for these.

00:12:34.930 --> 00:12:37.220
And I'm going to be a user,
and I'm going to disable

00:12:37.260 --> 00:12:39.600
a font using Font Book.

00:12:39.630 --> 00:12:43.700
Let me go right after Cochran
there and turn it off.

00:12:44.880 --> 00:12:47.450
At Hide Font Book,
you'll see that the demo application

00:12:48.020 --> 00:12:49.920
has received a notification.

00:12:49.920 --> 00:12:50.530
This is gratuitous.

00:12:50.590 --> 00:12:52.040
You don't need to do
this in your application,

00:12:52.040 --> 00:12:55.400
but the alert is here
to illustrate the point.

00:12:55.470 --> 00:12:59.740
And as you can see,
this text has now changed.

00:12:59.780 --> 00:13:03.750
It is now using a substitute font,
and I handled that substitution

00:13:04.120 --> 00:13:07.560
in my notification callback so
that the text didn't disappear

00:13:07.580 --> 00:13:09.500
in my simple text engine here.

00:13:10.030 --> 00:13:12.740
And that about covers
it for the basic demo.

00:13:12.840 --> 00:13:16.850
So let's go back to the slides
and dive right into how you can

00:13:16.850 --> 00:13:19.060
implement this in your application.

00:13:19.060 --> 00:13:22.570
So first, let's look at how to
adopt the Font Panel.

00:13:23.970 --> 00:13:27.050
The first thing you need to
do is how do you get this font

00:13:27.090 --> 00:13:28.900
panel in your application.

00:13:28.970 --> 00:13:32.800
As Robin mentioned,
use Interface Builder for

00:13:32.800 --> 00:13:37.460
Carbon or Cocoa and drag the
font menu into your menu bar.

00:13:37.540 --> 00:13:41.180
In Cocoa, once you've done that,
it's pretty much free for

00:13:41.220 --> 00:13:43.220
all the basic view classes.

00:13:43.580 --> 00:13:45.890
In Carbon,
there's a little bit more work.

00:13:46.010 --> 00:13:47.480
And so let me go into that.

00:13:47.560 --> 00:13:52.680
There are three basic steps once you've
put the font panel in your application.

00:13:52.800 --> 00:13:55.560
So you need to show and hide
the font panel on demand.

00:13:55.650 --> 00:13:58.320
You need to handle user selection events.

00:13:58.400 --> 00:14:00.970
And you need to handle user focus.

00:14:01.610 --> 00:14:05.680
So showing and hiding the font
panel is pretty straightforward.

00:14:05.710 --> 00:14:07.980
It's supported through the
standard event handler.

00:14:08.000 --> 00:14:13.420
And if you create a show fonts menu item
and give it that SHFP tag I have here,

00:14:13.420 --> 00:14:17.670
the standard command identifier
for the show/hide font panel,

00:14:17.850 --> 00:14:22.220
you will get much of the support
to hide and show the font panel

00:14:22.220 --> 00:14:24.800
with the selection through
the standard event handler.

00:14:24.950 --> 00:14:28.120
You can also handle that event
yourself if you choose to.

00:14:29.230 --> 00:14:31.690
Again, font selection events are
important because that's where

00:14:31.690 --> 00:14:34.330
the user interacts with your
application through the font panel.

00:14:34.340 --> 00:14:38.420
They'll select a font, a size,
and you should be able to handle

00:14:38.420 --> 00:14:40.650
it and show it in the current
selection that they have.

00:14:40.720 --> 00:14:43.070
And finally, as I showed,
user-focused tracking

00:14:43.200 --> 00:14:44.960
between windows is important.

00:14:44.960 --> 00:14:48.150
There's also another stage of
user-focused tracking that's important.

00:14:48.160 --> 00:14:52.900
When the user has closed all windows or
just interim between switching windows,

00:14:52.930 --> 00:14:55.400
you want to be able to clear
the state of the font panel.

00:14:56.160 --> 00:14:58.600
And so I'll go into,
when I show you the code,

00:14:58.600 --> 00:15:00.260
the simple steps to do that.

00:15:01.770 --> 00:15:05.050
So handling font selection
is pretty straightforward.

00:15:05.290 --> 00:15:07.370
The first thing you're going to
do is you're going to receive font

00:15:07.450 --> 00:15:10.040
selection events from the font panel.

00:15:10.070 --> 00:15:14.370
These events contain information
about the user's selection.

00:15:14.760 --> 00:15:18.570
The first thing you're probably going to
want to pull out of here is the typeface.

00:15:18.570 --> 00:15:23.000
That can be provided by family,
by typeface directly,

00:15:23.000 --> 00:15:25.210
and it will probably also
include size information.

00:15:25.220 --> 00:15:28.850
As I mentioned in the demo,
additional information such

00:15:28.880 --> 00:15:33.420
as typographic features,
text effects, and even variation instance

00:15:33.420 --> 00:15:37.570
information could be provided
through the event mechanism.

00:15:37.580 --> 00:15:40.910
We've had many requests for
support for variation instances,

00:15:40.910 --> 00:15:44.510
and it's now available through
the typographic features panel.

00:15:47.910 --> 00:15:51.620
So let's take a look at how to implement
font selection in your application.

00:15:51.710 --> 00:15:54.440
This is a really simple
event handler here.

00:15:54.510 --> 00:15:59.760
And what I've got is I look for
the basic class of the event.

00:16:00.110 --> 00:16:04.200
Then I check to make sure to see
if it's a font selection event,

00:16:04.200 --> 00:16:08.760
at which point I select and extract the
parameters from the event that I need.

00:16:08.830 --> 00:16:11.500
In this case,
I'm pulling out the ATSU font

00:16:11.740 --> 00:16:13.380
ID and the ATSU font size.

00:16:13.440 --> 00:16:15.500
I'll then pass those
on to my text engine,

00:16:15.560 --> 00:16:17.920
apply them to the user's
current selection,

00:16:17.980 --> 00:16:19.360
and then move on.

00:16:19.420 --> 00:16:21.780
Here's the point where you'd also
want to pull out the extra parameters,

00:16:21.780 --> 00:16:25.040
such as the type effects,
typographic features,

00:16:25.080 --> 00:16:27.900
and anything else you
might want from this event.

00:16:28.420 --> 00:16:32.170
Now, handling user focus is
another simple thing to do,

00:16:32.180 --> 00:16:34.250
and let's take a look at it.

00:16:37.060 --> 00:16:38.360
All right.

00:16:38.620 --> 00:16:44.510
So this first block of code shows how
to handle user focus when a window

00:16:44.510 --> 00:16:47.270
focus acquired event comes through.

00:16:47.270 --> 00:16:51.610
The same code would be used when you're
switching between users' selections.

00:16:52.240 --> 00:16:56.170
The basic flow here is
you extract your target.

00:16:56.240 --> 00:16:59.000
This is where you want
your events to be sent.

00:16:59.280 --> 00:17:02.630
Then you extract the current
text style from that target.

00:17:02.630 --> 00:17:05.610
Finally,
calling set font info for selection,

00:17:05.610 --> 00:17:10.170
you pass in the style and the target,
and that causes the font panel to select

00:17:10.260 --> 00:17:12.800
the current style within the window.

00:17:14.970 --> 00:17:21.810
When the focus from the window
is relinquished by the event

00:17:21.810 --> 00:17:21.810
window focus relinquished,

00:17:21.980 --> 00:17:25.030
You could call set font
info for selection.

00:17:25.190 --> 00:17:28.330
Here, it's important to note,
you just pass in null for

00:17:28.470 --> 00:17:31.060
the target and the style,
and that clears the

00:17:31.060 --> 00:17:32.040
state of the font panel.

00:17:32.040 --> 00:17:35.150
Additionally,
that instructs the font panel to

00:17:35.180 --> 00:17:39.300
discontinue sending notifications
to the previous target.

00:17:40.950 --> 00:17:46.820
All right, the next item we have to cover
is handling font notifications.

00:17:46.890 --> 00:17:48.680
Font notifications are
pretty simple to do,

00:17:48.680 --> 00:17:51.020
but they provide a lot
of functionality for you.

00:17:51.020 --> 00:17:54.970
And let's look at what you can
get and what you can do with them.

00:17:55.350 --> 00:17:58.120
The first thing to do with
notifications is you need to subscribe.

00:17:58.170 --> 00:18:02.660
And you do this by creating a callback
and using the appropriate API.

00:18:02.800 --> 00:18:05.730
Subscribe that callback to notifications.

00:18:05.900 --> 00:18:09.150
In your callback,
it's important that you do

00:18:09.150 --> 00:18:10.640
the work that you need to do.

00:18:10.740 --> 00:18:14.100
This could involve updating documents,
like I did in the demo,

00:18:14.100 --> 00:18:16.780
with custom font substitution.

00:18:16.870 --> 00:18:20.880
Or if you have a standard
font menu or font list,

00:18:20.960 --> 00:18:22.360
updating that.

00:18:22.440 --> 00:18:26.940
It's really important to track the
notifications so that a user doesn't have

00:18:27.040 --> 00:18:32.420
to quit and relaunch your application to
see changes they made to the font system.

00:18:33.300 --> 00:18:37.110
Other things you can do with font
notifications are you can notify the

00:18:37.540 --> 00:18:41.200
system of changes you've made to the
font directories or the registry.

00:18:41.500 --> 00:18:44.290
There's a simple API to
notify the system of changes,

00:18:44.290 --> 00:18:47.760
and you'll want to do this if you're
installing fonts from an installer

00:18:47.760 --> 00:18:50.930
application or some installer
block in your code that drops

00:18:50.940 --> 00:18:53.420
fonts in the standard directory.

00:18:54.090 --> 00:18:57.040
And finally, the little bit more
interesting option you can do,

00:18:57.160 --> 00:19:00.360
and it interacts with some
of the other font management

00:19:00.360 --> 00:19:06.430
APIs that we have available,
is to batch your processing events.

00:19:06.680 --> 00:19:11.530
Things like ATS Font Activate and
Deactivate are lengthy operations,

00:19:11.720 --> 00:19:15.630
and they trigger automatic notifications
to anybody who has subscribed.

00:19:16.510 --> 00:19:18.370
If you're doing a lot
of these in sequence,

00:19:18.370 --> 00:19:20.770
you'll generate a lot of
events sent to anybody who's

00:19:20.770 --> 00:19:24.210
subscribing to notifications,
which could be a performance issue.

00:19:24.260 --> 00:19:28.480
What you can do is batch
your operation by passing the

00:19:28.580 --> 00:19:34.160
Do Not Notify flag to those APIs,
and at the end of your batch operation,

00:19:34.160 --> 00:19:37.910
call the same ATS Font Notify API to
tell everybody that you're done

00:19:37.910 --> 00:19:39.930
and that something has changed.

00:19:41.400 --> 00:19:46.540
So let's see how to do a basic
subscription to font notifications.

00:19:47.020 --> 00:19:50.620
What I've done here is I have
a very simple callback.

00:19:50.700 --> 00:19:53.900
Within the braces, you would put the code
that you want to run.

00:19:53.970 --> 00:19:57.610
And for brevity, I kind of left mine out.

00:19:58.030 --> 00:20:01.740
Then, register it with the system.

00:20:01.760 --> 00:20:04.330
You can register your notification
with the system using the

00:20:04.410 --> 00:20:07.460
API ATS Font Notification Subscribe,
and you pass in your callback,

00:20:07.630 --> 00:20:09.570
and you get back a
notification reference.

00:20:09.640 --> 00:20:12.480
It's possible to register
multiple notifications,

00:20:12.580 --> 00:20:15.180
and you would want to
hang on to the references,

00:20:15.180 --> 00:20:19.280
especially if you want to unsubscribe
them like I do at the bottom.

00:20:21.320 --> 00:20:24.400
When unsubscribing,
you pass in the notification reference,

00:20:24.400 --> 00:20:27.170
and then you no longer will receive
notifications for the callback

00:20:27.290 --> 00:20:28.380
that's attached to that reference.

00:20:30.370 --> 00:20:33.630
You can do this in the case where
you've got multiple functionality,

00:20:33.660 --> 00:20:36.540
but only some of it needs to be
maintained through a certain time period.

00:20:36.560 --> 00:20:41.970
So you set up a bunch of callbacks and
turn one off when you no longer need it.

00:20:42.060 --> 00:20:44.410
Anything else you have when
your application terminates will

00:20:44.460 --> 00:20:45.850
automatically be unsubscribed.

00:20:48.280 --> 00:20:51.620
All right,
the last item I have to cover is how to

00:20:51.620 --> 00:20:53.880
store font references in your document.

00:20:53.950 --> 00:20:58.020
Font references are important
because a user wants to open their

00:20:58.020 --> 00:21:01.980
documents that they previously
saved and see it coming back just as

00:21:02.000 --> 00:21:06.390
they saved it with the correct fonts
and the correct style information.

00:21:06.550 --> 00:21:10.150
So what are the best ways for
you to store font references?

00:21:10.370 --> 00:21:13.740
I've got three here,
and one of them is new for Tiger.

00:21:13.880 --> 00:21:15.870
So let's start with that one.

00:21:16.000 --> 00:21:21.240
Use the NS Font Descriptor class
available from Cocoa if you can.

00:21:21.350 --> 00:21:24.480
This provides extended
functionality for specifying fonts.

00:21:24.570 --> 00:21:27.780
It allows you to specify fonts
more precisely if you desire,

00:21:27.860 --> 00:21:33.210
and also allows us to be more flexible
with providing fonts for your request.

00:21:33.750 --> 00:21:36.490
There are three simple
steps to using these.

00:21:36.740 --> 00:21:41.220
First, you would create a font descriptor
with some font attributes.

00:21:41.310 --> 00:21:43.680
It could be as simple as a font name.

00:21:44.160 --> 00:21:46.250
Then to save it,
you'll extract the attributes

00:21:46.430 --> 00:21:50.360
from the font descriptor,
which returns a dictionary,

00:21:50.360 --> 00:21:55.000
which you can flatten and save into your
document using the standard methods.

00:21:55.200 --> 00:22:00.640
Finally, upon opening the document,
you'll create the NS font from this

00:22:00.640 --> 00:22:05.460
font descriptor and display it,
and your user will be happy.

00:22:07.020 --> 00:22:08.660
The other methods that
you've seen before,

00:22:08.660 --> 00:22:10.620
if you've been at any of
these previous sessions,

00:22:10.620 --> 00:22:11.860
are use the PostScript name.

00:22:11.870 --> 00:22:15.420
If you can't adopt font descriptors,
the PostScript name is

00:22:15.420 --> 00:22:16.160
the next best thing.

00:22:16.160 --> 00:22:20.930
It's the standard reference
mechanism in Cocoa and Quartz up to

00:22:21.110 --> 00:22:23.760
this point for referencing fonts.

00:22:23.760 --> 00:22:26.910
And if you happen to have a
QuickDraw-based application,

00:22:26.910 --> 00:22:30.720
you may still need to store the
family name and style information.

00:22:32.450 --> 00:22:35.270
All right,
so let's take a look at some quick code

00:22:35.270 --> 00:22:38.470
snippets for handling font descriptors.

00:22:39.480 --> 00:22:40.640
All right.

00:22:40.680 --> 00:22:42.290
I've got three blocks here.

00:22:42.410 --> 00:22:45.230
The first block,
I create a font descriptor

00:22:45.390 --> 00:22:46.850
by a create with name.

00:22:47.080 --> 00:22:49.570
This name is simply the PostScript name.

00:22:49.790 --> 00:22:53.180
Then, in the second block,
I extract the font attributes.

00:22:53.250 --> 00:22:55.400
This returns, as you can see,
an NSDictionary.

00:22:55.400 --> 00:23:00.810
I then can save that to my file and
then bring it back and create a font

00:23:00.890 --> 00:23:06.190
after unarchiving the dictionary,
creating a descriptor

00:23:06.510 --> 00:23:10.190
from that dictionary,
and then creating an NS font with

00:23:10.290 --> 00:23:12.420
font with descriptor and size.

00:23:12.520 --> 00:23:17.000
At this point, the document is ready to
display and the user is happy.

00:23:17.140 --> 00:23:20.940
All right, that about wraps it up for me,
so I'll have Robin come back

00:23:20.940 --> 00:23:24.430
on stage to give you some more
advanced programming techniques

00:23:24.430 --> 00:23:26.530
to customize your applications.

00:23:26.570 --> 00:23:27.840
Thank you.

00:23:34.110 --> 00:23:36.920
So I'm back.

00:23:36.960 --> 00:23:38.990
Essentially,
you can see what I'm going to talk

00:23:38.990 --> 00:23:41.250
about for the rest of the session,
which is even more

00:23:41.250 --> 00:23:42.820
programming techniques.

00:23:42.960 --> 00:23:43.800
So hang in there.

00:23:43.800 --> 00:23:46.730
I'm going to try and make
this as fun as possible.

00:23:47.570 --> 00:23:49.600
Now,
one of the key things I thought about

00:23:49.600 --> 00:23:53.300
when I was looking over this session was,
what are the sorts of things I want

00:23:53.380 --> 00:23:57.470
to hear about if I were just a generic
developer who did something with fonts?

00:23:57.560 --> 00:24:00.720
And here's something that's
really important for you is,

00:24:00.750 --> 00:24:04.150
in addition to the basic stuff
we've just described up above,

00:24:04.460 --> 00:24:07.820
what you can get out of the system
is hooking into it at the right

00:24:07.820 --> 00:24:12.260
level and customizing the way font
handling works in your application.

00:24:12.850 --> 00:24:15.330
So, again, we're giving you
recommendations and guidelines,

00:24:15.340 --> 00:24:17.810
but if you want to do your own
custom support or if you want to make

00:24:17.810 --> 00:24:20.930
something slightly different that makes
things even better for your users,

00:24:20.930 --> 00:24:22.010
you can do it.

00:24:22.130 --> 00:24:25.150
And so that includes things
like the user interface,

00:24:25.200 --> 00:24:27.880
looking at fonts in detail
so you can implement,

00:24:28.020 --> 00:24:32.710
let's say, your own custom text engine,
handling font management in your own way,

00:24:32.710 --> 00:24:36.140
or implementing a font utility,
just like Font Book.

00:24:37.380 --> 00:24:41.040
You can also hook into the graphics
system or the way fonts are processed,

00:24:41.150 --> 00:24:43.900
either for printing or
for rendering on screen.

00:24:43.960 --> 00:24:46.430
And then finally,
there's a new feature that I'll go into

00:24:46.500 --> 00:24:49.700
later that I'm pretty excited about,
you'll probably notice it later,

00:24:49.700 --> 00:24:51.570
is scripting for font management.

00:24:51.570 --> 00:24:55.540
And that lets your users
customize the way fonts work for

00:24:55.580 --> 00:24:57.980
them on the operating system.

00:24:59.810 --> 00:25:02.450
So before I do that,
let me go in and give you a quick

00:25:02.610 --> 00:25:07.820
demo that shows you how you might want
to customize some of these features.

00:25:11.310 --> 00:25:13.280
All right,
so I'll bring up Font Book here.

00:25:13.410 --> 00:25:17.840
And I've implemented a really simple,
basic application that shows you how

00:25:17.840 --> 00:25:20.360
you can customize the user interface.

00:25:20.470 --> 00:25:22.910
So like we've said,
we recommend using the Font Panel.

00:25:23.210 --> 00:25:24.460
But if you want to do
something different,

00:25:24.460 --> 00:25:28.380
let's say a font menu that
does pretty much exactly the

00:25:28.400 --> 00:25:30.520
same thing as the Font Panel,

00:25:30.640 --> 00:25:32.440
Then I've done it here.

00:25:32.550 --> 00:25:35.000
If you look at this,
you can see that it's got all the

00:25:35.120 --> 00:25:36.940
standard collections in there.

00:25:36.980 --> 00:25:41.820
Within them, they've got all the contents
that you would get in a

00:25:41.820 --> 00:25:44.980
Carbon or Cocoa application
that's adopted the font panel.

00:25:44.980 --> 00:25:47.110
These are all the standard collections.

00:25:47.180 --> 00:25:49.630
In fact,
I've shown it on the side with Font Book,

00:25:49.800 --> 00:25:52.610
so you can see that they're
actually exactly the same.

00:25:54.260 --> 00:25:58.510
Now another thing that we've done on
Tiger that's new that takes advantage

00:25:58.670 --> 00:26:02.420
of the font system and extracts
information out of it and puts it

00:26:02.500 --> 00:26:08.080
up on screen in a slightly different
way is Apple System Profiler.

00:26:10.070 --> 00:26:11.930
Let me blow this up a little
bit so you can see it.

00:26:12.040 --> 00:26:16.770
And what we've done is we've added
a fonts plugin for System Profiler

00:26:16.860 --> 00:26:20.520
that essentially lists all the
fonts available on your system,

00:26:20.520 --> 00:26:23.470
extracts different bits of
information about the font,

00:26:23.590 --> 00:26:26.810
and then splashes it up on screen
or in the System Profiler app so

00:26:26.820 --> 00:26:29.970
you can actually see and get a
lot of interesting information

00:26:30.040 --> 00:26:32.030
that's in the fonts themselves.

00:26:32.040 --> 00:26:34.240
So you can see this is Zapfino.

00:26:34.500 --> 00:26:38.030
I've got where it's located,
whether or not it's enabled,

00:26:38.030 --> 00:26:42.400
and then all kinds of information
about the font itself that's actually

00:26:42.490 --> 00:26:46.350
available to you as developers.

00:26:47.000 --> 00:26:49.400
That's my demo, real quick and short.

00:26:49.440 --> 00:26:52.720
And moving back to the presentation,

00:26:53.980 --> 00:26:56.900
What I'm going to go over
next is all of these items.

00:26:56.930 --> 00:26:58.360
I'll go through them real quick.

00:26:58.420 --> 00:27:00.320
If you can tell,
I can speak pretty quickly.

00:27:00.320 --> 00:27:03.610
I'll try and make sure I don't
run everything together and blah,

00:27:03.630 --> 00:27:04.960
blah, blah, blah, blah,
so you can understand me.

00:27:05.050 --> 00:27:08.900
But essentially,
customizing the user interface.

00:27:09.260 --> 00:27:13.110
First off, I'm going to talk about Cocoa,
and then I'm going to talk

00:27:13.210 --> 00:27:15.460
about another component,
MLTE.

00:27:16.370 --> 00:27:20.350
So with Cocoa,
what we've got here is it parallels

00:27:20.350 --> 00:27:24.790
the implementation or the additional
work you might need to do that

00:27:24.790 --> 00:27:26.740
Nathan described for Carbon.

00:27:26.740 --> 00:27:31.040
And this is important if
you're writing a custom view.

00:27:31.040 --> 00:27:33.560
All of the standard text views,
the text fields,

00:27:33.560 --> 00:27:35.900
they handle the font panel automatically.

00:27:35.900 --> 00:27:40.490
But let's say you're writing a subclass
of table view or the outline view,

00:27:40.550 --> 00:27:43.740
which don't inherently
support the font panel.

00:27:44.280 --> 00:27:45.730
This is how you go about doing it.

00:27:45.900 --> 00:27:47.350
And it's just two slides worth of steps.

00:27:47.430 --> 00:27:48.420
It's really easy.

00:27:48.420 --> 00:27:51.640
So first of all, in Cocoa,
just the general thing,

00:27:51.640 --> 00:27:55.440
if you're dealing with fonts,
most likely you're going to have to get

00:27:55.440 --> 00:27:57.430
an instance of the shared font manager.

00:27:57.460 --> 00:28:00.070
This is the hub of getting
all your font services.

00:28:00.080 --> 00:28:05.320
Now once you've got your hands on that,
you can send a notification whenever your

00:28:05.320 --> 00:28:09.520
current selection in your text object,
your view, changes,

00:28:09.520 --> 00:28:11.820
or when you become first responder.

00:28:11.820 --> 00:28:14.130
Those are the two places where
you'd actually want to do it.

00:28:14.410 --> 00:28:18.150
And so you simply send this command
and indicate the font and whether

00:28:18.260 --> 00:28:20.530
or not it's a multiple selection.

00:28:20.540 --> 00:28:22.860
That's one part of the communication.

00:28:24.250 --> 00:28:27.020
The second half is just about as simple.

00:28:27.020 --> 00:28:31.280
So what happens here is that,
like I said, standard text views

00:28:31.280 --> 00:28:33.590
automatically do this for you.

00:28:33.870 --> 00:28:36.670
But if you want,
you can respond to changes in

00:28:36.670 --> 00:28:40.700
the font panel or the font user
interface in the font menu.

00:28:40.700 --> 00:28:44.920
The font manager will send a
notification up the responder chain.

00:28:44.920 --> 00:28:47.470
All you have to do is listen
to the default message.

00:28:47.490 --> 00:28:50.500
In this case,
I've implemented a basic delegate method.

00:28:50.500 --> 00:28:54.150
Change font is the message or the action
message that you need to respond to.

00:28:54.200 --> 00:28:57.410
Within that function,
all you need to do is pull

00:28:57.410 --> 00:28:59.580
out your current selection.

00:28:59.580 --> 00:29:01.820
I've got a really simple example here.

00:29:01.930 --> 00:29:05.140
It's only one font for the object,
but you can do something more complex,

00:29:05.210 --> 00:29:06.380
as you can imagine.

00:29:06.380 --> 00:29:07.490
I pull that out.

00:29:07.490 --> 00:29:08.730
It's my old font.

00:29:08.740 --> 00:29:12.850
I send it back to the font manager
to modify it and make that match

00:29:13.600 --> 00:29:18.290
exactly what the user has selected,
whatever actions the user has done

00:29:18.290 --> 00:29:20.940
in the font panel or the font menu.

00:29:20.940 --> 00:29:24.040
It sends me back a new
instance of an NSFont object.

00:29:24.430 --> 00:29:28.070
which then I can apply to my text view.

00:29:28.670 --> 00:29:29.500
That's it.

00:29:29.560 --> 00:29:32.130
So you notice it's actually in
parallel with what Nathan described.

00:29:32.310 --> 00:29:37.630
You listen in to the messages and you
send notifications out to communicate

00:29:37.630 --> 00:29:40.700
the information to the font panel.

00:29:41.020 --> 00:29:43.090
Now, in MLTE,

00:29:44.120 --> 00:29:46.800
In the past,
you've had to do what Nathan described

00:29:46.800 --> 00:29:48.780
as with any Carbon application.

00:29:48.780 --> 00:29:51.780
But new for Tiger,
we've made it even simpler.

00:29:51.780 --> 00:29:54.610
All you have to do now
is one line of code,

00:29:54.660 --> 00:29:57.300
or in my case, four lines of code.

00:29:58.550 --> 00:30:04.330
Essentially,
there's a new API available to

00:30:04.330 --> 00:30:13.130
enable support in a text extension,
which is the old name for MLT,

00:30:13.130 --> 00:30:15.350
text object.

00:30:15.350 --> 00:30:15.350
And so, in essence,
I've created a text object.

00:30:15.350 --> 00:30:15.350
It could be either a
document or a text field.

00:30:15.550 --> 00:30:20.500
indicate that you want it to listen
and support the standard font commands.

00:30:20.580 --> 00:30:21.420
That's it.

00:30:21.470 --> 00:30:22.280
You're done.

00:30:22.320 --> 00:30:25.920
All of that communication back and forth,
updating the text object itself,

00:30:26.180 --> 00:30:28.880
all of that's handled
automatically for you on Tiger.

00:30:28.880 --> 00:30:33.460
So that was a pretty boring slide,
but it's really simple.

00:30:35.870 --> 00:30:40.800
indicate that you want it to listen
and support the standard font commands.

00:30:40.800 --> 00:30:41.680
That's it.

00:30:41.780 --> 00:30:42.580
You're done.

00:30:42.580 --> 00:30:46.300
All of that communication back and forth,
updating the text object itself,

00:30:46.300 --> 00:30:47.570
all of that's handled
automatically for you on Tiger.

00:30:47.570 --> 00:30:47.570
So that was a pretty boring slide,
but it's really simple.

00:30:48.500 --> 00:30:51.420
Now I've got some sample code here,
but let me give you

00:30:51.420 --> 00:30:53.000
just a real quick hint.

00:30:53.100 --> 00:30:56.010
When you're dealing with fonts
and you want to get information,

00:30:56.010 --> 00:30:59.860
there's APIs available at pretty much
all the layers that I described earlier.

00:30:59.950 --> 00:31:04.650
Cocoa, Atsui, ATS.

00:31:05.120 --> 00:31:07.700
In all of those,
the recommendation is whichever one

00:31:07.740 --> 00:31:11.540
you've chosen to work at primarily,
let's say you're a Cocoa application,

00:31:11.540 --> 00:31:14.390
a lot of the APIs there support
the same level of support for

00:31:14.480 --> 00:31:16.170
accessing font information.

00:31:16.170 --> 00:31:18.190
Try and use it at that level.

00:31:18.190 --> 00:31:21.620
If you need to,
you can dip down lower into the

00:31:21.620 --> 00:31:24.010
deeper layers as you need to.

00:31:24.010 --> 00:31:26.820
So at the very bottom, of course,
you've got ATS.

00:31:26.820 --> 00:31:29.880
And in this case,
what I've done is I want to

00:31:30.060 --> 00:31:34.560
get access to every single font
on the system in the registry.

00:31:35.360 --> 00:31:36.740
Actually, let me strike that.

00:31:36.850 --> 00:31:38.660
Every single font my app can see.

00:31:38.670 --> 00:31:40.730
In fact, I'll talk about this next.

00:31:40.730 --> 00:31:44.320
There's some options you can set
to define the context and the scope

00:31:44.320 --> 00:31:46.300
of an enumeration or a listing.

00:31:46.300 --> 00:31:49.750
So in this case,
I create an iterator object.

00:31:49.840 --> 00:31:52.530
I pass that iterator
object to a function,

00:31:52.600 --> 00:31:55.960
ATS font iterator next,
that basically steps through

00:31:56.040 --> 00:31:59.700
every single font on the system
that matches my criteria,

00:31:59.770 --> 00:32:04.970
returns a standard font ref that I can
then use later to access information.

00:32:05.000 --> 00:32:07.940
And I'll go into that in a
little bit more detail later.

00:32:07.940 --> 00:32:11.340
Once I'm done with the
iteration or the enumeration,

00:32:11.450 --> 00:32:14.730
I'll release the iterator
object and I can move on.

00:32:14.890 --> 00:32:16.910
In fact,
that's exactly what I'll do next.

00:32:16.980 --> 00:32:18.210
Thank you.

00:32:18.740 --> 00:32:21.160
All right,
so I mentioned context and scope.

00:32:21.170 --> 00:32:22.760
A lot of people tend
to ask this question,

00:32:22.760 --> 00:32:23.640
what the heck is that?

00:32:23.720 --> 00:32:26.570
There's two options,
I gotta mess with it.

00:32:27.660 --> 00:32:30.240
The simplest way to look
at it is in this diagram,

00:32:30.240 --> 00:32:35.860
you'll see the local unrestricted
combination of options really

00:32:36.220 --> 00:32:37.740
matches what I just described.

00:32:37.740 --> 00:32:41.210
It's really all the fonts that your
app should be able to use and see.

00:32:41.460 --> 00:32:45.330
Now, within that set,
you've got more restricted sets.

00:32:45.330 --> 00:32:48.010
One is the local restricted,
local context,

00:32:48.090 --> 00:32:52.620
which is really your local application,
restricted to just those fonts that

00:32:52.620 --> 00:32:56.730
your application owns and manages
and has entered into the system.

00:32:56.730 --> 00:32:59.070
So they're like
application-specific fonts.

00:32:59.140 --> 00:33:01.600
Global restricted is the global space.

00:33:01.600 --> 00:33:04.600
It's all the shared fonts,
and those fonts managed

00:33:04.690 --> 00:33:06.000
by the system itself.

00:33:06.160 --> 00:33:09.150
Put those together,
and you get all the fonts that you

00:33:09.180 --> 00:33:11.250
can see and use within your app.

00:33:11.460 --> 00:33:14.170
There's one more combination,
the fourth one,

00:33:14.170 --> 00:33:17.940
which is global unrestricted,
which we don't recommend you use,

00:33:17.940 --> 00:33:22.040
mainly because if you take this image,
duplicate it essentially with

00:33:22.090 --> 00:33:25.900
all the processes or all the
applications in the system,

00:33:26.100 --> 00:33:28.310
It'll give you all those fonts,
every single font.

00:33:28.380 --> 00:33:31.600
And so the key thing here to remember
is you might get your hands on

00:33:31.690 --> 00:33:34.890
some fonts that you don't have,
you know, you can't use.

00:33:35.030 --> 00:33:36.620
Basically,
they're owned by somebody else.

00:33:39.280 --> 00:33:41.530
All right,
so once you get your hands on a font ref,

00:33:41.750 --> 00:33:42.670
what can you do with it?

00:33:42.750 --> 00:33:45.020
Here's one example.

00:33:45.020 --> 00:33:47.940
There's support at various layers.

00:33:47.940 --> 00:33:50.000
NSFont has the support.

00:33:50.000 --> 00:33:51.720
ATS also has the support.

00:33:51.720 --> 00:33:54.400
You can access metrics
information about the fonts.

00:33:54.460 --> 00:33:57.740
And also, in some cases,
information about individual

00:33:57.740 --> 00:33:59.340
glyphs within the fonts.

00:33:59.360 --> 00:34:02.940
And so you've got the advance,
you've got line information,

00:34:03.060 --> 00:34:05.870
bounding recs,
and additional information,

00:34:06.170 --> 00:34:08.160
including like the italic angle.

00:34:09.830 --> 00:34:16.020
So again, the recommendation is use those
APIs at the same level as the other

00:34:16.020 --> 00:34:18.060
APIs you're using in your application.

00:34:20.630 --> 00:34:21.550
Now another thing.

00:34:21.620 --> 00:34:24.900
Okay, so customizing font management
is the next section.

00:34:25.040 --> 00:34:26.060
What's that mean?

00:34:26.220 --> 00:34:28.130
Well,
let me give you a little background.

00:34:28.130 --> 00:34:35.150
Font management, when I talk about it,
we're talking about...

00:34:36.480 --> 00:34:40.030
Component-wise, it's the shared font
registry on the system.

00:34:40.030 --> 00:34:43.330
It's the support available
from Mac OS X that goes out

00:34:43.330 --> 00:34:44.980
and finds all the fonts.

00:34:45.030 --> 00:34:49.440
It tracks information such as
what users can see the fonts,

00:34:49.440 --> 00:34:54.350
what processes can use and see the fonts,
and access privileges,

00:34:54.520 --> 00:34:57.620
as well as where the fonts are located.

00:34:57.980 --> 00:35:01.840
This font database or font
registry handles the standard

00:35:01.900 --> 00:35:04.110
file system domain ordering.

00:35:04.110 --> 00:35:06.260
This is all the different locations.

00:35:06.260 --> 00:35:09.250
So just to go through it real quickly,
first off,

00:35:09.250 --> 00:35:14.200
the system will look in the user domain
or your home directory's font library.

00:35:14.200 --> 00:35:17.550
Next up, the local domain,
which is the library fonts that's

00:35:17.710 --> 00:35:20.990
shared across the particular
computer between different users

00:35:21.110 --> 00:35:23.180
as well as different applications.

00:35:23.200 --> 00:35:26.150
You've got the network fonts and
then the system critical fonts

00:35:26.260 --> 00:35:27.880
that you're not supposed to touch.

00:35:27.960 --> 00:35:31.220
And then finally,
it's not a standard file system domain,

00:35:31.490 --> 00:35:32.430
but we support it.

00:35:32.690 --> 00:35:35.740
The classic environment,
which doesn't need to be running,

00:35:35.740 --> 00:35:36.270
by the way.

00:35:36.270 --> 00:35:39.720
All you have to do is register
it with system preferences.

00:35:39.720 --> 00:35:45.160
We'll look inside its system folder
and give you back all those fonts also.

00:35:50.080 --> 00:35:53.840
So the way you can take advantage
of this is you can add fonts or

00:35:53.840 --> 00:35:56.080
remove fonts in that registry.

00:35:56.250 --> 00:35:58.830
You can modify the contents.

00:35:59.150 --> 00:36:01.080
The way you would do it
is using this function.

00:36:01.080 --> 00:36:05.460
ATS Font Activate from
File Specification is one example.

00:36:05.460 --> 00:36:07.890
It uses a standard file spec.

00:36:07.970 --> 00:36:09.720
This is obviously an older API.

00:36:09.720 --> 00:36:14.090
Point it at your font or
your directory of fonts.

00:36:14.090 --> 00:36:15.240
Indicate.

00:36:15.430 --> 00:36:18.390
Now, this is why we had different
context and scope options.

00:36:18.390 --> 00:36:21.480
We reused that one so you can
register the fonts locally

00:36:21.480 --> 00:36:23.160
within your application.

00:36:24.080 --> 00:36:26.800
I've also specified that
I don't know what the format is,

00:36:26.820 --> 00:36:28.490
so please figure it out for me.

00:36:28.490 --> 00:36:31.090
And that's a really good
example where the system,

00:36:31.220 --> 00:36:34.950
you can leverage it and still provide
custom support because it handles

00:36:34.970 --> 00:36:39.210
all of the details of the different
formats and activates them accordingly.

00:36:39.220 --> 00:36:41.140
You get a container object back.

00:36:41.290 --> 00:36:44.450
Whenever you want to,
you can remove those fonts from

00:36:44.590 --> 00:36:46.760
the system using that container.

00:36:46.760 --> 00:36:48.180
That's it.

00:36:53.500 --> 00:36:55.090
All right,
now this is something really cool.

00:36:55.240 --> 00:36:55.840
It's new.

00:36:55.840 --> 00:36:59.780
In the past, we've told you if you have
an application-specific font,

00:37:00.040 --> 00:37:02.700
you need to do that stuff
in the previous slide.

00:37:02.700 --> 00:37:05.570
Well, now on Tiger,
all you have to do is stuff your font

00:37:05.850 --> 00:37:09.270
somewhere in your application bundle,
put a pointer to it in

00:37:09.270 --> 00:37:12.140
the Info.plist file,
and then you're done.

00:37:12.140 --> 00:37:14.050
Everything else is taken care of for you.

00:37:14.060 --> 00:37:18.270
So the system will automatically
register those fonts with itself

00:37:18.270 --> 00:37:22.320
when your application is launched,
and then remove those fonts when

00:37:22.320 --> 00:37:24.180
your application shuts down.

00:37:24.180 --> 00:37:27.570
And again, the key that you'll want
to use is right up there,

00:37:27.690 --> 00:37:29.500
ATS Application Fonts Path.

00:37:33.460 --> 00:37:37.050
Now another thing is in
the demo I showed you,

00:37:37.050 --> 00:37:40.620
I accessed the system
support for collections.

00:37:40.670 --> 00:37:42.780
And the way this works,
just a quick review,

00:37:42.870 --> 00:37:48.640
is it lets users filter down the font
list to something more manageable.

00:37:48.710 --> 00:37:54.000
And so when you do that, we actually--

00:37:56.030 --> 00:37:59.690
The way you can support
it is hooking into Cocoa.

00:37:59.900 --> 00:38:04.130
We also have C callable equivalents
for getting at this support.

00:38:04.250 --> 00:38:07.960
What we have here right now is the
first block of code is just getting a

00:38:07.960 --> 00:38:10.300
list of all the collections available.

00:38:10.480 --> 00:38:13.750
It's essentially an array of NSStrings.

00:38:14.080 --> 00:38:17.940
From that, you can actually modify or
add additional collections.

00:38:17.940 --> 00:38:19.160
You can add and remove them.

00:38:19.190 --> 00:38:22.520
I don't show it here,
but I do show how you can

00:38:22.520 --> 00:38:27.690
modify the contents one or
create a new one on your own.

00:38:28.110 --> 00:38:31.240
There's a font geek in my group.

00:38:31.340 --> 00:38:36.500
I won't mention their name,
but I happen to install my fonts and

00:38:36.500 --> 00:38:39.740
group them according to different
styles and categories historically.

00:38:39.780 --> 00:38:43.420
Venetian,
Gurali are two different subclasses of,

00:38:43.420 --> 00:38:46.980
or subgroups of the
serif old style category.

00:38:47.060 --> 00:38:53.370
So what I want to do here in this example
is essentially take all the descriptors,

00:38:53.630 --> 00:38:56.980
Side note, every collection consists
of font descriptors,

00:38:56.980 --> 00:38:58.860
as Nathan mentioned earlier.

00:38:58.900 --> 00:39:05.060
These are essentially a way to
describe or criteria that describe

00:39:05.110 --> 00:39:08.020
one or more fonts together.

00:39:08.320 --> 00:39:12.170
So again, my collection,
I extract all the descriptors out of it,

00:39:12.270 --> 00:39:13.620
stick it in an array.

00:39:13.620 --> 00:39:14.590
Then I stuff in some more.

00:39:14.670 --> 00:39:16.660
I pull them out of the
Guraldi collection,

00:39:16.660 --> 00:39:20.460
stuff them into that array,
and then I add all of those font

00:39:20.460 --> 00:39:26.220
descriptors to my new collection that
I referenced by the name Serif Old Style.

00:39:26.290 --> 00:39:27.540
Simple as that.

00:39:27.540 --> 00:39:29.820
And again,
there's C callable equivalents that

00:39:29.820 --> 00:39:33.570
you can use in the Carbon framework.

00:39:35.110 --> 00:39:36.880
All right.

00:39:37.020 --> 00:39:39.130
So we've got font processing.

00:39:39.470 --> 00:39:41.970
What does that mean for you?

00:39:42.900 --> 00:39:44.320
I think I mentioned it earlier.

00:39:44.430 --> 00:39:48.270
They're essentially a way for
you to hook into the graphics

00:39:48.270 --> 00:39:50.640
system or the printing system.

00:39:50.800 --> 00:39:53.100
What the rasterizers do,
they're actually modular

00:39:53.100 --> 00:39:54.500
components on the system.

00:39:54.500 --> 00:39:57.540
They take the raw font data,
they run through it,

00:39:57.540 --> 00:40:00.880
and they spit out graphics
or print-related data.

00:40:00.880 --> 00:40:03.290
That includes the bitmaps, the outlines.

00:40:03.290 --> 00:40:07.220
It also converts the font data from
what you see on disk to something

00:40:07.710 --> 00:40:11.920
that can be embedded within a
PostScript document or PDF files.

00:40:12.660 --> 00:40:16.680
In fact, that's exactly what the printing
system on Mac OS X uses.

00:40:16.680 --> 00:40:18.680
It uses this level of support.

00:40:18.840 --> 00:40:22.850
So if you want to hook into it,
you can take advantage of that now.

00:40:24.670 --> 00:40:29.540
The rasterizers also hide all of the
details of the different formats for you.

00:40:29.700 --> 00:40:32.540
So we've got TrueType
in all its variants.

00:40:32.630 --> 00:40:37.650
OpenType is actually a new format
package that is supported by

00:40:37.650 --> 00:40:39.780
Microsoft and Adobe and Mac OS X.

00:40:39.780 --> 00:40:44.660
We also handle PostScript,
both the Type 1 and the OpenType flavors.

00:40:44.660 --> 00:40:48.260
So all of that detail is hidden away from
you so you don't have to worry about it,

00:40:48.260 --> 00:40:50.760
but still take advantage
of the general features.

00:40:52.550 --> 00:40:54.180
Now, here's one example of doing that.

00:40:54.240 --> 00:40:56.000
I'm going to give you two.

00:40:56.000 --> 00:40:57.550
I'll touch on printing next.

00:40:57.550 --> 00:41:01.490
But in this case,
I'm using the text layout system itself.

00:41:01.620 --> 00:41:06.040
I'm using its character-to-glyph
conversion support in the initial block.

00:41:06.140 --> 00:41:08.400
Essentially, I'm using this API.

00:41:10.800 --> 00:41:13.020
Okay, I'll let you read it out loud.

00:41:13.460 --> 00:41:16.000
By the way,
I've done worse in my history.

00:41:16.020 --> 00:41:19.080
Essentially,
it takes a text layout object

00:41:19.580 --> 00:41:23.040
that stores the text stream,
the text information.

00:41:23.040 --> 00:41:26.350
It takes those character codes,
converts them over to a

00:41:26.630 --> 00:41:27.920
list of glyph records.

00:41:27.920 --> 00:41:31.880
I've got a glyph data array and account.

00:41:32.130 --> 00:41:35.680
One thing to note is that character
codes don't necessarily map to glyph IDs,

00:41:35.680 --> 00:41:39.910
which are actually the representation
of the actual shapes within a font.

00:41:39.960 --> 00:41:43.280
So a good example of this is a ligature.

00:41:43.280 --> 00:41:47.900
If you have F, let's say F and L in
your character stream,

00:41:47.900 --> 00:41:51.210
when you apply it to a
font or apply a font to it,

00:41:51.400 --> 00:41:54.390
it might get merged into one ligature,
one glyph.

00:41:54.740 --> 00:41:56.270
That's the FL ligature itself.

00:41:56.350 --> 00:41:59.460
And so you can take advantage
of the text system to do that

00:41:59.660 --> 00:42:02.020
conversion for you in a standard way.

00:42:02.020 --> 00:42:05.790
Now, the second block of code shows
you how you can actually get

00:42:05.790 --> 00:42:08.000
that graphics data I mentioned.

00:42:08.000 --> 00:42:12.720
One of the things you can use it for is,
let's say you've got some text,

00:42:12.760 --> 00:42:16.170
you want to turn it into
graphics data that you want to

00:42:16.250 --> 00:42:19.660
send straight to the printer,
you want to modify it,

00:42:19.760 --> 00:42:22.230
you want to morph it into
a different graphic shape,

00:42:22.280 --> 00:42:24.080
put polka dots on it for all I know.

00:42:24.770 --> 00:42:26.980
So in order to do this,
you go through those

00:42:26.980 --> 00:42:30.730
glyph records one by one,
grab the relevant information,

00:42:30.780 --> 00:42:34.200
in this case,
the style object and the glyph ID.

00:42:34.200 --> 00:42:36.900
And what's really
interesting here is that,

00:42:36.990 --> 00:42:39.770
by the way,
I'm converting this to cubic data,

00:42:39.910 --> 00:42:40.900
cubic paths.

00:42:41.010 --> 00:42:43.900
You can also convert it to another form,
quadratic curves.

00:42:43.900 --> 00:42:47.280
But in this case,
I've got four standard operations

00:42:47.280 --> 00:42:49.610
that define the shape of the glyph.

00:42:49.720 --> 00:42:52.630
And so one would be moving
to a particular point.

00:42:52.680 --> 00:42:54.560
Another one would be
drawing a straight line.

00:42:54.640 --> 00:42:57.610
Another one might be drawing a curve.

00:42:57.680 --> 00:43:02.350
And the last one is drawing or
indicating the end of the path.

00:43:02.420 --> 00:43:05.680
And so all of these
functions you can define,

00:43:05.680 --> 00:43:09.520
pass it into the Atsugecubic
glyph pass function.

00:43:09.520 --> 00:43:12.960
It will basically record
or play back those glyphs,

00:43:13.030 --> 00:43:18.590
allow you to record that information in
a buffer and process it however you want.

00:43:18.660 --> 00:43:22.380
You can send it straight down to a disk,
whatever you choose to.

00:43:25.150 --> 00:43:25.390
All right.

00:43:25.480 --> 00:43:28.760
So I mentioned printing support.

00:43:29.510 --> 00:43:32.960
Essentially this is a
new feature in Tiger.

00:43:33.010 --> 00:43:35.780
Now we still highly recommend
you let the printing system do

00:43:35.780 --> 00:43:37.380
as much of the work as possible.

00:43:37.610 --> 00:43:41.130
But if you were using instead of,
let's say, the PDF rendering path,

00:43:41.180 --> 00:43:44.680
which is recommended,
if you're using the old LaserWriter

00:43:44.720 --> 00:43:48.660
8 compatibility print support
to do post script rendering

00:43:48.750 --> 00:43:50.830
or post script downloads.

00:43:50.830 --> 00:43:54.770
This lets you take advantage
of newer support to actually

00:43:54.890 --> 00:43:58.500
just get that font data to do it
to manipulate in your own way.

00:44:00.030 --> 00:44:04.580
And so we allow you to generate
font subsets from a standard Quartz

00:44:04.580 --> 00:44:10.380
font reference using the function,
well, CG font create PostScript subset.

00:44:10.540 --> 00:44:15.690
You can indicate what the output format
should be and then an array of glyphs,

00:44:15.690 --> 00:44:16.940
CG glyph IDs.

00:44:16.940 --> 00:44:19.570
These are just the same as
those glyph IDs I mentioned

00:44:19.610 --> 00:44:21.280
earlier in the Atsui example.

00:44:22.170 --> 00:44:24.830
If you pass in null for the array,
it'll just give you every

00:44:24.830 --> 00:44:27.330
single glyph in the font,
or you can indicate specific

00:44:27.430 --> 00:44:28.650
glyphs as you choose.

00:44:28.650 --> 00:44:31.430
Once you've done that,
it will return all that

00:44:31.430 --> 00:44:34.910
data back in a CF package,
a core foundation data package,

00:44:35.000 --> 00:44:38.850
which then you can use the standard
functions in core foundation to

00:44:38.850 --> 00:44:42.770
parse and process however you want,
including sending it to a disk or

00:44:43.020 --> 00:44:45.440
downloading it straight to a printer.

00:44:49.340 --> 00:44:53.010
Okay, so at this layer,
when you're working on it,

00:44:53.070 --> 00:44:54.840
you have to be more aware of performance.

00:44:55.040 --> 00:44:57.580
And so here's some tips and hints.

00:44:58.060 --> 00:45:01.170
When you're working in Atsui,
try and reuse objects

00:45:01.170 --> 00:45:02.560
as much as possible.

00:45:02.700 --> 00:45:05.800
Specifically for fonts,
pre-allocate and reuse

00:45:05.800 --> 00:45:07.560
the Atsu style objects.

00:45:07.610 --> 00:45:13.640
This allows you to use the
caching system available in Atsui,

00:45:13.640 --> 00:45:19.910
and it basically minimizes the
amount of memory allocations

00:45:20.010 --> 00:45:23.470
and reuse of system resources.

00:45:23.800 --> 00:45:26.990
Also, use the Quartz graphics context
as much as possible when you're

00:45:26.990 --> 00:45:28.600
working directly with Atsui.

00:45:28.600 --> 00:45:33.170
This is because Atsui has
been optimized for Quartz.

00:45:33.260 --> 00:45:36.160
If you're using an older, let's say,
Quick Draw graphics port,

00:45:36.160 --> 00:45:39.880
there's some conversion that's needed
that slows things down potentially.

00:45:40.640 --> 00:45:44.460
Now, when you're working in Quartz,
the same principles tend to apply.

00:45:44.920 --> 00:45:53.480
Try and reuse the CG font
refs as much as possible,

00:45:53.480 --> 00:45:59.090
the Quartz font references.

00:45:59.090 --> 00:45:59.090
The reason for this is even though
you might have the same font

00:45:59.090 --> 00:45:59.090
reference pointing at the same font,
let's say, Times,

00:45:59.530 --> 00:46:03.740
Now, when you're working in Quartz,
the same principles tend to apply.

00:46:03.740 --> 00:46:06.930
Try and reuse the CG font
refs as much as possible,

00:46:06.960 --> 00:46:09.040
the Quartz font references.

00:46:09.040 --> 00:46:13.630
The reason for this is even though
you might have the same font

00:46:13.630 --> 00:46:17.960
reference pointing at the same font,
let's say Times,

00:46:25.210 --> 00:46:29.340
Now, when you're working in Quartz,
the same principles tend to apply.

00:46:29.340 --> 00:46:32.550
Try and reuse the CG font
refs as much as possible,

00:46:32.550 --> 00:46:34.640
the Quartz font references.

00:46:34.640 --> 00:46:35.080
The reason for this is even though
you might have the same font

00:46:35.080 --> 00:46:35.080
reference pointing at the same font,
let's say Times,

00:46:36.570 --> 00:46:41.680
with an example of what we've
done on Mac OS X for Tiger.

00:46:42.210 --> 00:46:45.140
So right now, I've got Font Book showing.

00:46:45.210 --> 00:46:46.870
If you didn't notice earlier,
take a look here.

00:46:47.000 --> 00:46:50.730
I've got a standard
AppleScript menu now available.

00:46:50.720 --> 00:46:53.130
I'll just open up the script folder.

00:46:53.140 --> 00:46:54.870
And I've got two scripts there available.

00:46:54.900 --> 00:47:02.350
In fact, let me just pull up one using
Script Editor to show you that

00:47:02.350 --> 00:47:05.860
it is actually AppleScript.

00:47:07.610 --> 00:47:08.620
All right.

00:47:08.750 --> 00:47:10.870
So one of the key
things to remember here,

00:47:10.890 --> 00:47:14.880
you can manipulate any object that
Font Book itself can see and handle.

00:47:14.880 --> 00:47:17.390
So in this particular case,
I'm just showing you the

00:47:17.390 --> 00:47:20.110
code so you get a sense of,
yeah, this is real code.

00:47:20.110 --> 00:47:23.500
But just a quick summary of it is,
it's creating a new

00:47:23.500 --> 00:47:27.470
collection named Bold,
and then it's asking all the typefaces

00:47:27.600 --> 00:47:32.390
in Font Book for every entry in
there that might match the name Bold.

00:47:32.390 --> 00:47:35.230
Pulls those out and stuffs
them into the new collection

00:47:35.230 --> 00:47:36.830
I just created called Bold.

00:47:41.140 --> 00:47:43.400
Now, instead of running it
from within Script Editor,

00:47:43.430 --> 00:47:45.920
let me run it straight from Font Book.

00:47:46.170 --> 00:47:50.980
Now, the thing to remember is watch the
Collections pane on the left-hand side.

00:47:51.030 --> 00:47:55.830
You're going to see a new
collection show up there pretty

00:47:56.140 --> 00:47:59.210
much instantaneously called Bold.

00:47:59.210 --> 00:47:59.210
It contains

00:47:59.900 --> 00:48:15.300
[Transcript missing]

00:48:16.070 --> 00:48:18.700
I've implemented another Apple script.

00:48:18.770 --> 00:48:19.600
It's really cool.

00:48:19.600 --> 00:48:23.160
I actually hugged the engineer
when he showed me this,

00:48:23.160 --> 00:48:24.950
mainly because...

00:48:25.950 --> 00:48:27.640
I'll let it run.

00:48:27.650 --> 00:48:29.470
I used to have to do this by hand.

00:48:29.470 --> 00:48:30.900
Okay?

00:48:31.010 --> 00:48:32.850
So I'd go in and I'd have to test it.

00:48:32.900 --> 00:48:34.330
I'd have to create the sample.

00:48:34.330 --> 00:48:35.140
Ugh, I hated it.

00:48:35.250 --> 00:48:36.510
Well, it's done.

00:48:36.510 --> 00:48:38.280
Well, yes, it's done now.

00:48:38.300 --> 00:48:42.210
So essentially, I created a document with
87 different families,

00:48:42.660 --> 00:48:46.300
183 typefaces, all using AppleScript.

00:48:46.300 --> 00:48:50.040
And the key thing to remember
here is that not only is

00:48:50.040 --> 00:48:53.860
Font Book itself AppleScripted,
but you can interact or your users can

00:48:53.860 --> 00:48:58.120
interact with other applications that
support AppleScript just as easily.

00:48:58.120 --> 00:49:00.330
Okay, so that's the demo.

00:49:00.330 --> 00:49:01.460
Real quick.

00:49:03.270 --> 00:49:08.120
And getting back to the presentation,
here's just the final summary

00:49:08.120 --> 00:49:12.400
of what the scripting support
that's new for Tiger consists of.

00:49:12.460 --> 00:49:16.390
It's a standard Apple script
dictionary in Font Book.

00:49:16.410 --> 00:49:19.690
It has a number of classes and elements
that you can take advantage of,

00:49:19.830 --> 00:49:22.400
including the domains
I described earlier,

00:49:22.510 --> 00:49:25.700
collections themselves,
as well as containers.

00:49:25.770 --> 00:49:32.120
And you can also manipulate or look
at the font families and typefaces.

00:49:32.290 --> 00:49:34.610
Within those,
each of them has a bunch of different

00:49:34.630 --> 00:49:38.190
properties that you can check out,
but the name is definitely one of them,

00:49:38.220 --> 00:49:40.860
whether or not that font
or collection is enabled.

00:49:40.860 --> 00:49:45.850
And then you can manipulate them using
the standard AppleScript commands,

00:49:45.850 --> 00:49:49.970
like add and remove,
to remove items from a container object,

00:49:49.970 --> 00:49:52.490
let's say fonts from a collection.

00:49:52.550 --> 00:49:55.260
You can also delete objects wholesale.

00:49:55.260 --> 00:49:56.580
So that's new for Tiger.

00:49:56.580 --> 00:49:57.820
It's really exciting.

00:49:57.910 --> 00:50:00.360
I know some of you have
asked us in the past for it.

00:50:00.360 --> 00:50:01.340
We got it done.

00:50:03.430 --> 00:50:05.320
All right,
so that wraps up the presentation.

00:50:05.320 --> 00:50:08.060
Let me just give you an overall summary.

00:50:08.060 --> 00:50:10.720
Essentially, adopt the font panel.

00:50:10.720 --> 00:50:13.180
If anything, please try to do that.

00:50:13.560 --> 00:50:16.680
Let the system do the work for you.

00:50:16.690 --> 00:50:18.360
That's really the key message here.

00:50:18.360 --> 00:50:20.610
That's where we're going
to put a lot of support in.

00:50:20.840 --> 00:50:22.950
You can take advantage
of it by just doing that.

00:50:23.620 --> 00:50:26.190
Now, if you want to customize support,
you can do it.

00:50:26.190 --> 00:50:28.710
Like I described,
there's a bunch of different things

00:50:28.710 --> 00:50:32.460
you can do with the operating system,
a bunch of different APIs available.

00:50:32.460 --> 00:50:35.660
You can customize the way fonts
work within your application

00:50:35.660 --> 00:50:37.270
to match your users' needs.

00:50:39.320 --> 00:50:42.420
Now, if you have any questions,
you can contact our evangelist,

00:50:42.540 --> 00:50:43.380
Xavier Legro.

00:50:45.320 --> 00:50:47.830
And you can also refer to
the documentation on the

00:50:47.830 --> 00:50:50.070
Apple Developer Connection website.

00:50:50.080 --> 00:50:53.040
And this just touches on a couple
of the items I've discussed today.

00:50:53.040 --> 00:50:54.430
I kind of went everywhere.