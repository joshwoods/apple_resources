WEBVTT

00:00:12.760 --> 00:00:13.380
Hi, good afternoon.

00:00:13.510 --> 00:00:14.360
My name is Matt Sturgis.

00:00:14.360 --> 00:00:18.650
I'm one of the alliance managers in our
worldwide developer relations group.

00:00:18.740 --> 00:00:22.330
And I'm here today to introduce
to you Sybase and some of their

00:00:22.330 --> 00:00:26.500
great partners and customers to
talk a little about session 621,

00:00:26.500 --> 00:00:29.170
Sybase ASE and the replication server.

00:00:29.180 --> 00:00:32.960
A new product recently released
in April that we're very excited

00:00:32.960 --> 00:00:34.800
about for the Mac community.

00:00:35.990 --> 00:00:39.490
For those of you who know or don't know,
Sybase has actually been on our platform

00:00:39.580 --> 00:00:44.660
for a couple of years now and has had
a very successful run with Mac OS X and

00:00:44.660 --> 00:00:46.000
specifically with the XServe.

00:00:46.020 --> 00:00:51.460
It has some really great named customers
and partners on their platform.

00:00:51.460 --> 00:00:55.220
So we're very excited to have
them up here with us today.

00:00:55.220 --> 00:00:58.950
And like I said, Steve Olson,
Director of Development or

00:00:58.950 --> 00:01:02.290
Director of Engineering from Sybase
is going to come up and speak

00:01:02.290 --> 00:01:04.660
to you for a little bit and then
introduce some of his great partners.

00:01:05.480 --> 00:01:11.360
And a customer, actually Apple,
as one of our proof points about how

00:01:11.420 --> 00:01:15.710
great the technology is and how excited
we are to be working with Sybase.

00:01:15.730 --> 00:01:21.090
So with that, I'd like to introduce
Steve and... Thanks,

00:01:21.090 --> 00:01:22.770
Matt.

00:01:25.670 --> 00:01:28.560
Okay, thanks Matt,
and thank all of you for coming today.

00:01:28.560 --> 00:01:30.040
I appreciate your time.

00:01:30.040 --> 00:01:32.840
I realize I'm standing between
you and your evening plans,

00:01:32.840 --> 00:01:34.800
so hopefully this will be worthwhile.

00:01:34.800 --> 00:01:39.860
And I also want to thank Matt and our
friends at Apple for giving us this

00:01:39.860 --> 00:01:43.800
opportunity to talk about what has
become our favorite subject lately,

00:01:43.800 --> 00:01:46.120
which is Sybase on OS X.

00:01:46.120 --> 00:01:55.670
So what I'm going to talk about is...

00:01:56.360 --> 00:01:58.470
We're going to talk about
Adaptive Server Enterprise,

00:01:58.470 --> 00:02:02.080
which is our enterprise class
database that we've had since

00:02:02.080 --> 00:02:07.200
the early days of Sybase,
and the replication server 12.6.

00:02:07.260 --> 00:02:10.140
I'll explain a little bit about
what replication is and then

00:02:10.140 --> 00:02:11.880
talk about the product itself.

00:02:11.900 --> 00:02:15.190
We'll talk a bit about the
optimization we've done for G5,

00:02:15.190 --> 00:02:18.800
some of the performance results,
and we'll also talk about

00:02:18.800 --> 00:02:22.290
some compatibility with
Microsoft SQL Server and the

00:02:22.380 --> 00:02:26.160
effort it might take you to
move from SQL Server to ASE.

00:02:26.300 --> 00:02:32.400
And then later, towards the end,
I'll introduce various partners and

00:02:32.400 --> 00:02:38.010
customers that have had successful
deployments of applications

00:02:38.010 --> 00:02:40.390
using our server on OS X.

00:02:41.300 --> 00:05:08.300
[Transcript missing]

00:05:09.710 --> 00:05:14.850
Available today is the latest
release of ASE called 12.5.2

00:05:14.850 --> 00:05:17.550
Replication Server 12.6.

00:05:17.830 --> 00:05:20.120
This is new,
just released in April of this year,

00:05:20.140 --> 00:05:20.800
late April.

00:05:20.800 --> 00:05:25.200
We also have a number of client
interfaces available for the Mac,

00:05:25.200 --> 00:05:28.310
JDBC, ODBC,
our own proprietary APIs called

00:05:28.310 --> 00:05:35.120
Open Client for you to build C or C++
applications using our native APIs.

00:05:36.310 --> 00:05:39.800
And also we have a mobile and
embedded database that has been

00:05:39.800 --> 00:05:44.280
very successful in its market niche
called Adaptive Server Enterprise,

00:05:44.280 --> 00:05:48.530
sorry, Adaptive Server Anywhere
or SQL Anywhere Studio.

00:05:48.540 --> 00:05:53.340
Version 9.0 is the latest release
and that's available on OS X as well.

00:05:53.340 --> 00:05:59.240
We love the Mac OS X operating system
and we are committed to continuing

00:05:59.240 --> 00:06:05.000
our support and enhancing our
support on this platform over time.

00:06:06.590 --> 00:06:12.800
Focusing on ASE, again I mentioned that
Sybase was founded in 1984.

00:06:12.800 --> 00:06:17.390
Our first public release was in 1987,
version 2.1.

00:06:17.390 --> 00:06:24.240
It was licensed to Microsoft about a
year later and we did a port to OS 2.

00:06:24.240 --> 00:06:28.110
And we then established a business
relationship with Microsoft that

00:06:28.110 --> 00:06:30.370
lasted approximately 10 years.

00:06:31.590 --> 00:06:35.660
So we have a lot in common even
today after all of this time.

00:06:35.660 --> 00:06:38.540
There's still a lot of
commonality between the

00:06:38.540 --> 00:06:41.470
SQL Server of Microsoft and ASC.

00:06:41.520 --> 00:06:45.450
We basically implement
a standard SQL language,

00:06:45.550 --> 00:06:53.980
SQL 92, plus a number of extensions
specific to the OLTP environment.

00:06:55.010 --> 00:07:01.080
Architecturally,
we rely heavily on the Unix services

00:07:01.200 --> 00:07:02.800
provided by any given platform.

00:07:02.800 --> 00:07:06.650
We also are available
on the Windows platform,

00:07:06.650 --> 00:07:11.160
but we're highly optimized for Unix.

00:07:11.160 --> 00:07:14.660
Back in 1984,
when the company was founded,

00:07:14.660 --> 00:07:18.680
the first platforms that we
considered moving our software

00:07:18.740 --> 00:07:22.200
to was VaxVMS and SunOS.

00:07:22.200 --> 00:07:25.700
And if you recall back in those days,
SunOS was essentially

00:07:25.700 --> 00:07:29.200
the first commercial
implementation of Berkeley Unix.

00:07:29.200 --> 00:07:35.440
So BSD Unix is very familiar to us,
and we're very happy to see it

00:07:35.440 --> 00:07:37.200
again in a commercial product.

00:07:37.200 --> 00:07:39.200
It's an old friend in a new coat.

00:07:39.200 --> 00:07:41.200
So we rely heavily on it.

00:07:41.200 --> 00:07:46.200
And essentially what ASE is
about is it's a Unix process.

00:07:46.200 --> 00:07:47.190
We call it an engine.

00:07:47.200 --> 00:07:49.200
And we build our own threads.

00:07:49.200 --> 00:07:50.200
We manage our own threads.

00:07:50.200 --> 00:07:52.190
And each engine manages
some number of threads.

00:07:52.200 --> 00:07:56.180
And its own scheduling and so forth.

00:07:56.200 --> 00:08:04.200
Engine zero reads a config block and
determines how to allocate memory.

00:08:04.280 --> 00:08:09.050
And then initializes a shared
memory region that is used in

00:08:09.050 --> 00:08:12.200
case there's additional engines.

00:08:12.200 --> 00:08:15.300
If you have two CPUs, for example,
you can attach or

00:08:15.300 --> 00:08:17.200
configure a second engine.

00:08:17.200 --> 00:08:20.130
If you have ten CPUs,
you could configure ten engines.

00:08:20.220 --> 00:08:21.200
So engine zero is very similar.

00:08:21.200 --> 00:08:24.340
So engine zero creates
the shared memory region,

00:08:24.340 --> 00:08:27.200
and all subsequent
engines then attach to it.

00:08:27.200 --> 00:08:31.200
And the shared memory region
contains our data cache,

00:08:31.200 --> 00:08:33.430
our procedure cache
for stored procedures,

00:08:33.430 --> 00:08:36.200
for compiling ad hoc queries.

00:08:36.200 --> 00:08:39.200
And it also contains all
of the system metadata,

00:08:39.200 --> 00:08:41.200
information about objects,
our scheduler queues,

00:08:41.200 --> 00:08:43.180
thread-specific data, and so forth.

00:08:43.210 --> 00:08:46.200
All of that is resident
within shared memory.

00:08:46.200 --> 00:08:49.200
So we're very,
very happy this week to learn about

00:08:49.200 --> 00:08:50.200
the 64-bit capabilities of TAS.

00:08:50.210 --> 00:08:56.920
Because with a 32-bit application,
you are limited to about a

00:08:56.930 --> 00:08:58.960
4-gigabyte address space.

00:08:59.200 --> 00:09:02.670
With 64 bits,
what it means to us is the shared memory

00:09:02.680 --> 00:09:08.190
region could be essentially as large as
you can configure memory on a machine.

00:09:08.210 --> 00:09:11.060
So 8 gig, no problem.

00:09:11.200 --> 00:09:15.310
Recently, we've done a benchmark with
a major hardware manufacturer

00:09:15.390 --> 00:09:18.200
involving 256 gigabytes of memory.

00:09:18.200 --> 00:09:22.430
So if Apple provided us with
a machine that could configure

00:09:22.430 --> 00:09:26.160
or contain 256 gig of memory,
we would be able to use it.

00:09:26.210 --> 00:09:31.200
And the advantage there is that
the more data we can put in cache,

00:09:31.200 --> 00:09:34.240
the less I/O we have to do,
and therefore the better the

00:09:34.240 --> 00:09:37.200
throughput is going to be,
as a general rule.

00:09:37.240 --> 00:09:41.810
So engine zero listens for
connections and then determines the

00:09:41.810 --> 00:09:46.310
load that's on all of the engines
and dispatches to the engine with

00:09:46.310 --> 00:09:47.200
the fewest number of connections.

00:09:47.200 --> 00:09:53.180
So we do some load balancing there.

00:09:53.210 --> 00:09:57.200
Each engine communicates with clients
then through Berkeley sockets.

00:09:57.210 --> 00:10:01.600
And each engine is capable
of handling about 3,000 or up

00:10:01.600 --> 00:10:04.200
to about 3,000 connections.

00:10:04.350 --> 00:10:11.200
For a total on an XSERV today of
about 6,000 client connections.

00:10:11.270 --> 00:10:14.190
Okay.

00:10:14.700 --> 00:10:20.330
So we've also added some extensions
to this port to take advantage of some

00:10:20.330 --> 00:10:24.420
unique facilities offered by Mac OS X,
including Rendezvous.

00:10:24.420 --> 00:10:28.450
When our server comes up,
we register with Rendezvous so that any

00:10:28.450 --> 00:10:34.110
Rendezvous-enabled client can detect the
presence of this server in the network.

00:10:34.210 --> 00:10:38.310
It's a very simple interface,
but a very powerful capability is

00:10:38.310 --> 00:10:40.720
enabled through this interface.

00:10:41.280 --> 00:10:44.010
So during initialization,
our server comes up,

00:10:44.080 --> 00:10:47.100
figures out its port number,
etc., and then registers

00:10:47.100 --> 00:10:50.830
with Rendezvous and makes its
presence known to the network.

00:10:52.620 --> 00:10:55.240
We also provide a
Cocoa-based application,

00:10:55.240 --> 00:10:58.510
which is essentially a
discovery tool that lists all

00:10:58.530 --> 00:11:02.810
of the servers in your subnet,
all of them available through Rendezvous.

00:11:02.820 --> 00:11:05.930
It's a Rendezvous client,
listens for connections of

00:11:05.930 --> 00:11:09.240
a particular type or for
services of a particular type,

00:11:09.290 --> 00:11:13.100
and also has a login panel.

00:11:13.100 --> 00:11:16.620
So as you scroll through this
list of services or servers,

00:11:16.620 --> 00:11:23.300
the information that is needed to enable
our client APIs to connect to that

00:11:23.370 --> 00:11:25.980
server is showing up in the login panel.

00:11:25.980 --> 00:11:31.640
The host name, the port number,
you provide a login name and a password,

00:11:31.640 --> 00:11:35.790
and then we pop up an
interactive SQL query window.

00:11:35.800 --> 00:11:39.130
So you can then issue queries,
the results are displayed

00:11:39.210 --> 00:11:41.570
in the middle panel,
and then errors and

00:11:41.570 --> 00:11:42.960
messages and so forth.

00:11:43.010 --> 00:11:44.030
And then the results are
displayed in the middle panel,

00:11:44.030 --> 00:11:44.950
and then errors and
messages and so forth.

00:11:44.960 --> 00:11:48.390
So this is an interactive
SQL application that requires no

00:11:48.390 --> 00:11:50.960
configuration whatsoever on your part.

00:11:50.960 --> 00:11:55.100
It's just all enabled through Rendezvous,
which is a very powerful capability.

00:11:58.590 --> 00:12:01.070
Open Directory Authentication.

00:12:01.150 --> 00:12:08.270
ASE has recently implemented a feature we
call Directory Services Authentication.

00:12:08.270 --> 00:12:12.870
And what that means is in past
incarnations of our server,

00:12:12.870 --> 00:12:16.390
all of the user information was
stored in our system catalogs.

00:12:16.390 --> 00:12:19.510
The login name and encrypted
password and so forth.

00:12:19.510 --> 00:12:22.530
And so you had to manage
the passwords inside ASE.

00:12:22.530 --> 00:12:27.480
You have to manage the passwords in your
operating system and perhaps elsewhere.

00:12:28.500 --> 00:12:33.080
What Open Directory Authentication
does is allow you to authenticate

00:12:33.080 --> 00:12:36.480
a login using the passwords
that might be in an LDAP server,

00:12:36.480 --> 00:12:41.070
Active Directory, maybe Kerberos,
or even Network Information Services or

00:12:41.070 --> 00:12:44.010
the Yellow Pages,
depending on where you prefer

00:12:44.010 --> 00:12:45.780
to store user information.

00:12:45.780 --> 00:12:49.820
So we can authenticate based on
information that's common to all of

00:12:49.820 --> 00:12:52.550
your services and all of your platforms.

00:12:52.560 --> 00:12:54.960
So this is a very popular feature.

00:12:54.960 --> 00:12:57.950
On other platforms,
we don't use Open Directory.

00:12:58.280 --> 00:13:01.240
We use PAM or Plugable
Authentication Modules.

00:13:01.240 --> 00:13:03.860
And on Windows, we use Active Directory.

00:13:06.320 --> 00:13:13.010
With the Panther release of OS X,
a very interesting feature was added

00:13:13.010 --> 00:13:17.340
to the release on the OS X server,
which is called Server Admin.

00:13:17.340 --> 00:13:22.470
Server Admin allows you to specify a
number of hosts that are available in

00:13:22.680 --> 00:13:28.120
your network and lets you manage and
evaluate and get a status of all of

00:13:28.120 --> 00:13:31.170
the services on all of those hosts.

00:13:31.250 --> 00:13:34.430
So in this example,
we have four servers that are

00:13:34.430 --> 00:13:39.520
configured inside the Server Admin tool,
and one of them has a pull-down

00:13:39.520 --> 00:13:43.380
showing all of the services
available on that machine.

00:13:43.380 --> 00:13:47.310
So what we have done is provided
a plug-in on both this client and

00:13:47.310 --> 00:13:51.740
on the server side for Adaptive
Server Enterprise to allow you to manage

00:13:51.740 --> 00:13:54.180
ASE through the Server Admin tool.

00:13:54.180 --> 00:13:58.370
And in this shot,
what comes up is simply an overview.

00:13:58.620 --> 00:14:02.550
It tells you the status of
ASE and the backup server that are

00:14:02.550 --> 00:14:05.110
running on this particular host.

00:14:06.990 --> 00:14:09.800
We also provide a graphical
interface that shows you

00:14:09.800 --> 00:14:11.600
some of the characteristics.

00:14:11.600 --> 00:14:15.170
We have, in this example, network I/O,
the amount of network I/O in

00:14:15.170 --> 00:14:16.860
terms of reads and writes.

00:14:16.980 --> 00:14:19.890
We also provide a response time graphic.

00:14:19.890 --> 00:14:26.080
We provide a graphic for disk
I/O and also for procedure

00:14:26.080 --> 00:14:28.820
and data cache hit ratios.

00:14:28.960 --> 00:14:32.540
In other words,
one measure of the configuration

00:14:32.610 --> 00:14:37.460
accuracy or optimization of your
server is whether or not your data

00:14:37.460 --> 00:14:39.900
cache is optimal for the load.

00:14:39.900 --> 00:14:45.140
And if most of your data
access is basically logical

00:14:45.140 --> 00:14:49.530
reads or logical writes,
that means you're not

00:14:49.540 --> 00:14:51.900
doing physical I/O to disk.

00:14:51.900 --> 00:14:53.900
So the ratios should be fairly high.

00:14:53.900 --> 00:14:57.020
And we show a graphic showing
you the ratios of the logical to

00:14:57.050 --> 00:15:02.190
physical reads reads in both the data
cache and in the procedure cache.

00:15:02.550 --> 00:15:06.280
So it's a very powerful tool and
it gives you an ability to get a

00:15:06.280 --> 00:15:12.500
status report at a glance indicating
the general health of your server.

00:15:12.510 --> 00:15:15.640
We also provide some tabular
reports that give you some idea of

00:15:15.640 --> 00:15:20.500
the operational characteristics,
number of users, number of engines,

00:15:20.500 --> 00:15:21.100
and so forth.

00:15:21.100 --> 00:15:25.840
There's a lot of information you
can get a quick read of the health

00:15:25.950 --> 00:15:28.800
of your server through this tool.

00:15:29.610 --> 00:15:34.870
We also provide for development
purposes a system preference panel.

00:15:34.870 --> 00:15:38.960
So you can go to system preferences
after you've installed our server and

00:15:38.960 --> 00:15:42.270
pull up a Sybase ASE preference panel.

00:15:42.280 --> 00:15:44.890
And that will tell you what's
going on with the server,

00:15:44.890 --> 00:15:46.150
whether it's up or not.

00:15:46.150 --> 00:15:47.420
It's a rendezvous client.

00:15:47.440 --> 00:15:50.780
Those green dots indicate
that a server is up.

00:15:50.780 --> 00:15:54.660
And if they're red,
that means there's a problem.

00:15:54.660 --> 00:15:58.920
And if they're not any color,
that means the server is down.

00:15:59.530 --> 00:16:02.360
You can look at the
error log for the server,

00:16:02.380 --> 00:16:10.770
and you can also configure it or
revise the configuration of the server.

00:16:12.320 --> 00:16:16.840
So what's new in 12.5 too is
we've done some optimization

00:16:16.840 --> 00:16:21.020
specific to the G5 processor,
and I'll talk more about that in a bit.

00:16:21.040 --> 00:16:23.400
We also provide a sample application.

00:16:23.400 --> 00:16:27.640
It's an Xcode project that
illustrates the use of Rendezvous,

00:16:27.760 --> 00:16:29.590
Cocoa, and Open Client.

00:16:29.600 --> 00:16:36.360
It's based on the server discovery
query tool that I showed you earlier,

00:16:36.360 --> 00:16:40.380
and we provide a sample application
that illustrates how all these things,

00:16:40.540 --> 00:16:44.240
Cocoa, Rendezvous, and Open Client,
can be used together in an application.

00:16:44.380 --> 00:16:51.410
We also provide our Open Client
APIs in a Mac OS X framework so that

00:16:51.410 --> 00:16:55.730
you can embed the framework in an
application bundle or to make it very,

00:16:55.740 --> 00:17:01.000
very easy for you to deploy
applications throughout various clients.

00:17:02.000 --> 00:20:05.500
[Transcript missing]

00:20:05.910 --> 00:20:10.420
Also, we found through the use of Shark,
which is an outstanding tool for

00:20:10.420 --> 00:20:13.340
getting a quick profile of what's
going on with your application,

00:20:13.360 --> 00:20:18.130
we found that some of the system
functions in the C runtime library

00:20:18.130 --> 00:20:20.130
were kind of holding us back.

00:20:20.200 --> 00:20:26.900
And so we re-implemented or implemented
some of those of our own so that we

00:20:27.050 --> 00:20:30.630
could get past those bottlenecks.

00:20:30.700 --> 00:20:33.370
So we're not where we want to be yet.

00:20:33.460 --> 00:20:38.380
There's a few things that
we can do with the compiler,

00:20:38.380 --> 00:20:39.900
including feedback optimization.

00:20:39.900 --> 00:20:45.130
Feedback optimization simply means that
you compile with certain command line

00:20:45.130 --> 00:20:51.400
options and then run the product or your
application under a representative load.

00:20:51.400 --> 00:20:58.520
And then the feedback-optimized server
will collect information about the

00:20:58.730 --> 00:21:03.120
use of routines and some statistics
about the running of the server.

00:21:03.120 --> 00:21:09.370
And then you can relink feeding that
statistic file into your linking

00:21:09.370 --> 00:21:16.160
process to basically give you a more
optimal layout of your executable.

00:21:16.160 --> 00:21:19.220
And that's something we've done very,
very successfully.

00:21:19.220 --> 00:21:27.590
And it usually gives us a 15 to 20%.
Boost in throughput on our TPCC tests.

00:21:28.280 --> 00:21:33.360
We have looked at the
PowerPC compiler from IBM,

00:21:33.360 --> 00:21:35.180
and it's very interesting.

00:21:35.180 --> 00:21:38.130
It has some additional
optimization features over GCC,

00:21:38.140 --> 00:21:46.390
but GCC now has the ability
to give us 64-bit processes.

00:21:46.420 --> 00:21:50.800
So we're not so sure where we're going
to go with the PowerPC compiler from IBM.

00:21:51.670 --> 00:21:55.840
But anyway, our expectations are,
based on the horsepower that

00:21:55.870 --> 00:21:59.530
we've seen and the throughput
we've seen from the G5s,

00:21:59.530 --> 00:22:04.790
we should be able to get about 30,000
transactions per minute per CPU from

00:22:04.790 --> 00:22:10.680
the G5s for a total of at least 60,000
transactions a minute on a dual system.

00:22:10.680 --> 00:22:12.470
Now, that's not too bad.

00:22:12.480 --> 00:22:14.420
That's about what we've
seen on other platforms.

00:22:14.420 --> 00:22:19.460
But the interesting attribute of
this test that we learned was that

00:22:19.460 --> 00:22:25.560
we are completely... 100% CPU bound,
meaning that we're not waiting

00:22:25.560 --> 00:22:28.940
on I/O from the network,
I/O from the disk system.

00:22:28.940 --> 00:22:33.140
We're completely CPU bound,
which means that if Apple, for example,

00:22:33.140 --> 00:22:36.410
had a 3 GHz CPU,
we should see a proportional increase,

00:22:36.490 --> 00:22:39.140
a 50% increase in throughput.

00:22:39.160 --> 00:22:43.020
From the testing we've done,
the X-rayed units are more than

00:22:43.020 --> 00:22:47.660
capable of handling the kinds of
load that we've been throwing at it.

00:22:47.660 --> 00:22:53.920
In fact, I don't see us... I mean,
it would take more horsepower

00:22:53.920 --> 00:22:57.280
before we started to see the
I/O system being a limit.

00:22:59.620 --> 00:23:07.440
Okay, so one of the attributes that we
found to be important to our customers

00:23:07.560 --> 00:23:09.500
is our SQL server compatibility.

00:23:09.500 --> 00:23:14.650
We're finding increasingly that
customers are somewhat unhappy with

00:23:14.650 --> 00:23:16.900
Microsoft for a variety of reasons.

00:23:16.900 --> 00:23:21.940
There's an interest in Unix-based servers
as opposed to Windows-based servers.

00:23:21.940 --> 00:23:27.420
And there's an interest in
moving from those servers to ASC.

00:23:27.520 --> 00:23:30.850
And because of our common heritage,
that's relatively easy.

00:23:30.860 --> 00:23:34.980
So as I mentioned,
the server from Microsoft was

00:23:34.980 --> 00:23:38.900
licensed from Sybase,
and we have a lot in common still.

00:23:38.900 --> 00:23:46.600
Even though late in about 1998 or 97,
the two companies parted ways,

00:23:46.600 --> 00:23:49.540
we still have a lot in common.

00:23:51.810 --> 00:23:54.300
So there's a high
degree of compatibility.

00:23:54.300 --> 00:23:57.110
There are, however,
some incompatibilities because

00:23:57.120 --> 00:24:00.420
we have evolved our product in a
certain direction and Microsoft has

00:24:00.430 --> 00:24:02.600
evolved its product in another.

00:24:02.600 --> 00:24:06.900
But there's a high degree of
compatibility still between the two.

00:24:06.900 --> 00:24:11.420
So what we've done is we've adopted
a strategy to minimize or reduce

00:24:11.420 --> 00:24:14.020
the incompatibilities over time.

00:24:14.020 --> 00:24:16.020
It's not going to happen all at once.

00:24:16.020 --> 00:24:19.620
For example, with 12.5.03,
we introduced a number of new

00:24:19.620 --> 00:24:23.960
built-in functions and some global
variables to enhance the compatibility

00:24:24.060 --> 00:24:26.640
of our server with Microsoft.

00:24:26.690 --> 00:24:31.140
With 12.5.1, we've added some additional
syntax to our language,

00:24:31.140 --> 00:24:34.670
specifically for purposes of
compatibility with SQL Server.

00:24:34.680 --> 00:24:39.620
Derived tables, bracketed identifiers,
sort of a unique SQL Server construct

00:24:39.620 --> 00:24:42.120
that allows you to create an identifier.

00:24:42.180 --> 00:24:43.480
For example, a table name.

00:24:43.480 --> 00:24:48.200
Or a column name with spaces or
maybe it's a reserved SQL keyword.

00:24:48.200 --> 00:24:52.690
Very easy to use that as a column
name or table name simply by

00:24:52.760 --> 00:24:55.240
surrounding it with brackets.

00:24:55.240 --> 00:24:57.140
And so on.

00:24:57.170 --> 00:25:01.230
So we've added a number of constructs
within the language for this purpose.

00:25:01.240 --> 00:25:07.140
Next year, we'll have a new release,
version 15, where we'll address some

00:25:07.230 --> 00:25:09.970
additional more significant issues.

00:25:10.010 --> 00:25:11.580
For example, large identifiers.

00:25:11.580 --> 00:25:12.940
Identifier lengths today are 3.5.

00:25:12.940 --> 00:25:14.330
Identifier lengths today are 30 bytes.

00:25:14.480 --> 00:25:18.300
With SQL Server, it's 128 characters.

00:25:18.370 --> 00:25:22.210
So we're adding up to a
255-byte identifier support,

00:25:22.300 --> 00:25:28.160
scrollable cursors, forward, backward,
relative, absolute, and so forth.

00:25:28.160 --> 00:25:33.420
Additional data types that are found
in SQL Server today but not in ASE.

00:25:33.420 --> 00:25:37.810
Computed columns,
columns whose value is determined

00:25:37.810 --> 00:25:40.240
by values in other columns.

00:25:40.270 --> 00:25:41.620
And the select top.

00:25:41.660 --> 00:25:46.970
So one of the examples I'd like
to talk about briefly is our

00:25:46.970 --> 00:25:50.320
partnership with SAP Business One.

00:25:50.400 --> 00:25:55.210
They've moved their application to ASE.

00:25:55.240 --> 00:25:59.940
And some of the issues that they
encountered in the process of doing that,

00:25:59.940 --> 00:26:02.340
I'd like to just review fairly quickly.

00:26:02.340 --> 00:26:04.020
They ran into some data type issues.

00:26:04.020 --> 00:26:05.600
In particular, ntext.

00:26:05.600 --> 00:26:09.320
ntext is a Unicode text data type.

00:26:09.390 --> 00:26:10.900
And there's no equivalent in Sybase.

00:26:10.900 --> 00:26:11.400
However.

00:26:11.660 --> 00:26:16.770
We can configure -- they ended up
using text as a data type with a

00:26:16.770 --> 00:26:21.660
default character set of UTF-8,
which gave them equivalent capabilities.

00:26:21.660 --> 00:26:24.400
Select top was used
extensively by Business One.

00:26:24.400 --> 00:26:27.770
And we had -- we did
not support that syntax.

00:26:27.830 --> 00:26:31.180
So it was painful for them
to work around that issue.

00:26:31.300 --> 00:26:34.020
They used Active Directory for
user authentication.

00:26:34.020 --> 00:26:36.720
And that wasn't available,
at least at the time.

00:26:36.720 --> 00:26:38.710
It is now.

00:26:39.210 --> 00:26:57.140
ODBc Driver Performance.

00:26:57.140 --> 00:26:57.140
We have a partnership with a third
party to provide ODBc drivers.

00:26:57.140 --> 00:26:57.140
We had some performance issues,
so as a result of this issue,

00:26:57.140 --> 00:26:57.140
we decided to just roll
our own ODBc driver.

00:26:57.140 --> 00:26:57.140
And that's what's
happening now for Windows,

00:26:57.140 --> 00:26:57.140
Linux, and OS X.

00:26:58.040 --> 00:27:02.040
That driver is available now in beta
on Mac OS X if you're interested.

00:27:02.040 --> 00:27:07.260
So they also ran into some
query limits and server limits.

00:27:07.260 --> 00:27:11.800
They're just different on ASE,
and we had to address those.

00:27:11.800 --> 00:27:17.750
And also some administrative tasks that
were different between the two servers.

00:27:17.760 --> 00:27:20.310
And most of the issues had to
do with administrative tasks.

00:27:20.360 --> 00:27:22.260
Our administration tasks are different.

00:27:22.260 --> 00:27:23.640
The syntax is different.

00:27:23.640 --> 00:27:24.600
The behavior is different.

00:27:24.600 --> 00:27:26.160
And so on.

00:27:26.730 --> 00:27:29.780
So those are some of the issues
that Business One had to address.

00:27:29.780 --> 00:27:35.050
And the interesting thing, though,
is that we now have a partner team

00:27:35.050 --> 00:27:39.620
in engineering focused specifically
on addressing issues related to

00:27:39.620 --> 00:27:45.440
porting an application or moving it
from another database vendor to ASE.

00:27:45.440 --> 00:27:49.610
And if you have an application
that is interested in doing that,

00:27:49.690 --> 00:27:53.330
we'd be happy to help you out,
as we've done with SAP and Business One.

00:27:55.160 --> 00:27:56.560
Tools of course make it easy.

00:27:56.560 --> 00:28:02.270
We can migrate schema and data
from just about any server to ASC.

00:28:02.270 --> 00:28:08.280
And later you'll hear from Bob how
Servoy can make this happen as well.

00:28:09.610 --> 00:28:13.320
Once you've moved the server,
the data and the schema,

00:28:13.340 --> 00:28:16.280
you also have to concern
yourself with the client.

00:28:16.280 --> 00:28:22.100
We provide ODBC drivers,
OlayDB on Windows, ADO.net on Windows,

00:28:22.180 --> 00:28:24.200
JDBC on any platform.

00:28:24.200 --> 00:28:26.440
It's a pure or type 4 driver.

00:28:26.440 --> 00:28:29.440
And Visual Basic.

00:28:29.440 --> 00:28:33.460
If your application is in Visual Basic,
you can use Real Basic.

00:28:33.490 --> 00:28:39.380
We provide a plug-in for the
Real Basic software that uses ASC.

00:28:40.370 --> 00:28:41.730
And of course, DB Library.

00:28:41.750 --> 00:28:43.740
One of the things that
besides the server,

00:28:43.740 --> 00:28:47.320
Microsoft also inherited DB Library.

00:28:47.320 --> 00:28:51.260
And they again have
evolved their API into in a

00:28:51.260 --> 00:28:52.860
different direction slightly.

00:28:52.860 --> 00:28:56.770
So there's a lot of commonality,
but there are some differences,

00:28:56.790 --> 00:28:58.980
especially in terms of data types.

00:29:00.510 --> 00:29:05.670
So our goal is to make it as
easy as possible for you to

00:29:05.670 --> 00:29:08.310
migrate from SQL Server to ASC.

00:29:08.470 --> 00:29:13.190
And we're doing that by enhancing our
server to be as compatible as possible.

00:29:13.300 --> 00:29:14.690
Now it's a moving target.

00:29:14.840 --> 00:29:18.450
I expect that the UConn release of
SQL Server will have additional syntax,

00:29:18.450 --> 00:29:20.220
but we're keeping track of that.

00:29:20.240 --> 00:29:24.800
And as issues come up that are
raised by you and our partners,

00:29:24.800 --> 00:29:28.210
we expect to address
them within our server.

00:29:30.370 --> 00:29:33.530
I'd also like to mention some
other tools and solutions

00:29:33.530 --> 00:29:39.060
available today using the Mac,
ASE, and OS X.

00:29:39.060 --> 00:29:43.990
The WebObjects product has an
adapter for it that is designed

00:29:43.990 --> 00:29:46.620
by Apple and supports ASE.

00:29:46.620 --> 00:29:51.060
It's on the CD when you buy WebObjects.

00:29:51.060 --> 00:29:53.100
Real Basic I've already mentioned.

00:29:53.100 --> 00:29:56.210
Another one I'd like to point
out is an outstanding product.

00:29:56.300 --> 00:30:03.270
If you want to build a Cocoa application
using a very slick user interface,

00:30:03.280 --> 00:30:08.060
using, you know,
advanced objects for database session

00:30:08.060 --> 00:30:13.420
and result set management and so forth,
take a look at Runtime's labs.

00:30:13.420 --> 00:30:16.540
It's all written in C, C++, Objective-C.

00:30:16.540 --> 00:30:20.340
It's a dynamite tool and framework.

00:30:20.690 --> 00:30:25.200
Also, you'll be hearing more later
in this session from Servoy,

00:30:25.200 --> 00:30:30.730
who has a very,
very nice tool for Java implementations,

00:30:30.730 --> 00:30:33.120
and Bob will be talking about that later.

00:30:33.120 --> 00:30:35.930
PowerEasy is an interesting solution.

00:30:35.940 --> 00:30:38.880
They have an ERP application for
small to medium-sized businesses.

00:30:38.880 --> 00:30:42.850
It's an outstanding package,
and it's a complete solution.

00:30:45.280 --> 00:30:46.200
And so forth.

00:30:46.200 --> 00:30:49.130
So, replication server.

00:30:49.210 --> 00:30:50.960
I'd like to talk briefly about this.

00:30:50.960 --> 00:30:53.120
What do we mean by replication?

00:30:53.120 --> 00:30:56.510
Replication is essentially
copying database changes

00:30:56.530 --> 00:30:58.680
from one server to another.

00:30:58.680 --> 00:31:03.480
And when we say copying database changes,
we don't mean any changes.

00:31:03.480 --> 00:31:07.510
We mean on a transaction basis so
that all of the changes associated

00:31:07.510 --> 00:31:13.240
with one committed transaction can be
propagated atomically to another server.

00:31:13.720 --> 00:31:17.080
So, if the transaction is
rolled back in the middle,

00:31:17.080 --> 00:31:20.650
changes that might have
occurred are not propagated.

00:31:21.400 --> 00:31:25.240
It's a store-and-forward model.

00:31:25.240 --> 00:31:28.740
We have a replication server
which captures changes

00:31:28.740 --> 00:31:31.470
from our transaction log.

00:31:31.600 --> 00:31:55.000
[Transcript missing]

00:31:55.810 --> 00:32:00.940
Models that our customers have used
tend to fall into four categories.

00:32:00.940 --> 00:32:04.870
There's a model of data distribution
where you can distribute data from

00:32:04.870 --> 00:32:07.020
one site to n number of other sites.

00:32:07.020 --> 00:32:10.640
Consolidation,
meaning any number of sites can replicate

00:32:10.640 --> 00:32:12.990
their changes to one central site.

00:32:13.030 --> 00:32:17.000
Synchronization is essentially
a bidirectional replication.

00:32:18.000 --> 00:32:22.930
And then disaster recovery or what we
might call a warm standby where you

00:32:22.960 --> 00:32:28.000
can replicate all the changes in a
database to a warm standby server so

00:32:28.000 --> 00:32:34.890
that if your site is suddenly taken out,
you have a backup or a warm standby.

00:32:34.900 --> 00:32:36.070
And we'll talk more about that.

00:32:37.600 --> 00:32:41.400
The distribution model is relatively
straightforward conceptually.

00:32:41.400 --> 00:32:43.410
You have changes going
on at a central site,

00:32:43.410 --> 00:32:47.130
in this example San Francisco,
that need to be propagated to

00:32:47.130 --> 00:32:51.250
any of a number of other sites,
including New York, Dallas,

00:32:51.250 --> 00:32:53.940
or another San Francisco installation.

00:32:53.940 --> 00:32:56.140
So that's the data distribution model.

00:32:56.140 --> 00:32:57.960
And again, it's a publish/subscribe.

00:32:57.960 --> 00:33:02.340
All of these three servers have
to subscribe to those changes,

00:33:02.340 --> 00:33:06.100
and the ASE then has to
publish those changes.

00:33:06.100 --> 00:33:08.100
So there is some setup.

00:33:08.100 --> 00:33:12.100
We have tools for that,
making it relatively easy to do that.

00:33:12.210 --> 00:33:16.600
Data consolidation is very similar,
except it's just going the other way.

00:33:16.600 --> 00:33:21.610
Changes from any remote site can
be propagated and consolidated

00:33:21.610 --> 00:33:23.990
into a single central site.

00:33:24.820 --> 00:33:29.330
Synchronization is basically
a bidirectional replication,

00:33:29.340 --> 00:33:30.720
nothing more complicated than that.

00:33:30.750 --> 00:33:36.700
If there's conflicts, in other words,
keys are duplicated in either direction,

00:33:36.700 --> 00:33:41.780
then they're placed in a rep server queue
and you have to resolve them manually.

00:33:43.450 --> 00:33:47.240
And then there's the warm standby
or disaster recovery scenario.

00:33:47.240 --> 00:33:50.810
So you have some number
of clients interacting and

00:33:50.810 --> 00:33:53.200
transacting with a primary server.

00:33:53.200 --> 00:33:55.980
Changes are replicated en masse.

00:33:55.980 --> 00:34:01.960
In other words, the entire database is
replicated to a standby server.

00:34:01.960 --> 00:34:08.160
The changes are placed in a queue
and forwarded when possible.

00:34:08.160 --> 00:34:14.820
Now, the primary may crash or, you know,
you may have a power outage.

00:34:14.820 --> 00:34:16.880
Something may happen
on your primary server.

00:34:16.880 --> 00:34:21.710
Our client APIs allow automatic client
failover to an alternate server.

00:34:21.710 --> 00:34:25.760
And our replication server
can be notified to reverse

00:34:25.770 --> 00:34:28.360
the direction of replication.

00:34:28.360 --> 00:34:32.630
So when this happens,
the queues from the primary

00:34:32.630 --> 00:34:35.260
to the standby are drained.

00:34:35.260 --> 00:34:39.790
And then all the changes in the standby
then... are propagated back to the

00:34:39.800 --> 00:34:46.150
rep server who places them in a queue
until the primary becomes available.

00:34:46.160 --> 00:34:49.960
And a lot of our customers use this.

00:34:49.960 --> 00:34:51.960
For example,
we had a number of customers in

00:34:51.960 --> 00:34:54.960
the World Trade Center on 9/11.

00:34:54.960 --> 00:34:58.110
Their entire site was taken out.

00:34:58.120 --> 00:35:01.320
And fortunately,
some of them had backup sites in

00:35:01.320 --> 00:35:05.370
either Chicago or London or...
There were no geographic... There are

00:35:05.370 --> 00:35:09.960
no geographic limitations on where you
can... where you can put your standby.

00:35:09.960 --> 00:35:12.970
It's entirely up to your network
and how much bandwidth you want

00:35:12.970 --> 00:35:15.380
to pay for in a wide area network.

00:35:15.460 --> 00:35:19.910
So they were able to recover
and get back online very,

00:35:19.960 --> 00:35:21.380
very quickly.

00:35:22.200 --> 00:35:25.050
Architecturally,
the model is fairly simple.

00:35:25.230 --> 00:35:30.100
A server that wishes to publish changes
has to have a replication agent.

00:35:30.210 --> 00:35:33.700
Within ASE,
that agent is simply a background thread,

00:35:33.700 --> 00:35:37.640
one for each database that reads the
transaction log and then forwards

00:35:37.640 --> 00:35:40.100
changes to the replication server.

00:35:40.100 --> 00:35:43.640
The replication server then knows
who the subscribers are and then

00:35:43.640 --> 00:35:46.090
propagates those changes to subscribers.

00:35:46.100 --> 00:35:52.180
The agents we provide are, of course,
agents for our own Sybase servers,

00:35:52.180 --> 00:35:59.100
but we also provide agents for Oracle,
DB2, Microsoft, Informix, and AS400.

00:35:59.100 --> 00:36:03.140
So these are log-based agents
that read transaction log,

00:36:03.140 --> 00:36:06.100
mostly log-based agents,
read the transaction log,

00:36:06.100 --> 00:36:09.900
forward data to replication server,
who then treats it like it came from

00:36:09.960 --> 00:36:12.100
ASE and propagates to any subscriber.

00:36:12.100 --> 00:36:15.100
And the subscriber need
not be a Sybase server.

00:36:15.100 --> 00:36:16.090
It can be any server.

00:36:16.100 --> 00:36:17.090
It can be Oracle.

00:36:17.110 --> 00:36:21.100
It can be DB2 or Microsoft and so forth.

00:36:21.100 --> 00:36:25.100
So one example of topologies that
some of our customers have employed,

00:36:25.100 --> 00:36:28.100
some of our largest customers,
for example, Goldman Sachs,

00:36:28.100 --> 00:36:31.090
which is one of our
largest users of RepServer,

00:36:31.090 --> 00:36:33.100
have sites all over the world.

00:36:33.100 --> 00:36:37.890
And they have consolidation,
distribution, synchronization issues,

00:36:37.890 --> 00:36:40.100
as well as warm standby issues.

00:36:40.100 --> 00:36:42.260
So they have some fairly
complex topologies,

00:36:42.260 --> 00:36:45.100
and all of those are supported
very nicely by RepServer.

00:36:45.100 --> 00:36:50.050
With version 12.6,
which was announced just in April,

00:36:50.050 --> 00:36:57.100
available now on 10.3 of OS X,
we now support multi-site availability.

00:36:57.100 --> 00:36:59.100
So you can essentially
establish channels.

00:36:59.100 --> 00:37:02.120
One RepServer might propagate
to other subscribers,

00:37:02.120 --> 00:37:05.100
which are ASEs,
but you might also forward

00:37:05.100 --> 00:37:07.080
to another RepServer.

00:37:07.100 --> 00:37:09.790
In other words,
a RepServer might be a subscriber,

00:37:09.790 --> 00:37:12.100
and it can forward changes to other ASEs.

00:37:12.100 --> 00:37:14.100
So you can fan out the changes.

00:37:14.100 --> 00:37:19.060
And obtain near infinite
scalability in this fashion.

00:37:21.040 --> 00:37:23.540
We've also simplified the interface.

00:37:23.540 --> 00:37:27.270
It's a graphical tool built on Java,
so that's also available

00:37:27.270 --> 00:37:29.000
and running well on the Mac.

00:37:29.000 --> 00:37:33.470
And the installation uses InstallShield.

00:37:35.450 --> 00:37:41.400
So, it's available today and it's
designed primarily for downtime,

00:37:41.400 --> 00:37:44.460
to manage downtime and
to distribute data.

00:37:44.460 --> 00:37:49.350
I would say more than half of
our customers use RepServer

00:37:49.360 --> 00:37:53.080
for managing downtime,
either planned or unplanned.

00:37:53.080 --> 00:37:56.000
And, of course,
many use it for distributing

00:37:56.000 --> 00:37:59.430
data around a network,
but the majority now are using

00:37:59.430 --> 00:38:01.300
it for managing downtime.

00:38:01.300 --> 00:38:05.060
By providing, you know, standby servers.

00:38:07.810 --> 00:38:13.150
Okay, and now I'd like to introduce
Eric Leister who's going to talk about an

00:38:13.150 --> 00:38:19.080
implementation at the Apple manufacturing
facilities and he has an interesting

00:38:19.080 --> 00:38:21.970
application using WebObjects.

00:38:27.670 --> 00:38:31.870
So what I'm going to start with first is
sort of what our business challenge was,

00:38:31.870 --> 00:38:33.140
what we were trying to accomplish.

00:38:33.140 --> 00:38:38.800
Basically, Apple needed an enterprise
system that would basically allow

00:38:38.800 --> 00:38:41.640
us to report and consolidate
product performance information,

00:38:41.640 --> 00:38:44.100
basically yield information
from the factories,

00:38:44.100 --> 00:38:48.910
and be able to provide that data and
the status of how things are running

00:38:48.910 --> 00:38:51.660
from multiple sites at the same time.

00:38:52.340 --> 00:38:53.930
Before,
that was being done with emails and

00:38:53.930 --> 00:38:56.390
with spreadsheets and things like that,
so you can imagine it would

00:38:56.390 --> 00:38:58.860
take a long time to consolidate
that information together.

00:38:58.860 --> 00:39:01.380
It also needed to provide
data that was accurate,

00:39:01.380 --> 00:39:03.040
real-time, and actionable.

00:39:03.080 --> 00:39:05.860
Again, being able to look at the
data and do something with it

00:39:05.930 --> 00:39:08.380
rather than consolidate data,
so we were trying to put

00:39:08.380 --> 00:39:09.690
all this stuff together.

00:39:09.700 --> 00:39:13.290
Provide real-time data for analysis
during our engineering builds,

00:39:13.290 --> 00:39:16.580
which would be for new products,
to quicker get data rather than

00:39:16.580 --> 00:39:20.070
having to wait a day to get data,
it would be there immediately.

00:39:20.120 --> 00:39:22.220
Again, coming back to high availability.

00:39:22.340 --> 00:39:24.900
We wanted to make sure that we were
able to get the data that we needed,

00:39:25.000 --> 00:39:27.070
and then also more effectively
manage these new builds,

00:39:27.100 --> 00:39:29.480
so that, you know,
bring products to market quicker.

00:39:29.480 --> 00:39:34.360
The capability also needed to be there
to integrate with our test environment,

00:39:34.370 --> 00:39:38.100
so we actually captured detailed
test information about the

00:39:38.110 --> 00:39:40.940
units that are being built,
so that we can more

00:39:40.940 --> 00:39:42.920
quickly root cause issues.

00:39:44.700 --> 00:39:49.820
So we had a set of database requirements
that we wanted to have in the database.

00:39:49.820 --> 00:39:52.230
So one was support a
mission-critical system,

00:39:52.230 --> 00:39:54.760
be able to handle high transactions.

00:39:54.760 --> 00:39:57.000
We have lots of volumes
going through the factory,

00:39:57.000 --> 00:39:58.800
so we need to make sure that
it can handle those volumes.

00:39:58.830 --> 00:40:01.350
High performance and be very scalable.

00:40:01.360 --> 00:40:06.150
So as the factories create more product,
we need to be able to handle that volume.

00:40:06.160 --> 00:40:09.960
Also be able to have a warm standby.

00:40:10.120 --> 00:40:13.180
So if something goes down,
hardware issue, drives,

00:40:13.180 --> 00:40:15.800
we'll be able to cut
over to a backup system.

00:40:15.800 --> 00:40:19.760
Also have a WebObjects
adapter and run on OS X.

00:40:22.310 --> 00:40:24.760
Application requirements.

00:40:24.760 --> 00:40:26.430
We wanted something that
was database independent.

00:40:26.440 --> 00:40:29.820
So basically whatever development
we did there could be run basically

00:40:29.920 --> 00:40:31.460
with any type of database.

00:40:31.460 --> 00:40:34.060
Provide rapid development tools.

00:40:34.580 --> 00:40:37.500
Basically we're being
asked to customize reports,

00:40:37.500 --> 00:40:40.000
add new fields,
things like that all the time.

00:40:40.000 --> 00:40:43.190
So we need to make sure that we
can go in and quickly do that.

00:40:43.200 --> 00:40:45.050
Easily maintainable deployment.

00:40:45.060 --> 00:40:48.200
Basically being able to deploy
the applications quickly.

00:40:48.200 --> 00:40:52.560
The fact that we can put them on the web
means we can update them quickly as well.

00:40:52.600 --> 00:40:53.910
They need to be scalable.

00:40:53.940 --> 00:40:56.270
If we need to add more
instances or more servers,

00:40:56.270 --> 00:40:58.570
we need to be able to
deploy those quickly.

00:40:58.610 --> 00:41:01.810
And also run an OS X server.

00:41:03.070 --> 00:41:07.320
So from an architecture,
we basically put all this on one server

00:41:07.320 --> 00:41:10.060
for our deployment to the remote site.

00:41:10.130 --> 00:41:12.800
So we start with Mac OS X Server.

00:41:12.830 --> 00:41:14.180
We add Sybase ASE.

00:41:14.180 --> 00:41:17.450
Then we put the WebObjects
layer on top of that.

00:41:17.470 --> 00:41:21.960
Our own data frameworks or data
collection frameworks go there.

00:41:21.960 --> 00:41:24.990
That's where all our business logic,
reusable components, things are at.

00:41:25.090 --> 00:41:30.250
Then we have daemons and reporting admin
and shop floor client applications for

00:41:30.250 --> 00:41:33.140
collecting data directly on the lines.

00:41:33.140 --> 00:41:37.300
Again, all this is running on one server.

00:41:37.680 --> 00:41:41.690
So our server hardware
configuration consists of,

00:41:41.840 --> 00:41:45.600
we're running G4 dual processor
133s with 2 gigs of RAM,

00:41:45.600 --> 00:41:52.830
OS X Server 1033, Sybase ASE 12.5.1,
WebObjects 5.2.3,

00:41:52.830 --> 00:41:57.580
and Apache with just the
standard WebObjects deployment

00:41:57.580 --> 00:41:59.740
through Java Monitor.

00:42:01.340 --> 00:42:05.460
So our server hardware
configuration consists of,

00:42:05.460 --> 00:42:09.290
we're running G4 dual processor
133s with 2 gigs of RAM,

00:42:09.420 --> 00:42:16.530
OS X Server 1033, Sybase ASE 12.5.1,
WebObjects 5.2.3,

00:42:16.530 --> 00:42:20.940
and Apache with just the
standard WebObjects deployment

00:42:21.370 --> 00:42:23.360
through Java Monitor.

00:42:31.300 --> 00:42:35.460
We're running G4 dual processor
133s with 2 gigs of RAM,

00:42:35.460 --> 00:42:39.050
OS X Server 1033, Sybase ASE 12.5.1,
WebObjects 5.2.3,

00:42:39.050 --> 00:42:39.050
and Apache with just the
standard WebObjects deployment

00:42:39.050 --> 00:42:39.050
through Java Monitor.

00:42:40.440 --> 00:42:45.320
So our database schema,
we have about 95 tables.

00:42:45.540 --> 00:42:48.580
One table has slightly over
9 million records and is

00:42:48.630 --> 00:42:50.000
continually growing every day.

00:42:50.000 --> 00:42:53.900
We have five tables with 1 to 5
million records each and 10 tables

00:42:53.930 --> 00:42:55.880
with over 100,000 records each.

00:42:55.880 --> 00:42:59.180
Everything, all the other tables are
less than 100,000 records.

00:43:00.200 --> 00:43:03.160
We also use Warm Standby,
basically replication server

00:43:03.180 --> 00:43:06.200
with Warm Standby for our
primary and secondary databases.

00:43:06.200 --> 00:43:09.330
And we use table replication
to the remote sites,

00:43:09.330 --> 00:43:11.440
which we go through here next.

00:43:11.440 --> 00:43:14.390
So basically,
we have three ways that we migrate

00:43:14.390 --> 00:43:16.340
data between the databases.

00:43:16.340 --> 00:43:20.010
We have Warm Standby that
replicates between the primary

00:43:20.010 --> 00:43:21.940
and the secondary database.

00:43:21.940 --> 00:43:25.700
We happen to also use the secondary
database as a reporting database.

00:43:25.700 --> 00:43:27.920
That's one of the main
reasons we've broken out the

00:43:27.920 --> 00:43:29.520
applications between reporting.

00:43:30.210 --> 00:43:32.430
We have the reporting apps, clients,
and admin apps so that we can

00:43:32.470 --> 00:43:34.740
have the reporting apps actually
target our backup database.

00:43:34.740 --> 00:43:38.560
So it's not actually the transactions
or big selects for like a year's

00:43:38.560 --> 00:43:42.900
worth of data do not affect inserts
and updates into the other database,

00:43:42.920 --> 00:43:44.080
the primary.

00:43:44.080 --> 00:43:48.380
We also have table replication
for about 31 tables that

00:43:48.380 --> 00:43:53.640
pump things like usernames,
passwords, other information that needs

00:43:53.640 --> 00:43:55.220
to be shared across the sites.

00:43:55.260 --> 00:43:57.130
Those are all going
through table replication.

00:43:57.140 --> 00:44:00.100
And then we have an export-import
routine that we use.

00:44:00.200 --> 00:44:03.920
Basically, we use the EO model,
and we dump the data into flat files,

00:44:04.000 --> 00:44:07.120
and those get FTPed back and
forth between the sites just to

00:44:07.180 --> 00:44:09.050
keep the data warehouse in sync.

00:44:12.910 --> 00:44:17.080
So we decided to do some
performance testing to see just how,

00:44:17.100 --> 00:44:18.900
when we were trying
to evaluate databases,

00:44:18.900 --> 00:44:21.040
what kind of performance we could get.

00:44:21.040 --> 00:44:23.490
So what we did was we
started with a dual G4,

00:44:23.490 --> 00:44:25.420
1 gigahertz with a gig of RAM.

00:44:25.420 --> 00:44:33.380
We had a RAID box with RAID 5 and
OS X Server 10.3.3 and 12.5.1 of Sybase.

00:44:33.380 --> 00:44:38.410
And what we did was we simulated 10 lines
in a factory running as fast as they can.

00:44:38.430 --> 00:44:43.060
To sort of put that in perspective,
you can imagine that a line,

00:44:43.060 --> 00:44:45.930
the way we measure the performance
of a line is by cycle time.

00:44:45.960 --> 00:44:48.300
So if you have a 30-second
cycle time on a line,

00:44:48.450 --> 00:44:53.530
that basically gives you two units or
two widgets off of a line per minute.

00:44:53.710 --> 00:44:56.530
So with 10 lines,
you'd have 20 units a minute

00:44:56.530 --> 00:44:58.120
coming off all 10 lines.

00:44:58.270 --> 00:45:02.930
And what we were able to do in
our simulation was generate 1,800

00:45:02.930 --> 00:45:08.420
unique serial numbers per minute,
which is basically almost 20 times.

00:45:08.420 --> 00:45:12.870
So that's about a hundred times more
than what the 10 lines would normally

00:45:12.870 --> 00:45:15.460
do under a 30-second cycle time.

00:45:15.460 --> 00:45:18.740
So if we take that transaction load,
we use SP Sysmon,

00:45:18.740 --> 00:45:22.400
which is a stored procedure to give
you sort of transactional information.

00:45:22.400 --> 00:45:27.050
We found that we were getting about
466 transactions per second or

00:45:27.340 --> 00:45:32.720
28,000 transactions per minute or
1.68 million transactions per hour.

00:45:32.720 --> 00:45:36.330
And of those, they're the percentages,
70% of those are inserts.

00:45:36.340 --> 00:45:38.420
So there's actually a lot
of I/O going on there.

00:45:38.420 --> 00:45:42.460
15% updates, 8% selects, and 7% deletes.

00:45:42.460 --> 00:45:48.620
After we did some more research,
we found that actually the 8% selects is

00:45:48.620 --> 00:45:52.500
actually much lower than what the number
of selects are truly going on there.

00:45:52.500 --> 00:45:56.280
The 8% selects were more of
updates that basically end up

00:45:56.280 --> 00:45:59.380
being selects and not actually
updating records in the database.

00:45:59.380 --> 00:46:02.610
So we figure that it's probably
closer to 2 million transactions

00:46:02.610 --> 00:46:05.440
if you counted selects,
if we were able to get that in there.

00:46:05.440 --> 00:46:08.420
And then also we have
the two engines going.

00:46:08.420 --> 00:46:12.220
So we were about 75% utilizing CPUs.

00:46:12.220 --> 00:46:15.700
So we think if we added another
XSERV that was running our simulations,

00:46:15.700 --> 00:46:19.170
we could actually get even more
performance out of the system.

00:46:20.940 --> 00:46:24.600
So now I'm going to sort of go
through a demo of the web application

00:46:24.600 --> 00:46:29.200
that we put together that'll show
how we report the information.

00:46:29.200 --> 00:46:33.280
It's just one of the many
pieces of this whole system.

00:46:33.280 --> 00:46:37.290
And it's all sort of simulated data,
so it's not real data in there.

00:46:37.310 --> 00:46:39.380
But this is sort of the login screen.

00:46:39.380 --> 00:46:42.030
We do user authentication
through the system as well,

00:46:42.030 --> 00:46:44.120
so we can go in, username, password.

00:46:45.060 --> 00:46:48.940
The first screen you come into,
it gives basically management

00:46:48.940 --> 00:46:52.530
the ability to go in,
choose what sites they're interested in,

00:46:52.530 --> 00:46:55.620
and then see what products were
actually built at that site.

00:46:55.620 --> 00:46:58.770
So you can imagine these would be,
they're just generic names here.

00:46:58.780 --> 00:47:00.800
But as you can see,
you can see what the current

00:47:00.880 --> 00:47:03.550
calendar week's yields are,
what the previous weeks were,

00:47:03.550 --> 00:47:05.850
so you can see if there
are any trends going on.

00:47:05.860 --> 00:47:09.800
And in this case, you can see there's 66%
last week versus this week,

00:47:09.810 --> 00:47:13.940
which was 80%, so we could drill
into that and see what's going on.

00:47:14.490 --> 00:47:18.880
Then we see that there are the
two sites that we're looking at,

00:47:18.880 --> 00:47:24.700
and you can see there's 64% QM yield
for site two and 72% for site six.

00:47:24.700 --> 00:47:28.930
So we can then drill into site two,
and then we actually have a

00:47:28.940 --> 00:47:32.920
graphing that shows what the
volumes were for that week,

00:47:32.920 --> 00:47:37.080
how the trending yields are going,
what the yield points,

00:47:37.080 --> 00:47:40.500
these are just generic yield points here.

00:47:40.500 --> 00:47:43.860
So you can see what's going on,
top five failures.

00:47:43.860 --> 00:47:46.660
If you scroll further
down into the graph,

00:47:46.660 --> 00:47:48.900
you'll actually see more
detailed information,

00:47:48.900 --> 00:47:50.760
what happened on each day individually.

00:47:50.860 --> 00:47:54.330
And then again,
you can root cause down to see, okay,

00:47:54.390 --> 00:47:58.730
there's a spike down
there at 8% on the ninth.

00:47:58.780 --> 00:48:01.170
We go into that,
and then we can actually see

00:48:01.170 --> 00:48:05.300
the list of serial numbers,
what the failures were, rework actions.

00:48:05.420 --> 00:48:07.620
Again, this is just sort of
touching the surface.

00:48:07.670 --> 00:48:10.040
You could drill down further
into the serial number and see

00:48:10.040 --> 00:48:13.300
details about the failures,
how many times it had been through

00:48:13.300 --> 00:48:16.060
certain tests and all that.

00:48:16.060 --> 00:48:18.620
So that's it.

00:48:25.680 --> 00:48:27.530
Okay, I'd like to introduce Dr.

00:48:27.530 --> 00:48:30.200
Keith Campbell from Oveon,
who will be talking about his

00:48:30.200 --> 00:48:36.030
application and what he's doing with
some very interesting technology.

00:48:37.200 --> 00:48:38.150
Thank you.

00:48:38.180 --> 00:48:45.440
I wanted to start by just trying
to motivate why Inovion is trying

00:48:45.440 --> 00:48:50.700
to do what we're trying to do.

00:48:58.900 --> 00:49:00.820
What do you want when
you lose your sight?

00:49:00.820 --> 00:49:03.990
Prevent diabetic blindness.

00:49:04.000 --> 00:49:06.580
Diabetic blindness is the number
one cause of preventable blindness

00:49:06.580 --> 00:49:09.020
in the United States today.

00:49:09.020 --> 00:49:13.110
And the sad part of it is that
90% of the patients that go blind,

00:49:13.110 --> 00:49:17.810
it could have been prevented
if they had treatment in time.

00:49:17.810 --> 00:49:21.180
And diabetes is a growing
problem in the country.

00:49:21.180 --> 00:49:24.650
There's more and more people being
diagnosed with diabetes all the time.

00:49:24.700 --> 00:49:29.290
They're talking about, you know,
the epidemic of obesity and of diabetes

00:49:29.490 --> 00:49:32.000
subsequently in our population.

00:49:32.050 --> 00:49:36.410
And even though there's
treatment that's 90% effective,

00:49:36.410 --> 00:49:40.810
only 40% of patients actually
get that treatment done,

00:49:41.060 --> 00:49:44.370
excuse me, that test done every year.

00:49:44.370 --> 00:49:47.420
And that's really a tragedy because
a lot of people are going blind.

00:49:47.420 --> 00:49:49.680
So this is the problem
we're trying to solve.

00:49:49.690 --> 00:49:53.680
And Inovian is trying to
solve this through technology.

00:49:55.900 --> 00:54:47.500
[Transcript missing]

00:54:50.240 --> 00:54:55.950
So,
for our diabetic retinopathy evaluations,

00:54:56.690 --> 00:54:58.800
What does Sybase provide us?

00:54:58.800 --> 00:55:02.030
Well, one of the things is that when we
were looking at re-architecting,

00:55:02.090 --> 00:55:05.160
OS X had come out,
and one of the questions was raised was,

00:55:05.200 --> 00:55:07.840
well,
can we use the same platform end-to-end?

00:55:07.840 --> 00:55:11.590
And at the time,
we had very limited options,

00:55:11.590 --> 00:55:15.800
and actually when we heard
the announcement that Sybase

00:55:15.800 --> 00:55:18.810
was going to come out on OS X,
that really changed the way

00:55:18.810 --> 00:55:22.960
we started thinking about the
infrastructure which we would deploy it,

00:55:23.020 --> 00:55:26.360
because we were able to have an
enterprise class database that would

00:55:26.390 --> 00:55:29.490
provide the reliability that we
needed and allow us to focus on some

00:55:29.490 --> 00:55:32.980
of the other issues of reliability
in the computing out in the edge.

00:55:32.980 --> 00:55:37.800
So it's something that has basically
allowed us to work on our business

00:55:37.800 --> 00:55:42.510
enterprise architecture without
having to worry about the database,

00:55:42.510 --> 00:55:45.580
which was one of the things that we
had had to worry about in the past.

00:55:45.600 --> 00:55:49.890
So, excuse me,
Sybase provides us with these

00:55:49.970 --> 00:55:53.000
warm copies of data so that
we can have quick deployment.

00:55:53.000 --> 00:55:55.000
We have a lot of data storage,
we have a lot of data storage management,

00:55:55.010 --> 00:55:57.000
we have a lot of data storage
management of standby,

00:55:57.000 --> 00:55:57.000
reporting copies and backup
copies for disaster recovery.

00:55:57.000 --> 00:55:59.720
We use a hierarchical storage
management system for storing

00:55:59.720 --> 00:56:03.630
these 50 megabyte digital files,
and we have pointers from the

00:56:03.630 --> 00:56:06.640
database to the hierarchical storage
management system for doing that.

00:56:06.680 --> 00:56:10.680
What Sybase provides us, again,
is this enterprise class

00:56:10.680 --> 00:56:14.680
scalability and reliability,
support for redundant data centers,

00:56:14.680 --> 00:56:17.240
confidence in the data
integrity and reliability,

00:56:17.240 --> 00:56:22.130
and also in a very cost-effective
and yet proven reliable solution.

00:56:31.440 --> 00:56:35.790
And finally, I'd like to introduce
Bob Cusick from Servoy.

00:56:35.800 --> 00:56:38.300
He's the managing director of Servoy USA.

00:56:38.300 --> 00:56:42.590
We'll talk about the
Servoy R2 deployment.

00:56:43.620 --> 00:56:45.780
Thank you, you guys are brave.

00:56:45.790 --> 00:56:47.650
The last presenter of the last session.

00:56:47.660 --> 00:56:48.160
Woo-hoo!

00:56:48.160 --> 00:56:50.230
Okay, I have about 200 slides.

00:56:50.230 --> 00:56:53.740
No,
I have three slides and then a real demo.

00:56:53.740 --> 00:56:55.460
All right, so hang in there.

00:56:55.460 --> 00:56:56.770
We're almost there.

00:56:56.780 --> 00:57:00.400
All right,
I'm going to talk about Servoi R2.

00:57:00.610 --> 00:57:04.870
Servoi R2 is a development
and deployment environment for

00:57:04.870 --> 00:57:10.190
GUI applications that can be connected
to any SQL database that you want,

00:57:10.290 --> 00:57:13.240
or more than one simultaneously.

00:57:13.620 --> 00:57:16.170
And we can actually see it.

00:57:16.350 --> 00:57:18.430
So this slide is kind of mute.

00:57:18.440 --> 00:57:20.910
It's very easy to use.

00:57:21.190 --> 00:57:22.560
Zero deployment client.

00:57:22.560 --> 00:57:25.480
It's based on Java,
so it will run anywhere,

00:57:25.480 --> 00:57:26.860
and you'll see it.

00:57:27.700 --> 00:57:32.980
I just wanted to talk to you about some
of the things that you can do with Savoy.

00:57:32.980 --> 00:57:37.640
And in particular,
I wanted to talk to you about a

00:57:37.670 --> 00:57:42.080
really big win that we got with
Stanford using Sybase ASE and

00:57:42.090 --> 00:57:45.200
Sybase ASA as well as Savoy.

00:57:45.200 --> 00:57:46.760
So here was the challenge.

00:57:46.760 --> 00:57:49.810
We had to integrate a whole bunch
of stuff and they have legacy

00:57:50.060 --> 00:57:52.760
things inside of the university
that you wouldn't believe.

00:57:52.760 --> 00:57:54.500
Everybody has their
own favorite database.

00:57:54.500 --> 00:57:58.070
It could be Informix, it could be Sybase,
it could be ASA, it could be Oracle,

00:57:58.070 --> 00:57:59.240
it could be anything.

00:57:59.240 --> 00:58:00.800
And they needed to put it all together.

00:58:00.800 --> 00:58:03.960
So the way that they were doing it
is they had knowledge workers who

00:58:04.290 --> 00:58:09.630
would get data dumps and exports and
spreadsheets and FileMaker and 4D and

00:58:09.640 --> 00:58:13.460
some access stuff and they would just
kind of mishmash it all together and

00:58:13.460 --> 00:58:17.820
then re-output it as spreadsheets and
data dumps and then put it back in.

00:58:17.860 --> 00:58:22.740
So it was very, very cumbersome,
took a lot of time, very error-prone,

00:58:22.740 --> 00:58:24.600
very human-intensive.

00:58:24.600 --> 00:58:30.020
So what we helped them to do is we helped
them to codify their process by using

00:58:30.100 --> 00:58:36.220
stored procedures inside of ASC to get
a standardized way to do everything.

00:58:36.220 --> 00:58:40.560
And we used Savoy to
build the user interface.

00:58:40.560 --> 00:58:45.370
And because Savoy is so easy to use,
these non-technical people,

00:58:45.430 --> 00:58:50.140
these people who are used to using
end-user databases like Access or

00:58:50.140 --> 00:58:53.780
FileMaker Pro could easily create these
user interfaces with no programming.

00:58:53.780 --> 00:58:59.150
All right, so we're going to go
actually do that right now.

00:59:01.940 --> 00:59:08.830
I'm going to build for you
here a customer invoice,

00:59:08.910 --> 00:59:14.980
invoice detail, complete solution,
and I'm going to deploy it

00:59:15.080 --> 00:59:16.870
in less than five minutes.

00:59:19.090 --> 00:59:20.000
Ready?

00:59:20.000 --> 00:59:20.860
Here we go.

00:59:20.990 --> 00:59:25.100
All right,
so we're going to do a new solution,

00:59:25.100 --> 00:59:27.890
and I'm going to call it WWDC.

00:59:28.360 --> 00:59:30.860
And here I have a list of named servers.

00:59:30.860 --> 00:59:32.060
These servers can live anywhere.

00:59:32.060 --> 00:59:35.180
They can be on LAN, WAN,
they can be anything that you want.

00:59:35.180 --> 00:59:39.420
I have one here that is a Sybase
database called Example Data.

00:59:39.420 --> 00:59:42.830
And down here this shows me all
of the tables that are inside of

00:59:42.830 --> 00:59:44.940
that named connection database.

00:59:44.940 --> 00:59:49.440
So I'm going to choose
to create two forms,

00:59:49.440 --> 00:59:54.550
one based on customers
and one based on orders.

00:59:54.580 --> 00:59:57.930
Actually, sorry, customers.

00:59:58.630 --> 00:59:59.880
Okay, so two tables.

00:59:59.880 --> 01:00:01.200
So I click OK.

01:00:01.200 --> 01:00:03.900
Now this will go and actually
interrogate the database.

01:00:03.900 --> 01:00:06.900
So these are all the columns
inside of the customer table.

01:00:06.900 --> 01:00:09.310
So let's pick some here.

01:00:09.840 --> 01:00:12.800
I'm going to say OK.

01:00:12.800 --> 01:00:14.420
And these are the ones
inside of the orders.

01:00:14.420 --> 01:00:15.840
Let's pick some columns here.

01:00:15.840 --> 01:00:17.070
OK.

01:00:17.240 --> 01:00:23.040
Now, I'm going to come out of
this data design mode.

01:00:23.300 --> 01:00:42.200
[Transcript missing]

01:00:42.250 --> 01:00:43.640
Backspace over this character.

01:00:43.640 --> 01:00:47.710
As soon as I leave this field,
it's automatically committed and

01:00:47.710 --> 01:00:50.500
written to the backend database.

01:00:50.500 --> 01:00:51.500
So that's pretty cool.

01:00:51.500 --> 01:00:53.340
So I have my customers and
that works the same way.

01:00:53.340 --> 01:00:56.080
There's two different tables.

01:00:56.290 --> 01:00:57.700
Let's come here.

01:00:57.700 --> 01:01:01.480
And I can go ahead and use my
keyboard if I want to and make these

01:01:01.480 --> 01:01:03.700
bigger or smaller by the keyboard.

01:01:03.700 --> 01:01:06.020
All right, so that's all fine and good.

01:01:06.020 --> 01:01:08.420
But now let's go ahead and
do something interesting.

01:01:08.420 --> 01:01:13.690
So I have the order header,
but now I want to see all the details.

01:01:13.700 --> 01:01:15.830
Just one quick question, though.

01:01:15.940 --> 01:01:18.330
First, how much SQL did we write so far?

01:01:18.340 --> 01:01:19.120
Okay.

01:01:19.380 --> 01:01:20.240
Nothing.

01:01:20.240 --> 01:01:23.190
That's the fun part, right?

01:01:23.650 --> 01:01:26.770
That's where the knowledge worker
can get in here and create these

01:01:26.770 --> 01:01:29.460
forms and these applications that
they need to get their data done

01:01:29.460 --> 01:01:31.530
and not have to call up IT and go,
oh, by the way,

01:01:31.530 --> 01:01:32.910
you got that thing done yet.

01:01:32.960 --> 01:01:33.980
All right?

01:01:33.980 --> 01:01:36.560
So we want to now join things together.

01:01:36.560 --> 01:01:37.130
All right?

01:01:37.130 --> 01:01:39.730
How many of you want to really
tutor these knowledge workers

01:01:39.740 --> 01:01:40.880
in how to do SQL joins?

01:01:40.880 --> 01:01:41.560
Anybody?

01:01:41.580 --> 01:01:41.940
No?

01:01:42.150 --> 01:01:42.940
Probably not.

01:01:43.070 --> 01:01:43.400
Okay.

01:01:43.400 --> 01:01:46.340
So I'll show you the
Savoy way of doing things.

01:01:46.340 --> 01:01:48.980
So we're going to go back into
our data designer mode here,

01:01:48.980 --> 01:01:52.540
and we're going to come up,
and we have a thing called a relation.

01:01:54.400 --> 01:02:18.300
[Transcript missing]

01:02:19.100 --> 01:02:24.480
and David Koehn,
and I'm going to choose a primary key.

01:02:24.480 --> 01:02:27.290
It shows me all the columns.

01:02:27.290 --> 01:02:31.880
I'm going to choose
customer ID to customer ID.

01:02:31.880 --> 01:02:35.900
And in this case,
it's going to be an equity

01:02:35.910 --> 01:02:36.180
join or an equal join,
but I can do greater than, less than,

01:02:36.180 --> 01:02:36.180
not equal to,
and I can have multiple predicates,

01:02:36.180 --> 01:02:36.180
multiple key fields.

01:02:36.300 --> 01:02:39.180
I can do cascading deletes optionally
just by clicking a checkbox.

01:02:39.180 --> 01:02:40.100
So I click OK.

01:02:40.100 --> 01:02:42.100
Now I'm also going to do another one.

01:02:42.100 --> 01:02:43.920
I'm going to go from
order to order details.

01:02:43.920 --> 01:02:46.850
Here's where it gets interesting, right,
because they're named connections.

01:02:46.860 --> 01:02:50.300
So this one on the left-hand
side could be MySQL.

01:02:50.300 --> 01:02:53.740
And on the right-hand side,
I could join to an Oracle database

01:02:53.740 --> 01:02:58.280
or a Sybase ASE database
or a Sybase ASA to MySQL,

01:02:58.360 --> 01:02:59.840
any combination that you want to.

01:02:59.840 --> 01:03:03.600
So you can actually join data
across multiple vendors' databases

01:03:03.600 --> 01:03:05.220
and have it all on one screen.

01:03:06.150 --> 01:03:10.980
So we're going to go from order to order
details based on order ID to order ID.

01:03:11.200 --> 01:03:13.090
All right, click OK.

01:03:13.200 --> 01:03:16.340
Now I'm going to click and drag,
move these objects,

01:03:16.340 --> 01:03:21.520
and now we want to show all of the
order details for this order below it.

01:03:21.580 --> 01:03:24.170
So we have a structure
that's called a portal.

01:03:24.270 --> 01:03:27.740
So this is what this object is,
and it shows me these

01:03:27.790 --> 01:03:29.290
are the valid relations.

01:03:29.370 --> 01:03:30.800
It knows that I'm on the orders table.

01:03:30.800 --> 01:03:35.760
It knows there's only one valid relation,
so it only shows me one valid one.

01:03:35.760 --> 01:03:39.640
Let's pick these columns, click OK.

01:03:39.830 --> 01:03:42.220
And now I have this portal structure.

01:03:42.310 --> 01:03:43.600
I can make it bigger.

01:03:43.720 --> 01:03:48.720
So now when I come out of my design mode,
I now have all the children records.

01:03:48.900 --> 01:04:10.900
[Transcript missing]

01:04:11.570 --> 01:04:15.500
and the order details for this customer.

01:04:15.500 --> 01:04:19.500
Okay,
anyone want to write that SQL statement?

01:04:19.500 --> 01:04:20.980
No, probably not.

01:04:21.010 --> 01:04:21.500
Me neither.

01:04:21.500 --> 01:04:24.490
All right,
here's the Savoy way of doing it.

01:04:24.500 --> 01:04:27.500
We put a tab panel object on there.

01:04:27.500 --> 01:04:31.500
And it says, okay,
here's customer to orders,

01:04:31.510 --> 01:04:34.500
and there's a form called orders
that's based on that join.

01:04:34.500 --> 01:04:35.500
So that's all we need to do.

01:04:35.500 --> 01:04:37.500
We say yes, use that form.

01:04:38.040 --> 01:04:40.230
Here's my tab panel.

01:04:40.760 --> 01:04:43.820
I'm going to pull it out here,
come out of my data mode.

01:04:43.820 --> 01:04:47.910
Now I have this customer
has six invoices.

01:04:48.000 --> 01:04:51.940
This one has 14, this has 8, this has 19,
this has 14.

01:04:51.940 --> 01:04:54.790
And I can go through here
and I can edit this data even

01:04:54.790 --> 01:04:56.820
though it's three tables away.

01:04:56.820 --> 01:04:59.140
And how much SQL did I write?

01:04:59.220 --> 01:05:00.200
Zero.

01:05:00.200 --> 01:05:01.350
All right.

01:05:01.420 --> 01:05:04.090
I don't have time to show you
all of the really nice user

01:05:04.230 --> 01:05:06.180
interface things that you can do.

01:05:06.180 --> 01:05:07.730
This is obviously a
really simple example,

01:05:07.790 --> 01:05:09.360
but you can make it look really pretty.

01:05:09.360 --> 01:05:12.400
Now let's deploy it, okay?

01:05:12.400 --> 01:05:13.400
So now we've built it.

01:05:13.400 --> 01:05:14.690
It's beautiful.

01:05:14.690 --> 01:05:15.890
This is our app.

01:05:15.890 --> 01:05:18.390
Now I need to deploy it worldwide.

01:05:18.600 --> 01:05:20.960
Okay.

01:05:20.960 --> 01:05:24.280
With some other project,
like desktop databases, right?

01:05:24.430 --> 01:05:30.560
It's a sneaker net install or a network
install or a ghosted image install.

01:05:30.560 --> 01:05:34.670
With Servoi,
it's point a web browser to your Servoi

01:05:34.670 --> 01:05:37.120
application server and push the button.

01:05:37.120 --> 01:05:40.250
We use Java Web Start technology.

01:05:40.250 --> 01:05:44.120
So what happens is as soon as I click,
everything happens completely

01:05:44.120 --> 01:05:47.190
outside of the browser,
independently of the browser

01:05:47.190 --> 01:05:48.420
using Java Web Start.

01:05:48.660 --> 01:05:50.800
And I say start.

01:05:50.880 --> 01:05:55.390
Now this Java Web Start application is

01:05:55.560 --> 01:05:56.700
Self-healing.

01:05:56.700 --> 01:05:58.580
It will check with the server
every time it's launched,

01:05:58.580 --> 01:06:00.790
and if there's a new version,
it will self-update

01:06:00.790 --> 01:06:02.200
and continue to launch.

01:06:02.200 --> 01:06:04.220
So here's my two solutions.

01:06:04.220 --> 01:06:08.410
There's a CRM and the one
that we created called WWDC.

01:06:08.660 --> 01:06:14.600
and here on my client is WWDC.

01:06:15.760 --> 01:06:15.760
Just like it was

01:06:15.980 --> 01:06:17.440
Everything works just the same.

01:06:17.440 --> 01:06:19.180
I can go to my customer's form.

01:06:19.180 --> 01:06:22.170
Here's the embedded customer's form,
and it works just the same as

01:06:22.170 --> 01:06:24.180
it did in site of the developer.

01:06:24.180 --> 01:06:25.900
This can be deployed over the LAN.

01:06:25.900 --> 01:06:27.790
This can be deployed over the WAN.

01:06:27.960 --> 01:06:31.020
I built it in less than five
minutes and deployed it.

01:06:31.020 --> 01:06:34.690
Now, Bob,
how about things like network latency?

01:06:35.110 --> 01:06:42.710
There is a site that you can visit,
and this is going to be...

01:06:45.070 --> 01:06:48.990
DemoServoy.com:8080.

01:06:49.000 --> 01:06:51.310
Now if this looks familiar,
this is a server that's

01:06:51.340 --> 01:06:52.990
running in Amsterdam.

01:06:52.990 --> 01:06:57.840
Notice it does the same thing.

01:06:57.940 --> 01:07:01.570
It goes and gets a client.

01:07:10.600 --> 01:07:15.940
And you can run this from your
own network if you want to.

01:07:15.940 --> 01:07:17.920
Just to test the network latency.

01:07:17.950 --> 01:07:19.600
Is it fast over network?

01:07:19.600 --> 01:07:24.740
It's coming, coming, coming.

01:07:27.240 --> 01:07:28.200
Here it is.

01:07:28.200 --> 01:07:30.090
All right.

01:07:30.150 --> 01:07:32.190
And we're going to go ahead
and load up a solution.

01:07:32.220 --> 01:07:35.000
And it's opening up right now.

01:07:36.620 --> 01:07:39.420
So once the solution loads,
it'll run as fast as

01:07:39.420 --> 01:07:41.040
it does on the network.

01:07:41.100 --> 01:07:42.840
Here's the CRM demo.

01:07:42.840 --> 01:07:46.720
This is the demo that we ship
with as a sample application.

01:07:46.770 --> 01:07:49.710
And we'll go here to the company's form.

01:07:50.110 --> 01:07:53.410
I will click on this detail.

01:07:53.410 --> 01:07:59.790
And as you can see,
all the controls are native Aqua.

01:07:59.850 --> 01:08:00.130
Okay?

01:08:00.130 --> 01:08:01.880
If you were to deploy
this on a Windows machine,

01:08:02.040 --> 01:08:04.440
all of the controls
would be native Windows.

01:08:04.440 --> 01:08:08.390
If you deployed it on a Linux machine,
all the controls would be native Linux.

01:08:08.390 --> 01:08:11.550
If you did it on a Solaris machine,
all the controls would be native Solaris.

01:08:11.670 --> 01:08:11.920
Okay?

01:08:11.920 --> 01:08:13.120
No coding.

01:08:13.590 --> 01:08:14.440
No changes.

01:08:14.440 --> 01:08:15.110
Ready to go.

01:08:15.110 --> 01:08:17.030
This is data coming from Holland.

01:08:17.040 --> 01:08:18.160
This is live data.

01:08:18.160 --> 01:08:19.420
So let me just scroll through this.

01:08:20.000 --> 01:08:21.340
Data one at a time for you.

01:08:21.340 --> 01:08:25.140
And you can see that tab panels and all,
it goes very quickly even

01:08:25.140 --> 01:08:27.440
over a network this far away.

01:08:27.440 --> 01:08:28.750
All right?

01:08:28.790 --> 01:08:32.020
And one more thing in closing.

01:08:32.730 --> 01:08:36.200
Because I know we want
to get to some Q&A.

01:08:36.550 --> 01:08:45.710
I want to give you a chance
to try out Savoy on your own.

01:08:45.800 --> 01:08:49.350
After this speech,
if you would like to give

01:08:49.620 --> 01:08:53.890
me your business card,
I will send you a copy of

01:08:54.090 --> 01:08:56.120
the reg code for no charge.

01:08:57.500 --> 01:09:30.900
[Transcript missing]

01:09:33.020 --> 01:09:35.650
That's about all I got,
so I stick to my time frame.

01:09:35.770 --> 01:09:36.440
Thank you very much.

01:09:36.440 --> 01:09:40.080
Do see me afterwards and I will
be happy to get you a copy.

01:09:40.130 --> 01:09:42.080
Thank you.

01:09:48.110 --> 01:09:53.260
Okay, I think right now what I'd like
to do is just point out that we

01:09:53.260 --> 01:09:55.420
are committed to this platform.

01:09:55.420 --> 01:10:00.190
We're going to be continuing to
enhance and the value that we add

01:10:00.190 --> 01:10:05.840
to this is rock-solid industrial
strength database technology on a very,

01:10:05.860 --> 01:10:09.660
very high-performing
and low-cost platform.

01:10:10.100 --> 01:10:17.100
You can get more information from myself,
Mike Azevedo at Sybase, or Darryl Salas.

01:10:17.100 --> 01:10:22.600
You can contact these, any of us,
at any time.

01:10:23.050 --> 01:10:26.880
We have a version of the Adaptive
Server Enterprise available on

01:10:26.880 --> 01:10:29.070
our website at sybase.com/mac.

01:10:29.100 --> 01:10:33.440
It's a free download of our
developer's edition for the Mac,

01:10:33.440 --> 01:10:37.520
and it's -- I think the current
version that's out there is 12.5.2.

01:10:37.520 --> 01:10:38.840
I may be wrong.

01:10:38.840 --> 01:10:40.980
It might be 12.5.1.

01:10:41.430 --> 01:10:43.900
All of our documentation
is available online.

01:10:43.900 --> 01:10:47.620
You can reference HTML, the HTML pages.

01:10:47.640 --> 01:10:50.910
If you have any question about
the syntax of a command or

01:10:51.050 --> 01:10:54.280
some topic related to ASE,
you can get that.