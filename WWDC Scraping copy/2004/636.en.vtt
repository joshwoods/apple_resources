WEBVTT

00:00:12.080 --> 00:00:15.340
Ladies and gentlemen,
and welcome to session 636.

00:00:15.340 --> 00:00:17.540
At this time, we would like to ask you,
if you would please,

00:00:17.540 --> 00:00:21.090
to turn off all cell phones,
and to remind you once again,

00:00:21.180 --> 00:00:23.460
if you would please,
no recording or taking

00:00:23.510 --> 00:00:25.900
pictures during this session.

00:00:26.090 --> 00:00:30.890
And with that said, please welcome now,
Tyler Stone.

00:00:35.300 --> 00:00:36.420
Thank you.

00:00:36.560 --> 00:00:37.010
Good morning.

00:00:37.130 --> 00:00:39.080
It's Friday,
the last day of the conference.

00:00:39.150 --> 00:00:40.990
I hope it's been going
well for all of you.

00:00:41.000 --> 00:00:42.720
We've had a very good conference,
I think, this year.

00:00:44.740 --> 00:00:48.050
As Apple has started
returning to the enterprise,

00:00:48.050 --> 00:00:52.220
we find ourselves encountering
more and more customers,

00:00:52.220 --> 00:00:55.260
developers out there,
with Visual Basic applications.

00:00:55.260 --> 00:00:59.160
And they've been asking
us for a migration path.

00:00:59.340 --> 00:01:02.580
How can they port their
Visual Basic projects over to Mac OS X?

00:01:02.580 --> 00:01:06.420
So this session has been
designed with that in mind.

00:01:08.600 --> 00:01:12.140
I'd like to introduce Hank Marquis
from Slayfire Software.

00:01:12.140 --> 00:01:14.660
He's going to talk to you a
little bit about how to port

00:01:14.660 --> 00:01:17.810
Visual Basic projects to Mac OS X.

00:01:20.150 --> 00:01:21.320
Good morning, everybody.

00:01:21.370 --> 00:01:22.810
I know everyone was up late last night.

00:01:22.840 --> 00:01:26.010
Was everyone up late last night?

00:01:26.600 --> 00:01:28.090
Yeah, this is a resounding audience.

00:01:28.100 --> 00:01:29.880
Do your arms work?

00:01:29.900 --> 00:01:30.890
Do they move?

00:01:30.910 --> 00:01:32.920
Okay, so you're still functional.

00:01:32.950 --> 00:01:36.550
My name's Hank Marquis, as Tyler said,
and I'm gonna talk about moving

00:01:36.840 --> 00:01:39.500
applications to Mac OS X.

00:01:39.500 --> 00:01:42.850
How many people in here
have ever seen Visual Basic?

00:01:43.280 --> 00:01:51.190
How many people here have
seen and/or used REALBASIC?

00:01:51.190 --> 00:01:51.190
Good,
so you're probably in the right place.

00:01:52.200 --> 00:01:54.420
First, I want to talk a little bit
about what we're going to do.

00:01:54.490 --> 00:01:58.040
The idea is that you're a developer,
and as Tyler said,

00:01:58.090 --> 00:02:00.100
you have an application
written in Visual Basic,

00:02:00.140 --> 00:02:04.940
and for one reason or the other,
you want to move that over to OS X,

00:02:04.960 --> 00:02:06.020
or perhaps even Linux.

00:02:06.020 --> 00:02:08.280
There's a number of
different operating systems.

00:02:08.280 --> 00:02:12.700
Obviously, OS X is the one that we're
here to talk about today.

00:02:13.050 --> 00:02:15.700
What I'm going to talk about
is a process you can follow to

00:02:15.700 --> 00:02:19.630
move your applications over and
actually have it work at the end.

00:02:19.810 --> 00:02:22.810
You're sitting here and you say,
I have Visual... First of all,

00:02:22.810 --> 00:02:25.480
what version... How many people
are using Visual Basic 5 or 6?

00:02:27.660 --> 00:02:29.660
Oh, so not many.

00:02:29.740 --> 00:02:32.120
How many people are using .NET?

00:02:32.320 --> 00:02:34.250
Do you like .NET?

00:02:34.450 --> 00:02:36.220
I get to see a lot of this going on.

00:02:36.340 --> 00:02:39.730
Well, if you're not familiar with
what Microsoft did there

00:02:39.780 --> 00:02:42.710
with Visual Basic 5 and 6,
and all the way back,

00:02:42.770 --> 00:02:45.500
I've been involved in
Visual Basic since it was VB DOS,

00:02:45.500 --> 00:02:48.160
which was actually a professional
development system in

00:02:48.160 --> 00:02:49.860
Quick Basic and things like that.

00:02:50.000 --> 00:02:53.000
So back in '91,
I got involved with Visual Basic,

00:02:53.000 --> 00:02:56.400
and every single version of
Visual Basic up until .NET could

00:02:56.400 --> 00:03:00.200
open the previous Visual Basic source
code and just compile it,

00:03:00.200 --> 00:03:01.690
execute it, and run no problem.

00:03:01.700 --> 00:03:04.790
And .NET was the first time where
you couldn't do that anymore.

00:03:04.790 --> 00:03:07.990
So if you're sitting here with
a Visual Basic application and

00:03:07.990 --> 00:03:11.400
you're thinking to yourself,
you need to move it forward,

00:03:11.400 --> 00:03:13.500
and you think about .NET, you have pain.

00:03:13.500 --> 00:03:15.380
You're going to have to
go through a conversion,

00:03:15.390 --> 00:03:17.910
the language is different,
things don't exactly work the same,

00:03:18.070 --> 00:03:19.680
and at the end of it, it runs on Windows.

00:03:19.800 --> 00:03:21.650
And what we're going to
talk about here is the way,

00:03:21.650 --> 00:03:24.000
if you're looking at that decision,
to be able to say, well,

00:03:24.000 --> 00:03:27.800
why would I do that when I can
go through a much easier process

00:03:27.800 --> 00:03:30.500
with a language which is much
more similar to Visual Basic,

00:03:30.500 --> 00:03:32.280
and at the end of it,
I can have something

00:03:32.350 --> 00:03:35.690
that works under Windows,
of course, but as well, more importantly,

00:03:35.690 --> 00:03:37.400
other areas like OS X and others.

00:03:37.400 --> 00:03:38.690
And so that's what we're
going to talk about,

00:03:38.690 --> 00:03:39.500
how to make that happen.

00:03:39.500 --> 00:03:41.790
I've been developing
for a really long time.

00:03:41.800 --> 00:03:45.000
My mother was a systems analyst for IBM.

00:03:45.000 --> 00:03:47.260
She was a mainframe
programmer back in the '60s.

00:03:47.310 --> 00:03:49.500
1969 is the first time I saw a mainframe.

00:03:49.660 --> 00:03:52.440
And I went with my mom to do key punch,
so I knew what basic

00:03:52.440 --> 00:03:53.900
assembly language was.

00:03:53.900 --> 00:03:56.470
In fact, I started off as an assembly
language programmer,

00:03:56.470 --> 00:03:57.600
and by the time I was
in like eighth grade,

00:03:57.670 --> 00:03:58.890
I knew Fortran and stuff.

00:03:58.950 --> 00:04:01.460
So I've been programming
for a really long time,

00:04:01.490 --> 00:04:04.800
and I'm going to use real
world examples and experiences.

00:04:04.800 --> 00:04:08.500
So I'm not a marketing person who
has got the latest words du jour.

00:04:08.500 --> 00:04:11.950
I'm actually going to talk about
the real world and real things that

00:04:11.950 --> 00:04:13.990
you're really going to hook up with.

00:04:14.000 --> 00:04:19.300
So what I'm going to do is tell you
how to port your application to OS X,

00:04:19.300 --> 00:04:19.300
and I'm going to tell you how to do that.

00:04:19.440 --> 00:04:20.900
I'm going to tell you how not to port it.

00:04:20.900 --> 00:04:24.350
And if you actually follow this process,
you will be successful.

00:04:24.400 --> 00:04:27.020
And then again,
if you're someone who doesn't

00:04:27.020 --> 00:04:30.600
want to be successful for
whatever your vested interest is,

00:04:30.600 --> 00:04:32.100
then you could just do
the opposite of this,

00:04:32.100 --> 00:04:33.400
and then it'll never port.

00:04:33.400 --> 00:04:35.740
And there's actually a pretty
funny book out there that tells

00:04:35.740 --> 00:04:36.900
how to do stuff like that.

00:04:36.900 --> 00:04:41.990
So at the end of the day,
I want to save you time, pain, and money.

00:04:42.000 --> 00:04:43.000
So who am I?

00:04:43.000 --> 00:04:44.780
As I said, I've been around for a while.

00:04:44.820 --> 00:04:46.000
I've written a couple of books.

00:04:46.000 --> 00:04:49.100
I've published lots and
lots and lots of articles.

00:04:49.200 --> 00:04:53.080
I was involved in the
Component Vendor Consortium.

00:04:53.100 --> 00:04:58.010
I don't know if you know about that,
but it's a third-party organization that

00:04:58.740 --> 00:05:01.390
analyzes components and gives
them sort of like an underwriters

00:05:01.390 --> 00:05:02.640
laboratory of approval.

00:05:02.640 --> 00:05:06.240
I was the chairman of the quality
committee and did the initial

00:05:06.240 --> 00:05:09.470
quality screening program,
if you will.

00:05:09.480 --> 00:05:11.990
I founded a number of software companies.

00:05:12.000 --> 00:05:15.030
Most recently the one I had
founded was with a company

00:05:15.170 --> 00:05:17.080
called Numega Technologies.

00:05:17.080 --> 00:05:20.780
It was then acquired by CompuWare
and written other projects.

00:05:20.840 --> 00:05:26.300
And I'm currently now completely
involved in the OS X world

00:05:26.300 --> 00:05:28.980
with the product Real Basic.

00:05:29.000 --> 00:05:32.050
And we have a suite of productivity
tools for Real Basic that

00:05:32.050 --> 00:05:33.540
are all about debugging.

00:05:33.540 --> 00:05:36.200
So I almost know what I'm talking
about when it comes to actually

00:05:36.260 --> 00:05:37.610
doing this and making it work.

00:05:37.770 --> 00:05:39.290
So there's some assumptions.

00:05:39.300 --> 00:05:42.270
One of them is that you have
Visual Basic applications.

00:05:42.280 --> 00:05:44.340
And we saw by the raise
of hands that you did.

00:05:44.340 --> 00:05:48.340
And the other is that you actually
want to port them over to OS X.

00:05:48.340 --> 00:05:49.640
And you said that you did.

00:05:49.640 --> 00:05:50.820
Hopefully you know.

00:05:50.820 --> 00:05:53.810
I know something about
Visual Basic and Real Basic 5.5.

00:05:53.870 --> 00:05:56.820
And for those that might not
be fully aware of Real Basic,

00:05:56.820 --> 00:05:59.690
Real Basic is a modern
object-oriented language.

00:05:59.700 --> 00:06:04.730
It runs under OS X or a
variety of Mac OS really.

00:06:04.740 --> 00:06:06.540
Windows, a variety of Windows.

00:06:06.540 --> 00:06:09.460
And you can compile for
OS X Windows and Linux.

00:06:09.520 --> 00:06:13.070
And I don't think I'm letting it out
of the bag to say that the next version

00:06:13.190 --> 00:06:15.120
will run on Linux as well probably.

00:06:15.120 --> 00:06:15.700
Maybe.

00:06:15.700 --> 00:06:16.560
I don't know.

00:06:16.560 --> 00:06:18.140
The guys at Real Basic will tell me.

00:06:18.140 --> 00:06:18.870
The guy's nodding.

00:06:18.880 --> 00:06:20.620
So I guess I won't be
shot at the end of this.

00:06:20.840 --> 00:06:21.740
I can all continue to live.

00:06:21.780 --> 00:06:25.900
So then you're going to have
this complete capability

00:06:25.970 --> 00:06:27.980
to move back and forth.

00:06:28.120 --> 00:06:30.280
It's very, very similar to Visual Basic.

00:06:30.280 --> 00:06:33.340
But there are some differences as well.

00:06:33.340 --> 00:06:36.300
So I was going to tell
you the top ten things.

00:06:36.300 --> 00:06:37.900
Like everyone likes top ten lists.

00:06:37.900 --> 00:06:40.130
And then I decided to
throw in an extra one.

00:06:40.140 --> 00:06:41.440
So the things that we're going to.

00:06:41.440 --> 00:06:42.400
So you got 11, see.

00:06:42.400 --> 00:06:44.370
11 for the price of 10.

00:06:44.380 --> 00:06:45.660
And 10 for the price of none.

00:06:45.660 --> 00:06:48.240
So what are the big things
we're going to talk about?

00:06:48.240 --> 00:06:49.410
Well, language keywords.

00:06:49.420 --> 00:06:50.780
The things that you use.

00:06:50.780 --> 00:06:52.480
The things that you use every
day to do things in the language.

00:06:52.480 --> 00:06:54.650
How you put them together into syntax.

00:06:54.720 --> 00:06:55.700
The data types.

00:06:55.700 --> 00:06:57.920
How we structure data and work with it.

00:06:58.150 --> 00:07:00.260
The structure of the language itself.

00:07:00.340 --> 00:07:04.120
User interface obviously
is going to be a big thing.

00:07:04.120 --> 00:07:07.720
And one of the biggest challenges
to having a portable application

00:07:07.720 --> 00:07:08.900
is the user interface.

00:07:08.900 --> 00:07:11.400
The structure of the projects physically.

00:07:11.400 --> 00:07:12.760
How are these things composed?

00:07:12.760 --> 00:07:14.360
Platform APIs.

00:07:14.360 --> 00:07:16.890
How many people in here
use Visual Basic that use

00:07:16.890 --> 00:07:18.360
Windows API calls in it?

00:07:18.380 --> 00:07:19.680
Right.

00:07:19.680 --> 00:07:20.200
Okay.

00:07:20.200 --> 00:07:20.760
So right.

00:07:20.760 --> 00:07:22.850
So right away you got a little
bit of a learning curve.

00:07:22.860 --> 00:07:23.600
You got to go figure.

00:07:23.600 --> 00:07:26.760
If you either have to say how
am I going to deal with that

00:07:26.760 --> 00:07:29.260
Windows API call on another platform?

00:07:29.280 --> 00:07:32.210
So am I going to just do a one
off build that only works here?

00:07:32.430 --> 00:07:35.580
But if I want to go to OS 10 then
I have to find an equivalent one.

00:07:35.580 --> 00:07:38.400
Or in some cases you'd be
surprised how much you can do

00:07:38.400 --> 00:07:40.360
staying within the constraints.

00:07:40.410 --> 00:07:43.130
We were able to build all of
our Slay Fire products without

00:07:43.130 --> 00:07:44.460
using a single API call.

00:07:44.510 --> 00:07:45.930
And they run on all three platforms.

00:07:45.940 --> 00:07:47.280
So if you.

00:07:47.280 --> 00:07:49.080
Some rethinking needs to be done.

00:07:49.080 --> 00:07:50.390
But a lot of times you can do it.

00:07:50.430 --> 00:07:50.740
And real big.

00:07:50.740 --> 00:07:52.300
So Visual Basic is pretty powerful.

00:07:52.320 --> 00:07:53.340
Usability.

00:07:53.380 --> 00:07:56.020
Things you want to do to make
your application actually usable.

00:07:56.040 --> 00:08:01.740
And Mac users have an expectation
that Windows users don't.

00:08:01.820 --> 00:08:04.480
So if you're moving a
Windows Visual Basic application

00:08:04.540 --> 00:08:09.510
to OS 10 there's some things that
you're going to have to deal with.

00:08:09.940 --> 00:08:11.820
Platform guidelines, tools, structure.

00:08:11.850 --> 00:08:12.550
Lots of cool things.

00:08:12.570 --> 00:08:14.690
Let's just jump right into it.

00:08:15.790 --> 00:08:17.840
There are a whole lot of words
that work exactly the same.

00:08:17.840 --> 00:08:21.710
The learning curve from
Visual Basic to REALbasic is...

00:08:22.070 --> 00:08:26.280
I don't know, if you're a VB developer,
and you're good, 20 minutes.

00:08:26.280 --> 00:08:30.850
If you're new, two, well, no,
a couple hours.

00:08:30.860 --> 00:08:34.400
In all cases, it's going to look really
familiar right out of the box.

00:08:34.460 --> 00:08:37.900
Things like left, right, ASCII, STIR,
these all work exactly the way you

00:08:38.010 --> 00:08:39.690
think they would and they should.

00:08:39.700 --> 00:08:42.070
By the way, this presentation
actually has code in it.

00:08:42.070 --> 00:08:44.850
Positive feedback.

00:08:44.850 --> 00:08:47.910
Thank you, thank you.

00:08:49.910 --> 00:08:52.140
There are, however,
just a few differences here

00:08:52.140 --> 00:08:54.500
and there that you will figure
out one way or the other.

00:08:54.500 --> 00:08:57.020
One of the ways is by paying
attention to this and using some

00:08:57.020 --> 00:08:59.610
of the tools REALBASIC offers,
and the other way is to beat your

00:08:59.610 --> 00:09:02.080
head on it for a little while until
you figure it out on your own.

00:09:02.080 --> 00:09:04.120
That's what I did,
because I'm thick-headed.

00:09:04.120 --> 00:09:06.840
But, for example,
the keyword MID works just

00:09:06.880 --> 00:09:10.040
like you'd expect it to work,
except in Visual Basic,

00:09:10.120 --> 00:09:13.350
MID can be used to drop an
insert into a string at a point,

00:09:13.460 --> 00:09:16.650
and in the REALBASIC implementation
currently today,

00:09:16.650 --> 00:09:17.530
it does not.

00:09:17.640 --> 00:09:21.120
Now, to REALBASIC's credit,
as they're moving forward with

00:09:21.120 --> 00:09:24.810
this Visual Basic migration story,
in fact, I've been able to have

00:09:24.810 --> 00:09:26.760
input to the product,
and they're really great

00:09:26.770 --> 00:09:29.760
about soliciting input,
so things like that get resolved.

00:09:29.760 --> 00:09:31.610
So,
these little idiosyncrasies are slowly

00:09:31.610 --> 00:09:33.150
being removed from the language.

00:09:34.890 --> 00:09:39.160
One of the big things that made
VB great and evil at the same time

00:09:39.160 --> 00:09:41.400
was the whole dynamic nature of it.

00:09:41.610 --> 00:09:43.380
Hey, I can make a variable right now.

00:09:43.440 --> 00:09:46.510
If I don't have option explicit on,
I can just make a

00:09:46.510 --> 00:09:48.370
variable whenever I want.

00:09:48.380 --> 00:09:54.070
Dynamic casting, dynamic creation,
and that's actually not a good thing.

00:09:54.080 --> 00:09:58.160
I'm sure someone in here would say, no,
it's a great thing because I can write

00:09:58.160 --> 00:10:01.270
good code and so on and so forth,
and I can handle that.

00:10:01.310 --> 00:10:03.580
But at the end of the day,
it's not really good to have

00:10:03.580 --> 00:10:05.240
variables that aren't declared.

00:10:05.240 --> 00:10:06.720
You're not going to last forever.

00:10:06.720 --> 00:10:10.820
Someone somewhere someday is
going to look at your code and go,

00:10:10.820 --> 00:10:11.980
well, how?

00:10:13.220 --> 00:10:14.090
What am I doing with this?

00:10:14.450 --> 00:10:19.450
So, REALbasic is much more
modern in that regard,

00:10:19.460 --> 00:10:22.270
with regard to object
orientation and making you be

00:10:22.270 --> 00:10:24.180
explicit than Visual Basic is.

00:10:24.240 --> 00:10:26.370
So,
we're going to see how you can use that.

00:10:29.860 --> 00:10:32.520
Real Basic is a very rich
language graphically,

00:10:32.530 --> 00:10:38.480
as you can imagine from its heritage
as an OS X or a Mac OS application.

00:10:38.480 --> 00:10:43.770
Visual Basic, you know, graphic-wise,
just, you know, it isn't there.

00:10:43.780 --> 00:10:45.040
It's a funny thing.

00:10:45.040 --> 00:10:48.820
A Visual Basic application, by default,
can't even pick up the

00:10:48.830 --> 00:10:50.740
Windows XP themes on its own.

00:10:50.740 --> 00:10:53.040
So, like,
your VB apps look like Windows 3.1

00:10:53.040 --> 00:10:54.440
apps when you run them on XP.

00:10:54.440 --> 00:10:56.630
You know, so it's just, graphically,
it's not very cool.

00:10:57.110 --> 00:10:58.750
But,
Real Basic is really graphically rich,

00:10:58.750 --> 00:11:01.510
and there's lots of games and things
like that that are probably right around

00:11:01.510 --> 00:11:03.120
here right now that are all written.

00:11:03.120 --> 00:11:06.180
They have 2D and 3D rendering graphics
engines built into the language,

00:11:06.180 --> 00:11:08.060
so there's a lot of
things you can do there.

00:11:08.060 --> 00:11:12.230
What that means is that
some of the words that are,

00:11:12.230 --> 00:11:18.060
for example, keywords in Visual Basic are
not available anymore.

00:11:18.060 --> 00:11:21.830
So, like, the string keyword, well,
there's a string class in Real Basic,

00:11:21.830 --> 00:11:22.570
and so on.

00:11:22.600 --> 00:11:25.060
So, if you're using the string
keyword in Visual Basic,

00:11:25.060 --> 00:11:27.060
that's not just going to port right over.

00:11:27.080 --> 00:11:30.140
You're going to have to do a
different thing to make that work.

00:11:30.250 --> 00:11:31.870
So, there's some of those things
you have to deal with.

00:11:34.090 --> 00:11:36.920
So there's words, there's keywords that
are exactly the same.

00:11:37.020 --> 00:11:38.720
There's keywords that
are exactly the same,

00:11:38.720 --> 00:11:40.750
only they do things slightly differently.

00:11:40.760 --> 00:11:43.280
And then there's keywords
that are completely different.

00:11:43.340 --> 00:11:45.440
Visual Basic has space and int.

00:11:45.490 --> 00:11:48.520
Those two things don't
exist in REALbasic.

00:11:48.940 --> 00:11:51.670
So you say, well, gee,
how do I make a padded

00:11:51.670 --> 00:11:53.790
string five characters long?

00:11:53.790 --> 00:12:00.380
Well, for I equals one to five,
X equals X plus CHR 32, right?

00:12:00.380 --> 00:12:01.400
Next.

00:12:01.400 --> 00:12:02.650
So that's how you do that.

00:12:02.700 --> 00:12:05.350
So you might have to go make
yourself a little module,

00:12:05.350 --> 00:12:08.120
but the good news is that's
already been done for you.

00:12:08.820 --> 00:12:12.910
For example, the space keyword,
there's a module of Visual Basic things

00:12:12.970 --> 00:12:16.310
that are not in REALBASIC you
could just plug in and use.

00:12:16.310 --> 00:12:18.680
On the other hand,
Visual Basic has some cool things

00:12:18.680 --> 00:12:21.300
that we always have to write,
and I mean, if you've written in

00:12:21.300 --> 00:12:24.190
Visual Basic for any amount of time,
you've got dozens of classes of

00:12:24.190 --> 00:12:27.580
reusable stuff that you just drag and
you keep using over and over again.

00:12:27.580 --> 00:12:30.080
A lot of that can go away,
because REALBASIC has a lot of

00:12:30.080 --> 00:12:31.990
keywords that Visual Basic doesn't.

00:12:35.160 --> 00:12:39.180
And then there's these sort of
maddening little differences.

00:12:39.250 --> 00:12:40.380
Who knows who's right?

00:12:40.450 --> 00:12:41.880
It doesn't matter who's right.

00:12:41.950 --> 00:12:46.530
But REALBASIC calls it UPPERCASE,
and Visual Basic calls it UCASE.

00:12:46.620 --> 00:12:48.280
So you may say, "That's not so bad.

00:12:48.280 --> 00:12:51.160
"I can just go through my VB code,
"do a global edit,

00:12:51.160 --> 00:12:54.430
replace UCASE with UPPERCASE,
"and I'm happy." Or I could

00:12:54.430 --> 00:12:57.180
import it into REALBASIC and
do a global UCASE to UPPERCASE.

00:12:57.180 --> 00:12:58.350
So you can deal with it.

00:12:58.550 --> 00:13:02.680
But something you have to deal with.

00:13:02.800 --> 00:13:05.080
So at the end of the day,
you're sitting here looking

00:13:05.080 --> 00:13:07.500
at a development path,
and you say, can I do this?

00:13:07.550 --> 00:13:08.750
I think the answer is yes.

00:13:08.750 --> 00:13:14.430
Similar keywords, it's similar, but,
you know, RTM, everyone know what that

00:13:14.540 --> 00:13:16.130
acronym stands for?

00:13:18.090 --> 00:13:18.340
No?

00:13:18.420 --> 00:13:19.410
You don't know?

00:13:19.410 --> 00:13:20.410
Someone know?

00:13:20.410 --> 00:13:21.550
Read the manual.

00:13:21.570 --> 00:13:22.030
Right.

00:13:22.190 --> 00:13:25.180
If you're going to port,
I suggest you drop a dime,

00:13:25.180 --> 00:13:27.780
or a couple of dimes,
and buy a book or two.

00:13:27.880 --> 00:13:30.500
And I haven't published
a book in REALbasic,

00:13:30.500 --> 00:13:33.980
so I'm not pushing my own book,
but there are other books,

00:13:33.980 --> 00:13:36.620
and the REALbasic documentation itself.

00:13:36.620 --> 00:13:37.200
Read it.

00:13:37.280 --> 00:13:38.470
Become one with it.

00:13:38.540 --> 00:13:41.690
Understand what the language
does so that you know,

00:13:41.730 --> 00:13:45.720
oh, I remember reading about that,
and you can move on.

00:13:45.720 --> 00:13:47.730
So, a lot of times,
because you're just like me, I mean,

00:13:47.730 --> 00:13:50.560
I get a piece of software, I get the box,
I never even open it, I download it,

00:13:50.560 --> 00:13:52.150
I install it,
and I'm just like brute force,

00:13:52.160 --> 00:13:53.640
I'm going to make this
thing do what I want,

00:13:53.650 --> 00:13:54.840
because that's how I am.

00:13:54.850 --> 00:13:57.110
But in this case, you know,
like my dad used to say,

00:13:57.110 --> 00:13:59.200
when all else fails, read the directions.

00:13:59.200 --> 00:14:01.330
You know, and then my dad would
watch me do something,

00:14:01.330 --> 00:14:02.390
I'd be beating my head.

00:14:02.410 --> 00:14:05.260
My dad is a hardware guy,
my mother was a software gal.

00:14:05.260 --> 00:14:07.500
And so, I'd do something all along,
and my dad would watch me,

00:14:07.510 --> 00:14:09.770
and then at the end,
when it wouldn't work, he'd go, you know,

00:14:09.770 --> 00:14:11.610
I probably wouldn't
have done it that way.

00:14:11.610 --> 00:14:14.050
So, now that I'm getting, you know,
towards middle age, I, you know,

00:14:14.130 --> 00:14:17.070
I'm starting to realize, gee,
maybe it's maybe I should have, you know,

00:14:17.290 --> 00:14:18.680
not when all else fails,
read the directions.

00:14:18.680 --> 00:14:20.220
Maybe I ought to read
the directions up front,

00:14:20.680 --> 00:14:21.720
especially if I have to do it.

00:14:21.790 --> 00:14:25.420
So, you can read as well as
I can on the rest of them.

00:14:25.420 --> 00:14:28.710
Code syntax, next big area.

00:14:34.040 --> 00:14:36.840
These are the kind of things
that will drive you batty,

00:14:36.870 --> 00:14:38.280
but they're the things
you need to know about.

00:14:38.330 --> 00:14:42.780
In this case, for example,
this is a real subtle kind of a bug.

00:14:42.780 --> 00:14:44.490
By the way,
you can just drag and drop code

00:14:44.630 --> 00:14:46.340
from Visual Basic into REALbasic.

00:14:46.340 --> 00:14:49.090
REALbasic can open modules
and just load the code right

00:14:49.100 --> 00:14:52.440
up and show it in its editor,
and it actually looks pretty cool.

00:14:52.440 --> 00:14:55.410
Here's an example of something
that would terrorize you,

00:14:55.590 --> 00:14:58.270
and it's only because you
were sloppy on the VB side.

00:14:58.280 --> 00:15:01.730
Now remember, Visual Basic,
and I was one of those guys who,

00:15:01.730 --> 00:15:03.850
a long time ago,
when Visual Basic first came out,

00:15:03.850 --> 00:15:05.290
people were like, oh, you can't do that.

00:15:05.410 --> 00:15:08.600
It's only good for prototyping UIs,
and you can't write a real program.

00:15:08.600 --> 00:15:10.050
I was like, yeah, watch this.

00:15:10.110 --> 00:15:12.250
I cracked my knuckles,
and I'd do something that

00:15:12.250 --> 00:15:14.720
couldn't be done in VB,
like a file on a race program that

00:15:14.840 --> 00:15:18.240
did direct disk manipulation to
be able to recover deleted files.

00:15:18.240 --> 00:15:19.990
People were like,
we can only do that in Assembler or C.

00:15:19.990 --> 00:15:21.340
I'm like, oh, yeah, check this out.

00:15:22.440 --> 00:15:24.900
So yeah,
you can be sloppy in Visual Basic,

00:15:24.900 --> 00:15:28.100
or you cannot be sloppy,
but Visual Basic is forgiving,

00:15:28.100 --> 00:15:30.560
and that was one of the things about it.

00:15:30.560 --> 00:15:32.020
So that means it's easy to be sloppy.

00:15:32.020 --> 00:15:34.970
So let's say, for example,
in this example here,

00:15:34.970 --> 00:15:39.180
you've got Visual Basic code on top,
and you've got a defint A through Z,

00:15:39.180 --> 00:15:44.000
and that means that for every variable
declared in the rest of this code module,

00:15:44.000 --> 00:15:48.220
if I don't explicitly
declare it to be a data type,

00:15:48.220 --> 00:15:52.420
the variable will default to integer,
because that's my default.

00:15:52.440 --> 00:15:57.410
So anything that starts with A through Z,
that's a variable that

00:15:57.410 --> 00:16:00.080
isn't explicitly cast,
defaults to an integer.

00:16:00.080 --> 00:16:03.160
That's all well and dandy,
because on the second line,

00:16:03.160 --> 00:16:05.450
the first line of that
form load up there,

00:16:05.450 --> 00:16:07.320
I have dim x comma y as string.

00:16:09.110 --> 00:16:12.110
Now, you might look at that,
because you know VB, and go, well, sure,

00:16:12.110 --> 00:16:13.640
X is an integer and Y is a string.

00:16:13.640 --> 00:16:16.220
Now,
load that code into REALbasic and go dim,

00:16:16.220 --> 00:16:18.680
by the way,
REALbasic doesn't allow you to do

00:16:18.680 --> 00:16:22.400
module level global declarations
like everything that starts with

00:16:22.400 --> 00:16:24.750
A through Z is a particular data type.

00:16:24.780 --> 00:16:28.930
So, it looks at X, Y as string,
and it says, oh, well,

00:16:28.930 --> 00:16:30.770
they're both strings.

00:16:30.770 --> 00:16:33.190
You want X, Y, Z as string.

00:16:34.900 --> 00:16:36.210
See how that just kind
of gets you a little bit?

00:16:36.330 --> 00:16:38.580
So all of a sudden,
the code that worked fine up on top,

00:16:38.580 --> 00:16:40.730
you know, message box Y,
you're going to get a

00:16:40.730 --> 00:16:42.680
tight mismatch error,
you know,

00:16:42.890 --> 00:16:44.300
because X is no longer an integer.

00:16:44.300 --> 00:16:46.900
X is a string now, and you can't assign a
numeric value to a string.

00:16:46.900 --> 00:16:52.130
So the moral of the story here is that
you should begin to become as explicit

00:16:52.230 --> 00:16:55.140
with your Visual Basic code as you can.

00:16:55.140 --> 00:16:57.750
And by that I mean you're
going to want to clean it up.

00:16:57.830 --> 00:17:01.840
And that's kind of the
moral of how to port.

00:17:02.270 --> 00:17:04.260
Start by cleaning up your VB code.

00:17:04.260 --> 00:17:07.370
We all know what good
programming practice is.

00:17:07.370 --> 00:17:09.680
Just nod for me.

00:17:12.130 --> 00:17:14.320
Good, yeah, we all know what the
right thing to do is,

00:17:14.320 --> 00:17:17.610
and you need to go back and do those
things to your Visual Basic programs.

00:17:17.610 --> 00:17:21.340
Now, there are a few places where the
syntax of the words are different.

00:17:21.340 --> 00:17:22.780
We're into the syntax now.

00:17:22.780 --> 00:17:25.000
In Visual Basic,
if you want to count down,

00:17:25.000 --> 00:17:28.880
for I equals 1 to 10,
10 to 1 step minus 1, it works backwards,

00:17:29.030 --> 00:17:29.440
right?

00:17:29.440 --> 00:17:30.600
It's intuitive.

00:17:30.600 --> 00:17:32.980
Except in REALbasic,
you don't do it like that.

00:17:32.980 --> 00:17:36.850
You say for I equals 10 down to 1,
there's no step minus 1 in REALbasic.

00:17:36.850 --> 00:17:38.940
So you're going to have
to do a little bit of,

00:17:38.940 --> 00:17:41.980
you know, and in fact, you can actually,
you know,

00:17:42.000 --> 00:17:44.330
you can actually have that code in there.

00:17:44.510 --> 00:17:48.120
The 10 to 1 step minus 1,
the loop just never gets executed.

00:17:48.120 --> 00:17:51.100
It skips right over it,
because I is already 1,

00:17:51.100 --> 00:17:53.620
or less than 1 when it starts.

00:17:53.620 --> 00:17:58.010
So that's an example of
something that needs to be fixed.

00:18:03.320 --> 00:18:04.840
Here's another example, logic.

00:18:04.890 --> 00:18:08.760
Now, in .NET, they did a very similar
thing to what REALBASIC did.

00:18:08.760 --> 00:18:13.840
So, the folks in Visual Basic,
for the longest time, OR, AND, XOR, NOT,

00:18:14.190 --> 00:18:17.030
these are both functions and operators.

00:18:17.040 --> 00:18:18.890
You know, I can say A or B.

00:18:18.920 --> 00:18:22.720
C equals A or B,
and it does the bit manipulations.

00:18:22.720 --> 00:18:25.560
And, in fact,
a whole lot of API code that you write

00:18:25.560 --> 00:18:29.160
for Windows uses that kind of AND,
NOT, and OR functionality

00:18:29.270 --> 00:18:30.960
to do bit manipulation.

00:18:31.530 --> 00:18:34.310
Well,
it doesn't work that way in REALBASIC.

00:18:34.400 --> 00:18:37.160
REALBASIC actually has
true bit manipulation.

00:18:37.330 --> 00:18:40.600
So, you're going to have to recode those
things and use the bitwise class.

00:18:40.700 --> 00:18:45.340
I mean, it still has OR, AND,
and NOT for logical partitions.

00:18:45.340 --> 00:18:50.670
For example, A or B, if A or B then,
but you can't say, you can't use A or B,

00:18:50.710 --> 00:18:53.760
for example,
to set flags to pass to another call.

00:18:55.340 --> 00:18:56.540
One example.

00:18:56.640 --> 00:19:00.140
So the differences don't
make too much of a burden.

00:19:00.170 --> 00:19:01.640
What was the main thing
for you to understand the

00:19:01.640 --> 00:19:02.900
differences that I talked about?

00:19:02.900 --> 00:19:06.070
You could just say it.

00:19:06.690 --> 00:19:07.160
RTM.

00:19:07.160 --> 00:19:07.700
RTM.

00:19:11.540 --> 00:19:14.480
You guys are looking at me,
no one's going to say it.

00:19:14.480 --> 00:19:15.210
All right.

00:19:15.210 --> 00:19:17.920
Oh, RTM, good, thanks, right, very good.

00:19:17.920 --> 00:19:19.380
Yeah, read the manual.

00:19:19.380 --> 00:19:21.580
And begin to clean up your basic code.

00:19:21.580 --> 00:19:25.310
Get rid of all your def-whatevers,
and turn on option explicit.

00:19:25.310 --> 00:19:27.430
You've got a nightmare ahead of you.

00:19:27.430 --> 00:19:30.170
Well, not a nightmare, but you have,
you know,

00:19:30.250 --> 00:19:32.860
at least a couple hours of F5 splash,
okay.

00:19:32.860 --> 00:19:33.640
F5 splash.

00:19:33.720 --> 00:19:36.150
F5 is how you start a
VB program in the IDE,

00:19:36.150 --> 00:19:38.800
and it'll,
it'll like start to compile and go,

00:19:38.800 --> 00:19:41.480
and then you'll have to do it again.

00:19:41.570 --> 00:19:44.900
Oh, yeah, that's right,
xdim x as integer, or dim y as string.

00:19:44.900 --> 00:19:46.600
So you're going to want
to go through and do that.

00:19:47.880 --> 00:19:50.960
You want to get rid of
your dynamic typecasts.

00:19:51.200 --> 00:19:54.010
This is the dollar, the pound,
the exclamation point,

00:19:54.060 --> 00:19:57.240
the ampersand at the
end of a variable name.

00:19:57.290 --> 00:20:02.490
REALbasic doesn't allow you to
indicate what a variable is by having

00:20:02.820 --> 00:20:04.960
a control character at the end of it.

00:20:05.000 --> 00:20:07.710
So you can't have like x$ in REALbasic.

00:20:07.790 --> 00:20:10.950
You can have x as a string,
which is what it is in Visual Basic,

00:20:10.970 --> 00:20:12.480
but you can't have the
dollar at the end of it,

00:20:12.480 --> 00:20:13.110
the dollar sign.

00:20:13.110 --> 00:20:14.260
You want to remove all that.

00:20:14.260 --> 00:20:15.380
Hank Marquis

00:20:15.750 --> 00:20:16.740
Look for loops.

00:20:16.780 --> 00:20:18.400
Look for those four loops I talked about.

00:20:18.400 --> 00:20:20.200
Just remember, mark them,
that you're going to

00:20:20.210 --> 00:20:20.750
have to deal with them.

00:20:20.820 --> 00:20:21.520
So that's not so bad.

00:20:21.660 --> 00:20:23.020
Let's talk about data types.

00:20:24.690 --> 00:20:26.580
There's a whole bunch of
data types in REALBASIC that

00:20:26.580 --> 00:20:27.880
don't exist in Visual Basic.

00:20:27.880 --> 00:20:29.640
Visual Basic actually
has a pretty limited,

00:20:29.640 --> 00:20:32.020
well, you know,
you could think it's rich,

00:20:32.020 --> 00:20:35.180
but I think REALBASIC has
a much richer set,

00:20:35.260 --> 00:20:38.410
and it also has endian awareness
that Visual Basic doesn't have.

00:20:38.480 --> 00:20:40.180
Because remember,
if you start going across

00:20:40.180 --> 00:20:42.020
different platforms,
all of a sudden the order

00:20:42.080 --> 00:20:44.420
of bits and bytes stored on
disk aren't the same anymore.

00:20:44.420 --> 00:20:48.140
So you have to be able to say, well,
is this thing read from left to right,

00:20:48.140 --> 00:20:49.830
or is it read from right to left?

00:20:50.840 --> 00:20:53.500
Visual Basic has the concept
of a user-defined type,

00:20:53.560 --> 00:20:59.290
and I've actually been interacting with
REALBASIC to talk about maybe getting

00:20:59.290 --> 00:21:03.920
that into the REALBASIC language,
because there are no user-defined

00:21:03.920 --> 00:21:05.810
types per se in REALBASIC.

00:21:05.820 --> 00:21:09.990
What you do have in REALBASIC is
this concept of a memory block,

00:21:09.990 --> 00:21:13.290
which is where you can
allocate a chunk of memory,

00:21:13.290 --> 00:21:18.370
and you can read any bit of it as any
collection of anything that you want.

00:21:18.380 --> 00:21:20.700
I can read the first four bits,
the first eight bits, the first six bits.

00:21:20.720 --> 00:21:23.240
I can read the first 16, the first 32,
sort of at my leisure,

00:21:23.360 --> 00:21:24.440
and I can do whatever I want.

00:21:24.620 --> 00:21:28.780
So I can achieve the same result
as I do with a static user-defined

00:21:28.780 --> 00:21:31.170
type with a dynamic memory block.

00:21:31.250 --> 00:21:33.890
And I actually wrote a
class that allowed me to,

00:21:33.890 --> 00:21:37.930
because I kind of like being able to
have the logic of something that's,

00:21:37.960 --> 00:21:41.520
you know, having a type with a name,
like type.name.

00:21:41.520 --> 00:21:45.860
So I actually created a class that
kind of gives that same functionality,

00:21:45.860 --> 00:21:50.300
lets you create user-defined types
and access their members logically.

00:21:50.720 --> 00:21:55.840
And so if you want, you can email me,
or you can contact us somehow.

00:21:55.840 --> 00:21:56.980
There's email addresses around.

00:21:56.980 --> 00:21:58.500
I can email that to you.

00:22:02.940 --> 00:22:07.680
Real Basic is object-oriented,
and it really is object-oriented,

00:22:07.680 --> 00:22:11.070
like seriously object-oriented,
and it's classified.

00:22:11.190 --> 00:22:15.210
So not like for security, but you know,
like if it's a Boolean,

00:22:15.350 --> 00:22:18.660
then it's either true or false,
and those are the types

00:22:18.660 --> 00:22:20.560
of value that it can have.

00:22:20.720 --> 00:22:24.500
So if I was in Visual Basic, I could say,
and how many people have done this,

00:22:24.500 --> 00:22:27.100
I could dim something as a Boolean,
and then I can say,

00:22:27.100 --> 00:22:28.530
if the Boolean equals zero, then beep.

00:22:28.580 --> 00:22:33.450
Well, that'll work, because everyone in
Visual Basic knows that zero is false,

00:22:33.450 --> 00:22:34.990
and minus one is true.

00:22:36.540 --> 00:22:37.940
That's what Visual Basic thinks.

00:22:37.940 --> 00:22:41.000
Well, unfortunately,
that's not actually technically right.

00:22:41.810 --> 00:22:45.330
And in REALBASIC,
false does not equal zero,

00:22:45.330 --> 00:22:47.570
and true does not equal negative one.

00:22:47.580 --> 00:22:48.780
And true doesn't equal one either.

00:22:48.780 --> 00:22:49.540
True is true.

00:22:49.540 --> 00:22:52.450
True is a state,
and there's an actual keyword operator

00:22:52.730 --> 00:22:54.810
called true and one called false.

00:22:55.490 --> 00:22:57.360
So you want to go clean up your code.

00:22:57.480 --> 00:22:59.160
You're going to say
everywhere I have booleans,

00:22:59.160 --> 00:23:04.150
and I say if this equals one or this
equals zero or a boolean is greater than

00:23:04.160 --> 00:23:06.890
or less than zero or something like that,
I want to go back and make

00:23:06.890 --> 00:23:07.900
it use true and false.

00:23:07.940 --> 00:23:11.700
So by cleaning that up ahead of time,
you're going to wind up a lot easier.

00:23:11.700 --> 00:23:14.700
So here's an example of the
REALBASIC IDE with the variety of

00:23:14.700 --> 00:23:16.740
things you can do with a memory block.

00:23:18.760 --> 00:23:20.960
which is a whole lot of different values,
so you can do a lot.

00:23:21.050 --> 00:23:24.610
So conclusion,
one of the big things that kind of

00:23:24.680 --> 00:23:28.140
got me going a little bit was that
in Visual Basic there's a concept

00:23:28.140 --> 00:23:32.770
of an integer and a long integer,
16 bits long, 32 bits.

00:23:33.390 --> 00:23:35.560
Well, that's true maybe for
the Wintel platform,

00:23:35.690 --> 00:23:37.820
but it's not always
true on other platforms.

00:23:37.820 --> 00:23:41.180
So in the case of REALbasic,
an integer is the only

00:23:41.180 --> 00:23:44.400
kind of integer they have,
and it's 32 bits.

00:23:44.400 --> 00:23:49.150
There's no currency type, but again,
we can emulate one of

00:23:49.150 --> 00:23:51.120
those pretty easily.

00:23:51.120 --> 00:23:53.500
And you can also create
your own data types.

00:23:53.500 --> 00:23:56.420
The bottom line is you've got to
use memory blocks instead of UDTs.

00:23:56.420 --> 00:23:56.980
It's easy.

00:23:56.980 --> 00:23:57.570
There's a class.

00:23:57.570 --> 00:23:58.470
It's already been done.

00:23:58.480 --> 00:24:00.230
And so that's it.

00:24:00.240 --> 00:24:04.780
So then as we move into, say,
for example, language structure,

00:24:05.000 --> 00:24:08.130
We've gone through the keywords,
and we've gone through the data types,

00:24:08.200 --> 00:24:09.400
and those are kind of the constructs.

00:24:09.440 --> 00:24:11.250
Now let's see how we put them
together to do something.

00:24:11.250 --> 00:24:13.410
For example,
file I.O., or error handling,

00:24:13.410 --> 00:24:15.610
or object instantiation,
and things like that.

00:24:18.750 --> 00:24:21.900
Here's some code that shows how
you would open a file in REALBASIC,

00:24:21.900 --> 00:24:26.890
and how you would open
it in Visual Basic.

00:24:28.750 --> 00:24:35.780
Visual Basic brought forth the
Quick Basic concept that you open

00:24:35.870 --> 00:24:38.600
something in the context of file I/O.

00:24:38.600 --> 00:24:40.220
You open a file.

00:24:40.410 --> 00:24:42.000
You open a channel to the file.

00:24:42.040 --> 00:24:44.580
Or you open a port, for example.

00:24:44.680 --> 00:24:46.590
REALbasic is a little
more object-oriented.

00:24:46.590 --> 00:24:50.600
It has this sort of folder-child
relationship concept.

00:24:50.600 --> 00:24:53.280
And that makes a lot of sense,
because not everybody has the same

00:24:53.280 --> 00:24:56.600
kind of organizational structure
that you find under Windows.

00:24:56.600 --> 00:24:59.050
So the REALbasic way is
a cross-platform way,

00:24:59.050 --> 00:25:01.590
and the Microsoft way
is the Microsoft way.

00:25:01.680 --> 00:25:04.120
So there's a little bit of work
that needs to be done for your

00:25:04.120 --> 00:25:05.600
file I/O and things like that.

00:25:05.600 --> 00:25:08.540
It's not that hard, and I hope you're not
getting depressed at all,

00:25:08.670 --> 00:25:11.810
because I'm going to talk in
a minute about a tool that's

00:25:11.810 --> 00:25:14.720
available from REALbasic that
does most of this stuff for you,

00:25:14.720 --> 00:25:16.540
called the VB Project Convertor.

00:25:16.670 --> 00:25:18.600
Anyone in here ever use that?

00:25:18.600 --> 00:25:19.560
A couple people?

00:25:20.060 --> 00:25:20.600
Yeah.

00:25:20.600 --> 00:25:21.560
It's a pretty cool little toy.

00:25:21.690 --> 00:25:22.600
It'll do a good job tool.

00:25:22.600 --> 00:25:24.600
It'll do a good job for you.

00:25:24.600 --> 00:25:27.200
So as we start looking at
the language structure here,

00:25:27.280 --> 00:25:30.420
we can see, for example,
how the structure of the methods and

00:25:30.420 --> 00:25:32.600
functions and events are put together.

00:25:32.600 --> 00:25:36.600
REALbasic supports methods, functions,
and events, just like Visual Basic does.

00:25:36.600 --> 00:25:39.890
A little bit of
difference here and there.

00:25:40.160 --> 00:25:43.560
To exit something,
you would say exit function, exit sub.

00:25:43.560 --> 00:25:47.450
I'm sorry, in Visual Basic,
you say exit function, exit sub.

00:25:47.460 --> 00:25:52.560
In REALbasic, you just say exit,
or return is a way to do that.

00:25:52.660 --> 00:25:55.870
And the other interesting
thing is that in Visual Basic,

00:25:55.870 --> 00:25:58.560
if I have a function and
it returns an integer,

00:25:58.690 --> 00:26:01.190
I would say the name,
like the function would

00:26:01.190 --> 00:26:02.840
be called function 7.

00:26:02.840 --> 00:26:05.610
I would say function 7 equals
the result of my function,

00:26:05.610 --> 00:26:07.450
and that would be the return value.

00:26:08.200 --> 00:26:11.980
In REALbasic, you say return whatever the
value you want to return is.

00:26:11.980 --> 00:26:16.900
So you don't assign the value of
the function to a function name.

00:26:16.900 --> 00:26:18.850
You actually say return that value.

00:26:18.860 --> 00:26:21.880
So that's a little bit of a difference,
but not that great.

00:26:21.900 --> 00:26:25.880
But you can still do things like create
properties with a set and a get method,

00:26:25.880 --> 00:26:26.720
if you will.

00:26:26.720 --> 00:26:30.020
And it works fine.

00:26:30.020 --> 00:26:33.310
And I've had no problems taking
classes from Visual Basic and moving

00:26:33.310 --> 00:26:35.060
them over with a little keying.

00:26:35.060 --> 00:26:36.360
The same thing with events.

00:26:36.360 --> 00:26:38.050
Most of the ways you raise events.

00:26:38.200 --> 00:26:39.240
Are going to be similar.

00:26:39.240 --> 00:26:43.270
Here's an example in Visual Basic,
and to do the same thing in REALbasic.

00:26:46.380 --> 00:26:48.300
Not that different.

00:26:48.300 --> 00:26:55.750
They both support biref and bival,
but there is a little bit of difference

00:26:55.750 --> 00:26:56.880
in the declaration of events.

00:26:56.880 --> 00:26:59.240
It'll take you a little
time to sort that out,

00:26:59.240 --> 00:27:01.590
but start small and
you'll be able to do it.

00:27:03.330 --> 00:27:08.770
So, with regard to constructs,
there are no enumerations in REALBASIC.

00:27:08.900 --> 00:27:11.960
And I know a lot of folks,
people in here use enums?

00:27:12.060 --> 00:27:14.200
In your Visual Basic programs, anybody?

00:27:14.200 --> 00:27:15.170
Only one or two?

00:27:15.270 --> 00:27:16.390
Ah, then you don't worry about it.

00:27:16.540 --> 00:27:17.750
But if you use them, you like them.

00:27:17.750 --> 00:27:21.450
And I've been lobbying
REALBASIC to put them in there.

00:27:21.460 --> 00:27:23.490
And, you know,
one of the lead development

00:27:23.490 --> 00:27:26.870
people from REALBASIC is here,
so we can gang up on him and lobby him.

00:27:26.870 --> 00:27:28.360
They all offer constants.

00:27:28.360 --> 00:27:31.600
One of the nicest things, yeah, look,
Cordis is like, ah!

00:27:31.600 --> 00:27:33.020
You know, he's like, ah!

00:27:33.860 --> 00:27:36.970
So one of the coolest things
about REALBASIC that I like is

00:27:36.970 --> 00:27:38.740
this whole cross-platform thing.

00:27:38.740 --> 00:27:43.080
I can create a constant,
and then I can have that constant

00:27:43.080 --> 00:27:47.840
have a different value based on the
platform that the program runs on.

00:27:48.070 --> 00:27:50.060
Visual Basic has no
concept of that at all.

00:27:50.060 --> 00:27:52.580
And you find these kind of
things in REALBASIC all the time.

00:27:52.580 --> 00:27:55.690
Just when you think about something
as a cross-platform tool and

00:27:55.690 --> 00:27:58.460
not a Windows-specific tool,
some of these other really

00:27:58.460 --> 00:28:01.350
interesting things show up and
have found their way into the

00:28:01.350 --> 00:28:03.510
language that are pretty awesome.

00:28:04.800 --> 00:28:06.540
So constants are going to work,
and you have even more

00:28:06.540 --> 00:28:07.800
capability with constants.

00:28:07.800 --> 00:28:09.370
Like for example,
you could do localization

00:28:09.390 --> 00:28:10.760
with your constants as well.

00:28:10.760 --> 00:28:14.020
Not only can you say what platform it is,
but what language it is.

00:28:14.020 --> 00:28:16.240
And that's all sort of built
into the language editor.

00:28:17.230 --> 00:28:22.240
UDTs are going to be something that
will throw you for a loop initially,

00:28:22.250 --> 00:28:23.500
but I already fixed that.

00:28:23.500 --> 00:28:24.530
It's already solved.

00:28:24.770 --> 00:28:28.650
Email me, and I'll be happy to send you a
REALBASIC class that lets you do the

00:28:28.760 --> 00:28:31.300
equivalent of user-defined types.

00:28:31.300 --> 00:28:33.120
No extra charge.

00:28:33.580 --> 00:28:36.690
One of the differences in error
handling that REALBASIC has

00:28:36.690 --> 00:28:41.500
versus Visual Basic is,
Visual Basic has this really arcane

00:28:41.660 --> 00:28:45.050
thing that came out of GWBASIC,
which is like millions of years

00:28:45.050 --> 00:28:48.460
old for those that remember it,
which is the whole on-error,

00:28:48.650 --> 00:28:49.720
go-to syntax.

00:28:49.800 --> 00:28:52.090
And they still use that, by the way.

00:28:52.100 --> 00:28:55.540
Well, REALBASIC doesn't use the on-error,
go-to thing.

00:28:55.540 --> 00:28:58.530
You can declare an exception
in an exception handler,

00:28:58.530 --> 00:29:01.370
or you can use try-catch,
and it's your choice which

00:29:01.370 --> 00:29:02.730
ones you want to use.

00:29:03.200 --> 00:29:05.360
There are no line numbers
supported in REALBASIC,

00:29:05.360 --> 00:29:07.440
and I have used line numbers.

00:29:07.440 --> 00:29:10.030
Traditionally, you use line numbers
for debugging purposes,

00:29:10.030 --> 00:29:12.840
so you can sort of get an output of
where you are and what's going on,

00:29:12.840 --> 00:29:13.780
but there are no line numbers.

00:29:13.780 --> 00:29:16.970
And the interesting thing is they
both use RAISE to RAISE an error,

00:29:16.970 --> 00:29:19.240
so you can create and
RAISE custom errors.

00:29:19.240 --> 00:29:22.450
So your error handling subsystems,
in fact, most people, let's face it,

00:29:22.450 --> 00:29:25.700
most, I'm just going to go out on a limb,
okay, no one in this room,

00:29:25.700 --> 00:29:28.690
but other developers you know who use
Visual Basic don't use error handlers,

00:29:28.690 --> 00:29:29.140
right?

00:29:29.160 --> 00:29:30.180
Yeah.

00:29:30.180 --> 00:29:32.870
And one of the really nice things
about REALBASIC is that... is

00:29:32.870 --> 00:29:36.320
that in the application open,
in the application object,

00:29:36.320 --> 00:29:40.360
every REALBASIC application has
a top-level application object,

00:29:40.360 --> 00:29:44.310
and there's an error handler in
there that you can turn on so

00:29:44.330 --> 00:29:47.200
that if any of your other code
doesn't have an error handler,

00:29:47.200 --> 00:29:49.240
it'll chain back to that one.

00:29:49.240 --> 00:29:52.070
So you can just write one error
handler and have a graceful dump.

00:29:52.120 --> 00:29:54.220
It sounds like an oxymoron, right?

00:29:54.320 --> 00:29:55.010
Graceful dump.

00:29:55.020 --> 00:29:57.420
That's a lot better than it just splats.

00:29:57.420 --> 00:29:59.430
So at least, you know,
so there's some really good

00:29:59.460 --> 00:30:02.600
things about the error handling in
REALBASIC that make it worthwhile.

00:30:02.740 --> 00:30:05.200
Um

00:30:08.880 --> 00:30:14.150
One thing that's a little interesting
to get used to is the whole dim,

00:30:14.150 --> 00:30:15.350
new, as new, as

00:30:15.680 --> 00:30:18.280
concept that Real Basic has
versus Visual Basic.

00:30:18.400 --> 00:30:20.630
The words are similar
but not exactly the same.

00:30:20.630 --> 00:30:24.330
It all has to do with object
instantiation and in some cases you can

00:30:24.330 --> 00:30:29.460
dim something and then try to use it,
it'll splat because you didn't say new,

00:30:29.460 --> 00:30:31.300
set equals a new thing.

00:30:31.300 --> 00:30:35.750
So the object instantiation is slightly
different but once you understand it,

00:30:35.760 --> 00:30:37.520
it becomes second nature.

00:30:37.520 --> 00:30:39.700
It's not that difficult.

00:30:39.700 --> 00:30:43.050
There's no set statement in Real Basic.

00:30:43.050 --> 00:30:45.340
There's a new.

00:30:45.340 --> 00:30:50.790
Visual Basic uses nothing and
Real Basic uses nil and there's no

00:30:50.890 --> 00:30:53.240
let statement in Real Basic at all.

00:30:53.320 --> 00:30:54.980
So I don't know,
most people don't use let anymore.

00:30:54.990 --> 00:30:55.910
That's like old school.

00:30:56.020 --> 00:30:59.140
Let a equal one, you know,
I don't think too many

00:30:59.290 --> 00:31:01.020
people do that anymore.

00:31:01.020 --> 00:31:02.980
So in conclusion,

00:31:04.610 --> 00:31:05.440
You're going to do some work.

00:31:05.490 --> 00:31:07.870
You're going to do some
work if you move to .NET.

00:31:07.940 --> 00:31:14.220
You're going to do some work
if you move to REALBASIC.

00:31:14.220 --> 00:31:14.220
At the end of .NET, you have this

00:31:14.490 --> 00:31:22.430
"If you go to REALBASIC,
you have this thing that runs on Windows,

00:31:22.430 --> 00:31:26.380
OS X, Linux,
and it's my belief that that's

00:31:26.380 --> 00:31:28.600
probably a better way to go."

00:31:28.700 --> 00:31:31.490
So, at the end of the day,
the good news is it's not that hard.

00:31:31.490 --> 00:31:34.330
I've personally found it
easier than trying to do .NET.

00:31:34.330 --> 00:31:36.360
There's enough things
to make it possible,

00:31:36.360 --> 00:31:40.330
and your best bet is to get the manual,
read it, play with REALBASIC first,

00:31:40.340 --> 00:31:42.790
get a feel for it,
learn every language has its

00:31:42.800 --> 00:31:44.680
own little idiosyncrasies.

00:31:44.680 --> 00:31:47.860
It'll take you a little while to get
away from the Visual Basic dropdowns

00:31:47.860 --> 00:31:51.090
with the procedure names in it,
to having a list of them on the side.

00:31:51.090 --> 00:31:54.390
So just play with it, get the hang of it,
and then you'll be able to move on.

00:31:55.330 --> 00:31:58.670
User Interface Well, you know,
suffice it to say,

00:31:58.750 --> 00:32:01.270
anything that was designed and
built around the Mac has a user

00:32:01.270 --> 00:32:04.340
interface that knocks the socks off
of anything that came out of Windows.

00:32:04.340 --> 00:32:08.200
I'm an IBM guy, you know, from my mom,
you know, for millions of years,

00:32:08.200 --> 00:32:12.380
but I just got to admit it, you know,
it's heads and tails above.

00:32:12.380 --> 00:32:16.250
You know, REALBASIC has two-dimensional
and three-dimensional rendering

00:32:16.520 --> 00:32:20.080
engines built into the language,
and you can do some amazing things.

00:32:20.080 --> 00:32:21.840
One of the other things
I find amazing is,

00:32:21.840 --> 00:32:24.340
again, that cross-platform
mentality made it so that,

00:32:24.340 --> 00:32:27.340
if I write a program,
let's just even take a VB program

00:32:27.340 --> 00:32:31.940
and make it so it runs under Windows,
and I compile it on Windows 2000,

00:32:31.940 --> 00:32:36.410
and it's got that Windows 2000 look,
you know, that, like, Windows 3.1 look.

00:32:36.590 --> 00:32:40.150
Well, if I take that and go
run it on Windows XP,

00:32:40.150 --> 00:32:43.880
it just picks up themes,
and it looks like it's a native XP app.

00:32:44.040 --> 00:32:47.940
So as far as REALBASIC is concerned,
they are different platforms,

00:32:47.940 --> 00:32:51.040
and it does the appropriate thing,
and it does that for Mac as well.

00:32:51.040 --> 00:32:52.680
It does the same thing for Linux.

00:32:52.860 --> 00:32:53.540
I wrote a class.

00:32:53.540 --> 00:32:57.860
I wrote a class that will take
my application interface and

00:32:57.860 --> 00:33:00.740
size buttons and move things
around based on where it runs.

00:33:00.740 --> 00:33:02.900
So not only does it have
the graphical look and color

00:33:02.900 --> 00:33:05.740
scheme and borders and so on,
but the actual button size and

00:33:05.740 --> 00:33:08.860
position themselves appropriately,
because, well, I get back to, like,

00:33:08.860 --> 00:33:12.040
Mac users have this expectation
that buttons have different titles

00:33:12.040 --> 00:33:14.080
and they're in different locations,
and, you know,

00:33:14.080 --> 00:33:18.140
Windows likes to do the whole abort,
retry, you know, hang yourself thing,

00:33:18.140 --> 00:33:19.730
which, you know,
you don't do in the Mac world

00:33:19.740 --> 00:33:20.460
and things like that.

00:33:20.540 --> 00:33:22.740
So anyway,
user interface is mostly the same.

00:33:22.740 --> 00:33:25.200
except it's a lot richer.

00:33:25.660 --> 00:33:27.440
VB has a thing called a Pitcher Box.

00:33:27.770 --> 00:33:34.570
The equivalent thing in REALBASIC is
probably a Pitcher Well or Canvas.

00:33:34.740 --> 00:33:37.740
Canvas has a lot more flexibility
as a thing you can subclass and

00:33:37.740 --> 00:33:39.150
make your own thing controls with.

00:33:39.250 --> 00:33:40.420
Pitcher Well just holds a pitcher.

00:33:40.420 --> 00:33:44.630
Both support, by the way,
your ActiveX components will move

00:33:44.830 --> 00:33:50.110
to Windows if you use REALBASIC,
but ActiveX doesn't exist in Mac OS X.

00:33:50.380 --> 00:33:54.110
RealBasic has this concept of plugins,
but the plugin is not an ActiveX.

00:33:54.120 --> 00:33:56.930
So there's these two sort
of different methodologies,

00:33:57.040 --> 00:34:00.690
but RealBasic supports ActiveX,
but if you're going to move to a platform

00:34:00.780 --> 00:34:04.800
that doesn't support ActiveX and COM and
that whole Windows infrastructure,

00:34:04.800 --> 00:34:06.030
it doesn't work.

00:34:06.120 --> 00:34:08.520
So the funny thing is that
when you get done porting your

00:34:08.520 --> 00:34:11.540
Visual Basic program into RealBasic,
not only will you have, say,

00:34:11.540 --> 00:34:14.000
OS X compatibility,
you'll have a program that handles

00:34:14.000 --> 00:34:15.810
Windows better than Visual Basic does.

00:34:15.820 --> 00:34:16.530
That's funny.

00:34:16.540 --> 00:34:18.060
I just think that's funny.

00:34:19.910 --> 00:34:23.960
Okay, so again,
you can read as well as I can.

00:34:24.190 --> 00:34:26.180
If you're using things like
Tree View and List View,

00:34:26.180 --> 00:34:28.510
it's going to be one of the
biggest issues you have.

00:34:28.510 --> 00:34:31.940
There is no Tree View and
List View equivalent

00:34:32.210 --> 00:34:33.800
in the Macintosh world.

00:34:34.170 --> 00:34:37.080
Macintosh has, I forget how many,
it's like 36 or 8 different

00:34:37.360 --> 00:34:40.380
constructs that you can use
for user interface widgets,

00:34:40.380 --> 00:34:42.140
or I forget the exact number.

00:34:42.140 --> 00:34:47.480
So you're going to want
to try to find a model,

00:34:47.480 --> 00:34:48.090
because it's generally frowned
upon to create your own

00:34:48.800 --> 00:35:17.500
[Transcript missing]

00:35:19.150 --> 00:35:20.840
I already talked about the XP themes.

00:35:20.840 --> 00:35:25.050
Project structure.

00:35:26.560 --> 00:35:29.710
When Visual Basic first came out,
it created a single big binary file.

00:35:29.710 --> 00:35:33.180
And then it used to get
corrupted all the time,

00:35:33.180 --> 00:35:34.220
and people would hang themselves.

00:35:34.220 --> 00:35:37.090
And after enough developers, you know,
people would just, it was terrible.

00:35:37.100 --> 00:35:38.940
You had to start over,
and you had to have backups,

00:35:38.940 --> 00:35:39.820
and it was just bad.

00:35:39.820 --> 00:35:45.620
And then they brought in other formats,
and now with VB 5 and 6, the text saving,

00:35:45.620 --> 00:35:49.540
except for FRX files,
are pretty much the standard.

00:35:50.020 --> 00:35:51.560
Real Basic is the same way.

00:35:51.560 --> 00:35:54.130
It's got a big binary file,
but you can also save

00:35:54.130 --> 00:35:56.350
it as XML if you want,
and XML is a nice format

00:35:56.350 --> 00:35:59.280
because it actually is nicer
than working with text files.

00:35:59.280 --> 00:36:02.960
So from a structural perspective,
you can use the XML or the binary file.

00:36:02.960 --> 00:36:06.180
The app module is unique to Real Basic,
and it's pretty cool.

00:36:06.180 --> 00:36:08.400
And once you get the
hang of what it's about,

00:36:08.410 --> 00:36:11.820
the whole object,
Real Basic is object-oriented, truly.

00:36:11.820 --> 00:36:13.450
And once you begin to
get the feel of that,

00:36:13.450 --> 00:36:15.300
you're going to have, you know,
to be able to,

00:36:15.320 --> 00:36:17.600
you're going to be able to do
some things that you couldn't do

00:36:17.700 --> 00:36:19.100
in Visual Basic that are good.

00:36:19.560 --> 00:36:21.910
Menu creation and structure
is a little bit different than

00:36:21.910 --> 00:36:23.240
Visual Basic and Real Basic.

00:36:23.240 --> 00:36:25.360
They both have editors,
but they're just a little bit different.

00:36:25.360 --> 00:36:28.740
And then there's MIDI, SDI, MDI issues.

00:36:28.740 --> 00:36:31.680
Not so much an issue anymore
because Microsoft is pulling

00:36:31.680 --> 00:36:33.130
back from the MDI concept.

00:36:33.290 --> 00:36:35.180
If you, you know,
the latest versions of Word and

00:36:35.180 --> 00:36:37.030
Excel and PowerPoint and so on,
for example,

00:36:37.030 --> 00:36:38.700
aren't MDI applications anymore.

00:36:38.700 --> 00:36:41.110
They show up down as individual
copies of the application.

00:36:41.140 --> 00:36:44.830
So you can make MDI applications
if you want in Real Basic,

00:36:44.830 --> 00:36:46.960
but there's really no need to.

00:36:48.450 --> 00:36:48.900
APIs.

00:36:48.900 --> 00:36:51.540
We talked about this a
little bit as we got going,

00:36:51.540 --> 00:36:54.690
but one of the interesting
things about REALbasic is that,

00:36:54.820 --> 00:36:56.240
kind of like, who remembers VB4?

00:36:56.240 --> 00:36:58.560
Yeah, old school guys out there.

00:36:58.560 --> 00:37:00.380
Yeah, we're still here.

00:37:02.000 --> 00:37:05.200
Well, they had this, and even in VB5,
you had this strange

00:37:05.200 --> 00:37:08.910
ability to be able to say,
if it's 16-bit code, do this,

00:37:08.910 --> 00:37:10.960
and if it's 32-bit code, do that.

00:37:11.230 --> 00:37:13.980
Well, it's the same kind of concept here,
but it's like,

00:37:14.130 --> 00:37:16.660
if I'm OS 9 or Carbon or whatever,
do this.

00:37:16.660 --> 00:37:18.350
If I'm OS X, do this.

00:37:18.350 --> 00:37:20.190
If I'm Linux, do this.

00:37:20.190 --> 00:37:22.320
If I'm Windows, do that.

00:37:22.330 --> 00:37:23.960
And so you have these declarations.

00:37:23.960 --> 00:37:27.620
And what you can do then is you can use
Windows APIs or whatever API you want.

00:37:27.620 --> 00:37:30.040
You just have to do a block of
them for whatever the particular

00:37:30.040 --> 00:37:31.460
application is that you want.

00:37:31.960 --> 00:37:35.010
So it's actually a lot more flexible.

00:37:35.020 --> 00:37:38.750
Okay, some of the other considerations
you're going to have to deal with.

00:37:38.850 --> 00:37:40.840
Don't forget the fact that...

00:37:43.380 --> 00:37:48.350
There's a different expectation
for Macintosh users versus

00:37:48.870 --> 00:37:49.910
"Windows users.

00:37:50.200 --> 00:37:51.600
They get the look and feel.

00:37:51.600 --> 00:37:54.610
There's the way things work,
the way things look,

00:37:54.610 --> 00:37:56.130
the way things are named.

00:37:56.470 --> 00:37:59.020
There's a process flow
that you want to pick up.

00:37:59.160 --> 00:38:03.360
So you're probably going to want to
go download the platform development

00:38:03.360 --> 00:38:05.630
guidelines and things like that."

00:38:13.020 --> 00:38:13.940
- Tools.

00:38:13.950 --> 00:38:17.240
How many people use tools for the,
you know, in their VB world space?

00:38:17.360 --> 00:38:19.880
Like optimizers or debuggers
or things like that?

00:38:19.880 --> 00:38:20.350
Nobody?

00:38:20.500 --> 00:38:20.850
Don't need them?

00:38:20.920 --> 00:38:22.790
Only a few people.

00:38:23.200 --> 00:39:16.700
[Transcript missing]

00:39:17.980 --> 00:39:20.880
Almost all of your user interface
will just come right over,

00:39:20.930 --> 00:39:23.320
just show right up and look fine.

00:39:23.510 --> 00:39:26.590
And like I said,
Windows-specific custom controls

00:39:26.630 --> 00:39:30.510
will be the biggest problem
you have dealing with that.

00:39:30.620 --> 00:39:33.880
So, and also,
you're going to need some tools.

00:39:33.960 --> 00:39:35.570
Well, you don't need it,
but wouldn't it be nice if there

00:39:35.570 --> 00:39:38.530
was something you could get for
free that would translate your

00:39:38.530 --> 00:39:42.320
Visual Basic program into REALbasic
for you and give you a starting point?

00:39:42.400 --> 00:39:43.990
Go like this.

00:39:44.050 --> 00:39:46.950
Oh, you guys did stay up
way too late last night.

00:39:50.010 --> 00:40:21.330
Visual Basic Project Convertor
can be done given the constraints

00:40:21.330 --> 00:40:22.450
that we just spoke about.

00:40:22.560 --> 00:40:25.220
If nothing else, in some cases,
things just load and work.

00:40:25.220 --> 00:40:27.760
And there's a trick to using
the project converter that

00:40:27.760 --> 00:40:29.270
will make it easier for you.

00:40:29.370 --> 00:40:31.910
In some cases,
it loads up in real basic and it won't

00:40:31.920 --> 00:40:34.680
work for 15 or 20 minutes while you,
oh, I got to this, oh, that's right,

00:40:34.730 --> 00:40:37.780
that should be an integer, you know,
and you got to do a little tweaking.

00:40:37.850 --> 00:40:39.100
But it brings it right over.

00:40:39.100 --> 00:40:40.970
It's not perfect, but you know what?

00:40:40.970 --> 00:40:42.760
It's a lot better than not having it.

00:40:42.760 --> 00:40:44.640
So we're going to talk
about exactly how it works.

00:40:44.640 --> 00:40:49.380
So before you use visual
basic project converter,

00:40:49.850 --> 00:40:51.540
you need to clean up your VB code.

00:40:51.540 --> 00:40:54.690
And this is where, like, how many people,
I don't know how many

00:40:54.690 --> 00:40:57.630
times I've done this,
but it's like, you know, especially newer

00:40:57.640 --> 00:40:59.890
VB developers got sloppy,
you know,

00:40:59.890 --> 00:41:03.880
using variants and using ampersand
instead of plus and not casting

00:41:03.880 --> 00:41:06.330
things and just generally being
sloppy and writing code that

00:41:06.330 --> 00:41:08.010
C programmers always laugh at us for.

00:41:08.220 --> 00:41:10.600
Well, it's, you know,
it's easy to be sloppy, as we said.

00:41:10.600 --> 00:41:14.120
If you didn't do that,
you're way ahead of the people who did.

00:41:14.120 --> 00:41:17.480
Because now, you're going to have to go
back and unslop your code.

00:41:17.510 --> 00:41:20.300
And, for example,
you want to get rid of ampersand

00:41:20.300 --> 00:41:22.200
for concatenation of strings.

00:41:22.200 --> 00:41:24.210
That's wrong in the first place.

00:41:24.220 --> 00:41:25.080
It's really slow.

00:41:25.080 --> 00:41:27.380
It's, you know, use plus.

00:41:27.380 --> 00:41:30.490
You want to get rid of all those,
you know, dollar signs and other

00:41:30.490 --> 00:41:31.400
things we talked about.

00:41:31.400 --> 00:41:33.970
You want to dimension all your variables,
hopefully on a single

00:41:33.970 --> 00:41:35.740
line for your own sanity.

00:41:35.740 --> 00:41:38.020
Dim X as string, dim Y as integer.

00:41:38.020 --> 00:41:39.480
That would be really good.

00:41:39.480 --> 00:41:44.080
Get rid of all your def X, def int,
def long, whatever you've been using,

00:41:44.080 --> 00:41:45.030
get rid of it.

00:41:45.140 --> 00:41:49.480
And just remember that whatever you
have cast as an integer in visual basic

00:41:49.630 --> 00:41:54.480
will become an integer in real basic,
but an integer in real

00:41:54.520 --> 00:41:57.730
basic is four bytes long,
not two bytes long like an

00:41:57.800 --> 00:41:59.000
integer in visual basic.

00:42:02.520 --> 00:42:04.610
Try to get out of using
currency and byte if you can,

00:42:04.690 --> 00:42:07.520
otherwise you're going to have to
work around them when you get it over.

00:42:07.520 --> 00:42:11.530
You can use the char-ascii
combination as a byte replacement,

00:42:11.530 --> 00:42:12.380
usually.

00:42:12.380 --> 00:42:15.310
You can do some manipulations
to be able to do that.

00:42:15.630 --> 00:42:17.080
Substitute double for currency.

00:42:17.080 --> 00:42:21.600
Okay, before anyone starts slinging,
I know there are rounding differences

00:42:21.700 --> 00:42:23.220
between doubles and currency.

00:42:23.240 --> 00:42:24.720
That's why currency is like it is.

00:42:24.760 --> 00:42:26.520
The REALbasic developers know that.

00:42:26.690 --> 00:42:30.330
In fact, about two or three months ago,
we had another session

00:42:30.520 --> 00:42:33.580
like this at RealWorld,
which is the REALbasic trade show.

00:42:33.580 --> 00:42:38.610
And, you know, with great detail,
several REALbasic developers very

00:42:38.610 --> 00:42:41.020
nicely articulated the issue.

00:42:41.020 --> 00:42:42.990
You know, they're going like this.

00:42:42.990 --> 00:42:43.400
It was funny.

00:42:43.400 --> 00:42:45.530
And so I know it's being worked on.

00:42:45.540 --> 00:42:46.650
Thank you.

00:42:47.670 --> 00:42:50.460
The error handling that you have in
your VB code is just going to go away.

00:42:50.480 --> 00:42:53.800
It's all going to become commented
by the Project Convertor.

00:42:53.800 --> 00:42:56.180
So you're going to have to
find it and fix it after that.

00:42:56.180 --> 00:42:59.780
So things to do beforehand,
get rid of go-to.

00:43:02.330 --> 00:43:06.040
I mean, you can use it, but, you know,
if you don't need to, don't.

00:43:06.090 --> 00:43:08.440
I mean, you can still use it,
but you can't say go to a line number.

00:43:08.440 --> 00:43:09.440
You can go to a label.

00:43:09.440 --> 00:43:12.940
Move things from forms into modules.

00:43:12.940 --> 00:43:15.760
Bust up your code, if you can,
into chunks of related function,

00:43:15.760 --> 00:43:16.480
if you have.

00:43:16.480 --> 00:43:19.070
And if you've got the all-singing,
all-dancing VB Form app, you know,

00:43:19.070 --> 00:43:21.300
you must have seen them if
you've been around long enough.

00:43:21.380 --> 00:43:23.690
It's like, you know, Form 1,
and it's 6 megabytes big.

00:43:23.690 --> 00:43:26.100
It takes forever to load,
and it's just everything.

00:43:26.100 --> 00:43:26.970
Try to break it up.

00:43:27.380 --> 00:43:29.730
There's no such a thing
as Go Sub in REALbasic,

00:43:29.810 --> 00:43:32.200
so functions and methods and
logic are going to be required.

00:43:32.300 --> 00:43:38.200
And REALbasic does have the database
engine and has SQL capabilities.

00:43:38.200 --> 00:43:40.790
It's different than the
sort of Microsoft model,

00:43:40.790 --> 00:43:44.660
you know, the ADO control model
that Visual Basic has,

00:43:44.760 --> 00:43:47.190
but the SQL logic will
largely be compatible.

00:43:47.200 --> 00:43:49.130
You know, select star from whoever.

00:43:49.380 --> 00:43:51.200
Things like that will work fine.

00:43:51.200 --> 00:43:53.200
So what was the experience using it?

00:43:53.200 --> 00:43:56.070
Well, it always creates a project.

00:43:56.370 --> 00:43:59.710
Now, REALbasic doesn't have
individual modules,

00:43:59.820 --> 00:44:01.200
as we already said.

00:44:01.200 --> 00:44:02.130
I mean, they do logically.

00:44:02.410 --> 00:44:06.030
But when you save it on disk,
it's one big file, whether it's XML or

00:44:06.210 --> 00:44:07.760
it's a binary project.

00:44:07.830 --> 00:44:12.680
So if I just bring over one module of
Visual Basic code that I want to port,

00:44:12.680 --> 00:44:15.300
it'll port it,
and it'll create a REALbasic

00:44:15.300 --> 00:44:16.800
project with an application object.

00:44:16.800 --> 00:44:19.790
It'll have a default window in it,
and it'll have my module.

00:44:19.800 --> 00:44:24.300
So you're going to have to take that and
then save that module out on the side.

00:44:24.300 --> 00:44:26.710
That's not that hard to do.

00:44:26.960 --> 00:44:28.270
Some things are going to be problems.

00:44:28.280 --> 00:44:31.850
Like when I was doing some conversions,
I had a variable in one of

00:44:31.850 --> 00:44:34.620
my programs called graphics.

00:44:34.620 --> 00:44:35.900
Actually, it was a class, I think.

00:44:35.960 --> 00:44:38.690
So I had whatever,
I was using the word graphics.

00:44:38.800 --> 00:44:42.180
Well, graphics is a reserved keyword in
Real Basic because they actually have

00:44:42.290 --> 00:44:45.860
a paint event where you get a graphics
handle that you have to use APIs for.

00:44:45.860 --> 00:44:49.430
And Visual Basic actually just happens
by default as an argument passed to

00:44:49.430 --> 00:44:51.340
the paint event of an object or a form.

00:44:51.340 --> 00:44:52.520
It's like, oh, here's a graphics object.

00:44:52.520 --> 00:44:55.480
And that's a graphics dot
this or graphics dot that.

00:44:55.600 --> 00:44:58.410
So that keyword is, you know,
they've got to worry about those things.

00:44:58.420 --> 00:45:02.920
So my advice,
use the VB project converter

00:45:02.920 --> 00:45:04.680
to convert one file at a time.

00:45:04.680 --> 00:45:07.880
After you've converted a file,
export it or make what

00:45:07.880 --> 00:45:11.260
Real Basic calls make external,
which is how you can have external files

00:45:11.260 --> 00:45:13.020
and how you share files between projects.

00:45:13.020 --> 00:45:13.900
Make it external.

00:45:13.900 --> 00:45:16.140
And then debug or port that code.

00:45:16.140 --> 00:45:19.400
This gets back to busting my code up
into modules and things I can exercise.

00:45:19.400 --> 00:45:21.710
And, you know...

00:45:23.220 --> 00:45:24.740
Just do it again and
again until you're done.

00:45:24.740 --> 00:45:26.810
It's called programming.

00:45:26.810 --> 00:45:29.560
In the end, you can do it.

00:45:29.560 --> 00:45:30.570
It works.

00:45:30.570 --> 00:45:31.950
I'm living proof of that.

00:45:32.030 --> 00:45:37.600
And just remember that
REALbasic is object-oriented.

00:45:37.600 --> 00:45:41.700
It's, in my opinion,
a better language than Visual Basic.

00:45:41.700 --> 00:45:42.560
And why do I say better?

00:45:42.560 --> 00:45:46.360
Because it made me get cleaner
about the code I would write.

00:45:46.390 --> 00:45:48.630
And I'm just, I'm programmed now.

00:45:48.640 --> 00:45:51.710
You know, I'm like, my lightsaber shines
green instead of red.

00:45:51.720 --> 00:45:52.720
You know, I'm over to the dark side.

00:45:53.140 --> 00:45:55.410
So, you know,
I find myself dimming everything,

00:45:55.410 --> 00:45:57.870
and everything's a class, and I'm just,
you know, I just,

00:45:58.010 --> 00:46:00.020
this whole object-oriented
thing has taken me over.

00:46:00.020 --> 00:46:00.520
It's cool.

00:46:00.520 --> 00:46:01.040
I like it.

00:46:01.190 --> 00:46:03.380
At my age,
you don't learn new things very often.

00:46:03.380 --> 00:46:05.780
So, again, you can read as well as I can.

00:46:05.780 --> 00:46:08.150
I've talked about most of these things.

00:46:08.150 --> 00:46:09.770
Import one piece at a time.

00:46:09.770 --> 00:46:10.980
Test as you import.

00:46:10.980 --> 00:46:13.360
Build them up as external pieces.

00:46:13.360 --> 00:46:17.720
And now you've really moved your
Visual Basic code into a stage where you

00:46:17.720 --> 00:46:22.120
can compile for any platform you want,
not the least of which is OS X.

00:46:22.120 --> 00:46:22.190
Thank you.

00:46:23.140 --> 00:46:24.790
And of course,

00:46:25.700 --> 00:46:31.700
[Transcript missing]

00:46:37.650 --> 00:46:40.440
I thought it might be nice to talk
about a couple marketing opportunities.

00:46:40.440 --> 00:46:43.580
After you've done the work that
Hank outlined for you and you

00:46:43.580 --> 00:46:46.580
have a publicly available app,
whether it's commercially

00:46:46.580 --> 00:46:48.700
available or freeware,
shareware application,

00:46:48.700 --> 00:46:50.920
you might want to get
the word out about that,

00:46:51.170 --> 00:46:53.480
having taken the time to
come to a new platform.

00:46:53.480 --> 00:46:57.590
So here's a couple free marketing
opportunities that are available for you.

00:46:57.600 --> 00:46:59.880
The first is the Real Basic Showcase.

00:46:59.880 --> 00:47:03.470
So the folks at Real Software have
put together a part of their website,

00:47:03.480 --> 00:47:07.050
realbasic.com slash showcase,
and you can go there and

00:47:07.050 --> 00:47:08.340
list your application.

00:47:08.340 --> 00:47:11.690
And one way for customers
to find out about it.

00:47:11.770 --> 00:47:14.840
The other is the
Macintosh Products Guide.

00:47:14.840 --> 00:47:16.900
So there's a shot of it there.

00:47:16.900 --> 00:47:21.120
There are 25,000 products in
the Macintosh Products Guide.

00:47:21.120 --> 00:47:23.700
You can list your product for free,
and there are also pay

00:47:23.700 --> 00:47:26.880
opportunities to get some of these
larger ads that you see there.

00:47:26.880 --> 00:47:29.020
And that's at guide.apple.com.

00:47:29.020 --> 00:47:33.240
And that is very much the
storehouse of record for all the

00:47:33.250 --> 00:47:35.960
products available for Mac OS X.

00:47:35.960 --> 00:47:38.570
And I would encourage you, again,
if you have a publicly

00:47:38.570 --> 00:47:41.240
available application,
to list them in these

00:47:41.300 --> 00:47:43.020
two different areas.

00:47:43.020 --> 00:47:45.480
Take advantage of these free
co-marketing opportunities.

00:47:47.890 --> 00:47:50.720
For more information,
you're welcome to contact myself,

00:47:50.720 --> 00:47:52.760
Tyler Stone, Developer Relations.

00:47:52.760 --> 00:47:55.600
You can see here Hank's
email address up there,

00:47:55.600 --> 00:47:58.160
which is hank at slayfire.com.

00:47:58.160 --> 00:48:00.860
And you can also contact
the folks at Real Software.

00:48:00.860 --> 00:48:03.250
Matt Qualiana has
volunteered his address,

00:48:03.250 --> 00:48:06.150
matt at realsoftware.com,
if you want more information

00:48:06.150 --> 00:48:07.680
about the REALbasic tool itself.

00:48:07.720 --> 00:48:10.340
We're doing pretty good on time here.

00:48:10.340 --> 00:48:14.050
Let's run through these
resource libraries.

00:48:14.120 --> 00:48:16.880
I'm sorry,
so we have some resources available for

00:48:17.230 --> 00:48:20.620
developer tools over at slayfire.com.

00:48:20.620 --> 00:48:24.740
There's actually a good comparison
of different IDEs out there

00:48:24.760 --> 00:48:27.320
at Codefu at the Rosetta site.

00:48:27.370 --> 00:48:30.180
And go to the Real Software site
if you want to see kind of

00:48:30.180 --> 00:48:33.610
a point-by-point comparison,
REALbasic to Visual Basic from

00:48:33.630 --> 00:48:35.110
a feature point of view.