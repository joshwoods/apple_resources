---
Title:  QuickTime in the Enterprise
Year:   2004
Web:    https://nonstrict.eu/wwdcindex/wwdc2004/727/

[!] This transcript was generated using Whisper, it has known transcription errors.
---

Okay, good morning and welcome to 7:27 QuickTime in the Enterprise. This is going to be a really good session because we have two great speakers, one from the American Electric Power Company and another gentleman from the University of Wisconsin who are really using QuickTime in a very large-scale deployment.

The guys from American Electric Power are doing a lot of webcasting and have built a lot of custom applications to deploy QuickTime streaming services in their corporate environment. And the University of Wisconsin has actually converted their cable TV system to XServe and QuickTime streaming. So you guys are going to get a very good idea as to how you can deploy QuickTime in a more enterprise-like environment. So without further ado, I'd like to introduce Nate Caplin from American Electric Power who's going to kick things off for us. Nate Caplin, Thank you, Stephen.

Hello, everyone. I'm Nate Caplin, streaming media manager at American Electric Power in Columbus, Ohio. The focus of my presentation will be on how we've used QuickTime for corporate communications, both internally and externally. I'll cover some background about how streaming media evolved at AEP, followed by some case studies and opinions.

Some of the issues around using QuickTime in the Enterprise include corporate IT departments' common distrust of non-Microsoft solutions, deploying QuickTime Player to thousands of PCs, video asset management, how to leverage live webcasting, and optimizing production workflow. There are also many opportunities for Apple and its developers, I think, to improve QuickTime to make it more attractive to Enterprise customers like ourselves, and I'll address several of those.

I hope you'll take away from this presentation a lot of useful info, including some benefits of using QuickTime versus Windows Media that you can use if you're trying to convince a corporate IT department or university to do so, strategies for distributing QuickTime Player as painlessly as possible in the Enterprise, ideas for building a repository of QuickTime content, best practices for a webcasting studio, how live webcasts can be an effective communication medium for employees or students, and what opportunities exist for developers to make products that would sell better to Enterprise customers.

Here are some of the products that I plan to cover. In addition, I'll be touching on third-party live webcasting apps like Live Channel, Wirecast, and Cleaner Live. I'll also focus a good deal of time on AEPTV, which is a custom video portal we designed to manage our QuickTime content.

So before I dive into the details on how we use QuickTime, let me tell you a little bit about who we are. American Electric Power is a utility based in Columbus, Ohio. We are the largest power generator in the U.S. with 5 million customers and 11 state service territory. We have over 20,000 employees working in almost 500 different work locations, which begins to explain why internal communications is a big challenge for us.

We've had a corporate video department for almost 20 years, and we've been using streaming media for over five years. I'd like to show you a quick video now to demonstrate some of the work we do and to tell you a little more about AEP. It's just a little under two minutes.

AEP has been through some very dramatic changes in the past few years. Industry restructuring, competition, the California energy crisis, and the new wholesale energy markets have changed the face of the energy business. AEP is not the same company we were only a few years ago. We're still one of the largest, lowest cost, and most reliable electricity providers. But we've also become a leading wholesale energy company.

AEP operates more than 80 power plants with a capacity of 38,000 megawatts, making us America's largest power generator. This power is generated from coal, gas, nuclear, hydro, and wind, assuring a balanced mix of fuel sources. AEP also operates one of the largest power systems in the world, with a world-class transmission and distribution system stretching through 11 states.

This system serves more than 4.5 million customers, providing reliable energy at a cost below the national average. A few years ago, who could have predicted AEP would become one of the top wholesale energy companies in the country? Right now, we're number two, and on our way to becoming number one. And with our combination of strong regulated and unregulated businesses, AEP is clearly poised for long-term growth. This isn't... I'm going to get out of this right now. I think you've seen enough. That's our CEO. If we can go back to slides, please.

The interactive media group that I work in has about 16 people, and we're responsible for the company's websites, both internal and external, all of its print materials, as well as over 200 video projects per year. From training and safety videos, to ethics, legal, and environmental compliance, to live town hall webcasts. Which brings me to why we use QuickTime.

First and foremost, QuickTime is the glue that ties together our entire production workflow, from acquisition to editing to delivery. Aside from the obvious use of QuickTime in our video production workflow, other Apple technologies have influenced our decision to use QuickTime, especially the server platform. We found XServe and XServe RAID to be superior in functionality to our PC servers, both as departmental file server or as an enterprise streaming media server. They cost less, especially when you consider the cost of Windows 2003 enterprise server licenses. They're easier to set up and manage, and aren't as expensive as the Windows 2003 enterprise server licenses.

They're also less susceptible to virus and security intrusions, which are all good selling points for our corporate IT folks. QuickTime Player is a simple, elegant player with advanced features like instant on streaming that Windows Media lacks, at least Windows Media players that work on our large installed base of Windows NT computers. That last point is really important. We've used Windows Media also for years, and one of its worst problems is the tangle of different versions of Windows Media players required for different versions of Windows.

That fact has held us back from using most of the newer features of Windows Media Player 9, because it requires Windows 2000. It won't work on Windows 98, for example. It also requires Windows 2003 server, which our corporate IT department has not yet qualified for use in our enterprise.

So now that you understand who we are and why we decided to use QuickTime, I'm going to start by explaining some of what we had to do to deploy QuickTime. The first step is obviously distributing the QuickTime player. That may sound simple, but there are several challenges unique in a corporate IT environment. First, we had to obtain a site license, which allows us to distribute QuickTime player to our own users, because our IT security department doesn't want users downloading and installing software on their own machines. Many of them don't even have access to the public internet.

Next, our IT lab installed and tested QuickTime Player on all of our existing Windows platforms, which took several weeks. In the process, they determined the default settings they wanted, including turning off features like auto-update and the Hot Pics movie. The next step normally would be to update disk images for new PC installs, but unfortunately we haven't gotten that far yet at AEP.

Doing so is a very costly and political process that involves Dell Computer as well. So instead, we've built a custom installer using LANDESK, a management tool that our help desk people use. It allows us to push QuickTime out to a user's PC without having them go through all the prompts that are part of the normal QuickTime installation process, and it sets the preferences that we want.

Then, as part of our video portal site, which I'll talk about in a minute, we use BrowserHawk, a server-side utility for detecting users' configurations, to detect whether a user has the right version of QuickTime installed. The next step is to use the QuickTime installer to install QuickTime on your PC. This is a very simple and practical process. The user can use the QuickTime installer to install QuickTime on their PC, and then use the QuickTime installer to install QuickTime on their PC. And if they don't, prompt them to install it.

Finally, we've begun to promote QuickTime by making certain content available in enhanced versions in QuickTime only or QuickTime first. As I'll talk about later, over the next several months, we'll be deploying the next version of our AEP TV interface, which, among other things, goes to a single launch button that allows us to determine what format to give people.

That brings me to AEP TV, our video portal for employees. A subset of our AEP Now intranet, AEP TV is a combination web-based video library and live webcasting portal where employees can browse a continuously updated library of over 200 videos by category or search by keyword. That brings us to the demo.

I'll be doing this over the corporate VPN, so let's pray to the demo gods that this all works. I'm going to start in our corporate intranet, AEPnow. This is basically a central portal, the default home page of all AEP employees. It's basically a news site updated with company news as well as links to other common tasks like time reporting and expense reporting and HR and all of that good stuff.

AEPTV is integrated into the AEPnow portal in a few ways. There are promotions here to current content that we're doing as well as a link under the tools and resources or useful sites. I forget where they put it. But also any news story that has a related video has a video icon next to it.

When you go to that news story, there's a sidebar for AEPTV that highlights any related videos and it can do one or more. So for example, if I click this link, it's going to pop up the AEPTV interface and take you right to the chooser page for that video. The chooser page contains a full description of the video, title, duration, as well as a choice of formats and sizes.

We started out with this site almost two years ago, and Windows Media is the kind of top-level default choice, but we've added QuickTime to it and plan to switch exclusively to QuickTime over the rest of this year. If you click small QuickTime, for example, it pops up a small playback window, and demo God's willing, it should play. Looks like they're not. Let's try the other one.

that's too bad. It's not going to play. But I'll take you through the rest of the interface. If you go to the home page, there's areas for three features, first, secondary and third feature where we promote current content as well as upcoming webcasts. There's pull down menus at the top for the video library which are broken out by category. And so for example, we can go into new commercials, into the safety ads and see if by any chance another video might play.

It is. My dad's so smart. He can fix anything. He can fix leasing, my bike, anything. He's the best. My dad knows how to be safe around electricity, too. So, you get the idea there. There's also an A to Z index, which lists all the videos currently visible on the site. And there's a search function. So, for example, if I type in, oh, how about chainsaw? Chainsaw safety. Chainsaw safety video.

There's also a feature to sign up where users can give us their email address and we'll notify them about new videos. There is a help section, of course. Feedback allows people to give us their opinion about what they've seen on the site. This would be for general feedback, but, for example, if you are on a particular video, And you click the feedback button. The feedback is specific to that video, and it comes to us by email, and it gets logged in a database.

Live webcasts are kept in here, so you can see a list of upcoming live webcasts. If you go to a live webcast page, since this webcast is not scheduled to actually start until July 21st, of course you can't click on the formats to launch up the videos yet, but you can submit a question right now. And these questions get submitted to a web-based administration form that our folks can monitor while they're actually doing the live webcast. So quickly I want to show you the back end of this. We have a website called AAPTVadmin.com.

Which has as part of it, the main section is the clip archive. And this is where we can see all of the videos that are actually entered into the site at the moment. It takes a moment to load because there are so many now. There we go. As you can see, there's something like 300-some-odd videos in here, and we have little boxes that explain, you know, which formats they're available in, and the red and the green means whether they're actually visible in the menuing interface right now. So we can post a video to the site, which isn't yet visible to every employee.

As an example, it can be a for-approval version. Then we can send a simple URL link that will call it up in the interface. It's also a way to post a video that's only supposed to be seen by a small group of employees who will get a link via email. All right. If we can go back to slides, please.

All right, so that's AAP TV as it is today. We've begun working on version 2.0. Some of the new features include a single launch button, that there, instead of the chooser page that you saw before. Using BrowserHawk will determine what connection speed the user can sustain and feed them the largest version possible. This will allow us to decide if and when to push QuickTime Player, which could be by way of posting a popular video in the future. In QuickTime format only, because that would force this to default to QuickTime and force people to install it to watch the video.

Other new features include the ability for users to download the video file to their PC. If you look at these links on the bottom, there's a download video button that would actually download the QuickTime file to their desktop. We've had a lot of requests for this lately because people want to present a larger version of the video than their connection speed would prevent them to watch in real time, and they want to do it maybe when they're not connected to the network in front of a group of people, like a presentation like this. The other option is to email a video, which we're going to be adding. It'll actually just email a link with their comments to friends or coworkers.

So that's AAP TV. What about our QuickTime workflow? Quite simply, QuickTime and increasingly other Apple products touch every part of it. Our four producer editors shoot everything on Sony DVCam. Each one of them has a PowerBook and a dedicated video edit suite with a PowerMac G5. Video capture is always by FireWire into either Final Cut Pro or Avid Express Pro.

While all of them can use Final Cut, two of them are still more comfortable with the Avid interface, and so that's what they use. Recently, all of them have begun using SoundTrack and LiveType, even the Avid guys, in addition to After Effects and Pro Tools. And they're all very excited about motion, so we're looking forward to that, guys.

Once videos are edited, a QuickTime DV master file is exported and saved on our XServe RAID. We also make and store a DV tape in our library, but having the master files always online makes encoding and reuse much easier later on. I then encode the video files using Cleaner into versions that are more appropriate for the web.

The encoded files are then copied up to our two QuickTime streaming servers, and AAPTV admin is updated to add the clip. People watch the video, and when they request DVD copies, we use DVD Studio Pro to make a master disc and a duplicator to burn and print copies. And we fill those requests every Monday.

All right, webcasting studio. Since we produce over 200 videos a year, having a studio is a no-brainer. What makes a video studio a webcasting studio is the addition of some gear and some attention paid to audience interaction and visuals that don't break up badly when they're reduced in size and compressed for streaming. You don't necessarily need a big space, but it needs to be quite well lit, and it needs to be quiet. At AEP, we have a broadcast-grade studio with four cameras, an isolated control room, audio board, video switcher, and a TV.

DecoTitler, The Works. We added the streaming media station to the control room for live webcasts. It receives the program video and audio feeds and converts those to DV over FireWire, distributing it to multiple video encoders. From there, I can monitor the encoders as well as remotely monitor the servers up on the 19th floor.

We also have another booth connected to the control room for an audience interaction manager. This person screens calls to our on-air phone system and enters information into that system's software that the on-air moderator sees on a laptop that's on the set. The audience interaction manager also screens the questions submitted online from AEPTV using a web-based tool that links to the questions database. The on-air moderator sees that on his laptop, too. While we use a Sony broadcast video switcher in our studio, a portable switcher like the excellent DataVideo SE800 is great for doing a live webcast from the field.

It lets us use up to four DV camcorders connected to it with 165-foot-long FireWire cables. And it outputs a mixed program in DV over FireWire directly to our field encoder, which is just a laptop running live encoding software. For QuickTime live encoding software, there are a few choices now. From Apple's free QuickTime 6 Broadcast to Live Channel Pro and Wirecast, which both cost under $1,000. I'll go more into depth into encoding software in just a little while.

[Transcript missing]

It also saves him and his top lieutenants considerable time traveling around to give the same speech over and over again and answer the same questions. But, although QuickTime has served us pretty well so far, it could do a lot more to appeal to the needs of Enterprise customers.

For example, QTSS Publisher is a very neat 1.0 product. When I first saw it, I was excited at the prospect of easily managing our growing library, but it really needs a better user interface that doesn't break down when throwing dozens or hundreds of files at it at once.

It also needs to be more flexible in where it allows media to be stored on the system, and it could benefit from reporting capabilities. For example, wouldn't it be nice if you could access QTSS logs to show and chart viewer statistics? Also, we run two QuickTime streaming servers in tandem for load balancing, and we can't find any way to easily duplicate a QTSS Publisher library from one server to another.

QuickTime Streaming Server is much better in Panther Server, and I applaud Apple for building a better management tool. We could really use a true multi-bitrate solution, though, that detects users' bandwidth and switches streams on the fly. Our BrowserHawk solution is an imperfect workaround that took considerable effort to develop. We would also like to see built-in support for clustering and failover with two servers sharing the load, but with either able to take over for the other in case of failure, even during a live webcast.

We love QuickTime Player, but it was a long, tough process to get all of our ducks in a row to distribute it. Of all the things, the NAG movie caused a lot of arguments with our IT folks, who were afraid that users would be confused and go out and purchase QuickTime Pro, or at least flood the help desk with questions about what that pop-up box means. Also, while we were able to convince our IT department to develop a custom installer, it almost didn't happen. Apple should have a free, customizable Enterprise QuickTime installer, just like Real and Windows Media do.

Compressor is a great new product, but we still aren't using it for anything but DVDs, because it can't do Sorenson 2-pass variable bitrate encoding. Perhaps this point will become moot when H.264 ships. Finally, QuickTime Broadcaster could really use an update to add support for multiple streams, higher quality encoding at larger sizes that universities and enterprises can support on their high-speed networks. A real preview and integration with Keynote for broadcasting slide presentations in separate web browser window or frame next to a live webcast. It would seem only natural that Apple could do this.

Lately at least, Apple has gotten most of the really important stuff right for the Enterprise. XServe and XServe RAID are just beautiful products. We love them. They make our IT guys jealous, which I love. All I can say is keep up the good work. Panther Server was a welcome improvement and has been rock solid for us. I'm anxious to learn more about what Tiger Server brings to the table.

XSAN. Wow. I've been waiting for this for years. We've had a fiber channel SAN among our video edit suites before, based on ADDO Excelware, but it never really worked reliably and we finally had to just throw it out. I suspect XSAN will sell very well. I, for one, plan to put in an order for one next year.

XGrid seems like a great opportunity for distributed batch video encoding. I hope Apple, Sorenson, and Discrete consider updating Compressor, Squeeze, and Cleaner to exploit that. With about 30 modern Macs in our workgroup, including three XSERVs and about half a dozen Power Mac G5s, maybe my batches can finally complete in less than a day. On the topic of H.264, this is really going to improve the quality of the experience we can give to our users, but it won't matter unless it plays back on a free Windows version of the QuickTime player.

I hope Apple does not make the mistake Microsoft did by trying to make new features in Windows media tied to the operating system in an effort to sell that OS. If it does, we might have to abandon QuickTime someday because all of our viewers are on Windows. Finally, I'm really excited to announce that the new Windows OS is coming to the market. I'm really excited to announce that the new Windows OS is coming to the market.

I'm really excited about the Squeeze 4 from Sorenson, which is officially in beta as of this week. It's the first all-new third-party QuickTime encoding solution for Mac in several years, and it's exactly what Discrete could have done with Cleaner if they'd only listened to users about the interface.

Live encoding is still one Achilles' heel for QuickTime right now. We really need a pro webcasting application. There are only a few players out there with any QuickTime live—there are only a few players out there in the QuickTime live webcasting market. I've already talked about QuickTime Broadcaster. Then there's Live Channel, which tries too hard to be a studio in the box with a busy interface chock full of stuff I don't need, because we already have a studio.

And the main problem, though, is it doesn't do multiple streams. Wirecast is a new product from Vera Software that looks really promising. It does do multiple live streams, which is great. But like QT Broadcaster, its UI is very basic and it lacks PowerPoint or Keynote integration. And although it does do multiple streams, they're completely independent. So if you use any of its video switching features, you can't synchronize those actions among the different streams.

CastStream isn't really an encoder at all, just a presentation system for live webcasts. Regardless, though, it's not practical for us since it requires a proprietary player and server and has expensive licensing fees for as many simultaneous users as we need. Other products and services from Verage and Yahoo Broadcast that try to appeal to enterprise clients like us are too ambitious and aggressive in scope and cost hundreds of thousands of dollars. Plus, they require extensive customization once you buy them. They assume we want to just write a big check and have someone else handle the whole production.

That brings us to what we've been using these last couple years: Discrete Cleaner Live. In most respects, it's the perfect live webcasting app, but it has a couple of major problems that limit its future usability for us. It only does Windows Media and Reel, and Discrete has discontinued it.

Regardless, though, it still serves us well. I'd like to show you a few screenshots in hopes that if any of you watching are developers working on a QuickTime webcasting app, you take note of why it's so appealing. Just look at this UI. At a glance, you can see that the status and flow of video and audio data into encoded output. It's almost pretty enough to have been designed by Apple. There are audio level controls and view meters, and there are video level adjustments that can be made in real time during a live webcast, which are right there.

It shows an accurate preview in a floating window of any of the encoded outputs or the original signal before and after preprocessing, and you can switch that view during a live webcast. Broadcasting and recording can be turned on and off independently, and it can even record to disk the DV stream that comes in over FireWire in addition to the encoded outputs. It can simultaneously encode multiple separate Windows Media streams at anything from 240x180 dial-up to 1Mbps, 480x360 full frame rate versions for streaming over LAN. It does this entirely in software with video input over FireWire, even on a laptop.

It also has PowerPoint integration. It can load a PowerPoint presentation, then generate PNG files of each slide, FTP those up to a web server, and build a web template for presenting the video and slides side by side. Then during the live webcast, it monitors what slide a user is viewing in a PowerPoint session on a remote PC, and sends script-track commands in the live stream to flip the slides on viewers' screens. Ironically, it even works for viewers on Macs using Windows Media Player for Mac.

Even its settings window is a work of simplicity for managing multiple live outputs. It would seem to me that if Discrete, with its limited resources dedicated to this project, could put this product together almost two years ago, Apple or one of its third-party developers should be able to leverage QuickTime and a G5 to do even better on the Mac. For us, at least, this is really the last piece of the puzzle. As I understand, we're supposed to wait until the end for questions and answers, so I'll turn it over now to the next presenter. Here we go. Dave?

Well, thanks for coming out, everyone. My name is Dave Schroeder. I'm a Mac geek at the University of Wisconsin. That's a really fun job. And what I'm going to talk about today is—let's see here. I'm going to talk about an IP video delivery solution that we have recently put together at the university. We're currently in a pilot phase.

What we wanted to do was replace an existing actual cable TV physical plant infrastructure that we operated for many years with something that would deliver this over the network. When we started off on this path, we looked at a bunch of solutions from many different vendors, and we ended up settling on a solution based on QuickTime technologies and Apple hardware products.

So I'm going to talk a little bit about the decisions that went into us actually getting to this point and how we actually put the system together. And right now, like I say, we're just in pilot. We would like to expand what we talk about here today and the exact hardware, software, and techniques that we use to put this thing together. Um... What we call our system that we've built is the Digital Academic Television Network, or Dayton for short.

We are deploying this alongside a new network that we're deploying on the campus over the next few years. And since these things go hand in hand, it's interesting to look at a little bit of the history of where we have come over the past couple of decades, what brought us to this point.

So the roots of Dayton are in our old TV network that we operated called the Academic Television Network, or ATN. And where this came from was actually from an earlier predecessor that was a computer network. So in 1980, when I guess I was like six or seven years old, our organization's predecessor, the Madison Academic Computing Center, was operating a UNIVAC, and people were starting to want remote terminal access to this computer.

And when the university started looking at ways to get remote terminal access to people, we realized that using copper cables would actually fill up all the conduit space available in the building by many times over, and we knew we had to look at other solutions. So we put together a broadband data transmission system that is similar to what is used for computer networks. And we have a new technology for cable television today called SciTech LocalNet.

And because it was so similar to, you know, physically to what was required to do video distribution, it didn't take long for departments on campus to start asking to be able to deliver video over this system. And we did just that. And a couple years later, we switched to Ethernet over this broadband network using cable modems, which are ancestors to the modern cable modems that people use today in their homes.

And then we jump ahead about a decade. On the video side of things, we knew that we needed to deploy cable TV into our dormitories to be able to have that be one of the things that attracts students to live in the university-operated housing. So we actually embarked on a project where we wired all of our dorms with normal coaxial cable and called it the Residential Television Network.

The original network that we operated was the Academic Television Network. And this was available to all the dorms, and we contracted with the local cable operator to provide all these channels, all of the local cable channels, non-premium channels to the dorms. Now I should mention about the Academic Television Network.

It is something that was used for instructional content. Departments were allowed to put whatever they wanted on it. So we gave channels to people like the College of Engineering, our School of Nursing, and they'd maybe have a, there was some experimentation with doing courses over this network. So people could go to remote locations and actually attend a lecture or watch pre-existing instructional content that some departments would put together and then loop on particular channels or play at predefined times. So really a lot of people had their own channels that they could do whatever they wanted to do with.

So we gave channels to people like the College of Engineering, our School of Nursing, and they'd maybe have a, there was some experimentation with doing courses over this network. So people could go to remote locations and actually attend a lecture or watch pre-existing instructional content that some departments would put together and then loop on particular channels or play at predefined times. whatever they wanted to do with.

When we did the RTN, we asked our local cable operator, which in our area is Charter Communications, formerly Bresnan, formerly TCI, and now we're at Charter. To allow us to put some selected channels on the academic television network. So we took channels like CNN, Headline News, C-Span, The Weather Channel, and some foreign language channels and things of that nature and put them on the academic television network. And this is important because this represents the basis of what we're able to do with Dayton today that you'll hear about in a minute.

So a couple of years ago, we started having trouble maintaining the ATN. It was tough to find replacements for some of the equipment. A lot of the equipment was becoming obsolete or had been obsolete for years. It was hard to find people with actual cable TV and video expertise to maintain the system, and it was hard to find people like that who wanted to crawl around in steam tunnels to repair the equipment as it broke. So the next item there is that the ATN was shut down. That's not strictly true. It was kind of shut down in phases as things failed and until it just stopped working completely. And we knew we wanted to replace the functionality of ATN with something else.

[Transcript missing]

So the reason why we started down this path to build a new network was because we realized that we had exponential traffic growth, but not exponential funding growth. If we let the traffic grow—and the University of Wisconsin has always had a philosophy of we're not going to limit traffic, we're not going to limit what people do with the network.

And so as things grew, we had to find ways to pay for it, and that was becoming increasingly difficult. And also another aspect is that the University of Wisconsin is a large campus. This is the Madison campus. We have almost 50,000 students. We have tens of thousands of employees, 30 major departments and units, and a lot of little departments, and a whole bunch of different lands that all have their own needs and desires and ways that they want to run their network, that sometimes don't cooperate with how we want to centrally administer the network. So the solutions that we came to are really eliminating a lot of the multiple transports that we used to maintain, like AppleTalk, IPX, and everything—converging everything to IP.

[Transcript missing]

We wanted to be able to show the campus killer applications for why they would want to move over to this network. And we think that Dayton video delivery over the network is one of them. So when we decided to start building Dayton, we

[Transcript missing]

That kind of plays into the next thing—flexible content delivery. We want to be able to reach the widest variety of clients possible.

We don't want to be tied into clients or platforms that have just, you know, whatever the particular player that's required available. We want to be able to play to other things, not just computers, too, possibly, you know, set-top boxes and other devices on the client end. And cost was a concern for us.

Initially, we have a relatively small pilot, but we wanted to obviously keep the cost down, and the XServe that we use to do the broadcasting is a lot less expensive than some competitive products. And one other thing that we can do easily, albeit with a little modification, is multiple streams with a single server—multiple different streams with a single server that isn't as easy as it is, or sometimes even more difficult. And then the software—well, this was a no-brainer. QuickTime Player, free for Mac OS and Windows. QuickTime Broadcaster, free. QuickTime Streaming Server, essentially free, because we do all of our streaming with XServes, comes with OS X Server, which comes with QuickTime Streaming Server.

[Transcript missing]

And then on the software side of things, of course, OS X server, Broadcaster, QuickTime streaming server, and on the client end, of course, QuickTime Player, available on Mac OS and Windows, but then open source players like VLC, which people can use on Mac OS and Windows, but also other platforms.

Linux, BOS, Solaris, pretty much anything you can think of, or any MPEG-4 compliant device, like MPEG-4, like set-top boxes that might have the capability to play back MPEG-4 content. So someone might be able to have this paired up with a television set or a projector and doesn't necessarily have to have strictly a computer to view these broadcasts.

So here's a typical node for Dayton. The head node is just kind of by itself, and you can see it's a picture of an XServe G5 there. It will be a G5 soon. It's currently a G4. And then our streaming nodes. We've got the cluster node itself, and the tuner is connected to video and audio to our little AV firewire converter, and then that's just connected by a single firewire cable to the XServe. And then we have this closed captioning decoder that is connected by another composite video cable to the Canopus, and then via a serial cable to the XServe. So we actually use the serial port on the XServe instead of for management.

We actually just use it as a normal serial port. We've disabled the console capability in one of the configuration files on OS X server and just let it act as a straight serial port. And then in some of the servers, we've started experimenting also with the Alchemy TV card from Miglia. So without the Alchemy TV card, we can do one channel with closed captioning in 2U of rack space.

If we don't talk about closed captioning, we've actually found that we can do three simultaneous broadcasts from one server in 1U of rack space using these tuner cards. Now in the XServe G5, there's only two PCI slots, and we're already doing that now. So we're back down to two unless we want to do something with firewire. And we think that two is probably a good number anyway. So we're figuring on being able to do two channels in 1U of rack space, and we're already doing that now.

So, what does Dayton actually look like? And so here's our pilot system right now. You can see that we've got a bunch of XSERV cluster nodes and interspersed in between each XSERV cluster node is our tuner. And the reason why we've done that is the tuners are really not that deep. They're only a couple inches deep and the XSERVs are however deep they are and so that kind of leaves this little shelf of space in between each XSERV that we can stick the other equipment in.

So it ends up being a really nice clean installation and really easy to set up just with the management capabilities of OS X Server and doing things like cloning drives that are just, you know, really straightforward on OS X. All we really did was set up the system on one cluster node of how we wanted everything to be configured and then we just kind of blasted that out to the rest of the machines and we actually even had all the servers running for a while. It was net booted from the head node.

I didn't really see any advantage of keeping doing just the net booting since it was so easy, since it was like just minutes to clone a drive and pop it into a new machine so then we could eliminate one other kind of point of failure and this is it.

This is what our web front end looks like. We wanted people running whatever OS they were running to be able to hit this site. So this is actually our channels page, and we just have all of our channel logos of what we're carrying right now. And now might be a good time to stop here and talk for a second. I've had a couple people ask me, why are you doing TV channels? Who cares if someone can watch CBS on their desktop? Especially if you're already delivering cable TV to your dorms and to university buildings using just ordinary cable network.

Well, this isn't just—we don't envision this just being for doing cable TV channels. We did cable TV channels first because they were the easiest. We already had an agreement with our cable operator. It was easy to get the content. It's just content. And it's something that people can identify with.

People know TV, and when they see it come up, they're like, oh, yeah, I know what it is. And so we put them up in a little window on their computer, and when we explained to them that these types of things that you're doing now that seem relatively simple just weren't possible on our network before.

We're a very large campus, and we don't think that it would have been practical or possible to deploy something like this to this number of people without some of the new technologies that the new network gives us. Not only the higher bandwidth that we get, but doing everything with the same technology. So, as the previous presenter was referring to, this multicast capability is really key.

For those of you in here who might not be familiar with what this multicast means, what it essentially means is when everyone—let's say someone decides they want to view CNN, and they click on the CNN logo, and it comes up on their screen. On a unicast network, which is really just what most networks ordinarily are, they're going to be able to view CNN.

Every single person who clicks on CNN, that's another stream going out from the server. It's more load on the server, and it's more load on the pipe leading to the server. Every single additional connection takes more bandwidth and has more load on the server. With multicast, there is one stream coming out of the server. And that signal has the capacity to get anywhere on the network that multicast is enabled.

Other computers out on the network, out on network segments that aren't viewing any broadcasts, don't have to see the traffic. But if you get one, two, ten people viewing it in a particular building, it's all still just the one signal that's going out. So that's really critical because it means that we can have limited hardware on our end for delivery and limited impact on the network when people use a service like this. So we want to add in instructional content.

We want to put encoders at some of the broadcast studios that we have on campus. For example, Wisconsin Public Television exists on our campus. Our School of Journalism and Mass Communication would like to put content on Dayton. So really, anyone who wants to become a part of Dayton after we're out of the pilot phase can get an encoder and can get some kind of placement or representation within Dayton and can then start referring their customer base to one central location for video content. Here's our player.

A guy by the name of George Cook from Apple helped us set this player up. So this is a QuickTime skin that just has All of the channels that we carry right now over on the left-hand side, you can click on them and change the channel. We have a special area up here that could potentially display customized information, weather information, announcements, what have you.

Then, of course, the video itself, ways to turn on and off closed captioning, and our actual closed captioning content. The way that the closed captioning works is we have a script that runs on each individual streaming machine that captures each line of closed captioning text as it comes in from that text grabber box, and then places it in an XML file on the server. The web server is turned on—Apache's turned on—on each cluster node, and this text track here knows to query a particular text.

particular URL and check and see if there's a new line of text. If there is, display it. If there's not, do nothing, or if there's no text, just have it black. And people can--people have the option to turn that off. People have the option to go full screen and eliminate all this other stuff around it. People have the option to even view the closed captioning content completely by itself. And this is probably a good--a good time to just briefly touch on what I mean by the granularity is useful to us.

If this was some kind of a turnkey solution, we wouldn't be able to do something that the school of journalism came to us and asked which is, "Hey, you're capturing--you have all this closed caption content associated with these channels. What if we took all of the closed captioning, put it in a database, made it searchable, and collected it for weeks or months or years, and took little thumbnail snapshots of what it looks like and what it looks like in the real world and then we could use it to do whatever the video was along with the closed captioning text, say every 30 seconds or a minute, just for reference, and made this a searchable database for our faculty and our students so that people could do things like maybe search all of the news channels for particular terms that occurred, how many times did this occur in a particular period.

And it can become a very valuable research tool and a very valuable historical tool. And I don't think that a turnkey solution that might have provided us with this would not have enabled us to do that. So, we're going to try to do a demo and if we could switch to--let's see, let's see if The demo machine, thank you.

And so here's what customers see when they come in to the Dayton site right now. We give people a URL and just tell them—you know, we don't really tell them what they need or anything like that first. If someone's asking about Dayton, we just say, okay, visit dayton.wisc.edu. And you guys can visit this site, too, because we have some other information up here that talks about Dayton, our history, the things we use, and kind of just some of the things that I've talked about here and some pictures of Dayton.

So the first page, we just give people some basic information, review your system requirements, verify that you're connected to a multicast network. And since we're tying this with the 21st Century Network, which is the thing that's actually enabling multicast for most people, we've gotten a lot of requests lately for, when are we going to get cut over to the 21st Century Network? Make sure that the people have quick time, and then we send people either to— the channels page, or

[Transcript missing]

So let's see if C-SPAN works. What I've done here is we have a unicast version of this one broadcast.

So there we go. And obviously there's audio along with it as well. But this is what people see. Now, when you look at what our qualifications were for this service is we wanted it to be able to handle high speed motion, so we do 30 frames per second. It actually works for sporting events and things like that. And we wanted it to be able to do—we wanted text to be visible.

But we wanted to do it at still a reasonable enough quality where relatively low end clients would be able to connect to this thing. We didn't want to blast everyone out of the water and require some high end P4s or G4s to be able to connect to this. What's that?

Oh, yes. So the video stream right now is about 1.3 megabits, and you'll see it spike every once in a while, but we've got it set at 1.3, and then the audio is separate from that. We can actually get higher qualities if we go higher bandwidths, and we think we're going to be able to get really higher quality with H.264, so we're really looking forward to using the H.264 codec. We can even get higher quality if we use the third-party MPEG-4 codec from a place called Thrivix at 3ivx.com. Right now, we're just using the Apple MPEG-4 codec.

So if we go full screen, you'll be able to see that it is a little bit grainy, but like I said, the priority was to be able to reach the widest possible variety of clients with the technology for encoding that we had available to us right now. Now, hopefully, there's closed captioning along with this, and you'll be able to see that, too.

Well, this is one of the times where unfortunately the demo guards aren't with me. It doesn't look like there's closed captioning along with it right now. If there was, you'd see the text scrolling along on the bottom of the screen. In fact, what I can do is— Just see if I can bring up the closed captioning from another channel. So here's how it works. Now, you're not going to be able to—the video's not going to load for this because this is just a multicast-only channel.

There it is. That's how the closed captioning works. And on the info page for each channel, we let people even load the closed captioning by itself if they want to. So people can pretty much take this and do whatever they want to do with it. They can even access the XML files that has the raw text in it themselves.

So that is Dayton. And if we go back to the slides, I don't think there's actually any slides left. For more information, you can visit our website at dayton.wisc.edu. And here's how to get in touch with Nate and Dave Devereaux-Weber is actually the manager of this project at the university. He couldn't make it with us today, but that's my presentation. Thank you.
