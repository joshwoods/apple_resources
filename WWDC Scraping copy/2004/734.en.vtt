WEBVTT

00:00:12.780 --> 00:00:13.240
So that's me.

00:00:13.240 --> 00:00:14.860
They call me the ecosystem manager.

00:00:14.860 --> 00:00:17.220
I do sort of industry relations
for the engineering group,

00:00:17.230 --> 00:00:18.620
which includes standards.

00:00:18.620 --> 00:00:20.060
And it meant going to
some of these meetings.

00:00:20.170 --> 00:00:23.280
So I'm going to give you a
background on the H.264 codec,

00:00:23.290 --> 00:00:25.360
where it came from, roughly what it does,
and so on.

00:00:25.360 --> 00:00:27.820
And then I'm going to pass it over
to real engineers to tell you things

00:00:27.920 --> 00:00:29.590
that are actually interesting.

00:00:29.900 --> 00:00:32.410
So first of all, I'm going to cover a
few of these acronyms.

00:00:32.520 --> 00:00:34.640
By now, you've probably heard
quite a few of them.

00:00:34.640 --> 00:00:37.300
So let's go through them very quickly.

00:00:37.300 --> 00:00:41.480
ITUT, one of the two big standards
bodies that brought you the codec,

00:00:41.480 --> 00:00:44.540
the other one, of course,
being MPEG over there.

00:00:44.560 --> 00:00:49.360
The Video Coding Expert Group, VKEG,
is the group in ITUT that's

00:00:49.360 --> 00:00:51.500
responsible for video coding.

00:00:51.500 --> 00:00:55.130
And the team that they formed
jointly between ITUT and MPEG was

00:00:55.160 --> 00:00:58.540
called the Joint Video Team,
really imaginative name there.

00:00:58.570 --> 00:01:02.290
The codec has in its title
advanced video coding in both

00:01:02.290 --> 00:01:05.640
the standards that are published,
the H.264 standard from the

00:01:05.640 --> 00:01:09.140
ITU and MPEG-4 part 10 from MPEG.

00:01:09.140 --> 00:01:12.550
And MSG is a food additive commonly
used in the food that gets served

00:01:12.550 --> 00:01:14.980
at late night standards meetings.

00:01:16.500 --> 00:04:02.000
[Transcript missing]

00:04:02.680 --> 00:04:06.320
Part of the reason for that is its
broadness of field of application.

00:04:06.510 --> 00:04:09.770
It's taking over,
or it's intended to take over from,

00:04:10.020 --> 00:04:13.550
in broadcast support
from codecs like MPEG-2,

00:04:13.550 --> 00:04:17.840
or in stored content, again,
typically a space occupied by MPEG-2.

00:04:17.940 --> 00:04:21.690
But it's also targeted to cope with the
conversational low-delay applications,

00:04:21.690 --> 00:04:25.860
video telephone, video conference,
traditionally occupied by H.263.

00:04:25.950 --> 00:04:28.470
It's also looking at the video on demand,
the streaming market,

00:04:28.470 --> 00:04:30.440
traditionally occupied
by a variety of codecs,

00:04:30.440 --> 00:04:31.460
including MPEG-4.

00:04:31.760 --> 00:04:34.960
And indeed multimedia messaging
and new applications like that,

00:04:35.050 --> 00:04:37.240
which are, in some sense,
nascent applications already,

00:04:37.240 --> 00:04:39.640
but they are currently occupied by H.263.

00:04:39.740 --> 00:04:42.500
So you can see a very broad
range of applications that

00:04:42.500 --> 00:04:44.190
this codec's targeted for.

00:04:44.410 --> 00:04:44.920
But what is it?

00:04:45.060 --> 00:04:46.650
What is this revolutionary new codec?

00:04:46.900 --> 00:04:47.980
Where does it come from?

00:04:48.060 --> 00:04:51.740
Actually, there's nothing singularly
revolutionary inside the codec.

00:04:51.810 --> 00:04:56.020
It is the latest in a long line of
codecs that do frame differencing,

00:04:56.070 --> 00:05:00.230
motion estimation, DCT transform,
entropy coding, and so on.

00:05:00.450 --> 00:05:04.070
It's got the same family resemblance to
all those codecs I talked about before.

00:05:04.420 --> 00:05:08.100
So this is not a huge new
departure in video coding.

00:05:09.250 --> 00:05:11.950
What is new is that many of the
features that were coupled in

00:05:12.050 --> 00:05:14.730
previous codecs have been decoupled,
so there's a lot more

00:05:14.850 --> 00:05:16.860
orthogonality in the codec,
and I'll explore one

00:05:16.860 --> 00:05:17.900
of those in a moment.

00:05:18.020 --> 00:05:20.870
It's got all the best ideas
from the previous standards and

00:05:20.870 --> 00:05:22.310
a whole load more ideas too.

00:05:22.570 --> 00:05:25.650
This is really a big,
rich codec in terms of features

00:05:25.650 --> 00:05:27.760
and choices and technologies.

00:05:27.890 --> 00:05:31.240
Now, as usual,
the standard tells you what is the

00:05:31.240 --> 00:05:35.280
bitstream syntax and what do you
have to do to decode that bitstream,

00:05:35.470 --> 00:05:38.640
and it says absolutely nothing
about how you encode it.

00:05:38.900 --> 00:05:40.600
That's entirely your problem.

00:05:40.750 --> 00:05:43.910
So, given the fact that there's
a lot of technology in there,

00:05:43.910 --> 00:05:47.360
and this liberal approach to
what you can do to encode,

00:05:47.410 --> 00:05:50.120
this is a standard with legs
in terms of being able to

00:05:50.160 --> 00:05:51.860
incrementally improve over the years.

00:05:51.970 --> 00:05:54.160
If you were looking at
the sessions yesterday,

00:05:54.160 --> 00:05:56.430
you saw the graph that
showed MPEG-2 improving,

00:05:56.430 --> 00:05:59.340
improving, improving over the ten years
since its introduction,

00:05:59.350 --> 00:06:02.020
and we're expecting to see the
same kind of improvement curve,

00:06:02.240 --> 00:06:05.220
if not better, in H.264.

00:06:06.680 --> 00:06:09.700
So here's an example of where
features have been decoupled.

00:06:10.020 --> 00:06:12.920
Traditionally,
if you were doing prediction,

00:06:12.940 --> 00:06:17.100
if you were doing a P-frame,
you had IP structured video.

00:06:17.420 --> 00:06:20.420
The P's predicted backwards
from the previous P or I frame,

00:06:20.490 --> 00:06:21.330
right?

00:06:21.750 --> 00:06:23.580
Well,
AVC allows you a stack of references,

00:06:23.680 --> 00:06:24.920
some in the past, some in the future.

00:06:24.920 --> 00:06:27.060
You don't have to worry
about which way they go.

00:06:27.080 --> 00:06:29.610
And likewise, if you had a B-frame,
you would have one in the

00:06:29.720 --> 00:06:30.880
past and one in the future.

00:06:30.880 --> 00:06:32.620
And again, it's decoupled.

00:06:32.640 --> 00:06:34.920
And your dependencies here,
your P-frame depended

00:06:34.920 --> 00:06:37.070
on your previous ILP,
and your B-frame depended

00:06:37.070 --> 00:06:38.100
in your bracketing ILP.

00:06:38.100 --> 00:06:41.040
It was very straightforward,
simple structure.

00:06:41.070 --> 00:06:43.340
Well, in AVC,
P-frames have a single dependency,

00:06:43.340 --> 00:06:44.280
and B-frames have two.

00:06:44.280 --> 00:06:46.340
And who knows where they point?

00:06:46.400 --> 00:06:50.320
So the simple way it used to be
ends up with diagrams like that.

00:06:50.450 --> 00:06:53.280
You have I-frames,
which are decodable independently,

00:06:53.280 --> 00:06:55.990
and P-frames,
which depend on the previous ILP.

00:06:56.060 --> 00:06:59.690
And the B-frames then decode
from the bracketing ILP.

00:06:59.830 --> 00:07:02.220
So you get this very nice, simple,
regular structure.

00:07:02.240 --> 00:07:06.970
Well, in H.264/AVC-- yes,
you have I-frames.

00:07:07.050 --> 00:07:10.040
But the P-frames can choose which way
they point and what they're pointing at.

00:07:10.110 --> 00:07:11.460
They don't have to be
to the adjacent one,

00:07:11.460 --> 00:07:13.440
and they don't have to be backwards.

00:07:13.470 --> 00:07:16.790
You'll notice that this P-frame over
here is actually skipping the I-frame

00:07:16.790 --> 00:07:20.140
that's temporally preceding it to
predict from something further away.

00:07:20.150 --> 00:07:23.160
I have no idea why you would do that,
but you can do that.

00:07:23.160 --> 00:07:26.340
And the B-frames, likewise,
can go all over the place.

00:07:26.340 --> 00:07:29.640
Here's a classic B-frame
predicting from its bracketing ILP.

00:07:29.690 --> 00:07:32.020
But this B-frame, hey,
it's predicting from a B-frame.

00:07:32.020 --> 00:07:34.370
You didn't used to be allowed to do that.

00:07:34.480 --> 00:07:38.360
This B-frame, for some unknown reason,
is predicting backwards from

00:07:38.360 --> 00:07:40.440
two things into the future.

00:07:40.510 --> 00:07:45.080
So you'll notice also that this
here really is a synchronization

00:07:45.080 --> 00:07:46.440
point in this video.

00:07:46.440 --> 00:07:49.730
This I-frame here is not,
because there's a frame after it

00:07:49.730 --> 00:07:51.560
which depends on something before it.

00:07:51.590 --> 00:07:54.120
So this whole concept of
what's an I-frame and what's

00:07:54.120 --> 00:07:56.610
a synchronization point,
that's been decoupled as well.

00:07:56.780 --> 00:07:59.020
So you can see we have a lot of
fun with the systems layer and

00:07:59.020 --> 00:08:00.340
coping with this kind of thing.

00:08:00.340 --> 00:08:02.710
And you'll learn a lot about
that later in the week when

00:08:02.750 --> 00:08:04.440
we talk about video support.

00:08:05.790 --> 00:08:09.230
Other high-level features:
things like the way the codec is set up,

00:08:09.340 --> 00:08:13.300
the parameters you need to know to
decode a frame or to decode a sequence.

00:08:13.430 --> 00:08:17.260
They used to be embedded in the
stream in codecs up till now.

00:08:17.260 --> 00:08:19.130
Well,
they've been taken out of stream now and

00:08:19.130 --> 00:08:20.740
they're provided in setup information.

00:08:20.740 --> 00:08:22.800
So now, finally,
we've got the ability to actually

00:08:22.900 --> 00:08:25.640
flip between parameter sets while
we're running and know that we

00:08:25.640 --> 00:08:27.780
gave that to you during setup.

00:08:28.280 --> 00:08:32.360
There's a lot of error resilience
and adaptability features in there:

00:08:32.480 --> 00:08:35.100
flexible macro block ordering,
arbitrary slice ordering.

00:08:35.200 --> 00:08:39.140
These are tools that allow you to
code the frame in funny orders so that

00:08:39.140 --> 00:08:41.570
when you're doing error resilience,
if you've lost information,

00:08:41.640 --> 00:08:42.920
you can do better concealment.

00:08:43.060 --> 00:08:46.440
So expect to see better concealment
down the road in a few years.

00:08:46.520 --> 00:08:47.940
You can have redundant picture coding.

00:08:48.170 --> 00:08:50.030
You can say, "Okay,
here's this picture coded

00:08:50.120 --> 00:08:52.810
depending on the previous one,
but if you didn't get the previous one,

00:08:52.810 --> 00:08:55.400
I have another copy of this
picture depending on something

00:08:55.400 --> 00:08:58.600
else." So if your server and your
client are in tight communication,

00:08:58.870 --> 00:09:02.590
sometimes you can recover from
loss there by supplying a different

00:09:02.700 --> 00:09:04.330
version of the same picture.

00:09:04.530 --> 00:09:05.460
So you can do that.

00:09:05.560 --> 00:09:06.490
You can also do that with
stream switching support.

00:09:06.500 --> 00:09:08.600
You can supply a picture that says, "Ah,
I know you were running

00:09:08.600 --> 00:09:10.370
the 100 kilobit stream,
but you seem to be having

00:09:10.440 --> 00:09:11.500
a lot of trouble with that.

00:09:11.500 --> 00:09:13.830
Why don't I switch down
to the 70 kilobit stream,

00:09:14.020 --> 00:09:16.360
and as it happens,
I don't have to wait for a sync point.

00:09:16.520 --> 00:09:20.360
I have a frame here that predicts
from the 100 kilobit stream into

00:09:20.760 --> 00:09:25.230
the 70 kilobit stream." So we can
actually switch at non-sync points.

00:09:25.520 --> 00:09:27.050
And in fact,
you can use these switching pitches to

00:09:27.180 --> 00:09:28.480
do trick modes within the same stream.

00:09:28.580 --> 00:09:30.950
You can have switching pitches
that predict backwards so

00:09:31.040 --> 00:09:33.120
that if you're doing a rewind,
you can skip back down

00:09:33.120 --> 00:09:33.780
the predicting stream.

00:09:33.920 --> 00:09:38.240
down the switching pictures and
show the things in the past.

00:09:38.780 --> 00:09:40.740
There's a better fit
into the systems layers.

00:09:40.990 --> 00:09:43.530
In the past, video coding people haven't
really worried about what

00:09:43.590 --> 00:09:44.440
they were going to fit into.

00:09:44.680 --> 00:09:46.140
Well, this time they did.

00:09:46.200 --> 00:09:48.790
The timing, for instance,
which is typically embedded in

00:09:48.790 --> 00:09:51.880
stream for a video codec can
now finally be out of stream.

00:09:51.880 --> 00:09:56.310
So, it's in your QuickTime movie file in
the timing tables there or in your

00:09:56.310 --> 00:09:59.180
transport stream or in the RTP packets.

00:09:59.260 --> 00:10:02.440
And they defined not only a
bit-structured syntax but also a

00:10:02.550 --> 00:10:06.850
packet-structured syntax for those
of us who work on packet networks.

00:10:08.420 --> 00:10:11.980
So, as I say,
it comes from these two organizations,

00:10:12.070 --> 00:10:15.140
MPEG and the ITU,
and it really is a family

00:10:15.140 --> 00:10:18.530
successor in both families,
so it really meets up at the end here.

00:10:18.830 --> 00:10:21.540
And it gets, it was designed to get
a 50% bitrate gain,

00:10:21.540 --> 00:10:22.890
roughly, over these.

00:10:22.950 --> 00:10:25.860
Obviously there are questions of exactly
which profiles and levels and so on,

00:10:25.860 --> 00:10:27.100
and what kind of content.

00:10:27.230 --> 00:10:31.400
So what MPEG-2 might do in a megabit,
we take about half a megabit to do.

00:10:31.540 --> 00:10:33.910
And in iframe-only,
it actually compares pretty

00:10:33.970 --> 00:10:35.180
well to classic JPEG.

00:10:35.400 --> 00:10:37.180
So if you really need
an iframe-only coder,

00:10:37.290 --> 00:10:39.100
you could possibly use that one, though.

00:10:39.160 --> 00:10:41.370
JPEG, of course, still works really well.

00:10:41.690 --> 00:10:43.420
It's not a still-frame coder, of course.

00:10:43.640 --> 00:10:46.290
JPEG-2000 is a still-frame,
a modern still-frame coder,

00:10:46.460 --> 00:10:50.190
which has a much more complex arithmetic
coder and is wavelet transform and so on.

00:10:50.280 --> 00:10:52.560
So if you really want
a still-frame coder,

00:10:52.560 --> 00:10:53.930
this is not your baby.

00:10:55.050 --> 00:10:56.400
Profile structure.

00:10:56.480 --> 00:10:59.510
As you know, standards bodies like to
define lots of features,

00:10:59.540 --> 00:11:02.680
and then they come along and they try
to define profiles that they believe

00:11:02.980 --> 00:11:04.550
the majority of users will fit into.

00:11:04.740 --> 00:11:06.060
So there are three profiles here.

00:11:06.060 --> 00:11:08.920
Profiles are typically onion
skins in our standards.

00:11:09.220 --> 00:11:11.400
Well, in this case, we failed.

00:11:11.560 --> 00:11:14.630
This is not an onion skin diagram.

00:11:14.760 --> 00:11:19.150
The baseline profile, this blue one here,
contains all the core coding tools,

00:11:19.240 --> 00:11:22.140
obviously,
and the ability to do IP sequences,

00:11:22.220 --> 00:11:23.740
but no bidirectional prediction.

00:11:23.850 --> 00:11:26.740
And a lot of the error
resilience tools are in there.

00:11:26.870 --> 00:11:29.250
So that's in your baseline profile.

00:11:29.430 --> 00:11:32.040
That's what's been adopted, for instance,
into cell phones.

00:11:32.130 --> 00:11:35.060
Then there's an extended profile,
which adds the ability to do

00:11:35.110 --> 00:11:38.340
B-frames and the stream switching
and some other tools as well.

00:11:38.450 --> 00:11:40.830
This one is what you might expect to use,
for instance,

00:11:40.830 --> 00:11:43.480
in full-on streaming applications,
where you've got the error

00:11:43.480 --> 00:11:45.630
resilience and the stream switching.

00:11:45.740 --> 00:11:48.850
Then there's a main profile,
which doesn't include the error

00:11:48.850 --> 00:11:51.670
resilience and stream switching,
but does include a really

00:11:51.970 --> 00:11:55.850
heavy-duty arithmetic coding system,
which really kicks in at higher bit

00:11:55.850 --> 00:11:58.080
rates and higher frame rates and so on.

00:11:58.080 --> 00:12:02.220
So that's the profile you might expect
to use for HD applications or for

00:12:02.220 --> 00:12:04.350
standard definition applications.

00:12:04.570 --> 00:12:07.760
This is the profile that people coming
from the MPEG-2 tend to be looking at.

00:12:07.960 --> 00:12:09.840
MPEG-2 world.

00:12:10.290 --> 00:12:11.400
Boy, do we have levels.

00:12:11.550 --> 00:12:13.760
As you know, these standards are also
divided into levels.

00:12:13.930 --> 00:12:16.240
Profiles tell you what
technologies are you choosing.

00:12:16.240 --> 00:12:18.580
Levels tell you, well,
how much complexity can you have.

00:12:18.700 --> 00:12:19.970
And we have plenty of levels.

00:12:19.970 --> 00:12:23.050
They have levels that are designed
to give you roughly 30 frames

00:12:23.050 --> 00:12:25.790
a second at everything from
sub-cortisif at the tiny end,

00:12:26.000 --> 00:12:30.200
all the way up through, you know,
VGA and XGA and 16 VGA is

00:12:30.200 --> 00:12:33.590
in there somewhere,
and all the way up to 4K by 2K.

00:12:33.800 --> 00:12:35.900
So they really looked at
the whole industry and said,

00:12:35.900 --> 00:12:39.100
okay, we can do a fine-grain
division of this into levels.

00:12:39.210 --> 00:12:41.340
So there's plenty of
levels to choose from,

00:12:41.340 --> 00:12:43.670
and I'm sure there are more coming.

00:12:44.550 --> 00:12:46.850
What's going on in the
standards body down the road?

00:12:47.050 --> 00:12:48.640
There actually are extensions underway.

00:12:48.640 --> 00:12:50.620
This codec is not completely done.

00:12:50.920 --> 00:12:53.930
They're working on
fidelity range extensions,

00:12:53.930 --> 00:12:57.040
they call them,
where we can do deeper pixels.

00:12:57.040 --> 00:12:58.300
Currently, it's an 8-bit codec.

00:12:58.390 --> 00:13:00.210
They're looking at 10-bit.

00:13:00.340 --> 00:13:02.420
We can do less subsampling of the chroma.

00:13:02.420 --> 00:13:04.220
If there's anybody in
here who understands that,

00:13:04.220 --> 00:13:07.080
you can know that they're actually
working on things that give you

00:13:07.340 --> 00:13:10.420
much better chroma fidelity for
those professional applications.

00:13:10.540 --> 00:13:14.030
And they're also looking at alpha
plane support in the upcoming.

00:13:14.490 --> 00:13:17.960
What's coming in in the industry is that
we're looking at a lot of companies.

00:13:18.020 --> 00:13:19.640
I mean a lot of companies
are implementing this.

00:13:19.760 --> 00:13:23.420
The chair already has a list of more
than 60 companies who said publicly to

00:13:23.420 --> 00:13:25.610
him that they are working on this codec.

00:13:25.740 --> 00:13:27.680
That's a huge number of companies, right?

00:13:27.680 --> 00:13:30.460
And they spread an entire
gamut from hardware,

00:13:30.730 --> 00:13:33.260
software,
and different fields of application.

00:13:33.360 --> 00:13:36.120
So, there's a terrific amount of
interest behind this codec.

00:13:36.190 --> 00:13:38.690
An enormous amount actually
compared to previous codecs at

00:13:38.690 --> 00:13:42.490
this stage in its development,
only just after the publication.

00:13:42.800 --> 00:15:18.100
[Transcript missing]

00:15:18.330 --> 00:15:20.520
There's also an MPEG-2
byte stream packing,

00:15:20.590 --> 00:15:22.940
so those of you who work
in the MPEG-2 field,

00:15:22.940 --> 00:15:26.360
cable and so on that will need to
use MPEG-2 transport or whatever,

00:15:26.640 --> 00:15:28.950
that's also fully defined.

00:15:30.480 --> 00:15:31.100
Licensing.

00:15:31.100 --> 00:15:34.000
So I know all of you get
worried about licensing.

00:15:34.000 --> 00:15:37.280
This is an improvement over
MPEG-4 Part 2 licensing.

00:15:37.370 --> 00:15:39.840
There are UCs, but they're limited and
they're well-defined,

00:15:39.840 --> 00:15:43.150
much better defined, I think,
than in the MPEG-4 Part 2 licensing.

00:15:43.160 --> 00:15:46.970
And there's less counting of things
that you've not already counted.

00:15:46.980 --> 00:15:52.360
So look more like the MPEG-2 licensing
than the MPEG-4 Part 2 license,

00:15:52.480 --> 00:15:54.240
which I know was confusing
to a lot of people.

00:15:54.870 --> 00:16:00.230
So for example, as a manufacturer,
we tend to cover encoder

00:16:00.230 --> 00:16:02.130
and decoder fees.

00:16:02.130 --> 00:16:04.080
Can you use the technology
that we ship you?

00:16:04.080 --> 00:16:04.640
Yes, you can.

00:16:04.640 --> 00:16:07.360
We've paid the fees for you
to allow you to do that.

00:16:07.360 --> 00:16:09.720
So if you're a software developer,
stop worrying.

00:16:09.750 --> 00:16:12.160
We don't think there's
much to worry about there.

00:16:12.160 --> 00:16:16.130
If you're a content developer, yes,
there are some cases where there are

00:16:16.130 --> 00:16:18.470
additional licenses that are payable.

00:16:18.480 --> 00:16:20.560
But they're well-defined,
and I think you'll be able

00:16:20.670 --> 00:16:21.930
to work it out pretty easily.

00:16:21.930 --> 00:16:24.040
I'm not going to go
through this in detail.

00:16:24.500 --> 00:16:27.330
But in general,
if you have questions about this,

00:16:27.330 --> 00:16:29.420
read the license agreement we gave you.

00:16:29.420 --> 00:16:31.720
I know that's something that goes
completely against the grain for

00:16:31.800 --> 00:16:34.470
those of us in the computer industry
to actually read a license agreement.

00:16:34.530 --> 00:16:36.110
But it might answer a question.

00:16:36.360 --> 00:16:38.590
Some of us actually read
it before we publish them.

00:16:38.720 --> 00:16:40.560
So we try to make it accurate for you.

00:16:40.640 --> 00:16:44.130
If you're still in doubt,
feel free to talk to us.

00:16:44.250 --> 00:16:47.350
Go to the sites of these two
licensing organizations that are

00:16:47.700 --> 00:16:49.770
each issuing licenses for this.

00:16:50.000 --> 00:16:52.290
Have a look at their licenses and
their frequently asked questions.

00:16:52.310 --> 00:16:53.940
Your question may well be answered there.

00:16:54.230 --> 00:16:58.040
And if you need further clarification,
feel free to contact us or them.

00:16:58.040 --> 00:17:02.010
But our basic message for you is,
come on in, the water's lovely.

00:17:02.040 --> 00:17:03.040
It's not a jacuzzi.

00:17:03.040 --> 00:17:05.960
It's not going to be that comfortable,
but it's not the Arctic either.

00:17:06.100 --> 00:17:10.030
This is survivable licensing water for
those of you in the content business.

00:17:11.900 --> 00:17:13.690
So, adoption in other standards arenas.

00:17:13.760 --> 00:17:14.880
What's going on here?

00:17:15.010 --> 00:17:17.730
So, the ITUT has already published
a video conferencing standard

00:17:17.730 --> 00:17:18.800
that includes this codec.

00:17:18.800 --> 00:17:21.510
And indeed, the RTP payload format
that I just defined,

00:17:21.510 --> 00:17:23.800
that talked about the
simple version of it.

00:17:23.870 --> 00:17:27.570
3GPP for 3G cell phones,
release 6 is almost done.

00:17:27.830 --> 00:17:30.800
It's in there as the next-generation
video codec for 3GPP.

00:17:30.800 --> 00:17:33.800
DVD Forum, HD DVD,
we've already talked about.

00:17:33.800 --> 00:17:36.740
Greg's going to give you more
information about that in a moment.

00:17:36.800 --> 00:17:41.970
It's under final consideration at DVB,
the European body, and ATSC, the

00:17:41.970 --> 00:17:47.770
Advanced Television Something Committee,
in the US for television purposes.

00:17:47.800 --> 00:17:50.820
Japanese broadcasters,
a consortium of Japanese broadcasters,

00:17:50.820 --> 00:17:52.910
have already said, "Yes,
we're happy with the technology,

00:17:52.910 --> 00:17:54.780
and we're happy with the licensing.

00:17:54.850 --> 00:17:57.800
We think we can use this
codec." So they're going ahead.

00:17:57.950 --> 00:18:01.640
And it's on track at ISMA for the
next generation of interoperable

00:18:01.720 --> 00:18:03.510
Internet streaming specs.

00:18:04.820 --> 00:18:07.590
So with that,
I'd like to pass it over to Greg Wallace,

00:18:07.600 --> 00:18:10.730
who's going to cover for you
what's going on with H.264,

00:18:10.730 --> 00:18:14.610
advanced video coding,
and the HD DVD business.

00:18:20.500 --> 00:19:39.200
[Transcript missing]

00:19:40.900 --> 00:19:46.710
Okay, so let's generically talk
about this as HD optical disc.

00:19:46.710 --> 00:19:51.560
And to really show you where
H.264 fits in there and what its

00:19:51.560 --> 00:19:54.860
competitors and prospects are,
I need to tell you a little bit about

00:19:55.000 --> 00:19:59.760
these two different optical disc camps,
which some of you have probably heard of,

00:19:59.790 --> 00:20:04.450
and I wouldn't be surprised if many
of you have felt confused from time

00:20:04.450 --> 00:20:09.440
to time because the terms and the
technologies are really confusing.

00:20:09.530 --> 00:20:11.980
So there's actually
two optical disc camps,

00:20:11.990 --> 00:20:13.870
high-def optical disc camps.

00:20:13.920 --> 00:20:19.030
There's one called Blu-ray,
and there is the DVD Forum,

00:20:19.240 --> 00:20:23.040
a separate organization,
which is what brought you today's DVD.

00:20:23.200 --> 00:20:28.150
And they, interestingly enough,
have chosen the term HD DVD.

00:20:28.170 --> 00:20:33.080
Both of these camps are
planning or at least claiming,

00:20:33.110 --> 00:20:36.600
hoping that they will launch,
in other words have a consumer launch,

00:20:36.630 --> 00:20:40.940
well in time for Christmas 2005.

00:20:41.030 --> 00:20:44.620
Launch meaning that you'll be able
to go to the Good Guys or Fry's,

00:20:44.670 --> 00:20:49.560
your favorite store,
and actually buy a HD DVD player,

00:20:49.560 --> 00:20:52.900
or maybe it would be
called a Blu-ray HD player,

00:20:52.970 --> 00:21:00.380
and also be able to buy HD movies on
discs that will be the same size and

00:21:00.380 --> 00:21:04.370
more or less look just like today's DVDs,
but they'll be much higher

00:21:04.380 --> 00:21:08.480
capacity in some cases,
and they can play on these players.

00:21:09.230 --> 00:21:11.640
Part of the reason there's
uncertainty about this is that

00:21:11.700 --> 00:21:16.870
Hollywood Studios are still a
little ambivalent about this launch.

00:21:18.350 --> 00:21:22.200
If you're here from a Hollywood studio,
raise your hand.

00:21:22.240 --> 00:21:26.190
Okay, good, I'll speak freely.

00:21:26.560 --> 00:21:32.290
Hollywood Studios like to earn
as much money as they can,

00:21:32.300 --> 00:21:33.660
as all good companies do.

00:21:33.700 --> 00:21:39.950
And what they want to do is sell
you their movies all over again,

00:21:39.990 --> 00:21:40.570
right?

00:21:40.950 --> 00:21:45.160
So one reason they're a little bit
ambivalent about HD DVD is because

00:21:45.540 --> 00:21:49.940
they're not 100% sure that the time
is right yet and that there's enough

00:21:49.940 --> 00:21:53.980
penetration of HD sets to really
motivate everyone to buy their entire

00:21:53.990 --> 00:21:55.670
movie collection all over again.

00:21:55.810 --> 00:22:03.780
So that uncertainty is a major reason
that the roadmap and which camp is

00:22:03.840 --> 00:22:06.490
going to win is a little bit uncertain.

00:22:06.890 --> 00:22:09.390
I believe they will come around.

00:22:09.540 --> 00:22:13.130
There will be a certain momentum that
gathered just like the original DVD,

00:22:13.140 --> 00:22:16.700
but kind of makes life interesting.

00:22:16.840 --> 00:22:20.270
Also for that reason,
you'll increasingly hear as you read

00:22:20.290 --> 00:22:24.890
press articles that both of these
camps are increasingly pitching this

00:22:25.350 --> 00:22:31.050
as not just about high definition,
but also about improved copy protection.

00:22:32.700 --> 00:22:34.710
So to talk about the
Blu-ray method a little bit,

00:22:34.830 --> 00:22:38.600
you can think of Blu-ray
as a really big bit bucket.

00:22:38.660 --> 00:22:43.760
They've decided to pursue an aggressive,
at least relatively aggressive,

00:22:43.840 --> 00:22:45.590
blue laser technology.

00:22:45.600 --> 00:22:49.410
Blue laser basically means
it's got a smaller or shorter

00:22:49.410 --> 00:22:51.600
wavelength than a red laser.

00:22:51.600 --> 00:22:55.540
Red laser are what's used
today in DVD players.

00:22:55.650 --> 00:22:58.640
And the blue laser can
focus on a smaller pit,

00:22:58.650 --> 00:23:00.400
can resolve a smaller pit.

00:23:00.600 --> 00:23:07.130
So that, coupled with basically etching
and molding technologies which

00:23:07.130 --> 00:23:13.300
can put smaller pits on the disc
are what give the higher capacity.

00:23:13.710 --> 00:23:18.880
BlueRay, in fact,
is 25 gigabytes on a single layer

00:23:19.100 --> 00:23:21.440
and 50 gigabytes on a dual layer.

00:23:21.530 --> 00:23:26.430
So that's compared to today's DVD,
which is 4.7 and 8.5, single and dual.

00:23:26.580 --> 00:23:34.600
So it's something like pushing six times
the capacity of today's DVD player.

00:23:34.820 --> 00:23:40.550
Because they have such a big bit bucket,
they are not particularly motivated

00:23:40.550 --> 00:23:43.500
to go to an advanced codec,
to go to H.264.

00:23:43.620 --> 00:23:46.220
So at the moment, at least,
they're planning on using

00:23:46.270 --> 00:23:50.550
MPEG-2 high definition only,
the same MPEG-2 that's used for

00:23:50.640 --> 00:23:53.600
today's HD broadcast in the U.S.

00:23:53.600 --> 00:23:55.600
and also in Japan.

00:23:55.600 --> 00:23:59.360
So this requires about 15 or 20
megabits per second to encode an

00:23:59.360 --> 00:24:01.590
HD signal at really pristine quality.

00:24:01.600 --> 00:24:04.600
And if you do the math and you're
not sure what you're doing,

00:24:04.600 --> 00:24:04.600
you're probably going to
have to do a lot of math.

00:24:04.600 --> 00:24:07.790
But if you can work out the capacity
it takes at that data rate to

00:24:07.790 --> 00:24:11.970
store a two to three hour movie,
you'll see that that can fit

00:24:11.970 --> 00:24:14.600
on this disc pretty easily.

00:24:14.600 --> 00:24:18.350
And there's not a lot of motivation,
at least not on Hollywood's part, to say,

00:24:18.350 --> 00:24:22.580
"Oh, well, you know,
can't use a higher compression rate

00:24:22.620 --> 00:24:26.100
and put two or three movies on a disc."
Because they don't really want to sell

00:24:26.100 --> 00:24:27.590
you two or three movies on one disc.

00:24:27.600 --> 00:24:29.950
They want to sell you
one movie at a time.

00:24:30.940 --> 00:24:34.280
So one of the biggest challenges
for Blu-ray is because it's a

00:24:34.310 --> 00:24:37.470
relatively aggressive technology,
there are questions

00:24:37.540 --> 00:24:39.410
about manufacturability.

00:24:39.630 --> 00:24:43.080
Can you replicate this
at an affordable price?

00:24:43.570 --> 00:24:48.070
And basically it comes down to are
the yields coming off the line going

00:24:48.070 --> 00:24:53.100
to be high enough soon enough to be
competitive with other technology?

00:24:54.600 --> 00:25:03.670
So HD DVD, the DVD forums,
HD optical disc technology and

00:25:03.670 --> 00:25:09.590
specification is remarkably flexible,
which is good and bad in comparison.

00:25:09.820 --> 00:25:14.770
It can place an HD DVD dataset
on either a red laser disc,

00:25:14.770 --> 00:25:18.790
the same kind we have today,
or a blue laser.

00:25:19.600 --> 00:25:22.920
The Blue Laser Disc that they're
developing is a different blue

00:25:22.920 --> 00:25:26.590
laser technology from what the
Blu-ray group is developing.

00:25:26.600 --> 00:25:29.590
They,
and you'll sometimes hear this name, AOD,

00:25:29.600 --> 00:25:31.600
which stands for Advanced Optical Disc.

00:25:31.600 --> 00:25:37.540
That's just the name or acronym they've
picked for their blue laser technology.

00:25:37.600 --> 00:25:40.870
And you can see it's not
quite as aggressive in terms

00:25:40.870 --> 00:25:42.600
of capacity as Blu-ray.

00:25:42.600 --> 00:25:50.190
It's 15 or 30 gigabytes on
a single or dual layer disc.

00:25:50.780 --> 00:25:56.080
So, particularly if you want to use
RED Laser and you want to consider

00:25:56.080 --> 00:26:00.730
putting a full-length movie,
you absolutely have to

00:26:00.730 --> 00:26:03.110
have an advanced codec.

00:26:03.530 --> 00:26:10.300
H.264/AVC:
This makes for an especially interesting

00:26:10.300 --> 00:26:15.760
technology for computer manufacturers
because they already have a big

00:26:15.760 --> 00:26:18.500
installed base of red laser burners.

00:26:18.500 --> 00:26:24.250
As a matter of fact,
dual-layer red laser burners are

00:26:24.260 --> 00:26:33.000
coming within the next year from
the laser writer manufacturers.

00:26:33.000 --> 00:26:38.380
With an 8.5 gigabyte dual laser
and using H.264 at around 8

00:26:38.380 --> 00:26:43.740
to 10 megabits per second,
you can actually put an entire two-hour

00:26:43.780 --> 00:26:47.010
feature-length film on a red laser disk.

00:26:47.560 --> 00:26:53.180
So the HD DVD players,
consumer electronics player boxes that

00:26:53.260 --> 00:26:58.310
will come out when HD DVD launches,
they will be able to play an

00:26:58.320 --> 00:27:02.980
HD DVD data set off of either a
red laser or a blue laser disc.

00:27:03.700 --> 00:27:14.080
So, to add to the flexibility,
HD DVD has tremendous codec flexibility.

00:27:14.080 --> 00:27:19.100
It's actually going to be a
requirement for the HD DVD players to

00:27:19.110 --> 00:27:25.800
be able to play back MPEG-2 Hi-Def,
H.264, or Windows Media 9 video.

00:27:26.120 --> 00:27:30.830
These will all be mandatory
for the player manufacturer.

00:27:31.030 --> 00:27:33.340
Now, if you're making publishing
tools or encoders,

00:27:33.340 --> 00:27:35.660
it doesn't mean, of course,
that you have to be able

00:27:35.710 --> 00:27:37.300
to encode in all three.

00:27:37.530 --> 00:27:41.050
You can encode in any one of them,
but the players will have

00:27:41.130 --> 00:27:42.830
to play back all three.

00:27:43.920 --> 00:27:49.910
As I was mentioning earlier,
so H.264 will give you about the same

00:27:49.910 --> 00:27:53.670
quality as MPEG-2 at half or even a
little less than half the data rate.

00:27:53.780 --> 00:27:59.580
So for 24p material in particular,
depending on the complexity of the

00:27:59.580 --> 00:28:05.730
scene and whether it's 1280x720
HD format versus 1920x1080,

00:28:05.860 --> 00:28:10.550
you'll be able to go as low as 6 megabits
per second and really get superb,

00:28:10.600 --> 00:28:12.020
pristine quality.

00:28:14.360 --> 00:28:18.530
Just a little bit about the other
codec that some of you have heard

00:28:18.670 --> 00:28:22.140
of here and the SMPTE process
that you might have heard.

00:28:22.140 --> 00:28:23.860
So SMPTE is another standards committee.

00:28:23.860 --> 00:28:31.300
They have a long history of standardizing
both television and film standards,

00:28:31.340 --> 00:28:34.300
largely within the U.S.,
but internationally as well.

00:28:34.410 --> 00:28:38.300
And there's a technical
committee of SMPTE called C24,

00:28:38.500 --> 00:28:40.830
which does compression standards.

00:28:41.030 --> 00:28:47.610
And they have agreed, SMPTE has agreed to
Microsoft's proposal to,

00:28:48.010 --> 00:28:52.630
quote, "standardize" the
Windows Media 9 video codec.

00:28:52.780 --> 00:28:56.650
The name that you may have
heard of in the press in the

00:28:56.650 --> 00:29:01.330
past year or so has been VC9,
but just as of the last meeting in

00:29:01.360 --> 00:29:06.750
Milwaukee a couple of weeks ago,
that has actually been,

00:29:06.750 --> 00:29:09.040
is in the process of being reexamined.

00:29:09.040 --> 00:29:10.850
So the name may be something
entirely different.

00:29:10.940 --> 00:29:15.480
and maybe VCE1 or some other acronym, -1.

00:29:15.940 --> 00:29:19.980
Just so you know,
this standard is currently

00:29:19.980 --> 00:29:22.940
at the committee draft level.

00:29:23.170 --> 00:29:25.440
But there are,
and our friends up north love

00:29:25.440 --> 00:29:28.800
to publicize that this is
virtually done and out the door.

00:29:28.900 --> 00:29:34.460
But as a matter of fact,
there's at least three more

00:29:34.810 --> 00:29:37.810
major hurdles to achieve.

00:29:37.810 --> 00:29:37.810
The other thing that

00:29:37.820 --> 00:29:43.790
Our friends love to publicize
sometimes is that this VC9 codec will,

00:29:43.800 --> 00:29:48.030
or VC1, whatever it will be called,
will be virtually free.

00:29:48.040 --> 00:29:51.020
Well, that's not really quite accurate.

00:29:51.120 --> 00:29:55.590
In fact, there's a licensing
pool forming in MPEG-LA,

00:29:55.790 --> 00:29:59.060
which is one of the licensing entities,
as Dave said, for H.264.

00:29:59.060 --> 00:30:02.300
It's also the licensing
entity for MPEG-2.

00:30:02.300 --> 00:30:07.150
And they are, in fact,
in the process of identifying key

00:30:07.370 --> 00:30:13.850
patents and forming a licensing pool for
Microsoft's Windows Media 9 video codec,

00:30:13.850 --> 00:30:19.430
because it's very difficult these
days to make an advanced codec and

00:30:19.430 --> 00:30:24.660
not inadvertently or intentionally,
either way,

00:30:24.660 --> 00:30:27.600
use someone else's patented technology.

00:30:27.620 --> 00:30:31.610
So I personally will be very
surprised if the licensing

00:30:31.660 --> 00:30:32.300
terms wind up being the same.

00:30:32.300 --> 00:30:40.640
They'll end up being a lot different
for VC1 than they are for H.264.

00:30:42.860 --> 00:30:45.670
So with that,
I'm going to turn it over to Hsi-Jung Wu,

00:30:45.680 --> 00:30:49.620
and he is the man who is doing
the H.264 codec at Apple.

00:30:49.660 --> 00:30:51.500
Thank you very much.

00:30:55.000 --> 00:30:57.500
Thanks.

00:30:57.550 --> 00:30:57.950
Hi.

00:30:58.000 --> 00:30:59.520
Cell phones are off, right?

00:30:59.520 --> 00:31:02.310
I don't know if that was-- that's cool.

00:31:02.380 --> 00:31:07.640
Hi, I have the distinct privilege of
working with a bunch of cool codec guys.

00:31:07.640 --> 00:31:10.380
And I think some of
them are here incognito.

00:31:10.470 --> 00:31:12.820
So that's a pleasure for me.

00:31:12.900 --> 00:31:16.390
So have you all seen all the
demos that have been up yesterday,

00:31:16.460 --> 00:31:17.100
today?

00:31:17.100 --> 00:31:18.000
That kind of stuff?

00:31:18.000 --> 00:31:19.140
A little bit, no?

00:31:19.280 --> 00:31:21.310
So let's cut this out.

00:31:21.320 --> 00:31:22.680
Let's cut to the chase.

00:31:22.680 --> 00:31:24.370
No, just kidding.

00:31:24.380 --> 00:31:25.560
Demo one, please.

00:31:25.580 --> 00:31:27.510
And I'm going to--

00:31:32.120 --> 00:31:34.590
That will, um, just for fun.

00:31:34.700 --> 00:31:38.600
Can we dim the lights at all?

00:31:38.750 --> 00:31:40.450
This, uh, this is for Amy, by the way.

00:31:40.620 --> 00:31:42.600
This is Amy's favorite trailer.

00:31:42.700 --> 00:31:44.600
Here we go.

00:31:44.600 --> 00:31:56.510
Turn to page 394.

00:32:10.200 --> 00:32:13.160
The Masked Man Prison.

00:32:13.160 --> 00:32:15.410
He's a murderer.

00:32:15.420 --> 00:32:21.340
Sirius Black is the reason
the Potters are dead.

00:32:21.340 --> 00:32:26.560
And now he wants to
finish what he started.

00:32:26.560 --> 00:32:27.600
I want you to swear to me you
won't go looking for Black.

00:32:27.600 --> 00:32:27.600
Why would I go looking for
someone who wants to kill me?

00:32:33.400 --> 00:32:34.600
There's something moving out there.

00:32:34.600 --> 00:32:37.160
It was a Dementor,
one of the guards of Azkaban,

00:32:37.160 --> 00:32:39.400
is searching the train for Sirius Black.

00:32:39.400 --> 00:32:46.710
It is not in the nature of
a Dementor to be forgiving.

00:33:18.000 --> 00:33:35.200
[Transcript missing]

00:33:36.800 --> 00:33:39.630
I'm going to try to show as many
trailers as I can in the full volume

00:33:39.770 --> 00:33:41.380
because they cut them off all the time.

00:33:41.450 --> 00:33:42.960
Oh, I've got to stop this.

00:33:42.960 --> 00:33:46.950
Quick time, oops.

00:33:48.930 --> 00:33:53.340
Can we go back to one, I think?

00:33:53.360 --> 00:33:57.410
OK, so one of these--

00:33:59.540 --> 00:34:01.720
Here we go.

00:34:02.280 --> 00:34:03.980
So I've got a bunch of slides.

00:34:04.260 --> 00:34:07.940
I'm going to try to run through them
as fast as I can and get to the demos.

00:34:08.020 --> 00:34:11.320
But I'll give you a little bit
of what people talk about H.264.

00:34:11.340 --> 00:34:16.640
And I'll go through just three
slides of key technologies.

00:34:16.650 --> 00:34:18.680
And I'll just go through them briefly.

00:34:18.680 --> 00:34:21.460
And then we'll get to some
of the demos and stuff.

00:34:21.650 --> 00:34:22.460
Got about 40 minutes?

00:34:22.460 --> 00:34:22.950
Excellent.

00:34:22.980 --> 00:34:24.260
So let's do this.

00:34:24.390 --> 00:34:28.870
So H.264 is--

00:34:29.250 --> 00:34:33.340
It really is a huge improvement
over what we've seen before.

00:34:33.340 --> 00:34:36.620
I've been making these
trailers for a while now,

00:34:36.620 --> 00:34:39.380
and I've turned into a trailer junkie,
because I've never used

00:34:39.380 --> 00:34:41.220
to watch these things,
but they're so beautiful

00:34:41.220 --> 00:34:42.100
when you actually do this.

00:34:42.230 --> 00:34:46.000
And when you see this on a HD screen,
like one of our 23-inch guys,

00:34:46.030 --> 00:34:50.630
or 30-inch now, I guess,
it's just amazing when you look at it,

00:34:50.690 --> 00:34:53.220
just totally crisp and much better.

00:34:53.220 --> 00:34:55.110
And they say this,
they say it's the same quality as

00:34:55.150 --> 00:34:57.120
MPEG-4 Simple at half the bitrate.

00:34:59.080 --> 00:35:01.350
I think it is,
and I'll show you something later

00:35:01.360 --> 00:35:05.260
that might not prove the point,
but something like that.

00:35:05.390 --> 00:35:07.440
The way the compression works is nicer.

00:35:07.440 --> 00:35:10.920
As you start cranking up the compression,
the image turns softer,

00:35:10.920 --> 00:35:13.110
and I'll show you some of that, too,
as well.

00:35:13.120 --> 00:35:14.530
So I like it a lot.

00:35:14.540 --> 00:35:18.830
One of the things that Amy likes
to say is this thing is scalable.

00:35:18.840 --> 00:35:23.370
We use this on 3G material
as well as the HD ones.

00:35:23.460 --> 00:35:27.140
The Harry Potter sequence that you
just saw right now was a 1280 by,

00:35:27.140 --> 00:35:29.900
well, it's kind of widescreen,
so probably like 600

00:35:29.900 --> 00:35:30.840
or something like that.

00:35:31.210 --> 00:35:35.760
That's a smaller HD version,
and that thing did it at 6 megabits.

00:35:35.800 --> 00:35:37.330
So that's pretty impressive.

00:35:37.340 --> 00:35:39.740
And it can do that kind of stuff.

00:35:39.740 --> 00:35:41.960
And I'll show you stuff at 3G as well.

00:35:42.080 --> 00:35:44.080
And it handles that really well.

00:35:44.200 --> 00:35:48.910
And like Dave was saying earlier,
this codec really is,

00:35:48.910 --> 00:35:51.790
and it's like a web of little
things that just got better.

00:35:51.890 --> 00:35:56.520
There is new technology in there,
but a lot of it is just like,

00:35:56.520 --> 00:35:59.680
it's more of like an
evolution than it is,

00:35:59.680 --> 00:36:02.700
a brand new this, brand new that.

00:36:02.810 --> 00:36:05.680
But the thing is,
when you stack it all together,

00:36:05.690 --> 00:36:07.820
it does magic, I guess.

00:36:07.820 --> 00:36:11.180
And the big thing about that is, again,
it's at the beginning of the curve.

00:36:11.180 --> 00:36:13.160
We've just sort of gotten
to know this thing.

00:36:13.160 --> 00:36:15.090
And we're just going to
get to know it better.

00:36:15.200 --> 00:36:17.340
And you can expect to
see quality improvements,

00:36:17.340 --> 00:36:21.770
speed improvements,
all that stuff coming up.

00:36:24.880 --> 00:36:27.940
three quick slides, promise,
of technologies.

00:36:27.940 --> 00:36:31.680
So there is like a list of things.

00:36:31.680 --> 00:36:37.220
One of the things that Codecs
do is it does transfer coding.

00:36:37.290 --> 00:36:42.440
So the big thing about this transfer
coder is that it's integer based,

00:36:42.440 --> 00:36:46.260
which means that the
reconstructions are bit exact,

00:36:46.260 --> 00:36:50.990
which means if I'm a decoder implementer
and he's a decoder implementer,

00:36:51.170 --> 00:36:56.270
our decoders will be able to
exactly reconstruct whatever

00:36:56.290 --> 00:36:57.720
it is that's been encoded.

00:36:57.730 --> 00:37:06.900
Previously, in old school kind of coding,
the precision to which you want

00:37:06.900 --> 00:37:09.310
to reconstruct your transform
is up to the implementer,

00:37:09.580 --> 00:37:12.900
except there's a specification on the
tolerance and how precise you have to be,

00:37:12.910 --> 00:37:14.080
that kind of stuff.

00:37:14.080 --> 00:37:16.900
Also, it's a 4 by 4,
which means that-- what did I say?

00:37:16.900 --> 00:37:19.280
Small support reduces blocking
and ringing artifacts.

00:37:19.280 --> 00:37:20.180
It's true.

00:37:20.230 --> 00:37:22.950
But basically, it means anything that you
add within the 4 by 4 doesn't

00:37:22.960 --> 00:37:24.220
propagate the other 4 by 4.

00:37:24.220 --> 00:37:26.100
So you get crisper pictures.

00:37:26.100 --> 00:37:27.090
Improved interprediction.

00:37:27.150 --> 00:37:30.030
Most people think of
prediction in the time domain.

00:37:30.040 --> 00:37:33.440
Well, Codecs, since MPEG-1,
have had prediction

00:37:33.440 --> 00:37:35.870
within a single image.

00:37:35.880 --> 00:37:39.300
But the thing about this guy
is there's just a lot of ways

00:37:39.320 --> 00:37:40.840
to predict within an image.

00:37:40.840 --> 00:37:42.540
And that really helps
the interprediction.

00:37:42.540 --> 00:37:45.620
And what you might not know-- I mean,
all these compresses details better,

00:37:45.650 --> 00:37:46.560
gradients, blah, blah, blah.

00:37:46.600 --> 00:37:49.420
But it actually helps in
high motion areas as well.

00:37:49.420 --> 00:37:51.740
Because what happens
when the motion fails?

00:37:51.740 --> 00:37:54.160
You throw in interprediction,
or interblocks,

00:37:54.160 --> 00:37:57.400
and then the prediction really
helps you code that thing.

00:37:58.090 --> 00:38:03.620
A couple of things on motion.

00:38:03.620 --> 00:38:06.700
The motion block sizes are,
you got a ton of them now.

00:38:06.700 --> 00:38:09.510
MPEG-1, you've got this thing
called the macro block,

00:38:09.570 --> 00:38:09.990
right?

00:38:09.990 --> 00:38:11.420
And the macro blocks still exist.

00:38:11.650 --> 00:38:15.170
There are 16 by 16 blocks
that tile the image.

00:38:15.170 --> 00:38:18.650
And typically what happens is,
well back then,

00:38:18.660 --> 00:38:21.160
you get to move that 16 by 16
block around the previous reference

00:38:21.160 --> 00:38:22.730
image to look for the best match.

00:38:22.980 --> 00:38:28.130
Well, in 264, you've got 16 by 16 blocks,
and you've got like 16 by 8 blocks,

00:38:28.140 --> 00:38:30.190
all the way down to 4 by 4 blocks.

00:38:30.190 --> 00:38:33.380
You've got a lot of ways to
search for previous stuff,

00:38:33.380 --> 00:38:35.260
and it's just very expressive.

00:38:35.290 --> 00:38:38.990
And it really, really helps code some of
the more complicated motion.

00:38:38.990 --> 00:38:41.480
Complicated motion doesn't
mean a lot of motion.

00:38:41.480 --> 00:38:44.540
This isn't necessarily complicated,
but a lot of stuff

00:38:44.540 --> 00:38:47.200
going in different ways,
and a lot of details going on.

00:38:47.200 --> 00:38:50.800
So another thing about the motion
estimation is this quarter-pill pixel.

00:38:50.810 --> 00:38:51.700
Quarter-pill is the number of
pixels that are in the image.

00:38:51.700 --> 00:38:51.700
Quarter-pill is the number of
pixels that are in the image.

00:38:51.700 --> 00:38:51.700
Quarter-pill is the number of
pixels that are in the image.

00:38:51.700 --> 00:38:51.700
Quarter-pill is the number of
pixels that are in the image.

00:38:51.700 --> 00:38:53.770
Quarter-pill is the number of pixels that
are in the Quarter pixel interpolation,

00:38:53.770 --> 00:38:57.080
quarter pixel precision,
I guess is what I said.

00:38:57.200 --> 00:39:00.320
It's been around,
but this one is actually very good.

00:39:00.320 --> 00:39:04.860
Basically what that means is
every time you go subpel pixel,

00:39:04.860 --> 00:39:08.440
you do a filtering,
you filter your pixels.

00:39:08.440 --> 00:39:11.220
When you go quarterpel,
you get another filter in there.

00:39:11.220 --> 00:39:14.020
And you get a lot of good stuff.

00:39:14.020 --> 00:39:17.800
And it really provides some of this
crisp stuff that I've been talking about.

00:39:17.800 --> 00:39:20.640
And you'll see that in demos as well.

00:39:20.640 --> 00:39:27.260
And then my final slide,
it's got a loop filter that does

00:39:27.260 --> 00:39:28.720
deep blocking on the 4.4 boundary.

00:39:28.800 --> 00:39:32.800
So you've heard of pulse
filters and stuff like that,

00:39:32.900 --> 00:39:33.340
right?

00:39:33.340 --> 00:39:36.710
The distinction between this and, say,
a previous codec is that

00:39:36.860 --> 00:39:40.800
the filter actually sits
inside of the encoding loop.

00:39:40.890 --> 00:39:44.460
Generically speaking,
encoders have a forged encoding path.

00:39:44.460 --> 00:39:47.820
And then it's got a little
decoder in its belly,

00:39:47.820 --> 00:39:50.580
I guess,
to give you the reconstructed frames.

00:39:50.580 --> 00:39:52.030
But this filter sits inside there.

00:39:52.130 --> 00:39:54.840
So the encoder runs this filter
as well as the decoder and

00:39:54.840 --> 00:39:56.340
helps you with the prediction.

00:39:56.340 --> 00:40:00.390
It gets rid of some of the
blocky artifacts and helps you

00:40:00.390 --> 00:40:02.320
with the motion estimation.

00:40:02.320 --> 00:40:06.980
And because it's done in 4x4s,
basically it's got the capability

00:40:06.990 --> 00:40:08.840
of touching every single pixel.

00:40:08.840 --> 00:40:10.800
And it's a very,
very effective smoothing filter.

00:40:10.800 --> 00:40:12.710
And you'll see that too.

00:40:12.940 --> 00:40:15.270
There's a bunch more things.

00:40:15.390 --> 00:40:21.280
So one more thing I'll talk
about is the entropy coding.

00:40:21.440 --> 00:40:44.560
This context-adaptive this,
context-adaptive that.

00:40:44.560 --> 00:40:44.560
And it's actually this fact that it's
context-adaptive is helping us a lot.

00:40:44.560 --> 00:40:44.560
And we see quite a bit of gain
just because of this stuff.

00:40:44.560 --> 00:40:44.560
I mean, the first one is what you
might know as Huffman.

00:40:44.560 --> 00:40:44.560
It's very close to Huffman,
table-driven kind of stuff.

00:40:44.560 --> 00:40:44.560
The second one, if there's metacoding,
that's been around for a while, too.

00:40:44.560 --> 00:40:44.560
But the fact that they worked out
the context stuff was brilliant,

00:40:44.560 --> 00:40:44.560
I guess.

00:40:44.770 --> 00:40:45.920
and more.

00:40:45.920 --> 00:40:51.080
So if you end up stacking
all this stuff together,

00:40:51.080 --> 00:40:54.270
you get what we get at the end.

00:40:54.270 --> 00:41:00.310
And you'll see that the categories
have been around for a long time,

00:41:00.310 --> 00:41:00.310
and David is absolutely correct.

00:41:00.310 --> 00:41:00.310
This is just yet another one
in the evolution of stuff.

00:41:00.310 --> 00:41:00.310
But when you put them all together,

00:41:00.500 --> 00:41:14.700
[Transcript missing]

00:41:14.820 --> 00:41:18.140
If you find the right path
through this search space,

00:41:18.140 --> 00:41:20.770
you can get some pretty amazing quality.

00:41:22.400 --> 00:41:24.090
What did I say?

00:41:24.130 --> 00:41:26.940
OK, so now we can go and drop this thing.

00:41:27.050 --> 00:41:31.610
Can we go to demo one, I think?

00:41:38.610 --> 00:41:39.100
Thanks.

00:41:39.100 --> 00:41:46.400
Let's see another one,
since we've got a little bit of time.

00:41:47.390 --> 00:41:50.530
This one you might
have seen this morning.

00:41:50.540 --> 00:41:52.380
You guys should have
been there this morning.

00:41:52.400 --> 00:41:53.840
But if you haven't, here it is.

00:41:53.850 --> 00:41:56.880
It's never before seen, right?

00:41:56.880 --> 00:41:58.610
Something like that.

00:43:19.600 --> 00:43:23.980
What's interesting about this one is
it was just like a barrage of images

00:43:23.980 --> 00:43:28.830
and scenes and half-second shots.

00:43:28.920 --> 00:43:32.010
I'll show you a side-by-side here.

00:43:38.200 --> 00:43:40.900
Let me put him away so
that you don't get hosed.

00:43:40.900 --> 00:43:43.620
And we can see this is
Will Smith in stereo.

00:43:43.620 --> 00:43:49.740
Oh wait, I got to do the play all,
don't I?

00:43:49.800 --> 00:43:51.570
So I'll do it again.

00:44:03.200 --> 00:44:04.960
Homicide.

00:44:04.960 --> 00:44:06.560
Spooner.

00:44:06.560 --> 00:44:08.320
Identify.

00:44:08.320 --> 00:44:10.250
Detective.

00:44:10.250 --> 00:44:11.210
Wow.

00:44:11.210 --> 00:44:14.890
Richest man in the world.

00:44:14.890 --> 00:44:18.410
Can I offer you a coffee?

00:44:18.410 --> 00:44:20.810
Sure, why not?

00:44:20.810 --> 00:44:23.800
I don't think anyone saw this coming,
so whatever I can do to help.

00:44:23.800 --> 00:44:23.800
Sugar.

00:44:23.800 --> 00:44:23.800
I'm sorry.

00:44:24.410 --> 00:44:26.300
For the coffee.

00:44:26.380 --> 00:44:27.200
Sugar?

00:44:27.230 --> 00:44:28.110
Ah.

00:44:28.310 --> 00:44:30.680
Oh, you thought I was calling you sugar.

00:44:30.750 --> 00:44:33.510
Hey, you're not that rich.

00:44:34.500 --> 00:44:36.890
So that's a vintage Will Smith.

00:44:36.900 --> 00:44:38.530
I should probably stop
it in a better place.

00:44:38.560 --> 00:44:38.920
That's all right.

00:44:39.100 --> 00:44:41.020
So one of them is 264.

00:44:41.020 --> 00:44:45.020
Let me stop him in a-- there.

00:44:45.200 --> 00:44:46.750
So you can see this.

00:44:46.960 --> 00:44:49.950
The one on your left is H.264.

00:44:49.960 --> 00:44:50.960
It says so.

00:44:50.970 --> 00:44:55.230
And they're about comparable quality,
I would say.

00:44:55.260 --> 00:44:59.470
But the big deal is that
MPEG-4 is running at--

00:45:00.100 --> 00:45:02.650
I think 1100 kilobits,
which is what it takes.

00:45:02.850 --> 00:45:06.770
480 by whatever it is, 240,
something like that.

00:45:06.770 --> 00:45:09.310
1100 kilobits, 1.1 megabits.

00:45:09.310 --> 00:45:13.420
And H.264 is running at 550 kilobits,
exactly half the rate.

00:45:13.710 --> 00:45:16.540
So that ain't too bad, huh?

00:45:19.700 --> 00:45:22.200
So if you want to post beautiful stuff,
this is one way to do it.

00:45:22.200 --> 00:45:23.850
So the other way to look at this,
of course,

00:45:23.920 --> 00:45:26.380
I think you've seen this before,
is this is what you could

00:45:26.390 --> 00:45:28.140
do then at the same bitrate.

00:45:28.200 --> 00:45:31.200
My robots don't kill people.

00:45:31.200 --> 00:45:33.200
That thing threw
somebody out of a window.

00:45:33.200 --> 00:45:35.200
Is that registering with you?

00:45:35.200 --> 00:45:36.200
You're not suggesting?

00:45:36.200 --> 00:45:38.740
So if you crank up the
bitrate to 11 kilobits,

00:45:38.740 --> 00:45:41.200
you can actually send this and H.264.

00:45:41.200 --> 00:45:44.620
This is 960 across by 520,
something like that.

00:45:44.620 --> 00:45:49.450
So basically four times the
size and the same bitrate.

00:45:51.950 --> 00:45:55.000
So there you go.

00:45:55.000 --> 00:45:57.000
Maybe I can show you
something else as well.

00:45:57.000 --> 00:45:59.000
I can actually quit that.

00:45:59.000 --> 00:46:01.000
Can I ask a question?

00:46:01.000 --> 00:46:02.620
Yeah, why not?

00:46:02.620 --> 00:46:04.570
I might not answer it, though.

00:46:08.200 --> 00:46:12.180
I'll answer that later.

00:46:12.190 --> 00:46:12.700
How's that?

00:46:12.700 --> 00:46:13.560
Okay.

00:46:13.580 --> 00:46:16.580
Any more questions?

00:46:16.900 --> 00:46:17.780
I'll just answer them later.

00:46:17.780 --> 00:46:18.100
All right.

00:46:18.180 --> 00:46:22.790
So with 26 minutes to go,
let me show you a little bit

00:46:22.790 --> 00:46:26.180
more about what H.264 can do.

00:46:26.180 --> 00:46:27.290
A little bit about the artifacts.

00:46:27.370 --> 00:46:31.480
So this is a-- here.

00:46:31.480 --> 00:46:34.690
This is like the logo of
somebody's fire truck.

00:46:35.620 --> 00:46:40.760
It's nice, but it's got very hard edges
and it's got these weird,

00:46:40.760 --> 00:46:42.680
very detailed areas.

00:46:42.790 --> 00:46:44.900
So if you remember that.

00:46:45.490 --> 00:46:48.560
So this is what you get with
H.264 at a megabit of this.

00:46:48.690 --> 00:46:50.750
Oh, by the way, this is 640 by something.

00:46:50.850 --> 00:46:53.320
640 by 400, 480.

00:46:53.410 --> 00:46:55.210
Actually, 640 to 480 exactly.

00:46:55.300 --> 00:46:55.980
Maybe not.

00:46:56.260 --> 00:46:57.020
Something like that.

00:46:57.020 --> 00:47:01.540
But this is H.264 running at what you
would expect for standard dev sizes.

00:47:01.540 --> 00:47:03.280
And you get this, and it's decent, right?

00:47:03.280 --> 00:47:06.000
And what I want to show you is what it
does as it goes farther and farther down.

00:47:06.010 --> 00:47:12.000
At 500, you start to lose some
of this stuff in here.

00:47:12.000 --> 00:47:14.110
I don't know if you can tell.

00:47:14.120 --> 00:47:15.240
Up there, you may not be able to tell.

00:47:15.280 --> 00:47:17.160
But it looks pretty good at 500.

00:47:17.160 --> 00:47:20.640
And the edges are fairly crisp, right?

00:47:20.640 --> 00:47:24.320
If you really want to
jerk this codec around,

00:47:24.320 --> 00:47:27.260
you might want to try 150 kilobits,
right?

00:47:27.260 --> 00:47:28.330
Don't do this at home.

00:47:28.340 --> 00:47:30.540
You don't want to do
standard dev at 150 kilobits.

00:47:30.550 --> 00:47:33.570
But if you did,
what you'll notice is that

00:47:33.630 --> 00:47:35.050
none of the edges go away.

00:47:35.100 --> 00:47:37.140
Isn't that pretty cool?

00:47:37.140 --> 00:47:37.640
Yeah.

00:47:37.640 --> 00:47:41.780
But you get smoothness
through the details.

00:47:44.820 --> 00:47:46.940
You know,
I've been looking at codecs for a while.

00:47:46.940 --> 00:47:48.130
This one impresses me.

00:47:48.360 --> 00:47:53.330
And I can say that publicly, I think.

00:47:54.200 --> 00:47:58.700
Okay, FireTrack, oh yeah.

00:47:58.830 --> 00:48:00.800
The scalability demo,
I've got one for you.

00:48:00.800 --> 00:48:05.160
And I want to do it just to show you
that it doesn't take a G5 to do this,

00:48:05.160 --> 00:48:06.940
so we've got a dual G5 in the back.

00:48:07.030 --> 00:48:09.190
This is somebody's stock iBook.

00:48:09.190 --> 00:48:10.910
I think it's a gigahertz.

00:48:11.070 --> 00:48:12.730
In fact, it is a gigahertz.

00:48:12.860 --> 00:48:14.930
And I want to show you
a couple of things.

00:48:15.010 --> 00:48:19.670
We've seen Phantom on here,
so we'll just show you Phantom again.

00:48:20.700 --> 00:48:27.200
[Transcript missing]

00:48:48.900 --> 00:48:51.830
What you were just seeing
there is a megabit,

00:48:51.860 --> 00:48:56.020
broadband megabit type,
standard def size phantom running

00:48:56.030 --> 00:48:59.400
on this G4 machine over here,
gigahertz thing.

00:48:59.400 --> 00:49:03.860
And like I said, the codec actually,
you can use it at all these

00:49:03.860 --> 00:49:08.930
various bit rates and sizes,
and it doesn't fail, which is yet another

00:49:08.930 --> 00:49:10.480
amazing thing for me.

00:49:10.610 --> 00:49:12.430
I've got one at DSL rates.

00:49:12.540 --> 00:49:13.530
I call it DSL.

00:49:13.620 --> 00:49:16.080
It's about 300 kilobits.

00:49:16.080 --> 00:49:16.480
This would be what you would call--

00:49:16.600 --> 00:49:31.000
[Transcript missing]

00:49:33.400 --> 00:49:35.400
Doesn't it look good?

00:49:35.400 --> 00:49:36.400
It looks pretty decent.

00:49:36.400 --> 00:49:47.830
So, and if you wanted to see,
for example, our 3G version.

00:49:52.200 --> 00:49:54.200
The audio is a lot different.

00:49:54.200 --> 00:50:03.070
Our video hangs together,
so I'm... Like I said, I'm...

00:50:04.000 --> 00:50:07.460
I'm pretty darn impressed
with what can happen.

00:50:07.460 --> 00:50:11.290
Let's see.

00:50:12.100 --> 00:50:12.640
All right.

00:50:12.930 --> 00:50:20.220
So one of the things that we'll
be shipping with our seed,

00:50:20.220 --> 00:50:22.980
or you'll find it in your seed,
and you all got one, right?

00:50:22.990 --> 00:50:24.000
The tiger seed?

00:50:24.000 --> 00:50:25.910
Go get one if you don't have one.

00:50:25.910 --> 00:50:31.590
Is the ability to export
one of these things.

00:50:33.140 --> 00:50:39.270
What we've done is we've taken
all the complicated stuff and

00:50:39.330 --> 00:50:42.440
we've pulled it down to one.

00:50:42.440 --> 00:50:43.860
Can you switch screens?

00:50:43.860 --> 00:50:46.440
Oh, yeah, thank you.

00:50:46.540 --> 00:50:47.630
So I'm on demo one now.

00:50:52.360 --> 00:50:53.120
to one little thing.

00:50:53.200 --> 00:51:03.590
So this is maybe a three-second
standard depth size clip.

00:51:03.600 --> 00:51:05.280
Let me get this going here.

00:51:05.280 --> 00:51:07.780
What you can do with
your seed to get it home,

00:51:07.870 --> 00:51:10.540
and we really encourage
you to try this out.

00:51:10.540 --> 00:51:12.220
And this is why we did this.

00:51:12.220 --> 00:51:14.830
We went through and put this together.

00:51:14.840 --> 00:51:18.610
You'll see in your list of exporters,
maybe I should do this so that you

00:51:18.680 --> 00:51:20.590
guys can see what's going on here.

00:51:20.590 --> 00:51:22.080
You turn into exporters.

00:51:22.300 --> 00:51:23.840
You get this little dialog up.

00:51:23.840 --> 00:51:26.440
And in the list of exporters,
what you'll see is this thing

00:51:26.440 --> 00:51:30.680
called Apple 264/AVC Preview Movie.

00:51:30.740 --> 00:51:34.220
Just remember it's a preview.

00:51:34.220 --> 00:51:36.580
And you hit options and you get one.

00:51:37.610 --> 00:51:39.040
And it's what do you want.

00:51:39.210 --> 00:51:42.360
So otherwise,
you can go crazy with all the knobs.

00:51:42.360 --> 00:51:44.760
And we've figured out what to
do with that kind of stuff.

00:51:44.760 --> 00:51:46.650
So let us deal with that,
and you deal with this.

00:51:46.760 --> 00:51:49.980
So this is a standard-death movie,
so maybe you want it about 800 kilobits.

00:51:49.980 --> 00:51:51.180
So that's what you do.

00:51:51.210 --> 00:51:54.090
And I want to put it on my desktop,
so I go to the desktop

00:51:54.100 --> 00:51:55.530
and I just save it.

00:51:55.670 --> 00:51:56.200
Cool.

00:51:56.270 --> 00:51:59.580
So it's going to pump for a while.

00:51:59.640 --> 00:52:05.720
But we want you to try this.

00:52:06.130 --> 00:52:08.000
We're pretty proud of what it can do.

00:52:08.000 --> 00:52:11.620
And I just want you to get out there
and get your content through this thing

00:52:11.620 --> 00:52:14.000
and see what kind of stuff we can do.

00:52:14.000 --> 00:52:18.450
And we're just in the middle of this,
and this is sort of a little

00:52:18.450 --> 00:52:21.840
snapshot of what we've been doing.

00:52:22.000 --> 00:52:26.320
And I just want you to play with
it and I'd love to hear feedback

00:52:26.320 --> 00:52:29.000
from you guys about what we can do.

00:52:29.000 --> 00:52:31.000
So, it's done.

00:52:31.440 --> 00:52:32.160
No, it's not done.

00:52:32.160 --> 00:52:32.870
Okay.

00:52:33.240 --> 00:52:34.080
Do you want to leave it on that?

00:52:34.150 --> 00:52:35.520
Yeah, that's fine.

00:52:35.520 --> 00:52:37.240
It's done.

00:52:37.240 --> 00:52:39.040
That should have been about 50 seconds,
by the way.

00:52:39.040 --> 00:52:42.080
So,
in case you want to know how fast it is.

00:52:43.040 --> 00:52:47.540
And sure enough, look at this thing.

00:52:47.570 --> 00:52:48.860
All three seconds of it.

00:52:48.860 --> 00:52:49.040
Nice.

00:52:49.060 --> 00:52:51.980
And let's see.

00:52:52.500 --> 00:52:53.740
How big is it?

00:52:53.740 --> 00:52:55.780
Would it say 800?

00:52:55.780 --> 00:52:56.950
Let's see.

00:52:56.960 --> 00:53:00.420
9 times 8 is, what is that?

00:53:00.550 --> 00:53:01.140
720?

00:53:01.140 --> 00:53:02.380
Am I doing my math right?

00:53:02.380 --> 00:53:05.320
Times 4, it's about 800 kilobits,
so it actually works out.

00:53:05.450 --> 00:53:12.690
So the way we did our exporter is
it does multi-passing automatically.

00:53:12.940 --> 00:53:15.340
It chooses how many times
it wants to go through it.

00:53:15.360 --> 00:53:18.280
And it picks,
it hits the bit rate within 5%.

00:53:18.360 --> 00:53:20.230
So if you don't see a 5%, call me.

00:53:20.440 --> 00:53:21.150
No, don't call me.

00:53:21.250 --> 00:53:22.080
Call Amy.

00:53:22.090 --> 00:53:25.790
And give her a hard time, okay?

00:53:25.910 --> 00:53:29.710
So, and by the way,
all the trailers that you've been seeing,

00:53:29.880 --> 00:53:31.480
we've been making them like this.

00:53:31.570 --> 00:53:35.210
So, you know,
just so you know what kind of quality

00:53:35.210 --> 00:53:37.810
you can expect out of this stuff.

00:53:37.810 --> 00:53:37.810
So.

00:53:42.520 --> 00:53:46.510
Um, yeah, I, I, that's it.

00:53:46.660 --> 00:53:49.090
Um, so let's go back to, um,

00:53:56.290 --> 00:53:58.260
Do I need Tiger to play them?

00:53:58.310 --> 00:53:58.820
Yes.

00:53:59.050 --> 00:53:59.960
Yes, you do.

00:54:00.000 --> 00:54:05.790
And I got a point in my--
you guys are all jumping.

00:54:06.600 --> 00:54:07.720
Yeah, that's point number two.

00:54:07.720 --> 00:54:08.890
You'll see that.

00:54:09.140 --> 00:54:12.530
So let me just go back
over what I just said.

00:54:12.590 --> 00:54:15.460
So we've got a decoder in the TigerSeed.

00:54:15.470 --> 00:54:19.500
And we've got a video-only
exporter in the TigerSeed.

00:54:19.500 --> 00:54:23.040
It's integrated into QuickTime,
as you would expect.

00:54:23.050 --> 00:54:26.250
And then the multi-pass business,
it does that on its own.

00:54:26.270 --> 00:54:30.090
The UI is very simple,
so you guys don't get confused.

00:54:30.100 --> 00:54:31.510
But it works.

00:54:31.530 --> 00:54:36.160
And it requires a G4 or G5,
both the decoder and the encoder.

00:54:36.260 --> 00:54:39.870
And one thing you should know,
the bit streams are

00:54:39.870 --> 00:54:44.200
keyed to the tiger seed,
which means don't go and re-encode

00:54:44.200 --> 00:54:48.920
your archive and hope that it
will play later because it won't.

00:54:48.920 --> 00:54:52.310
So yes,
I don't know who asked that question,

00:54:52.310 --> 00:54:54.380
but yes, it's tiger only.

00:54:54.430 --> 00:54:55.780
So, okay.

00:55:00.200 --> 00:55:08.770
Hsi-Jung Wu, and David Singer,
Greg Wallace, Hsi-Jung Wu,

00:55:08.770 --> 00:55:08.770
and David Singer, Greg Wallace,

00:55:10.170 --> 00:55:13.000
What if we do all the
questions at the end?

00:55:13.060 --> 00:55:17.660
And we've got just a few more minutes,
so what I'll do is I'll end with

00:55:17.660 --> 00:55:21.920
my favorite disturbing movie,
and then we can go into

00:55:21.920 --> 00:55:24.000
a question session.

00:55:24.000 --> 00:55:28.990
Oh, and can we go to demo one, please?

00:55:39.000 --> 00:55:41.620
Ten days ago,
one of my satellites over in

00:55:41.620 --> 00:55:45.010
Antarctica discovered a pyramid.

00:55:46.200 --> 00:55:48.140
What exactly on the ice is this?

00:55:48.140 --> 00:55:50.090
It's not on the ice.

00:55:50.100 --> 00:55:53.300
It's 2,000 feet under it.

00:55:57.200 --> 00:55:59.930
Let's make history.

00:55:59.940 --> 00:56:01.040
Oh, my God.

00:56:01.040 --> 00:56:05.540
Whoever built this pyramid
believed in ritual sacrifice.

00:56:05.540 --> 00:56:07.180
Did you hear that?

00:56:30.700 --> 00:56:32.700
This room was called?

00:56:32.700 --> 00:56:36.390
Sacrificial chamber.

00:57:43.510 --> 00:57:45.000
It's like the best.

00:57:45.100 --> 00:57:47.380
So try it out.

00:57:47.380 --> 00:57:48.560
This is the codec to go to.

00:57:48.560 --> 00:57:51.130
I mean, this quality is-- I just
haven't seen this stuff,

00:57:51.140 --> 00:57:52.320
this kind of stuff in a while.

00:57:52.440 --> 00:57:55.850
So I think we're done.