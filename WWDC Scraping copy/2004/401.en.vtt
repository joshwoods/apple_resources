WEBVTT

00:00:12.500 --> 00:00:14.500
Hello everyone.

00:00:14.500 --> 00:00:18.050
Welcome to Advanced Website
Development Techniques.

00:00:19.600 --> 00:01:28.800
[Transcript missing]

00:01:29.130 --> 00:01:32.620
and these talks are going to
cover both Safari and how to make

00:01:32.700 --> 00:01:37.060
use of it using HTML and making
documents for Safari and WebKit,

00:01:37.110 --> 00:01:39.650
the engine inside Safari.

00:01:40.760 --> 00:01:43.740
All right,
advanced website development techniques.

00:01:43.810 --> 00:01:46.280
What exactly are we talking about here?

00:01:46.320 --> 00:01:49.000
We're talking about techniques
for web applications,

00:01:49.090 --> 00:01:52.040
for more advanced sites that
aren't just a collection of

00:01:52.040 --> 00:01:55.830
web pages and web documents,
that really go beyond that to

00:01:55.880 --> 00:01:58.570
give the user a richer experience.

00:01:58.720 --> 00:02:02.920
They're particularly useful
for data-intensive and

00:02:03.000 --> 00:02:05.080
highly interactive sites.

00:02:05.800 --> 00:02:08.880
All of these techniques that I'm going
to discuss today work in Safari and

00:02:08.880 --> 00:02:11.340
other webkit-based applications.

00:02:11.470 --> 00:02:13.430
And many are also supported
in other browsers,

00:02:13.430 --> 00:02:15.770
and I'll try to mention
throughout the talk which are

00:02:15.770 --> 00:02:18.050
supported in which browsers.

00:02:18.540 --> 00:02:21.730
and finally, we're going to have really
in-depth coverage here today.

00:02:21.770 --> 00:02:24.350
We're going to go through a lot
of code samples and hopefully

00:02:24.390 --> 00:02:28.270
by the time you leave this talk,
you should know how to use all of these

00:02:28.270 --> 00:02:30.780
techniques in your own web applications.

00:02:31.220 --> 00:02:33.100
What are we going to cover specifically?

00:02:33.370 --> 00:02:36.430
First, LiveConnect,
a technique that you can use to

00:02:36.430 --> 00:02:40.100
communicate between JavaScript on
the page and Java applets.

00:02:40.100 --> 00:02:43.940
We're going to talk about drag and drop,
how to do drag and drop in your

00:02:43.940 --> 00:02:46.100
web pages two different ways.

00:02:46.120 --> 00:02:50.180
We're going to talk about HTML editing
and how to use that inside your

00:02:50.240 --> 00:02:54.100
own web pages for pieces of the
document to make them editable.

00:02:54.230 --> 00:02:58.110
We're going to talk about XmlHttpRequest,
which is a technique you can use

00:02:58.240 --> 00:03:00.100
for backend server communication.

00:03:00.100 --> 00:03:03.300
And finally, we'll talk a little about
putting it all together and

00:03:03.300 --> 00:03:07.100
how to combine these techniques
to make a good web application.

00:03:07.500 --> 00:03:10.240
and don't forget,
this stuff is also really

00:03:10.240 --> 00:03:12.770
useful for dashboard widgets.

00:03:12.770 --> 00:03:15.420
So if you want to win that
PowerBook or that iPod,

00:03:15.620 --> 00:03:17.600
pay attention.

00:03:17.660 --> 00:03:21.150
The first topic we're going
to cover is LiveConnect.

00:03:22.550 --> 00:03:24.790
Now,
LiveConnect is kind of a catch-all term.

00:03:24.950 --> 00:03:27.760
People use it to refer
to many different things.

00:03:27.980 --> 00:03:33.520
But in Safari, when we say LiveConnect,
we mean Java-to-JavaScript communication.

00:03:33.670 --> 00:03:36.440
Some of you may be interested
in plugin scriptability.

00:03:36.580 --> 00:03:41.160
If so, make sure to catch the Plugin
Development for WebKit and Safari session

00:03:41.160 --> 00:03:43.190
later during this conference.

00:03:44.150 --> 00:03:46.620
What's LiveConnect good for exactly,
you may wonder?

00:03:46.930 --> 00:03:51.500
Well, one thing it's good for is you can
connect to existing Java applets.

00:03:51.610 --> 00:03:54.700
If you already have a Java applet
around that does something useful

00:03:55.090 --> 00:03:58.180
and you'd really like to integrate
that functionality into your webpage,

00:03:58.290 --> 00:04:01.390
then LiveConnect can be a good
way to go instead of trying

00:04:01.390 --> 00:04:03.190
to totally reimplement it.

00:04:04.170 --> 00:04:07.640
It's also good for going beyond
what you can really practically

00:04:07.650 --> 00:04:09.820
do in JavaScript and HTML.

00:04:09.940 --> 00:04:12.900
Web technologies are really great,
but JavaScript is a fairly slow

00:04:13.040 --> 00:04:17.340
interpreted language and there's certain
things that just won't cut it for it.

00:04:17.460 --> 00:04:19.870
For example, 3D graphics.

00:04:20.220 --> 00:04:22.980
That's a little beyond what
you can do with JavaScript,

00:04:22.980 --> 00:04:24.450
but with Java you can do it.

00:04:25.520 --> 00:04:36.450
and Kevin DeCroix have been
working on the development of

00:04:36.450 --> 00:04:42.740
the latest web applications.

00:04:42.740 --> 00:04:42.740
This session is for web developers
who want the latest information

00:04:42.740 --> 00:04:42.740
about developing highly interactive
data-intensive web applications

00:04:42.740 --> 00:04:42.740
using XmlHttpRequest objects,
LiveConnect,

00:04:42.740 --> 00:04:42.740
and forms with rich text content.

00:04:43.850 --> 00:04:46.510
Here's a very simple diagram
of how LiveConnect works.

00:04:46.770 --> 00:04:49.650
JavaScript in your page
can call the Java applet,

00:04:49.650 --> 00:04:52.300
and the Java applet can call
JavaScript in your page.

00:04:52.380 --> 00:04:52.740
That's it.

00:04:52.900 --> 00:04:54.240
It's all there is to it.

00:04:54.540 --> 00:04:56.440
It's very straightforward.

00:04:56.570 --> 00:04:59.190
So let's look at a simple code example.

00:04:59.330 --> 00:05:03.070
To talk to a JavaScript applet,
you just get the object for it

00:05:03.140 --> 00:05:06.540
out of the applets array and
start making method calls on it,

00:05:06.620 --> 00:05:07.700
like this.

00:05:07.780 --> 00:05:11.480
You may notice I've put the may
script attribute on the applet

00:05:11.480 --> 00:05:16.200
tag here to make it scriptable,
and then later from JavaScript,

00:05:16.320 --> 00:05:18.290
just start calling methods.

00:05:18.500 --> 00:05:20.820
So let's see a little demo.

00:05:20.960 --> 00:05:25.420
I'm going to have Kevin Decker come
up here to the stage to help me out.

00:05:25.930 --> 00:05:26.490
Hi, Maciej.

00:05:26.720 --> 00:05:27.780
Hey, Kevin.

00:05:27.800 --> 00:05:28.880
Hi.

00:05:28.900 --> 00:05:31.460
OK, so what we have here
is we have this applet,

00:05:31.460 --> 00:05:33.030
which is right here.

00:05:33.060 --> 00:05:34.650
Wait for them to put it on screen.

00:05:34.780 --> 00:05:35.400
All right.

00:05:35.680 --> 00:05:37.230
There we go.

00:05:37.330 --> 00:05:40.490
And I'm going to go ahead and start
the applet and show you what it does.

00:05:40.700 --> 00:05:55.200
[Transcript missing]

00:05:55.590 --> 00:05:58.310
So this applet was
actually created by NASA.

00:05:58.410 --> 00:06:03.040
It lets you make your own custom 3D
models and specify them in JavaScript,

00:06:03.040 --> 00:06:05.100
and then Java does the animation.

00:06:05.260 --> 00:06:08.130
So I can imagine lots of cool
things you could do with this.

00:06:08.210 --> 00:06:13.240
You could have controls in the webpage
that let you set up what exactly the

00:06:13.240 --> 00:06:16.230
model is and then use Java to animate it.

00:06:16.450 --> 00:06:17.400
All right.

00:06:17.430 --> 00:06:18.400
That's all there is to it.

00:06:18.440 --> 00:06:18.930
LiveConnect.

00:06:18.960 --> 00:06:20.620
Back to slides.

00:06:29.000 --> 00:06:32.150
and if you're interested in
learning more about LiveConnect,

00:06:32.150 --> 00:06:37.150
there's a Nutscape LiveConnect overview
available at this extremely long URL.

00:06:37.160 --> 00:06:42.760
I'll go over the documentation
URLs again at the end of the talk.

00:06:42.760 --> 00:06:46.470
The next topic we're going
to discuss is drag and drop.

00:06:50.180 --> 00:06:51.470
All right.

00:06:51.710 --> 00:06:53.700
Drag and drop support.

00:06:53.770 --> 00:06:57.420
In the latest Safari in
the Tiger WWDC seed,

00:06:57.420 --> 00:07:00.210
we have much better
drag and drop support.

00:07:00.350 --> 00:07:02.900
And when you use drag-and-drop
in your web application,

00:07:02.900 --> 00:07:08.540
you can get sort of more of a desktop
native app feel in your web application.

00:07:08.810 --> 00:07:11.880
We provide a more convenient
API for drag-and-drop.

00:07:11.940 --> 00:07:13.760
And we'll even let you
drag between windows,

00:07:13.850 --> 00:07:17.000
including between different applications.

00:07:18.490 --> 00:07:22.720
We're going to talk about two
different techniques for drag and drop.

00:07:22.720 --> 00:07:26.200
The first technique is
mouse event-based dragging.

00:07:26.200 --> 00:07:29.340
This just uses the classic
JavaScript mouse events,

00:07:29.720 --> 00:07:34.840
mouse down, mouse up, mouse move,
and so on, to simulate a drag.

00:07:35.370 --> 00:07:41.030
and you can use this to drag or
resize elements inside a page.

00:07:41.030 --> 00:07:44.910
Again, as I said,
it uses the standard mouse handlers.

00:07:44.910 --> 00:07:47.620
And it's really only
good for in-page drag.

00:07:47.620 --> 00:07:50.840
You can't use this to drag
between different frames

00:07:50.840 --> 00:07:52.570
or to drag to other apps.

00:07:52.920 --> 00:07:56.400
We're also going to talk about
advanced drag-and-drop events.

00:07:56.490 --> 00:08:00.920
Now, these events give you a lot more
detailed control over the drag and

00:08:00.920 --> 00:08:02.600
let you do much fancier things.

00:08:02.800 --> 00:08:06.710
They let you provide a custom
drag image if you want,

00:08:07.550 --> 00:08:11.750
custom drag types,
like you can specify whether you're

00:08:11.860 --> 00:08:13.790
dragging text or URL and so forth.

00:08:13.800 --> 00:08:18.630
And they let you drag between frames,
between windows, between applications.

00:08:18.800 --> 00:08:22.530
So first let's talk about drag
and drop using mouse events.

00:08:22.800 --> 00:08:26.150
The first thing you have to do
to do this is add a mouse down

00:08:26.150 --> 00:08:27.790
handler to the appropriate element.

00:08:27.800 --> 00:08:31.390
It's very simple, just like this.

00:08:31.790 --> 00:08:36.040
One other thing I've highlighted here
besides just the mouse handler is that

00:08:36.040 --> 00:08:38.220
the element is absolute positioned.

00:08:38.290 --> 00:08:42.140
It's important to use some kind of
positioning on the element so that

00:08:42.140 --> 00:08:46.340
when you actually change the position,
it'll be reflected because if the

00:08:46.340 --> 00:08:50.070
element is in the normal HTML flow,
then the position attributes

00:08:50.070 --> 00:08:51.790
will have no effect.

00:08:52.750 --> 00:08:57.920
So the mouse down handler first saves
the initial position of the mouse cursor.

00:08:57.920 --> 00:09:00.500
It wants to know where the mouse
cursor is relative to the element,

00:09:00.500 --> 00:09:02.500
so when you finally do the drop,
you can correctly

00:09:02.500 --> 00:09:03.700
compute the new position.

00:09:03.700 --> 00:09:07.160
And this is just some simple math here.

00:09:10.560 --> 00:09:14.470
Next, it temporarily installs
an OnSelect handler.

00:09:14.700 --> 00:09:19.460
This is just to prevent accidental
text selection from happening

00:09:19.460 --> 00:09:22.390
while you're doing the drag,
since this is just keying off the

00:09:22.390 --> 00:09:25.540
normal mouse event and needs to make
sure to prevent the default action.

00:09:25.540 --> 00:09:30.510
Now, OnSelect Start is supported
in Internet Explorer,

00:09:30.530 --> 00:09:33.620
but in Mozilla,
this event is not defined.

00:09:33.620 --> 00:09:35.540
Having a handler for it
will make no difference,

00:09:35.540 --> 00:09:38.380
but the way to actually prevent
selection is to return false

00:09:38.400 --> 00:09:40.280
from the mousedown event handler.

00:09:40.500 --> 00:09:42.500
And here's the example.

00:09:42.500 --> 00:09:44.090
Very simple.

00:09:44.280 --> 00:09:48.940
We've got the function defined here,
and we add an event listener

00:09:48.940 --> 00:09:53.310
using the standard DOM call
highlighted in orange there.

00:09:54.730 --> 00:09:56.560
All right.

00:09:56.600 --> 00:09:57.940
There's more.

00:09:58.010 --> 00:10:01.720
Next, you install mouse move
and mouse up handlers.

00:10:01.720 --> 00:10:05.990
And these just compute the new position
and place the element right there.

00:10:06.060 --> 00:10:06.870
So here it goes.

00:10:07.190 --> 00:10:10.050
Here I'm showing you the move handler,
and the up handler is doing

00:10:10.050 --> 00:10:11.470
pretty much the same thing.

00:10:11.470 --> 00:10:14.880
Again,
it's got that initial saved position.

00:10:14.880 --> 00:10:20.950
Now, I'm using a trick here called
nested functions in JavaScript.

00:10:21.020 --> 00:10:24.490
If you define one function inside
another and then attach it as a handler,

00:10:24.760 --> 00:10:28.120
it actually has access to the
parameters of the nested function.

00:10:28.200 --> 00:10:31.640
So this way we have access to
this initial event and also to

00:10:31.640 --> 00:10:35.960
the initial offset variables that
I defined a couple of slides ago.

00:10:35.960 --> 00:10:39.160
And you'll be able to see more
of this in the code samples

00:10:39.160 --> 00:10:40.990
once they are downloadable.

00:10:41.640 --> 00:10:45.680
And finally, the mouse up handler removes
all the temporary event

00:10:45.790 --> 00:10:48.210
handlers that you installed.

00:10:49.120 --> 00:10:57.950
and I will be talking
about the XmlHttpRequest.

00:10:57.960 --> 00:11:06.910
This is a technique that's used
to totally override mouse move and

00:11:07.080 --> 00:11:11.410
mouse up handling for the whole
document temporarily during the drag.

00:11:11.490 --> 00:11:13.830
Now let's look at a diagram of this.

00:11:13.830 --> 00:11:18.270
I'm going to show you all the different
events that take place during the

00:11:18.380 --> 00:11:20.920
drag and process and how they relate.

00:11:20.980 --> 00:11:22.900
First we have the mouse down event.

00:11:22.900 --> 00:11:25.390
And this happens on the drag source.

00:11:25.500 --> 00:11:27.800
It's just a normal event.

00:11:27.850 --> 00:11:31.970
And the main role for this is to add
the handlers for the other events.

00:11:32.570 --> 00:11:35.530
Now we have all these other
events that are installed as

00:11:35.700 --> 00:11:37.940
capturing events on the body.

00:11:37.990 --> 00:11:42.180
We have the mouse move handler,
which sets the new position,

00:11:42.250 --> 00:11:44.520
the mouse up handler,
which removes all these

00:11:44.520 --> 00:11:46.770
temporary handlers,

00:11:47.020 --> 00:11:52.100
and the Select Start Handler,
which prevents accidental text

00:11:52.100 --> 00:11:54.220
selection during the drag.

00:11:54.220 --> 00:11:58.260
So that's it for the
first dragging technique.

00:11:58.290 --> 00:12:00.460
Let's go on to number two.

00:12:02.590 --> 00:12:04.620
Drag and drop using drag events.

00:12:04.620 --> 00:12:07.980
So drag and drop using drag
events provides a very large

00:12:08.050 --> 00:12:11.240
number of events you can use,
but you don't really need

00:12:11.330 --> 00:12:12.980
to hook up to most of them.

00:12:13.190 --> 00:12:17.070
But first of all, let's start by going
over the exhaustive list.

00:12:17.070 --> 00:12:20.670
At the drag start site where
the drag is going to originate,

00:12:20.730 --> 00:12:23.760
you have on drag start, on drag,
and on drag end.

00:12:23.760 --> 00:12:27.310
The way these fire is that on
drag start fires when you first

00:12:27.470 --> 00:12:29.320
begin dragging the element.

00:12:29.320 --> 00:12:34.100
On drag fires continuously while
you're continuing to drag it around,

00:12:34.290 --> 00:12:36.530
and on drag end fires
when the drag completes,

00:12:36.630 --> 00:12:41.610
either by dropping the item or
by the user canceling the drag.

00:12:41.610 --> 00:12:45.380
On the drag target site,
you have even more events.

00:12:45.380 --> 00:12:49.090
You have on drag enter,
which fires whenever the

00:12:49.090 --> 00:12:52.380
drag enters the element,
which might be a possible drag target.

00:12:52.380 --> 00:13:00.180
You have on drag over,
which fires continuously while

00:13:01.170 --> 00:13:02.460
you're still over the element,
and you have on drag leave

00:13:02.460 --> 00:13:04.380
when you leave the element,
without dropping, and finally,

00:13:04.490 --> 00:13:06.450
on drop if you actually do the drop.

00:13:06.450 --> 00:13:10.330
So let's look at how
you make use of these.

00:13:10.780 --> 00:13:14.260
Oh, before that, I have to talk about the
data transfer object.

00:13:14.300 --> 00:13:18.300
Attached to drag events
is a data transfer object.

00:13:18.390 --> 00:13:20.700
This lets you set the data
to actually be dragged.

00:13:20.860 --> 00:13:23.420
You don't have to drag just
whatever the element happens to be.

00:13:23.420 --> 00:13:24.920
You can set any custom data.

00:13:24.920 --> 00:13:27.620
It lets you customize the
appearance of the drag and

00:13:27.620 --> 00:13:31.160
also other parameters about it,
like what operation is it doing?

00:13:31.160 --> 00:13:32.330
Is it a copy, a move?

00:13:32.430 --> 00:13:35.990
This will affect the cursor you
see while you're doing the drag.

00:13:37.050 --> 00:13:40.650
And finally, on the receiving end,
you can actually get the data

00:13:40.650 --> 00:13:44.100
from the data transfer object
once the drag takes place.

00:13:45.330 --> 00:13:48.360
So now let's look at
the actual code samples.

00:13:48.360 --> 00:13:54.020
The first thing you do is set event
drag handlers at the drag source,

00:13:54.020 --> 00:13:55.310
like this.

00:13:55.630 --> 00:13:59.390
I've set all three here, but again,
onDragStart is probably the only

00:13:59.400 --> 00:14:02.100
one that's really important,
where you need to fill in the data

00:14:02.100 --> 00:14:05.710
and set up the drag appearance,
and onDrag and onDragEnd,

00:14:05.710 --> 00:14:08.530
as I've shown here,
you might use to give some kind

00:14:08.530 --> 00:14:12.200
of feedback at the source while
the drag is still going on.

00:14:13.230 --> 00:14:16.700
Now, you have to fill in the data
transfer object at the drag source.

00:14:16.700 --> 00:14:18.560
So here's a couple of things we're doing.

00:14:18.670 --> 00:14:22.100
We're setting a custom drag image,
not just using the default.

00:14:22.270 --> 00:14:26.530
We're setting the type of data
and the actual data contents.

00:14:26.730 --> 00:14:28.750
Here I've used a mime type, text plane.

00:14:28.760 --> 00:14:32.340
In Safari, these drag events support
arbitrary mime types.

00:14:32.410 --> 00:14:35.360
In Internet Explorer,
the only types allowed

00:14:35.410 --> 00:14:38.430
are text and URI list,
and Safari also supports

00:14:38.540 --> 00:14:40.360
those for compatibility.

00:14:40.360 --> 00:14:44.410
And finally here,
I've set the drag operations allowed,

00:14:44.410 --> 00:14:45.740
which is a copy.

00:14:45.740 --> 00:14:48.810
So you'd see the little plus icon.

00:14:48.920 --> 00:14:54.080
Next, you have to set the appropriate
event handlers at the drop target.

00:14:54.390 --> 00:14:57.230
and Paul Schmitz are the main developers
of the XmlHttpRequest project.

00:14:57.230 --> 00:14:59.700
They are the ones who are going
to be working on the development

00:14:59.700 --> 00:15:01.300
of the XmlHttpRequest project.

00:15:09.670 --> 00:15:12.730
And finally,
you have to use the data transfer object

00:15:13.250 --> 00:15:16.030
at the drop site to get the data out.

00:15:16.140 --> 00:15:17.040
Here it is.

00:15:17.090 --> 00:15:19.960
You can do whatever you want
with it once it's dropped.

00:15:20.890 --> 00:15:23.150
Okay, time for another diagram.

00:15:23.330 --> 00:15:25.800
This one's going to be a little fancier.

00:15:25.800 --> 00:15:31.290
We're going to look at first the event
handlers that you set on the drag source.

00:15:31.570 --> 00:15:35.400
OnDragStart sets up the
data transfer object.

00:15:35.430 --> 00:15:39.600
OnDrag can optionally show some
feedback while you're dragging.

00:15:39.650 --> 00:15:42.380
And OnDragEnd is going
to end the feedback,

00:15:42.470 --> 00:15:46.000
if any, that you were showing,
those last two being optional.

00:15:46.070 --> 00:15:50.390
Then there's all the event handlers
that you might have at the drag target.

00:15:50.480 --> 00:15:53.700
You have DragEnter,
which you get when you first enter,

00:15:53.750 --> 00:15:55.900
and you might use that to show
some kind of feedback that this

00:15:55.900 --> 00:15:58.400
is a valid drop target or not.

00:15:58.450 --> 00:16:03.500
DragOver, which fires continuously
while you're over the element.

00:16:03.600 --> 00:16:07.100
Drop, which fires only if you
actually drop inside the target.

00:16:07.100 --> 00:16:12.200
Or alternately, you get DragLeave,
if the user leaves the element

00:16:12.200 --> 00:16:14.690
without actually performing the drop.

00:16:17.200 --> 00:16:18.100
So that's it.

00:16:18.120 --> 00:16:20.200
Now let's look at a little demo here.

00:16:20.240 --> 00:16:25.540
What we have is a shared annotation
server that lets you mark up a copy

00:16:25.700 --> 00:16:29.110
of a webpage with little notes,
and this is going to use both

00:16:29.110 --> 00:16:31.780
drag and drop techniques,
and again, Kevin Decker's going to help

00:16:31.780 --> 00:16:32.840
me out with demoing this.

00:16:32.840 --> 00:16:34.340
So this is really cool.

00:16:34.340 --> 00:16:37.860
We've basically built in stickies
to this common website here,

00:16:37.860 --> 00:16:42.300
so I can just drag this right here,
and I'll drag another one.

00:16:42.840 --> 00:16:45.590
So that's showing the second
drag and drop technique,

00:16:45.630 --> 00:16:46.430
cross frame.

00:16:46.500 --> 00:16:48.380
The top section there is
actually a different frame.

00:16:48.380 --> 00:16:51.420
And here we're demonstrating
the in-page drag.

00:16:51.420 --> 00:16:53.040
That's just a normal DOM element.

00:16:53.040 --> 00:16:54.850
We've hooked up to the
mouse events on it.

00:16:55.060 --> 00:16:57.880
You can also resize them
using that resize corner.

00:16:59.470 --> 00:17:01.980
and you may notice these
things are translucent.

00:17:02.210 --> 00:17:04.710
That's using some of the new
opacity features in Safari.

00:17:04.780 --> 00:17:07.680
And if you're interested in
more stuff like that and how to

00:17:07.680 --> 00:17:11.850
make things look really cool,
make sure to catch Dave Hyatt's talk

00:17:11.850 --> 00:17:15.400
on making visually compelling websites.

00:17:15.400 --> 00:17:20.400
Okay, that's it for now.

00:17:20.510 --> 00:17:22.240
Back to slides.

00:17:26.460 --> 00:17:27.780
All right.

00:17:27.830 --> 00:17:31.540
Now, again,
there's documentation on this.

00:17:31.890 --> 00:17:35.780
There's an overview of
these custom drag events.

00:17:35.820 --> 00:17:38.620
And we'll go back to that at the end.

00:17:39.310 --> 00:17:42.580
The next topic I'm going to
talk about is HTML editing.

00:17:42.640 --> 00:17:45.810
Now, I'm going to talk about
HTML editing mainly as it

00:17:45.810 --> 00:17:51.540
applies to editing within a page,
a particular section inside a page.

00:17:51.650 --> 00:17:54.850
Later on during this conference,
there's going to be a talk

00:17:54.850 --> 00:17:58.390
that's currently vaguely called
Advanced WebKit Features,

00:17:58.390 --> 00:18:01.560
which is going to cover how to use
editing from your own custom app if you

00:18:01.560 --> 00:18:04.920
want to use it the way mail is going to,
for instance.

00:18:05.980 --> 00:18:09.250
So you can use this to support
rich text editing in web pages.

00:18:09.560 --> 00:18:13.890
Now one of the most obvious ways to
use this would be for a comment box,

00:18:13.890 --> 00:18:16.940
for example,
on a bulletin board site or a web blog.

00:18:16.970 --> 00:18:19.740
Many of them are limited
to plain text right now,

00:18:19.780 --> 00:18:24.610
but with this feature you could
actually let the user do rich text

00:18:24.800 --> 00:18:27.590
editing and submit arbitrary HTML.

00:18:29.000 --> 00:18:43.800
[Transcript missing]

00:18:47.580 --> 00:18:53.080
So the most basic thing here is
how to make an area editable.

00:18:53.080 --> 00:18:56.940
And what you start out with is you
set the contenteditable property.

00:18:56.970 --> 00:18:58.850
This is a tri-state property.

00:18:58.950 --> 00:19:03.250
It can be set to true, false, or inherit,
depending on whether you want

00:19:03.710 --> 00:19:05.340
the object to be editable.

00:19:05.370 --> 00:19:08.260
You can set it just like
this as an HTML attribute,

00:19:08.260 --> 00:19:11.660
or you can also set it on the
object through JavaScript by

00:19:11.660 --> 00:19:15.740
saying whatever DOM element dot
contenteditable equals true.

00:19:15.740 --> 00:19:17.480
So this is the way to
make an area editable.

00:19:17.500 --> 00:19:21.310
You may notice I've also
put an ID attribute on it so

00:19:21.310 --> 00:19:26.790
I can later find this div and
perform other operations on it.

00:19:29.180 --> 00:19:31.220
Now,
one thing you want to do is if you have

00:19:31.320 --> 00:19:35.580
a fixed size area that you want to edit,
you want it to be scrollable.

00:19:35.610 --> 00:19:38.620
By default,
when you have an HTML element and its

00:19:38.650 --> 00:19:41.810
contents are too big to fit inside it,
they'll just spill right

00:19:41.940 --> 00:19:44.280
outside that area and go all
over the rest of the page.

00:19:44.430 --> 00:19:46.140
That's not what you want.

00:19:46.180 --> 00:19:49.110
But if you set the
overflow auto CSS property,

00:19:49.360 --> 00:19:53.360
then automatically, once there's too much
stuff to fit in the box,

00:19:53.450 --> 00:19:55.270
you'll get scroll bars.

00:19:58.420 --> 00:20:01.560
Now, in addition,
that's all you need to do to

00:20:01.610 --> 00:20:03.240
get a basic editable area.

00:20:03.240 --> 00:20:05.420
You make it editable,
you make it overflow auto,

00:20:05.510 --> 00:20:09.320
give it a particular size,
and you have pretty much the rich

00:20:09.320 --> 00:20:11.610
text equivalent of a text field.

00:20:11.730 --> 00:20:13.270
But you want to do more than that.

00:20:13.420 --> 00:20:16.600
You want to give the user ways
to make things bold and italic.

00:20:16.600 --> 00:20:25.200
You can create buttons like this that use
exec command to make text bold or italic.

00:20:25.300 --> 00:20:29.850
Exec command is actually part of a
family of functions that have a whole

00:20:30.110 --> 00:20:33.250
bunch of commands available to them.

00:20:33.280 --> 00:20:34.380
You can look this up on the net.

00:20:34.490 --> 00:20:37.860
This is also implemented in
Internet Explorer and Mozilla,

00:20:37.860 --> 00:20:40.600
so you can find a lot of
docs on this sort of de facto

00:20:40.600 --> 00:20:42.110
standard way of doing it.

00:20:42.400 --> 00:20:44.920
And you can use it to
set in dense styles,

00:20:44.920 --> 00:20:48.000
to start new paragraphs,
to add line breaks.

00:20:48.330 --> 00:20:51.980
But for now, these two examples.

00:20:52.740 --> 00:20:57.270
Now, there's other ways to use editing
commands besides just executing them.

00:20:57.340 --> 00:20:59.440
You can use these very same
command choices to tell

00:20:59.450 --> 00:21:01.890
whether a command is enabled,
which means,

00:21:02.030 --> 00:21:04.300
can I apply this command right now?

00:21:04.400 --> 00:21:08.280
Is it available as a current
choice for the selection I have?

00:21:08.350 --> 00:21:11.990
And for bold, for example,
that would depend on having either

00:21:11.990 --> 00:21:15.710
an editable piece of text selected
or having a blinking carrot in

00:21:15.960 --> 00:21:18.000
the middle of some editable text.

00:21:18.600 --> 00:21:24.760
You can also check whether the-- boy,
it's hard to read that monitor.

00:21:24.780 --> 00:21:26.910
You can check whether the
command is currently applied to a

00:21:26.910 --> 00:21:31.220
particular region or indeterminate,
meaning it's mixed.

00:21:31.290 --> 00:21:34.340
You can check whether
it's supported at all,

00:21:34.360 --> 00:21:39.290
and you can check the value,
which means what's the current state.

00:21:41.010 --> 00:21:46.900
Now, once you've done all this editing,
you have to actually get the content out.

00:21:46.900 --> 00:21:50.600
You can use just the innerHtml property,
which would be familiar

00:21:50.780 --> 00:21:52.390
to many of you for that.

00:21:52.690 --> 00:21:57.190
You just get the element using
normal DOM techniques and use the

00:21:57.190 --> 00:21:59.900
innerHtml property to extract it.

00:21:59.970 --> 00:22:02.790
Now, here I've shown an example of
a function you might have if

00:22:02.790 --> 00:22:04.270
you're doing a form submission.

00:22:04.590 --> 00:22:08.330
You might extract the HTML contents
of the element you're submitting,

00:22:08.460 --> 00:22:11.200
place them in a hidden text field,
and then just let that

00:22:11.360 --> 00:22:13.280
submit as part of the form.

00:22:15.800 --> 00:22:20.250
And now we're going to demo editing in
the very same shared annotation demo.

00:22:20.330 --> 00:22:22.700
Once again, Kevin Decker to help me out.

00:22:23.310 --> 00:22:23.700
Okay.

00:22:23.750 --> 00:22:25.700
So here we have our nice little stickies.

00:22:25.700 --> 00:22:31.310
So I'm just going to type in here,
"Quick brown fox jumped over the

00:22:31.310 --> 00:22:35.700
lazy dog." And to illustrate what
Maciej was talking about with bold,

00:22:35.700 --> 00:22:37.700
you notice here we have bold.

00:22:37.700 --> 00:22:39.680
We also have a button up
here we added for italicize.

00:22:39.700 --> 00:22:44.190
So I'll just take this and go like,
"Quick brown fox." Let me select the

00:22:44.370 --> 00:22:46.610
word "the." And we'll make that bold.

00:22:46.700 --> 00:22:49.700
And we'll take this part
and we'll italicize it.

00:22:49.780 --> 00:22:50.700
And there we go.

00:22:50.810 --> 00:22:52.700
And actually,
it's really cool because not only

00:22:52.700 --> 00:22:54.690
can you just type right there,
but it's WYSIWYG.

00:22:54.700 --> 00:22:55.690
It's what you see is what you get.

00:22:55.800 --> 00:22:58.700
So if I want to do something like this,
you know, copy this part,

00:22:58.700 --> 00:23:01.690
I'll copy there and put it in this note.

00:23:01.800 --> 00:23:02.840
And then there you go.

00:23:02.840 --> 00:23:06.570
So anything pretty much on the page,
images, all that stuff, right there.

00:23:06.570 --> 00:23:08.660
So there you go.

00:23:08.700 --> 00:23:09.900
Thank you.

00:23:19.120 --> 00:23:20.660
Next topic.

00:23:20.760 --> 00:23:25.270
Our final topic is going
to be XmlHttpRequest.

00:23:25.530 --> 00:23:29.430
Now, this is sort of the most abstract of
the things we're going to talk about,

00:23:29.430 --> 00:23:32.310
sort of the least visual,
so it may require a little

00:23:32.310 --> 00:23:36.400
explaining to explain what this
is and what really it's good for.

00:23:36.470 --> 00:23:41.210
XmlHttpRequest is a way to talk back to
the web server without actually having

00:23:41.300 --> 00:23:42.900
to load a page or image or anything.

00:23:42.900 --> 00:23:47.700
You just open a direct connection,
send a request, and get the reply.

00:23:48.250 --> 00:23:51.930
You can use it to silently make an
HTTP connection without disturbing

00:23:51.950 --> 00:23:54.260
the user with a page or frame load.

00:23:54.440 --> 00:23:58.400
It also offers optional
XmlSerialization if you'd like

00:23:58.410 --> 00:24:02.710
to send XmlData to the server,
and XmlParsing if the server

00:24:02.710 --> 00:24:06.300
again replies with Xml
that you'd like to process.

00:24:06.470 --> 00:24:11.950
It's sort of good for behind-the-scenes
communication when you want to have some

00:24:12.500 --> 00:24:17.610
operation in the webpage and respond
to it in some way on the server but

00:24:17.880 --> 00:24:20.600
not sort of put it in the user's face.

00:24:20.910 --> 00:24:27.320
and it can also be good for hooking up a
web application to an existing XML feed.

00:24:27.470 --> 00:24:30.440
Let's look at some
diagrams of how this works.

00:24:30.510 --> 00:24:33.940
Before XmlHttpRequest,
the way you do things is,

00:24:33.970 --> 00:24:36.500
you start with a user action.

00:24:36.550 --> 00:24:39.750
This makes an HTTP request to the server.

00:24:39.900 --> 00:24:43.780
The server saves the changes,
whatever was reported by the action,

00:24:43.860 --> 00:24:49.300
it generates a new page,
it sends an HTTP reply, and then finally,

00:24:49.380 --> 00:24:52.090
the client shows the
results on a whole new page.

00:24:52.200 --> 00:24:56.230
An example of a site that works like
this that you may know about is Amazon,

00:24:56.410 --> 00:24:57.600
your shopping cart.

00:24:57.700 --> 00:24:59.900
Whenever you remove an item
from the shopping cart,

00:24:59.900 --> 00:25:02.810
you have to select it,
and then you have to do a save and

00:25:02.810 --> 00:25:07.120
wait for the server to process that
and actually show you the new page.

00:25:07.430 --> 00:25:10.270
But with XmlHttpRequest,
you can actually do

00:25:10.330 --> 00:25:11.530
things in a better way.

00:25:11.660 --> 00:25:13.490
You start with the user action.

00:25:13.640 --> 00:25:17.300
Right away, you can use DOM commands
to reflect that in the UI.

00:25:17.300 --> 00:25:19.930
And then in the background,
you use XmlHttpRequest to

00:25:19.980 --> 00:25:21.980
make a request to the server.

00:25:21.980 --> 00:25:25.410
Server saves the changes,
and it makes a reply.

00:25:25.410 --> 00:25:28.330
And the client can choose whether
or not to make use of that.

00:25:29.000 --> 00:25:32.360
One example of a website that's
already using this technique is Orkut,

00:25:32.360 --> 00:25:35.300
a social networking site that
some of you may have heard of.

00:25:35.300 --> 00:25:38.800
When you go to the section
where you rate your friends,

00:25:38.800 --> 00:25:44.340
you can click from one to three
stars or whatever to rate people.

00:25:44.340 --> 00:25:46.340
And you may have noticed
when you do that,

00:25:46.430 --> 00:25:48.080
the page doesn't load a new page.

00:25:48.140 --> 00:25:51.130
It just automatically saves,
but you're not disturbed at all.

00:25:51.140 --> 00:25:55.240
And that's a great way
to set up your website.

00:25:55.240 --> 00:25:57.620
People don't have to
wait for the page load.

00:25:57.620 --> 00:25:58.980
You can just automatically save it.

00:25:59.000 --> 00:26:00.670
their data.

00:26:01.780 --> 00:26:07.100
Now, let's look into specifically how
you'd make use of XmlHttpRequest.

00:26:07.100 --> 00:26:11.600
The first step is to create
an XmlHttpRequest object

00:26:11.600 --> 00:26:13.360
and then start the load.

00:26:13.560 --> 00:26:17.850
Now, the way to create an XmlHttpRequest
object is a little tricky.

00:26:18.000 --> 00:26:21.030
There's two different techniques
depending on whether you're

00:26:21.050 --> 00:26:24.620
using Safari or Mozilla or other
standards-based browsers or if

00:26:24.620 --> 00:26:26.600
you're using Internet Explorer.

00:26:26.770 --> 00:26:31.600
In Windows IE, XmlHttpRequest is actually
an ActiveX control,

00:26:31.600 --> 00:26:35.980
so you have to use this wacky
ActiveX gobbledygook to create it.

00:26:36.190 --> 00:26:38.880
In other browsers,
you can just directly create the object.

00:26:39.010 --> 00:26:42.100
So this try-catch block just
encapsulates all of that.

00:26:42.260 --> 00:26:43.800
And then you open it.

00:26:43.930 --> 00:26:48.000
You tell it what HTTP method
to use to do the load and what

00:26:48.000 --> 00:26:50.300
document you want to load.

00:26:52.050 --> 00:26:55.800
So once you've kicked off this load,
you probably want to get the

00:26:55.900 --> 00:26:58.610
data when it's actually loaded.

00:26:58.960 --> 00:27:02.860
And here's how it goes.

00:27:02.860 --> 00:27:06.140
You hook up a function to the
onReadyStateChange property of the

00:27:06.170 --> 00:27:09.520
request before actually sending it.

00:27:09.560 --> 00:27:12.340
And that works just
like an event handler.

00:27:12.400 --> 00:27:14.440
Whenever the state
changes of the request,

00:27:14.490 --> 00:27:18.660
whenever more data comes in or
the load kicks off or whatever,

00:27:18.720 --> 00:27:19.400
you get an update.

00:27:19.400 --> 00:27:22.420
And state four happens to
be I'm all done loading.

00:27:22.420 --> 00:27:26.530
So this function just waits
until you get into state four,

00:27:26.610 --> 00:27:28.880
and then it can just use the request.

00:27:29.030 --> 00:27:33.020
You can also use the response
text property on the request

00:27:33.120 --> 00:27:34.990
to get the data back out.

00:27:37.380 --> 00:27:38.900
All right.

00:27:38.960 --> 00:27:43.300
Now, you may want to actually
parse Xml response data.

00:27:43.300 --> 00:27:47.990
Instead of just sending simple text
messages or looking at raw Xml,

00:27:47.990 --> 00:27:52.290
you may want to parse it
in some interesting way.

00:27:53.300 --> 00:27:53.360
So,

00:27:54.700 --> 00:28:08.400
[Transcript missing]

00:28:09.110 --> 00:28:12.730
So that's an example of how you
might use XmlHttpRequest to load

00:28:12.730 --> 00:28:14.700
something in the background.

00:28:14.700 --> 00:28:16.440
But what if you want to save?

00:28:16.560 --> 00:28:20.190
Well, it's very similar.

00:28:20.480 --> 00:28:22.620
You set up the request.

00:28:22.620 --> 00:28:25.720
In this case, instead of a get,
I've used the post method,

00:28:26.100 --> 00:28:30.220
just like an HTTP form post,
to post to a script,

00:28:30.220 --> 00:28:33.240
a CGI script running on the server.

00:28:33.260 --> 00:28:36.390
And to send,
instead of just passing null,

00:28:36.440 --> 00:28:41.000
you can actually pass it some body data
to send as the contents of the post.

00:28:41.020 --> 00:28:43.680
But other than that,
it's set up pretty much

00:28:43.680 --> 00:28:45.230
the same way as a load.

00:28:45.990 --> 00:28:52.210
Again, if you want to use XML,
then you can set up a document and

00:28:52.210 --> 00:28:54.940
attach it to the request and send it.

00:28:55.100 --> 00:28:58.400
Again,
instead of sending text as the body,

00:28:58.510 --> 00:29:00.140
here we're sending a document.

00:29:00.180 --> 00:29:05.160
We're just using normal DOM calls
to create that and build it up.

00:29:08.630 --> 00:29:11.740
and now, let's look at a demo.

00:29:11.740 --> 00:29:13.690
This is our little sticky app.

00:29:13.750 --> 00:29:15.740
As you can see, like we said,
we can resize all this

00:29:15.810 --> 00:29:16.740
and you can edit it.

00:29:16.820 --> 00:29:20.580
But wait, there's more,
because what Maciej was alluding

00:29:20.580 --> 00:29:23.740
to was using this XmlHttpRequest.

00:29:23.740 --> 00:29:25.730
All this is really
saving in the background.

00:29:25.870 --> 00:29:27.690
So, um...

00:29:28.310 --> 00:29:32.820
So even if your browser should crash,
which Safari never really does.

00:29:32.820 --> 00:29:34.700
Never, never happens.

00:29:34.810 --> 00:29:37.500
So we're going to simulate
the crash with a force quit.

00:29:37.890 --> 00:29:40.340
Yeah, just to prove there's no
smoke and mirrors going on,

00:29:40.350 --> 00:29:41.920
we'll go ahead and crash this.

00:29:41.960 --> 00:29:44.260
Or I mean, force quit.

00:29:48.120 --> 00:29:50.240
You may want to use the
doc menu to force quit.

00:29:50.240 --> 00:29:51.590
Yeah, OK, here we go.

00:29:51.810 --> 00:29:52.540
Oh, there you go.

00:29:52.610 --> 00:29:53.650
You have to force quit, force quit.

00:29:53.660 --> 00:29:55.280
OK.

00:29:55.370 --> 00:29:55.780
So, OK.

00:29:55.780 --> 00:29:56.980
Safari actually crashed there.

00:29:56.980 --> 00:29:58.350
Safari's gone.

00:29:58.440 --> 00:30:00.410
And let's bring it back.

00:30:01.730 --> 00:30:04.290
So here we go.

00:30:04.290 --> 00:30:04.600
And there we go.

00:30:04.600 --> 00:30:06.600
All that stuff is still there.

00:30:06.600 --> 00:30:10.600
Saved all along, and now it's loaded when
you load the page again.

00:30:10.620 --> 00:30:12.910
Actually, it's a little bit smaller,
but that's because when I had

00:30:12.910 --> 00:30:15.090
this browser window open before,
I had it full-sized so

00:30:15.090 --> 00:30:15.570
you guys can see it.

00:30:15.680 --> 00:30:17.550
So that's actually not really a bug.

00:30:17.590 --> 00:30:18.600
It's a feature.

00:30:18.600 --> 00:30:19.600
There you go.

00:30:19.600 --> 00:30:20.600
It's all saved.

00:30:20.600 --> 00:30:22.530
It's really, really cool stuff.

00:30:22.890 --> 00:30:23.390
Okay.

00:30:23.600 --> 00:30:26.600
Hey, Kevin, stay up here.

00:30:26.600 --> 00:30:29.600
Since I've gone through all my stuff
and we have a bunch of time left,

00:30:29.600 --> 00:30:32.350
let's actually take a look
at the code of the demo.

00:30:33.000 --> 00:30:33.550
Sure.

00:30:33.600 --> 00:30:35.590
So why don't you just
view source on this page.

00:30:35.600 --> 00:30:37.850
Actually, you're gonna probably
want to see the... Yeah,

00:30:37.850 --> 00:30:39.600
you're gonna want to show
the top frame source.

00:30:39.600 --> 00:30:40.600
The header frame.

00:30:40.600 --> 00:30:41.540
So let's do that.

00:30:41.600 --> 00:30:43.600
And let's make this bigger
so you guys can see it.

00:30:43.600 --> 00:30:46.330
So let's look at what
we've actually done.

00:30:47.270 --> 00:30:52.410
shows some examples of applying
these techniques in practice.

00:30:54.100 --> 00:30:56.300
Here's the finished drag
move that Maciej spoke about.

00:30:56.390 --> 00:30:59.750
So here's the drag and drop that
I talked about first with the simple

00:30:59.820 --> 00:31:02.600
move-based drag and drop technique.

00:31:02.730 --> 00:31:07.300
You can see all that same
stuff I talked about before.

00:31:07.390 --> 00:31:11.210
Just the normal mouse events hooked up,

00:31:13.290 --> 00:31:15.580
And then we've used the
same thing for resize,

00:31:15.760 --> 00:31:19.420
which I briefly alluded to in
the talk and which we showed.

00:31:19.420 --> 00:31:22.740
And really, you could use this drag for
any kind of way of manipulating

00:31:22.740 --> 00:31:23.700
the elements on your page.

00:31:23.700 --> 00:31:29.340
You can have a draggable handle and have
something else completely different move.

00:31:29.380 --> 00:31:34.690
Okay,
find where XmlHttpRequest is in the page.

00:31:34.740 --> 00:31:38.090
We'll look at the load and save.

00:31:38.090 --> 00:31:38.090
Okay.

00:31:39.850 --> 00:31:40.800
There we go.

00:31:41.260 --> 00:31:43.940
And that's where we're doing the save,
just like I talked about,

00:31:43.990 --> 00:31:45.620
post to a script.

00:31:45.720 --> 00:31:48.050
Up there,
it's actually creating an Xml document.

00:31:51.500 --> 00:31:52.500
Let's go up here.

00:31:53.500 --> 00:31:53.500
Okay.

00:31:53.500 --> 00:31:53.500
That's enough demo.

00:31:53.500 --> 00:31:54.500
Isn't this cool?

00:31:54.500 --> 00:31:54.500
I mean, this is cool stuff.

00:31:54.810 --> 00:31:55.500
Let's go on to the summary.

00:31:55.500 --> 00:31:56.470
Let's go to the summary.

00:32:06.970 --> 00:32:10.200
All right, and again, XmlHttpRequest.

00:32:10.510 --> 00:32:12.790
Apple has some docs online.

00:32:12.860 --> 00:32:14.830
You can find them here.

00:32:15.940 --> 00:32:19.300
All right, summary.

00:32:19.390 --> 00:32:23.460
So we looked at all these different web
features that you can use and how you

00:32:23.460 --> 00:32:25.600
can use them in your web application.

00:32:25.690 --> 00:32:28.450
And you may have seen a hint of how
you can put these together to get

00:32:28.450 --> 00:32:32.880
something that is a lot fancier than
a typical webpage and does a lot more.

00:32:33.000 --> 00:32:37.760
We combined drag-and-drop, editing,
and XmlHttpRequest to get an

00:32:37.760 --> 00:32:41.150
effect that's really a lot more
like a desktop app than like

00:32:41.160 --> 00:32:43.830
what you expect from a webpage.

00:32:45.660 --> 00:32:51.000
and you know, you can also use this stuff
for dashboard widgets.

00:32:51.000 --> 00:32:53.940
So you may be wondering when do
you get all of these features?

00:32:54.000 --> 00:32:56.780
Well,
they're all going to be available in

00:32:56.780 --> 00:33:00.600
the Safari 2.0 in your Tiger WWDC seed.

00:33:00.600 --> 00:33:05.800
They'll be available in the Safari 1.3
developer beta on Panther that's

00:33:05.890 --> 00:33:07.810
going to be released soon.

00:33:07.810 --> 00:33:10.600
That'll be up on the
website for download soon.

00:33:11.720 --> 00:33:17.400
And XmlHttpRequest and LiveConnect
are actually already in Safari 1.2.

00:33:19.600 --> 00:33:23.270
So, in closing,
let me talk a little about

00:33:23.270 --> 00:33:26.800
the progress of Safari so far.

00:33:26.800 --> 00:33:30.500
Let's look at a graph of
awesomeness versus time.

00:33:31.240 --> 00:33:34.780
Now Safari 1.0 is already
pretty darn awesome.

00:33:34.930 --> 00:33:39.160
1.1, 45% more awesome.

00:33:39.370 --> 00:33:43.940
1.2 was 69% more awesome than that.

00:33:43.940 --> 00:33:47.200
And 1.3 and 2.0,
who knows how awesome they

00:33:47.200 --> 00:33:49.140
will be once they ship.

00:33:49.190 --> 00:33:53.460
But one thing I want to mention is the
version of Safari on your TigerSeed and

00:33:53.460 --> 00:33:57.520
the developer beta that will be coming
out soon are not the final versions yet.

00:33:57.700 --> 00:34:00.710
Some of these new features that we've
talked about may have holes in them,

00:34:00.710 --> 00:34:03.000
they may be buggy,
they may not be perfect,

00:34:03.110 --> 00:34:05.940
and we'd really appreciate
it if you try them out,

00:34:05.940 --> 00:34:09.350
give them a spin,
and report all your bugs.

00:34:09.500 --> 00:34:15.330
And, oh yeah,
legal made me add this disclaimer.

00:34:17.230 --> 00:34:20.080
All right,
so here's all the reference materials

00:34:20.160 --> 00:34:22.850
we talked about during the talk.

00:34:23.020 --> 00:34:28.610
If you want to quickly note these
down or look at them later on the DVD,

00:34:28.610 --> 00:34:31.840
it's all the information available.