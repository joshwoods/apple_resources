WEBVTT

00:00:12.510 --> 00:00:16.040
Ladies and gentlemen,
please welcome Cocoa and

00:00:16.040 --> 00:00:20.000
Developer Tools Evangelist,
Matthew Formica.

00:00:24.670 --> 00:00:25.840
Thank you, everyone.

00:00:25.880 --> 00:00:30.760
I want to welcome you this
afternoon to Introduction to Xcode.

00:00:30.760 --> 00:00:35.100
Many of you were at Ted Goldstein's
keynote yesterday afternoon,

00:00:35.230 --> 00:00:37.220
where you saw some of the new
things we're doing in Xcode.

00:00:37.220 --> 00:00:41.770
This session is going to continue that,
diving down a little bit further into

00:00:41.770 --> 00:00:44.030
how Xcode works and how you can use it.

00:00:44.800 --> 00:00:48.260
Before we get started, though,
a couple points to mention.

00:00:48.260 --> 00:00:54.230
A contest was announced yesterday,
an opportunity for you to

00:00:54.340 --> 00:01:00.140
bring Thursday evening to the
Xcode table on Apple Campus,

00:01:00.140 --> 00:01:03.300
your application building
and running in Xcode.

00:01:03.300 --> 00:01:07.480
This is more than Hello World,
but bring your application

00:01:07.480 --> 00:01:10.200
to the Xcode area,
and you can sign in,

00:01:10.270 --> 00:01:13.970
and you will get a free T-shirt,
an Xcode shirt.

00:01:14.520 --> 00:01:18.450
The other point I would mention
as we're getting started is there,

00:01:18.520 --> 00:01:23.050
if you go to connect.apple.com,
there are some supplementary release

00:01:23.050 --> 00:01:28.440
notes about Xcode 2.0 associated
with Ted's keynote in a disk image,

00:01:28.440 --> 00:01:30.150
session 300.

00:01:30.160 --> 00:01:33.920
So you can download those
late-breaking news announcements.

00:01:33.920 --> 00:01:37.720
As I said, this session is about an
introduction to Xcode.

00:01:37.720 --> 00:01:42.040
It's going to talk about some of
the new features that we've added.

00:01:42.040 --> 00:01:44.490
It's also going to give
you an overview of the IDE.

00:01:44.520 --> 00:01:47.280
To help round out your knowledge
of some of the areas you

00:01:47.410 --> 00:01:49.040
might not be as familiar with.

00:01:49.140 --> 00:01:52.750
Xcode has been innovating very
rapidly over the last year,

00:01:52.750 --> 00:01:57.120
and the manager of the Xcode team is
here with us to go into the details.

00:01:57.120 --> 00:01:59.670
I'd like to, if you could join me in
welcoming Matt Furlick,

00:01:59.810 --> 00:02:01.120
manager of the Xcode team.

00:02:11.600 --> 00:02:27.900
[Transcript missing]

00:02:29.000 --> 00:02:32.220
Ah, come on, more thrill-seekers.

00:02:32.240 --> 00:02:34.600
All right, so before we start threatening
you with what's new,

00:02:34.600 --> 00:02:37.050
let's talk about what Xcode is.

00:02:37.170 --> 00:02:39.840
Xcode is Apple's integrated
development environment for

00:02:39.840 --> 00:02:41.680
developing software on the platform.

00:02:41.730 --> 00:02:43.150
Go into a little bit of
detail about what it is,

00:02:43.240 --> 00:02:46.580
but let's talk about what this thing is
that you're using and how it got here.

00:02:46.600 --> 00:02:49.420
Last year at WWDC,
we released a preview of the

00:02:49.420 --> 00:02:52.960
software on Jaguar and Panther,
and we released the first version at

00:02:53.000 --> 00:02:54.760
the same time that Panther shipped.

00:02:54.780 --> 00:02:57.780
It includes a lot of features,
fix and continue, distributed builds,

00:02:57.790 --> 00:03:00.700
zero link, a number of great,
great features to help

00:03:00.800 --> 00:03:02.280
you get up to speed.

00:03:02.310 --> 00:03:04.300
We released that one in October.

00:03:04.320 --> 00:03:08.050
We followed that one up
with Xcode 1.1 in December.

00:03:08.170 --> 00:03:11.160
Some bug fix releases,
improved SDK support,

00:03:11.210 --> 00:03:13.320
trying to get you the latest and
greatest just before Christmas,

00:03:13.330 --> 00:03:15.920
'cause we know you're all
working hard right about then.

00:03:16.120 --> 00:03:18.760
Follow that up with Xcode 1.2.

00:03:18.830 --> 00:03:21.790
How many of you have 1.2 installed?

00:03:21.940 --> 00:03:22.900
Excellent.

00:03:22.900 --> 00:03:27.300
1.2 was what we like to consider
an enhanced performance release,

00:03:27.390 --> 00:03:29.750
stability, lots of polish on the IDE.

00:03:29.910 --> 00:03:34.020
But what we're here today to
talk about are two new releases.

00:03:34.020 --> 00:03:37.600
And to be very clear,
we are talking about two releases,

00:03:37.600 --> 00:03:41.960
Xcode 1.5 on Panther and
Xcode 2.0 on Tiger.

00:03:41.960 --> 00:03:44.300
So you actually have
two pieces of software.

00:03:44.300 --> 00:03:47.370
On the DVDs that you have with
Tiger comes a version of Xcode 2.0.

00:03:47.380 --> 00:03:51.720
But we also have available Xcode
1.5 for you to run on Panther.

00:03:51.750 --> 00:03:54.520
It's available on ADC sites for download.

00:03:54.560 --> 00:03:56.710
Also if you go to the labs,
we have disk images of both of these

00:03:56.710 --> 00:03:59.900
where you can drag them onto your
machines and go ahead and install them.

00:03:59.900 --> 00:04:01.690
So for the thrill seekers
that want to be on Tiger,

00:04:01.690 --> 00:04:02.520
we have software.

00:04:02.520 --> 00:04:04.680
But for those people who
want to stay on Panther,

00:04:04.680 --> 00:04:06.680
we also have something
for you to look at.

00:04:06.680 --> 00:04:09.470
So Xcode 1.5 is a beta release.

00:04:09.510 --> 00:04:12.040
Includes a number of features,
faster editing,

00:04:12.050 --> 00:04:15.880
a better support for indexing,
remote debugging, a lot of other great

00:04:15.880 --> 00:04:17.600
debugging capabilities.

00:04:17.600 --> 00:04:21.160
Xcode 2.0 is the same feature set
but includes a little bit more.

00:04:21.160 --> 00:04:21.540
Things like design.

00:04:21.540 --> 00:04:22.910
Tools.

00:04:23.130 --> 00:04:27.520
Things like workspace layouts,
which we'll get into in a little bit.

00:04:27.670 --> 00:04:29.720
So that's where we stand today.

00:04:29.720 --> 00:04:31.450
Let's talk about what this thing is.

00:04:31.460 --> 00:04:33.320
We're an integrated
development environment.

00:04:33.530 --> 00:04:35.190
So let's figure out what that means.

00:04:35.280 --> 00:04:37.730
Let's take the environment first.

00:04:38.080 --> 00:04:39.460
It's Mac OS X.

00:04:39.490 --> 00:04:44.200
Living on Xcode 1.0 shipped on Panther,
so it's moving on that and forward.

00:04:44.200 --> 00:04:47.370
With SDK support, though,
you can develop for any of the

00:04:47.370 --> 00:04:50.140
Mac OS X releases for the platform.

00:04:50.140 --> 00:04:51.780
Lots of language support.

00:04:51.800 --> 00:04:54.320
All the C dialects, Java,
scripting languages like

00:04:54.320 --> 00:04:56.130
AppleScript and shell scripting.

00:04:56.160 --> 00:04:59.080
Lots of different products, too,
whether it's an application,

00:04:59.080 --> 00:05:01.350
your libraries, your plugins,
your frameworks.

00:05:01.360 --> 00:05:03.480
Lots of different functionality
in this application,

00:05:03.480 --> 00:05:05.790
and we're trying to cater to a
lot of different people here.

00:05:06.310 --> 00:05:08.350
But we're trying to do so in
a way that makes it feel like

00:05:08.470 --> 00:05:09.700
it's part of the platform.

00:05:09.700 --> 00:05:12.180
So we're including things like
user interface paradigms that

00:05:12.180 --> 00:05:13.660
you've seen all over the place.

00:05:13.660 --> 00:05:17.070
Search fields, inspectors,
smart lists of things.

00:05:17.370 --> 00:05:19.750
Things that you're used to
seeing and vary the ease of use

00:05:19.750 --> 00:05:21.300
applications in the Mac OS X.

00:05:21.300 --> 00:05:23.630
We're going to bring those to you in
the development environment to make it

00:05:23.630 --> 00:05:25.320
as easy as possible for you to work.

00:05:27.080 --> 00:05:28.370
So let's talk about development.

00:05:28.380 --> 00:05:29.560
What does it mean to be development?

00:05:29.560 --> 00:05:32.070
What are the things that we're
including to try and make things

00:05:32.070 --> 00:05:33.710
a little bit easier for you?

00:05:33.940 --> 00:05:36.960
To be a development environment,
it really requires a number of things.

00:05:37.110 --> 00:05:39.540
First is workflow and management.

00:05:39.560 --> 00:05:42.480
There are a lot of things other than
source code and compiling things that

00:05:42.620 --> 00:05:44.510
are really important to your daily life.

00:05:44.970 --> 00:05:49.140
Project organization, project management,
dealing with conflicts from

00:05:49.140 --> 00:05:52.990
source control management systems,
all sorts of big issues.

00:05:53.060 --> 00:05:55.850
Workflow, where the buttons are,
how I get to them,

00:05:55.850 --> 00:05:57.960
how I get from one place to another.

00:05:57.960 --> 00:05:59.750
These are all very,
very key issues that we've

00:05:59.750 --> 00:06:00.920
tried to address in Xcode.

00:06:02.130 --> 00:06:02.750
Source code editing.

00:06:02.750 --> 00:06:05.750
I want to edit my source code file,
but I want to do it in a particular way.

00:06:05.750 --> 00:06:07.920
I want a certain color,
a certain font size.

00:06:07.920 --> 00:06:09.980
I want the buttons in the right place.

00:06:09.980 --> 00:06:11.820
I want things at my
fingertips with key bindings.

00:06:11.820 --> 00:06:14.320
All sorts of different and
intricate things that really are

00:06:14.320 --> 00:06:17.100
important to us as individual
developers to get our work done.

00:06:17.120 --> 00:06:21.090
But then also the ability to provide
things like assistance and documentation.

00:06:21.130 --> 00:06:24.000
We've got a wealth of knowledge,
a wealth of information,

00:06:24.000 --> 00:06:26.810
both about your product and
the APIs you're trying to use,

00:06:26.810 --> 00:06:29.540
and how we bring those to you
in a seamless and easy way is as

00:06:29.560 --> 00:06:31.520
important to us as it is to you.

00:06:31.920 --> 00:06:34.890
So let's talk about some of these things.

00:06:35.100 --> 00:06:39.080
First, in Xcode 2.0 on Tiger,
you'll notice some new workflows,

00:06:39.210 --> 00:06:40.620
some new what we call workspace layouts.

00:06:40.700 --> 00:06:43.070
Xcode has a traditional layout,
which you've all seen

00:06:43.070 --> 00:06:43.900
up until this point.

00:06:43.900 --> 00:06:47.730
We've included a couple different
ones to try and give you the ease

00:06:47.900 --> 00:06:52.260
of use that you're looking for,
because we know that there's an extreme

00:06:52.260 --> 00:06:55.160
breadth of different ways of developing.

00:06:55.160 --> 00:06:59.000
I don't want to call it religious,
but in some cases, it sort of is.

00:07:00.120 --> 00:07:04.340
One of these is an all-in-one workspace,
the ability to have everything that

00:07:04.340 --> 00:07:06.360
you've ever wanted all in one window.

00:07:06.360 --> 00:07:08.230
So per project, you have one window.

00:07:08.230 --> 00:07:10.650
You have four projects,
you have four windows.

00:07:10.670 --> 00:07:13.460
But there are people that really
would like something else,

00:07:13.460 --> 00:07:16.080
and they want something that's
a little more condensed,

00:07:16.080 --> 00:07:17.870
but so they can have lots of windows.

00:07:17.940 --> 00:07:21.210
So a very, very compact project view,
but having lots of editor windows

00:07:21.210 --> 00:07:23.780
or lots of other ancillary
windows for your project.

00:07:23.830 --> 00:07:27.940
So we try and give you both extremes
of lots of things or very few things,

00:07:28.040 --> 00:07:29.730
depending on who you are.

00:07:29.760 --> 00:07:30.100
And you can have a lot of
different ways of developing.

00:07:30.100 --> 00:07:34.130
And you can see these in the new
workspace layouts in the 2.0 version.

00:07:34.350 --> 00:07:37.330
Other things that you can
see are new attached editors.

00:07:37.450 --> 00:07:39.800
So things like the build results window,
the find window,

00:07:39.800 --> 00:07:42.390
the ability to attach an editor
to the bottom so that as you're

00:07:42.390 --> 00:07:44.780
in the middle of doing something,
as you're in the middle of that workflow

00:07:44.780 --> 00:07:46.820
and you just want to see a file,
I just want to change one thing

00:07:46.920 --> 00:07:49.270
or scroll and see something,
you don't have to get out of that

00:07:49.270 --> 00:07:50.750
particular mindset or context.

00:07:50.750 --> 00:07:52.100
You can do it right there.

00:07:54.570 --> 00:07:56.500
: Customizable views.

00:07:56.570 --> 00:07:59.780
Things like being able to take the
headers or the columns that are displayed

00:07:59.810 --> 00:08:02.880
in a certain place and view just the
things you want or add things that

00:08:02.920 --> 00:08:04.470
you want for a particular workflow.

00:08:04.600 --> 00:08:09.250
Things like SCM information,
target management, the size of code,

00:08:09.260 --> 00:08:14.980
whether it needs to be rebuilt,
errors and warnings.

00:08:15.360 --> 00:08:17.150
All sorts of things to allow
you to customize the view to the

00:08:17.150 --> 00:08:17.150
way you work when you need it.

00:08:18.180 --> 00:08:20.060
will be talking about Xcode
and some of the new features

00:08:20.060 --> 00:08:21.110
that are coming out of it.

00:08:21.190 --> 00:08:21.780
So let's get started.

00:08:21.900 --> 00:08:24.060
So let's talk about the new features
that are coming out of Xcode.

00:08:24.060 --> 00:08:24.940
So we'll get started
with the new features.

00:08:24.940 --> 00:08:26.480
So let's talk about the new features.

00:08:26.550 --> 00:08:28.410
The first thing we're going to
talk about is the key bindings.

00:08:28.450 --> 00:08:30.180
So the key bindings are
not just a simple thing.

00:08:30.180 --> 00:08:31.470
They're not just a simple thing.

00:08:31.480 --> 00:08:32.980
They're a lot of different things.

00:08:32.980 --> 00:08:34.980
They're also things like
customizable key bindings.

00:08:34.980 --> 00:08:37.490
I'm sure there are lots of
people in here that love Emax,

00:08:37.500 --> 00:08:40.530
or love a particular program
where it's all done right here.

00:08:40.540 --> 00:08:41.640
You know exactly what it is.

00:08:41.640 --> 00:08:43.240
Someone says build,
you don't think of an action.

00:08:43.240 --> 00:08:45.430
You think of a finger stroke,
or some way of grabbing the

00:08:45.430 --> 00:08:46.880
keyboard to do something.

00:08:46.880 --> 00:08:47.760
That's important.

00:08:47.950 --> 00:08:50.220
And you'll see that in a little bit.

00:08:51.140 --> 00:08:53.900
is the founder of Xcode.

00:08:53.920 --> 00:08:58.360
He's the founder of the Xcode platform.

00:08:58.360 --> 00:09:02.020
And Matt is the founder of Xcode.

00:09:02.050 --> 00:09:08.530
And we've had a lot of great
conversations with him on this.

00:09:08.530 --> 00:09:11.880
And he's the founder of Xcode.

00:09:11.880 --> 00:09:13.110
And we're glad to have him on the panel.

00:09:13.110 --> 00:09:13.110
And we're glad to have him on the panel.

00:09:14.590 --> 00:09:17.500
Over and above just managing your project
and deal with some of the niceties,

00:09:17.600 --> 00:09:18.510
it's getting into your project.

00:09:18.580 --> 00:09:21.260
It's figuring out what I want
to do and how I want to do it.

00:09:21.350 --> 00:09:24.590
So Xcode includes a number of things
like project templates and assistance

00:09:24.820 --> 00:09:25.810
to help you get up to speed.

00:09:26.080 --> 00:09:28.900
Pick the type of application or the
type of thing you're trying to build,

00:09:29.010 --> 00:09:33.400
whether it's a Cocoa application or an
Automator stage or any of these things.

00:09:33.510 --> 00:09:36.720
Just go ahead and grab one of the
assistance and get up to speed very,

00:09:36.720 --> 00:09:37.660
very quickly.

00:09:38.320 --> 00:09:57.910
: Inspectors.

00:09:57.910 --> 00:09:57.910
Once you're looking at something,
you probably want to change things.

00:09:57.910 --> 00:09:57.910
You probably want to modify values.

00:09:57.910 --> 00:09:57.910
You probably want to tweak it
just a little bit so that the

00:09:57.910 --> 00:09:57.910
name looks a little different
or it's got a different setting.

00:09:57.910 --> 00:09:57.910
Inspectors are a very,
very familiar paradigm,

00:09:57.910 --> 00:09:57.910
and we use them all over the
place in Xcode to try and

00:09:57.910 --> 00:09:57.910
give you that ease of use,
to make things very, very familiar,

00:09:57.910 --> 00:09:57.910
but also very, very flexible.

00:09:58.940 --> 00:10:01.880
Listing information is very complex.

00:10:02.020 --> 00:10:03.670
Where you want things to go,
how you want things to

00:10:03.760 --> 00:10:05.860
be viewed can be very,
very difficult.

00:10:05.860 --> 00:10:08.260
And there are things like
the whole smart concept,

00:10:08.340 --> 00:10:11.650
smart playlists in iTunes that keep
track of things you looked at last,

00:10:11.650 --> 00:10:14.200
or mail folders that keep
track of some heuristic.

00:10:14.200 --> 00:10:15.760
We were doing this last year.

00:10:15.760 --> 00:10:18.040
Smart groups,
the ability to look at something

00:10:18.320 --> 00:10:21.080
based on a particular element,
whether it's a file name or it's

00:10:21.200 --> 00:10:24.130
the type of thing you're looking at,
whether it's a find result

00:10:24.130 --> 00:10:25.830
or it's an SCM information.

00:10:25.830 --> 00:10:27.520
Smart, smart things.

00:10:27.520 --> 00:10:28.780
Let Xcode do the work for you.

00:10:28.800 --> 00:10:30.830
you just take the benefit of
being able to go there very,

00:10:30.840 --> 00:10:33.670
very quickly and take advantage of it.

00:10:35.410 --> 00:10:37.890
When your projects get big,
and we know they do,

00:10:37.900 --> 00:10:40.170
it's the ability to go ahead
and search and find things,

00:10:40.280 --> 00:10:42.580
filter things down, get access to things.

00:10:42.580 --> 00:10:45.300
It's that one file or that one method
you can't find that you'll sit there

00:10:45.300 --> 00:10:48.780
for minutes just being frustrated,
and then sometimes go to the terminal

00:10:48.780 --> 00:10:50.540
and use grep to find the file it's in.

00:10:50.670 --> 00:10:51.610
That's not necessary.

00:10:51.720 --> 00:10:54.880
Xcode provides a lot of functionality
to help you find things,

00:10:55.000 --> 00:10:57.580
both find files, find methods,
find functions,

00:10:57.800 --> 00:11:00.130
find the things that you need,
get to them quickly,

00:11:00.300 --> 00:11:02.370
get on with your life.

00:11:04.160 --> 00:11:06.030
Once you get there, though,
it's what do I do with it?

00:11:06.120 --> 00:11:09.330
It's the concept of source code editing,
of providing you the ability to

00:11:09.330 --> 00:11:12.030
use different kinds of editors,
whether it's an editor inside of

00:11:12.040 --> 00:11:15.320
one window or lots of external
editors in different applications,

00:11:15.320 --> 00:11:18.990
using the things that you're used to and
getting the functionality that you want.

00:11:19.100 --> 00:11:21.800
Things like file editing history,
be able to go back and forth

00:11:21.800 --> 00:11:24.240
between a number of files very,
very quickly.

00:11:24.240 --> 00:11:26.960
If you're looking at an
implementation file or a definition,

00:11:26.960 --> 00:11:29.550
go back to the declaration,
or pop between three or four

00:11:29.660 --> 00:11:30.990
files if they're all related.

00:11:31.120 --> 00:11:32.900
These are things that are
relatively easy to do,

00:11:33.120 --> 00:11:35.230
and we provide them for you.

00:11:35.340 --> 00:11:37.160
Function pop-ups,
being able to introspect a source

00:11:37.160 --> 00:11:40.880
code file and show you what's in it,
give you quick access to jump to

00:11:40.880 --> 00:11:43.140
a particular point in your file.

00:11:43.270 --> 00:11:45.150
Also things like
counterparts and inclusions.

00:11:45.270 --> 00:11:48.900
We know all sorts of things about your
project by virtue of having it indexed.

00:11:48.960 --> 00:11:50.960
We can show you things like, oh,
I know where that other file is.

00:11:51.020 --> 00:11:53.020
I know where the header is
for this particular element.

00:11:53.100 --> 00:11:55.640
Or I know all the files that happen
to include the one you're in.

00:11:55.940 --> 00:11:58.980
So if you make a change here,
we make it easy to go to the other ones.

00:11:59.050 --> 00:12:03.580
Little tiny things, intuitive things,
that we provide right at your fingertips.

00:12:03.820 --> 00:12:06.990
Even things like an annotated gutter,
when you build and you have problems,

00:12:06.990 --> 00:12:08.020
errors and warnings.

00:12:08.020 --> 00:12:09.180
We know where they're from.

00:12:09.180 --> 00:12:10.720
We know specifically where they're from.

00:12:10.760 --> 00:12:13.400
We make it very,
very easy to get back to those places,

00:12:13.450 --> 00:12:16.880
get those things fixed,
and get on with the things you need.

00:12:16.880 --> 00:12:18.550
I mentioned editor support a little bit.

00:12:18.560 --> 00:12:20.820
We also have support
for external editors,

00:12:20.960 --> 00:12:24.740
popular editors like bbedit, subethaedit,
even textedit if you like.

00:12:24.790 --> 00:12:27.360
Use those as your standard editor
if that's your preferred method

00:12:27.550 --> 00:12:28.730
of editing your source code file.

00:12:28.970 --> 00:12:31.530
But take all advantage of the
rest of Xcode to allow you

00:12:31.530 --> 00:12:33.770
to use that functionality and
work through your project.

00:12:33.780 --> 00:12:35.130
projects.

00:12:37.750 --> 00:12:39.290
Once you start working, again,
there's lots of

00:12:39.290 --> 00:12:41.680
assistance we can provide,
and we've done a lot to take

00:12:41.720 --> 00:12:44.060
what we call code sense,
our ability to take a symbolic

00:12:44.120 --> 00:12:47.030
index of your source code and
provide it to you in useful ways.

00:12:47.040 --> 00:12:50.210
One way that you saw last year
in Xcode 1.0 was code completion,

00:12:50.250 --> 00:12:53.100
the ability to take this
symbol-rich information and say,

00:12:53.100 --> 00:12:53.410
you know what?

00:12:53.690 --> 00:12:55.980
Contextually in my source code file,
I'm right here.

00:12:56.000 --> 00:12:56.940
Help me with this.

00:12:56.940 --> 00:12:58.890
I don't know the method I'm looking for.

00:12:58.890 --> 00:13:00.370
I forget the function name.

00:13:00.370 --> 00:13:02.580
I know there's a variable,
but I can't remember what it is.

00:13:02.640 --> 00:13:04.550
The ability to provide that
to you at your fingertips.

00:13:04.630 --> 00:13:07.560
I'm very pleased to announce that
last year we mentioned that we were

00:13:07.890 --> 00:13:09.280
going to do it for all the C dialects.

00:13:09.530 --> 00:13:10.860
Today we have it for Java.

00:13:10.860 --> 00:13:14.180
So all the Java developers here,
you have code completion now.

00:13:18.780 --> 00:13:20.340
Also things like design tools.

00:13:20.460 --> 00:13:23.190
If you saw Ted's keynote yesterday,
you saw the ability to take source

00:13:23.520 --> 00:13:26.000
code that you have and design it,
look at models of it,

00:13:26.120 --> 00:13:28.460
take an overview of it,
not just from how it's implemented,

00:13:28.460 --> 00:13:31.310
but as a management tool,
as a design tool, as a way to work with

00:13:31.310 --> 00:13:33.350
other developers and say,
this is the kind of

00:13:33.450 --> 00:13:34.620
thing I'm looking for.

00:13:34.710 --> 00:13:38.390
Very,
very powerful tools built on stuff that,

00:13:38.390 --> 00:13:42.250
again,
we already know about your source code.

00:13:42.250 --> 00:13:42.690
So it's not work you have to do.

00:13:42.690 --> 00:13:42.690
It's just something you
can take advantage of.

00:13:45.320 --> 00:13:47.700
also thinks like something
simple like open quickly.

00:13:47.780 --> 00:13:49.440
We know there are lots
of things on your system.

00:13:49.670 --> 00:13:51.870
We know there are lots of places
you want to look for things.

00:13:51.970 --> 00:13:54.450
We help you with that by giving
you the ability to specify,

00:13:54.450 --> 00:13:56.310
you know,
regardless of what project I'm in,

00:13:56.520 --> 00:14:00.630
I want you to look all over here
to add to Xcode's purview just

00:14:00.730 --> 00:14:04.900
a list of all sorts of things
that you want to have access to,

00:14:04.900 --> 00:14:08.430
to, again, make it very,
very easy to keep track of those things,

00:14:08.430 --> 00:14:08.430
but make sure that they're right at
your fingertips when you need them.

00:14:09.820 --> 00:14:12.160
and certainly not least, documentation.

00:14:12.180 --> 00:14:14.560
We have the pleasure of
having lots of lots of very,

00:14:14.560 --> 00:14:17.490
very good and rich
documentation on both our APIs,

00:14:17.490 --> 00:14:20.560
our tools,
and all sorts of different functionality.

00:14:20.560 --> 00:14:22.760
And this is integrated into Xcode.

00:14:22.780 --> 00:14:25.900
There's full API and full text searching,
so you can type in whatever

00:14:25.900 --> 00:14:27.270
you're looking for,
whether it's a particular

00:14:27.270 --> 00:14:30.440
method or a particular class,
and find what you're looking for.

00:14:30.570 --> 00:14:32.870
All the reference materials,
all the tutorials right

00:14:32.870 --> 00:14:34.940
at your fingertips,
with quick navigation,

00:14:34.940 --> 00:14:38.000
with different keystrokes to get
right to it from your source code,

00:14:38.070 --> 00:14:40.250
but also the ability,
the new ability in the new Xcode

00:14:40.250 --> 00:14:42.800
releases of bookmarking it,
of waiting all the way down to

00:14:42.800 --> 00:14:46.040
the depths of the documentation,
being able to mark it and say, you know,

00:14:46.040 --> 00:14:47.050
this is important to me.

00:14:47.050 --> 00:14:48.140
I want to get back here.

00:14:48.210 --> 00:14:49.290
So we've included bookmarks in that.

00:14:51.010 --> 00:14:56.970
will be here to talk
about the basic things.

00:14:56.970 --> 00:14:56.970
Let's go through a quick demo of some
of those project navigation elements.

00:15:04.160 --> 00:15:06.860
So what we're looking at here is
I'm going to open up a simple app.

00:15:06.920 --> 00:15:10.360
It's called Blast App,
and it's actually a Java application.

00:15:10.710 --> 00:15:14.680
So we're going to go ahead and open
this up using the older style workspace,

00:15:14.680 --> 00:15:16.270
just as an example here.

00:15:16.380 --> 00:15:18.560
But we'll see it's divided
into two main elements.

00:15:18.660 --> 00:15:21.210
We've got the outline view
on the left-hand side,

00:15:21.230 --> 00:15:24.790
which lists a hierarchical view of
your application or your project.

00:15:24.860 --> 00:15:27.250
It gives you the ability to
structure your project in any way,

00:15:27.280 --> 00:15:27.900
shape, or form.

00:15:28.060 --> 00:15:29.460
These are groups that you can create.

00:15:29.500 --> 00:15:31.620
You can drag files into
any group that you want to,

00:15:31.620 --> 00:15:33.460
regardless of where they
are on the file system,

00:15:33.530 --> 00:15:36.200
allowing you to organize your project
maybe the way you think about it,

00:15:36.260 --> 00:15:38.340
not the way it's laid out on disk.

00:15:38.420 --> 00:15:40.570
But you'll note that beneath
that are some of the elements

00:15:40.640 --> 00:15:43.730
that we call smart groups,
the ability to do something interesting

00:15:43.730 --> 00:15:47.570
with content about your project for you,
things like errors and warnings,

00:15:47.750 --> 00:15:51.750
fine results, bookmarks,
other smart folders

00:15:51.760 --> 00:15:54.100
that we create for you,
the ability to take this information

00:15:54.170 --> 00:15:56.220
and provide it right at your fingertips.

00:15:56.270 --> 00:15:59.420
Now, as you click through things on the
left-hand side in the outline view,

00:15:59.420 --> 00:16:02.290
they're going to show up in the
detail view on the right-hand side,

00:16:02.560 --> 00:16:02.820
just a flat table view.

00:16:02.870 --> 00:16:05.430
So you can see that you have a flat
table view of all of the content

00:16:05.500 --> 00:16:06.660
that are inside those groups.

00:16:06.660 --> 00:16:09.580
This makes it very easy to
navigate and look for things.

00:16:09.610 --> 00:16:11.020
Whereas the hierarchy
gives you structure,

00:16:11.020 --> 00:16:14.010
allows you to compartmentalize things,
it also requires that you

00:16:14.010 --> 00:16:16.320
have lots of hierarchy,
potentially lots of hierarchy,

00:16:16.330 --> 00:16:17.860
that where you don't want
to find something that was

00:16:17.860 --> 00:16:19.800
way down at the bottom,
you'd have to go through and

00:16:19.930 --> 00:16:22.700
twiddle open all the folders and
potentially close them all back up.

00:16:22.890 --> 00:16:24.280
But with the detail view,
you can just go ahead

00:16:24.280 --> 00:16:25.440
and select something.

00:16:25.440 --> 00:16:28.500
And we'll show you the aggregate of
the selection on the right-hand side.

00:16:28.720 --> 00:16:31.710
So as I select different folders,
we'll start to see that the

00:16:31.720 --> 00:16:33.690
contents of those folders
appear on the right-hand side,

00:16:33.690 --> 00:16:37.180
making it very easy to look
at different kinds of things.

00:16:37.220 --> 00:16:40.900
Now this is particularly useful in these
little smart folders we have down here,

00:16:41.160 --> 00:16:44.580
which are actually folders we've set up
to look at a particular type of file.

00:16:44.680 --> 00:16:47.240
It's basically a rule that
we ask it to filter on.

00:16:47.550 --> 00:16:49.050
In this case, the first one is nib files.

00:16:49.340 --> 00:16:52.020
So we're just going to show the nib
files here on the right-hand side.

00:16:52.200 --> 00:16:54.020
The next one is implementation files.

00:16:54.080 --> 00:16:55.830
And in this case, I only see one.

00:16:55.960 --> 00:16:57.550
Unfortunately,
our default implementation file

00:16:57.620 --> 00:17:00.060
smart group filters on .m and .h.

00:17:00.120 --> 00:17:03.280
Well, I don't have .m and .h,
I have .java in my application here.

00:17:03.360 --> 00:17:05.770
So let me just go ahead and
add a new smart group here to

00:17:05.880 --> 00:17:09.020
show you how easy it is to get
something particularly powerful.

00:17:09.200 --> 00:17:12.440
So I'm just going to go ahead
and call this java files.

00:17:12.470 --> 00:17:15.990
And I'm going to change the pattern
here to instead of being star.nib,

00:17:15.990 --> 00:17:17.860
just to star.java.

00:17:17.880 --> 00:17:20.020
And you see that instantly,
there are all the java

00:17:20.020 --> 00:17:22.460
files in my application,
or my project.

00:17:22.460 --> 00:17:24.580
Maybe I want to do something
a little more interesting.

00:17:24.580 --> 00:17:26.520
In this case,
the Blast app has a bunch of

00:17:26.540 --> 00:17:28.300
what are called smart elements.

00:17:28.370 --> 00:17:30.690
So I can just do smart star.java.

00:17:30.860 --> 00:17:31.860
And there's a particular set of files.

00:17:31.860 --> 00:17:33.860
Now,
that may not seem relatively powerful,

00:17:33.860 --> 00:17:35.360
but the ability to
hone this down and say,

00:17:35.360 --> 00:17:37.680
you know,
today I'm working on just these files.

00:17:37.950 --> 00:17:39.990
They're spread all
over across my project,

00:17:40.170 --> 00:17:41.380
but I want them in one place.

00:17:41.510 --> 00:17:43.880
I want them in a simple place that
I can go and get access to them.

00:17:43.940 --> 00:17:46.140
We make it very easy to
go ahead and create those.

00:17:46.260 --> 00:17:48.190
Additionally,
we can actually save these on

00:17:48.190 --> 00:17:52.460
a per project or for all your
projects on a per user basis.

00:17:52.550 --> 00:17:54.240
So were you to find
something you find really,

00:17:54.240 --> 00:17:56.560
really useful,
you can go ahead and set this up once,

00:17:56.570 --> 00:17:59.520
and all of your projects
take advantage of it.

00:18:00.900 --> 00:19:36.000
[Transcript missing]

00:19:36.960 --> 00:19:40.840
So in addition to some of
these file-based smart groups,

00:19:40.860 --> 00:19:43.950
we also have things like project symbols.

00:19:44.120 --> 00:19:46.640
So the project symbol smart
group takes the contents from the

00:19:46.640 --> 00:19:50.280
symbolic index that we have about
this project and shows us a list.

00:19:50.280 --> 00:19:52.710
So I can scroll down through the
list here of all the different

00:19:52.850 --> 00:19:54.540
symbols that are in this project.

00:19:54.600 --> 00:19:57.100
And I have the same capabilities
of being able to filter on it.

00:19:57.180 --> 00:19:58.710
So I can filter by name.

00:19:58.890 --> 00:20:01.380
And let's just go ahead again,
look for the word

00:20:01.380 --> 00:20:06.270
"explode." And apparently,
everything in this app explodes.

00:20:06.300 --> 00:21:55.700
[Transcript missing]

00:21:56.000 --> 00:22:11.000
[Transcript missing]

00:22:12.330 --> 00:22:14.790
For some people, though,
this is not enough real estate to edit.

00:22:14.810 --> 00:22:16.770
No matter how big I make
this or I want this,

00:22:16.840 --> 00:22:18.300
I want something a little bit different.

00:22:18.300 --> 00:22:20.680
So, in addition to providing
the internal editor,

00:22:20.790 --> 00:22:22.800
we can also provide a separate editor.

00:22:22.810 --> 00:22:25.420
I can go ahead and double-click
on a source code file,

00:22:25.640 --> 00:22:27.800
and you note that it pops
up in this separate window.

00:22:27.800 --> 00:22:30.800
I can go ahead and do that
for a number of other files,

00:22:30.800 --> 00:22:32.910
just bring up as many
files as I want here,

00:22:33.080 --> 00:22:37.000
and I can get all the windows
that I could ever possibly want.

00:22:37.220 --> 00:22:41.100
: How many windows are too many?

00:22:41.110 --> 00:22:44.220
At this point,
we have four windows for editing,

00:22:44.220 --> 00:22:46.100
and the screen's getting
a little bit cluttered.

00:22:46.100 --> 00:22:49.530
So we provide you the functionality
to tailor your workflow in such a way

00:22:49.530 --> 00:22:53.100
that if I close some of these other
windows and go back to the first one,

00:22:53.100 --> 00:22:56.100
I see that I have a little tiled
editing mode button up here.

00:22:56.100 --> 00:22:58.220
When I click it,
it becomes a single window,

00:22:58.370 --> 00:23:01.030
such that if I go through
and now open some more files,

00:23:01.100 --> 00:23:04.090
you'll note that they all
appear in that one window.

00:23:04.100 --> 00:23:07.100
So we allow you to say whether you want
all of your stuff in the project window,

00:23:07.100 --> 00:23:08.100
you want all your stuff
in separate windows,

00:23:08.100 --> 00:23:12.100
or you want one separate window
to put all of your source code in,

00:23:12.100 --> 00:23:16.580
making it easy to move back and forth
between different pieces of source code.

00:23:17.280 --> 00:23:18.240
So now we've got source code.

00:23:18.240 --> 00:23:20.200
Let's do something interesting with it.

00:23:20.200 --> 00:23:23.710
So as I've mentioned before,
we now support code completion for Java.

00:23:23.780 --> 00:23:27.950
So here's a little bit of
Java code in the Arrow Base class.

00:23:28.000 --> 00:23:29.740
I'm just going to go ahead
and I'm just going to move

00:23:29.740 --> 00:23:32.240
this code down a little bit,
give myself some room here,

00:23:32.350 --> 00:23:34.540
and say that I was just typing
this for the first time.

00:23:34.550 --> 00:23:37.400
So pretend this doesn't exist here,
but use this as reference for

00:23:37.400 --> 00:23:39.050
what I'm going to start typing in.

00:23:39.100 --> 00:23:42.900
I could just go ahead and start typing,
you know, "game piece," and you see the

00:23:42.900 --> 00:23:47.160
ability to not type when you're
up on stage is pretty prevalent.

00:23:47.160 --> 00:23:49.790
So what I want to do
is in this next case,

00:23:49.800 --> 00:23:52.120
I'm going to say, "All right,
I have this Arrow element.

00:23:52.220 --> 00:23:56.400
I should be able to use something I know
about this by the virtue of the fact that

00:23:56.400 --> 00:24:00.570
the project knows all kinds of things
about the Arrow class." So I could just

00:24:00.570 --> 00:24:04.020
go ahead and hit the code completion key,
and it's going to go ahead

00:24:04.020 --> 00:24:05.160
and bring up a list of things.

00:24:05.160 --> 00:24:07.130
You'll note at the bottom
of the completion pop-up,

00:24:07.180 --> 00:24:09.350
it says "game piece."
It knows what type it is,

00:24:09.350 --> 00:24:11.400
and it's showing me
things that match that.

00:24:11.730 --> 00:24:13.160
In this case,
it's showing me all the elements

00:24:13.160 --> 00:24:17.120
that seem appropriate based on
the letter "i" that I typed in.

00:24:17.120 --> 00:24:19.940
In this case,
what I want is the "init in game" method.

00:24:20.230 --> 00:24:23.120
So I can just arrow down,
or I can use the mouse to select that.

00:24:23.120 --> 00:24:25.120
It's going to automatically
select the placeholder for me,

00:24:25.120 --> 00:24:27.120
and I can type that in.

00:24:27.120 --> 00:24:29.230
I can also do something
like the next one,

00:24:29.230 --> 00:24:32.120
where I know that the Arrow also
has lots of set methods,

00:24:32.200 --> 00:24:34.120
and I can go ahead and set the velocity.

00:24:34.120 --> 00:24:37.120
And in this case, it's a new NS size.

00:24:37.250 --> 00:24:39.850
But now I might get here and realize,
you know,

00:24:39.860 --> 00:24:42.120
I don't know what an NS size is.

00:24:42.120 --> 00:24:44.070
I don't actually know how to use this.

00:24:44.140 --> 00:24:45.820
At this point,
we can use the fact that we

00:24:45.820 --> 00:24:48.410
have lots of documentation,
and we can use the reference to

00:24:48.410 --> 00:24:50.080
figure out what these things are.

00:24:50.080 --> 00:24:53.080
We also have two keystrokes
that are particularly useful,

00:24:53.080 --> 00:24:55.160
that I think most people
don't realize at first,

00:24:55.250 --> 00:24:57.080
but once they do,
feel like they can't live without.

00:24:57.080 --> 00:25:00.750
Those are Command-double-click
and Option-double-click.

00:25:01.010 --> 00:25:04.900
If I command-double-click on NS size,
what it's actually going to go do

00:25:04.900 --> 00:25:07.690
is bring up a list of all the things
in the symbol index that match

00:25:07.840 --> 00:25:10.870
that and allow me to go ahead and
select one and take me right to it.

00:25:10.900 --> 00:25:13.000
In this case,
it's not necessarily very interesting.

00:25:13.000 --> 00:25:15.020
The implementation doesn't
really do very much here.

00:25:15.020 --> 00:25:17.330
So let's instead do an
option double-click,

00:25:17.330 --> 00:25:20.080
which is going to bring up
our documentation window,

00:25:20.090 --> 00:25:22.830
automatically put NS size
up here in the upper right,

00:25:22.830 --> 00:25:26.140
find some matches,
and automatically show me one of them.

00:25:26.140 --> 00:25:29.130
And that's the one I'd be looking for,
would be the Java reference

00:25:29.130 --> 00:25:30.660
implementation for NS size.

00:25:30.900 --> 00:25:33.000
This is a very, very handy window.

00:25:33.000 --> 00:25:36.100
If you've never used it before,
I implore you to go ahead and grab the

00:25:36.180 --> 00:25:38.400
Help menu and pull up the documentation.

00:25:38.400 --> 00:25:42.170
The ability to look based on groups,
the ability to take my search and

00:25:42.250 --> 00:25:45.460
click on a library and refine that
search to that particular set,

00:25:45.460 --> 00:25:47.520
to be able to look in the drivers,
to be able to look in

00:25:47.550 --> 00:25:50.420
Java and refine this search,
but also the ability to

00:25:50.420 --> 00:25:53.660
change my search from,
in this case, we're looking at APIs.

00:25:53.660 --> 00:25:57.030
Maybe I want to do a full-text
search of anything that has anything

00:25:57.150 --> 00:25:59.000
and everything to do with NS size.

00:25:59.010 --> 00:26:00.770
So go ahead and enter that.

00:26:00.900 --> 00:26:03.740
Hit Return, and we're going to go ahead
and search all these locations,

00:26:03.990 --> 00:26:07.600
doing relevant searches
on all the content here.

00:26:07.840 --> 00:26:10.300
Where I'd actually want to go down
and pull up a particular class,

00:26:10.300 --> 00:26:11.820
I could say, ah,
this is the one I've been

00:26:11.900 --> 00:26:14.010
looking for for so long,
I could just go ahead,

00:26:14.110 --> 00:26:16.540
add a bookmark to it,
and it's going to appear right there,

00:26:16.590 --> 00:26:20.400
so it allows me quick access
to go back to it later.

00:26:20.680 --> 00:26:23.750
Full suite of documentation
right at your fingertips,

00:26:23.750 --> 00:26:25.370
very, very easy to use.

00:26:26.140 --> 00:26:28.650
So you've seen some code completion.

00:26:28.960 --> 00:26:31.880
Let's talk a little bit
about indexing in general.

00:26:32.950 --> 00:26:37.590
You've had a lot of feedback on indexing.

00:26:37.700 --> 00:26:38.750
We've listened.

00:26:38.890 --> 00:26:40.460
We've done some things about it.

00:26:40.730 --> 00:26:42.570
We've given you code completion for Java.

00:26:42.700 --> 00:26:46.600
We've improved the indexing speed in
general and our accuracy in our parsers.

00:26:46.600 --> 00:26:49.830
But probably the most requested feature,
we've put indexing on

00:26:49.960 --> 00:26:51.260
a background thread.

00:26:52.950 --> 00:26:56.560
So now as we parse your source code,
that's all going to be done

00:26:56.560 --> 00:26:57.540
on a background thread.

00:26:57.600 --> 00:26:58.660
It's not going to interfere with you.

00:26:58.660 --> 00:26:59.820
It's not going to bother you.

00:26:59.850 --> 00:27:02.680
Go ahead and go about your daily
work when the index is done.

00:27:02.720 --> 00:27:05.780
You won't even know it because it
won't even have been bothering you.

00:27:05.810 --> 00:27:07.640
But we've improved the speed in general.

00:27:07.640 --> 00:27:11.020
And what I'd like to do is show
you an example of how that looks.

00:27:11.090 --> 00:27:12.820
So what I'm going to do is
I'm actually going to bring up

00:27:12.990 --> 00:27:15.470
something I mentioned before,
which is the activity window.

00:27:15.580 --> 00:27:17.610
It's going to sit down
here in the lower right.

00:27:17.770 --> 00:27:19.860
And the activity window is
going to show me things that

00:27:19.860 --> 00:27:21.800
are going on in my application.

00:27:21.800 --> 00:27:23.780
Now in this case,
what I want to do is actually

00:27:23.810 --> 00:27:25.380
show you the indexing.

00:27:25.580 --> 00:27:28.000
So I'm going to go ahead and
bring up the Project Inspector.

00:27:28.030 --> 00:27:30.400
And I'm going to go ahead and
bring up the CodeSense tab.

00:27:30.410 --> 00:27:33.560
And you see that there's this little
button here called Rebuild Index.

00:27:33.570 --> 00:27:35.680
Now I'm sure most of you
are sitting there going,

00:27:35.730 --> 00:27:37.690
he's not going to press that, is he?

00:27:37.810 --> 00:27:40.360
He's not actually going to
try and rebuild a Java index

00:27:40.460 --> 00:27:42.800
for a project on stage,
is he?

00:27:42.820 --> 00:27:45.310
That takes forever, doesn't it?

00:27:45.540 --> 00:27:48.880
If it's going to work for you,
it's got to work for me up here.

00:27:48.990 --> 00:27:51.460
So I'll watch the activity
view in the lower right.

00:27:51.560 --> 00:27:53.440
I'm going to go ahead
and click Rebuild Index.

00:27:53.440 --> 00:27:55.850
It's going to ask me if
I really want to do this.

00:27:55.890 --> 00:27:57.400
Do I?

00:27:57.890 --> 00:27:59.280
So I'm going to go ahead and click OK.

00:27:59.280 --> 00:28:01.280
We're going to see the
project industry starts up.

00:28:01.280 --> 00:28:03.350
And wait.

00:28:03.650 --> 00:28:05.980
That can't have worked.

00:28:06.040 --> 00:28:07.700
Let me go back here
to my project symbols,

00:28:07.700 --> 00:28:11.850
just make sure that-- we
actually do have project symbols.

00:28:11.860 --> 00:28:13.240
We seem like we had them before.

00:28:13.300 --> 00:28:14.090
Let's just make sure.

00:28:14.260 --> 00:28:16.720
Let's go pull up the class browser here.

00:28:16.780 --> 00:28:18.660
This will be the true test.

00:28:18.860 --> 00:28:21.600
Well, we've got the class browser here.

00:28:21.600 --> 00:28:26.490
Let's make sure we do have the-- well,
yeah, we do have all the JDK information.

00:28:26.580 --> 00:28:27.000
All right.

00:28:27.000 --> 00:28:29.940
So to prove to you that
this is not sleight of hand,

00:28:29.940 --> 00:28:31.690
I'm not making this up,
I'm going to go ahead

00:28:31.690 --> 00:28:32.840
and disable indexing.

00:28:33.000 --> 00:28:33.690
So I'm going to turn this off.

00:28:33.760 --> 00:28:36.060
And you'll note that both
of these windows go away.

00:28:36.060 --> 00:28:36.990
I no longer have content.

00:28:37.000 --> 00:28:37.960
I can't code code complete.

00:28:37.960 --> 00:28:40.080
I can't do anything because
I have no more index.

00:28:40.370 --> 00:28:42.040
So now I'm going to go back,
bring the activity

00:28:42.040 --> 00:28:45.370
window here to the front,
go ahead and click on Enable Indexing.

00:28:45.440 --> 00:28:47.360
You'll see that the
project indexer starts up.

00:28:47.370 --> 00:28:51.280
And lo and behold,
there's my project symbols.

00:28:51.290 --> 00:28:52.150
I can go back here.

00:28:52.190 --> 00:28:54.420
And again, I'm not making this up.

00:28:54.430 --> 00:28:56.290
There's the JDK.

00:29:01.050 --> 00:29:03.660
Now, to be honest, this is using a lot of
capabilities of Xcode.

00:29:03.660 --> 00:29:04.580
We have index templates.

00:29:04.710 --> 00:29:05.600
We have updated parsers.

00:29:05.600 --> 00:29:07.890
We have all sorts of things
that make this possible.

00:29:08.020 --> 00:29:10.290
But indexing should no
longer be a burden on you.

00:29:10.350 --> 00:29:11.760
It should be something
you guys all want to use,

00:29:11.760 --> 00:29:13.990
all want to take advantage of.

00:29:15.890 --> 00:29:18.180
One final thing I want to talk
about with just general workflow

00:29:18.180 --> 00:29:21.110
is the ability to set key bindings.

00:29:21.340 --> 00:29:26.400
An oft-- or a seldom used control panel--
or a preference here is the key bindings.

00:29:26.510 --> 00:29:32.260
The ability to go in and select a key
binding for Xcode or for another IDE,

00:29:32.260 --> 00:29:34.360
and the ability to go
through and set things.

00:29:34.470 --> 00:29:37.150
Here are all the menu items,
and here are all the key bindings.

00:29:37.270 --> 00:29:39.400
The ability to just go ahead
and double-click on one of those

00:29:39.400 --> 00:29:40.630
and set it to whatever you want.

00:29:40.630 --> 00:29:42.510
I would encourage you guys
to go ahead and look here,

00:29:42.590 --> 00:29:45.420
because it also shows you a list of all
the things that are available in Xcode,

00:29:45.420 --> 00:29:47.700
all the different functions,
all the different features.

00:29:47.700 --> 00:29:48.760
Customize it to your will.

00:29:48.760 --> 00:29:49.730
Make it the way you want.

00:29:49.730 --> 00:29:51.200
Very, very useful feature.

00:29:53.320 --> 00:29:56.340
So that's just a quick overview
of some of the project management

00:29:56.340 --> 00:29:57.450
and navigation elements.

00:29:57.590 --> 00:30:01.390
Let's take a look at some
of the other parts of Xcode.

00:30:04.420 --> 00:30:07.150
I would implore you that there's
an increasing productivity session

00:30:07.150 --> 00:30:10.750
tomorrow in this very room at 2 o'clock,
which goes into a lot of

00:30:11.020 --> 00:30:12.840
these elements in much,
much more detail.

00:30:12.840 --> 00:30:15.920
So I'd encourage you guys to come to that
if you're interested in this content.

00:30:18.380 --> 00:30:19.800
We talked about the environment.

00:30:19.800 --> 00:30:21.480
We've talked about development.

00:30:21.540 --> 00:30:24.020
Let's talk about integration,
because that's what Xcode is about,

00:30:24.020 --> 00:30:27.410
is integrating all sorts of
really great features into an IDE.

00:30:27.420 --> 00:30:29.860
There are all sorts of things
we have to pull together to make

00:30:29.860 --> 00:30:33.530
development possible-- build system,
debugger,

00:30:33.530 --> 00:30:36.320
source control management tools,
profiling tools.

00:30:36.630 --> 00:30:38.880
These are all things that we
can add in and leverage from our

00:30:38.880 --> 00:30:43.440
platform to give you advantages,
to give you things to get your work done.

00:30:43.630 --> 00:30:46.110
The first one is an
integrated build system.

00:30:46.140 --> 00:30:48.100
This is kind of key.

00:30:48.180 --> 00:30:52.680
We have a system that takes a project
model and implements the idea of targets.

00:30:52.820 --> 00:30:55.250
Targets are instructions
or sets of things to create

00:30:55.250 --> 00:30:56.930
something or do something.

00:30:56.960 --> 00:31:00.060
And we have lots of different support
for different kinds of targets.

00:31:00.150 --> 00:31:03.250
We spend a lot of time creating something
which we call the native build system,

00:31:03.340 --> 00:31:05.600
native support for creating projects.

00:31:05.700 --> 00:31:07.680
Native being that we control things.

00:31:07.780 --> 00:31:10.780
We have lots of ability to do
really good dependency analysis

00:31:10.780 --> 00:31:12.980
and give you all sorts of benefits.

00:31:13.090 --> 00:31:16.320
We have support for the same
Jam targets that Project Builder had.

00:31:16.630 --> 00:31:20.100
And we also have external targets
support for things like Make and Ant,

00:31:20.140 --> 00:31:22.580
the ability to do something
outside of Xcode but still take

00:31:22.580 --> 00:31:24.890
advantage of the Xcode build system.

00:31:24.900 --> 00:31:27.430
And there are all kinds of different
aspects of the build system,

00:31:27.430 --> 00:31:30.590
where you have products and executables,
lots of different ways to

00:31:30.620 --> 00:31:33.420
customize your application,
customize your project to

00:31:33.420 --> 00:31:35.410
get the things that you want.

00:31:35.650 --> 00:31:38.800
A good deal of the build system is
customizing it to suit your needs,

00:31:38.800 --> 00:31:40.530
to do the things that you want.

00:31:40.610 --> 00:31:43.360
The ability to take and inspect
settings both on your project,

00:31:43.430 --> 00:31:47.790
on your targets, set compiler options,
set build flags, set encodings on files,

00:31:47.830 --> 00:31:50.220
get the things that you want
in the way that you want them.

00:31:50.560 --> 00:31:54.030
And we'll take a look at some of the
inspectors for this in a little bit.

00:31:54.730 --> 00:31:57.630
But there are lots of different
features to the build system that

00:31:57.630 --> 00:31:59.500
provide lots of great functionality.

00:31:59.770 --> 00:32:01.480
As I mentioned before,
the ability to provide you

00:32:01.580 --> 00:32:04.250
inline errors and warnings,
to show you in your source code

00:32:04.250 --> 00:32:06.480
where things are going wrong,
allow you to change them and

00:32:06.480 --> 00:32:09.870
keep them back up to speed,
get your application running again.

00:32:09.940 --> 00:32:12.430
Smart groups of errors and
warnings to keep track of those

00:32:12.430 --> 00:32:13.880
things as you make changes.

00:32:13.930 --> 00:32:16.840
But even a detailed build log for
those who like to live on the bleeding

00:32:16.960 --> 00:32:20.620
edge to see the absolute honest truth
of what's going on and filter through

00:32:20.620 --> 00:32:24.800
all the content to see exactly what's
happening with your application.

00:32:24.800 --> 00:32:28.520
The ability to manage source trees,
working between applications and saying,

00:32:28.520 --> 00:32:30.960
here's where all my sources are
and I want to manage this across

00:32:30.960 --> 00:32:32.980
a number of different people,
even though we have different

00:32:33.050 --> 00:32:34.670
structures on our machines.

00:32:34.720 --> 00:32:36.840
Shared build locations,
so I can build something once and

00:32:36.850 --> 00:32:40.540
everybody can take advantage of it,
or I can use it across multiple projects.

00:32:40.580 --> 00:32:43.950
And the ability to use SDKs,
the ability to say, I'm on this platform,

00:32:43.950 --> 00:32:45.870
but I want to build for a different one.

00:32:45.870 --> 00:32:48.030
Very, very powerful,
very compelling feature.

00:32:50.750 --> 00:32:52.760
But in the end,
it's all about performance.

00:32:52.790 --> 00:32:55.760
It's all about saying, you know,
this is the heart of the matter.

00:32:55.820 --> 00:32:58.290
If it takes too long, it's not useful.

00:32:58.410 --> 00:32:59.420
It's not helpful.

00:32:59.500 --> 00:33:02.080
And what we've tried to do is implement
a number of features to give you the

00:33:02.080 --> 00:33:06.250
green light to make sure that build
performance is not an issue for you.

00:33:06.580 --> 00:33:09.760
So the first one of these is the
support for pre-compiled headers.

00:33:09.900 --> 00:33:13.120
The fact is,
no matter how big our applications are,

00:33:13.120 --> 00:33:15.910
the amount of information we're
pulling in from other resources,

00:33:15.910 --> 00:33:19.050
from frameworks and libraries,
outweighs ours by perhaps an

00:33:19.060 --> 00:33:20.630
order of magnitude or more.

00:33:20.930 --> 00:33:23.790
Our applications are this small
when you compare it to all the stuff

00:33:23.790 --> 00:33:25.240
that's being compiled in there.

00:33:25.300 --> 00:33:27.190
The ability to pre-compile
those and to say,

00:33:27.200 --> 00:33:28.500
you know, I know I'm going to need them.

00:33:28.570 --> 00:33:30.780
Why wait till I want to
compile my app to get them?

00:33:30.890 --> 00:33:31.670
Pre-compile the header.

00:33:31.680 --> 00:33:32.510
Get it out of the way.

00:33:32.540 --> 00:33:34.070
Take it out of the way,
because that's not what

00:33:34.070 --> 00:33:35.000
we need to worry about.

00:33:35.070 --> 00:33:37.490
What you need to worry about
is the stuff in your project.

00:33:37.630 --> 00:33:40.750
So pre-compiled headers gets a lot
of that bottleneck out of the way

00:33:40.750 --> 00:33:42.590
and gets it done ahead of time.

00:33:43.000 --> 00:34:18.200
[Transcript missing]

00:34:19.240 --> 00:34:21.090
Something we also
introduced called Zero Link,

00:34:21.190 --> 00:34:23.570
the ability to just take the
link step out of the way,

00:34:23.680 --> 00:34:27.170
to dynamically load in the elements
that you need as you need them.

00:34:27.280 --> 00:34:29.020
When your application starts up,
you may not need everything,

00:34:29.020 --> 00:34:29.990
so why try and link it?

00:34:30.000 --> 00:34:32.720
Why spend that time overhead early?

00:34:32.910 --> 00:34:33.870
Let's just do it later.

00:34:34.010 --> 00:34:36.540
So we're going to reduce the
linking step down to a very,

00:34:36.540 --> 00:34:38.360
very small fraction.

00:34:38.750 --> 00:34:40.830
and then distributed builds,
the ability to say,

00:34:40.830 --> 00:34:41.920
I've got all these machines.

00:34:42.130 --> 00:34:44.590
We do take advantage of the fact
that if you have two processors,

00:34:44.710 --> 00:34:47.360
we'll do parallel compilations,
so you get twice as much.

00:34:47.450 --> 00:34:49.410
But what about all those other
processors that are sitting out there,

00:34:49.410 --> 00:34:51.350
all those other machines
that are potentially idle?

00:34:51.520 --> 00:34:53.020
We want you to take advantage of those.

00:34:53.110 --> 00:34:56.460
So distributed builds allow you to take
advantage of all sorts of machines.

00:34:56.500 --> 00:34:58.940
Heterogeneous, homogeneous environments,
whatever you have,

00:34:59.000 --> 00:35:00.200
we'll take advantage of those.

00:35:00.270 --> 00:35:02.360
Start sending the files
out across the wire,

00:35:02.480 --> 00:35:04.280
let them compile, and bring them back.

00:35:04.390 --> 00:35:07.580
So we do the pre-compilation for the
headers and the linking on your machine,

00:35:07.720 --> 00:35:08.700
but we only do those once.

00:35:08.820 --> 00:35:11.120
So you take care of those,
send everything out,

00:35:11.170 --> 00:35:13.480
and bring it all back.

00:35:13.580 --> 00:35:17.610
So I want to go through a quick demo
of some of the build system features.

00:35:22.440 --> 00:35:25.580
What I'm going to do is actually
change applications on you here.

00:35:25.750 --> 00:35:29.480
At the moment, we have native support
for the C-based languages,

00:35:29.510 --> 00:35:31.680
not for Java,
although we are working on that.

00:35:31.680 --> 00:35:35.380
So I'm going to go ahead and open
up an OpenGL app here called Boing.

00:35:35.420 --> 00:35:38.550
I'm sure this is an app you
guys have all seen before.

00:35:38.780 --> 00:35:41.170
Just has an OpenGL rendering
of a little bouncing ball that

00:35:41.170 --> 00:35:42.840
we'll see in a little bit.

00:35:42.990 --> 00:35:45.200
As I mentioned before,
we have elements like inspectors

00:35:45.230 --> 00:35:47.900
that can go ahead and look at
different attributes on a file.

00:35:47.900 --> 00:35:50.520
So I can just go ahead and select one
of the files here in the detail view,

00:35:50.520 --> 00:35:53.100
bring it up,
and look at different information.

00:35:53.100 --> 00:35:56.320
I can see that there's path information,
there's all sorts of file

00:35:56.370 --> 00:35:57.640
encoding information.

00:35:57.640 --> 00:35:59.940
There's actually an
additional compiler flags.

00:35:59.940 --> 00:36:02.760
I can set per-file compiler flags,
which make it very easy to

00:36:02.760 --> 00:36:04.420
customize on a per-file basis.

00:36:05.120 --> 00:36:07.520
But one of the things we've
included in Xcode as a result of

00:36:07.520 --> 00:36:10.600
lots and lots of feedback is the
ability to do multiple selection.

00:36:10.600 --> 00:36:13.140
For example, here's the directory
structure for my project.

00:36:13.200 --> 00:36:15.710
And here's something that perhaps
a lot of people like to do is say,

00:36:15.710 --> 00:36:17.470
you know,
I want to create this source folder,

00:36:17.520 --> 00:36:19.030
and I want to grab a
whole bunch of files,

00:36:19.030 --> 00:36:21.170
and I really want to put them
in here because that's really

00:36:21.200 --> 00:36:22.710
the way I work with my project.

00:36:22.720 --> 00:36:24.630
And the problem is,
you go back to your project,

00:36:24.630 --> 00:36:25.660
and now they're all red.

00:36:25.660 --> 00:36:27.340
Xcode says, I don't know what happened.

00:36:27.340 --> 00:36:28.420
They went somewhere.

00:36:28.440 --> 00:36:29.980
And normally,
you'd have to go through and

00:36:29.980 --> 00:36:31.400
inspect each one and change them.

00:36:31.400 --> 00:36:34.060
But now we have support for the
ability to select multiples,

00:36:34.060 --> 00:36:35.100
come up with a new one,
and then we can go ahead and do that.

00:36:35.140 --> 00:36:41.640
So let's go ahead and go
ahead and go ahead and select

00:36:41.690 --> 00:36:45.720
the source folder location.

00:36:45.720 --> 00:36:47.690
And you'll notice that
they all turn black again.

00:36:47.690 --> 00:36:49.640
The ability to modify
multiple selections very,

00:36:49.640 --> 00:36:50.760
very quickly and easily.

00:36:54.030 --> 00:36:55.870
Now, of course,
we all know that our source code

00:36:55.880 --> 00:36:58.840
revision control system would
really not appreciate us doing that.

00:36:58.850 --> 00:37:00.650
So I'm going to go ahead
and take that back out,

00:37:00.660 --> 00:37:03.990
and I'll play nice and put
them back the way they were.

00:37:04.080 --> 00:37:07.440
But this multiple selection
works both on the file level,

00:37:07.450 --> 00:37:09.750
and it also works on the target level.

00:37:10.060 --> 00:37:11.960
The ability to go ahead and
select multiple targets,

00:37:12.030 --> 00:37:16.000
for example, and set the same setting on
multiple targets at the same time.

00:37:16.020 --> 00:37:19.270
So all the sorts of settings you want,
you can set them now on a per-target

00:37:19.270 --> 00:37:22.000
basis -- or multiple-target basis,
rather, as well.

00:37:22.000 --> 00:37:24.000
Let's go ahead and look at
the inspector for the targets,

00:37:24.000 --> 00:37:27.000
because we've made some improvements
here that you guys also should see.

00:37:27.000 --> 00:37:30.000
I'm going to go ahead and go to the
Build Settings tab here for my target,

00:37:30.000 --> 00:37:32.610
and we'll see that here are all
the different build settings

00:37:32.660 --> 00:37:34.000
for my particular target.

00:37:34.000 --> 00:37:37.090
Now, you'll note that one thing we've
changed here is the ability to look

00:37:37.140 --> 00:37:38.990
at collections or groups of settings.

00:37:39.000 --> 00:37:40.570
By default,
we're looking at all of the settings,

00:37:40.600 --> 00:37:44.000
but there's this nice little pop-up
here where I can now go through and say,

00:37:44.000 --> 00:37:46.490
"Oh, I want to just look at the
versioning flags," or I want to

00:37:46.630 --> 00:37:50.000
look at all of the -- everything
that has to do with the compiler,

00:37:50.000 --> 00:37:52.000
or something that has to do with linking.

00:37:52.000 --> 00:37:54.530
The ability to filter down the
list to see just the things you

00:37:54.530 --> 00:37:56.000
want and the way you want them.

00:37:56.000 --> 00:38:00.000
You'll also note that there's a setting
at the top for customized settings,

00:38:00.100 --> 00:38:00.980
and these all appear in bold.

00:38:01.000 --> 00:38:03.880
These are settings that you've
customized or that are changed

00:38:04.230 --> 00:38:06.000
in your target from the defaults.

00:38:06.090 --> 00:38:08.000
So just a little bit of
piece of information here.

00:38:08.000 --> 00:38:10.250
When you see the bold settings --
if I go back to the All settings

00:38:10.250 --> 00:38:12.760
and you see that there are some
in bold -- you know that these are

00:38:12.760 --> 00:38:13.990
ones that have customized values.

00:38:14.000 --> 00:38:16.000
You also note that the ones
with little strikethrough,

00:38:16.000 --> 00:38:19.000
those are ones that have been
overridden by your build style,

00:38:19.050 --> 00:38:21.480
but there'll be more on
that in a later session.

00:38:21.940 --> 00:38:25.140
Some other advancements we've made
in setting information here is the

00:38:25.490 --> 00:38:27.670
ability to edit large settings.

00:38:27.840 --> 00:38:29.000
For example, a product name.

00:38:29.000 --> 00:38:31.180
You're probably not going to
have a really huge name for this.

00:38:31.210 --> 00:38:33.560
I could just go ahead and click on
this and change it right in here.

00:38:33.560 --> 00:38:37.170
But there may be settings that are
particularly large or need to be set.

00:38:37.230 --> 00:38:40.180
For example, header search paths.

00:38:40.210 --> 00:38:41.680
I may have lots of header search paths.

00:38:42.750 --> 00:38:44.450
Up until this point,
you've had to click in here and start

00:38:44.500 --> 00:38:45.750
typing and scrolling all the way over.

00:38:45.760 --> 00:38:48.430
It was kind of like setting the path
back in Windows 95 where you just had

00:38:48.430 --> 00:38:49.920
to keep moving over and over and over.

00:38:49.920 --> 00:38:51.790
We apologize for that.

00:38:52.320 --> 00:38:54.770
And now what we've done is given
you an edit settings button.

00:38:54.770 --> 00:38:56.860
So now what we're going to
do is bring up a table view,

00:38:56.860 --> 00:38:59.780
which you can go ahead and click in here
and start adding different settings.

00:39:00.460 --> 00:39:03.370
You can also do nice things like,
I don't know, I can grab a folder from

00:39:03.370 --> 00:39:04.580
my project and do that.

00:39:04.580 --> 00:39:08.790
I could also go into the finder here
and grab a folder and bring that up.

00:39:09.440 --> 00:39:11.400
To be able to take large settings.

00:39:11.670 --> 00:39:13.890
and manage them in an easy way.

00:39:15.300 --> 00:39:17.570
We also do this for just
plain string values.

00:39:17.720 --> 00:39:21.610
So I could go ahead and go back down
here to my product name and just go

00:39:21.710 --> 00:39:23.120
ahead and click the Edit Settings.

00:39:23.140 --> 00:39:25.080
And I could make this
as big as I want to,

00:39:25.120 --> 00:39:29.340
were my app to be named
something really large.

00:39:29.440 --> 00:39:31.450
So build settings.

00:39:31.620 --> 00:39:35.420
So quick and easy way to go ahead and
modify information in your project.

00:39:35.510 --> 00:39:38.040
Let's go ahead and let's just
actually go ahead and build this.

00:39:38.040 --> 00:39:40.050
So what I'm going to do is I'm
actually going to select the

00:39:40.050 --> 00:39:43.080
implementation files down here,
just so that they're visible,

00:39:43.080 --> 00:39:45.330
and I'm going to go ahead
and click the build hammer.

00:39:45.330 --> 00:39:47.050
So what this is going
to do is start building,

00:39:47.060 --> 00:39:49.310
and you'll see that as it's building,
the size of the code

00:39:49.310 --> 00:39:51.550
is going through here,
and you'll see that we

00:39:51.610 --> 00:39:54.690
have different sizes here,
and oh, look at that.

00:39:54.970 --> 00:39:55.750
Build failed.

00:39:55.760 --> 00:39:56.910
What a surprise.

00:39:56.910 --> 00:40:00.180
So now I need to figure
out something happened.

00:40:00.320 --> 00:40:03.010
Something is wrong with my build,
I need to figure out what's going on.

00:40:03.010 --> 00:40:04.850
There are a number of
different ways to do that.

00:40:04.950 --> 00:40:09.160
You see that we annotate the status bar
with the build information on both sides.

00:40:09.160 --> 00:40:12.420
You'll also note that now the errors
and warnings smart group is in red,

00:40:12.440 --> 00:40:14.980
and if I click on that,
I can see all the details about what

00:40:15.290 --> 00:40:17.020
those are and where the problems were.

00:40:17.020 --> 00:40:22.470
I could also go to the detailed build
log up under the build menu here and

00:40:22.550 --> 00:40:24.930
see all the detailed build results.

00:40:24.930 --> 00:40:27.770
So I'm going to make this window a
little bit bigger and scroll this down,

00:40:27.780 --> 00:40:30.460
and it's the same information
that you saw before.

00:40:31.100 --> 00:40:33.510
But what we're going to do is just
put in the detailed build window,

00:40:33.580 --> 00:40:35.960
and for those who really
want to see everything,

00:40:35.990 --> 00:40:39.500
we can scroll it up and see here's
exactly what happened through the build.

00:40:39.500 --> 00:40:41.800
And it's important to note that
these windows actually track.

00:40:41.870 --> 00:40:43.680
So we're going to go and
select an error up here.

00:40:43.760 --> 00:40:46.800
We actually highlight the appropriate
line down here that shows where

00:40:46.800 --> 00:40:48.200
that error was generated from.

00:40:48.380 --> 00:40:51.720
So you can get exactly down
to all of your problems.

00:40:51.720 --> 00:40:54.480
So let's just figure out
something was wrong with

00:40:54.480 --> 00:40:56.570
apparently the Boeing view class.

00:40:56.570 --> 00:40:58.780
I'm going to go ahead and bring
that up in the editor here,

00:40:58.780 --> 00:41:00.600
and you'll note that we
annotate a number of things.

00:41:00.600 --> 00:41:04.110
First, we annotate the scroller here,
which will give you access to

00:41:04.330 --> 00:41:06.000
where the things have gone wrong.

00:41:06.000 --> 00:41:08.270
We can see we've got a couple
of different spots here,

00:41:08.280 --> 00:41:11.600
and we also annotate the gutter
for the different elements.

00:41:11.600 --> 00:41:14.140
So I can see if I look at this first
one here and I go ahead and click on it,

00:41:14.140 --> 00:41:18.040
you'll note that the error comes up here,
and it says that new is undeclared.

00:41:18.040 --> 00:41:19.590
That's because that
really was meant to be no.

00:41:19.590 --> 00:41:22.370
So I can go ahead and fix that error.

00:41:22.390 --> 00:41:24.420
I can scroll down here
to the bottom and say,

00:41:24.520 --> 00:41:27.430
oh, well, here's just a warning on
something I needed to do before.

00:41:27.430 --> 00:41:28.430
I left that in there.

00:41:28.450 --> 00:41:30.100
I can just go ahead and take that out.

00:41:30.100 --> 00:41:34.100
Let me scroll back up to the top here
and see what these other errors were.

00:41:34.100 --> 00:41:36.540
Again, it's a simple one here.

00:41:36.540 --> 00:41:37.700
I just forgot a semicolon.

00:41:37.720 --> 00:41:38.990
Maybe that will take care of it.

00:41:39.070 --> 00:41:40.640
So I'll go ahead and fix
those and click build again.

00:41:40.640 --> 00:41:44.330
It's going to go ahead and build it,
and it's like, nope, still didn't do it.

00:41:44.360 --> 00:41:47.740
I still have this one problem where
there's this index default value.

00:41:47.740 --> 00:41:48.850
It doesn't know where it is.

00:41:48.850 --> 00:41:49.770
It's not declared anywhere.

00:41:49.780 --> 00:41:51.700
Well, that was actually my fault.

00:41:51.760 --> 00:41:55.250
I meant to actually define
that as a preprocessor macro.

00:41:55.480 --> 00:41:57.690
So I can just go back to my build
settings here and take advantage of

00:41:57.690 --> 00:41:59.600
this nice search field at the bottom.

00:41:59.600 --> 00:42:01.360
And start typing in preprocessor.

00:42:01.360 --> 00:42:05.150
And I can just go ahead and take this
value here and put it back over here,

00:42:05.250 --> 00:42:07.560
paste it in, and say that equals zero.

00:42:07.580 --> 00:42:11.220
Now I should be able to go
ahead and build my application.

00:42:11.220 --> 00:42:12.440
Go ahead and click compile.

00:42:12.460 --> 00:42:13.860
Build succeeded.

00:42:13.910 --> 00:42:17.190
Quick and easy way to find some of the
problems that are in your application,

00:42:17.190 --> 00:42:18.720
get on with just building it.

00:42:18.830 --> 00:42:21.030
We also have a number
of other build features.

00:42:21.140 --> 00:42:23.330
We have the ability to
compile a single file at once,

00:42:23.330 --> 00:42:24.630
to preprocess it.

00:42:24.700 --> 00:42:26.900
Where you actually want to see
what the assembly code looks

00:42:26.930 --> 00:42:29.090
like for your particular file,
you can actually go ahead and do that.

00:42:29.100 --> 00:42:31.440
ahead and do that and here's
the assembly for what this

00:42:31.440 --> 00:42:32.440
particular file would look like.

00:42:34.270 --> 00:42:37.110
So that's just a quick overview of
some of the build system features.

00:42:37.370 --> 00:42:40.450
There are other sessions on the
build system later on in the week,

00:42:40.450 --> 00:42:42.720
actually one tomorrow at
3:30 in this very room,

00:42:42.830 --> 00:42:48.590
the increasing productivity with Xcode 2,
which I would encourage you guys

00:42:48.590 --> 00:42:53.690
to go to if you want to learn
more about the build system.

00:42:53.710 --> 00:42:55.890
So let's learn more about Xcode,
and this time going into the debugger.

00:42:55.890 --> 00:42:55.890
So if we go back to the slides, please.

00:43:03.030 --> 00:43:04.180
Debugging is also important.

00:43:04.320 --> 00:43:06.400
Once you've built your application,
you need to figure out, all right,

00:43:06.510 --> 00:43:07.460
how do I deal with it now?

00:43:07.510 --> 00:43:08.790
How do I figure out all these problems?

00:43:08.950 --> 00:43:11.720
Just not just warnings and error,
but aberrant behavior.

00:43:11.770 --> 00:43:14.480
We include a completely
integrated debugging experience.

00:43:14.530 --> 00:43:16.920
It's a full-featured debugger
for the C dialects for Java,

00:43:16.920 --> 00:43:19.560
even for AppleScript,
with all the common operations

00:43:19.590 --> 00:43:21.700
you would expect-- the ability
to step through things,

00:43:21.700 --> 00:43:25.790
to pause through things, look at things,
introspect things.

00:43:25.810 --> 00:43:28.730
It's very, very feature-rich,
includes a lot of new features.

00:43:28.810 --> 00:43:30.800
We include things like
inline breakpoints,

00:43:30.900 --> 00:43:33.560
set them right in the gutter,
move them around, PC backup,

00:43:33.740 --> 00:43:35.540
and try things again.

00:43:35.540 --> 00:43:37.850
A complete graphical interface
to look at things like a

00:43:37.910 --> 00:43:39.480
thread view and a stack view.

00:43:39.540 --> 00:43:42.650
Look at all of your different
variables with custom data formatters,

00:43:42.680 --> 00:43:45.350
even based on your types,
to look at the information

00:43:45.400 --> 00:43:46.980
you want in the debugger.

00:43:47.020 --> 00:43:49.750
Also some new features--
the Globals browser,

00:43:49.760 --> 00:43:51.800
which maybe you saw
yesterday in Ted's keynote.

00:43:51.830 --> 00:43:54.520
You'll be able to look at global
variables for your application.

00:43:54.520 --> 00:43:58.110
A memory viewer to go ahead and look
at memory points for your application

00:43:58.120 --> 00:44:00.340
and see exactly what's going on.

00:44:00.400 --> 00:44:03.120
Even the ability to look at
disassembly and see the different

00:44:03.120 --> 00:44:05.010
things that are in your application.

00:44:05.220 --> 00:44:07.510
But there's lots of other
integrated debugging features.

00:44:07.760 --> 00:44:10.200
Things like data formatters,
as I said before.

00:44:10.230 --> 00:44:12.970
The ability to take a particular
piece of information in the

00:44:12.980 --> 00:44:15.160
variables view and customize it.

00:44:15.160 --> 00:44:17.190
You may know something about it and you
want to format it or summarize it in such

00:44:17.230 --> 00:44:19.100
a way that's easier for your work flow.

00:44:19.100 --> 00:44:21.240
We provide a lot of those by
default for the Carbon data types,

00:44:21.240 --> 00:44:25.290
but you can actually go ahead and do
those for your own data types as well.

00:44:25.300 --> 00:44:27.540
But much like with the build
system we also try to provide you

00:44:27.540 --> 00:44:31.300
features that get you up to speed,
get you running, get you very productive,

00:44:31.300 --> 00:44:34.510
as productive as possible
with a debugging experience.

00:44:34.520 --> 00:44:36.020
is fix and continue.

00:44:36.080 --> 00:44:38.670
How many of you have actually
used fix and continue?

00:44:39.030 --> 00:44:39.820
Thanks, Matt.

00:44:39.900 --> 00:44:40.900
Not enough.

00:44:40.900 --> 00:44:41.900
It's a very, very good feature.

00:44:41.910 --> 00:44:44.530
Fixing to Xcode allows you
to take a running application

00:44:44.530 --> 00:44:47.250
that you're debugging,
make changes to the source code,

00:44:47.250 --> 00:44:49.900
change the application on the fly,
and keep running.

00:44:49.900 --> 00:44:51.780
So you go ahead and patch
the running application.

00:44:51.780 --> 00:44:54.080
Things like logic errors,
errors of trial and error,

00:44:54.080 --> 00:44:56.700
where you need to try something
over and over and over again.

00:44:56.700 --> 00:44:59.910
If your application takes a long time
to compile or takes a while to start up,

00:44:59.970 --> 00:45:02.310
you don't want to have to go through
that just for a simple change of,

00:45:02.350 --> 00:45:05.420
"Oh, I forgot a semicolon there," or
"That was supposed to be two instead

00:45:05.420 --> 00:45:07.840
of one." The ability to go ahead
and fix your running application

00:45:07.840 --> 00:45:09.810
and get it back up to speed is very,
very useful.

00:45:09.820 --> 00:45:12.640
And I would encourage
you guys all to try it.

00:45:12.640 --> 00:45:14.180
Other things like remote debugging.

00:45:14.180 --> 00:45:16.820
We saw a demonstration yesterday
of a game developer debugging an

00:45:16.820 --> 00:45:20.120
application running on one machine
with a debugger running on the other.

00:45:20.200 --> 00:45:22.830
This is extremely useful for
both full-screen applications,

00:45:22.860 --> 00:45:26.160
but also applications that have
lots of intricate event handling,

00:45:26.160 --> 00:45:29.520
things like mouse clicks and
keys and highlights and stuff.

00:45:29.520 --> 00:45:30.670
The ability to track those.

00:45:30.680 --> 00:45:33.080
Let your application deal with
it in such a way that it's not

00:45:33.180 --> 00:45:35.870
affecting by the debugger popping
up or a breakpoint being set,

00:45:35.870 --> 00:45:38.740
but still being able to debug your
application like you would normally.

00:45:38.740 --> 00:45:41.740
It works exactly like it
would on your one machine.

00:45:41.740 --> 00:45:43.460
So the debugger experience
is exactly the same,

00:45:43.480 --> 00:45:47.500
but you take the leverage of the fact
that you have two separate machines.

00:45:47.500 --> 00:45:49.790
And something included now,
which is called GuardMalloc,

00:45:49.790 --> 00:45:52.050
the ability to actually use
the fact that we know when bad

00:45:52.050 --> 00:45:54.290
things happen to your memory,
and we're actually going

00:45:54.290 --> 00:45:55.700
to show those to you.

00:45:55.700 --> 00:45:57.260
When there are memory access errors,
we're actually going to

00:45:57.260 --> 00:45:58.930
throw an exception and say,
"You know what?

00:45:59.180 --> 00:45:59.970
This is a problem.

00:45:59.980 --> 00:46:01.980
You need to go and look at it."
So it's a great debugging feature.

00:46:01.980 --> 00:46:04.680
So I want to show you a quick
debugging demo on what some

00:46:04.780 --> 00:46:06.380
of these features look like.

00:46:10.070 --> 00:46:12.720
So we have the application that
I just got done building here.

00:46:12.830 --> 00:46:16.370
So this is the same Boeing application.

00:46:16.370 --> 00:46:20.540
I'm just going to go ahead and
launch it under the debugger.

00:46:20.540 --> 00:46:22.200
So I just said, go ahead and debug.

00:46:22.250 --> 00:46:23.940
I probably didn't need
to say build again,

00:46:23.940 --> 00:46:25.160
since it's already built.

00:46:25.350 --> 00:46:27.270
is going to go ahead in a second here.

00:46:27.270 --> 00:46:30.520
The debugger is going to start up,
and we'll see what it looks like.

00:46:30.630 --> 00:46:34.430
So right now, we are going through and
debugging our application.

00:46:34.660 --> 00:46:34.700
Now,

00:46:35.260 --> 00:46:37.700
I've scripted my application
demo here in a very,

00:46:37.700 --> 00:46:41.090
very specific way to talk
about what happens when we're

00:46:41.090 --> 00:46:42.640
dealing with beta software.

00:46:42.720 --> 00:46:44.040
All right?

00:46:44.090 --> 00:46:46.760
Now, we release beta software
just as much as you do.

00:46:46.760 --> 00:46:48.020
Things happen.

00:46:48.210 --> 00:46:51.640
Now, this is a really important point,
is that this panel right here

00:46:51.640 --> 00:46:54.960
is your gateway to salvation,
because it's your way of

00:46:54.960 --> 00:46:56.150
giving us information.

00:46:56.260 --> 00:47:00.130
The ability to go ahead and say Report,
to click on this and say, look,

00:47:00.330 --> 00:47:02.430
here's the crash information for Xcode.

00:47:02.680 --> 00:47:04.090
Here's what happened.

00:47:04.180 --> 00:47:07.170
You have lots of power at your
fingertips to fill out exactly what

00:47:07.170 --> 00:47:09.530
happened or what you were doing here,
and click Submit and

00:47:09.560 --> 00:47:10.630
give us that information.

00:47:10.870 --> 00:47:14.080
Even more to the point,
were you nice ADC developers and

00:47:14.150 --> 00:47:16.890
you'd want to actually take advantage
of the fact that we have this

00:47:16.960 --> 00:47:18.490
little website called Bug Reporter.

00:47:18.500 --> 00:47:21.680
You could actually go in and file a bug,
take that Stacktrace information,

00:47:21.840 --> 00:47:23.050
and put it in the bug.

00:47:23.140 --> 00:47:25.670
Because the fact is,
the benefits of our application,

00:47:25.830 --> 00:47:28.100
the feedback that we
get on our application,

00:47:28.190 --> 00:47:29.950
shows in what we release to you guys.

00:47:30.110 --> 00:47:33.130
The better feedback that we get,
the better the product is

00:47:33.130 --> 00:47:34.600
when it comes back out.

00:47:34.670 --> 00:47:36.510
So I'd encourage you--

00:47:38.680 --> 00:47:42.720
I can only speak to my application,
but I would implore you that were

00:47:42.720 --> 00:47:45.290
something-- not that it happens,
but were something to happen in

00:47:45.290 --> 00:47:47.660
Xcode where you'd get this panel,
I'd implore you to please

00:47:47.770 --> 00:47:48.800
submit that information.

00:47:48.960 --> 00:47:52.670
Please submit us a bug report so that
we can show you what's going on with it.

00:47:54.000 --> 00:47:56.360
So now that the little public
service announcement is done,

00:47:56.360 --> 00:48:01.700
let's go back to the demo and
go back to the application here.

00:48:02.400 --> 00:48:06.100
So now I'm just going to go ahead
and let's just clean the application.

00:48:06.190 --> 00:48:08.060
Again,
show you the nice build system at work.

00:48:08.160 --> 00:48:10.010
And we're going to go
ahead and build and debug.

00:48:10.140 --> 00:48:12.800
So again,
we'll watch the application compile here.

00:48:12.900 --> 00:48:15.100
And we'll watch it come back up,
this time in the debugger,

00:48:15.100 --> 00:48:17.210
much as we would expect.

00:48:17.500 --> 00:48:21.200
So now I'm just going to go ahead
and let's just clean the application.

00:48:21.200 --> 00:48:23.160
Again,
show you the nice build system at work.

00:48:23.160 --> 00:48:25.120
And we're going to go
ahead and build and debug.

00:48:25.120 --> 00:48:27.510
So again,
we'll watch the application compile here.

00:48:27.600 --> 00:49:56.100
[Transcript missing]

00:49:56.330 --> 00:49:59.850
So let's go ahead and look at some of
the other controls that are up here.

00:49:59.950 --> 00:50:04.040
We can go ahead and continue through--
we paused right here on our breakpoint.

00:50:04.040 --> 00:50:06.900
We can go ahead and step
over a particular element.

00:50:06.900 --> 00:50:09.300
Just go ahead and keep stepping
through my application.

00:50:09.300 --> 00:50:13.190
I can open up and look at
more elements in the debugger.

00:50:13.190 --> 00:50:15.390
But we can go ahead and do that.

00:50:15.530 --> 00:50:18.040
Or we can just go ahead and continue.

00:50:18.140 --> 00:50:20.710
It's going to hit my breakpoint again,
so I'm going to go ahead and unset

00:50:20.710 --> 00:50:20.710
that and continue along the merry way.

00:50:20.900 --> 00:50:22.680
Let's show you some of the
elements that we talked about,

00:50:22.730 --> 00:50:23.860
like fix and continue.

00:50:24.020 --> 00:50:26.940
For example, I'm looking at this,
and red is just not the

00:50:26.940 --> 00:50:27.790
color I'm looking for.

00:50:27.800 --> 00:50:29.320
I really want something else.

00:50:29.420 --> 00:50:32.280
So I've actually set some nice little
bookmarks in this file to go ahead

00:50:32.280 --> 00:50:33.940
and jump right to a particular point.

00:50:33.940 --> 00:50:37.440
And we see that right here is
where the colors for that panel

00:50:37.440 --> 00:50:38.980
are that this panel is defined.

00:50:39.140 --> 00:50:39.840
Right now it's red.

00:50:39.840 --> 00:50:41.080
It's an RGB value.

00:50:41.080 --> 00:50:45.120
And I can just go ahead and change
those values from red to blue.

00:50:45.120 --> 00:50:46.780
I'm going to go ahead and save that file.

00:50:46.780 --> 00:50:48.720
And now I'm going to go
up here and click Fix.

00:50:48.800 --> 00:50:51.240
So while my application is running,
I'm going to hit the Fix button.

00:50:51.240 --> 00:50:52.790
It's going to go ahead and compile it.

00:50:52.890 --> 00:50:55.230
It's going to go ahead,
and now my ball is blue.

00:50:55.240 --> 00:50:58.050
Application's still running,
but I'm changing values that

00:50:58.060 --> 00:50:59.700
my application is using.

00:50:59.700 --> 00:51:02.160
I could do other things,
like changing simple things,

00:51:02.160 --> 00:51:03.680
like set the background color.

00:51:03.740 --> 00:51:05.860
I think that that background
color is way too dark.

00:51:05.860 --> 00:51:08.730
Let's just go ahead and
change the value here.

00:51:08.960 --> 00:51:10.890
is a very good example of how
to use the Xcode application.

00:51:10.910 --> 00:51:12.900
So, I'm going to go ahead
and save that again.

00:51:13.170 --> 00:51:14.900
Again, while the application is running,
go ahead and click "Fix."

00:51:14.900 --> 00:51:16.840
And now we're changing the value.

00:51:16.910 --> 00:51:18.900
Now, these are just simple
values that we're changing.

00:51:18.900 --> 00:51:20.900
It doesn't look that complex.

00:51:20.900 --> 00:51:22.900
But the ability to try
things out like this,

00:51:22.900 --> 00:51:23.550
to do trial and error things
while the application is running,

00:51:23.550 --> 00:51:23.900
is very, very useful.

00:51:24.060 --> 00:51:25.900
Let's do something a little more complex.

00:51:25.900 --> 00:51:27.900
For example,
there's something here called the

00:51:27.900 --> 00:51:31.430
"light factor." When I hit the "L" key,
it's actually going to start applying a

00:51:31.440 --> 00:51:32.900
light factor to the side of this cube.

00:51:32.900 --> 00:51:34.870
And you'll see that the cube
gets a little bit darker.

00:51:34.910 --> 00:51:36.900
Now, the problem is,
I have no way of undoing this.

00:51:36.900 --> 00:51:39.990
The way they implemented it
was it just starts the shading,

00:51:39.990 --> 00:51:41.890
and there's no way to change that value.

00:51:41.900 --> 00:51:44.990
You can actually see the
code is actually right here,

00:51:45.050 --> 00:51:47.890
where as it's drawing, it says,
"If I'm supposed to do this,

00:51:47.890 --> 00:51:50.390
increase the light factor
over time until we get to 1,

00:51:50.420 --> 00:51:52.850
and that's it." There's
no way to undo this.

00:51:52.900 --> 00:51:55.850
So, let me actually show you modifying
this code while it's running,

00:51:56.140 --> 00:51:57.900
something more than just
little logic values.

00:51:57.900 --> 00:52:00.210
Well, to do this,
the problem is I want to be able

00:52:00.210 --> 00:52:03.900
to cycle back and forth between the
light value and the non-light value.

00:52:03.900 --> 00:52:05.900
So, I'm going to go ahead and add
this other Boolean in here.

00:52:05.900 --> 00:52:10.930
Called "DoLightIncrease." And I'm
going to go ahead and say that,

00:52:11.080 --> 00:52:12.880
well, in this particular case,
if our light factor is

00:52:12.920 --> 00:52:15.880
-- if we're increasing,
then I certainly want to make

00:52:15.910 --> 00:52:18.810
the light factor increase
just the way it was before.

00:52:18.920 --> 00:52:22.900
So, we'll say the light factor
still increases by .005.

00:52:22.900 --> 00:52:25.280
But if it's not,
what I want to do is I want

00:52:25.280 --> 00:52:26.900
to decrement the value.

00:52:26.900 --> 00:52:30.120
So, we're going to use this Boolean
to track whether the light

00:52:30.120 --> 00:52:31.900
is increasing or decreasing.

00:52:32.050 --> 00:52:34.900
So, in this particular case,
I need to say, well,

00:52:34.900 --> 00:52:37.720
if we are increasing,
and the light factor is over one,

00:52:37.920 --> 00:52:38.890
just stop at one.

00:52:38.900 --> 00:52:40.900
Don't go over and above that.

00:52:40.940 --> 00:52:43.470
But now I need to add a little
else clause in here that says,

00:52:43.470 --> 00:52:46.960
well, if I'm not increasing,
if I'm actually going down,

00:52:46.960 --> 00:52:48.860
and I don't want it to go below zero,
because I don't want it

00:52:48.870 --> 00:52:51.890
to fade out completely,
then just set the value to zero,

00:52:51.900 --> 00:52:53.860
and we'll be done.

00:52:54.000 --> 00:52:55.900
So,
now I've just added some code to go ahead

00:52:55.900 --> 00:52:59.900
and allow us the ability to cycle between
whether this has a light factor or not.

00:52:59.900 --> 00:53:02.560
One last thing I actually need
to change was that there's this

00:53:02.560 --> 00:53:05.190
keystroke at the bottom here,
or we actually go ahead

00:53:05.520 --> 00:53:06.890
and click the key.

00:53:06.940 --> 00:53:10.900
It's right here where you see if I hit L,
it says do light equals yes.

00:53:10.980 --> 00:53:14.700
And in this case, I want to say, well,
I only want you to do -- we use some code

00:53:14.720 --> 00:53:16.780
completion to get that value for this.

00:53:16.900 --> 00:53:20.760
I only want you to increase if the
light factor is already at zero.

00:53:21.230 --> 00:53:22.900
Otherwise, I just want you to decrease.

00:53:22.900 --> 00:53:25.880
So,
we're going to go ahead and set that up,

00:53:25.970 --> 00:53:28.900
save that, and now I'm going to
go ahead and click fix.

00:53:28.900 --> 00:53:30.870
So, while this is running,
we're going to go ahead and fix that,

00:53:30.900 --> 00:53:32.900
and now I should be
able to come back here,

00:53:32.930 --> 00:53:34.890
hit L, and turn the shading off.

00:53:34.900 --> 00:53:37.890
So, the ability to add, you know,
different instance variables,

00:53:37.960 --> 00:53:41.070
change the logic to your application
while it's running makes it very,

00:53:41.070 --> 00:53:42.900
very useful to debug.

00:53:43.690 --> 00:53:44.840
There's some simple things we could do.

00:53:44.840 --> 00:53:47.260
We could go ahead and,
if we want this all to end very,

00:53:47.260 --> 00:53:49.400
very quickly,
I can just check the animation,

00:53:49.480 --> 00:53:52.310
change the velocity by which this
is running to something much,

00:53:52.350 --> 00:53:56.200
much quicker,
and make the ball stop for all of us.

00:53:56.300 --> 00:53:59.160
So let's look at some of the
other elements to our application

00:53:59.160 --> 00:54:00.050
while it's still running.

00:54:00.220 --> 00:54:02.450
I'm showing you a couple other things.

00:54:02.580 --> 00:54:05.450
Features that we didn't talk about
yesterday but are worth showing is

00:54:05.460 --> 00:54:07.660
something like the memory browser.

00:54:07.750 --> 00:54:11.490
So what if I want to look at different
pieces of memory in my application?

00:54:11.500 --> 00:54:14.370
I want to look at something, you know,
something interesting.

00:54:14.510 --> 00:54:19.310
We allow you to go ahead and let's just
go ahead and let's just pause this and...

00:54:19.470 --> 00:54:20.430
Here's a memory viewer.

00:54:20.440 --> 00:54:22.160
This is not my
particularly favorite view,

00:54:22.160 --> 00:54:24.340
but I know a lot of people are
looking for this kind of information

00:54:24.340 --> 00:54:26.510
and being able to actually step
through your memory and look at

00:54:26.510 --> 00:54:29.390
different pieces of information,
to look at all sorts of things.

00:54:29.620 --> 00:54:32.760
If this is for you,
we're happy to provide it.

00:54:32.760 --> 00:54:34.950
There are other things,
like even a console view.

00:54:35.030 --> 00:54:37.740
If you love the console view
and you want to live there,

00:54:37.890 --> 00:54:40.160
we provide a quick and easy
access way to get to it.

00:54:40.160 --> 00:54:42.110
So we try to provide you
the best of all worlds.

00:54:42.120 --> 00:54:44.360
Functionality gets you up to
speed with what you're looking

00:54:44.510 --> 00:54:46.580
at from debugging features,
from simple things like

00:54:46.580 --> 00:54:48.340
looking at variables,
to fixing your application

00:54:48.410 --> 00:54:50.140
while it's running,
or looking at memory.

00:54:50.140 --> 00:54:52.970
The ability to take your application,
figure out what's wrong,

00:54:52.970 --> 00:54:54.790
and get back to what's important.

00:54:54.900 --> 00:54:57.300
So these are just some of
the quick debugging features.

00:54:57.300 --> 00:55:00.360
We have a complete demonstration
of debugging on Thursday.

00:55:00.360 --> 00:55:02.080
So we go back to the slides.

00:55:02.170 --> 00:55:05.210
There's a complete session on this
on Thursday morning at 9 o'clock,

00:55:05.300 --> 00:55:07.140
again in this room, debugging in Xcode.

00:55:07.140 --> 00:55:10.590
But I'd encourage you guys all
to go to for more information.

00:55:13.480 --> 00:55:15.940
Another thing that's important once
we're building and debugging our

00:55:15.940 --> 00:55:17.580
application is working with other people.

00:55:17.600 --> 00:55:19.090
Source control management.

00:55:19.100 --> 00:55:21.900
For those of you who are using Xcode,
you may not have realized that

00:55:21.900 --> 00:55:24.790
source control management is in there
because it's actually integrated.

00:55:24.800 --> 00:55:28.710
It's immersed in the IDE in
a large number of places.

00:55:28.720 --> 00:55:32.530
You'll see it in visualization columns,
in the outline view and the detail view.

00:55:32.540 --> 00:55:35.770
You'll see it in a smart group of showing
you all the things that have changed.

00:55:35.780 --> 00:55:38.860
We have a complete SCM window for showing
you all the things that have changed in

00:55:38.860 --> 00:55:40.650
your product and looking at the SCM log.

00:55:41.130 --> 00:55:43.050
And we also have inspectors to
allow you to look at different

00:55:43.050 --> 00:55:46.440
revisions and track things and compare
things based on a particular file.

00:55:48.050 --> 00:55:50.390
Now, we support all the common
commands from the IDE,

00:55:50.460 --> 00:55:56.040
the ability to look at annotations,
to update, to discard changes,

00:55:56.150 --> 00:55:58.530
to look at revisions, annotations, diffs.

00:55:58.810 --> 00:56:02.280
These are all available in the IDE,
both from menus and context menus,

00:56:02.280 --> 00:56:04.210
right at your fingertips.

00:56:05.270 --> 00:56:07.200
As was announced yesterday,
we are happy to support now

00:56:07.200 --> 00:56:12.040
Subversion as one of our ICM systems,
fully integrated into Xcode.

00:56:12.040 --> 00:56:14.600
So what I'd like to do is
show you that right now.

00:56:16.590 --> 00:56:20.920
So let's just take the same project that
I was working on for a quick second.

00:56:20.920 --> 00:56:22.760
I'm going to go ahead and stop
the debugger because I don't

00:56:22.760 --> 00:56:24.690
really need that anymore.

00:56:25.180 --> 00:56:27.470
And you guys are probably
going to remember to do this,

00:56:27.480 --> 00:56:29.080
so I'll close that window.

00:56:29.080 --> 00:56:30.260
So now I'm in my application.

00:56:30.260 --> 00:56:31.490
And you've seen me make changes.

00:56:31.560 --> 00:56:33.900
You saw me make some changes
for fix and continue.

00:56:33.990 --> 00:56:36.700
Question is, how do I know that I've
made those changes?

00:56:36.950 --> 00:56:39.520
Well, one way to do it is to
customize the view here.

00:56:39.540 --> 00:56:43.310
I could go ahead and customize the panel
here by control clicking on the header.

00:56:43.390 --> 00:56:44.480
And I can select SCM.

00:56:44.480 --> 00:56:47.260
And we'll see that it tells me
that the project has changed.

00:56:47.360 --> 00:56:49.870
And as I expand things,
we also see that there are

00:56:49.870 --> 00:56:51.520
other files that have changed.

00:56:51.600 --> 00:56:54.510
I could actually go ahead and
add the SCM column over here,

00:56:54.610 --> 00:56:56.360
if I want to look at
it in the detail view,

00:56:56.440 --> 00:56:59.220
so I can see it in either
or both of these views.

00:56:59.350 --> 00:57:01.840
But if you want to look at all
the SCM information in one place,

00:57:01.900 --> 00:57:03.470
there are two ways to do it.

00:57:03.480 --> 00:57:05.480
If you want to look at
it in the project view,

00:57:05.500 --> 00:57:07.540
you can go ahead and
select the SCM Smart Group.

00:57:07.590 --> 00:57:10.980
And now we're going to filter on all the
files that have some kind of SCM status,

00:57:10.980 --> 00:57:14.200
whether it's modified, changed, conflict,
whatever it is,

00:57:14.200 --> 00:57:17.580
this is going to be the one-stop
place you want to go out and look at.

00:57:17.630 --> 00:57:20.490
We can also, though,
bring that up in a separate window.

00:57:20.590 --> 00:57:25.320
So I can bring up under the SCM menu
the SCM window and show it to you here.

00:57:25.630 --> 00:57:27.580
So here are all the
files that have changed.

00:57:27.590 --> 00:57:29.960
And I see that I have
the files that I changed,

00:57:29.960 --> 00:57:32.480
and now I have my user
file and the project file.

00:57:32.500 --> 00:57:36.720
Let's go ahead and look at something
interesting about what these files are.

00:57:36.790 --> 00:57:39.480
So let's go ahead and select a file here.

00:57:39.480 --> 00:57:42.740
And I'm going to go ahead and bring up
the inspector for this particular file.

00:57:42.780 --> 00:57:44.850
And you see that there's an SCM tab.

00:57:44.900 --> 00:57:48.760
And when I click on this,
you'll note that here is the SCM history.

00:57:48.830 --> 00:57:51.420
So I have the revision history,
I have my name, the date,

00:57:51.450 --> 00:57:53.010
and I have a message.

00:57:53.120 --> 00:57:54.130
So I can go ahead and look
at-- I can go ahead and look at

00:57:54.140 --> 00:57:55.540
different pieces of information.

00:57:55.600 --> 00:57:57.680
So let's take the version we have,
and let's compare it to

00:57:57.680 --> 00:58:00.480
something from 9:00 this morning.

00:58:00.500 --> 00:58:02.000
And I can click on Diff.

00:58:02.090 --> 00:58:04.400
So what it's going to do is
take the version I have on disk,

00:58:04.410 --> 00:58:07.040
go and grab the selected
version from a repository,

00:58:07.060 --> 00:58:08.060
and here's a diff.

00:58:08.060 --> 00:58:09.770
So I can go ahead and
put this into a bug.

00:58:09.780 --> 00:58:12.080
I can send this to someone
as changes I've made,

00:58:12.080 --> 00:58:15.490
very, very quick and easy way
to compare revisions.

00:58:16.300 --> 00:59:24.500
[Transcript missing]

00:59:28.080 --> 00:59:31.440
if I were to go back in
here and grab my element,

00:59:31.440 --> 00:59:33.460
we can actually go now and
look at the annotations.

00:59:33.530 --> 00:59:35.620
So let me grab that
particular source file,

00:59:35.710 --> 00:59:37.550
say grab the latest for that.

00:59:37.720 --> 00:59:40.020
And it's going to take that
and pull it up in an editor.

00:59:40.020 --> 00:59:43.200
And here is the annotation
response for this particular file.

00:59:43.200 --> 00:59:44.780
There haven't been that many changes.

00:59:44.780 --> 00:59:45.900
I've only made a few changes.

00:59:45.900 --> 00:59:48.200
But as we scroll through,
you can see what revision

00:59:48.200 --> 00:59:50.440
was changed and by whom.

00:59:50.450 --> 00:59:52.660
Now you might be asking, well,
these revision numbers look

00:59:52.760 --> 00:59:53.740
really kind of strange.

00:59:53.740 --> 00:59:56.240
I don't know that I've seen these before.

00:59:56.240 --> 00:59:59.220
One thing that we actually pride
ourselves on is the fact that all of

00:59:59.280 --> 01:00:01.260
our SCM functionality is seamless.

01:00:01.310 --> 01:00:02.750
It also feels the same.

01:00:02.850 --> 01:00:06.880
So you may not have been noticing,
but this is actually using subversion.

01:00:06.970 --> 01:00:08.720
So if we pull up our
little status window here,

01:00:08.720 --> 01:00:11.420
and I can just go ahead and
zoom in for you right there,

01:00:11.500 --> 01:00:14.850
you'll note that user
local subversion bin SVN.

01:00:15.110 --> 01:00:16.640
This is all been using subversion.

01:00:16.750 --> 01:00:19.920
So same thing as CVS acts
like CVS commands in Xcode,

01:00:20.060 --> 01:00:21.990
but it's using the power of subversion.

01:00:22.110 --> 01:00:24.710
So the fact that you can't tell
the difference is actually a

01:00:24.710 --> 01:00:26.220
win for us and makes it feel
like we've done the right thing.

01:00:26.220 --> 01:00:29.560
the right job of not making things all
different based on different SCM systems.

01:00:32.910 --> 01:00:35.310
So we can actually just go
ahead and once we're done,

01:00:35.310 --> 01:00:38.060
let's just actually show the
very simple thing of go ahead

01:00:38.070 --> 01:00:41.700
and selecting a couple files,
go ahead and committing to changes

01:00:41.710 --> 01:00:43.640
and say this was in the demo.

01:00:43.700 --> 01:00:45.190
Go ahead and commit those.

01:00:45.330 --> 01:00:47.200
We'll go ahead and commit
those to the repository.

01:00:47.240 --> 01:00:50.340
You'll note that they go ahead and leave
the view and they've been committed.

01:00:50.340 --> 01:00:52.920
Simple SCM actions,
simple things that your daily

01:00:52.920 --> 01:00:56.340
workflow probably requires doesn't
require you to leave the IDE.

01:00:56.350 --> 01:01:00.120
So that's just a quick visual
of source code management.

01:01:00.120 --> 01:01:02.780
There's more on this in
the presentation tomorrow.

01:01:02.800 --> 01:01:05.560
tomorrow if you guys want
to learn more information.

01:01:05.900 --> 01:02:03.100
[Transcript missing]

01:02:06.090 --> 01:02:08.690
So what I'm going to go ahead and do is
I'm just going to quickly rebuild my app

01:02:08.770 --> 01:02:10.680
because I made changes with ZeroLink,
and I want to make sure

01:02:10.680 --> 01:02:12.680
that we've actually built
those into the application.

01:02:12.680 --> 01:02:14.990
But under the Debug menu,
we'll see that there is

01:02:14.990 --> 01:02:18.000
Launch Using Performance Tool,
and there's a couple here.

01:02:18.000 --> 01:02:19.790
Let's just go ahead and
pick Object ALEC first.

01:02:19.800 --> 01:02:23.150
What it's going to go ahead and
do is it's going to go ahead

01:02:23.150 --> 01:02:26.690
and launch Object ALEC for me,
and it's going to configure

01:02:26.690 --> 01:02:29.620
Object ALEC to go ahead
and launch my application.

01:02:29.620 --> 01:02:31.340
So you see that Object ALEC comes up.

01:02:31.440 --> 01:02:33.520
It already knows about
where my application lives.

01:02:33.820 --> 01:02:35.980
I can go ahead and hit the
little play button here and

01:02:35.990 --> 01:02:36.950
tell it what I want it to do.

01:02:36.960 --> 01:02:42.200
And now it's going to go ahead and launch
my application and start looking at it,

01:02:42.340 --> 01:02:45.090
start looking at all the things
that are being allocated in this.

01:02:45.100 --> 01:02:48.800
Right now we have live updating going on,
and I can start scaling this back.

01:02:48.820 --> 01:02:50.810
So you can start to see
what the allocations are,

01:02:50.810 --> 01:02:52.840
how they're being projected
through your application,

01:02:52.840 --> 01:02:54.980
and you can start to figure out
where the leaks are happening,

01:02:54.980 --> 01:02:57.480
where you may be creating more
things than you really need to,

01:02:57.480 --> 01:02:59.270
where things can be
trimmed down a little bit.

01:02:59.320 --> 01:03:00.560
Quick and easy way.

01:03:00.560 --> 01:03:03.180
We've already built the app,
launched it in Object ALEC,

01:03:03.480 --> 01:03:06.130
but it makes it really easy to test and
see how your application is working.

01:03:06.140 --> 01:03:09.650
But say you want to do something a
little bit more complex than this.

01:03:09.660 --> 01:03:11.960
Say you want to figure out not just
where things are being allocated,

01:03:11.960 --> 01:03:13.620
but where you're spending the most time.

01:03:13.640 --> 01:03:15.970
To do this,
we're going to go ahead and use Shark.

01:03:15.980 --> 01:03:17.890
The same way,
we're going to go ahead and launch Shark.

01:03:17.940 --> 01:03:20.870
It's going to be pre-configured
to know where our application is.

01:03:20.920 --> 01:03:22.720
Go ahead and say OK,
and it's going to start

01:03:22.720 --> 01:03:23.680
up our application.

01:03:23.700 --> 01:03:26.420
Shark is now sampling up here.

01:03:26.420 --> 01:03:27.930
We can go ahead and click Stop.

01:03:28.080 --> 01:03:30.120
And it's going to go ahead and
take all the samples that it

01:03:30.150 --> 01:03:33.000
just found from our application
and bring them up in this view.

01:03:33.480 --> 01:03:35.590
How many of you guys have used Shark?

01:03:36.040 --> 01:03:37.700
I would implore you guys
all to take a look at it.

01:03:37.700 --> 01:03:40.020
It may seem a little
complex from the beginning,

01:03:40.040 --> 01:03:41.770
but it's a very,
very simple application to use,

01:03:41.800 --> 01:03:45.160
and it provides a lot of information
about what your app is doing,

01:03:45.310 --> 01:03:49.420
about the ability to go and look at even
just the things that you have source for,

01:03:49.490 --> 01:03:52.490
and to go ahead and drill down into,
I'm spending 34% of my time in

01:03:52.490 --> 01:03:54.250
this draw rect particular function.

01:03:54.250 --> 01:03:56.910
You can see that based on where
the shading is of where you're

01:03:56.910 --> 01:03:58.500
spending the most amount of time.

01:03:58.500 --> 01:04:01.170
It doesn't take that much effort
to go ahead and look at this,

01:04:01.170 --> 01:04:03.920
but it provides you a vast amount
of information about where you

01:04:04.150 --> 01:04:05.850
can improve your application.

01:04:07.090 --> 01:04:10.760
So just a quick overview of launching
a couple of the performance tools.

01:04:10.760 --> 01:04:13.940
If we go back to the slides, again,
there are complete sessions on this.

01:04:13.970 --> 01:04:17.540
There is one on Friday in the
afternoon on actually using

01:04:17.540 --> 01:04:20.180
Shark to work with your application.

01:04:23.250 --> 01:04:27.690
This is what we do all day, is Xcoding,
is providing you a set of tools

01:04:28.210 --> 01:04:31.260
to work for all kinds of different
development projects to help you guys

01:04:31.260 --> 01:04:33.200
bring things to the Mac OS X platform.

01:04:33.200 --> 01:04:35.340
And as we talked before,
we're providing you two

01:04:35.460 --> 01:04:36.460
ways to do that today.

01:04:36.470 --> 01:04:39.200
To be very clear,
Xcode 1.5 is on Panther.

01:04:39.200 --> 01:04:41.580
It's a beta release that we'd
love to get your feedback on.

01:04:41.600 --> 01:04:43.960
Xcode 2.0 is on Tiger.

01:04:43.960 --> 01:04:46.010
It's a preview,
and you can see the number

01:04:46.010 --> 01:04:47.620
of features that are in each.

01:04:48.040 --> 01:04:51.000
The difference being the workspace
layouts and the design tools on

01:04:51.000 --> 01:04:53.760
Tiger are just some of the differences,
some of the major differences

01:04:53.830 --> 01:04:54.520
between those two.

01:04:54.520 --> 01:04:56.580
But we'd love to get your
feedback on both versions,

01:04:56.580 --> 01:04:59.060
on the different Xcode versions
that you guys want to try.

01:05:01.260 --> 01:05:06.350
is going to be the contact for
you guys for other things that you

01:05:06.350 --> 01:05:10.800
might want to know about Xcode.

01:05:10.800 --> 01:05:13.740
And we'll bring him back
up on stage right now to go

01:05:13.740 --> 01:05:15.000
through a little bit of a Q&A.