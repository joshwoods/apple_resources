WEBVTT

00:00:12.330 --> 00:00:15.440
So it's the end of the week.

00:00:15.440 --> 00:00:22.340
Your brains are probably filled with lots
of ideas about how you might use some of

00:00:22.340 --> 00:00:26.400
the new APIs that have been discussed.

00:00:26.870 --> 00:00:29.700
A lot of the new technology
that's been demoed.

00:00:29.740 --> 00:00:34.860
And what I'd like to do today
is talk about the tool that

00:00:34.860 --> 00:00:36.940
hopefully you'll be using,
one of the tools anyway,

00:00:36.940 --> 00:00:41.800
that hopefully you'll be using to
implement some of your new ideas.

00:00:42.070 --> 00:00:44.050
Interface Builder.

00:00:44.300 --> 00:00:48.020
Since this is announced as
sort of an advanced session,

00:00:48.020 --> 00:00:52.140
I'm assuming you're comfortable
with Interface Builder.

00:00:52.500 --> 00:00:57.200
What I want to do though is focus
on part of Interface Builder

00:00:57.200 --> 00:01:03.910
that I think up until recently
has been fairly underutilized.

00:01:04.370 --> 00:01:08.590
Until recently,
because if you went to the Quartz

00:01:08.590 --> 00:01:12.640
Composer session today or the
QT Kit session the other day,

00:01:12.640 --> 00:01:16.300
you saw some great Interface Builder
palettes that have been created.

00:01:16.300 --> 00:01:22.300
Also, if you look in
/developer/extras/palettes on your DVD,

00:01:22.300 --> 00:01:26.550
you'll see a number of new palettes
that have been created by teams

00:01:27.000 --> 00:01:29.300
outside of the Interface Builder team.

00:01:29.540 --> 00:01:32.740
What that means is basically,
well to some extent I didn't

00:01:32.740 --> 00:01:36.390
know that these other teams
were working on these palettes,

00:01:36.390 --> 00:01:40.770
but more importantly it means that
these other teams did this without the

00:01:40.840 --> 00:01:42.300
help of the Interface Builder team.

00:01:42.300 --> 00:01:44.510
In particular,
they'll be using basically the

00:01:44.510 --> 00:01:47.080
same process that we're going
to be talking about today.

00:01:47.300 --> 00:01:51.930
Again, if you have an opportunity to see
or look at the slides from those

00:01:52.220 --> 00:01:56.300
previous two sessions or say one
of the Cocoa binding sessions,

00:01:56.330 --> 00:01:59.180
you'll see some interesting new
palettes that have been created.

00:01:59.300 --> 00:02:02.410
and as well as look on your disk.

00:02:05.670 --> 00:02:10.500
So, Jon was going to introduce me,
but I'm Chuck Fleming,

00:02:10.500 --> 00:02:14.200
new manager of the IB team.

00:02:16.450 --> 00:02:21.230
And again,
what we want to talk about today is

00:02:21.390 --> 00:02:26.170
Interface Builder and how to extend it,
make it more powerful,

00:02:26.170 --> 00:02:30.500
and extend it by creating
your own palettes.

00:02:31.220 --> 00:02:34.770
So you should, I guess,
first of all ask why would you want

00:02:34.860 --> 00:02:36.940
to write an Interface Builder palette?

00:02:36.970 --> 00:02:39.100
What does that do for you?

00:02:39.110 --> 00:02:42.780
And first of all,
it gives you a very convenient

00:02:42.780 --> 00:02:47.220
way to get your objects in
the hands of your developers.

00:02:47.400 --> 00:03:33.300
[Transcript missing]

00:03:33.740 --> 00:03:35.530
And the third reason,
if you've gone to any of

00:03:35.530 --> 00:03:38.080
the Cocoa Bindings sessions,
you know Cocoa Bindings

00:03:38.080 --> 00:03:43.390
was introduced last year.

00:03:43.830 --> 00:03:49.440
is very exciting technology that's
been displayed this year as well,

00:03:49.650 --> 00:03:53.360
particular in the Quartz
Composer session this morning.

00:03:53.840 --> 00:03:58.800
Terrific use of bindings was shown in the
setting of an Interface Builder palette.

00:03:58.800 --> 00:04:03.270
So, third reason why you might want
to write a palette is to take full

00:04:03.390 --> 00:04:06.800
advantage of Cocoa bindings for your
custom views within Interface Builder.

00:04:06.800 --> 00:04:10.560
The only way really to expose
your bindings at this point

00:04:10.560 --> 00:04:12.550
is to implement a palette.

00:04:14.310 --> 00:04:17.440
So, very quickly,
topics we're hoping to cover.

00:04:17.770 --> 00:04:21.080
Number one,
building and debugging palettes,

00:04:21.150 --> 00:04:24.200
sort of getting things going quickly.

00:04:24.210 --> 00:04:27.090
Step two, some additional palette tasks.

00:04:27.250 --> 00:04:29.100
We're going to talk about
how to make things a little

00:04:29.160 --> 00:04:32.560
bit more fully functional,
add some features that you would expect

00:04:32.570 --> 00:04:36.060
to have your inspectors fully working,
maybe undo support, tool tips,

00:04:36.070 --> 00:04:37.180
things like that.

00:04:37.200 --> 00:04:41.820
The third and fourth topics,
a little bit miscellaneous

00:04:41.820 --> 00:04:45.190
collection of topics here,
some tips,

00:04:45.190 --> 00:04:51.290
not entirely related to palettes,
but they touch on topics that you

00:04:51.290 --> 00:04:55.200
should know as you're writing palettes
or playing with nibs in general.

00:04:55.450 --> 00:04:58.430
And then very quickly,
I'll just give some

00:04:58.490 --> 00:05:00.720
performance suggestions.

00:05:01.200 --> 00:05:02.940
Okay, so how do you make a palette?

00:05:03.160 --> 00:05:07.860
You use the two tools that,
two of the tools Apple provides, Xcode.

00:05:07.990 --> 00:05:12.680
We are going to provide you
with an enhanced template,

00:05:12.860 --> 00:05:16.100
project template for,
specifically for making palettes.

00:05:16.100 --> 00:05:19.100
It's significantly improved over
the one that's currently shipping.

00:05:19.100 --> 00:05:23.240
That's in the disk image that
will be available for download

00:05:23.240 --> 00:05:25.100
at the end of this session.

00:05:25.100 --> 00:05:28.440
And then Interface Builder itself,
because you're going to assemble

00:05:28.600 --> 00:05:32.230
the palette graphically and also
assemble the inspector graphically.

00:05:32.230 --> 00:05:34.100
And that's what Interface
Builder is all about,

00:05:34.520 --> 00:05:36.920
assembling UIs graphically.

00:05:37.200 --> 00:05:40.100
So, the first thing, we're going to take
the very simplest case.

00:05:40.120 --> 00:05:43.970
How many of you guys have
built a palette before?

00:05:44.680 --> 00:05:47.260
Okay,
it's smattering but not overwhelming,

00:05:47.260 --> 00:05:50.370
which is good, because even though
this is advanced topics,

00:05:50.370 --> 00:05:53.980
I'm going to start with the real
basic stuff and it's very easy to do.

00:05:54.130 --> 00:06:00.790
So hopefully I won't bore the
advanced users here too much.

00:06:01.000 --> 00:07:00.200
[Transcript missing]

00:07:00.590 --> 00:07:07.090
The template lives in Home, Library,
Application Support, Apple.

00:07:08.110 --> 00:07:11.480
Developer Tools, Project Templates,
Standard Apple Plugins.

00:07:11.500 --> 00:07:14.590
And here we have our
IB Palette WWDC 2004 demo.

00:07:14.610 --> 00:07:19.850
So that's a long path,
but it's also the place where the

00:07:19.900 --> 00:07:21.790
standard Xcode templates live.

00:07:21.800 --> 00:07:24.640
So if you're familiar with that,
it's the same place except

00:07:24.640 --> 00:07:26.460
starting in your home directory.

00:07:26.880 --> 00:07:31.430
So I'd like to go ahead and introduce
you guys to the WWDC 2004 template for

00:07:31.490 --> 00:07:33.160
building Interface Builder palettes.

00:07:33.210 --> 00:07:35.720
So I'm going to go ahead and launch
Xcode and create a new project.

00:07:35.920 --> 00:07:38.590
Now, since we have that template
living in that folder,

00:07:38.590 --> 00:07:40.870
we'll be able to see it here
in the standard Apple plugins.

00:07:41.090 --> 00:07:44.310
So I'm going to select the IB palette,
WWDC 2004,

00:07:44.360 --> 00:07:47.590
and create a new project named Widget.

00:07:49.600 --> 00:07:54.070
So, our new project here on the screen
is going to include everything we

00:07:54.070 --> 00:07:56.580
need to do to get started building
an Interface Builder palette.

00:07:56.640 --> 00:07:59.690
The most important thing to notice
about the project is that it's

00:07:59.690 --> 00:08:01.020
been divided into two targets.

00:08:01.080 --> 00:08:03.040
We have a widget target
and a framework target.

00:08:03.110 --> 00:08:05.070
The widget target is going to hold
our Interface Builder palette,

00:08:05.070 --> 00:08:07.850
which is going to be everything we
need to configure our object that we're

00:08:07.940 --> 00:08:11.090
exposing through interface graphically,
while the widget framework is

00:08:11.090 --> 00:08:14.610
everything that an application needs
to consume the widget at runtime.

00:08:14.750 --> 00:08:17.720
So let's go ahead and take a look
first at the widget framework.

00:08:18.640 --> 00:08:20.710
I'm going to go ahead and expose
the target membership here

00:08:20.710 --> 00:08:23.970
so we can see exactly which
files belong to which groups.

00:08:26.590 --> 00:08:28.730
So in our framework folder is
all the files that by default

00:08:28.740 --> 00:08:30.520
belong to the widget framework.

00:08:30.540 --> 00:08:32.960
And here we have a view object.

00:08:37.030 --> 00:08:39.910
Subclasses from NSView.

00:08:39.950 --> 00:08:43.850
So we're going to use this to
provide a new view to users.

00:08:43.880 --> 00:08:50.530
And also, in our palette folder,
we have two interesting classes of note.

00:08:51.830 --> 00:08:55.340
We have an inspector that we're
going to use to configure the view

00:08:55.350 --> 00:08:59.380
graphically and a palette that's going
to hold the view so that users can

00:08:59.390 --> 00:09:01.930
drag and drop it into their projects.

00:09:03.270 --> 00:09:07.200
So with this, I'd like to give it back to
Chuck to continue the presentation.

00:09:07.200 --> 00:09:09.970
Okay, can we get the slides again?

00:09:10.310 --> 00:09:13.200
Okay, so very quickly,
what was generated for us?

00:09:13.200 --> 00:09:14.200
Three classes.

00:09:14.210 --> 00:09:16.200
The Widget class,
which is the view that's going

00:09:16.200 --> 00:09:17.200
to appear on your palette.

00:09:17.370 --> 00:09:19.370
The Inspector,
which is going to be the files

00:09:19.370 --> 00:09:21.200
owner for the Inspector nib file.

00:09:21.200 --> 00:09:24.200
And the Palette,
which is sort of a controller object,

00:09:24.200 --> 00:09:28.190
it's also the files owner for the
Palette nib that got created for us.

00:09:28.200 --> 00:09:31.200
We'll look at those
in detail in a second.

00:09:31.200 --> 00:09:33.720
So again, Widget,
that's the view object that's

00:09:33.720 --> 00:09:37.200
going to go on the Palette,
and by default it's a subclass of NSView.

00:09:37.200 --> 00:09:40.520
When we switch over to looking at
non-view based Palette objects,

00:09:40.620 --> 00:09:43.290
you're going to have to change
that yourself to make it

00:09:43.290 --> 00:09:44.990
whatever class you want it to be.

00:09:45.200 --> 00:09:47.620
In Widget.m, again,
that's the view that you're

00:09:47.780 --> 00:09:49.200
going to put on your Palette.

00:09:49.200 --> 00:09:55.150
It has, the template creates a skeleton
implementation of three methods for you

00:09:55.240 --> 00:09:58.200
that you do need to fully implement.

00:09:58.200 --> 00:10:01.180
Anit with Frame, Anit with Coder,
and Encode with Coder.

00:10:01.200 --> 00:10:03.570
Anit with Frame,
you need because that gets

00:10:03.780 --> 00:10:07.200
called when your view first
appears on the Palette in IB.

00:10:07.200 --> 00:10:14.190
And that gets loaded lazily,
so it doesn't happen automatically.

00:10:14.200 --> 00:10:16.510
It will happen, say, for example,
the first time you click on the

00:10:16.570 --> 00:10:20.200
tab that represents your Palette
in the Palette's window in IB.

00:10:20.200 --> 00:10:24.190
Anit with Frame will get called,
so any initialization you'll do there.

00:10:24.220 --> 00:10:24.550
The Anit with Coder and Encode
with Coder are needed because

00:10:24.550 --> 00:10:25.200
they're called when your view
first appears on the Palette in IB.

00:10:25.200 --> 00:10:26.200
So any initialization you'll do there.

00:10:26.200 --> 00:10:26.550
The Anit with Coder and Encode
with Coder are needed because

00:10:26.550 --> 00:10:27.200
they're called when your view
first appears on the Palette in IB.

00:10:27.200 --> 00:10:28.200
So any initialization you'll do there.

00:10:28.200 --> 00:10:31.560
needed because, for example,
when you drag your widget off the pallet,

00:10:31.610 --> 00:10:35.800
nib, into your design window,
we're going to archive that object

00:10:35.800 --> 00:10:38.950
and put it on the paste board,
so encode with coder

00:10:38.950 --> 00:10:41.990
will get called there,
and then we drop it in the design window,

00:10:42.040 --> 00:10:46.480
it'll get unarchived and so a
nit with coder will get called.

00:10:46.480 --> 00:10:49.130
And finally, for example,
when you save your nib file

00:10:49.130 --> 00:10:52.730
with the new object in it,
that object will get freeze-dried

00:10:52.730 --> 00:10:56.540
again and unarchived and so
encode with coder will get called.

00:10:56.540 --> 00:10:59.410
So you need to implement
those three methods.

00:10:59.430 --> 00:11:02.240
And again, since this is an advanced
-- more advanced session,

00:11:02.240 --> 00:11:06.150
I'm assuming you guys know about
coding and some of the standard

00:11:06.200 --> 00:11:08.820
AppKit and foundation techniques.

00:11:10.190 --> 00:11:11.820
What else was created?

00:11:12.010 --> 00:11:12.820
The widget palette.

00:11:12.910 --> 00:11:14.480
That's a subclass of IB palette.

00:11:14.500 --> 00:11:19.490
And basically the most important,
the take-home point on this one

00:11:19.520 --> 00:11:24.660
is it should be the files owner
of the widget palette dot nib.

00:11:26.550 --> 00:11:30.500
In there again, skeleton implementations
of a couple of methods.

00:11:31.080 --> 00:11:33.260
Finish Instantiate.

00:11:33.500 --> 00:11:39.690
This guy is primarily used when
you have the non-view case,

00:11:39.690 --> 00:11:41.670
when you have an object that
you're going to put on the palette,

00:11:41.880 --> 00:11:44.820
which isn't a subclass of NSView,
but you need to associate a

00:11:44.820 --> 00:11:46.740
visual proxy for that object.

00:11:47.360 --> 00:11:48.950
So that you can
graphically manipulate it,

00:11:48.950 --> 00:11:50.100
even though it's not a view.

00:11:50.100 --> 00:11:53.620
Normally you do that association
in Finish Instantiate,

00:11:53.860 --> 00:11:57.810
and we'll show you the teeny bit of
code you need to make that happen.

00:11:57.860 --> 00:12:01.730
And then also the Inspector class name,
by default a reasonable

00:12:01.730 --> 00:12:03.260
choice is given there.

00:12:03.430 --> 00:12:06.880
If that isn't what you need,
then you can certainly modify that.

00:12:06.980 --> 00:12:10.610
The Inspector class is created for you.

00:12:10.720 --> 00:12:12.950
That's a subclass of IB Inspector.

00:12:12.950 --> 00:12:16.580
It's the attributes
inspector for your widget.

00:12:16.580 --> 00:12:21.790
And... And again, it should be the files
owner of the inspector nib.

00:12:22.560 --> 00:12:24.700
Okay, again,
here's the stub implementations

00:12:24.700 --> 00:12:26.000
that are created for you.

00:12:26.000 --> 00:12:28.000
Anit, OK and Revert.

00:12:28.000 --> 00:12:32.260
Anit is probably where you
want to load the bundle that

00:12:32.260 --> 00:12:35.000
contains your inspector nib file.

00:12:35.000 --> 00:12:41.000
OK and Revert mirror each other.

00:12:41.000 --> 00:12:47.700
Revert is going to be called by
IB and give you the opportunity to

00:12:47.870 --> 00:12:52.690
pull information from the inspected
object and insert it into the UI,

00:12:52.690 --> 00:12:53.960
your inspector.

00:12:54.000 --> 00:12:56.000
And OK does the opposite.

00:12:56.000 --> 00:13:00.460
When you trigger the OK action,
you'll be responsible for pulling

00:13:00.570 --> 00:13:03.640
information out of the UI and
pushing it into the object

00:13:03.640 --> 00:13:05.000
that you're being inspected.

00:13:05.060 --> 00:13:08.110
So these guys are trying
to keep things in sync,

00:13:08.120 --> 00:13:12.000
and so in the back of your heads you
should be thinking Cocoa bindings.

00:13:12.900 --> 00:13:14.020
So this is the old style.

00:13:14.220 --> 00:13:15.800
It works fine.

00:13:15.910 --> 00:13:18.150
Think in terms of Cocoa bindings
as you go forward,

00:13:18.220 --> 00:13:21.800
because this is a synchronization issue,
basically.

00:13:21.800 --> 00:13:23.800
Let's see, what else?

00:13:23.800 --> 00:13:24.800
A couple of nibs.

00:13:25.010 --> 00:13:27.800
Jon's going to show us
those in just a second.

00:13:27.800 --> 00:13:30.820
Basically,
the palette is where you assemble

00:13:30.820 --> 00:13:33.040
what's going to appear in I.V.

00:13:33.040 --> 00:13:34.730
in its palette window.

00:13:34.850 --> 00:13:37.190
Files owner,
you're going to have to change that,

00:13:37.190 --> 00:13:39.800
because we couldn't do that
for you in the template.

00:13:40.220 --> 00:13:44.690
and the Inspector Nib itself,
that's where you're going to assemble

00:13:44.690 --> 00:13:49.490
the widgets that will get extracted
and then put in the Inspector as

00:13:49.490 --> 00:13:51.900
Interface Builder is running.

00:13:52.020 --> 00:13:55.860
And again, the Files Owner,
I'll mention this several times,

00:13:55.920 --> 00:13:58.650
Files Owner needs to
be set appropriately.

00:13:58.830 --> 00:14:00.730
Alright, so Jon,
I think you were going to just give

00:14:00.740 --> 00:14:02.560
us a quick look at those nib files.

00:14:02.620 --> 00:14:05.670
Okay, so let's go ahead and try
to make this sample project

00:14:05.930 --> 00:14:07.400
runnable with Interface Builder.

00:14:07.460 --> 00:14:08.960
And the first thing we're going
to do is we're going to fix those

00:14:08.960 --> 00:14:10.440
files owners like Chuck mentioned.

00:14:10.540 --> 00:14:13.160
So I'm going to open up two of the
files that I'm going to show you now,

00:14:13.240 --> 00:14:16.160
which are the widget palette
nib in Interface Builder,

00:14:16.200 --> 00:14:18.490
and next we'll do the widget inspector.

00:14:18.570 --> 00:14:20.480
So in the widget palette,
you'll see we have the

00:14:20.480 --> 00:14:21.700
files owner in one window.

00:14:21.750 --> 00:14:26.200
It's very important that the
files owner has its custom class

00:14:26.290 --> 00:14:28.680
set to be a widget palette.

00:14:29.620 --> 00:14:31.850
Also,
the files owner needs to be connected

00:14:32.090 --> 00:14:34.600
to this palette view right here.

00:14:34.600 --> 00:14:35.640
And we can see it's connected.

00:14:35.710 --> 00:14:37.840
This palette view is what's going
to be loaded into the Interface

00:14:37.840 --> 00:14:41.790
Builder palette section over here,
and we'll be modifying that later.

00:14:42.080 --> 00:14:45.940
Let's also open up the
Widget Inspector and make

00:14:45.960 --> 00:14:47.800
sure that its files owner

00:14:48.190 --> 00:14:52.360
is set to be an instance
of Widget Inspector.

00:14:52.360 --> 00:14:54.320
Also,
we need to make sure that the files owner

00:14:54.320 --> 00:15:00.940
is bound to the Widget Inspectors window.

00:15:00.980 --> 00:15:04.390
So now we have our nib set up,
and we'll be ready to move on shortly.

00:15:06.920 --> 00:15:09.010
Back to the slides.

00:15:09.010 --> 00:15:11.800
Okay,
so that's sort of the minimal setup.

00:15:11.800 --> 00:15:15.800
And now we just wanted to add a tiny
bit of code so you can see that,

00:15:15.800 --> 00:15:17.800
well, we have a functioning
palette at this point.

00:15:17.800 --> 00:15:21.800
So Jon's going to do a real
quick modification to the code,

00:15:21.800 --> 00:15:25.610
build it, load the palette,
and see that it really

00:15:25.880 --> 00:15:27.800
is sort of functional.

00:15:28.520 --> 00:15:30.790
So back to the demo.

00:15:33.190 --> 00:15:37.100
Okay, so we have our palette here,
and on our palette we'd

00:15:37.100 --> 00:15:38.740
like to place a widget view.

00:15:38.740 --> 00:15:41.860
So what we're going to do to do
this is put in an NSCustomView,

00:15:41.930 --> 00:15:47.260
and we're going to change the custom
views custom class to be a widget.

00:15:47.280 --> 00:15:49.540
Now, at this point we have everything
that's needed to get a widget

00:15:49.540 --> 00:15:51.630
loaded into Interface Builder,
but unfortunately our

00:15:51.630 --> 00:15:54.240
widget doesn't paint itself,
so we wouldn't be able to see it.

00:15:54.240 --> 00:15:56.670
So we're going to modify
the widget skeleton that was

00:15:56.670 --> 00:15:59.000
generated for us by the template,
and we're going to

00:15:59.000 --> 00:16:00.290
include a drawRect method.

00:16:11.090 --> 00:16:13.800
So in the drawRect method,
we just want to make it visible for now,

00:16:13.890 --> 00:16:20.030
so I'm going to go ahead and choose
the blue color and go ahead and

00:16:20.030 --> 00:16:25.010
fill our clip rectangle with blue.

00:16:29.960 --> 00:16:37.090
Now from here we can build a project.

00:16:37.090 --> 00:16:40.550
And we want to go ahead and make sure it
gets installed in the correct location.

00:16:40.660 --> 00:16:49.860
So I'm going to go to our home folder,
move to Libraries, Frameworks,

00:16:55.950 --> 00:16:57.070
Framework.

00:16:57.070 --> 00:16:58.700
Going to Framework.

00:16:58.780 --> 00:17:03.390
Frameworks.

00:17:04.340 --> 00:17:05.270
And here's our widget framework.

00:17:05.370 --> 00:17:07.240
And then also we go to Palettes,
we'll see that we have

00:17:07.240 --> 00:17:08.200
our widget palette.

00:17:08.280 --> 00:17:11.060
So let's go ahead and go back to
Interface Builder and let's go ahead

00:17:11.060 --> 00:17:12.630
and load up our widget palette.

00:17:12.630 --> 00:17:16.800
So in Interface Builder's preferences,
its last tab is the Palette tab.

00:17:16.830 --> 00:17:19.300
We can choose to include
our palette here.

00:17:19.300 --> 00:17:20.350
Here's our widget palette.

00:17:20.530 --> 00:17:22.880
I'm going to select it and it's going
to load up in Interface Builder.

00:17:23.050 --> 00:17:25.800
At this point, we can create a new

00:17:26.290 --> 00:17:28.730
and Nick Nib,
and our widget is fully functional

00:17:28.740 --> 00:17:31.580
and ready to be drag and
dropped into new applications.

00:17:31.580 --> 00:17:33.990
So that's all we have to do
to get a view onto a palette.

00:17:36.090 --> 00:17:41.240
and also the inspector,
it looks like you do Command-1?

00:17:42.120 --> 00:17:45.150
So we can see in the inspector that
Interface Builder is aware that this

00:17:45.160 --> 00:17:47.590
inspector is inspecting a widget object,
and if we were to have

00:17:47.620 --> 00:17:51.210
edited our inspector nib,
the properties would appear there.

00:17:56.110 --> 00:18:04.970
Okay, so I want to kind of move
on to the non-view case,

00:18:05.090 --> 00:18:07.610
which is really not much
different from the view case,

00:18:07.610 --> 00:18:09.050
just a slight modification.

00:18:09.130 --> 00:18:14.290
But before leaving the view example,
I wanted to point out that on

00:18:14.290 --> 00:18:17.860
the shipping Panther and I'm
not sure if it was earlier,

00:18:17.940 --> 00:18:22.150
but certainly Panther and Tiger,
if you look at on your hard disk in

00:18:22.150 --> 00:18:29.210
/developer/examples/interfacebuilder,
you'll find a nice fully featured sample

00:18:29.340 --> 00:18:34.760
project called Progress View Palette
that illustrates in some more

00:18:34.890 --> 00:18:40.060
detail the process of getting
a view-based object on a palette.

00:18:43.030 --> 00:18:49.440
Okay, so again, heading toward the
non-view-based object case.

00:18:49.440 --> 00:18:52.980
Before I get to there,
what I want to do is just mention

00:18:52.980 --> 00:18:56.820
something that's probably obvious,
but

00:18:56.900 --> 00:19:01.290
When you assemble an application and
you're bringing things off the palette,

00:19:01.360 --> 00:19:04.400
say your palette objects into
the application and building it,

00:19:04.580 --> 00:19:06.800
designing it,
and then you save and build.

00:19:06.800 --> 00:19:10.380
At runtime, of course,
your application needs to have access

00:19:10.380 --> 00:19:12.790
to the code for those palette objects.

00:19:12.790 --> 00:19:16.800
So clearly one way to do that would
be you've got the source code,

00:19:16.800 --> 00:19:19.800
the .m and .h for your custom views.

00:19:19.800 --> 00:19:23.610
You could distribute those,
but that would get pretty tedious.

00:19:24.350 --> 00:19:29.800
Probably a better approach is to make
sure that the classes for objects on your

00:19:29.800 --> 00:19:34.800
palette and associated objects that may
be needed are wrapped up in a library,

00:19:34.800 --> 00:19:35.780
or sorry, a framework.

00:19:35.800 --> 00:19:40.640
And so one of the things our new palette
does is it makes that job easy for you.

00:19:40.820 --> 00:19:45.780
It's certainly customizable,
but it will create the framework for you

00:19:45.790 --> 00:19:49.800
and install it in convenient location,
as well as the same for the palette.

00:19:49.800 --> 00:19:50.800
As Jon showed.

00:19:50.800 --> 00:19:54.440
So what we do with the framework
is it will end up installed

00:19:54.440 --> 00:19:58.400
in Tilda Library frameworks,
and the palette gets installed

00:19:58.410 --> 00:20:00.470
in Tilda Library palettes.

00:20:00.900 --> 00:20:03.810
Okay,
so back to getting an object on a palette

00:20:03.810 --> 00:20:09.900
where that object may not be a view-based
object or a subclass of NSView.

00:20:10.050 --> 00:20:15.770
So it requires a small change to the
nibs and some small code modifications.

00:20:15.900 --> 00:20:17.720
So the template's going
to make that easy.

00:20:17.720 --> 00:20:21.290
Jon's going to show us again
in detail some of these things.

00:20:21.340 --> 00:20:24.360
But what the palette project does for us,
the new project,

00:20:24.420 --> 00:20:27.640
is it sets up three different targets,
one for the framework,

00:20:27.660 --> 00:20:30.580
one for the palette,
and an aggregate target.

00:20:30.580 --> 00:20:35.700
It sets up several new groups to
organize your code in a reasonable way.

00:20:35.700 --> 00:20:40.240
Establishes build dependencies for you,
exposes the headers that you might need.

00:20:40.370 --> 00:20:46.450
It creates some files to support undo,
implements the-- or gives you a palette

00:20:46.520 --> 00:20:51.160
table in which you can store some
other information like tool tips,

00:20:51.210 --> 00:20:52.910
things like that.

00:20:53.400 --> 00:21:57.800
[Transcript missing]

00:21:57.980 --> 00:21:59.470
requires the framework to build.

00:21:59.610 --> 00:22:04.290
This way, the random number generator
only lives in one library,

00:22:04.300 --> 00:22:07.580
and Interface Builder is going to
need both the palette and the actual

00:22:07.580 --> 00:22:10.040
random number generator in order
to include those in your project,

00:22:10.320 --> 00:22:13.130
whereas application developers
will only need your framework to

00:22:13.130 --> 00:22:15.300
use your random number generator.

00:22:15.770 --> 00:22:20.100
So you want to show the command?

00:22:20.290 --> 00:22:22.190
So we show that...

00:22:22.540 --> 00:22:27.510
We can see those dependencies here
by looking at one of our targets.

00:22:27.890 --> 00:22:30.030
and the Inspector.

00:22:30.030 --> 00:22:32.900
And we can see that the random
number palette requires the

00:22:32.900 --> 00:22:34.900
random number framework.

00:22:35.600 --> 00:22:40.160
I also showed the dependencies on
which files belong to which target,

00:22:40.160 --> 00:22:40.600
if you would.

00:22:40.640 --> 00:22:41.430
Okay, sure.

00:22:41.670 --> 00:22:45.680
So in the framework is all the,
like I said, all the files that belong

00:22:45.820 --> 00:22:50.280
to the framework which
applications are going to need.

00:22:50.280 --> 00:22:51.860
We can see these two
files belong to that.

00:22:51.980 --> 00:22:53.320
And if we look at the
Interface Builder palette,

00:22:53.320 --> 00:22:55.750
we'll see that all the rest of the files
belong to the Interface Builder palette

00:22:55.750 --> 00:22:58.610
because Interface Builder will need this
code and these nibs in order to edit

00:22:58.610 --> 00:23:00.840
the object graphically in its runtime.

00:23:00.840 --> 00:23:06.380
And also, if you could disclose
the undo support as well.

00:23:07.130 --> 00:23:09.960
So we also provide-- Sorry, go ahead.

00:23:10.050 --> 00:23:12.700
So when an object is being
edited in Interface Builder,

00:23:12.740 --> 00:23:15.300
we're going to take snapshots of
that object when you tell us to,

00:23:15.300 --> 00:23:18.040
when we know that your inspector
is about to edit the object.

00:23:18.060 --> 00:23:22.590
And these IB class description files
expose the properties of the object that

00:23:22.590 --> 00:23:24.500
you want to have snapshotted at runtime.

00:23:24.540 --> 00:23:26.700
So for example,
for a random number generator,

00:23:26.700 --> 00:23:28.550
we're going to take a
snapshot of the min value,

00:23:28.620 --> 00:23:30.340
the max value,
and the frequency attributes,

00:23:30.420 --> 00:23:32.880
which are the instance variables
of the random number generator.

00:23:32.880 --> 00:23:35.570
And so when the user presses undo,
we'll be able to swap back the

00:23:35.570 --> 00:23:39.800
old values and swap in as the user
modifies things and presses undo.

00:23:39.830 --> 00:23:43.790
So these classes are key to implementing
undo support in Interface Builder.

00:23:47.960 --> 00:23:53.360
Back to the slides, please.

00:23:53.410 --> 00:23:57.760
Okay, so as we mentioned earlier,
you've got a non-view based object

00:23:57.860 --> 00:24:00.130
like a random number generator.

00:24:00.140 --> 00:24:00.980
You want it on the palette.

00:24:00.980 --> 00:24:04.880
You need to graphically manipulate it,
so you need to assign a proxy view to it.

00:24:04.950 --> 00:24:06.150
Very simple process.

00:24:06.310 --> 00:24:09.040
You're going to instantiate the object,
and then you're going to

00:24:09.040 --> 00:24:10.560
associate a view with that object.

00:24:10.560 --> 00:24:15.930
So Jon's going to quickly show
us where we do that in the code.

00:24:16.310 --> 00:24:19.440
So it's interesting to think of how we
can put a non-view-based object into

00:24:19.440 --> 00:24:22.960
an Interface Builder or a palette,
since a palette contains view objects.

00:24:22.980 --> 00:24:25.340
So we go ahead and look at
our random number palette,

00:24:25.340 --> 00:24:26.800
which I'm opening Interface Builder now.

00:24:26.800 --> 00:24:29.250
We see that we have this R here
representing a random number generator.

00:24:29.310 --> 00:24:31.920
This is what we want the user to
see in the Interface Builder palette

00:24:31.920 --> 00:24:34.760
when they're using our palette
that we're generating for them.

00:24:34.780 --> 00:24:38.360
However, if we inspect this,
we'll see this in NSImageView,

00:24:38.360 --> 00:24:39.980
not a random number generator.

00:24:40.020 --> 00:24:43.050
So what's going on behind
the scenes is in our palette

00:24:43.050 --> 00:24:47.460
class's FinishExtantiate method,
we're telling our base class

00:24:47.490 --> 00:24:50.300
to associate a random number
object with that image view.

00:24:50.310 --> 00:24:52.690
So our base class,
which is the IB palette,

00:24:52.690 --> 00:24:55.200
is going to know that when the
user drags one of these images,

00:24:55.200 --> 00:24:57.880
that when he deposits the
image onto his object browser,

00:24:57.960 --> 00:25:00.400
he really means to deposit a
random number generator and not the

00:25:00.400 --> 00:25:02.340
NSImageView that he initially dragged.

00:25:02.390 --> 00:25:06.880
So that's how we're able to put
non-view-based objects into palettes and

00:25:07.230 --> 00:25:10.310
have the IB runtime manage that for us.

00:25:13.010 --> 00:25:21.080
Okay, so before going any farther,
there is a very nice example, again,

00:25:21.080 --> 00:25:23.570
that shipped with Panther,
available on Tiger,

00:25:23.570 --> 00:25:26.170
that you might want to take
a look at that shows you,

00:25:26.170 --> 00:25:28.980
in addition to the tips and
tricks we'll show you today,

00:25:28.980 --> 00:25:32.060
some additional features that
we won't have time to get into.

00:25:32.060 --> 00:25:38.400
For example, supporting drag and
drop onto your objects.

00:25:38.830 --> 00:25:40.930
That, in fact,
gives you a nice example where

00:25:40.930 --> 00:25:44.780
you might need something done
before the Instantiate object,

00:25:44.780 --> 00:25:47.410
which is where we just did
that mapping between the view

00:25:47.410 --> 00:25:50.280
object and the non-view object,
or the view proxy and

00:25:50.390 --> 00:25:51.700
the non-view object.

00:25:51.700 --> 00:25:54.780
Sometimes you need to do stuff
before finish Instantiate,

00:25:54.780 --> 00:25:57.680
and one of the things is
for drag-and-drop support.

00:25:57.680 --> 00:26:00.580
So you'll implement your init
method and do that there.

00:26:00.700 --> 00:26:03.980
A place to look for some
other very good tips is

00:26:04.000 --> 00:26:10.180
/developer/examples/interface-builder
and look at the Busy Palette example.

00:26:11.330 --> 00:26:17.590
Okay, so at this point we have the bare
minimal functionality and we want to

00:26:17.590 --> 00:26:23.200
go on then and show what's involved in
making your inspector fully functional.

00:26:23.200 --> 00:26:25.170
I'm sure you have a pretty good
idea of what we need to do.

00:26:25.210 --> 00:26:29.000
Supporting undo and redo,
which hopefully Jon's given us an

00:26:29.000 --> 00:26:31.200
indication that that's pretty trivial.

00:26:31.200 --> 00:26:35.190
And then what about working
with Cocoa bindings?

00:26:35.800 --> 00:26:39.310
Okay, so we've already seen putting
an object onto a palette twice.

00:26:39.450 --> 00:26:41.800
Now let's go ahead and take a look
and see how the inspectors work.

00:26:41.800 --> 00:26:44.490
I'm going to go ahead and open the
inspector nib that was generated

00:26:44.600 --> 00:26:46.870
for us and we had modified.

00:26:47.500 --> 00:26:49.740
and in the inspector you'll see
that we have properties reflecting

00:26:49.740 --> 00:26:50.760
what was in the undo support.

00:26:50.820 --> 00:26:53.800
We have a text field for setting the
maximum and minimum value along with the

00:26:53.890 --> 00:26:55.700
frequency of a random number generator.

00:26:55.820 --> 00:27:02.820
We'll see that each of these has an
action that's bound to the file's owner.

00:27:05.100 --> 00:27:31.900
[Transcript missing]

00:27:40.600 --> 00:27:42.730
and I will be talking about the previous
project and make sure that it gets

00:27:42.730 --> 00:27:46.620
installed in the correct location.

00:27:46.620 --> 00:27:50.510
Quickly we can note while it's building
that in the random number inspector,

00:27:52.640 --> 00:27:56.560
In the OK and revert methods,
where we're pushing the properties

00:27:57.250 --> 00:28:01.140
from the view to the object and
from the object to the view,

00:28:01.140 --> 00:28:04.110
we can see that in the OK method,
we're telling Interface Builder

00:28:04.110 --> 00:28:05.260
that the object will change.

00:28:05.260 --> 00:28:07.580
This is the point when Interface
Builder is going to use that IB class

00:28:07.640 --> 00:28:11.240
description that you generated to take a
snapshot of your object for unarchiving

00:28:11.320 --> 00:28:13.460
in the future to implement undo.

00:28:13.560 --> 00:28:16.380
So now that our project's built,
let's go make sure it's

00:28:16.390 --> 00:28:18.910
in the correct location,
which again is in your

00:28:18.910 --> 00:28:20.530
library frameworks folder.

00:28:24.800 --> 00:28:26.480
There's our random number generator.

00:28:26.480 --> 00:28:30.720
And let's also make sure
we've got the palette.

00:28:30.720 --> 00:28:31.570
And our palette.

00:28:31.740 --> 00:28:35.840
So back in Interface Builder,
we can go to the Preferences.

00:28:35.890 --> 00:28:38.400
We can choose Palettes.

00:28:38.610 --> 00:28:42.710
We can press Add and select
our random number palette.

00:28:44.060 --> 00:28:47.420
So in the Random Number Palette,
let's go ahead and actually utilize this.

00:28:47.420 --> 00:28:49.880
In Xcode,
I'm going to create a new project.

00:28:52.110 --> 00:28:53.380
We'll make a sample.

00:28:53.390 --> 00:28:55.340
We'll use the Cocoa template
for an application.

00:28:55.500 --> 00:28:59.870
Let's call it RandomHarness.

00:29:01.470 --> 00:29:04.240
So, since our Random Harness is going to
want to use our Random Number Generator,

00:29:04.260 --> 00:29:07.560
we need to import the framework that we
generated with the Random Number Project.

00:29:07.640 --> 00:29:09.780
So we're going to add
that to our project.

00:29:13.600 --> 00:29:21.600
[Transcript missing]

00:29:22.900 --> 00:29:24.310
We're going to grab
Random Number Framework because

00:29:24.310 --> 00:29:25.660
we're going to depend on that.

00:29:25.660 --> 00:29:29.610
And let's go ahead and put a random
number generator into our nib file.

00:29:29.650 --> 00:29:32.490
So in our resources,
we're going to go to the main menu nib.

00:29:36.930 --> 00:29:38.900
Okay, let's just start that back up.

00:29:38.900 --> 00:29:44.840
So in our main menu, oh,
we gotta grab the, uh,

00:29:44.850 --> 00:29:47.070
the random number generator again.

00:29:50.200 --> 00:29:50.800
So here we go.

00:29:50.800 --> 00:29:53.780
And in our nib that we just generated,
we're going to grab one

00:29:53.780 --> 00:29:54.990
of these random numbers.

00:29:55.000 --> 00:29:57.310
And like we said,
we associated a random number

00:29:57.420 --> 00:29:58.780
generator with this NSImageView.

00:29:58.780 --> 00:30:01.980
And when we drop it, we're going to get a
random number generator.

00:30:02.090 --> 00:30:04.610
So to utilize this,
let's go ahead and put some

00:30:04.630 --> 00:30:07.470
graphical elements on our window
to expose what's going on with

00:30:07.470 --> 00:30:08.940
the random number generator.

00:30:08.940 --> 00:30:13.060
I'm going to put a text
field here and two buttons.

00:30:13.200 --> 00:30:18.060
Let's put a Start button
and a Stop button.

00:30:21.710 --> 00:30:24.700
and let's go ahead and configure
our random number generator with the

00:30:24.800 --> 00:30:26.480
inspector that was shown earlier.

00:30:26.560 --> 00:30:28.640
So we'll say it will have a
min value between 0 and 100 and

00:30:28.640 --> 00:30:29.920
let's go ahead and make it fast.

00:30:30.090 --> 00:30:32.470
So we'll set the frequency to 0.2.

00:30:34.780 --> 00:30:40.560
So if we set the stop button's action to
be stop on the random number generator

00:30:40.580 --> 00:30:44.550
and do the equivalent for start,

00:30:44.950 --> 00:30:48.360
And we're going to go ahead and use
Cocoa Bindings to tell the text field

00:30:48.920 --> 00:30:52.230
to bind to the value that's exported
by the random number generator.

00:30:52.360 --> 00:30:55.740
So tell the text field to get its value.

00:31:08.030 --> 00:31:10.000
Now it looks like we have a bug.

00:31:10.020 --> 00:31:13.260
Yeah, we should be able to see
random number generator here

00:31:13.700 --> 00:31:16.570
and choose random number here.

00:31:17.220 --> 00:31:18.640
Are we running Tiger?

00:31:18.680 --> 00:31:19.900
I don't think so, no.

00:31:19.940 --> 00:31:20.800
That's probably our problem.

00:31:20.900 --> 00:31:21.800
That is our problem.

00:31:21.960 --> 00:31:24.520
So-- So the latest release
of Interface Builder,

00:31:24.530 --> 00:31:26.810
you can choose other objects
besides NSControllers to

00:31:26.820 --> 00:31:28.660
bound to for Cocoa bindings.

00:31:28.770 --> 00:31:31.320
So when you go ahead and use
your latest copy of Tiger that

00:31:31.420 --> 00:31:33.820
you were provided with,
you'll be able to bind

00:31:33.990 --> 00:31:37.410
to this random number,
this random number ibar for

00:31:37.410 --> 00:31:39.900
your text field to display
the values automatically.

00:31:40.030 --> 00:31:44.270
But with the older version,
we're not allowed to do that.

00:31:44.390 --> 00:31:47.350
So that's, yeah,
should have been kind of surprising

00:31:47.360 --> 00:31:50.080
that there's no object controller here.

00:31:50.080 --> 00:31:52.810
So we've added preliminary support so
that you can bind directly to model

00:31:52.830 --> 00:31:55.300
objects and not just controllers.

00:31:55.360 --> 00:31:56.980
So unfortunately, though,
it looks like we're running

00:31:56.980 --> 00:31:58.640
a version of Panther here.

00:31:58.640 --> 00:31:59.650
So, okay.

00:31:59.650 --> 00:32:02.720
Let's go back to the slides.

00:32:04.680 --> 00:32:06.560
Okay, so what did we just do?

00:32:06.680 --> 00:32:08.280
Well, we really didn't do anything.

00:32:08.280 --> 00:32:09.300
We had this all pre-canned.

00:32:09.300 --> 00:32:12.440
But basically the steps
that you would need to do,

00:32:12.440 --> 00:32:14.960
as Jon pointed out,
you've got the inspector,

00:32:14.960 --> 00:32:17.580
you're going to drag some text
fields or graphical widgets in there.

00:32:17.580 --> 00:32:20.870
You'll take the inspector,
which is the files owner,

00:32:20.870 --> 00:32:23.700
and hook up and set up outlets
to point to those widgets,

00:32:23.740 --> 00:32:26.160
so that when the revert
method gets called,

00:32:26.160 --> 00:32:31.160
I should say when the
revert message gets sent,

00:32:31.160 --> 00:32:34.380
otherwise Jon will scold me.

00:32:35.180 --> 00:32:37.360
So when that message gets sent,
the revert message,

00:32:37.360 --> 00:32:42.280
that we can get to those objects in the
inspector and pull the values out and

00:32:42.280 --> 00:32:44.600
insert them into the inspected object.

00:32:44.600 --> 00:32:47.100
And then you also want
to set up your actions,

00:32:47.100 --> 00:32:51.760
your OK actions, so that when, say,
you do something in the inspector,

00:32:51.760 --> 00:32:55.040
you trigger an action,
which will then get sent

00:32:55.100 --> 00:32:57.000
to your inspector object.

00:32:57.000 --> 00:33:00.100
And the result is your inspector
object then wants to take the

00:33:00.100 --> 00:33:05.000
values from the UI and push
those into the inspected object.

00:33:05.000 --> 00:33:07.800
And that's basically
what you'll need to do.

00:33:08.800 --> 00:33:10.430
OK, undo support.

00:33:10.540 --> 00:33:11.640
It's very easy.

00:33:11.810 --> 00:33:17.270
You make a slight change
to your OK method and

00:33:18.140 --> 00:33:21.110
Add an IB class description file.

00:33:21.110 --> 00:33:26.340
Now, the template that we provided
has done that for you.

00:33:26.340 --> 00:33:29.400
In fact,
Jon actually showed us this as he was

00:33:29.500 --> 00:33:32.040
looking at the inspector implementation.

00:33:32.070 --> 00:33:36.420
But the highlighted text shows
you how basically to support undo.

00:33:36.630 --> 00:33:40.040
You'll want to call that second line
or have that second line implemented

00:33:40.160 --> 00:33:45.680
for every object that happens to get
changed when you're doing the inspection.

00:33:47.140 --> 00:33:49.540
And then the class description file,
again,

00:33:49.540 --> 00:33:54.120
you just list the instance variables,
the names of the instance variables

00:33:54.270 --> 00:33:56.420
that you want to participate in undo.

00:33:56.540 --> 00:34:01.350
If you have a class that has a bunch
of IVARs and only a small subset,

00:34:01.570 --> 00:34:05.090
then obviously you want to-- a little
performance enhancement is just to

00:34:05.090 --> 00:34:07.960
list the ones that need to participate.

00:34:09.530 --> 00:34:12.680
Inspectors and Cocoa Bindings.

00:34:12.750 --> 00:34:16.230
So as I mentioned earlier,
we've got this OK and revert method

00:34:16.240 --> 00:34:18.440
thing going on that keep things in sync.

00:34:18.440 --> 00:34:22.700
And that's precisely what
Cocoa Bindings is good at doing for

00:34:22.700 --> 00:34:28.440
you without writing those methods,
implementing those methods.

00:34:28.920 --> 00:34:35.440
So it works very well on Tiger.

00:34:35.640 --> 00:34:37.620
Non-view based objects.

00:34:37.810 --> 00:34:40.800
Interface Builder has been
around for a long time.

00:34:40.800 --> 00:34:44.600
It's much earlier than Cocoa bindings.

00:34:44.740 --> 00:34:48.110
So that means there are some
possible edge cases when you're

00:34:48.110 --> 00:34:50.040
working with view based objects.

00:34:50.040 --> 00:34:52.600
In particular,
we do some caching of the images

00:34:52.600 --> 00:34:57.290
that might make you work a little
bit harder to get things to refresh

00:34:57.290 --> 00:34:59.600
when you implement undo and redo.

00:34:59.600 --> 00:35:01.420
But basically it should work.

00:35:01.550 --> 00:35:04.300
There might be a few edge cases,
so you might have to

00:35:04.300 --> 00:35:05.600
do a little tweaking.

00:35:07.580 --> 00:35:11.400
So I think, Jon, you were just going to
show us the example,

00:35:11.400 --> 00:35:13.980
what's involved,
what's left in your project

00:35:14.060 --> 00:35:17.250
after you use the Cocoa Bindings
approach for an inspector.

00:35:17.400 --> 00:35:20.480
So, like Chuck said,
bindings are a great thing to use

00:35:20.480 --> 00:35:23.880
in inspectors because all you have
is a bunch of get set mappings,

00:35:23.880 --> 00:35:24.960
keeping the objects in sync.

00:35:25.020 --> 00:35:27.300
So here,
instead of having an OK and revert method

00:35:27.310 --> 00:35:30.960
in this slightly different instance of
the random number generator project,

00:35:31.130 --> 00:35:32.640
instead we just have set value.

00:35:32.680 --> 00:35:38.530
We're overwriting the key value
coding for our class to push the

00:35:38.600 --> 00:36:00.600
[Transcript missing]

00:36:01.670 --> 00:36:03.990
Okay,
so normally you see the people bring

00:36:03.990 --> 00:36:06.760
up the project with the file merge,
so you know.

00:36:06.770 --> 00:36:09.890
The okay and revert methods are now gone.

00:36:10.080 --> 00:36:13.180
There were no instance variables left,
and you're down to a

00:36:13.180 --> 00:36:15.100
minimal amount of code.

00:36:16.680 --> 00:36:19.030
Okay, back to slides.

00:36:19.220 --> 00:36:21.600
Okay, just a few additional details.

00:36:21.600 --> 00:36:23.980
Where does IB look for palettes?

00:36:24.150 --> 00:36:25.510
Where should you put the palettes?

00:36:25.570 --> 00:36:29.210
It looks in a bunch of places,
but the places we recommend:

00:36:29.260 --> 00:36:32.390
Tilda Library Palettes,
Tilda Developer Palettes.

00:36:32.680 --> 00:36:37.010
Classes that you want to expose,
you know, the main class that you've

00:36:37.010 --> 00:36:40.570
put on the palette plus
maybe some auxiliary classes,

00:36:40.630 --> 00:36:44.480
make sure those are mentioned
in the palette table file.

00:36:44.600 --> 00:36:47.240
Tool tips:
When you're in the palette window

00:36:47.530 --> 00:36:51.600
in IB itself and you're mousing
over objects in your palette,

00:36:51.600 --> 00:36:53.490
you can specify tool tips.

00:36:53.600 --> 00:36:55.520
You do that also in your palette table.

00:36:55.650 --> 00:37:01.140
One thing I didn't mention on the
slide is the image that represents your

00:37:01.140 --> 00:37:04.600
objects on the palette that you click on.

00:37:04.600 --> 00:37:09.460
You can specify that in
the palette.table file.

00:37:12.890 --> 00:37:16.270
Okay, very quickly I just want to
mention a couple approaches

00:37:16.270 --> 00:37:18.500
to debugging your palettes.

00:37:18.500 --> 00:37:22.420
And then a couple of topics that may be
useful while you're debugging palettes,

00:37:22.470 --> 00:37:26.350
but also may be useful in general.

00:37:26.640 --> 00:37:29.870
to let you modify how things
look depending on whether you're

00:37:29.870 --> 00:37:32.920
running in IB or whether or not
you're running in IB's test mode.

00:37:32.970 --> 00:37:35.640
So, first of all, debugging.

00:37:35.670 --> 00:37:40.720
Well, if you're from the old Unix world,
then your old friends, you know,

00:37:40.720 --> 00:37:44.610
Terminal, Emacs, GDB still work great.

00:37:44.640 --> 00:37:46.820
Okay, so that's always a fallback.

00:37:46.830 --> 00:37:51.500
But if you want to do it the Xcode way,
Xcode now provides a very nice

00:37:51.500 --> 00:37:53.700
way to debug your palettes.

00:37:53.700 --> 00:37:56.800
You've got your palette
project you're working in.

00:37:56.800 --> 00:38:00.900
I, sorry,
Xcode has a facility for assigning

00:38:00.900 --> 00:38:03.880
a custom executable to your project.

00:38:03.880 --> 00:38:08.820
And basically the custom executable
you want is Interface Builder.

00:38:08.870 --> 00:38:11.980
So when you launch the application,
your custom application,

00:38:11.980 --> 00:38:13.320
it'll be Interface Builder.

00:38:13.330 --> 00:38:17.330
You're in your palette project,
you set breakpoints in the appropriate

00:38:17.430 --> 00:38:19.200
places or reasonable places,
for example,

00:38:19.200 --> 00:38:23.340
in your inspector class name,
finish instantiate, okay, revert.

00:38:23.340 --> 00:38:24.970
Any, any,
any reasonable places you want to see.

00:38:24.980 --> 00:38:26.710
Is this code being executed or not?

00:38:26.800 --> 00:38:29.000
If something's going wrong, why?

00:38:29.000 --> 00:38:31.580
Then simply start GDB in Xcode.

00:38:31.580 --> 00:38:33.900
Your, and, and load the palette.

00:38:35.800 --> 00:38:39.230
So that gives you a nice
graphical environment in which

00:38:39.230 --> 00:38:42.090
to actually debug your palettes.

00:38:42.620 --> 00:38:46.510
Okay, the other two questions:
Can you determine if you're

00:38:46.510 --> 00:38:49.310
actually running in IB or not?

00:38:49.600 --> 00:38:54.530
Well, you can just basically ask,
does your widget class, for example,

00:38:54.610 --> 00:38:58.550
respond as selector is
in Interface Builder?

00:38:59.300 --> 00:39:02.860
IB defines that in a
category on NSObject,

00:39:02.860 --> 00:39:05.700
so you can simply see if,
and the implementation

00:39:05.700 --> 00:39:07.290
is highlighted here.

00:39:07.400 --> 00:39:10.910
So you can just test,
do your respond to that.

00:39:11.240 --> 00:39:14.610
If you're in Interface Builder,
but maybe you want to know whether

00:39:14.610 --> 00:39:16.460
you're in test mode or not,
maybe you want to do some

00:39:16.460 --> 00:39:20.340
drawing differently so you
can see what state you're in,

00:39:20.670 --> 00:39:26.090
you can simply ask NSApplication,
"Are you in test interface mode?"

00:39:26.340 --> 00:39:32.300
That's a method that's made available
through IB Application Editions,

00:39:32.300 --> 00:39:34.650
which is a public header.

00:39:36.280 --> 00:39:42.200
Okay, so I'm going to switch gears just
a little bit now and talk about

00:39:42.200 --> 00:39:45.950
some things that are perhaps not
entirely related to palettes,

00:39:46.090 --> 00:39:47.430
but good things to know.

00:39:47.440 --> 00:39:50.320
They do help you if you understand,
so in your understanding

00:39:50.320 --> 00:39:53.130
of how palettes work,
good things to keep in mind,

00:39:53.130 --> 00:39:55.680
but also for nib loading in general.

00:39:55.700 --> 00:39:58.240
And some of these,
we see a lot of questions

00:39:58.320 --> 00:40:00.830
on the mailing list,
especially from beginning

00:40:01.240 --> 00:40:04.570
palette programmers,
about what methods get called,

00:40:04.570 --> 00:40:06.690
messages get sent, and when.

00:40:06.700 --> 00:40:10.980
In particular, init or initWithFrame,
depending whether you're

00:40:10.980 --> 00:40:15.750
a view or non-view object,
awakeFromNib, initWithCoder, and so on.

00:40:16.640 --> 00:40:22.570
So,
the first case is you've just clicked on

00:40:22.570 --> 00:40:27.180
your palette in the palette window in IB.

00:40:27.360 --> 00:40:28.460
What happens first?

00:40:28.700 --> 00:40:30.670
Well, that's where your
NetWithFrame will get called,

00:40:30.720 --> 00:40:31.870
on your View class.

00:40:32.050 --> 00:40:33.340
Let's take the example again.

00:40:33.340 --> 00:40:36.220
This is a view-based object.

00:40:36.380 --> 00:40:38.860
So a knit with frame gets called there.

00:40:38.890 --> 00:40:40.690
Then the next thing,
you drag that view into

00:40:40.690 --> 00:40:41.780
your design window.

00:40:41.980 --> 00:40:44.860
Again, it gets archived when it
gets put on the pasteboard,

00:40:44.860 --> 00:40:47.800
and when you drop it, it gets unarchived.

00:40:47.900 --> 00:40:51.970
So a knit with coder gets called first,
and then-- or sorry,

00:40:52.000 --> 00:40:54.820
encode with coder when we archive it,
and then a knit with

00:40:55.190 --> 00:40:56.860
coder when we drop it.

00:40:56.870 --> 00:40:58.890
Then you save the nib.

00:40:59.150 --> 00:41:02.100
And then in your running
application that nib gets loaded.

00:41:02.190 --> 00:41:06.760
So what happens when the nib gets
loaded this freeze-dried object,

00:41:06.760 --> 00:41:11.450
this freeze-dried view that you had
in your nib file gets unarchived.

00:41:11.500 --> 00:41:13.600
So a knit with coder gets called.

00:41:13.600 --> 00:41:17.760
Some folks expect, oh this is a view,
my knit with frame will get called.

00:41:17.760 --> 00:41:21.610
But no, it's the knit with coder that
gets called because again,

00:41:21.610 --> 00:41:23.920
it's a freeze-dry,
we're thawing this object

00:41:23.970 --> 00:41:25.720
when the application runs.

00:41:25.720 --> 00:41:33.040
So this slide just basically summarizes
what we saw in the previous slides.

00:41:35.820 --> 00:41:36.750
So, init with coder.

00:41:36.990 --> 00:41:39.040
The second slide, I think,
is a little bit more important.

00:41:39.040 --> 00:41:41.260
The init with coder is
going to get called,

00:41:41.260 --> 00:41:42.700
not your init with frame.

00:41:42.700 --> 00:41:45.530
And then, of course, after that,
awake from nib will get called.

00:41:45.600 --> 00:41:47.700
A couple of caveats to keep in mind.

00:41:47.700 --> 00:41:51.820
You can't count on your
connections having been

00:41:51.820 --> 00:41:54.540
formed in the init with coder.

00:41:54.700 --> 00:41:58.260
You have to wait until awake
from nib to make sure all

00:41:58.260 --> 00:42:00.590
your connections are formed.

00:42:02.080 --> 00:42:06.800
So, again, this was a case of a view.

00:42:06.800 --> 00:42:09.100
In the case of a non-view
object on the palette,

00:42:09.370 --> 00:42:13.600
instead of... Basically,
everything is the same except

00:42:13.600 --> 00:42:16.880
init with frame gets called... Or,
sorry, init gets called instead

00:42:16.880 --> 00:42:17.990
of init with frame.

00:42:18.050 --> 00:42:20.540
And it's important to note,
if your non-view object has an

00:42:20.540 --> 00:42:24.000
initializer other than init,
that's not going to get called.

00:42:24.000 --> 00:42:30.390
So, this only works well if your view,
init with frame, or if your non-view,

00:42:30.390 --> 00:42:34.000
it needs an init to
work in an IB palette.

00:42:34.190 --> 00:42:36.870
Here's another case.

00:42:37.770 --> 00:42:41.240
Suppose this time you take a custom view,
which is on one of the

00:42:41.410 --> 00:42:44.390
system provided palettes,
and you drop that into

00:42:44.400 --> 00:42:45.500
your design window.

00:42:45.800 --> 00:42:50.500
But you want to make that
view a special subclass,

00:42:50.500 --> 00:42:52.500
some subclass that you've provided.

00:42:52.610 --> 00:42:56.840
Either you've dragged in a header,
or you pick another subclass of

00:42:56.840 --> 00:42:59.500
view that's available in IB itself.

00:42:59.500 --> 00:43:04.440
So you have a new view
here now called My View.

00:43:07.390 --> 00:43:09.460
So what happens when that gets saved?

00:43:09.500 --> 00:43:12.810
Well, the custom view is the thing
that actually gets encoded.

00:43:13.270 --> 00:43:16.160
And it keeps track of the fact that, "Oh,
by the way,

00:43:16.170 --> 00:43:22.830
I really wanted my subclass of view to
be used at runtime." So the next step,

00:43:22.830 --> 00:43:27.730
say at runtime when that nib gets loaded,
the custom view is the

00:43:27.730 --> 00:43:30.270
thing that gets unarchived.

00:43:33.410 --> 00:43:37.090
and then it realizes, oh,
we really didn't want a custom,

00:43:37.100 --> 00:43:40.100
we didn't really want the custom view,
we wanted that subclass of view.

00:43:40.370 --> 00:43:46.530
So, basically the custom view kills
itself off and allows for your

00:43:46.530 --> 00:43:48.840
subclass of view to get created.

00:43:48.950 --> 00:43:51.940
So in this case,
a knit with frame does get called.

00:43:52.000 --> 00:43:56.700
Your subclass didn't get unarchived.

00:43:56.780 --> 00:43:58.460
It actually got created the normal way.

00:43:58.640 --> 00:44:01.900
So in this case,
a knit with frame gets called.

00:44:06.090 --> 00:44:10.390
and then that previous slide was just
a summary of what we saw on screen.

00:44:10.490 --> 00:44:15.020
Let me skip that for
save us some time here.

00:44:15.310 --> 00:44:20.500
The final and probably the most
confusing case that we run into is

00:44:21.220 --> 00:44:24.710
suppose you drag off a system view,
not a custom view, not a palette,

00:44:24.730 --> 00:44:27.470
but some sort of system
view from IB palettes.

00:44:27.600 --> 00:44:29.890
A typical case might be an NS button.

00:44:29.920 --> 00:44:33.000
Even more typical,
a lot of people take OpenGL view,

00:44:33.390 --> 00:44:35.550
which we provide on the palette,
and you drag that off

00:44:35.620 --> 00:44:36.740
into your design window.

00:44:37.430 --> 00:44:50.890
And then you want to
change what class it is.

00:44:50.890 --> 00:44:50.900
So instead of say NS button,
you've got your subclass of button,

00:44:50.900 --> 00:44:50.900
and so you use the classes tab
in IB or the class inspector

00:44:50.900 --> 00:44:50.910
and you switch what class it is.

00:44:51.210 --> 00:44:55.110
So again, you might have a subclass of
Button or a subclass of OpenGL View.

00:44:55.250 --> 00:44:56.780
So again,
there's two ways you can come up

00:44:56.780 --> 00:44:59.080
with a subclass of OpenGL View.

00:44:59.090 --> 00:45:02.540
You could bring a custom
view in and change it,

00:45:02.630 --> 00:45:06.770
or you could bring in an
OpenGL View in and then change it.

00:45:07.500 --> 00:45:10.100
So we're in the second case
where we've taken a system view

00:45:10.100 --> 00:45:11.400
and we're changing its class.

00:45:11.400 --> 00:45:13.140
What happens in that case?

00:45:13.160 --> 00:45:18.300
Well, this is a little bit strange,
but what happens is the NSButton,

00:45:18.300 --> 00:45:20.190
in this case, gets archived.

00:45:20.340 --> 00:45:23.650
So its encodeWithCoder gets called.

00:45:24.050 --> 00:45:27.270
When we save the nib,
and then when the nib

00:45:27.270 --> 00:45:29.310
gets loaded at runtime,

00:45:30.500 --> 00:45:33.400
Well, something gets unarchived.

00:45:33.500 --> 00:45:38.430
In fact, the initWithCoder to your
subclass gets called,

00:45:38.430 --> 00:45:43.320
even though what got
encoded was the NS button.

00:45:43.970 --> 00:45:45.020
So you have to be careful.

00:45:45.020 --> 00:45:50.580
If you do implement some encode
with coder on your subclass,

00:45:50.590 --> 00:45:52.290
that's not going to get called.

00:45:52.290 --> 00:45:54.190
And furthermore,
you probably shouldn't be pulling out,

00:45:54.220 --> 00:45:57.060
especially for TypeStream,
the old TypeStream version of archiving,

00:45:57.060 --> 00:46:00.060
you don't want to be pulling
things out of the stream,

00:46:00.290 --> 00:46:04.900
assuming that those are things that
you put in there for your subclass,

00:46:05.040 --> 00:46:08.130
because it's actually the
superclass that got encoded.

00:46:08.140 --> 00:46:11.050
So the behavior is a
little bit strange there.

00:46:11.220 --> 00:46:13.540
Because of that strangeness,
you should be asking, "Well,

00:46:13.540 --> 00:46:15.110
why would you ever want to do that?

00:46:15.240 --> 00:46:20.350
Why would you want to bring in a button
and then change its class?" Well,

00:46:20.470 --> 00:46:24.080
one answer is, say,
a button or some widget that's a system

00:46:24.080 --> 00:46:28.450
provided may have a lot of attributes
and state that needs to be set,

00:46:28.590 --> 00:46:32.360
and that state can easily be set
in the inspector for that object.

00:46:32.380 --> 00:46:38.140
So you can take advantage of setting up
all of that state by using the inspector.

00:46:38.140 --> 00:46:40.210
that you inherit.

00:46:43.370 --> 00:46:46.140
Alright, so it looks like we're in
pretty good shape for time.

00:46:46.320 --> 00:46:50.020
The final topics that I want
to talk about basically are

00:46:50.020 --> 00:46:58.300
related to performance and some
tips on designing your NIBs.

00:46:58.300 --> 00:47:02.310
So, for example,
one way to get some nice performance

00:47:02.310 --> 00:47:06.910
in certain cases is to use NSNIB,
which is reasonably new.

00:47:07.630 --> 00:47:13.840
If you use NSNIB,
you can get enhanced speed improvements

00:47:14.090 --> 00:47:17.000
at possibly a cost of memory.

00:47:17.000 --> 00:47:22.000
You get to load the Nib
from the disk just one time.

00:47:22.000 --> 00:47:24.710
And then once it's in memory,
you can instantiate it as

00:47:24.720 --> 00:47:26.800
often as you want very quickly.

00:47:26.800 --> 00:47:28.630
And again,
the tradeoff is between loading

00:47:28.630 --> 00:47:30.950
speed and the memory footprint.

00:47:31.280 --> 00:47:37.630
If you use NSNIB,
you can get enhanced speed improvements

00:47:37.680 --> 00:47:40.520
at possibly a cost of memory.

00:47:40.640 --> 00:47:45.600
You get to load the Nib
from the disk just one time.

00:47:45.600 --> 00:47:48.310
And then once it's in memory,
you can instantiate it as

00:47:48.320 --> 00:47:50.300
often as you want very quickly.

00:47:50.400 --> 00:47:52.230
And again,
the tradeoff is between loading

00:47:52.230 --> 00:47:54.390
speed and the memory footprint.

00:47:57.240 --> 00:48:02.220
Which basically,
if I haven't already allocated the NSNIB,

00:48:02.270 --> 00:48:06.730
I'm going to go ahead and
call alloc init with nib name:

00:48:06.740 --> 00:48:07.720
bundle:

00:48:08.300 --> 00:48:11.310
That's going to load it from the disk,
but it doesn't instantiate.

00:48:11.400 --> 00:48:14.790
The objects are not created,
they're not in memory.

00:48:16.450 --> 00:48:23.190
And then, the next line is how you
actually instantiate the nib.

00:48:23.190 --> 00:48:27.340
And then the final line is say the
nib had some window in it so you

00:48:27.340 --> 00:48:30.300
could do make key-and-order front,
so you see it come on screen.

00:48:30.450 --> 00:48:34.140
So a possible use for something
like this is say iChat,

00:48:34.380 --> 00:48:40.300
where you have incoming requests
from people to start a conversation.

00:48:40.300 --> 00:48:43.200
You might want to get those chat
windows up as fast as possible.

00:48:43.320 --> 00:48:46.140
You might not want to hit the disk.

00:48:46.400 --> 00:48:48.230
Something like that.

00:48:49.960 --> 00:48:54.900
A couple of pointers to some
documentation on loading resources.

00:48:54.900 --> 00:48:58.920
Okay, for some more details.

00:49:00.360 --> 00:49:05.670
Some nib content strategies
that are related to this.

00:49:05.780 --> 00:49:07.970
Nibs are fairly cheap.

00:49:07.970 --> 00:49:11.180
If you load them into memory,
you can get them on screen fast.

00:49:11.290 --> 00:49:14.060
If you load them from disk,
as long as they're not too heavyweight,

00:49:14.110 --> 00:49:16.700
that shouldn't be a problem.

00:49:16.880 --> 00:49:22.210
But remember that every object in
your nib is going to get instantiated.

00:49:22.420 --> 00:49:26.000
So, excuse me, so they're cheap as
long as they're skinny.

00:49:26.660 --> 00:49:30.290
Don't, try not to put a bunch of
Windows in your Nib files.

00:49:30.360 --> 00:49:35.290
Don't put a lot of objects that
perhaps could be lazily loaded,

00:49:35.410 --> 00:49:40.410
stored in other Nibs and loaded,
or other bundles and loaded when needed.

00:49:40.550 --> 00:49:42.660
Okay, and the other thing when you're
finished with a nib file,

00:49:42.660 --> 00:49:47.150
make sure you free the top level objects.

00:49:48.890 --> 00:49:50.960
Okay,
and again some more details on where

00:49:50.960 --> 00:49:53.300
you can get information on those topics.

00:49:53.300 --> 00:49:56.210
Slides will be available.