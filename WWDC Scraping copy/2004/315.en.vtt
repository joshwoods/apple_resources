WEBVTT

00:00:16.040 --> 00:00:19.660
Good morning and welcome
to Debugging in Xcode.

00:00:19.660 --> 00:00:24.060
What we'll cover this morning,
first we'll have a bit of a tour

00:00:24.060 --> 00:00:27.760
of debugging services in Xcode,
and then we'll talk about how

00:00:27.890 --> 00:00:32.840
to use custom data formatters,
a little bit of how you

00:00:32.840 --> 00:00:36.000
write the various formatters.

00:00:36.010 --> 00:00:38.290
Has anyone here actually customized
any of the data formatters other

00:00:38.290 --> 00:00:38.290
than people that work at Apple?

00:00:39.910 --> 00:00:43.740
Well, hopefully we'll increase that
number after today's talk.

00:00:43.740 --> 00:00:48.240
Then we're going to talk about guard
malloc and how you use that with Xcode.

00:00:48.950 --> 00:00:50.980
And then we'll cover "Fix and
Continue" enhancements that

00:00:50.980 --> 00:00:54.180
are new in Xcode 1.5 and 2.0.

00:00:54.180 --> 00:01:00.290
In fact, everything we're going to talk
about today is in Xcode 1.5 and 2.0.

00:01:00.730 --> 00:01:02.710
And then we're going to do
a little remote debugging.

00:01:02.720 --> 00:01:07.000
We'll talk about the setup and
show you what you can do with it.

00:01:07.030 --> 00:01:11.340
And of course,
we have lots of demos for you.

00:01:11.440 --> 00:01:13.830
So getting started.

00:01:16.070 --> 00:01:18.170
The debugging service is in Xcode.

00:01:18.250 --> 00:01:20.760
We have, of course, a graphical UI.

00:01:20.770 --> 00:01:27.970
That graphical UI is shared by the
Java debugger and our C code debugger.

00:01:28.050 --> 00:01:31.900
That C-based code debugger is GDB.

00:01:32.000 --> 00:01:37.310
So when you're debugging your C code,
it acts as a GUI interface to GDB.

00:01:37.910 --> 00:01:41.260
Of course it has Thread Picker.

00:01:41.260 --> 00:01:45.220
You can view your stack, variables,
and also we have an expressions window.

00:01:49.020 --> 00:01:51.740
You can also set and remove
breakpoints right in your code,

00:01:51.750 --> 00:01:52.720
right in the gutter there.

00:01:52.880 --> 00:01:55.050
You can click on your breakpoint,
it'll remove it.

00:01:55.120 --> 00:01:57.160
Set one if there isn't one there already.

00:01:57.170 --> 00:02:00.580
You can control-click and
get a little menu item so you

00:02:00.580 --> 00:02:02.500
can disable it if you want.

00:02:03.770 --> 00:02:06.460
And of course you can control
your program execution.

00:02:06.460 --> 00:02:10.330
There are toolbar items for stepping,
starting, restarting,

00:02:10.420 --> 00:02:15.210
and of course there are menu items which
you can bind your own key shortcuts to.

00:02:16.160 --> 00:02:19.300
And of course it lets you access
the cool features like "FiX and

00:02:19.300 --> 00:02:22.140
Continue" and remote debugging.

00:02:23.450 --> 00:02:25.340
Now,
our support for non-C-based languages

00:02:25.400 --> 00:02:31.010
include AppleScript and Java,
which are not the topic of this talk.

00:02:34.880 --> 00:02:36.530
So let's do a little tour now.

00:02:36.780 --> 00:02:41.710
Go to the demo machine,
and we'll show you what we have.

00:02:57.370 --> 00:02:59.640
First we'll open up Sketch.

00:02:59.680 --> 00:03:02.210
It's launching a little slowly
because we're booted off of one of

00:03:02.460 --> 00:03:04.910
those tiny FireWire hard drives.

00:03:06.950 --> 00:03:10.260
So one of the first things
you'll probably want to do

00:03:10.350 --> 00:03:13.580
is to edit your executable.

00:03:15.470 --> 00:03:19.490
In the executable inspector,
you can change the arguments that you're

00:03:19.580 --> 00:03:21.470
going to be passing to your executable.

00:03:21.550 --> 00:03:24.270
So-- and also your environment variables.

00:03:24.460 --> 00:03:26.640
So you can create sets of these,
and then toggle them

00:03:26.640 --> 00:03:28.510
on and off as you like.

00:03:28.630 --> 00:03:31.310
However, if you get too many,
it's a little difficult to

00:03:31.310 --> 00:03:32.550
manage large sets of them.

00:03:32.660 --> 00:03:37.800
So you might want to go ahead and create
a new executable item in your project.

00:03:37.840 --> 00:03:41.300
And then you can name it appropriately,
and then debug it that way.

00:03:45.400 --> 00:03:48.240
So let's start up the debugger here.

00:03:48.240 --> 00:03:50.470
We'll click the Debug button.

00:03:59.200 --> 00:04:05.080
When we hit our first breakpoint,
we'll disable that here

00:04:05.080 --> 00:04:07.390
in the breakspoint panel.

00:04:08.800 --> 00:04:09.800
and continue.

00:04:09.800 --> 00:04:14.560
So here's Sketch running.

00:04:14.560 --> 00:04:18.640
And we'll open up a
document I made before.

00:04:18.640 --> 00:04:21.590
And go back, enable our breakpoint.

00:04:23.240 --> 00:04:26.830
And now when I interact with the program,
we see that we hit the

00:04:26.960 --> 00:04:31.990
breakpoint in the debugger,
and up here above the stack in the

00:04:32.120 --> 00:04:36.410
column header is a little pop-up,
and it says "Thread 1."

00:04:36.700 --> 00:04:40.080
If there's more than one thread,
then the pop-up will be active,

00:04:40.080 --> 00:04:42.350
and you can switch
between the other threads.

00:04:42.540 --> 00:04:45.200
Then the stack will update,
the variables will update,

00:04:45.260 --> 00:04:47.960
and your source will
update to reflect that.

00:04:49.420 --> 00:04:55.350
So you'll notice that some of these stack
frames are grayed out and some are bold.

00:04:55.440 --> 00:04:57.750
If they're bold,
that means we have symbols for them

00:04:57.880 --> 00:05:01.450
so that we can show you source lines
and your variables that are in them.

00:05:03.560 --> 00:05:06.250
If they're grayed out,
we don't have symbols,

00:05:06.260 --> 00:05:08.880
but we'll go ahead and show
you the disassembly down

00:05:08.880 --> 00:05:10.500
where the source view is.

00:05:10.500 --> 00:05:16.550
So let's go back to the top of the stack.

00:05:21.230 --> 00:05:24.300
And if you want to view the
disassembly with your source,

00:05:24.380 --> 00:05:28.200
go up here to the Debug menu,
and you can toggle the

00:05:28.200 --> 00:05:29.670
disassembly display.

00:05:31.170 --> 00:05:33.460
In the seed,
you're going to need to click on the

00:05:33.470 --> 00:05:36.370
stack frame that you're looking at,
and then it'll update the PC pointer

00:05:36.370 --> 00:05:38.040
over in the disassembly view.

00:05:38.120 --> 00:05:45.300
But here we have your source code and
your disassembly in the same view.

00:05:45.300 --> 00:05:45.300
And if we go up to the
toolbar and we do--

00:05:45.650 --> 00:05:47.890
Step over instruction,
you'll see that the PC and

00:05:47.890 --> 00:05:52.000
the disassembly is changing
as we go through the code,

00:05:52.000 --> 00:05:54.410
but those lines that we're
stepping through are all

00:05:54.440 --> 00:05:55.860
on the same line of source.

00:05:59.630 --> 00:06:01.420
If you do a step over,
you'll see that we've stepped

00:06:01.550 --> 00:06:06.450
over in the source view,
and then the PC and the disk

00:06:06.450 --> 00:06:08.830
assembly is also updated.

00:06:08.900 --> 00:06:11.460
Now,
if you'll notice in the variable view,

00:06:12.950 --> 00:06:15.460
We have variable graphics here.

00:06:15.560 --> 00:06:19.380
It's an NSArray, and it's just been set,
as you can see from the source

00:06:19.580 --> 00:06:21.500
code where our breakpoint is.

00:06:22.140 --> 00:06:26.370
Whenever value changes between stepping,
we'll highlight it in red for

00:06:26.370 --> 00:06:28.710
you so it's easier to see.

00:06:32.160 --> 00:06:39.500
If we step again, you'll see that "i" has
changed and highlighted in red.

00:06:39.640 --> 00:06:44.350
So now we can actually go and edit the
value of "i" and we can set it to 4.

00:06:45.720 --> 00:06:47.620
And just to prove to
you that it's set to 4,

00:06:47.620 --> 00:06:50.300
for those of you that
don't like the GDB console,

00:06:50.350 --> 00:06:52.090
you can avert your eyes now.

00:06:52.670 --> 00:06:56.110
We can open the console,
print "i," and sure enough,

00:06:56.110 --> 00:06:59.190
it's been set to 4, as you would expect.

00:07:05.350 --> 00:07:07.000
As you can see,
that's not going to be a good idea

00:07:07.000 --> 00:07:09.110
because we're going to iterate
through our for loop there,

00:07:09.190 --> 00:07:12.270
and we'd probably cause an
exception as we access the array.

00:07:12.450 --> 00:07:19.180
So we can drag the PC back and then
execute that line of code again.

00:07:20.190 --> 00:07:23.180
Just another way,
we could have gone and edited

00:07:23.210 --> 00:07:24.750
that value and set it to 3 again.

00:07:26.680 --> 00:07:29.580
But it's a useful technique to
be able to move the PC if you've

00:07:29.580 --> 00:07:32.820
accidentally gone past a line of
code that you want to step into.

00:07:32.990 --> 00:07:35.960
Say there's a function you wanted to
step into and you've gone past it.

00:07:36.150 --> 00:07:40.290
You can simply drag the PC back
and then click "Step Into."

00:07:45.760 --> 00:07:49.790
So with graphics,
we see that it's in NSArray,

00:07:49.790 --> 00:07:51.290
and it's telling us that
there are three objects,

00:07:51.300 --> 00:07:53.930
but there isn't much
more information there.

00:07:54.070 --> 00:07:58.320
So what we can do is,
using contextual menu, we can print the

00:07:58.390 --> 00:08:00.200
description to the console.

00:08:00.200 --> 00:08:03.100
The console automatically
comes up for us.

00:08:04.420 --> 00:08:08.220
And if we scroll up to the top,
where it displays the variable,

00:08:08.220 --> 00:08:12.680
we see that NSArrays have a description
where they'll give us the count and

00:08:12.720 --> 00:08:14.660
then tell us what the values are.

00:08:15.050 --> 00:08:19.760
And then it'll go through each element of
the array and do a description on those.

00:08:20.030 --> 00:08:24.310
And we see that the elements
inside the array each have

00:08:24.310 --> 00:08:28.490
a very verbose description,
giving us the bounds,

00:08:28.550 --> 00:08:31.910
the class-- in this case,
it's a circle-- and

00:08:31.910 --> 00:08:31.910
some other attributes.

00:08:33.540 --> 00:08:38.060
Now,
I like my GDB prompt to be a little bold,

00:08:38.080 --> 00:08:42.010
so we can go to the debugger preferences.

00:08:44.060 --> 00:08:47.140
And we can set the font size.

00:08:47.330 --> 00:08:50.840
And we can change it to bold.

00:08:50.990 --> 00:08:52.920
Then click "Apply."

00:08:54.750 --> 00:08:56.670
So you can go through and you
can customize your standard in,

00:08:56.780 --> 00:08:57.290
standard out.

00:08:57.290 --> 00:09:00.900
You can have different fonts if you want,
different colors even.

00:09:00.900 --> 00:09:03.510
And as you can see over here
in the source code view,

00:09:03.510 --> 00:09:06.610
I've actually changed the instruction
pointer highlighting to a light green.

00:09:06.740 --> 00:09:09.990
You may have been seeing
red in all the other demos.

00:09:16.710 --> 00:09:22.710
One other important item to keep in
mind is that we have key bindings.

00:09:24.710 --> 00:09:27.630
So if you don't like the
default key bindings for the

00:09:27.760 --> 00:09:31.660
various debugger functions,
the stepping, that sort of thing,

00:09:31.660 --> 00:09:33.110
you can define your own.

00:09:36.620 --> 00:09:38.600
Now let's go back to slides.

00:09:39.030 --> 00:09:43.150
As I click-- one more.

00:09:43.740 --> 00:09:48.440
And you also see that when
we're running the debugger,

00:09:48.560 --> 00:09:53.650
and if you were to quit Xcode, we say,
oh, we're running.

00:09:53.650 --> 00:09:56.750
This also works for the run panel.

00:09:56.750 --> 00:09:59.380
It's been much requested,
and that's fixed in Xcode 1.5 and 2.0.

00:09:59.380 --> 00:09:59.380
So let's go back to slides.

00:10:02.760 --> 00:10:03.700
Custom data formatters.

00:10:03.830 --> 00:10:06.680
We introduced them a year ago.

00:10:06.680 --> 00:10:10.590
And how many of you know when
you're looking at a custom data

00:10:10.590 --> 00:10:13.190
formatter in the variable view?

00:10:15.440 --> 00:10:17.060
Of course, the Apple guys.

00:10:17.060 --> 00:10:19.870
So basically they'll let you
summarize the information so you

00:10:19.870 --> 00:10:22.300
don't have to turn down the variable.

00:10:22.330 --> 00:10:24.400
For instance,
structures can get quite long.

00:10:24.420 --> 00:10:27.320
You can summarize exactly
what you want to see.

00:10:27.320 --> 00:10:34.270
It saves vertical space,
which is very precious

00:10:34.310 --> 00:10:36.130
on a lot of screens.

00:10:36.130 --> 00:10:36.130
And you can add your own
custom text to the data values.

00:10:41.100 --> 00:10:43.000
And you can also evaluate expressions.

00:10:43.000 --> 00:10:46.850
You can make calls to functions
as part of your simple

00:10:46.980 --> 00:10:50.060
expression data formatters,
and you can also create custom plugins,

00:10:50.060 --> 00:10:52.290
which can be more complex.

00:10:54.500 --> 00:10:57.750
Now, custom data formatters,
they're bound to a type.

00:10:57.780 --> 00:11:01.910
So if you change the variable
formatter for one-- change the

00:11:01.910 --> 00:11:04.500
formatter for one variable,
it's going to change the formatter

00:11:04.620 --> 00:11:07.140
for all variables of that type.

00:11:07.210 --> 00:11:09.620
Just something to keep in mind.

00:11:09.620 --> 00:11:11.790
We have about 35 Carbon formatters.

00:11:11.890 --> 00:11:17.240
For instance, OS error, FSREF,
and some structures.

00:11:17.310 --> 00:11:21.020
And we have about 35
foundation formatters as well.

00:11:21.080 --> 00:11:23.100
For instance, you saw NSArray.

00:11:23.100 --> 00:11:24.470
We tell you the count of objects.

00:11:24.500 --> 00:11:27.080
In this dictionary,
we tell you the number of keys.

00:11:27.080 --> 00:11:31.870
We have formatters for NSPoint, NSRec,
some of the AppKit structures.

00:11:32.930 --> 00:11:36.790
Now your user customizations are
all stored in your home directory:

00:11:36.790 --> 00:11:41.700
~library, application support, Apple,
developer tools, custom data views,

00:11:41.810 --> 00:11:43.800
customdataviews.plist.

00:11:43.800 --> 00:11:46.240
So if you have a great set that you
want to share with other people,

00:11:46.390 --> 00:11:49.760
you can give it to them,
they can then insert it in the

00:11:49.840 --> 00:11:52.800
same place in their home directory.

00:11:52.840 --> 00:11:56.150
And then they'll have the same
data formatters that you have.

00:11:59.910 --> 00:12:02.400
And for plugin support,
you should look at the

00:12:02.820 --> 00:12:05.970
dataformatterplugin.h file,
which is actually inside

00:12:05.970 --> 00:12:08.380
the Xcode.app app wrapper.

00:12:08.460 --> 00:12:12.150
So you have to search down inside that,
probably with terminal,

00:12:12.150 --> 00:12:15.220
or you can use open
package contents in Finder.

00:12:23.770 --> 00:12:27.410
Now, summary formatters,
they're lower overhead

00:12:27.420 --> 00:12:29.130
than the other formatters.

00:12:29.270 --> 00:12:32.060
They're basically percolating
values that we've already fetched,

00:12:32.060 --> 00:12:36.560
or are easy to fetch, into the summary.

00:12:37.450 --> 00:12:38.740
The recursive.

00:12:38.740 --> 00:12:43.450
So if you have one formatter for
one structure that has another

00:12:43.580 --> 00:12:48.010
structure that also has a formatter,
then that formatter can be used as well,

00:12:48.040 --> 00:12:51.500
and you don't have to drill all
the way down into those children.

00:12:53.030 --> 00:12:56.840
The basic format of a summary
formatter is a child path

00:12:57.000 --> 00:13:03.010
surrounded in percent signs,
colon, and then a referenced column.

00:13:03.520 --> 00:13:07.400
Now the child path is a dot-delimited
path to the child data value,

00:13:07.400 --> 00:13:11.010
a lot like you would
reference a structure in C.

00:13:11.680 --> 00:13:13.810
In C++,
child paths can leave out private,

00:13:13.810 --> 00:13:15.140
protected, and public.

00:13:15.260 --> 00:13:16.170
You don't have to reference those.

00:13:16.230 --> 00:13:18.830
We'll skip those automatically for you.

00:13:19.520 --> 00:13:24.810
Now the reference columns all refer
to the columns in the variable view.

00:13:24.840 --> 00:13:29.160
For instance,
there's the name variable column.

00:13:31.810 --> 00:13:38.100
There's the value column, the type,
and the summary column.

00:13:38.110 --> 00:13:41.490
So this is going to reference which
of those columns of the variable

00:13:41.670 --> 00:13:43.700
you want to display in your summary.

00:13:43.700 --> 00:13:46.540
We'll cover that in a little more detail.

00:13:47.210 --> 00:13:49.800
So here's an example
where we have an NSPoint,

00:13:49.820 --> 00:13:52.600
has two elements, an X and a Y.

00:13:52.800 --> 00:13:55.450
And you might write a formatter
that looks a little bit like this.

00:13:55.510 --> 00:14:00.630
So you might have X equals
percent X percent and Y equals,

00:14:00.640 --> 00:14:02.300
which is some custom text.

00:14:02.360 --> 00:14:03.820
You could put anything there.

00:14:03.870 --> 00:14:06.410
And then percent Y percent.

00:14:06.490 --> 00:14:10.610
And it might look something like
that in the variable display.

00:14:11.880 --> 00:14:16.640
I have a similar thing for an NS size,
where you reference the

00:14:16.640 --> 00:14:19.750
width and the height,
surrounded by percent signs,

00:14:19.810 --> 00:14:22.320
and some custom text before or after it.

00:14:22.390 --> 00:14:24.910
And that would display
something like this.

00:14:27.280 --> 00:14:29.660
As we talked about before,
they're recursive.

00:14:29.750 --> 00:14:35.940
So if you have an NSRect,
which has an origin,

00:14:35.970 --> 00:14:41.630
which has an NSPoint,
and an NSSize as two

00:14:41.630 --> 00:14:42.230
elements of that structure,
you can simply reference those elements

00:14:42.230 --> 00:14:42.230
and their data formatters will be used.

00:14:42.490 --> 00:14:46.920
So you might have custom text,
parentheses surrounding,

00:14:46.940 --> 00:14:50.410
a reference to the origin,
as well as the size.

00:14:50.420 --> 00:14:54.360
And then it would look something
like this in the variable display.

00:14:56.960 --> 00:15:00.950
Now, expression formatters
are a bit more complex.

00:15:01.250 --> 00:15:04.040
They're higher overhead,
because you're actually asking

00:15:04.150 --> 00:15:07.100
GDB to go execute some code
or do some logic for you.

00:15:07.150 --> 00:15:10.080
Usually you're executing a function

00:15:11.370 --> 00:15:14.250
and that can have side effects,
since you're actually

00:15:14.620 --> 00:15:16.180
evaluating something in GDB.

00:15:16.180 --> 00:15:19.900
So if your variable formatter
has something like I++ in it,

00:15:19.950 --> 00:15:21.750
then I will increment.

00:15:21.810 --> 00:15:24.660
And if I is a variable in the stack,
it'll have changed.

00:15:24.760 --> 00:15:26.250
So be careful what you do.

00:15:26.270 --> 00:15:29.850
You might also be able to do
something interesting with that.

00:15:30.870 --> 00:15:34.800
And you should always cast your
expression formatter to the correct type.

00:15:34.800 --> 00:15:39.240
GDB can be a little unhappy if it
doesn't know the type for the return

00:15:39.340 --> 00:15:42.190
value of the expression you're calling.

00:15:42.210 --> 00:15:46.030
So it's always safest
to cast the proper type.

00:15:46.100 --> 00:15:49.530
If you don't enter the type
and the formatter doesn't work,

00:15:49.580 --> 00:15:51.790
cast the proper type and try again.

00:15:52.590 --> 00:15:54.770
and avoid taking locks.

00:15:54.820 --> 00:15:59.500
Avoid anything that will take a lock,
avoid anything that might need a lock.

00:15:59.500 --> 00:16:04.330
It's just not a good idea to
do that in your expressions.

00:16:05.300 --> 00:16:07.480
and avoid taking locks.

00:16:07.480 --> 00:16:12.200
Avoid anything that will take a lock,
avoid anything that might need a lock.

00:16:12.200 --> 00:16:15.050
It's just not a good idea to
do that in your expressions.

00:16:16.700 --> 00:16:19.690
The dollar sign "var" is used
to reference your variable in

00:16:19.820 --> 00:16:22.100
the expression that you write.

00:16:23.950 --> 00:16:27.440
Now you want to think--you can think of
your expression formatter as though it

00:16:27.440 --> 00:16:32.520
were a variable of the type that you've
cast it to in the variable display.

00:16:32.520 --> 00:16:36.510
So if it's a char star,
char stars happen to show up

00:16:36.590 --> 00:16:39.040
always in the summary column.

00:16:39.040 --> 00:16:43.310
So we'll get to an example
of that in a minute.

00:16:44.160 --> 00:16:47.210
For an NSArray,
if you've ever gone and double-clicked

00:16:47.250 --> 00:16:51.260
on the summary column of an NSArray,
you might have seen the formatter

00:16:51.260 --> 00:16:52.400
looks sort of like this.

00:16:52.440 --> 00:16:54.570
So we have some custom text.

00:16:54.830 --> 00:16:57.540
We have curly braces
surrounding our expression.

00:16:57.580 --> 00:17:02.890
Dollar sign bars replaced by
the actual variable when it's

00:17:03.000 --> 00:17:05.920
passed to GDB for evaluation.

00:17:06.040 --> 00:17:09.570
So we get back an integer,
which we're casting to be safe.

00:17:09.570 --> 00:17:09.570
And we're casting-- we're

00:17:10.190 --> 00:17:13.860
We're including ":v" at the end,
just to be pedantic.

00:17:13.860 --> 00:17:14.760
It's the default.

00:17:14.850 --> 00:17:18.230
If you don't include
any reference column,

00:17:18.250 --> 00:17:21.090
then that's the default.

00:17:21.120 --> 00:17:22.480
So, just for correctness.

00:17:24.310 --> 00:17:30.740
Now you could do this type of formatter
for a bool if you were tired of seeing

00:17:30.840 --> 00:17:32.200
ones and zeros for all your bools.

00:17:32.200 --> 00:17:34.730
You wanted to see true and false,
because that's what you're

00:17:34.820 --> 00:17:35.960
used to programming it as.

00:17:35.960 --> 00:17:39.380
Or you might want to see it as
yes and no if you're into Cocoa.

00:17:39.380 --> 00:17:43.290
So here again we have
our custom expression,

00:17:43.290 --> 00:17:46.460
and we're casting it to a char star.

00:17:46.460 --> 00:17:50.220
And because we're casting
it to a char star,

00:17:50.240 --> 00:17:52.290
we need to reference the summary column.

00:17:53.600 --> 00:17:59.000
So for an STL string,
for a standard template library string,

00:17:59.300 --> 00:18:01.430
If you have a simple
null-terminated string,

00:18:01.430 --> 00:18:04.690
you could use a formatter like
this to be able to view that

00:18:04.760 --> 00:18:07.360
string in the summary column.

00:18:07.360 --> 00:18:09.380
So here we're simply
calling--have some custom text,

00:18:09.420 --> 00:18:18.700
C string equals curly brace,
casting our expression to a char star,

00:18:18.700 --> 00:18:23.360
$var.C_STR function call.

00:18:23.360 --> 00:18:23.360
Close it up and end it with colon S.

00:18:25.150 --> 00:18:31.560
Now for custom data formatter plugins,
you can do more complex things.

00:18:33.560 --> 00:18:36.650
Basically allows you to do a custom
print for a debugger on types

00:18:36.730 --> 00:18:41.370
that you may not have access to,
or somebody's given you a framework and

00:18:41.370 --> 00:18:44.470
they don't have custom debugger printing.

00:18:44.490 --> 00:18:45.520
It's automatically used.

00:18:45.550 --> 00:18:49.110
So once you create one of these bundles,
in it is a plist that

00:18:49.120 --> 00:18:53.530
specifies which type it's for,
and Xcode will automatically use

00:18:53.530 --> 00:18:55.620
that data formatter for that type.

00:18:57.350 --> 00:18:59.830
And this code runs in your program.

00:18:59.920 --> 00:19:01.540
So you want to be careful
what you're doing.

00:19:01.540 --> 00:19:04.920
If you're not comfortable with
allocating memory or being careful

00:19:04.920 --> 00:19:08.430
that you're not overrunning the
buffers that you're creating,

00:19:08.430 --> 00:19:10.990
then you might want to
be careful with these.

00:19:11.440 --> 00:19:13.590
Be sure to handle invalid input.

00:19:13.660 --> 00:19:17.380
Oftentimes these variable formatters
will be called before your

00:19:17.520 --> 00:19:21.470
variables have been initialized,
so you want to be safe

00:19:21.470 --> 00:19:22.720
with what you're doing.

00:19:24.960 --> 00:19:28.180
Now in order to create a
custom data formatter plugin,

00:19:28.380 --> 00:19:30.520
you need to start with a new project.

00:19:30.520 --> 00:19:34.650
We'll have a demo of this,
so you don't need to write it all down.

00:19:35.340 --> 00:19:37.500
Then you need to add
a bundle target to it.

00:19:37.500 --> 00:19:39.980
For instance, a Cocoa bundle.

00:19:39.980 --> 00:19:42.640
And then you'll need to
add a header search path.

00:19:42.850 --> 00:19:46.170
In this case,
you can see that it crawls down into

00:19:46.170 --> 00:19:49.330
the Xcode application app bundle itself.

00:19:49.450 --> 00:19:55.560
That's where the
dataformatterplugin.h lives.

00:19:55.560 --> 00:19:58.460
This way we can simply reference #include
dataformatterplugin.h in our code.

00:19:59.290 --> 00:20:02.870
And then you also need to add a
custom data formatter views.plist.

00:20:02.890 --> 00:20:06.450
This is the plist I was talking
about that specifies which type

00:20:06.510 --> 00:20:12.190
this custom data formatter is for,
and also what summary string to use.

00:20:14.910 --> 00:20:21.740
So here we see dictionary with a key,
which is bool,

00:20:21.910 --> 00:20:25.680
and that's the type that this
formatter will be used for.

00:20:25.790 --> 00:20:30.620
And then summary string is the next key,
and that's the summary string that

00:20:30.620 --> 00:20:33.160
will be used in the summary column.

00:20:34.230 --> 00:20:37.760
So in this case we're
calling myBulletDescription.

00:20:37.760 --> 00:20:41.120
$var is going to be replaced
with the actual variable.

00:20:41.120 --> 00:20:46.510
$id is used by Xcode to

00:20:47.500 --> 00:21:12.600
[Transcript missing]

00:21:15.800 --> 00:21:22.440
Up top we see that we have a pointer
to our PBX GDB plugin functions.

00:21:22.440 --> 00:21:25.490
Those are the plugin functions
that we support for you.

00:21:26.630 --> 00:21:32.160
And we declare our function,
which is myBullDescriptor.

00:21:33.080 --> 00:21:37.140
And we have our type,
which is bool and int for the

00:21:37.170 --> 00:21:39.650
identifier for that memory call.

00:21:40.140 --> 00:21:42.780
And if you look at the code,
we see that if a bool is yes,

00:21:42.780 --> 00:21:47.840
then we're going to construct
this print function.

00:21:48.560 --> 00:21:51.450
which is going to concept
the message for us,

00:21:51.640 --> 00:21:54.260
allocate some memory,
and take care of managing that for us

00:21:54.280 --> 00:21:56.400
so we can return any string we want.

00:21:56.400 --> 00:22:05.930
Now we have Jim Ingham on to give
us a demo of custom data formatters.

00:22:10.940 --> 00:22:13.800
Can we have this one?

00:22:13.800 --> 00:22:14.800
Okay.

00:22:14.800 --> 00:22:22.010
So, we're going to go over these kind of
in order of dangerousness from not

00:22:22.010 --> 00:22:24.800
very dangerous to very dangerous.

00:22:24.800 --> 00:22:28.710
Let me open these.

00:22:36.000 --> 00:22:39.710
So the ones that are the percent ones,
that's really doing nothing.

00:22:39.810 --> 00:22:43.260
That's just taking information
that's already fetched on

00:22:43.350 --> 00:22:45.150
your behalf and using it.

00:22:45.290 --> 00:22:45.900
So I'll show you those.

00:22:45.900 --> 00:22:48.900
Those, you know,
you can play around with those for free.

00:22:48.900 --> 00:22:50.340
They're really, it's really nice.

00:22:50.340 --> 00:22:53.860
You can go in and, you know,
as you're looking at something, you know,

00:22:53.900 --> 00:22:54.900
change it for a little while,
change it back.

00:22:54.940 --> 00:22:58.380
They're really easy once you get,
the syntax is straightforward,

00:22:58.640 --> 00:22:59.900
just like your C syntax.

00:22:59.900 --> 00:23:02.900
And kind of once you get
into the habit of just,

00:23:02.900 --> 00:23:03.900
"Oh, I want to see these two fields now.

00:23:03.900 --> 00:23:06.090
Oh, I want to see these two fields
now." It really becomes an

00:23:06.090 --> 00:23:09.900
interactive thing that you can
go and do as you're going along.

00:23:09.900 --> 00:23:11.890
It's really a nice workflow, I think.

00:23:11.900 --> 00:23:16.340
Okay, so let me find somewhere
interesting that I want to be.

00:23:35.100 --> 00:23:36.160
So we got Sketch again.

00:23:36.160 --> 00:23:38.690
That's what we're using as our
example all the time this year.

00:23:38.760 --> 00:23:48.080
So I'm here somewhere.

00:23:51.930 --> 00:23:55.540
So I have this bounds,
which has got custom

00:23:55.540 --> 00:23:57.430
data formatters already,
you can see.

00:23:57.680 --> 00:24:00.600
If you want to see what the custom
data formatter is for anything,

00:24:00.600 --> 00:24:03.700
remember, you just double-click on it
and it'll show you what the

00:24:03.700 --> 00:24:05.550
current data formatter is.

00:24:05.980 --> 00:24:11.800
But maybe my--what I like is to keep my
value column fairly small because I have,

00:24:11.800 --> 00:24:14.750
you know, a lot of strings or something
like that in the summary field.

00:24:14.750 --> 00:24:15.800
I want to make that big.

00:24:15.800 --> 00:24:18.130
So we chose to put this
particular set of custom data

00:24:18.210 --> 00:24:20.800
formatters in the value column,
and that's annoying to me.

00:24:20.800 --> 00:24:21.800
I don't want to do that.

00:24:21.800 --> 00:24:23.780
So I want to move it over
to the summary column.

00:24:23.850 --> 00:24:25.800
So that's--that's what I'll
show you how to do first.

00:24:25.800 --> 00:24:27.800
So that's pretty straightforward.

00:24:27.800 --> 00:24:29.800
Let me actually do it for the
constituent elements first.

00:24:29.800 --> 00:24:33.800
So a bounds has, you know,
a point and a--and a size.

00:24:33.800 --> 00:24:38.970
So let's take this one,
and you can just copy it from here and

00:24:38.970 --> 00:24:40.800
double-click and put it over there.

00:24:40.800 --> 00:24:42.790
So now it's going to show up over there.

00:24:42.800 --> 00:24:43.740
So that's all you have to do.

00:24:43.800 --> 00:24:45.800
And, you know,
it's a little bit of a challenge,

00:24:45.800 --> 00:24:49.800
but once you get used to it,
this is something that's mine, right?

00:24:49.800 --> 00:24:55.800
You can really change in a nice
way all the stuff that you view.

00:24:55.800 --> 00:24:57.800
So I put this one over here, right?

00:24:57.930 --> 00:25:03.480
Then now I've got redundant information,
so maybe there's something

00:25:03.480 --> 00:25:04.650
else I'm interested in here.

00:25:04.810 --> 00:25:07.320
Like, since it's a structure,
maybe I want to see what the

00:25:07.440 --> 00:25:08.790
address of the structure is.

00:25:08.800 --> 00:25:11.390
So that one would be pretty
straightforward to do,

00:25:11.390 --> 00:25:11.700
too.

00:25:11.900 --> 00:25:14.540
That's going to be an expression
because we didn't fetch the

00:25:14.570 --> 00:25:17.790
address of the structure in
a way that you can get at it.

00:25:17.810 --> 00:25:23.440
So--but you just write an
ordinary C expression surrounded

00:25:23.440 --> 00:25:24.800
by the curly brackets.

00:25:24.800 --> 00:25:26.760
That's our little syntax which
says this is an expression

00:25:26.800 --> 00:25:30.390
I'm going to send to GDB,
and I'm just getting, you know,

00:25:30.490 --> 00:25:32.800
the address of that array.

00:25:32.800 --> 00:25:34.800
For some reason,
it's not updating right away,

00:25:34.800 --> 00:25:35.800
but it'll update in a second.

00:25:35.800 --> 00:25:36.800
Don't worry.

00:25:36.800 --> 00:25:40.130
And then maybe I'll do the
same thing here because--well,

00:25:40.130 --> 00:25:44.500
I don't know, but-- because I said
so in the demo script.

00:25:46.790 --> 00:25:47.720
Okay, so I've got that.

00:25:48.070 --> 00:25:52.140
But then notice over here,
so this is the deal with the

00:25:52.140 --> 00:25:54.590
columns that's a little bit
confusing at first but it's

00:25:54.700 --> 00:25:55.990
actually pretty straight forward.

00:25:56.270 --> 00:26:00.190
You know,
I changed the value contents of the

00:26:00.190 --> 00:26:06.130
origin structure that was contained
within this bound structure.

00:26:06.290 --> 00:26:09.850
So then all of a sudden,
what started showing up as the

00:26:09.850 --> 00:26:15.040
summary for origin in the bounds
structure that contained origin

00:26:15.120 --> 00:26:17.570
is that address that I wrote in.

00:26:17.870 --> 00:26:21.790
And the reason for that is because
the summary here that I'm getting

00:26:22.100 --> 00:26:27.610
is coming from the value column by
default because I haven't put a colon,

00:26:27.620 --> 00:26:31.300
which column am
I referencing in the origin,

00:26:31.300 --> 00:26:36.980
right, which is this one,
that I'm pulling the formatter out from.

00:26:36.980 --> 00:26:39.590
So if I want this to come
now from the summary column,

00:26:39.590 --> 00:26:41.550
because again, I've moved the summary
column to the value column,

00:26:41.550 --> 00:26:43.830
and I've moved the information
I'm interested in from the value

00:26:43.890 --> 00:26:47.170
column to the origin column,
then I have to say that's

00:26:47.200 --> 00:26:49.090
from the summary column.

00:26:49.190 --> 00:26:50.860
And the same thing here.

00:26:50.860 --> 00:26:52.660
I have to say that's
from the summary column.

00:26:52.770 --> 00:26:56.100
So now that shows the contents
from the summary column,

00:26:56.110 --> 00:26:59.600
which is the one I want
for the outer summary.

00:26:59.600 --> 00:27:03.060
So again, I can move this over here.

00:27:03.060 --> 00:27:06.570
And I don't know, you know,
I could take this one and put it over

00:27:06.570 --> 00:27:09.100
here just to make everything look pretty.

00:27:09.100 --> 00:27:12.100
So, okay, so that's the two things.

00:27:12.100 --> 00:27:14.100
One, you know, double-click to find them.

00:27:14.100 --> 00:27:16.030
That's how you discover them.

00:27:16.290 --> 00:27:20.090
The notion of, you know,
when you have a substructure

00:27:20.180 --> 00:27:24.090
like this origin substructure,
you can use it in the parent

00:27:24.090 --> 00:27:26.040
just by referring to it.

00:27:26.100 --> 00:27:28.940
And again,
the column says in the substructure

00:27:28.940 --> 00:27:33.100
that I'm pulling values out from,
which column am I referencing?

00:27:33.100 --> 00:27:35.100
Like,
am I referencing the stuff that's here,

00:27:35.100 --> 00:27:38.000
or am I referencing the stuff that's
here in the formatter up here?

00:27:38.100 --> 00:27:38.930
Okay.

00:27:39.100 --> 00:27:41.380
So that's pretty straightforward.

00:27:42.860 --> 00:27:45.750
Uh... okay, cool.

00:27:45.750 --> 00:27:48.870
So now,
I don't want to stop here anymore.

00:27:52.600 --> 00:27:55.550
Uh... okay, cool.

00:27:55.550 --> 00:27:58.680
So now,
I don't want to stop here anymore.

00:28:03.350 --> 00:28:04.200
Now I have source.

00:28:04.200 --> 00:28:05.040
Yay!

00:28:05.200 --> 00:28:08.360
Okay.

00:28:08.360 --> 00:28:17.910
So the next thing I want to
stop at is... I think I want

00:28:33.000 --> 00:28:41.400
[Transcript missing]

00:28:42.410 --> 00:28:46.050
Here's another place, like,
my document is a type that's mine, and,

00:28:46.050 --> 00:28:49.320
you know, it's the one in Sketch that
contains the circles and

00:28:49.380 --> 00:28:51.110
squares and so on and so forth.

00:28:51.300 --> 00:28:54.800
So, I actually might want to see some
useful pieces of information about it,

00:28:54.800 --> 00:28:57.390
like, in this case,
maybe what I want to see is,

00:28:57.500 --> 00:28:59.800
how many circles do I have and
how many squares do I have?

00:28:59.800 --> 00:29:01.800
That might actually be a
useful piece of information.

00:29:01.800 --> 00:29:06.390
So, it turns out that what the document
contains is actually NSArrays,

00:29:06.390 --> 00:29:09.300
and it contains an NSArray of circles
and it contains an NSArray of squares.

00:29:09.300 --> 00:29:12.790
And then it has an accessor method
called "rectangles" to get the NSArray.

00:29:12.800 --> 00:29:15.720
So, there's no way that I'm going
to find out those numbers by,

00:29:15.720 --> 00:29:18.800
you know, grubbing around in structures,
because NSArrays hide from me

00:29:18.800 --> 00:29:22.300
where the number of elements is.

00:29:22.300 --> 00:29:25.540
And my little accessors are such that,
you know, I'm hidden where the

00:29:25.620 --> 00:29:27.300
NSArray for rectangles is.

00:29:27.300 --> 00:29:29.290
So, I'm going to have to call
some code to do that.

00:29:29.400 --> 00:29:31.270
But it's pretty
straightforward accessor code,

00:29:31.340 --> 00:29:34.300
so it's really not too much worry.

00:29:34.300 --> 00:29:35.860
It's unlikely that I'm
going to crash my program,

00:29:35.860 --> 00:29:38.170
you know, calling for circles or squares,
or change its state by getting

00:29:38.200 --> 00:29:39.290
the number or something like that.

00:29:39.300 --> 00:29:43.260
So, that's the kind of function call
that you can call into the inferior

00:29:43.320 --> 00:29:44.270
that's actually pretty safe.

00:29:44.400 --> 00:29:46.290
It's not going to do any harm.

00:29:46.300 --> 00:29:48.490
On the other hand,
me trying to type while you're

00:29:48.570 --> 00:29:51.240
watching me would do infinite harm,
so I'm not going to do that.

00:29:51.300 --> 00:29:55.640
I'm just going to -- oh, is it you,
bastard?

00:29:56.400 --> 00:29:57.940
This is not going to let me copy.

00:29:58.020 --> 00:29:59.300
Oh, you're going to watch me type.

00:29:59.440 --> 00:30:02.250
Okay, that's going to be fun.

00:30:02.540 --> 00:30:07.100
So, for instance, maybe I just want the
number of circles here,

00:30:07.230 --> 00:30:09.040
just to limit your fun.

00:30:09.040 --> 00:30:13.870
So, you know,
I have to call to get the number of,

00:30:13.870 --> 00:30:17.960
get the array and then get the
number of elements in the array.

00:30:18.080 --> 00:30:23.000
So the number of elements in
the array is going to be an int,

00:30:23.340 --> 00:30:27.420
Variable, so the dollar var,
that's the thing that I'm

00:30:27.420 --> 00:30:30.050
referencing in the document,
and I'm going to have to

00:30:30.090 --> 00:30:31.930
get the circles out of that.

00:30:33.500 --> 00:30:36.400
I have to get a curly
brace on the outside.

00:30:36.400 --> 00:30:38.200
Yep.

00:30:38.240 --> 00:30:41.040
So you really don't want me to type here.

00:30:41.040 --> 00:30:42.940
And then now I've got the circle,
so that's great.

00:30:42.940 --> 00:30:48.120
Note I cast the outermost thing.

00:30:48.120 --> 00:30:51.160
This one is going to come back as an in.

00:30:56.000 --> 00:30:57.440
That's fine.

00:30:57.470 --> 00:30:59.450
And then... So that's the circles.

00:30:59.500 --> 00:31:01.890
That's an NSArray, really,
but it's fine to call it an id.

00:31:01.980 --> 00:31:03.710
And I'm going to count on that.

00:31:03.740 --> 00:31:04.720
You've got an extra square bracket.

00:31:04.800 --> 00:31:06.750
Yeah, I probably do.

00:31:09.890 --> 00:31:12.560
This is one of those,
you just keep typing until it works.

00:31:12.560 --> 00:31:13.640
Okay.

00:31:13.830 --> 00:31:14.860
So, yay!

00:31:15.340 --> 00:31:17.290
That shows me circles,
and if you wanted to watch

00:31:17.290 --> 00:31:19.550
me type in that horribleness,
then I'd do the other one,

00:31:19.550 --> 00:31:20.760
but I'm not going to.

00:31:20.910 --> 00:31:24.560
Um, I don't amuse myself that much.

00:31:24.780 --> 00:31:29.830
So, um, then the other example that, uh,
oh, uh,

00:31:29.870 --> 00:31:30.860
Yeah, that's OK.

00:31:30.920 --> 00:31:35.380
One other thing to notice,
by the way-- so here, in graphics,

00:31:35.520 --> 00:31:38.070
what we have is kind of this
little grayed out version

00:31:38.070 --> 00:31:40.660
of the variable formatter,
but we don't have anything.

00:31:40.720 --> 00:31:42.560
And the point for that
is what Chris said,

00:31:42.560 --> 00:31:45.410
namely that graphics is
actually not initialized yet.

00:31:45.500 --> 00:31:50.370
Graphics gets initialized in the next
line of code that we're going to execute.

00:31:50.560 --> 00:31:52.920
But this is actually calling, again,
a function.

00:31:52.920 --> 00:31:54.920
It's calling count and
something like that.

00:31:55.100 --> 00:31:59.390
So in most cases,
GDB is actually-- probably what

00:31:59.390 --> 00:32:03.120
happened was that Xcode went and
asked GDB to call this function.

00:32:03.120 --> 00:32:07.380
And var contained some junk,
whatever was on the stack at that point.

00:32:07.490 --> 00:32:11.480
And that probably crashed,
because calling selector on

00:32:11.480 --> 00:32:13.330
some junk generally crashes.

00:32:13.470 --> 00:32:16.970
But GDB is pretty good at
cleaning up that sort of crash,

00:32:16.970 --> 00:32:20.710
so as long as what goes on in
the functions you call in the

00:32:20.710 --> 00:32:24.980
formatters don't change state,
it doesn't really matter too much

00:32:24.980 --> 00:32:28.290
if they actually don't go terribly
well when you call them sometimes.

00:32:28.370 --> 00:32:30.800
Because GDB just wipes
up the stack and goes,

00:32:30.800 --> 00:32:32.600
I didn't see that, and everything's fine.

00:32:32.660 --> 00:32:33.570
So you don't have to worry too much.

00:32:33.670 --> 00:32:36.620
What you have to worry about is
stuff that might change state or

00:32:36.640 --> 00:32:38.700
stuff that might acquire resources.

00:32:38.740 --> 00:32:40.780
Because if you have a
multi-threaded program,

00:32:40.890 --> 00:32:41.890
these are going to be running.

00:32:41.900 --> 00:32:43.640
Another thread might have the resource.

00:32:43.780 --> 00:32:46.080
And that's the sort of
thing that'll go badly.

00:32:46.080 --> 00:32:50.900
But just a little minor crash,
that really won't affect too much.

00:32:50.920 --> 00:32:53.690
So OK.

00:32:54.770 --> 00:32:56.700
We want to stop somewhere else.

00:32:56.700 --> 00:33:01.940
I'll show you the bool
example that we showed before,

00:33:01.940 --> 00:33:04.100
just so that you can see
that it actually does work,

00:33:04.100 --> 00:33:09.590
and that you're really calling, you know,
any expression that's valid in your

00:33:09.590 --> 00:33:12.680
current language is what you're calling.

00:33:34.800 --> 00:33:37.140
Okay,
so here we're somewhere that has a bool,

00:33:37.140 --> 00:33:42.010
and that looks really, really ugly,
so let's make that look a little nicer.

00:33:42.180 --> 00:33:44.980
So again,
we're going to write an expression.

00:33:44.980 --> 00:33:47.400
It's coming back as a char star.

00:33:47.410 --> 00:33:52.730
And what we want is, you know,
if the variable is 1,

00:33:52.880 --> 00:33:55.770
we're going to return yes.

00:33:55.830 --> 00:33:59.920
Yeah, if it's positive,
we're going to return yes,

00:33:59.920 --> 00:34:03.270
and otherwise we're going to return no.

00:34:03.920 --> 00:34:07.550
The only funky thing about
this is that we had to put

00:34:07.550 --> 00:34:10.990
backslashes before the quotes.

00:34:11.000 --> 00:34:15.640
And the reason for that is that
this has to be passed down to GDB,

00:34:15.640 --> 00:34:18.130
and GDB has a command line
which has certain syntax.

00:34:18.220 --> 00:34:22.260
And one of the things is the
quotes delimit arguments.

00:34:22.260 --> 00:34:26.390
So if we passed unprotected quotes,
then when they got down to GDB,

00:34:26.450 --> 00:34:29.370
GDB would think that those
were argument delimiters,

00:34:29.380 --> 00:34:32.400
and the line wouldn't parse
and it'd get all ticked off.

00:34:32.400 --> 00:34:34.860
So any time that you're
passing a quote down,

00:34:34.860 --> 00:34:36.080
just backslash it.

00:34:36.190 --> 00:34:37.980
That's the only one that
you have to worry about.

00:34:38.050 --> 00:34:40.220
And again, it's one of those, you know,
you just keep typing it until

00:34:40.220 --> 00:34:41.240
it works kind of things.

00:34:44.450 --> 00:34:47.160
Chris, why aren't you working?

00:34:47.160 --> 00:34:48.400
Hello?

00:34:48.400 --> 00:34:49.840
Oh, all my typing just went away.

00:34:49.840 --> 00:34:51.880
What did that happen, Chris?

00:34:55.790 --> 00:34:57.460
So $var.

00:34:57.460 --> 00:34:59.100
Maybe?

00:34:59.100 --> 00:35:01.340
No, it's running.

00:35:01.340 --> 00:35:03.180
Question mark.

00:35:10.300 --> 00:35:11.590
I'll get it.

00:35:11.590 --> 00:35:13.440
Yeah, yeah, yeah.

00:35:13.460 --> 00:35:14.640
Got that one.

00:35:14.650 --> 00:35:18.100
Isn't typing on stage fun?

00:35:21.700 --> 00:35:22.660
Oh, I typed something wrong.

00:35:22.730 --> 00:35:25.700
I'm not going to try to type it
right on stage because I can't type.

00:35:25.700 --> 00:35:26.800
But anyway, that would show up.

00:35:26.830 --> 00:35:30.230
The other one I wanted to show you,
just to make the point,

00:35:30.230 --> 00:35:37.650
and this one I can type because
it's pretty straightforward,

00:35:37.650 --> 00:35:39.490
just to make the point that you really
are playing with power tools here,

00:35:39.490 --> 00:35:39.490
is that you could do something like this.

00:35:39.740 --> 00:35:42.350
Okay, that's a nice little expression.

00:35:42.460 --> 00:35:45.030
And then, you know, three, four, five.

00:35:45.060 --> 00:35:45.700
Okay.

00:35:45.850 --> 00:35:47.990
So, you really are changing
the state of your program,

00:35:47.990 --> 00:35:50.830
so you want to be careful about that.

00:35:52.490 --> 00:35:54.200
Okay,
so then the last thing that we want to

00:35:54.200 --> 00:36:00.460
do is show you how to do the plug-ins
where you build your own custom plug-in.

00:36:00.460 --> 00:36:03.580
And so as I say, you know,
from the percent ones,

00:36:03.730 --> 00:36:05.780
which are just information
we've already fetched,

00:36:05.910 --> 00:36:09.210
so there's no way you can screw it up,
to the curly bracket ones,

00:36:09.290 --> 00:36:12.600
which you're calling functions and
it's getting a little more dangerous,

00:36:12.600 --> 00:36:16.770
to the ones where you're actually
injecting your own code into

00:36:16.770 --> 00:36:20.210
whatever program that you happen
to run under the debugger where,

00:36:20.210 --> 00:36:22.120
you know,
you're getting really dangerous.

00:36:22.120 --> 00:36:26.150
But on the other hand,
if there's stuff that you can't

00:36:26.150 --> 00:36:30.540
get from the external level calling
functions or something like that,

00:36:30.540 --> 00:36:32.540
or if there's kind of a
formatting that you need to

00:36:32.600 --> 00:36:34.900
do which is time-consuming or,
you know,

00:36:34.900 --> 00:36:38.650
just grubbing around in some more
stuff than you want to write here,

00:36:38.690 --> 00:36:40.460
I mean, these can be valuable.

00:36:40.460 --> 00:36:43.720
For instance, the Carbon stuff was
done that way because,

00:36:43.840 --> 00:36:47.540
you know, you want to like go and look
through a window and pick out

00:36:47.610 --> 00:36:48.620
the 10 things in the window.

00:36:48.640 --> 00:36:50.680
So you can actually write in the window
list that are really interesting to you

00:36:50.680 --> 00:36:52.470
and format them up in some nice way.

00:36:52.640 --> 00:36:56.180
I mean, that's actually--would be tedious
to write in as an expression.

00:36:56.180 --> 00:36:57.730
The summary view,
you probably could write some

00:36:57.730 --> 00:37:00.360
really long thing that did it,
but you'd surely get it wrong.

00:37:00.380 --> 00:37:02.940
Writing it as the plug-in is easier.

00:37:02.940 --> 00:37:07.270
So for that,
we have to go and make a new project.

00:37:09.250 --> 00:37:11.950
So it's easiest just
to make an empty one.

00:37:11.960 --> 00:37:14.950
And I don't know, we'll call it empty.

00:37:19.300 --> 00:37:26.300
it on the desktop so I can find it.

00:37:26.300 --> 00:37:30.930
So what I want to make the--depending
on--you want to make a bundle because

00:37:30.930 --> 00:37:33.390
it's something that's going to
be loadable into your program.

00:37:33.390 --> 00:37:35.650
But if, for instance,
you're going to be doing

00:37:35.650 --> 00:37:38.580
another Carbon data formatter,
you want to make a Carbon bundle

00:37:38.640 --> 00:37:40.980
because that'll set it up so
it'll link to Carbon correctly

00:37:41.010 --> 00:37:42.400
and have all the stuff you need.

00:37:42.590 --> 00:37:45.340
If you want to view some, you know,
app kit types then you want

00:37:45.390 --> 00:37:49.720
to make a Cocoa bundle,
whatever you--whatever the

00:37:50.120 --> 00:37:52.190
point of the formatter is.

00:37:52.530 --> 00:37:58.410
So we're just going to make a Cocoa one,
a Cocoa loadable bundle,

00:37:58.410 --> 00:38:00.250
and we'll call it--

00:38:05.620 --> 00:38:08.780
So one of the things that we have to do,
as Chris said,

00:38:08.780 --> 00:38:12.260
is we have to go and set the
header search path to point

00:38:12.260 --> 00:38:16.060
into this horrible location,
which I nicely put on this thing,

00:38:16.060 --> 00:38:17.680
but I can't get it!

00:38:18.010 --> 00:38:19.100
Oh, okay.

00:38:19.100 --> 00:38:19.940
Anyway.

00:38:19.990 --> 00:38:22.390
So you get to watch me type again.

00:38:50.460 --> 00:38:51.400
That's roughly right.

00:38:51.400 --> 00:38:54.390
We'll just find it out
when it doesn't compile.

00:38:58.430 --> 00:39:03.930
So you have to add that search path,
because that's where we store this, the,

00:39:03.930 --> 00:39:03.930
the, the,

00:39:04.270 --> 00:39:07.600
The data plugin .h file.

00:39:07.600 --> 00:39:13.860
And then what you need is the plist
file and you need the C file that

00:39:13.860 --> 00:39:15.180
actually implements your code.

00:39:15.260 --> 00:39:20.800
So, because I couldn't
possibly type those here,

00:39:20.800 --> 00:39:25.380
so I have them already made.

00:39:35.400 --> 00:39:36.920
Wake up, little Firewire drive.

00:39:37.120 --> 00:39:43.250
Okay, so here's the P list.

00:39:43.260 --> 00:39:45.870
No, that's this one here.

00:39:46.540 --> 00:39:49.720
Same thing that Chris showed.

00:39:49.760 --> 00:39:52.390
We could actually,
within a given plug-in,

00:39:52.390 --> 00:39:54.690
define formatters for a whole
bunch of different types.

00:39:54.730 --> 00:39:58.070
In this case,
we're only defining one for one type.

00:39:58.090 --> 00:40:02.230
And then here's the name of the
function that we're defining,

00:40:02.280 --> 00:40:05.880
so we're just, in the same way you would
do any variable formatter,

00:40:05.970 --> 00:40:09.550
what's happening is that this code
gets inserted into the target program,

00:40:09.580 --> 00:40:13.480
it provides a bunch of functions,
and then you use the normal variable

00:40:13.480 --> 00:40:15.710
syntax to call out those functions.

00:40:15.770 --> 00:40:17.480
The one thing to be careful about,
of course,

00:40:17.480 --> 00:40:20.030
is remember that you're going to be
inserting this into whatever code

00:40:20.030 --> 00:40:22.850
you happen to run in the debugger,
so you probably want to be a little

00:40:22.850 --> 00:40:26.500
careful about choosing some gnarly name,
like my bool description's

00:40:26.580 --> 00:40:27.930
probably not a good choice.

00:40:28.020 --> 00:40:31.310
XXXX underscore some numbers and what,
I don't know.

00:40:31.410 --> 00:40:32.760
But anyway,
choose something that you're not

00:40:32.760 --> 00:40:35.180
going to collide with other symbols.

00:40:35.260 --> 00:40:39.740
And then the little ID token,
which is how we manage memory

00:40:39.740 --> 00:40:44.890
and resources for each instance
of the running data formatter.

00:40:46.200 --> 00:42:03.100
[Transcript missing]

00:42:06.600 --> 00:42:07.860
Yeah, we're AppKit.

00:42:07.860 --> 00:42:11.600
Okay, wonderful.

00:42:11.600 --> 00:42:15.840
Okay, so then you have to find
your build products,

00:42:15.840 --> 00:42:21.890
which in our case are here.

00:42:26.970 --> 00:42:33.320
And move this into the proper
place for where plugins go.

00:42:34.490 --> 00:42:42.100
Where that is, is in your home directory,
library, application support, Apple,

00:42:42.180 --> 00:42:44.410
developer tools, custom data views.

00:42:44.520 --> 00:42:45.780
So that's where the things should go.

00:42:45.840 --> 00:42:49.180
This is, by the way,
where also the custom data plist that

00:42:49.350 --> 00:42:52.680
stores the ones that you've typed in,
like the percent ones and the var ones.

00:42:52.800 --> 00:42:54.320
They're all actually stored in here.

00:42:54.320 --> 00:42:57.610
So if you want to see what you've got,
or if you want to get rid of

00:42:57.610 --> 00:43:00.740
them all at once for some reason,
go into the same location.

00:43:00.740 --> 00:43:02.810
Just delete that file.

00:43:05.700 --> 00:43:09.860
Was that there?

00:43:09.940 --> 00:43:13.570
Okay, well, anyway, that was the finder.

00:43:14.460 --> 00:43:18.730
I think you have to quit Xcode
to get it to reread these.

00:43:18.820 --> 00:43:21.100
It looked like you didn't one time,
but it's a demo,

00:43:21.100 --> 00:43:23.060
so I'm not going to try that.

00:43:23.210 --> 00:43:27.390
So let me open the two ones I had here.

00:43:36.300 --> 00:44:01.800
[Transcript missing]

00:44:08.040 --> 00:44:10.720
So what's going on here is just
the breakpoint that I wanted to

00:44:10.720 --> 00:44:14.680
stop at was set in a framework,
not in the main app, so...

00:44:15.260 --> 00:44:20.760
You have to actually have the framework
open for it to know that they're there.

00:44:23.700 --> 00:44:24.700
Let's see.

00:44:24.700 --> 00:44:26.500
I put something there.

00:44:26.580 --> 00:44:28.260
So it was overriding the default one.

00:44:28.260 --> 00:44:30.110
Again,
anything you type in at the console is

00:44:30.110 --> 00:44:31.930
going to override any built-in ones.

00:44:32.130 --> 00:44:35.660
But then when I deleted it,
it switched back to the default one,

00:44:35.660 --> 00:44:39.040
which was calling my function,
and that printed false.

00:44:39.070 --> 00:44:40.910
So pretty easy to do.

00:44:44.700 --> 00:44:47.330
Let's go back to slides.

00:44:47.400 --> 00:44:49.680
We'll go back to slides now.

00:44:49.700 --> 00:44:51.610
So, thank you, Jim.

00:44:52.400 --> 00:44:57.770
Now, we have some new ways to display
data in Xcode 1.5 and 2.0.

00:44:57.880 --> 00:45:00.800
We now display file statics
right in the variable display.

00:45:00.860 --> 00:45:05.280
So if there are any file statics-- thank
you-- if there are any file statics,

00:45:05.280 --> 00:45:07.870
we'll display the file statics turndown.

00:45:07.870 --> 00:45:10.940
If there are no file statics,
then it won't be there,

00:45:11.030 --> 00:45:13.470
or if we can't detect any in the symbols.

00:45:13.470 --> 00:45:16.340
So it's just like the
arguments and the locals.

00:45:16.340 --> 00:45:19.750
If there are no arguments or locals,
then those turndowns don't show

00:45:19.750 --> 00:45:19.750
up in the variable display.

00:45:23.490 --> 00:45:25.350
So we also have the
Global Variables Browser,

00:45:25.370 --> 00:45:27.240
which was shown on Monday.

00:45:27.280 --> 00:45:30.280
Once you browse global
variables by library,

00:45:30.330 --> 00:45:32.750
you simply go into the debug
menu to Tools and bring up

00:45:32.830 --> 00:45:35.170
the Global Variables Browser.

00:45:36.280 --> 00:45:38.340
Inside that browser,
you can then search and

00:45:38.340 --> 00:45:40.360
filter on the various fields.

00:45:40.450 --> 00:45:41.780
Multiple selection doesn't work yet.

00:45:41.920 --> 00:45:43.190
We're working on that.

00:45:43.300 --> 00:45:46.200
And then you can click in the View column
for the items they actually want

00:45:46.200 --> 00:45:48.740
to view in the variable display.

00:45:48.980 --> 00:45:51.850
So it's a good way of filtering
down from possibly hundreds or

00:45:51.960 --> 00:45:55.670
thousands of global variables that
could be in your program's space,

00:45:55.670 --> 00:45:58.300
down to just the ones
you're interested in.

00:45:59.350 --> 00:46:01.920
We also have the simple memory browser.

00:46:02.020 --> 00:46:05.340
And you can either type in addresses,
you can type in variables,

00:46:05.370 --> 00:46:09.280
you can also type in some expressions,
which Jim will probably show us.

00:46:10.020 --> 00:46:13.380
So let's get Jim back up here for
file statics and global memory.

00:46:13.380 --> 00:46:15.560
Let's have this one again.

00:46:22.290 --> 00:46:25.430
Okay, so in this case, you know,
of course,

00:46:25.530 --> 00:46:30.130
we're a nice object-oriented application,
so of course we have no

00:46:30.130 --> 00:46:31.750
globals and almost no statics.

00:46:31.940 --> 00:46:34.490
So actually constructing the demo
is a little bit hard because there

00:46:34.500 --> 00:46:41.530
really wasn't much interesting,
but in any case, I can find someplace.

00:46:41.570 --> 00:46:43.700
So let's see.

00:46:48.900 --> 00:46:59.100
[Transcript missing]

00:47:07.290 --> 00:47:08.740
No, well, we stopped there instead.

00:47:08.740 --> 00:47:09.700
That's okay.

00:47:09.700 --> 00:47:13.810
So if you want to see, well,
this one doesn't have any statics,

00:47:13.900 --> 00:47:19.610
but if you want to see globals, again,
there's nothing here right now, but...

00:47:19.700 --> 00:49:34.600
[Transcript missing]

00:49:35.100 --> 00:49:37.430
So that's that.

00:49:37.440 --> 00:49:39.960
Yeah, and then statics just
show up under statics.

00:49:40.040 --> 00:49:46.070
I can hit the other breakpoint,
and then I can find statics for you.

00:49:46.400 --> 00:49:50.430
So this one actually has some statics.

00:49:50.570 --> 00:49:51.950
They're just listed
under the file statics.

00:49:52.050 --> 00:49:54.390
So these are the ones that are
defined statics to the file,

00:49:54.390 --> 00:49:56.160
and they'll just show
up all automatically.

00:49:56.160 --> 00:49:58.400
You don't need to pick
them or anything like that.

00:49:58.430 --> 00:49:59.290
So that's that.

00:49:59.500 --> 00:50:03.870
And then the third new thing that
I was going to show was that we

00:50:03.890 --> 00:50:06.680
now have a little memory browser.

00:50:06.680 --> 00:50:06.680
So,

00:50:07.060 --> 00:50:10.480
the memory browser,
it'll view memory at whatever address.

00:50:10.830 --> 00:50:17.410
So for instance, like $R3 here,
you can type in addresses,

00:50:17.410 --> 00:50:20.080
you can type in, you know,
any expression,

00:50:20.080 --> 00:50:26.730
$R3 normally stores the object, but,
yeah, I don't know, probably an object,

00:50:26.730 --> 00:50:28.440
I can't really tell.

00:50:28.830 --> 00:50:32.160
The other thing you can do is, you know,
if you have accessors which are

00:50:32.160 --> 00:50:35.440
pulling out stuff and you want
to see the stuff at the accessor,

00:50:35.440 --> 00:50:40.910
like for instance, you know,
we pull out the document here.

00:50:41.310 --> 00:50:47.070
"So, we could just say self...

00:50:50.200 --> 00:50:52.340
Draw a document,
and it's going to resolve it

00:50:52.440 --> 00:50:55.410
to whatever the address is,
and then print it.

00:50:55.420 --> 00:50:56.420
It doesn't stay live.

00:50:56.420 --> 00:50:58.200
It resolves it to the address,
and then it prints the address.

00:50:58.200 --> 00:51:00.970
So if you wanted, you know,
to track a location as it changed,

00:51:00.970 --> 00:51:04.080
you'd need to reenter the
expression every time.

00:51:04.080 --> 00:51:06.830
The other thing is, you know,
you can change how much

00:51:06.830 --> 00:51:10.750
you want to display,
you know, bigger or smaller.

00:51:10.820 --> 00:51:13.680
This is a little stepper,
so you can step through pages of

00:51:13.680 --> 00:51:15.960
memory based on the size that you have.

00:51:15.960 --> 00:51:17.260
That's pretty much that.

00:51:17.530 --> 00:51:18.250
Okay?

00:51:18.260 --> 00:51:18.760
OK?

00:51:18.760 --> 00:51:19.260
All right.

00:51:19.260 --> 00:51:22.070
Let's go back to slides, please.

00:51:25.400 --> 00:51:28.170
So, new in the debug menu,
we've had to reorganize it a little bit.

00:51:28.340 --> 00:51:31.630
We have some more menu items for you,
and we want it to still be

00:51:31.630 --> 00:51:34.130
able to fit on a 10x7 screen.

00:51:36.490 --> 00:51:40.160
As we had before,
we still have Stop on C++,

00:51:40.160 --> 00:51:41.600
Catch and Throw.

00:51:41.680 --> 00:51:43.330
You can control the disassembly display.

00:51:43.500 --> 00:51:45.190
There are actually three modes there.

00:51:45.290 --> 00:51:47.990
Whenever in the default mode,
if you click on a stack

00:51:48.140 --> 00:51:51.330
frame with source,
it will just show the source.

00:51:51.440 --> 00:51:53.800
And then you can do the mixed
view as we showed you earlier.

00:51:54.060 --> 00:51:59.260
The third mode is that will show you
only the disassembly whenever you are

00:51:59.260 --> 00:52:01.260
clicked on a frame that has symbols.

00:52:01.370 --> 00:52:03.360
So if you want to stay
in disassembly mode,

00:52:03.400 --> 00:52:06.760
or you don't want to split your screen,
then you can choose that mode.

00:52:06.760 --> 00:52:08.920
And then you choose
the mode a fourth time.

00:52:09.030 --> 00:52:13.170
You choose that menu item a fourth time,
and then that would get you

00:52:13.170 --> 00:52:14.450
back to the original mode.

00:52:14.520 --> 00:52:18.600
And that's specified by a check mark
and then a dash next to the menu item

00:52:18.600 --> 00:52:20.870
to show you what state you're in.

00:52:21.950 --> 00:52:25.640
Now you can enable and disable the
data formatters either using the

00:52:25.640 --> 00:52:30.800
contextual menu in the variable
view or in the debug menu.

00:52:30.800 --> 00:52:32.760
Under, we have the same contextual
menu that shows up in the

00:52:32.760 --> 00:52:36.740
variable view in the debug menu,
and you can select it there.

00:52:37.020 --> 00:52:39.400
Now if you're in the middle of
debugging your program and you

00:52:39.400 --> 00:52:43.900
disable the data formatters,
you can re-enable them later.

00:52:43.900 --> 00:52:46.400
If they're disabled when
your program starts,

00:52:46.400 --> 00:52:49.300
then we won't have loaded
our introspection library,

00:52:49.300 --> 00:52:52.640
and you'll only get the summary
formatters whenever you enable

00:52:52.740 --> 00:52:54.400
the data formatters again.

00:52:54.460 --> 00:52:56.480
Just something to keep in mind.

00:52:57.820 --> 00:53:01.490
We also have stop on debug
string call and debugger

00:53:01.590 --> 00:53:06.430
call right in the debug menu,
so you don't have to go to the executable

00:53:06.480 --> 00:53:08.620
inspector and switch it on there.

00:53:08.640 --> 00:53:11.690
It is still available there,
and we track the two

00:53:11.690 --> 00:53:13.900
and keep them in sync.

00:53:13.920 --> 00:53:17.950
And now you can enable guard
malloc right in the debug menu.

00:53:19.340 --> 00:53:22.300
All of these settings are
now stored per executable.

00:53:22.430 --> 00:53:26.900
Some of those settings used to
be stored per session of Xcode.

00:53:26.900 --> 00:53:31.740
So if you had two projects open
and you enabled "Stop on C++,

00:53:31.740 --> 00:53:35.930
Throw," then it would be enabled
for all of your programs.

00:53:37.580 --> 00:53:39.780
So let's talk about guard
malloc a little bit.

00:53:39.870 --> 00:53:40.700
What is it?

00:53:40.740 --> 00:53:44.200
Basically,
it causes your program to crash.

00:53:44.430 --> 00:53:46.200
And that's a feature.

00:53:48.830 --> 00:53:51.860
What it's detecting is it's
detecting memory access exceptions

00:53:52.830 --> 00:53:55.140
beyond your allocated buffers.

00:53:55.230 --> 00:53:58.290
It can also detect
access of freed buffers.

00:53:59.050 --> 00:54:03.000
What it's detecting is it's
detecting memory access exceptions

00:54:03.010 --> 00:54:05.430
beyond your allocated buffers.

00:54:05.440 --> 00:54:08.600
It can also detect
access of freed buffers.

00:54:11.450 --> 00:54:17.150
and then uses the VM system to add guard
pages around your memory allocations.

00:54:17.840 --> 00:54:21.110
Now it also overwrites freed memory
with bit patterns so you can detect

00:54:21.580 --> 00:54:23.200
when you've read that memory in.

00:54:23.250 --> 00:54:24.400
A little bit of an assistant there.

00:54:26.010 --> 00:54:28.450
However,
your code's going to run a little bit

00:54:28.450 --> 00:54:32.700
slower because it's doing extra memory
allocations in order to put guard pages

00:54:32.730 --> 00:54:34.890
around the allocations you've done.

00:54:34.920 --> 00:54:37.330
In fact,
it pushes your allocations so that

00:54:37.640 --> 00:54:39.600
they end right at the end of a page.

00:54:39.660 --> 00:54:43.290
So there could be potentially
more memory being allocated

00:54:43.290 --> 00:54:45.220
than what you've asked for.

00:54:46.820 --> 00:54:49.810
However, it's still thread-safe,
which is good because a lot of

00:54:49.850 --> 00:54:54.000
applications you're writing today have
other threads getting launched for them,

00:54:54.050 --> 00:54:57.130
either via AppKit or Carbon.

00:54:58.340 --> 00:55:01.060
So how do you use guardMalloc?

00:55:01.240 --> 00:55:02.790
Well,
it's best to use it with the debugger,

00:55:02.830 --> 00:55:05.420
because it's going to cause
your program to crash on these

00:55:05.420 --> 00:55:06.880
memory access exceptions.

00:55:07.000 --> 00:55:09.940
So then that'll give you the
backtrace that you can then go use

00:55:09.990 --> 00:55:11.670
to find out what the problem is.

00:55:11.710 --> 00:55:14.790
As we said earlier,
you enable it in the debug menu.

00:55:14.950 --> 00:55:18.710
And this is essentially causing us
to set two environment variables.

00:55:18.800 --> 00:55:22.080
The first is dyld_insert_libraries.

00:55:22.130 --> 00:55:25.060
And then we specify the
libd_malloc library.

00:55:25.180 --> 00:55:29.360
And that will cause libd_malloc
library to be inserted at runtime.

00:55:29.890 --> 00:55:32.880
The second is force-flat namespaces.

00:55:32.930 --> 00:55:35.930
If your program will not
run with flat namespaces,

00:55:35.930 --> 00:55:38.750
then you won't be able
to use guard-malloc.

00:55:39.790 --> 00:55:43.030
Again, you debug as normal,
exercise your program,

00:55:43.130 --> 00:55:46.700
and then we'll bus error,
throw up an exception,

00:55:46.700 --> 00:55:49.170
we'll catch it on your
bad memory accesses,

00:55:49.260 --> 00:55:52.810
and then you can just follow
the stack right to the problem.

00:55:54.580 --> 00:55:57.000
So GuardMalloc has a lot more options.

00:55:57.250 --> 00:56:01.300
You can put guards
against buffer underruns.

00:56:01.360 --> 00:56:04.960
You can allow allocations
over 100 megabytes.

00:56:04.960 --> 00:56:08.010
And you can do extra checking
before free and realloc calls.

00:56:10.300 --> 00:56:13.200
You can also fill allocations
with bit patterns.

00:56:13.200 --> 00:56:15.760
So you can tell which
memory you've filled up,

00:56:15.800 --> 00:56:18.240
you've allocated,
and then you can detect if

00:56:18.440 --> 00:56:20.200
you've read it by accident.

00:56:20.200 --> 00:56:23.890
And there are more options
in the libgmalic man page.

00:56:24.990 --> 00:56:27.000
These options are all
environment variables,

00:56:27.010 --> 00:56:31.520
which you can then go set using
the executable inspector and set

00:56:31.520 --> 00:56:33.870
the environment variables like
I showed you in the first demo.

00:56:33.900 --> 00:56:40.250
And now let's get Jim back up here
real quick for a guard malloc demo.

00:56:42.270 --> 00:56:43.860
So again, this one.

00:56:43.940 --> 00:56:46.470
So I'm not going to show you
anything particularly interesting,

00:56:46.470 --> 00:56:49.370
just to show you that it works
and how you turn it on and stuff.

00:56:49.430 --> 00:56:51.490
You know, this is the classic mistake.

00:56:51.500 --> 00:56:54.830
I made a buffer to hold a string,
but I forgot to allocate

00:56:54.830 --> 00:56:56.760
the space for the null,
right?

00:56:56.930 --> 00:57:03.890
And then I wrote some stuff
into it and overwrote it.

00:57:03.890 --> 00:57:03.890
So if you do this and you just run it,

00:57:06.530 --> 00:57:08.240
then, I mean, it just runs fine.

00:57:08.240 --> 00:57:09.490
Nothing happened, right?

00:57:09.610 --> 00:57:10.280
There was no mistake.

00:57:10.300 --> 00:57:13.200
But there actually was a mistake,
which as your program got

00:57:13.200 --> 00:57:16.130
more and more complicated,
you would eventually come across.

00:57:16.140 --> 00:57:21.480
So what's better is to run under
GuardMalloc when you're worried about,

00:57:21.480 --> 00:57:23.700
I have some weird behavior,
or maybe it happened upstream,

00:57:23.700 --> 00:57:25.350
I don't know where, but I can catch it.

00:57:25.420 --> 00:57:27.100
And again, that's easy to do.

00:57:27.100 --> 00:57:29.640
That's just a menu pick,
enable GuardMalloc.

00:57:29.670 --> 00:57:32.970
If you want some of the fancy options,
you need to go into the executables

00:57:32.970 --> 00:57:35.770
tab and set environment variables,
as Chris said, but we're not going to

00:57:35.770 --> 00:57:36.830
need to do that here.

00:57:36.930 --> 00:57:39.480
All we need to do is just debug it.

00:57:42.150 --> 00:57:46.260
So we get a bad access right
when we did the strcpy,

00:57:46.290 --> 00:57:49.900
which is what you expect because we
went one character past the end of the

00:57:49.900 --> 00:57:53.280
buffer we allocated to write the null,
which we hadn't allocated,

00:57:53.350 --> 00:57:55.100
and it just gets us right away.

00:57:55.270 --> 00:57:58.930
So that weird zero,
which ended up showing up in some

00:57:58.930 --> 00:58:01.660
other data structure somewhere,
you can't figure out why.

00:58:01.770 --> 00:58:03.160
You figure out why immediately.

00:58:03.160 --> 00:58:05.800
So that's what guard malloc is for.

00:58:05.810 --> 00:58:07.910
Let's go back to slides.

00:58:10.710 --> 00:58:13.140
Go back there.

00:58:13.140 --> 00:58:14.360
MIKE MCCURRY: Thanks, Jim.

00:58:14.470 --> 00:58:19.200
So with fix and continue,
which we introduced a year ago,

00:58:19.280 --> 00:58:23.600
it allows you to change your code while
you're debugging your application.

00:58:23.600 --> 00:58:26.640
You can make the changes while
you're running the application,

00:58:26.640 --> 00:58:33.140
and you can continue your
debug session without having

00:58:33.140 --> 00:58:34.590
to do a recompile and relink.

00:58:34.850 --> 00:58:38.540
So it allows for more of a
prototype style development.

00:58:38.540 --> 00:58:42.100
It's extremely useful for those
long debugging sessions whenever you

00:58:42.310 --> 00:58:45.000
have a bunch of program states set
up and you want to do some simple

00:58:45.000 --> 00:58:47.880
changes to try and fix your program.

00:58:50.430 --> 00:58:52.670
However,
it requires that you use native targets,

00:58:52.760 --> 00:58:58.060
which is the default for most new
targets that you create in Xcode.

00:58:58.110 --> 00:59:00.340
And of course, it requires GCC 3.3.

00:59:02.860 --> 00:59:07.210
Now new in Xcode 1.5 and 2.0,
we have support for fixing

00:59:07.460 --> 00:59:09.020
and supporting projects.

00:59:09.020 --> 00:59:12.460
So if your application is in one project,
and you have supporting

00:59:12.560 --> 00:59:15.530
frameworks in other projects,
you can now fix the code in

00:59:15.530 --> 00:59:19.010
those frameworks while you're
debugging your application.

00:59:19.970 --> 00:59:22.780
This requires that all of your
projects need to be built with

00:59:23.050 --> 00:59:25.910
debugging symbols enabled,
so probably just the

00:59:25.910 --> 00:59:27.900
development build style.

00:59:27.900 --> 00:59:31.890
"FiX and Continue" needs to be enabled,
and if you're using C++,

00:59:32.030 --> 00:59:34.870
you need to enable ZeroLink as well.

00:59:36.200 --> 00:59:39.050
Now, all these projects need to be
open in Xcode at the same time,

00:59:39.140 --> 00:59:43.500
so we can go find which target has
the file that you're trying to fix.

00:59:45.930 --> 00:59:46.900
So what can you fix?

00:59:46.900 --> 00:59:49.170
You can change logic,
you can add new calls,

00:59:49.360 --> 00:59:52.470
you can delete code,
you can change constants,

00:59:52.530 --> 00:59:54.740
and some other common operations.

00:59:56.110 --> 00:59:57.600
Things that won't work.

00:59:57.600 --> 01:00:03.000
You can't change the size of structures,
or class layouts, or function signatures.

01:00:03.000 --> 01:00:06.000
You can't add global and static data.

01:00:06.000 --> 01:00:10.670
And if you happen to be trying to fix
the frame that's at the top of the stack,

01:00:10.750 --> 01:00:12.500
you can't add local data.

01:00:12.560 --> 01:00:16.410
And if you do make changes
that require initialization,

01:00:16.520 --> 01:00:19.370
then you need to be--
after you do the fix,

01:00:19.370 --> 01:00:22.490
you need to make sure to move
the PC back to execute the line

01:00:22.490 --> 01:00:22.490
of code to initialize your data.

01:00:23.030 --> 01:00:25.640
Let's get Jason up here for
our "Fix and Continue." Thanks,

01:00:25.720 --> 01:00:26.500
Christopher.

01:00:26.640 --> 01:00:29.290
So, can we get the demo machine up,
please?

01:00:32.810 --> 01:00:33.700
Thank you.

01:00:33.760 --> 01:00:35.510
We're going to be looking
at the Sketch project again,

01:00:35.560 --> 01:00:36.960
because it's our favorite project of all.

01:00:37.370 --> 01:00:41.220
Christopher has split it into two parts,
a framework and an application,

01:00:41.230 --> 01:00:43.960
so that we can show the support for
the supporting projects in "Fix and

01:00:44.060 --> 01:00:45.690
Continue" that's new in this release.

01:00:45.860 --> 01:00:48.600
Unfortunately, it's not actually working
in the Tiger seed,

01:00:48.600 --> 01:00:50.700
but we're going to have
it fixed by the end.

01:00:50.700 --> 01:00:53.700
So just bear with us for now,
but it's going to be in the final Tiger.

01:00:53.700 --> 01:00:56.960
So here, you see on the screen,
we have the framework project,

01:00:56.960 --> 01:00:59.700
right here,
and we have the application project.

01:00:59.760 --> 01:01:00.680
Both of them have been built already.

01:01:00.700 --> 01:01:03.220
So we're going to launch
them in the debugger.

01:01:06.500 --> 01:01:07.600
in the little hard drive spins.

01:01:07.620 --> 01:01:10.440
Here we go.

01:01:10.440 --> 01:01:12.740
So the basic thing, we get a circle,
it's filled with blue,

01:01:12.780 --> 01:01:15.650
probably not what we actually intended,
so this is a great chance to use fix

01:01:15.770 --> 01:01:19.170
and continue to change the behavior of
the program without having to restart it

01:01:19.260 --> 01:01:23.180
and relink it and recompile and all that
other stuff that you have to do normally.

01:01:23.180 --> 01:01:25.720
So the thing that we're going
to fix is over in the framework,

01:01:25.840 --> 01:01:28.120
so over here we're
looking for SKT rectangle,

01:01:28.120 --> 01:01:30.180
which has the rectangle class.

01:01:30.180 --> 01:01:33.860
Here it is, and we have the setup
function right here.

01:01:33.860 --> 01:01:36.460
So let's set a breakpoint there.

01:01:36.500 --> 01:01:41.050
And let's draw another circle, square,
rectangle.

01:01:41.730 --> 01:01:44.300
Here we have a chance to change the
color that it's using for the fill.

01:01:44.320 --> 01:01:45.780
Right now it's setting blue.

01:01:45.790 --> 01:01:47.970
Let's change that to red.

01:01:48.340 --> 01:01:49.700
Because maybe that's what
we actually intended,

01:01:49.740 --> 01:01:52.990
because red rectangles are
what everybody needs more of.

01:01:53.130 --> 01:01:56.390
Now we're going to say
"Save it" and "Fix."

01:01:58.230 --> 01:02:01.600
"Piles the file, links succeed,
and fixed." Now,

01:02:01.670 --> 01:02:03.480
if I continued at this point,
as you can see,

01:02:03.480 --> 01:02:06.220
the PC is already past the
point where it sets the color.

01:02:06.340 --> 01:02:08.480
So even though we fixed it,
the color's already been set.

01:02:08.530 --> 01:02:11.080
We need to move the PC back a
couple of lines so it's going

01:02:11.080 --> 01:02:12.180
to set it to the new color.

01:02:12.210 --> 01:02:14.320
If we drew another rectangle after this,
it would get the new color,

01:02:14.320 --> 01:02:15.660
but we want it on this rectangle.

01:02:15.790 --> 01:02:18.100
So let's drag the PC back.

01:02:18.290 --> 01:02:22.190
Up towards setting red color,
and then continue from there.

01:02:22.300 --> 01:02:24.200
Unfortunately,
I drew a really small rectangle.

01:02:24.200 --> 01:02:26.580
Let's just disable that
breakpoint for a second.

01:02:27.450 --> 01:02:29.000
There would be a redirect if it worked.

01:02:29.040 --> 01:02:30.000
Now we have read.

01:02:30.050 --> 01:02:32.400
It's "Fix and Continue" just
like you've always seen it.

01:02:32.470 --> 01:02:34.900
But you'll notice that the application,
which we're debugging,

01:02:34.920 --> 01:02:37.680
is in a separate project from the
framework where we're "Fix and

01:02:37.680 --> 01:02:41.310
Continuing." So the supporting project
is the really exciting new thing here.

01:02:41.410 --> 01:02:44.130
One caveat that's important to
understand is that a file can

01:02:44.130 --> 01:02:45.400
belong to multiple targets.

01:02:45.510 --> 01:02:48.760
So what you have to do if you're "Fix
and Continue" a file that's in multiple

01:02:48.770 --> 01:02:51.190
targets in a supporting project,
you're going to have to give

01:02:51.190 --> 01:02:54.380
Xcode a little hint as to which
target it is you're fixing.

01:02:54.450 --> 01:02:56.360
So for instance, let's do this again.

01:02:56.470 --> 01:02:59.360
Over in the framework,
let's duplicate the target so we have two

01:02:59.360 --> 01:03:01.380
targets with all the same files in them.

01:03:03.350 --> 01:03:10.140
Duplicate it, and we'll just call it a
separate name so that it's clear.

01:03:13.350 --> 01:03:17.090
Now we have two frameworks
with the same file in it.

01:03:17.300 --> 01:03:20.100
Again, we're going to--well,
we won't stop at the breakpoint.

01:03:20.100 --> 01:03:22.390
We can fix and continue without
getting to the breakpoint.

01:03:22.520 --> 01:03:24.070
In fact, it has fewer limitations.

01:03:24.080 --> 01:03:26.260
Fix and continue when you stopped
in the middle of a function

01:03:26.440 --> 01:03:29.170
has a number of limitations on
changing that particular function.

01:03:29.220 --> 01:03:32.320
So instead let's just run in the main
event loop and do the fix from there.

01:03:32.440 --> 01:03:35.630
So instead of red color,
I think green color would

01:03:35.630 --> 01:03:37.360
be a much better color.

01:03:37.690 --> 01:03:38.680
Save it.

01:03:39.170 --> 01:03:43.200
Now when we try to fix it,
which we'll do from the debugger,

01:03:43.200 --> 01:03:44.280
Thank you.

01:03:45.120 --> 01:03:47.540
There, OK.

01:03:47.680 --> 01:03:48.520
Fix?

01:03:48.680 --> 01:03:49.640
Now we get this pop-up.

01:03:49.810 --> 01:03:53.380
And this pop-up is asking us which
target it is we're trying to fix so

01:03:53.390 --> 01:03:56.120
that it knows how to process it and
get it back into the executable.

01:03:56.210 --> 01:03:58.850
So we tell it that it's Sketch Framework.

01:03:59.330 --> 01:03:59.890
"Build succeeded.

01:04:00.000 --> 01:04:01.540
It's fixed.

01:04:01.560 --> 01:04:04.600
Now we get the green one."
One really nice feature is that once

01:04:04.680 --> 01:04:06.680
you've told it which target it is,
it's going to cache that and

01:04:06.680 --> 01:04:07.850
remember it in the project.

01:04:07.970 --> 01:04:12.840
So now if you do a different color,
we fix it again, it remembered that we're

01:04:12.840 --> 01:04:14.400
working with Sketch Framework.

01:04:14.480 --> 01:04:16.240
So you only have to actually
do the selection once,

01:04:16.290 --> 01:04:19.070
and from then on, it's just the default.

01:04:19.430 --> 01:04:20.420
and we get a brown one.

01:04:20.460 --> 01:04:22.410
So that's the new "Fix and
Continue" supporting projects.

01:04:22.430 --> 01:04:23.620
Thank you, Christopher.

01:04:23.620 --> 01:04:24.620
CHRIS FRESEN: Thanks, Jason.

01:04:24.620 --> 01:04:29.090
We can go back to slides.

01:04:32.460 --> 01:04:40.250
So now, whether it be across your cubicle
or maybe just down the hall,

01:04:40.320 --> 01:04:41.500
we bring you remote debugging.

01:04:44.340 --> 01:04:48.260
This is great for debugging
those full-screen applications,

01:04:48.260 --> 01:04:49.880
games, screen savers.

01:04:49.880 --> 01:04:55.250
In fact, some games we know have had
bugs in full-screen mode only,

01:04:55.520 --> 01:04:58.520
and so the only way they've been
able to debug these is to go to

01:04:58.590 --> 01:05:02.650
the terminal on another machine,
SSHN, and fire up GDB.

01:05:02.850 --> 01:05:06.180
So they don't have the advantage
of the graphical debugger.

01:05:07.140 --> 01:05:10.120
It's also great for
debugging event handling.

01:05:10.120 --> 01:05:14.990
So you're trying to drag the mouse,
and you want to debug at the same time.

01:05:15.880 --> 01:05:18.720
Now what happens normally is,
Xcode's going to have to come

01:05:18.720 --> 01:05:20.520
up if you've hit a breakpoint.

01:05:20.550 --> 01:05:25.200
And now you aren't going to be able to
move the mouse anymore in your program.

01:05:25.390 --> 01:05:27.970
So, with remote debugging,
you can now continue to use the

01:05:28.090 --> 01:05:30.200
mouse as you debug your application.

01:05:32.960 --> 01:05:37.100
And it supports nearly
all of Xcode's features.

01:05:37.130 --> 01:05:40.380
In your seed,
it doesn't support "Fix and Continue."

01:05:41.270 --> 01:05:43.580
should be pretty easy to fix.

01:05:43.760 --> 01:05:47.260
For now, one thing you won't be able to
do is you won't be able to send

01:05:47.260 --> 01:05:49.200
standard in to your remote process.

01:05:49.250 --> 01:05:52.930
So you won't be using this to debug
your command line applications

01:05:53.320 --> 01:05:55.270
remotely on another machine.

01:05:56.990 --> 01:06:00.300
There's a little bit of
setup for remote debugging.

01:06:00.370 --> 01:06:02.200
You need two machines, of course.

01:06:02.360 --> 01:06:06.640
And remote login, SSH login,
needs to be enabled

01:06:06.640 --> 01:06:08.800
on the remote machine.

01:06:10.220 --> 01:06:13.590
Now you need to share the build products,
especially if you built with ZeroLink.

01:06:13.660 --> 01:06:18.530
That's because ZeroLink's looking
for the other .Os that it's created

01:06:18.600 --> 01:06:20.360
A specific path.

01:06:20.390 --> 01:06:23.150
So if you're using a
network home directory,

01:06:23.270 --> 01:06:24.840
that's quite easy.

01:06:24.840 --> 01:06:29.070
Both machines will have access to the
build products with the same path.

01:06:29.170 --> 01:06:33.400
If you're using AFP to share
from one machine to the other,

01:06:33.400 --> 01:06:38.780
then you might have to use symbolic
links in order to fix up the path so that

01:06:38.780 --> 01:06:41.750
it's the same access on both machines.

01:06:41.840 --> 01:06:44.320
Note that finder aliases
won't work currently,

01:06:44.320 --> 01:06:44.320
so you'll need to use symbolic links.

01:06:46.360 --> 01:06:49.570
To enable remote debugging,
you bring up the executable inspector,

01:06:49.660 --> 01:06:53.040
you check the debug
executable remotely with SSH,

01:06:53.190 --> 01:06:56.440
and then you fill in the host text
field with the user name on the remote

01:06:56.440 --> 01:07:01.300
machine that you're going to log in as,
and either an IP address or a host name.

01:07:01.320 --> 01:07:05.790
Now you need to make sure that the user
that you're logged in as is the same

01:07:05.790 --> 01:07:08.340
user that's logged in at that machine.

01:07:08.340 --> 01:07:12.700
Otherwise you won't have permission
to write to the Windows server,

01:07:12.700 --> 01:07:15.670
and your graphical
application will not launch.

01:07:16.820 --> 01:07:22.770
So we're using SSH public
key authentication.

01:07:23.650 --> 01:07:28.220
You need to set up your public and
private keys on the remote machine.

01:07:28.220 --> 01:07:32.590
Xcode is SSH-agent aware,
so you can encrypt your private key,

01:07:32.670 --> 01:07:35.640
and it's not a big hassle to
enter your passphrase once,

01:07:35.740 --> 01:07:39.540
and then you don't need to
enter it again until you quit

01:07:39.610 --> 01:07:41.960
Xcode or reboot the machine.

01:07:43.000 --> 01:07:45.100
There's some documentation
on how to set all of this up,

01:07:45.130 --> 01:07:47.820
because we don't expect you to pick it
up the first time you run through it.

01:07:47.950 --> 01:07:49.890
In fact, we're not going to run
through the whole setup here.

01:07:49.900 --> 01:07:52.740
And that documentation is called
"Remote Debugging with Xcode,"

01:07:52.900 --> 01:07:57.900
and that's at connect.apple.com,
Reference Library, and Tools.

01:07:58.840 --> 01:08:02.240
Now let's bring up Jim for a
quick demo of remote debugging.

01:08:02.260 --> 01:08:05.640
Quick, because we're running out of time.

01:08:05.770 --> 01:08:08.270
So let's start over here.

01:08:16.910 --> 01:08:20.460
So we have one already set up.

01:08:20.460 --> 01:08:26.910
Let me just open up the application and
the framework that goes along with it.

01:08:29.890 --> 01:08:32.400
So this machine is another G5.

01:08:32.400 --> 01:08:35.110
This is the one we're working on here.

01:08:36.100 --> 01:08:37.060
I just want to debug.

01:08:37.080 --> 01:08:39.880
I'm going to set-- OK.

01:08:39.960 --> 01:08:43.840
So the first thing you have to
see is this is the Sketch.app.

01:08:43.920 --> 01:08:47.050
That's the main project,
and I need to make sure that

01:08:47.050 --> 01:08:49.600
the current executable is
set up for remote debugging.

01:08:49.600 --> 01:08:53.160
That's what I have to do
on the host machine side.

01:08:53.520 --> 01:08:56.280
So there's that nice little
Edit Active Executable.

01:08:56.280 --> 01:08:57.900
You can get up to here.

01:08:57.900 --> 01:08:59.770
Look in the debugging tab.

01:08:59.900 --> 01:09:04.130
So you check this checkbox,
Debug Executable Remotely via SSH.

01:09:04.160 --> 01:09:10.010
You have to type in the host and
username and IP address of the host.

01:09:10.050 --> 01:09:11.220
And that's all.

01:09:11.220 --> 01:09:12.460
I have to get that right.

01:09:12.520 --> 01:09:13.820
You had to set up the SSH.

01:09:13.820 --> 01:09:15.960
I'm not going to show you that,
because that would involve typing.

01:09:15.960 --> 01:09:17.920
And you saw how that worked last time.

01:09:17.920 --> 01:09:20.740
So we're not going to do that.

01:09:20.820 --> 01:09:25.370
OK, but then once that's set up,
then it's just a matter of debugging.

01:09:26.360 --> 01:09:29.240
It's going to ask me for my
SSH password because I don't

01:09:29.250 --> 01:09:31.800
have an SSH agent running,
and I don't have any of the freeware

01:09:31.800 --> 01:09:35.750
that does SSH and passes it down
to applications or shareware.

01:09:35.760 --> 01:09:37.330
But it'll only ask me once.

01:09:37.590 --> 01:09:39.960
Once I've typed it in,
if I debugged again,

01:09:39.960 --> 01:09:45.880
it wouldn't ask me again because it sets
up an SSH agent itself and then uses

01:09:45.880 --> 01:09:48.400
that agent for the rest of the session.

01:09:48.400 --> 01:09:51.970
So we'll wait a little bit.

01:09:52.030 --> 01:09:54.900
OK, can you switch to this
machine for just one second?

01:09:59.210 --> 01:10:01.800
So just to prove to you that it is here,
it's running,

01:10:01.800 --> 01:10:08.120
it's running under the debugger, you can,
you know, do whatever, set, and...

01:10:12.000 --> 01:10:12.600
That's interesting.

01:10:12.600 --> 01:10:14.500
OK.

01:10:14.580 --> 01:10:15.330
Hit breakpoints over here.

01:10:15.450 --> 01:10:18.270
So let's go back to this one for a sec.

01:10:21.030 --> 01:10:24.090
So see, I hit some nice breakpoint,
now I'm here,

01:10:24.100 --> 01:10:26.640
I can step around or whatever.

01:10:26.640 --> 01:10:30.450
The one thing that we saw here was,
you know, what I wanted to do was,

01:10:30.450 --> 01:10:35.200
I was stroking out a rectangle and
I wanted to actually get away from,

01:10:35.210 --> 01:10:40.440
you know, watch the mouse events as I was
stroking out the rectangle over here.

01:10:40.440 --> 01:10:43.150
But one of the things that's
kind of inconvenient is,

01:10:43.150 --> 01:10:46.260
you know, okay,
so I click down and then it was great.

01:10:46.340 --> 01:10:48.880
I stopped immediately at
the mouse up event here,

01:10:48.880 --> 01:10:51.380
which is what you see,
the event is mouse down,

01:10:51.470 --> 01:10:52.720
mouse down event rather.

01:10:52.870 --> 01:10:55.490
But now, you know, this mouse,
I've got to like, you know,

01:10:55.650 --> 01:10:58.320
put a sock full of rice on the mouse
to hold the mouse button down and then

01:10:58.430 --> 01:11:01.440
slowly move it and then take the sock
off for the mouse button up or whatever.

01:11:01.440 --> 01:11:03.750
There's actually some,
one thing that's really neat that

01:11:03.750 --> 01:11:06.450
you can use in the universal access
stuff which can make this kind

01:11:06.510 --> 01:11:09.800
of event level remote debugging,
which is, that's what remote debugging,

01:11:09.870 --> 01:11:12.790
if you're, full screen games and then
for regular applications,

01:11:12.830 --> 01:11:14.890
just like, you know,
I have a tracking loop and I want

01:11:14.890 --> 01:11:17.500
to debug through a tracking loop,
you know, how do I do that,

01:11:17.740 --> 01:11:20.200
then there's one thing that
I want to show you that will

01:11:20.200 --> 01:11:21.240
make that that more convenient.

01:11:21.350 --> 01:11:23.840
So let's go back over here.

01:11:25.100 --> 01:11:33.140
So what you can do is,
if you go to Universal Access in

01:11:33.140 --> 01:11:37.700
System Preferences and turn
on the Mouse Keys feature,

01:11:37.810 --> 01:11:41.320
"I have universal access
in the mouse keys.

01:11:41.320 --> 01:11:45.500
So you turn that on and then
what that does is that makes the

01:11:45.500 --> 01:11:49.380
keys into the mouse movement,
but one of the really cool things is that

01:11:49.580 --> 01:11:53.280
it has separate keys for the mouse down,
not mouse click, but just mouse down.

01:11:53.430 --> 01:11:54.660
That's the zero key.

01:11:54.660 --> 01:11:58.620
And then the five key is the
mouse up and then the arrow

01:11:58.620 --> 01:12:00.600
keys are the movement keys.

01:12:00.680 --> 01:12:02.800
So if we switch back
over to this machine,

01:12:02.800 --> 01:12:04.170
oh we didn't ever go here.

01:12:04.200 --> 01:12:04.600
Okay.

01:12:04.600 --> 01:12:09.410
So I hit mouse down here and
see I've broken the mouse down.

01:12:09.420 --> 01:12:11.270
And then if I continue, I can

01:12:12.130 --> 01:12:15.210
And then,
I can click and get the mouse move and,

01:12:15.210 --> 01:12:18.680
you know,
continue and keep getting the mouse move.

01:12:18.680 --> 01:12:20.860
And I can go and I can, you know,
have both hands and I don't have to worry

01:12:20.860 --> 01:12:22.330
about holding down the mouse button.

01:12:22.380 --> 01:12:24.860
And then eventually, you know,
when I get to the point where

01:12:24.860 --> 01:12:28.830
I want to make the rectangle,
I have to continue, of course,

01:12:28.830 --> 01:12:32.090
and I can finally click the 5 and
that's when I get the mouse up.

01:12:32.100 --> 01:12:35.440
So that's, that, that'll, you know,
free your hands and you don't

01:12:35.440 --> 01:12:39.060
have to get your child to come and
hold the mouse down or whatever.

01:12:39.060 --> 01:12:41.200
The one other thing that's here,
by the way,

01:12:41.210 --> 01:12:42.810
this was not one that we added.

01:12:42.820 --> 01:12:45.430
I mean, the event is an NS event
and as we were going along,

01:12:45.440 --> 01:12:46.880
it was really convenient.

01:12:46.880 --> 01:12:49.140
I wanted to see what type of
event I was getting because I was,

01:12:49.140 --> 01:12:51.740
you know, making events over here and
then looking at them over here.

01:12:51.790 --> 01:12:53.680
So again,
we just added a custom data formatter.

01:12:53.680 --> 01:12:58.580
It turns out that under the event,
one of the member elements is the

01:12:58.580 --> 01:13:02.360
underscore type that has the type
of the event and I was annoyed

01:13:02.360 --> 01:13:03.840
at having to turn that out.

01:13:03.930 --> 01:13:05.960
So I just put it up there.

01:13:05.960 --> 01:13:08.080
So that's just, again,
the data format is really close.

01:13:08.130 --> 01:13:08.930
Like, I want to see that now.

01:13:09.060 --> 01:13:10.060
Right.

01:13:10.060 --> 01:13:11.060
Okay.

01:13:11.060 --> 01:13:11.060
That's good.

01:13:11.060 --> 01:13:11.060
Can you go back to slides?

01:13:17.700 --> 01:13:19.830
Thanks, Jim.

01:13:19.830 --> 01:13:21.670
So now we need to finish things
up so we can take some of

01:13:21.670 --> 01:13:22.740
your questions really quick.

01:13:22.890 --> 01:13:23.960
This is the reference library.

01:13:24.050 --> 01:13:26.400
There's remote debugging in Xcode,
which we talked about earlier.

01:13:26.550 --> 01:13:31.240
There's a document on "Fix and
Continue." There's debugging with GDB,

01:13:31.380 --> 01:13:35.180
which is more in-depth than GDB,
command line commands.

01:13:35.180 --> 01:13:38.600
And of course we have Xcode Help,
which is built right

01:13:38.600 --> 01:13:40.220
into the application.

01:13:40.220 --> 01:13:42.580
It's a great resource to go look at.

01:13:42.650 --> 01:13:44.490
We encourage you to do that.

01:13:44.490 --> 01:13:44.570
And now who to contact?

01:13:44.570 --> 01:13:44.570
Matthew Formica.