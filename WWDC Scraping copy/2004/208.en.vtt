WEBVTT

00:00:12.100 --> 00:00:15.860
that you're seeing revealed for
the first time at this conference.

00:00:15.880 --> 00:00:17.750
We're going to describe
what those developments are,

00:00:17.750 --> 00:00:20.450
review some of the things that
you've seen in previous sessions,

00:00:20.460 --> 00:00:22.080
and amplify on them as well.

00:00:22.080 --> 00:00:25.600
We're also going to preview some
of the more in-depth technical

00:00:25.600 --> 00:00:29.100
sessions that follow mostly tomorrow,
and I'll be directing you to

00:00:29.190 --> 00:00:31.880
what those sessions are and
what content they'll contain.

00:00:31.880 --> 00:00:35.660
So this is the omnibus
for QuickTime in Tiger.

00:00:35.660 --> 00:00:38.880
What you'll learn is what
QuickTime offers to you,

00:00:39.190 --> 00:00:43.970
the application developer for
media services that you can use.

00:00:44.300 --> 00:00:47.030
will give you some examples of
applications that already use

00:00:47.100 --> 00:00:50.420
QuickTime so you can get some ideas
of how you can use it as well.

00:00:50.460 --> 00:00:53.930
Talk in depth about what's new and
improved and for the first time

00:00:53.930 --> 00:00:58.080
on any stage we'll talk in depth
about how you can take advantage of

00:00:58.080 --> 00:01:03.010
new ways to use QuickTime in both
Carbon and Cocoa apps starting in Tiger.

00:01:03.680 --> 00:01:07.080
Where does QuickTime fit
in on Mac OS X platform?

00:01:07.120 --> 00:01:10.020
You've seen several versions
of the architecture diagram for

00:01:10.020 --> 00:01:15.150
the entire OS this week already,
and you've seen QuickTime mostly among

00:01:15.270 --> 00:01:18.780
the imaging modules in that diagram.

00:01:18.940 --> 00:01:22.350
Here I've blown up a portion of that
architecture diagram to show you that

00:01:22.760 --> 00:01:25.280
QuickTime sits on top of imaging,
video,

00:01:25.280 --> 00:01:27.790
and audio services on the platform.

00:01:28.020 --> 00:01:33.140
It's an integration layer that gives
you access to digital media services,

00:01:33.140 --> 00:01:37.060
and it in turn makes use of
these lower-level services that

00:01:37.060 --> 00:01:39.110
also have APIs that you can use.

00:01:39.380 --> 00:01:40.940
and other companies.

00:01:41.250 --> 00:01:43.780
To amplify, what does QuickTime offer?

00:01:43.780 --> 00:01:45.460
Not just playback.

00:01:45.460 --> 00:01:47.080
Most of the time when you
come to a conference like

00:01:47.080 --> 00:01:49.210
this and you see QuickTime,
we're going to play you

00:01:49.210 --> 00:01:50.400
really cool content.

00:01:50.510 --> 00:01:53.750
This session goes beyond that
to show that the services that

00:01:53.810 --> 00:01:55.670
QuickTime offers are complete.

00:01:55.840 --> 00:01:57.590
It's a full media architecture.

00:01:57.800 --> 00:02:02.270
Creation of media, editing of media,
capture from external devices,

00:02:02.270 --> 00:02:06.230
and delivery via the web, via streaming,
via CD or DVD ROM.

00:02:06.650 --> 00:02:08.990
QuickTime offers all of that.

00:02:09.810 --> 00:02:14.630
Now, from time to time we get into
discussions about what we mean when we

00:02:14.630 --> 00:02:18.370
say QuickTime because QuickTime actually
has been around for a while.

00:02:18.370 --> 00:02:22.920
It was introduced in early 1991,
originally available for

00:02:23.010 --> 00:02:25.380
system Mac OS 607 and system 7.

00:02:25.490 --> 00:02:29.250
I just had to check with Jim because
I'm never sure about which 6 it was.

00:02:29.250 --> 00:02:31.450
But in fact it was 607.

00:02:31.460 --> 00:02:36.920
Over the years the term QuickTime has
been applied to several different things.

00:02:36.920 --> 00:02:39.020
I've got a list of what
some of them are now.

00:02:39.380 --> 00:02:41.490
QuickTime is in fact an end user product.

00:02:41.970 --> 00:02:44.790
QuickTime Pro which is
available from Apple's website.

00:02:44.790 --> 00:02:45.680
You can buy from there.

00:02:45.750 --> 00:02:50.010
QuickTime is also a media
container format known as the

00:02:50.010 --> 00:02:52.580
QuickTime movie file format.

00:02:52.840 --> 00:02:56.160
And in fact it's achieved great
success in the industry as

00:02:56.160 --> 00:03:00.090
the basis for the MPEG-4 file
format and related file formats,

00:03:00.210 --> 00:03:01.290
3G as well.

00:03:01.310 --> 00:03:01.420
So, let's get started.

00:03:01.460 --> 00:03:03.000
Container format.

00:03:03.000 --> 00:03:05.920
We can put video and audio in
there and some other things too.

00:03:06.420 --> 00:03:08.540
QuickTime is also a media solution.

00:03:08.950 --> 00:03:10.900
There are several products
that work together.

00:03:11.280 --> 00:03:15.480
QuickTime Pro, QuickTime Broadcaster,
QuickTime streaming server and

00:03:15.480 --> 00:03:18.870
the QuickTime plug-in for the
internet browsers that allow you

00:03:18.930 --> 00:03:20.440
to produce and deliver media.

00:03:20.440 --> 00:03:25.020
But what we're talking about specifically
in this session is the technology that

00:03:25.020 --> 00:03:29.200
you can use in your applications to
put media services to work for you.

00:03:29.220 --> 00:03:31.300
There are several sets of
APIs that are available.

00:03:31.300 --> 00:03:34.800
APIs, C APIs that QuickTime has
offered over the years and you

00:03:34.800 --> 00:03:36.570
see some of their names here.

00:03:36.580 --> 00:03:42.580
Movie Toolbox, set of high level APIs for
playing and editing media.

00:03:42.630 --> 00:03:47.010
Image Compression Manager allows
you to compress and decompress

00:03:47.130 --> 00:03:49.380
still images or sequences of images.

00:03:49.440 --> 00:03:51.640
And a number of other
component APIs as well,

00:03:51.680 --> 00:03:55.260
some of which I'll talk
about later in the session.

00:03:56.230 --> 00:03:59.040
will be a theme that I'll come back to.

00:03:59.080 --> 00:04:01.480
Actually the themes of this
session if you must know are

00:04:01.480 --> 00:04:02.640
what would they say we were?

00:04:02.780 --> 00:04:06.180
They were classification and reordering.

00:04:06.370 --> 00:04:09.300
So every time you hear something
that relates to classification and

00:04:09.300 --> 00:04:12.000
reordering if you could make some
sort of sign that you're still awake

00:04:12.100 --> 00:04:15.420
just that would be good for me because
it is 5 o'clock on Wednesday and

00:04:15.420 --> 00:04:17.300
this is a tough slot to fill.

00:04:17.300 --> 00:04:21.590
But anyway this session is about
the API so with no further ado let's

00:04:21.590 --> 00:04:26.180
talk about QuickTime APIs at work
in existing applications today.

00:04:26.200 --> 00:04:30.680
So on demo one I have one of my
favorite applications particularly

00:04:30.680 --> 00:04:33.380
when I'm away from home,
Mail.

00:04:33.380 --> 00:04:34.800
Mail is a mail application.

00:04:34.800 --> 00:04:36.200
It does wonderful stuff.

00:04:36.230 --> 00:04:41.250
It allows you to find your email
messages to file them and to read them.

00:04:41.290 --> 00:04:44.820
But one of the other things that
Mail does is it allows you to exchange

00:04:44.820 --> 00:04:47.120
media from one email server to another.

00:04:47.120 --> 00:04:53.220
If I could have demo one up
please that would be handy.

00:04:53.220 --> 00:04:53.220
Thank you.

00:04:55.540 --> 00:04:57.640
So here I have,
what have I got in my email now?

00:04:57.640 --> 00:05:00.550
I just launched this app a minute ago.

00:05:00.750 --> 00:05:03.270
something from home.

00:05:03.270 --> 00:05:06.010
In Mail,
and in fact in a number of applications,

00:05:06.010 --> 00:05:09.920
you can put media, digital media,
in line with other content.

00:05:09.920 --> 00:05:13.440
Mail uses the QuickTime APIs in
order to play video and audio.

00:05:13.910 --> 00:05:18.080
Here I have, let's see, what do we got?

00:05:21.750 --> 00:05:22.660
That's nice, thank you.

00:05:22.830 --> 00:05:26.980
I'll be home soon kids, don't worry.

00:05:26.980 --> 00:05:30.250
Well, that's just one example of an
application that allows you to embed

00:05:30.250 --> 00:05:32.140
media together with other content.

00:05:32.310 --> 00:05:36.020
If you have a document-based
application and you want to use digital

00:05:36.080 --> 00:05:38.910
media together with other content,
use QuickTime.

00:05:38.980 --> 00:05:40.160
It's a perfect solution.

00:05:41.920 --> 00:05:46.500
Let's see, another application that uses
digital media is Keynote.

00:05:46.500 --> 00:05:51.090
Keynote goes a few steps beyond, however,
what an application like Mail does.

00:05:51.240 --> 00:05:54.670
Sure enough,
I can create a new presentation

00:05:54.670 --> 00:05:59.200
in Keynote and I can take some
digital media that I happen to have

00:05:59.300 --> 00:06:04.400
handy and I can drop it in there
and I can play my digital media

00:06:04.400 --> 00:06:07.040
content inside my presentation.

00:06:07.130 --> 00:06:10.080
But this is actually not

00:06:10.700 --> 00:06:12.720
All that remarkable,
this has been done in a number of

00:06:12.720 --> 00:06:15.200
applications for a number of years.

00:06:15.200 --> 00:06:18.100
Keynote takes it quite
a few steps beyond.

00:06:18.150 --> 00:06:21.810
What I would actually like to do
here is create a new presentation

00:06:22.420 --> 00:06:26.600
and this time I want to choose
one of those interesting themes,

00:06:26.600 --> 00:06:31.790
the Blackboard theme,
and I want to take that same movie

00:06:31.790 --> 00:06:34.020
that I put on my other slide.

00:06:34.500 --> 00:06:40.870
and let's make this a blank master and
I think what I want to do here is to make

00:06:40.870 --> 00:06:49.060
my movie occupy the entire slide let's
see that would be 1260 by 768 and I want

00:06:49.170 --> 00:06:55.750
that positioned at zero zero alright
so there I now have a full screen uh...

00:06:55.750 --> 00:06:58.370
slide with a movie in the background

00:07:00.100 --> 00:07:18.700
[Transcript missing]

00:07:24.270 --> 00:07:28.300
The Red-Tailed Hawk.

00:07:28.330 --> 00:07:32.570
This Red-Tailed Hawk has been showing up
in our backyard for the last week or so.

00:07:32.570 --> 00:07:34.340
And one morning while
I was drinking my coffee,

00:07:34.340 --> 00:07:35.000
there it was.

00:07:35.000 --> 00:07:37.550
So I just grabbed my DV25
camera and there you go,

00:07:37.550 --> 00:07:40.750
live from my backyard actually,
stored the Red-Tailed Hawk.

00:07:41.460 --> 00:07:44.480
What I really want to do
here is have some bullets.

00:07:44.480 --> 00:07:47.810
I'm going to cover the habitat
of the Red-Tailed Hawk.

00:07:47.810 --> 00:07:50.060
I'm going to cover the markings.

00:07:50.060 --> 00:07:53.780
I did very well in the fifth grade,
by the way, in case you can't tell.

00:07:53.780 --> 00:07:57.650
And I want to cover the
call of the Red-Tailed Hawk.

00:07:57.680 --> 00:08:03.810
And I want to give these items, oh,
I want to give them some...

00:08:04.800 --> 00:08:15.000
[Transcript missing]

00:08:15.590 --> 00:08:19.460
but the video you know it's kinda bright
the sun was shining the day that I shot

00:08:19.460 --> 00:08:23.840
this video so what I really want to
do is to dial down the opacity of that

00:08:23.840 --> 00:08:29.360
video because I really want that to
be in the background then when I play

00:08:29.360 --> 00:08:32.650
my video it's going to show up like this

00:08:34.150 --> 00:08:37.780
You can see in the lower left
there a preview of my presentation.

00:08:37.780 --> 00:08:40.330
Then when I click,
my bullets are just going to

00:08:40.330 --> 00:08:43.760
come in right over my video,
which plays in the background.

00:08:43.770 --> 00:08:46.200
But you really want to
see this full screen,

00:08:46.200 --> 00:08:47.180
don't you?

00:08:58.300 --> 00:09:13.600
[Transcript missing]

00:09:14.030 --> 00:09:16.840
doesn't have to be the WWDC.

00:09:16.910 --> 00:09:18.560
Now we get it.

00:09:18.640 --> 00:09:21.880
Now when I play my presentation Oh,
I got it wrong.

00:09:21.930 --> 00:09:24.340
I'll show it to you downstairs
in the QuickTime lab,

00:09:24.400 --> 00:09:28.490
but this movie will play full screen
with the bullet points dropping down

00:09:29.320 --> 00:09:32.180
with full resolution and full frame rate.

00:09:32.180 --> 00:09:35.940
So Keynote goes further than an
application that simply embeds media.

00:09:36.190 --> 00:09:39.390
It combines digital media with
other features that it has.

00:09:39.700 --> 00:09:41.820
It's support for transparency.

00:09:41.820 --> 00:09:44.800
It's support for builds and transitions.

00:09:44.800 --> 00:09:48.130
Digital video and audio work
seamlessly with that in Keynote and

00:09:48.130 --> 00:09:49.870
it's all done by means of QuickTime.

00:09:49.870 --> 00:09:55.180
Okay, back to slides please.

00:09:57.410 --> 00:10:00.240
So I hope I've convinced you that
it's worthwhile for you to use

00:10:00.320 --> 00:10:03.700
QuickTime APIs in your applications
to gain that sort of feature

00:10:03.700 --> 00:10:05.800
that I demonstrated just now.

00:10:05.850 --> 00:10:10.890
If I had managed to convince you
of that only two years ago at WWDC,

00:10:10.890 --> 00:10:14.020
your application would have gained
value without you having to do

00:10:14.130 --> 00:10:16.400
anything between then and now.

00:10:16.430 --> 00:10:20.790
Because the APIs that you would have put
to work in your application then would

00:10:20.790 --> 00:10:24.950
have given you access to an increased
number of media container formats,

00:10:25.070 --> 00:10:27.960
video formats,
and audio formats as new versions of

00:10:27.960 --> 00:10:30.300
QuickTime have been released by Apple.

00:10:30.670 --> 00:10:33.560
In just the QuickTime 6
series of releases,

00:10:33.610 --> 00:10:38.500
we've added support for MPEG-4, for 3G,
for JPEG-2000.

00:10:38.520 --> 00:10:42.630
We've added support for external devices,
better support for DV,

00:10:42.800 --> 00:10:44.500
support for IIDC cameras.

00:10:44.500 --> 00:10:48.900
That's the Industrial and
Instrumentation Digital Camera Standard.

00:10:48.900 --> 00:10:52.910
I'm glad I got that right after
the failure of the keynote demo.

00:10:53.200 --> 00:11:58.500
[Transcript missing]

00:11:59.100 --> 00:12:00.240
Graphics processing.

00:12:00.300 --> 00:12:03.120
We found, and we've mentioned
several times at the show,

00:12:03.120 --> 00:12:07.360
that the graphics processor, the GPU,
that is in every machine that we sell,

00:12:07.440 --> 00:12:10.110
and also many of the machines
that are sold by other vendors,

00:12:10.110 --> 00:12:12.530
is valuable not just in the
original domain for which

00:12:12.540 --> 00:12:16.150
those things were developed,
but also for other types of applications.

00:12:16.160 --> 00:12:18.800
Finally,
what else is going on in the industry?

00:12:18.800 --> 00:12:21.970
We're noticing that you guys
writing your applications are using

00:12:21.970 --> 00:12:25.500
these application frameworks and
getting a lot of leverage from them.

00:12:25.500 --> 00:12:27.660
Nice of us to notice that.

00:12:28.780 --> 00:12:30.250
What are we going to
do in response to that?

00:12:30.330 --> 00:12:31.530
I'll tell you in a moment.

00:12:35.340 --> 00:12:37.280
Okay.

00:12:37.360 --> 00:12:40.380
Tough crowd.

00:12:40.420 --> 00:12:41.070
All right.

00:12:41.180 --> 00:12:42.700
So let's go through
those topics one by one.

00:12:42.700 --> 00:12:44.560
What's happening with video?

00:12:44.710 --> 00:12:48.040
By way of analogy,
I intend to explain to you how video

00:12:48.040 --> 00:12:52.280
encoding has become more complex and what
we need to do in QuickTime to be able

00:12:52.590 --> 00:12:54.740
to support more complicated encoding.

00:12:54.740 --> 00:12:56.290
So I can't get you to respond.

00:12:56.370 --> 00:12:57.880
I can't make it interactive.

00:12:57.910 --> 00:12:58.770
Let's play a game.

00:12:59.120 --> 00:13:01.970
We're going to play which
one of these is different.

00:13:03.050 --> 00:13:06.350
Okay, a flip book,
by which I mean a book with each page

00:13:06.370 --> 00:13:10.380
of which has an image either printed
or drawn and as you flip through

00:13:10.550 --> 00:13:12.500
it you get the effective animation.

00:13:12.530 --> 00:13:15.390
A reel of motion picture film,
actual celluloid,

00:13:15.390 --> 00:13:17.420
they still use it in some theaters.

00:13:17.450 --> 00:13:21.220
Each frame is on the strip of film.

00:13:21.260 --> 00:13:22.530
DV25, what's that?

00:13:22.660 --> 00:13:26.500
Well, that's the most common format of
digital video supported by your

00:13:26.500 --> 00:13:30.770
DV camera that you can buy down at
Good Guys whatever guys you happen

00:13:30.780 --> 00:13:33.390
to have in the area that you live in.

00:13:33.900 --> 00:14:24.300
[Transcript missing]

00:14:26.480 --> 00:14:29.520
Now we're going to play
the advanced version.

00:14:29.520 --> 00:14:31.950
Which one is different this time?

00:14:32.850 --> 00:14:36.990
narrative, analepsis and prolepsis,
which of course are the terms for

00:14:37.340 --> 00:14:40.920
narrative flashback and flashforward.

00:14:41.940 --> 00:14:43.240
Oh, thank you.

00:14:43.270 --> 00:14:46.300
Did you just scratch your
head or did you mean to?

00:14:46.320 --> 00:14:48.750
A schedule of automobile maintenance

00:14:50.150 --> 00:14:54.040
the romantic poets by which of course
I am referring to the romantic poets

00:14:54.040 --> 00:14:59.120
in the poetic tradition as described by
Harold Bloom in his 1973 book The Anxiety

00:14:59.120 --> 00:15:04.490
of Influence in which he posited that
a young poet can actually seek to gain

00:15:04.490 --> 00:15:10.130
priority over his predecessor by means
of several tropes which he describes one

00:15:10.430 --> 00:15:16.480
of which is the trope of substitution by
substituting an earliness for a lateness.

00:15:18.060 --> 00:15:19.740
But I'm going to give
it away if I keep going.

00:15:19.860 --> 00:15:21.360
MPEG-2 video.

00:15:23.670 --> 00:15:28.810
another type of digital video MPEG-2,
another type of digital video coding.

00:15:28.810 --> 00:15:31.380
Finally, a presentation based on Keynote.

00:15:31.570 --> 00:15:33.100
Well,
I'm sure it's all clear since I belabored

00:15:33.100 --> 00:15:36.150
the point on the Romantic Poets that
what's different here is the schedule

00:15:36.360 --> 00:15:40.500
of automobile maintenance because in
that case you have a sequence of things,

00:15:40.500 --> 00:15:44.330
each of which is only dependent on
the things that have come before.

00:15:44.340 --> 00:15:48.320
You only go to have the 100,000 mile
maintenance after you've already

00:15:48.320 --> 00:15:51.180
done the 75,000 mile maintenance,
right?

00:15:51.250 --> 00:15:55.420
But these other things are sequences
in which items may have dependencies

00:15:55.420 --> 00:15:59.350
on things that come before or things
that come after or at least the

00:15:59.420 --> 00:16:02.190
Romantic Poets hoped that this was true.

00:16:05.000 --> 00:16:07.620
So if none of these analogies
was effective to you,

00:16:07.620 --> 00:16:13.570
I will appeal to your stomach since
it's getting close to dinner time.

00:16:13.960 --> 00:16:16.850
After you learn what all the sharp
implements in the kitchen are for,

00:16:16.850 --> 00:16:19.880
the Culinary Institute,
they eventually reveal to you that you

00:16:19.930 --> 00:16:24.900
do not necessarily prepare courses for
a high-class multi-course meal in the

00:16:24.900 --> 00:16:26.710
same order in which you serve them.

00:16:26.760 --> 00:16:28.280
And why is this true?

00:16:28.280 --> 00:16:30.330
They take, well,
I don't know why I never went

00:16:30.420 --> 00:16:32.960
to the Culinary Institute,
but I do know about this.

00:16:32.960 --> 00:16:36.070
The same thing is true
of modern video coding.

00:16:36.080 --> 00:16:40.800
Video frames are encoded and decoded
in not necessarily the same order in

00:16:40.800 --> 00:16:43.740
which they are intended to be displayed.

00:16:43.900 --> 00:16:45.840
And why is this a good thing?

00:16:45.840 --> 00:16:52.640
Well, it enables us to get better quality
out of comparable frame rates.

00:16:52.640 --> 00:16:54.050
Let's talk about an example.

00:16:54.050 --> 00:16:56.820
Suppose I have a sequence of
video which starts with one frame

00:16:56.820 --> 00:17:00.060
and ends with another frame,
and all of the intermediate

00:17:00.060 --> 00:17:01.850
frames are a wipe effect.

00:17:01.920 --> 00:17:04.440
It just wipes from left to right
from one image to the other.

00:17:04.450 --> 00:17:07.670
Well, if I need to encode
that sequence of frames,

00:17:07.670 --> 00:17:11.200
each frame revealing more
and more of the final image,

00:17:11.200 --> 00:17:13.670
then if I can only depend on
images that are not the same,

00:17:13.670 --> 00:17:13.840
then I can only encode the sequence
of frames that are not the same.

00:17:13.880 --> 00:17:15.880
If I can only depend on
images that have come before,

00:17:15.880 --> 00:17:18.160
with each frame,
I have to waste some of my bits, well,

00:17:18.160 --> 00:17:22.610
I have to apply some of my bits to the
portion of the final image that has

00:17:22.610 --> 00:17:24.500
become revealed as the wipe progresses.

00:17:24.500 --> 00:17:29.280
But if I have a video coding
which allows me to depend on both

00:17:29.280 --> 00:17:32.330
the first and the last frame...

00:17:32.770 --> 00:17:34.040
Well, then that's much easier.

00:17:34.320 --> 00:17:38.080
The wipe, the intermediate frames
will require much,

00:17:38.080 --> 00:17:41.150
many fewer bits in order to
code the differences between

00:17:41.200 --> 00:17:42.670
the first and the final frame.

00:17:42.710 --> 00:17:45.960
Well, that's basically how we're
achieving higher quality with

00:17:45.990 --> 00:17:47.670
comparable frame rates in video.

00:17:47.680 --> 00:17:51.390
The bad news is when we
shipped QuickTime 1.0 in

00:17:51.390 --> 00:17:57.610
1991 for System 607 and 7.0,
we did not accommodate this model for

00:17:57.610 --> 00:18:00.280
video coding in our video support.

00:18:00.280 --> 00:18:04.260
What I like to say is that there were no
master chefs working on QuickTime 1.0.

00:18:04.260 --> 00:18:08.240
They only came along later.

00:18:08.710 --> 00:18:12.240
But in QuickTime 1.0, as you can see,
we had this limitation.

00:18:12.250 --> 00:18:16.360
And this limitation was
reflected by the APIs.

00:18:16.360 --> 00:18:20.840
So you could only compress video
for which frames would be completely

00:18:20.840 --> 00:18:24.600
independent or which would only have
dependencies on frames that you had

00:18:24.600 --> 00:18:26.710
previously presented for compression.

00:18:26.890 --> 00:18:30.020
but in QuickTime 6.6,
the version that you have

00:18:30.020 --> 00:18:32.620
in your Tiger preview,
that SDK that I think they

00:18:32.620 --> 00:18:36.190
gave out earlier this week,
we finally have support for video

00:18:36.190 --> 00:18:40.450
frames whose decode order and
display order can be distinct.

00:18:40.500 --> 00:18:44.730
Now this is a great thing because
it allows us to play modern

00:18:44.730 --> 00:18:50.010
video formats such as H.264,
but it allows us to do more than that.

00:18:50.090 --> 00:18:54.420
I will say we support IP and B-frames
for those of you who are technical.

00:18:54.420 --> 00:18:58.980
The reason that this is wonderful
and amazing is that we have

00:18:59.370 --> 00:19:04.130
applied all of the richness of
the QuickTime media architecture

00:19:04.650 --> 00:19:06.410
to this type of video encoding.

00:19:06.530 --> 00:19:10.510
So let me show you over here
on demo one what I mean.

00:19:12.140 --> 00:19:16.360
Let me open up some of
my Hawk movies again.

00:19:16.400 --> 00:19:19.530
I'm going to open them up
with QuickTime Player 651,

00:19:19.530 --> 00:19:22.720
both because I want to make a
point and also because the new

00:19:22.720 --> 00:19:27.250
player that's in the tiger seed
doesn't quite run the Apple script

00:19:27.410 --> 00:19:29.180
that I'm about to run for you.

00:19:29.710 --> 00:19:36.440
and I have some H.264 encoded video
clips of the hawk in my backyard.

00:19:38.190 --> 00:19:42.440
and what I can do with these video clips
since I've got QuickTime Player Pro is

00:19:42.440 --> 00:19:49.040
I can copy these things and combine
them together into another movie.

00:19:50.560 --> 00:19:53.600
I've got different encoding
rates on these different clips,

00:19:53.660 --> 00:19:58.240
but copy and paste of these various
clips works just as you would

00:19:58.340 --> 00:20:00.300
expect it to work with QuickTime.

00:20:00.350 --> 00:20:05.210
And so now I have a single movie that
plays those three clips back to back.

00:20:06.500 --> 00:20:11.180
Well, that's pretty good,
but it doesn't quite go far

00:20:11.180 --> 00:20:14.200
enough to demonstrate the point.

00:20:14.580 --> 00:20:19.340
So let's go back to that
Apple script that I mentioned.

00:20:19.460 --> 00:20:21.780
It's called MovieMincer.

00:20:21.780 --> 00:20:23.580
And what does it do?

00:20:25.500 --> 00:20:30.800
Movie mincer is probably the most
fearsome thing to a QuickTime engineer

00:20:30.800 --> 00:20:34.240
right here at 5 o'clock on a
Wednesday afternoon at WWDC because

00:20:34.240 --> 00:20:37.800
what I'm going to do with this
script is to select at random,

00:20:37.800 --> 00:20:41.700
at random mind you,
20 two-second segments from a movie

00:20:41.700 --> 00:20:45.330
which is itself pasted together from
three separate clips and I'm going

00:20:45.380 --> 00:20:49.820
to take those two-second segments at
random and put them into another movie.

00:20:49.960 --> 00:20:52.300
I do not know what will happen,
ladies and gentlemen.

00:20:52.390 --> 00:20:54.320
I require complete silence.

00:20:56.930 --> 00:21:00.180
It's kind of fast on a G5, I like that.

00:21:00.210 --> 00:21:03.780
So now that I have pasted together, well,
AppleScript has pasted together

00:21:03.780 --> 00:21:06.780
these twenty two-segment
segments chosen at random,

00:21:06.790 --> 00:21:11.600
remember now these video frames can have
dependencies on frames that come after

00:21:11.600 --> 00:21:14.280
them or frames that come before them.

00:21:14.320 --> 00:21:17.680
And there's a very complicated
graph of dependencies if you go

00:21:17.680 --> 00:21:22.040
through the sequence of video frames
in these various H.264 movies.

00:21:22.050 --> 00:21:25.740
Now I've chosen at random where these
clips should start and stop that I've

00:21:25.850 --> 00:21:27.580
pasted from one movie to another.

00:21:27.600 --> 00:21:31.140
I don't know if I started in an
I frame or a B frame or a... I don't

00:21:31.140 --> 00:21:32.540
know what frames I started at.

00:21:32.570 --> 00:21:35.300
If I paste them all together,
how is QuickTime going to figure out

00:21:35.350 --> 00:21:38.910
how to decode these frames which may
have dependencies on other frames which

00:21:39.190 --> 00:21:43.400
may not have gotten pasted into the
destination... I don't know how it works.

00:21:43.430 --> 00:21:45.400
I'm just gonna play the movie.

00:21:45.420 --> 00:21:50.270
Every two seconds I should see another
clip from those various movies.

00:21:51.440 --> 00:21:53.950
This, I think,
is probably the most impressive

00:21:53.950 --> 00:21:57.220
technology demo that you're
going to see at the show.

00:21:57.850 --> 00:21:59.230
That's not a joke.

00:21:59.230 --> 00:22:00.880
This is really remarkable.

00:22:00.930 --> 00:22:06.800
This is live, in-place editing of this
very complex video stream.

00:22:06.800 --> 00:22:11.760
And a nice looking hawk too.

00:22:13.990 --> 00:22:17.090
All right, back to slides.

00:22:17.190 --> 00:22:21.660
So we don't just support
playback of B-frame video.

00:22:21.960 --> 00:22:24.900
We support all that other cool
stuff that I talked about earlier.

00:22:25.270 --> 00:22:28.440
Now, I was copying and pasting with the,
what do they call it,

00:22:28.610 --> 00:22:29.660
pasteboard in Mac OS X?

00:22:29.660 --> 00:22:34.900
But you can also insert
media via low-level APIs.

00:22:34.900 --> 00:22:39.700
An application like iMovie is combining
media from multiple sources by means

00:22:39.700 --> 00:22:43.880
of the very same technology that you
saw me demonstrate via copy and paste.

00:22:43.900 --> 00:22:46.660
this is really pretty cool stuff.

00:22:47.300 --> 00:22:50.070
Now in order to accomplish this,
we did have to introduce new

00:22:50.150 --> 00:22:53.080
APIs because we had the limitations
that I mentioned earlier.

00:22:53.220 --> 00:22:57.010
We have new in the image compression
manager that I mentioned earlier,

00:22:57.040 --> 00:23:00.970
we have new compression and
decompression APIs to support this

00:23:00.970 --> 00:23:07.160
notion of video frames that can have
distinct display and decode orderings.

00:23:07.620 --> 00:23:12.190
also at the level of media creation
and media access we needed new

00:23:12.190 --> 00:23:16.990
APIs to carry the data about
decode and display order as well.

00:23:17.100 --> 00:23:19.980
So at those levels there
are new APIs available.

00:23:19.980 --> 00:23:22.400
The very good news is,
and here's the other reason why

00:23:22.400 --> 00:23:27.490
I used QuickTime Player 651,
to demonstrate that the high-level

00:23:27.490 --> 00:23:31.600
APIs for movie playback and movie
editing are unchanged even though

00:23:31.600 --> 00:23:34.420
we have support for this new stuff.

00:23:34.760 --> 00:23:36.720
So the old player,
the one with the currently

00:23:36.800 --> 00:23:39.520
shipping QuickTime,
those features work with

00:23:39.520 --> 00:23:40.840
the new media content.

00:23:40.900 --> 00:23:44.070
And the same thing will be true
in your applications as well.

00:23:45.940 --> 00:23:48.800
but it's not just the APIs that
we're changing to accommodate

00:23:49.220 --> 00:23:50.820
this new cool video stuff.

00:23:50.820 --> 00:23:56.000
We're also expanding the QuickTime movie
file format to accommodate it as well.

00:23:56.080 --> 00:23:59.050
If you are doing reading of the
QuickTime movie file format,

00:23:59.050 --> 00:24:01.670
if you're opening up movie
files and reading the bytes in

00:24:01.670 --> 00:24:04.770
there and interpreting them,
you will definitely want to get on

00:24:04.840 --> 00:24:08.510
the QuickTime seed and I believe
the email address for the seed

00:24:08.570 --> 00:24:10.200
is not what I have up here.

00:24:10.490 --> 00:24:11.260
They both work.

00:24:11.260 --> 00:24:14.140
You can send to this address
if you want to be part of the

00:24:14.140 --> 00:24:19.460
QuickTime seeding program in addition to
the Tiger seeding that you have received.

00:24:19.500 --> 00:24:22.370
I recommend that you send
to this email address.

00:24:22.700 --> 00:24:25.750
Now, another point I want to make about
the QuickTime movie file format.

00:24:25.960 --> 00:24:30.770
In the preview of Tiger that you possess,
not all of the details that are

00:24:30.770 --> 00:24:33.600
changing about the QuickTime movie
file format are final.

00:24:33.600 --> 00:24:37.600
So, this preview is not for use
for production purposes.

00:24:37.600 --> 00:24:41.370
Don't go out and start making movies
that you want to put on the web and

00:24:41.400 --> 00:24:43.530
have them playable indefinitely.

00:24:43.700 --> 00:24:45.700
Use Panther for that.

00:24:49.170 --> 00:24:53.420
We will finalize those details, I'm sure,
by the time Tiger ships.

00:24:53.470 --> 00:24:55.600
Alright, what about more information?

00:24:55.600 --> 00:24:58.460
I've given you some of the technology
details but only at a very high level

00:24:58.720 --> 00:25:00.950
of what's new in video in QuickTime.

00:25:00.950 --> 00:25:02.760
Where do you go to find out more?

00:25:02.800 --> 00:25:04.530
I'm recommending two places.

00:25:04.530 --> 00:25:07.170
There is a document that
is available to you in your

00:25:07.170 --> 00:25:11.120
Tiger SEED and is also available
via the Apple Developer Connection.

00:25:11.150 --> 00:25:15.260
It's called "What's New?" in
QuickTime 6.6 Developer Preview.

00:25:15.300 --> 00:25:18.470
There are several sections of that
document that I've listed here:

00:25:18.470 --> 00:25:23.240
B-Frame Video, H.264 Codec,
and Qt Sample Table API that will give

00:25:23.240 --> 00:25:27.360
you all of the nitty-gritty details
about the APIs that I've mentioned.

00:25:27.420 --> 00:25:29.980
But if you want to see it
explained by living people,

00:25:30.040 --> 00:25:34.320
actual engineers,
come to session 217 Friday at 3:30,

00:25:34.320 --> 00:25:37.570
supporting new video formats
in QuickTime and you can get

00:25:37.570 --> 00:25:39.400
the information there as well.

00:25:42.530 --> 00:25:44.160
All right, that's what's new in video.

00:25:44.430 --> 00:25:46.400
What's happening in the
industry that's influencing us?

00:25:46.400 --> 00:25:50.700
Well,
what's happening in the area of graphics?

00:25:50.790 --> 00:25:52.160
I have a graphic.

00:25:52.240 --> 00:25:54.230
See how I tied that in?

00:25:55.600 --> 00:25:58.880
This timeline reveals in graphical
fashion that over the past 25 years,

00:25:58.960 --> 00:26:03.620
video games have improved in their
ability to engross the consumer.

00:26:07.330 --> 00:26:09.010
Yeah, I think that's what I meant.

00:26:09.100 --> 00:26:11.440
In any case,
you can see the progression here.

00:26:11.440 --> 00:26:14.790
We couldn't actually use the
images because they're copyrighted.

00:26:14.790 --> 00:26:15.210
You see.

00:26:15.300 --> 00:26:19.040
From the line drawings of asteroids to
the 3D models of modern video games,

00:26:19.160 --> 00:26:22.650
you guys must really love this
stuff because you're buying it.

00:26:23.220 --> 00:26:25.390
Now,
it's been mentioned several times during

00:26:25.390 --> 00:26:31.900
the conference that Moore's Law drives
the ability of the processor to shrink,

00:26:31.900 --> 00:26:34.600
to consume less power and go faster.

00:26:34.740 --> 00:26:39.280
Well, we found that there is actually an
ancillary law together with Moore's

00:26:39.280 --> 00:26:42.300
Law that has driven this evolution
of the graphics processing unit.

00:26:42.300 --> 00:26:44.960
It's called Atari's Law.

00:26:45.080 --> 00:26:48.100
Atari's Law states that the
game that you produced six

00:26:48.100 --> 00:26:49.850
months ago isn't good enough.

00:26:51.900 --> 00:27:42.100
[Transcript missing]

00:27:43.900 --> 00:27:47.340
My hawk friend is back again.

00:27:47.340 --> 00:27:51.220
You know, you can't tell if it's a
red-tailed hawk by its tail.

00:27:53.210 --> 00:27:54.310
if it's immature.

00:27:54.600 --> 00:27:59.280
What is QuickTime going to be doing about
all of this graphics processing power?

00:27:59.280 --> 00:28:02.510
Now these machines have
evolved this enormous organ,

00:28:02.560 --> 00:28:05.450
the GPU,
that was originally intended for one

00:28:05.450 --> 00:28:10.360
purpose but as you know from evolutionary
theory these organs often wind up being

00:28:10.360 --> 00:28:14.850
applied for other purposes as well and
the organism gains the ability to do

00:28:14.850 --> 00:28:17.520
new things by this evolutionary process.

00:28:17.520 --> 00:28:20.840
Well QuickTime is going to
take advantage of the GPU too

00:28:20.840 --> 00:28:21.450
and how are we going to do it?

00:28:22.020 --> 00:28:24.000
will get out of its way.

00:28:24.090 --> 00:28:28.690
When QuickTime was first
introduced in 1991,

00:28:28.900 --> 00:28:34.370
there wasn't a lot of help among
the services available on the OS.

00:28:34.540 --> 00:28:36.010
for playing video to the screen.

00:28:36.230 --> 00:28:38.390
There was some for sound,
but there certainly wasn't

00:28:38.400 --> 00:28:41.350
a lot of support for
synchronizing video with audio.

00:28:41.360 --> 00:28:45.170
So QuickTime did it all,
and it was necessary for it to do it all,

00:28:45.170 --> 00:28:47.160
and it was very successful at it.

00:28:47.160 --> 00:28:51.780
For years, when we talked to application
developers at conferences like this,

00:28:51.820 --> 00:28:55.780
we said, "You focus on your area of
expertise when building your app.

00:28:55.780 --> 00:28:59.650
You let us handle the digital media,
and you can integrate digital media

00:28:59.650 --> 00:29:03.440
with other content that you manage."
And that story was very good,

00:29:03.620 --> 00:29:05.640
but something happened along the way.

00:29:05.700 --> 00:29:09.600
We've noticed that you application
developers have actually gained

00:29:09.600 --> 00:29:14.320
expertise in the area of digital media,
and you want to do interesting

00:29:14.320 --> 00:29:18.090
things to process digital
media in your applications,

00:29:18.090 --> 00:29:21.360
and you don't want to turn
all of that over to us.

00:29:21.360 --> 00:29:24.870
You want what QuickTime offers to
work in combination with services

00:29:24.870 --> 00:29:28.970
that are available on the platform now
for really great graphics processing,

00:29:28.980 --> 00:29:30.840
really great audio processing.

00:29:30.890 --> 00:29:32.330
Well, we're going to make that possible.

00:29:33.900 --> 00:29:38.380
Now you can have everything that's good
about QuickTime video and even less.

00:29:40.010 --> 00:29:42.280
So, how are we going to achieve that?

00:29:42.520 --> 00:29:46.030
For video,
we have defined a new abstraction

00:29:46.600 --> 00:29:49.900
for the destination to which
video will be rendered.

00:29:49.900 --> 00:29:51.920
We're calling it the visual context.

00:29:52.270 --> 00:29:57.100
It's an abstraction and we intend there
to be several types of visual context.

00:29:57.210 --> 00:30:03.060
For Tiger, we are making it available
concretely for OpenGL textures.

00:30:03.070 --> 00:30:04.880
And so this means really great stuff.

00:30:04.880 --> 00:30:08.030
You can get all of that great
processing power that's available

00:30:08.040 --> 00:30:09.640
in the GPU applied to video.

00:30:10.090 --> 00:30:12.200
You've seen some demonstrations of it.

00:30:12.330 --> 00:30:16.610
At a high level, however,
you don't have to know anything about

00:30:17.020 --> 00:30:21.240
OpenGL textures to gain this advantage.

00:30:21.240 --> 00:30:21.240
If you use

00:30:21.640 --> 00:30:26.290
this by the way is a narrative
prolepsis if you use our

00:30:26.290 --> 00:30:28.180
high level modules the H.I.

00:30:28.180 --> 00:30:33.570
MovieView and the QT MovieView you
have the full support from them for

00:30:33.570 --> 00:30:37.870
visual context without you having to
do a thing and that basically means if

00:30:37.870 --> 00:30:41.570
you use those modules and you deploy
your application on a machine that has

00:30:41.770 --> 00:30:46.550
Quartz Extreme then you're eligible for
lots of great stuff that the GPU can

00:30:46.550 --> 00:30:52.140
do with video however if you have
the kind of application that's doing

00:30:52.160 --> 00:30:58.520
manipulations at the OpenGL level we have
low level APIs for you to use as well

00:31:00.170 --> 00:31:01.130
Where to get more information?

00:31:01.340 --> 00:31:04.390
Well,
the session is 2:15 Thursday at 2:00,

00:31:04.490 --> 00:31:07.300
Improved Video Rendering and Playback.

00:31:07.300 --> 00:31:10.100
In the What's New document
as part of your seed,

00:31:10.230 --> 00:31:13.910
look at the visual context section
and information will be there for you.

00:31:16.360 --> 00:31:17.710
All right, I said this was an omnibus.

00:31:17.810 --> 00:31:20.890
I'm going to talk about video
and audio in the same session.

00:31:20.940 --> 00:31:21.900
I can get away with that.

00:31:22.110 --> 00:31:24.790
QuickTime is a media integration layer.

00:31:24.790 --> 00:31:27.370
You don't see the core audio guys
talking about video and you won't see

00:31:27.390 --> 00:31:31.140
the core video guys talking about audio,
but QuickTime sits on top of those

00:31:31.140 --> 00:31:33.190
layers and we can talk about both.

00:31:33.570 --> 00:31:35.420
Sound, of course, is spatial.

00:31:35.450 --> 00:31:42.840
We've had support for
mono and stereo audio.

00:31:42.840 --> 00:31:42.840
At least I'm keeping Jim awake.

00:31:42.840 --> 00:31:42.840
That's good.

00:31:43.800 --> 00:31:44.700
for a long time.

00:31:44.700 --> 00:31:48.300
Is that sufficient for being able to
detect where sound is coming from?

00:31:48.300 --> 00:31:53.420
Well, I have two ears and I knew it was
Jim as the only person laughing at that.

00:31:53.420 --> 00:31:57.310
But we're finding that it's actually
interesting to have more than

00:31:57.310 --> 00:32:02.360
two audio sources available to
create an enveloping experience.

00:32:02.360 --> 00:32:05.030
This, of course, was originally available
in a movie theater.

00:32:05.060 --> 00:32:10.000
Does anybody remember the first movie
that had support for surround sound?

00:32:11.700 --> 00:32:28.700
[Transcript missing]

00:32:29.290 --> 00:32:32.680
So I've name dropped Leopold
Stokowski and Harold Blum and

00:32:32.740 --> 00:32:35.400
I'm only thirty minutes into it.

00:32:35.400 --> 00:32:35.400
It's pretty good.

00:32:36.500 --> 00:32:41.980
So, naturally we want to support multiple
channels and we want to support higher

00:32:41.980 --> 00:32:47.730
resolution audio with the same richness
that I just mentioned for video.

00:32:47.730 --> 00:32:52.990
So let's step back over to
demo one and I will show you

00:32:53.050 --> 00:32:55.500
that you can in fact combine

00:32:57.460 --> 00:33:04.810
some of this rich audio high-resolution
multi-channel audio using QuickTime the

00:33:04.810 --> 00:33:07.300
media integration architecture.

00:33:07.350 --> 00:33:09.070
Let me take some video.

00:33:09.070 --> 00:33:12.570
I'm going to take some video
that's near and dear to my heart.

00:33:12.660 --> 00:33:16.340
This by the way is cherry juice.

00:33:17.010 --> 00:33:21.000
This those of you have the
QuickTime 1.0 CD-ROM from 1991

00:33:21.000 --> 00:33:22.000
you may have seen Cherry Juice.

00:33:22.000 --> 00:33:26.180
It used one of the original video
codecs that shipped with QuickTime 1.0

00:33:26.220 --> 00:33:28.800
known finally as Road Pizza.

00:33:28.910 --> 00:33:33.790
And this video was produced laboriously
by means of a series of still images.

00:33:34.370 --> 00:33:38.080
and I'm going to take this very old
video and I'm going to combine it with

00:33:38.080 --> 00:33:42.490
some very new audio I happen to have

00:33:42.640 --> 00:33:46.000
Well, I'm actually going to open it up
in this QuickTime player first.

00:33:46.030 --> 00:33:52.640
I have some sound effects here that
are actually in surround sound.

00:33:52.640 --> 00:33:52.640
Let me play them for you.

00:33:56.400 --> 00:33:59.300
Now this demonstrates one of
the key things about support for

00:33:59.300 --> 00:34:01.100
multi-channel audio in QuickTime.

00:34:01.140 --> 00:34:05.490
Did you know that QuickTime 6.6
automatically mixes down to

00:34:05.510 --> 00:34:08.300
the abilities of the device,
the output device that you

00:34:08.300 --> 00:34:09.600
happen to have attached?

00:34:09.670 --> 00:34:11.300
This is 5.1 audio.

00:34:11.390 --> 00:34:13.890
The room is only stereo.

00:34:18.500 --> 00:34:22.040
So, I'm going to copy that segment
of audio that I happen to have,

00:34:22.040 --> 00:34:27.260
that 5.1 audio, and I'm going to add
it to my cherry juice.

00:34:28.000 --> 00:34:33.210
Video and now we have 1991
vintage video and audio together.

00:34:36.550 --> 00:34:38.150
should be stopped there.

00:34:38.220 --> 00:34:39.620
I don't think so.

00:34:39.660 --> 00:34:43.460
I ran my movie mincer script
earlier today in another session.

00:34:43.520 --> 00:34:48.940
I ran my movie mincer script on this
very thing and the same copy and paste

00:34:49.290 --> 00:34:56.270
combine integrate complete digital media
technology was able to produce this.

00:34:57.400 --> 00:35:07.900
[Transcript missing]

00:35:11.750 --> 00:35:13.800
Now in order to do that,
I actually changed some of

00:35:13.800 --> 00:35:15.080
the parameters to my script.

00:35:15.150 --> 00:35:18.680
Instead of copying two second segments,
I copied segments of one fifth

00:35:18.760 --> 00:35:23.330
of a segment and I did 40 of them
to make eight seconds of media.

00:35:23.330 --> 00:35:24.800
But the same thing works.

00:35:25.100 --> 00:35:28.070
That integration technology,
that power that's available to QuickTime,

00:35:28.240 --> 00:35:33.050
when we do multi-channel audio,
we do multi-channel audio,

00:35:33.050 --> 00:35:34.630
not just playback.

00:35:35.790 --> 00:35:39.430
Now that was a demonstration
of some very basic combination

00:35:39.440 --> 00:35:42.040
of audio and video together,
but we thought that it would be

00:35:42.040 --> 00:35:47.920
valuable for you to survey the
current state of production tools.

00:35:48.130 --> 00:35:50.170
What if you really
wanted to do something,

00:35:50.170 --> 00:35:54.400
you don't want road pizza video in 2004,
that's what year it is, right?

00:35:54.520 --> 00:35:58.930
You want H.264 video and what you
want to do is to have some full

00:35:59.030 --> 00:36:03.490
screen really cool thing such as
the demonstrations of H.264 that

00:36:03.490 --> 00:36:05.400
you saw at the keynote on Monday.

00:36:05.460 --> 00:36:08.600
And the question is, how do you do it?

00:36:08.660 --> 00:36:14.500
Well, fortunately we have the answer
to that question right here.

00:36:14.600 --> 00:36:21.070
Ladies and gentlemen, introducing the
QuickTime Stupid Movie of 2004.

00:39:54.800 --> 00:39:59.170
I'm going to project what may be
perceived as a lateness as a timeliness.

00:39:59.180 --> 00:40:03.570
I believe that video production
requires a digital media

00:40:03.570 --> 00:40:06.190
architecture as rich as QuickTime.

00:40:06.340 --> 00:40:08.510
to streamline this process.

00:40:08.510 --> 00:40:11.080
And now that we're rolling out
support for these modern video formats

00:40:11.080 --> 00:40:13.720
and these modern audio formats,
we hope to work with you,

00:40:13.750 --> 00:40:16.480
the tools developers and
the hardware developers,

00:40:16.480 --> 00:40:19.810
to make this kind of production
accessible to people like me.

00:40:22.720 --> 00:40:25.950
Thanks to those of you who prepared
the video that we showed at the

00:40:25.950 --> 00:40:28.260
conference and for those of you
who prepared the stupid movie.

00:40:28.260 --> 00:40:28.860
That was wonderful.

00:40:31.000 --> 00:41:23.100
[Transcript missing]

00:41:23.480 --> 00:41:27.740
We've introduced some APIs which
finally rationalize the ability

00:41:27.740 --> 00:41:30.670
to get decompressed audio
out of QuickTime movies.

00:41:30.690 --> 00:41:33.700
It's called movie audio extraction.

00:41:33.770 --> 00:41:36.160
And this is the way we're
recommending that if you need

00:41:36.160 --> 00:41:38.270
to get audio out of movies,
use those APIs.

00:41:38.360 --> 00:41:42.460
We're using it ourselves when we export,
our movie exporters that can

00:41:42.460 --> 00:41:45.990
re-encode movies to other formats.

00:41:47.040 --> 00:41:49.820
and we also have new support in
the sequence grabber which is

00:41:49.820 --> 00:41:54.130
QuickTime's module for capturing
media from external devices for

00:41:54.480 --> 00:41:56.240
high resolution multi-channel audio.

00:41:56.240 --> 00:41:58.380
It's called the SG Audio Channel.

00:41:58.380 --> 00:42:02.120
All of those things will be
demonstrated and explained in session

00:42:02.120 --> 00:42:04.400
213 which is tomorrow at 3:30.

00:42:04.430 --> 00:42:06.930
And I think that you really want to
go to this one because I understand

00:42:07.310 --> 00:42:10.730
that there's going to be a live
performance of multiple percussionists,

00:42:10.730 --> 00:42:13.390
a narrator,
and a wandering troop of minstrels.

00:42:13.400 --> 00:42:15.270
And they're going to be
recording multichannel.

00:42:15.280 --> 00:42:18.190
They're going to be performing live,
so please go.

00:42:18.330 --> 00:42:20.860
There's no extra charge for admission.

00:42:20.860 --> 00:42:23.550
Also, there's information about
the new APIs in the very same

00:42:23.550 --> 00:42:27.700
document I continue to reference,
the QuickTime 6.6 Developer Preview.

00:42:27.870 --> 00:42:30.300
The section is Audio Enhancements.

00:42:30.440 --> 00:42:33.200
Alright, so we talked about video,
we talked about graphics processing,

00:42:33.200 --> 00:42:34.900
we talked about audio.

00:42:35.040 --> 00:42:38.640
We've noticed that things have
been happening to make your lives

00:42:38.640 --> 00:42:41.700
easier in developing applications.

00:42:41.900 --> 00:42:45.010
One of them is that you don't
call waitNext event anymore.

00:42:46.900 --> 00:42:48.160
Thank you.

00:42:48.160 --> 00:42:51.500
It's a long time in coming, wasn't it?

00:42:51.500 --> 00:42:54.830
But we've also noticed that
you are gaining your ability

00:42:55.000 --> 00:42:58.800
to develop rapidly by using the
leverage of application frameworks.

00:42:58.800 --> 00:43:00.980
Gee, it's kind of great that
we notice this stuff,

00:43:00.980 --> 00:43:03.230
but we do usually have our
heads down producing great

00:43:03.230 --> 00:43:04.620
video and audio like that.

00:43:04.620 --> 00:43:06.260
It may have taken a few extra years.

00:43:06.260 --> 00:43:10.270
But now we're aware that you're using
high-level modules in Cocoa and also in

00:43:10.270 --> 00:43:12.660
Carbon to implement your applications.

00:43:13.710 --> 00:43:18.120
And what we are doing in Tiger is
supplying modules that fit with

00:43:18.120 --> 00:43:22.440
those frameworks to manage most
of your common QuickTime needs.

00:43:22.500 --> 00:43:26.980
For you Carbon developers,
we're introducing in Tiger the H.I.

00:43:26.980 --> 00:43:27.970
Movie View.

00:43:27.970 --> 00:43:28.420
H.I.

00:43:28.420 --> 00:43:31.180
Views is an object-oriented
view system that's for use

00:43:31.180 --> 00:43:33.500
by Carbon-based applications.

00:43:33.500 --> 00:43:34.160
H.I.

00:43:34.160 --> 00:43:38.210
Movie View allows QuickTime media
to play as a first-class

00:43:38.640 --> 00:43:40.730
citizen in that view framework.

00:43:43.120 --> 00:43:46.800
I'm sorry, I have to go around to
the door in the front.

00:43:46.840 --> 00:43:47.780
Let me show you H.I.

00:43:47.780 --> 00:43:49.680
MovieView in action.

00:43:49.710 --> 00:43:52.700
Now there's something interesting about
the demos that I give in this session.

00:43:52.700 --> 00:43:56.320
This is sort of a session that's
sandwiched in between the sessions

00:43:56.570 --> 00:43:59.540
at the beginning of the week that
officers of the company deliver,

00:43:59.580 --> 00:44:02.220
people with titles,
people whose pictures you

00:44:02.220 --> 00:44:05.380
see in trade publications,
and even in Newsweek.

00:44:05.430 --> 00:44:07.320
And the sessions that come
towards the end of the week

00:44:07.320 --> 00:44:10.190
which are very highly technical,
given by people who really know

00:44:10.190 --> 00:44:11.700
what they're talking about.

00:44:14.700 --> 00:44:30.200
[Transcript missing]

00:44:30.810 --> 00:44:36.130
This demo partakes somewhat of
this in that it's a very elementary

00:44:36.550 --> 00:45:00.200
introduction to the technology
that I just mentioned.

00:45:00.200 --> 00:45:00.200
The predecessor to the HR view
was the Carbon control.

00:45:00.200 --> 00:45:00.200
That is used by a
carbon-based application,

00:45:00.200 --> 00:45:00.200
iTunes,
to display videos in the music store.

00:45:00.200 --> 00:45:00.200
So if I go to the music store,
and let's see,

00:45:00.200 --> 00:45:00.200
I will go to the Bob Dylan page,
and I will go to the main

00:45:00.200 --> 00:45:00.200
place for that artist.

00:45:00.780 --> 00:45:07.160
and I know that the music store has video
available of a performance by Bob Dylan

00:45:08.250 --> 00:45:11.880
iTunes uses the Carbon Movie Control,
the predecessor to the H.I.

00:45:11.880 --> 00:45:14.640
Movie View, to display its video.

00:45:14.690 --> 00:45:19.710
And it supports the ability to display
video that's downloading from the

00:45:24.860 --> 00:45:30.040
could you please to get off airport
if you're on check your mail later

00:45:30.930 --> 00:45:34.090
and it can do everything that the
finder can do when it displays a

00:45:34.090 --> 00:45:40.510
movie as well the finder is using not
the predecessor Carbon movie control

00:45:40.810 --> 00:45:43.010
but in Tiger the finder is using H.I.

00:45:43.010 --> 00:45:47.450
MovieView to display previews of
QuickTime media right here in the

00:45:47.450 --> 00:45:52.280
finder you can see in iTunes it
supports scrolling a video back and

00:45:52.280 --> 00:46:01.770
forth we can clip we can resize cool
stuff good song finder using H.I.

00:46:01.770 --> 00:46:05.700
MovieView also supports all
that stuff as well i can get

00:46:05.700 --> 00:46:08.940
a large preview it'll resize

00:46:09.510 --> 00:46:11.840
I can scroll.

00:46:11.840 --> 00:46:12.340
The H.I.

00:46:12.340 --> 00:46:14.510
MovieView can be used in
several different contexts

00:46:14.530 --> 00:46:16.530
within the same application.

00:46:16.530 --> 00:46:19.480
So, for example, if I do a GetInfo,

00:46:29.400 --> 00:46:34.740
Where'd they move it now?

00:46:34.840 --> 00:46:39.110
If I do a get info on a media file,
the finder also can display a preview

00:46:39.560 --> 00:46:43.360
inside of the preview pane and that
can also be a playable video as well.

00:46:43.360 --> 00:46:47.210
Although in this particular case,
unfortunately, it's not.

00:46:47.950 --> 00:46:53.110
This also uses the HIMovieView in line
with these other user interface elements.

00:46:53.490 --> 00:46:56.010
If you have a carbon-based app,
you're using a view system,

00:46:56.010 --> 00:46:59.800
HIView support rich composition,
movies can be composed

00:47:00.260 --> 00:47:02.540
with other elements.

00:47:02.660 --> 00:47:04.660
Alright, back to slides.

00:47:07.080 --> 00:47:08.170
not just Carbon but also Cocoa.

00:47:08.200 --> 00:47:10.840
Oh, by the way, there'll be more
information about the H.I.

00:47:10.840 --> 00:47:13.720
MovieView in tomorrow's session 215.

00:47:13.800 --> 00:47:16.110
That's the improved video
rendering and playback and

00:47:16.110 --> 00:47:17.660
several original demos of H.I.

00:47:17.660 --> 00:47:19.240
MovieView will be available there.

00:47:22.020 --> 00:47:25.580
but as I mentioned not
only Carbon but Cocoa 2.

00:47:25.710 --> 00:47:30.570
We are introducing in Tiger the
Cocoa Qt Kit and we are making

00:47:30.570 --> 00:47:34.860
available to you Cocoa developers all
of the richness of the manipulations

00:47:34.930 --> 00:47:38.800
that you can perform on media in a
form that should be very familiar to

00:47:38.860 --> 00:47:42.560
you using all of the same constructs
and all of the same programming

00:47:42.560 --> 00:47:46.890
techniques that you have learned
to develop your Cocoa applications.

00:47:48.410 --> 00:47:51.370
Cocoa of course already has
basic QuickTime support in

00:47:51.380 --> 00:47:52.800
NSMovie and NSMovieView.

00:47:53.160 --> 00:47:56.920
With the Cocoa Qt kit we're going
quite a bit further beyond that.

00:47:56.920 --> 00:48:02.200
We have classified QuickTime behaviors
and introduced Cocoa classes

00:48:02.200 --> 00:48:06.310
based on those behaviors that
make manipulations of movies,

00:48:06.360 --> 00:48:11.440
tracks and media available to you in
Objective-C using the Cocoa framework.

00:48:11.510 --> 00:48:14.050
And of course we have
a class for your GUI,

00:48:14.050 --> 00:48:16.350
the QtMovieView that's very rich.

00:48:16.350 --> 00:48:20.740
It goes quite a bit beyond what you
could do in NSMovieView to date.

00:48:20.980 --> 00:48:23.780
Now, Cocoa not only supports
modern applications with

00:48:23.910 --> 00:48:26.760
graphical user interfaces,
it also supports other

00:48:26.790 --> 00:48:29.040
types of modules as well.

00:48:29.040 --> 00:48:33.100
Bundles, plugins, command line tools.

00:48:33.100 --> 00:48:34.840
But don't take my word for it.

00:48:34.910 --> 00:48:36.510
Let's look.

00:48:42.710 --> 00:48:45.400
Now when I went through a Cocoa training,
when I learned how to write

00:48:45.400 --> 00:48:48.300
an application in Cocoa,
several of you might have had

00:48:48.300 --> 00:48:50.290
exactly the same experience I had.

00:48:50.290 --> 00:48:54.370
I learned with the expenses application.

00:48:54.610 --> 00:48:56.660
Does this ring a bell for anyone?

00:48:56.680 --> 00:48:59.920
The Expenses application is the
application that you build if you're

00:48:59.920 --> 00:49:04.190
working through the Learning Cocoa book
from O'Reilly or if you go to

00:49:04.490 --> 00:49:07.630
any number of training sessions
that show you how to do basic

00:49:07.630 --> 00:49:09.050
application development in Cocoa.

00:49:09.200 --> 00:49:10.900
And this is a pretty cool app.

00:49:10.930 --> 00:49:13.410
This allows me to keep
track of my expenses like,

00:49:13.410 --> 00:49:18.340
let's see, when I cross the
Golden Gate Bridge today.

00:49:19.680 --> 00:49:21.340
That cost me five bucks.

00:49:21.340 --> 00:49:24.380
And when I parked in the
Mission Street garage,

00:49:24.380 --> 00:49:27.870
let me guess,
that's going to be about 16 bucks.

00:49:27.870 --> 00:49:29.610
Well, that's kind of good.

00:49:29.720 --> 00:49:32.480
I can also attach notes, textual notes.

00:49:32.480 --> 00:49:33.320
Let's see.

00:49:33.320 --> 00:49:34.530
I'm on level six.

00:49:34.530 --> 00:49:36.120
To each of my expenses.

00:49:36.120 --> 00:49:37.250
So that's nice.

00:49:37.250 --> 00:49:39.520
I can browse through my expenses.

00:49:39.580 --> 00:49:41.340
It'll keep running total.

00:49:41.350 --> 00:49:44.560
I can save this document
to edit it later.

00:49:44.560 --> 00:49:48.680
The NS table view displaying
this set of expenses.

00:49:48.700 --> 00:49:53.130
And the NS text view,
which displays these textual notes,

00:49:53.210 --> 00:49:56.520
are subviews of an NS split view,
which allow me to do this

00:49:56.520 --> 00:49:57.590
kind of cool stuff here.

00:49:57.700 --> 00:50:01.570
So I can resize the
different subviews if I want.

00:50:03.200 --> 00:50:05.650
When I look at that app
as a multimedia developer,

00:50:05.780 --> 00:50:08.200
I don't see an expenses app.

00:50:08.260 --> 00:50:12.690
I see a playlist editor.

00:50:14.370 --> 00:50:18.840
So what I did was I took the expenses
application exactly as I completed it

00:50:18.910 --> 00:50:22.180
when I completed my Cocoa training,
which I did almost as well

00:50:22.180 --> 00:50:24.090
as I did in the fifth grade.

00:50:24.430 --> 00:50:28.030
and I made from that expenses
app using the same constructs,

00:50:28.030 --> 00:50:31.230
in fact the same lines of code,
a playlist editor.

00:50:31.230 --> 00:50:34.940
I added a little bit to it and
I changed it around a little bit so

00:50:34.940 --> 00:50:37.120
I can add multiple movies at a time.

00:50:37.200 --> 00:50:40.610
So I'm going to add some items
to my playlist and they show

00:50:40.610 --> 00:50:44.100
up in the upper pane which is
once again an NS table view.

00:50:44.100 --> 00:50:46.870
And I've renamed my
categories to file name,

00:50:46.890 --> 00:50:49.440
display name, which may be different.

00:50:49.440 --> 00:50:52.140
That's a narrative prolepsis.

00:50:52.140 --> 00:50:56.310
And display the duration using an
NS formatter to show the number in

00:50:56.310 --> 00:50:58.470
seconds with two decimal places.

00:50:58.600 --> 00:51:01.620
I could have written a better
NS formatter to show minutes and

00:51:01.640 --> 00:51:04.680
seconds but it was Monday afternoon.

00:51:04.680 --> 00:51:04.680
What do you want?

00:51:04.810 --> 00:51:07.520
and the new features of the new
The view below has changed from

00:51:07.520 --> 00:51:10.880
an NSTextView to a QtMovieView.

00:51:10.880 --> 00:51:15.230
When I select any one of
these items in my playlist,

00:51:15.240 --> 00:51:21.040
the movie that represents the
playable media for the file that

00:51:21.040 --> 00:51:25.560
that playlist item refers to is
displayed in the QtMovieView below.

00:51:25.560 --> 00:51:31.450
The NSSplitView works
exactly as you would expect.

00:51:31.450 --> 00:51:31.450
Maybe it will even work if I play it.

00:51:33.010 --> 00:51:36.160
so I can do the resizing
while I'm playing,

00:51:36.160 --> 00:51:39.760
resizing of the window,
resizing of the view.

00:51:39.810 --> 00:51:41.500
I also did a fancy little thing.

00:51:41.540 --> 00:51:45.660
I'm listening for the notification
that comes from the class QtMovie that

00:51:46.040 --> 00:51:50.530
tells me when the movie is done so
that I can listen for that notification

00:51:50.630 --> 00:51:55.500
in my document controller and tell
the NS table view above to display the

00:51:55.500 --> 00:52:00.880
next item in the list and the QtMovie
view below to display the next movie.

00:52:00.880 --> 00:52:04.330
Now this NS slider thing,
this NS control on the bottom,

00:52:04.330 --> 00:52:06.020
that's actually functional.

00:52:06.060 --> 00:52:11.840
It's not just displaying the
current time of the movie.

00:52:11.840 --> 00:52:11.840
I can also click on different

00:52:13.910 --> 00:52:21.440
Hi, I'm Kevin Calhoun,
and I'm the developer of QuickTime.

00:52:21.860 --> 00:52:24.490
There are places on the web
that allow you to download the

00:52:24.490 --> 00:52:27.400
version of Expenses that's similar
to the one that I showed you.

00:52:27.470 --> 00:52:31.420
There's really very little additional
code there than there is for that.

00:52:31.420 --> 00:52:34.040
We will make this,
unfortunately it's not available

00:52:34.150 --> 00:52:36.700
in your preview of Tiger,
but we'll make the code for this

00:52:36.700 --> 00:52:39.800
available in the coming weeks via
the Apple Developer Connection.

00:52:39.800 --> 00:52:42.810
You'll see that all of the same
things that allow you to do rapid

00:52:42.810 --> 00:52:46.580
application development in Cocoa,
you can now do with

00:52:46.580 --> 00:52:48.670
QtKit using QuickTime.

00:52:49.820 --> 00:52:53.410
but it's not just about
applications that have a GUI.

00:52:53.480 --> 00:52:58.070
It's also about other types
of executable modules as well.

00:52:58.250 --> 00:53:02.860
With QtKit you can develop command
line tools that you can use in batch

00:53:02.860 --> 00:53:05.120
processing for media production.

00:53:09.230 --> 00:53:11.730
and because it's very difficult
to type at this time of day,

00:53:11.730 --> 00:53:15.620
I have my canned command
lines right here.

00:53:16.290 --> 00:53:19.760
member of our team developed a command
line tool called recompressor that takes

00:53:19.810 --> 00:53:24.350
several command line parameters you
tell it well here's the movie exporter

00:53:24.510 --> 00:53:29.820
that I want to use in this case 3GPP
here's the source movie that I want you

00:53:29.820 --> 00:53:34.380
to recompress and here's the destination
movie that I want you to recompress to.

00:53:35.380 --> 00:53:38.440
So if I execute this line in
terminal I told you there's going

00:53:38.440 --> 00:53:42.400
to be a terminal demo you saw the
graphic earlier on I didn't lie.

00:53:42.460 --> 00:53:49.300
It's going to recompress this DV video
clip to 3G and it's now available for me.

00:53:49.410 --> 00:53:54.390
I can send it out to my 3G
handset and it'll play something

00:53:54.390 --> 00:53:58.200
like this using MPEG-4 video.

00:53:58.300 --> 00:54:00.290
And AMR audio.

00:54:06.700 --> 00:54:10.540
Thank you.

00:54:10.540 --> 00:54:12.460
I wish I could tell you more
about QtKit in this session,

00:54:12.460 --> 00:54:15.440
but this is the omnibus
QuickTime presentation.

00:54:15.520 --> 00:54:16.540
Back to slides, please.

00:54:16.540 --> 00:54:19.640
There are more details
tomorrow morning at 9:00.

00:54:19.640 --> 00:54:22.130
If you can be here at
5:00 on a Wednesday,

00:54:22.130 --> 00:54:24.610
you can be here at 9:00 on a Thursday.

00:54:25.180 --> 00:54:27.590
New directions in using
QuickTime with Cocoa.

00:54:27.760 --> 00:54:28.660
Go to that session.

00:54:28.970 --> 00:54:32.570
There'll be lots of great stuff and
I promise the demos there will be very,

00:54:32.570 --> 00:54:35.980
very rich because you can do
really great real-life production

00:54:35.980 --> 00:54:40.020
stuff with these tools that we're
making available to you in Tiger.

00:54:40.020 --> 00:54:43.470
The section of your What's New in
QuickTime 6.6 document that

00:54:43.470 --> 00:54:46.630
covers this material is called
Qt Kit Framework for QuickTime.

00:54:46.630 --> 00:54:49.560
We have other documents
that are available as well,

00:54:49.620 --> 00:54:52.940
a reference and a tutorial that
you'll have to come to the session

00:54:53.000 --> 00:54:54.940
tomorrow to get the the pointers to.

00:54:56.290 --> 00:54:57.200
Okay.

00:54:57.200 --> 00:55:01.140
So you've seen, I've convinced you now,
QuickTime is a cross-platform

00:55:01.300 --> 00:55:03.200
media architecture.

00:55:03.250 --> 00:55:06.400
We've demoed only the things that
are available in Mac OS X and focused

00:55:06.400 --> 00:55:09.940
on the things that are new in Tiger,
but these same media

00:55:09.940 --> 00:55:13.950
services for playback,
editing, creation and so forth are

00:55:13.950 --> 00:55:15.850
also available on Windows.

00:55:15.880 --> 00:55:19.870
All the Windows 32,
the Win32 series of releases.

00:55:20.810 --> 00:55:25.300
By means of QuickTime,
you can simplify your use of all these

00:55:25.360 --> 00:55:29.300
variegated media container formats,
video and audio formats,

00:55:29.360 --> 00:55:32.200
external devices for capture,
and so forth.

00:55:32.270 --> 00:55:34.600
But have we done enough for you?

00:55:34.660 --> 00:55:37.440
Our answer was, no we haven't.

00:55:37.600 --> 00:55:40.960
We want to take it another step
further because we realize that

00:55:41.040 --> 00:55:46.040
people don't just produce media,
they classify it as well.

00:55:49.640 --> 00:55:52.380
How much did you pay to
come to this conference?

00:55:52.440 --> 00:55:55.220
Remember to get your money's worth.

00:55:56.910 --> 00:56:01.070
people attach classifying information
to media in the course of production

00:56:01.070 --> 00:56:05.100
in order to identify media that's
going to be used in later steps in

00:56:05.100 --> 00:56:09.120
production or to identify media when
it's delivered to the end user and

00:56:09.120 --> 00:56:15.020
they tag this media or classify it with
several different formats of metadata.

00:56:15.020 --> 00:56:19.080
There are as many formats for metadata
as there are formats for media itself

00:56:19.080 --> 00:56:21.810
and maybe more and several of you
in the back of the room might be

00:56:21.960 --> 00:56:24.660
developing your own formats even now.

00:56:24.660 --> 00:56:27.680
We've noticed that for example
for MP3 files there are many

00:56:27.680 --> 00:56:32.080
more formats for tagging than
there are players in the world.

00:56:32.080 --> 00:56:33.160
What is going on?

00:56:33.160 --> 00:56:36.380
You can tag your MP3
files with ID3 version 1,

00:56:36.380 --> 00:56:40.160
ID3 version 2, Lyrics 3, Lyrics 1, APE.

00:56:40.160 --> 00:56:42.820
I don't know what these things mean.

00:56:42.820 --> 00:56:44.150
It's just confusing.

00:56:44.530 --> 00:56:48.520
but what we want to do is to make
sense of all these metadata formats

00:56:48.520 --> 00:56:50.640
because hey we're QuickTime.

00:56:50.640 --> 00:56:54.840
We are the media integration
architecture and we can do it.

00:56:54.960 --> 00:56:59.170
So what we are doing in Tiger is
introducing APIs that give

00:56:59.280 --> 00:57:02.600
you access to media metadata.

00:57:02.690 --> 00:57:07.800
You can be concerned about the specific
metadata format if you need to be or

00:57:08.120 --> 00:57:12.340
you can simply leave the details of the
format up to us and get the information

00:57:12.470 --> 00:57:14.100
out that you're interested in.

00:57:14.230 --> 00:57:15.600
How does it work?

00:57:15.680 --> 00:57:19.560
When you open a movie you ask
QuickTime for a reference to metadata

00:57:19.620 --> 00:57:24.400
attached either to the movie,
to a specific track or to specific media.

00:57:24.490 --> 00:57:28.640
You can tell us if you're interested in
a specific format such as iTunes music

00:57:28.710 --> 00:57:33.830
store metadata or classic QuickTime user
data or you can just say give me

00:57:33.900 --> 00:57:36.300
a reference to whatever it's got.

00:57:36.390 --> 00:57:40.470
Then once you have that reference you
can iterate through the items in that

00:57:40.470 --> 00:57:45.610
metadata by means of keys that are
specific to a metadata format or a

00:57:45.610 --> 00:57:50.900
set of keys that we've defined that
we intend to work in common among all

00:57:50.900 --> 00:57:52.900
the metadata formats that we support.

00:57:53.040 --> 00:57:57.180
So if you want to get for example
the display name of the media

00:57:57.600 --> 00:58:01.360
you merely have to say give me
a reference to the metadata,

00:58:01.600 --> 00:58:04.300
find me the display name
please and give it to me.

00:58:04.330 --> 00:58:08.990
And whether that display name is
stored in classic QuickTime user data,

00:58:09.010 --> 00:58:13.500
in iTunes music store metadata
or in new QuickTime user data,

00:58:13.500 --> 00:58:13.500
it's not necessarily a
reference to the metadata.

00:58:13.500 --> 00:58:15.720
So if you want to get for example
QuickTime metadata we've defined

00:58:15.730 --> 00:58:17.920
a new format to overcome the
limitations of classic user data.

00:58:18.200 --> 00:58:21.480
We will find it for you
and we will deliver it.

00:58:21.510 --> 00:58:24.600
And I have a demonstration
of that right over here.

00:58:24.740 --> 00:58:26.480
Data potato do what?

00:58:26.580 --> 00:58:27.880
Do what?

00:58:29.880 --> 00:58:31.910
I have a demonstration of it.

00:58:31.910 --> 00:58:35.460
I'm going to back up
over here on demo two,

00:58:35.460 --> 00:58:36.580
please.

00:58:40.400 --> 00:58:41.240
All right.

00:58:41.310 --> 00:58:47.640
So what I want to show you here is that
it's possible now for the very first time

00:58:48.990 --> 00:58:52.560
for QuickTime Player to
display in this demo.

00:58:52.560 --> 00:58:55.240
It's not the most impressive
demo that you'll see at the show,

00:58:55.240 --> 00:58:57.900
but it's probably the nearest
and dearest to my heart.

00:58:57.900 --> 00:59:04.770
So I'm going to make sure that it works.

00:59:13.500 --> 00:59:21.490
is presenting a presentation on
the new features of QuickTime API.

00:59:22.580 --> 00:59:25.090
Yes, it's late night at the piano bar.

00:59:25.090 --> 00:59:25.780
Okay, here we go.

00:59:25.840 --> 00:59:29.260
On demo one,
I've opened up an MP3 file which

00:59:29.260 --> 00:59:32.350
contains an ID3 version 2 tag.

00:59:32.750 --> 00:59:36.650
that includes the name,
the display name of the file and that

00:59:36.650 --> 00:59:40.460
display name is stored as UTF-16,
it's Unicode.

00:59:40.500 --> 00:59:43.850
And for the very first time
QuickTime Player can extract that

00:59:43.850 --> 00:59:48.820
name from the metadata in the
format ID3 version 2 and display

00:59:48.820 --> 00:59:51.020
it in the title bar of the window.

00:59:51.060 --> 00:59:52.060
And what is it doing?

00:59:52.280 --> 00:59:55.460
What is QuickTime Player doing
in order to do that?

00:59:55.490 --> 00:59:58.490
All it's doing,
it's a preview of tomorrow's session,

00:59:58.490 --> 01:00:02.660
is calling the method QtMovieDisplayName.

01:00:02.680 --> 01:00:06.340
And underneath the covers,
the QtKit is calling upon the

01:00:06.500 --> 01:00:09.270
QuickTime metadata services
that I described to fetch

01:00:09.330 --> 01:00:10.960
that piece of information out.

01:00:10.990 --> 01:00:12.820
It doesn't worry about the
format of the metadata,

01:00:12.880 --> 01:00:16.790
it just says, "Give me what I want,"
and it delivers it.

01:00:18.440 --> 01:00:20.670
But we can go a little bit
further than that as well with

01:00:20.670 --> 01:00:23.060
metadata and in fact I have.

01:00:23.100 --> 01:00:26.500
And I did it in the application
that I showed you earlier,

01:00:26.500 --> 01:00:28.820
my simple playlist editor.

01:00:28.850 --> 01:00:33.140
I complicated it just a little bit
by adding the following feature.

01:00:33.140 --> 01:00:34.700
This is a Cocoa application.

01:00:34.730 --> 01:00:40.020
So what I did was extended the
Objective-C class QtMovie by

01:00:40.180 --> 01:00:45.000
implementing a category on that
class with the following method,

01:00:45.630 --> 01:00:45.880
artwork.

01:00:45.880 --> 01:00:51.600
What I want to do when I instantiate
a QtMovie is to fetch the artwork

01:00:52.100 --> 01:00:54.920
out of that movie wherever it may be.

01:00:55.040 --> 01:00:59.190
And I implemented that method artwork
by using the QuickTime metadata

01:00:59.190 --> 01:01:01.300
APIs that I described earlier.

01:01:01.540 --> 01:01:04.710
What I then do with that artwork
is I actually attach it to

01:01:04.710 --> 01:01:06.960
the movie as a video track.

01:01:07.050 --> 01:01:10.100
This application is
highly visually oriented.

01:01:10.240 --> 01:01:13.900
What if I want to play some music files?

01:01:13.960 --> 01:01:17.080
Let me preview these very same
music files for you in the finder.

01:01:17.220 --> 01:01:19.460
If I click on one of them,
you'll see the finder merely

01:01:19.460 --> 01:01:22.770
displays the standard QuickTime movie
controller because the only

01:01:22.770 --> 01:01:24.900
media in there is sound media.

01:01:25.130 --> 01:01:28.250
But in my application,
which is taking advantage of

01:01:28.360 --> 01:01:32.770
support for QuickTime metadata,
if I select these audio-only files,

01:01:33.180 --> 01:01:37.460
which nevertheless contain
cover art in their metadata,

01:01:37.460 --> 01:01:40.180
I can do the following trick.

01:01:40.940 --> 01:01:45.760
as I described earlier I can actually
display the cover art as a video

01:01:45.760 --> 01:01:48.550
track in parallel with the audio.

01:01:48.550 --> 01:01:53.000
So if I go through these music files
from the iTunes music store I can display

01:01:53.000 --> 01:01:55.730
the cover art as part of my movie.

01:01:59.830 --> 01:02:01.460
You can do stuff like this too.

01:02:01.490 --> 01:02:05.320
We know that there are many metadata
formats that you will be interested in as

01:02:05.320 --> 01:02:09.060
part of your production tools or as part
of delivery if you're displaying media.

01:02:09.060 --> 01:02:13.530
And what we want to hear from you is
what metadata formats interest you?

01:02:13.680 --> 01:02:17.770
What kind of stuff do you want to
read in the course of preparing

01:02:17.770 --> 01:02:20.890
media or delivering media and
present to the user or make

01:02:21.160 --> 01:02:22.900
available in the production process?

01:02:22.900 --> 01:02:25.970
As I mentioned, in Tiger,
we're going to be supporting

01:02:25.970 --> 01:02:29.360
QuickTime user data,
QuickTime metadata, a new format that

01:02:29.360 --> 01:02:33.010
overcomes the limitations,
and iTunes Music Store metadata.

01:02:33.420 --> 01:02:36.150
This MP3 stuff I did by
way of demonstration,

01:02:36.340 --> 01:02:41.490
we're not actually planning to roll
out support for MP3 cover art in Tiger,

01:02:41.850 --> 01:02:45.390
unless you all email us and say
that you can't live without it.

01:02:52.400 --> 01:03:04.500
[Transcript missing]

01:03:05.590 --> 01:03:08.870
The document of what's new in
QuickTime 6.6 does contain information

01:03:08.940 --> 01:03:11.320
about the QuickTime Metadata APIs.

01:03:11.320 --> 01:03:16.220
We will be posting sample code as the
release process moves along towards the

01:03:16.220 --> 01:03:21.040
eventual delivery of Tiger and yet you've
come to the right place to find all the

01:03:21.140 --> 01:03:25.300
information that will be covered in the
show sessions about QuickTime Metadata.

01:03:27.260 --> 01:03:28.500
Now, let's see.

01:03:28.600 --> 01:03:30.660
It says here I have 11 minutes and 6.

01:03:30.660 --> 01:03:32.100
I don't have to talk fast yet.

01:03:32.100 --> 01:03:34.170
I'm okay.

01:03:34.170 --> 01:03:34.170
Don't worry.

01:03:35.760 --> 01:03:39.560
but I do have more to say and that is
that we've shown you that QuickTime is

01:03:39.560 --> 01:03:42.560
a digital media architecture and
integration architecture that gives

01:03:42.580 --> 01:03:46.660
you all these great services and we're
extending it new media formats support

01:03:46.660 --> 01:03:50.600
for new stuff metadata not just media.

01:03:50.740 --> 01:03:54.600
But you don't have to wait for
us to extend the QuickTime media

01:03:54.600 --> 01:03:59.820
architecture because in fact the
architecture is itself modular and

01:03:59.850 --> 01:04:04.600
extensible and the very same coding
techniques that we use to add new

01:04:04.600 --> 01:04:07.290
support to QuickTime you can use too.

01:04:07.580 --> 01:04:10.750
We haven't made this point at
developer conferences over the last

01:04:10.760 --> 01:04:13.730
couple of years and I wanted to be
sure that we mentioned it this year.

01:04:13.930 --> 01:04:16.650
Several of you are new to the
platform and new to QuickTime.

01:04:16.940 --> 01:04:20.580
You don't have to email Apple and say
you know if only you supported my media

01:04:20.590 --> 01:04:24.600
container format I'd like you a lot or
if only you implemented the following

01:04:24.600 --> 01:04:26.460
video codec you would be my friend.

01:04:26.460 --> 01:04:31.750
You can do it yourself because
QuickTime defines the component APIs that

01:04:32.120 --> 01:04:35.580
allow you to implement those things and
sample code for this stuff is available.

01:04:35.580 --> 01:04:40.710
At the Apple developer connection
website on the sample code pages.

01:04:40.880 --> 01:04:42.580
Many different component
types are available.

01:04:42.580 --> 01:04:46.310
I have an example of a
movie import component.

01:04:47.970 --> 01:04:57.170
Now one of my favorite
places in the file system,

01:04:57.170 --> 01:04:57.170
I don't have to talk faster
but I can't pause any longer.

01:04:57.170 --> 01:04:57.170
One of my favorite
places in the file system

01:05:01.670 --> 01:05:09.780
is right here in /library/quicktime.

01:05:09.780 --> 01:05:12.000
There's cool stuff in there.

01:05:12.050 --> 01:05:16.490
What's in this particular directory,
my /library/quicktime is my modified mp3

01:05:16.490 --> 01:05:21.030
import component that implements all that
cool ID3 stuff that I just showed you.

01:05:21.120 --> 01:05:25.620
That's how I extended QuickTime for
the purposes of my demo.

01:05:25.990 --> 01:05:29.100
I will also extend it slightly further.

01:05:29.100 --> 01:05:34.620
Now you know that on the platform we
do have support for decoding AAC audio.

01:05:34.650 --> 01:05:39.140
We rolled it out with our
MPEG-4 support in QuickTime 6.

01:05:39.150 --> 01:05:45.660
However, we have not to date had support
for the container format .aac.

01:05:45.660 --> 01:05:51.450
.aac or ADTS I believe it is,
is a format that stores AAC audio

01:05:51.450 --> 01:05:57.670
packets and several encoders produce
a stream of AAC audio in this format.

01:05:57.940 --> 01:06:01.930
If I were to drag this .aac
file on top of keynote however,

01:06:01.990 --> 01:06:05.120
it would sadly reject it.

01:06:05.750 --> 01:06:09.260
If only I had a QuickTime movie import
component that knew how to read the

01:06:09.260 --> 01:06:14.080
audio packets from that container
format and create a QuickTime movie.

01:06:14.110 --> 01:06:15.930
Oh wait, I did that.

01:06:17.100 --> 01:06:20.440
I implemented an import
audio file component.

01:06:20.440 --> 01:06:24.460
And those of you who are familiar with
Core Audio know exactly how I did this.

01:06:24.690 --> 01:06:28.720
Core Audio, in fact,
a service on Mac OS X,

01:06:28.720 --> 01:06:31.350
already knows how to parse
these .aac components.

01:06:31.360 --> 01:06:33.610
I didn't actually have to
write any hard code to do this.

01:06:33.610 --> 01:06:38.720
All I had to do was to make use of
Core Audio's ability to do that and

01:06:38.920 --> 01:06:41.830
to make a movie out of a .aac file.

01:06:41.840 --> 01:06:54.470
So, all I need to do here is to move that
cool thing into /library/quicktime.

01:06:56.840 --> 01:07:01.480
and then I do have to quit Keynote
and relaunch it so that Keynote and

01:07:01.570 --> 01:07:04.670
QuickTime can match up together again.

01:07:04.740 --> 01:07:06.220
Keynote can

01:07:06.400 --> 01:07:30.500
[Transcript missing]

01:07:38.560 --> 01:07:42.340
QuickTime uses what's known
as the core services component

01:07:42.340 --> 01:07:47.440
manager in order to load and to
invoke these extensible modules.

01:07:47.470 --> 01:07:50.140
These modules that do movie
import and video image

01:07:50.140 --> 01:07:52.190
decompression and all this stuff.

01:07:52.220 --> 01:07:53.700
We call them components.

01:07:53.700 --> 01:07:57.090
But there's nothing really
fancy going on in the runtime.

01:07:57.090 --> 01:08:01.430
QuickTime deploys the component manager,
uses the component manager on

01:08:01.430 --> 01:08:03.460
both Mac OS X and on Windows.

01:08:03.940 --> 01:08:09.790
But the component manager merely uses the
native dynamic library loading mechanism

01:08:10.350 --> 01:08:14.650
that's available on the platform and
the format of dynamically loadable

01:08:14.660 --> 01:08:17.760
libraries that's defined by the platform.

01:08:17.760 --> 01:08:22.090
So the question is why can't
I implement these extensibility

01:08:22.090 --> 01:08:24.800
modules for QuickTime in Objective-C?

01:08:24.830 --> 01:08:27.940
And the answer is why of course you can.

01:08:27.950 --> 01:08:33.200
Now, there were some problems involving
language runtime and stuff that

01:08:33.200 --> 01:08:36.060
I don't understand too well
that made it dangerous to do

01:08:36.060 --> 01:08:37.660
this with previous releases.

01:08:37.660 --> 01:08:40.080
The good news is that we've
ironed all of this out.

01:08:40.200 --> 01:08:43.650
And starting with Tiger,
you can deploy movie import components

01:08:43.740 --> 01:08:47.190
of the sort that I just demonstrated
or any other of the types of

01:08:47.190 --> 01:08:50.990
components that you saw listed
earlier implemented in Objective-C,

01:08:51.080 --> 01:08:57.740
taking advantage of all of the
great stuff in the Cocoa frameworks.

01:08:57.740 --> 01:08:59.750
Let me show you what

01:09:00.900 --> 01:09:09.200
[Transcript missing]

01:09:14.830 --> 01:09:16.040
Okay.

01:09:16.040 --> 01:09:19.190
So the component that
I chose to implement here,

01:09:19.290 --> 01:09:21.100
once again, it was Saturday.

01:09:21.100 --> 01:09:23.780
I didn't really have a lot of time to
implement support for media format,

01:09:23.870 --> 01:09:26.310
so I stole support that
existed somewhere else.

01:09:26.310 --> 01:09:29.160
You may already be aware that
in AppKit there's a class

01:09:29.530 --> 01:09:33.020
called NSBitmapImageRep,
and this class knows how to write

01:09:33.020 --> 01:09:35.240
a number of still image formats.

01:09:35.320 --> 01:09:38.840
One of the still image formats
that it knows how to write is GIF.

01:09:38.840 --> 01:09:42.510
That's a still image format, by the way,
that QuickTime doesn't know how to write.

01:09:42.730 --> 01:09:46.470
So all that I did,
this is literally all that I did,

01:09:46.570 --> 01:09:51.150
we'll post the sample code shortly,
is define a class for

01:09:51.420 --> 01:09:53.450
a graphics exporter.

01:09:53.530 --> 01:09:58.240
And I define the following methods:
init with imageRep.

01:09:58.240 --> 01:10:01.770
So what's going to happen here is that
an instance of this class is going

01:10:01.780 --> 01:10:03.470
to be presented with an imageRep.

01:10:03.970 --> 01:10:08.230
Then the method that's going
to be invoked is export.

01:10:08.390 --> 01:10:12.270
and the information about
the image is going to be,

01:10:12.270 --> 01:10:16.650
by whatever means necessary,
is going to be turned into the format

01:10:16.650 --> 01:10:21.580
that this exporter knows how to
write to and it returns that exported

01:10:21.580 --> 01:10:24.520
image in an instance of NSData.

01:10:24.520 --> 01:10:28.900
And all of the other work about writing
the file out or writing to wherever

01:10:28.900 --> 01:10:34.340
the thing has to go for the purposes of
however it's being used in QuickTime are

01:10:34.420 --> 01:10:36.840
taken care of at a higher level.

01:10:36.840 --> 01:10:39.180
And this is all the code that
I needed to write in Objective-C in

01:10:39.550 --> 01:10:42.530
order to implement this exporter.

01:10:43.100 --> 01:10:47.330
This still image exporter,
which is in secret sauce.

01:10:47.500 --> 01:10:48.980
Well, actually it got moved.

01:10:49.050 --> 01:10:51.080
Export GIF component.

01:10:51.140 --> 01:10:54.830
Move that once again
to /library/quicktime.

01:10:58.490 --> 01:11:01.220
and this time when
I launch QuickTime Player,

01:11:01.220 --> 01:11:03.390
it's going to gain the
ability to write to GIF files.

01:11:03.600 --> 01:11:07.290
What I'll do is open one of
my favorite movies once again.

01:11:09.700 --> 01:11:12.760
and I will export using
QuickTime Player this movie

01:11:13.090 --> 01:11:15.420
to a sequence of still images.

01:11:15.450 --> 01:11:18.230
Now you see that we have this
support for exporting video to a

01:11:18.230 --> 01:11:22.230
sequence of images or any visual
media and we have several presets.

01:11:22.480 --> 01:11:24.780
QuickTime knows how to do
JPEG and B-Met--what's that,

01:11:24.780 --> 01:11:28.280
some competitor's image format?

01:11:29.950 --> 01:11:36.520
but what I want to do is export to
GIF and only after my graphics exporter

01:11:36.530 --> 01:11:41.560
that supports GIF was installed was this
ability added to the media architecture.

01:11:41.660 --> 01:11:45.140
What I want to do is export this
movie at two frames per second and

01:11:45.140 --> 01:11:48.990
I'm going to put them in my pictures
directory and here I go writing

01:11:49.760 --> 01:11:52.800
frames of this movie to GIF files

01:11:53.640 --> 01:11:56.350
and sure enough if I open
one of them at random,

01:11:56.350 --> 01:12:00.500
there it is a GIF file
in 256 glorious colors.

01:12:00.500 --> 01:12:09.690
I think that's the first time in a while
that GIF has gotten a round of applause.

01:12:14.700 --> 01:14:00.800
[Transcript missing]