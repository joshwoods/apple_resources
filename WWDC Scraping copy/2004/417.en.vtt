WEBVTT

00:00:12.580 --> 00:00:16.080
Ladies and gentlemen,
please welcome software

00:00:16.080 --> 00:00:18.890
engineer Sarah Wilkin.

00:00:22.060 --> 00:00:24.060
Good morning, everyone.

00:00:24.070 --> 00:00:27.980
So I can probably guess
why you're all here,

00:00:28.130 --> 00:00:32.970
which is I got this quote
from the Cocoa mailing list.

00:00:33.270 --> 00:00:36.390
And someone asked-- oh, well, that's me.

00:00:36.610 --> 00:00:38.940
Am I missing something,
or is there actually no

00:00:38.940 --> 00:00:40.600
XML object for Cocoa?

00:00:40.600 --> 00:00:43.370
Well, I mean, there isn't until today.

00:00:43.380 --> 00:00:47.400
So what you've had so far
is there's the SACS parser,

00:00:47.400 --> 00:00:49.720
and with that,
you basically get a bunch of

00:00:49.800 --> 00:00:51.920
callbacks as you go through your XML.

00:00:51.920 --> 00:00:56.590
And that's useful to an extent where you
want to build your own custom objects,

00:00:56.740 --> 00:00:59.530
but often you just want
that final thing at the end.

00:00:59.560 --> 00:01:03.830
And then there's CFXML tree,
which has a lot of limitations.

00:01:04.320 --> 00:01:06.900
In particular, it doesn't have any sort
of namespace handling.

00:01:06.900 --> 00:01:10.840
So again, these are some more quotes
from the developer list.

00:01:10.860 --> 00:01:13.860
People are asking not
just for an XML object,

00:01:13.860 --> 00:01:18.500
but they're asking, oh, well, you know,
I want XPath, and I want XQuery and XSLT,

00:01:18.500 --> 00:01:25.140
and I want it to fix my malformed XML,
and also I'd really love if it

00:01:25.140 --> 00:01:29.000
could do transformations and
all sorts of magical things.

00:01:29.060 --> 00:01:31.460
So that's what I'm
going to give you today.

00:01:31.460 --> 00:01:37.550
We're going to introduce... And SXML.

00:01:38.790 --> 00:01:42.150
So what is NSXML?

00:01:42.230 --> 00:01:46.160
Well,
it's a set of five classes in Foundation.

00:01:46.190 --> 00:01:48.850
You can produce XML from scratch.

00:01:48.900 --> 00:01:50.740
You can read in an XML document.

00:01:50.800 --> 00:01:54.740
Or you can start from HTML,
convert it into XML,

00:01:54.910 --> 00:01:58.320
find all your leaf nodes, convert it,
pull things out,

00:01:58.440 --> 00:01:59.840
put other things back in.

00:01:59.890 --> 00:02:03.970
And then just in one line of code,
you can apply XQuery,

00:02:04.080 --> 00:02:08.680
which is a new W3 standard, or XSLT.

00:02:11.000 --> 00:02:12.990
This is all you need to know.

00:02:13.200 --> 00:02:15.960
If you know a little bit of Cocoa--
because I'm going to be showing you

00:02:16.090 --> 00:02:21.600
quite a bit of code later on-- and if in
Safari you can go view source and say,

00:02:21.600 --> 00:02:24.380
hey, you know,
this is the text element I'm looking for,

00:02:24.380 --> 00:02:28.200
this is the attribute I'm looking for,
then you should be good to go.

00:02:28.250 --> 00:02:32.530
If you're starting from scratch,
also you just should know something

00:02:32.630 --> 00:02:39.500
about the DTD or the schema
so you can build valid XML.

00:02:41.390 --> 00:02:43.360
So XML, it's everywhere, right?

00:02:43.360 --> 00:02:44.700
Everywhere you look.

00:02:44.820 --> 00:02:48.180
So you have XML, it's just straight XML.

00:02:48.280 --> 00:02:51.450
If you go to the w3.org website,
you'll see there's all

00:02:51.530 --> 00:02:53.000
these different standards.

00:02:53.040 --> 00:02:57.320
And you can go all over the web and
find there's information everywhere.

00:02:57.340 --> 00:02:59.530
And we want you to use it.

00:02:59.580 --> 00:03:02.630
Then on top of that,
you have the file formats.

00:03:02.790 --> 00:03:06.840
So Keynote actually
stores its data as XML.

00:03:06.840 --> 00:03:07.880
It's not even exported.

00:03:07.880 --> 00:03:10.670
It's actually already XML.

00:03:10.770 --> 00:03:14.900
And Illustrator,
you can export as SVG and Final Cut Pro,

00:03:14.900 --> 00:03:17.260
which we're going to be showing later on.

00:03:17.300 --> 00:03:22.020
Then you have PLists and also Services.

00:03:23.370 --> 00:03:25.870
So scraping.

00:03:25.940 --> 00:03:27.580
I know you all do it.

00:03:27.640 --> 00:03:30.750
And I'm trying to put a stop to that.

00:03:30.770 --> 00:03:34.140
As I mentioned,
you can do this custom parsing,

00:03:34.140 --> 00:03:36.000
which is not that great.

00:03:36.060 --> 00:03:39.440
But otherwise,
you're left scraping these strings out.

00:03:39.510 --> 00:03:42.970
And you're trying to create this XML,
but you know you're going to

00:03:42.970 --> 00:03:45.390
end up forgetting an end tag,
or you're going to do

00:03:45.470 --> 00:03:47.140
something a little bit wrong.

00:03:47.220 --> 00:03:49.440
And then somebody else
wants to use your XML,

00:03:49.440 --> 00:03:50.560
and it's malformed.

00:03:50.780 --> 00:03:52.110
So please, stop.

00:03:52.380 --> 00:03:54.330
Use this instead.

00:03:54.470 --> 00:03:56.600
This is NSXML.

00:03:56.820 --> 00:04:01.610
So at the top level, we have NSXML node,
which everything inherits from.

00:04:01.740 --> 00:04:04.100
So it covers just your
basic things-- attribute,

00:04:04.150 --> 00:04:07.120
namespace, processing instruction,
and text.

00:04:07.160 --> 00:04:09.880
And these things may
or may not have a name,

00:04:09.920 --> 00:04:13.620
and they'll have an object value
and say where they are in the tree.

00:04:13.640 --> 00:04:17.520
Then you have NSXML document,
which holds everything.

00:04:17.560 --> 00:04:21.060
And it will also have a version
and a character encoding.

00:04:21.080 --> 00:04:24.620
Then there's NSXML element,
where you have your list of

00:04:24.740 --> 00:04:28.590
attributes and your list of
namespaces-- very important.

00:04:28.790 --> 00:04:33.130
And for those of you that are into DTDs,
we have NSXML DTD,

00:04:33.130 --> 00:04:36.800
where you have your system and public ID.

00:04:36.820 --> 00:04:39.450
And it stores a whole bunch of DTD nodes.

00:04:39.750 --> 00:04:42.820
So they'll tell you what
can be valid or not.

00:04:42.920 --> 00:04:47.570
So before I talk more about this,
let's show you some code.

00:04:47.710 --> 00:04:49.350
So it's really easy.

00:04:49.370 --> 00:04:52.560
You just have your URL.

00:04:52.600 --> 00:04:57.400
And then there's three different ways
you can start creating your document.

00:04:57.400 --> 00:05:02.590
You can either init with contents of URL,
init with data, or if you've created a

00:05:02.590 --> 00:05:06.420
root element from scratch,
just use that.

00:05:06.500 --> 00:05:10.580
So I'm going to show how easy
it is by walking all the way

00:05:10.580 --> 00:05:12.920
over to this demo machine.

00:05:19.440 --> 00:05:23.900
So here I have basically the same
lines of code I was just showing.

00:05:23.900 --> 00:05:29.070
And what I'm doing is I'm
getting this from apple.com/rss.

00:05:29.480 --> 00:05:32.280
So as you may know,
RSS is this really big thing.

00:05:32.280 --> 00:05:34.900
We just announced Safari RSS.

00:05:34.920 --> 00:05:38.060
And there's all this information
out there available to you.

00:05:38.140 --> 00:05:41.580
So normally, now that Safari RSS is here,
if we click on this,

00:05:41.580 --> 00:05:42.860
we get this cool view.

00:05:42.860 --> 00:05:45.510
But we just want the data.

00:05:46.100 --> 00:05:52.460
So I've saved this URL,
and this is it here.

00:05:52.780 --> 00:05:57.220
And then I just allocate it,
and I'm turning on Pretty Printing,

00:05:57.370 --> 00:06:01.010
which is a special option to
make all the indenting go in.

00:06:02.010 --> 00:06:05.540
And then there's also a root
element on the document.

00:06:05.600 --> 00:06:08.390
So I'm going to go
straight into the debugger.

00:06:09.790 --> 00:06:15.900
And let's see if I can-- make
sure you can see this all right.

00:06:17.600 --> 00:06:25.490
All right,
so let's say I want to print out--

00:06:25.490 --> 00:06:25.490
I said it has a character encoding,
right?

00:06:28.000 --> 00:06:55.500
[Transcript missing]

00:07:04.040 --> 00:07:06.760
Child count, and of course,
there's all the things you'd expect,

00:07:06.760 --> 00:07:11.360
like child.index and replace child.index.

00:07:11.360 --> 00:07:15.190
All right, let's go back to slides.

00:07:19.070 --> 00:07:24.470
So instead of doing this, please,
NSXML is for Cocoa lovers.

00:07:24.540 --> 00:07:25.400
Use this.

00:07:25.430 --> 00:07:27.560
Be happy.

00:07:30.340 --> 00:07:32.690
Instead of doing this
custom parser with SACS,

00:07:32.700 --> 00:07:35.110
we want you to use these
first-class objects.

00:07:35.180 --> 00:07:39.170
Instead of doing all this scraping,
just use the methods that we have.

00:07:39.280 --> 00:07:41.690
Instead of being difficult, it's easy.

00:07:41.850 --> 00:07:45.630
And instead of it being
error-prone and malformed,

00:07:45.630 --> 00:07:48.340
hey, we'll even fix it up for you.

00:07:48.700 --> 00:07:51.750
So this is, you know,
instead of Apple starting from scratch,

00:07:52.000 --> 00:07:56.590
obviously we're going to use these great
libraries that are already out there.

00:07:59.620 --> 00:08:02.970
So already,
LibXML2 was in the system for Panther.

00:08:03.060 --> 00:08:05.920
Well, now we have LibXSLT and Tidy.

00:08:05.940 --> 00:08:10.260
Then on top of that,
we have all of our standards.

00:08:10.270 --> 00:08:13.580
So if you go to the W3 home page
and look at their specifications,

00:08:13.580 --> 00:08:16.180
well, we've tried to adhere
to that pretty well.

00:08:16.200 --> 00:08:19.560
And as I mentioned, we've got this whole
XQuery engine in there,

00:08:19.680 --> 00:08:21.860
which I'm going to show
you some XQuery later on,

00:08:21.860 --> 00:08:26.240
because I think it's a really
powerful language for processing XML.

00:08:26.240 --> 00:08:29.920
And previously, if you've developed
any Sherlock channels,

00:08:29.940 --> 00:08:31.240
that's what we were using it in.

00:08:31.440 --> 00:08:34.720
We were using XQuery and
JavaScript for channels.

00:08:34.740 --> 00:08:37.020
And last year, we had a Sherlock session.

00:08:37.020 --> 00:08:41.080
Everyone's like, hey, why can't I use
XQuery outside of Sherlock?

00:08:41.090 --> 00:08:42.700
Well, here you go.

00:08:42.720 --> 00:08:46.470
And then NSXML encompasses all of that.

00:08:46.580 --> 00:08:49.680
So we're going to go
into a pretty long demo.

00:08:49.840 --> 00:08:53.400
But before we get there,
this is sort of what I think is what

00:08:53.400 --> 00:08:55.300
you're regularly going to do with NSXML.

00:08:56.400 --> 00:08:58.480
Is you have some data out there.

00:08:58.480 --> 00:08:59.780
You find it.

00:08:59.780 --> 00:09:01.960
You're pulling a little bit out of it.

00:09:01.960 --> 00:09:03.840
And then you have some sort of template.

00:09:03.840 --> 00:09:06.570
And you're pushing in that new data.

00:09:07.430 --> 00:09:11.940
Now I'd like to invite
Helena Ju up to the stage.

00:09:11.960 --> 00:09:16.550
Helena works on Final Cut,
which can now import and export

00:09:16.550 --> 00:09:19.300
XML with Final Cut Pro HD.

00:09:24.120 --> 00:09:26.400
We're not ready for the demo machine yet.

00:09:26.470 --> 00:09:29.680
If we could go back to slides.

00:09:29.780 --> 00:09:31.660
Thank you very much.

00:09:31.680 --> 00:09:32.160
OK.

00:09:32.160 --> 00:09:33.600
Let's just say what our problem is.

00:09:33.810 --> 00:09:36.060
Well, it's a typical problem.

00:09:36.200 --> 00:09:39.590
You've got some sort of person,
an artist that's done a

00:09:39.610 --> 00:09:40.720
really great template.

00:09:40.810 --> 00:09:43.580
And then you have this database,
or you have all this

00:09:43.580 --> 00:09:46.860
information somewhere,
and you want to put it in.

00:09:46.990 --> 00:09:50.980
So typical sort of separation
of content and display.

00:09:51.090 --> 00:09:53.220
So in particular,
I already showed you the

00:09:53.220 --> 00:09:55.080
iTunes Music Store RSS.

00:09:55.320 --> 00:09:57.820
And we're going to use
that again for this demo.

00:09:57.940 --> 00:10:01.370
So we want to have some sort of
template where it has the song name,

00:10:01.370 --> 00:10:03.190
artist name, the rank.

00:10:03.380 --> 00:10:05.750
And we're going to add
in some new information,

00:10:05.750 --> 00:10:07.460
which is the rank change.

00:10:07.610 --> 00:10:11.020
So it's always bugged
me that I can check out,

00:10:11.020 --> 00:10:12.520
well, what are the top 10 songs?

00:10:12.680 --> 00:10:15.740
But are they new today,
or did they change from yesterday?

00:10:15.740 --> 00:10:18.460
Is number one going down,
or is it going up?

00:10:18.540 --> 00:10:20.230
So we're going to add that in.

00:10:20.350 --> 00:10:22.250
So go to the RSS.

00:10:22.530 --> 00:10:26.670
And then this is what we want to make,
is put this information

00:10:26.670 --> 00:10:28.250
into the template.

00:10:28.400 --> 00:10:31.360
So now we'll go to the demo machine.

00:10:33.780 --> 00:10:40.210
And one way we could do this is
just make some simple XML and

00:10:40.330 --> 00:10:41.760
apply a style sheet to it.

00:10:42.100 --> 00:10:43.840
And Safari can actually deal with that.

00:10:44.020 --> 00:10:46.590
So you have this processing
instruction that says,

00:10:46.630 --> 00:10:48.390
this is my style sheet.

00:10:48.740 --> 00:10:50.700
And you don't even need
to bother writing HTML,

00:10:50.700 --> 00:10:51.750
and it can look great.

00:10:53.140 --> 00:10:56.690
And we've made this demo for
you that will be available at

00:10:57.130 --> 00:10:58.810
approximately 6:30 this evening.

00:10:58.880 --> 00:11:01.230
So you can try this out yourselves.

00:11:01.320 --> 00:11:05.030
And we're just going to modify it
a bit to make it better for stage.

00:11:05.030 --> 00:11:08.380
So we're just going
to build and run this.

00:11:09.620 --> 00:11:10.220
And here we go.

00:11:10.390 --> 00:11:13.400
So this is XML with a style sheet.

00:11:13.570 --> 00:11:14.540
It's not HTML.

00:11:14.750 --> 00:11:17.810
So let's just check out, view the source.

00:11:18.820 --> 00:11:19.990
Right?

00:11:20.110 --> 00:11:22.440
So we're going to do something
really similar to this.

00:11:22.480 --> 00:11:25.840
But the web,
it's good to a certain point.

00:11:26.000 --> 00:11:28.230
Can we go back to the slides now?

00:11:29.120 --> 00:11:31.430
But really,
we want to do something more exciting.

00:11:31.740 --> 00:11:33.110
We want to make a video.

00:11:33.240 --> 00:11:36.200
So we're going to do something
in Final Cut Pro instead.

00:11:36.290 --> 00:11:39.210
So I just want to give you a summary
of the algorithm we're going to use

00:11:39.210 --> 00:11:41.030
so you don't get lost along the way.

00:11:41.200 --> 00:11:43.510
So this is what the RSS looks like.

00:11:43.620 --> 00:11:45.930
I briefly showed it.

00:11:46.020 --> 00:11:49.000
No, I'm just showing it to you
now for the first time.

00:11:49.000 --> 00:11:51.340
So we have a whole bunch of items.

00:11:51.430 --> 00:11:53.780
And there's this namespace, ITMS.

00:11:53.990 --> 00:11:57.300
So instead of just being a straight,
regular RSS,

00:11:57.350 --> 00:11:58.970
we've added in this namespace.

00:11:59.010 --> 00:12:02.140
And it contains a whole bunch
of information attached to it.

00:12:02.200 --> 00:12:05.120
We have the artist name, the album,
the link.

00:12:05.290 --> 00:12:10.550
And we're going to be using the link
as our unique ID to compare between

00:12:10.690 --> 00:12:14.160
the two different versions of the XML.

00:12:14.270 --> 00:12:19.390
Then we're going to use XQuery and
extract out the information we want and,

00:12:19.390 --> 00:12:23.460
at the same time,
make the XML a lot simpler to understand.

00:12:23.620 --> 00:12:27.210
So this is at the point that
I left the XML for the sample

00:12:27.280 --> 00:12:28.840
code that you'll be looking at.

00:12:28.930 --> 00:12:30.860
So this is sort of as far as you go.

00:12:30.870 --> 00:12:33.060
And then you apply the and you're done.

00:12:33.090 --> 00:12:36.330
But here we're going to go a bit further,
where we're actually going to

00:12:36.500 --> 00:12:42.000
go into Final Cut Pro and export
some XML from a template and then

00:12:42.420 --> 00:12:45.220
pull all those things together.

00:12:47.600 --> 00:12:49.840
So our data source.

00:12:49.840 --> 00:12:51.680
As I mentioned, XML is everywhere.

00:12:51.680 --> 00:12:53.000
There's lots of places to find it.

00:12:53.180 --> 00:12:56.390
I really encourage you to--

00:12:56.920 --> 00:12:59.230
If you find one data source,
to keep looking,

00:12:59.270 --> 00:13:02.780
because the coolest applications of
this are really when you can bring

00:13:02.780 --> 00:13:04.860
together lots of different sources.

00:13:04.860 --> 00:13:08.490
So instead of stopping
at showing the top 10,

00:13:08.500 --> 00:13:12.830
well, maybe I should go look up
information on the artist,

00:13:12.830 --> 00:13:16.480
or find related tracks
and also display that.

00:13:17.090 --> 00:13:19.870
We've already found the data source,
so we're not going to bother showing

00:13:19.870 --> 00:13:22.670
you that on the demo machine.

00:13:22.750 --> 00:13:26.590
Next,
we are going to extract the information.

00:13:28.270 --> 00:13:31.180
So here, we're going to use XQuery.

00:13:31.180 --> 00:13:33.600
And of course, to use XQuery,
we need to know a

00:13:33.600 --> 00:13:35.760
little bit about XQuery.

00:13:35.830 --> 00:13:41.920
So XQuery, at its basic,
is it incorporates XPath.

00:13:41.920 --> 00:13:44.300
And XPath is quite straightforward.

00:13:44.300 --> 00:13:47.830
So if you're in your shell and you
can move up and down directories,

00:13:47.830 --> 00:13:49.800
you can do basic XPath.

00:13:49.830 --> 00:13:52.970
Dot is your context item,
just like it is in your

00:13:53.070 --> 00:13:54.340
directory structure.

00:13:54.340 --> 00:13:57.580
And if you want to go
dot slash with a name,

00:13:57.580 --> 00:14:00.160
well,
that goes one element down the tree.

00:14:00.210 --> 00:14:04.720
So say I went dot slash a,
that would give me all my links.

00:14:04.720 --> 00:14:08.550
If I went dot slash slash a,
that would give me every

00:14:08.550 --> 00:14:11.110
single link in the tree,
instead of just the

00:14:11.230 --> 00:14:13.860
children names that match.

00:14:13.860 --> 00:14:16.600
And dot dot goes up.

00:14:16.650 --> 00:14:18.040
So that's really straightforward.

00:14:18.040 --> 00:14:22.480
But then we can add these predicates in,
which makes it much more powerful.

00:14:22.480 --> 00:14:25.020
Because inside a predicate,
you can have any XPath or

00:14:25.100 --> 00:14:26.800
XQuery function you want.

00:14:27.110 --> 00:14:30.280
And there's really a lot of them,
which I'll show you in a minute or two.

00:14:30.520 --> 00:14:35.150
So you can do string matching,
including regular expressions

00:14:35.290 --> 00:14:38.700
based on the Perl-compatible
regular expression library.

00:14:38.700 --> 00:14:41.140
And what else?

00:14:41.140 --> 00:14:43.600
Match based on what
kind of element it is,

00:14:43.780 --> 00:14:46.080
text or attribute.

00:14:46.390 --> 00:14:51.990
So we'll go back to the demo machine
now and show how easy this can be.

00:14:52.600 --> 00:14:59.650
So with our iTunes RSS, which here it is,
in Objective-C we could say, oh,

00:14:59.650 --> 00:15:03.510
give me my first child, move down,
give me my next child,

00:15:03.600 --> 00:15:07.660
walk through the tree, try to find this,
try to find all the items.

00:15:07.910 --> 00:15:15.540
And the items are-- could
you just scroll down a bit?

00:15:15.540 --> 00:15:15.980
Yeah.

00:15:15.980 --> 00:15:15.980
So we have this whole series of items.

00:15:16.170 --> 00:15:18.760
And if all you have is
items as your children,

00:15:18.760 --> 00:15:20.100
well, that's fine.

00:15:20.160 --> 00:15:22.660
But what if there's a comment in between?

00:15:22.830 --> 00:15:26.080
Well, now suddenly you have to walk
through all of the children just

00:15:26.080 --> 00:15:28.050
looking for the ones that are items.

00:15:28.180 --> 00:15:31.900
So XQuery cuts out this whole stuff.

00:15:32.030 --> 00:15:40.730
So if we go to the XQuery tab,
if we want to find all the items,

00:15:40.730 --> 00:15:40.730
all we type is ./item.

00:15:46.930 --> 00:15:48.890
And there they are.

00:15:49.000 --> 00:15:53.360
And say we want all of the
song names on those items.

00:15:53.380 --> 00:15:56.910
Well, that's itms:song.

00:15:58.110 --> 00:16:00.240
Okay, there's all of our song names.

00:16:00.350 --> 00:16:04.580
Say we want the song Links, well,
we just add on Link.

00:16:04.580 --> 00:16:06.810
So it's really, it's that simple.

00:16:06.810 --> 00:16:11.440
I mean, that's a lot easier probably
than whatever you've been doing.

00:16:11.440 --> 00:16:14.350
So if we can go back to slides now.

00:16:17.880 --> 00:16:22.900
Now, if we want to-- so as
mentioning all those functions,

00:16:23.090 --> 00:16:24.160
here's some of them.

00:16:24.180 --> 00:16:30.850
There's around 144 of them.

00:16:30.850 --> 00:16:33.540
I really encourage you to use
xQuery when dealing with XML as

00:16:33.540 --> 00:16:33.540
a more fully fledged language.

00:16:34.340 --> 00:16:37.290
So if we want to do something
to each of those items,

00:16:37.410 --> 00:16:39.740
then we need some sort of iterator,
right?

00:16:39.780 --> 00:16:43.110
And in xQuery,
that's called the flower statement.

00:16:43.220 --> 00:16:45.880
So it's really similar to an SQL.

00:16:46.270 --> 00:16:51.960
You're a select,
order by-- I haven't used SQL in forever.

00:16:51.980 --> 00:16:54.300
I like sQuery a lot.

00:16:54.470 --> 00:16:58.630
So your flower statement here,
you have for, let, order by, where,

00:16:58.630 --> 00:16:59.700
and return.

00:16:59.880 --> 00:17:02.990
And a lot of xQuery, you'll see,
will just have a whole bunch

00:17:02.990 --> 00:17:04.310
of for and let statements.

00:17:04.570 --> 00:17:09.780
So for is your iterator,
and let is your assignment statement.

00:17:09.860 --> 00:17:12.560
Then you order by and you
always need to have a return,

00:17:12.560 --> 00:17:15.610
which is sometimes confusing
for new people to the language.

00:17:15.660 --> 00:17:20.350
You can't go let, let and return.

00:17:20.500 --> 00:17:23.490
You have to have the return.

00:17:24.460 --> 00:17:28.500
If you have a really big XQuery file,
we also encourage you to

00:17:28.540 --> 00:17:31.890
put it in a separate file,
which we'll be doing.

00:17:32.000 --> 00:17:34.860
Whereas if you just
have a one-line XPath,

00:17:34.870 --> 00:17:38.740
you should just write it
straight within the code.

00:17:38.740 --> 00:17:40.770
Back to our demo.

00:17:45.730 --> 00:17:50.840
So back in NSXML browser,
we just want to show a simple

00:17:50.840 --> 00:17:55.190
flower statement before
we get into the code here.

00:17:55.220 --> 00:17:59.900
So if we want to loop
over all of the items,

00:18:00.000 --> 00:18:02.870
we want to say $4 item.

00:18:03.030 --> 00:18:08.520
Dollar is the way of
denoting variables in XQuery.

00:18:08.620 --> 00:18:12.150
And we're going to grab
each of the song names.

00:18:13.200 --> 00:18:17.750
And also get the album title and
then concatenate them together and

00:18:17.750 --> 00:18:23.200
just return that and then join the
whole sequence together with returns.

00:18:23.530 --> 00:18:25.350
So if we run that.

00:18:32.680 --> 00:18:35.740
So in XQuery, everything is a sequence.

00:18:35.740 --> 00:18:38.460
Even if it's one item,
it's still a sequence of one.

00:18:38.460 --> 00:18:40.140
And you can't nest sequences.

00:18:40.240 --> 00:18:44.810
So in our return statement,
if we'd written a return

00:18:44.810 --> 00:18:47.110
of a sequence there,
it would just end up

00:18:47.180 --> 00:18:48.390
appending them all together.

00:18:48.480 --> 00:18:52.220
It's just a little gotcha that
you want to watch out for.

00:18:52.220 --> 00:18:55.060
So now we're going to go
straight into the code.

00:18:55.760 --> 00:19:00.040
And go back to-- I talked about step one,
but we didn't show the code

00:19:00.040 --> 00:19:03.690
because the code is so similar
to what I did in the first demo.

00:19:04.870 --> 00:19:08.990
So here we are getting our
old RSS and our new RSS.

00:19:09.040 --> 00:19:11.740
And these are sort of
pre-canned versions I saved.

00:19:11.740 --> 00:19:14.220
I think one of them is from last
Friday and one is on Monday.

00:19:14.220 --> 00:19:18.520
So that will be the two
lists that we're comparing.

00:19:19.440 --> 00:19:22.700
And we go to step two.

00:19:22.840 --> 00:19:27.070
Step two is where we're
actually applying the X query.

00:19:29.180 --> 00:19:32.100
So here we're getting, as I mentioned,
we want to store it in a separate file

00:19:32.100 --> 00:19:35.120
because our X query is quite large,
which we're going to go

00:19:35.120 --> 00:19:36.770
through in another minute.

00:19:37.400 --> 00:19:40.360
The NSBundle, we're just grabbing it.

00:19:40.380 --> 00:19:44.540
And then the next thing you'll
notice is this constants dictionary.

00:19:44.630 --> 00:19:48.440
So XQuery, as I mentioned,
since it's just a one-line function call,

00:19:48.440 --> 00:19:51.100
it can only be really
applied to your current,

00:19:51.100 --> 00:19:54.380
you know, that one object that
you're calling it on.

00:19:54.380 --> 00:20:00.640
So we can say new RSS objects for XQuery,
but we need some way of getting

00:20:00.790 --> 00:20:03.320
the old document in there.

00:20:03.320 --> 00:20:07.040
So to do that,
we have this constants dictionary.

00:20:07.300 --> 00:20:12.770
And this key is going to match
something that we declare in the XQuery.

00:20:12.940 --> 00:20:19.280
So it's a way of just passing information
in between from Objective-C into XQuery.

00:20:19.860 --> 00:20:25.980
And then the last line is our one line
that we do to actually apply the X query,

00:20:25.980 --> 00:20:29.290
and we're going to get back
this big sequence of items.

00:20:29.650 --> 00:20:34.130
So now, instead of looking at
the XQuery in Xcode,

00:20:34.320 --> 00:20:39.270
which has no XQuery syntax coloring,
we're just going to look

00:20:39.410 --> 00:20:41.330
at a canned RTF file.

00:20:42.450 --> 00:20:44.270
Here it is.

00:20:44.390 --> 00:20:47.190
So XQuery comments are these really cute,
smiley faces.

00:20:47.320 --> 00:20:51.480
So you're always happy when
you're working on XQuery.

00:20:52.380 --> 00:20:54.720
So this is what I was talking about,
this first line here.

00:20:54.720 --> 00:20:57.620
This is where we're bringing
in that object that we

00:20:57.620 --> 00:21:00.380
declared in our Objective-C.

00:21:00.470 --> 00:21:02.780
So now we've got these two documents.

00:21:02.780 --> 00:21:05.680
One is the context item, which is dot.

00:21:05.700 --> 00:21:09.250
And then the other one is $olddoc.

00:21:09.410 --> 00:21:10.760
Then we're going to loop through.

00:21:10.990 --> 00:21:15.660
So this is just a really big version
of the small snippet of XQuery I showed

00:21:15.660 --> 00:21:18.130
you just a couple minutes ago.

00:21:18.640 --> 00:21:22.360
So we're getting a few more
attributes than we did before.

00:21:22.360 --> 00:21:26.080
In addition to the song and song link,
we have the artist and album.

00:21:26.080 --> 00:21:29.680
And you'll see here
where it goes slash text,

00:21:29.680 --> 00:21:33.080
parentheses, that's matching a text node.

00:21:33.170 --> 00:21:37.050
So you can also have slash attribute,
slash element.

00:21:37.370 --> 00:21:38.780
So it's really easy to pick out.

00:21:38.780 --> 00:21:40.780
We'll say I want all the comments.

00:21:40.780 --> 00:21:43.170
I go slash, slash, comment.

00:21:44.920 --> 00:21:50.300
Then we want to find how the old
list compares to the new list.

00:21:50.470 --> 00:21:55.870
So there's that song link, remember,
which we can use as the unique ID.

00:21:56.070 --> 00:22:02.120
So we're using this predicate statement,
which, based on the song link,

00:22:02.240 --> 00:22:06.640
in that entire array of old items,
it's going to find just

00:22:07.070 --> 00:22:08.960
the one that matches.

00:22:09.010 --> 00:22:11.030
And of course,
there's the chance it doesn't

00:22:11.030 --> 00:22:12.600
match if the song is brand new.

00:22:12.630 --> 00:22:14.800
And we'll deal with that.

00:22:14.940 --> 00:22:19.030
So then we have this little if statement,
you know, standard stuff.

00:22:19.240 --> 00:22:21.370
And we're just building
up this string that says,

00:22:21.480 --> 00:22:24.890
well,
did the song go up a notch or down two?

00:22:25.030 --> 00:22:28.120
Is it brand new or is it unchanged?

00:22:28.600 --> 00:22:32.190
Then the last thing we do,
if you can see that far.

00:22:32.480 --> 00:22:34.760
Helena, do you want to just move
the whole thing up a bit,

00:22:35.090 --> 00:22:36.750
the whole window?

00:22:52.670 --> 00:22:57.800
So another great thing about XQuery is
instead of having to write in line,

00:22:57.800 --> 00:23:03.700
you know, left, blah, blah, blah, blah,
right, and make sure you match

00:23:03.700 --> 00:23:08.260
your start and end names,
is they have these constructors.

00:23:08.380 --> 00:23:10.760
So this is an element constructor.

00:23:10.760 --> 00:23:13.560
It's going to build an
element with some attributes.

00:23:13.750 --> 00:23:16.360
And our attributes,
we're giving special names here,

00:23:16.370 --> 00:23:21.540
because we're going to use these to match
the names that are in Final Cut Pro.

00:23:21.910 --> 00:23:24.740
And here, also,
a neat thing about the Compute

00:23:24.740 --> 00:23:29.210
Constructors is you can put
any variable you want in there.

00:23:29.220 --> 00:23:31.830
I mean, it's not like hard-coded XML,
right?

00:23:32.160 --> 00:23:34.760
So at the very end of this,
our loop is done.

00:23:35.070 --> 00:23:36.980
We've created this list.

00:23:37.000 --> 00:23:41.610
It's a list of items which
have these four attributes,

00:23:41.610 --> 00:23:49.340
which contain information from the
original RSS plus the rank change.

00:23:49.360 --> 00:23:51.430
And now, if we can go back to slides.

00:23:56.720 --> 00:23:59.920
So now, Final Cut Pro,
we want to create our template.

00:23:59.920 --> 00:24:03.900
So again, there's lots of different ways
of creating this template.

00:24:03.980 --> 00:24:08.480
If you look at applications now,
they can do so much XML that it's crazy.

00:24:08.480 --> 00:24:12.760
And when you go in Illustrator and
you've created this beautiful graphic,

00:24:12.930 --> 00:24:16.320
and then you can export it as
SVG and programmatically turn

00:24:16.320 --> 00:24:17.960
it into whatever you want.

00:24:18.000 --> 00:24:22.410
And I'm really excited about that
because that's one of the annoying things

00:24:22.410 --> 00:24:26.670
for me is you get into this program,
and instantly you want to do this.

00:24:26.700 --> 00:24:28.660
You want to do something
really repetitive,

00:24:28.660 --> 00:24:30.080
especially in Final Cut Pro.

00:24:30.080 --> 00:24:33.340
And now you can just
export the whole thing,

00:24:33.340 --> 00:24:36.440
use a little bit of NSXML and XQuery,
and import it back in,

00:24:36.520 --> 00:24:38.100
and it's all done for you.

00:24:40.710 --> 00:24:44.020
So this is a couple of things
we're going to be looking for in

00:24:44.020 --> 00:24:46.980
our exported Final Cut Pro XML.

00:24:46.980 --> 00:24:52.090
A generator item is going
to be our text elements,

00:24:52.090 --> 00:24:56.600
and then the item will
be the actual text.

00:24:56.680 --> 00:24:58.960
Let's go back to the demo machine.

00:25:03.400 --> 00:25:04.590
Here we are in Final Cut Pro.

00:25:04.720 --> 00:25:08.800
I know for most of you like me,
this was my first time using

00:25:08.890 --> 00:25:11.040
Final Cut Pro for this presentation.

00:25:11.070 --> 00:25:13.750
And it was really fun,
and it wasn't that difficult

00:25:13.870 --> 00:25:15.060
to get something going.

00:25:15.090 --> 00:25:17.790
And then once I had this
little snippet there,

00:25:17.790 --> 00:25:20.380
well,
then I could manipulate it with my mad

00:25:20.380 --> 00:25:25.260
Objective-C programming skills and build
this whole really cool presentation.

00:25:26.770 --> 00:25:31.050
So here we have our template item,
and we've got these four text elements,

00:25:31.050 --> 00:25:32.020
each on their own track.

00:25:32.130 --> 00:25:35.950
So this is important to keep in mind,
because what we're going to do is

00:25:36.120 --> 00:25:38.840
duplicate each of these along the track.

00:25:38.960 --> 00:25:41.960
So we're moving forward in time,
and we're going to change this

00:25:41.960 --> 00:25:43.720
to actually be a real countdown.

00:25:44.480 --> 00:25:46.860
And underneath,
we have a little bit of audio and a

00:25:46.860 --> 00:25:48.590
little bit of video to spice it up.

00:25:48.590 --> 00:25:53.790
So we can just export this.

00:25:54.730 --> 00:25:58.770
And Final Cut Pro, it actually exports
everything that you do in it.

00:25:58.900 --> 00:26:01.490
You think, well, maybe I'm doing this
really cool transition,

00:26:01.490 --> 00:26:03.690
and it's not going to be
able to describe it in XML.

00:26:03.690 --> 00:26:07.510
But Helena and others have
done such an excellent job.

00:26:07.560 --> 00:26:09.350
It's all there.

00:26:09.910 --> 00:26:14.180
So we'll just take a look at what
the exported file looks like.

00:26:14.240 --> 00:26:18.230
So we're giving it this name that we want
to remember when we're back in our code.

00:26:18.560 --> 00:26:22.340
And we're just going to search
for one of those strings.

00:26:26.800 --> 00:26:33.290
So if we scroll up a bit
until we hit a generator item.

00:26:34.320 --> 00:26:36.600
So there's that generator item.

00:26:36.600 --> 00:26:39.960
This is our generated piece of text.

00:26:39.960 --> 00:26:42.260
And above that is track.

00:26:42.260 --> 00:26:45.360
So that's the track that
the generated item is on.

00:26:45.500 --> 00:26:49.600
So what we want to do is
take out this template item,

00:26:49.600 --> 00:26:53.270
because we really don't want
something that says song name,

00:26:53.440 --> 00:26:57.000
and change something inside it,
then push it back in multiple

00:26:57.000 --> 00:27:01.250
times for each of the four things
on their four different tracks.

00:27:03.450 --> 00:27:05.870
Now if we can go back to slides.

00:27:10.300 --> 00:27:12.750
Okay, this is our last step.

00:27:12.800 --> 00:27:16.160
I'm realizing now you'll
be out quite early.

00:27:16.960 --> 00:27:18.930
So we're going to insert
our changed copies.

00:27:19.110 --> 00:27:23.200
So we had the XML that
we created from XQuery,

00:27:23.200 --> 00:27:27.260
and we have this XML that we've
exported from Final Cut Pro.

00:27:27.260 --> 00:27:29.890
Then we're going to put it all together.

00:27:31.410 --> 00:27:34.010
We're going to use some
of these NSXML functions.

00:27:34.200 --> 00:27:37.150
So on the left-hand side,
you have all the sort of

00:27:37.240 --> 00:27:39.260
attributes of your things.

00:27:39.260 --> 00:27:42.550
And then on the right-hand side,
you have everything

00:27:42.550 --> 00:27:44.420
dealing with children.

00:27:44.550 --> 00:27:50.370
So I mean, as you can probably guess,
these things end up being KVO compliant.

00:27:50.480 --> 00:27:52.900
So we'll go back to the demo now.

00:28:01.540 --> 00:28:04.500
I forgot a step.

00:28:04.600 --> 00:28:06.670
Step three.

00:28:06.760 --> 00:28:10.130
Okay,
after we exported the Final Cut Pro XML,

00:28:10.130 --> 00:28:14.450
and I showed you where that
generator item and the track are,

00:28:14.450 --> 00:28:16.580
now we want to find those.

00:28:16.580 --> 00:28:20.560
So we're importing the template,
then we have our array

00:28:20.560 --> 00:28:22.010
with the four keys.

00:28:22.170 --> 00:28:27.140
And remember, we named in Final Cut Pro,
we named our text with the same

00:28:27.140 --> 00:28:31.380
names as the attribute names
that we export from XQuery.

00:28:33.690 --> 00:28:37.000
So we're just going to loop
through each of those four things.

00:28:37.000 --> 00:28:40.950
And we want to build one array
that's the generator items and

00:28:41.020 --> 00:28:45.500
another array of the tracks,
because ultimately,

00:28:45.500 --> 00:28:49.040
the generator items are going
to disappear from the original,

00:28:49.070 --> 00:28:52.150
and we want to insert
things into the tracks.

00:28:55.380 --> 00:28:57.890
And there's that little
bit of XPath there,

00:28:57.890 --> 00:28:59.480
which I should explain.

00:28:59.620 --> 00:29:04.440
So we want to find within that
big exported file just that

00:29:04.560 --> 00:29:08.000
one particular generator item,
right?

00:29:08.370 --> 00:29:12.850
And to do that,
we go look for all the generator items.

00:29:13.350 --> 00:29:17.100
Then we have this predicate
where inside there,

00:29:17.190 --> 00:29:22.020
we look for a text element that
matches based on the name of

00:29:22.020 --> 00:29:24.730
wherever we are inside our array.

00:29:25.470 --> 00:29:32.180
Then we add the generator object and also
its parent to text nodes and track nodes.

00:29:32.970 --> 00:29:35.600
The last thing we do in
the loop is detach it,

00:29:35.850 --> 00:29:38.570
which is obviously
another NSXML function,

00:29:38.740 --> 00:29:41.650
which just takes something
right out of the tree,

00:29:41.650 --> 00:29:46.090
basically setting its parent to nil
and deleting it from the parent.

00:29:46.140 --> 00:29:48.530
Okay, step four.

00:29:48.530 --> 00:29:50.880
This is the last step.

00:29:51.620 --> 00:29:52.840
So you see length there.

00:29:52.960 --> 00:29:55.030
This is so we can move ahead in time.

00:29:55.270 --> 00:29:57.400
We're going around 30 frames a second.

00:29:57.400 --> 00:30:00.640
We want each thing to
play for two seconds.

00:30:01.670 --> 00:30:03.220
Then we get that first item.

00:30:03.360 --> 00:30:06.580
So we've got these 10
items from the XCore,

00:30:06.580 --> 00:30:07.740
remember?

00:30:08.120 --> 00:30:09.920
So that's current.

00:30:09.940 --> 00:30:14.330
Then we're looping through
our four special keys.

00:30:14.860 --> 00:30:19.130
And the first thing we duplicate
is the actual generator item,

00:30:19.160 --> 00:30:22.470
because that's the one we want
to insert our new text in.

00:30:23.060 --> 00:30:26.300
Then we come up with
our replacement string,

00:30:26.330 --> 00:30:32.080
which is the attribute with the same
name matching one of those keys.

00:30:33.710 --> 00:30:36.520
And now we find just the text node.

00:30:36.720 --> 00:30:40.200
So we do a little bit more XPath
just to find the text node.

00:30:40.200 --> 00:30:42.150
Because remember,
we don't want to replace the

00:30:42.210 --> 00:30:43.670
whole text of the generator item.

00:30:43.880 --> 00:30:48.010
We just want to replace
the text where it belongs.

00:30:48.150 --> 00:30:50.430
So we set the string value.

00:30:50.760 --> 00:30:54.700
And then that dot slash
start and dot slash end,

00:30:54.830 --> 00:30:56.190
those are our start and end times.

00:30:56.230 --> 00:30:59.290
We want to make sure that we
actually move forward in time

00:30:59.400 --> 00:31:03.050
and don't end up with our 10
clips all on top of each other.

00:31:04.760 --> 00:31:09.210
Then we add our child and release it.

00:31:09.250 --> 00:31:10.200
And we're done.

00:31:10.300 --> 00:31:12.300
So, I mean,
that's really all there is to it.

00:31:12.450 --> 00:31:15.160
So let's go back.

00:31:15.440 --> 00:31:16.510
Let's run this.

00:31:16.510 --> 00:31:22.290
So see at the very end there,
we just write it back to a file.

00:31:29.700 --> 00:31:33.530
OK, and then we can go back into
Final Cut Pro and import this.

00:31:33.530 --> 00:31:41.470
And it should have our 10 bits from the
RSS in Final Cut moving along in time.

00:31:56.930 --> 00:32:00.240
So we can see we've added that
additional information of whether

00:32:00.270 --> 00:32:02.780
it's unchanged or moved up and down.

00:32:02.900 --> 00:32:06.980
So let's just switch to our pre-canned
rendered version of this and play

00:32:06.980 --> 00:32:09.180
it back and see what it looks like.

00:32:44.800 --> 00:32:59.700
The Expendables from Santa Cruz.

00:33:00.630 --> 00:33:00.790
They're really nice.

00:33:00.790 --> 00:33:00.790
They lent us this
footage and their music,

00:33:00.790 --> 00:33:00.790
so we're not stepping on anyone's feet.

00:33:00.790 --> 00:33:00.790
Now let's go back to slides.

00:33:02.180 --> 00:33:04.460
So in addition to everything
I just showed you,

00:33:04.460 --> 00:33:08.260
I just wanted to show you a
few more header highlights.

00:33:08.350 --> 00:33:15.580
So in addition to exporting XML,
we also can export XHTML or HTML.

00:33:15.580 --> 00:33:17.320
And at this point,
I will encourage you to

00:33:17.320 --> 00:33:19.920
read the release notes,
because there's some things

00:33:20.040 --> 00:33:21.280
that aren't quite finished.

00:33:21.280 --> 00:33:24.980
And there's a couple known bugs
that we don't want you hitting upon,

00:33:24.980 --> 00:33:27.940
but there's generally
workarounds that are known.

00:33:27.940 --> 00:33:30.960
You can also set string
value resolving entities.

00:33:31.220 --> 00:33:36.130
So this is something that I really like,
because it means in your DTD,

00:33:36.300 --> 00:33:39.060
you can just say, hey,
this string should resolve

00:33:39.060 --> 00:33:42.120
to this other string,
and then pass it in with the

00:33:42.120 --> 00:33:45.530
entity and have it resolve for you,
so you don't have to parse through

00:33:45.530 --> 00:33:48.120
your string and replace it later on.

00:33:48.120 --> 00:33:50.320
I showed you objects for XQuery.

00:33:50.320 --> 00:33:54.950
There's also object by applying XSLT,
which is another great

00:33:54.950 --> 00:33:57.320
language slash technology.

00:33:57.320 --> 00:34:01.860
It's sort of, in theory,
similar to XQuery, but I think XQuery is

00:34:01.960 --> 00:34:03.630
a bit more powerful.

00:34:03.820 --> 00:34:06.280
In XSLT,
you can also do some other things,

00:34:06.280 --> 00:34:10.880
like you can export
RTF or you can export PDF,

00:34:10.910 --> 00:34:13.200
depending on how you write your XSLT.

00:34:13.290 --> 00:34:18.360
So that's why it's object by
applying XSLT instead of document,

00:34:18.400 --> 00:34:26.060
because you can get either NSData back
or you can get an NSXML document.

00:34:26.410 --> 00:34:28.580
Then there's also a
resolved namespace for name.

00:34:28.580 --> 00:34:33.020
As I mentioned, we put a lot of work into
having the namespaces just work.

00:34:33.220 --> 00:34:35.680
So when you add something,
it will actually go and find the

00:34:35.680 --> 00:34:39.590
namespace that it's associated with,
which means you can say, hey,

00:34:39.590 --> 00:34:45.940
what's the namespace for bar colon baz,
and it will say, oh, it's http bar.com.

00:34:46.080 --> 00:34:49.150
Then we have fidelity,
which for those of you that are

00:34:49.150 --> 00:34:53.420
using straight libXML2 right now,
is something I know you're not

00:34:53.420 --> 00:34:56.870
getting because it was quite a
bit of work to get this in there.

00:34:56.880 --> 00:34:59.820
So what I mean by fidelity
is just that your input,

00:34:59.970 --> 00:35:03.300
you know, you probably want it to
look like your output.

00:35:03.300 --> 00:35:05.770
So if you've got white space
in between your elements,

00:35:05.770 --> 00:35:07.200
you might want to keep that.

00:35:07.200 --> 00:35:09.940
If you use single quotes or
double quotes on your attributes,

00:35:09.940 --> 00:35:13.290
you know, you might have some reason that
you want to keep those around.

00:35:15.270 --> 00:35:17.170
So that's a big fix as entities.

00:35:17.170 --> 00:35:18.520
So all of this stuff.

00:35:18.520 --> 00:35:22.440
Also keep in mind, though,
that this will be a performance hit.

00:35:22.560 --> 00:35:23.740
I've tested this.

00:35:23.740 --> 00:35:27.430
If you turn on all of these options,
you'll get about a 50%

00:35:27.430 --> 00:35:29.280
performance hit on parsing.

00:35:29.280 --> 00:35:32.200
So just use the ones
that you really need.

00:35:32.430 --> 00:35:34.090
Then, bindings.

00:35:34.250 --> 00:35:39.420
So you briefly saw the
little NSXML application.

00:35:39.420 --> 00:35:41.450
And since we have a minute,
I'm just going to show you

00:35:41.450 --> 00:35:42.380
a little bit more of it.

00:35:42.540 --> 00:35:45.290
If we could go to the demo machine.

00:35:50.280 --> 00:35:53.870
So there's a whole tab here,
which I didn't show you,

00:35:53.870 --> 00:35:57.470
which is where the whole KVO,
KVC comes in.

00:35:57.470 --> 00:36:02.420
So we had our source here,
and there's this Editor tab.

00:36:02.580 --> 00:36:10.120
And you can just move down the tree,
move up the tree, and edit things.

00:36:10.220 --> 00:36:13.370
Here you can see that there's
some namespace and attributes.

00:36:13.450 --> 00:36:15.840
And find information about the document.

00:36:15.910 --> 00:36:18.390
And it really didn't take me
long to put this together.

00:36:18.550 --> 00:36:21.420
It was an exercise in seeing
if our bindings worked.

00:36:21.480 --> 00:36:22.520
And they do.

00:36:22.560 --> 00:36:24.620
I mean, it's great.

00:36:24.620 --> 00:36:29.230
It's basically-- you can build a
whole XML editor really quickly.

00:36:29.360 --> 00:36:32.840
And it also wouldn't take much
effort if you guys went to

00:36:32.840 --> 00:36:34.150
the What's New in Cocoa talk.

00:36:34.370 --> 00:36:39.140
They said that there's
new bindings for trees.

00:36:39.140 --> 00:36:42.490
You should be able to just put
an extra class in there that

00:36:42.690 --> 00:36:48.020
steps to this and be able to do
an outline view editor in a day.

00:36:48.150 --> 00:36:50.370
And let's go back to slides.

00:37:01.240 --> 00:37:01.630
That's it.

00:37:01.710 --> 00:37:03.300
I want to see what you can do.

00:37:03.400 --> 00:37:06.440
We're giving you all of the stuff.

00:37:06.440 --> 00:37:10.700
There's that option
NSXML document tidy HTML,

00:37:10.700 --> 00:37:15.700
which takes your HTML and
converts it into valid XML.

00:37:15.700 --> 00:37:17.860
You can also tidy up XML.

00:37:17.860 --> 00:37:21.720
And as you may have guessed,
we're using the actual HTML tidy library,

00:37:21.720 --> 00:37:23.040
if you've heard of it.

00:37:23.070 --> 00:37:24.840
It's also available on BBEdit.

00:37:27.160 --> 00:37:32.320
There's our five classes, NSXML document,
node, element, DTD, and DTD node.

00:37:32.320 --> 00:37:35.460
And one of the first XQuery engines,
as I mentioned,

00:37:35.540 --> 00:37:39.270
XQuery is now... Its final
call happened in February,

00:37:39.300 --> 00:37:42.660
so it's really getting to
be a stabilized language.

00:37:42.660 --> 00:37:44.780
We don't expect major things
happening like they have

00:37:44.890 --> 00:37:46.160
been the past couple years.

00:37:50.810 --> 00:37:52.540
Please, file bugs.

00:37:52.900 --> 00:37:54.390
I know of a bunch,
but you're probably going

00:37:54.500 --> 00:37:55.300
to find a bunch more.

00:37:55.300 --> 00:37:58.680
So I can't find out about
them unless you file them.

00:37:58.690 --> 00:38:01.380
So get on your bug reporter,
file them in.

00:38:01.380 --> 00:38:03.030
Also, enhancements.

00:38:03.080 --> 00:38:06.360
We know that we haven't covered
everything that you're interested in.

00:38:06.360 --> 00:38:10.130
I'm especially interested in
hearing what people want more

00:38:10.130 --> 00:38:12.470
from the DTD stuff and validation.

00:38:13.620 --> 00:38:16.900
Matthew Formica is our Cocoa evangelist.

00:38:17.060 --> 00:38:18.960
He should be your first
sort of email contact.

00:38:18.960 --> 00:38:23.210
And then there's John Galenzi,
who you probably met at the HHI talk.

00:38:24.880 --> 00:38:29.270
We have a bunch of great
documentation that Terry put together,

00:38:29.270 --> 00:38:31.040
who you'll see in Q&A.

00:38:31.040 --> 00:38:34.970
In addition to the regular
Foundation web page,

00:38:34.970 --> 00:38:41.380
where you'll see the new classes,
there's also this whole prose-based, hey,

00:38:41.380 --> 00:38:42.700
what's NSXML?

00:38:42.700 --> 00:38:46.730
And it goes into how
XML browser was put together,

00:38:46.730 --> 00:38:51.330
how the bindings go together,
little code snippets.

00:38:52.510 --> 00:38:55.320
We have a bunch of great
documentation that Terry put together,

00:38:55.370 --> 00:38:57.220
who you'll see in Q&A.

00:38:57.220 --> 00:39:01.010
In addition to the regular
Foundation web page,

00:39:01.090 --> 00:39:07.250
where you'll see the new classes,
there's also this whole prose-based, hey,

00:39:07.330 --> 00:39:08.590
what's NSXML?

00:39:08.640 --> 00:39:12.510
And it goes into how
XML browser was put together,

00:39:12.510 --> 00:39:17.270
how the bindings go together,
little code snippets.

00:39:18.080 --> 00:39:20.580
I'd like to thank you very much.