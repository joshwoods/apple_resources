WEBVTT

00:00:15.020 --> 00:00:18.600
Good afternoon.

00:00:18.880 --> 00:00:23.030
Before I start,
I recognize a few faces in the audience.

00:00:23.150 --> 00:00:28.590
Can I see how many people have already
done any WebObjects development before?

00:00:30.530 --> 00:00:34.340
Would you forgive me
for asking the question,

00:00:34.340 --> 00:00:36.020
why are you here?

00:00:36.020 --> 00:00:42.290
This is an introductory session on
learning to develop using WebObjects.

00:00:42.290 --> 00:00:48.200
If you've already done a few weeks'
worth of WebObjects development,

00:00:48.200 --> 00:00:51.760
this is probably not the session for you.

00:00:51.760 --> 00:00:55.800
If anybody wants to take the opportunity
to find something more advanced to go to,

00:00:55.800 --> 00:00:55.800
please do so now.

00:00:57.810 --> 00:01:00.860
Okay.

00:01:00.860 --> 00:01:03.090
What will we cover?

00:01:03.470 --> 00:01:05.750
This is going to be,
for those of you who've been on

00:01:05.760 --> 00:01:11.040
any WebObjects programming classes,
about the equivalent of the

00:01:11.040 --> 00:01:17.800
first week's worth of WebObjects
programming class in about 55 minutes.

00:01:17.880 --> 00:01:22.560
I wonder, though, if I might just ask if
the clock has started yet,

00:01:22.560 --> 00:01:22.560
just so I can count down.

00:01:25.210 --> 00:01:28.480
So, it's going to be necessarily
a very rapid run-through.

00:01:28.480 --> 00:01:32.160
We're not going to be able to go into
any great deal of depth on the subject.

00:01:32.160 --> 00:01:35.760
We're going to cover a little
bit about what WebObjects is,

00:01:35.760 --> 00:01:38.470
how you use it,
some of the basic design principles that

00:01:38.470 --> 00:01:42.220
you use with WebObjects as a technology,
some of the main features,

00:01:42.220 --> 00:01:47.200
and some of the benefits that
you get from using WebObjects.

00:01:47.200 --> 00:01:50.630
In particular, as we go through,
we're going to highlight some of the

00:01:50.850 --> 00:01:53.020
more useful aspects of the technology.

00:01:53.160 --> 00:01:56.010
In some respects,
WebObjects is already doing,

00:01:56.320 --> 00:02:00.560
and has been doing for some time,
what a number of other technologies are

00:02:00.560 --> 00:02:05.080
aiming to do in separating the business
logic from the presentation layer.

00:02:05.080 --> 00:02:07.580
What I want to do is
illustrate some of that with

00:02:07.900 --> 00:02:09.780
demonstrations as we go through.

00:02:12.720 --> 00:02:16.240
As I go through this presentation,
there are a few things

00:02:16.240 --> 00:02:17.840
I'm expecting of you.

00:02:17.840 --> 00:02:26.290
The sorts of technologies that WebObjects
developers need to know about in order to

00:02:26.290 --> 00:02:26.290
be successful with this technology are,
first of all, Java.

00:02:26.950 --> 00:02:31.020
It's possible to learn Java as
you're developing and gaining

00:02:31.040 --> 00:02:32.940
experience with WebObjects.

00:02:32.940 --> 00:02:36.880
Who here just out of interest has
not done any Java development before?

00:02:37.000 --> 00:02:38.220
A few of you.

00:02:38.220 --> 00:02:42.270
If you have a look on Apple's website,
you'll find a document,

00:02:42.270 --> 00:02:44.550
Java for WebObjects developers.

00:02:44.690 --> 00:02:49.010
Many people have found that that's a very
useful document for learning just enough

00:02:49.110 --> 00:02:52.460
Java to figure out how to use WebObjects.

00:02:52.460 --> 00:02:57.250
It's actually quite a good introductory
document just for learning Java itself.

00:02:57.290 --> 00:02:59.170
It's also useful to know
something about databases.

00:02:59.190 --> 00:03:00.960
So why are databases useful?

00:03:00.960 --> 00:03:02.220
How do you interact with them?

00:03:02.220 --> 00:03:03.220
And so on.

00:03:03.220 --> 00:03:05.370
And, of course, because it's a web-based
development environment,

00:03:05.370 --> 00:03:09.200
it's useful to know
something about HTML as well.

00:03:09.200 --> 00:03:12.140
As important as any of
these other technologies,

00:03:12.140 --> 00:03:16.500
though, to be successful with WebObjects,
you need an ability to

00:03:16.500 --> 00:03:18.800
think in terms of objects.

00:03:19.080 --> 00:03:21.880
This is a theme that I'm going
to repeat again on a couple

00:03:21.880 --> 00:03:23.420
of occasions throughout.

00:03:23.510 --> 00:03:29.110
For those of you who have come
from a procedural background,

00:03:29.400 --> 00:03:33.830
for those of you who are
used to scripting and so on,

00:03:33.830 --> 00:03:38.680
this may mark a fairly major
paradigm shift for you,

00:03:38.680 --> 00:03:41.460
a different way of thinking
you'll find quite foreign.

00:03:41.460 --> 00:03:41.460
The common theme throughout
is objects for the web.

00:03:42.220 --> 00:03:45.160
What does WebObjects provide for you?

00:03:45.310 --> 00:03:47.950
WebObjects aims to give you
a high degree of abstraction.

00:03:47.950 --> 00:03:53.720
So we've got object representations
of a number of the different state

00:03:53.720 --> 00:03:59.690
management entities and so on that you'll
use during typical web development.

00:03:59.700 --> 00:04:03.140
We therefore get all the benefits
that you traditionally associated

00:04:03.140 --> 00:04:06.860
with object-oriented design,
so reuse, simplicity of concept,

00:04:06.860 --> 00:04:07.520
and so on.

00:04:08.440 --> 00:04:12.790
I want to emphasize that last point,
simplicity of concept.

00:04:13.010 --> 00:04:17.590
One of the, I'd like to suggest,
myths that's commonly associated

00:04:17.590 --> 00:04:21.530
with WebObjects is that it
has a steep learning curve.

00:04:21.620 --> 00:04:28.570
Kudos to Steve Heyman, then,
for pointing out that the benefit

00:04:28.570 --> 00:04:28.570
of a steep learning curve is it
means that you learn an awful

00:04:28.570 --> 00:04:28.570
lot in a short space of time.

00:04:30.370 --> 00:04:38.360
What I would also like to suggest,
though, is that many people find that

00:04:38.360 --> 00:04:38.360
WebObjects has a steep learning curve
because they do not bring to the table

00:04:40.260 --> 00:04:44.100
The knowledge that I listed
earlier is a set of prerequisites.

00:04:44.100 --> 00:04:46.640
People who typically have
difficulties with WebObjects

00:04:46.640 --> 00:04:49.800
are people who don't know Java,
don't know anything about databases,

00:04:49.800 --> 00:04:51.640
and don't know anything about HTML.

00:04:51.640 --> 00:04:58.880
If you bring a knowledge of all
those technologies to the table

00:04:58.880 --> 00:04:58.880
and think in terms of objects,
you'll have a much easier time.

00:04:59.880 --> 00:05:03.460
So bear that in mind as you
approach the technology.

00:05:03.460 --> 00:05:07.130
Another thing to bear in mind is that
having done a lot of training courses

00:05:07.130 --> 00:05:10.500
using this technology in the past,
I've often noticed that people

00:05:10.500 --> 00:05:13.720
have a tendency to make things
difficult for themselves.

00:05:13.720 --> 00:05:19.370
If at any stage you find yourself
struggling with a technology,

00:05:19.370 --> 00:05:23.970
if you can't figure out how
to get things connected,

00:05:23.970 --> 00:05:24.370
if you can't figure out
how to do something,

00:05:24.370 --> 00:05:24.370
stop for a moment.

00:05:25.300 --> 00:05:27.800
Pause.

00:05:27.800 --> 00:05:30.200
Sit back.

00:05:30.200 --> 00:05:31.540
Think back to this session.

00:05:31.540 --> 00:05:33.110
So take a moment,
just have a look around the

00:05:33.110 --> 00:05:35.130
room and familiarize yourself
with this environment.

00:05:35.400 --> 00:05:42.390
Think back to here, and think back to my
voice on stage saying,

00:05:42.440 --> 00:05:46.990
"It's probably easier
than you're making it.

00:05:46.990 --> 00:05:46.990
You're thinking that it's more
complicated than it really is."

00:05:47.370 --> 00:05:50.700
Often to do something
complicated in WebObjects takes

00:05:50.700 --> 00:05:52.480
a couple of lines of code.

00:05:52.480 --> 00:05:56.050
The difficulty, of course,
is figuring out what

00:05:56.050 --> 00:05:58.620
those couple of lines are.

00:05:59.220 --> 00:06:01.310
Let's have a quick recap then
on what WebObjects is all about,

00:06:01.310 --> 00:06:03.290
and in particular,
for those of you who might have been

00:06:03.290 --> 00:06:05.990
to one of the previous sessions or read
a bit about the technology and so on,

00:06:05.990 --> 00:06:08.220
what is WebObjects from a
developer's perspective?

00:06:08.220 --> 00:06:11.300
So as you sit here,
what use will you make of the technology?

00:06:11.300 --> 00:06:14.930
From the perspective that
we're looking at it from today,

00:06:14.940 --> 00:06:19.100
we're looking at WebObjects as
a web development environment.

00:06:19.100 --> 00:06:21.440
So it's a set of tools
and a set of libraries for

00:06:21.450 --> 00:06:23.270
doing web-based development.

00:06:23.720 --> 00:06:26.050
As you're probably aware,
WebObjects is actually useful

00:06:26.130 --> 00:06:29.040
for creating other sorts
of application as well.

00:06:29.040 --> 00:06:31.390
So web services, for example,
you can use it to create

00:06:31.390 --> 00:06:32.940
desktop-based applications and so on.

00:06:32.940 --> 00:06:37.860
But we're concentrating on its initial
strength here of building interactive,

00:06:37.860 --> 00:06:39.240
dynamic websites.

00:06:39.240 --> 00:06:42.390
The main strength and the main reason
that many people are interested in the

00:06:42.390 --> 00:06:45.560
technology is because it's particularly
good at talking to databases.

00:06:47.240 --> 00:06:51.610
So if you need to create a dynamic
website that talks to an Oracle database,

00:06:51.610 --> 00:06:54.970
a database or whatever,
WebObjects gives you an excellent

00:06:55.120 --> 00:06:57.160
set of technologies for doing that.

00:06:57.200 --> 00:06:58.460
It's also especially scalable.

00:06:58.600 --> 00:07:01.470
So if you bear in mind that, for example,
the iTunes Music Store uses

00:07:01.470 --> 00:07:05.930
WebObjects as a backend technology,
that gives you an idea of how robust,

00:07:05.960 --> 00:07:08.730
how scalable,
and so on this technology is.

00:07:08.770 --> 00:07:13.560
It's been around for a long time,
so its heritage goes back a decade or so.

00:07:14.680 --> 00:07:17.390
In terms of where WebObjects sits,
in many respects,

00:07:17.390 --> 00:07:19.780
it can be considered as being middleware.

00:07:19.990 --> 00:07:23.500
If we look to this report card,
one of its main goals is

00:07:23.500 --> 00:07:25.400
to play well with others.

00:07:25.400 --> 00:07:27.130
So it doesn't matter
what web server you use,

00:07:27.140 --> 00:07:30.520
it doesn't matter what database you use,
it doesn't matter what HTML you

00:07:30.520 --> 00:07:34.530
want to produce and so on,
WebObjects fits in with the

00:07:34.730 --> 00:07:37.010
way that you want to work.

00:07:37.020 --> 00:07:40.640
One of the advantages of this,
one of the particular benefits of this,

00:07:40.640 --> 00:07:43.180
and the way the technology
itself is structured,

00:07:43.180 --> 00:07:46.450
is that it allows you to concentrate
on the part of the application

00:07:46.530 --> 00:07:48.360
that you're most interested in.

00:07:48.580 --> 00:07:51.210
As a developer, you're probably most
interested in the Java,

00:07:51.210 --> 00:07:52.350
the application logic.

00:07:52.350 --> 00:07:54.890
It allows your database
admins to concentrate on

00:07:54.890 --> 00:07:57.860
the database side of things,
and your graphic designers

00:07:57.860 --> 00:07:59.560
to concentrate on the HTML.

00:08:03.320 --> 00:08:06.660
Again, from the developer's perspective,
what tools do you use on a daily basis?

00:08:06.660 --> 00:08:08.540
The main one that you're going to use,
certainly on Mac OS X,

00:08:08.540 --> 00:08:10.820
so there are other options for
some of these on other platforms.

00:08:10.820 --> 00:08:13.780
On Mac OS X, you'll use Xcode,
so the traditional

00:08:13.860 --> 00:08:16.180
Mac OS X development environment.

00:08:16.200 --> 00:08:19.430
Can I just see,
has anybody not used Xcode before?

00:08:21.300 --> 00:08:22.350
Okay, so a couple of you.

00:08:22.450 --> 00:08:25.110
But for the rest of you,
familiar territory.

00:08:25.210 --> 00:08:29.320
WebObjects Builder provides you
with a graphical HTML editing tool.

00:08:29.520 --> 00:08:35.130
You can use others,
but WebObjects Builder,

00:08:35.130 --> 00:08:38.090
we'll see in a moment,
obviously has particular strengths

00:08:38.090 --> 00:08:38.090
for dealing with some of the dynamic
elements that WebObjects uses.

00:08:38.360 --> 00:08:47.960
EO Modeler, finally,
is our entity relational mapping tool.

00:08:47.960 --> 00:08:47.960
So it's going to be the key to
figuring out how stuff in the database

00:08:47.960 --> 00:08:47.960
gets into our application on screen.

00:08:50.150 --> 00:08:55.100
Some of the other things that WebObjects
gives us as an entire package,

00:08:55.210 --> 00:08:59.590
it gives us a collection of frameworks
for providing object abstractions for

00:08:59.920 --> 00:09:03.720
most of the entities or things that we
want to deal with as web developers,

00:09:03.720 --> 00:09:09.510
in particular for representing
dynamic web elements,

00:09:09.510 --> 00:09:13.200
that's individual strings, hyperlinks,
web pages, and so on,

00:09:13.200 --> 00:09:13.200
and for doing state management.

00:09:14.010 --> 00:09:16.150
One of the frameworks that I'll
just mention in passing here

00:09:16.150 --> 00:09:18.140
is the Foundation Framework.

00:09:18.210 --> 00:09:22.730
Who's done any Cocoa development or heard
of the Foundation Framework in Cocoa?

00:09:22.920 --> 00:09:26.100
For those of you, again, small number,
there's a fairly strong

00:09:26.100 --> 00:09:29.460
correspondence between the
foundation framework in Cocoa and the

00:09:29.460 --> 00:09:31.560
foundation framework in WebObjects.

00:09:31.560 --> 00:09:39.880
It provides you with a set of utility
classes for representing numbers,

00:09:39.880 --> 00:09:39.880
dates, dictionaries, arrays, and so on.

00:09:41.040 --> 00:09:43.900
In addition,
there are a couple of other frameworks.

00:09:43.960 --> 00:09:48.150
The WebObjects framework itself
provides the object abstractions

00:09:48.150 --> 00:09:54.660
for the dynamic elements,
and then there's a couple of frameworks

00:09:54.660 --> 00:09:58.660
that are bundled together in something
called the Enterprise Object Framework,

00:09:58.660 --> 00:09:58.660
which actually interacts
with a database for you.

00:10:00.060 --> 00:10:03.060
So that's WebObjects in a nutshell
from the developer's perspective.

00:10:03.060 --> 00:10:07.540
In the remaining sections,
what I want to look at are, first of all,

00:10:07.540 --> 00:10:10.560
some of the underlying design
patterns that are going to be useful

00:10:10.560 --> 00:10:11.940
to you as WebObjects developers.

00:10:11.940 --> 00:10:14.540
So some of the main ideas
that underlie the technology.

00:10:14.540 --> 00:10:17.130
Then have a look in greater
detail at some of the

00:10:17.160 --> 00:10:19.310
frameworks that you'll be using.

00:10:19.320 --> 00:10:22.150
So what's in the WebObjects framework,
what's in the

00:10:22.570 --> 00:10:24.160
Enterprise Objects framework.

00:10:24.500 --> 00:10:27.770
And see then, particularly illustrated
using demonstrations,

00:10:27.770 --> 00:10:30.780
some of the tasks that you'll
face on a day-to-day basis.

00:10:32.480 --> 00:10:36.600
So, turning first of all to the concepts,
to reiterate a point that I made on

00:10:36.600 --> 00:10:38.870
several occasions up until now then.

00:10:39.070 --> 00:10:40.400
Objects, objects, objects.

00:10:40.490 --> 00:10:42.360
Think in terms of objects.

00:10:42.360 --> 00:10:45.480
Many of the tools that you may
have used in the past will require

00:10:45.480 --> 00:10:48.540
you to think in procedural terms,
require you to do a lot of data

00:10:48.720 --> 00:10:52.400
munging or whatever to figure out
what's going on in your application.

00:10:52.420 --> 00:10:56.200
WebObjects is, as the name implies,
object-oriented.

00:10:56.780 --> 00:11:00.320
So, we have object abstractions for
web page and things on a web page

00:11:00.320 --> 00:11:02.020
that you can send messages to.

00:11:02.020 --> 00:11:05.220
We have object abstractions
for records in the database.

00:11:05.220 --> 00:11:07.670
So, when you retrieve information
from the database,

00:11:07.710 --> 00:11:09.040
you get objects representing the records.

00:11:09.080 --> 00:11:12.620
Even the HTTP request and response
are abstracted out into objects.

00:11:12.620 --> 00:11:15.860
So, for those of you who may in some
environments be used to doing

00:11:15.860 --> 00:11:19.270
your own parsing or messing around
with HTTP request and response,

00:11:19.270 --> 00:11:20.580
don't have to do that.

00:11:20.580 --> 00:11:22.350
We'll see an illustration
of that very early on.

00:11:22.360 --> 00:11:24.180
And then, of course,
for state management.

00:11:25.650 --> 00:11:27.840
So why are we interested
in state management?

00:11:27.840 --> 00:11:31.160
Again, thinking about WebObjects as a
traditional web development environment,

00:11:31.160 --> 00:11:34.900
one of the things that many people
want to get out of a web environment

00:11:34.900 --> 00:11:36.950
is some sort of state management.

00:11:36.960 --> 00:11:39.740
If you're putting up a website,
particularly commercial

00:11:39.740 --> 00:11:43.140
websites these days,
you want to have an idea of a user,

00:11:43.140 --> 00:11:47.480
so that a user has a shopping
cart that they can put stuff

00:11:47.480 --> 00:11:51.320
into and later give you a credit
card number that you can charge,

00:11:51.320 --> 00:11:52.350
that you can earn some money.

00:11:53.100 --> 00:11:56.420
I know that's possibly not part of the
traditional web development environment,

00:11:56.440 --> 00:11:57.320
but there you go.

00:11:57.350 --> 00:12:02.460
So WebObjects provides you with
state management abstractions

00:12:02.520 --> 00:12:05.840
for an individual session,
for an individual user,

00:12:05.840 --> 00:12:09.530
and then for an application,
and then at the level

00:12:09.530 --> 00:12:12.300
of an individual page.

00:12:15.000 --> 00:12:17.710
The design patterns,
the main ones that you

00:12:17.710 --> 00:12:21.580
need to bear in mind,
first of all, Model-View-Controller.

00:12:21.710 --> 00:12:24.940
Has anybody -- who's heard of
Model-View-Controller before?

00:12:25.250 --> 00:12:27.800
This is going to be something if you
go to many of the other sessions,

00:12:27.800 --> 00:12:30.560
particularly the Cocoa sessions,
for those of you who are interested,

00:12:30.560 --> 00:12:33.310
you're going to get drummed into
during the remainder of this week.

00:12:33.360 --> 00:12:38.020
The idea fundamentally behind
Model-View-Controller is the separation

00:12:38.020 --> 00:12:40.400
or the factoring out of function.

00:12:40.400 --> 00:12:42.320
As the name implies,
you have different sorts of

00:12:42.320 --> 00:12:43.700
objects in your applications.

00:12:43.700 --> 00:12:47.520
Model objects, which typically correspond
to records from the database.

00:12:47.520 --> 00:12:49.850
View objects,
which in our case are going to

00:12:49.850 --> 00:12:53.200
represent web pages or dynamic
elements within a web page.

00:12:53.200 --> 00:12:56.470
And then a controller object,
which mediates between the two.

00:12:56.480 --> 00:13:00.570
The idea is that you should not pollute
your model objects in particular with

00:13:00.570 --> 00:13:04.010
any knowledge of the user interface.

00:13:04.030 --> 00:13:06.640
This makes them particularly
reusable between applications.

00:13:06.640 --> 00:13:09.180
Similar story then with the view objects.

00:13:09.180 --> 00:13:12.000
If a view object is not
particularly bothered about what

00:13:12.000 --> 00:13:14.710
sort of data it's presenting,
they're reusable.

00:13:14.720 --> 00:13:17.140
The controller is a glue code
which sits between the two,

00:13:17.140 --> 00:13:20.000
and typically that's unique to
each individual application.

00:13:22.720 --> 00:13:26.060
Another important design pattern,
key value coding.

00:13:26.100 --> 00:13:28.810
Probably again familiar to some
of you from the Cocoa environment,

00:13:28.950 --> 00:13:32.660
the idea behind key value coding
is that it gives you a means of

00:13:32.720 --> 00:13:37.300
accessing an object's properties using
the name of a property as a string.

00:13:37.300 --> 00:13:41.850
So if a person has a first name property,
rather than using an accessor

00:13:41.850 --> 00:13:46.260
method or accessing an instance
variable of that object directly,

00:13:46.260 --> 00:13:49.940
you can use a message such as
value for key and then pass in a

00:13:49.940 --> 00:13:52.570
parameter first name as a string.

00:13:52.700 --> 00:13:55.120
The main advantage of this
is that this gives you very

00:13:55.120 --> 00:13:56.690
good flexibility at runtime.

00:13:56.690 --> 00:14:00.610
You can determine at runtime
what property of an object

00:14:00.620 --> 00:14:02.760
is that you want to access.

00:14:03.110 --> 00:14:07.200
This is what gives WebObjects
an awful lot of its flexibility.

00:14:07.200 --> 00:14:09.470
Another point to bear in mind
here is that in addition to

00:14:09.470 --> 00:14:12.420
asking for just a single property,
you can follow what

00:14:12.510 --> 00:14:14.000
are known as key paths.

00:14:14.000 --> 00:14:17.380
So if a person has a
relationship to their manager,

00:14:17.380 --> 00:14:21.230
and the manager then is another
person who has a first name,

00:14:21.430 --> 00:14:25.510
you can ask a person object for
their manager's first name by using

00:14:25.540 --> 00:14:28.030
the key path manager.firstname.

00:14:28.030 --> 00:14:31.730
So key value coding gives you a
means of traversing relationships.

00:14:32.780 --> 00:14:35.800
The final design pattern that I want
to draw your attention to here is one

00:14:35.860 --> 00:14:40.120
that's perhaps a little bit unexpected:
target action.

00:14:40.220 --> 00:14:42.650
Again, anybody from the Cocoa development
environment or from any other

00:14:42.650 --> 00:14:46.330
development environment who's
heard of target action before?

00:14:46.820 --> 00:14:51.710
A very simple idea, basically, that when,
and certainly in a desktop application,

00:14:51.710 --> 00:14:54.600
if you click a button,
a message is sent to whatever

00:14:54.600 --> 00:14:56.710
object you've connected it to.

00:14:56.720 --> 00:14:59.180
What we'll see, I think,
straight up very,

00:14:59.250 --> 00:15:04.280
very early on is that with WebObjects,
you get a development environment

00:15:04.280 --> 00:15:07.600
that's very much like,
in many respects, a desktop application

00:15:07.600 --> 00:15:08.580
development environment.

00:15:08.580 --> 00:15:11.570
When you click on a
button or a hyperlink,

00:15:11.580 --> 00:15:15.690
you can cause an action message
to be sent to an object.

00:15:21.820 --> 00:15:25.830
To return to frameworks,
for those of you who haven't come

00:15:25.830 --> 00:15:30.750
across the jargon word framework before,
you can think of a framework as being

00:15:30.750 --> 00:15:34.270
pretty much like a class library,
a collection of objects.

00:15:35.050 --> 00:15:38.560
The main differences are, A,
a framework may contain other resources.

00:15:38.560 --> 00:15:43.140
So it may contain HTML,
it may contain documentation,

00:15:43.140 --> 00:15:45.870
it may contain EO model files.

00:15:45.870 --> 00:15:45.870
We'll talk about those later.

00:15:46.240 --> 00:15:49.070
In addition,
one of the main things that may

00:15:49.070 --> 00:15:53.660
affect you as developers here is
that programming using frameworks

00:15:53.660 --> 00:15:58.010
is philosophically rather different
to some of the programming

00:15:58.010 --> 00:16:00.340
that you may have been used to.

00:16:00.340 --> 00:16:06.380
If you're used to procedural
programming or scripting or whatever,

00:16:06.380 --> 00:16:06.380
typically you're used to being in charge.

00:16:07.600 --> 00:16:16.810
at the top of your program,
you'll deal with getting

00:16:16.810 --> 00:16:16.810
information from the HTTP request.

00:16:16.810 --> 00:16:16.810
You'll do something with it,
and at the end, emit HTML, perhaps.

00:16:17.200 --> 00:16:34.300
[Transcript missing]

00:16:34.680 --> 00:16:40.420
People don't,
or developers don't feel that they're

00:16:40.420 --> 00:16:40.420
in control of their application.

00:16:41.360 --> 00:16:48.140
If you find yourself in that situation,
again, sit back, don't worry, relax.

00:16:48.140 --> 00:16:50.730
The reality is you're not in control.

00:16:51.990 --> 00:16:53.340
But that's a good thing.

00:16:53.500 --> 00:16:55.940
What, again,
I hope we'll see very swiftly is

00:16:55.940 --> 00:16:59.400
that letting WebObjects take care
of the heavy lifting frees you

00:16:59.560 --> 00:17:02.880
from a lot of that responsibility
and allows you to concentrate

00:17:02.880 --> 00:17:04.860
on the more interesting things.

00:17:05.020 --> 00:17:08.960
Which would you rather deal with,
HTTP requests and responses or

00:17:09.060 --> 00:17:11.140
the actual application logic?

00:17:11.140 --> 00:17:13.730
I suggest that dealing with the
application logic is going to

00:17:13.730 --> 00:17:17.490
certainly be a more productive
way of using your time.

00:17:18.490 --> 00:17:21.030
So, turning first of all to
the WebObjects framework,

00:17:21.090 --> 00:17:23.800
and we're just going to discuss
it a very little bit before

00:17:23.860 --> 00:17:25.500
going into a couple of demos.

00:17:25.500 --> 00:17:33.750
Remember that the WebObjects framework
is the framework that contains the

00:17:33.750 --> 00:17:37.210
object abstractions for the dynamic
elements you'll have on a page,

00:17:37.210 --> 00:17:37.210
a page itself, and provides the state
management classes.

00:17:37.610 --> 00:17:44.570
The base method, the root, I'm sorry,
the base class for web pages and indeed

00:17:44.570 --> 00:17:48.470
for parts of web pages is Woe Component.

00:17:48.490 --> 00:17:54.180
As you create web pages or new web pages,
you're going to be creating

00:17:54.180 --> 00:17:57.590
new instances or new classes
subclassed from Woe Component.

00:17:57.600 --> 00:18:00.790
Let's illustrate that.

00:18:01.560 --> 00:18:03.440
with the first demo.

00:18:03.470 --> 00:18:06.670
So, quick reminder here.

00:18:07.770 --> 00:18:12.060
I'm not expecting here for
everybody to go away being an

00:18:12.310 --> 00:18:14.820
expert WebObjects developer.

00:18:14.820 --> 00:18:17.930
What I want you to get out
of this is a feeling for what

00:18:17.930 --> 00:18:22.000
WebObjects development is about,
what some of the typical processes are,

00:18:22.000 --> 00:18:25.460
and so on, so that subsequently,
if you want to take a look at

00:18:25.460 --> 00:18:29.520
the product and start using it,
you can feel comfortable having seen

00:18:29.520 --> 00:18:33.820
somebody else do this and seen that
it's not particularly difficult.

00:18:35.820 --> 00:18:37.920
In Project Builder,
I'm going to start off by creating a

00:18:37.920 --> 00:18:45.390
new WebObjects application that I'm
going to inspiringly name WebObjects.

00:18:45.970 --> 00:18:51.770
Hello, Woe World.

00:18:51.770 --> 00:18:51.780
I'm not going to type it correctly.

00:18:52.530 --> 00:18:55.710
And because this is a demo,
let's just ignore all these parts for

00:18:55.710 --> 00:19:02.090
the moment and go and look at the...

00:19:02.530 --> 00:19:11.070
So, just out of the box,
Xcode gives us a project

00:19:11.240 --> 00:19:14.530
that contains a lot of stuff.

00:19:15.580 --> 00:19:21.320
Let's just start off by building and
running that to see what happens.

00:19:21.800 --> 00:19:28.100
Well, it goes away, builds, runs,
and for your convenience,

00:19:28.260 --> 00:19:31.460
it starts up and displays the web page.

00:19:31.490 --> 00:19:33.380
At the moment, there's nothing in it.

00:19:33.640 --> 00:19:34.760
That's probably unsurprising.

00:19:34.760 --> 00:19:36.650
We haven't done anything.

00:19:36.860 --> 00:19:39.360
What do we have to do to
actually configure this and

00:19:39.360 --> 00:19:40.870
get something to display?

00:19:44.100 --> 00:19:49.330
The page that we're seeing
first of all is the main page.

00:19:49.530 --> 00:19:52.370
Out of the box,
the project template provides

00:19:52.740 --> 00:19:56.290
us with a main component,
which comprises a number

00:19:56.290 --> 00:20:00.700
of different files,
including this main.woe thing.

00:20:03.080 --> 00:20:05.240
Which is the template for the first page.

00:20:05.240 --> 00:20:10.370
If I open that in WebObjects Builder,
straightaway I hope you can

00:20:10.370 --> 00:20:15.600
see that WebObjects Builder is
a graphical HTML editing tool.

00:20:18.600 --> 00:20:26.300
[Transcript missing]

00:20:29.460 --> 00:20:34.990
Since that's the first
page that's displayed,

00:20:35.090 --> 00:20:38.820
in the fullness of time,
I get the text that I wanted.

00:20:38.890 --> 00:20:44.560
That's not particularly exciting.

00:20:44.560 --> 00:20:44.560
I said that WebObjects was a dynamic

00:20:44.900 --> 00:20:53.200
[Transcript missing]

00:20:53.900 --> 00:21:00.360
I can replace Woe
World with a Woe String.

00:21:01.600 --> 00:21:16.100
[Transcript missing]

00:21:18.160 --> 00:21:26.240
Let's see what happens
when I click Add here.

00:21:26.320 --> 00:21:29.810
If I go to my Java code,

00:21:30.290 --> 00:21:33.440
We'll see that I've got
a class called Main,

00:21:33.480 --> 00:21:36.360
which is the object that underlies
this page when it's generated,

00:21:36.500 --> 00:21:38.650
that currently just has
a constructor method.

00:21:38.780 --> 00:21:42.250
When I say Add,
let's add some accessor methods as well,

00:21:42.370 --> 00:21:47.950
you'll see I get an instance variable
added and suitable accessor methods.

00:21:48.040 --> 00:21:51.950
In WebObjects Builder,
I also get username added here.

00:21:54.200 --> 00:21:59.400
[Transcript missing]

00:21:59.750 --> 00:22:05.480
The value for this string to be whatever
username happens to be at runtime.

00:22:05.600 --> 00:22:12.520
In my constructor, let's say then I...

00:22:19.940 --> 00:22:22.180
Set that to be something
not particularly dynamic.

00:22:22.180 --> 00:22:25.300
Oops.

00:22:25.300 --> 00:22:30.130
And build and run the application.

00:22:39.350 --> 00:22:49.340
I'm going to pass on for the moment
figuring out how we can actually

00:22:49.340 --> 00:22:50.640
get the user's name directly.

00:22:50.640 --> 00:22:51.700
It's going to come in the next session.

00:22:51.700 --> 00:22:54.150
So let's for now see how can
we get something a little

00:22:54.150 --> 00:22:55.710
bit more dynamic than that.

00:22:55.710 --> 00:22:59.070
Let's suppose we want to
display the current time.

00:23:00.230 --> 00:23:03.760
Again,
we're going to use a woe string and

00:23:03.760 --> 00:23:10.160
add another key for current time.

00:23:10.350 --> 00:23:12.610
In this case, though,

00:23:14.240 --> 00:23:17.400
This is one thing to just pause
and think about for a moment.

00:23:17.400 --> 00:23:22.280
In this case, I'm only going to define
an accessor method.

00:23:22.520 --> 00:23:25.420
This is, in effect, a read-only value.

00:23:25.900 --> 00:23:28.110
I don't need to have an
instance variable for this.

00:23:28.190 --> 00:23:30.890
I just need a means of
generating this value.

00:23:30.900 --> 00:23:34.670
So I'm only going to have a get method,
current time,

00:23:34.730 --> 00:23:37.860
which is going to return an NS timestamp.

00:23:40.490 --> 00:23:43.340
And I can connect that up.

00:23:43.340 --> 00:23:45.620
And without going into
too much detail here,

00:23:45.620 --> 00:23:48.710
associate a date format with that.

00:23:49.950 --> 00:23:55.300
So that specifies how the time is
going to be represented on the page.

00:23:55.300 --> 00:24:05.250
In my current time method then,
rather than returning

00:24:05.250 --> 00:24:05.250
an instance variable,
I'm going to return a new

00:24:08.900 --> 00:24:14.530
NS Timestamp.

00:24:14.590 --> 00:24:14.590
So when a new NS Timestamp
is created with no additional

00:24:16.400 --> 00:24:22.470
Constructor arguments,
it'll be set to the

00:24:22.470 --> 00:24:22.470
current date and time.

00:24:22.470 --> 00:24:22.470
So if I build that,

00:24:37.100 --> 00:24:45.400
[Transcript missing]

00:24:45.960 --> 00:24:48.840
In particular,
a couple of things to notice there.

00:24:48.890 --> 00:24:52.480
We're sitting back being the
passive recipient of messages.

00:24:52.480 --> 00:24:56.250
This illustrates the framework aspect.

00:24:56.550 --> 00:24:57.760
We're not actually doing
anything very active.

00:24:57.760 --> 00:25:00.610
In particular,
has anybody spotted where the

00:25:00.610 --> 00:25:02.790
HTTP request and HTTP response?

00:25:03.000 --> 00:25:21.200
[Transcript missing]

00:25:23.110 --> 00:25:29.330
Rather than just displaying
hello on the first page,

00:25:31.560 --> 00:25:35.430
I want to display a hyperlink,
a hyperlink that's going

00:25:35.430 --> 00:25:36.880
to take us to a new page.

00:25:36.990 --> 00:25:40.530
Hyperlink, you might guess straight off,
is represented by an instance

00:25:40.540 --> 00:25:43.570
or a dynamic element,
Woe hyperlink.

00:25:43.630 --> 00:25:47.500
If I select in this toolbar,
I surround the text that I've

00:25:47.500 --> 00:25:53.220
selected with a hyperlink by
clicking on the Woe hyperlink button.

00:25:53.260 --> 00:25:56.330
A hyperlink is associated with an action.

00:25:58.700 --> 00:26:04.790
So, to my web page,
I'm going to add an action

00:26:04.790 --> 00:26:07.080
this time rather than a key.

00:26:10.410 --> 00:26:13.530
The action method is going
to be called GoToWelcome,

00:26:13.670 --> 00:26:17.760
and it's going to take
us to the Welcome page.

00:26:17.760 --> 00:26:21.110
This is important because I'm
getting a step ahead of myself here,

00:26:21.360 --> 00:26:21.950
deliberately.

00:26:22.030 --> 00:26:25.400
I want you to watch what
happens when I add this.

00:26:26.080 --> 00:26:31.950
Here, go to welcome gets added
to the list of variables.

00:26:32.190 --> 00:26:35.910
Because WebObjects Builder doesn't
know any better at this stage.

00:26:36.020 --> 00:26:42.810
I'm going to specify that the
action associated with the hyperlink

00:26:43.030 --> 00:26:46.540
is go to welcome and save that.

00:26:46.550 --> 00:26:53.730
And now I'm going to add
the welcome component.

00:27:03.500 --> 00:27:11.800
[Transcript missing]

00:27:15.360 --> 00:27:20.470
And a means of setting it,
because I'm going to say,

00:27:20.470 --> 00:27:23.490
"Welcome username."

00:27:26.210 --> 00:27:31.150
If you watched or if you're watching
very carefully when I saved that,

00:27:31.150 --> 00:27:32.790
go to Welcome.

00:27:32.900 --> 00:27:55.200
[Transcript missing]

00:27:56.870 --> 00:28:02.040
A WebObjects component page and takes no
methods is counted as an action method.

00:28:02.720 --> 00:28:05.680
Notice in the action method
that was added to the Java file,

00:28:05.700 --> 00:28:07.960
I get a helpful little hint here,
initialize your component.

00:28:07.960 --> 00:28:10.440
If there's an initialization
that I want to do,

00:28:10.440 --> 00:28:15.590
I can do that after I've created the
instance of the page I'm about to go to.

00:28:20.600 --> 00:28:29.400
[Transcript missing]

00:28:56.580 --> 00:28:59.110
So again,
we get our sort of dynamic content,

00:28:59.160 --> 00:29:01.190
click me,
and I get taken to the next page

00:29:01.550 --> 00:29:03.030
with some new information on it.

00:29:03.040 --> 00:29:06.260
So that was a very quick run-through.

00:29:06.260 --> 00:29:10.260
Let's have a quick recap
of what it was that we saw.

00:29:14.030 --> 00:29:16.160
First of all, actually,
let's just illustrate

00:29:16.160 --> 00:29:18.140
one other point here.

00:29:18.140 --> 00:29:24.170
I sort of mentioned that

00:29:25.600 --> 00:29:30.380
A component comprises a
number of different files.

00:29:30.380 --> 00:29:33.010
There are three files that
we're primarily interested

00:29:33.010 --> 00:29:35.650
in in a WebObjects page.

00:29:35.740 --> 00:29:38.990
First of all, the HTML that defines the
template for the page.

00:29:39.110 --> 00:29:43.160
The Java file is the underlying
business logic for that page.

00:29:43.340 --> 00:29:45.000
And then there's a WAD file.

00:29:45.110 --> 00:29:49.070
The WAD file is what defines the
mapping between what's in the dynamic

00:29:49.350 --> 00:29:51.180
elements and what's in the code.

00:29:51.220 --> 00:29:54.930
The main component is created
by WebObjects automatically.

00:29:55.170 --> 00:29:56.750
points to make about the HTML file.

00:29:56.880 --> 00:29:59.810
Firstly, remember that WebObjects tries
to play well with others.

00:30:00.020 --> 00:30:02.670
Just because you're using WebObjects
does not mean that you can't use

00:30:02.700 --> 00:30:04.550
other web-based technologies as well.

00:30:04.560 --> 00:30:06.570
So if you want to use CSS,
if you want to use

00:30:06.600 --> 00:30:09.460
JavaScript or whatever,
you can use those technologies in

00:30:09.470 --> 00:30:11.500
a WebObjects-based application.

00:30:11.620 --> 00:30:17.850
The only thing that's different
about a WebObjects page is that it

00:30:17.850 --> 00:30:19.310
includes a set of WebObjects tags
to represent the dynamic elements.

00:30:20.580 --> 00:30:23.150
The dynamic elements
that we've seen so far,

00:30:23.180 --> 00:30:26.930
WoW String and WoW Hyperlink,
later on we'll see WoW Image.

00:30:26.960 --> 00:30:29.920
He's got a collection of attributes,
each of which you can set

00:30:29.920 --> 00:30:32.190
graphically using WebObjects Builder.

00:30:32.330 --> 00:30:36.170
The Java file then is the business logic.

00:30:36.970 --> 00:30:39.780
You can put whatever instance
variables you want into the page.

00:30:39.780 --> 00:30:43.060
You can put whatever methods you
want into the page and so on.

00:30:43.060 --> 00:30:47.270
The only difference about some
of the methods is that some

00:30:47.270 --> 00:30:49.840
methods may be action methods.

00:30:49.840 --> 00:30:54.000
Action methods have no arguments
and return an instance of a

00:30:54.000 --> 00:30:56.490
subclass of WoE component.

00:30:56.660 --> 00:30:59.100
These are what you use for navigation.

00:31:00.130 --> 00:31:05.380
The WAD file then is just a simple
text file that binds the two together,

00:31:05.570 --> 00:31:11.070
that specifies what attribute of the
Java page is used for what attribute,

00:31:11.070 --> 00:31:14.780
such as the value, for example,
of a string.

00:31:17.280 --> 00:31:22.510
To go into some new areas then,
let's have a look at state management.

00:31:23.290 --> 00:31:25.850
Typically, when you deal with a
web-based application,

00:31:25.880 --> 00:31:27.590
you're interested in managing users.

00:31:27.810 --> 00:31:31.100
When a person comes to your website,
you want to keep track of them so you

00:31:31.100 --> 00:31:34.340
can find out what products they're
interested in buying and so on.

00:31:35.190 --> 00:31:39.320
Sometimes you need to maintain
application-wide state.

00:31:40.100 --> 00:31:42.740
WebObjects provides you with
abstractions of both of these,

00:31:42.740 --> 00:31:44.670
as you might expect from the names here.

00:31:44.740 --> 00:31:50.940
A session represents the current user,
which you can access from a page

00:31:50.940 --> 00:31:56.060
using a static method session,
which simply returns the current session,

00:31:56.060 --> 00:31:57.420
whoever it happens to be.

00:31:57.510 --> 00:32:02.910
You don't have to do any work in
figuring out who the current user is.

00:32:03.510 --> 00:32:06.020
Similar sort of thing with
the application object.

00:32:06.020 --> 00:32:14.490
If you want to add states
to the application object,

00:32:14.490 --> 00:32:18.020
you can access the application object
from any page using the application

00:32:18.020 --> 00:32:18.020
static method of the application class.

00:32:18.980 --> 00:32:21.580
If you're dealing with dynamic content,
you typically need some means of

00:32:21.580 --> 00:32:23.520
retrieving information from the user.

00:32:23.640 --> 00:32:26.140
So, as you might expect from
a web-based application,

00:32:26.140 --> 00:32:35.790
we have abstractions for a form on a
web page and text fields and so on,

00:32:35.790 --> 00:32:35.790
and also be able to retrieve
information from the user.

00:32:36.750 --> 00:32:39.990
We also have a Submit button,
so a Woe Submit button that

00:32:39.990 --> 00:32:43.800
you can use to allow the user
to submit their information.

00:32:43.800 --> 00:32:49.340
And again,
let's straighten that in a demonstration.

00:32:49.340 --> 00:32:53.690
So going back to our
previous application,

00:32:53.690 --> 00:32:59.090
rather than just click me,
I want to add a form.

00:33:05.100 --> 00:33:21.600
[Transcript missing]

00:33:22.790 --> 00:33:27.060
This time, however,
I'm not going to collect that

00:33:27.060 --> 00:33:29.840
information on the current page.

00:33:30.270 --> 00:33:34.790
Username is probably something I want to
collect at the level of the application.

00:33:35.000 --> 00:33:45.700
[Transcript missing]

00:33:49.070 --> 00:34:01.540
I'm going to show you how to
build a WebObjects application

00:34:01.540 --> 00:34:01.540
using the WebObjects application.

00:34:03.000 --> 00:34:06.300
I can rather happily remove code.

00:34:06.300 --> 00:34:08.630
I don't now need

00:34:09.400 --> 00:34:20.300
[Transcript missing]

00:34:23.270 --> 00:34:36.020
From the second page that I'm going to,
I'm going to get it

00:34:36.530 --> 00:34:39.320
directly from the session.

00:34:39.320 --> 00:34:39.320
Again, build and run.

00:34:53.010 --> 00:34:59.080
Thank you very much.

00:34:59.080 --> 00:35:12.020
I hope that today or tomorrow you
will get a collection of all of these

00:35:12.020 --> 00:35:14.740
examples on the downloadable disk image.

00:35:14.740 --> 00:35:17.960
If you haven't been following just now,
you will have the examples

00:35:17.960 --> 00:35:19.340
to have a look at later.

00:35:19.340 --> 00:35:21.600
Plus, there is a wealth of documentation
already available online.

00:35:23.010 --> 00:35:26.150
So, where do we go from here?

00:35:27.600 --> 00:35:29.770
If we have a look at a little
bit more about some of the other

00:35:29.770 --> 00:35:32.710
dynamic elements that we can use,
there's a whole range of

00:35:32.710 --> 00:35:35.840
different dynamic elements that
WebObjects provides you with.

00:35:35.840 --> 00:35:39.430
In addition just to strings, hyperlinks,
and so on, in particular,

00:35:39.510 --> 00:35:42.360
a repetition to allow you to iterate
over the contents of an array,

00:35:42.360 --> 00:35:44.890
conditional to allow you
to specify whether or not,

00:35:45.050 --> 00:35:47.170
depending on what the
current circumstances are,

00:35:47.170 --> 00:35:49.400
a particular part of a
web page gets displayed.

00:35:49.400 --> 00:35:52.470
We have support for checkboxes,
radio buttons, and so on.

00:35:52.480 --> 00:35:56.020
In particular, then,
we have support for partial components.

00:35:57.320 --> 00:35:59.930
The main page that we've
been creating so far,

00:35:59.930 --> 00:36:03.280
or the welcome page,
could actually be subparts of a

00:36:03.370 --> 00:36:07.150
page that we can reuse in different
applications or on different pages.

00:36:09.160 --> 00:36:12.090
One of the more exciting ones in some
respects is the Woe component content,

00:36:12.100 --> 00:36:14.170
which I urge you to have
a look at at some stage,

00:36:14.170 --> 00:36:16.860
which can represent the
template for a page.

00:36:16.860 --> 00:36:21.860
We can actually have dynamic
templates for our pages as well.

00:36:21.900 --> 00:36:24.640
The only one I want to have a look
at just for now is the Woe repetition

00:36:24.640 --> 00:36:30.660
to illustrate how that can be used to
iterate over the contents of an array in,

00:36:30.660 --> 00:36:34.570
again, another demo, this time starting

00:36:42.920 --> 00:36:49.290
With an existing project.

00:36:49.340 --> 00:36:53.540
So in this project,
I've already defined a session

00:36:53.540 --> 00:37:03.980
class that creates for me
an array of person objects.

00:37:03.980 --> 00:37:03.980
In my first page,

00:37:05.820 --> 00:37:10.560
I want to display their list of
all of the people in that array,

00:37:10.730 --> 00:37:14.480
and I'll do that by
adding a woe repetition,

00:37:14.580 --> 00:37:20.770
which will iterate over all
of the people in that array to

00:37:20.800 --> 00:37:22.880
be able to iterate over those

00:37:25.250 --> 00:37:29.100
I need a variable which will be
set to each of those in turn,

00:37:29.120 --> 00:37:33.260
and that's going to be a
variable of type person.

00:37:33.700 --> 00:37:35.920
You don't need accessor methods.

00:37:36.050 --> 00:37:43.000
So for each person in turn,
I want to display their full name.

00:37:43.000 --> 00:37:50.850
If I build and run that application then,

00:38:08.900 --> 00:38:26.200
[Transcript missing]

00:38:44.000 --> 00:39:08.200
[Transcript missing]

00:39:10.400 --> 00:39:17.400
[Transcript missing]

00:39:23.140 --> 00:39:29.000
I can surround the person's name,
or each person's name,

00:39:29.000 --> 00:39:38.710
with a hyperlink to -- let me
just remind myself -- select

00:39:43.600 --> 00:39:45.100
A person.

00:39:45.110 --> 00:39:48.690
So the action method that will be
invoked when the user clicks on

00:39:48.690 --> 00:39:51.980
the hyperlink is select person.

00:39:52.060 --> 00:40:02.090
What that will do is go to the next page,
which is going to be selection,

00:40:02.090 --> 00:40:02.090
and pass current person
as a selected person.

00:40:03.340 --> 00:40:07.460
The selection page,
you can probably imagine,

00:40:07.460 --> 00:40:09.530
is going to display the
WebObjects application

00:40:12.310 --> 00:40:16.300
The name of the selected person.

00:40:16.300 --> 00:40:20.290
So, I'm passing information
from one page to the next.

00:40:34.810 --> 00:40:38.940
So dealing with iterations or repetitions
within WebObjects turns out to be very

00:40:38.940 --> 00:40:41.120
simple if you think in terms of objects.

00:40:41.260 --> 00:40:45.720
Final thing, just to add here,
to add a little bit of substance to it,

00:40:45.880 --> 00:40:47.980
let's add

00:40:53.240 --> 00:40:57.710
The ability to display a graphic.

00:40:57.710 --> 00:40:58.700
Another accessor method,

00:40:58.740 --> 00:41:03.270
That's a read-only value that
simply returns the person's

00:41:03.820 --> 00:41:07.080
name with the suffix .jpeg.

00:41:09.300 --> 00:41:16.640
Which I can then bind to the
file name of a WoW image.

00:41:16.700 --> 00:41:22.380
In the resources for my project,
I've got a series of images.

00:41:36.210 --> 00:41:39.200
So when I select an individual,
I can see their picture.

00:41:39.200 --> 00:41:45.880
And so on.

00:41:48.020 --> 00:41:52.040
So I hope you're getting the feeling
from this already that it's a

00:41:52.040 --> 00:41:57.080
fairly easy development environment,
in particular very interactive.

00:41:58.700 --> 00:42:03.240
So there's not a big turnaround time.

00:42:03.240 --> 00:42:07.400
You can very quickly see the results
of what it is that you're doing.

00:42:14.000 --> 00:42:19.040
The final thing that I want to come
onto is what many people regard as

00:42:19.040 --> 00:42:24.230
the crown jewels of this technology,
the database access layer.

00:42:25.820 --> 00:42:29.050
Database access, as I mentioned,
is mediated through the

00:42:29.050 --> 00:42:31.750
Enterprise Objects Framework.

00:42:34.280 --> 00:42:38.560
EOF, as perhaps sometimes
confusingly it's referred to,

00:42:38.590 --> 00:42:44.320
is the collection of objects that
mediate between what's in the database

00:42:44.320 --> 00:42:47.510
and the objects in your application.

00:42:47.720 --> 00:42:51.390
Loosely speaking,
you can say that a record or a row in

00:42:51.390 --> 00:42:57.000
your database is going to correspond
to an object in your application.

00:42:57.990 --> 00:43:01.390
In your database, you have tables and
either records or rows,

00:43:01.390 --> 00:43:03.290
depending on your terminology.

00:43:03.440 --> 00:43:09.480
In your application, you have classes and
instances of classes.

00:43:10.780 --> 00:43:29.570
EOF is what maps the two things together.

00:43:29.570 --> 00:43:29.570
Typically, you're dealing at a high
level of abstraction.

00:43:29.570 --> 00:43:29.570
One thing I want to reemphasize here,
and something that applies

00:43:29.570 --> 00:43:29.570
throughout WebObjects,
is that even though you're using

00:43:29.570 --> 00:43:29.570
typically a high level of abstraction,
you are not precluded

00:43:30.100 --> 00:43:37.600
[Transcript missing]

00:43:37.890 --> 00:43:42.680
Even though you're using WebObjects,
you can still use raw SQL if you want.

00:43:42.680 --> 00:43:44.120
You can still use JDBC.

00:43:44.120 --> 00:43:50.180
You can still get the HTTP header
information and so on if you want to,

00:43:50.180 --> 00:43:52.960
if you feel that you need to.

00:43:54.780 --> 00:44:01.540
The other vital thing about
EOF is that it provides a great

00:44:01.540 --> 00:44:05.770
degree of management for you.

00:44:06.060 --> 00:44:09.570
I said, loosely speaking,
an object in your application

00:44:09.570 --> 00:44:13.060
corresponds to a record in the database,
or vice versa,

00:44:13.060 --> 00:44:17.010
because if I simply say that a
record in the database corresponds

00:44:17.010 --> 00:44:25.310
to an object in your application,
there's a temptation to think from

00:44:25.310 --> 00:44:25.580
that that your entire database
is going to end up in memory.

00:44:27.130 --> 00:44:28.600
That is not the case.

00:44:28.600 --> 00:44:32.240
One of the things that
EOF is particularly good at,

00:44:32.240 --> 00:44:35.260
for those of you,
did anybody go to the core

00:44:35.290 --> 00:44:37.480
data presentation just now?

00:44:37.530 --> 00:44:40.550
When Andrea spoke just
now about faulting,

00:44:40.550 --> 00:44:43.670
the same technology applies to EOF.

00:44:43.670 --> 00:44:49.750
You only retrieve into memory using
EOF those records that you actually need.

00:44:50.460 --> 00:44:54.900
If you are collecting a
selection of persons from a

00:44:54.940 --> 00:44:59.660
person table in your database,
you only get enterprise objects created

00:44:59.660 --> 00:45:01.250
for those persons that you retrieve.

00:45:01.250 --> 00:45:06.030
If a person has a
relationship to a department,

00:45:06.300 --> 00:45:13.120
Until such time as you ask a person for
the department to which they belong,

00:45:13.120 --> 00:45:16.920
the department record is not
fetched from the database.

00:45:18.420 --> 00:45:25.400
So, EOF puts bounds for you on the
object graph that you create.

00:45:25.400 --> 00:45:27.350
In particular, it's

00:45:28.300 --> 00:45:31.380
We'll see illustrated in
a couple of slides time.

00:45:31.420 --> 00:45:36.070
EOF also manages relationships
between objects for you.

00:45:36.450 --> 00:45:37.780
How many people do database access?

00:45:37.780 --> 00:45:40.290
Who uses SQL here?

00:45:40.350 --> 00:45:43.000
Okay, so you're probably familiar with
the concepts of primary key,

00:45:43.000 --> 00:45:45.100
foreign key, and so on.

00:45:45.610 --> 00:45:48.400
We'll see that the way that
relationships are represented in

00:45:48.520 --> 00:45:51.980
objects is very different to the way
they're represented in a database,

00:45:51.980 --> 00:45:55.610
and EOF needs to do
some extra work for you.

00:45:56.040 --> 00:45:56.900
How does it do its work?

00:45:56.900 --> 00:45:59.700
Well, again, for those of you who
were at Andreas' session,

00:45:59.750 --> 00:46:02.270
it relies ultimately on a model.

00:46:02.430 --> 00:46:11.330
One of the key parts of developing
your application is that at the outset,

00:46:11.330 --> 00:46:13.300
you should create an ER model
that defines the mapping between

00:46:13.300 --> 00:46:13.300
what's in your application
and what's in the database.

00:46:15.180 --> 00:46:21.460
You can also create custom classes
to represent your data objects.

00:46:21.500 --> 00:46:23.150
You don't have to if you don't want to.

00:46:23.350 --> 00:46:25.780
EOF provides for you an
EO Generic Record class,

00:46:25.780 --> 00:46:27.490
which is able to represent
any sort of entity.

00:46:27.510 --> 00:46:34.230
Typically, however,
in order to add value,

00:46:34.230 --> 00:46:34.230
you'll do some customization.

00:46:34.720 --> 00:46:38.970
It also then provides you with a whole
infrastructure for actually accessing

00:46:39.280 --> 00:46:43.420
the database for making changes to
objects and then saving those changes

00:46:43.420 --> 00:46:45.790
back to the database should you wish.

00:46:46.170 --> 00:46:49.600
Ultimately, as I mentioned, though,
everything is basically

00:46:49.730 --> 00:46:52.560
founded upon the EO model.

00:46:54.360 --> 00:46:57.730
The EO model, you edit graphically
using the EO modeler tool,

00:46:57.730 --> 00:47:00.920
which I'm not going to demonstrate now,
I'm afraid.

00:47:00.950 --> 00:47:03.710
The picture should show you
that basically it's an entity

00:47:03.710 --> 00:47:05.380
relationship modeling tool.

00:47:05.380 --> 00:47:14.980
With it, you can specify what class in
your application is going to be

00:47:14.980 --> 00:47:18.900
used to represent what table in
your database and what columns.

00:47:19.000 --> 00:47:48.400
[Transcript missing]

00:47:50.220 --> 00:47:54.800
In your application,
your database rows or records

00:47:54.870 --> 00:48:01.000
are represented by instances
of enterprise objects.

00:48:01.000 --> 00:48:04.380
We have EOGenericRecord,
and I mentioned on an earlier slide,

00:48:04.380 --> 00:48:05.580
EO Custom Object.

00:48:05.580 --> 00:48:11.660
EOGenericRecord is rather
like a data dictionary.

00:48:11.660 --> 00:48:11.660
It's capable of representing
any sort of entity.

00:48:13.220 --> 00:48:16.680
As a historical footnote,
it happens to inherit

00:48:16.680 --> 00:48:19.880
from EO Custom Object.

00:48:20.710 --> 00:48:23.730
In your applications,
you'll typically just subclass eogeneric

00:48:23.730 --> 00:48:25.450
records should you wish to do so.

00:48:25.450 --> 00:48:28.640
In a subclass,
you can add whatever custom logic,

00:48:28.640 --> 00:48:30.660
whatever behavior you want.

00:48:30.660 --> 00:48:34.280
Again, for those of you who
are at Andreas' session,

00:48:34.280 --> 00:48:38.020
this corresponds to
NSManagedObject in Core Data.

00:48:40.430 --> 00:48:44.620
Some of the behavior that you might
want to add may be very straightforward.

00:48:44.620 --> 00:48:47.200
If we have a person class,
it may be that you simply want

00:48:47.200 --> 00:48:50.640
to have a consistent means of
representing a person's full name.

00:48:50.640 --> 00:48:58.250
So a bit of custom logic would simply
be to implement a full name method,

00:48:58.250 --> 00:48:58.250
which returns a concatenation
of first name and last name.

00:49:02.060 --> 00:49:07.310
If you want to edit enterprise objects,

00:49:10.310 --> 00:49:14.940
Thinking back to what I said about
WebObjects as a technology as a whole,

00:49:15.040 --> 00:49:16.320
you're just dealing with objects.

00:49:16.400 --> 00:49:19.380
What do you do when you want to
edit any other object in Java?

00:49:19.470 --> 00:49:20.500
Simply send a message.

00:49:20.500 --> 00:49:25.490
If you remember also what
I said about key-value coding,

00:49:26.510 --> 00:49:30.900
You can edit a given enterprise object
by simply using key value coding methods,

00:49:30.900 --> 00:49:34.010
such as takeValueForKey.

00:49:34.560 --> 00:49:37.440
So you pass in as arguments
the take value for key method,

00:49:37.450 --> 00:49:42.040
the new value,
and the name of the attribute that

00:49:42.040 --> 00:49:44.930
you want to change as a string.

00:49:45.540 --> 00:49:50.310
Or, if you've implemented your own custom
subclasses of Enge Generic Record,

00:49:50.310 --> 00:49:52.640
which have custom
accessor methods defined,

00:49:52.680 --> 00:49:55.830
you simply call a
relevant accessor method.

00:49:58.720 --> 00:50:04.740
An important point here is that a
similar sort of thing works when you're

00:50:04.740 --> 00:50:10.600
manipulating relationships as when you're
manipulating straightforward attributes.

00:50:11.150 --> 00:50:15.240
WebObjects even handles
many-to-many relationships for you.

00:50:15.240 --> 00:50:19.500
So for the DBAs amongst you who had
to deal with join tables up until now,

00:50:19.640 --> 00:50:22.860
you do not have to deal
with join tables using EOF.

00:50:22.860 --> 00:50:27.010
It's all handled for you,
provided you've specified

00:50:27.010 --> 00:50:28.910
the model correctly.

00:50:31.700 --> 00:50:37.190
So, if you're using,
if you have a relationship, say,

00:50:37.190 --> 00:50:41.420
between a movie entity
and a studio entity,

00:50:41.420 --> 00:50:49.240
and you want to set the movie, sorry,
it's the studio to which a movie belongs,

00:50:49.240 --> 00:50:53.180
if you had a custom subclass
of the original record,

00:50:53.230 --> 00:50:56.660
you might simply send a set
studio message to a given

00:50:57.200 --> 00:50:59.280
instance of a movie class.

00:51:01.700 --> 00:51:05.390
There's a little bit extra work
that you might have to do if

00:51:05.390 --> 00:51:07.790
you have too many relationships.

00:51:10.240 --> 00:51:13.000
for Too Many Relationship to set
the movies for a given studio,

00:51:13.000 --> 00:51:17.280
you might have custom methods,
add to and then name of relationship,

00:51:17.420 --> 00:51:20.220
and remove from name of relationship.

00:51:20.340 --> 00:51:22.800
One of the issues here, though,

00:51:23.010 --> 00:51:27.450
relates back to the issue that
I mentioned about the way that

00:51:27.450 --> 00:51:32.610
relationships are represented in
objects versus the way that they're

00:51:32.610 --> 00:51:34.800
represented in your database.

00:51:35.720 --> 00:51:43.720
If you remember in a database,
a relationship is modeled by

00:51:43.720 --> 00:51:43.720
having a foreign key in a table.

00:51:44.360 --> 00:51:48.380
In the object world,
things are a little bit different.

00:51:48.410 --> 00:51:53.730
With objects, we have references,
whether it be directly to an instance

00:51:53.730 --> 00:51:59.200
of the destination of the relationship,
or a reference to an array that

00:51:59.290 --> 00:52:05.290
contains a collection of instances of
the destination of the relationship.

00:52:05.870 --> 00:52:11.170
Therefore, if we want to assign,
in this example,

00:52:11.280 --> 00:52:16.290
an employee to a different department,

00:52:17.070 --> 00:52:21.160
Our employee, Jackson,
happens currently to belong

00:52:21.250 --> 00:52:23.520
to the Events department.

00:52:24.250 --> 00:52:27.510
If we simply tell Jackson that
you're now in sales,

00:52:27.510 --> 00:52:30.670
if you think about this in
terms of the real world,

00:52:30.750 --> 00:52:34.980
if all that we do is tell Jackson,
his current department doesn't

00:52:34.980 --> 00:52:37.220
know that he's been reassigned.

00:52:37.580 --> 00:52:40.590
Moreover,
the new department that he's going to

00:52:40.760 --> 00:52:43.480
doesn't know that he's being reassigned.

00:52:43.480 --> 00:52:49.700
We have to explicitly tell each of
the two departments about the move.

00:52:49.700 --> 00:52:52.670
It's a similar thing in objects.

00:52:53.770 --> 00:52:56.330
On the database,
all that we would do is change

00:52:56.370 --> 00:52:59.300
the foreign key in a table.

00:52:59.340 --> 00:53:03.360
In objects, we have to be more explicit
and actually send messages to.

00:53:04.470 --> 00:53:06.280
The other two departments.

00:53:06.280 --> 00:53:09.690
If I go back,
one of the things that I skipped over at

00:53:09.720 --> 00:53:18.470
the end of this slide was that there's
actually a rather long method name,

00:53:18.470 --> 00:53:18.470
AddObjectToBothSidesRelationshipWithKey,
which at first is rather intimidating.

00:53:18.830 --> 00:53:22.550
When you start using WebObjects,
you'll learn to like it because

00:53:22.570 --> 00:53:26.390
what it does is it manages
all of this stuff for you.

00:53:32.300 --> 00:53:36.750
So for those of you who are DBAs or
have dealt with databases in the past,

00:53:36.750 --> 00:53:39.780
this is a fairly high
degree of abstraction.

00:53:39.780 --> 00:53:41.360
You don't have to worry
about primary keys.

00:53:41.360 --> 00:53:43.110
You don't have to worry
about foreign keys.

00:53:43.120 --> 00:53:48.060
You don't have to worry about maintenance
of integrity of relationships.

00:53:48.060 --> 00:53:53.330
EOF manages all of that for you.

00:53:53.330 --> 00:53:55.650
A lot of that's managed for
you by the editing context.

00:53:56.130 --> 00:54:02.440
The editing context can be thought of
basically as a sort of scratch pad.

00:54:02.440 --> 00:54:06.360
It's the object that mediates
between you and the underlying

00:54:06.360 --> 00:54:08.410
connection to the database.

00:54:09.040 --> 00:54:13.920
So it's the object that you turn to when
you want to fetch stuff from the database

00:54:13.920 --> 00:54:16.350
and save stuff back to the database.

00:54:16.480 --> 00:54:21.090
It also observes all of the objects
that you've retrieved from the database,

00:54:21.260 --> 00:54:25.080
looks for changes to them,
and then in particular allows you to

00:54:25.080 --> 00:54:27.490
undo those changes should you wish.

00:54:30.040 --> 00:54:33.210
You can get hold of it, sorry,
each session, as you might expect,

00:54:33.210 --> 00:54:36.040
so every user wants to have
their own collection of products

00:54:36.040 --> 00:54:39.000
that they're buying and their
own shopping cart and so on,

00:54:39.190 --> 00:54:47.580
each session comes along with its
own default editing context that

00:54:47.580 --> 00:54:49.130
you typically turn to when you
want to do something like fetch

00:54:49.130 --> 00:54:49.130
information from the database.

00:54:50.390 --> 00:54:52.700
So to fetch information
from the database,

00:54:52.700 --> 00:54:55.480
you have to specify what
it is that you're after.

00:54:55.480 --> 00:55:00.790
You specify it using an object, again,
known as a fetch specification.

00:55:02.200 --> 00:55:10.640
Sending a message,
objects with face specification,

00:55:10.640 --> 00:55:10.640
to the editing context
returns to you a message

00:55:10.900 --> 00:55:23.500
[Transcript missing]

00:55:24.020 --> 00:55:29.400
An editing context to ask
the database through the

00:55:29.400 --> 00:55:37.010
intervening objects in EOF for,
for example, all of the movies whose

00:55:37.320 --> 00:55:40.730
title contains the word Nemo.

00:55:41.160 --> 00:55:48.220
We might also add that we want to have
the objects returned sorted by title.

00:55:48.300 --> 00:55:52.780
So we simply send a message,
object specification, pass the parameter,

00:55:52.780 --> 00:55:56.880
the specification that we
specified to the editing context,

00:55:56.990 --> 00:56:00.420
it returns then a collection of objects.

00:56:01.100 --> 00:56:04.180
The fetch specification itself
contains all the information that

00:56:04.180 --> 00:56:06.980
EOF requires to determine what's
going to be got from the database.

00:56:06.980 --> 00:56:09.940
Minimally,
we must specify the name of the entity,

00:56:09.940 --> 00:56:12.550
so what table is it in effect
that we're interested in.

00:56:12.560 --> 00:56:14.880
We might also want to narrow our search.

00:56:16.390 --> 00:56:20.960
So maybe we say, as in this case,
we're only interested in movies

00:56:20.960 --> 00:56:23.780
whose title contains the word Nemo.

00:56:23.900 --> 00:56:43.800
[Transcript missing]

00:56:46.770 --> 00:56:50.860
This bit of code is a little bit dense,
so apologies for that,

00:56:50.860 --> 00:56:54.630
but this bit of code basically
does all of that for us.

00:56:55.000 --> 00:56:59.300
So first of all, get hold of an editing
context in the first line,

00:56:59.300 --> 00:57:00.140
create a new qualifier,

00:57:00.380 --> 00:57:01.660
Create a new set of sort orderings.

00:57:01.660 --> 00:57:04.620
It only contains a single
sort ordering here.

00:57:04.720 --> 00:57:08.920
And then create our new fetch
specification object and send

00:57:09.010 --> 00:57:11.370
that to our editing context.

00:57:12.900 --> 00:57:17.300
So, didn't give you very long
to have a look at that,

00:57:17.300 --> 00:57:18.970
but I've got a prepackaged
demo that does that.

00:57:29.840 --> 00:57:37.920
You'll notice that I've already
got an ER model in my application.

00:57:50.500 --> 00:57:56.500
I've already set up a repetition
that's going to iterate

00:57:56.540 --> 00:57:59.450
over a collection of movies,
one at a time,

00:57:59.710 --> 00:58:03.950
and display the name of the studio
in this case that I'm interested

00:58:03.950 --> 00:58:06.650
in for no particular reason.

00:58:11.780 --> 00:58:19.690
If I have a look at the code,
the code is basically the same as,

00:58:19.690 --> 00:58:19.690
in essence,

00:58:20.000 --> 00:58:37.100
[Transcript missing]

00:58:39.200 --> 00:58:42.560
Create a qualifier,
create a set of sort orderings,

00:58:42.610 --> 00:58:46.160
a fetch specification,
and then use that fetch specification.

00:59:09.200 --> 00:59:10.600
This is an introductory to
intermediate-level session.

00:59:10.600 --> 00:59:11.860
You will see demonstrations
of the WebObjects tools,

00:59:11.860 --> 00:59:13.120
design and flow of a typical
WebObjects application,

00:59:13.120 --> 00:59:14.790
and a review of deployment scenarios
that allow you to understand how to

00:59:14.790 --> 00:59:16.200
best take advantage of this technology.

00:59:16.200 --> 00:59:18.840
Is this going to be more kind?

00:59:18.840 --> 00:59:20.000
Thank you.

00:59:20.000 --> 00:59:38.760
That's more interesting still.

00:59:57.000 --> 00:59:59.760
Now, I'm going to guess that this
has something to do with some

00:59:59.760 --> 01:00:06.150
of the other setup that was
done after I set my stuff up.

01:00:13.000 --> 01:00:19.360
What's happening is that for some reason
I can't actually connect to the database.

01:00:19.360 --> 01:00:23.200
I suspect that it has something
to do with the IP setup

01:00:23.200 --> 01:00:25.290
that was done afterwards.

01:00:25.540 --> 01:00:27.590
Such is life.

01:00:29.540 --> 01:00:34.320
And I don't think that there's anything
that I can quickly do to rectify that,

01:00:34.330 --> 01:00:38.520
which is, shall we say, unfortunate.

01:00:45.400 --> 01:00:48.600
I'm guessing from the lack of
responses there that that's the answer,

01:00:48.600 --> 01:00:51.400
so I hope you will forgive me.

01:00:51.410 --> 01:00:53.390
That's going to be...

01:00:53.950 --> 01:00:58.290
Even less impressive a demo
than we might have expected.

01:00:58.440 --> 01:01:05.290
If you could imagine that rather
than a collection of error messages,

01:01:06.730 --> 01:01:13.370
This web page displayed a list of
all of the movies that we'd fetched.

01:01:13.540 --> 01:01:18.600
I hope you might agree
that had it worked,

01:01:19.000 --> 01:01:24.030
This is actually not very many
lines of code to go to a database,

01:01:24.330 --> 01:01:27.980
fetch some information,
and collect a series of

01:01:28.030 --> 01:01:31.000
records back from the database.

01:01:31.000 --> 01:01:33.840
The subtle point that
I wanted to make here,

01:01:33.900 --> 01:01:36.350
that I said I was just
glossing over a little bit,

01:01:36.460 --> 01:01:42.330
was notice that in our qualifier,
we'd specified that we're interested

01:01:42.330 --> 01:01:46.590
in the studio name for the movies.

01:01:48.480 --> 01:01:51.980
So rather than just searching by title,

01:01:53.260 --> 01:01:57.610
- Which is searching within the single
table that we were interested in,

01:01:57.720 --> 01:02:00.050
we're actually traversing
a relationship here.

01:02:00.150 --> 01:02:04.780
So we're traversing the
relationship from a movie to

01:02:04.900 --> 01:02:14.500
[Transcript missing]

01:02:15.100 --> 01:02:17.900
We're traversing relationships
in this query as well.

01:02:17.910 --> 01:02:19.690
Not particularly difficult.

01:02:19.880 --> 01:02:21.620
So for those of you who've
used other environments,

01:02:21.720 --> 01:02:24.980
particularly anybody here use DJB?

01:02:26.220 --> 01:02:31.290
Anybody care to do a lines of
code comparison between what

01:02:31.350 --> 01:02:34.230
we should have achieved here,
had the database connection been up,

01:02:34.250 --> 01:02:36.340
and what you would have had to do in EJB?

01:02:36.340 --> 01:02:38.410
Fewer lines of code here?

01:02:38.410 --> 01:02:43.000
Honestly, there's somebody nodding
in the front row.

01:02:43.000 --> 01:02:48.490
So with that,

01:02:51.050 --> 01:02:53.760
I said it was going to be a very,
very quick run-through.

01:02:53.760 --> 01:02:57.290
The goal here was just to give you
some sort of a taste of what it's

01:02:57.290 --> 01:02:59.500
like to do WebObjects development.

01:02:59.560 --> 01:03:02.270
And as you can see,
there's occasional frustrations with it.

01:03:02.530 --> 01:03:07.750
But I hope that you might also see that,
compared with some environments

01:03:07.750 --> 01:03:11.770
that you're used to,
it's actually quite fluid,

01:03:11.770 --> 01:03:16.630
very responsive, and in particular,
there's not many lines of

01:03:16.630 --> 01:03:16.910
code to actually achieve
quite an interesting result.

01:03:17.070 --> 01:03:19.870
The example that I've been through,
I will get up on the

01:03:19.880 --> 01:03:24.340
connect.apple.com site as quickly
as possible after this session.

01:03:24.400 --> 01:03:27.530
It may be tomorrow
evening that it goes up.

01:03:27.670 --> 01:03:34.850
In the interim, though, there's plenty of
documentation available online.

01:03:34.850 --> 01:03:34.850
So WebObjects is very
thoroughly documented.

01:03:36.460 --> 01:03:39.380
Basically, the main place that I would
suggest that you start with is the

01:03:39.400 --> 01:03:42.350
aptly named Getting Started page.