WEBVTT

00:00:12.100 --> 00:00:12.860
Hi, everyone.

00:00:12.860 --> 00:00:14.460
Hope you've been having a good day.

00:00:14.490 --> 00:00:21.700
Thanks for coming to our session,
and it's the evolution of standards.

00:00:21.700 --> 00:00:27.890
I'm very pleased to welcome you
to our panel discussion today,

00:00:27.890 --> 00:00:31.290
and that panel discussion is
going to be led by Dave Singer,

00:00:31.290 --> 00:00:31.290
who is one of our
standards experts at Apple.

00:00:31.290 --> 00:00:31.290
So, Dave?

00:00:31.290 --> 00:00:31.290
Thank you very much.

00:00:32.150 --> 00:00:34.700
So yes,
welcome to the Evolution of Standards.

00:00:34.740 --> 00:00:36.340
This is a moderated panel session.

00:00:36.340 --> 00:00:38.700
We're going to go through a few
slides at the beginning and give

00:00:38.700 --> 00:00:40.140
you time for questions at the end.

00:00:40.140 --> 00:00:42.730
We're going to give you a
rough idea of what's going on,

00:00:42.730 --> 00:00:45.150
what's happened recently,
what may be coming up out of

00:00:45.260 --> 00:00:46.780
the standards organization.

00:00:46.800 --> 00:00:51.230
And I'd like to introduce to you the
distinguished panelists I have here.

00:00:51.230 --> 00:00:53.900
So on the left here,
a leading luminary in the

00:00:53.900 --> 00:00:56.530
video coding business,
a published author,

00:00:56.670 --> 00:00:59.720
and a respected figure
worldwide in video coding,

00:00:59.720 --> 00:01:01.470
Barry Haskell of Apple Computer.

00:01:04.040 --> 00:01:06.790
It gives me great pleasure and
a small frisson of excitement

00:01:06.900 --> 00:01:10.680
to introduce the chair of the
International MPEG Audio Subgroup,

00:01:10.870 --> 00:01:16.420
a sage in the audio coding business,
again a leading figure in the

00:01:16.420 --> 00:01:18.710
international audio business,
Schuyler Quackenbush.

00:01:19.940 --> 00:01:20.900
I'm bringing out the back.

00:01:20.900 --> 00:01:23.660
I'll talk a little bit
about system stuff.

00:01:23.750 --> 00:01:24.850
We're going to introduce the session.

00:01:25.090 --> 00:01:25.790
You ask questions.

00:01:25.860 --> 00:01:27.700
We have a lot of fun.

00:01:28.010 --> 00:01:30.580
So I'm going to go through
the standards organizations,

00:01:30.580 --> 00:01:33.270
at least some of them that you
may have heard of and who they

00:01:33.320 --> 00:01:34.700
are roughly and what they do.

00:01:34.740 --> 00:01:37.280
Give you a couple of things about
some things that I think are

00:01:37.420 --> 00:01:40.900
exciting about what's happened in
systems related standards recently.

00:01:40.950 --> 00:01:44.560
A couple of slides on licensing.

00:01:44.560 --> 00:01:48.690
Then I'm going to turn it
over to Schuyler who's going

00:01:48.690 --> 00:01:48.690
to talk to you about audio,
and then we'll do a

00:01:48.690 --> 00:01:48.690
video update at the end.

00:01:49.170 --> 00:01:51.700
We will be taking lots
of questions at the end.

00:01:51.720 --> 00:01:53.980
And we'll take straightforward
clarification questions

00:01:54.120 --> 00:01:55.620
during the sessions.

00:01:55.990 --> 00:01:59.160
So if you have a clarification question,
don't hesitate to interrupt.

00:01:59.250 --> 00:02:01.040
But if it's a general question,
hold it to the end.

00:02:01.040 --> 00:02:03.580
We're going to leave
plenty of time for it.

00:02:03.620 --> 00:02:06.300
Unlike what you might expect,
we're going to be frank, honest,

00:02:06.360 --> 00:02:09.490
even forthright about questions like,
when will Apple introduce

00:02:09.720 --> 00:02:10.900
a particular technology?

00:02:10.900 --> 00:02:14.390
Or what legal advice do you
have for this and so on?

00:02:14.410 --> 00:02:17.360
In order to save time, however,
I'm going to give you that question now.

00:02:17.360 --> 00:02:18.880
The answer is, we don't know.

00:02:19.080 --> 00:02:23.010
You might want to save those
questions for some other time.

00:02:23.500 --> 00:02:26.030
So the standards organizations,
this is the most boring part,

00:02:26.130 --> 00:02:28.180
so you can sleep for a minute, OK?

00:02:28.180 --> 00:02:30.900
ISO and ITU, two very big organizations.

00:02:30.900 --> 00:02:34.700
ISO has two important working groups
for the QuickTime related people.

00:02:34.770 --> 00:02:39.130
Working group one under SC29,
the Joint Photographic Experts Group,

00:02:39.210 --> 00:02:42.740
the people who brought you Classic JPEG,
JPEG 2000, and so on.

00:02:42.840 --> 00:02:44.080
They're doing lots of exciting work.

00:02:44.200 --> 00:02:46.020
I'm not going to talk about it today.

00:02:46.050 --> 00:02:48.460
Working group 11,
the Motion Pictures Expert Group,

00:02:48.530 --> 00:02:50.310
where we all go to,
they're the people who

00:02:50.380 --> 00:02:52.320
brought you MPEG-1,
MPEG-2, MPEG-4,

00:02:52.320 --> 00:02:55.020
and MPEG with lots of other
numbers behind it too.

00:02:55.030 --> 00:02:58.310
And then the ITU has the
Video Coding Expert Group,

00:02:58.310 --> 00:03:00.940
which you've heard about,
which is where the H.264 work started,

00:03:00.980 --> 00:03:04.480
for example,
and lots of other H-series codecs.

00:03:04.930 --> 00:03:07.560
Cellular telephony â€“ I know that's been
talked about a lot at this session.

00:03:07.560 --> 00:03:10.540
There's two really big
organizations there.

00:03:10.780 --> 00:03:12.150
They're both partnership projects.

00:03:12.150 --> 00:03:15.000
They're partnership projects
between standards organizations,

00:03:15.000 --> 00:03:17.800
believe it or not,
mostly national standards organizations.

00:03:18.010 --> 00:03:21.810
3GPP sets the standards for
roughly the people who are in the

00:03:21.820 --> 00:03:26.410
GSM family of cellular standards,
the ones that started in Europe but

00:03:26.410 --> 00:03:28.800
are now basically worldwide.

00:03:28.800 --> 00:03:32.710
3GPP2 follows the other track,
the CDMA/CDMA2000

00:03:33.060 --> 00:03:34.800
related set of families.

00:03:34.800 --> 00:03:37.290
You'll find them both have
open websites in which you

00:03:37.380 --> 00:03:38.910
can find a lot of information.

00:03:39.360 --> 00:03:41.780
Two more interesting ones:
Society of Motion Picture and

00:03:41.840 --> 00:03:43.140
Television Engineers.

00:03:43.140 --> 00:03:47.190
They do a lot of the standards work
for production and broadcast and so on.

00:03:47.490 --> 00:03:48.110
That's SMPTE.

00:03:48.480 --> 00:03:52.560
And you'll find lots of
information on their website.

00:03:52.700 --> 00:03:57.280
And finally, those of you who are
interested in streaming,

00:03:57.280 --> 00:04:00.990
the standards for
Internet-based streaming,

00:04:00.990 --> 00:04:01.720
the protocol specifications and so on,
they come from the

00:04:01.720 --> 00:04:01.720
Internet Engineering Task Force,
IETF.

00:04:01.800 --> 00:04:04.760
Now, there are also out in that
field industry consortia.

00:04:04.760 --> 00:04:07.400
These aren't really
standards organized as such.

00:04:07.460 --> 00:04:11.140
These people do collaboration
agreements and so on,

00:04:11.430 --> 00:04:13.960
implementation agreements where they
all agree to implement the same thing.

00:04:13.960 --> 00:04:14.960
They do a lot of the testing.

00:04:14.960 --> 00:04:17.410
Sometimes some of the more
business-related discussions

00:04:17.510 --> 00:04:19.010
happen in consortia like this.

00:04:19.020 --> 00:04:21.960
So Internet Streaming Media Association,
ISMA,

00:04:21.960 --> 00:04:26.560
they do interoperability agreements for
the Internet and for IP-based networks.

00:04:27.080 --> 00:04:29.490
Open Mobile Alliance,
they do that for cellular and for

00:04:29.730 --> 00:04:32.870
telephony-related high-level functions.

00:04:32.880 --> 00:04:35.450
DVB, they do it for digital
video broadcasting,

00:04:35.450 --> 00:04:38.370
as their title implies,
mostly based in Europe.

00:04:38.450 --> 00:04:41.310
DVD Forum, they're the key people who
talk about shiny disks,

00:04:41.460 --> 00:04:44.500
and we had a lot about that
yesterday in the H.264 session.

00:04:44.520 --> 00:04:47.450
Finally, the MPEG Industry Forum,
put this one last,

00:04:47.560 --> 00:04:48.920
but it's actually a good place to go to.

00:04:48.920 --> 00:04:52.360
This is one where they promote
and explain MPEG technologies.

00:04:52.360 --> 00:04:54.320
They have a lot of
information on their website.

00:04:54.320 --> 00:04:55.690
They tend to keep a lot of news there.

00:04:55.780 --> 00:04:56.930
It may be a good place for you to start.

00:04:57.090 --> 00:05:01.410
and you'll find lots of links to
other useful places from the MPEG-IF.

00:05:01.780 --> 00:05:03.130
So with that,
I'm going to just give you a little

00:05:03.220 --> 00:05:05.940
quick update of two things that
I think are really exciting in systems.

00:05:06.230 --> 00:05:09.020
Unfortunately,
I know systems is not that exciting.

00:05:09.100 --> 00:05:11.600
So I'm going to talk about file format,
and I'm going to talk about file

00:05:11.680 --> 00:05:13.580
format simply because it's my baby,
okay?

00:05:13.620 --> 00:05:16.100
So you're just going to have
to humor me for one slide.

00:05:16.110 --> 00:05:17.800
What's been going on
with the ISO file format?

00:05:17.880 --> 00:05:19.710
The ISO file format,
as we told you last year

00:05:19.710 --> 00:05:22.720
and the year before,
was adopted into MPEG as the

00:05:22.830 --> 00:05:24.700
basis for the MP4 file format.

00:05:24.710 --> 00:05:26.810
Then it became the
Motion JPEG file format,

00:05:26.810 --> 00:05:29.980
then the 3GPP file format,
and the 3GPP2 file format,

00:05:29.980 --> 00:05:32.500
and the SD Video Card Association's
file format.

00:05:32.550 --> 00:05:36.460
So you can see that this file format's
going places and really going there.

00:05:36.460 --> 00:05:41.020
With the AVC, the H.264 work,
the committee realized that because

00:05:41.110 --> 00:05:46.610
the codec itself offered had such a
variety of features and functions,

00:05:46.610 --> 00:05:49.100
we could do with better
file format support.

00:05:49.200 --> 00:05:52.100
So there's lots of fun stuff in there.

00:05:52.120 --> 00:05:53.820
You can group samples together.

00:05:53.940 --> 00:05:54.700
So you can do layers.

00:05:54.700 --> 00:05:58.080
You can do layering and
sub-sequence selection of an

00:05:58.080 --> 00:06:00.230
AVC session in an ISO-based file.

00:06:00.550 --> 00:06:02.670
You can get much more dependency
information because the

00:06:02.670 --> 00:06:05.410
dependency structure of AVC is
so much more complicated.

00:06:05.540 --> 00:06:08.020
We give you clues in the file format,
or at least we enable you to put

00:06:08.070 --> 00:06:12.350
clues in the file format so you can
disentangle the dependency information.

00:06:12.900 --> 00:06:15.880
There's an amendment underway
which includes those extensions and

00:06:16.160 --> 00:06:17.360
actually a lot of other stuff too.

00:06:17.360 --> 00:06:20.110
A lot of you have been saying, guys,
the ISO file format approach

00:06:20.110 --> 00:06:22.130
to metadata is very weak,
and we knew that.

00:06:22.230 --> 00:06:25.520
So we put in a really good
foundation for metadata support

00:06:25.580 --> 00:06:28.790
and explicit support for MPEG-7,
but it's also open to storing

00:06:28.800 --> 00:06:29.840
other kinds of metadata.

00:06:29.840 --> 00:06:32.880
So if you're a metadata-oriented person,
this amendment may be for you.

00:06:32.880 --> 00:06:36.670
And then there's support
there for content protection.

00:06:36.810 --> 00:06:39.980
So you can do protected,
rights protected DRM content in

00:06:40.110 --> 00:06:41.840
the file format in a standard way.

00:06:42.090 --> 00:06:44.500
So finally we've got a standard
container format for exchanging

00:06:44.500 --> 00:06:46.380
rights protected content,
which is, I think,

00:06:46.380 --> 00:06:47.630
a breakthrough in the industry.

00:06:49.520 --> 00:06:52.040
An interesting development
going on in 3GPP,

00:06:52.040 --> 00:06:53.600
release six is almost done.

00:06:53.600 --> 00:06:55.850
There's a terrific amount of
stuff in there for those of you

00:06:55.850 --> 00:06:57.240
who follow the cellular world.

00:06:57.240 --> 00:07:00.970
This is probably the release that
I think will become the one that becomes

00:07:01.040 --> 00:07:03.520
prevalent in the 3G world very rapidly.

00:07:03.520 --> 00:07:07.980
Not only does it include the H.264 codec,
which will obviously is a video feature,

00:07:07.980 --> 00:07:10.320
but in the systems area,
they finally put content

00:07:10.320 --> 00:07:12.960
protection in there,
so we can talk about rights-protected

00:07:13.050 --> 00:07:14.530
content in the cellular world.

00:07:14.560 --> 00:07:18.510
There's buffer management and
adaptive streaming across the network,

00:07:18.680 --> 00:07:20.220
so we can expect better
quality streaming,

00:07:20.220 --> 00:07:24.310
better adaptation between the handset and
the server back at the operator's place.

00:07:24.380 --> 00:07:26.980
And indeed,
there's RTP retransmission support,

00:07:26.980 --> 00:07:29.600
so if a packet does get lost,
despite all the lower layers'

00:07:29.600 --> 00:07:31.670
attempts to get it through to you,
there's retransmission

00:07:31.670 --> 00:07:32.600
support at that level.

00:07:32.600 --> 00:07:34.380
There's also quality of
experience monitoring,

00:07:34.380 --> 00:07:35.760
which is going to be interesting.

00:07:35.760 --> 00:07:37.310
It's going to enable the
operator to work out,

00:07:37.490 --> 00:07:39.750
hey, that sucked for you,
and not charge you so much before

00:07:39.820 --> 00:07:42.110
you actually had to call them
and complain that it sucked.

00:07:42.180 --> 00:07:43.740
Of course,
they're hoping it won't suck at all.

00:07:43.900 --> 00:07:45.850
And then there's multicast
and broadcast support,

00:07:45.850 --> 00:07:49.950
so there's lots of opportunities in
business now to send out real-time live

00:07:50.060 --> 00:07:54.250
content in a multicast broadcast fashion,
which puts less load on the

00:07:54.260 --> 00:07:56.340
network and obviously should
cost less to the end user.

00:07:58.380 --> 00:07:59.670
So with that,
I'm just going to give you a

00:07:59.670 --> 00:08:01.020
really quick update on licensing.

00:08:01.040 --> 00:08:04.820
So we normally do licensing.

00:08:05.080 --> 00:08:06.400
Licensing is perfectly ordinary.

00:08:06.400 --> 00:08:09.930
There are companies whose job
it is to do basic research and

00:08:09.930 --> 00:08:11.740
development and then license it.

00:08:11.960 --> 00:08:14.350
And we all appreciate that because
we couldn't get that number of

00:08:14.350 --> 00:08:16.800
experts together in the same
place and get the same result,

00:08:16.800 --> 00:08:17.190
right?

00:08:17.200 --> 00:08:20.340
So licensing is a normal part
of the high-tech business.

00:08:20.340 --> 00:08:22.230
It became difficult
over the last few years,

00:08:22.230 --> 00:08:24.430
we know,
but we think it's getting easier again.

00:08:25.300 --> 00:08:28.980
Almost any successful market
needs an interoperable standard.

00:08:28.980 --> 00:08:32.140
You've got to have multiple players
in the market who can interoperate,

00:08:32.490 --> 00:08:34.890
providing the different products
that fill out all the niches,

00:08:34.990 --> 00:08:37.300
both in terms of function
and in terms of placement,

00:08:37.300 --> 00:08:39.080
that are needed to make a market mature.

00:08:40.630 --> 00:08:44.440
For multimedia standards,
licensing models have included encoder,

00:08:44.700 --> 00:08:46.820
decoder, manufacturing,
and bundling fees,

00:08:46.890 --> 00:08:48.120
that's perfectly normal.

00:08:48.120 --> 00:08:50.630
You haven't seen them in the past because
they've typically been embedded in the

00:08:50.790 --> 00:08:52.130
chips that were put into the products.

00:08:52.200 --> 00:08:55.100
So that chip costs a little bit
more because it paid a license.

00:08:55.130 --> 00:08:56.830
There have also been
content replication fees,

00:08:56.900 --> 00:08:57.990
that's perfectly normal again.

00:08:58.050 --> 00:09:01.500
So when you buy a DVD,
there's an amount of money going back

00:09:01.620 --> 00:09:06.130
to the rights owner here who developed
the standards for how you make that DVD.

00:09:06.130 --> 00:09:07.880
That's how they make their money.

00:09:07.880 --> 00:09:11.450
We typically cover a good
chunk of what we can for you.

00:09:11.760 --> 00:09:14.560
So you can use the technology
without having to worry too much.

00:09:16.740 --> 00:09:20.480
So, the question is, of course, okay,
if Apple's covering a good chunk of it,

00:09:20.590 --> 00:09:22.710
do I need a license?

00:09:22.900 --> 00:10:35.800
[Transcript missing]

00:10:36.360 --> 00:10:38.090
So with that,
I'd like to hand it over to Schuyler,

00:10:38.140 --> 00:10:43.270
who's going to give you
an exciting audio update.

00:10:43.270 --> 00:10:43.270
Thanks, Dave.

00:10:49.100 --> 00:10:52.960
Okay, so I want to begin by reviewing
the MPEG audio standards,

00:10:53.020 --> 00:10:57.290
talk about where MPEG has
been and where MPEG is going.

00:10:57.460 --> 00:11:00.300
I'd like to begin the timeline
with the compact disc,

00:11:00.450 --> 00:11:05.340
1982, which I think kicked off the
whole digital audio revolution.

00:11:05.480 --> 00:11:11.970
More than ten years after that,
MPEG standardized MPEG-1, Layer 3,

00:11:12.170 --> 00:11:13.120
or MP3.

00:11:13.470 --> 00:11:16.030
So that is looking already
like a pretty old guy,

00:11:16.100 --> 00:11:20.060
but still holding an important
position in the marketplace.

00:11:20.190 --> 00:11:25.740
Several years after that,
MPEG-2 issued Advanced Audio Coading,

00:11:25.790 --> 00:11:28.680
and this also exists
in the MPEG-4 standard.

00:11:28.740 --> 00:11:34.000
This is arguably the state of the
art in perceptual audio coding.

00:11:34.360 --> 00:11:39.260
Several years after that, 2003,
last year, MPEG issued the high

00:11:39.380 --> 00:11:41.540
efficiency AAC codec.

00:11:41.550 --> 00:11:44.540
This builds on AAC.

00:11:44.540 --> 00:11:49.390
We'll talk about how that works.

00:11:49.390 --> 00:11:52.980
But in fact,
it uses a different dimension,

00:11:52.980 --> 00:11:52.980
exploits a different dimension
to get more compression.

00:11:53.430 --> 00:11:57.900
In 2005, next year,
I anticipate MPEG will issue a

00:11:57.910 --> 00:12:00.870
standard on lossless audio coding.

00:12:00.870 --> 00:12:04.980
So what we see is â€“ I'm giving
you a timeline view here,

00:12:04.980 --> 00:12:09.940
but what we see is that
we've got compression,

00:12:10.070 --> 00:12:11.780
and then we kind of take
a step backwards and say,

00:12:11.780 --> 00:12:13.230
oh, let's do something else.

00:12:13.230 --> 00:12:16.320
Let's do compression,
but I want all the bits back.

00:12:16.380 --> 00:12:20.540
And then finally,
we're about to begin a new work

00:12:20.540 --> 00:12:23.340
item in spatial audio coding.

00:12:23.360 --> 00:12:27.900
We're back in the compression business,
but again, we're not just doing a

00:12:27.900 --> 00:12:29.240
perceptual audio codec.

00:12:29.380 --> 00:12:33.430
We're exploiting a different aspect,
and that actually sounds

00:12:33.430 --> 00:12:37.380
stage compression to give you
total bit rate compression.

00:12:37.380 --> 00:12:40.240
So here's the timeline of
what MPEG's been doing.

00:12:40.320 --> 00:12:43.380
I'm going to stand over here.

00:12:43.380 --> 00:12:46.370
And so let me give you
another view of that.

00:12:46.380 --> 00:12:47.950
of this.

00:12:48.720 --> 00:12:51.600
and look at performance.

00:12:51.600 --> 00:12:56.260
So, the top line is the compact disc and
if you look at the right hand side,

00:12:56.320 --> 00:12:59.070
I want to look at bits
per channel per second,

00:12:59.220 --> 00:13:03.060
which kind of normalizes my whole
rate because we'll see that we're

00:13:03.060 --> 00:13:09.710
going to go from two channel to
multi-channel in the course of

00:13:09.710 --> 00:13:09.710
looking at the various specifications.

00:13:10.310 --> 00:13:13.880
And I reversed the timeline
and we're looking at,

00:13:13.880 --> 00:13:17.940
on the right hand column,
bits per channel per second.

00:13:18.580 --> 00:13:24.540
So the ALS, the audio lossless coding,
it's at 325 kilobits per second.

00:13:24.540 --> 00:13:25.280
That's a lot.

00:13:25.280 --> 00:13:30.640
But that's about two to one compression
and you get all the bits back.

00:13:30.640 --> 00:13:32.020
So it's bit exact.

00:13:32.020 --> 00:13:37.480
I think that number is at
48 kilohertz sampling rate.

00:13:37.490 --> 00:13:40.360
It's not a perceptual coder.

00:13:40.360 --> 00:13:45.620
It's just compress it mathematically
and give me the bits back,

00:13:45.620 --> 00:13:48.330
which is a departure for MPEG.

00:13:48.460 --> 00:13:50.560
Now the next line is MP3.

00:13:50.680 --> 00:13:53.280
It's the oldest of the MPEG coders.

00:13:53.280 --> 00:13:57.720
It's a perceptual audio coder and
it gives you good compression,

00:13:57.720 --> 00:13:59.160
not the best.

00:13:59.280 --> 00:14:03.030
And typically people, I mean,
I think it should be run at like

00:14:03.030 --> 00:14:05.740
80 kilobits per second per channel.

00:14:05.740 --> 00:14:07.890
So 160 kilobits for stereo.

00:14:08.000 --> 00:14:09.950
A lot of people run at 128.

00:14:10.000 --> 00:14:11.930
A lot of people run at 64.

00:14:11.940 --> 00:14:15.080
But at 80, it really sounds good.

00:14:16.520 --> 00:14:22.160
Now I said the next after that was AAC,
and in effect really sounds good at

00:14:22.160 --> 00:14:24.800
64 kilobits per second per channel.

00:14:24.800 --> 00:14:28.990
As a matter of fact,
MPEG benchmarked it as an EBU broadcast

00:14:29.220 --> 00:14:31.170
quality codec at that rate.

00:14:31.200 --> 00:14:37.360
So, as I mentioned before,
MP3 and AAC are perceptual audio coders.

00:14:37.630 --> 00:14:41.620
You're getting compression,
and it primarily exploits aspects

00:14:41.730 --> 00:14:46.270
of human hearing to shape the coding
noise so that you don't hear it.

00:14:48.030 --> 00:14:50.950
Now the next standard
is High Efficiency AAC.

00:14:51.100 --> 00:14:55.000
Again,
another slide will show you how it works.

00:14:55.240 --> 00:14:57.600
Here we're not just
doing perceptual coding.

00:14:57.600 --> 00:15:00.750
In fact, it builds on top of AAC.

00:15:00.770 --> 00:15:05.370
And it uses AAC, but then adds a feature
of coding the bandwidth,

00:15:05.370 --> 00:15:07.780
so-called bandwidth extension.

00:15:08.030 --> 00:15:12.050
It gives you compression by coding
the bandwidth in a clever way.

00:15:12.060 --> 00:15:17.650
So, there's shape noise,
bandwidth coding, and in the bottom line,

00:15:17.650 --> 00:15:20.420
SC stands for spatial audio coding.

00:15:20.420 --> 00:15:24.910
A whole other dimension in
compression by exploiting sound stage

00:15:24.930 --> 00:15:27.620
compression in a perceptual way.

00:15:27.620 --> 00:15:31.330
So, it is a perceptual coder,
but it's not shape noise.

00:15:31.470 --> 00:15:35.380
It's how we perceive a sound stage,
and can we do clever things to

00:15:35.600 --> 00:15:37.690
code that in a very compact way?

00:15:37.690 --> 00:15:38.920
And the answer is yes.

00:15:38.980 --> 00:15:47.380
And so we see that, to recap, MP3,
80 kilobits, AAC, 64 kilobits, HEAC,

00:15:47.580 --> 00:15:52.390
a huge leap forward,
24 kilobits per second,

00:15:52.730 --> 00:15:55.320
and finally spatial audio coding, 21.

00:15:55.460 --> 00:15:59.340
So, we are really marching forward,
but we've had to use

00:15:59.340 --> 00:16:01.590
different tricks to get there.

00:16:01.720 --> 00:16:04.010
So,
let's talk about what are those tricks.

00:16:04.260 --> 00:16:06.010
How does it work?

00:16:07.350 --> 00:16:10.200
Okay, now first, I get ahead of myself.

00:16:10.200 --> 00:16:13.220
So, those are the MPEG standards.

00:16:13.220 --> 00:16:14.660
Where are they in the marketplace?

00:16:14.820 --> 00:16:16.250
Are they being used?

00:16:16.390 --> 00:16:17.440
So, let's talk about that.

00:16:17.660 --> 00:16:20.170
First, MP3, it's everywhere.

00:16:20.290 --> 00:16:22.040
I mean, it's old.

00:16:22.420 --> 00:16:27.040
It has taken 10 plus years to be
really successful in the marketplace.

00:16:27.040 --> 00:16:29.930
So successful,
it's never going to go away.

00:16:29.940 --> 00:16:33.400
So, MP3 is hugely proud of
that piece of technology.

00:16:34.400 --> 00:16:37.000
AAC,
which I say is definitely one better,

00:16:37.000 --> 00:16:38.250
the state of the art.

00:16:38.250 --> 00:16:41.400
It's being used by
Apple iTunes and the iPod.

00:16:41.400 --> 00:16:42.920
Cool, great.

00:16:42.920 --> 00:16:48.090
Real Networks, Rhapsody uses AAC at
a very high bit rate.

00:16:48.260 --> 00:16:51.240
They want to really bring
you great digital audio,

00:16:51.240 --> 00:16:54.580
so they run at 192 kilobits
per second for stereo.

00:16:54.580 --> 00:16:58.760
And, in fact, you will see AAC in a
number of 3G cell phones.

00:16:58.840 --> 00:17:04.380
HEAAC, it's the stuff that
makes XM satellite radio.

00:17:04.380 --> 00:17:08.040
Satellite radio is what
I call expensive bits.

00:17:08.130 --> 00:17:12.250
And you need compression
when bits are expensive.

00:17:12.260 --> 00:17:16.160
And so, they can only dedicate like,

00:17:16.400 --> 00:18:41.100
[Transcript missing]

00:18:41.340 --> 00:18:45.120
Finally, spatial audio coding,
it's a new work item.

00:18:45.190 --> 00:18:48.120
It's going to begin at the
next MPEG meeting in July.

00:18:48.120 --> 00:18:54.400
I'm very excited about it and
what I think is so great is

00:18:54.450 --> 00:18:59.200
that I told you about HEAAC,
48 kilobits per second to my car.

00:18:59.200 --> 00:19:03.720
What if you want to do that
and say now it's 5.1 channel?

00:19:03.720 --> 00:19:07.190
Well, I think the spatial audio
coding could make that happen.

00:19:07.200 --> 00:19:10.360
So,
I think it's a very powerful technology

00:19:10.360 --> 00:19:16.010
that I hope will open a lot of markets,
but we're just beginning that.

00:19:17.020 --> 00:19:20.920
Now, I'm going to talk about these
technologies and very quickly

00:19:20.920 --> 00:19:26.300
give you the 50,000 foot
view of what makes them work.

00:19:26.470 --> 00:19:27.950
This is MP3.

00:19:28.050 --> 00:19:30.730
A lot of boxes,
just look at the blue boxes.

00:19:30.880 --> 00:19:35.620
What you see is the 32-band filter
bank that's common for layers 1,

00:19:35.720 --> 00:19:36.740
2, and 3.

00:19:36.870 --> 00:19:40.170
Layer 3 follows it by an 18-point MDCT.

00:19:40.540 --> 00:19:44.240
The result is a
high-resolution filter bank,

00:19:44.240 --> 00:19:47.940
and this is the first
component to get compression.

00:19:48.060 --> 00:19:50.210
It's what I call statistical compression.

00:19:50.400 --> 00:19:54.330
You need to de-correlate the signal,
and just in a mathematical sense,

00:19:54.480 --> 00:19:56.260
you get compression.

00:19:56.430 --> 00:19:59.110
The second component is
the perceptual model,

00:19:59.190 --> 00:20:00.740
which is up on the left.

00:20:00.850 --> 00:20:06.660
This goes one better and says, "Okay,
I see what the mathematical model says,

00:20:06.740 --> 00:20:10.980
and statistically speaking,
I can get rid of some bits."

00:20:11.060 --> 00:20:16.180
But now the perceptual model says,
"Well, what can you really hear?"

00:20:16.250 --> 00:20:19.150
And so based on that model,
it says, "Okay,

00:20:19.220 --> 00:20:20.440
it's important to code this.

00:20:20.560 --> 00:20:24.460
You don't have to code that at all."
And so it is really driving the

00:20:24.470 --> 00:20:28.130
allocation of bits in the whole coder.

00:20:28.650 --> 00:20:32.190
And then finally, the blue box,
noisless coding,

00:20:32.190 --> 00:20:37.720
is essentially an entropy matching block,
and it's needed to deal with some

00:20:37.720 --> 00:20:40.870
mathematical aspects of compression.

00:20:40.950 --> 00:20:46.100
And so in a very
first-order approximation,

00:20:46.190 --> 00:20:49.300
the filter bank is like a
factor of 2 compression,

00:20:49.300 --> 00:20:53.520
the perceptual model about 2.5,
and the lossless coding

00:20:53.520 --> 00:20:54.890
another factor of 2.

00:20:54.940 --> 00:21:01.210
You get to about a factor of 10 in this
classic perceptual coder framework.

00:21:01.410 --> 00:21:05.060
Now, AAC, it's better.

00:21:05.150 --> 00:21:05.820
What really happened?

00:21:05.840 --> 00:21:06.900
A lot more boxes.

00:21:06.970 --> 00:21:09.660
I'm not going to go into that.

00:21:09.970 --> 00:21:16.330
But now you've got a
1024-point filter bank,

00:21:16.330 --> 00:21:16.330
even higher resolution.

00:21:16.330 --> 00:21:16.330
It made a difference.

00:21:16.330 --> 00:21:16.330
But

00:21:16.340 --> 00:21:19.660
You get the same perceptual model,
the same noiseless coding.

00:21:19.660 --> 00:21:23.780
So, in the first approximation,
it's just a cleaner looking

00:21:23.780 --> 00:21:27.200
layer three in which you don't
have the two filter banks,

00:21:27.360 --> 00:21:27.930
but just one.

00:21:28.340 --> 00:21:30.500
Same principles apply.

00:21:30.950 --> 00:21:34.740
The classic perceptual audio coder.

00:21:34.740 --> 00:21:37.220
Now what is this other
stuff I was talking about?

00:21:37.220 --> 00:21:38.990
High efficiency AAC?

00:21:39.100 --> 00:21:43.900
Well,
really it's AAC core with something else.

00:21:44.080 --> 00:21:54.380
And what you begin is with an encoder
that down samples a signal and just codes

00:21:54.380 --> 00:21:54.380
the first half of the bandwidth with AAC.

00:21:55.110 --> 00:21:57.240
But it has some side information.

00:21:57.240 --> 00:21:59.050
The encoder looks at the
whole thing and it says,

00:21:59.150 --> 00:22:04.330
"Hey, can I approximate that upper band
by what I know about the lower

00:22:04.330 --> 00:22:06.510
band?" And I send some hints.

00:22:06.630 --> 00:22:08.210
And that's the side information.

00:22:08.340 --> 00:22:09.440
The answer is yes.

00:22:09.500 --> 00:22:11.540
And it works incredibly well.

00:22:11.690 --> 00:22:19.310
So in the decoder,
you've got a classic AAC decoder.

00:22:19.310 --> 00:22:19.310
You get back the hatch mark here.

00:22:19.490 --> 00:22:40.960
And then you essentially
map it up to the high band,

00:22:40.960 --> 00:22:40.960
fix it up,
equalize it with the side information,

00:22:40.960 --> 00:22:40.960
and you get the wide band.

00:22:40.960 --> 00:22:40.960
So the point is,
you got as a foundation the

00:22:40.960 --> 00:22:40.960
classic perceptual coder,
but the new dimension is

00:22:40.960 --> 00:22:40.960
this bandwidth coding.

00:22:40.960 --> 00:22:40.960
We had to use a new idea
to get more compression.

00:22:40.960 --> 00:22:40.960
This is one of the new ideas.

00:22:41.560 --> 00:22:45.340
Now spatial audio coding is
another case of a new idea.

00:22:45.340 --> 00:22:47.460
You have a five-channel signal.

00:22:47.460 --> 00:22:49.990
You present it to the encoder,
and the first thing it does

00:22:49.990 --> 00:22:56.210
is it mixes it down to,
let's say, two channels,

00:22:56.210 --> 00:22:56.210
and encodes it with a classic AAC coder.

00:22:56.300 --> 00:24:21.600
[Transcript missing]

00:24:22.150 --> 00:24:27.540
why what's new well the answer is
nothing but it's mpeg so if you look at

00:24:27.540 --> 00:24:33.240
the mpeg standards there's compression
but nothing lossless and so as i said

00:24:33.240 --> 00:24:38.980
before uh you know i'm the i'm the bbc
i save all my programs i got disc farms

00:24:38.980 --> 00:24:44.530
that stuff's worth some money i want
to make sure i can read that 20 years

00:24:44.530 --> 00:24:49.580
from now and standards provide a kind
of a comfort level where they can say

00:24:49.580 --> 00:24:54.570
well the standard won't change i've got
multi-vendor support i'm going with the

00:24:54.580 --> 00:24:58.140
standard as opposed to a proprietary
solution where that company maybe

00:24:58.550 --> 00:25:02.630
they're going to go out of business so
it doesn't have to be new and better it

00:25:02.670 --> 00:25:07.930
can just be standardized and that's the
role that we want to fulfill with this

00:25:07.950 --> 00:25:11.040
and i think it's a it's a legitimate one

00:25:12.110 --> 00:25:14.380
Okay, I want to give you one demo.

00:25:14.660 --> 00:25:17.880
It's AAC versus high efficiency AAC.

00:25:17.930 --> 00:25:20.380
And in fact, I'm going to do it at
32 kilobits per second.

00:25:20.380 --> 00:25:23.830
I just want to show you
that this is a new thing,

00:25:23.830 --> 00:25:26.940
and I think you'll see
that relative to AAC,

00:25:26.940 --> 00:25:30.870
there's a remarkable
difference delivered by HEAAC.

00:25:31.330 --> 00:25:33.950
So we can go to the demo machine.

00:25:36.180 --> 00:25:37.100
Okay, we're not going to go there.

00:25:37.100 --> 00:25:38.460
Oh, it's back.

00:25:38.490 --> 00:25:41.130
Okay, so 32 kilobits.

00:25:41.300 --> 00:25:45.370
I'm going to play AAC.

00:25:48.500 --> 00:25:50.500
Can I just say one word?

00:25:50.500 --> 00:25:52.290
It's band limited.

00:25:52.480 --> 00:25:55.500
I can't do better than that
with this classic architecture.

00:25:55.940 --> 00:26:02.190
So let me just bounce
between that and HEAAC.

00:26:07.200 --> 00:26:21.400
[Transcript missing]

00:26:24.420 --> 00:26:26.680
So I wish I could demo
the spatial coding,

00:26:26.690 --> 00:26:28.660
but I don't have five channel here.

00:26:28.850 --> 00:26:33.230
But I just wanted to show you that
MPEG has got some new stuff going.

00:26:33.440 --> 00:26:38.450
Again, this is at a bit rate which is 32
kilobits per second for stereo.

00:26:38.450 --> 00:26:42.400
That's â€“ I would have said that
was ridiculous several years ago.

00:26:42.650 --> 00:26:44.500
But it has a place in the marketplace.

00:26:44.600 --> 00:26:46.020
It sounds awfully good.

00:26:46.260 --> 00:26:48.550
And as I said, XM radio runs that at 48.

00:26:48.860 --> 00:26:51.080
But in this room,
32 says â€“ everybody says,

00:26:51.150 --> 00:26:52.360
I hear the difference.

00:26:52.360 --> 00:26:53.810
So you kind of push the compression.

00:26:53.880 --> 00:26:56.350
So you realize what's going on.

00:26:56.370 --> 00:26:58.880
But can we have the slides back again?

00:26:58.880 --> 00:27:04.230
But I think the answer is
cool â€“ cool technology.

00:27:04.980 --> 00:27:09.150
Okay, so I have one more slide,
find out more.

00:27:09.620 --> 00:27:16.430
Two URLs, the one is the MPEG homepage,
the second one is the audio homepage.

00:27:16.500 --> 00:27:19.430
So I certainly invite you
to go to the audio homepage,

00:27:19.430 --> 00:27:21.600
and then there's some books on MPEG.

00:27:21.740 --> 00:27:27.900
These tend to be all of MPEG,
but you'll find a chapter on audio,

00:27:27.900 --> 00:27:30.690
and so there's a couple
for your reference.

00:27:30.690 --> 00:27:30.690
And that's all I have.

00:27:38.070 --> 00:27:39.000
Thanks Schuyler.

00:27:39.000 --> 00:27:43.180
And now to something
completely different â€“ a video.

00:27:43.380 --> 00:27:45.990
We're going to try and
cover these three questions:

00:27:46.090 --> 00:27:46.890
What are they?

00:27:47.020 --> 00:27:47.900
What can they do for us?

00:27:47.900 --> 00:27:50.700
And what are they going to
do for us in the future?

00:27:50.820 --> 00:27:56.490
Well, everybody loves pictures,
and the test of the video projection

00:27:56.490 --> 00:27:58.700
is whether we can see the moon
in the upper right-hand corner.

00:27:58.700 --> 00:27:59.280
And we can.

00:27:59.370 --> 00:28:00.290
That's great.

00:28:00.450 --> 00:28:04.190
But they take an awful lot of bits
if you don't have any compression.

00:28:04.310 --> 00:28:07.970
Home video telephone, for example,
six megabits just for

00:28:08.120 --> 00:28:09.390
home video telephone.

00:28:09.540 --> 00:28:14.410
High-definition TV gets you up to one and
a half gigabits â€“ an incredible number

00:28:14.490 --> 00:28:17.230
of bits if you can't do compression.

00:28:17.380 --> 00:28:21.330
For example, now,
here's what compression can do for us.

00:28:21.530 --> 00:28:25.120
For the home video telephone,
we can get compression

00:28:25.120 --> 00:28:28.160
ratios of 50 with very,
very high quality,

00:28:28.260 --> 00:28:34.320
or push it up to as high as 300 if
we're comfortable with usable quality.

00:28:34.450 --> 00:28:38.390
I won't go through all of these,
but down at entertainment

00:28:38.480 --> 00:28:41.860
television or high-definition TV,
we can get compression ratios in the

00:28:41.860 --> 00:28:48.220
range of 40 or 50 with very high quality,
or even with a little more

00:28:48.670 --> 00:28:53.240
for quality that's usable,
something like you're used

00:28:53.240 --> 00:28:55.400
to on your cable television.

00:28:55.550 --> 00:28:59.390
The current video coding
standards look like this.

00:28:59.600 --> 00:29:02.060
And here are the dates in
which they were introduced.

00:29:02.070 --> 00:29:06.700
H261, I guess, was one of the first ones
to catch on in a big way,

00:29:06.700 --> 00:29:11.000
and it's used even today
in video conferencing.

00:29:11.000 --> 00:29:14.170
Internet video conferencing
still uses this a little bit.

00:29:14.430 --> 00:29:17.510
MPEG-1 came on in 1992.

00:29:17.600 --> 00:29:20.790
That was aimed mostly at compact disks.

00:29:21.020 --> 00:29:24.800
Karochi machines use
MPEG-1 almost exclusively.

00:29:24.800 --> 00:29:28.930
MPEG-2 was jointly done with the ITU.

00:29:29.000 --> 00:29:31.830
ITU gave it this number, H262.

00:29:32.160 --> 00:29:35.040
MPEG gave it this â€“ well,
it's got a bigger number, actually,

00:29:35.040 --> 00:29:36.850
but everybody calls it MPEG-2.

00:29:37.000 --> 00:29:42.010
And that's what's used in
today's digital television,

00:29:42.010 --> 00:29:45.500
HDTV, DVD, and personal video recorders.

00:29:45.610 --> 00:29:47.710
A whole bunch of things use MPEG-2.

00:29:47.930 --> 00:29:52.040
This is probably the most
successful video standard ever.

00:29:52.070 --> 00:29:56.680
H263 is an ITU standard, follows on H261.

00:29:56.680 --> 00:29:59.320
It's a better video
conferencing standard.

00:29:59.350 --> 00:30:04.040
MPEG-4, part two is the video,
came on a few years ago,

00:30:04.410 --> 00:30:07.640
aimed at PC and Internet applications.

00:30:07.740 --> 00:30:09.560
It's more than a compression standard.

00:30:09.560 --> 00:30:14.480
It just has a plethora of things
that it's trying to do with MPEG-4.

00:30:14.500 --> 00:30:18.580
And last but not least,
just coming on a few months ago,

00:30:18.650 --> 00:30:22.000
is H26 â€“ this, again,
was jointly developed by ITU.

00:30:22.120 --> 00:30:23.880
ITU and MPEG.

00:30:23.990 --> 00:30:26.350
ITU gave it this number, H264.

00:30:26.710 --> 00:30:28.760
MPEG calls it AVC.

00:30:29.120 --> 00:30:31.070
And that's a bit of a confusion.

00:30:31.070 --> 00:30:33.220
You'll find people
bouncing back and forth.

00:30:33.290 --> 00:30:34.920
I tend to call it H264.

00:30:34.920 --> 00:30:36.600
David tends to call it AVC.

00:30:36.680 --> 00:30:38.750
And different people just
bounce back and forth.

00:30:38.900 --> 00:30:44.740
So if you can just plant in your brain,
AVC and H264 are the same.

00:30:44.800 --> 00:30:46.760
They're the same animal.

00:30:46.890 --> 00:30:50.380
And it's evolving.

00:30:50.730 --> 00:30:51.930
A little technology.

00:30:52.070 --> 00:30:55.030
I don't know how much
technology to introduce here,

00:30:55.030 --> 00:30:55.880
actually.

00:30:55.880 --> 00:30:58.650
How many were at the
H.264 session yesterday?

00:30:58.740 --> 00:30:59.840
Same time, same place.

00:30:59.950 --> 00:31:00.830
Ah, a lot of people.

00:31:00.980 --> 00:31:03.830
Well, and some weren't.

00:31:04.310 --> 00:31:06.680
Okay, well,
I'll mention a little technology.

00:31:06.750 --> 00:31:09.490
Of course, we all like color pictures.

00:31:09.630 --> 00:31:14.300
And we know we send color â€“ they come
out of the camera as three components,

00:31:14.420 --> 00:31:18.540
red, green, and blue,
and those can be digitized, of course.

00:31:18.580 --> 00:31:21.250
But if you just do that,
you end up with a lot of bits.

00:31:21.330 --> 00:31:23.060
We don't send the red, green, blue.

00:31:23.100 --> 00:31:26.420
We convert that with a linear
transform into luminance

00:31:26.450 --> 00:31:28.690
and two chrominance signals.

00:31:28.700 --> 00:31:33.000
It's a reversible transform,
but with this transform,

00:31:33.060 --> 00:31:37.460
it enables us to subsample
the two chrominance signals.

00:31:37.460 --> 00:31:43.520
The chrominance is usually less
samples per picture than the luminance.

00:31:43.580 --> 00:31:46.000
A little more technology.

00:31:46.000 --> 00:31:46.460
Jargon.

00:31:46.460 --> 00:31:48.410
I-frames, P-frames, and B-frames.

00:31:48.460 --> 00:31:50.460
Well, what do these mean?

00:31:50.550 --> 00:31:55.410
Well, what it means is typically we
don't send the pixels themselves.

00:31:55.570 --> 00:31:58.570
We divide the picture
up into small blocks.

00:31:58.660 --> 00:32:01.340
I believe this is eight by eight blocks.

00:32:01.430 --> 00:32:05.700
It's eight pixels by eight pixels.

00:32:05.700 --> 00:32:05.700
Sometimes they're four by four.

00:32:05.990 --> 00:32:09.290
And instead of sending the pixels,
we transform those into

00:32:09.290 --> 00:32:10.950
transform coefficients.

00:32:11.160 --> 00:32:16.440
It's a discrete cosine transform
is what's used by everybody today.

00:32:16.870 --> 00:32:19.630
Historically there were other transforms,
but this is what we use.

00:32:19.770 --> 00:32:23.120
So we don't send the pixels,
we send transform coefficients.

00:32:23.230 --> 00:32:26.160
And iframes means, well,
we just send the transform

00:32:26.160 --> 00:32:30.330
coefficients in one frame,
very similar to the way JPEG does.

00:32:30.430 --> 00:32:33.860
The coding does not
depend on any other frame.

00:32:34.270 --> 00:32:37.090
Now we also use motion compensation.

00:32:37.180 --> 00:32:40.060
If we want to send this
block in the current frame,

00:32:40.060 --> 00:32:43.480
we try to predict it
from the previous frame.

00:32:43.560 --> 00:32:47.340
And since video often has motion,
the previous frame,

00:32:47.660 --> 00:32:49.390
the block is in a different position.

00:32:49.630 --> 00:32:54.570
So we use that shifted block as
a prediction of the block we're

00:32:54.620 --> 00:32:58.570
trying to send in the current frame,
and we send the difference between the

00:32:58.840 --> 00:33:01.040
current frame and the previous frame.

00:33:01.100 --> 00:33:04.280
If this is an 8x8 block,
we get 64 differences,

00:33:04.280 --> 00:33:08.100
we transform the difference,
and send that.

00:33:08.100 --> 00:33:10.090
And that's what we call a P-frame.

00:33:10.090 --> 00:33:15.840
The motion compensated predicting frame,
it depends on one other frame.

00:33:16.100 --> 00:33:20.100
We also use bidirectional
motion compensated prediction.

00:33:20.100 --> 00:33:23.100
In this case,
if we wanted to send this block,

00:33:23.100 --> 00:33:27.100
we calculate the same motion compensated
prediction in the previous frame,

00:33:27.100 --> 00:33:27.760
but we also calculate a
motion compensated prediction

00:33:27.800 --> 00:33:28.040
in the future frame.

00:33:28.100 --> 00:33:28.380
So we can send this block
in the current frame,

00:33:28.380 --> 00:33:29.080
and we send the difference between the
current frame and the previous frame.

00:33:29.100 --> 00:33:30.070
And that's what we call a P-frame.

00:33:30.120 --> 00:33:31.100
The motion compensated predicting
frame depends on one other frame.

00:33:31.100 --> 00:33:35.160
We then calculate the two
differences from the current

00:33:35.160 --> 00:33:38.080
frame to the previous frame,
current frame to the future frame,

00:33:38.140 --> 00:33:42.100
add up the differences, divide by two,
and send the average.

00:33:42.100 --> 00:33:44.210
And that's what's
referred to as a B-frame,

00:33:44.210 --> 00:33:47.010
bidirectional motion
compensated predicted frame.

00:33:47.110 --> 00:33:51.100
This coding depends on two other frames.

00:33:51.100 --> 00:33:52.990
We put it all together,
you get a block diagram

00:33:53.060 --> 00:33:53.990
that looks like this.

00:33:54.120 --> 00:33:56.100
I won't go through all the components.

00:33:56.100 --> 00:33:57.860
Here's a predictor.

00:33:57.860 --> 00:34:00.010
Predictor goes into a subtractor.

00:34:00.100 --> 00:34:05.100
You calculate the difference,
transform the difference, quantize,

00:34:05.510 --> 00:34:08.090
code it, send it off to the transmitter.

00:34:08.100 --> 00:34:11.100
A decoder does virtually the same thing.

00:34:11.100 --> 00:34:14.540
It calculates a prediction,
but the received signal

00:34:14.710 --> 00:34:18.150
is a difference signal,
so that has to be added to the

00:34:18.290 --> 00:34:21.100
prediction to get the decoded image.

00:34:21.280 --> 00:34:24.080
So that's how all these coders work.

00:34:24.350 --> 00:34:29.100
Now an important issue on these standards
is that they specify the bitstream.

00:34:29.270 --> 00:34:34.890
They tell you what the bits are,
and they tell you how to decode mostly.

00:34:35.290 --> 00:34:37.070
They tell you how to decode those bits.

00:34:37.510 --> 00:34:40.100
They do not specify the encoder.

00:34:40.100 --> 00:34:43.100
They do not tell you
how to produce the bits.

00:34:43.100 --> 00:34:46.100
That's the difference between the
audio and the video standards.

00:34:46.100 --> 00:34:48.990
The encoders, in fact,
continue to improve for years

00:34:48.990 --> 00:34:52.000
and years and years after
the standard is finalized.

00:34:52.110 --> 00:34:56.810
MPEG-2 encoders are still
improving every single year.

00:34:57.480 --> 00:35:02.080
MPEG-4 video, part two is video,
there are all kinds of other parts,

00:35:02.450 --> 00:35:06.400
has a wide range of bit rates
and a wide range of options.

00:35:06.530 --> 00:35:09.400
Now here's the picture we
used to describe MPEG-4.

00:35:09.400 --> 00:35:14.340
MPEG-4 was aimed at coding
separate 3D objects,

00:35:14.410 --> 00:35:17.400
separate audio objects,
separate video objects,

00:35:17.400 --> 00:35:22.100
and to allow those objects to be
coded and transmitted separately

00:35:22.100 --> 00:35:25.280
and composed at the receiver,
at the decoder,

00:35:25.400 --> 00:35:27.390
to produce the final picture.

00:35:27.400 --> 00:35:30.960
The final picture might be
choosable at the transmitter,

00:35:31.020 --> 00:35:33.400
might be choosable at the receiver.

00:35:33.400 --> 00:35:41.230
I think it's fair to say this vision
is not implemented very much anywhere.

00:35:41.460 --> 00:35:44.400
The academics are having
a great time with it,

00:35:44.410 --> 00:35:46.400
hasn't really hit the marketplace.

00:35:47.130 --> 00:35:49.860
. There are other features
like text to speech,

00:35:49.860 --> 00:35:52.400
face and body animation,
wireframe models,

00:35:52.400 --> 00:35:57.400
sprite coatings of backgrounds,
just a wide variety of features.

00:35:57.400 --> 00:36:00.390
The newest video coding standard,
the one you heard about yesterday,

00:36:00.400 --> 00:36:04.810
the one we're introducing
at Apple this week actually,

00:36:04.960 --> 00:36:07.400
is the H.264AVC standard.

00:36:07.600 --> 00:36:11.970
Much better compression than MPEG-2,
approximately twice as much as

00:36:11.970 --> 00:36:14.400
MPEG-2 on the compression side.

00:36:14.660 --> 00:36:16.400
So for example, for PC or CD-ROM,
you can use the H.264AVC standard,

00:36:16.400 --> 00:36:16.400
and you can also use the
H.264AVC standard for video coding.

00:36:16.430 --> 00:36:22.400
. For PC or CD-ROM applications,
which typically MPEG-1 handled,

00:36:22.400 --> 00:36:27.960
compression ratio of 55, well,
these compression ratios, as you know,

00:36:27.960 --> 00:36:32.310
depend on the quality of the coding,
so this is a range.

00:36:32.420 --> 00:36:35.400
55, you can double that over 100.

00:36:35.460 --> 00:36:40.120
For normal TV, compression ratios of 60,
figure, double that,

00:36:40.280 --> 00:36:42.400
you can get over 100.

00:36:42.400 --> 00:36:46.400
Double the number of channels that you
can send on the digital transmission.

00:36:46.400 --> 00:36:51.360
For HD, again,
doubling that would mean you could

00:36:51.460 --> 00:36:58.400
get double the number of HD pictures
that you can on today's cable.

00:36:58.500 --> 00:37:01.340
Now, what's in this H.264 technology?

00:37:01.500 --> 00:37:05.480
You heard much of this yesterday,
and I won't go through

00:37:05.480 --> 00:37:07.400
these in great detail.

00:37:07.400 --> 00:37:11.400
They use a 4x4 transform
instead of an 8x8 transform.

00:37:11.400 --> 00:37:13.400
The motion compensation blocks,
instead of all being the same size,

00:37:13.400 --> 00:37:13.400
they're all the same size.

00:37:13.400 --> 00:37:16.740
. . The motion compensating blocks,
instead of all being the same size,

00:37:16.820 --> 00:37:17.400
can have different sizes.

00:37:17.400 --> 00:37:20.520
If you're on the edge of an object,
you want to have small

00:37:20.530 --> 00:37:22.400
motion compensated blocks.

00:37:22.820 --> 00:37:25.210
There's a deblocking filter.

00:37:25.530 --> 00:37:29.920
Many of these compression algorithms,
if you really squeeze them down,

00:37:29.930 --> 00:37:32.390
you begin to see the 8x8 blocks.

00:37:32.400 --> 00:37:36.400
So there's a deblocking filter
that compensates for that.

00:37:36.570 --> 00:37:38.400
What else?

00:37:38.400 --> 00:37:40.390
There's an intra-prediction.

00:37:40.520 --> 00:37:42.400
Instead of coding the
little blocks separately,

00:37:42.490 --> 00:37:44.400
they can use predictive
coding to do that.

00:37:44.400 --> 00:37:50.400
There's some error resilience techniques.

00:37:50.400 --> 00:37:52.930
If you have enough bits,
you can actually send the

00:37:52.930 --> 00:37:54.370
pictures several times.

00:37:54.400 --> 00:37:57.400
So if one of them doesn't make
it during the transmission,

00:37:57.400 --> 00:37:58.380
you can use one of the others.

00:37:58.400 --> 00:38:00.380
You don't have to send the whole picture.

00:38:00.430 --> 00:38:02.400
You can send pieces of the picture.

00:38:02.460 --> 00:38:05.400
Some pieces are more
important than others.

00:38:05.700 --> 00:38:09.570
Multiple reference frames.

00:38:09.850 --> 00:38:12.620
This coder allows you to use
in your motion compensation a

00:38:12.620 --> 00:38:15.210
whole bunch of previous frames,
not just one.

00:38:15.210 --> 00:38:19.040
So you can choose which of the
reference frames you want to use.

00:38:20.110 --> 00:38:23.000
What's coming up?

00:38:24.220 --> 00:38:29.630
Well, in MPEG, in H.264AVC,
an amendment just being worked on now

00:38:29.750 --> 00:38:32.580
is called Fidelity Range Extensions.

00:38:32.640 --> 00:38:34.160
That's a mouthful.

00:38:34.370 --> 00:38:36.280
We typically call it FREXT.

00:38:36.420 --> 00:38:38.100
That's a one-syllable acronym.

00:38:38.430 --> 00:38:39.200
Perfect.

00:38:39.200 --> 00:38:43.200
It allows up to 12 bits per pixel.

00:38:43.200 --> 00:38:45.150
Prior to this,
most of these standards used 8.

00:38:45.220 --> 00:38:48.200
This 12 may be extended, actually, to 16.

00:38:48.200 --> 00:38:53.200
It allows higher color resolution.

00:38:53.400 --> 00:38:58.080
Typically, the color resolution has been
subsampled by two in both

00:38:58.250 --> 00:39:01.140
horizontal and vertical directions.

00:39:01.190 --> 00:39:09.200
The subsampling can be completely
eliminated for professional applications.

00:39:09.200 --> 00:39:12.200
It has an optional 8x8 DCT.

00:39:12.200 --> 00:39:14.570
On some videos,
the 8x8 DCT works a little

00:39:14.790 --> 00:39:18.070
better than the 4x4 DCT,
so they threw in an optional one.

00:39:18.170 --> 00:39:22.150
And an alpha channel is
being considered currently.

00:39:22.230 --> 00:39:24.090
currently.

00:39:25.650 --> 00:39:28.460
Another one that's just getting underway.

00:39:28.700 --> 00:39:30.970
This is MPEG21.

00:39:31.210 --> 00:39:34.770
Now, you may ask, "How does MPEG come up
with these numbers?" 1,

00:39:34.770 --> 00:39:39.160
MPEG2, MPEG4, MPEG7, MPEG21.

00:39:39.280 --> 00:39:41.650
The answer says, "We don't know." Right.

00:39:41.840 --> 00:39:42.740
We have no idea.

00:39:42.900 --> 00:39:45.260
It's a marketing thing, I think.

00:39:45.260 --> 00:39:46.800
Scalable video coding.

00:39:46.800 --> 00:39:50.770
Scalable video coding has a
checkered history in this business.

00:39:50.800 --> 00:39:54.750
MPEG2 had a scalable
video coding profile.

00:39:55.040 --> 00:39:58.720
It was never really
implemented as far as we know.

00:39:59.030 --> 00:40:03.980
It's a great match for
networking that has multicast.

00:40:03.980 --> 00:40:08.740
You know, the multicast IETF mechanisms
for the internet.

00:40:09.020 --> 00:40:13.370
Unfortunately, multicast is,
it really isn't everywhere.

00:40:13.370 --> 00:40:14.480
That's the problem.

00:40:14.480 --> 00:40:18.670
So if you want to do
scalable multicast broadcast,

00:40:18.670 --> 00:40:22.030
you may not be able to get everywhere.

00:40:22.030 --> 00:40:24.250
So it's not used very much.

00:40:24.580 --> 00:40:28.570
MPEG21 is going to give it another
try and we'll see what happens.

00:40:28.570 --> 00:40:32.320
H265, that's more or less a placeholder,
actually.

00:40:32.320 --> 00:40:34.920
It'll be the follow-on to H264.

00:40:35.050 --> 00:40:38.630
At this stage,
it's probably a research effort.

00:40:38.710 --> 00:40:42.750
And that's how most of these
video standards come about,

00:40:42.890 --> 00:40:43.470
actually.

00:40:43.520 --> 00:40:49.810
A research effort starts and then
technology is either adopted or tossed.

00:40:49.920 --> 00:40:54.120
And then after quite a number of years,
in the case of MPEG,

00:40:54.120 --> 00:40:54.120
it's a little bit more complicated.

00:40:54.160 --> 00:40:57.280
But it's a good example of how,
in the case of H264,

00:40:57.280 --> 00:41:00.850
the development of the standard
took place with contributions

00:41:00.850 --> 00:41:02.360
from lots and lots of people.

00:41:02.590 --> 00:41:07.410
The MPEG video standards typically
have more than a couple hundred people

00:41:08.100 --> 00:41:10.460
contributing to these standards.

00:41:10.630 --> 00:41:13.550
So H265, we have high hopes for.

00:41:13.680 --> 00:41:17.350
I'll give it six or seven years, maybe.

00:41:17.590 --> 00:41:21.810
Another issue on these standards,
of course, is the processing power

00:41:21.860 --> 00:41:23.640
that we have to deal with.

00:41:23.640 --> 00:41:25.020
A lot of the ideas are
not particularly new,

00:41:25.020 --> 00:41:30.130
but with the incredible processing power
that our chip friends have provided us,

00:41:30.250 --> 00:41:32.060
we can now implement these ideas.

00:41:32.240 --> 00:41:38.180
So given a few more years,
hopefully the curve will continue

00:41:38.180 --> 00:41:42.220
to give us more processing
power in the future and we can

00:41:42.220 --> 00:41:44.450
implement a lot of these ideas.

00:41:44.670 --> 00:41:50.360
Okay, that in a nutshell is what
video standards are all about.