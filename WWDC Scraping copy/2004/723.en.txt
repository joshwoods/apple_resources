---
Title:  A Powerful Combination: AppleScript and QuickTime
Year:   2004
Web:    https://nonstrict.eu/wwdcindex/wwdc2004/723/

[!] This transcript was generated using Whisper, it has known transcription errors.
---

Pardon me a second, I'm going to do a little house cleaning. This machine gets video too. The one I'm presenting on. Who sets that up? Because otherwise I can present and tell you what it looks like to me. Yes, right here on this side. "DVI. Do you need the adapter?" "We have an adapter." "Okay."

I'm Sal Soghoian, I'm the AppleScript product manager and while we're working that out, I just want to thank you for coming in here today and spending some time with Ryan Lynch and myself. The meeting of AppleScript and QuickTime has always been an incredibly fertile ground for creating very productive tools.

We first, back in QuickTime 4, was the first time we had a scriptable dictionary in the QuickTime Player. And since then, the dictionary within QuickTime has grown and grown and grown and you've been able to do more and more. And that growth is going to continue with Tiger.

You're going to see even more scriptability in QuickTime, more accessibility to QuickTime, built into AppleScript itself and also into the QuickTime architecture as well. And we're very excited about that because the last thing you should have to do is some repetitive thing over and over again like setting annotations to movies. It should always be an easy process. And now, with the introduction of Automator, it's going to be even easier.

So, while Ryan and I have been skating on the thin ice of a preview release, we've still managed to cobble together some things to give you a window into what's coming up for you to take advantage of. And so, today, I'm going to spend a little bit of time, first of all, showing you what tools you have for QuickTime and AppleScript existing, where you can get them, what they can do for you already.

So that you can start, if you're new to the world of AppleScript and QuickTime, you can start using these right away to familiarize yourself with some of the potential that these two technologies have together. Then, we're going to show you some previews of the tools that we've been using.

And then, we're going to show you some previews of what's possible in the future. And Ryan and I are going to do some demos involving the Automator application and QuickTime. The two were just made for each other. It's really incredible. So, let's see. How close am I to having video over here? None? Okay. Then, hang on. What is this demo machine right here? later.

That's me. Okay. Well, let me show you first of all, we'll go to, we'll start with this. When you go to www.applescript.com, We own that site. This is the main AppleScript page. If you're interested in AppleScript at all, this is a great place to get started. This is where you want to go first because it contains a lot of resources from this site, but it also points you to other locations that have information.

One of the pages in particular of interest to QuickTime, if you click the applications link here in the middle, this little toolbar, nav bar, you'll see that we have links to some of the scriptable applications in the OS, one of which is the QuickTime Player. I'll click that and it takes you to the QuickTime Player page within the AppleScript website. On this page we've posted Hundreds of scripts and examples, and we've listed them all here. There's, for example, adding annotations.

Creating streams. There's hundreds of applets and droplets. Setting your playback properties. And then there's a set of screen menu scripts. There's about 150 of those. And all of these you can download as a collection by just clicking that link right there. And I'd like to show you that as soon as I get some video on this machine.

Why don't I take a question? Any questions? No, any complaints? Perhaps you feel you've been treated unfairly? Can we turn the lights down a little bit? They like it intimate and cozy. This is a very productive crowd. Yes? The question is, will there be ability to modify the workflows created by the Automator application? If the person who created that workflow enables you to do that, yes. You can open them back up into Automator and change whatever parameters you want.

And if you're the person that's writing the Automator actions yourself, then you can determine whether you want to release those with the code open that people can go in and mess with your widgets if you want to. We're very excited about it. It looks like there's a lot of people waiting to develop these kind of things.

Any other questions? You want to see card tricks? I'm not nervous today, let me tell you. After doing the keynote, nothing can bother me. I could have a herd of wildebeests running straight at my nose and I wouldn't flinch. Okay, maybe I would do that, I don't know.

I don't know what kind of network they have here, but holy cow. I'm going to start demoing while they're doing that off of this machine. I'll just copy these things. So this is the QuickTime scripts collection from the website. I'm going to walk you through some of these scripts and what they can do for you.

Okay, I can't work unless I can see the hard drive. That's much better. Where did it go? Oh, it is. Okay. Let's switch to that then. We're switching to this laptop? So you go to that website, you download this collection of scripts, you get the QuickTime scripts collection. Now, these scripts were written, some of them have been written, they've been added to over the years. It originally began with QuickTime 4 and it covers a large amount of the basic functionality that you need to deal with QuickTime.

One of the sections in there involves applets and droplets. These are the kind of scripts that you can drag items onto. You can take folders of movies and drag these onto these droplets and they will do some kind of processing, whether it's setting annotations, setting the hint, setting the URL of a movie. They're really great tools for just quick drag and drop.

The QuickTime scripts collection over here, QuickTime Player scripts, those are meant to be launched from a script menu. And by default in Mac OS X you have a script menu that's located You can activate it via your applications folder, then your AppleScript folder within that applications folder, and then you can use the AppleScript utility.

In Tiger, to enable that. There's also in Panther another application called Start Script Menu, which would do the same thing. Once that has been activated, once the script menu has been activated, then the script menu will appear here in the top menu. And when you are within the QuickTime player application, you can choose to create a folder "We've got a couple of quicktime player scripts and then place those scripts from the collection in here and they will be available from within the QuickTime player. So I'm going to show you a couple of those to begin with. Let me start by opening up a little sample movie here. Have a little bit of audio? Thank you.

And I think I'm straight. Does this appear, it appears correct there. Here it's like looking like this. So here's an example of why you would want to use AppleScript. So I have a movie here and I want to add a chapter track. Any of those that have ever done building a chapter track in a movie know what an involved process it really is.

To create that particular kind of text file with a certain set of codes and then to indicate where you want it to begin and end. Well with AppleScript it's become a really easy process. I'll just go to the script menu and my QuickTime player scripts are here. And one of the sections is chapters. I'll choose create chapter track.

and it asks me what track I want to bind the chapters to, the audio or video. I'll choose video. And you can see that instantly it creates a chapter track for me. Then if I want to add a chapter at a certain point I can just drag the cursor To that particular point and choose add chapter at the current time and let's give it a name. Well, we'll give it something very creative like first chapter. First, ch-ch-pah-pah-ch-pah. Man-na-ma-ha-ma-na-ha-ma-ha-ma-na-ha. And then you can see that it automatically adds that. So I have the start and I have the first chapter. And then I'll go over here.

I'll go back to the chapter. I'll choose another one. I'll add another chapter at the current time. And we'll call this "Second Chapter." And now I have a start chapter, a first chapter, and a second chapter. A very easy process to do because you let AppleScript do all the heavy lifting for you.

It does all the process. It talks directly to the application and creates the chapter and can edit it on the fly. That would take you quite a while to do by hand. With AppleScript it's very easy. And you can go back in and edit them. I can go back and say delete a chapter.

Choose the chapter I want to delete. And now the first chapter's gone from the list. Simple example could save you a lot of time in annotating and chaptering a movie. There's one example of what you can do with AppleScript and QuickTime. Let's take a look at another one. Let's take a look at some of the applets and droplets.

Let's start with this one. Now, this particular script is called the Limited Annotations Droplet. And what it does is it will put in three annotations into your movie. All you have to do is go into the comments field in the finder window for that particular droplet and set in your annotations.

You put the name of the annotation, a colon, and then its value. And when the comment is run, it will automatically read from its own comments field and apply those. So let me show you. I'll take the sample movie that I just had and I'll drag it onto this Okay, now I'll open back up my sample movie. Stop.

And you can see that it added the annotations in for me automatically. Now, seems like a small thing, but if that's something that you do all the time with your content, being able to do 150 of those and have a donut is a great thing. It saves time. It saves money. Now you'll notice that this movie is also set to autoplay. As soon as it opened, it started playing.

Well, there are some playback properties in QuickTime that aren't really exposed to the UI. Did you know that a movie can automatically close when it's done? Or it can automatically quit the QuickTime player? Or it can automatically self-present full screen? You can set these properties yourself, but nowhere in the UI of the application currently can you do that. So we'll go over here to the applets and droplets and we'll open up the folder called playback properties.

Now these particular droplets all set some individual playback property. So the first one here is called reset playback properties. If I double click it, it will tell you what it does. This script will set autoplay, close when done, auto close when done, quit when done, auto quit when done, and auto present to false. Presentation size to normal and presentation mode to normal. And then it will set the playback properties to movies. So if you just want to reset a movie back to normal condition, that does it.

It doesn't autoplay. So if I want to set a group of movies to automatically play, then I could determine, I can set them to right here, the autoplay property. This particular script will set the autoplay. You can set the preference to whatever you like. Currently it's set to enabled. So now I'll drag the movie back onto this script.

And now go play. So it auto-plays. I can also set the-- I'll save it as a presentation file. And that will set the automatically close when done and automatically self-present. So now when the user double clicks the file... It self-presents and then closes automatically. The user doesn't need to know how to use the QuickTime player.

And that's a property that's only settable via AppleScript with an interface. Now that might come in useful in this kind of a scenario. If we go back to our QuickTime scripts folder, there is a folder called Example Files, and within there, there's a Help Center example. And I'm going to open that.

This has a movie in the help page. The URL of this movie has been set to selfpresent.move, which is a movie within the same folder as the file. The target, T, is QuickTime Player. It is also set to auto-present and auto-close. The user can click on the link in the help page to access the movie. The movie will then play full screen and when it's done, it will clean up after itself. All of this can be set with AppleScript and QuickTime. Here's a very simple example of how it can be useful in the real world.

Another example of using AppleScript is with droplets and droplets is media skins. Has anybody done media skins?

[Transcript missing]

With inside the queue I want the plane to fly through the queue. Well that's exactly what QuickTime can do. It has that incredible ability with media skins to do it, but it's a really long process. So what I'm going to do is make this an easy process. I'm going to use this droplet called the Apply Media Skin Droplet and I'll just drag the plane onto that and let's watch what happens.

It's going to check and then it's going to ask where do you want to place your finished product. I'll put it on the desktop. And I've left this droplet showing you each step of what it's going to do so you can see how long and involved the process is.

If you take out these dialogues it happens very quickly. So it's going to open the MediaSkin background file, it's going to add that into the movie, then it's going to position it to the back and it's going to make it transparent, it's going to position the movie into position, save a copy of that, then it's going to close that, then it's going to write an XML file describing how the MediaSkin should be done, then it's going to open up that XML file as a new movie, then it's going to apply the playback settings, then it's going to save that particular thing as a self-contained entity. And then it's going to clean up after itself. So now, thank you. So now let's play the same movie. It's set for autoplay now.

How to take advantage of a really cool technology with a single drag and drop. That's the power of AppleScript and QuickTime together. That's what we're all about. Also within the QuickTime scripts folder, I'm going to take you to another little example, are some example files folder. And within that there are some examples of the code that you need to do this. What do the scripts actually look like that can do this and what level of control do they offer? Well one of the examples that I had open but I don't have open now. Open this one. It's called Typewriter Text Movie. I'm just going to run this one.

It's going to switch to the QuickTime player, create a brand new movie, and it's going to add frames. Yes, you have total control over frame level. You can control the contents of frame, you can control the position of objects within the frame, you can control frame duration, you can control tracks, you can control the movie, you can control the audio. Just about every aspect of a movie has been exposed to QuickTime and AppleScript. So this movie was created entirely with that script.

By generating frames on the fly. That's the level of granularity that you have with AppleScript and QuickTime. As a matter of fact, let's take a look at some of the text frame properties. I'm going to run this one. This is one of the example scripts. And this will show you the kind of properties you have over a frame.

Default font: Chicago is not installed and needs charcoal. Greer, Times, Geneva. You can control the default font size. So this is not a movie. This is AppleScript talking to a frame in a movie file, live. It's interacting with the player. It's not a pre-done movie. So you can control justification, you can change the foreground color. Green, blue. You can change the background color.

You changed the blue type to white, huh? Red text on blue so you can change both of them together. Yellow text on black. You can control anti-aliasing, keys, key text as well. All of that is controllable. That's the level of control that you have with AppleScript and QuickTime. You can really get to a very fine point in your scripts. Now, to write these kind of scripts yourself, what's involved? Okay, yes. I'll show you.

Some, also within that folder, are some script templates. There are track syntax examples, and each one of these scripts will show you how to do a particular example, like adding a frame to the start of a text track, adding an image track, adding text from a data item, adding text from a list on disk. Then there are also some template examples here. Where are they? Favorites, helps, frame, examples, slideshows, chapter examples.

Oh, script templates are down here. And these are pre-done scripts that you can add your particular actions to. For example, if you want to create a QuickTime droplet, all you have to do is open up this template and then... It'll tell you right here. You place your own particular script statements there and the rest of it is already pre-done for you to handle, determining whether the user actually dragged on a movie file, determining whether it's a folder of stuff and then iterating through each item in the folder. All you have to do is open this template, put your particular lines of AppleScript in there, save it, and then it will become a droplet that you can use just like the other QuickTime applets and droplets.

[Transcript missing]

Was I good? Look at that, I'm so, I have to generate it down into like, you know, begging for applause, holy cow. That's as low as you can possibly go. Okay. Yes, as you can tell, you know, Steve was very excited by Automator, so am I.

It's a phenomenal technology that we're working on. You got to see a preview of it and there's a preview of it installed on your developer disk as well. And what Automator does is it provides an interface above and beyond what the normal droplet kind of thing where you have these little dialogues.

Now it's made into where you can take the result of one action or one script and pass it to the next because you might have a group of movies that you want to set the playback properties for, right? You might want to be able to browse a whole group of movies. You might want to be able to set the URL for. A group of movies. And Automator lets you do that. So I'm going to show you a simple Automator action here. I'm going to launch it. I like the fact the guy bounces. Boink, boink. He's sure bouncing.

And this is Automator. In case you didn't see it before, let me quickly describe the interface. It's very simple. On the left-hand side here are category buttons. And these represent the kind of actions that you would normally want to do with your computer, like find things, work with disk items, communicate with the user of the computer.

And when you click a category button, in the list below here, all of the actions related to that category appear in this action list. When you select one of those actions, Its description will appear down here in the description field. And it will tell you basically what the action does, if it has any things that it needs. And then when you want to use the action you can just drag it right over into the workflow area and the action will appear here. And you can set any kind of parameters that you want for that particular action.

Any preferences that it has appears here. And it's really easy just to link these things together and create an entire workflow and then just run the workflow when you're done. For example, let's say that I have a lot of movies that I want to set some basic playback properties on them. Well to do that I'm just going to open up a folder here of my favorite Switch movies.

Let's see, I'll grab a bunch of these. And I'm going to drag them into the workflow area and just let go. The act of me doing that will automatically create a new action, this is an action, with those files that I just specified. They're added to this action called Get Specified Files.

The result of this action will just be a list of those files to the next action. And then once I've dragged those in there, then I can click my Movies category over here and I have an action here that says Set Movie Playback Properties. This action will set the playback properties of the past movie files.

The settable playback properties include AutoPlay, AutoClose when done, AutoQuit when done, AutoPresent. If AutoPresent is active, the playback size of the movie will be chosen. So let's add that to my thing. I'll give it a double click. And then I could say I want these movies just to autoplay and not set anything other than just that particular property. Now I can then say, alright, click Run. That ain't gonna work. Because that's the wrong player. Well, it's gonna attempt.

And the nice thing is I don't have to do this. It's doing it for me. Okay, and it tells me here at the bottom that it's completed. And what happened to my movie folder? Back here, Movies, Switch Movies, and I think Qbert was one of them.

[Transcript missing]

Ain't no audio. Try it again.

So that's now set to autoplay. As a matter of fact, I can then go back here to my existing workflow and I can say, "Alright, well I'd also like to have them automatically close when they're done." And, as long as you're at it, have them present full screen. Let's say, hold on a second, this is where. That's the wrong one. Let's quit this guy.

[Transcript missing]

We need an audio for it. Or a little Jetson thing. Okay, now we'll go back to our thing and select one of the tracks like Qbert again. How can I do it? Hang on. Qbert DJ, it should have set it to... Oh, I didn't set the present, sorry. Okay, what I'm going to do is select a couple of these and delete those so we don't have to go again. Let's run this.

The execution has been done. Now I can go back to Qbert. Do I have audio on this laptop at all? No, you're not sending it. Well, the player's not playing it, is what you're saying. Okay. Now let's see if it will automatically quit once the commercial's done. His mom's going, "I can't believe he did a nationwide TV." That's what moms think about.

And it automatically closes when done. So setting the properties of a movie using automators is a very easy process. Drag them in, add the actions in after it, and there you go. As a matter of fact, you can do a lot of things with it. You could set the movie annotations, and then you can browse the movies.

I'm going to add movie annotations here. And I'm going to have it delete existing annotations. Let's choose artist here, or let's see, copyright. And we'll have option A, copyright, AppleScript. And we'll have it do that. And then when we're done we're gonna have it browse the movies for us as well. And go.

So it should just be a couple. Now can you imagine this with compressing, with sharpening? So now we'll let you browse the movies in this wonderful little web interface. And then you can click the next one. On Panther this draws very fast. So it was very easy for us to be able to use Automator to do basic production actions with the QuickTime player.

And this is the power that's coming to you when we develop this product. The next thing is taking this same kind of idea of having the ease of creating a workflow and taking it to the next level of being able to control this machine and other machines that are involved in QuickTime production.

And one of the tools that is used is the QuickTime Broadcaster. And this is where Ryan is going to come in handy with this whole thing. And we're going to show you how we used the Automator to automate using the QuickTime. And we're going to show you how we used the Automator to automate using the QuickTime Broadcaster to control the actions of a remote computer. Woo. Okay, Ryan. Take it away.

Okay, let me steal your video here, if you don't mind. Oh, okay. We only have one video? Yeah. Okay. Mental note to... So we thought it'd be kind of fun to figure out a way to control Broadcaster because it's a really scriptable application. And with Automator you get a lot of power.

Can I have this laptop please? Maybe? So we wrote a few little stages/actions to take care of dealing with Broadcaster. Creating settings is not that great, so let's consolidate it into a nice little interface here and set up Broadcast to 256, 192, standard, 20 fips. We like keyframes, they're good.

Well, let's just broadcast to myself, shall we? Or to a server I have, even. So that's great. OK, what am I doing with this? Well, this action actually is just going to create a settings file. It doesn't do much for you. So I can write that out to a text, a new text file, and we'll call this Settings, if I could spell.

So, we're complete. Well, what did it do? On my desktop I have this little settings file which I can Here we go. And me, as you see. All my settings are loaded into QuickTime Broadcaster with my server and everything. That's great, but it doesn't do much for me.

I want to take this and actually make it work. So what we decided to do is I'm going to take this file that I just created and automatically broadcast it over to Sal's machine, have him start broadcasting for me, so you can control a remote broadcaster over wireless. Except I need your IP address. Oh, OK. Now, nobody else-- you muck with this right now. I'm going to give my IP address. I don't want to see any other weird messages coming in, because I know how you are. It's 17.210.65.14.

I'm going to zoom in because I can't see it. There it is. 17.210.65.14. Excellent. Okay. So now on my machine I've made sure that I have program linking turned on. Under the sharing preferences there is an option for remote Apple events. And I have enabled that and we have him on my machine as a user. Those are two requirements that you need in order to be able to control my machine remotely using Apple events. Go ahead.

Okay. So we have a broadcast already. So you added a new action. Yeah, okay. So, yeah, instead of sending it to a text file, we've got a nifty little app. Excellent, okay. We have a nifty little action we created called initiate remote broadcast, which was at the top of the list because it's the most relevant item to follow the one that I just created, just added to my workflow.

Hello, okay. So, I'm going to put in Sal's IP address because we have the remote machine here, which he just gave me. We're going to call my broadcast settings file "broadcast," why not? And I automatically want it to start broadcasting. So let's let that run and see what happens.

We have to log into his machine with a user that we already have on that machine. Today I'm Trudy. So what it's doing is it's logging in, writing to the desktop the broadcast file that I just created, launching Broadcaster with that file. and hopefully starting the broadcast. Hang on. It wrote it.

And broadcaster keeps quitting on me. But that's okay. Let me show you. From my computer. There it is. Oh, it's actually doing it right now. Yeah, it kicked in. It just took a little delay. So you can see that it is broadcasting from this camera. There is the file and there's the crash. Oh, but even better, let's... I think I want to watch. But it did work.

It actually controlled my machine from his computer, wrote the broadcast settings to my desktop, opened it up with the QuickTime broadcaster, it initiated the broadcast. It worked for a little while. That's not too bad. Remember, this is all, you know, introductory stuff. You're peering at the future here. That was good. Yeah, peering at the future. Okay.

Excellent. So that's great. That's one of the wonderful applications that we have in the world of QuickTime that actually is really scriptable. A new one that we have coming up-- oh, yeah, OK. A new one that we have coming up with Tiger is going to be QuickTime Streaming Server Publisher. And we have a new rev with that that you actually have shipping in the disks that you have today. And we've added some scriptability. So we thought it would be a little fun to do something with that. So I'm going to upload some files to the server.

Create a playlist with those files I just uploaded and automatically start that playlist broadcasting. Ooh. Ooh. Yes. So I've got one Nifty file here on my desktop. Great. So you just drag that in to get the specified stages, right? Exactly. Yep. Okay. And then I'm going to upload to Publisher. So I've got my Nifty IP address.

That's supposed to be bullets. Well, I forgot to ask Jim how to do the bullets in the text field. OK. New playlist. I've been occupied with other stuff. Sorry, Ryan. It's all right. Oh, we're bouncing. What does this mean? So let's go look at what-- see what's happening. It's logging in, and look, it's uploading our file for us. "I think you have to go connect or something, right?" "Well, it's already connected." "Oh, really?" "It's already uploading." I think that was it. But it's hanging. I think I have a corrupt file. Oops.

Is that making progress? We need a percentage thing here. OK. I'm turning this into UI feedback for it. How come it's not saying like 10% or something? Just let me know. Hmm. Oh, it's still uploading.

[Transcript missing]

So we have this neat little thing in music. We've got this action set, get playlist tracks. I think you're still going there for the previous one. All right, stop. You might have to just use a new workflow for right now.

[Transcript missing]

These are important things. So here we go, back to this. So we've got the-- we want to get the playlist tracks from iTunes. Let me choose a playlist I have here. Music for streaming, that sounds nifty. I'm going to get the file tracks. And this actually, if you notice at the bottom here, delivers an iTunes track. So it's actually a path to the iTunes track within the program.

Actually, it's a reference to the iTunes track object, which you don't need to know about. Why? Because Automator will handle it for you. Go ahead. It automatically figures out that what I require is a file or a folder, converts the output of the last action into what I need for this action. Ooh. Invisible conversion. Didn't know it was there, did you? OK. And now you all know my name and password on this machine.

Call this iTunes and run. So these are, see data conversion completed here. Logging in. I'm going to get progress bar here. It's having a hard time transferring things. Well, it's trying again, but it's transferring up my MP4 audio, AAC audio, up to the server and it will create a playlist eventually. and add this to the playlist. So you can automate this quite easily.

We have also the option to automate, you can save this and ask when it's run so that when you save this whole workflow as a script you can actually access this via an iCal event or something else and automatically have this pop up and create your own playlist on demand without having to go through all these steps of setting up another workflow or setting up your own AppleScript later on. So this is the power of Automator. Yes. Is that interesting?

Thank you. Yeah, you can see where we're going with this. You're catching it. Just leave that running. So you're catching this at a really early stage. But isn't the whole idea behind automation the fact that you should just be working with what you want to do and not have to deal with the intricacies of how to do that? And that's the beauty of what Automator can do.

As you've seen before, as you saw initially, AppleScript can automate things, but now this takes it to the next level to where you're just saying, "I want to do this task, then that task, then this task, and go do it for me." And even if that task involves communicating to a machine across a network, you don't have to deal with all the other things that are involved with it. So this is where we're taking QuickTime and AppleScript together in the future.

We're very excited about Automator and the new versions of QuickTime that's coming out. There's also one more thing I wanted to show you about... Are you running Tiger here? I am. Okay, just leave it. All right. I wanted to show you one more thing about AppleScript and QuickTime.

It is this. So we're very focused on AppleScript in giving you access to the various components in the operating system. And I'm in the script editor application right now. This is located within your applications folder, AppleScript. And I've opened up the library window, which you can also get from the window menu. And within the library window we keep a list of some of the favorite applications that you might want to access. They're scripting dictionaries. And one of the applications is called System Events.

This is an invisible process that runs in the background that controls a lot of what's done with AppleScript. And you can see that it has a rather extensive dictionary. I just want to point out that it now has a new XML suite for reading and writing XML stuff. Yay!

And it also has a Where is it? QuickTime File Suite. Let's take a look at this and show you what is available there. This particular suite will allow you to access information about QuickTime media files without having to use the QuickTime player. You can just ask the question or get the properties of it and as you can see there's a class of object called annotation because that's a common thing that people want to do.

They want to be able to get information about the movies that they're working with. You can also see that QuickTime data has basically your core things about presentation size, presentation mode, is it a storage stream, what's the time scale, is it set for auto-quit when done, is it set to automatically play. And you can see that there's also other information about the contents of the file and information about QuickTime tracks and all the data about tracks, QuickTime tracks as well.

So this particular set of, this particular set of files is a set of files that are available on the QuickTime platform. And this particular set of commands in the QuickTime File Suite will be really great for just getting quick information and sending quick information about QuickTime media files without having to rely on the player in the future. So this is coming up for you in Tiger as well. Well that's what we have for you today. We'll be glad to stand here and take some questions about this and any of your ideas. Thank you.
