WEBVTT

00:00:12.510 --> 00:00:14.310
All right, good afternoon.

00:00:14.400 --> 00:00:15.840
My name is Nader Nafissi.

00:00:15.840 --> 00:00:20.100
And I'm the product manager
for Apple Remote Desktop.

00:00:20.100 --> 00:00:22.300
This is our last session
on ARD this week.

00:00:22.390 --> 00:00:26.180
We've had a couple so far,
and it's been really well received.

00:00:26.180 --> 00:00:29.070
And this session is,
we're not going to repeat the

00:00:29.140 --> 00:00:30.920
lock screen demos anymore.

00:00:30.920 --> 00:00:32.680
This is going to be totally, thank you,
yeah.

00:00:32.680 --> 00:00:38.220
This is going to be more about just
applying some of the features you've

00:00:38.220 --> 00:00:40.570
learned about so far this week.

00:00:40.620 --> 00:00:45.800
So just to review, Apple Remote Desktop,
it's all about software distribution,

00:00:45.800 --> 00:00:49.160
asset management, remote administration,
remote assistance.

00:00:49.160 --> 00:00:51.400
And it is based on open standards.

00:00:51.400 --> 00:00:55.160
And that's what we're really going to be
hinging the rest of this presentation on.

00:00:55.160 --> 00:00:59.090
We're going to be showing you how you
can plug in and extend some of the

00:00:59.420 --> 00:01:01.640
capabilities we have in the product.

00:01:01.640 --> 00:01:07.010
And we've got three presenters here that
each one is going to be walking through

00:01:07.010 --> 00:01:09.870
different parts of the product and just
showing you and giving you a little

00:01:09.870 --> 00:01:10.560
bit of a look at what they're doing.

00:01:10.560 --> 00:01:11.560
And we're going to be giving you ideas.

00:01:11.560 --> 00:01:16.550
Some of them you can start using,
but some of the other demonstrations

00:01:16.560 --> 00:01:20.710
are really intended to be just
giving you ideas about how you

00:01:20.820 --> 00:01:23.850
can extend and integrate the
product into your environment.

00:01:23.900 --> 00:01:26.790
So without further ado,
I'm going to introduce

00:01:26.790 --> 00:01:28.620
Tony Graham here on stage.

00:01:37.650 --> 00:01:40.500
I was actually planning on
demonstrating the lock feature.

00:01:40.500 --> 00:01:42.660
That was my whole shtick.

00:01:42.780 --> 00:01:43.260
Thanks, Nader.

00:01:45.300 --> 00:01:48.440
Actually,
I'm going to cover two possible uses

00:01:48.590 --> 00:01:52.790
for Apple Remote Desktop's capabilities.

00:01:52.860 --> 00:01:57.310
The fact that it is based on open
standards and utilizing a database behind

00:01:57.310 --> 00:02:02.190
the scenes and also has some command line
tools for managing and monitoring it.

00:02:06.270 --> 00:02:09.380
Actually,
I'm going to cover two possible uses

00:02:09.610 --> 00:02:13.690
for Apple Remote Desktop's capabilities.

00:02:13.770 --> 00:02:18.210
The fact that it is based on open
standards and utilizing a database behind

00:02:18.210 --> 00:02:23.100
the scenes and also has some command line
tools for managing and monitoring it.

00:02:34.100 --> 00:03:31.800
[Transcript missing]

00:03:32.130 --> 00:03:35.670
I find, and I'll show you in a
moment how that works,

00:03:35.670 --> 00:03:38.870
that if you run it
with the dash H switch,

00:03:38.940 --> 00:03:40.650
you'll get about three
pages worth of very,

00:03:40.780 --> 00:03:41.940
very useful information.

00:03:41.940 --> 00:03:45.790
But there's one particular thing that
I use it for every single time I use

00:03:45.790 --> 00:03:49.340
Apple Remote Desktop and Kickstart,
and that is to find out how

00:03:49.340 --> 00:03:52.780
to turn it on and enable all
privileges for a particular user,

00:03:52.780 --> 00:03:54.530
usually an administrator.

00:03:56.230 --> 00:03:59.740
So conveniently in the documentation,
their example for turning on

00:03:59.880 --> 00:04:03.950
Remote Desktop using Kickstart
is for a user named Bob.

00:04:04.050 --> 00:04:08.970
So if you run system library core
service remote management ARD agent.app

00:04:08.970 --> 00:04:12.740
contents resources kickstart-h
and pipe that to grep on Bob,

00:04:12.740 --> 00:04:17.220
you'll get a convenient one line
example for what you need to do

00:04:17.220 --> 00:04:19.810
to turn on Apple Remote Desktop.

00:04:20.090 --> 00:04:23.540
So conveniently in the documentation,
their example for turning on

00:04:23.540 --> 00:04:26.710
Remote Desktop using Kickstart
is for a user named Bob.

00:04:26.710 --> 00:04:26.710
So if you run system library core
service remote management ARD agent.app

00:04:26.710 --> 00:04:26.710
contents resources kickstart-h
and pipe that to grep on Bob,

00:04:26.710 --> 00:04:26.710
you'll get a convenient one line
example for what you need to do

00:04:26.710 --> 00:04:26.710
to turn on Apple Remote Desktop.

00:04:27.150 --> 00:04:29.310
SSH is enabled by default on all servers.

00:04:29.310 --> 00:04:33.580
So if you walk into an environment
where you've got existing servers and

00:04:33.580 --> 00:04:37.400
you need graphical control over them,
or perhaps you're setting up a cluster,

00:04:37.400 --> 00:04:41.310
which could be eight servers
up to thousands of servers,

00:04:41.320 --> 00:04:43.360
and you want to enable
Apple Remote Desktop,

00:04:43.360 --> 00:04:45.510
this is immediately going
to be useful to you.

00:04:45.510 --> 00:04:48.420
In a client scenario,
SSH may or may not be enabled,

00:04:48.420 --> 00:04:51.580
so you may or may not be able
to take advantage of this.

00:04:52.640 --> 00:04:56.750
Now, the path is rather long,
and the commands are rather long,

00:04:56.750 --> 00:05:00.140
so I'll also show you how you
can wrap that command around a

00:05:00.190 --> 00:05:03.820
GUI using a number of technologies,
but I'll show you with one of them.

00:05:06.290 --> 00:05:08.250
The way I chose to do that
is with a program that

00:05:08.250 --> 00:05:09.960
I wrote called the Activator.

00:05:10.000 --> 00:05:13.040
And the Activator is a simple,
real basic application that

00:05:13.040 --> 00:05:17.320
uses asynchronous shells so it
can issue Unix shell commands.

00:05:17.360 --> 00:05:21.220
I pipe that big, long script in there,
click a button, and it turns on

00:05:21.220 --> 00:05:23.280
Remote Desktop on that machine.

00:05:24.670 --> 00:05:26.630
With the addition of
an inexpensive plugin,

00:05:26.630 --> 00:05:32.940
Real Basic can browse and retrieve
entries on a rendezvous-enabled network.

00:05:32.940 --> 00:05:36.660
And SSH on Mac OS X systems
will advertise their

00:05:36.670 --> 00:05:38.020
ability through rendezvous.

00:05:38.020 --> 00:05:41.520
So I can actually get a list of all the
machines on my network that have SSH on,

00:05:41.520 --> 00:05:44.120
so I don't need to know the
IP addresses in advance.

00:05:46.920 --> 00:05:47.690
Now we'll switch gears.

00:05:47.700 --> 00:05:49.820
I'll show you the demo on
the activator in a moment,

00:05:49.840 --> 00:05:51.590
and then we'll switch
gears to database access.

00:05:51.600 --> 00:05:54.500
As you probably know,
Apple Remote Desktop stores the

00:05:54.500 --> 00:06:00.110
data that it retrieves when doing a
system report in a Postgres database.

00:06:00.280 --> 00:06:02.400
Now by default,
ARD is really the only thing

00:06:02.400 --> 00:06:05.520
that can talk to that database,
but there are two configuration

00:06:05.530 --> 00:06:09.300
files that you can modify that
will allow you to access that

00:06:09.300 --> 00:06:11.800
database through command line tools,
through graphical

00:06:12.230 --> 00:06:15.330
environments like Real Basic,
or any other of a number of

00:06:15.330 --> 00:06:19.140
database access technologies
that can deal with Postgres.

00:06:19.390 --> 00:06:21.500
Now by default,
ARD is really the only thing

00:06:21.500 --> 00:06:24.600
that can talk to that database,
but there are two configuration

00:06:24.630 --> 00:06:28.400
files that you can modify that
will allow you to access that

00:06:28.400 --> 00:06:30.950
database through command line tools,
through graphical

00:06:31.130 --> 00:06:34.430
environments like Real Basic,
or any other of a number of

00:06:34.430 --> 00:06:38.160
database access technologies
that can deal with Postgres.

00:06:49.300 --> 00:06:53.620
The first one is called Rmdb,
and it runs in a standard

00:06:53.620 --> 00:06:57.520
Postgres installation,
for the instance that

00:06:57.520 --> 00:07:00.000
Apple Remote Desktop is using.

00:07:00.360 --> 00:07:03.100
Now, using a graphical environment
like Real Basic and a

00:07:03.100 --> 00:07:06.240
plug-in that comes with it,
you can tap into the

00:07:06.240 --> 00:07:07.650
database and explore it.

00:07:07.670 --> 00:07:08.910
And I'll show you in a
moment how to do that.

00:07:08.920 --> 00:07:12.200
There are two tables in the
database that you'll see.

00:07:12.200 --> 00:07:14.260
One is the property name map table.

00:07:14.260 --> 00:07:17.480
I haven't really found
too much to use that for.

00:07:17.480 --> 00:07:20.640
The main one that I've used is
the system information table.

00:07:20.640 --> 00:07:24.010
And in this table,
you'll find a line for every conceivable

00:07:24.380 --> 00:07:29.170
property that Remote Desktop can
capture and the value that it captured.

00:07:29.420 --> 00:07:32.640
One thing to note, though,
is that ARD only stores the

00:07:32.640 --> 00:07:36.080
last value for that particular
property that was searched.

00:07:36.290 --> 00:07:38.230
So there's no historical data.

00:07:38.230 --> 00:07:41.250
You can't say, for example,
what was the amount of

00:07:41.250 --> 00:07:43.140
RAM on this system last week.

00:07:46.900 --> 00:07:50.840
So again, using Real Basic,
an application called ARD Tracker allows

00:07:50.840 --> 00:07:55.610
you to periodically pull that database,
ARD's database, capture the information

00:07:55.610 --> 00:07:58.360
that you care about,
and store that in another

00:07:58.360 --> 00:08:02.080
database so that you can,
over time, collect that.

00:08:02.740 --> 00:08:06.560
Folks could use this in lab management
scenarios or security scenarios

00:08:06.560 --> 00:08:10.240
where you're monitoring your
equipment and then one day you notice,

00:08:10.240 --> 00:08:13.660
because you're getting a report,
that the RAM in several of

00:08:13.680 --> 00:08:16.710
the machines has gone down,
which is not normally the

00:08:16.710 --> 00:08:18.260
way you want that to go.

00:08:18.260 --> 00:08:23.300
So I'm not going to actually demonstrate
the removal of RAM from these machines.

00:08:23.300 --> 00:08:26.260
I'll actually be capturing file
sharing information so we'll be

00:08:26.260 --> 00:08:29.840
able to see if file sharing has been
enabled or disabled on those systems.

00:08:29.860 --> 00:08:32.720
So we've got a couple
of demos that we'll do.

00:08:32.740 --> 00:08:34.090
Thank you.

00:08:37.530 --> 00:08:41.400
First thing we want to do is take a
quick look at the Kickstart script.

00:08:41.400 --> 00:08:44.880
You've all been taking notes,
so you're going to tell me where it is,

00:08:44.890 --> 00:08:45.390
right?

00:08:48.800 --> 00:08:58.200
[Transcript missing]

00:08:58.600 --> 00:09:22.500
[Transcript missing]

00:09:24.530 --> 00:09:30.000
This one line kickstart command
will configure the agent,

00:09:30.130 --> 00:09:33.240
turn access on with all privileges
for the following users.

00:09:33.240 --> 00:09:36.150
In their example, they use admin and Bob,
so you can set multiple

00:09:36.170 --> 00:09:37.320
users in one command.

00:09:37.320 --> 00:09:42.310
I don't have a Bob user on here,
but I can do that remotely.

00:09:42.680 --> 00:09:45.080
Now,
we've got a bank of iMacs to your right.

00:09:45.130 --> 00:09:45.940
There's nine of them.

00:09:45.940 --> 00:09:48.300
And they currently have
the SSH daemon enabled,

00:09:48.300 --> 00:09:52.490
the remote login daemon enabled,
but not Apple Remote Desktop.

00:09:52.500 --> 00:09:56.620
So let's see if we can figure out how
to do that on one of those systems.

00:10:18.950 --> 00:10:25.370
Get into one of those machines,
192.168 and 0.14,

00:10:25.370 --> 00:10:31.700
and I'm going to send it a tail
minus f on /var/log/system.log.

00:10:31.700 --> 00:10:35.780
As the agent is enabled or disabled,
it'll log to that file.

00:10:35.790 --> 00:10:39.760
So we'll watch it in real time.

00:10:42.830 --> 00:10:44.790
In this screen.

00:10:44.860 --> 00:10:46.900
And I don't, yeah,
I guess that was lab number one.

00:10:47.040 --> 00:10:49.900
So I gotta give it an admin user.

00:10:51.350 --> 00:10:53.300
And this application is fairly simple.

00:10:53.300 --> 00:10:55.680
It's simply going to take the
administrator that I punched in there

00:10:55.680 --> 00:10:57.920
and the password that I punched in there.

00:10:57.980 --> 00:10:59.830
You have to have that account
on the remote machine,

00:10:59.830 --> 00:11:01.440
and that has to be the
account that you are,

00:11:01.440 --> 00:11:02.440
in fact, enabling.

00:11:02.440 --> 00:11:05.900
As you saw on the command line,
you could enable any number of accounts.

00:11:05.980 --> 00:11:08.770
But this application will simply
assume that you want to enable

00:11:08.780 --> 00:11:09.930
that one administrator account.

00:11:10.010 --> 00:11:11.780
So let's see what happens
when we activate it.

00:11:11.880 --> 00:11:15.270
And while that's going,
I probably should show you

00:11:15.270 --> 00:11:17.280
that in Apple Remote Desktop,

00:11:17.780 --> 00:11:22.720
Some of these systems are in fact off,
or at least not visible

00:11:22.720 --> 00:11:24.860
to Apple Remote Desktop.

00:11:25.600 --> 00:11:26.920
So some of them are
starting to come out now,

00:11:26.920 --> 00:11:27.800
and it could take a while.

00:11:27.800 --> 00:11:30.410
It actually, when you activate the agent,
it's going to start a

00:11:30.410 --> 00:11:32.760
number of processes,
including the database

00:11:32.760 --> 00:11:34.800
processes and the VNC process.

00:11:34.800 --> 00:11:36.170
So we'll give that a minute.

00:11:36.170 --> 00:11:41.590
Sometimes I get impatient,
I hit the button a few times.

00:11:44.940 --> 00:11:50.760
While we're waiting for that to come up,
let's tap into the database as well.

00:11:53.070 --> 00:11:56.460
As you probably know,
you can select machines in your list

00:11:56.870 --> 00:12:00.150
and run a system overview report.

00:12:00.540 --> 00:12:03.810
In this case,
I'm going to choose sharing.

00:12:06.100 --> 00:12:09.370
And then we collect new
data for the report.

00:12:09.380 --> 00:12:12.200
Those values are being
stored in Postgres.

00:12:13.720 --> 00:12:17.830
Now using Real Basic with
the Postgres plugin,

00:12:17.830 --> 00:12:20.890
I can develop a quick application.

00:12:22.000 --> 00:12:25.760
Switch these around.

00:12:25.760 --> 00:12:28.710
I first have to add a new data source.

00:12:30.530 --> 00:12:33.660
And prior to doing the demo,
I did go into those two configuration

00:12:33.660 --> 00:12:36.400
files and make two changes that
would allow another application

00:12:36.400 --> 00:12:38.230
to talk to the ARD database.

00:12:38.250 --> 00:12:41.440
So the database name is ARD,
and the password is ARD.

00:12:41.860 --> 00:12:42.820
Sorry, the user is ARD.

00:12:42.820 --> 00:12:44.000
And I blew my punchline.

00:12:44.000 --> 00:12:45.440
The password is ARD as well.

00:12:48.200 --> 00:12:49.430
And if you're able to
talk to your database,

00:12:49.430 --> 00:12:51.240
you should be able to double
click on this and see those

00:12:51.240 --> 00:12:52.900
two tables I told you about.

00:12:53.080 --> 00:12:57.190
And the system information is the
table that I find the most useful.

00:12:57.340 --> 00:13:00.900
If I hit edit schema here,
you can see the fields that are in there.

00:13:00.950 --> 00:13:03.430
And the computer ID is a unique
ID for every machine that

00:13:03.430 --> 00:13:06.370
you've added to your database,
and that's based on the

00:13:06.450 --> 00:13:08.690
built-in Ethernet MAC address.

00:13:08.790 --> 00:13:10.620
That shouldn't change.

00:13:11.020 --> 00:13:12.720
Then for the things that
you're interested in,

00:13:12.720 --> 00:13:16.330
there should be a property name
like file sharing is enabled

00:13:16.450 --> 00:13:20.850
and a value like true or false,
yes or no, or a string or a number,

00:13:20.860 --> 00:13:21.640
something along those lines.

00:13:21.640 --> 00:13:23.810
Actually, they're all going to
be essentially strings,

00:13:23.810 --> 00:13:24.710
but you get the idea.

00:13:24.720 --> 00:13:27.490
Now,
if I want to see what's in that database,

00:13:27.490 --> 00:13:32.020
I can switch to an empty window here,
and I'm going to drag a multi-column

00:13:32.090 --> 00:13:33.900
list box off my palette.

00:13:37.300 --> 00:13:39.840
And we'll set that list box
to grow with the window.

00:13:39.840 --> 00:13:42.640
And in fact,
we should tell the window that it can,

00:13:42.690 --> 00:13:43.690
in fact, grow.

00:13:44.820 --> 00:13:47.860
And I'm going to add a data--
what do we call these things?

00:13:47.880 --> 00:13:50.130
A database query control.

00:13:51.310 --> 00:13:54.790
The database query control needs to
be told which database it's querying.

00:13:54.790 --> 00:13:56.200
In this case, it's the ARD.

00:13:56.200 --> 00:13:57.330
Can you all see that?

00:13:57.350 --> 00:14:00.200
The ARD database that
I established earlier.

00:14:00.200 --> 00:14:02.570
And I need to give it an SQL query.

00:14:02.570 --> 00:14:09.320
So that's going to be something like
select star from system information.

00:14:15.920 --> 00:14:18.420
Now we're going to use something called
binding with the command and shift

00:14:18.420 --> 00:14:22.050
keys to drag to the list box from
that database query control and say,

00:14:22.080 --> 00:14:26.420
I'd like that list box to display
the results of my database query.

00:14:26.710 --> 00:14:31.780
And finally, I'll set the list box
to have five columns.

00:14:34.260 --> 00:14:37.820
I should be able to run this project
and get an application that now

00:14:37.820 --> 00:14:40.380
sees everything in the ARD database.

00:14:40.380 --> 00:14:43.130
But you're probably going to want
to narrow that down a little bit.

00:14:43.130 --> 00:14:49.820
So I'll quit that and drag a
pop-up menu onto the field.

00:14:49.820 --> 00:14:52.690
And let's make it a little wider.

00:14:53.700 --> 00:15:02.140
We're going to add another database
query control for that pop-up menu.

00:15:04.920 --> 00:15:08.050
Command drag from that database
query control to the pop-up menu.

00:15:08.080 --> 00:15:10.860
I would like that pop-up menu to
display the results of this query.

00:15:10.860 --> 00:15:15.140
And this query is going to be
talking to the same ARD database,

00:15:15.140 --> 00:15:18.500
slightly different SQL code.

00:15:18.500 --> 00:15:27.360
This is going to be select distinct
computer ID from system information.

00:15:31.050 --> 00:15:34.070
So if I run that,
this pop-up menu should display all

00:15:34.070 --> 00:15:39.830
of the unique Mac addresses of every
machine that I've ever run a report on.

00:15:40.060 --> 00:15:42.650
And you probably all know that
reports can be run manually,

00:15:42.650 --> 00:15:45.180
but you can also set your
clients to periodically send

00:15:45.180 --> 00:15:46.600
that data to your database.

00:15:46.600 --> 00:15:49.720
So you don't necessarily have
to be constantly updating

00:15:49.720 --> 00:15:51.320
this database yourself.

00:15:51.350 --> 00:15:53.260
All right,
so the last step is to take this

00:15:53.260 --> 00:15:57.290
pop-up menu that is getting a list
of the unique Mac addresses and

00:15:57.780 --> 00:16:00.530
bind that to our original search.

00:16:00.680 --> 00:16:05.470
We're going to bind that database query
with the selection from the pop-up menu.

00:16:05.920 --> 00:16:08.540
And I have to modify that
database query slightly.

00:16:08.540 --> 00:16:11.640
I want to select only two things.

00:16:11.640 --> 00:16:14.280
Let's get the property name.

00:16:15.740 --> 00:16:19.040
and the value from system information.

00:16:19.040 --> 00:16:21.930
And I apologize if this
is a little bit small.

00:16:22.360 --> 00:16:28.320
Where computer ID equals,
and then in quotes I can put percent one.

00:16:28.320 --> 00:16:32.170
So that's going to hold the
value that the pop-up menu gives

00:16:32.170 --> 00:16:34.570
it when I change the selection.

00:16:34.590 --> 00:16:39.510
We'll switch the number of
columns back down to two.

00:16:44.730 --> 00:16:46.880
And now I should be able
to stretch this guy wider,

00:16:47.010 --> 00:16:50.020
pick a machine,
and see all the properties that the

00:16:50.060 --> 00:16:51.910
database stores for that machine.

00:16:52.050 --> 00:16:55.000
And some of those properties
would be things like

00:16:55.140 --> 00:16:57.340
And now I should be able
to stretch this guy wider,

00:16:57.340 --> 00:17:00.420
pick a machine,
and see all the properties that the

00:17:00.510 --> 00:17:02.440
database stores for that machine.

00:17:02.440 --> 00:17:05.400
And some of those properties
would be things like

00:17:10.360 --> 00:17:12.700
So I've got a number of machines now.

00:17:12.770 --> 00:17:18.520
I'm going to show you a finished project
that uses the same techniques that

00:17:18.610 --> 00:17:21.040
I just showed you called ARD Tracker.

00:17:21.040 --> 00:17:25.410
And ARD Tracker is going to
periodically do queries against ARD's

00:17:25.410 --> 00:17:28.100
database using the Postgres plugin.

00:17:28.260 --> 00:17:31.820
But it's going to save that data
in its own database as well.

00:17:31.820 --> 00:17:36.500
So as those values change over time,
this application will know that.

00:17:36.700 --> 00:17:39.680
And we've got some historical
data already in there.

00:17:39.750 --> 00:17:43.390
Let's see if we can find the
most recent value for Lab 1.

00:17:43.410 --> 00:17:45.110
And again,
I'm going to check file sharing

00:17:45.140 --> 00:17:46.760
because it's something I can easily do.

00:17:46.780 --> 00:17:49.240
But you might want to check
things like hardware properties,

00:17:49.240 --> 00:17:51.920
amount of RAM, free space,
operating system installed,

00:17:51.920 --> 00:17:53.300
and that sort of thing.

00:17:53.300 --> 00:17:55.940
So Lab 1 has currently
got file sharing on.

00:17:55.940 --> 00:18:01.560
Let's use Remote Desktop to
control that guy.

00:18:04.610 --> 00:18:10.030
Go to sharing and turn
off personal file sharing.

00:18:13.200 --> 00:18:16.030
ARD isn't going to know immediately
that file sharing has been turned off.

00:18:16.160 --> 00:18:17.250
We need to run a report.

00:18:17.370 --> 00:18:19.280
And ordinarily,
this thing isn't going to be pulling

00:18:19.290 --> 00:18:20.760
your database every 10 seconds.

00:18:20.760 --> 00:18:24.160
It probably will be doing
something similar once a day,

00:18:24.160 --> 00:18:26.760
once a week,
at an interval that you decide.

00:18:26.890 --> 00:18:29.960
I'm going to go ahead and
select all of the machines here.

00:18:30.290 --> 00:18:33.630
We'll do a system overview report,
and I'm going to uncheck all of

00:18:33.690 --> 00:18:36.160
the options except for sharing.

00:18:38.970 --> 00:18:42.390
We'll do a system overview report,
and I'm going to uncheck all of

00:18:42.390 --> 00:18:44.530
the options except for sharing.

00:18:45.200 --> 00:19:09.600
[Transcript missing]

00:19:09.940 --> 00:19:13.390
We'll do a system overview report,
and I'm going to uncheck all of

00:19:13.390 --> 00:19:15.860
the options except for sharing.

00:19:23.990 --> 00:19:26.330
And in fact, you can embed Apple Scripts
within these things,

00:19:26.330 --> 00:19:29.400
so the Apple Script could
do a number of things.

00:19:30.420 --> 00:19:33.640
And speaking of AppleScript,
I think that's probably it for

00:19:33.640 --> 00:19:36.940
my portion of today's demo.

00:19:36.940 --> 00:19:40.060
So I'll introduce Steve Hayman to you,
who will show you even more useful things

00:19:40.060 --> 00:19:42.390
you can do with Apple Remote Desktop.

00:19:49.050 --> 00:19:50.000
Thanks Tony.

00:19:50.000 --> 00:19:51.840
I know this has been a very
busy week for everyone,

00:19:51.840 --> 00:19:56.880
what with the Canadian election on
Monday and yesterday being Canada Day,

00:19:56.880 --> 00:19:59.400
so I'm really glad that
you're all still here.

00:19:59.400 --> 00:20:05.190
One of the things Tony was
doing was using Remote Desktop.

00:20:05.920 --> 00:20:07.820
He's using SSH to turn on Remote Desktop.

00:20:07.820 --> 00:20:10.000
I have the wonderful advantage
of going after him here.

00:20:10.000 --> 00:20:13.320
So I'm going to use Remote Desktop to
turn off remote login so that

00:20:13.320 --> 00:20:15.120
he can't do that demo anymore.

00:20:15.120 --> 00:20:19.190
So one of the great features here
is this Send Unix Command button.

00:20:19.210 --> 00:20:21.950
I am personally a bulk
user of this button.

00:20:21.950 --> 00:20:26.370
And just to mess up, Tony,
we're going to do...

00:20:27.360 --> 00:20:27.760
Oh, pardon me.

00:20:27.830 --> 00:20:28.860
Could we have demo two, please?

00:20:28.860 --> 00:20:32.340
Or the other demo, whichever this one is?

00:20:32.340 --> 00:20:33.950
Thank you.

00:20:34.030 --> 00:20:38.490
I selected a list of machines here,
and I'm going to use system setup

00:20:38.880 --> 00:20:41.430
dash F dash set remote login off.

00:20:44.900 --> 00:20:48.480
Now Tony's demo will not work anymore,
so this is the great advantage

00:20:48.480 --> 00:20:50.250
of going second in the session.

00:20:50.280 --> 00:20:51.380
If I could go back to slides, please.

00:20:51.380 --> 00:20:54.740
We'll do more exciting
ones than that in a minute,

00:20:54.740 --> 00:20:55.660
I promise.

00:21:00.600 --> 00:21:04.040
I've been a Unix guy for a long time
and I can't believe how lucky I am

00:21:04.040 --> 00:21:08.200
that they've put in this Send Unix
Command feature in Apple Remote Desktop.

00:21:08.200 --> 00:21:11.590
I want to personally thank Nader
for responding to the harassing

00:21:11.590 --> 00:21:14.180
way that I demanded that this
valuable feature be added.

00:21:36.950 --> 00:21:39.860
So I want to show you interesting
ways you can muck around with this

00:21:39.860 --> 00:21:43.810
fleet of iMacs that we have over here
using the Send Unix Command feature.

00:21:43.840 --> 00:21:46.680
I want to talk a little bit about
discovering how the machines are set up.

00:21:46.780 --> 00:21:48.760
I want to show you how you
can change how they're set up.

00:21:48.830 --> 00:21:50.790
And at the end,
I might build something that

00:21:50.890 --> 00:21:53.430
might kind of remind you of
a software update server.

00:21:55.850 --> 00:21:56.800
So this is the magic button.

00:21:56.800 --> 00:21:58.900
It's my favorite button and
I'm sure it will soon be

00:21:58.900 --> 00:22:01.300
your favorite button as well.

00:22:01.840 --> 00:22:02.800
So this is the magic button.

00:22:02.800 --> 00:22:04.900
It's my favorite button and
I'm sure it will soon be

00:22:04.900 --> 00:22:07.280
your favorite button as well.

00:22:31.800 --> 00:22:34.310
Here's a different user which
is necessary if nobody happens

00:22:34.310 --> 00:22:35.760
to be logged in at the moment.

00:22:35.760 --> 00:22:39.010
ARD takes what you typed,
sends it to each of the

00:22:39.010 --> 00:22:43.140
remote machines in parallel,
feeds it into the bash shell.

00:22:43.520 --> 00:22:47.330
runs the output and displays it and
the exit status in a new computer list.

00:22:49.190 --> 00:22:50.900
So on the remote side, it's using Bash.

00:22:50.900 --> 00:22:52.990
It's not actually copying
a shell script file.

00:22:53.000 --> 00:22:55.090
It's actually starting up a Bash process.

00:22:55.300 --> 00:22:55.640
Process?

00:22:55.770 --> 00:22:56.200
Process?

00:22:56.260 --> 00:22:57.320
Process.

00:22:58.240 --> 00:22:58.950
Process.

00:23:00.540 --> 00:23:01.400
Who says Java?

00:23:01.400 --> 00:23:02.090
Who says Java?

00:23:02.090 --> 00:23:02.850
Not Java.

00:23:02.990 --> 00:23:03.750
It's Java, right?

00:23:03.840 --> 00:23:06.380
All right,
it starts a process on the remote

00:23:06.380 --> 00:23:09.810
machine and it feeds whatever you
type into the standard input of that,

00:23:09.810 --> 00:23:11.240
I can't say it, process.

00:23:12.990 --> 00:23:16.580
With this convenient path all set up,
and there's one weird directory in

00:23:16.580 --> 00:23:18.580
there that I'll talk about in a moment.

00:23:18.720 --> 00:23:22.380
So your commands run as the
remote user of your choice,

00:23:22.380 --> 00:23:25.050
maybe root, maybe the login user.

00:23:25.270 --> 00:23:25.870
So what can you type?

00:23:25.920 --> 00:23:28.780
Well, you can type anything that you
might find in the regular Unix path.

00:23:28.780 --> 00:23:29.680
Here's a couple of ideas.

00:23:29.800 --> 00:23:30.680
Periodic weekly.

00:23:30.680 --> 00:23:33.200
You might want to do that script
that only get executed at,

00:23:33.370 --> 00:23:35.660
what is it,
4:30 on Saturday mornings if the

00:23:35.660 --> 00:23:37.560
computer happens to be turned on.

00:23:37.560 --> 00:23:40.040
You can run that script right now,
periodic weekly.

00:23:40.150 --> 00:23:41.580
You might want to run repair permissions.

00:23:41.580 --> 00:23:44.340
You might want to run software update
dash L to get a list of what's needed.

00:23:44.460 --> 00:23:48.750
Anything that's in the standard Unix
path directories you can just type.

00:23:49.090 --> 00:23:51.710
Type anything else if you want
to give it a full path name.

00:23:51.820 --> 00:23:54.770
But my favorite part is because
it's actually using bash to

00:23:54.770 --> 00:23:59.200
interpret whatever you type,
you can type several commands separated

00:23:59.200 --> 00:24:02.910
by semicolons or on new lines,
or even a little miniature

00:24:02.910 --> 00:24:04.990
bash script if you want.

00:24:05.860 --> 00:24:06.800
What do you get back?

00:24:06.800 --> 00:24:08.460
You get the last line of the output.

00:24:08.500 --> 00:24:10.660
Nader and I have had a number of
discussions about that feature.

00:24:10.660 --> 00:24:17.360
And you get an indication of the success
or failure of the task that you ran.

00:24:17.360 --> 00:24:19.320
It could be that the
command you ran failed.

00:24:19.320 --> 00:24:21.950
A lot of Unix commands execute
with success or failure

00:24:21.970 --> 00:24:23.560
depending on some condition.

00:24:23.570 --> 00:24:26.270
You can spot that quite
easily here in your script.

00:24:27.370 --> 00:24:28.080
So here's an example.

00:24:28.130 --> 00:24:31.550
The command I ran in this case last,
which gives you a list of users,

00:24:31.580 --> 00:24:33.740
and I piped it into grep shayman.

00:24:33.840 --> 00:24:37.250
Of these five machines,
where has shayman actually logged in?

00:24:37.260 --> 00:24:40.500
And you can see that the grep
command failed on the third machine,

00:24:40.500 --> 00:24:43.120
which is actually an iBook
from Henrico Public Schools,

00:24:43.130 --> 00:24:44.360
where I'm not actually a student.

00:24:44.380 --> 00:24:46.630
So I have never logged into
that particular computer.

00:24:46.720 --> 00:24:49.370
But you can spot right away
which commands succeeded,

00:24:49.370 --> 00:24:50.720
which commands failed.

00:24:50.720 --> 00:24:54.030
And you've got these buttons where
you can pick a subset of the machines

00:24:54.030 --> 00:24:55.950
and continue on to do something else.

00:24:56.030 --> 00:24:57.340
So the results come back.

00:24:57.340 --> 00:24:59.800
You can run the same task again
or possibly a different one.

00:24:59.880 --> 00:25:04.390
Now, the bonus tool that I like
is this awkward path here,

00:25:04.580 --> 00:25:08.230
which includes two tools,
system setup and network setup.

00:25:08.360 --> 00:25:11.580
These are a couple of tremendously
powerful command line tools that

00:25:11.580 --> 00:25:13.000
are buried in that directory.

00:25:13.300 --> 00:25:15.920
But because that directory
happens to be part of the path,

00:25:15.920 --> 00:25:18.000
you can just type the path name directly.

00:25:18.070 --> 00:25:19.000
And what can you do with these things?

00:25:19.000 --> 00:25:22.000
Well, the one command you really
need to know is dash help,

00:25:22.040 --> 00:25:23.390
system setup dash help.

00:25:23.420 --> 00:25:26.240
We'll show you a huge list of all
the different-- I'll show you a

00:25:26.240 --> 00:25:27.960
list of all the different options
you can set on the computer.

00:25:27.960 --> 00:25:29.200
You can set the date and the time.

00:25:29.200 --> 00:25:31.140
You can turn the airport power off.

00:25:31.260 --> 00:25:34.080
You actually should
really warn you to say,

00:25:34.080 --> 00:25:36.980
you might not be able to do this again
after you turn the airport power off.

00:25:36.980 --> 00:25:38.160
Are you sure?

00:25:38.170 --> 00:25:40.060
You can turn off remote login,
as I just did.

00:25:40.060 --> 00:25:42.720
You can fool with the computer name
and the startup disk and so on.

00:25:42.810 --> 00:25:45.820
There's also a corresponding
network setup command,

00:25:45.940 --> 00:25:49.290
which is a way of setting and getting
virtually every property you might

00:25:49.460 --> 00:25:52.540
find in the network preference pane.

00:25:52.560 --> 00:25:54.310
What DHCP server should we use?

00:25:54.400 --> 00:25:55.940
What DNS server?

00:25:55.950 --> 00:25:56.940
What IP server should we use?

00:25:56.940 --> 00:25:59.000
You could set the gopher proxy.

00:25:59.000 --> 00:26:02.240
Imagine how much time you're going to
save not having to walk around setting

00:26:02.240 --> 00:26:05.210
gopher proxies on all those computers.

00:26:06.140 --> 00:26:07.170
Save me a lot of time already.

00:26:07.250 --> 00:26:07.740
Boy, I tell you.

00:26:07.840 --> 00:26:09.960
Or, and if you like, you could,
theoretically,

00:26:09.960 --> 00:26:11.580
you could send some Apple Script.

00:26:11.580 --> 00:26:17.890
Now, with Remote Desktop,
there's other ways to send

00:26:17.890 --> 00:26:22.990
Apple Script if you have a file,
but you can type a little bit of

00:26:22.990 --> 00:26:22.990
Apple Script and use the command
line OSA script tool to copy

00:26:22.990 --> 00:26:22.990
that script over and execute it.

00:26:23.790 --> 00:26:26.600
You could even get kind of close
to a software update server.

00:26:26.600 --> 00:26:29.090
Now, I don't pretend to suggest that what
I'm going to show you is anything

00:26:29.090 --> 00:26:32.070
like the software update server
that's been talked about for Tiger.

00:26:32.080 --> 00:26:36.950
But since it's possible to manipulate
software updates via the command line,

00:26:36.960 --> 00:26:39.460
and since software updates are
really just collections of packages,

00:26:39.460 --> 00:26:42.840
there are some interesting things you
can do with grabbing packages locally

00:26:42.840 --> 00:26:46.340
rather than going out onto the internet
to find Apple's software updates.

00:26:46.340 --> 00:26:47.680
So let's try some of this.

00:26:47.680 --> 00:26:50.850
If I could go back to this one.

00:26:57.500 --> 00:27:00.220
Us Unix guys are used to typing
little commands like this,

00:27:00.220 --> 00:27:02.770
uptime,
how long has this computer been up, date,

00:27:02.790 --> 00:27:04.100
what time is it right now?

00:27:04.180 --> 00:27:08.180
All these commands are things that
you could easily do in Remote Desktop.

00:27:08.180 --> 00:27:10.940
You could pick a list
of computers like this,

00:27:10.940 --> 00:27:13.970
say I want to send a Unix
command and I want to see the

00:27:13.970 --> 00:27:16.180
date on all of those computers.

00:27:16.410 --> 00:27:18.190
And here comes the date
on all those computers,

00:27:18.190 --> 00:27:20.740
and one of them seems to
be a little bit off here.

00:27:20.740 --> 00:27:24.730
So this might be a good opportunity
to take the same set of computers,

00:27:24.800 --> 00:27:27.030
try a slightly different command.

00:27:27.040 --> 00:27:32.780
I want to use system setup
dash get using network time.

00:27:32.780 --> 00:27:35.640
Are these computers actually
using network time service or not?

00:27:36.450 --> 00:27:38.960
So they'll just run that
command and show me the output.

00:27:38.960 --> 00:27:40.930
Oh,
the network time service seems to be on

00:27:41.000 --> 00:27:42.730
on three of them and off on the others.

00:27:42.730 --> 00:27:45.660
Now there's a corresponding dash
set network time command where

00:27:45.690 --> 00:27:48.540
with a simple command like this
you can turn network time on and

00:27:48.540 --> 00:27:50.520
off on all those computers as well.

00:27:54.330 --> 00:27:57.740
I think it's a very iterative
process using this feature.

00:27:57.740 --> 00:28:00.950
I do a lot of experimentation myself,
trying little commands in the

00:28:01.000 --> 00:28:04.040
terminal and then seeing if they
work the same way in this tool,

00:28:04.040 --> 00:28:05.440
which of course they do.

00:28:05.510 --> 00:28:08.150
So for instance,
one of the things I've often used is

00:28:08.150 --> 00:28:11.730
the command line software update tool,
software update dash L.

00:28:11.740 --> 00:28:15.550
There's a list of all the software
updates that this computer needs.

00:28:15.570 --> 00:28:16.720
This one happens to be up to date.

00:28:16.720 --> 00:28:17.650
I know some of those aren't.

00:28:18.680 --> 00:28:21.580
But you could easily run
software update tools like this

00:28:21.660 --> 00:28:24.460
to download and install updates,
which I'll show you a little

00:28:24.460 --> 00:28:25.250
bit about in a minute.

00:28:25.310 --> 00:28:27.910
So all the power of the command line
here is available in this tool as well.

00:28:30.320 --> 00:28:34.500
Now I have to admit that there are
a number of pointless things you

00:28:34.500 --> 00:28:35.980
can do with this product as well.

00:28:35.980 --> 00:28:37.200
I've got eight machines over there.

00:28:37.200 --> 00:28:39.300
I might want to execute a
little bit of AppleScript.

00:28:39.300 --> 00:28:41.720
I'll say script.

00:28:41.790 --> 00:28:44.570
I'll feed some AppleScript on
standard input.

00:28:44.680 --> 00:28:46.130
Say the current date.

00:28:47.260 --> 00:28:49.200
as a string using cellos.

00:28:49.200 --> 00:28:53.200
See how that goes.

00:28:54.090 --> 00:28:56.220
Thank you.

00:28:56.260 --> 00:29:00.330
The syntax checking built
into this tool is amazing.

00:29:03.620 --> 00:29:06.510
If you mistype a command,
the product manager will personally

00:29:06.530 --> 00:29:09.460
phone you and correct it.

00:29:09.600 --> 00:29:11.100
Try this again here.

00:29:11.100 --> 00:29:11.600
Here we go.

00:29:11.600 --> 00:29:13.320
Eight computers over there.

00:29:19.300 --> 00:29:21.230
All singing the date,
isn't that fabulous?

00:29:21.250 --> 00:29:26.570
Now, did you notice that they
were all singing in sync?

00:29:26.690 --> 00:29:29.010
The choir was actually doing pretty
well because all these commands

00:29:29.090 --> 00:29:32.420
are actually executed in parallel
and then the output comes back.

00:29:32.420 --> 00:29:34.700
Now, one might want to do a
slightly more elaborate thing.

00:29:34.700 --> 00:29:37.780
I don't know how useful
singing the current date is,

00:29:37.780 --> 00:29:41.040
but one might want to sing
a list of software updates.

00:29:47.040 --> 00:29:47.820
Let's see here.

00:29:47.840 --> 00:29:49.380
No, you can do this.

00:29:49.470 --> 00:29:50.580
You don't have to be rude for this one.

00:30:09.700 --> 00:30:11.860
That was an airport update
and a garage band update.

00:30:11.860 --> 00:30:14.030
I'm not sure.

00:30:14.090 --> 00:30:15.140
That was about right.

00:30:15.140 --> 00:30:16.800
So when you come up with
good tasks like this,

00:30:16.800 --> 00:30:20.300
you can certainly save
them and reuse them later.

00:30:20.300 --> 00:30:24.690
Sing the software updates.

00:30:24.740 --> 00:30:28.320
I'll be wanting to do this one a lot,
so I want to save that one.

00:30:29.700 --> 00:30:31.580
I'm going to actually
add it to my task list.

00:30:31.580 --> 00:30:37.050
There's this notion of a
list of tasks that you've

00:30:37.050 --> 00:30:37.050
previously-- all right already.

00:30:39.230 --> 00:30:42.160
The script is still going.

00:30:42.160 --> 00:30:43.050
The task is finished.

00:30:43.090 --> 00:30:45.540
But the singing is still,
I think there were more software

00:30:45.540 --> 00:30:47.540
updates on that one than I thought.

00:30:48.970 --> 00:30:50.450
So I have a list here.

00:30:50.620 --> 00:30:51.820
Are we done?

00:30:51.840 --> 00:30:52.740
Thank you, ladies.

00:30:52.740 --> 00:30:58.760
I have a list here of some interesting
tools that I've-- command scripts that

00:30:58.760 --> 00:31:00.520
I've written over the past little while.

00:31:00.520 --> 00:31:04.240
And the one that I just
saved is in there as well.

00:31:04.240 --> 00:31:06.720
So for instance, let me just see here.

00:31:06.760 --> 00:31:07.840
Set proxies everywhere.

00:31:07.840 --> 00:31:09.250
Where did that one go?

00:31:12.080 --> 00:31:12.630
Oh, thank you.

00:31:12.640 --> 00:31:14.500
I'm just a little fascinated by... No,
hang on.

00:31:14.610 --> 00:31:15.280
Set proxies everywhere.

00:31:15.280 --> 00:31:15.810
Thank you very much.

00:31:15.820 --> 00:31:17.190
I was just humming that song.

00:31:17.190 --> 00:31:18.480
It's stuck in my head now.

00:31:21.000 --> 00:31:31.500
[Transcript missing]

00:31:32.750 --> 00:31:37.000
The network setup command operates
in some situations on only

00:31:37.000 --> 00:31:39.040
one network service at a time.

00:31:39.040 --> 00:31:43.060
You can set the gopher proxy or the web
proxy for the airport with one command,

00:31:43.060 --> 00:31:45.980
for the ethernet with another command,
for the connection through your

00:31:45.980 --> 00:31:49.430
cell phone with another command,
but it's certainly possible to write

00:31:49.510 --> 00:31:53.120
little scripts that ask for a list
of all the network services and then

00:31:53.120 --> 00:31:55.330
apply the update command to each one.

00:31:55.680 --> 00:31:57.920
This is all using basic bash scripting.

00:31:57.920 --> 00:31:59.330
I'm running one command,
I'm looking at its output,

00:31:59.380 --> 00:32:00.680
and I'm looping through everything else.

00:32:00.680 --> 00:32:02.700
O'Reilly's got a pretty
good book on bash,

00:32:02.700 --> 00:32:04.760
which I just actually picked up today.

00:32:04.760 --> 00:32:07.000
And this is a great way to
get started with writing

00:32:07.000 --> 00:32:08.620
little mini scripts like this.

00:32:08.620 --> 00:32:11.420
Part of the task is learning
the syntax of the bash language

00:32:11.420 --> 00:32:12.850
for doing a loop like that.

00:32:12.950 --> 00:32:16.220
Part of the syntax is learning the
details of the particular command.

00:32:16.220 --> 00:32:19.540
Please don't everybody go and set
their web proxy to hayman.net.

00:32:19.540 --> 00:32:20.510
That's my server.

00:32:20.510 --> 00:32:21.840
It's just an example.

00:32:23.680 --> 00:32:25.740
So I could run that one if
I wanted to and set the web

00:32:25.930 --> 00:32:28.910
proxy on all of those computers.

00:32:29.080 --> 00:32:31.840
and now none of them will be able to do
anything because it turns out my server

00:32:31.840 --> 00:32:33.350
at home is down right at the moment.

00:32:33.400 --> 00:32:36.780
So fortunately I saved another
one of these here that puts the

00:32:36.780 --> 00:32:38.440
proxies back to the way they were.

00:32:38.440 --> 00:32:43.840
One might very quickly build up a little
toolkit of useful routines in this way.

00:32:44.690 --> 00:32:46.910
Now let me talk about
software updates for a moment.

00:32:46.980 --> 00:32:51.940
If you run software update dash L,
it will show you in a multi-line

00:32:52.800 --> 00:32:55.080
format all the software updates that
are available for your computer.

00:32:55.170 --> 00:32:58.640
When I ran it earlier on here,
it turns out this particular presentation

00:32:58.640 --> 00:33:00.720
system doesn't need any software updates.

00:33:00.720 --> 00:33:02.680
So it just said your
software is up to date.

00:33:02.770 --> 00:33:04.380
But if you've ever tried it,
you'll see that several

00:33:04.380 --> 00:33:05.560
lines of output come out.

00:33:05.580 --> 00:33:06.370
You need this update.

00:33:06.390 --> 00:33:06.960
You need that one.

00:33:06.960 --> 00:33:07.800
This one's required.

00:33:07.800 --> 00:33:09.760
This one needs a reboot.

00:33:09.870 --> 00:33:13.140
Well, you can massage the format
of that sort of thing

00:33:14.000 --> 00:33:34.400
[Transcript missing]

00:33:36.090 --> 00:33:37.000
is that better?

00:33:37.010 --> 00:33:39.820
You name dash R will conveniently
tell me whether I'm on Jaguar or

00:33:39.820 --> 00:33:44.000
Panther by handing out a number
that ends in a six or a seven.

00:33:44.000 --> 00:33:46.300
That's so handy.

00:33:46.300 --> 00:33:48.360
The syntax of the software
update command actually changed

00:33:48.360 --> 00:33:49.380
between Jaguar and Panther.

00:33:49.380 --> 00:33:51.990
On my script here,
I can account for that.

00:33:52.000 --> 00:33:54.210
If we run this one,
this will just show me a nice

00:33:54.210 --> 00:33:57.060
little one line list of who
needs what software update.

00:33:57.140 --> 00:34:00.510
One of the machines,
they all need airport extreme and

00:34:00.510 --> 00:34:02.810
several of them need garage band.

00:34:03.280 --> 00:34:05.680
So after a while, you build up a little
collection of tools like this.

00:34:05.680 --> 00:34:07.790
You could then pick this one,
and you might want to run

00:34:07.870 --> 00:34:10.690
another script that actually did
software update with that one.

00:34:10.740 --> 00:34:11.950
But I want to suggest
a different strategy.

00:34:12.560 --> 00:34:15.740
The way software updates actually
work is that your computer,

00:34:15.740 --> 00:34:18.140
and again,
I'm talking about how it works now,

00:34:18.140 --> 00:34:21.800
not the future software update server,
your computer talks to Akamai or

00:34:21.800 --> 00:34:25.270
Apple or something and gets a list
of what packages are available.

00:34:25.340 --> 00:34:28.630
And then your computer goes and
downloads the 80 megabyte update.

00:34:28.630 --> 00:34:32.180
And maybe all 500 computers in
your building go and download the

00:34:32.180 --> 00:34:34.260
80 megabyte update and install it.

00:34:34.320 --> 00:34:36.260
Now,
we're making some great progress with

00:34:36.260 --> 00:34:39.520
the software update server for Tiger,
but I want to suggest a way you might

00:34:39.520 --> 00:34:41.250
like to work around this locally.

00:34:42.160 --> 00:34:44.000
Software updates are just packages.

00:34:44.000 --> 00:34:46.720
They're just .pkg files
like anything else.

00:34:46.720 --> 00:34:50.850
Let's suppose you had a server,
and you put the interesting packages

00:34:50.850 --> 00:34:52.830
that you liked on the server.

00:34:52.830 --> 00:34:55.550
Maybe you've got the trial
version of Omni something,

00:34:55.550 --> 00:34:57.820
and you've got the Apple security update.

00:34:57.820 --> 00:34:59.650
Put them all in a shared
folder on a server.

00:34:59.660 --> 00:35:01.660
And then you can have a
little script that says,

00:35:01.660 --> 00:35:03.320
all right, I want to mount that server.

00:35:03.320 --> 00:35:05.410
I want to see what packages
are in that folder.

00:35:05.410 --> 00:35:07.780
And remember,
I'm going to do this on every computer.

00:35:07.780 --> 00:35:11.110
I want to compare that
to library receipts,

00:35:11.110 --> 00:35:11.760
which is the list of packages
that are in that folder.

00:35:11.820 --> 00:35:14.100
And then I want to use the list of
what packages I've already installed

00:35:14.130 --> 00:35:16.700
so that I don't waste any time
installing a package I've already got.

00:35:16.730 --> 00:35:19.520
And then I'd like to use the
command line installer command to

00:35:19.520 --> 00:35:22.590
grab packages off my local server,
maybe the server down the

00:35:22.590 --> 00:35:25.310
hall or in the school,
and install them locally.

00:35:26.370 --> 00:35:28.770
So I spent a little bit of time messing
around with something like that.

00:35:28.770 --> 00:35:29.730
And let's see here.

00:35:29.740 --> 00:35:32.120
Install packages from server.

00:35:32.990 --> 00:35:34.770
This is just really a
starting point for-- oh boy,

00:35:34.780 --> 00:35:35.310
this is tricky.

00:35:35.320 --> 00:35:37.920
Hang on,
let me back out a little bit here.

00:35:38.020 --> 00:35:40.770
This is a starting point for discussion,
let's say.

00:35:41.720 --> 00:35:44.080
I want to look and see
if anybody is logged in.

00:35:44.100 --> 00:35:45.480
And I want to exit if
someone is logged in.

00:35:45.480 --> 00:35:48.860
It's kind of rude to do a software
update while someone's logged in.

00:35:49.070 --> 00:35:50.540
And then I want to mount-- this is ugly.

00:35:50.590 --> 00:35:52.200
I want to mount this server here.

00:35:52.230 --> 00:35:53.640
That's a server we have over here.

00:35:53.650 --> 00:35:55.320
I want to mount it via AFP.

00:35:55.320 --> 00:35:57.800
And that's going to give me a
mount point called slash temp

00:35:57.800 --> 00:35:59.760
slash packages or something.

00:35:59.760 --> 00:36:01.640
And then I want to go
through that mount point.

00:36:01.640 --> 00:36:03.940
And for every package I see there,
for every .pkg,

00:36:03.940 --> 00:36:06.630
I want to compare that with
what I've got in slash library

00:36:06.660 --> 00:36:07.800
receipts on this computer.

00:36:07.800 --> 00:36:10.840
In other words, have I installed that
package already or not?

00:36:10.870 --> 00:36:12.580
And then building up a little list.

00:36:12.590 --> 00:36:15.320
And then for each one in the needed list,
I'm going to run the installer to

00:36:15.370 --> 00:36:17.790
install that particular package.

00:36:18.040 --> 00:36:18.580
Let's give it a shot.

00:36:18.600 --> 00:36:20.820
I only have a couple of phony packages.

00:36:20.820 --> 00:36:23.860
In fact, I think I only have one phony
package on my server over there.

00:36:23.860 --> 00:36:26.380
But you could certainly add
other packages of your choice,

00:36:26.540 --> 00:36:28.800
commercial applications,
packages that you've made,

00:36:28.890 --> 00:36:31.520
Apple software updates that
you've downloaded directly.

00:36:31.520 --> 00:36:34.960
And if we actually run this,
all those machines are in use.

00:36:36.350 --> 00:36:38.500
You noticed that my script
exited if the machine was in use.

00:36:38.550 --> 00:36:39.200
That was kind of polite.

00:36:39.200 --> 00:36:40.370
Well, let me log out a few people.

00:36:40.370 --> 00:36:43.850
Where do you do that?

00:36:44.990 --> 00:36:47.050
You noticed that my script
exited if the machine was in use.

00:36:47.260 --> 00:36:47.800
That was kind of polite.

00:36:47.800 --> 00:36:48.980
Well, let me log out a few people.

00:36:49.750 --> 00:36:52.460
Where do you do that?

00:36:55.460 --> 00:36:57.880
Now, here's an interesting situation.

00:36:57.880 --> 00:36:59.500
Nobody was logged in,
so I can't do any of

00:36:59.500 --> 00:37:00.260
this as the current user.

00:37:00.390 --> 00:37:03.360
What I really should be doing,
thank you for coughing,

00:37:03.360 --> 00:37:06.080
I wish you'd coughed
about 30 seconds ago.

00:37:07.200 --> 00:37:09.340
It'd be better to do this as root
rather than the current user.

00:37:09.340 --> 00:37:11.830
You can always do things as root
whether anybody's logged in or not.

00:37:11.880 --> 00:37:12.990
Let's try this again here.

00:37:13.060 --> 00:37:15.720
Well, what's going on there?

00:37:15.760 --> 00:37:18.020
We'll keep going.

00:37:21.300 --> 00:37:22.040
Well, you know what?

00:37:22.040 --> 00:37:23.190
It actually worked the
previous time I was doing it.

00:37:23.570 --> 00:37:26.220
Actually, all needed packages have been
installed on those two computers.

00:37:26.220 --> 00:37:29.150
The other ones are in use or something
has happened to the client software,

00:37:29.160 --> 00:37:30.520
what we were discussing here.

00:37:30.520 --> 00:37:31.660
Probably because I logged people out.

00:37:31.660 --> 00:37:32.320
What does it need to be?

00:37:32.330 --> 00:37:34.150
Hey, tech support guy,
you helped me with a double quote before.

00:37:34.220 --> 00:37:34.900
What do we do now?

00:37:37.030 --> 00:37:38.960
So this is just a starting
point for discussion.

00:37:38.960 --> 00:37:41.570
I think you'll find that you could
have packages stored locally to

00:37:41.570 --> 00:37:44.250
your end users and then you as an
administrator run a script like

00:37:44.250 --> 00:37:47.740
this once in a while that grabs the
packages and installs them rather

00:37:47.740 --> 00:37:52.670
than everybody going and pulling them
from Akamai at vast cost to everyone.

00:37:53.000 --> 00:37:55.980
I plan on cleaning this script up
a little bit and posting it on the

00:37:55.980 --> 00:37:58.630
WWDC server when we're all done.

00:37:58.650 --> 00:38:02.020
Oh, no, wait, no, but wait, but wait, no,
wait.

00:38:02.810 --> 00:38:04.800
You can't phone me about it, okay?

00:38:04.800 --> 00:38:09.190
So one last thing I wanted to try here.

00:38:09.670 --> 00:38:15.450
We were having a few cocktails and gosh,
I'd really like it if those

00:38:15.450 --> 00:38:17.200
two were still on here for
this little effect guys.

00:38:17.200 --> 00:38:17.990
What do you want to do here?

00:38:17.990 --> 00:38:19.160
Hang on a moment.

00:38:19.160 --> 00:38:23.590
Let's just, it never hurts to quit remote
desktop and start it again.

00:38:28.530 --> 00:38:29.240
Well, we'll try it anyway.

00:38:29.240 --> 00:38:31.380
We're going to take all
these machines that are up.

00:38:31.400 --> 00:38:34.910
Eh, not that one here.

00:38:36.700 --> 00:38:39.360
I found the greatest little
command the other day.

00:38:39.360 --> 00:38:40.680
I don't know if you know about this.

00:38:40.680 --> 00:38:45.200
DRU till tray open.

00:38:45.260 --> 00:38:47.550
DRU till tray close.

00:38:47.670 --> 00:38:49.750
I'm going to put that in a loop.

00:38:49.810 --> 00:38:51.890
We'll go around ten times.

00:38:51.890 --> 00:38:54.470
I was doing it infinitely before.

00:38:54.470 --> 00:38:56.250
That was kind of mean.

00:38:59.900 --> 00:39:01.060
Oh, I need a do up there.

00:39:01.060 --> 00:39:03.920
I've got a little iMac ballet going here.

00:39:07.520 --> 00:39:08.940
It's going to fail on the machines,
two of the machines,

00:39:08.940 --> 00:39:09.850
but the other six are going to go.

00:39:09.850 --> 00:39:11.660
Thank you.

00:39:18.700 --> 00:39:19.700
and in.

00:39:19.720 --> 00:39:24.130
You can sing at the same time.

00:39:24.780 --> 00:39:25.200
and Dan.

00:39:25.200 --> 00:39:26.040
Oh, that only went around once.

00:39:26.040 --> 00:39:26.900
I must have done the jot wrong.

00:39:26.900 --> 00:39:29.000
Well, you know, this is why it's great
to have these commands

00:39:30.450 --> 00:39:32.240
I was showing this to somebody earlier.

00:39:32.240 --> 00:39:33.980
I was telling them about it.

00:39:34.230 --> 00:39:35.910
I said I was going to have
all these trays come in.

00:39:35.970 --> 00:39:36.980
By the way, this is a great script.

00:39:36.980 --> 00:39:41.020
If you're in one of our retail stores,
just go to one of the computers and--

00:39:44.150 --> 00:39:45.400
Maybe Mike,
if you wouldn't mind logging in there,

00:39:45.400 --> 00:39:46.030
that would help me.

00:39:46.190 --> 00:39:49.900
The fun thing to do,
make it a startup items or something, so,

00:39:49.900 --> 00:39:51.860
well, they're not looking,
so that they reboot and the

00:39:51.860 --> 00:39:52.960
machines all come out and go in.

00:39:52.980 --> 00:39:54.640
Are you restarting those two there?

00:39:54.710 --> 00:39:58.320
So I was describing this
to somebody earlier,

00:39:58.320 --> 00:39:59.810
and he said, "Wouldn't it be great,
"it was great to have

00:39:59.810 --> 00:40:01.260
them coming in and out,
"but wouldn't it be great if

00:40:01.260 --> 00:40:02.180
you could make them do the wave?

00:40:02.240 --> 00:40:04.120
"Ah ha ha ha ha."

00:40:04.600 --> 00:40:05.700
I hate it when people say that.

00:40:05.700 --> 00:40:06.800
Somebody said that to me at lunch.

00:40:06.800 --> 00:40:08.530
So I had to go and figure that out.

00:40:08.610 --> 00:40:09.650
So if you'll just stand by here.

00:40:09.660 --> 00:40:12.420
We'll do the wave on these iMacs.

00:40:14.940 --> 00:40:16.000
I hate it when people say that.

00:40:16.000 --> 00:40:17.100
Somebody said that to me at lunch.

00:40:17.100 --> 00:40:18.880
So I had to go and figure that out.

00:40:18.880 --> 00:40:19.960
So if you'll just stand by here.

00:40:19.970 --> 00:40:22.740
We'll do the wave on these iMacs.

00:40:57.700 --> 00:40:59.520
I probably spent more time
on that than I did on the

00:40:59.520 --> 00:41:00.900
software update server script.

00:41:00.900 --> 00:41:05.860
Anyway,
I think I've pretty much hosed these

00:41:05.860 --> 00:41:08.720
machines in one way or another.

00:41:08.750 --> 00:41:10.740
There's one thing I think as system
administrators that we all wish after

00:41:10.770 --> 00:41:13.700
we've really messed up a machine,
we really wish Mike Bombich was

00:41:13.700 --> 00:41:15.430
around to help us out of a jam.

00:41:15.580 --> 00:41:16.440
Mike here?

00:41:16.440 --> 00:41:17.440
Oh, Mike is here.

00:41:17.440 --> 00:41:18.440
Hi, Mike.

00:41:34.000 --> 00:41:36.600
Thank you, Steve.

00:41:36.600 --> 00:41:39.670
Gotta leave it up to a systems engineer
and a consulting engineer to walk

00:41:39.670 --> 00:41:42.600
into some iMacs and do some damage.

00:41:46.120 --> 00:41:48.220
Yep, that's why we're here.

00:41:48.480 --> 00:41:52.540
So I think that Tony and Steve have
shown you how Remote Desktop has a

00:41:52.630 --> 00:41:57.780
great set of tools for day-to-day
management of a whole bunch of machines,

00:41:57.810 --> 00:42:02.290
or just eight machines
that you can no longer buy.

00:42:09.600 --> 00:42:13.020
For the machines that you can still get,
they're still the arduous task

00:42:13.240 --> 00:42:15.540
of doing mass deployments.

00:42:15.540 --> 00:42:20.540
And, uh, oops, wrong button.

00:42:21.240 --> 00:42:23.900
And there's still some challenges
that face system administrators

00:42:23.900 --> 00:42:27.550
when it comes to deploying software
onto a whole bunch of machines.

00:42:27.570 --> 00:42:31.180
You have things like managing
multiple configurations of machines,

00:42:31.180 --> 00:42:33.950
if you have lots of different
labs for different uses,

00:42:33.960 --> 00:42:37.180
just having a large number of
machines to deploy software onto,

00:42:37.290 --> 00:42:40.490
machines located really far away
and you don't feel like getting

00:42:40.620 --> 00:42:43.450
your butt off your chair and
running out to that machine,

00:42:43.450 --> 00:42:47.890
and managing machine-specific settings,
you know, sneaker net running around each

00:42:47.890 --> 00:42:50.300
machine and getting things all set.

00:42:50.860 --> 00:42:55.500
And then yada yada,
limited time in training and nobody has

00:42:55.500 --> 00:42:59.110
money and we all sing the same story.

00:43:00.180 --> 00:43:04.580
So there's actually several
solutions to some of these problems.

00:43:04.890 --> 00:43:07.680
First of all,
if you create a master disk image of

00:43:07.680 --> 00:43:12.050
the software that's common to all of
your machines and then couple that with

00:43:12.050 --> 00:43:15.910
block level copying and network booting,
you can greatly reduce the

00:43:16.010 --> 00:43:19.600
amount of time that it takes
to get software out onto 50,

00:43:19.620 --> 00:43:22.710
100, or 32,000 machines.

00:43:23.510 --> 00:43:28.050
With Apple Remote Desktop's set network
disk or set startup disk command,

00:43:28.050 --> 00:43:32.980
this kind of solves the problem of
dealing with machines located remotely.

00:43:32.980 --> 00:43:37.360
And then if you can get a machine to
set its own machine specific settings,

00:43:37.390 --> 00:43:40.900
you spend a lot less time running
around to each machine and a

00:43:40.920 --> 00:43:44.940
lot more time sitting on your
butt playing Quake or something.

00:43:44.940 --> 00:43:48.870
So the final challenge, of course,
is the management of

00:43:48.870 --> 00:43:51.090
machine specific settings.

00:43:51.100 --> 00:43:53.340
And this is where I think the
Postgres database is going

00:43:53.340 --> 00:43:53.340
to be the most important.

00:43:53.360 --> 00:43:58.140
database in ARD2 can
really be a great solution.

00:43:59.260 --> 00:44:02.700
The database in ARD2 can
really be a great solution.

00:44:29.270 --> 00:44:33.780
We'll collect machine and software data
using the system profiler frameworks

00:44:34.170 --> 00:44:36.990
and cache that information locally,
hand that information

00:44:36.990 --> 00:44:39.970
on to the ARD client,
and the ARD client returns it

00:44:39.970 --> 00:44:44.540
up to the ARD admin and that
plugs it into the database.

00:44:44.540 --> 00:44:46.850
Tony's already shown you quite
a bit about the database,

00:44:46.860 --> 00:44:48.660
so I won't go into the ins
and outs of the database,

00:44:48.690 --> 00:44:51.420
but I am going to show you
a little bit more about what

00:44:51.420 --> 00:44:53.110
we can do with that database.

00:44:53.620 --> 00:44:58.490
will collect machine and software data
using the system profiler frameworks

00:44:58.490 --> 00:45:01.460
and cache that information locally,
hand that information

00:45:01.460 --> 00:45:04.340
on to the ARD client,
and the ARD client returns it

00:45:04.340 --> 00:45:08.500
up to the ARD admin and that
plugs it into the database.

00:45:08.500 --> 00:45:11.100
Tony's already shown you quite
a bit about the database,

00:45:11.100 --> 00:45:13.410
so I won't go into the ins
and outs of the database,

00:45:13.630 --> 00:45:15.940
but I am going to show you
a little bit more about what

00:45:15.940 --> 00:45:17.520
we can do with that database.

00:45:24.170 --> 00:45:26.350
To access information
from the ARD database,

00:45:26.420 --> 00:45:30.100
you could use tools like Tony showed,
or you can just use the P-SQL command

00:45:30.100 --> 00:45:33.860
that's in our favorite directory,
remote management inside core services.

00:45:33.880 --> 00:45:37.690
And here I have an example of just
some basic syntax that will dump all

00:45:37.690 --> 00:45:40.160
the information from the database.

00:45:41.280 --> 00:45:45.350
Perhaps a more friendly way of
accessing the information is to use the

00:45:45.350 --> 00:45:49.450
functions that are built into PHP for
accessing data from a Postgres database.

00:45:49.460 --> 00:45:53.800
If you were to store your database,
for example, on a Mac OS X server,

00:45:53.800 --> 00:45:58.720
you could set up a PHP script that could
return an entire record about a computer

00:45:58.720 --> 00:46:00.360
back to the client that requested it.

00:46:00.420 --> 00:46:02.530
And you could do this
in any format you want.

00:46:02.580 --> 00:46:04.500
I have XML as an example.

00:46:05.220 --> 00:46:10.450
So the client could then request a
PHP script and download it using curl and

00:46:10.450 --> 00:46:12.330
use its own Mac address as an argument.

00:46:12.340 --> 00:46:15.520
And then your PHP script can
send it back and the client can

00:46:15.600 --> 00:46:17.360
store it in the temp directory.

00:46:17.360 --> 00:46:21.590
And you can access it on your client
machines while they're net booted or

00:46:21.590 --> 00:46:26.850
whatever and retrieve values from that
plist file using the defaults command.

00:46:26.860 --> 00:46:30.000
So I've actually built
a PHP script like this.

00:46:31.640 --> 00:46:32.960
Much bigger up there.

00:46:33.020 --> 00:46:37.420
And you can see an example of the kind of
output that you can generate using PHP.

00:46:37.450 --> 00:46:43.060
Now, I used XML formatting because
that met my requirements.

00:46:43.060 --> 00:46:46.820
If you're just using a shell script and
you're just using awk or grep-- and awk

00:46:46.840 --> 00:46:52.670
is my favorite program-- then you could
certainly just have flat text and use

00:46:52.670 --> 00:46:56.810
just a couple lines for your output.

00:46:58.230 --> 00:47:01.290
So how do we actually use
the ARD Postgres database

00:47:01.460 --> 00:47:02.740
to make deployment easier?

00:47:02.740 --> 00:47:04.510
After all, that's what we're looking for.

00:47:04.510 --> 00:47:08.560
Well,
the database is more or less read-only.

00:47:08.560 --> 00:47:10.820
However,
there are those four computer information

00:47:10.910 --> 00:47:12.540
fields that you can plug data into.

00:47:12.540 --> 00:47:14.700
And again,
I'm not trying to add any work to

00:47:14.700 --> 00:47:18.580
your schedule to run around and type
information into each one of these.

00:47:19.080 --> 00:47:22.250
Fortunately,
the admin application has a change

00:47:22.420 --> 00:47:26.820
client settings dialog that allows you
to change the data in these fields.

00:47:26.970 --> 00:47:30.010
You can do it on a per machine basis,
or you can select a group

00:47:30.010 --> 00:47:31.420
of machines and do that.

00:47:31.960 --> 00:47:33.490
So,

00:47:33.860 --> 00:47:38.170
Select a group of machines and then
choose the change client settings

00:47:38.530 --> 00:47:41.930
option from the manage menu and then
plug some data into those fields.

00:47:42.040 --> 00:47:47.060
And you can use data like the path to a
disk image that you would like to restore

00:47:47.060 --> 00:47:51.800
to the machine or maybe the room number
or the building that the machine is in.

00:47:51.850 --> 00:47:54.160
And then on the client
side in a shell script,

00:47:54.210 --> 00:47:57.220
you can use that information to
either apply that disk image to

00:47:57.300 --> 00:48:01.700
the local drive or say set up
printers based on what room it's in.

00:48:03.190 --> 00:48:06.610
Finally, get your database all set up,
then you can initiate deployment using

00:48:06.620 --> 00:48:11.620
Apple Remote Desktop's chain startup
disk and set it to boot from your net

00:48:12.450 --> 00:48:16.210
install disk image and get 'er done.

00:48:17.160 --> 00:48:22.330
So here's what a deployment can
now look like with ARD's database.

00:48:22.340 --> 00:48:24.260
Note that I do--

00:48:24.610 --> 00:48:26.660
mentioned the use of a
third-party product in here.

00:48:26.660 --> 00:48:29.340
However, you can use the tools that
are built into Mac OS X,

00:48:29.340 --> 00:48:31.500
Mac OS X Server, and some shell scripts.

00:48:32.160 --> 00:48:35.500
So first,

00:48:41.350 --> 00:48:44.060
Get your master machine set up
exactly the way you want it.

00:48:44.060 --> 00:48:47.680
Use Disk Utility or Net Restore
Helper to create a disk

00:48:47.680 --> 00:48:51.970
image of your master machine,
store it on a file server.

00:48:52.080 --> 00:48:57.350
Next, use Network Image Utility or
Net Restore Helper to create a net

00:48:57.350 --> 00:49:03.220
install image set that will boot
up to any type of application that

00:49:03.220 --> 00:49:06.890
will use ASR to do some restores.

00:49:07.330 --> 00:49:09.880
Finally,
use Apple Remote Desktop to tell all

00:49:09.880 --> 00:49:14.630
of your target machines to reboot
from your NetInstall image set.

00:49:14.660 --> 00:49:17.240
When the client machines
are finished booting,

00:49:17.240 --> 00:49:19.180
they launch the ASR application.

00:49:19.180 --> 00:49:23.280
The ASR application
queries the ARD database,

00:49:23.280 --> 00:49:26.670
retrieves a record specific
to that target machine.

00:49:26.680 --> 00:49:30.200
The ASR application then
looks through that record,

00:49:30.200 --> 00:49:33.340
pulls out the information it
needs to find the disk image,

00:49:34.530 --> 00:49:36.960
applies that disk image
to the internal drive,

00:49:36.960 --> 00:49:41.330
and finally, to wrap everything up,
it runs some post-action scripts to

00:49:41.450 --> 00:49:45.910
apply any other machine-specific settings
that were in that machine record.

00:49:45.920 --> 00:49:48.340
Not quite as sexy as the
stuff Steve was doing,

00:49:48.340 --> 00:49:51.370
but it's really going to save
you a lot of time every day.

00:49:54.730 --> 00:49:58.180
So that scenario is going to
work great for a lot of people.

00:49:58.180 --> 00:50:02.410
There's going to be some people,
some system administrators, however,

00:50:02.410 --> 00:50:05.840
that may want to store more
machine-specific data than can

00:50:05.850 --> 00:50:09.570
be supported by those four custom
computer information fields.

00:50:09.580 --> 00:50:11.860
For these people,
we can go ahead and extend the

00:50:11.870 --> 00:50:13.670
functionality of the ARD database.

00:50:13.730 --> 00:50:16.510
After all,
it is just a standard Postgres database.

00:50:17.300 --> 00:50:20.820
So one thing that should be pointed
out is that the system information

00:50:20.820 --> 00:50:22.740
table is essentially read-only.

00:50:22.740 --> 00:50:27.050
It's read-only insofar as every time
you collect a system information report,

00:50:27.240 --> 00:50:29.900
any changes that you may
have made will get wiped out.

00:50:30.000 --> 00:50:34.020
So system information table is for ARD,
no touchy.

00:50:34.020 --> 00:50:36.970
If you want,
you can add additional tables

00:50:37.220 --> 00:50:39.580
for system imaging information.

00:50:39.580 --> 00:50:42.110
I have some syntax up here for that.

00:50:42.160 --> 00:50:45.100
And then populate that database
or that table with your own

00:50:45.100 --> 00:50:46.920
machine-specific information.

00:50:47.420 --> 00:50:52.020
There is one other caveat, though.

00:50:52.020 --> 00:50:55.780
ARD, if it ever has trouble
accessing the database,

00:50:55.780 --> 00:50:59.580
it'll try three times,
and if it fails the third time,

00:50:59.580 --> 00:51:01.980
it'll just wipe out the
database and start from scratch.

00:51:01.980 --> 00:51:07.700
So you may just want to create
another database instead and put,

00:51:07.700 --> 00:51:11.150
say, maybe a PHP front-end on that.

00:51:11.160 --> 00:51:14.460
And then when a client requests
information from your database,

00:51:14.460 --> 00:51:17.280
your PHP script can pull
that information together.

00:51:17.300 --> 00:51:20.290
and provide it back in a unified format.

00:51:21.290 --> 00:51:24.940
So if you wanted to do something
like this on Mac OS X server,

00:51:24.940 --> 00:51:28.320
you would first need to install
the Postgres aware version of PHP.

00:51:28.320 --> 00:51:31.960
Mark Lionage has a great little package
installer that makes it really simple.

00:51:31.960 --> 00:51:34.780
Next,
develop a front end for managing system

00:51:34.780 --> 00:51:37.190
imaging data and a database for that.

00:51:37.240 --> 00:51:39.760
And finally,
develop a front end to report

00:51:39.760 --> 00:51:43.960
on various information from your
ARD system information database.

00:51:44.550 --> 00:51:45.460
Sounds easy, huh?

00:51:45.460 --> 00:51:47.710
So everybody run out and do that.

00:51:47.740 --> 00:51:50.460
Well, actually,
I have developed a prototype and,

00:51:50.460 --> 00:51:54.120
of course, it's free and open source,
so there's a great starting point

00:51:54.120 --> 00:51:56.140
for developing something like this.

00:52:04.480 --> 00:52:05.290
Thanks, but I'm not done.

00:52:05.400 --> 00:52:11.390
So the first thing that I'd like to show

00:52:19.270 --> 00:52:21.960
is change client settings.

00:52:21.960 --> 00:52:25.210
So I've got a list set up
here of these eight machines.

00:52:26.250 --> 00:52:30.800
And the change client settings dialog
can actually do a lot of things.

00:52:30.800 --> 00:52:33.480
But I'm going to go ahead
and skip through these.

00:52:33.480 --> 00:52:36.040
It basically just sets any
preferences that you find in the

00:52:36.040 --> 00:52:38.520
sharing preference pane for ARD.

00:52:38.550 --> 00:52:42.800
And on the last item,
we can go ahead and say--

00:52:46.400 --> 00:52:53.110
www.admob.com/diskimages/wdc-master

00:52:54.350 --> 00:52:58.780
and we'll call this North Beach.

00:52:58.800 --> 00:52:59.830
That's okay.

00:52:59.940 --> 00:53:02.220
It's not really gonna do anything.

00:53:02.320 --> 00:53:04.060
So we could go ahead and set these.

00:53:04.060 --> 00:53:13.810
Receiving settings, prepping, changing,

00:53:23.220 --> 00:53:26.520
And then we can go ahead and gather
another system information report.

00:53:26.550 --> 00:53:30.230
And I'm not quite as picky as Tony.

00:53:30.610 --> 00:53:32.040
I'm just going to grab a new one.

00:53:32.290 --> 00:53:35.920
And it'll collect that changed
information from each machine and now

00:53:35.920 --> 00:53:40.150
your database has been updated and it's
got the new information required to

00:53:40.620 --> 00:53:42.410
do whatever you need to do to that lab.

00:53:42.600 --> 00:53:45.040
So of course,
you would need some client side scripts

00:53:45.040 --> 00:53:48.150
in your net install image set that
would do something with this data.

00:53:48.230 --> 00:53:50.880
I'm actually not going to cover that.

00:53:51.060 --> 00:53:55.680
What I will cover,
and I don't really need to change this.

00:53:59.610 --> 00:54:07.250
So again, just for thoroughness,
for raw Postgres access,

00:54:07.380 --> 00:54:12.740
you just use the rmdb.bundle,
the commands within there.

00:54:14.020 --> 00:54:18.080
And run a standard SQL query.

00:54:18.250 --> 00:54:19.900
Get lots and lots of data.

00:54:20.200 --> 00:54:22.630
This isn't really very useful.

00:54:23.020 --> 00:54:29.320
For us, so what we can do instead is
allow our ARD database to be

00:54:29.330 --> 00:54:34.140
accessed by the local host,
by a PHP.

00:54:34.210 --> 00:54:36.730
And to do that,
you can modify those files that

00:54:36.730 --> 00:54:40.500
Tony was mentioning or I actually
just released this yesterday.

00:54:40.500 --> 00:54:44.570
It's called Atom,
Apple Remote Desktop Database

00:54:44.610 --> 00:54:46.240
Access Manager.

00:54:46.240 --> 00:54:49.280
You click a button and it
enables local host access.

00:54:49.280 --> 00:54:52.450
Just a little quick and dirty guy.

00:54:53.360 --> 00:54:56.690
Next, write yourself some PHP scripts.

00:54:58.390 --> 00:55:01.540
And this is a pretty
simple one right here.

00:55:01.550 --> 00:55:05.100
It basically will just return an
entire record from the ARD database.

00:55:05.100 --> 00:55:08.640
Or not.

00:55:08.640 --> 00:55:10.200
There it is.

00:55:12.220 --> 00:55:14.850
So this is actually pretty short,
but basically just loops through

00:55:14.850 --> 00:55:18.300
that data to each of those system
information elements and returns

00:55:18.300 --> 00:55:19.770
that data back to the client.

00:55:19.780 --> 00:55:27.940
So finally, when you get your entire...

00:55:30.950 --> 00:55:35.990
PHP database solution all
set up and looking pretty.

00:55:36.200 --> 00:55:38.500
You can set up groups.

00:55:38.500 --> 00:55:41.300
And here I have a group of computers.

00:55:41.300 --> 00:55:43.580
There's eight computers over here.

00:55:43.580 --> 00:55:47.710
And this particular script will
report back from two databases,

00:55:47.710 --> 00:55:51.940
from the NetRestore database
that I created and from the

00:55:51.950 --> 00:55:54.820
ARD database that already exists.

00:55:54.820 --> 00:55:59.770
So what we have here is a summary of
information from the ARD database.

00:55:59.770 --> 00:56:04.400
If you want to get more information,
you can click a link and it will

00:56:04.400 --> 00:56:06.940
return data for that computer.

00:56:08.870 --> 00:56:09.740
Looking nice and pretty.

00:56:09.740 --> 00:56:12.960
And then we can also
use this for management.

00:56:12.960 --> 00:56:15.100
And that's the most exciting part.

00:56:15.160 --> 00:56:17.740
So right now,
you can see that all of these computers,

00:56:17.740 --> 00:56:21.640
well, first of all,
these are the preferences

00:56:21.640 --> 00:56:23.300
for network store,
if you recognize them.

00:56:23.300 --> 00:56:26.740
Right now, everything's set to no,
and there's no configuration.

00:56:26.740 --> 00:56:30.760
But we can go ahead and say,
apply some parameters to

00:56:30.760 --> 00:56:32.800
this specific machine.

00:56:32.800 --> 00:56:36.460
Or I can go in here and I can say,
apply these parameters

00:56:36.460 --> 00:56:38.780
to all of these machines.

00:56:38.800 --> 00:56:43.450
Restore the WWDC master to
the first drive available.

00:56:43.460 --> 00:56:49.050
It's updated my database.

00:56:49.060 --> 00:56:50.620
And now...

00:56:55.600 --> 00:56:58.150
I heard he doesn't have quite
enough cowbells and sound effects,

00:56:58.150 --> 00:56:58.600
does he?

00:56:58.600 --> 00:57:02.000
He's going to work on that.

00:57:02.000 --> 00:57:04.810
So we can go ahead and typically
I would just use the set network

00:57:04.810 --> 00:57:08.340
startup disk and tell all the machines
to reboot from a net install server,

00:57:08.390 --> 00:57:11.180
but I don't have a net
install server here.

00:57:11.180 --> 00:57:16.990
So I will simulate it by
copying out Net Restore to

00:57:16.990 --> 00:57:19.180
each machine and open it up.

00:57:19.180 --> 00:57:26.630
Let me delete this task.

00:57:43.320 --> 00:57:44.300
Let's try this again.

00:57:44.300 --> 00:57:45.300
Copy items.

00:57:45.300 --> 00:57:57.050
And then if we take a look
at one of these machines,

00:58:12.170 --> 00:58:13.740
In the final release, it'll work great.

00:58:13.840 --> 00:58:18.470
But essentially,
this is what it's going to look like.

00:58:18.520 --> 00:58:19.580
The machine will come up.

00:58:19.690 --> 00:58:34.170
And actually, fortunately,
it wouldn't do a... It's probably

00:58:34.170 --> 00:58:34.170
because I enabled a fully automate.

00:58:34.170 --> 00:58:34.170
But it automatically picked WWDC Master,
and I've got my imaging information,

00:58:34.170 --> 00:58:34.170
all of my options,
and it would have just...

00:58:34.450 --> 00:58:36.140
Gotten or done.

00:58:36.140 --> 00:58:39.900
A few clicks of a button and
your machines are re-imaged.

00:58:39.900 --> 00:58:42.140
So that's it.

00:58:42.140 --> 00:58:51.820
Coming soon to a version
tracker near you.

00:59:11.450 --> 00:59:15.070
Alright so just where you can get
more information on the documentation

00:59:15.070 --> 00:59:17.630
for the product and who to contact.

00:59:17.710 --> 00:59:20.560
You can contact me for the
product specific information

00:59:20.560 --> 00:59:23.540
as well as Jason Skip from a
developer relations perspective.