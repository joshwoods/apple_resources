---
Title:  An Overview of QuickTime Codecs
Year:   2004
Web:    https://nonstrict.eu/wwdcindex/wwdc2004/702/

[!] This transcript was generated using Whisper, it has known transcription errors.
---

Welcome to an overview of QuickTime Codecs, session 702. My name is Dennis Backus. I'm a senior technical manager in the marketing group at Apple. And it's my very, very distinct pleasure to introduce from Ursa Major Media-- I got it right-- Cliff VanMeeter. Cliff's been in the QuickTime business for how many years? Fifteen minutes now. Fifteen minutes. Yeah.

We pulled him off the street. No, no. About almost ten years. He also runs a really interesting site. If you guys haven't seen it, you should go take a look at it. It's called QuickTiming.org. It's a very good destination site for all things QuickTime. Both third-party products, Apple announcements, and all sorts of things that you've never heard of. But need to use. So without further ado, let me bring Clifford on stage. Question and answer we want to hold to the very end. And we want to make sure that we use the microphones so that we can pick this up for the recording. Okay? Thanks.

That's so cool, I get applause, I haven't even done anything yet. I love that. Okay, so I'm going to talk a little bit to you about QuickTime Codecs. I'll try to get through, give you a little bit of information, kind of an overview of the different QuickTime codecs that are available, what they're good for, what you might want to use them for in a production environment, which ones are not really all that useful. You probably want to skip over.

As you all might know, QuickTime supports about 200 different media types. Sometimes that can make it a little bit confusing as a technology, because out of 200 media types, you're often faced with the question of, okay, 200, yeah, but which one do I need for what I'm doing today? So, we're going to try and cover some of that, like I said.

and Armu with enough information so that the next project that comes up, you'll be able to at least ask some intelligent questions. So, what I want to cover specifically Criteria for choosing a codec, categories and types of codec, strengths and weaknesses of different types of codecs, where you might want to use them, like I said, and also give you some resources where you can learn more.

So, I'm not going to put a lot of time and effort in the beginning of this talking about exactly how codecs work or exactly what they do. I do want to cover just a little bit of information on codecs in general. Basically, we use codecs for three reasons: save space and transfer time, save bandwidth, or save processor cycles, get them to play on older, slower machines.

If you're looking at uncompressed NTSC video, you're talking about 30 frames a second at two fields per second, or 60 images at 64480, or 27 megabytes of information passing through. If you've got a brand new dual processor G5, you might be able to get playback from that. But specifically on older machines, or if you're transmitting video, want to transmit video over the web, or put it on a CD-ROM, that's going to be problematic.

The DV codec, which compresses to about 5:1 compression, is kind of my example here, just to kind of work the math. So if we're looking at 27 megabytes per second transfer with uncompressed video, we're looking at about 3.5 megabytes per second, or about 30,000 kilobits per second with DV, which is probably the codec that y'all are most familiar with, because it's what every digital video camera out there uses.

Essentially, you've got two types of compression. I tend to break things down this way a lot. You're going to hear me say there's two types of this, two types of that quite a bit. For some reason, it just works out that way. So, with video compressors, image compressors, audio, or specifically with video compressors and image compressors, you've got spatial compression and temporal compression.

Spatial compression is what's used for most codecs that you'd be familiar with for images like JPEG and PING and GIF, where it's essentially either finding a way to copy the same information more efficiently, or it's throwing out some information so that it's not just a copy of the same information. it stores it in a smaller format. Temporal compression is compression over time, hence the stopwatch.

[Transcript missing]

An example of spatial compression. Typically, when you write an image in an uncompressed format, in some manner you're recording the information as individual data blocks for individual pixels in that image. So in other words, the pixel with coordinate x equals zero and y equals zero is black. And what happens with uncompressed data is that amount of information is stored for every single individual pixel. It's a little bit as if in your on your Palm Pilot, you wrote out Monday 12:30 lunch, Tuesday 12:30 lunch, Wednesday 12:30 lunch, etc., etc., etc.

So what the compressor does is it finds a more efficient way of writing that information. It essentially says, Monday through Friday, 12:30, lunch. So it's getting rid of information without getting rid of data. Does that make sense to everybody? Good. I like to see the nodding, not the shaking.

Um, JPEG, my two examples here are TIFF and JPEG. TIFF is essentially a lossless compressor. So it finds an efficient way of writing that information without actually throwing out any of the important data. You don't lose any of the image. JPEG is a lossy compressor, so it does throw out some information.

It starts out at higher levels of compression, throwing out information that's theoretically beyond human perception. So, colors that we can't see, bits of detail that are mathematically able to be generated but can't really be perceived by people. As you squeeze it further and further down, it begins to throw out more and more important information. So it, in effect, degrades the image. You're sacrificing image quality to recover some size.

So here's an example of the same image compressed at three different levels with JPEG. If you look really carefully right in here, and right in here and in the table here, this is the least amount of compression. So, it's the most image information, the least amount of compression. So, you don't see a lot of artifacting, you don't see a lot of little sort of schmutz.

Technical term. Should write that one down. When you look at this one, this is the highest compression. You can start right in here, particularly, to see some artifacting. In other words, JPEG is averaging information across a group of pixels. So that it can store the resulting information in a smaller format. And then this is medium compression, which is still pretty decent quality, but just in a few areas, particularly in the stained glass in here. And like right around in here, you can start to see some artifacting.

So, temporal compression is what we typically use for video. And really good codecs, MPEG-4, Sorenson, use a combination of spatial compression and temporal compression. In other words, the temporally compressed frames, you're throwing out more data, The codec is examining the video and trying to get just the information that's changed. So from frame one to frame two, the second frame, it's trying to store just the difference between those two things. And in fact, that second kind of frame, we call a delta frame or a difference frame.

Then every once in a while it sets a keyframe, which is the nice, pristine, temporally compressed image. Uh, spatially compressed image. So here's an example with Cinepac compression. CinePack is kind of an old codec, but it shows the differences off really nice. Here's the keyframe. Which has a fair amount of detail, even though it's obviously being blown up quite a bit here, and you're getting a lot of jaggies. And then here's the delta frame, or difference frame. So you can see it's not storing the same amount of detail at all.

Much more detail over here, much less here. And in large part, we get away with that because video moves. So we don't always have to be presenting the same level of information to the viewer because it sticks in their brain. They don't see the fact that we're degrading from one image to the next.

So, here are the video rules of reduction. There's three ways to reduce file size and/or bandwidth requirements for a piece of video. You can reduce the data rate, that is, increase the compression. You can reduce the physical size of the image, reduce the number of pixels. So instead of 640 by 480, you do... "You can reduce the size, you can reduce the requirements, or you can reduce the frame rate, reduce the number of images that you're storing in that video. All of those things allow us to deliver video through a narrower pipe."

So these are the things that I looked at. If you go to QuickTiming.org, go to the resources section, you'll find a little place that I call Codec Central, partly as an homage to the old Terran Codec Central. And in Codec Central, I did a comparison of basically every codec I could get my hands on.

So I sat down and I figured out exactly what it is that I want to compare and what my standards were going to be for comparing one codec to another. And pretty much in this presentation I'm going to use those same standards. And what I look at is quality, size, compatibility, and usability.

So for compatibility specifically, I looked at a couple of different things. One is, if How old a version of QuickTime will play it? Can you play this codec in QuickTime 2? Can you play it in QuickTime 5 and above? I also looked at compatibility cross-platform. Does it work on Windows? Does it work on Macs? Does it work on Linux? And I also looked at compatibility with other players besides QuickTime.

Okay, it's math. I'm not going to spend a lot of time on this. This is Sorenson's formula for kind of helping you figure out what data rates you want to shoot for, for a given audience. Okay? And the idea here is you want to look at, Coming up with a number based on this formula.

Once you've come up with that number, usually your best quality is going to be at no more than half that number, and you probably aren't going to have to go to more than twice that number. Now I'll be honest with you, from what I've seen so far of H.264, this may all be kind of irrelevant.

Okay, so back to that two types thing again. There's two types of video codecs. Transfer codecs and delivery codecs. Transfer codecs, are used to move video from one location to another, generally within a production environment. So a transfer codec, I used to work for a video effects house out in LA, and generally we used Animation Best, which is a lossless codec when you're at that level, at best. And that allowed us to get smaller file sizes, reduce our transfer times over the network.

Pixlet is another example of a transfer codec. It doesn't give you the kinds of file sizes that you're going to need to be able to deliver, say, over the internet, to deliver web video. But it is going to give you minimally lossy or lossless quality. Now the other thing is delivery codecs. Delivery codecs are going to give you just a whole heck of a lot more compression. But are going to throw out some information. You're going to sacrifice quality to get playability.

So the first thing we're going to look at is delivery codecs. Now with delivery codecs, I'm sorry, I was distracted by the shiny thing at my feet. With delivery codecs, you're typically going to see compression rates somewhere up into the 90%. So if you have a one megabyte file, or let's say you have a one gigabyte file, with a 90%, even 99% compression, you're talking about being able to compress it down to a few megabytes.

[Transcript missing]

So I was in the room last night making a few little changes. The first thing we're gonna look at is the current MPEG-4 in QuickTime, which is... For simplicity's sake, if you'll pardon the pun, the best way to refer to it, I've found so far, is MPEG-4 simple, because it's based on the advanced simple profile.

Good quality. It's currently... It's somewhat limited by the current MPEG-4 spec. The... MPEG-4 Simple has been around for a long time. How many people have ever seen MPEG-3? Yeah, see, nobody's seen MPEG-3. It didn't exist because nobody could agree on what the heck it was. So they skipped over from MPEG-2 to MPEG-4. And it took them a long time to come up with MPEG-4. And by the time everybody got their ducks in a row on it, it had already been surpassed by some more modern codecs like Sorenson 3.

So the quality is OK. It's good. We're going to look at 264 here in a second, which completely blows it away. The size is good. The compatibility is excellent. works in QuickTime, works in Reel, there's a ton of third party players out there, and it's been around since the introduction of QuickTime 6. So, which has been a while now. And it's a good general purpose codec.

H.264 or AVC, which is Advanced Video Codec. Quick overview here. Excellent, excellent, excellent, excellent. We're not going to see it for a while. So we're going to talk about some of the other codecs as well. I'm in the same boat that the rest of you all are in. I'm going to go home and I'm going to play around with it and see what I get. But again, from everything I've seen so far, This is going to be the way to go for most general purpose encoding come early next year.

Sorenson Video 3 is my current favorite general purpose codec. It's higher quality than MPEG-4.

[Transcript missing]

I actually started out as an illustrator, so I'm something of an image snob. For pure quality, if I'm looking to go with something that's just got to be pretty, I always fall back to SV3. Quality is excellent, the size is good, compatibility is good, and the usability is good.

Now, notice my little footnote down there. We'd be having a different discussion a year from now. Now, Sorenson also has an MPEG-4 codec that is slightly different from Apple's MPEG-4 codec encoder. And that's included with Sorenson Squeeze Suite. You get MPEG-4, you get SV3, and you get the Spark codec, which is for Flash, which kind of sucks, but you know, you've got to take the bad with the good.

Good, good, excellent, good. Again, it's based on the MPEG-4 spec. It's ISO compliant, so anything that plays MPEG-4 is going to play the Sorenson codec as well. Usability is good. It's still limited by the MPEG-4 simple profile. It doesn't have the level of quality that you're going to see with some proprietary codecs, and it doesn't have the level of quality that H.264 is going to bring us in a few months.

3IVX is, at this point, my favorite MPEG-4 variant. By the way, just so everyone knows, all opinions expressed during this presentation are mine. It's very good quality. gives you excellent size. The compatibility is excellent. It's right now already works for a number of set-top boxes, a number of players. It's very widespread on the Windows platform. And I think the usability is excellent because of all those reasons.

H.263 is mostly kind of irrelevant at this point, but I wanted to touch on most of what you see when you pop up that little export menu in QuickTime Pro. It's marginal quality, good size, very good compatibility. It's been around for a long time. But I still find the usability is poor. Now that said, there are instances where I will fall back to H.263 because it has very low processor overhead.

So I've used it to do things like, I built a video puzzle for a client, where you actually can grab pieces of the video and move them around, and all the video is moving on all the pieces all at the same time. Now, if I tried to do that with SV3 on anything made before the last two years, it would choke and die. But with H263, it was light enough that it actually worked. And in that particular instance, quality was not paramount, playability was.

Zygo Video is another codec that I like a whole lot. It's a third-party codec from Zygo Digital, I think. They just changed their name. It's the codec I generally go to these days if I'm doing live streams. It's, again, quality is good. At high data rates, it's clearly inferior to SV3 and MPEG-4, either Apple's or Sorenson's.

Um, but at very low data rates, it really starts to pull ahead of just about everything else that's out there. And when you're doing encoding for streaming, you don't have the luxury of the kind of spikes that you get, data rate spikes that you get with something like SV3. You need something that's going to give you, well, you know, that's just going to get it there.

So, compatibility is fair. It's not part of the QuickTime delivery when you install QuickTime. It's something that people will have to go and get and download to be able to look at your video. And I always think of that as a disadvantage. But I've used it in a couple of places where I have clients who are delivering real streams inside the enterprise, and I essentially have control over what goes on all the machines within the enterprise. So I can say, this has to be installed on everybody's machine for them to watch the president's talk.

Okay, side-by-side comparison. Okay, I worked hard on this. Ooh, ah, make noises, geez. I know you're out there, I can hear you breathing. Okay, so, this is 3IVX. This piece is Apple's MPEG, simple codec. And this is the SP3 codec. So you can clearly see that there's a little bit of quality difference between the three.

I actually tried to get it so that the quality was about the same, because this is what I really wanted to show you. Even when the quality is the same, the math is not. 3IVX, I got a file size of 428 kilobytes at a data rate of 105. With Apple's MPEG, I got a file size of one megabyte and a data rate of 254.

There's not a tremendous difference in quality between those two things, is there? But I'm getting a much more deliverable file size with this. And then even SV3 in this particular instance came out a little bit ahead. So, on the encode side though, Apple's MPEG-4 had the fastest encode time, SV3 had the slowest, and 3IVX came out somewhere in the middle.

These are, by the way, my three choices. If you're doing web video or CD-ROM, I nearly always go with one of these three. 3IVX has the disadvantage, again, that they're going to have to go and get it and download it, or you're going to have to include it in an installer on a CD if you're distributing that way. Apple's MPEG-4 and SV3 are both part of the current QuickTime distribution.

Transfer Codecs. As I said, Transfer Codecs exist so that we can compress a little bit, retain the information, and move things more easily from one place to another. Hence the transfer. So, DV. I've got like six slides worth of DV. It's like they're all-- I'm going to I feel like they're all Baptists, but some of them are Southern Baptists, and some of them are like, you know, Evangelical, and there's a few Pentecostals, and, you know, they're all over the place.

So, DV comes in, or to put it another way, DV comes in multiple flavors in QuickTime. And some of these are more for the pro apps, and some of them are sort of the standard DV that you're seeing when you go out and buy a camera. I'm really going to kind of blow through these a little bit quickly.

But I want to give you a little bit of an idea. DVNTSC and PAL, quality is good, size is fair, compatibility is excellent, usability is good. DVC Pro, Yeah, it's about the same. About the same. Okay, so we've worked our way past DV, and now we're to my current favorite transfer codec.

Which is animation. And as I was mentioning before, back when I worked in the visual effects company, animation is what we typically use to move things from one machine to another. Or make a file small enough, a scene file small enough that we could write it to a CD and deliver it to a client or do something like that. At 100% animation is lossless.

Um, it may also not do a whole heck of a lot of compressing for you. Because it was really designed to work primarily with large flat areas of color. And with large flat areas of color, you can get really phenomenal levels of compression. But if you're looking at standard video, at best, you're only going to get about 50%. Now, that's not so bad. 50% is about what you can expect from most lossless codecs.

Animation also has the advantage that it supports, somewhere here, Might not be there. Anyway, it has the advantage that it supports transparency, so it supports alpha channels. So if you're working in After Effects or something like that, it's a good codec to work in. It's going to save you a little bit of drive space, and it's going to allow you to work with alpha channels. And in general, just about any professional video editing application is going to support animation.

Pixlet. Pixlet's new. I don't know how many of you guys have had a chance to play around with it a little bit. Pixlet does a really, really good job as a transfer codec. It is lossy, not lossless. So you are going to give up some data. Making it a real good archive codec, but you don't want to be opening files and resaving them over and over again, because you're going to continue to throw stuff away.

Good size, you can get a 6GB file down at near DVD quality down to about 250MB. That's pretty decent savings. If you're hurting for hard drive space, it's a real good way to go. I listed the compatibility as poor though. Right now it really only works in OS X and that's kind of limited. As I say, usability is limited.

Shear Video is a third-party codec that I also like very much as a transfer codec. It is completely lossless and preserves the image perfectly. It's only going to give you about two to one compression. It's OS X only. In general, I would try animation best first and use Pixlet as a fallback, unless you happen to work in a studio that is all OS X G5s.

This is the best way to save and transfer video if you can afford it. Apple None is none, no compression. It's completely uncompressed format. It's going to take up one heck of a lot of drive space, but if you're pulling it into other applications like After Effects or Final Cut or something like that to work on it, and you're likely to have to be moving files around and chopping them up and saving them multiple times, and you've got the room, that's the best way to move things around. Otherwise, go with animation best as your first try, and then go to something like Shear Video or Pixlet as your second pass if animation isn't giving you the kind of compression that you need.

So other codecs. There are a bunch of other video codecs. Digital Anarchy makes one called Microcosm, which is a 64-bit lossless codec. The last time I looked, the only thing that really supported 64-bit video was After Effects, I think 6. So that makes it poor in the compatibility front. Digital Anarchy also makes something called NUN16, which again is a 64-bit lossless, no compression codec. TechSmith makes a codec called InSharpen, which was really designed for doing screen captures. It deals with detailed things like text extremely well.

Again, excellent quality, good size, poor compatibility. It's not part of the standard QuickTime distribution. It's not part of the Apple component download program. They have to know where it is, they have to go, they have to hunt it out, they've got to download it if they want to use it.

And then there's a whole bunch of legacy codecs, of which the only one that's really notable at all, I think, is Cinepac. And that's only because Cinepac has made something of a comeback in the last year or so as the compressor of choice for the Konoma Player, which allows you to play back movies on Palm devices.

Audio Codecs. It's that two kinds of thing thing again. There's two kinds of audio codecs. I amuse myself. Um, oops, sorry, let me go back just a sec. Basically, the human ear is more sensitive to slight variations When you're listening to things like music and sound effects, then you are when you're listening to things like the human voice. So there's really two kinds of codecs for dealing with audio. There are codecs that are really good at compressing sounds, Like music, like sound effects, et cetera, et cetera. And there are codecs that are really good at compressing voice.

And as long as you don't get these two things confused, you'll do fine. When I looked at these codecs that we're about to go through, in terms of usability, compatibility, etc., you'll often see that what I'm saying is, for what they're designed for, they're excellent. But if you try to use a... "If you use a codec that was designed for dealing with the voice to compress something like music or sound effects, you're not going to get a pleasant sounding result. And if you try to use a codec that was designed more to handle music and general compression, you're not going to get as much compression."

So, again, I'm going to skip over a little bit of the detail, but basically, music and audio CDs use AIF, which is an uncompressed sample. They sample the audio 44,100 times per second, or 44.1 kilohertz, have a data rate of about 150, So one minute of uncompressed audio is about 11 megabytes of storage. And that's why on your 650, 700 megabyte CD, you don't get 100 songs.

So again, with the rules of reduction. There are three ways, strangely enough, to reduce the size and bandwidth requirements for audio. You can reduce the sample rate. In other words, if you go down from 44.1 to 22 or to 11, You're reducing the sample rate, you're reducing the size of the audio. You can reduce the range of the sound, which in other words, flatten out the highs and lows.

Or you can shorten the clips duration. Now you see really, you think about these, they equate on an almost one-to-one basis with how video codecs rules of reductions work. This is the same as reducing the image size, this is the same as increasing the compression, and this is the same as reducing the frame rate.

Okay, audio codecs. MP3. MP3 bugs me. I have this whole thing about language and the misuse of it. MPEG-1 Layer 3 audio. It's not MPEG-3, it's MPEG-1, which is actually getting kind of long in the tooth at this point, and probably should be put out to pasture. Um, quality is good. I don't think it does very well below 128 kilohertz. So, size is good, a whole lot smaller than AIF or WAV files. Compatibility is excellent. You can't fault MP3 for compatibility. I think there are probably shoes at this point that will play back MP3 files.

If not, I'm sure having said that, somebody will have one on the market sometime in the next couple weeks. So, and the usability overall is good. You've got to be willing to sacrifice a little size in favor of playability, but it does have its advantages. However, This is my current favorite audio codec. The AAC codec, which you'll notice by the way is excellent, excellent, excellent, and say it with me now.

Okay, good. Uh, that's it. Okay, so... 128k. Now remember I said MP3 is below 128k. Most people don't think it sounds all that well. 128k stereo has been judged indistinguishable from the uncompressed source. And this is by, I don't know, a whole bunch of people are supposed to know this stuff. You know, by audio files. Much smaller files than MP3 at much higher quality.

Cross-platform, cross-player, and cross-device compatibility is what the MPEG-4 spec is all about. AAC has pretty widespread support at this point, even if you ignore iTunes and the iPod, and God knows it's awful hard to do that these days. So, and, you know, flat out, it's quite possibly the only audio codec you're really going to need to use. It is a terrific general purpose codec. Does a nice job with voice, does a fantastic job with music and sound effects.

I haven't had a chance to play a whole lot yet with the Apple lossless encoder, which is relatively new. I think it came out in 6.5.1. Is that right, Amy? Something like that? Okay. Anyway, it's new. And the quality is excellent. I mean, you can't beat lossless. Lossless is, well, lossless.

The size is good. Again, it's a lossless encoder. You're going to get around 50%, something like that. Compatibility, eh, not so good. It's very new. You can get it to work with iTunes, you can get it to work with 651, not a whole lot else right now. It's a nice format if you're going to store a whole bunch of music on your hard drive for playback in iTunes, and you want to squeeze those down, and you don't want to sacrifice any of the quality at all.

IMA41. For a long time, this was my codec of choice. It was also the codec of choice for a lot of people who do, like, the movie trailers and things like that. It does a terrific job with sound quality. I used to work for Sorenson at their Burbank Encoding Center. We did some tests with it. And compressing with IMA41, we discovered that it even retained the 5.1 surround sound information. It doesn't give you a lot of compression, though. The size is only good. Compatibility is only good. It's been around for a long time.

But it doesn't always give you what you expect when you move from one platform to another. The usability is good. It's great for high bandwidth projects. It's what I will generally use if I'm going to a project on CD-ROM. And I know I'm going to be playing back through a computer stereo speaker system. I want something really, really nice.

Qualcomm PureVoice. Now again, you're going to see my little caveat with this one in the next slide. When used as intended, Qualcomm PureVoice is, you guessed it, a voice compression codec. It was actually designed for use with telephones. does a fantastic job with speech. At really high levels of compression though, it can sound kind of tinny and flat. Sounds a little bit like you're talking into a paper tube.

and Chris Bates, and I'll be joined by Dennis and Clifford. I would go here if you want to get the best compression to size ratio. I'm going to compress the crap out of it with this codec. Compatibility is good. It's been around with every QuickTime distribution since version 3.

Limited tonal range makes the usefulness for music and sound effects limited. As I said, this is an excellent codec when you apply it to what it's intended to be used for. If you try to use it for something else, you're not going to get a very pleasant result. Okay. Cuedesign Music 2 is another one that's been around for a very long time. It does a wonderful job with music. Overall, I think it's comparable to MP3 in general quality. I think AAC beats the pants off of it, but it comes in a solid second.

Other codecs again. There are a bunch of other codecs that you'll see. MACE is a legacy codec. 16-bit, big and little Indian, 24 and 30-bit Integer, and ULAW. And these are all, unless you're doing really high-end stuff, like you're an audio engineer, these aren't really going to be terribly useful to you. ULAW is a Unix standard, and MACE is a legacy codec that's completely outclassed by any of the more modern codecs.

Here's a little comparison. This is AIFF uncompressed audio. So this is what you hear off your CD player at home. Same thing as AAC. 22 kilohertz compression, 96 kilobits per second. The file size is 212K. Backing up again. I thought I was backing up. There we go. Compared to 3.4 megabytes, 172. Okay, let's crank it up, boys.

Back again. Come on. There we go. That's... How many people hear a substantial difference between those two things?

[Transcript missing]

I think for the vast majority of people, they're not going to hear a substantial difference between those two things. But when you look at the data rate, the file size, you see there is a phenomenal difference between those two things. And that's why AAC is currently my favorite codec. In fact, I'll often combine, if I really need good quality, I'll combine SV3 video with AAC encoded audio, put those two things together, and you get a hell of a mix.

I said hell. I said hell twice. I said hell three times. Oh, okay. Anyway, a note on image codecs. I'm not going to go through all of the veritable cornucopia of image codecs that are available to you working in QuickTime, but I did want to touch on just a couple of them and give you a little bit of an idea about what makes these three particular codecs kind of special.

I love this codec. This is my favorite image codec. I'm crazy about ping. Particularly Ping in QuickTime. I do a lot of stuff with wired sprites. And Ping is great for very low overhead stuff. It just works really nicely. It's got sophisticated alpha channels so you can do much nicer compositing than what you could do with something like say GIF.

And for For flat tonal images, you're going to get better compression than you do with GIF files. In fact, about 30% better. And for, it can't, even though it's a little bit larger than JPEG when you use it on continuous tone images like photographs, I really like the quality a lot better. And, unlike JPEG, PNG is a lossless compression format.

So, it, it's, it's, it's Which is to say that it compresses similarly to what GIF does, which compresses by limit... hello... I'm sorry. Compresses by limiting the number of colors in the color palette that it's working with. The image. It's supported on every browser and platform and in QuickTime since very early on.

The usability is excellent. For working with images, for working with, particularly with wired sprites in QuickTime, or any kind of image file in QuickTime, Ping is my go-to guy. I always use Ping. Even for most of the web work I do these days, I avoid using GIFs and JPEGs and I stick with PNG.

Oh, nobody's even going to go, oh, OK. This is my dog. His name is Lorcan Kukiran. It's Gaelic. It means fierce black hound. Anyway, so here's a comparison. You may have noticed I like to do these things. So, here is ping 224K with transparency. Nice, soft, anti-aliased, lovely, lovely.

Jeff, 64 colors, 120K, with a diffusion, dither, and transparency. But now look at the quality difference. Even though I've got a larger file here, I obviously can get better compression with Jeff, but when you start looking at the quality difference, particularly the way Jeff tends to dither, Jeff has to use dither to replicate colors that aren't inside its color palette, the quality is so much nicer.

Look particularly right around the eye here, and right around the eye here. And then this is JPEG at best, 344, and you get no transparency with it. And it's lossy, so if you have to open the file up, edit it again, and save it out again, it's putting compression on compression on compression.

JPEG 2000 now is a little bit different thing. JPEG, standard JPEG, and JPEG 2000 are completely different codecs. JPEG 2000 is excellent quality, good size, poor compatibility at this point because not everybody has caught on to it yet. There are still better compressors, and in general right now I still think Ping is a little bit better compressor than JPEG 2000.

It's only available in OS X for QuickTime. There is a Photoshop plug-in for creating JPEG 2000 files that is available from this particular vendor, from Lead Technologies, and this is a URL for it. and you know, it'll be in the, it'll be in our home game. So, here's a little bit of a side-by-side comparison. JPEG 2000 uses something called wavelet compression. Without getting into a lot of detail, it's just better. This is the bad Santa. So, here's JPEG.

Here's JPEG 2000. Look right around the eye particularly at how much artifacting there is. JPEG? JPEG 2000. So even the detail in the mustache and, you know, it's just scary to look at my own head this large. Anyway. Okay, so, best all-round codecs, and the winners are: For video delivery, MPEG-4 and SV3. MPEG-4 for compatibility, SV3 for slightly higher quality. Again, a year from now, we'll be having a different conversation. H.264 changes the landscape. For audio, go with AAC. For a general purpose audio codec, it's the best thing that you have available to you.

Graphics, paying every time. And for video and audio transfer, my favorite is still Animation Best.

[Transcript missing]

For more information, a couple of sites. Being the self-serving jerk I am, I put mine first. So QuickTiming.org, which strangely enough is at QuickTiming.org. I have news, tutorials, reviews, all related to QuickTime. My ultimate goal is world domination by QuickTime.

So, lots and lots of stuff on there. I try to cover anything that's related to QuickTime, and that's almost anything that falls into the digital hub sphere. iTunes is QuickTime, iMovie is QuickTime, Final Cut Pro is QuickTime, iDVD, DVD Studio Pro is QuickTime. I'm missing a whole bunch of things here, but, you know, QuickTime is the architecture that runs all of this stuff.

And in addition to that, I also have a news section that's updated fairly often, usually about three times a week, sometimes more often as things are happening. And a newsletter that you can sign up for that I refer to as my regular irregular newsletter. It kind of goes out either when I have something really important to say or when I feel like it.

Martin, and I've never actually pronounced Martin's last name, because I've only met him by email. But Martin has a QuickTime compatibility chart on his website. Oh, and he says hi, Amy. It is a very, very complete listing of all the QuickTime codecs, audio, image, video, and what version of QuickTime they were introduced with. Really tremendously useful resource. And last but not least, I wrote a book. If you buy it, I don't have to eat my dog.

Anyway, Quick Timers Guide to Web Video will be out in a few weeks. If you go to books.ursamajormedia.com, which is my publishing company, because I'll be honest, I'm a control freak, and you can actually get it at a discount right now. And that's my little commercial message. And this is who to contact for more information. I'm at cliff@quicktiming.org. Fairly easy to remember. And then Guillermo, QuickTimeMan@apple.com.
