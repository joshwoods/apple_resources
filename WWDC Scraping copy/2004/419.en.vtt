WEBVTT

00:00:12.730 --> 00:00:13.360
All right.

00:00:13.360 --> 00:00:14.010
Good morning.

00:00:14.120 --> 00:00:17.720
Welcome to session 419,
whose official title is

00:00:17.720 --> 00:00:22.070
Best Practices in Website Development,
but whose unofficial and, I think,

00:00:22.090 --> 00:00:24.380
more interesting title is
Building Visually Compelling

00:00:24.390 --> 00:00:29.490
Webpages for Safari,
as well as other WebKit applications.

00:00:29.880 --> 00:00:30.560
All right.

00:00:30.560 --> 00:00:31.190
Good morning.

00:00:31.300 --> 00:00:34.920
Welcome to session 419,
whose official title is

00:00:34.920 --> 00:00:39.300
Best Practices in Website Development,
but whose unofficial and, I think,

00:00:39.300 --> 00:00:41.590
more interesting title is
Building Visually Compelling

00:00:41.590 --> 00:00:46.690
Webpages for Safari,
as well as other WebKit applications.

00:00:47.960 --> 00:00:51.120
So who are the primary
consumers of WebKit technology?

00:00:51.130 --> 00:00:54.800
Well, the first and most obvious target
audience is the website author.

00:00:54.810 --> 00:00:58.300
So in the first portion of the talk,
I'm going to be outlining some best

00:00:58.430 --> 00:01:02.100
practices in website development
that you can use when designing

00:01:02.100 --> 00:01:06.060
websites that you want to work
in as many browsers as possible.

00:01:06.060 --> 00:01:07.740
In addition,
some of you may be developing

00:01:07.810 --> 00:01:11.490
applications that use WebKit and may
be interested to learn what kinds of

00:01:11.490 --> 00:01:15.410
things you can do when you're free
of the cross browser constraint.

00:01:15.840 --> 00:01:17.810
And then finally,
some of you may have come from the

00:01:17.810 --> 00:01:21.180
dashboard session earlier this morning
and may be interested in learning what

00:01:21.280 --> 00:01:24.540
kinds of tips and tricks you can use
to make your widgets look really cool.

00:01:24.580 --> 00:01:26.820
So towards the end of the talk,
I'll be covering some of the

00:01:26.820 --> 00:01:29.850
WebKit-specific enhancements that
we've made that you can take advantage

00:01:29.850 --> 00:01:32.530
of when building your widgets.

00:01:33.630 --> 00:01:36.820
So what I'm going to cover in order,
I'm going to start by

00:01:36.820 --> 00:01:39.090
talking about web standards,
what they are,

00:01:39.090 --> 00:01:41.880
and why it's so important to
adhere to them when designing

00:01:41.880 --> 00:01:45.440
websites for deployment in
multiple browser environments.

00:01:45.460 --> 00:01:48.100
Next, I'm going to talk about
how to use standards well,

00:01:48.100 --> 00:01:50.550
in particular,
how to use CSS to separate the

00:01:50.550 --> 00:01:54.000
presentation of your website
from your website structure.

00:01:54.020 --> 00:01:57.280
And I'm going to demonstrate how
doing so will result in smaller,

00:01:57.480 --> 00:02:01.100
faster,
and more easily maintainable websites.

00:02:01.150 --> 00:02:03.140
Then I'm going to get into some
technical details and cover

00:02:03.140 --> 00:02:07.820
some basic styling techniques,
modern CSS techniques that

00:02:07.820 --> 00:02:09.660
work in most browsers.

00:02:09.660 --> 00:02:11.410
And then I'm also going
to cover some cutting edge

00:02:11.450 --> 00:02:14.700
techniques that work in WebKit,
but that more importantly also

00:02:14.700 --> 00:02:18.540
degrade gracefully in browsers
that don't support those features.

00:02:18.590 --> 00:02:20.600
And then finally,
I'm going to cover some of the extensions

00:02:20.600 --> 00:02:25.860
that we've made to WebKit for you widget
authors and WebKit app developers.

00:02:27.320 --> 00:02:30.700
So what are web standards and
why are they so important?

00:02:30.730 --> 00:02:34.610
Well, web standards are a set of
recommendations released by an

00:02:34.610 --> 00:02:37.320
organization called the W3C.

00:02:37.320 --> 00:02:40.880
And what web standards define are
the rules that browsers should use

00:02:40.880 --> 00:02:44.760
that they should adhere to when
they're parsing and rendering HTML.

00:02:44.760 --> 00:02:48.460
And the reason these standards are so
important is they basically provide a way

00:02:48.460 --> 00:02:52.860
of ensuring interoperability among all of
the browsers that support the standards.

00:02:53.050 --> 00:02:57.480
So the idea is that you can write
once and expect your code to work,

00:02:57.480 --> 00:03:01.820
just work, on all of the browsers that
support those standards.

00:03:01.830 --> 00:03:06.300
Now, an added benefit of standards is
you'll find that if you use them well,

00:03:06.300 --> 00:03:11.390
you're going to end up with smaller and
faster web pages in all modern browsers.

00:03:11.580 --> 00:03:13.720
So the most obvious and
well-known specification,

00:03:13.720 --> 00:03:17.770
of course, is HTML,
the primary language of the web today.

00:03:17.850 --> 00:03:21.820
But in order to achieve richer
presentational capabilities in HTML,

00:03:21.820 --> 00:03:25.980
as well as to achieve more dynamic
effects or more complex behavior,

00:03:25.980 --> 00:03:29.330
there are some other specifications
that you should be familiar with.

00:03:29.470 --> 00:03:33.500
And the first of these is CSS,
or Cascading Style Sheets.

00:03:33.560 --> 00:03:37.820
And what CSS is is a language
separate from HTML but includable

00:03:38.140 --> 00:03:42.750
in HTML files that defines rules
for how to define the look of your

00:03:42.750 --> 00:03:45.160
website or the theme of your website.

00:03:45.210 --> 00:03:47.550
So you can do things
like set the font color,

00:03:47.550 --> 00:03:51.360
size, weight, set background and
foreground colors and images.

00:03:51.410 --> 00:03:54.330
And you can define the
entire layout of your page,

00:03:54.330 --> 00:03:58.040
as well,
where elements go and how big they are.

00:03:58.080 --> 00:04:00.350
And this is a spec that's
been around for a while,

00:04:00.350 --> 00:04:01.560
nearly 10 years.

00:04:01.560 --> 00:04:06.060
And the first version of it, CSS1,
is actually very well-supported

00:04:06.060 --> 00:04:07.880
in all modern browsers.

00:04:08.090 --> 00:04:11.750
Now, a second revision was
released a few years later.

00:04:11.810 --> 00:04:14.270
And this spec actually added
a lot of cool new features.

00:04:14.550 --> 00:04:16.800
But unfortunately, there were a lot of
ambiguities in the spec,

00:04:16.880 --> 00:04:17.940
a lot of holes.

00:04:17.960 --> 00:04:21.020
So when browser makers tried
to implement this spec,

00:04:21.020 --> 00:04:23.800
they ran into issues of having
to fill in gaps in the spec.

00:04:23.800 --> 00:04:26.770
And so there were interoperability
problems as browsers made different

00:04:26.770 --> 00:04:28.680
choices in their interpretations.

00:04:28.700 --> 00:04:32.540
So that led the CSS Working Group to
produce revision 2.1.

00:04:32.540 --> 00:04:35.060
And this is the sort
of definitive CSS spec,

00:04:35.060 --> 00:04:36.120
if you will.

00:04:36.120 --> 00:04:37.720
This cleared up a lot of the ambiguities.

00:04:37.790 --> 00:04:43.300
It finally defined how a lot of
the cool new features in CSS2 work.

00:04:43.300 --> 00:04:46.860
And it even drops CSS2 features
that no browser maker had

00:04:46.860 --> 00:04:48.360
ever bothered to implement.

00:04:48.360 --> 00:04:51.200
So if you're looking to
see what Safari supports,

00:04:51.200 --> 00:04:55.440
this is the definitive spec to
read to find out how a web kit's

00:04:55.440 --> 00:04:58.160
going to behave when you use CSS.

00:04:58.180 --> 00:05:01.790
Now, in addition,
CSS3 is in development at the W3C.

00:05:01.920 --> 00:05:04.710
And although it's not yet a standard,
Safari actually supports

00:05:04.720 --> 00:05:06.200
many CSS3 properties.

00:05:06.210 --> 00:05:09.350
And we've added even more--
we've added a lot of support

00:05:09.350 --> 00:05:11.720
for CSS3 in the beta in Tiger.

00:05:11.720 --> 00:05:14.660
So I'll be covering some of
the highlights of Safari CSS3

00:05:14.660 --> 00:05:16.920
support later in the session.

00:05:18.180 --> 00:05:21.180
Now, another specification that you
should be familiar with for achieving

00:05:21.180 --> 00:05:24.790
dynamic effects in your web page
is the Document Object Model,

00:05:24.800 --> 00:05:26.930
or DOM for short.

00:05:26.980 --> 00:05:30.950
And what the DOM is is a collection
of APIs that are accessible

00:05:30.950 --> 00:05:34.240
both from JavaScript in your
web pages and now also from

00:05:34.330 --> 00:05:37.180
Objective-C in the latest WebKit beta.

00:05:37.640 --> 00:05:41.860
And this API allows you to walk the
structure of your page as a tree view.

00:05:42.030 --> 00:05:45.980
So you can iterate over the nodes in
your page and look at element names,

00:05:45.980 --> 00:05:49.860
attribute names and values,
and even query for style information

00:05:50.100 --> 00:05:51.910
in the latest WebKit beta.

00:05:52.130 --> 00:05:56.440
Now, in addition,
the DOM is not just a read-only API.

00:05:56.440 --> 00:05:57.480
It's completely dynamic.

00:05:57.540 --> 00:06:01.160
So you can actually change all
of this information on the fly.

00:06:01.220 --> 00:06:05.120
So you can append nodes, remove nodes,
change attribute names or values,

00:06:05.190 --> 00:06:07.260
or dynamically change style information.

00:06:07.480 --> 00:06:10.980
And those effects will take
place in real time as you make

00:06:11.040 --> 00:06:11.960
those changes in your web page.

00:06:11.960 --> 00:06:16.830
So the DOM is a great way to achieve
very dynamic and complex behavior.

00:06:17.120 --> 00:06:19.900
Now, like CSS,
it's been around for a long time.

00:06:19.900 --> 00:06:23.810
Before there was even a DOM standard,
there was an informal collection

00:06:23.840 --> 00:06:26.720
of APIs that you could use
to do some of these things.

00:06:26.720 --> 00:06:30.370
And so that's sort of been
informally known as DOM level zero.

00:06:30.660 --> 00:06:32.370
And then over the years,
there have been three

00:06:32.370 --> 00:06:34.840
revisions to the DOM spec,
refining the behavior,

00:06:34.900 --> 00:06:38.980
adding better traversal mechanisms
and support for custom events.

00:06:39.110 --> 00:06:41.690
And in addition,
there are also a lot of popular

00:06:41.690 --> 00:06:45.020
DOM extensions that have never
found their way into any standard.

00:06:45.030 --> 00:06:47.840
And Safari actually
supports many of those.

00:06:47.840 --> 00:06:52.880
Examples are the content editable
attribute to do in-page editing,

00:06:53.040 --> 00:06:55.700
as well as methods for querying
for the size and position

00:06:55.700 --> 00:06:58.000
of elements on your page.

00:06:58.980 --> 00:07:02.260
So I've talked about what the
big three standards are-- DOM,

00:07:02.260 --> 00:07:06.210
CSS, and HTML-- and why it's
important to follow them.

00:07:06.400 --> 00:07:08.860
Now let's talk for a moment about
how you tell the browser that you

00:07:08.860 --> 00:07:12.030
even want to adhere to web standards.

00:07:12.130 --> 00:07:17.990
So by default,
if you leave off this special tag

00:07:18.000 --> 00:07:22.250
that you can put at the top of a
document called a doc type tag,

00:07:22.340 --> 00:07:25.580
the browser is going to assume that
you're sort of an old-style web page,

00:07:25.580 --> 00:07:28.410
that you're a legacy page,
and that you aren't really

00:07:28.420 --> 00:07:29.870
supporting modern standards.

00:07:29.990 --> 00:07:31.910
And what browsers are going to do
is they're going to go into their

00:07:32.060 --> 00:07:36.610
essentially worst mode of rendering,
a compatibility or quirks mode.

00:07:36.980 --> 00:07:39.720
And what you're going to find if
you leave this doc type off in

00:07:39.720 --> 00:07:43.740
your web pages is that the various
quirks in the browsers actually

00:07:43.740 --> 00:07:45.130
are not going to be the same.

00:07:45.140 --> 00:07:47.520
Some browsers are much
quirkier than others.

00:07:47.520 --> 00:07:51.250
So what you'll find is that you may
test in one browser and inadvertently

00:07:51.260 --> 00:07:54.510
trigger quirks that you didn't
even know about in another browser.

00:07:54.580 --> 00:07:58.900
So by putting this doc type in your
web pages up front and most importantly

00:07:58.900 --> 00:08:03.730
specifying a modern version of HTML,
specifically HTML 4 or

00:08:03.730 --> 00:08:07.150
higher or XHTML 1 or higher,
you're going to let the browser know that

00:08:07.150 --> 00:08:10.680
you're a modern standards-compliant page,
and you're going to trigger the

00:08:10.680 --> 00:08:12.740
browser's strictest mode of rendering.

00:08:12.790 --> 00:08:15.700
And this is really important because
all of the browsers will go into

00:08:15.700 --> 00:08:20.070
strict mode with this sort of doc type
that I have on the slide behind me.

00:08:20.130 --> 00:08:23.820
And when they do so, the rendering of the
browsers differs a lot less.

00:08:24.100 --> 00:08:27.500
So this is just something that you can
do to not only make sure that when you

00:08:27.500 --> 00:08:31.820
read a spec and then try the feature out,
it actually works the way the spec says,

00:08:31.900 --> 00:08:34.640
but it'll also guarantee that your
site will hopefully just work when

00:08:34.720 --> 00:08:38.160
you bring it up in browsers that
you never tested it in before.

00:08:39.910 --> 00:08:43.230
So let's say you've got this
old-style website that's just HTML,

00:08:43.230 --> 00:08:46.140
and you're trying to modernize it,
bring it up to date.

00:08:46.170 --> 00:08:48.970
So you've put the doc type
in and triggered strict mode.

00:08:49.020 --> 00:08:52.060
Well, one of the things that's going to
happen when you put that doc type in

00:08:52.060 --> 00:08:54.740
is the browser's going to get a lot
more draconian in its error handling.

00:08:54.740 --> 00:08:57.160
It's going to get a lot less
tolerant of stupid mistakes

00:08:57.180 --> 00:08:58.920
that you make in your website.

00:08:58.920 --> 00:09:02.890
And so the onus is going to be on
you as the website developer to

00:09:02.920 --> 00:09:05.100
check your web page for errors.

00:09:05.440 --> 00:09:09.060
And there are online tools
at the W3C called validators

00:09:09.060 --> 00:09:11.360
that can do this for you.

00:09:11.360 --> 00:09:14.800
And there's both HTML and CSS validators.

00:09:14.810 --> 00:09:19.320
And what they do is take your
CSS and HTML files as inputs,

00:09:19.320 --> 00:09:22.570
and they'll print out a list,
a nice list of all the errors and

00:09:22.570 --> 00:09:24.360
where they occurred in your file.

00:09:24.410 --> 00:09:31.240
So they catch things like unclosed quotes
or misbalanced tags or bad tag nesting.

00:09:31.260 --> 00:09:33.240
So if you run your site
through a validator,

00:09:33.240 --> 00:09:36.430
you can basically ensure that it's
structurally correct and minimize

00:09:36.430 --> 00:09:38.460
the number of errors in the page.

00:09:38.460 --> 00:09:41.330
Now, the problem is if you don't
do this is you run the risk of

00:09:41.330 --> 00:09:43.020
having this error in your page.

00:09:43.030 --> 00:09:45.560
And of course,
we wouldn't have a web if browsers just

00:09:45.620 --> 00:09:47.300
crashed every time you made an error.

00:09:47.320 --> 00:09:50.360
So browsers are going to try to
second guess you and try to figure

00:09:50.360 --> 00:09:52.500
out what it was that you really meant.

00:09:52.570 --> 00:09:55.640
But there's an infinite number of
errors that you can make in a web page.

00:09:55.640 --> 00:09:58.640
And so it's impossible that the
error recovery rules for any two

00:09:58.640 --> 00:10:00.500
browsers is going to be the same.

00:10:00.500 --> 00:10:02.460
So again,
if you leave these errors in the page,

00:10:02.460 --> 00:10:05.680
you run the risk that your site's
going to render differently in the

00:10:05.690 --> 00:10:08.440
various browsers as they recover
from your errors in different ways.

00:10:08.440 --> 00:10:11.580
So make sure you validate
your code up front.

00:10:11.580 --> 00:10:14.840
Now, it's worth noting that validators
can be a bit pedantic as far

00:10:14.840 --> 00:10:16.500
as their reporting of errors.

00:10:16.500 --> 00:10:19.190
So I'm not going to stand up here
and say that your sites have to be

00:10:19.380 --> 00:10:22.340
100% valid according to HTML and CSS.

00:10:22.390 --> 00:10:25.370
But you should eliminate the
more egregious errors up front.

00:10:25.380 --> 00:10:27.380
Use validators with a
dash of common sense.

00:10:27.380 --> 00:10:31.750
And at least make sure you have a
well-formed DOM tree and stuff like that.

00:10:33.110 --> 00:10:37.270
On the slide behind me now,
I have documentation links to both

00:10:37.270 --> 00:10:40.000
the CSS and the DOM specifications.

00:10:40.000 --> 00:10:42.190
So again,
you can go here and look at the DOM level

00:10:42.190 --> 00:10:47.440
2 spec to see what Safari supports
and look at the CSS 2.1 spec to get

00:10:47.530 --> 00:10:50.620
a feel for what Safari supports in CSS.

00:10:50.620 --> 00:10:55.580
And then the validator links are up
here as well for both CSS and markup.

00:10:57.840 --> 00:11:00.540
So let's say you've got
this old-style website.

00:11:00.620 --> 00:11:03.650
You've now put the doc type
in and triggered strict mode,

00:11:03.660 --> 00:11:06.590
and you've run it through a validator,
and you've eliminated all the errors.

00:11:06.730 --> 00:11:10.020
So now you have a site that,
technically speaking, is correct.

00:11:10.020 --> 00:11:10.910
It's well-formed.

00:11:10.920 --> 00:11:12.470
There are no mistakes in it.

00:11:12.540 --> 00:11:15.640
But you haven't started
using any CSS yet.

00:11:15.640 --> 00:11:18.160
In particular,
all of your look is still achieved

00:11:18.190 --> 00:11:20.220
through old-style HTML tags.

00:11:20.260 --> 00:11:24.170
Because HTML was around before CSS,
a lot of presentational features

00:11:24.170 --> 00:11:27.360
crept into the language before
CSS came into existence.

00:11:27.370 --> 00:11:30.220
There's a lot of presentational
tags and attributes whose sole

00:11:30.220 --> 00:11:33.310
purpose in HTML is to supply
this presentational information.

00:11:33.440 --> 00:11:35.640
And they said nothing about
what your website actually

00:11:35.940 --> 00:11:37.040
should be structured like.

00:11:37.170 --> 00:11:39.340
They were just there to
achieve an appearance.

00:11:39.420 --> 00:11:43.820
And examples of these tags are the font
tag for doing font colors and sizes,

00:11:43.820 --> 00:11:47.050
the bold and italic tags,
and then various attributes like

00:11:47.050 --> 00:11:51.580
the width and height attribute
and colors and background colors.

00:11:51.730 --> 00:11:56.150
Now, why is this presentational
markup bad in your website?

00:11:56.310 --> 00:11:56.920
Well.

00:11:56.920 --> 00:11:59.520
For one thing,
when you intermingle the presentational

00:11:59.520 --> 00:12:02.470
markup with your structural markup,
you're effectively hard

00:12:02.470 --> 00:12:03.820
coding your presentation.

00:12:03.820 --> 00:12:06.580
If you find that you want to make
any changes to the presentation,

00:12:06.580 --> 00:12:09.920
you'll have to get in there with this
intermingled markup and make changes.

00:12:09.920 --> 00:12:12.740
And you might inadvertently
introduce a structural error.

00:12:12.740 --> 00:12:14.230
And then the opposite is also true.

00:12:14.240 --> 00:12:16.540
Maybe you're just wanting to
change your site's structure.

00:12:16.590 --> 00:12:18.900
But it's hard to even tell what
the structure is because the

00:12:18.900 --> 00:12:20.200
presentational tags are in the way.

00:12:20.200 --> 00:12:23.400
And you might even introduce
presentational errors when you're just

00:12:23.400 --> 00:12:25.540
trying to change your website structure.

00:12:25.880 --> 00:12:28.900
In addition, you can't define multiple
looks for your site.

00:12:28.900 --> 00:12:32.920
There's no way to actually effectively
theme your site because the presentation

00:12:32.980 --> 00:12:35.070
is mixed in with the markup.

00:12:35.290 --> 00:12:40.310
And finally,
this presentational markup is a waste

00:12:40.310 --> 00:12:45.280
of bandwidth because frequently you'll
have similar constructs on a web page,

00:12:45.280 --> 00:12:48.200
like, for example,
the links in a nav bar.

00:12:48.230 --> 00:12:50.970
And maybe you're relying on a
complex appearance with table

00:12:50.970 --> 00:12:53.100
cells and images or whatever.

00:12:53.210 --> 00:12:58.200
And you end up using a lot of
presentational markup per link.

00:12:58.200 --> 00:13:01.370
What happens if you always use
this markup is it'll be duplicated

00:13:01.370 --> 00:13:03.200
in every construct on the page.

00:13:03.200 --> 00:13:06.200
So, for example,
if you have 10 links in your nav bar,

00:13:06.200 --> 00:13:08.700
maybe you have 50 or 60 pieces of
presentational markup that are all

00:13:08.700 --> 00:13:11.190
duplicated along with those links.

00:13:11.300 --> 00:13:14.200
So this results in really,
really large web pages,

00:13:14.230 --> 00:13:17.550
and it's a waste of server bandwidth,
which will cost you money

00:13:17.550 --> 00:13:19.200
when running your website.

00:13:19.220 --> 00:13:23.200
And of course, this results in inferior
performance in any modern browser

00:13:23.200 --> 00:13:25.200
because a web page that's larger,
that has a bigger DOM tree,

00:13:25.200 --> 00:13:28.310
is going to take longer to
parse and longer to render.

00:13:28.950 --> 00:13:32.850
So to really hammer this point home,
let's actually look at an example.

00:13:32.950 --> 00:13:36.080
And the example I've chosen
is a typical weblog article.

00:13:36.100 --> 00:13:38.440
And I think a weblog is a
very representative example,

00:13:38.440 --> 00:13:42.430
because a prolific blogger might
have as many as 100 of these blog

00:13:42.430 --> 00:13:44.320
articles on their front page.

00:13:44.320 --> 00:13:46.320
And we're even going to
assume that a blog article is

00:13:46.320 --> 00:13:47.620
simpler than they often are.

00:13:47.620 --> 00:13:51.120
We're just going to say it has three
pieces of information-- a header,

00:13:51.550 --> 00:13:55.210
which is like the title of the article,
a date, which is when it was posted,

00:13:55.260 --> 00:13:58.420
and then the content of the article.

00:13:58.430 --> 00:14:00.820
And what we want to achieve
is a layout or appearance that

00:14:00.820 --> 00:14:02.500
I put up on the slide behind me.

00:14:02.520 --> 00:14:06.460
We want a slightly larger,
bold title in a different color.

00:14:06.470 --> 00:14:08.440
And then we have a
different font for the date.

00:14:08.440 --> 00:14:12.570
And we want the date on the far right,
the title up on the far left,

00:14:12.570 --> 00:14:16.120
and then the text of the article
slightly indented and underneath.

00:14:16.120 --> 00:14:18.010
So this is the layout we're shooting for.

00:14:18.230 --> 00:14:22.720
So let's look at how we might
do this using old-style markup.

00:14:22.740 --> 00:14:25.600
So you probably can't even read this,
because there's so much of it.

00:14:25.610 --> 00:14:27.940
I mean, it's just a sea of bad markup.

00:14:27.940 --> 00:14:31.960
You have table cells used to do spacing.

00:14:31.960 --> 00:14:34.880
You have alignment attributes
on the table cells to push

00:14:34.920 --> 00:14:36.380
things to the left and right.

00:14:36.400 --> 00:14:40.160
We needed multiple tags-- the font
tag and the B tag-- just to make the

00:14:40.160 --> 00:14:43.200
header bold and maroon for the title.

00:14:43.310 --> 00:14:47.200
And if I hadn't highlighted
the three relevant pieces of

00:14:47.200 --> 00:14:50.880
structural information-- the title,
the date, and the text-- it would have

00:14:50.880 --> 00:14:53.880
been hard to even see where
they were in this web page.

00:14:53.880 --> 00:14:56.040
So if you wanted to make
changes to the structure,

00:14:56.040 --> 00:14:57.460
look at how hard it would be.

00:14:57.500 --> 00:15:02.770
Because you'd just be messing around
with this sea of presentational markup.

00:15:03.190 --> 00:15:05.420
So now let's look at a good example.

00:15:05.460 --> 00:15:07.660
In this example,
just ignore the CSS for a second

00:15:07.660 --> 00:15:11.260
and look at the HTML and look at
how much easier it is to read.

00:15:11.260 --> 00:15:15.610
And look at how what it represents is
exactly the structure of your website.

00:15:15.640 --> 00:15:20.380
You can think of your web blog as a
container for a bunch of articles.

00:15:20.440 --> 00:15:23.300
Each article is a container
that has exactly three pieces

00:15:23.300 --> 00:15:27.140
of information-- a title,
a date, and a body.

00:15:27.170 --> 00:15:30.600
And you can see that it's very easy
to locate these pieces of information.

00:15:30.600 --> 00:15:33.520
And if you wanted to make
structural changes to your website,

00:15:33.590 --> 00:15:37.120
it's fairly trivial if
you move to this model.

00:15:37.150 --> 00:15:38.480
And now let's look at the CSS.

00:15:38.480 --> 00:15:41.600
So the CSS is where we've put
the presentational information.

00:15:41.660 --> 00:15:44.940
So for example,
the title we've put in a different font,

00:15:44.940 --> 00:15:46.860
given it a larger font size,
made it bold.

00:15:47.080 --> 00:15:48.400
And we've even said where it goes.

00:15:48.400 --> 00:15:52.300
We added the float left to say
that it should sit in the far left.

00:15:52.360 --> 00:15:55.480
And we did that all with just
one rule that can be used by all

00:15:55.480 --> 00:15:57.580
the blog articles on the page.

00:15:57.630 --> 00:16:01.470
And you can see that there are similar
single rules for the date and-- the body,

00:16:01.650 --> 00:16:05.340
basically,
in achieving the layout that we want.

00:16:05.400 --> 00:16:08.120
And these two layouts basically
look exactly the same.

00:16:08.120 --> 00:16:11.700
But this one will load about three or
four times faster in a web browser--

00:16:11.700 --> 00:16:14.130
in any web browser you try it in.

00:16:15.180 --> 00:16:16.800
So a good example, observations.

00:16:17.060 --> 00:16:19.180
Well, first of all,
it's just plain easier to read.

00:16:19.180 --> 00:16:21.990
If you have to get into either the
presentational side of your website

00:16:21.990 --> 00:16:24.760
or the structure of your website,
it'll be a lot easier to read and

00:16:24.850 --> 00:16:27.190
therefore a lot easier to maintain.

00:16:27.470 --> 00:16:28.800
information is shared.

00:16:29.100 --> 00:16:32.630
Because the rules in CSS can be applied
to all of the articles on the page,

00:16:32.630 --> 00:16:36.120
you don't have the problem of duplicating
a bunch of presentational markup.

00:16:36.250 --> 00:16:40.240
So those single rules
apply to each article,

00:16:40.270 --> 00:16:43.260
and that's going to result
in better performance.

00:16:43.680 --> 00:16:46.890
Now, even more importantly,
CSS can be reused across

00:16:47.010 --> 00:16:47.920
pages on your site.

00:16:48.090 --> 00:16:52.760
A typical web blog has archive pages that
have the same look as the front page.

00:16:52.840 --> 00:16:55.860
And they can load the same CSS file.

00:16:55.920 --> 00:16:58.360
And then the multiple pages
are even sharing information.

00:16:58.360 --> 00:17:01.060
So let's say your user browses
to the front page of the blog.

00:17:01.120 --> 00:17:05.000
Then the CSS is going to get parsed
and loaded for the front page.

00:17:05.310 --> 00:17:08.060
And then the user is going to
start browsing into your archives.

00:17:08.110 --> 00:17:10.560
And that same CSS is already ready to go.

00:17:10.560 --> 00:17:13.020
So by using CSS to share
this presentational

00:17:13.020 --> 00:17:16.190
information even across pages,
you're not only going to improve

00:17:16.300 --> 00:17:19.450
the performance of individual pages,
but you're going to improve the

00:17:19.450 --> 00:17:22.180
performance of your entire website.

00:17:23.020 --> 00:17:26.040
And this is going to result in
significant bandwidth savings for you,

00:17:26.040 --> 00:17:28.260
because you're going to load
the presentational information

00:17:28.260 --> 00:17:32.220
frequently once for a website
and then share it across pages.

00:17:32.250 --> 00:17:33.590
And in addition,
you're going to eliminate all of

00:17:33.590 --> 00:17:37.590
this presentational markup that would
otherwise bloat your HTML files.

00:17:37.920 --> 00:17:39.350
And of course,
it's going to result in better

00:17:39.380 --> 00:17:41.950
performance in any modern browser,
because there's going to be a

00:17:41.950 --> 00:17:45.800
lot less work being done by the
browser to render your page.

00:17:47.310 --> 00:17:51.200
So what I'm going to show you now is
a demo that's perhaps the ultimate

00:17:51.200 --> 00:17:55.820
example on the web today of the
separation of structure and presentation.

00:17:55.910 --> 00:17:58.200
So if we can switch to the demo now.

00:18:10.220 --> 00:18:13.660
Okay,
so what a web designer named Dave Shea

00:18:13.660 --> 00:18:18.120
did is he made a very simple,
basic piece of unstyled markup,

00:18:18.120 --> 00:18:19.480
which you can see behind me.

00:18:19.480 --> 00:18:26.800
It's just got some headers, you know,
some list items down towards the bottom.

00:18:26.800 --> 00:18:29.760
And basically, this started off unstyled.

00:18:29.760 --> 00:18:32.430
It almost looks like we're, you know,
we've traveled back in

00:18:32.430 --> 00:18:35.850
time to the year 1993,
but not quite.

00:18:36.690 --> 00:18:37.640
Ah, there we go.

00:18:37.640 --> 00:18:39.030
That's better.

00:18:39.060 --> 00:18:41.860
Much more like Mosaic 1.0 now.

00:18:43.480 --> 00:18:46.990
All right, so what Dave Shea did
was he made this markup.

00:18:47.070 --> 00:18:51.380
And he said he challenged web designers
to produce innovative and creative

00:18:51.380 --> 00:18:53.280
designs by styling this markup.

00:18:53.510 --> 00:18:56.290
And the restriction that was placed
on all of the web designers was,

00:18:56.290 --> 00:18:57.980
you can't change this markup.

00:18:58.050 --> 00:19:00.940
You have to take this existing
markup that I made and come

00:19:00.940 --> 00:19:03.420
up with a great design for it,
all without being able

00:19:03.420 --> 00:19:04.400
to change the HTML.

00:19:04.670 --> 00:19:08.050
And the range and variety of designs
that people have been able to produce

00:19:08.050 --> 00:19:10.320
using only CSS is just pretty incredible.

00:19:10.320 --> 00:19:14.500
and we can show you some of
the better ones right now.

00:19:14.710 --> 00:19:17.520
So we start with a newer design
that was posted relatively recently

00:19:17.520 --> 00:19:19.600
that's sort of a more basic one.

00:19:19.680 --> 00:19:22.640
But you can see nifty examples
like the fixed bar on the left,

00:19:22.680 --> 00:19:25.770
a much narrower column,
a lot of interesting use

00:19:25.840 --> 00:19:28.880
of background images,
and different fonts.

00:19:28.950 --> 00:19:31.480
But you can actually achieve
a lot more radical effects

00:19:31.480 --> 00:19:33.700
with the layout than this.

00:19:33.790 --> 00:19:37.410
In this next example,
the designer actually took the

00:19:37.410 --> 00:19:40.870
headings and the subsections and laid
them out horizontally in columns.

00:19:40.990 --> 00:19:42.510
So remember, this is all the same markup.

00:19:42.600 --> 00:19:46.300
These web designers are all operating
on the exact same HTML page.

00:19:46.630 --> 00:19:49.280
And what this designer did was
actually laid things out horizontally.

00:19:49.530 --> 00:19:51.730
But you can get even wackier than that.

00:19:51.820 --> 00:19:55.710
In this next design,
the page is laid out like

00:19:55.870 --> 00:19:57.520
panels in a comic book.

00:19:57.590 --> 00:20:01.350
And so this is the Wiggles
the Wonder Worm design.

00:20:01.420 --> 00:20:03.660
And that's actually real
text that you can select.

00:20:03.740 --> 00:20:05.870
The text has been positioned
within the panels.

00:20:06.000 --> 00:20:08.460
So what you're seeing is a really
clever use of positioning and

00:20:08.470 --> 00:20:12.260
background images to achieve a layout
that was just completely different

00:20:12.260 --> 00:20:15.010
from the previous ones that I showed.

00:20:17.250 --> 00:20:18.580
So now we can go to another design.

00:20:18.580 --> 00:20:23.500
And this one contains an
interesting technique that

00:20:23.500 --> 00:20:25.240
I'm going to talk about next.

00:20:25.260 --> 00:20:29.930
Notice how the headers of the sections,
the text, has gone away,

00:20:30.230 --> 00:20:32.560
and what's there instead are images.

00:20:32.620 --> 00:20:37.700
So somehow the designer of this page,
of the CSS,

00:20:37.700 --> 00:20:40.250
actually managed to get rid of
the text that was in the markup

00:20:40.380 --> 00:20:42.100
and put an image there instead.

00:20:42.120 --> 00:20:43.780
And this is kind of a
really clever trick.

00:20:43.780 --> 00:20:47.880
So what I'm going to do now is
actually talk about how that was done.

00:20:47.880 --> 00:20:50.410
So if we can go back to the slides.

00:20:55.460 --> 00:20:57.950
So this technique is
called image replacement.

00:20:58.220 --> 00:21:00.900
And what image replacement is
is pretty obvious at this point,

00:21:00.900 --> 00:21:01.910
having seen the demo.

00:21:02.110 --> 00:21:04.280
You basically are taking
text in a web page,

00:21:04.540 --> 00:21:06.710
getting rid of it,
and somehow replacing it with an image

00:21:06.710 --> 00:21:08.790
that you specified in the CSS file.

00:21:09.220 --> 00:21:11.480
And there are a lot of different
ways to accomplish this,

00:21:11.480 --> 00:21:14.660
a lot of very sort of clever,
clever hacks that people have come up

00:21:14.660 --> 00:21:16.460
with to use CSS to accomplish this.

00:21:16.460 --> 00:21:18.630
So I'm going to cover some of them.

00:21:19.050 --> 00:21:21.320
And just a reminder,
here's what we're trying to do.

00:21:21.370 --> 00:21:24.460
The original unstyled markup
had just an actual header,

00:21:24.460 --> 00:21:25.880
an H3 element.

00:21:25.920 --> 00:21:28.650
And what we're wanting to do is
actually take that H3 element

00:21:28.660 --> 00:21:30.960
and treat it like an image.

00:21:32.750 --> 00:21:33.840
So what's the point?

00:21:33.870 --> 00:21:37.800
Well, an obvious point, of course,
is multiple themes.

00:21:37.800 --> 00:21:41.140
If you have the restriction that
you can't change the markup,

00:21:41.190 --> 00:21:43.800
but the semantic meaning
of the markup is header,

00:21:43.800 --> 00:21:47.600
what you need to do is somehow get an
image in one design and text in another.

00:21:47.820 --> 00:21:51.360
So in order to support multiple
themes with different looks,

00:21:51.360 --> 00:21:53.810
this technique is a requirement.

00:21:54.220 --> 00:21:56.620
And you also don't have
to change the markup.

00:21:56.720 --> 00:21:59.780
If the structural meaning of the markup,
for example, in this file,

00:21:59.780 --> 00:22:01.160
those headers are headers.

00:22:01.160 --> 00:22:02.050
They're not images.

00:22:02.060 --> 00:22:05.310
If you think of the web page
being displayed unstyled,

00:22:05.550 --> 00:22:07.500
those are headers of subsections.

00:22:07.560 --> 00:22:10.660
So you don't actually want to turn
the markup into image tags because

00:22:10.660 --> 00:22:14.890
that's not actually what the structure
of the website really represents.

00:22:15.080 --> 00:22:16.830
Now, in addition,
image replacement can actually

00:22:16.840 --> 00:22:20.880
save bandwidth because if you
actually have-- say you're using

00:22:20.880 --> 00:22:23.480
a blog article example again,
and you have comment

00:22:23.480 --> 00:22:25.880
and track back links,
and you want to represent

00:22:25.880 --> 00:22:28.270
those as images,
then you might be reusing the

00:22:28.270 --> 00:22:30.840
same image 100 times on the page.

00:22:30.910 --> 00:22:34.370
And with CSS, you'd only specify the
width and height and URL,

00:22:34.410 --> 00:22:37.360
source URL, one time,
whereas with an image tag,

00:22:37.360 --> 00:22:39.990
you'd at least have to specify the
source URL over and over again.

00:22:40.090 --> 00:22:43.680
So there's actually a minor bandwidth
savings from using image replacement

00:22:43.780 --> 00:22:45.970
as well in certain scenarios.

00:22:46.960 --> 00:22:50.490
So just a reminder,
the reason we don't want to put an

00:22:50.490 --> 00:22:52.240
image tag in there is this is a header.

00:22:52.460 --> 00:22:53.620
Semantically, it's a header.

00:22:53.620 --> 00:22:54.720
It is not an image.

00:22:54.750 --> 00:22:56.600
If we were to throw
an image tag in there,

00:22:56.660 --> 00:22:59.050
then now the onus would be on
another designer to hide the

00:22:59.050 --> 00:23:00.980
image and put the text back in.

00:23:01.080 --> 00:23:03.510
So this is not actually what
we're wanting to achieve.

00:23:03.540 --> 00:23:06.220
So we can't change the markup, remember.

00:23:07.450 --> 00:23:11.660
So an amusing trait of these
image replacement techniques

00:23:11.660 --> 00:23:13.990
is web designers like to throw
their names on them like they're

00:23:14.160 --> 00:23:15.740
mathematical theorems or something.

00:23:15.740 --> 00:23:18.700
And with this one,
this one wasn't even invented by

00:23:18.700 --> 00:23:20.440
the person who it's named after.

00:23:20.530 --> 00:23:23.050
In fact,
I'm not even sure who invented it.

00:23:23.060 --> 00:23:26.420
I think Todd Farner is notable
for saying that CSS should have

00:23:26.420 --> 00:23:29.950
a mechanism for doing this,
a simpler one than all of the

00:23:29.950 --> 00:23:32.040
mechanisms that I'm going to show you,
actually.

00:23:32.190 --> 00:23:35.840
So this first technique,
the earliest one,

00:23:35.860 --> 00:23:39.920
is called Farner Image Replacement,
or FIR for short.

00:23:40.000 --> 00:23:45.640
And what it does is it adds an extra span
to the markup in order to hide the text.

00:23:45.710 --> 00:23:50.480
So you can see that the H3 header
has had a span placed inside it.

00:23:50.560 --> 00:23:53.790
And then what we've done is using CSS,
we've set the display to none,

00:23:54.130 --> 00:23:58.470
which effectively hides the text
and makes it not be rendered at all.

00:23:58.680 --> 00:24:01.290
And then what we've done is taken
the header itself and changed

00:24:01.290 --> 00:24:03.880
its width and height to match the
width and height of the image.

00:24:04.010 --> 00:24:07.720
And then we just have put the image in
as a background image on the header.

00:24:07.770 --> 00:24:10.040
So basically we ditch the text,
resize the header,

00:24:10.040 --> 00:24:14.340
and put a background image on it to
just make it look like just the image.

00:24:14.340 --> 00:24:15.340
So that's the trick.

00:24:15.450 --> 00:24:17.480
Now there's, of course,
a very obvious problem

00:24:17.480 --> 00:24:19.140
with this technique.

00:24:19.140 --> 00:24:22.780
I just preached that we didn't want to
pollute the markup with unneeded tags

00:24:22.810 --> 00:24:25.280
whose sole purpose was for presentation.

00:24:25.330 --> 00:24:26.430
And that's what we just did.

00:24:26.490 --> 00:24:29.500
So a problem with this technique
is it pollutes the markup with that

00:24:29.500 --> 00:24:31.750
span that you really shouldn't need.

00:24:31.920 --> 00:24:34.560
It's also not accessible
to screen readers.

00:24:34.560 --> 00:24:38.810
Because Display None is used to actually
just get rid of the text completely,

00:24:38.810 --> 00:24:42.260
accessibility devices like screen
readers won't be able to find the text,

00:24:42.260 --> 00:24:45.300
and they won't be able to speak it aloud.

00:24:45.380 --> 00:24:47.250
And then in addition,
this technique doesn't work

00:24:47.320 --> 00:24:50.100
in browsers that support the
ability to turn images off.

00:24:50.100 --> 00:24:53.320
Because if the image turns off,
all you've done is made the background

00:24:53.330 --> 00:24:55.930
image of this header go away,
and the text is still gone.

00:24:55.940 --> 00:24:56.980
You've still hidden the text.

00:24:56.980 --> 00:24:59.160
So if you turn images off,
you just won't see anything.

00:24:59.210 --> 00:25:00.760
So ideally,
what you'd like is a technique

00:25:00.870 --> 00:25:05.580
that actually shows you the text
again when you turn the images off.

00:25:06.010 --> 00:25:09.500
So here's another second amusingly
named image replacement technique,

00:25:09.640 --> 00:25:11.540
FARC image replacement.

00:25:11.540 --> 00:25:12.720
And this one-- Is that his real name?

00:25:12.870 --> 00:25:13.210
What was that?

00:25:13.520 --> 00:25:14.010
Is that his real name?

00:25:14.090 --> 00:25:14.700
That is his real name.

00:25:16.070 --> 00:25:16.330
OK.

00:25:16.580 --> 00:25:20.220
And what FargImage Replacement does
is actually manages to get rid of

00:25:20.220 --> 00:25:22.630
the span with another clever hack.

00:25:22.670 --> 00:25:28.650
And like the other replacement technique,
it sizes the header to the width

00:25:28.710 --> 00:25:30.860
and height of the image and puts
it down as a background image.

00:25:30.860 --> 00:25:33.860
But what it does with the
text is instead of hiding it,

00:25:33.860 --> 00:25:36.420
it uses a CSS property
called text indent.

00:25:36.420 --> 00:25:38.910
And you would think that you'd
be shoving the text to the right,

00:25:38.910 --> 00:25:41.650
but for some reason what the hack
does is shoves the text to the left.

00:25:41.780 --> 00:25:43.540
Very, very, very far to the left.

00:25:43.730 --> 00:25:45.590
Negative 5,000 pixels, in fact.

00:25:46.360 --> 00:25:49.280
And what that does is basically
makes the text render way,

00:25:49.280 --> 00:25:51.460
way, way off to the left, off-screen.

00:25:51.460 --> 00:25:54.750
But then furthermore, you can add this
overflow hidden property,

00:25:54.750 --> 00:25:58.120
which tells browsers to clip
anything that's outside your box.

00:25:58.120 --> 00:26:01.690
So what happens is the text gets shoved
way out to the left and then clipped.

00:26:03.440 --> 00:26:05.740
So the nice thing about this
technique is it avoids having

00:26:05.740 --> 00:26:08.520
an extra span in the markup.

00:26:08.550 --> 00:26:10.280
And this one works with screen readers.

00:26:10.330 --> 00:26:13.400
Because the text is still there,
just shoved way off

00:26:13.480 --> 00:26:15.960
into a wacky position,
the screen reader can still find it,

00:26:15.960 --> 00:26:18.500
and therefore it can still speak it.

00:26:18.700 --> 00:26:20.940
So the nice thing about this
technique is it avoids having

00:26:20.940 --> 00:26:23.720
an extra span in the markup.

00:26:23.720 --> 00:26:25.480
And this one works with screen readers.

00:26:25.480 --> 00:26:28.680
Because the text is still there,
just shoved way off

00:26:28.680 --> 00:26:31.160
into a wacky position,
the screen reader can still find it,

00:26:31.260 --> 00:26:33.520
and therefore it can still speak it.

00:26:40.960 --> 00:26:45.160
So this one is similar to the FARC one,
but will work with images off.

00:26:45.200 --> 00:26:49.970
And the way it does this is instead of
shoving the text far out to the left

00:26:50.260 --> 00:26:54.160
and instead of using a background image,
what it does instead is creates

00:26:54.200 --> 00:26:55.920
a piece of generated content.

00:26:55.950 --> 00:26:58.740
This is a feature of CSS 2.1.

00:26:58.740 --> 00:27:02.540
And so this generated content is done
using the second rule on the slide.

00:27:02.560 --> 00:27:07.610
And so by making an actual image
as a piece of content that actually

00:27:07.740 --> 00:27:11.160
gets put inside the header,
when you turn images off,

00:27:11.180 --> 00:27:14.520
that content will go away and
the text will get pulled back up.

00:27:14.530 --> 00:27:17.890
So the idea was to make the image
sort of participate in layout and

00:27:17.920 --> 00:27:21.360
actually go away-- when it goes away,
actually have it affect

00:27:21.360 --> 00:27:22.440
the layout of the text.

00:27:22.470 --> 00:27:26.960
So this example will work in Safari,
Mozilla, and Opera, I believe,

00:27:26.960 --> 00:27:28.680
in the latest versions.

00:27:28.690 --> 00:27:31.400
And it avoids having an
extra span in the markup,

00:27:31.410 --> 00:27:35.400
works with images off,
and works with screen readers.

00:27:36.350 --> 00:27:40.830
So another neat technique that is used
on the Zingarden site that I'm going to

00:27:40.920 --> 00:27:43.980
cover is the sliding doors technique.

00:27:44.020 --> 00:27:48.760
Now, this is a neat CSS trick for
making tabbed user interfaces.

00:27:48.780 --> 00:27:53.120
You can also use it to make rounded,
for example, Aqua-style buttons.

00:27:53.280 --> 00:27:58.090
And the idea is to make these elements
such that they still have foreground

00:27:58.380 --> 00:28:01.340
text that you could select conceivably
or that's actual text that's

00:28:01.340 --> 00:28:03.440
accessible to screen readers as well.

00:28:03.440 --> 00:28:07.680
So these tabs can also
participate in text zoom as well.

00:28:07.740 --> 00:28:10.540
And this technique was
invented by a web designer,

00:28:10.540 --> 00:28:11.950
Doug Bowman.

00:28:11.990 --> 00:28:17.190
And you can read much more about
this technique on a list of part.com.

00:28:17.600 --> 00:28:21.600
And so I've got an image up here
that is the layout that we're going

00:28:21.600 --> 00:28:24.920
to try to achieve just using CSS.

00:28:25.090 --> 00:28:27.080
So we're going to start with some markup.

00:28:27.080 --> 00:28:31.060
We're just going to start with
a unordered list of links.

00:28:31.180 --> 00:28:33.860
And we're going to take
that simple unordered list,

00:28:33.920 --> 00:28:36.240
and we're going to turn
it into a set of tabs.

00:28:36.240 --> 00:28:39.640
So these are just like the links that
you might have in a typical nav bar going

00:28:39.640 --> 00:28:42.530
to various subsections of your website.

00:28:43.960 --> 00:28:47.720
So the concept is that each tab is
going to use two background images,

00:28:47.770 --> 00:28:50.130
one on the list item and
one on the anchor that was

00:28:50.130 --> 00:28:52.530
inside the list item markup.

00:28:52.710 --> 00:28:55.840
And the idea is like sliding doors,
the images are going

00:28:55.840 --> 00:28:57.580
to go over one another.

00:28:57.580 --> 00:29:00.150
And the narrower the space,
the more the two images are

00:29:00.150 --> 00:29:01.450
going to actually overlap.

00:29:01.670 --> 00:29:05.920
And then the wider the text on the tab,
the less the images will overlap.

00:29:06.000 --> 00:29:10.770
So you can see this idea
with some images here.

00:29:10.860 --> 00:29:13.210
Now, on the images on the left,
you can sort of see the

00:29:13.210 --> 00:29:14.430
concept of overlapping.

00:29:14.440 --> 00:29:16.910
You know, the narrower the text,
smaller the text,

00:29:16.990 --> 00:29:17.970
the more they'll overlap.

00:29:17.980 --> 00:29:20.730
And then the wider the text, the less.

00:29:20.830 --> 00:29:23.380
And in the images on the right,
what we're doing is

00:29:23.380 --> 00:29:24.710
using background images.

00:29:24.990 --> 00:29:28.180
And background images are always only
drawn within your element's bounds.

00:29:28.410 --> 00:29:31.630
So the idea is that you make these
really large background images,

00:29:31.650 --> 00:29:35.760
and you'll just expose more and
more of them in sort of the visible

00:29:36.140 --> 00:29:41.490
doorway as you do text zoom or
as you have wider or taller text.

00:29:43.330 --> 00:29:46.350
So the idea,
the easy way to do this is to make the

00:29:46.350 --> 00:29:50.830
left image narrow and then have the right
image be the rest of the background.

00:29:50.840 --> 00:29:53.750
So you sort of do the left
edge that you want to achieve,

00:29:53.750 --> 00:29:56.020
and then all of the rest,
the right edge plus

00:29:56.020 --> 00:29:59.480
your background pattern,
goes into the second image.

00:29:59.510 --> 00:30:03.080
So you can see how you can use this
technique to do aqua-style buttons

00:30:03.080 --> 00:30:05.180
or sort of rounded buttons as well.

00:30:05.620 --> 00:30:07.740
And the idea is that the right
image is going to be the one that

00:30:07.740 --> 00:30:09.400
slides behind the left image.

00:30:09.470 --> 00:30:11.810
And that'll just happen naturally
by virtue of the fact that the

00:30:11.810 --> 00:30:14.060
anchor is a child of the list item.

00:30:14.100 --> 00:30:16.420
Or sorry, that the-- yeah, exactly.

00:30:16.420 --> 00:30:20.290
And then the wider the tab,
the less the two images will overlap.

00:30:20.420 --> 00:30:23.790
And you want your images to be
tall enough to accommodate the

00:30:23.880 --> 00:30:28.150
maximal text zoom in browsers,
which is typically about 300%.

00:30:28.250 --> 00:30:31.790
And then you want the right image
to be wide enough to accommodate

00:30:31.790 --> 00:30:34.600
the degree-- you always want the
two images to at least overlap.

00:30:34.630 --> 00:30:38.290
So your background image should be wide
enough to accommodate the maximal width

00:30:38.290 --> 00:30:40.500
of text you're going to put on the tab.

00:30:42.650 --> 00:30:49.650
So here's a lot of CSS that sort of
just is housekeeping to set up the

00:30:49.650 --> 00:30:55.330
lists as objects that sit horizontally
and don't have bullets anymore.

00:30:55.430 --> 00:30:59.670
And the relevant piece for the sliding
door technique is the background URL.

00:30:59.770 --> 00:31:04.220
So you can see with the background URL,
what we've done is specified the image.

00:31:04.270 --> 00:31:06.330
And we've also said the
image should not be tiled,

00:31:06.330 --> 00:31:08.700
because we don't want
it to repeat itself.

00:31:08.770 --> 00:31:11.200
And for the list item,
the image should be anchored

00:31:11.200 --> 00:31:12.380
at the right and the top.

00:31:12.600 --> 00:31:14.590
So you can think of it as
being anchored on the right and

00:31:14.590 --> 00:31:17.030
then spilling out to the left.

00:31:17.670 --> 00:31:20.490
And those of you with high-powered
binoculars in the audience can take a

00:31:20.490 --> 00:31:23.680
look at what we have so far on the slide.

00:31:23.860 --> 00:31:27.070
So now we add the second
image to the anchors.

00:31:27.740 --> 00:31:30.490
And this is like the other one,
only we're going to anchor it

00:31:30.550 --> 00:31:33.440
to the left and to the top,
and also set it to not repeat.

00:31:33.550 --> 00:31:36.840
Because remember, this image is narrow,
so we don't want it tiling

00:31:36.840 --> 00:31:38.890
on top of the right image.

00:31:39.330 --> 00:31:42.300
And so the anchor has this left image,
and it's going to slide over the

00:31:42.300 --> 00:31:44.390
background image of the list item.

00:31:44.510 --> 00:31:48.410
And once we add this rule,
what we have now looks

00:31:48.480 --> 00:31:50.730
very much like tabs.

00:31:50.800 --> 00:31:53.530
And so now what we're going
to do is switch to a demo and

00:31:53.530 --> 00:31:57.240
show you these tabs in action,
so you can see what they look like.

00:32:03.410 --> 00:32:05.880
So what you can do is zoom the tabs.

00:32:05.900 --> 00:32:08.990
We can see that they work with text zoom.

00:32:10.430 --> 00:32:12.630
And one thing that we're
missing is we don't really

00:32:12.680 --> 00:32:15.080
have a notion of a current tab.

00:32:15.080 --> 00:32:17.190
All the tabs look the
same when in reality,

00:32:17.200 --> 00:32:18.600
you know,
you're always on some particular

00:32:18.600 --> 00:32:20.010
subsection of the site.

00:32:20.120 --> 00:32:24.040
So we can show you how you can use
the sliding doors trick to actually

00:32:24.040 --> 00:32:26.780
add the notion of a current tab.

00:32:29.640 --> 00:32:33.530
And what you can see is you
can basically add rules that,

00:32:33.580 --> 00:32:35.560
again,
just use the sliding doors technique

00:32:35.640 --> 00:32:40.360
to add a different set of background
images for the Current tab.

00:32:40.370 --> 00:32:42.200
And when we do that--

00:32:43.090 --> 00:32:46.980
And what you can see is you
can basically add rules that,

00:32:46.980 --> 00:32:48.680
again,
just use the sliding doors technique

00:32:49.000 --> 00:32:52.590
to add a different set of background
images for the Current tab.

00:32:53.430 --> 00:32:55.720
So that's sliding doors.

00:32:55.810 --> 00:32:57.800
It's a very, very simple technique.

00:32:57.810 --> 00:33:01.190
Now in addition,
what we can do is-- I'm going to put in

00:33:01.270 --> 00:33:03.320
a shameless plug for HTML editing here.

00:33:03.340 --> 00:33:06.330
So what we're going to do is actually
demonstrate content editable and show

00:33:06.330 --> 00:33:10.100
how we can actually edit the current tab.

00:33:12.580 --> 00:33:13.920
And again,
this is sort of just demonstrating

00:33:13.920 --> 00:33:20.430
that it's all a dynamic layout and that
everything will flow as you're editing.

00:33:29.400 --> 00:33:31.400
All right,
so now we can go back to the slides.

00:33:31.400 --> 00:33:40.690
So the CSS in Garden is a great site.

00:33:40.760 --> 00:33:42.670
I encourage you to check it out.

00:33:42.820 --> 00:33:45.230
Here is the URL that you can go to.

00:33:45.280 --> 00:33:48.210
And there are hundreds of
designs there at this point.

00:33:48.220 --> 00:33:53.410
And it's basically-- especially if you're
wanting to design dashboard widgets,

00:33:53.560 --> 00:33:54.970
look at these, study this stuff.

00:33:55.200 --> 00:33:57.320
Because all of these creative techniques,
all of these things

00:33:57.320 --> 00:34:00.100
that these designers do,
you can do in your dashboard widgets.

00:34:00.140 --> 00:34:01.980
So check it out.

00:34:02.000 --> 00:34:05.130
In addition, there's a great website
called a listapart.com.

00:34:05.340 --> 00:34:09.660
It's essentially an online magazine that
regularly publishes articles on CSS.

00:34:09.660 --> 00:34:13.040
And that's where the content of this
sliding doors section came from.

00:34:13.040 --> 00:34:16.130
And since the first
sliding doors article,

00:34:16.140 --> 00:34:18.770
Doug Bowman's actually
even published a follow-up.

00:34:18.960 --> 00:34:21.650
So I highly encourage you to
check out a listapart.com and

00:34:21.650 --> 00:34:24.620
learn more about this technique.

00:34:26.230 --> 00:34:29.120
So now that we've talked about
more basic styling techniques

00:34:29.160 --> 00:34:32.400
that work in all browsers,
let's start getting towards the edge

00:34:32.400 --> 00:34:35.570
of standards and talk about some cool
CSS3 stuff that you can really use

00:34:35.570 --> 00:34:38.000
in WebKit to spice up your web pages.

00:34:38.030 --> 00:34:41.440
Now, one that's become quite popular on
the web since we introduced it in

00:34:41.440 --> 00:34:44.880
Safari 1.2 is the text shadow property.

00:34:44.880 --> 00:34:47.820
And this property was
actually originally in CSS2.

00:34:47.840 --> 00:34:50.620
No one implemented it,
except Safari got it in right

00:34:50.670 --> 00:34:53.200
before CSS2.1 became a standard.

00:34:53.290 --> 00:34:55.380
But unfortunately,
it was not in time for them

00:34:55.380 --> 00:34:56.440
to actually put it back in.

00:34:56.450 --> 00:34:59.820
So it'll be returning in CSS3.

00:34:59.930 --> 00:35:03.000
So I'm effectively going to
consider it a CSS3 property,

00:35:03.000 --> 00:35:05.200
despite it having been
around for a while.

00:35:05.320 --> 00:35:09.930
But what it does is lets you add
really neat shadow effects to text.

00:35:10.140 --> 00:35:13.780
And a shadow consists of three
components-- the color of the

00:35:13.800 --> 00:35:16.680
shadow text that's going to
be behind the regular text,

00:35:16.790 --> 00:35:20.730
an offset, which represents the distance,
the x and y distance of the

00:35:20.830 --> 00:35:23.970
shadow from the original text,
and then a blur radius,

00:35:23.970 --> 00:35:28.000
which is sort of a fuzz or distortion
that you can apply to the shadow.

00:35:28.030 --> 00:35:31.860
And the higher the blur radius,
the more diffuse the shadow will be.

00:35:32.700 --> 00:35:35.560
So here's a nifty text shadow
example that's showing one

00:35:35.560 --> 00:35:36.900
trick you can do with shadows.

00:35:36.900 --> 00:35:38.630
This is an eclipse effect.

00:35:38.840 --> 00:35:42.960
And what I've done is made a
red text shadow on the body,

00:35:42.960 --> 00:35:46.280
offset by four pixels,
and then with a small blur radius.

00:35:46.380 --> 00:35:50.520
And the foreground text is black,
and the background text is black.

00:35:50.780 --> 00:35:53.670
But because there's a shadow,
you get this sort of eclipse effect

00:35:53.760 --> 00:35:57.430
where the text is readable because
the shadow is what's drawing.

00:35:57.570 --> 00:36:00.200
So this is just one of the nifty
creative uses of text shadow.

00:36:00.430 --> 00:36:05.000
You can also use it more traditionally
in text where the foreground color

00:36:05.000 --> 00:36:06.600
does not match the background.

00:36:06.660 --> 00:36:09.010
But this is a really great,
simple declarative way to make

00:36:09.010 --> 00:36:11.080
text look better in your web pages.

00:36:11.330 --> 00:36:14.540
And if a browser doesn't support it,
no harm's done.

00:36:14.580 --> 00:36:16.690
It'll degrade gracefully.

00:36:18.030 --> 00:36:21.800
Another great CSS3 feature that
Safari has rich support for is

00:36:21.800 --> 00:36:24.670
transparency and transparency effects.

00:36:24.800 --> 00:36:28.890
Now, this is basically the ability
to make elements in your page

00:36:28.900 --> 00:36:32.400
partially transparent so that
you can see what's behind them.

00:36:32.540 --> 00:36:35.500
Now, there is currently a cross-browser
way of achieving this,

00:36:35.610 --> 00:36:39.960
and by cross-browser I mean in every
modern browser except for WinIE.

00:36:40.150 --> 00:36:43.120
And this is,
you can do this with transparent pings,

00:36:43.320 --> 00:36:46.890
which are images that can
incorporate alpha channels.

00:36:47.850 --> 00:36:50.290
And so that's a way of -- that's
a safe way -- I should just say

00:36:50.290 --> 00:36:52.640
that up front -- that's a way of
at least achieving transparency

00:36:52.640 --> 00:36:55.100
that will work in more browsers.

00:36:55.160 --> 00:36:57.820
Now,
there's some more lightweight mechanisms,

00:36:57.820 --> 00:37:00.720
though, that can prevent you from
having to make images just to

00:37:00.720 --> 00:37:02.770
achieve transparent effects.

00:37:02.880 --> 00:37:04.840
I'm going to talk about two of those.

00:37:04.890 --> 00:37:09.600
One is RGBA colors,
and the second is opacity.

00:37:10.210 --> 00:37:15.580
So RGBA colors are basically just a
color specified as four components,

00:37:15.720 --> 00:37:20.260
a red, green, and blue component,
and then additionally an alpha value.

00:37:20.320 --> 00:37:23.420
And the syntax looks kind
of like a function in CSS.

00:37:23.420 --> 00:37:28.550
You basically say RGBA, parentheses,
and then in a comma-separated list,

00:37:29.060 --> 00:37:33.200
you enter the red, green,
and blue values and the alpha.

00:37:34.100 --> 00:37:40.360
And the RGB values range from 0 to 255,
but the alpha value goes from 0 to 1.0,

00:37:40.390 --> 00:37:44.250
with 1.0 being fully opaque
and 0 being fully transparent.

00:37:44.440 --> 00:37:46.640
So if you make the
object fully transparent,

00:37:46.660 --> 00:37:48.590
you won't see it at all.

00:37:51.700 --> 00:37:54.820
So here are some examples of RGBA colors.

00:37:54.880 --> 00:37:57.890
And I've basically put this up
here to demonstrate that everywhere

00:37:57.890 --> 00:38:00.610
you can use a color in CSS,
in WebKit,

00:38:00.660 --> 00:38:02.850
you can use these transparent colors.

00:38:03.100 --> 00:38:06.130
So this is a great way to apply
transparency only to particular

00:38:06.280 --> 00:38:07.440
portions of your content.

00:38:07.710 --> 00:38:10.250
In particular,
you can make the foreground

00:38:10.250 --> 00:38:12.640
text red and 50% opaque.

00:38:12.680 --> 00:38:15.780
Or maybe you want to make only your
borders transparent while the rest of

00:38:15.780 --> 00:38:17.360
your element remains non-transparent.

00:38:17.610 --> 00:38:21.040
Maybe you have a border and you want the
background to show up behind the border.

00:38:21.100 --> 00:38:25.600
So that's a nifty visual effect you can
achieve by using transparent borders.

00:38:25.600 --> 00:38:27.680
In addition,
you can make a background transparent.

00:38:27.680 --> 00:38:31.540
Just use a transparent background color
to get the content behind to show up.

00:38:31.580 --> 00:38:33.850
And then finally,
you can even use opacity

00:38:33.850 --> 00:38:34.960
with text shadow.

00:38:35.020 --> 00:38:39.790
So you can actually make the
shadow itself even be transparent.

00:38:42.260 --> 00:38:45.990
But the really cool
CSS3 feature is Opacity.

00:38:46.050 --> 00:38:49.170
And Opacity is a way to
basically make your element,

00:38:49.230 --> 00:38:52.740
all its descendants,
all be transparent as a unit.

00:38:53.100 --> 00:38:56.810
So background borders and your
children all can become partially

00:38:56.880 --> 00:38:59.600
transparent with one simple declaration.

00:39:00.660 --> 00:39:03.600
So for example, if you wanted to make all
of your articles 30% opaque,

00:39:03.600 --> 00:39:05.600
this is all you'd have to do.

00:39:05.610 --> 00:39:10.070
It's just a single property with a
value that ranges between 0 and 1,

00:39:10.150 --> 00:39:13.150
just like the alpha
value in the RGBA colors.

00:39:14.140 --> 00:39:17.580
So now what I'm going to show you,
we spent a lot of time talking about CSS,

00:39:17.780 --> 00:39:19.930
so now let's combine this with the DOM.

00:39:20.190 --> 00:39:22.310
I talked earlier about how
the DOM was a great mechanism

00:39:22.310 --> 00:39:24.650
for achieving dynamic effects.

00:39:24.830 --> 00:39:28.260
So what we can actually do is
take the support for opacity in

00:39:28.260 --> 00:39:32.720
modern browsers and use DOM and
JavaScript to create fade effects

00:39:32.720 --> 00:39:36.700
when switching between our sliding
doors tabs in the previous example.

00:39:36.840 --> 00:39:39.320
And what's even better is we can
write this to degrade gracefully in

00:39:39.330 --> 00:39:43.690
those browsers that are unfortunate
enough not to support opacity.

00:39:43.790 --> 00:39:46.640
And this example I'm about to
show you works in both Safari and

00:39:46.640 --> 00:39:49.290
in the latest Mozilla 1.7.

00:39:51.390 --> 00:39:54.170
So let's walk through how
we add these fade effects.

00:39:54.350 --> 00:39:57.730
Well, the first thing we want to do is
add a handler to the links such

00:39:57.740 --> 00:40:00.600
that when you click the link,
we're going to call a

00:40:00.600 --> 00:40:03.430
function to begin our fade,
to begin our fade out.

00:40:03.530 --> 00:40:06.660
So that's just done with a simple
onClick handler attached to the links.

00:40:06.710 --> 00:40:10.610
And what we're going to do is assume that
the content of the web page underneath

00:40:10.610 --> 00:40:12.660
the tabs is in a div whose ID is content.

00:40:12.670 --> 00:40:16.490
And that's what we're going to operate
on as we do the fade out effect.

00:40:20.210 --> 00:40:24.200
So what we have here is first
we decided the fade is not

00:40:24.260 --> 00:40:25.160
going to be interruptible.

00:40:25.160 --> 00:40:27.860
So we're going to track that
with a fade in progress Boolean.

00:40:27.860 --> 00:40:31.360
And if that's already true when
the user clicks on a link for,

00:40:31.360 --> 00:40:33.980
say, a second time,
we'll just return false,

00:40:34.010 --> 00:40:37.000
which indicates to browsers that
you shouldn't follow the link.

00:40:37.000 --> 00:40:40.240
So that'll basically ensure that
if a fade out is in progress,

00:40:40.240 --> 00:40:44.580
we don't stop it and start it
again and visually stutter.

00:40:45.290 --> 00:40:48.010
And then what we're going
to do is actually a check,

00:40:48.150 --> 00:40:50.800
basically a check to see if
the browser supports opacity.

00:40:50.920 --> 00:40:53.180
So what we do is we get
our content element,

00:40:53.250 --> 00:40:56.910
and we just try to set its
opacity to be fully opaque.

00:40:57.080 --> 00:40:59.170
and if that fails,
essentially if we then query

00:40:59.250 --> 00:41:02.190
for the style that we set and
we get the empty string back,

00:41:02.190 --> 00:41:06.360
we can return true, follow the link,
and assume that opacity is not supported.

00:41:06.430 --> 00:41:09.660
But if you're using Safari in Mozilla,
we can keep going.

00:41:09.720 --> 00:41:14.210
So what we then do is set
the fade in progress to true.

00:41:14.420 --> 00:41:19.330
And we set a timeout to continue the
fade with a 25 millisecond value.

00:41:19.500 --> 00:41:22.100
So what this means is
we'll get a callback very,

00:41:22.100 --> 00:41:25.760
very shortly that will allow us
to start doing the dynamic effect.

00:41:25.840 --> 00:41:29.500
And another minor note here is we've
also made this slick enough that if

00:41:29.550 --> 00:41:33.270
the user changes his or her mind about
what anchor they wanted to click on,

00:41:33.440 --> 00:41:35.970
if the fade's in progress,
note that we update the

00:41:35.970 --> 00:41:37.440
current anchor always.

00:41:37.520 --> 00:41:40.310
So that always ensures that the
fade effect will just continue,

00:41:40.310 --> 00:41:45.010
and then you'll always go to the
last anchor that the user clicked.

00:41:45.640 --> 00:41:48.020
And now, finally,
we return false to indicate that we

00:41:48.060 --> 00:41:52.470
can't follow the link yet because we're
going to be doing the fade-out effect.

00:41:53.300 --> 00:41:56.290
So now let's look at the
continue fade function.

00:41:56.380 --> 00:41:57.110
So this is very simple.

00:41:57.130 --> 00:41:59.300
We start off with our
current opacity at 1.

00:41:59.340 --> 00:42:04.550
We're going to decide that we're going
to fade out in basically 2% increments.

00:42:04.660 --> 00:42:08.100
So we subtract 2% from
the opacity effectively.

00:42:08.140 --> 00:42:12.050
And if this puts us below 0,
at or below 0, we're done.

00:42:12.060 --> 00:42:17.500
So we set our Windows current
location to be the href of the anchor,

00:42:17.500 --> 00:42:20.390
the last anchor that the user clicked.

00:42:20.800 --> 00:42:31.000
[Transcript missing]

00:42:31.280 --> 00:42:33.280
And then we set a timeout
to keep continuing the fade.

00:42:33.280 --> 00:42:36.480
So we'll just keep getting called
back and fading out further and

00:42:36.480 --> 00:42:38.710
further until we're finished.

00:42:38.890 --> 00:42:42.070
So now let's see a demo of
this fade effect in action.

00:42:43.780 --> 00:42:46.900
So what you can see here is we've
got the same sliding door tabs,

00:42:46.900 --> 00:42:50.640
but now when you click on the home link,
you'll see this really

00:42:50.790 --> 00:42:51.980
neat fade-out effect.

00:42:52.050 --> 00:42:54.900
And then if you click
back on the news link,

00:42:54.950 --> 00:42:55.460
again, you see.

00:42:55.460 --> 00:42:59.510
So very, very slick, very, very simple,
and it just adds some visual

00:42:59.510 --> 00:43:01.380
spice to the web page.

00:43:01.570 --> 00:43:04.390
And a user in a browser that
doesn't support Opacity will

00:43:04.390 --> 00:43:07.220
never know that it wasn't there.

00:43:07.280 --> 00:43:10.510
All right,
so we can go back to the slides.

00:43:17.420 --> 00:43:20.890
So here's another new CSS3
property that we now support

00:43:20.900 --> 00:43:25.120
as of the latest WebKit beta,
and that's support for text truncation.

00:43:25.140 --> 00:43:29.220
So instead of clipping text
when it spills outside of a box,

00:43:29.240 --> 00:43:32.690
we can actually now render
an ellipsis instead.

00:43:32.800 --> 00:43:36.420
And this is done with a new CSS3
property called TextOverflow.

00:43:36.550 --> 00:43:40.760
And TextOverflow takes two values,
clip and ellipsis.

00:43:40.760 --> 00:43:42.950
So clip is essentially
the default behavior,

00:43:43.130 --> 00:43:46.140
but you can actually change
this to ellipsis to achieve

00:43:46.140 --> 00:43:47.990
the truncation effect.

00:43:48.930 --> 00:43:51.360
And the basic idea,
the common way that you'll

00:43:51.360 --> 00:43:54.200
use this sort of thing is when
you have single line headers,

00:43:54.250 --> 00:43:57.500
or maybe even URLs-- URLs are
another good example-- where you

00:43:57.500 --> 00:43:59.720
would like them to stay on one line.

00:43:59.830 --> 00:44:02.340
And you don't want to have some
ugly visual rendering where they

00:44:02.360 --> 00:44:04.520
spill over the rest of your content.

00:44:04.520 --> 00:44:08.240
So what you do-- there's basically
three very relevant properties here,

00:44:08.240 --> 00:44:10.050
not just text overflow.

00:44:10.300 --> 00:44:11.950
For one thing,
you could already have done

00:44:12.010 --> 00:44:17.340
overflow hidden to make sure that,
say, a long URL was clipped so that

00:44:17.340 --> 00:44:20.080
it didn't paint on top of other
content that you didn't want it to.

00:44:20.080 --> 00:44:22.540
So that's a good thing
to just do in general,

00:44:22.540 --> 00:44:24.420
like, say,
with the content section of a website,

00:44:24.480 --> 00:44:27.380
to keep the things in the
content from spilling out onto,

00:44:27.380 --> 00:44:30.650
say, your blog roll or your sidebars.

00:44:30.700 --> 00:45:19.900
[Transcript missing]

00:45:21.400 --> 00:45:25.420
So I've covered basic styling
techniques and then even gotten into

00:45:25.530 --> 00:45:27.410
cutting edge techniques in CSS3.

00:45:27.770 --> 00:45:31.840
Now let's sort of leap into the realm of
dashboard and WebKit and see what we've

00:45:31.910 --> 00:45:34.160
done that's gone beyond the standards.

00:45:34.410 --> 00:45:36.830
So one thing that we've done
is we've added two new form

00:45:36.860 --> 00:45:38.900
controls that you can use.

00:45:38.900 --> 00:45:41.550
And those are sliders and search fields.

00:45:41.870 --> 00:45:44.700
And we've exposed those as
form controls in a web page.

00:45:44.770 --> 00:45:47.190
Just like all the other form controls,
they can be submitted,

00:45:47.200 --> 00:45:49.390
their values can be queried and set.

00:45:49.590 --> 00:45:52.900
And this gives you richer
widget capabilities.

00:45:52.980 --> 00:45:57.240
In addition, I encourage you to attend
the WebKit session tomorrow,

00:45:57.430 --> 00:46:01.250
where Richard Williamson will be
covering the advanced graphics effects

00:46:01.350 --> 00:46:03.340
that we've added for Dashboard.

00:46:03.340 --> 00:46:06.910
And those include image compositing,
where we've added a new composite

00:46:06.910 --> 00:46:10.320
attribute to the image element to
allow you to achieve more advanced

00:46:10.320 --> 00:46:13.160
compositing effects with images.

00:46:13.180 --> 00:46:15.510
And in addition,
we've added a new canvas element to

00:46:15.510 --> 00:46:18.880
HTML that lets you do programmatic
two-dimensional drawing,

00:46:18.910 --> 00:46:21.210
like lines and fills.

00:46:22.500 --> 00:46:24.670
In addition,
there's a lot of new advanced

00:46:24.790 --> 00:46:26.700
layout capabilities in Safari.

00:46:26.700 --> 00:46:30.550
It has a complete spring and strut
implementation that's also implemented

00:46:30.550 --> 00:46:35.200
by Mozilla that allows you to achieve
a lot of layouts that are currently not

00:46:35.200 --> 00:46:39.240
achievable in CSS and that are considered
quite difficult by web designers,

00:46:39.650 --> 00:46:45.310
like the ability to easily center
elements in the center of a viewport.

00:46:46.230 --> 00:46:48.420
In addition,
there's a lot of new advanced

00:46:48.430 --> 00:46:50.400
layout capabilities in Safari.

00:46:50.400 --> 00:46:54.250
It has a complete spring and strut
implementation that's also implemented

00:46:54.250 --> 00:46:58.900
by Mozilla that allows you to achieve
a lot of layouts that are currently not

00:46:58.900 --> 00:47:03.020
achievable in CSS and that are considered
quite difficult by web designers,

00:47:03.020 --> 00:47:08.880
like the ability to easily center
elements in the center of a viewport.

00:47:09.270 --> 00:47:13.250
And finally, the big feature of
WebKit is HTML editing.

00:47:13.520 --> 00:47:17.800
And that includes both editing of entire
web views from WebKit applications

00:47:17.800 --> 00:47:21.540
and the ability to do in-page web
editing using Content Editable.

00:47:21.780 --> 00:47:26.450
So to find out all about HTML editing,
I highly encourage you attend

00:47:26.720 --> 00:47:29.690
the talk that's vaguely named
Advanced WebKit Features on Friday.

00:47:29.940 --> 00:47:32.620
That talk's actually going
to be all about HTML editing,

00:47:32.620 --> 00:47:37.120
as well as showing you how to
use the DOM API from Objective-C.

00:47:38.740 --> 00:47:42.060
So let's cover some of
these new form controls.

00:47:42.100 --> 00:47:47.140
So the way you do a slider is
with input type equals range.

00:47:47.480 --> 00:47:50.620
So that's all you have to
do to introduce a slider.

00:47:50.670 --> 00:47:53.930
Whether or not it will be horizontal
or vertical will depend on whether

00:47:53.930 --> 00:47:56.460
you make the width or height larger.

00:47:56.460 --> 00:48:00.870
Which dimension is larger will
control the orientation of the slider.

00:48:01.000 --> 00:48:04.670
There are attributes called min and
max that set the range of the slider.

00:48:05.480 --> 00:48:08.230
There's a precision attribute that
allows you to specify whether you

00:48:08.230 --> 00:48:11.740
want the slider to report float
values by default or integer.

00:48:11.810 --> 00:48:14.120
If you basically make it
report integer values,

00:48:14.120 --> 00:48:17.240
it'll always lock to an integer value,
even though you're doing

00:48:17.240 --> 00:48:18.900
continuous slider dragging.

00:48:19.490 --> 00:48:21.600
And then, of course,
the value attribute that nearly all

00:48:21.600 --> 00:48:26.240
of the form controls support can be
used to query for the value and set it.

00:48:26.290 --> 00:48:30.470
And this slider can participate in form
submission by submitting its value.

00:48:31.380 --> 00:48:34.340
In addition,
we've added support for the input event.

00:48:34.400 --> 00:48:37.300
This is an event also
supported by Mozilla.

00:48:37.360 --> 00:48:40.300
And we've added it not only
to sliders but to text fields.

00:48:40.300 --> 00:48:43.560
And this event fires
immediately when you're typing.

00:48:43.600 --> 00:48:46.020
And for sliders, it fires immediately
when you're dragging.

00:48:46.130 --> 00:48:50.340
So the basic idea behind this new input
event is if you want to have things

00:48:50.340 --> 00:48:55.260
happen live or in real time immediately,
this is the event you want to use.

00:48:55.410 --> 00:48:57.740
And so for sliders,
it'll fire whenever the value changes,

00:48:57.740 --> 00:48:59.390
for any reason.

00:48:59.570 --> 00:49:01.560
So here's a great,
really tiny slider example

00:49:01.800 --> 00:49:03.180
that sets the opacity.

00:49:03.290 --> 00:49:05.480
So here we have a slider,
a floating slider,

00:49:05.480 --> 00:49:08.300
that goes between 0 and 1.0.

00:49:08.500 --> 00:49:10.060
Remember, 1.0 is fully opaque.

00:49:10.120 --> 00:49:12.220
0 is fully transparent.

00:49:12.220 --> 00:49:15.610
It will say it starts off
at 0.5 right in the middle.

00:49:15.670 --> 00:49:19.680
And we have an onInput handler
that grabs the content div from

00:49:19.680 --> 00:49:22.610
the previous example and just sets
the opacity to the current value.

00:49:22.800 --> 00:49:23.710
So it's that simple.

00:49:23.940 --> 00:49:27.430
And if you were to put this in your
web page and the user were to drag it,

00:49:27.430 --> 00:49:30.720
you'd You'd have a neat
dynamic transparency effect.

00:49:32.150 --> 00:49:34.620
So another cool widget we
introduced is the search field.

00:49:34.660 --> 00:49:38.960
And this is basically just a HTML way
of getting to the functionality

00:49:38.960 --> 00:49:41.700
of a Cocoa in a search field.

00:49:41.700 --> 00:49:44.570
So this is done with
input type equals search.

00:49:45.140 --> 00:49:47.980
The incremental attribute
controls live searching.

00:49:47.980 --> 00:49:51.860
You just have to put that attribute
with no value into your HTML,

00:49:51.860 --> 00:49:54.440
and the control will be live.

00:49:54.640 --> 00:49:57.070
There's a results attribute
that you set to the number of

00:49:57.070 --> 00:50:01.240
results you want to remember,
and that will remember previous searches.

00:50:01.260 --> 00:50:04.500
In addition,
you can give an autosave name with

00:50:04.510 --> 00:50:08.640
an autosave attribute that tells--
basically is an identifier that's used

00:50:08.700 --> 00:50:11.200
to store the results of the search.

00:50:11.360 --> 00:50:13.600
And what's neat about this
is you can even say something

00:50:13.600 --> 00:50:16.540
like autosave equals Google,
throw this thing on your website,

00:50:16.600 --> 00:50:18.870
and everybody who wants to
implement a Google search field

00:50:19.210 --> 00:50:23.490
can use a common autosave name,
and all of those results will actually

00:50:23.490 --> 00:50:25.860
be shared among those search fields.

00:50:26.470 --> 00:50:29.180
The placeholder attribute is
used to control the grayed-out

00:50:29.180 --> 00:50:33.800
text that you see in the search
field before you begin a search.

00:50:33.890 --> 00:50:35.340
And then finally, there's a new event.

00:50:35.620 --> 00:50:38.680
Because the NSSearch field has a
rather complicated heuristic that

00:50:38.680 --> 00:50:41.260
it uses for determining at what
time you should begin the search,

00:50:41.600 --> 00:50:44.400
rather than force you to put in
key handlers and click handlers

00:50:44.410 --> 00:50:47.640
and all of that garbage,
you can just listen for a search event,

00:50:47.640 --> 00:50:49.960
and it will fire exactly
when it's supposed to,

00:50:49.960 --> 00:50:52.060
making it easier for you to implement.

00:50:52.060 --> 00:50:54.670
And it just fires exactly when
you're supposed to perform a search,

00:50:54.670 --> 00:50:56.940
and you can do whatever
it is you'd like to do.

00:50:57.010 --> 00:51:00.220
What's really kind of nifty about this
that may make it interesting to use

00:51:00.220 --> 00:51:04.240
on websites is that an unrecognized
input type actually results in

00:51:04.270 --> 00:51:06.150
a text field in other browsers.

00:51:06.450 --> 00:51:10.770
So that means that you can actually
use a search field if you just want

00:51:10.770 --> 00:51:13.930
to get the different look with,
say, storing results using a

00:51:14.010 --> 00:51:15.720
magnifying glass icon.

00:51:15.720 --> 00:51:17.880
If you maybe just want to
achieve that different look,

00:51:17.930 --> 00:51:21.270
you can safely use this in a web page,
because other browsers will

00:51:21.270 --> 00:51:22.910
still show a text field.

00:51:24.660 --> 00:51:29.140
So this degrades gracefully in other
browsers that don't support it.

00:51:29.180 --> 00:51:32.870
And here's just a very simple example
of a search field that's incremental,

00:51:32.870 --> 00:51:35.610
so it's live, with a little placeholder
string that says,

00:51:35.690 --> 00:51:38.100
click here to search,
and then some action

00:51:38.100 --> 00:51:39.700
that you would perform.

00:51:39.730 --> 00:51:41.580
An example is, of course,
that we'll show in a minute,

00:51:41.580 --> 00:51:45.330
is the dashboard widget
for searching address book.

00:51:46.030 --> 00:51:49.530
So let's put it all together with
these enhancements and sort of start

00:51:49.570 --> 00:51:54.380
looking at the Safari RSS feature as
well as dashboard from the perspective

00:51:54.380 --> 00:51:59.380
of this is just an HTML page with
some slick new features in it.

00:51:59.480 --> 00:52:03.590
So what we can do is start
by going to an RSS feed.

00:52:24.990 --> 00:52:24.990
And what you can see here is
there's some truncation in action.

00:52:24.990 --> 00:52:24.990
If you resize the window to be really,
really small or just zoom the text,

00:52:24.990 --> 00:52:24.990
you can see that the headers in the
Safari RSS actually are truncating.

00:52:24.990 --> 00:52:24.990
And they're just doing that
with the text overflow property.

00:52:24.990 --> 00:52:24.990
This is just a web page that's
been generated by the RSS engine.

00:52:25.340 --> 00:52:26.960
And in addition,
there's some very complex

00:52:26.960 --> 00:52:28.580
layout at work here.

00:52:28.580 --> 00:52:31.880
There's a spring and strut
layout on the header and date,

00:52:31.880 --> 00:52:35.580
as well as to do the vertical
stacking of the articles and

00:52:35.580 --> 00:52:37.040
to participate in the slider.

00:52:37.040 --> 00:52:38.670
So you can see there's a
slider widget up there.

00:52:38.940 --> 00:52:40.580
If you drag it,
there's a really neat dynamic

00:52:40.650 --> 00:52:42.780
effect that can be achieved.

00:52:42.860 --> 00:52:45.580
And note that it's actually
a fairly speedy effect.

00:52:45.660 --> 00:52:48.650
And you can do everything that
this page is doing you can do.

00:52:48.860 --> 00:52:49.600
This is all open.

00:52:49.600 --> 00:52:52.590
This is all there in
WebKit for you to use.

00:52:54.500 --> 00:52:57.870
And so now what we can do is
actually look at a dashboard.

00:52:58.050 --> 00:52:59.160
So we can bring up dashboard.

00:52:59.160 --> 00:53:01.930
And we can show,
let's demo drag and drop.

00:53:02.010 --> 00:53:04.340
So if you drag the
address book out slowly,

00:53:04.340 --> 00:53:07.530
note how the drag image started
off as the address book and

00:53:07.530 --> 00:53:09.810
then we dynamically updated it.

00:53:10.580 --> 00:53:13.470
And we even did a fade as
we dynamically updated it.

00:53:13.470 --> 00:53:16.850
So the drag image for the
widget actually slowly faded in.

00:53:16.850 --> 00:53:20.220
And then when you drop it, of course,
you get the whizzy ripple effect.

00:53:21.400 --> 00:53:23.630
And you can see the,
this is just an HTML page.

00:53:23.660 --> 00:53:26.490
And you can see the search field,
input type equals search

00:53:26.490 --> 00:53:27.860
in the bottom right.

00:53:27.890 --> 00:53:30.440
And you can type things like last name.

00:53:30.440 --> 00:53:34.580
And you can even click on the
magnifying glass and you'll see,

00:53:34.580 --> 00:53:36.250
hit enter.

00:53:36.430 --> 00:53:36.520
Oh.

00:53:36.830 --> 00:53:37.000
Bug.

00:53:37.980 --> 00:53:39.150
There you go.

00:53:39.170 --> 00:53:42.120
And you'll see that it will
start storing results for you.

00:53:42.470 --> 00:53:43.060
It's incremental.

00:53:43.720 --> 00:53:47.520
So all of this is very straightforward,
very simple, very easy to use.

00:53:50.120 --> 00:53:53.330
And so back to slides.

00:54:02.000 --> 00:54:17.800
[Transcript missing]