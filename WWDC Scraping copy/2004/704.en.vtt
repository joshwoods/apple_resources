WEBVTT

00:00:12.490 --> 00:00:15.940
And we're here today to talk about
preprocessing principles and we're very,

00:00:15.940 --> 00:00:20.620
very lucky to have, I think,
one of the premier folks in this area,

00:00:20.880 --> 00:00:21.440
Ben Waggoner.

00:00:21.440 --> 00:00:23.710
He's from Ben Waggoner Digital.

00:00:23.710 --> 00:00:25.000
Everybody knows Ben.

00:00:25.030 --> 00:00:29.480
Ben's been around for a long, long time.

00:00:29.850 --> 00:00:31.380
We're going to go for about an hour.

00:00:31.380 --> 00:00:34.040
I'll hold all questions to
the very end of the session.

00:00:34.040 --> 00:00:36.910
And then when we do the questions,
please come up to the microphone so we

00:00:36.910 --> 00:00:39.520
can catch your voice on the recording.

00:00:39.660 --> 00:00:40.040
Thank you.

00:00:40.060 --> 00:00:40.640
OK.

00:00:40.640 --> 00:00:41.190
Let's dive in.

00:00:41.320 --> 00:00:46.880
So how many people saw this
session at the 2003 show?

00:00:46.880 --> 00:00:47.340
Not too many of you.

00:00:47.340 --> 00:00:47.610
OK.

00:00:47.750 --> 00:00:47.900
That's good.

00:00:47.960 --> 00:00:50.300
Because I only thought I was
doing this about five days ago.

00:00:50.380 --> 00:00:53.540
So it's the exact same slides,
but the content will be new.

00:00:53.540 --> 00:00:56.140
So I'll bring my own spin to things.

00:00:56.430 --> 00:00:58.680
So it works now?

00:00:58.680 --> 00:00:59.760
It's you?

00:00:59.770 --> 00:01:00.430
And there's me.

00:01:00.500 --> 00:01:01.520
And it's all good?

00:01:01.520 --> 00:01:02.140
That's who I am.

00:01:02.150 --> 00:01:02.540
Wonderful.

00:01:02.540 --> 00:01:03.160
OK.

00:01:03.450 --> 00:01:05.920
So today we're talking
about preprocessing.

00:01:05.920 --> 00:01:09.460
And you can think about preprocessing
as everything you do between the

00:01:09.460 --> 00:01:14.100
source frame of video and the frame
that actually goes into the codec.

00:01:14.140 --> 00:01:17.350
So pretty simple definition here.

00:01:17.370 --> 00:01:20.610
And let me walk over here so
everyone can see this stuff.

00:01:20.900 --> 00:01:23.920
So big, this stage up here.

00:01:24.030 --> 00:01:25.560
The focus is going to be on web video.

00:01:25.560 --> 00:01:27.040
I'll mention MPEG-2 stuff here and there.

00:01:27.040 --> 00:01:28.900
Who cares about preprocessing for DVD?

00:01:28.900 --> 00:01:33.140
I'll be talking a fair amount
about preprocessing for DVD now.

00:01:33.140 --> 00:01:34.380
I have nothing but interactive.

00:01:34.460 --> 00:01:36.690
Who cares about preprocessing for web?

00:01:36.690 --> 00:01:37.920
For CD-ROM?

00:01:38.210 --> 00:01:42.470
Anyone doing preprocessing
for high definition?

00:01:44.580 --> 00:01:45.240
Oh, got one here.

00:01:45.260 --> 00:01:45.500
Okay.

00:01:45.500 --> 00:01:46.490
That's cool stuff.

00:01:46.530 --> 00:01:47.120
We'll talk about that.

00:01:47.130 --> 00:01:52.840
I spent far too much time working
with damaged D5 tapes in HD last fall.

00:01:52.840 --> 00:01:57.680
The first half of the session is going
to be me talking about slides and showing

00:01:57.840 --> 00:02:00.480
some screenshots and that kind of stuff.

00:02:00.500 --> 00:02:02.580
The second half is I'm going to
be doing some demonstrations.

00:02:02.580 --> 00:02:04.820
I've got a lot of source clips here.

00:02:04.820 --> 00:02:05.980
I've got a lot of tools here.

00:02:05.980 --> 00:02:08.810
I'm going to let you guys pick the
demonstrations you guys want to see.

00:02:08.810 --> 00:02:12.130
The more extroverted among you,
start planning what your

00:02:12.130 --> 00:02:13.790
questions are going to be.

00:02:14.660 --> 00:02:18.250
The focus here is just hands-on
stuff that's going to let you get

00:02:18.250 --> 00:02:21.460
better quality video up on the web or
your DVD or however you're doing it.

00:02:21.680 --> 00:02:25.890
We're trying to increase the bang
for the bit out of our digital media.

00:02:27.390 --> 00:02:30.140
So, we're going to define preprocessing
in a little more detail,

00:02:30.140 --> 00:02:33.740
explain why it matters,
talk about some of the core techniques,

00:02:33.740 --> 00:02:35.640
I'm going to do some demos of
some cool stuff on the Mac,

00:02:35.640 --> 00:02:38.500
my power work over there,
and mainly web video,

00:02:38.520 --> 00:02:40.480
but some about DVD as well.

00:02:40.480 --> 00:02:44.020
And I'll do more of that as planning on,
because you guys care about it a lot.

00:02:44.060 --> 00:02:46.500
There are actually some pretty cool
tricks for DVD you can do these days.

00:02:46.500 --> 00:02:50.720
Like 704 wide encoding,
we'll talk about that.

00:02:52.300 --> 00:02:54.590
So, preprocessing, I mentioned before.

00:02:54.590 --> 00:02:57.250
You think of your video
stream as a series of frames.

00:02:57.250 --> 00:03:00.090
You've got a DV, you've got a whole bunch
of 720 by 480 frames.

00:03:00.090 --> 00:03:02.090
Who here mainly works in PAL?

00:03:02.090 --> 00:03:03.280
Any of you guys?

00:03:03.280 --> 00:03:04.060
Okay.

00:03:04.060 --> 00:03:08.500
So, 720 wide by either 480
or 576 tall frames.

00:03:08.500 --> 00:03:11.320
You know, your web video is a 320 by 240.

00:03:11.320 --> 00:03:14.820
You've got a DVD, it's probably the same
size as your video source.

00:03:14.820 --> 00:03:16.370
You know, whatever you want to do.

00:03:16.370 --> 00:03:19.980
So, you're doing everything to
transform the source frame into the

00:03:20.090 --> 00:03:22.270
optimum output frame for the codec.

00:03:22.300 --> 00:03:23.610
back.

00:03:23.830 --> 00:03:26.810
This is both the most
artistic part of compression,

00:03:26.850 --> 00:03:29.960
because stylistically you
have to make some stylistic

00:03:29.960 --> 00:03:32.470
decisions off in the process,
trade-offs, that kind of stuff.

00:03:32.560 --> 00:03:34.320
It's often the hardest part.

00:03:34.360 --> 00:03:36.230
I mean, knowing what the data,
you want to get the right data right,

00:03:36.230 --> 00:03:37.810
you just type in the data
rate value you want to have.

00:03:37.900 --> 00:03:41.870
Knowing what's the right luma
level for having it to look good,

00:03:41.870 --> 00:03:43.910
that requires some thought.

00:03:44.370 --> 00:03:47.880
I probably spend, on a typical project,
where it's going to be kind

00:03:47.880 --> 00:03:50.920
of a high volume stuff,
maybe 90% of my time in the

00:03:51.140 --> 00:03:54.260
compression process on preprocessing
for challenging content.

00:03:54.260 --> 00:03:56.660
Just because the other
stuff's pretty easy.

00:03:56.660 --> 00:03:58.490
You know what codec you want,
you know what data rate you want,

00:03:58.490 --> 00:04:01.060
you know what the audio should be,
but you've got to kind of tweak and

00:04:01.060 --> 00:04:04.950
tweak and tweak preprocessing if
you're incredibly quality obsessive,

00:04:05.010 --> 00:04:07.030
which I recommend you all become,
because there's too much

00:04:07.160 --> 00:04:08.050
bad web video out there.

00:04:08.060 --> 00:04:09.700
So, why it matters.

00:04:09.700 --> 00:04:12.360
It's all about maximizing
the bang for the get bit.

00:04:12.510 --> 00:04:14.040
You want to get the maximum
communication value.

00:04:14.300 --> 00:04:17.460
You want to get the maximum value per
unit data possible to your end users.

00:04:17.500 --> 00:04:20.250
And it really does matter a lot.

00:04:20.300 --> 00:04:24.550
I mean, correctly processed video at 200
kilobits can be way better than badly

00:04:24.560 --> 00:04:26.470
processed video at 1,000 kilobits.

00:04:26.500 --> 00:04:30.510
So, you can always think of it as like,
you're almost like you're buying

00:04:30.510 --> 00:04:34.220
your customers more bandwidth
by treating your bits better.

00:04:36.350 --> 00:04:39.140
So you want to make sure every
pixel has data that matters,

00:04:39.140 --> 00:04:42.580
every bit is something you care about,
and you're not wasting bits and

00:04:42.940 --> 00:04:46.660
pixels on things that aren't actually
communicating to the end user.

00:04:47.360 --> 00:04:48.580
So, let me just cut a couple frames here.

00:04:48.580 --> 00:04:49.780
Let's see if this is scaling correctly.

00:04:49.780 --> 00:04:51.820
Okay,
so this is just from a movie trailer.

00:04:51.820 --> 00:04:53.740
This is from the Biker
Boys movie trailer.

00:04:53.740 --> 00:04:54.770
Anyone see Biker Boys?

00:04:54.780 --> 00:04:57.240
Neither, but I have the trailer.

00:04:57.240 --> 00:04:57.840
Oh, there we go.

00:04:57.880 --> 00:04:58.740
Any good?

00:04:58.740 --> 00:05:00.390
No, I don't think so.

00:05:00.410 --> 00:05:00.940
That's the problem.

00:05:00.940 --> 00:05:02.120
But I have the movie trailer.

00:05:02.120 --> 00:05:05.600
It's often good to work with not
very interesting content when

00:05:05.600 --> 00:05:07.000
you're experimenting with things.

00:05:07.010 --> 00:05:08.730
You don't get distracted by
plot and that kind of stuff.

00:05:08.740 --> 00:05:10.090
So, this is from Biker Boys.

00:05:10.100 --> 00:05:12.040
Let's go with what the
source frame looks like.

00:05:12.150 --> 00:05:13.480
Pretty typical interlaced frame.

00:05:13.920 --> 00:05:15.170
Projectors kind of
squish in a little bit.

00:05:15.290 --> 00:05:16.100
They get the idea here.

00:05:16.100 --> 00:05:18.820
And because it's interlaced,
you wind up having the

00:05:18.870 --> 00:05:19.490
two different fields.

00:05:19.490 --> 00:05:20.640
There's motion, all that kind of stuff.

00:05:23.430 --> 00:05:27.510
Now, if we preprocess it correctly,
a couple of things will

00:05:27.510 --> 00:05:30.200
go from that to this.

00:05:32.160 --> 00:05:36.540
and the shape of the frame
should be changing a little bit.

00:05:36.540 --> 00:05:38.540
All right, hold on.

00:05:38.680 --> 00:05:40.740
If we take the source frame,
don't modify it at all, encode it,

00:05:40.740 --> 00:05:41.270
we get that.

00:05:41.350 --> 00:05:43.740
This is 800 kilobit source in 3 Pro.

00:05:43.780 --> 00:05:45.780
And that looks terrible.

00:05:45.860 --> 00:05:47.780
That's the word, terrible.

00:05:47.820 --> 00:05:52.340
Because codecs, modern codecs,
based around DCT or

00:05:52.350 --> 00:05:54.550
something else like that,
do really good with gradients.

00:05:54.680 --> 00:05:56.680
But sharp edges take a
lot of bits to encode.

00:05:56.930 --> 00:06:01.300
So when you're using, say,
the thin horizontal lines of fields,

00:06:01.300 --> 00:06:03.880
you wind up having that
be very hard to encode.

00:06:04.070 --> 00:06:06.760
And almost all your bits wind up trying
to code the lines you don't care about,

00:06:06.760 --> 00:06:09.620
as opposed to coding the content you do.

00:06:09.690 --> 00:06:14.140
So same data rate, preprocess the frame,
we get that instead.

00:06:14.230 --> 00:06:15.020
So is that perfect?

00:06:15.020 --> 00:06:15.180
No.

00:06:15.420 --> 00:06:17.280
But obviously,
from an end user perspective,

00:06:17.290 --> 00:06:19.020
that is a lot worse than that.

00:06:19.120 --> 00:06:19.870
Same bit rate.

00:06:19.910 --> 00:06:23.110
So for the end user,
they just get a better experience,

00:06:23.110 --> 00:06:24.770
no sacrifice.

00:06:27.820 --> 00:06:29.280
And that's not really
an exaggerated case.

00:06:29.280 --> 00:06:32.240
I mean, I see a lot of people trying
to do this on the web,

00:06:32.250 --> 00:06:34.540
and I wish they would not.

00:06:35.610 --> 00:06:38.890
One of the reasons why QuickTime has
such a reputation for having high

00:06:38.890 --> 00:06:42.990
quality delivery technology is really
because the people at Apple who

00:06:43.000 --> 00:06:45.150
do the QuickTime movie trailers
are so much more confident than

00:06:45.180 --> 00:06:46.420
the people who do the movie trailers.

00:06:46.420 --> 00:06:49.280
You can find it at
windowsmedia.com and realmedia.com.

00:06:49.330 --> 00:06:53.080
It's much more about
preprocessing than the codecs.

00:06:53.080 --> 00:06:54.660
They give you quality.

00:06:55.760 --> 00:06:58.780
The most critical feature at
Mission Tier is deinterlacing.

00:06:58.780 --> 00:07:00.470
You've seen video before.

00:07:00.470 --> 00:07:04.820
Your even lines and your odd lines
contain information that's temporally

00:07:04.950 --> 00:07:07.260
separated by half a frame duration.

00:07:07.260 --> 00:07:10.670
If you're at 30 frames a second,
the two fields will have an

00:07:10.670 --> 00:07:14.060
image a 60th of a second apart
if it's interlaced video.

00:07:14.090 --> 00:07:15.700
Obviously, it's progressive video.

00:07:15.700 --> 00:07:17.200
You don't have that going on at all.

00:07:17.240 --> 00:07:20.880
Anyone here not grasp interlaced video?

00:07:20.880 --> 00:07:23.460
Who's mainly a video person here?

00:07:23.460 --> 00:07:25.600
Mainly a computer person?

00:07:25.760 --> 00:07:27.760
All right.

00:07:27.760 --> 00:07:30.600
Does anyone not grasp
interlaced at this point?

00:07:30.600 --> 00:07:31.670
All right.

00:07:31.810 --> 00:07:32.200
Okay.

00:07:32.270 --> 00:07:33.900
You'd be too embarrassed
to tell me if you were,

00:07:33.900 --> 00:07:35.260
but at least I can now claim I asked.

00:07:35.300 --> 00:07:37.640
So,
and what happens is that one frame you

00:07:37.650 --> 00:07:41.000
saw where when you have a lot of motion,
areas where there's a lot of motion,

00:07:41.000 --> 00:07:42.820
you wind up with this
kind of crosshatch effect.

00:07:42.820 --> 00:07:46.130
In areas where there
isn't a lot of motion,

00:07:46.140 --> 00:07:47.560
it looks normal.

00:07:47.910 --> 00:07:50.000
Computer display back
is always progressive.

00:07:50.070 --> 00:07:52.020
So if you're going to a computer device,
it's always progressive.

00:07:52.020 --> 00:07:54.120
Projectors are pretty
much always progressive.

00:07:54.160 --> 00:07:57.490
There really aren't very many truly
native interlaced display devices

00:07:57.520 --> 00:07:59.520
that are being designed at this point.

00:07:59.520 --> 00:08:01.640
We have like legacy televisions
and that kind of stuff,

00:08:01.640 --> 00:08:04.590
but clearly everything is turning into
a progressive display device and have

00:08:04.590 --> 00:08:07.940
interlaced content that's just getting
converted to progressive on playback.

00:08:07.940 --> 00:08:10.540
So the future is progressive,
is my feeling.

00:08:12.540 --> 00:08:14.860
And if you're delivering
for any kind of web codec,

00:08:14.860 --> 00:08:18.590
you need to deinterlace it because
none of the web codecs we care

00:08:18.590 --> 00:08:20.240
about support interlaced mode.

00:08:20.240 --> 00:08:24.100
If you leave it interlaced, one,
it just looks stupid.

00:08:24.100 --> 00:08:26.220
Even before you compress it,
it looks stupid because

00:08:26.230 --> 00:08:27.590
someone's throwing a baseball.

00:08:27.590 --> 00:08:29.800
Instead of seeing one baseball,
you see two baseballs that

00:08:29.970 --> 00:08:32.330
have half their lines to it,
and it's very confusing.

00:08:32.340 --> 00:08:38.800
And also just because the codecs find
those sharp lines on the edges of

00:08:38.830 --> 00:08:41.670
the moving objects so hard to encode,
almost all your bits

00:08:41.670 --> 00:08:42.520
wind up getting cut off.

00:08:42.540 --> 00:08:43.970
So you're going to have a lot of
interlacing content being spent

00:08:43.970 --> 00:08:45.980
on the stupid part of your image
and very few are left for actually

00:08:45.980 --> 00:08:46.920
making your image look good.

00:08:46.920 --> 00:08:49.300
So big degradation in quality.

00:08:49.300 --> 00:08:51.970
Of course, progressive content doesn't
need to be deinterlaced because

00:08:51.970 --> 00:08:53.190
it's already progressive.

00:08:53.200 --> 00:08:55.440
And if you're delivering
on DVD with MPEG-2,

00:08:55.450 --> 00:08:58.350
because that's also a fielded medium,
you're just going to

00:08:58.450 --> 00:08:59.910
keep the same field mode.

00:08:59.920 --> 00:09:01.760
So if you have interlaced source,
you're making DVD,

00:09:01.760 --> 00:09:03.460
you're going to keep it
interlaced throughout.

00:09:03.460 --> 00:09:06.840
If you have progressive source,
you're making a progressive MPEG-2

00:09:07.040 --> 00:09:08.480
file for the optimum results.

00:09:08.480 --> 00:09:12.480
And these days, on most modern Macs,
DVD player will always be

00:09:12.480 --> 00:09:12.520
in the middle of the screen.

00:09:12.540 --> 00:09:15.540
So you automatically deinterlace
on playback of interlaced content.

00:09:15.540 --> 00:09:17.070
A lot of older systems,
putting your graphics

00:09:17.220 --> 00:09:18.070
card doesn't always do it.

00:09:18.120 --> 00:09:19.980
I'm not sure what the
actual rule is on that.

00:09:19.980 --> 00:09:22.730
But it used to be that the
Mac DVD player couldn't play

00:09:22.730 --> 00:09:23.970
interlaced content very well at all.

00:09:23.980 --> 00:09:25.990
But it seems to be a lot
better in more recent versions.

00:09:29.570 --> 00:09:32.530
The basic method of de-interlacing,
if you will, is just, okay,

00:09:32.530 --> 00:09:35.540
I've got my even lines and my odd
lines have a different image in them.

00:09:35.720 --> 00:09:37.150
Well,
I'll just throw out all my even lines,

00:09:37.210 --> 00:09:40.180
I'll throw out all my odd lines,
and then process the image from there.

00:09:40.200 --> 00:09:44.280
So if you have a 720x480 db frame,
essentially you're just throwing

00:09:44.530 --> 00:09:48.240
out half the lines and you're
left with a 720x240 db frame,

00:09:48.240 --> 00:09:50.460
and then it gets stretched
or squished or whatever,

00:09:50.460 --> 00:09:54.200
processing like any other kind of
normal Photoshop style image processing.

00:09:55.690 --> 00:09:56.190
And that works.

00:09:56.190 --> 00:09:58.660
The problem is you're throwing
away half your image data.

00:09:58.660 --> 00:10:00.600
And if you're doing like
little small web video,

00:10:00.600 --> 00:10:01.470
that's not a problem.

00:10:01.480 --> 00:10:03.260
Like QuickTime Broadcaster
does that internally.

00:10:03.260 --> 00:10:06.960
You know, if you're doing 320 by
240 or less for broadcast,

00:10:06.960 --> 00:10:08.270
not a huge quality drop.

00:10:08.310 --> 00:10:10.250
But if you're trying to
go to bigger frame sizes,

00:10:10.250 --> 00:10:12.960
you can actually wind up with
a lot of compression artifacts.

00:10:12.960 --> 00:10:15.560
So if you're going from,
because your skidding

00:10:15.560 --> 00:10:18.910
has to get stretched,
so if you're going to do a 480 line

00:10:18.920 --> 00:10:23.120
out from what's internally a 240,
you wind up doubling the height with

00:10:23.180 --> 00:10:25.520
the typical scaling blocky artifacts.

00:10:25.600 --> 00:10:29.800
So if you're really doing deinterlacing,
what you want to be doing is what's

00:10:29.800 --> 00:10:31.810
called adaptive deinterlacing.

00:10:31.950 --> 00:10:34.910
And all the tools we care about
these days support some flavor

00:10:34.910 --> 00:10:37.210
of adaptive deinterlacing,
lots of different names.

00:10:37.240 --> 00:10:41.240
Basic idea of adaptive deinterlacing
is to detect the parts of

00:10:41.240 --> 00:10:42.950
the frame that are moving.

00:10:42.950 --> 00:10:42.950
And

00:10:43.100 --> 00:11:03.400
[Transcript missing]

00:11:03.900 --> 00:11:05.760
It was half the resolution
of the baseball.

00:11:05.890 --> 00:11:08.020
But if someone's throwing a baseball
and they've got a big static

00:11:08.020 --> 00:11:11.360
background-- the fence or whatever
the background-- the fence won't get

00:11:11.430 --> 00:11:13.040
the interlace and it'll remain sharp.

00:11:13.270 --> 00:11:15.950
And that works well
for our visual system.

00:11:16.080 --> 00:11:19.160
We can either detect motion or detail,
but we can't really

00:11:19.160 --> 00:11:21.220
see fast moving detail.

00:11:21.290 --> 00:11:23.920
So it's a nice setup.

00:11:23.920 --> 00:11:27.640
Some occasionally, it would guess wrong,
but most of the modern implementations,

00:11:27.640 --> 00:11:30.860
99% of the time,
is going to give you the right result.

00:11:31.020 --> 00:11:33.920
Sometimes, like scrolling credits,
you might see some kind of weird

00:11:34.090 --> 00:11:35.840
results that have to be interlacing.

00:11:36.130 --> 00:11:37.160
Probably the worst case.

00:11:37.270 --> 00:11:39.500
So try not to have scrolling credits.

00:11:39.660 --> 00:11:41.460
I've actually, sometimes,
just gone through and

00:11:41.460 --> 00:11:42.320
re-implemented the credits.

00:11:42.360 --> 00:11:45.180
Just typed them in again and
re-rendered them in progressive

00:11:45.320 --> 00:11:47.440
just to get around that problem.

00:11:48.010 --> 00:11:51.090
Now the most important
thing for you NTSC folks,

00:11:51.090 --> 00:11:54.150
for film content,
and you PAL people can happily

00:11:54.210 --> 00:11:57.200
and pridefully ignore this part
because you don't have this problem,

00:11:57.200 --> 00:11:58.520
is inverse telecine.

00:11:58.560 --> 00:12:02.110
So,
film runs at exactly 24 frames a second.

00:12:02.110 --> 00:12:06.060
Video runs at not exactly
30 frames a second.

00:12:06.060 --> 00:12:10.960
It really runs at 29.97,
and each of those frames

00:12:10.990 --> 00:12:12.800
has two fields in it.

00:12:14.420 --> 00:12:17.700
So, when film gets converted to
video in a telecine machine,

00:12:17.700 --> 00:12:23.210
to NTSC video, what happens is what's
called 3-2 pull-down.

00:12:23.220 --> 00:12:26.700
So, the first frame of film
becomes three fields of video.

00:12:26.700 --> 00:12:28.950
The next frame of film
becomes two fields of video,

00:12:28.950 --> 00:12:31.320
3-2-3-2, and it's 3-2 pull-down.

00:12:31.320 --> 00:12:34.660
And that basically works
to get your 24 images,

00:12:34.730 --> 00:12:38.640
become 60 fields per second,
and you're good to go.

00:12:38.680 --> 00:12:41.530
It works about as well as you'd expect.

00:12:41.540 --> 00:12:43.470
Of course,
the motion is never quite smooth.

00:12:44.420 --> 00:12:46.720
Some source frames will
last three fields of video,

00:12:46.730 --> 00:12:48.740
and other ones will last
two fields of video.

00:12:48.760 --> 00:12:50.430
So,
motion that would have been very smooth

00:12:50.430 --> 00:12:54.970
in the beginning would have been a little
bit jerky because the duration of each

00:12:55.190 --> 00:12:58.510
frame playback would be a little bit off.

00:12:58.560 --> 00:13:00.760
And that's why if you
watch movies on PAL,

00:13:00.770 --> 00:13:03.050
a movie on PAL,
horizontal motion and pans

00:13:03.050 --> 00:13:05.840
and that kind of stuff,
always looks a little bit smoother

00:13:05.840 --> 00:13:07.920
than the same movie would look in NTSC.

00:13:07.940 --> 00:13:12.200
The way that PAL conversion is done
is that just the 24 frames a second

00:13:12.320 --> 00:13:16.910
are sped up 4%, 25%. And it just
remains 25 frames a second progressive.

00:13:16.960 --> 00:13:19.530
And that's so easy,
and I should move to London because

00:13:19.850 --> 00:13:22.960
half of my life is dealing with
NTSC weirdnesses like this.

00:13:22.960 --> 00:13:25.440
But we've got to do it right,
and it's hard to do,

00:13:25.440 --> 00:13:28.810
and that's why we can make money
charging for doing video work.

00:13:28.960 --> 00:13:32.680
So, what you wind up with when
you've created a file with this,

00:13:32.680 --> 00:13:35.760
and you've seen this a lot,
is a file where you'll see

00:13:35.760 --> 00:13:39.960
three progressive frames and
two interlaced frames repeating.

00:13:39.960 --> 00:13:41.960
And I'll show you a sample
of that in a few minutes.

00:13:41.960 --> 00:13:43.950
And that's an easy way to test.

00:13:44.420 --> 00:13:46.330
So, you can go to the
Word and QuickTime Player,

00:13:46.340 --> 00:13:48.420
go through frame by frame
in a section with motion.

00:13:48.420 --> 00:13:52.460
You'll see three progressive frames,
two interlaced frames, three progressive,

00:13:52.600 --> 00:13:53.420
two interlaced.

00:13:53.420 --> 00:13:55.290
And that's what you'll see.

00:13:55.420 --> 00:13:59.270
And the nice thing with that is
if you have a tool which hasn't

00:13:59.270 --> 00:14:02.320
inversed TELS in the algorithm,
and we have several on the Mac,

00:14:02.320 --> 00:14:03.420
it'll be able to reverse that process.

00:14:03.420 --> 00:14:06.420
Instead of having to deinterlace
it and throw image data out,

00:14:06.420 --> 00:14:09.400
it's just able to restitch
the original source frame.

00:14:09.480 --> 00:14:11.590
So,
it's able to reassemble both fields into

00:14:11.590 --> 00:14:13.960
the original 24 frames a second video.

00:14:13.960 --> 00:14:16.960
And that's great for two reasons.

00:14:16.960 --> 00:14:20.860
One, it just, you know, it's, we don't,
we keep the full image data.

00:14:20.960 --> 00:14:23.960
And second, we're able to restore
the original time base.

00:14:24.090 --> 00:14:26.920
So, when we output,
we can actually encode at 24

00:14:27.010 --> 00:14:31.960
frames a second instead of
doing the 3-2 pull-down thing.

00:14:31.960 --> 00:14:37.320
So, actually, we get smoother motion,
same source on computer playback that

00:14:37.320 --> 00:14:39.960
we would have had on the video playback.

00:14:40.080 --> 00:14:43.450
Because every frame will have the same
duration of exactly 24th of a second.

00:14:43.500 --> 00:14:47.500
Now, one complexity is when
you do the transfer,

00:14:47.700 --> 00:14:52.560
the film is really slowed down to
23.976 frames a second to match

00:14:52.670 --> 00:14:55.500
the way that 60 compares to 59.94.

00:14:55.590 --> 00:14:57.500
Details don't really matter that much.

00:14:57.500 --> 00:14:59.970
But for most tools,
if you're encoding with

00:15:00.130 --> 00:15:02.490
using inverse TELSINI,
it doesn't support changing time.

00:15:02.500 --> 00:15:05.380
You have to actually encode
at 23.976 frames a second.

00:15:05.500 --> 00:15:06.400
It's a magic number.

00:15:06.730 --> 00:15:08.500
Other tools will let you
change the time base.

00:15:08.500 --> 00:15:10.500
You can easily switch that around.

00:15:11.230 --> 00:15:13.010
And...

00:15:13.220 --> 00:15:17.100
If you have film kind of content,
that's pretty much any music video,

00:15:17.100 --> 00:15:20.260
movie trailer, feature film,
primetime drama,

00:15:20.260 --> 00:15:23.440
those are all going to be content
that was created either in a film

00:15:23.440 --> 00:15:25.820
or the 24p high definition camera.

00:15:25.820 --> 00:15:28.870
And if you have content that's like that,
that winds up with 3D2 pulldown,

00:15:28.870 --> 00:15:30.840
you absolutely want to
have this available.

00:15:30.840 --> 00:15:33.000
This pays off hugely in
terms of output quality.

00:15:33.000 --> 00:15:37.700
One complexity is when someone
has source that's done on video,

00:15:37.700 --> 00:15:42.000
but then it's edited as
source that came out as 24p.

00:15:42.670 --> 00:15:45.880
You think it's edited in a fashion
where it's not keeping track of

00:15:45.880 --> 00:15:47.630
where the original frames were.

00:15:47.640 --> 00:15:49.060
Now Final Cut is trivial.

00:15:49.060 --> 00:15:52.100
You just have a 24p project,
take a 24p source,

00:15:52.100 --> 00:15:55.400
it'll do it frame accurate,
and when you export it with 3D2 pulldown,

00:15:55.400 --> 00:15:59.940
it'll keep what's called the cadence
of the 3 and the 2 consistent.

00:15:59.940 --> 00:16:03.140
However, if someone just takes so much to
tell us they need video files,

00:16:03.250 --> 00:16:06.150
puts them in a Final Cut,
add a video frame rate project

00:16:06.270 --> 00:16:11.180
to an interlaced 29.97 file,
when they do edits, they're not going to

00:16:11.180 --> 00:16:12.420
wind up putting edits.

00:16:12.580 --> 00:16:14.710
So it's not going to be exactly
where the edits would have

00:16:14.710 --> 00:16:15.940
been in the film originally.

00:16:16.080 --> 00:16:18.910
And then when you take that into a tool,
you can wind up with issues where it just

00:16:18.910 --> 00:16:22.080
can't figure out where the frames were
because of what's called the cadence.

00:16:22.080 --> 00:16:28.270
So instead of getting the 3232,
you make it 323232132323232223,

00:16:28.270 --> 00:16:31.920
kind of weird pattern as that,
where video edits get dropped in.

00:16:31.960 --> 00:16:35.010
And some tools just completely fail,
like After Effects when

00:16:35.060 --> 00:16:36.580
given that kind of content.

00:16:36.580 --> 00:16:38.650
Other tools like Cleaner
deal with it pretty robustly.

00:16:38.700 --> 00:16:41.920
Ideally, you just have content
where it's done correctly.

00:16:44.080 --> 00:16:45.360
Cropping.

00:16:45.360 --> 00:16:48.910
Cropping is a place where
I see people messing up a lot.

00:16:49.130 --> 00:16:50.880
Especially,
you'll see a lot of web video out

00:16:50.880 --> 00:16:53.090
there while there's a few pixels
of black on the left and the

00:16:53.120 --> 00:16:55.960
right or on the top or the bottom,
something like that.

00:16:56.040 --> 00:17:01.250
The reason about that is video monitors,
televisions, don't show the edge of the

00:17:01.250 --> 00:17:02.580
video signal by definition.

00:17:02.580 --> 00:17:05.260
I mean, a consumer TV does not
have an underscan mode.

00:17:05.530 --> 00:17:08.760
You just wind up with a safe
area around the edge that you

00:17:08.760 --> 00:17:10.060
know is going to get left out.

00:17:10.150 --> 00:17:12.280
Obviously, when you play back on
a computer on a screen,

00:17:12.280 --> 00:17:14.740
it's going to give you
every single pixel.

00:17:14.740 --> 00:17:17.890
The upper left-hand corner pixel
is going to be shown on the screen,

00:17:17.890 --> 00:17:21.000
or else it's horribly miscalibrated.

00:17:21.080 --> 00:17:22.900
Because of that,
when you're converting from

00:17:22.900 --> 00:17:26.800
content composited for video,
there may be junk around the

00:17:26.800 --> 00:17:29.560
edge of the screen that would
never be seen on a television,

00:17:29.750 --> 00:17:35.000
but that would show up when you look
at the same frame on a computer.

00:17:35.070 --> 00:17:38.000
And the simple thing
there is to remove that,

00:17:38.410 --> 00:17:40.310
crop it out.

00:17:40.330 --> 00:17:42.830
and very many of you want
to crop out edge blanking.

00:17:42.830 --> 00:17:45.920
That's going to be with the thin
black lines at the top of the

00:17:45.920 --> 00:17:47.380
bottom or the left or the right.

00:17:47.480 --> 00:17:52.640
Often DV source has no blanking at all,
but typically analog source is going to.

00:17:52.660 --> 00:17:56.480
And sources being captured at 486
lines tall is almost certainly going

00:17:56.480 --> 00:17:58.980
to have a few black lines at the top.

00:17:59.830 --> 00:18:03.540
The lower the resolution
you're going to go to,

00:18:03.540 --> 00:18:04.650
the more you can crop.

00:18:04.900 --> 00:18:09.220
Because when we shot with the safe area,
which is the region that's known

00:18:09.310 --> 00:18:12.110
to work in all televisions,
no cinematographer is going

00:18:12.110 --> 00:18:15.540
to put critical content within
10% of the edge of the screen.

00:18:15.540 --> 00:18:20.700
Because they know that plenty of systems
aren't capable to... consumers are going

00:18:20.810 --> 00:18:23.530
to have TVs that are going to either
give you a distorted image or no image

00:18:23.530 --> 00:18:25.920
at all at the very edge of the screen.

00:18:25.940 --> 00:18:27.520
So they're not going to put
anything critical there.

00:18:27.520 --> 00:18:31.620
Your lower third text is not
going to be intruded into the

00:18:31.620 --> 00:18:34.380
10% boundary around the screen.

00:18:34.380 --> 00:18:35.760
The actor's heads aren't
going to be in there,

00:18:35.770 --> 00:18:36.570
all that kind of stuff.

00:18:36.600 --> 00:18:38.580
So the lower the
resolution you're going to,

00:18:38.600 --> 00:18:41.500
you can actually crop pretty
aggressively into the safe area,

00:18:41.500 --> 00:18:43.220
making the foreground
objects a little bit larger.

00:18:44.610 --> 00:18:47.630
The next thing you want to
do is crop out letterboxing.

00:18:47.630 --> 00:18:50.610
There's no point in sending
black bars to a customer,

00:18:50.610 --> 00:18:51.600
for most stuff.

00:18:51.620 --> 00:18:54.410
Certainly not for web video,
because you can make

00:18:54.410 --> 00:18:55.880
your web video any size.

00:18:55.880 --> 00:18:59.330
If you leave any kind of black
bar in there from letterboxing,

00:18:59.330 --> 00:19:03.080
you're just spending bits and
CPU cycles on playback on nothing.

00:19:03.080 --> 00:19:06.330
Much better to just crop
those out and call it done.

00:19:07.340 --> 00:19:09.520
And also because many codecs,
especially at low bit rates,

00:19:09.520 --> 00:19:12.890
give you artifacts with sharp lines,
that very sharp black line of

00:19:12.890 --> 00:19:15.880
letterboxing winds up messing
things up a little bit.

00:19:15.880 --> 00:19:17.520
You often get distortion around that top.

00:19:19.060 --> 00:19:23.260
When you go into DVD, of course,
DVD only supports up to 16x9 anamorphic.

00:19:23.260 --> 00:19:27.400
So if you have any kind of film source
that's more than 16x9 in aspect ratio,

00:19:27.400 --> 00:19:30.820
like most films are like
1.85 to 1 or 2.35 to 1,

00:19:30.880 --> 00:19:33.520
you're going to need to
leave in some letterboxing,

00:19:33.520 --> 00:19:35.540
and that's inevitable with DVD.

00:19:35.900 --> 00:19:35.900
But for web video,
you're going to need to

00:19:35.900 --> 00:19:35.920
leave in some letterboxing,
and that's inevitable with DVD.

00:19:35.980 --> 00:19:35.980
But for web video,
you're going to need to

00:19:35.980 --> 00:19:36.000
leave in some letterboxing,
and that's inevitable with DVD.

00:19:36.010 --> 00:19:39.980
For web video, you never need to have
letterboxing in your video.

00:19:40.270 --> 00:19:41.280
Just a reference there.

00:19:41.280 --> 00:19:45.760
So this is the 5% boundary
here called action safe.

00:19:45.760 --> 00:19:47.240
That's the 10% called title safe.

00:19:47.320 --> 00:19:50.590
So the general rule of thumb
is for the action safe area,

00:19:50.590 --> 00:19:54.080
motions in this area should
be able to be seen as motion.

00:19:54.080 --> 00:19:55.560
Anything out here is fair game.

00:19:55.560 --> 00:19:57.070
It may or may not be presented.

00:19:57.090 --> 00:19:59.270
Anything in here should be
able to see it kind of moving,

00:19:59.270 --> 00:20:01.400
but if it's text,
you might not be able to see it because

00:20:01.400 --> 00:20:03.010
it'll be distorted around the edge.

00:20:03.010 --> 00:20:05.190
So the title safe area,
the image should be pretty clear.

00:20:05.230 --> 00:20:07.780
I mean, you're not going to get any
distortion at all theoretically.

00:20:07.780 --> 00:20:09.870
So text should be visible,
all that kind of stuff.

00:20:10.200 --> 00:20:13.030
So there's never going to be anything
critical outside the action safe.

00:20:13.030 --> 00:20:16.540
You should assume everything inside
title safe is going to be critical.

00:20:16.540 --> 00:20:20.310
And depending on the content,
somewhere in here is kind of the range

00:20:20.310 --> 00:20:22.810
between where things get critical or not.

00:20:22.860 --> 00:20:24.680
And you can just kind of look at that.

00:20:24.680 --> 00:20:27.070
If you can imagine,
let me turn the laser thing.

00:20:27.070 --> 00:20:27.740
There we go.

00:20:27.740 --> 00:20:28.990
I got laser pointer.

00:20:28.990 --> 00:20:33.030
If you look at the bounding box there,
if you're doing like a little

00:20:33.070 --> 00:20:37.500
like 160 by 120 web movie for
modem use or GVP kind of stuff,

00:20:37.500 --> 00:20:40.180
the difference between
having a frame that shows,

00:20:40.240 --> 00:20:41.810
there's all this other stuff.

00:20:41.820 --> 00:20:44.580
And the drum is kind of neat and,
you know, his head.

00:20:44.580 --> 00:20:47.880
But if you just crop down to that,
you can see his hands is better,

00:20:47.880 --> 00:20:50.980
his facial expression is better
and it can help out a lot.

00:20:52.130 --> 00:20:53.680
Then scaling.

00:20:53.940 --> 00:20:59.490
Scaling is taking what's our-- or
after we've cropped our source,

00:20:59.490 --> 00:21:04.280
basically crop is telling don't
take these pixels outside this

00:21:04.280 --> 00:21:07.280
box into consideration when
you're doing your scaling.

00:21:07.320 --> 00:21:10.460
And then the bitmap,
this change in size to the output bitmap

00:21:10.510 --> 00:21:13.800
actually gets handed off to the codec.

00:21:13.800 --> 00:21:14.500
And two things.

00:21:14.500 --> 00:21:17.400
One is, especially for web video,
you need to make the video

00:21:17.400 --> 00:21:19.700
smaller to play back on the web.

00:21:19.700 --> 00:21:21.410
And two,
you're also going to be correcting

00:21:21.530 --> 00:21:24.300
for aspect ratio in here.

00:21:24.300 --> 00:21:27.260
One thing that just typically freaks
out web and computer people is I start

00:21:27.260 --> 00:21:29.000
talking about non-square pixels.

00:21:29.040 --> 00:21:31.260
Because from the computer world,
the idea of a non-square pixel is

00:21:31.260 --> 00:21:32.900
like talking about a square wheel.

00:21:32.900 --> 00:21:35.990
But the video world,
all the professional video formats use

00:21:35.990 --> 00:21:38.260
pixels that are rectangular in shape.

00:21:38.290 --> 00:21:45.600
So 720 by 480 could be either a 4 by 3
aspect ratio or a 60 by 9 aspect ratio.

00:21:45.670 --> 00:21:48.870
But if you just looked at 720 by 480,
a square pixel, that would actually be

00:21:48.940 --> 00:21:50.000
a 3 by 2 aspect ratio.

00:21:50.000 --> 00:21:51.360
And that never actually occurs.

00:21:51.470 --> 00:21:55.360
So any kind of DV file
is always distorted,

00:21:55.360 --> 00:21:58.950
either squished or
stretched horizontally,

00:21:58.950 --> 00:22:00.320
depending on what the format is.

00:22:00.330 --> 00:22:02.730
When you're going to a web video
format that's going to be square pixel,

00:22:02.730 --> 00:22:04.610
and almost all of them are
going to be square pixel,

00:22:04.780 --> 00:22:08.480
you need to be able to correct for the
fact that the source is non-square pixel.

00:22:08.480 --> 00:22:09.780
You have to make it two square pixel.

00:22:09.780 --> 00:22:12.090
You have to either stretch it
or squish it in order to make

00:22:12.100 --> 00:22:13.900
sure you correct for that.

00:22:13.900 --> 00:22:17.160
The basic goal is if
on the video monitor,

00:22:17.160 --> 00:22:19.660
there was a circle,
on the computer monitor, on playback,

00:22:19.660 --> 00:22:23.320
there's after compression,
you want there to be circles as well.

00:22:23.340 --> 00:22:25.630
and uh... that's pretty straight,
that's the goal.

00:22:25.630 --> 00:22:27.300
You see a lot of stuff
where things are about,

00:22:27.300 --> 00:22:29.200
stretched about ten percent
too wide on the web.

00:22:29.280 --> 00:22:31.020
Quite common.

00:22:31.050 --> 00:22:34.760
People do, people figure, okay,
720 by 480, I'll cut it in half size,

00:22:34.920 --> 00:22:39.140
it'll be 360 by 240, and there we go,
and I'll put it up on the web.

00:22:39.160 --> 00:22:41.330
You can assume,
anytime you ever see a 360

00:22:41.330 --> 00:22:45.200
by 240 web video file up on,
someone did it totally wrong,

00:22:45.230 --> 00:22:47.800
because they did not get
the aspect ratio correct.

00:22:48.100 --> 00:22:51.100
If you have four by three source,
you want,

00:22:51.100 --> 00:22:56.780
you want to have your output resolution
in square pixel also be four by three.

00:22:56.820 --> 00:23:00.020
So, four by three source,
a 320 by 240 would be good,

00:23:00.020 --> 00:23:03.300
because 320 divided by 240 is,
goes down to four by three.

00:23:03.590 --> 00:23:07.690
Six by 480, five by 384,
anything where you have four units

00:23:07.690 --> 00:23:09.140
wide by three high is going to work.

00:23:09.170 --> 00:23:11.550
If you do 360 by 480,
everything's going to

00:23:11.550 --> 00:23:12.510
be ten percent too wide.

00:23:12.730 --> 00:23:15.240
If you deal with actors very much,
when you make them

00:23:15.240 --> 00:23:16.640
about ten percent extra,
ten percent more fat,

00:23:16.650 --> 00:23:17.880
they complain a lot.

00:23:18.090 --> 00:23:19.540
So, bad win there.

00:23:19.540 --> 00:23:22.200
And your circles are ovals,
all that kind of stuff.

00:23:22.310 --> 00:23:24.510
So,
you just want to make sure that you're,

00:23:24.510 --> 00:23:26.740
we're going to square
pixel output format.

00:23:26.750 --> 00:23:32.090
You want to make sure that your
output resolution matches your,

00:23:32.100 --> 00:23:36.430
your output and your
source frame aspect ratio.

00:23:36.580 --> 00:23:39.200
So, two,
two great examples for web video are,

00:23:39.250 --> 00:23:43.150
you're coming from 720 by 480,
typical DV content.

00:23:43.650 --> 00:23:46.240
You want to have a 320 by 240,
or four by three.

00:23:46.250 --> 00:23:49.720
And if it's a 16 by nine source,
432 by 240 works just fine.

00:23:49.960 --> 00:23:54.410
So, the, you're picking the output,
and the only difference here is the

00:23:54.410 --> 00:23:55.900
aspect ratio of the source file.

00:23:55.930 --> 00:23:58.580
The resolution is 720
by 480 in both cases.

00:23:58.600 --> 00:24:01.180
And if we're doing PAL,
these are both good numbers as well.

00:24:01.230 --> 00:24:06.990
Because, again, even, PAL is 576 by 720,
but it's also either 4 by 3 or 16 by 9.

00:24:07.000 --> 00:24:10.070
So, you need to have a 4 by 3 or
16 by 9 output frame size.

00:24:10.120 --> 00:24:14.840
Some codecs like, don't like,
don't like odd numbers

00:24:14.840 --> 00:24:16.060
and that kind of stuff.

00:24:16.060 --> 00:24:18.240
As a rule of thumb,
as long as height and width

00:24:18.240 --> 00:24:20.450
are both divisible by 16,
you're in pretty good shape.

00:24:20.500 --> 00:24:24.540
With Sorenson and MPEG-4
and that kind of stuff.

00:24:24.540 --> 00:24:29.940
MPEG-2 has a few very specified frame
sizes it supports for DVD stuff.

00:24:29.940 --> 00:24:32.460
So you just have to pick one of those.

00:24:32.460 --> 00:24:35.030
And typically when you're
doing a DVD encode,

00:24:35.040 --> 00:24:35.910
you don't have to worry
about this at all.

00:24:35.920 --> 00:24:38.560
You're just gonna stay at,
you're not doing any scaling at all.

00:24:38.560 --> 00:24:43.790
If it's a 16 by 9, 720 by 480,
you're gonna go to a 16 by 9, 720 by 480.

00:24:43.820 --> 00:24:47.500
There are a few cases like
if you have a 720 by 486,

00:24:47.580 --> 00:24:52.110
for example, you'll need to crop from,
you know, the 486 down to 480.

00:24:52.140 --> 00:24:56.000
It's really important when
you're converting from a 486

00:24:56.000 --> 00:25:00.660
source to a 480 line source,
you don't scale it, but you crop it.

00:25:00.700 --> 00:25:04.430
Because the 486 is actually grabbing
three more lines out of the,

00:25:04.440 --> 00:25:08.300
I mean six more lines out of the
video signal than the 480 does.

00:25:08.360 --> 00:25:10.740
So if you scale it,
you'll get a little bit of a distortion.

00:25:10.740 --> 00:25:12.340
And a little bit loss of
image quality as well.

00:25:12.380 --> 00:25:17.580
The, the, if you have a 46 source,
like a, you know, like a SDI capture,

00:25:17.580 --> 00:25:20.260
something like that,
wanna make a DVD out of it,

00:25:20.260 --> 00:25:22.410
you wanna crop four lines off the
top and two lines off the bottom.

00:25:22.420 --> 00:25:25.200
You may be tempted to
crop three and three,

00:25:25.260 --> 00:25:26.690
cuz that sounds the right numbers.

00:25:26.880 --> 00:25:29.080
But if you,
if you crop an odd number of lines,

00:25:29.200 --> 00:25:31.140
depending on the tool,
you may or may not wind up

00:25:31.140 --> 00:25:32.330
reversing your field order.

00:25:32.500 --> 00:25:35.340
So as the odd lines become even lines,
and then when you play back,

00:25:35.380 --> 00:25:36.560
things go higgledy-piggledy.

00:25:36.580 --> 00:25:38.940
So much better to just
pick four at the top,

00:25:38.990 --> 00:25:39.570
two at the bottom.

00:25:39.580 --> 00:25:41.520
You don't have to worry about
those changes happening.

00:25:41.520 --> 00:25:45.380
And also the quality of your
scaling algorithm matters as well.

00:25:45.380 --> 00:25:47.120
Professional encoding tools we use,
you know,

00:25:47.120 --> 00:25:50.140
assign or make you the kind of scaling,
you just do like a quick time export,

00:25:50.290 --> 00:25:51.960
you know, for a quick time player.

00:25:51.960 --> 00:25:54.220
Go for a really big file
and a really small file.

00:25:54.240 --> 00:25:56.380
You'll often get a little bit
lower quality scaling just cuz,

00:25:56.470 --> 00:25:57.250
you know, it's quick time.

00:25:57.330 --> 00:26:01.040
Quick time's not meant as a professional
encoding tool in the player itself.

00:26:01.190 --> 00:26:05.300
Compressor will give you a much better
result than the quick time player will,

00:26:05.350 --> 00:26:07.480
the exact same settings,
because these are higher

00:26:07.520 --> 00:26:09.560
quality scaling algorithm.

00:26:10.700 --> 00:26:11.580
Okay.

00:26:12.100 --> 00:26:15.130
So when we're authoring for web video,
or anything really, our goal is,

00:26:15.190 --> 00:26:18.170
if we're going to scale,
we only ever want to scale down.

00:26:18.190 --> 00:26:20.200
Because any time you scale up,
you're interpolating.

00:26:20.340 --> 00:26:22.530
That's like going into Photoshop or
After Effects and trying to make

00:26:22.540 --> 00:26:23.750
something bigger than it was.

00:26:23.750 --> 00:26:26.430
And it always gets soft,
and it will often get blocky.

00:26:26.450 --> 00:26:27.900
It's not a good experience.

00:26:27.900 --> 00:26:30.840
When you're shrieking down,
you maybe lose some detail,

00:26:30.840 --> 00:26:33.320
but the resulting image
will at least be sharp.

00:26:34.300 --> 00:26:36.180
So let me just kind of walk
through a scenario here.

00:26:36.180 --> 00:26:40.540
If you have a 720x480,
you're doing a non-adaptive deinterlace,

00:26:40.540 --> 00:26:43.570
or if you have content where
the entire frame is moving,

00:26:43.570 --> 00:26:47.160
and if you have a case where the
whole video frame is moving at once,

00:26:47.160 --> 00:26:50.090
adaptive deinterlacing
does not pay off at all.

00:26:50.610 --> 00:26:54.400
Because all adaptive deinterlacing
does is it doesn't deinterlate the

00:26:54.400 --> 00:26:56.890
parts of the frame that aren't moving.

00:26:56.890 --> 00:26:59.200
If the entire frame moved,
you're just going to have to

00:26:59.200 --> 00:27:00.640
eliminate one of the two fields.

00:27:00.680 --> 00:27:04.280
If we did a safe area crop of 10%,
that would take us down to a 7.5% drop.

00:27:04.390 --> 00:27:07.640
If we did a safe area crop of 10%, that
would take us down to a 6.48x216 size.

00:27:07.820 --> 00:27:11.000
And then we would convert
it from there to a 320x240,

00:27:11.030 --> 00:27:14.780
which seems like going from
a 720x480 by a 320x240 should

00:27:14.780 --> 00:27:16.180
be scaling down by a lot.

00:27:16.180 --> 00:27:18.480
But after we've deinterlaced,
after we've cropped,

00:27:18.580 --> 00:27:23.230
we're actually scaling up vertically,
even though we're going

00:27:23.230 --> 00:27:24.900
that way horizontally.

00:27:25.320 --> 00:27:28.430
Pre-processing is one of the most
important aspects of video processing.

00:27:28.540 --> 00:27:31.460
When working with interlaced,
vertical is vastly more important

00:27:31.460 --> 00:27:32.920
and tricky than horizontal is.

00:27:32.920 --> 00:27:35.290
You have all the horizontal
you could possibly want,

00:27:35.290 --> 00:27:37.990
but the vertical is really
what you're trying to preserve.

00:27:38.310 --> 00:27:41.070
It's down to figuring out what
you're trying to preserve.

00:27:41.070 --> 00:27:44.840
Typically you're going to try to preserve
as much vertical detail as you can.

00:27:44.860 --> 00:27:48.820
You typically don't want to crop even one
extra line of vertical you don't need to,

00:27:48.820 --> 00:27:51.380
and then just the
horizontal is necessary.

00:27:52.480 --> 00:27:55.500
So, when you're going to
320x240 or higher from NTSC,

00:27:55.500 --> 00:28:00.810
or 384x288 or higher with PAL,
you want to crop as little as possible.

00:28:00.830 --> 00:28:04.270
You're definitely always going to crop
out any head of blanking or letterboxing

00:28:04.270 --> 00:28:07.060
because there's just no data there,
but you don't want to crop any

00:28:07.140 --> 00:28:08.690
extra stuff in the safe area.

00:28:08.700 --> 00:28:11.480
And you want to use adaptive
deinterlacing if it's a

00:28:11.480 --> 00:28:13.870
true interlaced source,
and if it was a film

00:28:13.870 --> 00:28:17.040
source with 3-2 pulldown,
you definitely want to use

00:28:17.040 --> 00:28:20.530
inverse telecine and restore
the true progressive mode.

00:28:20.540 --> 00:28:23.520
And with inverse telecine,
even if you have a frame that's

00:28:23.560 --> 00:28:26.430
fully in motion because it's just
restitching the original source frames,

00:28:26.430 --> 00:28:29.190
that's going to work for you just fine.

00:28:29.970 --> 00:28:33.320
Next is luma adjustment.

00:28:33.420 --> 00:28:37.000
And luma is basically but not
quite the same thing as brightness.

00:28:37.070 --> 00:28:40.010
And I recommend you read
Charles Poynton's book if you want

00:28:40.070 --> 00:28:42.300
to care about what the difference is.

00:28:42.370 --> 00:28:45.050
You can sort of think about
video filters in two classes.

00:28:45.050 --> 00:28:47.400
There are filters that affect luma,
brightness,

00:28:47.400 --> 00:28:49.470
and filters that affect chroma, or color.

00:28:49.630 --> 00:28:51.430
And best to think about them separately.

00:28:51.430 --> 00:28:54.620
And typically you're going to do a lot
of work on luma for a lot of cases,

00:28:54.620 --> 00:28:57.460
but typically chroma,
you don't really mess with it very much

00:28:57.460 --> 00:28:59.840
because it tends to survive the process.

00:28:59.920 --> 00:29:05.140
And also, we see mainly luma,
so that's where it pays off.

00:29:05.140 --> 00:29:08.270
And the classic luma
filters are contrast,

00:29:08.270 --> 00:29:12.900
brightness, and gamma,
or the levels filter in After Effects and

00:29:12.910 --> 00:29:15.620
tools like that are also just luma.

00:29:18.250 --> 00:29:21.880
So this is a complex issue now.

00:29:21.880 --> 00:29:23.690
If anyone's been doing
QuickTime for a while,

00:29:23.690 --> 00:29:26.930
you probably have it in your head that
you have to raise the gamma a bunch when

00:29:27.140 --> 00:29:29.360
you're encoding on a Mac for PC playback.

00:29:29.360 --> 00:29:30.540
Anyone doing that?

00:29:30.610 --> 00:29:31.740
Do you know that rule of thumb?

00:29:31.740 --> 00:29:32.920
You guys all knew?

00:29:32.920 --> 00:29:33.700
All right.

00:29:33.700 --> 00:29:35.240
You know what I'm talking about.

00:29:35.240 --> 00:29:35.840
All right.

00:29:36.840 --> 00:29:39.370
So if you were doing all that,
and if you didn't know about that,

00:29:39.370 --> 00:29:42.480
you can not feel bad because you
largely don't have to do that anymore.

00:29:42.480 --> 00:29:44.800
So there are two classes
of codecs in QuickTime,

00:29:44.800 --> 00:29:48.310
the ones that will correct for gamma
on the fly and ones that won't.

00:29:48.310 --> 00:29:50.810
So for example,
if you use the Sorensen Video 3 codec,

00:29:50.920 --> 00:29:53.500
if you code that file on a Mac and
play it back on a Windows box,

00:29:53.570 --> 00:29:56.380
it'll appear darker on a
Windows box than it will on a Mac.

00:29:56.440 --> 00:29:59.270
If you use the MPEG-4 codec,
it'll appear the same brightness

00:29:59.270 --> 00:30:02.240
on a Windows box as it will on a
Mac because that particular codec will

00:30:02.280 --> 00:30:04.260
automatically correct for the gamma.

00:30:04.260 --> 00:30:06.810
This is confusing, unfortunately.

00:30:06.840 --> 00:30:08.640
So you have to know which
codec you're going to do.

00:30:08.640 --> 00:30:11.610
That's one of the reasons
I recommend that if you're

00:30:11.610 --> 00:30:14.010
doing QuickTime for Mac users,
use Sorensen because it's a better

00:30:14.050 --> 00:30:15.680
codec and all that kind of good stuff.

00:30:15.700 --> 00:30:19.210
But if you're really trying
to make a QuickTime file for

00:30:19.240 --> 00:30:22.840
a cross-platform audience,
the MPEG-4 codec has the

00:30:22.880 --> 00:30:27.260
advantage that you're able to,
it'll correct for its gamma for it,

00:30:27.260 --> 00:30:29.800
it won't appear too dark on PC.

00:30:29.800 --> 00:30:32.230
And it's also possible to use
QuickTime Movie Alternates to make

00:30:32.230 --> 00:30:34.960
different versions of the file with
different gamma for Mac and Windows,

00:30:34.960 --> 00:30:36.790
and Movie Alternates to
automatically switch between them.

00:30:36.840 --> 00:30:37.520
So you can switch
between them on the web,

00:30:37.520 --> 00:30:39.250
but that's for a different class.

00:30:39.260 --> 00:30:42.660
So the two, let me kind of walk
through the filters there.

00:30:42.670 --> 00:30:45.140
First, we have brightness and contrast,
and these are often grouped together.

00:30:45.140 --> 00:30:51.710
Brightness basically exaggerates how
different the thing is from gray.

00:30:51.720 --> 00:30:55.850
So you have an exact middle gray, sorry,
that's contrast.

00:30:55.860 --> 00:30:58.100
Brightness just shifts
the entire luma range.

00:30:58.180 --> 00:30:59.910
It just like adds X amounts.

00:31:00.020 --> 00:31:02.220
You can do a brightness of plus 20,
every pixel will become

00:31:02.220 --> 00:31:03.300
20 units brighter.

00:31:03.300 --> 00:31:06.300
So pixel value zero will become 20.

00:31:06.700 --> 00:31:11.090
pixel value 200 will become 220.

00:31:11.790 --> 00:31:14.580
People get in trouble with brightness,
because people say,

00:31:14.600 --> 00:31:17.620
"I want my video to look brighter,
so I'll turn the brightness

00:31:17.620 --> 00:31:20.840
up." And it's actually almost
always the wrong thing to do.

00:31:20.840 --> 00:31:24.190
You virtually never want to actually
raise brightness as a filter itself.

00:31:24.290 --> 00:31:26.730
If you want to have the video
seem perceptually brighter,

00:31:26.730 --> 00:31:30.900
you're going to use the Gamma
Filter we're going to talk about next.

00:31:30.900 --> 00:31:34.240
Because brightness just
adds to the entire range,

00:31:34.240 --> 00:31:37.220
what was black, well, it can't be black.

00:31:37.220 --> 00:31:39.920
If you had just one unit of brightness,
what was black of zero becomes one,

00:31:39.920 --> 00:31:44.620
and all of a sudden,
your black becomes sort of a dirty gray.

00:31:44.620 --> 00:31:47.350
So if you're using brightness filters,
you're almost only ever going

00:31:47.390 --> 00:31:49.420
to use it with negative values.

00:31:49.420 --> 00:31:55.550
And the goal of using the brightness is
to make elements that should be black,

00:31:56.060 --> 00:31:57.840
like white text in a black
background for title card,

00:31:57.840 --> 00:31:59.390
or fade to back, that kind of stuff.

00:31:59.500 --> 00:32:00.910
You might turn the
brightness down a little bit,

00:32:00.910 --> 00:32:03.120
just so that it becomes
all the way down to zero.

00:32:03.120 --> 00:32:05.800
Now, typically,
we have rendered graphics,

00:32:05.800 --> 00:32:08.640
like you're rendering out
from Final Cut or whatever

00:32:08.700 --> 00:32:10.050
with a black background.

00:32:10.060 --> 00:32:11.300
It's going to stay black throughout.

00:32:11.300 --> 00:32:12.960
You don't have to worry about that.

00:32:12.960 --> 00:32:14.800
But if you have any
kind of analog source,

00:32:14.840 --> 00:32:17.970
those little luma values for each
pixel will be a little bit randomized.

00:32:18.000 --> 00:32:22.120
So even if when it was rendered,
they're all zeros, it goes out to beta

00:32:22.400 --> 00:32:25.350
SP and comes back again,
you get some zeros, some ones,

00:32:25.360 --> 00:32:27.720
some threes, some fives,
that kind of stuff.

00:32:27.720 --> 00:32:29.520
So you can just use
brightness a little bit,

00:32:29.560 --> 00:32:30.820
say brightness minus five.

00:32:30.820 --> 00:32:31.980
The fives go down to zero.

00:32:31.980 --> 00:32:33.730
The twos still go down to zero.

00:32:33.740 --> 00:32:35.760
The zeros stay at zero.

00:32:35.760 --> 00:32:39.740
And all of a sudden, a noisy background
becomes all the way black.

00:32:39.740 --> 00:32:44.020
So that's a negative brightness,
a slight amount,

00:32:44.170 --> 00:32:48.860
can really help make it crisper
and add some more vibrancy to it.

00:32:48.860 --> 00:32:50.180
And also,
if you have a case where you have a

00:32:50.180 --> 00:32:53.060
black background that's really noisy,
by making it really black, I mean,

00:32:53.090 --> 00:32:56.400
a big rectangle with a number zero over
and over again is very easy to compress.

00:32:56.400 --> 00:32:59.680
If you have totally random analog noise,
that's actually kind of hard for a codec.

00:32:59.680 --> 00:33:02.860
So it actually will encode
better by doing that.

00:33:03.720 --> 00:33:10.300
Contrast exaggerates how
different a pixel is from gray.

00:33:10.340 --> 00:33:12.950
So at a total mid-gray,
contrast has no effect on.

00:33:12.950 --> 00:33:15.740
Absolute black,
absolute white has the most effect on.

00:33:15.740 --> 00:33:17.490
The closer you get to
either black or white,

00:33:17.490 --> 00:33:19.400
the more effect contrast
is going to have.

00:33:20.430 --> 00:33:22.410
Now, a few years ago,
when you're doing encoding

00:33:22.410 --> 00:33:25.140
with QuickTime for the web,
you almost always had to add a plus

00:33:25.140 --> 00:33:28.100
27 contrast value in order to get
your blacks to come out as black,

00:33:28.100 --> 00:33:30.320
coming from a video source
to an output source.

00:33:30.320 --> 00:33:32.980
The good news is now QuickTime handles
all that in the background.

00:33:32.980 --> 00:33:35.440
So even if so, I still see people who
are still doing this,

00:33:35.440 --> 00:33:37.830
and they wind up getting like
a double contrast effect,

00:33:37.830 --> 00:33:40.070
and they get really
crushed blacks and whites.

00:33:40.090 --> 00:33:42.330
So again,
with really clean digital content,

00:33:42.330 --> 00:33:44.820
you normally don't need
to add contrast anymore.

00:33:44.820 --> 00:33:48.030
But that is useful for analog source,
because again, that helps push the blacks

00:33:48.100 --> 00:33:49.320
a little bit more to black.

00:33:49.380 --> 00:33:51.340
And if you have a little
bit of analog noise,

00:33:51.340 --> 00:33:53.590
it can make the whites
into a flatter white,

00:33:53.590 --> 00:33:56.810
and that'll just seem a little
more vibrant and can encode better.

00:33:56.810 --> 00:34:01.370
So when I'm using these filters,
it's almost always because I'm

00:34:01.370 --> 00:34:02.920
trying to get my blacks blacker.

00:34:02.920 --> 00:34:06.400
My general rule of thumb is I'm going
to use one unit of brightness for every

00:34:06.400 --> 00:34:08.220
unit of contrast I'm going to have.

00:34:08.220 --> 00:34:11.710
So if I have a choice between
using a minus 10 brightness

00:34:11.710 --> 00:34:16.920
to get my blacks black,
or a minus 5 brightness plus 5 contrast,

00:34:17.150 --> 00:34:22.590
the combination of plus 5 minus 5
will give me the same black effect,

00:34:22.670 --> 00:34:24.570
but it'll leave whites about the same.

00:34:24.570 --> 00:34:28.410
So it won't make the images as dark if
I use the brightness filter overall.

00:34:28.410 --> 00:34:32.950
So I'll take a look at showing
some of that stuff later on.

00:34:32.960 --> 00:34:34.480
But it's a rule of thumb.

00:34:34.480 --> 00:34:39.860
You don't want to use only brightness
or only contrast to crush your blacks.

00:34:39.860 --> 00:34:42.680
You want to use a combination of them,
and that'll leave the rest of the

00:34:42.730 --> 00:34:44.050
luma range a little more intact.

00:34:46.160 --> 00:34:48.000
Other LumaFilter we care about is Gamma.

00:34:48.000 --> 00:34:52.690
I give them in this order because
all truly virtuous processing

00:34:52.750 --> 00:34:55.800
tools put the GammaFilter
after Brightness and Contrast.

00:34:55.800 --> 00:34:58.200
Because when you laboriously
use Brightness and Contrast

00:34:58.280 --> 00:35:00.210
and your blacked out is zero,
you want it to stay at zero.

00:35:00.220 --> 00:35:03.280
If you have Gamma after that,
Gamma's not going to leave it at zero.

00:35:03.300 --> 00:35:06.360
You have the GammaFilter
before Brightness and Contrast,

00:35:06.360 --> 00:35:10.720
you wind up having the GammaFilter
changes where the zero lands,

00:35:10.730 --> 00:35:11.930
and it gets much more complex.

00:35:12.020 --> 00:35:14.620
Anyone out there making
compression tools?

00:35:16.000 --> 00:35:19.590
GammaFilter is the inverse of contrast.

00:35:20.240 --> 00:35:24.400
It has the most effect at the middle
grade and has no effect in the extremes.

00:35:25.910 --> 00:35:42.700
Video is the place to start.

00:35:42.720 --> 00:35:50.720
The complexity here is that Macs by
default use a gamma value of 1.8.

00:35:50.720 --> 00:35:52.800
Video by default uses a value of 2.2.

00:35:52.800 --> 00:35:56.220
Windows machines use
something between 2.2 and 2.5,

00:35:56.290 --> 00:35:57.920
and it's not really defined.

00:35:57.930 --> 00:36:01.730
It used to be a big problem to
make different files for Mac and

00:36:01.730 --> 00:36:03.680
Windows for all this kind of stuff.

00:36:03.680 --> 00:36:08.080
The codecs inside QuickTime that use
what's called the 2VUI color space will

00:36:08.110 --> 00:36:10.420
automatically correct the local gamma.

00:36:10.420 --> 00:36:12.700
So if you play back the file,
it'll store it in the local gamma.

00:36:12.700 --> 00:36:12.700
If you play back the file,
it'll store it in the local gamma.

00:36:12.700 --> 00:36:15.030
If you play back internally 2.2,
you play it back on a Mac,

00:36:15.030 --> 00:36:16.100
it'll just assume it's 1.8.

00:36:16.140 --> 00:36:19.190
Play it back on a Windows machine,
it'll assume it's 2.5,

00:36:19.200 --> 00:36:21.220
and play it back correspondingly.

00:36:21.280 --> 00:36:25.210
The complexity is it's not actually
reading whatever the gamma value it is.

00:36:25.210 --> 00:36:27.080
If you've gone into your
monitor's control panel and

00:36:27.210 --> 00:36:29.990
specified a different gamma value,
it's going to ignore that value.

00:36:30.000 --> 00:36:32.500
It just assumes every Mac in
the world's a gamma of 1.8.

00:36:32.510 --> 00:36:34.750
If you told the system differently,
it doesn't care.

00:36:34.870 --> 00:36:36.510
Same thing with Windows.

00:36:36.510 --> 00:36:38.470
It has no way to actually
get the real value.

00:36:38.500 --> 00:36:40.100
It just assumes it's a 2.5 value.

00:36:40.190 --> 00:36:43.670
But still, it's a good thing to have.

00:36:43.730 --> 00:36:45.580
And so the good news is if you
want to make a single file that

00:36:45.580 --> 00:36:48.290
looks the same on Mac and Windows,
use a 2VUI codec,

00:36:48.290 --> 00:36:52.220
which MPEG-4 is the best
distribution option right now.

00:36:52.350 --> 00:36:55.740
If you were using Sorenson,
you want to make a Sorenson file on a

00:36:55.740 --> 00:36:59.790
Mac that will play back on Windows right,
you do need to add about a plus

00:36:59.820 --> 00:37:01.990
30 gamma for it to look identical

00:37:04.420 --> 00:37:06.950
Next kind of filter we
look at is noise reduction.

00:37:06.950 --> 00:37:09.360
And noise reduction is kind
of like a smart blur filter.

00:37:09.360 --> 00:37:14.260
The idea behind that is to try to take
out parts of the image that aren't image,

00:37:14.260 --> 00:37:14.870
but are noise.

00:37:14.870 --> 00:37:17.840
I mean, grain or random analog stuff.

00:37:17.840 --> 00:37:20.150
Blur those out,
but try to keep the actual

00:37:20.410 --> 00:37:23.600
content like sharp lines,
text, all that stuff intact.

00:37:23.600 --> 00:37:26.040
And these are hard things to do.

00:37:26.040 --> 00:37:28.930
I mean, even the best algorithms will
blur more than you want them to,

00:37:29.020 --> 00:37:32.240
but it's better than just throwing a
Gaussian blur over the entire image.

00:37:33.900 --> 00:37:37.020
The way different tools
implement this vary a lot.

00:37:37.020 --> 00:37:39.990
You got, you know,
some have like things called

00:37:39.990 --> 00:37:42.880
grain killer or grain suppress,
which can work for some kinds of noise.

00:37:42.880 --> 00:37:45.030
They have also temporal
noise reduction filters.

00:37:45.150 --> 00:37:45.840
It varies a lot.

00:37:45.860 --> 00:37:49.660
The thing is, if you have source that's
got really bad analog noise,

00:37:49.660 --> 00:37:51.370
you're pretty much hosed.

00:37:51.410 --> 00:37:54.050
These filters can take you from mediocre,
from like bad to like

00:37:54.050 --> 00:37:56.750
nearly mediocre in quality,
but you're never going to actually

00:37:56.750 --> 00:37:59.880
be able to get good quality output by
using noise reduction if it's noisy.

00:37:59.880 --> 00:38:01.990
It's better than nothing,
but it's much better to

00:38:01.990 --> 00:38:03.140
have noise reduction.

00:38:03.260 --> 00:38:04.940
It's much better to have
clean source to begin with,

00:38:04.940 --> 00:38:06.900
and you can't ever fake clean source.

00:38:06.930 --> 00:38:10.400
Kind of like you can never make high
definition for real out of standard def.

00:38:10.520 --> 00:38:12.020
Next up is audio normalization.

00:38:12.210 --> 00:38:16.330
For the most part, audio does not require
a lot of preprocessing,

00:38:16.620 --> 00:38:19.820
especially if it's something
that's mixed for TV or DVD,

00:38:19.820 --> 00:38:20.420
something like that.

00:38:20.420 --> 00:38:23.020
That's going to encode pretty well
for the web at reasonable bit rates.

00:38:23.020 --> 00:38:26.460
The one thing I often want
to do is audio normalization.

00:38:26.480 --> 00:38:28.460
If you have a clip where the
overall level is just too low,

00:38:28.460 --> 00:38:32.100
what normalization will do is it
will find the loudest single sample,

00:38:32.100 --> 00:38:36.430
and then it will either raise
or lower the overall volume,

00:38:36.430 --> 00:38:40.460
keeping the dynamic range intact,
but just changing the overall amplitude.

00:38:40.500 --> 00:38:42.690
to a specified value.

00:38:42.700 --> 00:38:46.220
And typically, minus 3 dB is good for
most modern codecs.

00:38:46.220 --> 00:38:49.640
Some QuickTime tools use the
default about minus 6 dB,

00:38:49.640 --> 00:38:54.840
because the old QDesign 1 codec had
trouble with things that were near peak,

00:38:54.840 --> 00:38:57.760
but you don't care about that anymore,
so minus 3 is just fine these days.

00:38:57.760 --> 00:39:00.280
You don't want to go all
the way to 0 dB peak,

00:39:00.550 --> 00:39:04.210
because there are some codecs
that will just... When you're

00:39:04.350 --> 00:39:07.630
codecs at approximation,
you can wind up having to try to

00:39:07.630 --> 00:39:10.810
give a digital value that is not
possible to express with a codec,

00:39:10.810 --> 00:39:12.700
which can give you a
little audible distortion.

00:39:12.720 --> 00:39:15.320
So it's a good rule of
thumb to go to minus 3 dB.

00:39:17.050 --> 00:39:19.020
You might use some other filtering.

00:39:19.030 --> 00:39:21.280
And typically,
these are kind of going beyond

00:39:21.280 --> 00:39:24.090
the realm of audio processing
and preprocessing off to like,

00:39:24.090 --> 00:39:26.710
you know, you're doing some kind of cool
audio work to clean up bad

00:39:26.760 --> 00:39:28.470
source audio restoration stuff.

00:39:28.480 --> 00:39:31.750
Doing compression,
basically making the quieter

00:39:31.810 --> 00:39:35.410
parts of the audio louder,
or even the loud parts loud.

00:39:35.420 --> 00:39:37.910
You're targeting a 3GPP
kind of playback device.

00:39:37.940 --> 00:39:40.790
A playback on a cell phone, you know,
subtle dialogue is not going

00:39:40.790 --> 00:39:42.210
to be audible for most people.

00:39:42.220 --> 00:39:45.140
So often, limited dynamic range
there can help a lot.

00:39:46.160 --> 00:39:48.030
Notched filters,
we've got like hum and that kind of stuff

00:39:48.080 --> 00:39:49.480
in the background can work quite well.

00:39:49.480 --> 00:39:50.320
Same with noise removal.

00:39:50.320 --> 00:39:52.830
Your compression tools aren't going
to have this kind of filtering

00:39:52.830 --> 00:39:53.920
in them for the most part.

00:39:53.920 --> 00:39:56.700
So if you have clips you need to
apply this kind of stuff with,

00:39:56.760 --> 00:39:59.000
you're diving into some
kind of pro audio tool.

00:40:01.300 --> 00:40:12.800
[Transcript missing]

00:40:13.600 --> 00:40:19.430
This is the interactive portion of it.

00:40:19.460 --> 00:40:21.760
We've got about 36 minutes left here.

00:40:23.940 --> 00:40:27.230
I've got FilmSource, I've got NTSC,
I might even have a

00:40:27.270 --> 00:40:28.300
couple of Palo Clips here.

00:40:28.300 --> 00:40:31.570
I've got every compression
tool known to humanity.

00:40:31.950 --> 00:40:36.080
Anyone have a preprocessing project
they're working on with a particular

00:40:36.110 --> 00:40:37.800
tool they want to see how to do?

00:40:37.800 --> 00:40:39.800
Or that kind of stuff?

00:40:39.800 --> 00:40:41.800
Someone got a question for me?

00:40:41.800 --> 00:40:44.590
Have you demonstrated
one of these techniques?

00:40:45.260 --> 00:40:47.340
Some of this will be on microphones.

00:40:47.340 --> 00:40:48.980
You mean,
if we go to the microphone back there,

00:40:48.980 --> 00:40:51.300
so we can get it recorded in audio?

00:40:53.230 --> 00:40:57.750
Hi, I'm Scott Thompson from NewTek,
and I'd just like to see some DV source,

00:40:57.780 --> 00:41:01.780
maybe,
recompressed down to maybe 320 by 240.

00:41:01.780 --> 00:41:05.280
Okay, do you have a picker tool you use
for doing that kind of processing?

00:41:05.280 --> 00:41:06.560
Nothing in particular.

00:41:06.740 --> 00:41:09.230
I use MediaCleaner once
in a while if I do that,

00:41:09.230 --> 00:41:10.740
or something like that.

00:41:10.760 --> 00:41:12.950
Sure, we can dive into Cleaner.

00:41:12.950 --> 00:41:14.450
This is Cleaner 6.

00:41:14.450 --> 00:41:17.960
I don't know if anyone from Discrete's
been around to the show at all.

00:41:18.100 --> 00:41:22.200
We haven't had a new... It's
like a beta of Cleaner 6.02.

00:41:22.200 --> 00:41:25.530
It's about a year old now,
but that's the last thing we saw of it.

00:41:25.540 --> 00:41:27.080
I've actually had a
real release of Cleaner,

00:41:27.160 --> 00:41:28.800
even a point release,
for over a year now.

00:41:28.800 --> 00:41:34.630
I fear Cleaner may be done,
but it's still useful for a lot of stuff.

00:41:34.640 --> 00:41:36.950
They actually have a pretty good
design for tram preprocessing off.

00:41:37.000 --> 00:41:39.230
This clip here is called NASA.move.

00:41:39.230 --> 00:41:41.420
It's a pretty interesting one here.

00:41:43.900 --> 00:41:53.500
[Transcript missing]

00:41:54.180 --> 00:41:57.300
It has blanking on the edges here.

00:41:57.300 --> 00:41:59.410
See the little black
line there a little bit?

00:41:59.580 --> 00:42:01.570
And it's also letterboxed.

00:42:01.680 --> 00:42:07.530
So, first thing we want to do is we want
to be able to crop out that stuff.

00:42:11.250 --> 00:42:13.000
So, this is a 4x3 source.

00:42:13.000 --> 00:42:17.250
If it was mostly just a 720x480,
we'd get an image like that.

00:42:17.320 --> 00:42:20.360
When I say about cleaners,
we could tell it to, okay,

00:42:20.380 --> 00:42:22.800
show it to me as a 4x3 source clip,
and it'll show it to me correctly.

00:42:22.800 --> 00:42:25.600
If it's 60x9,
you could flag it like that as well.

00:42:25.600 --> 00:42:28.290
I'll need to assign a preset to it.

00:42:33.490 --> 00:42:36.400
First thing I'm going to do is crop it.

00:42:36.400 --> 00:42:40.910
This little crop filter here.

00:42:40.910 --> 00:42:44.590
All I need to do here is
grab it and draw a box.

00:42:47.700 --> 00:43:01.200
[Transcript missing]

00:43:01.400 --> 00:43:05.020
"It's like some archival footage.

00:43:05.020 --> 00:43:09.300
Often you'll have things where it's
the frame will vary a little bit.

00:43:09.300 --> 00:43:10.700
There's a spatial.

00:43:10.710 --> 00:43:12.590
See right here in this frame,
even though all the

00:43:12.630 --> 00:43:14.110
other frames are good,
there's actually a little bit more

00:43:14.110 --> 00:43:15.220
letterbox in this frame here or there.

00:43:15.220 --> 00:43:19.210
So I actually have to go
a little bit tighter here.

00:43:19.910 --> 00:43:22.120
One thing you have to watch out for,
and I'm going to see if this

00:43:22.190 --> 00:43:24.780
monitor is off at the very edge,
you see a little bit of distortion.

00:43:24.780 --> 00:43:27.030
You can see that the first
line of video is a little bit

00:43:27.030 --> 00:43:28.520
wider than the line before it.

00:43:28.520 --> 00:43:33.570
So you don't want to crop at least
one pixel from the top and bottom just

00:43:33.570 --> 00:43:36.570
to get outside the distortion range.

00:43:36.600 --> 00:43:37.710
It'll look a little bit funky.

00:43:37.710 --> 00:43:39.610
Your top and bottom lines
are often a little bit off.

00:43:39.670 --> 00:43:42.850
So here we've cropped in about one
or two lines from the start of it.

00:43:42.970 --> 00:43:45.180
And that's grabbed us
our whole thing there.

00:43:49.800 --> 00:43:53.010
All right, so.

00:43:58.240 --> 00:44:00.820
I'm cropping unconstrained
because I didn't-- yeah,

00:44:00.840 --> 00:44:03.500
you can also just do a 16 by 9.

00:44:03.500 --> 00:44:06.520
If I was going that to DVD,
I would definitely do a 16 by 9.

00:44:06.560 --> 00:44:09.080
But I don't know if this is quite-- yeah,
it's about 16 by 9 there.

00:44:09.080 --> 00:44:10.090
Yeah, you can do it either way.

00:44:10.180 --> 00:44:14.660
So in this case, if you know you want
output to exactly 16 by 9,

00:44:14.660 --> 00:44:16.600
you can set it in that value.

00:44:16.600 --> 00:44:20.580
Or also, you can even do a custom
aspect ratio if you happen to

00:44:20.580 --> 00:44:22.690
know it's a particular thing.

00:44:22.690 --> 00:44:24.500
In this case, we know it's 16 by 9.

00:44:24.500 --> 00:44:24.500
And we can just do a box like that.

00:44:24.920 --> 00:44:28.530
and this is one of the cropping out a lot
of other frames that we don't need to.

00:44:28.770 --> 00:44:31.630
Most compression tools only
let you do global settings,

00:44:31.630 --> 00:44:33.040
you have to do setting overall.

00:44:33.070 --> 00:44:34.710
If you really need to do a
lot of tweaking per thing,

00:44:34.710 --> 00:44:37.330
I tend to dive into After Effects and
do all those filters there,

00:44:37.330 --> 00:44:40.950
if I need to do different
processing on a per frame basis.

00:44:41.050 --> 00:44:43.240
Which ends up being pretty
labor intensive and expensive,

00:44:43.240 --> 00:44:43.900
but you know.

00:44:43.990 --> 00:44:47.450
So that's how we set the crop up,
and the processing side

00:44:47.460 --> 00:44:49.500
is pretty straightforward.

00:44:49.500 --> 00:44:49.500
Let's just say I'm making a

00:44:50.150 --> 00:44:52.090
I would say, first, deinterlace.

00:44:52.090 --> 00:44:55.020
I want to make sure I have
the adaptive mode on.

00:44:55.020 --> 00:44:56.750
That gives me the adaptive deinterlace.

00:44:56.750 --> 00:44:58.950
Image size, 320 by 240, like that.

00:44:59.000 --> 00:45:01.880
Cleaner, by default,
has a sharpen filter turned on.

00:45:01.880 --> 00:45:05.140
You do not want to use a sharpen
filter for most preprocessing.

00:45:05.140 --> 00:45:08.570
Sharpen makes it a little
crisper before you encode it,

00:45:08.580 --> 00:45:10.600
but sharpen adds noise as well.

00:45:10.740 --> 00:45:13.760
It will typically give you more
artifacts on playback because it

00:45:13.760 --> 00:45:16.940
will tend to exaggerate any noise
as well as make edges sharper.

00:45:16.940 --> 00:45:18.000
So always leave sharpen off.

00:45:18.080 --> 00:45:20.140
The adaptive noise reduction
on Cleaner is pretty good,

00:45:20.150 --> 00:45:21.120
so you can leave that on.

00:45:21.200 --> 00:45:22.950
Also, you have these filters here.

00:45:22.980 --> 00:45:25.180
Look at gamma, brightness, and contrast.

00:45:25.230 --> 00:45:28.720
The default settings are somewhat random.

00:45:28.740 --> 00:45:31.460
They were designed for Cleaner 5,
and Cleaner 6 is a different

00:45:31.510 --> 00:45:33.230
processing mode for how it does video.

00:45:33.240 --> 00:45:35.040
So actually,
you wind up having different values.

00:45:35.080 --> 00:45:40.700
It's a great little utility you get.

00:45:40.700 --> 00:45:46.800
Let's see what we can get with Mac OS X.

00:45:48.010 --> 00:45:49.170
I use all the time for
this kind of stuff.

00:45:49.170 --> 00:45:51.160
It's called Digital Color Meter.

00:45:51.160 --> 00:45:53.380
If you've got Mac OS,
I think it's from 10.1 on.

00:45:53.380 --> 00:45:54.630
It just comes free with the OS.

00:46:05.440 --> 00:46:08.080
and what it does is you just point
at a place in the screen that will

00:46:08.140 --> 00:46:10.340
tell you the RGB value of that point.

00:46:10.360 --> 00:46:12.940
And Cleaner really ought to
incorporate this built into it.

00:46:12.940 --> 00:46:14.840
It would be very useful, but it doesn't.

00:46:15.130 --> 00:46:20.370
So what we can do here is we can just go
over here and look at our values and see

00:46:20.370 --> 00:46:20.370
how they look and all that kind of stuff.

00:46:20.760 --> 00:46:26.030
And we can say, like,
let's pick a frame like this.

00:46:28.800 --> 00:46:35.700
[Transcript missing]

00:46:42.030 --> 00:47:06.700
This is a preview window here.

00:47:06.700 --> 00:47:06.700
Hello, did I not?

00:47:06.700 --> 00:47:06.700
Where are we?

00:47:06.700 --> 00:47:06.700
What's the problem here?

00:47:06.700 --> 00:47:06.700
Quick time.

00:47:06.700 --> 00:47:06.700
Oh, I didn't apply it, yes.

00:47:06.700 --> 00:47:06.700
I've not been using
Cleaner as much lately.

00:47:06.700 --> 00:47:06.700
It's kind of... It's like
sort of the dominant tool of

00:47:06.700 --> 00:47:06.700
my career for a long time,
but it's getting so buggy these days,

00:47:06.700 --> 00:47:06.700
it's kind of hard.

00:47:06.700 --> 00:47:06.700
I wind up not using it as I used to here.

00:47:06.700 --> 00:47:06.700
Well, I had applied, didn't I?

00:47:06.700 --> 00:47:06.700
Maybe it was one of the
bugs I was talking about.

00:47:06.700 --> 00:47:06.700
Yeah.

00:47:06.700 --> 00:47:06.700
Setting default.

00:47:09.900 --> 00:47:21.900
[Transcript missing]

00:47:27.800 --> 00:47:45.400
[Transcript missing]

00:47:47.100 --> 00:48:07.000
[Transcript missing]

00:48:10.160 --> 00:48:11.280
1 to 0 is around.

00:48:11.280 --> 00:48:12.310
OK, let's go to 10.

00:48:12.320 --> 00:48:18.030
Dash goes pretty much there.

00:48:18.100 --> 00:48:28.700
[Transcript missing]

00:48:29.720 --> 00:48:35.610
You're going back to and making sure
it's going to look at further frames.

00:48:35.610 --> 00:48:37.770
Because Cleaner and other
tools like Compressor only

00:48:37.770 --> 00:48:38.890
give you a global setting.

00:48:38.900 --> 00:48:43.980
Did you forget my crop box now?

00:48:43.980 --> 00:48:46.970
You're just killing me here.

00:49:03.210 --> 00:49:03.450
Oh, right.

00:49:03.490 --> 00:49:07.330
We're not going to do 13 by 240 at all,
of course, because we're doing 60 by 9.

00:49:07.380 --> 00:49:09.270
It's actually 320 by 180.

00:49:12.300 --> 00:49:12.930
there.

00:49:13.180 --> 00:49:18.340
Confuse myself by giving you a-- OK.

00:49:18.490 --> 00:49:19.210
Right, that's for sure there.

00:49:19.280 --> 00:49:21.500
And before and after here,
the A/B slider shows the

00:49:21.500 --> 00:49:22.730
effects of image processing.

00:49:22.730 --> 00:49:24.840
So, right there we're seeing the
effects of having thrown in

00:49:24.850 --> 00:49:26.000
that brightness and contrasting.

00:49:26.000 --> 00:49:27.870
You can see it's a little
bit darker overall.

00:49:28.150 --> 00:49:29.860
Ideally,
if you're doing image processing,

00:49:29.870 --> 00:49:31.840
it shouldn't feel like
you're modifying the video.

00:49:31.840 --> 00:49:34.280
It should feel like you're kind of
peeling a layer of grime off it.

00:49:34.280 --> 00:49:36.290
It's the effect you're trying to go for.

00:49:36.360 --> 00:49:39.180
It shouldn't seem overly
dark and that kind of stuff.

00:49:39.270 --> 00:49:41.050
So, before and after, too bad.

00:49:41.050 --> 00:49:42.450
It's a little bit darker.

00:49:42.450 --> 00:49:44.580
It gives a little more richness to it.

00:49:44.620 --> 00:49:46.940
The original video had
kind of weird black levels.

00:49:47.200 --> 00:49:48.420
All right.

00:49:48.880 --> 00:49:50.820
Looks pretty good like that.

00:49:51.760 --> 00:49:54.250
and then so I'm pretty happy as
image settings there and then

00:49:54.250 --> 00:49:56.910
the audio side of it just do a.

00:49:58.240 --> 00:50:02.820
"Normalized 90% and 90% in cleaners
about minus 3 dB are good to go.

00:50:02.830 --> 00:50:07.180
And that's pretty much all we need to
do to do a preprocessing in cleaner.

00:50:07.180 --> 00:50:09.500
So, did that look like what
you're talking about?

00:50:09.830 --> 00:50:13.190
Any questions about
that or specifics there?

00:50:13.190 --> 00:50:18.050
Alright, cool.

00:50:18.970 --> 00:50:18.990
We got a question over there?

00:50:18.990 --> 00:50:18.990
Yeah."

00:50:23.500 --> 00:50:26.840
We are aware of the normalized
function in Cleaner.

00:50:26.840 --> 00:50:29.560
We're also aware of it in Logic,
for example.

00:50:29.580 --> 00:50:31.990
But we have a lot of video
coming in to Final Cut Pro,

00:50:31.990 --> 00:50:35.110
and our users do not really know
how to handle normalization.

00:50:35.120 --> 00:50:36.600
I'm getting some echo right there.

00:50:36.680 --> 00:50:38.700
Can we get a little
closer to your microphone?

00:50:38.700 --> 00:50:39.170
Yeah.

00:50:39.170 --> 00:50:43.320
Are you aware of a plug-in available,
an audio plug-in for normalization

00:50:43.330 --> 00:50:45.760
that we could plug into Final Cut Pro?

00:50:45.760 --> 00:50:46.360
Hmm.

00:50:46.360 --> 00:50:50.280
Because we have a lot of dirty
audio coming in and video,

00:50:50.280 --> 00:50:53.470
and our users don't really know how
to handle normalization manually.

00:50:53.500 --> 00:50:53.550
Hmm.

00:50:53.560 --> 00:50:56.170
I can't imagine that someone
hasn't done one of those,

00:50:56.180 --> 00:50:58.600
but I can't, off the top of my head,
name one.

00:50:58.600 --> 00:51:01.070
Does anyone know of a normalized
plug-in for Final Cut?

00:51:03.820 --> 00:51:04.700
Say that again?

00:51:04.700 --> 00:51:05.700
Waves.

00:51:05.700 --> 00:51:06.700
Oh, Waves.

00:51:06.700 --> 00:51:06.700
Yeah, Waves.

00:51:06.700 --> 00:51:08.700
But is it really a normalized plugin?

00:51:08.700 --> 00:51:10.540
You know, like as simple as this?

00:51:10.540 --> 00:51:12.250
Because Waves is usually too good.

00:51:12.260 --> 00:51:13.820
Too many variables.

00:51:13.820 --> 00:51:14.820
Yeah.

00:51:14.820 --> 00:51:15.820
Yeah.

00:51:16.350 --> 00:51:16.700
Yeah.

00:51:20.200 --> 00:51:49.300
[Transcript missing]

00:51:51.750 --> 00:52:22.490
Daniel Benner,
University of Texas What are

00:52:22.490 --> 00:52:28.470
some best practices for importing
the video in Final Cut without

00:52:28.590 --> 00:52:31.700
having to render all the time?

00:52:31.980 --> 00:52:36.540
You've got SVHS tape.

00:52:36.640 --> 00:52:37.650
It's pretty straightforward.

00:52:37.730 --> 00:52:41.700
I'm in love with the AJA.io systems.

00:52:41.700 --> 00:52:46.690
For a grand or so, they have a full one
that is SDI and analog.

00:52:46.690 --> 00:52:50.700
You can buy a $1,000 one
that's small and analog.

00:52:50.740 --> 00:52:54.700
You can get an AJA.io that will take
your S-video input and your XLR audio.

00:52:54.700 --> 00:52:58.910
If you have a professional
or industrial SVHS deck,

00:52:58.910 --> 00:53:05.460
like I've got an AJ555 Panasonic,
and that's a device controllable

00:53:05.460 --> 00:53:07.700
XLR audio out SVHS deck.

00:53:07.720 --> 00:53:08.650
Plug that straight into the AJA.

00:53:08.650 --> 00:53:11.700
It'll put the firewire into
your Mac to run Final Cut,

00:53:11.700 --> 00:53:13.860
and it will be able to
give you device control,

00:53:13.860 --> 00:53:17.160
10-bit uncompressed capture,
balanced audio off your

00:53:17.160 --> 00:53:19.700
SVHS tape into Final Cut.

00:53:19.700 --> 00:53:24.700
And then, you know, just in a G5,
you'll have multiple real-time effects

00:53:24.700 --> 00:53:29.700
on the G5 just in software from that
capture using the uncompressed codec.

00:53:29.850 --> 00:53:35.300
Would it be bad to take the S-video
from a S-video deck and then go

00:53:35.300 --> 00:53:38.700
into the back of a DV deck and then
capture it via firewire that way?

00:53:38.700 --> 00:53:39.610
Yes.

00:53:39.710 --> 00:53:40.140
Yeah.

00:53:40.210 --> 00:53:42.700
Because the DV codec is only 25 megabits.

00:53:42.700 --> 00:53:45.700
It uses only a very
limited 4:1:1 color space.

00:53:45.700 --> 00:53:48.700
DV is a fine acquisition format.

00:53:48.700 --> 00:53:51.700
I mean, if you're just like shooting
things in the world with DV,

00:53:51.700 --> 00:53:52.700
it's fine.

00:53:52.700 --> 00:53:55.440
But when you try to convert anything
to it that's already got analog noise

00:53:55.440 --> 00:53:56.700
in it or if it's got motion graphics,
that kind of stuff,

00:53:56.800 --> 00:54:00.580
the DV codec's really not robust enough
to be the second generation of anything.

00:54:00.700 --> 00:54:02.700
So, I mean, yeah, if you do it,
it would work.

00:54:02.700 --> 00:54:04.700
You'd get video out of it.

00:54:04.700 --> 00:54:08.650
But the red I'm talking about gives
you a substantially higher quality.

00:54:08.700 --> 00:54:11.350
And also, if you have a good VHS tape
and you have something with

00:54:11.360 --> 00:54:13.960
a good time-based corrector,
and all those analog things which most

00:54:13.970 --> 00:54:16.880
of us have unfortunately been able
to forget about come back into play,

00:54:16.890 --> 00:54:17.700
right?

00:54:17.700 --> 00:54:21.660
I mean, you spend a bundle on cables and
proc amps and all this kind of stuff.

00:54:21.830 --> 00:54:22.700
But it's not too bad.

00:54:22.700 --> 00:54:26.070
I mean, in the AJA system, actually,
I'm very pleased that it's like,

00:54:26.070 --> 00:54:28.750
you know, a straightforward, cheap,
you can plug it into a laptop,

00:54:28.760 --> 00:54:30.700
all that kind of stuff,
set up for doing that kind of work.

00:54:30.700 --> 00:54:32.700
Does that convert it to DV?

00:54:32.700 --> 00:54:34.700
No, it can if you want.

00:54:34.700 --> 00:54:35.700
It can convert it to DV.

00:54:35.700 --> 00:54:37.700
You can leave it as uncompressed,
8-bit or 10-bit.

00:54:37.700 --> 00:54:40.610
It can convert to DV50,
convert it to DV25.

00:54:40.700 --> 00:54:41.920
Whatever you want.

00:54:41.920 --> 00:54:43.700
And motion JPEG, I assume.

00:54:43.760 --> 00:54:44.640
Thanks.

00:54:44.870 --> 00:54:45.690
Great.

00:54:47.520 --> 00:54:49.960
Hey, François Nenoune-Machère, Capgemini.

00:54:49.960 --> 00:54:55.160
I'm using a cleaner.

00:54:55.160 --> 00:54:57.370
I've been using a cleaner
for a lot of time,

00:54:57.370 --> 00:55:01.440
but I'm a bit concerned about its future.

00:55:01.440 --> 00:55:02.060
Yeah.

00:55:02.060 --> 00:55:05.750
What kind of product, equivalent product,
would you advise?

00:55:05.780 --> 00:55:10.980
The two actively,
the products that have active engineering

00:55:10.980 --> 00:55:13.840
on them for Mac encoding tools.

00:55:14.540 --> 00:55:18.140
Obviously, Apple's got Compressor,
which I'm not sure if it's...

00:55:18.750 --> 00:55:20.130
Compressor's pretty good for some stuff.

00:55:20.250 --> 00:55:21.330
It's got some limitations.

00:55:21.330 --> 00:55:24.390
It can't do like two-pass VBR with
Sorensen encoding and that kind of stuff.

00:55:24.460 --> 00:55:29.000
As the 264 codec becomes dominant
in QuickTime over next year,

00:55:29.000 --> 00:55:32.970
I would expect that Compressor will be
relatively more useful because it'll

00:55:32.970 --> 00:55:36.190
have access to a codec that's a lot
more competitive than it does right now.

00:55:36.220 --> 00:55:42.410
Sorensen Squeeze is a major,
major new version that's been announced.

00:55:42.410 --> 00:55:43.080
It's been in beta.

00:55:43.080 --> 00:55:44.020
It should be in a few months.

00:55:44.240 --> 00:55:46.940
Squeeze 4,
pretty much a whole new tool really

00:55:46.940 --> 00:55:48.980
aimed squarely at the cleaner space.

00:55:48.980 --> 00:55:50.760
And Sorensen's working
hard to make that work.

00:55:50.860 --> 00:55:53.460
And they've got 264, and they've got all
kinds of stuff in there.

00:55:53.460 --> 00:55:56.410
And that should be,
that looks probably promising as well.

00:55:56.420 --> 00:55:59.000
And a few months.

00:55:59.040 --> 00:56:00.800
And there's Popwire's Compression Master.

00:56:00.800 --> 00:56:03.160
That's out now.

00:56:03.160 --> 00:56:04.770
It's really good.

00:56:04.780 --> 00:56:06.480
It's mainly an MPEG-4 tool.

00:56:06.480 --> 00:56:10.740
It can make great MPEG-4
inside .mov files and MPEG-4

00:56:10.740 --> 00:56:13.130
files and also 3GPP files.

00:56:13.940 --> 00:56:15.540
For doing 2Paths and
all that kind of stuff.

00:56:15.540 --> 00:56:18.340
So if you want to use the MPEG-4
codec and almost any flavor of it,

00:56:18.440 --> 00:56:20.840
Compression Master is my
favorite tool right now.

00:56:20.840 --> 00:56:23.860
But if you want to make
really good .mov files,

00:56:23.860 --> 00:56:25.720
Cleaner is still the
best thing out there.

00:56:25.720 --> 00:56:27.440
It's got some unique
features only it has.

00:56:27.560 --> 00:56:30.100
As far as being able to peak
data rate for 2Paths VBR.

00:56:30.100 --> 00:56:34.310
It can automatically do an audio
sync fix for B-frame content,

00:56:34.320 --> 00:56:34.900
that kind of stuff.

00:56:34.930 --> 00:56:39.410
So I mean, I still use,
I expect as long as I need to

00:56:39.410 --> 00:56:42.340
create legacy Cleaner content,
I mean legacy QuickTime content,

00:56:42.420 --> 00:56:44.440
I'm going to keep on using
Cleaner for keeping around on

00:56:44.440 --> 00:56:45.640
the hard drive for years to come.

00:56:45.640 --> 00:56:48.750
Even though it seems unlikely at
this point they'll ever see any more

00:56:48.750 --> 00:56:50.440
releases for it or even bug fixes.

00:56:50.440 --> 00:56:50.990
I don't know.

00:56:51.030 --> 00:56:52.990
I mean,
Discrete says they got some engineers

00:56:52.990 --> 00:56:56.120
working on something related to Cleaner,
but they won't say what or

00:56:56.120 --> 00:56:58.280
how or even which version of
it and that kind of stuff.

00:56:58.280 --> 00:57:01.180
And the beta of 6.0.2 came
out almost a year ago.

00:57:01.180 --> 00:57:03.320
And they haven't even like
released it for real yet.

00:57:03.320 --> 00:57:04.850
It's still in beta for all this time.

00:57:04.860 --> 00:57:08.270
So that's required for
Panther compatibility.

00:57:08.430 --> 00:57:10.940
So we're talking about Tiger now,
so it's not a very good sign.

00:57:10.940 --> 00:57:15.270
So, um... Yeah, so we're getting there.

00:57:15.340 --> 00:57:19.340
I just had a comment about the VHS to DV.

00:57:19.340 --> 00:57:24.340
There's also the early Sony decks
and things that have head-to-head

00:57:24.340 --> 00:57:29.340
transfers from cableless and it has
TBC and some other things on it too.

00:57:29.340 --> 00:57:32.330
So it actually does some
sweetening of the signal as well.

00:57:32.340 --> 00:57:35.340
Yeah, so there are ways you
can make it work with DV.

00:57:35.340 --> 00:57:37.700
Just the DV bitstream itself,
I don't... I mean,

00:57:37.700 --> 00:57:41.340
if you're on a budget and you
just need the video in any form,

00:57:41.340 --> 00:57:41.340
it can work.

00:57:41.340 --> 00:57:43.040
But if what you care about
is really high quality,

00:57:43.160 --> 00:57:44.040
that's a limitation.

00:57:44.190 --> 00:57:49.040
So I actually got a project
here called VHS Ugly File,

00:57:49.040 --> 00:57:51.600
which I decided like,
what is the worst nastiest

00:57:51.600 --> 00:57:54.040
analog garbage you can imagine?

00:57:55.880 --> 00:57:56.450
Which is hard.

00:57:56.460 --> 00:58:02.000
I had some guys,
like a fourth generation EP mode VHS dub.

00:58:04.300 --> 00:58:25.200
[Transcript missing]

00:58:25.650 --> 00:58:28.630
I can talk a little bit about what
we can do to make this thing better,

00:58:28.770 --> 00:58:31.740
which is not a whole lot.

00:58:34.000 --> 00:58:39.700
[Transcript missing]

00:58:44.090 --> 00:58:47.170
One thing about video that's
important to realize is that no

00:58:47.170 --> 00:58:49.880
matter how bad the frames are,
the motion is always really good.

00:58:49.900 --> 00:58:52.950
Even if it's a really bad,
horrible generation of SVHS thing.

00:58:52.980 --> 00:58:55.020
So the thing you really
need to try to do it is,

00:58:55.020 --> 00:58:57.040
when you have bad
quality video like this,

00:58:57.040 --> 00:59:00.660
is make the frame size small
and keep the frame rate high.

00:59:00.740 --> 00:59:04.310
Because you've got 60 fields
a second of motion here,

00:59:04.450 --> 00:59:08.620
so make a 320x240 60 frame
a second video out of it.

00:59:09.360 --> 00:59:12.390
Because that'll give you, you know,
you shrink it down a lot,

00:59:12.410 --> 00:59:14.700
it'll help average out
some of that stuff.

00:59:14.770 --> 00:59:18.030
So let me drop into After Effects and
I'll show you what you could possibly

00:59:18.030 --> 00:59:19.780
do to make this interesting clip.

00:59:23.020 --> 00:59:25.410
After Effects is overkill for
a lot of compression stuff,

00:59:25.520 --> 00:59:29.010
but you need to do weird kind
of video processing stuff.

00:59:29.060 --> 00:59:30.600
It's still kind of like
a Swiss Army Knife tool.

00:59:30.600 --> 00:59:32.440
The new version is pretty good here.

00:59:32.440 --> 00:59:35.780
It actually comes with the Synthetic
Aperture Color Finesse plugin,

00:59:35.780 --> 00:59:38.090
which is kind of beyond preprocessing.

00:59:38.100 --> 00:59:41.810
If you need to take stuff that was
shot badly and really clean it up,

00:59:41.820 --> 00:59:43.840
it's a really wonderful plugin.

00:59:43.840 --> 00:59:46.150
It's also available for Final Cut,
I believe.

00:59:46.170 --> 00:59:47.370
They're not bundled.

00:59:51.100 --> 00:59:54.890
Let's open up this horrible
piece of tripe here.

01:00:03.000 --> 01:00:12.200
[Transcript missing]

01:00:12.290 --> 01:00:16.540
Preserve edges, best quality only means
adaptability interlace.

01:00:16.540 --> 01:00:22.340
So it's not a clear defined thing,
but if you are using A for preprocessing,

01:00:22.340 --> 01:00:23.280
you definitely might have that turned on.

01:00:23.280 --> 01:00:27.260
You also do 3-2 pull-down
removal in a very nasty UI here

01:00:27.260 --> 01:00:28.700
where you have to guess it.

01:00:28.750 --> 01:00:31.780
And 6-5 is better in the past,
but After Effects totally

01:00:31.780 --> 01:00:34.350
cannot deal with any kind of
thing with a cadence break.

01:00:34.400 --> 01:00:37.160
So you have a two-hour movie,
and there's like one field that's

01:00:37.160 --> 01:00:39.850
off in order in the middle of it,
it can't do it versus tele-sending.

01:00:39.860 --> 01:00:43.680
So, each, the entire clip you work with
has to have a perfectly straight

01:00:43.680 --> 01:00:45.850
cadence throughout the entire thing.

01:00:46.060 --> 01:00:47.950
You guessed it?

01:00:48.100 --> 01:00:48.100
No, it doesn't have any.

01:00:49.160 --> 01:00:53.060
Let's see if we can see
something like that.

01:00:53.210 --> 01:00:56.100
So let's say I was going to make
a really small version of this.

01:00:56.100 --> 01:01:04.650
I could just make a 640x480 timeline,
it's not a bad place to go.

01:01:12.200 --> 01:01:34.400
[Transcript missing]

01:01:34.790 --> 01:01:37.370
So when I've done that,
I'm actually able to produce an output

01:01:37.420 --> 01:01:39.030
that's really all the way there.

01:01:39.060 --> 01:01:43.320
So there are two ways you can handle
doing things in After Effects.

01:01:43.330 --> 01:01:47.410
You can do it a full res in the comp,
and then you can do a nested comp

01:01:47.410 --> 01:01:51.880
at the final output resolution or
set it on the output resolution.

01:01:51.910 --> 01:01:54.520
It's often most informative
to actually make your comp the

01:01:54.590 --> 01:01:55.920
size you want to have it at.

01:01:55.990 --> 01:01:59.170
So if you're making a little
web video thing like that,

01:01:59.170 --> 01:02:00.790
work it at the lower size.

01:02:00.790 --> 01:02:05.470
You just need to go through and
obviously deal with the scale right.

01:02:05.470 --> 01:02:09.160
And scaling in After Effects is
kind of weird because you

01:02:09.160 --> 01:02:10.140
can't really crop per se.

01:02:10.140 --> 01:02:13.450
You just kind of scale and position it
right to give you the crop you want.

01:02:13.530 --> 01:02:16.490
So like, well, 50's not good enough.

01:02:16.490 --> 01:02:16.490
I'll do 51.

01:02:17.350 --> 01:02:22.590
Another thing about this clip is it's
got what's called tearing in VHS mode.

01:02:22.590 --> 01:02:27.300
All this stuff at the bottom is
kind of not all to an angle here.

01:02:27.300 --> 01:02:30.100
When you play it back
it just looks stupid.

01:02:30.100 --> 01:02:34.060
When you're in VHS you want to crop
all that stuff out of the bottom.

01:02:36.520 --> 01:02:42.890
So I'm going to zoom
in a little bit here.

01:02:44.000 --> 01:02:47.150
So we'll just scroll down a little bit.

01:02:47.150 --> 01:02:49.400
Pretty straightforward.

01:02:49.440 --> 01:02:52.380
And we'll get something like that.

01:02:53.100 --> 01:02:57.990
The feature that people don't
steal enough from After Effects is

01:02:57.990 --> 01:02:59.250
the all-important levels filter.

01:02:59.260 --> 01:03:01.400
This is probably the best
visual processing filter in

01:03:01.400 --> 01:03:03.720
the history of humanity here,
because it gives you an integrated

01:03:03.780 --> 01:03:04.940
histogram of black and white points.

01:03:04.940 --> 01:03:07.470
So you have a video clip that's not all
the way to black or all the way to white.

01:03:07.630 --> 01:03:09.140
You're actually able to
just see the histogram.

01:03:09.140 --> 01:03:11.270
Like, okay, this clip here is full range.

01:03:11.340 --> 01:03:11.930
It's not a problem.

01:03:11.930 --> 01:03:16.330
But you can, okay, my mid-tone, you know,
like that, all that.

01:03:17.900 --> 01:03:28.200
[Transcript missing]

01:03:28.590 --> 01:03:30.900
But generally for kind
of video like this,

01:03:30.960 --> 01:03:32.660
often the luxury gamma
can do you really good.

01:03:32.660 --> 01:03:37.130
So just a little 1.1 in gamma.

01:03:41.030 --> 01:03:47.390
is a little more presence.

01:03:47.390 --> 01:03:47.390
It depends on the clip here.

01:03:47.390 --> 01:03:47.390
So we've got what we can there.

01:03:48.050 --> 01:03:50.130
Now, yeah,
there's really little you can do

01:03:50.130 --> 01:03:51.740
on this to make it look any good.

01:03:51.890 --> 01:03:54.260
But actually,
100% size there is scaled down.

01:03:54.260 --> 01:03:55.470
It isn't that horrible.

01:03:55.480 --> 01:03:57.910
It really isn't as horrible
as you could imagine.

01:04:01.110 --> 01:04:02.410
I just got to do a little preview there.

01:04:02.450 --> 01:04:05.620
And the one part you have is you do
have a lot of difference per frame

01:04:05.620 --> 01:04:09.140
in terms of temporal noise there,
just because it varies

01:04:09.140 --> 01:04:10.500
from frame to frame.

01:04:10.500 --> 01:04:14.830
You can sometimes get some
better results by using,

01:04:15.190 --> 01:04:19.060
you've got the pro version,
your remove grain filter,

01:04:19.290 --> 01:04:22.180
some kinds of video noise you can
actually do a semi-decent job with.

01:04:22.180 --> 01:04:29.190
I won't belabor you the incredibly
complex set of things you can do on it,

01:04:29.190 --> 01:04:29.190
but...

01:04:34.570 --> 01:04:37.030
You can see sort of inside
the preview box there,

01:04:37.040 --> 01:04:39.900
you get a little bit,
little bit less effect there.

01:04:39.900 --> 01:04:41.000
And you get tuned in more.

01:04:41.140 --> 01:04:43.860
And where that really comes in is
because grain is random for every frame,

01:04:43.860 --> 01:04:46.360
but using the grain suppression filters,
it's going to try to find errors

01:04:46.360 --> 01:04:48.550
that are totally different frame
to frame and suppress those,

01:04:48.550 --> 01:04:50.380
leaving what the actual
underlying motion is.

01:04:50.380 --> 01:04:52.780
And again, it's not going to be perfect,
but it'll give you a little

01:04:52.780 --> 01:04:55.080
bit better quality and take
out some of those errors there.

01:04:57.320 --> 01:05:01.200
This session will give me a full
60 frames per second output.

01:05:01.230 --> 01:05:05.200
So if you do have that old content
you're trying to put on the web,

01:05:05.360 --> 01:05:09.200
emphasize the frame rate,
because you've got so much frame rate,

01:05:09.200 --> 01:05:11.010
and just shrink it down to the
point where the artifacts kind

01:05:11.010 --> 01:05:13.200
of disappear where you can.

01:05:13.200 --> 01:05:15.200
But also, I mean, it's always going to be
garbage in and garbage out.

01:05:15.200 --> 01:05:17.860
For a really bad source,
you could make it, again,

01:05:17.870 --> 01:05:21.200
make it less bad, but even mediocrity is
typically out of reach.

01:05:21.390 --> 01:05:25.200
Unless you're going to go in
and rotoscope the whole thing.

01:05:25.200 --> 01:05:28.070
Treat it as a source to paint over,
effectively, is the only way to do

01:05:28.070 --> 01:05:29.200
it in a lot of cases.

01:05:29.580 --> 01:05:33.200
Okay, next question.

01:05:33.580 --> 01:05:37.510
Is it up there?

01:05:37.510 --> 01:05:37.510
Yeah, come to the microphone.

01:05:40.540 --> 01:05:40.970
Hi, Ben.

01:05:40.980 --> 01:05:42.070
It's Cliff Wooden here.

01:05:42.090 --> 01:05:43.770
Just a quick question.

01:05:43.820 --> 01:05:48.560
You mentioned MPEG-4 a couple of times,
but were you meaning MPEG-4 Part 2 there,

01:05:48.560 --> 01:05:52.650
and specifically using
H.264 to refer to Part 10?

01:05:52.830 --> 01:05:54.680
Yeah, so...

01:05:55.110 --> 01:05:58.100
My parlance right now is I say MPEG-4,
I mean MPEG-4 Part 2,

01:05:58.100 --> 01:06:00.360
and if I mean MPEG-4 Part 10,
I'll say 264.

01:06:00.360 --> 01:06:04.590
That'll probably change over
time as kind of MPEG-4 becomes,

01:06:04.650 --> 01:06:07.820
five years from now when we say MPEG-4,
we're going to mean 264.

01:06:07.820 --> 01:06:11.400
Because Part 2 never really
got all that much traction,

01:06:11.400 --> 01:06:15.540
so clearly the entire MPEG-4
industry is waiting for 264,

01:06:15.540 --> 01:06:17.130
and that's going to be the
mainstream implementation of it,

01:06:17.170 --> 01:06:18.240
because it's just so much better.

01:06:18.260 --> 01:06:22.360
But today, QuickTime is only Part 2,
Part 2 simple.

01:06:23.930 --> 01:06:26.740
So that's what we're
using for stuff right now.

01:06:27.630 --> 01:06:28.670
I didn't get the fields right there.

01:06:28.670 --> 01:06:29.620
Let me turn this off.

01:06:29.640 --> 01:06:32.390
Because it's distracting when I play
back video when I'm trying to talk.

01:06:33.380 --> 01:06:38.820
Yeah, the real... Now,
one thing to bear in mind

01:06:38.820 --> 01:06:41.380
is that the... Personally,
Apple people,

01:06:41.380 --> 01:06:45.150
QuickTime's built-in MPEG-4 encoder is,
to put it charitably,

01:06:45.180 --> 01:06:47.640
more speed-optimized
than quality-optimized.

01:06:47.660 --> 01:06:52.280
So, even if you want to make a .mp4
file or .mov file with MPEG-4 codec,

01:06:52.320 --> 01:06:55.880
there are other tools like Squeeze and
Compression Master that will give

01:06:55.880 --> 01:06:59.180
you a lot better quality at lower
bit rates than Apple's encoder.

01:06:59.180 --> 01:07:02.200
So, even if people have had
kind of a... questions about

01:07:02.200 --> 01:07:04.960
MPEG-4's compression quality,
there are other tools making

01:07:05.060 --> 01:07:07.280
compatible bitstream that
can give you better results.

01:07:07.280 --> 01:07:10.340
Both Squeeze and Compression
Master have a two-pass encoding mode.

01:07:10.440 --> 01:07:12.920
You can tell it to go really
slow and really high quality,

01:07:12.920 --> 01:07:15.090
while the QuickTime encoder
is really tuned to just,

01:07:15.090 --> 01:07:17.320
like, you know,
massive action in real-time,

01:07:17.320 --> 01:07:19.500
real-time broadcast kind of applications,
and it works great for that.

01:07:19.540 --> 01:07:22.050
But it doesn't have a
slow and sweet mode,

01:07:22.240 --> 01:07:23.720
which some third-party products do.

01:07:23.720 --> 01:07:26.500
So, you can make a QuickTime-compatible
MPEG-4 file with a lot better

01:07:26.500 --> 01:07:28.460
quality than a lot of the stuff
we see out there right now.

01:07:28.460 --> 01:07:30.250
You just use the Apple exporter.

01:07:33.030 --> 01:07:34.270
Okay, who's next?

01:07:34.270 --> 01:07:38.260
Someone's got someone.

01:07:38.290 --> 01:07:40.000
I'll just have to do
some demos otherwise.

01:07:40.000 --> 01:07:45.280
Anyone want to see some stuff
in Compressor or other stuff?

01:07:45.280 --> 01:07:45.280
Oh, here we go.

01:07:46.270 --> 01:07:51.540
Can you show an example of
using a mask to do some specific

01:07:51.670 --> 01:07:53.700
compression where you're masking out?

01:07:53.790 --> 01:07:56.450
A mask?

01:07:57.650 --> 01:07:58.500
Give me an example.

01:07:58.500 --> 01:08:00.040
Yeah,
maybe I'm not saying that correctly.

01:08:00.040 --> 01:08:07.500
But to soften a portion of the image
field and compress it differently.

01:08:07.500 --> 01:08:11.500
That almost winds up,
it's almost never worth it in the end.

01:08:11.500 --> 01:08:13.500
Because you're trying to do compression,
you have multiple frames,

01:08:13.500 --> 01:08:14.480
you have an acycle image.

01:08:14.540 --> 01:08:17.480
I mean,
you can use motion tracking to like,

01:08:17.490 --> 01:08:20.230
yeah,
I honestly haven't had a case of a video

01:08:20.230 --> 01:08:22.500
where that was worth doing for years.

01:08:22.500 --> 01:08:24.350
Because typically,
any kind of error in it

01:08:24.350 --> 01:08:25.490
is going to be overall.

01:08:25.500 --> 01:08:26.500
I mean, let me think.

01:08:26.500 --> 01:08:29.500
Sometimes I'll do per frame processing.

01:08:29.500 --> 01:08:32.630
But I'm actually doing a masking for it.

01:08:33.600 --> 01:08:37.080
A good example might be if you had a
video of a talking head and they shot

01:08:37.080 --> 01:08:40.240
it against a moving background like
leaves blowing in the wind or something.

01:08:40.240 --> 01:08:41.590
Oh, it's a constant shot.

01:08:41.600 --> 01:08:46.850
You might use After Effects to
mask the person out and blur the

01:08:46.950 --> 01:08:50.820
background so it looked like it had a
shallower depth of field or something.

01:08:50.820 --> 01:08:53.660
Yeah, I mean, you do that like you would
do an After Effects play.

01:08:54.800 --> 01:08:57.600
Well, actually, with After Effects,
I mean, I did have a case last year

01:08:57.640 --> 01:09:00.660
where I was doing this high
def project where I needed to,

01:09:00.660 --> 01:09:02.280
where it actually was a damaged D5 tape.

01:09:02.340 --> 01:09:04.320
So there were some,
they actually would have

01:09:04.320 --> 01:09:05.860
macro block errors sometimes.

01:09:05.860 --> 01:09:12.180
I don't like the, so like,
you'd have like a 16 by 16 block of

01:09:12.240 --> 01:09:15.320
the frame where the video wasn't,
you know,

01:09:15.570 --> 01:09:17.610
We're basically the only one
field to be intact kind of stuff.

01:09:17.680 --> 01:09:20.390
And actually,
the 6.5 actually goes into rotoscope.

01:09:20.400 --> 01:09:23.370
So, I mean,
you can go in and hand paint and use the

01:09:23.370 --> 01:09:25.600
Clone Stamp tool on a per frame basis.

01:09:25.610 --> 01:09:28.300
And it's surprisingly powerful.

01:09:28.300 --> 01:09:31.330
I mean, like, 6.5 on a dual G5.

01:09:31.500 --> 01:09:36.000
I mean, you can do really good real-time
rotoscoping kind of stuff with it.

01:09:36.130 --> 01:09:39.110
So, that's definitely in there, I'm sure.

01:09:39.320 --> 01:09:44.830
I use 5% of After Effects a lot,
so I don't really do much mask stuff.

01:09:44.880 --> 01:09:46.440
I have a question.

01:09:46.440 --> 01:09:50.440
I was wondering if you
could pontificate on this.

01:09:50.440 --> 01:09:56.140
As content creators transition
to using HD and much higher

01:09:56.140 --> 01:09:59.700
quality cameras and acquisition,
like the Vericam working in

01:09:59.700 --> 01:10:04.380
24 progressive square pixels,
giving us much higher quality

01:10:04.380 --> 01:10:08.860
content to start with,
will we be out of a job?

01:10:09.200 --> 01:10:12.450
Preprocessing in HD is much easier
than the standard definition.

01:10:12.610 --> 01:10:15.940
Because HD is always analog,
I mean sorry, always digital.

01:10:15.940 --> 01:10:18.540
Analog is half the problem with
preprocessing and non-square

01:10:18.540 --> 01:10:19.640
pixels is a big issue as well.

01:10:19.640 --> 01:10:23.940
And DV is almost always
square pixel digital,

01:10:24.190 --> 01:10:25.210
which makes it a lot easier.

01:10:25.330 --> 01:10:27.160
But you still get some complexities.

01:10:27.240 --> 01:10:32.250
You know,
there's converting from 720 to 1080.

01:10:32.430 --> 01:10:33.410
Computer playback.

01:10:33.410 --> 01:10:35.040
I mean,
everyone who's showing off high-def

01:10:35.040 --> 01:10:38.440
computer-based playback today,
it's all 24p.

01:10:38.440 --> 01:10:40.600
So if you have 60i source,
typically you have to get

01:10:40.600 --> 01:10:42.120
converted or something like that.

01:10:42.120 --> 01:10:43.710
Today's codecs don't do a great job.

01:10:43.710 --> 01:10:45.860
Computer codecs don't do a great
job with interlaced content.

01:10:45.860 --> 01:10:48.860
MPEG-2 will work,
but it takes a pretty beefy machine

01:10:48.960 --> 01:10:53.360
to do real-time MPEG-2 deinterlacing
on computer screens to 60p playback,

01:10:53.360 --> 01:10:54.640
and it's a nightmare.

01:10:54.640 --> 01:10:58.290
So it's still a fair amount
you need to do with it.

01:10:58.360 --> 01:11:00.880
Often, sometimes you get a little
bit of letterboxing,

01:11:00.880 --> 01:11:03.560
you know,
if it's more than 60 by 9 aspect ratio.

01:11:03.560 --> 01:11:09.240
It's just occurred to me that the
difference between what a less

01:11:09.240 --> 01:11:13.680
experienced user might get from
compressing a really high-quality

01:11:13.680 --> 01:11:15.840
source from HD down to web-based.

01:11:15.860 --> 01:11:19.260
With, you know,
default settings in some of these tools

01:11:19.260 --> 01:11:23.670
versus what we might be able to get,
that difference is much less

01:11:23.680 --> 01:11:26.080
with much higher quality source.

01:11:26.080 --> 01:11:26.870
Yeah, there are subtleties.

01:11:26.870 --> 01:11:29.580
There's also HD and SD use
different color spaces.

01:11:29.580 --> 01:11:30.170
Bear in mind.

01:11:30.210 --> 01:11:35.090
So HD uses the 709 color space,
and SD and almost all

01:11:35.200 --> 01:11:38.310
computer playback uses 601.

01:11:38.380 --> 01:11:41.320
So you actually have to do a transform
in there to get the colors to come

01:11:41.320 --> 01:11:43.120
out matching perfectly accurately.

01:11:43.120 --> 01:11:45.060
And it's handled transparently
in a lot of tools,

01:11:45.060 --> 01:11:45.840
but not always.

01:11:45.860 --> 01:11:47.860
You have to get that right as an issue.

01:11:48.080 --> 01:11:52.690
Another thing that happens is
typically you are going to,

01:11:52.900 --> 01:11:57.360
a lot of HD for computer play
gets compressed horizontally.

01:11:57.360 --> 01:12:00.260
So you encode at 1440 by 1080,
just to make it a

01:12:00.260 --> 01:12:02.920
little bit easier to do,
and some stuff going on there.

01:12:03.040 --> 01:12:06.390
But yeah, I mean,
HD is massively easier to compress

01:12:06.390 --> 01:12:08.850
than standard def in the real world.

01:12:09.000 --> 01:12:11.940
You just need a lot more computer for it,
but, you know,

01:12:12.000 --> 01:12:13.790
that's coming along as well.

01:12:13.850 --> 01:12:15.800
But yeah, I mean, it's amazing to me.

01:12:15.800 --> 01:12:17.800
The part is,
I only work on hard stuff pretty much,

01:12:17.800 --> 01:12:20.480
but I mean, so I've had some HD projects
require a lot of pre-processing,

01:12:20.480 --> 01:12:22.680
but kind of in general, yeah,
you just kind of like drag it

01:12:22.680 --> 01:12:23.980
in and say go when you're done.

01:12:23.980 --> 01:12:28.420
It's, it's,
it is almost always progressive,

01:12:28.420 --> 01:12:31.240
and it is almost always full frame and
square pixel and all that kind of stuff.