WEBVTT

00:00:12.360 --> 00:00:14.600
Hi everybody,
thank you very much for coming.

00:00:14.600 --> 00:00:17.270
This is an experiment for us.

00:00:17.360 --> 00:00:20.630
This is a full Q&A session
and we've seen it work really,

00:00:20.630 --> 00:00:22.300
really well at other conferences.

00:00:22.300 --> 00:00:25.360
Before I sort of describe a little
bit about the session itself,

00:00:25.360 --> 00:00:27.290
I'm going to describe what it isn't.

00:00:27.300 --> 00:00:31.300
So this is not the
QuickTime feedback forum.

00:00:31.460 --> 00:00:35.720
The QuickTime feedback forum is on
Friday at 5 and that's where you can

00:00:35.720 --> 00:00:40.060
ask all the questions and sort of,
"We'd love the product to do this."

00:00:40.300 --> 00:00:43.690
This session is more intended for,
"Okay, we understand that the

00:00:43.810 --> 00:00:45.300
product doesn't do this.

00:00:45.300 --> 00:00:48.930
What's a good way around that?" Or,
"As a content provider,

00:00:48.930 --> 00:00:51.250
we're trying to get this accomplished.

00:00:51.300 --> 00:00:54.300
What are the potholes along that path?

00:00:54.300 --> 00:00:57.850
What are the best strategies?" And we
are so lucky to have all of these folks

00:00:57.850 --> 00:01:00.300
both on the panel and in the audience.

00:01:00.300 --> 00:01:03.300
There's clearly dozens
and dozens of experts.

00:01:03.390 --> 00:01:08.300
I see many people that we know
quite well as experts in the field.

00:01:08.300 --> 00:01:10.680
My hope is that the way that
this works is you'll come up and

00:01:10.690 --> 00:01:15.300
definitely want to use the microphone
so that it's recorded accurately.

00:01:15.300 --> 00:01:18.330
And ask the question and then we'll
sort of take a second to figure out who

00:01:18.370 --> 00:01:20.290
can probably best answer the question.

00:01:20.300 --> 00:01:23.300
There may be times when it's
somebody in the audience.

00:01:23.500 --> 00:01:26.630
And we've seen these sessions
go completely haywire where then

00:01:26.630 --> 00:01:28.620
the audience is answering the
audience's questions and the

00:01:28.620 --> 00:01:30.290
panelists just sort of disappear.

00:01:30.300 --> 00:01:31.300
I'm kidding.

00:01:31.300 --> 00:01:34.410
But we'll start it off by having,
I'll pass the mic down so that each of

00:01:34.570 --> 00:01:39.250
these folks can introduce themselves
and their general area of expertise

00:01:39.250 --> 00:01:43.300
so that then the questions can be sort
of formulated based on who's here.

00:01:43.300 --> 00:01:47.410
We don't have people from the
pro applications product group,

00:01:47.410 --> 00:01:49.500
so in-depth questions
on Final Cut Pro may be

00:01:49.500 --> 00:01:50.300
a little bit difficult.

00:01:50.300 --> 00:01:53.390
But within this sort of spectrum and the
people that we do have in the audience,

00:01:53.390 --> 00:01:55.500
hopefully we can answer a
lot of your questions and

00:01:55.500 --> 00:01:57.220
get a good dialogue going on.

00:01:57.300 --> 00:02:01.300
And if there aren't a lot of questions,
then it'll end quickly and that's that.

00:02:01.300 --> 00:02:04.300
So my email address should come up here.

00:02:04.300 --> 00:02:07.100
Never mind.

00:02:07.420 --> 00:02:10.280
So if you've got feedback on
how this might work better,

00:02:10.300 --> 00:02:13.030
give it to me and we'll sort
of see if this session is worth

00:02:13.030 --> 00:02:14.290
doing over and over again.

00:02:14.300 --> 00:02:16.300
We've got a lot of these
folks typically in the labs,

00:02:16.300 --> 00:02:20.240
but to have them all available
at a fixed time here is something

00:02:20.380 --> 00:02:22.300
that we're really happy to try out.

00:02:22.300 --> 00:02:25.300
So with that,
I'll hand it over to Ryan Lynch.

00:02:27.700 --> 00:02:41.800
[Transcript missing]

00:02:42.100 --> 00:02:43.080
I'm Eric Blampied.

00:02:43.110 --> 00:02:46.740
I spent a long time working at
Apple on QuickTime's interactive stuff.

00:02:46.790 --> 00:02:50.500
Now I'm on my own doing
a variety of things.

00:02:50.770 --> 00:02:53.500
Interactivity and mixing media,
I'm really into taking lots of

00:02:53.500 --> 00:02:55.900
different kinds of media and
putting them in the same movie.

00:02:55.930 --> 00:02:58.580
And it's also pretty fun to do
things that require a lot of

00:02:58.580 --> 00:03:01.520
resources out of the server,
a lot of getting data in and out,

00:03:01.540 --> 00:03:03.100
and that's all fun stuff.

00:03:03.100 --> 00:03:05.200
So that's me.

00:03:06.870 --> 00:03:09.590
I'm John Healy with Akamai Technologies.

00:03:09.670 --> 00:03:13.470
Akamai is the content
delivery partner for Apple.

00:03:13.600 --> 00:03:20.500
We deliver a lot of Apple streaming
content as well as a broad

00:03:20.500 --> 00:03:23.490
variety of HTTP content as well.

00:03:23.840 --> 00:03:28.380
We work closely with Ryan, Glenn,
and Dennis and their organizations

00:03:28.400 --> 00:03:33.100
in terms of getting Apple's content
out on the web more effectively.

00:03:33.760 --> 00:03:36.700
Hi, I'm Alec Hendry from MTV Networks,
UK and Ireland.

00:03:36.700 --> 00:03:40.080
My speciality is a lot
of interactivity stuff.

00:03:40.080 --> 00:03:43.630
Now with QuickTime,
mainly focusing on 2.5 and

00:03:43.630 --> 00:03:45.790
3G video mobile content.

00:03:47.200 --> 00:03:48.200
I'm Steve Gooley.

00:03:48.200 --> 00:03:51.100
I'm a writer for Apple and
my specialty is HTML,

00:03:51.180 --> 00:03:53.460
stupid web tricks,
and using the QuickTime player

00:03:53.460 --> 00:03:56.190
as a kind of Swiss army
knife for QuickTime content.

00:03:56.200 --> 00:04:00.950
Ben Wagoner I am Ben Wagoner
and I'm a compression nerd.

00:04:02.030 --> 00:04:05.060
Hi, I'm Mark Revis from Bluish.

00:04:05.060 --> 00:04:08.170
We design and develop a lot
of interactive QuickTime,

00:04:08.440 --> 00:04:13.610
particularly with live stage,
media players, that sort of thing.

00:04:14.540 --> 00:04:16.400
Hi, I'm Michael Schaff.

00:04:16.400 --> 00:04:19.680
I do interactivity with Livestage.

00:04:19.690 --> 00:04:23.130
A lot of front-end and
back-end stuff and loud,

00:04:23.150 --> 00:04:24.400
bright shoes.

00:04:24.400 --> 00:04:30.280
Hi, I'm Guillaume Yacineau and I'm
the bridge between the developers

00:04:30.400 --> 00:04:32.400
and the programmers of Livestage.

00:04:32.400 --> 00:04:36.320
So I have to speak with those guys,
try to translate in French,

00:04:36.390 --> 00:04:39.350
then to the developers
to make the bridge.

00:04:41.740 --> 00:04:43.700
All right,
so let's have our first question.

00:04:43.700 --> 00:04:47.640
Excellent, go ahead.

00:04:48.050 --> 00:04:49.930
Adam Wilt, Omnion Video Networks.

00:04:49.990 --> 00:04:54.070
We're moving our file system over
to that we can be compatible with

00:04:54.600 --> 00:04:57.340
Europe and Asia and everyone else.

00:04:57.340 --> 00:05:03.060
And our question is about encoding media
paths in alias atoms and QuickTime files.

00:05:03.080 --> 00:05:07.480
Is there a recommended practice for
encoding Unicode strings in alias atoms?

00:05:07.520 --> 00:05:09.820
UTF-8, UTF-16, double byte?

00:05:11.840 --> 00:05:15.610
or if this is confusing
to you guys as it is to us

00:05:16.680 --> 00:05:17.600
Any takers?

00:05:18.020 --> 00:05:20.600
Who's the taker?

00:05:20.730 --> 00:05:22.990
Can you speak a little bit more
closely to the microphone so that

00:05:23.000 --> 00:05:24.100
we can hear the question again?

00:05:24.270 --> 00:05:26.170
I can.

00:05:26.230 --> 00:05:29.300
Yes,
we're writing our own QuickTime files.

00:05:29.380 --> 00:05:32.650
The alias atoms that point to media
files within the QuickTime wrapper

00:05:33.230 --> 00:05:36.360
are normally encoded in a
file system dependent fashion.

00:05:36.420 --> 00:05:39.750
We're moving our entire
file system over to Unicode,

00:05:39.750 --> 00:05:43.420
and I'm curious what the best
way is to put Unicode strings

00:05:43.420 --> 00:05:45.540
into alias atom media paths.

00:05:45.630 --> 00:05:49.310
What's the best way to do that?

00:05:49.590 --> 00:05:52.420
It will be UTF-8,
but it's not supported yet,

00:05:52.420 --> 00:05:53.550
I don't believe.

00:05:53.550 --> 00:05:59.670
We have just introduced in
Tiger UTF support for user data atoms,

00:05:59.670 --> 00:06:01.560
and we're moving towards
that throughout the system.

00:06:01.570 --> 00:06:05.560
But right now, you really can't do it.

00:06:05.560 --> 00:06:09.320
What you need to do is contact
Apple Engineering and get it on the seed

00:06:09.370 --> 00:06:12.500
list for the next rev of the file format,
because we're heading in

00:06:12.500 --> 00:06:14.520
the same direction you are,
but we're not there yet.

00:06:14.520 --> 00:06:17.230
We have to release it in
August as part of our release

00:06:17.360 --> 00:06:19.060
for our media server software.

00:06:19.180 --> 00:06:22.520
So if UTF-8 is the way to go,
that's the way we'll proceed.

00:06:22.520 --> 00:06:23.290
That's the way to go,
and one of the big things is instead

00:06:23.290 --> 00:06:24.050
of using the Mac language coding,
you'll use the three

00:06:24.050 --> 00:06:24.740
character ISO encoding,
but you'll only use the

00:06:24.740 --> 00:06:25.650
least significant five bits,
because you're going to pack them

00:06:25.650 --> 00:06:26.520
all into a 32-bit field or something.

00:06:26.520 --> 00:06:28.530
Okay,
and if we want more information on this,

00:06:28.530 --> 00:06:30.520
the best way is to get
on the Tiger seed list?

00:06:30.520 --> 00:06:30.520
Or who should we contact?

00:06:30.520 --> 00:06:32.490
Yeah, contact me and I'll get you in
touch with the right people.

00:06:32.580 --> 00:06:34.510
Okay, I'm sorry, your name again?

00:06:34.520 --> 00:06:36.520
Steve Gouley, gouley@apple.com.

00:06:36.520 --> 00:06:38.480
Thank you.

00:06:38.520 --> 00:06:38.520
Thanks.

00:06:57.670 --> 00:06:58.740
Hello.

00:06:58.740 --> 00:07:01.470
This question might be for Ryan.

00:07:01.740 --> 00:07:05.240
Is there a workaround or trick
to launching multiple instances

00:07:05.240 --> 00:07:08.760
of QuickTime Broadcaster
on a single machine?

00:07:08.870 --> 00:07:14.920
I heard somebody mention in one of the
sessions that they were doing that,

00:07:14.920 --> 00:07:17.640
so that you can encode multiple
streams on a single machine with

00:07:17.650 --> 00:07:23.710
QuickTime 6 Broadcaster using the
same DV source for both instances.

00:07:25.640 --> 00:07:29.650
So actually, launching multiple streams,
I'm not live yet.

00:07:29.840 --> 00:07:33.300
So launching multiple streams or
multiple instances of broadcaster

00:07:33.300 --> 00:07:36.140
is not a supported activity.

00:07:36.280 --> 00:07:38.410
So it's not something that, you know,
from our... Well,

00:07:38.410 --> 00:07:40.040
I was asking for the workaround.

00:07:40.040 --> 00:07:41.800
Exactly, exactly.

00:07:41.800 --> 00:07:44.630
So who has experience doing that?

00:07:49.300 --> 00:07:51.800
Nobody has experience doing that.

00:07:51.920 --> 00:07:55.440
There are some alternative apps.

00:07:55.670 --> 00:08:01.100
That we haven't tested fully but that
are capable of doing multiple streams.

00:08:01.980 --> 00:08:02.900
Steven, you want to comment?

00:08:02.900 --> 00:08:05.400
What's that app that Wirecast?

00:08:05.400 --> 00:08:08.300
Right,
I've experimented with that a little bit.

00:08:08.340 --> 00:08:12.040
But the gentleman from University of
Wisconsin who presented earlier this

00:08:12.040 --> 00:08:16.370
morning mentioned that on their XServe
cluster they were doing that somehow.

00:08:16.380 --> 00:08:18.330
I should probably ask him.

00:08:18.330 --> 00:08:20.510
I didn't have time to ask him.

00:08:20.560 --> 00:08:22.140
I thought somebody else here might know.

00:08:22.140 --> 00:08:25.730
Also, does that-- Do you want
to know how to try it?

00:08:25.950 --> 00:08:26.900
Yeah.

00:08:26.900 --> 00:08:27.990
You figured that out?

00:08:28.060 --> 00:08:30.060
So you just move it and then reinstall?

00:08:30.060 --> 00:08:32.060
Is that how you do it?

00:08:32.060 --> 00:08:33.060
Yeah.

00:08:33.060 --> 00:08:39.720
You just copy it and
name it something else?

00:08:43.200 --> 00:08:46.550
Can they both access the same DV source?

00:08:46.610 --> 00:08:49.760
So they both can't access
the same DV source,

00:08:49.760 --> 00:08:52.400
but they can do many, many audio streams.

00:08:52.400 --> 00:08:55.900
Okay, we'd need them to access
the same DV source.

00:08:55.900 --> 00:08:58.960
Unfortunately for DV that doesn't work,
but for analog or any other

00:08:58.960 --> 00:09:00.600
mechanism getting it in.

00:09:00.750 --> 00:09:05.390
That's a VDIG thing with
QuickTime that we need to resolve.

00:09:05.400 --> 00:09:09.590
So they must be using it just to,
because they have these tuner cards,

00:09:09.600 --> 00:09:10.700
those are different sources.

00:09:10.700 --> 00:09:13.660
So if you put in multiple of
those Miglia tuner cards in there,

00:09:13.660 --> 00:09:14.500
it'll work.

00:09:14.500 --> 00:09:15.480
I see, yeah.

00:09:15.650 --> 00:09:19.900
And then does anyone have any
recommendations for products that,

00:09:19.930 --> 00:09:23.940
for live webcasting that tightly
integrate with PowerPoint or Keynote that

00:09:23.940 --> 00:09:30.220
are out there today that could put slides
up on viewer screens next to the live

00:09:30.220 --> 00:09:35.080
stream and when a user in the studio,
say, clicks on a different slide

00:09:35.080 --> 00:09:38.180
in Keynote or PowerPoint,
it sends that command

00:09:38.200 --> 00:09:39.830
down to flip the slide?

00:09:39.960 --> 00:09:44.130
So there's a gentleman from
the University of Sydney that

00:09:44.130 --> 00:09:49.430
wrote an app that looks to
be tremendous for doing that.

00:09:50.490 --> 00:09:55.560
Doesn't that involve exporting
the stuff out of PowerPoint?

00:09:55.560 --> 00:09:59.550
It's not using it in PowerPoint,
I don't think.

00:09:59.720 --> 00:10:04.390
Well, everything I've seen that does
anything with PowerPoint integration

00:10:04.440 --> 00:10:07.710
tends to require exporting the
slide deck into some other format

00:10:07.730 --> 00:10:11.200
and posting it on a web server,
either into like PNG or

00:10:11.210 --> 00:10:14.000
JPEGs or something,
or GIF images,

00:10:14.000 --> 00:10:16.600
and then it sends URL flip commands.

00:10:16.600 --> 00:10:21.160
But what I was really hoping for
though was something that would,

00:10:21.470 --> 00:10:24.590
besides just converting it and
then sending those script commands,

00:10:24.630 --> 00:10:29.010
if it could actually monitor a person
running the PowerPoint deck or Keynote

00:10:29.010 --> 00:10:33.420
deck and see what slide they're on,
so that the person running the encoder

00:10:33.420 --> 00:10:37.600
doesn't have to follow along and
know what slide URL flip to send.

00:10:37.600 --> 00:10:41.600
. Glenn Bullich Breeze does that?

00:10:41.600 --> 00:10:44.330
It monitors PowerPoint?

00:10:46.640 --> 00:10:50.320
But isn't it,
it's also flash spark video only too,

00:10:50.320 --> 00:10:51.330
isn't it?

00:10:51.440 --> 00:10:55.010
Doesn't it only do flash spark video?

00:10:55.500 --> 00:10:57.500
It doesn't do QuickTime encoding, right?

00:10:57.500 --> 00:11:00.500
Something that would work for QuickTime.

00:11:00.500 --> 00:11:02.880
I know of some solutions for
Windows Media that do it,

00:11:02.900 --> 00:11:04.490
but I'm looking for
something with QuickTime.

00:11:04.500 --> 00:11:07.860
There's the product that
the 21st Century Media guys

00:11:07.860 --> 00:11:09.500
had that Tarantella bought.

00:11:09.500 --> 00:11:10.500
Castream.

00:11:10.500 --> 00:11:11.500
Castream?

00:11:11.740 --> 00:11:15.140
That's ruled out because it requires
a proprietary player to be downloaded

00:11:15.360 --> 00:11:19.610
and installed on all viewers' machines,
a proprietary server,

00:11:19.620 --> 00:11:22.500
and licensing fees for
simultaneous viewers.

00:11:22.500 --> 00:11:26.700
It's too expensive and impractical
to deploy to thousands of

00:11:26.710 --> 00:11:28.650
users in an enterprise.

00:11:29.000 --> 00:11:35.950
One possible solution would be to use
something like ChannelStorm where you've

00:11:36.050 --> 00:11:39.290
got one video feed on the speaker,
one video feed on the

00:11:39.350 --> 00:11:42.280
PowerPoint presentation so the
guy who's queuing things up knows

00:11:42.280 --> 00:11:45.000
which graphic to bring up and
he's got his own graphics queue.

00:11:45.100 --> 00:11:48.510
So I think you could do it
that way with ChannelStorm.

00:11:49.900 --> 00:11:53.100
Do you mean where you take the
PowerPoint as one of the video sources?

00:11:53.150 --> 00:11:53.600
Right.

00:11:53.600 --> 00:11:57.000
You aim a camera at the PowerPoint screen
and you're the guy who's in

00:11:57.000 --> 00:12:02.590
charge of sending out the images,
looks and sees what's there,

00:12:02.610 --> 00:12:04.540
looks through his queue of images
and queues up the one you want.

00:12:04.540 --> 00:12:05.660
Which sounds like what you want to do.

00:12:05.660 --> 00:12:06.610
There's no script.

00:12:06.710 --> 00:12:09.350
There's an actual human being involved.

00:12:10.010 --> 00:12:12.940
Well, we have an alternative,
if I may answer that.

00:12:12.940 --> 00:12:14.390
We have an alternative for that.

00:12:14.410 --> 00:12:20.480
We export PowerPoint in JPEGs,
many JPEGs.

00:12:20.520 --> 00:12:28.560
We ask for the person that will hold the
presentation to give us the PowerPoint to

00:12:28.560 --> 00:12:31.290
export in JPEGs and import as JPEGs.

00:12:31.300 --> 00:12:33.400
And then we have a list
of JPEGs and the films,

00:12:33.400 --> 00:12:34.730
and then we play with that.

00:12:34.730 --> 00:12:36.700
It gives us a certain kind of freedom.

00:12:36.700 --> 00:12:40.300
But if you have a very long presentation,
it can be tricky.

00:12:40.300 --> 00:12:43.690
So it's a workaround.

00:12:44.110 --> 00:12:45.960
What's it called?

00:12:45.960 --> 00:12:48.060
It's still China Store.

00:12:48.100 --> 00:12:49.840
Oh, you're talking about live channel.

00:12:49.840 --> 00:12:50.000
Yeah, China Store.

00:12:50.000 --> 00:12:50.940
Okay, great.

00:12:50.940 --> 00:12:53.000
Maybe I'll check with you after.

00:12:53.000 --> 00:12:53.000
Thank you.

00:12:53.000 --> 00:12:56.530
And if you pop me an email,
I'll try and get you that University of

00:12:56.550 --> 00:13:00.000
Sydney app when it shows up and we can
all look at it a little bit more closely.

00:13:00.000 --> 00:13:03.770
I heard about it two hours ago,
so I don't know much about it yet.

00:13:04.180 --> 00:13:05.120
Next question.

00:13:05.210 --> 00:13:06.700
Yes.

00:13:06.700 --> 00:13:10.300
I have been working in a
workflow system where I have

00:13:10.300 --> 00:13:15.030
a server centralized encoder,
and I use Cleaner for that.

00:13:15.120 --> 00:13:19.520
And with help of AppleScript,
I get my workflow to work.

00:13:19.520 --> 00:13:23.280
And I have 300 students
that post their videos.

00:13:23.390 --> 00:13:28.600
And you know Cleaner is getting shaky
and have many problems and bugs.

00:13:28.600 --> 00:13:29.430
I have two questions.

00:13:29.440 --> 00:13:30.530
One is what's happening?

00:13:30.540 --> 00:13:33.160
You know the bug about
the time watch folder.

00:13:33.210 --> 00:13:37.200
There is a watch folder feature,
and there is a time problem

00:13:37.200 --> 00:13:40.590
in Cleaner at encoding time.

00:13:40.600 --> 00:13:43.570
Encoding time is shorter
than the film itself.

00:13:43.620 --> 00:13:45.540
Many times I can't encode it finished.

00:13:45.540 --> 00:13:46.510
Maybe you have that experience.

00:13:46.530 --> 00:13:50.410
The second question is,
do you have an alternative?

00:13:50.480 --> 00:13:53.320
I'm looking for something
not too expensive,

00:13:53.320 --> 00:13:57.160
but something that works with
QuickTime and Mac platform.

00:13:57.310 --> 00:13:57.570
Yeah.

00:13:57.710 --> 00:14:01.520
Cleaner has no apparent
engineering going on anymore.

00:14:01.520 --> 00:14:03.950
I heard there are a couple of engineers
assigned to Cleaner as a product,

00:14:03.950 --> 00:14:07.480
but there's not been much evidence out
of discreet of any actual work progress

00:14:07.480 --> 00:14:10.800
for over a year now on the Mac product.

00:14:10.870 --> 00:14:14.120
The two compression tools right now
that we're seeing progress on on

00:14:14.120 --> 00:14:17.790
the Mac are obviously Compressor.

00:14:17.920 --> 00:14:20.620
We also have Source and
Squeeze 4 has been announced.

00:14:20.720 --> 00:14:23.680
And I'm not sure if the status
of AppleScripting is in there,

00:14:23.740 --> 00:14:26.350
but I believe they've entered beta
and I'm sure you can contact them.

00:14:26.360 --> 00:14:28.810
They probably, you know,
they're very responsive

00:14:28.820 --> 00:14:29.450
about that kind of stuff.

00:14:29.460 --> 00:14:30.600
I can give you some ideas on that.

00:14:30.620 --> 00:14:31.450
And there's also Compression Master from,
you know, the company that's been

00:14:31.460 --> 00:14:31.560
working on it for a while now.

00:14:31.560 --> 00:14:31.620
And I'm not sure if they've been
working on it for a while now.

00:14:31.620 --> 00:14:31.700
I'm not sure if they've been
working on it for a while now.

00:14:31.700 --> 00:14:34.490
I'm not sure if they've been
working on it for a while now.

00:14:34.690 --> 00:14:35.140
Popwire.

00:14:35.160 --> 00:14:36.680
Popwire.

00:14:36.790 --> 00:14:37.770
Out of Sweden.

00:14:37.870 --> 00:14:41.960
And I don't know if they
do automation either,

00:14:42.180 --> 00:14:45.280
but they both support watch folders and
compression and all the kind of stuff.

00:14:45.320 --> 00:14:48.920
So they're kind of both working
to fill that Cleaner niche.

00:14:48.930 --> 00:14:51.680
And both are a lot more stable today.

00:14:51.680 --> 00:14:53.480
Thank you.

00:14:53.480 --> 00:14:55.070
Good answer.

00:14:57.200 --> 00:15:01.070
And if when you ask a question,
if you could give your name and company,

00:15:01.080 --> 00:15:03.080
that'd be also helpful.

00:15:03.210 --> 00:15:06.200
I'm Norman Holstall,
I work for a Dutch public broadcaster.

00:15:06.200 --> 00:15:07.000
Do you need the name?

00:15:07.040 --> 00:15:07.640
No.

00:15:07.820 --> 00:15:09.640
Good, good,
you wouldn't understand it anyway.

00:15:09.640 --> 00:15:11.840
I don't, trust me.

00:15:11.950 --> 00:15:17.330
We're using Final Cut Pro to do
editing and we're using ingest

00:15:17.360 --> 00:15:21.760
machines to do the digitizing to
Final Cut Pro ingest machines.

00:15:21.760 --> 00:15:26.390
It's a little crazy we use this
big sophisticated application,

00:15:26.390 --> 00:15:29.200
we think, with people who don't
understand what they're doing

00:15:29.200 --> 00:15:32.440
and they tend to change things,
screw things up.

00:15:32.580 --> 00:15:36.420
We need a very simple
QuickTime application just to digitize,

00:15:36.630 --> 00:15:41.440
photo JPEG, 75% whatever,
preferably then to transcode it to

00:15:41.440 --> 00:15:45.340
35%. Can't find anything out there
that will just do a simple job,

00:15:45.340 --> 00:15:48.170
everything will grab it,
but we can't get any time code in.

00:15:48.320 --> 00:15:52.400
Nothing will give us time code as well
and we need it with time code of course.

00:15:52.510 --> 00:15:54.970
Anybody, any ideas?

00:15:56.470 --> 00:16:17.390
: Does Pipeline Digital still
have their product from back

00:16:17.390 --> 00:16:17.390
in the video vision days?

00:16:17.390 --> 00:16:17.390
They had a pretty good stand-alone
QuickTime capture tool that worked

00:16:17.390 --> 00:16:17.390
with Timecode with the Telecast,
hereby I reveal my age.

00:16:17.390 --> 00:16:17.390
And I think those guys are
still around in some fashion

00:16:17.390 --> 00:16:17.390
selling some kind of tool.

00:16:17.390 --> 00:16:17.390
I'm not sure if they still
have a Mac OS X version though,

00:16:17.390 --> 00:16:17.390
but you might check out Pipeline Digital.

00:16:19.750 --> 00:16:22.860
We've looked at the Popwire
people and stuff like that,

00:16:22.860 --> 00:16:26.410
Compression or Ingest
Master or something,

00:16:26.410 --> 00:16:28.700
but nothing will do Photo JPEG.

00:16:28.700 --> 00:16:31.380
Yeah, but the Compression Master,
they've integrated

00:16:31.390 --> 00:16:33.710
their own codec support,
so they don't actually support

00:16:33.710 --> 00:16:34.700
arbitrary QuickTime codecs.

00:16:34.700 --> 00:16:37.380
That said,
I thought that Motion JPEG they

00:16:37.380 --> 00:16:38.700
support internally.

00:16:38.700 --> 00:16:39.660
Motion, but not Photo JPEG.

00:16:39.740 --> 00:16:43.690
We use Declink cards,
Declink cards always use Photo JPEG,

00:16:43.820 --> 00:16:45.700
and it's brilliant,
it's much better than Motion JPEG.

00:16:45.700 --> 00:16:48.200
For fielded content you want
to use Motion JPEG instead,

00:16:48.250 --> 00:16:50.700
it's 4:2:2 and gives
you support for fields.

00:16:50.700 --> 00:16:53.060
So for really like 95% of
all applications if you're

00:16:53.060 --> 00:16:55.700
trying to capture video,
you're better off with Motion JPEG.

00:16:55.710 --> 00:17:00.220
We did that, and it was for the small
bit rates that we need,

00:17:00.220 --> 00:17:01.700
it was rubbish.

00:17:01.700 --> 00:17:03.700
So we used Photo JPEG at 1 megabyte.

00:17:03.700 --> 00:17:05.700
Well, just put it on single field mode.

00:17:05.700 --> 00:17:09.000
At worst,
Motion JPEG should only have about

00:17:09.010 --> 00:17:11.700
another 10% higher data rate for
the same quality of Photo JPEG.

00:17:11.700 --> 00:17:13.690
You put it in single field mode.

00:17:13.760 --> 00:17:15.620
So you're probably making
Motion JPEG work for you.

00:17:15.700 --> 00:17:18.520
for you with a little bit of tweaking.

00:17:18.540 --> 00:17:20.490
OK, thanks.

00:17:22.550 --> 00:17:25.840
Hey, I was going to say,
doesn't Squeeze ingest DV?

00:17:25.930 --> 00:17:26.400
Yeah.

00:17:26.410 --> 00:17:27.740
And does it do timecode?

00:17:27.740 --> 00:17:31.340
Squeeze can do live capture off DV.

00:17:31.520 --> 00:17:34.460
And the new version of Squeeze 4
might be able to do timecode.

00:17:34.460 --> 00:17:35.570
I haven't tried that yet.

00:17:35.740 --> 00:17:37.380
But that would be an obvious feature.

00:17:37.380 --> 00:17:39.800
Is your source always DV,
or do you have other formats?

00:17:39.840 --> 00:17:41.320
Digibeta.

00:17:41.360 --> 00:17:43.840
Yeah,
it definitely does not support Digibeta.

00:17:43.920 --> 00:17:46.350
It's a DV-only solution, Squeeze.

00:17:46.370 --> 00:17:50.080
Do you need to capture it in
higher resolution than DV?

00:17:51.600 --> 00:18:13.300
[Transcript missing]

00:18:15.020 --> 00:18:20.500
Transcoding Digibeta to DV is
morally reprehensible though.

00:18:26.100 --> 00:18:30.000
That's it on the questions?

00:18:30.000 --> 00:18:30.000
Okay, I've got a question.

00:18:30.000 --> 00:18:30.570
Sorry.

00:18:30.710 --> 00:18:32.140
This is a real quick one.

00:18:32.140 --> 00:18:34.020
This is an easy one, right?

00:18:34.020 --> 00:18:38.040
I've got some instructional content
that I'd like to have the end user

00:18:38.040 --> 00:18:42.360
let's say it's a drill and practice
thing and there's a score keeper on

00:18:42.440 --> 00:18:48.400
the screen and they close out the
QuickTime movie and I'd like to have it

00:18:48.400 --> 00:18:54.150
so that when they come back that score
is still there and they can continue on.

00:18:56.580 --> 00:18:57.740
This is an easy one, right?

00:18:57.740 --> 00:19:02.700
This is an easy one.

00:19:03.020 --> 00:19:10.160
I don't want to use
any server side stuff.

00:19:10.160 --> 00:19:11.900
That's way too complicated.

00:19:12.070 --> 00:19:14.390
Come on, we've got to keep this simple.

00:19:15.000 --> 00:19:17.820
Now there's just one answer.

00:19:17.990 --> 00:19:21.880
So we developed a component
to be able to save cookies,

00:19:21.880 --> 00:19:25.810
to be able to save some XML file
into the user for desktop.

00:19:25.860 --> 00:19:30.410
We made that available to our developers,
and we are currently in a

00:19:30.410 --> 00:19:34.620
discussion with Apple to be able
to upload that onto their server.

00:19:34.650 --> 00:19:38.320
So soon, hopefully,
we'll be able to do it.

00:19:38.320 --> 00:19:41.370
I mean, you do have the 4.5.

00:19:41.400 --> 00:19:42.520
Oh, absolutely.

00:19:42.520 --> 00:19:44.840
So you can do it from within.

00:19:44.840 --> 00:19:49.900
We provide you the installer,
so you can do some .

00:19:49.920 --> 00:19:51.260
You can deploy right now.

00:19:51.260 --> 00:19:54.280
You can deploy just mode.

00:19:54.280 --> 00:19:58.060
The only thing that you cannot
do is have the-- I mean,

00:19:58.090 --> 00:20:01.540
you can send your user to a web
page to download the installer

00:20:01.540 --> 00:20:03.250
and install the component.

00:20:03.360 --> 00:20:04.490
How about a related question?

00:20:04.500 --> 00:20:10.110
When are we going to see that component
on the QuickTime component page?

00:20:10.120 --> 00:20:11.420
It's under discussion.

00:20:11.420 --> 00:20:14.190
It's going to be in the future.

00:20:14.230 --> 00:20:14.680
In the future.

00:20:14.680 --> 00:20:15.680
future.

00:20:16.450 --> 00:20:30.220
On a related thing,
there is a piece of shareware that

00:20:30.220 --> 00:20:35.470
allows you to do live streams with slides
synchronized together called SlidesNow.

00:20:35.470 --> 00:20:38.650
So if you go to slidesnow.com,
you can check it out.

00:20:38.650 --> 00:20:40.400
It's like 25 bucks.

00:20:40.400 --> 00:20:41.390
Super simple.

00:20:41.400 --> 00:20:42.610
Excellent.

00:20:42.610 --> 00:20:43.660
Good answer.

00:20:44.790 --> 00:20:46.780
And I know you said you
didn't want to use the server,

00:20:46.780 --> 00:20:49.790
but with XML file exchange
you really can send it or a

00:20:49.880 --> 00:20:51.950
JavaScript that will submit a form.

00:20:51.970 --> 00:20:55.180
So, you know,
this is a problem that has been solved

00:20:55.310 --> 00:20:56.940
that you can apply the traditional way.

00:20:56.940 --> 00:20:59.810
You can't, right now there's no way
to make a QuickTime movie,

00:20:59.810 --> 00:21:02.690
write something to the user's disk
and there are reasons for that.

00:21:02.690 --> 00:21:08.400
But you can send a JavaScript submit
or mail to or an XML list

00:21:08.500 --> 00:21:14.580
exchange with the server,
which is the way you can do it now.

00:21:19.100 --> 00:21:21.690
As long as the stuff is
being put in a web page,

00:21:21.730 --> 00:21:24.730
the cookie question can
be handled by the browser,

00:21:24.730 --> 00:21:24.730
right?

00:21:30.890 --> 00:21:31.800
Question on the right.

00:21:31.800 --> 00:21:35.790
Hi, Rich Carton, Penn State University.

00:21:35.840 --> 00:21:42.480
I've got somebody who wants to undertake
a project that wants to put multiple

00:21:42.480 --> 00:21:49.230
live streams in layers in a movie and the
streams would come to the front triggered

00:21:49.230 --> 00:21:55.930
by flash buttons also embedded in a layer
in the movie and we're sort of trying

00:21:55.930 --> 00:22:06.470
to get an idea of how many streams we can
ask QuickTime to handle within how many

00:22:06.470 --> 00:22:10.790
layers can QuickTime handle for streams.

00:22:12.030 --> 00:22:13.000
I guess that's about it.

00:22:13.000 --> 00:22:16.480
Mark, do you want to take that?

00:22:16.480 --> 00:22:19.400
Not particularly.

00:22:21.800 --> 00:22:24.710
So while you have no limitation of
number of streaming tracks that you

00:22:24.710 --> 00:22:27.050
can have inside the QuickTime Movie,
like the number of flash tracks,

00:22:27.060 --> 00:22:29.700
text tracks and so on,
you have no limitation at all.

00:22:29.700 --> 00:22:31.700
You have a limitation in
terms of the bandwidth.

00:22:31.700 --> 00:22:34.830
If you try to send five
streams at one megabit,

00:22:34.830 --> 00:22:36.700
it's going to be too big.

00:22:36.700 --> 00:22:42.690
So it will depend on your data weight
and bandwidth on the client side.

00:22:42.830 --> 00:22:46.630
What you can do,
you can create a flash interface with

00:22:46.690 --> 00:22:52.570
several streaming tracks and stop one,
start the next one, stop one,

00:22:52.610 --> 00:22:55.690
start the next one and switch them.

00:22:55.700 --> 00:22:57.700
You will have a little
delay between the switch.

00:22:57.700 --> 00:22:59.700
These are live streams?

00:22:59.800 --> 00:23:01.700
You can do that with live streams.

00:23:01.700 --> 00:23:05.700
Assume gigabit bandwidth.

00:23:05.700 --> 00:23:08.660
Yeah, it has been done years
ago with live stage.

00:23:08.700 --> 00:23:12.700
And it was with like QuickTime 5,
I believe.

00:23:12.800 --> 00:23:13.860
So it's possible, yes.

00:23:15.110 --> 00:23:20.700
I like the idea of gigabit bandwidth.

00:23:20.700 --> 00:23:24.690
Where do you live?

00:23:25.210 --> 00:23:28.210
Yeah, and the university, of course,
that's the right answer.

00:23:28.330 --> 00:23:30.000
Next question.

00:23:30.000 --> 00:23:31.900
I have basically two questions.

00:23:32.020 --> 00:23:37.400
One question is,
does Flash support streaming,

00:23:37.430 --> 00:23:39.260
QuickTime streaming format?

00:23:39.430 --> 00:23:40.190
Not at all.

00:23:40.200 --> 00:23:42.150
Can one explain why that?

00:23:42.180 --> 00:23:43.800
What is the reason?

00:23:43.800 --> 00:23:46.730
They are playing the
same play like Microsoft.

00:23:46.730 --> 00:23:51.820
They want to build their own
streaming servers or things like that?

00:23:52.350 --> 00:23:56.100
That question probably is good,
better at Flash forward than at show.

00:23:56.100 --> 00:23:57.090
Okay.

00:23:57.110 --> 00:23:58.860
We'll go to the next one.

00:23:58.860 --> 00:24:06.490
I'm having a hard time compressing
MPEG-4 under 256 because in Denmark,

00:24:06.790 --> 00:24:15.860
where I come from, MPEG-4 is 256 is our
ADSL lowest denominator.

00:24:15.860 --> 00:24:21.560
And MPEG-4 is doing a great
job between 280 up to 512.

00:24:21.560 --> 00:24:24.000
But what's the problem there?

00:24:24.000 --> 00:24:25.890
What should I be aware?

00:24:26.520 --> 00:24:29.370
Are you going for real-time
streaming or progressive download?

00:24:30.340 --> 00:24:31.240
Progressive download.

00:24:31.240 --> 00:24:33.880
Real-time streaming, also, both.

00:24:34.600 --> 00:24:34.960
Okay.

00:24:35.180 --> 00:24:36.890
Check out Compression Master.

00:24:36.890 --> 00:24:40.290
Compression Master is a good
two-pass MPEG-2 CBR mode,

00:24:40.320 --> 00:24:42.150
which QuickTime itself lacks.

00:24:42.150 --> 00:24:45.200
So you can typically get
substantially better compression

00:24:45.200 --> 00:24:47.310
efficiency out of that,
especially for low bitrate

00:24:47.310 --> 00:24:48.600
streaming applications.

00:24:48.600 --> 00:24:51.260
Because QuickTime's encoder
is a single pass only.

00:24:52.150 --> 00:24:56.510
And both Squeeze and Compression
Master support two-pass VBR encoding

00:24:56.510 --> 00:24:57.980
for progressive download.

00:24:57.980 --> 00:24:59.550
And both can offer,
because it's two-pass,

00:24:59.550 --> 00:25:01.900
substantially better quality than
the QuickTime encoder itself can.

00:25:02.460 --> 00:25:02.900
Right.

00:25:03.340 --> 00:25:07.500
I mean, you can kind of do the
QuickTime MPEG-4 encoder.

00:25:07.530 --> 00:25:09.000
It's the free one you get to start with.

00:25:09.000 --> 00:25:11.690
But if you're doing, like,
really high-end encode stuff,

00:25:11.690 --> 00:25:14.500
you definitely can use Squeeze or
Compression Master in the back.

00:25:14.980 --> 00:25:15.500
Thank you.

00:25:15.500 --> 00:25:18.810
The other thing might be to also look
at the content itself and if there's

00:25:18.810 --> 00:25:20.960
a way to crop to the area of interest.

00:25:21.960 --> 00:25:25.480
And maximize the compression on the
area of the image that's important.

00:25:25.500 --> 00:25:28.140
You know,
there's some savings there as well.

00:25:28.600 --> 00:25:31.580
Yes, but here it's an environment,
automatized environment,

00:25:31.580 --> 00:25:35.660
where I have no experts
working at the same time.

00:25:35.660 --> 00:25:38.150
So I have to respect their journalists.

00:25:38.150 --> 00:25:39.990
They do all kinds of things.

00:25:41.030 --> 00:25:41.030
Understood.

00:25:41.030 --> 00:25:41.030
Understood.

00:25:43.450 --> 00:25:47.630
And of course,
as H.264 comes onto the market,

00:25:47.640 --> 00:25:52.080
you'll see a substantial improvement
in either the amount of data that

00:25:52.080 --> 00:25:54.800
you're saving for the same image
or increasing the size of the

00:25:54.800 --> 00:25:56.400
image that you're compressing.

00:25:56.400 --> 00:25:57.930
Hi, Josh Blazer.

00:25:57.930 --> 00:26:00.400
I'm with the Art Institutes.

00:26:00.400 --> 00:26:04.400
We have a large number of
campuses across the country,

00:26:04.400 --> 00:26:08.390
not only Art Institutes but
also other college brands,

00:26:08.400 --> 00:26:10.400
67 total locations.

00:26:10.400 --> 00:26:15.400
We're building an infrastructure to do
streaming media across all the campuses,

00:26:15.400 --> 00:26:18.440
which is typical, I think,
of a lot of companies trying

00:26:18.440 --> 00:26:21.400
to get information from
the top down and bottom up.

00:26:21.400 --> 00:26:25.810
We've found some solutions
on the Windows side,

00:26:25.810 --> 00:26:29.380
but we're also a big Mac shop as well.

00:26:29.400 --> 00:26:34.640
So I'm wondering if there's any
solutions you guys know of in content

00:26:34.670 --> 00:26:39.400
management of QuickTime content
where at the local level,

00:26:39.400 --> 00:26:47.200
you're able to quickly
browse through content.

00:26:47.450 --> 00:26:51.880
I know that if you guys are
familiar with VBRIC or some of

00:26:51.880 --> 00:26:55.070
the other solutions out there that
allow this type of functionality,

00:26:55.070 --> 00:26:59.220
basically you have a local
streaming server at each

00:26:59.240 --> 00:27:01.400
location within the organization.

00:27:01.400 --> 00:27:04.130
And then it's basically
a web type interface,

00:27:04.130 --> 00:27:07.630
but they're pre-built type solutions,
extensible for the

00:27:07.730 --> 00:27:09.400
content management piece.

00:27:09.400 --> 00:27:13.700
So I'm wondering if you
guys know of any out there.

00:27:16.900 --> 00:27:20.900
If you like VBRIC, VBRIC will work with
QuickTime encoded MPEG4 files.

00:27:21.080 --> 00:27:24.990
So if you already have a
VBRIC network deployed,

00:27:24.990 --> 00:27:28.900
just export your MPEG from Final Cut and
drop it on there and you're good to go.

00:27:28.900 --> 00:27:30.900
Do you already have VBRIC stuff?

00:27:30.900 --> 00:27:31.890
We don't yet.

00:27:31.890 --> 00:27:34.860
We're in the process of
kind of researching and

00:27:34.860 --> 00:27:36.900
building the project together.

00:27:36.910 --> 00:27:41.100
We're also looking at it from a
digital signage point of view too for

00:27:41.100 --> 00:27:45.900
our galleries and different student
areas as well to broadcast content.

00:27:45.900 --> 00:27:48.900
That would be more
full screen type stuff.

00:27:48.900 --> 00:27:53.050
VBRIC scales great from
standard F down to QCF.

00:27:53.050 --> 00:27:54.980
They don't have a
high-desolation in place,

00:27:54.980 --> 00:27:59.140
but as long as your signage is
only going to be standard F,

00:27:59.140 --> 00:28:01.900
it's quite consistent.

00:28:01.900 --> 00:28:05.590
You can get great signage quality at 6
to 8 megabits for MPEG2 and it'll scale

00:28:05.590 --> 00:28:07.900
down to 32 kilobit MPEG4 if you need it.

00:28:07.900 --> 00:28:11.930
They have MPEG1, MPEG2,
MPEG4 solutions and if

00:28:11.930 --> 00:28:14.530
you go to their website,
all the live streams that

00:28:14.530 --> 00:28:16.470
they're doing right now,
are completely ISO compliant,

00:28:16.470 --> 00:28:19.890
playback fine in QuickTime Player or
any of the other ISO players.

00:28:19.900 --> 00:28:22.330
They're doing live
events right now from Dr.

00:28:22.360 --> 00:28:25.900
Ballard's expedition in the
Black Sea or something like that.

00:28:25.900 --> 00:28:27.250
I wasn't aware of the
support for QuickTime,

00:28:27.250 --> 00:28:27.900
so that's great.

00:28:27.900 --> 00:28:28.900
Absolutely.

00:28:28.900 --> 00:28:29.900
Thank you.

00:28:32.080 --> 00:28:34.000
Hello, Dave Bergevin from Soma Media.

00:28:34.000 --> 00:28:36.590
I have a question about
QuickTime chapter tracks.

00:28:36.600 --> 00:28:39.990
We use them exclusively
in our applications.

00:28:40.020 --> 00:28:42.000
We actually use TribeWorks iShell.

00:28:42.000 --> 00:28:44.750
And if you use chapter
tracks inside of QuickTime,

00:28:44.750 --> 00:28:47.950
you can actually have a lot of
chapter tracks and you can have

00:28:47.950 --> 00:28:50.000
scrolling capability in QuickTime.

00:28:50.000 --> 00:28:54.970
But if you embed it into a web page,
I think, and definitely in TribeWorks,

00:28:54.970 --> 00:28:58.000
you have the, you're limited,
you can't scroll.

00:28:58.000 --> 00:29:00.840
So whatever the resolution
of your screen is,

00:29:00.840 --> 00:29:04.000
that's how many chapter
tracks you can display.

00:29:04.000 --> 00:29:09.950
Is there a way to actually have that
feature inside of an embedded environment

00:29:10.030 --> 00:29:12.510
like TribeWorks or on the web?

00:29:13.880 --> 00:29:15.800
Eric, you've been voted in.

00:29:15.800 --> 00:29:17.780
No, do you want to comment on that?

00:29:17.800 --> 00:29:21.350
That's probably because I'm somewhat
affiliated with TribeWorks lately,

00:29:21.390 --> 00:29:24.480
but I don't work on iShell.

00:29:26.210 --> 00:29:29.720
I can only think about workarounds,
ways to get the chapter data out

00:29:29.720 --> 00:29:32.100
yourself and then build lists there.

00:29:32.100 --> 00:29:34.740
Yeah, we've done that,
but a lot of times it's more

00:29:34.740 --> 00:29:37.700
efficient just to use the
chapter tracks way QuickTime,

00:29:37.700 --> 00:29:38.600
QuickTime implements it.

00:29:38.600 --> 00:29:39.400
Oh, absolutely.

00:29:39.400 --> 00:29:39.600
I agree.

00:29:39.600 --> 00:29:41.800
It's really,
really easy and it's a great feature,

00:29:41.800 --> 00:29:43.910
the scrolling capability
that's in QuickTime,

00:29:43.910 --> 00:29:48.470
but I'm wondering if TribeWorks,
if there's a way to control it within,

00:29:48.470 --> 00:29:51.540
from, like if TribeWorks can
do something or if there,

00:29:51.540 --> 00:29:54.100
to actually,
if the feature is actually there.

00:29:54.100 --> 00:29:56.300
Have you talked with TribeWorks
engineering about this?

00:29:56.300 --> 00:29:58.340
Yes,
but it's kind of on the back burner and

00:29:58.340 --> 00:30:01.340
they don't even know if it's possible,
so that's why I'm asking

00:30:01.340 --> 00:30:02.900
you if it's even possible.

00:30:02.900 --> 00:30:06.990
Okay, well, we'll pass it down there,
but I'd be happy to help talk

00:30:06.990 --> 00:30:08.640
to you with them about it.

00:30:08.800 --> 00:30:10.290
Okay.

00:30:11.640 --> 00:30:14.250
I don't know about TribeWorks,
but with respect to the QuickTime plugin,

00:30:14.300 --> 00:30:17.850
I would file it as a bug with our
bug reporter and see if we can't

00:30:17.880 --> 00:30:20.750
get it fixed in the next rev.

00:30:22.000 --> 00:30:23.110
Last answer on that.

00:30:23.220 --> 00:30:26.000
I have built something similar.

00:30:26.000 --> 00:30:29.320
It doesn't have quite the
same question that you have,

00:30:29.320 --> 00:30:33.340
but basically processes
over a chapter track.

00:30:33.340 --> 00:30:38.770
And then I have a small piece that
is a flash track that I can just

00:30:38.770 --> 00:30:41.000
drop into any QuickTime movie.

00:30:41.000 --> 00:30:45.440
And then what the flash track is
doing is auto generating movie

00:30:45.440 --> 00:30:47.990
clips so I can scroll that space.

00:30:48.030 --> 00:30:52.500
So for me it's better functionality
than what is done in QuickTime because

00:30:52.500 --> 00:30:55.000
I can have it look the way that I want.

00:30:55.000 --> 00:30:58.000
I can have the color scheme, yada, yada,
yada that I want to have.

00:30:58.000 --> 00:31:02.980
That's not a very difficult flash
task nor a difficult QuickTime task.

00:31:03.000 --> 00:31:07.000
It can be done once and then
applied to many projects.

00:31:07.000 --> 00:31:07.660
Okay.

00:31:07.660 --> 00:31:09.480
Thank you very much.

00:31:11.250 --> 00:31:13.780
I'm Hal Meeks from
North Carolina State University.

00:31:13.790 --> 00:31:15.220
I was talking to this
gentleman over here earlier.

00:31:15.220 --> 00:31:18.150
He was having a question about
broadcasting live events where the

00:31:18.150 --> 00:31:19.440
speaker wants to do PowerPoint.

00:31:19.440 --> 00:31:22.500
You want to do the classic talking
head with PowerPoint and some

00:31:22.500 --> 00:31:24.200
stuff at the bottom of the screen.

00:31:24.560 --> 00:31:26.550
There's a company called InVivio.

00:31:26.550 --> 00:31:32.240
They're a member of the IMSA consortium,
as is Apple, and they do have a hardware

00:31:32.240 --> 00:31:35.190
product that will do exactly that.

00:31:35.200 --> 00:31:37.200
It is about $15,000.

00:31:37.340 --> 00:31:39.190
It's called Forecaster Lite.

00:31:39.220 --> 00:31:43.200
You literally take your PC,
plug it into the back of this device.

00:31:43.200 --> 00:31:48.200
It takes VGA and encodes a VGA stream,
an analog video stream,

00:31:48.200 --> 00:31:50.200
and an audio stream.

00:31:50.200 --> 00:31:53.200
It also indexes the content in real time.

00:31:53.200 --> 00:31:56.190
What it generates out is an H.264 stream.

00:31:56.200 --> 00:31:59.510
Of course, I haven't had a chance to
actually test this with the

00:31:59.510 --> 00:32:02.550
pre-release of Apple's product,
but I would imagine that

00:32:02.550 --> 00:32:04.200
it would work quite well.

00:32:04.200 --> 00:32:06.200
Glenn Bullich If it's InVivio-based,
it probably uses the best of the best.

00:32:06.200 --> 00:32:07.200
Glenn Bullich If it's InVivio-based,
it probably uses the best of the best.

00:32:07.200 --> 00:32:10.200
binary format for Synths,
which I believe has not been

00:32:10.260 --> 00:32:12.000
announced for QuickTime.

00:32:12.000 --> 00:32:13.190
It's not supported today.

00:32:13.200 --> 00:32:15.190
That's one of the things
I wanted to clarify here.

00:32:15.190 --> 00:32:16.690
Is that is that going to
be something that you will

00:32:16.690 --> 00:32:17.800
eventually be able to support?

00:32:17.800 --> 00:32:20.440
Well the VIVIO has a plugin
for QuickTime Player on

00:32:20.440 --> 00:32:27.310
Windows today and they've shown,
I actually demoed at Macworld 2003,

00:32:27.460 --> 00:32:29.420
an alpha of their Mac version.

00:32:29.420 --> 00:32:31.220
Have they shipped that yet?

00:32:31.220 --> 00:32:33.020
Yes, I've got it running.

00:32:33.800 --> 00:32:37.360
Okay so yes if you have
that which can do biffs,

00:32:37.460 --> 00:32:41.080
that's a plug-in,
but unless somehow someone convinced

00:32:41.080 --> 00:32:45.490
Apple to start including that as part
of the component download program.

00:32:45.490 --> 00:32:45.980
I'll be at the feedback forum on Friday.

00:32:46.040 --> 00:32:46.670
Yeah okay.

00:32:46.670 --> 00:32:49.240
I'll be mentioning this but yeah
I'm already aware of the issues

00:32:49.240 --> 00:32:52.690
and there is of course a licensing
issue involved with this as well.

00:32:52.690 --> 00:32:53.230
Yeah.

00:32:53.230 --> 00:32:57.160
With their product but it is a,
it does exactly what they tell it,

00:32:57.160 --> 00:32:58.600
say that it will do.

00:32:58.600 --> 00:32:59.990
It's pretty amazing.

00:33:03.480 --> 00:33:04.240
Hi, I'm Amy.

00:33:04.240 --> 00:33:04.940
I work at Apple.

00:33:04.940 --> 00:33:09.400
I just wanted to address your
question about H264 in the Tiger Seed.

00:33:09.560 --> 00:33:10.400
Yes.

00:33:10.400 --> 00:33:12.560
I know it's not a
complete... I'm not... No,

00:33:12.560 --> 00:33:12.930
no, no.

00:33:12.930 --> 00:33:13.280
Right.

00:33:13.280 --> 00:33:15.400
You guys have heard me say
that a million times so far.

00:33:15.400 --> 00:33:18.050
But I just wanted to let you
know that the way that it's in

00:33:18.050 --> 00:33:21.400
there is not like all the other
QuickTime codecs at this point in time.

00:33:21.400 --> 00:33:22.390
Yes, I know.

00:33:22.400 --> 00:33:23.330
I found out.

00:33:23.400 --> 00:33:23.400
Yes.

00:33:23.430 --> 00:33:23.640
Okay.

00:33:23.640 --> 00:33:25.380
So I just want to make sure that
was clear because it probably

00:33:25.390 --> 00:33:26.400
won't work with another app.

00:33:26.400 --> 00:33:27.760
It's not safe for internal consumption.

00:33:27.760 --> 00:33:29.390
You shouldn't use it
while you're showering.

00:33:29.400 --> 00:33:29.710
Yeah.

00:33:29.710 --> 00:33:32.590
I just mean that it won't... If you
put another app on top of QuickTime,

00:33:32.590 --> 00:33:33.400
it won't show up.

00:33:33.400 --> 00:33:33.780
No.

00:33:33.780 --> 00:33:34.400
I know.

00:33:34.400 --> 00:33:35.400
I know.

00:33:35.400 --> 00:33:36.400
Never mind.

00:33:36.400 --> 00:33:39.400
I was trying to get to my desktop
machines so I could actually try it out.

00:33:39.400 --> 00:33:41.390
But never mind.

00:33:41.400 --> 00:33:43.900
But anyway, it is a very cool product.

00:33:43.930 --> 00:33:45.400
It does seem to work.

00:33:45.400 --> 00:33:47.390
Great suggestion.

00:33:50.730 --> 00:33:54.140
Hello, Mike Carr,
Coconino Community College in Flagstaff,

00:33:54.180 --> 00:33:54.690
Arizona.

00:33:54.690 --> 00:33:56.700
I got a couple questions for you.

00:33:56.840 --> 00:34:00.140
The first one you may or
may not have an answer to,

00:34:00.140 --> 00:34:02.820
and I was wondering what the
hardware requirements or the

00:34:02.870 --> 00:34:09.140
projected hardware requirements
of H.264 playback are going to be.

00:34:09.140 --> 00:34:13.830
I mean, so clearly that's,
it's dependent on the data rate of

00:34:13.830 --> 00:34:16.860
the stream that's to be decoded,
right?

00:34:16.940 --> 00:34:27.310
So we've shown on the dual G5, 8 megabit,
1980, 1080, 1920, 1080 at 24 FIPS,

00:34:27.310 --> 00:34:31.580
and then in Steve's demo you
saw a variety of data rates.

00:34:31.590 --> 00:34:36.580
So, you know, there's no set requirement.

00:34:37.670 --> 00:34:41.640
Yesterday we showed,
so the short answer is we don't have

00:34:41.710 --> 00:34:45.240
that data yet because we're not done yet,
so we'll have to get back to you

00:34:45.240 --> 00:34:47.410
with the final answer with that.

00:34:47.410 --> 00:34:51.320
But yesterday in our session about it,
we showed on an iBook,

00:34:51.320 --> 00:34:55.600
and it was a 1 GHz G4 iBook
that you could play back,

00:34:55.600 --> 00:35:00.560
I think it was 960 by 5 something
because it was sort of letterbox.

00:35:00.560 --> 00:35:04.480
And that data rate was 5 megabits,
no it wasn't 5 megabits,

00:35:04.480 --> 00:35:06.320
it was 1.5 I think.

00:35:06.320 --> 00:35:09.110
So anyway,
that's just an idea of what we have now,

00:35:09.110 --> 00:35:10.960
and we're still working on it.

00:35:10.960 --> 00:35:15.000
So we don't have the final answer,
but we'll get back to you.

00:35:15.000 --> 00:35:18.930
And just another comment on that,
there are about 60 companies that

00:35:18.930 --> 00:35:23.430
have either pre-announced or announced
that they're developing encoders,

00:35:23.430 --> 00:35:26.280
decoders,
all sorts of tools based on 264.

00:35:26.280 --> 00:35:30.370
And you know, some of the decode hardware
requirements are down to the,

00:35:30.370 --> 00:35:33.490
you know,
sort of sub-100 milliwatt chips for,

00:35:33.510 --> 00:35:35.740
you know, mobile device decode.

00:35:35.740 --> 00:35:38.860
So the codec, given its scalability,
can also scale on its processor,

00:35:38.860 --> 00:35:40.970
on the processor requirements for decode.

00:35:40.980 --> 00:35:46.970
Minimum playback requirements for
H264 are a cellphone or better?

00:35:48.860 --> 00:35:53.110
My next question is,
I want to capture H263

00:35:53.110 --> 00:35:56.600
content into a QuickTime file.

00:35:56.600 --> 00:35:59.550
I want to know if that's doable.

00:36:00.470 --> 00:36:03.450
Yeah, the 263 codecs have been
in QuickTime for years now,

00:36:03.450 --> 00:36:05.730
since like QuickTime 4, I think.

00:36:05.810 --> 00:36:09.040
Yeah, so just pick us a codec when you're
doing it with QuickTime Broadcaster

00:36:09.040 --> 00:36:10.190
and you're good to go.

00:36:10.540 --> 00:36:17.400
Are you trying to make a
.mov file with 263 content?

00:36:17.400 --> 00:36:19.400
Pretty much.

00:36:19.400 --> 00:36:19.400
Anything.

00:36:19.400 --> 00:36:20.310
Yeah.

00:36:20.370 --> 00:36:21.390
It works.

00:36:21.850 --> 00:36:26.400
Before Source 3 and MPEG-4 came out,
that was the dominant

00:36:26.400 --> 00:36:28.400
streaming codec in QuickTime.

00:36:28.400 --> 00:36:34.400
Broadcast live encoding stuff was
almost all 263 until a few years ago.

00:36:34.400 --> 00:36:37.780
It's been in there and it's been
working fine for a long time.

00:36:39.650 --> 00:36:42.330
You mentioned that you
tried it and it didn't work,

00:36:42.350 --> 00:36:45.190
so that might be a little piece
of information that would help us.

00:36:45.250 --> 00:36:46.000
What do you mean by that?

00:36:46.000 --> 00:36:50.560
Coming out of a Tanberg 6000 system,
this is a default stream

00:36:50.570 --> 00:36:52.620
that's viewable in QuickTime.

00:36:52.620 --> 00:36:56.620
Can you, let me give you, sorry.

00:37:08.940 --> 00:37:11.900
One of the interesting things
is that Tamberg themselves,

00:37:11.900 --> 00:37:14.760
although they've developed the
QuickTime streaming component,

00:37:14.760 --> 00:37:15.900
actually didn't know how to make it work.

00:37:15.900 --> 00:37:20.130
When they did their testing,
all they ever did was did it from

00:37:20.140 --> 00:37:25.020
a web page that was actually logged
on to the Tamberg 6000 itself.

00:37:25.090 --> 00:37:25.900
And that works fine.

00:37:25.900 --> 00:37:29.130
I've actually just,
I mean literally last week,

00:37:29.130 --> 00:37:33.900
managed to get it streaming from a
codec to a QuickTime streaming server.

00:37:33.900 --> 00:37:38.080
And I'm actually going to Oslo
in a few weeks time to talk to

00:37:38.080 --> 00:37:40.900
them about the 264 component.

00:37:40.900 --> 00:37:44.900
Because if you've got an
E-series Tamberg 6000.

00:37:44.900 --> 00:37:49.900
Have you been able to actually capture
those streams yet or just display them?

00:37:49.900 --> 00:37:50.900
Just display them.

00:37:50.900 --> 00:37:55.050
We can't actually,
I mean what you can do is you can capture

00:37:55.050 --> 00:37:57.890
it by just taking it out of the cache.

00:37:57.900 --> 00:38:01.870
Once it's streamed to a machine
you can take it out of the cache.

00:38:01.930 --> 00:38:02.890
But we've not managed to actually.

00:38:02.900 --> 00:38:05.840
Save it as an ongoing stream.

00:38:05.900 --> 00:38:09.900
But I'm actually, as I say,
I'm going to Oslo in a few, end of July.

00:38:09.900 --> 00:38:11.890
To actually talk to their engineers.

00:38:11.900 --> 00:38:14.900
I mean I'll,
if you want I'll talk to you afterwards.

00:38:14.900 --> 00:38:20.010
But the main reason I'm going is
because on their new E-series 6000s,

00:38:20.010 --> 00:38:21.900
they've already got 264 embedded.

00:38:21.900 --> 00:38:25.900
And you can go from 6000
to 6000 with these 264.

00:38:25.900 --> 00:38:28.050
So I'm going to talk
to them about saying,

00:38:28.050 --> 00:38:30.900
well hey why don't you
stream the 264 as well.

00:38:30.900 --> 00:38:31.900
So.

00:38:31.900 --> 00:38:33.900
I'm going to, okay.

00:38:33.900 --> 00:38:35.900
I'll find you.

00:38:35.990 --> 00:38:38.900
Thank you Gary Shaneberg from BT.

00:38:42.470 --> 00:38:44.560
Steve Egbert, Brigham Young University.

00:38:44.560 --> 00:38:46.680
Let's say that I've got
some movies on the web,

00:38:46.680 --> 00:38:50.200
progressive movies,
and I want to prevent the smart guys from

00:38:50.250 --> 00:38:52.560
downloading and ripping off my content.

00:38:52.670 --> 00:38:57.610
So that means that you wouldn't
be able to pull it into VLC and

00:38:57.610 --> 00:38:59.400
bypass all the wired sprite stuff.

00:38:59.400 --> 00:39:04.650
Do you think you guys can think
of a solution to prevent people

00:39:04.650 --> 00:39:07.410
from ripping off my content?

00:39:08.860 --> 00:39:09.960
Lots of takers here.

00:39:09.960 --> 00:39:10.800
Who's first?

00:39:10.800 --> 00:39:13.800
You want to take a stab at it first,
Steve?

00:39:13.800 --> 00:39:16.800
Look in the back of the book,
QuickTime for the Web.

00:39:16.800 --> 00:39:18.670
There's a couple cheapo tools.

00:39:18.720 --> 00:39:19.660
Well, they're free.

00:39:19.760 --> 00:39:23.390
One of them will basically,
you're going to make a reference movie,

00:39:23.400 --> 00:39:25.690
copy, protect it,
and compress the header,

00:39:25.690 --> 00:39:29.600
and then take the header out of your
source movie so that it's a box of rocks.

00:39:29.650 --> 00:39:31.520
It's no longer a playable movie.

00:39:31.520 --> 00:39:33.620
And you've got a reference movie
that points to your web and some

00:39:33.620 --> 00:39:36.800
data on your web that if they copy
it to their disk doesn't do anything

00:39:36.800 --> 00:39:39.510
because your movie points to the web.

00:39:42.320 --> 00:39:51.370
Extending on the same question,
if I want to protect

00:39:51.370 --> 00:39:54.260
content on an intranet,

00:39:54.700 --> 00:39:56.500
Would you do the same stuff?

00:39:56.650 --> 00:40:00.650
Live streaming or downloadable content?

00:40:03.290 --> 00:40:07.150
Well, live streaming is inherently copy
protected unless somebody is really,

00:40:07.200 --> 00:40:10.200
really smart because we don't
keep a copy of it on the disk.

00:40:10.200 --> 00:40:13.860
Okay, not copy protected.

00:40:13.860 --> 00:40:19.190
Preventing access, unauthorized access.

00:40:21.130 --> 00:40:23.400
Well, let's just do the last stage way.

00:40:23.400 --> 00:40:26.260
You could create an interactive
QuickTime movie with Wired

00:40:26.310 --> 00:40:29.950
Sprite and create some kind of
password that will send that to a

00:40:30.010 --> 00:40:35.110
database that will check the-- No,
you want to do something else?

00:40:35.660 --> 00:40:40.440
As good an idea as that would be,
that actually won't be

00:40:40.440 --> 00:40:45.970
secure because right now
QuickTime only supports HTTP GET,

00:40:45.970 --> 00:40:49.980
in which case everything
is visible on the stack,

00:40:49.990 --> 00:40:54.950
which means that the password
would be actually visible,

00:40:54.950 --> 00:40:57.990
and that would be a bad thing.

00:40:58.230 --> 00:41:03.080
Yes, this is another plug for
the totally hip component.

00:41:03.090 --> 00:41:07.480
That actually allows you to encrypt
what would go on the line and so you

00:41:07.490 --> 00:41:10.100
could still see it but you wouldn't
be able to tell what the data is.

00:41:10.100 --> 00:41:16.380
The other possibility is to still
using wired sprites but get clever

00:41:16.380 --> 00:41:23.100
and build your own encryption
scheme and then upload that.

00:41:23.100 --> 00:41:29.100
In which case you need a flip side on
the server side to actually decrypt it.

00:41:29.100 --> 00:41:32.100
Then there's probably a
lot more details there.

00:41:32.100 --> 00:41:35.640
But ultimately you have to
look at what your audience is

00:41:35.640 --> 00:41:40.100
expecting because it really does
get down to an end user question.

00:41:40.100 --> 00:41:43.380
What kind of environment are
you delivering content to and

00:41:43.420 --> 00:41:46.990
what kind of user experience
are they willing to go through?

00:41:53.950 --> 00:41:56.890
Well, there is this nifty little feature
of QuickTime streaming server that

00:41:56.890 --> 00:42:01.230
gives you QT access files so you
can require a name and password.

00:42:01.230 --> 00:42:04.430
Although there is the same problem,
it is a get and it is clear

00:42:04.630 --> 00:42:06.880
text over your network.

00:42:06.980 --> 00:42:08.890
That's another possibility.

00:42:08.930 --> 00:42:11.920
Also,
I'm sure there is this neat little thing

00:42:11.930 --> 00:42:15.900
with Akamai you can do and they have,
if you have an account with them,

00:42:15.900 --> 00:42:21.880
they will allow you to tokenize your
references to the movies so that you have

00:42:21.980 --> 00:42:27.900
to have a validated username and password
that isn't done through clear text.

00:42:27.900 --> 00:42:30.890
You can do and generate
a link dynamically.

00:42:30.890 --> 00:42:37.800
So that might be something you'd
want to talk to this guy about.

00:42:37.800 --> 00:42:37.800
So that one there.

00:42:42.180 --> 00:42:46.330
The last solution will be if you embed
your QuickTime movie inside an HTML,

00:42:46.330 --> 00:42:50.980
you can have an SSL page before that
that will request for the password

00:42:50.980 --> 00:42:56.650
and then you have the whole schema
to be able to protect your content.

00:42:56.670 --> 00:43:03.020
Because they will not see the
QuickTime movie on that page before

00:43:03.020 --> 00:43:03.020
you can do your security check.

00:43:14.100 --> 00:43:19.100
When we did our annual results,
which have to go to a

00:43:19.100 --> 00:43:23.700
closed audience in the US,
we did exactly that.

00:43:23.700 --> 00:43:28.840
We just created an HTML environment,
linked it to a database,

00:43:28.840 --> 00:43:32.430
made people register with
their username and password,

00:43:32.430 --> 00:43:34.830
and then took them to an SSL page.

00:43:34.900 --> 00:43:39.070
an SSL protected HTML page
and ultimately yes,

00:43:39.080 --> 00:43:44.840
if someone, once they logged in once,
they could obviously find the path to the

00:43:44.950 --> 00:43:51.530
movie but you wouldn't get that unless
you'd logged in in the first place.

00:43:54.000 --> 00:44:04.440
Hi there, Brian Friedrich from the
Certified General Accountants

00:44:04.440 --> 00:44:08.000
Association up in British Columbia,
Canada.

00:44:08.000 --> 00:44:12.280
Part of this has been hit already,
but just to kind of

00:44:12.280 --> 00:44:14.150
round up the solution.

00:44:14.330 --> 00:44:19.000
We are going to be in a situation
where we've got lecturers and

00:44:19.000 --> 00:44:23.230
speakers that are presenting and
we kind of want the most efficient,

00:44:23.230 --> 00:44:28.600
read cheap but still workable
solution of being able to switch

00:44:28.600 --> 00:44:33.500
between a video feed of the speaker
and also their slide presentation.

00:44:33.500 --> 00:44:39.890
So I guess kind of like what was being
done last year with the WWDC material,

00:44:39.890 --> 00:44:41.010
the DVDs.

00:44:43.810 --> 00:44:45.720
If you want really cheap and easy,
you get a scan converter,

00:44:45.720 --> 00:44:47.260
you get a camera,
you put it through a video switch,

00:44:47.300 --> 00:44:48.900
you put that to a live encoder.

00:44:48.960 --> 00:44:51.600
So if you really want cheap and easy,
that's trivial to do,

00:44:51.600 --> 00:44:53.540
and that actually gives
you pretty good quality.

00:44:53.610 --> 00:44:57.340
If you can live with having
the video signal be analog,

00:44:57.340 --> 00:44:59.150
come out of the scan converter.

00:44:59.350 --> 00:45:01.200
Any reason, would that be good enough?

00:45:01.200 --> 00:45:03.200
What about digital options?

00:45:03.500 --> 00:45:05.910
Uh, well...

00:45:06.160 --> 00:45:08.100
I thought you wanted cheap and easy.

00:45:08.100 --> 00:45:13.900
Actually, cheap and easier is the
S-video out of a PowerBook.

00:45:14.190 --> 00:45:18.090
yeah the red yeah that are even easier
than using a scan converter we we

00:45:18.190 --> 00:45:20.850
do that all the time where we have a
PowerPoint presentation we just want to

00:45:20.860 --> 00:45:25.020
take it full screen as a video source in
a live webcast and we used to use a scan

00:45:25.020 --> 00:45:28.560
converter but we found that the s video
out of the power book produces cleaner

00:45:28.560 --> 00:45:32.320
looking results than our scan converter
and doesn't have the same problems with

00:45:32.320 --> 00:45:37.060
putting artificial black margins around
the image that scan converters often

00:45:37.060 --> 00:45:42.520
do so I mean that that works pretty well
if you use any standard video switcher

00:45:42.520 --> 00:45:46.790
to switch between live cameras and
and that fee it's not the s video out

00:45:46.820 --> 00:45:49.750
was any better than a lot of the lower
end scan converters I sort of imagine

00:45:49.750 --> 00:45:54.340
like a VGA to SDI thing that's probably
more than you want to pay surprisingly

00:45:54.340 --> 00:45:58.580
so I mean even slides like this with
text as small as like that blue type

00:45:58.580 --> 00:46:04.330
translate quite well down to like sizes
of 240 by 180 which would be appropriate

00:46:04.330 --> 00:46:08.380
for like a you know 35 to 40 kilobit per
second stream for dial-up it actually

00:46:08.380 --> 00:46:12.640
works no that sounds perfect next yeah
the obvious solution is like a keynote

00:46:12.640 --> 00:46:12.650
you know like a video source and then
you can just go ahead and put it in a

00:46:12.660 --> 00:46:16.480
version like to which do all that stuff
which I could specifically about because

00:46:16.480 --> 00:46:19.800
I have absolutely no idea if anyone's
you know thought about it but yeah I got

00:46:19.800 --> 00:46:23.520
it wouldn't I chat AV and keynote it
seemed like there's a to these two crazy

00:46:23.520 --> 00:46:27.240
kids gotta get together and some kind of
Joni Chachi kind of arrangement but can

00:46:27.240 --> 00:46:31.090
definitely second that I have a question

00:46:31.530 --> 00:46:36.200
Does anyone know of any QuickTime live
encoding solution that works

00:46:36.200 --> 00:46:39.690
at sizes larger than 320x240?

00:46:39.940 --> 00:46:54.020
- There are a number of products
that could do a live impact forestry

00:46:54.020 --> 00:46:57.690
and they'll be QuickTime compatible
at higher frame sizes than that.

00:46:57.760 --> 00:47:00.300
: Are they software or
are they like appliances?

00:47:00.300 --> 00:47:05.420
: Yeah, Dekas and VIVIO both have them.

00:47:05.630 --> 00:47:08.510
There's also the freeware

00:47:08.730 --> 00:47:12.800
: I'm a big fan of the MPEG-4 IP product.

00:47:12.800 --> 00:47:13.600
It has a live encoder built into it,
which I believe can go up to 640x480.

00:47:13.600 --> 00:47:14.600
: And they're live?

00:47:14.600 --> 00:47:17.580
And do they de-interlace as well?

00:47:17.620 --> 00:47:23.640
: On the pre-processing side,
I'm pretty sure the NVIDIA product does,

00:47:23.650 --> 00:47:24.600
and I believe the DECIS does as well.

00:47:24.600 --> 00:47:26.600
I'm not sure about MPEG-4 IP.

00:47:26.730 --> 00:47:29.600
Because for whatever reason,
you can't compile it on a Mac.

00:47:29.600 --> 00:47:31.600
I'm not smart enough to do that.

00:47:31.600 --> 00:47:33.060
It's all open source there.

00:47:33.100 --> 00:47:35.920
It gets like 80% of the way
through and never doesn't

00:47:35.920 --> 00:47:37.600
link or something like that.

00:47:37.600 --> 00:47:39.650
But both of you can move
the DECIS products and

00:47:39.650 --> 00:47:41.600
handle a de-interlacing,
I believe.

00:47:41.650 --> 00:47:44.190
There's also some hardware and
MPEG-4 stuff out there too,

00:47:44.270 --> 00:47:45.600
which might do the job as well.

00:47:46.210 --> 00:47:49.180
I'm interested ideally in the
software solutions so I can

00:47:49.180 --> 00:47:51.700
run it on a... There will be a
billion 264 solutions for this.

00:47:51.700 --> 00:47:54.770
Yeah, I want to run it on a
PowerBook for remote live webcasts.

00:47:58.720 --> 00:48:02.460
I've also had some experience
at Richcart from Penn State.

00:48:02.510 --> 00:48:03.430
I did a... One second.

00:48:03.430 --> 00:48:05.700
There's a little bit more to that answer.

00:48:05.700 --> 00:48:09.490
In QuickTime Broadcaster,
that free little app does go up to 640,

00:48:09.570 --> 00:48:10.700
480 as well.

00:48:10.700 --> 00:48:12.700
It goes up to 720.

00:48:12.710 --> 00:48:14.690
720, whatever you want.

00:48:14.730 --> 00:48:16.700
That's what I was saying.

00:48:16.700 --> 00:48:21.450
I've done an Internet 2
event streaming it out.

00:48:21.710 --> 00:48:26.700
Best I could do with the top of the
line G5 was about 7 megabits per second.

00:48:26.700 --> 00:48:30.690
But that was full screen,
high quality audio.

00:48:30.690 --> 00:48:34.020
I still got some blockiness.

00:48:34.200 --> 00:48:37.080
it just wouldn't encode all the way up.

00:48:37.080 --> 00:48:40.400
No, to kind of respond to
what you were saying,

00:48:40.400 --> 00:48:45.540
QuickTime Broadcaster lets you set
an output of 640x480 if you want,

00:48:45.540 --> 00:48:49.550
but if you look at the results,
it looks like a 320x240

00:48:49.550 --> 00:48:53.200
that's been doubled in size,
and there are no interlacing

00:48:53.200 --> 00:48:55.030
artifacts present in it.

00:48:55.040 --> 00:48:56.200
Okay?

00:48:56.200 --> 00:48:58.620
And I know it's not
deinterlacing in real time.

00:48:58.620 --> 00:49:02.520
What it's actually doing is asking,
you know,

00:49:03.140 --> 00:49:05.640
at the source level in the background,
it's throwing out the fields.

00:49:05.660 --> 00:49:09.560
It's almost certainly using
the fast mode DV codec,

00:49:09.620 --> 00:49:11.440
which gives you a quarter screen,
a single field.

00:49:11.460 --> 00:49:14.230
Right, so it's starting with a quarter
resolution original that,

00:49:14.230 --> 00:49:16.680
you know, size larger than 320x240.

00:49:16.680 --> 00:49:18.390
It doesn't really look any better.

00:49:18.400 --> 00:49:20.580
And the perfect solution for
that would be when QuickTime's

00:49:20.580 --> 00:49:23.160
got the functionality inside,
you want to turn the high quality

00:49:23.160 --> 00:49:26.480
and single field flags on decode,
which you can do in QuickTime Player,

00:49:26.480 --> 00:49:27.460
but you can't do it with the encoder.

00:49:27.460 --> 00:49:30.010
If we just had access
to those check boxes.

00:49:30.020 --> 00:49:33.080
And so what I've noticed is
that live channel and wire,

00:49:33.080 --> 00:49:37.680
cast both seem bound by
that same limitation.

00:49:38.390 --> 00:49:42.500
they both seem to produce the same
results as QuickTime 6 Broadcaster would

00:49:42.500 --> 00:49:44.700
when you set them large in 320 x 240.

00:49:44.700 --> 00:49:48.960
It's probably you have to find
a product that uses a different

00:49:48.960 --> 00:49:52.850
DV decoder for real time or at least
has the ability to override what the

00:49:52.870 --> 00:49:54.680
default setting for real time is.

00:49:54.680 --> 00:49:58.060
I mean cause I mean on a
computer the DV codec and even a

00:49:58.060 --> 00:50:00.140
Power Book should be 6x real time.

00:50:00.140 --> 00:50:00.640
Sure.

00:50:00.640 --> 00:50:03.850
On a G4 and I don't know how
insanely X real time on a G5,

00:50:03.850 --> 00:50:06.580
so there's the power
there to do the decode.

00:50:06.580 --> 00:50:10.540
When we see everything that
Final Cut Pro can do in real time

00:50:10.540 --> 00:50:15.990
on you know even a nice G4 you gotta
think that it should be able to do it.

00:50:24.630 --> 00:50:28.600
What would happen if you
compressing two times the bitrate?

00:50:28.750 --> 00:50:30.600
No, I've tried that.

00:50:30.600 --> 00:50:34.400
And you get less and less
compression artifacts in the result,

00:50:34.400 --> 00:50:36.600
but there's no higher
resolution to be seen.

00:50:36.600 --> 00:50:40.320
Yeah, the decoder itself is only
handing off a quarter screen

00:50:40.330 --> 00:50:44.750
resolution bitmap to the encoder,
or to the processing engine.

00:50:45.400 --> 00:52:35.000
[Transcript missing]

00:52:38.610 --> 00:52:41.360
I've been playing with Wirecast and it
does look quite good actually because

00:52:41.360 --> 00:52:43.490
you can switch between multiple sources.

00:52:43.540 --> 00:52:47.430
It does quite nice 3D DVE effects as
well where it moves the presenter down

00:52:47.430 --> 00:52:49.570
into a little screen in the corner,
a bit much like the

00:52:49.590 --> 00:52:50.600
keynote speeches here.

00:52:50.600 --> 00:52:52.990
You can bring in your slides.

00:52:53.130 --> 00:52:55.600
I've been playing around trying
to export out of Keynote as a

00:52:55.600 --> 00:52:57.600
QuickTime and then bringing that in.

00:52:57.600 --> 00:53:00.760
You can step through the slides
from your Keynote as a QuickTime in

00:53:00.760 --> 00:53:04.070
one window while you or your
video source appears in the other.

00:53:04.100 --> 00:53:06.120
It does seem to be working quite well.

00:53:06.130 --> 00:53:09.210
It does seem to have the same
limitations on the video size of

00:53:09.210 --> 00:53:11.060
the sources you're coming from.

00:53:11.060 --> 00:53:14.580
It is quite nice that you can just plug
in a whole load of EyeSight cameras

00:53:14.610 --> 00:53:18.340
and switch between them quite easily.

00:53:18.340 --> 00:53:18.340
It's cool.

00:53:19.340 --> 00:53:24.060
On the bitrate front, calculator.apps,
pretty much all you need to really

00:53:24.060 --> 00:53:27.520
do the details of it is how many
megabits of pipe you have available,

00:53:27.570 --> 00:53:29.880
what the bitrate of your
stream is going to be,

00:53:29.880 --> 00:53:32.940
multiply it together and get
your theoretical value and then

00:53:32.940 --> 00:53:37.750
you chop maybe 25% off that
for overhead and just general,

00:53:37.750 --> 00:53:40.550
to placate the gods, I guess.

00:53:40.550 --> 00:53:43.700
So that's pretty straightforward,
mathematically.

00:53:43.770 --> 00:53:46.190
One problem though is if you're
an expert from QuickTime,

00:53:46.190 --> 00:53:48.740
QuickTime likes to measure
things in kilobytes per second

00:53:48.760 --> 00:53:51.580
and I think say kilobytes,
1024 bytes,

00:53:51.680 --> 00:53:54.300
while pretty much everything else in
the world measures things in kilobits

00:53:54.300 --> 00:53:56.740
where k equals 1000 instead of 1024.

00:53:56.740 --> 00:53:58.960
So you kind of,
sometimes have to like kind of shuffle

00:53:58.960 --> 00:54:00.740
some numbers around in the background.

00:54:00.740 --> 00:54:04.510
There are a lot of tools out there like
Compression Master and Squeeze which

00:54:04.550 --> 00:54:08.740
make QuickTime files but present it in
terms of actual true kilobit values.

00:54:08.740 --> 00:54:13.490
That can make it a little bit easier
when you're authoring stuff for,

00:54:13.490 --> 00:54:15.660
you know, streaming views.

00:54:15.740 --> 00:54:19.600
The impact for component will show
it to you also in kilobits as well.

00:54:19.740 --> 00:54:22.630
But unfortunately if you open the
file up inside QuickTime player,

00:54:22.630 --> 00:54:25.450
it will give it to you in k and a lot
of people have gotten confused thinking

00:54:25.450 --> 00:54:26.740
that k value is actually k bytes.

00:54:26.740 --> 00:54:28.740
I mean k bits was really k bytes.

00:54:28.740 --> 00:54:33.740
Good point.

00:54:33.740 --> 00:54:37.590
Well I think that looks
like the last question.