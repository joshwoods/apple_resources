WEBVTT

00:00:12.280 --> 00:00:13.340
Good morning ladies and gentlemen.

00:00:13.340 --> 00:00:18.230
At this time would you please
welcome Matthew Formica,

00:00:18.230 --> 00:00:22.500
Cocoa and Developer Tool Evangelist.

00:00:28.110 --> 00:00:30.850
Good morning and welcome to you all.

00:00:31.000 --> 00:00:33.820
This is session 404,
Fundamentals of Cocoa.

00:00:33.880 --> 00:00:36.090
My name is Matthew Formica.

00:00:36.170 --> 00:00:39.080
As was said,
I'm the Cocoa evangelist here at Apple.

00:00:39.080 --> 00:00:43.850
I would love to, throughout the week and
through the coming weeks,

00:00:43.850 --> 00:00:47.220
get your thoughts,
ideas and comments on Cocoa.

00:00:47.220 --> 00:00:50.560
You can email me at mformica@apple.com.

00:00:50.800 --> 00:00:54.210
After yesterday's keynote sessions,
today and for the remainder of the

00:00:54.220 --> 00:00:58.500
week we're going to dive down into
some of the technologies that make

00:00:58.500 --> 00:01:01.690
Mac OS X the great platform that it is.

00:01:01.790 --> 00:01:05.710
One of those technologies is Cocoa,
Apple's object-oriented,

00:01:05.710 --> 00:01:08.690
rapid application development framework.

00:01:08.700 --> 00:01:13.690
And here to talk to us about
that today is Ali Ozer,

00:01:13.690 --> 00:01:20.700
who's been involved with Cocoa and
architecting Cocoa for over 15 years.

00:01:20.700 --> 00:01:22.570
He really knows his stuff.

00:01:22.730 --> 00:01:25.700
Please join me in giving a
warm welcome to Ali Ozer,

00:01:25.700 --> 00:01:27.750
manager of the Cocoa team.

00:01:35.660 --> 00:01:39.390
I'm glad you found your
way to session 404,

00:01:39.390 --> 00:01:41.460
Fundamentals of Cocoa.

00:01:41.550 --> 00:01:44.600
I'm Ali Ozer,
manager of the Cocoa Frameworks team.

00:01:44.600 --> 00:01:47.680
So,
we have a lot of material to cover today,

00:01:47.760 --> 00:01:51.600
and just to give you an overview
of what we're going to talk about,

00:01:51.760 --> 00:01:54.690
quickly cover what's Cocoa,
then give you a quick

00:01:54.690 --> 00:01:57.030
overview of Objective-C,
which is the background you

00:01:57.030 --> 00:01:58.600
need to see some of our demos.

00:01:58.600 --> 00:02:00.680
And the rest of the talk,
the bulk of the talk,

00:02:00.780 --> 00:02:03.600
will be demos where we're going
to see the wonder of Cocoa.

00:02:03.600 --> 00:02:07.200
We're going to do demos, write some code,
and get some applications running

00:02:07.230 --> 00:02:10.990
right in front of your eyes,
so you can see what Cocoa is all about.

00:02:11.700 --> 00:02:13.700
So first of all, what is Cocoa?

00:02:13.710 --> 00:02:18.060
It's an object-oriented API for
doing full-featured application

00:02:18.060 --> 00:02:19.700
development on Mac OS X.

00:02:19.700 --> 00:02:22.680
When we think of Cocoa,
we think of frameworks.

00:02:22.830 --> 00:02:28.500
Now, frameworks on Mac OS X,
frameworks are basically just libraries.

00:02:28.500 --> 00:02:29.820
You're probably familiar with frameworks.

00:02:29.820 --> 00:02:32.000
There's the Carbon Framework,
QuickTime Framework, etc.

00:02:32.120 --> 00:02:35.470
Frameworks are just libraries which
have come bundled with resources,

00:02:35.470 --> 00:02:36.090
headers.

00:02:36.100 --> 00:02:39.790
Frameworks also,
in the traditional Mac OS 9 definition,

00:02:39.840 --> 00:02:43.690
like Mac App, include a programming
environment where the application

00:02:43.760 --> 00:02:45.100
doesn't run the event loop.

00:02:45.100 --> 00:02:48.220
It's not actively running the event loop,
but instead it's getting callbacks

00:02:48.220 --> 00:02:49.520
from the framework environment.

00:02:49.540 --> 00:02:52.670
And Cocoa certainly fits
that definition of framework,

00:02:52.670 --> 00:02:55.480
where it is giving callbacks
to your application,

00:02:55.480 --> 00:02:57.620
and we'll see that in action today.

00:02:57.620 --> 00:03:00.300
So the two frameworks that make up Cocoa,
the core Cocoa,

00:03:00.300 --> 00:03:03.870
our foundation and application kit,
and there are many other frameworks that

00:03:03.870 --> 00:03:05.690
participate in making up what's Cocoa.

00:03:05.700 --> 00:03:08.540
And there are the languages,
Objective-C and Java.

00:03:08.540 --> 00:03:10.360
Objective-C is the
native language of Cocoa,

00:03:10.360 --> 00:03:11.530
what Cocoa is written in.

00:03:11.530 --> 00:03:14.250
We'll see a little bit of
Objective-C in a while.

00:03:14.310 --> 00:03:17.860
And Java is also,
is dynamic language as Objective-C,

00:03:17.860 --> 00:03:19.930
and it works well with Cocoa.

00:03:19.940 --> 00:03:23.520
And tools, Xcode and Interface Builder,
you've seen probably both

00:03:23.800 --> 00:03:26.690
of them yesterday in the
keynote and other sessions,

00:03:26.710 --> 00:03:30.120
and we'll see those today as well,
and how they're crucial in

00:03:30.140 --> 00:03:32.780
developing Cocoa applications.

00:03:32.950 --> 00:03:34.960
So let's now talk about
the two frameworks:

00:03:34.960 --> 00:03:36.660
Foundation and Application Kit.

00:03:36.740 --> 00:03:40.500
Foundation is the core Cocoa framework
for non-UI functionality.

00:03:40.500 --> 00:03:43.750
If you are writing an application
which has no graphics user interface,

00:03:43.750 --> 00:03:46.080
no menus, windows,
etc., you would use the

00:03:46.080 --> 00:03:48.330
Foundation framework.

00:03:48.400 --> 00:03:50.910
Foundation includes the root class,
which is NSObject.

00:03:51.080 --> 00:03:55.000
Almost all Cocoa classes
are derived from NSObject.

00:03:55.000 --> 00:03:58.200
It includes operating system facilities,
so you don't have to drop down into

00:03:58.200 --> 00:03:59.650
Unix layer if you don't want to.

00:03:59.650 --> 00:04:02.780
You can use the classes in Foundation.

00:04:02.780 --> 00:04:05.660
It's got classes for
internationalization.

00:04:05.760 --> 00:04:09.130
Of note here is NSString,
which is a class you

00:04:09.130 --> 00:04:10.250
will encounter a lot.

00:04:10.300 --> 00:04:13.240
It's the class that represents
character strings in Cocoa.

00:04:14.640 --> 00:04:17.350
We have collection classes in Foundation.

00:04:17.460 --> 00:04:20.470
Classes for scripting,
both making your applications

00:04:20.470 --> 00:04:24.570
scriptable and being able to drive
scripting for other applications.

00:04:24.640 --> 00:04:27.600
And also classes for
XML processing and web access.

00:04:27.600 --> 00:04:31.600
Some of these were added in Panther,
and new ones are also coming in in Tiger.

00:04:31.600 --> 00:04:34.700
And there's a rich set of classes
now in Foundation for letting

00:04:34.720 --> 00:04:36.590
you do XML and web-related stuff.

00:04:36.900 --> 00:04:38.660
And much more.

00:04:38.970 --> 00:04:41.570
AppKit,
also known as the Application Kit,

00:04:41.570 --> 00:04:47.020
is the Cocoa framework for creating
applications with user interfaces.

00:04:47.300 --> 00:05:24.200
[Transcript missing]

00:05:25.020 --> 00:05:27.460
So the strengths of Cocoa,
as I said earlier,

00:05:27.490 --> 00:05:31.380
Cocoa is full-featured and powerful,
which means it's got features

00:05:31.380 --> 00:05:35.700
that let you create applications
that you can ship on Mac OS X.

00:05:35.700 --> 00:05:38.430
As you know, as you probably know,
most of the applications that

00:05:38.440 --> 00:05:41.410
ship with Mac OS X are Cocoa,
and there are also a lot of third-party

00:05:41.520 --> 00:05:42.780
powerful applications out there.

00:05:42.780 --> 00:05:45.560
So it lets you create
full-featured applications.

00:05:45.560 --> 00:05:47.060
They're not just toy apps.

00:05:47.110 --> 00:05:49.480
It's also consistent and easy to use.

00:05:49.480 --> 00:05:53.600
The APIs for Cocoa are,
it's not a very huge API,

00:05:53.600 --> 00:05:56.120
and it's consistently named.

00:05:56.120 --> 00:05:59.200
There's also a few design patterns
that we use over and over.

00:05:59.200 --> 00:06:01.920
So once you learn a little bit of Cocoa,
once you start getting

00:06:01.920 --> 00:06:04.600
into some aspect of Cocoa,
you start being able to predict what

00:06:04.600 --> 00:06:06.690
other Cocoa functionality looks like.

00:06:06.700 --> 00:06:08.610
In addition,
you're able to develop your own

00:06:08.610 --> 00:06:11.320
functionality that's consistent
with what Cocoa delivers,

00:06:11.320 --> 00:06:13.860
which makes everything
fit together much better.

00:06:13.880 --> 00:06:17.380
Cocoa is also customizable and
extensible because it's object-oriented.

00:06:17.380 --> 00:06:22.040
If we didn't provide the
exact functionality you need,

00:06:22.040 --> 00:06:25.110
you can usually subclass and
extend the classes we gave

00:06:25.170 --> 00:06:27.060
you to do what you want to do.

00:06:27.060 --> 00:06:29.130
It's also tuned for Mac OS X.

00:06:29.150 --> 00:06:33.240
Cocoa is not some layer on top of some
layer on top of some layer held together

00:06:33.240 --> 00:06:34.700
with some weak object-oriented stuff.

00:06:34.700 --> 00:06:37.710
It's a powerful object-oriented
environment that plugs

00:06:37.740 --> 00:06:40.780
well into Mac OS X,
takes advantage of Mac OS X's strengths,

00:06:40.780 --> 00:06:43.260
and the various other libraries
available on Mac OS X,

00:06:43.260 --> 00:06:45.840
you know, Unix, Quartz, et cetera.

00:06:45.840 --> 00:06:48.480
And Cocoa plays well with others.

00:06:48.490 --> 00:06:49.880
Cocoa is written in Objective-C.

00:06:49.880 --> 00:06:53.400
Objective-C, as we'll see in a minute,
is primarily a C-based environment.

00:06:53.400 --> 00:07:00.020
And so with Cocoa,
you can use any C or C++ or Unix library

00:07:00.020 --> 00:07:01.560
that's available to you on the system.

00:07:01.560 --> 00:07:03.680
In addition,
a lot of open source packages,

00:07:03.680 --> 00:07:07.890
a lot of other Unix packages out there
can be used from Cocoa applications with

00:07:07.890 --> 00:07:10.100
absolutely no difficulty whatsoever.

00:07:10.120 --> 00:07:11.760
There's one thing we
like to say about Cocoa,

00:07:11.760 --> 00:07:15.820
and that simple things are simple
and complex things are possible.

00:07:15.980 --> 00:07:18.110
The things that most
applications should be doing,

00:07:18.180 --> 00:07:20.240
things that are
straightforward and simple,

00:07:20.240 --> 00:07:22.200
it's just,
you can go ahead and do it and it's

00:07:22.200 --> 00:07:23.800
almost no work or a few lines of code.

00:07:23.800 --> 00:07:25.750
But if you want to do unique
things in your application,

00:07:25.830 --> 00:07:28.140
things that are out of the ordinary,
things that will distinguish

00:07:28.230 --> 00:07:31.650
your application,
then Cocoa makes that possible as well.

00:07:32.400 --> 00:07:36.850
Okay, so let's just do a quick demo
of your first application.

00:07:36.860 --> 00:07:41.140
I say application because it's
not going to involve much code,

00:07:41.140 --> 00:07:42.290
or any code.

00:07:42.310 --> 00:07:44.580
So you see an Xcode.

00:07:44.880 --> 00:07:47.880
I'm going to go ahead
and create a new project.

00:07:47.880 --> 00:07:49.740
When you say new project,
you get a bunch of choices,

00:07:49.740 --> 00:07:51.400
one of them being Cocoa application.

00:07:51.400 --> 00:07:54.350
There's also other choices
for document-based apps,

00:07:54.350 --> 00:07:54.800
etc.

00:07:54.800 --> 00:07:59.710
And we'll give it a name: MyApp.

00:08:00.380 --> 00:08:02.540
Now when you create an
application in Cocoa,

00:08:02.630 --> 00:08:04.980
it gives you the few
files to get started.

00:08:04.980 --> 00:08:08.260
You'll notice that one
of those files is main.m.

00:08:08.290 --> 00:08:11.160
It's basically a boilerplate,
just calls the function

00:08:11.160 --> 00:08:12.350
to get things started.

00:08:12.600 --> 00:08:14.980
We almost never modify this file.

00:08:15.050 --> 00:08:19.000
Another file of interest is the nib file,
mainmenu.nib.

00:08:19.080 --> 00:08:23.220
This is the file that contains
your application's user interface.

00:08:23.290 --> 00:08:25.360
Very small apps will have one of these.

00:08:25.460 --> 00:08:28.010
More sophisticated apps
will typically have two,

00:08:28.050 --> 00:08:32.100
three, dozens,
maybe many dozens of interface files.

00:08:32.100 --> 00:08:34.340
These are created in Interface Builder,
and this is where you

00:08:34.340 --> 00:08:36.390
define your user interface.

00:08:36.520 --> 00:08:42.210
I'm going to double-click on this
now to open it in Interface Builder.

00:08:42.210 --> 00:08:42.210
You'll notice that
Interface Builder launches.

00:08:42.950 --> 00:08:44.940
You have a design window.

00:08:44.940 --> 00:08:46.760
You have a window that
represents your menu.

00:08:46.790 --> 00:08:49.380
And you also, down here,
have your document window,

00:08:49.380 --> 00:08:53.290
which represents the various objects
that are in your interface file.

00:08:53.630 --> 00:08:57.270
This is your palette window,
where you have various standard

00:08:57.270 --> 00:09:00.840
controls that come out of the box,
and you can also add your own

00:09:00.840 --> 00:09:02.500
custom controls here as well.

00:09:02.500 --> 00:09:07.500
For instance, one thing we can do is
drag out a text object.

00:09:07.620 --> 00:09:11.990
Notice that as you're placing it down,
Interface Builder is helping you

00:09:12.900 --> 00:09:18.100
[Transcript missing]

00:09:20.670 --> 00:09:26.800
You bring up the info panel,
the inspector, to a

00:09:27.160 --> 00:09:30.840
To modify the characteristics
of widgets you drag from here.

00:09:30.920 --> 00:09:32.400
For instance,
in the case of the text object,

00:09:32.440 --> 00:09:34.770
you can choose its color,
you can change its border,

00:09:34.950 --> 00:09:37.770
you can say that undo is allowed,
you can choose various

00:09:37.770 --> 00:09:38.720
other options here.

00:09:38.720 --> 00:09:41.260
I don't know if you can read that.

00:09:41.310 --> 00:09:42.570
I'll show you some others.

00:09:42.650 --> 00:09:45.590
For instance, I can drag out a slider.

00:09:46.790 --> 00:09:50.950
With a slider you can choose its minimum,
maximum, etc.

00:09:51.120 --> 00:09:51.180
Things you might expect.

00:09:51.180 --> 00:09:52.330
Now back to our text view.

00:09:52.460 --> 00:09:56.550
If you look at this tab here,
you see there's connections, outlets,

00:09:56.560 --> 00:09:57.420
target actions.

00:09:57.420 --> 00:09:59.300
We'll talk about that in a few minutes.

00:09:59.300 --> 00:10:01.750
There's a size inspector,
which lets you change the

00:10:01.750 --> 00:10:03.410
various sizing behaviors.

00:10:03.450 --> 00:10:06.680
If you choose the internal springs,
that means the text object

00:10:06.680 --> 00:10:09.460
will size as the window sizes.

00:10:09.460 --> 00:10:11.780
And let's also drag out a button.

00:10:13.300 --> 00:10:17.420
Now, typically in Interface Builder,
one way you do your development is to

00:10:17.420 --> 00:10:21.940
put your UI together and you go ahead and
say "test interface." When you do that,

00:10:22.000 --> 00:10:24.970
Interface Builder starts
running your application using

00:10:24.970 --> 00:10:26.600
the interface you created.

00:10:26.630 --> 00:10:33.350
Now note that the slider is alive,
it's not doing much, the button is alive,

00:10:33.350 --> 00:10:33.350
it's not doing much,
and in fact the text object is alive.

00:10:34.260 --> 00:10:36.500
It even has features like a font panel.

00:10:36.540 --> 00:10:38.360
I can change the font here.

00:10:38.360 --> 00:10:41.420
And it even has undo,
because earlier I said that undo

00:10:41.420 --> 00:10:43.440
should be allowed in this text object.

00:10:43.490 --> 00:10:44.700
I can resize the window.

00:10:44.980 --> 00:10:51.280
Notice that the text object resizes,
and these buttons stay relative

00:10:51.280 --> 00:10:51.280
to the lower left corner.

00:10:52.650 --> 00:10:56.600
So typically, you use this test interface
to test your interface if you

00:10:56.700 --> 00:10:57.980
have objects in the palette.

00:10:58.080 --> 00:10:59.770
Now,
if you develop custom objects that are

00:10:59.770 --> 00:11:03.400
not yet in the palette window here,
then you can't do them in test interface.

00:11:03.400 --> 00:11:06.240
You typically build your application to
take your application to the next level.

00:11:06.240 --> 00:11:13.160
Of course, you can always build
your own palette objects,

00:11:13.160 --> 00:11:13.520
put them here,
and that way you can test your

00:11:13.520 --> 00:11:13.520
interface in Interface Builder.

00:11:13.680 --> 00:11:17.560
Okay, so one other thing to note about
NIV files is when we did this,

00:11:17.910 --> 00:11:20.300
we generated the NIV file.

00:11:20.300 --> 00:11:22.350
Note that the NIV file
has no source code in it.

00:11:22.380 --> 00:11:25.300
It just saves, archives the objects that
we're using here—the window,

00:11:25.300 --> 00:11:28.250
the slider, the button—and it archives
the connections between them,

00:11:28.250 --> 00:11:29.560
as we'll see in a few minutes.

00:11:29.610 --> 00:11:31.600
So there's no source code generated.

00:11:32.040 --> 00:11:38.940
Okay, now let's go back to slides so we
can play some with source code.

00:11:38.940 --> 00:11:38.940
Thank you.

00:11:43.340 --> 00:11:47.040
Okay, so in that demo we saw window,
slider, button, text view,

00:11:47.040 --> 00:11:49.540
font panel are some
of the objects we saw.

00:11:49.580 --> 00:11:53.840
As you see here, a standard theme in
Cocoa objects is the prefix NX,

00:11:53.840 --> 00:11:58.330
which lets you recognize that
these are standard AppKit objects.

00:11:58.790 --> 00:12:00.800
Now let's talk a little bit
about Objective-C so we can

00:12:00.800 --> 00:12:02.060
start writing some code.

00:12:02.070 --> 00:12:05.400
Objective-C, as I said earlier,
is a small superset of C.

00:12:05.540 --> 00:12:07.820
It's a superset of ANSI C.

00:12:07.830 --> 00:12:14.370
It's got some additional syntax
and a few additional types.

00:12:16.470 --> 00:12:22.140
It's got a dynamic object runtime,
by which I mean metadata that goes

00:12:22.140 --> 00:12:27.680
with the objects and introspection
facilities that allows making

00:12:27.680 --> 00:12:31.400
decisions at runtime about the objects.

00:12:31.400 --> 00:12:35.400
We'll see the power of that in our demos.

00:12:35.400 --> 00:12:35.400
It's also a single inheritance
object-oriented language.

00:12:36.570 --> 00:12:38.430
In Objective-C,
here's how you define a method.

00:12:38.440 --> 00:12:41.000
A method is, of course,
an entry point into a class.

00:12:41.000 --> 00:12:43.750
Here we have a method
called setWidth colon,

00:12:43.750 --> 00:12:44.880
height colon.

00:12:44.880 --> 00:12:47.880
One thing to note here is
that the name setWidth colon,

00:12:47.980 --> 00:12:51.130
height colon is split
such that each parameter,

00:12:51.130 --> 00:12:53.840
the W and the H,
have a name in front of it.

00:12:53.900 --> 00:12:55.180
So setWidth colon, height.

00:12:55.180 --> 00:12:56.960
The full name of the
method is setWidth colon,

00:12:56.960 --> 00:12:57.660
height colon.

00:12:57.660 --> 00:13:01.540
But the name is split, which, of course,
for longer method names with four or five

00:13:01.540 --> 00:13:03.730
arguments makes it a lot easier to read.

00:13:03.740 --> 00:13:06.260
Here, this is how you define a name.

00:13:06.500 --> 00:13:08.660
What it seems to be doing
is taking those parameters,

00:13:08.660 --> 00:13:10.630
assigning them to maybe
instance variables.

00:13:10.660 --> 00:13:14.140
To invoke a method,
which we also say sending a message,

00:13:14.140 --> 00:13:15.700
you use the braces.

00:13:15.700 --> 00:13:18.390
So here we're sending
a message to an object,

00:13:18.390 --> 00:13:21.860
myBox, the setWidth colon,
height colon method.

00:13:21.860 --> 00:13:25.300
And in the line below,
you see a nested method call,

00:13:25.300 --> 00:13:27.680
where we're first making a
call to array object at index,

00:13:27.700 --> 00:13:29.880
which presumably returns
a box or some object.

00:13:29.880 --> 00:13:33.090
And then we send that, in turn,
setWidth colon, height colon.

00:13:33.100 --> 00:13:35.460
You can nest these method
expressions just like you can

00:13:35.530 --> 00:13:36.470
nest function expressions.

00:13:36.500 --> 00:13:38.380
expressions.

00:13:39.770 --> 00:13:42.630
One other thing is you
can refer to a method,

00:13:42.700 --> 00:13:45.760
and this goes along with
the dynamic object runtime.

00:13:45.760 --> 00:13:48.770
There is a type, SCL, cell,
short for selector,

00:13:48.770 --> 00:13:52.020
which allows you to refer
in this case to the method,

00:13:52.020 --> 00:13:53.990
for instance,
set width colon height colon by

00:13:54.000 --> 00:13:55.720
using this at selector syntax.

00:13:55.720 --> 00:13:58.240
Once you do that,
you have a variable which

00:13:58.570 --> 00:14:01.760
represents this method name,
and then you can apply

00:14:01.940 --> 00:14:03.880
this to different objects.

00:14:04.000 --> 00:14:06.770
Note that this is not a function pointer,
because depending on

00:14:06.850 --> 00:14:10.060
what object it's sent to,
it will invoke different pieces of code.

00:14:12.140 --> 00:14:13.090
A little more Objective-C.

00:14:13.100 --> 00:14:18.610
You can refer to an object by either
saying "box*" or an "id". The difference

00:14:18.700 --> 00:14:22.610
here is that these help the compiler
determine what type of methods are

00:14:22.610 --> 00:14:24.540
valid when sent to that object.

00:14:24.600 --> 00:14:30.780
"box*" indicates an
instance of a box class.

00:14:30.780 --> 00:14:30.780
"id" indicates any object.

00:14:32.170 --> 00:14:37.760
You can refer to this, meaning yourself,
in the context of an object with self.

00:14:38.000 --> 00:14:40.760
And finally, off-note,
is constant strings.

00:14:40.760 --> 00:14:43.580
As I mentioned earlier,
we have the NSString class.

00:14:43.690 --> 00:14:50.390
We have a construct for creating
constant strings in your code,

00:14:50.390 --> 00:14:55.300
and that's @,
here you see the constant string

00:14:55.300 --> 00:14:55.550
@helloWorld being assigned to
a variable of type NSString.

00:14:56.230 --> 00:14:59.950
Okay, now that we're armed with
some Objective-C knowledge,

00:15:00.060 --> 00:15:02.580
let's go ahead and write some code.

00:15:02.580 --> 00:15:05.500
And the first thing we're going
to do is do some custom drawing.

00:15:07.370 --> 00:15:11.720
To do custom drawing,
you use a class called NSView.

00:15:11.720 --> 00:15:15.800
It's an abstract class,
meaning you almost never use it as is,

00:15:15.800 --> 00:15:17.130
but you subclass it.

00:15:17.360 --> 00:15:20.200
And you would subclass
it to do custom drawing.

00:15:20.320 --> 00:15:22.430
And you can also subclass
it to do event handling,

00:15:22.430 --> 00:15:24.410
drag and drop, and plenty of other stuff.

00:15:24.460 --> 00:15:30.030
It's an abstract class with
a lot of functionality.

00:15:30.030 --> 00:15:31.510
To do custom drawing,
you override this method called drawRect.

00:15:33.380 --> 00:15:35.960
To do your custom drawing
in the context of a view,

00:15:36.000 --> 00:15:37.230
you would use these classes.

00:15:37.250 --> 00:15:39.790
An NSBazierPath class
that represents paths.

00:15:40.030 --> 00:15:42.190
NSColor, which represents colors.

00:15:42.490 --> 00:15:43.770
It's actually a fairly rich class.

00:15:43.780 --> 00:15:48.010
It's not just your garden variety RGB,
but it can also represent CMYKs,

00:15:48.140 --> 00:15:51.300
patterns,
and a whole other set of color spaces.

00:15:51.330 --> 00:15:53.960
The NSImage class,
which represents images.

00:15:54.000 --> 00:15:58.020
And note that you can also use the full
functionality given to you by Quartz.

00:15:58.120 --> 00:15:59.620
Quartz is a C-based API.

00:15:59.960 --> 00:16:05.220
It presents a PDF-based
drawing environment.

00:16:05.290 --> 00:16:06.940
And Cocoa uses Quartz.

00:16:06.940 --> 00:16:09.100
So the drawing environments
are compatible.

00:16:09.100 --> 00:16:11.880
And Quartz is written in C,
so the APIs are in C.

00:16:12.130 --> 00:16:14.610
So from Cocoa,
you can call into Quartz all you want.

00:16:14.670 --> 00:16:17.900
So in cases where you can't call into
the NS functions for some reason,

00:16:17.900 --> 00:16:19.740
Quartz is also available.

00:16:19.740 --> 00:16:22.640
So let's do a demo of custom drawing.

00:16:26.250 --> 00:16:29.420
Okay, so now we're back in Xcode.

00:16:29.420 --> 00:16:31.800
The thing I'm going to do now
is I'm going to add a new class,

00:16:31.800 --> 00:16:34.890
a subclass of view, because as I said we
need the subclass view.

00:16:34.890 --> 00:16:37.930
We're going to say new file.

00:16:38.240 --> 00:16:41.790
And note that there are some
pre-prepared entries here for you:

00:16:42.150 --> 00:16:45.340
Objective-C class,
Objective-C document subclass, so on.

00:16:45.340 --> 00:16:45.940
View is one of them.

00:16:45.940 --> 00:16:46.830
We'll choose that.

00:16:46.990 --> 00:16:48.090
This is just a little convenience.

00:16:48.100 --> 00:16:52.440
You can just choose the basic class and
do some of the things it does for you.

00:16:52.440 --> 00:16:54.500
But we'll choose NSView subclass.

00:16:54.650 --> 00:16:56.440
We'll call it .view.

00:16:56.440 --> 00:17:00.970
We'll create .view.h,
which you'll see in a minute,

00:17:00.970 --> 00:17:03.470
and we'll add it to our target.

00:17:03.470 --> 00:17:06.570
As you see,
.view has been added here to our project.

00:17:11.290 --> 00:17:12.140
Hide that area.

00:17:12.140 --> 00:17:15.270
Now, we're looking at .vue.h,
which describes the interface

00:17:15.350 --> 00:17:16.320
to your application.

00:17:16.320 --> 00:17:20.960
For this demo, I want to edit the .vue
implementation file.

00:17:20.960 --> 00:17:23.090
So I'm going to click this button here,
go to counterpart,

00:17:23.200 --> 00:17:26.800
which switches to the .m file,
which is where your class definition,

00:17:26.800 --> 00:17:27.840
where your methods sit.

00:17:27.920 --> 00:17:31.140
So if we look at .vue.m,
here are the methods.

00:17:31.140 --> 00:17:33.940
As a convenience, again,
only as a convenience,

00:17:33.940 --> 00:17:36.590
it generated the source code for us,
an init method,

00:17:36.590 --> 00:17:39.070
thinking we might want to initialize,
and a draw method,

00:17:39.070 --> 00:17:40.400
thinking we might want to draw.

00:17:41.030 --> 00:17:44.280
So for now,
let's just look at our draw method.

00:17:44.450 --> 00:17:46.000
And let's just customize it.

00:17:46.040 --> 00:17:51.400
Now during this demo,
I'm going to be taking advantage

00:17:51.400 --> 00:17:54.460
of a demo assistant I have
hidden in the computer here.

00:17:54.460 --> 00:17:57.070
And as I type keys, it will type for me.

00:17:57.140 --> 00:17:58.200
Let me show you.

00:17:58.530 --> 00:17:59.930
There's a comment.

00:18:00.010 --> 00:18:02.820
And there's three lines of
code that magically appear.

00:18:02.820 --> 00:18:06.070
These three lines of code,
I ask self-- that's the

00:18:06.070 --> 00:18:07.250
NSView for the bounds.

00:18:07.290 --> 00:18:09.820
Bounds represents the area of the view.

00:18:09.860 --> 00:18:11.640
And that's assigned to
this bounds variable,

00:18:11.640 --> 00:18:12.520
which is NSRect.

00:18:12.520 --> 00:18:13.900
NSRect is nothing magical.

00:18:13.900 --> 00:18:17.280
It's just a C structure
that represents a rectangle.

00:18:17.280 --> 00:18:20.300
Then we do a nested method call here,
method invocation,

00:18:20.300 --> 00:18:23.980
where I ask NSColor class
for the white color.

00:18:23.980 --> 00:18:26.770
That returns an instance of color,
which represents white.

00:18:26.780 --> 00:18:27.800
And I tell it to set.

00:18:27.800 --> 00:18:31.000
So that sets the current
graphics context color to white.

00:18:31.000 --> 00:18:34.650
And I call a function rectfill
to fill the bounds with white.

00:18:34.690 --> 00:18:36.560
So that clears the view to white.

00:18:36.560 --> 00:18:38.980
Note that I could have
used BezierPath here,

00:18:39.000 --> 00:18:41.650
but I'm using this function
rectfill to show you Cocoa is

00:18:41.650 --> 00:18:43.400
not limited just to classes.

00:18:43.400 --> 00:18:45.230
And in the classes and methods,
Cocoa also has some

00:18:45.320 --> 00:18:47.010
functions where appropriate.

00:18:47.190 --> 00:18:49.350
So this clears our view.

00:18:49.500 --> 00:18:52.900
Now let's go ahead and
draw something interesting,

00:18:52.900 --> 00:18:54.860
which in this case is a dot.

00:18:54.860 --> 00:19:00.130
For that, I will first put a comment,
and then create a rect that

00:19:00.130 --> 00:19:03.190
represents the bounds of the dot.

00:19:03.190 --> 00:19:03.190
Whoops.

00:19:05.120 --> 00:19:09.000
Then I will set the blue color,
just like up here.

00:19:09.000 --> 00:19:13.620
And then now I will use a Bezier path,
creating a Bezier path that represents

00:19:13.630 --> 00:19:15.380
an oval with this rectangle.

00:19:15.380 --> 00:19:17.900
In this case it's a circle
because the rectangle is a square.

00:19:17.900 --> 00:19:19.600
And I will tell it to fill.

00:19:19.600 --> 00:19:23.720
So this will create a circle and then
fill it with the color we created here.

00:19:23.720 --> 00:19:25.940
So let's pretty up this a little bit.

00:19:25.940 --> 00:19:27.000
Let's save.

00:19:27.000 --> 00:19:30.170
And now I'm going to hit build and run,

00:19:32.730 --> 00:19:34.850
Oh, I forgot one very crucial thing.

00:19:34.920 --> 00:19:37.300
Let's go back to our demo here.

00:19:37.450 --> 00:19:40.510
The thing I forgot is to go into
our interface builder and actually

00:19:40.510 --> 00:19:42.260
create the UI for my application.

00:19:42.260 --> 00:19:44.540
In interface builder,
I want to go ahead and get

00:19:44.540 --> 00:19:47.200
rid of these three things,
which we used earlier.

00:19:47.330 --> 00:19:51.800
And instead, I'm going to be using,
under the containers tab, a custom view.

00:19:51.920 --> 00:19:57.110
Again, let's follow Ivy's guidelines,
drop our custom view here.

00:19:58.090 --> 00:20:01.760
Let's make it size centrally,
just like we did with the text view.

00:20:01.840 --> 00:20:04.750
And the one more thing we're going to
do now is tell Interface Builder that

00:20:04.980 --> 00:20:07.400
this custom view is of type dot view.

00:20:07.460 --> 00:20:12.370
And to do that,
under the classes in the document

00:20:12.370 --> 00:20:15.200
window here under classes,
I can either go ahead and

00:20:15.200 --> 00:20:17.000
subclass this NS view.

00:20:17.070 --> 00:20:21.610
I can hit the right mouse button
or control mouse here to do that.

00:20:21.700 --> 00:20:25.390
Another thing I can do is do read files.

00:20:25.900 --> 00:20:42.700
[Transcript missing]

00:20:42.960 --> 00:20:47.250
So I can come to my custom view here,
and in the inspector,

00:20:47.370 --> 00:20:48.900
I can specify its class.

00:20:48.900 --> 00:20:51.800
Note that the various NS classes
are listed here already.

00:20:51.800 --> 00:20:55.290
I want it to be a subclass of—I want
it to be an instance of dot view.

00:20:55.430 --> 00:21:01.190
So I do that, I save here,
I hide interface builder, go into Xcode,

00:21:01.190 --> 00:21:02.700
and let's run.

00:21:03.510 --> 00:21:06.400
As you see, we now have our window
with the dot in it.

00:21:06.400 --> 00:21:09.200
And as I resize the window,
the dot stays fixed relative

00:21:09.200 --> 00:21:11.000
to the lower left corner.

00:21:11.000 --> 00:21:13.430
That's because the drawing,
the coordinate system is fixed

00:21:13.430 --> 00:21:16.110
relative to the lower left corner
of the drawing environment.

00:21:16.200 --> 00:21:18.450
You can see the white area here,
which represents the view.

00:21:18.700 --> 00:21:22.330
And the view resizes and redraws
automatically as I resize the window.

00:21:22.400 --> 00:21:26.290
So, one of the things you do get just
by implementing that few lines of

00:21:26.310 --> 00:21:30.390
DrawRect is you get a lot of other
functionality available to you.

00:21:30.510 --> 00:21:31.400
Let me show you what I mean.

00:21:31.400 --> 00:21:37.400
I can come to dot view and I can
say make subview of scroll view.

00:21:37.400 --> 00:21:44.400
Okay, and let's make that
scroll view also sizable.

00:21:44.400 --> 00:21:47.620
I'm going to save this.

00:21:48.410 --> 00:21:52.840
Go back to Xcode and
let's build and run again.

00:21:52.840 --> 00:21:56.250
So notice that suddenly our scroll view,
our view is contained within a

00:21:56.250 --> 00:21:58.100
scroll view and we can scroll it.

00:21:58.100 --> 00:21:59.670
And again,
just because you've implemented

00:21:59.670 --> 00:22:02.980
your view so it knows drawing,
you get scrolling for free.

00:22:02.980 --> 00:22:05.240
Let me show you one more
thing you get for free.

00:22:05.240 --> 00:22:09.990
Let's undo this scroll view.

00:22:09.990 --> 00:22:09.990
Oops, don't want to undo that much.

00:22:12.600 --> 00:22:21.300
[Transcript missing]

00:22:24.900 --> 00:22:29.900
I want to show you how
you can make it print.

00:22:29.900 --> 00:22:33.860
We haven't talked about target/action,
we'll talk about it in five minutes,

00:22:33.860 --> 00:22:37.040
but one way to make it print is to
connect the print menu item to our

00:22:37.090 --> 00:22:38.900
view and just select print here.

00:22:38.900 --> 00:22:45.510
I'll talk about this in a few minutes
if you haven't seen this before.

00:22:45.510 --> 00:22:46.850
Let's save.

00:22:46.850 --> 00:22:50.830
Back in Xcode, let's build and run again.

00:22:51.090 --> 00:22:52.990
If I now were to go
in here and say print,

00:22:53.950 --> 00:22:56.430
We have a print panel,
and one thing you'll notice, of course,

00:22:56.470 --> 00:22:57.570
we don't have a printer.

00:22:57.660 --> 00:23:00.220
If we were able to print,
you would get something like this.

00:23:00.220 --> 00:23:04.420
This is the artist's concept drawing of
what the dot might look like on paper.

00:23:04.420 --> 00:23:06.690
But if you don't believe me,
I'll do preview,

00:23:06.720 --> 00:23:09.700
which is always something you can do
when you're testing your printing.

00:23:09.700 --> 00:23:12.690
And the preview application will launch,
and you see that the dot

00:23:12.690 --> 00:23:14.120
is printed on that page.

00:23:14.140 --> 00:23:15.140
Okay.

00:23:15.140 --> 00:23:20.450
Okay, so let's go back to slides, please.

00:23:24.010 --> 00:23:27.910
Next thing we want to do is
add some excitement to our demo

00:23:27.920 --> 00:23:29.940
and do some event handling.

00:23:30.040 --> 00:23:34.680
As I mentioned earlier,
NSVU is your class to do

00:23:34.680 --> 00:23:37.850
most of your event handling.

00:23:38.060 --> 00:23:40.740
You override methods such as mouse down,
mouse drag, key down,

00:23:40.750 --> 00:23:44.000
depending on what you want to do to
handle the appropriate kind of events.

00:23:44.040 --> 00:23:46.740
There is also another
class called NSEvent,

00:23:46.740 --> 00:23:50.980
which represents various kinds of events,
and you get event-specific

00:23:51.360 --> 00:23:52.760
information out of it.

00:23:52.760 --> 00:23:58.860
For instance, the mouse location,
the keyboard, what key was pressed,

00:23:58.860 --> 00:23:58.860
what tablet pressure, and so on.

00:23:59.390 --> 00:24:02.050
You override methods such as mouse down,
mouse drag, key down,

00:24:02.050 --> 00:24:05.300
depending on what you want to do to
handle the appropriate kind of events.

00:24:05.300 --> 00:24:07.870
There is also another
class called NSEvent,

00:24:07.870 --> 00:24:07.870
which represents various kinds of events,
and you get event-specific

00:24:07.870 --> 00:24:07.870
information out of it.

00:24:07.870 --> 00:24:07.870
For instance, the mouse location,
the keyboard, what key was pressed,

00:24:07.870 --> 00:24:07.870
what tablet pressure, and so on.

00:24:09.730 --> 00:24:14.100
Now one thing I want to do now is
parameterize some things about our dot.

00:24:14.100 --> 00:24:17.570
So we go back to the interface file,
.u.h.

00:24:17.690 --> 00:24:19.720
And I'm going to go ahead and
add two instance variables.

00:24:19.720 --> 00:24:23.840
Instance variables are declared in
the header file in this area here.

00:24:23.960 --> 00:24:27.510
So I'm going to add an instance
variable that represents the

00:24:27.510 --> 00:24:29.180
center location of the dot.

00:24:29.370 --> 00:24:32.700
And this point is a structure
that represents a point.

00:24:33.140 --> 00:24:34.900
I'm going to have a radius for the dot.

00:24:34.900 --> 00:24:36.030
It's a floating point number.

00:24:36.140 --> 00:24:38.030
Note that coordinates are
floating point numbers,

00:24:38.030 --> 00:24:40.100
so we use floating point
numbers where appropriate.

00:24:40.100 --> 00:24:43.790
Okay, so now we added two instance
variables to our dot.

00:24:43.960 --> 00:24:45.320
I'm going to save this file.

00:24:45.440 --> 00:24:47.940
I'm going to switch to .vue.m.

00:24:48.860 --> 00:24:51.550
Back in the initWithFrame method,
the place where I said

00:24:51.550 --> 00:24:54.120
we do our initialization,
I'm now going to initialize

00:24:54.120 --> 00:24:55.360
those two instance variables.

00:24:55.690 --> 00:24:59.720
So I'm going to delete this code,
and I'm going to set the center to 100,

00:24:59.720 --> 00:25:04.320
both the X and Y locations of my center,
and I'm going to set the radius to 50.

00:25:04.320 --> 00:25:08.510
So this is—we're initializing these
variables to their initial values.

00:25:08.770 --> 00:25:12.040
Now here we are drawing our
dot using fixed numbers,

00:25:12.040 --> 00:25:16.690
so let's replace this line to
use the new instance variables.

00:25:16.920 --> 00:25:20.100
Now here we are drawing our
dot using fixed numbers,

00:25:20.150 --> 00:25:24.800
so let's replace this line to
use the new instance variables.

00:25:34.800 --> 00:25:47.900
[Transcript missing]

00:25:48.220 --> 00:25:51.210
To the view's own coordinates
using this method,

00:25:51.320 --> 00:25:53.000
convertPointFromView.

00:25:53.000 --> 00:25:54.700
This gives us our center.

00:25:54.700 --> 00:25:55.400
This is where we clicked.

00:25:55.530 --> 00:25:58.200
This is what we want our
center of our dot to be.

00:25:58.200 --> 00:26:01.200
And note here that we're just
assigning to our center variable.

00:26:01.200 --> 00:26:04.040
Pretty straightforward.

00:26:04.040 --> 00:26:06.390
One more thing we want to do now is,
given that now we have

00:26:06.390 --> 00:26:10.590
a new center location,
we want to redraw our view.

00:26:11.090 --> 00:26:14.090
Instead of calling drawRect,
for instance, to draw our view,

00:26:14.090 --> 00:26:17.720
we just basically tell the view
that it needs to be redisplayed.

00:26:17.720 --> 00:26:21.440
And then AppKit will redraw your
view at an opportune time later.

00:26:21.570 --> 00:26:24.890
What this allows doing is
coalescing various drawing needs

00:26:24.890 --> 00:26:27.580
to the top of the event loop,
so you're not drawing

00:26:27.580 --> 00:26:30.550
things over and over,
things aren't overlapping, and so on.

00:26:30.640 --> 00:26:34.110
So to do that, you tell the view that
needs to be displayed.

00:26:34.110 --> 00:26:35.970
Self.sit needs display, yes.

00:26:36.280 --> 00:26:38.880
So we take the event,
we assign our center,

00:26:38.880 --> 00:26:40.370
and we just tell it needs display.

00:26:40.490 --> 00:26:43.120
So let's save and let's run.

00:26:44.350 --> 00:26:48.450
Okay, now as I click around,
the dot is redisplayed

00:26:48.450 --> 00:26:50.330
at the new location.

00:26:50.410 --> 00:26:52.130
Note that when I do this,
because I told the

00:26:52.130 --> 00:26:54.470
whole view to redisplay,
the whole bounds of the

00:26:54.470 --> 00:26:55.800
view is redisplayed.

00:26:55.800 --> 00:26:58.880
In the performance talk on Friday,
you can learn about how you can

00:26:58.890 --> 00:27:01.130
do this much more efficiently,
of course.

00:27:01.150 --> 00:27:03.640
Here, we're just taking the easy way out.

00:27:03.680 --> 00:27:05.520
Let me show you one more thing.

00:27:05.710 --> 00:27:08.020
I talked about mouse-dragged as well.

00:27:08.050 --> 00:27:12.060
Mouse-drag is an event you get when the
mouse is clicked and it's being dragged.

00:27:12.100 --> 00:27:14.760
We'll have mouse-drag do the
same thing as mouse-down,

00:27:14.760 --> 00:27:17.070
so we'll just call self-mouse-down.

00:27:17.120 --> 00:27:18.020
Let me save.

00:27:18.120 --> 00:27:20.920
Let me go ahead and run the app again.

00:27:20.960 --> 00:27:28.070
Now, as I click around, the dot moves,
but if I click and drag, again,

00:27:28.070 --> 00:27:28.840
the same thing happens.

00:27:28.890 --> 00:27:30.810
So the view is being
constantly redisplayed,

00:27:30.810 --> 00:27:32.630
being told to set needs
display and so on.

00:27:32.640 --> 00:27:35.450
So that is fairly straightforward
to go ahead and make our dot

00:27:35.450 --> 00:27:38.380
dance in any way we want.

00:27:38.430 --> 00:27:41.190
Okay, let's go back to slides, please.

00:27:42.820 --> 00:27:46.160
Okay, again, drawing, event handling,
those are pretty mundane things.

00:27:46.160 --> 00:27:49.190
How about some UI elements,
so your app looks like a

00:27:49.230 --> 00:27:50.980
Cocoa app or a Mac OS X app?

00:27:51.060 --> 00:27:54.740
UI elements are represented
by a class called NSControl,

00:27:54.740 --> 00:27:56.900
which is a subclass of NSView.

00:27:57.070 --> 00:28:00.610
The daily controls you see,
the regular controls you

00:28:00.610 --> 00:28:03.760
see include text field,
button, slider.

00:28:03.760 --> 00:28:07.510
We also have some new controls,
a little more sophisticated, token field,

00:28:07.510 --> 00:28:08.400
date picker.

00:28:08.400 --> 00:28:10.200
These are new in Tiger.

00:28:10.200 --> 00:28:12.900
We also have some really
sophisticated controls,

00:28:12.900 --> 00:28:14.210
table view, browser.

00:28:14.210 --> 00:28:17.520
Browser represents the multi-column
view you see in Finder.

00:28:17.520 --> 00:28:19.900
Table view represents
a table of elements.

00:28:19.900 --> 00:28:22.590
These are typically made
up of other UI elements and

00:28:22.590 --> 00:28:25.280
they're fairly sophisticated,
but they're still subclass of NS control.

00:28:26.070 --> 00:28:32.800
There is also this other class
which we won't talk about today.

00:28:32.810 --> 00:28:32.810
But let me talk about it.

00:28:32.810 --> 00:28:32.810
It's the...

00:28:33.290 --> 00:28:35.450
Every control has a cell,
and in some cases,

00:28:35.450 --> 00:28:37.140
controls have multiple cells.

00:28:37.190 --> 00:28:39.190
Cells are basically what
controls are made up of.

00:28:39.320 --> 00:28:40.990
Typically, you just use a control.

00:28:41.150 --> 00:28:44.000
However, if you were subclassing
control for your own purposes,

00:28:44.000 --> 00:28:47.120
you might find that you need to also
subclass the corresponding cell,

00:28:47.120 --> 00:28:49.190
and that's why we're mentioning it here.

00:28:49.270 --> 00:28:52.250
And in some cases,
like table views and browsers,

00:28:52.250 --> 00:28:56.140
you might be using multiple cells
to get what you want to get done,

00:28:56.140 --> 00:28:58.550
to represent multiple pieces of that.

00:28:58.550 --> 00:29:00.730
Cells are not subclasses of views.

00:29:00.740 --> 00:29:00.910
They are lighter-weight objects.

00:29:02.150 --> 00:29:05.760
The main design pattern for
UI elements in Cocoa is this

00:29:05.760 --> 00:29:08.890
target action design pattern.

00:29:08.900 --> 00:29:14.200
Target action controls have a
target and they have an action.

00:29:14.290 --> 00:29:17.300
Target is the object they send a
message to when they're fiddled with.

00:29:17.300 --> 00:29:21.600
So you play with the slider and
it says "I've been fiddled with."

00:29:21.600 --> 00:29:24.670
The action is the message they send,
so what they actually say.

00:29:24.680 --> 00:29:28.160
They don't actually say "I've
been fiddled with." An action

00:29:28.160 --> 00:29:31.800
is a single argument method,
always, and we'll see that in our demo.

00:29:31.800 --> 00:29:33.900
And note that these
are not magical things.

00:29:33.900 --> 00:29:36.820
They're really just instance
variables of controls.

00:29:38.120 --> 00:29:43.600
Okay, so armed with that knowledge,
let's go to our next demo.

00:29:43.600 --> 00:29:43.600
Grab some water.

00:29:51.650 --> 00:29:57.030
The thing we want to do now is want to
be able to change the size of the dot.

00:29:58.790 --> 00:30:04.100
Okay, now, to do that,
we're going to be adding a

00:30:04.100 --> 00:30:07.780
method called changeSize,
which is an action method.

00:30:10.420 --> 00:30:12.860
So this is an action method,
change size colon,

00:30:12.860 --> 00:30:14.860
and it has one argument, sender.

00:30:14.860 --> 00:30:16.730
And this is what makes an action method.

00:30:16.910 --> 00:30:21.160
And the argument, sender,
is the UI element that sent this message.

00:30:21.300 --> 00:30:23.870
Now we're assuming that the sender
is something that's capable of

00:30:23.880 --> 00:30:26.310
producing a floating point number,
because we want to change

00:30:26.310 --> 00:30:27.300
the size of the dot.

00:30:27.410 --> 00:30:30.260
So what we're going to do is ask
the sender for its float value.

00:30:30.310 --> 00:30:33.670
Most controls have a method called
float value that represents the floating

00:30:33.790 --> 00:30:36.290
point value that they've been set to.

00:30:36.300 --> 00:30:38.680
We're going to ask for its float
value and we're going to assign it

00:30:38.680 --> 00:30:41.290
to our radius instance variable,
which we had added last time.

00:30:41.300 --> 00:30:46.300
And again, just like we did up here,
we just need to self set needs display.

00:30:46.300 --> 00:30:49.300
So we're going to change the radius,
self set needs display.

00:30:49.300 --> 00:30:51.260
Now I want to do one more thing.

00:30:51.290 --> 00:30:54.650
We've been adding methods to our m file,
but we have not been

00:30:54.650 --> 00:30:57.300
adding them to our h file,
to our interface file.

00:30:57.300 --> 00:31:00.690
For methods that you expect to
be called from the outside world,

00:31:00.690 --> 00:31:02.210
it's a good idea to do that.

00:31:02.300 --> 00:31:06.300
So let's go ahead and add the change
side declaration to our dot view.

00:31:06.300 --> 00:31:08.270
As you can see, it's straightforward.

00:31:08.330 --> 00:31:12.260
It's just change size colon
with a semicolon representing

00:31:12.260 --> 00:31:14.300
that this has this method.

00:31:14.300 --> 00:31:16.290
Now we'll see why this is useful.

00:31:16.360 --> 00:31:19.030
I'm going to switch back
to interface builder.

00:31:22.650 --> 00:31:26.140
Now, in Interface Builder,
I'm going to tell Interface Builder

00:31:26.140 --> 00:31:28.080
to re-read that .vue.h file.

00:31:28.450 --> 00:31:34.020
So, if I go back into Classes tab here,
I can say, either by right-clicking here

00:31:34.110 --> 00:31:38.880
or by going to the Classes menu,
"Read files" or "Read .vue.h."

00:31:38.880 --> 00:31:44.460
So this will cause Interface
Builder to re-parse .vue.h,

00:31:44.830 --> 00:31:46.720
which means it now knows that, um,

00:31:58.000 --> 00:32:03.630
Should know, okay,
let me go back and see one thing.

00:32:17.900 --> 00:32:24.260
I'm sorry, this was, this is all proper,
I'm wondering what I could have—let

00:32:24.260 --> 00:32:28.530
me get it to read the file again,
just in case.

00:32:28.570 --> 00:32:33.060
Let me say parse here,
go back to interface builder,

00:32:33.060 --> 00:32:34.790
hide other stuff.

00:32:42.300 --> 00:32:47.520
"It's fairly straightforward stuff,
it shouldn't be..." "Okay,

00:32:47.520 --> 00:32:55.300
I will change this to IB action,
which is often not necessary.

00:32:55.300 --> 00:33:00.020
IB action is another defined for void,
and what it says is it marks

00:33:00.110 --> 00:33:03.380
this method explicitly as an
action for IB to recognize.

00:33:03.380 --> 00:33:06.300
Let's see if this
actually does the trick.

00:33:06.300 --> 00:33:08.100
It often is not needed.

00:33:08.180 --> 00:33:11.080
So if I go ahead and reparse the file,
and let's make sure the file

00:33:11.080 --> 00:33:17.750
is coming from the right place,
it is, dot view dot h, parse.

00:33:21.730 --> 00:33:24.700
Okay, I'm sort of perplexed by this.

00:33:24.720 --> 00:33:36.480
Luckily, at this point,
I will quit Interface Builder,

00:33:36.480 --> 00:33:36.480
I will go to the oven and pull out

00:33:42.700 --> 00:33:46.940
Okay, so there we go.

00:33:47.000 --> 00:33:48.390
Pull out a finished version of that.

00:33:48.410 --> 00:33:50.500
And that has always worked,
so I'm sort of curious as

00:33:50.500 --> 00:33:51.440
to what's going on there.

00:33:51.440 --> 00:33:56.450
But if we look at .u.h
in the prepared version,

00:33:56.450 --> 00:33:59.400
it looks exactly the same.

00:33:59.400 --> 00:33:59.400
And let's go ahead and

00:34:00.110 --> 00:34:04.200
Click on mainmenu.nib to
open up our main.nib file.

00:34:04.200 --> 00:34:07.350
Notice that if you look at dot view here,

00:34:10.710 --> 00:34:11.650
Oh, I know what's wrong.

00:34:11.710 --> 00:34:12.240
I'm sorry.

00:34:12.240 --> 00:34:14.350
I was just getting confused there.

00:34:14.480 --> 00:34:19.990
It's not even... In fact,
I will go back to our original

00:34:19.990 --> 00:34:22.700
one and we'll open that up.

00:34:22.700 --> 00:34:25.580
Go back, show that there's nothing
magical going on here.

00:34:25.580 --> 00:34:29.380
Let's open up our main menu.nib.

00:34:29.720 --> 00:34:36.990
So, if I look at the class now, dot view,
you'll see that

00:34:38.000 --> 00:34:44.100
[Transcript missing]

00:34:45.390 --> 00:34:49.540
The time you see your action
is if you have a slider,

00:34:49.640 --> 00:34:53.000
for instance,
and you make a target/action connection.

00:34:53.000 --> 00:34:56.750
You make target/action connections
by actually control-clicking on the

00:34:56.750 --> 00:35:00.900
UI element that's going to send the
target action and dragging towards the

00:35:00.900 --> 00:35:03.300
element that you want the target to be.

00:35:03.300 --> 00:35:04.620
So in this case, dot view.

00:35:04.700 --> 00:35:07.940
Now I'm still not seeing that there.

00:35:07.940 --> 00:35:10.770
I don't know what that's about.

00:35:10.810 --> 00:35:11.790
Let's just go back to
our pre-prepared version.

00:35:15.700 --> 00:35:22.700
We are back in the interface builder.

00:35:22.700 --> 00:35:25.230
We will open our main menu.neb.

00:35:28.990 --> 00:35:32.920
So if I make a connection
from here to here,

00:35:32.920 --> 00:35:38.540
you'll notice that the actions this
represents includes printfacts,

00:35:38.540 --> 00:35:43.220
which were already there,
and now a change size method.

00:35:43.220 --> 00:35:46.640
And I just make that connection by
choosing change size and hitting connect.

00:35:46.730 --> 00:35:48.900
And this establishes a
target/action connection

00:35:48.900 --> 00:35:50.500
between my slider and the view.

00:35:50.820 --> 00:35:51.720
So sorry about that.

00:35:51.720 --> 00:35:53.260
I know what was going on over there.

00:35:53.260 --> 00:35:56.630
But now let's save this.

00:35:56.700 --> 00:35:57.020
Let's hide.

00:35:57.070 --> 00:35:58.410
And let's go ahead and run our demo.

00:35:59.500 --> 00:36:02.900
As you can see,
we can still move the dot around.

00:36:02.940 --> 00:36:04.220
We can resize the window.

00:36:04.250 --> 00:36:06.710
And as I move this,
the dot will actually resize.

00:36:07.030 --> 00:36:10.080
That's because as I move this,
it's sending change size

00:36:10.080 --> 00:36:11.120
colon over and over.

00:36:11.180 --> 00:36:13.160
And the change size method
is changing the radius,

00:36:13.160 --> 00:36:14.440
if you can remember back that far.

00:36:14.440 --> 00:36:15.910
And then it's redrawing the view.

00:36:15.940 --> 00:36:17.830
So that's what's going on.

00:36:18.500 --> 00:36:21.720
The other things we did here, by the way,
when we did the slider was in

00:36:21.780 --> 00:36:25.840
the attributes of the slider,
we changed so that we could change

00:36:25.840 --> 00:36:28.060
its minimum and maximum values,
the current value.

00:36:28.060 --> 00:36:32.450
And we also specified that it
continuously sends action while editing,

00:36:32.450 --> 00:36:35.060
which makes it send its
action over and over again.

00:36:35.640 --> 00:36:36.060
Okay.

00:36:36.060 --> 00:36:38.300
So that was our slider.

00:36:38.300 --> 00:36:42.750
So let's go back to slides to talk
a little more about target action.

00:36:42.990 --> 00:36:48.400
So, what we saw there was that the
slider's target is the dot view.

00:36:48.850 --> 00:36:52.300
Slider has two instance variables,
target and action, and our dot view has a

00:36:52.300 --> 00:36:53.830
method called ChangeSize.

00:36:53.880 --> 00:36:57.300
The target is set in InterfaceBuilder
to point to the dot view,

00:36:57.330 --> 00:37:00.720
and the action is specified
in InterfaceBuilder to be

00:37:00.720 --> 00:37:03.320
selector of ChangeSize:.

00:37:03.360 --> 00:37:05.950
So this is where you see that
selector business come in.

00:37:06.110 --> 00:37:09.480
But note that we didn't have to do
this programmatically or anything.

00:37:09.480 --> 00:37:11.520
We were able to specify
this in InterfaceBuilder,

00:37:11.520 --> 00:37:14.520
or we were almost able to
specify it in InterfaceBuilder.

00:37:14.520 --> 00:37:18.640
In InterfaceBuilder,
stored this information in that Nib file.

00:37:18.650 --> 00:37:21.180
As I said earlier, target and action
aren't anything magical.

00:37:21.180 --> 00:37:26.280
They're just instance variables,
and you can set them programmatically

00:37:26.280 --> 00:37:30.270
using methods setTarget
and setAction if you want.

00:37:30.560 --> 00:37:32.740
Okay, now I'm going to talk a little
bit more about target/action,

00:37:32.740 --> 00:37:36.380
but before that I want to talk
some about memory management.

00:37:36.600 --> 00:37:47.000
[Transcript missing]

00:37:47.720 --> 00:37:53.230
A freshly created object,
whether you create it with

00:37:53.330 --> 00:38:00.940
alloc and init—alloc/init is the
paradigm for creating new objects,

00:38:00.940 --> 00:38:02.950
you allocate it and you initialize
it—or whether you create it by

00:38:02.950 --> 00:38:02.950
doing a copy of another object,
a freshly created object has

00:38:02.950 --> 00:38:02.950
a reference count of one.

00:38:03.430 --> 00:38:05.540
You call retain to add a reference count.

00:38:05.540 --> 00:38:08.670
You call release to
remove a reference count.

00:38:09.100 --> 00:38:11.240
So this is just reference counting.

00:38:11.270 --> 00:38:13.720
Nothing really secret here.

00:38:13.720 --> 00:38:17.960
And the object is deallocated when
its reference count reaches zero.

00:38:18.010 --> 00:38:22.040
And that happens by the object
being sent a dealloc method,

00:38:22.040 --> 00:38:24.400
which is the opposite of alloc.

00:38:24.400 --> 00:38:29.280
So let me give you an analogy here,
just to make sure this is clear.

00:38:29.970 --> 00:38:33.620
You go into a restaurant and you
tell the waiter you want a table.

00:38:33.620 --> 00:38:35.750
So the waiter goes and gets a table.

00:38:35.860 --> 00:38:37.260
That's allocating the table.

00:38:37.390 --> 00:38:40.440
Then the waiter puts a - well,
it's a fancy place - he puts

00:38:40.490 --> 00:38:42.790
a tablecloth on the table,
and even gives you forks

00:38:42.790 --> 00:38:43.820
and knives and plates.

00:38:43.870 --> 00:38:45.420
That's initializing the table.

00:38:45.450 --> 00:38:47.040
And you sit at the table.

00:38:47.150 --> 00:38:49.100
So as long as you're
sitting at the table,

00:38:49.100 --> 00:38:51.410
the waiter is not going to
come take the table away.

00:38:51.650 --> 00:38:54.420
The moment you get up and leave,
you've released the table,

00:38:54.420 --> 00:38:56.780
and the waiter will come and
deallocate the table and make

00:38:56.840 --> 00:38:58.320
it ready for the next person.

00:38:58.320 --> 00:38:59.820
So that's getting rid of it.

00:38:59.820 --> 00:39:02.320
Now, while you're sitting there,
if a friend of yours comes by

00:39:02.320 --> 00:39:04.770
and sits down at the table,
they also retain the table.

00:39:04.860 --> 00:39:06.820
Now,
there are two references on the table.

00:39:06.820 --> 00:39:10.080
The waiter is not going to remove
the table until both of you leave.

00:39:10.080 --> 00:39:12.120
If eight friends come,
now there are eight

00:39:12.120 --> 00:39:13.310
references to the table.

00:39:13.340 --> 00:39:19.690
So until the last person leaves,
the table is retained.

00:39:19.800 --> 00:39:22.200
Copy Let's make an analogy for copy.

00:39:22.200 --> 00:39:25.220
You come into the restaurant and
you see a table that looks gorgeous.

00:39:25.220 --> 00:39:28.700
It's got a bunch of people sitting at it,
a good-looking table.

00:39:28.700 --> 00:39:30.740
You tell the waiter,
"I want a table just like that." But you

00:39:30.790 --> 00:39:33.640
don't want to go sit at that table
because you don't know those people.

00:39:33.640 --> 00:39:37.270
So instead, the waiter creates a table
just like that for you.

00:39:37.360 --> 00:39:39.860
That's like making a copy of that table,
but it's your own copy.

00:39:39.860 --> 00:39:41.600
You don't care what
happens at that table.

00:39:41.600 --> 00:39:43.500
You've got your own copy of the table.

00:39:43.500 --> 00:39:46.740
Now one more thing I'm going to
mention at this point is auto-release.

00:39:46.870 --> 00:39:48.910
I'm going to mention at this point,
I'm not going to talk about

00:39:49.050 --> 00:39:52.080
it for the rest of the talk,
but it's an important concept.

00:39:52.080 --> 00:39:55.330
It's like release,
but instead of releasing the object now,

00:39:55.380 --> 00:39:57.380
it releases the object later.

00:39:57.380 --> 00:40:01.520
And this turns out to be pretty handy
given Cocoa's object ownership rules.

00:40:01.520 --> 00:40:04.960
And you will see this and probably
use this in your programming of Cocoa.

00:40:04.960 --> 00:40:08.890
Now having covered memory management,
let's talk about object

00:40:08.890 --> 00:40:10.260
ownership in Cocoa.

00:40:10.320 --> 00:40:13.250
Object ownership is important
in dynamic environments,

00:40:13.250 --> 00:40:17.350
where object-oriented environments,
where -- you know,

00:40:17.350 --> 00:40:19.400
you're constantly passing
objects between things.

00:40:19.430 --> 00:40:21.640
People are allocating objects
and returning them to you.

00:40:21.640 --> 00:40:26.390
And the question that's always asked is,
who frees this object?

00:40:26.420 --> 00:40:29.800
In Cocoa,
the answer is -- there's a consistent

00:40:29.800 --> 00:40:33.780
answer for 99.9 percent of the cases,
and that's object ownership is

00:40:33.780 --> 00:40:35.410
not transferred across calls.

00:40:35.520 --> 00:40:38.700
What this means is if somebody returns
an object to you as a result of a

00:40:38.700 --> 00:40:42.300
function call or a method invocation,
you do not free that.

00:40:42.310 --> 00:40:44.370
You do not release that thing.

00:40:44.370 --> 00:40:48.930
You just use it, you know,
assuming you use it, and that's that.

00:40:49.140 --> 00:40:52.690
Same goes for when an object
is passed as an argument.

00:40:52.690 --> 00:40:52.690
The

00:40:52.860 --> 00:40:55.270
"The person who got the
object does not free it.

00:40:55.550 --> 00:40:58.940
They will use it."

00:40:59.200 --> 00:41:01.670
If it turns out that an
object is needed long term,

00:41:01.700 --> 00:41:04.560
you can retain it and
then release it later on.

00:41:04.560 --> 00:41:06.810
So the rule is,
whoever creates an object,

00:41:06.810 --> 00:41:09.030
or retains an object,
or copies an object,

00:41:09.070 --> 00:41:11.980
whoever is responsible for
incrementing the ref count is

00:41:11.980 --> 00:41:14.100
also responsible for releasing it.

00:41:14.200 --> 00:41:16.100
So, basically this summarizes that.

00:41:16.100 --> 00:41:19.000
You pass someone an object and you
don't care what they do with it.

00:41:19.390 --> 00:41:22.100
They will retain it and
release it if they want.

00:41:22.230 --> 00:41:31.330
So, with that,
let's look at a little bit more

00:41:31.330 --> 00:41:38.580
of target/action and do something
slightly more sophisticated.

00:41:39.690 --> 00:41:42.160
If it turns out that an
object is needed long term,

00:41:42.250 --> 00:41:45.060
you can retain it and
then release it later on.

00:41:45.060 --> 00:41:47.310
So the rule is,
whoever creates an object,

00:41:47.310 --> 00:41:48.300
or retains an object,
or copies an object,

00:41:48.300 --> 00:41:48.300
whoever is responsible for
incrementing the ref count is

00:41:48.300 --> 00:41:48.300
also responsible for releasing it.

00:41:50.820 --> 00:41:53.280
If it turns out that an
object is needed long term,

00:41:53.280 --> 00:41:56.160
you can retain it and
then release it later on.

00:41:56.160 --> 00:41:58.410
So the rule is,
whoever creates an object,

00:41:58.410 --> 00:42:00.660
or retains an object,
or copies an object,

00:42:00.660 --> 00:42:03.580
whoever is responsible for
incrementing the ref count is

00:42:03.580 --> 00:42:05.690
also responsible for releasing it.

00:42:05.780 --> 00:42:07.700
So, basically this summarizes that.

00:42:07.700 --> 00:42:10.700
You pass someone an object and you
don't care what they do with it.

00:42:10.700 --> 00:42:13.690
They will retain it and
release it if they want.

00:42:13.740 --> 00:42:18.030
Let's go back to our source file, .u.m.

00:42:18.030 --> 00:42:23.700
and let's add our changeColor method.

00:42:23.700 --> 00:42:27.900
So, the changeColor method,
we are going to ask sender for its color.

00:42:27.900 --> 00:42:31.970
We are assuming that the sender is
something capable of generating a color.

00:42:33.110 --> 00:42:36.500
We're going to call a method
called "setColor" on ourselves.

00:42:36.550 --> 00:42:39.120
I could have done like here
and just set the color in here,

00:42:39.120 --> 00:42:42.250
but I want to show you, just, you know,
let's write an accessor,

00:42:42.250 --> 00:42:44.000
a set method to see how it's written.

00:42:44.000 --> 00:42:46.550
So we're just going to get this
color from the sender and we're

00:42:46.550 --> 00:42:47.960
going to send it to setColor.

00:42:48.230 --> 00:42:52.000
Note that here already you're seeing
Cocoa's object ownership rules in action.

00:42:52.000 --> 00:42:54.980
We're getting a color from this thing,
but we don't free the color.

00:42:54.980 --> 00:42:58.000
We just use it, we don't worry about what
happens to that color.

00:42:58.000 --> 00:43:01.000
You know, if we wanted it, we will keep,
hang on to it.

00:43:01.000 --> 00:43:03.000
Here we're sending the color
to this method and again,

00:43:03.000 --> 00:43:05.000
we don't worry about what
happens in that method.

00:43:05.210 --> 00:43:07.000
That method will do the right thing.

00:43:07.020 --> 00:43:10.000
So let's go write that method
and you'll see what I mean.

00:43:10.000 --> 00:43:12.000
setColor takes a color as an argument.

00:43:12.000 --> 00:43:14.860
If the new color is not exactly
the same as the old color,

00:43:14.860 --> 00:43:18.000
that's both for optimization
and for a few other reasons,

00:43:18.000 --> 00:43:20.000
but basically it's a
good idea to do this.

00:43:20.000 --> 00:43:23.940
If the colors aren't the same,
we release the previous

00:43:23.940 --> 00:43:25.790
color instance variable.

00:43:26.110 --> 00:43:28.880
We make the color instance
variable point to the new color,

00:43:28.880 --> 00:43:31.020
but we retain it,
because we want to hang on to it.

00:43:31.040 --> 00:43:35.040
The third thing we want to do here,
just like we've done in other places,

00:43:35.040 --> 00:43:40.020
like here, is say "set needs display:
yes", which of course,

00:43:40.100 --> 00:43:43.040
because we changed state,
we want the view to be redrawn.

00:43:43.040 --> 00:43:48.040
So note, this is basically what your
typical set method might look like.

00:43:48.040 --> 00:43:50.460
You release the old value,
you retain the new value after

00:43:50.520 --> 00:43:52.040
checking they're not the same.

00:43:52.040 --> 00:43:55.850
So, now we know how to change the color,
let's do a few more things.

00:43:56.090 --> 00:43:58.960
One thing we want to do is make
sure our color is initialized.

00:43:59.040 --> 00:44:01.200
So we initialize our
color to the blue color,

00:44:01.200 --> 00:44:05.040
and we retain it, we hang on to it,
because we're hanging on to it long term.

00:44:05.040 --> 00:44:08.400
In the drawRect method, oh,
one thing we have to do now,

00:44:08.400 --> 00:44:11.470
one thing we need to add is,
because we're hanging on to

00:44:11.470 --> 00:44:14.650
our color instance variable,
when we're being deallocated,

00:44:14.650 --> 00:44:16.880
meaning when the view is going away,
we want to get rid of our

00:44:16.880 --> 00:44:18.030
color instance variable.

00:44:18.040 --> 00:44:22.040
So for that, we implement the dealloc
method I mentioned earlier.

00:44:22.040 --> 00:44:24.040
And we release the color.

00:44:24.040 --> 00:44:25.930
So when we're going away,
we make sure all the resources

00:44:25.930 --> 00:44:27.040
we hang on to are going away.

00:44:27.040 --> 00:44:28.960
And we call super dealloc.

00:44:29.050 --> 00:44:32.040
Super is a way you call your
super class implementation.

00:44:32.040 --> 00:44:32.040
And that's it.

00:44:32.040 --> 00:44:36.040
So typically,
you will have dealloc methods which do...

00:44:36.510 --> 00:44:42.070
We do one more thing.

00:44:42.070 --> 00:44:45.500
Instead of the blue color here,
we now just set the color we have.

00:44:45.620 --> 00:44:47.500
So we just say color set.

00:44:47.500 --> 00:44:49.500
So I'm going to save this right now.

00:44:49.500 --> 00:44:51.500
And let's go back to interface builder.

00:44:51.500 --> 00:44:54.710
Interface builder,
I'm going to pull the slider aside.

00:44:54.790 --> 00:44:57.500
I'm going to drag this little control.

00:44:57.500 --> 00:44:58.770
This is a color well.

00:44:58.770 --> 00:45:00.280
It lets you change colors.

00:45:00.660 --> 00:45:04.500
Now let's go ahead to classes
and keeping our fingers crossed,

00:45:04.500 --> 00:45:09.200
Let's read files.

00:45:09.550 --> 00:45:15.100
Now, we're in, I believe we're in this
directory right now.

00:45:15.100 --> 00:45:17.750
Let's just read

00:45:18.210 --> 00:45:23.950
that file and now we can make a
connection from our color well here

00:45:24.390 --> 00:45:28.500
to the dot view and we choose change
color connect so this is what should

00:45:28.500 --> 00:45:33.880
have happened before but anyway demo
gods were taking a lunch break okay

00:45:34.050 --> 00:45:39.940
so now we've connected that let's save
let's hide or let's bring up interface

00:45:39.940 --> 00:45:44.710
builder and let's build and go okay
so as you can see we can still change

00:45:44.780 --> 00:45:48.670
the size and if i click on And here,
the color panel comes up,

00:45:48.670 --> 00:45:50.990
and I can now change the color.

00:45:51.730 --> 00:45:53.240
You can use any mode of the thing.

00:45:53.240 --> 00:45:55.720
You can use the crayon,
any mode in the color panel,

00:45:55.720 --> 00:45:59.030
as I said earlier, you can use grayscale,
you can use CMYK and so on.

00:45:59.030 --> 00:46:01.860
All these colors are represented
by NSColor and they work in

00:46:01.870 --> 00:46:03.770
the context of our application.

00:46:03.780 --> 00:46:06.510
Having done all that,
let's go back to Xcode,

00:46:06.510 --> 00:46:08.190
let's look at our dot view.

00:46:08.190 --> 00:46:11.830
One thing you might be noticing
at this point with dot view is,

00:46:11.830 --> 00:46:13.650
it's getting a bit unwieldy.

00:46:13.650 --> 00:46:15.820
It's got like 25 lines of code.

00:46:15.820 --> 00:46:18.070
That's getting a little too big.

00:46:18.100 --> 00:46:21.120
So let's see how we can start
cleaning things up and making

00:46:21.120 --> 00:46:22.750
this a better structured app.

00:46:22.980 --> 00:46:26.200
And for that, oh,
can we go back to slides?

00:46:26.200 --> 00:46:27.820
I'm sorry.

00:46:28.910 --> 00:46:33.100
We're going to talk about
Model-View-Controller.

00:46:34.230 --> 00:46:34.230
Model-View-Controller is a...

00:46:34.550 --> 00:46:36.520
is not a Cocoa-specific design pattern.

00:46:36.610 --> 00:46:39.640
You've probably heard about
it used in other cases.

00:46:39.640 --> 00:46:44.780
But it is used in Cocoa to create bigger,
better structured applications,

00:46:44.780 --> 00:46:48.550
and it makes document-based
apps and so on much more easy

00:46:48.550 --> 00:46:50.600
to do and much more of a joy.

00:46:50.720 --> 00:46:53.040
So Model-View-Controller is a
design pattern where you break

00:46:53.040 --> 00:46:56.870
your application into three pieces:
the model, which is the back end of the

00:46:56.870 --> 00:47:00.540
application where your data is,
the view, which is your user interface,

00:47:00.620 --> 00:47:02.300
and the controller,
which is the middleman.

00:47:02.300 --> 00:47:05.290
The controller usually
has a variety of roles.

00:47:05.300 --> 00:47:08.830
It usually manages the connection
between the model and the UI,

00:47:08.960 --> 00:47:09.900
and it can have other roles.

00:47:09.900 --> 00:47:12.400
In some cases,
controllers can actually be fairly thin,

00:47:12.400 --> 00:47:15.570
or you can cut out the middleman
altogether in the very simplest cases.

00:47:15.700 --> 00:47:17.820
It turns out that's one
of these cases here.

00:47:17.900 --> 00:47:21.380
So we'll look at Dot-View and
we'll see how we can separate

00:47:21.380 --> 00:47:23.480
the model and the view pieces.

00:47:23.500 --> 00:47:28.120
Here's what our Dot-View looks like now,
before our surgical separation of

00:47:28.170 --> 00:47:30.150
the back end and the front end.

00:47:30.300 --> 00:47:33.100
The Dot-View has a center, a color,
and a radius.

00:47:33.160 --> 00:47:35.990
These are the instance
variables in our class.

00:47:36.100 --> 00:47:39.380
After we're done with our surgery,
we're going to have a class called Dot,

00:47:39.380 --> 00:47:41.000
which has those three instance variables.

00:47:41.010 --> 00:47:45.100
So the Dot class is going
to represent our dot.

00:47:45.200 --> 00:47:47.600
And we're going to have a Dot-View class,
and all the Dot-View class is

00:47:47.600 --> 00:47:49.630
going to do is point at the dot.

00:47:49.700 --> 00:47:51.970
So it's just going to have an instance
variable that represents the dot.

00:47:52.030 --> 00:47:56.990
So this is fairly basic MVC,
Model-View-Controller, at this point.

00:47:57.090 --> 00:48:01.890
The dot instance variable is
going to point at our dot object.

00:48:02.010 --> 00:48:05.690
OK, so let's go to the demo
machine for this piece now.

00:48:05.710 --> 00:48:09.500
Okay, so let's go to the demo
machine for this piece now.

00:48:15.760 --> 00:48:18.430
This time I'm going to choose
Objective-C class because I just

00:48:18.430 --> 00:48:20.130
want a subclass of NSObject.

00:48:20.240 --> 00:48:22.590
The dot is just a simple
data-bearing object,

00:48:22.590 --> 00:48:25.600
not a subclass of view,
not a subclass of control.

00:48:25.600 --> 00:48:31.080
And let's call it dot.m,
also create dot.h.

00:48:31.450 --> 00:48:36.100
So, interface builder creates two files:
..h and ..m.

00:48:36.100 --> 00:48:39.780
In ..h, we're going to go ahead and
put our instance variables.

00:48:40.110 --> 00:48:44.150
point radius and color so the same
instance variables we had today okay

00:48:44.150 --> 00:48:48.730
now and let's go declare some methods
for dot we're going to have a set center

00:48:48.730 --> 00:48:52.720
method to set the center and now you're
thinking okay we need set radius and

00:48:53.020 --> 00:48:56.770
color for now i'm not going to do that
we'll talk about that why and we're

00:48:56.770 --> 00:49:01.200
going to add a draw method and some
of you are thinking draw dot is a model

00:49:01.200 --> 00:49:07.000
object why does it have a draw method
well it's okay for model objects to

00:49:07.000 --> 00:49:11.810
know how to draw in this case it just
knows how to draw but doesn't make any

00:49:11.880 --> 00:49:15.610
assumptions about where it's going to
draw what view hierarchy it's in what

00:49:15.610 --> 00:49:19.720
the ui element is it just knows its you
know location its size and its color so

00:49:19.720 --> 00:49:23.400
when told to draw it can draw itself so
it's an appropriate thing to do here so

00:49:23.400 --> 00:49:27.880
we'll just go ahead and add a draw method
so let me now save this and switch to the

00:49:28.450 --> 00:49:33.230
dot implementation file dot.m now in the
implementation file of dot we're going

00:49:33.230 --> 00:49:36.770
to add an init method as i mentioned
earlier in it is the way you initialize

00:49:36.800 --> 00:49:40.990
yourselves in the context of the view
class we saw init with frame which was

00:49:41.130 --> 00:49:46.920
how views are created in the case of a
simple and a subject subclass like dot we

00:49:46.920 --> 00:49:52.960
would use init so we do init we do super
init and if that succeeds we go ahead

00:49:52.960 --> 00:49:57.170
and initialize ourselves set the center
set the radius you've seen this before

00:49:57.170 --> 00:50:00.660
and set the color and then we return self
so this is what a typical initializer

00:50:00.660 --> 00:50:04.470
might look like you know just like
dot views now let's go ahead and add give

00:50:04.630 --> 00:50:09.320
ourselves a dialog method which is again
just like dot view release the color and

00:50:09.320 --> 00:50:14.260
return now we declare two methods earlier
let's go add those the draw method this

00:50:14.260 --> 00:50:19.440
is again taken from dot view dot view we
create our dot rect we set the color and

00:50:19.440 --> 00:50:24.650
we draw the oval okay and finally we said
we're going to add a set center method

00:50:24.650 --> 00:50:28.980
let's go ahead and do that set center
is going to set the center instance

00:50:28.980 --> 00:50:33.960
variable to the point that's passed in
here okay and for now this is all we're

00:50:33.960 --> 00:50:38.340
going to do we're just going to change
the center note that in the context

00:50:38.370 --> 00:50:41.920
of dot view we were doing self set needs
display yes but here we're not doing

00:50:41.920 --> 00:50:44.920
that because this is just a model object
and it doesn't have any assumptions about

00:50:44.990 --> 00:50:49.840
views okay so this takes care of our dot
class let's save this now let's switch

00:50:49.840 --> 00:50:58.010
to our dot view dot h in dot view dot h
we want to remove our instance variables

00:50:59.000 --> 00:51:01.060
We want to remove these two methods.

00:51:01.060 --> 00:51:01.720
Now that's nice.

00:51:01.790 --> 00:51:03.300
Getting rid of code is always nice.

00:51:03.300 --> 00:51:05.660
Less maintenance, whatever.

00:51:05.660 --> 00:51:07.900
Your boss doesn't have to
know you're doing less work.

00:51:07.900 --> 00:51:11.690
So now we can switch to .vue.m.

00:51:12.200 --> 00:51:16.700
Okay, and do the similar modifications
here to lighten the load a bit.

00:51:16.930 --> 00:51:19.100
Turns out we can get
rid of init with frame.

00:51:19.100 --> 00:51:19.870
Okay?

00:51:19.970 --> 00:51:22.500
Because we don't need to initialize
any of this stuff anymore.

00:51:22.620 --> 00:51:24.890
Turns out we can get rid of dialog.

00:51:25.430 --> 00:51:28.280
In DrawRect,
which is how the dot view draws itself,

00:51:28.280 --> 00:51:31.490
we will leave clearing of the
background because the view

00:51:31.490 --> 00:51:33.130
still needs to draw itself.

00:51:33.420 --> 00:51:39.280
But instead of all this
code to draw the dot,

00:51:39.280 --> 00:51:47.310
we can now tell the—whoops, I'm sorry,
that was a piece I forgot

00:51:47.310 --> 00:51:47.310
to show you in dot view,
I mean dot view dot h.

00:51:48.480 --> 00:51:51.380
In DrawRect,
which is how the dot view draws itself,

00:51:51.380 --> 00:51:54.590
we will leave clearing of the
background because the view

00:51:54.590 --> 00:51:54.790
still needs to draw itself.

00:51:54.790 --> 00:51:54.790
But instead of all this
code to draw the dot,

00:51:54.790 --> 00:51:54.790
we can now tell the—whoops, I'm sorry,
that was a piece I forgot

00:51:54.790 --> 00:51:54.790
to show you in dot view,
I mean dot view dot h.

00:51:55.330 --> 00:51:58.180
In addition,
we want to declare the instance variable

00:51:58.250 --> 00:52:00.560
".", which is two pieces I forgot.

00:52:00.560 --> 00:52:02.580
So the ".instance" variable.

00:52:02.580 --> 00:52:06.220
Note that we have an
IBOutlet specifier here.

00:52:06.220 --> 00:52:08.630
This just specifies
that this is an outlet,

00:52:08.630 --> 00:52:11.680
and we'll see what that
means in a few minutes.

00:52:11.680 --> 00:52:14.110
An outlet is basically an
instance variable that is

00:52:14.240 --> 00:52:17.280
visible to Interface Builder,
and you'll see it in a few seconds.

00:52:17.280 --> 00:52:20.300
So let me save this again,
switch back to .view.

00:52:20.300 --> 00:52:24.310
So back to DrawRect,
back to the discussion there.

00:52:24.930 --> 00:52:27.810
Instead of drawing the dot,
we just draw the dot by

00:52:27.920 --> 00:52:29.400
telling the dot to draw.

00:52:29.400 --> 00:52:31.100
So all that code is simplified.

00:52:31.110 --> 00:52:33.700
Now let's leave our mouse down
and mouse dragged in here,

00:52:33.700 --> 00:52:37.380
because these are still
primarily view operations.

00:52:37.380 --> 00:52:39.940
And we can get rid of change
size and set color and all this,

00:52:39.970 --> 00:52:42.500
because we're not in the business
of changing size anymore.

00:52:42.500 --> 00:52:43.680
The view doesn't care anymore.

00:52:43.680 --> 00:52:45.780
It's the dot's responsibility
to be doing those things.

00:52:45.780 --> 00:52:47.060
So get rid of this code.

00:52:47.060 --> 00:52:49.820
So suddenly dot view has come
back to a manageable size.

00:52:49.820 --> 00:52:50.680
That's good.

00:52:50.680 --> 00:52:54.360
So let's save this file.

00:52:54.360 --> 00:52:57.980
Now we need to switch
to interface builder.

00:52:59.240 --> 00:53:04.280
Now one thing we want to do is tell
Interface Builder about our dot object.

00:53:04.280 --> 00:53:08.600
Let's go ahead and say, "Read files."

00:53:09.700 --> 00:53:13.650
The moment we say that,
Interface Builder now knows that there

00:53:13.650 --> 00:53:16.620
is a subclass of NSObject called ".

00:53:16.710 --> 00:53:16.880
".

00:53:16.880 --> 00:53:17.840
Now, why did we do this?

00:53:17.840 --> 00:53:18.690
Why did we bring ".

00:53:18.690 --> 00:53:19.600
" into the picture?

00:53:19.710 --> 00:53:22.840
Because I want to go ahead
and create an instance of ".

00:53:22.840 --> 00:53:23.200
".

00:53:23.920 --> 00:53:27.190
Creating an instance of ".

00:53:27.190 --> 00:53:27.190
" is just like what you did

00:53:27.800 --> 00:53:30.520
What you did here,
when you dragged dot view out of here,

00:53:30.520 --> 00:53:32.700
you basically instantiated a dot view.

00:53:32.700 --> 00:53:36.460
Here I want to instantiate a dot,
but dot does not have a visual

00:53:36.770 --> 00:53:39.320
representation on a window
because it's a model object,

00:53:39.320 --> 00:53:41.670
so you instantiate with
this menu item here,

00:53:42.020 --> 00:53:42.880
instantiate dot.

00:53:42.940 --> 00:53:46.320
That adds it to our instances
tab as a new object.

00:53:46.360 --> 00:53:48.090
You can see that here, dot.

00:53:48.120 --> 00:53:50.500
Okay, well that's good,
so now we have a dot object.

00:53:50.500 --> 00:53:51.540
That represents the dot.

00:53:51.620 --> 00:53:55.840
Now I want to go ahead to dot view and
I want to reread the dot view file.

00:53:56.660 --> 00:54:00.580
Let's go ahead and
read the dot view file.

00:54:02.800 --> 00:54:05.910
It's warning me that because we
changed the interface of the file,

00:54:06.010 --> 00:54:08.490
it's not compiling with the earlier one.

00:54:08.630 --> 00:54:10.600
Let's say replace.

00:54:10.600 --> 00:54:12.070
So now the dot view has been changed.

00:54:12.160 --> 00:54:15.700
It now knows the new dot view,
not the old dot view.

00:54:15.700 --> 00:54:20.690
As a result of this change,
we can now connect dot view to our dot.

00:54:38.700 --> 00:54:38.700
Well, what's this connection about?

00:54:38.700 --> 00:54:38.700
That's where we're connecting
the dot instance variable of

00:54:38.700 --> 00:54:38.700
the dot view to our dot object.

00:54:38.700 --> 00:54:38.700
You can see here that
the dot object is here.

00:54:38.700 --> 00:54:38.700
It's known to IB now
because we read the file.

00:54:39.750 --> 00:54:45.000
So, we're going to use the dot
instance variable to connect

00:54:45.060 --> 00:54:45.700
the dot view to our dot object.

00:54:45.900 --> 00:54:47.320
So, we're going to use the dot
instance variable to connect

00:54:47.320 --> 00:54:48.220
the dot view to our dot object.

00:54:48.220 --> 00:54:49.360
You can see here that
the dot object is here.

00:54:49.360 --> 00:54:50.680
It's known to IB now
because we read the file.

00:54:50.700 --> 00:54:57.480
or bring up Xcode, I'm going to run this.

00:54:58.980 --> 00:55:00.100
Oops, failed.

00:55:00.250 --> 00:55:04.230
We did one little mistake.

00:55:04.300 --> 00:55:07.660
Oh, yes, I forgot to finish some
of the coding here.

00:55:07.720 --> 00:55:08.830
Sorry about that.

00:55:08.940 --> 00:55:12.400
If we look back at the

00:55:12.630 --> 00:55:15.260
By the way,
that was a case of a build failure.

00:55:15.260 --> 00:55:19.260
When you click on this little one here,
it tells you that center is undeclared.

00:55:19.260 --> 00:55:24.630
Indeed, in my methods here in mousedown,
we still refer to center.

00:55:24.670 --> 00:55:26.850
I needed to change the mousedown method.

00:55:26.970 --> 00:55:31.890
Instead of doing this,
I just need to tell…

00:55:33.910 --> 00:55:46.370
The first step is to set the center.

00:55:46.370 --> 00:55:46.370
We tell the dot to set center,
and we don't need to do this anymore.

00:55:46.370 --> 00:55:46.370
For now, I will leave the
set-needs-display in place.

00:55:46.580 --> 00:55:50.780
So with that, hopefully we're bug free,
let's run our application, let's hide it.

00:55:51.080 --> 00:55:56.250
Okay, so, there's our dot,
it still moves around, okay,

00:55:56.390 --> 00:56:00.380
and we didn't connect the
slider or the color well,

00:56:00.400 --> 00:56:02.960
so we can't do much, so you're thinking,
okay, we did MVC,

00:56:02.960 --> 00:56:05.440
now our app is even less capable,
and it's not going to be

00:56:05.440 --> 00:56:07.640
bringing any more revenue,
why did we do this?

00:56:07.640 --> 00:56:12.100
Well, the magic of MVC is that the
UI and the model are separate,

00:56:12.100 --> 00:56:15.720
and that means that you can
tweak the UI in ways which

00:56:15.720 --> 00:56:17.940
the model doesn't care about.

00:56:17.940 --> 00:56:21.490
An example of what that
means is I can now come here,

00:56:21.490 --> 00:56:23.170
drag a new window out, and I can

00:56:23.260 --> 00:56:26.370
I can come to my containers tab,
drag a new custom view out.

00:56:26.430 --> 00:56:28.200
Let's just put it all the way there.

00:56:28.300 --> 00:56:31.390
Okay, let's make our custom view.

00:56:32.460 --> 00:56:35.590
I can come to my containers tab,
drag a new custom view out.

00:56:35.700 --> 00:56:37.400
Let's just put it all the way there.

00:56:37.400 --> 00:56:40.600
Okay, let's make our custom view.

00:56:54.560 --> 00:56:57.690
I can come to my containers tab,
drag a new custom view out.

00:56:57.690 --> 00:56:59.500
Let's just put it all the way there.

00:56:59.500 --> 00:57:02.700
Okay, let's make our custom view.

00:57:24.500 --> 00:57:26.450
Well, they are the same,
it's just we got some

00:57:26.450 --> 00:57:28.410
connection problem here,
where we got some

00:57:28.410 --> 00:57:30.000
synchronization problem.

00:57:30.040 --> 00:57:32.520
But, as you can see already,
the promise of MVC is

00:57:32.520 --> 00:57:34.100
beginning to shine through.

00:57:34.130 --> 00:57:37.180
I have the same dot visible in two
different windows and we're able to

00:57:37.180 --> 00:57:40.200
add a second view to our dot with,
you know, no code.

00:57:40.200 --> 00:57:42.600
It was just in an interface builder.

00:57:42.600 --> 00:57:47.090
So, what do we need to do to get these
dots to synchronize each other?

00:57:47.170 --> 00:57:51.170
And so this now is when we start talking
about a few other things that make,

00:57:51.200 --> 00:57:55.970
you know,
expand the picture of MVC in Cocoa.

00:57:55.970 --> 00:57:58.110
So if we can go back to slides.

00:57:59.470 --> 00:58:00.960
So now we're going to talk about KVC.

00:58:01.200 --> 00:58:03.020
Now, we have MVC, we have KVC.

00:58:03.020 --> 00:58:05.550
Don't confuse these with MFC or KFC.

00:58:05.700 --> 00:58:10.020
One's a fried chicken
and one's something else.

00:58:10.020 --> 00:58:12.770
KVC is key-valley coding.

00:58:12.960 --> 00:58:18.740
It's a mechanism to set or get the
properties of an object indirectly.

00:58:18.740 --> 00:58:20.770
What I mean by that is,

00:58:22.150 --> 00:58:28.340
You use these methods:
setValueForKey and valueForKey.

00:58:28.340 --> 00:58:31.100
The property is the property
you want to set or get.

00:58:31.400 --> 00:58:38.460
With KVC,
instead of calling setColor on my dot,

00:58:38.950 --> 00:58:46.080
I would call this method setValue:forKey,
pass the string color,

00:58:46.130 --> 00:58:48.650
that's the property,
and I would pass the new value.

00:58:48.970 --> 00:58:50.900
Now you're thinking,
"So I have to go write a set

00:58:50.900 --> 00:58:55.740
value for key methods so that
KVC works?" The answer is no.

00:58:56.080 --> 00:59:00.290
KVC uses an object's existing
accessor methods or its instance

00:59:00.290 --> 00:59:02.760
variables to do its job.

00:59:02.760 --> 00:59:07.440
So, if you have an instance
variable named color,

00:59:07.440 --> 00:59:09.760
or if you have accessor
methods named setColor:

00:59:09.760 --> 00:59:13.610
and color, which is the way you would
set and get the color,

00:59:13.610 --> 00:59:17.570
note that you can also have setColor:
and getColor if you would

00:59:17.630 --> 00:59:19.660
like to name your things gets.

00:59:19.730 --> 00:59:24.120
In Cocoa we often don't do that,
but that's another naming style.

00:59:24.120 --> 00:59:28.700
Assuming you have one of these two ways,
and a bunch of other possibilities,

00:59:28.700 --> 00:59:34.500
your dot object becomes
KVC compliant for the property color.

00:59:34.500 --> 00:59:36.700
And you don't have to write any code,
it's automatic.

00:59:36.770 --> 00:59:39.620
If you have a variable called color,
you are KVC compliant

00:59:39.620 --> 00:59:41.230
for the color property.

00:59:41.280 --> 00:59:43.960
That's fairly simple.

00:59:43.960 --> 00:59:46.160
Now let's talk about key-value
observing just quickly,

00:59:46.160 --> 00:59:49.120
because this is needed
to complete the picture.

00:59:49.120 --> 00:59:53.130
Key-value observing, KVO,
enables observing changes

00:59:53.130 --> 00:59:55.240
in KVC compliant properties.

00:59:55.240 --> 00:59:59.340
What I mean by that is,
if you have a KVC compliant

00:59:59.340 --> 01:00:02.630
property color,
you can observe changes to color.

01:00:04.130 --> 01:00:13.050
Here's the method you use.

01:00:13.050 --> 01:00:13.050
This is the gnarliest method
I'm going to show today.

01:00:13.050 --> 01:00:13.050
Luckily,
we won't be using two of its arguments,

01:00:13.050 --> 01:00:13.050
so just ignore them.

01:00:13.050 --> 01:00:13.050
You can add

01:00:13.430 --> 01:00:20.750
You can observe some object's property
by adding yourself—so this argument here,

01:00:20.750 --> 01:00:22.990
observer—for the property,
and you send it to the

01:00:23.040 --> 01:00:24.300
object you want to observe.

01:00:24.480 --> 01:00:25.540
That's what this does.

01:00:25.740 --> 01:00:30.350
And whenever that property changes,
the observer will get this method:

01:00:30.350 --> 01:00:35.290
observe value for keypath,
the property in question, and of object.

01:00:35.300 --> 01:00:37.470
Now, a whole lot of methods here.

01:00:37.470 --> 01:00:40.180
It's probably best to
show this in action,

01:00:40.180 --> 01:00:42.300
and that's what we'll do right now.

01:00:42.300 --> 01:00:45.930
A little KVO to see our dots work better.

01:00:46.510 --> 01:00:50.330
Okay, so it turns out this is just in
Xcode now because our IB connections

01:00:50.330 --> 01:00:53.400
are all done and they should,
you know, they're pretty close.

01:00:53.620 --> 01:00:55.740
Okay, in Xcode,

01:00:57.710 --> 01:01:00.600
Okay,
so turns out this is just in Xcode now,

01:01:00.670 --> 01:01:03.470
because our ID connections are all done,
and they should, you know,

01:01:03.470 --> 01:01:04.680
they're pretty close.

01:01:04.680 --> 01:01:28.440
Okay, in Xcode,
we're gonna have to do this.

01:01:28.440 --> 01:01:31.910
So this is not like the init method,
which is fairly early.

01:01:31.920 --> 01:01:36.280
This is a, this is called after
everything's been created,

01:01:36.280 --> 01:01:39.340
so the world is a little more consistent.

01:01:39.630 --> 01:01:42.960
So in AwakeFromNib,
we establish our observations.

01:01:43.160 --> 01:01:47.600
And the way we do that is we tell
the dot object to add observer self.

01:01:47.820 --> 01:01:51.960
So the view is becoming an observer
of dot for key path radius,

01:01:51.980 --> 01:01:54.620
'cause we wanna observe the
changing of the radius and the

01:01:54.970 --> 01:01:57.280
arguments you're supposed to ignore.

01:01:57.310 --> 01:01:58.960
Now we do that two more times.

01:01:59.080 --> 01:02:01.250
Not like that.

01:02:01.640 --> 01:02:03.520
Click here and do it again.

01:02:03.580 --> 01:02:05.280
For center and for color.

01:02:05.360 --> 01:02:08.520
So we're observing the properties
of the dot we care about.

01:02:08.520 --> 01:02:09.400
Okay?

01:02:09.420 --> 01:02:13.080
So pretty straightforward,
just three observations.

01:02:13.180 --> 01:02:15.880
Now the next step, as you may remember,
is now you need to implement

01:02:15.880 --> 01:02:19.850
the method which gets called
when the observation is done,

01:02:20.040 --> 01:02:21.780
when the thing changes.

01:02:21.820 --> 01:02:23.560
And that's this method.

01:02:23.570 --> 01:02:26.960
Observe value for key path
of object change context.

01:02:27.030 --> 01:02:31.370
And in this method, this method will get
called whenever the radius,

01:02:31.370 --> 01:02:33.940
the center, or the color changes.

01:02:33.940 --> 01:02:35.920
But I don't really
care which one changes.

01:02:35.920 --> 01:02:37.980
All I wanna do is redraw the view.

01:02:38.010 --> 01:02:41.200
So all we're gonna do is say
self set needs display yes.

01:02:41.230 --> 01:02:43.800
That's all we're gonna do whenever
we hear that there's a change.

01:02:43.820 --> 01:02:46.160
Now of course in other cases,
you might wanna do more

01:02:46.160 --> 01:02:47.540
specialized things.

01:02:47.560 --> 01:02:49.380
Now for completeness,
I will show you one more

01:02:49.470 --> 01:02:52.040
thing you should do,
and that's to remove yourself as an

01:02:52.040 --> 01:02:54.200
observer at the appropriate time.

01:02:54.220 --> 01:02:56.620
This could be,
depending on the application,

01:02:56.640 --> 01:02:56.640
it'll be different.

01:02:56.650 --> 01:03:00.540
In this case,
we do it in the dialog method.

01:03:01.210 --> 01:03:04.130
So as the view is being deallocated,
it should remove itself as an

01:03:04.130 --> 01:03:07.100
observer for the three variables
that it added itself for.

01:03:07.120 --> 01:03:09.440
So that's these three lines:
removeObserver for keypath,

01:03:09.440 --> 01:03:11.780
removeObserver for keypath,
removeObserver for keypath.

01:03:11.920 --> 01:03:12.800
Pretty straightforward.

01:03:12.910 --> 01:03:13.930
Now let's come down here.

01:03:13.930 --> 01:03:15.300
The drawRack doesn't change.

01:03:15.380 --> 01:03:19.210
There's one more change
we can do right now.

01:03:19.720 --> 01:03:21.460
Note that before we were cheating.

01:03:21.460 --> 01:03:24.100
In mouse down,
in addition to setting the center,

01:03:24.100 --> 01:03:26.600
we were causing the
view to be redisplayed.

01:03:26.600 --> 01:03:30.120
And that explained why the view
itself updated when I clicked in it,

01:03:30.120 --> 01:03:32.890
but the other view didn't,
because the other view did

01:03:32.890 --> 01:03:34.620
not know to display itself.

01:03:34.870 --> 01:03:41.610
But now that we have this
great observer mechanism,

01:03:41.610 --> 01:03:41.610
I can remove this line of code here,
because

01:03:42.200 --> 01:03:46.180
Here we just tell the dot,
"Here's your new location." And the dot

01:03:46.300 --> 01:03:50.080
will hopefully tell us that its location
changed and will redisplay everything.

01:03:52.450 --> 01:03:57.000
So, let me save,
let me go back to interface builder,

01:03:57.000 --> 01:04:02.060
I'm sorry, not interface builder,
let me build and run.

01:04:03.350 --> 01:04:04.920
Click the application.

01:04:04.920 --> 01:04:07.600
Build and run.

01:04:07.600 --> 01:04:11.120
So now, if we did it right,
the demo gods are with us.

01:04:11.120 --> 01:04:14.540
As I click here and move,
the other dot also moves.

01:04:14.540 --> 01:04:18.080
They are perfectly in sync,
and they are both doing

01:04:18.120 --> 01:04:20.380
self-statement display.

01:04:20.380 --> 01:04:22.950
They don't know about each other,
and the good thing is our dot object,

01:04:22.950 --> 01:04:25.020
the model object,
knows nothing about these views.

01:04:25.020 --> 01:04:25.870
Absolutely nothing.

01:04:25.870 --> 01:04:29.700
It's just told to draw in each view
by the view when the time comes.

01:04:29.700 --> 01:04:30.900
So, there you go.

01:04:30.900 --> 01:04:32.980
Now, one last thing I want to
do is these dots here,

01:04:32.980 --> 01:04:35.540
the slider and the color, well,
aren't connected,

01:04:35.660 --> 01:04:38.340
and let's hook those up.

01:04:38.340 --> 01:04:39.660
So back to the slides, please.

01:04:42.740 --> 01:04:45.600
And that brings us to bindings.

01:04:45.600 --> 01:04:51.810
Now bindings was introduced—it's a
technology introduced in Panther.

01:04:51.810 --> 01:04:51.810
It's a…

01:04:52.290 --> 01:05:00.590
It's a technology that is used
to automatically keep attributes

01:05:00.660 --> 01:05:08.470
of different objects in sync,
or to be a little more exact,

01:05:08.470 --> 01:05:08.770
it keeps model and view values
synchronized and it eliminates the

01:05:08.770 --> 01:05:08.770
glue code you often need to create.

01:05:09.160 --> 01:05:10.220
for that purpose.

01:05:10.250 --> 01:05:13.400
By glue code I mean,
it's the kind of code where you

01:05:13.400 --> 01:05:16.100
respond to the slider changing,
it might be an action method,

01:05:16.100 --> 01:05:19.100
and as a result of slider changing
you wanna update your dot size,

01:05:19.100 --> 01:05:20.410
and maybe you wanna go
update a text field,

01:05:20.480 --> 01:05:23.260
maybe you're gonna go change
something in a database and so on.

01:05:23.260 --> 01:05:25.060
You're writing glue code all the time.

01:05:25.060 --> 01:05:27.950
In many cases, even in Cocoa if you're
using target action such,

01:05:27.950 --> 01:05:30.380
you find yourself writing
glue code over and over.

01:05:30.450 --> 01:05:32.600
And this is what bindings illuminates.

01:05:32.600 --> 01:05:35.810
And we'll see of course how
that is with another demo.

01:05:36.090 --> 01:05:41.010
Bindings leverages KVC and KVO,
and it fits very well with MVC.

01:05:41.150 --> 01:05:43.340
So, and again,
we'll see how bindings can be

01:05:43.340 --> 01:05:45.020
added to this application easily.

01:05:46.310 --> 01:05:50.870
So exactly what bindings lets you
do is it lets you bind attributes of

01:05:50.870 --> 01:05:53.530
views to properties of model objects.

01:05:53.530 --> 01:05:56.200
That's worth repeating.

01:05:56.230 --> 01:05:57.070
There you go.

01:05:57.210 --> 01:05:59.800
And it's worth showing a picture for.

01:05:59.920 --> 01:06:01.810
So here's our dot.

01:06:03.160 --> 01:06:06.270
So the dot has the properties,
it's a model object, that's properties,

01:06:06.270 --> 01:06:08.790
center, color and radius.

01:06:09.200 --> 01:06:21.320
Here's our slider.

01:06:21.570 --> 01:06:21.570
Now, I've removed the target/action
methods from slider in this

01:06:21.570 --> 01:06:21.570
picture because now we're not
dealing with target/action anymore.

01:06:21.570 --> 01:06:21.570
Instead,
we're just looking at the value of the

01:06:21.570 --> 01:06:21.570
slider as an attribute of the slider.

01:06:22.100 --> 01:06:24.390
With bindings,
I bind the floating point value of

01:06:24.490 --> 01:06:28.540
the slider to the floating point
radius of the property of our model.

01:06:28.540 --> 01:06:32.400
Similarly, I have a color well,
and I bind the color value of

01:06:32.520 --> 01:06:34.920
that to the color value of my dot.

01:06:34.920 --> 01:06:37.950
So with bindings, this is the kind of
connection you establish.

01:06:38.010 --> 01:06:42.650
The good thing here is that what this
implies is if I change the dot's color,

01:06:42.720 --> 01:06:44.620
the color well will change.

01:06:44.620 --> 01:06:47.820
If I change the color well's color,
the dot's color will change.

01:06:47.820 --> 01:06:51.060
So it's a two-way binding.

01:06:51.460 --> 01:06:55.740
And bindings, of course, uses KVO,
the observing technology we saw earlier,

01:06:55.740 --> 01:06:57.630
under the scenes to get this to happen.

01:06:59.000 --> 01:07:03.280
If you were to call a binding method to
establish the binding programmatically,

01:07:03.400 --> 01:07:04.540
you would use this method.

01:07:04.540 --> 01:07:06.420
Bind colon to object, blah, blah.

01:07:06.420 --> 01:07:09.730
Here's how it would look like.

01:07:09.800 --> 01:07:17.600
I would tell the slider to bind its value
to object dot to its property radius.

01:07:17.600 --> 01:07:19.080
This is how you would do it.

01:07:19.550 --> 01:07:22.950
Luckily, you almost never call this
method programmatically,

01:07:23.060 --> 01:07:26.400
because bindings are usually
established in Interface Builder,

01:07:26.400 --> 01:07:27.710
as we'll see right now.

01:07:28.370 --> 01:07:30.990
Okay,
if we can switch to the demo machine.

01:07:32.740 --> 01:07:34.610
The good thing is,
I'm talking about bindings

01:07:34.610 --> 01:07:36.720
and interface builder,
but this part of the demo

01:07:36.720 --> 01:07:38.360
doesn't involve Xcode anymore.

01:07:38.360 --> 01:07:39.600
It's just interface builder.

01:07:39.600 --> 01:07:42.130
So let's switch to interface builder.

01:07:42.780 --> 01:07:45.300
So here's our window one,
here's our slider.

01:07:45.320 --> 01:07:48.400
Now for this part,
for establishing bindings,

01:07:48.400 --> 01:07:53.240
you go to the bindings
pane of our inspector here.

01:07:53.240 --> 01:07:54.080
Okay?

01:07:54.100 --> 01:07:58.700
And you'll see that
slider has its max value,

01:07:58.700 --> 01:08:01.790
its min value,
and its value ready to be bound.

01:08:01.800 --> 01:08:04.100
So these are the attributes
of a slider you can bind.

01:08:04.100 --> 01:08:06.410
It's also got enabled, hidden, and so on.

01:08:06.420 --> 01:08:07.650
And it also has tooltips.

01:08:07.720 --> 01:08:09.000
So you can bind any one of these.

01:08:09.000 --> 01:08:11.640
In this case we're interested in binding
the value so I'm going to click here.

01:08:12.660 --> 01:08:14.920
Now you can bind to any
object that Interface Builder

01:08:14.920 --> 01:08:17.500
knows about in your Nib file.

01:08:19.160 --> 01:08:21.700
Well, it knows about the dot because
it's right there in our document.

01:08:21.700 --> 01:08:26.070
So I'm going to bind the
slider's value to the dot object.

01:08:26.160 --> 01:08:29.900
I'm going to bind it
to the keypath radius.

01:08:29.900 --> 01:08:31.180
That's the property.

01:08:31.200 --> 01:08:32.800
By keypath, I mean property there.

01:08:32.800 --> 01:08:36.980
So I've now established the binding
between the value and the dot's radius.

01:08:36.980 --> 01:08:39.440
Let's do the same thing
with the color well.

01:08:39.440 --> 01:08:41.220
I'm going to bind it to the dot.

01:08:41.220 --> 01:08:44.200
I'm going to bind it
to the keypath color.

01:08:44.200 --> 01:08:47.650
So let's go ahead and save.

01:08:48.870 --> 01:08:51.020
And let's go back to Xcode and run.

01:08:54.300 --> 01:08:55.180
Let's move this.

01:08:55.260 --> 01:08:55.670
So there you go.

01:08:55.780 --> 01:08:57.860
Just with two connections
and interface builder,

01:08:57.860 --> 01:09:02.340
we're able to bind that slider to
automatically track the dot and

01:09:02.350 --> 01:09:05.200
the two dots also track each other.

01:09:05.200 --> 01:09:06.040
And same with color.

01:09:06.040 --> 01:09:09.200
I can bring up the color panel
and I can change the color.

01:09:09.200 --> 01:09:12.820
And again, this is now bound to the
dot's color value and so on.

01:09:13.090 --> 01:09:16.790
And of course, bindings,
this is not the only

01:09:16.790 --> 01:09:19.320
thing bindings gives you.

01:09:19.320 --> 01:09:22.910
Let me show you the little
other magic of bindings.

01:09:22.920 --> 01:09:24.850
I can make my slider smaller.

01:09:25.020 --> 01:09:27.720
I can go to the text here.

01:09:27.720 --> 01:09:30.570
I can drag out the text field,
as you can see.

01:09:30.660 --> 01:09:36.300
And again, I can go to the value binding
of the text view here.

01:09:36.300 --> 01:09:41.440
So if I go to, here's the attributes,
go back to bindings.

01:09:41.540 --> 01:09:42.490
Here's the value binding.

01:09:42.500 --> 01:09:47.080
I'm going to look in there and
set the value of the text field

01:09:47.080 --> 01:09:50.190
to be the same as the radius.

01:09:50.380 --> 01:09:51.610
Save.

01:09:51.720 --> 01:09:52.640
Go back to Xcode.

01:09:53.110 --> 01:09:54.610
Run.

01:09:56.270 --> 01:09:59.580
As I move the slider,
not only is the dot's radius changing,

01:09:59.810 --> 01:10:02.940
but now because this text field
has been bound to the radius,

01:10:03.180 --> 01:10:07.600
the text field is also showing you the
exact same value as the slider does.

01:10:07.600 --> 01:10:11.410
So as you can see, without any glue code,
without writing any code to

01:10:11.410 --> 01:10:15.460
bind those things together,
you know, and make sure they're in sync,

01:10:15.460 --> 01:10:16.830
we are keeping things in sync.

01:10:16.930 --> 01:10:20.160
The good thing here also is
that in the case situation here,

01:10:20.210 --> 01:10:23.760
the dots, the model values from the dot,
the fact that it's blue and

01:10:23.940 --> 01:10:26.920
the size is 50 and so on,
are automatically also reflected

01:10:26.920 --> 01:10:29.500
in these elements at launch time.

01:10:29.560 --> 01:10:33.210
Okay, so just to,
if we can go back to the slides,

01:10:33.230 --> 01:10:35.860
just to show you a picture of what
we did there with the text field,

01:10:35.900 --> 01:10:40.520
we added a text field and we bound
the value to the radius of the dot.

01:10:40.520 --> 01:10:43.770
Again, you can establish multiple
bindings to the same property

01:10:43.770 --> 01:10:45.980
and they will be kept in sync.

01:10:46.240 --> 01:10:50.480
There's a lot of magic and a lot of
great stuff in bindings and especially

01:10:50.770 --> 01:10:55.240
when you start using controllers,
which AppKit has support for,

01:10:55.400 --> 01:10:58.820
you can actually use tables,
outline views, browsers and so on in your

01:10:58.830 --> 01:11:03.830
applications with writing hardly
any code or no code at all.

01:11:03.890 --> 01:11:06.340
And you can go to the bindings talk,
which I think is tomorrow,

01:11:06.340 --> 01:11:07.490
to see more about bindings.

01:11:09.030 --> 01:11:12.860
Okay, so what we saw today is
an overview of Cocoa,

01:11:12.860 --> 01:11:16.880
Objective-C, Xcode/IB,
and some fundamental Cocoa topics:

01:11:16.880 --> 01:11:23.100
drawing, event handling, target/action,
object ownership, KVC/KVOMVC,

01:11:23.100 --> 01:11:25.460
and of course, bindings.

01:11:25.460 --> 01:11:27.930
And we also saw, hopefully,
that simple things were simple,

01:11:28.180 --> 01:11:31.100
meaning very little code is needed,
and even complex things are possible

01:11:31.100 --> 01:11:35.740
where we had to resort to maybe even
using observers for our custom views.

01:11:35.740 --> 01:11:37.600
So hopefully, you know,
that idea got through.

01:11:37.640 --> 01:11:40.410
You can go to the Tips and Tricks talk,
Cocoa Tips and Tricks talk,

01:11:40.410 --> 01:11:43.510
tomorrow to see more of this
simple things simple and complex

01:11:43.570 --> 01:11:47.820
things possible theme with further
demos and further advanced things.

01:11:47.830 --> 01:11:49.440
Now some things we didn't see.

01:11:49.440 --> 01:11:51.780
There's a lot of stuff in Cocoa and,
as I said,

01:11:51.780 --> 01:11:54.350
a few good solid design patterns.

01:11:54.410 --> 01:11:57.000
And the few we didn't
see include delegation,

01:11:57.000 --> 01:11:59.690
which involves objects
helping each other.

01:11:59.690 --> 01:12:02.580
That's a powerful design
paradigm that we didn't see,

01:12:02.580 --> 01:12:04.530
but you probably need to be aware of.

01:12:04.700 --> 01:12:08.620
Notifications, which is where objects are
telling other objects things.

01:12:08.620 --> 01:12:12.240
Categories,
where you can add stuff to objects,

01:12:12.240 --> 01:12:14.760
add functionality to objects.

01:12:14.760 --> 01:12:18.560
Data sources, where again,
objects are helping other objects.

01:12:18.560 --> 01:12:21.940
And immutability,
where objects refuse to be changed.

01:12:21.940 --> 01:12:25.330
These are some other design patterns that
you probably will become familiar with,

01:12:25.330 --> 01:12:26.920
you'll run across in learning Cocoa.

01:12:28.300 --> 01:12:31.000
Other things we don't see
include some features of Cocoa,

01:12:31.000 --> 01:12:33.350
and here is a not certainly
comprehensive list,

01:12:33.350 --> 01:12:36.310
but document architecture, undo,
localization, etc.

01:12:36.510 --> 01:12:37.570
A lot of great features.

01:12:37.960 --> 01:12:43.090
There are also other frameworks
which are not in the Cocoa umbrella

01:12:43.090 --> 01:12:48.730
and are not core Cocoa frameworks,
but provide Objective-C APIs that

01:12:48.730 --> 01:12:51.300
can be used easily from Cocoa.

01:12:51.300 --> 01:12:54.370
And one of those is, of course,
the core data framework

01:12:54.370 --> 01:12:54.370
that you saw yesterday.

01:12:54.930 --> 01:12:58.380
The resources for you to learn more,
there's the Apple Developer Connection,

01:12:58.380 --> 01:13:00.980
which has the Cocoa page.

01:13:00.980 --> 01:13:02.900
And in there,
there's Getting Started with Cocoa,

01:13:02.900 --> 01:13:06.020
which is fairly useful as it has links to
many resources that you want to follow.

01:13:06.020 --> 01:13:08.540
The O'Reilly books for Cocoa,
there are some pretty good

01:13:08.630 --> 01:13:10.280
books for Cocoa and Objective-C.

01:13:10.280 --> 01:13:12.840
And there are other books,
including Aaron Hillegas'

01:13:12.840 --> 01:13:15.780
programming Cocoa book and a
few other third-party books.

01:13:15.780 --> 01:13:16.670
They're all pretty good.

01:13:16.680 --> 01:13:19.240
Apple and Omni both have
developer mailing lists.

01:13:19.300 --> 01:13:21.510
And, of course,
the sessions here at WWDC.

01:13:21.720 --> 01:13:24.930
There's a bunch of just core
Cocoa talks and many other talks

01:13:24.930 --> 01:13:27.200
related to Cocoa and Objective-C API.

01:13:27.200 --> 01:13:30.990
So I hope you get a chance
to see them and enjoy them.

01:13:31.000 --> 01:13:33.730
And that's it for my part.

01:13:33.830 --> 01:13:34.900
Thank you very much.

01:13:34.900 --> 01:13:36.390
Thank you.