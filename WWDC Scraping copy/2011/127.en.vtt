WEBVTT

00:00:10.540 --> 00:00:11.560
Good afternoon.

00:00:11.670 --> 00:00:12.780
My name is James Dempsey.

00:00:12.940 --> 00:00:15.610
I'm an engineer on the
Cocoa Frameworks team,

00:00:15.670 --> 00:00:19.000
and this is Session 127,
Design Patterns to

00:00:19.000 --> 00:00:20.600
Simplify Mac Accessibility.

00:00:20.600 --> 00:00:24.370
This session primarily are just
a handful of things to keep

00:00:24.450 --> 00:00:28.120
in mind while you're building,
especially custom views,

00:00:28.120 --> 00:00:31.990
that make it much,
much easier for you to add

00:00:31.990 --> 00:00:36.750
the accessibility support
later or after the fact.

00:00:37.160 --> 00:00:39.720
Now, we're also going to talk
about just a few other things.

00:00:39.720 --> 00:00:41.860
We're going to do a brief Lion update.

00:00:41.860 --> 00:00:44.870
And before we even jump
into the Lion update,

00:00:44.870 --> 00:00:48.580
I just wanted to take a few
minutes to talk about really,

00:00:48.580 --> 00:00:51.740
at a very high level,
why we have this session,

00:00:51.740 --> 00:00:54.180
why we're all in this room today.

00:00:57.420 --> 00:00:59.760
So at Apple,
we really strive to provide an

00:00:59.760 --> 00:01:02.720
excellent user experience to everyone.

00:01:02.740 --> 00:01:06.770
Sure.

00:01:09.600 --> 00:03:20.600
[Transcript missing]

00:03:22.390 --> 00:03:28.030
Now in 2011,
a visually impaired user can walk up

00:03:28.190 --> 00:03:33.300
to any Mac that has shipped in the
last six years and turn on VoiceOver.

00:03:33.440 --> 00:03:36.140
And that can be their Mac,
or the Mac of their

00:03:36.140 --> 00:03:39.480
friend or their relative,
or at a lab at school,

00:03:39.480 --> 00:03:42.560
or at any mall that has an Apple store.

00:03:42.850 --> 00:03:45.260
Walk up to any computer and just use it.

00:03:45.300 --> 00:03:50.340
And it's that kind of amazing
leap in usability that's really

00:03:50.380 --> 00:03:53.280
why we're all in this room today.

00:03:59.330 --> 00:04:04.360
Now, Job 1 is always providing
everyone a great user experience,

00:04:04.390 --> 00:04:09.340
but making an application accessible
does have additional benefits.

00:04:09.410 --> 00:04:12.990
It's a programmatic
interface to your app's UI.

00:04:12.990 --> 00:04:18.370
So it also lends itself very well to
automated user interface scripting,

00:04:18.410 --> 00:04:23.050
which is great for internal testing,
automated UI testing.

00:04:23.050 --> 00:04:24.900
Power users love it.

00:04:25.050 --> 00:04:27.900
And our own development
tools take advantage of this

00:04:27.900 --> 00:04:29.280
to record and play back.

00:04:29.300 --> 00:04:33.470
actions in the UI for doing
things like profiling.

00:04:34.030 --> 00:04:38.860
And then finally,
Section 508 requires that apps

00:04:39.030 --> 00:04:44.000
that are sold into government and
education accounts are accessible.

00:04:44.070 --> 00:04:49.070
But despite all the benefits, again,
we want to provide everyone

00:04:49.070 --> 00:04:51.400
a great user experience.

00:04:52.960 --> 00:04:55.880
So, talked a little bit about VoiceOver.

00:04:56.000 --> 00:04:58.460
Why do we have a session at WWDC?

00:04:58.460 --> 00:05:00.980
Well, VoiceOver doesn't work alone.

00:05:01.040 --> 00:05:02.520
It needs a partner.

00:05:02.630 --> 00:05:07.280
In order for it to describe what's
going on in your application,

00:05:07.440 --> 00:05:13.180
it uses accessibility client APIs to
make requests of your application,

00:05:13.180 --> 00:05:18.780
and your application needs to
respond with the correct information,

00:05:18.800 --> 00:05:21.720
the appropriate
accessibility information.

00:05:21.840 --> 00:05:25.980
However,
we don't put the entire burden on you.

00:05:25.980 --> 00:05:29.630
In fact,
we provide both app kits and tools to do

00:05:29.630 --> 00:05:35.340
a lot of the heavy lifting and doing a
lot of the accessibility work for you.

00:05:35.710 --> 00:05:40.910
So before we jump into your application,
let's take a look at those framework

00:05:40.910 --> 00:05:44.900
and tools and what's changed in Lion.

00:05:46.590 --> 00:05:50.510
So in Lion, we've had a great number
of new user features.

00:05:50.670 --> 00:05:55.000
We've had a great number of
new app kit enhancements.

00:05:55.130 --> 00:05:58.500
And as we've worked on Lion,
we've really,

00:05:58.500 --> 00:06:04.240
really strived to provide as much
accessibility support out of the box.

00:06:04.440 --> 00:06:09.470
And so what you'll find in Lion is that
the new user features are accessible.

00:06:09.600 --> 00:06:30.800
[Transcript missing]

00:06:31.120 --> 00:06:34.560
So let's just talk about
some of these inversions.

00:06:34.640 --> 00:06:39.890
It's your document surrounded
by all the versions in space.

00:06:40.820 --> 00:06:44.120
Just as always,
you make your document accessible.

00:06:44.440 --> 00:06:48.340
We've handled all the rest of
the chrome around the edges.

00:06:50.590 --> 00:06:54.390
We have new features for
auto-correct pop-ups,

00:06:54.680 --> 00:06:56.740
little lookup pop-ups.

00:06:56.740 --> 00:07:01.830
These are all automatically accessible,
so just continue using your

00:07:01.880 --> 00:07:06.940
standard text views or web views,
and VoiceOver loves these guys.

00:07:08.080 --> 00:07:12.200
Full screen, again,
you make your content accessible,

00:07:12.290 --> 00:07:14.110
and we handle the rest.

00:07:14.250 --> 00:07:16.990
If you play with full
screen in your seed,

00:07:17.010 --> 00:07:21.880
there's still a few things we need
to hook up before we finish up.

00:07:22.120 --> 00:07:24.340
In the end, the message is the same.

00:07:24.430 --> 00:07:27.360
You do your content, we handle the rest.

00:07:29.440 --> 00:07:30.730
Sandboxing.

00:07:30.730 --> 00:07:34.740
Has anybody gone to the sandboxing talk?

00:07:34.740 --> 00:07:37.660
What are the accessibility
implications of sandboxing?

00:07:37.700 --> 00:07:42.940
Well, one of the things that happens when
your app is sandboxed is when you

00:07:42.940 --> 00:07:47.890
bring up an open and save panel,
to a user, it looks like there's a new

00:07:48.020 --> 00:07:51.520
-- there's a save sheet on a
document in your application.

00:07:51.520 --> 00:07:58.730
But, of course, behind the scenes,
one application, the one in the sandbox,

00:07:58.730 --> 00:08:03.850
has its document window,
but that sheet is handled by a completely

00:08:03.890 --> 00:08:08.780
separate privileged process that's
able to access all of the file system.

00:08:08.780 --> 00:08:13.200
And yet we want to provide to
accessibility clients the same

00:08:13.340 --> 00:08:18.350
seamless appearance that this
is all happening in one app.

00:08:18.360 --> 00:08:21.500
And, in fact, in Lion,
if -- in this case,

00:08:21.500 --> 00:08:22.470
we're going to have a single application,
and in this case,

00:08:22.470 --> 00:08:25.760
I went and looked at text edits,
accessibility hierarchy,

00:08:25.820 --> 00:08:28.320
it is all properly stitched together.

00:08:28.340 --> 00:08:31.060
It handles accessory views correctly.

00:08:31.060 --> 00:08:36.300
So all of that works without, again,
any additional work on your part.

00:08:37.680 --> 00:08:39.900
Overlay scrollers.

00:08:40.050 --> 00:08:42.620
For accessibility clients,
they'll still see that

00:08:42.700 --> 00:08:45.260
there are scrollers there,
but they'll be able to find out

00:08:45.260 --> 00:08:49.080
whether they're hidden or not,
and also be able to flash the

00:08:49.080 --> 00:08:52.380
scrollers as if the user had scrolled.

00:08:54.220 --> 00:08:56.500
Popovers.

00:08:56.570 --> 00:08:59.500
NSPopover is fully accessible.

00:08:59.760 --> 00:09:03.600
If you are using your own
kind of popover-ish mechanism,

00:09:03.830 --> 00:09:06.990
highly recommend moving
over to NSPopover.

00:09:07.020 --> 00:09:09.090
VoiceOver loves it, loves them.

00:09:09.200 --> 00:09:14.420
View-based table views.

00:09:16.500 --> 00:09:22.640
So it's always been difficult
to have complex table cells.

00:09:22.740 --> 00:09:25.740
You'd have to make your
own NSCell subclass,

00:09:25.740 --> 00:09:29.300
and then the accessibility of such
a thing was also very difficult,

00:09:29.300 --> 00:09:33.900
and in some cases, I think impossible.

00:09:33.900 --> 00:09:38.800
View-based TableView takes that
and completely revolutionizes it

00:09:38.800 --> 00:09:41.760
from an accessibility perspective.

00:09:41.760 --> 00:09:47.520
You build a view-based cell,
and because it's view-based,

00:09:47.520 --> 00:09:50.900
we just take advantage of all
of the existing accessibility

00:09:51.740 --> 00:09:55.640
for standard controls,
and we provide a much,

00:09:55.640 --> 00:10:01.760
much richer table view experience
with view-based table views.

00:10:01.810 --> 00:10:03.960
A few accessibility notes.

00:10:03.960 --> 00:10:07.580
When you have a table cell view,
you want to hook up the text field

00:10:07.580 --> 00:10:09.870
outlet to the primary text field.

00:10:09.970 --> 00:10:13.970
VoiceOver will automatically use that
text field to find out which piece of

00:10:14.090 --> 00:10:18.300
text is the most important to be spoken.

00:10:18.330 --> 00:10:21.510
Similarly,
rather than just reloading data,

00:10:21.660 --> 00:10:27.340
using the new row insert move and remove
methods where appropriate is very useful.

00:10:27.340 --> 00:10:32.660
It allows apps like VoiceOver to
track the rows as they move around.

00:10:32.760 --> 00:10:34.790
It's also more efficient.

00:10:36.740 --> 00:10:38.600
We've also added identifiers.

00:10:38.600 --> 00:10:45.720
It's a new protocol with
two fairly simple methods.

00:10:45.720 --> 00:10:50.460
This protocol is used by table views,
view-based table views,

00:10:50.640 --> 00:10:55.970
for keeping track of which rows and
which cells map with which columns.

00:10:56.100 --> 00:11:00.790
It's also used by AppKit's
persistence mechanism for recording

00:11:01.210 --> 00:11:05.580
pieces of state that need to
be reinstated when we resume.

00:11:06.340 --> 00:11:11.040
But we also use this identifier
through accessibility.

00:11:11.040 --> 00:11:16.760
So accessibility clients are able to read
that identifier and have a persistent

00:11:16.840 --> 00:11:23.310
way of identifying pieces of your
UI between launches of your application.

00:11:23.460 --> 00:11:27.800
This is particularly handy for
folks doing automated UI testing,

00:11:28.190 --> 00:11:32.530
since you can set the identifier
and then use it immediately

00:11:32.990 --> 00:11:35.410
in your testing scripts.

00:11:40.500 --> 00:11:46.290
In addition to all the work we've done to
support the various new features in Lion,

00:11:46.290 --> 00:11:50.880
we've also done a new version
of an accessibility inspector.

00:11:51.250 --> 00:11:55.730
The interface looks refreshed,
redesigned.

00:11:56.140 --> 00:11:58.650
We've kept all the
existing functionality,

00:11:58.740 --> 00:12:02.340
but added some new features,
especially navigation features.

00:12:02.500 --> 00:12:05.430
And I'd like to show
that to you right now.

00:12:08.310 --> 00:12:12.600
This is Accessibility Inspector.

00:12:12.720 --> 00:12:16.780
And what Accessibility Inspector does
is it uses the same accessibility

00:12:16.970 --> 00:12:22.560
client APIs that VoiceOver uses,
but it gives us a much more detailed

00:12:22.560 --> 00:12:31.520
look at exactly what each UI element on
the screen is reporting to VoiceOver.

00:12:31.630 --> 00:12:40.070
So for instance, so let's navigate to it.

00:12:44.940 --> 00:12:52.760
You can find it in your Developer Tools,
Applications, Utilities,

00:12:52.810 --> 00:12:56.460
Accessibility Tools,
Accessibility Inspector.

00:12:56.500 --> 00:12:58.080
There we go.

00:12:58.420 --> 00:13:00.900
And what Accessibility
Inspector will do is,

00:13:01.050 --> 00:13:04.270
as I point to items,
it will give me information about

00:13:04.520 --> 00:13:10.130
whatever is under the menu item,
or the item under the mouse.

00:13:14.410 --> 00:13:19.370
So if I take a look, say,
here in the Finder,

00:13:19.490 --> 00:13:21.590
here is a menu button.

00:13:22.640 --> 00:13:27.460
If I point to it,
I can also lock onto that item

00:13:28.220 --> 00:13:32.100
using a keyboard shortcut,
Command-F7.

00:13:32.160 --> 00:13:37.380
And when I lock onto that item,
I can inspect it a little bit further.

00:13:37.810 --> 00:13:43.330
First, I can turn on a highlight so
I can see which item it is.

00:13:43.950 --> 00:13:47.990
I can look at its place in
the accessibility hierarchy.

00:13:48.180 --> 00:13:54.010
It's a menu button in a group in a
toolbar in the window in the application.

00:13:56.130 --> 00:13:57.860
But new, it's easier to move around.

00:13:57.860 --> 00:14:00.880
If I want to move to that toolbar,
I can just either go to

00:14:00.880 --> 00:14:03.390
Element or double-click.

00:14:05.060 --> 00:14:12.740
We also remember where you've been so
I can navigate back down the hierarchy.

00:14:19.290 --> 00:14:24.340
The navigation can be done either through
these navigation buttons or through

00:14:24.340 --> 00:14:28.840
command control and the arrow keys,
which is a very handy way to

00:14:29.670 --> 00:14:34.060
navigate through without using
the mouse or perhaps disturbing

00:14:34.060 --> 00:14:36.120
your key state or what have you.

00:14:36.240 --> 00:14:38.710
Once I'm focused on an item,

00:14:46.990 --> 00:14:46.990
I can also perform actions
such as popping up the menu.

00:14:48.400 --> 00:14:52.480
If you're new to accessibility,
Accessibility Inspector is a great way

00:14:52.480 --> 00:14:57.700
to find out the sorts of information,
one, that your application is already

00:14:57.700 --> 00:15:01.380
providing to accessibility,
and also the sorts of things

00:15:01.380 --> 00:15:03.400
that accessibility needs.

00:15:05.080 --> 00:15:09.720
Let's do one other thing, which is,
let's inspect the window

00:15:09.810 --> 00:15:12.000
navigating up to it.

00:15:12.000 --> 00:15:15.620
And let's change the size.

00:15:18.150 --> 00:15:23.880
For any attribute that is writable,
I can change, for instance, the height,

00:15:24.060 --> 00:15:28.280
set the value, and it updates.

00:15:28.420 --> 00:15:32.130
So that's a look at the new
Accessibility Inspector.

00:15:34.340 --> 00:15:40.160
So reviewing Lion technologies, again,
user features and framework features,

00:15:40.230 --> 00:15:44.630
we've done a lot of work to make
those items accessible without

00:15:44.760 --> 00:15:48.000
additional work for the developer,
for you.

00:15:48.120 --> 00:15:52.350
We have a new accessibility inspector,
and then I'd encourage you to check

00:15:52.350 --> 00:15:56.550
the AppKit release notes for more
details about the items I've talked

00:15:56.550 --> 00:15:59.030
about and some other smaller things.

00:16:00.400 --> 00:16:04.900
Let's talk about design patterns
to simplify Mac accessibility.

00:16:04.900 --> 00:16:10.340
And kind of the idea of this talk is
if you've ever had the experience where

00:16:10.430 --> 00:16:14.830
maybe you're at the grocery store and you
get home and your significant other says,

00:16:14.940 --> 00:16:17.120
oh,
if I knew you were going to the store,

00:16:17.120 --> 00:16:19.050
I would have had you pick this up.

00:16:20.160 --> 00:16:23.680
And if you had that additional
requirement in mind when

00:16:23.680 --> 00:16:27.260
you were at the store,
it would have been much, much easier,

00:16:27.460 --> 00:16:28.480
saved yourself a trip.

00:16:28.580 --> 00:16:33.880
You could have incorporated that
requirement with very little effort

00:16:33.890 --> 00:16:36.680
on your part if you had just known.

00:16:37.420 --> 00:16:40.470
What we're going to do is talk
about a few of those things

00:16:40.510 --> 00:16:43.310
in terms of writing views.

00:16:44.280 --> 00:16:47.350
So we're going to talk just a
bit about implied versus explicit

00:16:47.400 --> 00:16:50.370
information in your custom classes.

00:16:50.760 --> 00:16:54.560
We'll walk through a couple
of kind of general approaches

00:16:54.570 --> 00:16:56.670
for building a custom view.

00:16:56.930 --> 00:17:00.710
Then we're going to see that
the accessibility client,

00:17:00.800 --> 00:17:03.860
what it's expecting,
drives the requirements,

00:17:03.860 --> 00:17:07.190
and those requirements drive a
really short list of things we

00:17:07.200 --> 00:17:12.060
should consider as we decide on
approaches for building a custom view.

00:17:14.690 --> 00:17:19.800
So all of the information, 80, 90,
100% of the information

00:17:19.800 --> 00:17:24.480
that accessibility needs,
that we saw in Accessibility Inspector,

00:17:24.600 --> 00:17:28.500
for instance,
is already in a view that you've written.

00:17:28.550 --> 00:17:32.540
It's just sometimes that
information is very implicit as

00:17:32.650 --> 00:17:35.340
opposed to explicitly spelled out.

00:17:35.390 --> 00:17:38.850
Even what we see up here is a
relatively simple user interface.

00:17:38.930 --> 00:17:42.190
It's a window with a button in it.

00:17:42.270 --> 00:17:46.050
If we focus in just on that
button and think about all the

00:17:46.050 --> 00:17:48.130
information being conveyed,

00:17:49.710 --> 00:17:53.280
Well, first we know it's a button,
first of all.

00:17:53.380 --> 00:17:54.480
We know it's containment.

00:17:54.480 --> 00:17:55.360
It has a parent.

00:17:55.430 --> 00:17:57.340
We can see what window it's in.

00:17:57.480 --> 00:18:01.500
All of that's conveyed very implicitly.

00:18:01.850 --> 00:18:02.850
We know it's enabled.

00:18:02.860 --> 00:18:04.660
We know it doesn't have keyboard focus.

00:18:04.660 --> 00:18:06.830
We know what its title is.

00:18:07.040 --> 00:18:09.040
We know where it is on the screen.

00:18:09.080 --> 00:18:12.920
And since it's a button,
we also know we can press it.

00:18:14.110 --> 00:18:18.540
Now there's a myriad of ways that you
could get that particular image to

00:18:18.540 --> 00:18:22.190
show up on a screen or in your view.

00:18:23.120 --> 00:18:30.210
Accessibility needs to have explicit
and structured information provided

00:18:30.720 --> 00:18:33.870
because it's a programmatic interface.

00:18:35.000 --> 00:18:39.670
And so choices you make in building your
view greatly affect how easy or difficult

00:18:39.740 --> 00:18:42.700
it may be to provide that information.

00:18:42.830 --> 00:18:46.520
So we're going to start with
a really just dirt simple,

00:18:46.860 --> 00:18:49.810
but ugly, custom view.

00:18:50.060 --> 00:18:55.000
It's a white box with two
colored squares in it.

00:18:55.130 --> 00:18:55.890
And how does it work?

00:18:56.010 --> 00:18:56.900
What's the interface?

00:18:57.020 --> 00:18:59.900
Well, if I click, it selects one.

00:19:00.050 --> 00:19:02.640
If I click the other,
it selects the other and

00:19:02.640 --> 00:19:04.700
deselects the first one.

00:19:04.810 --> 00:19:07.550
It also supports full
keyboard navigation,

00:19:07.550 --> 00:19:10.740
so you can see the focus ring
is entered and is on that

00:19:10.740 --> 00:19:15.200
red square and hit tab again,
and now it's on the green square.

00:19:15.360 --> 00:19:17.600
Very simple view.

00:19:17.930 --> 00:19:20.750
But even with such a simple view,
there's like a gazillion ways

00:19:20.810 --> 00:19:22.560
you could write this view.

00:19:22.670 --> 00:19:26.340
We're going to take a look at a few
approaches and then see what their

00:19:26.340 --> 00:19:29.120
accessibility implications are.

00:19:29.230 --> 00:19:32.100
So in approach one,
it seems straightforward and simple.

00:19:32.100 --> 00:19:33.720
View handles everything.

00:19:33.800 --> 00:19:36.130
I have one class, simple view.

00:19:36.270 --> 00:19:38.520
In drawRect,
I just draw a background square,

00:19:38.520 --> 00:19:41.630
and I draw two squares,
and I'm done with drawing.

00:19:41.730 --> 00:19:45.120
Event handling,
I figure out which square was hit.

00:19:47.630 --> 00:19:48.560
It seems very straightforward.

00:19:48.560 --> 00:19:53.060
It also seems like we've implied
a lot of information in there.

00:19:53.060 --> 00:19:57.610
We don't know anything about those
rectangles and only DrawRect really knows

00:19:57.610 --> 00:19:59.980
what's going on about those squares.

00:20:00.040 --> 00:20:03.230
Approach 2,
we might add a little substructure.

00:20:03.420 --> 00:20:08.080
So maybe we have our simple view class,
we have some color swatch classes.

00:20:08.120 --> 00:20:12.160
They each know their bounds,
they know how to draw themselves,

00:20:12.160 --> 00:20:14.310
they can hit test themselves.

00:20:15.310 --> 00:20:20.340
In approach three, though, we might say,
do we need a custom view at all?

00:20:20.340 --> 00:20:22.790
What if we composed three custom views?

00:20:22.890 --> 00:20:25.610
Well, in this case,
we actually pick up a lot

00:20:25.750 --> 00:20:27.700
of functionality for free.

00:20:27.700 --> 00:20:30.850
We don't have to write the
hit testing because the view

00:20:30.850 --> 00:20:32.800
hierarchy already hit tests.

00:20:32.800 --> 00:20:37.750
We don't need custom code for
handling keyboard focus because the

00:20:37.830 --> 00:20:42.860
first responder already does that,
but only to the view level.

00:20:42.860 --> 00:20:47.740
And we also get a lot of
basic accessibility support.

00:20:47.900 --> 00:20:49.680
So when we're thinking
about a custom view,

00:20:49.680 --> 00:20:53.080
one thought is,
could I just compose views?

00:20:53.080 --> 00:20:55.060
Would that be OK?

00:20:55.150 --> 00:20:55.740
Would that work?

00:20:55.940 --> 00:21:00.150
Would that make my life easier and
make my code more maintainable?

00:21:00.760 --> 00:21:04.280
But then the fourth approach is,
isn't this really just

00:21:04.340 --> 00:21:05.940
a segmented control?

00:21:05.960 --> 00:21:07.360
I can click either one.

00:21:07.440 --> 00:21:09.020
One is selected at a time.

00:21:09.020 --> 00:21:13.760
I can tab in and select each item.

00:21:13.760 --> 00:21:17.510
Why am I reinventing a whole new
view when there's a perfectly

00:21:17.620 --> 00:21:19.880
good framework class I could use?

00:21:20.380 --> 00:21:26.000
And so, anytime you're like,
I need a custom view, stop for a moment,

00:21:26.000 --> 00:21:27.530
take a breath.

00:21:27.790 --> 00:21:28.700
Check the headers.

00:21:28.790 --> 00:21:30.340
See if anything's new in 10.7.

00:21:30.340 --> 00:21:34.660
Maybe I don't need a custom view.

00:21:35.760 --> 00:21:35.760
Because if you don't,

00:21:36.150 --> 00:21:42.170
By far the easiest path to an accessible
user interface is reusing the work

00:21:42.170 --> 00:21:44.930
somebody else has already done.

00:21:46.280 --> 00:21:50.060
Now, of these approaches,
we're going to focus

00:21:50.070 --> 00:21:51.920
on two for this talk.

00:21:52.060 --> 00:21:54.710
Using framework classes,
there's not a lot to say there

00:21:54.710 --> 00:21:56.580
in terms of making it accessible.

00:21:56.580 --> 00:21:59.440
It already is accessible,
so we'll drop that out.

00:21:59.590 --> 00:22:04.380
Composing three custom views
is really just a very specific

00:22:04.830 --> 00:22:07.040
subversion of approach two.

00:22:07.040 --> 00:22:11.240
So we're going to focus on the
view handling everything or

00:22:11.240 --> 00:22:13.920
objects used for substructure.

00:22:13.940 --> 00:22:18.230
Now that we have talked a
little bit about two basic

00:22:18.260 --> 00:22:21.190
ways of putting views together,

00:22:22.240 --> 00:22:26.270
Now let's see what an accessibility
client needs and how that drives

00:22:26.370 --> 00:22:29.940
our requirements of what we're going
to need to do to these two views.

00:22:30.090 --> 00:22:33.440
So an app bends a
hierarchy of UI elements.

00:22:33.560 --> 00:22:39.690
In each node in the tree, your app,
the window, the button,

00:22:40.680 --> 00:22:47.510
is represented by a lightweight node
in this hierarchy vended to clients.

00:22:48.870 --> 00:22:54.130
And each of those nodes supports actions,
as we saw in Accessibility Inspector,

00:22:54.130 --> 00:22:55.640
a list of attributes.

00:22:55.770 --> 00:23:00.540
We also support notifications to find
out things when windows come and go,

00:23:00.540 --> 00:23:01.720
for instance.

00:23:02.780 --> 00:23:10.780
And behind every one of those UI element
nodes is some object in your application,

00:23:10.860 --> 00:23:14.980
and it implements the
NSAccessibility protocol.

00:23:15.330 --> 00:23:18.170
We're going to take just a
brief look at this protocol.

00:23:18.360 --> 00:23:22.700
Essentially, a client wants to know what
attributes do you support.

00:23:22.720 --> 00:23:28.900
Accessibility attribute names gets called
on your object and returns the value.

00:23:29.050 --> 00:23:32.770
Essentially,
this is the set of methods that

00:23:33.300 --> 00:23:39.610
provides the response for the request
that an accessibility client has made.

00:23:39.860 --> 00:23:41.740
Here are some that deal with attributes.

00:23:41.980 --> 00:23:48.780
We also have that deal with actions,
hit testing, finding the focused element,

00:23:48.950 --> 00:23:53.840
pruning the tree of extraneous items,
and posting notifications.

00:23:55.330 --> 00:23:56.960
Now how do clients get at this tree?

00:23:56.960 --> 00:23:59.930
Well,
they can start from the top of the tree,

00:24:00.000 --> 00:24:04.790
and then using the axchildren attribute,
navigate their way down.

00:24:08.520 --> 00:24:11.630
So based on what the client needs,
things to keep in mind.

00:24:11.640 --> 00:24:16.370
One is, if we have an element in
the accessibility tree,

00:24:16.370 --> 00:24:20.860
it needs some object in your
app to implement NSAccessibility

00:24:20.860 --> 00:24:23.040
and respond to those methods.

00:24:23.080 --> 00:24:26.490
The other thing that's important
is every element needs to

00:24:26.490 --> 00:24:28.490
know its children in the tree.

00:24:29.790 --> 00:24:33.240
So how does this translate
to our approaches?

00:24:33.290 --> 00:24:38.030
Well, when the view handles everything,
we certainly do see there's a

00:24:38.310 --> 00:24:41.210
view and there's two things in it.

00:24:41.350 --> 00:24:45.700
We should report those things as
unique visual elements in the tree,

00:24:45.760 --> 00:24:49.790
but we only have one object per instance.

00:24:50.310 --> 00:24:53.960
So in this case,
we need to create objects specifically

00:24:54.290 --> 00:24:57.020
to report the accessibility information.

00:24:57.120 --> 00:25:00.500
We often call them faux UI elements.

00:25:00.950 --> 00:25:04.890
In Approach 2,
we already have the structure in place.

00:25:04.980 --> 00:25:10.570
The simple view has two
color swatches as children.

00:25:10.840 --> 00:25:15.530
So we already have objects in our
original design that we can hang

00:25:15.610 --> 00:25:18.170
these accessibility methods off of.

00:25:19.890 --> 00:25:20.980
So the design choices.

00:25:20.980 --> 00:25:25.300
In approach one, we need to come up with

00:25:25.400 --> 00:25:39.900
[Transcript missing]

00:25:40.110 --> 00:25:44.440
is relying a lot on their parent because
the parent is where the smarts are.

00:25:44.510 --> 00:25:48.900
They have a pointer back to their
parent and they ask their parent,

00:25:48.900 --> 00:25:53.820
"What's my bounds because
I don't know myself?"

00:25:54.480 --> 00:25:57.520
More typically,
that sub-element is a little smarter.

00:25:57.590 --> 00:26:03.100
It handles its own accessibility,
and it's a great place to put that logic.

00:26:05.070 --> 00:26:07.690
Now,
in addition from this top-down approach,

00:26:07.690 --> 00:26:10.110
clients can also access by hit testing.

00:26:10.190 --> 00:26:13.240
And in this case,
as we saw in Accessibility Inspector,

00:26:13.240 --> 00:26:15.680
let's say we hit test that point.

00:26:15.830 --> 00:26:20.410
It hit tests down to the button cell,
and so we return the corresponding

00:26:20.410 --> 00:26:22.200
UI element to the client.

00:26:22.280 --> 00:26:27.460
And from there, the tree can be navigated
asking for the AX parent.

00:26:29.580 --> 00:26:32.900
Which adds a few more
requirements to our list.

00:26:32.940 --> 00:26:35.480
Oh,
one other thing that the client can do,

00:26:35.480 --> 00:26:38.900
and often does do,
is ask for the size and position.

00:26:38.970 --> 00:26:41.230
That's how we were able
to draw the highlight.

00:26:41.330 --> 00:26:43.500
That's how VoiceOver draws its cursor.

00:26:43.580 --> 00:26:48.310
We need to provide screen coordinates.

00:26:48.980 --> 00:26:54.670
So, in addition to children,
every element needs to know its parent,

00:26:54.670 --> 00:26:58.830
and every element needs to
know its bounds on the screen,

00:26:58.980 --> 00:27:02.650
which brings up a few requirements.

00:27:03.080 --> 00:27:06.370
Now at this point,
the two approaches merge a little bit.

00:27:06.500 --> 00:27:08.130
The view handles everything.

00:27:08.330 --> 00:27:12.000
The foe UI element needs
to know who its parent is.

00:27:12.050 --> 00:27:13.920
Needs to know for two reasons.

00:27:14.060 --> 00:27:19.070
One, it needs to report a parent,
but also potentially it

00:27:19.140 --> 00:27:22.980
needs to ask its parent,
since the parent is a view,

00:27:23.050 --> 00:27:29.810
to translate its coordinates from view
coordinates to screen coordinates.

00:27:31.010 --> 00:27:35.690
We end up with the same
requirement for approach two.

00:27:35.790 --> 00:27:39.270
That sub-element,
whether it's a faux one or one

00:27:39.270 --> 00:27:43.690
that's built into the structure,
needs to know the parent.

00:27:46.220 --> 00:27:48.060
So geometry design choices.

00:27:48.060 --> 00:27:52.390
In approach one,
you will probably want to factor all

00:27:52.390 --> 00:27:57.040
of your geometry of your sub-elements
into some method where you hand

00:27:57.050 --> 00:28:02.530
in some identifier for the element
and get back the correct rectangle.

00:28:03.500 --> 00:28:06.310
In Approach 2,
the sub-elements likely have their

00:28:06.310 --> 00:28:08.520
own bounds that they carry with them.

00:28:08.690 --> 00:28:12.740
But whichever way you go with,
the same mechanism can

00:28:12.830 --> 00:28:17.120
be used for view drawing,
hit testing, accessibility reporting,

00:28:17.120 --> 00:28:19.800
and accessibility hit testing.

00:28:19.940 --> 00:28:22.970
So one factored method
handles both cases,

00:28:22.970 --> 00:28:26.910
or both sets of cases,
your standard drawing and event

00:28:26.910 --> 00:28:30.080
handling and your accessibility case.

00:28:33.750 --> 00:28:38.660
One requirement that people
don't often think of,

00:28:38.660 --> 00:28:41.650
or sometimes miss when
building a custom view,

00:28:41.830 --> 00:28:47.230
is that those sub-elements do
need a reference up the hierarchy.

00:28:48.200 --> 00:28:52.490
This is true regardless of approach,
and it's something to keep in mind.

00:28:52.610 --> 00:28:56.080
You need the parent because
you need to report it.

00:28:56.230 --> 00:29:00.700
But again, we report in screen
coordinates to accessibility.

00:29:00.700 --> 00:29:02.780
We hit test in screen coordinates.

00:29:02.850 --> 00:29:07.320
So even if you are in a hierarchy
and you're two or three sub elements

00:29:07.410 --> 00:29:12.250
down from the containing view,
you need either a direct or some

00:29:12.250 --> 00:29:17.100
indirect way of having your view
translate the coordinates for you.

00:29:23.310 --> 00:29:30.940
The next thing a client requires,
they really rely on keyboard focus.

00:29:31.250 --> 00:29:36.120
VoiceOver users tend not to use a mouse,
sometimes use a trackpad,

00:29:36.300 --> 00:29:40.500
but very much navigate
using the keyboard.

00:29:41.050 --> 00:29:42.670
and Full Keyboard Navigation.

00:29:42.760 --> 00:29:47.030
So finding out,
first asking the application

00:29:47.040 --> 00:29:52.400
which element has the focus,
but also registering for notifications

00:29:52.400 --> 00:29:56.470
so that when the focus changes,
a notification is sent to the

00:29:56.680 --> 00:29:59.170
client that focus has changed.

00:30:02.770 --> 00:30:07.020
So that adds one more item to our list,
our relatively short list

00:30:07.020 --> 00:30:09.860
of things to keep in mind.

00:30:11.210 --> 00:30:16.470
Now, when there's a change in focus,
again, if you're dealing with views,

00:30:16.470 --> 00:30:20.280
the first responder
handles that automatically.

00:30:20.380 --> 00:30:25.490
If you have your own custom view,
you're handling focus changes yourself.

00:30:25.840 --> 00:30:29.720
Just as you need to handle the
focus ring changes in tracking

00:30:29.830 --> 00:30:34.010
what subelement has focus,
you need to also do the appropriate

00:30:34.010 --> 00:30:37.260
accessibility notification and reporting.

00:30:37.290 --> 00:30:41.900
It's best to have a single point of
control where focus change happens.

00:30:41.930 --> 00:30:46.100
I've seen it scattered to the four
winds in some pieces of code I've

00:30:46.100 --> 00:30:49.560
looked at over the years where
it's just you jam something into an

00:30:49.650 --> 00:30:52.620
IVAR and there's no control point.

00:30:52.860 --> 00:30:57.040
That control point is really useful
to have both for accessibility

00:30:57.040 --> 00:31:01.380
purposes but just for general
maintaining your code purposes.

00:31:03.060 --> 00:31:09.200
And the final thing to keep in mind is
that clients can interact with your app.

00:31:09.300 --> 00:31:11.890
They can perform actions

00:31:12.260 --> 00:31:15.200
In comes an action, presses that button.

00:31:15.270 --> 00:31:20.720
They can also set attribute values as
we saw in the demo where accessibility

00:31:20.720 --> 00:31:24.090
inspector changed the size of a window.

00:31:25.430 --> 00:31:31.580
Now, it's important to keep in mind that
not all interaction with your view

00:31:31.580 --> 00:31:34.090
has an NS event attached to it.

00:31:34.160 --> 00:31:38.390
I've definitely seen code over the
years where it's relying on just the

00:31:38.390 --> 00:31:40.920
current location of the current event.

00:31:41.170 --> 00:31:44.800
Well, there might not be a
mouse involved at all.

00:31:45.670 --> 00:31:49.970
It's typically best to factor
things like triggering behaviors,

00:31:49.970 --> 00:31:54.770
changing the selection into general
methods that possibly if you're

00:31:54.770 --> 00:31:56.840
changing selection by index.

00:31:56.900 --> 00:32:01.140
And then call those general methods from
both the event handling methods that

00:32:01.140 --> 00:32:06.830
you write and also from accessibility
actions and attribute setters.

00:32:06.980 --> 00:32:10.760
One, it centralizes your code
and makes your life easier.

00:32:11.020 --> 00:32:13.900
But the second thing it does
is it ensures that when a

00:32:13.900 --> 00:32:17.660
VoiceOver user presses that button,
that it's going through the same

00:32:17.660 --> 00:32:24.280
code path as when a user clicks on
the button in the user interface.

00:32:24.410 --> 00:32:26.940
So let's just do a brief review.

00:32:27.280 --> 00:32:29.280
We didn't talk about
it except for briefly,

00:32:29.350 --> 00:32:34.600
but again, I stress, when possible,
use standard controls and views.

00:32:34.800 --> 00:32:37.560
And there's a handful,
five things to keep in mind when

00:32:37.560 --> 00:32:40.430
you're building custom views.

00:32:40.590 --> 00:32:42.120
You need a backing object.

00:32:42.230 --> 00:32:47.080
So if you're on the fence about just
having a Mondo view do everything itself,

00:32:47.270 --> 00:32:51.060
or having some substructure,
making it accessible maybe

00:32:51.060 --> 00:32:54.330
will make you lean more towards
using some substructure.

00:32:54.440 --> 00:32:58.890
You need to know the child
and parent and rectangle.

00:33:00.300 --> 00:33:05.520
Having that back pointer to the parent
and potentially to the containing view is

00:33:05.550 --> 00:33:10.980
something that often you're not thinking
about when you write a view at the start.

00:33:11.370 --> 00:33:14.050
That's a good one to keep in mind.

00:33:15.980 --> 00:33:19.970
bottlenecking or putting a control
point for your keyboard focus,

00:33:19.970 --> 00:33:23.950
and also making your interaction
not rely on NS events.

00:33:24.120 --> 00:33:29.340
Keeping those in mind as you write
views will really make it much,

00:33:29.340 --> 00:33:30.550
much easier to

00:33:30.670 --> 00:33:33.900
Come in later, because we know when you
sit down and write a view,

00:33:33.900 --> 00:33:36.120
you can only focus on
so many things at once,

00:33:36.120 --> 00:33:39.680
and you're trying to get it to
draw right and handle events right.

00:33:40.720 --> 00:33:43.370
Follow these steps,
keep these few things in mind,

00:33:43.530 --> 00:33:46.940
and then as you add accessibility later,
you'll find most of the

00:33:46.940 --> 00:33:48.980
work's already been done.

00:33:51.030 --> 00:33:53.950
So I want to point you to some resources.

00:33:53.950 --> 00:33:57.860
We have three sets or three
pieces of sample code.

00:33:57.890 --> 00:34:03.310
Image Map really details how
you would work with case one.

00:34:03.470 --> 00:34:06.180
Dicey is approach two.

00:34:06.340 --> 00:34:10.200
Sketch Plus Accessibility
shows how you would implement

00:34:10.200 --> 00:34:13.890
accessibility into a larger,
more complex app.

00:34:13.980 --> 00:34:18.410
So I highly recommend taking a look
at those pieces of sample code.

00:34:18.520 --> 00:34:23.300
I also wanted to point you to
the relatively new accessibility

00:34:23.300 --> 00:34:26.180
roles and attributes reference.

00:34:26.220 --> 00:34:30.130
It's, as far as I know,
the most up to date we've ever

00:34:30.130 --> 00:34:34.340
had in terms of mapping which
roles go with which attributes

00:34:34.340 --> 00:34:36.160
and defining them very well.

00:34:36.280 --> 00:34:39.780
So I would love you to
take a look at those.

00:34:39.810 --> 00:34:42.020
And then finally,
the accessibility programming

00:34:42.020 --> 00:34:44.200
guidelines for Cocoa.

00:34:44.400 --> 00:34:46.590
For more information,

00:34:48.790 --> 00:34:51.800
The related sessions are in the past,
but feel free to check

00:34:52.240 --> 00:34:54.100
out what's new in Cocoa.

00:34:54.150 --> 00:34:57.400
And also,
we talked a little about table views.

00:34:58.440 --> 00:35:04.690
And finally, if you would be willing,
I'd like to do a little song.

00:35:13.250 --> 00:35:18.010
I've been working on accessibility
for about five years now,

00:35:18.050 --> 00:35:20.170
so it's about time to do a song about it.

00:35:20.230 --> 00:35:23.690
Um, plain and simple.

00:35:24.780 --> 00:35:29.160
I'd like to, before we start,
introduce the breakpoints.

00:35:29.280 --> 00:35:31.100
On guitar is Darren Minifee.

00:35:31.380 --> 00:35:36.320
He's an engineer on the VoiceOver team,
accessibility team.

00:35:36.450 --> 00:35:40.500
And on keyboard is Victor Alexander.

00:35:43.910 --> 00:35:48.000
Who as you might know is the best
slide advanced man in the business.

00:35:48.220 --> 00:35:51.940
And we're going to try
something a little new today.

00:35:52.010 --> 00:35:56.800
We'll have a little instrument break
with an iPad somewhere in there.

00:35:56.930 --> 00:36:00.430
So watch out.

00:36:03.100 --> 00:36:04.100
Thanks.

00:36:04.100 --> 00:36:04.980
Excellent.

00:36:05.100 --> 00:36:05.100
Are we in tune?

00:36:05.150 --> 00:36:06.100
I think so.

00:36:06.100 --> 00:36:07.070
Cool.

00:36:07.190 --> 00:36:08.100
All right.

00:36:08.100 --> 00:36:09.100
And with that, the accessibility song.

00:36:20.900 --> 00:36:27.190
♪ Application is a tiny little server ♪
♪ Of information of its user interface

00:36:27.190 --> 00:36:33.460
♪ ♪ It dishes out the dirt with such
a quiet fervor ♪ ♪ You might not even

00:36:33.460 --> 00:36:40.520
realize it's taking place ♪ ♪ The client
gets a lightweight representation ♪ ♪

00:36:40.520 --> 00:36:47.190
Of your app's UI elementary ♪ ♪ Then it's
just elementary my dear Watson ♪ ♪

00:36:47.190 --> 00:36:48.800
Your app's an open book no more mystery ♪

00:36:49.100 --> 00:36:53.690
♪ Think how much use for bitmaps on
screens ♪ ♪ They get the lay of the land

00:36:53.690 --> 00:36:59.310
through this alternate means ♪ ♪ If you
wanna build an app with maximum utility

00:36:59.310 --> 00:37:05.750
♪ ♪ Then take a little time and implement
accessibility ♪ ♪ Tell the story of your

00:37:05.750 --> 00:37:11.880
application ♪ ♪ Describe the glory of its
interface ♪ ♪ So we can see sight unseen

00:37:11.890 --> 00:37:17.920
what's going on on the screen ♪ ♪ Yeah,
build your app for the whole human race ♪

00:37:24.000 --> 00:37:29.790
♪ There's an object behind each
UI element ♪ ♪ Accessibility methods

00:37:29.790 --> 00:37:34.230
compute ♪ ♪ The response to each
request that the client sent ♪

00:37:34.480 --> 00:37:37.690
♪ For any action or attribute ♪

00:37:38.480 --> 00:37:44.900
♪ The client wants to be notified when
things are happening blow by blow ♪

00:37:44.900 --> 00:37:51.900
♪ Like when key focus changes where
it resides or windows come and go ♪

00:37:52.000 --> 00:37:57.020
♪ For standard controls this is built
right in ♪ ♪ For a view of your own we

00:37:57.020 --> 00:38:02.050
need your help for the win ♪ ♪ This isn't
rocket science in some government

00:38:02.050 --> 00:38:07.870
facilities ♪ ♪ So take a little time and
implement accessibility ♪ ♪ And tell the

00:38:07.870 --> 00:38:14.340
story of your application ♪ ♪ Mind the
query of its interface ♪ ♪ So we can

00:38:14.430 --> 00:38:21.460
easy as pie for you to automate your UI ♪
♪ Show your app to the whole human race ♪

00:38:56.270 --> 00:39:04.780
♪ A thousand words they say ♪ ♪ I don't
believe this ratio anymore ♪ ♪ 'Cause

00:39:04.950 --> 00:39:13.240
just a word or two goes such a long,
long way ♪ ♪ To describe what

00:39:13.240 --> 00:39:14.690
an icon is for ♪ ♪ You can add
descriptions to match your style

00:39:14.690 --> 00:39:14.690
♪ ♪ You can put 'em right in IB ♪

00:39:15.300 --> 00:39:19.630
♪ You can add 'em to an image
description file ♪ ♪ Or do it

00:39:19.790 --> 00:39:29.180
programmatically ♪ Let's just go back.

00:40:14.100 --> 00:40:23.060
♪ So the way we get things done
♪ ♪ Accessible apps really are

00:40:23.060 --> 00:40:26.960
more fun ♪ ♪ It's been rumored to
augment virility ♪ ♪ So come on

00:40:26.960 --> 00:40:26.960
everyone implement accessibility ♪

00:40:43.400 --> 00:40:49.490
♪ Describe the glory of its interface
♪ ♪ So we can know right away the

00:40:49.490 --> 00:40:55.390
things we ought to say ♪ ♪ And share
your app with the whole human race ♪