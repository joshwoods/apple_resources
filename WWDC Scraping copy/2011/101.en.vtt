WEBVTT

00:00:13.000 --> 00:00:18.640
Good morning.

00:00:18.690 --> 00:00:19.640
Good morning.

00:00:19.640 --> 00:00:20.840
Welcome to What's New in Cocoa.

00:00:20.840 --> 00:00:21.840
My name is Ali Ozer.

00:00:21.840 --> 00:00:25.350
I'm the manager of the
Cocoa frameworks team at Apple.

00:00:25.690 --> 00:00:28.300
So today we're going to talk
about the changes in AppKit and

00:00:28.300 --> 00:00:31.760
Foundation since Snow Leopard,
and there's a ton of changes.

00:00:31.820 --> 00:00:34.500
And we're going to provide
pointers to other talks,

00:00:34.620 --> 00:00:36.840
and there's a lot of other
talks to be pointed at.

00:00:36.880 --> 00:00:40.440
Now one important point,
this is not What's New in Cocoa Touch.

00:00:40.480 --> 00:00:43.080
What's New in Cocoa Touch was
at 9:00 AM this morning.

00:00:43.260 --> 00:00:45.360
So if you're here a little late,
sorry about that.

00:00:45.390 --> 00:00:48.440
I guess you should not have had
that one last drink last night.

00:00:48.540 --> 00:00:50.070
But you can enjoy this talk.

00:00:50.250 --> 00:00:53.470
And What's New in Cocoa Touch is
repeated Thursday afternoon at 4:30,

00:00:53.470 --> 00:00:55.030
I believe.

00:00:58.010 --> 00:01:01.570
Okay, so here are the topics
we're going to cover today.

00:01:01.880 --> 00:01:05.900
Some of them you saw yesterday and many
others which you have not seen yesterday.

00:01:05.900 --> 00:01:07.740
And with that, let's get started.

00:01:07.900 --> 00:01:11.310
Oh, and by the way, one note,
everything we're talking about,

00:01:11.400 --> 00:01:14.860
pretty much everything we're
talking about today is in Lion.

00:01:14.900 --> 00:01:15.820
It's new in Lion.

00:01:15.900 --> 00:01:18.010
And there are very few things
that actually aren't installed up,

00:01:18.010 --> 00:01:20.930
and I will point those out,
but these are all new material.

00:01:21.800 --> 00:01:26.550
OK, so autosave and versions-- so what's
the problem we're trying to solve

00:01:26.610 --> 00:01:28.660
here with autosave and versions?

00:01:28.690 --> 00:01:32.100
Well, one problem is that users have
to explicitly save documents.

00:01:32.220 --> 00:01:34.660
You create a new document,
you have to at some point bring

00:01:34.660 --> 00:01:37.720
down the Save panel and put it
somewhere in your file system.

00:01:37.740 --> 00:01:40.670
In addition,
you have to continue to save regularly--

00:01:40.800 --> 00:01:44.020
that Command-S tick that some of
us have and some people don't have.

00:01:44.020 --> 00:01:45.410
We look over their shoulders,
we get worried because

00:01:45.520 --> 00:01:47.020
they haven't saved all day.

00:01:47.220 --> 00:01:50.500
So you need to save regularly so
that you don't lose your changes.

00:01:50.510 --> 00:01:54.120
In addition, sometimes you're forced to
save at inopportune times.

00:01:54.130 --> 00:01:56.460
You just want to shut down your machine,
you have to go ahead and save

00:01:56.460 --> 00:01:59.400
all these untitled documents
or documents with changes.

00:01:59.400 --> 00:02:04.220
The system doesn't install and it
wants you to restart and so on.

00:02:04.340 --> 00:02:06.810
So these are all things where
the system is forcing you to

00:02:06.950 --> 00:02:09.300
save and you maybe don't want to.

00:02:09.370 --> 00:02:11.750
So the solution,
as you heard about yesterday,

00:02:11.780 --> 00:02:14.900
is to eliminate the
need to save explicitly.

00:02:14.910 --> 00:02:19.030
We will save documents automatically
and always-- that's in quotes

00:02:19.140 --> 00:02:22.780
and I'll explain that later-- and
we're also going to save in place.

00:02:22.990 --> 00:02:26.000
Now note that this is something that
we've done in a number of other apps.

00:02:26.040 --> 00:02:28.480
Sticky does it,
Mail does it with Compose, Windows,

00:02:28.490 --> 00:02:29.900
apps like Aperture do it.

00:02:29.920 --> 00:02:33.310
In addition, many apps on iOS actually
save automatically.

00:02:33.600 --> 00:02:36.160
You don't ever hit Save in
many of those apps.

00:02:36.230 --> 00:02:39.640
However,
the situation on Mac OS X is a little

00:02:39.640 --> 00:02:45.280
more complex because users have a lot
of control and they're used to it.

00:02:45.380 --> 00:02:49.520
Think about the case where the user
has a 2010 budget file and they

00:02:49.520 --> 00:02:49.950
want to create the 2010 budget file.

00:02:50.040 --> 00:02:55.650
Most users would just go
ahead-- not most users,

00:02:55.650 --> 00:02:58.670
but some users would go ahead and
make changes to their 2010 budget

00:02:59.000 --> 00:03:02.840
file and do a Save As at the end
and save the 2011 budget file.

00:03:02.990 --> 00:03:05.070
But with an autosaving model,
as you're making changes

00:03:05.200 --> 00:03:07.670
to your 2010 budget file,
you'll be overriding

00:03:07.670 --> 00:03:09.380
your 2010 budget file.

00:03:09.380 --> 00:03:11.750
And unless your intent
was to cook the books,

00:03:11.850 --> 00:03:13.400
that's not what you want to be doing.

00:03:13.400 --> 00:03:17.570
So that's something that
we need to worry about.

00:03:19.310 --> 00:03:22.000
We want to make it easier to
avoid unintentional changes.

00:03:22.000 --> 00:03:24.300
We want to make it clear when
a document is being changed,

00:03:24.300 --> 00:03:27.600
and we also want to notice when a
document should perhaps not be changed.

00:03:27.720 --> 00:03:30.640
In addition, if the user makes an
unintentional change,

00:03:30.700 --> 00:03:33.930
they should be able to get back
to their original document.

00:03:33.950 --> 00:03:37.160
They should be able to revert changes,
even if it is a few days later.

00:03:37.260 --> 00:03:42.870
And let me show you a demo on how
we address some of these issues.

00:03:44.620 --> 00:03:47.920
So here we have our Lion desktop.

00:03:47.970 --> 00:03:50.700
And here I have my 2010 budget file.

00:03:50.750 --> 00:03:53.600
Now note that I want to
edit this 2010 budget file,

00:03:53.640 --> 00:03:55.540
and I want to create the 2011 budget.

00:03:55.540 --> 00:03:57.380
So I'm going to go ahead
here and start typing.

00:03:57.380 --> 00:04:01.180
Note that the moment I type,
we get this alert that tells me that

00:04:01.290 --> 00:04:04.880
this document is locked because I haven't
made any changes to it recently.

00:04:04.880 --> 00:04:07.160
And it's telling me
whether I should unlock,

00:04:07.160 --> 00:04:09.590
meaning I should go change it,
or make a copy.

00:04:09.590 --> 00:04:12.250
Now in this case,
I want to create a 2011 budget file.

00:04:12.490 --> 00:04:13.890
So I go ahead and say duplicate.

00:04:13.960 --> 00:04:17.940
So this is one way in which we protect
you against unintentional edits.

00:04:18.000 --> 00:04:22.550
Now note that the change was
reverted in the original file,

00:04:22.600 --> 00:04:25.340
but it was carried over
to the second file.

00:04:25.340 --> 00:04:29.290
Now I can go ahead then
and save this document.

00:04:29.720 --> 00:04:35.800
instance, as let's say, 2011 budget.

00:04:35.950 --> 00:04:36.880
Okay.

00:04:36.880 --> 00:04:40.100
So now one other thing
I want to show you,

00:04:40.200 --> 00:04:43.600
let's say we're editing this file
and I go ahead and make a change.

00:04:43.600 --> 00:04:47.050
Now at this point you get a
badge here in the title bar.

00:04:47.050 --> 00:04:48.660
I hope you can see that.

00:04:48.660 --> 00:04:52.050
It says "Edited." Now this edited
badge is our new way of telling

00:04:52.210 --> 00:04:53.720
you that this document has changes.

00:04:53.720 --> 00:04:58.070
Note that we are no longer using
the little black dot in the red,

00:04:58.250 --> 00:05:02.510
the eye of Sauron in the corner of
your window watching everything you do,

00:05:02.580 --> 00:05:04.020
telling you you have to save.

00:05:04.020 --> 00:05:05.410
We're no longer using that.

00:05:05.410 --> 00:05:07.780
That's still reserved for
non-autosave applications.

00:05:07.780 --> 00:05:10.300
But in this new world,
we're just telling you that

00:05:10.300 --> 00:05:14.030
your document has changes and,
you know, make you aware of it.

00:05:14.090 --> 00:05:16.980
In fact, at this point,
if I quit TextEdit and if

00:05:16.980 --> 00:05:20.440
I go back and rerun it,
note that the document comes back

00:05:20.510 --> 00:05:22.140
with the edited badge still there.

00:05:22.240 --> 00:05:24.600
Until I explicitly save
or close the window those

00:05:24.600 --> 00:05:28.430
changes are like unconfirmed,
but they are being saved.

00:05:28.470 --> 00:05:32.010
In fact, I can sort of show you,
for instance, I can come here and type,

00:05:32.050 --> 00:05:34.280
you know,
make some other update and if I go to

00:05:34.280 --> 00:05:38.680
finder and if I quick look this document,
you'll see that my changes

00:05:38.680 --> 00:05:39.900
are actually there.

00:05:39.900 --> 00:05:43.170
They are being saved to the document.

00:05:43.720 --> 00:05:46.310
Now, okay, let's say that this,
I didn't do this,

00:05:46.350 --> 00:05:51.400
and instead I went to my 2010 budget,
and I actually did make a change,

00:05:51.400 --> 00:05:52.620
and then I said unlock.

00:05:52.700 --> 00:05:53.780
I wasn't thinking.

00:05:53.780 --> 00:05:59.110
So now I'm editing the 2010 budget file,
and later, and let's say I, you know,

00:05:59.250 --> 00:06:03.300
close the document, I open it, and later,
I notice my mistake.

00:06:03.300 --> 00:06:05.660
Well,
that's when the Versions UI comes in,

00:06:05.850 --> 00:06:08.750
and with the Versions browser,
I can actually go ahead and

00:06:08.750 --> 00:06:11.800
back in time and get back to
my document as it existed,

00:06:11.800 --> 00:06:15.340
even if it is many, many days, in fact,
months ago.

00:06:15.530 --> 00:06:17.040
And here,
I would choose the right version.

00:06:17.040 --> 00:06:20.780
I would simply say restore,
and the document will come back to life.

00:06:25.390 --> 00:06:28.740
If you want this for your applications,
it turns out it's fairly easy if you're

00:06:28.740 --> 00:06:30.840
an NS Document-based application.

00:06:30.930 --> 00:06:34.010
We highly recommend that document-based
applications use NS Document,

00:06:34.170 --> 00:06:34.940
if possible.

00:06:35.040 --> 00:06:39.010
NS Document provides autosave and
versions right out of the box,

00:06:39.010 --> 00:06:40.840
and all you have to do is
override this one method in

00:06:40.840 --> 00:06:42.130
your subclass of NS Document.

00:06:42.230 --> 00:06:45.460
Auto saves in place, return, yes.

00:06:45.560 --> 00:06:47.390
Now,
we don't do this automatically because

00:06:47.860 --> 00:06:51.540
some applications have sophisticated
behaviors that does need to be tested.

00:06:51.660 --> 00:06:54.820
So once you do this, you know,
don't just put the app on the App Store.

00:06:54.820 --> 00:06:56.200
You might want to test a bit.

00:06:56.280 --> 00:06:59.700
In addition,
there's a few other considerations.

00:06:59.810 --> 00:07:03.880
For instance, you might want to look at
supporting asynchronous saving.

00:07:03.940 --> 00:07:06.640
That will make your saves faster,
and it will make them

00:07:06.640 --> 00:07:09.170
work more seamlessly,
so as the user is interacting

00:07:09.170 --> 00:07:11.350
with the document,
they don't notice the saves happening

00:07:11.350 --> 00:07:12.970
every 30 seconds or every minute.

00:07:13.060 --> 00:07:15.260
You really don't want to
interrupt the user's workflow.

00:07:15.420 --> 00:07:18.180
In addition,
you can customize versions UI,

00:07:18.230 --> 00:07:21.200
and you also have a mechanism for
identifying discardable changes.

00:07:21.290 --> 00:07:25.370
These are small changes that can
be thrown away without fuss if for

00:07:25.370 --> 00:07:27.800
some reason document can't be saved,
for instance.

00:07:27.850 --> 00:07:31.030
Now, to hear more about these and
autosave and versions in general,

00:07:31.180 --> 00:07:34.490
we have a whole talk this afternoon
at 3:15 in Pacific Heights.

00:07:34.590 --> 00:07:37.680
I encourage you to attend that.

00:07:38.210 --> 00:07:42.230
Now, one important part of
Auto Save is file coordination.

00:07:42.230 --> 00:07:45.690
And file coordination is a new mechanism
for locking in notification that's

00:07:45.690 --> 00:07:48.020
available on iOS and on Mac OS X.

00:07:48.150 --> 00:07:51.510
File coordination enables
serialization of document accesses.

00:07:51.630 --> 00:07:54.420
This is the classic problem
of somebody's reading a file,

00:07:54.420 --> 00:07:55.580
somebody's writing a file.

00:07:55.620 --> 00:07:58.280
Let's make sure that's
done in a serialized,

00:07:58.280 --> 00:08:00.990
consistent way so the
file isn't messed up.

00:08:01.100 --> 00:08:06.280
And this is important on
Mac OS X even more now because

00:08:06.280 --> 00:08:09.720
you have mechanisms like iCloud,
which can be changing the file out

00:08:09.720 --> 00:08:12.980
from under the application because
the file was changed elsewhere

00:08:13.340 --> 00:08:15.990
and it just got synced because
that device wasn't turned on,

00:08:15.990 --> 00:08:16.770
for instance.

00:08:16.850 --> 00:08:19.800
Another thing file coordination
helps you with is making sure

00:08:19.800 --> 00:08:21.380
documents on disk are up to date.

00:08:21.690 --> 00:08:24.010
Earlier I said documents
are saved always.

00:08:24.120 --> 00:08:24.940
Well, that's not true.

00:08:24.940 --> 00:08:27.200
They're not saved after every key press.

00:08:27.320 --> 00:08:31.010
The power guys wouldn't like
us very much if we did that.

00:08:31.160 --> 00:08:34.960
So what we do is we save
documents on demand.

00:08:35.220 --> 00:08:38.790
For instance, if you drag a document,
if you're typing in pages and

00:08:38.790 --> 00:08:41.940
you grab that document in Finder
and drag it into a mail message,

00:08:42.010 --> 00:08:45.380
you want to make sure what the user sees
is what ends up in the mail message.

00:08:45.410 --> 00:08:48.260
You don't want the previous version
to end up in the mail message.

00:08:48.380 --> 00:08:52.400
And although we do some tricks like we
save as soon as pages is deactivated,

00:08:52.510 --> 00:08:56.380
we save as soon as there's a pause,
the user can still very

00:08:56.380 --> 00:08:57.780
quickly drag that document.

00:08:57.780 --> 00:08:59.430
In fact,
they can drag the document without

00:08:59.430 --> 00:09:01.020
even deactivating the app they're in.

00:09:01.130 --> 00:09:03.890
So the file coordination provides
a mechanism for mail to say,

00:09:03.990 --> 00:09:07.910
"I want this file and I want the
latest version." And that causes page

00:09:07.910 --> 00:09:10.860
to explicitly save at that instant.

00:09:10.990 --> 00:09:14.290
This is done with two sets of new APIs.

00:09:14.460 --> 00:09:17.620
There's a file coordinator class,
which is what you use to do

00:09:17.670 --> 00:09:21.300
coordinated accesses to files,
and the file presenter protocol,

00:09:21.300 --> 00:09:25.380
which is what file presenters,
things that edit and view files, use.

00:09:25.500 --> 00:09:29.820
And this is a mechanism for
hearing about coordinated accesses.

00:09:29.930 --> 00:09:32.590
Now,
NSDocument implements NSFilePresenter,

00:09:32.750 --> 00:09:36.940
so you actually don't have to worry
about it if you're using NSDocument.

00:09:37.790 --> 00:09:40.840
Taking advantage of file coordination,
this afternoon at 4:30 we'll

00:09:40.840 --> 00:09:43.330
go into more depth here,
but I just want to give you a

00:09:43.360 --> 00:09:46.700
taste of this new file coordination
mechanism with just a quick example.

00:09:46.700 --> 00:09:49.700
Let's say you're an app like
Mail and you import user files,

00:09:49.700 --> 00:09:52.040
and you want to make sure you
get the latest version and you

00:09:52.040 --> 00:09:53.700
get it in a coordinated fashion.

00:09:53.850 --> 00:09:55.700
Here's the code you might write.

00:09:55.700 --> 00:09:59.700
You create a coordinator instance,
and then you call this method

00:09:59.700 --> 00:10:03.700
coordinateReadingItemAtURL,
options, error, and by accessor.

00:10:03.720 --> 00:10:06.400
And this is the method
that a reader uses,

00:10:06.400 --> 00:10:10.590
and the options of zero indicates
give me the latest version.

00:10:11.280 --> 00:10:12.370
And then this block.

00:10:12.590 --> 00:10:14.950
This block will be called
once the file has been all

00:10:15.140 --> 00:10:16.580
pre-deed up for you and saved.

00:10:16.590 --> 00:10:19.060
And during this block,
you have exclusive read

00:10:19.060 --> 00:10:20.130
access to the file.

00:10:20.160 --> 00:10:24.050
So nobody will be writing that file,
and the file has been up to date.

00:10:24.050 --> 00:10:26.730
So you do whatever you
want to do in this block.

00:10:26.860 --> 00:10:27.680
Read the file.

00:10:27.680 --> 00:10:29.370
Do it as quickly as possible.

00:10:29.560 --> 00:10:31.230
And here we read it into a data.

00:10:31.230 --> 00:10:34.260
And then outside of the block,
we process that data as

00:10:34.260 --> 00:10:36.090
needed and take care of it.

00:10:36.220 --> 00:10:39.270
So this is a simple,
straightforward use of file

00:10:39.280 --> 00:10:43.000
coordinator that you might
consider in your applications.

00:10:43.670 --> 00:10:45.680
Now, at this point,
I want to say something

00:10:45.740 --> 00:10:47.600
quick about NSFileWrapper.

00:10:47.660 --> 00:10:51.430
This is actually not a new class in Lion,
it's actually been with us since 10.0,

00:10:51.430 --> 00:10:53.100
but I just want to mention it.

00:10:53.280 --> 00:10:56.240
It's a good class for
managing file wrappers,

00:10:56.240 --> 00:11:01.320
file wrapper--I'm sorry, file packages,
let me use the right terminology here.

00:11:01.320 --> 00:11:05.190
File packages for those of you--I mean,
those of--many of you probably know,

00:11:05.280 --> 00:11:09.100
but file packages are folders that
look like single documents to the user.

00:11:09.190 --> 00:11:12.280
For instance,
text.rtfd documents are file packages.

00:11:12.360 --> 00:11:15.710
If you do a show package contents,
you will see that a file

00:11:15.710 --> 00:11:19.870
package might contain txt.rtf,
which is the main text of it,

00:11:19.870 --> 00:11:22.550
and then the various
attachments like graphics,

00:11:22.910 --> 00:11:24.860
spreadsheets,
and movie are all represented

00:11:24.930 --> 00:11:25.850
as separate files.

00:11:25.850 --> 00:11:27.190
Well, why do we do this?

00:11:27.410 --> 00:11:30.260
One, it's a lot better to store
files in their natural state,

00:11:30.370 --> 00:11:33.800
a movie as a movie file,
a spreadsheet as a numbers file, and two,

00:11:34.150 --> 00:11:38.880
this is a very good format for
making incremental saves fast.

00:11:39.100 --> 00:11:42.210
And so,
file wrappers are great for doing fast,

00:11:42.210 --> 00:11:44.100
asynchronous autosaves.

00:11:44.100 --> 00:11:46.600
You know, the only file that gets
saved here is the txt.rtf.

00:11:46.600 --> 00:11:50.140
Everything else is just efficiently
hardlink copied on or whatever we

00:11:50.140 --> 00:11:52.100
can do because they're not changing.

00:11:52.100 --> 00:11:55.580
Now, good news about file wrapper
is that now it's in foundation.

00:11:55.580 --> 00:11:58.480
It moved down from AppKit,
and it's also available on iOS.

00:11:58.480 --> 00:12:00.690
In fact, it was available on iOS 4.0.

00:12:00.690 --> 00:12:03.770
So you can use file wrapper and
this file wrapper in a lot more

00:12:03.820 --> 00:12:05.900
applications if you need to.

00:12:05.940 --> 00:12:07.720
So if you have flexibility
with your document formats,

00:12:07.920 --> 00:12:09.000
please consider file wrappers.

00:12:09.100 --> 00:12:10.250
Thank you.

00:12:10.460 --> 00:12:13.370
Now let's move on to Resume,
the state restoration,

00:12:13.390 --> 00:12:16.450
also known as state restoration,
which is another major topic.

00:12:16.500 --> 00:12:21.130
The goal with Resume is to make restart,
shutdown, and logout seamless.

00:12:21.160 --> 00:12:23.460
We want to eliminate the
need to save changes,

00:12:23.460 --> 00:12:26.900
and you saw how we do
that with Auto Save.

00:12:26.900 --> 00:12:30.120
We also want to eliminate
the need to recreate state.

00:12:30.160 --> 00:12:34.540
If the user shuts down their machine
and the next day turns it back on,

00:12:34.540 --> 00:12:37.780
it should come back
exactly as they left it.

00:12:37.860 --> 00:12:40.680
One of the gold standards
here is that if the user,

00:12:40.700 --> 00:12:44.300
of course, allowed it,
and the machine did an install

00:12:44.300 --> 00:12:47.260
in the middle of the night and
it restarted in the morning,

00:12:47.260 --> 00:12:49.640
the user cannot even tell
that the machine rebooted.

00:12:49.640 --> 00:12:52.240
That's one of the gold standards
you should always think about.

00:12:52.300 --> 00:12:53.350
Are we achieving that?

00:12:55.040 --> 00:12:58.230
Now we're also using the same
technology to make quit preserve state,

00:12:58.400 --> 00:13:00.300
which is a user option.

00:13:00.420 --> 00:13:04.080
So when apps are quit and restarted,
they can also restore state

00:13:04.080 --> 00:13:06.220
if the user chooses to do so.

00:13:08.050 --> 00:13:10.870
Now, how do we do this?

00:13:11.070 --> 00:13:18.330
Well, on login, we relaunch applications
that were running.

00:13:18.470 --> 00:13:20.740
That's one of the main things we do,
and this is not opt-in.

00:13:20.830 --> 00:13:22.900
All applications are relaunched.

00:13:23.020 --> 00:13:26.100
And apps can opt out of being relaunched,
but that's something that

00:13:26.100 --> 00:13:27.530
very few apps should do,
if any.

00:13:27.710 --> 00:13:31.390
An example might be an installer
app that just caused an install.

00:13:31.480 --> 00:13:32.400
It restarted your machine.

00:13:32.400 --> 00:13:35.710
Maybe it has no need to come back,
so it can dynamically say,

00:13:35.790 --> 00:13:37.400
I don't need to come back.

00:13:41.450 --> 00:13:45.260
We also want to provide mechanisms
for apps to save and restore state.

00:13:45.370 --> 00:13:47.950
It's not just enough to
relaunch applications.

00:13:47.950 --> 00:13:51.920
We want to make sure applications
come back exactly as the user left it.

00:13:52.050 --> 00:13:53.990
Now this is automatic for some cases.

00:13:53.990 --> 00:13:57.800
We know how to reopen document windows
in S document based applications.

00:13:57.800 --> 00:14:01.170
We know how to bring back windows
of single window applications.

00:14:01.170 --> 00:14:03.690
But there are a number of
cases which we can't do.

00:14:03.690 --> 00:14:06.700
And there are also a lot of
custom controls that only you know

00:14:06.700 --> 00:14:08.260
how to save and restore state.

00:14:08.370 --> 00:14:11.160
So we provide some APIs for
customization here.

00:14:11.290 --> 00:14:14.970
Now you can hear a lot of depth
about this in the resume and

00:14:14.970 --> 00:14:18.620
automatic termination talk that's
Thursday morning at 9:00 AM.

00:14:18.670 --> 00:14:22.870
But again, I just want to give you a
taste of what this looks like.

00:14:23.300 --> 00:14:25.770
So here's an example of how to
save and restore custom state.

00:14:25.810 --> 00:14:29.120
Let's say you have an UI element
with a selected item property,

00:14:29.120 --> 00:14:30.140
an integer.

00:14:30.190 --> 00:14:35.140
In your setSelectedItem method,
you would go ahead and call this

00:14:35.260 --> 00:14:36.960
method invalidateRestorableState.

00:14:37.030 --> 00:14:38.650
This is an NSResponder method.

00:14:38.850 --> 00:14:40.900
You would call it to indicate
that your state changed.

00:14:40.950 --> 00:14:41.660
This is very fast.

00:14:41.780 --> 00:14:44.820
You can call it as much as you
want whenever your state changes.

00:14:44.860 --> 00:14:47.600
As a result of calling this,
at some point in the future,

00:14:47.650 --> 00:14:51.060
your object will be called
with encodeRestorableState,

00:14:51.070 --> 00:14:53.260
and you'll be given a coder.

00:14:53.290 --> 00:14:56.500
And you use keyed archiving to
write the changed state into that.

00:14:56.560 --> 00:14:58.010
And you just write the incremental state.

00:14:58.020 --> 00:15:00.800
You don't write your whole state,
just whatever changed.

00:15:00.820 --> 00:15:04.360
In this case, we're using encodeInteger
to write our selected item.

00:15:04.390 --> 00:15:07.430
And later, when needed,
when your application is relaunched

00:15:07.430 --> 00:15:10.550
or the machine is restarted,
restoreStateWithCoder is called.

00:15:10.640 --> 00:15:12.410
And here,
you will use the code integer for

00:15:12.490 --> 00:15:15.840
key to read back that integer and
set that as your selected item.

00:15:16.040 --> 00:15:17.520
So this is pretty straightforward.

00:15:17.530 --> 00:15:19.900
If you're familiar with
coding and keyed archiving,

00:15:19.900 --> 00:15:22.870
and you maybe implement keyed archiving,
this looks pretty familiar.

00:15:23.080 --> 00:15:24.620
So you can just do this.

00:15:24.650 --> 00:15:26.500
There's actually even an easier way.

00:15:26.520 --> 00:15:30.190
If your properties are
KVC and KVO compliant,

00:15:30.320 --> 00:15:32.300
you can just implement this class method.

00:15:32.360 --> 00:15:35.240
Tell us what properties
you want us to deal with.

00:15:35.300 --> 00:15:36.230
We will observe them.

00:15:36.320 --> 00:15:37.520
We'll persist them.

00:15:37.540 --> 00:15:39.500
And we'll automatically
restore them when needed.

00:15:39.500 --> 00:15:41.040
And you don't have to
write any more code.

00:15:41.060 --> 00:15:43.800
And you can use these two
mechanisms in a mixed fashion.

00:15:43.800 --> 00:15:45.260
Use this for some properties.

00:15:45.260 --> 00:15:46.930
Use the other for other properties.

00:15:47.050 --> 00:15:48.010
So it's fairly straightforward.

00:15:48.060 --> 00:15:50.820
The bar is pretty low for
adopting this feature.

00:15:52.900 --> 00:15:55.860
Okay, so with that,
let's switch over to our next topic,

00:15:56.120 --> 00:15:58.360
Automatic Termination.

00:15:58.870 --> 00:15:59.860
So what's the problem here?

00:15:59.860 --> 00:16:03.800
Now, automatic termination,
you didn't hear much about yesterday.

00:16:03.810 --> 00:16:06.200
And so what's the problem we're
trying to solve with this?

00:16:06.200 --> 00:16:08.920
And I'll explain what
automatic termination is.

00:16:08.930 --> 00:16:13.280
Automatic termination is-- the
problem is that users need to

00:16:13.280 --> 00:16:15.180
explicitly quit applications.

00:16:15.310 --> 00:16:17.630
Some of you are very careful quitters.

00:16:17.720 --> 00:16:19.840
You will quit your applications
as soon as you're done,

00:16:19.840 --> 00:16:23.070
just so that the machine runs at full,
maximal efficiency.

00:16:23.090 --> 00:16:25.580
Or if you're running a game,
you know you must quit all your apps.

00:16:25.610 --> 00:16:28.180
Then there are other users
who never quit applications.

00:16:28.180 --> 00:16:31.180
You can recognize them by the fact
that they have 80 items in their dock.

00:16:31.180 --> 00:16:32.680
They've just been running for a month.

00:16:32.680 --> 00:16:33.660
And they just never quit them.

00:16:33.660 --> 00:16:34.720
They just close windows.

00:16:34.720 --> 00:16:35.860
And that's fine.

00:16:35.860 --> 00:16:38.110
The problem, of course,
is the system doesn't have any

00:16:38.110 --> 00:16:39.500
leverage into such applications.

00:16:39.500 --> 00:16:42.300
The system cannot kill the
applications that are not being used.

00:16:42.300 --> 00:16:45.400
Those applications still
are using some resources,

00:16:45.400 --> 00:16:46.040
maybe.

00:16:46.040 --> 00:16:48.380
Maybe they're paged out,
and they're occupying

00:16:48.380 --> 00:16:49.420
all this room on disk.

00:16:49.670 --> 00:16:53.030
So the system has very little leverage
to deal with such applications.

00:16:53.190 --> 00:16:55.950
So this is the problem
we're trying to solve here.

00:16:58.930 --> 00:17:02.480
Now, so what we're doing here is we're
enabling applications to declare

00:17:02.850 --> 00:17:04.760
that their process can be killed.

00:17:04.790 --> 00:17:07.560
And I mean, more generally,
what we're doing is separating

00:17:07.560 --> 00:17:11.890
the lifetime of applications
from the lifetime of processes.

00:17:11.960 --> 00:17:14.440
An application that
looks like it's running,

00:17:14.480 --> 00:17:16.800
for instance,
may no longer have a process

00:17:16.800 --> 00:17:18.510
under some circumstances.

00:17:19.930 --> 00:17:25.490
And applications should only do this if
it can be done without the user noticing.

00:17:26.550 --> 00:17:30.830
Now note that this mechanism of
killing processes in the background

00:17:31.190 --> 00:17:34.690
is on iOS and works very well.

00:17:35.000 --> 00:17:38.050
However, the situation on iOS is a
little simpler than Mac OS X.

00:17:38.320 --> 00:17:41.840
On iOS, you're looking at one
application at any given time,

00:17:41.890 --> 00:17:44.910
and maybe there are some background
tasks like music player running,

00:17:44.910 --> 00:17:46.900
but most of the applications
are out of sight,

00:17:47.060 --> 00:17:47.670
out of mind.

00:17:48.580 --> 00:17:50.390
On Mac OS X,
even though you're not using,

00:17:50.390 --> 00:17:52.530
let's say you have 50
applications running,

00:17:52.530 --> 00:17:55.590
even though you're not using 49 of them,
their windows might still be

00:17:55.760 --> 00:17:58.660
on the screen visible to you,
and maybe they're even updating

00:17:58.690 --> 00:18:01.270
some state in the menu bar
or the dock icon and so on.

00:18:01.380 --> 00:18:05.270
So we have to deal with
a few more issues here.

00:18:05.300 --> 00:18:08.380
So what I mean by applications
should do this only if it can be

00:18:08.380 --> 00:18:11.940
done without user noticing is,
an example there is, for instance,

00:18:11.950 --> 00:18:13.630
app has no visible windows.

00:18:13.640 --> 00:18:15.590
Because if an app has a visible
window and the process is

00:18:15.630 --> 00:18:17.990
killed and the window goes away,
the user will be like, hey,

00:18:17.990 --> 00:18:18.560
what the heck?

00:18:18.580 --> 00:18:19.160
What happened to that window?

00:18:19.160 --> 00:18:23.800
Similarly, if the app is doing background
activity like checking mail,

00:18:23.800 --> 00:18:26.410
if you kill the process
and the mail icon,

00:18:26.410 --> 00:18:30.980
the mail dock badge stops updating, hey,
I'm not getting any mail.

00:18:30.980 --> 00:18:37.020
And one other condition for this to
be adopted is that apps sports resume.

00:18:37.020 --> 00:18:41.080
Now, if the app has no windows visible
at all and it gets killed,

00:18:41.150 --> 00:18:43.100
that's maybe a simple case.

00:18:43.200 --> 00:18:46.410
But if the app has windows and
the user hit it and we killed it,

00:18:46.410 --> 00:18:50.290
when the app is brought back to life,
it better sports resume so that

00:18:50.290 --> 00:18:53.580
it can restore the user state
exactly as the user left it.

00:18:53.680 --> 00:18:57.200
The user doesn't want to find themselves
back in page one of their 100-page

00:18:57.200 --> 00:18:59.610
document that they were reading,
for instance.

00:19:01.590 --> 00:19:04.100
So the Resume and Automatic
Termination talk Thursday morning

00:19:04.100 --> 00:19:07.950
will go into a lot more depth here.

00:19:08.050 --> 00:19:10.770
But I do want to give a quick demo,
sort of to make this

00:19:10.860 --> 00:19:12.950
discussion more concrete.

00:19:13.700 --> 00:19:14.820
Aki, back to demo machine, please.

00:19:14.900 --> 00:19:15.700
Thank you.

00:19:15.820 --> 00:19:16.400
Okay.

00:19:16.450 --> 00:19:19.390
So, first I'm going to
launch Activity Monitor.

00:19:21.480 --> 00:19:23.640
And I'm going to search for
TextEdit and it's not running.

00:19:23.640 --> 00:19:26.200
I'm also going to run Terminal.

00:19:26.260 --> 00:19:27.730
After all, we are a developer conference.

00:19:27.780 --> 00:19:29.420
We're not afraid of it.

00:19:29.550 --> 00:19:32.500
So with Terminal and ActivityMonitor,
now I'm going to go ahead and open

00:19:32.500 --> 00:19:34.640
my 2010 budget file I had before.

00:19:34.760 --> 00:19:39.230
So you can see the document here and
you can see that TextEdit is running.

00:19:39.230 --> 00:19:42.190
Now I'm going to go
ahead and hide TextEdit.

00:19:42.400 --> 00:20:01.200
[Transcript missing]

00:20:01.690 --> 00:20:04.260
And you can ask us in the
labs what TAL stands for.

00:20:04.330 --> 00:20:05.600
So I'm going to cause a memory pressure.

00:20:05.600 --> 00:20:07.870
This is a tool that's available to you.

00:20:07.960 --> 00:20:10.330
And the moment I did that,
note that text had vanished

00:20:10.330 --> 00:20:11.670
from the activity monitor.

00:20:11.800 --> 00:20:12.830
The process has been killed.

00:20:12.830 --> 00:20:15.300
But note that the blue
dot is still down here,

00:20:15.300 --> 00:20:16.350
if you can see it.

00:20:16.490 --> 00:20:19.190
It still looks like it's running.

00:20:19.190 --> 00:20:22.310
In fact, if I do Command-Tab,
it also looks like it's running.

00:20:22.310 --> 00:20:25.460
And if I were to select it,
it does come back to life as

00:20:25.460 --> 00:20:27.140
if it had never been quit.

00:20:27.210 --> 00:20:29.280
So this is one aspect of
automatic termination.

00:20:29.280 --> 00:20:33.170
Now, another aspect of automatic
termination is if I close the

00:20:33.170 --> 00:20:36.150
last window in an application,

00:20:36.280 --> 00:20:40.860
You can see it's still running,
and it's still in the menu bar up here.

00:20:40.950 --> 00:20:43.970
But if I switch apps, the app quits.

00:20:44.060 --> 00:20:45.320
You can see that the app quits.

00:20:45.520 --> 00:20:47.280
This is a new sort of UI paradigm.

00:20:47.280 --> 00:20:49.870
You close the last window
in an app and you leave it,

00:20:49.870 --> 00:20:50.700
the app quits.

00:20:50.800 --> 00:20:53.640
And this is something
that your apps opt into.

00:20:53.760 --> 00:20:56.720
However, note that although it
looks like the app quit,

00:20:56.720 --> 00:20:58.430
it is actually still running.

00:20:58.580 --> 00:21:00.990
If I were to go click back on it,
it comes back to life,

00:21:01.090 --> 00:21:02.640
and we just use the same process.

00:21:02.730 --> 00:21:06.190
So that's sort of equivalent to
getting a much faster relaunch time.

00:21:08.010 --> 00:21:11.360
OK, so now I want to talk a
bit about iCloud Sport.

00:21:11.700 --> 00:21:15.640
You heard about iCloud yesterday.

00:21:16.130 --> 00:21:21.140
Two important things about iCloud
are there are two categories of

00:21:21.390 --> 00:21:29.310
things you can save in the cloud,
documents and configuration data.

00:21:29.410 --> 00:21:31.420
And documents are big documents.

00:21:31.540 --> 00:21:33.680
You saw an example of
what I worked yesterday.

00:21:33.680 --> 00:21:36.260
And configuration data is
stuff like high scores,

00:21:36.260 --> 00:21:37.870
what page are you in a book, and so on.

00:21:37.980 --> 00:21:41.540
So much smaller amounts of data,
not images, et cetera.

00:21:41.690 --> 00:21:43.100
So we have two talks.

00:21:43.110 --> 00:21:45.020
One talk in this room
right after this one,

00:21:45.020 --> 00:21:46.190
iCloud Storage Overview.

00:21:46.200 --> 00:21:47.320
That will give you an overview.

00:21:47.460 --> 00:21:49.820
And later,
the Auto Save and Versions talk will

00:21:49.820 --> 00:21:53.830
also go into a good amount of depth
about iCloud and show you how to

00:21:53.830 --> 00:21:56.690
make an application iCloud aware.

00:21:57.640 --> 00:21:59.880
But let me just show you
some of the APIs we have.

00:21:59.910 --> 00:22:01.810
We've added APIs in this file manager.

00:22:02.210 --> 00:22:04.090
Set ubiquitous item at URL.

00:22:04.170 --> 00:22:07.640
This is the API with which you'd
make a file move into the cloud.

00:22:07.820 --> 00:22:11.190
When a file is made ubiquitous,
it's in the cloud.

00:22:12.140 --> 00:22:16.610
File Manager also has a bunch more APIs,
such as explicitly causing a download

00:22:16.610 --> 00:22:20.940
of a file in the cloud or explicitly
evicting from the local machine.

00:22:20.940 --> 00:22:22.600
That's not equivalent
to removing the file.

00:22:22.600 --> 00:22:26.570
That's just equivalent to getting
rid of that local copy of that file.

00:22:26.700 --> 00:22:30.810
So these are ways your application might
explicitly control that local storage.

00:22:30.890 --> 00:22:34.290
NS Metadata Query,
which you might know is the class which

00:22:34.290 --> 00:22:38.800
does spotlight queries on Mac OS X,
it has been extended to do searches

00:22:38.900 --> 00:22:41.840
for documents in the cloud,
and you would use this scope,

00:22:41.930 --> 00:22:43.090
Ubiquitous Documents scope.

00:22:43.270 --> 00:22:46.920
NSURL has been extended
with a few more attributes.

00:22:46.990 --> 00:22:49.440
For instance, you can ask whether
an item is ubiquitous.

00:22:49.440 --> 00:22:51.050
You can ask whether
it's being downloaded,

00:22:51.050 --> 00:22:52.320
what percentage downloaded.

00:22:52.320 --> 00:22:53.640
There are also APIs for uploading.

00:22:53.640 --> 00:22:58.520
There's also a property that lets
you find out whether a document has,

00:22:58.520 --> 00:23:01.950
a file has conflicts,
meaning changes were found

00:23:01.950 --> 00:23:06.300
in more than two devices,
and the system had to resolve it one way.

00:23:06.300 --> 00:23:10.020
And your application can go ahead and do
a more sophisticated job merging changes.

00:23:10.080 --> 00:23:12.300
There are APIs for that,
a class called NS File version

00:23:12.300 --> 00:23:13.180
that you can use for this.

00:23:13.180 --> 00:23:16.580
And finally, I want to talk about
NS Ubiquitous Key Value Store.

00:23:16.580 --> 00:23:18.730
This,
if you're familiar with NS User Default,

00:23:18.730 --> 00:23:19.840
it's very familiar.

00:23:19.840 --> 00:23:22.840
This is the class you would use
for storing configuration data,

00:23:22.840 --> 00:23:24.500
so small amounts of data in the cloud.

00:23:24.500 --> 00:23:26.580
There are definite limits
to how much you can store,

00:23:26.580 --> 00:23:29.900
so this is mostly, again,
for small amounts of data, high scores,

00:23:29.900 --> 00:23:30.360
etc.

00:23:33.390 --> 00:23:37.220
So with that, let's shift gears and talk
a bit about Auto Layout.

00:23:37.280 --> 00:23:40.720
So Auto Layout is something we
wanted to do for a long time.

00:23:40.720 --> 00:23:43.600
Springs and Struts have been great,
but they have their limitations.

00:23:43.640 --> 00:23:49.080
And we've had this vision
of doing something great for

00:23:49.080 --> 00:23:51.810
Auto Layout for a long time.

00:23:52.020 --> 00:23:53.330
And I'm really glad,
I'm really happy to say that

00:23:53.330 --> 00:23:53.330
we've done something great here.

00:23:53.330 --> 00:23:53.330
And I hope you like it.

00:23:53.560 --> 00:23:56.480
Auto Layout is a new view
layout system in Cocoa,

00:23:56.620 --> 00:23:58.030
and it's constraint-based.

00:23:58.210 --> 00:23:59.400
What do I mean by that?

00:23:59.630 --> 00:24:02.030
Well, let's say you have two buttons.

00:24:02.880 --> 00:24:06.000
And you want to express the layout
of these buttons in various ways.

00:24:06.180 --> 00:24:08.220
For instance,
you can say that button one is 12

00:24:08.300 --> 00:24:10.400
points to the left of button two.

00:24:10.400 --> 00:24:12.460
You could say they
have the same baseline.

00:24:12.460 --> 00:24:14.880
You could say button one
is at least 80 points wide.

00:24:14.880 --> 00:24:17.740
You could say button one is
standard Aqua spacing right

00:24:17.740 --> 00:24:19.220
from the edge of its container.

00:24:19.240 --> 00:24:21.540
You can actually go ahead and
say all these things if you want.

00:24:21.560 --> 00:24:24.490
And the system will just figure
out what the best layout is

00:24:24.490 --> 00:24:27.680
as various things change,
like as the width of the button changes,

00:24:27.680 --> 00:24:31.340
as the standard Aqua spacing changes,
and so on.

00:24:32.130 --> 00:24:34.450
So let me just show you
how you would do this.

00:24:34.680 --> 00:24:36.040
And I'm going to show you three ways.

00:24:36.210 --> 00:24:39.840
The first one is just code, you know,
bare down to the metal code.

00:24:39.860 --> 00:24:44.600
NSLayoutConstraint is the one and
only class we've added for AutoLayout.

00:24:44.810 --> 00:24:47.610
And to say button1 is 12
points to the left of button2,

00:24:47.710 --> 00:24:49.500
here's the code you would write.

00:24:49.640 --> 00:24:52.180
You would create an
NSLayoutConstraint instance,

00:24:52.340 --> 00:24:55.570
and you would effectively say
button1's right attribute is equal

00:24:55.630 --> 00:24:58.180
to button2's left attribute minus 12.

00:24:58.240 --> 00:24:58.740
Okay?

00:24:59.080 --> 00:25:03.100
And then you would call this method
called addConstraint and add the

00:25:03.100 --> 00:25:06.720
constraint to an appropriate super view,
basically any super view

00:25:06.720 --> 00:25:07.930
of all the views involved.

00:25:08.550 --> 00:25:10.690
So this is great,
but it's really not the kind of code

00:25:10.750 --> 00:25:12.300
you want to be writing for doing layout.

00:25:12.300 --> 00:25:13.830
It gets old quick.

00:25:14.080 --> 00:25:18.060
The second way to do it is, again,
to use layout constraint,

00:25:18.060 --> 00:25:20.740
but this other method,
which lets you specify

00:25:21.450 --> 00:25:23.320
constraints using ASCII art.

00:25:28.230 --> 00:25:34.410
So this thing says that button 1,
and the brackets represent

00:25:34.420 --> 00:25:37.720
objects or view elements,
button 1 is 12 points

00:25:37.720 --> 00:25:39.380
to the left of button 2.

00:25:39.380 --> 00:25:42.590
You can also abbreviate it a bit,
and this says it's standard

00:25:42.590 --> 00:25:44.480
Aqua spacing away from button 2.

00:25:44.480 --> 00:25:46.090
So this gets you a little farther.

00:25:46.140 --> 00:25:48.320
You still are writing code,
but it's a lot more visual.

00:25:49.730 --> 00:25:52.880
And the third way to do this,
and this is of course the best way,

00:25:52.880 --> 00:25:53.930
is to use Interface Builder.

00:25:53.960 --> 00:25:56.620
And if you saw the
DevTools kickoff yesterday,

00:25:56.620 --> 00:25:57.980
you saw Max's demo.

00:25:57.980 --> 00:26:00.660
Here,
guides become persistent constraints.

00:26:01.300 --> 00:26:03.410
So those visual guidelines
you see in Interface Builder,

00:26:03.750 --> 00:26:06.990
once you start using constraints,
become actual constraints,

00:26:06.990 --> 00:26:10.790
and they're each independently
inspectable objects that you can add,

00:26:10.890 --> 00:26:13.200
delete, inspect, change, and so on.

00:26:13.250 --> 00:26:16.350
So it's a lot, you know,
it's a much higher level of programming.

00:26:16.940 --> 00:26:18.920
And with that,
here's an example of what you can do.

00:26:27.090 --> 00:26:48.900
And with that,
here's an example of what you can do.

00:26:48.900 --> 00:26:51.590
So with that, let's move to Aqua.

00:26:53.630 --> 00:26:58.160
And here we're just going to
briefly touch upon a few topics.

00:26:58.160 --> 00:27:01.940
Just Aqua itself, Full-screen, Scrolling,
Multi-image dragging,

00:27:01.990 --> 00:27:05.710
a new object that has popover,
some exciting changes in table view,

00:27:05.710 --> 00:27:07.240
and resolution independence.

00:27:07.240 --> 00:27:08.540
So first, Aqua.

00:27:08.660 --> 00:27:13.640
Just briefly here, you might have noticed
that Aqua has changed.

00:27:13.640 --> 00:27:17.700
It's, of course, changing all along,
but the changes in Lion maybe

00:27:17.700 --> 00:27:19.670
are a little more obvious.

00:27:20.740 --> 00:27:25.990
Aqua is now, the controls are subtler,
they're maybe more muted,

00:27:25.990 --> 00:27:27.280
a little more transparent.

00:27:27.350 --> 00:27:31.420
Here's what Snow Leopard looked like,
and here's what Lion looks like.

00:27:31.440 --> 00:27:34.050
Again, Snow Leopard, Lion.

00:27:34.250 --> 00:27:37.430
It's a bit less lickable,
maybe that's not a bad thing.

00:27:37.440 --> 00:27:42.700
And in addition,
we now have engraved text on controls.

00:27:42.700 --> 00:27:49.200
If you look closely at title bars,
toolbar items, sidebar items, buttons,

00:27:49.290 --> 00:27:50.720
etc., you will see that the text
is not as clear as it used to be.

00:27:50.740 --> 00:27:54.130
The text actually has this
engraving effect that you can get.

00:27:54.210 --> 00:27:55.890
It's fairly automatic in some cases.

00:27:55.920 --> 00:27:59.250
And in inactive windows,
we now do a much better and much

00:27:59.390 --> 00:28:03.760
more consistent treatment of
enabled controls in active windows.

00:28:03.760 --> 00:28:06.430
For instance, in this case here,
you can tell which controls are still

00:28:06.470 --> 00:28:08.190
enabled and which controls are disabled.

00:28:08.200 --> 00:28:11.580
And it gives you a much more subdued,
muted look, which doesn't distract you

00:28:11.580 --> 00:28:13.130
away from your active windows.

00:28:13.160 --> 00:28:15.870
Now, you can hear about these and
other Aqua changes at the

00:28:15.970 --> 00:28:20.300
Full-screen and Aqua changes talk,
which is tomorrow morning at 10.15.

00:28:22.360 --> 00:28:26.940
Full-screen,
Craig demonstrated full-screen yesterday,

00:28:26.940 --> 00:28:32.600
and it's a new mode for working.

00:28:32.600 --> 00:28:36.380
big user feature in Lion,
and the goal here is to allow the user

00:28:36.380 --> 00:28:40.750
to use as much of the screen as possible
and take most advantage of that 11

00:28:40.820 --> 00:28:43.230
or 13-inch display they might have.

00:28:43.280 --> 00:28:46.220
And the other goal is
to reduce distractions.

00:28:46.230 --> 00:28:48.290
You know,
let's say you're working on your

00:28:48.410 --> 00:28:52.120
great presentation or your next great
app or your manifesto or whatever.

00:28:52.120 --> 00:28:54.220
You know,
you don't want to be watching that mail

00:28:54.220 --> 00:28:57.340
icon telling you got eight new messages
and the clock ticking away and the

00:28:57.340 --> 00:28:59.570
battery insisting you're at 88% charge.

00:28:59.580 --> 00:29:00.980
You know,
you want to just hide that stuff

00:29:00.980 --> 00:29:02.270
and concentrate on your content.

00:29:02.280 --> 00:29:05.930
But you still want access to them,
so the access is still as easy as

00:29:05.930 --> 00:29:08.280
moving your mouse to the top or bottom.

00:29:08.300 --> 00:29:12.670
In addition, full screen also gives you
easy access to other apps.

00:29:12.780 --> 00:29:14.340
You know,
you're not in solitary confinement

00:29:14.340 --> 00:29:15.990
where you're in this mode,
you can't get out.

00:29:16.040 --> 00:29:19.820
You just have to use mission control
or just simply swipe left and

00:29:19.820 --> 00:29:21.880
right and get out into other apps.

00:29:22.100 --> 00:29:26.760
So it's both distraction-free but also
very easy to get back to other things.

00:29:26.820 --> 00:29:28.940
To enable full screen.

00:29:28.940 --> 00:29:32.330
. It's not enabled by default
for your applications.

00:29:32.400 --> 00:29:35.010
To enable it, you specify which
applications -- I'm sorry,

00:29:35.010 --> 00:29:38.230
which Windows in your application
you would like to go to full screen.

00:29:38.270 --> 00:29:41.430
You simply call this method on
this window to specify which

00:29:41.430 --> 00:29:43.340
Windows can go into full screen.

00:29:43.340 --> 00:29:45.650
Or better yet,
you can use interface builder

00:29:45.660 --> 00:29:48.820
and in the window inspector just
change the full screen mode of

00:29:48.840 --> 00:29:52.510
your window to primary window or
auxiliary window as appropriate.

00:29:52.560 --> 00:29:55.760
After you do this,
you would also go ahead and

00:29:55.790 --> 00:29:59.380
add a menu item to your app,
enter full screen.

00:29:59.760 --> 00:30:02.530
And you can also think about
customizing the size of the

00:30:02.530 --> 00:30:05.030
window when in Full-screen,
what the animation looks

00:30:05.140 --> 00:30:07.380
like going into Full-screen,
and what the layout looks

00:30:07.380 --> 00:30:08.540
like in Full-screen.

00:30:08.540 --> 00:30:11.770
Some apps like, for instance,
Preview has done an exemplary

00:30:11.770 --> 00:30:13.510
job of how to use Full-screen.

00:30:13.590 --> 00:30:19.150
So they had to write
some extra code there,

00:30:19.150 --> 00:30:19.150
but they do a very good job
of utilizing Full-screen.

00:30:19.510 --> 00:30:22.780
The Full-screen Akua Changes talk,
which is tomorrow morning,

00:30:22.790 --> 00:30:25.190
will go into more depth here.

00:30:25.600 --> 00:30:28.100
So scrolling changes,
you've again heard about

00:30:28.190 --> 00:30:29.120
some of these yesterday.

00:30:29.120 --> 00:30:33.500
We now do inverted scrolling and soon we
will stop calling it inverted I think,

00:30:33.500 --> 00:30:38.760
but it's effectively where you are moving
the content rather than the scroll bar.

00:30:38.760 --> 00:30:42.970
Elastic scrolling where your
content bounces off the edges

00:30:42.990 --> 00:30:45.500
sort of like rubber banding.

00:30:45.500 --> 00:30:50.060
Fluid swipes where, you know,
that gives you the ability to scroll,

00:30:50.120 --> 00:30:52.230
scroll,
and then have the scrolls come with the

00:30:52.290 --> 00:30:54.380
swipes if you're at the end of the page.

00:30:54.380 --> 00:30:56.310
Preview and Safari make use of this.

00:30:56.310 --> 00:30:58.820
You might have seen the demo yesterday.

00:30:58.820 --> 00:31:03.550
And finally, overlay scrollers which,
again, I hope you've seen already.

00:31:03.830 --> 00:31:06.800
Overlay scrollers are scrollers
which appear when needed and they

00:31:06.910 --> 00:31:09.670
don't take space away from content.

00:31:09.670 --> 00:31:15.570
Here is a web page with a scroll
with the Aqua snow leopard scrollers.

00:31:16.020 --> 00:31:18.610
They're beautiful, lickable,
but they do take away space and they're

00:31:18.700 --> 00:31:20.360
visually they can get distracting.

00:31:20.360 --> 00:31:22.540
With overlay scrollers you
get this much more mute.

00:31:22.700 --> 00:31:26.460
They're also somewhat transparent.

00:31:26.460 --> 00:31:29.160
And of course,
when you're not using them, they go away.

00:31:29.160 --> 00:31:32.010
So this gives you more of your
content and less distraction.

00:31:32.210 --> 00:31:35.570
Now you can go to scrolling, swiping,
dragging,

00:31:35.680 --> 00:31:38.940
now with more animation which will
talk about the various APIs your

00:31:38.940 --> 00:31:43.890
applications can use to customize
or opt into these features.

00:31:45.140 --> 00:31:50.500
Multi-image dragging is new
APIs to give you more control

00:31:50.500 --> 00:31:53.290
over dragging multiple items.

00:31:53.440 --> 00:31:56.830
And you can have customizable
look for this dragging and

00:31:57.120 --> 00:31:58.670
customizable flocking behaviors.

00:31:58.670 --> 00:32:00.380
You might have seen this
in Action in Finder,

00:32:00.380 --> 00:32:01.680
and let me show you a quick movie.

00:32:01.680 --> 00:32:04.300
Here are two Finder windows
and a TextEdit window.

00:32:04.300 --> 00:32:08.300
So we're dragging three
items from the top window.

00:32:08.300 --> 00:32:09.430
There we go.

00:32:09.460 --> 00:32:12.520
You can see that they change
depending on the content they're on.

00:32:12.630 --> 00:32:14.460
In the TextEdit window,
you just see the image,

00:32:14.460 --> 00:32:16.510
and once they're dropped,
things just arrange and

00:32:16.510 --> 00:32:18.120
everything animates into place.

00:32:18.250 --> 00:32:20.740
You can actually try this in
Finder today if you'd like.

00:32:20.840 --> 00:32:25.840
There are three new classes here,
and there's two formalized protocols.

00:32:25.940 --> 00:32:27.240
These used to be informal protocols.

00:32:27.240 --> 00:32:31.260
Now they're formalized that help you
achieve a lot of these new behaviors,

00:32:31.260 --> 00:32:33.420
and you can customize them in many ways.

00:32:33.500 --> 00:32:38.290
The scrolling talk tomorrow, scrolling,
swiping, dragging tomorrow afternoon at

00:32:38.330 --> 00:32:40.960
3.15 will go into more depth here.

00:32:40.960 --> 00:32:45.120
And this popover is a pop-up
window for transient content.

00:32:45.120 --> 00:32:50.820
If you used or programmed the iPad,
you've undoubtedly seen or you used.

00:32:50.860 --> 00:32:54.320
So here's what a popover might look like.

00:32:54.450 --> 00:32:55.400
Here's a regular window.

00:32:55.450 --> 00:32:56.820
The user hits the Start button.

00:32:56.820 --> 00:32:58.320
And here a popover comes up.

00:32:58.320 --> 00:33:00.740
In this case,
it's including a date picker.

00:33:00.740 --> 00:33:03.900
The user chooses the date they want,
and the popover just goes away.

00:33:03.900 --> 00:33:05.550
You know, it's very transient.

00:33:05.550 --> 00:33:08.150
It's sort of like a pop-up menu,
except you can have any

00:33:08.150 --> 00:33:12.890
view as its content,
not just limited to menu items.

00:33:13.000 --> 00:33:16.360
So it can host any view,
and if your application allows it,

00:33:16.360 --> 00:33:19.030
popovers can also be
detached by the user.

00:33:19.050 --> 00:33:20.470
They can actually grab that.

00:33:20.910 --> 00:33:22.960
and move it aside.

00:33:24.080 --> 00:33:26.730
Now, there's a talk for popovers as well.

00:33:27.080 --> 00:33:30.110
Full-screen and Aqua changes
talk tomorrow morning will

00:33:30.110 --> 00:33:33.020
cover popovers in more depth.

00:33:34.590 --> 00:33:38.580
So, next topic, view-based table views.

00:33:38.590 --> 00:33:41.750
As you know,
table views and outline views host cells.

00:33:41.910 --> 00:33:45.200
And, you know, whenever you want to put
something in a table,

00:33:45.200 --> 00:33:46.610
you have to create a cell version.

00:33:46.620 --> 00:33:48.840
And this is the main reason
why we had cell versions of

00:33:48.900 --> 00:33:50.140
various controls we have.

00:33:50.220 --> 00:33:52.060
Well, now they can host NS views.

00:33:52.060 --> 00:33:54.190
This, of course,
gives you a lot more flexibility.

00:33:54.320 --> 00:33:56.010
You can create complex elements.

00:33:56.020 --> 00:33:58.820
You don't have to worry
about making them into cells.

00:33:58.820 --> 00:34:02.300
Various interactions such as drag
and drop work much more naturally.

00:34:02.300 --> 00:34:05.700
So, this is a great--very good change.

00:34:05.730 --> 00:34:08.020
And there are two new classes,
NS table row view,

00:34:08.020 --> 00:34:11.070
which is the main class
that makes this happen,

00:34:11.240 --> 00:34:13.830
and NS table cell view,
which you can use if

00:34:13.830 --> 00:34:15.770
you're--if appropriate.

00:34:17.710 --> 00:34:20.000
Now, TableView has other changes.

00:34:20.050 --> 00:34:21.700
They're now much more animated.

00:34:21.750 --> 00:34:24.800
With view-based TableViews,
animations are pretty much automatic,

00:34:24.930 --> 00:34:28.060
but you can even animate the
cell-based TableViews if you use

00:34:28.270 --> 00:34:30.260
a few of the new APIs we provided.

00:34:30.260 --> 00:34:33.780
TableView sports multi-image
dragging out of the box and

00:34:33.780 --> 00:34:37.740
also allows floating group rows,
which allow you to create new style

00:34:38.120 --> 00:34:41.800
sidebars with the rows that sort
of move with the sidebar and stop.

00:34:42.850 --> 00:34:48.220
There's a talk for TableView,
view-based TableView, Thursday morning,

00:34:48.220 --> 00:34:52.060
and you can hear our resident
world champion marathon unicyclist,

00:34:52.110 --> 00:34:55.410
Corbin Dunn,
give you demos and examples of TableView.

00:34:57.770 --> 00:35:03.500
Just a quick note about resolution
independence and architecture update.

00:35:03.500 --> 00:35:07.540
Resolution independence,
we've extended the model we had,

00:35:07.540 --> 00:35:10.940
the device-independent quartz model,
to screens.

00:35:10.970 --> 00:35:13.310
What this means is that

00:35:13.860 --> 00:35:16.430
Screen size and window
frames are now in points.

00:35:16.510 --> 00:35:18.640
If you've used resolution
independence before,

00:35:18.640 --> 00:35:25.100
you probably know that window coordinates
were provided as or specified as pixels.

00:35:25.100 --> 00:35:26.510
Well, now they're specified as points.

00:35:26.560 --> 00:35:29.300
What this change means is that
a lot more applications are

00:35:29.300 --> 00:35:32.780
now compatible with resolution
independence without any changes.

00:35:32.790 --> 00:35:34.970
And the good news is any
changes you might have made

00:35:34.970 --> 00:35:37.970
for resolution independence
still are very applicable and,

00:35:37.970 --> 00:35:39.580
of course, continue to work.

00:35:40.850 --> 00:35:42.240
And our goal here remains the same.

00:35:42.240 --> 00:35:45.340
We still want Cocoa applications
to opt in or not opt in.

00:35:45.340 --> 00:35:48.100
We want them to automatically
work with resolution independence,

00:35:48.100 --> 00:35:51.060
of course, and only in cases where
things aren't working,

00:35:51.110 --> 00:35:52.450
we will opt them out.

00:35:53.100 --> 00:35:56.000
Another simplifying factor
is that Display is now

00:35:56.000 --> 00:36:00.200
configured for 2x resolution,
which also simplifies things.

00:36:00.200 --> 00:36:02.280
You don't have to worry about
non-integral values anymore.

00:36:02.280 --> 00:36:06.050
And you would enable this through Quartz
Debug today if you want to play with it.

00:36:06.180 --> 00:36:09.000
In Quartz Debug,
there's a UI resolution panel.

00:36:09.000 --> 00:36:12.550
You would check this checkbox,
enable high DPI modes.

00:36:12.640 --> 00:36:15.330
And once you do that,
both in System Preferences

00:36:15.420 --> 00:36:18.230
in the Display Prefs pane
and in the Displays menu,

00:36:18.230 --> 00:36:21.300
you start getting these
additional resolutions.

00:36:21.480 --> 00:36:23.870
For instance, here,
this is what a 24-inch cinema

00:36:23.870 --> 00:36:25.020
display would look like.

00:36:25.110 --> 00:36:26.440
I'm sorry, 27-inch.

00:36:26.440 --> 00:36:31.390
It's 2560x1440, but in high DPI,
it's effectively 1280x720.

00:36:31.410 --> 00:36:34.640
So the screen resolutions are actually
specified in points once you do this.

00:36:34.640 --> 00:36:37.920
You can hear more about resolution
independence at the Full-screen

00:36:37.920 --> 00:36:40.180
Aqua Changes talk still tomorrow morning.

00:36:42.570 --> 00:36:46.810
With that, I'd like to invite Akie Inoue
on stage to talk about some

00:36:46.830 --> 00:36:49.090
of the Cocoa text changes.

00:36:51.210 --> 00:36:54.450
Thank you, Ali.

00:36:54.630 --> 00:36:55.840
Good morning.

00:36:55.850 --> 00:37:01.400
I'm Aki Inoue from Cocoa Group,
or simply the text guy.

00:37:02.510 --> 00:37:06.130
It's mind-boggling to
see so many new features,

00:37:06.130 --> 00:37:06.940
right?

00:37:07.020 --> 00:37:09.820
Well,
it's the same with the Cocoa Tech System.

00:37:10.040 --> 00:37:14.480
The Lion Tech System is packed
with exciting new features.

00:37:14.570 --> 00:37:19.030
Let's get started with Text Finder.

00:37:19.320 --> 00:37:24.740
The Text Finder is a new set
of API providing extended text

00:37:24.800 --> 00:37:28.250
searching capability and UI.

00:37:29.510 --> 00:37:35.470
In addition to the existing Find panel,
it now supports the Find bar you're

00:37:35.590 --> 00:37:38.930
familiar with Xcode and Safari.

00:37:42.900 --> 00:37:47.200
and it's designed with incremental
search in mind from start.

00:37:47.220 --> 00:37:51.840
The text finder has built-in
advanced search options,

00:37:51.880 --> 00:37:56.560
including pattern matchings
from white space to as

00:37:57.160 --> 00:38:00.270
sophisticated as email address.

00:38:00.760 --> 00:38:03.040
Clicker.

00:38:03.050 --> 00:38:06.160
And of course,
all of these new functionalities

00:38:06.390 --> 00:38:09.910
are covered by the tech
system out of the box.

00:38:10.890 --> 00:38:16.490
In addition to that, we generalized the
Text Finder API so that

00:38:16.960 --> 00:38:22.900
works not only with NSX View,
but also with any client adopting

00:38:22.900 --> 00:38:25.470
a protocol from this system.

00:38:27.070 --> 00:38:30.140
As I mentioned,
all the functionality of the Text Finder

00:38:30.140 --> 00:38:32.540
is supported by the text system.

00:38:32.630 --> 00:38:35.700
For example, it's easy.

00:38:35.820 --> 00:38:41.520
to enable FindVar for text
view in your applications.

00:38:41.700 --> 00:38:46.660
Sending set uses FindBar with
ES switches the TextFinder

00:38:46.660 --> 00:38:50.240
UI from FindPanel to FindBar.

00:38:50.310 --> 00:38:54.390
Of course, you can do so using the Xcode.

00:38:59.960 --> 00:39:03.880
Underneath the tech system integration,
we have a controller

00:39:03.880 --> 00:39:06.140
class and two protocols.

00:39:06.140 --> 00:39:10.120
This is Text Finder,
the controller class orchestrates

00:39:10.520 --> 00:39:13.260
all the text searching capabilities.

00:39:13.260 --> 00:39:16.020
And Inspector Bar.

00:39:16.580 --> 00:39:22.340
Inspector Bar is a new UI element,
giving direct access to pages

00:39:22.420 --> 00:39:27.010
like text formatting options
right in your document window.

00:39:27.330 --> 00:39:31.980
Many of these options used to be
only available through auxiliary

00:39:31.980 --> 00:39:34.070
windows such as FontPano.

00:39:34.180 --> 00:39:39.070
It's integrated into the
Window Title Bar so that it gives

00:39:39.070 --> 00:39:46.140
you applications more modern look
and makes them full-screen savvy.

00:39:46.220 --> 00:39:49.900
There are many new improvements provided.

00:39:50.190 --> 00:39:58.130
Font menus, popovers for color settings,
context menu for text tabs,

00:39:58.270 --> 00:39:59.650
so on and so forth.

00:40:00.020 --> 00:40:05.190
And it replaces all the existing
functionalities provided by

00:40:05.190 --> 00:40:08.210
the text rule accessory view.

00:40:09.770 --> 00:40:14.460
You can enable the Inspector Bar using
setUsersInspectorBar.

00:40:14.460 --> 00:40:18.080
This is a new NS6 Mew API.

00:40:18.590 --> 00:40:24.140
and enabling Inspector Bar automatically
disables the existing

00:40:24.190 --> 00:40:28.110
Lula text accessory view.

00:40:29.250 --> 00:40:29.250
Again,

00:40:30.660 --> 00:40:35.640
You can use the Xcode to
change the setting too.

00:40:36.620 --> 00:40:39.440
Vertical text.

00:40:39.500 --> 00:40:42.370
Thank you.

00:40:43.620 --> 00:40:47.680
The Cocoa Tech System now supports
one of the most advanced typographic

00:40:47.790 --> 00:40:49.780
features right out of the box.

00:40:49.930 --> 00:40:54.310
It supports both displaying and writing.

00:40:55.110 --> 00:40:59.320
For Lion, we are focusing to
East Asian text layout,

00:40:59.360 --> 00:41:02.840
including Chinese, Japanese, and Korean.

00:41:03.010 --> 00:41:09.400
It's top to bottom and right to left,
meaning the text flows from top

00:41:09.400 --> 00:41:12.980
to bottom and the lines from

00:41:13.120 --> 00:41:15.000
Right to left.

00:41:15.030 --> 00:41:19.350
Note that the lines
are rotated 90 degrees,

00:41:19.350 --> 00:41:25.250
but the characters for Shizuke
languages are still displayed upright.

00:41:26.320 --> 00:41:29.270
We designed these
functionalities based on the

00:41:29.330 --> 00:41:33.410
Model View Controller design pattern,
just like the rest of the tech system,

00:41:33.410 --> 00:41:38.470
so that it gives us an open-ended
architecture flexible enough

00:41:38.610 --> 00:41:43.410
for future improvements and
customizability for your applications.

00:41:43.580 --> 00:41:48.910
For example, it's very easy to have
multi-layout orientation

00:41:49.350 --> 00:41:51.320
documents in your applications.

00:41:51.350 --> 00:41:54.450
You can have a text container,
a vertical text container,

00:41:54.530 --> 00:41:59.560
followed by a horizontal one
in a single layout manager.

00:42:00.920 --> 00:42:05.600
Changing the layout
orientation is straightforward.

00:42:05.770 --> 00:42:07.480
Set layout orientation.

00:42:07.480 --> 00:42:14.530
New NSX-View API duct takes either
NSX layout orientation horizontal

00:42:14.530 --> 00:42:18.200
or NSX layout orientation vertical.

00:42:18.230 --> 00:42:21.870
The users are allowed to change
this setting using the standard

00:42:21.930 --> 00:42:24.720
TextView context menu too.

00:42:24.760 --> 00:42:26.020
Not bad.

00:42:26.060 --> 00:42:32.150
What if I find this property can
affect some other NSX-View properties,

00:42:32.150 --> 00:42:36.760
such as bounce rotation or
resize direction settings?

00:42:36.780 --> 00:42:41.160
And also, if appropriate,
it might affect the enclosing

00:42:41.350 --> 00:42:43.420
scroll view settings too.

00:42:44.760 --> 00:42:52.300
Now then, let's take a look at those
new features in action.

00:42:52.300 --> 00:42:54.320
The machine, please.

00:42:56.850 --> 00:42:58.940
Thank you.

00:42:59.010 --> 00:43:01.730
OK, let's open the text edit document.

00:43:01.990 --> 00:43:05.910
This is a new text edit
with brand new look.

00:43:05.940 --> 00:43:11.610
You can change--

00:43:13.300 --> 00:43:18.600
[Transcript missing]

00:43:21.750 --> 00:43:24.680
Color, pretty neat.

00:43:24.710 --> 00:43:27.360
This is the Inspector Bar.

00:43:27.380 --> 00:43:30.550
And next, Text Finder.

00:43:31.870 --> 00:43:37.680
opened the Inspector Bar using
the standard Find Menu item.

00:43:40.810 --> 00:43:44.940
As I mentioned before,
the incremental search is

00:43:45.030 --> 00:43:47.020
right built into the system.

00:43:47.030 --> 00:43:50.830
And also,
the find indication is also integrated

00:43:50.930 --> 00:43:53.810
into the NS Text Finder protocol.

00:43:55.150 --> 00:44:01.710
Another improvement is the search wrap
around in Kishon is also built in.

00:44:03.900 --> 00:44:10.040
Let's open the standard search
menu and it contains various

00:44:10.040 --> 00:44:13.000
advanced search options.

00:44:13.020 --> 00:44:17.400
We have some search patterns
built into the system.

00:44:17.400 --> 00:44:22.640
And let's select email address
and it correctly selects email

00:44:22.740 --> 00:44:25.400
address in your documents.

00:44:29.220 --> 00:44:31.900
Now let's open a new document.

00:44:31.900 --> 00:44:36.200
And resize so that you can see.

00:44:37.900 --> 00:44:40.660
And let's change to Japanese input.

00:44:40.720 --> 00:44:43.740
Kore wa yokogaki desu.

00:44:43.740 --> 00:44:47.050
It says this is horizontal writing.

00:44:47.400 --> 00:44:51.140
Let's go to Format
Menu and select Vertical.

00:44:51.140 --> 00:44:59.320
And say, . It says, Vertical Writing.

00:44:59.320 --> 00:45:01.950
OK, let's go back to the slide.

00:45:06.950 --> 00:45:09.900
Other tech system enhancements.

00:45:09.940 --> 00:45:16.990
The tech system can now quick-click
attachments right out of blocks.

00:45:17.050 --> 00:45:19.170
And can display color emoji glyphs.

00:45:19.180 --> 00:45:25.710
And we enhanced the
dictionary content display.

00:45:28.190 --> 00:45:30.490
and many, many more.

00:45:30.900 --> 00:45:35.180
So for the complete list of the
Cocoa Tech System enhancements,

00:45:35.290 --> 00:45:37.980
please refer to the active release notes.

00:45:37.980 --> 00:45:42.480
And now let's get it back to my manager,
Ali Ozer.

00:45:42.480 --> 00:45:43.970
Thank you.

00:45:49.900 --> 00:45:51.500
Thank you, Akki.

00:45:51.500 --> 00:45:55.210
Okay, so now we're going to cover a
few remaining topics that we

00:45:55.340 --> 00:45:57.890
couldn't fit elsewhere in the talk.

00:45:58.580 --> 00:46:01.740
And first one, very important,
automatic reference counting.

00:46:01.790 --> 00:46:05.130
Hopefully you heard about this
and saw demos yesterday during

00:46:05.130 --> 00:46:06.930
the developer tools kickoff.

00:46:07.100 --> 00:46:10.590
Here, you're letting the compiler do
the dirty work of calling retain,

00:46:10.590 --> 00:46:12.140
release, and auto-release.

00:46:12.190 --> 00:46:13.740
Note that this works great online.

00:46:13.740 --> 00:46:16.110
It works great with
Cocoa applications in 10.7.

00:46:16.400 --> 00:46:19.310
And as announced yesterday,
this also is available

00:46:19.490 --> 00:46:21.500
for 10.6 applications.

00:46:21.500 --> 00:46:25.160
However, under 10.6,
the zeroing weak references

00:46:25.160 --> 00:46:26.430
are not available.

00:46:26.430 --> 00:46:26.780
That's just one caveat there.

00:46:27.040 --> 00:46:31.380
Now, here's one great item with Arc,
with automatic reference counting.

00:46:31.380 --> 00:46:35.330
Arc code can interoperate with
manual reference-counted code.

00:46:35.340 --> 00:46:37.490
So you don't have to convert
your whole application.

00:46:37.490 --> 00:46:39.160
You can convert half your application.

00:46:39.160 --> 00:46:42.840
If your application uses plugins,
those plugins don't have to be converted.

00:46:42.860 --> 00:46:45.960
They will work with your Arc code as is.

00:46:46.170 --> 00:46:51.290
So that's one great thing about Arc,
that the transition can be incremental,

00:46:51.510 --> 00:46:52.560
if you'd like.

00:46:52.840 --> 00:46:55.960
One other thing to note about
Arc is that we are not changing

00:46:55.990 --> 00:46:58.900
the treatment of outlets,
delegates, targets.

00:46:58.900 --> 00:47:00.750
Arc is not garbage collection.

00:47:00.770 --> 00:47:04.790
Arc does not detect and break cycles
like garbage collection would.

00:47:04.920 --> 00:47:08.140
So you still have to be careful when
you create your graphs of objects to

00:47:08.320 --> 00:47:12.140
specify which relationships are strong
and which relationships are weak.

00:47:12.220 --> 00:47:14.930
And once you've done that, you know,
Arc takes care of the rest.

00:47:15.470 --> 00:47:20.010
However, outlets, delegates, targets,
they should continue to be weak by

00:47:20.010 --> 00:47:22.560
default so that programs don't leak.

00:47:22.840 --> 00:47:24.810
Now, there's a talk for this.

00:47:24.810 --> 00:47:28.650
Introduction to automatic reference
counting this afternoon at 4.30.

00:47:28.650 --> 00:47:30.940
There's also an advanced
talk later in the week.

00:47:30.940 --> 00:47:32.220
I think it's on Friday.

00:47:35.500 --> 00:47:39.340
Core Data has a lot of
exciting changes in Lion.

00:47:39.340 --> 00:47:43.230
And its persistent document now has
Auto Save support out of the box,

00:47:43.260 --> 00:47:46.500
and also has iCloud
support out of the box.

00:47:46.570 --> 00:47:50.690
Core Data now has support for
ordered too many relationships.

00:47:51.020 --> 00:47:54.900
Yeah,
it was a--a lot of you asked for that.

00:47:55.000 --> 00:47:59.600
And there's also new concurrency
APIs and new incremental store APIs.

00:47:59.750 --> 00:48:03.660
And there's also new modeling
tools for Core Data in Xcode 4.

00:48:03.870 --> 00:48:07.920
We have two talks for Core Data.

00:48:08.010 --> 00:48:12.590
There's an iOS one this
afternoon and there's a

00:48:12.590 --> 00:48:12.590
Mac OS Core Data talk Thursday at 11:30.

00:48:13.630 --> 00:48:16.030
Now with that,
I just want to give a mini parade of

00:48:16.030 --> 00:48:21.240
some of the remaining features that
I didn't have time to talk about.

00:48:21.290 --> 00:48:23.300
So let's get the parade started.

00:48:23.350 --> 00:48:29.000
There is a new class
NSJSON serialization.

00:48:30.500 --> 00:48:33.230
This class lets you read
and write JSON files.

00:48:33.310 --> 00:48:37.820
It's very fast,
and the API is modeled after

00:48:37.970 --> 00:48:40.740
property-less serialization,
so it should be pretty familiar.

00:48:40.790 --> 00:48:41.570
We have this new class.

00:48:41.720 --> 00:48:44.810
This is the love child
of NS-array and NS-set.

00:48:44.890 --> 00:48:48.690
As you can imagine, this class,
NS-ordered-set, is used for ordered

00:48:48.690 --> 00:48:52.570
relationships and core data,
and it's generally usable.

00:48:52.830 --> 00:48:57.810
We have a bunch of new keys in NSURL for
additional file and volume properties.

00:48:57.900 --> 00:49:01.370
For instance, you can ask questions like,
is this volume ejectable, and so on.

00:49:01.510 --> 00:49:04.530
So a lot more of the APIs for
which you have to go to lower,

00:49:04.530 --> 00:49:08.100
a lot more of the questions for
which you have to go to a lower level

00:49:08.140 --> 00:49:10.400
are now available for you in NSURL.

00:49:11.440 --> 00:49:14.260
DistributeObject now has
support for keyed archiving.

00:49:14.620 --> 00:49:16.970
It used to be only the
old-style archiving,

00:49:16.970 --> 00:49:19.130
so you can use keyed archiving now.

00:49:19.140 --> 00:49:23.220
KeyValueObservers, the remove method now
takes a context argument,

00:49:23.220 --> 00:49:28.640
which lets you remove observances a lot
more exactly by specifying the context

00:49:28.640 --> 00:49:30.340
you provided at the time you added it.

00:49:30.340 --> 00:49:32.040
One person likes it.

00:49:32.100 --> 00:49:34.680
They got bitten by that.

00:49:34.790 --> 00:49:36.700
There are a lot of string
handling improvements.

00:49:36.700 --> 00:49:39.570
The new classes NS Regular Expression
and Stata Detector,

00:49:39.570 --> 00:49:42.500
these were added to iOS 4,
and now they're available

00:49:42.500 --> 00:49:44.150
in Lion as well,
and another new class,

00:49:44.150 --> 00:49:45.220
NS Linguistic Tagger.

00:49:45.220 --> 00:49:52.930
You can hear about these
string handling changes in the

00:49:52.930 --> 00:49:52.930
Advanced Text Processing talk,
which is Thursday afternoon at 3:15.

00:49:53.530 --> 00:49:57.580
Last but not least,
we have some week-based calendar

00:49:57.580 --> 00:49:59.920
improvements in NS Calendar.

00:50:00.280 --> 00:50:02.770
We also have a talk about calendars,
performing calendar

00:50:02.870 --> 00:50:05.140
calculations Wednesday at 4:30.

00:50:05.210 --> 00:50:10.750
Turns out the world of calendars
and handling dates and times is

00:50:11.180 --> 00:50:14.340
Very deep, sophisticated,
and just amazing.

00:50:14.480 --> 00:50:18.150
So I encourage you to attend this talk
and find out all about the intricacies

00:50:18.150 --> 00:50:19.970
of dealing with calendars properly.

00:50:20.260 --> 00:50:22.980
Tomorrow afternoon at 4:30.

00:50:23.300 --> 00:50:26.020
Now a mini parade of AppKit enhancements.

00:50:26.070 --> 00:50:29.940
There's Apple Push notifications,
which let you badge your dock

00:50:30.000 --> 00:50:31.920
items of your applications.

00:50:32.250 --> 00:50:34.700
We have much more
Finder-like Open Save panels.

00:50:34.700 --> 00:50:37.690
If you use Open Save panels in Lion,
you notice that they're almost

00:50:37.690 --> 00:50:38.960
the same as Finder Windows.

00:50:39.060 --> 00:50:42.720
That's because they share the exact
same underlying frameworks now.

00:50:42.840 --> 00:50:45.340
So they're very similar in behavior.

00:50:45.400 --> 00:50:48.890
Windows now animate when
opening and closing by default,

00:50:48.890 --> 00:50:51.540
and you can customize these behaviors.

00:50:51.590 --> 00:50:56.450
There's support for
application sandboxing.

00:50:56.450 --> 00:50:56.450
You heard about sandboxing yesterday.

00:50:56.660 --> 00:51:03.250
Classes like NS Document and Open and
Save Panels do a lot of work beneath

00:51:03.250 --> 00:51:07.690
the covers to make sure that your
application can access the documents

00:51:07.690 --> 00:51:11.520
and files that the user wanted your
application to access and nothing more.

00:51:11.540 --> 00:51:14.830
So there's a lot of work to make sure
that those things work seamlessly.

00:51:14.890 --> 00:51:17.880
You know, a document-based app needs to
be able to open its documents,

00:51:17.880 --> 00:51:19.880
it needs to be able to
open its recent documents,

00:51:19.880 --> 00:51:22.570
it needs to be able to open
all its versions and so on,

00:51:22.710 --> 00:51:26.770
while not letting, you know,
bad code touch any other files

00:51:26.770 --> 00:51:28.480
that the user might have.

00:51:28.560 --> 00:51:30.720
So there's a lot of changes
underneath the covers there.

00:51:32.610 --> 00:51:37.450
We have better debugging of exceptions,
a new facility for debugging exceptions.

00:51:37.510 --> 00:51:40.960
If you set this user default,
it will cause an alert to

00:51:41.070 --> 00:51:44.400
be popped up whenever your
application raises an exception,

00:51:44.400 --> 00:51:46.940
showing you the backtrace
that raised the exception.

00:51:46.940 --> 00:51:51.100
So this will allow you to catch
exceptions right when they occur.

00:51:51.100 --> 00:51:53.700
I mean, as you know, in Cocoa,
we use exceptions for programming errors,

00:51:53.700 --> 00:51:56.180
and this will allow you to catch
programming errors a lot earlier.

00:51:56.180 --> 00:51:58.320
So we definitely encourage you
to set this default during the

00:51:58.750 --> 00:52:00.730
development phase of your application,
and just run with it.

00:52:00.730 --> 00:52:01.930
It's harmless otherwise.

00:52:04.150 --> 00:52:07.360
And again, last but not least,
Accessibility.

00:52:07.450 --> 00:52:10.390
One big thing with Accessibility,
of course, is that all these features

00:52:10.440 --> 00:52:14.710
that we've been showing you,
Versions UI, all the other changes,

00:52:14.780 --> 00:52:17.080
Full-screen, et cetera,
these are all accessible.

00:52:17.170 --> 00:52:19.510
So we have to keep Accessibility
going and making sure the

00:52:19.510 --> 00:52:22.520
system remains accessible as all
these new features are added.

00:52:22.550 --> 00:52:25.310
And then we also have a talk,
Design Patterns to

00:52:25.320 --> 00:52:28.320
Simplify Mac Accessibility,
Thursday afternoon at 3:15,

00:52:28.380 --> 00:52:30.080
where we'll talk about
some of the Lion changes.

00:52:30.170 --> 00:52:34.100
We'll also give you some
overview about Accessibility.

00:52:34.100 --> 00:52:36.870
And I would recommend,
if there's one Accessibility

00:52:36.880 --> 00:52:39.680
talk you go to at WWDC,
I recommend it be this one.

00:52:40.020 --> 00:52:43.130
There's a little bonus, too,
in this talk.

00:52:44.050 --> 00:52:47.400
Okay, so a summary.

00:52:47.710 --> 00:52:50.100
There's many user and
developer features in 10.7,

00:52:50.100 --> 00:52:52.630
and some of them are automatic
and some of them are opt-in.

00:52:52.630 --> 00:52:58.280
You know, Auto Save, Resume,
Automatic Termination, of course, iCloud,

00:52:58.280 --> 00:52:59.360
huge new feature.

00:52:59.360 --> 00:53:03.030
Full-screen, again,
many applications can benefit from this.

00:53:03.030 --> 00:53:06.070
Gestures, many ways to use gestures,
you know,

00:53:06.070 --> 00:53:08.790
swipes and multi-image dragging, so on.

00:53:08.810 --> 00:53:10.890
And Auto Layout,
an amazing new feature for

00:53:10.950 --> 00:53:13.960
making sure your layouts are
a lot more easily localizable.

00:53:14.000 --> 00:53:15.470
A lot more flexible, and so on.

00:53:15.470 --> 00:53:17.670
You know,
we encourage you to take a look at

00:53:17.730 --> 00:53:21.700
these and all the other features
and adopt them in your applications.

00:53:21.700 --> 00:53:23.480
And there's tons more.

00:53:23.480 --> 00:53:25.430
You can read about these
in our release notes,

00:53:25.430 --> 00:53:28.330
which, you know, our release notes will
never win a beauty contest,

00:53:28.390 --> 00:53:30.530
those of you who've read it,
but they're chock full

00:53:30.530 --> 00:53:31.550
of good information.

00:53:31.550 --> 00:53:33.990
We usually focus on content
rather than beauty with them,

00:53:34.050 --> 00:53:36.430
but we have release notes
for AppKit and Foundation.

00:53:36.430 --> 00:53:39.930
You can search our header files if
you'd like to read header files.

00:53:39.930 --> 00:53:42.260
You can search for 10 under bar 7.

00:53:42.260 --> 00:53:47.360
We have available macros and
also deprecated macros for

00:53:47.360 --> 00:53:50.080
dear departed APIs that you
should not be using anymore.

00:53:50.080 --> 00:53:51.960
And, of course, documentation.

00:53:51.960 --> 00:53:54.450
A lot of the things we talked
about have been documented,

00:53:54.550 --> 00:53:57.630
and you can get a lot more
in-depth information by reading

00:53:57.630 --> 00:53:59.070
the appropriate documentation.

00:53:59.680 --> 00:54:01.540
Bill Dutney is our evangelist.

00:54:01.540 --> 00:54:06.060
Email him if you have a
question or just like to chat.

00:54:06.300 --> 00:54:08.440
Documentation, here's where you can get
to the documentation.

00:54:08.440 --> 00:54:11.690
Of course, developer forums are
also available to you.

00:54:11.930 --> 00:54:13.960
Now I want to give you sort
of a recap of related sessions

00:54:13.960 --> 00:54:15.600
and also point you at the labs.

00:54:15.780 --> 00:54:18.400
Today we have three talks,
the one right after

00:54:18.410 --> 00:54:19.580
this Cocoa Auto Layout.

00:54:19.850 --> 00:54:21.540
In this afternoon,
Auto Save and Versions and

00:54:21.540 --> 00:54:23.180
Taking Advantage of File Coordination.

00:54:23.190 --> 00:54:26.780
Tomorrow we have Full-screen
Aqua changes in the morning and then

00:54:26.780 --> 00:54:31.680
the scrolling talk in the afternoon and
the calendar talk also in the afternoon.

00:54:31.680 --> 00:54:34.510
And on Thursday,
we have Resume and Automatic Termination,

00:54:34.510 --> 00:54:36.800
View-based Table View,
What's New in Core Data,

00:54:36.800 --> 00:54:39.250
Advanced Text Processing,
and Accessibility Talks

00:54:39.250 --> 00:54:40.410
throughout the day.

00:54:40.450 --> 00:54:43.600
And with that, I thank you.