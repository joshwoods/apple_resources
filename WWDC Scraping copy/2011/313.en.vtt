WEBVTT

00:00:14.560 --> 00:00:16.920
I'm Rick Ballard,
and my associate Chris Hanson and

00:00:16.920 --> 00:00:19.000
I are engineers on the Xcode team.

00:00:19.140 --> 00:00:22.920
Today's presentation is going to give
you the basics that you need to work in

00:00:22.920 --> 00:00:27.980
Xcode and go in-depth on some advanced
ways to customize your workflow.

00:00:28.030 --> 00:00:33.340
Everything we talk about today is going
to revolve around one central concept:

00:00:33.470 --> 00:00:35.170
schemes.

00:00:36.110 --> 00:00:39.760
Whether your ambitions are world
domination or just a polished product,

00:00:39.840 --> 00:00:42.780
you're going to need to
use schemes to get there.

00:00:43.150 --> 00:00:46.640
In Xcode, Scheme is the object that
you use to perform the five

00:00:46.640 --> 00:00:51.050
Scheme actions on your product:
run, test, profile,

00:00:51.070 --> 00:00:56.440
analyze your source code,
and archive for distribution.

00:00:56.560 --> 00:01:00.100
When you choose one of these actions,
Xcode will build the targets

00:01:00.640 --> 00:01:04.390
needed to produce your product,
and then will perform the

00:01:04.390 --> 00:01:06.360
chosen action on your product.

00:01:06.480 --> 00:01:09.420
So, schemes are the tool that you
use to configure and perform

00:01:09.510 --> 00:01:12.800
all your actions in Xcode,
and that's why it's the central

00:01:12.910 --> 00:01:14.930
topic of today's presentation.

00:01:15.500 --> 00:02:34.200
[Transcript missing]

00:02:34.560 --> 00:02:38.130
Furthermore, a workspace allows implicit
dependencies to be resolved between

00:02:38.130 --> 00:02:40.260
the targets in that workspace.

00:02:40.310 --> 00:02:43.130
What an implicit dependency is,
is if you have one target

00:02:43.470 --> 00:02:47.420
which links against a product,
and another target in a project in the

00:02:47.470 --> 00:02:51.040
same workspace produces that product,
even if you haven't set up an

00:02:51.100 --> 00:02:54.300
explicit dependency from the
first target to the second target,

00:02:54.350 --> 00:02:57.940
Xcode will notice that the first target
does depend on the product of the second,

00:02:58.010 --> 00:03:00.940
and will create an implicit
dependency for you.

00:03:00.980 --> 00:03:03.260
That means that whenever
you build the first target,

00:03:03.310 --> 00:03:06.600
Xcode will automatically build the
second target first to make sure

00:03:06.770 --> 00:03:08.730
that its product is available.

00:03:09.310 --> 00:03:11.410
There's one more important
thing to know about workspaces,

00:03:11.410 --> 00:03:15.760
and that's even if you don't create an
explicit workspace document in Xcode,

00:03:15.820 --> 00:03:18.340
every time you open up a
project and work with it,

00:03:18.370 --> 00:03:19.460
you still have a workspace.

00:03:19.460 --> 00:03:23.900
When you open up a standalone project,
Xcode creates an implicit workspace

00:03:23.970 --> 00:03:27.290
for it behind the scenes and
actually stashes a workspace

00:03:27.350 --> 00:03:29.600
file inside that project wrapper.

00:03:29.600 --> 00:03:32.250
That means that when you work
with a standalone project,

00:03:32.250 --> 00:03:35.200
you still have all the benefits
of working with a workspace,

00:03:35.560 --> 00:03:39.130
and that includes a unique symbol index,
a unique location for build products,

00:03:39.130 --> 00:03:39.680
and more.

00:03:39.680 --> 00:03:44.640
Today, whenever I talk about a workspace,
you can assume that the same

00:03:44.640 --> 00:03:47.200
thing applies if you're working
with a standalone project.

00:03:49.980 --> 00:03:52.640
Let's talk a little bit about projects.

00:03:52.710 --> 00:03:55.700
A project contains references
to your source files,

00:03:55.800 --> 00:04:00.140
targets which process those source
files to produce your product,

00:04:00.270 --> 00:04:04.450
schemes which cause those targets
to build and then perform actions

00:04:04.590 --> 00:04:11.780
on the products of those targets,
and build configurations which collect

00:04:11.780 --> 00:04:11.780
and organize your build settings.

00:04:12.390 --> 00:04:16.300
By default, projects come with debug and
release build configurations,

00:04:16.390 --> 00:04:19.650
and all the build settings in the
project and target are organized

00:04:19.650 --> 00:04:21.620
into those build configurations.

00:04:21.730 --> 00:04:24.800
If you need a new set of build
settings for some specific purpose,

00:04:24.960 --> 00:04:27.140
you can always define a
new build configuration.

00:04:27.270 --> 00:04:30.220
But for most of you,
you'll be able to get away fine

00:04:30.220 --> 00:04:32.260
with just debug and release.

00:04:32.870 --> 00:04:35.320
If you go to the project editor,
which you can get at by

00:04:35.320 --> 00:04:38.440
selecting a project in the
project navigator on the left,

00:04:38.440 --> 00:04:41.150
and then making sure that the
project is selected in the middle,

00:04:41.350 --> 00:04:47.410
you can see the build configurations in
your project and add new ones as needed.

00:04:47.640 --> 00:04:50.970
So let's talk about the
targets in your project.

00:04:53.860 --> 00:04:58.800
A target is fundamentally the
instructions for building one product.

00:04:58.870 --> 00:05:02.000
It references some or all of the
source files in your project,

00:05:02.150 --> 00:05:05.400
and it contains build phases,
which are an ordered sequence of

00:05:05.500 --> 00:05:09.360
steps that the target takes in
order to produce your product.

00:05:09.540 --> 00:05:12.740
There are a set of build rules
that determine how the compile

00:05:12.740 --> 00:05:16.560
sources build phase processes
the source files in the target.

00:05:16.730 --> 00:05:20.370
And you have a set of build
settings which configure just about

00:05:20.370 --> 00:05:22.720
every aspect of the build process.

00:05:22.960 --> 00:05:26.870
Finally, every target can depend on
one or more other targets.

00:05:26.980 --> 00:05:30.030
And if it depends on another target,
whenever the first target builds,

00:05:30.060 --> 00:05:33.030
the dependent target will build first.

00:05:33.670 --> 00:05:36.970
You can edit your target settings
by going to the project editor

00:05:37.210 --> 00:05:40.240
and then selecting the target in
the middle that you want to edit.

00:05:40.300 --> 00:05:43.780
The summary tab gives you some of the
most frequently accessed settings that

00:05:43.790 --> 00:05:46.070
you want to change in your target.

00:05:46.760 --> 00:05:50.430
If you select the Build Phases tab,
you can see the ordered set of

00:05:50.450 --> 00:05:53.990
steps that the target is going
to take to produce your product.

00:05:54.090 --> 00:05:57.680
So let's talk about a few of the tasks
you might want to accomplish here.

00:05:57.740 --> 00:06:00.700
If you want to make your target
depend on another target,

00:06:00.810 --> 00:06:03.190
you can do so in the
Target Dependencies phase.

00:06:03.300 --> 00:06:06.250
If you click the plus button here,
you can add any dependent

00:06:06.250 --> 00:06:10.220
targets from among other targets
in this target's project,

00:06:10.280 --> 00:06:14.820
and other targets in projects
referenced by this target's project.

00:06:15.060 --> 00:06:17.960
If you don't see the target
that you want to depend on here,

00:06:18.020 --> 00:06:21.790
make sure that this target's project
references the project that contains

00:06:21.820 --> 00:06:24.200
the target you want to depend on.

00:06:24.930 --> 00:06:27.490
If you want to set
per-file compiler settings,

00:06:27.640 --> 00:06:30.600
you can do that in the
compile sources build phase.

00:06:30.710 --> 00:06:34.300
This phase also shows you all the source
files that your target is going to

00:06:34.320 --> 00:06:37.080
process in order to produce your product.

00:06:37.700 --> 00:06:40.880
If you want to make your product
link against a library or framework,

00:06:41.040 --> 00:06:43.640
you do that in the link
binaries with libraries phase.

00:06:43.750 --> 00:06:46.650
When you click the plus button,
you get to choose libraries to link from,

00:06:46.800 --> 00:06:48.370
from among three sources.

00:06:48.550 --> 00:06:53.800
First, you get all the libraries in the
SDK that this target links against.

00:06:53.970 --> 00:06:58.990
Second, any libraries referenced by this
target's project are available.

00:06:59.110 --> 00:07:04.340
And finally, any libraries in projects,
or produced by targets in projects

00:07:04.900 --> 00:07:09.200
that this target's project
references are also available.

00:07:09.880 --> 00:07:12.300
If you're producing a
framework or other library,

00:07:12.470 --> 00:07:14.800
you may have headers that you
want to install into the product,

00:07:14.980 --> 00:07:17.440
and you can do that in the
copy headers build phase.

00:07:17.550 --> 00:07:19.690
There are three build roles here,
and by dragging your

00:07:19.690 --> 00:07:22.240
headers between these roles,
you can configure what will

00:07:22.240 --> 00:07:23.890
happen with each of these headers.

00:07:24.030 --> 00:07:27.480
The public and private roles will
export these headers to the public

00:07:27.590 --> 00:07:31.110
and private locations in your product,
and the project role means that

00:07:31.110 --> 00:07:34.090
this header should not be exported
in your product and is only there

00:07:34.390 --> 00:07:36.930
for the project when it's building.

00:07:37.730 --> 00:07:41.450
If you have any resources, like artwork,
you can put them in a copy

00:07:41.510 --> 00:07:44.280
bundle resources phase,
and the target will copy them

00:07:44.350 --> 00:07:47.600
into the resources subdirectory
of your product when it builds.

00:07:47.710 --> 00:07:50.050
If you need to copy any other
files into your product as

00:07:50.140 --> 00:07:53.220
part of your build process,
you can define as many copy files

00:07:53.220 --> 00:07:57.560
build phases as you want and
configure them to put your resources

00:07:57.870 --> 00:08:00.120
wherever you want to put them.

00:08:00.660 --> 00:08:02.980
Finally, if there's anything you want
to do that isn't covered by

00:08:03.070 --> 00:08:06.280
these existing build phases,
you can create a run script build

00:08:06.280 --> 00:08:09.540
phase and use that to do anything
you can do with the script.

00:08:09.540 --> 00:08:12.770
All the target's environment or
build settings are exported as

00:08:12.770 --> 00:08:16.430
environment variables to the script,
which helps you configure powerful

00:08:16.430 --> 00:08:18.260
scripts that manipulate your products.

00:08:18.430 --> 00:08:21.530
And you can define as many of
these script phases as you want and

00:08:21.530 --> 00:08:23.530
drag them around to reorder them.

00:08:24.830 --> 00:08:28.650
The Build Rules tab shows you the
set of built-in rules that tell

00:08:28.650 --> 00:08:32.500
Xcode how to compile the sources
in your compile sources phase.

00:08:32.540 --> 00:08:35.240
If you have any special sort
of source files that you need

00:08:35.350 --> 00:08:38.400
to compile in a special way,
you can define a custom

00:08:38.470 --> 00:08:40.420
build rule here to do so.

00:08:40.530 --> 00:08:43.350
Now let's talk about the build
settings that control every

00:08:43.350 --> 00:08:45.060
aspect of your build process.

00:08:45.150 --> 00:08:47.730
In the Build Settings tab,
you'll see all the build settings

00:08:47.800 --> 00:08:49.160
that are affecting the target.

00:08:49.260 --> 00:08:51.560
And you'll notice that for
most of these build settings,

00:08:51.560 --> 00:08:53.260
there's just a single value listed.

00:08:53.360 --> 00:08:56.810
That means that all configurations
in this project have the same

00:08:56.810 --> 00:08:58.690
value for this build setting.

00:08:58.790 --> 00:09:01.170
Now some build settings
list multiple values,

00:09:01.310 --> 00:09:02.830
one for each configuration.

00:09:02.950 --> 00:09:05.940
For example, your optimization level,
well, you don't want to optimize

00:09:05.940 --> 00:09:07.890
when you're building for debug,
but you do when you're

00:09:07.890 --> 00:09:10.280
building for release,
so you have different values here.

00:09:10.370 --> 00:09:13.170
If you want to set a per configuration
value instead of sharing a

00:09:13.170 --> 00:09:16.640
value across all configurations,
you can hover over where the disclosure

00:09:16.640 --> 00:09:20.260
triangle is next to the build setting,
and all your configurations

00:09:20.260 --> 00:09:21.570
become available.

00:09:21.630 --> 00:09:21.820
Furthermore,
if you hover over one of the buildings,

00:09:21.820 --> 00:09:21.820
you can see that the configuration
level is set to the same value

00:09:21.820 --> 00:09:21.820
as the configuration level.

00:09:21.820 --> 00:09:21.820
If you want to set a per configuration
value instead of sharing a

00:09:21.820 --> 00:09:21.820
value across all configurations,
you can hover over where the disclosure

00:09:21.820 --> 00:09:21.820
triangle is next to the build setting,
and all your configurations

00:09:21.820 --> 00:09:21.820
become available.

00:09:21.820 --> 00:09:24.120
Furthermore, if you hover over one
of those configurations,

00:09:24.230 --> 00:09:28.450
a plus button will show up,
which you can click to add per SDK or

00:09:28.450 --> 00:09:32.810
per architecture build setting variants,
so those values would be used

00:09:32.940 --> 00:09:36.840
specially only when building for,
say, a specific SDK.

00:09:36.870 --> 00:09:40.000
There's another axis of configuration
to your build settings that's important,

00:09:40.050 --> 00:09:42.280
and that's the build setting levels.

00:09:42.310 --> 00:09:44.480
If you select the levels
bubble at the top,

00:09:44.480 --> 00:09:48.190
Xcode will show you a view that
shows the hierarchy from which your

00:09:48.190 --> 00:09:51.090
build settings are being inherited.

00:09:51.310 --> 00:09:55.430
On the left is the resolved column,
and that shows you the final value

00:09:55.490 --> 00:09:59.420
for each build setting that will be
used by this target when it builds.

00:09:59.530 --> 00:10:02.790
To the right of that are all the
build setting values that you've

00:10:02.790 --> 00:10:06.470
explicitly set at the target level,
and usually those will be

00:10:06.470 --> 00:10:08.220
the resolved values too.

00:10:08.370 --> 00:10:11.100
To the right of that are your
project-level build settings.

00:10:11.170 --> 00:10:13.700
In the project editor,
there's also a build settings tab,

00:10:13.870 --> 00:10:16.900
and any build settings you set
there will be inherited by all

00:10:17.080 --> 00:10:20.750
targets in that same project,
unless those targets override

00:10:20.840 --> 00:10:22.630
that build setting value.

00:10:23.060 --> 00:10:25.660
Finally, on the right,
Xcode shows you the default value

00:10:25.750 --> 00:10:28.960
for every build setting that will
be used if neither the target

00:10:28.960 --> 00:10:31.380
nor the project overrides it.

00:10:32.150 --> 00:10:34.870
You'll also notice that there are
some green bubbles in this view.

00:10:35.080 --> 00:10:38.090
Those green bubbles show you
where each build setting's

00:10:38.320 --> 00:10:41.450
final value is being taken from,
so you can quickly know

00:10:41.530 --> 00:10:43.190
where to go to edit it.

00:10:44.610 --> 00:10:45.510
So that's targets.

00:10:45.630 --> 00:10:48.230
Let's talk a little bit
more about what a scheme is.

00:10:48.320 --> 00:10:51.670
Schemes fundamentally have the
instructions for building your targets

00:10:51.750 --> 00:10:53.500
and performing actions on them.

00:10:53.600 --> 00:10:56.470
So schemes contain actions
for running your products,

00:10:56.470 --> 00:10:59.140
and that includes running
them in the debugger,

00:10:59.200 --> 00:11:03.400
running your tests,
profiling your product for performance,

00:11:03.610 --> 00:11:07.960
statically analyzing your source code,
and archiving your products away,

00:11:08.010 --> 00:11:10.460
which allows you to
distribute them later.

00:11:10.550 --> 00:11:13.780
For each of these actions,
your scheme contains a specification

00:11:13.780 --> 00:11:18.290
of the targets that the scheme should
build when performing that action.

00:11:18.750 --> 00:11:21.760
You can get at your schemes in
the upper left-hand corner menu,

00:11:21.760 --> 00:11:23.110
which is the Scheme pop-up.

00:11:23.360 --> 00:11:25.860
When you pop this up,
you'll see a list of all the

00:11:25.860 --> 00:11:28.210
shown schemes in this workspace.

00:11:28.330 --> 00:11:31.060
And if you choose the Edit Scheme
option from this pop-up,

00:11:31.080 --> 00:11:33.060
Xcode will bring down
the Scheme Editing Sheet,

00:11:33.210 --> 00:11:38.020
which is where you go to configure
all the aspects of your scheme.

00:11:38.300 --> 00:11:41.190
In the upper left-hand corner,
you can press the button to perform

00:11:41.190 --> 00:11:42.870
one of your selected scheme actions.

00:11:42.870 --> 00:11:45.380
And actually, handy tip:
if you hold down the Option key

00:11:45.380 --> 00:11:47.430
and press this button,
Xcode will bring down the

00:11:47.430 --> 00:11:50.440
scheme editing sheet for you,
which is sometimes a little faster than

00:11:50.450 --> 00:11:52.190
choosing Edit Scheme from the menu.

00:11:52.300 --> 00:11:55.200
If you hold down on this button,
you get four of the five scheme actions,

00:11:55.200 --> 00:11:58.700
so you can change that button to be the
action that you're performing most often.

00:11:58.740 --> 00:12:02.580
All five scheme actions are also
available in the Product menu.

00:12:03.730 --> 00:12:06.800
Well, when you perform a scheme action,
you also need to tell Xcode

00:12:06.960 --> 00:12:10.480
where to perform that action,
and that's the run destination.

00:12:10.600 --> 00:12:13.390
Your run destination has three parts.

00:12:13.510 --> 00:12:17.590
It incorporates the platform and
SDK that you want to build for,

00:12:17.710 --> 00:12:21.880
the device that you want to run on,
and on the Mac only,

00:12:22.010 --> 00:12:24.560
what architecture you want to target.

00:12:24.680 --> 00:12:28.620
You can get at your run destinations on
the right-hand side of the scheme pop-up.

00:12:28.730 --> 00:12:31.390
There you see all the run
destinations that are available

00:12:31.530 --> 00:12:32.910
with the selected scheme.

00:12:33.550 --> 00:12:36.740
What controls what run
destinations we put in that pop-up?

00:12:36.930 --> 00:12:39.990
For the platform and SDK,
you get to choose among those in

00:12:39.990 --> 00:12:43.580
platforms compatible with your
target's base SDK build setting,

00:12:43.960 --> 00:12:48.240
supported platforms build setting,
and deployment target build setting.

00:12:48.630 --> 00:12:51.780
For the device you want to run on,
you can choose among all the

00:12:51.780 --> 00:12:54.610
plugged-in devices that are
configured for development,

00:12:54.610 --> 00:12:56.810
all available simulators,
and the local Mac.

00:12:57.220 --> 00:13:01.490
But you only get devices that are
compatible with your selected SDK.

00:13:01.710 --> 00:13:04.310
Finally, on the Mac,
you can choose among architectures

00:13:04.440 --> 00:13:07.210
that are available in your target's
architectures build setting,

00:13:07.380 --> 00:13:10.900
but again, only architectures that are
compatible with the local Mac.

00:13:11.020 --> 00:13:13.760
For all these build settings,
we actually look at every target

00:13:14.130 --> 00:13:17.450
that's set to build for the scheme
and use the union of all run

00:13:17.450 --> 00:13:21.560
destinations that are available for
the build settings for each target.

00:13:25.290 --> 00:13:27.740
So that's about it for the
basic project concepts.

00:13:27.760 --> 00:13:30.240
I'm going to invite my colleague
Chris up to go into depth with

00:13:30.240 --> 00:13:32.200
you on the five scheme actions.

00:13:35.280 --> 00:13:36.650
Thank you, Rick.

00:13:41.340 --> 00:13:46.190
So as Rick described,
schemes support five main actions.

00:13:46.300 --> 00:13:50.550
You can run your application
to test it either without the

00:13:51.030 --> 00:13:53.800
debugger or under the debugger.

00:13:53.870 --> 00:13:55.880
You can run your unit tests.

00:13:55.940 --> 00:13:58.720
You can profile your
application's performance.

00:13:58.790 --> 00:14:03.790
You can analyze its source code,
and you can archive it for distribution.

00:14:04.270 --> 00:14:07.360
But you'll notice that
I didn't mention building.

00:14:07.430 --> 00:14:08.540
Why not?

00:14:08.610 --> 00:14:13.710
Well, a scheme builds targets,
but building isn't an action in itself.

00:14:13.940 --> 00:14:18.120
Instead, it's a step that's typically
performed before each action.

00:14:18.170 --> 00:14:21.100
You're always building with
a specific purpose in mind.

00:14:21.200 --> 00:14:26.110
So the action to perform actually
affects how you decide to build,

00:14:26.110 --> 00:14:31.130
how Xcode chooses which targets to build,
and which configuration

00:14:31.130 --> 00:14:32.850
in which to build them.

00:14:33.200 --> 00:14:36.430
Now, to preserve your muscle memory,
we have kept a build

00:14:36.490 --> 00:14:40.660
command in the product menu,
but that build command is really just

00:14:40.860 --> 00:14:43.300
an alias for "build for running."

00:14:44.680 --> 00:14:49.200
You configure building in the
build pane of the scheme editor.

00:14:49.260 --> 00:14:53.940
And you can see here that in the
bottom pane of the build pane,

00:14:53.990 --> 00:14:57.140
the bottom table of the build pane,
I should say,

00:14:57.760 --> 00:15:05.320
You can set both the targets to build and
what actions you wish to build them for.

00:15:05.460 --> 00:15:07.840
So, for example,
if you have a unit test target,

00:15:07.940 --> 00:15:11.800
typically you won't want to build
that for archiving because you're

00:15:11.910 --> 00:15:16.380
not going to distribute your unit
tests on the Mac or iOS app store.

00:15:17.320 --> 00:15:20.000
You can also configure
implicit dependencies,

00:15:20.000 --> 00:15:23.120
which as Rick described,
allows Xcode to figure out among

00:15:23.450 --> 00:15:27.110
all the projects in a workspace,
all the targets in a workspace,

00:15:27.220 --> 00:15:31.280
which depend on each other
without you explicitly telling it.

00:15:31.390 --> 00:15:35.160
And you can also tell Xcode
to parallelize your build to

00:15:35.160 --> 00:15:40.360
maximize its use of your multi-core
Mac Pro that I'm sure you all have.

00:15:42.290 --> 00:15:46.450
Now, in the build pane,
you don't actually choose a

00:15:46.510 --> 00:15:48.340
configuration to build for.

00:15:48.510 --> 00:15:53.830
Instead, you choose which configuration
to build for each action.

00:15:54.020 --> 00:15:59.570
Here we're looking at the test pane,
and you can choose which configuration

00:15:59.570 --> 00:16:01.380
to build for the test action.

00:16:01.380 --> 00:16:05.300
Let's dive right into running.

00:16:08.970 --> 00:16:14.060
When you run, you can choose which
executable you want to run.

00:16:14.100 --> 00:16:17.900
Now, by default, Xcode will create your
scheme actions for you,

00:16:18.090 --> 00:16:20.140
pre-configured for your application.

00:16:20.190 --> 00:16:22.500
But if you're building a
different type of product,

00:16:22.500 --> 00:16:26.360
like a plug-in for another application,
you'll want to actually choose which

00:16:26.440 --> 00:16:28.900
application to use when running.

00:16:28.970 --> 00:16:31.490
And similarly,
you might actually want to debug somebody

00:16:31.530 --> 00:16:34.700
else's command line tool or something
that you've built from the command line.

00:16:34.760 --> 00:16:39.360
And here this would allow you to create
a scheme and choose that to debug.

00:16:40.350 --> 00:16:42.820
You can, of course,
choose which configuration you

00:16:42.820 --> 00:16:44.060
want to build for debugging.

00:16:44.140 --> 00:16:46.940
By default, Xcode will build for debug.

00:16:47.040 --> 00:16:50.370
And you can choose which debugger
you actually want to use.

00:16:50.550 --> 00:16:54.600
You can use the traditional GDB debugger,
you can use our new

00:16:54.600 --> 00:16:57.450
LLDB low-level debugger,
or you can choose not to run

00:16:57.580 --> 00:17:02.290
under the debugger at all,
which can be useful if you need to run

00:17:02.290 --> 00:17:05.260
your new plugin for an application that,
say,

00:17:05.260 --> 00:17:07.810
you can't attach to with the debugger.

00:17:09.650 --> 00:17:14.850
You also can choose which arguments
to supply to your application or

00:17:14.850 --> 00:17:17.910
command line tool that you're running.

00:17:18.130 --> 00:17:20.850
Now, you'll typically want to do
this to supply sample data,

00:17:21.000 --> 00:17:24.440
to set user defaults,
and generally to supply

00:17:24.440 --> 00:17:28.490
additional information to your
application while testing it.

00:17:28.850 --> 00:17:34.650
And to help prevent you from hard coding
all sorts of things in your schemes,

00:17:34.650 --> 00:17:39.400
you can choose which target
in your scheme you want to

00:17:39.460 --> 00:17:41.790
take build settings from.

00:17:42.700 --> 00:17:45.980
Now you can actually refer to
build settings in your arguments

00:17:46.170 --> 00:17:51.380
and environment variables that you
supply when you run your application

00:17:52.440 --> 00:17:55.600
by using their all caps raw names.

00:17:55.730 --> 00:17:58.890
And you just reference them using
a simple shell-like syntax with a

00:17:58.970 --> 00:18:04.060
dollar sign and the all caps raw name
in curly braces or in parentheses

00:18:04.110 --> 00:18:06.270
as if you were in a make file.

00:18:07.450 --> 00:18:10.300
Now to see what the actual
all caps raw name is,

00:18:10.330 --> 00:18:13.140
you can control click on the
build setting in the build setting

00:18:13.840 --> 00:18:18.150
editor and choose show raw names,
or you can highlight it and just show the

00:18:18.150 --> 00:18:22.820
utility area and look at the quick look,
quick look, I'm sorry,

00:18:22.820 --> 00:18:24.740
quick help inspector.

00:18:25.340 --> 00:18:28.600
That quick help inspector in the
upper right will show you some

00:18:28.700 --> 00:18:32.180
documentation about the build setting,
as well as its all caps raw

00:18:32.180 --> 00:18:35.140
name that you can use both
in shell script build phases,

00:18:35.140 --> 00:18:37.670
like Rick described,
and in your arguments and

00:18:37.670 --> 00:18:39.430
environment variables.

00:18:39.460 --> 00:18:43.490
And here we've got one argument
to our application that

00:18:43.570 --> 00:18:47.640
turns on some debug logging,
and I've just decided to

00:18:48.020 --> 00:18:52.760
supply some sample data to this
application too for it to run with.

00:18:52.840 --> 00:18:55.250
And that sample data
is located in my build.

00:18:55.390 --> 00:18:56.640
And I'm going to use the
build products directory.

00:18:56.640 --> 00:19:00.450
So rather than hard code the path
into the scheme for everybody who's

00:19:00.520 --> 00:19:04.340
working on this project to see,
I'm using a build setting reference

00:19:04.340 --> 00:19:08.080
so that it follows wherever my
build products happen to go.

00:19:08.080 --> 00:19:11.530
And Rick will describe a little
bit more about that in a bit.

00:19:11.560 --> 00:19:14.620
There are some options you can
set when running your application.

00:19:14.620 --> 00:19:18.390
For Mac OS X, new and Lion,
you can choose whether or not to run your

00:19:18.720 --> 00:19:21.080
application with its persistent state.

00:19:21.250 --> 00:19:25.320
So if you have the production version
of your application on your system.

00:19:25.320 --> 00:19:27.120
And you're actually doing work with it.

00:19:27.130 --> 00:19:31.070
Lion is saving persistent
state about that application.

00:19:31.230 --> 00:19:34.070
Well, you're probably not going to want
to use that when you're debugging

00:19:34.070 --> 00:19:35.630
the new version of the application.

00:19:35.740 --> 00:19:39.670
So you can enable this and
Xcode will tell the application

00:19:39.800 --> 00:19:43.690
that while it's being debugged,
it should just ignore

00:19:43.690 --> 00:19:45.570
its persistent state.

00:19:45.860 --> 00:19:52.770
Now on iOS, new in iOS 5 with Xcode 4.2,
we have a couple of additional options.

00:19:52.890 --> 00:19:59.190
You can choose which location or
location track you want to use when

00:19:59.200 --> 00:20:02.500
you're testing your application.

00:20:02.670 --> 00:20:05.900
You can just do this using
the locations pop-up,

00:20:05.960 --> 00:20:08.640
which is pre-populated
with some common locations,

00:20:08.770 --> 00:20:14.110
and which will also show any GPX files
that you have in your project.

00:20:15.050 --> 00:20:19.290
And you can also pull some sample
data straight from an application

00:20:19.780 --> 00:20:24.040
on a device out using the organizer,
put it in your project,

00:20:24.110 --> 00:20:28.580
and then use it when you're
testing your application again,

00:20:28.700 --> 00:20:31.700
simply by choosing it from this pop-up.

00:20:32.900 --> 00:20:35.280
And finally,
we have some diagnostics that we

00:20:35.290 --> 00:20:38.680
have shortcuts for in the run pane,
because we don't want you to

00:20:38.810 --> 00:20:43.490
have to remember whether it's
NSZombieEnable or NSZombieEnabled,

00:20:43.490 --> 00:20:48.650
or what the command line
argument for memory debugging is,

00:20:48.740 --> 00:20:55.440
or how to turn on and off DYLD framework
and library loading information.

00:20:55.440 --> 00:20:59.990
So you can just turn all these things
on and off with simple check boxes.

00:21:00.040 --> 00:21:02.860
Xcode will supply the right
command line arguments and the

00:21:02.860 --> 00:21:06.270
right environment variables to
your application when it runs it.

00:21:07.340 --> 00:21:10.600
Now let's go into Xcode 4's
new unit testing support.

00:21:10.640 --> 00:21:16.880
Xcode natively supports the OC unit,
Objective-C unit testing framework.

00:21:16.880 --> 00:21:20.150
So this means your tests
are written in Objective-C.

00:21:20.380 --> 00:21:22.850
That doesn't mean you
can't test C++ code,

00:21:22.850 --> 00:21:23.120
too.

00:21:23.540 --> 00:21:25.970
You can get the best of both
worlds just by writing your

00:21:25.970 --> 00:21:28.010
unit tests in Objective-C++.

00:21:28.460 --> 00:21:31.760
Use the Objective-C side to interface
with the unit testing framework,

00:21:31.930 --> 00:21:35.110
and you can use the C++
side to test your C++ code.

00:21:36.010 --> 00:21:39.440
And new in Xcode 4,
your unit tests are actually run right

00:21:39.440 --> 00:21:41.280
under the debugger automatically.

00:21:41.440 --> 00:21:43.370
This means that if you
enable breakpoints,

00:21:43.370 --> 00:21:46.990
your unit tests will actually
hit breakpoints in the debugger

00:21:46.990 --> 00:21:50.040
while they're being run,
so you can debug them much more easily.

00:21:50.270 --> 00:21:52.510
There's no setup to do.

00:21:52.710 --> 00:21:57.060
And finally, your test failures,
in addition to showing up in a test log,

00:21:57.470 --> 00:22:01.680
will show up right as issues
in the issue navigator.

00:22:02.610 --> 00:22:04.360
Of course,
there's a little bit of configuration

00:22:04.360 --> 00:22:05.940
you can do with the test action.

00:22:05.950 --> 00:22:09.580
In addition to choosing which
configuration you want to build

00:22:09.580 --> 00:22:12.980
for your tests and which debugger
you want to run your tests under,

00:22:13.000 --> 00:22:15.300
you can also choose which tests to run.

00:22:15.560 --> 00:22:18.520
This can be really useful if
you only want to run one or

00:22:18.670 --> 00:22:21.090
two of your tests in your,
I'm sure,

00:22:21.090 --> 00:22:26.020
enormous unit testing suites while
you're getting them up and working.

00:22:26.770 --> 00:22:29.250
And of course,
you might want to supply some arguments,

00:22:29.290 --> 00:22:29.740
too.

00:22:29.810 --> 00:22:33.530
By default, Xcode will actually use the
command line arguments that

00:22:33.530 --> 00:22:37.480
you've set for the run action,
rather than making you specify them

00:22:37.480 --> 00:22:39.430
all over again for the test action.

00:22:39.630 --> 00:22:42.510
However,
if you do want to supply different

00:22:42.510 --> 00:22:46.000
arguments for unit testing,
you can do so simply by

00:22:46.000 --> 00:22:48.300
turning off that checkbox.

00:22:48.420 --> 00:22:52.170
So let me show you a demo
of unit testing in Xcode 4.

00:22:58.540 --> 00:23:00.460
So here I have a simple project.

00:23:00.460 --> 00:23:03.020
It's just a Zip browser
application for Mac OS X.

00:23:03.060 --> 00:23:05.580
It's based on the Zip
browser sample code.

00:23:05.590 --> 00:23:11.680
And I have some unit tests
here in my new Zipkit library.

00:23:11.820 --> 00:23:15.320
So to run my unit tests,
I'm just going to go to the

00:23:15.430 --> 00:23:18.180
product menu and choose Test.

00:23:18.180 --> 00:23:22.820
Xcode 4 builds my Zipkit library
and my Zip browser application,

00:23:22.820 --> 00:23:24.520
and also my Zip tests.

00:23:24.540 --> 00:23:29.120
And I can see that I have a test failure
right here in the issues navigator.

00:23:29.160 --> 00:23:32.390
If I click on that test failure,
I go right to the source code,

00:23:32.530 --> 00:23:35.500
and I see what test failed.

00:23:35.600 --> 00:23:40.960
So let me see exactly what was going
on in this test that caused it to fail.

00:23:40.980 --> 00:23:43.550
I'm just going to set a breakpoint.

00:23:43.950 --> 00:23:45.970
and retest.

00:23:46.050 --> 00:23:49.080
No more setting up a custom executable.

00:23:53.480 --> 00:23:56.970
Here I'm stopped in the debugger,
and let me just take a look at what

00:23:56.970 --> 00:23:59.780
root entry child entries actually is.

00:23:59.810 --> 00:24:00.690
This is a little odd.

00:24:00.700 --> 00:24:04.140
I'm saying that it should be nil,
but that it should have children.

00:24:04.260 --> 00:24:08.120
So if I look in self, root entry,
child entries, oh,

00:24:08.120 --> 00:24:09.580
it's an array with zero objects.

00:24:09.830 --> 00:24:12.380
Maybe I actually meant that
it should not be nil here,

00:24:12.440 --> 00:24:13.720
and this is just a typo.

00:24:13.760 --> 00:24:15.050
I'm going to stop my tests.

00:24:15.160 --> 00:24:16.630
Oops.

00:24:18.960 --> 00:24:22.940
Say st assert not nil,
get rid of my breakpoint here,

00:24:22.960 --> 00:24:29.230
rerun my tests,
and all my tests succeeded.

00:24:29.740 --> 00:24:35.260
And now if I go and edit my scheme,
I can see in my test scheme here,

00:24:35.290 --> 00:24:39.330
under my tests, I have two tests,
and these were automatically

00:24:39.330 --> 00:24:41.340
discovered by Xcode's indexing.

00:24:41.390 --> 00:24:44.720
I didn't have to tell
Xcode about my tests,

00:24:44.770 --> 00:24:46.970
it just knew about them.

00:24:50.130 --> 00:24:55.000
So now,
let's talk a little more about profiling.

00:24:55.270 --> 00:25:00.490
And let's go back to slides.

00:25:05.050 --> 00:25:07.660
Let's talk a little bit
more about profiling your

00:25:07.700 --> 00:25:10.680
application for performance.

00:25:10.710 --> 00:25:12.500
Obviously,
there's a little bit that you'll want

00:25:12.590 --> 00:25:16.580
to configure when you're profiling
your application straight from Xcode.

00:25:16.640 --> 00:25:18.960
And that includes, of course,
the build configuration

00:25:18.960 --> 00:25:20.120
that you want to profile.

00:25:20.140 --> 00:25:24.420
Now here, Xcode will default to profiling
your release configuration,

00:25:24.440 --> 00:25:26.480
because typically,
you don't want to check the

00:25:26.480 --> 00:25:29.440
performance of your debug code,
because you've put in all sorts

00:25:29.450 --> 00:25:31.860
of logging and assertions,
and you're just,

00:25:31.890 --> 00:25:34.260
you're really making sure that your
code is correct when you're debugging,

00:25:34.260 --> 00:25:35.700
not that it's fast.

00:25:35.780 --> 00:25:41.600
So you really want to do your,
you really want to do your profiling

00:25:41.630 --> 00:25:44.480
using the release configuration.

00:25:45.800 --> 00:25:49.270
And as a shortcut,
Xcode lets you select from

00:25:49.270 --> 00:25:53.300
among your instrument templates
right in the profile action.

00:25:53.330 --> 00:25:57.440
This means that when you choose
profile from the product menu in Xcode,

00:25:57.450 --> 00:26:01.020
Xcode will go straight to instruments
and start running your application,

00:26:01.090 --> 00:26:03.700
so there's no break in your workflow.

00:26:03.720 --> 00:26:08.220
You can just decide to profile and go
straight into profiling without having

00:26:08.430 --> 00:26:10.880
to configure instruments in between.

00:26:11.890 --> 00:26:14.120
And of course,
you might want to supply some sample

00:26:14.170 --> 00:26:18.440
data or some environment variables
when you are profiling as well.

00:26:18.500 --> 00:26:20.730
And again, by default,
Xcode will just take

00:26:20.850 --> 00:26:23.570
those from the run action,
but you can choose to override

00:26:23.640 --> 00:26:26.190
what Xcode has decided for you.

00:26:27.660 --> 00:26:30.520
Now,
we all use the LLVM static analyzer on

00:26:30.680 --> 00:26:33.750
our code to make sure that our memory
management is correct and that we're not

00:26:33.750 --> 00:26:39.310
making any other mistakes with respect
to Cocoa or core foundation idioms.

00:26:39.940 --> 00:26:44.560
And we provide you a little bit of
control over the analyze action as well,

00:26:44.560 --> 00:26:50.290
because you'll sometimes want to analyze
a build configuration other than debug.

00:26:50.690 --> 00:26:52.970
For example,
you might want to occasionally analyze

00:26:52.970 --> 00:26:56.270
your release build configuration just to
make sure that you haven't done something

00:26:56.380 --> 00:27:00.520
silly like fix a memory leak as a side
effect of implementing some logging,

00:27:00.640 --> 00:27:03.830
rather than actually fixing it in
the version of your code that's

00:27:04.070 --> 00:27:05.710
going to be released to users.

00:27:07.140 --> 00:27:11.020
And of course, in Xcode 4,
just as in Xcode 3,

00:27:11.290 --> 00:27:15.830
when you actually encounter
an analysis issue,

00:27:15.940 --> 00:27:19.670
You'll wind up with both an annotation
in your source code and an entry

00:27:19.710 --> 00:27:24.750
in the issues navigator to make it
easy to find what you need to fix.

00:27:25.480 --> 00:27:29.280
Now the final scheme action is archiving,
and this is how you

00:27:29.280 --> 00:27:32.740
distribute your application,
whether you're distributing

00:27:33.100 --> 00:27:36.790
it to end users or to testers.

00:27:36.860 --> 00:27:39.840
And archiving is not just for iOS.

00:27:39.910 --> 00:27:44.380
It's how you distribute your application,
whether it's for Mac OS X or iOS,

00:27:44.430 --> 00:27:47.810
whether it's for the Mac App Store,
or whether it's something that you're

00:27:47.850 --> 00:27:50.490
going to make available on your website.

00:27:50.850 --> 00:27:54.140
It's how you share with testers,
and it's also how you can verify

00:27:54.140 --> 00:27:58.580
your application prior to submission
to the iOS or Mac App Store,

00:27:58.580 --> 00:28:02.380
and how you actually
submit your application.

00:28:03.430 --> 00:28:09.250
So an archive itself is an XeArchive
bundle on disk that contains an

00:28:09.250 --> 00:28:11.800
install-style build of your application.

00:28:11.850 --> 00:28:15.650
What this means is that it's a fully
stripped version of your application with

00:28:15.660 --> 00:28:17.840
no debugging symbols or anything else.

00:28:17.870 --> 00:28:21.830
Instead, those symbols are off to the
side in another DSIM file.

00:28:21.960 --> 00:28:25.360
So they're still around,
they're still in that archive,

00:28:25.420 --> 00:28:30.400
and they can still be used to match
your application as it's deployed

00:28:30.400 --> 00:28:34.900
in the field with your source code
that generated that application.

00:28:35.100 --> 00:28:40.190
So when you get crash reports,
you can actually see what line of code

00:28:40.420 --> 00:28:43.420
Each entry in your call stack
actually corresponds to,

00:28:43.630 --> 00:28:47.950
instead of trying to puzzle it out from
memory addresses and things like that.

00:28:48.720 --> 00:28:51.770
Your archive is also associated
with the verification status and

00:28:51.770 --> 00:28:56.240
submission status of your application,
and you can supply your own comments too,

00:28:56.400 --> 00:28:59.670
so you know what you were thinking
when you made that archive.

00:29:00.980 --> 00:29:03.060
So to configure the archive action,
of course,

00:29:03.080 --> 00:29:06.260
there's a pane in the scheme editor.

00:29:06.350 --> 00:29:09.240
And by default,
Xcode is set up to archive

00:29:09.260 --> 00:29:11.300
your release configuration.

00:29:11.360 --> 00:29:15.390
We don't really do a release versus
a distribution configuration anymore

00:29:15.860 --> 00:29:20.020
because the choices that were different
between release and distribution,

00:29:20.110 --> 00:29:25.210
those can actually all be handled
in the archives organizer now.

00:29:25.610 --> 00:29:29.690
And we have a checkbox that will
automatically take you straight

00:29:29.800 --> 00:29:32.500
to the new archive that was
produced in the Archives Organizer

00:29:32.500 --> 00:29:35.350
when you perform an archive.

00:29:35.970 --> 00:29:39.190
To manage your archives,
you use the Archives Organizer, which,

00:29:39.190 --> 00:29:41.580
as I said,
was brought up by this checkbox.

00:29:41.690 --> 00:29:45.080
And here you can see I have a few
different versions of my Zip browser

00:29:45.080 --> 00:29:46.640
application that I've archived.

00:29:46.720 --> 00:29:48.680
But why did I do that?

00:29:48.740 --> 00:29:52.130
Well, just like with your code,
use comments.

00:29:52.190 --> 00:29:54.020
I've put in some comments
to say that I had,

00:29:54.060 --> 00:29:56.270
okay, I have my first version
of my application,

00:29:56.280 --> 00:29:57.860
it's the first draft,
I've got a couple of

00:29:57.860 --> 00:30:00.520
intermediate versions,
and now I have the version

00:30:00.600 --> 00:30:02.260
for the conference.

00:30:03.540 --> 00:30:05.940
And then if I were going to
submit this to the App Store or

00:30:05.940 --> 00:30:09.220
send it out for testing,
I would use the buttons

00:30:09.220 --> 00:30:10.500
at the right to do that.

00:30:10.540 --> 00:30:14.410
I would validate for submission,
I would share my application,

00:30:14.410 --> 00:30:17.380
and I would submit it to the App Store.

00:30:18.200 --> 00:30:21.870
Now,
when you go to share your application,

00:30:21.870 --> 00:30:24.430
you have a choice of how
you want to share it,

00:30:24.430 --> 00:30:28.530
as long as it's an application archive.

00:30:29.400 --> 00:30:34.020
For iOS, you have the choice of
making an iOS IPA archive,

00:30:34.690 --> 00:30:39.050
which you can use for ad hoc
or enterprise distribution,

00:30:39.260 --> 00:30:43.780
and you can choose which signing
certificate you want to use

00:30:43.810 --> 00:30:46.510
to actually generate that IPA.

00:30:47.290 --> 00:30:50.790
And you can sort of do the
same for the Mac OS X side.

00:30:50.810 --> 00:30:57.040
You can choose to make a macOS-- a
Mac App Store distribution package,

00:30:57.100 --> 00:31:00.190
or you can choose to just extract
the raw application from the

00:31:00.300 --> 00:31:03.260
archive and pass that around,
or you can choose to pass

00:31:03.370 --> 00:31:04.810
around the archive itself.

00:31:04.950 --> 00:31:07.850
And again, you have a choice of which
signing certificate to use

00:31:08.160 --> 00:31:10.840
when you produce that archive.

00:31:10.980 --> 00:31:14.010
Now, if you're going to
produce an application,

00:31:14.580 --> 00:31:18.290
That's going to have to come
from an application archive.

00:31:18.450 --> 00:31:23.040
An application archive is an archive
that only contains a single application.

00:31:23.080 --> 00:31:25.280
It doesn't contain any
extraneous libraries,

00:31:25.480 --> 00:31:28.240
frameworks, static libraries,
or anything else.

00:31:28.300 --> 00:31:31.630
And this is really important because
an application archive is the

00:31:31.630 --> 00:31:35.120
only kind of archive that can be
submitted to the Mac or iOS app store.

00:31:35.160 --> 00:31:39.770
You can't submit an archive
that has anything else in it.

00:31:41.010 --> 00:31:45.140
And to do that, if you are using any
libraries or frameworks,

00:31:45.300 --> 00:31:48.100
whether you're doing
so for iOS or the Mac,

00:31:48.180 --> 00:31:52.110
you'll want to turn on the skip
install build setting for those

00:31:52.150 --> 00:31:53.590
library and framework targets.

00:31:53.780 --> 00:31:57.970
Instead, your application should just
embed the library or framework

00:31:57.970 --> 00:31:59.450
in itself when it builds.

00:31:59.660 --> 00:32:01.520
Now,
that's really easy for static libraries

00:32:01.520 --> 00:32:03.280
because that happens automatically.

00:32:03.280 --> 00:32:04.590
There's nothing for you to configure.

00:32:04.930 --> 00:32:08.620
Simply by using a static library,
it's incorporated into your application.

00:32:09.590 --> 00:32:12.530
But for frameworks and dynamic
libraries on the Mac side,

00:32:12.690 --> 00:32:15.740
you'll need to use a copy files
build phase to put them in the right

00:32:15.910 --> 00:32:18.270
place in your application bundle.

00:32:19.880 --> 00:32:22.320
Now, I'll bring back Rick,
and he'll tell you a little bit

00:32:22.390 --> 00:32:27.280
more about how Xcode decides
what build locations to use.

00:32:29.000 --> 00:32:32.180
Thanks, Chris.

00:32:32.290 --> 00:32:35.100
So let's go over how to find
your build products and how

00:32:35.100 --> 00:32:37.250
to configure where they go.

00:32:37.390 --> 00:32:40.020
By default, every workspace,
as I told you before,

00:32:40.070 --> 00:32:44.510
gets its own location for build products,
and that's in its derived data directory.

00:32:44.540 --> 00:32:46.810
The derived data directory
contains all the derived

00:32:46.810 --> 00:32:48.370
artifacts from your workspace.

00:32:48.460 --> 00:32:53.670
So that's the symbol index,
your saved logs, and your build products.

00:32:53.850 --> 00:32:57.140
This means, since every workspace has its
own derived data directory,

00:32:57.210 --> 00:32:59.460
that by default,
your build products from different

00:32:59.460 --> 00:33:01.480
workspaces don't get mixed together.

00:33:01.540 --> 00:33:04.950
And that's really helpful because it
keeps each workspace from clobbering

00:33:04.950 --> 00:33:06.520
each other's build products.

00:33:06.580 --> 00:33:08.810
And in fact,
if you open a project in the context

00:33:08.810 --> 00:33:11.560
of one workspace versus in another,
its build products will

00:33:11.560 --> 00:33:12.410
go in different places.

00:33:12.530 --> 00:33:16.330
So again, you maintain the build products
that you're using in one specific

00:33:16.380 --> 00:33:19.600
workspace without it getting
clobbered by another one.

00:33:19.930 --> 00:33:23.280
Now, we distinguish workspaces by
path when deciding which derived

00:33:23.340 --> 00:33:24.680
data directory they should have.

00:33:24.830 --> 00:33:27.570
That means if you say,
"Check out two copies of the same

00:33:27.570 --> 00:33:30.980
workspace from different revisions
in your source control," since

00:33:30.980 --> 00:33:36.580
each of those copies has to live
at a slightly different path,

00:33:36.610 --> 00:33:40.530
each of them is going to get
its own derived data directory.

00:33:40.530 --> 00:33:40.530
So those different versions
of your project aren't going

00:33:40.530 --> 00:33:40.530
to stomp on each other.

00:33:41.060 --> 00:33:43.190
If you look in your
derived data location,

00:33:43.320 --> 00:33:46.380
you'll see a set of folders
with funny names in them.

00:33:46.440 --> 00:33:49.140
Those are the derived data
directories that you have.

00:33:49.390 --> 00:33:51.960
Each derived data directory
starts with the name of the

00:33:51.960 --> 00:33:56.130
workspace that it belongs to,
and is then followed by a hash of the

00:33:56.130 --> 00:33:58.460
path that that workspace lives at.

00:33:58.540 --> 00:34:01.830
So if you move the workspace,
it'll get a new derived data directory.

00:34:01.990 --> 00:34:05.350
If you want to, if these are building up,
you can delete these folders.

00:34:05.420 --> 00:34:07.000
But if you do,
and then open up one of the

00:34:07.000 --> 00:34:09.920
workspaces that corresponded to
a deleted derived data directory,

00:34:09.970 --> 00:34:11.930
it'll have to re-index
all its symbols again.

00:34:12.000 --> 00:34:15.170
It won't have any built
products and so forth.

00:34:15.480 --> 00:34:18.210
So I'm going to give you a quick
demo now that shows you how easy

00:34:18.210 --> 00:34:21.190
it is to find your build products,
even though they're off in

00:34:21.290 --> 00:34:23.260
this derived data location now.

00:34:23.330 --> 00:34:25.520
So there are three quick ways to do this.

00:34:25.670 --> 00:34:29.200
The first way is if you go to the
project navigator and disclose

00:34:29.290 --> 00:34:32.100
one of the products groups,
and you've built your product,

00:34:32.130 --> 00:34:34.540
you'll see references
to your built products.

00:34:34.570 --> 00:34:38.630
And you can just right-click on those,
choose Show in Finder,

00:34:38.630 --> 00:34:42.720
and your built product is going
to come right up in Finder.

00:34:43.510 --> 00:34:48.680
The second way is to go to the File menu
and choose the Workspace Settings option.

00:34:48.840 --> 00:34:50.890
Or, if you're working with
a standalone project,

00:34:51.120 --> 00:34:54.200
this option is called Project Settings.

00:34:54.200 --> 00:34:56.630
This brings down the
Workspace Settings sheet,

00:34:56.650 --> 00:34:59.940
and this gives you control over where
the derived data directory for this

00:35:00.040 --> 00:35:03.240
workspace lives on a per workspace basis,
if you want to change that,

00:35:03.240 --> 00:35:05.000
and where its build products go.

00:35:05.090 --> 00:35:07.360
In addition,
when it lists the derived data directory,

00:35:07.450 --> 00:35:10.000
there's a little arrow,
and if you just press this arrow button,

00:35:10.250 --> 00:35:13.350
your derived data location
will come up in Finder.

00:35:14.940 --> 00:35:18.470
The third way to get at your derived data
directory is to go to the Window menu,

00:35:18.610 --> 00:35:20.810
choose the Organizer,

00:35:21.710 --> 00:35:24.620
Bring up the Projects Organizer,
which will list all open

00:35:24.760 --> 00:35:27.730
projects and workspaces,
and all projects and workspaces

00:35:27.820 --> 00:35:30.790
that Xcode knows about by seeing
their derived data directory

00:35:30.790 --> 00:35:32.440
in the derived data location.

00:35:32.570 --> 00:35:35.730
And here it lists this
project's derived data,

00:35:35.840 --> 00:35:39.000
or this workspace's derived data folder,
and again there's a little arrow.

00:35:39.030 --> 00:35:41.310
I can press it,
and there's my derived data

00:35:41.400 --> 00:35:43.360
directory for this workspace.

00:35:43.500 --> 00:35:44.950
So that's how easy this is.

00:35:45.160 --> 00:35:47.320
Let's go back to slides.

00:35:54.060 --> 00:35:57.840
If you open Xcode's preferences and
go to the Locations preference pane,

00:35:57.840 --> 00:36:00.920
you get some control over
where your derived data goes.

00:36:00.960 --> 00:36:03.310
There's a derived data
location you can set,

00:36:03.310 --> 00:36:07.120
in addition to being able to set where
your snapshots go and your archives go.

00:36:07.150 --> 00:36:10.420
And there's also an advanced button here,
which gives you control over exactly

00:36:10.420 --> 00:36:13.360
where your build products go,
if maybe you don't want them going

00:36:13.420 --> 00:36:14.880
in the derived data directory.

00:36:14.930 --> 00:36:17.200
You'll notice this pref pane
looks a little different,

00:36:17.200 --> 00:36:19.960
and the workspace settings sheet I'm
about to show you a screenshot of

00:36:19.990 --> 00:36:23.800
looks a little different than what
you have in the 4.1 and 4.2 seeds.

00:36:23.850 --> 00:36:26.610
That's because this is the new
look for the Locations pref pane

00:36:26.670 --> 00:36:30.790
and the workspace settings sheet,
and it's coming soon.

00:36:31.650 --> 00:36:33.640
In the workspace settings sheet,
as I said,

00:36:33.690 --> 00:36:37.480
you can change your derived data
directory on a per-workspace basis.

00:36:37.540 --> 00:36:40.780
This is useful if, say,
you're a contractor and you're working

00:36:40.780 --> 00:36:43.740
with some source code that has some
particular security requirements.

00:36:43.800 --> 00:36:48.180
You need all artifacts from this project
to go in a particular secure location.

00:36:48.240 --> 00:36:50.100
Well,
you can set that workspace's derived data

00:36:50.100 --> 00:36:54.830
directory to be in that secure location,
and everything will be taken care of.

00:36:55.090 --> 00:36:58.710
The Advanced button here-- oh, actually,
there's also a pop-up here,

00:36:58.750 --> 00:37:01.340
which allows you to choose to
make your derived data location

00:37:01.560 --> 00:37:02.990
project relative if you want.

00:37:03.130 --> 00:37:08.750
And that's useful if you like having
your build products and other derived

00:37:08.750 --> 00:37:08.750
data in next to your source code.

00:37:10.680 --> 00:37:13.540
The Advanced button here
lets you configure exactly

00:37:13.540 --> 00:37:15.480
where your build products go.

00:37:15.480 --> 00:37:18.850
And there are a few different scenarios
I'm going to step through that should

00:37:18.850 --> 00:37:20.640
dictate when you'd want to use this.

00:37:21.000 --> 00:39:06.500
[Transcript missing]

00:39:07.280 --> 00:39:10.420
You can also do this in Xcode's
location preferences if you want,

00:39:10.420 --> 00:39:12.540
if you want every project
you ever work with,

00:39:12.720 --> 00:39:15.120
by default,
to place its build products in

00:39:15.120 --> 00:39:17.310
the same build products directory.

00:39:17.980 --> 00:39:22.040
The third scenario is the few of you who
may have a complex external build system

00:39:22.330 --> 00:39:26.540
that requires your build products to
go in very specific locations on disk.

00:39:26.680 --> 00:39:30.110
Those locations may be controlled by
the build settings in your target.

00:39:30.270 --> 00:39:32.580
There's a build products
path and a build intermediate

00:39:32.700 --> 00:39:35.550
files path that lets you set,
on a per target basis,

00:39:35.670 --> 00:39:37.740
exactly where your build products go.

00:39:37.810 --> 00:39:41.430
And if you need to use these settings,
you can change your build location

00:39:41.430 --> 00:39:43.800
to locations specified by targets.

00:39:43.880 --> 00:39:46.200
That makes Xcode respect
these build settings.

00:39:46.270 --> 00:39:48.650
And that means that your products
aren't going to go in your

00:39:48.650 --> 00:39:49.960
derived data directory at all.

00:39:50.000 --> 00:39:53.480
They're going to go in some location
specified on a per target basis.

00:39:53.670 --> 00:39:55.760
Most of you don't need this,
but for those of you who do,

00:39:55.760 --> 00:39:58.470
it's important to know
where to find this.

00:39:58.890 --> 00:40:00.460
There's one more thing I'm
going to tell you about before

00:40:00.460 --> 00:40:03.380
we move past build locations,
and that's one reason many people go and

00:40:03.380 --> 00:40:06.920
find their build products in Finder today
is because they like to delete their

00:40:06.920 --> 00:40:10.510
build products folder outright in Finder
instead of using the clean command,

00:40:10.510 --> 00:40:13.430
both because the clean command
can take a little longer than just

00:40:13.440 --> 00:40:16.620
deleting the folder and because you
want to make absolutely sure that

00:40:16.760 --> 00:40:20.390
you've deleted all your build products
and haven't left any cruft behind.

00:40:20.400 --> 00:40:23.760
Well,
we've made this a lot easier in Xcode 4.

00:40:23.760 --> 00:40:27.680
In Xcode 4, if you have the products menu
up and you hold the option key,

00:40:27.680 --> 00:40:31.040
the clean command turns into
a clean build folder command,

00:40:31.040 --> 00:40:34.200
and if you select this,
Xcode will just instantly delete

00:40:34.200 --> 00:40:35.850
your build folder for you.

00:40:40.300 --> 00:40:43.200
So that's about all there is to
configuring your build locations.

00:40:43.240 --> 00:40:46.510
Let's dive now into how to manage
your schemes effectively and

00:40:46.510 --> 00:40:48.380
share them with your coworkers.

00:40:48.510 --> 00:40:52.040
First thing you need to know about
schemes is when they're created.

00:40:52.190 --> 00:40:54.950
Well, you can manually create them
yourself whenever you want,

00:40:54.950 --> 00:40:57.280
but Xcode will actually create
them for you automatically

00:40:57.340 --> 00:40:59.160
under a couple of situations.

00:40:59.420 --> 00:41:01.960
First of all,
whenever you create a new target or

00:41:01.960 --> 00:41:05.710
a new project that contains targets,
Xcode will create a scheme

00:41:05.780 --> 00:41:07.100
for every new target.

00:41:07.160 --> 00:41:12.440
And that scheme will be per user owned
by the user that created the targets.

00:41:12.560 --> 00:41:16.140
Second of all, the first time you open
a project or workspace,

00:41:16.210 --> 00:41:20.230
or if you open a project in workspace or
workspace and new targets have been added

00:41:20.290 --> 00:41:23.570
by someone else since you last opened it,
Xcode will look at each of

00:41:23.570 --> 00:41:26.450
those new targets and create a
scheme for every one of them.

00:41:26.630 --> 00:41:30.500
And again, that scheme will be
per user owned by you.

00:41:31.860 --> 00:41:34.180
Now, I said that you get a
scheme for every target,

00:41:34.340 --> 00:41:36.260
every new target,
but that's not quite right.

00:41:36.300 --> 00:41:39.120
Xcode will create a new scheme
for most types of targets,

00:41:39.260 --> 00:41:41.480
like framework targets, library targets,
application targets.

00:41:41.540 --> 00:41:45.980
But if you have any unit test targets,
and if those unit tests can identifiably

00:41:45.980 --> 00:41:49.480
test some other target's product,
like say you have a test bundle

00:41:49.480 --> 00:41:52.530
that tests your application,
instead of creating a separate

00:41:52.620 --> 00:41:57.000
scheme for your unit test target,
Xcode will add that unit test target

00:41:57.000 --> 00:42:01.040
to the test action of the scheme that
contains the target that the tests test.

00:42:01.140 --> 00:42:03.730
So, for example,
to the test action of the scheme that

00:42:03.740 --> 00:42:05.630
contains your application target.

00:42:05.640 --> 00:42:07.780
Now,
if you create a new unit test target,

00:42:07.900 --> 00:42:11.050
it won't be configured yet to
test some other target's product,

00:42:11.130 --> 00:42:13.850
so you will get a new scheme
just for that test target.

00:42:14.120 --> 00:42:15.450
That's probably not what you want.

00:42:15.740 --> 00:42:18.200
You probably want to delete
that scheme for the test target,

00:42:18.210 --> 00:42:22.600
and instead add the test target to
the test action of another scheme

00:42:22.820 --> 00:42:25.680
that you want to run the tests with.

00:42:26.760 --> 00:42:28.600
If you have a lot of
targets in your workspace,

00:42:28.750 --> 00:42:30.800
you may see that the scheme
pop-up is pretty full,

00:42:30.900 --> 00:42:31.860
lots of stuff in there.

00:42:32.160 --> 00:42:34.780
You don't necessarily
have to keep them all.

00:42:34.870 --> 00:42:37.340
For example,
if you have an application target

00:42:37.460 --> 00:42:40.530
that links against a framework target,
Xcode will have given you a scheme for

00:42:40.530 --> 00:42:42.320
both the framework and the application.

00:42:42.360 --> 00:42:45.420
But maybe you never need to build
the framework just by itself.

00:42:45.470 --> 00:42:47.000
In that case,
you can delete the scheme for the

00:42:47.090 --> 00:42:50.020
framework target and just keep the
one for the application target.

00:42:50.070 --> 00:42:51.760
Whenever you build the
application scheme,

00:42:51.800 --> 00:42:55.940
it'll automatically build the framework
too because of that target dependency.

00:42:57.060 --> 00:43:00.690
You can manage your schemes by going
to the Scheme pop-up and choosing the

00:43:00.690 --> 00:43:03.040
Manage Schemes option from the menu.

00:43:03.110 --> 00:43:05.150
This brings down the
Manage Schemes sheet,

00:43:05.150 --> 00:43:08.620
which shows you all the schemes in the
workspace and lets you create new ones,

00:43:08.700 --> 00:43:11.330
delete them, and configure them.

00:43:11.540 --> 00:43:13.900
First of all, you'll notice that there's
an "Auto Create Schemes"

00:43:13.900 --> 00:43:15.940
checkbox in the upper left.

00:43:16.000 --> 00:43:18.860
Most of you want to leave this on,
but if you turn it off,

00:43:18.930 --> 00:43:23.060
Xcode will never automatically
create schemes for this workspace.

00:43:23.190 --> 00:43:26.870
This setting is actually shared
among all users of the workspace.

00:43:27.000 --> 00:43:29.950
This is useful if you've got a large,
complicated workspace,

00:43:30.050 --> 00:43:34.260
and you've specifically authored some
complicated schemes that you want

00:43:34.260 --> 00:43:36.050
to share with all your teammates.

00:43:36.180 --> 00:43:38.670
You don't want new teammates
opening the workspace and getting

00:43:38.720 --> 00:43:40.770
all these auto-created schemes,
one for each target.

00:43:40.890 --> 00:43:42.730
Instead,
you want your teammates to use the shared

00:43:42.830 --> 00:43:44.700
schemes that you've carefully authored.

00:43:44.990 --> 00:43:48.080
So if you turn this off,
nobody will get the auto-created schemes,

00:43:48.110 --> 00:43:50.940
and it'll be easy for them
to just work with the shared

00:43:50.940 --> 00:43:53.320
schemes that you've created,
or create new schemes themselves

00:43:53.400 --> 00:43:55.430
when they actually need them.

00:43:55.940 --> 00:43:58.800
The "Autocreate Schemes Now" button
does let you trigger autocreation

00:43:58.800 --> 00:44:01.480
if you have this off and want
to autocreate schemes after all,

00:44:01.790 --> 00:44:03.760
but it also serves
another important purpose.

00:44:03.800 --> 00:44:07.800
If Xcode autocreates a scheme
for you and you delete it,

00:44:07.860 --> 00:44:10.680
Xcode will remember that you've
deleted that autocreated scheme

00:44:10.820 --> 00:44:12.800
and won't recreate it for you.

00:44:12.800 --> 00:44:16.200
And that prevents you from having to play
whack-a-mole with autocreated schemes

00:44:16.200 --> 00:44:17.800
every time you open up a workspace.

00:44:17.800 --> 00:44:20.020
Now, if you've deleted some
autocreated schemes,

00:44:20.020 --> 00:44:22.410
but you decide, "Hey, actually,
I want to get those autocreated schemes

00:44:22.530 --> 00:44:26.480
back," if you press this button,
Xcode will actually autocreate schemes

00:44:26.800 --> 00:44:29.800
for every target in the workspace
that doesn't already have a scheme,

00:44:29.800 --> 00:44:32.320
even including targets which
it had autocreated schemes in

00:44:32.410 --> 00:44:33.800
the past for that you deleted.

00:44:33.800 --> 00:44:35.770
It can be kind of useful.

00:44:38.110 --> 00:44:44.280
Now, you may find when working with
shared schemes that some of your

00:44:44.280 --> 00:44:46.540
teammates have set up some schemes
that you don't really care about.

00:44:46.650 --> 00:44:49.230
They're just for their
use or shared among them,

00:44:49.510 --> 00:44:52.400
and you don't want them
cluttering up your scheme popup.

00:44:52.420 --> 00:44:54.690
If you uncheck the show
checkbox on the left,

00:44:54.770 --> 00:44:58.970
you can hide those schemes for you so
they don't show up in the scheme popup,

00:44:59.040 --> 00:45:01.070
but that won't affect anyone else.

00:45:01.070 --> 00:45:02.600
That's a per user setting.

00:45:02.790 --> 00:45:04.350
Since you can't delete
the shared schemes,

00:45:04.350 --> 00:45:06.660
or it would delete them for
everyone since they're shared,

00:45:06.670 --> 00:45:07.810
You just hide them for you.

00:45:09.620 --> 00:45:12.440
If you want to share a scheme,
you just check the Shared

00:45:12.590 --> 00:45:13.840
checkbox on the right.

00:45:13.960 --> 00:45:18.420
And that will move the scheme file
to the shared data location so that

00:45:18.500 --> 00:45:22.930
everybody who's using your project in
Workspace can use that scheme together.

00:45:23.440 --> 00:45:26.120
Now, one thing you may find often
when working with shared schemes

00:45:26.420 --> 00:45:29.770
is you want to add some argument
temporarily for debugging purposes.

00:45:29.900 --> 00:45:32.630
But if you edit that shared scheme,
it'll show up for everybody

00:45:32.680 --> 00:45:34.000
because that scheme is shared.

00:45:34.090 --> 00:45:36.440
And you don't want to accidentally
check that in and share your

00:45:36.530 --> 00:45:38.400
temporary argument with everyone.

00:45:38.520 --> 00:45:41.690
The workflow we recommend in that
case is to select the scheme here,

00:45:41.840 --> 00:45:45.830
choose Duplicate from the gear menu,
and create your own personal

00:45:45.830 --> 00:45:47.820
one-off copy of the scheme.

00:45:47.950 --> 00:45:50.440
You can tweak that to your
heart's content and then delete

00:45:50.440 --> 00:45:51.400
it when you're done with it.

00:45:51.410 --> 00:45:52.840
And next time you need
to do the same thing,

00:45:52.840 --> 00:45:56.320
just duplicate a new copy of the
scheme and tweak it as needed.

00:45:57.170 --> 00:45:59.210
You'll notice that there's
a containers pop-up here,

00:45:59.220 --> 00:46:02.100
and that controls exactly
where your scheme is stored.

00:46:02.150 --> 00:46:05.700
Every scheme is stored inside
a project or workspace bundle,

00:46:05.770 --> 00:46:08.870
and you can choose which project or
workspace it's stored in by changing

00:46:08.870 --> 00:46:11.050
that in the container pop-up.

00:46:11.140 --> 00:46:14.300
If you've got a scheme that you want
all users of your project to see,

00:46:14.370 --> 00:46:16.200
you should store it in that project.

00:46:16.230 --> 00:46:18.360
But if you've got a scheme that
you only want to use when you're

00:46:18.450 --> 00:46:22.820
working in a particular workspace,
you can just store it in that workspace.

00:46:23.550 --> 00:46:26.850
Let's talk a little bit more about
exactly where your schemes go.

00:46:26.950 --> 00:46:31.640
Inside your project or workspace bundle,
Xcode puts an XC user data folder,

00:46:31.850 --> 00:46:36.100
which contains all your per user data,
and an XC shared data folder,

00:46:36.130 --> 00:46:38.540
which contains your shared data.

00:46:38.610 --> 00:46:44.510
Inside the XC shared data
folder is an XC schemes folder,

00:46:44.510 --> 00:46:48.580
and inside that is all of
your shared schemes that are

00:46:48.580 --> 00:46:48.580
in this project or workspace.

00:46:49.340 --> 00:46:52.210
In your XE User Data folder,
you'll see that there's a

00:46:52.290 --> 00:46:55.520
separate folder for every user
of this project or workspace,

00:46:55.520 --> 00:46:57.680
named after that user's username.

00:46:57.780 --> 00:47:01.170
Inside your Username folder,
there's an XE Schemes folder again,

00:47:01.170 --> 00:47:04.200
and inside that,
there's both all your per-user schemes

00:47:04.610 --> 00:47:07.840
and a Scheme Management Property List.

00:47:07.960 --> 00:47:10.120
The Scheme
Management Property List stores

00:47:10.120 --> 00:47:13.440
information for you about which
schemes you've chosen to hide,

00:47:13.550 --> 00:47:15.360
what order you want the
schemes to show up in,

00:47:15.360 --> 00:47:18.000
and you can change that by
dragging them around in the

00:47:18.000 --> 00:47:21.030
Schemes Management Per User,
and what schemes Xcode has

00:47:21.150 --> 00:47:25.030
auto-created for you in the past
so it knows not to auto-create them

00:47:25.030 --> 00:47:27.340
for you again after you delete them.

00:47:28.080 --> 00:47:30.720
Now, when working with schemes,
you probably want to check them in.

00:47:30.770 --> 00:47:34.180
When you bring up the commit sheet,
you'll see this hierarchy I just

00:47:34.180 --> 00:47:36.250
showed you represented on the left.

00:47:36.390 --> 00:47:38.420
Shared schemes,
you usually want to check in to

00:47:38.430 --> 00:47:39.750
share them with your coworkers.

00:47:39.890 --> 00:47:41.800
You may want to check in your
personal schemes and your

00:47:41.800 --> 00:47:43.420
scheme management property list,
too,

00:47:43.610 --> 00:47:45.690
just so that you don't lose that data.

00:47:45.800 --> 00:47:48.990
By default, unlike source files,
when you create a scheme,

00:47:49.110 --> 00:47:51.280
it's not added to your source control.

00:47:51.410 --> 00:47:53.950
So if you want to add a new scheme,
you just need to check

00:47:53.950 --> 00:47:56.920
the checkbox on the left,
and Xcode will commit it to your source

00:47:56.920 --> 00:47:59.300
control the next time you commit,
or when you close the

00:47:59.410 --> 00:48:00.900
sheet is when you commit.

00:48:01.100 --> 00:48:04.200
So that's about all there is to
managing your schemes effectively.

00:48:04.280 --> 00:48:07.160
To close out today's presentation,
I'd like to invite Chris back up

00:48:07.160 --> 00:48:10.790
to show you what you can do with
the power of custom scheme actions.

00:48:13.460 --> 00:48:15.400
Thanks, Rick.

00:48:15.400 --> 00:48:21.340
So we've seen what you can do with
schemes and scheme actions so far,

00:48:21.410 --> 00:48:25.480
but what if you want to do something
before or after one of those actions?

00:48:25.560 --> 00:48:28.480
Well,
we have the ability in Xcode 4 to let

00:48:28.480 --> 00:48:33.720
you create custom pre- and post-actions
for all of the scheme actions,

00:48:33.800 --> 00:48:35.760
as well as for building.

00:48:36.060 --> 00:48:37.630
Now, this is really simple to do.

00:48:37.890 --> 00:48:42.040
All you need to do is open the scheme
editor and then click that disclosure

00:48:42.170 --> 00:48:46.920
triangle next to the action you want
to add a pre- or post-action to.

00:48:47.070 --> 00:48:50.050
And you'll see that there's
a section for pre-actions and

00:48:50.050 --> 00:48:54.100
a section for post-actions,
and if you select one of them,

00:48:56.470 --> 00:49:01.080
You'll get a nice blank canvas.

00:49:01.110 --> 00:49:05.790
Now, we allow you to create
run script scheme actions,

00:49:05.810 --> 00:49:10.610
which are very similar to run script
build phases as Rick already described.

00:49:10.740 --> 00:49:15.720
And these actions not only can
run arbitrary shell scripts,

00:49:15.720 --> 00:49:18.720
or any kind of script really,
because you can specify which

00:49:18.930 --> 00:49:22.360
scripting engine to use,
but they can also be supplied

00:49:22.510 --> 00:49:26.060
with information from a
target that's in the scheme,

00:49:26.060 --> 00:49:32.350
just like you have for arguments
and environment variables.

00:49:32.470 --> 00:49:37.090
So it'll be supplied with an environment
containing all of the build settings

00:49:37.090 --> 00:49:39.300
for whatever target you select.

00:49:39.360 --> 00:49:42.720
It'll also be passed some other
information about the action and

00:49:42.850 --> 00:49:47.850
about the workspace using the
environment variables as well.

00:49:48.930 --> 00:49:52.100
Now, if you want to send some
email after a build is done,

00:49:52.230 --> 00:49:56.350
say because you've archived something,
you've had a script uploaded to a server,

00:49:56.630 --> 00:49:58.800
and now you want to
tell your team about it,

00:49:59.010 --> 00:50:02.470
we also have a post
action or a pre-action,

00:50:02.600 --> 00:50:05.310
if you really want to send
email before an archive,

00:50:05.360 --> 00:50:10.120
that lets you specify the
name and the subject and the

00:50:10.150 --> 00:50:13.950
content of an email to send,
and it'll just use mail.app

00:50:13.950 --> 00:50:15.550
to send that email.

00:50:16.640 --> 00:50:21.360
Now, why would you use a custom scheme
action instead of a run script build

00:50:21.480 --> 00:50:23.740
phase like Rick described earlier?

00:50:23.880 --> 00:50:28.060
Well, the key thing to remember is
that build phases really help

00:50:28.200 --> 00:50:30.140
produce a product from a target.

00:50:30.290 --> 00:50:33.060
So if something is
inherent to your product,

00:50:33.160 --> 00:50:38.620
don't do it in a scheme action,
do it in a run script build phase.

00:50:38.760 --> 00:50:45.090
Conversely, a custom scheme action really
helps you prepare for or follow

00:50:45.090 --> 00:50:47.160
up on the rest of the action.

00:50:47.300 --> 00:50:50.310
So for example,
producing an archive and then having

00:50:50.310 --> 00:50:52.780
it uploaded to a server automatically.

00:50:53.610 --> 00:50:56.400
We've got a handy table here
to just give you some examples.

00:50:56.510 --> 00:50:59.740
So if you're generating
art assets for your game,

00:50:59.880 --> 00:51:03.730
you'll want to do that in a run script
build phase because chances are those art

00:51:03.880 --> 00:51:06.010
assets are really inherent to your game.

00:51:06.310 --> 00:51:10.210
You don't want them to be a side
effect of whatever action the

00:51:10.210 --> 00:51:12.620
user chose while using the IDE.

00:51:12.750 --> 00:51:15.440
On the other hand,
if you need to prepare some

00:51:15.490 --> 00:51:18.870
test data for your unit tests,
that's probably something you

00:51:18.870 --> 00:51:21.420
want to do in a pre-action script.

00:51:21.580 --> 00:51:24.860
And similarly, as I've been saying,
uploading an archive to a server

00:51:24.860 --> 00:51:28.860
is probably something you want
to do in a post-action script.

00:51:29.040 --> 00:51:31.510
Now let's see these in action.

00:51:35.290 --> 00:51:38.080
Let's say I'm working on
my Zip browser application,

00:51:38.100 --> 00:51:40.200
and I want to distribute it to testers.

00:51:40.280 --> 00:51:43.200
Of course, the way I'm going to prepare
it for distribution is to

00:51:43.300 --> 00:51:46.450
use the archive action,
but I don't want to

00:51:46.450 --> 00:51:49.430
constantly use the IDE,
produce an archive,

00:51:49.430 --> 00:51:53.080
extract an application from it,
upload that to a server manually.

00:51:53.280 --> 00:51:56.580
So instead,
I'm going to go to Edit Scheme

00:51:56.710 --> 00:52:00.830
and disclose my archive action,
and I'm just going to delete

00:52:00.910 --> 00:52:02.520
something quickly here.

00:52:02.720 --> 00:52:07.530
And I will add a new run
script action because I'd

00:52:07.650 --> 00:52:09.800
like to automate this process.

00:52:09.920 --> 00:52:13.750
Now because I'm actually going to be
archiving the Zip browser application,

00:52:13.770 --> 00:52:18.120
I'm going to choose to provide build
settings as environment variables from

00:52:18.200 --> 00:52:21.410
the Zip browser application target.

00:52:21.620 --> 00:52:24.640
And rather than type a bunch
of shell script at you,

00:52:24.640 --> 00:52:29.500
I have a text snippet here with some
script that I'm just going to paste in.

00:52:29.500 --> 00:52:33.330
And let me paste that in.

00:52:34.330 --> 00:52:36.540
So you can see here on
the very first line,

00:52:36.560 --> 00:52:40.590
what I'm doing is invoking
a command on an environment

00:52:40.590 --> 00:52:42.880
variable called workspace_path.

00:52:42.910 --> 00:52:46.420
This is passed to your
run_script scheme actions,

00:52:46.420 --> 00:52:49.500
and it contains the path to
the workspace file itself.

00:52:49.820 --> 00:52:51.970
So what I'm doing is I'm
getting the directory that

00:52:52.040 --> 00:52:55.610
contains the workspace file,
and then I'm running some other shell

00:52:55.800 --> 00:52:57.690
scripts from within that directory.

00:52:57.890 --> 00:53:01.450
And the reason I'm doing this is so
I don't have to hard code the directory

00:53:01.510 --> 00:53:03.510
that those scripts are in on my system.

00:53:03.560 --> 00:53:06.410
I don't need to install them
in user_local_bin or any

00:53:06.410 --> 00:53:07.980
other hard-coded location.

00:53:08.240 --> 00:53:11.380
They can just live with my workspace.

00:53:11.670 --> 00:53:14.800
And my first script just
generates a disk image.

00:53:14.830 --> 00:53:20.100
And one of the arguments I'm passing
to it is the contents of my archive.

00:53:20.230 --> 00:53:22.380
Specifically,
I'm using the archive product's

00:53:22.490 --> 00:53:25.340
path environment variable,
which is also supplied

00:53:25.910 --> 00:53:29.580
to the run script action.

00:53:30.120 --> 00:53:35.820
And that points into the content of
the products directory of the archive,

00:53:35.900 --> 00:53:38.130
which is what contains an
applications directory,

00:53:38.190 --> 00:53:40.870
which will contain my Zip browser app.

00:53:41.110 --> 00:53:44.770
And after I've generated a disk image,
I have a script that simulates

00:53:44.770 --> 00:53:46.300
uploading it to a server.

00:53:46.450 --> 00:53:48.470
And rather than actually
uploading it to a server,

00:53:48.470 --> 00:53:50.610
it's just going to copy it
to a directory and then open

00:53:50.610 --> 00:53:52.580
that directory in the finder.

00:53:53.020 --> 00:53:55.600
So I'm going to click
OK to add this script.

00:53:55.620 --> 00:53:59.680
But instead of invoking
archive from the IDE,

00:53:59.730 --> 00:54:03.340
I think I really want to make sure this
is something that can be automated.

00:54:03.340 --> 00:54:07.530
If I'm producing builds nightly
or continuously on a server,

00:54:07.580 --> 00:54:10.930
I'm not going to want to just send
things to the tester from the IDE.

00:54:11.000 --> 00:54:14.460
I'm going to want that
to do it automatically.

00:54:15.230 --> 00:54:17.440
So, I'm going to switch to the terminal.

00:54:17.480 --> 00:54:22.650
I'm just going to push D into my
directory here with my source code.

00:54:22.820 --> 00:54:25.310
And I can see that I have
my workspace in here.

00:54:25.310 --> 00:54:28.700
And now I'm just going to
use the Xcode build command.

00:54:28.790 --> 00:54:34.290
And this command now has
workspace and scheme arguments.

00:54:34.470 --> 00:54:40.260
So I'm going to specify a zip browser,
.xc workspace for the workspace argument.

00:54:40.330 --> 00:54:44.390
I'm going to specify scheme zip
browser for the scheme argument to

00:54:44.410 --> 00:54:49.710
tell it to build that scheme in that
workspace and build all of the targets,

00:54:49.710 --> 00:54:53.060
no matter what projects they're in,
for that scheme.

00:54:53.170 --> 00:54:56.260
And I'm going to, instead of just telling
Xcode build to build,

00:54:56.320 --> 00:54:59.980
I'm going to tell it to do
the new command archive.

00:55:00.120 --> 00:55:04.740
And that's going to generate my archive
and then perform my post archive actions.

00:55:04.850 --> 00:55:07.810
And we can see Xcode build is busy here.

00:55:08.050 --> 00:55:10.330
And now it's paused a little bit,
and that means it's

00:55:10.460 --> 00:55:11.740
generating my disk image.

00:55:11.850 --> 00:55:16.060
It's created my disk image and opened
the location containing it in the finder,

00:55:16.060 --> 00:55:18.540
just as my second script does.

00:55:18.680 --> 00:55:20.700
Now if I double-click my
Zip Browser disk image,

00:55:20.700 --> 00:55:24.860
and it mounts, I can see that it has my
applications directory in it,

00:55:24.860 --> 00:55:29.070
and that has my Zip Browser
application ready for my testers.

00:55:34.140 --> 00:55:36.030
So now let's return to slides.

00:55:36.030 --> 00:55:36.820
Rick Ballard, Chris Hanson

00:55:41.960 --> 00:55:45.820
And if you'd like more
information about Xcode 4,

00:55:45.890 --> 00:55:48.900
the person to get in touch with
is our developer evangelist,

00:55:48.960 --> 00:55:52.580
our developer tools evangelist,
Mike Jurowicz.

00:55:52.940 --> 00:55:56.000
We also have a ton of great
documentation in the Xcode 4

00:55:56.000 --> 00:56:00.320
User Guide at developer.apple.com
and on your systems when you install

00:56:00.320 --> 00:56:02.050
the latest documentation sets.

00:56:02.270 --> 00:56:04.540
And if you have questions,
in addition to the labs,

00:56:04.570 --> 00:56:07.240
we have the Apple Developer Forums.

00:56:07.290 --> 00:56:10.220
They're a great resource where
developers can help developers,

00:56:10.280 --> 00:56:12.540
and we're also on there.

00:56:13.230 --> 00:56:15.730
We have a bunch of related
sessions this week.

00:56:15.890 --> 00:56:20.100
Some have already happened,
and some are still coming up.

00:56:20.270 --> 00:56:24.680
So, go forth,
and I hope your schemes come to fruition.