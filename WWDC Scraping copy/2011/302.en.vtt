WEBVTT

00:00:10.210 --> 00:00:14.620
Good afternoon and welcome to
Using Interface Builder in Xcode 4.

00:00:14.720 --> 00:00:19.310
My name is Joey Hagedorn and I'm an
engineer on the Interface Builder team.

00:00:21.170 --> 00:00:24.060
Before we get started today,
I want to answer the question,

00:00:24.070 --> 00:00:25.670
what is Interface Builder?

00:00:25.750 --> 00:00:28.000
And simply,
it's the part of Xcode that we

00:00:28.000 --> 00:00:33.170
use to lay out the interface in
our Mac OS or iOS application

00:00:33.280 --> 00:00:37.990
and then connect that interface
to the rest of your application.

00:00:38.080 --> 00:00:40.570
One of the first things that we
learn about when we're learning

00:00:40.610 --> 00:00:45.900
to develop on Mac OS or iOS is the
model view controller design pattern.

00:00:45.920 --> 00:00:48.440
And Interface Builder works
really well with this,

00:00:48.460 --> 00:00:50.280
and it helps you sort of,

00:00:50.470 --> 00:00:55.130
See where the different layers break
down between the view layer and

00:00:55.130 --> 00:00:57.690
the controller layer underneath.

00:00:57.980 --> 00:01:01.730
So today, there are three big things
we're going to talk about.

00:01:01.830 --> 00:01:04.200
First, I'm going to give you a
tour of Interface Builder,

00:01:04.220 --> 00:01:06.070
just so you're familiar with
the different parts of the

00:01:06.140 --> 00:01:08.120
application and how it works.

00:01:08.120 --> 00:01:11.220
Then we're going to go on to
build a basic application.

00:01:11.220 --> 00:01:12.730
It's a Mac OS application.

00:01:12.750 --> 00:01:15.810
And then finally,
integrate a bunch of cool

00:01:15.810 --> 00:01:20.100
new line features to really
jazz up the application.

00:01:20.230 --> 00:01:24.160
So if you're an iOS developer,
this will be applicable too,

00:01:24.170 --> 00:01:29.440
because many of the concepts are
really the same between Mac OS and iOS

00:01:29.440 --> 00:01:30.870
with the stuff we're going over today.

00:01:31.100 --> 00:01:33.440
So yeah, this is what it looks like.

00:01:33.930 --> 00:01:37.150
Right in the middle we have the
design canvas and you do pretty

00:01:37.150 --> 00:01:39.310
much exactly what you'd expect here.

00:01:39.880 --> 00:01:43.940
Drag controls around, views,
position them on the canvas,

00:01:43.940 --> 00:01:47.910
change the way they look, select them.

00:01:47.910 --> 00:01:50.020
Pretty clear.

00:01:50.180 --> 00:01:53.550
The next part of the interface that
I'd like to draw your attention

00:01:53.770 --> 00:01:55.500
to is the objects library.

00:01:55.530 --> 00:01:58.930
And the objects library comes with
a bunch of preconfigured controls

00:01:58.970 --> 00:02:00.620
that you can use in your interface.

00:02:00.770 --> 00:02:03.820
You just drag them from the
objects library into the

00:02:03.820 --> 00:02:05.960
design canvas to start working.

00:02:07.760 --> 00:02:09.790
Once you drag them out there,
you need to configure them.

00:02:09.790 --> 00:02:12.660
So we do that in the
inspector area above.

00:02:12.660 --> 00:02:15.620
And there's three inspectors
I want to show you today.

00:02:15.620 --> 00:02:19.360
First, there's the identity inspector.

00:02:19.360 --> 00:02:23.740
And we use that to change attributes
about or change the identity

00:02:23.760 --> 00:02:26.140
of the object that's selected.

00:02:26.140 --> 00:02:29.200
So the controls you'll be dragging
out of the library are ones

00:02:29.200 --> 00:02:30.860
provided by AppKit or UIKit.

00:02:30.860 --> 00:02:33.880
And you might want to change
it to be a custom subclass

00:02:33.970 --> 00:02:36.000
that you implemented yourself.

00:02:36.000 --> 00:02:37.200
So you can do that here.

00:02:37.600 --> 00:02:40.290
and the identity inspector.

00:02:41.530 --> 00:02:43.560
The next one is the Attributes Inspector.

00:02:43.560 --> 00:02:47.330
And the Attributes Inspector we
use to change the way that

00:02:47.350 --> 00:02:51.120
controller view appears and behaves.

00:02:52.720 --> 00:02:56.100
And the last inspector I want to
show you is the size inspector.

00:02:56.100 --> 00:03:03.840
We use that to adjust the frame of the
object that's in the design canvas and

00:03:03.840 --> 00:03:09.960
also its size and how it behaves when
its containing view or window is resized.

00:03:10.130 --> 00:03:14.420
On iOS, we run into this when we
try to handle rotation.

00:03:17.460 --> 00:03:22.300
On the other side of the interface,
we have the structure area.

00:03:22.360 --> 00:03:24.930
And in the structure area,
you get a hierarchical layout

00:03:25.000 --> 00:03:28.660
of the different objects in
your Interface Builder file.

00:03:28.850 --> 00:03:30.940
So if you build a really
complex interface,

00:03:31.080 --> 00:03:36.950
this can be helpful for finding and
selecting objects that are a little

00:03:36.950 --> 00:03:41.270
bit more-- you don't immediately
see in the file you've created.

00:03:43.520 --> 00:03:47.560
Now, no less important but maybe a
little less visible at first

00:03:47.630 --> 00:03:49.080
is the making connections part.

00:03:49.080 --> 00:03:52.140
Once we design this interface,
it's really important to

00:03:52.240 --> 00:03:55.980
hook it up to the rest of the
application that you've built.

00:03:56.070 --> 00:04:00.200
So, for example, if you have this image
view that's selected,

00:04:00.200 --> 00:04:05.880
you'll want some way to control it to
perhaps set the image on it or change the

00:04:05.880 --> 00:04:09.150
image response to some user interaction.

00:04:09.150 --> 00:04:13.010
So, to do that,
we drag from the interface builder side

00:04:13.010 --> 00:04:18.210
over to the source code when we're using
Xcode's assistant editor and it inserts

00:04:18.270 --> 00:04:23.370
a property that's hooked up back to
that view that we made the outlet to.

00:04:23.530 --> 00:04:27.050
So, now,
any time we refer to that outlet,

00:04:27.050 --> 00:04:32.000
we're referring directly to
that view that is on screen.

00:04:32.000 --> 00:04:36.170
Another type of connection we
make is an action connection.

00:04:36.180 --> 00:04:36.540
So,
we're going to make a connection to the

00:04:36.550 --> 00:04:37.000
view that we made the action connection.

00:04:37.110 --> 00:04:37.240
So,
we're going to make a connection to the

00:04:37.240 --> 00:04:37.240
view that we made the action connection.

00:04:37.240 --> 00:04:37.500
So,
we're going to make a connection to the

00:04:37.510 --> 00:04:37.860
view that we made the action connection.

00:04:37.860 --> 00:04:41.040
So, if you have a button or a slider,
when the user interacts with it,

00:04:41.040 --> 00:04:43.400
we need to respond to that somehow.

00:04:43.530 --> 00:04:47.840
And by doing the same sort of action,
making a connection from that

00:04:48.130 --> 00:04:53.840
control over to the source code,
instead, we can insert an action method

00:04:53.840 --> 00:04:59.870
and implement that method to do
something when the user touches it.

00:05:03.310 --> 00:05:06.470
So, I mean,
that's the basic rundown of the

00:05:06.500 --> 00:05:13.660
different parts of the Interface
Builder interface within Xcode.

00:05:13.810 --> 00:05:19.960
The design canvas, library, inspectors,
and then making connections.

00:05:20.090 --> 00:05:24.940
So I think the best way to really
get a good grasp on this is to

00:05:24.940 --> 00:05:28.280
just start building an application
so I can show you how it works.

00:05:29.600 --> 00:05:31.740
Take a look at our app here.

00:05:31.800 --> 00:05:33.900
This is what we're
going to start out with.

00:05:33.900 --> 00:05:38.340
And it's a simple utility that helps
us identify different directories on

00:05:38.340 --> 00:05:42.150
our hard disk and see how much space
they're taking so we can find out what's

00:05:42.210 --> 00:05:44.080
using up all our space on the disk.

00:05:44.080 --> 00:05:48.590
This is a little basic,
but this is what we'll start

00:05:48.590 --> 00:05:51.570
with to see how the tool is used.

00:05:51.950 --> 00:05:56.530
Here we are in Interface Builder,
and to begin designing this,

00:05:56.760 --> 00:05:59.830
I want to grab a table view
out of the objects library

00:05:59.980 --> 00:06:02.040
and put it onto the screen.

00:06:02.040 --> 00:06:06.720
So I'm going to go up and show
the utilities area from the button

00:06:06.720 --> 00:06:10.440
in the toolbar and come down
to the library at the bottom,

00:06:10.640 --> 00:06:13.620
type "filter down to table view."

00:06:13.860 --> 00:06:15.940
And simply drag one out.

00:06:15.960 --> 00:06:19.940
As I do this, before I let go,
I'm going to line up the blue layout

00:06:19.960 --> 00:06:26.720
guides that will help me make sure
this view is laid out in accordance

00:06:26.800 --> 00:06:28.120
with the user interface guidelines.

00:06:28.120 --> 00:06:35.070
So I'll let go and resize it,
fill the window also using layout guides.

00:06:35.070 --> 00:06:38.570
And now I want to fix up the
table view so it looks sort of

00:06:38.600 --> 00:06:42.310
like how we want it to behave,
how we want it to look.

00:06:43.800 --> 00:06:47.190
I'll click again to select it and
one more time to go inside to get the

00:06:47.290 --> 00:06:51.420
table column and simply resize this.

00:06:52.110 --> 00:06:56.400
I want those blue and white
stripes for alternating row color.

00:06:56.560 --> 00:07:02.560
So I'll click outside to deselect and
then select again to get the table view.

00:07:02.560 --> 00:07:06.100
Now we're looking at that over
in the attributes inspector,

00:07:06.100 --> 00:07:09.630
fourth tab,
and if I look down the different options,

00:07:09.630 --> 00:07:11.930
one of them is alternating rows.

00:07:12.640 --> 00:07:16.040
and we've set it up.

00:07:16.040 --> 00:07:20.110
At this point,
the interface pretty much looks like

00:07:20.250 --> 00:07:23.610
Just like that picture that I showed you,
I mean, there's no content yet

00:07:23.750 --> 00:07:26.700
because our app's not running,
but the visual layout

00:07:26.700 --> 00:07:27.640
is where we want it.

00:07:27.740 --> 00:07:33.160
But the thing I haven't done yet is
hook it up to the code underneath.

00:07:34.770 --> 00:07:36.720
There's a couple things to do.

00:07:36.730 --> 00:07:39.280
First, a little bit about table views.

00:07:39.570 --> 00:07:43.690
The way that they work, in this example,
is a cell-based table view.

00:07:43.830 --> 00:07:47.510
It has a data source and delegate
object that it refers to,

00:07:47.510 --> 00:07:51.940
and it asks those objects questions like,
how many rows does it have,

00:07:51.940 --> 00:07:57.100
and what are the content of those rows,
before it draws itself on screen.

00:07:57.620 --> 00:08:02.250
So we need to make those connections to,
I've already implemented those

00:08:02.250 --> 00:08:04.960
methods in the application delegate.

00:08:04.960 --> 00:08:07.390
I could show you the
source code for that.

00:08:07.480 --> 00:08:08.610
Pretty simple.

00:08:09.690 --> 00:08:14.830
Right here at the bottom,
we've got a couple of methods here that

00:08:15.110 --> 00:08:19.480
just answer those questions for the table
view in our application delegate object.

00:08:19.480 --> 00:08:22.010
And also,
we refer to the table view right in

00:08:22.070 --> 00:08:26.410
our application did finish launching
method to tell it to reload data.

00:08:26.420 --> 00:08:29.620
So let's establish these connections.

00:08:31.970 --> 00:08:37.020
Back in our Nib file,
if I hold down Control and

00:08:37.020 --> 00:08:43.730
click on the table view,
the connections panel comes up,

00:08:43.730 --> 00:08:48.160
and we see we have the delegate
and data source outlets there,

00:08:48.160 --> 00:08:50.580
but they're not connected to anything.

00:08:50.900 --> 00:08:53.350
I'm going to go ahead and
show the structure area here

00:08:53.590 --> 00:08:57.860
to make it a little easier,
bring that panel back up.

00:08:57.970 --> 00:09:04.440
And then if I just drag from data source
to the application delegate object,

00:09:04.540 --> 00:09:10.500
do the same thing with delegate,
now the table view knows which objects to

00:09:10.500 --> 00:09:13.550
go check with to answer those questions.

00:09:16.100 --> 00:09:23.090
I'm going to hide the project navigator
here and bring up our assistant editor.

00:09:23.210 --> 00:09:26.240
Now, the assistant editor is in
automatic mode right now,

00:09:26.240 --> 00:09:30.740
and that means Xcode is going
to try and find the source file

00:09:30.740 --> 00:09:33.360
that it thinks is most relevant
to the selected object right now.

00:09:33.360 --> 00:09:39.260
We could go into manual mode or
there's a couple different split modes,

00:09:39.260 --> 00:09:39.260
but automatic is what we want right now.

00:09:39.480 --> 00:09:42.200
And I'm going to hold down
Control and click on the

00:09:42.310 --> 00:09:48.050
table view here and establish,
let go right in the source code

00:09:48.080 --> 00:09:52.530
under the other property there,
and choose to insert an outlet

00:09:52.600 --> 00:09:55.970
connection called main table view.

00:09:57.650 --> 00:10:01.710
When I do that,
we now have a IBOutlet property

00:10:02.080 --> 00:10:05.490
that when we refer to it in source,
we're talking about that table view.

00:10:05.500 --> 00:10:13.500
So if I switch back to basic mode
here and run the application,

00:10:13.520 --> 00:10:16.410
we have a working basic application.

00:10:16.500 --> 00:10:21.490
So with that,
we've laid out our interface.

00:10:21.700 --> 00:10:23.580
Change some of the
properties so it looked,

00:10:23.610 --> 00:10:25.480
change some of the attributes
of the table view so it looked

00:10:25.660 --> 00:10:27.540
just like we wanted it to look.

00:10:27.540 --> 00:10:37.570
And then made connections so
that it actually did something.

00:10:41.340 --> 00:10:45.800
That's fine,
but it's kind of a bland little demo app.

00:10:45.830 --> 00:10:50.700
Let's add some new Lion features
to make it work better.

00:10:56.730 --> 00:11:00.210
So here's what our app
looks like right now.

00:11:00.450 --> 00:11:03.140
The first thing that we can
add really easily in Interface

00:11:03.280 --> 00:11:05.680
Builder is full screen mode.

00:11:06.650 --> 00:11:08.700
We'll do that.

00:11:08.700 --> 00:11:11.430
Then I think this really
enhances the interface.

00:11:11.590 --> 00:11:14.680
Rather than using the traditional
cell-based table views,

00:11:14.730 --> 00:11:17.320
we'll switch to a view-based table view.

00:11:17.330 --> 00:11:20.340
Rather than running a custom
NSL subclass to do this,

00:11:20.350 --> 00:11:23.160
we can design our views
in Interface Builder.

00:11:23.180 --> 00:11:26.570
This is similar to how
table views work on iOS.

00:11:26.580 --> 00:11:30.530
And then finally, we can add a table view

00:11:32.500 --> 00:11:37.560
will add this NSPopover with
a custom view that displays a

00:11:37.560 --> 00:11:42.020
tree map of the contents of our
directory and use Auto Layout to

00:11:42.900 --> 00:11:44.060
lay it out much more effectively.

00:11:44.060 --> 00:11:46.670
My colleague Kevin Cathey
will come on stage later to

00:11:46.690 --> 00:11:48.560
demonstrate some of those things.

00:11:51.110 --> 00:11:54.650
I'll just get moving with
adding those features.

00:11:54.770 --> 00:11:58.490
Before we start on the line features,
there's one more thing that

00:11:58.490 --> 00:12:02.730
I didn't do in the previous demo,
and that was adjust the way-- I didn't

00:12:02.730 --> 00:12:07.930
go to the size inspector and adjust
the way that the table view behaves

00:12:08.260 --> 00:12:11.670
behaves when the window is resized.

00:12:11.800 --> 00:12:16.780
So all I need to do is select
the scroll view and then head

00:12:16.780 --> 00:12:19.650
over to the size inspector and

00:12:20.340 --> 00:12:24.420
We have a little example of what's going
to happen when the window is resized.

00:12:24.580 --> 00:12:26.940
You can see that the red dot
is going to be our table view,

00:12:26.940 --> 00:12:33.370
and the window will just get larger
and smaller around it with no effect.

00:12:33.530 --> 00:12:37.260
So to fix that,
we can adjust the auto-resizing mask

00:12:37.300 --> 00:12:43.120
by indicating it should expand when its
container expands and indicate a fixed

00:12:43.350 --> 00:12:46.360
border between it and its enclosing view.

00:12:46.420 --> 00:12:49.340
And now it'll behave properly.

00:12:50.790 --> 00:12:55.400
This is important to do when
trying to support rotation on iOS,

00:12:55.480 --> 00:13:00.600
but we've got a better solution
for using Auto Layout on Mac OS X a

00:13:00.610 --> 00:13:02.660
little bit later in the talk.

00:13:04.170 --> 00:13:06.400
So back to those Lion features.

00:13:06.470 --> 00:13:09.630
First thing to do is
support full screen mode.

00:13:09.870 --> 00:13:12.950
This is really easy in Xcode 4.

00:13:13.100 --> 00:13:15.680
So we'll just select the window.

00:13:15.830 --> 00:13:18.770
Choose the attributes inspector,
the fourth tab.

00:13:18.800 --> 00:13:23.600
And if we look down here,
there's an option for full screen.

00:13:23.630 --> 00:13:26.820
If we just change it from
unsupported to primary window,

00:13:26.850 --> 00:13:30.030
we've adopted full
screen with this window.

00:13:30.190 --> 00:13:31.500
Pretty easy.

00:13:31.520 --> 00:13:33.710
But--

00:13:35.900 --> 00:13:39.170
We should also probably add the
default menu item so that users can

00:13:39.240 --> 00:13:41.390
easily get into full screen mode.

00:13:41.470 --> 00:13:44.000
I'll open the window
menu by clicking on it,

00:13:44.070 --> 00:13:46.740
go down to the objects library,

00:13:48.800 --> 00:13:54.460
Type in "full" for full screen.

00:13:54.460 --> 00:13:56.900
And just drop the menu item in there.

00:13:56.910 --> 00:13:59.550
Now we've really fully done it.

00:14:00.950 --> 00:14:03.650
Next, let's get started on the
real enhancement here,

00:14:03.660 --> 00:14:07.860
which is adding the
view-based table view.

00:14:08.240 --> 00:14:11.920
So for one, because we have the power
to design each of the cells

00:14:12.220 --> 00:14:15.780
directly in Interface Builder,
we don't need a couple columns anymore.

00:14:15.860 --> 00:14:18.370
We can just do it with
one more interesting cell.

00:14:18.380 --> 00:14:23.330
So select the table view and change the
number of columns from two down to one.

00:14:23.720 --> 00:14:25.500
I'm going to do some more resizing.

00:14:25.500 --> 00:14:30.390
So I'll resize this column
to fill the whole table view.

00:14:30.490 --> 00:14:34.100
And then I'll go down to the
Objects Library and switch

00:14:34.100 --> 00:14:35.630
it into view-based mode.

00:14:35.850 --> 00:14:40.270
So all I need to do to do that is grab a

00:14:40.700 --> 00:15:10.800
[Transcript missing]

00:15:11.170 --> 00:15:13.860
A little bigger, 64 pixels looks good.

00:15:14.080 --> 00:15:17.100
And I can start laying out the cell.

00:15:17.200 --> 00:15:20.950
The cell that I'm laying out is
going to be the prototype that

00:15:20.950 --> 00:15:23.440
will be used in each of the rows.

00:15:23.600 --> 00:15:27.640
So I just fill out this one cell
that's used as the prototype.

00:15:27.640 --> 00:15:30.940
Then in one of the table
view delegate methods,

00:15:31.050 --> 00:15:33.430
we fill it in with all of the data.

00:15:34.490 --> 00:15:39.260
So I'll do a little more layout here,
make the image a little bigger.

00:15:39.260 --> 00:15:43.930
If I hold down Shift,
I can resize proportionally.

00:15:44.100 --> 00:15:47.940
I can use the arrow
keys to nudge the label.

00:15:47.940 --> 00:15:52.620
And I want another one pretty
much just like it for the...

00:15:53.160 --> 00:15:54.320
This one will be for the path.

00:15:54.410 --> 00:15:55.440
I want one for the size.

00:15:55.440 --> 00:15:59.930
So I'll go to Edit and choose Duplicate.

00:16:00.110 --> 00:16:01.760
Got a copy of it.

00:16:01.900 --> 00:16:04.240
Can drag it around.

00:16:04.240 --> 00:16:06.440
This one I want to be a
little bit diminutive,

00:16:06.610 --> 00:16:11.990
so I can go back to the size
inspector and change the size

00:16:11.990 --> 00:16:14.620
from regular down to small.

00:16:14.640 --> 00:16:16.760
And also back in the
attributes inspector,

00:16:16.790 --> 00:16:21.320
I'm gonna change the text
color from black to dark gray

00:16:21.320 --> 00:16:23.260
that I picked out earlier.

00:16:23.290 --> 00:16:25.420
I'm gonna give them a
couple labels as well,

00:16:25.420 --> 00:16:27.210
just so we remember what they're for.

00:16:27.220 --> 00:16:27.950
Path.

00:16:28.270 --> 00:16:29.200
So path.

00:16:29.200 --> 00:16:33.250
And size.

00:16:37.430 --> 00:16:40.890
To explain a little bit more about
how the V-Base TableView works,

00:16:40.950 --> 00:16:46.270
I'd like to show you the source code
changes that'll be necessary in our

00:16:46.560 --> 00:16:49.630
TableView delegate and data source.

00:16:49.860 --> 00:16:56.690
So I'll show the project navigator and
look back at the application delegate.

00:16:57.130 --> 00:16:59.680
The number of rows is
going to stay the same,

00:16:59.680 --> 00:17:04.310
but I'm going to have a different
implementation of object value for table,

00:17:04.310 --> 00:17:05.060
column, and row.

00:17:05.060 --> 00:17:08.510
So I'm going to delete this
and paste in my new one.

00:17:08.520 --> 00:17:10.820
And I'm also going to
implement this method,

00:17:10.820 --> 00:17:13.010
view for table, column, row.

00:17:14.780 --> 00:17:18.240
Every time the table view
goes to display a cell,

00:17:18.330 --> 00:17:20.100
it's going to call this method.

00:17:20.120 --> 00:17:24.330
And inside this method,
we're going to ask the table view to make

00:17:24.330 --> 00:17:26.560
a view with the identifier main cell.

00:17:26.560 --> 00:17:30.400
And then we'll refer to
properties on that cell.

00:17:30.400 --> 00:17:36.330
So these are outlets to set the image,
the string of the path,

00:17:36.340 --> 00:17:39.780
and the string for the file size.

00:17:40.120 --> 00:17:44.880
The NS TableView cell class already
has two of these outlets established.

00:17:44.880 --> 00:17:49.920
So when we dragged out the view
with the gear on it and the label,

00:17:49.920 --> 00:17:57.730
the image was already tied to the
image view outlet and the label

00:17:57.730 --> 00:18:00.880
was tied to the text field outlet.

00:18:00.880 --> 00:18:06.740
But we need to add one more
outlet for the size text field.

00:18:07.370 --> 00:18:11.660
So to do that, I've got a custom subclass
of NS Table Cell View.

00:18:11.660 --> 00:18:15.140
So I'm just going to drag
that in that I prepared.

00:18:20.080 --> 00:18:20.840
It's really simple.

00:18:20.840 --> 00:18:25.430
The only implementation
is this one property.

00:18:25.480 --> 00:18:31.900
And I'm going to import that header here.

00:18:33.720 --> 00:18:38.740
And if I switch back to the nib file,
we need to go adopt those changes.

00:18:38.740 --> 00:18:43.130
So one,
when we ask the table view for the

00:18:43.730 --> 00:18:46.310
view with the given identifier,
we want to make sure we get

00:18:46.310 --> 00:18:50.000
back an instance of our custom
table cell view subclass.

00:18:50.000 --> 00:18:53.120
So I'm going to select
the table cell view.

00:18:53.120 --> 00:18:57.680
I'm going to use the structure area
to do so by just disclosing down

00:18:57.680 --> 00:19:02.810
into the table view the first column
and the table cell view there.

00:19:04.700 --> 00:19:07.980
And in the identity inspector,
I'll type in the custom subclass.

00:19:08.230 --> 00:19:13.540
Additionally, we need to tell the table
view this cell's identifier,

00:19:13.540 --> 00:19:19.380
which is main cell,
which I wrote in the delegate method.

00:19:22.100 --> 00:19:26.110
So now when we call that method on
the table view in the delegate method,

00:19:26.110 --> 00:19:29.440
we'll get back a table cell
view with this subclass,

00:19:29.440 --> 00:19:33.500
and we've identified
it by this identifier.

00:19:33.520 --> 00:19:37.990
The other thing we need to do
is hook up that outlet for the

00:19:38.280 --> 00:19:40.260
Subtitle label.

00:19:40.650 --> 00:19:47.240
So if I hold down Control and bring
up the Connections panel when I click,

00:19:47.310 --> 00:19:56.420
I'm able to make a connection directly
to the text field there and close this.

00:19:56.910 --> 00:19:59.670
And I can build and run my application

00:20:02.440 --> 00:20:06.340
And at this point, we have a much more
interesting table view.

00:20:06.620 --> 00:20:09.110
We can take it full screen.

00:20:10.700 --> 00:20:17.670
That works fine.

00:20:17.670 --> 00:20:17.670
So with that, we've adopted

00:20:19.960 --> 00:20:24.100
A couple of our new Lion features,
including full screen and

00:20:24.100 --> 00:20:26.100
view-based table views.

00:20:26.360 --> 00:20:29.700
I'd like to introduce my colleague
Kevin Cathey to show you a couple more

00:20:29.700 --> 00:20:34.170
of the interesting features we have
here in Interface Builder in Xcode 4.

00:20:34.490 --> 00:20:35.890
Kevin?

00:20:41.800 --> 00:20:43.200
All right, good afternoon, everyone.

00:20:43.200 --> 00:20:43.800
How are you guys all doing?

00:20:43.800 --> 00:20:44.680
Excellent.

00:20:44.680 --> 00:20:45.800
Good, good to hear.

00:20:45.800 --> 00:20:48.360
All right,
I'd like to talk about two more

00:20:48.860 --> 00:20:51.680
features that are new in line that
we've integrated into Interface Builder,

00:20:51.680 --> 00:20:53.520
and I'm going to start with popovers.

00:20:53.520 --> 00:20:57.680
And this popover is just a class that
allows you to take a view controller of

00:20:57.850 --> 00:21:00.990
content and pop it over your interface.

00:21:01.100 --> 00:21:03.080
And the easiest way to
show that to you is,

00:21:03.080 --> 00:21:04.180
of course, a demo.

00:21:04.180 --> 00:21:07.240
All right,
so I'm just going to hide this.

00:21:07.310 --> 00:21:08.260
I don't need this anymore.

00:21:08.260 --> 00:21:10.560
And let's go ahead and
hide the navigators,

00:21:10.560 --> 00:21:12.540
too, so we can focus on our interface.

00:21:12.580 --> 00:21:16.620
All right, so adding a popover to your
Interface Builder document is as

00:21:16.620 --> 00:21:18.190
simple as just dragging it in.

00:21:18.250 --> 00:21:22.740
So I can go down to the library
here and search for popover.

00:21:22.740 --> 00:21:23.970
All right.

00:21:25.420 --> 00:21:26.250
There it is.

00:21:26.340 --> 00:21:29.110
And you can see when
I drag it and drop it in,

00:21:29.130 --> 00:21:30.140
I'm actually getting two things.

00:21:30.140 --> 00:21:33.230
One, I'm getting the actual
popover controller itself.

00:21:33.370 --> 00:21:35.020
And secondly,
I'm getting a view controller.

00:21:35.020 --> 00:21:37.680
Again,
a popover is driven by a view controller.

00:21:37.680 --> 00:21:39.420
That's what shows the content.

00:21:39.420 --> 00:21:42.590
So Interface Builder will add
one for you automatically.

00:21:44.370 --> 00:21:48.140
Now, as is common with iOS,
also common with Mac OS X,

00:21:48.140 --> 00:21:50.670
when we have view controllers,
we want subclasses of view controllers.

00:21:50.680 --> 00:21:52.700
And this particular case is no different.

00:21:52.700 --> 00:21:56.280
So I have a view controller class that
I've already created for my popover.

00:21:56.280 --> 00:21:58.580
And it's really simple,
and I'll show it to you in a second.

00:21:58.580 --> 00:22:00.360
Let me just start by dragging that in.

00:22:02.650 --> 00:22:05.160
Drag that guy in,
and we're going to copy him in,

00:22:05.160 --> 00:22:05.630
and there we go.

00:22:05.660 --> 00:22:10.080
If we look at the code for this,
it's really, really simple.

00:22:10.080 --> 00:22:14.480
This method and this method are
delegate methods that are from the

00:22:14.480 --> 00:22:19.480
popover that just indicate particular
points of the lifecycle of the popover.

00:22:19.480 --> 00:22:22.000
In this case, we have some data that
we want to pass over,

00:22:22.000 --> 00:22:23.800
as Joey showed you that
screenshot earlier,

00:22:23.800 --> 00:22:25.580
that big, awesome tree map.

00:22:25.680 --> 00:22:27.840
We want to make sure that we
pass off the folder that we

00:22:27.840 --> 00:22:31.660
clicked the detail button for,
and so when we show the popover,

00:22:31.660 --> 00:22:33.160
we want to sync that
up to our tree map and,

00:22:33.290 --> 00:22:35.000
of course, tear it down when we close.

00:22:35.080 --> 00:22:38.780
This method,
the detachable window for popover,

00:22:38.780 --> 00:22:42.620
means that when the user grabs
the popover and drags it,

00:22:42.680 --> 00:22:44.840
they can actually drag it
off into a floating window.

00:22:44.840 --> 00:22:48.740
So I've implemented that as well to
take advantage of that functionality.

00:22:48.740 --> 00:22:52.940
So let's go back to our main
nib file and hook this up.

00:22:54.450 --> 00:22:56.620
So I'm going to close that guy.

00:22:56.720 --> 00:23:01.460
And we're going to select our Popover
View Controller and set the custom class.

00:23:01.660 --> 00:23:03.540
to NSPopover View Controller.

00:23:03.690 --> 00:23:05.580
So just an aside of what this means.

00:23:05.580 --> 00:23:08.500
When I set the custom class of
an object in Interface Builder,

00:23:08.510 --> 00:23:13.240
what I'm saying is, hey, at runtime,
I want this object to be of this class.

00:23:13.250 --> 00:23:15.310
When you're working with
objects in Interface Builder,

00:23:15.310 --> 00:23:16.940
you're working with real live objects.

00:23:16.940 --> 00:23:19.150
That's a real view controller.

00:23:19.260 --> 00:23:23.120
But what I can say is at runtime,
I want my own custom class of

00:23:23.180 --> 00:23:25.500
that class to be substituted in.

00:23:25.500 --> 00:23:28.460
If you'd like more
information about that,

00:23:28.460 --> 00:23:29.370
check out our documentation to find more.

00:23:29.830 --> 00:23:33.370
So I set the custom class of our popover,
but I also want to set the nib file

00:23:33.650 --> 00:23:36.500
so it loads the right nib file,
and I can just set that

00:23:36.530 --> 00:23:38.940
by typing it in there.

00:23:39.170 --> 00:23:41.520
As I mentioned and I showed
you in the source code,

00:23:41.540 --> 00:23:44.120
there are a couple delegate methods
of the popover that we're using

00:23:44.400 --> 00:23:46.280
to help customize our popover.

00:23:46.340 --> 00:23:48.440
Now,
the delegate of the popover is not set

00:23:48.580 --> 00:23:51.410
automatically when you drag it out,
so we're going to set the

00:23:51.440 --> 00:23:54.730
delegate of our popover,
in this case, to our view controller,

00:23:54.730 --> 00:23:57.270
but you could set it to any
controller that you want.

00:23:58.160 --> 00:24:01.970
If I right click on the popover,
you can see we have a

00:24:01.970 --> 00:24:04.580
delegate outlet here.

00:24:04.600 --> 00:24:09.290
I'm just going to drag that and connect
it right to my popover view controller.

00:24:09.620 --> 00:24:11.660
and that's how easy it is to set it up.

00:24:11.860 --> 00:24:13.860
But we don't have
anything yet to show it.

00:24:13.860 --> 00:24:16.500
So let's add a button and let's
wire up some outlets so that we can

00:24:16.500 --> 00:24:19.960
reference it in our code and show it.

00:24:20.100 --> 00:24:22.100
So I'm going to add a button.

00:24:24.090 --> 00:24:28.000
and I'm going to use
this rounded rec button.

00:24:28.000 --> 00:24:33.590
I'm going to change the
title to show details.

00:24:33.790 --> 00:24:36.570
And because I'm not yet using
Auto Layout in my document,

00:24:36.570 --> 00:24:40.060
I'm going to set the springs and struts
so that when the table view resizes,

00:24:40.060 --> 00:24:41.040
it goes in the correct position.

00:24:41.040 --> 00:24:43.810
And I can do that from
the size inspector.

00:24:44.900 --> 00:24:48.090
is going to be anchored in
the middle on the right there.

00:24:48.090 --> 00:24:49.010
All right.

00:24:49.120 --> 00:24:52.600
So now we need to actually insert
some code to show the popover.

00:24:52.600 --> 00:24:55.900
And showing the popover is actually
just going to be one line of code.

00:24:56.210 --> 00:25:00.380
So I'm going to open the assistant so
we can make some outlets and actions.

00:25:01.270 --> 00:25:03.530
So the first thing is I want to
be able to reference my popover

00:25:03.530 --> 00:25:05.630
view controller and my popover.

00:25:05.630 --> 00:25:06.980
So I'm going to create outlets for those.

00:25:07.200 --> 00:25:10.080
So I can just control drag
right into my source code.

00:25:10.080 --> 00:25:13.840
Popover view controller.

00:25:13.840 --> 00:25:15.090
Sweet.

00:25:15.180 --> 00:25:18.670
And let's also do popover.

00:25:20.610 --> 00:25:26.920
And now I want to show you that by using
connect to source with Interface Builder,

00:25:26.920 --> 00:25:29.380
when we actually insert the outlet,
we're generating all the

00:25:29.530 --> 00:25:31.980
code that is necessary for,
in this case, a property.

00:25:32.000 --> 00:25:35.260
So if I switch to the .m file,
which I can do by doing

00:25:35.260 --> 00:25:38.260
the navigate menu,
jump to next counterpart,

00:25:38.260 --> 00:25:39.980
or the key equivalent.

00:25:41.520 --> 00:25:45.160
You can see that we've synthesized our
popover and popover view controller.

00:25:45.240 --> 00:25:48.190
If you're working on iOS and
you insert a property outlet,

00:25:48.330 --> 00:25:52.180
for example, we will not only insert the
declaration and the IVAR declaration,

00:25:52.340 --> 00:25:54.550
the at synthesize,
if you have a dialog method,

00:25:54.550 --> 00:25:57.010
we'll also add the release
for the instance variable,

00:25:57.010 --> 00:25:59.220
and if your file is owner,
it's a view controller,

00:25:59.300 --> 00:26:02.780
we'll even insert the kneeling out
of the property and view to unload.

00:26:02.780 --> 00:26:07.510
So all the work that is necessary
to make sure that's done safely.

00:26:07.900 --> 00:26:10.260
So we've got our outlets in place,
and I want to insert an action.

00:26:10.260 --> 00:26:12.520
Now,
I could switch back to the header file

00:26:12.610 --> 00:26:17.950
and insert the declaration of my action,
but then my action would be visible to

00:26:18.110 --> 00:26:21.030
everyone who is going to use my class.

00:26:21.090 --> 00:26:22.120
I don't really want that.

00:26:22.140 --> 00:26:24.080
I kind of want this to be private
to just the implementation.

00:26:25.310 --> 00:26:30.730
Using connect to source
with Interface Builder,

00:26:30.730 --> 00:26:39.030
I can actually just control drag
actions right into the .m file.

00:26:39.030 --> 00:26:39.030
So let me scroll down to
the bottom of the file,

00:26:39.030 --> 00:26:39.030
select my button, control drag in.

00:26:39.530 --> 00:26:41.710
Show details.

00:26:41.830 --> 00:26:44.500
And now I have an action right
here with no need to put the

00:26:44.500 --> 00:26:46.970
declaration in the header file.

00:26:47.970 --> 00:26:51.020
All right, so I promised you that showing
the popover is one line of code,

00:26:51.170 --> 00:26:53.010
and here it is.

00:26:53.580 --> 00:26:56.370
All you say is say, hey, popover,
show relative to this

00:26:56.400 --> 00:26:59.440
rectangle of this view,
and then you can pass a parameter

00:26:59.440 --> 00:27:02.160
that specifies which direction
you want the arrow pointing.

00:27:02.160 --> 00:27:03.260
It's that easy.

00:27:03.280 --> 00:27:05.840
Now, we do have a custom subclass
of our view controller,

00:27:05.840 --> 00:27:08.810
so we want to make sure we propagate
our data for the folder that we've

00:27:08.810 --> 00:27:10.540
clicked the details buttons for.

00:27:10.540 --> 00:27:14.760
And so that's just good old boilerplate
code to just pass along the data.

00:27:14.760 --> 00:27:19.370
And then we have to insert our
import for our custom subclass.

00:27:20.400 --> 00:27:22.420
And I really like my
headers all organized,

00:27:22.420 --> 00:27:24.140
so I'm going to put it at the top.

00:27:25.940 --> 00:27:26.800
Great.

00:27:26.800 --> 00:27:28.410
So now we've hooked up all
the actions and outlets,

00:27:28.410 --> 00:27:30.760
dragged out our popover,
and let's see it in action.

00:27:30.760 --> 00:27:32.940
I can launch this.

00:27:33.000 --> 00:27:35.100
Oh, and we get a build failure.

00:27:35.100 --> 00:27:36.870
Let's check out what that is.

00:27:38.650 --> 00:27:42.200
I can show this by jumping
right to the fourth tab of,

00:27:42.200 --> 00:27:44.470
the fourth navigator rather.

00:27:44.650 --> 00:27:50.050
and you can see that there is a file in
here that has a missing import or has

00:27:50.050 --> 00:27:52.380
an import for a file that doesn't exist.

00:27:52.430 --> 00:27:53.440
So we can nil that out.

00:27:53.480 --> 00:27:56.230
You can see how easy it was to use
the issues navigator to resolve

00:27:56.320 --> 00:27:58.680
the build issues in your project.

00:27:58.680 --> 00:28:02.260
You don't need this, so let's run this.

00:28:05.020 --> 00:28:06.520
All right, and here's our application.

00:28:06.560 --> 00:28:10.160
I can click on the show details button,
and we get a popover,

00:28:10.160 --> 00:28:12.500
but there's really no content yet.

00:28:12.500 --> 00:28:13.540
We'll talk about that in a second.

00:28:13.540 --> 00:28:14.240
I can drag it.

00:28:14.340 --> 00:28:16.540
It becomes a window,
which is resizable and

00:28:16.540 --> 00:28:18.020
positionable for the user.

00:28:18.050 --> 00:28:19.780
It's that easy to add a popover.

00:28:19.800 --> 00:28:23.740
Now, thanks.

00:28:28.300 --> 00:28:31.240
So there is no content in here,
so let's lay out some

00:28:31.240 --> 00:28:34.190
views in our popover,
and we're going to do this using a new

00:28:34.190 --> 00:28:36.200
technology in line called Auto Layout.

00:28:39.390 --> 00:28:40.260
So what is Auto Layout?

00:28:40.260 --> 00:28:43.940
We've talked about it a couple
times so far in the conference.

00:28:43.990 --> 00:28:46.140
And I just want to reiterate some of
the things that we've been talking

00:28:46.140 --> 00:28:48.930
about and add a little bit more detail.

00:28:49.100 --> 00:28:51.340
So in classic layout,
when you're dragging a view in

00:28:51.340 --> 00:28:54.420
Interface Builder or in code
when you're setting set frame,

00:28:54.470 --> 00:28:56.760
for example, you'll get these guides.

00:28:56.780 --> 00:29:00.260
You can see on the screen these
layout guides which help you position

00:29:00.260 --> 00:29:03.750
the views in accordance to the human
interface guidelines that we've

00:29:03.830 --> 00:29:07.770
defined for both Mac OS and iOS.

00:29:08.060 --> 00:29:10.860
Now, we've taken these-- what's
interesting about these guides is the

00:29:10.860 --> 00:29:13.460
relationships that they correspond.

00:29:13.490 --> 00:29:17.000
But they still are only
one-time visual helpers.

00:29:17.050 --> 00:29:23.290
As soon as I let go of the
button in Interface Builder,

00:29:23.290 --> 00:29:23.290
the guides disappear,
and I'm left with only a frame.

00:29:23.660 --> 00:29:27.400
Now, by using only a frame to determine
the position and size of review,

00:29:27.450 --> 00:29:29.930
that means that it can't
respond to changes in the

00:29:29.940 --> 00:29:31.560
content of your application.

00:29:31.610 --> 00:29:33.260
If, for example,
the string of this button were

00:29:33.260 --> 00:29:36.110
to change to something longer,
the content will be clipped because

00:29:36.110 --> 00:29:38.190
the button isn't large enough.

00:29:39.360 --> 00:29:41.020
With Auto Layout,
what we're doing is we're taking

00:29:41.020 --> 00:29:45.090
these guides and other things,
and we're freezing these relationships

00:29:45.210 --> 00:29:49.600
that those guides represent
into objects called constraints.

00:29:51.020 --> 00:29:54.260
Then at runtime,
instead of the frame being both

00:29:54.360 --> 00:29:58.000
the input and output for the
position and location of your view

00:29:58.000 --> 00:30:01.920
in your window or in your view,
it's rather just the output.

00:30:01.920 --> 00:30:06.050
The constraints or these
relationships are what govern the

00:30:06.120 --> 00:30:08.560
final positions of your frames.

00:30:08.560 --> 00:30:11.950
And we think this is a much better
way to lay out your interfaces.

00:30:13.960 --> 00:30:15.700
So let's review this real quick.

00:30:15.770 --> 00:30:19.490
So we persist the Aqua guides
or the layout guides as

00:30:19.530 --> 00:30:21.340
objects called constraints.

00:30:21.340 --> 00:30:24.550
They're relationships
between one or two views,

00:30:24.550 --> 00:30:27.640
the most common case
being between two views.

00:30:27.690 --> 00:30:31.180
For example, a super view in a button or
another view in its peer.

00:30:31.960 --> 00:30:34.450
And these are real objects
in Interface Builder,

00:30:34.570 --> 00:30:37.720
just like every other view or
controller in your document.

00:30:37.770 --> 00:30:41.560
So you can interact with them,
make connections to them, select them,

00:30:41.560 --> 00:30:44.200
inspect them, just like everything else.

00:30:45.700 --> 00:30:47.390
So why do we think this is better?

00:30:47.550 --> 00:30:49.360
First of all, dynamism.

00:30:49.410 --> 00:30:51.560
As your application is changing,
for example,

00:30:51.560 --> 00:30:56.010
maybe you have data that is updating the
views or controls in your application,

00:30:56.300 --> 00:30:58.080
instead of having to write
code that was to automatically

00:30:58.080 --> 00:31:01.380
relay out your interface,
Auto Layout happens to do

00:31:01.600 --> 00:31:03.380
it for you automatically.

00:31:03.970 --> 00:31:05.740
Secondly, simplicity.

00:31:05.830 --> 00:31:08.690
As you're using Interface
Builder to lay out your views,

00:31:08.710 --> 00:31:12.090
we're taking those guides and we're
translating those into constraints.

00:31:12.090 --> 00:31:17.260
So it's really what Max talked about in
the developer's tools kickoff yesterday.

00:31:17.260 --> 00:31:18.620
It's a do what I mean.

00:31:18.620 --> 00:31:20.280
I drag it in the upper left.

00:31:20.280 --> 00:31:21.390
Stay there.

00:31:22.310 --> 00:31:23.440
Third of all, expressiveness.

00:31:23.440 --> 00:31:26.920
With a whole new layout technology,
we've also added some additional

00:31:26.920 --> 00:31:30.620
things to help create powerful
interfaces which were never possible

00:31:30.620 --> 00:31:32.550
before without writing a lot of code.

00:31:32.560 --> 00:31:35.130
And we've made it easy without
having to write any code.

00:31:35.140 --> 00:31:38.270
And all three of those are really,
really evident if you

00:31:38.300 --> 00:31:40.180
localize your application.

00:31:40.180 --> 00:31:43.870
Localization can be a very fragile
task if you're working only with views.

00:31:43.870 --> 00:31:46.810
But if you're working with
relationships to lay out your views,

00:31:46.810 --> 00:31:48.920
now localization is as
easy as drag and drop.

00:31:50.330 --> 00:31:53.250
And to show this again,
I'd like to launch and do a demo.

00:31:53.260 --> 00:31:57.130
All right,
so I'm going to switch to the back

00:31:58.180 --> 00:32:00.700
first back to focus on our interface.

00:32:00.700 --> 00:32:03.100
And I'm going to switch to that
nib file that we dragged in.

00:32:05.200 --> 00:32:08.120
So this is our popover view controller,
and the first thing I want to do is

00:32:08.360 --> 00:32:10.070
enable Auto Layout for the document.

00:32:10.070 --> 00:32:13.470
Auto Layout is enabled per document,
so you can upgrade your

00:32:13.520 --> 00:32:15.040
nib files one at a time.

00:32:15.040 --> 00:32:18.050
You can even use the project
navigator to filter for zip file and

00:32:18.070 --> 00:32:21.470
select them all and upgrade it if
you prefer to do that route as well.

00:32:21.480 --> 00:32:23.860
To do that,
I'm going to open the file inspector,

00:32:23.860 --> 00:32:25.720
which is the first inspector here.

00:32:25.720 --> 00:32:27.110
And I'm going to open the file inspector.

00:32:27.910 --> 00:32:30.630
And then I can just check
the use Auto Layout checkbox,

00:32:30.740 --> 00:32:33.490
and now my document is using Auto Layout.

00:32:34.050 --> 00:32:36.120
So let me show you how it works.

00:32:36.340 --> 00:32:38.430
So I can take a button, drag it out.

00:32:38.460 --> 00:32:40.020
You can see I get the guides.

00:32:40.150 --> 00:32:43.500
And when I let go,
the guides are persisted as

00:32:43.500 --> 00:32:44.830
these objects called constraints.

00:32:44.920 --> 00:32:46.870
And here the relationships are evident.

00:32:46.870 --> 00:32:50.110
I have a spacing between my
button and its super view and

00:32:50.440 --> 00:32:53.820
another spacing between the top
of my button and its super view.

00:32:53.820 --> 00:32:59.810
And it does what I mean if I grab the
button and put it in the upper right.

00:33:00.400 --> 00:33:03.330
Then I get constraints
that pin it there as well.

00:33:03.470 --> 00:33:06.570
It's that easy to create interfaces.

00:33:07.000 --> 00:33:27.800
[Transcript missing]

00:33:28.300 --> 00:34:05.900
[Transcript missing]

00:34:06.890 --> 00:34:08.790
All right.

00:34:08.920 --> 00:34:12.090
So that's just really basic of
how easy it is to drag things

00:34:12.090 --> 00:34:13.640
out and to use Auto Layout.

00:34:13.640 --> 00:34:16.480
Now, what exactly is Xcode doing?

00:34:16.480 --> 00:34:19.070
I mean, I didn't really do anything
to specify these constraints,

00:34:19.070 --> 00:34:20.720
but they seem to be exactly what I mean.

00:34:20.720 --> 00:34:26.490
What Xcode is doing is it's picking
the minimum best set of constraints

00:34:26.590 --> 00:34:29.320
for my views and my interface.

00:34:29.320 --> 00:34:30.860
Well, what is the minimum?

00:34:30.860 --> 00:34:32.380
We're avoiding two things.

00:34:33.020 --> 00:34:34.500
First, we're avoiding ambiguity.

00:34:34.560 --> 00:34:38.730
We want to have enough constraints
to fully specify the position

00:34:38.750 --> 00:34:40.450
and the size of my view.

00:34:40.460 --> 00:34:42.650
I can't just say, oh,
put this button 12 points away

00:34:42.790 --> 00:34:44.200
from the edge of my super view.

00:34:44.200 --> 00:34:45.510
What about the size?

00:34:45.630 --> 00:34:47.340
What about the Y origin?

00:34:47.340 --> 00:34:50.610
Secondly, we're avoiding redundancy.

00:34:52.130 --> 00:34:54.480
There are many different
possibilities for constraints,

00:34:54.480 --> 00:34:56.340
but we want to pick ones
that are the most preferable

00:34:56.340 --> 00:34:57.810
so we don't over-constraint.

00:34:58.010 --> 00:35:00.780
For example,
if you look at this button here,

00:35:01.020 --> 00:35:02.890
there's lots of different
guides that are active.

00:35:03.050 --> 00:35:04.900
When I let go,
we only pick a couple constraints.

00:35:04.900 --> 00:35:06.990
What Xcode is doing is not magic.

00:35:06.990 --> 00:35:10.970
We simply assign different scores
to each possible constraint,

00:35:10.990 --> 00:35:14.910
and we pick the ones that are most
preferable or most interesting

00:35:14.910 --> 00:35:16.890
given your current layout.

00:35:18.890 --> 00:35:21.900
If you'd like to learn more about
kind of how AutoLayout works

00:35:21.900 --> 00:35:25.010
under the hood and more specifics
of why some of these constraints

00:35:25.090 --> 00:35:27.870
are more interesting than others,
I encourage you guys to check

00:35:28.120 --> 00:35:30.800
out the AutoLayout session
that was earlier today.

00:35:30.800 --> 00:35:33.220
So you can't go back in time,
but you can watch the videos.

00:35:33.250 --> 00:35:34.690
So I encourage you
guys to check that out.

00:35:34.690 --> 00:35:36.240
That was this morning at 11.30.

00:35:38.210 --> 00:35:40.780
All right, so let's actually build the
interface for our popover.

00:35:40.780 --> 00:35:45.020
So I'm going to want these two
buttons to maybe show more or

00:35:45.020 --> 00:35:47.100
less detail for my tree map view.

00:35:47.100 --> 00:35:49.340
And then I want a button
maybe to open in the finder.

00:35:49.340 --> 00:35:51.160
So I can grab these buttons.

00:35:51.220 --> 00:35:52.490
All right.

00:35:52.720 --> 00:35:54.400
Drag them down here.

00:35:54.440 --> 00:35:57.900
And I'm going to add one more
button for open in Finder.

00:35:57.900 --> 00:36:02.240
And of course, we'll need a custom view
for our actual tree map.

00:36:02.290 --> 00:36:03.800
Custom view.

00:36:03.820 --> 00:36:05.460
And again,
you can see as I'm dragging this out,

00:36:05.470 --> 00:36:08.210
I'm not setting any

00:36:08.240 --> 00:36:10.910
- Auto-resizing masks are anything,
yet the constraints are falling

00:36:11.050 --> 00:36:13.380
in exactly how I'd expect them.

00:36:14.190 --> 00:36:15.040
All right.

00:36:15.120 --> 00:36:16.150
So I want to change the
title of these buttons.

00:36:16.150 --> 00:36:18.650
And what I want to highlight
here is one of the bullets on

00:36:18.650 --> 00:36:20.170
the slide of why Auto Layout.

00:36:20.170 --> 00:36:21.540
And that's dynamism.

00:36:21.540 --> 00:36:24.690
I said that as the content
of your controls is changing,

00:36:24.690 --> 00:36:27.730
the interface will
automatically flow around it.

00:36:27.760 --> 00:36:30.010
And that doesn't just
help you at design time,

00:36:30.010 --> 00:36:32.740
at run time rather,
but also helps you at design time.

00:36:32.750 --> 00:36:35.380
So look at the relationships
that are on this button.

00:36:35.380 --> 00:36:37.140
I have a spacing here, here, here.

00:36:37.210 --> 00:36:40.080
But there's also that spacing
between these two buttons.

00:36:41.200 --> 00:36:43.840
With constraints,
they're relationships that must hold.

00:36:43.840 --> 00:36:45.870
So even as the contents
of the button change,

00:36:45.870 --> 00:36:47.730
that constraint will always be true.

00:36:49.110 --> 00:36:50.500
Let's see it in action.

00:36:50.540 --> 00:36:55.040
If I change the title of
the button to more detail,

00:36:55.040 --> 00:36:58.380
you can see the button grows to
fill its contents and it pushes

00:36:58.430 --> 00:37:03.580
that other button along with it so
that it maintains that relationship.

00:37:04.290 --> 00:37:06.950
For those of you that missed it,
I can undo and redo just to

00:37:06.970 --> 00:37:08.950
show you that it's moving.

00:37:09.360 --> 00:37:12.960
Similarly, I can select this button
and say less detail.

00:37:12.960 --> 00:37:15.310
You can see it grew in the
direction that I expected.

00:37:15.540 --> 00:37:20.960
And finally,
I can change this to open in Finder.

00:37:21.390 --> 00:37:24.370
and you can see that grew
exactly how I expected as well.

00:37:24.530 --> 00:37:27.250
As Joey pointed out,
there's a new property for

00:37:27.280 --> 00:37:31.600
views in Mac OS X Lion called
the User Interface Identifier.

00:37:31.610 --> 00:37:32.800
I'm gonna set that on my buttons.

00:37:32.880 --> 00:37:36.140
This helps with accessibility
and a number of other things.

00:37:36.250 --> 00:37:39.700
So I'm gonna call this
the Open in Finder button.

00:37:39.720 --> 00:37:42.360
And similarly,
we're gonna change our identifier

00:37:42.470 --> 00:37:45.670
for Less Detail button.

00:37:45.680 --> 00:37:49.580
And one more.

00:37:50.900 --> 00:37:56.000
[Transcript missing]

00:37:56.250 --> 00:37:59.780
Now, I can preview my sizing of how I've
laid out some of my constraints

00:37:59.980 --> 00:38:01.100
right here in Interface Builder.

00:38:01.100 --> 00:38:02.070
I don't have to run my app.

00:38:02.070 --> 00:38:05.790
And to do that, I just grab the edge of
the view and drag it,

00:38:05.790 --> 00:38:08.920
and you can see those constraints
are doing exactly what

00:38:08.920 --> 00:38:12.510
I would expect in terms of the
resizing behavior that I want.

00:38:13.750 --> 00:38:16.790
As I'm resizing views
inside of a container,

00:38:16.830 --> 00:38:19.690
so I resized a container before,
but as I'm resizing

00:38:19.690 --> 00:38:22.470
inside of a container,
we won't apply the constraints

00:38:23.090 --> 00:38:25.900
automatically because you might
want to resize things outside

00:38:26.080 --> 00:38:28.270
of the AquaSpace guidelines.

00:38:28.280 --> 00:38:31.750
However, you can,
holding the command key, override this,

00:38:31.870 --> 00:38:34.280
and now as I resize,
you can see it's applying

00:38:34.280 --> 00:38:37.700
those constraints and pushing
that button out of the way.

00:38:37.700 --> 00:38:39.830
So I can very,
very easily resize things and

00:38:39.960 --> 00:38:43.740
maintain all the relationships,
have the window grow and everything,

00:38:43.740 --> 00:38:46.640
so that if I want to make one
small edit deep in my interface,

00:38:46.670 --> 00:38:49.120
I don't have to make a bunch
of other edits farther out.

00:38:51.440 --> 00:38:52.480
Now, something interesting happened here.

00:38:52.480 --> 00:38:55.600
This I-beam showed up underneath
this more detail button.

00:38:55.600 --> 00:38:58.170
If you look at the less detail button,
it doesn't have this

00:38:58.170 --> 00:39:00.380
I-beam underneath it,
but the more detail button

00:39:00.380 --> 00:39:01.660
does have the I-beam.

00:39:01.680 --> 00:39:03.610
What's going on here?

00:39:03.640 --> 00:39:08.500
This gets into something called the
intrinsic content size of a view,

00:39:08.500 --> 00:39:10.870
or simply the size to fit size.

00:39:10.880 --> 00:39:15.020
With Auto Layout, if you don't specify a
specific width for a view,

00:39:15.020 --> 00:39:18.540
what it's going to do is it's
going to assume the size that it

00:39:18.670 --> 00:39:21.040
needs in order to fit its contents.

00:39:21.400 --> 00:39:24.260
In the case of a button and a label,
of course, that's its string.

00:39:24.260 --> 00:39:27.160
For like a combo box,
it might be for the string of the

00:39:27.160 --> 00:39:29.580
text field plus the disclosure button.

00:39:29.580 --> 00:39:31.870
Not all views have
intrinsic content sizes,

00:39:31.970 --> 00:39:34.130
and it's usually limited to controls.

00:39:35.850 --> 00:39:39.000
Now, what I want to do is I want
to keep my controls and views

00:39:39.000 --> 00:39:40.480
at their size to fit size.

00:39:40.480 --> 00:39:41.210
Well, why?

00:39:41.210 --> 00:39:44.120
If I specify an explicit width,
as I've done here,

00:39:44.120 --> 00:39:47.070
if the string grows too big,
it's not going to resize

00:39:47.070 --> 00:39:50.110
the button because I've said
I want this button to be,

00:39:50.110 --> 00:39:52.970
say, 130-something points wide.

00:39:53.480 --> 00:39:56.000
So you want to make sure that
your controls that have content

00:39:56.000 --> 00:39:58.930
that's going to be changing,
that they are their size to fit size.

00:39:58.930 --> 00:40:02.630
If you've resized a control and
you get this explicit width or

00:40:02.660 --> 00:40:06.620
height and you want to set it back,
you can do that by going under the

00:40:06.620 --> 00:40:10.190
Editor menu and going to Size to Fit,
and you can see that goes

00:40:10.310 --> 00:40:14.090
back to its size to fit size,
and that explicit width goes away,

00:40:14.170 --> 00:40:17.040
and now when the content
of that button changes,

00:40:17.050 --> 00:40:21.290
it's going to grow or shrink as
necessary to hold all that stuff.

00:40:22.870 --> 00:40:25.190
All right, so we're just about done
setting up our interface.

00:40:25.280 --> 00:40:29.430
I want to add in that tree map that
Joey had showed the screenshot of.

00:40:29.660 --> 00:40:31.250
So I'm going to drag
in the code for that.

00:40:31.270 --> 00:40:33.340
We're going to set up a
custom class and an outlet,

00:40:33.350 --> 00:40:35.760
and we'll be good to go.

00:40:35.760 --> 00:40:37.480
So let me open the navigators here.

00:40:37.490 --> 00:40:40.200
I'm going to close the utilities.

00:40:40.990 --> 00:40:43.240
And let's go back to the finder.

00:40:43.290 --> 00:40:45.240
Here's our tree map view.

00:40:45.320 --> 00:40:46.600
You can drag that right in.

00:40:46.740 --> 00:40:50.240
We're gonna copy that in.

00:40:51.300 --> 00:40:56.600
We're going to import our header file,
make sure that's all in.

00:40:57.400 --> 00:41:00.420
And now we want to go back to
our pop-up review controller.

00:41:00.420 --> 00:41:03.130
I'm going to hide these again so
we can focus on our interface.

00:41:03.140 --> 00:41:05.710
And we're going to set that custom class.

00:41:05.810 --> 00:41:08.920
Again, this is saying that at runtime,
I don't want this to be a generic NSV.

00:41:08.920 --> 00:41:11.360
I want this to be an FSTreeMap view.

00:41:11.360 --> 00:41:15.860
And finally,
I'm going to hook up a outlet.

00:41:15.860 --> 00:41:19.470
And so right now we're in manual
mode because we were looking

00:41:19.470 --> 00:41:20.600
at that .env file before.

00:41:20.600 --> 00:41:23.090
So I can either reset this to automatic.

00:41:23.100 --> 00:41:27.070
And there's even a really
good speed key for this.

00:41:27.450 --> 00:41:29.760
that will reset it for you automatically.

00:41:33.020 --> 00:41:36.110
Looks like it's not selecting this.

00:41:36.110 --> 00:41:37.180
That's all right.

00:41:37.270 --> 00:41:39.940
We're just going to
restart Xcode real quick.

00:41:40.040 --> 00:41:44.480
There are no bugs in Xcode,
so I hope you guys can find some.

00:41:47.850 --> 00:41:49.060
All right, so here we go.

00:41:49.060 --> 00:41:51.180
Here's our pop-up review controller,
and you can see I have an

00:41:51.180 --> 00:41:52.900
outlet for my tree map view.

00:41:52.900 --> 00:41:56.930
And I can just control drag right
from that and hook it on up.

00:41:57.040 --> 00:42:00.500
And now, when I run my application...

00:42:03.120 --> 00:42:04.230
Open my popover.

00:42:04.480 --> 00:42:05.630
Oh, fantastic.

00:42:05.700 --> 00:42:08.790
I got that awesome tree map view.

00:42:12.640 --> 00:42:13.100
Drag it off.

00:42:13.190 --> 00:42:14.040
It's its own window.

00:42:14.040 --> 00:42:15.040
And I can resize.

00:42:15.040 --> 00:42:19.020
And it's resizing exactly how
I would expect for the most part.

00:42:19.060 --> 00:42:20.060
Hmm.

00:42:20.060 --> 00:42:23.090
I really don't want this
button to overlap that button.

00:42:23.090 --> 00:42:25.030
Well, how would you fix that?

00:42:25.250 --> 00:42:27.010
Well, one way would be to go
write a lot of code.

00:42:27.010 --> 00:42:29.720
But we can use some of the
power of Auto Layout to insert

00:42:29.720 --> 00:42:33.060
additional constraints so that
those buttons don't overlap.

00:42:34.540 --> 00:42:44.210
Let's see that in action.

00:42:44.490 --> 00:42:44.490
So I'm going to go back to
focusing on the interface here.

00:42:44.490 --> 00:42:44.490
I'm going to position that
so it's right in the center.

00:42:44.700 --> 00:42:47.690
So while Xcode is creating
relationships for you automatically,

00:42:47.690 --> 00:42:50.660
in this case, I have two views selected,
and we'll show those constraints

00:42:50.830 --> 00:42:52.790
for the selected view.

00:42:53.030 --> 00:42:56.360
I can also add additional constraints
and relationships based upon the

00:42:56.360 --> 00:42:57.810
particular interface that I'm building.

00:42:57.820 --> 00:43:00.180
In this case,
I don't want those buttons to overlap,

00:43:00.300 --> 00:43:03.000
so I can add an additional relationship
to ensure that doesn't happen.

00:43:03.000 --> 00:43:06.500
To do that,
I can go under the Editor menu

00:43:06.500 --> 00:43:09.300
and go to Add Constraint,
and you can see there's a

00:43:09.300 --> 00:43:11.780
couple different types of
constraints we can add.

00:43:11.820 --> 00:43:15.640
We can add ones that affect the
width or the height of our view.

00:43:15.640 --> 00:43:17.580
We can put spacings between views.

00:43:17.580 --> 00:43:19.660
We can put spacings between
a view and its super view,

00:43:19.660 --> 00:43:22.640
or we can even make things
equal size and equal widths.

00:43:23.080 --> 00:43:25.150
And these are just a few
examples of different types

00:43:25.150 --> 00:43:26.620
of constraints you can create.

00:43:26.640 --> 00:43:31.460
You can also align views, and to do that,
you actually just use the Align commands.

00:43:31.460 --> 00:43:33.960
So if I had two buttons that
I always wanted to stay aligned,

00:43:33.960 --> 00:43:36.260
I could either drag them
so they were aligned,

00:43:36.260 --> 00:43:39.190
or I could explicitly say, oh,
align their left edges

00:43:39.190 --> 00:43:41.080
or their right edges,
and that will insert a

00:43:41.080 --> 00:43:42.360
constraint for alignment.

00:43:42.360 --> 00:43:44.790
But in this case,
I want to add a horizontal

00:43:45.180 --> 00:43:46.580
spacing constraint.

00:43:46.580 --> 00:43:50.720
So what I've done here is it's taken
a relationship that's on the canvas.

00:43:50.720 --> 00:43:54.560
Currently, these two buttons are, oh,
say, 300 points apart,

00:43:54.560 --> 00:43:57.570
and it's frozen that into a constraint.

00:43:59.230 --> 00:44:02.530
But we really don't want these
two buttons to be exactly 300

00:44:02.570 --> 00:44:04.150
points apart all the time,
right?

00:44:04.320 --> 00:44:07.500
We kind of want to just make
sure they don't overlap.

00:44:07.790 --> 00:44:11.030
So I can actually inspect my constraint,
just like every other object.

00:44:11.060 --> 00:44:15.240
So let me select that and
open the attributes inspector.

00:44:15.260 --> 00:44:16.880
And you can see there are a
couple different properties

00:44:16.880 --> 00:44:19.340
that I can set on my constraint.

00:44:19.370 --> 00:44:21.560
In this particular constraint,
a spacing constraint,

00:44:21.570 --> 00:44:24.260
I can change the relation
from an equality,

00:44:24.270 --> 00:44:28.640
I want it to equal 300 points,
to an inequality.

00:44:28.700 --> 00:44:30.490
So I can actually say,
be greater than or equal to,

00:44:30.530 --> 00:44:33.090
don't always be equal or
be less than or equal to.

00:44:33.380 --> 00:44:36.340
And this is a very,
very powerful way to constrain the

00:44:36.340 --> 00:44:38.960
sizes of your views or spacings.

00:44:38.960 --> 00:44:42.000
In this case,
we want a greater than or equal to.

00:44:42.040 --> 00:44:46.320
And I really don't want 330,
that seems like a pretty large number.

00:44:46.320 --> 00:44:48.680
I kind of want it to be
whatever the minimum is that

00:44:48.730 --> 00:44:50.220
the system thinks is best.

00:44:50.220 --> 00:44:55.880
So I could either punch in a number here,
or I could let the system decide for me,

00:44:55.900 --> 00:44:58.780
and there's a checkbox right here,
I can click that.

00:44:58.870 --> 00:45:02.420
And so now my spacing constraint is be
greater than or equal to the standard

00:45:02.420 --> 00:45:05.080
Aqua space between these two buttons.

00:45:07.850 --> 00:45:10.510
I'm gonna, before I run this and
show you it working,

00:45:10.510 --> 00:45:12.560
I wanna point out two things.

00:45:12.560 --> 00:45:17.110
First, that this constraint is bold and
these other constraints that Xcode

00:45:17.220 --> 00:45:19.380
helped me create are a little thinner.

00:45:19.520 --> 00:45:24.560
You can always tell which constraints
are yours and that you have created

00:45:24.560 --> 00:45:24.560
by looking for the ones that are bold.

00:45:24.770 --> 00:45:28.210
Secondly,
for constraints that are not equalities,

00:45:28.210 --> 00:45:31.060
we add a little badge just to
indicate you can see exactly

00:45:31.060 --> 00:45:32.860
which inequality you selected.

00:45:35.090 --> 00:45:40.440
All right,
so now when I run my application,

00:45:40.500 --> 00:45:44.470
bring up my popover, I really like that,
and then resize.

00:45:44.620 --> 00:45:47.470
You can see the window stops resizing,
so those buttons don't overlap.

00:45:47.470 --> 00:45:51.190
I didn't have to write any code to do so.

00:45:51.690 --> 00:45:54.640
But it's also an interesting thing that
the window actually stopped resizing.

00:45:54.640 --> 00:45:55.880
How did it know to resize?

00:45:55.880 --> 00:45:57.270
I didn't ever set the
minimum width anywhere.

00:45:57.270 --> 00:46:01.080
And this is a really powerful
feature of Auto Layout in that

00:46:01.080 --> 00:46:05.350
it infers the minimum and maximum
size of your window based upon the

00:46:05.480 --> 00:46:08.170
constraints of the views inside of it.

00:46:09.000 --> 00:46:12.180
So if any of those relationships,
those constraints, have to be broken,

00:46:12.180 --> 00:46:14.160
it'll just stop the window from resizing.

00:46:14.160 --> 00:46:17.290
This is really powerful, for example,
if you are localizing

00:46:17.400 --> 00:46:18.680
or changing content.

00:46:18.680 --> 00:46:21.670
You don't have to be updating the
minimum size of your window or picking

00:46:21.670 --> 00:46:23.180
one that works for all of them.

00:46:23.180 --> 00:46:25.660
Rather, Auto Layout just takes
care of that for you.

00:46:25.680 --> 00:46:28.420
So I want to show you one
more type of user constraint.

00:46:28.420 --> 00:46:31.530
These two buttons,
more detail and less detail,

00:46:31.660 --> 00:46:33.410
aren't quite the same size.

00:46:33.410 --> 00:46:36.220
So I kind of want to
make them the same size.

00:46:36.220 --> 00:46:38.510
I can do that by selecting both.

00:46:39.000 --> 00:46:40.990
We're going to add a constraint.

00:46:40.990 --> 00:46:44.200
And we're going to insert
an equal width constraint.

00:46:44.410 --> 00:46:47.330
And so now these buttons will
always be the same width.

00:46:47.330 --> 00:46:49.980
But I want to take it one step further.

00:46:49.980 --> 00:46:53.430
I actually want to make all three
buttons in the bottom the same width.

00:46:53.430 --> 00:46:59.180
So I can select these two
buttons and say equal widths.

00:46:59.870 --> 00:47:03.080
And now all three buttons
are the same width.

00:47:03.310 --> 00:47:06.180
And you can even see that if
I were to resize this guy.

00:47:06.180 --> 00:47:09.910
All three of those buttons
are resizing along with me.

00:47:15.900 --> 00:47:18.620
Now, you might be wondering, Kevin,
you mentioned, though,

00:47:18.620 --> 00:47:21.780
that you want your views to
always be their size to fit size.

00:47:21.860 --> 00:47:25.380
If all your controls are
their size to fit size and you

00:47:25.380 --> 00:47:29.560
say make them equal widths,
what it will do is automatically pick

00:47:29.560 --> 00:47:33.780
the larger width of all the different
ones that are all equal widths.

00:47:33.960 --> 00:47:37.930
So that way, no matter what title is
in any of those views,

00:47:38.030 --> 00:47:40.110
it will never get clipped.

00:47:40.900 --> 00:48:57.400
[Transcript missing]

00:48:57.580 --> 00:49:01.890
So I can select the constraint
between the less detail and

00:49:01.960 --> 00:49:03.660
open and finder buttons.

00:49:03.690 --> 00:49:06.420
And you can see I have a
priority field up here.

00:49:06.460 --> 00:49:11.080
And the priority 400 means
as I resize the window,

00:49:11.140 --> 00:49:13.620
keep the window resizing,
but make sure the contents of

00:49:13.620 --> 00:49:15.240
the buttons don't get clipped.

00:49:15.250 --> 00:49:17.010
Now, 400 is just a value in that range.

00:49:17.080 --> 00:49:18.900
If you want to learn
more about those ranges,

00:49:18.900 --> 00:49:21.650
you can check out the great
Auto Layout documentation to learn

00:49:21.650 --> 00:49:24.380
what those mean and what some
of those different values are.

00:49:24.400 --> 00:49:27.060
But I'm going to type in 400.

00:49:27.510 --> 00:49:30.740
And you can see that now the
constraint in the canvas is

00:49:30.880 --> 00:49:33.600
drawing with a dotted line,
which indicates that this

00:49:33.600 --> 00:49:35.420
constraint is optional.

00:49:35.420 --> 00:49:38.370
And AutoLite will try to
make that true if it can,

00:49:38.470 --> 00:49:41.030
but will break it if it needs to.

00:49:41.740 --> 00:49:45.580
So now, let's run this and show
it to you in action.

00:49:45.650 --> 00:49:47.880
Let's run my application.

00:49:47.880 --> 00:49:49.740
Let's open this one.

00:49:49.740 --> 00:49:51.280
There's my great popover.

00:49:51.280 --> 00:49:52.720
I can drag it off.

00:49:52.720 --> 00:49:55.560
You can see all three buttons
are the same size right now.

00:49:55.620 --> 00:49:57.520
But watch closely.

00:49:57.540 --> 00:50:00.120
As I resize, OK,
I hit that minimum width.

00:50:00.120 --> 00:50:01.500
They're not going to overlap.

00:50:01.500 --> 00:50:03.900
And the less and more detailed
buttons are going to shrink to

00:50:03.980 --> 00:50:07.740
accommodate resizing the window up
into the point that the contents

00:50:07.740 --> 00:50:10.550
of those buttons are not clipped.

00:50:11.410 --> 00:50:13.460
So you can just look at
this interface and say,

00:50:13.460 --> 00:50:17.250
wow, we created something with really
complex interactions that makes

00:50:17.250 --> 00:50:21.490
sure that our interface is always
visible and nothing's ever clipped,

00:50:21.610 --> 00:50:23.280
and we didn't write a line of code.

00:50:25.820 --> 00:50:27.600
So where is this really powerful?

00:50:27.650 --> 00:50:30.080
As we've talked about
a little bit so far,

00:50:30.150 --> 00:50:32.540
localization is really
where this shines a lot.

00:50:32.680 --> 00:50:36.190
So let me show you localizing
this nib file to German,

00:50:36.190 --> 00:50:38.170
for example, or French.

00:50:39.410 --> 00:50:44.400
So my language experts have
sent me over some strings files,

00:50:44.400 --> 00:50:47.560
and they are on my hard drive,
so I'm going to go find those real quick.

00:50:47.660 --> 00:50:51.610
So I have three different strings files,
one for German, one for French,

00:50:51.710 --> 00:50:52.820
and one for English.

00:50:52.920 --> 00:50:55.440
So I'm going to just
drag in each one in turn.

00:50:56.970 --> 00:51:05.150
There's my German one,
and let me drag in my French one.

00:51:09.620 --> 00:51:11.660
And if you look at these strings files,
they're pretty simple.

00:51:11.760 --> 00:51:14.200
They just have the translations.

00:51:14.330 --> 00:51:16.740
So now I can just take the
strings file and just drag it

00:51:16.760 --> 00:51:18.260
right in Interface Builder.

00:51:18.290 --> 00:51:20.660
And you can see that it
replaces all the strings,

00:51:20.660 --> 00:51:23.540
maintains all those relationships,
and even grows the window

00:51:23.610 --> 00:51:24.860
to accommodate those.

00:51:24.920 --> 00:51:27.800
And similarly,
if I localize it to French,

00:51:28.470 --> 00:51:34.150
It does the exact thing that I'm
expecting with no code and no extra work.

00:51:42.680 --> 00:51:46.390
So we've showed you a couple of different
new features in Lion and how we've

00:51:46.530 --> 00:51:49.940
integrated those into Interface Builder
to help you guys make applications

00:51:49.940 --> 00:51:51.060
that are even better than before.

00:51:51.060 --> 00:51:54.480
We showed you view-based table views,
full screen, popovers,

00:51:54.480 --> 00:51:57.110
and of course the power of
Auto Layout and using all

00:51:57.110 --> 00:51:58.840
of these different things.

00:52:00.770 --> 00:52:03.600
To recap some of the things we
talked about with Auto Layout,

00:52:03.650 --> 00:52:06.240
we want to think about constraints,
not frames anymore.

00:52:06.270 --> 00:52:10.200
Constraints are the input that
determine the output or the frame,

00:52:10.390 --> 00:52:12.700
position and size of your views.

00:52:12.890 --> 00:52:16.550
These are relationships that exist
between one or two views and they're

00:52:16.550 --> 00:52:20.570
objects that you can interact with
in your Interface Builder documents.

00:52:20.730 --> 00:52:24.690
You can make connections to them,
you can inspect them,

00:52:24.690 --> 00:52:27.700
you can select them,
and you can see all of them

00:52:27.700 --> 00:52:27.700
right in your document structure.

00:52:28.150 --> 00:52:32.000
If you'd like more information about our
developer tools or you have questions,

00:52:32.000 --> 00:52:35.580
you feel free to email our
developer tools evangelist,

00:52:35.580 --> 00:52:36.500
Michael Jurwitz.

00:52:36.620 --> 00:52:39.760
Additionally, we encourage you to check
out our documentation.

00:52:39.760 --> 00:52:42.600
We have a lot of great
documentation on our human interface

00:52:42.600 --> 00:52:46.820
guidelines for iOS and Mac OS,
for Auto Layout,

00:52:46.820 --> 00:52:49.630
and of course for Interface Builder,
view-based table views,

00:52:49.630 --> 00:52:50.850
all that great stuff.

00:52:50.940 --> 00:52:55.220
And finally, if you guys have questions,
you can voice them and ask them

00:52:55.350 --> 00:52:57.270
on the Apple Developer Forums.

00:52:57.740 --> 00:53:00.660
You can hear questions from other people,
answer other people's questions,

00:53:00.670 --> 00:53:02.140
and get answers to your questions.

00:53:02.140 --> 00:53:05.110
And with that,
we'd like to point out three

00:53:05.490 --> 00:53:07.520
sessions that are related.

00:53:07.520 --> 00:53:11.160
Tomorrow, we encourage you guys to come
see the storyboarding feature

00:53:11.290 --> 00:53:13.180
that is new in Interface Builder.

00:53:13.180 --> 00:53:15.560
Again,
for those of you watching the videos,

00:53:15.560 --> 00:53:18.300
you can go back to
earlier today at 11.30,

00:53:18.300 --> 00:53:20.210
the session on Cocoa Auto Layout.

00:53:20.260 --> 00:53:23.640
And on Thursday,
there's a session on view-based

00:53:23.640 --> 00:53:27.370
and as table views to get
even more power with those.

00:53:27.380 --> 00:53:31.220
And with that, thank you so much for
coming and taking your time.