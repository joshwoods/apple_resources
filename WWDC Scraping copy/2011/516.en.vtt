WEBVTT

00:00:10.470 --> 00:00:14.880
This is Understanding Layout and
Gestures in Safari on iOS and Lion.

00:00:14.900 --> 00:00:16.700
I'm Beth Dakin,
and I'm an engineer on the

00:00:16.700 --> 00:00:17.960
Safari and WebKit team.

00:00:20.370 --> 00:00:24.200
The devices on which we
browse the web have evolved.

00:00:24.450 --> 00:00:27.060
iPads and iPhones go everywhere with us.

00:00:27.110 --> 00:00:30.780
We use them on extremely fast networks
and on extremely slow networks.

00:00:30.830 --> 00:00:33.110
And when we use them,
we don't even interact

00:00:33.110 --> 00:00:34.150
with them with a mouse.

00:00:34.150 --> 00:00:37.570
These facts affect all
of us as developers.

00:00:37.570 --> 00:00:40.420
For example,
take the fact that there's no mouse.

00:00:40.420 --> 00:00:44.650
Web developers simply can't rely on
hover effects the way they once did

00:00:44.650 --> 00:00:48.820
because hovering on an iPad just
isn't the same as hovering on an iMac.

00:00:50.540 --> 00:00:52.820
But that's not to say that
iMacs haven't evolved as well.

00:00:52.820 --> 00:00:55.960
This is Apple after all,
and we're constantly innovating here.

00:00:55.960 --> 00:00:58.610
And our iMacs now have magic trackpads.

00:00:58.610 --> 00:01:02.450
Trackpads, of course, are still mice,
but they have all of the

00:01:02.450 --> 00:01:05.960
power of multi-touch gestures
built into them as well.

00:01:08.970 --> 00:01:12.600
And with Lion, we've introduced evolved
software that really harnesses

00:01:12.600 --> 00:01:14.980
the power of this new hardware.

00:01:15.230 --> 00:01:18.360
There are innovations in here that
will affect the way we browse the

00:01:18.360 --> 00:01:21.500
web and will impact our web content.

00:01:22.470 --> 00:01:26.600
So today we're going to take a look
at Safari on Lion and Safari on iOS,

00:01:26.600 --> 00:01:29.190
and we're going to peek under the
hood and look at how WebKit behaves

00:01:29.570 --> 00:01:30.830
in these evolved environments.

00:01:30.840 --> 00:01:33.040
And along the way,
we're going to give you some tips

00:01:33.040 --> 00:01:36.300
and tricks for how you can bring
your web content into these new

00:01:36.300 --> 00:01:39.230
environments as well and have them
really harness this new power.

00:01:42.220 --> 00:01:43.680
So I mentioned WebKit briefly.

00:01:43.940 --> 00:01:46.490
You've probably heard a lot
about WebKit already this week,

00:01:46.640 --> 00:01:50.220
but in case you haven't,
WebKit is the engine that powers Safari.

00:01:50.220 --> 00:01:53.270
It's open source,
and it's responsible for loading,

00:01:53.570 --> 00:01:58.100
parsing, interpreting, rendering,
and managing web content in Safari.

00:01:58.100 --> 00:01:59.640
Not just Safari, though.

00:01:59.640 --> 00:02:01.420
WebKit's used a lot of places.

00:02:01.420 --> 00:02:05.020
It's used in many of the core
applications on Mac OS X.

00:02:05.200 --> 00:02:09.440
It's used on many more apps that
you'll find in the Mac App Store,

00:02:09.440 --> 00:02:12.920
and it's used in tons of
apps in the iOS App Store.

00:02:12.920 --> 00:02:16.740
WebKit is used in so many places
these days because of its flexibility

00:02:16.840 --> 00:02:18.720
as a content rendering engine.

00:02:18.720 --> 00:02:22.200
As we make Safari and WebKit a
better and better platform,

00:02:22.200 --> 00:02:25.750
we really want to work together with you
as web developers so that we can deliver

00:02:25.750 --> 00:02:27.550
an amazing experience to end users.

00:02:30.100 --> 00:02:32.830
So in that vein, we're going to cover
three main topics today.

00:02:33.070 --> 00:02:36.380
First, we'll dive into a few meaty issues
that really get to the heart of

00:02:36.380 --> 00:02:40.260
getting that pixel perfection on iOS,
getting your layout just right.

00:02:40.260 --> 00:02:43.610
Then we'll talk about the new
scrollbar redesign on Lion and

00:02:43.610 --> 00:02:45.380
how it impacts web content.

00:02:45.380 --> 00:02:48.050
And finally,
we'll talk about the new multi-touch

00:02:48.050 --> 00:02:51.520
gestures on Lion and the gestures
that we've always had on iOS.

00:02:52.880 --> 00:02:56.750
The topics that we're covering today
are things that just work and work

00:02:56.750 --> 00:03:01.130
beautifully almost all the time,
probably 95% of the time or more.

00:03:01.130 --> 00:03:04.160
But we're talking about them
anyway for two main reasons.

00:03:04.160 --> 00:03:06.900
First of all,
sometimes you'll be in that 5% of the

00:03:06.900 --> 00:03:11.030
time where you'll see your web content
interacting with these features in a way

00:03:11.070 --> 00:03:13.250
that's not exactly how you want it to.

00:03:13.250 --> 00:03:14.200
You'll hit some gotchas.

00:03:14.200 --> 00:03:16.950
And we want to be able to help
you out of those situations.

00:03:17.020 --> 00:03:19.720
We think we have a few easy tips
to get you out of those holes

00:03:19.720 --> 00:03:21.640
that you might find yourself in.

00:03:22.300 --> 00:03:24.700
And secondly,
sometimes you'll just want to craft a

00:03:24.940 --> 00:03:28.330
really custom experience built for the
particular platform that you're on.

00:03:28.360 --> 00:03:31.350
And in those situations,
we think you really need to understand

00:03:31.350 --> 00:03:32.990
some of these underlying issues.

00:03:32.990 --> 00:03:35.530
Then you can really use
the tools like a master.

00:03:37.520 --> 00:03:40.170
So without further ado,
I would like to invite my colleague,

00:03:40.170 --> 00:03:44.240
Vicki Murley, to the stage to talk to
you about Safari on iOS.

00:03:48.800 --> 00:03:51.260
Thanks, Beth.

00:03:51.620 --> 00:03:53.140
So, Safari on iOS.

00:03:53.140 --> 00:03:56.870
You might be developing
a great Web application.

00:03:56.870 --> 00:03:59.560
Facebook is one company
that delivers a native app,

00:03:59.560 --> 00:04:04.040
but also gives you a great experience
when you visit their URL in Safari.

00:04:04.040 --> 00:04:09.080
Or you might be a strictly native
application that is leveraging

00:04:09.140 --> 00:04:11.760
Web technologies inside of UI WebView.

00:04:11.760 --> 00:04:15.800
So, regardless of which
approach you're taking here,

00:04:15.850 --> 00:04:19.990
you might end up in some scenarios
where the layout or behavior

00:04:19.990 --> 00:04:24.630
or other things just aren't
quite exactly how you want them.

00:04:24.900 --> 00:04:27.140
So I'm going to address
three of these areas today.

00:04:27.160 --> 00:04:30.760
The first is undesirable results
for layout and behaviors.

00:04:30.850 --> 00:04:33.370
Things just aren't quite right.

00:04:34.260 --> 00:04:38.680
The second is pixelated
images on retina displays.

00:04:38.990 --> 00:04:42.540
And finally, I'm going to talk about
fixed positioning.

00:04:42.540 --> 00:04:45.440
Many of you have been trying
to get CSS fixed positioning

00:04:45.440 --> 00:04:46.810
working in your web content.

00:04:46.890 --> 00:04:54.180
You want that element to stay
on screen as you're scrolling,

00:04:54.180 --> 00:04:55.310
and it hasn't been working for you.

00:04:55.310 --> 00:04:55.310
So I'm going to address that topic today.

00:04:56.110 --> 00:04:58.810
So let's start by talking
about these undesirable results

00:04:58.970 --> 00:05:00.940
for layout and behaviors.

00:05:00.980 --> 00:05:04.580
So what exactly do I mean
here when I say that?

00:05:04.600 --> 00:05:07.080
Well,
as the Safari Technologies evangelist,

00:05:07.080 --> 00:05:09.760
I get a lot of feedback
from people like you.

00:05:09.780 --> 00:05:12.160
And some of the things
that I've heard are,

00:05:12.160 --> 00:05:15.750
I have this empty space on
the sides of my web page,

00:05:15.880 --> 00:05:20.690
or my web app doesn't fit the
screen the way I want it to.

00:05:20.800 --> 00:05:23.720
Or maybe I've got it kind of fitting
the screen the way I want it to,

00:05:23.720 --> 00:05:28.630
but I'm still seeing horizontal bounce,
and I want to get rid of that.

00:05:29.470 --> 00:05:32.870
And also, you know,
double-tap and pinch gestures are

00:05:32.870 --> 00:05:37.690
great for web pages viewed in Safari,
but I'm making a web app,

00:05:37.690 --> 00:05:40.910
and I want to disable those behaviors.

00:05:41.540 --> 00:05:45.960
So all of these problems or issues
that I just mentioned can be solved

00:05:46.410 --> 00:05:50.970
by one key concept in Safari on iOS,
and that is the viewport.

00:05:51.130 --> 00:05:58.670
So I'm going to spend a bit of
time today explaining the viewport,

00:05:58.670 --> 00:05:58.670
how it works,
and how it relates to your content.

00:05:59.420 --> 00:06:02.100
So in Safari on iOS,
we're looking at a web

00:06:02.100 --> 00:06:03.680
page here in Safari.

00:06:03.680 --> 00:06:07.060
The URL bar has been
scrolled out of view.

00:06:07.150 --> 00:06:09.220
We have this first area,
and I'm just going to

00:06:09.220 --> 00:06:10.470
call this the window.

00:06:10.470 --> 00:06:11.960
It's not the DOM window.

00:06:11.960 --> 00:06:15.990
I'm really just talking about this
as a fixed area that you're peering

00:06:16.090 --> 00:06:20.150
through to look at the web content,
sort of like a portal on a ship.

00:06:20.220 --> 00:06:21.370
Beth Dakin, Vicki Murley

00:06:22.540 --> 00:06:27.860
In the same area, on the same line,
we also have what's called the viewport.

00:06:28.000 --> 00:06:33.260
And when we first load the web page,
these two elements match each other.

00:06:33.260 --> 00:06:37.980
They're almost one on top of each other,
matching.

00:06:38.360 --> 00:06:42.800
So when users pinch to zoom to get
a closer look at some web content,

00:06:42.800 --> 00:06:46.750
what happens is we still have
that window that we're using

00:06:46.750 --> 00:06:51.300
to peer at the web content,
but our viewport changes scale.

00:06:51.300 --> 00:06:54.020
The height and width
values remain the same.

00:06:54.020 --> 00:06:56.280
It's really the scale
factor that changes.

00:06:57.890 --> 00:07:04.320
So since the viewport has gotten bigger,
users can also pan the viewport right and

00:07:04.320 --> 00:07:07.860
left to view different parts of the page.

00:07:07.860 --> 00:07:13.290
And this also means that if Wikipedia was
using fixed positioning to position

00:07:13.290 --> 00:07:17.160
its title and make it stick at the
top of the page when users scroll,

00:07:17.170 --> 00:07:19.100
this element would be
off-screen at this point.

00:07:19.130 --> 00:07:22.970
Because by definition,
elements that use fixed positioning use

00:07:23.090 --> 00:07:25.620
the viewport as their containing block.

00:07:26.900 --> 00:07:30.960
So that's the viewport on Safari on iOS.

00:07:30.970 --> 00:07:33.770
On the desktop, again,
we have both of these elements.

00:07:33.820 --> 00:07:37.840
We have the window,
and then we also have the viewport.

00:07:37.870 --> 00:07:41.460
The difference here is how users
interact with the viewport.

00:07:41.460 --> 00:07:45.110
Instead of scaling it,
users can actually change the

00:07:45.110 --> 00:07:50.300
size of the viewport as they
resize a window in Safari.

00:07:50.310 --> 00:07:52.580
As they make it bigger,
the content expands.

00:07:52.580 --> 00:07:56.400
As they make it smaller,
Wikipedia has a flowable layout.

00:07:56.440 --> 00:07:58.780
So some of these
elements are overlapping,

00:07:58.780 --> 00:08:01.910
and scrollbars appear to
help us move right and left

00:08:02.020 --> 00:08:04.360
to view more of the content.

00:08:06.060 --> 00:08:09.840
So to recap, in Safari on iOS,
the viewport height and

00:08:09.840 --> 00:08:11.460
width values don't change.

00:08:11.460 --> 00:08:13.660
It's the scale factor that changes.

00:08:13.660 --> 00:08:17.710
Users scale and pan to view
different parts of the page.

00:08:18.030 --> 00:08:20.840
In Safari on the Desktop,
the viewport height and width

00:08:20.970 --> 00:08:25.670
values are adjustable by the
user by resizing the window.

00:08:28.820 --> 00:08:31.360
So, you know,
you might have noticed I'm not

00:08:31.360 --> 00:08:35.070
using Lion screenshots here,
and that's because, you know,

00:08:35.070 --> 00:08:39.060
this is what we were working with
when we invented Safari on iOS.

00:08:39.060 --> 00:08:42.880
And one of the problems that we had to
solve was how do we go from this layout,

00:08:42.990 --> 00:08:47.800
you know, existing web content designed
to fit into this model where you

00:08:47.890 --> 00:08:50.110
can resize the viewport yourself,
to this,

00:08:50.130 --> 00:08:54.520
where we want users to be able to scale,
pan, etc.

00:08:55.560 --> 00:08:58.860
Well, the answer is actually
pretty straightforward.

00:08:58.860 --> 00:09:04.420
What we do is we assume a width
of 980 pixels for the content,

00:09:04.420 --> 00:09:10.610
and then we scale that down to
320 pixels in the case of iPhone.

00:09:11.270 --> 00:09:17.060
So this means that our default viewport
settings have a width of 980 pixels and

00:09:17.100 --> 00:09:23.430
a scale factor of 320 divided by 980,
which is about 0.32653,

00:09:23.430 --> 00:09:27.580
and probably some extra
numbers there as well.

00:09:29.400 --> 00:09:34.420
So this is why you sometimes see
this underutilized white space

00:09:34.420 --> 00:09:38.800
on the edges of your content,
because we're assuming that you need 980

00:09:38.880 --> 00:09:41.180
pixels to lay out all of your content.

00:09:41.210 --> 00:09:43.620
Really, sometimes you don't
need all of that space.

00:09:43.620 --> 00:09:46.970
So here, looking at the Wikipedia page,
we have some unused white

00:09:47.100 --> 00:09:48.480
space on the right and left.

00:09:48.500 --> 00:09:52.290
And then we also have this area at the
bottom with all the different languages

00:09:52.330 --> 00:09:54.520
that I can switch between for Wikipedia.

00:09:54.740 --> 00:09:59.660
The main content that I really
care about is in that central

00:09:59.660 --> 00:10:02.060
area around that sphere.

00:10:02.450 --> 00:10:05.270
So how can we tell Safari on
iOS that we only need,

00:10:05.270 --> 00:10:08.910
we don't need 980 pixels,
we need a different amount of

00:10:08.910 --> 00:10:10.940
pixels to layout our content?

00:10:10.940 --> 00:10:14.130
Well,
the answer is through the viewport tag.

00:10:14.140 --> 00:10:16.780
So here is what it looks like.

00:10:16.830 --> 00:10:17.660
It's a meta tag.

00:10:17.660 --> 00:10:22.750
The name is viewport, and you can set the
content value to a width.

00:10:22.890 --> 00:10:25.320
And here I'm setting
the width equal to 540.

00:10:26.080 --> 00:10:28.700
So I actually came up
with that value because I,

00:10:28.700 --> 00:10:31.480
you know,
downloaded the Wikipedia site and kind

00:10:31.770 --> 00:10:36.800
of eyeballed how much space I think was
needed to lay out that central area,

00:10:36.800 --> 00:10:38.760
and it was about 540 pixels.

00:10:38.760 --> 00:10:43.660
And just adding this one tag to the
Wikipedia page took me from something

00:10:44.030 --> 00:10:46.460
that looked like this to this.

00:10:46.460 --> 00:10:50.290
And, you know,
none of our content is lost.

00:10:50.300 --> 00:10:52.270
We still have, you know,
if we scroll down,

00:10:52.270 --> 00:10:55.800
we still have all those languages that
people might need to switch between.

00:10:56.080 --> 00:10:58.180
But we're really focusing on the content.

00:10:58.180 --> 00:11:02.900
We've told Safari on iOS that all we
need is 540 pixels to layout our content.

00:11:07.680 --> 00:11:10.820
So we've seen what
setting the width means,

00:11:10.820 --> 00:11:14.760
but the viewport is configurable
in other ways as well.

00:11:15.160 --> 00:11:18.500
So besides setting the width,
you can set the height.

00:11:18.500 --> 00:11:20.140
You can set the initial scale.

00:11:20.140 --> 00:11:22.760
We talked about what the
default initial scale is,

00:11:22.760 --> 00:11:24.870
but you can set that yourself as well.

00:11:25.220 --> 00:11:27.520
And you can set these
things in combination.

00:11:27.520 --> 00:11:32.260
So here I'm setting a width of 540,
a height of 800, and initial scale of 2.

00:11:32.260 --> 00:11:36.000
So when you do something
like the last example here,

00:11:36.000 --> 00:11:39.910
set multiple values within one
viewport tag for your page,

00:11:39.910 --> 00:11:44.380
you should be aware that when you
set a single viewport parameter,

00:11:44.380 --> 00:11:45.580
the others are inferred.

00:11:45.680 --> 00:11:48.540
So for example,
if I set the width to 540,

00:11:48.540 --> 00:11:51.360
the height and initial
scale are inferred.

00:11:52.200 --> 00:11:58.330
You can get that fine-grained control
by setting multiple values altogether,

00:11:58.330 --> 00:11:59.970
comma delimited.

00:12:00.400 --> 00:12:03.250
For me, though,
it's hard to kind of imagine,

00:12:03.320 --> 00:12:07.250
it's hard to mentally get your
head around what it might mean to

00:12:07.250 --> 00:12:12.540
have a width of 540 and a height
of 800 and an initial scale of 2.

00:12:12.540 --> 00:12:15.660
Like, off the top of my head,
I'm not sure what exactly that would

00:12:15.660 --> 00:12:17.500
look like on that Wikipedia page.

00:12:17.500 --> 00:12:21.070
So, a lot of the time,
I find myself just setting the width and

00:12:21.450 --> 00:12:23.980
letting all the other values be inferred.

00:12:23.980 --> 00:12:26.880
And that seems to work
really well for web content,

00:12:26.880 --> 00:12:30.840
both for web apps, web pages,
and inside of UI WebView.

00:12:34.920 --> 00:12:39.230
So you might have tried setting
the viewport tag already,

00:12:39.230 --> 00:12:43.700
and you might run into this thing
where you get a little bit of

00:12:43.790 --> 00:12:46.290
bounce to the right and left.

00:12:46.370 --> 00:12:49.090
So basically,
that's a cue that your content doesn't

00:12:49.090 --> 00:12:50.960
actually fit the screen exactly.

00:12:50.960 --> 00:12:53.950
You might have something like this,
where you've set the

00:12:54.070 --> 00:12:57.430
viewport width to 300 pixels,
then you have a div inside the

00:12:57.430 --> 00:12:59.410
body that's also 300 pixels.

00:12:59.410 --> 00:13:01.910
So you're thinking, OK,
these should match.

00:13:01.980 --> 00:13:04.780
I shouldn't have any
extra horizontal space.

00:13:04.800 --> 00:13:07.040
But the fact is that you do.

00:13:07.040 --> 00:13:11.260
If you've ever opened up a simple
web page like this one in the

00:13:11.260 --> 00:13:15.930
Web Inspector on the desktop,
you may have seen this field here,

00:13:15.930 --> 00:13:17.940
User Agent Style Sheet.

00:13:18.020 --> 00:13:22.520
So all web browsers have their own
style sheet that's part of the web

00:13:22.520 --> 00:13:28.110
browser that defines the default styling
for HTML elements like the body tag.

00:13:28.140 --> 00:13:34.290
So here, we see that the default styling
for Safari is a margin of 8 pixels.

00:13:34.940 --> 00:13:38.950
So even though we have set our
width to 300 for both the viewport

00:13:38.950 --> 00:13:42.400
and inside our main content,
we're actually getting an

00:13:42.400 --> 00:13:44.320
extra 8 pixels on each side.

00:13:44.320 --> 00:13:47.230
And that's why we're getting this
tiny bit of horizontal bounce to

00:13:47.230 --> 00:13:48.720
the right and left in a web app.

00:13:50.360 --> 00:13:51.600
This is really easy to fix.

00:13:51.710 --> 00:13:56.600
You can just set the CSS style
for the margin to zero pixels,

00:13:56.630 --> 00:13:59.770
and that will completely
solve your problem.

00:14:01.580 --> 00:14:01.800
Okay.

00:14:01.800 --> 00:14:07.940
So we've seen lots of ways to
customize the viewport for your layout,

00:14:07.940 --> 00:14:11.320
but what about those behaviors
that we talked about,

00:14:11.320 --> 00:14:13.080
double tapping and pinching to zoom?

00:14:13.080 --> 00:14:18.420
You want your web app to fit
the screen and not be zoomable.

00:14:18.420 --> 00:14:22.360
Well, the viewport tag comes
to the rescue again.

00:14:22.360 --> 00:14:25.740
We can set a value user
scalable equal to no.

00:14:26.170 --> 00:14:31.720
And that will disable all of the zooming,
double tapping to zoom, et cetera,

00:14:31.840 --> 00:14:33.110
for your web app.

00:14:34.540 --> 00:14:38.520
Two other parameters for the
viewport that are related to scaling,

00:14:38.520 --> 00:14:42.240
you can set the minimum scale
and the maximum scale as well.

00:14:44.710 --> 00:14:47.820
So, just to recap, you know,
there are several different ways to

00:14:47.840 --> 00:14:52.680
configure the viewport related to both
how things layout and how things behave.

00:14:52.680 --> 00:14:56.290
They have their own default values,
and they have minimum and

00:14:56.290 --> 00:14:57.870
maximum values as well.

00:15:01.470 --> 00:15:04.860
So that kind of covers
this class of problems,

00:15:04.920 --> 00:15:08.260
undesirable results for
layout and behaviors.

00:15:08.260 --> 00:15:13.680
Let's talk for a minute here next about
pixelated images on retina displays.

00:15:15.220 --> 00:15:19.620
So the iPhone 4 Retina Display, you know,
it has sort of the same

00:15:19.620 --> 00:15:21.620
dimensions as an older iPhone.

00:15:21.620 --> 00:15:27.110
It's 320 pixels wide by 480 pixels tall.

00:15:27.110 --> 00:15:31.760
Or you might say 320 units
wide by 480 pixels tall.

00:15:32.540 --> 00:15:34.780
And on an older iPhone,
each of those units

00:15:35.290 --> 00:15:36.830
corresponds to one pixel.

00:15:36.830 --> 00:15:39.790
On an iPhone 4 Retina Display,
each of those units

00:15:39.860 --> 00:15:43.810
corresponds to four pixels,
a two-by-two little box.

00:15:43.810 --> 00:15:46.970
So that's how we get
the text super sharp.

00:15:47.280 --> 00:15:50.510
This means that sometimes your
content can look a little grainy.

00:15:50.700 --> 00:15:53.420
And there's a couple different
solutions that you can use to make

00:15:53.600 --> 00:15:55.640
things look perfect in your web pages.

00:15:55.640 --> 00:15:59.280
The first is for your graphics,
instead of using an image,

00:15:59.280 --> 00:16:02.480
you could use a technology called SVG.

00:16:02.480 --> 00:16:06.200
So it's a declarative API for
drawing and animating shapes,

00:16:06.410 --> 00:16:08.000
lines, arcs, and more.

00:16:08.000 --> 00:16:13.090
It's drawn by the web browser,
so it looks good even if users

00:16:13.090 --> 00:16:16.300
zoom in to the maximum zoom level.

00:16:16.300 --> 00:16:19.640
your content is still
going to remain sharp.

00:16:20.760 --> 00:16:24.540
So with the advent of these new
devices that people are able to

00:16:24.570 --> 00:16:28.760
zoom in on super close to the text,
a lot of people are adopting SVG for

00:16:28.760 --> 00:16:31.300
content that they really care about.

00:16:31.410 --> 00:16:33.320
So the New York Times is a great example.

00:16:33.390 --> 00:16:37.040
They've chosen to draw
their logo with SVG.

00:16:37.380 --> 00:16:41.930
So here's an actual screenshot of
zoomed in on the New York Times.

00:16:41.930 --> 00:16:45.580
Other elements on the page
look a little bit grainy,

00:16:45.580 --> 00:16:49.390
but the logo remains sharp,
even though I'm completely zoomed in.

00:16:51.860 --> 00:16:53.670
Okay, so that's for graphics.

00:16:53.820 --> 00:16:54.810
You could use SVG.

00:16:54.920 --> 00:16:57.450
What about just plain old images?

00:16:57.640 --> 00:17:00.400
Well, there's a couple different
solutions here as well.

00:17:00.400 --> 00:17:04.270
So one is if you have just a simple
web app with a couple images,

00:17:04.270 --> 00:17:08.210
something that you could do is, like,
we have this image.

00:17:08.270 --> 00:17:12.300
It's 300 pixels by 450 pixels wide.

00:17:12.480 --> 00:17:16.710
One approach you can take is to actually
create an image that's double the size.

00:17:16.750 --> 00:17:20.400
So now we have an image that's
600 pixels by 900 pixels.

00:17:20.450 --> 00:17:25.590
And then set the height and width of that
image to half of those dimensions in CSS.

00:17:25.730 --> 00:17:32.680
So here, again,
we're going to be packing four

00:17:32.680 --> 00:17:32.680
pixels into every unit instead
of just one pixel every unit.

00:17:35.060 --> 00:17:38.270
You're probably familiar
already with CSS media queries.

00:17:38.370 --> 00:17:42.950
They've been around for a long time to
do things like provide different layouts

00:17:43.170 --> 00:17:48.140
if your web page is viewed on a screen
versus a printed version of your website.

00:17:48.140 --> 00:17:52.720
So these are probably some media
queries that you're familiar with.

00:17:52.770 --> 00:17:59.750
There are additional media queries
to measure or check the device width.

00:17:59.800 --> 00:18:03.500
So here's a media query for
iPhone and one for iPad.

00:18:04.590 --> 00:18:10.840
And media queries have a new value,
and that's device pixel ratio.

00:18:10.970 --> 00:18:15.650
So if we wanted to look for
an iPhone 4 retina display,

00:18:15.650 --> 00:18:19.890
we could use this expression
in our media query,

00:18:19.910 --> 00:18:22.020
device pixel ratio.

00:18:22.020 --> 00:18:25.350
There's variants of it, of course,
min device pixel ratio and

00:18:25.350 --> 00:18:26.840
max device pixel ratio.

00:18:26.870 --> 00:18:31.010
So in my second example
here of a media query,

00:18:31.080 --> 00:18:36.600
I'm querying for a device that
is 320 pixels wide and has a

00:18:36.600 --> 00:18:40.200
min device pixel ratio of 2,
because I want to load this image

00:18:40.670 --> 00:18:44.710
for iPhone 4 retina displays and
any displays in the future that have

00:18:44.760 --> 00:18:47.890
an even greater device pixel ratio.

00:18:50.020 --> 00:18:52.480
So that's in your style sheet.

00:18:52.480 --> 00:18:56.330
You know, you can load different
background images for different

00:18:56.330 --> 00:19:00.050
devices and different displays,
but you can also evaluate a

00:19:00.050 --> 00:19:02.330
CSS media query from JavaScript.

00:19:02.380 --> 00:19:09.070
So we can check here for the
style media property and call the

00:19:09.070 --> 00:19:12.940
match medium function on that,
and then we're just passing the

00:19:13.040 --> 00:19:16.580
exact same CSS media query that we
saw before on the previous slide

00:19:16.580 --> 00:19:18.160
that we had in our declarative CSS.

00:19:19.260 --> 00:19:21.670
If that evaluates to true,
I can set the source of

00:19:22.090 --> 00:19:26.760
my image to my retina,
my JPEG that I want to use

00:19:26.820 --> 00:19:29.930
for the retina display,
and then I'm going to just append

00:19:29.930 --> 00:19:31.340
that image to the document.

00:19:31.340 --> 00:19:33.360
Or you could insert it anywhere, really.

00:19:36.220 --> 00:19:40.420
Okay, so that solves kind of our
second class of problems,

00:19:40.550 --> 00:19:42.710
pixelated images on retina displays.

00:19:42.830 --> 00:19:47.270
Let's move on to this last one,
flaky fixed positioning.

00:19:49.820 --> 00:19:54.400
So you've probably all seen different
websites that use CSS positioning.

00:19:54.450 --> 00:19:55.520
Here's one.

00:19:55.520 --> 00:20:01.100
It's united.com, booking,
travel via frequent flyer miles.

00:20:01.100 --> 00:20:06.410
And the code that may show this bar at
the bottom of the screen as I scroll,

00:20:06.410 --> 00:20:11.080
we're setting position to fixed
and bottom to zero pixels.

00:20:12.080 --> 00:20:15.300
So on the desktop, as I scroll,
that bar is going to stay

00:20:15.300 --> 00:20:17.120
at the bottom of the screen.

00:20:17.130 --> 00:20:21.870
But if I have the same web page,
the same exact code on iPad, as I scroll,

00:20:21.930 --> 00:20:24.720
the bar is going to scroll
along with the content.

00:20:24.740 --> 00:20:28.290
And that is not exactly what I want.

00:20:29.110 --> 00:20:33.270
There are a lot of JavaScript libraries
out there that are designed

00:20:33.310 --> 00:20:35.380
to work around this problem.

00:20:35.450 --> 00:20:39.550
Entire JavaScript libraries are
designed to help you keep an

00:20:39.580 --> 00:20:42.060
element on screen as you scroll.

00:20:42.060 --> 00:20:44.800
So we know it's something that people
have been really interested in.

00:20:45.500 --> 00:20:49.560
While these libraries are great,
they have a shortcoming in that scroll

00:20:49.630 --> 00:20:52.960
events are only emitted once a user
lifts their finger from the screen.

00:20:52.960 --> 00:20:57.020
So as their finger is down and
they're moving to scroll up and down,

00:20:57.020 --> 00:20:59.120
scroll events are not firing.

00:20:59.120 --> 00:21:02.300
So they can really only move that
bar into place once the user has

00:21:02.300 --> 00:21:04.380
lifted their finger from the screen.

00:21:07.510 --> 00:21:12.050
So to show you how to make this work,
CSS fixed positioning in Safari on iOS,

00:21:12.140 --> 00:21:14.910
I'm going to invite Beth Dakin
back up to the stage,

00:21:15.000 --> 00:21:17.240
and we're going to do a quick demo.

00:21:17.240 --> 00:21:18.200
All right.

00:21:18.380 --> 00:21:19.540
So we have this website.

00:21:19.620 --> 00:21:21.960
It was created last year
by one of our engineers,

00:21:22.070 --> 00:21:25.550
Jing Jin,
for her awesome session on CSS last year.

00:21:25.560 --> 00:21:27.720
It was pretty much
equally awesome this year.

00:21:27.720 --> 00:21:30.050
So if you didn't go,
you should catch it on video.

00:21:30.190 --> 00:21:31.460
But I have these elements.

00:21:31.460 --> 00:21:33.340
I have this badge here.

00:21:33.340 --> 00:21:36.310
I have this navigation bar at
the top and this sticky note.

00:21:36.410 --> 00:21:38.600
And right now,
these are all using absolute positioning.

00:21:38.600 --> 00:21:43.040
So as I scroll,
they're scrolling along with the page.

00:21:43.360 --> 00:21:48.510
So I'm just going to go
ahead into my CSS file here,

00:21:48.510 --> 00:21:54.360
and I'm going to change these
to use fixed positioning.

00:21:58.600 --> 00:22:02.540
OK, so I've changed the
navigation bar at the top,

00:22:02.540 --> 00:22:07.220
the sticky note, and the badge to all
use fixed positioning.

00:22:07.300 --> 00:22:09.860
So I'm going to save that file.

00:22:10.110 --> 00:22:12.160
Reload this page.

00:22:12.180 --> 00:22:16.780
And now, when I scroll,
those elements are staying put.

00:22:16.800 --> 00:22:19.230
They are not moving with
the rest of the content.

00:22:19.560 --> 00:22:22.700
So Beth, will you show us what that
looks like on an iPad?

00:22:22.840 --> 00:22:24.650
BETH DANKIN: Sure.

00:22:27.930 --> 00:22:34.260
Let me reload the page here so I get
the latest and greatest version.

00:22:34.370 --> 00:22:36.910
I'm going to scroll,
but I'm not getting any of the

00:22:36.910 --> 00:22:40.090
fixed position awesomeness that
you just added to the desktop.

00:22:40.530 --> 00:22:41.270
Oh, well, you know what?

00:22:41.380 --> 00:22:44.950
I actually have another
iPad here to show you.

00:22:45.090 --> 00:22:46.840
All right.

00:22:46.890 --> 00:22:52.080
Let me just also reload the page to make
sure that I have the latest version.

00:22:52.090 --> 00:22:58.700
And now I'm going to scroll.

00:23:01.110 --> 00:23:02.400
How did you do that, Vicki?

00:23:02.400 --> 00:23:04.600
How is your iPad different than my iPad?

00:23:04.600 --> 00:23:06.980
Well, the iPads, you know,
they're pretty much exactly the same.

00:23:06.980 --> 00:23:09.280
They're both iPad 2,
so they're both pretty awesome.

00:23:09.280 --> 00:23:11.400
But this iPad has something
different about it,

00:23:11.420 --> 00:23:14.430
and that is that it's
using Safari on iOS 5.0.

00:23:14.660 --> 00:23:19.000
So, as you may have noticed,
if you've downloaded the seed already,

00:23:19.090 --> 00:23:22.370
fixed positioning is now
working in Safari on iOS.

00:23:22.540 --> 00:23:27.910
So, it definitely deserves applause.

00:23:28.260 --> 00:23:29.950
So that looks great
when you're scrolling,

00:23:29.960 --> 00:23:31.730
but what does it look
like when you zoom in?

00:23:31.760 --> 00:23:33.280
That is a really good question, Beth.

00:23:33.280 --> 00:23:35.740
You know,
we have these zoomable interfaces now.

00:23:35.760 --> 00:23:39.540
How do we account for the fact that
people are going to want to zoom in?

00:23:39.540 --> 00:23:41.240
What's going to happen to those elements?

00:23:41.240 --> 00:23:41.960
Let me show you.

00:23:41.960 --> 00:23:42.460
OK.

00:23:42.460 --> 00:23:43.060
OK.

00:23:43.130 --> 00:23:44.580
So I'm going to zoom in.

00:23:44.580 --> 00:23:48.020
And as you can see,
the elements are growing in size

00:23:48.020 --> 00:23:49.950
and they're also staying put.

00:23:50.010 --> 00:23:53.890
So we have some Z-ordering so that the
badge is behind our content in the middle

00:23:53.950 --> 00:23:55.990
here and the sticky is in front of that.

00:23:56.010 --> 00:24:00.660
But as I pinch to zoom in,
they're getting bigger.

00:24:00.670 --> 00:24:04.670
But then at some point,
Safari notices that if I had these

00:24:04.840 --> 00:24:08.130
two things that are fixed on the
side and they kept just growing in

00:24:08.130 --> 00:24:12.380
size and stayed put where they were,
then they would start overlapping.

00:24:12.380 --> 00:24:18.020
So what we do is we start moving
those a little bit off of the page.

00:24:18.020 --> 00:24:22.870
So if you watch this really closely,
like here on the badge, watch the H.

00:24:23.010 --> 00:24:24.920
It's still on screen, still on screen.

00:24:24.920 --> 00:24:26.000
Now we've reached a threshold.

00:24:26.000 --> 00:24:28.460
We're Safari saying, OK,
it's getting too close.

00:24:28.530 --> 00:24:30.080
These might start overlapping.

00:24:30.080 --> 00:24:32.700
I'm going to start moving
things off the screen.

00:24:32.700 --> 00:24:34.070
And that's basically what happens.

00:24:34.090 --> 00:24:37.580
So they're still accessible
but not overlapping.

00:24:37.580 --> 00:24:41.030
And we think that this is going to
be something that works great for

00:24:41.440 --> 00:24:44.110
existing web content out there.

00:24:44.150 --> 00:24:46.440
The web is big and
there's lots of content.

00:24:46.460 --> 00:24:48.720
And any new content that
you guys might create.

00:24:48.810 --> 00:24:54.980
So I hope you enjoy it because it
was pretty tricky to get going.

00:25:01.610 --> 00:25:06.550
So about this CSS fixed
positioning that's new in iOS 5,

00:25:06.550 --> 00:25:09.460
something, you know,
just watch for kind of

00:25:09.460 --> 00:25:11.220
overlapping elements.

00:25:11.220 --> 00:25:14.630
We had some Z ordering there,
so some of our elements were overlapping.

00:25:14.720 --> 00:25:20.440
Our content in the middle
was semi-transparent,

00:25:20.500 --> 00:25:23.130
so it didn't matter,
but test your content to make sure

00:25:23.130 --> 00:25:23.130
that it works well with this new model.

00:25:23.520 --> 00:25:27.080
So you might be saying to yourself,
oh my gosh, this is great.

00:25:27.110 --> 00:25:31.240
I get to make that web app that
I always wanted with that element

00:25:31.310 --> 00:25:35.650
fixed to the top or bottom,
and it's going to be super great.

00:25:35.900 --> 00:25:39.070
Well, you could use that approach,
but there's a second approach

00:25:39.070 --> 00:25:42.320
that I think might be even better
for that specific use case,

00:25:42.320 --> 00:25:46.200
a web app that fits the screen and has a
menu fixed to either the top or bottom.

00:25:46.200 --> 00:25:48.980
And that is to use an
overflow scroll area.

00:25:48.980 --> 00:25:53.000
So the code for doing that
might look something like this.

00:25:53.320 --> 00:25:54.200
I have a header.

00:25:54.320 --> 00:25:56.430
It's 320 pixels wide.

00:25:56.430 --> 00:25:58.360
I made it 56 pixels tall.

00:25:58.360 --> 00:25:59.670
I gave it a background color.

00:25:59.750 --> 00:26:01.230
And then I have my content.

00:26:01.230 --> 00:26:04.600
And that's got the overflow
style set to scroll.

00:26:04.600 --> 00:26:06.640
And that has a height of 300 pixels.

00:26:08.480 --> 00:26:11.010
Then in my HTML,
I'm just going to order those

00:26:11.010 --> 00:26:12.630
elements one after another.

00:26:12.900 --> 00:26:17.430
The heading that I want fixed to
the top of the screen followed

00:26:17.430 --> 00:26:19.450
by the content below it.

00:26:19.520 --> 00:26:23.500
So you might be saying to yourself,
overflow scroll.

00:26:23.500 --> 00:26:25.200
You've got to be kidding me.

00:26:25.200 --> 00:26:29.750
That content is only going to
be scrollable with two fingers.

00:26:29.750 --> 00:26:34.620
It takes a two-finger gesture to
scroll content in Safari on iOS.

00:26:35.960 --> 00:26:39.440
Well,
I'm happy to tell you that in iOS 5,

00:26:39.440 --> 00:26:42.330
overflow scroll areas are no
longer going to require two

00:26:42.430 --> 00:26:44.100
fingers to scroll the content.

00:26:44.100 --> 00:26:46.470
So...

00:26:48.510 --> 00:26:54.990
One might say that we've given one
finger to two-finger scrolling.

00:26:55.520 --> 00:26:58.460
In the scene that you have,
it's looking pretty good,

00:26:58.460 --> 00:27:02.170
but we're going to be continuing to
improve it in other ways as we get

00:27:02.170 --> 00:27:04.260
closer and closer to shipping iOS 5.

00:27:04.670 --> 00:27:09.410
So please watch the release notes for
more information about this feature.

00:27:10.000 --> 00:27:13.810
You know, as we continue to improve this,
there's something that makes this a

00:27:13.910 --> 00:27:17.970
really attractive thing if you're trying
to make a really great-looking web app,

00:27:18.020 --> 00:27:19.940
and that is the scrollbar behavior.

00:27:19.940 --> 00:27:24.100
So if you keep your eye on this area,
if I were just using an

00:27:24.100 --> 00:27:28.220
element with fixed positioning,
the scrollbar would show up

00:27:28.460 --> 00:27:32.010
at the top and then overlap,
you know, my heading at the top.

00:27:32.820 --> 00:27:36.600
If I'm using an overflow scroll area,
then the scrollbar behavior is

00:27:36.600 --> 00:27:38.410
much more like I would expect.

00:27:38.510 --> 00:27:40.580
It's only showing up
in the scrollable area.

00:27:40.580 --> 00:27:43.480
And that's going to be what you want if
you're creating an app like this one.

00:27:46.820 --> 00:27:50.890
So,
thanks to the Safari engineering team,

00:27:50.900 --> 00:27:53.660
we solved that final problem,
flaky fixed positioning.

00:27:53.660 --> 00:27:58.980
And that covers all three areas
that I wanted to discuss with

00:27:58.980 --> 00:28:00.480
you today in Safari on iOS.

00:28:00.480 --> 00:28:03.280
So I'm going to hand it back
to Beth to talk about Lion.

00:28:03.280 --> 00:28:04.140
Thanks, Vicki.

00:28:04.140 --> 00:28:06.830
Let's move on to Lion.

00:28:08.650 --> 00:28:11.480
I want to cover a few topics
today with regard to the new

00:28:11.480 --> 00:28:13.700
scrollbar design on Lion.

00:28:13.780 --> 00:28:16.240
First, I want to give you an overview
of the new scrollbar design.

00:28:16.240 --> 00:28:19.260
I'm sure you've--well,
I know you've all seen it because

00:28:19.330 --> 00:28:22.820
it was talked about in the keynote,
and I'm sure some of

00:28:22.820 --> 00:28:27.210
you have installed Lion,
and maybe you went to other

00:28:27.280 --> 00:28:30.870
sessions that discussed it,
but I want to make sure

00:28:30.870 --> 00:28:30.870
we're all on the same page,
so I'm going to give you

00:28:30.870 --> 00:28:30.870
an overview of the design.

00:28:31.260 --> 00:28:35.500
Then we're going to talk about how
that design affects web content.

00:28:35.640 --> 00:28:42.620
I want to tell you a particular
part of the implementation about

00:28:42.890 --> 00:28:49.010
our color heuristic to give you a
little idea of what's going on there.

00:28:49.010 --> 00:28:49.010
And finally, we'll talk about scrolling.

00:28:49.010 --> 00:28:49.010
So let's begin with the new design.

00:28:49.820 --> 00:28:52.380
The theme of Lion is back to the Mac.

00:28:52.500 --> 00:28:58.800
So Mac OS X has been inspired by iOS,
just like iOS originally inspired-- wait,

00:28:58.800 --> 00:29:00.530
I said that wrong.

00:29:00.600 --> 00:29:06.400
iOS has inspired Mac OS X,
just like Mac OS X originally

00:29:06.400 --> 00:29:06.400
inspired iOS.

00:29:06.720 --> 00:29:09.410
And as I mentioned earlier,
we now have these great

00:29:09.600 --> 00:29:11.590
Magic Trackpads on our Macs.

00:29:11.590 --> 00:29:16.130
So we have multi-touch gestures
available to us everywhere.

00:29:17.020 --> 00:29:20.530
It's really a natural progression
for Lion to change the way it

00:29:21.260 --> 00:29:24.960
indicates interaction to the user
with regard to scrollbar and scrolling

00:29:25.290 --> 00:29:27.040
in this new multi-touch world.

00:29:27.080 --> 00:29:31.060
The new Lion scrollbars really
have that look and feel of iOS,

00:29:31.060 --> 00:29:33.470
and it really makes sense in a
world where you interact with

00:29:33.470 --> 00:29:35.660
your computer with gestures.

00:29:35.730 --> 00:29:37.360
So before we take a
look at the new design,

00:29:37.360 --> 00:29:42.150
let's remind ourselves of what
scrollbars look like on Snow Leopard.

00:29:42.580 --> 00:29:44.250
So this is what they look
like on Snow Leopard.

00:29:44.320 --> 00:29:49.210
Probably the two most obvious features
of this scrollbar is the big blue

00:29:49.210 --> 00:29:53.120
scroll thumb and the fact that this is
a scrollbar that's always visible and

00:29:53.120 --> 00:29:55.680
always taking up space on the page.

00:29:55.680 --> 00:29:59.380
Now, Lion actually introduces
two new scrollbar designs.

00:29:59.380 --> 00:30:03.590
There's a legacy style that's actually
very similar to the Snow Leopard look.

00:30:03.770 --> 00:30:06.170
So we'll look at that one first.

00:30:06.600 --> 00:30:07.280
It looks like this.

00:30:07.500 --> 00:30:08.860
There is a bit of a redesign here.

00:30:08.860 --> 00:30:13.440
Instead of that big blue scroll thumb,
we have a more slender gray scroll thumb.

00:30:13.440 --> 00:30:17.120
But otherwise, this behaves just like the
Snow Leopard scroll bar.

00:30:17.120 --> 00:30:19.470
So this is a scroll bar
that's always visible,

00:30:19.470 --> 00:30:21.860
and it's always taking
up space on the page.

00:30:21.860 --> 00:30:25.630
And just so you know,
users who have Lion on a machine

00:30:25.630 --> 00:30:30.010
that does not have a multi-touch
input device hooked up to it,

00:30:30.350 --> 00:30:35.380
their system will default to using
this legacy style of scroll bars.

00:30:35.380 --> 00:30:38.500
But it is able to be controlled
manually in system preferences.

00:30:38.500 --> 00:30:43.660
So the new, new design, of course,
is the overlay scroll bar.

00:30:43.660 --> 00:30:46.540
Overlay scroll bars just
sit on top of content.

00:30:46.540 --> 00:30:49.430
They take up zero pixels
of additional space.

00:30:49.430 --> 00:30:52.360
And of course, most of the time,
they are not visible.

00:30:52.360 --> 00:30:56.200
So that's a big part of the new design,
is the fact that they're not

00:30:56.270 --> 00:30:57.860
visible a lot of the time.

00:30:57.860 --> 00:31:01.220
And so I want to explain to you when
you should expect them to be visible.

00:31:01.220 --> 00:31:04.000
Because that's a big part of
understanding its behavior.

00:31:04.320 --> 00:31:07.290
But also, there's actually a bug in
the developer seed you have.

00:31:07.410 --> 00:31:11.830
So I want you to know how to expect
these to behave in the future.

00:31:11.850 --> 00:31:15.390
So first of all,
when a web page finishes loading,

00:31:15.390 --> 00:31:20.800
the scroll bars will flash to indicate
that there is content to scroll to.

00:31:21.160 --> 00:31:24.110
Then if the window is
ordered out for any reason,

00:31:24.570 --> 00:31:27.200
when it becomes the
frontmost window again,

00:31:27.200 --> 00:31:30.050
the scrollbars will flash then as well.

00:31:31.370 --> 00:31:34.620
The scroll bars are always
visible when scrolling a page,

00:31:34.640 --> 00:31:39.320
but just hovering in the scroll bar
region will not cause them to appear.

00:31:39.320 --> 00:31:41.780
However,
clicking in the scroll bar region

00:31:41.780 --> 00:31:45.320
does cause the page to scroll,
so that's important to know

00:31:45.390 --> 00:31:48.760
for hit testing purposes,
that little scroll bar region,

00:31:48.760 --> 00:31:51.260
even when there's no scroll
bar visible whatsoever,

00:31:51.260 --> 00:31:52.660
it's still swallowing clicks.

00:31:52.740 --> 00:31:56.760
So if you happen to be on a website
where there is a link or something

00:31:56.760 --> 00:31:59.780
right against the edge of the web page,
if you tried to click the link

00:31:59.840 --> 00:32:03.280
in that little narrow 10-pixel
area that's the scroll bar region,

00:32:03.280 --> 00:32:05.920
you wouldn't click the link,
you would click the scroll bar region.

00:32:05.920 --> 00:32:08.190
So that's one thing to note.

00:32:10.050 --> 00:32:13.900
And finally, if you happen to hover over
in the scrollbar region when

00:32:14.110 --> 00:32:16.580
the scrollbar is showing,
you'll see this additional

00:32:16.580 --> 00:32:18.020
little track-like thing.

00:32:18.020 --> 00:32:21.620
It's really hard to see on
this particular recording,

00:32:21.620 --> 00:32:24.540
so we'll take a closer
look on the next slide.

00:32:24.540 --> 00:32:26.640
Here's a closer look at
the scrollbars in general.

00:32:26.640 --> 00:32:29.900
On the left here,
we have a snow leopard scrollbar,

00:32:29.900 --> 00:32:32.280
and on the right,
we have the new overlay scrollbars.

00:32:32.280 --> 00:32:35.750
Of course,
the big blue scroll thumb is now

00:32:35.970 --> 00:32:38.500
this slender gray knob thing.

00:32:40.010 --> 00:32:44.150
Also note the controls at the bottom
that we always had on Snow Leopard,

00:32:44.150 --> 00:32:45.680
these arrows in the resize corner.

00:32:45.680 --> 00:32:48.620
Those aren't there in the new
Lion legacy design either,

00:32:48.620 --> 00:32:51.480
so controls are officially
a thing of the past.

00:32:53.630 --> 00:32:59.000
Then we have this track on Snow Leopard,
and we have this only rarely visible

00:32:59.000 --> 00:33:00.800
track with the new overlay scrollbars.

00:33:00.800 --> 00:33:03.930
Again, you only end up seeing that when
you hover over a scrollbar when

00:33:03.930 --> 00:33:07.100
it happens to already be showing,
then a track will also appear.

00:33:09.910 --> 00:33:13.640
Okay, so hopefully we're all on the
same page now in how we expect the

00:33:13.640 --> 00:33:16.140
new overlay scrollbars to behave.

00:33:16.280 --> 00:33:19.220
So let's talk about how
they affect web content.

00:33:19.220 --> 00:33:23.100
So I also took Jingjin's
awesome demo from last year and

00:33:23.240 --> 00:33:25.600
adapted it to my amazing blog.

00:33:25.600 --> 00:33:28.740
I've added an overflow
scroll div in the middle,

00:33:28.740 --> 00:33:32.440
which brings us to my first point,
which is that all scrollable

00:33:32.440 --> 00:33:33.660
areas honor the design.

00:33:33.660 --> 00:33:36.660
You'll see that my overflow scroll
div has an overlay scrollbar

00:33:36.700 --> 00:33:38.480
just like my main document does.

00:33:38.510 --> 00:33:41.710
And if I had legacy scrollbars,
they would both have legacy scrollbars.

00:33:41.720 --> 00:33:43.740
So everything will be the same there.

00:33:43.740 --> 00:33:46.580
Of course, most of the time,
they'll look like this.

00:33:46.720 --> 00:33:50.260
So you may have noted that I said
this was an overflow scroll div.

00:33:50.260 --> 00:33:53.610
So this may look a little bit
different than you might expect an

00:33:53.610 --> 00:33:57.760
overflow scroll div to look because
there are no empty scrollbar tracks.

00:33:57.800 --> 00:34:00.160
So to give you a visual
of exactly what I mean,

00:34:00.160 --> 00:34:03.630
this is what the same page looks
like with legacy scrollbars.

00:34:03.670 --> 00:34:07.730
You'll see that even though there's
no content to scroll to horizontally

00:34:07.730 --> 00:34:10.650
in that overflow scroll div,
there's still an empty

00:34:10.680 --> 00:34:12.370
horizontal scrollbar track.

00:34:12.440 --> 00:34:17.970
And that's just part of what overflow
scroll means on Snow Leopard and on

00:34:17.970 --> 00:34:23.560
any platform really that has this
track look of a default scrollbar.

00:34:23.560 --> 00:34:26.440
And just to really emphasize that,
if there was actually

00:34:26.440 --> 00:34:28.660
no content in this div,
you would still have

00:34:28.660 --> 00:34:30.140
empty scrollbar tracks.

00:34:31.930 --> 00:34:33.200
But not in an overlay world.

00:34:33.200 --> 00:34:35.490
In an overlay world,
there are no empty scrollbar tracks.

00:34:35.680 --> 00:34:41.040
That track-like thing that shows up
sometimes when you happen to hover over

00:34:41.040 --> 00:34:43.940
the scroll thumb when it's showing,
it's just too much of

00:34:43.940 --> 00:34:45.600
a different paradigm.

00:34:45.600 --> 00:34:49.260
It doesn't apply here,
so it doesn't make sense to show that

00:34:49.350 --> 00:34:52.200
for overflow scroll in an overlay world.

00:34:54.500 --> 00:35:52.800
[Transcript missing]

00:35:53.520 --> 00:35:55.020
So you really just see more.

00:35:55.020 --> 00:35:58.640
You have 15 more visual pixels.

00:35:59.260 --> 00:36:02.340
Most DOM metrics remain the
same despite this difference.

00:36:02.340 --> 00:36:04.620
Things like offset width, scroll width.

00:36:04.680 --> 00:36:07.480
These things never really
factored in scrollbars.

00:36:07.480 --> 00:36:10.340
They're about the outer
limits of the element.

00:36:10.340 --> 00:36:11.820
They're the same.

00:36:12.000 --> 00:36:13.720
However, some are different.

00:36:13.750 --> 00:36:17.810
Client width, for instance,
is defined as a measurement that

00:36:17.810 --> 00:36:20.760
subtracts out the width of the scrollbar.

00:36:20.760 --> 00:36:24.420
And if the width of a scrollbar is
15 pixels or if it's zero pixels,

00:36:24.420 --> 00:36:27.020
you'll end up getting a
different number there.

00:36:27.040 --> 00:36:29.200
So that's something to look out for.

00:36:30.670 --> 00:36:33.910
Really, you should just test your
content in both of these worlds,

00:36:33.910 --> 00:36:36.150
in the overlay world
and the legacy world.

00:36:36.250 --> 00:36:37.840
And you should make sure
you like what you see.

00:36:37.840 --> 00:36:40.600
I can say,
having been browsing the web for

00:36:40.600 --> 00:36:45.830
months now with overlay scrollbars,
that I don't expect existing content

00:36:45.850 --> 00:36:48.400
to really change with these changes.

00:36:48.400 --> 00:36:51.210
I haven't seen any of these
things appearing as gotchas.

00:36:51.220 --> 00:36:53.200
I've seen one instance of it, actually.

00:36:53.950 --> 00:36:57.950
But it's something to be aware of,
that you can't expect scrollbars to

00:36:57.950 --> 00:37:02.300
be the same size on every platform,
and that some DOM metrics take

00:37:02.300 --> 00:37:03.800
that into account and some don't.

00:37:03.990 --> 00:37:05.050
Just something to think about.

00:37:07.180 --> 00:37:09.010
Okay,
so hopefully that gives you an idea of

00:37:09.010 --> 00:37:10.900
how the new design affects web content.

00:37:10.970 --> 00:37:12.000
There are a few other things.

00:37:12.000 --> 00:37:15.980
One I'll mention just briefly is that
if you happen to do any amount of

00:37:15.980 --> 00:37:20.660
custom CSS styling to your scrollbars,
they'll look exactly the same on

00:37:20.660 --> 00:37:22.300
Lion as they would on Leopard.

00:37:22.300 --> 00:37:27.430
They'll default to that legacy style
look where they'll always be there

00:37:27.540 --> 00:37:31.580
and they're always taking up space,
and they'll look the

00:37:31.580 --> 00:37:32.890
same way you styled them.

00:37:32.890 --> 00:37:32.890
So that won't be affected,
just so you know.

00:37:33.630 --> 00:37:36.270
So let's talk about the color heuristic.

00:37:36.430 --> 00:37:38.400
I've shown you lots of
pictures of scrollbars today.

00:37:38.400 --> 00:37:39.710
I'm sure you've seen
them a lot this week.

00:37:40.050 --> 00:37:43.330
They usually look like this,
this gray scroll thumb.

00:37:43.330 --> 00:37:45.740
However,
on a page with a darker background,

00:37:45.740 --> 00:37:48.150
you'll see a scroll thumb
that looks like this.

00:37:48.150 --> 00:37:49.520
It's a lighter color.

00:37:50.580 --> 00:37:55.540
So what we're doing in WebKit is
we're trying to assess the background

00:37:55.630 --> 00:38:01.230
color of -- or the background of
the window that you're viewing,

00:38:01.510 --> 00:38:04.290
and we're trying to decide if we
think it's a light or dark background.

00:38:04.300 --> 00:38:07.710
And then we decide which scroll
bar thumb to use based on whether

00:38:07.710 --> 00:38:09.560
it's a light or dark background.

00:38:09.650 --> 00:38:13.290
So I want to explain to you our current
heuristic for assessing whether a

00:38:13.370 --> 00:38:15.990
page has a light or dark background.

00:38:17.700 --> 00:38:21.550
Basically, we take relevant colors and we
composite them together using the

00:38:21.550 --> 00:38:23.680
Porter-Duff source over equation.

00:38:23.720 --> 00:38:27.550
And what we decide are the relevant
colors as of now are the background

00:38:27.550 --> 00:38:31.470
color of the HTML element,
the background color of the body element,

00:38:31.470 --> 00:38:33.500
and the base background color.

00:38:33.580 --> 00:38:35.310
The base background color
is really just white.

00:38:35.390 --> 00:38:37.470
It's the color of the window.

00:38:37.470 --> 00:38:42.030
But this is relevant in cases where
the background color of the HTML or

00:38:42.140 --> 00:38:45.310
body element has some alpha in it,
in which case that white blends through.

00:38:45.860 --> 00:38:48.870
So all of those colors
are blended together,

00:38:48.870 --> 00:38:51.200
and then the result is
converted to an HSL value,

00:38:51.200 --> 00:38:52.930
and that L gives us the lightness.

00:38:53.030 --> 00:38:55.250
If it's a light background,
we'll use a dark scroll knob

00:38:55.250 --> 00:38:56.540
that shows up really well.

00:38:56.550 --> 00:38:58.760
If it's a dark background,
we'll use a light scroll knob

00:38:58.760 --> 00:39:00.260
that also shows up really well.

00:39:00.560 --> 00:39:04.150
So a few things to note about the
heuristic as it's currently implemented

00:39:04.160 --> 00:39:06.620
is that background images are ignored.

00:39:06.620 --> 00:39:10.690
So if you have a really dark
background image covering your

00:39:10.700 --> 00:39:14.600
page and no background color set,
then you might run into a situation

00:39:14.700 --> 00:39:17.720
where you're not seeing the scrollbar
thumb that you expect to see.

00:39:17.720 --> 00:39:20.000
However,
that's a really easy fix because you can

00:39:20.130 --> 00:39:23.830
just set a dark background color that's
similar to your dark background image,

00:39:23.830 --> 00:39:26.300
and you'll never see the color,
but it will be picked

00:39:26.300 --> 00:39:28.400
up in this heuristic,
and the correct scroll

00:39:28.450 --> 00:39:29.840
thumb will be chosen.

00:39:31.590 --> 00:39:33.720
And all other elements
are ignored as well.

00:39:33.890 --> 00:39:38.420
So just to give you an idea of that,
if I take this example that I used

00:39:38.420 --> 00:39:42.820
earlier and I take a giant white div
and I position it over my content,

00:39:43.010 --> 00:39:46.530
I'm not really going to get
something that's exactly what

00:39:46.530 --> 00:39:48.770
I'm looking for or super useful.

00:39:49.040 --> 00:39:53.650
So a few things to note here is that
the scrollbar can be one of two colors.

00:39:53.810 --> 00:39:55.180
And you should make sure
you like what you see.

00:39:55.180 --> 00:39:56.210
You should test this out.

00:39:56.240 --> 00:39:58.840
And if you think the heuristic
isn't working for you and

00:39:58.840 --> 00:40:01.150
you can't work around it,
you should file bugs,

00:40:01.160 --> 00:40:04.120
bugs.webkit.org or bugreporter.apple.com.

00:40:06.220 --> 00:40:09.940
So hopefully that gives you an idea
of what you can expect in terms

00:40:09.940 --> 00:40:11.920
of different scrollbar colors.

00:40:11.920 --> 00:40:15.180
Finally, let's talk about scrolling.

00:40:15.920 --> 00:40:18.390
So there's some elasticity
in scrolling on Lion.

00:40:18.470 --> 00:40:21.490
We call this rubber banding sometimes.

00:40:23.260 --> 00:40:26.680
During a rubber band
scroll on Lion in Safari,

00:40:26.970 --> 00:40:28.480
scroll events continue to fire.

00:40:28.610 --> 00:40:30.880
So the on-scroll event,
on-mouse wheel event,

00:40:30.880 --> 00:40:35.130
they will continue to fire while the
rubber band is actually happening.

00:40:35.260 --> 00:40:38.040
The scroll offset can be negative
if you're at the top of the

00:40:38.040 --> 00:40:40.830
page and you're pulling it down
to see the linen behind it.

00:40:40.980 --> 00:40:44.650
At that time, the scroll offset of the
body will be negative.

00:40:44.800 --> 00:40:48.550
It can also be greater than you
expect if you're doing the same

00:40:48.600 --> 00:40:50.780
effect at the bottom of the page.

00:40:51.390 --> 00:40:53.960
And another thing to note
is this is different on iOS.

00:40:54.050 --> 00:40:57.600
As Vicki mentioned earlier,
scroll events on iOS fire when you

00:40:57.600 --> 00:40:59.620
lift your finger from the screen.

00:40:59.780 --> 00:41:01.420
On iOS, you're really not scrolling.

00:41:01.420 --> 00:41:02.500
You're panning around.

00:41:02.550 --> 00:41:03.980
It's really a different paradigm.

00:41:03.980 --> 00:41:09.020
So this is just something that's
different between the two platforms.

00:41:10.160 --> 00:41:13.820
And that's an overview of scrollbars
and scrolling and how you should

00:41:14.040 --> 00:41:16.780
expect them to affect your web content.

00:41:16.900 --> 00:41:19.570
So let's move on to fluid gestures.

00:41:20.100 --> 00:41:22.920
As you saw in the keynote on Monday,
we support some really cool new

00:41:22.920 --> 00:41:24.720
fluid gestures in Safari on Lion.

00:41:24.720 --> 00:41:29.290
We have a double-tap, a pinch-to-zoom,
and a pretty sleek

00:41:29.290 --> 00:41:31.400
back-forward swipe navigation.

00:41:38.970 --> 00:41:42.530
So with regards to those new gestures,
today I want to talk to you

00:41:42.530 --> 00:41:46.260
about how you can optimize your
web content for double-tap.

00:41:46.260 --> 00:41:49.280
Of course, this is extremely
relevant to iOS as well.

00:41:49.280 --> 00:41:53.360
And then we're going to talk about how
you can ensure back-forward performance,

00:41:53.530 --> 00:41:55.690
which is,
it's really great when you have a page

00:41:56.000 --> 00:41:59.640
that loads quickly back-forward when
you're using the swipe navigation.

00:41:59.640 --> 00:42:00.970
Beth Dakin, Vicki Murley

00:42:01.370 --> 00:42:03.280
I'll begin with double-tap.

00:42:03.420 --> 00:42:07.920
So to explain the best ways to structure
your web content for double-tap,

00:42:07.920 --> 00:42:11.150
I want to explain to you
the double-tap algorithm.

00:42:11.680 --> 00:42:14.340
It's the same algorithm on Lion and iOS.

00:42:14.350 --> 00:42:19.150
So this is the same algorithm that
you've been using already for years.

00:42:19.230 --> 00:42:21.440
It begins by finding the tapped element.

00:42:21.570 --> 00:42:26.300
So let's say I tapped on the beginning
of this text in this article.

00:42:26.790 --> 00:42:30.870
And then it finds the first block
or image ancestor of that element.

00:42:31.170 --> 00:42:34.990
So in this case, I tapped on some text,
so it will find a block ancestor.

00:42:35.310 --> 00:42:39.730
And it will probably be like a div
that the text is being laid out in,

00:42:39.730 --> 00:42:42.500
or a P element, something like that.

00:42:43.200 --> 00:42:45.310
In the case of a block,
which is what we have here

00:42:45.400 --> 00:42:48.290
where I've tapped on the text,
the block will be zoomed

00:42:48.290 --> 00:42:49.280
to fit width-wise.

00:42:49.420 --> 00:42:51.610
So it will look something like this.

00:42:52.550 --> 00:42:55.990
If I instead tapped on this image
at the beginning of this article,

00:42:55.990 --> 00:42:57.700
the image would be zoomed to fit.

00:42:57.840 --> 00:43:00.200
So the distinction here
is that with an image,

00:43:00.200 --> 00:43:02.280
you make sure you see the full image.

00:43:02.320 --> 00:43:05.420
The height and the width will
both be taken into account.

00:43:05.850 --> 00:43:10.090
If it's just a block,
we won't take the height

00:43:10.090 --> 00:43:10.090
of the block into account.

00:43:10.790 --> 00:43:12.830
And another thing to note is
that there is a maximum scale

00:43:12.990 --> 00:43:15.280
factor on both platforms,
and it's different.

00:43:15.280 --> 00:43:18.490
We find that what starts to seem
ridiculous as you keep zooming

00:43:18.490 --> 00:43:21.490
in more is somewhat related
to the size of your screen.

00:43:21.500 --> 00:43:26.630
So there is a slightly
different maximum scale factor.

00:43:27.590 --> 00:43:32.700
Double-tap is definitely an example
of something that just works

00:43:32.700 --> 00:43:38.330
the vast majority of the time.

00:43:38.330 --> 00:43:38.690
But there are some things that you can
keep in mind if you really want your

00:43:38.690 --> 00:43:38.690
site to work well with double-tap.

00:43:38.910 --> 00:43:41.670
First is to avoid wide blocks of text.

00:43:41.840 --> 00:43:43.820
Something like this,
if you double-tap on it,

00:43:43.820 --> 00:43:45.100
it doesn't change much.

00:43:45.100 --> 00:43:49.480
It's not really doing anything
interesting for the feature.

00:43:49.900 --> 00:43:53.310
But if your page is organized
into digestible little sections,

00:43:53.310 --> 00:43:56.930
then there's lots of opportunity
for double-tapping to be a really

00:43:56.930 --> 00:43:58.880
interesting user experience.

00:44:00.420 --> 00:44:06.180
Okay, so moving on,
let's talk about ensuring

00:44:06.180 --> 00:44:06.180
back-forward performance.

00:44:07.330 --> 00:44:09.830
Back-forward performance is
really important everywhere.

00:44:09.930 --> 00:44:11.600
It's always been an important issue.

00:44:11.720 --> 00:44:14.740
As I mentioned earlier,
it's relevant today because we

00:44:14.740 --> 00:44:18.370
have this new back-forward swipe
navigation in Safari on Lion,

00:44:18.370 --> 00:44:22.490
and it really does have the best
experience when going back is quick.

00:44:22.560 --> 00:44:25.870
But going back and forward being
fast has always been really,

00:44:25.980 --> 00:44:27.540
really important on iOS.

00:44:27.540 --> 00:44:31.070
If you're on a really slow network,
it can be a total drag to go back

00:44:31.070 --> 00:44:34.740
and have to wait 30 seconds for
a page to load all over again.

00:44:35.150 --> 00:44:38.180
It's really a relevant issue on
all platforms and all browsers,

00:44:38.180 --> 00:44:41.990
so getting good back-forward
performance is a great goal everywhere.

00:44:43.540 --> 00:44:46.690
The key to back-forward
performance is making sure your

00:44:46.690 --> 00:44:48.930
page gets into the page cache.

00:44:49.200 --> 00:44:51.080
So a lot of times when
people hear caching,

00:44:51.180 --> 00:44:54.970
they think caching resources
or an HTTP cache or storing

00:44:55.180 --> 00:44:56.740
these things on disk.

00:44:56.930 --> 00:45:00.480
But that's really not
what I'm talking about.

00:45:01.000 --> 00:45:02.980
I'm talking about the page cache.

00:45:03.050 --> 00:45:06.140
So normally,
when you navigate away from a page,

00:45:06.140 --> 00:45:07.820
it's just totally torn down.

00:45:07.960 --> 00:45:09.650
The whole DOM tree is destroyed.

00:45:09.740 --> 00:45:11.820
JavaScript objects are collected.

00:45:11.840 --> 00:45:13.400
It's just gone.

00:45:13.650 --> 00:45:16.240
But the whole point of the
page cache is to not do that.

00:45:16.360 --> 00:45:18.180
It's to actually keep
those things around,

00:45:18.350 --> 00:45:21.070
keep around the whole DOM,
keep around all of your

00:45:21.070 --> 00:45:22.260
JavaScript objects.

00:45:22.440 --> 00:45:25.130
When you go back to a page
that's stored in the page cache,

00:45:25.160 --> 00:45:27.320
it's practically instantaneous.

00:45:27.350 --> 00:45:30.620
You can kind of think of it as if
when you're normally viewing a page,

00:45:31.140 --> 00:45:33.710
you have a play button going,
and when that page goes

00:45:33.710 --> 00:45:36.460
into the page cache,
you've just hit pause.

00:45:36.470 --> 00:45:38.310
Going back to a page where
you've just hit pause,

00:45:38.460 --> 00:45:41.380
you just hit play again, it just works.

00:45:43.120 --> 00:45:45.460
So the key to getting your
page in the page cache is

00:45:45.460 --> 00:45:47.120
not to do something special.

00:45:47.120 --> 00:45:48.960
It's to not do a few things.

00:45:49.010 --> 00:45:51.790
You just want to avoid
things that are uncacheable.

00:45:51.800 --> 00:45:54.340
So let's talk about what's uncacheable.

00:45:54.340 --> 00:45:58.180
First of all, unfortunately,
HTTPS is uncacheable

00:45:58.180 --> 00:45:59.200
for security reasons.

00:45:59.200 --> 00:46:00.980
There's not much way to work around this.

00:46:01.120 --> 00:46:03.570
It's just not safe to
keep around the DOM or

00:46:03.570 --> 00:46:05.960
JavaScript objects of an HTTPS site.

00:46:05.960 --> 00:46:09.050
And if you are creating an HTTPS site,
it's probably because

00:46:09.050 --> 00:46:10.300
it has to be that way.

00:46:10.300 --> 00:46:11.220
It has to be secure.

00:46:11.460 --> 00:46:15.380
So unfortunately, there's not much of a
way around this one.

00:46:16.020 --> 00:46:17.760
Plugins are also not cacheable.

00:46:17.760 --> 00:46:20.970
Plugins run native code in the browser,
and there is no trivial way

00:46:20.970 --> 00:46:23.710
to say to that native code,
stop, and don't do anything bad

00:46:23.770 --> 00:46:24.890
for the next few minutes.

00:46:24.960 --> 00:46:28.300
So unfortunately,
you have to try to avoid plugins if

00:46:28.300 --> 00:46:29.640
you want to get into the page cache.

00:46:29.640 --> 00:46:31.990
But I think that there have been
a lot of sessions this week that

00:46:31.990 --> 00:46:34.840
have given really great ideas for
how to avoid plugins on your sites,

00:46:34.920 --> 00:46:39.260
such as the HTML5 video session
that happened earlier and the

00:46:39.260 --> 00:46:41.280
great CSS effects session.

00:46:41.280 --> 00:46:44.710
So hopefully, you'll get some ideas of
how to avoid using plugins.

00:46:45.740 --> 00:46:49.920
The next thing that's a really,
really big one is unload event handlers.

00:46:49.920 --> 00:46:55.310
Unload event handlers were designed
as a way to allow a web developer to

00:46:55.580 --> 00:46:59.780
do some page teardown at the end of,
when you're navigating

00:46:59.780 --> 00:47:00.860
away from the page.

00:47:00.860 --> 00:47:05.640
So it's sort of in the API contract
that a website author is allowed

00:47:05.640 --> 00:47:07.900
to totally destroy the page
in the unload event handler.

00:47:07.900 --> 00:47:10.780
And therefore,
it's just completely unsafe to cache a

00:47:10.780 --> 00:47:13.260
page that uses an unload event handler.

00:47:13.260 --> 00:47:17.270
There are no browsers, many browsers,
have a concept of a page cache.

00:47:17.280 --> 00:47:20.220
For example, Firefox calls theirs
the back-forward cache.

00:47:20.220 --> 00:47:24.300
And they, and we, no browser,
caches pages that use

00:47:24.330 --> 00:47:25.960
unload event handlers.

00:47:25.960 --> 00:47:30.060
Except, actually, new in iOS 5,
in an effort to make

00:47:30.060 --> 00:47:34.470
back as fast as possible,
Mobile Safari now ignores unload

00:47:34.470 --> 00:47:38.540
event handlers on pages that can
otherwise be put in the page cache.

00:47:38.540 --> 00:47:40.890
So there is an exception there.

00:47:40.910 --> 00:47:43.630
But if you really feel like there's
critical work that you need to

00:47:43.630 --> 00:47:47.230
do in an unload event handler,
I strongly encourage you to change,

00:47:47.240 --> 00:47:50.420
make a simple change,
instead of using unload and load,

00:47:50.420 --> 00:47:52.290
to use page show and page hide.

00:47:52.300 --> 00:47:55.880
Page show and page hide, first of all,
will run on Mobile Safari.

00:47:55.880 --> 00:47:58.310
So if you feel like you really
need to do some work when

00:47:58.520 --> 00:48:00.620
you're unloading your web page,
use these.

00:48:00.660 --> 00:48:02.640
But also, they're totally cacheable.

00:48:02.670 --> 00:48:06.180
The thing that makes
these cacheable is that,

00:48:06.180 --> 00:48:11.020
actually, the load event fires at
the single discrete moment

00:48:11.020 --> 00:48:12.710
when a web page is loaded.

00:48:12.720 --> 00:48:17.250
Page show fires at exactly the same
time but it also fires when it's

00:48:17.390 --> 00:48:18.880
being restored from the page cache.

00:48:18.880 --> 00:48:22.760
So any work that was undone in page
hide can be redone in page show.

00:48:22.760 --> 00:48:27.380
I strongly encourage you to use these
instead of load and unload as they are

00:48:27.380 --> 00:48:32.340
extremely cache-friendly and they're
also implemented on all major browsers.

00:48:35.220 --> 00:48:38.610
So that's sort of just the tip of
the iceberg of a really big topic

00:48:38.610 --> 00:48:42.490
in terms of website performance,
but it's a really easy way to get

00:48:42.550 --> 00:48:46.530
pretty awesome back-forward performance.

00:48:46.670 --> 00:48:49.690
So we've talked about
a lot of things today.

00:48:50.360 --> 00:48:54.460
I think one of the big messages here is
that most things will look great as is.

00:48:54.460 --> 00:48:56.960
We told you about a lot
of browser features today,

00:48:57.170 --> 00:49:00.210
and most of them are
things that just work.

00:49:00.320 --> 00:49:03.710
However, customizations and improvements
are available when you need

00:49:03.710 --> 00:49:05.190
them or when you want them.

00:49:05.460 --> 00:49:10.080
We work really hard here at Apple to make
existing content work better and better,

00:49:10.080 --> 00:49:13.700
and you probably saw that with the
new fixed positioning in iOS 5.

00:49:13.710 --> 00:49:17.850
But sometimes you will
need to adjust to things,

00:49:17.850 --> 00:49:23.480
and sometimes you'll just want to
make something better and better

00:49:23.480 --> 00:49:24.130
because it's all about the user and
delivering an amazing user experience.

00:49:24.490 --> 00:49:26.210
And finally,
you should just test your content.

00:49:26.290 --> 00:49:28.840
This is especially
applicable to the scrollbars.

00:49:28.970 --> 00:49:32.750
Just looking at overlay
scrollbars and legacy scrollbars

00:49:32.800 --> 00:49:34.830
will make a big difference.

00:49:35.960 --> 00:49:39.220
If you have any more questions,
you can always contact

00:49:39.300 --> 00:49:42.850
the fabulous Vicki Murley,
the same Vicki Murley that was on

00:49:43.020 --> 00:49:45.260
this very stage a few minutes ago.

00:49:46.500 --> 00:49:48.520
All of the relevant
sessions already happened,

00:49:48.520 --> 00:49:51.820
but I encourage you to look at the
videos if you didn't get to attend them.

00:49:51.820 --> 00:49:59.770
The whole internet and web track really
is somewhat relevant to this topic,

00:49:59.770 --> 00:49:59.770
so I encourage you to look
at all of the sessions,

00:49:59.770 --> 00:49:59.770
really.