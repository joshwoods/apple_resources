WEBVTT

00:00:10.370 --> 00:00:12.060
Hello, hello.

00:00:12.060 --> 00:00:14.710
How many repeat visitors do
we have from the last session?

00:00:15.570 --> 00:00:16.510
All right.

00:00:16.670 --> 00:00:18.240
Lots of hands.

00:00:18.400 --> 00:00:19.920
Well, hello again.

00:00:19.920 --> 00:00:21.920
My name is still Ivan.

00:00:22.150 --> 00:00:24.800
I still work on CoreOS security.

00:00:24.830 --> 00:00:29.730
And you're here because you want to hear
more about how App Sandbox will play

00:00:29.820 --> 00:00:35.020
with the Mac App Store and specifically
what that means for those of you

00:00:35.020 --> 00:00:39.610
that either have apps in the store
or plan to get apps into the store.

00:00:40.660 --> 00:00:44.550
This is the quick refresher.

00:00:44.660 --> 00:00:47.690
I know that you were gone for
over 15 minutes from the room,

00:00:47.780 --> 00:00:51.300
so some of this may
have gotten forgotten.

00:00:51.370 --> 00:00:54.490
Bottom line: new feature in Lion,
damage containment mechanism,

00:00:54.680 --> 00:01:00.100
last line of defense, not antivirus,
drive security policy by user intent.

00:01:00.160 --> 00:01:01.590
Good?

00:01:04.630 --> 00:01:09.030
So as you heard Craig mention yesterday,
Mac App Store submissions

00:01:09.030 --> 00:01:14.180
in November will be
required to use App Sandbox.

00:01:14.180 --> 00:01:18.900
And specifically what that means is that
every executable that you submit to the

00:01:18.900 --> 00:01:23.950
store will need to specify App Sandbox
entitlements that are appropriate

00:01:23.960 --> 00:01:25.790
for what that executable does.

00:01:26.020 --> 00:01:30.920
What’s more, in the process of actually
submitting your app to the store,

00:01:30.920 --> 00:01:35.370
you’ll need to describe how each
of the entitlements you requested

00:01:35.440 --> 00:01:38.030
is used or really why it’s needed.

00:01:40.890 --> 00:01:45.700
So if you take one thing
away from this talk,

00:01:45.960 --> 00:01:51.860
it's that choosing entitlements is
the single possibly most important

00:01:51.860 --> 00:01:56.340
interaction that you have with
the App Sandbox mechanism because

00:01:56.700 --> 00:02:00.850
The protection that App Sandbox can
afford your app is really only as good

00:02:00.880 --> 00:02:03.320
as the entitlements that you selected.

00:02:03.320 --> 00:02:07.460
And that means that you need to be
choosing the absolute minimum set of

00:02:07.460 --> 00:02:13.080
entitlements necessary to support the
features that your app actually has.

00:02:13.080 --> 00:02:17.190
And this is also important because
when you do go and select entitlements,

00:02:17.190 --> 00:02:20.770
those entitlements need to match
features that users can see

00:02:20.770 --> 00:02:22.330
and use from inside your app.

00:02:22.470 --> 00:02:30.480
So if you have a watchgrassgrow.app and
it's displaying grass growing and it's

00:02:30.600 --> 00:02:35.370
requesting the address book entitlement,
that's probably not very good.

00:02:35.490 --> 00:02:40.760
It's not clear why a watchgrassgrow.app
would want address book access.

00:02:40.930 --> 00:02:46.820
And it would be not good for someone
who can actually exploit grass growing

00:02:46.820 --> 00:02:50.200
to be able to get at your address book.

00:02:50.540 --> 00:02:53.510
You'll have to figure out very
carefully what is the minimum amount

00:02:53.560 --> 00:02:56.980
of entitlements that you guys need
for your app to get its job done.

00:02:57.080 --> 00:03:01.060
And the best way to do this is to
start with an absolute bare minimum

00:03:01.060 --> 00:03:05.010
of entitlements and then run your
app and see what sandbox violations

00:03:05.110 --> 00:03:09.550
actually get reported and only add
more entitlements in response to

00:03:09.710 --> 00:03:11.920
violations that make sense to you.

00:03:12.240 --> 00:03:15.270
You don't have to squelch
every violation if you find,

00:03:15.270 --> 00:03:18.540
for instance,
that some of them are coming

00:03:18.540 --> 00:03:21.660
from frameworks or libraries
that may not even be your own.

00:03:21.850 --> 00:03:24.700
You know, if there's no functional
impact on your app,

00:03:25.000 --> 00:03:27.860
the right thing to do is not to
add another entitlement to your

00:03:27.860 --> 00:03:30.740
app to make the violation go away.

00:03:30.790 --> 00:03:32.920
The right thing to do
is for you to realize,

00:03:32.920 --> 00:03:34.120
okay, this is good.

00:03:34.230 --> 00:03:35.420
My application is not affected.

00:03:35.440 --> 00:03:39.370
I'm not going to ask for another
entitlement that I don't actually

00:03:39.370 --> 00:03:41.050
have a need for in my app.

00:03:42.840 --> 00:03:47.940
So I briefly in the last session showed
you all the entitlements and I wanted

00:03:48.060 --> 00:03:54.020
to take you on more of a guided tour and
tell you a bit more about each of them.

00:03:55.830 --> 00:03:59.520
All of the App Sandbox entitlements
live in the same namespace,

00:03:59.540 --> 00:04:02.020
which is com.apple.security.

00:04:02.030 --> 00:04:07.670
And com.apple.security.appsandbox
is the big on/off switch for

00:04:07.670 --> 00:04:11.600
App Sandbox that controls whether
any of the other App Sandbox

00:04:11.670 --> 00:04:14.130
entitlements are even looked at.

00:04:14.510 --> 00:04:17.830
When you flip that switch to on,
when you say, yes,

00:04:17.840 --> 00:04:22.950
I want to be in an App Sandbox,
what that actually means is your

00:04:23.090 --> 00:04:25.530
app is going to run in a container.

00:04:26.450 --> 00:04:27.900
It will not have network access.

00:04:27.900 --> 00:04:29.900
It will not have access
to user documents.

00:04:29.900 --> 00:04:31.930
It cannot use the Open or Save panels.

00:04:32.030 --> 00:04:32.640
It can't print.

00:04:32.690 --> 00:04:33.700
It can't look at the camera.

00:04:33.700 --> 00:04:37.210
It can't talk to the microphone.

00:04:37.210 --> 00:04:37.210
It's basically...

00:04:37.470 --> 00:04:41.260
Just able to run and
access its container,

00:04:41.310 --> 00:04:42.960
and that’s it.

00:04:43.290 --> 00:04:45.620
So that's all you get when
you flip the master switch.

00:04:45.640 --> 00:04:48.150
And then for everything else that
you need that's more than that,

00:04:48.340 --> 00:04:52.350
you're going to have to select the
appropriate entitlement and request it.

00:04:53.640 --> 00:04:58.310
So probably the most important set
of entitlements for all of you that

00:04:58.310 --> 00:05:02.110
have document-based applications
will be entitlements that have

00:05:02.110 --> 00:05:04.620
to do with user-selected files.

00:05:04.850 --> 00:05:09.910
And this is basically a single
entitlement that comes in two flavors:

00:05:10.030 --> 00:05:11.990
one read-only, one read-write.

00:05:12.270 --> 00:05:15.890
And picking these entitlements
just means that your application is

00:05:15.890 --> 00:05:19.000
allowed to use the PowerBox facility.

00:05:19.080 --> 00:05:22.830
Which means it's allowed to prompt
the user with an open panel or a

00:05:22.830 --> 00:05:25.000
safe panel to select some files.

00:05:25.130 --> 00:05:28.990
That means that in the
case of Watch Grass Grow,

00:05:29.110 --> 00:05:32.800
not having these entitlements means
that even if the application was

00:05:32.830 --> 00:05:36.400
exploited and an attacker really
wanted to pop up a dialog asking the

00:05:36.400 --> 00:05:40.530
user to select some important file,
he couldn't do that because the

00:05:40.530 --> 00:05:42.870
facility would just not be available.

00:05:43.220 --> 00:05:46.390
So, document applications,
applications that want to be doing

00:05:46.460 --> 00:05:53.090
import and export and need to basically
interact with user documents and files

00:05:53.160 --> 00:05:57.080
that the user selects in any way will
need to be using these entitlements.

00:05:57.210 --> 00:06:01.580
And obviously, once again,
the minimum set of entitlements also

00:06:01.580 --> 00:06:06.210
means that if your app never really
modifies the files that it looks at,

00:06:06.230 --> 00:06:09.270
then obviously you should select
the read-only entitlement instead

00:06:09.270 --> 00:06:10.100
of the read-write entitlement.

00:06:10.100 --> 00:06:13.040
Because that way,
the damage containment that

00:06:13.040 --> 00:06:15.100
you get is that much stronger.

00:06:17.400 --> 00:06:19.050
The network entitlements
are just as simple.

00:06:19.050 --> 00:06:20.050
There’s only two of them.

00:06:20.280 --> 00:06:22.750
One for being able to make
outgoing network connections,

00:06:22.840 --> 00:06:24.180
that’s the client entitlement.

00:06:24.220 --> 00:06:26.830
One for being able to receive
incoming network connections,

00:06:26.910 --> 00:06:28.450
that’s the server entitlement.

00:06:28.720 --> 00:06:32.980
And at the moment, there’s really no,
with App Sandbox in line,

00:06:32.980 --> 00:06:35.220
you cannot restrict this further.

00:06:35.550 --> 00:06:38.450
You can’t say,
I want to only be able to make network

00:06:38.450 --> 00:06:42.580
connections to specific domain names
or ports or anything of the sort.

00:06:42.650 --> 00:06:46.430
So it’s essentially a binary
switch for outbound connections

00:06:46.450 --> 00:06:48.170
and inbound connections.

00:06:48.330 --> 00:06:51.550
And this is obviously
going to be pretty popular.

00:06:51.660 --> 00:06:55.930
Anything that needs to talk to
the network is going to need,

00:06:56.070 --> 00:06:59.010
in most cases, the client entitlement.

00:06:59.180 --> 00:07:02.210
The server entitlement should
be used more sparingly.

00:07:02.380 --> 00:07:04.320
Obviously,
only if you have a legitimate need

00:07:04.320 --> 00:07:07.390
to be receiving network connections
should you actually use that.

00:07:07.480 --> 00:07:11.010
So don’t assume that just because
you want to do network access,

00:07:11.010 --> 00:07:11.950
you need both.

00:07:14.710 --> 00:07:19.770
The personal information set of
entitlements are some of the touchiest

00:07:19.770 --> 00:07:25.620
in terms of the privileges they cover
because they directly expose user data.

00:07:25.620 --> 00:07:28.570
So these are entitlements for
controlling access to the address book,

00:07:28.570 --> 00:07:31.520
the calendars, the user's location.

00:07:31.520 --> 00:07:34.310
These are things that all
have very legitimate uses.

00:07:34.420 --> 00:07:37.970
So, you know,
a calendar client obviously wants

00:07:37.970 --> 00:07:42.010
access to the user's calendars
and things that are location-based

00:07:42.010 --> 00:07:45.820
applications and services totally
want access to the location.

00:07:45.820 --> 00:07:50.850
But because they have such strong
privacy ramifications for user data,

00:07:50.870 --> 00:07:53.850
it means that you really,
really should only use these if you

00:07:53.860 --> 00:07:55.510
have a very legitimate need for them.

00:07:55.580 --> 00:07:59.120
So it's really true of all entitlements,
but it's especially double super true

00:07:59.120 --> 00:08:01.990
for personal information entitlements.

00:08:04.620 --> 00:08:08.640
We have some specific entitlements
that grant you access to media

00:08:08.640 --> 00:08:13.450
assets that the user has,
so their pictures, their movies,

00:08:13.460 --> 00:08:15.010
their music.

00:08:15.180 --> 00:08:17.300
And these,
all three of these come in both

00:08:17.350 --> 00:08:18.940
read-only and read-write flavors.

00:08:19.000 --> 00:08:25.180
So if you're a music player app,
you probably want access

00:08:25.180 --> 00:08:29.320
to the user's music,
and you can think of other

00:08:29.320 --> 00:08:31.270
legitimate needs for these.

00:08:31.430 --> 00:08:34.850
Once again,
if your app doesn't expose functionality

00:08:34.850 --> 00:08:39.180
so that it would be pretty clear to
the user why your app would want to

00:08:39.180 --> 00:08:43.380
say have access to their pictures,
then you shouldn't be

00:08:43.380 --> 00:08:45.260
requesting that entitlement.

00:08:45.960 --> 00:08:49.970
Camera and microphone access
are also quite touchy.

00:08:50.080 --> 00:08:54.060
It would be pretty bad if
watchgrassgrow.app could spy on the

00:08:54.060 --> 00:08:56.840
user when the user isn't looking.

00:08:56.860 --> 00:09:00.250
Some applications have certain
needs that are sort of beyond just

00:09:00.250 --> 00:09:02.220
these built-in devices and they,
for instance,

00:09:02.260 --> 00:09:05.830
want to be able to talk to anything
that's sitting on the USB bus.

00:09:05.840 --> 00:09:10.780
There's entitlement that
lets you ask for that.

00:09:11.350 --> 00:09:13.100
Once again,
lots of apps that you can think of,

00:09:13.150 --> 00:09:16.230
podcast apps,
apps that are meant to support

00:09:16.230 --> 00:09:19.690
particular peripherals that
the user would plug in via USB,

00:09:19.890 --> 00:09:23.070
all have good needs for these.

00:09:23.630 --> 00:09:27.580
And then there is just a few
more assorted other entitlements,

00:09:27.580 --> 00:09:30.120
things like the print entitlement.

00:09:30.210 --> 00:09:34.120
If your app is both a
document-based app and one that

00:09:34.140 --> 00:09:38.100
needs to be able to print stuff,
then you need the print entitlement.

00:09:38.270 --> 00:09:45.750
And there is an
entitlement called inherit,

00:09:45.750 --> 00:09:47.810
which really means that
when you have bundled

00:09:48.150 --> 00:09:52.010
helper executables that
are not XPC services,

00:09:52.120 --> 00:09:57.480
they're just raw executables that
you're shipping as helpers and you're

00:09:57.480 --> 00:10:00.640
planning to run them via fork and exec.

00:10:00.870 --> 00:10:05.600
You need some way to tell the
operating system that those helpers

00:10:05.600 --> 00:10:08.280
need to inherit your main sandbox.

00:10:08.280 --> 00:10:14.640
And let me backtrack here and say,
if you have raw helpers,

00:10:14.640 --> 00:10:18.400
so not XPC services,
just binaries that you fork and exec,

00:10:18.460 --> 00:10:22.140
you cannot run them in a way that
doesn't inherit your sandbox.

00:10:22.200 --> 00:10:25.140
Your sandbox will be
inherited by those helpers.

00:10:25.200 --> 00:10:28.870
Absolutely,
there's no way to opt out of that.

00:10:29.020 --> 00:10:32.790
So the presence of the inherit
entitlement is merely to indicate

00:10:32.790 --> 00:10:37.330
when you're submitting your
application to the Mac App Store that,

00:10:37.330 --> 00:10:40.210
you know,
I am aware as the developer that

00:10:40.210 --> 00:10:44.890
this binary will get executed
and inherit the main app sandbox.

00:10:45.750 --> 00:10:50.090
For most of you,
we really hope that adopting App Sandbox

00:10:50.090 --> 00:10:53.440
is not going to be a ton of work.

00:10:53.440 --> 00:10:55.110
We gave you a nice graphical interface.

00:10:55.110 --> 00:10:58.760
You can check some check boxes
and see where that gets you.

00:10:58.860 --> 00:11:03.280
And it should be in many cases a
really straightforward process.

00:11:03.280 --> 00:11:07.310
For some other applications,
adopting App Sandbox may

00:11:07.320 --> 00:11:09.360
actually take more work.

00:11:09.360 --> 00:11:12.960
You might have to really sort of break
your application up into pieces and

00:11:13.330 --> 00:11:18.040
extract some of the functionality that
needs more privilege and XPC services.

00:11:18.040 --> 00:11:22.390
And we don’t want to make it so that
you have to do all the work all at once

00:11:22.390 --> 00:11:25.000
before you start seeing any benefits.

00:11:25.000 --> 00:11:30.050
So to try and address this issue,
we’ve created a set of...

00:11:30.590 --> 00:11:33.300
Temporary exception entitlements.

00:11:33.300 --> 00:11:35.580
And they are exactly
what they sound like.

00:11:35.580 --> 00:11:37.820
They are temporary and
they are exceptions.

00:11:38.050 --> 00:11:42.270
They are transitional entitlements that
are meant to try and make it easier for

00:11:42.390 --> 00:11:45.060
you to initially adopt this technology.

00:11:45.270 --> 00:11:50.760
And the way they do that is by opening
up the sandbox in very specific ways

00:11:51.290 --> 00:11:54.500
that would not otherwise be available.

00:11:54.500 --> 00:11:58.740
So specifically things like being
able to send Apple events or being

00:11:58.740 --> 00:12:00.370
able to look up Mach services.

00:12:00.460 --> 00:12:05.280
And the most obvious one,
the ability to read and write

00:12:05.280 --> 00:12:11.770
files on disk that the user has not
selected with an open or a save panel.

00:12:13.260 --> 00:12:17.590
And, you know,
some of you will find that some of your

00:12:17.660 --> 00:12:25.170
applications have core functionality
that simply cannot be made to work under

00:12:25.480 --> 00:12:28.220
the current App Sandbox model in Lion.

00:12:28.400 --> 00:12:33.390
And in those cases,
you would request temporary exception

00:12:33.390 --> 00:12:39.810
entitlements and obviously document
why you have to request each one of

00:12:40.080 --> 00:12:42.210
them with technical detail because

00:12:42.320 --> 00:12:47.360
To fulfill this obligation to have
applications in the Mac App Store in

00:12:47.360 --> 00:12:50.420
November specifying their entitlements.

00:12:52.770 --> 00:12:55.850
So those are the mechanics,
but there is a lot more to how you

00:12:55.850 --> 00:13:00.130
actually go about building applications
for App Sandbox and the kinds of

00:13:00.130 --> 00:13:02.720
things you need to keep in mind,
and I want to guide you

00:13:02.720 --> 00:13:04.660
through just a few of those.

00:13:07.230 --> 00:13:11.750
Possibly the most important
takeaway is that APIs and system

00:13:11.800 --> 00:13:16.940
facilities that you've always used,
that have always worked for you,

00:13:16.980 --> 00:13:18.740
can start failing.

00:13:18.870 --> 00:13:22.860
Because there's now a kernel
enforcement mechanism that can decide,

00:13:22.970 --> 00:13:25.200
in certain cases,
that APIs that you were completely

00:13:25.200 --> 00:13:28.540
sure are going to work are
not going to work for you.

00:13:28.650 --> 00:13:33.820
And this means that it's more important
than ever to have proper error handling.

00:13:34.590 --> 00:13:38.720
Error handling is always important,
but it’s more important now

00:13:38.940 --> 00:13:43.930
because we really want your apps
to provide a good user experience.

00:13:43.930 --> 00:13:49.400
And if you don’t degrade gracefully
when system APIs fail or where

00:13:49.520 --> 00:13:52.860
facilities are unavailable,
you might beach ball your app,

00:13:52.980 --> 00:13:56.200
you might stall the system,
you might really just give a

00:13:56.220 --> 00:13:59.580
bad experience to the user,
and we don’t want that.

00:13:59.580 --> 00:13:59.580
So,

00:14:00.000 --> 00:14:06.760
We've actually seen this in the wild,
people writing error handling as a

00:14:06.760 --> 00:14:13.440
macro that takes an operation and
simply tries it 4096 times in a loop,

00:14:13.440 --> 00:14:15.970
hoping that one of those
times it will succeed.

00:14:16.100 --> 00:14:22.220
And you can imagine how well that works,
but not just does it not work

00:14:22.340 --> 00:14:28.660
and still fails the 4097th time,
but actually until that has happened,

00:14:28.720 --> 00:14:32.560
the user is sitting there wondering why
their application is slow and why it's,

00:14:32.560 --> 00:14:35.060
you know, what's going on,
everything is gummed up.

00:14:35.250 --> 00:14:37.050
We don't want that.

00:14:37.590 --> 00:14:40.580
Check errors and degrade gracefully.

00:14:40.820 --> 00:14:44.060
If you find that there is an
error somewhere that you expected,

00:14:44.160 --> 00:14:48.160
find a way for the application
to deal with it and carry going.

00:14:48.410 --> 00:14:50.030
Don’t try and spin in loops.

00:14:50.030 --> 00:14:52.820
Don’t try and hope that
magically if you try it enough

00:14:52.820 --> 00:14:54.500
times it will work properly.

00:14:54.560 --> 00:14:57.340
And this also means that when you
are actually developing your app,

00:14:57.350 --> 00:15:00.190
when you are building it,
you should be checking the

00:15:00.190 --> 00:15:04.030
console app frequently and
seeing if Sandbox is logging any

00:15:04.030 --> 00:15:06.200
violations that your app is doing.

00:15:06.590 --> 00:15:09.970
There is no UI that will jump out
at you other than the system log to

00:15:09.970 --> 00:15:13.430
tell you that an application that
you are developing or any of its

00:15:13.570 --> 00:15:17.490
frameworks or libraries tried to
do something that Sandbox stopped.

00:15:17.500 --> 00:15:19.420
So keep console running.

00:15:19.420 --> 00:15:23.710
You can even use the search feature
to just look at Sandbox violations and

00:15:23.940 --> 00:15:28.500
basically keep on top of what’s going
on as you are building your software.

00:15:31.860 --> 00:15:36.650
So I mentioned in the last talk
introducing App Sandbox that we're giving

00:15:36.700 --> 00:15:39.600
each Sandbox application a container.

00:15:39.600 --> 00:15:43.540
And really the idea of the
container is that it's sort of a

00:15:43.650 --> 00:15:46.000
per application home directory.

00:15:46.050 --> 00:15:49.170
Because when your app is asking
what is the user's home directory,

00:15:49.170 --> 00:15:51.550
if it's Sandboxed it's going to
be getting its own container.

00:15:51.820 --> 00:15:55.200
And what this means is that
if you use normal APIs like

00:15:55.200 --> 00:15:59.830
NSUserDefaults or CFPreferences,
things that expect to basically

00:15:59.840 --> 00:16:03.040
go and read and write files from,
let's say, Tilda Library or Tilda

00:16:03.040 --> 00:16:06.850
Library application support,
all of this stuff will continue working

00:16:06.850 --> 00:16:11.000
because your application does have read
and write access to its own container.

00:16:11.000 --> 00:16:15.600
So we want that container to be
storing exactly these kinds of

00:16:15.600 --> 00:16:18.950
things that are not user documents,
they're not things that the user

00:16:18.950 --> 00:16:21.740
created and expects to be able to find,
but that are important

00:16:21.810 --> 00:16:22.750
for your application.

00:16:23.140 --> 00:16:25.170
Things like preferences,
things like caches,

00:16:25.170 --> 00:16:28.200
any databases that you might have,
even documents.

00:16:28.270 --> 00:16:32.100
Documents that are only documents
insofar as your app understands that,

00:16:32.100 --> 00:16:34.000
and they're not meant to be user visible.

00:16:34.000 --> 00:16:36.600
All of this can go in the container,
there are no restrictions there,

00:16:36.600 --> 00:16:40.660
Sandbox will let you do whatever
you want inside your own container.

00:16:40.960 --> 00:16:46.300
And to fulfill this idea that
container is the home directory,

00:16:46.340 --> 00:16:49.400
again, Apple API, but even just checking
the environment variables,

00:16:49.440 --> 00:16:53.190
things like home will point
you to the container instead

00:16:53.200 --> 00:16:55.130
of the real home directory.

00:16:55.360 --> 00:16:59.970
So it goes without saying that because
the PowerBox and those trusted open and

00:16:59.970 --> 00:17:06.060
save panels that we discussed are a key
mechanism for sandboxed applications to

00:17:06.070 --> 00:17:10.280
be able to operate on user documents,
use them.

00:17:10.470 --> 00:17:14.640
Don't try to get direct access to
files some other way because if

00:17:14.640 --> 00:17:23.650
you're running under an App Sandbox,
that will simply be denied by the kernel.

00:17:24.300 --> 00:17:27.960
Don't hardcode paths.

00:17:28.170 --> 00:17:30.260
It's always been a bad
practice on any platform,

00:17:30.260 --> 00:17:31.720
not just Mac OS.

00:17:31.820 --> 00:17:35.030
But it's really important now
because if any of you have software

00:17:35.030 --> 00:17:39.370
that hardcodes /temp as a location
for writing temporary data,

00:17:39.370 --> 00:17:41.580
it's going to fail under App Sandbox.

00:17:41.800 --> 00:17:46.760
Sandbox tabs get no access to /temp,
either for reading or for writing.

00:17:46.850 --> 00:17:51.440
But if you call Apple API asking, hey,
where is the temporary directory?

00:17:51.480 --> 00:17:54.200
The directory that we hand you back,
you will have both read

00:17:54.210 --> 00:17:55.860
and write access to.

00:17:55.900 --> 00:17:57.080
So don't hardcode paths.

00:17:57.080 --> 00:17:59.040
It's not just through for /temp.

00:17:59.050 --> 00:18:02.120
There are a number of other directories
like that that if you're hardcoding,

00:18:02.120 --> 00:18:03.960
you're going to see failures.

00:18:03.960 --> 00:18:07.200
Whereas if you're asking
Apple API to tell you where

00:18:07.200 --> 00:18:09.860
you should be putting things,
you'll get answers that will work,

00:18:09.920 --> 00:18:12.680
and all of your code
will continue to work.

00:18:13.290 --> 00:18:18.950
There is an interesting
illustrative example of this.

00:18:19.960 --> 00:18:22.160
A lot of applications
try to do a safe save,

00:18:22.580 --> 00:18:24.760
meaning that when they
go to save a document,

00:18:24.760 --> 00:18:27.660
instead of trying to overwrite
the existing document on disk,

00:18:27.690 --> 00:18:30.890
they first write out the new
version to a different file and

00:18:30.890 --> 00:18:35.480
then they move that file in place to
atomically overwrite the old file.

00:18:35.740 --> 00:18:38.310
And if you're an
NSDocument-based application,

00:18:38.780 --> 00:18:42.390
hopefully you have no code of your
own that does this because NSDocument

00:18:42.390 --> 00:18:44.580
will just do it for you incorrectly.

00:18:44.580 --> 00:18:47.740
If you do have your own code,
you should consider eliminating

00:18:47.830 --> 00:18:49.350
it in favor of NSDocument.

00:18:49.400 --> 00:18:55.920
But if you're not an NSDocument-based,
trying to do safe save by hand will fail.

00:18:56.050 --> 00:18:57.000
And here's why.

00:18:57.000 --> 00:19:00.000
When you -- let's say that the user
is trying to save a document and you

00:19:00.000 --> 00:19:06.490
pop up in a save panel and they pick
a file called grassgrowing.rtf as the

00:19:06.490 --> 00:19:10.400
name they want to save on the desktop.

00:19:10.400 --> 00:19:14.520
Well, let's say that you now want to
save save and so you want to write

00:19:14.520 --> 00:19:18.900
grassgrowing.rtf.saveinprogress.

00:19:18.900 --> 00:19:22.140
You're going to fail because the user
hasn't given you access to that file.

00:19:22.140 --> 00:19:25.770
He hasn't chosen that file through a save
panel and so you have no access to it.

00:19:25.870 --> 00:19:29.060
The kernel is simply not going
to let you go and write there.

00:19:29.060 --> 00:19:32.220
However, if you use Apple API,
in this case,

00:19:32.220 --> 00:19:37.610
there is an API called URL4Directory,
you can actually ask, "Hey, Apple,

00:19:37.670 --> 00:19:42.060
what is the URL of the directory
that's a item replacement directory

00:19:42.820 --> 00:19:47.620
appropriate for grassgrowing.rtf?"
And you'll get back an answer

00:19:47.620 --> 00:19:48.400
that you will be able to use.

00:19:48.400 --> 00:19:52.640
And you can do your save save.

00:19:56.170 --> 00:19:59.820
So we mentioned fork
and exec very briefly.

00:19:59.820 --> 00:20:03.750
Fork and exec and post-expand
continue to work under App Sandbox,

00:20:03.750 --> 00:20:10.170
but all of the Sandbox restrictions of
the launching app are fully inherited.

00:20:11.000 --> 00:20:16.440
Which means that if you're launching
tools that you don't control,

00:20:16.440 --> 00:20:19.920
you have to make sure they can
deal with the Sandbox environment.

00:20:19.920 --> 00:20:23.030
Especially if you're passing any
paths to these tools and expect

00:20:23.040 --> 00:20:26.400
them to operate on those paths,
you have to make sure that the

00:20:26.400 --> 00:20:28.190
paths point within the Sandbox.

00:20:28.260 --> 00:20:34.700
Usually that means within the container,
but it may also mean to a

00:20:34.700 --> 00:20:34.700
file that the user selected.

00:20:35.560 --> 00:20:37.790
Basically,
you have to make sure that these

00:20:37.790 --> 00:20:42.570
things will degrade gracefully
and not present a poor experience.

00:20:42.930 --> 00:20:47.180
Now, Launch Services API is
things like LS Open.

00:20:47.250 --> 00:20:50.500
When you have a document and you
want to just invoke it in whatever

00:20:50.500 --> 00:20:53.680
app is appropriate for the system,
that works.

00:20:53.920 --> 00:20:56.800
You can just call the API,
it will do the right thing,

00:20:56.830 --> 00:21:00.870
and your own sandbox restrictions
are not going to propagate to the

00:21:00.870 --> 00:21:03.100
app that Launch Services started up.

00:21:03.130 --> 00:21:06.880
So, you know,
if you were doing this like we've

00:21:06.880 --> 00:21:10.700
been saying is the right thing to do,
calling Launch Services,

00:21:10.700 --> 00:21:13.900
it will continue to work,
it will be great, and you'll basically

00:21:13.900 --> 00:21:15.500
probably run into no issues.

00:21:15.650 --> 00:21:18.690
Apple Events are kind
of an interesting point.

00:21:19.630 --> 00:21:22.870
App Sandbox doesn't prevent you
from receiving Apple events,

00:21:22.900 --> 00:21:26.830
which means if you're trying to
make your own apps cryptable,

00:21:26.980 --> 00:21:28.030
You can continue doing that.

00:21:28.110 --> 00:21:29.490
You can have a scripting dictionary.

00:21:29.640 --> 00:21:31.190
People can make use of that.

00:21:31.380 --> 00:21:37.200
However, App Sandbox does not let
you send any Apple events.

00:21:37.830 --> 00:21:39.840
And you can imagine why that is.

00:21:40.070 --> 00:21:43.380
Apple Events are meant as a mechanism
of controlling other applications

00:21:43.420 --> 00:21:44.840
and telling them to do things.

00:21:44.960 --> 00:21:49.010
And so if your application is
trying to be contained but has

00:21:49.140 --> 00:21:53.700
the ability to go tell Finder,
for instance, to do whatever,

00:21:53.730 --> 00:21:55.530
then there's not a lot
of containment there.

00:21:55.740 --> 00:21:57.450
So there's no ability
to send Apple Events.

00:21:57.610 --> 00:22:01.830
However, for most applications,
there is alternative API that does

00:22:01.940 --> 00:22:06.050
exactly what they're trying to do
and doesn't require Apple Events.

00:22:06.290 --> 00:22:11.110
One of the most common uses that
we've seen for Apple Events is

00:22:11.370 --> 00:22:15.260
popping open a Finder window,
just a reveal in Finder, essentially.

00:22:15.410 --> 00:22:18.810
And you can't do that with an
Apple Event under App Sandbox,

00:22:18.830 --> 00:22:22.620
but if you call NSWorkspace API,
the Open File API,

00:22:22.700 --> 00:22:24.500
the exact same end effect is achieved.

00:22:24.750 --> 00:22:26.460
It's visually indistinguishable.

00:22:26.620 --> 00:22:27.450
It's exactly that.

00:22:27.540 --> 00:22:31.750
It's revealing a file in Finder,
and it works under App Sandbox

00:22:31.750 --> 00:22:33.470
with no Apple Events.

00:22:33.970 --> 00:22:36.890
Now, in some cases,
there are applications whose

00:22:36.990 --> 00:22:42.210
core functionality actually
depends on full Apple event use.

00:22:42.260 --> 00:22:45.670
If you imagine an application
that's like a remote control for

00:22:45.670 --> 00:22:49.760
iTunes and is using Apple events
as its way of controlling iTunes,

00:22:49.760 --> 00:22:53.800
then there's really no, you know,
alternative API replacement,

00:22:53.840 --> 00:22:55.640
and at that point,
you'll need to request a

00:22:55.690 --> 00:22:58.300
temporary exception entitlement
to a particular target.

00:22:58.320 --> 00:23:02.080
So you can request a temporary
exception entitlement to iTunes.

00:23:02.110 --> 00:23:06.230
Apple event sending to iTunes,
and then basically your app

00:23:06.300 --> 00:23:09.430
will be allowed to do just that,
but not send events

00:23:09.480 --> 00:23:10.580
to other applications.

00:23:13.600 --> 00:23:17.060
Spotlight also bears quick mention.

00:23:17.060 --> 00:23:21.940
When you invoke Spotlight
APIs from inside your app,

00:23:22.050 --> 00:23:25.430
the searches are constrained
to your container.

00:23:25.920 --> 00:23:29.330
And the reason that is, think about it,
is because if Spotlight

00:23:29.330 --> 00:23:35.300
returned documents that were
anywhere in any of its indices,

00:23:35.340 --> 00:23:39.100
Even if it gave you URLs or
file names or paths,

00:23:39.190 --> 00:23:41.870
your application wouldn't be able to
open them because it's sandboxed and

00:23:41.870 --> 00:23:45.730
the kernel wouldn't let it because the
user hasn't selected any of those files.

00:23:46.010 --> 00:23:52.150
So in order to not give you a
non-functional API and also one that

00:23:52.150 --> 00:23:56.540
would leak things like the names
of documents that the user has,

00:23:56.550 --> 00:23:59.300
it's simply the case that if you're
trying to do spotlight searches

00:23:59.300 --> 00:24:04.700
from within your sandboxed app,
you'll only get results in the container.

00:24:04.730 --> 00:24:07.890
This is still tremendously
useful to a lot of applications,

00:24:07.890 --> 00:24:11.320
anything like mail clients or other
apps that have their data stores

00:24:11.320 --> 00:24:14.710
that are not user documents in
the container and want to be able

00:24:14.710 --> 00:24:16.700
to search through them quickly.

00:24:16.740 --> 00:24:18.940
That works great.

00:24:19.180 --> 00:24:22.800
But the one important takeaway
here is that documents,

00:24:22.900 --> 00:24:26.690
user documents that your app writes,
that the user selects

00:24:26.720 --> 00:24:28.770
through a save panel,
are still searchable

00:24:28.900 --> 00:24:30.530
to that user through,
you know,

00:24:30.540 --> 00:24:35.330
the Spotlight menu or through any
of the normal facilities that users

00:24:35.340 --> 00:24:37.490
use when trying to search for files.

00:24:37.500 --> 00:24:41.400
So even though your app can't search
for things outside of the container,

00:24:41.580 --> 00:24:46.330
documents produced by your app
are still searchable and findable

00:24:46.430 --> 00:24:48.920
by Spotlight and by the user.

00:24:49.990 --> 00:24:54.660
So I want to talk about privilege
separation because it's a key

00:24:54.660 --> 00:24:59.820
element of the overall security
picture that we're trying to get to.

00:24:59.880 --> 00:25:07.140
And I think we've been mentioning
this for a number of years at WWDC,

00:25:07.260 --> 00:25:11.760
but the facilities and tools that we
have available for privilege separation

00:25:12.220 --> 00:25:15.810
now are just better than ever.

00:25:16.190 --> 00:25:22.480
And I thought because I like looking
back into history and trying to

00:25:22.500 --> 00:25:25.250
understand where things came from,
I thought I'd tell you

00:25:25.250 --> 00:25:26.590
just a brief anecdote.

00:25:26.650 --> 00:25:32.290
I promise this will be my only
history lesson in this talk about...

00:25:32.480 --> 00:25:35.540
When the industry,
when some of the people involved

00:25:35.540 --> 00:25:38.240
in computing realized the
need for privilege separation.

00:25:38.320 --> 00:25:41.760
So this is a story from the 60s and 70s.

00:25:41.810 --> 00:25:45.300
There was a company called Timeshare,
very popular.

00:25:45.300 --> 00:25:49.290
They made these giant mainframes.

00:25:49.290 --> 00:25:49.290
And...

00:25:49.450 --> 00:25:54.150
One of the very popular things that
a timeshare mainframe could do for

00:25:54.150 --> 00:25:58.150
you is actually you could have a
compiler and you could submit jobs to

00:25:58.150 --> 00:26:04.010
the compiler and you would be billed
for the compile jobs that you did.

00:26:04.120 --> 00:26:07.890
And the way this was structured
is that there were two

00:26:07.890 --> 00:26:10.220
special files on the system.

00:26:10.220 --> 00:26:13.900
One was called stat for statistics,
another was called bill for billing.

00:26:14.060 --> 00:26:17.470
And they were only
writable by the compiler,

00:26:17.470 --> 00:26:19.970
not by any user of the system.

00:26:20.470 --> 00:26:24.430
But the compiler, when you invoked it,
actually also accepted another

00:26:24.440 --> 00:26:27.920
command line parameter that was
an optional file name where it

00:26:27.930 --> 00:26:29.600
should write the debug output.

00:26:29.610 --> 00:26:32.840
So if there are failures
during compilation,

00:26:32.840 --> 00:26:34.460
it can write them to that file.

00:26:34.510 --> 00:26:38.820
And of course, very quickly,
someone realized that if you

00:26:38.820 --> 00:26:42.750
provide bill as the name of
the debug output file name,

00:26:42.830 --> 00:26:46.560
the compiler would overwrite all
of its billing and you wouldn't

00:26:46.640 --> 00:26:48.680
get charged for your compile jobs.

00:26:50.200 --> 00:26:55.000
And, you know,
this was in the 60s and 70s,

00:26:55.000 --> 00:27:01.600
and people were sort of their
minds boggled at how a system that

00:27:01.680 --> 00:27:08.320
seemed structurally to be perfectly
sound sort of crumbled under,

00:27:08.360 --> 00:27:10.900
you know,
interaction with a real user that

00:27:10.910 --> 00:27:15.140
is willing to take different parts
of a program that have different

00:27:15.470 --> 00:27:20.080
amounts of privilege and basically
put them in clash with one another.

00:27:20.270 --> 00:27:24.750
We have the need to be able to
separate out privilege today because,

00:27:24.870 --> 00:27:27.480
once again,
there is no way to assign different

00:27:27.480 --> 00:27:31.140
amounts of privilege to different
parts of the same process.

00:27:31.210 --> 00:27:33.210
We can't say, "Well,
this part of my process

00:27:33.220 --> 00:27:35.880
only needs network access,
but it should never be able

00:27:35.880 --> 00:27:38.550
to see a user document,
and this other part of my process only

00:27:38.550 --> 00:27:41.160
needs to be able to see user documents,
but if it's compromised,

00:27:41.160 --> 00:27:45.130
it should never be able to send them on
the network." We can't do that within

00:27:45.130 --> 00:27:48.290
the boundary of a single process.

00:27:48.570 --> 00:27:52.840
So the game becomes making it really,
really easy to take different parts

00:27:52.960 --> 00:27:56.980
of an app's functionality and break
them out into different processes.

00:27:57.020 --> 00:28:02.550
And some of the guidelines
here are to try and in fact do,

00:28:02.550 --> 00:28:06.090
when you're trying to choose basically
where to make those incisions,

00:28:06.200 --> 00:28:12.100
where to do the breaks
and extract functionality,

00:28:12.150 --> 00:28:15.350
some basic guidelines to keep in
mind is try and separate things

00:28:15.450 --> 00:28:18.900
that talk to the network from things
that don't talk to the network.

00:28:18.960 --> 00:28:22.630
And try as much as you can to
isolate anything that has access

00:28:22.630 --> 00:28:29.430
to the user's personal information,
private data, anything that's sensitive

00:28:29.430 --> 00:28:31.370
or irreplaceable.

00:28:32.300 --> 00:28:37.850
And one point that’s more subtle about
this and that I can’t do justice in a

00:28:37.850 --> 00:28:43.130
presentation but I’ll be happy to talk
to you about in the lab tomorrow is

00:28:43.140 --> 00:28:47.670
that when you’re doing the separation,
it’s not enough just to take code

00:28:47.830 --> 00:28:51.200
that you already have and put it
in a separate process and say,

00:28:51.240 --> 00:28:56.900
"I’m done." You have to make sure that
the code that you just separated out

00:28:58.070 --> 00:29:02.810
Won't just blindly obey any
command that's sent to it,

00:29:02.810 --> 00:29:04.910
because if you do that,

00:29:05.560 --> 00:29:10.730
You've invalidated the security advantage
of actually having the code moved out.

00:29:10.850 --> 00:29:14.260
So you can imagine that if a

00:29:14.600 --> 00:29:34.700
[Transcript missing]

00:29:34.840 --> 00:29:38.410
I want to show you this diagram because
the sample code that we have is an

00:29:38.430 --> 00:29:41.500
application called sandboxedfetch.

00:29:41.500 --> 00:29:45.490
It's just a little downloader app and,
in fact, I'll show you what that

00:29:45.490 --> 00:29:47.900
looks like in a moment.

00:29:47.900 --> 00:29:50.230
But it's an app that
if you give it a URL,

00:29:50.230 --> 00:29:54.450
it will download whatever is at
that URL and then it will compress

00:29:54.450 --> 00:29:58.710
it with gzip and put it on the
user's desktop or anywhere else

00:29:58.800 --> 00:30:00.640
that the user wants to put it.

00:30:00.640 --> 00:30:05.520
And if you--this very simple
application that doesn't do a whole

00:30:05.520 --> 00:30:09.560
lot previously would have to have
all of the user's privilege because,

00:30:09.560 --> 00:30:11.820
you know, it needs to be able to
write this file out,

00:30:11.820 --> 00:30:14.780
so it needs to be able to write anywhere
on the file system and it needs to

00:30:14.780 --> 00:30:16.720
be able to make network connections.

00:30:16.720 --> 00:30:19.560
So if this app now becomes
exploited in any way,

00:30:19.560 --> 00:30:23.450
it can read any file from the
disk and just send it over to

00:30:23.450 --> 00:30:26.100
network and it's game over.

00:30:26.100 --> 00:30:30.620
So what we did instead with
sandboxedfetch is we simply broke the--

00:30:30.620 --> 00:30:35.010
we put this up into a main application,
the sandboxedfetcher,

00:30:35.010 --> 00:30:38.290
and two XPC services,
the downloader with network

00:30:38.420 --> 00:30:42.730
access but no file system access,
and a compressor which has only

00:30:42.730 --> 00:30:46.490
access to its own container,
so no real file system

00:30:46.490 --> 00:30:48.970
access and no network access.

00:30:51.560 --> 00:30:54.310
I'm going to show you what
this looks like in a moment.

00:30:54.500 --> 00:30:57.030
Again, it's totally available to you
and I really encourage you to

00:30:57.110 --> 00:31:01.090
download this code and take a look,
not just because of the

00:31:01.130 --> 00:31:06.170
App Sandbox ramifications,
but also because it's a very, very small,

00:31:06.170 --> 00:31:12.160
easy to understand example
of XPC services in practice,

00:31:12.530 --> 00:31:16.520
especially ones that then have different
entitlements and different containers.

00:31:18.140 --> 00:31:20.790
So here's my project.

00:31:21.120 --> 00:31:22.680
Pretty small.

00:31:22.740 --> 00:31:25.600
And we're not going to
go through all the code.

00:31:26.000 --> 00:31:31.650
Really what I want to show you is
that if you select the project itself,

00:31:31.770 --> 00:31:34.700
you can see the targets
that we have available.

00:31:34.760 --> 00:31:36.710
And so here's our main application.

00:31:36.710 --> 00:31:39.190
Simply clicking the target
in the summary pane,

00:31:39.480 --> 00:31:43.370
we can see our nice graphical
way of selecting which

00:31:43.370 --> 00:31:46.110
entitlements the app should have.

00:31:46.380 --> 00:31:49.660
Enabling App Sandbox is as simple
as clicking this main one and

00:31:49.770 --> 00:31:53.430
then choosing any additional
entitlements that are necessary.

00:31:53.640 --> 00:31:58.380
And so for our main application,
we're going to allow

00:31:58.850 --> 00:32:02.100
So, we have user-selected file writing,
which means this application is

00:32:02.100 --> 00:32:05.800
allowed to pop open a save panel
and ask the user to write a file,

00:32:05.800 --> 00:32:11.080
you know,
select a file anywhere to be saved.

00:32:11.080 --> 00:32:11.080
And then our fetch service,

00:32:11.190 --> 00:32:16.740
So, the app is going to be able to make
outgoing network connections but

00:32:16.910 --> 00:32:19.450
has no real file system access.

00:32:19.460 --> 00:32:22.280
It can't ask the user
to select any files.

00:32:22.360 --> 00:32:25.200
And finally,
our zip service is an app sandbox

00:32:25.200 --> 00:32:27.930
that doesn't allow anything other
than what we discussed earlier,

00:32:27.930 --> 00:32:30.560
which is basically container access.

00:32:30.560 --> 00:32:32.740
So,
the compressor is not going to be able

00:32:32.750 --> 00:32:38.290
to peer out of its container at all,
no network access, no anything.

00:32:39.200 --> 00:32:44.250
And so with this configuration,
if I simply build and run,

00:32:44.250 --> 00:32:46.990
here is my little application.

00:32:46.990 --> 00:32:51.510
We are going to download a
beautiful image of iCloud.

00:32:53.220 --> 00:32:54.930
Here comes my save panel.

00:32:54.930 --> 00:32:57.690
Save one that's on the desktop.

00:32:57.750 --> 00:32:58.860
Save it there.

00:32:59.210 --> 00:33:00.900
And that was

00:33:01.520 --> 00:33:07.000
Now, you've seen a trivial application
that just did something.

00:33:07.000 --> 00:33:09.030
You know, a sheet came up.

00:33:09.130 --> 00:33:11.010
It was all integrated with the program.

00:33:11.180 --> 00:33:12.930
Everything was happy.

00:33:13.050 --> 00:33:18.440
No idea that under the covers this was
spinning up two different XPC services

00:33:18.710 --> 00:33:22.130
and sending around files and doing
all the stuff inside a sandbox.

00:33:22.380 --> 00:33:27.760
You saw one simple seamless
integrated experience and that was it.

00:33:29.500 --> 00:33:31.870
So once again, this is sample code.

00:33:31.930 --> 00:33:37.190
It comes with a readme file that sort
of gives you some more explanation

00:33:37.200 --> 00:33:39.100
about all of what this does.

00:33:39.100 --> 00:33:42.820
And you can see that there's
just not a lot of code.

00:33:42.930 --> 00:33:47.190
It's a couple of screenfuls of
code to do all of this stuff.

00:33:47.780 --> 00:33:53.230
And most of that is just talking to
the services as you might expect.

00:33:53.230 --> 00:33:56.530
But ultimately very easy to do
this kind of separation and to

00:33:56.530 --> 00:33:58.480
build applications in this way.

00:33:58.790 --> 00:34:01.650
So you build services,
you put them in your app bundle,

00:34:01.650 --> 00:34:07.360
we will manage all of the lifecycle,
we'll manage even if

00:34:07.750 --> 00:34:11.420
you choose to use it,
we'll even manage when the service

00:34:11.420 --> 00:34:14.700
needs to be torn down because it's
being inactive and not doing any work.

00:34:14.730 --> 00:34:19.700
No launch DP lists, no extraneous work to
get this up and running.

00:34:19.700 --> 00:34:22.580
You basically just put it in
your bundle and start sending

00:34:22.580 --> 00:34:25.900
it messages and everything else
is just about handled for you.

00:34:26.110 --> 00:34:29.080
Each service has its own entitlements,
its own container.

00:34:29.080 --> 00:34:32.510
You get to pick what that service is
supposed to be able to do and no more.

00:34:32.830 --> 00:34:36.660
And because the services don’t
share your main app's container,

00:34:36.750 --> 00:34:40.000
it really means that any information
that you plan to exchange between

00:34:40.000 --> 00:34:44.330
an app and its services has to
be explicitly sent over IPC.

00:34:44.460 --> 00:34:47.580
In other words,
it's not enough to just send a

00:34:47.670 --> 00:34:52.190
service a path name to something
that your app can access because

00:34:52.190 --> 00:34:53.450
the service can't get at it.

00:34:53.550 --> 00:34:56.310
It has its own container,
the kernel is enforcing a different

00:34:56.350 --> 00:34:57.700
set of restrictions on it.

00:34:57.830 --> 00:35:01.300
Instead, you actually have to send the
file if that's what's necessary,

00:35:01.300 --> 00:35:05.670
or any other data that's important,
you have to send that over as well.

00:35:07.180 --> 00:35:10.010
Once you have communication be explicit,
it's a lot easier,

00:35:10.220 --> 00:35:14.600
even if you just think about it,
to convince yourself about what

00:35:14.670 --> 00:35:18.100
can�� what kind of damage can
happen if a service is exploited

00:35:18.100 --> 00:35:19.640
or if the main app is exploited.

00:35:19.740 --> 00:35:24.540
It becomes a lot easier to reason
about the security ramifications

00:35:24.540 --> 00:35:28.880
once data flows have become
explicit and you've sort of very

00:35:28.880 --> 00:35:31.410
intentionally put them there.

00:35:32.940 --> 00:35:38.000
So I want to just mention
some very brief odds and ends.

00:35:38.000 --> 00:35:42.820
We have a tool called AS Kettle
that will let you do various

00:35:42.820 --> 00:35:45.520
manipulations on containers.

00:35:45.630 --> 00:35:48.780
There's a manual page for it
that you can take a look at.

00:35:48.780 --> 00:35:52.620
Here you can see I asked it where is
the container for preview and it told

00:35:52.620 --> 00:35:56.700
me it's in tilde library containers,
com.apple.preview.

00:35:56.700 --> 00:36:01.630
This is also useful because I mentioned
that containers are bound to applications

00:36:01.650 --> 00:36:04.100
code identities and not their names.

00:36:04.120 --> 00:36:09.970
And AS Kettle lets you easily manipulate
the code identity restrictions that

00:36:09.970 --> 00:36:13.310
are placed upon individual containers.

00:36:14.110 --> 00:36:18.540
And for apps that already exist,
so that have been written

00:36:18.540 --> 00:36:23.360
before App Sandbox,
we realized that those applications

00:36:23.360 --> 00:36:27.340
used to run not in a container,
so they probably have things like

00:36:27.340 --> 00:36:33.620
caches or preferences or custom
preferences or some databases

00:36:34.020 --> 00:36:37.690
strewn around maybe Tilda Library or
Tilda Library application support,

00:36:37.760 --> 00:36:40.570
basically in these places
that the App Sandbox would no

00:36:40.570 --> 00:36:42.700
longer let you directly access.

00:36:42.870 --> 00:36:45.670
So to address this,
we have a facility called

00:36:45.670 --> 00:36:48.000
Container Migration Manifests.

00:36:48.000 --> 00:36:49.820
They are very simple plists.

00:36:49.820 --> 00:36:53.290
You basically tell us using
some substitution variables

00:36:53.290 --> 00:36:56.180
that we have documented that,
you know,

00:36:56.180 --> 00:37:01.640
my caches live here until the library
application support my app/caches.

00:37:01.960 --> 00:37:06.580
And you can do that for the
locations that make sense.

00:37:06.860 --> 00:37:11.640
And then the very first time that your
app is ever run under App Sandbox,

00:37:11.640 --> 00:37:11.640
the system will simply do, you know,
a simple request to let you know that

00:37:11.640 --> 00:37:11.640
you have a location that makes sense.

00:37:11.640 --> 00:37:15.690
will simply do the migration for you.

00:37:15.820 --> 00:37:19.770
And that way,
your application doesn't have to try

00:37:19.790 --> 00:37:24.500
and somehow deal with both cases,
preferences or caches,

00:37:24.580 --> 00:37:28.060
turn around the real tilde,
which it now can't access,

00:37:28.150 --> 00:37:29.160
or in the container.

00:37:29.290 --> 00:37:29.440
No.

00:37:29.670 --> 00:37:31.960
Your app basically just expects
to find them as it always did,

00:37:31.960 --> 00:37:35.700
which is now in the container,
and the migration manifests

00:37:35.700 --> 00:37:39.800
as a way of making that true,
even if you have installed

00:37:39.900 --> 00:37:44.280
a prior version that has
those resources elsewhere.

00:37:44.360 --> 00:37:47.870
One more time,
App Sandbox is trying to be the last

00:37:47.870 --> 00:37:52.810
line of defense against exploitation
and coding errors for your application.

00:37:53.810 --> 00:37:58.180
Pick your entitlements wisely
because those entitlements really

00:37:58.180 --> 00:38:02.970
determine how good the protection
is that we can afford you.

00:38:03.160 --> 00:38:06.050
Always use Apple APIs when you're
actually interacting with the system.

00:38:06.180 --> 00:38:08.630
And usually, the higher level the
API that you can use,

00:38:08.640 --> 00:38:12.060
the better, because if you don't,
if you're hard coding paths

00:38:12.140 --> 00:38:16.380
or using inappropriate APIs,
you might find that even though

00:38:16.380 --> 00:38:19.380
the APIs work and give you
back paths-- for instance,

00:38:19.500 --> 00:38:21.090
you just have no access to them.

00:38:21.240 --> 00:38:23.520
The kernel will simply
not let you do that.

00:38:23.620 --> 00:38:27.350
So make sure you use
high level Apple APIs.

00:38:27.570 --> 00:38:33.510
And remember that starting in November,
you will have to declare all

00:38:33.510 --> 00:38:37.580
of your AppSandbox entitlements
for all of the executables that

00:38:37.580 --> 00:38:40.640
you submit to the Mac App Store.

00:38:40.690 --> 00:38:41.950
Thank you so much,
and I hope I'll see you

00:38:42.010 --> 00:38:43.800
tomorrow at the lab.