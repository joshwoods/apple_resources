WEBVTT

00:00:14.550 --> 00:00:17.380
So first some context.

00:00:17.410 --> 00:00:21.290
View controllers are a
centerpiece object of UIKit.

00:00:21.510 --> 00:00:24.640
They were introduced
in the very first SDK,

00:00:24.680 --> 00:00:28.140
and since then we've been
incrementally augmenting them,

00:00:28.170 --> 00:00:30.660
adding new features,
making them better than ever.

00:00:30.660 --> 00:00:34.070
And in iOS 5,
we're continuing that tradition,

00:00:34.070 --> 00:00:37.080
and today we're going to talk about it.

00:00:37.670 --> 00:00:40.340
So we have a few goals for this talk.

00:00:40.380 --> 00:00:44.600
We want to talk ultimately about
what view controller containers are.

00:00:44.630 --> 00:00:48.150
And when you leave this talk today,
you should intimately know the

00:00:48.150 --> 00:00:53.560
difference between a regular content
controller and a container controller.

00:00:53.580 --> 00:00:55.150
Most of you probably already do.

00:00:55.380 --> 00:00:58.150
Split view controllers,
navigation controllers versus

00:00:58.150 --> 00:01:02.170
the controllers you create
to display your own data.

00:01:03.140 --> 00:01:06.660
You're going to know how,
and more importantly,

00:01:06.660 --> 00:01:12.270
when to implement a custom
UIViewController container.

00:01:13.520 --> 00:01:17.600
My colleague Matt Gamble is going
to introduce a brand new container

00:01:17.600 --> 00:01:22.230
controller that we've introduced on iOS
5 called the UI Page View Controller.

00:01:22.350 --> 00:01:26.120
It has a really great page curl
effect that you guys are going to

00:01:26.120 --> 00:01:28.690
love to include in your applications.

00:01:29.520 --> 00:01:35.030
Finally, we're going to share some
tips and talk about new API.

00:01:37.010 --> 00:01:40.690
So before we actually
get to a quick review,

00:01:40.920 --> 00:01:41.740
I'm kind of curious.

00:01:41.840 --> 00:01:44.660
How many people in the audience,
just a quick show of hands,

00:01:44.810 --> 00:01:48.990
have not used view controllers
in their applications before?

00:01:50.460 --> 00:01:53.240
Okay,
so we got an audience full of veterans.

00:01:53.240 --> 00:01:54.380
Okay, that's good.

00:01:54.400 --> 00:01:56.500
Well,
we're still gonna go through the review.

00:01:56.500 --> 00:02:01.640
But we're gonna do it from the point of
view of trying to set the stage for what

00:02:01.640 --> 00:02:04.530
view controller containment is all about.

00:02:05.500 --> 00:02:09.740
So the first question that I'm sure
all of you know the answer to is,

00:02:09.860 --> 00:02:11.620
why do I want to use a
view controller anyway?

00:02:11.640 --> 00:02:15.210
And there's really two
quick and good answers.

00:02:15.280 --> 00:02:19.710
We developed view controllers at
Apple because we realized there

00:02:19.710 --> 00:02:23.580
was a common pattern in many of the
applications that we were developing

00:02:23.580 --> 00:02:25.010
and delivering to our customers.

00:02:25.020 --> 00:02:29.490
And we abstracted that and made
it available to our third-party

00:02:29.960 --> 00:02:35.200
developers as a UI view controller
and their related subclasses.

00:02:35.690 --> 00:02:38.290
Using view controllers,
you guys can make high-quality

00:02:38.290 --> 00:02:41.840
applications that have the look
and feel of iOS applications

00:02:41.840 --> 00:02:43.800
that we all know and love.

00:02:45.460 --> 00:02:48.990
Secondly, they're fundamentally reusable.

00:02:49.140 --> 00:02:52.730
They're designed in a way that kind
of encapsulates the data and the

00:02:52.800 --> 00:02:57.120
view and everything in one nice
bundle that you can take and reuse in

00:02:57.120 --> 00:03:00.330
different parts of your application.

00:03:00.780 --> 00:03:05.500
In short, you get to write less code,
focus on the code you really care about,

00:03:05.670 --> 00:03:07.670
and have it look great.

00:03:09.490 --> 00:03:14.000
Okay, let's talk about what
a view controller is.

00:03:14.080 --> 00:03:16.510
At the end of the day,
it's just a controller.

00:03:16.580 --> 00:03:20.510
I'm sure everyone in this audience,
or mostly everyone in this audience,

00:03:20.520 --> 00:03:24.520
is familiar with the model view
controller pattern that pervades COCA.

00:03:24.520 --> 00:03:27.950
Well,
a view controller is just a controller.

00:03:28.300 --> 00:03:31.470
Forget about the view,
it's just a controller.

00:03:32.210 --> 00:03:37.820
It mediates the data that you store
in your model objects with the views

00:03:38.260 --> 00:03:39.440
that it presents on the screen.

00:03:39.440 --> 00:03:41.710
And these views are complex.

00:03:41.850 --> 00:03:44.280
It's not a single view that
a view controller manages.

00:03:44.280 --> 00:03:47.000
It's an entire hierarchy of views.

00:03:47.000 --> 00:03:49.750
And in fact,
we have documented in the past,

00:03:49.750 --> 00:03:53.990
and we still do, I believe,
that you should consider them as managing

00:03:54.050 --> 00:03:56.390
an entire screen full of content.

00:03:56.650 --> 00:04:01.370
They're somewhat heavyweight objects that
you want to reuse over and over again.

00:04:02.100 --> 00:04:07.490
They're often packaged
with their model object.

00:04:07.490 --> 00:04:07.490
In fact,

00:04:07.950 --> 00:04:14.400
We deliver in other frameworks on iOS
a whole number of view controllers

00:04:14.880 --> 00:04:20.070
that you can present from anywhere in
your application and it just works.

00:04:20.270 --> 00:04:25.920
So, for example, the new Tweet Compose
View Controller that I believe was demoed

00:04:25.920 --> 00:04:28.910
in some of the keynote presentations.

00:04:29.910 --> 00:04:33.260
So if you know nothing else
about a view controller,

00:04:33.310 --> 00:04:36.900
one thing that you should know
is view controllers are probably

00:04:36.950 --> 00:04:39.720
the most social object in UIKit.

00:04:39.880 --> 00:04:41.380
They love to connect with each other.

00:04:41.460 --> 00:04:45.120
In fact, their rasant detra is to
connect with one another.

00:04:45.250 --> 00:04:48.520
They transition on and off
the screen between themselves.

00:04:48.600 --> 00:04:50.180
They pop, they push.

00:04:50.410 --> 00:04:51.790
That's the view.

00:04:51.850 --> 00:04:56.260
That's what the view and view
controller ultimately really means.

00:04:57.600 --> 00:05:00.620
OK, I want to talk a little bit
about the statement that they

00:05:00.620 --> 00:05:03.510
manage a screen full of content.

00:05:03.720 --> 00:05:07.630
In 3.2 and the iPad,
all of a sudden we introduced new

00:05:07.630 --> 00:05:12.100
controller objects which seemed to
contain other controller objects that

00:05:13.000 --> 00:05:16.610
contained your controller objects
that are no longer full screen.

00:05:16.610 --> 00:05:17.690
What gives?

00:05:18.280 --> 00:05:24.490
Well, the advice still holds and perhaps
a more technically accurate way of

00:05:24.490 --> 00:05:29.330
thinking about it is that your view
controllers should really anticipate

00:05:29.680 --> 00:05:32.340
being presented in different ways.

00:05:32.340 --> 00:05:36.820
And their view hierarchy should
ultimately be flexible and adjust to it.

00:05:36.870 --> 00:05:40.480
It might appear on the left side
of a split view controller or

00:05:40.540 --> 00:05:44.190
perhaps in a popover controller
or perhaps even modally.

00:05:47.520 --> 00:05:51.600
So I guess a better way of saying
it is that they should be considered

00:05:51.600 --> 00:05:57.380
as managing a self-contained unit
of content or presentation unit.

00:05:58.390 --> 00:06:00.990
Okay, rewind.

00:06:01.360 --> 00:06:05.380
There actually is one view
controller that actually really does

00:06:05.430 --> 00:06:07.960
manage a full screen of content.

00:06:08.460 --> 00:06:10.400
And that's the root view controller.

00:06:10.460 --> 00:06:12.950
Now the root view controller,
we've used the word root

00:06:12.950 --> 00:06:15.070
view controller a lot.

00:06:15.070 --> 00:06:17.720
And sometimes it can get confusing.

00:06:17.990 --> 00:06:17.990
But

00:06:18.290 --> 00:06:20.860
The root view controller I'm
talking about is the one which is

00:06:20.870 --> 00:06:24.320
a property of the window object,
and it's actually a pretty

00:06:24.380 --> 00:06:26.120
important controller object.

00:06:26.200 --> 00:06:30.860
There's been some confusion,
and some developers have actually

00:06:31.030 --> 00:06:35.000
taken other view controllers'
views and laid them over on top

00:06:35.000 --> 00:06:37.990
of the root view controller,
and not good things

00:06:37.990 --> 00:06:39.510
happen when you do that.

00:06:39.720 --> 00:06:42.850
In particular,
one of the responsibilities of the

00:06:42.850 --> 00:06:46.970
root view controller is it knows
how to forward rotation events.

00:06:47.130 --> 00:06:50.420
When the device rotates,
it's really the controller that

00:06:50.510 --> 00:06:53.390
knows what the presentation
stack is and will forward the

00:06:53.390 --> 00:06:55.430
rotation events appropriately.

00:06:56.800 --> 00:07:00.020
Okay, so how do you use these?

00:07:00.060 --> 00:07:02.530
Basically everyone knows because
nobody raised their hands.

00:07:02.690 --> 00:07:05.400
Use subclass ViewController.

00:07:07.170 --> 00:07:11.540
You in IB or otherwise programmatically
associate your view controller

00:07:11.980 --> 00:07:15.190
with a complex view hierarchy.

00:07:15.760 --> 00:07:20.700
You override select API that is
documented in ViewController.

00:07:20.760 --> 00:07:23.860
You add your application logic,
mix it all together,

00:07:23.910 --> 00:07:29.670
do the provisioning tango, sit back,
and get five stars on the App Store.

00:07:30.020 --> 00:07:35.050
Well, I want to call out a couple
of that API that you guys

00:07:35.060 --> 00:07:37.560
override for view controllers.

00:07:37.560 --> 00:07:42.760
And I'm making a point of these
specific callbacks to view controller,

00:07:42.780 --> 00:07:46.560
because these are the callbacks
that the container controllers

00:07:46.560 --> 00:07:49.500
actually manage in some sense.

00:07:49.770 --> 00:07:54.650
And that's the appearance callbacks,
viewWillAppear, didAppear, didDisappear,

00:07:54.680 --> 00:07:58.420
willDisappear,
and the rotation callbacks.

00:07:58.460 --> 00:08:03.060
So we're gonna be talking about that a
little bit more as this talk proceeds.

00:08:03.090 --> 00:08:05.190
So quick summary.

00:08:06.000 --> 00:08:08.720
View controllers are just controllers.

00:08:08.830 --> 00:08:12.780
In fact,
they manage an entire view hierarchy,

00:08:12.780 --> 00:08:13.680
not a single view.

00:08:13.680 --> 00:08:16.290
You don't necessarily need
a view controller for every

00:08:16.290 --> 00:08:17.750
view in your view hierarchy.

00:08:17.850 --> 00:08:20.170
And in fact,
it's perfectly reasonable to have

00:08:20.170 --> 00:08:24.060
other controller objects which are
subordinate to your view controller.

00:08:24.060 --> 00:08:27.440
View controllers are all about
presentation and connection

00:08:27.440 --> 00:08:29.260
with other view controllers.

00:08:30.200 --> 00:08:33.200
They're usually self-contained,
meaning they're packaged

00:08:33.200 --> 00:08:34.220
with their model object.

00:08:34.320 --> 00:08:38.090
They can be put into different
parts of your application.

00:08:39.580 --> 00:08:42.660
And they really connect with
each other and they support the

00:08:42.660 --> 00:08:47.100
common iOS application flows that
everybody knows and is familiar with.

00:08:48.810 --> 00:08:51.520
So let's talk about where we're
going to go now in this talk,

00:08:51.730 --> 00:08:52.410
all the new stuff.

00:08:52.410 --> 00:08:55.570
We're going to talk about
the view controller hierarchy

00:08:55.570 --> 00:08:57.010
versus the view hierarchy.

00:08:57.010 --> 00:08:59.250
And believe me,
it can get a little bit confusing.

00:08:59.280 --> 00:09:01.500
We often conflate the two hierarchies.

00:09:01.500 --> 00:09:04.910
There I go again.

00:09:05.030 --> 00:09:07.530
We're going to talk about three
ways that view controllers get

00:09:07.640 --> 00:09:09.500
themselves on and off the screen.

00:09:09.550 --> 00:09:12.040
And really,
it kind of sums up all the ways

00:09:12.530 --> 00:09:15.100
they get on and off the screen.

00:09:15.100 --> 00:09:19.090
We're going to design a
custom container controller.

00:09:19.190 --> 00:09:23.900
And we're going to talk about some of
the new and changed API along the way.

00:09:23.990 --> 00:09:25.940
So let's get busy.

00:09:26.350 --> 00:09:30.930
View controller containers,
a tale of two hierarchies.

00:09:31.690 --> 00:09:37.670
So it's so confusing to me when I talk
about this that I decided I was going to

00:09:37.910 --> 00:09:40.230
put a legend out there to keep me honest.

00:09:40.230 --> 00:09:44.520
So if I'm kind of mixing the terms up,
understand that blue means

00:09:44.520 --> 00:09:48.120
view or view hierarchy,
and yellow or gold means I'm talking

00:09:48.120 --> 00:09:51.510
about the controller hierarchy,
or I'm trying to make an

00:09:51.510 --> 00:09:53.540
association between the two.

00:09:53.920 --> 00:09:56.870
A blue arrow is a super
view sub view relationship,

00:09:56.960 --> 00:10:00.940
and a gray arrow is a parent-child
view controller relationship.

00:10:02.430 --> 00:10:09.900
So armed with that graphical notation,
let's deconstruct a common application's

00:10:09.900 --> 00:10:12.620
view controller/view hierarchy.

00:10:12.740 --> 00:10:14.520
What we see here is a view hierarchy.

00:10:14.680 --> 00:10:15.830
This is what you see on the screen.

00:10:15.840 --> 00:10:17.880
The view controllers are
kind of behind the scenes.

00:10:17.880 --> 00:10:21.370
They're the puppet masters
that control what's actually

00:10:21.370 --> 00:10:23.260
going on in the application.

00:10:23.420 --> 00:10:26.300
So that topmost view,
which is in the window,

00:10:26.580 --> 00:10:29.050
which happens to be the root
view controller in this case,

00:10:29.170 --> 00:10:32.440
is associated with a
split view controller.

00:10:32.990 --> 00:10:36.480
And on the left-hand side,
we have a navigation controller,

00:10:36.480 --> 00:10:39.710
which happens to be a subview
of the view that's managed

00:10:39.710 --> 00:10:40.860
by the split view controller.

00:10:40.860 --> 00:10:46.700
And it has its associated yellow box.

00:10:46.700 --> 00:10:50.110
Now, the two that I just highlighted,
those are content controllers.

00:10:50.270 --> 00:10:53.600
They happen to be contained within
the navigation controller on

00:10:53.610 --> 00:10:57.070
the one side and the split view
controller on the other side.

00:10:57.080 --> 00:11:00.080
And now you're seeing this kind
of parallel hierarchy here.

00:11:00.080 --> 00:11:03.940
Those content controllers are
typically what you guys create.

00:11:04.270 --> 00:11:07.330
And up until now,
we didn't really encourage anyone

00:11:07.330 --> 00:11:10.320
to create their own content,
I mean, container controllers.

00:11:10.340 --> 00:11:13.810
But of course, that's what we're talking
about how to do now.

00:11:13.860 --> 00:11:16.060
Now,
there's an implied controller hierarchy

00:11:16.120 --> 00:11:18.280
relationship here with these gray arrows.

00:11:18.280 --> 00:11:21.360
And you'll notice that there's
a box on the right side that

00:11:21.360 --> 00:11:24.630
really doesn't correlate to a
view at all on the left side.

00:11:25.340 --> 00:11:27.760
And that's because it's managed
by the navigation controller.

00:11:27.840 --> 00:11:34.680
That little button on the left kind of is
a proxy to get you to the view that the

00:11:34.680 --> 00:11:38.930
mailbox controller box actually manages.

00:11:39.100 --> 00:11:40.650
But it's not part of
the view hierarchies.

00:11:40.750 --> 00:11:43.460
But the view controller hierarchy,
it's there.

00:11:43.560 --> 00:11:48.940
So the view controller hierarchy both
shadows the view hierarchy that you see,

00:11:48.940 --> 00:11:53.440
but it also has some potential
view hierarchies that it's

00:11:53.440 --> 00:11:53.440
encoding that aren't there.

00:11:53.460 --> 00:11:54.300
So the view controller hierarchy both
shadows the view hierarchy that you see,

00:11:54.310 --> 00:11:55.080
but it also has some potential view
hierarchies that it's encoding that

00:11:55.080 --> 00:11:56.920
aren't yet present that might be present.

00:11:56.980 --> 00:11:59.940
Okay, let's deconstruct it the other way.

00:12:00.220 --> 00:12:04.610
So we have this controller hierarchy,
and we're going to show

00:12:04.610 --> 00:12:08.760
explicitly the contained
relationships between the views.

00:12:10.530 --> 00:12:11.990
I'm going to kind of motor through that.

00:12:11.990 --> 00:12:15.160
But you can see there's kind of--
I'm drawing the arrows to emphasize

00:12:15.240 --> 00:12:18.940
that there's a super view sub view
kind of tree relationship here.

00:12:19.050 --> 00:12:22.840
And that tree relationship is kind
of these nested views that lay out.

00:12:22.940 --> 00:12:26.480
And you'll notice that that mailbox view
is kind of orphaned off to the side.

00:12:26.500 --> 00:12:30.750
It's not in the window
hierarchy at all yet.

00:12:30.840 --> 00:12:32.350
But that's OK.

00:12:32.350 --> 00:12:34.880
It's still associated with a view,
which may or may not even

00:12:34.880 --> 00:12:34.880
have been created yet.

00:12:36.080 --> 00:12:38.660
So we'd like to think
about this abstractly,

00:12:38.660 --> 00:12:43.160
and we have this kind of almost
one-to-one relationship between

00:12:43.170 --> 00:12:45.280
the view controller hierarchy
and the view hierarchy,

00:12:45.470 --> 00:12:47.320
but not quite.

00:12:47.530 --> 00:12:50.090
And the reason I like to think
about it this way is because

00:12:50.090 --> 00:12:54.180
if I really thought about it,
all of a sudden I'd be lost in the trees.

00:12:54.260 --> 00:12:58.590
There's no forest, there's just views
everywhere and forget it.

00:12:58.710 --> 00:13:02.150
So let's go back to the more
simple way of thinking about it.

00:13:02.260 --> 00:13:06.270
So what should you know about these
two hierarchies now that we've seen how

00:13:06.270 --> 00:13:08.700
they kind of relate with one another?

00:13:09.310 --> 00:13:14.620
The first thing to kind of digest
is that the container controllers,

00:13:14.670 --> 00:13:17.700
the navigation controller,
the split view controller,

00:13:17.750 --> 00:13:21.990
they're responsible for the
child-parent relationships.

00:13:24.610 --> 00:13:30.070
And you can see this if you look at
the API that we have made that is

00:13:30.070 --> 00:13:33.840
currently published and available
for existing container controllers.

00:13:33.970 --> 00:13:37.590
So for example,
when I create a navigation controller,

00:13:37.590 --> 00:13:39.640
I call in it with a review controller.

00:13:39.740 --> 00:13:42.750
And what I've effectively done is I've
created a parent-child relationship

00:13:42.750 --> 00:13:48.060
between those controllers when
I initialized the navigation controller.

00:13:48.190 --> 00:13:51.570
Similarly, with split view controller.

00:13:52.430 --> 00:13:56.800
When I create that,
I can call set view controllers,

00:13:56.800 --> 00:14:00.780
and I've established parent-child
relationships again between the left side

00:14:00.780 --> 00:14:04.900
controller and the right side controller
and the containing split view controller.

00:14:04.990 --> 00:14:10.190
And more dynamically,
as things are running and I'm

00:14:10.190 --> 00:14:14.120
pushing and popping view controllers,
assuming that the clicker clicks,

00:14:15.210 --> 00:14:19.840
I'm also adding a child relationship,
and if I pop off the

00:14:19.840 --> 00:14:23.730
navigation controller,
I'm removing that child relationship.

00:14:25.370 --> 00:14:31.840
So somehow that API is able
to create those relationships.

00:14:31.890 --> 00:14:35.830
And that's what we need
to enable you guys to do.

00:14:35.830 --> 00:14:40.500
So what we have here is kind of a
snippet of the demo app that we're going

00:14:40.500 --> 00:14:43.200
to be showing you a little bit later.

00:14:43.200 --> 00:14:46.180
It's a relatively simple
view controller hierarchy.

00:14:46.180 --> 00:14:48.040
This view hierarchy is on the side.

00:14:48.040 --> 00:14:50.980
And we want to talk about what we
need to do to get you to be able to

00:14:50.980 --> 00:14:55.180
create API that adds child and parent.

00:14:55.210 --> 00:14:57.960
View controller relationships.

00:14:58.000 --> 00:14:59.360
So first bit of API.

00:14:59.360 --> 00:15:02.560
It's actually kind of simple and obvious.

00:15:02.560 --> 00:15:07.590
You basically call add
child view controllers,

00:15:07.710 --> 00:15:15.300
array of child controllers,
and remove from parent view controller.

00:15:15.350 --> 00:15:17.180
Really straightforward.

00:15:17.180 --> 00:15:22.820
You can access what a view controller's
children are via the child controller

00:15:22.820 --> 00:15:24.100
view controller's property.

00:15:24.100 --> 00:15:27.040
And there's some callbacks
that we make available.

00:15:27.040 --> 00:15:30.160
And I'll get a little bit,
I'm going to talk a little bit more about

00:15:30.160 --> 00:15:32.240
why those callbacks are interesting.

00:15:32.240 --> 00:15:35.340
But at the very least,
if you wanted to know when you

00:15:35.340 --> 00:15:38.360
got a parent controller and when
you lost a parent controller,

00:15:38.360 --> 00:15:39.660
you can override those.

00:15:39.690 --> 00:15:41.390
And of course,
you're going to call super, right?

00:15:42.030 --> 00:15:43.230
And

00:15:44.780 --> 00:15:45.980
get that information.

00:15:46.030 --> 00:15:48.650
Now I want to emphasize
something about the top,

00:15:48.690 --> 00:15:50.910
certainly the top two methods.

00:15:50.910 --> 00:15:55.000
These are not meant to
be called by anybody.

00:15:55.130 --> 00:15:59.420
They're really provided if you are
subclassing view controller and

00:15:59.530 --> 00:16:00.950
creating your own custom controller.

00:16:01.050 --> 00:16:02.420
And then you're going
to provide some API.

00:16:02.420 --> 00:16:05.380
Maybe it's going to be something
like a navigation controller,

00:16:05.420 --> 00:16:06.070
push or pop.

00:16:06.260 --> 00:16:09.840
And you're going to call those methods
to create that child parent relationship.

00:16:09.910 --> 00:16:15.020
I can promise you that bad things
will happen if you call that

00:16:15.020 --> 00:16:19.860
bad child view controller on a
controller that you didn't implement.

00:16:19.880 --> 00:16:21.700
Because they're not
going to be expecting it.

00:16:21.700 --> 00:16:23.070
And all of a sudden,
they're going to have children

00:16:23.070 --> 00:16:25.420
that they didn't know they had.

00:16:25.420 --> 00:16:29.880
So that can't be good.

00:16:29.880 --> 00:16:33.840
Okay, what else should you know?

00:16:35.220 --> 00:16:38.220
There's actually consistent and
inconsistent view hierarchies.

00:16:38.270 --> 00:16:44.180
And I have dealt firsthand with many
of the inconsistent view hierarchies

00:16:44.180 --> 00:16:46.920
that come in reported as bugs.

00:16:46.990 --> 00:16:50.460
So let's talk about what an
inconsistent view hierarchy is.

00:16:50.770 --> 00:16:53.460
Basically what this picture is showing
is it's showing window hierarchy.

00:16:53.460 --> 00:16:57.170
There's one root view
controller that kind of is

00:16:57.610 --> 00:16:58.760
kind of owning the show there.

00:16:58.760 --> 00:17:01.110
And off to the side,
we have this kind of disconnected

00:17:01.180 --> 00:17:04.000
view controller hierarchy
with its associated views.

00:17:04.000 --> 00:17:07.760
Maybe it's a nav controller that
got presented and dismissed,

00:17:07.760 --> 00:17:09.800
and we're holding a pointer to it.

00:17:09.900 --> 00:17:11.380
And then we say, you know what?

00:17:11.400 --> 00:17:14.490
I really want to grab the child,
the top view controller

00:17:14.490 --> 00:17:17.130
of that nav controller,
and I want to put it into

00:17:17.140 --> 00:17:18.800
my root view controller.

00:17:18.990 --> 00:17:23.160
So I'm going to reach inside,
grab its view, say add sub view,

00:17:23.240 --> 00:17:25.120
and it's good, right?

00:17:25.120 --> 00:17:26.250
No problem.

00:17:26.260 --> 00:17:28.290
Well, there's a little bit of a problem.

00:17:28.390 --> 00:17:33.080
If you kind of look at what we have here,
we have a child view controller that says

00:17:33.140 --> 00:17:35.800
its parent is whatever it says there.

00:17:35.800 --> 00:17:37.870
I can't read it down there.

00:17:37.870 --> 00:17:42.190
And if you look at the right side,
its corresponding view hierarchy,

00:17:42.190 --> 00:17:46.050
and you walk up its ancestor views,
you see that there is no such

00:17:46.050 --> 00:17:48.470
parent associated with any view.

00:17:48.470 --> 00:17:51.230
Well, we don't like that.

00:17:51.370 --> 00:17:54.220
And that's an inconsistent hierarchy.

00:17:54.320 --> 00:17:58.740
And if you guys are doing
that in your applications,

00:17:58.740 --> 00:18:03.210
if you see this exception,
that's exactly what it means.

00:18:03.210 --> 00:18:08.290
It means that a view
from a view controller,

00:18:08.290 --> 00:18:11.090
let me rephrase that.

00:18:11.180 --> 00:18:15.390
The view associated with a view
controller got pulled out and added

00:18:15.390 --> 00:18:18.960
directly into the view hierarchy,
and it's pointing to view

00:18:18.960 --> 00:18:21.730
controllers that aren't in
that Windows view hierarchy.

00:18:21.800 --> 00:18:23.910
So why is that a bad thing?

00:18:23.910 --> 00:18:26.480
You know, maybe we should just allow
that and live with it.

00:18:26.600 --> 00:18:31.090
Well, it's bad because we rely on those
parent-child controller relationships

00:18:31.090 --> 00:18:34.700
to forward those callback methods
that I was speaking about.

00:18:35.060 --> 00:18:38.970
In this case, that child kind of may
or may not get callbacks,

00:18:38.970 --> 00:18:42.430
which may or may not be a bad thing,
and maybe your application

00:18:42.430 --> 00:18:44.720
doesn't care about,
but it also can lead to other

00:18:44.720 --> 00:18:46.350
kinds of inconsistencies.

00:18:46.360 --> 00:18:49.110
If we end up now pointing to the
same view controller from two

00:18:49.110 --> 00:18:52.050
different controller hierarchies,
and now we want to present

00:18:52.050 --> 00:18:54.660
one on top of the other,
we just didn't want to deal

00:18:54.660 --> 00:18:59.000
with all of that mess and said,
okay, this is an inconsistent state.

00:19:02.060 --> 00:19:05.300
Okay, there's one other really
important thing to understand

00:19:05.300 --> 00:19:08.230
about the controller hierarchies.

00:19:08.230 --> 00:19:10.750
And that is, you should,
if you're implementing a

00:19:10.760 --> 00:19:13.890
custom container controller,
you really want to know when the

00:19:13.890 --> 00:19:17.000
appearance callbacks are actually made.

00:19:17.330 --> 00:19:22.990
And there's oftentimes a
lot of confusion about that.

00:19:23.220 --> 00:19:26.100
So let's kind of walk
through it a little bit.

00:19:26.320 --> 00:19:28.970
I'm going to create some new
API on my custom container.

00:19:28.970 --> 00:19:31.010
I call it Flip to Note.

00:19:31.190 --> 00:19:35.220
And basically,
Flip to Note does just that.

00:19:35.250 --> 00:19:39.770
It adds a new note controller on top of
this container or content controller,

00:19:39.770 --> 00:19:42.990
which happens to be a recipe
because that's the app that

00:19:42.990 --> 00:19:47.110
we're going to be extending,
swaps the views out, and all is good.

00:19:47.230 --> 00:19:53.060
So the question is, is when in this whole
exchange did viewWillAppear,

00:19:53.060 --> 00:19:57.620
viewDidAppear, viewWillDisappear,
viewDidDisappear get called?

00:19:57.680 --> 00:20:02.390
And what are the guarantees
that we're making about that?

00:20:03.370 --> 00:20:06.940
Okay, first let's get a peek at what
that code might look like.

00:20:07.020 --> 00:20:09.210
It's actually relatively simple
and we're going to talk about

00:20:09.210 --> 00:20:11.810
some of the new API that's there,
but some of the API we've

00:20:11.810 --> 00:20:14.620
already spoken about,
so spoken to.

00:20:14.630 --> 00:20:15.900
Add child view controller.

00:20:15.900 --> 00:20:16.770
Well, guess what?

00:20:16.830 --> 00:20:19.290
View will appear, view did appear,
has nothing to do with

00:20:19.290 --> 00:20:20.670
add child view controller.

00:20:20.740 --> 00:20:23.640
All that add child view
controller does is it says,

00:20:23.640 --> 00:20:27.010
this view controller is a child
of that one and it has nothing

00:20:27.010 --> 00:20:28.740
to do with view appearance.

00:20:30.220 --> 00:20:34.120
That new call in there that I'm going
to talk about in a bit actually kind of

00:20:34.190 --> 00:20:37.850
hides when all of the view will appear,
view did appears happen.

00:20:37.900 --> 00:20:38.890
But

00:20:40.240 --> 00:20:44.830
The main point I want you to understand
is that when they get called is

00:20:44.890 --> 00:20:50.240
associated with when views move
in and out of the window hierarchy.

00:20:50.540 --> 00:20:54.540
That doesn't necessarily
mean that you see it.

00:20:54.590 --> 00:20:57.900
So there's immediately there's
some cause for confusion there.

00:20:57.960 --> 00:21:01.180
You could actually add a
view underneath another view,

00:21:01.200 --> 00:21:03.940
you never see it and you'll get
called with viewWillAppear and

00:21:03.940 --> 00:21:07.360
viewDidAppear and you'll say what gives,
I don't see anything.

00:21:07.390 --> 00:21:08.260
Well now you know.

00:21:08.260 --> 00:21:10.900
I mean what it really means is
is that the view has made it

00:21:11.030 --> 00:21:15.260
into the Windows view hierarchy.

00:21:15.870 --> 00:21:20.540
What are we going to say about
guarantees about all of this?

00:21:20.570 --> 00:21:23.590
Well, viewWillAppear, as I said,
it's called before the view is added

00:21:23.590 --> 00:21:26.360
into the Windows view hierarchy.

00:21:26.380 --> 00:21:30.550
And it's also called before
we lay out the subviews of

00:21:30.550 --> 00:21:32.780
that view controller's view.

00:21:32.890 --> 00:21:36.110
We never really specified this before,
but this is something we

00:21:36.110 --> 00:21:36.980
want to guarantee now.

00:21:37.140 --> 00:21:40.430
It kind of doesn't make sense
to say view will appear and have

00:21:40.430 --> 00:21:43.800
view will layout subviews kind of
happening before view will appear.

00:21:43.800 --> 00:21:46.500
Same

00:21:49.220 --> 00:21:50.890
review did appear.

00:21:50.960 --> 00:21:54.200
It's called after the views
added to the window hierarchy.

00:21:54.250 --> 00:21:55.000
When after?

00:21:55.150 --> 00:21:58.940
Well, we're going to be a little
bit kind of imprecise on that.

00:21:58.980 --> 00:22:00.820
It might happen after
an animation completes.

00:22:00.860 --> 00:22:03.420
It might happen not after
an animation completes.

00:22:03.440 --> 00:22:08.320
And actually, for custom containers,
that semantic is left up to you.

00:22:08.630 --> 00:22:12.350
However, it is going to get called
after layout subviews.

00:22:12.450 --> 00:22:15.380
So you got to make sure that that
view controller's view has been laid

00:22:15.380 --> 00:22:17.120
out before viewed it appears call.

00:22:19.370 --> 00:22:21.940
and view will disappear
and view did disappear.

00:22:21.990 --> 00:22:23.660
Basically,
they're called before the view is removed

00:22:23.730 --> 00:22:27.300
from window hierarchy and after the view
is removed from the window hierarchy.

00:22:27.390 --> 00:22:31.700
You'll all be happy to know that
if you kind of do the logic there,

00:22:31.760 --> 00:22:35.300
view will appear,
will be called before view did appear.

00:22:35.610 --> 00:22:37.020
All right.

00:22:39.090 --> 00:22:41.610
One thing I want to talk a
little bit about here is that

00:22:41.800 --> 00:22:46.720
addChildViewController is going to
call willMoveToParentViewController

00:22:46.720 --> 00:22:47.980
with self for you.

00:22:48.160 --> 00:22:52.020
We already know that's going to happen
because you've made the indication

00:22:52.020 --> 00:22:53.800
that you're adding that child.

00:22:53.860 --> 00:22:57.260
On the other hand,
after this whole transition occurs,

00:22:57.260 --> 00:23:00.950
in the completion handler to this method,
which we're going to talk about,

00:23:01.080 --> 00:23:04.700
we make the explicit call to
didMoveToParentViewController to say,

00:23:04.700 --> 00:23:05.740
hey, we're done.

00:23:05.740 --> 00:23:07.410
You've moved in now.

00:23:07.420 --> 00:23:08.500
All is good.

00:23:12.720 --> 00:23:16.120
So let's look at that method.

00:23:16.200 --> 00:23:19.650
That method is actually
kind of a helper method.

00:23:19.740 --> 00:23:22.270
There isn't a lot new there.

00:23:22.520 --> 00:23:28.540
If you guys are familiar with
the UIViewAnimationBlock API,

00:23:28.620 --> 00:23:32.010
that looks a lot like that API.

00:23:32.340 --> 00:23:36.710
The difference is that there's a from
view controller and a to view controller,

00:23:36.720 --> 00:23:41.970
which are two sibling children that
share a common parent view controller.

00:23:43.210 --> 00:23:46.680
We've also added a couple of
courtesy API calls for you.

00:23:46.970 --> 00:23:49.500
Controllers will now get a
view will layout subviews and

00:23:49.500 --> 00:23:51.620
a view did layout subviews.

00:23:51.630 --> 00:23:55.910
Oftentimes container controllers
really know where their children's

00:23:56.010 --> 00:23:57.670
frames are and so forth.

00:23:57.920 --> 00:24:02.220
So you can now just set the frame
of your child controllers directly

00:24:02.220 --> 00:24:06.700
in your parent controller before
layout subviews is actually called.

00:24:07.160 --> 00:24:09.730
That kind of prevents-- yeah,
that's a good thing.

00:24:09.770 --> 00:24:13.420
We've gotten a lot of requests for that,
and we heard you.

00:24:13.440 --> 00:24:16.630
OK, how do view controllers
get on and off the screen?

00:24:18.390 --> 00:24:20.020
Well,
we talked about container controllers.

00:24:20.020 --> 00:24:23.200
That's kind of what container
controllers are all about.

00:24:23.210 --> 00:24:26.600
By presentation and dismissal,
there's kind of, you guys are familiar

00:24:26.600 --> 00:24:29.280
with it as present modal,
dismiss modal.

00:24:29.280 --> 00:24:31.250
And by direct view manipulation,
and we talked about

00:24:31.330 --> 00:24:32.120
that a little bit too.

00:24:32.120 --> 00:24:34.690
And in fact,
container controllers basically

00:24:34.700 --> 00:24:39.220
are stylized wrappers around
direct view manipulation.

00:24:39.890 --> 00:24:44.920
Okay, so split view controller,
nav controller on the left side, push,

00:24:45.060 --> 00:24:45.680
pop.

00:24:45.720 --> 00:24:48.170
That's how view controllers,
container controllers

00:24:48.640 --> 00:24:50.000
connect one with the other.

00:24:50.050 --> 00:24:54.140
So before iOS 5,
we had present modal view controller,

00:24:54.140 --> 00:24:56.260
dismiss modal view controller.

00:24:56.310 --> 00:24:59.440
We're renaming that,

00:25:00.140 --> 00:25:03.230
on iOS 5, we're calling it
Present View Controller Animated

00:25:03.500 --> 00:25:04.280
Completion.

00:25:04.280 --> 00:25:10.080
And hey, there's a completion handler on
Present and Dismiss View Controller.

00:25:10.610 --> 00:25:14.900
Which will be called after view
did appear and all of that.

00:25:14.900 --> 00:25:18.790
I think it's specified
in the documentation,

00:25:18.790 --> 00:25:18.790
if it isn't.

00:25:18.900 --> 00:25:24.170
Email me and I'll tell you what it is.

00:25:24.880 --> 00:25:25.590
We changed the name.

00:25:25.600 --> 00:25:29.120
We got rid of the modal
because with current context

00:25:29.210 --> 00:25:31.450
presentations on the iPad,
it's not always modal.

00:25:31.530 --> 00:25:35.260
Sometimes it's just I presented
this out-of-band view controller

00:25:35.300 --> 00:25:37.790
and I can still interact with
other parts of the screen.

00:25:37.940 --> 00:25:41.240
There's still a modal
presentation style property,

00:25:41.320 --> 00:25:43.740
but that API has changed a bit.

00:25:45.800 --> 00:25:49.090
So let's deconstruct it and look at
what present and dismiss actually do.

00:25:49.210 --> 00:25:52.900
So this is the familiar deconstruction
that I'm going to kind of fly through,

00:25:52.960 --> 00:25:57.220
because I think my time
is getting short here.

00:25:57.270 --> 00:26:00.180
We set up the parent view
controller relationships.

00:26:00.480 --> 00:26:06.320
What I'm really trying to get to is
the call to present view controller,

00:26:06.340 --> 00:26:09.380
which will be here any moment now.

00:26:09.660 --> 00:26:10.860
Ah, there we go.

00:26:10.920 --> 00:26:13.460
So we're going to call
present view controller,

00:26:13.460 --> 00:26:18.560
and we're going to call it on the
bottom most leaf child controller there.

00:26:18.620 --> 00:26:23.340
So any guesses what the presenting
view controller is there?

00:26:23.350 --> 00:26:26.400
If you said the table view controller,
you're wrong.

00:26:26.540 --> 00:26:28.660
And it's not the nav controller either.

00:26:28.670 --> 00:26:32.780
It actually walks all the way
up to the root view controller.

00:26:32.780 --> 00:26:37.200
And that compose sheet is being
presented by that root view controller.

00:26:37.360 --> 00:26:40.120
Now, there are ways to control this.

00:26:40.120 --> 00:26:41.740
When you do current
context presentations,

00:26:41.740 --> 00:26:44.080
we're going to talk about some of those.

00:26:44.130 --> 00:26:46.610
Okay, the other way to get view
controllers on and off screen,

00:26:46.750 --> 00:26:48.380
direct view manipulation.

00:26:48.380 --> 00:26:56.100
So one of the things we showed in
previous SDKs was window add subview,

00:26:56.100 --> 00:26:59.960
root view controller view,
and bad things happened with that.

00:26:59.960 --> 00:27:04.480
We changed that to root
view controller property,

00:27:04.480 --> 00:27:05.410
but we set the stage.

00:27:05.500 --> 00:27:08.890
We said, yeah,
views of view controllers are good

00:27:09.020 --> 00:27:11.610
for just grabbing and inserting
into the window hierarchy.

00:27:13.250 --> 00:27:17.840
So we moved to that way,
and now some of you guys may have

00:27:17.840 --> 00:27:19.340
code that does something like this.

00:27:19.410 --> 00:27:20.180
I got a view controller.

00:27:20.180 --> 00:27:20.880
I take its view.

00:27:20.880 --> 00:27:24.350
I do the add subview thing, and...

00:27:24.710 --> 00:27:25.970
I get that.

00:27:26.450 --> 00:27:29.680
And this is actually is not
an inconsistent hierarchy

00:27:29.700 --> 00:27:31.040
because there's no parent.

00:27:31.100 --> 00:27:34.230
But what I've ended up doing here
is I have kind of two root view

00:27:34.230 --> 00:27:37.330
controllers now kind of going off.

00:27:37.850 --> 00:27:40.970
And it's not the best way to do this.

00:27:41.490 --> 00:27:49.370
Better is to add the child view
controller relationship directly and

00:27:49.370 --> 00:27:50.640
have the parent view controller manage

00:27:50.920 --> 00:27:52.680
The direct insertion into the subview.

00:27:52.710 --> 00:27:56.140
Because a parent view controller really
knows where the children should go.

00:27:56.140 --> 00:27:59.600
Again, it's a case of the children
don't choose their parents.

00:27:59.640 --> 00:28:02.950
The parents kind of should
call the shots here.

00:28:04.140 --> 00:28:05.800
Okay.

00:28:05.840 --> 00:28:10.460
When do I want to create a
custom view controller container?

00:28:10.520 --> 00:28:14.100
Well, the real answer is you
probably don't want to.

00:28:14.190 --> 00:28:16.510
Or at least you should think
twice about it before you do.

00:28:16.520 --> 00:28:19.800
We provide a lot of container controllers
and we're constantly making them

00:28:19.800 --> 00:28:21.350
better and we want to make them better.

00:28:21.410 --> 00:28:24.370
We want to hear from you
guys how to make them better.

00:28:24.370 --> 00:28:26.260
But sometimes there are good reasons.

00:28:26.450 --> 00:28:29.800
Sometimes, you know,
the look of our container controller

00:28:30.030 --> 00:28:34.060
isn't quite the look that you're
trying to get over to your own users.

00:28:34.100 --> 00:28:37.080
Or maybe you want a
custom application flow.

00:28:37.130 --> 00:28:40.240
You just want things to move
a little bit differently than

00:28:40.340 --> 00:28:42.100
what you get out of the box.

00:28:42.100 --> 00:28:45.480
And finally,
if your application actually is doing

00:28:45.480 --> 00:28:50.320
this direct view manipulation dance,
you probably want to consider maybe

00:28:50.320 --> 00:28:56.060
inserting a container controller in there
somewhere and encapsulating it that way.

00:28:56.660 --> 00:29:02.240
So this is kind of a oblique
plug for some new API.

00:29:02.240 --> 00:29:05.680
But we have split view
controllers on the iPad.

00:29:05.680 --> 00:29:10.720
And one of the biggest requests
we've gotten over time has been,

00:29:10.720 --> 00:29:14.360
I want my left side view
controller to appear in portrait.

00:29:14.360 --> 00:29:16.080
I don't want the little pop-up button.

00:29:16.110 --> 00:29:19.380
And you might think, hey,
that's a good example of when I'm going

00:29:19.380 --> 00:29:22.510
to create a custom container controller,
because damn it,

00:29:22.510 --> 00:29:25.270
they don't provide that capability.

00:29:25.420 --> 00:29:29.900
Well, that might be a good argument,
except in iOS 5, you can now do that on

00:29:29.900 --> 00:29:30.790
split view controller.

00:29:30.800 --> 00:29:35.580
So that's kind of an example of why...
Think twice before you create your

00:29:35.680 --> 00:29:39.630
custom containers and definitely give us
feedback on the controllers that we have.

00:29:39.700 --> 00:29:44.760
Okay, I think Chris Parker in a previous
talk talked a little bit about that.

00:29:44.820 --> 00:29:49.800
So let's talk about designing a
new app flow in a custom container.

00:29:49.800 --> 00:29:54.380
So Matt and I, a few weeks ago,
we were...

00:29:54.760 --> 00:30:00.040
I'm trying to figure out
what we should demo at WWDC.

00:30:00.040 --> 00:30:05.550
And we decided that what we wanted to do
was show-- was rev the old recipes demo,

00:30:05.620 --> 00:30:13.060
but kind of make it an iPad app and
highlight a new application flow.

00:30:13.590 --> 00:30:17.960
What we see here is we see a
custom bar that's owned by the

00:30:17.960 --> 00:30:20.840
topmost container view controller.

00:30:20.920 --> 00:30:23.040
And I can select things on that bar.

00:30:23.040 --> 00:30:24.340
I can bring out a browser.

00:30:24.340 --> 00:30:27.040
And then I can navigate
between different recipes.

00:30:27.110 --> 00:30:29.430
And in this case,
my part of the demo is just

00:30:29.430 --> 00:30:31.000
these are just pictures.

00:30:31.210 --> 00:30:34.280
And I can move these things in and out.

00:30:35.110 --> 00:30:37.180
In this case,
I don't keep a stack of them.

00:30:37.180 --> 00:30:39.680
It's just the current one
is the one that's presented.

00:30:39.680 --> 00:30:43.470
There's some other things
that this demo does and we're

00:30:43.470 --> 00:30:45.680
gonna go through it right now.

00:30:45.840 --> 00:30:49.320
So let's have a quick demo
of a custom container,

00:30:49.320 --> 00:30:51.440
look at some code.

00:30:51.950 --> 00:30:52.820
All right.

00:30:53.020 --> 00:30:59.510
So this is the interface definition
of the CVC Flipnote View Controller.

00:30:59.510 --> 00:31:03.330
And there's a couple of things I'd
like to point out in the header file.

00:31:03.360 --> 00:31:05.860
One is that this is the
API that we've added.

00:31:05.980 --> 00:31:10.040
We've added this flip to note,
flip from note, set content controller.

00:31:10.040 --> 00:31:14.760
Those API methods are the API that
the content controller exposes

00:31:14.820 --> 00:31:19.640
to manipulate the child parent
view controller relationships.

00:31:19.690 --> 00:31:24.040
We have a lot of custom views that
set up kind of the Chrome and the

00:31:24.040 --> 00:31:27.800
look of this content controller,
including a toolbar and so forth.

00:31:27.840 --> 00:31:31.470
And we've implemented it in
a way that we wanted it to be

00:31:31.470 --> 00:31:33.840
reusable in different contexts.

00:31:34.000 --> 00:31:37.600
So the model object has a
protocol associated with it.

00:31:37.600 --> 00:31:42.910
And if any object supports this protocol,
it can use this container controller and

00:31:43.010 --> 00:31:45.740
get all the goodness that it provides.

00:31:45.740 --> 00:31:48.260
And in fact, that's exactly what
Matt is going to show you.

00:31:48.650 --> 00:31:50.920
When I stop speaking.

00:31:50.920 --> 00:31:55.670
So let's run the demo in the simulator.

00:31:55.890 --> 00:32:00.940
And what you're gonna see here is you see
this content controller on the outside.

00:32:00.940 --> 00:32:06.290
I can select different recipes.

00:32:06.540 --> 00:32:10.820
I can -- what I really wanted to do is
be able to flip the thing to the side,

00:32:10.820 --> 00:32:18.860
write a note about it if I wanted to,
you know, something like that.

00:32:18.950 --> 00:32:20.260
Go back.

00:32:20.320 --> 00:32:26.140
Ultimately share my
recipes with my friends.

00:32:26.140 --> 00:32:29.690
But, hey, what happened there?

00:32:29.730 --> 00:32:29.730
So,

00:32:30.960 --> 00:32:34.080
I kind of went a little bit quickly,
but basically what happened is

00:32:34.080 --> 00:32:36.760
this isn't quite optimal here.

00:32:36.760 --> 00:32:41.400
We didn't resynchronize that table
controller with the actual picture.

00:32:41.400 --> 00:32:46.260
And the reason that happened is
because we got a viewWillAppear

00:32:46.630 --> 00:32:51.470
on the picture controller,
but we didn't do anything about that.

00:32:51.520 --> 00:32:57.130
So we're going to change that,
if I can find the viewWillAppear method.

00:32:59.110 --> 00:33:01.590
Come on, there it is,
and the view did appear method,

00:33:01.660 --> 00:33:03.240
excuse me.

00:33:03.250 --> 00:33:08.680
And there's this new API here
that I'm gonna talk about once

00:33:08.680 --> 00:33:12.500
I get off this demo thing.

00:33:12.740 --> 00:33:17.650
Where when that picture controller's
viewDidAppear is called,

00:33:17.720 --> 00:33:21.650
we're going to check whether
or not I'm moving to a parent

00:33:21.650 --> 00:33:22.720
view controller or not.

00:33:22.810 --> 00:33:29.360
And if I am, I'm going to synchronize the
selection list if I need to.

00:33:29.780 --> 00:33:32.780
If I'm not moving into a
new parent view controller,

00:33:32.780 --> 00:33:34.600
or if I am moving into a
new parent view controller,

00:33:34.600 --> 00:33:37.230
I don't need to do that because
I'm brand new to the scene.

00:33:37.380 --> 00:33:38.480
I'm already synchronized.

00:33:38.540 --> 00:33:41.130
I'm there because I was selected.

00:33:41.330 --> 00:33:46.570
So let's stop the demo from running.

00:33:46.830 --> 00:33:49.020
Run it again.

00:33:49.220 --> 00:33:50.860
Show the note.

00:33:50.880 --> 00:33:52.040
I don't want to do that.

00:33:52.040 --> 00:33:53.590
I need to show content.

00:33:53.660 --> 00:33:58.310
Show the note.

00:33:58.610 --> 00:34:03.260
Go to Gendersnaps, hide the note,
and now we synchronize back.

00:34:03.310 --> 00:34:07.820
So let's talk a little bit
about what was going on here.

00:34:07.840 --> 00:34:10.160
Well, first of all,
there's two API methods that we were

00:34:10.170 --> 00:34:12.800
doing when we were to flip to note,
which we've seen before,

00:34:12.800 --> 00:34:15.800
and flip from note, which is kind of the
inverse of flip to note.

00:34:15.870 --> 00:34:20.460
These two methods are very similar to
what push and pop view controller on

00:34:20.460 --> 00:34:23.120
the navigation controller method is.

00:34:23.120 --> 00:34:26.920
And there's kind of
like a symmetry to them.

00:34:26.920 --> 00:34:30.480
You'll notice that in the first one,
when we're popping or we're

00:34:30.480 --> 00:34:33.030
removing a controller,
we call will move to parent

00:34:33.060 --> 00:34:34.850
view controller with a nil.

00:34:35.110 --> 00:34:37.450
Because we don't know that
you're actually doing that yet.

00:34:37.490 --> 00:34:40.770
However, when all is said and done
in the completion method,

00:34:40.780 --> 00:34:43.490
we call remove from
parent view controller.

00:34:43.570 --> 00:34:45.800
And at that point,
we automatically call did move to

00:34:45.880 --> 00:34:49.930
parent view controller for you because,
hey, we know you've just moved out

00:34:49.960 --> 00:34:51.960
because you've made that call.

00:34:51.990 --> 00:34:56.640
The code that I edited,
we're gonna look at in a second.

00:34:57.670 --> 00:35:01.800
But what I wanted to do is point
out exactly what's going on here.

00:35:01.850 --> 00:35:04.360
When we flip the note,
we've effectively added a child

00:35:04.430 --> 00:35:06.190
controller onto the stack.

00:35:06.430 --> 00:35:10.800
We've kept the content,
the waffles as it were, underneath.

00:35:11.030 --> 00:35:12.100
We've swapped the views.

00:35:12.160 --> 00:35:16.320
We're hanging onto the waffle view
because when we pop the thing ultimately,

00:35:16.400 --> 00:35:18.840
that waffle view is going back.

00:35:22.230 --> 00:35:28.690
Now, is moving to parent view
controllers is an interesting call.

00:35:29.180 --> 00:35:31.320
That's what made things resynchronize.

00:35:31.340 --> 00:35:35.170
I'm going to talk about it
in terms of the new API here.

00:35:35.690 --> 00:35:41.600
Many of you have requested that you
really want to know if a view controller

00:35:41.600 --> 00:35:45.980
is appearing because it just got pushed
onto a navigation controller or because

00:35:45.980 --> 00:35:49.570
something got popped off the navigation
controller and you're appearing again.

00:35:49.620 --> 00:35:53.730
And we needed to come up with a
slightly general way to handle that,

00:35:53.730 --> 00:35:58.100
given that now you guys can create
your own container controllers.

00:35:58.200 --> 00:36:02.640
So that's what is moving to parent view
controller is actually doing there.

00:36:03.130 --> 00:36:06.760
Because depending on how your
content controller is constructed,

00:36:06.920 --> 00:36:11.270
you'll see that the patterns in the code,
when you go back and look at it,

00:36:11.330 --> 00:36:14.820
because it is sample code,
is such that that is going to return

00:36:14.820 --> 00:36:19.210
yes in the appearance callbacks
between view will appear and view

00:36:19.210 --> 00:36:21.660
did appear if it is new to the scene.

00:36:21.730 --> 00:36:25.760
In other words, if you've just pushed
a view controller onto,

00:36:25.760 --> 00:36:27.370
you know,
if you've just added a view controller

00:36:27.390 --> 00:36:29.590
onto a navigation controller,
and you've just provided a view

00:36:29.620 --> 00:36:33.130
controller child to its parent
and are changing the views out,

00:36:33.130 --> 00:36:35.070
that's going to return yes.

00:36:35.400 --> 00:36:39.840
And if it's already a child and
you've just removed something and

00:36:39.840 --> 00:36:43.140
revealed that view controller again,
it's going to return no.

00:36:43.140 --> 00:36:46.360
So it's a way that you can disambiguate
whether or not a view controller

00:36:46.430 --> 00:36:50.140
is appearing because something got
pushed on you or popped off you.

00:36:50.140 --> 00:36:55.140
The other method is the exact same
thing except it regards disappearing.

00:36:55.140 --> 00:36:58.120
Are you disappearing because
something got pushed on you?

00:36:58.140 --> 00:37:01.040
Or because you got
popped off of something?

00:37:01.070 --> 00:37:07.060
And for completion here,
we've added two sets of parallel methods,

00:37:07.200 --> 00:37:11.110
exact same semantic,
except they give you an indication

00:37:11.110 --> 00:37:17.230
of when a view controller is being
presented over you or dismissed from you.

00:37:18.570 --> 00:37:19.460
Hopefully that's clear.

00:37:19.500 --> 00:37:21.510
Now,
I really hope this method scares you.

00:37:21.570 --> 00:37:24.540
It scares me a little bit.

00:37:24.540 --> 00:37:27.450
And I'm not even going to try to say
it because I can't read it right now.

00:37:29.710 --> 00:37:31.760
We wanted to give you
guys an escape hatch,

00:37:31.760 --> 00:37:32.280
as it were.

00:37:32.530 --> 00:37:36.200
If you're implementing a container
controller and you don't want the

00:37:36.200 --> 00:37:41.070
automatic appearance callbacks to happen,
remember, appearance callbacks happen

00:37:41.350 --> 00:37:44.280
when views get moved in and
out of the window hierarchy.

00:37:44.360 --> 00:37:46.250
And we manage it all
for you automatically.

00:37:46.350 --> 00:37:47.720
You don't really have to do a lot.

00:37:47.810 --> 00:37:52.130
But sometimes, you know,
that's not what you want.

00:37:52.230 --> 00:37:54.470
And you want to manage it yourself.

00:37:54.730 --> 00:37:59.380
Maybe you have some really just
incredible animation and you're moving

00:37:59.380 --> 00:38:02.870
views in and out of each other and
you just don't want these appearance

00:38:02.870 --> 00:38:05.460
callbacks to happen out of your control.

00:38:05.750 --> 00:38:12.620
Well, you can override that method,
whose name I can't say, and return no.

00:38:12.620 --> 00:38:14.860
And if you do that,
what that means is that you're

00:38:14.970 --> 00:38:18.600
responsible for forwarding those
appearance callbacks yourself.

00:38:18.600 --> 00:38:21.230
So this is kind of like
idealized code there,

00:38:21.550 --> 00:38:25.670
but you could have like done it yourself,
you know, using CA animation,

00:38:25.790 --> 00:38:30.150
whatever you want,
and just make sure that you follow the

00:38:30.150 --> 00:38:35.990
invariants that aren't too stringent
that I talked about earlier in the talk.

00:38:36.950 --> 00:38:40.120
Okay, there's one other thing
I want to demo here.

00:38:40.140 --> 00:38:45.210
And then I'm gonna give it over to Matt.

00:38:48.530 --> 00:38:55.600
Okay, well,
I don't want to hit that button,

00:38:55.600 --> 00:38:55.600
because that button is

00:39:04.800 --> 00:39:05.750
Interesting.

00:39:05.800 --> 00:39:16.920
Okay,
we have some technical difficulty here.

00:39:16.920 --> 00:39:19.950
I'm not gonna show that part of the
demo because we didn't configure

00:39:19.960 --> 00:39:22.040
this demo machine to have email.

00:39:22.050 --> 00:39:23.340
So I'm gonna talk to it.

00:39:23.340 --> 00:39:27.710
Once I click the presentation,

00:39:29.200 --> 00:39:35.170
So imagine you saw a demo,
and it was great.

00:39:36.810 --> 00:39:40.760
You click the little share button,
and in addition to the tweet,

00:39:40.760 --> 00:39:42.680
there was an email.

00:39:42.680 --> 00:39:45.680
And we were gonna present the
mail compose sheet modally.

00:39:45.680 --> 00:39:48.090
And I think I have some slides
that kinda talk about it.

00:39:48.140 --> 00:39:54.550
And basically the code that we're gonna
go through runs something like this.

00:39:54.950 --> 00:39:58.910
I could either be sharing from the
note controller that's up there,

00:39:58.910 --> 00:40:02.340
or I could be sharing from
the content controller.

00:40:02.390 --> 00:40:05.610
And in one case,
I got this full screen presentation,

00:40:05.610 --> 00:40:06.780
and it covered the entire screen.

00:40:06.780 --> 00:40:09.090
In the other case,
it kind of appeared nicely and

00:40:09.100 --> 00:40:14.860
nestled right in the view of the
note or the content controller.

00:40:14.910 --> 00:40:16.740
And the other one looks
a little bit better.

00:40:16.930 --> 00:40:19.070
So I wanted to show you
how you can affect that.

00:40:19.210 --> 00:40:21.930
Now, first of all,
you may be familiar with

00:40:21.930 --> 00:40:24.050
current context presentation.

00:40:24.350 --> 00:40:25.130
Maybe?

00:40:25.150 --> 00:40:25.900
Okay.

00:40:25.950 --> 00:40:29.100
You can set the modal presentation
style to be current context,

00:40:29.100 --> 00:40:33.540
and I think somewhere in
that code that I can't read,

00:40:33.570 --> 00:40:34.700
we're doing that.

00:40:34.830 --> 00:40:37.340
And it's effectively we're calling
present view controller in the

00:40:37.340 --> 00:40:40.440
exact same way on both the note
controller and the content controller.

00:40:40.440 --> 00:40:42.360
And in one case, it goes full screen.

00:40:42.460 --> 00:40:44.010
In the other case, it doesn't.

00:40:44.100 --> 00:40:45.090
And why is that?

00:40:45.290 --> 00:40:46.840
So that's what it
should have looked like,

00:40:46.840 --> 00:40:49.460
but it didn't,
because we didn't configure email.

00:40:49.480 --> 00:40:53.250
And we were going to click on email,
and we were going to execute that code.

00:40:53.370 --> 00:40:57.780
And we were going to basically
make the recipe browser the

00:40:57.880 --> 00:40:58.980
presenting view controller.

00:40:58.990 --> 00:41:00.940
And it was going to look just like that.

00:41:00.950 --> 00:41:03.800
Believe me.

00:41:03.810 --> 00:41:05.990
And in the other case--

00:41:10.020 --> 00:41:12.920
Other case.

00:41:12.970 --> 00:41:15.110
It kind of looked like this.

00:41:16.420 --> 00:41:20.120
It walked up just like we
walked up in the previous talk,

00:41:20.120 --> 00:41:22.910
and the presenting view controller
became the root view controller again.

00:41:22.920 --> 00:41:24.600
So how can you control that?

00:41:24.820 --> 00:41:27.970
Well, prior to iOS 5,
there's lots of code that kind of

00:41:27.970 --> 00:41:30.870
was going parent view controller,
parent view controller,

00:41:30.870 --> 00:41:31.740
parent view controller.

00:41:31.740 --> 00:41:33.290
Now you don't have to do that.

00:41:33.300 --> 00:41:36.210
Now you can just make a
set a bit effectively,

00:41:36.210 --> 00:41:39.520
set a flag in the controller
hierarchy that says you

00:41:39.520 --> 00:41:41.800
define presentation context.

00:41:42.020 --> 00:41:46.070
And as we walk up an arbitrarily
deep chain of parent-child

00:41:46.090 --> 00:41:50.890
view controller relationships,
the first one that has the define

00:41:50.890 --> 00:41:56.150
presentation context set is going to
be the one that we present within.

00:41:56.160 --> 00:42:00.000
So it's really easy to control
where those presentations occur.

00:42:00.050 --> 00:42:01.600
So that's two new bits of API.

00:42:01.600 --> 00:42:03.260
One is define presentation context.

00:42:03.260 --> 00:42:07.320
You can also, that same controller can
define the transition style.

00:42:07.320 --> 00:42:11.400
So it could be, you know, slide up,
cross dissolve, flip.

00:42:12.080 --> 00:42:16.890
You can set it yourself, you know,
without having to worry about the code

00:42:16.900 --> 00:42:19.020
that's actually doing the presentation.

00:42:19.020 --> 00:42:20.290
All right.

00:42:20.570 --> 00:42:24.000
One other point I wanted to make,
and I think I missed this,

00:42:24.060 --> 00:42:29.630
was that parent view controller,
the semantics of it have changed a bit.

00:42:30.280 --> 00:42:36.100
Parent view controller used to return
the presenting view controller,

00:42:36.100 --> 00:42:37.920
the presenting modal view controller.

00:42:37.920 --> 00:42:41.030
And because of this whole
set of containment changes,

00:42:41.030 --> 00:42:42.480
that's no longer true.

00:42:42.540 --> 00:42:46.270
When you call parent view controller,
if you've been modally

00:42:46.550 --> 00:42:50.260
presented or presented,
parent view controller may very well

00:42:50.260 --> 00:42:50.380
return the parent view controller.

00:42:50.450 --> 00:42:56.640
And I know there's a lot of code out
there that kind of doesn't expect that.

00:42:56.800 --> 00:42:58.270
So you need to be on guard for that.

00:42:58.280 --> 00:43:00.740
And if you really need the
presenting view controller,

00:43:00.750 --> 00:43:03.450
there's a new API called
presenting view controller that

00:43:03.530 --> 00:43:06.460
you guys can use to get that.

00:43:06.460 --> 00:43:13.000
All right,
so let's go over what we've learned.

00:43:13.980 --> 00:43:18.100
First of all,
use existing containers if you can.

00:43:18.370 --> 00:43:19.240
Give us your bugs.

00:43:19.420 --> 00:43:20.800
We'll make them better.

00:43:20.870 --> 00:43:22.920
That's what we do.

00:43:22.980 --> 00:43:26.970
It might be easier to do this if
you realize is that view controllers

00:43:26.970 --> 00:43:29.630
manage complex view hierarchies,
and they can, in fact,

00:43:29.630 --> 00:43:33.090
have subordinate regular old controllers.

00:43:33.740 --> 00:43:35.940
If you need to create a
custom view controller,

00:43:35.990 --> 00:43:38.540
do it when you need to.

00:43:38.600 --> 00:43:43.930
Do it to define new application flows,
new appearances that you want.

00:43:44.490 --> 00:43:46.840
And instead of any
direct view manipulation,

00:43:46.850 --> 00:43:49.760
if your app is doing direct
view manipulation like this,

00:43:50.080 --> 00:43:53.280
consider refactoring it into
a custom container controller.

00:43:53.280 --> 00:43:57.220
This will help future-proof your apps,
if nothing else.

00:43:59.750 --> 00:44:05.250
The API is actually beguilingly simple,
but it is a little bit subtle and

00:44:05.260 --> 00:44:10.840
you got to get the ordering right and
understand the two different hierarchies.

00:44:11.010 --> 00:44:14.440
So I'm going to let
Matt Gamble come on the stage.

00:44:14.440 --> 00:44:19.740
He's going to enhance that demo app that
wasn't working so well for me at the end,

00:44:19.740 --> 00:44:23.200
but I have faith that he's
going to make it shine.

00:44:23.350 --> 00:44:29.480
And he's going to expand a little
bit on the topics that I presented.

00:44:30.330 --> 00:44:31.960
Thank you, Bruce.

00:44:32.020 --> 00:44:35.400
I'm Matt Gamble, another member of the
UIKit team at Apple,

00:44:35.520 --> 00:44:38.040
and I'd like to introduce
a new controller class,

00:44:38.150 --> 00:44:42.100
new to iOS 5,
called the UIPageViewController.

00:44:43.320 --> 00:44:46.940
Now the UI Page View Controller is
a container controller that

00:44:46.940 --> 00:44:50.850
allows you to navigate among
views with a page curl transition.

00:44:50.990 --> 00:44:57.720
And this transition can be done either
programmatically or via user gestures.

00:44:58.960 --> 00:45:03.790
Now, this is a container view controller,
and it leverages the new containment API.

00:45:04.000 --> 00:45:07.370
So it manages child view controllers,
which are the ones actually

00:45:07.470 --> 00:45:08.800
presenting your content.

00:45:08.800 --> 00:45:12.050
And it also presents these
view controllers in a

00:45:12.050 --> 00:45:15.650
prepared application flow,
which in this case is

00:45:15.650 --> 00:45:17.800
our page curl transition.

00:45:18.740 --> 00:45:21.680
So to get started,
we'll start by initializing an

00:45:21.680 --> 00:45:24.270
instance of UIPageViewController.

00:45:24.270 --> 00:45:28.070
And we're going to do that with the
initWithTransitionStyleNavigationOrient

00:45:28.070 --> 00:45:30.240
ationOptions method.

00:45:31.480 --> 00:45:36.280
So for this, for the transition style,
we're going to pass in page curl.

00:45:36.290 --> 00:45:40.830
Now the navigation orientation,
if you are doing left

00:45:40.830 --> 00:45:45.980
to right transitions,
then you would want to use horizontal.

00:45:45.980 --> 00:45:49.640
If you were going to do up and down,
which would be more like the

00:45:49.640 --> 00:45:52.710
pages in a wall calendar,
you'd use vertical.

00:45:52.930 --> 00:45:56.170
So pass in your navigation orientation.

00:45:56.180 --> 00:45:58.780
And then finally,
there's an options dictionary where

00:45:58.870 --> 00:46:02.520
you can pass in some different options,
perhaps the most interesting

00:46:02.530 --> 00:46:04.660
of which is the spine location.

00:46:04.660 --> 00:46:10.140
Now the spine location describes the
line around which these page curls occur.

00:46:10.140 --> 00:46:14.210
You can have min or max,
which would be an edge spine location,

00:46:14.370 --> 00:46:19.020
in which case the page curls would be
happening about a line that is on one

00:46:19.020 --> 00:46:21.600
of the edges of your content area.

00:46:21.610 --> 00:46:26.800
So in this case, you'd be seeing one page
of content at a time.

00:46:26.850 --> 00:46:31.000
You could also have a mid spine location,
where the spine would be in the middle,

00:46:31.000 --> 00:46:34.900
and the pages would be turning about
it in the center of the bounds.

00:46:34.900 --> 00:46:41.280
In this case, you'd be using two pages
of content at a time.

00:46:46.770 --> 00:46:50.320
So now that we've instantiated our page
view controller and initialized it,

00:46:50.330 --> 00:46:53.420
the next step is to set
some initial content.

00:46:53.670 --> 00:46:57.410
And so what you're going to do is
just have your application set one or

00:46:57.410 --> 00:47:02.840
at most two initial view controllers
on your page view controller.

00:47:02.890 --> 00:47:07.010
And you're going to do this with
the set view controllers direction

00:47:07.010 --> 00:47:09.540
animated completion method.

00:47:09.540 --> 00:47:12.540
Now like Bruce was saying,
this is a container controller.

00:47:12.710 --> 00:47:16.980
So it implements the containment API,
but that doesn't mean that you want to be

00:47:16.980 --> 00:47:21.970
calling add child view controller or set
child view controllers or any of this new

00:47:22.090 --> 00:47:24.420
containment API directly on this class.

00:47:24.600 --> 00:47:27.840
So this is the method that you'll
be using to actually pass your

00:47:27.840 --> 00:47:29.650
content to the page view controller.

00:47:32.600 --> 00:47:35.400
So we'll start by passing in
our array of view controllers.

00:47:35.460 --> 00:47:37.910
Again,
if you have an edge spine location,

00:47:37.950 --> 00:47:42.160
which would be the min or max,
this would just be one view controller.

00:47:42.240 --> 00:47:46.060
But if you had the center spine location,
this would be the two.

00:47:47.160 --> 00:47:49.760
We're going to pass it in forward.

00:47:49.770 --> 00:47:51.480
Now we're setting our
initial view controller so

00:47:51.480 --> 00:47:53.930
we don't need any animation,
pass no.

00:47:53.990 --> 00:47:57.340
And again, we probably don't care
about any completion block.

00:47:57.400 --> 00:48:01.540
But this method is interesting
as this is also how you would

00:48:01.540 --> 00:48:04.340
perform programmatic transitions.

00:48:04.390 --> 00:48:06.340
So now, of course,
the direction becomes a

00:48:06.340 --> 00:48:07.700
little bit more interesting.

00:48:07.700 --> 00:48:13.000
And you're going to want to make
sure to change yes for animated.

00:48:13.240 --> 00:48:17.000
And then perhaps pass in a completion
block so that you know exactly

00:48:17.000 --> 00:48:19.990
when this animation is finished.

00:48:23.780 --> 00:48:27.170
So that handles programmatic
navigation and programmatic

00:48:27.170 --> 00:48:29.020
transitions between your content.

00:48:29.070 --> 00:48:33.070
But what's more interesting is having
the user drive these transitions.

00:48:33.090 --> 00:48:35.370
And to do this,
instead of having our application

00:48:35.640 --> 00:48:40.540
set these view controllers,
we're going to have a data source that

00:48:40.540 --> 00:48:44.480
implements the UI PageViewController
data source protocol.

00:48:44.830 --> 00:48:47.980
And what's going to happen is that
when the user makes a gesture,

00:48:47.980 --> 00:48:51.670
the page view controller is then
going to ask that data source via

00:48:51.670 --> 00:48:55.360
the two required methods for the
appropriate view controller or view

00:48:55.420 --> 00:48:57.600
controllers for that situation.

00:48:57.680 --> 00:49:00.580
And it's up to the data source
to make sure to pass these back

00:49:00.730 --> 00:49:02.800
to the page view controller.

00:49:04.370 --> 00:49:09.960
So that's two of the three pieces of
the structure of a page view controller.

00:49:10.050 --> 00:49:14.660
The last piece is the delegate,
which implements the

00:49:14.660 --> 00:49:17.340
UIPageViewControllerDelegate protocol.

00:49:17.710 --> 00:49:20.440
And this just allows you to do a
little final customization in the

00:49:20.440 --> 00:49:22.370
behavior of the page view controller.

00:49:24.160 --> 00:49:26.840
So let's get right into using
this and how you would use

00:49:26.930 --> 00:49:29.280
this in your applications.

00:49:29.820 --> 00:49:34.820
So here we have our
recipe controller object.

00:49:34.890 --> 00:49:38.800
This is the view controller whose
responsibility it was to provide

00:49:38.800 --> 00:49:42.930
that content in the content
area of the Flipnote controller.

00:49:43.100 --> 00:49:46.910
Now I'm going to skip down
to the viewDidLoad method.

00:49:47.450 --> 00:49:54.050
And I'm going to start by-- oh,
that's not what we wanted.

00:50:02.100 --> 00:50:06.420
And we're going to start by initializing
our instance of page view controller.

00:50:06.460 --> 00:50:09.790
We'll determine the
appropriate spine location,

00:50:09.890 --> 00:50:12.200
construct our options dictionary.

00:50:12.240 --> 00:50:16.700
And in our options dictionary,
we are specifying our spine location key.

00:50:16.760 --> 00:50:21.410
And then we pass these into the init
with transition style navigation

00:50:21.860 --> 00:50:23.730
orientation options method.

00:50:25.900 --> 00:50:27.940
The next part is to set up
the delegate and data source

00:50:28.000 --> 00:50:29.240
of the page view controller.

00:50:29.390 --> 00:50:33.790
In that case, it's going to be self,
which is this recipe controller.

00:50:36.400 --> 00:50:39.480
Now, like Bruce was saying,
it's important to make sure that the

00:50:39.620 --> 00:50:43.270
bounds of these controllers are flexible,
because you don't really know what your

00:50:43.340 --> 00:50:46.100
presentation context is going to be.

00:50:46.450 --> 00:50:48.740
And the page view controller
feels the same way.

00:50:48.870 --> 00:50:52.050
So feel free to change the bounds
of the page view controller's

00:50:52.060 --> 00:50:55.860
view to whatever makes sense in
the context of your application.

00:50:55.990 --> 00:51:00.550
So I'm going to go ahead and set
it to the bounds of this view.

00:51:04.830 --> 00:51:08.080
And now I'm going to go about
setting my initial view controllers,

00:51:08.180 --> 00:51:10.240
determine which view
controllers I'm using,

00:51:10.260 --> 00:51:13.200
and then pass them in with
the set view controllers

00:51:13.200 --> 00:51:15.560
direction animated completion.

00:51:15.600 --> 00:51:17.550
And again, we're setting the
initial view controllers,

00:51:17.560 --> 00:51:20.520
so the animated flag and the completion,
and even the direction,

00:51:20.540 --> 00:51:22.910
not that interesting at this point.

00:51:23.940 --> 00:51:29.140
Now this class, this recipe controller,
is itself a container controller.

00:51:29.410 --> 00:51:32.590
So it's important to
make a few more calls.

00:51:32.590 --> 00:51:35.730
We're going to make sure to add
the page view controller as a child

00:51:35.730 --> 00:51:37.520
view controller of this container.

00:51:37.520 --> 00:51:41.280
And then we're going to add the
page view controller's view as a

00:51:41.280 --> 00:51:43.720
subview to this controller's view.

00:51:43.720 --> 00:51:47.690
And then finally,
we're going to call didMoveToParent

00:51:47.690 --> 00:51:49.680
on the page view controller.

00:51:49.920 --> 00:51:52.910
All right,
so let's take a look at what we have now.

00:51:55.900 --> 00:51:57.090
So this looks very familiar.

00:51:57.100 --> 00:51:59.020
We saw this earlier.

00:51:59.160 --> 00:52:02.960
But instead of this being
static content in the middle,

00:52:04.480 --> 00:52:08.990
Oh, we now have a nice interactive
page curl transition.

00:52:09.090 --> 00:52:12.400
You can see the edge
is tracking the touch.

00:52:12.470 --> 00:52:15.540
As I go over and let go, oh,
here we actually get to some

00:52:15.540 --> 00:52:17.870
of the meat of our recipe.

00:52:18.070 --> 00:52:23.440
I can also navigate by
just tapping on the edges.

00:52:23.550 --> 00:52:27.300
And back.

00:52:27.390 --> 00:52:31.790
So that's a lot better,
a much better way to present our recipe.

00:52:38.910 --> 00:52:40.730
So I'd like to point out a couple things.

00:52:40.860 --> 00:52:43.800
First of all,
when I begin this transition,

00:52:43.800 --> 00:52:46.800
this gesture within the bounds
of the page view controller,

00:52:46.800 --> 00:52:47.780
everything looks great.

00:52:47.870 --> 00:52:49.750
I get the animation I'm expecting.

00:52:49.790 --> 00:52:55.640
But if I go to this blue area
slightly outside the bounds and begin,

00:52:55.820 --> 00:52:57.650
nothing happens.

00:52:58.260 --> 00:53:00.640
That's disappointing.

00:53:00.730 --> 00:53:05.310
And users don't really have to be
picky about where their touches

00:53:05.310 --> 00:53:07.270
are exactly starting or ending.

00:53:07.450 --> 00:53:11.180
So it's important to make sure
that this behaves as they'd expect.

00:53:11.530 --> 00:53:17.710
So let's return to Xcode and go
back to our recipe controller here.

00:53:17.880 --> 00:53:20.200
And I'm going to implement two methods.

00:53:20.430 --> 00:53:22.040
The first is viewDidAppear.

00:53:22.090 --> 00:53:26.280
And I'm going to take advantage of
the page view controller's array of

00:53:26.280 --> 00:53:28.640
gesture recognizers that it vends.

00:53:28.690 --> 00:53:31.800
And I'm going to make sure to
add those to the content area

00:53:31.940 --> 00:53:34.640
of our parent view controller.

00:53:34.660 --> 00:53:36.840
I'll do that in didAppear.

00:53:36.900 --> 00:53:39.460
And then viewWillDisappear,
I'll make sure to remove them

00:53:39.460 --> 00:53:41.600
as our view is going away.

00:53:41.750 --> 00:53:46.020
So let's build and run again and
see if we see some improvement.

00:53:46.090 --> 00:53:48.870
So again, within the bounds, works great.

00:53:49.050 --> 00:53:51.620
And how about if I start
slightly outside?

00:53:51.680 --> 00:53:53.920
All right, that works too.

00:53:53.950 --> 00:53:55.210
Much better.

00:53:55.560 --> 00:53:59.530
This is particularly important if you
want to embed this page view controller's

00:53:59.600 --> 00:54:03.440
view within some of your own Chrome to
get that specific look that you want,

00:54:03.610 --> 00:54:09.830
but not want to have the users have to
touch just within that specific bounds.

00:54:10.000 --> 00:54:13.170
So one more thing I'd like to
point out in this demo application.

00:54:13.350 --> 00:54:18.150
If we are to rotate--I'm going
to just use the key equivalent

00:54:18.370 --> 00:54:19.300
to rotate the simulator.

00:54:19.940 --> 00:54:24.200
Okay, the same content,
little bit bigger,

00:54:24.240 --> 00:54:26.450
dimensions are kind of changed.

00:54:26.690 --> 00:54:30.000
But wouldn't it be nice if
instead of just showing this

00:54:30.000 --> 00:54:33.330
same single page of content,
since we have this additional

00:54:33.340 --> 00:54:37.480
room and landscape,
we could move our spine position to the

00:54:37.490 --> 00:54:42.770
middle and show two pages of content
since we have this additional room?

00:54:42.770 --> 00:54:42.770
Wow.

00:54:43.170 --> 00:54:49.040
Since we set our recipe controller as
the delegate of the page view controller,

00:54:49.040 --> 00:54:51.190
we can go ahead and do that.

00:54:51.480 --> 00:54:57.630
So I'm going to start by implementing
the page view controller spine location

00:54:57.640 --> 00:54:59.510
for interface orientation method.

00:54:59.600 --> 00:55:03.210
And this is an optional
method for the delegate.

00:55:03.400 --> 00:55:08.170
Start by figuring out what is the
spine location that I want to use

00:55:08.170 --> 00:55:12.190
for this particular orientation.

00:55:12.190 --> 00:55:12.190
The next step

00:55:14.030 --> 00:55:18.680
is to start figuring out what view
controllers I need and taking care of

00:55:18.680 --> 00:55:23.640
any calls that are specific to this
orientation or this spine location.

00:55:23.850 --> 00:55:28.430
In this case,
when we're doing a spine location min,

00:55:28.430 --> 00:55:31.280
which in this demo app is going to
be a spine on the left-hand side,

00:55:31.480 --> 00:55:34.310
just showing the single
page of content at a time,

00:55:34.560 --> 00:55:36.430
it's important to set double-sided to no.

00:55:36.760 --> 00:55:41.800
This value gets implicitly set to
yes if you use a mid-spine location.

00:55:42.080 --> 00:55:45.660
So if you're ever transitioning
back to an edge spine location,

00:55:45.830 --> 00:55:49.790
and you want to go back to the default
behavior of having the content on the

00:55:50.010 --> 00:55:53.330
front showing partially through the back,
you'd want to make sure

00:55:53.330 --> 00:55:54.920
to set this back to no.

00:55:55.610 --> 00:55:59.180
Now,
what if we have a mid-spine location?

00:55:59.270 --> 00:56:01.560
Well, in this case,
we're going to have to be passing

00:56:01.560 --> 00:56:03.920
an additional view controller.

00:56:03.960 --> 00:56:06.990
Because remember, we're now showing two
pages of content at a time.

00:56:06.990 --> 00:56:09.900
So in addition to the
currently selected one,

00:56:09.960 --> 00:56:13.760
we also need to figure out what
is the other view controller and

00:56:14.060 --> 00:56:17.830
pass these two view controllers
to the page view controller.

00:56:19.680 --> 00:56:24.270
And finally, we're going to set those
view controllers in the

00:56:24.270 --> 00:56:28.230
setViewControllers.direction.animated.com
pletion method.

00:56:28.240 --> 00:56:33.170
Now, you are free to call this method as
well as the double-sided method within

00:56:33.170 --> 00:56:35.200
this delegate method's implementation.

00:56:37.310 --> 00:56:40.040
Okay, so we have that all set.

00:56:40.090 --> 00:56:44.670
Let's take a look and see
how this will work now.

00:56:44.750 --> 00:56:48.090
So here's our portrait with
our edge spine location.

00:56:48.190 --> 00:56:51.960
If I rotate, all right,
get a nice cross fade to two

00:56:51.960 --> 00:56:53.850
pages of content at a time.

00:56:54.040 --> 00:56:58.100
If I begin my gesture here,
you'll see it's now curling

00:56:58.100 --> 00:57:02.000
about the center line.

00:57:02.080 --> 00:57:06.060
So we have this nice double-sided
with mid-spine location.

00:57:10.680 --> 00:57:12.980
So let's quickly take a look at
what we learned in that demo.

00:57:13.190 --> 00:57:15.400
Well,
there are a few things we knew going in.

00:57:15.400 --> 00:57:19.280
We need to initialize our page view
controller with a transition style,

00:57:19.330 --> 00:57:21.800
navigation orientation,
and any of the options,

00:57:21.870 --> 00:57:23.320
like the spine location.

00:57:23.370 --> 00:57:25.310
We need to set our
initial view controllers.

00:57:25.490 --> 00:57:28.360
It's also how we drive
programmatic navigation.

00:57:28.410 --> 00:57:32.100
And we saw that we can do user-driven--

00:57:32.580 --> 00:57:36.500
Navigation by setting our data source
and implementing the required methods.

00:57:36.570 --> 00:57:39.340
We also saw that we can customize
the gesture area with the gesture

00:57:39.340 --> 00:57:44.080
recognizers and change the spine
location on rotation with the delegate.

00:57:44.880 --> 00:57:46.600
A lot of content here today.

00:57:46.860 --> 00:57:49.160
It's important to understand
the difference between content

00:57:49.180 --> 00:57:50.540
and container view controllers.

00:57:50.540 --> 00:57:57.110
Also, you want to think about when to use
custom view controller containers,

00:57:57.110 --> 00:57:59.320
to define your custom
application flows or looks,

00:57:59.320 --> 00:58:02.550
and probably in place of any
direct manipulation you were

00:58:02.550 --> 00:58:04.260
doing with views in the past.

00:58:05.200 --> 00:58:09.500
And then leverage our existing container
controllers if at all possible,

00:58:09.500 --> 00:58:13.240
like the navigation controller,
tab bar controller,

00:58:13.240 --> 00:58:16.280
and now the new UI page view controller.

00:58:16.280 --> 00:58:18.960
Thank you so much for coming.

00:58:18.960 --> 00:58:25.710
I hope you have a great rest of the week.