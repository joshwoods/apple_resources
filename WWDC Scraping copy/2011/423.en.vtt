WEBVTT

00:00:09.570 --> 00:00:10.180
Good morning.

00:00:10.370 --> 00:00:12.440
My name is Chris,
and I have the pleasure of

00:00:12.440 --> 00:00:15.580
speaking to you guys today
about the Core Motion framework,

00:00:15.630 --> 00:00:19.700
and more specifically,
what's new in Core Motion in iOS 5.

00:00:19.700 --> 00:00:22.530
We have some great features that
I think you're going to love.

00:00:22.580 --> 00:00:25.400
So here's some more
details on our agenda.

00:00:25.400 --> 00:00:29.280
We'll start off talking about an idea
that I have for an app that I think would

00:00:29.580 --> 00:00:31.720
be really great to see in the store.

00:00:32.710 --> 00:00:35.740
We'll talk about the basics
of using Core Motion,

00:00:35.740 --> 00:00:38.210
how to start and stop
different types of data,

00:00:38.210 --> 00:00:41.520
and tell us how often you want to
receive different types of data.

00:00:41.520 --> 00:00:43.340
We'll write some code.

00:00:43.340 --> 00:00:47.820
Then we'll deep dive into some of the
new features of Core Motion and talk

00:00:47.820 --> 00:00:50.430
about how you can use them in your apps.

00:00:50.440 --> 00:00:56.980
And then we'll talk about one very common
use case of the data from Core Motion,

00:00:56.980 --> 00:01:01.160
and that is to control a
camera into some 3D world.

00:01:01.160 --> 00:01:02.400
We'll give you some tips.

00:01:02.560 --> 00:01:04.280
on how to do that.

00:01:05.300 --> 00:01:08.970
But before we talk about any of that,
let me give you a quick overview of

00:01:08.980 --> 00:01:11.190
what's new in Core Motion in iOS 5.

00:01:11.200 --> 00:01:14.810
So the first thing that we're
providing now is raw magnetometer

00:01:14.810 --> 00:01:16.190
data through Core Motion.

00:01:16.200 --> 00:01:20.200
Next thing is North-referenced
attitude data.

00:01:20.200 --> 00:01:23.070
And if that doesn't
make any sense to you,

00:01:23.220 --> 00:01:25.090
it will in a few minutes,
so stick with us.

00:01:25.200 --> 00:01:28.600
The final thing that we're
supporting in iOS 5 is the use

00:01:28.600 --> 00:01:30.200
of Core Motion in the background.

00:01:30.200 --> 00:01:34.200
So if your application already has
permission to run in the background

00:01:34.200 --> 00:01:36.120
to use something like location,
you can now use

00:01:36.120 --> 00:01:38.190
Core Motion at the same time.

00:01:38.200 --> 00:01:40.180
So let's set the stage.

00:01:40.190 --> 00:01:42.180
Let's talk about this idea for an app.

00:01:42.250 --> 00:01:46.140
So there are a lot of turn-by-turn
navigation apps in the App Store,

00:01:46.250 --> 00:01:47.200
and they're awesome.

00:01:47.200 --> 00:01:50.290
I mean, they're one of our most
popular categories of apps,

00:01:50.300 --> 00:01:52.190
and they're just so incredibly useful.

00:01:52.200 --> 00:01:58.090
But all of them render directions and
places of interest on some sort of

00:01:58.200 --> 00:02:00.050
artificial rendition of the application.

00:02:00.200 --> 00:02:03.200
So we're going to talk about the
core location of the real world.

00:02:03.200 --> 00:02:07.190
We don't have anything like an
augmented reality turn-by-turn

00:02:07.350 --> 00:02:11.770
navigation app that gives you maybe
a live camera feed out of the front

00:02:11.950 --> 00:02:15.740
of your windshield with directions,
street names,

00:02:15.740 --> 00:02:19.200
places of interest overlaid on
top of that augmented reality

00:02:19.200 --> 00:02:22.200
view in the appropriate locations.

00:02:22.200 --> 00:02:25.190
So what would we need to achieve this?

00:02:25.200 --> 00:02:27.190
Well, we'd really need two things.

00:02:27.230 --> 00:02:29.200
The first thing is your location,
of course.

00:02:29.200 --> 00:02:33.200
We know that the core location framework
does a great job of providing you.

00:02:33.520 --> 00:02:38.200
The next thing we need is attitude,
or how your device is rotated

00:02:38.200 --> 00:02:41.340
with respect to the world,
whether it's tilted,

00:02:41.420 --> 00:02:45.200
whether it's facing north, south, east,
west, that kind of thing.

00:02:45.200 --> 00:02:48.200
And that's something that
Core Motion can help you with.

00:02:48.200 --> 00:02:52.170
So it would be great if
Core Motion could use a single

00:02:52.690 --> 00:02:58.100
attitude sensor that would give you a
great estimate of attitude directly.

00:02:58.230 --> 00:03:01.710
But if things aren't quite that simple,
we actually have to use three

00:03:01.710 --> 00:03:05.200
sensors that complement each other
in order to calculate attitude.

00:03:05.350 --> 00:03:08.200
So let's talk briefly
about what those are.

00:03:08.250 --> 00:03:12.870
The first sensor is a gyroscope,
and this measures the rate at which the

00:03:13.040 --> 00:03:16.980
device is rotating around each axis,
and it's very,

00:03:16.980 --> 00:03:20.200
very responsive to that and very precise.

00:03:20.200 --> 00:03:23.190
So what this will let you
do is get a really accurate,

00:03:23.200 --> 00:03:26.420
really responsive estimate of
how attitude is changing from

00:03:26.420 --> 00:03:27.200
one point in time to another.

00:03:27.250 --> 00:03:30.200
If you integrate this data.

00:03:30.200 --> 00:03:33.860
And Core Motion will provide
the raw gyroscope data to your

00:03:33.860 --> 00:03:36.430
app if you'd like to use that.

00:03:36.680 --> 00:03:39.640
The next sensor is one that you're
probably more familiar with,

00:03:39.790 --> 00:03:41.400
and that's the accelerometer.

00:03:41.460 --> 00:03:44.220
It's a sensor that we've
had in every single iPhone,

00:03:44.220 --> 00:03:47.810
every single iPad, and every single iPod
Touch that we've ever shipped.

00:03:47.880 --> 00:03:52.200
And this measures the sum of
gravity plus whatever acceleration

00:03:52.200 --> 00:03:56.910
the user is giving the device,
and we call that user acceleration.

00:03:57.640 --> 00:03:59.940
Now, if you'd like to use the
raw accelerometer data,

00:04:00.000 --> 00:04:02.640
we provide that to your app
through Core Motion as well.

00:04:02.670 --> 00:04:05.230
And in fact,
the old interface for getting

00:04:05.230 --> 00:04:09.620
accelerometer data through
UIKit is being deprecated in iOS 5.

00:04:09.620 --> 00:04:12.940
So Core Motion is really the new
home for raw accelerometer data.

00:04:14.550 --> 00:04:16.770
The next sensor is the magnetometer.

00:04:16.800 --> 00:04:20.520
Now, if you've ever used the
Core Location and Compass framework,

00:04:20.540 --> 00:04:22.760
or if you've ever used
Compass Mode and Maps,

00:04:22.860 --> 00:04:25.470
or the standalone
Compass application that we have,

00:04:25.660 --> 00:04:27.000
you've used the magnetometer.

00:04:27.000 --> 00:04:30.360
And this measures basically
the local magnetic field

00:04:30.360 --> 00:04:32.410
that's surrounding the chip.

00:04:32.490 --> 00:04:36.060
And we can use this to determine
which direction your device is facing,

00:04:36.060 --> 00:04:38.810
north, south, east, west,
that kind of thing.

00:04:38.820 --> 00:04:41.980
And now in iOS 5,
the raw magnetometer data is available

00:04:41.980 --> 00:04:44.350
to your app through Core Motion as well.

00:04:44.400 --> 00:04:45.630
Thank you.

00:04:45.850 --> 00:04:50.580
So these sensors are great by themselves,
but there are some challenges to

00:04:50.580 --> 00:04:52.920
working with them in isolation.

00:04:53.060 --> 00:04:56.860
So with the gyroscope,
you have no absolute attitude reference.

00:04:56.990 --> 00:05:05.040
You can integrate the data to tell you
how the attitude is changing over time,

00:05:05.040 --> 00:05:08.540
but it doesn't give you any sort
of world-referenced starting point,

00:05:08.540 --> 00:05:08.540
basically.

00:05:08.890 --> 00:05:13.240
The other two issues with the
gyroscope are you have to worry

00:05:13.240 --> 00:05:15.360
about bias and scale error.

00:05:15.360 --> 00:05:20.640
Now, bias basically means that if
the device is not rotating,

00:05:20.640 --> 00:05:25.010
you would actually measure a
non-zero value from the gyroscope,

00:05:25.100 --> 00:05:27.340
as opposed to the ideal value of zero.

00:05:27.340 --> 00:05:30.940
So what that means for you is if
you're integrating the data to

00:05:30.940 --> 00:05:34.480
compute how attitude is changing,
and you don't correctly

00:05:34.480 --> 00:05:37.600
compensate for that bias,
then your attitude error

00:05:37.600 --> 00:05:41.780
will grow with time,
regardless of how the device is rotating.

00:05:41.780 --> 00:05:45.060
So the x-axis on this plot is time.

00:05:45.060 --> 00:05:48.580
So the other challenge to working
with the gyroscope is dealing

00:05:48.690 --> 00:05:50.740
with what's called scale error.

00:05:50.740 --> 00:05:53.700
So what this means is the
gyroscope will actually read the

00:05:53.700 --> 00:05:57.320
true rotation rate times some of
the data that you're generating.

00:05:57.320 --> 00:05:59.710
So if you're integrating this data,
you're going to have some fraction that

00:05:59.720 --> 00:06:01.210
could be greater than or less than one.

00:06:01.220 --> 00:06:04.750
What that means for you,
if you're integrating this data,

00:06:04.930 --> 00:06:07.870
is you'll have an attitude
error that grows with how

00:06:07.870 --> 00:06:09.800
far the device is rotating.

00:06:09.800 --> 00:06:14.250
So the x-axis in this plot
is the amount of rotation.

00:06:15.980 --> 00:06:18.400
With the accelerometer,
if you want to measure

00:06:18.470 --> 00:06:20.880
attitude using this,
you can isolate gravity,

00:06:20.880 --> 00:06:23.440
and that'll give you two
components to attitude.

00:06:23.580 --> 00:06:27.400
It'll tell you how the device is
tilted with respect to gravity.

00:06:27.600 --> 00:06:30.800
But it can't measure any sort
of rotation around gravity.

00:06:30.870 --> 00:06:34.160
Anything that doesn't cause gravity,
as seen by the device,

00:06:34.190 --> 00:06:37.210
to change won't be picked up.

00:06:37.710 --> 00:06:41.710
The other challenges are,
if you do want to use

00:06:41.710 --> 00:06:44.930
this to measure gravity,
you'll have to apply some filtering.

00:06:45.090 --> 00:06:50.210
You have to use a low-pass filter to
isolate gravity from user acceleration.

00:06:50.370 --> 00:06:53.460
Now,
the more heavily you low-pass filter,

00:06:53.550 --> 00:06:55.690
the more latency you'll
introduce in your data.

00:06:55.820 --> 00:06:57.890
So there are some drawbacks to this.

00:06:58.000 --> 00:07:01.640
If you're interested in the user
acceleration or shaking component

00:07:01.800 --> 00:07:04.650
to the accelerometer data,
you'll have to use a high-pass

00:07:04.650 --> 00:07:06.270
filter to isolate that.

00:07:06.720 --> 00:07:11.410
Now, the magnetometer is arguably
the most challenging sensor to

00:07:11.410 --> 00:07:13.680
work with on mobile devices.

00:07:13.760 --> 00:07:18.980
It's susceptible to not just
interference caused by the device itself,

00:07:18.980 --> 00:07:22.000
so electronics within the
device turning on and off,

00:07:22.000 --> 00:07:27.360
or distortions to magnetic fields
caused by other metals in the device,

00:07:27.400 --> 00:07:31.680
but it's also susceptible to
interference from objects in the

00:07:31.690 --> 00:07:33.890
real world external to the device.

00:07:34.010 --> 00:07:36.640
So normally when you use this,
what you really care about

00:07:36.750 --> 00:07:40.200
is measuring the magnetic
field generated by the Earth.

00:07:40.200 --> 00:07:43.550
Unfortunately, that's very,
very small compared to the

00:07:43.670 --> 00:07:46.780
fields that are generated by a
lot of really common objects,

00:07:46.780 --> 00:07:50.980
like computers and
refrigerators and power lines.

00:07:51.330 --> 00:07:55.980
So the solution to a lot of these
challenges is to use all three

00:07:56.020 --> 00:07:58.620
sensors in tandem with each other.

00:07:58.860 --> 00:08:02.390
And we provide algorithms to
do just that in Core Motion.

00:08:02.510 --> 00:08:05.340
We call the output of these
algorithms device motion,

00:08:05.420 --> 00:08:08.830
and you can get,
among other things from them,

00:08:09.040 --> 00:08:11.970
full three-dimensional attitudes,
so how the device is tilted,

00:08:11.970 --> 00:08:15.010
as well as whether it's facing north,
south, east, west.

00:08:15.280 --> 00:08:21.250
And that attitude is very responsive to
changes in it because of the gyroscope.

00:08:21.950 --> 00:08:27.110
So now that you've gotten an overview
of what's available in Core Motion,

00:08:27.250 --> 00:08:30.620
let's go through the basics
of how to use Core Motion.

00:08:30.810 --> 00:08:34.640
So your main control center
for Core Motion is an object

00:08:34.640 --> 00:08:36.640
called CM Motion Manager.

00:08:36.750 --> 00:08:40.160
And this is how you will tell
Core Motion which types of

00:08:40.160 --> 00:08:42.920
data you'd like to receive,
as well as how you will

00:08:42.920 --> 00:08:46.560
start and stop updates,
and tell Core Motion how often you'd

00:08:46.570 --> 00:08:49.830
like to update different types of data.

00:08:50.390 --> 00:08:54.300
Core Motion will send different
types of sensor data to your

00:08:54.300 --> 00:08:56.860
application in different objects.

00:08:56.860 --> 00:08:59.800
So there's an object of call-- excuse me.

00:08:59.870 --> 00:09:04.740
There's class CM accelerometer data that
incorporates the raw accelerometer data,

00:09:04.850 --> 00:09:08.050
CM gyro data for the raw gyro data,
CM magnetometer for the

00:09:08.050 --> 00:09:11.030
raw magnetometer data,
and CM device motion for the

00:09:11.030 --> 00:09:14.860
sensor fusion or device motion
data that we talked about.

00:09:14.860 --> 00:09:19.700
Now, a big part of CM device motion is
a property of type CM attitude,

00:09:19.700 --> 00:09:21.980
which contains this
three-dimensional attitude.

00:09:22.110 --> 00:09:25.430
And we'll spend a lot of time
later on talking about that.

00:09:26.150 --> 00:09:29.940
So there are two methods to
retrieving data from Core Motion,

00:09:29.960 --> 00:09:31.080
push and pull.

00:09:31.250 --> 00:09:34.460
With push,
you need to provide an NSOperationQueue

00:09:34.460 --> 00:09:36.180
and a block to Core Motion.

00:09:36.410 --> 00:09:39.270
And then Core Motion,
whenever a sample of data

00:09:39.290 --> 00:09:43.040
comes in for your app,
will execute a new instance of that

00:09:43.570 --> 00:09:45.760
block in that NSOperationQueue.

00:09:46.000 --> 00:09:48.990
With pull,
all you have to do is periodically ask

00:09:49.160 --> 00:09:53.360
CM Motion Manager for the latest sample
of data that you're interested in.

00:09:53.400 --> 00:09:57.790
And this is often done when your view is
updated within a CA DisplayLink callback,

00:09:57.900 --> 00:10:00.620
for instance, in a game.

00:10:01.340 --> 00:10:05.030
So there are some trade-offs to
these two different approaches.

00:10:05.030 --> 00:10:09.200
With Push, you've got the advantage that
you never miss a sample of data.

00:10:09.200 --> 00:10:13.180
If we get 10 samples of data for the
sensor that are destined for your app,

00:10:13.430 --> 00:10:15.770
then you will get all
10 of those samples.

00:10:17.160 --> 00:10:20.700
A big disadvantage is that there
is increased overhead to using

00:10:20.700 --> 00:10:22.160
this over pulling for data.

00:10:22.160 --> 00:10:24.910
And oftentimes,
especially if you have a very

00:10:24.910 --> 00:10:29.410
interactive application such as a game,
if your app gets a little bit behind

00:10:29.410 --> 00:10:32.990
and can't keep up with the high
rate of data that's coming at it,

00:10:33.080 --> 00:10:35.880
really your best bet is to
just drop a few samples,

00:10:35.880 --> 00:10:37.740
cut your losses, and catch up.

00:10:37.820 --> 00:10:41.230
So for these reasons,
we recommend this predominantly

00:10:41.230 --> 00:10:43.060
for data collection apps.

00:10:43.060 --> 00:10:46.260
Now,
pulling for data is a lot more efficient.

00:10:47.160 --> 00:10:49.920
And then oftentimes,
there is actually less code required,

00:10:49.920 --> 00:10:54.160
particularly if you already have
a periodic event coming in that

00:10:54.160 --> 00:10:55.580
determines when you need data.

00:10:55.580 --> 00:11:00.430
A disadvantage is that if you don't
already have such an event coming in,

00:11:00.460 --> 00:11:05.080
then you may need to set up an additional
timer upon which you'll pull for data.

00:11:05.080 --> 00:11:08.800
But despite this, we recommend this for
most apps and games,

00:11:08.800 --> 00:11:11.700
definitely any interactive applications.

00:11:13.560 --> 00:11:15.400
Let's talk about threading for a moment.

00:11:15.400 --> 00:11:19.230
So Core Motion creates its own
thread to do two big things.

00:11:19.400 --> 00:11:22.120
One is to handle raw
data from the sensors,

00:11:22.120 --> 00:11:24.940
and then the other thing is
to run these device motion

00:11:24.960 --> 00:11:26.890
or sensor fusion algorithms.

00:11:27.010 --> 00:11:31.600
So what that means for your apps is that
Core Motion will never do any of its

00:11:31.600 --> 00:11:34.090
own processing on your threads at all.

00:11:34.230 --> 00:11:37.270
The only thing that will execute
on your threads is exactly

00:11:37.270 --> 00:11:39.510
what you want to execute.

00:11:40.500 --> 00:11:41.680
So how do you use Core Motion?

00:11:41.790 --> 00:11:43.570
Well, there are three big steps.

00:11:43.740 --> 00:11:45.130
First step is setup.

00:11:45.270 --> 00:11:47.300
Second step is retrieving data.

00:11:47.310 --> 00:11:49.090
And the third step is cleanup.

00:11:49.170 --> 00:11:50.400
Let's walk through those.

00:11:50.400 --> 00:11:54.540
Now, in this example,
let's say that we're interested in

00:11:54.540 --> 00:11:57.400
pulling for raw accelerometer data.

00:11:57.400 --> 00:12:00.400
So to setup, we'll first need to create a
CM Motion Manager instance,

00:12:00.400 --> 00:12:02.400
as you see there.

00:12:02.650 --> 00:12:04.550
Next step,
we always want to check to make

00:12:04.770 --> 00:12:07.570
sure that the data that we're
interested in is available on

00:12:07.580 --> 00:12:09.400
the platform we're running on.

00:12:09.400 --> 00:12:12.050
So we're interested in
accelerometer data now,

00:12:12.050 --> 00:12:16.390
so we'll check CM Motion Manager's
"Is Accelerometer Available" property.

00:12:16.400 --> 00:12:19.730
And there are corresponding
properties for gyro data,

00:12:19.730 --> 00:12:22.400
magnetometer data, and device motion.

00:12:22.510 --> 00:12:26.340
And as always, if the data that we're
interested in is not available,

00:12:26.340 --> 00:12:28.140
we want to fail gracefully.

00:12:28.390 --> 00:12:31.040
The next step is to set the
desired update interval.

00:12:31.250 --> 00:12:33.440
So in this case,
we'll say that we're interested

00:12:33.440 --> 00:12:35.290
in 60 hertz accelerometer data.

00:12:35.390 --> 00:12:39.800
So we'll set the accelerometer
update interval property to 1/60.

00:12:39.850 --> 00:12:43.700
And again, there are corresponding update
interval properties for gyro data,

00:12:43.700 --> 00:12:46.800
magnetometer data, and device motion.

00:12:46.810 --> 00:12:51.280
The final step in setup is to start the
actual data that we're interested in.

00:12:51.330 --> 00:12:55.080
So here, since we're pulling for data,
all we'll do is call start

00:12:55.130 --> 00:12:56.800
accelerometer updates.

00:12:56.860 --> 00:12:59.330
That will cause Core Motion to
turn on the accelerometer and

00:12:59.630 --> 00:13:03.300
start retrieving data in the
background and caching it for us.

00:13:03.310 --> 00:13:05.140
And then we'll just pull
when we're interested.

00:13:05.550 --> 00:13:09.690
Now, if we wanted to have
Core Motion push each sample to us,

00:13:09.790 --> 00:13:13.300
then we could have called start
accelerometer updates to queue

00:13:13.300 --> 00:13:17.700
with handler and pass that
NSOperation queue and block.

00:13:18.810 --> 00:13:21.700
The next step is to retrieve
data when we're interested.

00:13:21.700 --> 00:13:24.260
So here we're looking
for accelerometer data.

00:13:24.420 --> 00:13:28.760
So all we'll do is examine the
accelerometer data property of our

00:13:29.180 --> 00:13:33.520
motion manager whenever we're interested,
and that'll contain the latest

00:13:33.520 --> 00:13:36.770
cached sample that we've
gotten from the sensors.

00:13:36.980 --> 00:13:40.250
And again,
there are corresponding properties

00:13:40.250 --> 00:13:44.150
for the latest sample of gyro data,
magnetometer data,

00:13:44.150 --> 00:13:46.530
and device motion data if you've
turned on those types of data.

00:13:46.930 --> 00:13:48.510
So the final step is to clean up.

00:13:48.710 --> 00:13:51.680
We always want to do this
when we're done with sensors.

00:13:51.680 --> 00:13:55.070
That'll allow Core Motion to actually
turn off the relevant chips if

00:13:55.070 --> 00:13:57.940
they're not being used anymore,
and will ultimately save

00:13:57.940 --> 00:13:59.320
your users some battery.

00:13:59.430 --> 00:14:02.240
So here we'll call stop
accelerometer updates,

00:14:02.300 --> 00:14:06.320
and there are corresponding stop methods
for the other types of data as well.

00:14:06.380 --> 00:14:09.980
And then we'll go ahead and release
our motion manager instance.

00:14:10.140 --> 00:14:12.300
So just to recap,
there are two methods to

00:14:12.300 --> 00:14:15.540
receiving data from Core Motion,
push and pull.

00:14:15.600 --> 00:14:19.240
All processing is done on
Core Motion's own thread.

00:14:19.290 --> 00:14:21.220
There are three steps
to using Core Motion,

00:14:21.310 --> 00:14:23.800
set up, retrieve data, and clean up.

00:14:23.820 --> 00:14:26.260
With that,
I would like to invite my colleague,

00:14:26.260 --> 00:14:28.800
Xiaoyuan Tu,
on stage to walk you through the steps

00:14:28.800 --> 00:14:33.910
of modifying an application that uses
the existing UI kit accelerometer API to

00:14:33.910 --> 00:14:36.340
use Core Motion for accelerometer data.

00:14:36.390 --> 00:14:37.930
Xiaoyuan?

00:14:42.720 --> 00:14:45.130
Thank you, Chris.

00:14:45.140 --> 00:14:49.640
In this demo, we're going to do a
simple exercise together.

00:14:49.640 --> 00:14:55.060
We're going to modify an existing
sample app to use Core Motion.

00:14:55.060 --> 00:14:57.940
This app is called Accelerometer Graph.

00:14:57.940 --> 00:15:01.200
Many of you may be familiar with it.

00:15:01.200 --> 00:15:06.940
It plots a three-axis
accelerometer value over time.

00:15:06.940 --> 00:15:11.620
And this app has been
there since iOS 2.0.

00:15:11.620 --> 00:15:17.490
It's a little outdated now,
in that it uses UIKit to

00:15:17.510 --> 00:15:23.740
access the accelerometer data,
which is a deprecated method now.

00:15:23.740 --> 00:15:28.760
The new and proper way to
access all motion sensor-related

00:15:28.920 --> 00:15:31.960
features is Core Motion.

00:15:32.010 --> 00:15:37.270
So adopting Core Motion allows
you to take advantage of all the

00:15:37.350 --> 00:15:43.370
additional motion features that are
to do-- not only with accelerometer,

00:15:43.510 --> 00:15:49.540
but also the gyroscope, the magnetometer,
and all the cool stuff that are based

00:15:49.670 --> 00:15:55.600
on fusing all three sensors together,
like what Chris has just told you about.

00:15:55.610 --> 00:16:00.370
And as you will soon see,
it's very straightforward and

00:16:00.370 --> 00:16:02.980
simple to use Core Motion.

00:16:02.980 --> 00:16:06.200
In a nutshell, it's a win-win situation.

00:16:06.200 --> 00:16:11.090
And if you have code that still uses
UIKit to access accelerometer data--

00:16:11.370 --> 00:16:14.980
It's high time to switch to Core Motion.

00:16:15.630 --> 00:16:18.370
Okay, so let's begin.

00:16:18.680 --> 00:16:21.980
Actually, before that,
I'd like to walk you

00:16:21.980 --> 00:16:29.840
through some deprecated data
structures that were in UIKit.

00:16:29.920 --> 00:16:34.820
When you make the switch
from UIKit to Core Motion,

00:16:34.820 --> 00:16:40.620
you want to update these data structures
to their Core Motion counterpart.

00:16:40.620 --> 00:16:47.570
So the first one you want to
update is UI accelerometer object.

00:16:47.680 --> 00:16:55.700
Its shiny new counterpart in
Core Motion is CM Motion Manager.

00:16:55.980 --> 00:16:59.730
That allows you to access all
the other features as well.

00:16:59.940 --> 00:17:07.680
So to borrow a Chinese phrase,
means you're switching

00:17:07.730 --> 00:17:09.770
from a BB gun to a cannon.

00:17:12.200 --> 00:17:17.400
The second one, UI acceleration,
is a data structure that holds

00:17:17.520 --> 00:17:19.730
the three accelerometer values.

00:17:19.730 --> 00:17:27.300
The new data structure in
Core Motion is CM accelerometer

00:17:27.630 --> 00:17:32.210
data that not only holds the three
access accelerometer data values,

00:17:32.210 --> 00:17:36.210
but also the timestamp of the sample,
which is actually really

00:17:36.510 --> 00:17:37.710
important for many apps.

00:17:39.220 --> 00:17:45.110
The third one is UI accelerometer value,
which is a type def.

00:17:45.190 --> 00:17:49.150
Now it's simply double,
and that's all you need to update,

00:17:49.480 --> 00:17:52.070
switching from UIKit to Core Motion.

00:17:52.080 --> 00:17:56.330
Okay, let's now do some coding.

00:17:56.330 --> 00:17:57.220
Super.

00:17:57.220 --> 00:17:58.180
Great.

00:17:58.180 --> 00:18:00.800
So it's already loaded.

00:18:01.190 --> 00:18:02.070
Magical.

00:18:02.070 --> 00:18:04.720
Accelerometer graph.

00:18:05.840 --> 00:18:11.030
So to use Core Motion,
the first step to do is to add the

00:18:11.160 --> 00:18:14.120
Core Motion framework to your project.

00:18:14.170 --> 00:18:20.990
So click on the project.

00:18:20.990 --> 00:18:20.990
Sorry, here.

00:18:26.290 --> 00:18:33.950
You go to build faces and find link
binary with libraries and click on that.

00:18:34.040 --> 00:18:39.400
And that shows you all the
frameworks that's already included.

00:18:39.400 --> 00:18:43.150
And you want to add the
Core Motion framework,

00:18:43.150 --> 00:18:44.920
click on plus sign.

00:18:44.920 --> 00:18:48.910
And that will give you a pull-down
menu that shows you all the available

00:18:48.910 --> 00:18:51.020
frameworks that you can add.

00:18:51.060 --> 00:18:56.140
So I'm just going to go
ahead and type Core Motion.

00:18:56.200 --> 00:18:57.200
Thank you.

00:18:59.830 --> 00:19:01.760
Okay, let's find it.

00:19:01.760 --> 00:19:03.140
There you go.

00:19:03.140 --> 00:19:04.950
Add.

00:19:05.270 --> 00:19:07.680
Now it's added there.

00:19:07.770 --> 00:19:08.690
Great.

00:19:08.850 --> 00:19:09.800
Simple.

00:19:09.950 --> 00:19:18.610
The second step to do is to import
the Core Motion header file,

00:19:19.420 --> 00:19:24.110
and we're going to add
that to the prefix file,

00:19:24.110 --> 00:19:24.110
which is here.

00:19:24.720 --> 00:19:25.540
All right.

00:19:25.540 --> 00:19:30.070
We're going to add--
let's make a space for it.

00:19:35.810 --> 00:19:37.640
Let's drag it here.

00:19:37.640 --> 00:19:39.740
There you go.

00:19:39.740 --> 00:19:43.350
Import Core Motion, coremotion.h.

00:19:44.000 --> 00:19:44.510
Simple.

00:19:44.760 --> 00:19:47.600
That's two steps you need to do.

00:19:48.050 --> 00:19:52.440
First, add the Core Motion framework,
and then import the header.

00:19:52.440 --> 00:19:56.500
Now we're ready to go
actually modify some code.

00:19:56.940 --> 00:19:59.380
There are basically three things to do.

00:19:59.380 --> 00:20:06.580
The first is to insert some new code
that does the setup of Core Motion,

00:20:06.580 --> 00:20:11.870
retrieve the accelerometer data, use it,
and then clean up.

00:20:11.960 --> 00:20:19.120
The second thing to do is to remove
or comment out the deprecated

00:20:19.120 --> 00:20:21.580
stuff that used to be in there.

00:20:21.580 --> 00:20:25.910
And the third one is to go
through your code and find those

00:20:26.230 --> 00:20:30.940
deprecated data structures that
I just showed you and update them

00:20:31.050 --> 00:20:33.420
to their Core Motion counterparts.

00:20:33.420 --> 00:20:37.780
So let's do that.

00:20:37.860 --> 00:20:43.250
So the first thing to do,
we want to declare the

00:20:43.330 --> 00:20:47.340
Core Motion CM Manager instance.

00:20:47.340 --> 00:20:52.140
We're going to do that in the
main view controller header file.

00:20:54.760 --> 00:20:56.700
We're going to do that here.

00:20:56.710 --> 00:20:58.290
Main View Controller.

00:20:58.340 --> 00:20:59.860
Make a space for it.

00:21:00.380 --> 00:21:01.930
And...

00:21:05.500 --> 00:21:11.100
[Transcript missing]

00:21:11.970 --> 00:21:16.650
And the old,
deprecated one that we were using

00:21:16.650 --> 00:21:20.170
is this UI accelerometer object.

00:21:20.490 --> 00:21:21.440
We find it here.

00:21:21.530 --> 00:21:24.370
Let's just comment that out.

00:21:24.950 --> 00:21:31.400
Okay, now we've declared the
Motion Manager instance.

00:21:31.400 --> 00:21:35.330
Let's go to the implementation.

00:21:36.130 --> 00:21:42.870
In here, we just need to make
changes to three places.

00:21:43.370 --> 00:21:47.450
The first one is in viewDidLoad.

00:21:47.670 --> 00:21:54.460
In that function, we'd like to go ahead
and set up Core Motion.

00:21:54.610 --> 00:22:02.940
So let's go here and drag
that code snippet here.

00:22:04.470 --> 00:22:11.430
Okay, let's actually go through line
by line this code snippet here.

00:22:11.730 --> 00:22:18.840
The first line, as you can see,
we allocate that motion manager instance,

00:22:19.060 --> 00:22:23.370
and then we set the

00:22:24.680 --> 00:22:29.530
Accelerometer update interval
to K update frequency,

00:22:29.530 --> 00:22:33.060
which is instantly set to 60.

00:22:33.410 --> 00:22:41.070
So we set a 60 hertz interval,
a 60 hertz update frequency.

00:22:41.240 --> 00:22:45.260
And the cert line here,
we're going to call start

00:22:45.260 --> 00:22:49.650
accelerometer update to Q,
which is a push method to

00:22:49.860 --> 00:22:53.120
get the accelerometer data.

00:22:53.790 --> 00:22:57.890
Because this is essentially
a data collection app,

00:22:58.040 --> 00:22:59.580
we don't want to miss any samples.

00:22:59.580 --> 00:23:03.400
So after that,
we turn on the accelerometer

00:23:03.410 --> 00:23:04.820
and ask it to update.

00:23:04.890 --> 00:23:11.180
Then if the view is not paused,
let's go ahead and retrieve those

00:23:11.270 --> 00:23:14.770
accelerometer values to use them.

00:23:15.040 --> 00:23:18.610
That's showing this block of code.

00:23:18.690 --> 00:23:20.080
All right.

00:23:20.160 --> 00:23:26.820
And actually here,
you can see the UI accelerometer

00:23:26.900 --> 00:23:32.430
objects that were now obsolete,
well, deprecated.

00:23:32.490 --> 00:23:37.090
So let's go ahead and comment those out.

00:23:40.070 --> 00:23:41.000
All right.

00:23:41.120 --> 00:23:50.110
So the next function we want
to add the cleanup to is the

00:23:50.110 --> 00:23:56.120
pairing function viewDidUnload.

00:23:56.120 --> 00:23:57.270
That's where we want to put our code,
insert our code to clean up Core Motion.

00:23:58.040 --> 00:24:01.900
So let's drag this code snippet here.

00:24:01.940 --> 00:24:04.050
Very simple, only two lines.

00:24:04.330 --> 00:24:09.320
The first one is to tell the
accelerometer to stop updates,

00:24:09.320 --> 00:24:11.840
so turn that off.

00:24:12.430 --> 00:24:17.290
And then the second line to
simply release Motion Manager.

00:24:18.790 --> 00:24:26.530
So we're pretty much done with
setting up and retrieving used data,

00:24:26.600 --> 00:24:29.500
and then clean up in Vue.did_unload.

00:24:29.500 --> 00:24:33.800
And we go ahead,
and that's the deprecated--

00:24:34.080 --> 00:24:37.760
method for UI accelerometer delegates.

00:24:37.820 --> 00:24:39.340
So we go ahead and comment that out.

00:24:39.350 --> 00:24:43.200
So we're essentially done.

00:24:43.200 --> 00:24:48.940
We've done the two steps,
insert code to set up Core Motion to

00:24:48.940 --> 00:24:50.760
use and then clean up.

00:24:50.760 --> 00:24:54.030
The second step is to, you know,
while you're at it,

00:24:54.260 --> 00:24:58.740
go comment out all the method and stuff.

00:24:58.740 --> 00:25:01.040
So finally,
what you really need to do is to go

00:25:01.040 --> 00:25:09.340
through the rest of your code and update
those data structure showing here,

00:25:09.340 --> 00:25:17.160
which is the UI acceleration,
change that to CM accelerometer

00:25:17.160 --> 00:25:23.480
data and UI acceleration value,
simply replace that with double.

00:25:23.480 --> 00:25:25.010
And you're done.

00:25:25.050 --> 00:25:28.320
Really simple and straightforward.

00:25:28.320 --> 00:25:33.470
So actually now let me switch two

00:25:34.500 --> 00:25:40.870
I'm going to use the iPad to show you
the accelerometer graph app in action.

00:25:40.870 --> 00:25:46.230
Actually,
it also shows you high-pass or low-pass

00:25:46.230 --> 00:25:50.690
filtered accelerometer value as well.

00:25:50.740 --> 00:25:56.320
With that,
I'll pass the ring back to Chris.

00:26:03.680 --> 00:26:04.600
Thanks, Xiaoyuan.

00:26:04.600 --> 00:26:05.600
Well, that was easy.

00:26:05.600 --> 00:26:09.460
You guys are all now experts
in using CM Motion Manager.

00:26:09.620 --> 00:26:12.090
So let's get into the juicy stuff now.

00:26:12.240 --> 00:26:20.490
Let's talk about device motion,
and we'll talk along the way about

00:26:20.490 --> 00:26:20.490
a lot of the new stuff that we've
added in Core Motion in iOS 5.

00:26:21.100 --> 00:30:22.100
[Transcript missing]

00:30:23.140 --> 00:30:29.060
The first new reference frame that we
have in iOS 5 is almost not really a new

00:30:29.060 --> 00:30:35.770
reference frame as a new way of turning
on additional correction in Core Motion.

00:30:35.780 --> 00:30:41.300
So it's called CM Attitude Reference
Frame X Arbitrary Corrected Z Vertical.

00:30:41.300 --> 00:30:44.710
Now, again,
this is the same as the previous frame

00:30:44.760 --> 00:30:50.120
in that you have no control over where
your X and Y reference frame axes point.

00:30:50.920 --> 00:30:56.190
But the big difference is that we will
also turn on the magnetometer in addition

00:30:56.200 --> 00:31:00.960
to the accelerometer and gyroscope,
and use that opportunistically whenever

00:31:00.960 --> 00:31:06.500
it happens to be calibrated to correct
for any accumulation in Yaw error.

00:31:06.500 --> 00:31:10.050
So ultimately what this means
for you is that you end up with

00:31:10.050 --> 00:31:14.030
better long-term Yaw accuracy,
but because we have to turn on that

00:31:14.170 --> 00:31:18.540
additional sensor and pipe data into
the CPU and do a little bit more math,

00:31:18.600 --> 00:31:20.440
you will incur higher CPUs.

00:31:20.770 --> 00:31:22.930
So you will have a higher
CPU usage if you use this over

00:31:22.940 --> 00:31:23.820
the original reference frame.

00:31:23.850 --> 00:31:29.740
And another potential downside is if
your user is in an environment where

00:31:29.740 --> 00:31:34.640
there's a lot of variation in the
external magnetic field in space,

00:31:34.720 --> 00:31:37.220
in their vicinity,
you might be a little bit more

00:31:37.220 --> 00:31:41.590
sensitive to that with this reference
frame than the previous one.

00:31:42.820 --> 00:31:47.080
So one of the really,
really useful new reference frames,

00:31:47.150 --> 00:31:50.130
I think, especially for augmented
reality app developers,

00:31:50.130 --> 00:31:54.620
is called CM Attitude Reference
Frame X Magnetic North Z Vertical.

00:31:54.620 --> 00:31:57.430
So in this reference frame,
unlike the other ones,

00:31:57.590 --> 00:32:01.930
you're actually guaranteed that your
reference frame's x-axis will be pointing

00:32:02.090 --> 00:32:05.590
in the direction of magnetic north,
or to be more precise,

00:32:05.590 --> 00:32:10.480
in the direction of the projection of
magnetic north onto the horizontal plane.

00:32:10.930 --> 00:32:13.100
And then, of course,
your y-axis will just complete a

00:32:13.100 --> 00:32:15.800
right-handed coordinate system,
as always.

00:32:15.910 --> 00:32:20.070
Now,
there are some drawbacks to using this.

00:32:20.300 --> 00:32:24.080
The main one is that, you know,
in order to actually know where

00:32:24.080 --> 00:32:27.920
magnetic north is to define your
reference coordinate system,

00:32:27.990 --> 00:32:31.300
the magnetometer has to be calibrated,
which may require the

00:32:31.300 --> 00:32:34.420
user to take some action,
as if you've ever used, you know,

00:32:34.420 --> 00:32:39.020
Compass Mode in Maps or the
Compass app you may have seen.

00:32:39.020 --> 00:32:43.510
Core Motion has the ability to
display the same Compass calibration

00:32:43.900 --> 00:32:46.780
HUD that's used by the
Core Location Compass framework

00:32:46.780 --> 00:32:49.640
and any apps that use that,
if you request that we

00:32:49.640 --> 00:32:51.410
display it when necessary.

00:32:51.500 --> 00:32:54.310
So to do that,
you'll just set the "shows device

00:32:54.310 --> 00:32:58.180
movement display" to "yes" on
your CM Motion Manager instance.

00:32:58.560 --> 00:33:01.300
By default,
it's "no," so we'll never show that HUD.

00:33:01.350 --> 00:33:04.680
But if you'd like us to, set it to "yes."

00:33:05.370 --> 00:33:08.860
The final new reference frame that
we're making available in iOS 5

00:33:08.860 --> 00:33:13.750
is called CM Attitude Reference
Frame X True North Z Vertical.

00:33:13.870 --> 00:33:17.300
It's very similar to the previous one,
except your X axis will be

00:33:17.370 --> 00:33:21.200
pointing towards True North as
opposed to Magnetic North.

00:33:21.300 --> 00:33:24.620
So you might be asking yourself now,
"Hey, what's the difference between

00:33:24.630 --> 00:33:27.600
Magnetic North and True North?" Well,
I'll tell you.

00:33:27.600 --> 00:33:31.640
So Magnetic North is the direction
of the Earth's magnetic field.

00:33:31.890 --> 00:33:36.250
So it's basically, from where you are,
it's the direction to the

00:33:36.250 --> 00:33:38.700
Earth's magnetic North Pole.

00:33:38.700 --> 00:33:43.000
Unfortunately, that's distinct from the
Earth's True North Pole.

00:33:43.070 --> 00:33:46.300
And the direction to that
is given by True North.

00:33:46.370 --> 00:33:48.890
That's the direction that
we're most familiar with,

00:33:48.890 --> 00:33:52.390
and it's the reference point
that's used in all maps,

00:33:53.160 --> 00:33:53.820
basically.

00:33:54.120 --> 00:33:56.820
It's not a big deal, though,
because we can calculate

00:33:56.820 --> 00:33:58.270
this using a few things.

00:33:58.330 --> 00:34:00.100
One is Magnetic North.

00:34:00.380 --> 00:34:00.800
Wow.

00:34:00.800 --> 00:34:05.020
And the other one is a model of what's
called the Magnetic Declination,

00:34:05.020 --> 00:34:08.930
which is the difference between
True North and Magnetic North in

00:34:08.930 --> 00:34:10.800
different places of the Earth.

00:34:10.800 --> 00:34:14.510
And Core Location and now
Core Motion actually share a

00:34:14.510 --> 00:34:16.800
model of what that looks like.

00:34:16.800 --> 00:34:21.260
So if we know your approximate location,
we can look up in that model

00:34:21.260 --> 00:34:23.800
what the declination is,
where you are,

00:34:23.800 --> 00:34:27.380
and apply that to the attitude
data that we give you,

00:34:27.380 --> 00:34:29.800
so that it's referenced to
True North as opposed to Magnetic North.

00:34:29.800 --> 00:34:33.050
Now,
one complication to keep in mind here is

00:34:33.050 --> 00:34:37.800
that we do need to know your location,
obviously, to do this.

00:34:37.800 --> 00:34:41.580
So you'll have to use Core Location
to turn on location updates in

00:34:41.580 --> 00:34:43.790
order to use this reference frame.

00:34:43.800 --> 00:34:47.780
You don't have to do anything
with those location updates.

00:34:47.860 --> 00:34:49.680
Core Motion will handle
that under the hood.

00:34:49.890 --> 00:34:51.790
But your app does need to turn them on.

00:34:51.800 --> 00:34:52.440
And I should note that if the only
reason that you're turning on location

00:34:52.440 --> 00:34:53.080
updates is to use this reference frame,
you should remember that you're

00:34:53.090 --> 00:34:53.730
not going to be able to do
that without Core Location.

00:34:53.830 --> 00:34:54.800
So you don't have to do anything
with those location updates.

00:34:54.800 --> 00:34:55.800
Core Motion will handle
that under the hood.

00:34:55.800 --> 00:34:56.720
But your app does need to turn them on.

00:34:56.810 --> 00:34:57.080
And I should note that if the only
reason that you're turning on location

00:34:57.120 --> 00:34:57.370
updates is to use this reference frame,
you should remember that you're

00:34:57.380 --> 00:34:57.790
not going to be able to do
that without Core Location.

00:34:57.800 --> 00:34:59.800
So you'll have to use
this reference frame.

00:34:59.800 --> 00:35:03.110
You should request the least
accurate location updates from

00:35:03.110 --> 00:35:04.800
Core Location that you can.

00:35:04.800 --> 00:35:06.790
And this is basically to
save the user's battery.

00:35:06.800 --> 00:35:10.800
We don't need to turn on GPS or
anything like that for location here.

00:35:10.800 --> 00:35:14.800
Just very, very coarse cell accuracy
location is fine.

00:35:15.700 --> 00:35:19.570
So you probably noticed that all of
these reference frames are defined

00:35:19.570 --> 00:35:21.990
such that the z-axis is vertical.

00:35:22.200 --> 00:35:26.610
So let's go through an example to really
solidify some points that we've made.

00:35:26.890 --> 00:35:30.830
Let's say that we have an
instance of CM Motion Manager,

00:35:30.840 --> 00:35:34.580
and we grab the latest
device motion sample from it.

00:35:34.610 --> 00:35:40.330
Let's say that we grab the attitude
from that device motion instance,

00:35:40.600 --> 00:35:44.330
and we say we want it
formatted as a rotation matrix.

00:35:44.480 --> 00:35:49.010
Now, recall that this attitude gives the
rotation from the fixed reference

00:35:49.460 --> 00:35:50.820
frame to the device's frame.

00:35:50.880 --> 00:35:54.150
So if we set up our gravity
vector in our reference frame,

00:35:54.260 --> 00:35:57.880
which is always 0, 0,
minus 1 in all of these frames,

00:35:57.920 --> 00:36:01.680
then if we just multiply
that by the rotation matrix,

00:36:01.800 --> 00:36:05.640
that'll give us a very good estimate
of where gravity is pointing in

00:36:05.640 --> 00:36:07.190
the device's reference frame.

00:36:07.210 --> 00:36:08.880
Excuse me, in the device's frame.

00:36:08.910 --> 00:36:12.030
Now, you don't actually have
to do this math yourself.

00:36:12.380 --> 00:36:16.960
Core Motion-- CM Device Motion has
another property called gravity,

00:36:16.960 --> 00:36:19.890
which we'll talk about now, which,
when you request it,

00:36:19.910 --> 00:36:22.110
will basically do that math for you.

00:36:22.350 --> 00:36:27.960
So gravity is of type CM acceleration,
and there's a corresponding similar

00:36:28.040 --> 00:36:31.690
property called user acceleration,
which gives an estimate of the

00:36:31.750 --> 00:36:36.140
user acceleration or shaking motion
in the device's reference frame.

00:36:36.150 --> 00:36:41.960
Both of these are stored in structs,
and the units are type G-- excuse me,

00:36:41.960 --> 00:36:43.590
the units are Gs.

00:36:43.870 --> 00:36:47.900
The next property in CM device
motion is called rotation rate.

00:36:47.900 --> 00:36:52.170
And this is essentially the best,
basically the latest sample of

00:36:52.190 --> 00:36:56.890
gyro data that we've gotten,
minus all of the calibration, excuse me,

00:36:56.890 --> 00:37:01.960
including all of the calibration
parameters that we've applied to it.

00:37:02.050 --> 00:37:04.420
So we remove bias and things like that.

00:37:04.630 --> 00:37:08.020
And this will be given to you
in units of radians per second.

00:37:08.020 --> 00:37:13.250
And if you've ever taken a physics class,
you might remember the right-hand rule.

00:37:13.830 --> 00:37:18.170
So that's what we use to determine the
direction of this rotation rate vector.

00:37:18.260 --> 00:37:20.560
So basically,
if you take your right hand and

00:37:20.560 --> 00:37:24.060
imagine curling your fingers
in the direction of rotation,

00:37:24.130 --> 00:37:27.700
the direction that your
thumb points is the direction

00:37:27.700 --> 00:37:29.900
that this vector will point.

00:37:30.670 --> 00:37:36.120
A new property in CM device motion
in iOS 5 is called magnetic field,

00:37:36.240 --> 00:37:40.600
and that basically gives our best
estimate of the direction of the

00:37:40.600 --> 00:37:44.380
Earth's magnetic field within
the device's reference frame.

00:37:44.380 --> 00:37:48.030
And it includes not just an
estimate of the field itself,

00:37:48.030 --> 00:37:51.910
but also an estimate of how
well calibrated the magnetometer

00:37:51.910 --> 00:37:53.680
is at that point in time.

00:37:54.300 --> 00:37:58.440
So the field will be stored
in units of micro Teslas in

00:37:58.440 --> 00:38:00.320
the CM magnetic field struct.

00:38:00.400 --> 00:38:04.900
And the calibration accuracy
will be given in an enum.

00:38:04.900 --> 00:38:09.090
Now, I mentioned earlier that if
you use the original reference

00:38:09.240 --> 00:38:12.870
frame that was in iOS 4,
CM attitude reference frame

00:38:12.870 --> 00:38:15.500
X arbitrary Z vertical,
we won't actually turn

00:38:15.610 --> 00:38:16.820
on the magnetometer.

00:38:16.820 --> 00:38:20.800
So if you use that reference frame,
then this calibration value

00:38:20.800 --> 00:38:23.680
will always be uncalibrated,
because there will be no

00:38:23.680 --> 00:38:24.280
data for us to work with.

00:38:24.300 --> 00:38:28.580
And again, that's really to save CPU.

00:38:30.840 --> 00:38:34.700
So let's talk about where each
of these features is available.

00:38:34.860 --> 00:38:38.700
So iPhone 4 has an accelerometer,
gyroscope, and magnetometer,

00:38:38.700 --> 00:38:41.220
so everything's available on iPhone 4.

00:38:41.420 --> 00:38:45.660
iPhone 3GS lacks a gyro,
so only the raw accelerometer and

00:38:45.660 --> 00:38:48.340
magnetometer's available on iPhone 3GS.

00:38:48.340 --> 00:38:50.800
There's no device motion or gyro data.

00:38:50.840 --> 00:38:52.990
iPad 2 is in the same boat as iPhone 4.

00:38:53.170 --> 00:38:53.840
It's great.

00:38:53.840 --> 00:38:55.320
Everything's supported.

00:38:55.430 --> 00:38:58.040
The original iPad, though,
same as iPhone 3GS.

00:38:58.080 --> 00:39:00.010
It doesn't have a gyro.

00:39:00.400 --> 00:39:02.720
The latest iPod Touch is interesting.

00:39:02.720 --> 00:39:06.480
It has an accelerometer and a gyroscope,
but no magnetometer.

00:39:06.480 --> 00:39:09.680
So you'll be able to get the raw
data from the accelerometer and gyro,

00:39:09.680 --> 00:39:12.560
and you'll be able to use
the original reference frame,

00:39:12.560 --> 00:39:16.440
CM Attitude reference frame, X arbitrary,
Z vertical, on this device,

00:39:16.440 --> 00:39:19.460
but the new reference frames
will not be available.

00:39:19.480 --> 00:39:23.150
And the third generation iPod
Touch only has an accelerometer,

00:39:23.150 --> 00:39:25.270
so that's all that's available.

00:39:25.270 --> 00:39:28.450
And of course, the simulator,
none of this is supported

00:39:28.450 --> 00:39:29.640
on the simulator.

00:39:31.330 --> 00:39:33.670
So with that,
I would like to invite Xiaoyuan

00:39:33.670 --> 00:39:37.050
back on stage to walk you through
using some of these new features

00:39:37.150 --> 00:39:38.920
of Core Motion in an application.

00:39:39.020 --> 00:39:40.000
Xiaoyuan?

00:39:40.100 --> 00:39:42.330
Thank you, Chris.

00:39:44.190 --> 00:39:48.920
As many of you know,
finding parking is a huge pain

00:39:49.270 --> 00:39:51.400
in a city like San Francisco.

00:39:51.490 --> 00:39:58.060
Wouldn't it be great if we had an
iOS app that shows you in augmented

00:39:58.120 --> 00:40:04.980
reality view where to find available
parking as you pan your device like so?

00:40:04.980 --> 00:40:09.760
We actually wrote a sample
app that did just that.

00:40:09.760 --> 00:40:13.380
It's called Park,
and Park is what I'm going

00:40:13.380 --> 00:40:14.460
to demo to you today.

00:40:14.660 --> 00:40:17.860
So that's the Park project here.

00:40:17.860 --> 00:40:23.490
This project essentially
demonstrates how to use Core Motion's

00:40:23.730 --> 00:40:27.050
True North Reference Attitude API.

00:40:27.110 --> 00:40:34.980
And it contains subclass to UIView,
which is called ARView.

00:40:34.980 --> 00:40:39.160
ARView stands for Augmented Reality View.

00:40:39.520 --> 00:40:47.490
And it displays a live camera feed
with places of interest overlaid

00:40:47.910 --> 00:40:50.560
at appropriate coordinates.

00:40:50.880 --> 00:40:56.220
And it uses core location to
determine where the user is,

00:40:56.410 --> 00:41:02.110
and it uses Core Motion to
determine where the user is facing.

00:41:02.350 --> 00:41:07.300
Okay, let's go look at this ARView class.

00:41:07.330 --> 00:41:12.930
As I said earlier,
it's a subclass to UIView,

00:41:12.930 --> 00:41:16.350
and it has a property,
an NSArray property

00:41:16.430 --> 00:41:18.950
called PlacesOfInterest.

00:41:18.980 --> 00:41:24.780
Let's go look at what is
contained in PlacesOfInterest.

00:41:25.540 --> 00:41:30.380
It's an NS object that
contains two properties,

00:41:30.520 --> 00:41:34.480
a UIView property and
a CLLocation property.

00:41:34.580 --> 00:41:40.650
And it uses these two properties to
actually render each PlaceOfInterest.

00:41:42.300 --> 00:41:43.560
Okay.

00:41:43.680 --> 00:41:48.110
Actually,
before I go into the implementation,

00:41:48.110 --> 00:41:53.270
by the way, if you want to make your
own very cool AR apps,

00:41:53.270 --> 00:41:59.700
this AR View class, there's two files,
arview.h and arview.m.

00:41:59.700 --> 00:42:06.360
You can pretty much just grab them and
drop them in your code and use as is.

00:42:06.360 --> 00:42:11.990
The entire project source
code is available to download.

00:42:13.460 --> 00:42:35.410
. After this, Chris will tell you.

00:42:35.410 --> 00:42:35.410
All right.

00:42:35.410 --> 00:42:35.410
Let's go look at the AR view.

00:42:35.410 --> 00:42:35.410
I'm not going to go through the entirety.

00:42:35.410 --> 00:42:35.410
I'm just going to go through the pieces
that are relevant to Core Motion.

00:42:35.410 --> 00:42:35.410
How you set up Core Motion to
do the AR view.

00:42:36.070 --> 00:42:41.600
There are just three functions here
that are to do with Core Motion:

00:42:41.930 --> 00:42:47.040
Start device motion, Stop device motion,
and OnDisplayLink.

00:42:47.310 --> 00:42:51.000
Let's go through each of those.

00:42:56.010 --> 00:42:58.040
Start device motion.

00:42:58.120 --> 00:42:59.330
All right.

00:42:59.730 --> 00:43:00.820
OK.

00:43:00.870 --> 00:43:06.530
In here, first, as usual,
we allocate in it a

00:43:06.530 --> 00:43:12.190
motion manager object,
and then we set the show

00:43:12.490 --> 00:43:16.800
device movement display to yes.

00:43:17.700 --> 00:43:21.390
The reason that we set that to
yes is because we need to use a

00:43:21.400 --> 00:43:26.380
true north reference attitude,
which requires that the

00:43:26.380 --> 00:43:28.470
magnetometer be calibrated.

00:43:28.500 --> 00:43:33.440
So you want to set that property
to yes to notify you in case the

00:43:33.440 --> 00:43:36.490
magnetometer isn't calibrated.

00:43:36.500 --> 00:43:40.800
It will show you the calibration
HUD so you can rotate the

00:43:40.800 --> 00:43:43.420
device around to calibrate.

00:43:44.200 --> 00:43:48.120
After that,
you set the device motion update

00:43:48.120 --> 00:43:51.200
interval again to 60 hertz.

00:43:51.200 --> 00:43:59.870
I don't know why we always say 60 hertz,
but that's a good enough frequency.

00:44:00.450 --> 00:44:05.230
Right, and the next one,
we go ahead and start device motion

00:44:05.230 --> 00:44:08.980
updates using reference frame TrueNorth.

00:44:09.070 --> 00:44:09.980
And we're done.

00:44:10.070 --> 00:44:18.080
That's all we need,
four lines to set up device motion.

00:44:18.080 --> 00:44:18.090
And then,

00:44:18.510 --> 00:44:23.250
In Stop Device Motion,
we stop device motion.

00:44:23.490 --> 00:44:28.390
The first line is to stop
device motion updates here,

00:44:28.390 --> 00:44:34.520
and we release the motion manager
to set that instance to null.

00:44:35.340 --> 00:44:40.700
That's a pair of functions
we set up and clean up.

00:44:40.870 --> 00:44:48.630
And on this Play link,
that's where we use it.

00:44:50.250 --> 00:44:51.990
Here's the function.

00:44:52.130 --> 00:44:56.800
So on display link, first of all,
we get the device motion

00:44:56.800 --> 00:45:04.160
property from the motion manager,
and we check that this is not null.

00:45:04.670 --> 00:45:10.780
The reason that we check it is
that we need core location to be

00:45:10.780 --> 00:45:15.750
available for true north reference,
and we also need the

00:45:15.750 --> 00:45:18.020
magnetometer to be calibrated.

00:45:18.170 --> 00:45:21.920
So those conditions,
if either one is not met,

00:45:22.020 --> 00:45:23.130
D would be null.

00:45:23.250 --> 00:45:26.600
So we check that both conditions are met.

00:45:26.600 --> 00:45:32.560
Then we go ahead and retrieve that
true north reference attitude in

00:45:32.560 --> 00:45:36.490
the form of a rotation matrix,
and that is R.

00:45:37.030 --> 00:45:43.480
And the next step is to call
transform from CM rotation matrix.

00:45:43.620 --> 00:45:49.930
We use that R to calculate the
view matrix for the camera.

00:45:50.240 --> 00:45:54.730
And after we update the view
matrix with our current attitude,

00:45:54.800 --> 00:46:01.870
we go ahead and call set needs display
to tell the system to render that view.

00:46:02.220 --> 00:46:08.980
Before we show you the demo,
Chris will spend the next few moments

00:46:08.980 --> 00:46:15.410
to tell you how to use Core Motion's
attitude to do camera control.

00:46:18.600 --> 00:46:20.310
Great, thanks Xiaoyuan.

00:46:20.310 --> 00:46:22.440
All right,
so let's talk about camera control.

00:46:22.560 --> 00:46:27.410
So one of the big use cases for
Core Motion that we see is just this,

00:46:27.480 --> 00:46:28.600
actually.

00:46:28.600 --> 00:46:31.640
We'll talk about two
paradigms for camera control.

00:46:32.210 --> 00:46:37.320
One is the paradigm that's used in Park,
and I like to call that

00:46:37.320 --> 00:46:38.760
camera-centered pivot.

00:46:39.260 --> 00:46:41.530
Here you have some
three-dimensional world,

00:46:41.650 --> 00:46:44.580
and the camera is at a fixed
location in that world.

00:46:44.600 --> 00:46:50.010
And then we use the attitude data
from Core Motion to simply rotate the

00:46:50.010 --> 00:46:53.310
camera around that point that it's at.

00:46:53.430 --> 00:46:55.960
So there's no translation involved,
basically.

00:46:55.990 --> 00:46:57.940
It stays at that fixed coordinate.

00:46:57.940 --> 00:47:01.900
The next paradigm I like to
call object-centered pivot.

00:47:02.150 --> 00:47:05.430
So in this paradigm,
we've got some object that's

00:47:05.430 --> 00:47:09.340
centered at the origin of our world,
and we use attitude data from

00:47:09.350 --> 00:47:14.070
Core Motion to rotate the
camera around that object,

00:47:14.190 --> 00:47:15.120
always facing it.

00:47:15.120 --> 00:47:18.470
So if you've ever seen the
Core Motion Teapot sample app,

00:47:18.470 --> 00:47:20.100
that's what it uses.

00:47:20.200 --> 00:47:23.780
And then if you saw the keynote demo
last year where Steve Jobs played

00:47:23.790 --> 00:47:26.600
a game called Blocks,
that's the paradigm that

00:47:26.600 --> 00:47:27.950
we used in that as well.

00:47:28.120 --> 00:47:32.090
So let's talk about the
math behind all those.

00:47:32.210 --> 00:47:33.120
First, some preliminaries.

00:47:33.120 --> 00:47:37.090
If you've ever used OpenGL,
this should be very familiar to you.

00:47:37.190 --> 00:47:44.320
So both paradigms for camera control
involve applying what are called rigid

00:47:44.320 --> 00:47:47.870
body transformations to the camera.

00:47:48.390 --> 00:47:53.020
And these can be described very
succinctly using a 4x4 matrix

00:47:53.100 --> 00:47:58.120
in which the top 3x3 portion
is just a rotation matrix,

00:47:58.120 --> 00:48:01.120
and the top three elements in the
rightmost column are the rotation matrix.

00:48:01.160 --> 00:48:02.040
And the top three elements in the
rightmost column are the rotation matrix.

00:48:02.350 --> 00:48:04.120
describe a translation.

00:48:04.270 --> 00:48:08.270
Now, for a rigid body transformation,
the bottom row of this matrix

00:48:08.450 --> 00:48:12.550
will always be 0001 for
reasons that we won't go into,

00:48:12.550 --> 00:48:16.800
but if you ever do a search for rigid
body transformations or homogeneous

00:48:16.800 --> 00:48:20.520
coordinates on the internet,
you'll find a lot of information on this.

00:48:20.520 --> 00:48:24.460
So how do we construct a rigid
body transformation matrix

00:48:24.460 --> 00:48:26.440
for these two paradigms?

00:48:27.040 --> 00:48:31.250
For camera-centered pivot,
let's say that the camera is fixed

00:48:31.250 --> 00:48:36.530
at position pw in world coordinates,
and let's say that we have the latest

00:48:36.540 --> 00:48:41.050
attitude estimate from core motion,
and we'll describe that

00:48:41.050 --> 00:48:43.150
using a rotation matrix,
r.

00:48:43.150 --> 00:48:47.160
Now, recall that we could get access
to that if we had a motion manager

00:48:47.160 --> 00:48:50.550
instance called motion manager
using the code that you see here.

00:48:52.350 --> 00:48:57.580
So what we'll need to do is use attitude
to transform the camera position in

00:48:57.720 --> 00:49:00.050
world coordinates to device coordinates.

00:49:00.140 --> 00:49:02.580
So to do that,
all we have to do is multiply

00:49:02.580 --> 00:49:05.820
by that rotation matrix that
we got from Core Motion.

00:49:05.820 --> 00:49:11.990
That'll give us a new vector called PDX,
PDY, PDZ, and that's the camera position

00:49:11.990 --> 00:49:13.550
in device coordinates.

00:49:13.560 --> 00:49:17.480
With that,
our 4x4 rigid body transformation

00:49:17.590 --> 00:49:21.700
matrix for the camera view
is just what you see here.

00:49:21.820 --> 00:49:25.880
It's got the attitude matrix from
Core Motion in the top left corner,

00:49:25.880 --> 00:49:29.720
and then minus one times the camera
position in device coordinates

00:49:29.860 --> 00:49:31.680
down the right-hand column.

00:49:33.250 --> 00:49:36.120
Object-centered pivot
is actually even easier.

00:49:36.120 --> 00:49:38.980
So here we have the camera
position in world coordinates

00:49:39.020 --> 00:49:43.090
described by vector PW again,
and we grab our attitude from

00:49:43.090 --> 00:49:45.450
Core Motion in rotation matrix R.

00:49:45.660 --> 00:49:47.500
We could use the same code to get that.

00:49:47.520 --> 00:49:50.640
Then our 4x4 transformation
matrix is simply,

00:49:50.640 --> 00:49:53.890
you know, that attitude matrix
in the top left corner,

00:49:54.080 --> 00:49:58.040
and then the minus 1 times the
camera position in world coordinates

00:49:58.050 --> 00:50:00.070
down the right-hand column.

00:50:00.940 --> 00:50:03.160
So with that,
I would like to show you Park.

00:50:03.230 --> 00:50:06.150
So let's go to the iPad.

00:50:07.270 --> 00:50:13.620
So here we have our augmented reality
view with locations of some pretty

00:50:13.620 --> 00:50:20.190
suspicious sounding parking lots rendered
on top of it at the appropriate location.

00:50:22.540 --> 00:50:28.860
The Bat Cave Drunken Valet
So in case you can't tell,

00:50:28.960 --> 00:50:38.300
all of these parking lot names
are fake because there really

00:50:38.300 --> 00:50:38.300
is no parking in San Francisco.

00:50:40.600 --> 00:50:43.160
So for more information,
you can contact Alan Schaffer.

00:50:43.160 --> 00:50:45.780
He's our graphics and game
technologies evangelist.

00:50:45.910 --> 00:50:49.180
Check out the event handling
guide for iOS for documentation.

00:50:49.250 --> 00:50:53.650
And our developer forums are always
a great place to post questions.

00:50:53.760 --> 00:50:57.050
If you're interested in checking
out some related sessions,

00:50:57.060 --> 00:50:58.240
they're given here.

00:50:58.260 --> 00:51:01.420
The top two are about to
take place actually now,

00:51:01.480 --> 00:51:04.430
Essential Game Technologies for iOS,
Parts 1 and 2.

00:51:04.580 --> 00:51:06.500
And the bottom two have
already taken place,

00:51:06.550 --> 00:51:08.380
so you'll have to check out the videos.

00:51:08.410 --> 00:51:09.930
Thanks.