WEBVTT

00:00:11.410 --> 00:00:13.510
Welcome to iOS Accessibility.

00:00:13.640 --> 00:00:14.790
My name is Chris Fleizach.

00:00:14.860 --> 00:00:18.710
I'm on the iOS Accessibility team,
and we have some really exciting

00:00:18.710 --> 00:00:23.330
things to talk about today for iOS 5.0.

00:00:25.530 --> 00:00:27.440
So what is accessibility?

00:00:27.610 --> 00:00:30.200
Well, at Apple,
we think about accessibility as using

00:00:30.200 --> 00:00:32.640
technology to create possibility.

00:00:32.640 --> 00:00:37.530
So that means things like adding
closed captioning to videos,

00:00:37.620 --> 00:00:42.230
allowing Braille displays to
completely control an interface.

00:00:42.740 --> 00:00:46.040
allowing use of assisted input,
and of course, there's many,

00:00:46.040 --> 00:00:48.070
many other examples.

00:00:50.560 --> 00:00:55.420
Now, in this past year,
we have just been so overwhelmed by what

00:00:55.420 --> 00:00:57.770
has gone on with accessibility on iOS.

00:00:57.810 --> 00:01:01.090
And it's been really exciting to watch.

00:01:01.100 --> 00:01:04.360
I'm proud to say that Apple has
been a part of that success,

00:01:04.360 --> 00:01:09.040
but a lot of that success has become
because of hardware manufacturers

00:01:09.630 --> 00:01:13.510
and software developers making
great products and great apps.

00:01:13.710 --> 00:01:18.040
And through that combination,
iOS has become such an indispensable

00:01:18.380 --> 00:01:20.380
tool for so many people.

00:01:20.910 --> 00:01:23.760
So,
of all the things that we've come across,

00:01:24.020 --> 00:01:27.430
I wanted to show you one example
of something that we thought was

00:01:27.430 --> 00:01:32.200
especially cool that really gets to
the core of what we mean when we say

00:01:32.200 --> 00:01:34.390
using technology to create possibility.

00:01:34.640 --> 00:01:38.910
So, I'm going to show you a short
video before we start of Joshua A.

00:01:38.910 --> 00:01:43.150
Mealy, who's a scientist at the
Smith-Kettlewell Research Institute,

00:01:43.230 --> 00:01:46.780
and he's developed something
called the Wearer Braille.

00:01:52.620 --> 00:01:53.860
Hey, I'm Josh Mealy.

00:01:53.860 --> 00:01:55.380
I'm a scientist at Smith Kettlewell.

00:01:55.380 --> 00:01:57.640
We're a research institute
in San Francisco,

00:01:57.640 --> 00:02:01.280
and we do design and development of
accessible technology for blind people.

00:02:01.280 --> 00:02:04.270
One of the things that we've
been working on is this thing

00:02:04.270 --> 00:02:06.080
that we call the Wear Braille.

00:02:06.080 --> 00:02:07.500
I'm wearing it on my hands right now.

00:02:07.500 --> 00:02:10.080
This is just a prototype
with lots of wires and stuff.

00:02:10.100 --> 00:02:13.650
But the Wear Braille is a new type
of technology that we're calling a

00:02:13.650 --> 00:02:15.880
virtual wireless Braille keyboard.

00:02:15.880 --> 00:02:19.460
What are on my fingers
are accelerometers.

00:02:19.530 --> 00:02:22.820
They detect when I tap on the tabletop.

00:02:22.880 --> 00:02:27.980
So what we can do is use the
accelerometers to detect taps,

00:02:27.980 --> 00:02:33.850
and then we use a wireless connection
to send information to a smartphone

00:02:33.880 --> 00:02:40.830
that tells the smartphone what Braille
characters and commands I've typed.

00:02:40.890 --> 00:02:43.780
So let me just pause them for a second.

00:02:43.880 --> 00:02:45.540
What they've done is develop a device.

00:02:45.900 --> 00:02:49.340
That monitors where your
fingers tap on any surface,

00:02:49.380 --> 00:02:52.780
and they can translate that
into Braille cording commands.

00:02:52.950 --> 00:02:56.670
So not only are you allowed
to type on an iPhone,

00:02:56.920 --> 00:03:00.910
but you can actually completely
control the iPhone device.

00:03:01.390 --> 00:03:07.360
Basically, we just turned on VoiceOver,
the iPhone screen reader, turned that on,

00:03:07.360 --> 00:03:12.520
and connected this device to it
as a wireless Braille device.

00:03:12.520 --> 00:03:16.060
And we can do all of the
commands and text entry that we

00:03:16.060 --> 00:03:18.440
want to using the Wear Braille.

00:03:18.440 --> 00:03:21.020
And I'll show you how we do that.

00:03:21.020 --> 00:03:24.620
So I can navigate around on my
screen with Braille commands.

00:03:24.620 --> 00:03:26.300
I can go to the next.

00:03:26.300 --> 00:03:27.070
Contacts.

00:03:27.170 --> 00:03:28.180
Calendar.

00:03:28.180 --> 00:03:29.280
Dictation.

00:03:29.280 --> 00:03:30.230
Or I can go back.

00:03:30.730 --> 00:03:34.130
Calendar, contacts, next bus.

00:03:34.900 --> 00:03:40.600
So that's a pretty cool demo of just some
of the potential that iOS has that we're

00:03:40.600 --> 00:03:43.220
really excited to see going forward.

00:03:43.690 --> 00:03:48.110
So accessibility in iOS is
all about equal access through

00:03:48.110 --> 00:03:50.000
alternative input and output.

00:03:50.140 --> 00:03:53.050
So that means we have
solutions for low vision,

00:03:53.240 --> 00:03:58.670
blindness, hearing impairments,
and motor and physical disabilities.

00:03:59.780 --> 00:04:05.700
So a lot of these new settings
are where the other settings are.

00:04:05.720 --> 00:04:08.880
In the Settings app,
you go to General Accessibility,

00:04:08.920 --> 00:04:12.860
and now there's almost three
screens full of options.

00:04:12.900 --> 00:04:15.920
As usual, we still have VoiceOver,
the best screen reader

00:04:15.920 --> 00:04:17.090
for a mobile device.

00:04:17.350 --> 00:04:20.580
System Zoom is great for
magnification purposes,

00:04:20.590 --> 00:04:24.310
and Large Text is a godsend
for those of us who can't stand

00:04:24.390 --> 00:04:26.550
the tiny text and messages.

00:04:26.980 --> 00:04:29.610
But we've also added things
like speak selection,

00:04:29.610 --> 00:04:33.450
so that you can go to any area in
the system that allows selection

00:04:33.450 --> 00:04:36.170
and then have it spoken back to you.

00:04:36.690 --> 00:04:40.810
We've added custom vibrations so
that someone can assign a specific

00:04:40.870 --> 00:04:43.510
vibration pattern to a contact.

00:04:44.000 --> 00:04:49.210
LED flash for alerts will flash the torch
on the back of the device when an alert

00:04:49.360 --> 00:04:50.940
comes in if you're on the lock screen.

00:04:51.130 --> 00:04:55.010
Great way to be notified
of something happening.

00:04:55.190 --> 00:04:58.930
We've added a left/right
balance for stereo control.

00:04:59.900 --> 00:05:04.060
Assistive Touch allows adaptive
hardware to be connected to an iOS

00:05:04.060 --> 00:05:06.710
device to completely control it.

00:05:07.360 --> 00:05:10.800
And there's an ability to route
incoming calls to a specific place.

00:05:10.800 --> 00:05:13.560
So when you answer a phone call,
you can decide should it

00:05:13.620 --> 00:05:17.630
automatically go to speakerphone
or to your Bluetooth headset.

00:05:18.610 --> 00:05:22.180
So I wanted to give you a short
demo of a few of these features

00:05:22.210 --> 00:05:27.080
because we think they're really cool,
and you may not have seen them yet.

00:05:27.320 --> 00:05:31.280
So first up is Speak Selection.

00:05:31.440 --> 00:05:35.470
So I've already enabled
Speak Selection in Settings,

00:05:35.470 --> 00:05:36.820
General, Accessibility.

00:05:37.060 --> 00:05:39.500
And you can set the
speaking rate there as well.

00:05:39.540 --> 00:05:42.050
And then once I come to
something like Notes,

00:05:42.220 --> 00:05:45.100
for example, I can select some text.

00:05:45.260 --> 00:05:47.340
And there's now a speak bubble.

00:05:47.370 --> 00:05:49.120
Once I speak, press that.

00:05:49.180 --> 00:05:52.380
Comes with innovative new features that
make it easier for people with mobility,

00:05:52.420 --> 00:05:54.730
hearing, vision,
and cognitive disabilities

00:05:54.770 --> 00:05:56.580
to get the most-- Great.

00:05:56.690 --> 00:05:58.180
So that just works.

00:05:58.300 --> 00:06:01.330
But Speak Selection is a
little bit smarter than that.

00:06:01.550 --> 00:06:06.740
Say you speak more than one language,
but you run in English all the time.

00:06:06.870 --> 00:06:09.570
Speak Selection will
even be able to detect--

00:06:09.990 --> 00:06:11.460
What language it should speak.

00:06:11.580 --> 00:06:14.100
Formado por Desconcejales
del Partido Popieler,

00:06:14.190 --> 00:06:17.180
nueve de bchicaxt,
uno del psoe y uno de actua.

00:06:17.250 --> 00:06:19.680
Los o... Great.

00:06:19.830 --> 00:06:21.610
So...

00:06:25.120 --> 00:06:27.320
So next up is custom vibrations.

00:06:27.370 --> 00:06:31.690
And the genesis for custom
vibrations is that if you're hearing,

00:06:31.690 --> 00:06:34.560
you can assign a ringtone to a contact.

00:06:34.830 --> 00:06:37.280
When that person calls,
you hear that ringtone, and you know,

00:06:37.380 --> 00:06:39.120
I'm not going to pick up this call.

00:06:39.190 --> 00:06:42.460
But if you're hearing impaired,
you don't get that same

00:06:42.460 --> 00:06:43.790
level of granularity.

00:06:43.960 --> 00:06:46.410
So we thought, how can we solve this?

00:06:46.500 --> 00:06:48.640
Well,
we can add custom vibration patterns.

00:06:48.720 --> 00:06:52.180
So once you enable this
feature in Accessibility,

00:06:52.240 --> 00:06:53.810
you can go to Contacts.

00:06:53.950 --> 00:07:00.320
And when you edit a contact,
there's now a section for vibration.

00:07:01.060 --> 00:07:03.580
And there's some defaults
that you can select,

00:07:03.730 --> 00:07:06.990
but what's really exciting is that
you can create your own pattern.

00:07:07.100 --> 00:07:10.760
And all you have to do is
just start tapping here,

00:07:10.820 --> 00:07:13.960
and the longer you hold down,
the longer the vibration.

00:07:14.010 --> 00:07:15.600
The shorter that you hold down,
the shorter.

00:07:15.600 --> 00:07:16.600
You can stop it.

00:07:16.600 --> 00:07:18.090
You can even replay it if you want.

00:07:18.130 --> 00:07:22.390
And then when you're ready, save it,
give it a name.

00:07:23.910 --> 00:07:26.980
And now that vibration pattern
is going to be used whenever that

00:07:26.980 --> 00:07:29.810
person calls you or FaceTimes you.

00:07:35.280 --> 00:07:40.040
All right, so next up,
the last demo is AssistiveTouch.

00:07:40.060 --> 00:07:42.960
And AssistiveTouch is something
that we're really excited about,

00:07:43.040 --> 00:07:45.200
because we think it's going to
level the playing field for a

00:07:45.200 --> 00:07:48.840
whole new group of users and
bring them into the iOS community.

00:07:49.020 --> 00:07:54.640
So what I have here is a Dynamic Controls
DX2 control system with iPortal.

00:07:54.740 --> 00:07:56.920
And this is what it
looks like in the field.

00:07:57.090 --> 00:08:01.020
And so Dynamic Controls is the
world's leading manufacturer of

00:08:01.020 --> 00:08:05.100
electronic controls for motorized
wheelchairs and scooters.

00:08:05.170 --> 00:08:08.470
And they've been kind enough
to modify their iPortal system

00:08:08.770 --> 00:08:10.370
to work with AssistiveTouch.

00:08:10.380 --> 00:08:12.000
So let's see if this works.

00:08:12.160 --> 00:08:16.620
So the first thing you'll notice is
that I now have a finger on the screen.

00:08:16.720 --> 00:08:20.410
And the finger allows me to do
everything that I would want to do,

00:08:20.410 --> 00:08:24.290
which is hover around and
wait until I touch something.

00:08:24.370 --> 00:08:30.680
So for example,
I can go to Photos and press that.

00:08:31.510 --> 00:08:35.500
with the button that I have,
open up photos,

00:08:35.550 --> 00:08:39.380
and it's sending these exact same
touch events that will be generated

00:08:39.380 --> 00:08:41.800
as if you actually touch the screen.

00:08:42.180 --> 00:08:42.930
So that's pretty cool.

00:08:43.000 --> 00:08:46.090
I can get around, I can touch.

00:08:46.230 --> 00:08:48.450
But obviously that's not
going to get me too far,

00:08:48.580 --> 00:08:52.490
so we need a way to drive
the rest of the iOS device.

00:08:52.630 --> 00:08:57.930
And when we say complete control of iOS,
we mean complete control.

00:08:58.020 --> 00:09:02.490
So I can bring up a menu and have access
to all the things that you can do if

00:09:02.490 --> 00:09:05.570
you were physically holding this device.

00:09:06.000 --> 00:09:09.390
So for example, I can go to Device.

00:09:09.470 --> 00:09:12.520
I can press the volume up or volume down.

00:09:12.820 --> 00:09:15.020
I can mute or unmute the device.

00:09:15.280 --> 00:09:21.800
I can even rotate the screen to
whatever orientation I want to.

00:09:24.240 --> 00:09:27.620
Likewise, you can press the home
button to get back out,

00:09:27.620 --> 00:09:30.620
and the menu disappears automatically,
because you know after

00:09:30.690 --> 00:09:32.170
you press the home button,
you're probably going to

00:09:32.170 --> 00:09:35.040
want to do something else.

00:09:35.290 --> 00:09:36.870
That covers a lot of interaction.

00:09:37.120 --> 00:09:40.430
You can access all the
features of the device.

00:09:40.560 --> 00:09:44.070
But we realize iOS is not
just about pressing buttons

00:09:44.070 --> 00:09:46.090
and touching with one finger.

00:09:46.300 --> 00:09:50.380
You also need a way to
do multi-finger gestures.

00:09:50.890 --> 00:09:53.730
We have a gestures menu
where I can select,

00:09:53.920 --> 00:09:59.100
for example, three fingers and get the
standard layout for three fingers.

00:09:59.240 --> 00:10:01.890
And, for example,
if I do a three-finger double tap,

00:10:02.030 --> 00:10:03.730
we all know that activates zoom.

00:10:04.000 --> 00:10:07.500
So I can drive zoom with
this if I wanted to.

00:10:09.320 --> 00:10:14.420
And so that's going to give me
access to sort of standard layout.

00:10:14.800 --> 00:10:18.420
But we know that we can't possibly
predict all the variations that

00:10:18.520 --> 00:10:20.930
apps come up with for gestures.

00:10:21.090 --> 00:10:24.630
So there's a way for you
to add your own gesture.

00:10:25.060 --> 00:10:28.100
And then once you do that,
it sort of populates this menu.

00:10:28.230 --> 00:10:31.400
And we've added some ones
in automatically by default.

00:10:31.590 --> 00:10:34.480
So Pinch allows you to
obviously pinch in and out.

00:10:34.580 --> 00:10:37.530
And we'll have some other built-in
ones so that you can drive all the

00:10:37.530 --> 00:10:39.460
standard gestures that you want to do.

00:10:39.620 --> 00:10:43.310
So that is AssistiveTouch.

00:10:44.730 --> 00:10:48.030
We think it's going to be really
powerful and enable a lot more

00:10:48.030 --> 00:10:50.700
people to start using iOS.

00:10:50.700 --> 00:10:54.820
So for the rest of the talk today,
it's mainly focused on

00:10:54.820 --> 00:10:56.880
making your apps accessible.

00:10:56.880 --> 00:10:59.540
And when we say make
your apps accessible,

00:10:59.540 --> 00:11:03.340
what we're really talking about is make
sure your apps work well with voiceover.

00:11:03.360 --> 00:11:07.700
And voiceover is sort of a unique
case because it requires the

00:11:07.840 --> 00:11:11.610
participation of app developers
to make it a great experience.

00:11:11.610 --> 00:11:15.040
There's system-wide accessibility
features like custom vibrations and

00:11:15.040 --> 00:11:16.800
system zoom that work everywhere.

00:11:16.880 --> 00:11:18.460
They don't really require
any other interaction.

00:11:18.460 --> 00:11:22.700
But to make voiceover work well,
we need app developers to make sure

00:11:22.700 --> 00:11:24.430
their apps work with voiceover.

00:11:24.590 --> 00:11:29.170
So we're going to talk about how to use
the UI Accessibility API to do this by

00:11:29.630 --> 00:11:32.410
looking at some of the basic attributes,
some of the new things we've added,

00:11:32.560 --> 00:11:35.860
and some really cool API if
your app is of a specific kind.

00:11:35.860 --> 00:11:40.560
And then finally, we're going to finish
with accessibility apps,

00:11:40.560 --> 00:11:43.450
or apps that are designed for
users with specific needs.

00:11:43.460 --> 00:11:44.820
Thanks.

00:11:46.870 --> 00:11:49.030
So what is UI Accessibility?

00:11:49.050 --> 00:11:51.040
How does it actually work?

00:11:51.170 --> 00:11:57.040
Well, VoiceOver is running on the system,
and it needs to ask your app a question.

00:11:57.310 --> 00:11:59.160
For example,
what is the element at this point?

00:11:59.220 --> 00:12:03.240
So that VoiceOver can touch somewhere
and then find out what is there.

00:12:03.270 --> 00:12:07.150
So to ask that question,
UI Accessibility gathers up the

00:12:07.150 --> 00:12:10.670
relevant information from your app,
like what is the label,

00:12:10.850 --> 00:12:14.770
what is the frame of this object,
and then sends that back to VoiceOver so

00:12:15.020 --> 00:12:16.780
that VoiceOver can output it to your app.

00:12:17.380 --> 00:12:18.540
So what is UI Accessibility?

00:12:18.550 --> 00:12:19.260
How does it work?

00:12:19.260 --> 00:12:21.180
Well, VoiceOver can also be
used to create a text,

00:12:21.310 --> 00:12:23.430
and it can be used to create
text in an alternative manner.

00:12:23.430 --> 00:12:26.060
And that means something like using
synthesized speech to speak it,

00:12:26.060 --> 00:12:28.260
or maybe send it to a Braille
display to have it Brailled.

00:12:28.260 --> 00:12:30.260
We can even draw a bounding
box on the screen so that you

00:12:30.260 --> 00:12:31.980
can see where this element is.

00:12:32.290 --> 00:12:37.120
So all of this really illustrates
this alternative input and output.

00:12:37.200 --> 00:12:40.670
VoiceOver is all about driving the
interface in an alternative way so they

00:12:40.670 --> 00:12:44.160
can output things in an alternative way.

00:12:45.130 --> 00:12:47.740
So the good news about
adding accessibility to

00:12:47.760 --> 00:12:50.000
your app is that it's easy.

00:12:50.080 --> 00:12:53.990
A lot of it's going to come for free
if you use UIKit standard controls.

00:12:54.270 --> 00:12:57.990
And most of the time,
you just have to add labels.

00:12:59.390 --> 00:13:02.250
So the core of the
API is about attributes,

00:13:02.380 --> 00:13:05.260
and attributes convey
information to VoiceOver.

00:13:05.320 --> 00:13:08.920
VoiceOver can then transform that
into whatever means it needs to.

00:13:08.970 --> 00:13:11.100
So for example,
say we have an image view,

00:13:11.240 --> 00:13:15.390
we can set the accessibility label on
that image view so that VoiceOver knows

00:13:15.740 --> 00:13:19.820
to speak Apple logo instead of just
speaking the image name or some other

00:13:19.820 --> 00:13:22.590
random data that may not be appropriate.

00:13:24.700 --> 00:13:29.010
So the two most important
attributes in Accessibility are

00:13:29.010 --> 00:13:31.700
answer two fundamental questions.

00:13:31.700 --> 00:13:35.600
Can VoiceOver touch this element,
or can VoiceOver use this element?

00:13:35.630 --> 00:13:37.970
And how does VoiceOver speak
this element?

00:13:38.170 --> 00:13:42.120
And they're answered with
isAccessibilityElement,

00:13:42.120 --> 00:13:46.720
where you return yes if you want
VoiceOver to see this element,

00:13:46.770 --> 00:13:50.950
and accessibilityLabel,
where you return a string that

00:13:50.950 --> 00:13:51.410
adequately describes what this object is.

00:13:52.180 --> 00:13:55.860
So with those two attributes,
two lines of code most of the time,

00:13:55.930 --> 00:13:59.200
your app is going to
become 80% accessible.

00:14:00.940 --> 00:14:02.290
There's some other
accessibility attributes.

00:14:02.340 --> 00:14:05.440
I'm not going to cover them all,
but some other useful ones.

00:14:05.440 --> 00:14:08.420
Accessibility hint,
an optional string that allows

00:14:08.420 --> 00:14:11.250
you to provide a little bit more
information about what to do or

00:14:11.290 --> 00:14:13.160
how to interact with an object.

00:14:13.330 --> 00:14:16.980
And accessibility traits,
which define the role, the state,

00:14:17.100 --> 00:14:18.830
the behavior of an object.

00:14:19.040 --> 00:14:21.780
And accessibility traits are
a bit mask of integers so you

00:14:21.780 --> 00:14:23.390
can combine them together.

00:14:23.800 --> 00:14:26.810
So if we looked a little bit
further at accessibility traits,

00:14:26.920 --> 00:14:30.800
say we took a screen like this, and

00:14:31.410 --> 00:14:32.530
You have various things.

00:14:32.620 --> 00:14:34.900
At the top, you might have static text.

00:14:34.980 --> 00:14:38.480
Because this is an integer,
we can combine this with another

00:14:38.480 --> 00:14:41.540
trait called the summary element,
which tells VoiceOver to speak

00:14:41.650 --> 00:14:45.370
this automatically as soon
as you come into the screen.

00:14:45.960 --> 00:14:48.900
For the image in the middle,
we can use the image trait.

00:14:49.090 --> 00:14:52.680
For the button at the bottom,
we can say it's a button trait,

00:14:52.890 --> 00:14:56.350
and we can also tell VoiceOver that
this starts a media session.

00:14:56.350 --> 00:14:59.440
So that means when
VoiceOver presses this button,

00:14:59.440 --> 00:15:03.310
it should stop talking because
something's going to happen.

00:15:03.580 --> 00:15:05.740
And then finally,
the slider on the bottom

00:15:05.740 --> 00:15:09.040
gets an adjustable trait,
which informs VoiceOver that they

00:15:09.090 --> 00:15:13.080
can use this object by either
swiping up or down to alter it,

00:15:13.100 --> 00:15:16.380
and they also know that it
interacts in a little bit

00:15:16.440 --> 00:15:19.120
different way than other objects.

00:15:22.050 --> 00:15:24.130
So where do we add accessibility?

00:15:24.290 --> 00:15:28.040
Accessibility,
if you only need to change a few

00:15:28.040 --> 00:15:32.180
static values and you have a nib,
well, it can be done in the Accessibility

00:15:32.380 --> 00:15:34.740
Inspector panel in Xcode.

00:15:34.880 --> 00:15:40.010
And you'll see that there's fields
to set isAccessibilityElement.

00:15:40.510 --> 00:15:42.640
You can set the accessibility label.

00:15:42.710 --> 00:15:44.790
You can set the accessibility hint there.

00:15:44.900 --> 00:15:50.120
And then you can choose from the
smorgasbord of accessibility traits.

00:15:51.720 --> 00:15:58.290
But if your app needs a little
bit more than Xcode provides

00:15:58.320 --> 00:16:01.740
through Interface Builder,
well, we need to add stuff in code.

00:16:01.740 --> 00:16:04.200
So if your accessibility
values don't really change,

00:16:04.350 --> 00:16:06.140
they're just sort of
static and right there,

00:16:06.270 --> 00:16:07.650
well, you can use the setters.

00:16:07.930 --> 00:16:10.180
So for example, say we have a control
that's a play button.

00:16:10.260 --> 00:16:12.160
It's a play button and never changes.

00:16:12.280 --> 00:16:15.200
In that case, we set the isAccessibility
element to yes.

00:16:15.320 --> 00:16:19.180
We set accessibility label to play,
and now it's accessible.

00:16:20.310 --> 00:16:23.240
If your classes are a
little bit more dynamic,

00:16:23.240 --> 00:16:27.040
so for example,
say we have a product view that changes

00:16:27.040 --> 00:16:29.800
based on what kind of product it is,
well, in that case,

00:16:29.800 --> 00:16:33.020
we can override the class methods
to return the appropriate values.

00:16:33.020 --> 00:16:36.910
So return yes for isAccessibility
element so that VoiceOver can see it,

00:16:36.960 --> 00:16:40.200
and then return the appropriate
accessibility label.

00:16:40.390 --> 00:16:45.410
For example, depending on what we
know inside of the class,

00:16:45.410 --> 00:16:45.410
we return the right information.

00:16:47.290 --> 00:16:51.180
So accessibility attributes are
going to get us 90% of the way there

00:16:51.280 --> 00:16:54.140
to make a great accessible app.

00:16:54.370 --> 00:16:56.720
Sometimes you need to tell
VoiceOver when things happen,

00:16:56.760 --> 00:16:57.540
though.

00:16:57.540 --> 00:17:00.320
And this is where
notifications come into play.

00:17:00.320 --> 00:17:05.170
So two ones that I want to point
out are used when things change,

00:17:05.190 --> 00:17:06.070
basically.

00:17:06.070 --> 00:17:10.200
So if only a few items change,
VoiceOver needs to update itself.

00:17:10.320 --> 00:17:13.490
So for example,
say we have a table view cell,

00:17:13.490 --> 00:17:16.920
and we press the edit button,
and there's a new item

00:17:16.920 --> 00:17:18.020
in that table view cell.

00:17:18.020 --> 00:17:20.200
Well,
the whole screen hasn't really changed.

00:17:20.200 --> 00:17:21.040
It's just a few items.

00:17:21.110 --> 00:17:23.020
We need to tell
VoiceOver to update itself.

00:17:23.140 --> 00:17:26.840
We can do that with a
layout change notification.

00:17:27.030 --> 00:17:31.160
We send that,
and VoiceOver will know to reset itself.

00:17:31.370 --> 00:17:35.040
Now, when the whole screen changes,
that is a different cue

00:17:35.040 --> 00:17:36.440
for a VoiceOver user.

00:17:36.680 --> 00:17:39.420
And then when that happens,
say we select a different tab,

00:17:39.420 --> 00:17:41.900
we need to post the screen
change notification.

00:17:41.900 --> 00:17:50.510
And that will tell VoiceOver to
play a different sound,

00:17:50.620 --> 00:17:52.090
reset itself, do enough stuff to let the
user know what's going on.

00:17:52.360 --> 00:17:58.200
So we have an app here,
and let's just show what

00:17:59.180 --> 00:18:02.920
this app looks like.

00:18:03.650 --> 00:18:06.840
show it in the simulator,
get you a little sense of what

00:18:06.840 --> 00:18:08.970
it is and what we have to do.

00:18:11.230 --> 00:18:15.100
So we have an app here.

00:18:15.630 --> 00:18:19.090
Basically a table view cell,
some buttons we can press.

00:18:19.280 --> 00:18:23.100
When we select something, this comes up,
and we go back.

00:18:23.100 --> 00:18:23.970
All right, great.

00:18:24.220 --> 00:18:27.000
So we have the app running.

00:18:27.390 --> 00:18:30.300
The goal of this demo is to show you,
you know, you have an app,

00:18:30.300 --> 00:18:31.980
how do we make it accessible?

00:18:32.050 --> 00:18:35.100
Well, the first thing is we need
to test it with VoiceOver.

00:18:35.100 --> 00:18:36.210
So how am I going to do that?

00:18:36.480 --> 00:18:38.250
Well, I'm going to exit this app.

00:18:38.400 --> 00:18:42.430
I'm going to go to -- well,
I could go to settings,

00:18:42.430 --> 00:18:44.160
and I won't for now.

00:18:44.440 --> 00:18:49.890
But what I've done is I've
turned on the ability to enable

00:18:49.890 --> 00:18:49.890
VoiceOver with triple click.

00:18:50.990 --> 00:18:51.670
VoiceOver on.

00:18:51.900 --> 00:18:54.120
So I've pressed the
Home button three times,

00:18:54.120 --> 00:18:55.240
and that turns on VoiceOver.

00:18:55.240 --> 00:18:58.500
It is a great tool if you're developing
and you want to test things quickly.

00:18:58.500 --> 00:19:00.890
So, um... PhotoBove.

00:19:00.990 --> 00:19:01.890
Let's take a look at this app.

00:19:01.900 --> 00:19:02.900
Double tap to open page two of two.

00:19:02.900 --> 00:19:04.900
Accessibility Basic.

00:19:04.940 --> 00:19:05.900
So there's our app.

00:19:05.940 --> 00:19:06.900
Double tap to open.

00:19:06.900 --> 00:19:10.900
And all I've done so far is
just touch on the screen.

00:19:10.900 --> 00:19:14.000
And if you're using VoiceOver,
first thing to remember,

00:19:14.000 --> 00:19:15.890
you want to hear something, you touch it.

00:19:16.000 --> 00:19:19.900
If you want to activate it,
you need to double tap.

00:19:20.690 --> 00:19:22.240
Accessibility Basic.

00:19:22.460 --> 00:19:27.390
So VoiceOver sort of alters all the
gestures that are normally used,

00:19:27.450 --> 00:19:31.730
because we need to provide a safe
environment for the user to explore their

00:19:31.730 --> 00:19:36.240
app without worrying about activating
something or doing something bad.

00:19:36.380 --> 00:19:38.810
All right, so now we're set up,
and we're ready to test the

00:19:38.810 --> 00:19:40.230
accessibility of this app.

00:19:40.240 --> 00:19:42.340
So let's just start touching around.

00:19:42.340 --> 00:19:44.790
Button.

00:19:44.790 --> 00:19:44.790
Button.

00:19:47.000 --> 00:19:47.550
Nothing there.

00:19:47.700 --> 00:19:50.430
If I select this,
voiceover is still sort of

00:19:50.430 --> 00:19:51.650
hanging out in the background.

00:19:51.650 --> 00:19:53.300
It hasn't updated itself.

00:19:53.310 --> 00:19:54.500
Empty list.

00:19:54.530 --> 00:19:55.470
It's saying empty list.

00:19:55.520 --> 00:19:56.660
I can't touch the icon.

00:19:56.770 --> 00:19:57.950
Go back.

00:19:58.170 --> 00:20:00.700
It doesn't tell me it's a button,
anything like that.

00:20:00.900 --> 00:20:04.490
Still hanging out in the wrong place.

00:20:04.990 --> 00:20:08.090
We're going to use our knowledge that
we have gained in the past five minutes

00:20:08.290 --> 00:20:10.600
to make this into a very accessible app.

00:20:10.750 --> 00:20:12.300
So what do we have to do?

00:20:12.460 --> 00:20:16.380
Well,
let's first look at making those buttons

00:20:16.520 --> 00:20:18.900
on the side say something appropriate.

00:20:19.040 --> 00:20:22.060
So right now,
here we have our interface builder.

00:20:22.060 --> 00:20:24.890
We'll open up the inspector panel.

00:20:25.160 --> 00:20:29.730
And over here,
we see the Accessibility tab.

00:20:30.630 --> 00:20:33.410
And there's no label there
because it's just an image,

00:20:33.500 --> 00:20:35.500
so we'll need to add a label.

00:20:35.620 --> 00:20:39.000
For example,
we can say these are iPad products.

00:20:39.270 --> 00:20:41.490
Same goes for this one.

00:20:41.540 --> 00:20:44.500
This one will be iPhone products.

00:20:44.500 --> 00:20:48.860
All right, so now those have labels,
and that sort of covers what

00:20:48.860 --> 00:20:52.500
we can do with Interface
Builder through accessibility.

00:20:52.500 --> 00:20:55.500
For the rest of it,
we need to go into the code.

00:20:55.530 --> 00:20:59.490
So let's also see if we can make
these table view cells accessible.

00:20:59.520 --> 00:21:02.390
So conveniently,
there's a product table view cell,

00:21:02.500 --> 00:21:04.990
and if we look at this one,

00:21:05.340 --> 00:21:08.090
should become clear why
there's nothing spoken.

00:21:08.230 --> 00:21:11.510
It's because we have a bunch of strings,
and then we draw at a

00:21:11.510 --> 00:21:13.350
point those strings.

00:21:13.560 --> 00:21:15.940
And that's a great way to
make your app inaccessible.

00:21:16.090 --> 00:21:22.200
But we can overcome it by implementing--
I don't need to type this.

00:21:22.200 --> 00:21:26.280
I can just copy and paste--
accessibility label.

00:21:26.370 --> 00:21:28.790
So what I've done with the
accessibility label is take the

00:21:28.790 --> 00:21:33.110
strings that I have that I know about
and concatenate them with commas.

00:21:33.260 --> 00:21:35.080
That tells VoiceOver to
pause a little bit.

00:21:35.170 --> 00:21:37.900
So I'll take string one, string two,
and then the product name,

00:21:37.970 --> 00:21:39.620
and return that as accessibility label.

00:21:39.860 --> 00:21:42.120
Now VoiceOver is going to speak that.

00:21:42.680 --> 00:21:44.440
So what else did we want to do?

00:21:44.440 --> 00:21:48.600
Well, there was a big product view
that had an image of something,

00:21:48.710 --> 00:21:51.220
and that was not accessible either.

00:21:51.370 --> 00:21:55.690
So there's a big product view class,
and inside of it,

00:21:55.690 --> 00:21:57.730
we find out that there's an image view.

00:21:57.730 --> 00:22:01.300
Well,
we can make that image view accessible so

00:22:01.380 --> 00:22:04.670
that VoiceOver can touch it and speak it.

00:22:05.070 --> 00:22:11.840
So let me do that by saying product image
view is accessibility element equals yes.

00:22:12.280 --> 00:22:14.080
and set the accessibility
label to something like

00:22:14.240 --> 00:22:17.260
large iPad or large iPhone.

00:22:17.260 --> 00:22:19.150
So, that will take care of
the product view image.

00:22:19.150 --> 00:22:20.660
Now, how about that go back button?

00:22:20.660 --> 00:22:22.060
So, all it said was go back.

00:22:22.130 --> 00:22:24.040
It didn't actually say it was a button.

00:22:24.040 --> 00:22:27.300
So, making sure it's a button will
make sure that VoiceOver user

00:22:27.300 --> 00:22:28.930
knows how to interact with it.

00:22:28.930 --> 00:22:31.310
So, we can find where that label is.

00:22:31.560 --> 00:22:35.620
And if I look in the view controller,
I see we have a UI control

00:22:35.620 --> 00:22:39.480
with a bunch of things and
then a UI label inside of it.

00:22:39.860 --> 00:22:44.860
Well, let's make that control
the accessibility element.

00:22:44.860 --> 00:22:46.820
And we can do that.

00:22:47.390 --> 00:22:51.380
by overriding his accessibility element,
the accessibility label,

00:22:51.430 --> 00:22:55.170
and then set the accessibility
traits to the trait button.

00:22:55.730 --> 00:22:58.100
So let's take a look at how this works.

00:22:58.450 --> 00:23:00.270
Accessibility Basic.

00:23:00.400 --> 00:23:01.120
Double tap to open.

00:23:01.120 --> 00:23:05.530
And see what kind of damage
we've done with just adding a few

00:23:05.580 --> 00:23:07.600
simple attributes here and there.

00:23:09.950 --> 00:23:13.740
Accessibility Basic iPhone Products,
iPad Products, Button.

00:23:13.780 --> 00:23:15.040
That's speaking.

00:23:15.140 --> 00:23:18.740
Zero, Product Name, iPad, one,
Product Name.

00:23:18.810 --> 00:23:19.530
So that's working.

00:23:19.610 --> 00:23:21.480
Now if we go into it.

00:23:22.160 --> 00:23:22.910
Large iPad.

00:23:23.200 --> 00:23:23.890
Image.

00:23:24.000 --> 00:23:25.000
Go back.

00:23:25.110 --> 00:23:25.940
Button.

00:23:26.040 --> 00:23:26.450
Great.

00:23:26.630 --> 00:23:29.780
So with just a few lines of code,
we've turned this into something that

00:23:29.780 --> 00:23:33.620
was completely non-understandable to
something that's pretty accessible.

00:23:33.710 --> 00:23:36.870
So there's a few more things
that we want to do to make this

00:23:36.880 --> 00:23:39.180
into a great accessible app.

00:23:40.000 --> 00:23:43.390
One is we couldn't tell which
of the products was selected.

00:23:43.420 --> 00:23:45.390
It just said "button" for both of them.

00:23:45.490 --> 00:23:49.490
So we can use a trait
to define that behavior.

00:23:49.950 --> 00:23:54.790
So inside of our view controller,
there is an updateSelectedTrait

00:23:54.790 --> 00:23:56.820
method ready,
and I'm going to paste

00:23:57.000 --> 00:23:58.040
in what I want here.

00:23:58.180 --> 00:24:04.200
And I'm going to say my iPad button and
iPhone button have the button trait.

00:24:04.200 --> 00:24:07.700
And then depending on which is selected,
I'm going to add the

00:24:07.770 --> 00:24:09.340
selected trait to that.

00:24:09.480 --> 00:24:14.550
So by adding that information in,
I'm using the OR operator

00:24:14.640 --> 00:24:15.880
to combine those things.

00:24:15.880 --> 00:24:15.880
We can know what is selected.

00:24:17.490 --> 00:24:20.360
So finally, we need to make sure that
VoiceOver doesn't hang out in the wrong

00:24:20.360 --> 00:24:22.510
place after it goes to a new screen.

00:24:22.600 --> 00:24:25.840
And that's where we
use the notifications.

00:24:26.660 --> 00:24:29.740
So, for example,
when we did select the row,

00:24:29.740 --> 00:24:34.110
we should send a screen
change notification,

00:24:34.110 --> 00:24:36.940
because when we select that row,
we sort of transition to a new view.

00:24:36.940 --> 00:24:38.080
It's basically a new screen.

00:24:38.080 --> 00:24:41.440
So I can post a notification
with the screen change.

00:24:41.440 --> 00:24:44.860
And then finally, when we go back,
we also want to post a

00:24:45.200 --> 00:24:46.980
screen change notification.

00:24:46.980 --> 00:24:52.160
And I believe that
happens in remove overlay.

00:24:52.160 --> 00:24:54.460
So I'll post that as well.

00:24:54.460 --> 00:24:57.120
So let's give this one more run.

00:24:57.800 --> 00:24:59.720
Accessibility Basic.

00:24:59.740 --> 00:25:01.740
Double tap to open.

00:25:01.750 --> 00:25:07.140
And see how we did using just these
basic accessibility attributes.

00:25:08.930 --> 00:25:09.740
Selected.

00:25:09.830 --> 00:25:11.260
iPad product.

00:25:11.390 --> 00:25:12.480
iPhone products.

00:25:12.500 --> 00:25:13.420
Selected.

00:25:13.440 --> 00:25:14.600
iPhone products.

00:25:14.670 --> 00:25:14.800
Great.

00:25:14.960 --> 00:25:18.100
So now it tells me which one is selected,
depending on that.

00:25:18.180 --> 00:25:20.670
If I select a product name,

00:25:21.560 --> 00:25:22.460
Large iPhone.

00:25:22.500 --> 00:25:23.090
Image.

00:25:23.240 --> 00:25:23.600
Great.

00:25:23.640 --> 00:25:26.890
So VoiceOver saw that there
was a new screen change.

00:25:26.970 --> 00:25:30.380
It automatically focused on the
new element and updated itself.

00:25:30.600 --> 00:25:32.390
If I go back... Go back.

00:25:32.420 --> 00:25:33.010
Button.

00:25:33.480 --> 00:25:35.200
Three, product name.

00:25:35.250 --> 00:25:38.400
It goes back and it realizes that it
came from a certain table view cell,

00:25:38.460 --> 00:25:41.270
and it will go back to
that one automatically.

00:25:49.610 --> 00:25:51.500
You're clapping because it's that easy.

00:25:51.600 --> 00:25:55.380
That's how easy adding
accessibility is to your app.

00:25:55.380 --> 00:25:58.830
But we want to take
UI accessibility beyond so that

00:25:58.870 --> 00:26:01.290
you can use this for greatness.

00:26:01.390 --> 00:26:04.940
So apps can obviously become
accessible with just a few attributes.

00:26:05.100 --> 00:26:07.950
But if your controls go
beyond the basic controls,

00:26:08.160 --> 00:26:10.840
you realize that you need
a little bit more power.

00:26:10.840 --> 00:26:13.340
And if you've been making your
apps accessible up to now,

00:26:13.700 --> 00:26:16.930
there's some scenarios that
have been difficult to achieve.

00:26:17.020 --> 00:26:20.210
So we've added some new API in 5.0
that we think will address some of

00:26:20.460 --> 00:26:24.500
these previously challenging problems.

00:26:24.500 --> 00:26:28.910
So the first one is how do you
tell VoiceOver not to interact

00:26:28.910 --> 00:26:30.700
with something that it shouldn't?

00:26:30.780 --> 00:26:33.060
For example, you have some sort of
overlay that pops down.

00:26:33.560 --> 00:26:36.430
VoiceOver still sees the
things behind that overlay.

00:26:36.430 --> 00:26:39.970
And that's because VoiceOver gathers
all the elements on the screen and

00:26:40.260 --> 00:26:43.750
just assumes that if they're visible,
that they should be interacted with.

00:26:43.750 --> 00:26:48.490
So by using accessibility view as modal,
you can tell VoiceOver to ignore

00:26:48.960 --> 00:26:51.600
everything outside of this view.

00:26:51.600 --> 00:26:53.980
So say you have an alert that pops down.

00:26:53.980 --> 00:26:55.740
It's a child of the window.

00:26:55.790 --> 00:26:56.810
That view is modal.

00:26:56.820 --> 00:27:01.310
VoiceOver will not interact with any
of the other children of that window.

00:27:01.310 --> 00:27:05.530
The flip side of that is that you can
use accessibility elements are hidden.

00:27:05.530 --> 00:27:07.820
And what that does,
it tells VoiceOver to ignore

00:27:07.900 --> 00:27:10.770
everything in this subtree,
including the element,

00:27:10.880 --> 00:27:13.310
so that VoiceOver won't interact with it.

00:27:13.480 --> 00:27:16.220
So they're appropriate
in different situations.

00:27:16.220 --> 00:27:16.690
They're both there.

00:27:16.700 --> 00:27:17.940
Thank you.

00:27:18.800 --> 00:27:22.040
We've also added Accessibility
Activation Point.

00:27:22.170 --> 00:27:25.790
So when VoiceOver taps on an item,
it usually sends the tap point to

00:27:26.030 --> 00:27:28.040
the exact center of that object.

00:27:28.170 --> 00:27:32.380
And that is usually the best case,
but sometimes you have a control

00:27:32.410 --> 00:27:36.250
that might have a big bounding
box and a little touch area.

00:27:36.390 --> 00:27:41.930
You can control where VoiceOver touches
by using Accessibility Activation Point.

00:27:42.390 --> 00:27:45.480
Finally,
Accessibly Perform Escape allows you

00:27:45.480 --> 00:27:49.890
to implement in your app something
that's been in the system since 4.0.

00:27:49.890 --> 00:27:54.000
So a voiceover user is able to take
two fingers and do a scrub gesture,

00:27:54.000 --> 00:27:57.820
basically a horizontal back and
forth motion that is designed to

00:27:57.880 --> 00:27:59.990
get them out of some sort of state.

00:28:00.050 --> 00:28:02.830
So for example, it will hit the back
button in preferences.

00:28:02.830 --> 00:28:04.710
It will escape out of alert.

00:28:04.710 --> 00:28:07.060
So if you have some
sort of modal state up,

00:28:07.060 --> 00:28:10.630
a voiceover user can know that
they can do a two-finger scrub,

00:28:10.630 --> 00:28:12.280
and then they can get out of the state.

00:28:12.300 --> 00:28:15.890
of this whatever state they're in.

00:28:17.780 --> 00:28:23.140
So let's take a look at a
different app now that I've

00:28:23.140 --> 00:28:26.090
designed just for this purpose.

00:28:26.170 --> 00:28:29.090
It's called the Accessibility New app.

00:28:34.900 --> 00:28:42.060
And let's give this a run on our iPad.

00:28:42.310 --> 00:28:44.240
Accessibility Basic.

00:28:44.260 --> 00:28:46.160
Double tap to open.

00:28:47.350 --> 00:28:50.700
and do our accessibility audit
to see what we have to do.

00:28:50.760 --> 00:28:51.620
Accessibility new.

00:28:51.870 --> 00:28:52.700
Show grid.

00:28:53.040 --> 00:28:53.460
Button.

00:28:53.550 --> 00:28:54.110
Show grid.

00:28:54.140 --> 00:28:54.140
Button.

00:28:54.180 --> 00:28:55.760
All right,
obviously this is a very powerful app.

00:28:55.880 --> 00:28:57.160
I spent a lot of time making it.

00:28:57.280 --> 00:28:59.260
If I press this button,

00:29:08.180 --> 00:29:08.180
So,
we didn't get very far with VoiceOver.

00:29:08.180 --> 00:29:08.180
If I turn VoiceOver off,

00:29:09.380 --> 00:29:12.880
I can show this thing and then show you
what actually is supposed to happen.

00:29:12.880 --> 00:29:14.940
I can touch each one of these icons.

00:29:15.090 --> 00:29:16.250
When I do that, a little X appears.

00:29:16.290 --> 00:29:20.300
When I touch the X, it goes away.

00:29:37.710 --> 00:29:37.710
And so on.

00:29:37.710 --> 00:29:37.710
And then when I'm done with it,
I can touch out of

00:29:37.710 --> 00:29:37.710
there and it goes away.

00:29:37.710 --> 00:29:37.710
So obviously this app has been designed
to highlight the new API that we have.

00:29:37.710 --> 00:29:37.710
So your mind should be churning
away at how we can make this app

00:29:37.710 --> 00:29:37.710
accessible using some of this new API.

00:29:38.390 --> 00:29:40.220
So the first thing we'll
want to do is make sure that

00:29:40.300 --> 00:29:42.410
those icons were touchable.

00:29:42.510 --> 00:29:44.650
Right now,
VoiceOver can't even get to them,

00:29:44.860 --> 00:29:46.410
say anything about them.

00:29:46.520 --> 00:29:51.900
So inside of Accessibility New,
there's a class called Grid Panel,

00:29:51.960 --> 00:29:55.900
and here we have the controls
that are being created.

00:29:56.020 --> 00:29:58.520
So we'll make them accessible.

00:29:59.030 --> 00:30:02.660
by setting yes on accessibility element.

00:30:02.790 --> 00:30:07.540
We'll set the accessibility label
to be the index that we have,

00:30:07.660 --> 00:30:10.140
and we'll set that to be buttons.

00:30:10.290 --> 00:30:12.590
All right, so that's all basic stuff.

00:30:12.750 --> 00:30:16.300
Now, when that grid panel came down,
that's really a great case

00:30:16.300 --> 00:30:17.890
for the view is modal.

00:30:17.980 --> 00:30:18.980
The thing has come down.

00:30:19.230 --> 00:30:22.190
You're not supposed to interact
with things behind it at this point.

00:30:22.310 --> 00:30:24.900
You're only supposed to
be in this little panel.

00:30:25.030 --> 00:30:30.830
So when we show this grid, I can say,
panel accessibility view is modal.

00:30:31.040 --> 00:30:34.740
Tells VoiceOver to
stay within this panel.

00:30:36.260 --> 00:30:40.290
So another thing we want to do
is when you tap on that icon,

00:30:40.430 --> 00:30:42.200
a little X appears.

00:30:42.260 --> 00:30:44.420
When you tap on the X, it goes away.

00:30:44.550 --> 00:30:46.760
So how do we get that same behavior?

00:30:46.880 --> 00:30:49.470
So this is basically the
same scenario as on the home

00:30:49.800 --> 00:30:51.830
screen when you delete an app.

00:30:51.980 --> 00:30:54.740
You can bring that up,
and the little X box appears.

00:30:54.800 --> 00:30:58.440
And what VoiceOver does
in that case is say,

00:30:58.440 --> 00:30:59.780
delete this app.

00:31:00.230 --> 00:31:04.800
And when you tap on it,
VoiceOver touches the X button.

00:31:04.800 --> 00:31:04.800
So to do that,

00:31:05.210 --> 00:31:11.940
What we want to do is override
accessibility activation point.

00:31:13.400 --> 00:31:19.900
[Transcript missing]

00:31:20.300 --> 00:31:26.350
I'll go down to the bottom and say the
activation point of this selected icon

00:31:26.350 --> 00:31:29.330
is the same as this little close button.

00:31:29.420 --> 00:31:30.640
So it overrides that.

00:31:30.670 --> 00:31:31.900
And it also changes a label.

00:31:31.900 --> 00:31:38.860
So it tells the voiceover
user what's going on.

00:31:38.870 --> 00:31:38.980
It changes the label to
say delete selected icon,

00:31:38.980 --> 00:31:38.980
whatever it happens to be.

00:31:39.640 --> 00:31:43.380
So the flip side of that is that
we'll also want to reset it,

00:31:43.560 --> 00:31:44.590
and I already have that code.

00:31:44.700 --> 00:31:49.260
So when something else gets selected,
we can reset the accessibility label,

00:31:49.350 --> 00:31:54.210
and we can reset the other
information that's important there.

00:31:54.390 --> 00:31:58.640
So the final thing that we want to
implement before we take a look at it

00:31:58.680 --> 00:32:01.040
is how to get out of that modal panel.

00:32:01.160 --> 00:32:03.400
That thing comes down,
VoiceOver could be stuck in

00:32:03.400 --> 00:32:04.970
there if you can't get out of it.

00:32:05.130 --> 00:32:11.830
So we can use the Perform Escape gesture,
or Perform Escape API,

00:32:11.830 --> 00:32:11.830
so the VoiceOver user

00:32:12.980 --> 00:32:14.860
can do their gesture and get out of it.

00:32:14.890 --> 00:32:19.040
So I'm going to implement
Accessibility Perform Escape.

00:32:19.040 --> 00:32:20.630
I'll call whatever needs to be called.

00:32:20.860 --> 00:32:25.590
Panel should close in this example and
return yes to say that I handled it.

00:32:27.380 --> 00:32:32.120
So with those few things using
the new Accessibility API,

00:32:32.190 --> 00:32:35.380
we'll see if this app
is accessible or not.

00:32:36.970 --> 00:32:40.480
VoiceOver Accessibility
New Show Grid Button.

00:32:40.480 --> 00:32:42.230
All right.

00:32:42.890 --> 00:32:44.200
: Icon 1, button.

00:32:44.320 --> 00:32:45.100
Great.

00:32:45.100 --> 00:32:47.400
So now when we press that,
VoiceOver automatically

00:32:47.400 --> 00:32:48.800
moved into the grid.

00:32:48.810 --> 00:32:50.400
: Icon 1, icon.

00:32:50.470 --> 00:32:54.240
If I'm swiping with my
finger left to get out of it,

00:32:54.320 --> 00:32:57.640
and all I hear is this sound,
that means-- : Icon.

00:32:57.690 --> 00:32:59.400
That means I can't get out of it at all.

00:32:59.570 --> 00:33:02.970
So that's-- our view is modal, working.

00:33:03.140 --> 00:33:04.280
Now when I-- : Icon 6, button.

00:33:04.490 --> 00:33:07.150
--double tap on an
item-- : Delete icon 6.

00:33:07.310 --> 00:33:09.460
--it tells me delete icon 6 right away.

00:33:09.550 --> 00:33:11.790
If I double tap again,

00:33:12.660 --> 00:33:13.600
: Icon 1.

00:33:13.600 --> 00:33:13.600
Button.

00:33:13.600 --> 00:33:16.600
It will use that Accessibility
activation point to tap right

00:33:16.600 --> 00:33:19.580
in that little icon instead,
and send it away.

00:33:19.620 --> 00:33:20.210
: Icon 7.

00:33:20.210 --> 00:33:20.600
Button.

00:33:20.600 --> 00:33:21.600
And finally, how do I get out of it?

00:33:21.600 --> 00:33:24.600
I can use this two-finger
horizontal motion.

00:33:24.600 --> 00:33:26.530
: Show grid.

00:33:26.600 --> 00:33:26.600
Button.

00:33:26.600 --> 00:33:28.600
And it goes away automatically.

00:33:36.930 --> 00:33:38.360
So a few new APIs.

00:33:38.530 --> 00:33:42.440
They're obviously not as
intuitive as the basic APIs.

00:33:42.440 --> 00:33:46.770
That's because we've now entered
the realm of handling complex apps.

00:33:46.940 --> 00:33:50.560
And as developers make
their apps more complex,

00:33:50.620 --> 00:33:53.280
the API needs to keep up with it.

00:33:53.570 --> 00:33:56.430
I want to talk about some
app-specific API now.

00:33:56.610 --> 00:33:59.290
So not every app will
need to implement this,

00:33:59.290 --> 00:34:01.380
but if you have an app that
falls in this category,

00:34:01.380 --> 00:34:06.560
it will make VoiceOver user
very happy that they can use it,

00:34:06.580 --> 00:34:07.020
basically.

00:34:07.020 --> 00:34:13.620
So the two ones that we have
API for are for content like iBooks.

00:34:13.620 --> 00:34:16.000
So, for example,
VoiceOver works in iBooks.

00:34:16.000 --> 00:34:20.220
And then for things that
have interactive elements.

00:34:20.920 --> 00:34:22.980
So, for example, the Chinese keyboard.

00:34:23.040 --> 00:34:27.240
Very interactive VoiceOver's model
of double tapping and selecting

00:34:27.240 --> 00:34:29.260
really doesn't work well there.

00:34:30.780 --> 00:34:34.920
So we've added something called
a content reading protocol.

00:34:35.000 --> 00:34:40.460
So if your app is a magazine or a news
article or displays multi-page books,

00:34:40.460 --> 00:34:42.720
anything like this that
has long-form content,

00:34:42.720 --> 00:34:46.220
then you're able to implement this
API to get the same kind of behavior

00:34:46.220 --> 00:34:48.440
that iBooks offers to VoiceOver users.

00:34:49.700 --> 00:34:51.950
And what that means is that
VoiceOver will touch to

00:34:52.030 --> 00:34:55.400
speak every single line,
so you can get very fine granularity.

00:34:55.400 --> 00:34:58.450
It will automatically turn pages,
and you can continue

00:34:58.580 --> 00:35:01.310
reading from any line,
and it will just keep reading

00:35:01.310 --> 00:35:03.520
through the whole piece of content.

00:35:03.520 --> 00:35:06.240
So we think this will be
really useful because obviously

00:35:06.240 --> 00:35:09.110
there's a lot of magazine,
there's newsstand coming out,

00:35:09.110 --> 00:35:12.410
and we're hoping that this
will solve VoiceOver's problem.

00:35:12.420 --> 00:35:14.320
So how do we do this?

00:35:14.320 --> 00:35:17.640
Well, we implement the UI Accessibility
Reading Content Protocol.

00:35:18.360 --> 00:35:21.150
And then we have to... implement
four methods to return the data.

00:35:21.150 --> 00:35:24.650
The first one is that we
return the page content.

00:35:24.690 --> 00:35:27.800
So this provides the
whole content of the page.

00:35:27.800 --> 00:35:31.480
So VoiceOver users can just get that
whole page content and then speak it.

00:35:33.060 --> 00:35:36.200
Next, we want to return the
line number for a point.

00:35:36.420 --> 00:35:39.340
So a voiceover user can touch
wherever they are and then

00:35:39.340 --> 00:35:41.660
have that line spoken to them.

00:35:41.760 --> 00:35:43.260
So that will give a line back.

00:35:43.320 --> 00:35:45.260
And then you have to do
something with that line.

00:35:45.320 --> 00:35:47.420
For example,
you need to provide the string for

00:35:47.420 --> 00:35:51.750
that line with content for line number.

00:35:51.820 --> 00:35:55.800
And then finally,
to make sure it looks correct,

00:35:55.800 --> 00:35:59.100
we need to implement accessibility
frame for line number,

00:35:59.160 --> 00:36:03.270
which returns the bounding
box of this specific line.

00:36:03.800 --> 00:36:05.900
So that will take care of the content.

00:36:06.040 --> 00:36:09.870
We also may want to make sure that
VoiceOver can automatically turn

00:36:09.870 --> 00:36:12.300
pages as it moves through the content.

00:36:12.300 --> 00:36:15.590
So for the content view,
you can return the trait,

00:36:15.590 --> 00:36:19.870
"Trait causes page turn." And obviously,
that will tell VoiceOver to

00:36:19.950 --> 00:36:21.060
cause a page turn.

00:36:21.060 --> 00:36:23.740
How does it cause a page turn?

00:36:23.740 --> 00:36:26.660
We need to implement something
called Accessibility Scroll.

00:36:26.840 --> 00:36:29.460
And Accessibility Scroll came out in 4.3.

00:36:29.460 --> 00:36:32.640
It allows your app to do whatever
it needs to do when a VoiceOver user

00:36:32.650 --> 00:36:34.740
does a scrolling gesture.

00:36:34.740 --> 00:36:36.370
And for those of you
familiar with VoiceOver know

00:36:36.370 --> 00:36:40.810
that's a three-finger swipe,
left or right, up or down.

00:36:41.110 --> 00:36:44.580
So if you handle Accessibility
Scroll Direction Next or

00:36:44.580 --> 00:36:47.740
Scroll Direction Previous,
you can turn the page in that

00:36:48.000 --> 00:36:52.000
case and automatically allow
VoiceOver to continue reading.

00:36:53.350 --> 00:36:54.760
So I have a demo.

00:36:54.830 --> 00:36:55.090
OK.

00:36:55.240 --> 00:36:58.100
Accessibility Education Demo:
Learning to Write.

00:36:58.240 --> 00:37:00.840
So I have a book here.

00:37:00.890 --> 00:37:03.020
It was very challenging to write.

00:37:03.190 --> 00:37:05.550
And with VoiceOver on,

00:37:05.890 --> 00:37:06.800
Learning to write.

00:37:06.870 --> 00:37:07.800
Learning to write.

00:37:07.800 --> 00:37:08.800
All I can get to is this header.

00:37:08.800 --> 00:37:10.240
So we'll turn VoiceOver off.

00:37:10.650 --> 00:37:11.790
VoiceOver off.

00:37:11.810 --> 00:37:12.800
What else can this do?

00:37:12.830 --> 00:37:18.360
I can swipe my finger to go to
the next page and keep going.

00:37:18.890 --> 00:37:19.800
There's only three pages.

00:37:19.800 --> 00:37:22.780
I can go back and so on.

00:37:22.800 --> 00:37:29.790
So if we implement the right protocol,
VoiceOver is designed to make

00:37:29.790 --> 00:37:29.790
this book experience accessible.

00:37:33.000 --> 00:37:38.370
So inside of our project,
there is a book content view.

00:37:40.690 --> 00:37:43.890
And this is where we want to
implement the UI Accessibility

00:37:43.900 --> 00:37:45.400
Reading Content Protocol.

00:37:45.510 --> 00:37:47.940
So we'll add that to our header.

00:37:48.080 --> 00:37:50.390
And then inside of our class,

00:37:50.840 --> 00:37:52.780
Well,
let's just look at how this is working.

00:37:52.940 --> 00:37:58.770
So it looks like I pull out
a page out of our bundle,

00:37:58.770 --> 00:38:03.610
and then I draw the rect by
drawing every line in that page.

00:38:03.610 --> 00:38:06.110
So I separate it by new lines
and then just draw at a point.

00:38:06.170 --> 00:38:09.040
So how do we make this accessible?

00:38:09.040 --> 00:38:12.290
Well, the first thing we want to do
is return the page content.

00:38:12.290 --> 00:38:20.370
So I can do that just by getting
whatever my data model is for that page.

00:38:20.810 --> 00:38:21.700
Return that.

00:38:21.700 --> 00:38:24.600
I trim the characters just so
VoiceOver doesn't pause unnecessarily

00:38:24.600 --> 00:38:26.890
for new lines or other white space.

00:38:27.050 --> 00:38:28.900
So that's the easy one.

00:38:29.460 --> 00:38:35.440
Now we need to figure out
the line number for a point.

00:38:36.340 --> 00:38:39.570
The point is going to come in,
and it's going to be in the

00:38:39.570 --> 00:38:41.110
view space of your view.

00:38:41.120 --> 00:38:44.520
So if your view starts
at 0 and goes to 500,

00:38:44.560 --> 00:38:48.670
VoiceOver will send a point
that is between 0 and 500.

00:38:48.970 --> 00:38:53.600
And it is up to you to figure
out what line is on that point.

00:38:53.860 --> 00:38:57.090
So in this case,
I do that by taking the Y point

00:38:57.660 --> 00:38:59.540
and dividing by the line height.

00:38:59.640 --> 00:39:01.690
And that will give me the line.

00:39:01.780 --> 00:39:05.980
And as long as that is within
the number of lines that I have,

00:39:06.680 --> 00:39:09.240
I can return that line number.

00:39:09.350 --> 00:39:11.970
So that will tell VoiceOver, yes,
I have a line.

00:39:12.060 --> 00:39:17.280
Now we have to return what
kind of data is at that line.

00:39:17.590 --> 00:39:20.850
So I'm going to start with
content for line number.

00:39:20.930 --> 00:39:23.400
So I have all my lines,
and a line number comes in,

00:39:23.400 --> 00:39:25.750
and all I have to do is return.

00:39:25.700 --> 00:39:36.200
[Transcript missing]

00:39:36.810 --> 00:39:39.420
Finally,
I need to implement the frame for it.

00:39:39.530 --> 00:39:42.460
And this is the hard one.

00:39:42.460 --> 00:39:44.140
So why is it hard?

00:39:44.140 --> 00:39:46.470
It's because we need to return
a frame that VoiceOver can

00:39:46.470 --> 00:39:47.990
display in screen coordinates.

00:39:48.000 --> 00:39:51.860
So VoiceOver doesn't know that your
view starts at zero and goes to 500.

00:39:51.860 --> 00:39:55.340
It doesn't know how to turn that into
something that can display screen wide.

00:39:55.620 --> 00:39:56.940
So here's what we do.

00:39:56.940 --> 00:39:59.700
We make the frame for
what this line should be.

00:39:59.740 --> 00:40:03.320
So for example, I know it starts at five
at the X coordinate,

00:40:03.320 --> 00:40:06.610
and then five at the Y coordinate,
and then I add the line

00:40:06.610 --> 00:40:10.560
number times the line height,
and that gives me the right line.

00:40:10.560 --> 00:40:14.050
And then I use this size with
font to figure out the size.

00:40:14.050 --> 00:40:15.410
That's on NSString.

00:40:15.410 --> 00:40:16.400
Easy enough.

00:40:16.490 --> 00:40:18.690
So I have this bounding box,
and I now have this frame

00:40:19.040 --> 00:40:19.940
with inside of my view.

00:40:20.130 --> 00:40:22.450
How do I convert it to
the on-screen coordinates?

00:40:22.460 --> 00:40:25.600
And here's a little bit of
code that I copy and paste.

00:40:25.600 --> 00:40:28.650
I take the window,
convert the rec to the window,

00:40:28.650 --> 00:40:31.190
and then convert from the window to nil.

00:40:31.210 --> 00:40:34.090
And that gives me the
on-screen coordinates.

00:40:34.090 --> 00:40:37.220
Easy enough once you have
that to cut and paste.

00:40:40.170 --> 00:40:42.460
Let's take a look at how that works.

00:40:42.610 --> 00:40:43.280
Accessibility.

00:40:43.280 --> 00:40:46.980
This is an introduction page
that should be displayed first.

00:40:47.040 --> 00:40:48.400
This book is about.

00:40:48.400 --> 00:40:52.420
This is an introduction page
that should be displayed first.

00:40:52.580 --> 00:40:56.670
This book is about teaching
students how to write a letter.

00:40:56.820 --> 00:40:57.200
Great.

00:40:57.400 --> 00:41:02.040
So obviously,
I can hear the content for a line.

00:41:02.100 --> 00:41:04.180
The bounds are correct,
because I can touch around.

00:41:04.180 --> 00:41:07.060
And the page content
is returned correctly,

00:41:07.060 --> 00:41:09.230
because it spoke the whole page.

00:41:09.320 --> 00:41:12.620
Now my only problem is,
how do I turn the page?

00:41:12.620 --> 00:41:18.710
So with that,
we need to go back and look at

00:41:21.090 --> 00:41:23.100
So, I'm going to start off by
implementing Accessibility

00:41:23.100 --> 00:41:25.900
Scroll and returning the right trait.

00:41:25.910 --> 00:41:29.900
So, first thing, I'm going to return the
trait causes page turn.

00:41:30.070 --> 00:41:34.610
That will tell VoiceOver when
it gets to the end of content,

00:41:34.610 --> 00:41:35.980
turn the page.

00:41:35.980 --> 00:41:35.980
How do I turn the page?

00:41:36.160 --> 00:41:39.700
I'm going to implement
Accessibility Scroll.

00:41:39.890 --> 00:41:44.160
So for the direction next,
all I need to do is turn

00:41:44.160 --> 00:41:47.330
the page in one direction,
and then I'll post a

00:41:47.330 --> 00:41:49.240
page scroll notification.

00:41:49.390 --> 00:41:53.370
And this allows VoiceOver to know, yes,
the page has turned.

00:41:53.550 --> 00:41:55.690
I can handle direction previous as well.

00:41:55.830 --> 00:41:57.760
I'll turn the page in
the other direction,

00:41:57.850 --> 00:42:01.080
post the page scroll notification,
tells VoiceOver, page is scrolled.

00:42:02.510 --> 00:42:05.040
Okay, so let's run that.

00:42:05.090 --> 00:42:11.530
And then see if VoiceOver will scroll
the pages and read automatically.

00:42:11.650 --> 00:42:13.600
- To write a letter.

00:42:13.620 --> 00:42:15.860
- All right, so if I scroll with three
fingers left or right,

00:42:15.860 --> 00:42:17.280
it should turn the pages.

00:42:17.290 --> 00:42:20.540
- To write the letter, C,
first start at the top.

00:42:21.060 --> 00:42:23.440
Now you know how to make the letter C.

00:42:23.790 --> 00:42:25.320
There are also lowercase letters.

00:42:25.340 --> 00:42:26.020
Great.

00:42:26.020 --> 00:42:29.180
So I can turn the page
with three fingers swiping,

00:42:29.180 --> 00:42:32.040
and notice it automatically
reads as I turn the page.

00:42:32.040 --> 00:42:33.490
So that's the same behavior as iBooks.

00:42:33.490 --> 00:42:35.220
It will read the next page automatically.

00:42:35.220 --> 00:42:36.420
To write the letter.

00:42:36.420 --> 00:42:37.940
This is an introduction.

00:42:37.940 --> 00:42:38.740
To write a letter.

00:42:38.740 --> 00:42:39.880
If I start reading.

00:42:39.880 --> 00:42:40.940
To write a letter.

00:42:40.940 --> 00:42:42.410
To write the letter.

00:42:42.410 --> 00:42:42.500
C.

00:42:42.780 --> 00:42:45.150
First start at the top, then make.

00:42:45.300 --> 00:42:49.370
It will continue turning that page
automatically when I start reading all.

00:42:50.160 --> 00:42:51.590
So,

00:42:52.050 --> 00:42:53.110
Great.

00:42:53.240 --> 00:42:58.880
That is implementing the Accessibility
Reading Content Protocol to

00:42:58.940 --> 00:43:03.900
turn long-form content into
a great accessible experience.

00:43:05.550 --> 00:43:07.400
So next up is interactivity.

00:43:07.400 --> 00:43:11.330
So as you know, VoiceOver intercepts all
gestures on the screen.

00:43:11.360 --> 00:43:15.020
So it does this to provide a
safe environment for exploration.

00:43:15.020 --> 00:43:17.680
But obviously,
that's going to cause a problem when

00:43:17.680 --> 00:43:19.740
you have a very interactive element.

00:43:19.750 --> 00:43:24.260
You can't double tap and then double
tap everywhere you want to go.

00:43:24.260 --> 00:43:28.980
So we've come up with a solution
that's quite easy to implement,

00:43:28.980 --> 00:43:34.820
but can provide a very unique and
dynamic experience for a VoiceOver user.

00:43:36.420 --> 00:43:37.900
So here's what we have to do.

00:43:37.970 --> 00:43:41.850
If you have a view like this-- and I'll
show you an example in a second-- all

00:43:41.850 --> 00:43:46.540
you need to do is return Accessibility
trait allows direct interaction.

00:43:46.610 --> 00:43:50.660
And for this view, the safety net of
VoiceOver will be lifted.

00:43:50.730 --> 00:43:54.000
A VoiceOver user can switch between
exploring and interaction if they want,

00:43:54.060 --> 00:43:58.740
so they can still discover what's there,
but they can also go right through that

00:43:58.740 --> 00:44:02.410
safety net to interact with an object.

00:44:02.710 --> 00:44:12.060
So now we know how to write the letter C,
in case you've been following

00:44:12.060 --> 00:44:14.020
along on this book that I wrote.

00:44:14.500 --> 00:44:18.530
The final page is...

00:44:18.680 --> 00:44:20.600
Accessibility Education Demo.

00:44:20.600 --> 00:44:21.600
Is this thing.

00:44:21.600 --> 00:44:22.360
Learning to write.

00:44:22.360 --> 00:44:23.100
Learning to write.

00:44:23.100 --> 00:44:25.100
And with VoiceOver on,
obviously nothing happens.

00:44:25.100 --> 00:44:26.100
VoiceOver off.

00:44:26.100 --> 00:44:30.200
But with VoiceOver off,
I can do things like-- and it will

00:44:30.200 --> 00:44:32.390
tell me whether that's wrong or right.

00:44:32.600 --> 00:44:33.100
Great.

00:44:33.110 --> 00:44:36.320
So I can practice my C drawing.

00:44:36.880 --> 00:44:40.800
So how do we make that experience
accessible for a voiceover user?

00:44:40.910 --> 00:44:48.120
Obviously, this is a great case for the
direct interaction trait.

00:44:48.720 --> 00:44:52.440
So there is a quiz view in the
Accessibility Education demo,

00:44:52.580 --> 00:44:56.980
and inside of here,
we need to do a little bit of work.

00:44:58.550 --> 00:45:00.840
to make sure that this is accessible.

00:45:00.840 --> 00:45:03.850
So we'll make sure this is
an accessibility element

00:45:04.250 --> 00:45:06.240
so VoiceOver can see it.

00:45:07.160 --> 00:45:09.500
We will add an appropriate label.

00:45:09.500 --> 00:45:13.140
In this case,
I'll call it the letter practice area.

00:45:13.330 --> 00:45:16.100
We can add an accessibility hint.

00:45:16.310 --> 00:45:19.540
Practice drawing the
letter C in this area.

00:45:20.160 --> 00:45:25.600
And then we can finally add the
allows direct touch interaction.

00:45:27.710 --> 00:45:31.250
So with those things,
now VoiceOver should be able to see it.

00:45:31.360 --> 00:45:33.040
VoiceOver on.

00:45:33.160 --> 00:45:33.950
Okay.

00:45:34.080 --> 00:45:35.030
Letter practice area.

00:45:35.220 --> 00:45:36.260
So now we have our letter practice area.

00:45:36.260 --> 00:45:37.900
Practice drawing the
letter C in this area.

00:45:37.910 --> 00:45:39.660
We can practice the
letter C in this area.

00:45:39.670 --> 00:45:41.500
Letter practice area.

00:45:41.650 --> 00:45:43.800
Practice drawing the
letter C in this area.

00:45:43.950 --> 00:45:45.230
So I'm practicing.

00:45:45.610 --> 00:45:46.240
It's working.

00:45:46.340 --> 00:45:47.240
I have VoiceOver on.

00:45:47.240 --> 00:45:48.600
It's saying the right thing.

00:45:48.720 --> 00:45:51.000
There's only one more piece
to this puzzle that's missing.

00:45:51.140 --> 00:45:55.310
We need to provide direct feedback when

00:45:55.500 --> 00:46:08.300
[Transcript missing]

00:46:08.810 --> 00:46:16.250
So whenever we determine whether
it's been a success or not,

00:46:16.250 --> 00:46:16.250
we can post

00:46:16.920 --> 00:46:20.710
inside of one of these methods,
and accessibility announcement

00:46:20.730 --> 00:46:26.940
notification with the right
text that we want to speak.

00:46:26.940 --> 00:46:26.940
And now, let's go ahead and start.

00:46:28.340 --> 00:46:30.910
Once we've added that,
VoiceOver user will be able to

00:46:30.910 --> 00:46:33.800
directly interact with an object.

00:46:34.700 --> 00:46:40.700
[Transcript missing]

00:46:41.000 --> 00:46:54.200
[Transcript missing]

00:47:02.800 --> 00:47:08.580
So that's all about our Accessibility
API that we've added in 5.0.

00:47:08.580 --> 00:47:11.130
We think we're going to see a lot
of great apps come out of it now.

00:47:11.140 --> 00:47:13.600
So there's one final topic
I want to touch upon,

00:47:13.600 --> 00:47:16.740
and that is something that
we call Accessibility Apps.

00:47:16.740 --> 00:47:21.020
So these are apps that are designed
to address a specific need,

00:47:21.020 --> 00:47:25.920
and there's a growing market for these,
and they really make the iOS

00:47:25.920 --> 00:47:31.700
platform a unique and indispensable
device for people with a disability.

00:47:32.190 --> 00:47:35.790
So I want to point out two exemplary
apps that have just revolutionized

00:47:35.790 --> 00:47:37.280
a lot of people's lives.

00:47:37.280 --> 00:47:39.930
The first one is the
Looktel Money Reader app.

00:47:40.010 --> 00:47:43.800
It's just a great app that you can
point at any denomination bill,

00:47:43.950 --> 00:47:46.400
and it will tell you how much it is.

00:47:46.400 --> 00:47:48.460
So you point at a $20 bill,
it tells you it's $20.

00:47:48.460 --> 00:47:49.280
It's pretty simple.

00:47:49.280 --> 00:47:52.500
For $1.99,
it's revolutionized this field where

00:47:52.500 --> 00:47:55.870
you used to have to buy a device
that cost hundreds of dollars,

00:47:55.870 --> 00:47:58.460
carry it around,
put your money through that to

00:47:58.720 --> 00:48:00.610
figure out what you're looking at.

00:48:01.500 --> 00:48:05.730
done with an iPhone app
now for less than $2.

00:48:06.870 --> 00:48:11.750
The other app is ProLogo2Go,
and that's been designed to help

00:48:11.810 --> 00:48:15.810
people with communication disabilities
put together phrases and sentences

00:48:16.090 --> 00:48:20.210
that they need to speak and to
communicate with other people.

00:48:20.220 --> 00:48:24.190
It's been a game changer
for children and adults.

00:48:24.290 --> 00:48:27.910
It's a very powerful tool,
and I want to bring them both up

00:48:28.290 --> 00:48:33.170
because I think they exhibit a lot of
innovation and thinking outside the box

00:48:33.170 --> 00:48:36.140
for what is possible with an iOS device.

00:48:36.140 --> 00:48:40.230
And I bring them up so that we can
stimulate your minds to start thinking,

00:48:40.430 --> 00:48:43.250
how can I make an app that will
solve someone's needs in a way

00:48:43.250 --> 00:48:44.920
that will transform their life?

00:48:46.880 --> 00:48:48.930
So if you're making one
of these kinds of apps,

00:48:48.930 --> 00:48:52.680
and it's for a VoiceOver user,
there's some useful API to know.

00:48:52.800 --> 00:48:55.660
One you can know is VoiceOver running,
where the UI Accessibility

00:48:55.780 --> 00:48:57.740
is VoiceOver running.

00:48:57.910 --> 00:49:03.560
You can know where VoiceOver is
in your app by monitoring,

00:49:03.560 --> 00:49:03.560
did become focused?

00:49:04.200 --> 00:49:06.300
And then finally, as we saw,
you can use the announcement

00:49:06.300 --> 00:49:11.870
notification to tell VoiceOver to speak
a specific string at a specific time.

00:49:13.360 --> 00:49:18.000
So a few best practices to go over
when you're making your accessible app.

00:49:18.110 --> 00:49:20.740
One, try to be concise and
short with your labels,

00:49:20.800 --> 00:49:24.490
because a voiceover user has
to hear them an awful lot.

00:49:25.180 --> 00:49:27.310
Don't include the type of
information in your label.

00:49:27.600 --> 00:49:29.100
That is communicated with the trait.

00:49:29.180 --> 00:49:33.100
No need to put the word "button"
in any label that you have.

00:49:33.220 --> 00:49:35.000
And then finally,
if you're going to localize your app,

00:49:35.330 --> 00:49:38.100
make sure to localize your labels
and accessibility information,

00:49:38.230 --> 00:49:40.770
because VoiceOver speaks many languages.

00:49:42.550 --> 00:49:45.080
So we've covered a lot of stuff today.

00:49:45.170 --> 00:49:49.860
We have a lot of great features in
5.0 that we're really excited about.

00:49:49.990 --> 00:49:52.920
So the takeaway, obviously,
add accessibility to your apps.

00:49:53.080 --> 00:49:54.700
That's why you're all here.

00:49:54.700 --> 00:49:56.710
It's going to increase your user base.

00:49:56.840 --> 00:50:00.550
And if you're one of those kinds
of people who can't go to sleep

00:50:00.550 --> 00:50:04.910
unless someone tells them what a
great human being you are every day,

00:50:04.910 --> 00:50:08.630
you're going to get a lot of great
feedback from users telling you that your

00:50:08.630 --> 00:50:08.630
app really works well with VoiceOver.

00:50:09.460 --> 00:50:14.040
I also want to encourage you to think
about apps for users with specific needs.

00:50:14.140 --> 00:50:17.370
I think there's a lot of innovation
in this field that we're really

00:50:17.600 --> 00:50:21.730
excited to see what comes next,
and it really just warms the cockles

00:50:21.730 --> 00:50:26.030
of my heart every time I see a
new one of these apps comes out.

00:50:27.150 --> 00:50:30.060
So the rest of WWC is
all about accessibility.

00:50:30.240 --> 00:50:34.150
We have two more sessions,
one in the afternoon where

00:50:34.150 --> 00:50:37.560
there may be an appearance by
James Dempsey in the breakpoints.

00:50:37.560 --> 00:50:42.710
There's a web accessibility and
automation session tomorrow morning that,

00:50:43.130 --> 00:50:47.220
while early, is not early enough to be
an excuse not to attend.

00:50:47.920 --> 00:50:50.040
And if you're looking
for more information,

00:50:50.040 --> 00:50:52.900
there's a great voiceover manual
that will describe all the possible

00:50:52.900 --> 00:50:54.600
gestures you can do with voiceover.

00:50:54.600 --> 00:50:57.220
And there's programming guidelines.

00:50:57.220 --> 00:50:59.990
There's just lots of stuff on the
web about people talking about

00:50:59.990 --> 00:51:03.050
their experiences and so on,
so obviously not that hard to find.

00:51:03.980 --> 00:51:05.900
So thank you for coming out today.

00:51:05.900 --> 00:51:09.090
It's been a pleasure,
and hope to see you at the labs.