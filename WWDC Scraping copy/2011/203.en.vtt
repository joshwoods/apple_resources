WEBVTT

00:00:14.060 --> 00:00:19.880
It's a great pleasure to be here today
and introduce you guys to App Sandbox,

00:00:19.880 --> 00:00:23.910
a feature dear to my heart and the system
that we believe is the most advanced

00:00:23.910 --> 00:00:26.350
desktop security system in the world.

00:00:26.470 --> 00:00:30.680
But before I do that,
you'll have to bear with me because

00:00:30.770 --> 00:00:36.500
it's hard to appreciate just what
we're doing and how we're going about

00:00:36.600 --> 00:00:39.980
it without understanding some of the
history that's brought us to this point.

00:00:42.370 --> 00:00:44.700
If you think about
where we were yesterday,

00:00:44.730 --> 00:00:49.010
a figurative yesterday,
the first virus that ever appeared

00:00:49.260 --> 00:00:52.580
was Creeper on ARPANET in the '70s.

00:00:52.580 --> 00:00:56.560
And since then,
it's taken 30 years until in about 2004,

00:00:56.790 --> 00:01:01.060
the count of known malware
reached about 100,000.

00:01:01.300 --> 00:01:05.690
And in another four years after that,
it surpassed a million.

00:01:05.730 --> 00:01:08.890
And today,
if you talk to antivirus vendors

00:01:08.960 --> 00:01:11.330
and people that are in the
business of tracking malware,

00:01:11.560 --> 00:01:15.190
they're seeing tens and tens of thousands
of unique malware samples a day.

00:01:17.260 --> 00:01:23.600
Now, thankfully, Mac users were mostly
spared from this situation,

00:01:23.760 --> 00:01:27.400
and App Sandbox is how we'd
like to keep it that way,

00:01:27.410 --> 00:01:29.480
but I'm getting ahead of myself.

00:01:32.710 --> 00:01:38.900
In 2005, there was almost no data theft
malware that was spreading by email.

00:01:39.030 --> 00:01:41.110
This phenomenon just
didn't used to exist.

00:01:41.240 --> 00:01:43.000
There was lots of malware
spreading by email,

00:01:43.000 --> 00:01:45.960
but it was trying to do
things to your computer,

00:01:45.960 --> 00:01:47.240
not steal your data.

00:01:47.360 --> 00:01:52.100
And so, sometime in 2005,
we started seeing the first examples.

00:01:52.100 --> 00:01:54.500
The industry started seeing some
of the first examples of this.

00:01:54.600 --> 00:01:59.790
And everyone kept their eyes peeled
because the big question in the room was,

00:02:00.020 --> 00:02:01.890
how quickly would this grow?

00:02:02.810 --> 00:02:05.480
And so,
this--we had the opportunity to witness

00:02:05.570 --> 00:02:08.300
a new category of malware being created.

00:02:08.460 --> 00:02:12.330
And by 2007,
we had--the industry was basically

00:02:12.330 --> 00:02:16.070
registering over 5,000 different
kinds of samples of data theft

00:02:16.180 --> 00:02:21.600
malware that was just trying to
steal user data being sent around.

00:02:21.750 --> 00:02:26.980
And that's really sort of
shocking because the growth rate

00:02:27.100 --> 00:02:31.480
was in the hundreds and hundreds
of percent and has kept going.

00:02:31.600 --> 00:02:32.600
Okay.

00:02:34.250 --> 00:02:40.610
And you would think that maybe it was
the little guys at home that were being

00:02:40.610 --> 00:02:44.650
attacked and that if only you're serious
about protecting your networks and data,

00:02:44.650 --> 00:02:47.250
then these attacks can do nothing.

00:02:47.390 --> 00:02:49.300
But actually it's not true.

00:02:49.350 --> 00:02:53.270
No one has been able to really
keep these attacks at bay.

00:02:53.390 --> 00:02:59.490
And it's very hard to actually get a
good insight into what the situation

00:02:59.490 --> 00:03:02.670
is for governments because they tend
to be pretty secretive about it.

00:03:02.780 --> 00:03:07.180
But remarkably,
just before President Obama took office,

00:03:07.240 --> 00:03:11.280
there was a government commission
organized to write a report called

00:03:11.400 --> 00:03:15.570
a report on the cybersecurity
for the 44th presidency.

00:03:15.670 --> 00:03:21.100
And it had key people from the military,
from government, from academia,

00:03:21.100 --> 00:03:22.220
and the private sector.

00:03:22.320 --> 00:03:25.290
And they were basically trying to
make some recommendations to the new

00:03:25.290 --> 00:03:29.480
presidency about what they should
do with the cybersecurity threat.

00:03:29.640 --> 00:03:32.270
But to me, this report is fascinating
because it's public.

00:03:32.290 --> 00:03:33.570
All of you can download it.

00:03:33.810 --> 00:03:38.330
And because it actually gives a rare
glimpse into some of the kinds of

00:03:38.330 --> 00:03:44.510
attacks and some of the numbers that
the government has been experiencing.

00:03:44.650 --> 00:03:50.440
So in 2007, as an example,
the Department of Defense,

00:03:50.490 --> 00:03:53.240
Department of State,
Department of Homeland Security,

00:03:53.300 --> 00:03:56.390
Department of Commerce,
and NASA all suffered what they

00:03:56.490 --> 00:04:00.180
were called major intrusions
from unknown foreign entities,

00:04:00.180 --> 00:04:03.020
including a compromise of
the unclassified-- email

00:04:03.020 --> 00:04:04.780
of the Secretary of State.

00:04:04.900 --> 00:04:06.940
And this kept going.

00:04:06.940 --> 00:04:09.400
The Department of State has
basically gone on record as

00:04:09.400 --> 00:04:15.130
saying that they lost terabytes of
information in these intrusions.

00:04:15.160 --> 00:04:18.740
The Department of Homeland Security has
confirmed that the breaches

00:04:18.740 --> 00:04:22.870
expanded to cover the TSA.

00:04:23.080 --> 00:04:27.660
And, uh, uh, the situation at NASA was,
in fact, uh, uh, so interesting,

00:04:27.750 --> 00:04:31.200
they've actually seen
launcher designs compromised.

00:04:31.320 --> 00:04:35.160
They've imposed restrictions where
for several hours before a launch,

00:04:35.160 --> 00:04:39.510
they actually just pulled the plug
on their email system entirely.

00:04:42.340 --> 00:04:44.230
What's going on here?

00:04:44.270 --> 00:04:47.480
This is, this is, this is not good.

00:04:47.820 --> 00:04:52.060
Somehow, you know, if you,
if you think about other situations in

00:04:52.060 --> 00:04:56.120
real life that have a security component,
I think of driving because that,

00:04:56.260 --> 00:05:00.040
if you look at the statistics,
is not the safest activity.

00:05:00.040 --> 00:05:05.350
But people don't need physics degrees
to understand how to drive cars safely.

00:05:05.350 --> 00:05:09.940
And somehow it seems like users
need computer science degrees

00:05:09.940 --> 00:05:12.700
to drive their computers safely.

00:05:12.700 --> 00:05:15.750
And, you know, even that's questionable,
I, I,

00:05:15.830 --> 00:05:19.630
because lots of computer science people
don't really understand security.

00:05:19.630 --> 00:05:21.320
But how did we get here?

00:05:21.320 --> 00:05:23.280
Why is this so different?

00:05:23.820 --> 00:05:27.200
So think about where we are
with cars and car safety today.

00:05:27.200 --> 00:05:30.060
There is, before a car can be
brought to the market,

00:05:30.060 --> 00:05:34.970
there is basically mandatory
government-imposed crash testing to check

00:05:34.970 --> 00:05:38.700
what the security situation looks like.

00:05:38.940 --> 00:05:45.700
For all of the key systems involved in
controlling the engine and transmission,

00:05:45.700 --> 00:05:48.700
basically there are redundancies
in a number of cases.

00:05:48.700 --> 00:05:52.700
There are just backup computers that
can take over if anything goes wrong.

00:05:52.700 --> 00:05:56.690
And there's this big understanding
that when you have a system

00:05:56.690 --> 00:06:00.770
that's as complex and moving as
quickly as a car on the freeway,

00:06:00.890 --> 00:06:04.500
eventually with the best engineering
things can go wrong and you need to

00:06:04.500 --> 00:06:06.700
be prepared for that possibility.

00:06:06.700 --> 00:06:10.430
So, seat belts and airbags, right?

00:06:10.900 --> 00:06:12.700
Damage containment.

00:06:12.720 --> 00:06:16.890
Even if you have the best damage
avoidance systems on the market and

00:06:16.890 --> 00:06:21.700
systems that try to steer the car away
if they sensed an impending accident,

00:06:21.820 --> 00:06:24.750
ultimately accidents can
still happen and when they do,

00:06:24.750 --> 00:06:28.700
you want to have a containment
mechanism like a seat belt or an airbag.

00:06:30.130 --> 00:06:34.860
That's not the case with where we
are today with computer security.

00:06:35.080 --> 00:06:39.670
The game we're playing is essentially
the defenders have to protect 100%

00:06:39.700 --> 00:06:43.970
of the system 100% of the time,
whereas an attacker only

00:06:43.970 --> 00:06:46.430
needs one breach at one time.

00:06:46.440 --> 00:06:50.440
And when they do that,
because the industry has been

00:06:50.450 --> 00:06:53.990
emphasizing damage prevention
but not really containment,

00:06:53.990 --> 00:06:57.720
what happens is that one breach
at that one time means that it's

00:06:57.720 --> 00:06:59.720
game over and the attacker wins.

00:07:00.000 --> 00:07:01.100
.

00:07:01.660 --> 00:07:03.900
And we've done some amazing progress,
mind you,

00:07:03.900 --> 00:07:08.690
with damage prevention mechanisms,
but the containment aspect has not

00:07:08.690 --> 00:07:12.250
received nearly as much attention.

00:07:13.510 --> 00:07:18.060
So here is--if you stop and
really think about this hard,

00:07:18.250 --> 00:07:21.560
here is what I'm going to be referring
to as the unfortunate assumption,

00:07:21.560 --> 00:07:25.080
not just a unfortunate assumption,
that has dominated desktop

00:07:25.220 --> 00:07:26.600
security for decades.

00:07:26.720 --> 00:07:31.070
And the assumption is this:
every program that a user runs should run

00:07:31.070 --> 00:07:33.620
with the full privileges of that user.

00:07:33.620 --> 00:07:38.390
Or if you want to put it differently,
we should isolate different users on

00:07:38.390 --> 00:07:43.070
a system but we should not isolate
different programs by the same user.

00:07:43.070 --> 00:07:47.190
And this assumption
is really unfortunate.

00:07:47.350 --> 00:07:49.620
And if you in fact try to
figure out where it came from,

00:07:49.680 --> 00:07:51.860
it's kind of a fascinating
exercise because

00:07:53.280 --> 00:08:01.710
Uh, this model,
which was inherited in most modern

00:08:01.710 --> 00:08:01.710
operating systems from Unix,
which came out in 1971,

00:08:01.900 --> 00:08:03.990
When--when
Richard Thompson basically said,

00:08:03.990 --> 00:08:06.040
"Well, the program is the user, so,
you know,

00:08:06.040 --> 00:08:11.810
we shouldn't really distinguish there,"
1971 was seven years before we ever had

00:08:11.810 --> 00:08:15.010
an international packet switch network.

00:08:15.180 --> 00:08:18.260
It was 12 years before
we ever had a TCP/IP,

00:08:18.260 --> 00:08:22.900
wide area network, and it was 20 years
before we ever had a Web.

00:08:23.050 --> 00:08:26.560
And today,
that assumption is 40 years old.

00:08:28.080 --> 00:08:30.900
What did untrusted code mean in 1971?

00:08:30.960 --> 00:08:35.560
The words had no meaning because if
you wanted to run code on a computer,

00:08:35.560 --> 00:08:39.700
you have to physically bring it to
that computer on a punch card or later

00:08:39.790 --> 00:08:42.780
a piece of magnetic tape and run it.

00:08:43.490 --> 00:08:47.800
Today, every time you browse a website,
you're executing untrusted code.

00:08:47.860 --> 00:08:49.970
That is 40 years of

00:08:52.360 --> 00:08:57.520
We have this unfortunate assumption in
the industry about desktop security that

00:08:57.680 --> 00:08:59.960
literally predates personal computing.

00:09:00.030 --> 00:09:09.250
It is a model of sticks and
stones that we're trying to use

00:09:09.250 --> 00:09:09.250
to defend ourselves today and

00:09:10.040 --> 00:09:11.160
We need something better.

00:09:11.240 --> 00:09:15.590
We need a way to contain damage
when it happens regardless of

00:09:15.660 --> 00:09:17.760
ultimately why it happened.

00:09:17.810 --> 00:09:22.280
And not even just for malicious attacks,
because even though that's what's usually

00:09:22.390 --> 00:09:24.820
at the forefront of all of our minds,
you know,

00:09:24.940 --> 00:09:27.190
programs can just sometimes run amok.

00:09:27.350 --> 00:09:30.770
There can be unintentional,
perfectly benign coding errors

00:09:30.770 --> 00:09:34.990
and misbehavior in programs that
can still have really bad effects.

00:09:35.100 --> 00:09:40.000
And we need a way to contain the
damage that such programs can do.

00:09:41.330 --> 00:09:43.720
So, how do we make that better wheel?

00:09:43.720 --> 00:09:47.560
Well, we have a lot of experience
in the last 20 years as an

00:09:47.680 --> 00:09:49.640
industry about what doesn't work.

00:09:49.840 --> 00:09:55.120
And we know chiefly that the unfortunate
assumption of all programs running with

00:09:55.120 --> 00:09:58.150
the full user privilege doesn't work.

00:09:58.420 --> 00:10:01.450
We also know that
security UI doesn't work,

00:10:01.460 --> 00:10:05.540
and there's this great quote in politics,
which is, "If you're explaining,

00:10:05.540 --> 00:10:09.330
you're losing." And this is true
of security interfaces as well.

00:10:09.340 --> 00:10:13.520
If you have to explain to
the user how to be secure,

00:10:13.520 --> 00:10:15.320
you're losing.

00:10:17.600 --> 00:10:24.710
Here's what we show users day in
and day out as an industry and

00:10:24.710 --> 00:10:28.790
expect them to do the right thing.

00:10:32.850 --> 00:10:38.230
We're basically conditioning our
users to ignore all the security that

00:10:38.230 --> 00:10:41.370
we're trying to put in front of them.

00:10:41.810 --> 00:10:45.830
And thus far, the conditioning has
been very successful.

00:10:57.350 --> 00:11:03.950
Imagine, if you will,
that you are zipping along at

00:11:04.140 --> 00:11:08.660
The speed limit down one on one and
there's a car that starts swerving

00:11:08.660 --> 00:11:14.400
and you're about to hit them and in
your last moments before the impact,

00:11:14.730 --> 00:11:19.710
your eyes glance across the entertainment
console where there's a cheery question,

00:11:19.710 --> 00:11:22.680
"Hey, would you like us to
deploy that airbag now?

00:11:22.720 --> 00:11:26.500
Would that be okay with
you?" This is crazy.

00:11:26.520 --> 00:11:28.800
We can't keep doing this.

00:11:30.400 --> 00:11:33.920
But we've also learned
some things that do work.

00:11:33.920 --> 00:11:37.400
And chief among them is something
called the principle of least privilege,

00:11:37.400 --> 00:11:40.200
also known as the principle
of least authority,

00:11:40.200 --> 00:11:43.060
which is the idea that
when building systems,

00:11:43.080 --> 00:11:45.890
they should have no more
privilege than the amount they

00:11:45.890 --> 00:11:47.530
need to get their work done.

00:11:48.280 --> 00:11:50.070
In other words,
there shouldn't be any ambient

00:11:50.070 --> 00:11:52.440
privilege that they get just because,
for instance,

00:11:52.440 --> 00:11:54.360
they're being run by a particular user.

00:11:54.390 --> 00:12:00.380
Privilege should match what systems do
and there should not be any more of it.

00:12:01.490 --> 00:12:04.640
So it's interesting because
this--it took us some time to

00:12:04.760 --> 00:12:07.040
sort of reach this understanding.

00:12:07.040 --> 00:12:11.480
The PDP-10 actually had what was called
a high-low memory segment system,

00:12:11.480 --> 00:12:16.400
which meant that the operating system
would run independently from user code.

00:12:16.400 --> 00:12:19.040
But the feature just
wasn't in demand because,

00:12:19.040 --> 00:12:23.960
you know, the PDPs were giant computers
used by highly trained people.

00:12:23.990 --> 00:12:26.970
And for the most part,
this didn't seem very valuable,

00:12:26.970 --> 00:12:28.020
but it cost money.

00:12:28.020 --> 00:12:32.230
So in the PDP-1170, the program was gone.

00:12:32.330 --> 00:12:37.620
And Dennis Ritchie likes to tell
the story how if you were sitting

00:12:37.620 --> 00:12:42.010
in a computer lab and everyone
was using the same PDP-11,

00:12:42.010 --> 00:12:47.450
it was considered absolutely necessary as
a courtesy to others that if you compile

00:12:47.570 --> 00:12:52.790
a program and you're about to run it,
you had to yell, "A.out!"

00:12:52.950 --> 00:12:55.740
And then wait about a minute
until everyone saved their work

00:12:55.880 --> 00:12:58.660
so you could run your program,
because once you ran your program,

00:12:58.670 --> 00:13:01.050
it could potentially stomp
over all over the user,

00:13:01.100 --> 00:13:07.870
uh, the operating system and just,
you know, kill everyone's session.

00:13:07.870 --> 00:13:07.870
So,

00:13:09.360 --> 00:13:13.490
We did learn this lesson eventually
as an industry and we started

00:13:13.490 --> 00:13:15.740
separating ever more privilege.

00:13:15.970 --> 00:13:18.110
We separated kernel land and user land.

00:13:18.410 --> 00:13:23.200
We separated user land into actually
having different little user

00:13:23.200 --> 00:13:25.600
lands for each user on the system.

00:13:25.640 --> 00:13:30.760
And we've--basically the state of
the art in desktop operating systems

00:13:30.810 --> 00:13:33.170
around the time that Mac OS X,
when this NT came out,

00:13:33.300 --> 00:13:35.640
had sort of fully caught up
with this idea that at least

00:13:35.960 --> 00:13:38.360
when it comes to memory,
we should actually have

00:13:38.420 --> 00:13:40.530
some real protection there.

00:13:41.200 --> 00:13:46.710
And this story of iterations of
less and less privilege is one

00:13:46.710 --> 00:13:49.430
that repeats over the decades.

00:13:49.550 --> 00:13:52.950
So on x86,
we actually have CPU rings in hardware,

00:13:53.050 --> 00:13:56.520
and we have protected memory,
and we have separated users,

00:13:56.560 --> 00:13:59.990
and we have processes that are separated,
and processes can't look

00:14:00.050 --> 00:14:02.090
at each other's memory.

00:14:02.260 --> 00:14:06.310
A series of iterations
of reduced privilege

00:14:06.780 --> 00:14:09.860
That once we hit the process boundary,
we stopped.

00:14:09.880 --> 00:14:14.890
In other words, today,
there's really no way to,

00:14:14.900 --> 00:14:17.700
within a single process,

00:14:18.210 --> 00:14:23.830
deliver different bits of privilege
to different parts of that process.

00:14:24.010 --> 00:14:28.400
Really no mainstream computer operating
system supports anything like that.

00:14:28.510 --> 00:14:34.920
And so this is-- what this means is that
the unfortunate assumption still holds.

00:14:35.210 --> 00:14:38.900
We still have all the users'
programs running with the

00:14:39.000 --> 00:14:40.750
full privileges of that user.

00:14:40.870 --> 00:14:45.370
And the reason this is bad obviously
is because programs are growing.

00:14:45.440 --> 00:14:48.710
It means that eventually different
parts of a single program need

00:14:48.710 --> 00:14:50.380
different bits of privilege.

00:14:50.490 --> 00:14:53.750
But because there's no subdivision
of privilege within a process,

00:14:53.890 --> 00:14:58.640
ultimately if you have to give any part
of a program some amount of privilege,

00:14:58.740 --> 00:15:00.800
really the entire program has it.

00:15:00.910 --> 00:15:08.890
And this should be clear to most of you,
but it's easy to think through why

00:15:08.900 --> 00:15:12.540
it's impossible to try and separate
out privilege within a single process.

00:15:12.540 --> 00:15:16.200
Because if you're using an
unmanaged language like C,

00:15:16.300 --> 00:15:18.890
you can literally-- you can literally
construct pointers to arbitrary

00:15:18.890 --> 00:15:25.230
parts of the memory space and go do
whatever you want in that memory space.

00:15:28.520 --> 00:15:30.010
So that was yesterday.

00:15:30.160 --> 00:15:33.900
Where are we today?

00:15:33.900 --> 00:15:37.900
The Internet really changed the game
when it comes to acquiring software.

00:15:37.900 --> 00:15:42.360
We have tons and tons of software being
written by tons and tons of vendors.

00:15:42.360 --> 00:15:45.900
It's become easier than ever before
for computer users to actually

00:15:45.900 --> 00:15:48.820
download programs and run them.

00:15:48.820 --> 00:15:53.670
And computers have gradually
come to be almost always on

00:15:54.530 --> 00:16:01.020
And so the challenge of the security
industry has really become trying to

00:16:01.020 --> 00:16:05.780
isolate data between different programs
rather than trying to keep different

00:16:05.780 --> 00:16:07.940
users on the same machine isolated.

00:16:07.940 --> 00:16:13.570
In fact, a large number of machines
only ever have one user.

00:16:16.560 --> 00:16:20.000
So here is the challenge
that we have with Mac OS.

00:16:20.040 --> 00:16:23.890
It is an incredibly powerful,
incredibly rich platform.

00:16:24.010 --> 00:16:26.660
And it's a platform that has
a user experience that is

00:16:26.660 --> 00:16:29.000
centered around the file system.

00:16:29.100 --> 00:16:30.610
When you think about
how you use your Mac,

00:16:30.670 --> 00:16:34.670
you think about using Definder
to find your documents,

00:16:34.740 --> 00:16:39.970
to find your data,
and then you open those documents

00:16:40.050 --> 00:16:41.840
in whichever application you
choose and you work with them.

00:16:42.010 --> 00:16:47.780
And apps have always relied on running
with the full privilege of the user.

00:16:48.970 --> 00:16:52.540
And because there has not been
a damage containment mechanism,

00:16:52.540 --> 00:16:54.490
it meant that you

00:16:56.150 --> 00:16:59.150
When you were writing
apps for our platform,

00:16:59.150 --> 00:17:03.560
could not tell us what those apps
were really intended to do in some

00:17:03.580 --> 00:17:08.430
kind of machine readable form so that
the operating system could construct

00:17:08.430 --> 00:17:12.460
a last line of defense and make
sure that if something goes really,

00:17:12.460 --> 00:17:16.130
really wrong,
that the operating system can catch you.

00:17:19.150 --> 00:17:24.730
So if you imagine the world's most boring
application called Watch Grass Grow,

00:17:26.510 --> 00:17:28.870
This application,
which really shouldn't be able to

00:17:28.870 --> 00:17:33.340
do anything on your computer except
maybe showing some grass growing,

00:17:33.420 --> 00:17:36.490
can actually,
if it was somehow to become exploited,

00:17:36.500 --> 00:17:41.340
steal all of your email
and send it to Croatia,

00:17:41.340 --> 00:17:43.490
which, by the way,
is scary because I'm Croatian,

00:17:43.560 --> 00:17:46.080
so take it from me.

00:17:51.960 --> 00:17:54.620
Here's the reality
we're up against folks.

00:17:54.630 --> 00:17:57.040
We're building really complex systems.

00:17:57.110 --> 00:18:03.060
They always have vulnerabilities,
and complexity is a tide that thus far,

00:18:03.070 --> 00:18:07.810
the entirety of the computer industry
has not been successful in turning.

00:18:07.840 --> 00:18:09.850
Complexity is only growing.

00:18:10.020 --> 00:18:13.290
It's not getting smaller,
and we're at the point already where

00:18:13.360 --> 00:18:18.520
a single buffer overflow somewhere in
your code really ruins your user's day.

00:18:18.570 --> 00:18:20.760
And I don't necessarily
even mean your code,

00:18:20.780 --> 00:18:23.320
because today,
when you write an application,

00:18:23.320 --> 00:18:25.780
you're linking against all
the frameworks you're linking

00:18:25.780 --> 00:18:27.140
against and all the libraries.

00:18:27.320 --> 00:18:30.990
Potentially, your actual code is just the
tip of the iceberg of the

00:18:30.990 --> 00:18:34.100
code that's actually running,
and the single buffer overflow

00:18:34.200 --> 00:18:38.960
anywhere in any of that code is
enough to ruin your user's day.

00:18:38.970 --> 00:18:43.950
And there is simply no limit
on how that day can be ruined.

00:18:44.040 --> 00:18:48.090
There is really no limit on the kind
of damage that Watch Grass Grow can

00:18:48.090 --> 00:18:50.580
do if it becomes exploited.

00:18:51.600 --> 00:18:54.500
So I want to drive this
point home because I really

00:18:54.500 --> 00:18:56.720
think it's pretty remarkable.

00:18:56.880 --> 00:19:01.290
So in 1977 was the first time that a U.S.

00:19:01.290 --> 00:19:05.440
automaker, General Motors,
put in a piece of electronics into a car.

00:19:05.520 --> 00:19:10.170
It was an electronic spark plug
controller on the Oldsmobile Tornado.

00:19:10.600 --> 00:19:14.410
It was a little,

00:19:15.700 --> 00:19:18.370
purpose-built controller that
really could do only one thing,

00:19:18.370 --> 00:19:22.190
and that was time,
electronic spark plugs, and that was it.

00:19:22.450 --> 00:19:26.530
And they like this idea so much
that actually just four years later,

00:19:26.690 --> 00:19:31.170
there were up to about 50,000
lines of code running different

00:19:31.270 --> 00:19:35.540
microprocessors in the cars that
they were putting on the market.

00:19:36.320 --> 00:19:44.250
If you fast-forward a bit, in 2005,
the F-22 Raptor fighter plane

00:19:44.250 --> 00:19:49.830
still in service today and a key
flown asset of the US Air Force is

00:19:49.920 --> 00:19:55.330
running about 1.7 million lines
of code just for core avionics,

00:19:55.330 --> 00:19:58.420
so really the mission-critical software.

00:19:58.420 --> 00:20:02.930
And the Joint Strike Fighter project
that's sort of supposed to be

00:20:03.380 --> 00:20:07.980
completed last year was up to
about 6 million lines of code.

00:20:07.980 --> 00:20:12.920
This was, I think,
about mid-2009 that they had this figure.

00:20:12.920 --> 00:20:16.200
So I want you to look at this
graph and sort of the magnitudes

00:20:16.210 --> 00:20:20.110
of difference because there's
a punchline to this graph,

00:20:20.260 --> 00:20:23.210
which is that if you buy a car today--

00:20:23.340 --> 00:20:26.060
There's about 100 million
lines of code in it.

00:20:26.060 --> 00:20:28.860
There's between 30 and 100
processors that total up to

00:20:28.860 --> 00:20:31.260
about 100 million lines of code.

00:20:31.260 --> 00:20:37.050
I hope all of you will be
enjoying your drive home.

00:20:41.200 --> 00:20:43.240
This situation can't keep going.

00:20:43.310 --> 00:20:47.490
And in very recent times,
in the last few months,

00:20:47.620 --> 00:20:51.970
I'm sure you've all heard,
there's been a string of high-profile

00:20:52.010 --> 00:20:58.180
breaches and compromises across a number
of different companies and the industry.

00:20:58.180 --> 00:20:58.180
And

00:20:58.350 --> 00:21:01.590
The kind of pain this is creating
is not just for those companies

00:21:01.670 --> 00:21:05.420
that are being breached,
but it's personal information

00:21:05.420 --> 00:21:10.500
of users that's being exposed,
leading to identity fraud,

00:21:10.620 --> 00:21:12.000
financial fraud.

00:21:12.180 --> 00:21:19.990
Basically, it's users that are
hurting in terms of time,

00:21:19.990 --> 00:21:19.990
in terms of money, and really,
in terms of

00:21:20.790 --> 00:21:24.580
Their ability to enjoy technology,
because they're learning very

00:21:24.580 --> 00:21:28.530
quickly that through just innocuous
use of these things they like,

00:21:28.750 --> 00:21:37.010
they may be opening themselves
up to nightmares like trying to

00:21:37.010 --> 00:21:38.420
recover your identity after it's
been compromised or having money

00:21:38.420 --> 00:21:38.420
stolen from your bank account.

00:21:40.150 --> 00:21:45.410
We know that there is a better
model for doing security,

00:21:45.410 --> 00:21:47.070
and here it is.

00:21:48.320 --> 00:21:53.190
If you think about how iOS works,
there's been a Sandbox from

00:21:53.190 --> 00:21:57.000
day one with a very simple,
very understandable set of rules.

00:21:57.060 --> 00:22:00.430
Applications on iOS cannot
touch other applications.

00:22:00.720 --> 00:22:03.870
They cannot touch the system,
which means that if there

00:22:03.870 --> 00:22:07.260
are mistakes in programming,
if there are exploits that

00:22:07.260 --> 00:22:09.660
happen in these applications,
the damage,

00:22:09.720 --> 00:22:14.370
the overall damage to the user
and their device is quite limited.

00:22:14.680 --> 00:22:18.380
And there's a nice side benefit,
it also becomes very easy to uninstall

00:22:18.380 --> 00:22:22.840
applications because applications are
isolated into their little containers,

00:22:22.960 --> 00:22:26.350
which are their own little spaces
where they get to put their data.

00:22:26.470 --> 00:22:29.270
And because this story is
so easy to understand and

00:22:29.430 --> 00:22:33.460
has such powerful benefits,
the Sandbox on iOS has really

00:22:33.460 --> 00:22:37.960
become a key element of the
overall security picture.

00:22:39.600 --> 00:22:43.940
The way this is implemented thus
far has been entire-- almost

00:22:44.040 --> 00:22:46.550
entirely through private interfaces.

00:22:46.730 --> 00:22:50.160
So interfaces that have not
been available to developers.

00:22:50.160 --> 00:22:53.280
And in iOS, there's never been a need
to make them available.

00:22:53.280 --> 00:22:56.170
But basically,
there's a kernel enforcement mechanism

00:22:56.170 --> 00:23:01.400
called Sandbox that can gate a number of
different things that the programs do,

00:23:01.520 --> 00:23:05.660
especially as it relates to
acquiring system resources.

00:23:05.660 --> 00:23:09.700
And we've used this to great
effect obviously in iOS,

00:23:09.700 --> 00:23:15.390
but also with demons and
system software on Mac OS.

00:23:17.150 --> 00:23:22.240
But there is a problem,
maybe more than one.

00:23:22.270 --> 00:23:25.700
To use Sandbox,
you have to know ahead of time what

00:23:26.750 --> 00:23:32.370
resources an application is going to want
to use so that you can create a security

00:23:32.370 --> 00:23:35.290
policy that the kernel can then enforce.

00:23:35.410 --> 00:23:39.320
And if you think about iOS again,
this is pretty easy to do because

00:23:39.350 --> 00:23:44.190
applications are isolated in their own
containers and aren't expected to be able

00:23:44.190 --> 00:23:47.100
to go and trudge around the file system.

00:23:48.470 --> 00:23:51.200
What's more,
Sandbox is just an enforcement mechanism.

00:23:51.200 --> 00:23:55.760
It doesn't really make it any easier
for developers that want to be able

00:23:55.860 --> 00:24:01.530
to take bits of privilege from their
program and somehow separate it out so

00:24:01.530 --> 00:24:08.300
that we don't have this issue where all
the privilege is available to programs.

00:24:08.630 --> 00:24:12.030
So the bottom line is,
even though we have what we believe

00:24:12.200 --> 00:24:17.280
is a fantastic model in iOS,
it simply wasn't possible for

00:24:17.280 --> 00:24:23.340
us to take it wholesale and
somehow port it to Mac OS.

00:24:23.340 --> 00:24:24.100
We have to do more.

00:24:26.200 --> 00:24:28.770
And it's against that
backdrop that I want to tell

00:24:28.770 --> 00:24:30.490
you about App Sandbox today.

00:24:34.740 --> 00:24:39.050
The App Sandbox is a mechanism
to aid in writing and securing

00:24:39.050 --> 00:24:42.240
graphical applications on Mac OS X.

00:24:42.700 --> 00:24:46.840
It is a mechanism that was
designed especially with

00:24:46.840 --> 00:24:49.140
the Mac App Store in mind.

00:24:49.200 --> 00:24:52.230
And it is a damage containment mechanism.

00:24:52.230 --> 00:24:57.150
It is a mechanism that tries to
limit the kind of exposure that a

00:24:57.150 --> 00:25:01.370
user's data has in the event that
an application has become exploited

00:25:01.370 --> 00:25:06.890
or that there is an unintentional
coding error or other misbehavior.

00:25:07.610 --> 00:25:11.210
The way App Sandbox does this is
by trying to control a number of

00:25:11.210 --> 00:25:14.740
features of the operating system,
such as access to the file

00:25:14.740 --> 00:25:17.780
system and the network,
with the goal of making

00:25:17.780 --> 00:25:21.940
it very hard for exploited
applications to be able to steal,

00:25:22.090 --> 00:25:25.030
corrupt, or delete user data.

00:25:26.050 --> 00:25:29.840
App Sandbox uses the same
sandbox mechanism as iOS for

00:25:29.840 --> 00:25:33.980
enforcement in the kernel,
but adds to it a number of

00:25:34.130 --> 00:25:39.590
custom-tailored changes at almost
every level of Mac OS to be able to

00:25:39.600 --> 00:25:42.010
provide a great security experience.

00:25:45.930 --> 00:25:51.160
When we built App Sandbox,
we had a number of design goals in mind.

00:25:51.160 --> 00:25:51.520
And

00:25:52.070 --> 00:25:57.820
Knowing that popping up security
UI is simply not an option,

00:25:57.950 --> 00:26:02.090
One of the key design goals was
to try and find a way for the

00:26:02.090 --> 00:26:07.360
user's intent to somehow directly
translate to security policy.

00:26:07.480 --> 00:26:12.290
If you only knew what the user was
trying to do at any given time,

00:26:12.310 --> 00:26:15.460
You could create a perfect
security policy around that.

00:26:15.560 --> 00:26:19.040
But of course,
we don't have mind reading machines yet.

00:26:19.060 --> 00:26:23.100
We wanted to make it really easy
for you guys to have a technology

00:26:23.100 --> 00:26:26.630
that you can use to make it
so that if your application

00:26:26.630 --> 00:26:30.710
becomes the one that's exploited,
that the damage it can

00:26:30.710 --> 00:26:32.650
do is really limited.

00:26:33.080 --> 00:26:36.440
And finally,
and this is--this should be obvious,

00:26:36.440 --> 00:26:40.080
but it sort of bears repeating,
we didn't set out to create

00:26:40.220 --> 00:26:43.870
a perfect security mechanism,
a silver bullet to end all

00:26:43.970 --> 00:26:46.460
security problems of all time.

00:26:46.630 --> 00:26:52.710
No, we are not trying to do that,
but we did set out to create a mechanism

00:26:52.710 --> 00:26:59.470
that would significantly elevate the bar
for attackers that are trying to take

00:26:59.470 --> 00:26:59.680
advantage of applications on Mac OS.

00:27:01.630 --> 00:27:10.710
Interestingly,
when we sort of enumerated these design

00:27:10.710 --> 00:27:10.710
goals and started building App Sandbox,
we realized that

00:27:11.940 --> 00:27:17.210
If you look at what's prohibited
by the Mac App Store policy today

00:27:17.210 --> 00:27:22.010
for submissions to the store,
it turns out that App Sandbox

00:27:22.250 --> 00:27:26.910
adds enforcement for a lot of these
already existing restrictions.

00:27:27.070 --> 00:27:32.380
So in some ways,
it's--it's putting teeth behind

00:27:32.450 --> 00:27:38.030
restrictions that already exist and you
shouldn't--you shouldn't think that this

00:27:38.030 --> 00:27:43.340
will somehow translate to completely new,
completely draconian restrictions.

00:27:43.800 --> 00:27:45.160
These restrictions were already there.

00:27:45.430 --> 00:27:48.030
Those of you that have submitted
to the Mac App Store have already

00:27:48.030 --> 00:27:52.480
followed them and so AppSandbox is
simply a way of enforcing some of those

00:27:52.480 --> 00:27:53.990
restrictions on a technical level.

00:27:58.100 --> 00:27:59.030
Here are the key ideas.

00:27:59.140 --> 00:28:03.440
We want you, when you write your app,
to tell us what your app is supposed

00:28:03.440 --> 00:28:05.640
to be able to do to get its job done.

00:28:05.640 --> 00:28:10.650
We're then going to take your app and put
it in a container exactly like on iOS,

00:28:10.650 --> 00:28:15.190
meaning you're going to get your
own scratch space for all of your

00:28:15.190 --> 00:28:21.220
preferences and caches and other
things that are not user documents,

00:28:21.220 --> 00:28:22.790
that are just your application's data.

00:28:22.790 --> 00:28:26.340
And we're going to take that container
and make it really only available to

00:28:26.340 --> 00:28:28.820
your app via your app's code identity.

00:28:29.060 --> 00:28:33.520
So there are no namespace collisions
if two applications happen to

00:28:33.520 --> 00:28:35.030
somehow have the same name.

00:28:35.030 --> 00:28:38.510
No, really, your container is your own.

00:28:40.120 --> 00:28:42.710
And for the tricky part,
when it comes to actually

00:28:42.710 --> 00:28:46.790
accessing a user's documents,
we're going to put control

00:28:47.170 --> 00:28:49.200
of that in the user's hands.

00:28:49.240 --> 00:28:53.880
We're going to make it so only
that when a user chooses to

00:28:54.030 --> 00:28:56.830
open a document in your app,
does your app receive the

00:28:56.830 --> 00:28:58.900
ability to open that document.

00:28:59.040 --> 00:29:05.590
And that, that kind of access is not
actually going to persist across

00:29:05.590 --> 00:29:05.590
relaunches of your application.

00:29:06.430 --> 00:29:09.030
But we also wanted to do this
in a way that the special cases

00:29:09.030 --> 00:29:12.500
that we all know and love,
the Recent Items menu and drag and drop,

00:29:12.740 --> 00:29:15.190
should just automatically work.

00:29:16.850 --> 00:29:19.820
So the system we built
has five key components,

00:29:20.000 --> 00:29:24.030
and I'm going to lead you
briefly through all of them.

00:29:26.830 --> 00:29:29.130
I already mentioned that you're going
to be telling us what your application

00:29:29.160 --> 00:29:30.290
is supposed to be able to do.

00:29:30.360 --> 00:29:34.990
And the way you're going to do that
is through what we call entitlements.

00:29:35.710 --> 00:29:40.240
The entitlements that you bind into
your application's code signature

00:29:40.690 --> 00:29:45.400
tell Mac OS what it is that your
application is supposed to be able to do.

00:29:45.500 --> 00:29:47.080
The entitlements are
just a property list.

00:29:47.080 --> 00:29:49.200
This is not deep magic.

00:29:49.340 --> 00:29:54.410
And in fact,
Xcode lets you edit these options

00:29:54.480 --> 00:30:00.490
graphically so you don't even
need to know if you don't want

00:30:00.490 --> 00:30:00.490
to that it's backed by a plist.

00:30:00.670 --> 00:30:04.660
When you go to, uh, uh,
to-to look at your, uh, targets in Xcode,

00:30:04.670 --> 00:30:07.370
you'll simply notice
that on the summary page,

00:30:07.570 --> 00:30:11.740
you can turn on application sandboxing,
um, and choose which entitlements you'd

00:30:11.780 --> 00:30:13.470
like to give your application.

00:30:13.670 --> 00:30:19.660
The entitlements themselves are really,
really simple, and even though

00:30:20.810 --> 00:30:24.080
We're not showing them to end users.

00:30:24.140 --> 00:30:28.450
We really want them to be so
simple that a user could understand

00:30:28.570 --> 00:30:30.490
them if we did show them.

00:30:31.340 --> 00:30:33.130
So if you--if you keep
that guideline in mind,

00:30:33.130 --> 00:30:35.360
an end user should really be
able to totally understand

00:30:35.360 --> 00:30:37.840
what these entitlements mean,
and if it's any more complex than that,

00:30:37.910 --> 00:30:40.790
it probably shouldn't be an entitlement,
you'll realize that it's quite

00:30:40.790 --> 00:30:44.700
different from some other security
models that you may be thinking of,

00:30:44.700 --> 00:30:47.140
like Androids.

00:30:47.140 --> 00:30:50.560
Android has hundreds of permissions
that you can choose for applications.

00:30:50.670 --> 00:30:56.060
We have fewer than 15
entitlements total in Lion.

00:30:56.060 --> 00:30:58.370
In fact, here they are.

00:31:03.090 --> 00:31:04.000
This is it.

00:31:04.000 --> 00:31:06.860
You're looking at all of the
entitlements that are made available.

00:31:06.860 --> 00:31:14.860
But I'll talk more about that
later and especially in the

00:31:14.860 --> 00:31:17.000
session immediately after this one.

00:31:17.050 --> 00:31:18.640
Let's progress and talk about containers.

00:31:18.780 --> 00:31:22.440
I already mentioned that, like on iOS,
we're going to,

00:31:22.440 --> 00:31:26.690
when you opt into App Sandbox,
give your application its own scratch

00:31:26.740 --> 00:31:31.110
space bound to your application's
code identity and make your

00:31:31.490 --> 00:31:34.320
application the king of that domain.

00:31:34.330 --> 00:31:35.960
And this is very simple.

00:31:36.190 --> 00:31:37.880
There is no magic to containers.

00:31:38.050 --> 00:31:41.790
It's actually--we set two
environment variables and that's it.

00:31:41.790 --> 00:31:45.300
And setting these two environment
variables is enough to make it so

00:31:45.350 --> 00:31:50.340
that every Apple API that you call
and ask for either the user's home

00:31:50.340 --> 00:31:54.610
directory or different subfolders
of the diff--of the user's home

00:31:54.620 --> 00:31:57.170
directory like a library or a,
you know, a computer.

00:31:57.170 --> 00:31:58.560
And you can use this to do this.

00:31:58.560 --> 00:32:03.560
So, what we're going to do is
we're going to use the app,

00:32:03.670 --> 00:32:07.150
the app, the app, the app, the app.

00:32:07.170 --> 00:32:12.110
And we're going to use this
to create a container for the

00:32:12.390 --> 00:32:17.000
If the application now tries to directly
call the open system call with a path

00:32:17.110 --> 00:32:23.750
to the user's real home directory,
that access is just gonna

00:32:23.750 --> 00:32:23.750
be denied by the Sandbox.

00:32:24.160 --> 00:32:26.450
On the other hand,
if you call an Apple API like

00:32:26.450 --> 00:32:29.990
in its home directory,
the result you're actually going to get

00:32:29.990 --> 00:32:32.340
out of that is within the container.

00:32:32.340 --> 00:32:33.860
It is the container.

00:32:33.950 --> 00:32:35.810
And of course,
the container is within the Sandbox

00:32:35.860 --> 00:32:39.940
so your application can read and write
and happily do what it wanted to do.

00:32:39.940 --> 00:32:44.900
I already mentioned that we
use the kernel enforcement

00:32:45.000 --> 00:32:48.220
mechanism from iOS called Sandbox.

00:32:50.840 --> 00:32:54.170
By default,
it's really only the container

00:32:54.410 --> 00:32:59.400
and certain system locations
that your application can access.

00:33:00.330 --> 00:33:04.820
The kernel will be enforcing that
normally your application cannot get

00:33:04.890 --> 00:33:10.090
any access to the user's real home
directory aside from your container.

00:33:13.100 --> 00:33:17.340
So, I hear you ask,
how is my application going to get at an

00:33:17.340 --> 00:33:19.940
actual document that the user has then?

00:33:20.750 --> 00:33:22.030
Okay,
I didn't actually hear anyone asking,

00:33:22.030 --> 00:33:25.410
but I thought it would
be a good transition.

00:33:25.630 --> 00:33:28.440
We built a mechanism called PowerBox.

00:33:29.070 --> 00:33:32.930
that tries to put this idea of
translating user intent into

00:33:32.930 --> 00:33:34.950
security policy in practice.

00:33:35.270 --> 00:33:35.810
Here's how it works.

00:33:35.900 --> 00:33:39.810
If you think about the
Cocoa Open and Save panels,

00:33:40.470 --> 00:33:43.900
We've all seen them a million
times and probably not stopped to

00:33:43.900 --> 00:33:48.950
pause to reflect deeply on them,
but they're actually pretty remarkable

00:33:49.910 --> 00:33:54.430
because they're such an unambiguous,
overt declaration of user

00:33:54.430 --> 00:33:57.270
intent as any you can find.

00:33:57.270 --> 00:34:01.180
If you have an open panel and the
user chose some files in that panel,

00:34:01.180 --> 00:34:05.400
the user is unequivocally saying,
"I want this application to open the

00:34:05.400 --> 00:34:09.830
files I just chose and no other."

00:34:10.760 --> 00:34:12.250
So why don't we make it that way?

00:34:12.420 --> 00:34:15.940
Why don't we make it that it's really
only the files that a user chose in an

00:34:15.940 --> 00:34:21.400
open or a safe panel that are available
to the application that showed the panel?

00:34:21.510 --> 00:34:22.470
So that's what we did.

00:34:22.730 --> 00:34:25.940
And to do that, we have a trusted system
mediator called PowerBox.

00:34:25.940 --> 00:34:29.060
And I'll show you how this works.

00:34:29.470 --> 00:34:32.300
Here's your application that
links against the App Kit.

00:34:32.300 --> 00:34:34.350
We're going to put it in a Sandbox.

00:34:34.550 --> 00:34:38.890
Your application is going
to call the NSOpenPanel.

00:34:38.890 --> 00:34:38.890
Now,

00:34:39.670 --> 00:34:44.130
It so happens that if AppKit tried
going to the real tilde documents

00:34:44.130 --> 00:34:47.310
folder that the user has,
the Sandbox would deny the access.

00:34:47.440 --> 00:34:49.710
This simply would not work.

00:34:49.820 --> 00:34:52.980
But instead, AppKit detects that you're
running inside an App Sandbox,

00:34:52.980 --> 00:34:58.240
and instead of drawing the open
panel from within your application,

00:34:58.270 --> 00:35:02.320
it actually reaches out to this trusted
system mediator called PowerBox.

00:35:02.360 --> 00:35:06.800
PowerBox also links against AppKit,
but it's not in the Sandbox.

00:35:06.800 --> 00:35:10.690
And so it actually has the ability
to access the user's documents.

00:35:10.800 --> 00:35:15.050
So it's PowerBox that will
actually draw an open panel

00:35:15.060 --> 00:35:17.800
on your application's behalf.

00:35:17.940 --> 00:35:20.800
And because of some fantastic
work that's gone into this,

00:35:20.890 --> 00:35:24.040
neither you nor the user will
ever know that it's another

00:35:24.040 --> 00:35:25.450
process doing the drawing.

00:35:25.460 --> 00:35:28.710
The panel looks the same,
it behaves the same,

00:35:28.910 --> 00:35:33.380
it is indistinguishable from
being drawn by your application.

00:35:34.040 --> 00:35:38.190
But then, and here's the key part,
it's only the files and directories

00:35:38.320 --> 00:35:44.040
that the user selects in this panel
that are sent back into your sandbox

00:35:44.040 --> 00:35:47.690
and made available to your application.

00:35:51.390 --> 00:35:57.950
Finally, I want to mention a system
called XPC Services.

00:36:00.240 --> 00:36:03.380
We talked about how the,
the iterations of,

00:36:03.560 --> 00:36:07.150
of reduction of privilege sort of
stopped at the process boundary.

00:36:07.260 --> 00:36:11.140
And today, if you have a process,
you really can't somehow subdivide

00:36:11.140 --> 00:36:13.700
privilege within that process.

00:36:14.570 --> 00:36:19.120
Well, we wanted to make it much
easier to divide privilege.

00:36:19.120 --> 00:36:22.900
And we decided not to do it
by finding a way to subdivide

00:36:22.900 --> 00:36:26.900
privilege within one process,
but instead to make it really,

00:36:26.900 --> 00:36:35.610
really easy to break applications
up into different processes that

00:36:35.610 --> 00:36:35.610
carry different levels of privilege.

00:36:36.480 --> 00:36:40.400
So XPC services are a
system that lets us do this.

00:36:40.400 --> 00:36:44.270
They're a mechanism by which you
can take parts of your application,

00:36:44.490 --> 00:36:49.940
create a separate binary for
that part of the application,

00:36:50.020 --> 00:36:54.510
put that binary directly
into your main app's bundle,

00:36:55.060 --> 00:36:59.200
And XPC, which is the new inter-process
communication layer

00:36:59.200 --> 00:37:03.420
that we added in Lion,
will actually manage the lifecycle

00:37:03.690 --> 00:37:08.400
of you talking to these parts of
the application entirely for you.

00:37:08.660 --> 00:37:11.840
This means you don't have
to install these services,

00:37:11.900 --> 00:37:16.350
you don't have to set up launch
DEP lists to get the service started.

00:37:16.600 --> 00:37:20.940
No, it's enough that the XPC services
are in your app bundle.

00:37:21.060 --> 00:37:23.730
And as soon as you try talking
to them from your application,

00:37:23.740 --> 00:37:29.260
they will be spun up and made available
only to your application and no other.

00:37:29.390 --> 00:37:34.280
Which means that you no longer
have to write special code

00:37:34.280 --> 00:37:37.820
in your helper's checking,
whether it's your application that's

00:37:37.900 --> 00:37:42.000
trying to talk to them and doing
the security checking on your own.

00:37:42.000 --> 00:37:45.870
No, all of this has managed for you.

00:37:46.470 --> 00:37:50.750
Incredibly simple to take parts of the
application that need different bits

00:37:50.750 --> 00:37:55.290
of privilege from the main app and
spin them out into different processes.

00:37:57.700 --> 00:38:01.750
So that's a lot to take in,
and I thought it would be a good,

00:38:01.750 --> 00:38:05.660
a good way to tie it all
together by actually picking

00:38:05.660 --> 00:38:08.470
an actual application and,
you know, putting it in the application

00:38:08.800 --> 00:38:10.930
Uh, uh, telling you what this looks like.

00:38:11.010 --> 00:38:13.820
So, I'm sure most of you
are familiar with Adium.

00:38:14.130 --> 00:38:18.730
It's a, uh, third-party, open source, uh,
instant messaging client.

00:38:18.900 --> 00:38:21.400
Very popular on Mac OS,
very full feature,

00:38:21.510 --> 00:38:24.170
tries to be a good citizen,
uses a lot of platform

00:38:24.200 --> 00:38:25.680
functionality on Mac OS.

00:38:25.900 --> 00:38:29.610
And the main application is
about 250 files of source,

00:38:29.610 --> 00:38:32.060
uh, about 75,000 lines.

00:38:32.210 --> 00:38:35.120
Now, this is not counting, um,
any of their libraries or

00:38:35.120 --> 00:38:36.640
any of their frameworks.

00:38:36.720 --> 00:38:40.630
Uh, this is really adjust the main app.

00:38:41.700 --> 00:38:42.640
Here's what we're going to do.

00:38:42.640 --> 00:38:44.390
Here's the simple process
we're going to follow.

00:38:44.450 --> 00:38:49.210
We're going to pick some entitlements
that we think are appropriate for Addium.

00:38:49.420 --> 00:38:52.820
And we're going to build it.

00:38:52.910 --> 00:38:55.790
The entitlements will get
signed into the code signature.

00:38:55.910 --> 00:39:00.800
We're going to run it and check that it's
now really running under App Sandbox.

00:39:00.930 --> 00:39:04.550
And then we're going to see if the
Sandbox system logs violations,

00:39:04.570 --> 00:39:07.990
things that Adium tried doing
but that the Sandbox mechanism

00:39:08.020 --> 00:39:09.770
prevented it from doing.

00:39:11.880 --> 00:39:16.540
So here's my pick of some of the
initial entitlements we want.

00:39:16.590 --> 00:39:19.570
The main one is the app
sandbox entitlement,

00:39:19.620 --> 00:39:22.520
which actually opts it
into an app sandbox.

00:39:22.560 --> 00:39:25.000
We want Addium to be able
to access our address book,

00:39:25.110 --> 00:39:29.080
because it wants to be able to show
names for people on our buddy list.

00:39:29.140 --> 00:39:32.770
We want it to be able to both read
and write files that the user selects,

00:39:32.770 --> 00:39:35.100
going to the trusted
open and save panels,

00:39:35.100 --> 00:39:37.910
because we want to be able
to receive files from buddies

00:39:37.910 --> 00:39:39.800
and send them to buddies.

00:39:39.850 --> 00:39:44.560
And because Addium needs to be able to
receive files from the outside world,

00:39:44.680 --> 00:39:48.150
we have to make sure that it
can act as a network server and

00:39:48.150 --> 00:39:50.640
receive incoming connections.

00:39:51.230 --> 00:39:55.800
So here is a, I hope, yeah,
I guess you can see that pretty well.

00:39:55.800 --> 00:39:57.440
Here is what this looks like in Xcode.

00:39:57.440 --> 00:40:00.690
I just picked the addium, um, uh, uh,

00:40:01.090 --> 00:40:02.000
target.

00:40:02.040 --> 00:40:06.950
And you can see that we just have this
nice drop-down with entitlements where

00:40:07.200 --> 00:40:11.530
I picked enabling App Sandbox and
allowing incoming network connections

00:40:11.560 --> 00:40:13.390
and allowing address book access.

00:40:13.580 --> 00:40:13.980
And that's it.

00:40:14.040 --> 00:40:15.750
And in fact, if I,
if I didn't know that there

00:40:15.760 --> 00:40:17.740
was a P-list backing this,
it wouldn't matter.

00:40:17.800 --> 00:40:20.480
I just clicked some check
boxes and I was ready to go.

00:40:20.610 --> 00:40:23.780
So now, I'm going to build and run this.

00:40:24.170 --> 00:40:26.960
And check whether Adium is really
running on their Nav Sandbox.

00:40:27.040 --> 00:40:29.740
And you can do that by
starting up Activity Monitor.

00:40:29.900 --> 00:40:34.300
In the View menu, there's a column you
can add called Sandbox.

00:40:34.400 --> 00:40:37.810
And you can check here, in our case,
that Adium is showing up as yes.

00:40:37.890 --> 00:40:40.610
Yes, it really is sandboxed.

00:40:43.020 --> 00:40:46.720
But then it ran and
no buddy list came up.

00:40:46.870 --> 00:40:51.440
So I opened up Console app and looked
for errors logged by the sandbox daemon

00:40:51.760 --> 00:40:53.690
to try and understand what went wrong.

00:40:53.950 --> 00:40:56.310
And here is an error that we see.

00:40:56.480 --> 00:40:59.190
Addium tried to make an
outbound network connection.

00:40:59.300 --> 00:41:01.940
We see to what address and to what port.

00:41:02.060 --> 00:41:04.220
And in fact,
there's even a button that I want to draw

00:41:04.220 --> 00:41:08.510
your attention to called Full Report,
which if I click,

00:41:08.510 --> 00:41:15.400
I can see a back trace of exactly where
things went wrong and where the kernel

00:41:15.480 --> 00:41:17.490
intervened and stopped the application.

00:41:17.530 --> 00:41:20.340
So in this case,
we see that it's in lib purple,

00:41:20.390 --> 00:41:22.980
which is Addium's networking library.

00:41:22.980 --> 00:41:26.350
And that the operation that was denied
is an outbound network operation,

00:41:26.350 --> 00:41:29.460
which makes sense because even
though I gave Addium the ability

00:41:29.460 --> 00:41:33.110
to listen for incoming connections,
I forgot to give it the ability

00:41:33.110 --> 00:41:35.370
to also make outbound connections.

00:41:35.390 --> 00:41:37.440
So our process here is very simple.

00:41:37.440 --> 00:41:40.090
We're basically going to add
the network client entitlement,

00:41:40.200 --> 00:41:44.250
which really just means adding that
one more checkbox in Xcode and hitting

00:41:44.250 --> 00:41:46.890
build again and running the program.

00:41:47.100 --> 00:41:49.850
And the next time I run Adium,
there are no more violations

00:41:50.200 --> 00:41:54.640
and things are happy and it's
running under an App Sandbox.

00:41:54.640 --> 00:41:57.110
Why does all of this matter?

00:41:58.890 --> 00:42:03.330
Because now you have to think what
happens if Addium gets exploited.

00:42:03.710 --> 00:42:09.480
Instant messaging clients have been
a notorious target of exploits.

00:42:09.870 --> 00:42:11.700
And the question now is
we've done this work,

00:42:11.780 --> 00:42:15.060
we've checked some check boxes,
what do we get for it?

00:42:15.280 --> 00:42:19.320
And what we get for it is that
an attacker that has fully

00:42:19.320 --> 00:42:24.990
compromised Adium on your machine,
when it's running under an app sandbox,

00:42:24.990 --> 00:42:28.580
really has almost no ability
to do anything to your

00:42:28.580 --> 00:42:30.880
system or your documents.

00:42:30.880 --> 00:42:33.810
If you happened to--while Adium
was running that particular time,

00:42:33.900 --> 00:42:36.920
if you happen to send or receive
some files to your buddies,

00:42:36.950 --> 00:42:39.060
an attacker could get access to those.

00:42:39.060 --> 00:42:41.450
If you haven't sent or
received files to buddies,

00:42:41.500 --> 00:42:45.560
an attacker can't really get
at any of your documents.

00:42:45.560 --> 00:42:46.560
And--

00:42:47.260 --> 00:42:50.410
Really, to be able to do anything
more at this point,

00:42:50.410 --> 00:42:53.930
an attacker needs yet another
exploit that's not an addium,

00:42:54.180 --> 00:42:56.620
but it's probably in the
operating system itself,

00:42:56.720 --> 00:42:59.940
usually the kernel,
to be able to really do damage

00:43:00.250 --> 00:43:04.410
and bypass the containment that
we've actually put upon him.

00:43:10.420 --> 00:43:14.100
Our sandbox is a damage
containment mechanism.

00:43:14.180 --> 00:43:17.800
It is the last line of
defense against exploitation,

00:43:17.850 --> 00:43:19.680
against programming errors.

00:43:19.740 --> 00:43:21.900
It is not an antivirus system.

00:43:21.950 --> 00:43:27.060
It does not try to stop things
that started out as malware.

00:43:27.900 --> 00:43:33.160
But it tries to drive policy,
security policy, by user intent,

00:43:33.160 --> 00:43:39.380
and it tries to make it really easy for
you to secure your applications in such

00:43:39.400 --> 00:43:45.520
a way that if they become exploited or
if there are benign programming errors,

00:43:45.720 --> 00:43:51.490
that the operating system can
impose a pretty strong bound on the

00:43:51.540 --> 00:43:54.420
kind of damage that can happen to
a user's data and a user's system.

00:43:55.190 --> 00:44:00.170
There is a guide called the Code Signing
an Application Sandboxing Guide on the

00:44:00.170 --> 00:44:03.850
usual developer documentation sites
that goes into quite a bit of detail

00:44:03.860 --> 00:44:05.800
about a lot of the things you heard.

00:44:05.880 --> 00:44:08.220
And in fact,
we also made some sample code

00:44:08.220 --> 00:44:12.100
available for you that you can see
not just App Sandbox in action,

00:44:12.100 --> 00:44:19.670
but also an application that we
took and broke up into different

00:44:19.670 --> 00:44:19.670
pieces with XPC services.

00:44:19.810 --> 00:44:25.840
Uh, and we've given each of those
XPC services different entitlements

00:44:25.840 --> 00:44:25.840
and different security properties.

00:44:26.280 --> 00:44:28.560
Here's--here's--here's the closing.

00:44:28.590 --> 00:44:31.740
This number that was
just unveiled yesterday,

00:44:31.740 --> 00:44:35.480
14 billion downloads from the iOS store.

00:44:35.740 --> 00:44:38.540
The iOS sandbox protected
every one of them.

00:44:38.650 --> 00:44:43.040
Each of those 14 billion downloads
has run under the iOS sandbox.

00:44:43.160 --> 00:44:47.610
And as a result,
users have enjoyed this beautiful

00:44:47.610 --> 00:44:50.720
carefree experience where
they can pick up their iOS

00:44:50.720 --> 00:44:54.800
devices and run an application,
download a new application,

00:44:54.800 --> 00:44:58.190
and not worry about, "Well,
what if there's an error and

00:44:58.190 --> 00:45:01.920
it deletes my phone?" Or,
"What if there is an exploit

00:45:02.040 --> 00:45:05.240
that ends up happening and
everything will go wrong?" No,

00:45:05.240 --> 00:45:08.720
users have been carefree and--

00:45:09.240 --> 00:45:10.130
See that kid up there?

00:45:10.270 --> 00:45:14.200
That's how your users
should feel on Mac OS.

00:45:14.200 --> 00:45:25.190
And we hope App Sandbox will be
one step in accomplishing that.

00:45:25.200 --> 00:45:26.200
Thank you.