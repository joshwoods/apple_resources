WEBVTT

00:00:09.610 --> 00:00:10.220
All right.

00:00:10.420 --> 00:00:13.610
Hi, I'm Brian Weinstein,
and I'm here to talk to you guys about

00:00:13.720 --> 00:00:16.040
what is new in Safari Extensions.

00:00:16.370 --> 00:00:19.690
We're going to start by going
through a quick recap of

00:00:19.820 --> 00:00:23.980
what Safari Extensions are,
why you would want to use them,

00:00:24.130 --> 00:00:26.540
and what they are good for.

00:00:26.560 --> 00:00:29.540
And then we're going to dive right
into what's new with Safari Extensions.

00:00:29.540 --> 00:00:33.990
We have some new events that we
have given to Safari Extensions,

00:00:34.120 --> 00:00:35.310
and some new UI.

00:00:35.340 --> 00:00:38.230
So,
before we begin with talking about why

00:00:38.270 --> 00:00:42.220
you would want to use a Safari Extension,
I would just like to say,

00:00:42.470 --> 00:00:45.460
if this is going to be new information,
to please watch the

00:00:45.510 --> 00:00:46.770
videos from last year.

00:00:46.780 --> 00:00:50.280
There are two full sessions about
how to create Safari Extensions,

00:00:50.280 --> 00:00:51.280
and they're just great.

00:00:51.280 --> 00:00:55.190
They go into much more detail
than I'm going to right here.

00:00:55.620 --> 00:00:59.940
So why should you make an extension
if you haven't made one before?

00:00:59.990 --> 00:01:04.080
You might want to add something
to Safari's user interface that

00:01:04.080 --> 00:01:05.900
you can't do with just a web page.

00:01:06.030 --> 00:01:12.210
You might want to add an extension
bar that's always there no matter

00:01:12.590 --> 00:01:18.180
what web page the user is on,
or you might want to add an

00:01:18.180 --> 00:01:19.690
extension toolbar item to
natively go into Safari's toolbar.

00:01:20.240 --> 00:01:23.620
You might want to provide a
persistent experience that

00:01:23.770 --> 00:01:25.540
one web page can't provide.

00:01:25.600 --> 00:01:28.630
If you have an email client,
instead of having the user keep

00:01:28.660 --> 00:01:32.810
the email open in a background tab,
you might want to show a toolbar item

00:01:32.830 --> 00:01:39.010
that constantly checks your email,
and then shows a badge with

00:01:39.080 --> 00:01:42.210
how many unread emails you have
when clicking that toolbar item,

00:01:42.210 --> 00:01:44.400
and that will take you
directly to the email.

00:01:45.480 --> 00:01:50.950
Or, you might want to put together a
mashup of two sites that you use,

00:01:50.950 --> 00:01:53.990
and create a new view of
these two websites without

00:01:54.280 --> 00:01:55.760
requiring your own server.

00:01:55.760 --> 00:02:03.070
You can do all the page loading and the
graphics on the user's local computer.

00:02:04.040 --> 00:02:07.000
So let's talk about what
Safari Extensions are.

00:02:07.100 --> 00:02:08.870
They are all web technologies.

00:02:08.980 --> 00:02:11.830
They're HTML, JavaScript, and CSS.

00:02:12.230 --> 00:02:15.540
There's no native code
in Safari Extensions.

00:02:15.690 --> 00:02:19.250
And so what this means is if you're
familiar with using web development,

00:02:19.490 --> 00:02:21.290
it's incredibly easy to develop.

00:02:21.390 --> 00:02:24.000
It's just HTML and JavaScript and CSS.

00:02:24.290 --> 00:02:28.090
There isn't a new technology to learn,
so it's incredibly easy to

00:02:28.090 --> 00:02:30.580
write great Safari Extensions.

00:02:30.710 --> 00:02:36.600
And since we're using HTML, it's secure,
and you're not going to see crashes.

00:02:36.990 --> 00:02:43.600
So let's talk about how the basic
structure of Safari without extensions.

00:02:43.750 --> 00:02:48.320
So when a user is browsing in Safari,
you might have a few windows open,

00:02:48.580 --> 00:02:53.600
and each window has a few tabs,
and each tab has a web page inside of it.

00:02:53.820 --> 00:02:55.700
Safari also provides some additional UI.

00:02:55.760 --> 00:02:59.460
It provides bars,
like the bookmarks bar or the tab bar,

00:02:59.460 --> 00:03:02.300
and it can provide
toolbar items like back,

00:03:02.330 --> 00:03:03.720
forward, or home.

00:03:03.720 --> 00:03:06.550
And then you have your Safari extensions.

00:03:06.950 --> 00:03:10.050
The extensions are a self-contained
bundle that are made up of

00:03:10.050 --> 00:03:11.600
a few different components.

00:03:11.720 --> 00:03:15.930
You can add toolbar
items in your extension.

00:03:16.070 --> 00:03:19.980
You can also have bars and context menus.

00:03:20.100 --> 00:05:01.100
[Transcript missing]

00:05:01.410 --> 00:05:04.460
So, now you've seen a little bit of
how extensions are put together,

00:05:04.460 --> 00:05:07.290
you might want to get started
building them right now.

00:05:07.320 --> 00:05:11.180
So to do that, you need to go to the
Safari Developer Center and sign up for

00:05:11.310 --> 00:05:15.190
the free Safari Developer Program and
download your certificate.

00:05:15.220 --> 00:05:18.920
You can do that at
developer.apple.com/safari

00:05:18.920 --> 00:05:21.300
and you can get started today.

00:05:21.370 --> 00:05:23.880
And once you do,
you can open up the Develop menu

00:05:23.880 --> 00:05:27.480
and show the Extension Builder,
which is your one-stop shop for

00:05:27.570 --> 00:05:29.920
developing and building extensions.

00:05:30.080 --> 00:05:33.100
You can specify your
various UI elements here,

00:05:33.160 --> 00:05:37.140
and you can put together some
information that the user sees,

00:05:37.200 --> 00:05:39.720
like the name that's displayed or
a website that they can find more

00:05:39.720 --> 00:05:41.300
information about your extension.

00:05:41.300 --> 00:05:45.300
So, that was a quick recap of what
extensions can do and how they are built.

00:05:45.300 --> 00:05:48.030
And once again,
if this was new information to you,

00:05:48.060 --> 00:05:50.260
please watch the videos from last year.

00:05:50.310 --> 00:05:51.210
They go into much more detail.

00:05:51.330 --> 00:05:53.300
And they just did a great job.

00:05:53.300 --> 00:05:56.150
Let's talk about what's
new with Safari extensions.

00:05:56.300 --> 00:05:59.300
We introduced extensions
at WWDC a year ago,

00:05:59.300 --> 00:06:01.720
and we have just been blown
away by some of the extensions

00:06:01.720 --> 00:06:03.300
that you guys have put together.

00:06:03.300 --> 00:06:07.130
They've just been incredible and done
things we couldn't have even imagined.

00:06:07.300 --> 00:06:10.060
However, in the process,
we got a lot of feedback

00:06:10.060 --> 00:06:13.300
about what you guys would also
like to see in extensions,

00:06:13.300 --> 00:06:16.310
and we've incorporated that
and are excited to tell

00:06:16.310 --> 00:06:18.090
you about what's new today.

00:06:18.300 --> 00:06:21.690
One of the first things that we heard
a lot of feedback about is you want to

00:06:21.690 --> 00:06:24.540
know how users interact with the browser.

00:06:24.640 --> 00:06:26.080
Do they keep a lot of windows open?

00:06:26.290 --> 00:06:28.190
Do they keep a lot of tabs open?

00:06:28.310 --> 00:06:30.700
And how long do they
stay at certain pages?

00:06:30.870 --> 00:06:38.340
We've added some new events that
let you determine just that and use

00:06:38.670 --> 00:06:39.510
that to provide an even more custom
experience to your users in an extension.

00:06:40.000 --> 00:06:44.220
Another thing we introduced
in Safari 5 was Safari Reader.

00:06:44.370 --> 00:06:47.000
And it's been a huge hit,
and it's a great way for

00:06:47.000 --> 00:06:48.700
people to read articles.

00:06:48.880 --> 00:06:51.530
But we've also heard you want
to be able to interact with

00:06:51.530 --> 00:06:53.180
Reader in your extensions.

00:06:53.300 --> 00:06:56.220
And we've added Reader events
that allow you to do that.

00:06:56.740 --> 00:06:59.740
The first event we added
is the Available event.

00:06:59.750 --> 00:07:03.430
And that is sent to a tab when
it's determined that Reader

00:07:03.560 --> 00:07:04.890
is available for that tab.

00:07:04.950 --> 00:07:09.660
This is a great time to automatically
enter Reader and provide a great

00:07:10.000 --> 00:07:13.580
article reading experience for
your users using the enter and exit

00:07:13.580 --> 00:07:15.800
APIs we've added on the Reader object.

00:07:15.880 --> 00:07:19.890
However, the user might not want to
enter Reader on every site.

00:07:19.890 --> 00:07:22.800
They might want to on site A,
but not site B.

00:07:22.800 --> 00:07:26.450
And we've also added the
Activate and Deactivate events.

00:07:26.540 --> 00:07:30.030
Which tells you when the
user enters or exits Reader.

00:07:30.030 --> 00:07:33.960
If they enter Reader on site A,
you can use the Available event

00:07:33.960 --> 00:07:36.150
to always enter Reader on site A.

00:07:36.150 --> 00:07:40.380
And if they don't use it on site B,
it doesn't have to automatically

00:07:40.380 --> 00:07:41.910
enter it on site B.

00:07:42.900 --> 00:07:46.890
So, along with Reader,
you also wanted to know how the user

00:07:47.120 --> 00:07:50.120
interacts with windows and tabs.

00:07:50.120 --> 00:07:53.680
We've also added window and
tab events to make this easier.

00:07:53.740 --> 00:07:57.770
Let's say you have an extension that
keeps track of all of the tabs that

00:07:57.770 --> 00:08:00.070
a user's opened and has never read.

00:08:00.130 --> 00:08:01.670
I know that happens to me all the time.

00:08:01.720 --> 00:08:05.540
I start opening links in background tabs,
and I just get distracted and

00:08:05.540 --> 00:08:07.270
forget which ones I've read.

00:08:07.370 --> 00:08:10.860
So, you would probably want to
listen for when a tab is opened,

00:08:11.180 --> 00:08:14.320
and add it to your list of unread tabs,
and then you would want to remove it

00:08:14.320 --> 00:08:17.040
when it's either closed or selected.

00:08:17.130 --> 00:08:20.400
And to help you get started with that,
we've added open and close events,

00:08:20.670 --> 00:08:24.800
which are sent to a tab or a
window when it opens or closes.

00:08:24.920 --> 00:08:28.730
Let's take a look at when these events
are fired in a typical browsing session.

00:08:28.930 --> 00:08:33.600
So, when the user opens a window,
an open event is sent to that window,

00:08:33.720 --> 00:08:36.720
and a tab will also be opened
as part of the process,

00:08:36.800 --> 00:08:39.440
and an open event will
be sent to that tab.

00:08:39.590 --> 00:08:43.840
When the user opens a second tab,
an open event is sent to that tab.

00:08:44.020 --> 00:08:46.440
Some navigation might happen,
and then the user might

00:08:46.440 --> 00:08:48.220
be done with that tab,
and we'll close it,

00:08:48.470 --> 00:08:51.040
and we send a close event to that tab.

00:08:51.180 --> 00:08:54.410
And then when the window is closed,
a close event is sent to

00:08:54.450 --> 00:08:58.700
every tab in the window,
and then to the window itself.

00:08:59.870 --> 00:09:03.510
However, this only gets us part of the
way to that extension that

00:09:03.560 --> 00:09:05.400
keeps track of your unread tabs.

00:09:05.480 --> 00:09:07.720
You also need to know
when a tab is selected,

00:09:07.890 --> 00:09:10.420
so we can also remove
it from the unread tabs,

00:09:10.540 --> 00:09:12.590
because that's when it gets read.

00:09:12.930 --> 00:09:16.370
So we've also added activate
and deactivate events that are

00:09:16.370 --> 00:09:20.300
sent to a tab or window when
it is activated or deactivated.

00:09:20.460 --> 00:09:25.450
So if you have a window with two tabs,
and you have the first tab selected,

00:09:25.480 --> 00:09:27.800
and you want to read
something on the second tab,

00:09:27.860 --> 00:09:31.460
first a deactivate event
is sent to tab one,

00:09:31.530 --> 00:09:34.640
and then an activate
event is sent to tab two.

00:09:34.700 --> 00:09:37.880
The deactivate event
is always sent first.

00:09:38.480 --> 00:09:42.420
Now, for another interesting extens —
for another extension that I've

00:09:42.630 --> 00:09:46.390
wanted to see is how many people,
when they're trying

00:09:46.390 --> 00:09:49.290
to get some work done,
end up on Reddit or Facebook,

00:09:49.510 --> 00:09:53.560
and before you know it,
an hour of your day is gone.

00:09:53.870 --> 00:09:55.560
Yeah, yeah, it happens.

00:09:55.590 --> 00:09:59.010
What if you could have an
extension that warned you before

00:09:59.010 --> 00:10:02.350
you went to one of these sites,
and if you went to the site,

00:10:02.460 --> 00:10:05.140
it kept track of how long
you were on the site,

00:10:05.190 --> 00:10:09.040
and told you how long you were
distracted in a certain day?

00:10:09.090 --> 00:10:11.040
It might be a little
depressing to look at,

00:10:11.040 --> 00:10:13.180
but it would be a
pretty useful extension.

00:10:13.190 --> 00:10:17.180
So we've also added Before Navigate
and Navigate Events.

00:10:17.270 --> 00:10:20.970
The Before Navigate Event is
sent to a tab before the user

00:10:20.970 --> 00:10:25.460
navigates within that tab,
and the navigation is cancelable by

00:10:25.500 --> 00:10:28.240
calling preventDefault on the event.

00:10:28.330 --> 00:10:30.820
So you can prevent that
navigation from happening.

00:10:30.970 --> 00:10:36.880
And then if the navigation happens,
a Navigate Event is sent when the

00:10:36.880 --> 00:10:42.310
mainframe finishes loading in a tab,
and then you can keep track of how

00:10:42.310 --> 00:10:46.690
long the user was on the site by
looking at the time the navigation

00:10:46.690 --> 00:10:50.190
happened and comparing it to
the time they navigated away.

00:10:50.340 --> 00:10:52.480
Those are the events that we've
added to Safari Extensions.

00:10:52.480 --> 00:10:54.290
How are they used?

00:10:55.010 --> 00:11:01.950
Since we're just using JavaScript, HTML,
and CSS in our extensions,

00:11:02.140 --> 00:11:04.540
it makes sense for these
to be just like DOM events,

00:11:05.120 --> 00:11:07.550
which means that it's the
addEventListener syntax

00:11:07.650 --> 00:11:08.810
that you know and love.

00:11:08.820 --> 00:11:12.900
So for adding listeners,
since a lot of these events are

00:11:12.930 --> 00:11:16.960
fired on both windows and tabs,
if you wanted to listen

00:11:16.960 --> 00:11:20.540
for when new windows open,
you wouldn't want the

00:11:20.590 --> 00:11:21.820
same handler to be fired.

00:11:21.820 --> 00:11:33.060
So if you wanted to listen for
when any tab or window is opened,

00:11:33.060 --> 00:11:45.080
you could add a capturing event
listener to the Safari application

00:11:45.540 --> 00:11:50.960
and listen for the open event.

00:11:51.250 --> 00:11:55.090
Or if you wanted to listen for
when a specific tab is activated,

00:11:55.140 --> 00:11:58.790
you could add an activate
listener just to that one tab.

00:11:59.310 --> 00:12:03.600
However, since these events are fired
on both windows and tabs,

00:12:03.670 --> 00:12:06.130
you need some way to determine
if it was a window or a tab,

00:12:06.130 --> 00:12:09.140
especially if you're using
these capturing event listeners.

00:12:09.220 --> 00:12:14.080
And so we've also added the ability
to use the instance of operator.

00:12:14.360 --> 00:12:19.420
And so you can check if the event
target is an instance of a browser tab,

00:12:19.420 --> 00:12:22.300
or if the event target is an
instance of a browser window,

00:12:22.440 --> 00:12:26.050
and do your behavior accordingly.

00:12:26.060 --> 00:12:28.240
So now that we've seen
some of these events,

00:12:28.270 --> 00:12:31.160
let's take a look at how easy
it is to use these events to

00:12:31.160 --> 00:12:33.460
put together something awesome.

00:12:33.460 --> 00:12:36.920
When I was talking about the extension
that keeps track of your unread tabs,

00:12:37.020 --> 00:12:41.320
that's a pretty great idea,
so let's put that together right now.

00:12:41.320 --> 00:12:44.720
So now we have Safari open,
so let's go into the develop menu

00:12:44.720 --> 00:12:47.320
and open the extension builder.

00:12:47.670 --> 00:12:51.440
I have set up a few things about —
I've set up a little bit of information

00:12:51.480 --> 00:12:53.440
about my Unread Tabs extension.

00:12:53.510 --> 00:12:57.560
I've set up the name that's displayed
to the user and a description.

00:12:57.560 --> 00:13:01.630
So the basic way that this extension
is going to work is it's going to

00:13:01.630 --> 00:13:06.320
listen for when tabs are opened and
add them to our list of unread tabs.

00:13:06.320 --> 00:13:08.680
And then when a tab is
either activated or closed,

00:13:08.720 --> 00:13:12.160
it's going to remove them
from our list of unread tabs.

00:13:12.160 --> 00:13:17.660
And then we can show the user the number
of unread tabs they have in each window.

00:13:17.680 --> 00:13:20.990
And we can add a toolbar item,
and then we have a natural way to

00:13:21.110 --> 00:13:22.660
show that little bit of information.

00:13:22.720 --> 00:13:25.160
We can use a badge on the toolbar item.

00:13:25.210 --> 00:13:29.820
So let's set up a global
page to manage the events,

00:13:29.820 --> 00:13:32.540
and then let's add a new toolbar item.

00:13:32.570 --> 00:13:35.530
We'll call it "Unread Tabs."

00:13:36.870 --> 00:13:40.540
And we'll give it an image,
and we will set up an

00:13:40.540 --> 00:13:43.540
identifier — just unread tabs.

00:13:45.180 --> 00:13:47.140
So now our extension is configured.

00:13:47.150 --> 00:13:51.040
All we have to do is write the code.

00:13:51.040 --> 00:13:53.980
So let's open up our global HTML page.

00:13:54.000 --> 00:13:57.810
And since these are just HTML,
all we need to do is set

00:13:57.810 --> 00:13:59.230
up our HTML document.

00:13:59.380 --> 00:14:02.960
But since this page isn't
visible to the user,

00:14:02.980 --> 00:14:05.960
all we have to do is add a script tag.

00:14:07.530 --> 00:14:11.180
So this extension will
keep track of unread tabs,

00:14:11.220 --> 00:14:13.400
so we need a list of unread tabs.

00:14:13.400 --> 00:14:17.030
And then we also need to listen
for when tabs are opened,

00:14:17.030 --> 00:14:18.900
activated, or closed.

00:14:18.980 --> 00:14:22.820
And then we also need to
update our toolbar item state,

00:14:22.820 --> 00:14:27.880
so we'll listen for a validate event,
which is sent to a toolbar

00:14:27.880 --> 00:14:32.780
item whenever an interesting
event happens in the browser,

00:14:32.780 --> 00:14:33.350
and it's a good time to update
your toolbar item state.

00:14:34.550 --> 00:14:40.470
So we now have our list of unread tabs,
and we have our event listeners.

00:14:43.330 --> 00:14:46.310
When a tab is opened,
all we want to do is,

00:14:46.480 --> 00:14:48.980
if it's actually a tab,
we want to add it to

00:14:48.980 --> 00:14:51.450
our list of unread tabs.

00:14:51.630 --> 00:14:55.290
So all we do is we check if our
event target is a browser tab,

00:14:55.290 --> 00:14:57.860
we add it to our list of unread tabs.

00:14:57.910 --> 00:15:00.000
That's a pretty easy start.

00:15:00.100 --> 00:15:04.500
So now if a tab is either
activated or closed,

00:15:04.540 --> 00:15:06.660
we remove it from our
list of unread tabs,

00:15:06.740 --> 00:15:09.200
and since we'll be doing that
in two different locations,

00:15:09.280 --> 00:15:11.970
let's have a function
that does it for us.

00:15:12.950 --> 00:15:18.530
So all this function does is it looks
for a tab in the list of unread tabs,

00:15:18.530 --> 00:15:21.180
and if it's there, removes it.

00:15:22.460 --> 00:15:25.580
Then,
when a tab is either activated or closed,

00:15:25.580 --> 00:15:29.810
all it needs to do is check if
it's actually a tab and remove

00:15:29.810 --> 00:15:32.600
the tab from the unread tabs.

00:15:33.990 --> 00:15:37.980
Now, for the validate event,
what we want to do is we want to

00:15:37.980 --> 00:15:42.600
look at all of our unread tabs and
see how many of them belong to the

00:15:42.600 --> 00:15:47.140
same browser window as the toolbar
item we're updating our state for.

00:15:47.140 --> 00:15:51.820
So we have our validate handler,
and it first checks the event command,

00:15:51.860 --> 00:15:55.990
making sure it's unread tabs,
and then it looks over all the

00:15:56.110 --> 00:15:59.800
unread tabs and checks to see if
their browser window is the same

00:15:59.800 --> 00:16:03.890
browser window as the toolbar item,
which is the event target.

00:16:04.030 --> 00:16:06.860
And then we will disable our
toolbar item if there aren't

00:16:06.930 --> 00:16:10.010
any unread tabs in the window,
and we will set our badge

00:16:10.110 --> 00:16:13.380
to be the number of unread
tabs we have in that window.

00:16:13.680 --> 00:16:18.700
So let's save, go back to Safari,
and the Extension Builder is open,

00:16:18.820 --> 00:16:20.980
so let's install our extension.

00:16:21.020 --> 00:16:25.560
And we now have a toolbar
item in our extension,

00:16:25.610 --> 00:16:28.890
and when we open up a
few background tabs,

00:16:30.090 --> 00:16:31.440
You can see that our count updates.

00:16:31.520 --> 00:16:35.100
We now have three unread
tabs in this window.

00:16:35.250 --> 00:16:38.830
When we select one,
the count goes down to two.

00:16:38.960 --> 00:16:44.200
And if we open a new window and open
a few background tabs in that window,

00:16:44.890 --> 00:16:47.300
You can see that our
count updates per window,

00:16:47.430 --> 00:16:50.200
and we now have two
unread tabs in one window,

00:16:50.200 --> 00:16:52.790
and three unread tabs
in the other window.

00:16:53.710 --> 00:16:54.700
Great.

00:16:54.700 --> 00:16:58.240
So now we have a way to keep
track of the number of unread

00:16:58.380 --> 00:17:00.730
tabs we have in each window.

00:17:01.390 --> 00:17:04.060
Okay,
so what did we look at in that demo?

00:17:04.360 --> 00:17:08.470
We went through a quick refresher of the
Extension Builder and showed how easy it

00:17:08.470 --> 00:17:11.300
is to use to configure your extensions.

00:17:11.530 --> 00:17:18.080
We looked at how to add listeners
for the new events that we've added,

00:17:18.130 --> 00:17:22.440
and how to handle when
the events are fired,

00:17:22.440 --> 00:17:25.100
and we looked at how to use
the validate event to update

00:17:25.100 --> 00:17:25.100
the state of our toolbar items.

00:17:25.760 --> 00:17:29.000
So those were the new events that
we added to Safari Extension.

00:17:29.080 --> 00:17:31.590
So I'm going to hand it over
to Jessie Berlin to talk

00:17:31.590 --> 00:17:33.370
about the new UI we have.

00:17:34.220 --> 00:17:35.290
Thanks, Brian.

00:17:36.200 --> 00:17:38.890
Hi, my name is Jessie Berlin,
and I'm an engineer on the

00:17:38.890 --> 00:17:40.860
Safari and WebKit team.

00:17:40.900 --> 00:17:43.080
Just like Brian,
I've been really impressed by

00:17:43.080 --> 00:17:45.760
what you guys have done with
extensions over the past year.

00:17:45.760 --> 00:17:49.680
And in the next 20 minutes or so,
I'm going to show you some cool

00:17:49.690 --> 00:17:54.460
new UI elements that you can use to
make your extensions even better.

00:17:54.460 --> 00:17:57.160
So going back to Brian's
unread tabs extension,

00:17:57.170 --> 00:18:01.340
it's really cool that we have
the number of unread tabs.

00:18:01.340 --> 00:18:06.860
But it'd be even cooler if I could
know which tabs I haven't read yet,

00:18:07.120 --> 00:18:11.000
and maybe close out all the
tabs that I'm already done with.

00:18:11.000 --> 00:18:13.250
So how could we do this today?

00:18:13.790 --> 00:18:20.720
Well, we could add extension context menu
items for each one of the unread tabs.

00:18:20.720 --> 00:18:25.400
Context menu items will be shown when
the user right-clicks in the page.

00:18:25.470 --> 00:18:29.540
But that doesn't seem appropriate
for the unread tabs extension,

00:18:29.540 --> 00:18:34.190
because what does the context of the page
really have to do with my unread tabs?

00:18:34.410 --> 00:18:47.170
So what else could we do?

00:18:48.250 --> 00:18:48.380
Well, we could inject a script into
the web page and draw a menu

00:18:48.380 --> 00:18:48.380
approximately beneath where we
expect the toolbar item to be.

00:18:48.660 --> 00:18:52.670
But that's really fragile,
because the web page can change the

00:18:52.750 --> 00:18:58.040
JavaScript and the CSS in ways the
extension really isn't expecting,

00:18:58.070 --> 00:19:00.070
and might make the menus look really bad.

00:19:00.140 --> 00:19:04.000
So it looks like we really don't
have a great way today to show a

00:19:04.030 --> 00:19:10.990
list of options to the user from
within the Safari UI with extensions.

00:19:11.260 --> 00:19:14.320
Which is why we added extension menus.

00:19:14.540 --> 00:19:21.140
Menus are a great way to show the
user a list of items or options.

00:19:21.320 --> 00:19:25.260
Say you want to show the user
a list of languages that your

00:19:25.260 --> 00:19:28.370
extension can translate into,
or maybe some style sheets

00:19:28.370 --> 00:19:31.700
that they can use to change
the look of the current page.

00:19:31.770 --> 00:19:33.540
Menus are a great way to do that.

00:19:33.610 --> 00:19:36.540
They have a native look and feel,
so they look right both

00:19:36.540 --> 00:19:38.730
on Mac and Windows.

00:19:39.290 --> 00:19:42.600
And they can be shown when the
user clicks on the toolbar item,

00:19:42.730 --> 00:19:46.840
clicks and holds on the toolbar item,
or just when you call show

00:19:46.940 --> 00:19:49.270
menu on that toolbar item.

00:19:49.380 --> 00:19:52.720
So you're probably wondering, okay,
what can I put in these extension menus?

00:19:52.720 --> 00:19:58.160
Let's go over what you can do with
an individual extension menu item.

00:19:58.260 --> 00:20:00.950
So first off, there's the title.

00:20:01.150 --> 00:20:03.490
This is the text that
will be shown to the user,

00:20:03.560 --> 00:20:05.750
and you should keep it
pretty short and sweet,

00:20:05.940 --> 00:20:08.730
because you don't really want your
menu taking up half the page just to

00:20:08.730 --> 00:20:10.310
accommodate one really long title.

00:20:10.520 --> 00:20:16.260
If you want to show the user
what's currently on or in use,

00:20:16.260 --> 00:20:16.260
you can use a check mark.

00:20:16.500 --> 00:20:20.440
And if you want to add a little
bit of visual splash to your menu,

00:20:20.610 --> 00:20:22.360
you can use images.

00:20:22.400 --> 00:20:26.740
These are specified through
Safari Extension URLs or HTTP URLs,

00:20:26.880 --> 00:20:31.120
and they'll be automatically
scaled to 16 by 16 pixels,

00:20:31.260 --> 00:20:33.500
so they can fit in the menu.

00:20:33.600 --> 00:20:38.590
Sometimes there's an option
that's not really appropriate

00:20:38.680 --> 00:20:40.650
in the current context.

00:20:40.960 --> 00:20:45.740
A great example of this is an undo item,
when there's nothing

00:20:45.740 --> 00:20:46.960
for the user to undo.

00:20:47.130 --> 00:20:48.760
You want them to know
it's there for the future,

00:20:48.930 --> 00:20:51.800
but you don't want them
to be able to select it.

00:20:51.810 --> 00:20:54.760
All you have to do is
disable the menu item,

00:20:54.820 --> 00:21:00.620
and it will remain grayed out and not
selectable until you enable it again.

00:21:00.630 --> 00:21:03.920
You should use separators
to make it easier for your

00:21:04.400 --> 00:21:09.040
users to find your menu items,
if you have a lot of them.

00:21:09.040 --> 00:21:13.790
And last but not least,
you can even use submenus.

00:21:14.080 --> 00:21:17.660
for advanced options, or again,
to help you organize your menu items.

00:21:17.760 --> 00:21:20.210
Okay, so how do we create these menus?

00:21:20.380 --> 00:21:22.620
Well, we added a new section
to the Extension Builder

00:21:22.620 --> 00:21:25.730
for creating these menus.

00:21:26.180 --> 00:21:31.070
But what if you wanted to show the user
a list of the current pages that are

00:21:31.160 --> 00:21:33.480
embedded in the website they're visiting?

00:21:33.530 --> 00:21:36.780
You wouldn't really know that
information when you go to

00:21:36.870 --> 00:21:39.280
create your menu in the Builder.

00:21:39.400 --> 00:21:43.460
So we've also added ways to create
menus and menu items at runtime

00:21:43.720 --> 00:21:46.940
on the Extension object and on
the individual menus themselves.

00:21:46.940 --> 00:21:52.620
You can modify these menus and menu items
up until they become visible to the user.

00:21:52.620 --> 00:21:56.100
So make sure you check the visible
attributes available both on the

00:21:56.100 --> 00:22:00.060
menus and the menu items before
you make your modifications.

00:22:00.060 --> 00:22:04.250
And whether you create them
in the Builder or at runtime,

00:22:04.250 --> 00:22:08.510
your menus will be available
on the menus array in the menus

00:22:08.510 --> 00:22:10.880
array on the Extension object.

00:22:10.900 --> 00:22:13.350
And you can get to them,
you can find your menu by

00:22:13.350 --> 00:22:17.040
using the unique identifier
you specified when creating it.

00:22:17.410 --> 00:22:20.360
You're probably wondering,
how do I know what's

00:22:20.360 --> 00:22:22.540
going on with my menu?

00:22:22.570 --> 00:22:25.120
How is the user interacting with it?

00:22:26.310 --> 00:22:30.040
We added extension menu events.

00:22:30.110 --> 00:22:35.130
Before the menu is shown to the user,
you're going to get two things.

00:22:35.210 --> 00:22:40.980
One, you're going to get the menu
event with the menu as its target.

00:22:41.200 --> 00:22:45.800
And then you're going to get validated
events for each one of the menu items.

00:22:45.870 --> 00:22:49.720
This is a perfect time for you to
update your menus and your menu items

00:22:49.720 --> 00:22:51.520
before they're shown to the user.

00:22:51.750 --> 00:22:55.030
When the user selects
one of these menu items,

00:22:55.200 --> 00:22:57.860
you'll get a command event.

00:22:57.960 --> 00:23:02.470
Let's take a look at an example
of handling a command event.

00:23:04.310 --> 00:23:08.000
So as you can see,
I've registered the listener

00:23:08.060 --> 00:23:11.440
on the application object,
but you can register it on the

00:23:11.440 --> 00:23:14.020
target or any of its ancestors.

00:23:14.060 --> 00:23:18.660
And I don't have to use
capture because the menu,

00:23:18.990 --> 00:23:22.080
command, and validate events all bubble.

00:23:22.100 --> 00:23:25.850
When we're handling the command event,
all you have to do is check

00:23:26.390 --> 00:23:30.460
the command to figure out what
the user wanted you to do.

00:23:30.550 --> 00:23:34.200
It's that simple.

00:23:34.640 --> 00:23:39.280
and take a look at actually creating
and using one of these menus.

00:23:39.300 --> 00:23:43.290
I'm going to go ahead and modify
Brian's unread tabs extension,

00:23:43.300 --> 00:23:47.690
so that it will show me a list of the
unread tabs and also allow me to close

00:23:47.830 --> 00:23:50.640
out any tabs that I've already read.

00:23:50.640 --> 00:23:54.070
So I'm first going to bring up the
Extension Builder by going to the develop

00:23:54.070 --> 00:23:58.720
menu and showing the Extension Builder,
and then I'm going to add the

00:23:58.730 --> 00:24:02.580
menu and a toolbar item for
that menu to be shown from,

00:24:02.580 --> 00:24:05.660
and then after that,
we'll go ahead and show how

00:24:05.660 --> 00:24:09.980
to handle the command and menu
events in the global page.

00:24:12.040 --> 00:24:17.300
In the Builder, we have added a new
section for creating menus.

00:24:17.310 --> 00:24:21.710
I'm going to click on the
New Menu button and give it a unique

00:24:21.800 --> 00:24:25.530
identifier of Unread Tabs Menu.

00:24:28.430 --> 00:24:33.050
Let's go ahead and create that menu
item for closing all our red tabs.

00:24:33.110 --> 00:24:36.960
I'm going to click the
New Menu Item button,

00:24:36.960 --> 00:24:40.900
give it a title of Close All Red Tabs.

00:24:43.410 --> 00:24:48.640
and a unique identifier
of Close All Red Tabs.

00:24:53.230 --> 00:24:57.900
So let's go to the toolbar item and tell
it that we want to show that menu when

00:24:57.900 --> 00:25:00.580
the user clicks on the toolbar item.

00:25:00.880 --> 00:25:05.390
I'm going to go to the menu
section and select the Unread

00:25:05.390 --> 00:25:07.580
Tabs menu that I've just created.

00:25:07.760 --> 00:25:10.200
Now, last but not least,

00:25:10.380 --> 00:25:15.180
We're going to want to have
access to the titles of all of the

00:25:15.310 --> 00:25:18.730
tabs to show them in that menu.

00:25:18.820 --> 00:25:21.900
So that means we need to have access
to the titles of the web pages,

00:25:21.960 --> 00:25:25.700
so I'm going to set the
access level to All,

00:25:25.730 --> 00:25:28.220
even the secure pages,
because we want to show

00:25:28.220 --> 00:25:29.560
those too in our menu.

00:25:31.660 --> 00:25:35.760
So now that we're done configuring
the extension in the Builder,

00:25:35.770 --> 00:25:41.110
let's go ahead and pull up
the global page and handle

00:25:41.110 --> 00:25:45.160
the command and menu events.

00:25:52.200 --> 00:26:07.900
[Transcript missing]

00:26:09.430 --> 00:26:14.260
So let's talk about the menu event first.

00:26:14.820 --> 00:26:19.280
We're going to want to add menu
items for each of the unread tabs.

00:26:20.160 --> 00:26:23.740
But we're also going to want to
make sure that we clear out any

00:26:23.740 --> 00:26:28.020
other menu items we had from the
previous time we showed the menu,

00:26:28.090 --> 00:26:32.440
because we only want to do this
right before the menu is shown.

00:26:32.710 --> 00:26:35.450
So let's go ahead and
look at the code for that.

00:26:46.800 --> 00:26:53.940
As you can see, I'm appending a menu
item to the event target,

00:26:53.940 --> 00:26:55.800
which is the menu.

00:26:55.800 --> 00:27:00.520
I'm using the index into the unread
tabs array as the identifier,

00:27:00.520 --> 00:27:04.420
and grabbing the title of the tab
as the title of the menu item.

00:27:04.420 --> 00:27:07.320
Then I'm also going to go ahead
and try to get the favicon for

00:27:07.320 --> 00:27:11.000
the site to make it look pretty.

00:27:11.000 --> 00:27:14.250
Let's go ahead and clear
out the old menu items.

00:27:26.780 --> 00:27:31.240
You'll notice that I'm clearing out all
but the first one because I want to keep

00:27:31.300 --> 00:27:35.080
around my "Clear all red tabs" menu item.

00:27:35.410 --> 00:27:41.010
Now, we don't want the user to mistake
clear all red tabs for just

00:27:41.010 --> 00:27:42.900
another one of their unread tabs.

00:27:43.230 --> 00:27:44.740
That could be pretty bad.

00:27:44.910 --> 00:27:50.080
So let's go ahead and add a separator
to make that distinction clear.

00:27:57.300 --> 00:28:00.630
And that's all we need to do to
handle that menu event which is sent

00:28:00.830 --> 00:28:01.960
when the menu is about to be shown.

00:28:04.730 --> 00:28:08.360
Let's go ahead and handle the command
events now that will be sent when

00:28:08.360 --> 00:28:09.820
each of the menu items are selected.

00:28:09.840 --> 00:28:16.940
And let's take on the
Close All Red Tabs menu item first.

00:28:22.740 --> 00:28:24.660
So it's fairly simple.

00:28:24.660 --> 00:28:28.380
All it's doing is getting all
the tabs in the current window,

00:28:28.490 --> 00:28:31.480
comparing them against
the list of unread tabs,

00:28:31.680 --> 00:28:34.600
and closing out all the
ones we've already read.

00:28:34.690 --> 00:28:42.730
All that's left to do is go ahead and
implement handling the menu items,

00:28:43.020 --> 00:28:45.450
the individual unread tab menu items.

00:28:45.800 --> 00:28:49.740
And that's very simple,
because their command is going to be the

00:28:49.850 --> 00:28:52.000
index into that array of unread tabs.

00:28:52.000 --> 00:28:55.970
So all I have to do

00:28:57.960 --> 00:29:01.770
is using that command to index into
that array and activate that tab.

00:29:01.770 --> 00:29:09.140
Let's go ahead and see this in action.

00:29:09.190 --> 00:29:13.890
I'm back at the Extension Builder,
and I'm going to click the reload button.

00:29:16.500 --> 00:29:27.300
And we'll open up a
bunch of background tabs.

00:29:27.370 --> 00:29:27.370
As you can see, the toolbar item is

00:29:27.930 --> 00:29:34.900
Toolbar Items Badge went up,
and if I click on it, it shows our menu.

00:29:36.420 --> 00:29:40.830
Let's go see the page about the iPod.

00:29:40.860 --> 00:29:42.860
It brought me right there.

00:29:44.400 --> 00:29:47.400
If we want to get rid of
everything we've already read,

00:29:47.520 --> 00:29:51.400
all you have to do is select the
"Close all read tabs" option.

00:29:51.400 --> 00:29:54.720
And as you can see,
we're only left with the

00:29:54.720 --> 00:29:57.000
tabs that we haven't read.

00:29:59.050 --> 00:30:00.900
So that's Extension menus.

00:30:00.900 --> 00:30:05.040
I hope you guys go ahead.

00:30:05.130 --> 00:30:07.550
and use them, they're in the seed.

00:30:07.580 --> 00:30:10.210
I can't wait to see what
you guys do with them.

00:30:16.830 --> 00:30:18.130
So what did we just see?

00:30:18.180 --> 00:30:20.750
We saw how to create a menu
in the Extension Builder.

00:30:20.960 --> 00:30:24.500
We saw how to handle the
menu and command events.

00:30:24.800 --> 00:30:28.260
And we saw how to create and
use those extension menu items.

00:30:28.320 --> 00:30:31.680
So menus are pretty cool,
but what if I wanted to show a

00:30:31.680 --> 00:30:37.720
large chunk of content to the user,
maybe a weather map for the local area?

00:30:37.760 --> 00:30:41.560
Well, how could we do this today?

00:30:42.400 --> 00:30:44.940
We could use an extension bar.

00:30:44.940 --> 00:30:50.770
Extension bars are great for showing a
small amount of content that you want

00:30:50.770 --> 00:30:53.890
to persist across windows and tabs,
but they are designed for

00:30:53.890 --> 00:30:55.180
a small amount of content.

00:30:55.280 --> 00:30:58.840
They're given 30 pixels,
and they take that away from the page.

00:30:58.870 --> 00:31:00.220
So what else could we do?

00:31:00.230 --> 00:31:03.560
Well,
we could use full-page extension content,

00:31:03.570 --> 00:31:08.310
which is a file from the
Safari Extension Bundle that is

00:31:08.310 --> 00:31:10.490
loaded into a window or a tab.

00:31:10.750 --> 00:31:13.540
But that requires the user to
navigate away from the page

00:31:13.590 --> 00:31:16.700
they're currently visiting,
and maybe we don't want to interrupt

00:31:16.700 --> 00:31:18.460
their current experience to do that.

00:31:18.520 --> 00:31:22.720
Right now,
we don't really have a good way to show

00:31:22.920 --> 00:31:26.800
Large chunks of custom content
to the user without navigating or

00:31:26.800 --> 00:31:28.080
stealing real estate from the page.

00:31:28.080 --> 00:31:33.990
And we heard your requests,
and we added extension popovers.

00:31:39.800 --> 00:31:46.260
Popovers are a great way to show a large
chunk of custom content to your user.

00:31:46.480 --> 00:31:50.160
Say you wanted to do that
persistent email experience that

00:31:50.260 --> 00:31:52.340
Brian was talking about earlier.

00:31:52.340 --> 00:31:54.880
You can do that login in a popover.

00:31:54.940 --> 00:32:05.050
Just like extension menus,
popovers are shown from toolbar items,

00:32:05.050 --> 00:32:05.050
and they don't steal real
estate from the page.

00:32:05.840 --> 00:32:08.340
And they don't require any navigation.

00:32:08.370 --> 00:32:12.800
As I mentioned before,
they are shown from toolbar items,

00:32:12.880 --> 00:32:17.560
and you can have it shown when the
user clicks on the toolbar item,

00:32:17.600 --> 00:32:20.880
clicks and holds on the toolbar item,
or just call show popover

00:32:20.880 --> 00:32:22.180
on the toolbar item.

00:32:22.270 --> 00:32:24.650
So you're probably wondering, okay,
great,

00:32:24.660 --> 00:32:26.800
what's in these extension popovers?

00:32:26.810 --> 00:32:33.890
Well, HTML, JavaScript, and CSS,
web technologies.

00:32:35.160 --> 00:32:39.820
All this content comes from a file
within the Safari Extension Bundle,

00:32:40.780 --> 00:32:43.860
and it's loaded

00:32:44.040 --> 00:32:45.640
Popover is created.

00:32:45.660 --> 00:32:50.240
The content window attribute represents
the DOM window for that popover.

00:32:50.250 --> 00:32:54.760
You can use the content window on the
popover and on the global page and on

00:32:54.760 --> 00:32:59.800
extension bars to communicate among
these objects in the application layer.

00:33:00.210 --> 00:33:05.980
Say you wanted to send some information
to a global page from a popover.

00:33:06.280 --> 00:33:12.400
All you have to do is call a method
on that global pages content window.

00:33:13.220 --> 00:33:15.890
You can also set a variable
on the content window for the

00:33:15.950 --> 00:33:17.970
bar so that it has new state.

00:33:18.190 --> 00:33:19.500
How do we create these?

00:33:19.500 --> 00:33:24.170
Well, just like for menus,
we added a new section

00:33:24.270 --> 00:33:27.170
to the Extension Builder.

00:33:28.160 --> 00:33:31.510
But you can also create them at
runtime using methods that we

00:33:31.510 --> 00:33:34.390
added onto the Extension object.

00:33:34.660 --> 00:33:38.600
And whether you created them in the
Builder or created them at runtime,

00:33:38.770 --> 00:33:43.320
they'll be available on the popovers
array on the Extension object.

00:33:43.370 --> 00:33:46.280
You should use the unique identifier
you specified when creating the

00:33:46.280 --> 00:33:48.600
popover to find it in that array.

00:33:48.650 --> 00:33:52.320
Let's talk a little bit
more about using popovers.

00:33:52.380 --> 00:33:55.070
When a popover is about to be shown,

00:33:55.740 --> 00:33:58.120
We send a popover event.

00:33:58.120 --> 00:34:02.900
This is the perfect time for you to
update any UI in a pertinent state

00:34:03.340 --> 00:34:06.280
before it is shown to the user.

00:34:07.040 --> 00:34:10.900
One thing you might want to update is
the width and height of your popover

00:34:10.900 --> 00:34:13.610
to make it fit your content better.

00:34:13.870 --> 00:34:17.930
They'll start off with a
default of 300 by 400 pixels,

00:34:17.930 --> 00:34:21.860
but you can change that any time,
even when it's visible to the user.

00:34:21.920 --> 00:34:24.380
Popovers hide when focus is lost.

00:34:24.550 --> 00:34:27.510
So when the user clicks on a page
or clicks somewhere on the window,

00:34:27.660 --> 00:34:29.700
the popover will automatically go away.

00:34:29.740 --> 00:34:34.470
But you can also call hide on the popover
to make it go away programmatically.

00:34:34.650 --> 00:34:40.840
So let's go ahead and actually
create and use an extension popover.

00:34:40.940 --> 00:34:44.710
So sometimes it's hard to determine
what colors will really look

00:34:44.890 --> 00:34:47.390
good together out in the wild.

00:34:47.660 --> 00:34:51.330
It's not obvious when you put two colors
side by side that they'll look good as

00:34:51.340 --> 00:34:53.980
a background color and a text color.

00:34:53.980 --> 00:34:58.490
So a little while back,
I created an extension that will show

00:34:58.600 --> 00:35:01.480
me this color information in a bar.

00:35:01.540 --> 00:35:04.580
And let's go ahead and take
a look at that right now.

00:35:04.640 --> 00:35:07.440
Let's check out a page
that has a lot of colors.

00:35:07.440 --> 00:35:09.060
For example, Flickr.

00:35:09.090 --> 00:35:14.920
I'm going to view my bar by going into
the View menu and showing the Colors bar.

00:35:17.000 --> 00:35:21.070
Now, as you can see,
it shows me a lot of background

00:35:21.070 --> 00:35:23.780
colors and some text colors.

00:35:23.800 --> 00:35:26.300
But wait, there's more.

00:35:28.230 --> 00:35:32.990
There are more text colors,
and there are even border colors.

00:35:33.100 --> 00:35:35.070
The problem is,

00:35:35.540 --> 00:35:39.100
It doesn't really fit that
well in an extension bar,

00:35:39.110 --> 00:35:43.140
but I don't really want to open up
another page to show the user the colors.

00:35:43.140 --> 00:35:45.990
They should be able to see it
while they're on the website.

00:35:46.450 --> 00:35:51.020
So let's put this into a popover where
we'll have enough room to show those

00:35:51.020 --> 00:35:55.700
colors and maybe even the color strings
that are being used to generate them.

00:35:56.110 --> 00:35:59.180
I'm going to show you how easy it
is to turn this display code that's

00:35:59.180 --> 00:36:05.660
being used in a bar into display
code that can be used in a popover.

00:36:05.710 --> 00:36:08.960
First, we need to bring up
the Extension Builder.

00:36:11.840 --> 00:36:17.770
By going to the Develop menu and
selecting Show Extension Builder,

00:36:17.830 --> 00:36:20.780
I'm going to go to my
Color Finder extension.

00:36:21.620 --> 00:36:27.940
And here we need to configure it so
that it uses a popover instead of a bar.

00:36:28.050 --> 00:36:32.140
Once we're done with the configuration,
I'll show you how to handle the

00:36:32.140 --> 00:36:36.730
popover event that is set when it's
just about to be shown to the user.

00:36:36.860 --> 00:36:41.140
So what we need to do first is
probably get rid of that bar.

00:36:41.220 --> 00:36:45.940
So we're just going to click
the X in the right-hand corner.

00:36:46.970 --> 00:36:50.220
And go to the New Popover
section and press the New Popover

00:36:50.380 --> 00:36:52.900
button to create a new popover.

00:36:52.960 --> 00:36:58.290
I'm going to give it a unique
identifier of Show Colors Popover.

00:37:00.110 --> 00:37:06.000
It's going to use the popover.html file,
which we will see in a few minutes.

00:37:06.160 --> 00:37:09.790
And we're going to need a toolbar
item to show this popover from.

00:37:09.890 --> 00:37:14.120
So I'm going to press the
New Toolbar Item button and

00:37:14.120 --> 00:37:17.080
give it a label "Show Colors."

00:37:17.860 --> 00:37:21.480
It needs an image to
show in the toolbar item,

00:37:21.550 --> 00:37:23.870
and a unique identifier.

00:37:26.790 --> 00:37:32.130
Now, I want to point out here that
I'm leaving the command blank.

00:37:32.550 --> 00:37:36.380
If I had specified a command,
the command would be sent when the

00:37:36.380 --> 00:37:39.410
user clicked on the toolbar item,
and the popover wouldn't be

00:37:39.410 --> 00:37:42.130
shown until the user clicked
and held on the toolbar item.

00:37:42.170 --> 00:37:44.420
This is also true of menus.

00:37:44.730 --> 00:37:47.310
So we want to make sure that
we don't have a command here,

00:37:47.310 --> 00:37:51.580
because we want it to be shown when the
user just clicks on the toolbar item.

00:37:51.670 --> 00:37:53.660
So we're done in the Builder.

00:37:53.670 --> 00:37:58.450
Let's go ahead and look at the
code to actually show the popover.

00:37:58.500 --> 00:38:00.650
So let's look at what we have here.

00:38:01.330 --> 00:38:06.960
We have some CSS to style the
content that'll go in the popover.

00:38:07.040 --> 00:38:10.830
And then you'll notice that I'm including
this file called show_colors.js.

00:38:10.960 --> 00:38:16.110
show_colors.js waits for a
message from the content script

00:38:16.350 --> 00:38:20.920
And then unpacks that message,
gets all the color information out of it,

00:38:20.970 --> 00:38:23.800
and generates HTML to
show in the popover.

00:38:23.890 --> 00:38:29.000
This is actually code that I am
sharing with the bar implementation,

00:38:29.030 --> 00:38:34.520
because processing a message
is not specific to popovers.

00:38:34.570 --> 00:38:39.590
It works just as well for bars and
global page as it does for popovers.

00:38:39.600 --> 00:38:43.140
I'm going to be a little
hand-wavy at this point,

00:38:43.210 --> 00:38:47.190
in the interest of keeping it short,
but all of this code for

00:38:47.430 --> 00:38:50.540
the Color Finders Extension,
the Unread Tabs Extension,

00:38:50.680 --> 00:38:53.290
and some other extensions are
available as sample code on

00:38:53.340 --> 00:38:54.900
the Safari Developer Center.

00:38:54.900 --> 00:38:59.140
So you should check it out if you want
to learn more about how I'm generating

00:38:59.540 --> 00:39:03.500
that HTML content for the popover,
and how I'm doing the message

00:39:03.500 --> 00:39:07.400
passing between the content script,
which is injected into the web page,

00:39:07.400 --> 00:39:10.070
and application layer.

00:39:10.380 --> 00:39:12.400
So go ahead and make
sure you check that out.

00:39:12.570 --> 00:39:15.550
But right now, we're going to want to
handle the popover event,

00:39:15.550 --> 00:39:19.900
which is sent right before the
popover is about to be shown.

00:39:19.900 --> 00:39:22.350
And we're going to want to
tell the content script,

00:39:22.390 --> 00:39:25.500
"Okay, right now I actually do
need the color information,

00:39:25.500 --> 00:39:29.740
so gather it and send it back up
to me so I can show those great

00:39:29.740 --> 00:39:35.010
colors in the popover." Let's
go ahead and do that right now.

00:39:36.370 --> 00:39:41.730
So I'm just adding the codes to — adding
the event listener for the popover,

00:39:41.750 --> 00:39:45.900
And then once we get the popover event,
I'm getting rid of any color information

00:39:45.900 --> 00:39:49.380
from the last time we showed the popover,
because that might have

00:39:49.380 --> 00:39:52.380
been a different page,
or it might have changed in between.

00:39:52.420 --> 00:39:55.870
And then I'm going ahead and
dispatching a message to the

00:39:55.900 --> 00:40:00.060
content script telling it,
"Go get that color information."

00:40:02.050 --> 00:40:05.990
So we're almost done,
but I want to make sure that our

00:40:05.990 --> 00:40:08.780
content fits inside the popover.

00:40:08.780 --> 00:40:10.700
We don't want a lot of extra
white space if there aren't

00:40:10.700 --> 00:40:13.870
that many colors on the page,
or we don't want to have a really

00:40:13.940 --> 00:40:17.760
small popover if there are a lot of
colors and force the user to scroll

00:40:17.760 --> 00:40:21.340
through a lot of colors and text.

00:40:21.340 --> 00:40:26.870
So I'm going to go ahead and find that
popover and adjust its height once

00:40:26.870 --> 00:40:30.280
we're done generating that HTML content.

00:40:30.710 --> 00:40:33.300
So as you can see, it's fairly simple.

00:40:33.340 --> 00:40:37.700
It just goes through the popovers
in the array on the extension,

00:40:37.700 --> 00:40:41.840
finds the one with the unique identifier
that we specified in the builder,

00:40:41.860 --> 00:40:44.220
and then sets the height to
be the height of the document.

00:40:44.350 --> 00:40:46.660
So let's go ahead and see this in action.

00:40:46.690 --> 00:40:49.350
I'm going to bring back up the builder.

00:40:51.320 --> 00:40:55.480
and reload the extension.

00:40:55.500 --> 00:40:57.500
The bar went away.

00:40:58.700 --> 00:41:02.210
And as you can see,
we have this new toolbar

00:41:02.210 --> 00:41:04.360
item for showing the colors.

00:41:04.420 --> 00:41:10.300
When I click it — oops,
I forgot one thing.

00:41:11.950 --> 00:41:15.080
For the — in the Builder,
I need to make sure that I specify

00:41:15.830 --> 00:41:22.560
my new popover as the popover to
be shown for the toolbar item.

00:41:22.570 --> 00:41:23.670
So let's try that again.

00:41:23.670 --> 00:41:26.320
I'm going to reload the extension.

00:41:28.660 --> 00:41:31.910
Click on the toolbar item,
and we get this great popover

00:41:32.100 --> 00:41:33.140
with all of our colors.

00:41:33.340 --> 00:41:36.940
You can see the color strings,
and it's much easier

00:41:36.940 --> 00:41:38.900
to get the information.

00:41:46.440 --> 00:41:48.680
So popovers are also
available in the Seed.

00:41:48.680 --> 00:41:51.170
I'm really excited to see
what you guys do with them.

00:41:51.240 --> 00:41:53.560
So go ahead and check them out today.

00:41:55.060 --> 00:41:58.840
And let's just quickly
recap what we just did.

00:41:58.900 --> 00:42:02.580
We saw how to create a popover
in the Extension Builder.

00:42:02.580 --> 00:42:06.200
We saw how to handle that popover event,
which is sent right before the

00:42:06.250 --> 00:42:08.000
popover is about to be shown.

00:42:08.060 --> 00:42:15.600
And we saw how easy it was to reuse code
that is being — doing display in a bar

00:42:15.870 --> 00:42:18.470
to also display information in a popover.

00:42:18.820 --> 00:42:20.700
Today we've learned a lot.

00:42:20.750 --> 00:42:27.280
We've saw how extensions are a great way
to add new functionality to Safari's UI.

00:42:27.310 --> 00:42:30.080
We've talked about the great new
events that we've added so that you

00:42:30.230 --> 00:42:34.750
guys can know what the user is doing
with Reader and with Windows and Tabs.

00:42:34.960 --> 00:42:38.550
We talked about the exciting
new menus API that allows you to

00:42:38.570 --> 00:42:43.700
show the user a list of options
from within the Safari UI.

00:42:43.730 --> 00:42:47.040
And last but not least,
we talked about the popovers API,

00:42:47.070 --> 00:42:51.300
which we know you guys have been wanting
and we hope you have a lot of fun with.

00:42:51.320 --> 00:42:54.580
If you're looking for more information,
you should contact Vicki Murley,

00:42:54.590 --> 00:42:58.140
our awesome
Safari technologies evangelist.

00:42:58.160 --> 00:42:59.590
And you should check out the gallery.

00:42:59.680 --> 00:43:01.680
It's been revamped, it looks pretty cool.

00:43:01.710 --> 00:43:07.220
And this is where your users are gonna
go to find the new and cool extensions.

00:43:07.530 --> 00:43:10.120
Go ahead and check out what other
developers have done and submit

00:43:10.120 --> 00:43:11.900
your extension to the gallery today.

00:43:11.990 --> 00:43:14.650
For a more in-depth coverage,
of these APIs,

00:43:14.790 --> 00:43:18.190
you're going to want to check out
the Safari extensions reference.

00:43:18.330 --> 00:43:23.520
The one that's next to the seed on the
Safari Dev Center has information about

00:43:23.520 --> 00:43:25.080
all the new APIs we talked about today.

00:43:25.080 --> 00:43:30.220
And once we actually release,
you'll see all the information

00:43:30.220 --> 00:43:33.610
in the normal reference docs,
and the guide for creating

00:43:33.740 --> 00:43:37.720
Safari extensions will be updated
to talk about how to create

00:43:37.720 --> 00:43:39.730
popovers and menus as well.

00:43:40.440 --> 00:43:42.160
Speaking of which,
you should check out the

00:43:42.190 --> 00:43:43.560
Safari Developer Center.

00:43:43.560 --> 00:43:46.670
It has sample code,
it has great references for

00:43:46.820 --> 00:43:50.220
doing development for extensions
and other parts of Safari,

00:43:50.220 --> 00:43:54.610
and that's also where you're going to
find a link to the videos from last

00:43:54.620 --> 00:43:59.070
year in iTunes for those of you who
are totally new to extensions and want

00:43:59.070 --> 00:44:05.340
to have a more in-depth coverage of how
to create and use a basic extension.

00:44:05.340 --> 00:44:07.520
There are other labs that
you should check out.

00:44:07.520 --> 00:44:12.210
Right now, right after our session,
there's the HTML5 offline storage,

00:44:12.260 --> 00:44:12.850
and that's here.

00:44:12.980 --> 00:44:14.200
So you should just stick around.

00:44:14.340 --> 00:44:17.960
And then you should also check out the
What's New in CSS Effects and Animations,

00:44:17.960 --> 00:44:20.240
which happened yesterday,
but you'll be able to find the

00:44:20.240 --> 00:44:23.180
video on the conference website.

00:44:23.530 --> 00:44:25.140
Okay.