WEBVTT

00:00:10.910 --> 00:00:13.840
All right, let's get started.

00:00:13.880 --> 00:00:14.790
My name is Max Muller.

00:00:14.980 --> 00:00:17.040
I run the Digital Supply
Chain Engineering Group,

00:00:17.040 --> 00:00:20.440
responsible for iBooks, iTunes,
and the App Stores.

00:00:20.490 --> 00:00:21.980
In this session,
we're going to be looking

00:00:21.980 --> 00:00:22.980
at in-app purchasing.

00:00:23.050 --> 00:00:27.720
In-app purchasing was added in iOS 3.0,
and in the past two years has grown to

00:00:27.720 --> 00:00:32.260
represent a significant portion of the
revenue generated by our developers.

00:00:32.310 --> 00:00:36.060
If you look at the App Store today,
in the top grossing application chart,

00:00:36.090 --> 00:00:39.320
of the top 25 applications
in the App Store,

00:00:39.380 --> 00:00:43.880
14 of them are free and generating all
of the revenue through the use of an app.

00:00:44.500 --> 00:00:46.300
Now before we get started,
I'd like to extend a warm welcome

00:00:46.300 --> 00:00:47.900
to our Mac OS X developers.

00:00:48.000 --> 00:00:51.520
On Monday, we announced that with Lion,
we are bringing In-App Purchasing

00:00:52.110 --> 00:00:54.370
to the Mac App Store.

00:00:55.470 --> 00:00:56.900
So let's look at what
we're going to cover today.

00:00:56.970 --> 00:01:00.020
First, we'll do a brief introduction
on what is an In App Purchase.

00:01:00.040 --> 00:01:03.060
Next, we'll look at the types of
In App Purchases we currently support.

00:01:03.090 --> 00:01:06.620
We'll look at how you set up your
In App Purchases in iTunes Connect.

00:01:06.880 --> 00:01:09.940
We'll then look at how you
test your In App Purchases in

00:01:09.940 --> 00:01:11.560
our sandbox test environment.

00:01:11.730 --> 00:01:15.500
And finally, how you submit your
In App Purchases for review.

00:01:15.550 --> 00:01:20.100
Then we'll jump into the client side and
look at Store Kit on both iOS and iOS X.

00:01:20.260 --> 00:01:24.040
This will be looking at how you retrieve
In App Purchase items from the server,

00:01:24.110 --> 00:01:27.220
how you initiate transactions
and complete transactions,

00:01:27.260 --> 00:01:30.080
and finally, how you verify receipts.

00:01:30.300 --> 00:01:32.850
We'll then do a deep dive
into our newest In-App type,

00:01:32.950 --> 00:01:34.580
the auto-renewing subscription.

00:01:34.680 --> 00:01:37.860
We'll follow it up with In-App reporting,
and finally wrap it up

00:01:37.860 --> 00:01:39.440
with some best practices.

00:01:39.500 --> 00:01:40.400
So let's get right into it.

00:01:40.440 --> 00:01:42.130
What is an In-App Purchasse?

00:01:42.380 --> 00:01:44.480
In a nutshell,
this allows enhanced functionality

00:01:44.480 --> 00:01:48.230
and content to be sold directly
within your application.

00:01:48.350 --> 00:01:50.510
This is implemented
using the Store Kit API,

00:01:50.600 --> 00:01:53.970
which was introduced in iOS
3.0 and is now new for Lion.

00:01:54.100 --> 00:01:58.020
Store Kit handles all of the
prompting the user to authenticate,

00:01:58.020 --> 00:02:01.240
as well as securely
authorizing the transaction.

00:02:01.280 --> 00:02:04.180
Once the transaction is complete,
you will be given back a receipt.

00:02:04.240 --> 00:02:06.540
You can take that receipt
and pass it to your server,

00:02:06.590 --> 00:02:09.420
which can then pass it to
our server for verification.

00:02:09.460 --> 00:02:13.270
This is a great tool for
helping fight piracy.

00:02:13.740 --> 00:02:16.420
One other thing to point out about
In-App Purchasing is that In-App is

00:02:16.420 --> 00:02:18.200
strictly a commerce level feature.

00:02:18.230 --> 00:02:21.390
If after a transaction is complete,
it is your responsibility to

00:02:21.390 --> 00:02:26.930
deliver any assets from your server
down to a device or to a computer.

00:02:28.550 --> 00:02:32.820
Now, a few example usages would be adding
a pay feature to a free application,

00:02:32.930 --> 00:02:35.760
adding additional levels to a game,
or purchasing virtual

00:02:36.120 --> 00:02:38.890
goods like vegetables,
berries, or brains.

00:02:39.460 --> 00:02:42.590
And finally, what launched a few months
back with the Daily,

00:02:42.640 --> 00:02:45.240
we've now implemented a full
auto-renewing subscription.

00:02:45.270 --> 00:02:49.110
Allows you to add full subscription
support to your applications.

00:02:49.770 --> 00:02:52.660
So now let's look at the types of
In App Purchases we currently support.

00:02:52.830 --> 00:02:58.020
There are four of them: Non-Consumable,
Consumable, Non-Renewing Subscription,

00:02:58.020 --> 00:03:00.000
and Auto-Renewing Subscription.

00:03:00.310 --> 00:03:03.240
So diving into the non-consumable,
this is available on iOS

00:03:03.240 --> 00:03:04.480
and is now new for Lion.

00:03:04.620 --> 00:03:08.030
This is designed to be purchased
once and only once by a customer.

00:03:08.130 --> 00:03:10.190
If you think of how the
App Store works for applications,

00:03:10.260 --> 00:03:13.310
if you were to buy an app on one
device and then attempt to buy that

00:03:13.440 --> 00:03:17.510
same application on a second device,
we would allow you to download

00:03:17.510 --> 00:03:20.640
that application on the
second device again for free.

00:03:20.710 --> 00:03:23.510
Non-consumable In-App Purchases
work in the exact same way.

00:03:23.640 --> 00:03:26.590
We will only ever charge the
customer once for the purchase

00:03:26.590 --> 00:03:28.100
of a non-consumable In-App.

00:03:28.370 --> 00:03:30.100
Now,
one other thing to point out is that it

00:03:30.160 --> 00:03:34.180
is your responsibility to ensure that
non-consumable In-Apps are made available

00:03:34.240 --> 00:03:36.440
across all devices for a given user.

00:03:36.500 --> 00:03:39.090
You do this using the Restore
Completed Transactions API,

00:03:39.300 --> 00:03:41.940
which we'll be going into
more detail later on.

00:03:42.010 --> 00:03:45.460
Two examples here would be a new
level in a game or an additional

00:03:45.460 --> 00:03:47.300
feature in an application.

00:03:48.330 --> 00:03:49.900
Next up are consumables.

00:03:50.010 --> 00:03:52.440
These are available on
iOS and now new for Lion.

00:03:52.590 --> 00:03:55.600
These are designed to be purchased
multiple times by the consumer.

00:03:55.720 --> 00:03:58.760
Every time a transaction is
completed for the same item,

00:03:58.760 --> 00:04:00.700
the user will be charged again.

00:04:00.790 --> 00:04:02.900
Again,
a few examples would be pet food or

00:04:02.930 --> 00:04:07.120
other items that are consumed as part of
gameplay or virtual currency within the

00:04:07.510 --> 00:04:09.570
application as a means of advancement.

00:04:11.030 --> 00:04:12.890
Next up is non-renewing subscriptions.

00:04:13.090 --> 00:04:15.050
This is only available on iOS.

00:04:15.240 --> 00:04:18.700
We introduced the non-renewing
subscription in iOS 3.

00:04:18.700 --> 00:04:22.120
It is required that you, the developer,
do all the work to implement

00:04:22.240 --> 00:04:24.300
subscription management on your own.

00:04:24.300 --> 00:04:27.610
We've now deprecated the non-renewing
subscriptions in favor of the

00:04:27.610 --> 00:04:29.500
auto-renewing subscriptions.

00:04:29.500 --> 00:04:32.500
Now the auto-renewing subscriptions we're
not going to cover right here because

00:04:32.500 --> 00:04:36.700
we have an entire separate section
that we will go over those in detail.

00:04:36.830 --> 00:04:39.700
So now let's look at how you'd
set up a non-consumable or

00:04:39.870 --> 00:04:41.440
consumable in iTunes Connect.

00:04:41.780 --> 00:04:45.390
First up is the metadata about
your In App Purchase item.

00:04:45.570 --> 00:04:48.400
This would be the type,
either consumable or non-consumable.

00:04:48.440 --> 00:04:51.140
A reference name,
this is only your name for

00:04:51.140 --> 00:04:52.200
the In App Purchase item.

00:04:52.290 --> 00:04:55.040
This actually will not be
displayed to the customer anywhere.

00:04:55.080 --> 00:04:56.530
Next is a product ID.

00:04:56.720 --> 00:04:58.770
This is how you will reference
the In App Purchase item.

00:04:58.870 --> 00:05:00.660
Through Store Kit,
you'll be passing the product ID to

00:05:00.660 --> 00:05:02.430
look it up from the server side.

00:05:02.670 --> 00:05:05.220
The product ID will also appear
in your financial reports

00:05:05.280 --> 00:05:07.510
at the end of the month.

00:05:07.650 --> 00:05:10.980
Next up would be your display
name and display description.

00:05:11.060 --> 00:05:14.000
Here you can localize it into
as many languages as you want.

00:05:14.060 --> 00:05:16.760
One thing to note is that Store Kit,
when it actually is popping

00:05:16.760 --> 00:05:19.640
up the purchase dialog,
that's actually a server-driven dialog.

00:05:19.700 --> 00:05:22.860
So we're using the display name that
you've entered into iTunes Connect in

00:05:22.860 --> 00:05:25.300
the dialog that's popped up for the user.

00:05:25.420 --> 00:05:27.620
Next would be pricing,
where you'd be setting cleared for sale,

00:05:27.620 --> 00:05:29.120
as well as a price tier.

00:05:29.150 --> 00:05:32.700
All price tiers are available,
with the exception of the free tier.

00:05:32.720 --> 00:05:36.780
And finally, for review purposes only,
we ask you to provide a screenshot.

00:05:37.700 --> 00:05:40.700
Now to get to add In App Purchas
items to an application,

00:05:40.700 --> 00:05:43.680
you log in iTunes Connect,
select the application,

00:05:43.680 --> 00:05:45.850
and click Manage In App Purchases.

00:05:47.200 --> 00:05:49.450
You'll then click the
Add New In-App Purchase

00:05:49.450 --> 00:05:50.940
Item and select the type.

00:05:51.030 --> 00:05:53.560
In this case,
I'm going to choose a consumable.

00:05:54.540 --> 00:05:56.540
First up,
we'll be setting up the reference name,

00:05:56.540 --> 00:05:57.850
as well as the product ID.

00:05:58.100 --> 00:05:59.540
So I've set up rockets.

00:05:59.550 --> 00:06:03.970
And we recommend using a reverse
domain name syntax for your product ID.

00:06:04.650 --> 00:06:05.980
Once that's set up,
you'll now be adding the

00:06:06.010 --> 00:06:09.240
localizations for the display
name and the display description.

00:06:09.290 --> 00:06:13.000
Here we recommend localizing all
of your In App Purchas items in the

00:06:13.000 --> 00:06:17.330
same number of languages for which
you've localized your application.

00:06:19.390 --> 00:06:21.900
Next up would be pricing.

00:06:22.010 --> 00:06:25.370
And finally, again,
for review purposes only, a screenshot.

00:06:27.300 --> 00:06:30.010
So once you've set up all of
your In-App Purchas items,

00:06:30.070 --> 00:06:31.730
the next step is to test them.

00:06:31.860 --> 00:06:33.830
For this,
we've actually built an entirely separate

00:06:33.830 --> 00:06:35.500
environment that we call the Sandbox.

00:06:35.550 --> 00:06:37.600
A few things to point
out about the Sandbox:

00:06:37.670 --> 00:06:41.440
development-signed builds of iOS
or OS X are automatically pointed

00:06:41.480 --> 00:06:43.100
at the Sandbox environment.

00:06:43.210 --> 00:06:45.870
Payments are not processed
in the Sandbox environment,

00:06:45.870 --> 00:06:47.690
but transactions are returned.

00:06:47.780 --> 00:06:51.060
And you must leverage a special
Sandbox test user account,

00:06:51.190 --> 00:06:55.030
not your regular store production
account for Sandbox testing.

00:06:55.950 --> 00:06:58.940
Now the sandbox test accounts,
the same sandbox test account

00:06:59.390 --> 00:07:03.520
can work on both iOS and
Lion In-App Purchaset testing.

00:07:03.610 --> 00:07:06.430
Also,
if you are using application receipt

00:07:06.430 --> 00:07:10.710
verification for app purchases for OS X,
the same sandbox account

00:07:10.710 --> 00:07:12.320
can work for that as well.

00:07:12.430 --> 00:07:14.890
Now one thing that we always like
to point out about when using the

00:07:14.890 --> 00:07:18.370
sandbox is that you must first
log out on your device of your

00:07:18.460 --> 00:07:20.760
production iTunes store account,
go into Settings,

00:07:20.890 --> 00:07:22.460
select Store and Log Out.

00:07:22.640 --> 00:07:26.590
Leave yourself logged out, quit Settings,
and then launch your application.

00:07:26.850 --> 00:07:29.760
If you are successfully pointing out
the sandbox environment on all the

00:07:29.760 --> 00:07:34.170
store kit dialogues that come through,
you will see environment:sandbox.

00:07:36.580 --> 00:07:38.930
To create a sandbox user,
you're going to log into iTunes Connect,

00:07:38.930 --> 00:07:41.420
click Manage Users,
and click Add New User.

00:07:41.440 --> 00:07:44.430
At this point,
you'll select the test user.

00:07:45.290 --> 00:07:48.480
Here we'll prompt you for all the basic
information about setting up an account,

00:07:48.550 --> 00:07:51.400
the most important one being
the iTunes store or country.

00:07:51.540 --> 00:07:55.120
For each country that you wish
to test your In App Purchases in,

00:07:55.120 --> 00:07:57.700
in terms of localized display
as well as currency handling,

00:07:57.900 --> 00:08:02.220
you want to set up a separate
iTunes sandbox test account.

00:08:03.370 --> 00:08:05.630
Now once you have tested
your In-App items,

00:08:05.660 --> 00:08:08.420
and I mean thoroughly
tested your In-App items,

00:08:08.440 --> 00:08:10.470
the final step is for submission.

00:08:10.640 --> 00:08:13.140
Now the first time you submit
any In-App Purchases items,

00:08:13.190 --> 00:08:15.410
they must be submitted
with an application binary.

00:08:15.740 --> 00:08:17.770
This means that we're going to
tie your In-App Purchases items

00:08:17.840 --> 00:08:19.050
and your application together.

00:08:19.220 --> 00:08:21.360
We're going to move through
the review process as one.

00:08:21.420 --> 00:08:23.660
If there are issues with
either In-App Purchases items

00:08:23.710 --> 00:08:26.170
or your application binary,
they'll all be rejected back

00:08:26.180 --> 00:08:28.510
to you to essentially correct.

00:08:28.610 --> 00:08:31.060
Now once you have an application
live on the App Store,

00:08:31.100 --> 00:08:33.400
you can then submit new
future In-App Purchases

00:08:33.460 --> 00:08:35.200
items in an ad hoc manner.

00:08:35.240 --> 00:08:37.520
In which case, you're just setting up
In-App Purchases items,

00:08:37.610 --> 00:08:39.710
submitting them,
and they travel through the

00:08:40.060 --> 00:08:41.570
review process independent.

00:08:43.900 --> 00:08:47.370
To submit one In App Purchasse item,
log in iTunes Connect,

00:08:47.470 --> 00:08:50.990
select that In App Purchasse item,
and click on the upper right hand

00:08:50.990 --> 00:08:52.880
corner to submit it for review.

00:08:53.700 --> 00:08:55.930
And if your application has
lots of In App Purchasse items,

00:08:55.940 --> 00:08:57.950
we also provide a nice listing interface.

00:08:57.950 --> 00:08:59.870
You can see all your
In App Purchasse items,

00:08:59.970 --> 00:09:02.230
select the ones you want,
and with one click,

00:09:02.230 --> 00:09:04.470
submit all of those for review.

00:09:05.520 --> 00:09:07.770
And now what I'd like to do is
bring up Jean-Pierre to walk us

00:09:07.770 --> 00:09:10.390
through Store Kit on iOS and OS X.

00:09:10.540 --> 00:09:11.400
Jean-Pierre?

00:09:12.400 --> 00:09:14.100
Thank you, Max.

00:09:15.590 --> 00:09:17.990
Hi, my name is Jean-Pierre Ciudaad,
and I am the engineering

00:09:17.990 --> 00:09:20.940
manager for the Mac App Store.

00:09:21.060 --> 00:09:24.590
So I'm here today to talk to
you about the Store Kit API,

00:09:24.670 --> 00:09:27.280
both on iOS and on Mac OS X.

00:09:27.280 --> 00:09:30.480
So first, I will start by giving you
an overview of the API,

00:09:30.530 --> 00:09:34.340
and then I will spend more time telling
you about how you can get product

00:09:34.390 --> 00:09:39.010
information for your in-app purchases,
how you can actually purchase

00:09:39.010 --> 00:09:43.990
in-app purchases from the app store,
and how you can restore

00:09:43.990 --> 00:09:45.780
completed transactions.

00:09:45.870 --> 00:09:49.600
Finally, I will spend more time telling
you about receipts and what the

00:09:49.600 --> 00:09:52.440
differences are between iOS and Mac OS.

00:09:52.460 --> 00:10:00.020
Now, if you are an iOS developer who is
already familiar with in-app purchases,

00:10:00.070 --> 00:10:02.520
you will find this
presentation very familiar,

00:10:02.530 --> 00:10:08.680
because the API is essentially
identical between iOS and Mac OS X.

00:10:10.050 --> 00:10:13.820
So let's start right away with
an overview of the Store Kit API.

00:10:13.890 --> 00:10:16.850
So step by step,
the first thing you need to do is to

00:10:16.960 --> 00:10:20.850
get your In App Purchases identifiers,
the product identifiers.

00:10:20.980 --> 00:10:25.060
You get these either from
your application bundle,

00:10:25.120 --> 00:10:27.690
or you get them from your server.

00:10:27.920 --> 00:10:31.940
Once you have those identifiers,
you actually use the Store Kit API to

00:10:31.940 --> 00:10:33.840
get product information.

00:10:34.000 --> 00:10:36.540
The product information
includes things like the title,

00:10:36.540 --> 00:10:40.990
the localized title,
localized description, and the price.

00:10:41.420 --> 00:10:46.290
This is what you will use to
actually show UI in your application,

00:10:46.290 --> 00:10:50.280
and let the user decide
which items he wants to buy.

00:10:52.530 --> 00:10:56.550
Once the user clicks on the Buy button
on one of your In-App Purchases,

00:10:56.590 --> 00:10:58.900
you want to actually make the purchase.

00:10:58.900 --> 00:11:01.620
So you make the purchase
using the Store Kit API,

00:11:01.800 --> 00:11:05.320
and you do it from the App Store.

00:11:07.360 --> 00:11:12.340
Once the purchase is successful,
or once the purchase has been processed,

00:11:12.500 --> 00:11:16.200
you will need to actually process
the transaction on your side.

00:11:16.200 --> 00:11:20.010
And what that means is that either
handle the error if there is one,

00:11:20.040 --> 00:11:24.460
or process the receipt,
and we'll talk about

00:11:24.460 --> 00:11:26.140
this a little bit later.

00:11:26.830 --> 00:11:31.330
If the transaction is successful,
the user's credit card has been charged

00:11:31.630 --> 00:11:40.870
or his account has been debited,
you need to make the feature available

00:11:40.870 --> 00:11:40.870
to the user or you need to download
additional assets from your server.

00:11:41.440 --> 00:11:43.980
And once you're done with that,
you need to tell us,

00:11:44.000 --> 00:11:48.300
you need to tell the App Store that
the transaction was finished.

00:11:48.470 --> 00:11:49.450
This is very important.

00:11:49.450 --> 00:11:57.440
If you forget to do that,
we will keep bringing back the unfinished

00:11:57.440 --> 00:11:58.830
transaction over and over again,
every time the user

00:11:58.830 --> 00:11:58.830
launches the application.

00:12:02.930 --> 00:12:08.050
So out of those seven steps,
four steps actually we will

00:12:08.070 --> 00:12:12.500
be providing you with APIs in
Store Kit for four of these steps.

00:12:12.530 --> 00:12:15.700
Getting the product information,
making the purchase,

00:12:15.760 --> 00:12:18.750
processing the transaction,
and finishing the transaction.

00:12:18.830 --> 00:12:21.580
So let's look at those steps.

00:12:22.130 --> 00:12:23.660
How do you get product information?

00:12:23.900 --> 00:12:26.300
So like I said earlier,
the first thing you need to do

00:12:26.300 --> 00:12:31.170
is to get the list of product
identifiers out of your application

00:12:31.440 --> 00:12:34.160
bundle or from your server.

00:12:34.270 --> 00:12:40.680
Now those product identifiers should
match the data you've been entering

00:12:40.680 --> 00:12:40.680
in iTunes Connect previously.

00:12:41.570 --> 00:12:44.680
So once you have this array
of product identifiers,

00:12:44.680 --> 00:12:48.280
you use the SK product
request to create the request.

00:12:48.280 --> 00:12:52.550
So here you have an example of
how you can create the request.

00:12:52.610 --> 00:12:56.590
You can see that you pass
in an array of identifiers.

00:12:56.860 --> 00:13:00.700
You set yourself as a delegate,
and then you start the request.

00:13:00.910 --> 00:13:05.580
Now, you need to implement the SK product
request delegate protocol.

00:13:05.720 --> 00:13:11.220
And obviously,
you need to implement the product request

00:13:11.830 --> 00:13:15.110
In that method,
you will get a response back,

00:13:15.110 --> 00:13:18.820
and the response will
contain an array of products,

00:13:18.820 --> 00:13:21.880
and that array of products,
for each product,

00:13:21.990 --> 00:13:26.340
you will get a localized name,
localized description, and the price.

00:13:26.500 --> 00:13:31.340
Now, you will also be getting an array
of invalid product identifiers.

00:13:31.500 --> 00:13:34.850
What these are,
they are identifiers that you

00:13:35.100 --> 00:13:39.300
actually have passed to the App Store,
but we didn't recognize them.

00:13:39.410 --> 00:13:42.640
So this could happen if, for example,
you have hard-coded

00:13:42.750 --> 00:13:45.580
identifiers in your app,
but you have not yet entered

00:13:46.270 --> 00:13:48.400
them into iTunes Connect.

00:13:48.540 --> 00:13:53.640
Now, in production,
this could also be in-app purchases

00:13:53.640 --> 00:13:57.390
that were submitted but not approved.

00:13:59.370 --> 00:14:06.270
You also need to handle the error case,
obviously,

00:14:06.270 --> 00:14:06.270
and present appropriate UI to the user.

00:14:08.120 --> 00:14:11.240
So once you have the list of
products and you have the names

00:14:11.300 --> 00:14:14.630
and the price and all that,
you need to actually show UI,

00:14:14.630 --> 00:14:20.480
and you need to let the user decide
which In App Purchas he wants to buy.

00:14:20.620 --> 00:14:24.420
So once a user clicks the Buy button,
you know what product

00:14:24.440 --> 00:14:27.640
the user wants to buy,
and you need to prepare for the purchase.

00:14:27.750 --> 00:14:31.630
So the first thing you do,
you need to add yourself as an

00:14:31.650 --> 00:14:34.310
observer of the SK Payment Queue.

00:14:34.420 --> 00:14:37.010
The SK Payment Queue
is an asynchronous API.

00:14:37.190 --> 00:14:41.440
You need to implement the SK Payment
Transaction Observer protocol.

00:14:41.520 --> 00:14:44.640
So here you can see the Payment Queue,
which will be the callback

00:14:44.760 --> 00:14:51.000
that will be invoked once the
payment has been processed.

00:14:52.740 --> 00:14:54.720
So how do you make the purchase?

00:14:54.780 --> 00:14:58.980
With the product that the user selected,
you create an SK payment.

00:14:59.210 --> 00:15:02.800
And then you just add this
SK payment to the payment queue.

00:15:02.890 --> 00:15:05.040
And that's all you need to do.

00:15:05.140 --> 00:15:09.030
What will happen is that your observer,
once the payment has been processed,

00:15:09.030 --> 00:15:12.880
your observer will get called,
and you will get an array of transactions

00:15:13.830 --> 00:15:15.900
when your observer gets called.

00:15:15.990 --> 00:15:20.270
And if you bought one product,
you will get one transaction back.

00:15:20.270 --> 00:15:24.620
You will see a case later with
restoring where you can get an

00:15:24.700 --> 00:15:26.840
array of them when you're restoring.

00:15:26.950 --> 00:15:29.580
But for now,
you get one transaction back,

00:15:29.580 --> 00:15:33.280
and you're going to check
the state of the transaction.

00:15:33.400 --> 00:15:36.380
If the state is purchased,
or the SK payment

00:15:36.470 --> 00:15:39.880
transaction state purchased,
that means that the

00:15:39.930 --> 00:15:43.560
transaction was successful,
the user has been charged,

00:15:43.660 --> 00:15:45.860
so you need to make the asset available.

00:15:45.990 --> 00:15:49.120
At that moment,
receipt data is also available,

00:15:49.120 --> 00:15:52.220
and we'll talk about
that a little bit later.

00:15:52.400 --> 00:15:55.710
Another state that you can
have is the transaction failed.

00:15:55.950 --> 00:15:59.500
And in that case,
you need to show UI to the user.

00:15:59.620 --> 00:16:03.610
Now, if the state is purchased, again,
you need to make the content

00:16:03.680 --> 00:16:07.010
available to the user,
either by downloading additional

00:16:07.010 --> 00:16:12.720
data from your server or by unlocking
features in your application.

00:16:12.970 --> 00:16:15.380
Then you need to complete
the transaction by calling

00:16:15.380 --> 00:16:17.710
Finish Transaction on the payment queue.

00:16:17.830 --> 00:16:19.500
Again, this is something very important.

00:16:19.650 --> 00:16:21.790
Do not forget to do that.

00:16:21.800 --> 00:16:27.640
And you need to do it whether the
transaction was successful or failed.

00:16:29.930 --> 00:16:30.600
Restoring.

00:16:30.730 --> 00:16:34.650
So Max earlier talked about
restoring completed transactions.

00:16:34.860 --> 00:16:40.100
So if the user decides to move the
application on a different device,

00:16:40.100 --> 00:16:43.920
or to re-download the application
from the Mac App Store,

00:16:43.920 --> 00:16:47.840
for example, on a different Mac,
the user is entitled to get all

00:16:47.840 --> 00:16:52.370
these non-consumable In App Purchases
back on the different device.

00:16:52.470 --> 00:16:55.730
So the way you do this,
you can get all of them at once by

00:16:55.730 --> 00:16:59.900
calling restoreCompletedTransactions
on the payment queue.

00:17:00.410 --> 00:17:05.080
Basically, the same observer that you
set earlier will be called

00:17:05.080 --> 00:17:07.300
with a list of transactions.

00:17:07.300 --> 00:17:09.630
That's when you get an
array of transactions.

00:17:09.750 --> 00:17:14.440
And then for each of the transactions,
you need to verify the state,

00:17:14.520 --> 00:17:17.930
make the content available to the user,
and then for each of them,

00:17:17.930 --> 00:17:21.730
you need to call finish
transaction in the payment queue.

00:17:21.830 --> 00:17:24.820
Optionally, you can also implement,
I'm not going to read it,

00:17:24.980 --> 00:17:27.950
but you can implement
this method at the end,

00:17:27.950 --> 00:17:31.320
which basically would allow you,
for example,

00:17:31.320 --> 00:17:34.750
to stop a progress bar if you
decided to show progress in your app.

00:17:34.760 --> 00:17:38.580
Restoring, by the way,
is not currently available

00:17:38.580 --> 00:17:42.760
in the DP4 version of Lion,
so for Mac OS developers,

00:17:42.760 --> 00:17:48.670
if you try the restoring APIs,
they are not yet fully implemented,

00:17:48.750 --> 00:17:51.180
but they will be available
for the GM version.

00:17:53.770 --> 00:17:55.860
Receipts.

00:17:55.960 --> 00:17:59.800
So receipts are signed
files signed by Apple,

00:17:59.840 --> 00:18:06.110
and those files allow you to verify
the purchase of In App Purchases.

00:18:06.510 --> 00:18:10.180
They are very different
between iOS and Mac OS.

00:18:10.390 --> 00:18:11.880
The format is different.

00:18:12.010 --> 00:18:15.540
So on iOS, receipts are opaque.

00:18:15.810 --> 00:18:17.540
You cannot read them.

00:18:17.680 --> 00:18:21.750
And when on Mac OS,
they are using an industry standard

00:18:21.750 --> 00:18:24.770
for signed archive called PKCS7.

00:18:24.950 --> 00:18:28.300
And you can find
documentation on the web.

00:18:28.300 --> 00:18:30.100
How do you verify the receipt?

00:18:30.170 --> 00:18:34.430
On iOS,
you send the receipt to your server,

00:18:34.430 --> 00:18:38.070
and your server is supposed to
turn around and send it to Apple.

00:18:38.230 --> 00:18:40.860
What Apple will do is that
it will actually expose the

00:18:40.860 --> 00:18:42.900
information in the receipt for you.

00:18:42.910 --> 00:18:44.780
And it will send it back to your server.

00:18:44.900 --> 00:18:49.300
And then your server can decide whether
or not to make assets available.

00:18:50.210 --> 00:18:53.430
On Mac OS,
because this is a standard format,

00:18:53.550 --> 00:18:56.090
you are able to verify
the receipt locally.

00:18:56.110 --> 00:18:58.100
So you can do it on launch
of your application,

00:18:58.100 --> 00:19:00.540
or you can do it whenever you want.

00:19:00.550 --> 00:19:03.960
In addition to that,
we are planning to make

00:19:03.960 --> 00:19:08.610
receipt verification available
by your server with Apple.

00:19:08.980 --> 00:19:11.790
This is not yet in place,
but it will be in place by

00:19:11.790 --> 00:19:13.900
the time we go GM online.

00:19:14.520 --> 00:19:16.750
The scope of the receipt.

00:19:16.860 --> 00:19:21.870
The iOS receipt is specific
to one In App Purchas.

00:19:22.370 --> 00:19:26.630
What that means is that if the
user made 100 In App Purchases,

00:19:26.960 --> 00:19:30.390
you will have 100 receipts in
your application container.

00:19:30.530 --> 00:19:32.400
Very different on Mac OS.

00:19:32.440 --> 00:19:36.470
The receipt that contains the
In App Purchases on Mac OS is exactly the

00:19:36.470 --> 00:19:41.400
same receipt as the one that is delivered
today when the user purchases the app.

00:19:41.400 --> 00:19:43.570
So that same receipt,
in addition to containing

00:19:43.570 --> 00:19:47.680
information about the app purchase,
will contain information about

00:19:47.680 --> 00:19:49.400
all the In App Purchases.

00:19:49.400 --> 00:19:51.390
Actually, sorry, let me rephrase that.

00:19:51.390 --> 00:19:54.380
About all the non-consumable
In App Purchases.

00:19:54.400 --> 00:19:57.360
How do you get the receipt?

00:19:57.370 --> 00:20:06.610
On iOS, the receipt data is available for
you as part of an NSData blob that

00:20:06.660 --> 00:20:10.400
comes back with the transaction
when the transaction is successful.

00:20:10.400 --> 00:20:13.470
basically purchased or restored.

00:20:14.500 --> 00:20:22.190
On Mac OS,
the receipt is actually delivered into

00:20:22.190 --> 00:20:24.880
your application bundle by the App Store.

00:20:25.000 --> 00:20:28.960
This happens automatically,
you have nothing to do.

00:20:29.110 --> 00:20:32.320
On iOS,
when I mentioned the blob of data,

00:20:32.510 --> 00:20:35.680
you are responsible for taking
that data and saving it in

00:20:35.680 --> 00:20:37.820
the application container.

00:20:38.610 --> 00:20:42.180
So you can see that receipts are very
different between iOS and Mac OS X.

00:20:42.250 --> 00:20:46.530
And this is basically the
main difference in the

00:20:46.590 --> 00:20:50.010
Store Kit API between iOS and Mac OS X.

00:20:51.340 --> 00:20:55.790
So let me,
just to make sure we all agree on this,

00:20:55.910 --> 00:20:58.470
let me go back a little
bit on the differences.

00:20:58.520 --> 00:21:04.200
iOS receipts, this is a blob,
you get it via a blob of NIS data that

00:21:04.200 --> 00:21:08.300
is a property of the transaction object,
and you will get the data

00:21:08.300 --> 00:21:11.970
when the transaction was
either purchased or restored.

00:21:12.190 --> 00:21:17.310
You are responsible for saving the
receipt in the application container.

00:21:17.420 --> 00:21:23.100
You can use that receipt to verify
transactions by sending it to your server

00:21:23.100 --> 00:21:25.100
and have your server send it to Apple.

00:21:28.220 --> 00:21:37.470
Mac OS Receipt, however,
are placed in the application

00:21:37.470 --> 00:21:37.470
bundle by the App Store.

00:21:37.470 --> 00:21:37.470
This is done for you automatically
every time a transaction is successful.

00:21:37.690 --> 00:21:39.750
There is one receipt per application.

00:21:39.850 --> 00:21:42.790
The same receipt today that contains
information about the application

00:21:42.890 --> 00:21:46.950
purchase also includes information
about all your in-app purchases,

00:21:46.950 --> 00:21:49.950
all the non-consumable in-app purchases.

00:21:50.350 --> 00:21:55.080
To validate, you need to validate the
in-app purchase -- well,

00:21:55.080 --> 00:21:59.100
you need to validate in-app purchases
in launch if you want to enable

00:21:59.100 --> 00:22:00.700
some features in your application.

00:22:00.700 --> 00:22:03.910
So you can do that by
looking at the receipt.

00:22:04.140 --> 00:22:06.580
You can do that locally.

00:22:06.640 --> 00:22:11.980
It's a known archive format,
PKCS7 using an ASN1 format.

00:22:12.060 --> 00:22:13.440
It's signed by Apple.

00:22:13.490 --> 00:22:16.770
And the receipts on Mac OS are
tied to the machine.

00:22:17.140 --> 00:22:20.810
And there is documentation
available today that will tell

00:22:20.810 --> 00:22:26.290
you how to verify that the receipt
is valid on a specific machine.

00:22:26.590 --> 00:22:36.090
Like I said, by the time we ship Lion,
you will be able to send the receipt to

00:22:36.090 --> 00:22:36.090
Apple to extract data out of the receipt.

00:22:37.660 --> 00:22:40.800
So a few tips.

00:22:40.960 --> 00:22:45.960
Do not forget to call finish
transaction on the payment queue

00:22:46.030 --> 00:22:51.000
every time you have a successful
transaction or a failed transaction.

00:22:51.350 --> 00:22:54.950
Believe it or not, today on iOS,
this is the cause of most

00:22:54.950 --> 00:22:59.200
problems that developers
encounter within app purchases.

00:22:59.330 --> 00:23:01.890
People always forget to
call finish transactions.

00:23:01.940 --> 00:23:04.500
So do not forget to do that.

00:23:04.800 --> 00:23:09.370
It is best to register as
an EscapeMNQ observer on

00:23:09.370 --> 00:23:12.250
launch of your application.

00:23:12.930 --> 00:23:15.450
And the reason for that
is because some users may

00:23:15.710 --> 00:23:18.440
Purchase something.

00:23:18.500 --> 00:23:20.430
Purchase transactions take a while.

00:23:20.440 --> 00:23:23.020
It could take up to 10 minutes.

00:23:23.020 --> 00:23:26.200
And if this is the case,
the user may quit the application.

00:23:26.200 --> 00:23:29.090
That means you will never
process the transaction back.

00:23:29.210 --> 00:23:31.630
So you cannot make the asset available.

00:23:31.760 --> 00:23:34.680
The next time the user
will launch the app,

00:23:34.680 --> 00:23:38.470
by registering as an observer
of the escapement queue,

00:23:38.690 --> 00:23:40.870
we will actually send
you back the transaction,

00:23:40.910 --> 00:23:44.890
so you will be able to make the
asset available to the user.

00:23:46.460 --> 00:23:54.030
Only restore in apps when the user
needs to access the in-app purchases.

00:23:54.040 --> 00:23:58.400
So, for example, on the Mac,
if a user moves an application

00:23:58.400 --> 00:24:02.730
to a different machine -- or,
actually, if the user redownloads the

00:24:02.730 --> 00:24:06.270
application from the Mac App Store,
the receipt that you will get will

00:24:06.270 --> 00:24:11.050
be a receipt that will only contain
the transaction for the application.

00:24:11.050 --> 00:24:13.560
It will not contain the in-app purchases.

00:24:13.600 --> 00:24:17.440
So you are responsible for
providing some UI for the user

00:24:17.510 --> 00:24:20.300
to get back the in-app purchases.

00:24:20.300 --> 00:24:22.310
Now, you could do it on launch as well.

00:24:22.320 --> 00:24:24.400
But this is why we don't
want you to do it on launch.

00:24:24.430 --> 00:24:27.030
We don't want you to do it on
launch because every time you

00:24:27.140 --> 00:24:31.380
try to restore in-app purchases,
the first thing we will do is we

00:24:31.380 --> 00:24:33.140
will ask the user to authenticate.

00:24:33.140 --> 00:24:36.740
So it would be really strange if every
time the user double clicks the app,

00:24:36.740 --> 00:24:38.680
it's presented with an off panel.

00:24:38.690 --> 00:24:41.520
You wouldn't know why and
why do I have to do this.

00:24:41.520 --> 00:24:46.410
So, you actually need to have either
a menu item or a button somewhere

00:24:46.410 --> 00:24:49.880
to restore the in-app purchases.

00:24:51.890 --> 00:24:55.700
And now for Mac OS developers,
you need to check the

00:24:55.700 --> 00:24:57.210
receipt validity on launch.

00:24:57.340 --> 00:24:59.280
So there are several reasons for that.

00:24:59.350 --> 00:25:02.730
Like I said earlier,
receipts are machine specific.

00:25:02.990 --> 00:25:05.980
You want to make sure that the
receipt that you currently have

00:25:06.030 --> 00:25:09.250
in your application is not some
receipt that somebody posted

00:25:09.250 --> 00:25:10.990
on the internet somewhere.

00:25:11.090 --> 00:25:14.050
So by verifying the
validity of the receipt,

00:25:14.340 --> 00:25:18.470
you will make sure that this receipt
is for the user that actually

00:25:18.470 --> 00:25:22.770
purchased the In App Purchases.

00:25:23.220 --> 00:25:27.600
If the receipt is invalid,
you need to exit with 173.

00:25:27.640 --> 00:25:32.540
And when you do that,
we will do one of those two things.

00:25:32.770 --> 00:25:36.070
If the application is a
production application,

00:25:36.120 --> 00:25:40.340
which means it is currently
used by a regular user,

00:25:40.490 --> 00:25:45.770
we will allow the user to
re-authenticate to the App Store,

00:25:45.770 --> 00:25:49.780
and we will automatically
deliver a new receipt,

00:25:49.780 --> 00:25:49.780
a valid receipt this time.

00:25:51.010 --> 00:25:54.810
If the application is signed by you,
by the developer,

00:25:54.810 --> 00:25:59.560
we will directly go to the sandbox and
we will deliver a test receipt that you

00:25:59.560 --> 00:26:02.340
can then use to process In App Purchases.

00:26:02.460 --> 00:26:05.650
Without a test receipt,
you will not be able to

00:26:05.650 --> 00:26:07.760
process In App Purchases.

00:26:07.900 --> 00:26:09.700
Very easy to get a test receipt.

00:26:09.790 --> 00:26:11.490
Check if there is a
receipt in your app bundle.

00:26:11.490 --> 00:26:13.710
If there isn't, exit 173.

00:26:13.860 --> 00:26:15.640
You will be presented with an off panel.

00:26:15.810 --> 00:26:20.210
You will enter your test user
account and we'll give you a receipt.

00:26:21.040 --> 00:26:23.670
Again,
receipts are required to use the sandbox,

00:26:23.850 --> 00:26:27.090
so if you think that your
In App Purchases are not working,

00:26:27.110 --> 00:26:29.190
it's probably because
you didn't get a receipt,

00:26:29.250 --> 00:26:32.840
you didn't exit 173.

00:26:32.900 --> 00:26:37.250
And the store will automatically give
you a new receipt after you authenticate.

00:26:40.670 --> 00:26:43.260
More information.

00:26:43.260 --> 00:26:48.040
There is a document that we issued
last January and we've been updated.

00:26:48.040 --> 00:26:52.320
This is for Mac OS X developers
that explains to you how to

00:26:52.320 --> 00:26:54.700
verify App Store receipts.

00:26:54.800 --> 00:26:57.940
There is another document that
explains to you how to submit your

00:26:57.940 --> 00:27:02.550
application to the Mac App Store,
again for Mac OS X developers.

00:27:02.680 --> 00:27:05.410
For iOS developers,
there is a document called

00:27:05.410 --> 00:27:07.920
In-App Purchasse Programming Guide.

00:27:08.040 --> 00:27:12.120
This documents the Store Kit API,
and because the Store Kit API is mostly

00:27:12.200 --> 00:27:17.500
identical between iOS and Mac OS X,
this can be used on both platforms.

00:27:17.640 --> 00:27:23.440
Finally, the Store Kit framework is
not located by default on DP4,

00:27:23.440 --> 00:27:27.700
so you need to download
it from the ADC website.

00:27:28.500 --> 00:27:33.630
And now, just to show you how
things come together,

00:27:33.640 --> 00:27:40.280
I will show you a small demo of the
next top seller in the App Store,

00:27:40.470 --> 00:27:42.740
the Fruit Stand.

00:27:42.840 --> 00:27:47.270
So what the Fruit Stand is,
it's a small app.

00:27:49.030 --> 00:27:59.270
The first thing we did was add ourselves
as an observer of the Escape MNQ,

00:27:59.800 --> 00:28:07.740
and then we loaded a list of
In-App Purchases identifiers

00:28:07.830 --> 00:28:11.270
from our app bundle.

00:28:13.440 --> 00:28:17.020
And what I'm going to do,
I'm going to click on this beautiful UI,

00:28:17.020 --> 00:28:19.920
this beautiful button,
Fetch Product Information.

00:28:19.980 --> 00:28:22.840
And what that's going to do,
it's going to go to the

00:28:22.840 --> 00:28:27.080
App Store and look at what we
have registered in iTunes Connect.

00:28:27.150 --> 00:28:32.040
So for each of these product identifiers,
it's going to get the name, the price.

00:28:32.040 --> 00:28:34.750
Obviously,
we didn't display the description.

00:28:34.880 --> 00:28:39.000
So now that we have the name of our
In App Purchases and the prices,

00:28:39.070 --> 00:28:43.470
we can actually populate our UI,
which we've just done by actually

00:28:43.560 --> 00:28:46.510
adding those items in this pop-up menu.

00:28:46.680 --> 00:28:50.510
So I'm going to purchase a banana.

00:28:51.130 --> 00:28:54.280
So I select the product, click purchase.

00:28:54.650 --> 00:28:57.390
At that point, we create the payment.

00:28:59.570 --> 00:29:02.440
And we add it to the payment queue.

00:29:02.490 --> 00:29:04.370
The App Store is going
to present that dialogue.

00:29:04.410 --> 00:29:05.380
This is not your dialogue.

00:29:05.380 --> 00:29:07.680
This is our dialogue.

00:29:08.350 --> 00:29:11.960
So the user can confirm that
he wants to buy that item.

00:29:12.010 --> 00:29:15.520
And you can see that you have here,
you know that you're working

00:29:15.580 --> 00:29:19.690
out of the sandbox because we're
actually adding it to the dialog.

00:29:19.790 --> 00:29:20.500
So I want to buy.

00:29:20.510 --> 00:29:23.290
We present an authentication dialog.

00:29:23.410 --> 00:29:28.200
So here I am entering
my test user account,

00:29:28.310 --> 00:29:30.760
Apple ID and password.

00:29:37.860 --> 00:29:44.640
If all goes well,
you will see that the transaction

00:29:44.640 --> 00:29:44.640
has been moved to purchased.

00:29:44.640 --> 00:29:44.640
We process the transaction.

00:29:45.500 --> 00:29:47.990
We called finish transaction
and the app store is actually

00:29:47.990 --> 00:29:49.970
displaying the thank you dialog.

00:29:49.970 --> 00:29:54.550
And we made the asset available
by basically presenting

00:29:54.550 --> 00:29:56.340
the picture we just bought.

00:29:56.460 --> 00:29:57.820
Let me do it just a second time.

00:29:57.880 --> 00:30:01.890
Let's try to purchase a lime this time.

00:30:01.970 --> 00:30:08.000
Okay, confirm, authenticate.

00:30:08.030 --> 00:30:11.630
And if all goes well,
I should get a picture of the lime.

00:30:14.470 --> 00:30:19.430
So I think it's going to be a smash.

00:30:19.520 --> 00:30:21.820
So let's look at how

00:30:22.670 --> 00:30:25.220
How we've done this, very briefly.

00:30:25.300 --> 00:30:30.190
So, now obviously this is
a Mac OS X application,

00:30:30.190 --> 00:30:31.300
and...

00:30:32.820 --> 00:30:37.960
Here, the first thing you want to do is,
if the receipt is not present

00:30:37.980 --> 00:30:41.370
in your application bundle,
you want to exit 173.

00:30:41.520 --> 00:30:44.670
So that the first thing you will be
asked to do is to authenticate with

00:30:44.670 --> 00:30:47.960
your test user account to obtain
a receipt from the Mac App Store.

00:30:49.460 --> 00:30:52.740
Second thing,
when your application finishes launching,

00:30:52.800 --> 00:30:55.160
there are a couple things
you might want to do here.

00:30:55.230 --> 00:30:58.740
If you want to make the non-consumable
available in your application,

00:30:58.740 --> 00:31:03.610
like enabling features,
this is the place where you actually want

00:31:03.610 --> 00:31:10.460
to look into your receipt to verify which
In App Purchases were actually purchased.

00:31:10.630 --> 00:31:16.000
Then you can make those
In App Purchases available by unlocking

00:31:16.000 --> 00:31:16.790
features or downloading content.

00:31:17.200 --> 00:31:22.450
This is also where we have chosen
to actually get the list of product

00:31:22.450 --> 00:31:24.840
identifiers out of our bundle.

00:31:24.960 --> 00:31:27.830
You can do that somewhere
else if you want.

00:31:28.050 --> 00:31:31.700
Anyway, so we got the purchase
fruits right there.

00:31:31.820 --> 00:31:35.530
How do we get the product information?

00:31:35.700 --> 00:31:39.270
Well,
we have a list of product identifiers,

00:31:39.270 --> 00:31:42.600
and we're going to create
an escape product request.

00:31:42.640 --> 00:31:44.940
We're going to set
ourselves as the delegate,

00:31:45.010 --> 00:31:47.310
and then we're going
to start the request.

00:31:47.430 --> 00:31:54.000
Prior to that, of course, you know,
we have implemented the

00:31:54.000 --> 00:31:59.080
failure delegate method and
the successful delegate method,

00:31:59.080 --> 00:31:59.080
where we actually get a response.

00:31:59.320 --> 00:32:03.380
That response basically
contains an array of products.

00:32:03.380 --> 00:32:09.980
And we use that array of products
to basically populate a pop-up menu.

00:32:10.000 --> 00:32:12.860
Now the user selects an item

00:32:14.160 --> 00:32:18.690
In the pop-up menu,
and what we need to do now is to

00:32:18.750 --> 00:32:22.410
actually purchase the product.

00:32:22.590 --> 00:32:25.250
Now, right at the beginning,
I don't know if

00:32:25.260 --> 00:32:34.600
I actually pointed it out,
we actually registered ourselves here

00:32:34.600 --> 00:32:34.600
as an observer of the SK Payment Queue.

00:32:36.310 --> 00:32:42.440
So now we're going to create a payment
using the product that was previously

00:32:42.440 --> 00:32:47.370
selected by the user in the pop-up menu.

00:32:47.420 --> 00:32:51.830
So we create an SK Payment,
and then we add this payment

00:32:51.830 --> 00:32:54.110
to the SK Payment queue.

00:32:55.090 --> 00:33:02.000
Once the user confirms and clicks buy,
and once the purchase has been processed,

00:33:02.000 --> 00:33:05.830
we will get our callback and
we will get a transaction.

00:33:05.900 --> 00:33:09.160
Our callback will be invoked,
we'll get a transaction.

00:33:09.240 --> 00:33:11.650
Now for each transaction,
we're going to look at

00:33:11.730 --> 00:33:12.910
the transaction state.

00:33:13.810 --> 00:33:17.210
And if the state was purchased,
we make the content

00:33:17.320 --> 00:33:19.010
available to the user.

00:33:19.200 --> 00:33:21.990
And very important,
we will actually call finish

00:33:21.990 --> 00:33:24.530
transaction on the transaction.

00:33:24.990 --> 00:33:27.470
If you were restoring,
for each transaction you

00:33:27.570 --> 00:33:29.500
will get this state restored.

00:33:29.590 --> 00:33:33.300
For each of the transactions,
you need to call finish transaction.

00:33:33.410 --> 00:33:36.740
And you can see here that we
also called finish transaction

00:33:36.740 --> 00:33:38.910
when the transaction was failed.

00:33:39.900 --> 00:33:40.400
So this is it.

00:33:40.560 --> 00:33:43.940
This is how we process
our In-App Purchases.

00:33:44.020 --> 00:33:49.200
So to talk about
auto-renewable subscriptions,

00:33:49.200 --> 00:33:49.200
Ricardo Cortes.

00:33:54.690 --> 00:33:55.360
Good morning.

00:33:55.420 --> 00:33:55.920
Thank you, JP.

00:33:56.040 --> 00:33:58.500
Auto-renewables.

00:33:58.500 --> 00:34:02.340
There's a lot of steps
in doing auto-renewables.

00:34:02.340 --> 00:34:04.640
A lot of it's different from the
non-consumable and consumable case,

00:34:04.650 --> 00:34:05.760
so we have a lot of things to cover.

00:34:05.840 --> 00:34:08.760
We're going to give you a quick overview,
then we'll get into the

00:34:08.760 --> 00:34:11.780
metadata differences between
non-consumables and consumables,

00:34:11.820 --> 00:34:14.710
how to use that metadata
with auto-renewables,

00:34:15.210 --> 00:34:19.120
receipts, policies,
the cancellation flow,

00:34:19.200 --> 00:34:23.130
testing in Sandbox,
as well as how your app looks in

00:34:23.130 --> 00:34:24.560
app review with auto-renewables.

00:34:27.710 --> 00:34:32.180
Auto-renewables are
only available on iOS.

00:34:32.180 --> 00:34:39.290
And they enable true subscription
support within your app.

00:34:40.040 --> 00:34:42.510
Unlike the non-renewing subscription,
which is being deprecated,

00:34:42.510 --> 00:34:42.510
this is the type you want
to use if you want to offer

00:34:42.510 --> 00:34:42.510
your customers subscriptions.

00:34:43.160 --> 00:34:44.910
And the subscription is
automatically renewed at the

00:34:44.910 --> 00:34:46.520
end of the subscription period.

00:34:46.570 --> 00:34:49.690
The customer is given the
option to opt out in iTunes.

00:34:49.700 --> 00:34:57.810
There's a Manage Subscriptions
page in both iOS and on the

00:34:57.810 --> 00:34:57.810
desktop version of iTunes.

00:35:00.000 --> 00:35:02.340
And new content is automatically
delivered to all devices with

00:35:02.340 --> 00:35:03.900
the same customer Apple ID.

00:35:03.900 --> 00:35:12.250
Duration options: one week, one month,
two months, three months, six months,

00:35:12.310 --> 00:35:13.400
and a year.

00:35:14.470 --> 00:35:17.280
And yes, it is the most complex
In App Purchas type to implement,

00:35:17.280 --> 00:35:20.540
so hopefully this presentation
and the many steps we're going

00:35:20.540 --> 00:35:22.460
through will elucidate it for you.

00:35:22.670 --> 00:35:24.440
A few examples.

00:35:24.480 --> 00:35:26.300
Golf Digest.

00:35:27.840 --> 00:35:34.800
LUS, and launch in early February the
first auto-renewable,

00:35:34.800 --> 00:35:34.800
The Daily.

00:35:39.500 --> 00:35:42.800
The developer in the auto-renew case
is responsible for checking receipts

00:35:42.800 --> 00:35:44.930
to validate their subscriptions.

00:35:44.950 --> 00:35:49.780
And you must pass over a generated
shared secret in iTunes Connect with your

00:35:49.810 --> 00:35:52.680
receipt to validate that subscription.

00:35:53.890 --> 00:35:56.630
Now, if you haven't purchased
an auto-renewable,

00:35:56.800 --> 00:35:59.140
when you do so on iOS,
you're prompted to share

00:35:59.140 --> 00:36:00.860
your personal information.

00:36:00.940 --> 00:36:05.110
If the customer chooses yes,
you as the developer/publisher have the

00:36:05.190 --> 00:36:07.660
option of providing a bonus duration.

00:36:07.750 --> 00:36:10.800
You choose this bonus
duration in iTunes Connect,

00:36:10.890 --> 00:36:17.800
and you are responsible for
displaying this bonus duration

00:36:17.800 --> 00:36:20.820
UI in your application.

00:36:20.950 --> 00:36:23.220
A privacy URL is required.

00:36:23.250 --> 00:36:25.860
It's shown in the customer's invoice.

00:36:27.660 --> 00:36:29.780
Now let's look at the iTunes
Connect setup pieces and how they differ

00:36:29.860 --> 00:36:33.350
from non-consumables and consumables.

00:36:33.480 --> 00:36:36.070
You go back to the
In App Purchase Type page,

00:36:36.070 --> 00:36:37.960
you choose Auto Renewable.

00:36:39.090 --> 00:36:41.550
And when you land on the pricing page,
there's a few extra fields.

00:36:41.600 --> 00:36:45.230
There's the duration,
and then there's the offer

00:36:45.410 --> 00:36:46.970
marketing opt-in incentive.

00:36:47.050 --> 00:36:50.280
Upon choosing yes,
you're then given the option

00:36:50.280 --> 00:36:52.490
of choosing a bonus duration.

00:36:52.610 --> 00:36:56.980
And below the usual,
it's clear for sale and price tier

00:36:56.980 --> 00:36:56.980
fields for all In App Purchases.

00:36:59.620 --> 00:37:02.030
Now you get to the Reference
Name and Language page.

00:37:02.030 --> 00:37:04.160
And in the Auto Renewable case,
the reference name can be

00:37:04.160 --> 00:37:05.320
thought of as your family.

00:37:05.320 --> 00:37:08.180
In this case,
I have Touch Fighter Game Strategy.

00:37:08.180 --> 00:37:11.100
And I have two durations,
seven days and one month.

00:37:11.150 --> 00:37:14.040
For most developers,
a single family/reference name in the

00:37:14.040 --> 00:37:16.060
Auto Renewable case is sufficient.

00:37:16.070 --> 00:37:20.520
Each of the durations is
presented as options in your UI.

00:37:20.560 --> 00:37:23.290
And on the Manage
Description page in iOS,

00:37:23.420 --> 00:37:25.100
the customer is given
the option to upsell,

00:37:25.160 --> 00:37:28.600
say, from the seven-day to the one-month
subscription if the durations

00:37:28.710 --> 00:37:30.700
are all part of the same family.

00:37:30.890 --> 00:37:36.490
Here you can also localize your
auto-renewable in the various languages.

00:37:38.580 --> 00:37:47.070
Privacy Policy URL, which is required in
the auto-renewable case,

00:37:47.070 --> 00:37:47.070
as well as the ability to generate
your shared secret in iTunes Connect.

00:37:49.010 --> 00:37:51.430
And now to talk a little bit about
how to use this metadata in the

00:37:51.430 --> 00:37:56.000
auto renewables is David Neuman,
Engineering Manager, iTunes Store,

00:37:56.030 --> 00:37:56.900
Commerce.

00:37:57.150 --> 00:37:59.390
Dave.

00:38:03.520 --> 00:38:09.250
Okay, so I want to start with something
that has affected a lot of folks,

00:38:09.440 --> 00:38:11.490
because I've tried to help a
lot of developers do this stuff,

00:38:11.580 --> 00:38:13.730
and I want to start off with, I guess,
landmine number one,

00:38:13.940 --> 00:38:17.060
which is the difference in auto
renewables between the subscription

00:38:17.060 --> 00:38:18.490
title and the offer title.

00:38:18.530 --> 00:38:22.000
Okay, when you get back an SK product
in your Objective-C code,

00:38:22.110 --> 00:38:24.500
it's got a field called Localize Title.

00:38:24.630 --> 00:38:27.660
And unlike all the other
type of in-app subscriptions,

00:38:27.660 --> 00:38:31.500
this isn't the name of the
specific offer the person's buying.

00:38:31.670 --> 00:38:35.500
It's the name of this
collection of in-apps.

00:38:35.500 --> 00:38:38.490
Okay, what the user's going to buy is
something like I have there for the,

00:38:38.500 --> 00:38:41.490
for example, a weekly plan,
a monthly plan, or a yearly plan.

00:38:41.500 --> 00:38:43.410
But this Localize Title needs
to be something for the

00:38:43.410 --> 00:38:44.470
subscription as a whole.

00:38:44.530 --> 00:38:47.290
I call it the subscription name,
and that's like, for example,

00:38:47.290 --> 00:38:48.500
the Oregon Times.

00:38:48.500 --> 00:38:51.650
Now, okay,
so if you don't use that thing directly,

00:38:51.650 --> 00:38:55.500
if you don't use the Localize
Title on your SK product directly,

00:38:55.500 --> 00:38:56.500
what is it used for?

00:38:56.500 --> 00:38:57.500
Well, we use it at Apple, okay?

00:38:57.500 --> 00:38:59.500
We need it for dialogues, as you've seen.

00:38:59.500 --> 00:38:59.500
We need it for management UI,
which I'll go to in a second.

00:38:59.500 --> 00:38:59.500
Okay,
so if you don't use that thing directly,

00:38:59.500 --> 00:38:59.500
if you don't use the Localize
Title on your SK product directly,

00:38:59.500 --> 00:38:59.500
what is it used for?

00:38:59.500 --> 00:39:02.500
We need it for management UI,
which I'll go to in a second.

00:39:02.540 --> 00:39:04.500
And we need it for emails.

00:39:04.500 --> 00:39:08.390
But by you, directly in your app,
you might not even use it.

00:39:08.500 --> 00:39:10.500
But nevertheless,
you need to have an offer name.

00:39:10.500 --> 00:39:12.470
You need to put something
by that buy button.

00:39:12.580 --> 00:39:16.500
So what we recommend is, of course,
start with a product ID.

00:39:16.500 --> 00:39:19.500
For example, com.org.times.sub.1month.

00:39:19.510 --> 00:39:23.460
If you encode the duration
inside of the product ID,

00:39:23.460 --> 00:39:27.490
you can use that,
combine it with a Localize Title,

00:39:27.490 --> 00:39:27.500
and you can present that to the user.

00:39:27.500 --> 00:39:27.500
Okay,
so if you don't use that thing directly,

00:39:27.500 --> 00:39:27.500
what is it used for?

00:39:27.530 --> 00:39:30.500
You can present that to the user.

00:39:30.500 --> 00:39:33.380
But the most flexible solution is
to take that product identifier,

00:39:33.520 --> 00:39:35.990
send it to your server,
have your server translate it,

00:39:35.990 --> 00:39:38.500
and put that output in,
put that by the buy button.

00:39:38.500 --> 00:39:39.050
Okay.

00:39:39.050 --> 00:39:42.500
Now here's an example of
how we use this metadata.

00:39:42.500 --> 00:39:44.310
Because even if you don't
use it directly in your app,

00:39:44.310 --> 00:39:46.650
it is very important because we use it,
and therefore your customers

00:39:46.660 --> 00:39:47.500
are going to see it.

00:39:47.500 --> 00:39:50.500
So this is just an excerpt of
what things look like in iTunes.

00:39:50.510 --> 00:39:52.520
You go to iTunes, you select the account,
you select manage

00:39:52.670 --> 00:39:54.140
subscriptions off of that,
you'll get a page,

00:39:54.140 --> 00:39:55.500
and it'll list all the applications.

00:39:55.500 --> 00:39:58.500
You'll see artwork and the
name of the application,

00:39:58.500 --> 00:40:01.480
and underneath that,
all the subscriptions

00:40:01.480 --> 00:40:02.500
that are in that app.

00:40:02.500 --> 00:40:05.500
And yes, you can have more than one
subscription in a given application.

00:40:05.500 --> 00:40:08.530
So I've highlighted there
Nylon Magazine iPad Edition,

00:40:08.530 --> 00:40:11.500
and the subscription name
there is Nylon Magazine.

00:40:11.600 --> 00:40:13.480
So let's say I click on one of these.

00:40:13.530 --> 00:40:14.500
I'll see a page that looks like this.

00:40:14.500 --> 00:40:18.090
Again, you see the app name and
the subscription name there.

00:40:19.150 --> 00:40:22.010
And now here's what it looks like on iOS.

00:40:22.100 --> 00:40:22.900
Same kind of deal.

00:40:22.900 --> 00:40:26.400
You get a list of the applications
and you click on one of them and you

00:40:26.400 --> 00:40:27.950
see all the subscriptions for that.

00:40:27.960 --> 00:40:30.800
In this particular example
you've got two subscriptions

00:40:30.800 --> 00:40:32.640
there for the particular app.

00:40:32.790 --> 00:40:35.140
And then you select one of
them and you go to edit it.

00:40:35.160 --> 00:40:39.820
Now, notice the subscription name is used
prominently on that final dialog

00:40:39.820 --> 00:40:43.540
there where you see the description
name up there in the title bar.

00:40:43.580 --> 00:40:46.180
Now, imagine if you had named
that something like,

00:40:46.180 --> 00:40:47.510
I don't know, quarterly.

00:40:47.740 --> 00:40:48.030
Okay.

00:40:48.040 --> 00:40:51.610
And user can sometimes get to this last
page there to edit their subscription

00:40:51.610 --> 00:40:53.260
off of a dialog or off of an email.

00:40:53.450 --> 00:40:56.460
If that just said something like that,
it wouldn't be clear to the user

00:40:56.460 --> 00:40:58.940
what it is they're actually editing.

00:40:58.940 --> 00:41:02.790
So it's important you name -- you
give that display name in iTunes

00:41:02.790 --> 00:41:06.260
Connect something which will make
sense for a context like this.

00:41:06.750 --> 00:41:06.990
Okay.

00:41:07.070 --> 00:41:09.300
So I want to talk a
little bit about receipts.

00:41:09.590 --> 00:41:13.000
Because they are a little different.

00:41:13.000 --> 00:41:15.730
It's the same format and stuff,
like you'd expect.

00:41:15.730 --> 00:41:17.780
But there are a couple differences.

00:41:18.040 --> 00:41:20.350
All the fields are pretty much
the same except for these two:

00:41:20.360 --> 00:41:23.090
the purchase state field
and original transaction ID.

00:41:23.300 --> 00:41:25.760
Now,
the purchase state on a non-consumable

00:41:25.810 --> 00:41:28.060
is the date of download or re-download.

00:41:28.070 --> 00:41:31.880
Basically, it's the date that that
download type of event happened.

00:41:31.880 --> 00:41:34.850
But for auto renewables,
it's actually the date that

00:41:34.850 --> 00:41:38.020
the purchase event happened.

00:41:38.020 --> 00:41:40.940
Original transaction
ID for auto renewables,

00:41:40.940 --> 00:41:43.440
this is the transaction ID of
that first subscription buy,

00:41:43.440 --> 00:41:46.800
but it's also the transaction ID of
everything else that comes afterwards.

00:41:46.800 --> 00:41:49.720
So I just want to kind of
explain how that works.

00:41:49.730 --> 00:41:52.260
So you buy this thing.

00:41:52.260 --> 00:41:54.000
You buy another one,
and it's got a renewal receipt.

00:41:54.030 --> 00:41:56.040
So you've got the original
receipt and the renewal receipt.

00:41:56.040 --> 00:41:58.520
They both have the same
original transaction ID.

00:41:58.520 --> 00:42:01.100
You'd buy it again, the second renewal,
and now you've got, again,

00:42:01.150 --> 00:42:03.940
the original transaction ID is
the same for all three of these.

00:42:03.940 --> 00:42:05.940
And then you do a restore,
and when we restore,

00:42:05.940 --> 00:42:09.460
we restore all -- we restore
receipt for every buy event.

00:42:09.520 --> 00:42:12.110
And so all these guys have the
same original transaction ID.

00:42:12.180 --> 00:42:14.190
In essence,
the original transaction ID is a

00:42:14.190 --> 00:42:16.240
customer ID as far as you're concerned.

00:42:16.250 --> 00:42:18.220
Okay.

00:42:18.220 --> 00:42:19.500
So purchase state.

00:42:19.600 --> 00:42:20.450
Similar deal.

00:42:20.610 --> 00:42:23.740
You've got the original buy, the receipt,
and the renewal.

00:42:23.750 --> 00:42:24.940
Each one of those, though,
is going to have a

00:42:24.940 --> 00:42:26.160
different purchase state.

00:42:26.180 --> 00:42:28.260
Now,
when it comes time to restore these guys,

00:42:28.260 --> 00:42:30.700
you're going to get a
receipt for each of those.

00:42:30.900 --> 00:42:33.840
But instead of being the date that the
restore happened -- I know you're going

00:42:33.840 --> 00:42:33.940
to get a receipt for each of those,
but instead of being the date

00:42:33.940 --> 00:42:33.940
that the restore happened,
I need to get a receipt

00:42:33.940 --> 00:42:33.940
for each of those.

00:42:33.940 --> 00:42:38.480
The purchase date is going to refer
-- is going to be the exact same date

00:42:38.920 --> 00:42:40.270
of the transaction it's restoring.

00:42:41.800 --> 00:42:44.960
The one new field is expire date.

00:42:44.960 --> 00:42:47.320
It means what you think it means.

00:42:47.400 --> 00:42:50.630
Just because the latest receipt
you have is expired doesn't mean

00:42:50.630 --> 00:42:52.440
the subscription is inactive.

00:42:52.440 --> 00:42:55.740
To find out whether or not a
subscription is truly inactive or not,

00:42:55.810 --> 00:42:58.870
you need to invoke our verification API.

00:42:58.870 --> 00:42:59.940
All right?

00:42:59.940 --> 00:43:02.900
And so this is what happens when you
send that receipt for verification.

00:43:02.900 --> 00:43:04.550
We're going to give you back a status.

00:43:04.590 --> 00:43:08.500
If you get back status zero,
that means the subscription is active,

00:43:08.500 --> 00:43:11.500
and maybe that's all you care about.

00:43:11.500 --> 00:43:13.650
Now if anything goes wrong,
you're going to get one

00:43:13.650 --> 00:43:14.720
of these error codes.

00:43:14.720 --> 00:43:18.490
Now I highlight 21006 error
code down there because it's

00:43:18.490 --> 00:43:20.280
not a true error code per se.

00:43:20.340 --> 00:43:22.540
In essence, in other words,
there's nothing malformed

00:43:22.540 --> 00:43:23.440
about the receipt.

00:43:23.440 --> 00:43:26.200
There wasn't like any exception
happened on the server or anything.

00:43:26.200 --> 00:43:29.210
It's just that that receipt, while valid,
is associated with a subscription

00:43:29.210 --> 00:43:31.650
which is no longer active.

00:43:32.400 --> 00:43:34.690
Oh, actually,
I do want to highlight a couple things.

00:43:34.700 --> 00:43:38.960
The last two statuses are fairly new,
21007 and 21008,

00:43:38.960 --> 00:43:42.900
Sandbox Receipts Sent to Production,
Production Receipts Sent to Sandbox.

00:43:43.040 --> 00:43:46.660
These can come in handy for development,
and they can definitely come

00:43:46.690 --> 00:43:48.170
in handy for app review.

00:43:48.720 --> 00:43:51.270
Okay, so in addition to that status,
you're going to get

00:43:51.330 --> 00:43:52.760
some other information.

00:43:52.760 --> 00:43:56.100
Whenever you send a receipt to us,
we're going to crack it open.

00:43:56.100 --> 00:43:57.690
That's sort of my phrase for that.

00:43:57.730 --> 00:43:59.390
We're going to crack it open
and show you what's inside.

00:43:59.390 --> 00:44:01.050
Basically,
you can get a JSON dictionary of all

00:44:01.050 --> 00:44:02.630
those key value pairs that a receipt has.

00:44:02.630 --> 00:44:07.150
And they'll be under a, in our response,
they'll be under a key called receipt.

00:44:07.560 --> 00:44:11.560
Now, if the subscription is active,
you're going to get some other goodies.

00:44:11.560 --> 00:44:14.550
And that includes the latest receipt,
just the brand new blob of

00:44:14.550 --> 00:44:16.100
whatever the latest receipt is.

00:44:16.120 --> 00:44:18.370
And this blob might be the same
as the receipt that was passed.

00:44:18.460 --> 00:44:22.260
But you're also going to get this
field I call latest receipt info.

00:44:22.260 --> 00:44:27.040
When we first rolled out auto renewables,
this wasn't available, but it is now.

00:44:27.040 --> 00:44:28.740
And it saves you a round
trip to the server.

00:44:28.740 --> 00:44:30.460
Basically,
we're just taking that latest receipt

00:44:30.460 --> 00:44:31.720
and cracking it open right there.

00:44:31.720 --> 00:44:35.270
Before, if you've used this previously,
you'd send a receipt to us,

00:44:35.270 --> 00:44:37.540
we'd crack it open and
send it back to you.

00:44:37.560 --> 00:44:40.540
And you'd have to immediately take
that blob and send it right back to

00:44:40.540 --> 00:44:42.200
us so we could crack it open again.

00:44:42.200 --> 00:44:43.700
Well,
here it's already there for you so you

00:44:43.700 --> 00:44:45.090
can see everything that's inside it.

00:44:45.160 --> 00:44:48.750
And I'd just like to point out this works
regardless of the receipt that you sent,

00:44:48.770 --> 00:44:51.200
whether it's the latest one
that you had or the first one

00:44:51.200 --> 00:44:52.880
you had or even a restored one.

00:44:52.880 --> 00:44:54.660
It doesn't matter if it's
associated with that subscription.

00:44:54.660 --> 00:44:57.710
We're going to give you back the
latest receipt and the latest

00:44:57.720 --> 00:44:59.320
receipt info if it's active.

00:44:59.320 --> 00:45:04.320
Now, if the subscription is inactive,
before, we just gave you status 2106.

00:45:04.320 --> 00:45:06.350
And maybe that's all you cared about.

00:45:06.710 --> 00:45:09.070
But frankly, it wasn't very helpful,
particularly in development.

00:45:09.230 --> 00:45:13.190
So over the last, like, few months ago,
we introduced this additional field

00:45:13.320 --> 00:45:15.140
called latest expired receipt info.

00:45:15.140 --> 00:45:17.380
Again,
this is just a cracked open receipt

00:45:17.380 --> 00:45:21.290
that just shows you information about
what that last good receipt was.

00:45:21.300 --> 00:45:26.120
Now, this might not be relevant
for you in production,

00:45:26.120 --> 00:45:27.960
but it definitely is
useful in development.

00:45:27.980 --> 00:45:31.320
But it could be useful in production,
too, because you might want to offer

00:45:31.320 --> 00:45:33.380
certain customers maybe a grace period.

00:45:33.380 --> 00:45:35.560
And if you knew when the
last subscription lapsed,

00:45:35.560 --> 00:45:35.680
you know, you could do that.

00:45:35.810 --> 00:45:38.550
You could do something like that.

00:45:39.110 --> 00:45:40.000
All right.

00:45:40.000 --> 00:45:43.240
Now, restoring of these guys.

00:45:43.240 --> 00:45:44.980
You might think that, well,
when you restore one

00:45:44.980 --> 00:45:46.980
of these subscriptions,
you're just going to get back

00:45:47.230 --> 00:45:49.540
maybe nothing if it's expired,
or maybe you get back the first one,

00:45:49.540 --> 00:45:50.860
or maybe you get back the last one.

00:45:50.860 --> 00:45:52.140
I just want to demystify this.

00:45:52.140 --> 00:45:54.140
What you're going to
get back is everything.

00:45:54.240 --> 00:45:57.250
For every single purchase event,
you're going to get back a receipt.

00:45:57.300 --> 00:45:58.990
I kind of implied this
on an earlier slide,

00:45:58.990 --> 00:46:01.250
but I just want to make it clear.

00:46:01.250 --> 00:46:05.520
If you had a monthly subscription
and someone does a restore all,

00:46:05.520 --> 00:46:07.180
they get a brand-new iPad,
they do a restore all on it,

00:46:07.180 --> 00:46:09.900
you're going to get a receipt
for that original buy and

00:46:10.070 --> 00:46:12.220
every single renew event.

00:46:12.220 --> 00:46:15.520
And these receipts, of course,
have an expired date and

00:46:15.520 --> 00:46:17.060
they've got a purchase date.

00:46:17.080 --> 00:46:20.910
And they've got that original
transaction ID tying them all together.

00:46:20.990 --> 00:46:22.870
So you have a full purchase history.

00:46:22.870 --> 00:46:25.930
Now, some of you might think, well,
I don't really care about that.

00:46:26.000 --> 00:46:28.840
I've got a streaming video app
or a streaming music app or maybe

00:46:28.840 --> 00:46:31.360
I've got a level inside a game.

00:46:31.360 --> 00:46:35.250
In a case like that, well,
you just care whether it's

00:46:35.340 --> 00:46:37.560
active or inactive and that's it.

00:46:37.560 --> 00:46:40.570
But if you have an application
which has publications,

00:46:40.570 --> 00:46:43.500
it's got this content,
you're going to want to give it

00:46:43.500 --> 00:46:44.920
back to the user most likely.

00:46:44.920 --> 00:46:48.340
They get a brand-new iPad or maybe they
screwed up their iPad and they need to,

00:46:48.340 --> 00:46:49.200
like, reload it.

00:46:49.280 --> 00:46:51.180
With this information,
you know when everything

00:46:51.180 --> 00:46:52.230
was good and when it wasn't.

00:46:52.400 --> 00:46:54.900
And so you can say, okay,
they're entitled to this issue

00:46:54.900 --> 00:46:56.290
and this issue and this issue.

00:46:56.350 --> 00:46:59.900
And this is an important point because
having that quote there at the bottom,

00:46:59.900 --> 00:47:04.440
physical magazines don't vanish on expiry
and digital ones don't have to either.

00:47:04.440 --> 00:47:07.120
And with this information,
you can do that.

00:47:07.810 --> 00:47:12.010
Okay, so how does the client become
aware of a renewal event?

00:47:12.150 --> 00:47:13.290
We do this thing in the background.

00:47:13.320 --> 00:47:14.350
So what's going on?

00:47:14.440 --> 00:47:16.590
So we do the buy in the
background on our servers.

00:47:16.600 --> 00:47:18.300
We put a transaction in the queue.

00:47:18.300 --> 00:47:20.500
So then the question becomes,
when does the application

00:47:20.500 --> 00:47:21.680
actually check the queue?

00:47:21.680 --> 00:47:24.740
All right, just to be clear,
it checks on launch,

00:47:24.950 --> 00:47:27.930
and it checks when an application
rotates out of the background.

00:47:27.930 --> 00:47:30.400
So what I mean by that is,
you're in the application,

00:47:30.400 --> 00:47:33.050
you go to check mail,
you answer a phone call, whatever,

00:47:33.250 --> 00:47:35.320
you come back to the app,
and then it checks.

00:47:36.040 --> 00:47:38.890
Now, I bring this up,
because normally it's like, so what?

00:47:38.910 --> 00:47:40.570
This thing's lasted a
minimum of seven days.

00:47:40.600 --> 00:47:42.000
Of course,
that kind of thing's going to happen.

00:47:42.000 --> 00:47:42.560
What's the big deal?

00:47:42.560 --> 00:47:45.030
The big deal is if you're in
development and you don't know this,

00:47:45.040 --> 00:47:47.430
you're sitting there with your app,
you might not ever switch

00:47:47.430 --> 00:47:49.720
away from it or restart it,
and something renews, and you go,

00:47:49.720 --> 00:47:50.940
how come I don't see something?

00:47:50.940 --> 00:47:52.310
Well, this might be why.

00:47:52.310 --> 00:47:55.040
Maybe you haven't switched
away or bounced the app.

00:47:58.070 --> 00:47:59.760
Okay,
now there's another way of doing renew.

00:47:59.760 --> 00:48:02.700
I call it the interactive renewal.

00:48:02.800 --> 00:48:04.820
It's what happens when
you click buy inside your

00:48:04.840 --> 00:48:08.130
application for a subscription
the user's already purchased.

00:48:08.250 --> 00:48:10.600
So what happens when you
click a buy button like that?

00:48:10.650 --> 00:48:13.600
Well,
if the subscription is currently active,

00:48:13.600 --> 00:48:15.100
you're going to see a dialogue.

00:48:15.160 --> 00:48:18.130
We'll basically say, hey,
this user's already -- Mr.

00:48:18.200 --> 00:48:20.680
User, you've already subscribed to this.

00:48:20.760 --> 00:48:22.400
You can click this button
to dismiss this dialogue.

00:48:22.400 --> 00:48:24.460
You can click this button called manage,
and it'll actually take you to

00:48:24.530 --> 00:48:27.960
one of those screens you saw
at the beginning of my talk.

00:48:27.960 --> 00:48:29.960
So you can click this button
to manage the subscription.

00:48:30.050 --> 00:48:34.520
Now, if the subscription is expired,
or I should say totally inactive,

00:48:34.520 --> 00:48:35.830
we're going to do the buy right there.

00:48:35.930 --> 00:48:39.360
In fact, the experience is just like if
they bought it the first time.

00:48:39.360 --> 00:48:41.470
And, in fact,
the only difference is you're not going

00:48:41.470 --> 00:48:43.230
to see that data sharing opt-in dialogue.

00:48:43.260 --> 00:48:45.450
Otherwise, it looks exactly the same.

00:48:45.480 --> 00:48:47.920
And it behaves just like any
other kind of renewal as well.

00:48:47.920 --> 00:48:53.080
So this is going to be important when
you start working in the sandbox because

00:48:53.080 --> 00:48:57.920
of some limitations in the sandbox,
which we'll get to in a moment.

00:48:57.920 --> 00:49:00.820
So we're going to go over all these,
but I do want to stress the first three.

00:49:00.820 --> 00:49:03.640
Just so you know,
we renew a few hours before expiry so we

00:49:03.640 --> 00:49:05.880
can guarantee some level of continuity.

00:49:05.880 --> 00:49:11.970
And another thing you might not know
because it's not in the docs is if

00:49:12.100 --> 00:49:16.880
you jack up the price or you take
something and you make it unavailable,

00:49:16.880 --> 00:49:18.880
we're going to disable auto renew.

00:49:18.880 --> 00:49:20.880
We're going to send an
e-mail to the customer,

00:49:20.880 --> 00:49:23.850
and it's going to be up to that
customer to respond to that e-mail.

00:49:23.920 --> 00:49:26.370
There's a link on it to go straight
into the management screen so they can

00:49:26.370 --> 00:49:27.870
go and decide what they're going to do.

00:49:27.880 --> 00:49:30.810
Now, let's say you have a
year-long subscription.

00:49:30.910 --> 00:49:32.830
Just because the price goes up
for an hour and then back down,

00:49:32.830 --> 00:49:35.460
like maybe you screwed up or maybe
just an accident happened and something

00:49:35.460 --> 00:49:38.390
became temporarily unavailable,
that isn't going to cause this

00:49:38.410 --> 00:49:41.830
storm of e-mails going out and
auto renew getting disabled.

00:49:41.840 --> 00:49:44.770
That's because we don't
check immediately.

00:49:45.070 --> 00:49:48.830
What we do is we just basically,
like for a year-long subscription,

00:49:48.970 --> 00:49:51.840
we're going to check
10 days before expiry.

00:49:51.840 --> 00:49:54.510
That's when we're going to make
these checks for price increase

00:49:54.510 --> 00:49:55.830
and for item unavailable.

00:49:55.920 --> 00:49:57.840
And then that gives the user, like,
a little bit of time to check.

00:49:57.850 --> 00:50:01.600
At least a little over a week to get
that e-mail and decide are they going to

00:50:01.600 --> 00:50:04.640
actually renew with a new higher price,
or are they going to -- that gives them

00:50:04.650 --> 00:50:08.800
some time to choose maybe a different
duration with which to renew with.

00:50:09.900 --> 00:50:12.130
Okay, so a little bit on cancellation.

00:50:12.180 --> 00:50:14.540
Cancellation is a word that can mean
different things to different people,

00:50:14.540 --> 00:50:17.900
so I want to be clear on the
different flavors of cancellation.

00:50:17.960 --> 00:50:20.860
I would say there's no
cancellation per se for the user.

00:50:21.130 --> 00:50:23.900
What a user can do is
manage their subscription,

00:50:23.980 --> 00:50:26.900
go into the management screen and flip
a switch that turns out or a new off.

00:50:27.060 --> 00:50:28.900
That in no way invalidates
their current subscription.

00:50:28.900 --> 00:50:32.980
All it does is, it says, "Okay,
I'm just not going to buy the

00:50:32.980 --> 00:50:34.900
next one." That's all that means.

00:50:34.900 --> 00:50:37.150
Now, having said that,
our support organization,

00:50:37.220 --> 00:50:40.300
for customer satisfaction reasons,
does have the ability to

00:50:40.300 --> 00:50:41.810
do a true cancellation.

00:50:41.900 --> 00:50:44.270
If someone calls up and says
their kid just ordered a $60

00:50:44.270 --> 00:50:46.900
subscription to something for
a year and it was an accident,

00:50:46.900 --> 00:50:51.190
support may elect to go, "Okay, fine,
we'll refund that." Now,

00:50:51.200 --> 00:50:54.890
when they refund that, it changes how you
respond to verify receipt.

00:50:54.910 --> 00:50:57.900
You send a receipt to us on something
that's been canceled like this,

00:50:57.900 --> 00:50:59.900
even if the expired
date is in the future,

00:50:59.900 --> 00:51:04.900
we're going to come back and say that,
"Hey, this is 21-006 inactive."

00:51:04.900 --> 00:51:06.200
That can be useful for,
I guess,

00:51:06.200 --> 00:51:08.500
fraud or maybe you don't even care,
but I just want to let you

00:51:08.540 --> 00:51:09.900
know that's what we do there.

00:51:10.660 --> 00:51:13.030
Okay, now a little bit about how
this works in the Sandbox.

00:51:13.250 --> 00:51:14.930
Sandbox is supposed to
be just like production.

00:51:14.940 --> 00:51:17.000
Unfortunately, for auto renewables,
it can't be like production

00:51:17.000 --> 00:51:19.590
because we can't have you sitting
around waiting seven days just

00:51:19.640 --> 00:51:21.100
to wait for something to renew.

00:51:21.100 --> 00:51:23.690
So, and we don't want these things
to renew over and over again.

00:51:23.690 --> 00:51:26.200
So the first thing new about Sandbox,
different than production,

00:51:26.200 --> 00:51:29.100
is we automatically cap renewals at six.

00:51:29.230 --> 00:51:31.100
And stuff renews really fast.

00:51:31.280 --> 00:51:34.100
You might want to test with years,
and I'm not kidding.

00:51:34.330 --> 00:51:36.670
Stuff renews so fast,
sometimes the renewal

00:51:36.670 --> 00:51:38.600
happens after expiry.

00:51:38.600 --> 00:51:42.600
I just told you earlier that renew
happens like hours before expiry.

00:51:42.600 --> 00:51:44.560
But in Sandbox,
if you have a subscription

00:51:44.600 --> 00:51:48.100
that is over in three minutes,
it might be a minute after expiry

00:51:48.100 --> 00:51:49.590
before the thing actually renews.

00:51:49.600 --> 00:51:52.600
And finally, the management interfaces
are not available.

00:51:52.710 --> 00:51:53.600
Okay?

00:51:53.600 --> 00:51:56.470
So those screens that I showed you at
the beginning that the user gets to see,

00:51:56.720 --> 00:51:58.600
they're not available in
Sandbox because Sandbox is a

00:51:58.600 --> 00:52:00.600
server-only type of environment.

00:52:00.600 --> 00:52:03.610
All right, so here's the -- I'm not
going to go over all of these,

00:52:03.610 --> 00:52:06.600
but as you notice at the top,
seven days is three minutes.

00:52:06.600 --> 00:52:08.590
One year is 60 minutes.

00:52:08.600 --> 00:52:12.090
So that means if you do the
seven-day one for three minutes,

00:52:12.210 --> 00:52:16.600
in 18 minutes, 18 to 20 minutes,
it's already expired.

00:52:16.600 --> 00:52:19.580
And I bring this up again so developers
aren't mystified by what's happening.

00:52:19.600 --> 00:52:22.420
They subscribe to this thing,
they go and get a latte, they come back,

00:52:22.420 --> 00:52:25.600
and they go, "Wow, nothing renewed,
and this thing says it's expired.

00:52:25.600 --> 00:52:28.600
It's busted." It's not
necessarily busted.

00:52:28.600 --> 00:52:29.600
It just means that it is dead now.

00:52:29.600 --> 00:52:33.350
It has totally expired,
and it actually renewed six times.

00:52:33.970 --> 00:52:35.930
Okay, so why do we cap at six?

00:52:36.020 --> 00:52:38.350
Number one,
we want to allow you to test how your

00:52:38.350 --> 00:52:40.480
app handles the end of a subscription.

00:52:40.700 --> 00:52:41.340
Number one.

00:52:41.340 --> 00:52:44.190
Number two, the fact that this thing goes
expired means you can use that

00:52:44.190 --> 00:52:46.130
interactive buy to do a few things.

00:52:46.130 --> 00:52:49.400
Basically turn your app into
the management interface because

00:52:49.400 --> 00:52:50.940
you can do that interactive buy.

00:52:50.940 --> 00:52:55.600
You can basically wait, buy another one,
maybe wait again, buy it again.

00:52:55.800 --> 00:52:57.190
You can also change the duration.

00:52:57.190 --> 00:52:59.330
Maybe you started with a
weekly and you waited a bit

00:52:59.330 --> 00:53:00.700
and you bought with a monthly.

00:53:01.110 --> 00:53:03.150
Anyway,
this allows you to test a non-contiguous

00:53:03.170 --> 00:53:06.400
history and it allows you to change
durations and test with that too.

00:53:06.400 --> 00:53:09.840
You can create a fairly complex history,
do restore all on a blanked out

00:53:09.840 --> 00:53:13.570
device and test how things work
in all those different cases.

00:53:13.780 --> 00:53:16.170
Okay, and finally,
I'm going to talk about auto-renew

00:53:16.170 --> 00:53:18.050
and the app review flow,
because I don't want you to

00:53:18.050 --> 00:53:18.860
get hung up in app review.

00:53:18.860 --> 00:53:21.460
I want you to understand how this works.

00:53:21.520 --> 00:53:24.330
What we do in app review is we
put your app in the sandbox,

00:53:24.340 --> 00:53:26.700
the same sandbox you were
using for development.

00:53:26.750 --> 00:53:30.470
But we don't use a developer-signed app,
we use a production-signed app.

00:53:30.600 --> 00:53:32.170
Now, why do we do that?

00:53:32.420 --> 00:53:35.940
Well, we need to review what
customers will receive.

00:53:35.940 --> 00:53:38.740
Now, some bugs only affect a
production-signed app,

00:53:38.820 --> 00:53:42.260
and we don't want to basically
have a brick go out into the store.

00:53:42.610 --> 00:53:44.400
But the problem is you've
got a half-production,

00:53:44.400 --> 00:53:46.230
half-development situation here.

00:53:46.310 --> 00:53:49.330
So to elaborate on what I mean by that,
if you're in development,

00:53:49.340 --> 00:53:52.280
you've got a test dev app that's
talking to your test server,

00:53:52.330 --> 00:53:54.340
and both of those things
are talking to our sandbox.

00:53:54.390 --> 00:53:57.540
Now, you go into production,
and you've got a production application,

00:53:57.570 --> 00:54:01.270
it's talking to a production server,
probably, it's probably wired to only

00:54:01.360 --> 00:54:03.890
talk to your production server,
and it's all talking to

00:54:03.890 --> 00:54:05.210
Apple's production servers.

00:54:05.320 --> 00:54:06.670
But if you get into app
review in the middle,

00:54:06.680 --> 00:54:09.940
we're in this sort of weird state
where you've got a production-signed

00:54:09.940 --> 00:54:12.380
app that's probably talking
to your production server,

00:54:12.440 --> 00:54:15.340
and yet both of those things
have to talk to our sandbox.

00:54:15.390 --> 00:54:17.990
Now, it's easy for us to fool the
app to thinking it's talking to

00:54:17.990 --> 00:54:21.150
production with some DNS tricks,
where it talks to our sandbox,

00:54:21.290 --> 00:54:23.020
but that doesn't apply to your server.

00:54:23.130 --> 00:54:24.860
So you see your server
in the middle there,

00:54:24.930 --> 00:54:27.960
it seems to be -- it's like we're
asking it to the impossible.

00:54:28.120 --> 00:54:31.310
The production dev server needs
to talk to our sandbox in one

00:54:31.310 --> 00:54:34.450
case for receipt verification,
and it needs to talk to our

00:54:34.450 --> 00:54:36.210
production in another case.

00:54:36.280 --> 00:54:37.970
So how can you accomplish this?

00:54:38.260 --> 00:54:42.220
What most people do is the first
option is sort of avoid it altogether.

00:54:42.220 --> 00:54:42.220
I call it the "darkness" option.

00:54:42.220 --> 00:54:45.760
I call it the "smart production
signed app." In this situation,

00:54:45.760 --> 00:54:48.190
the app knows the live version,
maybe by talking to

00:54:48.240 --> 00:54:51.480
your production server,
and it knows what version it is.

00:54:51.480 --> 00:54:54.360
And so that's enough information for
it to select the right version of

00:54:54.360 --> 00:54:56.880
your server for receipt verification.

00:54:56.880 --> 00:55:01.700
Now, the other option is what I call the
"smart production server." In this case,

00:55:01.700 --> 00:55:06.460
your client would pass a version
number that it is and the receipt,

00:55:06.460 --> 00:55:08.510
and then your server would go, "Okay,
I know what's live.

00:55:08.520 --> 00:55:09.680
I know what I just received.

00:55:09.680 --> 00:55:14.670
I'll send this to the sandbox or send it
to production." That's another way to go.

00:55:14.830 --> 00:55:19.440
The third way, which might be the best --
I think this is maybe how I do it,

00:55:19.640 --> 00:55:22.000
but it wasn't initially available
-- is to take advantage of

00:55:22.010 --> 00:55:24.180
one of those statuses I talked
about earlier on in the talk.

00:55:24.280 --> 00:55:28.840
I call this the "reactive
production server." In this case,

00:55:29.030 --> 00:55:31.200
your production server
receives a receipt,

00:55:31.250 --> 00:55:33.600
and it just always goes
"receipt to Apple production

00:55:33.600 --> 00:55:37.590
for verification." "Receipt,
Apple production for verification." Okay?

00:55:37.820 --> 00:55:41.900
And the only time it does anything
different is when it gets back 2107,

00:55:41.900 --> 00:55:43.240
you know, double 07.

00:55:43.240 --> 00:55:45.900
That means sandbox receipt
sent to production.

00:55:46.030 --> 00:55:48.860
If you get that,
then you go off and you send it to

00:55:48.860 --> 00:55:51.660
our sandbox and then just proceed.

00:55:51.750 --> 00:55:53.660
So I like this better
because there's no checking.

00:55:53.660 --> 00:55:55.460
There's no version passing.

00:55:55.460 --> 00:55:57.330
No one has to know what
the active version is.

00:55:57.450 --> 00:56:00.070
It sort of just works,
and the only time you have an extra call

00:56:00.340 --> 00:56:04.460
is in that case where you actually hit
the sandbox or need to hit the sandbox.

00:56:04.560 --> 00:56:07.000
So that concludes what
I needed to squeeze in here.

00:56:07.110 --> 00:56:11.740
To resume on this in-app
purchase reporting is Ricardo.

00:56:16.940 --> 00:56:19.120
Thank you, Dave.

00:56:19.270 --> 00:56:20.730
So In-App Purchas reporting.

00:56:20.970 --> 00:56:23.160
For consumables, non-consumables,
and auto renewables,

00:56:23.170 --> 00:56:26.170
you log into iTunes Connect,
Sales and Trends module.

00:56:26.200 --> 00:56:29.400
You can see your free apps, paid apps,
updates, as well as your In-Apps clicking

00:56:29.400 --> 00:56:33.150
on the In-Apps tab across
your weekly and daily views.

00:56:33.280 --> 00:56:36.960
We also have iTunes Connect Mobile 1.2,
which was released last week.

00:56:36.960 --> 00:56:38.660
An update for push notifications.

00:56:38.770 --> 00:56:40.940
Again, a similar review.

00:56:41.770 --> 00:56:44.030
Another view of iTunes Connect Mobile.

00:56:44.030 --> 00:56:47.480
In the auto-renewable case,
your personal information reports

00:56:47.480 --> 00:56:50.960
are available in the Sales and
Trend module in iTunes Connect.

00:56:51.080 --> 00:56:58.080
You log in, go to the opt-in report,
and use your opt-in passkey

00:56:58.080 --> 00:56:58.080
to unarchive that zip archive.

00:56:58.710 --> 00:57:01.860
And now to talk a little about
best practices across all app,

00:57:01.910 --> 00:57:04.800
In App Purchases,
I'll bring Max back on stage.

00:57:05.590 --> 00:57:06.460
Thank you, Max.

00:57:07.030 --> 00:57:07.490
Great.

00:57:07.500 --> 00:57:08.500
All right.

00:57:08.500 --> 00:57:09.470
Thank you.

00:57:09.530 --> 00:57:12.790
So now what I want to do is just walk
you through a few best practices for

00:57:12.790 --> 00:57:15.860
implementing In Apps in your application.

00:57:16.330 --> 00:57:21.800
The first is to know that
In-App Purchases are not cross-platform,

00:57:21.800 --> 00:57:21.800
nor are they cross-application.

00:57:23.330 --> 00:57:25.950
Meaning, in-apps are scoped to
a single application.

00:57:26.180 --> 00:57:28.130
So when you're restoring,
you're always restoring

00:57:28.150 --> 00:57:29.200
to a given application.

00:57:29.330 --> 00:57:32.190
Also, virtual currency is allowed
when used within an application,

00:57:32.200 --> 00:57:36.200
but it's non-transferable to goods and
services outside of your application.

00:57:36.390 --> 00:57:41.240
And again,
to point out what Dave stressed,

00:57:41.340 --> 00:57:43.930
AppReview is reviewing a
production-signed application that's

00:57:43.930 --> 00:57:43.930
pointed at the sandbox environment.

00:57:44.860 --> 00:57:46.790
So to wrap it all up,
I think one thing that you

00:57:46.870 --> 00:57:48.870
should definitely take away
from this is that the auto-renew

00:57:48.900 --> 00:57:51.480
subscriptions are fairly complex,
and you want to make sure that

00:57:51.480 --> 00:57:54.100
you've handled all of the different
cases when implementing them.

00:57:54.230 --> 00:57:57.750
Also, restoration of In-App Purchases
is required for non-consumable

00:57:57.770 --> 00:57:59.240
as well as subscriptions.

00:57:59.330 --> 00:58:01.820
If you're currently using the
non-renewable subscription types,

00:58:01.960 --> 00:58:05.880
you want to look at migrating over to
using the auto-renew subscription types.

00:58:06.010 --> 00:58:09.000
And for our Mac OS X developers,
Lion is just around the corner,

00:58:09.080 --> 00:58:11.890
and the sandbox is ready
for you to start testing.

00:58:12.150 --> 00:58:13.690
So for more information,
Bill Dudney is the

00:58:13.700 --> 00:58:15.700
Application Frameworks Evangelist.

00:58:15.700 --> 00:58:18.400
In addition to the documentation
that Jean-Pierre referenced,

00:58:18.400 --> 00:58:21.140
there's also the iTunes
Connect Developer User Guide.

00:58:21.160 --> 00:58:22.700
And of course,
we always welcome your feedback

00:58:22.700 --> 00:58:25.470
on the Apple Developer Forums.

00:58:25.580 --> 00:58:27.440
There's related sessions
directly following this one.

00:58:27.450 --> 00:58:31.690
It's a What's New with App Publishing
and iTunes Connect in the Presidio.

00:58:31.710 --> 00:58:33.560
And with that,
I'd like to say thank you very much,

00:58:33.580 --> 00:58:34.560
and have a good day.