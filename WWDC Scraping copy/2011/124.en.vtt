WEBVTT

00:00:14.060 --> 00:00:14.840
Well, good afternoon.

00:00:14.840 --> 00:00:18.100
Welcome to session 124,
Twitter Integration.

00:00:18.160 --> 00:00:20.590
My name's Glen,
and I'm an iOS software engineer,

00:00:20.600 --> 00:00:23.200
and I'm going to be joined
on the stage in a couple of

00:00:23.200 --> 00:00:24.700
minutes by my colleague Scott.

00:00:24.950 --> 00:00:29.630
Scott and I both worked on the
Twitter integration in iOS 5,

00:00:29.760 --> 00:00:34.560
and we're just really excited to
share with you the APIs and the

00:00:34.560 --> 00:00:37.440
things that we've been working on.

00:00:37.440 --> 00:00:37.610
Scott's got some awesome
demos for you to see,

00:00:37.610 --> 00:00:37.610
so you can look forward to that.

00:00:38.410 --> 00:00:42.600
So this is one of my favorite quotes
from the TV show The Simpsons.

00:00:42.630 --> 00:00:45.880
And it's from the Blackboard gag at the
beginning of the show where Bart writes

00:00:45.880 --> 00:00:48.020
out his punishment for the day.

00:00:48.020 --> 00:00:51.260
And it just reminds
me so much of Twitter.

00:00:51.340 --> 00:00:53.340
You know,
if you look up the term "Twitter

00:00:53.340 --> 00:00:56.490
Revolution" on Wikipedia,
you'll get no less than four

00:00:56.490 --> 00:00:58.540
disambiguations for that term.

00:00:58.540 --> 00:01:01.500
And these aren't just like
silly metaphors or hyperbole.

00:01:01.610 --> 00:01:03.690
I mean,
these actually are referring to real

00:01:03.690 --> 00:01:06.460
national revolutions that have happened.

00:01:06.500 --> 00:01:10.910
And to me, that just speaks a lot to the
influence of Twitter in our society

00:01:10.910 --> 00:01:13.400
as a communications tool today.

00:01:13.430 --> 00:01:17.160
And this starts to really flesh out
when you look at some of the numbers.

00:01:17.360 --> 00:01:22.630
I mean, Twitter has 200 million users.

00:01:22.640 --> 00:01:26.300
And they process -- Scott mentioned
this in the keynote on Monday --

00:01:26.300 --> 00:01:28.260
one billion tweets per week.

00:01:28.550 --> 00:01:33.240
And that is just an incredible amount of,
like, meaningless banter going on.

00:01:33.240 --> 00:01:35.090
And that's what Twitter is
doing across the Web.

00:01:35.090 --> 00:01:37.630
But, you know,
it's not all just meaningless banter,

00:01:37.630 --> 00:01:38.050
right?

00:01:38.230 --> 00:01:41.600
I mean, during the Japan earthquake,
they were processing

00:01:41.600 --> 00:01:43.860
5,500 tweets per second.

00:01:43.860 --> 00:01:45.660
And these are people
communicating with each other,

00:01:45.660 --> 00:01:47.720
you know, sharing about what's
going on in our world,

00:01:47.720 --> 00:01:50.120
and, you know, who knows,
maybe even communicating

00:01:50.230 --> 00:01:53.620
with their families,
letting them know they're okay.

00:01:53.620 --> 00:01:57.360
But I think for us as iOS developers,
this is a really

00:01:57.360 --> 00:01:59.070
interesting number to me.

00:01:59.070 --> 00:02:02.680
There's over 3,000 apps in
the App Store or on iOS that

00:02:02.880 --> 00:02:05.400
have have Twitter integration.

00:02:05.600 --> 00:03:14.900
[Transcript missing]

00:03:15.160 --> 00:03:17.630
Alright,
so this is what we call the Tweet Sheet,

00:03:17.780 --> 00:03:20.340
and this is the part of this
talk where we talk about

00:03:20.340 --> 00:03:22.230
pain-free Twitter integration.

00:03:22.240 --> 00:03:25.500
And as I mentioned, we like to refer to
this as the Tweet Sheet.

00:03:25.600 --> 00:03:28.830
Hopefully you've had a chance
to play with this a little bit.

00:03:28.950 --> 00:03:29.520
We love it.

00:03:29.610 --> 00:03:32.470
Our HI design team just did
a phenomenal job with this.

00:03:32.510 --> 00:03:33.710
It looks beautiful.

00:03:33.710 --> 00:03:36.890
It has this whole index card
motif and a character countdown.

00:03:36.890 --> 00:03:39.340
It's got,
you can add your location to it.

00:03:39.410 --> 00:03:40.950
You can even add attachments.

00:03:41.070 --> 00:03:45.050
And it's just really great and
really simple to integrate.

00:03:45.120 --> 00:03:48.540
So let's talk about how you do that.

00:03:48.570 --> 00:03:51.630
What we've done is,
as well as integrate this

00:03:51.680 --> 00:03:55.730
into iOS applications like
Safari and Maps and Address Book,

00:03:55.780 --> 00:03:59.960
we've made this and exposed this
as an API that's available to you.

00:03:59.960 --> 00:04:03.880
And it comes in the form of the
TWTweet Compose View Controller.

00:04:03.880 --> 00:04:05.390
So how do you invoke this thing?

00:04:05.420 --> 00:04:08.170
Well, there's four steps that
you basically have to take.

00:04:08.180 --> 00:04:11.360
And the first is that you need to
check for service availability.

00:04:11.360 --> 00:04:15.080
So if, yeah, that's not a joke.

00:04:15.110 --> 00:04:18.420
So not Twitter service availability.

00:04:18.420 --> 00:04:21.210
I'm talking about whether the
user actually has an account

00:04:21.310 --> 00:04:22.420
set up on their device.

00:04:22.420 --> 00:04:25.100
If they don't have an account
set up on their device,

00:04:25.220 --> 00:04:29.780
you may decide that you don't want
to show the UI element that shows

00:04:29.800 --> 00:04:34.410
your tweet button or whatever it
is that invokes your Tweet Sheet.

00:04:34.420 --> 00:04:37.540
So once you've done that,
it's just a matter of creating the

00:04:37.570 --> 00:04:41.990
View Controller that is the actual Tweet
Sheet and getting an instance of that.

00:04:42.040 --> 00:04:44.860
And then supplying a
completion handler to do that.

00:04:45.220 --> 00:04:49.490
Tell the tweet sheet what to do
once the users hit cancel or send.

00:04:49.860 --> 00:04:51.520
Now that you've got that all set up,
it's just a matter of

00:04:51.640 --> 00:04:53.390
presenting it modally over
your current view controller.

00:04:53.480 --> 00:04:56.420
So let's look at how we do this in code.

00:04:56.830 --> 00:05:00.020
And so I've got just a
sample view controller,

00:05:00.020 --> 00:05:01.020
like my view controller.

00:05:01.020 --> 00:05:03.920
And I'm just deciding to
override the load view method.

00:05:03.980 --> 00:05:08.940
And to check whether the user
actually has a Twitter account set up,

00:05:09.020 --> 00:05:12.520
it's just a class method on the
TWTweet Compose view controller

00:05:12.590 --> 00:05:13.580
called can't send tweet.

00:05:13.600 --> 00:05:16.700
And that'll just return a Boolean
value that tells you if the

00:05:16.700 --> 00:05:18.800
user can actually do a tweet.

00:05:18.810 --> 00:05:21.630
And so in this case,
we're setting an instance variable

00:05:22.070 --> 00:05:26.400
that will indicate to us later in,
you know, whenever our UI loads,

00:05:26.410 --> 00:05:28.970
whether we want to show our tweet button.

00:05:29.110 --> 00:05:34.130
So let's just imagine for a moment
that the action on that tweet button is

00:05:34.210 --> 00:05:36.820
to call this tweet button tap method.

00:05:37.180 --> 00:05:40.630
And let's take a look at what actually
happens when you drill into this method.

00:05:40.800 --> 00:05:44.520
So now that we've checked
for our service availability,

00:05:44.550 --> 00:05:46.570
the next thing we need to do
is just create our tweet sheet.

00:05:46.590 --> 00:05:48.410
And to do that, it's really simple.

00:05:48.420 --> 00:05:51.480
We just do a TWTweet
Compose view controller,

00:05:51.500 --> 00:05:53.470
allocant it,
simple Objective-C stuff that

00:05:53.470 --> 00:05:55.200
you're all familiar with,
hopefully.

00:05:55.230 --> 00:05:57.860
And then supply our completion handler.

00:05:57.860 --> 00:06:00.760
Now in this case, we're deciding to do
something really simple.

00:06:00.760 --> 00:06:03.350
We're just going to dismiss
the tweet sheet when it's done.

00:06:03.360 --> 00:06:07.050
You may, you know,
want to react to the tweet sheet being

00:06:07.050 --> 00:06:11.120
canceled or sent or the send button
being tapped in a different way.

00:06:11.120 --> 00:06:12.950
In this case,
we're just going to dismiss it.

00:06:12.990 --> 00:06:16.680
And just to note that this is
actually the default behavior if

00:06:16.680 --> 00:06:18.420
you decide not to provide a tweet.

00:06:18.440 --> 00:06:20.420
So we're going to call it
the TWTweetCompletionHandler.

00:06:20.440 --> 00:06:24.660
And once we got that, now we just call
presentModalViewController over

00:06:24.660 --> 00:06:25.660
our current view controller.

00:06:25.670 --> 00:06:26.880
And that will pop up the tweet sheet.

00:06:27.010 --> 00:06:30.090
So that's really as simple
as it is to set up the tweet

00:06:30.370 --> 00:06:32.360
sheet in your application.

00:06:32.360 --> 00:06:34.430
It's just a couple lines of code.

00:06:34.500 --> 00:06:36.620
But that's not all it can actually do.

00:06:36.620 --> 00:06:38.410
It has a lot more power than that.

00:06:38.440 --> 00:06:40.730
And it comes in the form of attachments.

00:06:40.830 --> 00:06:44.210
So you can actually prime the
tweet sheet with some values

00:06:44.330 --> 00:06:46.220
before you present it to the user.

00:06:46.260 --> 00:06:48.040
And there's three ways
that you can do that.

00:06:48.040 --> 00:06:53.070
The first is you can set the initial
text on the tweet sheet itself.

00:06:53.190 --> 00:06:57.220
And that's just done by calling
setInitialText and providing your string.

00:06:57.320 --> 00:06:59.700
And you'll notice that
there's a return value here.

00:06:59.810 --> 00:07:04.320
And all this does is let you know
if it was a successful operation.

00:07:04.430 --> 00:07:04.600
Okay.

00:07:04.600 --> 00:07:06.500
So why might that not be the case?

00:07:06.610 --> 00:07:09.900
Well,
if you provided a string that's too long,

00:07:10.050 --> 00:07:13.000
hopefully we're all aware of
the Twitter 140 character limit.

00:07:13.180 --> 00:07:15.460
I don't think that's going
to change anytime soon.

00:07:15.580 --> 00:07:17.660
But if you've gone too long,
then that's going to be a

00:07:17.660 --> 00:07:17.660
little bit of a problem.

00:07:17.660 --> 00:07:20.040
So if you've gone too long,
then that's one situation where

00:07:20.040 --> 00:07:21.600
you might get a negative result.

00:07:21.610 --> 00:07:25.980
The other is if you've already
presented the tweet sheet modally,

00:07:25.980 --> 00:07:29.170
and then you try and call this,
we actually actively disallow you from

00:07:29.170 --> 00:07:31.100
setting any of these things after that.

00:07:31.130 --> 00:07:33.930
Because we don't want the user
to be interacting with the

00:07:33.930 --> 00:07:36.990
device and then the tweet sheet
to be changing under their feet.

00:07:37.110 --> 00:07:40.360
So that's another reason
why that might happen.

00:07:40.430 --> 00:07:42.610
And you'll notice that we don't
return any kind of error here

00:07:42.610 --> 00:07:46.100
because it's not really a condition
that you can recover from.

00:07:46.130 --> 00:07:46.300
Okay.

00:07:46.400 --> 00:07:47.280
So you can set the initial text.

00:07:47.280 --> 00:07:51.080
The other thing that you can do is
add an image to the tweet sheet,

00:07:51.120 --> 00:07:52.160
which is great.

00:07:52.170 --> 00:07:55.280
And this follows the same general
pattern that we talked about

00:07:55.380 --> 00:07:57.200
before with the set initial text.

00:07:57.250 --> 00:08:01.810
You just provide your UI image,
and then you get a returned result.

00:08:02.050 --> 00:08:06.290
Now, when you decide to do this,
we actually take care of resizing

00:08:06.290 --> 00:08:10.510
the image for you and uploading it to
Twitter's image hosting service and doing

00:08:10.510 --> 00:08:13.220
the URL shortening for you automatically.

00:08:13.350 --> 00:08:16.900
And so, you know,
that URL takes some of your characters.

00:08:16.900 --> 00:08:21.030
And again, you may get a negative result
if you decide to add too many or

00:08:21.040 --> 00:08:25.540
you've already used up too many
characters in the tweet sheet.

00:08:25.840 --> 00:08:28.700
The last thing you can
do is set up a URL.

00:08:28.830 --> 00:08:32.030
And again,
very similar to what we said before,

00:08:32.270 --> 00:08:36.040
we handle the URL shortening for you,
and a Boolean result is returned.

00:08:37.960 --> 00:08:38.230
Okay.

00:08:38.350 --> 00:08:40.750
So, we've -- I've talked about
this a little bit as I've been

00:08:40.750 --> 00:08:43.530
going over the tweet sheet,
but just to reiterate, you know,

00:08:43.620 --> 00:08:44.980
there are sizing constraints.

00:08:44.980 --> 00:08:47.350
There's the 140-character maximum.

00:08:47.580 --> 00:08:53.250
Images and URLs use some of your
characters when you decide to add them.

00:08:53.310 --> 00:08:58.510
And just an interesting side note is that
the URL shortening uses 19 characters.

00:08:58.570 --> 00:09:00.640
Now, you know,
that's a cool little tidbit

00:09:00.640 --> 00:09:02.580
of information to know,
but it's really not

00:09:02.580 --> 00:09:05.030
something you should rely on,
right?

00:09:05.030 --> 00:09:08.860
Because as the namespace fills
up and the URLs get longer,

00:09:08.860 --> 00:09:12.710
you know, the 19-character length of
the URL shortening is not

00:09:12.710 --> 00:09:14.580
something you want to rely on.

00:09:14.580 --> 00:09:17.530
So, instead,
make sure that you're paying attention to

00:09:17.530 --> 00:09:21.030
the Boolean return values because that's
what you ought to trust is the truth.

00:09:22.740 --> 00:09:26.470
Okay, so I'm going to ask Scott to come
up and give you a demo of how to use

00:09:26.580 --> 00:09:28.440
the tweet sheet in your application.

00:09:28.510 --> 00:09:30.530
So please welcome Scott.

00:09:36.480 --> 00:09:38.890
So this is a real simple demo,
just to kind of show you how

00:09:38.900 --> 00:09:43.840
to pop up a tweet sheet and see
how we add attachments to it.

00:09:43.930 --> 00:09:47.320
So what I've done here is just
written a simple little app.

00:09:47.320 --> 00:09:49.520
It's got a number of buttons.

00:09:49.520 --> 00:09:52.680
And each one of these buttons represents
a kind of attachment type that you

00:09:52.680 --> 00:09:54.930
might want to add to the tweet sheet.

00:09:55.100 --> 00:09:57.440
So this guy up here, we've got some text.

00:09:57.440 --> 00:09:59.560
That's the initial text
you might want to set.

00:09:59.570 --> 00:10:02.620
These guys down here are
just a couple images,

00:10:02.620 --> 00:10:05.910
and then just a sort of a random link.

00:10:05.980 --> 00:10:08.460
And so when I click these buttons,
what's going to happen is it's

00:10:08.460 --> 00:10:11.320
going to go and make those calls
that Glen was just showing you.

00:10:11.320 --> 00:10:14.920
It's going to set the initial text,
or it's going to add an image or a URL.

00:10:14.960 --> 00:10:17.800
And if the result of that is true,
then we're going to see a

00:10:17.850 --> 00:10:19.260
cute little green checkbox.

00:10:19.450 --> 00:10:22.310
And if it's not so good,
then you're going to see this

00:10:22.380 --> 00:10:24.300
sort of angry red indicator.

00:10:24.360 --> 00:10:25.320
So let's go ahead and try a couple here.

00:10:25.370 --> 00:10:26.840
So I'm going to click this guy.

00:10:26.960 --> 00:10:29.590
So that text, that fit,
was less than 140 characters.

00:10:29.620 --> 00:10:31.080
So we're still good to go.

00:10:31.100 --> 00:10:32.400
I click another one here.

00:10:32.460 --> 00:10:35.130
That, we added the image,
and it knew that the

00:10:35.200 --> 00:10:38.840
Tico length today is 19,
so we're still all good to go.

00:10:38.870 --> 00:10:40.340
Can add a couple more.

00:10:40.360 --> 00:10:43.680
Then when I try to add this one,
that one didn't work.

00:10:43.750 --> 00:10:48.060
So let's try it again with
just a couple simple ones.

00:10:48.060 --> 00:10:50.000
Just these three things here.

00:10:50.260 --> 00:10:51.620
Hit the Tweet button.

00:10:51.660 --> 00:10:58.360
Pop it up, and you can see the Tweet
sheet is as we know and love.

00:10:58.390 --> 00:11:02.280
Let's show you just some of the
code here that it took to do that.

00:11:02.290 --> 00:11:04.090
As I flail around with the mouse.

00:11:04.240 --> 00:11:05.080
There we go.

00:11:05.080 --> 00:11:07.980
And you can also get--

00:11:08.100 --> 00:11:12.120
You can watch me learn
how to scroll and line.

00:11:12.250 --> 00:11:16.530
So this here is-- we're just
making a new tweet sheet,

00:11:16.600 --> 00:11:16.600
right?

00:11:16.650 --> 00:11:19.040
So just Alec and NIT1.

00:11:19.120 --> 00:11:23.020
Just like Glen did,
we're building a very simple

00:11:23.270 --> 00:11:24.720
completion handler block.

00:11:24.760 --> 00:11:27.300
And all we're going to do here is--
it's not particularly interesting.

00:11:27.300 --> 00:11:29.460
Whether or not the user
hit cancel or done,

00:11:29.460 --> 00:11:33.620
we'll go ahead and
just dismiss our sheet.

00:11:33.980 --> 00:11:36.690
And then here's where we set it.

00:11:36.710 --> 00:11:38.420
And then down below,
as I was adding-- as I was

00:11:38.420 --> 00:11:41.090
clicking those buttons,
again, we're just using these

00:11:41.090 --> 00:11:44.160
simple methods-- add image,
add URL, et cetera.

00:11:44.350 --> 00:11:47.150
And we're just returning out the back,
like, OK, did this work or not?

00:11:47.160 --> 00:11:50.100
And then there's some
other UI kit machinery to

00:11:50.120 --> 00:11:53.530
actually show the indicators.

00:11:53.850 --> 00:11:58.700
So lastly, when I click that button,
the Tweet button, it's so simple.

00:11:58.700 --> 00:12:00.850
All you have to do is just
take your Tweet sheet that we

00:12:00.850 --> 00:12:05.800
made and present it modally,
animated, and it pops up all nice,

00:12:05.800 --> 00:12:07.140
and you're good to go.

00:12:07.240 --> 00:12:09.790
So that's how easy it is to
add a Tweet sheet to your app.

00:12:09.930 --> 00:12:12.500
So I hope to see a lot of them.

00:12:12.620 --> 00:12:14.110
Thanks.

00:12:19.900 --> 00:12:20.300
Great.

00:12:20.300 --> 00:12:22.060
Thank you.

00:12:22.060 --> 00:12:23.360
Scott?

00:12:23.480 --> 00:12:27.710
So just a couple of tips and tricks when
you're interacting with the tweet sheet.

00:12:27.820 --> 00:12:31.360
Remember that the tweet sheet is really
only designed for modal presentations.

00:12:31.440 --> 00:12:34.560
So you kind of want to stay away
from trying to put this thing in

00:12:34.560 --> 00:12:38.030
a UI navigation controller stack
or in a UI popover on the iPad.

00:12:38.030 --> 00:12:41.800
It's really designed to be presented
modally over your application.

00:12:42.020 --> 00:12:45.310
So use the present modal view
controller method on UI view

00:12:45.310 --> 00:12:47.350
controller to present it.

00:12:47.580 --> 00:12:52.660
Again, just to reiterate,
set the properties prior to presentation.

00:12:52.760 --> 00:12:55.430
We don't want you messing around
with the tweet sheet under the

00:12:55.430 --> 00:12:57.180
user's feet while they're using it.

00:12:57.420 --> 00:13:00.150
So do that before you present it.

00:13:00.250 --> 00:13:05.700
And then check the can send tweet
method if applicable for you.

00:13:05.700 --> 00:13:09.390
So one little detail to note here
is that if the user doesn't actually

00:13:09.390 --> 00:13:13.420
have an account set up in settings and
you decide to invoke the tweet sheet,

00:13:13.420 --> 00:13:16.040
we'll actually context switch
the user back to the user.

00:13:16.040 --> 00:13:16.560
So if you're using a tweet sheet,
you're going to have to go

00:13:16.570 --> 00:13:19.100
back to settings to allow
them to set up an account.

00:13:19.130 --> 00:13:22.180
And, you know, this may or may not be a
behavior that you want.

00:13:22.180 --> 00:13:26.870
So you should be aware of it and make
sure that you check the can send tweet

00:13:26.930 --> 00:13:29.480
class method on the view controller.

00:13:29.480 --> 00:13:34.380
And the other thing is just to be
aware that we are doing image resizing.

00:13:34.420 --> 00:13:36.590
We are uploading things.

00:13:36.620 --> 00:13:41.850
So, you know, if you provide a huge image
to the add image method,

00:13:42.150 --> 00:13:46.020
then it's going to take, you know,
a few seconds to resize if necessary.

00:13:46.020 --> 00:13:46.550
Okay.

00:13:46.550 --> 00:13:48.370
So that is the tweet sheet.

00:13:48.370 --> 00:13:50.320
That is pain-free Twitter integration.

00:13:50.320 --> 00:13:52.600
It took us about 10
minutes to go through that.

00:13:52.600 --> 00:13:53.970
It's really, really simple.

00:13:54.280 --> 00:13:56.940
And I encourage you,
if you have simple Twitter integration

00:13:56.940 --> 00:13:58.900
needs in your application,
use this.

00:13:58.900 --> 00:14:02.640
You get a great UI for free and
it's really easy to invoke it.

00:14:04.680 --> 00:14:08.510
Okay, so we talked about that,
and now we're going to move on to talk

00:14:08.590 --> 00:14:11.100
about something else that's pretty cool,
which is the new accounts

00:14:11.140 --> 00:14:12.860
framework in iOS 5.

00:14:12.880 --> 00:14:17.270
And this is a really cool feature,
but it's kind of a sleeper feature,

00:14:17.270 --> 00:14:17.910
right?

00:14:17.920 --> 00:14:21.920
It's not really talked about a lot,
but what it allows you to

00:14:21.920 --> 00:14:26.160
do is access built-in system
accounts that are on the device.

00:14:26.250 --> 00:14:29.190
Now, for iOS 5,
we're only supporting Twitter accounts,

00:14:29.190 --> 00:14:31.380
but there's still a lot of power in that.

00:14:31.800 --> 00:14:37.140
And we also allow you to add accounts
in certain situations and make system

00:14:37.140 --> 00:14:40.960
accounts as well from your application.

00:14:40.960 --> 00:14:43.110
And we'll go into why you
might want to do that and how

00:14:43.110 --> 00:14:44.320
to do that in a little bit.

00:14:44.400 --> 00:14:46.960
And if you do decide to do that,
we also take care of

00:14:46.960 --> 00:14:48.470
the validation for you.

00:14:48.480 --> 00:14:51.540
We make sure that the credentials
that you provide us are good to go

00:14:51.550 --> 00:14:55.280
with Twitter before we add the account
and make it become a system account.

00:14:55.300 --> 00:14:59.120
All right,
so just a word on the architecture of

00:14:59.150 --> 00:15:01.780
the accounts framework and how it's laid.

00:15:01.810 --> 00:15:05.190
So you've got your application,
it's in its sandbox,

00:15:05.410 --> 00:15:09.600
and we've got the accounts database
and the protected file system.

00:15:09.600 --> 00:15:13.540
So how do these things
communicate with each other?

00:15:13.540 --> 00:15:16.230
Well,
there's an intermediary process called

00:15:16.230 --> 00:15:20.240
accounts D that basically acts as
the arbiter between your application

00:15:20.340 --> 00:15:22.490
and the accounts database itself.

00:15:22.520 --> 00:15:25.960
And this architecture gives
us a couple nice features.

00:15:25.960 --> 00:15:27.470
One is obviously security, right?

00:15:27.480 --> 00:15:31.780
We can store the credentials for the user
securely in the protected file system.

00:15:31.800 --> 00:15:34.610
And, you know,
a bunch of applications can't get at it

00:15:34.610 --> 00:15:36.840
without going through our frameworks.

00:15:36.900 --> 00:15:41.310
And it also gives us a layer of
abstraction for your application

00:15:41.360 --> 00:15:43.510
and other applications
to access the accounts,

00:15:43.580 --> 00:15:45.690
which, you know,
limits the way that they can access

00:15:46.000 --> 00:15:48.940
the database and make sure they're not,
you know, messing it up for you, right?

00:15:48.960 --> 00:15:53.050
So that's just a quick
overview on how it's laid out.

00:15:53.060 --> 00:15:56.650
And this is basically what
the class diagram looks like,

00:15:56.650 --> 00:15:58.220
and it's very simple.

00:15:58.220 --> 00:16:00.980
We've got four that are there.

00:16:00.980 --> 00:16:01.660
But I want to finish up with
a little bit of a summary.

00:16:01.800 --> 00:16:03.510
So I'm going to focus on
these three to begin with.

00:16:03.600 --> 00:16:06.420
And essentially what you
have is an account store.

00:16:06.420 --> 00:16:08.610
And in your account store,
you've got a bunch of accounts,

00:16:08.690 --> 00:16:10.210
and each account has an account type.

00:16:10.270 --> 00:16:12.270
And that's really all there is to it.

00:16:12.350 --> 00:16:14.980
But what I'm going to do is go
through each of these classes and

00:16:14.980 --> 00:16:18.280
just describe them to you so you can,
you know, maybe understand their

00:16:18.280 --> 00:16:19.750
function a little better.

00:16:19.760 --> 00:16:21.900
And we'll start out
with the account store.

00:16:21.900 --> 00:16:26.460
So the account store is your
connection to the accounts database.

00:16:26.460 --> 00:16:30.160
And when you allocate and
initialize one of these,

00:16:30.160 --> 00:16:32.860
automatically,
your connection to the accounts

00:16:32.980 --> 00:16:34.070
database is established.

00:16:34.080 --> 00:16:38.420
Now, these are things that you generally
want to keep as long-lived instances,

00:16:38.420 --> 00:16:38.940
right?

00:16:38.940 --> 00:16:41.070
You typically don't want
to allocate one of these,

00:16:41.080 --> 00:16:43.640
interact with the account,
and then throw away the account store,

00:16:43.640 --> 00:16:46.940
especially if you have the kind of
application that's going to be using

00:16:46.990 --> 00:16:48.660
the account throughout its lifecycle.

00:16:48.660 --> 00:16:52.090
So it's something you probably want
to put maybe in your application

00:16:52.090 --> 00:16:53.740
delegate or your review controller.

00:16:53.740 --> 00:16:54.600
You want to keep it around.

00:16:54.660 --> 00:17:01.740
Now, it's also important to remember that
the account instances themselves are,

00:17:01.740 --> 00:17:04.990
are bound to the account
store from which they came.

00:17:05.040 --> 00:17:08.320
So if you access an account and
pull it out of an account store

00:17:08.360 --> 00:17:11.570
and then deallocate that account
store and try to use that account

00:17:11.620 --> 00:17:14.340
with another account store,
okay, bad things are going to happen.

00:17:14.340 --> 00:17:17.360
There's an implicit connection
between those two objects that,

00:17:17.520 --> 00:17:18.590
that needs to be respected.

00:17:18.600 --> 00:17:22.920
The other thing I want to point out is
the AC accounts change notification,

00:17:22.920 --> 00:17:24.070
which is defined in this header.

00:17:24.160 --> 00:17:28.480
And this is something that any
application that is implementing

00:17:28.490 --> 00:17:32.460
code that uses the accounts
framework needs to respect.

00:17:32.460 --> 00:17:35.660
It's a notification that fires
when the accounts database changes.

00:17:35.700 --> 00:17:40.400
So if the user goes into settings,
adds an account or removes an account,

00:17:40.400 --> 00:17:43.760
or maybe revokes permission
for a particular application,

00:17:43.850 --> 00:17:47.700
this notification is going to
fire and you need to respond to

00:17:47.700 --> 00:17:49.100
it and observe that notification.

00:17:49.100 --> 00:17:51.600
And any instances of accounts
that you have lying around,

00:17:51.600 --> 00:17:54.680
you need to refresh and obtain
new ones from the account store

00:17:54.680 --> 00:17:57.500
because otherwise you're going to be
dealing with outdated information.

00:17:59.300 --> 00:18:00.600
So that's the account store.

00:18:00.650 --> 00:18:03.500
And the next one that I want to
look at is the AC account object,

00:18:03.610 --> 00:18:05.040
which is really what
you're interested in,

00:18:05.040 --> 00:18:05.380
right?

00:18:05.450 --> 00:18:08.230
This is the object that
represents the account itself,

00:18:08.230 --> 00:18:10.370
and it's got five basic properties on it.

00:18:10.400 --> 00:18:11.460
It's very simple.

00:18:11.770 --> 00:18:13.140
It has a unique identifier.

00:18:13.140 --> 00:18:17.380
It has an associated account type,
username, credential, and description.

00:18:17.380 --> 00:18:20.080
And I just want to point
out the description.

00:18:20.080 --> 00:18:24.250
So when we create a Twitter account,
we automatically create the

00:18:24.250 --> 00:18:28.050
description by appending the
at symbol to the username.

00:18:28.060 --> 00:18:32.220
But the user can actually
go into settings and adjust

00:18:32.220 --> 00:18:35.990
this thing so that it can,
you know, read however they want it to.

00:18:36.000 --> 00:18:38.260
So typically,
if you're presenting UI that

00:18:38.310 --> 00:18:41.740
references a particular account,
the description is what you want to use,

00:18:41.850 --> 00:18:43.900
because that's what the
user has told the system,

00:18:43.900 --> 00:18:47.580
"Hey, this is what I want this
account to be known by."

00:18:48.170 --> 00:18:50.840
Okay, the next one is the
AC account type object.

00:18:51.000 --> 00:18:53.800
And so every account has an account type.

00:18:53.950 --> 00:18:55.900
And it's got three simple
properties as well.

00:18:55.900 --> 00:18:57.300
Again, it's got an identifier.

00:18:57.300 --> 00:19:01.360
And these just aren't just, you know,
the account type is not

00:19:01.360 --> 00:19:02.700
just a string or something.

00:19:02.700 --> 00:19:05.320
This is a real object that
lives in the account store.

00:19:05.320 --> 00:19:06.740
And it has a description.

00:19:06.770 --> 00:19:08.940
And then it's got this
interesting property called

00:19:09.050 --> 00:19:10.480
the access granted property.

00:19:10.480 --> 00:19:16.050
And that tells you whether the
user has granted access to accounts

00:19:16.060 --> 00:19:17.970
of this type to your application.

00:19:18.000 --> 00:19:21.870
So you can check this at any time
to figure out if you have permission

00:19:21.990 --> 00:19:24.730
to use accounts of this type.

00:19:25.460 --> 00:19:28.360
Okay, so let's talk about
that a little bit more.

00:19:28.360 --> 00:19:32.040
How do you actually request permission
to use a particular account?

00:19:32.110 --> 00:19:35.380
It's very simple, and we're going to step
through it by code.

00:19:35.500 --> 00:19:38.880
As I mentioned,
accounts are protected by account type.

00:19:39.160 --> 00:19:47.090
So once you have access to, you know,
one Twitter account, you essentially have

00:19:47.090 --> 00:19:47.090
access to all of them,
and we message it to

00:19:47.090 --> 00:19:47.090
the user in that way.

00:19:47.320 --> 00:19:51.240
So to get permission for an account,
you just create an account store.

00:19:51.240 --> 00:19:54.640
Again, very simple, AC account store,
Alicanit.

00:19:54.680 --> 00:19:57.220
Your connection is now
established to the database.

00:19:57.250 --> 00:20:00.050
And then you obtain the account
type that you're interested

00:20:00.050 --> 00:20:01.680
in gaining permission for.

00:20:01.710 --> 00:20:04.640
In this case,
it's always going to be Twitter, right?

00:20:04.640 --> 00:20:06.800
So to do that,
it's just a call to account type

00:20:06.800 --> 00:20:08.680
with account type identifier.

00:20:08.680 --> 00:20:10.920
And you'll notice this identifier.

00:20:10.920 --> 00:20:13.320
So, you know,
all supported account types,

00:20:13.320 --> 00:20:15.480
we define an identifier for them,
and it's in the header.

00:20:15.480 --> 00:20:19.460
So in this case, it's the AC account type
identifier for Twitter.

00:20:19.460 --> 00:20:22.910
We pass that in, and now we have our
Twitter account type object.

00:20:22.910 --> 00:20:26.940
And we can request permission to
use that from the user by just

00:20:26.990 --> 00:20:31.620
calling on the account store,
request access to accounts with type.

00:20:31.650 --> 00:20:34.570
And that comes with
the completion handler.

00:20:34.570 --> 00:20:36.680
So we've used completion
handlers a couple of times now.

00:20:36.680 --> 00:20:39.260
And I just want to point out,
this is probably a good time to

00:20:39.260 --> 00:20:43.810
point out that we make heavy use of
blocks and Grand Central Dispatch

00:20:43.910 --> 00:20:45.450
in these frameworks.

00:20:45.610 --> 00:20:47.450
So if you're not familiar with those,
I'd encourage you,

00:20:47.460 --> 00:20:49.750
get familiar with blocks
in Grand Central Dispatch.

00:20:49.750 --> 00:20:53.830
It's going to be useful if you're
interacting with these APIs.

00:20:53.950 --> 00:20:55.880
So you'll notice in
our completion handler,

00:20:55.880 --> 00:20:59.780
we return a Boolean that indicates
whether you got permission or not,

00:20:59.860 --> 00:21:02.710
and an error in case
anything else went wrong.

00:21:03.120 --> 00:21:05.520
And you can check the
granted Boolean value.

00:21:05.740 --> 00:21:08.450
And if it's true,
then you know you have permission

00:21:08.450 --> 00:21:10.040
to access the accounts.

00:21:10.200 --> 00:21:11.340
Okay.

00:21:11.340 --> 00:21:14.580
So now that you've got permission,
you've requested it from the user.

00:21:14.580 --> 00:21:15.980
And you've got permission
to access the accounts.

00:21:15.980 --> 00:21:17.960
So you can see that the
user has granted it to you.

00:21:17.990 --> 00:21:20.360
How do you actually go and
get an account instance?

00:21:20.440 --> 00:21:22.550
And there's two ways
that you can do this.

00:21:22.550 --> 00:21:26.340
And the first is you can request all
the accounts of a particular type.

00:21:26.340 --> 00:21:27.500
And

00:21:27.970 --> 00:21:31.610
So let's take a quick look
at how you do that in code.

00:21:31.770 --> 00:21:35.230
Again, obtain that Twitter account
type by calling account type

00:21:35.290 --> 00:21:36.930
with account type identifier.

00:21:37.200 --> 00:21:41.280
And then just ask the store for all
the accounts of a particular type,

00:21:41.280 --> 00:21:45.850
and you'll get an ordered array in the
same order that the accounts were added

00:21:45.860 --> 00:21:48.530
of the accounts that are on the system.

00:21:49.600 --> 00:21:52.800
The other way that you can do
this is to request an account

00:21:52.800 --> 00:21:54.930
by a particular identifier.

00:21:55.040 --> 00:21:59.400
And so I mentioned each account
has a unique identifier,

00:21:59.400 --> 00:22:03.060
and you may decide that you
want to save that identifier

00:22:03.060 --> 00:22:06.100
aside somewhere in your code,
maybe in a P list or something,

00:22:06.100 --> 00:22:10.480
and access that exact account later on,
or maybe in a different

00:22:10.480 --> 00:22:12.680
instance of your application.

00:22:14.030 --> 00:22:17.430
So to do that, it's just a simple call to
account with identifier,

00:22:17.430 --> 00:22:19.480
and that'll give you
your AC account object.

00:22:19.560 --> 00:22:21.760
So those are the two ways
that you can access accounts

00:22:21.760 --> 00:22:23.290
using the accounts framework.

00:22:25.130 --> 00:22:26.380
All right.

00:22:26.500 --> 00:22:30.120
So we've talked about
the three basic classes,

00:22:30.170 --> 00:22:35.680
but there's one more that I want to cover
and it's the AC account credential class.

00:22:35.700 --> 00:22:40.410
And this is a really interesting one
because what it makes possible is

00:22:40.450 --> 00:22:46.310
for you to actually add accounts to
the device by providing credentials.

00:22:46.310 --> 00:22:51.660
So if you're an application developer and
you've got a full-fledged Twitter client,

00:22:51.780 --> 00:22:57.340
it's a pretty good bet that you've
got the OAuth access tokens and the

00:22:57.360 --> 00:23:03.320
token secret associated with those
accounts stored in your application.

00:23:03.320 --> 00:23:07.850
And wouldn't it be nice if you
could migrate those credentials to

00:23:07.850 --> 00:23:10.250
become system accounts themselves?

00:23:10.590 --> 00:23:14.580
So that's what we're allowing you to do
because we realize that for those of you

00:23:14.580 --> 00:23:21.380
who are implementing Twitter clients,
you know, you've already got your users'

00:23:21.380 --> 00:23:25.800
account information and it may
not be guaranteed that they've

00:23:25.800 --> 00:23:29.100
gone and set up a Twitter account
as a system account already.

00:23:29.430 --> 00:23:32.900
So what we do is we allow you to
actually provide credentials that we

00:23:32.920 --> 00:23:35.570
will then store as system accounts.

00:23:37.170 --> 00:23:40.800
So that's exactly what
we're describing here.

00:23:41.120 --> 00:23:43.880
You can add new system
Twitter accounts from your app,

00:23:43.930 --> 00:23:46.430
and you do that by
migrating OAuth credentials,

00:23:46.450 --> 00:23:48.040
and we'll show you how to do that.

00:23:48.090 --> 00:23:50.050
When you provide us with
the OAuth credentials,

00:23:50.200 --> 00:23:52.290
we take care of going
and talking to Twitter,

00:23:52.430 --> 00:23:55.230
making sure that your
OAuth credentials are OK,

00:23:55.330 --> 00:23:58.910
and then setting up a system
account on the device.

00:23:59.090 --> 00:24:02.920
And it all happens really pretty
seamlessly and automatically.

00:24:02.960 --> 00:24:07.050
OK, so let's look at in code
how you actually do this.

00:24:07.220 --> 00:24:10.060
The first thing you do is
create your account object.

00:24:10.090 --> 00:24:12.350
It's got one initializer.

00:24:12.390 --> 00:24:15.940
Every account has an account type,
so it's init with account type.

00:24:15.960 --> 00:24:18.300
I've showed you a couple times
how to obtain the account

00:24:18.350 --> 00:24:19.530
type from the account store.

00:24:19.700 --> 00:24:21.420
You just pass that in,
and now you've got a

00:24:21.420 --> 00:24:22.900
new account instance.

00:24:22.930 --> 00:24:25.770
It's not saved in the database yet,
but because we've got to add

00:24:25.770 --> 00:24:30.040
a couple of other things,
or really one more thing.

00:24:30.310 --> 00:24:34.260
So the next thing you do is
create your OAuth credential.

00:24:34.300 --> 00:24:38.410
And so you take your OAuth access
token and access secret for your

00:24:38.410 --> 00:24:43.780
particular account and initialize
a credential object with it,

00:24:43.780 --> 00:24:46.950
and then set that
credential on the account.

00:24:46.960 --> 00:24:48.870
And once you've done that,
you're ready to go,

00:24:48.960 --> 00:24:51.340
and it's just a matter
of calling account store,

00:24:51.420 --> 00:24:53.710
save account,
pass in your account instance

00:24:53.840 --> 00:24:56.830
with its OAuth credentials,
and we'll go ahead and verify

00:24:56.850 --> 00:24:59.160
that the credentials are valid.

00:24:59.210 --> 00:25:00.540
And it's pretty cool.

00:25:00.690 --> 00:25:02.000
Right in settings.

00:25:02.150 --> 00:25:04.040
Your Twitter account
will actually appear.

00:25:04.180 --> 00:25:05.620
And this is really powerful, right?

00:25:05.620 --> 00:25:08.080
Because it means that your
account that you've been using

00:25:08.080 --> 00:25:09.800
is now accessible to the user.

00:25:09.800 --> 00:25:11.530
It can be used in the tweet sheet.

00:25:11.720 --> 00:25:15.040
It can be used in other
applications as well,

00:25:15.040 --> 00:25:17.090
which is really great.

00:25:18.530 --> 00:25:22.880
So a couple of tips and tricks in
dealing with the accounts framework.

00:25:22.940 --> 00:25:26.160
One is to ask for
access when you need it.

00:25:26.290 --> 00:25:31.630
So if you've got a full-fledged
Twitter client and you're using

00:25:31.630 --> 00:25:35.940
our frameworks and you want
to use the user's accounts,

00:25:35.940 --> 00:25:39.840
which we encourage you to do,
then it makes sense for

00:25:39.930 --> 00:25:43.300
you to ask at the outset,
right at application launch time.

00:25:43.460 --> 00:25:46.440
Ask the user if they can use their
accounts-- if you can use their accounts,

00:25:46.450 --> 00:25:49.350
because if you don't,
it's essentially a non-starter for you,

00:25:49.640 --> 00:25:49.900
right?

00:25:49.900 --> 00:25:55.330
But if you're using Twitter as an
auxiliary function to your application

00:25:55.330 --> 00:25:59.310
or it's just a neat social feature,
then don't bug the user with an alert

00:25:59.470 --> 00:26:01.580
right when your application launches.

00:26:01.590 --> 00:26:06.880
Instead, ask for permission when they
decide to use that Twitter feature,

00:26:06.880 --> 00:26:07.550
right?

00:26:08.480 --> 00:26:13.150
Important to note that certain
operations are always gated with alerts.

00:26:13.160 --> 00:26:16.650
So, for instance,
requesting access to an account,

00:26:16.900 --> 00:26:19.400
obviously, is going to pop up an alert.

00:26:19.400 --> 00:26:26.020
And adding an account to the system
using existing OAuth credentials

00:26:26.650 --> 00:26:29.410
will also pop up an alert.

00:26:29.530 --> 00:26:30.600
We're going to ask the user if it's
okay to add this account to the system.

00:26:31.340 --> 00:26:33.360
Again, don't cross the streams.

00:26:33.430 --> 00:26:37.590
Don't take an account from one account
store and try and interact with another

00:26:38.120 --> 00:26:40.290
account store using that account.

00:26:40.320 --> 00:26:41.930
It's just not a good idea.

00:26:41.930 --> 00:26:46.150
And pay attention to that notification
that I was telling you about.

00:26:46.150 --> 00:26:49.300
And this is an important note
as well that I'm going to

00:26:49.300 --> 00:26:51.510
mention a couple more times.

00:26:51.510 --> 00:26:55.090
Often as a result of
interacting with these APIs,

00:26:55.120 --> 00:26:59.520
you need to update UI,
and you need to make calls to UIKit.

00:27:00.400 --> 00:27:04.050
And all of the block-based
APIs that we have are not guaranteed

00:27:04.050 --> 00:27:05.960
to return on the main thread.

00:27:05.960 --> 00:27:10.500
So if you are updating UI as a
result of any of these calls,

00:27:10.570 --> 00:27:14.530
then make sure you're dispatching
that call to the main thread,

00:27:14.530 --> 00:27:16.830
or performing a selector
on the main thread.

00:27:16.830 --> 00:27:20.130
My favorite way of doing it is this,
is just to use dispatch async,

00:27:20.130 --> 00:27:21.700
and this is more GCD magic.

00:27:21.700 --> 00:27:26.190
Use dispatch async, get the main queue,
and then throw in a block that calls your

00:27:26.510 --> 00:27:28.940
method that'll actually update your UI.

00:27:32.010 --> 00:27:35.190
Okay, so that is a quick overview
of the accounts framework.

00:27:35.250 --> 00:27:40.000
It allows you to access built-in system
accounts and use them and interact

00:27:40.000 --> 00:27:41.900
with the Twitter API using them.

00:27:41.900 --> 00:27:46.550
It also allows you to migrate existing
OAuth credentials that you have and

00:27:46.560 --> 00:27:50.900
graduate them to become system accounts
that can be used by the tweet sheet

00:27:50.900 --> 00:27:53.330
and other applications if necessary.

00:27:54.430 --> 00:27:59.730
So, now we're going to move on and
talk about the Twitter request API.

00:28:00.040 --> 00:28:03.160
Now, I think at this point it's probably
a good idea to just kind of take a

00:28:03.160 --> 00:28:10.500
step back and take a look at what the
Twitter ecosystem looks like on iOS.

00:28:10.590 --> 00:28:15.400
And so what we have is, you know,
on iOS we have the best

00:28:15.400 --> 00:28:17.800
mobile Twitter clients around.

00:28:17.800 --> 00:28:18.590
Thanks to you guys.

00:28:18.600 --> 00:28:21.100
I mean, we have awesome Twitter clients
that are available.

00:28:21.100 --> 00:28:24.520
And then we've got this
expressive and useful

00:28:24.520 --> 00:28:28.200
Twitter API that's available to you,
right?

00:28:28.310 --> 00:28:31.910
And that's great,
but it's really not the whole story,

00:28:31.910 --> 00:28:32.600
right?

00:28:32.600 --> 00:28:36.460
Because kind of, you know,
sandwiched in the middle of this

00:28:36.460 --> 00:28:40.140
thing is this other thing called
OAuth that you have to deal with

00:28:40.190 --> 00:28:42.290
if you're interacting with Twitter.

00:28:42.410 --> 00:28:46.720
And as we were thinking about
implementing Twitter in iOS and

00:28:46.720 --> 00:28:49.800
talking to our counterparts at
Twitter and talking to people

00:28:49.800 --> 00:28:54.170
who've implemented Twitter clients,
it became apparent really quickly

00:28:54.480 --> 00:28:59.380
that the biggest stumbling block to
doing this is using OAuth and using

00:28:59.380 --> 00:29:02.990
-- and I'm not just talking about,
you know, the steps of going to a website

00:29:03.020 --> 00:29:04.200
and authorizing applications.

00:29:04.200 --> 00:29:08.500
I mean, just the mechanics of
signing your requests.

00:29:08.500 --> 00:29:11.380
Many of you have to use, you know,
open source or third-party

00:29:11.380 --> 00:29:13.120
libraries to do this kind of thing.

00:29:13.250 --> 00:29:18.300
And so one of our big goals when
we were creating the Twitter API in

00:29:18.470 --> 00:29:23.020
iOS 5 was just to get rid of
this whole layer entirely.

00:29:23.230 --> 00:29:23.700
It's okay.

00:29:23.700 --> 00:29:24.500
Yeah, you can clap.

00:29:24.610 --> 00:29:26.900
Because I think it's pretty cool.

00:29:26.900 --> 00:29:30.990
I mean, this really gets a big stumbling
block out of your way completely,

00:29:30.990 --> 00:29:31.600
right?

00:29:31.600 --> 00:29:37.290
And it allows you to interact with the
Twitter API directly and not really have

00:29:37.290 --> 00:29:40.900
to worry about all these details of how
to sign requests and all that stuff.

00:29:40.900 --> 00:29:42.240
We just take care of it for you.

00:29:42.410 --> 00:29:44.660
You don't have to worry about it.

00:29:44.800 --> 00:30:48.300
[Transcript missing]

00:30:50.090 --> 00:30:51.800
We take care of the
OAuth signing for you.

00:30:51.800 --> 00:30:54.570
As I was mentioning,
we do all the heavy lifting of that.

00:30:54.850 --> 00:30:58.330
And all you have to worry about
is your application and how to

00:30:58.330 --> 00:31:00.290
interact with the Twitter API.

00:31:00.380 --> 00:31:03.140
And you can use any of
the Twitter accounts,

00:31:03.140 --> 00:31:07.010
thanks to the new accounts framework,
in conjunction with

00:31:07.010 --> 00:31:09.940
the TW request object,
provided the user has

00:31:09.940 --> 00:31:12.070
granted you access to do so.

00:31:13.240 --> 00:31:15.500
The other thing we added was
support for multi-part data.

00:31:15.500 --> 00:31:20.500
So some of the APIs that Twitter uses
or exposes requires you to upload

00:31:20.560 --> 00:31:22.910
pictures or things like that.

00:31:22.960 --> 00:31:26.090
And the way that's done is by
using multi-part form data.

00:31:26.140 --> 00:31:29.330
And so we have just a really
easy way for you to add that to

00:31:29.410 --> 00:31:33.700
your TW requests and not have to
worry too much about the details.

00:31:33.700 --> 00:31:36.100
So we'll show you how to do that too.

00:31:37.660 --> 00:31:38.250
All right.

00:31:38.330 --> 00:31:40.390
So this is our TW request object.

00:31:40.390 --> 00:31:43.370
And you can see it's got
four basic properties to it,

00:31:43.710 --> 00:31:44.040
right?

00:31:44.040 --> 00:31:47.640
And if you're familiar with
using the Twitter API and looking

00:31:47.640 --> 00:31:51.760
at the Twitter documentation,
these probably look pretty familiar

00:31:51.760 --> 00:31:55.140
to you because every piece of
Twitter documentation out there

00:31:55.510 --> 00:31:59.140
has essentially an analog to
these four pieces of information

00:31:59.140 --> 00:32:01.200
in the TW request object.

00:32:01.200 --> 00:32:03.020
And so when you're coding
up your TW requests,

00:32:03.020 --> 00:32:06.080
you know, I encourage you, have the,
have the, have the Twitter API.

00:32:06.080 --> 00:32:06.080
And so that's kind of the
way that we're doing it.

00:32:07.170 --> 00:32:07.740
All right.

00:32:07.740 --> 00:32:10.180
So we have the,
the Twitter docs open right next to it.

00:32:10.180 --> 00:32:12.480
And it should be,
it should feel almost as natural as

00:32:12.480 --> 00:32:15.570
like just filling in the blanks as
you go through the documentation.

00:32:15.570 --> 00:32:17.260
So, you know, we have a URL property.

00:32:17.510 --> 00:32:20.320
Every Twitter doc has the URL property
which represents the endpoint

00:32:20.480 --> 00:32:22.080
that you're interacting with.

00:32:22.080 --> 00:32:23.860
We have the request method.

00:32:23.860 --> 00:32:27.830
So Twitter APIs support get, post,
and some of them support delete.

00:32:27.830 --> 00:32:29.290
We support all of those.

00:32:29.290 --> 00:32:32.550
And you just tell us which one you want,
you want us to use.

00:32:32.580 --> 00:32:36.060
And then each doc,
each one of them has a request method.

00:32:36.060 --> 00:32:36.060
And so you can just tell us
which one you want us to use.

00:32:36.940 --> 00:32:37.380
All right.

00:32:37.400 --> 00:32:39.800
So Twitter APIs support get, post,
and some of them support delete.

00:32:39.950 --> 00:32:40.710
We support all of those.

00:32:40.770 --> 00:32:42.820
And you just tell us which one you want,
you want us to use.

00:32:42.820 --> 00:32:44.810
And then each,
the documentation for each API spells out

00:32:44.810 --> 00:32:47.480
whether the request that you're making
is an authenticated request or not.

00:32:47.480 --> 00:32:49.360
And so that just corresponds
to the account property.

00:32:49.440 --> 00:32:52.290
So if it's an authenticated request, hey,
just pop in one of the accounts and we'll

00:32:52.290 --> 00:32:54.280
use that account to sign the request.

00:32:54.520 --> 00:32:58.440
And then each piece of documentation
also spells out some parameters.

00:32:58.440 --> 00:33:01.600
So, you know,
if you want to limit the request in

00:33:01.610 --> 00:33:06.260
some way by providing some parameters,
we take care of that in the form of a

00:33:06.260 --> 00:33:11.100
dictionary that you just provide to us,
and we assemble the request for you.

00:33:11.200 --> 00:33:12.100
Okay.

00:33:12.100 --> 00:33:14.900
So let's take a quick look at
how you would code this up.

00:33:14.980 --> 00:33:19.540
And it's, again, you know, really simple.

00:33:19.750 --> 00:33:21.890
Well, before we do that,
I want to point out

00:33:21.990 --> 00:33:25.740
that there are two ways,
once you have your TWRequest object,

00:33:25.740 --> 00:33:30.250
to perform a request,
and the first way you do this is we

00:33:30.250 --> 00:33:36.080
have a convenience method right on the
object called PerformRequestWithHandler.

00:33:36.090 --> 00:33:40.510
Now this will take care of actually
doing all the communication with

00:33:40.640 --> 00:33:44.830
Twitter and delivering the data back
to you in a single Atomic request.

00:33:44.840 --> 00:33:45.840
Okay.

00:33:45.840 --> 00:33:46.810
So what do I mean by that?

00:33:46.880 --> 00:33:50.840
It's kind of a weird word here,
but it's--all I mean is that we

00:33:51.060 --> 00:33:56.080
will go and perform the request
and return the data all at once.

00:33:56.190 --> 00:33:57.050
Okay.

00:33:57.140 --> 00:34:00.940
It's asynchronous,
but it happens all at once and you get

00:34:00.940 --> 00:34:04.500
delivered the result at the end of it.

00:34:04.500 --> 00:34:08.880
The other way to do it is by
asking for a signed NSURL request.

00:34:08.880 --> 00:34:12.060
Now, you know,
many of you have mature Twitter clients,

00:34:12.180 --> 00:34:16.820
you've got applications that
are using the Twitter API.

00:34:16.820 --> 00:34:23.120
You've got this whole NSURL connection
stack that handles errors,

00:34:23.120 --> 00:34:28.580
it handles streaming data and partial
downloads and things like that.

00:34:28.580 --> 00:34:30.880
Well,
how do you plug our stuff into that?

00:34:30.920 --> 00:34:33.840
So we thought of that and we figured
the best way to do it was to give

00:34:33.840 --> 00:34:37.100
you something that you can just
plug right into that infrastructure.

00:34:37.100 --> 00:34:44.380
So you can call and--on the TWRequest
object and ask for a signed URL.

00:34:44.380 --> 00:34:45.880
We take care of the signing.

00:34:45.880 --> 00:34:46.800
You dump it into your--.

00:34:46.820 --> 00:34:50.700
infrastructure, it does the requesting,
and it's all taken care of for you.

00:34:53.410 --> 00:34:59.680
So, now I mentioned that, you know,
we wanted to get rid of the OAuth stuff,

00:34:59.800 --> 00:35:03.340
and we did that in terms of
the way that you guys view it,

00:35:03.400 --> 00:35:04.860
but it's still there, right?

00:35:04.860 --> 00:35:05.760
It's still under the covers.

00:35:05.760 --> 00:35:07.640
OAuth serves a really important function.

00:35:07.640 --> 00:35:11.120
It authenticates your application
and your user to Twitter.

00:35:11.120 --> 00:35:13.030
So we still need to deal with it.

00:35:13.210 --> 00:35:16.400
So I figured I would show you
exactly what's really going

00:35:16.400 --> 00:35:18.120
on under the covers here.

00:35:18.340 --> 00:35:23.820
So you've got your Twitter client,
and it implements the Twitter framework,

00:35:23.820 --> 00:35:26.920
and you now want to make a request,
and so you make up one of

00:35:26.920 --> 00:35:29.610
these TWRequest objects,
and that's represented by

00:35:29.610 --> 00:35:31.060
the little Twitter bird.

00:35:31.060 --> 00:35:34.470
And now you go and you call
perform request with handler,

00:35:34.550 --> 00:35:36.940
or you ask for a signed NSURL request.

00:35:36.940 --> 00:35:38.390
What happens next?

00:35:38.510 --> 00:35:41.290
Well,
what we do is we ship that request over

00:35:41.290 --> 00:35:44.880
the wire to the accounts D process,
which has access to

00:35:44.880 --> 00:35:46.620
the user's credentials.

00:35:47.380 --> 00:35:50.200
And we take care of
doing the OAuth signing.

00:35:50.320 --> 00:35:54.930
So, you know, we set up the base URL,
we order the parameters correctly,

00:35:54.930 --> 00:35:59.780
we take care of doing all the SHA-1
stuff and setting up the NSURL request.

00:35:59.780 --> 00:36:02.570
And once that's done,
then we ship it back over

00:36:02.690 --> 00:36:05.770
the wire to your process,
and then it's up to your

00:36:05.770 --> 00:36:09.310
process to actually make the
request to Twitter either by

00:36:09.390 --> 00:36:13.530
using the request with handler,
perform request with handler,

00:36:13.530 --> 00:36:16.420
or by using the request with handler.

00:36:16.420 --> 00:36:19.370
So, you know,
perform request with handler

00:36:19.370 --> 00:36:23.630
or dispatching your signed
NSURL request in your network stack,

00:36:23.630 --> 00:36:24.360
right?

00:36:24.490 --> 00:36:27.890
So one thing I want to point out here is,
you know, I've seen a little bit of

00:36:27.890 --> 00:36:30.080
chatter about people wondering,
you know,

00:36:30.110 --> 00:36:32.180
how is my app going to be identified?

00:36:32.180 --> 00:36:34.200
Is everything going to
show up as from iOS?

00:36:34.200 --> 00:36:39.190
So as part of this signing process,
we actually embed enough information

00:36:39.590 --> 00:36:44.660
about your process that Twitter can
identify your application correctly

00:36:44.660 --> 00:36:46.390
and attribute tweets that come in.

00:36:46.420 --> 00:36:48.560
So you can see that the message that's
coming from you on the Twitter website.

00:36:48.630 --> 00:36:51.690
So you won't lose that identification,
right?

00:36:51.860 --> 00:36:55.410
So once it's been shipped back
over to the Twitter framework,

00:36:55.650 --> 00:36:59.770
then your client app sends it over to
Twitter and they process the request

00:36:59.770 --> 00:37:01.930
and return the result back to you.

00:37:02.610 --> 00:37:05.400
OK, so we talked about the
structure of this stuff.

00:37:05.500 --> 00:37:09.700
Let's look at a little bit of
code to see how you do this.

00:37:10.990 --> 00:37:14.860
So the first thing we need to do is pick
the endpoint that we're going to use.

00:37:14.930 --> 00:37:18.800
And so in my example,
what I'm going to do is write some code

00:37:18.860 --> 00:37:21.640
to download the user's home timeline.

00:37:21.690 --> 00:37:24.010
Now if you're familiar
with the Twitter API,

00:37:24.010 --> 00:37:27.370
you know that each of these
endpoints basically can be suffixed

00:37:27.380 --> 00:37:30.700
with the kind of data that you're
looking for in your response,

00:37:30.700 --> 00:37:31.290
right?

00:37:31.370 --> 00:37:37.700
So in this case, we're suffixing the
URL with the .JSON suffix,

00:37:37.870 --> 00:37:42.340
and that means we're basically
expecting JSON data back.

00:37:42.540 --> 00:37:47.300
So once we've done that,
then we create our parameters dictionary,

00:37:47.320 --> 00:37:50.710
and that's just a
matter of--in this case,

00:37:50.710 --> 00:37:55.250
we want to limit the number of
tweets that come back on the home

00:37:55.250 --> 00:37:59.780
timeline to 10 instead of like
the default 200 or whatever it is,

00:37:59.960 --> 00:38:00.410
right?

00:38:00.420 --> 00:38:03.430
So we create a dictionary,
and if you look in the Twitter docs,

00:38:03.430 --> 00:38:06.140
that's just using the count parameter.

00:38:06.140 --> 00:38:09.500
Set the value to 10, the key to count.

00:38:09.500 --> 00:38:12.500
And now we go and create
our TWRequest object.

00:38:12.500 --> 00:38:15.530
And so it's got one initializer
that takes three values.

00:38:15.760 --> 00:38:18.230
The first is the URL that you created.

00:38:18.440 --> 00:38:22.670
The next is the dictionary of
parameters to narrow down your request.

00:38:22.740 --> 00:38:25.380
And then the next is the request method.

00:38:25.380 --> 00:38:27.800
And in this case,
we're just going to do a simple get.

00:38:30.110 --> 00:38:33.430
Okay, so we've done that,
we've created our TW request,

00:38:33.520 --> 00:38:34.170
now what's next?

00:38:34.200 --> 00:38:36.900
Well, in this case,
we just want to use the convenience

00:38:36.960 --> 00:38:39.070
perform request with handler method.

00:38:39.080 --> 00:38:41.520
And so we're going to do that.

00:38:41.520 --> 00:38:49.210
And it returns in its block handler the
response data and the NSHTTP URL response

00:38:49.280 --> 00:38:51.390
and any errors that might come back.

00:38:51.600 --> 00:38:53.400
Now,
if you're familiar with NSURL connection,

00:38:53.420 --> 00:38:54.640
this might look familiar.

00:38:54.640 --> 00:38:57.180
This is the same stuff that comes back
if you send a synchronous request,

00:38:57.190 --> 00:38:57.580
right?

00:38:57.580 --> 00:38:59.610
But again, it's not synchronous.

00:39:00.000 --> 00:39:00.540
It's atomic.

00:39:00.540 --> 00:39:06.700
And it'll come back and
give you the response data.

00:39:06.700 --> 00:39:12.000
So let's take a look at how we handle
this in our completion handler.

00:39:12.000 --> 00:39:13.190
All right.

00:39:14.300 --> 00:39:19.460
So I mentioned before that we suffixed
our URL with the .json suffix,

00:39:19.510 --> 00:39:22.160
which means we're
expecting JSON information.

00:39:22.190 --> 00:39:28.020
And there's this great new class in
iOS 5 called NSJSON Serialization,

00:39:28.050 --> 00:39:31.540
which will take in JSON raw
data and give you a foundation

00:39:31.540 --> 00:39:33.140
object on the other side.

00:39:33.170 --> 00:39:35.160
And so that's what we're using.

00:39:35.230 --> 00:39:39.680
And basically,
what we get is an array of tweets back.

00:39:40.030 --> 00:39:44.250
Now, you know, for the sake of space,
I'm not really acting on errors here,

00:39:44.360 --> 00:39:46.840
but I just want to
reiterate and encourage you,

00:39:46.980 --> 00:39:48.010
handle your errors.

00:39:48.010 --> 00:39:52.520
Make sure you're checking your--that
NSError and the JSON error there

00:39:52.520 --> 00:39:55.420
and responding appropriately.

00:39:55.570 --> 00:39:58.520
And we're just going to assume
that we have some kind of method

00:39:58.520 --> 00:40:01.320
that's updating our timeline.

00:40:01.320 --> 00:40:07.540
So we call that update timeline,
pass in that array of tweets into it.

00:40:07.540 --> 00:40:08.800
And again,
completion has to be done in the same

00:40:08.800 --> 00:40:10.260
way that we did in the previous version.

00:40:10.260 --> 00:40:10.260
So we're going to call
that update timeline,

00:40:10.260 --> 00:40:10.260
pass in that array of tweets into it.

00:40:10.260 --> 00:40:10.260
And again,
completion has to be done in the same

00:40:10.260 --> 00:40:10.260
way that we did in the previous version.

00:40:10.260 --> 00:40:10.260
And again,
completion has to be done in the same

00:40:10.260 --> 00:40:10.260
way that we did in the previous version.

00:40:10.260 --> 00:40:10.260
And again,
completion has to be done in the

00:40:10.260 --> 00:40:12.120
same way that we did in the previous
Deficient handlers are not guaranteed

00:40:12.120 --> 00:40:14.400
to be returned on the main thread,
so to be sure,

00:40:14.400 --> 00:40:18.070
we're going to dispatch async
onto our main queue and call

00:40:18.070 --> 00:40:19.880
the code that updates our UI.

00:40:20.150 --> 00:40:22.360
And that's really as simple as it is.

00:40:22.360 --> 00:40:23.400
All right.

00:40:23.400 --> 00:40:25.330
So a quick word about multipart data.

00:40:25.330 --> 00:40:28.640
How do you upload multipart data
if you want to update a profile

00:40:28.920 --> 00:40:30.380
image or something like that?

00:40:30.520 --> 00:40:33.140
So I've got a little example
in code of how to do that.

00:40:33.320 --> 00:40:35.650
And in this case,
we're going to use the update

00:40:35.760 --> 00:40:39.020
profile image endpoint,
again, with the JSON suffix,

00:40:39.360 --> 00:40:42.500
create our TWRequest object,
pass in the URL.

00:40:42.520 --> 00:40:44.720
We don't have any parameters this time.

00:40:44.720 --> 00:40:48.360
And then call this great method
called add multipart data.

00:40:48.520 --> 00:40:51.040
And in this case, it's a JPEG image.

00:40:51.040 --> 00:40:53.200
Now, I'm assuming that, you know,
in this code,

00:40:53.200 --> 00:40:56.420
you use the image picker or something
and you get a UI image back.

00:40:56.550 --> 00:41:02.100
So we're just going to use the UI image
JPEG representation convenience method to

00:41:02.100 --> 00:41:05.770
convert that to an NSData in JPEG format.

00:41:05.790 --> 00:41:06.360
And then Twitter expects images
that are in the JPEG format

00:41:06.420 --> 00:41:06.690
to be in the JPEG format.

00:41:06.780 --> 00:41:07.600
So we're going to use the UI image
JPEG representation convenience method to

00:41:07.600 --> 00:41:07.900
convert that to an NSData in JPEG format.

00:41:07.920 --> 00:41:08.280
And then Twitter expects images
that are in the JPEG format.

00:41:08.280 --> 00:41:08.280
And then Twitter expects images
that are in the JPEG format.

00:41:08.280 --> 00:41:08.720
And then Twitter expects images
that are in the JPEG format.

00:41:08.720 --> 00:41:10.520
And then Twitter expects images
that are uploaded to be--that

00:41:10.520 --> 00:41:13.530
part of the form is called media,
so that's the name that

00:41:13.550 --> 00:41:15.380
we're going to assign to it.

00:41:15.390 --> 00:41:18.710
And then, of course, we have to set the
MIME type to be image/JPEG.

00:41:18.800 --> 00:41:24.640
And that's as simple as it is to upload
multipart form data in your TWRequest.

00:41:24.650 --> 00:41:27.580
Again, call perform request with
handler and deal with the

00:41:27.590 --> 00:41:29.420
results that come back from that.

00:41:29.420 --> 00:41:32.910
Okay, one more time,
I'm going to bring Scott up to give you

00:41:32.910 --> 00:41:35.590
a demo of how to use all these APIs.

00:41:35.590 --> 00:41:38.180
We've covered a bunch of them.

00:41:38.180 --> 00:41:38.890
And he's going to do that.

00:41:38.890 --> 00:41:39.900
I think you're really going to like it.

00:41:39.920 --> 00:41:44.910
Let's give him a hand.

00:41:46.890 --> 00:41:47.800
Thanks.

00:41:47.800 --> 00:41:50.310
So, actually,
if you would allow us just a

00:41:50.330 --> 00:41:52.070
moment to be a little bit serious.

00:41:52.080 --> 00:41:54.980
There's an issue that's
very close to Glen and I,

00:41:54.980 --> 00:41:59.730
and that is the current
plight of monkeys.

00:41:59.750 --> 00:42:02.480
I think you can agree that they
all face a lot of problems,

00:42:02.480 --> 00:42:04.780
not the least of which is
issues like shrinking habitat.

00:42:04.780 --> 00:42:05.780
Right?

00:42:05.780 --> 00:42:06.780
That's a real problem.

00:42:06.780 --> 00:42:09.230
They often are evicted from their homes,
end up in zoos,

00:42:09.230 --> 00:42:12.550
where oftentimes they then
become addicted to cigarettes,

00:42:12.730 --> 00:42:14.280
tobacco products.

00:42:14.280 --> 00:42:19.560
The larger problem than that is
there's really no good Twitter client

00:42:19.560 --> 00:42:22.380
that is dedicated just to monkeys.

00:42:22.380 --> 00:42:24.700
So we're going to try and
address that today with a

00:42:24.800 --> 00:42:26.370
little app we call MonkeyGram.

00:42:35.700 --> 00:42:38.670
So make sure I've done everything right.

00:42:38.680 --> 00:42:44.560
So this is our Monkeygram application.

00:42:44.560 --> 00:42:45.480
It's very simple.

00:42:45.480 --> 00:42:49.360
It's just designed to present some
wheels for a monkey to be able to

00:42:49.360 --> 00:42:51.340
roll around with and build a tweet.

00:42:51.520 --> 00:42:53.670
When it launches,
the first thing it does is using

00:42:53.670 --> 00:42:55.700
the API that Glen has discussed.

00:42:55.700 --> 00:42:59.500
It goes and tries to
get a Twitter account,

00:42:59.500 --> 00:43:04.240
because Monkeygram without a
Twitter account isn't super interesting.

00:43:04.240 --> 00:43:05.920
So we're going to say yes.

00:43:05.920 --> 00:43:07.260
Let's allow it.

00:43:07.310 --> 00:43:12.260
So by rolling these wheels here,
we're affecting the mention, right?

00:43:12.260 --> 00:43:16.620
And rolling these guys here
affects the tweet body itself.

00:43:16.620 --> 00:43:22.890
And then down here, over to the right,
is the hashtag.

00:43:23.650 --> 00:43:26.700
Bieber isn't big into economics,
so I trust him.

00:43:26.750 --> 00:43:28.620
So we're going to say tweet.

00:43:28.620 --> 00:43:33.270
And what this is going to do is
use that API that Glen discussed

00:43:33.480 --> 00:43:34.740
to actually send the tweet.

00:43:34.760 --> 00:43:38.380
So let's take a look at some of
the code that we wrote for that.

00:43:40.920 --> 00:43:44.680
So as Glenn mentioned at first,
we get our account store.

00:43:44.680 --> 00:43:46.300
We get our Twitter account type.

00:43:46.320 --> 00:43:50.970
And then we set about trying to
find an appropriate Twitter account.

00:43:50.980 --> 00:43:53.450
Now, I'm only-- this is just a demo.

00:43:53.530 --> 00:43:56.880
So I'm only going after the very
first Twitter account that I find.

00:43:56.880 --> 00:43:59.900
One thing to keep in mind is
we support multiple accounts,

00:43:59.900 --> 00:44:00.410
right?

00:44:00.610 --> 00:44:05.000
So it's kind of important when you
write an app to keep that in mind.

00:44:05.060 --> 00:44:07.580
Don't just go and use
the first one you find.

00:44:07.610 --> 00:44:09.800
Do as I say, not as I do.

00:44:09.800 --> 00:44:14.100
As Glenn also mentioned,
based on whether or not you're

00:44:14.100 --> 00:44:16.870
going to use any UI or anything,
you really need to keep track of

00:44:16.970 --> 00:44:18.240
sort of which queue you're on.

00:44:18.240 --> 00:44:21.460
So we don't exactly know
what queue this is coming on,

00:44:21.510 --> 00:44:23.440
what we're going to get this account on.

00:44:23.520 --> 00:44:28.790
So I've wrapped this code in this sort
of async call with a block so that

00:44:28.800 --> 00:44:30.360
it all executes on the main queue.

00:44:30.360 --> 00:44:32.470
And I do that because down here,
depending on whether or not

00:44:32.480 --> 00:44:35.180
we found an account or not,
we're going to go ahead and enable or

00:44:35.180 --> 00:44:37.820
disable that little button at the bottom.

00:44:38.840 --> 00:44:42.200
So here's sort of the meat
of sending a text-only tweet.

00:44:42.200 --> 00:44:44.320
It looks very similar to the
stuff that Glen showed you,

00:44:44.320 --> 00:44:46.700
the differences being that we're
hitting a different endpoint,

00:44:46.770 --> 00:44:48.730
so we're hitting Update.

00:44:48.780 --> 00:44:52.020
And the keys that we're
using are slightly different.

00:44:52.020 --> 00:44:52.650
It's very simple.

00:44:52.720 --> 00:44:54.920
It's just status,
and then you put the text in there,

00:44:54.920 --> 00:44:56.680
and you're good to go.

00:44:56.810 --> 00:44:59.220
So we would assign these parameters.

00:44:59.290 --> 00:45:00.940
These parameters are
called query parameters.

00:45:00.940 --> 00:45:02.680
They go in as part of the query.

00:45:02.790 --> 00:45:07.140
They're different than
the multi-part parameters,

00:45:07.140 --> 00:45:09.620
which we'll show you just in a second.

00:45:09.820 --> 00:45:14.340
So when the tweet goes out,
it comes back.

00:45:14.340 --> 00:45:16.940
And as you'll see,
I'm not really checking in your errors.

00:45:16.940 --> 00:45:19.030
It just plays a monkey sound,
which you didn't hear,

00:45:19.100 --> 00:45:21.840
which is a damn shame,
because I made that sound myself.

00:45:21.840 --> 00:45:23.100
And I'd love to have you here.

00:45:23.200 --> 00:45:29.410
So that's what would happen
once the request comes back.

00:45:29.590 --> 00:45:31.550
And here, down below,
you'll see I'm just using

00:45:31.550 --> 00:45:34.500
the very simple fire,
let it go off,

00:45:34.500 --> 00:45:37.010
and figure out what happened,
and then come back and tell

00:45:37.010 --> 00:45:39.280
me about it request method.

00:45:39.320 --> 00:45:41.580
So that's how we send simple text tweets.

00:45:41.580 --> 00:45:45.150
Now,
if we want to do something a little more

00:45:45.200 --> 00:46:10.800
[Transcript missing]

00:46:11.310 --> 00:46:14.240
So this endpoint is authenticated, right?

00:46:14.260 --> 00:46:15.700
We are doing this to your account.

00:46:15.700 --> 00:46:19.060
So this is where we make sure
to prime this request with the

00:46:19.070 --> 00:46:20.440
account that we got earlier.

00:46:20.440 --> 00:46:23.060
I have a little method called image data,
which goes off and makes

00:46:23.070 --> 00:46:24.810
a cute little image,
which I'll show you.

00:46:24.830 --> 00:46:27.150
And we add that as a part.

00:46:27.180 --> 00:46:31.940
And we go ahead and tag
it with the tag media,

00:46:31.950 --> 00:46:35.450
and set the type to image JPEG.

00:46:35.630 --> 00:46:39.060
And so here you can see sort of where
the status text actually comes into play.

00:46:39.060 --> 00:46:40.840
Instead of putting it
as a query parameter,

00:46:40.860 --> 00:46:44.110
comes in as just a named
multi-part data thing.

00:46:44.270 --> 00:46:47.030
And again,
like we discussed a little bit earlier,

00:46:47.030 --> 00:46:50.230
I wanted to show you,
if you wanted to fit this into an

00:46:50.230 --> 00:46:54.200
existing NSURL connection workflow,
what would that look like?

00:46:54.330 --> 00:46:58.560
And so what we're doing is using
this tweet request that we've made,

00:46:58.590 --> 00:46:59.850
we're getting a signed URL request.

00:46:59.870 --> 00:47:02.620
And as Glen mentioned,
that goes off and does all the

00:47:02.620 --> 00:47:07.490
OAuth hoo-ha and comes back
with this special NSURL request.

00:47:07.570 --> 00:47:12.180
And we can take that and put it
into an NSURL connection that we all

00:47:12.360 --> 00:47:15.010
know and love and tell it to start.

00:47:15.140 --> 00:47:17.480
So I'm not paying attention to
too many of the delegate messages,

00:47:17.480 --> 00:47:20.340
but I do want to show a little progress
this time when we send a tweet,

00:47:20.390 --> 00:47:23.520
because we're pushing up this image
and it could take a little bit.

00:47:23.710 --> 00:47:27.220
And so all I've done is just,
I'm overriding, I'm listening to one

00:47:27.220 --> 00:47:31.650
of NSURL's connection,
NSURL connection's delegate messages

00:47:31.750 --> 00:47:33.300
connection did send body data.

00:47:33.360 --> 00:47:37.350
And I grab the progress and
we'll do something cute with it.

00:47:37.460 --> 00:47:37.880
So that's that.

00:47:37.970 --> 00:47:41.360
So let's take a look at what we did.

00:47:41.380 --> 00:47:43.520
We'll stop that one.

00:47:46.460 --> 00:47:48.730
So, let's send another tweet.

00:47:48.800 --> 00:47:54.170
Can't let Bieber have all the fun.

00:47:54.190 --> 00:47:55.830
There we go.

00:47:57.020 --> 00:47:59.300
So we'll send that guy.

00:47:59.340 --> 00:48:01.970
And now we'll actually see
a little bit of progress.

00:48:02.110 --> 00:48:03.780
Network's good here.

00:48:04.010 --> 00:48:08.410
And it would have made a monkey noise,
I promise.

00:48:09.380 --> 00:48:11.000
So let's go take a look and
see what we actually sent.

00:48:11.170 --> 00:48:14.180
So I'm going to come
over here to Twitter.

00:48:14.210 --> 00:48:19.600
And here was the message that we sent.

00:48:23.060 --> 00:48:26.680
So you can see there's the tweet,
the text part, and then we made this cute

00:48:26.950 --> 00:48:29.770
little image to go along with it.

00:48:29.880 --> 00:48:31.740
So it's very straightforward.

00:48:31.950 --> 00:48:34.890
It takes a lot of the hard work,
the grunge work,

00:48:34.990 --> 00:48:38.190
of doing all this OAuth stuff,
and it lets you guys go do the stuff

00:48:38.410 --> 00:48:42.000
that you presumably want to do,
which is make cool,

00:48:42.000 --> 00:48:45.110
entertaining applications and
not so much signing OAuth.

00:48:45.400 --> 00:48:46.860
So that's how that works.

00:48:47.110 --> 00:48:48.790
Thanks a lot.

00:48:55.840 --> 00:48:57.140
Thanks, Scott.

00:48:57.490 --> 00:48:58.180
Wasn't that awesome.

00:48:58.240 --> 00:49:02.560
I don't think we can
put it on the App Store,

00:49:02.730 --> 00:49:05.160
but we've been playing
a lot with it at work,

00:49:05.160 --> 00:49:06.730
and it's pretty cool.

00:49:06.890 --> 00:49:11.110
So just a couple tips and tricks
with using the TW request and

00:49:11.110 --> 00:49:14.200
the Twitter API in general.

00:49:14.240 --> 00:49:16.410
One of the important
things is to remember,

00:49:16.550 --> 00:49:18.310
follow the Twitter rules of the road.

00:49:18.390 --> 00:49:19.330
They've got this document.

00:49:19.340 --> 00:49:23.080
And follow the Twitter guidelines
as appropriate.

00:49:23.080 --> 00:49:26.260
Don't do things like send
tweets on behalf of the user

00:49:26.260 --> 00:49:30.180
without giving them any visual
indication that you're doing so.

00:49:30.180 --> 00:49:33.100
Those are all the kind of policies
that are outlined in the documents.

00:49:33.120 --> 00:49:37.460
And then again, I just want to point out,
make sure you call those

00:49:37.610 --> 00:49:40.740
completion handlers,
or any calls that you make

00:49:40.740 --> 00:49:43.540
from your completion handlers
that have to do with UI,

00:49:43.650 --> 00:49:46.900
dispatch those on the main thread
to make sure things operate

00:49:46.900 --> 00:49:48.780
as UI Kit expects them to.

00:49:49.000 --> 00:49:50.390
So that is Twitter integration.

00:49:50.530 --> 00:49:57.100
It allows really simple-- it gives you
a really simple interface to access

00:49:57.100 --> 00:50:03.330
the full range of Twitter's API and
do really powerful Twitter clients and

00:50:03.410 --> 00:50:05.580
applications in a really simple way.

00:50:05.710 --> 00:50:09.610
So if you want more information,
contact Bill Dudney, he's our application

00:50:09.730 --> 00:50:11.020
framework evangelist.

00:50:11.040 --> 00:50:17.910
Check out the Twitter documents on
our frameworks at developer.apple.com,

00:50:17.910 --> 00:50:20.150
and of course, the Twitter API.

00:50:20.550 --> 00:50:22.400
And a couple related sessions.

00:50:22.400 --> 00:50:24.500
We talked a lot about
block-based APIs here,

00:50:24.500 --> 00:50:27.950
so make sure you brush up on
that and check out the blocks and

00:50:28.010 --> 00:50:30.480
Grand Central dispatch and practice talk.

00:50:30.610 --> 00:50:34.140
That already happened, but there's always
iTunes or ADC on iTunes.

00:50:34.140 --> 00:50:37.440
And again, you know,
we're dealing with networks here,

00:50:37.440 --> 00:50:41.030
so the CoreOS networking key
principles talk is probably a good

00:50:41.030 --> 00:50:42.980
one to take a look at as well.

00:50:43.120 --> 00:50:45.470
Just in summary,
we covered the tweet sheet,

00:50:45.580 --> 00:50:48.760
pain-free Twitter integration,
accessing system accounts,

00:50:48.760 --> 00:50:53.860
and using the TW request APIs to use the
full range of Twitter application APIs.

00:50:53.860 --> 00:50:57.010
So, you know,
my send-off to you is go and make some

00:50:57.190 --> 00:50:59.620
really cool apps and use these APIs.

00:50:59.620 --> 00:51:02.380
And thanks for coming,
and thanks for listening.