WEBVTT

00:00:08.900 --> 00:03:51.100
[Transcript missing]

00:03:51.280 --> 00:03:53.510
So first thing we're going to
cover is what does it take to

00:03:53.510 --> 00:03:55.470
get your app into Newsstand?

00:03:55.560 --> 00:03:58.410
This will include info PLS keys
you're going to need to adopt,

00:03:58.410 --> 00:04:01.690
as well as all of the new icon
variants available to you,

00:04:01.690 --> 00:04:03.480
and where they're used.

00:04:03.560 --> 00:04:06.050
And then we're going to talk about
how do we go through the process of

00:04:06.050 --> 00:04:10.270
getting content from your servers
down into your app on a user's device?

00:04:10.360 --> 00:04:13.200
And then once it's there,
how do you let the user know that new

00:04:13.200 --> 00:04:15.530
content is ready for them to view?

00:04:15.610 --> 00:04:17.580
And with that,
I'd like to invite my colleague

00:04:17.580 --> 00:04:20.900
Jon up here to tell us what we need
to know about appearing in newsstand.

00:04:20.900 --> 00:04:22.540
Here you go, John.

00:04:28.470 --> 00:04:28.870
Thanks, Ben.

00:04:29.050 --> 00:04:29.910
Hi, everybody.

00:04:30.150 --> 00:04:33.240
I'm going to tell you today how to
make your app appear in Newsstand.

00:04:33.340 --> 00:04:34.740
And there are two pieces to this.

00:04:35.020 --> 00:04:37.300
The first is how to make
your app a Newsstand app,

00:04:37.370 --> 00:04:40.460
and the second is how to
define your Newsstand icon.

00:04:40.540 --> 00:04:43.600
Well, first things first,
how do you become a Newsstand app?

00:04:43.670 --> 00:04:44.910
Well, it's rather straightforward.

00:04:44.960 --> 00:04:47.460
You have to add one
key to your Info.plist.

00:04:47.540 --> 00:04:49.920
That key, UINewsstandApp.

00:04:50.230 --> 00:04:53.000
It's a Boolean, set it to true,
and congratulations.

00:04:53.060 --> 00:04:55.260
You're now a Newsstand app.

00:04:55.350 --> 00:04:57.820
But we're not quite done yet.

00:04:58.060 --> 00:05:00.220
Because you need an icon.

00:05:00.250 --> 00:05:03.340
Now,
you are probably all familiar with this,

00:05:03.430 --> 00:05:05.560
but there is one icon style in iOS today.

00:05:05.560 --> 00:05:07.850
And it looks a lot like this.

00:05:08.410 --> 00:05:09.630
iOS 4, that is.

00:05:09.660 --> 00:05:13.990
Now, you see it on the home screen,
but you also see it in search,

00:05:13.990 --> 00:05:16.640
you see it in settings,
you see it in the app switcher,

00:05:16.640 --> 00:05:18.600
and you even see it in the
new notification center.

00:05:18.600 --> 00:05:22.780
Well, as Ben just showed us,
publications in an actual Newsstand

00:05:22.860 --> 00:05:25.030
don't quite have the same look.

00:05:25.060 --> 00:05:27.920
They're colorful, they're exciting,
they grab your users,

00:05:27.990 --> 00:05:30.160
your readers in this case,
and pull them in.

00:05:30.200 --> 00:05:32.920
I mean, look at this guy,
he's standing up on the edge of a cliff.

00:05:32.920 --> 00:05:36.370
I want to pick that magazine up and
look inside and see what it's all about.

00:05:36.400 --> 00:05:39.410
And we want to bring that
same experience to Newsstand.

00:05:39.440 --> 00:05:41.520
So let's talk about Newsstand icons.

00:05:41.520 --> 00:05:45.630
For one, they've got a distinct look
from standard app icons.

00:05:45.660 --> 00:05:49.290
They appear in Newsstand, that is,
on the home screen,

00:05:49.290 --> 00:05:51.030
and in the app switcher.

00:05:52.380 --> 00:05:54.770
We want these icons to
reflect your content.

00:05:55.030 --> 00:05:57.920
When a user takes a look at
your app without even opening,

00:05:58.000 --> 00:06:01.280
we want them to be able
to see what's inside.

00:06:01.420 --> 00:06:02.720
Furthermore, they're dynamic.

00:06:02.880 --> 00:06:06.640
You can update them after
your app is installed.

00:06:06.820 --> 00:06:08.860
On top of that,
we give them some additional

00:06:08.860 --> 00:06:13.800
adornment to make them look like
real magazines and real newspapers.

00:06:14.560 --> 00:06:16.440
So, standard icons.

00:06:16.500 --> 00:06:19.080
Well, we still need them.

00:06:19.150 --> 00:06:21.170
As I mentioned,
we use them throughout iOS

00:06:21.200 --> 00:06:23.780
in a series of other places,
not just in the home screen,

00:06:23.780 --> 00:06:25.480
but in settings, search, notifications.

00:06:25.480 --> 00:06:27.940
So that means we need to
define a Newsstand icon in

00:06:28.130 --> 00:06:29.880
addition to the standard icon.

00:06:30.880 --> 00:06:32.960
Now, how do we do standard icons today?

00:06:32.960 --> 00:06:35.360
You've probably all
done this once or twice.

00:06:35.360 --> 00:06:38.720
You add your list of icons to
your Info.plist in an array

00:06:38.720 --> 00:06:40.450
called CFBundleIconFiles.

00:06:40.450 --> 00:06:43.960
You give us a list of images,
that's your standard icon.

00:06:44.200 --> 00:06:46.280
Well,
this doesn't work for Newsstand icons,

00:06:46.380 --> 00:06:48.700
because if you added
more things to that list,

00:06:48.700 --> 00:06:51.280
we wouldn't have any idea
what's the Newsstand icon

00:06:51.280 --> 00:06:52.950
and what's the standard icon.

00:06:53.080 --> 00:06:56.950
So we need a new way to
specify your Newsstand icon.

00:06:57.070 --> 00:07:01.590
What we've added is a new
InfoPillars key called CFBundleIcons.

00:07:01.910 --> 00:07:03.880
Now, this is not specific to Newsstand.

00:07:03.950 --> 00:07:05.500
Any app in iOS 5 can use it.

00:07:05.770 --> 00:07:08.320
And what it is is a
dictionary of icon styles.

00:07:08.450 --> 00:07:10.640
So in iOS 5, we defined two styles.

00:07:10.740 --> 00:07:15.150
The first is your standard icon,
which we've called CFBundlePrimaryIcon.

00:07:15.340 --> 00:07:18.690
The second, as you may have guessed,
is your Newsstand icon,

00:07:18.690 --> 00:07:20.860
which is called UINewsStandIcon.

00:07:20.990 --> 00:07:23.580
So let me show you how you
would go and take this,

00:07:23.620 --> 00:07:25.780
and make your app have a Newsstand icon.

00:07:25.880 --> 00:07:28.350
First step, add your new P-List key.

00:07:28.590 --> 00:07:30.780
CFBundleIcons, it's a dictionary.

00:07:30.780 --> 00:07:32.240
We'll start with the standard icon.

00:07:32.240 --> 00:07:35.480
So we'll insert another dictionary,
CFBundlePrimaryIcon.

00:07:35.540 --> 00:07:38.010
Within that dictionary,
you can literally copy-paste

00:07:38.050 --> 00:07:40.220
your existing array of images.

00:07:40.280 --> 00:07:43.770
And now you have a fully
defined standard icon style.

00:07:43.910 --> 00:07:48.240
So what does it take to then
add the Newsstand icon style?

00:07:48.310 --> 00:07:52.720
Well, what you would do is you'd insert a
new style key called UINewsStandIcon.

00:07:52.980 --> 00:07:56.460
And within that style key,
you'd again insert an array of images,

00:07:56.460 --> 00:07:59.220
and that would specify
your Newsstand icon.

00:07:59.220 --> 00:08:01.980
But you're not done yet,
because you can customize

00:08:01.980 --> 00:08:04.130
your Newsstand icon.

00:08:04.400 --> 00:08:06.640
As I mentioned before,
icons are adorned to resemble

00:08:06.640 --> 00:08:07.800
their physical counterparts.

00:08:08.010 --> 00:08:10.620
So when you're doing this,
you have to decide, are you a newspaper,

00:08:10.720 --> 00:08:12.000
or are you a magazine?

00:08:12.000 --> 00:08:15.020
Furthermore,
you have to define a binding edge.

00:08:15.020 --> 00:08:17.300
That is,
what is the edge of your publication

00:08:17.300 --> 00:08:19.180
that opens when the user opens it up?

00:08:19.280 --> 00:08:21.610
A typical magazine here
would open from the left,

00:08:21.610 --> 00:08:24.820
or the staples would be on the left,
so that's the binding edge.

00:08:24.820 --> 00:08:30.020
These are defined as option keys inside
the Newsstand icon style dictionary.

00:08:30.340 --> 00:08:34.420
So let me go over these
two binding types.

00:08:34.420 --> 00:08:36.820
The first is binding type magazine.

00:08:36.820 --> 00:08:39.550
If you had a publication that
looked something like this,

00:08:39.550 --> 00:08:40.720
you would be a magazine.

00:08:40.720 --> 00:08:43.250
What we do is we apply
staples to one edge,

00:08:43.260 --> 00:08:45.890
and then pages on the other edge
to give it a little bit of depth.

00:08:45.980 --> 00:08:47.970
The other style is a newspaper.

00:08:47.980 --> 00:08:51.260
If you look something like a newspaper,
you would be one.

00:08:51.260 --> 00:08:54.430
And we give you a stack effect
and a fold along the bottom edge.

00:08:54.560 --> 00:08:56.820
Now, I mentioned binding edges.

00:08:56.820 --> 00:08:58.640
There are three possible
options for this.

00:08:58.640 --> 00:08:59.750
The first.

00:09:00.340 --> 00:09:02.840
Is UI Newsstand binding edge left.

00:09:02.840 --> 00:09:05.780
In this example in the magazine,
this is an image with

00:09:05.780 --> 00:09:07.020
a left binding edge.

00:09:07.020 --> 00:09:08.080
That's where the staples go.

00:09:08.110 --> 00:09:12.720
In some other countries,
binding edges may be on the right.

00:09:12.720 --> 00:09:15.860
So if you have a publication
that is like that,

00:09:15.860 --> 00:09:18.990
this example image would have
the staples then on the right

00:09:19.140 --> 00:09:20.520
side and the pages on the left.

00:09:20.520 --> 00:09:22.730
The last binding type
is meant for newspapers,

00:09:22.730 --> 00:09:24.350
and that is binding edge bottom.

00:09:24.540 --> 00:09:29.540
That's what lets us apply the fold
along the bottom of the newspaper.

00:09:29.820 --> 00:09:33.500
How do you then take this and
apply it to your icon style?

00:09:33.640 --> 00:09:37.300
Well, we'll start with our icon style
dictionary that we just defined,

00:09:37.360 --> 00:09:39.840
and then we'll add in our binding type.

00:09:39.840 --> 00:09:43.040
In this example,
I'm using a binding type newspaper.

00:09:43.130 --> 00:09:45.810
And then I'll add the
binding edge key under there,

00:09:45.990 --> 00:09:48.330
in this example, binding edge bottom.

00:09:48.440 --> 00:09:53.570
Together, this creates an icon that
looks something like this.

00:09:54.490 --> 00:09:57.400
Now, there are a few additional
considerations to keep in mind

00:09:57.400 --> 00:09:58.860
when defining your Newsstand icon.

00:09:59.110 --> 00:10:02.620
The first and foremost is that your
icons do not need to be square.

00:10:02.830 --> 00:10:05.300
Standard icons today
expect a square image,

00:10:05.560 --> 00:10:07.700
but we want you to use a
shape that actually matches

00:10:07.700 --> 00:10:09.120
your physical appearance.

00:10:09.230 --> 00:10:14.210
So if you're a magazine,
you might be taller than you are wide,

00:10:14.210 --> 00:10:18.070
or a newspaper,
you might be wider than you are tall.

00:10:18.070 --> 00:10:18.070
Whatever it is you look at,
use those dimensions for your image.

00:10:18.740 --> 00:10:21.410
Furthermore,
you must still define your primary icon.

00:10:21.480 --> 00:10:24.470
We need both of them in iOS,
your Newsstand icon for

00:10:24.470 --> 00:10:27.040
Newsstand and App Switcher,
and your standard icon

00:10:27.040 --> 00:10:28.550
for everywhere else.

00:10:29.210 --> 00:10:32.500
The last point is that while
CIF bundle icons is required

00:10:32.500 --> 00:10:37.780
for Newsstand apps in iOS 5,
the new key will live perfectly

00:10:37.780 --> 00:10:39.300
well with the existing icon key.

00:10:39.300 --> 00:10:41.380
So if you're targeting
an earlier iOS version,

00:10:41.460 --> 00:10:42.460
you don't need to worry about that.

00:10:42.460 --> 00:10:44.770
They will coexist peacefully.

00:10:45.270 --> 00:10:47.280
And with that,
I would like to give you a demo.

00:10:47.370 --> 00:10:49.620
And what I will be doing
is taking a standard app,

00:10:49.660 --> 00:10:51.650
as we all have today,
and converting it into a

00:10:51.650 --> 00:10:53.770
Newsstand app with an icon.

00:10:55.250 --> 00:10:56.450
All right.

00:10:56.660 --> 00:10:58.940
Unfortunately,
I can't make this font size any bigger,

00:10:58.940 --> 00:11:01.020
so I'm going to zoom in a bit,
but let me know if you can't see.

00:11:01.020 --> 00:11:05.500
The first thing I'm going to do is, well,
let's run this app and see

00:11:05.500 --> 00:11:07.450
what it looks like today.

00:11:11.630 --> 00:11:13.090
As I mentioned,
this is just a standard app.

00:11:13.220 --> 00:11:15.860
I'm going to exit back
to the home screen.

00:11:15.910 --> 00:11:17.450
And there it is, NKDemo.

00:11:17.460 --> 00:11:18.170
This is my app.

00:11:18.390 --> 00:11:20.490
Let's make it a Newsstand app.

00:11:21.860 --> 00:11:28.500
The first thing we have to do
is add our UI Newsstand app key.

00:11:28.500 --> 00:11:32.270
As I mentioned, that is a Boolean.

00:11:32.350 --> 00:11:33.890
Yes.

00:11:35.420 --> 00:11:38.360
Save, and let's run.

00:11:38.380 --> 00:11:41.190
Exit back to the home screen,
and now you can see there's

00:11:41.230 --> 00:11:42.560
something in the Newsstand.

00:11:42.590 --> 00:11:45.140
And we open it up, and here's my app.

00:11:45.160 --> 00:11:47.130
Now,
that doesn't really look all that great.

00:11:47.230 --> 00:11:51.630
It's got my old icon crammed into a
sort of newspaper-y looking shape.

00:11:51.650 --> 00:11:55.640
So let's quit and define
our Newsstand icon.

00:11:55.640 --> 00:11:58.290
All right,
I've got this pasted to the clipboard,

00:11:58.290 --> 00:12:00.230
so I can do it quickly.

00:12:01.280 --> 00:12:07.090
We'll name this CFBundle Icons.

00:12:07.170 --> 00:12:09.210
Now,
I've included two styles within here.

00:12:09.380 --> 00:12:13.810
The first is the primary icon,
and the second is my Newsstand icon.

00:12:14.020 --> 00:12:17.240
You can see my primary icon is empty,
so I need to add my existing

00:12:17.240 --> 00:12:18.560
list of images to it.

00:12:18.630 --> 00:12:20.110
I'll just go up here.

00:12:20.190 --> 00:12:22.510
This is my standard image.

00:12:23.060 --> 00:12:26.930
Copy you, come in here, paste, that's it.

00:12:27.170 --> 00:12:29.760
I've also included another image
in my project and newspaper

00:12:30.150 --> 00:12:31.300
that will be my Newsstand icon.

00:12:32.790 --> 00:12:33.900
will save.

00:12:34.010 --> 00:12:36.060
Oh,
you can also tell I've added the binding

00:12:36.130 --> 00:12:39.980
type newspaper and binding edge bottom,
because I'm a newspaper.

00:12:40.000 --> 00:12:41.590
When I run.

00:12:42.100 --> 00:12:43.840
Exit back to the home screen.

00:12:43.890 --> 00:12:46.330
I'm still there in the Newsstand,
but now I look like an

00:12:46.380 --> 00:12:47.440
actual Newsstand app.

00:12:47.500 --> 00:12:51.140
And that's it.

00:12:51.140 --> 00:12:53.710
That's all it takes to make
your app a Newsstand app.

00:12:58.210 --> 00:12:59.960
And now,
I'd like to hand this back to Ben,

00:12:59.970 --> 00:13:03.310
who will be telling you
all about content updates.

00:13:07.770 --> 00:13:09.000
So that's kind of exciting, isn't it?

00:13:09.000 --> 00:13:11.570
I mean, I really like this new
look for Newsstand apps.

00:13:11.620 --> 00:13:13.560
I think it's really fun.

00:13:13.560 --> 00:13:15.360
But moving away from
the home screen visuals,

00:13:15.360 --> 00:13:18.670
let's talk about getting content,
and specifically how

00:13:18.670 --> 00:13:20.740
Newsstand Kit can help.

00:13:20.900 --> 00:13:24.080
So this process,
this is going to be a cycle that

00:13:24.080 --> 00:13:26.260
you're going to go through repeatedly,
right?

00:13:26.260 --> 00:13:29.950
I mean, every 24 hours, week, month,
whatever it is for your app,

00:13:29.950 --> 00:13:31.560
you're going to be
doing this all the time.

00:13:31.560 --> 00:13:33.440
So we're going to spend
a bit of time on this.

00:13:33.440 --> 00:13:35.250
It has four steps.

00:13:35.320 --> 00:13:36.920
The first step--

00:13:37.840 --> 00:13:41.430
is how do you let your app know
that new content is available?

00:13:41.510 --> 00:13:43.890
And then once you know
that it's available,

00:13:44.040 --> 00:13:46.810
what do you have to do on disk to
kind of prepare a place to put all the

00:13:46.810 --> 00:13:48.780
files that you're about to download?

00:13:49.030 --> 00:13:50.770
And then you have to
actually download them.

00:13:50.850 --> 00:13:54.190
And then once you've got all of that,
you're going to have to update your

00:13:54.190 --> 00:13:57.470
icon and your badge to let the user
know that it's now ready to be viewed.

00:13:57.560 --> 00:14:00.240
So let's talk about informing the app.

00:14:00.300 --> 00:14:04.530
Well, when we look at all of the
technologies available to us,

00:14:04.660 --> 00:14:07.770
really, push notifications match
our needs the best.

00:14:07.970 --> 00:14:11.640
But they've got one flaw in
terms of what we want to do here,

00:14:11.640 --> 00:14:14.150
and that's that they're
meant to inform the user.

00:14:14.210 --> 00:14:17.680
If your app isn't running,
we let the user know, and not your app.

00:14:17.750 --> 00:14:20.410
So really what we needed is
a type of push notification

00:14:20.930 --> 00:14:23.940
that always goes to your app,
even if it's in the background,

00:14:23.980 --> 00:14:25.820
or even if it's not yet running.

00:14:25.840 --> 00:14:28.260
And so that's what we've done,
is we've added a new type of push

00:14:28.350 --> 00:14:32.460
notification-- we call it Newsstand
push notifications-- to do this.

00:14:32.590 --> 00:14:36.160
Now, we're not going to go too deep
into what is push notifications.

00:14:36.200 --> 00:14:38.820
So if you've got a lot of questions,
if you're new at it or

00:14:38.820 --> 00:14:41.330
you need a refresher,
there's always the remote and

00:14:41.330 --> 00:14:45.120
local notification programming
guide on the Apple Docs.

00:14:45.120 --> 00:14:47.000
And then, of course,
there are other sessions,

00:14:47.000 --> 00:14:49.770
and you're always welcome to come
and ask us about it in the labs.

00:14:49.840 --> 00:14:52.210
We'd be happy to answer
any questions you have.

00:14:52.310 --> 00:14:56.150
So in order to take advantage
of Newsstand push notifications,

00:14:56.310 --> 00:14:56.980
what's different?

00:14:57.010 --> 00:14:58.490
What do you have to be aware of?

00:14:58.620 --> 00:15:00.960
Well, the first thing is we have
a new registration type.

00:15:01.060 --> 00:15:03.660
And that is Newsstand
content availability.

00:15:03.940 --> 00:15:08.650
You'll need to add this registration type
to your registering for remote-- for push

00:15:08.690 --> 00:15:11.270
notifications when your app launches.

00:15:11.530 --> 00:15:15.220
Once you do that, you can receive them,
but you're also going to need

00:15:15.220 --> 00:15:18.380
to mark your notifications as
being Newsstand notifications.

00:15:18.500 --> 00:15:21.620
You do that with a new payload key,
which is content available

00:15:21.900 --> 00:15:24.700
set to a value of 1,
and you set that inside of your

00:15:24.910 --> 00:15:27.500
APS reserved dictionary for the payload.

00:15:27.610 --> 00:15:29.460
You do that, congratulations.

00:15:29.570 --> 00:15:31.840
You're now sending
Newsstand notifications.

00:15:31.920 --> 00:15:33.470
And that's almost
everything you need to know.

00:15:33.520 --> 00:15:35.350
But there are two caveats.

00:15:35.420 --> 00:15:38.790
The first one is you can only
receive this type of notification

00:15:38.840 --> 00:15:41.000
once in a 24-hour period.

00:15:41.040 --> 00:15:44.170
So if we look forward to the
future here a little bit,

00:15:44.190 --> 00:15:46.040
iOS 5 ships in fall.

00:15:46.040 --> 00:15:47.990
That's, say, roughly three months away.

00:15:48.000 --> 00:15:52.840
That's 90 days,
90 opportunities to test this feature.

00:15:53.010 --> 00:15:56.050
So I hope it goes really
smoothly and you get everything

00:15:56.050 --> 00:15:57.980
working in the first 90 days.

00:15:58.000 --> 00:16:01.830
OK, well,
maybe that's not really feasible.

00:16:01.960 --> 00:16:03.160
So we've added an override.

00:16:03.160 --> 00:16:05.560
You can set it in your NSUser defaults.

00:16:05.720 --> 00:16:09.720
That's just a Boolean value for the key,
NK don't throttle Newsstand content

00:16:09.720 --> 00:16:14.280
notifications-- or Newsstand-- yeah,
that's right.

00:16:14.610 --> 00:16:17.570
You set that key,
and we will let you receive it as

00:16:17.570 --> 00:16:22.020
many times as you want to your heart's
content on your developer devices.

00:16:22.100 --> 00:16:24.440
So that's the first thing
you need to be aware of.

00:16:24.460 --> 00:16:27.560
The second thing you need to be aware
of is that because we'll actually

00:16:27.560 --> 00:16:30.780
be waking you up in the background,
it means we're playing with

00:16:30.780 --> 00:16:31.920
the multitasking system.

00:16:31.930 --> 00:16:33.660
So you're going to have to let
the multitasking system know that

00:16:33.770 --> 00:16:38.540
you're going to need to support
being woken up for those reasons,

00:16:38.590 --> 00:16:40.670
which means a new background mode.

00:16:40.930 --> 00:16:44.000
So the background mode you're
going to need is Newsstand content.

00:16:44.090 --> 00:16:47.150
You set that key inside of
your UI background mode's

00:16:47.150 --> 00:16:49.030
array in your Info.plist.

00:16:49.080 --> 00:16:52.100
Doing that lets us know
that we should wake you up.

00:16:52.770 --> 00:16:56.720
The other thing you need to know is this
background mode only buys you a couple

00:16:56.720 --> 00:16:59.940
of seconds to process that notification.

00:17:00.170 --> 00:17:02.540
Hopefully,
that's all you're going to need.

00:17:02.640 --> 00:17:05.220
But if it isn't,
you can always tell the system that

00:17:05.250 --> 00:17:09.040
you're going to begin a background task,
and you'll get the 10 minutes

00:17:09.110 --> 00:17:10.870
that this function will buy you.

00:17:11.000 --> 00:17:13.110
Don't forget to check it in, though.

00:17:13.960 --> 00:17:14.920
OK, so that's it.

00:17:15.090 --> 00:17:17.640
We now know-- we've now been
able to inform the app that

00:17:17.670 --> 00:17:19.000
there's new content available.

00:17:19.100 --> 00:17:23.490
The app's going to have to prepare a
location to put all of that content.

00:17:23.590 --> 00:17:26.310
So how do we go about doing that?

00:17:26.580 --> 00:17:29.950
Well, you're going to need to
persist some state information,

00:17:29.950 --> 00:17:32.690
and actually create a place
on disk to put it all.

00:17:32.720 --> 00:17:35.300
And since this is everything that
all of you are going to be doing,

00:17:35.300 --> 00:17:39.120
we've created a new class
called NK Library as a part of

00:17:39.120 --> 00:17:41.700
Newsstand Kit to do this for you.

00:17:42.080 --> 00:17:44.440
So NK Library provides
a persistent state,

00:17:44.570 --> 00:17:48.000
specifically for information
regarding all of the available

00:17:48.040 --> 00:17:51.590
issues on the user's device,
as well as all of the downloads that are

00:17:51.590 --> 00:17:55.790
either scheduled or currently in flight,
as well as other metadata,

00:17:55.790 --> 00:17:59.960
like what issue is a user
currently interested in.

00:18:01.740 --> 00:18:05.410
Beyond just state information,
it also helps to actually

00:18:05.410 --> 00:18:06.980
organize your disk.

00:18:06.980 --> 00:18:10.580
It does that all inside of the
application's caches directory.

00:18:10.610 --> 00:18:12.600
We play nice with backup.

00:18:12.600 --> 00:18:15.450
You may be asking yourself,
"Why did you go to the trouble

00:18:15.510 --> 00:18:17.100
of making this class for me?

00:18:17.100 --> 00:18:21.870
I could do this." That's true,
but since all of you are going to do it,

00:18:21.870 --> 00:18:23.800
we wanted to make it simple.

00:18:23.890 --> 00:18:26.520
But then also, there's one other reason,
and that's by sharing just a

00:18:26.520 --> 00:18:29.340
limited amount of information
of the structure of your app,

00:18:29.340 --> 00:18:33.020
we're actually able to improve the
cache management system in terms of

00:18:33.020 --> 00:18:35.300
both efficiency and user friendliness.

00:18:35.320 --> 00:18:37.740
So it's really a win-win for everybody.

00:18:37.740 --> 00:18:40.670
So that's NK Library.

00:18:40.680 --> 00:18:43.490
But NK Library is meant to manage issues.

00:18:43.550 --> 00:18:45.540
So how do you go about adding an issue?

00:18:45.540 --> 00:18:49.060
To create an issue,
all you need is two bits of information.

00:18:49.060 --> 00:18:51.860
The first is,
you're going to need a name that

00:18:52.000 --> 00:18:53.910
will uniquely identify that issue.

00:18:53.920 --> 00:18:56.770
We don't care what it is,
set it to whatever you want,

00:18:56.890 --> 00:18:58.430
but it needs to uniquely identify it.

00:18:58.480 --> 00:19:02.010
And you're going to need to tell us
the publication date of that issue.

00:19:02.040 --> 00:19:05.460
Once you know those two things,
you just call up on the library,

00:19:05.460 --> 00:19:09.330
add issue with name and date,
and we will go ahead and

00:19:09.330 --> 00:19:10.840
return you an NK issue.

00:19:10.840 --> 00:19:15.300
Now this actually creates and maintains
a repository within the library.

00:19:15.300 --> 00:19:18.740
And in this repository,
you should put all of the content.

00:19:19.120 --> 00:19:21.710
associated with your issue.

00:19:22.190 --> 00:19:25.640
And you can get that by just querying
the issue for its content URL,

00:19:25.640 --> 00:19:29.570
and use that as the base for all
of your file system manipulations.

00:19:29.720 --> 00:19:33.320
And the other thing that you can do
with issues is that you can tell us what

00:19:33.320 --> 00:19:36.840
the most important issue currently is.

00:19:36.940 --> 00:19:39.160
And not just us, I mean,
this is also you.

00:19:39.160 --> 00:19:41.460
You're going to need to persist
this information somehow.

00:19:41.550 --> 00:19:46.290
And you do that just using the currently
reading issue property of the library.

00:19:46.530 --> 00:19:46.960
That's easy.

00:19:46.960 --> 00:19:50.090
It's really simple to organize it all.

00:19:50.090 --> 00:19:51.960
At least we hope you think
it's all really simple.

00:19:51.960 --> 00:19:55.600
So now that we've created
a place to put it all,

00:19:55.600 --> 00:19:57.590
we're going to need to
download all that content.

00:19:57.600 --> 00:20:02.680
And this is really the meat of what
you're going to be doing every so often.

00:20:02.680 --> 00:20:04.550
So let's talk about it.

00:20:04.630 --> 00:20:08.310
Well, without Newsstand Kit,
your app is going to have to be running,

00:20:08.310 --> 00:20:11.580
set up an NSURL connection,
and then it's going to have

00:20:11.580 --> 00:20:14.350
to stay running in order
to get all of that content,

00:20:14.360 --> 00:20:14.590
right?

00:20:14.660 --> 00:20:18.000
To get all of the did-receive-data
callbacks on your delegate.

00:20:18.000 --> 00:20:21.650
Well, this doesn't work so well, right?

00:20:21.740 --> 00:20:23.620
Because we could take and put
you all into the background,

00:20:23.620 --> 00:20:27.620
and then in the worst case,
we've got tens, if not hundreds,

00:20:27.620 --> 00:20:31.450
of news apps that are trying to download
large amounts of content all the time.

00:20:31.480 --> 00:20:35.050
In that case, trust me, nobody wins.

00:20:35.100 --> 00:20:36.480
It's just really bad.

00:20:36.500 --> 00:20:40.320
So what we needed to do was provide
you a facility to hook directly into

00:20:40.320 --> 00:20:45.060
the system's downloading mechanism,
so that everything can be well organized,

00:20:45.060 --> 00:20:46.810
and we can maintain good performance.

00:20:46.820 --> 00:20:50.230
So we've done that by
adding NKAsset Download.

00:20:50.240 --> 00:20:54.250
NKAsset Download will actually
handle all of the data transfer and

00:20:54.250 --> 00:20:56.260
storage of that to disk for you.

00:20:56.360 --> 00:21:02.420
And because it's a part of the system,
that means it can keep processing,

00:21:02.420 --> 00:21:05.770
even when your app is
suspended or even quits.

00:21:05.780 --> 00:21:09.070
But we didn't want to create
an entirely new download

00:21:09.070 --> 00:21:11.210
mechanism you'd have to learn.

00:21:11.220 --> 00:21:14.320
So we're piggybacking off... of
the familiar NSURL connection

00:21:14.320 --> 00:21:17.450
delegate that you already know,
so all of the complex things you

00:21:17.530 --> 00:21:20.510
may need to do with that download,
like authentication,

00:21:20.520 --> 00:21:23.240
are all handled in the same mechanism.

00:21:23.260 --> 00:21:27.970
Which means we're going to wake you up
to process those events specifically.

00:21:28.060 --> 00:21:30.810
Again, that means we're playing
with a multitasking system.

00:21:30.870 --> 00:21:33.440
You have to declare a background mode.

00:21:33.660 --> 00:21:35.330
But it's the same one as before.

00:21:35.340 --> 00:21:38.370
So you set it for push notifications,
and you got it for downloads.

00:21:38.410 --> 00:21:39.560
So that's easy.

00:21:39.580 --> 00:21:44.730
Now, one caveat to know is that
while your app is frontmost,

00:21:44.730 --> 00:21:47.620
you've got access to any
network connection the user has.

00:21:47.620 --> 00:21:50.300
But if you're backgrounded,
all of your downloads will

00:21:50.300 --> 00:21:51.680
only happen over Wi-Fi.

00:21:51.680 --> 00:21:53.810
So good to know.

00:21:53.820 --> 00:21:57.150
So what does it take to actually
set up one of these downloads?

00:21:57.780 --> 00:22:00.020
Well,
once you know that issue's available,

00:22:00.020 --> 00:22:02.970
you've gone through,
you've created a space on disk

00:22:02.970 --> 00:22:07.600
using NK Library and NK Issue,
you're going to need to also know

00:22:07.600 --> 00:22:09.380
what it is you need to download.

00:22:09.380 --> 00:22:11.710
And for that, that's really up to you.

00:22:11.720 --> 00:22:14.130
You're going to need to query the server.

00:22:14.130 --> 00:22:17.310
You need to do subscription
validation or whatever.

00:22:17.320 --> 00:22:19.460
Maybe you're talking to
lots of different servers.

00:22:19.460 --> 00:22:21.870
Whatever it is for you,
you're going to get a list of all of

00:22:21.970 --> 00:22:23.530
those things you need to download.

00:22:23.540 --> 00:22:27.640
And you're just going to iterate over
that list and create an NSURL request.

00:22:27.780 --> 00:22:29.780
And you're going to create
a request for each item.

00:22:29.780 --> 00:22:34.190
And once you have that request,
you're just going to call add asset

00:22:34.200 --> 00:22:37.020
with request for the particular
issue you're downloading for,

00:22:37.020 --> 00:22:38.780
passing in the request you just made.

00:22:38.780 --> 00:22:41.770
And that'll return you
an NK asset download.

00:22:41.780 --> 00:22:44.150
To begin the download,
all you have to do is call

00:22:44.260 --> 00:22:47.740
download with delegate,
passing in your connection delegate.

00:22:47.780 --> 00:22:48.740
And that's it.

00:22:48.900 --> 00:22:52.380
We're now downloading,
potentially in the background.

00:22:52.910 --> 00:22:56.950
So let's take a look at this delegate.

00:22:57.050 --> 00:22:59.500
It's not actually an
NSURL connection delegate.

00:22:59.500 --> 00:23:02.100
It's actually an NSURL connection
download delegate,

00:23:02.140 --> 00:23:06.760
which is a new protocol in iOS 5
specifically to support NewsstandKit.

00:23:06.950 --> 00:23:09.300
But it implements
NSURL connection delegate,

00:23:09.300 --> 00:23:12.400
which means this is how you
receive all of your status updates.

00:23:12.560 --> 00:23:15.690
It's how you receive your authentication
challenges and your notifications

00:23:15.690 --> 00:23:18.000
of when the download is finished.

00:23:18.060 --> 00:23:21.020
But it does modify
things just a little bit.

00:23:21.190 --> 00:23:23.710
And the big thing is, well,
you used to receive

00:23:23.770 --> 00:23:26.600
connection-did-receive data,
but since we're handling all of the data,

00:23:26.600 --> 00:23:28.480
this method doesn't make
a whole lot of sense.

00:23:28.480 --> 00:23:33.280
So we've gone ahead and replaced that
with two status update mechanisms

00:23:33.280 --> 00:23:37.240
that you can use to know how the
system is progressing with your data.

00:23:37.240 --> 00:23:40.150
And, of course,
connection-did-finish-loading

00:23:40.150 --> 00:23:43.900
doesn't tell you where on disk
we stored all that information.

00:23:43.900 --> 00:23:46.950
So we've replaced that one with
connection-did-finish-downloading,

00:23:46.950 --> 00:23:48.620
passing you back a destination URL.

00:23:49.420 --> 00:23:51.430
Now, the first two,
seeing as they're status updates,

00:23:51.430 --> 00:23:52.120
are optional.

00:23:52.160 --> 00:23:53.190
Don't have to use them.

00:23:53.200 --> 00:23:56.750
But the last one, of course, is required,
because there's no other way for you

00:23:56.750 --> 00:23:58.320
to know how to process this event.

00:24:00.140 --> 00:24:03.230
So you get all of these delegate
callbacks if you're frontmost.

00:24:03.250 --> 00:24:05.640
So how does that change if
your app has been suspended?

00:24:05.640 --> 00:24:09.160
You're just not going to
receive any more status updates.

00:24:09.160 --> 00:24:10.210
That's it.

00:24:10.210 --> 00:24:13.830
But you are still going to be woken
up in the case of an authentication

00:24:13.830 --> 00:24:15.810
challenge or a completion event.

00:24:15.850 --> 00:24:18.410
So not too different.

00:24:18.410 --> 00:24:21.280
But what's the difference if your
app has actually been terminated?

00:24:21.280 --> 00:24:24.510
Well,
for the same reasons that we would have

00:24:24.510 --> 00:24:29.540
reactivated you if you were suspended,
we're just going to relaunch

00:24:29.540 --> 00:24:29.980
you in the same event.

00:24:30.000 --> 00:24:31.560
So you're in the background.

00:24:31.560 --> 00:24:32.380
You won't be frontmost.

00:24:32.410 --> 00:24:33.320
You'll be in the background.

00:24:33.380 --> 00:24:36.020
But you will be able to
process this notification,

00:24:36.270 --> 00:24:39.150
which means we're going to have
to tell you why you were launched.

00:24:39.150 --> 00:24:42.760
So in the launch options dictionary,
we're going to pass you some

00:24:42.760 --> 00:24:46.000
new values for this key,
which is Newsstand downloads.

00:24:46.000 --> 00:24:50.160
And the value is going to be an
array of unique identifiers for those

00:24:50.160 --> 00:24:52.400
assets that caused you to launch.

00:24:52.400 --> 00:24:55.970
You can query to figure out what
that is on the asset by just

00:24:55.970 --> 00:24:58.550
asking for its identifier property.

00:24:58.800 --> 00:25:02.290
OK, so now you're asking yourself,
or you may be asking yourself,

00:25:02.290 --> 00:25:06.140
I understand that the download may
be continuing on in the background.

00:25:06.140 --> 00:25:07.360
That's fine.

00:25:07.360 --> 00:25:08.240
It's a system thing.

00:25:08.240 --> 00:25:11.320
But if my app has been terminated,
the application delegate that

00:25:11.370 --> 00:25:13.040
I created doesn't exist anymore.

00:25:13.040 --> 00:25:17.050
So how am I supposed to get
status updates for that download?

00:25:17.060 --> 00:25:18.840
Which brings us to a really good point.

00:25:18.910 --> 00:25:21.270
You're going to need to
reconnect to those downloads.

00:25:21.340 --> 00:25:23.720
The process, again, it's very simple.

00:25:23.720 --> 00:25:27.490
We've tried to make it as...

00:25:28.370 --> 00:25:30.010
We'll try to make it as easy as possible.

00:25:30.280 --> 00:25:31.570
Hopefully we did a good job.

00:25:31.690 --> 00:25:33.780
You're just going to have
to query the library for all

00:25:33.780 --> 00:25:36.250
of the downloading assets,
and then call download

00:25:36.250 --> 00:25:38.600
with delegate again,
passing in your new delegate.

00:25:38.600 --> 00:25:40.610
That'll then go and find it,
reconnect to it,

00:25:40.610 --> 00:25:43.380
and you'll immediately start
receiving all of the updates that

00:25:43.500 --> 00:25:45.100
you have been needing to process.

00:25:46.920 --> 00:25:49.620
This brings us, though,
to a really important point,

00:25:49.620 --> 00:25:51.850
and that is you're
going to need to always,

00:25:51.850 --> 00:25:55.620
always connect all of your downloading
assets every time you launch.

00:25:55.620 --> 00:25:59.440
Don't just go and find the ones
that actually caused you to launch,

00:25:59.440 --> 00:26:02.700
because you may have lots of others
in process that don't actually

00:26:02.730 --> 00:26:04.360
need your interaction right now.

00:26:04.360 --> 00:26:07.250
And if you don't hook up to those,
you no longer have any reason,

00:26:07.250 --> 00:26:09.280
any way of knowing what's
going on with them,

00:26:09.330 --> 00:26:11.400
and you've essentially abandoned them.

00:26:11.870 --> 00:26:14.770
The system can detect that,
and may cancel those downloads,

00:26:14.770 --> 00:26:17.140
since you can't know
what's going on anyway.

00:26:17.140 --> 00:26:21.140
So please remember to always connect all
of your downloading assets on relaunch.

00:26:22.660 --> 00:26:26.360
So hopefully we've gone through
and we've processed these,

00:26:26.360 --> 00:26:29.480
and now we've come back and it
says your download is finished.

00:26:29.480 --> 00:26:31.640
In the case of an error,
it's the same mechanism,

00:26:31.640 --> 00:26:34.180
so we won't talk about that,
but hopefully it's actually

00:26:34.250 --> 00:26:35.280
completed successfully.

00:26:35.280 --> 00:26:38.530
In that case, you're going to receive
connection to finish downloading

00:26:38.530 --> 00:26:39.980
with your destination URL.

00:26:39.980 --> 00:26:43.160
This destination URL is
actually a temporary file.

00:26:43.180 --> 00:26:46.680
It's only guaranteed to exist for
the duration of this callback.

00:26:46.780 --> 00:26:51.720
So the first thing you want to do is move
that file into your issue repository.

00:26:52.190 --> 00:26:55.800
Remember, you can do that very simply by
getting the content URL of the issue,

00:26:55.800 --> 00:26:58.970
and using that to build your
relative path where you're

00:26:59.190 --> 00:27:00.560
going to move this file.

00:27:00.560 --> 00:27:05.370
Now, you're going to possibly
want to process this file,

00:27:05.380 --> 00:27:06.320
and what do I mean by that?

00:27:06.360 --> 00:27:10.130
Well, hopefully you're not
scheduling 500 downloads.

00:27:10.140 --> 00:27:14.100
You can,
but it's really not a great experience.

00:27:14.120 --> 00:27:19.170
So what you're going to want to do,
hopefully, is kind of package them up,

00:27:19.190 --> 00:27:21.360
maybe into a zip archive,
or an SQLite database,

00:27:21.680 --> 00:27:25.440
or some other type of flat file,
we can just send a few of them.

00:27:25.650 --> 00:27:28.130
But if you're going to do that,
it might take you a while to process.

00:27:28.150 --> 00:27:30.480
And remember,
we only give you a couple of seconds

00:27:30.550 --> 00:27:33.200
to handle all of these notifications.

00:27:33.210 --> 00:27:36.880
Again, you may want to let the system
know you're beginning a background

00:27:36.880 --> 00:27:42.870
task as you unarchive or decrypt or
whatever it is you may need to do.

00:27:43.750 --> 00:27:45.790
So, and that's really it.

00:27:45.790 --> 00:27:50.890
Once you know that, process your file,
congratulations, you now put all of that

00:27:50.890 --> 00:27:52.900
content into your issue.

00:27:52.900 --> 00:27:55.950
And I'd like to show you a
demo of walking through all of

00:27:55.950 --> 00:28:00.970
these steps for a sample issue.

00:28:01.770 --> 00:28:04.590
All right, so the very first thing we do,
we're using the same app that

00:28:04.600 --> 00:28:06.200
Jon was working with before.

00:28:06.200 --> 00:28:08.680
You can see all the keys
that he's added in here.

00:28:08.700 --> 00:28:13.690
So the first thing we're going to
want to do is add the background mode.

00:28:13.700 --> 00:28:15.200
There we go.

00:28:15.200 --> 00:28:17.190
So we're just going to call
in required background modes,

00:28:17.210 --> 00:28:19.810
which is an alias for...

00:28:20.420 --> 00:28:22.200
for UI background modes.

00:28:22.290 --> 00:28:25.380
And then we're going to
type in this new string,

00:28:25.450 --> 00:28:28.740
this new background mode,
which is Newsstand content.

00:28:29.660 --> 00:28:31.480
We do that,
now we can start receiving all of

00:28:31.480 --> 00:28:32.800
these things in the background.

00:28:32.810 --> 00:28:34.180
Let's save that,
and now let's move over to

00:28:34.180 --> 00:28:35.930
the application delegate.

00:28:36.040 --> 00:28:37.870
Now the application delegate,
for simplicity's sake,

00:28:37.930 --> 00:28:42.270
is where we're going to do all
of the processing for this app,

00:28:42.320 --> 00:28:45.790
just so everything's nice
and clear in one file.

00:28:47.250 --> 00:28:48.200
there we go.

00:28:48.200 --> 00:28:50.440
It gives us a little bit more room.

00:28:50.470 --> 00:28:52.770
Now, the very first thing we're
going to do normally,

00:28:52.770 --> 00:28:55.760
well, actually,
let's show you the app so you

00:28:55.760 --> 00:28:57.760
can see what it looks like.

00:28:57.760 --> 00:29:00.290
You can see it's just a table
view that shows us the state of

00:29:00.290 --> 00:29:01.820
all of our current downloads.

00:29:01.820 --> 00:29:04.780
Now, I'd really like to show you
the push notification system,

00:29:04.780 --> 00:29:08.250
but since we're running in the simulator,
I actually can't do that.

00:29:08.420 --> 00:29:09.530
But trust me, it works.

00:29:09.530 --> 00:29:12.900
It's really,
really cool to not see what's happening.

00:29:12.900 --> 00:29:16.570
But instead, what we're going to do is
we're going to kick things

00:29:16.570 --> 00:29:20.970
off with this download button.

00:29:21.910 --> 00:29:25.700
So first thing that I would
normally do is I'm going to,

00:29:25.840 --> 00:29:30.390
for development purposes,
I'm going to set the default that

00:29:30.550 --> 00:29:34.220
gets rid of the limitation of only
one push notification per day.

00:29:34.240 --> 00:29:37.960
And then I would come in,
and I would register for the new push

00:29:37.960 --> 00:29:42.270
notification type using the new enum,
UI remote notification type,

00:29:42.270 --> 00:29:44.740
Newsstand content availability.

00:29:44.740 --> 00:29:48.660
But we're not actually going to do that
because we can't do push notifications.

00:29:48.660 --> 00:29:50.310
But I just wanted you to see that.

00:29:51.160 --> 00:29:54.800
So what we are going to do is
we're going to look in our launch,

00:29:54.800 --> 00:29:58.300
we're going to look for any assets that
may be downloading that we haven't,

00:29:58.300 --> 00:30:00.680
you know,
that we haven't been connected to.

00:30:00.680 --> 00:30:02.440
And we're going to find them,
and we're going to call

00:30:02.440 --> 00:30:03.600
download with delegate again.

00:30:03.600 --> 00:30:08.000
You can see that I'm using my application
delegate as my download delegate as well,

00:30:08.000 --> 00:30:09.360
again, for simplicity's sake.

00:30:09.360 --> 00:30:11.120
So I've done that.

00:30:11.120 --> 00:30:11.990
I've reconnected.

00:30:12.000 --> 00:30:15.050
I can, you know, I'm good to go.

00:30:15.060 --> 00:30:17.560
Now,
once I receive the start download event,

00:30:17.590 --> 00:30:22.110
I'm going to come,
and I'm going to have to begin that,

00:30:22.120 --> 00:30:24.400
oops, begin that download.

00:30:24.400 --> 00:30:27.390
So I'm going to need...

00:30:27.540 --> 00:30:30.170
To ask the server,
this is all a little simplified here,

00:30:30.180 --> 00:30:32.690
I know, but I'm going to just
query the server and say,

00:30:32.800 --> 00:30:35.250
get me the latest issue info
so I can check against it,

00:30:35.250 --> 00:30:35.880
right?

00:30:35.880 --> 00:30:39.000
And that's going to return me an
object that I can use to see what

00:30:39.000 --> 00:30:40.620
it is I may need to download.

00:30:40.620 --> 00:30:43.930
And the next thing I'm going to do is,
I need to check the library and see,

00:30:43.930 --> 00:30:45.350
do I already have that issue?

00:30:45.350 --> 00:30:48.620
Because I already have it,
there's nothing I need to do, right?

00:30:48.620 --> 00:30:51.370
But we're going to assume then
that I don't have that issue,

00:30:51.400 --> 00:30:52.800
and I just need to create it.

00:30:53.700 --> 00:30:58.810
So I'm going to call add issue with name,
passing in the name field that

00:30:58.990 --> 00:31:01.590
I just queried from the server,
as well as the publication

00:31:01.590 --> 00:31:02.530
date of that issue.

00:31:02.540 --> 00:31:05.580
Now I've got the NK issue,
this has created the location on disk

00:31:05.580 --> 00:31:09.090
for me where I need to put everything,
and I'm just going to need

00:31:09.090 --> 00:31:10.950
to create an asset download.

00:31:10.960 --> 00:31:13.580
Now in this case,
I know that I've put all of my

00:31:13.650 --> 00:31:18.180
content into one database file,
so I'm just creating one asset download,

00:31:18.180 --> 00:31:20.320
and that is my content request.

00:31:20.380 --> 00:31:23.530
You can see I've created
my NSURL request here.

00:31:23.560 --> 00:31:25.840
And I pass it in and I get
my NK asset download.

00:31:25.840 --> 00:31:29.810
Right after I do that,
I am going to set something

00:31:29.810 --> 00:31:32.660
we didn't actually talk about.

00:31:32.660 --> 00:31:35.820
Now, when you start,
when you go and query the server,

00:31:35.820 --> 00:31:40.620
you're probably going to know exactly
where you need to put all of those files.

00:31:40.620 --> 00:31:43.130
And if they are packaged
up in some special way,

00:31:43.130 --> 00:31:46.760
you're going to have all the
information of how to unpackage it.

00:31:46.760 --> 00:31:50.770
But keep in mind, when you process it,
your app may have been terminated,

00:31:50.850 --> 00:31:51.900
even many times.

00:31:51.900 --> 00:31:52.510
And so,
unless you have a specific application,

00:31:52.510 --> 00:31:53.240
you're going to have to do a
lot of work to get it done.

00:31:53.240 --> 00:31:55.180
And unless you have a way of
persisting that information,

00:31:55.420 --> 00:31:57.240
when it comes to process,
you may not know how.

00:31:57.240 --> 00:32:01.740
So we provided a simple,
a simple accessor here.

00:32:01.740 --> 00:32:05.370
You can set a user info dictionary
of plistable types to store any

00:32:05.370 --> 00:32:09.240
information you need at the time
you have to process this download.

00:32:09.240 --> 00:32:13.430
Though you may want to keep in mind
that it's always good to keep this

00:32:13.430 --> 00:32:15.780
dictionary as small as possible.

00:32:15.930 --> 00:32:19.260
So once we've done that,
and here what I'm doing is I'm just

00:32:19.430 --> 00:32:23.980
getting the content file name and
creating a dictionary that just has

00:32:23.980 --> 00:32:27.310
a file name mapping to that string.

00:32:27.730 --> 00:32:30.260
So once I do that,
all I need to do is call

00:32:30.260 --> 00:32:32.600
download with delegate,
passing myself in.

00:32:32.600 --> 00:32:34.030
And there we are.

00:32:34.150 --> 00:32:37.770
The download is now
underway in the system.

00:32:38.790 --> 00:32:41.510
So what else do we need
to process this now?

00:32:41.610 --> 00:32:44.340
Well, we have an NSURL connection
download delegate,

00:32:44.340 --> 00:32:45.970
so let's flush out some of those methods.

00:32:45.980 --> 00:32:48.970
Now,
I'm not terribly interested in the status

00:32:48.970 --> 00:32:51.460
and the errors that may be returned.

00:32:51.460 --> 00:32:54.340
My UI needs to know about it,
so what I'm doing here is I'm

00:32:54.340 --> 00:32:58.200
just forwarding all of those
methods off to my UI manager,

00:32:58.200 --> 00:33:00.340
so that it can tell us what's going on.

00:33:00.340 --> 00:33:03.480
But there's not too much for us
to do with that in this demo.

00:33:04.590 --> 00:33:07.600
So, but hopefully,
it will have downloaded successfully,

00:33:07.600 --> 00:33:10.880
and we'll get this connection to finish
downloading with the destination URL.

00:33:10.880 --> 00:33:14.690
Once I get that,
I'm going to need to actually get

00:33:14.690 --> 00:33:17.900
the Newsstand asset that I was using.

00:33:17.900 --> 00:33:20.740
But you notice that it repassed me
back an NSURL connection object.

00:33:20.740 --> 00:33:24.190
We've added a protocol to
the NSURL connection class,

00:33:24.280 --> 00:33:27.060
or sorry,
a category to the NSURL connection

00:33:27.060 --> 00:33:31.090
class to retrieve the asset that
created it if there was one.

00:33:31.140 --> 00:33:34.480
So I've queried back
and gotten the NK asset.

00:33:34.540 --> 00:33:37.380
download that created that connection.

00:33:37.580 --> 00:33:41.810
The next thing I'm going to do is
pull out the user info and find the

00:33:41.940 --> 00:33:45.870
file name that I need to process this,
to figure out the relative path

00:33:45.910 --> 00:33:47.750
this will go inside of my issue.

00:33:48.050 --> 00:33:51.660
And then I'm actually going to
construct that file URL by using

00:33:51.660 --> 00:33:55.600
the issue's content URL and
impending my relative path.

00:33:55.810 --> 00:33:56.760
So I'm almost done.

00:33:56.830 --> 00:34:02.930
All I have to do now is actually move
that content file into my issue using

00:34:02.930 --> 00:34:05.260
the standard NS file manager routines.

00:34:05.360 --> 00:34:13.800
And the last thing, well,
I need to let my UI know that

00:34:13.800 --> 00:34:16.990
it's finished so that we can
see that all nice and run.

00:34:17.090 --> 00:34:20.180
So let's actually run
that and see what happens.

00:34:23.750 --> 00:34:26.550
So here's my app,
and I'm going to hit Downloads to

00:34:26.570 --> 00:34:29.350
simulate the push notification coming in.

00:34:29.480 --> 00:34:31.720
See it drop down.

00:34:32.220 --> 00:34:35.040
Oh, well that's fun.

00:34:35.070 --> 00:34:39.870
Let me quit this again and run it,
and hopefully...

00:34:41.940 --> 00:34:44.260
Oh, hey, it's off and running.

00:34:44.320 --> 00:34:45.670
Little UI glitch there.

00:34:45.750 --> 00:34:46.400
Sorry about that.

00:34:46.400 --> 00:34:48.080
So let's go ahead and pause.

00:34:48.080 --> 00:34:51.020
In fact, you've already seen that,
where we paused it and we came back,

00:34:51.120 --> 00:34:52.220
and it was still running.

00:34:52.220 --> 00:34:52.570
Yay.

00:34:52.900 --> 00:34:56.440
Let's actually terminate the app,
kill things off completely.

00:34:56.440 --> 00:34:58.800
And just for good measure,
let's even remove it from

00:34:58.870 --> 00:35:01.760
the multitasking tray
down here at the bottom.

00:35:01.820 --> 00:35:02.580
OK, so we left off.

00:35:02.640 --> 00:35:04.490
It was like 40%, I think it was.

00:35:04.580 --> 00:35:06.300
We go back,
we should see it significantly

00:35:06.300 --> 00:35:07.540
higher than that.

00:35:07.560 --> 00:35:10.800
And now we're at 65%. And really,
it was that simple.

00:35:10.820 --> 00:35:13.020
Just a few lines of calls,
and we're actually downloading

00:35:13.100 --> 00:35:15.480
content in the background,
and it continues,

00:35:15.500 --> 00:35:17.450
even when our app is not.

00:35:17.580 --> 00:35:18.860
So I hope you enjoy that.

00:35:18.930 --> 00:35:22.410
Thanks.

00:35:24.500 --> 00:35:25.100
Thanks.

00:35:25.130 --> 00:35:30.640
So, I'm going to invite Jon back up here
to tell us how do we then update

00:35:30.640 --> 00:35:34.180
the visuals on the home screen to
let the user know that we've now

00:35:34.180 --> 00:35:36.970
downloaded all this fantastic content.

00:35:39.150 --> 00:35:39.630
Thanks, Ben.

00:35:39.830 --> 00:35:40.970
How cool is that?

00:35:41.260 --> 00:35:43.940
I think your users are going to
love getting this data in the

00:35:44.000 --> 00:35:46.250
background while they sleep,
or whatever.

00:35:46.300 --> 00:35:49.770
So, I'm going to tell you about
updating your Newsstand icon.

00:35:49.770 --> 00:35:52.120
So,
now that you've got all this new content,

00:35:52.120 --> 00:35:53.280
you want to show it off.

00:35:53.420 --> 00:35:58.860
Well, part of getting new content is also
obtaining a new icon for your content.

00:35:58.860 --> 00:36:02.780
How you do this is entirely up to you,
but it's got to be part of that process.

00:36:03.100 --> 00:36:06.750
So, once your content's ready to view,
we want you to be able to show it off.

00:36:06.750 --> 00:36:09.200
Now, to do that, we have two ways.

00:36:09.200 --> 00:36:11.560
The first,
let's update your Newsstand icon.

00:36:11.560 --> 00:36:14.540
The second,
let's inform the reader that you have

00:36:14.540 --> 00:36:16.840
a new issue available via badging.

00:36:16.900 --> 00:36:20.020
So,
if your icon had looked like that before,

00:36:20.020 --> 00:36:22.980
when the user wakes up,
now they've got a new

00:36:22.980 --> 00:36:25.410
cover and a new tag,
or a new badge.

00:36:28.020 --> 00:36:29.140
Updating your icon.

00:36:29.170 --> 00:36:32.600
Well, publication covers play a huge
role in the physical Newsstand,

00:36:32.600 --> 00:36:34.520
and we've reiterated that
multiple times today.

00:36:34.520 --> 00:36:37.380
We want your icons to
do the same thing here.

00:36:37.380 --> 00:36:40.540
Your icon should reflect
your most recent content.

00:36:40.540 --> 00:36:43.660
We want the users to see at a glance
what they're going to get when they

00:36:43.790 --> 00:36:45.520
tap your app in the home screen.

00:36:46.760 --> 00:36:49.070
But don't show it until
the content is ready to go.

00:36:49.160 --> 00:36:52.860
Nothing would be more disappointing
than to see a new icon representing

00:36:52.960 --> 00:36:55.920
supposedly new content,
but to open your app and find nothing.

00:36:56.090 --> 00:36:57.940
So once you've got
your content available,

00:36:58.020 --> 00:36:59.920
then it's time to show off your icon.

00:36:59.970 --> 00:37:02.030
Now,
this will change the appearance of your

00:37:02.030 --> 00:37:04.040
app in Newsstand and the app switcher.

00:37:04.120 --> 00:37:07.420
It overrides the UI Newsstand
icon style that we talked about,

00:37:07.480 --> 00:37:09.730
but not your standard app icon.

00:37:10.630 --> 00:37:11.980
Now, how do we do this?

00:37:12.320 --> 00:37:15.000
Well, it's rather easy,
and we've added a single line

00:37:15.000 --> 00:37:19.000
API on UI application called
Set Newsstand Icon Image.

00:37:19.140 --> 00:37:21.060
However you get this image,
that's up to you.

00:37:21.320 --> 00:37:21.960
Make this call.

00:37:21.960 --> 00:37:24.880
We'll take care of the rest
and update your Newsstand icon.

00:37:25.020 --> 00:37:26.840
Furthermore,
you can do this in the background.

00:37:26.960 --> 00:37:30.550
So if we launch you for a content,
did finish downloading,

00:37:30.670 --> 00:37:32.660
and you're done processing,
that's fantastic.

00:37:32.770 --> 00:37:34.340
Go ahead and update your icon.

00:37:34.430 --> 00:37:35.200
We'll do it for you.

00:37:35.200 --> 00:37:38.910
You can suspend,
and the user won't have to do anything.

00:37:39.850 --> 00:37:42.740
On top of that,
you can now badge your app.

00:37:42.850 --> 00:37:45.010
And I say now badge your app.

00:37:45.050 --> 00:37:46.820
It's because we've given them a new look.

00:37:46.860 --> 00:37:49.770
What you see now is a new sash that
appears over the upper right-hand

00:37:49.840 --> 00:37:51.510
corner of your Newsstand icon.

00:37:51.650 --> 00:37:55.700
We want you to add a badge
when you've got new content

00:37:55.740 --> 00:37:59.190
that the user has not opened,
and then remove the badge when

00:37:59.190 --> 00:38:01.080
the user's read your content.

00:38:01.120 --> 00:38:04.680
Now, this API is exactly the same
as the existing badge API.

00:38:04.950 --> 00:38:09.280
You call UI application,
set application icon badge number.

00:38:09.310 --> 00:38:12.520
As with normal badging,
a non-zero value will show the sash,

00:38:12.550 --> 00:38:14.880
and a zero value will clear the sash.

00:38:14.920 --> 00:38:16.450
Now, we no longer show the count.

00:38:16.660 --> 00:38:18.360
You won't see one, two, three, four,
five.

00:38:18.420 --> 00:38:19.510
It just says new.

00:38:19.720 --> 00:38:23.700
But you can still use the count to
keep track of your unread issues.

00:38:26.020 --> 00:38:29.770
Now, I'll show you a very simple example
that will pull this all together.

00:38:29.940 --> 00:38:33.960
Let's say you're inside your connection
to finish downloading delegate method.

00:38:33.990 --> 00:38:37.250
Well, we've got one asset,
and it just finished.

00:38:37.370 --> 00:38:40.180
So we're going to pull the issue
out for that asset by getting

00:38:40.190 --> 00:38:44.080
the downloading assets issue,
and then getting the issues content URL,

00:38:44.090 --> 00:38:46.720
and building a path to
where we're going to put it.

00:38:46.750 --> 00:38:47.630
We move it into place.

00:38:47.710 --> 00:38:49.240
You just saw Ben do this.

00:38:49.280 --> 00:38:50.520
Very simple.

00:38:50.550 --> 00:38:52.680
The next step, get your icon image.

00:38:52.680 --> 00:38:55.020
Again,
how you do this is entirely up to you.

00:38:55.040 --> 00:38:58.860
I added a helper method here that pulls
it out of my issue wherever you store it.

00:38:58.900 --> 00:39:00.660
That's yours.

00:39:00.680 --> 00:39:02.820
Once you've got that,
you can just call a new API.

00:39:03.000 --> 00:39:04.460
Set Newsstand icon image.

00:39:04.700 --> 00:39:07.980
And here, I'm updating the badge by
incrementing it by one.

00:39:08.010 --> 00:39:08.700
That's it.

00:39:08.720 --> 00:39:10.580
You've just updated your Newsstand icon.

00:39:10.610 --> 00:39:13.670
And to show you how easy this is,
I will do a demo.

00:39:15.320 --> 00:39:19.360
All right, here we've got Ben's program
that he was just working on.

00:39:19.480 --> 00:39:22.540
What I'm going to do
is modify it slightly.

00:39:22.570 --> 00:39:25.750
I'm going to change the download of
his content to just download an icon.

00:39:25.970 --> 00:39:27.930
We don't need the whole thing.

00:39:28.150 --> 00:39:31.990
Icon request, icon file name.

00:39:32.040 --> 00:39:35.090
I'll scroll down here to the bottom into
my connection did finish downloading,

00:39:35.140 --> 00:39:37.090
and I'm going to add
just a few lines of code.

00:39:37.240 --> 00:39:39.660
The first, let's get my image.

00:39:39.980 --> 00:39:43.650
I know my download is an icon, a PNG,
so I'm going to say UI image,

00:39:43.700 --> 00:39:47.260
image with contents of file,
and the path where

00:39:47.260 --> 00:39:50.370
I just moved my download.

00:39:51.850 --> 00:39:54.960
I'm going to update the Newsstand
icon and badge by calling the

00:39:54.960 --> 00:39:58.040
new API setNewsstandIconImage
with my new cover art,

00:39:58.070 --> 00:40:00.470
and then incrementing the badge by one.

00:40:00.580 --> 00:40:02.620
Save, run.

00:40:02.640 --> 00:40:07.800
Let's clear that existing download.

00:40:07.860 --> 00:40:09.720
We don't care anymore.

00:40:09.790 --> 00:40:11.630
I'll start a new one.

00:40:20.850 --> 00:40:22.220
It looked like it finished already.

00:40:22.230 --> 00:40:25.030
And there's our new
icon with the new badge.

00:40:25.080 --> 00:40:26.750
And that's it.

00:40:33.750 --> 00:40:35.680
So what have we learned today?

00:40:35.820 --> 00:40:38.480
The first thing was how
to become a Newsstand app.

00:40:38.550 --> 00:40:40.770
All you have to do,
update your info P list,

00:40:40.990 --> 00:40:43.960
add a Newsstand icon, good to go.

00:40:44.120 --> 00:40:47.000
The second part was getting
content updates in the background.

00:40:47.120 --> 00:40:49.200
There's a new push
notification type for you,

00:40:49.200 --> 00:40:52.840
and a new background mode that allows you
to be launched without user interaction

00:40:52.840 --> 00:40:55.160
to begin your content downloads.

00:40:55.230 --> 00:40:57.200
The third part was all
about Newsstand Kit,

00:40:57.270 --> 00:40:59.400
and how you can use it
to organize your content,

00:40:59.490 --> 00:41:03.250
and how it can help you download
assets in the background.

00:41:03.350 --> 00:41:05.500
Now, there are two points I want
to reiterate here briefly,

00:41:05.500 --> 00:41:10.570
is that you always have to reconnect
your downloading assets when you launch.

00:41:10.650 --> 00:41:14.270
You just have to do this so that we can
send you the messages about their status.

00:41:14.500 --> 00:41:17.710
The second is let Newsstand Kit know
about the currently reading issue.

00:41:17.840 --> 00:41:20.980
This will help us effectively
manage the user's caches.

00:41:21.030 --> 00:41:23.570
Lastly,
once you've got this awesome new content,

00:41:23.740 --> 00:41:26.650
update your Newsstand icon and
your badge to tell the user the

00:41:26.810 --> 00:41:29.660
next time they open their device,
they'll see Newsstand,

00:41:29.660 --> 00:41:32.920
and they'll see your new content,
ready to go.

00:41:33.940 --> 00:41:37.190
For more information,
you can contact Vicki Murley.

00:41:37.360 --> 00:41:39.940
We have documentation,
although I don't have a link to it here.

00:41:39.940 --> 00:41:42.260
If you go to the dev portal
and search for Newsstand,

00:41:42.320 --> 00:41:45.510
you'll see the Newsstand
kit documentation come up.

00:41:45.990 --> 00:41:47.840
We have some related sessions.

00:41:47.910 --> 00:41:51.040
We're also doing this particular
session again on Thursday,

00:41:51.040 --> 00:41:55.120
if for some reason you want
to come back and see us again.

00:41:55.180 --> 00:41:57.840
App publishing with
iTunes is next Thursday.

00:41:58.100 --> 00:42:00.660
Local and push notifications,
also on Thursday.

00:42:00.660 --> 00:42:02.880
And multitasking,
helpfully at the same time as

00:42:02.880 --> 00:42:05.220
the push notification session.