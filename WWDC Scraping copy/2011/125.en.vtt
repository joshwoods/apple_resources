WEBVTT

00:00:12.970 --> 00:00:14.800
Good afternoon.

00:00:14.950 --> 00:00:19.130
My name is Jason Beaver and
I work on the iOS Frameworks team.

00:00:19.300 --> 00:00:32.200
[Transcript missing]

00:00:33.760 --> 00:00:34.820
So this won't be an intro session.

00:00:34.820 --> 00:00:37.380
We're not going to cover
the basics of a table view,

00:00:37.380 --> 00:00:40.410
how to get content into
it and things like that.

00:00:40.820 --> 00:00:43.780
This talk is going to be
broken into two main areas.

00:00:43.790 --> 00:00:45.800
The first is what's new.

00:00:45.800 --> 00:00:47.490
There's a handful of topics here.

00:00:47.690 --> 00:00:50.230
First is automatic dimensions.

00:00:51.350 --> 00:00:54.330
This will allow you to tell the
TableView to automatically compute some

00:00:54.340 --> 00:01:00.700
dimensions in cases where you need to
provide custom dimensions in other cases.

00:01:01.490 --> 00:01:04.800
There's a new automatic animation
style which just tells the table view

00:01:05.000 --> 00:01:09.390
to figure out an appropriate animation
that will automatically look good.

00:01:09.960 --> 00:01:11.970
and there's a couple of new update
methods to go along with the

00:01:12.000 --> 00:01:17.450
existing methods we have to insert,
delete and reload rows and sections.

00:01:18.600 --> 00:01:22.640
We've exposed the ability for you to
attach menus to the cells in your table

00:01:22.660 --> 00:01:26.170
view as well as multiple selection.

00:01:28.800 --> 00:01:32.080
We have a great new mechanism that
allows you to simplify the code you

00:01:32.090 --> 00:01:37.040
need to write when you're adding or
providing cells to the table view.

00:01:37.090 --> 00:01:41.120
And even a new mechanism that
allows you to eliminate all the

00:01:41.120 --> 00:01:44.760
code related to providing content
to the table view if all you need to

00:01:44.760 --> 00:01:47.950
do is display some static content.

00:01:48.260 --> 00:01:51.000
And then as I mentioned,
we're going to cover

00:01:51.000 --> 00:01:52.350
some tips and tricks.

00:01:52.580 --> 00:01:56.190
So let's start with what's
new and automatic dimensions.

00:01:58.120 --> 00:02:02.430
So as hopefully you know,
the TableView supports the ability to

00:02:02.430 --> 00:02:05.800
do custom section headers and footers.

00:02:06.170 --> 00:02:11.860
In addition to just specifying a
title for a section header or footer.

00:02:11.950 --> 00:02:17.810
And if all of your doing is
displaying section header titles

00:02:18.200 --> 00:02:21.460
for your headers and footers,
then the table can figure out the height

00:02:21.470 --> 00:02:25.870
of those things so that we preserve the
appropriate spacing between the sections.

00:02:26.900 --> 00:02:33.420
But if you are using custom headers
and footers in your sections,

00:02:33.420 --> 00:02:35.360
you need to implement
this delegate method,

00:02:35.380 --> 00:02:38.950
TableViewHeightForHeaderInSection,
or the corresponding footer method,

00:02:38.950 --> 00:02:43.430
so you can tell the TableView up
front how big this thing needs to be.

00:02:44.540 --> 00:02:48.500
An unfortunate side effect of
this is that that means that up

00:02:48.500 --> 00:02:53.740
until now we're also going to
ask you for the height of titles.

00:02:53.790 --> 00:02:56.790
And you had to guess an
appropriate height to preserve

00:02:56.800 --> 00:02:59.470
the standard table view metrics.

00:03:00.770 --> 00:03:06.030
So new in iOS 5.0 is a new constant,
UI TableViewAutomaticDimension.

00:03:06.150 --> 00:03:10.090
For any of the methods where we're
asking the delegate to provide

00:03:10.160 --> 00:03:13.390
some dimension to the table view,
the height of a header for example,

00:03:13.510 --> 00:03:17.140
you can just return this and
we'll use our own calculations

00:03:17.140 --> 00:03:19.060
to figure out what that is.

00:03:26.300 --> 00:03:30.460
All right, let's move on to
automatic animation style.

00:03:30.460 --> 00:03:35.980
So if you have a group style table view,
we have these nice rounded

00:03:36.120 --> 00:03:38.900
rectangles around each of the rows.

00:03:38.900 --> 00:03:42.540
And each of the individual
cells draw pieces of those.

00:03:42.570 --> 00:03:45.600
So to preserve the illusion of
that single rounded rectangle,

00:03:45.600 --> 00:03:49.270
we have to be a little bit careful
about the animation style that

00:03:49.270 --> 00:03:53.640
we use when we're inserting or
deleting rows into a section.

00:03:53.640 --> 00:03:56.210
So for example here,
we're inserting a row

00:03:56.300 --> 00:03:58.880
at the top of a section,
and we need to be careful that we

00:03:58.950 --> 00:04:02.900
use the bottom animation style so
that that row will appear to slide

00:04:02.900 --> 00:04:06.390
out from beneath the rows that
come after it in the table view.

00:04:06.420 --> 00:04:10.460
And similarly, if we're deleting a row
at the top of a section,

00:04:10.460 --> 00:04:12.670
we have to use the bottom
animation style so that,

00:04:12.670 --> 00:04:16.790
again, it will slide out beneath
the rows that come after it.

00:04:17.130 --> 00:04:21.230
Conversely, if we are inserting a row
at the bottom of a section,

00:04:21.230 --> 00:04:24.770
we need to make sure we use the top
animation style because we want that row

00:04:24.820 --> 00:04:29.380
to appear to come out from beneath the
rows that preceded in the table view.

00:04:30.240 --> 00:04:33.080
and similarly when we delete,
we need to use the top

00:04:33.080 --> 00:04:34.420
animation style in that case.

00:04:34.500 --> 00:04:36.900
So we have to be a little bit careful.

00:04:36.960 --> 00:04:39.100
And if we get this wrong,
we can actually make the

00:04:39.160 --> 00:04:40.240
table view look pretty bad.

00:04:40.240 --> 00:04:43.470
We break that visual illusion
of the rounded rectangle

00:04:43.470 --> 00:04:44.640
that surrounds the section.

00:04:44.690 --> 00:04:46.310
Here for example,
if we insert at the top of a

00:04:46.330 --> 00:04:50.990
table view and inadvertently
use the top animation style,

00:04:51.350 --> 00:04:53.700
You'll see that that,
we've told it that that row should appear

00:04:53.830 --> 00:04:55.840
prior to its spot in the table view.

00:04:55.840 --> 00:04:58.810
Well that actually happens to be behind
the header there and you see part of

00:04:58.810 --> 00:05:00.380
it clipped and that looks pretty bad.

00:05:00.530 --> 00:05:04.250
Here's what it looks like if we
delete a row at the top and you

00:05:04.290 --> 00:05:06.720
specify the top animation style.

00:05:07.780 --> 00:05:10.700
and similarly if we're inserting
a row at the bottom of the

00:05:10.720 --> 00:05:15.060
TableView and we inadvertently
specify the bottom animation style,

00:05:15.060 --> 00:05:17.580
that row will again appear below
where it's going to go because

00:05:17.580 --> 00:05:19.240
that's what we've told it to do.

00:05:19.270 --> 00:05:22.030
She'll be behind a header
and look pretty bad.

00:05:22.710 --> 00:05:25.260
Here's what it looks like
if you inadvertently delete

00:05:25.270 --> 00:05:29.100
from the bottom again,
specify the bottom animation style.

00:05:29.140 --> 00:05:31.100
So you need to be a little bit
careful and this can get kind of

00:05:31.150 --> 00:05:34.800
complicated as you're doing lots
of changes to your table view.

00:05:34.860 --> 00:05:38.280
So new in iOS 5.0 is a new
row animation style called

00:05:38.760 --> 00:05:41.100
UI TableViewRowAnimationAutomatic.

00:05:41.130 --> 00:05:43.870
So this tells the table view that
depending on the style of the

00:05:43.870 --> 00:05:47.600
table view and where in the table
view you're making these updates,

00:05:47.680 --> 00:05:52.580
we'll pick an appropriate animation
style which will always look good.

00:05:52.950 --> 00:05:55.720
And I encourage you to
just use this generally.

00:05:55.720 --> 00:05:59.300
Unless you have a really good
reason to cause an animation

00:05:59.300 --> 00:06:02.720
to move in a certain direction,
Automatic is probably a better choice

00:06:02.720 --> 00:06:05.180
and it'll look more consistent with
other applications on the platform.

00:06:11.020 --> 00:06:15.020
All right, let's move on to a couple
of new update methods.

00:06:15.170 --> 00:06:17.940
So as we just talked about
and hopefully you know,

00:06:17.980 --> 00:06:22.110
we have ability to insert rows into
TableViews as well as sections.

00:06:22.200 --> 00:06:24.180
We have ability to delete rows.

00:06:24.180 --> 00:06:28.500
And of course we can wrap these in
an update block that allows you to

00:06:28.500 --> 00:06:31.790
insert and delete rows simultaneously.

00:06:32.400 --> 00:06:55.300
[Transcript missing]

00:06:55.700 --> 00:06:58.170
So new in iOS 5.0,
we've had the ability to do this.

00:06:58.200 --> 00:07:00.920
This is what it looks like
if we're moving a section

00:07:00.990 --> 00:07:01.900
from one location to another.

00:07:01.900 --> 00:07:05.820
Here we're going to exchange
the first two sections.

00:07:05.820 --> 00:07:09.120
You see they just simply
slide into the new location.

00:07:09.190 --> 00:07:18.700
And the method to accomplish
this is move section to section.

00:07:21.950 --> 00:07:25.460
So this augments the existing
update methods we have for sections

00:07:25.500 --> 00:07:30.460
and that is allows you to insert,
delete and reload individual sections.

00:07:30.500 --> 00:07:34.000
But there's a couple of things I want
to point out that are different.

00:07:34.030 --> 00:07:37.880
The existing methods
take a set of sections,

00:07:37.910 --> 00:07:42.500
but the new method simply takes a
single before and after section.

00:07:43.220 --> 00:07:45.880
The second is that the existing
methods take a row animation

00:07:46.260 --> 00:07:50.500
parameter that we just talked about
and notice that the new one doesn't.

00:07:50.620 --> 00:07:53.030
This is because there really isn't
an animation that makes sense.

00:07:53.100 --> 00:07:55.350
The row is automatically just
going to slide from its old

00:07:55.420 --> 00:07:56.620
location to the new location.

00:07:56.620 --> 00:08:00.450
So any of the animation styles
like fade or moving left or

00:08:00.450 --> 00:08:02.810
right don't really make sense.

00:08:05.100 --> 00:08:08.040
And similarly,
we have a new method to move rows

00:08:08.120 --> 00:08:09.140
from one location to another.

00:08:09.200 --> 00:08:11.710
Here we're going to
exchange rows one and two.

00:08:11.710 --> 00:08:15.240
But of course,
you can move rows even between sections.

00:08:15.310 --> 00:08:20.290
And the method to accomplish this is
move row at index path to index path.

00:08:22.550 --> 00:08:26.690
And this augments the existing
methods to modify individual rows

00:08:26.740 --> 00:08:30.650
within a table view to insert,
delete and reload.

00:08:31.180 --> 00:08:34.890
And similarly,
the existing methods take arrays of

00:08:34.900 --> 00:08:39.610
index paths while the new method takes a
single source and destination index path.

00:08:40.600 --> 00:08:43.240
and the existing methods take a row
animation property and for the same

00:08:43.240 --> 00:08:45.930
reasons the new method doesn't.

00:08:47.460 --> 00:08:50.010
So with that, I'd like to bring
Luke Hiesterman up on stage,

00:08:50.020 --> 00:08:53.030
and he'll demo some of the stuff
we've talked about up till now.

00:08:59.000 --> 00:09:00.400
Luke Beaver, Luke Thank you, Jason.

00:09:00.490 --> 00:09:03.600
It's great new stuff that we
have in iOS 5.0 for TableView.

00:09:03.600 --> 00:09:08.680
I think some of our applications that
you guys create for us are going to

00:09:08.680 --> 00:09:12.550
be able to be expanded in wonderful,
new, delightful ways.

00:09:12.560 --> 00:09:17.120
So, I'd like to show you an
example of adding moves to your

00:09:17.120 --> 00:09:19.740
TableView now that we can do that.

00:09:20.010 --> 00:09:24.310
And to do so,
I've pretty much downloaded an

00:09:24.530 --> 00:09:29.000
app from developer.apple.com,
a sample code that we showed

00:09:29.000 --> 00:09:32.480
at last year's session and
I modified it ever so slightly.

00:09:32.650 --> 00:09:36.250
And I would like to re-show
you that again today,

00:09:36.380 --> 00:09:39.600
but introduce this idea of doing moves.

00:09:39.780 --> 00:09:44.870
So this application that some of
you may have seen before allows us

00:09:45.090 --> 00:09:49.750
to click on sections and open them
up in a way that demonstrates using

00:09:49.800 --> 00:09:53.180
the insert and deletion of rows.

00:09:53.180 --> 00:09:55.820
So you can see me doing that here.

00:09:55.880 --> 00:10:00.800
But now what I'm interested in
doing is sorting these sections.

00:10:00.810 --> 00:10:06.320
These Shakespeare plays are sort
of all in random order right now.

00:10:06.370 --> 00:10:09.610
But I thought it would be
interesting if I could move them

00:10:09.610 --> 00:10:11.920
into alphabetical order dynamically.

00:10:11.960 --> 00:10:16.040
And to do that I've added this little
toggle sort button to the navigation bar.

00:10:16.100 --> 00:10:19.080
But it doesn't do anything right now
because I haven't written that code yet.

00:10:19.260 --> 00:10:22.650
So I'd like to show you how I would
actually write that code and make

00:10:23.090 --> 00:10:25.520
the table view do some moves.

00:10:25.680 --> 00:10:26.960
So here's my method, ToggleSort.

00:10:26.960 --> 00:10:29.100
I've started doing some things.

00:10:29.160 --> 00:10:35.450
And the code that is here already
is the code that updates my model.

00:10:35.790 --> 00:10:38.400
My model is an array of plays.

00:10:38.420 --> 00:10:41.120
And in fact,
the way that this application works

00:10:41.120 --> 00:10:46.140
is I decide to keep a couple of
representations of the array of plays.

00:10:46.220 --> 00:10:49.640
One is just plays,
and the other one is alphabetical plays,

00:10:49.640 --> 00:10:53.300
which is the new state that
I'm going to try to move to.

00:10:53.610 --> 00:10:57.070
...or from depending on
which way I'm toggling.

00:10:57.240 --> 00:11:03.380
So the update of my model simply
takes the current array and the

00:11:03.380 --> 00:11:07.640
existing array so we know where we're
coming from and where we're going to.

00:11:07.870 --> 00:11:12.630
And then switches a property on myself
so I know whether I'm alphabetized so

00:11:12.680 --> 00:11:16.550
I can return the right things from,
you know, self row and index path and

00:11:16.870 --> 00:11:18.320
number of rows and sections.

00:11:18.340 --> 00:11:19.740
And those sorts of things.

00:11:19.740 --> 00:11:23.010
So now that I've updated my model,
I want to go actually tell the table

00:11:23.050 --> 00:11:28.120
view about these moves so we can initiate
the animation that we all want to see.

00:11:28.410 --> 00:11:31.520
So we're going to start with something
that hopefully we're familiar with,

00:11:31.560 --> 00:11:34.350
a TableView update block.

00:11:34.640 --> 00:11:38.100
Let's begin updates,
ended by end updates.

00:11:38.150 --> 00:11:41.890
And in the middle,
what we're going to attempt to do

00:11:41.940 --> 00:11:47.660
is take the old representation of
our sections and map it to the new

00:11:47.660 --> 00:11:49.820
representation of our sections.

00:11:49.860 --> 00:11:53.950
And then for each of those mappings,
we'll simply tell the table view to move

00:11:54.350 --> 00:11:57.380
from the old mapping to the new mapping.

00:11:57.990 --> 00:12:00.500
So I have two arrays,
the array that represents

00:12:00.720 --> 00:12:04.000
my current state,
it's a current array,

00:12:04.000 --> 00:12:07.540
and a new array which represents
the state that I want to go to.

00:12:07.570 --> 00:12:13.010
So I'm going to iterate through each
of these arrays to find the mapping.

00:12:13.060 --> 00:12:17.880
So my first iteration is
through the current array.

00:12:17.950 --> 00:12:21.620
I'll enumerate these objects
using the block-based method.

00:12:21.660 --> 00:12:25.740
And for each one of these plays,
I want to find its matching array in

00:12:25.740 --> 00:12:27.940
the new representation of the table.

00:12:27.950 --> 00:12:33.140
So I'm going to iterate through
those objects in the new array.

00:12:33.300 --> 00:12:35.590
That's fine, don't worry about that.

00:12:41.300 --> 00:12:44.620
Nothing to see.

00:12:44.690 --> 00:12:48.540
So we iterate through the
instances of the new array,

00:12:48.550 --> 00:12:53.870
and what we're looking for is
the instance that matches what

00:12:53.870 --> 00:12:56.460
we had in the current array.

00:12:56.460 --> 00:13:02.770
So we look for that with a simple
test to see if the new play

00:13:02.770 --> 00:13:06.200
is equal to the current play,
and if so,

00:13:06.200 --> 00:13:11.980
then I found my mapping for this
particular instance of the current array.

00:13:11.980 --> 00:13:15.740
And I just want to tell the
TableView about that mapping now.

00:13:15.740 --> 00:13:21.420
I'll do that by using the
moveSectionToSection API that

00:13:21.490 --> 00:13:23.040
we've just introduced.

00:13:23.040 --> 00:13:28.820
And it's as simple as giving it the
index where that section is currently,

00:13:28.830 --> 00:13:31.860
and then the new mapping,
the index in the new array,

00:13:31.860 --> 00:13:35.760
the new representation of the
table that we want it to move to.

00:13:36.800 --> 00:13:40.300
I'll give the block version
of the break command here,

00:13:40.300 --> 00:13:43.820
which is stop enumerating
new array equals yes.

00:13:43.820 --> 00:13:44.770
And then we're done.

00:13:44.770 --> 00:13:46.160
We found our mapping for that one.

00:13:46.160 --> 00:13:48.620
And since we're enumerating
through the current array,

00:13:48.620 --> 00:13:51.820
we'll do that for each
instance in the array.

00:13:51.830 --> 00:13:53.740
And this is within our update block.

00:13:53.770 --> 00:13:57.390
So each of these mappings that
we've enumerated through each

00:13:57.450 --> 00:14:01.840
gets sent to the table view as
a part of a single update block.

00:14:01.850 --> 00:14:03.980
And we're done.

00:14:04.010 --> 00:14:11.220
We can now take a look at this
in action by coming to our play.

00:14:11.330 --> 00:14:14.170
And now if we try to toggle sorts,

00:14:14.550 --> 00:14:17.290
All of those sections
move into their new place.

00:14:17.450 --> 00:14:23.080
We can, even if sections have
rows showing in them,

00:14:23.080 --> 00:14:25.520
we can still sort them.

00:14:25.520 --> 00:14:27.810
New things happen.

00:14:29.040 --> 00:14:32.080
Sorting of sections just works.

00:14:32.100 --> 00:14:33.890
We can do this, of course,
with rows as well,

00:14:33.900 --> 00:14:36.920
even moving rows in between
sections if we want.

00:14:37.140 --> 00:14:40.470
Whatever moves you want to do,
the TableView is ready and

00:14:40.470 --> 00:14:42.200
waiting to accommodate them.

00:14:42.200 --> 00:14:45.890
And in fact,
you can incorporate insertions

00:14:45.900 --> 00:14:49.820
and deletions and reloads along
with your moves all in the

00:14:49.820 --> 00:14:52.160
same update box if you wish.

00:14:52.660 --> 00:14:56.890
So that's using the
new TableView Move API.

00:14:56.890 --> 00:15:00.630
And we've got a few
more new things for you.

00:15:00.650 --> 00:15:06.290
And Jason will be happy
to tell you about those.

00:15:10.760 --> 00:15:11.700
Thanks Luke.

00:15:11.700 --> 00:15:12.700
Ah, water.

00:15:12.870 --> 00:15:18.820
All right,
so let's talk about menu support.

00:15:20.530 --> 00:15:23.460
I'm sure you've seen in some of our
built-in applications the ability to

00:15:23.540 --> 00:15:26.760
attach a menu to an individual cell.

00:15:26.900 --> 00:15:31.500
We've exposed this now in iOS 5.0 so you
can do this in your own applications.

00:15:31.570 --> 00:15:33.100
And here's basically the way this works.

00:15:33.100 --> 00:15:36.060
The user's finger comes
down and touches a cell,

00:15:36.130 --> 00:15:38.820
and we highlight it just
like we've always done.

00:15:38.940 --> 00:15:43.210
But if the user holds their finger on
the cell for a fraction of a second,

00:15:43.500 --> 00:15:48.320
We're going to send a new delegate
method called TableViewShouldShowMenu

00:15:48.320 --> 00:15:50.090
for RowItIndexPath.

00:15:50.810 --> 00:15:54.210
So if you return yes from this,
then we're going to

00:15:54.240 --> 00:15:58.260
send another new method,
TableView can perform action for

00:15:58.260 --> 00:16:00.700
row and index path with sender.

00:16:00.700 --> 00:16:04.470
We're going to call that multiple times,
once for each of the possible

00:16:04.550 --> 00:16:06.490
actions that might be in that menu.

00:16:06.710 --> 00:16:09.670
Of course,
this has a Boolean return value as well,

00:16:09.740 --> 00:16:12.700
and so you can indicate for each one
of those actions whether you want to

00:16:12.700 --> 00:16:14.690
support that at that point in time.

00:16:15.180 --> 00:16:16.700
So after we've called
this multiple times,

00:16:16.700 --> 00:16:19.930
we collect all the ones that
you've returned yes for,

00:16:19.930 --> 00:16:24.760
and then we pop the menu
up attached to the cell.

00:16:24.900 --> 00:16:28.530
So at this point the user can take their
finger off the screen and that'll stay.

00:16:29.760 --> 00:16:32.640
They come up and then
and touch the menu item.

00:16:32.690 --> 00:16:36.140
We're gonna set the third and
final new method to the delegate.

00:16:36.190 --> 00:16:39.040
TableView perform action
for row and index path.

00:16:39.040 --> 00:16:41.450
And at this point you're expected
to do whatever the action says,

00:16:41.500 --> 00:16:43.840
copy, paste, et cetera.

00:16:44.120 --> 00:16:46.520
and once you return from this method,
we're going to go ahead and tear

00:16:46.520 --> 00:16:49.110
down the menu and deselect the row.

00:16:52.110 --> 00:16:55.160
All right,
let's move on to multiple selection.

00:16:55.190 --> 00:16:58.540
So this is our built-in mail application,
and we introduced the ability

00:16:58.580 --> 00:17:01.640
for this to have multiple
selection a little while ago.

00:17:01.670 --> 00:17:03.700
But now we're exposing this so
you can add multiple selection

00:17:03.700 --> 00:17:05.850
into your applications.

00:17:09.100 --> 00:17:12.000
A long time coming, I know.

00:17:12.000 --> 00:17:14.700
So you control this
with two new properties.

00:17:14.700 --> 00:17:19.100
They are allows multiple selection and
allows multiple selection during editing.

00:17:19.170 --> 00:17:22.460
And this augments the existing
properties to control selection

00:17:22.470 --> 00:17:25.080
called allows selection and
allows selection during editing.

00:17:25.290 --> 00:17:28.020
So you can use really any
combination you'd like here.

00:17:28.020 --> 00:17:30.730
For example, in mail,
they turn on allow selection,

00:17:30.730 --> 00:17:34.370
which allows single selection when
they're not in editing mode and allows

00:17:34.400 --> 00:17:36.500
multiple selection during editing.

00:17:36.520 --> 00:17:39.540
So automatically when
they go into editing mode,

00:17:39.540 --> 00:17:42.180
they get the multi-select interface.

00:17:43.070 --> 00:17:45.640
There's also an additional
property on the TableView,

00:17:45.700 --> 00:17:49.440
index paths for selected row,
which you might guess returns

00:17:49.580 --> 00:17:51.430
everything that's selected.

00:17:51.480 --> 00:17:55.080
And this augments the existing
method to get a single index

00:17:55.080 --> 00:17:57.270
path for a single selected row.

00:17:58.340 --> 00:18:01.200
We also added a new property
to TableView's cell,

00:18:01.200 --> 00:18:04.530
and that is multiple
selection background view.

00:18:05.210 --> 00:18:08.830
This augments the existing property
that allows you to specify the

00:18:08.830 --> 00:18:10.900
selected background view on the cell.

00:18:10.900 --> 00:18:14.190
Let's cover briefly what the view
hierarchy looks like in a cell.

00:18:14.260 --> 00:18:16.810
We've reused this graphic
from a previous year,

00:18:16.830 --> 00:18:18.790
so hopefully you remember this.

00:18:18.840 --> 00:18:22.630
At the back of the view
hierarchy is the cell itself.

00:18:23.060 --> 00:18:25.390
And if you have a background view,
that's going to sit

00:18:25.390 --> 00:18:26.660
right in front of that.

00:18:26.660 --> 00:18:28.280
And you can obviously draw
anything you want there.

00:18:28.280 --> 00:18:33.010
In fact, that's how we draw those rounded
rectangles in group style table views.

00:18:33.830 --> 00:18:39.120
If the cell happens to be selected,
then we're going to add the

00:18:39.120 --> 00:18:43.490
selected background view on
top of that background view.

00:18:43.700 --> 00:18:45.830
So this is typically
just that blue gradient,

00:18:45.830 --> 00:18:47.360
or it's, you know,
blue gradient with the sort of

00:18:47.360 --> 00:18:50.030
rounded corners in a group style case.

00:18:50.270 --> 00:18:54.260
And then on top of that is the
content view and all of your views.

00:18:54.270 --> 00:18:57.840
So this is how we make that blue
gradient appear behind everything.

00:18:58.250 --> 00:19:01.020
Multiple selection is pretty
much exactly the same thing.

00:19:01.020 --> 00:19:04.190
The only difference is that
we use that multiple selection

00:19:04.200 --> 00:19:07.840
background view and then stick all
the rest of your content on top.

00:19:07.950 --> 00:19:13.790
We do provide default multiple selection
background views for both the editing

00:19:13.790 --> 00:19:15.400
case and the not in editing case.

00:19:15.400 --> 00:19:20.090
And so in the editing case,
you can achieve the exact

00:19:20.090 --> 00:19:22.620
same look you get in mail.

00:19:22.640 --> 00:19:25.590
Okay,
let's move on to automatic cell loading.

00:19:28.870 --> 00:19:30.380
If you work with TableViews,
I'm sure you're very

00:19:30.380 --> 00:19:31.600
familiar with code like this.

00:19:31.600 --> 00:19:35.060
This is the TableView cell for row and
index path method and this is the way

00:19:35.140 --> 00:19:40.460
you tell the TableView all of the content
that should appear in your TableView.

00:19:40.480 --> 00:19:43.580
And there's sort of
several main areas of this.

00:19:44.100 --> 00:19:47.000
The first is you need to figure out
what the reuse identifier is for the row

00:19:47.000 --> 00:19:49.040
that the TableView is asking you about.

00:19:49.160 --> 00:19:52.040
Now in simple TableViews,
this is probably just a constant,

00:19:52.060 --> 00:19:56.120
but in more complex TableViews where
different cells in the TableView have

00:19:56.120 --> 00:19:58.700
different structure to them,
you know, some may have a switch,

00:19:58.700 --> 00:20:01.600
some may have a slider,
some may have an editable text field,

00:20:01.710 --> 00:20:06.620
you need to make sure you use different
reuse identifiers for each style of

00:20:06.700 --> 00:20:11.490
cell so that you can get an appropriate
one to reuse from the TableView.

00:20:11.550 --> 00:20:13.740
So this is some method that you'd
implement that figures that out

00:20:13.840 --> 00:20:15.930
based on what's in your model.

00:20:16.380 --> 00:20:19.650
And then the next thing you're going
to do is ask the TableView to dequeue

00:20:19.660 --> 00:20:24.810
a reusable cell with that identifier.

00:20:25.300 --> 00:20:27.360
So if we have one,
we will return that to you there

00:20:27.360 --> 00:20:29.200
and then you can just populate it,
which saves time.

00:20:29.200 --> 00:20:31.200
You don't have to create the cell.

00:20:31.200 --> 00:20:34.690
But there's always the possibility that
that method returns nil because we don't

00:20:34.690 --> 00:20:36.710
have one in the reuse queue right now.

00:20:37.490 --> 00:20:41.250
And if that happens, you need to make,
you have to create a cell

00:20:41.250 --> 00:20:42.580
of that appropriate form.

00:20:42.580 --> 00:20:45.100
And in a complex case like this,
it may be actually quite a lot of

00:20:45.150 --> 00:20:48.350
code that creates cells for all
the different styles that you're

00:20:48.350 --> 00:20:51.160
going to display in your TableView.

00:20:51.220 --> 00:20:55.760
What if we could just take all
of that code and make it go away?

00:21:03.430 --> 00:21:06.090
So new in iOS 5.0,
we have a method called

00:21:06.100 --> 00:21:09.790
registerNibForCellReuseIdentifier.

00:21:16.110 --> 00:21:20.030
So there's a couple of constraints I want
to mention on the nib that you register.

00:21:20.210 --> 00:21:24.480
The first is that the nib must
contain a single top-level object,

00:21:24.480 --> 00:21:28.570
and that must be a TableView cell
or one of your subclasses.

00:21:29.150 --> 00:21:33.910
and the second is that the cells reuse
identifier as specified in the nib

00:21:34.080 --> 00:21:38.960
either must match the identifier passed
into the registration method or you

00:21:39.010 --> 00:21:42.850
can leave it nil in which case we'll
fill that in automatically for you.

00:21:44.920 --> 00:21:48.980
So now when you call dequeue
reusable cell with reuse identifier,

00:21:48.980 --> 00:21:50.930
you're guaranteed to get a cell back.

00:21:50.930 --> 00:21:54.130
Obviously we'll still prefer to return
one from the reuse queue because that

00:21:54.210 --> 00:21:58.060
has the lowest cost and therefore the
highest performance in your application.

00:21:58.100 --> 00:22:01.740
But if we don't find one,
we'll automatically go load that nib,

00:22:01.880 --> 00:22:04.350
extract the cell and return it to you.

00:22:07.700 --> 00:22:10.700
Okay,
let's move on to static table views.

00:22:10.700 --> 00:22:15.690
So there's a lot of cases when you're
adding table views to your application

00:22:16.060 --> 00:22:17.190
where it doesn't need to be dynamic.

00:22:17.250 --> 00:22:21.040
It's not based on some model
that the user can change.

00:22:21.040 --> 00:22:24.030
You just need to display
a static set of things.

00:22:24.190 --> 00:22:26.860
Here, for example,
is our settings application.

00:22:26.870 --> 00:22:29.360
When you go into settings,
you always see this basic set of things,

00:22:29.360 --> 00:22:32.110
and it's always the same,
with the exception of some

00:22:32.110 --> 00:22:33.020
of the components inside.

00:22:33.020 --> 00:22:34.600
I mean,
your switches may have different states,

00:22:34.600 --> 00:22:36.170
and text fields may
have different values,

00:22:36.230 --> 00:22:40.120
but it's always the same
cell with the same structure.

00:22:40.140 --> 00:22:44.560
Here's another example from settings
where we're configuring sounds.

00:22:44.600 --> 00:22:46.870
And again, it's always the same things.

00:22:47.030 --> 00:22:48.570
So we're not going to go
into the specifics of how

00:22:48.570 --> 00:22:52.360
you do this this afternoon,
but this was covered in depth

00:22:52.530 --> 00:22:54.720
in the session yesterday,
introducing Interface

00:22:54.720 --> 00:22:57.320
Builder storyboarding,
as well as a bunch of great new features

00:22:57.320 --> 00:23:01.060
so you can actually flow out your entire
application inside Interface Builder.

00:23:01.090 --> 00:23:03.600
So I highly encourage you to take
a look at this if you haven't,

00:23:03.600 --> 00:23:07.130
and hopefully this can actually
allow you to -- accomplish table

00:23:07.130 --> 00:23:10.860
views like this in your application
without writing any code.

00:23:16.070 --> 00:23:16.800
All right, there we go.

00:23:16.860 --> 00:23:23.560
All right, so let's move on to a few
of the tips and tricks.

00:23:26.720 --> 00:23:29.940
So here's that application Luke was
showing you just a minute ago.

00:23:30.030 --> 00:23:33.340
And what we'd like to do is add
an ability to this application

00:23:33.340 --> 00:23:37.890
so that the user can rate these
individual quotes from these plays.

00:23:38.190 --> 00:23:41.160
Now there's a few different
ways you could accomplish this.

00:23:41.160 --> 00:23:44.980
Using just the sort of
built-in features in UIKit,

00:23:44.980 --> 00:23:48.660
you might imagine the user could select
one of these plays and we could push an

00:23:48.660 --> 00:23:52.950
entire new view controller on the stack
that maybe offers some rating choices.

00:23:53.040 --> 00:23:55.890
And the user could hit that and go back.

00:23:56.310 --> 00:23:59.590
user also could select one of these and
we might pop up an alert sheet at the

00:23:59.640 --> 00:24:04.000
bottom giving a set of buttons for the
various choices the user might make.

00:24:04.730 --> 00:24:08.700
But it's really nice a lot of times
to be able to move some of that stuff

00:24:08.700 --> 00:24:12.680
directly in line and offer stuff more
localized so not as much stuff is

00:24:12.680 --> 00:24:14.540
moving around in your application.

00:24:14.630 --> 00:24:17.530
So what we'd like to do here
is show how you might do this

00:24:17.550 --> 00:24:19.840
directly in line in the table view.

00:24:19.840 --> 00:24:23.810
You tap on a row,
there's a set of controls right in line,

00:24:23.930 --> 00:24:27.700
you can interact with those and
when you tap they'll just go away.

00:24:29.370 --> 00:24:31.230
So I want to bring Luke back
up on stage and he'll show you

00:24:31.240 --> 00:24:32.300
how we can accomplish this.

00:24:33.400 --> 00:24:35.240
Thank you, Jason.

00:24:35.430 --> 00:24:38.000
Hope you guys liked all that new stuff.

00:24:43.840 --> 00:24:47.020
So I'm going to show you
exactly what Jason said.

00:24:47.160 --> 00:24:50.390
We're going to add a little bit
of what we might call a control

00:24:50.810 --> 00:24:53.390
row to our existing application.

00:24:53.750 --> 00:24:58.060
So I'm going to do that in the context of
the two methods you see in front of you.

00:24:58.080 --> 00:25:02.500
DidSelectRoadIndexPath and
WillSelectRoadIndexPath.

00:25:02.540 --> 00:25:06.050
Mostly it's all going to be
in DidSelectRoadIndexPath.

00:25:06.640 --> 00:25:13.840
So my goal is I want to have one,
at most one, of these control rows

00:25:13.840 --> 00:25:14.940
showing at any given time.

00:25:14.980 --> 00:25:17.810
That is,
in the initial state of the table,

00:25:17.960 --> 00:25:23.370
it'll just look like this,
where I've got these rows,

00:25:23.370 --> 00:25:25.140
and I don't have any
control row anywhere.

00:25:25.140 --> 00:25:28.120
But if I click on one,
I want to show that control row.

00:25:28.120 --> 00:25:32.210
But then if I go click on another row,
I don't want two control rows.

00:25:32.280 --> 00:25:36.180
I only want this to be showing
for one row at any time.

00:25:36.640 --> 00:25:40.600
So I will hide the one if
I click on a different row

00:25:40.600 --> 00:25:43.070
and show it for the new row.

00:25:43.370 --> 00:25:48.990
So that's the general idea that I'm
going to try to accomplish here.

00:25:49.140 --> 00:25:53.580
I will start out by first saying, okay,
if I have one of these things

00:25:53.830 --> 00:26:01.130
visible when I select a row,
I'm going to go hide that thing.

00:26:01.500 --> 00:26:08.840
and part of that is going to be to
unselect the row that I've tapped

00:26:08.940 --> 00:26:13.600
on if I've tapped on the same index
path that I've selected before.

00:26:13.640 --> 00:26:18.080
I'm going to be working in the context
of a couple of Ivar's properties on

00:26:18.120 --> 00:26:19.780
my class that I've scrolled away.

00:26:19.790 --> 00:26:23.520
One is called this tapped index path
which represents the row that I tapped

00:26:23.550 --> 00:26:27.660
on and then another one is control row
index path which is where I'm going

00:26:27.660 --> 00:26:32.280
to put my control row so you know what
things are flying around the screen here.

00:26:32.870 --> 00:26:38.300
So the next thing we're going
to do is get a modified,

00:26:38.570 --> 00:26:41.810
version of the index path
that the TableView sent me.

00:26:41.840 --> 00:26:45.860
The reason I'm doing this
is because conceptually,

00:26:45.870 --> 00:26:54.370
when I tap on a row, I still have this,
the same number of rows in my model,

00:26:55.350 --> 00:26:59.050
I'm adding this control row so the
TableView thinks I have one more

00:26:59.050 --> 00:27:01.420
row than I really actually have.

00:27:01.450 --> 00:27:07.490
So instead of changing my actual model,
I've decided to just say, "Well,

00:27:07.590 --> 00:27:10.120
I'm going to keep track of
where this control row is,

00:27:10.130 --> 00:27:12.220
and when the TableView sends
me index paths,

00:27:12.220 --> 00:27:16.870
I'm going to map them to what they
really are in my model." So I do

00:27:16.870 --> 00:27:22.580
that with this model index path
for index path method that I wrote,

00:27:22.580 --> 00:27:27.290
which just offsets things by one,
if need be.

00:27:28.440 --> 00:27:33.560
So, with that,
I go to figure out what I need to delete,

00:27:33.560 --> 00:27:37.270
which that's the control row
index path if I have one,

00:27:37.270 --> 00:27:40.550
so that will be set to something
if I'm showing the control row.

00:27:40.560 --> 00:27:42.280
And whatever that is,
I'm going to scroll that away

00:27:42.280 --> 00:27:43.230
so I can delete it later.

00:27:43.240 --> 00:27:48.410
What I'm trying to do now is
build what I'm going to use to

00:27:48.410 --> 00:27:50.200
do a TableView update block.

00:27:50.200 --> 00:27:53.640
So I need something to delete, possibly,
something to insert, possibly,

00:27:53.640 --> 00:27:57.070
and I will be doing that
at the end of the method.

00:27:57.370 --> 00:28:02.860
So now I want to update my properties
based on what happened here.

00:28:02.860 --> 00:28:07.600
So I have my tapped index path
and my control row index path.

00:28:07.820 --> 00:28:12.300
And if I've tapped on the
same row that I already had,

00:28:12.300 --> 00:28:14.340
sort of the last row
that I had tapped on,

00:28:14.340 --> 00:28:17.780
I'm going to nil them both out because
if I tap on the same row twice,

00:28:17.840 --> 00:28:20.160
I'm just going to hide the control row.

00:28:20.160 --> 00:28:22.510
And so there will be
no tapped index path,

00:28:22.510 --> 00:28:24.120
no control row index path.

00:28:24.140 --> 00:28:25.360
We're done with that.

00:28:25.620 --> 00:28:31.230
But if I'm tapping on some new row that
is not currently showing a control row,

00:28:31.230 --> 00:28:35.290
then whatever I've tapped on,
that is now my index path,

00:28:35.400 --> 00:28:37.280
my tapped index path.

00:28:37.390 --> 00:28:41.830
And the control row index path
is going to be that row plus one.

00:28:41.870 --> 00:28:47.420
So you see I have here index path
row plus one and I'm creating that

00:28:47.420 --> 00:28:50.290
for my control row index path.

00:28:51.350 --> 00:28:54.860
So now I have the thing I need to delete,
which is whatever was the

00:28:54.860 --> 00:28:57.290
last thing that was selected,
if anything.

00:28:57.370 --> 00:29:03.540
The row that I need to insert,
which is the control row index path,

00:29:03.540 --> 00:29:05.700
that's where I'm bringing in the control.

00:29:05.710 --> 00:29:09.600
And I can go ahead and do an update
block to make these things happen.

00:29:09.740 --> 00:29:13.530
So here's our familiar
TableViewBeginUpdates and updates.

00:29:13.570 --> 00:29:16.700
And I'll do an insertion if necessary.

00:29:16.940 --> 00:29:23.780
If I have something there,
I'll go ahead and call tableview

00:29:23.780 --> 00:29:29.040
delete rows at index path
and send it my index path.

00:29:29.140 --> 00:29:33.370
I'm going to go ahead and use the
new tableview animation automatic

00:29:33.430 --> 00:29:37.310
style because that's convenient
and a nice default to use.

00:29:38.500 --> 00:29:40.350
Then I'll go ahead and do my insertion.

00:29:40.350 --> 00:29:46.060
If I have a control row index path,
send that to insert rows index path.

00:29:46.060 --> 00:29:49.690
Again, I'll use the new
automatic animation style.

00:29:51.000 --> 00:29:53.990
I just have one more thing
that I want to clean up.

00:29:54.010 --> 00:29:57.270
And that's I want to make it,
I don't really want the user to tap

00:29:57.520 --> 00:30:00.340
to select the control row per se.

00:30:00.380 --> 00:30:02.080
We have some controls in
there they can interact with,

00:30:02.190 --> 00:30:03.930
but I don't actually
want them selecting it.

00:30:04.100 --> 00:30:10.520
So if they try to,
when willSelectRowAtIndexPath comes in,

00:30:10.530 --> 00:30:13.960
I'm going to see if they're
actually trying to select,

00:30:13.960 --> 00:30:17.170
and don't worry about that,

00:30:18.500 --> 00:30:24.450
and I are going to go,
I went to the wrong, okay.

00:30:25.000 --> 00:30:46.700
[Transcript missing]

00:30:47.600 --> 00:30:52.700
As a nice little pitch,
I will also say that I used register nib

00:30:53.050 --> 00:30:56.400
for cell identifier for this control row.

00:30:56.400 --> 00:30:59.630
And so that inserts
when I tap on the row.

00:30:59.710 --> 00:31:01.290
Thank you.

00:31:06.300 --> 00:31:07.800
and the little control row shows for me.

00:31:07.800 --> 00:31:12.300
I can go tap on another row,
that one hides, new one shows.

00:31:12.300 --> 00:31:17.000
I can maybe rate this one as hey,
good thumbs up.

00:31:17.040 --> 00:31:22.370
Falstaff, he's talking about pepper,
I'll rate that as not so good.

00:31:22.450 --> 00:31:26.600
And if I tap on the row itself again,
that indicates that I'm done with this.

00:31:26.630 --> 00:31:28.200
And it goes and hides away.

00:31:28.200 --> 00:31:33.500
Gives you an idea of interesting new way
that you can think about allowing your

00:31:33.500 --> 00:31:36.200
user to interact with your application.

00:31:36.280 --> 00:31:39.650
Giving them inline controls
to give feedback about the

00:31:39.650 --> 00:31:41.890
information in your table view.

00:31:41.940 --> 00:31:46.600
So thank you for letting me show
using a control row in the table view.

00:31:46.630 --> 00:31:50.440
And I'll let Jason come back and
talk to you about some more tips

00:31:50.500 --> 00:31:52.080
you can do with the table view.

00:31:52.180 --> 00:31:53.900
Thank you.

00:31:58.000 --> 00:32:02.720
All right, thanks, Luke.

00:32:02.950 --> 00:32:06.850
So we weren't actually doing
anything really new there.

00:32:06.930 --> 00:32:11.500
This is something you actually you can
do in any version that's shipped so far.

00:32:11.700 --> 00:32:27.600
[Transcript missing]

00:32:29.680 --> 00:32:30.600
What's a floating view?

00:32:30.600 --> 00:32:34.000
Well, a floating view is something that
appears to stay fixed on the screen

00:32:34.000 --> 00:32:36.440
as the user manipulates the content.

00:32:36.510 --> 00:32:39.500
We have a couple of examples
of these in TableView already.

00:32:39.780 --> 00:32:43.050
The index bar that appears
over on the right side,

00:32:43.050 --> 00:32:45.720
showing A through Z in English,

00:32:45.900 --> 00:33:04.100
[Transcript missing]

00:33:04.350 --> 00:33:07.210
So I want to talk a little bit about
how you can do this in your own

00:33:07.210 --> 00:33:11.530
applications and create a view that
appears to just float in your TableView.

00:33:12.890 --> 00:33:16.630
So I want to talk a little bit first
about the machinery of scrolling so

00:33:16.630 --> 00:33:21.140
that we all understand what's actually
going on when we scroll a table view.

00:33:21.190 --> 00:33:24.170
So here we've got a blue box
there that represents the

00:33:24.250 --> 00:33:26.040
table view in our iPhone frame.

00:33:26.040 --> 00:33:30.340
And let's just take away the iPhone
frame so we can focus on the table view.

00:33:30.410 --> 00:33:33.870
So the table view is some
fairly long view that goes,

00:33:33.990 --> 00:33:36.090
you know, far off the screen.

00:33:37.330 --> 00:33:39.710
But there's some visible portion
right now and we're going to represent

00:33:39.710 --> 00:33:42.630
that by this sort of dotted red line.

00:33:42.660 --> 00:33:47.880
So when a table view scrolls,
all we're really doing is moving the

00:33:47.880 --> 00:33:51.090
content offset of the table view.

00:33:51.200 --> 00:33:56.350
So that's just the point within the
content that should be shown visually.

00:33:57.430 --> 00:33:59.740
So what happens if we have some
sort of subview in our table view?

00:33:59.780 --> 00:34:03.180
Here, for example,
we put a little box in our table view.

00:34:03.180 --> 00:34:07.540
When we scroll that,
that box moves with it.

00:34:07.590 --> 00:34:08.290
Well, why does it move?

00:34:08.360 --> 00:34:12.000
Well, that box is specified,
its coordinate system is

00:34:12.000 --> 00:34:14.340
specified in terms of its parent.

00:34:14.340 --> 00:34:19.040
It's some constant offset from the
upper left corner of the parent.

00:34:19.040 --> 00:34:21.240
And that isn't moving,
so it's always going to

00:34:21.240 --> 00:34:22.630
be that constant offset.

00:34:22.640 --> 00:34:27.640
We've just changed sort of where
inside the table view we're looking.

00:34:27.640 --> 00:34:29.640
And this is all that
happens when we scroll.

00:34:29.850 --> 00:34:32.240
Cells are at fixed locations
within the table view.

00:34:32.240 --> 00:34:35.570
And as we move that content offset,
they appear to move up and down.

00:34:35.600 --> 00:34:39.300
And then we take care automatically
when those things go outside the

00:34:39.310 --> 00:34:43.130
visible region of popping them out,
putting them in the reuse queue,

00:34:43.130 --> 00:34:44.370
things like that.

00:34:44.970 --> 00:34:47.310
So hopefully by this point it's
kind of clear what we need to do if

00:34:47.310 --> 00:34:49.160
we want to create a floating view.

00:34:49.160 --> 00:34:52.500
All we need to do is figure
out whenever we scroll,

00:34:52.500 --> 00:34:57.180
grab our view and simply push it
back to the same place on the screen.

00:34:57.530 --> 00:35:01.410
So we can figure out whenever we scroll
with the scroll view delegate method,

00:35:01.410 --> 00:35:05.140
scroll view did scroll,
and whenever that is called,

00:35:05.140 --> 00:35:08.150
the scroll view has moved some amount,
and we can go do anything

00:35:08.190 --> 00:35:09.060
we'd like at this point.

00:35:09.060 --> 00:35:12.200
This is in fact the place where
we go in and pop cells off if

00:35:12.200 --> 00:35:16.230
they've gone off screen and add new
cells if they've come on screen.

00:35:16.270 --> 00:35:18.380
And you can do anything you'd like there.

00:35:18.380 --> 00:35:20.960
In fact, in this case,
all we're doing is basically

00:35:21.540 --> 00:35:25.080
figuring out where we'd like that
view to be and just moving it.

00:35:28.620 --> 00:35:31.130
So we'll bring Luke up in a minute and
we'll show some code that does that.

00:35:31.180 --> 00:35:34.700
Before we do that, I want to talk about
one other tip and trick.

00:35:34.780 --> 00:35:37.360
And that's a dynamic background view.

00:35:37.740 --> 00:35:41.430
So in iOS 3.2,
we added the ability to specify a

00:35:41.590 --> 00:35:44.830
background view on a table view.

00:35:48.370 --> 00:35:51.000
The important thing to note is
that this is actually a view.

00:35:51.000 --> 00:35:52.580
I mean,
we generally use it for things like

00:35:52.670 --> 00:35:53.960
putting an image view back there.

00:35:54.010 --> 00:35:56.060
For example, on iPad,
we have a nice gradient

00:35:56.150 --> 00:35:57.900
behind our table views.

00:35:57.960 --> 00:36:00.100
But because this is just a view,
you can actually use it for

00:36:00.100 --> 00:36:01.600
just about anything you'd like.

00:36:01.630 --> 00:36:04.390
Here, for example,
you can see this cloud subtly

00:36:04.470 --> 00:36:07.750
scrolling by behind our content.

00:36:10.490 --> 00:36:12.100
So with that,
I want to bring Luke back on

00:36:12.100 --> 00:36:14.340
stage and he's going to run
through how we accomplish these.

00:36:14.360 --> 00:36:18.200
Thanks again, Jason.

00:36:19.640 --> 00:36:26.500
So there's a lot of things you can do in
response to scrolling in the table view.

00:36:26.520 --> 00:36:30.790
We're going to show the common
case of just wanting to keep a

00:36:30.850 --> 00:36:35.300
view apparently static in the,
in terms of the table.

00:36:35.300 --> 00:36:39.500
So as Jason described it,
a floating view that stays in the

00:36:39.500 --> 00:36:41.890
same place as we scroll the table.

00:36:42.070 --> 00:36:45.060
But there's lots of different
things that you might want to do in

00:36:45.060 --> 00:36:47.450
response to the TableView scrolling.

00:36:47.600 --> 00:36:50.760
I talked to a gentleman yesterday
who actually wanted to potentially

00:36:50.760 --> 00:36:55.240
move views outside of his table
relative to the TableView scrolling.

00:36:55.300 --> 00:37:00.120
And it's all pretty much the same idea.

00:37:00.470 --> 00:37:04.840
We're introducing here implementing
the ScrollViewDidScroll method.

00:37:04.880 --> 00:37:08.580
And that's going to be your key if
you're using a TableView controller to

00:37:08.670 --> 00:37:10.840
get in when the TableView is scrolling.

00:37:10.860 --> 00:37:13.990
And then if you want to make
adjustments to things to get

00:37:13.990 --> 00:37:17.740
different visual effects,
that's where you do it.

00:37:17.740 --> 00:37:24.490
So I'm going to show you
an app that you've...

00:37:25.000 --> 00:37:30.000
seen in slides,
but it's great to see just why

00:37:30.000 --> 00:37:31.460
this needs a little improvement.

00:37:31.460 --> 00:37:35.100
So I put a little button over here,
this is some more Shakespeare quotes,

00:37:35.200 --> 00:37:39.310
but I put a little button in the
upper right that I intend to use to

00:37:39.310 --> 00:37:45.030
allow my user to download some new
quotes in case the bard writes them.

00:37:45.030 --> 00:37:49.870
And the problem is I can scroll this
table and that button goes away.

00:37:50.080 --> 00:37:55.450
So anytime I want to use that I have to
scroll to the top and click it up there.

00:37:55.550 --> 00:37:58.410
What I really want is to have
this button stay in place,

00:37:58.410 --> 00:38:03.460
be a static floating view on top of the
table and always be in that upper right.

00:38:03.470 --> 00:38:08.350
So we're going to do that by
implementing scroll view did scroll.

00:38:08.460 --> 00:38:14.160
Now the key is to know where that
view should stay relative to the

00:38:14.160 --> 00:38:16.830
apparent view of the table view.

00:38:16.990 --> 00:38:21.930
And we're going to do that by creating
a property that we can scroll away that

00:38:21.930 --> 00:38:23.970
is the initial origin of that view.

00:38:24.040 --> 00:38:29.630
So I'm going to declare a property here,
I'll call it cloud view origin.

00:38:30.120 --> 00:38:33.860
And synthesize it

00:38:35.300 --> 00:38:38.360
All right,
I've got my Cloud View Origin property.

00:38:38.360 --> 00:38:42.720
And I'm just going to go
implement scrollView.scroll.

00:38:45.310 --> 00:38:48.790
So in ScrollViewDidScroll,
what I'm observing is the

00:38:48.930 --> 00:38:52.950
changing bounds of the table view
because as Jason illustrated,

00:38:52.950 --> 00:38:54.150
that's what happens when we scroll.

00:38:54.190 --> 00:38:56.830
The table view bounds
change to a new value.

00:38:56.960 --> 00:39:01.330
So first thing I'm interested in is,
okay, what are the new bounds

00:39:01.350 --> 00:39:02.790
of the table view?

00:39:03.590 --> 00:39:09.860
All I'm gonna do is adjust the
frame of my little cloud view

00:39:10.020 --> 00:39:15.070
in response to what the actual
bounds of the table view are now.

00:39:15.490 --> 00:39:19.730
So I'm just gonna take the
existing frame of the cloud view,

00:39:20.060 --> 00:39:25.110
grab it there, I'm gonna set it back but
make a little adjustment here,

00:39:25.160 --> 00:39:29.190
particularly to its origin.y value.

00:39:29.340 --> 00:39:33.100
So I do self.cloudview.frame
equals erect.

00:39:33.200 --> 00:39:35.750
And that erect is the
same as what it is now,

00:39:35.760 --> 00:39:42.020
the same size, width, and height,
and origin.x.

00:39:42.050 --> 00:39:47.260
But for the origin.y,
I'm taking the value that I scrolled

00:39:47.260 --> 00:39:51.060
away in my cloud view origin
property and adding that to the

00:39:51.060 --> 00:39:54.040
table view's current bounds.origin.y.

00:39:54.140 --> 00:39:58.000
So now as we scroll and
the table view's bounds,

00:39:58.070 --> 00:40:03.390
bounds origin changes,
then we will use that value to update

00:40:03.930 --> 00:40:08.580
the frame.origin.y of our cloud view.

00:40:08.770 --> 00:40:11.010
So the only thing I'm missing
now is I haven't actually

00:40:11.400 --> 00:40:13.940
initialized my CloudView origin.

00:40:13.940 --> 00:40:15.940
I want to do that when I create the view.

00:40:15.940 --> 00:40:19.220
So I'll just come down here
and here in ViewDidLoad,

00:40:19.250 --> 00:40:24.690
this is where I create my
CloudView and add it to the table.

00:40:25.390 --> 00:40:28.990
While I'm doing that,
I will initialize my self.cloudview

00:40:28.990 --> 00:40:31.240
origin to the CloudView origin.

00:40:31.250 --> 00:40:33.290
And that should be everything I need.

00:40:33.360 --> 00:40:34.480
ScrollView did scroll.

00:40:34.480 --> 00:40:37.710
We'll now be able to do its thing.

00:40:42.000 --> 00:40:47.880
Now hopefully when I scroll this,
the view stays in place.

00:40:47.880 --> 00:40:47.880
Yay!

00:40:52.320 --> 00:40:57.070
This even works when we bounce right here
because in this case the TableView origin

00:40:57.140 --> 00:41:01.670
bounds is going negative and my
adjustment to the offset still works.

00:41:01.690 --> 00:41:06.020
So in all cases this will
work for vertical scrolling.

00:41:06.260 --> 00:41:09.380
So yay, I'm very happy about that.

00:41:10.310 --> 00:41:15.510
The other trick I want to introduce
here is thinking of the background view,

00:41:15.520 --> 00:41:18.300
as Jason said,
as more than just a flat view.

00:41:18.300 --> 00:41:25.110
It is the background view property
on UITableView is a generic UI view.

00:41:25.120 --> 00:41:29.000
So you can do anything that
you can do with a view with it,

00:41:29.080 --> 00:41:30.380
which is all kinds of things.

00:41:30.380 --> 00:41:36.610
You don't just need to provide some
static idea of one single flat view

00:41:36.610 --> 00:41:39.840
with no subviews that don't change.

00:41:40.200 --> 00:41:41.130
As the background view.

00:41:41.270 --> 00:41:45.770
Obviously you want something tasteful,
but there are things you can think

00:41:45.770 --> 00:41:50.670
about for making your application
stand out by having a background

00:41:50.670 --> 00:41:55.300
view that maybe utilizes subviews
and is dynamic in some way.

00:41:56.150 --> 00:41:57.620
So...

00:41:57.830 --> 00:42:01.080
What I've set up here is a
background view that actually

00:42:01.590 --> 00:42:03.120
isn't just a single view.

00:42:03.170 --> 00:42:06.620
My background view has a
subview that is an image view.

00:42:06.630 --> 00:42:14.210
And that image view is actually twice
the width of what you see on screen here.

00:42:14.280 --> 00:42:18.400
So half of it is living over here.

00:42:18.430 --> 00:42:24.520
And I'm going to use that to perform
an animation on it and make it appear

00:42:24.520 --> 00:42:28.060
to move horizontally off screen.

00:42:28.060 --> 00:42:32.380
So I can do that in...

00:42:34.700 --> 00:42:37.850
Gears, good place for that.

00:42:37.980 --> 00:42:43.000
And what I want to do is just initiate
an animation here as soon as the

00:42:43.120 --> 00:42:46.320
view appears that changes the frame.

00:42:46.320 --> 00:42:48.390
Let me re-show you.

00:42:49.900 --> 00:42:54.950
and I will be doing a little bit
of a demo of what we're looking at.

00:42:54.950 --> 00:42:59.180
It changes the frame to move
it over towards the left.

00:42:59.190 --> 00:43:03.510
We'll move it off screen to
the left since half of my image

00:43:03.560 --> 00:43:08.400
view is over here to the right,
not really on screen right now.

00:43:08.560 --> 00:43:11.080
As we move the whole view to the left,
the stuff that's on the right off

00:43:11.080 --> 00:43:11.080
the screen now will come on screen
and we'll get this animating effect.

00:43:11.510 --> 00:43:15.800
and in fact I made the image that
it shows tessellated with itself

00:43:15.800 --> 00:43:19.950
so I can just do this movement
forever and we'll get a nice

00:43:20.450 --> 00:43:23.180
infinite scrolling appearance to it.

00:43:23.180 --> 00:43:26.720
So the actual code for
this is quite simple.

00:43:26.720 --> 00:43:28.910
It's just a UIView animation.

00:43:28.950 --> 00:43:34.050
Many of you have probably used
UIView animations before and

00:43:34.180 --> 00:43:37.860
that thing still hates me.

00:43:37.860 --> 00:43:41.880
So I'm going to initiate UIView,
animate with duration and

00:43:41.880 --> 00:43:44.100
I need a few options here.

00:43:44.100 --> 00:43:50.580
So I'll give it a duration of say 60,
delay of 0 because I don't need to wait.

00:43:50.580 --> 00:43:54.620
A couple of options I'm going to use
are UIView animation option repeat.

00:43:54.620 --> 00:43:59.520
That's there so that my animation,
my dynamic idea that my table view

00:43:59.520 --> 00:44:01.180
has going just goes on forever.

00:44:01.180 --> 00:44:03.260
Don't want it to ever stop.

00:44:03.260 --> 00:44:07.820
I'm going to use a linear curve
option because by default,

00:44:07.820 --> 00:44:13.460
UIView animations use a ease in
ease out curve but I want just

00:44:13.460 --> 00:44:17.620
sort of a constant velocity to
my animation going on forever.

00:44:17.620 --> 00:44:21.020
So I'm going to use the linear option.

00:44:21.020 --> 00:44:23.980
Now all I need to do is
within the animation block,

00:44:23.980 --> 00:44:29.180
update the frame of my image view
so that it appears to move across

00:44:29.180 --> 00:44:31.940
the screen as part of the animation.

00:44:32.690 --> 00:44:35.940
So I get the current idea of the frame.

00:44:36.000 --> 00:44:40.470
I'm going to adjust its origin so
that it moves off-screen to the left.

00:44:40.580 --> 00:44:47.070
So I take the imageViews frame.origin.x
and I'm going to take half of its width

00:44:47.410 --> 00:44:52.480
and move it that much to the left,
negative.

00:44:52.500 --> 00:44:54.840
And now that I have that,
I'll just assign it

00:44:54.990 --> 00:44:57.550
back to the imageView.

00:44:58.390 --> 00:45:02.350
Take my background image view, its frame,
assign it to what I just calculated,

00:45:02.350 --> 00:45:04.940
and that sets up my animation.

00:45:04.980 --> 00:45:09.240
And that's all the code I need.

00:45:09.310 --> 00:45:11.560
You've seen this once
before in slide form,

00:45:11.560 --> 00:45:14.630
but actually running in code,
so much better.

00:45:14.870 --> 00:45:15.980
And there it is.

00:45:15.990 --> 00:45:19.780
My background view is so much
more than a background view now.

00:45:19.790 --> 00:45:24.590
It's me floating through the sky
enjoying my Shakespeare quotes.

00:45:31.340 --> 00:45:33.460
So I really enjoyed showing you
a few of these tricks today.

00:45:33.460 --> 00:45:37.550
I hope it gives you some food for thought
as to things you can do to enhance your

00:45:37.550 --> 00:45:43.280
TableView application and continue to
make the best apps in the mobile world.

00:45:43.370 --> 00:45:47.610
So thank you for letting me show that
and thank you for writing the apps.

00:45:56.920 --> 00:45:59.200
Hi, thanks again, Luke.

00:45:59.200 --> 00:46:03.010
So that's really cool,
but we really don't want you

00:46:03.080 --> 00:46:06.240
guys to all go out and make
cloud backgrounds in your apps.

00:46:06.320 --> 00:46:10.850
The point of all these tips and
tricks was really to really let you

00:46:10.920 --> 00:46:15.300
see sort of under the covers a little
bit and understand how things work

00:46:15.300 --> 00:46:18.470
inside the table view so that when
you come up with your own ideas for

00:46:18.540 --> 00:46:22.100
something that will set your app apart,
you understand the machinery

00:46:22.100 --> 00:46:25.780
of how everything works and
you know where to hook in.

00:46:27.820 --> 00:46:28.960
So we covered a bunch of different stuff.

00:46:28.960 --> 00:46:31.900
I want to just briefly recap.

00:46:32.240 --> 00:46:36.560
A bunch of new features in iOS 5.0 from
automatic dimensions and animation style,

00:46:36.570 --> 00:46:40.130
a couple of new update methods
to move sections and rows,

00:46:40.280 --> 00:46:44.650
menu support, multiple selection,
new automatic cell loading

00:46:44.690 --> 00:46:47.800
feature and static table views,
and then of course the tips and

00:46:47.810 --> 00:46:49.490
tricks that we just covered.

00:46:50.260 --> 00:46:53.600
For more information, you can contact the
Application Frameworks Evangelist,

00:46:53.600 --> 00:46:56.490
that's Bill Dudney,
and there's his email address.

00:46:56.530 --> 00:46:59.740
There's some great online
documentation which discusses this,

00:46:59.800 --> 00:47:03.380
as well as the developer forums where
you can all help each other out.

00:47:03.810 --> 00:47:05.940
There's a couple of related sessions.

00:47:05.940 --> 00:47:10.340
Unfortunately,
these all happened yesterday.

00:47:10.340 --> 00:47:13.050
But simplifying touch, event handling,
and gesture recognizers,

00:47:13.050 --> 00:47:16.740
and some advanced gesture recognition.

00:47:16.820 --> 00:47:18.990
With that, thanks for coming.