WEBVTT

00:00:10.530 --> 00:00:13.070
So this morning I'd like
to start with a question.

00:00:13.390 --> 00:00:18.520
How many people here are using
Xcode 4 100% of the time now?

00:00:18.820 --> 00:00:19.340
Oh, good.

00:00:19.560 --> 00:00:21.740
I was hoping to see
everybody's hands go up.

00:00:21.770 --> 00:00:28.070
And how many people are new to
Xcode in general this past year?

00:00:28.090 --> 00:00:30.000
So you've been using Xcode
for less than a year?

00:00:30.000 --> 00:00:31.640
A fair number of people.

00:00:31.640 --> 00:00:32.310
Great.

00:00:34.300 --> 00:00:39.500
Whether you're new to Xcode or
whether you're a veteran developer,

00:00:39.600 --> 00:00:44.110
the chances are that we all use
the tool in a different way.

00:00:44.820 --> 00:00:51.280
But Xcode was designed to fit a
whole variety of working styles.

00:00:51.280 --> 00:00:56.850
And if you take the time to configure
Xcode to work the way that you work,

00:00:57.200 --> 00:01:02.210
it will make you more
effective as a developer,

00:01:02.210 --> 00:01:07.370
and it will also make you more
productive in your day-to-day work.

00:01:08.040 --> 00:01:10.780
And so what I'd like to do today is
to show you some of the things we've

00:01:10.860 --> 00:01:15.560
done in Xcode 4 that I think will
make you more effective and productive

00:01:16.020 --> 00:01:18.900
in your day-to-day debugging tasks.

00:01:20.690 --> 00:01:25.370
So the first part of being
effective with debugging in Xcode

00:01:25.960 --> 00:01:28.940
is to understand the fundamentals.

00:01:29.090 --> 00:01:34.100
So let's take a second and look at the
fundamentals of debugging with Xcode 4.

00:01:34.620 --> 00:01:38.570
Now, before we even run our application
for the very first time,

00:01:38.590 --> 00:01:41.820
there are some settings that
we might want to change that

00:01:41.990 --> 00:01:44.580
will affect the way that we run.

00:01:45.510 --> 00:01:48.310
And you do that in Xcode
through the schemes.

00:01:48.310 --> 00:01:51.050
So the schemes have a
whole variety of settings.

00:01:51.070 --> 00:01:55.210
And you can view these schemes by
pressing Command-less-than or by

00:01:55.550 --> 00:01:57.140
option-clicking on the Run button.

00:01:57.240 --> 00:02:00.800
And when I do that, you'll see that the
scheme sheet slides down.

00:02:00.800 --> 00:02:04.760
And you'll notice on the left,
there's a whole bunch of actions.

00:02:04.760 --> 00:02:06.510
So that's build, run, test.

00:02:06.650 --> 00:02:08.390
Those are all scheme actions.

00:02:08.740 --> 00:02:10.790
Now,
the one we care about that pertains to

00:02:10.790 --> 00:02:12.670
running is obviously the run action.

00:02:12.690 --> 00:02:14.350
So we're going to look at that.

00:02:14.380 --> 00:02:17.860
So the Info tab has sort
of the main settings,

00:02:17.860 --> 00:02:22.170
the most important ones that we will
likely want to tweak and change.

00:02:22.260 --> 00:02:25.660
And the first one of those
is the build configuration.

00:02:25.660 --> 00:02:29.910
So this lets you change whether you
build with debug symbols or not.

00:02:29.960 --> 00:02:34.220
So 99% of the time when you run,
you're probably debugging and

00:02:34.220 --> 00:02:38.700
you want these debug symbols,
but you can change that to release.

00:02:38.750 --> 00:02:40.430
if you'd like.

00:02:40.920 --> 00:02:47.610
Now, the next option here gives us the
ability to change the executable that

00:02:47.620 --> 00:02:50.270
is run when we press the Run button.

00:02:50.340 --> 00:02:52.780
So why might we want to do that?

00:02:52.790 --> 00:02:55.290
Well,
if you're working on a framework and

00:02:55.290 --> 00:02:59.280
you want to test your framework out
against a particular application,

00:02:59.290 --> 00:03:02.460
you can choose that
application right here.

00:03:03.240 --> 00:03:06.660
The third option is probably
the most important option,

00:03:06.660 --> 00:03:09.290
and that's the ability
to switch debuggers.

00:03:09.630 --> 00:03:13.800
So you can select the LLDB debugger,
which I encourage you all to do.

00:03:13.800 --> 00:03:18.900
That's Apple's new, faster, better,
stronger debugger.

00:03:18.900 --> 00:03:22.030
And in fact,
they have -- the LLDB team has

00:03:22.030 --> 00:03:25.300
a talk right after this one,
and you should check that out.

00:03:25.370 --> 00:03:29.650
So if you can, try to use LLDB in your
day-to-day debugging tasks and

00:03:29.650 --> 00:03:31.690
see how that works for you.

00:03:32.840 --> 00:03:37.670
As we move down to the last option here,
this gives us the ability to

00:03:37.670 --> 00:03:39.840
change the way that we launch.

00:03:39.960 --> 00:03:46.120
So by default, and this is the way you'll
probably want it most of the time,

00:03:46.120 --> 00:03:48.550
Xcode will automatically
start your app for you.

00:03:48.620 --> 00:03:51.300
So when you press run,
everything will just launch up,

00:03:51.410 --> 00:03:52.880
and you'll be ready to debug.

00:03:52.880 --> 00:03:55.260
But that's not always what you want.

00:03:56.590 --> 00:04:00.360
Sometimes there are issues early in
the launch cycle of your application,

00:04:00.440 --> 00:04:04.820
and it turns out you might want to
manually launch your application.

00:04:04.820 --> 00:04:07.750
Now, you might do that from the Finder,
or if you're iOS,

00:04:07.750 --> 00:04:11.140
you would do that from the launch
screen of the iPhone or iPad.

00:04:11.140 --> 00:04:14.670
And when you select wait for
my application to launch,

00:04:14.670 --> 00:04:19.240
Xcode will get ready to start debugging,
but it will then start looking for

00:04:19.320 --> 00:04:23.140
your application to be launched,
and it'll wait for you to do that.

00:04:23.210 --> 00:04:25.460
So that's a handy setting.

00:04:26.000 --> 00:04:28.000
If it turns out that you need it.

00:04:28.000 --> 00:04:30.570
Okay, let's slide over to the next tab.

00:04:30.920 --> 00:04:32.660
This is the arguments tab.

00:04:32.870 --> 00:04:36.660
So here, obviously enough,
we can set arguments or add arguments

00:04:36.660 --> 00:04:39.010
to pass in to our application.

00:04:39.160 --> 00:04:43.390
We can also set environment
variables that we want to use.

00:04:44.540 --> 00:04:49.900
Now, one nice feature of arguments
and environment variables,

00:04:49.900 --> 00:04:52.190
or one powerful feature,
is that we can actually use build

00:04:52.310 --> 00:04:56.660
settings that will get automatically
expanded for us at runtime.

00:04:56.660 --> 00:05:00.660
So this base expansions on popup,
you say, what is that?

00:05:00.660 --> 00:05:06.570
That is basically saying I want my build
settings to expand using this target.

00:05:06.780 --> 00:05:09.650
So in this simple case,
we're looking at Sketch.

00:05:09.820 --> 00:05:10.650
Very simple.

00:05:10.660 --> 00:05:13.740
It only has one target,
which is why this popup is disabled,

00:05:13.740 --> 00:05:15.660
so there's only one
thing to expand against.

00:05:16.120 --> 00:05:19.660
When we use a build setting,
like in this case,

00:05:19.660 --> 00:05:25.320
I'm using built_products_dir, at runtime,
this will be the target.

00:05:25.320 --> 00:05:29.320
This will be expanded out to
the build directory of Sketch.

00:05:29.320 --> 00:05:33.740
So this is a powerful way to get
at the build settings into your

00:05:33.790 --> 00:05:35.320
arguments and environment variables.

00:05:35.320 --> 00:05:38.290
Okay,
so as we slide to the next tab here,

00:05:38.320 --> 00:05:41.320
this is the options tab.

00:05:41.520 --> 00:05:45.370
You'll find all of the platform
and OS specific settings

00:05:45.370 --> 00:05:47.320
in this particular tab.

00:05:47.320 --> 00:05:49.190
So this is sort of a dynamic tab.

00:05:49.370 --> 00:05:51.130
You have some dynamic options here.

00:05:52.240 --> 00:05:54.980
Now, in this case,
we have a Mac OS template.

00:05:54.980 --> 00:05:57.640
We have a Mac OS X.7 application.

00:05:57.640 --> 00:06:01.640
So you'll see that we have this
new persistent state option.

00:06:01.640 --> 00:06:04.640
So that lets us enable and
disable the resume feature.

00:06:04.640 --> 00:06:07.590
Sometimes you want to turn that
on and off as you're debugging.

00:06:07.670 --> 00:06:11.360
And because it's a desktop app,
we also have the ability to set

00:06:11.440 --> 00:06:13.630
the current working directory.

00:06:14.160 --> 00:06:17.170
Now, if we were looking at an iOS app,
we would have some

00:06:17.170 --> 00:06:19.560
different settings here.

00:06:19.640 --> 00:06:21.770
Let's take a look at what those are.

00:06:22.020 --> 00:06:26.380
So in iOS 5, we have the ability to
simulate our location.

00:06:26.400 --> 00:06:30.340
So we can choose that location
right here from the scheme.

00:06:31.520 --> 00:06:35.160
And we can also choose what application
data that we want to run with.

00:06:35.240 --> 00:06:39.340
And if you were linking against
the OpenGL ES framework,

00:06:39.340 --> 00:06:44.780
then you could actually turn on and off
the OpenGL ES debugger right from here.

00:06:44.780 --> 00:06:50.540
Okay, so we've set all the settings,
we've tweaked everything,

00:06:50.540 --> 00:06:53.910
now we're actually ready to run,
so let's do that.

00:06:53.960 --> 00:06:57.610
Now you can see that in
this particular case,

00:06:57.690 --> 00:07:00.280
I set a breakpoint because
that's where I want to stop.

00:07:01.080 --> 00:07:03.020
So let's actually start the app now.

00:07:03.020 --> 00:07:05.790
And we do that, of course,
by pressing the run button,

00:07:05.800 --> 00:07:07.480
which is in the top left of the toolbar.

00:07:07.480 --> 00:07:11.830
Now when we do that,
Xcode will start our application up,

00:07:11.900 --> 00:07:14.640
and then in this case,
it's hit a breakpoint,

00:07:14.640 --> 00:07:18.700
so that pauses execution,
and then you'll see that Xcode has

00:07:19.210 --> 00:07:23.360
inserted the instruction pointer,
that's that green highlight,

00:07:23.500 --> 00:07:26.170
so that tells us where
execution is paused right now.

00:07:26.200 --> 00:07:31.010
So you'll also notice that there's
a couple of other things that Xcode

00:07:31.010 --> 00:07:34.380
has done for us now that we've
paused and we're ready to debug.

00:07:34.380 --> 00:07:39.870
So the first thing is it has
shown us the debug navigator.

00:07:40.090 --> 00:07:44.130
Now, the debug navigator is one of
seven navigators in Xcode 4,

00:07:44.160 --> 00:07:49.000
and it shows you the current process,
the current threads, and stack frames.

00:07:49.100 --> 00:07:52.190
And you can select between
those and jump around.

00:07:54.400 --> 00:07:56.560
Now as we move to the right,
to the editor area,

00:07:56.560 --> 00:07:59.300
as far as debugging goes,
there's a couple interesting things here.

00:07:59.300 --> 00:08:02.620
So now that we're running and that
there's some information available,

00:08:02.620 --> 00:08:04.790
we can do things like
mouse over a variable.

00:08:04.850 --> 00:08:09.090
So here I'm mousing over self,
and when I do that, Xcode shows me a data

00:08:09.090 --> 00:08:10.770
tip with self's value.

00:08:10.780 --> 00:08:13.180
And I can twist that
open and inspect that.

00:08:13.220 --> 00:08:19.090
One other really useful feature that
you can access right from the editor

00:08:19.090 --> 00:08:22.330
is via the context menu on the gutter.

00:08:22.600 --> 00:08:27.700
So if I control click in the gutter
here where the line numbers are,

00:08:28.340 --> 00:08:30.300
Then you'll see I'm
offered these options,

00:08:30.300 --> 00:08:31.900
one of which is continue to hear.

00:08:31.900 --> 00:08:33.240
So when is this useful?

00:08:33.240 --> 00:08:35.840
Well,
if you're debugging along and say you

00:08:35.840 --> 00:08:40.080
run into a for loop that's going to
iterate through something 10,000 times,

00:08:40.160 --> 00:08:42.220
well, of course,
you don't want to step through that.

00:08:42.420 --> 00:08:46.440
So you can control click on the
line right after that for loop,

00:08:46.530 --> 00:08:47.980
and you can say continue to hear.

00:08:47.980 --> 00:08:52.410
And that's a really nice,
easy way to resume execution and

00:08:52.410 --> 00:08:56.120
then pause again without having
to use breakpoints or anything.

00:08:57.750 --> 00:09:01.070
In general, in Xcode 4,
I would encourage you to

00:09:01.070 --> 00:09:02.600
check out the context menus.

00:09:02.600 --> 00:09:05.060
There's a lot of functionality
that's behind them.

00:09:05.060 --> 00:09:08.440
So if you're looking for something
or if you're just curious,

00:09:08.680 --> 00:09:12.430
take a look through there and see
what's offered in the context menus.

00:09:14.230 --> 00:09:17.060
So as we move down to the
bottom of the screen here now,

00:09:17.060 --> 00:09:19.480
we see the debug bar
has popped into view.

00:09:19.480 --> 00:09:22.480
So the debug bar offers
our resume control,

00:09:22.480 --> 00:09:26.550
so when we're done debugging and
we're ready to resume the application,

00:09:26.600 --> 00:09:30.140
we press the resume button and,
of course, the stepping control so we

00:09:30.140 --> 00:09:31.650
can step through our code.

00:09:31.660 --> 00:09:32.770
That's all through the debug bar.

00:09:32.780 --> 00:09:36.290
There's also a readout of the
current process thread and stack

00:09:36.290 --> 00:09:38.280
frame right from the debug bar.

00:09:39.580 --> 00:09:45.460
And then also you'll notice on the very
far left is the show debug area button.

00:09:45.560 --> 00:09:49.210
Now you can also press Command-Shift-Y,
and when we do that,

00:09:49.280 --> 00:09:53.060
we'll see that the debug
area slides into view.

00:09:53.060 --> 00:09:57.880
So the debug area has two more really
important views for our debugging tasks,

00:09:58.000 --> 00:10:01.880
the first of which is the variables view.

00:10:01.900 --> 00:10:05.540
So the variables view shows us
the variables at the current

00:10:05.540 --> 00:10:07.820
stack frame that were stopped at.

00:10:08.680 --> 00:10:12.760
So we can inspect their values,
and as we step through our code,

00:10:12.770 --> 00:10:16.190
we'll notice that in the variables view,
the values are updated and

00:10:16.470 --> 00:10:20.140
we'll see the values that have
changed highlighted in blue.

00:10:20.190 --> 00:10:23.430
So it's a really nice,
easy way to track values changing

00:10:23.450 --> 00:10:25.200
as you step through your code.

00:10:25.200 --> 00:10:28.510
Then if we slide to the right here,
we'll see the console.

00:10:28.580 --> 00:10:32.720
So the console is our direct line
of communication with a debugger,

00:10:32.720 --> 00:10:35.960
and it also shows us the printouts.

00:10:35.960 --> 00:10:38.660
So as we put NSLogs in our code,
we can see that the values are updated.

00:10:38.730 --> 00:10:40.600
They're shown via the console.

00:10:40.660 --> 00:10:43.260
So when you need to
interact with the console,

00:10:43.260 --> 00:10:45.420
this is where you can do that.

00:10:45.740 --> 00:10:47.800
Now,
while I have the variables view up here,

00:10:47.800 --> 00:10:50.240
I want to show you its context menu.

00:10:50.350 --> 00:10:52.310
Because I told you there's
so much functionality there,

00:10:52.320 --> 00:10:55.410
and I'm going to prove that.

00:10:55.600 --> 00:10:59.360
So a couple of the really useful
features here that I want to point out.

00:10:59.360 --> 00:11:04.230
The first and probably most
useful one is the ability to

00:11:04.230 --> 00:11:05.280
just print the variable out.

00:11:05.300 --> 00:11:08.190
So that's most of the time you just
want to see the value of a variable.

00:11:08.360 --> 00:11:11.070
You can do that right
through the context menu.

00:11:11.950 --> 00:11:16.490
You can also change the way
you're viewing a variable.

00:11:16.490 --> 00:11:20.040
So if you want to view it as an int, hex,
there's a variety of other

00:11:20.080 --> 00:11:21.440
things you can view it as.

00:11:21.510 --> 00:11:25.680
You can change the natural way you're
looking at it through the context menu.

00:11:27.710 --> 00:11:31.180
Then this one is really probably
the most powerful one up here,

00:11:31.180 --> 00:11:33.470
and that's the ability
to watch a variable.

00:11:33.480 --> 00:11:36.080
So when would you need this?

00:11:36.200 --> 00:11:42.040
Well, sometimes a variable is changed
out from underneath you.

00:11:42.270 --> 00:11:45.970
So its value just changes,
and you don't know who is changing

00:11:45.970 --> 00:11:47.610
it or when it's getting changed.

00:11:47.620 --> 00:11:50.840
Well, if you set a watch
point on that variable,

00:11:50.840 --> 00:11:53.980
we'll insert something like a breakpoint.

00:11:54.780 --> 00:11:58.260
And when the value of
that variable changes,

00:11:58.260 --> 00:12:02.060
we'll pause execution and we'll take
you to the line of code that caused

00:12:02.140 --> 00:12:04.060
that variable's value to change.

00:12:04.260 --> 00:12:08.660
So this is a really powerful
way to track down those values

00:12:08.760 --> 00:12:10.890
changing out from underneath you.

00:12:12.330 --> 00:12:14.700
And then finally here,
you can view the memory

00:12:14.700 --> 00:12:16.360
of a particular variable.

00:12:16.420 --> 00:12:20.730
And when you select this item,
we'll open up the memory browser right

00:12:20.740 --> 00:12:23.720
in the main editor area there for you.

00:12:23.780 --> 00:12:27.110
And then you can inspect
and page through the memory.

00:12:30.420 --> 00:12:33.430
And then finally here,
the last bit of UI that we're going

00:12:33.430 --> 00:12:36.400
to need in our day-to-day debugging
tasks is the breakpoint navigator.

00:12:36.400 --> 00:12:40.790
So the breakpoint navigator shows
us all the breakpoints in a nice,

00:12:40.790 --> 00:12:43.340
neat list that are set in our workspace.

00:12:43.340 --> 00:12:46.500
And we can do things like enable
and disable them by clicking on

00:12:46.500 --> 00:12:48.500
that little blue breakpoint icon.

00:12:48.500 --> 00:12:51.460
We can also delete breakpoints
by just dragging them out

00:12:51.460 --> 00:12:53.260
of the breakpoint navigator.

00:12:53.260 --> 00:12:57.020
And then we can edit the breakpoints.

00:12:57.300 --> 00:13:00.030
So some of the things you can
change about a breakpoint are,

00:13:00.030 --> 00:13:01.620
for example, its condition.

00:13:01.620 --> 00:13:06.430
So if you want to control when
a breakpoint is stopped at,

00:13:06.470 --> 00:13:10.810
you can set an expression
in its condition area.

00:13:10.820 --> 00:13:14.320
So when that expression
evaluates to true,

00:13:14.320 --> 00:13:17.040
we'll stop at the breakpoint.

00:13:17.040 --> 00:13:18.480
When it evaluates to false, we won't.

00:13:20.450 --> 00:13:23.520
The next option here is an ignore count.

00:13:23.590 --> 00:13:27.310
This is particularly useful if
you're doing event-driven debugging.

00:13:27.320 --> 00:13:32.300
So anytime you're doing anything with
mouse events or drawing to the screen,

00:13:32.300 --> 00:13:38.320
you may want to ignore a large
number of cycles through your code.

00:13:38.320 --> 00:13:41.940
As you're moving the mouse around,
you don't want the breakpoint to be hit.

00:13:42.360 --> 00:13:45.770
So you can set an ignore count, you know,
25, 50, whatever it is,

00:13:45.770 --> 00:13:50.500
and we'll ignore that breakpoint
until the threshold is exceeded.

00:13:53.350 --> 00:13:56.530
Now onto the most powerful thing
you can do with the breakpoints

00:13:56.660 --> 00:13:58.700
is you can actually add actions.

00:13:58.700 --> 00:14:01.710
So actions let you do
things like play a sound.

00:14:01.720 --> 00:14:03.840
So when a breakpoint is hit,
you can play a sound.

00:14:03.840 --> 00:14:08.080
But one of the most
useful things you can do,

00:14:08.080 --> 00:14:11.410
one of the most useful actions,
is the ability to execute

00:14:11.460 --> 00:14:15.140
commands via the debugger console.

00:14:15.140 --> 00:14:19.340
So you can actually print out the
value of a variable right from

00:14:19.340 --> 00:14:22.480
here using a breakpoint action.

00:14:23.020 --> 00:14:26.060
Now, when you combine that
with the next option,

00:14:26.060 --> 00:14:29.740
this automatically continue, by itself,
the automatically continue isn't

00:14:29.740 --> 00:14:33.140
really that useful because we're
not going to stop at the breakpoint.

00:14:33.140 --> 00:14:36.320
But if you select automatically
continue and say you print

00:14:36.320 --> 00:14:39.650
out the value of a variable,
then essentially what you're

00:14:39.680 --> 00:14:43.330
doing is you're inserting NS log
statements into your code without

00:14:43.980 --> 00:14:45.300
actually changing your code.

00:14:45.320 --> 00:14:48.140
So there's no recompiling.

00:14:48.140 --> 00:14:49.980
You can do this all while you're running.

00:14:49.980 --> 00:14:52.720
And, of course,
the best thing is that you're not

00:14:52.740 --> 00:14:57.850
going to be checking in unnecessary
NS log statements into source control.

00:14:57.960 --> 00:15:02.020
So this is a really great way to
quickly iterate when you're debugging.

00:15:02.030 --> 00:15:03.530
And I do this all the time.

00:15:07.000 --> 00:15:11.150
All right,
so now we understand the fundamentals,

00:15:11.150 --> 00:15:15.520
but to really make ourselves
effective with Xcode,

00:15:15.520 --> 00:15:18.360
we need to make it match
the way we want to work.

00:15:18.500 --> 00:15:20.870
So let's talk about doing that.

00:15:20.920 --> 00:15:24.740
To illustrate that,
I want to show you this example here.

00:15:24.740 --> 00:15:28.790
A lot of people have asked,
how do I show a console

00:15:28.890 --> 00:15:30.960
in a separate window?

00:15:30.960 --> 00:15:33.050
One of the first things people asked.

00:15:34.260 --> 00:15:37.660
And it's very, very easy in Xcode 4.

00:15:37.660 --> 00:15:42.340
You just have to understand the
way in which you tweak the UI.

00:15:42.340 --> 00:15:44.930
So that's all done through name tabs.

00:15:45.000 --> 00:15:49.460
So just like in Safari,
you can create tabs in Xcode,

00:15:49.460 --> 00:15:51.160
and you do that by pressing Command-T.

00:15:51.160 --> 00:15:53.840
And when we do that,
we see a new tab shows up.

00:15:54.100 --> 00:15:58.260
But unlike Safari, these tabs, well,
first of all, you can name them.

00:15:58.260 --> 00:16:00.660
So you can name them
something meaningful to you.

00:16:00.660 --> 00:16:03.340
But they're also very, very stateful.

00:16:03.850 --> 00:16:07.160
So as you show and hide
various bits of the UI,

00:16:07.160 --> 00:16:10.360
or as you drag them out
and you resize them,

00:16:10.360 --> 00:16:13.360
reposition them on different monitors,
all of that is persisted

00:16:13.530 --> 00:16:15.440
across launches of Xcode.

00:16:15.440 --> 00:16:20.390
So you can set Xcode up to look exactly
how you want and quit and relaunch,

00:16:20.660 --> 00:16:22.730
and it will remain that way.

00:16:24.310 --> 00:16:28.830
So in this case, I created a new tab,
and I'm going to name it console because

00:16:28.840 --> 00:16:30.810
I'm just going to show the console here.

00:16:31.080 --> 00:16:34.250
So now what I'm going to do is I'm
going to hide the navigator area.

00:16:34.600 --> 00:16:36.500
Don't worry, if you don't catch all this,
we're going to show

00:16:36.500 --> 00:16:37.760
you a demo in a minute.

00:16:37.950 --> 00:16:40.450
I'm going to drag the debug
bar all the way up to the top

00:16:40.600 --> 00:16:41.960
so we hide the editor area.

00:16:42.400 --> 00:16:43.940
And then I'm going to
hide the variables view.

00:16:43.940 --> 00:16:46.440
So now all we see is the console.

00:16:46.440 --> 00:16:47.450
So far, so good.

00:16:47.450 --> 00:16:52.280
All we need to do is drag out
that tab into its own window.

00:16:52.280 --> 00:16:55.120
And now we have a console
and a separate window.

00:16:55.120 --> 00:16:58.500
I can move it to another monitor, quit,
restart Xcode.

00:16:58.500 --> 00:17:00.800
I can see my source code,
debug navigator, console,

00:17:00.800 --> 00:17:01.650
everything at once.

00:17:02.240 --> 00:17:07.890
So this is a really nice way to configure
the UI to match the way you're working.

00:17:09.670 --> 00:17:12.570
Now that's great,
but it gets even more powerful when

00:17:12.700 --> 00:17:15.330
you combine name tabs with behaviors.

00:17:15.340 --> 00:17:17.440
So what are behaviors?

00:17:17.440 --> 00:17:23.750
Well, behaviors are a way that you
can control what Xcode does

00:17:23.750 --> 00:17:25.660
when certain things occur.

00:17:25.920 --> 00:17:33.160
So, for example, when a build succeeds,
you can have Xcode play a sound and

00:17:33.160 --> 00:17:37.210
maybe bounce the dock to give you
auditory and visual feedback that

00:17:37.210 --> 00:17:40.020
the build has completed successfully.

00:17:40.020 --> 00:17:43.150
Now, if a build failed,
maybe you want to play a different sound.

00:17:43.160 --> 00:17:48.260
So this is your way to control
Xcode's interaction with you.

00:17:49.840 --> 00:17:52.200
As far as debugging goes,
as I mentioned earlier,

00:17:52.200 --> 00:17:56.680
one of the default
behaviors is when you pause,

00:17:56.770 --> 00:18:00.680
so when you hit a breakpoint,
Xcode will show you the debug navigator.

00:18:00.680 --> 00:18:01.960
Why does it do that?

00:18:01.980 --> 00:18:05.610
Well, the goal here is to minimize
the amount of work that you

00:18:05.870 --> 00:18:09.470
have to do in configuring the
UI to get where you need to be.

00:18:09.480 --> 00:18:11.990
So the thought is when
you hit a breakpoint,

00:18:11.990 --> 00:18:14.570
you need to debug,
so you probably need to see

00:18:14.570 --> 00:18:16.650
the debug navigator to do that.

00:18:17.760 --> 00:18:20.240
Now, of course,
if that's not the way you work,

00:18:20.240 --> 00:18:21.460
it's not a problem.

00:18:21.460 --> 00:18:26.280
That's why we have this highly
customizable behaviors panel here.

00:18:26.280 --> 00:18:29.140
You can tweak a whole lot of things.

00:18:29.240 --> 00:18:31.620
So if it doesn't match
your working style,

00:18:31.620 --> 00:18:34.410
I encourage you to go
change the way it does work.

00:18:34.520 --> 00:18:39.930
And here to give you a demo of name
tabs and behaviors in Xcode 4 is Blake.

00:18:47.080 --> 00:18:48.300
Thank you, Ken.

00:18:48.490 --> 00:18:51.570
So we've heard about some
pretty powerful features to help

00:18:51.570 --> 00:18:53.530
you customize your workflow.

00:18:53.660 --> 00:18:55.830
Let's take a look at a
couple of them in action.

00:18:55.970 --> 00:19:00.650
So by default, without changing anything,
I'm gonna start a debug

00:19:00.880 --> 00:19:04.080
session and see what happens.

00:19:06.390 --> 00:19:07.460
Building Sketch.

00:19:07.460 --> 00:19:12.240
We can see as we hit this breakpoint,
the debug navigator on

00:19:12.240 --> 00:19:15.800
the left has been shown,
and the debug area at the bottom

00:19:15.820 --> 00:19:17.880
has been shown automatically.

00:19:17.960 --> 00:19:22.760
You can see on the left side
we've got the variables view.

00:19:22.760 --> 00:19:28.030
I can inspect objects with
the disclosure arrows.

00:19:28.080 --> 00:19:31.660
I can see what's inside the object,
or if it's a union or struct,

00:19:31.660 --> 00:19:33.440
I can see the fields there.

00:19:34.280 --> 00:19:37.460
And I can even change
the values if I like.

00:19:37.580 --> 00:19:40.750
And over on the right side here,
we've got the debugger console.

00:19:40.780 --> 00:19:45.010
This is where I can interact
directly with GDB or LLDB.

00:19:45.020 --> 00:19:48.630
If you're familiar with Visual Studio,
the debugger console,

00:19:48.630 --> 00:19:51.670
you can think of it similar
to the immediate window and

00:19:51.670 --> 00:19:54.810
the output window combined,
only more powerful.

00:19:57.250 --> 00:20:00.540
So that's nice,
but how did we get that for free?

00:20:00.540 --> 00:20:03.490
Well, if I go to preferences,

00:20:05.140 --> 00:20:10.440
You can take a look at the Behaviors tab,
and by default,

00:20:10.440 --> 00:20:15.940
you see that when a run pauses,
we're going to show the debug navigator,

00:20:15.950 --> 00:20:19.330
which is the navigator on the left,
and we're going to show the

00:20:19.600 --> 00:20:21.220
debugger area on the bottom.

00:20:22.470 --> 00:20:24.610
Some enclosed preferences.

00:20:24.810 --> 00:20:25.230
So that's nice.

00:20:25.300 --> 00:20:26.790
We get that for free.

00:20:26.860 --> 00:20:29.820
But what happens if
I stop the debug session?

00:20:29.900 --> 00:20:32.020
I've still got the debug
navigator on the left.

00:20:32.020 --> 00:20:34.730
I've still got the debugger
area on the bottom,

00:20:34.980 --> 00:20:36.640
but we're not debugging anymore.

00:20:36.650 --> 00:20:45.610
I can switch back to the project
navigator and I can hide the debug area,

00:20:45.700 --> 00:20:45.700
but

00:20:46.110 --> 00:20:48.130
Why don't we make that automatic?

00:20:48.260 --> 00:20:51.540
So go back to preferences,
back to behaviors.

00:20:51.610 --> 00:20:54.830
We can see there's a trigger
for when a run completes.

00:20:54.920 --> 00:20:56.870
We can say, what do we want to do?

00:20:56.970 --> 00:21:01.570
Maybe I want to show
the project navigator.

00:21:01.590 --> 00:21:02.440
All right.

00:21:02.440 --> 00:21:05.290
Maybe I want to hide--

00:21:05.940 --> 00:21:07.560
The debugger.

00:21:07.630 --> 00:21:09.940
So with those two changes,
let's have a look again.

00:21:09.970 --> 00:21:13.510
If I run one more debug session,

00:21:14.750 --> 00:21:18.680
So we saw we switched from the project
navigator to the debug navigator.

00:21:18.680 --> 00:21:22.270
Even though we had the debug area closed,
it came back up because that's

00:21:22.280 --> 00:21:23.850
what we've told it to do.

00:21:24.140 --> 00:21:27.660
And now if I stop the debug session,
either with the stop button in the

00:21:27.660 --> 00:21:32.430
toolbar or by simply quitting the app,
we see that we now have the project

00:21:32.430 --> 00:21:35.550
navigator and the debug area went away.

00:21:39.650 --> 00:21:46.240
Pretty nice, but maybe,
I personally like to work this way,

00:21:46.240 --> 00:21:51.070
but it might be a little jarring to
have one window constantly changing

00:21:51.070 --> 00:21:55.270
state every time you go into a debug
session and you come back out of it.

00:21:55.510 --> 00:21:58.100
So let's make a new tab.

00:21:58.100 --> 00:22:02.300
As Ken mentioned, I think it's Command-T,
same as Safari.

00:22:02.300 --> 00:22:05.160
I'm going to name this tab by
double-clicking on the name.

00:22:05.160 --> 00:22:07.300
I'm going to call this Debug.

00:22:08.460 --> 00:22:12.060
So we now have a tab called Debug.

00:22:12.060 --> 00:22:14.290
When we make it,
it looks exactly the same as

00:22:14.290 --> 00:22:15.980
the previous tab we had open.

00:22:16.000 --> 00:22:21.580
But if I go back to preferences,
we're gonna see a lot of preferences.

00:22:24.880 --> 00:22:27.040
Slow Mouse.

00:22:27.130 --> 00:22:32.920
So I can say when a run pauses,
say when we hit a breakpoint,

00:22:32.920 --> 00:22:34.660
these are the default settings.

00:22:34.680 --> 00:22:38.630
We show the debug navigator,
we show the debug area at the bottom.

00:22:38.640 --> 00:22:42.520
I'm going to add to that,
I'm going to say show the debug tab.

00:22:42.520 --> 00:22:46.040
So show tab,
tell Xcode which tab you want to show.

00:22:46.050 --> 00:22:48.110
It's the one we call debug.

00:22:48.110 --> 00:22:50.140
Going to close preferences.

00:22:50.140 --> 00:22:52.800
Go back to the main tab.

00:22:52.820 --> 00:22:55.470
One more debug session here.

00:22:57.500 --> 00:23:00.400
And we see that the debug
tab has come frontmost.

00:23:00.400 --> 00:23:04.660
We've got the debug
navigator and the debug area.

00:23:05.100 --> 00:23:10.850
And as soon as we stop,
we can go right back to the main tab and

00:23:11.500 --> 00:23:13.390
It's mostly the way we left it.

00:23:13.500 --> 00:23:17.220
So that's a bit more helpful.

00:23:17.220 --> 00:23:21.390
Maybe if you want to persist some state,
if you wanted to interact directly

00:23:21.470 --> 00:23:24.780
with GDB and print out something
complex and then have it to

00:23:24.900 --> 00:23:27.990
go back later and refer to,
you can have different tabs.

00:23:28.020 --> 00:23:29.880
But it doesn't stop there.

00:23:29.880 --> 00:23:34.520
How many people use multiple windows,
or multiple monitors, rather?

00:23:34.520 --> 00:23:36.600
Maybe you want to have
more than one window.

00:23:36.600 --> 00:23:38.320
Oh, yeah, I do too.

00:23:38.320 --> 00:23:41.480
How many people like to interact
directly with GDB or LLDB?

00:23:41.500 --> 00:23:43.240
And they just want the
UI to get out of the way.

00:23:43.260 --> 00:23:44.670
Yeah, yeah.

00:23:44.780 --> 00:23:47.820
All right,
so I'm going to make another tab.

00:23:47.820 --> 00:23:49.060
Command-T, same as Safari.

00:23:49.060 --> 00:23:51.660
I'm going to call this one Console.

00:23:53.970 --> 00:23:56.200
This is my favorite part of the demo.

00:23:56.250 --> 00:23:59.010
I'm going to pull this
out into its own window.

00:23:59.770 --> 00:24:05.010
We're going to hide the navigator.

00:24:06.130 --> 00:24:09.330
Going to show the debug area.

00:24:09.410 --> 00:24:13.420
These are all with the buttons
in the toolbar at the top right.

00:24:13.880 --> 00:24:18.980
I'm going to pull the debug
area all the way to the top.

00:24:19.140 --> 00:24:23.560
I'm going to use the buttons in the
debug bar to hide the variables view.

00:24:23.570 --> 00:24:27.750
And just to get those last few pixels,
I'm going to Control-click the title bar

00:24:27.830 --> 00:24:30.610
and get rid of the toolbar altogether.

00:24:31.160 --> 00:24:35.100
Now we've got pretty much a
full screen console window.

00:24:35.140 --> 00:24:37.300
Make this big.

00:24:37.380 --> 00:24:42.180
I'm going to make my workspace
window just a bit smaller,

00:24:42.250 --> 00:24:44.320
get some real estate here.

00:24:46.370 --> 00:24:53.270
So now we're starting to look like
a proper Unix debugging environment.

00:24:56.770 --> 00:25:00.860
A nice trick, I'm actually going to
close the console window.

00:25:01.020 --> 00:25:03.440
Sounds crazy, but stay with it.

00:25:03.560 --> 00:25:06.360
I'm going to say that when
a run generates output,

00:25:06.380 --> 00:25:08.600
say if you've got a log statement,

00:25:08.710 --> 00:25:14.200
I want to show the tab called console.

00:25:14.200 --> 00:25:17.230
If I can get the mouse to cooperate.

00:25:23.160 --> 00:25:26.540
So we're going to show the console tab.

00:25:26.540 --> 00:25:28.860
And we're not going to show the debugger.

00:25:28.860 --> 00:25:31.090
We're just going to bring it up as is.

00:25:32.500 --> 00:25:34.840
I'm going to disable this breakpoint.

00:25:34.850 --> 00:25:37.810
Now if I run one more time,
either Command-R or the

00:25:38.120 --> 00:25:40.370
Run button in the toolbar,

00:25:41.260 --> 00:25:45.720
Since we have some,
I logged that my window was loaded,

00:25:45.720 --> 00:25:50.240
so the debug console window,
even though the window was closed,

00:25:50.280 --> 00:25:52.530
it comes back up,
it's the way we configured it,

00:25:52.560 --> 00:25:54.130
and now I can interact
directly with the debugger.

00:25:54.180 --> 00:25:56.720
If I pause the debugger, that is.

00:25:58.810 --> 00:26:00.560
So we stopped at a breakpoint.

00:26:00.580 --> 00:26:04.700
The behaviors say, show the debug tab,
show that navigator, show the debug area.

00:26:04.750 --> 00:26:09.080
So you can see the behaviors really
doing stuff automatically for me.

00:26:09.380 --> 00:26:13.300
In this case, I was going to show
that I can print object,

00:26:13.310 --> 00:26:16.190
self-- oh, no, I'm in main.

00:26:16.280 --> 00:26:16.870
There's no main.

00:26:16.960 --> 00:26:18.360
There's no self in main.

00:26:18.370 --> 00:26:22.200
Well, if there were objects,
we could print them there.

00:26:22.290 --> 00:26:26.020
So I'm now interacting
directly with GDB or LLDB,

00:26:26.020 --> 00:26:27.880
as the case may be.

00:26:29.000 --> 00:26:32.780
and that is behaviors
and tabs and windows.

00:26:32.810 --> 00:26:38.240
So we've seen that with behaviors,
named tabs, and even separate windows,

00:26:38.240 --> 00:26:42.600
Xcode 4 gives you tremendous flexibility
to customize your debugging workflow.

00:26:42.620 --> 00:26:45.190
And with that, back to Ken.

00:26:51.550 --> 00:26:52.800
Thanks, Blake.

00:26:52.830 --> 00:26:54.900
Some good stuff there.

00:26:54.940 --> 00:26:59.770
Okay, this next thing that I want to show
you is a feature aimed squarely

00:26:59.800 --> 00:27:01.680
at making you more productive.

00:27:01.890 --> 00:27:07.600
So there's a lot of great UIs we've
seen for debugging in Xcode 4,

00:27:07.630 --> 00:27:12.200
but there are times where you just
need to interact with the console.

00:27:12.830 --> 00:27:18.200
Now, how many of you have variable
names that look like this?

00:27:18.380 --> 00:27:18.800
It's okay.

00:27:18.800 --> 00:27:19.500
That's good.

00:27:19.560 --> 00:27:20.660
That's a good thing.

00:27:20.770 --> 00:27:24.750
Long descriptive variable names
are good in your source code.

00:27:24.960 --> 00:27:28.660
Not so good when you have to
interact with the console.

00:27:29.200 --> 00:27:33.450
Now you might say, well,
I can just copy and paste this from

00:27:33.450 --> 00:27:36.050
my source code into my console.

00:27:36.300 --> 00:27:36.890
Yeah, you could.

00:27:36.890 --> 00:27:40.740
You have to have that source code
visible and scroll to the right spot.

00:27:41.000 --> 00:27:42.460
But you can do it.

00:27:42.500 --> 00:27:44.220
A little cumbersome, but it's doable.

00:27:44.270 --> 00:27:50.850
But now what if I want to print
the result of a method like this?

00:27:51.210 --> 00:27:54.840
Copying and pasting isn't
going to help me so much here.

00:27:54.860 --> 00:27:58.700
Now, maybe you could copy and paste it,
and then you have to go to each argument,

00:27:58.700 --> 00:28:00.700
and maybe you have that
long variable name again,

00:28:00.700 --> 00:28:01.780
and you have to type that out.

00:28:02.010 --> 00:28:05.680
So it's just not a really
nice way to interact.

00:28:07.200 --> 00:28:11.600
Wouldn't it be nice if Xcode could
help us out a little bit here?

00:28:11.600 --> 00:28:15.600
Maybe you're saying,
there's some great stuff in the

00:28:15.600 --> 00:28:19.590
source code editor that helps
us out with typing quite a bit.

00:28:19.640 --> 00:28:24.240
Well, in Xcode 4,
we've added full console completions,

00:28:24.310 --> 00:28:28.600
so we've taken that
great engine we have...

00:28:33.170 --> 00:28:36.120
We've taken the fantastic engine
we have in the source code editor,

00:28:36.260 --> 00:28:39.580
and it's that same engine that's
feeding the completions to the console.

00:28:39.580 --> 00:28:44.650
So I should also point out that
it's very context sensitive.

00:28:44.660 --> 00:28:48.240
So when you're stopped at a breakpoint,
we know exactly what file and

00:28:48.250 --> 00:28:50.050
line number you're stopped at.

00:28:50.290 --> 00:28:54.350
And the completions that you get are
relative to that line in the code,

00:28:54.360 --> 00:28:57.500
just like if you were typing
in the code at that line.

00:28:58.050 --> 00:29:00.720
So of course we can get
our variable completions,

00:29:00.770 --> 00:29:03.350
and we can also get method completions.

00:29:03.440 --> 00:29:06.200
So we get those nice little
blue bubbles that we can tab

00:29:06.210 --> 00:29:08.160
between and delete and type over.

00:29:08.160 --> 00:29:10.520
And so I think this is
my favorite feature,

00:29:10.620 --> 00:29:13.040
and it's a huge,
huge time saver when you're

00:29:13.040 --> 00:29:14.740
dealing with a console.

00:29:17.610 --> 00:29:22.340
So let's move on to another more
workflow-related feature in Xcode 4.

00:29:22.340 --> 00:29:27.570
And that's the ability to debug
multiple processes at the same time.

00:29:27.620 --> 00:29:29.260
So that's new in Xcode 4.

00:29:29.260 --> 00:29:34.790
The canonical example of this is when
you have a client-server application.

00:29:34.820 --> 00:29:36.640
So you have a client, you have a server.

00:29:36.640 --> 00:29:39.980
You need to run them both at the
same time because you need to,

00:29:39.980 --> 00:29:42.720
you're debugging the interaction
between the two of them.

00:29:42.850 --> 00:29:46.140
So they have to be both running with
potentially breakpoints in each one.

00:29:47.350 --> 00:29:52.520
But it turns out that there's a much more
general use case for this that really

00:29:52.520 --> 00:29:54.840
applies to probably everybody here.

00:29:54.840 --> 00:29:57.740
And that is this.

00:29:57.740 --> 00:30:03.460
So if we're running our application,
and we're running along,

00:30:03.460 --> 00:30:06.450
and we bump into a bug,
and maybe there was a lot of

00:30:06.450 --> 00:30:10.900
reproduction steps to get to the point
where we could reproduce this bug,

00:30:10.920 --> 00:30:13.700
but we've done all that,
and now it's happening every time.

00:30:13.700 --> 00:30:18.040
And so we look through our code,
we find what we think is an easy fix,

00:30:18.040 --> 00:30:21.260
and we want to make that fix,
but we don't really want to stop

00:30:21.370 --> 00:30:23.680
the current process because,
I don't know about you,

00:30:23.680 --> 00:30:27.330
but I like to be able to verify, okay,
I can reproduce it here,

00:30:27.370 --> 00:30:31.720
and then I have a fixed case over
here where it doesn't reproduce.

00:30:31.720 --> 00:30:34.260
So if I can see those
both at the same time,

00:30:34.260 --> 00:30:38.380
reproduce bug, don't reproduce bug,
then that makes me happy and

00:30:38.500 --> 00:30:41.350
makes me confident that I've
actually fixed the problem.

00:30:41.400 --> 00:30:44.360
So what we can do is we
have our buggy copy running.

00:30:44.360 --> 00:30:46.360
Now we've fixed our code.

00:30:46.360 --> 00:30:49.710
We can press run again,
and Xcode will say, "Well,

00:30:49.710 --> 00:30:51.360
you already have a process running.

00:30:51.360 --> 00:30:52.340
What do you want to do?

00:30:52.360 --> 00:30:54.650
Do you want to stop your
current process?" Well,

00:30:54.650 --> 00:30:56.360
in this case, we don't want to do that.

00:30:56.360 --> 00:30:59.360
We want to add another copy,
so we want to build

00:30:59.360 --> 00:31:02.360
and run the fixed copy.

00:31:02.360 --> 00:31:04.340
So we say add.

00:31:04.390 --> 00:31:07.120
And then we're going
to run the next copy.

00:31:07.190 --> 00:31:10.420
So we press add,
and now we'll notice that the debug

00:31:10.430 --> 00:31:12.540
navigator shows us two processes.

00:31:12.560 --> 00:31:16.440
And to help us differentiate
between the two,

00:31:16.440 --> 00:31:19.930
you can see that it's added the
process identifier there for us.

00:31:20.240 --> 00:31:24.140
And so we have our buggy copy on top,
and then we have our hopefully

00:31:24.540 --> 00:31:26.380
fixed copy on the bottom.

00:31:26.380 --> 00:31:29.300
So we can then go
verify that we fixed it.

00:31:29.430 --> 00:31:33.160
And to really help prove it to ourselves,
we can go back to the buggy copy,

00:31:33.160 --> 00:31:36.920
do the exact right reproduction steps,
go to the fixed copy.

00:31:36.920 --> 00:31:38.510
Do those reproduction steps.

00:31:38.600 --> 00:31:42.120
And this is a really nice
way to help prove to yourself

00:31:42.120 --> 00:31:44.060
that you fixed something.

00:31:44.060 --> 00:31:47.720
And it turns out there's actually
some other use cases for this as well.

00:31:47.720 --> 00:31:52.580
Not so much related to debugging,
but if you're doing some animation, say.

00:31:52.680 --> 00:31:55.320
Say you're sliding in a view,
and you're debating,

00:31:55.320 --> 00:31:59.320
should we be using a quarter second,
or should we be using a half second?

00:31:59.340 --> 00:32:03.730
Well, the best way to do this is
to run both at the same time.

00:32:03.830 --> 00:32:05.840
Run one with the animation
at a quarter second.

00:32:05.840 --> 00:32:07.080
And run a copy.

00:32:07.100 --> 00:32:08.460
Run a copy with the
animation at half a second.

00:32:08.460 --> 00:32:10.360
Otherwise,
it can be very hard to evaluate

00:32:10.360 --> 00:32:12.110
them when they're not side by side.

00:32:12.120 --> 00:32:15.120
So that's another really nice
use case that I use this for.

00:32:17.750 --> 00:32:22.910
Here to give us a demo of multiprocess
debugging in action is Anders.

00:32:27.600 --> 00:32:29.950
All right,
so Ken gave a couple of examples of

00:32:29.950 --> 00:32:31.940
good use of multiprocess debugging.

00:32:31.940 --> 00:32:37.370
Another one is when you have an iOS app,
and let's say you have a game

00:32:37.500 --> 00:32:40.440
that does some peer-to-peer
networking for multiplayer gaming.

00:32:40.440 --> 00:32:43.740
One of the demos we saw in the
developer tools kickoff session

00:32:43.810 --> 00:32:48.070
on Monday was a simple space game,
Touch Fighter, and that game actually has

00:32:48.150 --> 00:32:50.200
some multiplayer capabilities.

00:32:50.460 --> 00:32:54.920
So you can start a server
game on one machine,

00:32:54.920 --> 00:32:57.900
an iPad,
and then you can also go ahead and

00:32:57.900 --> 00:33:02.920
run the same game on a different
iOS device and join the existing

00:33:02.930 --> 00:33:04.660
game and do multiplayer this way.

00:33:04.660 --> 00:33:06.490
So let's go ahead and
take a look at that.

00:33:06.490 --> 00:33:10.650
Turns out there was a bug conveniently
for the demo that involves sending

00:33:10.990 --> 00:33:14.520
the name of the device you want
to connect to when you're trying

00:33:14.520 --> 00:33:16.460
to join a multiplayer game.

00:33:16.460 --> 00:33:18.990
So to take a look at that,
I'm going to go ahead

00:33:19.010 --> 00:33:20.400
and run for a second.

00:33:20.500 --> 00:33:23.260
So I'm going to go ahead and
run the first on the device.

00:33:23.260 --> 00:33:24.760
So I have an iPad 2 here.

00:33:24.760 --> 00:33:27.420
And I'm going to go ahead
and switch to the iPad,

00:33:27.420 --> 00:33:29.670
show you what's on the screen there.

00:33:31.400 --> 00:35:28.900
[Transcript missing]

00:35:31.100 --> 00:35:34.340
So here we go.

00:35:34.350 --> 00:35:35.600
It's launching on the iPad again.

00:35:35.600 --> 00:35:37.300
Looks just like the last time.

00:35:37.300 --> 00:35:42.410
Now I hit multiplayer,
and I choose to host a game.

00:35:42.430 --> 00:35:45.280
And we see now that it's
stopping at this breakpoint here.

00:35:45.320 --> 00:35:48.580
So, and meanwhile,
if I go to the debug tab,

00:35:48.600 --> 00:35:51.910
you'll see we already have
Touch Fighters running in the simulator.

00:35:51.970 --> 00:35:52.810
A little bit hard to see here.

00:35:52.960 --> 00:35:55.300
But,
and then the other instance is paused,

00:35:55.300 --> 00:35:56.900
and we see the breakpoint.

00:35:57.010 --> 00:36:00.110
So as I step over here,
I'm going to go ahead and

00:36:00.110 --> 00:36:02.440
hover over the unique name,
Ivar.

00:36:02.770 --> 00:36:04.900
And I can see here,
if you look on the right side here,

00:36:04.900 --> 00:36:08.540
that we see the big long hex string,
which is the identifier of the device,

00:36:08.550 --> 00:36:12.480
and the human readable name separated
by a colon at the very end there.

00:36:12.520 --> 00:36:15.240
So this says that the server,
this is just an internal

00:36:15.240 --> 00:36:18.650
protocol that this game is using,
and it's when it's advertising

00:36:18.650 --> 00:36:19.880
the Bonjour service.

00:36:19.910 --> 00:36:25.150
And then it says it's actually sending
the human readable name of my iPad.

00:36:25.190 --> 00:36:27.100
So I know that the problem
is on the client side,

00:36:27.100 --> 00:36:32.190
because the server is sending what
I expect to do based on my coding.

00:36:32.300 --> 00:36:35.680
So let me go ahead and resume
then on the server side.

00:36:35.740 --> 00:36:40.740
And instead,
I'm going to pause on the client side.

00:36:40.810 --> 00:36:44.810
What I'm going to go ahead and do here,
let me go ahead and go to a breakpoint.

00:36:44.830 --> 00:36:47.560
I know my code well, so I know that the
init with name address,

00:36:47.560 --> 00:36:50.160
init with name method is the
one that gets called whenever

00:36:50.160 --> 00:36:53.720
I go to set up a new connection.

00:36:53.760 --> 00:36:56.590
I'm going to go ahead and start
it again in the simulator.

00:36:56.600 --> 00:36:58.500
If the game had a way
to go back and forth,

00:36:58.500 --> 00:37:00.820
I would just do that.

00:37:00.840 --> 00:37:05.080
So it's going in the simulator.

00:37:05.080 --> 00:37:07.670
Let me see here.

00:37:09.100 --> 00:37:14.210
I'm going to go ahead and quit
the simulator here and restart it.

00:37:15.710 --> 00:37:21.380
And now this time, I have multiplayer,
I join a game, and I see that I break

00:37:21.380 --> 00:37:22.360
on the break point.

00:37:22.550 --> 00:37:25.110
And meanwhile,
the game is running on the iPad as well.

00:37:25.120 --> 00:37:27.540
So now in this case,
as I step through here,

00:37:27.540 --> 00:37:30.100
I can use the normal
debugging techniques,

00:37:30.100 --> 00:37:34.640
looking, either hovering over a
particular variable or opening

00:37:34.740 --> 00:37:36.820
up the debug area down here.

00:37:36.820 --> 00:37:40.620
And in fact, if I take a look at this,
I'll see that this length here,

00:37:40.620 --> 00:37:42.940
I'm taking the length,
but that's supposed to be location.

00:37:43.620 --> 00:37:45.800
In this particular case,
it's looking for the colon.

00:37:45.800 --> 00:37:47.820
I see the code completion kicking in.

00:37:47.820 --> 00:37:51.000
And then to verify that
I fixed the problem,

00:37:51.000 --> 00:37:53.860
I'm just going to go ahead and run
one more time in the simulator.

00:37:55.860 --> 00:37:58.460
Multiplayer, I hit join a game,
choose my spaceship,

00:37:58.460 --> 00:38:00.950
and now I can actually see, okay,
I fixed my bug,

00:38:00.950 --> 00:38:02.810
now I can see the human readable name.

00:38:02.820 --> 00:38:05.890
So this is one way,
just an example of how you can go back

00:38:05.890 --> 00:38:10.760
and forth between two instances of,
in this case, a game that has multiplayer

00:38:10.840 --> 00:38:13.980
capabilities and see,
well, what's the server sending,

00:38:13.980 --> 00:38:17.090
what is the client receiving,
and you can really look at both of those.

00:38:17.100 --> 00:38:19.610
Of course, you could do this with
two different machines,

00:38:19.710 --> 00:38:22.030
but it's a bit more convenient
to do it in one copy of your

00:38:22.030 --> 00:38:23.480
source code on one machine.

00:38:24.020 --> 00:38:26.420
And if you have multiple
devices attached,

00:38:26.420 --> 00:38:30.360
let's say an iPod Touch and an iPad,
you can run on each of the various

00:38:30.360 --> 00:38:34.830
devices and really have two or more,
three or four instances

00:38:34.830 --> 00:38:36.280
running at the same time.

00:38:36.300 --> 00:38:40.710
So with that, a little demo,
I want to hand back to Ken,

00:38:40.710 --> 00:38:47.110
and he's going to show you some
other cool features in Xcode 4.

00:38:47.120 --> 00:38:50.000
Thank you, Ken.

00:38:53.670 --> 00:38:54.020
Great.

00:38:54.120 --> 00:38:56.400
Thank you, Anders.

00:38:56.490 --> 00:38:59.700
So finally today,
I'm excited to show you the new

00:38:59.700 --> 00:39:05.040
integrated OpenGL ES debugger in Xcode 4.

00:39:05.170 --> 00:39:11.580
So if you've ever written OpenGL code
and you've had a bug that resulted in,

00:39:11.580 --> 00:39:14.470
say, a black screen,
that's a pretty typical

00:39:14.470 --> 00:39:19.580
result of an OpenGL bug,
you might not have any idea what to do.

00:39:20.610 --> 00:39:24.380
Well,
the new OpenGL ES debugger makes it much,

00:39:24.720 --> 00:39:29.990
much easier to debug these kinds of
things visually rather than having to

00:39:29.990 --> 00:39:32.340
sprinkle printouts throughout your code.

00:39:32.380 --> 00:39:33.680
So let's take a look.

00:39:35.610 --> 00:39:38.950
So here I'm running my app, TouchFighter,
which we've seen a bit this week.

00:39:39.010 --> 00:39:43.680
And you'll notice,
since this is linking against OpenGL ES,

00:39:43.680 --> 00:39:47.500
and I've just started running,
that this little camera icon

00:39:47.500 --> 00:39:49.260
pops into the debug bar.

00:39:49.260 --> 00:39:51.600
That's the frame capture button.

00:39:51.600 --> 00:39:56.270
So it says, when I press this,
initiate a frame capture and capture

00:39:56.270 --> 00:40:00.800
all the OpenGL draw calls involved
in a single frame of OpenGL.

00:40:01.780 --> 00:40:03.640
Now, there's also another
way to initiate that,

00:40:03.750 --> 00:40:05.100
and that's through a breakpoint.

00:40:05.100 --> 00:40:09.450
So we can set a breakpoint,
and we can add an action and

00:40:09.450 --> 00:40:14.150
set that action to be the
capture OpenGL frame action.

00:40:14.160 --> 00:40:18.320
So when Xcode hits that breakpoint,
it will automatically initiate

00:40:18.650 --> 00:40:20.210
a frame capture for us.

00:40:22.530 --> 00:40:27.770
Now, once that capture is complete,
Xcode will show us the results.

00:40:27.900 --> 00:40:29.480
And here's what it'll look like.

00:40:29.630 --> 00:40:35.020
So in the main editor area there,
you can see the frame buffer viewers.

00:40:35.180 --> 00:40:37.710
So here we have two frame buffers.

00:40:37.820 --> 00:40:39.180
We have the color one.

00:40:39.180 --> 00:40:43.110
That's the actual colors you'd
see on your iPad or your iPhone.

00:40:43.260 --> 00:40:46.510
And then you have the
depth buffer as well.

00:40:46.620 --> 00:40:51.560
On the left side in the debug navigator,
you'll notice that we're not seeing the

00:40:51.560 --> 00:40:56.220
normal threads and stacks any longer,
but we're seeing all of the OpenGL draw

00:40:56.300 --> 00:40:59.000
calls used to generate this frame.

00:40:59.000 --> 00:41:02.950
Now, you'll also notice here, too,
that those OpenGL draw calls

00:41:02.950 --> 00:41:06.320
are organized rather nicely
into these little folders,

00:41:06.570 --> 00:41:08.410
these little yellow folders.

00:41:08.920 --> 00:41:12.410
So the things that say stars, planet,
mothership,

00:41:12.750 --> 00:41:17.410
those are marker groups that the
developer actually inserted into their

00:41:17.410 --> 00:41:22.260
own code to help them logically group
things and eventually help them debug.

00:41:22.260 --> 00:41:26.740
Now, you can add these yourself
with these new functions.

00:41:26.740 --> 00:41:30.820
So you can call glPushGroupMarkerApple,
and then you give it a name.

00:41:30.820 --> 00:41:34.160
Then you do all your drawings,
all your OpenGL drawing, you do that.

00:41:34.180 --> 00:41:36.260
And then you say glPopGroupMarkerApple.

00:41:36.260 --> 00:41:38.740
And that will be the name of the marker.

00:41:38.740 --> 00:41:39.690
And that will be the end of the folder.

00:41:39.700 --> 00:41:41.840
And, of course,
you can nest these arbitrarily deep

00:41:41.840 --> 00:41:43.320
so you can have nested folders.

00:41:43.340 --> 00:41:48.440
And this gives you a lot of power to
organize your draw calls so that you

00:41:48.440 --> 00:41:51.500
can see them nice and neatly in Xcode.

00:41:53.430 --> 00:41:56.640
Okay,
now when we slide open the debug area,

00:41:56.640 --> 00:42:02.180
we notice that we don't see
the normal variables view

00:42:02.180 --> 00:42:04.330
and the console any longer.

00:42:04.340 --> 00:42:06.240
What we see are two variables views.

00:42:06.240 --> 00:42:11.290
And these variables views are
showing us the OpenGL state.

00:42:11.310 --> 00:42:14.360
And just like in the
normal variables view,

00:42:14.440 --> 00:42:17.580
we'll see values that
have changed between the

00:42:17.580 --> 00:42:19.940
OpenGL draw calls in this case.

00:42:20.540 --> 00:42:23.480
When values change,
we'll see those highlighted in blue.

00:42:23.480 --> 00:42:27.160
So it's easy to identify what's
changing between draw calls.

00:42:27.180 --> 00:42:29.030
Useful, very useful in debugging.

00:42:29.040 --> 00:42:31.040
And now let's show the assistant.

00:42:33.020 --> 00:42:36.760
So we show the assistant,
and we can see all of the resources

00:42:36.900 --> 00:42:38.270
used to build up this frame.

00:42:38.280 --> 00:42:45.100
So resources are things like textures,
shaders, all those things that are going

00:42:45.100 --> 00:42:47.620
into actually drawing the frame.

00:42:47.620 --> 00:42:50.520
And of course,
you can double-click on any

00:42:50.700 --> 00:42:53.630
of these items to view it,
to inspect it,

00:42:53.670 --> 00:42:56.100
maybe find defects if that's
what you're looking for.

00:42:56.100 --> 00:43:00.860
In this case, it's an image,
but some of them are matrices of numbers.

00:43:01.640 --> 00:43:05.680
But just know that you can see all of the
resources right from the assistant view.

00:43:05.680 --> 00:43:10.650
And here to give us a demo of the
OpenGL ES debugger and Xcode 4 is Anders.

00:43:15.100 --> 00:43:17.000
Hello again.

00:43:17.000 --> 00:43:17.610
All right.

00:43:17.630 --> 00:43:22.070
So we're going to go ahead
and stay with Touch Fighter.

00:43:22.270 --> 00:43:23.490
We fixed the network problem.

00:43:23.660 --> 00:43:25.870
Let's go ahead and run
it on the device again.

00:43:26.160 --> 00:43:30.820
And you may recall that on Monday,
one of my colleagues used

00:43:30.920 --> 00:43:35.430
the OpenGL ES debugger to
diagnose and to fix a problem.

00:43:35.530 --> 00:43:39.990
And the -- let's go ahead and quit that.

00:43:39.990 --> 00:43:39.990
Hold on.

00:43:40.260 --> 00:43:43.200
One of my colleagues used
the OpenGL S debugger to

00:43:43.850 --> 00:43:49.540
find and fix a problem in the
Touch Fighter drawing code.

00:43:49.590 --> 00:43:54.260
And that had to do with the spaceship
and the wings on top of the spaceship.

00:43:54.470 --> 00:43:59.060
And now, since Monday,
apparently somebody has gone

00:43:59.060 --> 00:44:00.990
and broken another part of it,
because now one of the

00:44:00.990 --> 00:44:02.170
other spaceships is black.

00:44:02.250 --> 00:44:06.080
So when the device is up and running,
let's go ahead and figure that out

00:44:06.270 --> 00:44:09.120
and see what's happening there.

00:44:10.230 --> 00:44:11.650
I'm going to go ahead
and reboot the device.

00:44:11.740 --> 00:44:14.640
Did I mention this is
pre-release software?

00:44:14.640 --> 00:44:17.290
If you find any bugs,
we would love for you to

00:44:17.390 --> 00:44:20.970
report that on Bug Reporter,
and we'll be delighted

00:44:21.650 --> 00:44:23.370
to take a look at it.

00:44:23.490 --> 00:44:26.340
Meanwhile,
let me go ahead and talk to you a

00:44:26.340 --> 00:44:33.060
little bit about how we would debug this
without having the OpenGLS debugger.

00:44:33.380 --> 00:44:38.110
One of the common things that you might
do is to set -- to add log statements,

00:44:38.110 --> 00:44:39.610
to set breakpoints.

00:44:39.720 --> 00:44:43.640
If you've done OpenGLS debugging,
one of the things that you know

00:44:43.640 --> 00:44:47.300
is that setting the state may
actually affect what gets drawn

00:44:47.300 --> 00:44:50.170
later because it's very stateful.

00:44:50.170 --> 00:44:56.100
So OpenGL consists of a lot of set
state calls followed by drawing calls.

00:44:56.100 --> 00:45:01.220
And so when -- and the drawing calls
are the ones that actually cause

00:45:01.220 --> 00:45:03.920
the bits to get drawn on the screen.

00:45:04.190 --> 00:45:06.990
So the way it basically works
is there is a command stream.

00:45:07.090 --> 00:45:09.880
And you end up calling set state,
set state, set state,

00:45:09.880 --> 00:45:12.290
upload this texture, upload this shader.

00:45:12.290 --> 00:45:16.790
And then you actually say, okay,
now draw something for me.

00:45:17.000 --> 00:45:21.890
And so as Ken mentioned,
you can insert markers and cause the

00:45:22.020 --> 00:45:27.410
objects to -- cause the draw calls to
be grouped into statement -- into groups

00:45:27.490 --> 00:45:30.190
that are logical for your problem domain.

00:45:30.260 --> 00:45:35.510
So whether it's a game or scientific
visualization or anything else like that.

00:45:36.030 --> 00:45:42.260
And we also have added API in
iOS 5 to let you label resources

00:45:42.260 --> 00:45:46.500
such as textures and shaders and
give them human readable names.

00:45:46.630 --> 00:45:50.480
And these are no ops
unless you are debugging.

00:45:50.500 --> 00:45:54.670
So they only show up while debugging,
and they don't have any other

00:45:54.670 --> 00:45:56.530
performance costs at all.

00:45:56.650 --> 00:45:59.150
So the device is booting here,
and as soon as it's ready,

00:45:59.310 --> 00:46:00.630
we're going to try again.

00:46:00.750 --> 00:46:05.720
So let me show you meanwhile,
if I go to the breakpoints,

00:46:05.730 --> 00:46:09.140
The way to set the breakpoint for,
let's say we want to go into the code

00:46:09.140 --> 00:46:10.920
here that renders the mothership.

00:46:11.040 --> 00:46:12.940
We see a whole bunch
of draw elements calls.

00:46:12.940 --> 00:46:16.900
And if we edit the breakpoint,
set a breakpoint here,

00:46:16.900 --> 00:46:20.330
and this is where we want to,
we can actually run an

00:46:20.340 --> 00:46:24.260
AppleScript command,
or we can capture an OpenGL frame.

00:46:24.260 --> 00:46:28.990
And I think my device is up and running,
so I'm going to stop the ad libbing,

00:46:28.990 --> 00:46:31.380
and we'll see if we can do this again.

00:46:31.380 --> 00:46:33.660
All right, I'm going to select my device.

00:46:33.660 --> 00:46:35.420
I'm going to go ahead and run.

00:46:37.560 --> 00:46:42.460
And as Touch Fighter is coming up,
let me go ahead and switch to the screen.

00:46:42.460 --> 00:46:44.440
There we go.

00:46:44.440 --> 00:46:46.460
Nothing a reboot can't fix.

00:46:46.460 --> 00:46:47.720
All right.

00:46:47.730 --> 00:46:49.820
So I'm going to go ahead and choose
single player mode this time.

00:46:49.820 --> 00:46:50.860
And darn it.

00:46:50.860 --> 00:46:55.070
Somebody's broken so that
now the mothership is black.

00:46:55.250 --> 00:46:55.620
Okay.

00:46:55.620 --> 00:46:57.020
Matthew fixed the upper wings.

00:46:57.020 --> 00:46:59.820
Can't go to a conference for a
week without something breaking.

00:46:59.820 --> 00:47:01.590
But let's figure out what's going on,
though.

00:47:01.610 --> 00:47:04.320
So again,
we hit the OpenGL frame capture.

00:47:04.320 --> 00:47:07.300
And in this case,
I'm going to go ahead now

00:47:07.300 --> 00:47:07.480
and switch to the screen.

00:47:07.500 --> 00:47:10.390
back to the Mac.

00:47:12.640 --> 00:47:15.960
And we see that on my Mac,
I'm seeing the exact thing

00:47:15.960 --> 00:47:17.620
that's shown on the iPad screen.

00:47:17.620 --> 00:47:20.680
And of course, this works with iPod
Touch or iPhone as well.

00:47:20.730 --> 00:47:24.840
So as you've seen a couple times already,
here's the render buffer.

00:47:24.840 --> 00:47:28.260
The frame buffer is actually the
one that's shown on the device.

00:47:28.260 --> 00:47:30.740
And I can also see a depth buffer here.

00:47:30.740 --> 00:47:34.850
And this is a buffer that has
an element corresponding to

00:47:34.850 --> 00:47:39.120
each pixel in the frame buffer,
but it stores the depth value.

00:47:39.680 --> 00:47:44.140
So this lets you do hidden surface
removal or hidden pixel occlusion.

00:47:44.190 --> 00:47:49.640
And if we were using a stencil buffer,
which is another OpenGL resource,

00:47:49.660 --> 00:47:51.820
then I could also see that here.

00:47:51.820 --> 00:47:53.170
This game doesn't make use of that.

00:47:53.260 --> 00:47:54.390
So that's why that's disabled.

00:47:54.400 --> 00:48:00.230
On the left here, as Ken told you,
we have the various groups.

00:48:00.240 --> 00:48:02.430
We have all the draw calls,
the entire command stream,

00:48:02.430 --> 00:48:04.740
all the state and draw calls,
but they're grouped by the

00:48:04.770 --> 00:48:06.110
markers that I've added.

00:48:06.150 --> 00:48:08.820
And until you add markers,
what you'll see is one long

00:48:08.820 --> 00:48:09.580
list of state and draw calls.

00:48:09.600 --> 00:48:11.520
But there can be tens of thousands.

00:48:11.570 --> 00:48:13.120
So it's a good idea to add the markers.

00:48:13.180 --> 00:48:16.180
They don't cost anything when
you're running outside of debugging.

00:48:16.180 --> 00:48:18.180
And they can be a real big help here.

00:48:18.180 --> 00:48:19.180
And as Ken mentioned, you can nest them.

00:48:19.180 --> 00:48:21.080
Here, for example, I see the enemies.

00:48:21.120 --> 00:48:23.140
And I can look down on each enemy ship.

00:48:23.220 --> 00:48:26.990
And of course, if I choose a location,
I go directly to where that's drawn.

00:48:27.180 --> 00:48:32.180
The green you see here is the wireframe
of the actual triangles that were drawn.

00:48:32.180 --> 00:48:33.940
And when we're looking
at something small,

00:48:33.940 --> 00:48:37.480
some very small triangles,
the wireframe can take up

00:48:37.570 --> 00:48:39.180
almost the entire object.

00:48:39.180 --> 00:48:43.040
This means that each of the triangles
contributed only a few pixels.

00:48:43.180 --> 00:48:45.330
I can go ahead,
by using the context menu,

00:48:45.400 --> 00:48:48.390
I can go ahead and hide the
wireframe so I see what object

00:48:48.390 --> 00:48:50.180
is actually being drawn.

00:48:50.180 --> 00:48:52.180
So these are things you've
probably seen before,

00:48:52.180 --> 00:48:55.180
but I'm going to go ahead and show
some things that are hopefully new.

00:48:55.200 --> 00:49:01.180
Let's go ahead and hide the
left area here by clicking here.

00:49:01.190 --> 00:49:05.330
And then I'm going to go ahead
and open up the assistant view.

00:49:06.200 --> 00:51:47.000
[Transcript missing]

00:51:47.200 --> 00:51:52.190
And I'm pretty sure here that the problem
is I didn't set my shader properly,

00:51:52.320 --> 00:51:53.420
just based on looking at this.

00:51:53.420 --> 00:51:56.000
So what I'll go ahead and do
then is I'm actually going to

00:51:56.000 --> 00:51:57.520
open up a second assistant.

00:51:57.520 --> 00:52:00.250
I think Matthew might have shown
you this on Monday as well,

00:52:00.250 --> 00:52:03.060
and it's actually one of my
favorite ways of working too.

00:52:03.720 --> 00:52:07.780
And then as I step through,
it goes from element to element,

00:52:07.780 --> 00:52:11.360
and I can really see the
source code and the bindings,

00:52:11.410 --> 00:52:14.460
and I can see the result
on the frame buffer.

00:52:14.460 --> 00:52:17.120
And again, I can step backwards as well.

00:52:17.120 --> 00:52:19.520
Here we're back to where
we were drawing the planet,

00:52:19.520 --> 00:52:23.180
and now here we're into where we're
drawing the first part of the spaceship.

00:52:23.180 --> 00:52:25.580
And if I look here at the,
I can go ahead again and

00:52:25.720 --> 00:52:27.620
open up the left side,
and what I can do,

00:52:27.620 --> 00:52:31.340
if I've gotten to a certain point,
I can go ahead and open up the left side,

00:52:31.340 --> 00:52:33.700
and I can go ahead and
open up the right side.

00:52:33.700 --> 00:52:35.840
And if I go to the point
with the stepper controls,

00:52:35.870 --> 00:52:37.790
and I want to see where
it is in the hierarchy,

00:52:37.790 --> 00:52:40.330
we also have the reveal in
debug navigator command.

00:52:40.350 --> 00:52:41.320
That can be really handy.

00:52:41.320 --> 00:52:44.530
So that takes me directly to
the point in the hierarchy

00:52:44.530 --> 00:52:46.560
here where the command is set.

00:52:46.560 --> 00:52:49.820
So now as I look at where
these calls are coming from,

00:52:49.930 --> 00:52:53.080
I think there's an issue
with the render object.

00:52:53.080 --> 00:52:56.960
I'm going to go ahead and use our
UI for putting the source code

00:52:56.960 --> 00:53:01.380
into a particular assistant editor,
and I notice something here.

00:53:01.380 --> 00:53:03.660
It says unset open GL states.

00:53:03.760 --> 00:53:06.680
But I actually forgot to
do a set open GL states.

00:53:06.890 --> 00:53:09.720
This is not an API call,
but it's a call in this particular

00:53:09.720 --> 00:53:12.780
program that sets up a whole
bunch of things like the shader.

00:53:13.010 --> 00:53:15.650
So that looks promising.

00:53:15.660 --> 00:53:18.840
Let's go ahead and see if that
actually fixes the problem.

00:53:18.840 --> 00:53:24.760
I'll switch back to the iPad.

00:53:29.750 --> 00:53:30.490
What do you think?

00:53:30.640 --> 00:53:31.720
Is that it?

00:53:32.260 --> 00:53:33.440
Yeah, that fixed it.

00:53:33.530 --> 00:53:37.510
So in this way, I can go and take a look
at is it the wrong texture?

00:53:37.510 --> 00:53:38.800
Is it the wrong shader?

00:53:38.840 --> 00:53:39.960
Did I set the wrong parameter?

00:53:39.960 --> 00:53:43.080
If you ever programmed OpenGL,
you know that it's very easy to

00:53:43.080 --> 00:53:47.020
accidentally leave some attributes set
or to forget to set some attribute.

00:53:47.020 --> 00:53:50.340
And then you go on to the very next
piece of code that you're going to draw,

00:53:50.340 --> 00:53:51.590
and then it's all wrong.

00:53:51.600 --> 00:53:54.390
And so typically,
the traditional debugging methods

00:53:54.420 --> 00:53:57.580
have been let me get the GL state
for a whole bunch of parameters

00:53:57.580 --> 00:53:59.360
and print them out to console.

00:53:59.600 --> 00:54:00.980
And then look at it after the fact.

00:54:01.050 --> 00:54:03.240
Or let me comment out
the section of code.

00:54:03.240 --> 00:54:05.610
Like I would have commented
out the planet here to see,

00:54:05.610 --> 00:54:08.140
oh, does that cause my
mothership to draw correctly?

00:54:08.140 --> 00:54:10.830
If it is, I know that it's a sort
of bleed over of state.

00:54:10.840 --> 00:54:15.430
But we think that the OpenGL ES debugger
is a much better way to do that

00:54:15.430 --> 00:54:20.030
because you can actually see the
entire set of commands that went

00:54:20.030 --> 00:54:23.250
out into building up the OpenGL frame.

00:54:23.260 --> 00:54:25.680
So with that,
I'd like to hand back to Ken.

00:54:25.680 --> 00:54:29.580
And thank you very much.

00:54:29.600 --> 00:54:31.030
Thank you very much.

00:54:36.080 --> 00:54:38.830
Okay,
so today we've shown you a number of

00:54:38.830 --> 00:54:42.700
things that I think will help make
you more effective and productive

00:54:42.700 --> 00:54:44.300
in your day-to-day use of Xcode.

00:54:44.300 --> 00:54:48.690
If there's one thing that
I could have you take away today,

00:54:48.690 --> 00:54:51.950
it's that Xcode is highly customizable.

00:54:51.960 --> 00:54:56.310
It's very easy to customize,
and a great starting point is to

00:54:56.310 --> 00:54:59.040
start working with the behaviors.

00:54:59.040 --> 00:55:01.160
So I encourage you to go do that.

00:55:01.240 --> 00:55:02.690
With that, I thank you very much.