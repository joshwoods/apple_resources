WEBVTT

00:00:10.140 --> 00:00:16.920
Good morning.

00:00:17.350 --> 00:00:17.590
Hi.

00:00:17.590 --> 00:00:21.120
It's great to see the room almost
full this hour of the morning.

00:00:21.120 --> 00:00:24.630
My name is Mike Ferris,
and I'm really glad to be here

00:00:24.790 --> 00:00:28.550
today to talk to you about how
to get the most out of Xcode.

00:00:29.760 --> 00:00:32.880
This is going to be our
plan for the morning.

00:00:32.920 --> 00:00:37.220
I'm going to talk first about
the Xcode workspace window,

00:00:37.280 --> 00:00:41.460
and about how you can work with
Xcode with the way that it's

00:00:41.460 --> 00:00:43.390
set up right out of the box.

00:00:43.660 --> 00:00:47.090
Then we'll talk about how you
can customize Xcode to suit

00:00:47.090 --> 00:00:49.510
your particular working style.

00:00:50.040 --> 00:00:52.250
And then finally,
we'll spend some time delving into the

00:00:52.250 --> 00:00:57.100
source editor to show you how to get
the most out of this key piece of Xcode.

00:00:58.790 --> 00:01:03.100
Let's start with the workspace
window and how Xcode works.

00:01:03.210 --> 00:01:05.500
Now we understand that there are a
lot of different ways that people

00:01:05.500 --> 00:01:10.590
think about developing software,
and Xcode offers flexibility to allow you

00:01:10.590 --> 00:01:13.290
to work the way that you want to work.

00:01:13.430 --> 00:01:16.370
But before we start talking
about how to customize Xcode,

00:01:16.400 --> 00:01:21.170
I want to spend some time talking about
how Xcode works without customization.

00:01:22.510 --> 00:01:24.980
First, we'll review the workspace window.

00:01:25.020 --> 00:01:27.440
This is going to be familiar
to a lot of you by now.

00:01:27.450 --> 00:01:30.910
I just want to make sure that we're
all using the same terminology.

00:01:31.420 --> 00:01:34.900
On the left-hand side
is the navigator area.

00:01:35.030 --> 00:01:39.810
This is the starting point for almost all
activities that you'll perform in Xcode.

00:01:40.330 --> 00:01:45.540
You choose files or symbols from
your project that you need to edit.

00:01:45.730 --> 00:01:48.370
You can search through your
content to find all the

00:01:48.370 --> 00:01:50.840
stuff that you want to visit.

00:01:52.370 --> 00:01:56.420
You can work through issues that you've
introduced as you've been authoring code,

00:01:56.420 --> 00:02:00.740
and you can trace through what your
application is doing as you're debugging.

00:02:00.790 --> 00:02:06.060
The majority of the window is
given over to the editor area.

00:02:06.110 --> 00:02:09.830
This is where most of the
interesting work goes on in Xcode.

00:02:10.740 --> 00:02:14.990
You author your code here,
design interfaces, create data models,

00:02:15.000 --> 00:02:18.800
and construct your projects and targets,
all in the editor.

00:02:18.930 --> 00:02:23.590
As you can see, the editor area can
host multiple editors.

00:02:24.230 --> 00:02:26.780
In this case,
we have an interface builder

00:02:26.780 --> 00:02:28.480
editor and a source editor.

00:02:28.520 --> 00:02:31.360
The editor is the primary
point of focus for most of your

00:02:31.390 --> 00:02:33.380
development activities in Xcode.

00:02:33.410 --> 00:02:36.180
And finally,
on the right side of the window,

00:02:36.190 --> 00:02:39.550
when you need it, is the utility area.

00:02:40.110 --> 00:02:43.550
On the top, we have the inspectors,
which show you detail about whatever is

00:02:43.680 --> 00:02:46.400
selected in the editor or the navigator.

00:02:46.540 --> 00:02:50.000
And on the bottom is the library,
which offers you access to various kinds

00:02:50.000 --> 00:02:55.350
of template content that's available for
you to add to your project or documents.

00:02:56.640 --> 00:03:02.810
So these three areas, the navigator,
the editor, and the utilities,

00:03:02.920 --> 00:03:05.940
are all used in almost all of
the work that you'll do in Xcode.

00:03:05.960 --> 00:03:09.380
All right,
now that we've oriented ourselves,

00:03:09.440 --> 00:03:12.690
let's actually talk
about how Xcode works.

00:03:13.820 --> 00:03:17.640
Xcode is set up to help you progress
through the activities that you need

00:03:17.640 --> 00:03:22.880
to perform as a software developer,
while content gets brought to you.

00:03:23.350 --> 00:03:28.150
The workspace adapts to the task at hand,
and through navigation and the

00:03:28.150 --> 00:03:32.490
specific actions that you perform,
Xcode knows when you're switching

00:03:32.490 --> 00:03:35.990
between the different activities
of software development.

00:03:37.510 --> 00:03:40.340
Let me show you what I mean.

00:03:40.350 --> 00:03:43.220
I might start browsing
around in my project,

00:03:43.260 --> 00:03:46.930
trying to figure out an approach
for a problem I'm trying to solve.

00:03:47.540 --> 00:03:51.740
Then maybe I focus in on my
code to do some authoring,

00:03:51.740 --> 00:03:55.780
and Xcode's workspace
adapts to this new task.

00:03:56.160 --> 00:03:58.450
I might decide to do
a little refactoring,

00:03:58.450 --> 00:04:01.060
and again, the workspace adapts.

00:04:01.110 --> 00:04:04.090
I go on to do some unit testing.

00:04:05.060 --> 00:04:07.440
And then maybe I do some debugging.

00:04:07.490 --> 00:04:11.740
And as I move through these activities,
Xcode's workspace is adapting

00:04:11.940 --> 00:04:15.280
and bringing me the content
that I need for each one.

00:04:15.310 --> 00:04:17.440
Now,
to really show you what this is like,

00:04:17.470 --> 00:04:19.650
I'd like to do a demo now.

00:04:21.190 --> 00:04:22.920
We're going to use an
application that was developed

00:04:23.020 --> 00:04:27.310
by somebody who works on Xcode,
that is an app for bird watchers,

00:04:27.370 --> 00:04:30.980
to record the birds that they've seen.

00:04:31.030 --> 00:04:34.200
And we'll be modifying this
application to fetch thumbnail

00:04:34.200 --> 00:04:37.920
images of the birds from a server,
so that you can see them

00:04:37.920 --> 00:04:39.940
before you've found them.

00:04:40.030 --> 00:04:42.090
And let's go to demo now.

00:04:45.100 --> 00:04:49.020
First, let's take stock of how far I've
gotten with this task already.

00:04:49.020 --> 00:04:50.900
I've kind of already gotten started.

00:04:50.920 --> 00:04:54.550
Let's just sort of look around
and browse through the project a

00:04:54.780 --> 00:04:57.100
bit and see what I've done so far.

00:04:57.210 --> 00:05:00.600
Browsing through the project, again,
is a common activity when you're

00:05:00.600 --> 00:05:04.100
trying to either familiarize
yourself with a particular code base,

00:05:04.100 --> 00:05:07.100
or you're looking for an
approach to solve a problem.

00:05:07.100 --> 00:05:09.420
So,
a lot of the time when I'm navigating,

00:05:09.420 --> 00:05:12.000
I'm going to start with
the project navigator,

00:05:12.000 --> 00:05:14.730
where all the content
of my project is listed.

00:05:15.330 --> 00:05:19.320
Let me load up my UITableViewCell
subclass right now.

00:05:19.320 --> 00:05:23.010
And you can see that I've already
added a new property to hold an

00:05:23.010 --> 00:05:26.790
outlet to the image view I'll
use to display these thumbnails.

00:05:26.870 --> 00:05:29.030
Okay.

00:05:29.180 --> 00:05:33.750
Now, another common way to navigate
in Xcode is to use OpenQuickly.

00:05:35.240 --> 00:05:39.170
I can type in a bit of the file name
of the thing that I want to load,

00:05:39.180 --> 00:05:41.320
and OpenQuickly will give me a list.

00:05:41.350 --> 00:05:44.300
Now, I've already added a new class to
this project as well that's going

00:05:44.300 --> 00:05:47.250
to help me manage the fetching
of these thumbnail images.

00:05:47.400 --> 00:05:50.110
So let me load up its header file now.

00:05:50.840 --> 00:05:55.950
You can see that the primary API on
this new class is a method that will

00:05:55.970 --> 00:06:01.010
start fetching the thumbnail image for
a particular bird in the background,

00:06:01.010 --> 00:06:06.280
and then when it's finished,
it's going to invoke a completion block.

00:06:06.330 --> 00:06:10.040
Now, of course,
Xcode also knows that interface files

00:06:10.040 --> 00:06:14.080
and implementation files come in sets,
and it's really common to

00:06:14.080 --> 00:06:17.200
want to move between them,
so we offer another form of

00:06:17.200 --> 00:06:18.950
navigation that's based on that.

00:06:19.080 --> 00:06:22.670
if I use the jump to
next counterpart command,

00:06:22.840 --> 00:06:26.850
Xcode will take me from the header file
to the implementation for this class.

00:06:27.100 --> 00:06:33.020
And here we can see that the way that
this class works is it's going to use an

00:06:33.070 --> 00:06:37.070
NSOperation queue to manage a bunch of
fetches for all the various birds that

00:06:37.070 --> 00:06:39.500
we need to find thumbnail images for.

00:06:41.110 --> 00:06:44.530
Now, as I'm working in Xcode,
Xcode is analyzing my project

00:06:44.620 --> 00:06:48.020
and the code in my project,
so that it knows a lot about

00:06:48.220 --> 00:06:51.120
the APIs that I'm using,
the APIs that I'm defining,

00:06:51.120 --> 00:06:51.810
all of this stuff.

00:06:51.880 --> 00:06:55.900
Making use of that information is
also another really common way to

00:06:55.900 --> 00:06:58.210
want to navigate around your code.

00:06:58.240 --> 00:07:02.180
So, for instance,
I can select this method, addOperation,

00:07:02.180 --> 00:07:06.070
on the NSOperation queue,
and choose jump to definition if

00:07:06.070 --> 00:07:08.110
I want to see more about that.

00:07:08.530 --> 00:07:10.790
And it's going to jump me to
the framework header where

00:07:10.790 --> 00:07:13.770
NSOperationQueue is defined,
and take me to the declaration

00:07:13.870 --> 00:07:15.500
of the addOperation method.

00:07:15.500 --> 00:07:18.980
And, of course, I can see all the rest of
the API on NSOperationQueue.

00:07:21.800 --> 00:07:25.100
As I'm navigating,
Xcode's editor is capturing

00:07:25.100 --> 00:07:26.780
my navigation history.

00:07:26.820 --> 00:07:29.160
And so another very common
way to navigate through my

00:07:29.160 --> 00:07:31.240
project is to use that history.

00:07:31.290 --> 00:07:34.850
So let me do that now to
navigate back to where I was.

00:07:35.780 --> 00:07:38.540
All right,
so now we've kind of gotten our bearings.

00:07:38.550 --> 00:07:42.040
We've seen how-- familiarize
ourselves with how far we've gotten.

00:07:42.050 --> 00:07:48.750
Let's actually change activities to
source code authoring and finish this up.

00:07:49.640 --> 00:07:51.740
Now, to do that,
the first thing I'm going to have

00:07:51.830 --> 00:07:55.530
to do is add a property to my model
class to hold the thumbnail image

00:07:55.530 --> 00:07:58.520
when it comes back from being fetched.

00:07:58.900 --> 00:08:02.680
And since I have a mention
of my model class right here,

00:08:02.680 --> 00:08:05.720
I'm actually going to use
jump to definition again.

00:08:05.720 --> 00:08:08.280
This time,
I'll do it via another gesture,

00:08:08.280 --> 00:08:10.240
which is to hold the command key down.

00:08:10.310 --> 00:08:14.960
You'll notice that as I hold the command
key down and pass over things in my file,

00:08:14.960 --> 00:08:17.350
that Xcode highlights the symbols.

00:08:17.820 --> 00:08:21.390
If I click on one of them,
it executes that jump

00:08:21.470 --> 00:08:22.580
to definition command.

00:08:22.730 --> 00:08:26.970
So I can just command click on anything
to jump right to where it's defined.

00:08:27.360 --> 00:08:30.270
To add this property,
I'm going to need to make some changes

00:08:30.350 --> 00:08:32.410
to a couple of different files.

00:08:32.490 --> 00:08:36.060
So this turns out to be a really
good use for the Assistant Editor,

00:08:36.060 --> 00:08:38.370
and I'm going to turn that on now.

00:08:38.920 --> 00:08:42.360
You'll notice that as
I turned on the Assistant,

00:08:42.390 --> 00:08:45.230
Xcode automatically brought
me the header file for this

00:08:45.230 --> 00:08:47.370
class that I was looking at.

00:08:47.540 --> 00:08:51.120
Now we're going to learn more about
the Assistant Editor later in the talk,

00:08:51.160 --> 00:08:53.010
but for now,
the important thing to remember

00:08:53.420 --> 00:08:56.700
is that one great way to use the
Assistant is to have it set up to

00:08:56.740 --> 00:09:01.160
just let Xcode try to bring you things
that it thinks you're likely to need,

00:09:01.270 --> 00:09:04.540
based on whatever you've chosen
to see in the primary editor.

00:09:04.600 --> 00:09:07.900
To add this property,
I'm going to add a couple

00:09:07.900 --> 00:09:09.890
of instance variables.

00:09:10.110 --> 00:09:11.610
- I'm going to add a getter.

00:09:11.620 --> 00:09:14.200
And since this is a little bit tricky,
I can't really use the

00:09:14.200 --> 00:09:16.120
automatically generated getter.

00:09:16.120 --> 00:09:18.570
Instead, I'm going to have to keep track
of whether I've already started

00:09:18.740 --> 00:09:20.620
fetching the thumbnail for this bird.

00:09:20.620 --> 00:09:22.620
And if I haven't already
started fetching it,

00:09:22.620 --> 00:09:26.120
then we'll go in and actually
use that bird image fetcher

00:09:26.120 --> 00:09:28.620
class to start fetching.

00:09:28.620 --> 00:09:31.480
And then we'll go in and
actually use that bird image

00:09:31.570 --> 00:09:36.620
fetcher class to start fetching.

00:09:36.990 --> 00:09:40.900
And when the completion block fires,
when the image has been fetched,

00:09:41.020 --> 00:09:44.960
we'll go ahead and save that
thumbnail for this bird.

00:09:45.210 --> 00:09:49.500
And then of course, down at the end here,
we need to return the thumbnail image.

00:09:49.510 --> 00:09:51.860
Now since the fetching
goes on in the background,

00:09:51.860 --> 00:09:54.640
the first time I call this
method on any given bird,

00:09:54.670 --> 00:09:56.800
I'm actually going to
get nil returned to me,

00:09:56.820 --> 00:09:58.600
because I don't have the image yet.

00:09:58.630 --> 00:10:01.500
But then later,
after the fetch is completed,

00:10:01.530 --> 00:10:04.560
it'll get assigned into the property,
and from then on,

00:10:04.560 --> 00:10:06.980
I'll have access to that thumbnail image.

00:10:09.080 --> 00:10:13.070
Now, as I was adding that,
I noticed something that

00:10:13.120 --> 00:10:15.860
has been bugging me for,
you know, 30 seconds now,

00:10:15.860 --> 00:10:16.890
and it's time to fix it.

00:10:16.960 --> 00:10:22.420
I have this method,
initRecordWithDictionary,

00:10:22.420 --> 00:10:25.980
and I just noticed that this
method starts with the word init,

00:10:25.980 --> 00:10:27.940
but it's a class method.

00:10:27.940 --> 00:10:33.530
And that's really sort of not right,
according to Cocoa naming conventions.

00:10:33.540 --> 00:10:36.700
Init methods are typically instance
methods that initialize an instance

00:10:36.700 --> 00:10:38.120
that's already been created.

00:10:38.750 --> 00:10:41.200
This, it turns out,
is a convenience method that

00:10:41.270 --> 00:10:43.480
actually creates an instance.

00:10:43.480 --> 00:10:46.750
And the naming pattern for that would,
the more appropriate naming pattern,

00:10:46.760 --> 00:10:50.800
would be to actually call this method,
to start this method with

00:10:50.800 --> 00:10:52.120
the name of the class.

00:10:52.200 --> 00:10:54.760
So I'm gonna switch
activities briefly here,

00:10:54.760 --> 00:10:58.460
and fix that now while
I'm thinking about it.

00:10:58.570 --> 00:11:00.860
And to do that,
I'm just gonna select the symbol,

00:11:00.860 --> 00:11:05.270
and hold the correct modifier key,
to get the context menu,

00:11:05.280 --> 00:11:07.810
and just choose to rename this.

00:11:09.090 --> 00:11:11.200
So we're switching to
refactoring at this point.

00:11:11.450 --> 00:11:13.080
Type in the new name.

00:11:13.080 --> 00:11:16.320
And then Xcode's going to show
me what it thinks it needs to

00:11:16.350 --> 00:11:18.100
do to accomplish this renaming.

00:11:18.130 --> 00:11:20.020
So of course,
it's going to change the declaration

00:11:20.020 --> 00:11:22.240
of this method and the definition.

00:11:22.260 --> 00:11:25.820
And it found the one place in my code
where I'm actually calling this method,

00:11:25.850 --> 00:11:27.360
and we'll change that too.

00:11:27.450 --> 00:11:29.200
So that all looks good.

00:11:29.210 --> 00:11:31.780
We'll go ahead and accept those changes.

00:11:31.810 --> 00:11:34.390
And OK, well now I feel much better.

00:11:34.600 --> 00:11:36.960
The method is named correctly.

00:11:36.980 --> 00:11:39.460
Let's change activities again.

00:11:39.510 --> 00:11:42.280
We're going to go on to our
next implementation task.

00:11:42.340 --> 00:11:47.140
So we will start authoring code again.

00:11:47.170 --> 00:11:48.980
Now in this case,
actually not so much code.

00:11:49.060 --> 00:11:51.550
We need to do some interface work.

00:11:52.440 --> 00:11:54.600
I'm going to need to make
some space in my interface

00:11:54.680 --> 00:11:56.160
to show this thumbnail image.

00:11:56.240 --> 00:12:03.080
So I'm going to get
the nib file for the--

00:12:03.380 --> 00:12:07.300
and I'm going to use open quickly again.

00:12:07.300 --> 00:12:09.300
I know that it's related
to my bird cell class,

00:12:09.300 --> 00:12:09.300
that UITableViewCell subclass.

00:12:09.300 --> 00:12:11.300
And yeah, actually here it is.

00:12:11.300 --> 00:12:13.300
It's this nib file right here.

00:12:13.300 --> 00:12:15.300
And I'm going to use open quickly again.

00:12:15.300 --> 00:12:17.300
I know that it's related
to my bird cell class,

00:12:17.300 --> 00:12:17.300
that UITableViewCell subclass.

00:12:17.300 --> 00:12:19.250
And yeah, actually here it is.

00:12:19.400 --> 00:12:21.300
It's this nib file right here.

00:12:21.950 --> 00:12:24.900
That time I used OpenQuickly
using the command key equivalent,

00:12:24.900 --> 00:12:27.650
which is how you would usually use it.

00:12:28.300 --> 00:12:30.640
You'll notice that as I loaded
up the interface file,

00:12:30.700 --> 00:12:33.890
the Assistant has brought
me some new content again.

00:12:35.160 --> 00:12:38.240
It actually decided to
show me my bird cell class,

00:12:38.280 --> 00:12:44.270
which happens to be the class
used for the table view cell

00:12:44.300 --> 00:12:46.440
that's in this nib file.

00:12:46.460 --> 00:12:49.460
In fact, the assistant has discovered
a couple of things that it

00:12:49.460 --> 00:12:51.060
thinks I might be interested in.

00:12:51.080 --> 00:12:53.600
You can see that from the
little indicator up here.

00:12:53.630 --> 00:12:56.760
And so if I want, I can see what else it
thought I might want to see.

00:12:56.790 --> 00:12:58.580
And it turns out to be
the root view controller,

00:12:58.620 --> 00:13:01.200
which is the file's
owner of this nib file.

00:13:01.230 --> 00:13:04.040
And it turns out that actually the
bird cell is what I really want,

00:13:04.040 --> 00:13:05.300
I mean, need in a minute.

00:13:05.300 --> 00:13:07.800
So we'll leave it there.

00:13:08.150 --> 00:13:11.020
So to complete this,
I just need to move some things around

00:13:11.060 --> 00:13:13.020
to make room to show this thumbnail.

00:13:13.020 --> 00:13:16.340
So I'm going to select a
few of the elements here.

00:13:16.360 --> 00:13:18.420
We'll just move them over a bit.

00:13:18.480 --> 00:13:21.140
I'm going to move the checkmark
for whether I've seen the

00:13:21.140 --> 00:13:22.800
bird or not over to this side.

00:13:22.800 --> 00:13:25.390
And then since that's
about the right size,

00:13:25.390 --> 00:13:29.160
I'll just duplicate it back over
here to act as the thumbnail.

00:13:29.160 --> 00:13:31.920
Since I don't actually want
this thing to come up with a

00:13:31.940 --> 00:13:35.150
checkmark in it by default,
we'll open the utilities and clear

00:13:35.200 --> 00:13:37.040
out that default image as well.

00:13:37.540 --> 00:13:40.310
So it'll start off empty,
and then the idea is that once

00:13:40.310 --> 00:13:43.290
the image has been fetched,
we'll see it appear.

00:13:43.720 --> 00:13:46.360
All right, let me put away the utilities.

00:13:46.400 --> 00:13:48.180
Now, this looks about the
way that I want it to.

00:13:48.360 --> 00:13:50.700
I'm not a UI designer.

00:13:50.730 --> 00:13:53.740
And so now,
the only thing I have left to do

00:13:53.740 --> 00:13:59.120
is to make sure that in my code,
I can set the image into this image view.

00:13:59.150 --> 00:14:04.280
And that's why I added that outlet that
we saw earlier to the bird cell class,

00:14:04.340 --> 00:14:07.530
so that I can have a pointer
back to this image view.

00:14:07.580 --> 00:14:11.970
So I hold the correct modifier,
and I can just drag out a connection,

00:14:11.970 --> 00:14:15.050
and connect that right
up to the image view,

00:14:15.130 --> 00:14:17.380
the outlet that I added.

00:14:17.380 --> 00:14:19.830
OK.

00:14:20.420 --> 00:14:21.980
I think I'm done.

00:14:22.030 --> 00:14:26.220
So I'm going to change activities again,
and I'm going to start testing.

00:14:27.120 --> 00:14:30.300
Now of course, before I started,
while I was working on this earlier,

00:14:30.300 --> 00:14:32.850
of course,
the first thing I did was I wrote a new

00:14:32.930 --> 00:14:37.050
test case for my unit test to make sure
that this was all going to work properly.

00:14:37.170 --> 00:14:39.410
So that's what we're running now.

00:14:39.560 --> 00:14:41.300
And that's what failed.

00:14:41.380 --> 00:14:45.900
So since the test failed,
Xcode decided that the most likely thing

00:14:45.900 --> 00:14:48.310
is that I'd probably want to see Y,
and so it brought me

00:14:48.330 --> 00:14:49.740
to the issue navigator.

00:14:49.820 --> 00:14:54.370
And I can click on the failure
issue here and get taken to my test

00:14:54.470 --> 00:14:57.350
code exactly where the test failed.

00:14:58.190 --> 00:15:00.860
Now it turns out that what this
test is doing is it's trying to

00:15:00.860 --> 00:15:04.840
make sure that that thumbnail
property on the bird record class is

00:15:04.840 --> 00:15:06.700
working the way that we want it to.

00:15:06.820 --> 00:15:10.380
Which is that the first time you call it,
it comes back and it says nil,

00:15:10.490 --> 00:15:14.200
but then at some time later it's
supposed to get the real thumbnail.

00:15:14.300 --> 00:15:17.080
And when the real thumbnail comes in,
I expect that if I'm

00:15:17.080 --> 00:15:19.690
observing that thing,
I should be told that it's changed,

00:15:19.700 --> 00:15:21.490
because now there's an image there.

00:15:21.570 --> 00:15:24.780
But I'm never getting the key
value observing notification

00:15:24.810 --> 00:15:26.120
that I'm expecting.

00:15:26.820 --> 00:15:29.200
Now, I could, you know,
make you sit here and

00:15:29.200 --> 00:15:32.080
watch me debug this,
but instead, let's skip to the end.

00:15:32.080 --> 00:15:36.010
It turns out that I made a mistake
when I was implementing that thumbnail

00:15:36.010 --> 00:15:37.940
accessor that we added earlier.

00:15:37.940 --> 00:15:41.230
So I'm going to use,
jump to definition again, but since,

00:15:41.230 --> 00:15:43.940
again,
I have a call to the method right here,

00:15:44.150 --> 00:15:48.390
jump directly to that method declaration,
or definition.

00:15:48.970 --> 00:15:54.000
And the problem is that key-value
observing can work automatically as long

00:15:54.000 --> 00:15:56.010
as you're doing sort of normal stuff.

00:15:56.100 --> 00:15:58.600
But here,
we're doing something kind of tricky,

00:15:58.600 --> 00:16:01.750
and when that completion block fires,
we're just assigning the new image

00:16:01.750 --> 00:16:04.690
directly into our instance variable
in a way that key-value observing

00:16:04.690 --> 00:16:06.270
really can't know anything about.

00:16:06.280 --> 00:16:09.080
And so it doesn't really know that the
value for that property has changed,

00:16:09.080 --> 00:16:11.000
and it won't be sending
out the notifications.

00:16:11.000 --> 00:16:29.010
I can help it out.

00:16:30.170 --> 00:16:30.170
It's easy to, you know, overcome this.

00:16:30.170 --> 00:16:30.170
You can simply tell key-value
observing that you're doing this.

00:16:30.170 --> 00:16:30.170
And the way that you do that
is before you make the change,

00:16:30.170 --> 00:16:30.170
you tell it that you're
about to make a change.

00:16:30.170 --> 00:16:30.170
And after you're done,
you tell it you finished

00:16:30.170 --> 00:16:30.170
making the change.

00:16:30.850 --> 00:16:33.940
That ought to take care of it,
but let's make sure.

00:16:33.950 --> 00:16:36.860
We'll run our test again.

00:16:36.860 --> 00:16:39.300
And here they go.

00:16:41.320 --> 00:16:43.750
and this time they succeeded.

00:16:43.840 --> 00:16:47.840
So I could go on and probably
the next thing that I would do

00:16:47.840 --> 00:16:50.880
is I would debug my application,
make sure those thumbnails are showing

00:16:50.880 --> 00:16:53.360
up in the UI where I expect them.

00:16:53.380 --> 00:16:56.560
After everything's working correctly,
I would transition activities again

00:16:56.560 --> 00:17:01.010
and I would check my stuff into SCM,
and then I would go on to whatever

00:17:01.120 --> 00:17:02.730
the next task is in my day.

00:17:02.790 --> 00:17:05.820
But I think you guys get
the idea of how this works.

00:17:05.890 --> 00:17:08.390
So let's go back to slides, please.

00:17:09.970 --> 00:17:12.510
So here's a way of thinking
about software development,

00:17:12.620 --> 00:17:14.940
one way of thinking about
software development,

00:17:14.970 --> 00:17:18.510
that matches the way
Xcode works by default.

00:17:18.690 --> 00:17:21.820
Software development
is a complex endeavor,

00:17:21.860 --> 00:17:25.280
and you have to perform a lot of
different activities and manage

00:17:25.280 --> 00:17:27.120
a ton of different content.

00:17:27.160 --> 00:17:32.870
The focus is on moving from
one activity to the next,

00:17:33.430 --> 00:17:36.360
As the content that you
need is brought to you.

00:17:36.460 --> 00:17:38.260
So this is software
development as a continuous

00:17:38.260 --> 00:17:39.950
progression through activities.

00:17:40.180 --> 00:17:43.350
Xcode's workspace adapts
to the task at hand,

00:17:43.350 --> 00:17:48.140
instead of providing you with a different
place to go for each of these activities.

00:17:48.290 --> 00:17:52.420
And through navigation,
Xcode brings the content to you,

00:17:52.420 --> 00:17:56.720
rather than sending you off
to find where the content is.

00:17:58.080 --> 00:17:59.650
All right,
now the last thing that I want to talk

00:17:59.700 --> 00:18:03.800
about before we move on is navigation.

00:18:03.920 --> 00:18:07.190
So navigation is really kind
of a key concept in Xcode 4.

00:18:07.470 --> 00:18:10.350
We've seen a number of different ways
to navigate through your content,

00:18:10.460 --> 00:18:13.300
and we're going to see
more as the talk goes on.

00:18:13.390 --> 00:18:18.640
Anytime you ask Xcode to show you
a particular location in a file,

00:18:18.740 --> 00:18:20.590
that's navigation.

00:18:21.970 --> 00:18:24.490
Now, not all movement within
a file is navigation.

00:18:24.540 --> 00:18:27.790
So if you're just scrolling around
or changing the selection or editing,

00:18:27.800 --> 00:18:29.740
that's not considered navigation.

00:18:29.800 --> 00:18:32.960
But any kind of intentional
action on your part that says,

00:18:33.020 --> 00:18:36.140
I want you to take me to this place,
that's navigation.

00:18:36.140 --> 00:18:39.850
Navigation is how you get Xcode
to bring you your content,

00:18:39.850 --> 00:18:43.520
and navigation is what's
captured as editor history.

00:18:43.540 --> 00:18:46.720
The next part of this talk is going
to be all about how to customize

00:18:46.820 --> 00:18:48.360
Xcode to suit your workflow.

00:18:48.440 --> 00:18:51.280
And a really important aspect
of that is how you can modify

00:18:51.280 --> 00:18:53.260
what happens when you navigate.

00:18:53.260 --> 00:18:58.330
So to talk more about that,
I'd like to invite Brooke Callahan up to

00:18:58.480 --> 00:19:01.570
tell you about how to customize Xcode.

00:19:09.500 --> 00:19:12.450
Hi, I'm Brooke, and I'm here to talk to
you about customizing Xcode

00:19:12.600 --> 00:19:14.810
to better meet your needs.

00:19:16.350 --> 00:19:17.960
I'm going to talk about two things.

00:19:18.040 --> 00:19:21.330
First, I'm going to show you how you
can customize Xcode's behaviors

00:19:21.330 --> 00:19:23.840
to better fit your workflow.

00:19:23.860 --> 00:19:27.520
Do you find yourself hiding and
showing different parts of the UI?

00:19:27.590 --> 00:19:29.440
Well,
there's something we can do about that.

00:19:29.460 --> 00:19:32.050
Then I'm going to show you how you
can change how navigation works.

00:19:32.250 --> 00:19:34.420
Do you prefer to do your
editing in a single tab,

00:19:34.440 --> 00:19:35.480
or multiple tabs?

00:19:35.490 --> 00:19:40.360
Maybe you prefer to open each of
your documents in a separate window.

00:19:40.380 --> 00:19:43.300
Modified navigation can
make this a lot easier.

00:19:44.410 --> 00:19:45.310
So what are behaviors?

00:19:45.590 --> 00:19:49.420
Behaviors are how Xcode
reacts to high-level events.

00:19:49.490 --> 00:19:52.100
You can configure them in
the Behaviors prep pane.

00:19:52.110 --> 00:19:56.660
If Xcode ever alerts you in some way,
or reconfigures your window layout,

00:19:56.660 --> 00:19:59.060
it's probably because of
one of the settings here.

00:19:59.080 --> 00:20:01.560
You can configure
behaviors in several ways.

00:20:01.580 --> 00:20:05.300
Behaviors can run alerts,
like telling you when

00:20:05.300 --> 00:20:08.620
the build completes,
or they can reconfigure the UI.

00:20:08.620 --> 00:20:12.820
They can also create new tabs for you,
or reopen a tab that

00:20:12.890 --> 00:20:14.810
you previously closed.

00:20:15.140 --> 00:20:16.590
They can even run scripts.

00:20:16.810 --> 00:20:19.030
And if there isn't an automatic
behavior for what you want to do,

00:20:19.140 --> 00:20:22.800
you can create a new one and
assign it to a keyboard shortcut.

00:20:23.570 --> 00:20:25.110
So let's take a look at this.

00:20:25.330 --> 00:20:28.900
So here you can see that
I have the default settings.

00:20:28.910 --> 00:20:34.140
When a build generates new issues,
Xcode will show me the issues navigator.

00:20:34.160 --> 00:20:36.860
When a build succeeds,
Xcode will show me the bezel alert.

00:20:36.940 --> 00:20:40.770
So why might I want to change the alerts?

00:20:41.210 --> 00:20:43.360
Some operations in Xcode
can take a long time,

00:20:43.380 --> 00:20:48.200
like building or a device restore.

00:20:48.900 --> 00:20:50.800
If you notice this happening,
and you're spending a lot of time

00:20:50.800 --> 00:20:53.160
waiting for Xcode to complete,
you could change these

00:20:53.160 --> 00:20:57.040
settings to play a sound,
or say the name of the behavior.

00:20:57.190 --> 00:20:58.560
That would free you up
to do something else,

00:20:58.660 --> 00:21:01.030
like go back to your
game of Angry Birds while

00:21:01.030 --> 00:21:02.140
you're waiting on Xcode.

00:21:02.260 --> 00:21:04.370
How many of you wish that
you had a separate window

00:21:04.370 --> 00:21:05.840
for building or debugging?

00:21:05.940 --> 00:21:08.570
I see a show of hands, please.

00:21:09.000 --> 00:21:10.350
Great.

00:21:10.450 --> 00:21:12.740
This is really easy to do with behaviors.

00:21:12.750 --> 00:21:16.100
If I build right now,
Xcode shows me the issues navigator,

00:21:16.110 --> 00:21:18.080
but that's not really what I wanted.

00:21:18.090 --> 00:21:22.210
I would have preferred that Xcode
leave what I was working on alone,

00:21:22.440 --> 00:21:26.100
and open a new tab or
window for my build.

00:21:26.190 --> 00:21:29.280
So what I'm going to do is I'm
going to change the behavior for

00:21:29.280 --> 00:21:33.270
when a build generates new issues,
to show me a tab named Build.

00:21:33.560 --> 00:21:36.500
I'm going to do the same
thing for when a build fails.

00:21:36.580 --> 00:21:39.500
Now when I build,
I get a tab named Build.

00:21:39.540 --> 00:21:42.330
And if I close this and rebuild,

00:21:43.470 --> 00:21:46.390
Xcode will recreate it
again just the way it was.

00:21:46.450 --> 00:21:50.260
If I want a separate build window,
I can just drag this out,

00:21:50.290 --> 00:21:55.200
and the next time I build,
Xcode will recreate it as a new window.

00:21:55.230 --> 00:22:00.180
Because Xcode's remembering what window
my tab was in the last time I had it.

00:22:00.600 --> 00:22:03.140
And the concept's the
same for other operations,

00:22:03.140 --> 00:22:04.900
like debugging.

00:22:11.700 --> 00:22:13.860
are using the search navigator.

00:22:13.860 --> 00:22:18.700
So that's great.

00:22:18.700 --> 00:22:21.560
Now I have a few different tabs
that Xcode's creating for me

00:22:21.560 --> 00:22:24.700
automatically for these different
operations that I'm doing.

00:22:24.770 --> 00:22:28.280
But now it's always taking me
away from what I was working on.

00:22:28.320 --> 00:22:36.140
What I really wish I had was a way to
get back to the work that I was doing.

00:22:38.600 --> 00:22:41.020
So this is the tab that I'm
doing most of my work in.

00:22:41.060 --> 00:22:42.380
So I'm going to rename this.

00:22:42.380 --> 00:22:44.160
I'm going to call this Home.

00:22:45.670 --> 00:22:50.840
And now that I've given that a name,
I can add a new behavior

00:22:50.930 --> 00:22:52.700
to take me back there.

00:22:57.500 --> 00:23:00.050
I'm going to give this
a keyboard shortcut,

00:23:00.050 --> 00:23:02.960
and have it show me the Home tab.

00:23:03.010 --> 00:23:05.800
While I'm at it,
I'll have this reconfigure

00:23:05.980 --> 00:23:08.200
my tab the way I like it.

00:23:08.240 --> 00:23:10.810
I'll have it show the Project Navigator,

00:23:10.900 --> 00:23:16.110
Show me the standard editor,
and hide the debugger and the utilities.

00:23:19.570 --> 00:23:21.990
Now if I build,
I can always press Command + 8

00:23:22.130 --> 00:23:24.000
to get me back to my Home tab.

00:23:24.090 --> 00:23:25.720
So that's how you can
customize behaviors.

00:23:25.780 --> 00:23:27.490
But what about modified navigation?

00:23:27.750 --> 00:23:29.860
So what is modified navigation?

00:23:30.230 --> 00:23:32.550
By default,
navigation that starts in editor

00:23:32.950 --> 00:23:34.600
will happen in that same editor.

00:23:34.630 --> 00:23:38.400
Navigation that starts somewhere
else will open in the primary editor.

00:23:38.580 --> 00:23:42.310
Modified navigation is how
you can tell Xcode to open

00:23:42.310 --> 00:23:45.420
your document somewhere else.

00:23:45.560 --> 00:23:49.460
The choices are Option,
for a pre-configured destination,

00:23:49.490 --> 00:23:52.860
Option and Shift,
to tell Xcode precisely where

00:23:52.860 --> 00:23:56.800
you want that document opened,
or Double-Click for a new tab or window.

00:23:56.900 --> 00:23:59.210
So where does modified navigation work?

00:23:59.450 --> 00:24:04.830
If you're using DoubleClick,
it works in the navigators.

00:24:05.140 --> 00:24:06.820
And that's just about it.

00:24:07.120 --> 00:24:09.680
But if you're using
the keyboard modifiers,

00:24:09.700 --> 00:24:15.090
Option or Option + Shift,
it works in that when you're

00:24:15.090 --> 00:24:15.090
clicking in the navigators,

00:24:15.490 --> 00:24:20.440
Anywhere in the jump bar,
command clicking in the source editor,

00:24:20.520 --> 00:24:21.990
quick help.

00:24:22.510 --> 00:24:26.110
stepping in the debugger
with Open Quickly,

00:24:26.110 --> 00:24:28.920
and many of the commands
under the Navigate menu.

00:24:29.450 --> 00:24:31.460
So let's take a look at this.

00:24:31.490 --> 00:24:33.870
So as you know,
clicking the Navigator will

00:24:33.930 --> 00:24:37.490
open the file in the editor.

00:24:37.720 --> 00:24:42.280
If I hold down Option and click,
it'll open in the Assistant Editor.

00:24:42.360 --> 00:24:45.590
If I click another
file with Option-click,

00:24:46.400 --> 00:24:50.780
It will replace the existing
document in the Assistant Editor.

00:24:50.780 --> 00:24:55.930
This is because I have the default
setting to use a single Assistant Editor.

00:24:56.810 --> 00:25:00.880
But if I prefer to open each of
my documents in their own window,

00:25:00.950 --> 00:25:03.840
I would change this to
use a separate window.

00:25:03.910 --> 00:25:06.040
Now if I option click,

00:25:07.670 --> 00:25:10.330
Xcode will open a new window
with everything collapsed

00:25:10.820 --> 00:25:12.650
just for that document.

00:25:14.700 --> 00:25:18.540
And if I'm doing something else,
and option click again,

00:25:18.540 --> 00:25:23.270
Xcode will find that window
and bring that to the front.

00:25:25.730 --> 00:25:29.200
If I'm working with this
file for a little while,

00:25:29.200 --> 00:25:34.080
and I change the size of the window,
scroll around a bit,

00:25:35.200 --> 00:25:49.300
[Transcript missing]

00:25:50.210 --> 00:25:53.690
Using separate splits,
or using separate tabs.

00:25:53.810 --> 00:25:57.450
So it's all how you want
to work with your files.

00:25:59.510 --> 00:26:04.310
You can also use Option + Shift to
tell Xcode precisely where

00:26:04.310 --> 00:26:05.840
you want your document opened.

00:26:05.880 --> 00:26:09.130
I can use,
I can tell Xcode to open my document

00:26:09.180 --> 00:26:16.420
in any of the existing editors,
to create a new editor in a new split.

00:26:18.300 --> 00:26:47.700
[Transcript missing]

00:26:48.070 --> 00:26:53.390
My name is Ron Lu Saeng,
and I will be the closing act for this,

00:26:53.390 --> 00:26:56.720
our session on maximizing
productivity with Xcode.

00:26:56.720 --> 00:27:01.520
So we've seen some of the
stuff we can do out of the box,

00:27:01.640 --> 00:27:04.070
some of the behaviors that
Xcode gives you out of the box.

00:27:04.200 --> 00:27:09.860
And we've seen customizing Xcode to
work with the way you like to work.

00:27:09.940 --> 00:27:15.230
The focus on this last part of the
talk will be on source editing.

00:27:16.200 --> 00:27:20.640
So I'll take the next 15 or 20 minutes
just to focus on some of the behaviors,

00:27:20.640 --> 00:27:23.030
some of the functionality,
that can really improve the

00:27:23.140 --> 00:27:26.030
quality of the time that you
spend with your source code.

00:27:28.360 --> 00:27:31.720
Before we get started,
I just want to go over two terms,

00:27:31.760 --> 00:27:34.300
just to make sure you and
I are on the same page.

00:27:34.480 --> 00:27:36.800
First of these two terms
is standard editor.

00:27:36.940 --> 00:27:40.330
So this is how your workspace
window looks when it's set

00:27:40.410 --> 00:27:42.300
to use the standard editor.

00:27:42.430 --> 00:27:45.300
Your single window just
gets a single editor in it,

00:27:45.330 --> 00:27:47.880
one source file visible at a time.

00:27:49.200 --> 00:27:54.210
So the first term is standard editor,
the second term will be assistant editor.

00:27:54.730 --> 00:27:58.440
You can switch to the Assistant Editor,
and your Workspace window

00:27:58.520 --> 00:27:59.970
will look like this.

00:28:01.130 --> 00:28:03.720
You'll end up with multiple
smaller editors hosted by

00:28:03.770 --> 00:28:06.180
the larger assistant editor.

00:28:06.660 --> 00:28:09.420
All right,
with those two terms out of the way,

00:28:09.500 --> 00:28:11.940
I just want to jump straight into demo.

00:28:11.940 --> 00:28:15.100
So we have our Sketch workspace open.

00:28:15.140 --> 00:28:17.760
Taking a look at Sketch with
our navigator on the left,

00:28:18.050 --> 00:28:23.360
the editor in the middle,
and the utility area over on the right.

00:28:24.380 --> 00:28:28.700
Now, we're talking about maximizing
productivity and the source editor.

00:28:28.720 --> 00:28:31.180
And for me,
I really feel much more productive

00:28:31.180 --> 00:28:34.460
when I can see as much of my
source code at once as possible,

00:28:34.490 --> 00:28:37.350
with as little distraction as possible.

00:28:37.510 --> 00:28:41.220
So, I tend to work with the
utility area collapsed,

00:28:41.220 --> 00:28:44.770
and actually the
navigator area collapsed.

00:28:44.800 --> 00:29:53.700
[Transcript missing]

00:29:54.960 --> 00:29:59.200
So that's one way of getting
around without the navigators.

00:29:59.200 --> 00:30:02.880
The other way that I tend to get
around my workspace is by using

00:30:02.880 --> 00:30:06.800
the jump bar that's up here,
ever present in our editor.

00:30:06.800 --> 00:30:10.630
We can jump around to any of
the files within our workspace,

00:30:10.630 --> 00:30:15.880
and once we get to a specific file,
we have access, of course,

00:30:15.880 --> 00:30:19.110
to all the symbols within that file.

00:30:19.630 --> 00:30:23.240
And over on the left
side of the jump bar,

00:30:23.240 --> 00:30:24.600
we have our history.

00:30:24.620 --> 00:30:28.700
We can go back and forward in history for
all of the navigation that we've done,

00:30:28.700 --> 00:30:31.600
jumping around inside of our file.

00:30:31.620 --> 00:30:33.540
And you'll notice you can
see the full history just by

00:30:33.540 --> 00:30:37.610
holding down on the back button,
the back or forward buttons.

00:30:37.690 --> 00:30:40.800
And I don't know how
clear it is back there,

00:30:40.800 --> 00:30:44.340
but you can see not
just intra-file history,

00:30:44.440 --> 00:30:46.410
so all the places you've
been within this file,

00:30:46.410 --> 00:30:48.300
but also cross-file history.

00:30:48.300 --> 00:30:52.350
There are times where you just want to
see only the files that I've been in,

00:30:52.450 --> 00:30:55.220
the last location in the
files that I've been in.

00:30:55.270 --> 00:30:57.640
And you can get that quickly
by just using the command

00:30:57.640 --> 00:30:59.060
key when you click and hold.

00:30:59.080 --> 00:31:02.210
And then over on the right
side of the jump bar,

00:31:02.210 --> 00:31:04.520
can you guys see that clearly?

00:31:06.300 --> 00:31:10.370
We have our mini issues navigator,
which lets us see all of the files

00:31:10.450 --> 00:31:13.010
in our workspace that have issues.

00:31:13.020 --> 00:31:16.240
And then once we jump to that file,
we can see the list of

00:31:16.240 --> 00:31:17.930
issues within that file.

00:31:17.940 --> 00:31:20.880
It makes it really easy to
navigate all of the issues in your

00:31:21.350 --> 00:31:24.710
workspace without using up any
extra space for the navigator area.

00:31:24.720 --> 00:31:26.630
So, let's see, that's two, right?

00:31:26.640 --> 00:31:29.420
Using open quickly, using the jump bar.

00:31:29.420 --> 00:31:34.160
The third option for navigating without
the navigators would be another one.

00:31:35.000 --> 00:31:39.150
The third option that we've
seen is jump to definition,

00:31:39.390 --> 00:31:42.340
where you can just,
whatever symbol you have selected,

00:31:42.340 --> 00:31:43.720
you can jump directly to that.

00:31:43.720 --> 00:31:46.810
Or just by using command
click on any symbol.

00:31:47.000 --> 00:31:50.940
So with all of these options,
I find I can dedicate as much

00:31:50.940 --> 00:31:55.930
space as possible to seeing my
source code without using up the

00:31:56.500 --> 00:31:59.710
space for the navigator area.

00:32:01.070 --> 00:32:04.880
Now there are times where you still
want or need to use the navigators,

00:32:04.910 --> 00:32:08.900
but I find that the navigators
come forward when I want them,

00:32:08.940 --> 00:32:11.120
when I actually want them anyway.

00:32:11.230 --> 00:32:15.500
So for instance, when I start a find in
workspace operation,

00:32:15.560 --> 00:32:18.520
the find navigator comes forward for me.

00:32:18.580 --> 00:32:21.790
And once I'm done with it,
I can just put it away.

00:32:22.660 --> 00:32:28.230
And likewise,
I have a behavior set up so that

00:32:28.230 --> 00:32:34.840
whenever a build generates a new issue,
the issues navigator

00:32:34.940 --> 00:32:36.350
comes forward for me.

00:32:37.430 --> 00:32:41.620
And when I'm done working on that,
I can just put the navigator area away.

00:32:41.680 --> 00:32:46.170
And likewise, if I'm debugging,
and I hit one of my breakpoints,

00:32:46.360 --> 00:32:49.300
or I just pause the
debugger for something,

00:32:49.370 --> 00:32:51.500
then the debug navigator comes forward.

00:32:51.500 --> 00:32:56.240
And otherwise, I just put the navigators
away so it's not in the way.

00:32:58.750 --> 00:33:05.790
So we can spend a lot more quality
time with our source code instead

00:33:05.790 --> 00:33:09.220
of dealing with the navigators.

00:33:09.260 --> 00:33:14.090
And similarly, with the utility area,
I find I don't really use

00:33:14.090 --> 00:33:19.940
the utility area unless,
well, for me, unless I'm editing a nib.

00:33:20.360 --> 00:33:24.790
And in those cases,
I use one of the behaviors

00:33:25.260 --> 00:33:26.430
that Brooke alluded to.

00:33:26.620 --> 00:33:31.900
I have a custom behavior for configuring
my current tab just for nib editing,

00:33:31.970 --> 00:33:36.930
so that I get just the inspector area
and nothing else along with the editor.

00:33:38.460 --> 00:33:39.700
All right.

00:33:39.850 --> 00:33:45.180
So now I want to focus on actually
writing code in the source editor.

00:33:45.350 --> 00:33:48.770
I'm going to use open quickly here,
just to jump to a file that I know

00:33:48.770 --> 00:33:51.400
I want to make some changes in.

00:33:51.480 --> 00:33:58.710
I'll use a shortcut up here, control 6,
which will pop the document

00:33:58.770 --> 00:34:03.200
item part of the jump bar,
so that I can just start typing the

00:34:03.200 --> 00:34:06.110
name of the function I want to get to.

00:34:07.940 --> 00:34:09.630
I want to make some
changes to this method,

00:34:09.660 --> 00:34:10.940
setColor.

00:34:10.960 --> 00:34:15.070
I want to just make sure that this method
only does work when the old value and

00:34:15.070 --> 00:34:16.890
the new value are actually different.

00:34:17.180 --> 00:34:19.800
So I'll just add a little if block here.

00:34:21.900 --> 00:34:25.760
I know that the old value is
stored in a stroke color property.

00:34:25.760 --> 00:34:28.890
Now,
notice that I'm getting code completion.

00:34:28.890 --> 00:34:29.740
I haven't done anything.

00:34:29.740 --> 00:34:33.400
I'm just typing, and as I go,
I get code completion.

00:34:33.400 --> 00:34:37.700
And notice that I haven't typed
the open square brace for this

00:34:37.700 --> 00:34:39.900
method call that I'm using.

00:34:39.900 --> 00:34:42.950
Xcode pretty much knows
that's what I intend to do.

00:34:42.960 --> 00:34:46.530
And if I add the closing square brace,
it helpfully inserts the

00:34:46.530 --> 00:34:48.430
opening square brace for me.

00:34:48.430 --> 00:34:51.680
And this sort of behavior
nests really nicely as well.

00:34:54.170 --> 00:34:56.970
Save a little time there.

00:34:57.370 --> 00:35:02.160
One other change I'm going to add
here is manual KVO notification.

00:35:02.190 --> 00:35:05.160
So everybody's familiar
with key value observing,

00:35:05.360 --> 00:35:08.830
key value coding, KVO, KVC.

00:35:08.980 --> 00:35:11.370
Yeah, you know me.

00:35:14.770 --> 00:35:18.460
All right, so we have our manual
KVO notification set up here.

00:35:18.480 --> 00:35:20.190
The indentation is a little funky.

00:35:20.410 --> 00:35:24.410
I'll just double-click the curly
brace so that I can go up to the

00:35:24.410 --> 00:35:26.980
Editor menu and re-indent this block.

00:35:26.990 --> 00:35:29.770
All right,
fix the indentation all at once.

00:35:30.140 --> 00:35:33.580
So we have a manual
KVO notification within our setter.

00:35:33.600 --> 00:35:36.990
I know that that means I'm going
to need to turn off automatic

00:35:37.280 --> 00:35:40.170
KVO notifications for this property.

00:35:40.330 --> 00:35:43.000
Now, I know that I need to
implement some method.

00:35:43.000 --> 00:35:46.200
It's like auto something.

00:35:46.200 --> 00:35:48.920
I can never actually
remember what that method is.

00:35:48.920 --> 00:35:53.260
And code completion doesn't
seem to know what it is either.

00:35:53.260 --> 00:35:55.160
It's okay.

00:35:55.160 --> 00:35:56.300
I'm just going to use open quickly.

00:35:56.300 --> 00:36:00.980
I know that method lives
in keyvalueobserving.h.

00:36:01.160 --> 00:36:03.540
There we go.

00:36:03.540 --> 00:36:05.700
We can jump around here.

00:36:05.700 --> 00:36:07.230
Let's just type auto.

00:36:07.240 --> 00:36:08.100
There we go.

00:36:08.510 --> 00:36:08.760
Okay.

00:36:08.760 --> 00:36:12.170
So, we have the method that
we need to implement.

00:36:12.420 --> 00:36:14.280
Automatically notifies observers for key.

00:36:14.280 --> 00:36:18.350
And while I'm here,
I see that there's a lot of

00:36:18.350 --> 00:36:21.190
great documentation right in
the header for this class.

00:36:21.190 --> 00:36:25.220
Now, not all classes are this
verbosely commented.

00:36:25.290 --> 00:36:30.520
So, a lot of times when I get to methods
that I don't use often or are new to me,

00:36:30.520 --> 00:36:33.320
I like to see documentation anyway.

00:36:33.320 --> 00:36:37.880
I can use option click here just
to get quick help documentation.

00:36:38.760 --> 00:36:44.520
I can also open up the inspector
and use the quick help inspector to

00:36:44.630 --> 00:36:48.290
see documentation about the symbol.

00:36:48.510 --> 00:36:51.670
Actually, what's really nice about using
Quick Help in the Inspector this

00:36:51.670 --> 00:36:56.340
way is that as I mouse around,
you'll notice the content in

00:36:56.430 --> 00:37:01.120
the Inspector actually updates,
so that I get all the documentation

00:37:01.230 --> 00:37:04.390
for that class without ever
having to jump out to the full

00:37:04.770 --> 00:37:06.890
documentation in the Organizer.

00:37:07.640 --> 00:37:10.880
Now, if I do want to go to the full
documentation in the Organizer,

00:37:10.880 --> 00:37:13.630
I can get to that from
either the Quick Help pop-up,

00:37:14.060 --> 00:37:17.320
pop-over, or the Inspector,
or just by option

00:37:17.500 --> 00:37:22.920
double-clicking the symbol,
and I go straight to the

00:37:23.590 --> 00:37:28.460
documentation in the Organizer.

00:37:29.150 --> 00:37:32.660
Now I'm done looking at documentation.

00:37:32.680 --> 00:37:37.660
Okay, I see that actually the method
I want to implement is just

00:37:37.660 --> 00:37:40.100
one with this naming pattern.

00:37:40.130 --> 00:37:40.960
Oh, you know what?

00:37:41.060 --> 00:37:42.960
I forgot to show you one other thing.

00:37:42.970 --> 00:37:47.400
Neat thing about quick
help in the inspector,

00:37:47.620 --> 00:37:49.700
It doesn't only work
in your source files,

00:37:49.760 --> 00:37:54.130
it also works in your nibs,
and actually also works for

00:37:55.160 --> 00:37:58.260
build settings in your projects.

00:37:58.400 --> 00:38:01.420
So you can see,
quick help shows you documentation

00:38:01.420 --> 00:38:04.560
for build settings that you might
not have known actually... Oh,

00:38:04.560 --> 00:38:05.300
cool.

00:38:05.300 --> 00:38:06.540
Yes.

00:38:06.540 --> 00:38:08.070
Love it.

00:38:08.620 --> 00:38:11.210
And I want to highlight this one.

00:38:11.290 --> 00:38:13.180
We didn't get here totally by accident.

00:38:13.210 --> 00:38:15.050
I do want to highlight
this build setting,

00:38:15.340 --> 00:38:16.730
combining high-resolution artwork.

00:38:16.740 --> 00:38:20.790
If everybody's interested in high DPI,
right?

00:38:21.210 --> 00:38:23.970
High-resolution artwork in your apps.

00:38:25.650 --> 00:38:28.450
There's actually a session
immediately after ours in,

00:38:28.550 --> 00:38:30.440
I think it's Russian Hill?

00:38:30.440 --> 00:38:31.100
Mission Hill?

00:38:31.180 --> 00:38:31.380
Mission?

00:38:31.380 --> 00:38:37.120
On Aqua and high-resolution,
where they're going to talk about

00:38:37.300 --> 00:38:38.940
exactly what this build setting does.

00:38:38.940 --> 00:38:40.150
All right.

00:38:40.150 --> 00:38:42.930
Enough of a side trip there.

00:38:44.510 --> 00:38:49.150
Okay, we're implementing this method,
key value observing, auto KVO turn off,

00:38:49.270 --> 00:38:50.200
all right.

00:38:50.250 --> 00:38:56.620
We know we need to implement this method,
automatically notifies observers of key,

00:38:57.340 --> 00:39:03.880
Now I could just take this text, copy it,
go back to our sktline.m, paste it,

00:39:04.040 --> 00:39:07.340
start typing,
fill in all the details of the method,

00:39:07.340 --> 00:39:10.050
and the next time we run
into having to do this,

00:39:10.180 --> 00:39:11.830
we would just do all of that again.

00:39:11.840 --> 00:39:13.900
Which seems incredibly manual.

00:39:13.900 --> 00:39:16.490
Doesn't seem to improve
our productivity at all.

00:39:16.500 --> 00:39:20.850
What I'd really like is for code
completion to know about this pattern.

00:39:20.860 --> 00:39:25.460
And we can teach code completion
about patterns like this by taking a

00:39:25.520 --> 00:39:31.110
look at our code snippet library here
in the bottom of the utility area.

00:39:31.610 --> 00:39:36.720
We can add a new code snippet just by
dragging this text out of our editor

00:39:37.050 --> 00:39:39.660
and into the code snippet library.

00:39:39.890 --> 00:39:43.900
Down at the bottom here now,
we get our own code snippet.

00:39:43.980 --> 00:39:53.110
Clicking it once, we get a little editor,
where we can give it a title, a summary,

00:39:53.110 --> 00:39:53.110
a

00:39:55.900 --> 00:40:01.800
We can decide that this code
snippet is valid for iOS or Mac OS.

00:40:01.800 --> 00:40:04.600
KVO happens to be useful on both.

00:40:04.600 --> 00:40:12.880
We can define that this really only makes
sense for Objective-C methods or classes.

00:40:12.880 --> 00:40:12.880
We can fill in

00:40:13.590 --> 00:40:17.460
- The implementation of
the method however we like,

00:40:17.460 --> 00:40:21.150
including putting in
code completion tokens.

00:40:21.150 --> 00:40:25.560
You can see another token here by,
I add another token here

00:40:25.560 --> 00:40:29.430
by adding a less than,
a pound, any string I want,

00:40:29.430 --> 00:40:32.440
another pound, and a greater than.

00:40:33.210 --> 00:40:37.740
We can also specify that when
code completion is trying to

00:40:38.330 --> 00:40:42.360
complete to this code snippet,
that it should really only do that when

00:40:42.360 --> 00:40:45.100
we're typing into a class implementation.

00:40:45.100 --> 00:40:48.140
This wouldn't really make
sense to add to a header file,

00:40:48.140 --> 00:40:49.100
for instance.

00:40:49.320 --> 00:40:54.090
And we can give our own shortcut
to this code completion.

00:40:55.460 --> 00:41:00.380
Okay, you can see the code completion
tokens got bubble-ized,

00:41:00.380 --> 00:41:02.400
and hit done.

00:41:02.430 --> 00:41:05.510
You can head back to our sktline.m.

00:41:06.180 --> 00:41:10.320
Now we could drag this code
snippet out of the library and

00:41:10.420 --> 00:41:14.450
into our editor at this point,
or we could hide the utility

00:41:15.100 --> 00:41:18.860
area and just complete the
completion that we started.

00:41:18.940 --> 00:41:22.220
And there we taught code
completion about this new pattern.

00:41:23.390 --> 00:41:27.460
You can fill in all the details,
and we're done.

00:41:27.460 --> 00:41:32.510
Actually, one last thing.

00:41:35.220 --> 00:41:39.500
One last thing I want to
change in this bit of code.

00:41:39.530 --> 00:41:45.530
I actually want to rename
this local variable.

00:41:45.810 --> 00:41:49.130
- It's not exactly
descriptive enough for me.

00:41:49.280 --> 00:41:54.200
So I could just use copy and paste,
find and replace to do that.

00:41:54.230 --> 00:41:56.300
But that's again more manual work.

00:41:56.300 --> 00:42:00.600
And imagine if I had some terrible
coworkers that just left it,

00:42:00.610 --> 00:42:02.640
the local variable is C.

00:42:02.700 --> 00:42:06.520
Find and replace for that
wouldn't be very helpful either.

00:42:06.560 --> 00:42:11.960
But there is a way of
automating this a little.

00:42:12.040 --> 00:42:16.360
So I don't know if you can tell
that once I've selected this string,

00:42:16.380 --> 00:42:19.600
other uses of that
symbol get highlighted,

00:42:19.650 --> 00:42:21.950
get highlighted in my editor.

00:42:22.200 --> 00:42:24.440
This behavior is actually
controlled by a preference up

00:42:24.580 --> 00:42:26.600
here in our text editing prefs.

00:42:26.670 --> 00:42:29.100
Highlight instances of selected symbol.

00:42:29.100 --> 00:42:32.270
If you've ever wondered what that does,
well, now you know.

00:42:34.870 --> 00:42:40.140
Once I've selected this and Xcode shows
me all of the other uses of that symbol,

00:42:40.140 --> 00:42:43.670
I can trigger an edit
all in scope operation,

00:42:43.670 --> 00:42:46.420
either by the little
triangle that shows up here,

00:42:46.420 --> 00:42:51.080
the little pop-down that shows up here,
or by going up to the editor menu

00:42:51.470 --> 00:42:54.480
and triggering edit all in scope.

00:42:56.140 --> 00:42:59.680
Now I can rename all uses of
that in the enclosing scope.

00:42:59.710 --> 00:43:04.530
This is also a great way for you
to rename IVARs in large files,

00:43:04.530 --> 00:43:06.750
for instance.

00:43:07.150 --> 00:43:13.540
Okay, so now I'm done talking about stuff
that's useful in the standard editor.

00:43:13.620 --> 00:43:15.370
Actually,
all this is useful in the standard

00:43:15.400 --> 00:43:18.930
editor and the assistant editor,
but now I'm going to focus just

00:43:19.040 --> 00:43:22.100
on some of the neat features
of the assistant editor.

00:43:22.310 --> 00:43:26.500
Now, there are multiple ways to switch
to using the assistant editor.

00:43:26.620 --> 00:43:29.700
We can use the toggle
up here in the toolbar,

00:43:29.930 --> 00:43:34.610
or we could just, we could use this.

00:43:34.820 --> 00:43:38.080
Use the Navigate menu and
use Open in Assistant Editor.

00:43:38.180 --> 00:43:41.090
So you can see what I have
now is two independent views

00:43:41.450 --> 00:43:43.780
on the same source file.

00:43:44.020 --> 00:43:48.520
So I can manually navigate around
on either side using the jump bars,

00:43:48.520 --> 00:43:52.440
open quickly,
jump to definition on either side,

00:43:52.510 --> 00:43:56.540
manually managing the content
of either side of these editors.

00:43:56.590 --> 00:44:01.690
I can even view documents that aren't
in my workspace simply by dragging

00:44:01.690 --> 00:44:04.490
a file onto either of the jump bars.

00:44:05.140 --> 00:44:10.090
Right, so, now that's another one
of these manual things.

00:44:10.100 --> 00:44:17.960
We could instead switch the assistant
to always keep the content that it shows

00:44:17.960 --> 00:44:20.990
in our subsidiary editor on the right.

00:44:21.240 --> 00:44:24.060
I always get that confused.

00:44:24.410 --> 00:44:29.930
Keep that content synced with what's
shown in our primary editor on the left.

00:44:30.240 --> 00:44:33.560
And there are multiple
categories of relatedness.

00:44:33.710 --> 00:44:38.820
So by default, for source code,
you can reset the

00:44:38.820 --> 00:44:43.440
Assistant Editor to switch to
its default relatedness category,

00:44:43.440 --> 00:44:45.300
which is counterparts.

00:44:45.390 --> 00:44:49.720
So that for any header file
you see in your primary editor,

00:44:49.750 --> 00:44:54.430
you'll automatically get its
companion counterpart.m file

00:44:55.260 --> 00:44:57.680
in your subsidiary editor.

00:44:59.580 --> 00:45:03.340
And now I said that there are
multiple categories of relatedness.

00:45:03.370 --> 00:45:07.680
We have counterparts, superclasses,
you can see all of your subclasses,

00:45:07.880 --> 00:45:08.350
siblings.

00:45:08.460 --> 00:45:12.400
We even put a categories category
in your assistant editor's editor.

00:45:12.500 --> 00:45:16.540
Dog.

00:45:17.660 --> 00:45:22.930
And new in Xcode 4.1,
we also have support for seeing the

00:45:22.930 --> 00:45:28.170
preprocessed or assembly representations
of the file in your primary editor.

00:45:28.170 --> 00:45:32.590
So you can quickly get to the
preprocessor and assembly results

00:45:32.590 --> 00:45:35.030
for any file in your workspace.

00:45:35.460 --> 00:45:37.640
Oh, one of the other ones that we added.

00:45:37.720 --> 00:45:42.620
So we've seen we have preprocessor
assembly as two of the three

00:45:42.620 --> 00:45:45.940
new categories that we have
for the Assistant Editor.

00:45:45.970 --> 00:45:49.160
We also added the disassembly category.

00:45:49.210 --> 00:45:51.200
So that now as you're
stepping through debugging,

00:45:51.200 --> 00:45:55.110
you can actually see the disassembly
of the frame that you're in.

00:45:55.670 --> 00:45:57.530
All right.

00:45:58.080 --> 00:46:01.120
And actually, that concludes our demo.

00:46:01.160 --> 00:46:03.600
I just want to recap what
we've gone over so far.

00:46:03.670 --> 00:46:08.040
We've seen some of the great
behavior and functionality that

00:46:08.040 --> 00:46:09.450
Xcode provides you out of the box.

00:46:10.940 --> 00:46:14.040
Kind of an idea of how Xcode
tries to help you go from

00:46:14.160 --> 00:46:15.890
one activity to the next.

00:46:15.890 --> 00:46:19.750
And then we've seen how
you can customize Xcode,

00:46:19.820 --> 00:46:25.580
how it behaves and how it looks,
to better suit how you like to work.

00:46:25.600 --> 00:46:31.580
And then we just went through some of the
functionality in the source code editor,

00:46:31.580 --> 00:46:33.990
and how Xcode deals with
navigation within editors,

00:46:34.040 --> 00:46:36.700
that can really improve the
quality of the time that you

00:46:36.700 --> 00:46:38.340
spend with your source code.

00:46:38.580 --> 00:46:43.570
Now, if you have any other questions,
I'd like to defer to Michael Jurvets,

00:46:43.570 --> 00:46:45.370
our DevTools evangelist.

00:46:45.370 --> 00:46:47.860
Check out the documentation.

00:46:47.860 --> 00:46:52.700
There's lots of great documentation
about using Xcode up online.

00:46:52.700 --> 00:46:54.460
Check out the developer forums.

00:46:54.460 --> 00:46:55.580
We're all trying to answer questions.

00:46:55.600 --> 00:46:58.190
on the dev forums as well.

00:46:58.960 --> 00:47:01.690
There are a bunch of related sessions,
a couple that you might

00:47:01.690 --> 00:47:04.710
have missed on IB,
one that's being repeated

00:47:04.840 --> 00:47:08.650
soon on storyboarding,
some new features in Interface Builder.

00:47:08.660 --> 00:47:11.910
Lots of great sessions coming up,
including the one that

00:47:11.910 --> 00:47:15.420
I mentioned about Russian Hill,
fullscreen, and Aqua.

00:47:15.420 --> 00:47:16.820
Thank you for coming.

00:47:16.820 --> 00:47:18.060
Have a great rest of the week.