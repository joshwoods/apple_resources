WEBVTT

00:00:10.570 --> 00:00:12.440
It's 10:30 a.m.

00:00:12.500 --> 00:00:14.250
and you've just arrived.

00:00:14.350 --> 00:00:17.980
Coffee in hand for what you thought
was going to be a normal day at work.

00:00:18.050 --> 00:00:20.550
As it turns out,
your company has just acquired

00:00:20.690 --> 00:00:25.280
a work-in-progress iPad
title called Touch Fighter 2.

00:00:26.650 --> 00:00:30.170
Looks like an interesting project,
only you've been tapped to give

00:00:30.300 --> 00:00:32.830
the CEO a demo in just one hour.

00:00:32.900 --> 00:00:34.910
No problem, you say.

00:00:34.940 --> 00:00:36.710
You take a look at the
marketing collateral,

00:00:36.730 --> 00:00:39.300
and this is what the game
is supposed to look like.

00:00:39.380 --> 00:00:42.560
But when you launch it,
it looks like this.

00:00:42.560 --> 00:00:43.940
Not quite right.

00:00:44.050 --> 00:00:47.400
And what you thought was a splash
screen is actually the game

00:00:47.400 --> 00:00:49.380
running at slideshow speeds.

00:00:49.800 --> 00:00:54.420
You put down your coffee, launch Xcode,
and get to work.

00:00:54.440 --> 00:00:57.360
So to get your game back in business,
we're going to tell you about

00:00:57.650 --> 00:01:00.870
two tools that are already
available as part of Xcode 4:

00:01:00.950 --> 00:01:04.720
OpenGL ES Performance Detective and
OpenGL ES Analyzer,

00:01:04.720 --> 00:01:05.720
part of Instruments.

00:01:05.720 --> 00:01:09.430
And for those of you who signed up
for WWDC 2011 in the first two hours,

00:01:09.430 --> 00:01:14.490
we're going to throw in a free preview
of the tool we're working on now,

00:01:14.490 --> 00:01:17.020
Xcode's OpenGL ES Debugger.

00:01:18.320 --> 00:01:23.020
So the first tool I'll tell you about
is OpenGL ES Performance Detective.

00:01:23.130 --> 00:01:28.830
And this tool basically looks at
the CPU and GPU activity for a

00:01:28.890 --> 00:01:33.620
particular frame of rendering and
tells you why your frame rate is slow.

00:01:35.620 --> 00:01:39.600
Unless that is that your frame rate
is slow for some non-graphics reason,

00:01:39.640 --> 00:01:43.710
in which case we'll point you at other
tools to help diagnose your problem.

00:01:44.370 --> 00:01:48.140
So this is the icon for
OpenGL ES Performance Detective,

00:01:48.140 --> 00:01:50.700
in case you happen to cross it in Finder.

00:01:50.730 --> 00:01:54.730
But we think you'll prefer to launch
it directly from within Xcode.

00:01:54.910 --> 00:01:56.530
So this is the Scheme Editor.

00:01:56.700 --> 00:02:03.630
If you go to the Product Edit Schemes
menu item and choose the Profile Scheme,

00:02:03.630 --> 00:02:08.310
by default it will launch instruments
and ask you which instruments

00:02:08.310 --> 00:02:09.720
template you want to load at launch.

00:02:09.720 --> 00:02:13.390
Alternatively,
you can pick one of the specific

00:02:13.450 --> 00:02:17.820
templates to load automatically,
or at the bottom of the list you'll

00:02:17.830 --> 00:02:19.780
see OpenGL ES Performance Detective.

00:02:20.590 --> 00:02:25.040
So that will allow you to launch it
directly by hitting Command-I or by

00:02:25.040 --> 00:02:28.350
hitting Option-Run and choosing Profile.

00:02:28.380 --> 00:02:31.240
Then you can launch your app in
your favorite profiling tool.

00:02:33.620 --> 00:02:36.190
So we designed
OpenGL ES Performance Detective to

00:02:36.190 --> 00:02:39.230
be extremely approachable to even
the most timid graphics developers.

00:02:39.360 --> 00:02:41.300
Essentially,
if you know the name of your own app,

00:02:41.430 --> 00:02:43.940
you're pre-qualified to use this tool.

00:02:43.970 --> 00:02:46.770
And the first step is
to select your device.

00:02:46.970 --> 00:02:49.570
So if you're the kind of
developer who has one of every

00:02:49.570 --> 00:02:52.550
device attached to your Mac,
here's where you choose which

00:02:52.550 --> 00:02:54.100
one you want to profile on.

00:02:54.570 --> 00:02:57.720
Step two,
you need to find your app in the list.

00:02:57.720 --> 00:03:03.600
Now, both of these steps actually go away
if you launch directly from Xcode,

00:03:03.720 --> 00:03:06.850
where Xcode already knows
what your app is and which

00:03:06.850 --> 00:03:09.000
device you're launching it on.

00:03:09.030 --> 00:03:12.940
So that brings us to step three,
which is to trigger a frame.

00:03:12.960 --> 00:03:15.820
So chances are you're not interested
in increasing the frame rate of

00:03:15.870 --> 00:03:18.590
your splash screens or your menus,
so you're going to need to get past

00:03:18.700 --> 00:03:21.500
all that to the meat of your rendering.

00:03:21.500 --> 00:03:23.850
And at that point,
you take a look at the frames

00:03:24.010 --> 00:03:26.370
per second meter we show you.

00:03:26.550 --> 00:03:30.340
And when you find the place where you
think you have a performance issue,

00:03:30.350 --> 00:03:33.090
you can hit the Collect Evidence button.

00:03:34.420 --> 00:03:37.590
At this step,
you can set down your device,

00:03:37.770 --> 00:03:41.050
have a couple sips of your coffee,
remind yourself why you love your job,

00:03:41.150 --> 00:03:43.390
and just witness the magic.

00:03:43.480 --> 00:03:46.160
At this point,
the tool has taken over your

00:03:46.220 --> 00:03:48.410
device and is working its magic.

00:03:48.550 --> 00:03:53.760
And finally, you reap the rewards as
OpenGL ES Performance Detective reveals

00:03:53.760 --> 00:03:56.350
the outcome of its investigation.

00:03:57.630 --> 00:04:00.250
So if you believe in magic,
you can just cover your ears

00:04:00.410 --> 00:04:01.880
for the next few slides.

00:04:01.920 --> 00:04:05.370
The rest of you will be interested to
know that the performance detective

00:04:05.380 --> 00:04:08.710
is essentially just running the
same basic steps that an experienced

00:04:08.840 --> 00:04:13.390
graphics developer would go through
to help isolate their own bottlenecks.

00:04:13.700 --> 00:04:16.920
So here we have a visual
depiction of a graphics pipeline,

00:04:16.940 --> 00:04:20.370
and what you do to isolate a
bottleneck is essentially stub out

00:04:20.470 --> 00:04:23.770
different stages of the pipeline
and see if your frame rate peaks.

00:04:23.910 --> 00:04:26.950
So here frame rate is
basically represented by water,

00:04:26.950 --> 00:04:30.090
and we have actual pipes
representing the pipeline stages.

00:04:30.350 --> 00:04:34.060
And so this is kind of
a normal configuration.

00:04:34.110 --> 00:04:36.190
Here we see the pipes
have enlarged in size.

00:04:36.470 --> 00:04:40.760
So if we were to stub out
the entire graphics pipeline,

00:04:40.850 --> 00:04:45.700
effectively giving you an infinitely
fast OpenGL ES implementation,

00:04:45.740 --> 00:04:50.140
and you notice that the frame
rate doesn't spike at all,

00:04:50.170 --> 00:04:53.480
that's a clear indication that
your bottleneck is elsewhere.

00:04:53.490 --> 00:04:56.440
earlier before the graphics pipeline.

00:04:56.700 --> 00:04:59.250
If, however,
we go back to normal-sized pipes,

00:04:59.290 --> 00:05:05.040
except for the fragment shader,
if we stub out the fragment shader,

00:05:05.040 --> 00:05:09.510
essentially taking your many instruction
shader and collapsing it down to a

00:05:09.510 --> 00:05:14.320
single fragment shader instruction,
and the frame rate does spike up,

00:05:14.340 --> 00:05:19.890
there's a good chance we can
reasonably conclude that that's

00:05:19.890 --> 00:05:19.890
where your performance bottleneck is.

00:05:22.260 --> 00:05:25.080
So the way this works,
we capture a frame of

00:05:25.090 --> 00:05:28.860
OpenGL ES rendering commands,
and that allows us to do apples-to-apples

00:05:28.860 --> 00:05:35.220
comparisons as we play back these
commands with slight tweaks each time

00:05:35.380 --> 00:05:37.490
to perform different experiments.

00:05:37.700 --> 00:05:43.450
And so why this is interesting,
both to graphics novices

00:05:43.520 --> 00:05:48.330
as well as graphics gurus,
is that it saves you time.

00:05:48.340 --> 00:05:53.680
What might take you hours to do manually,
OpenGL ES Performance Detective can

00:05:53.680 --> 00:05:55.860
do in less than a minute.

00:05:57.400 --> 00:05:59.640
So I talked about triggering
the capture just by hitting

00:05:59.640 --> 00:06:03.820
the collect evidence button,
but we have another way.

00:06:04.140 --> 00:06:07.540
We have a programmatic approach
to triggering your captures.

00:06:07.560 --> 00:06:10.850
It's an Apple debug marker extension,
new in iOS 5.

00:06:11.060 --> 00:06:13.900
And this allows you to
trigger on whatever you like.

00:06:13.900 --> 00:06:16.470
You could keep a frame
counter within your app and

00:06:16.470 --> 00:06:18.210
trigger on a particular frame.

00:06:18.320 --> 00:06:22.860
You could add code to your app to
detect the frame per second and trigger

00:06:22.860 --> 00:06:24.700
on the drop in frames per second.

00:06:24.720 --> 00:06:28.840
Loading a new level in your game,
the phase of the moon, whatever you want,

00:06:28.840 --> 00:06:30.970
it's under your full control here.

00:06:32.110 --> 00:06:34.680
So what sort of results might
you get out of this tool?

00:06:34.770 --> 00:06:39.240
So performance detective might tell you
your frame rate's already good enough,

00:06:39.250 --> 00:06:43.480
in which case we'll even go so
far as to say just considering

00:06:43.480 --> 00:06:46.040
dialing up your graphics workload.

00:06:46.120 --> 00:06:49.240
And really,
you've got to think about your job

00:06:49.240 --> 00:06:54.220
not just as eliminating bottlenecks,
but balancing the overall

00:06:54.220 --> 00:06:56.960
workload throughout the pipeline.

00:06:57.010 --> 00:07:02.910
But don't just base your
decisions on how fast your iPad

00:07:03.040 --> 00:07:05.550
2 or your iPhone 4 are running.

00:07:05.610 --> 00:07:07.960
You may need to make different
decisions within your app in

00:07:07.960 --> 00:07:13.530
order to achieve acceptable frame
rates on earlier iOS devices.

00:07:13.940 --> 00:07:16.540
So the second kind of result
you might get is it might tell

00:07:16.540 --> 00:07:19.180
you that your performance,
your frame rate isn't

00:07:19.180 --> 00:07:22.840
where it needs to be,
but it's not OpenGL ES's fault.

00:07:22.840 --> 00:07:27.740
It's not your usage of OpenGL ES that's
causing the frame rate degradation.

00:07:27.760 --> 00:07:30.610
In this case, Performance Detective isn't
the tool for the job.

00:07:30.670 --> 00:07:34.250
It's not the right tool,
but if you load up instruments,

00:07:34.270 --> 00:07:37.140
it's got all kinds of built-in
tools to help you diagnose other

00:07:37.150 --> 00:07:39.690
performance problems on the system.

00:07:40.410 --> 00:07:42.690
And the third kind of
result you can get is that,

00:07:42.870 --> 00:07:46.150
yes, your frame rate's not fast enough,
and it is your usage of

00:07:46.150 --> 00:07:48.140
OpenGL ES that's the problem.

00:07:48.250 --> 00:07:50.750
So in this case,
this is really what the tool is made for.

00:07:50.960 --> 00:07:52.460
This is where it gets interesting.

00:07:52.520 --> 00:07:54.950
We're going to tell you about
what we think your bottleneck is.

00:07:55.210 --> 00:07:58.340
We're going to give you
some tips for resolving it.

00:07:58.400 --> 00:08:02.750
And once you've internalized that,
once you've taken countermeasures in

00:08:02.800 --> 00:08:06.420
your code to mitigate the bottleneck,
that's when you want to

00:08:06.420 --> 00:08:09.120
come back into the tool,
rerun it, confirm that you've

00:08:09.120 --> 00:08:11.190
fixed your bottleneck,
and see if another one has

00:08:11.290 --> 00:08:13.570
popped up to take its place.

00:08:14.530 --> 00:08:18.360
So at this point, I'd like to demonstrate
OpenGL ES Performance Detective and

00:08:18.360 --> 00:08:21.640
see if we can't make some
progress on Touch Fighter 2.

00:08:21.650 --> 00:08:23.640
Here we have the demo machine,
and I am launching

00:08:23.640 --> 00:08:28.340
OpenGL ES Performance Detective down
here.

00:08:28.340 --> 00:08:31.030
I'm going to zoom in
a little bit for you.

00:08:32.160 --> 00:08:33.540
Open the new case.

00:08:33.540 --> 00:08:35.980
We already have our device selected.

00:08:35.980 --> 00:08:38.170
We have our app selected.

00:08:38.170 --> 00:08:38.170
Go ahead

00:08:39.160 --> 00:08:40.060
Click Open Case.

00:08:40.130 --> 00:08:44.340
At this point,
it has launched on the device.

00:08:44.450 --> 00:08:46.100
Take a look over there.

00:08:46.220 --> 00:08:51.320
So you can see we're
running at low frame rate.

00:08:52.260 --> 00:08:55.310
I'm going to switch back to
the demo machine where we're

00:08:55.310 --> 00:08:57.010
going to trigger the capture.

00:08:57.200 --> 00:09:02.530
It seems to be fluctuating around
the low 10 frames per second,

00:09:02.540 --> 00:09:03.620
9 frames per second.

00:09:03.790 --> 00:09:06.300
I'm going to click Collect Evidence.

00:09:06.330 --> 00:09:09.930
And at this point,
the tool is working its magic.

00:09:10.020 --> 00:09:14.980
So I'll switch back to the iPad so
you can see what that looks like.

00:09:15.380 --> 00:09:19.060
Very simply, the performance detective
icon on the device.

00:09:19.110 --> 00:09:23.740
This is your indication that you don't
need to do anything at this point.

00:09:23.740 --> 00:09:26.520
The tool has quit your app for you.

00:09:26.520 --> 00:09:29.710
And at this point,
the first thing it does is looks at

00:09:29.810 --> 00:09:33.780
the CPU and GPU utilization to make
an initial determination whether

00:09:33.780 --> 00:09:35.580
you're CPU-bound or GPU-bound.

00:09:35.580 --> 00:09:38.800
It will capture a frame of your
OpenGL ES rendering commands.

00:09:38.800 --> 00:09:42.270
And if it decides that you are GPU-bound,
at that point it starts

00:09:42.270 --> 00:09:44.100
running all the experiments.

00:09:44.100 --> 00:09:48.800
It's taking that frame's worth
of OpenGL ES rendering commands,

00:09:48.900 --> 00:09:52.350
changing it,
slightly modifying each time,

00:09:52.390 --> 00:09:55.880
running it back,
seeing how long it took to run it to

00:09:55.880 --> 00:09:59.830
get a good feel for which stage is the
one that's your performance bottleneck.

00:09:59.860 --> 00:10:03.860
I'm going to switch back
to the demo machine,

00:10:03.860 --> 00:10:07.000
concluding the investigation.

00:10:07.000 --> 00:10:08.000
Can take about a minute.

00:10:08.000 --> 00:10:11.260
It depends on how complex your frame is.

00:10:11.260 --> 00:10:13.590
Here we can see the outcome
of the investigation.

00:10:13.600 --> 00:10:18.060
. So in this case,
it's telling us that we are

00:10:18.060 --> 00:10:22.320
bottlenecked by our usage of OpenGL ES.

00:10:22.420 --> 00:10:24.380
It's pointing the blame
at fragment shading.

00:10:24.380 --> 00:10:28.660
So it's telling us in order to
reduce our fragment processing,

00:10:28.660 --> 00:10:33.110
we may consider reducing the number of
instructions in our fragment shader.

00:10:33.140 --> 00:10:36.400
We can do that by using a
simpler algorithm to try

00:10:36.400 --> 00:10:40.930
to achieve the same effect,
hoisting some of the workload out of the

00:10:40.930 --> 00:10:43.600
fragment shader into the vertex shader.

00:10:43.600 --> 00:10:46.530
Or using lower precision
variables to store our data.

00:10:46.620 --> 00:10:52.280
Instead of using high P in our shaders,
consider using medium P or low P.

00:10:52.280 --> 00:10:58.910
So armed with this information,
I'm going to go into Xcode.

00:10:59.980 --> 00:11:04.470
We're going to take a
look at our shaders.

00:11:04.510 --> 00:11:07.260
And I see the first one on the list
is a tone mapping fragment shader,

00:11:07.270 --> 00:11:08.900
so let's take a look at that.

00:11:08.980 --> 00:11:12.280
Sure enough,
it is a giant shader doing a lot

00:11:12.280 --> 00:11:16.550
of math to achieve what could
otherwise be a simpler effect.

00:11:16.730 --> 00:11:21.030
So we're doing tone mapping to
get the colors that the artists

00:11:21.030 --> 00:11:23.260
of the game were interested in.

00:11:23.260 --> 00:11:26.810
And whichever developer was working on
this looks like they're halfway through

00:11:26.810 --> 00:11:29.640
switching to a texture-based approach,
conveniently.

00:11:29.810 --> 00:11:33.410
So in this case,
they're baking all of this

00:11:33.420 --> 00:11:36.310
work into a 2D texture asset.

00:11:36.520 --> 00:11:39.750
So let's go ahead and turn that on.

00:11:39.750 --> 00:11:43.100
And there's one other place in
the code I need to turn it on.

00:11:43.120 --> 00:11:48.950
I'm going to rebuild and
switch over to the device.

00:11:49.090 --> 00:11:50.860
Let's take a look.

00:11:56.400 --> 00:12:00.020
All right,
our frame rate is up around 40 frames,

00:12:00.050 --> 00:12:01.620
close to 40 frames a second there.

00:12:01.640 --> 00:12:03.670
So we have made progress.

00:12:03.880 --> 00:12:07.000
Obviously, there's still many rendering
defects to deal with.

00:12:07.000 --> 00:12:10.960
So let's move on to the next tool.

00:12:10.980 --> 00:12:13.610
I'm going to switch back to slides.

00:12:16.270 --> 00:12:20.740
The next tool I'd like to talk about
is OpenGL ES Analyzer for Instruments.

00:12:20.910 --> 00:12:24.980
So whereas the last tool,
the Performance Detective,

00:12:25.140 --> 00:12:27.320
required very little user
interaction from you,

00:12:27.550 --> 00:12:31.700
you just point it at your app,
you point it at a frame of interest,

00:12:31.860 --> 00:12:37.880
and it takes over and comes
back with an answer for you,

00:12:37.880 --> 00:12:39.940
this tool you can dig a lot deeper into
the usage of OpenGL ES by your app.

00:12:41.210 --> 00:12:43.620
So you may be -- if you're
familiar with instruments,

00:12:43.710 --> 00:12:47.070
you're probably expecting that we
would have graphs on a timeline.

00:12:47.260 --> 00:12:48.900
And yes, we have all that.

00:12:48.950 --> 00:12:53.040
But the real power of the analyzer
instrument is that it's going to

00:12:53.040 --> 00:12:57.910
look at your OpenGL ES command stream
and data mine it for inefficiencies

00:12:57.910 --> 00:12:59.820
and misuses of OpenGL ES.

00:13:00.140 --> 00:13:04.970
So one way to launch it is just
the OpenGL ES analysis template

00:13:05.080 --> 00:13:07.850
when you start up instruments.

00:13:08.190 --> 00:13:11.780
Otherwise, if you already have an
instrument session going,

00:13:11.900 --> 00:13:15.380
you can just drag it from your library,
OpenGL ES Analyzer,

00:13:15.380 --> 00:13:17.260
right onto your workspace.

00:13:17.260 --> 00:13:19.820
Or finally,
like we did with Performance Detective,

00:13:19.870 --> 00:13:24.670
you simply set it up as your
profile scheme target within Xcode.

00:13:27.200 --> 00:13:29.060
So what do we have in our graphs?

00:13:29.110 --> 00:13:32.240
By default,
we are going to show you a bunch

00:13:32.240 --> 00:13:34.440
of different per-frame statistics.

00:13:34.520 --> 00:13:36.660
So for each frame,
we'll tell you the number

00:13:36.660 --> 00:13:37.900
of triangles rendered.

00:13:38.060 --> 00:13:40.840
We'll tell you the number
of draw batches you had.

00:13:41.010 --> 00:13:43.820
We're going to tell you the
total number of OpenGL ES and

00:13:43.910 --> 00:13:45.320
Eagle calls in that frame.

00:13:45.500 --> 00:13:47.950
And finally, an interesting one,
we're going to show you

00:13:47.950 --> 00:13:50.380
the number of redundant
OpenGL ES commands in that frame.

00:13:50.720 --> 00:13:53.210
So that's where you've set
OpenGL ES state to something

00:13:53.210 --> 00:13:57.300
it was already set to,
essentially wasting your time.

00:13:57.520 --> 00:14:01.080
And you can see that the
OpenGL ES driver instrument is also

00:14:01.180 --> 00:14:02.720
loaded as part of this template.

00:14:02.830 --> 00:14:05.910
And by default, that's going to show you
the frames per second.

00:14:07.770 --> 00:14:10.290
So if you're running this tool,
you're probably curious where your

00:14:10.290 --> 00:14:13.940
time is being spent on the CPU as
far as OpenGL ES is concerned.

00:14:14.200 --> 00:14:17.120
So we provide you this
API statistics view,

00:14:17.120 --> 00:14:20.240
which shows you all of the
OpenGL ES commands you're calling,

00:14:20.250 --> 00:14:23.040
and it's showing you the number
of times you've called them

00:14:23.040 --> 00:14:24.560
during this trace session.

00:14:24.680 --> 00:14:28.860
It's going to tell you the average time
spent each time going into this call.

00:14:28.900 --> 00:14:31.610
And then combine those two
together for a cumulative time,

00:14:31.680 --> 00:14:35.800
the total CPU footprint
for each of these commands.

00:14:35.830 --> 00:14:38.980
And so there's some things you
can expect to be near the top.

00:14:39.060 --> 00:14:41.900
Present render buffer,
that's where we're copying

00:14:41.900 --> 00:14:44.640
the final frame of rendering
to the compositing engine.

00:14:44.650 --> 00:14:48.000
And then the gl draw elements
and gl draw arrays commands,

00:14:48.140 --> 00:14:50.540
that's where we're taking all
of the previously set state,

00:14:50.560 --> 00:14:54.300
finally getting around to processing it,
and kicking off work on the GPU.

00:14:54.340 --> 00:14:56.140
So you can expect those
to be near the top.

00:14:56.140 --> 00:15:00.590
But if you see something suspicious,
like just a random gl state setting

00:15:00.590 --> 00:15:03.670
command near the top of the list,
chances are you're calling it

00:15:03.670 --> 00:15:05.040
more frequently than you expect.

00:15:05.040 --> 00:15:07.280
and you should look into that.

00:15:07.870 --> 00:15:11.950
Another useful view is
this call tree view,

00:15:11.950 --> 00:15:14.790
which is common to multiple instruments,
including the time profiler.

00:15:14.790 --> 00:15:16.450
You may be familiar with this one.

00:15:16.610 --> 00:15:20.250
And that's going to show you all the
different places you call each GL command

00:15:20.250 --> 00:15:24.720
from to get a breakdown of where in
your app you're calling these things.

00:15:25.910 --> 00:15:27.270
TraceView is a great one.

00:15:27.340 --> 00:15:32.150
If you've got code throughout your
app all making OpenGL ES calls,

00:15:32.150 --> 00:15:35.220
it may be hard to get a grip
on what all the calls are and

00:15:35.240 --> 00:15:37.400
what order you're calling them.

00:15:37.400 --> 00:15:39.610
So here in this view,
you can see them all

00:15:39.690 --> 00:15:41.060
lined up and in order.

00:15:41.080 --> 00:15:44.800
And to go along with that,
we have a frame navigator.

00:15:44.800 --> 00:15:49.790
So this will essentially set the bounds
of the timeline filter to correspond

00:15:49.790 --> 00:15:52.000
to a particular frame boundary.

00:15:52.000 --> 00:15:58.300
And you can advance through these to
look at all the different ES commands

00:15:58.300 --> 00:16:00.390
you're calling for each frame.

00:16:00.420 --> 00:16:04.370
So on a frame-by-frame basis,
you can see what's different

00:16:04.420 --> 00:16:05.900
in your call trace.

00:16:05.900 --> 00:16:08.990
The other useful thing about
this is you may have completely

00:16:09.000 --> 00:16:12.900
non-graphics-related instruments
loaded up in your workspace here.

00:16:12.910 --> 00:16:16.600
And it's going to set the timeline
filter for all of them to correspond

00:16:16.640 --> 00:16:18.400
to this frame of rendering.

00:16:18.400 --> 00:16:20.690
So you can see what's going
on in other instruments

00:16:20.700 --> 00:16:23.690
corresponding a particular frame.

00:16:24.210 --> 00:16:27.640
So you say, Benj,
I love this OpenGL ES analyzer.

00:16:27.640 --> 00:16:28.370
It's amazing.

00:16:28.390 --> 00:16:30.570
But is there anything else it can do?

00:16:30.600 --> 00:16:32.800
I'm glad you asked.

00:16:34.800 --> 00:16:36.660
The expert view is by far my favorite.

00:16:36.660 --> 00:16:38.040
I think it's the most useful.

00:16:38.040 --> 00:16:43.010
It gives you a laundry list of all the
ways that your app is using OpenGL ES in

00:16:43.020 --> 00:16:46.900
a way that's either incorrect,
according to the API,

00:16:46.900 --> 00:16:49.760
or just suboptimal for our iOS platforms.

00:16:49.760 --> 00:16:51.460
So it ranks them by severity.

00:16:51.460 --> 00:16:54.960
You'll see the highest severity
items in red at the top of the list.

00:16:54.960 --> 00:16:58.720
Every one of these is something
that you should fully investigate,

00:16:58.720 --> 00:17:02.040
resolve, fix it in your code,
wipe it off this list.

00:17:02.040 --> 00:17:04.060
You never want to have red.

00:17:04.060 --> 00:17:08.490
The medium severity items in orange,
the vast majority of these are

00:17:08.490 --> 00:17:12.360
legitimate issues that you're going
to want to investigate and understand.

00:17:12.440 --> 00:17:14.000
Some of them you may be okay with.

00:17:14.000 --> 00:17:15.560
They might be acceptable to you.

00:17:15.560 --> 00:17:18.200
But you should really
look into all of these.

00:17:18.200 --> 00:17:20.700
So how do you know what
to do when you see one?

00:17:20.700 --> 00:17:23.750
Well, the little arrow next to each one,
you click on that,

00:17:23.750 --> 00:17:25.900
it's going to open up the extended view.

00:17:25.900 --> 00:17:30.250
And from there,
you can get more information about what

00:17:30.250 --> 00:17:33.310
the issue was and tips to resolve it.

00:17:33.320 --> 00:17:37.250
And we'll even show you the lines
in your OpenGL ES command trace

00:17:37.260 --> 00:17:39.330
that we're blaming for the issue.

00:17:39.490 --> 00:17:43.200
Maybe it's just one command
you call that's problematic.

00:17:43.200 --> 00:17:47.150
Or maybe there's a sequence of
commands spread out over time.

00:17:47.150 --> 00:17:50.040
We're going to highlight
all of them for you.

00:17:50.040 --> 00:17:53.380
And each one of these,
you can look at the call stack,

00:17:53.380 --> 00:17:57.290
link right back to your code
in Xcode to fix the problem.

00:17:57.600 --> 00:18:00.550
So at this point, I'd like to hand it
over to Scott Bassett,

00:18:00.600 --> 00:18:02.270
a colleague of mine,
who's going to demonstrate

00:18:02.290 --> 00:18:04.790
this tool for you.

00:18:05.420 --> 00:18:05.900
Hi.

00:18:05.900 --> 00:18:07.720
I don't think this is working.

00:18:07.950 --> 00:18:08.190
Hi.

00:18:08.210 --> 00:18:09.750
Good afternoon, everyone.

00:18:09.900 --> 00:18:12.440
As Benj stated, I'm Scott Bassett,
and I'm now going to demonstrate

00:18:12.540 --> 00:18:14.130
the OpenGL ES analyzers.

00:18:14.330 --> 00:18:16.000
So let's get started.

00:18:16.000 --> 00:18:18.260
Let me switch over to --

00:18:18.510 --> 00:18:19.830
The app.

00:18:19.930 --> 00:18:24.140
So when you first launch instruments,
a window appears and a sheet comes in

00:18:24.140 --> 00:18:27.580
front of it that gives you a list of all
the instruments that you can choose from.

00:18:27.680 --> 00:18:31.170
The OpenGL ES Analyzer
is under iOS graphics,

00:18:31.350 --> 00:18:33.820
so let's go and select that now.

00:18:36.200 --> 00:18:39.040
After selecting it,
you'll see it appear on the left-hand

00:18:39.040 --> 00:18:43.340
side along with OpenGL ES driver,
which always gets loaded.

00:18:43.390 --> 00:18:45.760
I'll point to it so everyone can see.

00:18:45.840 --> 00:18:48.040
It's really easy to use our tool.

00:18:48.080 --> 00:18:52.730
All you need to do is go up to the pop-up
menu where it says "Choose Target" and

00:18:53.310 --> 00:18:55.820
Choose target again and
then choose your apps.

00:18:56.050 --> 00:18:59.360
The apps are listed in alphabetical
order with the most recent at the top.

00:18:59.510 --> 00:19:04.040
However, we only have one,
so let's just select that now.

00:19:04.150 --> 00:19:07.150
Then all you need to do is
click the record button.

00:19:09.290 --> 00:19:11.240
So it'll start the app.

00:19:11.450 --> 00:19:15.660
I'll switch over to it
so you guys can see.

00:19:15.660 --> 00:19:17.450
And it's basically where Benj left off.

00:19:17.600 --> 00:19:20.120
However, the frame rate's a little bit
lower because the analyzer needs

00:19:20.250 --> 00:19:25.200
to do some processing on the
device to manage the stream.

00:19:25.200 --> 00:19:28.160
So we'll switch back to the
device now that you've seen that.

00:19:28.160 --> 00:19:29.840
So after you've run your
app for a little while,

00:19:29.840 --> 00:19:31.110
all you need to do is press stop.

00:19:31.340 --> 00:19:33.840
And the analyzer takes
a little bit more time,

00:19:33.840 --> 00:19:36.950
so it needs to spend more
time processing the functions.

00:19:36.960 --> 00:19:38.360
You can see that down here.

00:19:38.470 --> 00:19:40.750
It says estimated trace
analysts remaining.

00:19:40.750 --> 00:19:42.310
And we have like 60,000.

00:19:42.370 --> 00:19:46.190
It doesn't take too long, though,
so it should be pretty quick.

00:19:47.500 --> 00:19:49.190
Okay, it's finished now.

00:19:49.490 --> 00:19:52.160
As Benj stated, the best place to start
is in the expert view,

00:19:52.160 --> 00:19:56.160
which takes up the bottom
right-hand side of this window.

00:19:56.160 --> 00:19:58.980
Let me zoom in so you
guys can see it better.

00:19:59.890 --> 00:20:02.500
So in this view, there's five columns.

00:20:02.500 --> 00:20:05.030
The first is severity,
and there's two levels of severity.

00:20:05.030 --> 00:20:07.260
There's red square and orange triangle.

00:20:07.480 --> 00:20:09.730
Red square are really
important and should be taken

00:20:09.870 --> 00:20:11.240
care of as soon as possible.

00:20:11.330 --> 00:20:12.760
The next is total occurrences.

00:20:12.780 --> 00:20:15.800
This is how many times it occurred
while the app was recording.

00:20:16.080 --> 00:20:17.320
The next is unique occurrences.

00:20:17.490 --> 00:20:21.300
This is how many different places in
the code that we found this issue.

00:20:21.360 --> 00:20:23.680
And the final two are
category and summary,

00:20:23.700 --> 00:20:26.240
which give you a basic
idea of what the error is.

00:20:26.490 --> 00:20:28.500
Let's zoom out real quick.

00:20:29.040 --> 00:20:30.830
A good thing to do is bring
up the extended detail view

00:20:30.880 --> 00:20:31.710
on the right-hand side.

00:20:31.860 --> 00:20:33.380
So I'll bring that up now.

00:20:33.520 --> 00:20:36.790
All you need to do to do this is
go up to where it says view and

00:20:36.840 --> 00:20:39.040
click the third button next to it.

00:20:39.260 --> 00:20:41.740
This gives you a recommendation
and also the stack trace

00:20:41.830 --> 00:20:43.880
of where to go in the code.

00:20:43.880 --> 00:20:45.770
So let's look into the red
square issue right now.

00:20:45.880 --> 00:20:50.350
So I'm going to click on Validation
Error and click on the arrow.

00:20:50.440 --> 00:20:53.800
It's going to say we're calling
GL Active Texture GL False,

00:20:53.800 --> 00:20:54.980
and that's not correct.

00:20:54.980 --> 00:20:57.280
We can see up here it says in
the recommendation -- let me

00:20:57.280 --> 00:21:00.300
zoom in real quick -- it says
GL Active Texture GL False,

00:21:00.300 --> 00:21:01.690
Texture Unit Out of Range.

00:21:01.820 --> 00:21:03.620
So that doesn't sound good.

00:21:03.620 --> 00:21:06.520
And we can look down here
and see the stack trace.

00:21:06.520 --> 00:21:09.500
By double-clicking on the stack trace,
it will bring it into

00:21:09.500 --> 00:21:11.320
view in the main area.

00:21:11.600 --> 00:21:13.260
And we can see the code that we have.

00:21:13.260 --> 00:21:15.590
And right here we can
actually see GL texture,

00:21:15.600 --> 00:21:17.300
active texture, GL false.

00:21:17.510 --> 00:21:19.440
However, we can't edit in here.

00:21:19.470 --> 00:21:21.330
But there is a good thing, though.

00:21:21.410 --> 00:21:24.250
If you look up on the menu
for this source code viewer,

00:21:24.260 --> 00:21:26.740
there's a little Xcode
button right up here.

00:21:26.770 --> 00:21:29.760
It might be pretty hard
to see for everybody.

00:21:29.960 --> 00:21:34.520
So if we click on that,
it'll bring us to the place in the code

00:21:34.540 --> 00:21:37.480
where this issue is actually happening.

00:21:37.840 --> 00:21:41.770
So we can see right here we're calling
GL active texture with GL false,

00:21:41.830 --> 00:21:43.680
but it probably should
be like GL texture zero.

00:21:43.790 --> 00:21:44.940
So let's just try that.

00:21:44.940 --> 00:21:47.200
GL texture zero.

00:21:47.320 --> 00:21:49.340
Okay,
so that should take care of that issue.

00:21:49.430 --> 00:21:51.530
So let's switch back to Xcode
and look at another issue.

00:21:51.710 --> 00:21:53.840
Or instruments, excuse me.

00:21:53.900 --> 00:21:57.070
To go back to all the issues
that are happening in your app,

00:21:57.070 --> 00:22:01.120
all you need to do is click on expert
and then click on it one more time.

00:22:01.610 --> 00:22:04.660
Let's take a look at one of
these orange triangle issues.

00:22:04.740 --> 00:22:07.790
While there's a lot listed here,
I've decided to look at recommend using

00:22:07.790 --> 00:22:12.540
VBO because I've seen big performance
improvements by taking care of this one.

00:22:12.540 --> 00:22:16.450
So if we look in on the right-hand
side in the extended detail view,

00:22:16.450 --> 00:22:20.070
it says, your application sourced vertex
array data from client memory rather

00:22:20.280 --> 00:22:21.830
than from a vertex buffer object.

00:22:21.930 --> 00:22:23.660
In this situation,
every time GL draw arrays

00:22:23.750 --> 00:22:26.060
or draw elements is called,
the data is retransmitted to the

00:22:26.070 --> 00:22:27.660
graphics hardware to be rendered.

00:22:27.660 --> 00:22:30.890
That doesn't sound good at all,
so let's zoom out real quick.

00:22:32.930 --> 00:22:36.020
And let's click on the arrow
to continue further in.

00:22:36.060 --> 00:22:39.800
And you can see there's many places
in the code where this is happening.

00:22:39.800 --> 00:22:43.010
And we can actually see different stack
traces on the right-hand side over

00:22:43.010 --> 00:22:44.800
here by clicking on different ones.

00:22:44.840 --> 00:22:47.800
So let's take a look at one of these now.

00:22:47.880 --> 00:22:49.800
So I decided to look at
this unsigned byte one.

00:22:49.800 --> 00:22:51.800
It's most likely color.

00:22:51.800 --> 00:22:54.110
And we can move to the
right-hand side and click on

00:22:54.390 --> 00:22:55.670
Planet Render Object at Time.

00:22:55.800 --> 00:22:58.400
And if we look at the code right here,
there's a -- fix me,

00:22:58.520 --> 00:23:00.200
it says insert VBO code here.

00:23:00.200 --> 00:23:01.800
I guess they didn't have time to do that.

00:23:01.800 --> 00:23:03.700
And also there's a
vertex attriter pointer.

00:23:03.800 --> 00:23:06.410
It's a normal one,
except at the end they're

00:23:06.410 --> 00:23:10.800
passing in CPU data instead of,
like, using a vertex buffer object.

00:23:10.800 --> 00:23:13.800
So let's change the code to do this now.

00:23:13.800 --> 00:23:16.710
So, again,
we'll just click on the Xcode button

00:23:16.860 --> 00:23:18.800
to go to the location in code.

00:23:18.860 --> 00:23:21.800
And it's really easy to
use vertex buffer objects.

00:23:21.990 --> 00:23:24.800
All we need to do is create the VBO.

00:23:24.820 --> 00:23:27.050
And if we look up here,
this looks like -- let me see.

00:23:27.050 --> 00:23:27.720
Wait a second.

00:23:27.780 --> 00:23:29.800
This is the init function.

00:23:29.800 --> 00:23:30.800
So this would be a good place to put it.

00:23:30.800 --> 00:23:33.570
And there's actually a
fix me in here to do that.

00:23:33.730 --> 00:23:35.780
I've created a code
snippet to do it already.

00:23:35.800 --> 00:23:38.390
So let's just add it in here.

00:23:38.550 --> 00:23:41.140
It's really easy to create a VBO.

00:23:41.140 --> 00:23:44.690
All we need to do is call genbuffers
and then bind the buffer and then

00:23:44.770 --> 00:23:47.100
just upload the data into this buffer.

00:23:47.100 --> 00:23:49.890
That's all you need to do for that.

00:23:50.850 --> 00:23:53.760
And then down below where we're
actually going to render the object,

00:23:53.760 --> 00:23:56.770
I created another code snippet for that.

00:23:57.530 --> 00:23:59.480
And if we look at the
difference between the two,

00:23:59.480 --> 00:24:01.790
I'll just comment out this one so
it's easier to see the difference.

00:24:01.910 --> 00:24:04.310
Basically all we need to do
is call bind buffer with the

00:24:04.310 --> 00:24:06.600
buffer that we created before,
and then instead of

00:24:06.690 --> 00:24:09.700
passing in the CPU data,
we'll just pass in an offset.

00:24:09.740 --> 00:24:13.800
But since it needs to go in as a pointer,
we'll pass a null for this.

00:24:13.810 --> 00:24:15.210
So now we've made these two changes.

00:24:15.330 --> 00:24:18.760
So let's see what this did to
the app and see if we got any

00:24:18.760 --> 00:24:20.730
improvement or fixed any issues.

00:24:20.890 --> 00:24:24.910
So I'm going to run the app
and switch back to the app now.

00:24:28.960 --> 00:24:31.240
Okay, so now look,
the ship's showing up properly,

00:24:31.240 --> 00:24:33.670
it looks like, and we're getting around
55 frames per second,

00:24:33.690 --> 00:24:35.880
which is a big jump from what we
were getting before around 40.

00:24:35.880 --> 00:24:38.220
However,
there's still some weirdness happening,

00:24:38.220 --> 00:24:41.440
like that planet just changed and
some things still don't look right.

00:24:41.490 --> 00:24:43.750
So with that in mind,
I'm going to introduce Seth Sowerby,

00:24:43.860 --> 00:24:45.480
who's going to go over our newest tool.

00:24:45.480 --> 00:24:46.860
And thank you.

00:24:52.300 --> 00:24:56.280
Hi, I'm Seth, and I'm a manager in the
GPU Developer Technologies Group.

00:24:56.400 --> 00:24:59.650
Today I'm going to introduce you to
a revolutionary new way to debug your

00:24:59.710 --> 00:25:06.500
OpenGL ES apps on iOS 5 visually,
all without leaving the comfort of Xcode.

00:25:08.590 --> 00:25:13.750
The OpenGL ES debugger is a
brand new part of Xcode 4.2 that

00:25:13.750 --> 00:25:17.890
allows you to capture a frame of
your app's OpenGL ES activity,

00:25:17.890 --> 00:25:21.130
then step through the draw calls,
seeing how it builds your frame,

00:25:21.240 --> 00:25:24.420
inspecting the state and
objects at any point.

00:25:24.570 --> 00:25:25.660
Why would you want to do that?

00:25:25.730 --> 00:25:28.460
Well, maybe you've got a rendering
defect and you want to quickly

00:25:28.460 --> 00:25:29.900
hone in on where the issue is.

00:25:29.960 --> 00:25:33.560
Or perhaps you want to get a better view
of your per-frame workload by looking

00:25:33.570 --> 00:25:35.760
at all the draw calls that you're doing.

00:25:37.300 --> 00:25:38.900
Sounds great, Seth, I hear you say.

00:25:38.940 --> 00:25:40.840
Or at least think to yourself.

00:25:40.940 --> 00:25:42.360
Where can I find it?

00:25:42.460 --> 00:25:46.100
Well, the OpenGL ES debugger is
built right into Xcode 4.2.

00:25:46.160 --> 00:25:47.100
Integral part of it.

00:25:47.110 --> 00:25:50.100
Nothing extra to install,
nothing to enable, no switches to change.

00:25:50.160 --> 00:25:51.780
Right there.

00:25:51.870 --> 00:25:55.220
If you're an OpenGL ES app
running on an iOS 5 device,

00:25:55.330 --> 00:25:57.860
you'll see this new
button on the debug bar.

00:25:58.320 --> 00:25:59.370
Simply click that.

00:25:59.500 --> 00:26:02.600
It will capture a frame
of your jail usage,

00:26:02.650 --> 00:26:05.300
pause your application,
background it so it's safe,

00:26:05.400 --> 00:26:07.160
and launch the debugger.

00:26:08.450 --> 00:26:11.640
Alternatively, if you prefer,
you can add a breakpoint at any

00:26:11.710 --> 00:26:16.130
point in your code and use the new
Capture OpenGL Frame breakpoint

00:26:16.130 --> 00:26:19.140
action to capture wherever you want.

00:26:19.270 --> 00:26:23.560
Or you can use the code marker
that Benj talked about earlier.

00:26:25.330 --> 00:26:29.070
So the first thing you'll see once
Xcode has finished capturing your

00:26:29.250 --> 00:26:33.830
frame is the main frame-buffer view
in place of the main Xcode editor.

00:26:33.910 --> 00:26:38.120
In this, we show you the contents of
your currently attached frame

00:26:38.120 --> 00:26:40.520
buffer at any call in your app.

00:26:40.750 --> 00:26:43.230
And in this case,
you can see we also highlight the last

00:26:43.960 --> 00:26:49.500
draw call as a lurid green wireframe,
so you can easily pick it out.

00:26:49.550 --> 00:26:52.110
In this app, as you can see,
there's a color buffer and

00:26:52.110 --> 00:26:53.600
a depth buffer attached.

00:26:53.690 --> 00:26:57.110
And for depth buffer values,
we detect the range of depth

00:26:57.120 --> 00:27:00.400
buffer values you use so that
we can map that to a gray scale,

00:27:00.400 --> 00:27:05.990
and you can see in detail which area
of the depth range you're using.

00:27:07.150 --> 00:27:11.460
The frame scrubber allows you to quickly
move back and forth through your frame,

00:27:11.620 --> 00:27:15.590
quickly finding the draw call that's
drawing a particular rendering artifact

00:27:15.710 --> 00:27:17.980
or some other part of your frame.

00:27:18.050 --> 00:27:20.410
As you move to the left,
you move back to the start of your

00:27:20.410 --> 00:27:23.870
frame where you're probably clearing
your buffers and rendering your skybox,

00:27:23.890 --> 00:27:24.590
perhaps.

00:27:24.690 --> 00:27:28.490
If you move all the way to the right,
you'll see your final frame ready

00:27:28.490 --> 00:27:30.740
to present onto the device screen.

00:27:31.080 --> 00:27:34.120
You can also navigate the
frame using the jump bar,

00:27:34.120 --> 00:27:38.190
and it also gives you a handy description
of what exactly are the parameters

00:27:38.330 --> 00:27:40.910
to that currently selected draw call.

00:27:42.900 --> 00:27:47.150
In the debug navigator,
where you're used to seeing stacks

00:27:47.230 --> 00:27:51.100
and queues from the CPU debugger,
we'll show you the full command

00:27:51.100 --> 00:27:54.450
list of all the OpenGL commands
you're making within that frame.

00:27:54.570 --> 00:27:59.450
And you'll see that we have different
icons for draw calls and for state calls.

00:27:59.560 --> 00:28:02.500
So you can instantly quickly
see where you're doing draws,

00:28:02.500 --> 00:28:05.710
where you're doing state calls,
and are you doing a ton of state calls,

00:28:05.710 --> 00:28:08.590
and then one draw call,
and then a ton of state calls?

00:28:08.700 --> 00:28:12.340
Quickly let you see that you may be doing
something that's not very performant.

00:28:12.400 --> 00:28:15.950
Also,
if you disclose on any of the API calls,

00:28:16.210 --> 00:28:20.370
you'll see that we give you a full stack
frame for that point in your frame.

00:28:20.490 --> 00:28:22.940
So at any point where you
found a rendering defect,

00:28:23.000 --> 00:28:25.740
disclose it, see the stack,
click on anything in the stack,

00:28:25.800 --> 00:28:27.640
go back to your source
code and fix the issue.

00:28:27.680 --> 00:28:29.570
You don't have to start
delving back to see,

00:28:29.640 --> 00:28:32.590
okay, well, I know now it was a draw call
where something went wrong.

00:28:32.970 --> 00:28:35.000
You can jump straight to it.

00:28:35.080 --> 00:28:39.170
But a long list of draw
calls and state calls.

00:28:39.290 --> 00:28:39.980
It's kind of flat.

00:28:40.120 --> 00:28:41.840
It's kind of hard to see
what's going on in your app.

00:28:41.880 --> 00:28:45.740
Really, there should be some better way
of kind of seeing what's going on.

00:28:45.920 --> 00:28:52.000
So with that in mind, we introduced a new
OpenGL extension into iOS 5,

00:28:52.130 --> 00:28:53.840
Apple Debug Marker.

00:28:54.080 --> 00:29:00.380
This lets you use simple text markers to
annotate the hierarchy of your rendering.

00:29:00.480 --> 00:29:03.400
So you can label when you're doing
your pre-pass or when you're doing

00:29:03.400 --> 00:29:06.630
the lights at the end or when you're
drawing a structure or drawing cars,

00:29:06.670 --> 00:29:07.460
whatever you want.

00:29:07.580 --> 00:29:08.780
The choice is up to you.

00:29:08.850 --> 00:29:11.660
It's you annotating your
code so that you can read it.

00:29:11.720 --> 00:29:13.720
And see what's going on.

00:29:13.720 --> 00:29:18.160
And you can nest these markers as deeply
as you want so you can reflect the

00:29:18.160 --> 00:29:20.910
full complexity of your rendering loop.

00:29:22.810 --> 00:29:24.240
To use the Apple Debug Marker?

00:29:24.320 --> 00:29:25.460
Really simple.

00:29:25.630 --> 00:29:29.460
Just call push_debug_marker before
the first call you wish to annotate,

00:29:29.580 --> 00:29:31.850
passing the text label you want.

00:29:32.920 --> 00:29:34.440
and Karl Popmarker when you're done.

00:29:34.540 --> 00:29:35.440
Simple as that.

00:29:35.460 --> 00:29:38.820
We support this new extension out of
the box with the GL Frame Debugger,

00:29:38.820 --> 00:29:42.810
and we'll also be introducing it
to our other GL debugging tools.

00:29:44.820 --> 00:29:47.670
In the debug area,
we've taken the variables view that

00:29:47.670 --> 00:29:52.290
you've become familiar with for viewing
your autos and your variables and your

00:29:52.290 --> 00:29:55.820
console log and all that type of stuff,
and we've extended it

00:29:55.940 --> 00:29:57.170
to show your GL state.

00:29:57.280 --> 00:30:00.630
So we have viewers for
your GL context state,

00:30:00.630 --> 00:30:05.940
your bound GL object state,
and all the state for all the objects.

00:30:06.070 --> 00:30:10.680
To make it easy to scan the great
wealth of GL state that there is,

00:30:10.810 --> 00:30:11.900
we group these semantically.

00:30:11.980 --> 00:30:14.610
So we put all the values that
are related to blending together,

00:30:14.660 --> 00:30:18.660
all the values related
to depth test together,

00:30:18.660 --> 00:30:23.080
so you can see what you want to see
related to each type of operation.

00:30:23.130 --> 00:30:25.320
We also add summaries to these.

00:30:25.510 --> 00:30:27.950
So you can just see that
if blending's turned off,

00:30:27.950 --> 00:30:30.460
you don't need to see
all the blending values.

00:30:30.510 --> 00:30:33.340
If blending is on, it will show you,
okay, blending and blending

00:30:33.410 --> 00:30:37.680
this factor and that,
so you can quickly scan what's going on.

00:30:37.900 --> 00:30:42.670
Similar to how the CPU debugger
will highlight variables that have

00:30:42.670 --> 00:30:45.370
changed as you step through your code,
we'll show you state that has

00:30:45.470 --> 00:30:47.300
changed since the last draw call.

00:30:47.340 --> 00:30:51.330
So as you step through your frame,
you can see your state vector getting

00:30:51.330 --> 00:30:53.140
updated from draw call to draw call.

00:30:53.140 --> 00:30:56.620
If suddenly you're changing a state
value that you didn't expect to change,

00:30:56.640 --> 00:30:57.830
you'll see it highlighted in blue.

00:30:57.900 --> 00:30:59.770
Oh, I've turned my depth test off.

00:30:59.800 --> 00:31:00.660
Why has that happened?

00:31:00.670 --> 00:31:02.140
That's wrong.

00:31:02.160 --> 00:31:03.620
Jump straight to the issue.

00:31:03.620 --> 00:31:06.740
In the bound GL object view,
we'll show you, unsurprisingly,

00:31:06.750 --> 00:31:10.150
the state for all your bound GL objects,
including such goodness as your

00:31:10.600 --> 00:31:15.460
uniforms for programs or the
filtering levels on each texture,

00:31:15.460 --> 00:31:18.130
everything there that you need to find.

00:31:19.820 --> 00:31:22.500
In the Object View,
we show you all the objects that

00:31:22.590 --> 00:31:24.180
are currently in your context.

00:31:24.180 --> 00:31:24.840
Two options there.

00:31:24.840 --> 00:31:28.660
You can have the BoundGL Object View,
which shows you just those

00:31:28.660 --> 00:31:31.270
objects that are currently bound,
or the All Objects will let

00:31:31.280 --> 00:31:32.940
you search through any of them.

00:31:33.040 --> 00:31:36.110
And we also have filters there
where you can select whether to

00:31:36.480 --> 00:31:39.430
view all of them or just by type,
such as texture or shader.

00:31:39.540 --> 00:31:42.600
The Bound case is the one we
show by default because that's

00:31:42.680 --> 00:31:45.890
really great for any draw call,
showing you which objects,

00:31:45.890 --> 00:31:49.260
which textures, which programs you're
actually drawing with.

00:31:49.720 --> 00:31:52.250
In the case of textures
and render buffers,

00:31:52.250 --> 00:31:54.000
as you can see,
we'll show you a thumbnail

00:31:54.000 --> 00:31:55.100
of their contents.

00:31:55.200 --> 00:31:57.580
Makes it really easy to tell them apart.

00:31:57.750 --> 00:32:01.090
It's not so easy to do with vertex
buffers and programs because,

00:32:01.090 --> 00:32:04.940
you know, how do you thumbnail a vertex?

00:32:04.990 --> 00:32:10.450
And it's kind of hard to tell GL objects
apart by name only when GL's concept

00:32:10.450 --> 00:32:12.990
of a name is an unsigned integer.

00:32:13.730 --> 00:32:16.910
Which leads us to the second new
extension we're introducing to

00:32:17.020 --> 00:32:21.620
OpenGL in iOS 5 for debugging purposes:
Apple Debug Label.

00:32:21.670 --> 00:32:26.000
This lets you attach a simple text
label to any GL object you've created.

00:32:26.040 --> 00:32:29.500
It makes it quickly -- you can quickly,
easily look and see, oh,

00:32:29.530 --> 00:32:35.720
that's texture2.pvr, or this is the mesh
for my castle vertices,

00:32:35.770 --> 00:32:36.400
or whatever.

00:32:36.570 --> 00:32:40.060
Again, the choice of how you
label them is down to you.

00:32:42.230 --> 00:32:45.880
To label your objects,
simply once you've created your object,

00:32:46.030 --> 00:32:47.520
just call label object.

00:32:47.650 --> 00:32:49.930
Just pass in what the
type of the object is,

00:32:49.930 --> 00:32:53.420
the name,
and the text you wish to label it with.

00:32:53.420 --> 00:32:55.850
There's also an API for
querying these labels back.

00:32:55.850 --> 00:33:00.140
So if you want to use it for building
your own login code within your app

00:33:00.140 --> 00:33:03.980
or some offline tool that you have,
you can do that, too.

00:33:05.590 --> 00:33:08.040
If you double-click on
any of these objects,

00:33:08.040 --> 00:33:10.980
you'll get a detailed view
so you can hone in on seeing

00:33:10.980 --> 00:33:12.700
exactly what's in there.

00:33:12.700 --> 00:33:17.130
And, yeah, we provide the functionality
you need to view them in detail.

00:33:17.220 --> 00:33:20.700
So if it's textures, you can select the
MIP level or the cube face.

00:33:20.790 --> 00:33:24.460
If it's a program or shader,
you can check the compile info log.

00:33:24.550 --> 00:33:27.770
So you can see all you need
to figure out what's going on.

00:33:28.300 --> 00:33:32.280
For vertex array objects,
we even unpack all the vertex data

00:33:32.330 --> 00:33:36.770
from the vertex arrays and element
buffers and array buffers that are

00:33:36.930 --> 00:33:41.210
attached to the VAO to provide you with
a list of vertices as your currently

00:33:41.280 --> 00:33:43.540
bound vertex program will see them.

00:33:43.660 --> 00:33:47.590
So you can see exactly what data
it's going to be operating on.

00:33:49.460 --> 00:33:53.360
Because we build all these object
viewers on top of the existing

00:33:53.450 --> 00:33:57.620
assistance editors within Xcode,
you can configure them to suit your

00:33:57.620 --> 00:34:01.140
workload and have multiple windows open.

00:34:01.140 --> 00:34:03.940
So you can have one, in this case,
we show you bound GL objects.

00:34:04.080 --> 00:34:06.740
And we also, in this case,
showing you another new assistant

00:34:06.740 --> 00:34:11.600
we've brought in specifically to make
use of this variability in that you

00:34:11.600 --> 00:34:16.260
can have one that shows you the source
code at the point you're calling GL.

00:34:16.390 --> 00:34:20.090
So you can just step through your
code or step through the draw

00:34:20.150 --> 00:34:23.470
calls or API calls in your frame,
seeing the buffers update,

00:34:23.630 --> 00:34:27.070
seeing the bound objects update,
and seeing exactly where you are

00:34:27.320 --> 00:34:29.090
in your code at that same point.

00:34:29.100 --> 00:34:31.300
As soon as you spot an issue,
you're right there.

00:34:31.330 --> 00:34:34.030
Just jump to your code and fix it.

00:34:34.920 --> 00:34:38.640
Okay, at this point,
I'd like to invite Filip Iliescu

00:34:38.770 --> 00:34:42.490
to come forward and demonstrate the
OpenGL ES debugger as he fixes the

00:34:42.560 --> 00:34:44.560
final few issues in TouchFighter 2.

00:34:44.790 --> 00:34:46.510
Thanks, Seth.

00:34:48.940 --> 00:34:52.080
All right,
T-minus 20 minutes to executive demo,

00:34:52.080 --> 00:34:53.030
and I'm really excited.

00:34:53.030 --> 00:34:57.470
So I'm going to show you guys our
new OpenGL ES debugger with NX code

00:34:57.610 --> 00:35:04.660
4.2 by fixing some of the issues
that we still see in Touch Fighter.

00:35:06.060 --> 00:35:08.060
Switching over to Xcode here.

00:35:08.300 --> 00:35:11.090
I'm going to start out by looking
at what we believe to be the

00:35:11.240 --> 00:35:15.300
correct rendering that we're
expecting out of Touch Fighter.

00:35:15.350 --> 00:35:23.400
And then I'll go ahead and compile
and launch Touch Fighter on this iPad.

00:35:24.240 --> 00:35:27.160
We can see what it's
actually rendering like.

00:35:27.180 --> 00:35:29.730
Okay, yeah, yeah, it looks pretty broken.

00:35:29.790 --> 00:35:33.310
I can still see some issues here
going on with that mothership.

00:35:33.460 --> 00:35:36.760
There's something wrong
with the geometry.

00:35:36.760 --> 00:35:39.800
And the fighters are actually
flying behind the planet,

00:35:39.800 --> 00:35:40.440
the background.

00:35:40.480 --> 00:35:43.280
That's kind of weird.

00:35:43.290 --> 00:35:47.720
The planet actually
looks completely broken.

00:35:48.080 --> 00:35:50.360
Looks like there's --
the texture's wrong,

00:35:50.360 --> 00:35:53.240
and there's some kind
of big ring around it.

00:35:53.240 --> 00:35:54.810
When I was expecting a glow.

00:35:54.840 --> 00:36:00.320
So I'll go ahead and take
a capture of this guy.

00:36:00.380 --> 00:36:04.190
And switch back to Xcode here.

00:36:05.030 --> 00:36:09.310
Now, since I can basically see all the
rendering defects while the game

00:36:09.310 --> 00:36:12.140
is running in idle and I don't
really have to interact with it,

00:36:12.140 --> 00:36:17.590
I'm going to go ahead and use this
capture button right here that

00:36:17.590 --> 00:36:23.590
shows up if your app is linking
to OpenGL ES to trigger a capture.

00:36:23.610 --> 00:36:27.140
And while this is capturing,
I just want to note that you can also

00:36:27.140 --> 00:36:31.870
use breakpoint actions or you could
actually use the new API that Seth and

00:36:31.870 --> 00:36:36.460
Benj mentioned in their slides to
trigger a capture programmatically.

00:36:36.460 --> 00:36:40.660
So this is going to take a
second to kind of grab the

00:36:40.660 --> 00:36:44.960
frame and all of the API calls,
and once it's done,

00:36:44.960 --> 00:36:48.740
it'll show up in Xcode's
main editor here.

00:36:48.740 --> 00:36:54.880
And the first thing you'll see is the
frame that you actually were capturing.

00:36:55.260 --> 00:36:56.090
Okay.

00:36:56.090 --> 00:36:58.100
Well, here we go.

00:36:58.240 --> 00:37:01.730
So first off,
I just want to note that this

00:37:01.750 --> 00:37:05.100
is the main render buffer here,
the main color render buffer.

00:37:05.200 --> 00:37:07.340
And you can actually see what
buffers you have enabled.

00:37:07.340 --> 00:37:08.980
You can show color depth or stencil.

00:37:09.050 --> 00:37:12.750
Or my favorite is to just set it on
auto because if you set it on auto,

00:37:12.750 --> 00:37:15.700
then it will just show you
the current attachments that

00:37:15.890 --> 00:37:19.020
you have on the current FBO,
the current draw FBO.

00:37:19.840 --> 00:37:22.800
And right above that is
Xcode's editor jump bar,

00:37:22.800 --> 00:37:26.270
which will always show you the
current trace location for all

00:37:26.270 --> 00:37:29.450
of the objects and state and
everything that you're inspecting.

00:37:29.460 --> 00:37:32.490
Over on the left,
we have the GL frame navigator.

00:37:32.490 --> 00:37:36.990
And this might be a little hard to see,
but I'll zoom in on it for you guys.

00:37:37.040 --> 00:37:39.920
And essentially,
this gives you the complete

00:37:40.060 --> 00:37:43.820
list of all of your API calls
in the order that you made them.

00:37:43.820 --> 00:37:49.430
You can further disclose that to
actually get a backtrace to your code.

00:37:51.920 --> 00:37:55.150
Now, you can also see these folders
that we've set up here.

00:37:55.160 --> 00:37:56.700
And the way you set these
up is really simple.

00:37:56.700 --> 00:38:01.330
You just use the new GL Push pot marker
API that Seth mentioned in his slides.

00:38:01.560 --> 00:38:07.020
You can further open up one of
these markers and you get the

00:38:07.390 --> 00:38:13.270
complete list of API calls that
you surrounded using those markers.

00:38:16.860 --> 00:38:21.630
Down below, we have the debug area,
Xcode's debug area,

00:38:21.630 --> 00:38:25.130
which we've added our state inspector.

00:38:25.130 --> 00:38:28.400
And the state that you're seeing here
is based on the current trace selection,

00:38:28.400 --> 00:38:31.300
which you can always note, once again,
by just looking at the jump bar

00:38:31.500 --> 00:38:33.200
and the API item in the jump bar.

00:38:33.270 --> 00:38:37.930
This is the state at that
point in the API trace.

00:38:38.210 --> 00:38:42.500
And over on the right,
we have Xcode's assistant editor, which,

00:38:42.730 --> 00:38:46.400
essentially, if it's not open,
you can always trigger the show

00:38:46.400 --> 00:38:48.700
assistant editor button here to open it.

00:38:48.710 --> 00:38:53.190
And we have three different categories
here that you can choose from:

00:38:53.470 --> 00:38:56.700
bound GL objects, all GL objects,
and the stack.

00:38:56.740 --> 00:38:59.190
Now, the stack is kind of nice.

00:38:59.220 --> 00:39:02.500
What I'm going to do is actually go
ahead and open up a new assistant

00:39:02.510 --> 00:39:04.700
down below and select stack.

00:39:04.960 --> 00:39:08.170
Now, the nice thing about this is it
will show you the -- it will show

00:39:08.440 --> 00:39:11.700
you the GL API exactly at the
point where you're inspecting.

00:39:11.700 --> 00:39:15.000
So if, for example,
you want to actually -- if you're

00:39:15.110 --> 00:39:20.700
going through this and you're
selecting various points in the API,

00:39:20.700 --> 00:39:22.700
it will actually show you
where you made that GL call.

00:39:22.700 --> 00:39:27.060
If you want to actually show
something in the debug navigator

00:39:27.130 --> 00:39:33.200
to see where it falls in the order,
you can right-click on the main editor

00:39:33.200 --> 00:39:35.860
and click reveal in debug navigator,
and it will open up over

00:39:35.860 --> 00:39:40.600
here in the debug navigator,
further disclose and get a stack frame.

00:39:41.330 --> 00:39:42.200
Great.

00:39:42.200 --> 00:39:45.940
Well, I have this set up now,
exactly how I would go about debugging.

00:39:45.940 --> 00:39:48.570
So let's get started.

00:39:48.670 --> 00:39:51.920
First off, I want to look at what's going
on with this mother ship.

00:39:51.920 --> 00:39:53.510
It's kind of interesting.

00:39:53.510 --> 00:39:55.480
The geometry doesn't look right.

00:39:55.480 --> 00:39:59.700
According to my picture that I had,
it looks a lot different.

00:39:59.830 --> 00:40:04.870
So I think I'm just going to go ahead
and figure out how it's being drawn by

00:40:04.870 --> 00:40:09.660
dragging the knob of the slider here,
the scrubber,

00:40:09.750 --> 00:40:14.000
to show every -- to show the
rendering -- intermediate rendering

00:40:14.000 --> 00:40:15.500
calls that leads up to that.

00:40:15.580 --> 00:40:18.180
Now, I'm going backwards,
and while I'm getting there,

00:40:18.180 --> 00:40:20.870
I just want to note one thing here.

00:40:21.170 --> 00:40:22.460
Two things, actually.

00:40:22.460 --> 00:40:25.270
The first thing is you'll
notice this green wireframe,

00:40:25.270 --> 00:40:28.500
and that basically tells you
what the geometry is that you're

00:40:28.500 --> 00:40:32.900
currently rendering with that draw
elements call or what have you.

00:40:32.900 --> 00:40:38.370
You can always right-click to
hide or reveal the wireframe at

00:40:38.370 --> 00:40:42.500
any point if it's not showing,
for example.

00:40:42.500 --> 00:40:48.560
So the other thing I want to note
is that you actually can see all

00:40:48.590 --> 00:40:52.900
of the intermediate rendering
happening on the device itself.

00:40:54.950 --> 00:40:57.020
So there's our mothership.

00:40:57.110 --> 00:40:57.640
Great.

00:40:57.950 --> 00:40:59.800
I think I'll just stop there.

00:40:59.830 --> 00:41:02.470
And then I'll switch back over to Xcode.

00:41:03.330 --> 00:41:08.700
And then I'm going to right-click
to reveal in the debug navigator,

00:41:08.750 --> 00:41:10.700
I have this big mothership group here.

00:41:10.730 --> 00:41:11.060
Okay.

00:41:11.400 --> 00:41:15.200
Well, I'm actually kind of not seeing
anything right off the bat.

00:41:15.240 --> 00:41:18.840
Maybe if I go to the very
first draw where they actually

00:41:18.970 --> 00:41:22.460
started drawing this mothership,
I can see something interesting.

00:41:22.460 --> 00:41:27.500
Well, the first thing that pops up is
in the state viewer down below,

00:41:27.810 --> 00:41:31.450
anything that's highlighted with
blue is any new state that's been

00:41:31.550 --> 00:41:33.580
set up for this particular API call.

00:41:33.780 --> 00:41:36.580
So, okay, that's interesting.

00:41:36.680 --> 00:41:40.570
I have a depth buffer
and depth reads enabled.

00:41:41.030 --> 00:41:44.650
And I actually don't see a depth buffer,
and I can tell right away because

00:41:44.660 --> 00:41:47.810
I've got it set to auto and
all I see is a color buffer.

00:41:48.040 --> 00:41:52.550
Okay, well,
I can also disclose further on the

00:41:52.600 --> 00:41:57.750
bound frame buffer and notice that
there's no depth attachment in it either.

00:41:58.140 --> 00:42:01.450
Well, that kind of tells me that
maybe I've not set up my depth

00:42:01.450 --> 00:42:03.900
attachment correctly or something.

00:42:03.900 --> 00:42:06.270
So I think the first thing I'm
going to do is just go over into

00:42:06.270 --> 00:42:10.540
Xcode's project-wide search and
just search for GL depth attachment.

00:42:11.810 --> 00:42:15.140
And see if I've actually set that guy up.

00:42:15.140 --> 00:42:16.390
Or set it up wrong.

00:42:16.520 --> 00:42:18.800
Oh, it does show up in my search.

00:42:18.890 --> 00:42:19.800
Oh yeah, look at that.

00:42:19.800 --> 00:42:22.870
It's commented out with a big fix me.

00:42:24.850 --> 00:42:26.580
Looks like somebody thought
they might need one,

00:42:26.690 --> 00:42:29.320
but they didn't actually set it up.

00:42:29.320 --> 00:42:33.140
Okay, well,
let's go ahead and recompile this.

00:42:34.400 --> 00:42:36.900
And see if that fixed anything.

00:42:36.930 --> 00:42:40.360
I'll go ahead and switch
back over to the iPad.

00:42:40.360 --> 00:42:43.890
See if anything's fixed here.

00:42:43.890 --> 00:42:43.890
I'm actually --

00:42:44.550 --> 00:42:47.730
I'm actually fairly certain
that that fixed... Oh yeah,

00:42:47.730 --> 00:42:50.100
yeah, the mothership looks good now.

00:42:50.130 --> 00:42:51.630
But did it fix anything else?

00:42:51.700 --> 00:42:54.300
Let's see, the fighters are still
flying behind the planet,

00:42:54.300 --> 00:42:55.780
the texture's still busted.

00:42:55.850 --> 00:42:59.540
All right,
let's go ahead and switch back over to

00:42:59.650 --> 00:43:02.880
Xcode and grab another capture of this.

00:43:03.000 --> 00:43:09.010
See if we can figure out what's going
on with the rest of these defects.

00:43:13.900 --> 00:43:19.510
So while you're capturing,
you can notice there's this area over

00:43:19.520 --> 00:43:23.260
here that tells you what's going on.

00:43:23.980 --> 00:43:26.360
So you always know that
the capture is going.

00:43:26.400 --> 00:43:27.860
And look at that, we have a depth buffer.

00:43:27.860 --> 00:43:29.900
Yeah, that's kind of what I thought.

00:43:29.900 --> 00:43:35.430
You can always just view the color if
you want or just -- or select both.

00:43:35.440 --> 00:43:37.300
But let's just keep it on auto.

00:43:37.360 --> 00:43:40.400
And that should give us what we need.

00:43:40.620 --> 00:43:42.520
Okay.

00:43:42.520 --> 00:43:42.520
Well,

00:43:42.980 --> 00:43:44.600
Let's take a look at this planet.

00:43:44.640 --> 00:43:47.190
I'm going to go ahead and put this back
on stack because I really like that.

00:43:47.200 --> 00:43:48.800
I think it's incredibly useful.

00:43:48.860 --> 00:43:52.730
Always seeing the top of
the stack for each call.

00:43:52.820 --> 00:43:57.930
And I'm going to go ahead and
just move over to this planet

00:43:57.930 --> 00:44:00.240
group that I've created.

00:44:00.250 --> 00:44:02.560
And I guess I'll further disclose that
because I'm actually getting the ring.

00:44:02.560 --> 00:44:04.390
I'm more interested -- let's see,
this is the first draw call,

00:44:04.470 --> 00:44:07.230
so I'm guessing -- yep,
that's the planet I'm looking for.

00:44:07.390 --> 00:44:09.760
Great.

00:44:09.760 --> 00:44:12.670
If I go ahead and --

00:44:13.430 --> 00:44:16.390
Zoom in on the state area.

00:44:16.400 --> 00:44:19.800
Well, notice I have active
texture unit one set,

00:44:19.820 --> 00:44:23.960
and I've got two texture
units in my bound GL objects.

00:44:24.360 --> 00:44:27.630
Yet, if I look at the bound resources,

00:44:28.200 --> 00:44:33.430
The Texture Unit 1 is the one that I'm
actually interested in drawing with,

00:44:33.560 --> 00:44:34.860
so that looks correct.

00:44:34.860 --> 00:44:39.500
Although I am using OpenGL ES 2.0,
which means I've probably got some shader

00:44:39.510 --> 00:44:41.340
going on that's doing my rendering.

00:44:41.340 --> 00:44:43.060
Let's take a look at the fragment shader.

00:44:43.060 --> 00:44:46.760
It looks like I've got -- I'm
sampling with this uniform here.

00:44:46.770 --> 00:44:48.320
Well, okay.

00:44:48.500 --> 00:44:52.480
If I click and disclose the program,

00:44:52.760 --> 00:44:56.040
In BoundGL Objects,
I can actually view the values

00:44:56.040 --> 00:44:58.420
of each of those uniforms.

00:44:58.420 --> 00:45:02.600
And yeah, it looks like I've got -- I'm
sampling from texture unit zero.

00:45:02.810 --> 00:45:05.160
Well, that's not the texture I want.

00:45:05.220 --> 00:45:06.990
Interesting.

00:45:07.480 --> 00:45:11.290
Okay, well,
where in my trace here am I actually

00:45:11.290 --> 00:45:13.760
setting active texture unit one?

00:45:13.820 --> 00:45:16.900
Oh, it looks like, yeah,
right about there.

00:45:16.960 --> 00:45:17.700
Yeah, there it is.

00:45:17.710 --> 00:45:18.890
Shows up right in the top of the stack.

00:45:18.900 --> 00:45:23.660
Well, somebody put a fix me
there and didn't fix it.

00:45:23.720 --> 00:45:26.790
All right,
so let's just set texture zero.

00:45:29.410 --> 00:45:34.680
And while I'm here, I'm going to go over
to the next draw call,

00:45:34.680 --> 00:45:37.290
which is that ring that was
appearing around the planet,

00:45:37.290 --> 00:45:38.940
and take a look at that.

00:45:39.040 --> 00:45:43.210
Now, I can see immediately in
my state area right here,

00:45:43.360 --> 00:45:46.480
and I'll zoom in,
that somebody enabled blending.

00:45:46.630 --> 00:45:48.100
Okay.

00:45:48.290 --> 00:45:52.970
So that kind of makes sense,
although why is it set to zero?

00:45:53.420 --> 00:45:54.700
That's kind of weird.

00:45:54.700 --> 00:45:56.980
I would expect that if I'm trying
to blend with the background,

00:45:56.980 --> 00:45:58.800
I should be using something
like 1-source-alpha.

00:45:58.800 --> 00:46:01.900
So where do I actually set
that in my draw list here?

00:46:01.910 --> 00:46:04.690
Oh, yeah, there's the blend funk.

00:46:04.970 --> 00:46:06.340
And it looks like, yeah, there it is.

00:46:06.460 --> 00:46:07.980
Somebody set it to zero.

00:46:08.040 --> 00:46:12.400
And, of course, put a big fix me,
like they thought that was the, you know,

00:46:12.450 --> 00:46:13.800
the right thing to do but didn't fix it.

00:46:13.880 --> 00:46:14.810
Great.

00:46:15.070 --> 00:46:17.050
Well,
I'm going to go ahead and recompile this

00:46:17.180 --> 00:46:19.000
and run it again and see how it looks.

00:46:19.000 --> 00:46:21.730
And I'll switch back over to the iPad.

00:46:24.700 --> 00:46:26.780
Yeah, yeah,
it looks like the planet's fixed,

00:46:26.780 --> 00:46:30.020
and we've got this nice glow
around the planet and everything,

00:46:30.020 --> 00:46:32.910
the way it's supposed to look, but, yeah,
those spaceships are still

00:46:32.920 --> 00:46:34.900
flying behind the planets.

00:46:35.160 --> 00:46:36.370
Something's really wrong there.

00:46:36.390 --> 00:46:36.880
All right.

00:46:37.020 --> 00:46:41.200
Well, I'll go ahead and try and trigger a
capture when I have some spaceships in

00:46:41.200 --> 00:46:43.600
the vicinity that I'm interested in.

00:46:43.660 --> 00:46:44.160
There we go.

00:46:44.250 --> 00:46:45.840
That should do it.

00:46:45.840 --> 00:46:47.820
Great.

00:46:47.820 --> 00:46:50.800
And see how those get drawn.

00:46:51.580 --> 00:46:54.500
Well, once again, I've set up my group,
so it's pretty easy.

00:46:54.500 --> 00:46:55.740
I can just click on it.

00:46:55.800 --> 00:46:58.920
It'll take me to the last
draw call in that group.

00:47:00.340 --> 00:47:01.440
There's the planet.

00:47:01.440 --> 00:47:02.040
Okay.

00:47:02.080 --> 00:47:06.440
Well, I can step through the draw calls,
you know, by using the steppers here.

00:47:06.590 --> 00:47:08.190
Going draw call by draw call.

00:47:08.240 --> 00:47:09.530
And there's the mothership being drawn.

00:47:09.550 --> 00:47:10.810
Or I can use the scrubber.

00:47:10.910 --> 00:47:12.360
Yeah, I know that.

00:47:12.490 --> 00:47:14.960
But I've also set up
these really nice groups.

00:47:15.030 --> 00:47:17.510
So why don't I just skip to the
last draw call on the mothership.

00:47:17.640 --> 00:47:19.140
That'll speed things up a little bit.

00:47:19.160 --> 00:47:21.440
And I can click on the enemies.

00:47:21.590 --> 00:47:22.030
Okay.

00:47:22.030 --> 00:47:23.340
So there they are.

00:47:23.580 --> 00:47:25.760
They're drawing in front of the planet.

00:47:25.850 --> 00:47:27.930
And there's -- what's going on here?

00:47:28.130 --> 00:47:29.720
Oh.

00:47:29.870 --> 00:47:32.510
Looks like somebody's
drawn the planet twice.

00:47:33.110 --> 00:47:35.700
After they've drawn everything.

00:47:35.700 --> 00:47:36.310
Okay.

00:47:36.310 --> 00:47:39.090
Well, that's kind of interesting.

00:47:39.090 --> 00:47:44.360
Should be able to just see -- yeah,
there's the push/pop marker groups,

00:47:44.360 --> 00:47:47.050
and there's a big fix me, of course.

00:47:47.110 --> 00:47:51.180
Shouldn't we render the
planet before other objects?

00:47:51.180 --> 00:47:52.310
Well, yeah.

00:47:52.310 --> 00:47:52.800
Okay.

00:47:52.940 --> 00:47:53.480
Great.

00:47:53.680 --> 00:47:56.710
I'm just going to go ahead and
comment that out since we're already

00:47:56.710 --> 00:47:56.710
rendering it somewhere and recompile.

00:47:56.710 --> 00:47:56.710
See how it looks.

00:48:03.050 --> 00:48:05.000
Okay.

00:48:05.000 --> 00:48:10.990
Well, yeah, of course, that fixed it.

00:48:11.110 --> 00:48:11.760
Great.

00:48:11.760 --> 00:48:16.050
Well, yeah, our frame rate's locked
at 60 frames per second,

00:48:16.130 --> 00:48:20.680
and I wonder if that, you know,
probably improved a little bit by

00:48:20.680 --> 00:48:23.600
removing the redundant draw as well.

00:48:23.940 --> 00:48:24.790
Awesome.

00:48:25.020 --> 00:48:25.810
Well, that does it.

00:48:25.860 --> 00:48:28.160
I'm going to hand this back
over to Seth to wrap up for us.

00:48:35.400 --> 00:48:37.400
Thanks, Phil.

00:48:37.430 --> 00:48:41.360
So, the demo's saved, the CEO's happy.

00:48:41.410 --> 00:48:44.290
Time to crack open that
magnum of champagne.

00:48:45.400 --> 00:48:48.510
If there are just three things we can
leave in your head from this session,

00:48:48.510 --> 00:48:49.400
they're these.

00:48:49.560 --> 00:48:51.790
One, these tools exist.

00:48:51.910 --> 00:48:54.060
The Performance Detective for
helping you quickly find

00:48:54.140 --> 00:48:55.600
your performance bottlenecks.

00:48:55.710 --> 00:48:59.410
The Analyzer Instrument for giving
you the laundry list of your

00:48:59.750 --> 00:49:02.340
OpenGL ES misuses and inefficiencies.

00:49:02.450 --> 00:49:06.550
And the new OpenGL ES Debugger for
helping you dive into your rendering code

00:49:06.570 --> 00:49:09.140
and fix things quickly and efficiently.

00:49:09.250 --> 00:49:11.640
Two, where to find these.

00:49:11.760 --> 00:49:12.760
Simple.

00:49:12.760 --> 00:49:13.960
Xcode 4.

00:49:14.210 --> 00:49:17.140
The Frame Debugger is
built right into Xcode 4.2.

00:49:17.220 --> 00:49:20.120
And you can launch the other
two tools directly from Xcode.

00:49:20.280 --> 00:49:22.730
Just hit Command-I and off you go.

00:49:23.010 --> 00:49:25.490
Thirdly, please use these tools.

00:49:25.660 --> 00:49:27.400
They do you no good
if you don't use them.

00:49:27.400 --> 00:49:28.920
And don't wait until something's broken.

00:49:29.130 --> 00:49:32.510
The analyzer instrument is great
for just running it occasionally,

00:49:32.710 --> 00:49:34.900
seeing if there's stuff broken
that you don't know about.

00:49:35.030 --> 00:49:38.380
Fix your bugs before you
see what's going wrong.

00:49:39.460 --> 00:49:42.290
For more information,
a couple of dev evangelists

00:49:42.290 --> 00:49:43.300
you can contact.

00:49:43.570 --> 00:49:47.150
Alan Schaffer,
who's a graphics and imaging evangelist,

00:49:47.150 --> 00:49:50.660
and Mike Jurowicz,
who's the dev tools evangelist.

00:49:51.780 --> 00:49:54.700
Just want to mention a couple
more great sessions coming up.

00:49:54.750 --> 00:49:57.230
Right after this session,
there's Best Practices

00:49:57.230 --> 00:50:00.200
for OpenGL ES Apps in iOS,
which gives you some great info

00:50:00.200 --> 00:50:03.660
on making the best use of GL and
getting the best out of the devices.

00:50:03.660 --> 00:50:07.230
And tomorrow's a great session,
Adventures in OpenGL for Mac OS X, Lion,

00:50:07.230 --> 00:50:10.730
where you'll find out what some of
the great new things we're introducing

00:50:10.730 --> 00:50:12.620
to OpenGL on the desktop in Lion.