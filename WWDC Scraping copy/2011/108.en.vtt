WEBVTT

00:00:10.450 --> 00:00:11.400
I'm Howard Miller.

00:00:11.400 --> 00:00:14.540
I am the manager for the
printing engineering team.

00:00:14.700 --> 00:00:18.000
Today I'll be assisted by
Andrew Platzer from iOS Applications

00:00:18.000 --> 00:00:22.400
and Frameworks and we have
Dave DeLoong who is going to do a demo.

00:00:22.400 --> 00:00:24.690
Our topics for today,
we're going to talk about

00:00:24.830 --> 00:00:26.660
the printing system in iOS.

00:00:26.660 --> 00:00:31.190
We're going to talk about how the
iOS printing paradigm is different

00:00:31.300 --> 00:00:35.020
than desktop printing paradigms and
then we're going to go through in

00:00:35.020 --> 00:00:39.890
detail exactly what you need to do to
adopt printing in your application.

00:00:40.970 --> 00:00:44.520
So the iOS printing system,
we got to start from the ground up.

00:00:44.730 --> 00:00:46.920
Everybody here has
printed from the desktop.

00:00:46.920 --> 00:00:49.790
Raise your hand if you've
never printed from the desktop.

00:00:49.960 --> 00:00:52.080
It's only like two people out here.

00:00:52.120 --> 00:00:54.890
It's a little bit painful no
matter what platform you're on.

00:00:54.890 --> 00:00:56.900
We think the Mac is the best though.

00:00:56.950 --> 00:01:01.820
iOS we went for great user experience,
ease of use.

00:01:01.920 --> 00:01:08.100
A user should be able to print
anything and get high quality

00:01:08.100 --> 00:01:11.590
output without a lot of hassle.

00:01:11.710 --> 00:01:15.110
We want it to be driverless,
no software to install, no configuration.

00:01:15.290 --> 00:01:19.020
The typical Windows user spends
four hours setting up a new printer.

00:01:19.150 --> 00:01:22.290
A Mac user may not spend four hours,
but that's only because I have three

00:01:22.490 --> 00:01:25.300
and a half gigabytes of drivers
that Apple hosts on its server

00:01:25.300 --> 00:01:26.860
so you can get the right driver.

00:01:27.230 --> 00:01:31.040
And iOS, we didn't want to have
customers deal with that pain.

00:01:31.160 --> 00:01:36.800
And then from an application perspective,
we wanted to make sure that printing was

00:01:36.900 --> 00:01:42.020
super easy to adopt in your application,
yet we wanted to provide you a full

00:01:42.020 --> 00:01:43.420
featured and powerful printing system.

00:01:43.910 --> 00:01:46.730
So let's talk about Apple's
printing system architectures.

00:01:46.840 --> 00:01:49.390
We actually have two,
they're very closely related.

00:01:49.490 --> 00:01:51.930
Mac OS X,
for those who are Mac OS X developers

00:01:51.930 --> 00:01:53.870
have seen this diagram before.

00:01:54.010 --> 00:01:57.250
Your application sat on the
top of a myriad of APIs,

00:01:57.400 --> 00:02:00.130
Cocoa APIs, Carbon APIs, Cups APIs.

00:02:00.180 --> 00:02:03.020
We had the entire graphic
system at your disposal.

00:02:03.020 --> 00:02:06.830
You could write a rich application
and then you could spend months trying

00:02:06.960 --> 00:02:08.870
to figure out how to get it to print.

00:02:09.400 --> 00:02:13.190
The printing system is layered on top
of our world class spooling system,

00:02:13.270 --> 00:02:16.320
Cups, which is used on all platforms
except for Microsoft.

00:02:16.400 --> 00:02:18.720
And then as I mentioned,
our three and a half gigabytes

00:02:18.820 --> 00:02:22.120
of printer drivers and you could
talk to over 50,000 printers.

00:02:22.120 --> 00:02:24.910
In Lion, we introduced AirPrint.

00:02:24.910 --> 00:02:31.070
Again, no third party drivers involved,
directly to the AirPrint printers.

00:02:31.070 --> 00:02:35.200
Going to Mac OS or iOS,
we kept the best parts of

00:02:35.200 --> 00:02:38.030
the Mac OS X printing system.

00:02:38.040 --> 00:02:42.480
Our underlying printing system and the
spooling system are the industry standard

00:02:42.480 --> 00:02:45.450
systems that you have come used to.

00:02:45.720 --> 00:02:49.980
We put a very thin set of APIs on
top of that printing system to make

00:02:49.980 --> 00:02:53.700
it very easy for your application
to quickly adopt printing.

00:02:53.720 --> 00:02:57.270
And then on iOS,
the only printers that we print

00:02:57.410 --> 00:03:00.210
to are AirPrint enabled printers.

00:03:00.370 --> 00:03:01.860
So let me talk a bit about AirPrint.

00:03:01.960 --> 00:03:03.900
This presentation is not about AirPrint.

00:03:03.900 --> 00:03:05.540
It's about what you do
in your application,

00:03:05.540 --> 00:03:08.290
but I want you to know what's
going on with this protocol.

00:03:08.400 --> 00:03:11.160
Again,
we designed it for great user experience,

00:03:11.160 --> 00:03:13.300
no drivers, full quality output.

00:03:13.300 --> 00:03:18.300
It's supported on iOS 4.2 and later,
multitasking devices only,

00:03:18.300 --> 00:03:22.300
so your really old devices
are not going to work.

00:03:22.300 --> 00:03:25.420
And then it's built into Lion, so 10.7.

00:03:25.560 --> 00:03:29.060
It's standard based, Bonjour, IPP,
your alphabet soup,

00:03:29.520 --> 00:03:34.660
and it is a zero cost license for all
printer manufacturers to adopt AirPrint.

00:03:35.550 --> 00:03:43.500
So we introduced this in fall of 2010
in iOS 4.2 and we started with HP.

00:03:43.630 --> 00:03:46.610
Everybody says,
I read it in the press all the time,

00:03:46.710 --> 00:03:48.400
why did Apple only pick HP?

00:03:48.490 --> 00:03:50.270
Well, it's pretty simple.

00:03:50.670 --> 00:03:54.400
HP sells more than half of all
printers sold in the world.

00:03:54.510 --> 00:03:57.050
If HP likes your protocol,
if HP likes your PDL,

00:03:57.050 --> 00:03:59.770
you actually have a pretty
good start in the world.

00:04:00.210 --> 00:04:04.510
So HP gave us in the
beginning a list of printers.

00:04:05.030 --> 00:04:09.200
Moving forward into 2011,
HP is continuing to drive

00:04:09.200 --> 00:04:10.080
forward with AirPrint.

00:04:10.080 --> 00:04:13.940
They have already shipped to date
10 million AirPrint-enabled printers

00:04:13.940 --> 00:04:17.240
and 2 million printers that are
in the field that are now firmware

00:04:17.300 --> 00:04:18.920
upgradable to support AirPrint.

00:04:18.920 --> 00:04:24.060
They've already given us a list
of printers in 2010 so far,

00:04:24.060 --> 00:04:25.660
or 2011.

00:04:25.660 --> 00:04:29.350
By the end of 2011,
virtually every network

00:04:29.680 --> 00:04:34.020
printer that HP makes,
OfficeJet, DeskJet, LaserJet,

00:04:34.020 --> 00:04:36.600
will all be AirPrint-enabled.

00:04:38.350 --> 00:04:40.960
And of course, HP is not the only vendor.

00:04:40.960 --> 00:04:46.390
In 2011 you will see printers from
all of your favorite manufacturers.

00:04:47.290 --> 00:04:52.000
So what does it take to
make an app that prints?

00:04:52.000 --> 00:04:52.790
Not a lot.

00:04:53.000 --> 00:04:56.190
When we introduced this,
we started with our four

00:04:56.190 --> 00:04:58.200
main apps on the iOS.

00:04:58.200 --> 00:05:01.980
We adopted printing in Safari, Books,
Mail, Photos,

00:05:02.260 --> 00:05:04.800
and then the hidden application,
Quick Look.

00:05:04.800 --> 00:05:07.950
If you can see something in Quick Look,
we can also print it.

00:05:08.070 --> 00:05:12.800
In iOS 5, we added the two outliers,
Notes and Maps.

00:05:12.810 --> 00:05:17.180
And then, of course,
Apple's productivity apps also all print.

00:05:17.200 --> 00:05:19.540
And then there are,
this slide will say hundreds,

00:05:19.540 --> 00:05:24.200
but there are thousands of apps
that have already adopted printing.

00:05:24.320 --> 00:05:28.340
Of course, my legal department wouldn't
let me put your icon up here,

00:05:28.340 --> 00:05:29.500
so I apologize.

00:05:30.420 --> 00:05:33.400
So the IOS printing paradigm,
how is this different than the desktop?

00:05:33.400 --> 00:05:37.960
The desktop is based on an
old model of pick a printer,

00:05:37.960 --> 00:05:42.890
and then years later run an app where you
create a document that you later print.

00:05:42.920 --> 00:05:44.900
IOS, everything is dynamic.

00:05:44.920 --> 00:05:48.600
When the user decides they want to print,
that's the first time you find out

00:05:48.710 --> 00:05:50.080
what printer you're going to get.

00:05:50.120 --> 00:05:52.600
At that point,
your application will figure out

00:05:52.600 --> 00:05:54.430
what paper sizes are available.

00:05:54.440 --> 00:05:57.000
And in some modern printers
that we're working on now,

00:05:57.000 --> 00:05:59.660
exactly what paper is
loaded into the printer.

00:06:00.300 --> 00:06:03.060
You get to do your layout at print time.

00:06:03.060 --> 00:06:05.130
So you think of Safari, right?

00:06:05.140 --> 00:06:08.280
Web pages are designed for
users to read on the screen.

00:06:08.280 --> 00:06:10.000
Print is not their focus.

00:06:10.100 --> 00:06:15.050
So laying out for print doesn't have
to happen until the user is finally

00:06:15.050 --> 00:06:17.560
on the web page that they want,
and they want to print.

00:06:17.580 --> 00:06:21.430
There are still a few document-centric
applications in the world.

00:06:21.440 --> 00:06:24.480
By that, what I mean are documents
for which you're creating the

00:06:24.550 --> 00:06:26.200
content for a piece of paper.

00:06:26.200 --> 00:06:27.500
Think pages.

00:06:27.520 --> 00:06:30.280
Pages, you would lay out your newsletter
so that you can print it.

00:06:30.280 --> 00:06:31.940
So that it could be printed
on a piece of paper.

00:06:31.940 --> 00:06:33.120
But those are now rare.

00:06:33.160 --> 00:06:37.560
So the printing system has been
reoriented towards dynamic content,

00:06:37.560 --> 00:06:39.770
dynamic content layout at print time.

00:06:39.780 --> 00:06:42.560
And then just to make
it easy for the user,

00:06:42.560 --> 00:06:47.170
we've tried to eliminate all of the
superfluous options and just have the few

00:06:47.290 --> 00:06:49.200
focused options that users need to have.

00:06:51.370 --> 00:06:55.570
So for you guys to get your
application ready for printing,

00:06:55.630 --> 00:06:59.200
I talk about format for paper,
not for the display.

00:06:59.270 --> 00:07:00.460
We love our retina display.

00:07:00.460 --> 00:07:05.600
Those 750,000 pixels are great.

00:07:05.600 --> 00:07:09.390
But a typical piece of paper,
A4 or letter is about 8 million dots at

00:07:09.620 --> 00:07:11.980
the lowest resolution that we support.

00:07:12.360 --> 00:07:13.910
You have a lot more space.

00:07:14.410 --> 00:07:18.380
You have a lot higher contrast in output.

00:07:18.380 --> 00:07:20.230
And you have a lot more
pixels to work with.

00:07:20.740 --> 00:07:25.040
So you should be able to do
a lot more with that space.

00:07:25.040 --> 00:07:26.860
High quality drawing,
let me talk about that.

00:07:26.860 --> 00:07:30.050
Because it's higher resolution,
probably the icons that you're putting

00:07:30.050 --> 00:07:34.390
on screen that look great might
not be of high enough resolution

00:07:34.390 --> 00:07:36.760
to look great when you print.

00:07:36.760 --> 00:07:38.940
And then I want to
talk about the content.

00:07:38.940 --> 00:07:40.790
You guys are already doing this.

00:07:40.840 --> 00:07:44.920
If you're on an iPhone or an iPod touch,
you have limited screen real estate

00:07:45.080 --> 00:07:49.600
and you've decided what limited
information to put in front of the user.

00:07:49.640 --> 00:07:52.070
But your iPad version of
that content has more space.

00:07:52.110 --> 00:07:56.930
And so you've added in additional
information for the user.

00:07:57.000 --> 00:07:57.800
Paper is like that.

00:07:57.800 --> 00:07:59.400
There's even more space.

00:07:59.420 --> 00:08:00.660
So these are drawn to scale.

00:08:00.870 --> 00:08:02.440
Here is an iPhone application.

00:08:02.500 --> 00:08:03.760
This is our Maps application.

00:08:04.130 --> 00:08:07.930
Just the essential information is put
in front of the user at that point.

00:08:08.060 --> 00:08:12.220
When we implemented for iPad,
there is additional information

00:08:12.220 --> 00:08:15.500
about this map that would
be of use to the user.

00:08:15.500 --> 00:08:19.090
We can put that on the iPad
because there's more space.

00:08:19.090 --> 00:08:20.600
And I know you guys just got a
little bit of a hard time with this.

00:08:20.600 --> 00:08:21.590
But I want to show you how to do that.

00:08:21.700 --> 00:08:27.790
So you can see that the iPad is
not only the same as the iPad but

00:08:27.790 --> 00:08:29.600
the iPad is the same as the iPad.

00:08:29.600 --> 00:08:32.600
So you can see that the iPad
is the same as the iPad.

00:08:32.630 --> 00:08:35.600
And you can see that the
iPad is the same as the iPad.

00:08:35.600 --> 00:08:41.590
So you can see that the iPad
is the same as the iPad.

00:08:41.680 --> 00:08:44.600
And you can see that the
iPad is the same as the iPad.

00:08:44.600 --> 00:08:49.400
And you can see that the
iPad is the same as the iPad.

00:08:49.400 --> 00:08:49.400
And you can see that the iPad is the same

00:08:50.030 --> 00:08:52.650
So with that,
I'm going to bring up Andrew Platzer

00:08:52.650 --> 00:08:55.680
who's going to take you through
each of our APIs that are

00:08:55.810 --> 00:08:57.660
going to show you how to print.

00:08:57.660 --> 00:09:00.770
Now while we don't have
free ice cream for you,

00:09:00.920 --> 00:09:05.250
we actually do have a complete set
of printing APIs that will make

00:09:05.250 --> 00:09:07.810
it easy for you to adopt printing.

00:09:10.810 --> 00:09:13.120
Good afternoon,
my name is Andrew Platzer and I work on

00:09:13.120 --> 00:09:17.220
UIKit and on printing and I'm going to
take you through the printing API so that

00:09:17.260 --> 00:09:19.900
you can add printing to your application.

00:09:20.020 --> 00:09:22.970
So as Howard mentioned,
it's much simpler model than

00:09:22.970 --> 00:09:24.550
you have on the desktop.

00:09:24.620 --> 00:09:26.340
We don't have any more drivers,
so you don't have to worry about

00:09:26.340 --> 00:09:30.200
trying to configure printing for
each particular type of printer.

00:09:30.300 --> 00:09:32.550
And we don't have a huge
number of different panels

00:09:32.550 --> 00:09:34.090
that the user needs to set up.

00:09:34.230 --> 00:09:37.440
So instead we've given you a much,
much simpler API.

00:09:37.750 --> 00:09:40.900
One that allows you to print
very much more compartmentalized

00:09:40.900 --> 00:09:43.650
or to print items directly,
I'll talk about that.

00:09:44.230 --> 00:09:46.700
There's no page setup.

00:09:46.790 --> 00:09:49.700
So just assume whatever
paper size we give you,

00:09:49.700 --> 00:09:52.700
whatever printable area we give you,
you should format for that.

00:09:52.700 --> 00:09:55.650
You shouldn't try to sort of
plan ahead or anything like that.

00:09:55.700 --> 00:09:59.700
There's no, when you go to print,
printing is a modal task.

00:09:59.700 --> 00:10:03.050
So we'll take over the HI when
you say presenting the sheet or

00:10:03.050 --> 00:10:06.700
whatever and we'll let the user
enter all their information,

00:10:06.850 --> 00:10:09.820
run the print operation and so on,
send off the information to the

00:10:09.820 --> 00:10:12.560
printer spooler which will go out
to the printer and then return

00:10:12.600 --> 00:10:14.650
control back to your application.

00:10:14.750 --> 00:10:17.680
And because you're working from
a very small screen on the phone,

00:10:17.680 --> 00:10:18.700
it's not WYSIWYG.

00:10:18.700 --> 00:10:20.490
You don't have to,
you're not going to be able to

00:10:20.530 --> 00:10:23.200
present all the information that
you want to be able to print out.

00:10:23.220 --> 00:10:26.790
So we're not going to sort
of have a view-based drawing

00:10:26.790 --> 00:10:28.900
system like we do on Mac OS X.

00:10:29.610 --> 00:10:30.940
So what can you print?

00:10:30.980 --> 00:10:34.540
We've broken things down into sort of
three different types of things to print.

00:10:34.560 --> 00:10:36.010
The easiest are items.

00:10:36.200 --> 00:10:41.160
These are pre-canned,
printable objects like JPEGs or PDFs.

00:10:41.500 --> 00:10:43.260
You can just give them to
us and we'll print them.

00:10:43.260 --> 00:10:45.340
You don't have to do anything at all.

00:10:45.360 --> 00:10:47.980
Now if you've got something a
bit more complex that requires

00:10:48.350 --> 00:10:51.960
pagination for printing such as text,
we've used something

00:10:51.990 --> 00:10:53.300
called print formatters.

00:10:53.330 --> 00:10:56.730
And these you can print simple
text or markup text and we'll

00:10:56.730 --> 00:10:59.500
do the right thing when we're
printing across page boundaries.

00:10:59.500 --> 00:11:02.170
And then finally if you
want to do your own drawing,

00:11:02.370 --> 00:11:05.320
you draw your own images,
your own labels and text, etc.

00:11:05.320 --> 00:11:09.190
or a core text or something like that,
we give you print page renderers

00:11:09.200 --> 00:11:12.490
and those are objects effectively
sort of like the equivalent

00:11:12.490 --> 00:11:14.290
of a data source for printing.

00:11:15.440 --> 00:11:17.270
So as I said,
it's a very simple API and these

00:11:17.270 --> 00:11:20.180
are really only classes you're
ever going to need to worry about.

00:11:20.300 --> 00:11:23.730
This is UI Print, the main class, sorry,
is UI Print Interaction Controller.

00:11:23.810 --> 00:11:26.160
It's a singleton, you'll ask for it,
it's a shared object.

00:11:26.280 --> 00:11:29.060
And there's a couple of informational
classes that go along with it,

00:11:29.140 --> 00:11:30.320
Print Info and Print Paper.

00:11:30.320 --> 00:11:33.770
Now when you're printing text,
we have give you two formatters,

00:11:33.770 --> 00:11:36.660
one for simple text with a
few settings and one that just

00:11:36.720 --> 00:11:40.220
takes a string of markup text,
HTML text that we'll print out.

00:11:41.030 --> 00:11:43.560
And then finally we've got a
somewhat abstract base class

00:11:43.700 --> 00:11:47.430
called UI Print Page Renderer
that you'll subclass to do each

00:11:47.430 --> 00:11:51.490
individual page drawing or to
calculate the number of pages.

00:11:52.610 --> 00:11:57.010
So first I want to give you an example
of how to print an image or a PDF,

00:11:57.210 --> 00:11:59.400
something that already knows
how to print in a single page

00:11:59.450 --> 00:12:00.770
or across multiple pages.

00:12:00.780 --> 00:12:02.900
It's already been paginated.

00:12:02.950 --> 00:12:06.700
And for the simplest case,
you really only need to do three things.

00:12:06.750 --> 00:12:09.000
One is ask for the shared
print interaction controller,

00:12:09.000 --> 00:12:12.500
and that's an object that you'll
talk to to do all your printing.

00:12:12.550 --> 00:12:13.200
You'll set the data.

00:12:13.200 --> 00:12:16.000
You'll give us the data or URL or
whatever it is you want to print,

00:12:16.000 --> 00:12:18.180
the JPEG that you've got,
you download it from the

00:12:18.180 --> 00:12:19.150
internet or whatever.

00:12:19.280 --> 00:12:22.850
And then finally you just present it
using sort of the standard idioms for

00:12:22.960 --> 00:12:26.540
presenting on the iPhone or the iPad.

00:12:26.720 --> 00:12:27.520
And so here's some code.

00:12:27.620 --> 00:12:31.300
This is all you need to do
to print a JPEG or a PDF.

00:12:31.320 --> 00:12:32.910
You'll get the shared
printed action controller.

00:12:32.940 --> 00:12:35.950
Again, you don't need to allocate it,
just ask for it.

00:12:36.010 --> 00:12:36.660
Set the item.

00:12:36.730 --> 00:12:41.200
So in this case it's some data or it
could be URL or some other objects.

00:12:41.250 --> 00:12:43.980
And then on the phone here we've
got a present animated with a

00:12:44.080 --> 00:12:47.900
completion handler that gets called
when the printing is finished.

00:12:47.950 --> 00:12:51.240
And on the iPad there's a somewhat
slight different set of calls.

00:12:51.480 --> 00:12:53.750
But in the end we'll put up a sheet,
cover your HI,

00:12:54.000 --> 00:12:56.150
handle all the interaction with the user.

00:12:56.150 --> 00:12:59.300
And then when the user says print,
we'll call into your app if

00:12:59.300 --> 00:13:02.070
we need any more information,
send off the job to the printer and

00:13:02.070 --> 00:13:04.770
then return control back to you.

00:13:05.640 --> 00:13:10.360
Now you wanna do a couple of extra
steps to really get a full check,

00:13:10.360 --> 00:13:14.480
to really do a full printing system.

00:13:14.480 --> 00:13:15.000
There's a few extra steps.

00:13:15.100 --> 00:13:17.040
You want to do,
you wanna check the printing,

00:13:17.040 --> 00:13:19.290
so you wanna make sure
-- or check the data,

00:13:19.290 --> 00:13:21.920
sorry -- that you can
actually print the data.

00:13:21.920 --> 00:13:24.670
You wanna tell us the output type,
and this is very important because

00:13:24.670 --> 00:13:27.660
it'll help us and help the user
choose which kind of paper they

00:13:27.740 --> 00:13:29.800
wanna print on or what size of paper.

00:13:29.800 --> 00:13:32.950
And there's some additional
print settings to help with

00:13:33.020 --> 00:13:37.810
the output to specify other
options the user to choose from.

00:13:38.090 --> 00:13:39.060
So here's a full example.

00:13:39.060 --> 00:13:41.400
And this is something,
if you're just printing a JPEG or a PDF,

00:13:41.790 --> 00:13:44.900
this is literally the
code you'll want to do.

00:13:44.920 --> 00:13:46.400
So the existing code's already there.

00:13:46.400 --> 00:13:47.940
We'll add a few extra steps.

00:13:48.020 --> 00:13:51.600
First, before we even begin printing,
we want to make sure that we can print.

00:13:51.620 --> 00:13:53.040
This method takes a URL.

00:13:53.220 --> 00:13:57.260
And we'll read the URL and just
verify that it's printable.

00:13:57.260 --> 00:13:59.450
It may not be for some various reasons.

00:13:59.550 --> 00:14:01.040
We'll then set the print info.

00:14:01.040 --> 00:14:03.160
This is an object that
takes some various settings.

00:14:03.270 --> 00:14:05.600
You'll allocate a new one, a fresh one,
just calling a print

00:14:05.680 --> 00:14:07.340
info method on the class.

00:14:07.370 --> 00:14:11.240
Here we're telling it that it's
going to be a grayscale output.

00:14:11.260 --> 00:14:12.740
And then we'll set the
controller's print info,

00:14:12.740 --> 00:14:15.260
and it'll make a copy
of this information.

00:14:15.280 --> 00:14:16.640
And then we have a
couple of extra settings,

00:14:16.640 --> 00:14:17.880
as I mentioned.

00:14:17.930 --> 00:14:20.170
One is that in the print info,
you can tell us the job

00:14:20.180 --> 00:14:22.210
name so that later on,
when the user's looking at a

00:14:22.210 --> 00:14:25.260
list of their printing jobs,
they'll see what the name of it is.

00:14:25.300 --> 00:14:26.800
And the other is to tell
the controller that,

00:14:26.810 --> 00:14:28.760
well,
I want to show a page range control,

00:14:28.760 --> 00:14:30.660
which is an optional interface element.

00:14:30.660 --> 00:14:33.740
So if you know, for example,
that this is a PDF, you can tell us, oh,

00:14:33.840 --> 00:14:36.680
well, let them choose a page range
if you want to let them.

00:14:39.360 --> 00:14:44.060
So in your HI, in general you'll be able
to print almost any device,

00:14:44.170 --> 00:14:46.720
but there are some,
the really old ones won't

00:14:46.730 --> 00:14:49.290
be able to print or maybe
who knows what's coming up.

00:14:49.330 --> 00:14:52.060
You'll want to check that
printing is available.

00:14:52.060 --> 00:14:53.990
There's a class method,
is printing available?

00:14:54.240 --> 00:14:55.950
And you should check to
see if this returns yes.

00:14:55.990 --> 00:14:57.780
If it returns no, hide your interface.

00:14:57.780 --> 00:15:00.970
Usually it's a print button
and an alert like you see here

00:15:01.080 --> 00:15:02.830
where you just have a print.

00:15:02.830 --> 00:15:06.750
Or maybe there's a single bar
button item that is your print item.

00:15:06.750 --> 00:15:08.480
You'll want to hide that in that case.

00:15:08.980 --> 00:15:12.710
Now that you know that you can print,
here's what you can print.

00:15:12.810 --> 00:15:16.300
We take single items, as I mentioned,
PDFs, JPEGs, PNGs,

00:15:16.480 --> 00:15:18.600
anything Image.io can support.

00:15:18.670 --> 00:15:23.120
Or if you're using the image picker to
get something from your photo album,

00:15:23.120 --> 00:15:26.340
we return that as either an
AL asset or an AL asset URL.

00:15:26.400 --> 00:15:30.380
And you can pass that to us directly
and we'll just read that and hand

00:15:30.490 --> 00:15:32.310
it off to the printing system.

00:15:32.310 --> 00:15:35.760
So you don't need to load a
large image into your application

00:15:35.880 --> 00:15:37.520
taking up a lot of memory.

00:15:37.520 --> 00:15:41.020
You can just get the
URL and pass it to us.

00:15:41.070 --> 00:15:44.640
Or if you generated your own
content using various UI image

00:15:44.640 --> 00:15:48.080
calls or even CI image,
you can pass one of those in.

00:15:48.360 --> 00:15:51.420
Now we'll take those as a single item,
as printing item method in

00:15:51.420 --> 00:15:54.700
UI Print Interaction Controller,
or as an array of items.

00:15:54.810 --> 00:15:59.800
Each item will appear as a separate
job when it's in the job list.

00:16:01.600 --> 00:16:03.500
So as I said, you want to check the data.

00:16:03.500 --> 00:16:06.140
You want to make sure
that what you're printing,

00:16:06.410 --> 00:16:08.940
what you have,
the URL or the data is printable.

00:16:09.040 --> 00:16:11.500
And there's two methods, can print URL,
can print data.

00:16:11.500 --> 00:16:14.720
And so if you're going to allow
someone to print a particular object,

00:16:14.720 --> 00:16:18.300
you should check before you maybe let
them print that this is printable.

00:16:18.300 --> 00:16:21.600
And there might be various reasons
as to why you can't print it.

00:16:21.600 --> 00:16:23.930
One, of course,
if it's an unknown format,

00:16:23.930 --> 00:16:27.680
an image format we've never seen,
it might be that it's been corrupt.

00:16:27.680 --> 00:16:29.660
So if you've downloaded it,
you don't know where it comes from.

00:16:29.670 --> 00:16:31.480
And images,
you never know where it comes from.

00:16:31.500 --> 00:16:32.720
And if you don't know how
they're being generated,

00:16:32.720 --> 00:16:34.230
it might have some problems
before it can print.

00:16:34.230 --> 00:16:36.080
And if it's a PDF, it might be locked.

00:16:36.080 --> 00:16:39.070
So it might already have a password
lock on it or just be marked,

00:16:39.070 --> 00:16:42.470
might be marked as not being printable,
in which case you can see the PDF,

00:16:42.570 --> 00:16:43.960
but you can't print it.

00:16:47.570 --> 00:16:48.800
So there are a few extra settings.

00:16:48.990 --> 00:16:51.160
These are done,
there's the one I showed you shows

00:16:51.160 --> 00:16:54.490
page range and that's on your
UI Print Interaction Controller.

00:16:54.490 --> 00:16:59.320
And that, if possible, so if it's PDF,
it will show the page range controller,

00:16:59.330 --> 00:17:00.470
on photos it won't.

00:17:00.500 --> 00:17:04.500
There's, on the print info,
there's four main settings.

00:17:04.500 --> 00:17:06.550
The output type,
and this is very important,

00:17:06.550 --> 00:17:08.970
I'll talk about that,
tells us what kind of output data

00:17:08.970 --> 00:17:10.410
you're going to try to print.

00:17:10.500 --> 00:17:12.660
You can also specify
whether or not there's an,

00:17:12.670 --> 00:17:15.500
landscape or portrait orientation
is the preferred orientation.

00:17:15.500 --> 00:17:19.170
And whether or not you're
going to allow duplex printing.

00:17:19.450 --> 00:17:21.890
And finally, as I said, you can specify,
and I showed you an example,

00:17:21.900 --> 00:17:22.470
the job name.

00:17:22.480 --> 00:17:25.090
And this is useful, for example,
in the print order,

00:17:25.090 --> 00:17:27.480
where the user is going to see a whole
bunch of printing and they don't want

00:17:27.480 --> 00:17:28.990
to just see untitled as you see here.

00:17:29.000 --> 00:17:31.760
They want to see an actual name so
they can decide which one if they

00:17:31.760 --> 00:17:33.600
want to cancel it before it prints.

00:17:36.840 --> 00:17:39.140
So there's three kinds of output types.

00:17:39.240 --> 00:17:42.690
The first one is UIPrintInfoOutputPhoto.

00:17:43.050 --> 00:17:45.380
And that tells us it's a photo.

00:17:45.510 --> 00:17:48.390
That lets us tell the printer,
print as high quality as possible,

00:17:48.390 --> 00:17:51.760
and it will choose the right
size paper for photo printing.

00:17:51.880 --> 00:17:54.010
So, for example, four by six.

00:17:54.120 --> 00:17:55.280
We'll turn off duplex mode.

00:17:55.320 --> 00:17:58.510
So even though the printer may
say we support duplex printing,

00:17:58.510 --> 00:17:59.940
you don't want to duplex print a photo.

00:17:59.940 --> 00:18:01.320
So we won't show that option.

00:18:01.320 --> 00:18:03.390
And we'll just say, oh,
it's single-sided.

00:18:03.500 --> 00:18:06.740
And because it's a single item per page,
we're not going to show

00:18:06.740 --> 00:18:09.640
a page range control,
where all they can just say is choose

00:18:09.940 --> 00:18:11.740
drawing from page one to page one.

00:18:11.860 --> 00:18:13.620
There's no point.

00:18:13.920 --> 00:18:17.480
Now, if you've got more general output,
like, for example,

00:18:17.480 --> 00:18:20.460
a web page where you've got mixed
color and black and white text,

00:18:20.550 --> 00:18:22.380
you'll use UiPrintInfoOutputGeneral.

00:18:22.380 --> 00:18:25.640
And that'll choose a much
more sort of normal quality.

00:18:25.640 --> 00:18:28.060
It'll try to choose a
document paper size,

00:18:28.060 --> 00:18:29.840
like a letter sized or A4.

00:18:29.840 --> 00:18:33.760
It'll allow the user to choose duplex
mode if the printer supports it.

00:18:33.800 --> 00:18:37.040
And it'll allow the user to choose a
page range if you set that option on

00:18:37.040 --> 00:18:39.060
the UiPrint Interaction Controller.

00:18:40.360 --> 00:18:42.470
And in the final case,
if you happen to know that this is

00:18:42.540 --> 00:18:46.090
only going to be black and white text,
for example, notes here, where, you know,

00:18:46.280 --> 00:18:48.350
there's no images and the
user can't change the font

00:18:48.350 --> 00:18:51.700
color or anything like that,
use OutputGrayScaleMode.

00:18:51.720 --> 00:18:54.680
Then we'll choose a
faster printing speed.

00:18:54.680 --> 00:18:58.590
We won't use the color printing
cartridges if the printer

00:18:58.590 --> 00:19:00.520
knows how to handle that.

00:19:00.580 --> 00:19:04.520
But just like in the general case,
we will present a document

00:19:04.530 --> 00:19:08.640
size paper if possible,
double-sided, and print range.

00:19:11.340 --> 00:19:13.120
So as I say,
this is sort of like the really

00:19:13.120 --> 00:19:16.180
the one extra bit of information
you want to set the output type.

00:19:16.180 --> 00:19:18.920
So it lets you use Smart Paper and
all these other settings

00:19:18.940 --> 00:19:20.740
depending on the type of output.

00:19:20.780 --> 00:19:23.770
And it really helps on
the user experience.

00:19:26.160 --> 00:19:28.850
So that's simple printing and that
really gets you a lot of stuff.

00:19:28.850 --> 00:19:31.690
If you've got an image you generate
or images you download or you're

00:19:31.770 --> 00:19:35.320
talking to the image picker to
get images from the photo library,

00:19:35.350 --> 00:19:36.220
this is all you need to do.

00:19:36.410 --> 00:19:39.530
That one function, right,
plus a little bit of interface

00:19:39.530 --> 00:19:42.640
glue code to call that function
or decide if you can show the

00:19:42.680 --> 00:19:44.710
print option in your application.

00:19:44.920 --> 00:19:46.990
You need to check that
the printing is available.

00:19:46.990 --> 00:19:49.800
You need to check that
what you can print,

00:19:49.800 --> 00:19:53.960
what data you have or what URL you
have you can print and you need

00:19:53.960 --> 00:19:54.000
to tell us the output type.

00:19:54.810 --> 00:19:57.170
So now I want to talk a
little bit about formatters.

00:19:57.280 --> 00:20:00.380
This is for text,
which is really the sort of complex

00:20:00.430 --> 00:20:02.100
case when you're going to print.

00:20:02.170 --> 00:20:04.520
You don't want to,
when you're drawing text,

00:20:05.000 --> 00:20:07.420
break across text bound.

00:20:07.420 --> 00:20:09.910
You don't want to have the text
break across the bottom of the page,

00:20:09.990 --> 00:20:11.910
the top half of one line is
on one page and the bottom

00:20:11.910 --> 00:20:13.240
half line is the other page.

00:20:13.390 --> 00:20:16.510
And then the page layout may change,
the text layout may change

00:20:16.510 --> 00:20:18.410
depending on the width of the page.

00:20:18.410 --> 00:20:22.400
So a wider page you'll have more text on
one page or with markup text you may even

00:20:22.410 --> 00:20:24.450
have images move around a little bit.

00:20:24.820 --> 00:20:27.900
You can use these formatters
as a standalone object or

00:20:27.900 --> 00:20:31.660
along with print page renderers
which I'll talk about later.

00:20:31.720 --> 00:20:35.720
In the case for a single object,
just set the single text and give it

00:20:35.880 --> 00:20:38.220
to the print interaction controller.

00:20:38.330 --> 00:20:41.140
And for the simple case,
you can give us the font,

00:20:41.170 --> 00:20:44.540
the color and the alignments
if you want left justified or

00:20:44.540 --> 00:20:48.630
centered and you want gray output
as opposed to black and white.

00:20:49.680 --> 00:20:53.590
The Markup Text Formatter
supports regular HTML,

00:20:53.690 --> 00:20:57.050
proper HTML with the angle brackets, etc.

00:20:57.070 --> 00:20:59.400
So it will format everything,
embedded images and so on

00:20:59.400 --> 00:21:00.720
will be laid out correctly.

00:21:00.720 --> 00:21:04.530
And this is the exact same
rendering engine that's used

00:21:04.530 --> 00:21:06.940
by Safari to print its content.

00:21:08.340 --> 00:21:10.300
So here's some code on how to use it.

00:21:10.300 --> 00:21:13.160
As before, we get the shared printed
interaction controller.

00:21:13.220 --> 00:21:16.740
Now we're going to create a markup text
formatter and that just takes some text.

00:21:16.740 --> 00:21:17.900
This will be HTML text.

00:21:17.900 --> 00:21:20.550
Maybe you've generated or maybe
you've downloaded it or you've

00:21:20.550 --> 00:21:22.060
already had it pre-calculated.

00:21:22.160 --> 00:21:26.140
Set it as the single item on the
controller and we only take one

00:21:26.140 --> 00:21:29.670
print formatter in this case,
not a list of them.

00:21:30.010 --> 00:21:32.560
So the print info,
in this case we know it's gray scale,

00:21:32.560 --> 00:21:35.430
maybe it's just some raw plain
text with some fonts and so on

00:21:35.430 --> 00:21:38.520
that we've generated and you just
want to output it as gray scale.

00:21:38.660 --> 00:21:41.390
And then you'll present
the print interaction,

00:21:41.390 --> 00:21:45.500
the printing sheet and so on and the
user will be able to print that text.

00:21:45.700 --> 00:21:47.490
So it's very simple.

00:21:49.030 --> 00:21:53.960
In general, the layout will be content
we printed to fill the whole

00:21:54.020 --> 00:21:58.080
printable area of the page,
depending on whatever printer,

00:21:58.110 --> 00:22:01.110
whatever paper size the
printer can support.

00:22:01.210 --> 00:22:03.500
So you'll normally have the
paper rect and it's a 0,

00:22:03.500 --> 00:22:04.420
0.

00:22:04.460 --> 00:22:07.140
There'll be an internal
printable rect area,

00:22:07.140 --> 00:22:09.460
which is inset from that rectangle.

00:22:09.500 --> 00:22:11.760
And that'll be whatever the
printer tells us is its capability.

00:22:11.780 --> 00:22:15.480
So maybe it requires quarter inch
margins all around or whatever.

00:22:15.520 --> 00:22:18.370
And the formatter will fill that area.

00:22:18.580 --> 00:22:22.520
We do give you a couple of controls,
some settings on the formatter

00:22:22.520 --> 00:22:24.440
to adjust its position.

00:22:24.440 --> 00:22:26.700
And these are more useful later on
when you use them with the renderer,

00:22:26.700 --> 00:22:30.970
but you can use them as well when
you're printing a single formatter.

00:22:31.700 --> 00:22:34.510
So there are two different
ways of adjusting the position.

00:22:34.650 --> 00:22:38.520
The first is with a content inset
and that gives you a chance to

00:22:38.520 --> 00:22:43.520
adjust the top left and right
insets from the printable area,

00:22:43.520 --> 00:22:46.090
but not the bottom because we'll
just keep printing as much as we can.

00:22:46.090 --> 00:22:49.670
So we might have to go multiple pages,
there's no reason to change the bottom.

00:22:49.730 --> 00:22:51.440
So we'll just print as much as we can.

00:22:51.510 --> 00:22:54.380
But if you wanted to start in
an extra inch in from the edges

00:22:54.380 --> 00:22:58.040
or an extra inch from the top,
you can just set the content insets.

00:22:59.320 --> 00:23:02.760
Alternatively,
you could specify a fixed maximum

00:23:02.760 --> 00:23:07.150
width and height and we'll try
to fit the text into that width,

00:23:07.320 --> 00:23:10.360
but if the print area,
printable area is narrower than that,

00:23:10.420 --> 00:23:13.660
we'll just fit to that size
rather than the maximum,

00:23:13.920 --> 00:23:15.840
something with the height
and width and so on.

00:23:15.950 --> 00:23:17.900
If the width is taller
than a single page,

00:23:18.020 --> 00:23:20.110
we'll go through multiple pages.

00:23:20.780 --> 00:23:22.490
So when you're printing
something like this,

00:23:22.510 --> 00:23:24.460
let's say you've got a lot of text,
you're printing War and

00:23:24.460 --> 00:23:26.600
Peace or whatever,
you're going to go

00:23:26.740 --> 00:23:28.420
through multiple pages.

00:23:28.460 --> 00:23:34.380
Each page will be broken at the
printable rect as you can see here,

00:23:34.380 --> 00:23:37.010
so we don't draw past that area.

00:23:37.570 --> 00:23:39.620
And we'll automatically
break the text between lines.

00:23:39.620 --> 00:23:41.100
So you don't need to do any calculation.

00:23:41.100 --> 00:23:43.860
You don't have to figure out, oh, well,
this line ends half here,

00:23:43.860 --> 00:23:45.980
so we're going to have to
draw a little bit less.

00:23:46.140 --> 00:23:49.100
We'll just automatically
just bump to the next line,

00:23:49.350 --> 00:23:51.660
bump that line to the next page.

00:23:51.750 --> 00:23:53.640
So actually the total
length of the formatter,

00:23:53.640 --> 00:23:56.470
the total length across multiple pages
will probably be longer than what

00:23:56.470 --> 00:23:59.300
you would get if you just printed
it on one very long page because

00:23:59.400 --> 00:24:03.610
we'll have to keep pushing text
down to push it to the next page.

00:24:03.860 --> 00:24:09.180
And in this case you can actually mix the
insets plus the maximum width and height.

00:24:09.240 --> 00:24:13.070
So we'll take the minimum
of those if necessary.

00:24:14.910 --> 00:24:17.730
And finally,
while I said it's not a WYSIWYG system,

00:24:17.730 --> 00:24:20.150
we do allow you to print views.

00:24:20.270 --> 00:24:24.480
The most common views you'll want to
print are UI Web Views and UI Text Views,

00:24:24.480 --> 00:24:27.370
where the user may have been
entering information that you've

00:24:27.370 --> 00:24:30.730
allowed them to have an edit system,
like for notes or whatever.

00:24:30.870 --> 00:24:33.680
You can just ask for the view
print formatter for that particular

00:24:33.690 --> 00:24:35.640
view and return the custom one.

00:24:35.780 --> 00:24:39.010
Or for any other kind of view,
you can just ask for a view print

00:24:39.120 --> 00:24:43.260
formatter for that view and we'll return
a generic one that we'll call drawRect.

00:24:43.300 --> 00:24:45.140
Actually,
we'll call a method called drawRect

00:24:45.140 --> 00:24:49.320
for print formatter multiple times,
drawing sort of each

00:24:49.320 --> 00:24:51.000
section of your view.

00:24:51.070 --> 00:24:53.380
And that, by default,
just calls into drawRect.

00:24:53.380 --> 00:24:57.290
So if you just want to draw your view,
you can do that.

00:24:58.980 --> 00:25:01.190
So those are the first two,
the simple case and now

00:25:01.190 --> 00:25:03.250
just single-item plain text.

00:25:03.360 --> 00:25:06.130
But let's say you want to draw
a much more complex output,

00:25:06.250 --> 00:25:08.900
for example, the maps one,
where you've got the map itself,

00:25:09.020 --> 00:25:12.400
maybe a map view you're going to draw,
plus all the directional

00:25:12.400 --> 00:25:13.540
views on the side.

00:25:13.540 --> 00:25:17.560
So you have to do your own drawing,
the strings and images, and so on.

00:25:17.630 --> 00:25:19.950
This gives you full drawing control.

00:25:20.060 --> 00:25:22.290
And this is an object you provide.

00:25:22.360 --> 00:25:25.540
You're going to subclass
UIPrintPageRenderer.

00:25:25.600 --> 00:25:28.130
And there are two basic things
you need to do when you do that.

00:25:28.140 --> 00:25:30.760
You need to tell us how many
pages there are going to be.

00:25:30.810 --> 00:25:34.990
And for each page, we'll ask you to draw
that particular page.

00:25:35.240 --> 00:25:37.660
Think of it as a data
source for printing,

00:25:37.720 --> 00:25:41.620
so it's an object that you'll write.

00:25:42.140 --> 00:25:44.300
You can add spaces for
headers and footers.

00:25:44.430 --> 00:25:48.220
We'll block out areas and that's
important when you're using formatters

00:25:48.280 --> 00:25:52.110
with renderers so we know where to sort
of break the text a bit early so you

00:25:52.110 --> 00:25:54.280
can draw a page number at the bottom.

00:25:54.540 --> 00:25:57.150
And we support multiple formatters
in the renderer so you can

00:25:57.150 --> 00:26:00.020
have multiple text fields,
one after the other,

00:26:00.020 --> 00:26:04.380
across multiple pages all with the
text broken at the right place.

00:26:06.320 --> 00:26:09.320
So I said, you're going to subclass
UIPrintPageRender.

00:26:09.350 --> 00:26:10.870
It's actually pretty
functional by itself,

00:26:10.990 --> 00:26:12.960
but there's probably a few
things you'll want to do.

00:26:12.980 --> 00:26:14.740
The main thing is a method
called number of pages,

00:26:14.740 --> 00:26:17.120
which will call when the
user selects a printer.

00:26:17.290 --> 00:26:19.050
It'll tell you how big
the printable area is,

00:26:19.050 --> 00:26:21.870
and you'll be able to calculate,
tell us how many pages.

00:26:21.880 --> 00:26:24.380
Is it going to be 10
pages or 20 or whatever?

00:26:24.410 --> 00:26:26.240
And then for every page,
we'll ask you to draw

00:26:26.240 --> 00:26:27.820
that particular page.

00:26:27.850 --> 00:26:31.580
And you can put whatever you
need if it's more than one page,

00:26:31.580 --> 00:26:34.780
multiple pages, and so on.

00:26:34.830 --> 00:26:36.360
And then once you've got
the print page renderer,

00:26:36.360 --> 00:26:39.540
you'll set it as one of the options
on the UIPrintInteraction control,

00:26:39.540 --> 00:26:42.310
the shared one, just like you did with
an item or a formatter.

00:26:42.490 --> 00:26:46.130
And we'll use that when
you present the interface.

00:26:47.110 --> 00:26:49.840
So the render layout is similar
to what you saw in the formatter.

00:26:49.840 --> 00:26:53.010
There's a paper rect
and the printable rect.

00:26:53.530 --> 00:26:56.530
Then you specify a header height and
a footer height and this goes all

00:26:56.530 --> 00:27:00.360
the way across the printable area and
will block out the areas for that,

00:27:00.360 --> 00:27:03.000
giving you a rectangle for
the header and for the footer.

00:27:03.130 --> 00:27:06.510
And then finally what's left
over is the content rect.

00:27:07.970 --> 00:27:10.790
With that, using those rectangles,
we'll call you,

00:27:10.790 --> 00:27:13.870
we have a number of methods
that you can override.

00:27:13.960 --> 00:27:16.360
So the first one is sort of
the main entry point called

00:27:16.360 --> 00:27:17.890
draw page and index and rect.

00:27:17.950 --> 00:27:20.700
And the rectangle we pass you
there is the printable rect.

00:27:20.770 --> 00:27:24.170
Now this actually does the printing,
so if you don't call super on this,

00:27:24.170 --> 00:27:25.420
nothing will appear.

00:27:25.490 --> 00:27:31.110
But if all you want to do is
draw your own page completely,

00:27:31.110 --> 00:27:32.020
you can just do this if you don't
expect anything else to be drawn.

00:27:32.330 --> 00:27:35.740
We'll call your method
drawHeaderAtPageIndexInRect.

00:27:35.760 --> 00:27:36.830
This is the header rect.

00:27:36.840 --> 00:27:39.900
And this, by default, does nothing,
so you don't need to

00:27:40.050 --> 00:27:41.560
call super on this case.

00:27:41.560 --> 00:27:45.080
Then we'll call drawContentInRect
with the content rect.

00:27:45.180 --> 00:27:49.000
Then for every formatter you've added,
and I'll talk about that, you can add,

00:27:49.030 --> 00:27:51.360
as I said, for text formatters,
we'll tell you that we're drawing

00:27:51.360 --> 00:27:52.620
it for that particular page.

00:27:52.620 --> 00:27:55.860
And so only the ones where the
content for that formatter is drawn,

00:27:55.860 --> 00:27:56.650
we'll call on that.

00:27:56.680 --> 00:27:58.720
Now that one, again,
you have to call the super in order

00:27:58.990 --> 00:28:00.500
to actually get the content rendered.

00:28:00.950 --> 00:28:02.630
But, for example,
if you wanted to draw the word

00:28:02.710 --> 00:28:05.590
confidential across the text,
you'd call the super first and

00:28:05.590 --> 00:28:08.490
then draw a rotated text across it,
or if you wanted to draw a

00:28:08.490 --> 00:28:09.730
border or something like that.

00:28:09.740 --> 00:28:12.070
And then finally,
we have drawFooterInRect,

00:28:12.140 --> 00:28:14.660
which will draw the footer area.

00:28:14.660 --> 00:28:16.780
Again, we don't do anything here.

00:28:16.780 --> 00:28:18.260
It's up to you if you want to add it in.

00:28:18.260 --> 00:28:20.560
It's not called if you give
us a zero-height footer or a

00:28:20.560 --> 00:28:23.000
zero-height header in the case of
the header rect drawing method.

00:28:24.850 --> 00:28:26.740
So here's a very simple case.

00:28:26.790 --> 00:28:29.640
We've got a set of an object
that will draw a set of items.

00:28:29.750 --> 00:28:31.200
Let's say it's like a table view.

00:28:31.200 --> 00:28:35.070
So you've got a bunch of items that
will fill all the way across the page,

00:28:35.070 --> 00:28:36.520
all of a fixed height.

00:28:36.600 --> 00:28:37.880
So we'll have a couple of methods here.

00:28:38.050 --> 00:28:39.430
One is draw item at index.

00:28:39.460 --> 00:28:42.920
So we'll draw item zero through n,
or how many items you have.

00:28:43.050 --> 00:28:45.050
And we'll also keep track of
the number of items per page,

00:28:45.050 --> 00:28:46.960
just so we don't have
to recalculate it later.

00:28:46.960 --> 00:28:50.320
And then there are the two
methods that we need to override,

00:28:50.320 --> 00:28:53.740
number of pages and draw content
at page at index in rect.

00:28:54.700 --> 00:28:55.690
Thank you.

00:28:57.590 --> 00:28:59.040
So here are the actual override methods.

00:28:59.120 --> 00:29:01.080
I'm not going to talk
about those other ones,

00:29:01.080 --> 00:29:03.060
which you would have to implement.

00:29:03.140 --> 00:29:05.090
First, we're going to calculate
how many items per page.

00:29:05.300 --> 00:29:08.220
So we'll assume a fixed height here and,
you know,

00:29:08.220 --> 00:29:12.160
maybe we'll figure out that there are
seven items per page that fit exactly.

00:29:12.230 --> 00:29:15.300
And then we'll calculate how many
pages we need to draw that number

00:29:15.300 --> 00:29:16.940
of items per page rounding up.

00:29:16.940 --> 00:29:22.930
So if we figure we can fit
seven and we've got 100 items,

00:29:22.930 --> 00:29:24.180
well, we'll need about 13 pages or so.

00:29:25.610 --> 00:29:29.970
Then you're going to override draw
content for page and index and rect.

00:29:30.110 --> 00:29:32.700
By default the super doesn't
do anything so you don't need

00:29:32.700 --> 00:29:34.000
to call the super method.

00:29:34.110 --> 00:29:36.480
One thing we don't do is
we don't do any clipping.

00:29:36.510 --> 00:29:39.390
So if you think you might be drawing
outside of the rectangle we give you,

00:29:39.390 --> 00:29:40.970
you can set the clip beforehand.

00:29:40.980 --> 00:29:44.190
And then for each item we're
just going to draw each item one

00:29:44.190 --> 00:29:47.280
after the other starting at the
particular index for that page.

00:29:47.280 --> 00:29:49.960
So you know like for page one
we've got eight items per page.

00:29:49.960 --> 00:29:53.660
We can start item number eight
for seven items and so on.

00:29:53.660 --> 00:29:56.830
And then we also calculate the
offset that we want to draw the item

00:29:56.830 --> 00:30:00.300
at and we offset from the content
rect origin which is non-zero,

00:30:00.300 --> 00:30:03.660
which was probably going to be
non-zero because most printers

00:30:03.660 --> 00:30:05.240
require a bit of a margin.

00:30:07.980 --> 00:30:10.540
So now let's say you've got
some text that you want to

00:30:10.760 --> 00:30:12.340
include along with your images.

00:30:12.360 --> 00:30:14.880
So like for example the maps,
maybe you've got some directions that

00:30:14.880 --> 00:30:20.620
go along with the map and this text
might actually span multiple pages.

00:30:20.620 --> 00:30:23.670
We like to add multiple formatter
so if you've got separate chunks

00:30:23.670 --> 00:30:27.500
of text that you want to add in,
we'll add it in for you.

00:30:27.530 --> 00:30:29.790
When you add in that formatter,
you need to tell us

00:30:29.860 --> 00:30:30.990
what page it starts in.

00:30:31.110 --> 00:30:33.970
So, you know, for example,
the first one might start on page zero,

00:30:34.060 --> 00:30:37.420
go for three pages so you'll say, "Okay,
the next one can start on page three

00:30:37.420 --> 00:30:41.720
and we'll start drawing on page three."
And you can adjust using those top

00:30:41.720 --> 00:30:43.920
insets and left and right insets.

00:30:43.950 --> 00:30:47.050
You can adjust the position of
the text on that starting page.

00:30:47.160 --> 00:30:50.260
So for example, if you figure that, "Oh,
we need some stuff at the beginning,

00:30:50.440 --> 00:30:53.530
then my text starts drawing," you
could just set the top inset and we'll

00:30:53.670 --> 00:30:56.480
shift the text down for the first page.

00:30:56.480 --> 00:30:59.380
And one good thing about the
formatters is once you've set the

00:30:59.520 --> 00:31:02.970
start page and you set the inset,
we'll actually calculate the number of

00:31:02.970 --> 00:31:04.780
pages you need to print that formatter.

00:31:04.780 --> 00:31:07.720
So if you add the formatter starting
at page zero and we calculate

00:31:07.720 --> 00:31:11.090
it's going to take three pages,
we'll automatically have

00:31:11.360 --> 00:31:13.330
number of pages return three.

00:31:13.410 --> 00:31:15.500
So you don't need to override
that method in this case.

00:31:15.520 --> 00:31:17.390
We know exactly how many
pages it's going to take.

00:31:17.490 --> 00:31:20.270
If you say it starts at page one,
we'll now say, "Well,

00:31:20.430 --> 00:31:23.800
you need four pages to print."
So once you've added the formatter

00:31:24.080 --> 00:31:27.580
to the print page renderer,
you can ask what page you've set

00:31:27.620 --> 00:31:30.690
it to start in and at that point
also we can calculate how many

00:31:30.700 --> 00:31:33.140
pages it's going to take to print.

00:31:33.370 --> 00:31:34.380
And then for each
page--for each formatter,

00:31:34.380 --> 00:31:38.330
you can ask on the valid page
range that it is what the rectangle

00:31:38.450 --> 00:31:41.110
is going to take to print it in.

00:31:41.210 --> 00:31:42.820
So for example,
if you have the top inset,

00:31:42.820 --> 00:31:44.940
the first page,
the rectangle will be shifted down

00:31:44.940 --> 00:31:50.100
and then it'll tell you at the end how
many--what the last page rectangle is.

00:31:51.910 --> 00:31:54.560
So here's an example and it's a very,
very trivial one.

00:31:54.600 --> 00:31:57.300
We're going to add a little title at
the beginning of some markup text.

00:31:57.300 --> 00:32:01.220
So we've got an HTML web page we've got,
but we want to draw along the top just

00:32:01.220 --> 00:32:03.760
the new URL or something like that.

00:32:03.890 --> 00:32:07.540
So here we've added one init method
which will take the markup text and

00:32:07.540 --> 00:32:09.640
the title that we want to present.

00:32:09.710 --> 00:32:14.870
And we only need to override draw
content for page at index and rect.

00:32:14.870 --> 00:32:17.390
And the reason for we need to
override this one is so that we

00:32:17.390 --> 00:32:17.390
actually just draw the title.

00:32:18.190 --> 00:32:20.400
So here's the init method
and the draw method.

00:32:20.450 --> 00:32:22.240
We'll just initialize the renderer.

00:32:22.240 --> 00:32:24.970
This is a print page renderer
that we're creating here.

00:32:25.130 --> 00:32:27.060
And we'll save the title for later.

00:32:27.260 --> 00:32:30.260
We'll create the formatter,
just stuffing in the markup text.

00:32:30.310 --> 00:32:33.240
And most importantly,
we'll set the content inset, the top one,

00:32:33.270 --> 00:32:36.740
to be shifted down by a fixed amount,
the title height.

00:32:36.790 --> 00:32:39.280
Now we'll say--we know that, let's say,
the title height isn't very tall,

00:32:39.280 --> 00:32:40.630
so we can add it on the first page.

00:32:40.630 --> 00:32:44.140
So we'll just add the print
formatter starting at page zero.

00:32:44.280 --> 00:32:47.760
Now, this system automatically calculates
how many pages that's going to take,

00:32:47.890 --> 00:32:51.340
and we'll tell--we'll figure out
what number of pages should be

00:32:51.380 --> 00:32:53.290
so that all the content will be

00:32:53.430 --> 00:32:56.180
For the actual draw method, well,
the print formatter is going to take care

00:32:56.180 --> 00:32:58.310
of all the drawing of the text for you,
so you don't need to

00:32:58.310 --> 00:32:59.470
worry about that at all.

00:32:59.620 --> 00:33:02.540
In this case, we just want to draw the
title on the first page,

00:33:02.540 --> 00:33:05.080
so if the page index is zero,
draw the title at the

00:33:05.080 --> 00:33:08.060
top of the content rect,
and then the formatter will take

00:33:08.080 --> 00:33:11.790
care of all the other drawing on
all the other pages as necessary.

00:33:11.890 --> 00:33:13.100
So it's a very powerful system.

00:33:13.100 --> 00:33:16.680
I hope it will make a lot of your life
easy in terms of calculating stuff.

00:33:16.730 --> 00:33:19.730
You don't have to worry
about page breaks yourself.

00:33:20.100 --> 00:33:23.260
So now I want to turn it over to
Dave who will give you a demo of

00:33:23.260 --> 00:33:27.740
this and the power of this and
adding it to the recipes application.

00:33:33.260 --> 00:33:35.090
Hi everyone, my name is Dave DeLoong.

00:33:35.090 --> 00:33:36.420
I'm also on the UI kit team.

00:33:36.420 --> 00:33:40.590
I'm going to walk you through adding
printing to the recipes application.

00:33:40.670 --> 00:33:42.870
This is one that we're familiar with.

00:33:42.870 --> 00:33:45.010
We've seen it before in other demos.

00:33:45.010 --> 00:33:46.620
This is what it looks like.

00:33:46.620 --> 00:33:50.600
You'll notice at the bottom we've got
a new share button which we're going

00:33:50.690 --> 00:33:52.840
to use for triggering our printing.

00:33:52.840 --> 00:33:56.040
Now in the recipes application
when you select a recipe,

00:33:56.040 --> 00:33:58.000
you'll see something like this.

00:33:58.150 --> 00:34:00.530
The format,
the layout of this recipe is very

00:34:00.530 --> 00:34:03.120
specific to the screen real estate.

00:34:03.200 --> 00:34:04.820
Of the device we're on.

00:34:05.010 --> 00:34:07.870
But when we're printing,
as Howard mentioned earlier,

00:34:07.870 --> 00:34:09.910
we've got a lot more real estate.

00:34:09.910 --> 00:34:13.360
So we're going to change it
to look something like this.

00:34:13.360 --> 00:34:16.190
We're going to add a nice
border around the recipe.

00:34:16.190 --> 00:34:18.840
We'll draw the image at
a much higher quality.

00:34:18.990 --> 00:34:23.400
We'll have the recipe name,
some preparation information,

00:34:23.630 --> 00:34:26.200
the list of ingredients, and so on.

00:34:26.230 --> 00:34:28.960
Now one of the things that
we're going to be using to do

00:34:28.960 --> 00:34:30.650
this is the printer simulator.

00:34:30.730 --> 00:34:34.520
We don't have to burn down a forest
to test printing in our application.

00:34:34.520 --> 00:34:35.560
We've got a simulator.

00:34:35.560 --> 00:34:38.900
We can test grayscale, color, and so on.

00:34:38.960 --> 00:34:43.590
We have all of these
applications and settings to use.

00:34:44.070 --> 00:34:48.220
All right,
so I'm here in our recipes application.

00:34:48.220 --> 00:34:53.110
And we're in our table view controller
for showing the list of recipes.

00:34:53.230 --> 00:34:57.550
And the very first thing that I want
to do before I do anything is decide

00:34:57.560 --> 00:34:59.940
that I need to show the print button.

00:35:00.310 --> 00:35:05.530
So here when I want to show it,
I'll first check, is printing available?

00:35:05.830 --> 00:35:08.420
If it is available,
then I'll actually create

00:35:08.420 --> 00:35:12.360
my bar button item,
add it to my toolbar, and continue on.

00:35:12.380 --> 00:35:17.570
Otherwise, I'll simply hide the toolbar
and not show the button.

00:35:18.570 --> 00:35:25.340
Once I've selected some recipes to print,
I'll use the new TableView API to

00:35:25.340 --> 00:35:29.720
use for multiple selection,
grab out all of the recipes

00:35:29.720 --> 00:35:31.900
and add them to an array.

00:35:32.050 --> 00:35:34.620
First thing,
I'll get the print interaction

00:35:34.620 --> 00:35:36.990
controller like Andrew mentioned.

00:35:37.200 --> 00:35:40.040
I'll set some stuff up,
which we'll talk about in a second,

00:35:40.040 --> 00:35:42.630
and then when I'm done,
I'll simply present it.

00:35:42.730 --> 00:35:46.550
Now since I'm going to be doing
custom rendering with that border,

00:35:46.640 --> 00:35:50.510
the image and stuff,
I'll need a custom print page renderer.

00:35:51.230 --> 00:35:55.300
So we're going to create a recipe
print page renderer and simply

00:35:55.300 --> 00:35:57.340
give it that array of recipes.

00:35:57.430 --> 00:36:01.070
And we're also going to set up
some information about this.

00:36:01.240 --> 00:36:02.980
We know that it's going to be mixed.

00:36:03.050 --> 00:36:04.890
It's going to be both text and images.

00:36:04.910 --> 00:36:08.090
So we'll have general of our output type.

00:36:08.230 --> 00:36:13.220
And we'll also set a job name
so that we can know what this

00:36:13.400 --> 00:36:15.900
job is in the print panel.

00:36:16.050 --> 00:36:18.100
For our renderer,

00:36:19.230 --> 00:36:22.480
We've got our initializer to
save our array of recipes.

00:36:22.480 --> 00:36:26.530
We're going to have space at the top
and the bottom for printing the date and

00:36:26.590 --> 00:36:29.220
time and some other footer information.

00:36:29.320 --> 00:36:33.540
And we know that the amount of
space that we need to draw that,

00:36:33.540 --> 00:36:38.490
the recipe name and the image,
will take about 150 points.

00:36:39.280 --> 00:36:43.500
So the very first thing that we're
going to do is override number of pages.

00:36:43.620 --> 00:36:47.520
We'll clear out any existing print
formatters that we have and then

00:36:47.790 --> 00:36:50.200
set up the ones for the recipes.

00:36:50.350 --> 00:36:54.360
So let's uncomment this long method.

00:36:54.790 --> 00:36:57.830
By the way,
this code is all available as part

00:36:57.830 --> 00:37:02.820
of the WWDC sample code so you
can be following along as well.

00:37:03.580 --> 00:37:06.630
For each one of these recipes,
we're going to grab an

00:37:06.650 --> 00:37:08.200
HTML representation.

00:37:08.270 --> 00:37:11.480
This HTML is going to be
creating an unordered list for

00:37:11.480 --> 00:37:13.920
listing all of the recipes,
ingredients.

00:37:14.080 --> 00:37:19.380
We'll also be creating a list
for the preparation instructions.

00:37:19.530 --> 00:37:24.080
And that's just simple,
simply generating an NSString for us.

00:37:24.200 --> 00:37:28.970
With that string of markup,
we'll create a markup

00:37:28.970 --> 00:37:28.970
text print formatter.

00:37:29.350 --> 00:37:34.880
And we'll also say that this formatter
needs to have some space at the top.

00:37:35.000 --> 00:37:38.380
This space will be used for
drawing the recipe image,

00:37:38.380 --> 00:37:41.840
the recipe title,
and the other information.

00:37:42.000 --> 00:37:46.400
Now, one of the things to be careful
about here is that by setting

00:37:46.600 --> 00:37:51.060
the top offset of this recipe,
we might actually be moving the

00:37:51.170 --> 00:37:53.900
recipe below the bottom of the page.

00:37:54.100 --> 00:37:59.770
So what we need to do is say,
if the top of our recipe would be beyond

00:37:59.770 --> 00:38:05.040
the bottom edge of our content area,
then we actually want to move

00:38:05.040 --> 00:38:11.630
our recipe to the next page and
then recalculate the top offset.

00:38:13.210 --> 00:38:18.680
Finally, we'll add our print formatter
to the print page renderer,

00:38:19.210 --> 00:38:23.730
increment our page counter so we
know where the next recipe starts,

00:38:23.880 --> 00:38:25.200
and there we go.

00:38:25.200 --> 00:38:30.820
So if we run this at this point, we'll

00:38:32.120 --> 00:38:33.420
build and run.

00:38:33.520 --> 00:38:35.890
We've got incomplete implementation.

00:38:36.020 --> 00:38:39.550
Comment out this for now.

00:38:44.100 --> 00:38:48.220
If we build and run,
we see the recipes app

00:38:48.220 --> 00:38:50.640
here in the simulator.

00:38:50.640 --> 00:38:52.020
And we've got our list of recipes.

00:38:52.200 --> 00:38:55.400
We know that printing is available
because the toolbar is showing.

00:38:55.450 --> 00:38:58.110
I can use this to
select multiple recipes.

00:38:58.370 --> 00:38:59.400
And I want to print.

00:38:59.490 --> 00:39:01.760
So first thing,
I'll need to open the printer simulator.

00:39:01.760 --> 00:39:08.890
I can do that by going to the file menu
and choosing Open Printer Simulator.

00:39:08.890 --> 00:39:08.890
And it pops up like this.

00:39:09.210 --> 00:39:15.900
And I select print and we see we're
presented with the modal sheet.

00:39:15.900 --> 00:39:18.340
We're simply going to save
the original to the simulator.

00:39:18.340 --> 00:39:20.860
This will pop it up as
a PDF inside preview.

00:39:20.950 --> 00:39:22.230
We want one copy.

00:39:22.390 --> 00:39:24.200
We hit print.

00:39:24.810 --> 00:39:27.500
At this point we get
our simple markup text.

00:39:27.560 --> 00:39:33.130
We notice that we've got our space above
each recipe and it is in that space that

00:39:33.170 --> 00:39:36.500
we'll be drawing the image and the name.

00:39:36.500 --> 00:39:39.160
So there we go, looks pretty good.

00:39:43.240 --> 00:39:47.340
When we actually get to
wanting to draw stuff,

00:39:47.370 --> 00:39:48.780
let's start with this.

00:39:48.880 --> 00:39:51.760
We want to draw a header at each page.

00:39:52.040 --> 00:39:54.530
In this case we'll be
drawing today's date,

00:39:54.530 --> 00:39:57.770
so we'll create a date formatter,
set the date format,

00:39:57.830 --> 00:40:01.060
create a string from today's
date and simply draw it using

00:40:01.320 --> 00:40:05.100
NSString's draw and rect with
font methods that we're used to.

00:40:05.130 --> 00:40:08.250
Similarly, drawing the footer

00:40:09.300 --> 00:40:14.240
will be to show page one of three
as is in this particular case,

00:40:14.240 --> 00:40:21.100
again,
drawing in Rect with a particular font.

00:40:21.100 --> 00:40:21.100
If we run this,

00:40:22.600 --> 00:40:25.700
We will see again that
this is quite simple.

00:40:25.700 --> 00:40:29.590
Since we already set up the
header height and footer height

00:40:29.700 --> 00:40:34.200
in our initializer method,
these callbacks will be called.

00:40:34.200 --> 00:40:37.320
If we had neglected to set our
header height and footer height,

00:40:37.560 --> 00:40:39.310
then we wouldn't have seen anything.

00:40:39.440 --> 00:40:43.070
But there's today's date.

00:40:43.070 --> 00:40:43.070
There's page 1 of 3.

00:40:43.860 --> 00:40:47.130
Next we want to draw the
actual print formatter.

00:40:47.130 --> 00:40:53.270
So this is a bit longer.

00:40:53.270 --> 00:40:53.270
I'll uncomment that.

00:40:58.200 --> 00:41:01.080
Very first thing we are
going to do is invoke super.

00:41:01.370 --> 00:41:05.210
Super is where the actual print
formatter will be drawn onto the page.

00:41:05.210 --> 00:41:09.260
So the markup text will be rendered,
all of that will happen in super.

00:41:09.460 --> 00:41:11.280
So that's going to happen first.

00:41:11.280 --> 00:41:13.720
And then we are going
to draw on top of that.

00:41:13.720 --> 00:41:17.590
Drawing a print formatter
will draw it as opaque.

00:41:17.590 --> 00:41:22.820
So if we were to call super last,
none of our custom drawing would show

00:41:22.820 --> 00:41:24.750
up because it would just get covered up.

00:41:24.750 --> 00:41:24.750
So we will do that first.

00:41:25.040 --> 00:41:28.720
We will figure out the rectangle
that we are going to be using

00:41:28.910 --> 00:41:30.680
for this print formatter.

00:41:30.680 --> 00:41:34.000
And then for our border,
we are going to be constructing

00:41:34.000 --> 00:41:35.720
that out of a Bezier path.

00:41:35.720 --> 00:41:44.480
And for the first page of this formatter,
so if our page index is the

00:41:44.480 --> 00:41:44.480
start page of the formatter,
we will draw the top of the line.

00:41:44.680 --> 00:41:47.790
We will draw a left border,
a right border,

00:41:47.820 --> 00:41:52.470
and finally if this is the last page,
or in other words the start page

00:41:52.470 --> 00:41:56.460
plus the page count minus one,
we will draw the bottom line.

00:41:56.460 --> 00:41:59.760
Set our color to be black
and stroke the border.

00:42:00.430 --> 00:42:04.160
So running this,
we will see that each recipe

00:42:04.160 --> 00:42:08.960
will have a box around it,
again with the 150 points

00:42:09.020 --> 00:42:12.860
of space above each recipe,
which we'll use next for

00:42:12.860 --> 00:42:15.590
drawing our recipe information.

00:42:21.000 --> 00:42:25.880
Okay, so we only want to draw the recipe
information if it's on the first page.

00:42:25.880 --> 00:42:29.780
So here inside our if block,
we'll uncomment this.

00:42:29.880 --> 00:42:32.420
Self recipe for formatter.

00:42:32.420 --> 00:42:34.570
And we'll also say draw recipe.

00:42:34.570 --> 00:42:37.950
And I'll go back and
uncomment these methods now.

00:42:40.480 --> 00:42:46.080
For drawing the recipe,
we simply want to draw three things.

00:42:46.190 --> 00:42:49.360
We want to draw the image,
we want to draw the name,

00:42:49.360 --> 00:42:52.230
and we want to draw the
information about the recipe.

00:42:52.390 --> 00:42:55.230
Drawing the image is
again straightforward.

00:42:55.490 --> 00:42:59.180
We're going to retrieve the
UI image object from this recipe.

00:42:59.430 --> 00:43:03.370
We'll scale it down to fit inside
the rectangle that we have and

00:43:03.370 --> 00:43:05.540
then simply call draw in rect.

00:43:06.120 --> 00:43:10.410
For drawing the recipe name,
we'll compute the rectangle that

00:43:10.470 --> 00:43:13.660
we have to draw the string in,
create a bold font,

00:43:13.750 --> 00:43:17.870
and then again simply draw a
string inside our rectangle

00:43:17.870 --> 00:43:19.750
with a left alignment.

00:43:19.960 --> 00:43:22.660
And then for drawing the
information about the recipe,

00:43:22.660 --> 00:43:25.730
again we'll compute the rectangle
that we have to draw inside.

00:43:26.070 --> 00:43:32.310
Use a slightly less dark color
and then again draw and rect.

00:43:33.080 --> 00:43:36.680
With this we've completed all of
the custom drawing that we need.

00:43:36.750 --> 00:43:41.100
We can see that we've got our
border around each recipe,

00:43:41.170 --> 00:43:46.110
we've got the space for each recipe,
we've got a nice image, nice large title,

00:43:46.210 --> 00:43:50.650
some information about each recipe,
we've got our headers, our footers,

00:43:50.800 --> 00:43:53.000
and it really is just that simple.

00:43:53.160 --> 00:43:54.690
Andrew?

00:44:00.800 --> 00:44:05.290
So you saw how easy it is to really just
do a lot of complex drawing with just a

00:44:05.340 --> 00:44:08.200
few methods that you need to override,
and a whole bunch of

00:44:08.210 --> 00:44:09.820
rectangle calculations.

00:44:09.850 --> 00:44:13.170
Now, I just wanted to cover a couple of
advanced features that you might

00:44:13.170 --> 00:44:17.540
use for a more complex application,
i.e., pages, for example.

00:44:17.560 --> 00:44:18.920
And there are two I want to cover.

00:44:19.050 --> 00:44:20.820
The first is paper size.

00:44:20.840 --> 00:44:23.570
As I mentioned,
we don't have a page set up,

00:44:23.700 --> 00:44:26.740
so the user hasn't specified ahead
of time what printer they want and

00:44:26.760 --> 00:44:28.780
what paper they want on that printer.

00:44:28.900 --> 00:44:31.910
And the user may not even know what
printer they're going to print on until

00:44:31.910 --> 00:44:34.580
they get into the range of the printer.

00:44:34.700 --> 00:44:38.730
So you should just assume that we're
going to give you any kind of paper

00:44:38.730 --> 00:44:42.020
size we could possibly give you,
from small to large.

00:44:42.120 --> 00:44:44.300
And you should be very flexible
about laying out your content.

00:44:44.300 --> 00:44:46.720
You should just be able to
handle anything you give you.

00:44:46.830 --> 00:44:49.200
And we'll automatically choose
the right paper based on what

00:44:49.200 --> 00:44:50.330
you've told us is the output type.

00:44:50.340 --> 00:44:54.340
So for example, photo,
we'll choose a photo paper size.

00:44:54.450 --> 00:44:56.680
And also what the printer
reports back to us.

00:44:56.970 --> 00:44:58.400
And the printer can even tell us,
possibly,

00:44:58.400 --> 00:45:01.020
what kind of paper it has installed.

00:45:01.030 --> 00:45:04.280
But if you want to do your
own kind of page layout,

00:45:04.280 --> 00:45:08.880
like pages, you're going to have to
implement your own interface.

00:45:08.880 --> 00:45:12.380
So if you've got your own, effectively,
a page setup call-- so for example,

00:45:12.440 --> 00:45:17.620
in pages here, it gives you the choice
of between A4 and letter.

00:45:18.160 --> 00:45:20.240
In that case,
you'll need to implement a method.

00:45:20.280 --> 00:45:22.270
A UI print interaction
controller has a delegate,

00:45:22.330 --> 00:45:25.870
which allows you to customize
the paper selection.

00:45:25.970 --> 00:45:29.160
And whenever the user selects a
printer or before printing and so on,

00:45:29.170 --> 00:45:32.580
and we need to know what
paper size to use so we can

00:45:32.580 --> 00:45:36.260
calculate the number of pages,
we'll call your method print

00:45:36.270 --> 00:45:38.340
interaction controller choose paper.

00:45:38.400 --> 00:45:40.500
And what we'll do is pass you
in a list of papers that the

00:45:40.560 --> 00:45:42.900
printer has told us it supports.

00:45:42.970 --> 00:45:44.600
You have to get the size from the user.

00:45:44.600 --> 00:45:47.480
Here the user has selected maybe letter.

00:45:47.550 --> 00:45:50.490
And you're required from that
list of papers that we give you

00:45:50.490 --> 00:45:52.600
to choose the one that fits best.

00:45:52.700 --> 00:45:55.330
And we actually give you a method that
does this for you if you don't want to

00:45:55.330 --> 00:45:58.040
do any complex calculations yourself.

00:45:58.130 --> 00:46:01.700
So for example, here's an implementation
of that particular method.

00:46:01.770 --> 00:46:03.030
You have to calculate the paper size.

00:46:03.080 --> 00:46:05.400
Now here we're going to
ask for 8 and 1/2 by 11.

00:46:05.580 --> 00:46:07.460
And this is the actual
physical paper size,

00:46:07.460 --> 00:46:08.800
not the printable area.

00:46:09.020 --> 00:46:12.000
So you just say, well,
we want 8 and 1/2 by 11 paper.

00:46:12.220 --> 00:46:15.030
And we give you a method,
a class method on UI print

00:46:15.100 --> 00:46:17.320
paper that will take the list
of papers that we give you,

00:46:17.400 --> 00:46:21.280
the paper size that you want,
and will return the best UI print paper

00:46:21.290 --> 00:46:24.400
that it thinks will fit your content.

00:46:24.460 --> 00:46:26.320
Now if you want to get fancier,
you can of course look

00:46:26.450 --> 00:46:27.840
through this list yourself.

00:46:27.900 --> 00:46:31.600
Each UI print paper tells you both
the paper size and the printable area.

00:46:31.600 --> 00:46:32.680
So if you want to say, well, no, no, no.

00:46:32.680 --> 00:46:35.350
I need a larger piece of paper,
a larger printable area,

00:46:35.350 --> 00:46:37.160
so I'm going to choose
a larger piece of paper.

00:46:37.310 --> 00:46:38.920
I'm going to return that instead.

00:46:38.920 --> 00:46:41.790
Of course, returning that is no guarantee
that the printer actually

00:46:41.790 --> 00:46:43.850
has that paper installed.

00:46:45.760 --> 00:46:49.750
The other little advanced feature is,
again, something that Pages use.

00:46:49.750 --> 00:46:53.110
The normal presentation
methods are for on the iPhone,

00:46:53.110 --> 00:46:57.110
present animated with completion
handler and then let's bring up a sheet.

00:46:57.110 --> 00:46:59.880
On the iPad, of course,
we have these sort of two standard

00:46:59.880 --> 00:47:03.460
ways of presenting a popover either
from a location and a rectangle

00:47:03.460 --> 00:47:06.610
in a view or from a bar button
item in the most common case.

00:47:06.680 --> 00:47:09.500
And again,
we'll put up sort of a modal popover that

00:47:09.500 --> 00:47:12.280
will handle the user interaction for you.

00:47:12.330 --> 00:47:15.320
But if you want to embed our
printing interface in one of of

00:47:15.320 --> 00:47:19.290
your view controller hierarchies,
we give you a way of doing that.

00:47:19.540 --> 00:47:22.160
You'll override a method called
PrintInteractionController

00:47:22.160 --> 00:47:25.120
ParentViewController,
and that's called when you call one

00:47:25.120 --> 00:47:27.340
of the standard present methods,
and we go, oh, no, no,

00:47:27.340 --> 00:47:29.240
we're not going to put
up a popover or a sheet,

00:47:29.240 --> 00:47:31.520
we're just going to use the
view controller you gave us.

00:47:31.520 --> 00:47:34.470
If it's a nav controller,
we'll call a push method on it,

00:47:34.580 --> 00:47:36.700
just like normal,
and if it's just a other

00:47:36.740 --> 00:47:39.370
kind of view controller,
we'll just call it presentModal,

00:47:39.370 --> 00:47:41.860
so it's just a modal sheet
that's going to be presented.

00:47:41.880 --> 00:47:45.140
But whatever you do,
don't peek at the view

00:47:45.140 --> 00:47:46.680
controller we push.

00:47:46.680 --> 00:47:50.910
Don't assume there's any kind of layout
or any kind of particular set of items,

00:47:50.910 --> 00:47:54.130
controls, and so on,
because we will probably be adding

00:47:54.130 --> 00:47:56.590
things or maybe removing things,
changing the order and

00:47:56.590 --> 00:47:58.950
layout and view hierarchies,
and if you look inside there,

00:47:58.950 --> 00:47:59.690
you're going to break.

00:47:59.720 --> 00:48:02.530
So whatever you do,
don't look inside what we put,

00:48:02.540 --> 00:48:04.080
but it does give you a way of doing this.

00:48:04.080 --> 00:48:07.510
So for example, in pages here,
they have a share and print panel,

00:48:07.520 --> 00:48:09.150
a nav controller,
their own nav controller

00:48:09.150 --> 00:48:10.120
with their own back button.

00:48:10.120 --> 00:48:12.670
They've added their own print item,
and when you click it,

00:48:12.750 --> 00:48:14.430
we just push ours on top.

00:48:14.460 --> 00:48:18.250
We put in the printer options title,
but they provide the back button.

00:48:20.550 --> 00:48:23.340
And so that's how you can add
printing to your application.

00:48:23.340 --> 00:48:26.340
And it's hopefully not too complex and
something you can do for all of yours.

00:48:26.350 --> 00:48:30.290
And now back to Howard with a summary.

00:48:31.900 --> 00:48:36.140
Okay, so today you learned how easy it is
to add printing to your application.

00:48:36.140 --> 00:48:41.300
If you have predefined data types, JPEGs,
pictures, PDF, or even HTML,

00:48:41.300 --> 00:48:43.880
we'll do all the heavy lifting for you.

00:48:43.960 --> 00:48:47.840
If you need something more complicated,
you can combine formatters and

00:48:47.840 --> 00:48:50.050
renderers to draw just about anything.

00:48:50.050 --> 00:48:52.620
You might have noticed,
it was sort of implied,

00:48:52.620 --> 00:48:57.140
and I'll make it really explicit,
all of the 2D drawing APIs on

00:48:57.140 --> 00:48:59.080
iOS work with printing.

00:48:59.170 --> 00:49:01.480
So you saw that in the recipes app.

00:49:01.710 --> 00:49:05.420
You should be able to draw just
about anything that you'd want.

00:49:05.470 --> 00:49:09.090
We take care of the easy stuff,
text layout and all of that.

00:49:09.150 --> 00:49:11.900
You can do any level of custom stuff.

00:49:11.900 --> 00:49:16.620
And I think this will add great
value to just about any application.

00:49:16.620 --> 00:49:21.000
The examples you can find on the website,
and then the demo that you saw

00:49:21.000 --> 00:49:23.760
today is on the WWDC sample website.

00:49:23.920 --> 00:49:28.740
Here's some names for further
information that you may want.

00:49:29.340 --> 00:49:33.570
And then sessions,
practical drawing for iOS developers.

00:49:33.600 --> 00:49:36.740
This will cover all those
2D APIs that I talked about.

00:49:36.930 --> 00:49:39.600
Again, you should be able to draw
anything when you're printing.

00:49:39.710 --> 00:49:42.540
With that, I want to thank you guys
for coming to the printing

00:49:42.540 --> 00:49:44.630
system session for WWDC 2011.