WEBVTT

00:00:10.110 --> 00:00:11.190
Good morning, everyone.

00:00:11.270 --> 00:00:13.730
My name is Dallas De Atley,
and we're going to spend the

00:00:13.730 --> 00:00:16.660
next hour talking about the new
iCloud Storage features that we're

00:00:16.860 --> 00:00:20.460
introducing with iOS 5 and Mac OS X 11.

00:00:20.920 --> 00:00:23.950
I'd like to begin by
talking about my stuff.

00:00:24.690 --> 00:00:28.440
I might have stuff on
my iPhone or iPod Touch.

00:00:28.540 --> 00:00:30.800
I might have it on my iPad.

00:00:31.000 --> 00:00:36.140
- I might even have it on
some other type of device.

00:00:37.030 --> 00:00:40.230
And it shouldn't matter
what device I'm using.

00:00:40.240 --> 00:00:41.860
I should be able to
get access to my stuff,

00:00:41.880 --> 00:00:45.010
regardless of which one I'm
actually using at the moment.

00:00:45.140 --> 00:00:47.300
So if I create a document--

00:00:48.410 --> 00:00:50.950
On my iPad,
I should be able to get access to

00:00:50.950 --> 00:00:54.140
that document on every other device.

00:00:54.140 --> 00:00:56.680
And I really shouldn't
have to do it myself.

00:00:58.720 --> 00:01:02.020
That said,
keeping everything up to date on all

00:01:02.020 --> 00:01:05.090
of those devices can be really tricky.

00:01:07.920 --> 00:01:12.090
Now, there are existing solutions
for specific types of data.

00:01:12.280 --> 00:01:18.020
So for example,
Mail on my iPhone and Mail on my

00:01:18.020 --> 00:01:21.080
Mac both talk with a server via IMAP.

00:01:21.210 --> 00:01:23.220
And so they're able to keep
all of my email up to date

00:01:23.540 --> 00:01:25.590
between those two devices.

00:01:25.760 --> 00:01:29.490
The same is true for Contacts,
which uses Card Dev.

00:01:30.230 --> 00:01:35.160
As well as Calendars that uses CalDAV to
specifically keep my calendars up

00:01:35.220 --> 00:01:37.540
to date between all of my devices.

00:01:37.660 --> 00:01:41.160
And of course there's iTunes,
which copies media to my device,

00:01:41.280 --> 00:01:44.640
as well as files on
behalf of applications.

00:01:44.770 --> 00:01:48.240
But to be honest, the user shouldn't have
to do this himself.

00:01:48.330 --> 00:01:52.540
The system and the applications should
just make sure that his stuff is there,

00:01:52.540 --> 00:01:55.440
regardless of what device he's on.

00:01:55.810 --> 00:02:00.580
So, should each developer have to come up
with his own custom solution to do this?

00:02:00.580 --> 00:02:03.140
For example, you might be working
with just regular files.

00:02:03.260 --> 00:02:06.090
Your document might be a
single file on the file system,

00:02:06.090 --> 00:02:08.890
and that is what you're
presenting to the user.

00:02:08.890 --> 00:02:11.900
You might actually have something
a bit more sophisticated,

00:02:11.940 --> 00:02:14.560
which is what we call a package,
which is a collection of files

00:02:14.560 --> 00:02:15.840
that represent a document.

00:02:15.850 --> 00:02:18.990
You might also have an application
that we call a shoebox app.

00:02:19.070 --> 00:02:24.910
And a shoebox application collects a
lot of files on behalf of the user,

00:02:24.910 --> 00:02:27.600
and then indexes them,
usually with something

00:02:27.680 --> 00:02:30.490
like a SQLite database,
and presents that to the user.

00:02:30.490 --> 00:02:32.490
A good example would be iPhoto.

00:02:33.540 --> 00:02:36.240
But you might not actually be
dealing with documents at all.

00:02:36.280 --> 00:02:40.690
You might be dealing with a smaller
set of data that doesn't actually

00:02:40.690 --> 00:02:43.670
need to be put in a document,
but you still want to have that

00:02:43.670 --> 00:02:48.630
behavior replicated across your
app on all of the user's devices.

00:02:49.280 --> 00:02:52.920
Our solution is iCloud Storage.

00:02:53.020 --> 00:02:56.490
It's a new API that's available
for any App Store app.

00:02:56.710 --> 00:03:00.010
And what it does is it provides
an iCloud sandbox per application.

00:03:00.260 --> 00:03:03.540
Now, if you're familiar with
sandbox applications on iOS,

00:03:03.580 --> 00:03:06.540
each application lives
within its own sandbox.

00:03:06.600 --> 00:03:10.860
And its data is isolated from the rest
of the system and other applications.

00:03:10.990 --> 00:03:14.020
So other apps can't get at your data.

00:03:14.080 --> 00:03:15.550
There are some benefits
to this isolation.

00:03:15.560 --> 00:03:18.080
In particular,
it provides security for your data,

00:03:18.120 --> 00:03:20.860
as well as stability for
the system as a whole.

00:03:20.930 --> 00:03:24.440
But it does make actually
moving documents between

00:03:24.440 --> 00:03:26.800
devices Fairly difficult.

00:03:27.530 --> 00:03:30.490
In the case of iCloud
Storage in our iCloud Sandbox,

00:03:30.700 --> 00:03:33.780
what we've done is we've created
a sandbox that is accessible to

00:03:33.850 --> 00:03:37.410
your app that will upload files
and data that's in that sandbox,

00:03:37.470 --> 00:03:39.650
and it will do it automatically.

00:03:40.160 --> 00:03:42.830
We're also providing a feature that
allows you to upload simple key

00:03:42.830 --> 00:03:46.080
value data if you don't necessarily
want to put it into a document.

00:03:46.140 --> 00:03:49.190
And it works continuously
and in real time.

00:03:49.300 --> 00:03:52.100
So as you edit your document,
those changes are going

00:03:52.100 --> 00:03:54.210
to be reflected in iCloud.

00:03:54.380 --> 00:03:58.100
So iCloud Storage is responsible
for moving the data between each

00:03:58.100 --> 00:04:02.750
device that a user is logged
into his iCloud account with.

00:04:03.130 --> 00:04:06.750
And it will notify your application
when a file that's available to it in

00:04:06.750 --> 00:04:09.710
the iCloud Sandbox has been modified.

00:04:10.200 --> 00:04:15.800
[Transcript missing]

00:04:16.260 --> 00:04:19.280
The system,
when it notices that two documents

00:04:19.280 --> 00:04:24.080
have changed on two different devices,
it's going to go ahead and pick a winner.

00:04:24.180 --> 00:04:25.960
However,
we know that the system is not going

00:04:25.960 --> 00:04:27.850
to get this right every single time.

00:04:28.010 --> 00:04:31.280
And so through the API,
we make it possible for your

00:04:31.280 --> 00:04:35.650
application to go back and choose
the other file if it wants to.

00:04:35.930 --> 00:04:37.700
Also, it just works.

00:04:37.750 --> 00:04:41.440
We take care of all the details of
taking those files and moving them up

00:04:41.520 --> 00:04:44.950
to the cloud and moving them to the
other user's device on your behalf.

00:04:46.500 --> 00:04:48.700
Even if your application isn't running.

00:04:48.810 --> 00:04:51.840
So if you're on iOS and your
application has been suspended,

00:04:51.950 --> 00:04:55.590
all of your documents that are in that
application's iCloud container are

00:04:55.590 --> 00:04:58.090
still going to be moved up to iCloud.

00:04:58.170 --> 00:04:59.800
If you're on the Mac, it's the same deal.

00:04:59.800 --> 00:05:02.910
If the application is quit,
we're still going to be moving

00:05:02.910 --> 00:05:07.240
all of those documents between
your device and iCloud.

00:05:07.310 --> 00:05:09.630
So how does it actually work?

00:05:11.220 --> 00:05:15.110
When you create a document,
what the system is going to do is break

00:05:15.110 --> 00:05:18.100
it down into a series of discrete chunks.

00:05:18.210 --> 00:05:19.940
And the first time you
create the document,

00:05:20.030 --> 00:05:22.740
all those chunks are going
to be moved up to the cloud.

00:05:22.840 --> 00:05:27.490
Now when the user modifies that document,
what the system is going to do is

00:05:27.530 --> 00:05:32.970
determine just the set of changes that
have actually been made to the document,

00:05:32.980 --> 00:05:35.660
and only move those
chunks up to the cloud.

00:05:35.780 --> 00:05:40.020
And now the cloud has a new and
complete version of that file.

00:05:40.310 --> 00:05:41.100
on the server.

00:05:41.170 --> 00:05:42.440
So it's atomic.

00:05:42.500 --> 00:05:45.010
Your application is not going
to be notified of a change

00:05:45.290 --> 00:05:49.300
until all of the changes have
actually arrived on the device.

00:05:49.330 --> 00:05:50.900
It also works with packages.

00:05:51.070 --> 00:05:53.800
So if your application's
document is a package,

00:05:53.840 --> 00:05:57.030
it will also work with Cloud Storage.

00:05:57.500 --> 00:05:59.770
It goes peer-to-peer when possible.

00:05:59.950 --> 00:06:03.600
So while the truth may be in the cloud,
the data itself is going

00:06:03.600 --> 00:06:04.360
to take a shortcut.

00:06:04.360 --> 00:06:08.280
So if you have two devices that
are on the same wireless network,

00:06:08.360 --> 00:06:10.760
and they're associated with
the same iCloud account,

00:06:10.780 --> 00:06:14.000
they will go ahead and move
the data between each other,

00:06:14.000 --> 00:06:17.500
just as if it had downloaded
it directly from iCloud.

00:06:17.500 --> 00:06:20.120
So there's a bit of
an optimization there.

00:06:20.280 --> 00:06:24.680
It's able to do this because of the way
that iCloud Storage treats the difference

00:06:24.680 --> 00:06:27.210
between the file's metadata and its data.

00:06:27.210 --> 00:06:30.410
So the metadata is always
pushed to the cloud.

00:06:30.440 --> 00:06:33.130
And when I say metadata,
I'm talking about the information that

00:06:33.130 --> 00:06:35.110
actually describes the files themselves.

00:06:35.120 --> 00:06:39.240
So its name, its size, its type,
its modification dates.

00:06:39.240 --> 00:06:43.600
That information is being aggressively
pushed up to iCloud any time a file

00:06:43.600 --> 00:06:45.880
is created or otherwise modified.

00:06:45.880 --> 00:06:49.560
This is so that iCloud knows
about the existence of a file.

00:06:49.820 --> 00:06:51.260
As soon as it's been created.

00:06:51.260 --> 00:06:53.660
And this is a very important
concept that we want to get

00:06:53.800 --> 00:06:57.190
across with iCloud Storage,
which is what we're building here is a

00:06:57.190 --> 00:07:01.850
system where your application is going
to know about the existence of a file,

00:07:01.850 --> 00:07:04.800
even if it might not yet
be local on the device.

00:07:06.620 --> 00:07:09.380
So iCloud in particular
will always pull new files.

00:07:09.380 --> 00:07:11.060
So when the device
tells it of a new file,

00:07:11.070 --> 00:07:13.600
iCloud is going to go ahead and
pull that data up to the server

00:07:14.150 --> 00:07:18.650
so that it always has the most
up-to-date copy of the user's data.

00:07:19.570 --> 00:07:23.240
Devices are going to pull files when
it's appropriate for each platform.

00:07:23.240 --> 00:07:28.890
This is because your iPhone is going
to have radically different performance

00:07:28.980 --> 00:07:32.000
and power characteristics than your
iMac that's plugged into the wall.

00:07:32.000 --> 00:07:33.900
Your iMac also has a lot more storage.

00:07:33.900 --> 00:07:37.270
And so the operating system is
going to make a decision about when

00:07:37.310 --> 00:07:40.950
it moves the data automatically,
when it's best for that platform.

00:07:40.950 --> 00:07:43.450
So the OS may pull that
data automatically,

00:07:43.450 --> 00:07:44.370
or it may not.

00:07:44.370 --> 00:07:46.700
However,
your application is still going to

00:07:46.700 --> 00:07:49.480
know about the existence of that file,
and through that,

00:07:49.480 --> 00:07:49.480
it's going to be able to
pull that data automatically.

00:07:49.500 --> 00:07:52.060
Through the API,
you can then elect to have the

00:07:52.060 --> 00:07:55.970
system move a document local
if it's not already there.

00:07:56.600 --> 00:08:00.180
So again, this is a big concept that
we want to get across today,

00:08:00.180 --> 00:08:03.780
which is we're building a system
where your applications are going

00:08:03.780 --> 00:08:07.620
to know about all of the files that
are available to it via iCloud,

00:08:07.640 --> 00:08:10.700
even if they're not on the device yet.

00:08:11.520 --> 00:08:15.260
So the file exists,
but the data might not have arrived yet.

00:08:15.290 --> 00:08:17.600
At this point,
I'd like to invite up Eric Krugler to

00:08:17.680 --> 00:08:22.860
tell us more about the iCloud services
that form the backbone of iCloud Storage.

00:08:23.380 --> 00:08:24.350
Thank you, Dallas.

00:08:24.420 --> 00:08:26.760
So I'm going to talk a little bit
about the actual service that's

00:08:26.830 --> 00:08:29.230
behind the iCloud Storage APIs.

00:08:29.560 --> 00:08:31.460
Now yesterday, we announced iCloud.

00:08:31.480 --> 00:08:36.020
iCloud stores your content and
wirelessly pushes it to all your devices.

00:08:36.040 --> 00:08:38.270
iCloud also integrates
seamlessly with your app,

00:08:38.270 --> 00:08:40.340
so everything happens automatically.

00:08:40.390 --> 00:08:42.580
And we talked about a number
of the applications that

00:08:42.580 --> 00:08:44.180
are integrated with iCloud.

00:08:44.260 --> 00:08:46.730
So many of these you're
familiar with-- your contacts,

00:08:46.810 --> 00:08:48.460
your calendar, your mail.

00:08:48.490 --> 00:08:51.130
We also have enhanced backup,
so that backup automatically

00:08:51.170 --> 00:08:52.200
goes to the cloud.

00:08:52.220 --> 00:08:55.900
And on restore, you can automatically get
everything back down to your device.

00:08:55.940 --> 00:08:58.880
We also announced PhotoStream,
which is a great way to get

00:08:58.880 --> 00:09:01.800
your photos up into the cloud
and onto all of your devices.

00:09:01.840 --> 00:09:05.000
And we also talked about cloud documents.

00:09:07.700 --> 00:09:11.960
Now, cloud documents is the way
that you integrate with iCloud.

00:09:12.260 --> 00:09:15.640
It's the way any application that
needs to store data in the cloud and

00:09:15.640 --> 00:09:18.960
get it to all devices can basically
take advantage of the iCloud services.

00:09:18.960 --> 00:09:21.780
Now,
when we set about creating cloud storage,

00:09:21.930 --> 00:09:25.220
we had a couple choices to make,
and one was we could have

00:09:25.230 --> 00:09:26.730
built a better iDisk.

00:09:26.800 --> 00:09:29.510
But we decided to take
some lessons from iOS,

00:09:29.510 --> 00:09:32.400
and we thought we should
really mimic the model of

00:09:32.460 --> 00:09:35.530
application-centered document management.

00:09:36.440 --> 00:09:38.030
And what that means is that,
as Dallas says,

00:09:38.080 --> 00:09:42.340
you have a sandbox that basically
manages your application data.

00:09:42.400 --> 00:09:44.910
That means you're in total
control of the documents.

00:09:44.990 --> 00:09:48.910
No one else can basically manipulate
those documents except your application.

00:09:48.920 --> 00:09:53.000
And that allows you to have complete
control and exclusive rights to make the

00:09:53.080 --> 00:09:54.750
best presentation for your customers.

00:09:54.760 --> 00:09:58.950
Now, in doing that,
we had to then provide an API.

00:09:58.960 --> 00:10:03.110
So it's the iCloud Storage API that
gives you direct access into cloud

00:10:03.110 --> 00:10:05.390
storage to manage the documents.

00:10:05.630 --> 00:10:10.190
Now we believe iCloud is the absolute
best way for you to store your content

00:10:10.510 --> 00:10:12.260
and get it on all your devices.

00:10:12.350 --> 00:10:14.500
And because of that,
we're making it as easy as possible

00:10:14.500 --> 00:10:17.210
for customers to adopt iCloud.

00:10:18.690 --> 00:10:20.750
So the first way you do that is, well,
you make it free.

00:10:20.930 --> 00:10:25.330
So iCloud is free with iOS 5,
as well as with Mac OS X Lion.

00:10:25.440 --> 00:10:27.710
But in addition to that,
we're also making iCloud

00:10:27.870 --> 00:10:30.020
part of the iOS 5 setup.

00:10:30.170 --> 00:10:35.450
So any user who purchases a new iPad,
an iPhone, an iPod Touch,

00:10:35.450 --> 00:10:38.340
or upgrades their
existing device to iOS 5,

00:10:38.340 --> 00:10:40.870
goes through the iOS 5 setup.

00:10:40.970 --> 00:10:44.080
And in iOS 5 setup,
there's a step where you

00:10:44.170 --> 00:10:46.820
provide your Apple ID,
or you can create one.

00:10:46.880 --> 00:10:49.230
Now most users already
have iTunes accounts,

00:10:49.430 --> 00:10:52.920
and they'll use those accounts right
here to basically set up iCloud.

00:10:52.980 --> 00:10:55.210
But even if they don't have one,
right in the flow,

00:10:55.330 --> 00:10:58.210
they can create a brand
new iCloud account,

00:10:58.210 --> 00:11:01.280
and it gives them
immediate access to iCloud.

00:11:01.950 --> 00:11:06.020
With that account,
you get a free five gigabytes of storage.

00:11:06.060 --> 00:11:09.320
And with that storage,
you basically have access to the

00:11:09.320 --> 00:11:12.160
iCloud Storage APIs for that customer.

00:11:12.270 --> 00:11:14.940
So what you can expect is that
the vast majority of users who

00:11:14.940 --> 00:11:17.230
are on iOS 5 will have iCloud.

00:11:17.460 --> 00:11:21.290
And because they have iCloud,
they will have iCloud Storage.

00:11:22.050 --> 00:11:24.500
Now, in addition to trying to make
this as easy as possible for

00:11:24.600 --> 00:11:27.630
customers to adopt iCloud,
we're also trying to make

00:11:27.630 --> 00:11:29.290
it easy for developers.

00:11:29.730 --> 00:11:31.830
So one way to think about this is,
you know,

00:11:31.870 --> 00:11:35.750
what it would take for you to build
your own cloud storage service.

00:11:35.870 --> 00:11:38.560
So if you go down this path,
the first thing you're going

00:11:38.560 --> 00:11:41.360
to have to do is set up and
configure a bunch of servers.

00:11:41.400 --> 00:11:44.070
Whether you buy or rent these,
you're going to need the infrastructure

00:11:44.070 --> 00:11:48.010
to basically service all these requests
coming in from all of your devices.

00:11:48.290 --> 00:11:50.440
This is quite a bit of work.

00:11:50.490 --> 00:11:52.260
Then you're going to have
to create your own protocol.

00:11:52.300 --> 00:11:54.550
That's always a lot of fun.

00:11:55.330 --> 00:11:56.720
You're going to have
to write a lot of code,

00:11:56.770 --> 00:11:59.910
both on the client and on the server,
to make sure that everything is

00:11:59.910 --> 00:12:04.220
efficient and reliably moving between
all of your devices in the cloud.

00:12:04.910 --> 00:12:07.010
You'll need to add push notifications,
because your customers are

00:12:07.090 --> 00:12:10.300
going to expect that everything
gets updated immediately.

00:12:10.910 --> 00:12:13.030
You'll need to add replication
in your data centers for high

00:12:13.030 --> 00:12:14.940
availability and disaster recovery.

00:12:14.940 --> 00:12:18.340
And anyone who's done this knows this is
an incredibly difficult problem to solve.

00:12:18.410 --> 00:12:23.020
Once you get this thing operating, well,
then you get to be on call all the time.

00:12:23.230 --> 00:12:24.940
And after all that,
you get to pay for the

00:12:24.940 --> 00:12:26.700
storage and the bandwidth.

00:12:26.760 --> 00:12:32.690
Or you can simply use
the iCloud Storage APIs.

00:12:38.190 --> 00:12:40.960
Now,
iCloud is a brand new service built from

00:12:40.960 --> 00:12:45.820
the ground up to basically put users'
content in the cloud and distribute it

00:12:46.000 --> 00:12:48.900
through push down to all the devices.

00:12:48.990 --> 00:12:52.750
But it's actually built on quite a bit of
experience at Apple with cloud services,

00:12:52.840 --> 00:12:55.570
and some of these you should
be very familiar with.

00:12:56.330 --> 00:12:58.480
So the first is the iTunes Store.

00:12:58.520 --> 00:13:02.360
The iTunes Store has distributed
15 billion songs all over

00:13:02.360 --> 00:13:04.180
the world on the internet.

00:13:04.240 --> 00:13:07.620
And if you think about it,
when iTunes Store was first created,

00:13:07.620 --> 00:13:09.820
it was at a time when
the browser was king.

00:13:09.820 --> 00:13:11.140
Everyone thought if you're
going to do e-commerce,

00:13:11.170 --> 00:13:12.900
you should use a browser.

00:13:12.960 --> 00:13:14.160
But Apple did it different.

00:13:14.200 --> 00:13:15.630
They said,
we're going to build an application

00:13:16.030 --> 00:13:19.590
that allows you to directly interact
with the data you want in the

00:13:19.600 --> 00:13:20.760
way that makes the most sense.

00:13:20.770 --> 00:13:23.280
And we're going to create a cloud
service called the iTunes Store that

00:13:23.290 --> 00:13:25.130
works with that application.

00:13:25.210 --> 00:13:27.750
This was done many, many years ago.

00:13:28.020 --> 00:13:30.900
The second application is the App Store.

00:13:30.920 --> 00:13:34.270
The App Store has distributed
14 billion of your applications

00:13:34.290 --> 00:13:35.980
over the past several years.

00:13:35.990 --> 00:13:40.680
And it's done in a way that really
is a seamless extension of iOS.

00:13:40.720 --> 00:13:44.630
It's that same seamless extension that
we want to bring to all of iCloud,

00:13:44.640 --> 00:13:46.460
so that it just works.

00:13:46.460 --> 00:13:51.500
Now between these two stores,
we have around 225 million user accounts.

00:13:51.520 --> 00:13:55.600
And those user accounts have credit
card information and purchase history.

00:13:55.850 --> 00:13:58.560
So our customers are trusting us
with some very critical information.

00:13:58.780 --> 00:14:01.940
And now we have the
Apple Push Notification Service.

00:14:01.970 --> 00:14:05.130
APNS is behind Push Email.

00:14:05.180 --> 00:14:08.820
It's also a developer API that we
actually released two years ago at the

00:14:08.820 --> 00:14:11.460
Worldwide Developers Conference in 2009.

00:14:11.580 --> 00:14:15.480
So it's given us some great experience
with delivering APIs that developers can

00:14:15.480 --> 00:14:18.000
use to interact with our cloud services.

00:14:18.010 --> 00:14:23.350
APS is fast, it's efficient,
and it's reliably distributed over 100

00:14:23.490 --> 00:14:25.430
billion notifications since it started.

00:14:25.760 --> 00:14:26.760
FaceTime.

00:14:26.760 --> 00:14:31.620
So FaceTime is this wonderful service
that connects people together wherever

00:14:31.620 --> 00:14:33.420
they are and whenever they want.

00:14:33.420 --> 00:14:36.350
And it does it in a way, again,
that the user doesn't even know.

00:14:36.390 --> 00:14:39.180
There's a cloud service behind it
that's basically matching up people.

00:14:39.180 --> 00:14:42.320
And it does this in a
way that just works.

00:14:42.420 --> 00:14:44.260
And finally, Game Center.

00:14:44.260 --> 00:14:48.830
So Game Center has been used by
50 million users around the world.

00:14:48.920 --> 00:14:53.120
These users want to immediately update
others with their gaming information.

00:14:53.120 --> 00:14:54.760
And they want it to just happen.

00:14:54.760 --> 00:14:55.720
Now.

00:14:55.820 --> 00:15:00.680
And an important point around these
services is also who's behind them.

00:15:00.680 --> 00:15:04.020
So the same people who
help build these services,

00:15:04.190 --> 00:15:06.700
many of them are the ones behind iCloud.

00:15:06.700 --> 00:15:08.550
So we have some great
engineering behind the service.

00:15:11.750 --> 00:15:14.830
Now, in addition to the technology,
when you're offering a cloud service,

00:15:14.930 --> 00:15:16.250
you have to have infrastructure.

00:15:16.390 --> 00:15:18.640
And Apple's scale really helps here.

00:15:18.680 --> 00:15:21.410
As you know, we have a new data center.

00:15:21.470 --> 00:15:22.500
It's out in Maiden.

00:15:22.630 --> 00:15:24.060
It's huge.

00:15:24.060 --> 00:15:26.140
It's our third facility.

00:15:26.190 --> 00:15:30.940
It represents over a $500
million investment in iCloud.

00:15:31.190 --> 00:15:34.270
And because of this investment,
it means that you get to take advantage

00:15:34.330 --> 00:15:38.860
of this infrastructure simply by
using the iCloud Storage APIs.

00:15:38.920 --> 00:15:42.540
Now, at the keynote yesterday,
Roger Rosner demonstrated the iWork

00:15:42.620 --> 00:15:47.000
applications on an iPhone and an iPad,
seamlessly sharing information

00:15:47.000 --> 00:15:48.640
between each other.

00:15:48.690 --> 00:15:52.380
Now, we spent a lot of time with Roger's
team talking about cloud storage

00:15:52.500 --> 00:15:56.140
and the best way that we could
provide this feature in applications.

00:15:56.200 --> 00:16:01.280
Now, the result of that work together was
basically the iCloud Storage APIs.

00:16:01.330 --> 00:16:06.170
And the iWork applications use the
exact same iCloud Storage APIs that

00:16:06.410 --> 00:16:08.860
your applications can use as well.

00:16:09.730 --> 00:16:12.490
So there's no reason for
you not to join this group.

00:16:12.730 --> 00:16:16.000
So we look forward to seeing the amazing
applications that you develop that take

00:16:16.000 --> 00:16:18.480
advantage of the iCloud Storage APIs.

00:16:18.680 --> 00:16:20.980
And with that,
I'm going to hand it back over to Dallas,

00:16:21.000 --> 00:16:23.230
and he's going to take you
through the APIs in more detail.

00:16:23.360 --> 00:16:24.250
Thank you.

00:16:24.310 --> 00:16:27.350
So as Eric mentioned,
the demo that you saw yesterday in the

00:16:27.350 --> 00:16:31.580
keynote was done by the iWork team,
and they built it directly on these APIs.

00:16:31.750 --> 00:16:34.000
It didn't have any private
interfaces available to them.

00:16:34.000 --> 00:16:37.340
They built it with the APIs that
we're going to be making available

00:16:37.460 --> 00:16:39.280
in iOS 5 and Mac OS X Lion.

00:16:39.410 --> 00:16:42.940
So if you were at Ali Ozer's
talk about what's new in Cocoa,

00:16:43.030 --> 00:16:46.680
he started talking about NS File Manager,
which is the first API that we've

00:16:46.680 --> 00:16:49.160
extended to support Cloud Storage.

00:16:49.210 --> 00:16:51.540
As I mentioned,
the way that Cloud Storage fundamentally

00:16:51.540 --> 00:16:54.420
works is you take the documents
that you want to sync,

00:16:54.460 --> 00:16:58.160
and you put them into
your app's iCloud sandbox.

00:16:58.190 --> 00:17:00.730
NS File Manager is how you do that.

00:17:01.900 --> 00:17:04.240
We're also going to be talking
about NS Metadata Query.

00:17:04.250 --> 00:17:08.260
If you're familiar with the
Spotlight APIs on Mac OS X,

00:17:08.270 --> 00:17:11.280
we're also making NS Metadata
Query available for iCloud

00:17:11.280 --> 00:17:14.390
Storage in particular,
which will allow your application

00:17:14.460 --> 00:17:17.530
to discover all of the files
that are available to it.

00:17:17.640 --> 00:17:21.000
We're also introducing a new
class in UI Document-- excuse me,

00:17:21.060 --> 00:17:25.390
a new class called UI Document in
Cocoa Touch that encapsulates all of

00:17:25.410 --> 00:17:32.580
the Cloud Storage APIs that you might
need for doing a UI kit-based document.

00:17:32.710 --> 00:17:34.680
In addition,
we've extended NS Document to

00:17:34.680 --> 00:17:36.840
also support cloud storage.

00:17:36.860 --> 00:17:40.240
And the vast majority of your
applications are going to be able to

00:17:40.240 --> 00:17:45.400
take advantage of these two classes
to participate in cloud storage.

00:17:45.550 --> 00:17:48.080
However,
we're also providing a glass of ice

00:17:48.080 --> 00:17:51.570
water for our Windows developers,
so they can participate

00:17:51.620 --> 00:17:53.330
in cloud storage as well.

00:17:53.440 --> 00:17:58.050
And we also have this key value data
store that we're introducing in the

00:17:58.050 --> 00:18:00.660
event that your application doesn't
need to sync entire documents,

00:18:00.680 --> 00:18:05.160
but it still wants to move simpler
key value information between devices.

00:18:05.160 --> 00:18:08.650
I would like to point out that
key value store is only available

00:18:08.660 --> 00:18:10.150
on iOS and Mac OS X line.

00:18:12.090 --> 00:18:15.020
So let's get into
NS File Manager a little bit.

00:18:15.240 --> 00:18:19.420
The first API is that it allows you to
move a file into the iCloud sandbox.

00:18:19.500 --> 00:18:22.310
So that's how you tell the
system that you intend to make

00:18:22.400 --> 00:18:24.060
this available to other devices.

00:18:24.220 --> 00:18:25.010
That's all you have to do.

00:18:25.170 --> 00:18:27.960
You just put it in that sandbox,
and the system will begin

00:18:27.960 --> 00:18:31.060
moving it up to iCloud,
and reflecting it down to the

00:18:31.100 --> 00:18:32.990
other devices on your behalf.

00:18:33.680 --> 00:18:35.940
In addition,
we're also going to talk about

00:18:36.020 --> 00:18:39.040
the NS Metadata Query APIs,
which will tell you about all

00:18:39.040 --> 00:18:40.310
of the files that are available.

00:18:40.440 --> 00:18:44.520
You can use NS File Manager to
determine if you've got a URL in hand,

00:18:44.560 --> 00:18:46.940
if it's currently a part of iCloud.

00:18:47.000 --> 00:18:50.630
It will also allow you to locate
the physical location of the iCloud

00:18:50.630 --> 00:18:53.460
sandbox for your application,
in case you need to do something

00:18:53.460 --> 00:18:57.400
a little bit more sophisticated
than just put this file in it.

00:18:58.260 --> 00:19:02.090
Another feature that we're introducing
with iCloud Storage is the ability

00:19:02.100 --> 00:19:04.770
to publish a URL for downloading.

00:19:04.910 --> 00:19:08.180
So if you've created a document,
and for example,

00:19:08.210 --> 00:19:11.920
you want to mail it as an
attachment to someone who is

00:19:12.080 --> 00:19:14.770
To another user,
what you can do is you can use

00:19:14.770 --> 00:19:17.590
the NS File Manager APIs to
publish that document.

00:19:17.590 --> 00:19:21.410
It will give you back a URL,
and then you can send that in an email.

00:19:21.410 --> 00:19:24.120
Then the person on the other
end can download that document

00:19:24.210 --> 00:19:25.780
in a web browser like Safari.

00:19:25.780 --> 00:19:28.850
One thing to note about the published
URLs is that they will expire

00:19:28.850 --> 00:19:31.820
after a certain amount of time,
so they're not permanent.

00:19:31.820 --> 00:19:36.490
We're also introducing NS Metadata Query
that provides an asynchronous discovery

00:19:36.490 --> 00:19:40.550
and notification API that allows your
applications to learn about all of

00:19:40.550 --> 00:19:43.740
the files that are available to it,
even if they're being

00:19:43.740 --> 00:19:45.590
created on another device.

00:19:46.010 --> 00:19:48.120
To do this,
we're introducing two new search

00:19:48.120 --> 00:19:51.330
scopes to NS Metadata Query.

00:19:51.390 --> 00:19:55.300
The first is NS Metadata
Query Local Document Scope.

00:19:55.450 --> 00:19:58.460
Say that three times fast.

00:19:58.460 --> 00:20:01.510
And what this does is,
it's a scope that will return all

00:20:01.510 --> 00:20:05.450
of the documents that are local to
your application on that device.

00:20:05.450 --> 00:20:09.210
So these are, in the case of an iOS app,
the documents that traditionally

00:20:09.210 --> 00:20:11.140
are inside of your local sandbox.

00:20:11.140 --> 00:20:16.570
But now you can get access to
all of them via the standard API.

00:20:18.510 --> 00:20:21.530
We're also introducing a second
scope called NS Metadata Query

00:20:21.630 --> 00:20:25.550
Ubiquitous Document Scope,
which will return the list of documents

00:20:25.640 --> 00:20:29.000
that are local to your application,
but also all of the other

00:20:29.000 --> 00:20:33.560
documents that might be on another
device that are known to iCloud.

00:20:35.170 --> 00:20:38.420
Once you receive all the
information from this query,

00:20:38.450 --> 00:20:41.060
you're going to get back a
list of NSMetadata items.

00:20:41.140 --> 00:20:44.090
And so we've extended the set of
attributes for NSMetadata item

00:20:44.160 --> 00:20:47.580
to help describe those files,
now that they're available to you.

00:20:47.660 --> 00:20:50.040
The first are a set of
standard file attributes,

00:20:50.080 --> 00:20:53.360
like its name,
its localized display name, its size,

00:20:53.410 --> 00:20:55.770
and its modification dates.

00:20:56.420 --> 00:20:59.480
But we're also going to be providing
a set of iCloud attributes as well.

00:20:59.670 --> 00:21:01.930
So these are things like--

00:21:02.290 --> 00:21:05.400
Is the file currently
being uploaded to iCloud,

00:21:05.470 --> 00:21:07.250
or is it being downloaded to your device?

00:21:07.260 --> 00:21:10.020
Percentage complete for the
amount of data that's currently

00:21:10.200 --> 00:21:11.710
made it up to the cloud or not.

00:21:11.760 --> 00:21:18.300
As well as if the file had a conflict
when it was being transferred to iCloud.

00:21:18.320 --> 00:21:21.820
So as I mentioned previously,
the system will go ahead and

00:21:21.820 --> 00:21:24.110
resolve conflicts automatically.

00:21:24.230 --> 00:21:27.000
And what I mean by that is that the
system is going to choose a winner.

00:21:27.800 --> 00:21:30.900
And NSMetadata query is going to
allow you to discover that the

00:21:30.980 --> 00:21:32.380
system went ahead and chose a winner.

00:21:32.380 --> 00:21:36.190
And we're going to talk about some
API that's also being introduced

00:21:36.210 --> 00:21:39.340
that then allows your application
to go and make a better decision

00:21:39.370 --> 00:21:42.460
on behalf of the user if the
system didn't quite get it right.

00:21:45.240 --> 00:21:47.340
I would like to point out that
these new scopes do not work

00:21:47.420 --> 00:21:48.960
with the more complex predicates.

00:21:49.050 --> 00:21:52.810
So if you're familiar with the
Spotlight APIs on Mac OS X,

00:21:53.100 --> 00:21:54.640
these are a little bit simpler.

00:21:54.740 --> 00:21:58.760
So UIDocument is a new class that we're
introducing in Cocoa Touch with iOS 5.

00:21:58.860 --> 00:22:01.600
And what it provides is a simple
asynchronous reading and writing

00:22:01.600 --> 00:22:03.480
model for your documents.

00:22:03.610 --> 00:22:07.630
So if you're writing an application
on iOS that is managing documents,

00:22:07.810 --> 00:22:10.420
you want to be using UIDocument.

00:22:10.540 --> 00:22:12.750
It provides a simple
autosaving mechanism.

00:22:12.920 --> 00:22:17.170
So the model on iOS is the user
doesn't have to go click a Save button.

00:22:17.360 --> 00:22:21.150
This same feature is also being
introduced in Mac OS X Lion.

00:22:21.240 --> 00:22:24.640
But by using UIDocument,
you get that for free.

00:22:24.710 --> 00:22:27.610
It also includes automatic
support for suspended apps.

00:22:27.730 --> 00:22:30.660
So if you're running on iOS and
your application is suspended,

00:22:30.660 --> 00:22:34.180
the user switches out,
or the system needed more resources,

00:22:34.390 --> 00:22:38.360
your documents are automatically going
to be saved by the UIDocument system.

00:22:38.410 --> 00:22:40.860
This also includes the new
Cocoa Document model that

00:22:40.860 --> 00:22:42.780
Ali started talking about in the web.

00:22:42.780 --> 00:22:44.420
So what's new in Cocoa Talk this morning?

00:22:44.450 --> 00:22:48.440
And by taking advantage of UIDocument,
you're also going to be taking

00:22:48.440 --> 00:22:50.920
advantage of iCloud storage support.

00:22:51.910 --> 00:22:55.560
On Mac OS X,
NS Document has also been extended to

00:22:55.560 --> 00:22:58.900
provide support for iCloud Storage.

00:22:59.660 --> 00:23:01.880
This includes a new
modernized document model.

00:23:01.920 --> 00:23:04.020
And if you were at
Craig's talk yesterday,

00:23:04.020 --> 00:23:08.060
he talked a little bit about
what we're building here.

00:23:08.080 --> 00:23:12.710
And in particular,
it's a document model that is making it

00:23:12.760 --> 00:23:18.470
easier for your applications to manage
concurrent access to the same document.

00:23:18.640 --> 00:23:21.290
So on the Mac,

00:23:22.390 --> 00:23:25.390
That might mean two applications that
are talking to the same document,

00:23:25.460 --> 00:23:29.180
but the exact same APIs are
what also allow two applications

00:23:29.200 --> 00:23:34.200
running on two different devices
to coordinate via iCloud Storage.

00:23:35.520 --> 00:23:40.420
If the case where NS Document isn't
exactly going to be the

00:23:40.420 --> 00:23:44.290
right thing for your app,
it sits on top of lower level APIs,

00:23:44.450 --> 00:23:46.400
the first of which is
NS File Coordinator.

00:23:46.410 --> 00:23:49.700
And NS File Coordinator allows your
application to coordinate with other

00:23:49.700 --> 00:23:51.670
applications and basically says,
"Hey,

00:23:51.670 --> 00:23:56.190
I've currently got this document loaded,
and I'm making changes to it."

00:23:56.370 --> 00:23:58.790
There's also the
NS File Presenter protocol,

00:23:58.790 --> 00:24:01.240
which is how your application
interacts with the system to say

00:24:01.300 --> 00:24:03.630
that I've loaded this document,
and I'm presenting its

00:24:03.750 --> 00:24:04.770
contents to the user.

00:24:04.780 --> 00:24:08.140
One of the things Craig mentioned
yesterday was the idea that

00:24:08.140 --> 00:24:11.630
with the new version support,
we can have multiple versions

00:24:11.630 --> 00:24:14.560
of the document on disk,
but when the user actually goes and

00:24:14.560 --> 00:24:17.400
clicks on it and drags it into mail,
we need to make sure that

00:24:17.400 --> 00:24:20.120
we have the latest version
being used as the attachment.

00:24:20.180 --> 00:24:22.830
And it's NS File Presenter,
which is how the system also

00:24:22.980 --> 00:24:24.590
communicates back with your app.

00:24:25.440 --> 00:24:27.880
So it helps you manage
concurrent access to a document.

00:24:27.900 --> 00:24:30.670
And lastly,
there's the NS File Version APIs,

00:24:30.720 --> 00:24:35.330
which in the context of iCloud Storage,
is how your application can get access

00:24:35.330 --> 00:24:39.250
to that other conflicted document
in the case where the system made

00:24:39.250 --> 00:24:43.190
a choice for conflict resolution,
and your application can make a

00:24:43.190 --> 00:24:45.820
better decision on behalf of the user.

00:24:45.820 --> 00:24:48.390
So it allows you to
manage multiple versions,

00:24:48.400 --> 00:24:50.190
as well as iCloud conflicts.

00:24:52.110 --> 00:24:56.000
As I mentioned,
we also have a Windows API available.

00:24:56.060 --> 00:25:00.430
What it will allow you to do is discover
the iCloud Sandbox on that platform,

00:25:00.580 --> 00:25:03.900
and receive notifications
when files are modified.

00:25:04.990 --> 00:25:06.920
Now,
there's an entire set of applications

00:25:06.980 --> 00:25:10.640
that we call Shoebox app,
and a good example of that is iPhoto.

00:25:10.740 --> 00:25:15.950
And this is because not every document is
a simple file or even a simple package.

00:25:16.240 --> 00:25:18.730
Instead,
what you might have is a database

00:25:18.900 --> 00:25:22.370
that indexes a wide set of
files on behalf of the user,

00:25:22.600 --> 00:25:26.460
and then presents that in an
understandable way in the UI.

00:25:27.530 --> 00:25:31.350
Now, most shoebox applications are
built using our core data APIs,

00:25:31.420 --> 00:25:34.560
and core data does take
advantage of iCloud Storage.

00:25:34.560 --> 00:25:38.600
So, if you're building an application
that uses a simple file,

00:25:38.730 --> 00:25:42.630
or a package, or it uses core data,
all of those can participate

00:25:42.720 --> 00:25:45.760
in iCloud Storage,
and your documents will move

00:25:45.760 --> 00:25:49.850
from an iOS device to a Mac,
and to a Windows device as well.

00:25:49.860 --> 00:25:51.470
At this point,
I'd like to talk a little bit

00:25:51.470 --> 00:25:53.610
more about the key value data
API that we're providing.

00:25:53.760 --> 00:25:58.040
This API is when you want to store
a small amount of information.

00:25:58.040 --> 00:26:01.520
So, for example,
if you have an application that tracks

00:26:01.520 --> 00:26:06.000
the set of stocks on behalf of a user,
or the cities they're interested in,

00:26:06.020 --> 00:26:07.710
and their weather app.

00:26:07.930 --> 00:26:11.710
or the pages that I read in a book,
this is the perfect API for doing that.

00:26:11.950 --> 00:26:14.980
It allows you to reflect an
application's behavior across

00:26:15.070 --> 00:26:17.970
all of the user's devices,
so that he doesn't have to

00:26:17.970 --> 00:26:19.630
keep entering in all of that.

00:26:20.480 --> 00:26:24.220
In particular, it's for storing a small
amount of information.

00:26:24.260 --> 00:26:26.350
So if you start shoving
lots of things in here,

00:26:26.350 --> 00:26:28.330
you're going to violate the quota.

00:26:28.900 --> 00:26:31.920
We're introducing a new API in
both iOS and Mac OS X that we call

00:26:31.980 --> 00:26:34.940
NS Ubiquitous Key Value Store.

00:26:35.090 --> 00:26:36.800
It stores simple plist values.

00:26:36.950 --> 00:26:41.690
So the standard objects that you would
serialize in a property list today,

00:26:41.760 --> 00:26:43.830
these are the types of values
that we put up in the store.

00:26:43.840 --> 00:26:46.000
Your own custom objects won't work.

00:26:46.150 --> 00:26:48.580
You'll have to serialize
them into an NSData,

00:26:48.580 --> 00:26:51.310
and then put them into
the key value store.

00:26:51.670 --> 00:26:54.200
We have a reserved quota per application.

00:26:54.380 --> 00:26:58.800
So iCloud Storage,
as they mentioned previously,

00:26:58.880 --> 00:27:02.840
iCloud Storage has a five gigabyte
quota that's free for the user,

00:27:02.840 --> 00:27:05.980
but it includes their mail,
their cloud backups,

00:27:06.130 --> 00:27:08.240
and all of their iCloud
Storage documents.

00:27:08.320 --> 00:27:13.990
NS Ubiquitous Key Value Store is a
separate quota that is just for your app.

00:27:15.280 --> 00:27:18.270
You'll receive change notifications
when specific keys and values

00:27:18.300 --> 00:27:20.830
change on another device.

00:27:21.060 --> 00:27:23.450
But it does not do any
conflict resolution.

00:27:23.480 --> 00:27:24.880
It's much, much simpler.

00:27:24.880 --> 00:27:28.110
Instead, the last change wins.

00:27:28.190 --> 00:27:33.280
So if you have your app on an iPhone,
an app on an iPad,

00:27:34.000 --> 00:27:37.770
If I set a value on my iPhone,
and then I set it on my iPad,

00:27:37.780 --> 00:27:41.340
the value set by the iPad is
what's the truth in iCloud.

00:27:42.870 --> 00:27:45.100
So I'd like to talk a little bit
about what this code might actually

00:27:45.100 --> 00:27:46.680
look like in your application.

00:27:46.690 --> 00:27:49.240
It's fairly simple,
and as Ali mentioned previously,

00:27:49.300 --> 00:27:53.520
if you've used NS user defaults before,
it's going to look pretty familiar.

00:27:53.530 --> 00:27:56.750
The first thing you'll do
is get your default store.

00:27:57.480 --> 00:28:00.190
And you will also register
for notifications from the

00:28:00.190 --> 00:28:01.420
device when something changes.

00:28:01.510 --> 00:28:04.300
And this is pretty
standard notification API.

00:28:04.300 --> 00:28:07.940
Once you've gotten your store,
you then tell the system to synchronize,

00:28:07.940 --> 00:28:11.860
and what it will do is synchronize any
changes you've made with the server.

00:28:11.860 --> 00:28:15.830
Now, if you call it for the first time,
it's going to bring down the key value

00:28:15.830 --> 00:28:17.990
data that is currently up in iCloud.

00:28:18.000 --> 00:28:21.710
So in the case where you actually
want to set stuff in key value data,

00:28:21.710 --> 00:28:22.290
that's it.

00:28:22.510 --> 00:28:24.010
That's all you have to do.

00:28:24.320 --> 00:28:28.220
You set specific property list
type values in your store.

00:28:28.220 --> 00:28:32.060
You also want to take those changes
and write them out on a disk.

00:28:32.100 --> 00:28:36.310
And then you call synchronize,
and they'll be moved up into the cloud.

00:28:36.320 --> 00:28:39.550
As I mentioned,
the system does not support conflicts,

00:28:39.550 --> 00:28:43.540
and so whoever made a change to a
particular key last is the winner.

00:28:46.430 --> 00:28:50.050
Now, when you receive that notification,
one of the pieces of information

00:28:50.120 --> 00:28:53.320
we're going to give you is the reason
that you got that notification.

00:28:53.320 --> 00:28:55.340
There can be a few different ones.

00:28:55.340 --> 00:28:57.630
The first is that this
is the initial download,

00:28:57.640 --> 00:29:00.390
so your app is launched on a
new device for the first time,

00:29:00.390 --> 00:29:03.960
and you're going to get a notification
that we're bringing down all the key

00:29:03.960 --> 00:29:06.220
value data associated with your app.

00:29:07.080 --> 00:29:09.740
You're also going to get a
notification if a particular key

00:29:09.740 --> 00:29:13.110
was changed on another device,
and this is also how the system's going

00:29:13.110 --> 00:29:15.900
to tell you if you violated the quota,
if you've just put too

00:29:15.900 --> 00:29:16.960
much information into it.

00:29:17.040 --> 00:29:19.940
Once you get your notification,
you determine the reason

00:29:19.940 --> 00:29:22.540
that we called it,
we're going to give you back a list

00:29:22.540 --> 00:29:25.250
of the keys that actually changed,
and at that point,

00:29:25.250 --> 00:29:28.260
you can go look up their values
with the key value data store,

00:29:28.260 --> 00:29:30.950
and you've moved that
data between two devices.

00:29:33.070 --> 00:29:37.260
So we've talked about the APIs that
you can take advantage of to

00:29:37.260 --> 00:29:39.400
add iCloud Storage to your app.

00:29:39.760 --> 00:29:42.240
And at the end of the session,
I'm going to show you a bunch

00:29:42.240 --> 00:29:44.630
of the more in-depth talks
about each API you can go to,

00:29:44.630 --> 00:29:46.160
and there's also a ton of labs.

00:29:46.210 --> 00:29:48.610
But what do you have
to do to get started?

00:29:48.610 --> 00:29:52.680
The first thing you need to do is update
your provisioning profile with Xcode 4.

00:29:52.680 --> 00:29:55.590
And what you're going to need to
do is add two new entitlements

00:29:55.590 --> 00:29:58.530
to your application to indicate
to the system that you want to

00:29:58.530 --> 00:30:00.480
participate in iCloud Storage.

00:30:01.220 --> 00:30:04.150
This first one,
Ubiquity Container Identifiers,

00:30:04.210 --> 00:30:07.050
is how you indicate to the
system that you want to put

00:30:07.050 --> 00:30:09.300
documents into an iCloud sandbox.

00:30:09.300 --> 00:30:13.870
And the second one is if you want
to use the Key Values Store as well.

00:30:16.670 --> 00:30:21.920
So you may be in a position where
you don't just want to sync your

00:30:22.010 --> 00:30:23.920
document with one application.

00:30:23.940 --> 00:30:26.920
You might have a Lite and
a Pro version of your app,

00:30:26.950 --> 00:30:28.980
and iCloud Storage will support that.

00:30:29.230 --> 00:30:33.350
So if a user has on one device
the Lite version of your app and

00:30:33.460 --> 00:30:36.000
the Pro version on a different,
they're going to be able to

00:30:36.150 --> 00:30:38.950
share documents with each other,
even if they have different

00:30:39.040 --> 00:30:40.360
bundle identifiers.

00:30:40.520 --> 00:30:43.280
You might also have a suite of apps
that work together that understand

00:30:43.280 --> 00:30:48.210
each other's document formats and can
work on those documents concurrently.

00:30:48.650 --> 00:30:51.440
And the way we allow you to do
this is with that first container

00:30:51.440 --> 00:30:53.260
entitlement that I talked about.

00:30:53.310 --> 00:30:57.190
This is how you're going to be able
to specify that I want this set of

00:30:57.190 --> 00:31:01.200
apps to be able to access each other's
files on all of the user's devices.

00:31:01.200 --> 00:31:05.320
And if you've adopted NS File Manager,
and you've adopted NS Metadata Query,

00:31:05.320 --> 00:31:08.060
you're going to get all
of that support for free.

00:31:08.060 --> 00:31:12.110
You don't have to do anything new,
in addition to the previous API,

00:31:12.110 --> 00:31:16.330
to take advantage of this between
multiple versions of your apps.

00:31:17.010 --> 00:31:21.960
Also, because you might have a
Lite and a Pro version,

00:31:21.960 --> 00:31:27.220
you can use iCloud Storage to manage
how the quota is displayed to the user.

00:31:27.220 --> 00:31:29.880
I'll talk about the quota in a moment,
but in particular,

00:31:29.880 --> 00:31:32.210
you're going to be able
to manage the display set,

00:31:32.300 --> 00:31:36.460
so you can give a unified user experience
to the user when they're trying to figure

00:31:36.470 --> 00:31:38.760
out what documents are taking up space.

00:31:38.760 --> 00:31:41.310
So in particular,
with regards to the quota,

00:31:41.310 --> 00:31:44.860
the user gets five gigabytes free,
and they can manage their

00:31:44.970 --> 00:31:47.490
quota through settings or
system preferences on the Mac.

00:31:47.560 --> 00:31:50.060
So what they're going to
see is they're going to see,

00:31:50.060 --> 00:31:53.850
for example, their cloud backups,
but then for each application that's

00:31:53.850 --> 00:31:58.490
participating in iCloud Storage,
they can then drill into it,

00:31:59.330 --> 00:32:01.500
and look at their individual documents.

00:32:01.510 --> 00:32:04.140
As I mentioned,
the quota is shared across your mail,

00:32:04.270 --> 00:32:08.240
your cloud backups,
and your iCloud Storage documents.

00:32:08.280 --> 00:32:11.490
And the individual user can
go in and delete a specific

00:32:11.550 --> 00:32:13.800
document if he wants to.

00:32:13.820 --> 00:32:17.790
He can also delete all of the
data associated with a document.

00:32:18.920 --> 00:32:21.840
So we've talked about the
APIs that are available to you.

00:32:21.840 --> 00:32:24.460
We've also talked about what you
have to do to get up and running.

00:32:24.500 --> 00:32:27.820
There are some things we'd like
you to consider if you add iCloud

00:32:27.820 --> 00:32:30.120
Storage to your application.

00:32:30.340 --> 00:32:32.980
In particular,
avoid saving your document if

00:32:32.980 --> 00:32:35.040
nothing has actually changed.

00:32:35.090 --> 00:32:38.190
Every time you modify a
file in the iCloud sandbox,

00:32:38.200 --> 00:32:40.160
the system is going to do work.

00:32:40.260 --> 00:32:42.200
It's going to determine
what changes have been made,

00:32:42.200 --> 00:32:44.200
and it's going to want to
move them up to iCloud.

00:32:44.200 --> 00:32:47.760
So if there's not any actual
substantial change to the document

00:32:47.870 --> 00:32:51.320
from the point of view of the user,
then you probably don't need

00:32:51.320 --> 00:32:55.030
to be making any changes to the
actual files in that sandbox.

00:32:56.080 --> 00:32:58.600
Also,
avoid publishing private information.

00:32:58.720 --> 00:33:03.240
For example, with the publishing
API that we're providing,

00:33:03.270 --> 00:33:05.800
what you don't want to
do is surprise your user.

00:33:05.930 --> 00:33:08.360
For example, if you have undue
stacks in your document,

00:33:08.510 --> 00:33:12.350
what you might be doing is keeping
a history of all of the edits that

00:33:12.360 --> 00:33:16.760
the user has made to that document,
and that information itself is within

00:33:16.930 --> 00:33:19.350
the files being moved up to iCloud.

00:33:20.110 --> 00:33:22.950
What this undo stack actually
represents are the set of decisions

00:33:22.960 --> 00:33:25.200
that the user has made about his data.

00:33:25.200 --> 00:33:28.090
He's decided the specific things
that he doesn't want in the document.

00:33:28.090 --> 00:33:30.430
But if you've saved that
in the document itself,

00:33:30.430 --> 00:33:32.980
and then he's published it, well,
now it's been made

00:33:32.980 --> 00:33:36.310
available to someone else,
and he might not have intended that.

00:33:36.420 --> 00:33:38.660
So that's something you want
to keep in mind when you're

00:33:38.660 --> 00:33:40.150
building your applications.

00:33:40.160 --> 00:33:41.750
I'm going to go ahead and show
you a little bit of a demo.

00:33:43.060 --> 00:33:45.820
In addition,
none of the APIs that we discussed

00:33:45.820 --> 00:33:49.360
today are appropriate for storing
passwords or other credentials

00:33:49.430 --> 00:33:53.500
that your application might use to
communicate with another service.

00:33:53.530 --> 00:33:56.110
If you are dealing with passcodes
or you are dealing with credentials,

00:33:56.120 --> 00:33:57.920
you should be using the Keychain API.

00:33:58.110 --> 00:34:00.700
And there's a session later this
week that will go into greater

00:34:01.380 --> 00:34:06.160
detail about how to use that and
our data protection APIs on iOS.

00:34:07.070 --> 00:34:11.060
There's an internet maxim that talks
about being conservative in what you do,

00:34:11.070 --> 00:34:12.700
and liberal in what you accept.

00:34:12.780 --> 00:34:16.550
One of the great things about the
App Store is that it makes it very

00:34:16.550 --> 00:34:20.120
easy for developers to make new
versions of their apps available.

00:34:20.120 --> 00:34:22.380
The user can update,
the system takes care of all of

00:34:22.380 --> 00:34:24.160
that infrastructure on your behalf.

00:34:24.220 --> 00:34:27.490
But what this might mean
is that your user has one

00:34:27.490 --> 00:34:31.080
version of an app on his phone,
and a different version on his Mac,

00:34:31.160 --> 00:34:33.630
or a different version on his iPad,
and they might have

00:34:33.630 --> 00:34:35.340
different document formats.

00:34:35.980 --> 00:34:38.460
You might have updated the version,
you might be writing things

00:34:38.510 --> 00:34:40.330
out in a different way,
and you're going to need

00:34:40.330 --> 00:34:42.950
to be prepared for that,
because you might see a document

00:34:43.150 --> 00:34:46.550
in the latest version of your app,
that was actually created

00:34:46.550 --> 00:34:47.780
by an older version.

00:34:47.820 --> 00:34:51.890
And you need to be prepared
for what that might mean.

00:34:52.190 --> 00:34:55.770
So you want to respect other file
formats in your version in the apps

00:34:55.900 --> 00:34:58.140
that are running on the user's device.

00:34:58.310 --> 00:35:00.760
For example,
with regards to the file formats,

00:35:00.770 --> 00:35:06.010
your document might be sorting something
from A to Z in your newest version.

00:35:06.220 --> 00:35:10.430
But the previous version of your
application actually stored it in Z to A.

00:35:10.640 --> 00:35:13.460
So if you modify that document,
and you write it back out

00:35:13.460 --> 00:35:15.770
in one sorting format,
the document then moves to

00:35:15.770 --> 00:35:17.380
the device that older version.

00:35:17.390 --> 00:35:20.360
It might then turn around and
write it back out in Z to A.

00:35:20.680 --> 00:35:24.990
And now you're ping-ponging data
back and forth between those devices.

00:35:25.290 --> 00:35:28.330
Also, if your application is
generating cached data,

00:35:28.330 --> 00:35:33.050
this isn't the type of thing you need
to be moving around between iCloud.

00:35:33.220 --> 00:35:36.470
So if your application can
auto-generate it on one app,

00:35:36.470 --> 00:35:39.850
it can auto-generate it on
the other device as well.

00:35:40.890 --> 00:35:44.440
Also, use the Key Value Data Store when
it's appropriate for your application.

00:35:44.440 --> 00:35:46.650
If you don't need to be putting
things in large documents,

00:35:46.670 --> 00:35:49.250
you just need to be syncing
a small amount of information

00:35:49.250 --> 00:35:51.390
between your devices,
Key Value Data Store is

00:35:51.390 --> 00:35:52.660
the API you want to use.

00:35:54.450 --> 00:35:57.710
So to recap what we've
talked about today,

00:35:57.800 --> 00:36:01.090
we talked about the iCloud
Storage feature and the problems

00:36:01.100 --> 00:36:04.060
that we're trying to solve
on behalf of our developers.

00:36:04.120 --> 00:36:07.110
In particular, let the operating system
move it through for you.

00:36:07.170 --> 00:36:11.130
The OS on each device and the
iCloud service have taken all the

00:36:11.130 --> 00:36:15.430
difficult work of building all of
the infrastructure and dealing with

00:36:15.780 --> 00:36:20.340
all of the protocols for moving data,
and we'll move it for you.

00:36:20.880 --> 00:36:25.460
It will be available on iOS, Lion,
and Windows later this year.

00:36:25.510 --> 00:36:28.290
In particular,
we went into the iCloud Storage APIs that

00:36:28.370 --> 00:36:32.520
you can use for taking advantage
of iCloud Storage in your app.

00:36:32.740 --> 00:36:36.800
We talked about the new UI Document class
that's being introduced in Cocoa Touch,

00:36:36.860 --> 00:36:40.270
as well as the extensions
we've made to NS Document.

00:36:40.420 --> 00:36:43.020
Again,
for the vast majority of your apps,

00:36:43.130 --> 00:36:46.770
these are the two classes that
all you're going to need to use

00:36:46.770 --> 00:36:48.950
to take advantage of iCloud.

00:36:49.320 --> 00:36:51.900
That said,
if you need to do more specific

00:36:51.900 --> 00:36:55.530
and more detailed work,
there's also the File Coordinator,

00:36:55.530 --> 00:36:59.690
Presenter, and Version APIs for
managing your stuff directly.

00:37:00.020 --> 00:37:03.240
And if you were building a shoebox
application and you used core data,

00:37:03.250 --> 00:37:06.710
you're also going to be able to
take advantage of iCloud Storage.

00:37:06.950 --> 00:37:09.080
And lastly,
we talked about the key value data store,

00:37:09.090 --> 00:37:11.990
and how you can sync small
amounts of information.

00:37:12.290 --> 00:37:15.130
So we have a number of sessions
later this week that are going to go

00:37:15.230 --> 00:37:18.800
into greater detail on each of the
APIs that I've talked about today.

00:37:18.830 --> 00:37:21.850
There's autosave inversions
in Mac OS X Lion.

00:37:22.200 --> 00:37:26.330
That's going to talk more about the
NS document model that we're introducing.

00:37:26.610 --> 00:37:29.820
There's also a What's New in
Core Data on iOS talk,

00:37:29.870 --> 00:37:31.840
that if you are building
a sandbox application,

00:37:31.840 --> 00:37:34.120
you definitely want to go to this talk.

00:37:34.140 --> 00:37:36.980
There's taking advantage
of file coordination,

00:37:37.000 --> 00:37:40.100
as well as storing documents
in iCloud using iOS 5.

00:37:40.160 --> 00:37:45.020
That's going to go into a lot of
detail about UI document itself.

00:37:45.180 --> 00:37:47.350
As I mentioned,
none of the APIs we've discussed

00:37:47.460 --> 00:37:50.140
today are appropriate for things
like passwords and credentials.

00:37:50.180 --> 00:37:52.380
But if you are dealing with
that type of information,

00:37:52.470 --> 00:37:55.660
you should go to the Securing
Application Data talk.

00:37:55.660 --> 00:37:58.320
And there will be a repeat of
the What's New in Core Data talk

00:37:58.320 --> 00:38:00.630
on Mac OS X for the Mac,
not for iOS.

00:38:00.820 --> 00:38:01.480
All right?

00:38:01.780 --> 00:38:04.070
Thank you very much for your time,
and I hope you have a great time

00:38:04.100 --> 00:38:05.320
at the conference this week.