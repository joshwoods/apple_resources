WEBVTT

00:00:10.320 --> 00:00:12.200
Good morning, everyone.

00:00:12.290 --> 00:00:13.200
My name is James Craig.

00:00:13.270 --> 00:00:16.030
I'm a member of the
Apple accessibility team.

00:00:16.100 --> 00:00:18.100
Did you guys enjoy Spearhead last night?

00:00:18.350 --> 00:00:20.200
Anybody go to the party?

00:00:20.200 --> 00:00:20.720
Woo!

00:00:20.820 --> 00:00:22.990
Thanks for showing up this morning.

00:00:23.630 --> 00:00:26.850
I have been a member of,
or I've been working in the accessibility

00:00:26.850 --> 00:00:30.500
field for over 10 years now,
and I'm really excited that I get to

00:00:30.500 --> 00:00:32.470
share some of this stuff with you today.

00:00:32.510 --> 00:00:36.690
So just by a show of hands,
who here thinks they know what

00:00:36.690 --> 00:00:39.020
I mean by the term accessibility?

00:00:39.580 --> 00:00:40.100
Most of you?

00:00:40.100 --> 00:00:40.540
Okay, cool.

00:00:40.750 --> 00:00:41.340
Good.

00:00:41.400 --> 00:00:42.560
We're going to be covering
a lot of things today.

00:00:42.810 --> 00:00:46.860
The first thing is that I bet a
lot of you people are here because

00:00:46.860 --> 00:00:49.580
you've heard that you need to
make your applications compliant,

00:00:49.610 --> 00:00:52.640
web applications or iOS applications,
and you're not even really

00:00:52.640 --> 00:00:53.860
sure what that means.

00:00:53.860 --> 00:00:58.040
And so we're going to cover how to
test your applications using some of

00:00:58.050 --> 00:01:00.130
the built-in assistive technology.

00:01:00.130 --> 00:01:05.010
But compliance is not really
what I mean by accessibility.

00:01:05.130 --> 00:01:09.570
Some others of you are probably
here because you're developers,

00:01:09.570 --> 00:01:14.210
of course, it's a developer conference,
and your mind automatically goes to

00:01:14.210 --> 00:01:15.620
the code when you hear accessibility.

00:01:15.620 --> 00:01:18.350
You think, "Oh, are my elements labeled?

00:01:18.350 --> 00:01:21.660
Have I overridden the right
methods?" And that's great.

00:01:21.660 --> 00:01:24.640
We're going to cover some
techniques using... HTML,

00:01:24.640 --> 00:01:30.250
CSS, JavaScript, ARIA to make your
applications more accessible.

00:01:30.330 --> 00:01:33.060
But that's only part of
what accessibility is about.

00:01:33.360 --> 00:01:38.880
And some other of you here probably
heard that automation plays a part,

00:01:38.900 --> 00:01:40.540
or accessibility plays
a part in automation,

00:01:40.540 --> 00:01:42.520
and so you want to be able
to automate your apps.

00:01:42.650 --> 00:01:43.210
And that's great.

00:01:43.210 --> 00:01:45.350
That's definitely not what
accessibility is about,

00:01:45.350 --> 00:01:45.820
though.

00:01:45.870 --> 00:01:48.080
So the one thing that I want
you to remember throughout

00:01:48.180 --> 00:01:49.890
the whole presentation,
even though we're going

00:01:49.890 --> 00:01:51.090
to be talking about code,
even though we're going

00:01:51.090 --> 00:01:53.300
to be talking about tools,
is that accessibility is

00:01:53.300 --> 00:01:53.820
not just about the code.

00:01:53.820 --> 00:01:56.380
Accessibility is first
and foremost about people,

00:01:56.460 --> 00:02:01.620
real people with real needs,
and these are users of your applications.

00:02:01.620 --> 00:02:05.160
So some of them may be using a computing
device for the first time in their life.

00:02:05.290 --> 00:02:08.540
Maybe it's your father,
maybe it's your grandfather, mother,

00:02:08.640 --> 00:02:12.290
and maybe they can't
see the screen so well.

00:02:12.610 --> 00:02:18.230
Some people just want to use the same
games and same learning devices that

00:02:18.550 --> 00:02:21.390
their counterparts in school are using.

00:02:22.170 --> 00:02:26.740
Some of them may be attending
college and need to watch a lecture,

00:02:26.750 --> 00:02:30.480
even if that means they need to watch
the lecture with the captions turned on.

00:02:31.440 --> 00:02:35.400
And still others just want to use
their devices for the same thing all

00:02:35.400 --> 00:02:38.670
of the rest of us use our devices for,
even if they don't have all of

00:02:38.710 --> 00:02:40.670
the same abilities that we all do.

00:02:42.030 --> 00:02:43.730
And we're not talking
about small numbers either.

00:02:43.810 --> 00:02:47.020
Just in the United States alone,
over 50 million

00:02:47.090 --> 00:02:49.840
Americans have a disability.

00:02:49.880 --> 00:02:52.530
A lot of you probably think you
don't know anyone with a disability,

00:02:52.680 --> 00:02:56.030
but one of the most common
ones is colorblindness.

00:02:56.160 --> 00:02:59.830
It affects 1 in 12 males.

00:02:59.930 --> 00:03:01.870
So if you look around,
that means there's probably quite

00:03:01.950 --> 00:03:05.520
a few people in this room that
are affected by colorblindness.

00:03:05.530 --> 00:03:08.640
Out of that 50 million,
10 million have a severe

00:03:08.870 --> 00:03:10.190
visual impairment.

00:03:10.190 --> 00:03:12.550
I'm not talking about
people that wear glasses.

00:03:12.680 --> 00:03:18.550
I mean people who are usually
blind and legally blind.

00:03:18.690 --> 00:03:23.070
And out of that group of people,
the ones that need to use screen

00:03:23.150 --> 00:03:25.960
readers that speak what's on the screen,

00:03:26.370 --> 00:03:29.860
The money of those are very tech savvy,
and they're not just tech savvy

00:03:29.860 --> 00:03:32.030
with their desktop computers,
they're tech savvy with

00:03:32.100 --> 00:03:33.120
their mobile devices as well.

00:03:33.180 --> 00:03:37.380
This is a recent screen
reader survey from WebAIM,

00:03:37.410 --> 00:03:39.500
blind users of mobile devices.

00:03:39.540 --> 00:03:42.140
A full two-thirds of them use a
screen reader on their mobile devices,

00:03:42.140 --> 00:03:47.270
so this is all smartphones,
and iOS is one of the more

00:03:47.270 --> 00:03:50.330
popular screen readers.

00:03:50.750 --> 00:03:54.840
And so that's why I'd like to talk to
you about accessibility on iOS today.

00:03:55.070 --> 00:03:59.380
VoiceOver was announced
two years ago with iOS 3.

00:03:59.380 --> 00:04:04.150
We've got some other features as well,
but this one in particular has been

00:04:04.150 --> 00:04:06.180
lauded by the disability groups.

00:04:06.180 --> 00:04:11.670
We've got quotes from advocacy groups
like the RNIB that says Apple has

00:04:11.760 --> 00:04:14.680
set the standard in recent years.

00:04:15.210 --> 00:04:20.500
We also were presented with
this award recently by the NFB,

00:04:20.600 --> 00:04:23.610
which is a disability group
from the United States,

00:04:23.680 --> 00:04:25.530
Jacob Bolitan Award.

00:04:26.230 --> 00:04:31.600
And while the press is great,
that's not the reason that blind users

00:04:31.610 --> 00:04:34.480
and visually impaired users use iOS.

00:04:34.550 --> 00:04:39.480
VoiceOver allows blind users to use iOS.

00:04:39.640 --> 00:04:44.100
Blind users can use iOS
because of VoiceOver,

00:04:44.150 --> 00:04:46.380
but that's not the reason they use iOS.

00:04:46.530 --> 00:04:51.300
The reason they use iOS is for the
same reason that all the rest of us do.

00:04:51.310 --> 00:04:53.910
It's because of all the things
that you can do with it.

00:04:54.160 --> 00:04:59.590
Make phone calls, watch videos,
listen to audio, check your email, tweet,

00:04:59.590 --> 00:05:00.310
etc.

00:05:00.420 --> 00:05:04.690
Use all of these fantastic apps,
including your app.

00:05:04.910 --> 00:05:08.450
And if you haven't gone, you know,
a couple extra steps,

00:05:08.450 --> 00:05:12.700
and sometimes these users can't use
your app even though they want to,

00:05:12.770 --> 00:05:15.170
especially if you have a popular app.

00:05:15.210 --> 00:05:17.500
They've heard about it,
they know what it does,

00:05:17.500 --> 00:05:20.190
they want to be able to use
it just like everyone else.

00:05:20.840 --> 00:05:27.420
So the first step to figuring out how
your application works with VoiceOver,

00:05:27.430 --> 00:05:29.890
with the accessibility settings,
is to figure out what those

00:05:29.890 --> 00:05:32.030
accessibility settings are,
how to use them.

00:05:32.030 --> 00:05:34.440
Then we can walk through
and test your application.

00:05:34.440 --> 00:05:37.320
So just to talk about some
of the new features in iOS 5,

00:05:37.320 --> 00:05:39.740
we're really excited about this release.

00:05:39.740 --> 00:05:44.530
It's probably the biggest release for
Apple accessibility since the original

00:05:44.530 --> 00:05:47.270
accessibility release in iOS 3.0.

00:05:47.960 --> 00:05:49.710
We've got VoiceOver,
which is a screen reader

00:05:49.710 --> 00:05:50.870
for the visually impaired.

00:05:50.970 --> 00:05:54.910
I'm going to demo that one in a minute,
but I'll go through the other ones.

00:05:55.140 --> 00:05:58.340
Full screen zoom allows users
to use three finger gestures

00:05:58.340 --> 00:06:00.080
to zoom in on any app.

00:06:00.170 --> 00:06:03.190
You don't have to do anything
special in your app for this one.

00:06:03.650 --> 00:06:07.980
Large text allows users to bump
up the font size in certain system

00:06:07.980 --> 00:06:10.280
apps like Calendar and Mail.

00:06:11.390 --> 00:06:13.090
White on black reverses the video.

00:06:13.090 --> 00:06:15.780
Sometimes this helps even with
some forms of color blindness.

00:06:15.780 --> 00:06:17.130
If there's something
you're not sure about,

00:06:17.140 --> 00:06:17.940
you can flip the video.

00:06:17.940 --> 00:06:23.320
It changes it to a
different color spectrum.

00:06:23.510 --> 00:06:26.660
Speak Selection is new in iOS 5.

00:06:26.760 --> 00:06:28.880
For those of you who don't need
a full-fledged screen reader,

00:06:28.880 --> 00:06:31.550
you can turn this on,
and anywhere you can select

00:06:31.550 --> 00:06:33.840
text where you get the cut,
copy, paste menu,

00:06:33.840 --> 00:06:37.960
you also get another option that says
Speak and Pause if it's already speaking.

00:06:39.070 --> 00:06:42.410
Speak/AutoText allows you to hear
auto corrections and capitalizations.

00:06:42.520 --> 00:06:46.080
You can see that the first full
screen of these settings is

00:06:46.090 --> 00:06:48.210
for visually impaired users.

00:06:49.140 --> 00:06:50.840
We've got a few more sections.

00:06:50.860 --> 00:06:55.410
Hearing impaired users now can
have custom vibrations set to

00:06:55.410 --> 00:06:59.540
a particular contact in their
address book or to all contacts.

00:06:59.540 --> 00:07:02.710
They can also tap out their own patterns.

00:07:02.730 --> 00:07:06.690
You may have read about this particular
setting on the rumor vlogs this week.

00:07:07.630 --> 00:07:10.580
Also new in iOS 5 is
LED flash for alerts.

00:07:10.580 --> 00:07:13.780
So anytime the phone is locked,
any of the new phones that

00:07:13.780 --> 00:07:17.270
have the LED flash on the back,
it'll kick off for anything

00:07:17.270 --> 00:07:19.010
that triggers an alert.

00:07:19.260 --> 00:07:26.110
Mono audio or custom balance for
users that have hearing impairment

00:07:26.110 --> 00:07:26.110
in maybe one ear but not the other.

00:07:26.820 --> 00:07:31.630
We've also got another section
for users with motor disabilities.

00:07:31.710 --> 00:07:34.420
So for example,
if you don't have full dexterity and

00:07:34.420 --> 00:07:37.650
you have trouble using a touchscreen,
you can use this thing

00:07:37.650 --> 00:07:38.760
called Assistive Touch.

00:07:38.820 --> 00:07:43.500
Did anybody see the demo yesterday in
the other accessibility presentation?

00:07:44.100 --> 00:07:47.620
So you can pair it with a head
switch or a joystick and control

00:07:47.620 --> 00:07:51.010
the device even though you can't
actually touch the touchscreen.

00:07:51.200 --> 00:07:54.380
And for those users,
we can also automatically route

00:07:54.470 --> 00:07:58.200
the incoming calls to your
preferred choice of output.

00:07:58.200 --> 00:08:03.380
So I'd like to demo.

00:08:03.380 --> 00:08:09.370
So I'm going to go to the settings.

00:08:16.600 --> 00:08:21.600
Accessibility, oops, excuse me.

00:08:21.600 --> 00:08:23.260
So we can see we've got voice over here.

00:08:23.320 --> 00:08:25.870
I could turn it on from this section.

00:08:26.190 --> 00:08:27.560
For those of you who are
just learning VoiceOver,

00:08:27.560 --> 00:08:28.960
I'd recommend something else, though.

00:08:29.060 --> 00:08:31.240
I'm going to go back up to
the accessibility settings,

00:08:31.240 --> 00:08:33.020
and go down here to triple-click home.

00:08:33.100 --> 00:08:35.500
Can you see the bottom of the screen?

00:08:39.400 --> 00:08:41.700
It allows you to toggle
voiceover on and off using

00:08:41.700 --> 00:08:43.400
three clicks of the home button.

00:08:43.400 --> 00:08:49.720
So I'm going to hit the home button
once to go back to the main screen.

00:08:49.720 --> 00:08:54.910
Now I'll hit the home button three
times in a row to turn on voiceover.

00:08:56.930 --> 00:09:01.090
So one of the ways that,
or the way that a blind user is going

00:09:01.090 --> 00:09:05.910
to use this device is they need to be
able to touch the screen and be able to

00:09:05.910 --> 00:09:09.270
explore what's there without worrying
about accidentally activating something.

00:09:09.410 --> 00:09:12.500
So if you were to touch one of
these icons and VoiceOver wasn't on,

00:09:12.570 --> 00:09:14.700
it would just automatically activate.

00:09:14.730 --> 00:09:16.640
So now I can touch
anywhere on the screen,

00:09:16.650 --> 00:09:17.950
it's not going to activate.

00:09:18.800 --> 00:09:24.840
Settings Newsstand
App Store Video Notes Double tap to open.

00:09:24.890 --> 00:09:28.670
And you can hear what's under my finger
as well as a hint on how to activate it.

00:09:28.800 --> 00:09:31.300
I can also use some gestures,
so I'm going to use a single

00:09:31.310 --> 00:09:33.300
finger swipe to the left and right.

00:09:33.300 --> 00:09:39.150
Reminders Maps YouTube And back
to the previous items.

00:09:39.180 --> 00:09:42.630
Maps Reminders Notes Double tap to open.

00:09:42.630 --> 00:09:46.890
There's also a few custom gestures,
so I can use three fingers to scroll.

00:09:47.150 --> 00:09:48.240
Search iPad.

00:09:48.240 --> 00:09:48.830
Search field.

00:09:48.930 --> 00:09:50.220
Is editing.

00:09:50.220 --> 00:09:50.730
Home.

00:09:50.800 --> 00:09:51.790
Page 1 of 1.

00:09:51.880 --> 00:09:52.740
Messages.

00:09:52.810 --> 00:09:56.010
There's also a special gesture
that I'd like to show you that

00:09:56.110 --> 00:09:58.960
is called the screen curtain,
and it uses three fingers

00:09:58.960 --> 00:10:00.330
with a triple tap.

00:10:00.410 --> 00:10:02.260
Screen curtain on.

00:10:02.280 --> 00:10:04.880
So now the screen curtain,
or the screen is blacked out completely,

00:10:04.930 --> 00:10:05.840
but I can still use it.

00:10:05.960 --> 00:10:06.730
Settings.

00:10:06.850 --> 00:10:07.650
Photo booth.

00:10:07.770 --> 00:10:08.980
Settings.

00:10:09.120 --> 00:10:10.600
Double tap to open.

00:10:10.670 --> 00:10:12.340
I'll turn it back off.

00:10:12.390 --> 00:10:13.500
Screen curtain off.

00:10:13.550 --> 00:10:16.190
That's a nice feature for
blind users that don't actually

00:10:16.280 --> 00:10:17.870
need to see the screen at all.

00:10:17.960 --> 00:10:21.200
It keeps people from looking over
their shoulder and eavesdropping

00:10:21.200 --> 00:10:22.540
on what they're doing.

00:10:22.610 --> 00:10:25.940
Once I have something selected,
like this settings application,

00:10:25.940 --> 00:10:28.180
I can double tap to open it.

00:10:29.360 --> 00:10:34.000
And so that's the basics of
how you use VoiceOver on iOS.

00:10:37.400 --> 00:10:41.760
So let's talk about accessibility.

00:10:41.870 --> 00:10:45.400
Those of you who came to the
iOS accessibility presentation

00:10:45.400 --> 00:10:49.400
yesterday found out how to make your
apps accessible in native views.

00:10:49.400 --> 00:10:52.900
We also know a lot of you are
coming to iOS from web development.

00:10:52.900 --> 00:10:56.400
You know the web
technologies a lot better.

00:10:56.400 --> 00:11:01.470
Some of you are using single frame
UI web views to essentially have a

00:11:01.540 --> 00:11:04.400
web app running in a native wrapper.

00:11:04.410 --> 00:11:09.710
And so I want to talk to you about
how to make those views accessible.

00:11:10.240 --> 00:11:14.370
So the way your application
works on iOS is that your

00:11:14.370 --> 00:11:17.840
application will import UIKit,
and the user is usually

00:11:17.840 --> 00:11:22.090
interacting with the Core OS,
and through UIKit can command

00:11:22.090 --> 00:11:24.790
and control your application.

00:11:25.160 --> 00:11:28.090
Now if VoiceOver is running,
there's a couple extra steps.

00:11:28.180 --> 00:11:31.010
So VoiceOver changes the
way the gestures work.

00:11:31.060 --> 00:11:34.620
So any time VoiceOver is running,
the user is always interacting

00:11:34.730 --> 00:11:36.920
directly with VoiceOver.

00:11:36.920 --> 00:11:41.220
Excuse me, WebKit also comes into play
if you're using WebView.

00:11:41.630 --> 00:11:44.710
But anytime VoiceOver is running,
the user is interacting

00:11:44.720 --> 00:11:46.340
directly with VoiceOver.

00:11:46.420 --> 00:11:49.420
And VoiceOver is essentially
driving the system through the

00:11:49.420 --> 00:11:53.480
UI Accessibility framework,
which has hooks into UIKit and

00:11:53.480 --> 00:11:58.300
your application and WebKit,
and can drive the interface.

00:11:58.330 --> 00:12:01.480
And for those of you that know
about ARIA and HTML and how it

00:12:01.480 --> 00:12:04.840
overrides some of the semantics,
WebKit uses that to change the way

00:12:04.840 --> 00:12:09.910
those accessibility semantics are
exposed to the UI Accessibility layer.

00:12:12.800 --> 00:12:15.740
The techniques I'm going to be
talking about for web accessibility

00:12:15.740 --> 00:12:17.000
apply across the board.

00:12:17.070 --> 00:12:20.150
These aren't just specific to iOS,
though some of the

00:12:20.150 --> 00:12:21.780
features are new in iOS.

00:12:22.140 --> 00:12:25.120
So they will work,
most of these will work in sites

00:12:25.120 --> 00:12:28.660
displayed in Safari and any
other accessible web browser,

00:12:28.840 --> 00:12:32.780
sites displayed in a web view
within a native application.

00:12:33.020 --> 00:12:37.010
Several feed readers
utilize this approach.

00:12:38.300 --> 00:12:40.630
So for example,
you don't have to click away

00:12:40.630 --> 00:12:43.400
to Safari if you want to view
a link in your RSS reader.

00:12:43.400 --> 00:12:46.390
You can just read it right
there in the application.

00:12:49.800 --> 00:12:52.940
This also applies to web views
displaying local content.

00:12:52.940 --> 00:12:56.110
So even if it's not technically
a website that's out on the web,

00:12:56.180 --> 00:13:00.420
if you're using the same technologies,
HTML, DOM, JavaScript, CSS,

00:13:00.420 --> 00:13:04.030
to display this web content,
the same techniques apply.

00:13:04.030 --> 00:13:06.880
And that's what we're going to be
using in the demo here in a minute.

00:13:08.070 --> 00:13:09.990
First of all, Accessibility 101.

00:13:09.990 --> 00:13:12.800
I think I have this slide in
every presentation I've ever

00:13:12.800 --> 00:13:14.360
done about accessibility.

00:13:14.390 --> 00:13:18.590
Label all your elements, form elements,
etc.

00:13:18.660 --> 00:13:21.560
The way you would do that in
HTML here is if you have an image,

00:13:21.560 --> 00:13:23.810
it's not labeled,
the screen reader has to

00:13:23.810 --> 00:13:25.180
guess at what this one means.

00:13:25.290 --> 00:13:27.870
So it's going to use
some internal heuristics,

00:13:27.870 --> 00:13:32.510
and this one it would probably guess
that this is an image that is BG 2376.

00:13:32.520 --> 00:13:36.000
Not very useful,
it's kind of a gibberish file name.

00:13:36.040 --> 00:13:39.850
And so anytime you have an image you want
to give it an alternative text label,

00:13:39.940 --> 00:13:42.870
a human readable alternative text label.

00:13:42.890 --> 00:13:45.200
Same concept applies to form elements.

00:13:45.220 --> 00:13:47.240
Even if you have the label
right next to the form element,

00:13:47.240 --> 00:13:51.680
sometimes the screen readers are going
to get a better heuristic value for it.

00:13:51.680 --> 00:13:55.100
But it's always best to
explicitly label that image.

00:13:55.260 --> 00:14:01.220
In this case we have a label element
with a for attribute that corresponds

00:14:01.220 --> 00:14:04.570
to the ID attribute of the form input.

00:14:06.840 --> 00:14:12.170
There's also a bunch of new support
for the HTML5 inputs in iOS 5.

00:14:12.300 --> 00:14:14.080
So for example, date time.

00:14:14.190 --> 00:14:16.200
If you just say type equals date,
of course you need to

00:14:16.200 --> 00:14:19.200
label this one as well,
but if you say type equals date,

00:14:19.200 --> 00:14:21.060
you get this native picker.

00:14:22.370 --> 00:14:27.610
You can also use sliders with
using input type equals range.

00:14:29.150 --> 00:14:31.940
And the required attribute
is newly supported in iOS 5,

00:14:32.030 --> 00:14:36.690
and that allows you to specify
that these fields are required,

00:14:36.690 --> 00:14:40.310
in addition to the visual display,
these fields are required so that

00:14:40.310 --> 00:14:43.810
the screen reader can know about
that required status as well.

00:14:46.300 --> 00:14:49.300
Who here by a show of hands has
either used a library that does this

00:14:49.300 --> 00:14:53.440
or has overridden on touch start,
usually for custom scrolling

00:14:53.530 --> 00:14:55.000
in a web application?

00:14:55.590 --> 00:14:56.480
Not too many?

00:14:56.530 --> 00:14:57.930
Okay, that's probably good.

00:14:57.970 --> 00:15:01.530
You want to avoid using custom controls
and gesture overrides if possible.

00:15:01.860 --> 00:15:06.840
The two main reasons why people
were doing this on the web is

00:15:06.840 --> 00:15:12.010
because single finger scrolling was
difficult within an overflow auto,

00:15:12.020 --> 00:15:17.250
so now you can use a single finger
within a div to scroll in a web view.

00:15:18.010 --> 00:15:21.220
Also, fixed positioning works the
way you would expect it to.

00:15:21.290 --> 00:15:23.490
Technically it worked before,
but a lot of people didn't

00:15:23.490 --> 00:15:25.390
understand how the viewport worked.

00:15:25.540 --> 00:15:31.070
So both of these things should be a
major reason why you don't need to use

00:15:31.070 --> 00:15:34.850
these gesture overrides in iOS 5 anymore.

00:15:37.900 --> 00:15:41.660
You can also use CSS3 to change
the screen reader verbosity.

00:15:41.800 --> 00:15:46.830
The speech module has
support for speak property.

00:15:46.960 --> 00:15:50.140
So, for example,
if I have an address here,

00:15:50.330 --> 00:15:55.270
The way most people would say this
is "12345 fake street." The way most

00:15:55.270 --> 00:15:59.370
screen readers would say this is
"12345 fake street." And so we can

00:15:59.420 --> 00:16:03.290
adjust that verbosity to make it
sound more natural in human language.

00:16:03.710 --> 00:16:08.380
Also, if we have a code sample,
we can say that it needs to

00:16:08.380 --> 00:16:09.800
speak all of the punctuation.

00:16:10.300 --> 00:16:14.040
And as a point of note,
like all web standards that

00:16:14.040 --> 00:16:17.770
aren't fully ratified yet,
CSS3 is a draft and

00:16:17.770 --> 00:16:19.960
it's subject to change.

00:16:19.960 --> 00:16:27.670
Some of this has changed since we
started planning this presentation.

00:16:30.460 --> 00:16:33.700
I'm going to switch to the demo machine.

00:16:33.730 --> 00:16:38.180
What I've got here is an
Xcode project with a nib that

00:16:38.180 --> 00:16:42.290
contains a single UIWebView.

00:16:42.380 --> 00:16:44.660
All this WebView does
is load up an HTML file,

00:16:44.660 --> 00:16:46.650
I'll show you the implementation.

00:16:52.890 --> 00:17:00.720
So right here it loads up a path of
WWDC.html in the web content directory.

00:17:00.770 --> 00:17:02.640
That file is right over here.

00:17:02.680 --> 00:17:04.440
So I'll click on it.

00:17:06.470 --> 00:17:09.490
I'll go ahead and show you
the app in the simulator.

00:17:09.630 --> 00:17:11.090
So this is just HTML markup.

00:17:11.230 --> 00:17:15.300
You can see that we've got our range
slider that's showing up in the view.

00:17:15.300 --> 00:17:17.530
We've got some tabs at the bottom.

00:17:17.540 --> 00:17:20.900
We've got the text that
I showed you in the slides.

00:17:20.920 --> 00:17:24.870
If I click on any of these tabs,
it changes.

00:17:24.920 --> 00:17:27.580
If I click on the test sheet button,

00:17:27.800 --> 00:17:30.050
A little kind of an
action sheet comes up,

00:17:30.080 --> 00:17:32.470
and we can cancel that
or do something with it.

00:17:32.640 --> 00:17:38.230
So let's hear how this sounds
in voiceover on a device.

00:17:47.370 --> 00:17:49.050
Great,
so I'm going to hit the home button

00:17:49.050 --> 00:17:52.100
three times to turn on voiceover.

00:17:52.200 --> 00:17:53.900
VoiceOver on.

00:17:53.960 --> 00:17:57.240
And I'm going to use a gesture to
read all the contents of the page.

00:17:57.350 --> 00:17:59.700
You're going to hear several
accessibility errors in this one.

00:17:59.710 --> 00:18:05.190
N, gibberish 06582X, PNG, image,
denotes a required field.

00:18:05.250 --> 00:18:12.020
Awesome sauce level, 7, adjustable,
phrase, text field, 12,345 fake street.

00:18:12.110 --> 00:18:14.600
This one equals this other one,
test sheet.

00:18:14.610 --> 00:18:16.990
So I'm just going to stop it right there.

00:18:17.370 --> 00:18:20.300
So we heard a bunch of different arrows,
starting off with this image.

00:18:20.330 --> 00:18:21.460
Denotes a required field.

00:18:21.460 --> 00:18:23.320
Gibberish 06582X.

00:18:23.460 --> 00:18:24.020
PNG.

00:18:24.190 --> 00:18:24.450
Image.

00:18:24.510 --> 00:18:26.290
So that asterisk image is not labeled.

00:18:26.300 --> 00:18:29.540
It's reading the file name,
which isn't very helpful to us.

00:18:29.570 --> 00:18:31.420
Also on the slider.

00:18:31.440 --> 00:18:31.940
Seven.

00:18:32.060 --> 00:18:33.260
Adjustable.

00:18:33.310 --> 00:18:38.860
It's not associated with its label,
so you can't hear that this

00:18:38.860 --> 00:18:41.280
is the Awesome Sauce slider.

00:18:41.390 --> 00:18:43.740
Also in the phrase text field.

00:18:43.800 --> 00:18:44.360
Phrase.

00:18:44.450 --> 00:18:45.900
Text field.

00:18:45.940 --> 00:18:46.860
Double tap to edit.

00:18:47.030 --> 00:18:49.420
We've got a visual indication
that this field is required,

00:18:49.460 --> 00:18:52.110
but you can't hear the difference.

00:18:53.360 --> 00:18:56.050
12,345 fake streak.

00:18:56.060 --> 00:18:58.580
Obviously,
this isn't quite how we want it,

00:18:58.630 --> 00:19:01.010
but it's not a bad rendering.

00:19:01.010 --> 00:19:03.590
And listen to this sample code.

00:19:03.720 --> 00:19:05.490
This one equals this other one.

00:19:05.530 --> 00:19:06.940
It just says this one
equals this other one,

00:19:06.980 --> 00:19:09.750
but those of you who understand
programming mean that that's actually the

00:19:09.770 --> 00:19:12.090
opposite of what this is intended to say.

00:19:12.230 --> 00:19:16.530
So we want to read more of
the punctuation in this.

00:19:20.820 --> 00:19:24.080
So here's our unlabeled image at the top.

00:19:24.080 --> 00:19:27.240
I'm just gonna drag in some alt text.

00:19:27.240 --> 00:19:31.240
Now it says asterisk for the range label.

00:19:31.240 --> 00:19:35.710
I'm gonna drag in...

00:19:38.240 --> 00:19:40.790
I'm going to drag in a label attribute,
or a label element that has

00:19:40.790 --> 00:19:44.790
a for attribute that matches
the ID of the element.

00:19:45.120 --> 00:19:47.660
Another way that we could label this,
this is just native HTML,

00:19:47.660 --> 00:19:51.220
another way that we could label this
is using the aria-label property.

00:19:51.230 --> 00:19:51.920
And drag that in.

00:19:51.920 --> 00:19:54.640
This is technically redundant,
but this is another

00:19:54.640 --> 00:19:56.770
way to label something,
so you can either have a

00:19:56.770 --> 00:19:59.900
text string on the label,
you could also use the title

00:20:00.080 --> 00:20:01.670
attribute in this case.

00:20:03.660 --> 00:20:10.090
If we scroll down to the
required text field here,

00:20:10.090 --> 00:20:11.400
we can see that it's got a class on it.

00:20:15.000 --> 00:20:18.480
So I'm going to go ahead and
add the required attribute,

00:20:18.480 --> 00:20:20.360
native HTML5.

00:20:20.670 --> 00:20:23.760
And here's where we have
our verbosity changes.

00:20:23.760 --> 00:20:25.860
We want to read this as digits
when we want to read all the

00:20:25.860 --> 00:20:27.600
punctuation in the code sample.

00:20:27.600 --> 00:20:33.300
So I'm going to switch
over to the CSS file.

00:20:33.310 --> 00:20:35.430
Just drop this in anywhere.

00:20:39.300 --> 00:20:40.300
Here we've got our address.

00:20:40.300 --> 00:20:43.040
Anything with an address class is
set to speak all of its digits.

00:20:43.180 --> 00:20:48.190
Anything that's a code block can
speak all of the literal punctuation.

00:20:49.510 --> 00:20:54.240
And I'll go ahead and save this,
and... Messages.

00:20:54.260 --> 00:20:55.620
Double tap to open.

00:20:55.680 --> 00:20:57.560
Rebuild it.

00:20:59.300 --> 00:21:07.810
So now that's a labeled image,
we hear asterisk.

00:21:07.820 --> 00:21:12.280
When we go to the slider,
we hear that it's

00:21:12.280 --> 00:21:14.050
associated with this label.

00:21:14.050 --> 00:21:18.140
So that's much more awesome,
I'm going to crank it all the way up.

00:21:19.500 --> 00:21:21.460
This one goes up to 11.

00:21:21.460 --> 00:21:24.300
Text field required.

00:21:24.300 --> 00:21:28.500
We hear the phrase text field
required when we touch this one.

00:21:28.500 --> 00:21:33.660
And now let's check out the verbosity
settings on 12345 Fake Street.

00:21:33.660 --> 00:21:36.200
12345 Fake Street.

00:21:36.580 --> 00:21:37.900
And also the code sample.

00:21:37.910 --> 00:21:41.900
This one space exclamation mark
equals space this other one semicolon.

00:21:41.930 --> 00:21:44.420
So this is, that's kind of verbose,
but that's exactly what you

00:21:44.420 --> 00:21:47.310
want for source code examples.

00:21:48.210 --> 00:21:51.520
So before we get into
the rest of the slides,

00:21:51.520 --> 00:21:54.790
I want to show you some
additional problems with this.

00:21:57.610 --> 00:22:00.200
I'm going to just scoot
it up here so you can see.

00:22:00.200 --> 00:22:02.500
I've got some tabs at the bottom,
and you can see earlier in the

00:22:02.500 --> 00:22:08.100
simulator that when we click on these,
it goes between the different tab panels.

00:22:08.110 --> 00:22:10.780
So I'm going to touch
this with voiceover.

00:22:13.160 --> 00:22:15.270
You guys can't really hear that,
but there's a little bonk

00:22:15.270 --> 00:22:17.830
sound that means that there's
nothing selectable there.

00:22:18.030 --> 00:22:20.700
So this isn't accessible
at all to voiceover.

00:22:20.720 --> 00:22:22.400
You can click the test sheet.

00:22:22.450 --> 00:22:24.660
Test sheet button.

00:22:24.710 --> 00:22:27.160
And I'm going to turn on
the screen curtain again.

00:22:27.210 --> 00:22:28.870
Screen curtain on.

00:22:29.000 --> 00:22:31.300
And when I activate
this test sheet button,

00:22:31.300 --> 00:22:34.520
I want you to hear,
tell me what you think happens

00:22:34.520 --> 00:22:35.740
based on what you hear.

00:22:35.800 --> 00:22:37.410
Test sheet.

00:22:37.600 --> 00:22:40.050
So all we heard again is a
repeat of the test sheet button.

00:22:40.080 --> 00:22:41.860
So I'm going to turn
off the screen curtain.

00:22:41.960 --> 00:22:43.100
Screen curtain off.

00:22:43.190 --> 00:22:43.600
Oh, okay.

00:22:43.600 --> 00:22:46.330
So we can see that this
action sheet came up.

00:22:46.450 --> 00:22:49.730
We probably should have moved
the focus to that action sheet.

00:22:49.780 --> 00:22:53.260
Another thing that's bad about what we've
got going on here is that I've got a mask

00:22:53.260 --> 00:22:55.500
over the rest of the content behind it.

00:22:55.650 --> 00:22:57.420
We don't want it to be
interactable at this moment.

00:22:57.430 --> 00:22:58.910
We want it to be modal.

00:22:59.260 --> 00:23:02.600
But a voiceover user... Phrase, phrase,
awesome sauce level.

00:23:02.660 --> 00:23:04.540
Ask, denotes a required field.

00:23:04.600 --> 00:23:07.420
...can still touch all that
content that's behind it.

00:23:07.450 --> 00:23:12.780
So we want to hide the content
that's in the main body.

00:23:12.780 --> 00:23:15.180
And we also want to focus the sheet.

00:23:15.180 --> 00:23:17.300
So I'm going to go back to slides.

00:23:18.160 --> 00:23:22.000
The way we're going to do some of this,
fix the tab controller, for example,

00:23:22.000 --> 00:23:23.170
is by using ARIA.

00:23:23.260 --> 00:23:26.770
One of the things that ARIA is
great at is retrofitting old

00:23:26.770 --> 00:23:28.050
content without gutting it.

00:23:28.210 --> 00:23:30.680
You guys familiar with ARIA at all?

00:23:30.710 --> 00:23:34.350
Little bit stands for Accessible
Rich Internet Applications.

00:23:34.610 --> 00:23:38.470
So a lot of you probably have inherited
some old code on old websites,

00:23:38.640 --> 00:23:43.910
and you can do things like if you
have a link that's acting as a button,

00:23:44.040 --> 00:23:48.000
it visually looks like a button,
but it's actually just using a link tag,

00:23:48.000 --> 00:23:52.770
you can retrofit the role,
so in this case we could just

00:23:52.770 --> 00:23:52.770
say this is a role of button.

00:23:53.190 --> 00:23:56.810
You can also use this to
redefine roles where necessary,

00:23:56.810 --> 00:23:58.330
or define new roles.

00:23:58.350 --> 00:24:02.330
So, for example, in HTML, HTML5,
there's no such thing as a dialogue.

00:24:02.470 --> 00:24:04.880
There's no such thing as a few
different types of containers

00:24:04.940 --> 00:24:07.380
that exist in the ARIA roles.

00:24:07.380 --> 00:24:10.390
So you can say,
"This particular div represents an

00:24:10.390 --> 00:24:15.340
application dialogue." There used to be
an old HTML5 element called dialogue.

00:24:15.390 --> 00:24:19.600
It was about dialogue between people,
not the same thing.

00:24:19.630 --> 00:24:21.270
You don't have to set this
directly in the markup.

00:24:21.360 --> 00:24:24.580
you can set it in the DOM via
the setAttribute method.

00:24:25.230 --> 00:24:27.320
You can also override
states and properties.

00:24:27.380 --> 00:24:30.610
So not just in addition to role,
but in this case we've got

00:24:30.610 --> 00:24:32.220
an ARIA checked property.

00:24:32.310 --> 00:24:35.220
The reason I'm using this example
is because even though there's

00:24:35.330 --> 00:24:39.200
already a checkbox in HTML5,
it only represents binary either

00:24:39.200 --> 00:24:41.200
checked or unchecked states.

00:24:41.390 --> 00:24:42.220
There's no mixed state.

00:24:42.220 --> 00:24:45.550
So in this case we've got a custom
widget that represents the check

00:24:45.550 --> 00:24:48.260
state of several other checkboxes,
some of which are checked,

00:24:48.260 --> 00:24:49.490
some of which are unchecked.

00:24:49.550 --> 00:24:51.050
So this one is mixed.

00:24:51.410 --> 00:24:54.070
Again,
you don't have to set this in the markup,

00:24:54.070 --> 00:24:56.970
you can assign it directly
in the JavaScript.

00:24:57.720 --> 00:25:00.800
And a lot of people ask me,
how do I know when I need to

00:25:00.800 --> 00:25:02.130
update my application state?

00:25:02.250 --> 00:25:04.650
When should I set these properties?

00:25:04.750 --> 00:25:08.000
Usually a good indicator is
if you're changing a style,

00:25:08.000 --> 00:25:12.340
if you're changing a class name,
especially if it's something like

00:25:12.340 --> 00:25:15.750
selected or active or highlight,
go through your application and

00:25:15.830 --> 00:25:18.110
look for those kinds of class
names and those kinds of styles,

00:25:18.120 --> 00:25:21.970
and that's usually where you need to
be changing an ARIA property as well.

00:25:22.040 --> 00:25:24.920
So in this case,
depending on the context,

00:25:24.920 --> 00:25:28.310
we would change this to
"ARIA_SELECTED = TRUE".

00:25:29.960 --> 00:25:32.660
I also want to talk to you
about focus management.

00:25:32.690 --> 00:25:38.340
Remember when we tested the sheet,
the voiceover cursor didn't move

00:25:38.520 --> 00:25:41.090
into the active action sheet?

00:25:41.410 --> 00:25:45.760
Did anybody attend my presentation
two years ago at WWDC?

00:25:45.760 --> 00:25:51.990
We talked about... the WWDR rep attended,
no one else.

00:25:53.070 --> 00:25:56.240
So we talked about focus
management on the desktop.

00:25:56.280 --> 00:25:59.450
And on the desktop you have
this concept of keyboard focus.

00:25:59.500 --> 00:26:03.200
And usually when you set focus,
the voiceover cursor follows along.

00:26:03.240 --> 00:26:06.720
On iOS, there's no real concept
of keyboard focus,

00:26:06.720 --> 00:26:10.950
or there is in a couple places,
but I want to make sure that

00:26:10.950 --> 00:26:13.600
you understand that this is
not the same as desktop focus,

00:26:13.600 --> 00:26:15.900
not the same as keyboard focus.

00:26:15.930 --> 00:26:18.230
So when we're talking about
focus management on this one,

00:26:18.230 --> 00:26:20.790
I'm talking about moving the
voiceover cursor around only.

00:26:20.940 --> 00:26:24.460
That said,
the way you set focus is exactly the

00:26:24.460 --> 00:26:27.580
same way you set it in a desktop browser.

00:26:27.800 --> 00:26:30.620
You get a reference to a button,
in this case the first

00:26:30.620 --> 00:26:33.120
button tag in an element,
or in a document.

00:26:33.210 --> 00:26:35.140
And you just call the focus method on it.

00:26:35.280 --> 00:26:38.510
Very familiar to you web
developers out there.

00:26:40.170 --> 00:26:44.020
A note for those of you sharing
code between iOS applications

00:26:44.020 --> 00:26:48.570
and desktop applications:
use tabindex if you need.

00:26:48.750 --> 00:26:53.850
The case here where you might need
it is if you were to define a custom

00:26:53.850 --> 00:26:57.500
checkbox that didn't use an input tag.

00:26:57.700 --> 00:26:59.770
Div is not natively focusable.

00:26:59.900 --> 00:27:02.560
So once you get a reference to that div,
you've got to make sure that

00:27:02.630 --> 00:27:05.170
it's focusable by setting
the tabindex property on it,

00:27:05.300 --> 00:27:08.670
or otherwise when you call focus on it,
you'll get an error in a desktop browser.

00:27:08.810 --> 00:27:12.220
Not applicable to iOS,
but a point of note for those of you

00:27:12.220 --> 00:27:15.000
sharing code between the desktop and iOS.

00:27:19.030 --> 00:27:25.300
So I'm going to go back
to the demo machine.

00:27:25.380 --> 00:27:27.560
Go back to the HTML file.

00:27:27.840 --> 00:27:33.070
We saw that these tabs down here at the
bottom were not accessible on VoiceOver.

00:27:33.730 --> 00:27:35.080
So let's look for those in the document.

00:27:35.110 --> 00:27:35.680
Here we go.

00:27:35.750 --> 00:27:40.860
It's an unordered list with
list items inside of it.

00:27:41.840 --> 00:27:45.980
And there's no text attribute,
there's no text equivalent,

00:27:46.010 --> 00:27:48.600
there's no role,
there's nothing but an empty list here.

00:27:48.600 --> 00:27:51.030
So as far as VoiceOver knows,
as far as the accessibility

00:27:51.030 --> 00:27:52.560
hierarchy knows,
this is an empty list,

00:27:52.560 --> 00:27:55.110
so there shouldn't be
anything that's there.

00:27:55.800 --> 00:28:01.300
So what I'm going to do is I'm going
to localize those tabs to begin with.

00:28:14.300 --> 00:28:16.860
So I'm going to drag
in a few labels here.

00:28:16.860 --> 00:28:19.860
We've got foo, bar, baz, and bop tabs.

00:28:20.800 --> 00:28:25.330
Also, when I initialize the tabs,
I'm going to set the tab

00:28:25.330 --> 00:28:27.100
list role on the container.

00:28:27.100 --> 00:28:29.700
So we've got a reference to the UL here.

00:28:29.770 --> 00:28:31.860
I'm going to set its role to tab list.

00:28:31.980 --> 00:28:34.910
And for each one of the
tabs inside of that,

00:28:34.910 --> 00:28:39.060
I'm also going to set the -- oops,
that was the wrong one.

00:28:42.250 --> 00:28:45.740
I'm going to set the role to tab.

00:28:45.890 --> 00:28:47.920
The other thing that we want
to do is we want to check to

00:28:47.920 --> 00:28:48.950
see which one is selected.

00:28:49.030 --> 00:28:51.640
So anytime we change
which tab is selected,

00:28:51.640 --> 00:28:53.970
it updates its style.

00:28:54.300 --> 00:28:57.430
So we've got our select tab method here.

00:28:57.520 --> 00:29:00.000
Move down, okay, so here's my function.

00:29:00.010 --> 00:29:01.500
Sure enough, I'm setting a class name.

00:29:01.500 --> 00:29:06.380
On this deselect,
I'm setting it to an empty string.

00:29:06.380 --> 00:29:10.920
So that's where I want to set
the selected property defaults.

00:29:10.960 --> 00:29:14.200
And then when I select
the newly selected tab,

00:29:19.010 --> 00:29:20.990
We set the ARIA selected
property to true.

00:29:21.000 --> 00:29:24.000
So let's hear how that sounds.

00:29:24.000 --> 00:29:25.280
- Messages.

00:29:25.290 --> 00:29:27.310
Double tap to open.

00:29:29.740 --> 00:29:36.020
So I'm going to touch the
tabs at the bottom here.

00:29:36.120 --> 00:29:41.100
Great.

00:29:41.100 --> 00:29:42.310
Let's hear the selected one.

00:29:42.430 --> 00:29:47.480
We want to make sure that updates
at the same time that we select it.

00:29:47.640 --> 00:29:54.390
So the first one is no longer selected,
the second one?

00:29:54.530 --> 00:29:57.600
The second one is selected.

00:29:57.600 --> 00:30:05.600
Okay, so we got a pretty good
tab controller here.

00:30:05.600 --> 00:30:08.990
Now we're going to fix this sheet.

00:30:11.800 --> 00:30:14.600
So I'm going to go
back to the HTML again.

00:30:14.690 --> 00:30:17.170
So this sheet is another div.

00:30:17.550 --> 00:30:20.640
Inside my application,
we've got this mask element to

00:30:20.660 --> 00:30:22.920
gray out the background content.

00:30:22.990 --> 00:30:27.390
We've also got a wrapper
element around the entire rest

00:30:27.390 --> 00:30:28.620
of the contents of the page.

00:30:28.620 --> 00:30:32.900
So when the sheet is shown,
we want to hide the rest of the contents,

00:30:32.900 --> 00:30:34.110
and vice versa.

00:30:34.110 --> 00:30:39.770
When the sheet is hidden,
we want to show the rest of the contents.

00:30:42.910 --> 00:30:47.280
So in the JavaScript,
I have a show sheet function.

00:30:47.280 --> 00:30:49.970
I also have a hide sheet function.

00:30:50.180 --> 00:30:52.510
Now we could set focus
immediately in this function,

00:30:52.560 --> 00:30:55.350
but if you notice,
there's an animation that

00:30:55.350 --> 00:30:56.500
occurs when the sheet is shown.

00:30:56.500 --> 00:30:59.550
It kind of slides up using
just a regular CSS transition.

00:30:59.760 --> 00:31:01.540
It takes two-tenths of a second.

00:31:01.700 --> 00:31:05.460
Sometimes if we set the focus
to something that's off screen,

00:31:05.460 --> 00:31:09.060
you're going to get
unpredictable behavior.

00:31:09.060 --> 00:31:11.320
So what we're going to do is we're
actually going to set a timeout.

00:31:11.450 --> 00:31:15.860
You could also use a
callback from the animation,

00:31:15.890 --> 00:31:21.660
but for the sake of simplicity,
I'm going to set a timeout here.

00:31:21.660 --> 00:31:25.010
Call it 200 milliseconds later.

00:31:28.390 --> 00:31:31.290
And these are just going to call
some functions that don't exist yet.

00:31:31.300 --> 00:31:37.320
So I'll show you what each of these do.

00:31:37.970 --> 00:31:39.930
When we focus the sheet,
the first thing that we're going

00:31:39.940 --> 00:31:44.190
to do is we're going to set the
ARIA hidden attribute defaults.

00:31:44.330 --> 00:31:45.420
Excuse me, I forgot one thing.

00:31:45.420 --> 00:31:47.880
I'm going to go back to the HTML file.

00:31:48.350 --> 00:31:51.220
On this sheet,
because it's hidden by default,

00:31:51.230 --> 00:31:53.060
I want to explicitly
set the hidden property.

00:31:53.060 --> 00:31:55.180
You could do this in an
initialization function,

00:31:55.200 --> 00:31:57.890
but I'm going to do it right
here to make it explicit.

00:32:00.580 --> 00:32:04.080
So it's hidden by default
when the application launches.

00:32:04.150 --> 00:32:06.700
Now if I go back to the JavaScript,

00:32:07.370 --> 00:32:09.900
You can see that we're
changing that value to false,

00:32:09.900 --> 00:32:11.700
so the sheet is now visible to voiceover.

00:32:11.700 --> 00:32:13.820
It's in the accessibility tree.

00:32:14.090 --> 00:32:18.750
We're also going to grab the first
button within that sheet and focus it.

00:32:19.500 --> 00:32:22.060
And then we're going to hide
the contents of the rest of

00:32:22.060 --> 00:32:25.140
the page while this is shown,
and vice versa when we focus the

00:32:25.140 --> 00:32:28.900
trigger that is the button that
showed the sheet to begin with.

00:32:29.200 --> 00:32:32.060
We're going to show the rest
of the contents of the page,

00:32:32.100 --> 00:32:35.440
change the focus back to the
button inside those contents,

00:32:35.450 --> 00:32:37.410
and then hide the sheet again.

00:32:39.490 --> 00:32:46.640
So now when we focus the
sheet button and activate it,

00:32:46.640 --> 00:32:48.860
it moves directly to the
sheet as we wanted to.

00:32:48.860 --> 00:32:52.770
Also, if we touch back in the
contents of the page,

00:32:53.460 --> 00:32:55.400
We don't get anything,
we don't hear anything back there.

00:32:55.410 --> 00:32:57.280
Heading level one.

00:32:57.310 --> 00:32:58.820
So I'm going to go ahead and cancel this.

00:32:58.820 --> 00:32:59.330
Cancel.

00:32:59.410 --> 00:33:00.180
Test sheet.

00:33:00.200 --> 00:33:01.280
Button.

00:33:01.350 --> 00:33:03.310
Turn off voiceover.

00:33:03.500 --> 00:33:05.500
App Switcher Settings.

00:33:05.500 --> 00:33:07.820
So you can see that with
just a few lines of code,

00:33:07.820 --> 00:33:09.930
literally that was,
even including the functions,

00:33:09.940 --> 00:33:13.660
that was probably 10, 15 lines of code.

00:33:13.660 --> 00:33:16.420
We've updated our application
from a completely inaccessible

00:33:16.420 --> 00:33:22.050
application to one that's very
accessible to a voiceover user.

00:33:22.910 --> 00:33:24.650
And we're going to find that
all of that work that we did,

00:33:24.660 --> 00:33:27.240
including making those tabs
accessible to VoiceOver,

00:33:27.330 --> 00:33:30.270
is going to allow us to automate
the application in a way that

00:33:30.270 --> 00:33:34.060
benefits you as a developer,
allows you to find other bugs

00:33:34.060 --> 00:33:36.110
that you wouldn't otherwise get.

00:33:37.840 --> 00:33:40.700
So, there's a lot of reasons
to create automated tests.

00:33:40.720 --> 00:33:44.800
The first reason is so you can have
an easily repeatable regression test.

00:33:44.860 --> 00:33:47.700
All of you have found bugs
in your programs before.

00:33:47.700 --> 00:33:52.590
It's always a frustrating point when
those bugs come back in a later version.

00:33:52.690 --> 00:33:54.560
So you want to make sure,
if you've experienced

00:33:54.560 --> 00:33:56.210
a bug and you fixed it,
you want to make sure

00:33:56.210 --> 00:33:58.460
that never comes back,
so you can write a test that

00:33:58.460 --> 00:34:01.620
always fails when that bug occurs,
and always passes when

00:34:01.620 --> 00:34:03.140
that bug doesn't occur.

00:34:03.630 --> 00:34:05.940
You can also stress your
app with longevity tests.

00:34:05.960 --> 00:34:09.550
Just by a show of hands,
who here has tested their app for

00:34:09.550 --> 00:34:12.240
two weeks straight without sleeping?

00:34:12.240 --> 00:34:13.570
Anyone?

00:34:13.650 --> 00:34:14.840
A couple people over here.

00:34:14.840 --> 00:34:18.230
So the automation team has done it.

00:34:18.350 --> 00:34:21.490
It's one of the great things
that machines are good at.

00:34:21.490 --> 00:34:23.500
They don't need sleep.

00:34:24.190 --> 00:34:28.480
You can also have faster testing
for your iOS application updates.

00:34:28.630 --> 00:34:30.990
As soon as you find a bug,
you want to fix it and get

00:34:30.990 --> 00:34:33.400
an update out to your users,
but you also want to make sure

00:34:33.400 --> 00:34:34.540
you don't break anything new.

00:34:34.620 --> 00:34:39.070
So all these together give you a higher
confidence in your product quality.

00:34:39.170 --> 00:34:42.340
And as a bonus, we get to find a few
accessibility errors as well.

00:34:42.440 --> 00:34:46.300
Some of you may have noticed that I left
at least one bug in that application.

00:34:48.410 --> 00:34:55.560
So UIAutomation on iOS is
integrated into the Instruments app.

00:34:56.220 --> 00:35:01.070
It allows automation of any iOS app,
though you're going to get the most

00:35:01.070 --> 00:35:04.030
out of it if you use an accessible app.

00:35:04.060 --> 00:35:08.000
Typically those that are UIKit-based
get a lot of this for free.

00:35:08.650 --> 00:35:10.970
It leverages the accessibility layer,
UI accessibility,

00:35:10.980 --> 00:35:12.830
that we talked about earlier.

00:35:12.930 --> 00:35:16.200
And the tests are written in JavaScript,
so for all you web developers out there,

00:35:16.200 --> 00:35:18.320
the syntax is going
to look very familiar.

00:35:19.180 --> 00:35:23.560
So here's our voiceover and
accessibility architecture.

00:35:23.800 --> 00:35:26.180
The user is down at
the bottom of the list,

00:35:26.280 --> 00:35:28.360
interacting directly with voiceover.

00:35:28.380 --> 00:35:33.190
Voiceover then drives the application
through the UI accessibility layer.

00:35:33.330 --> 00:35:36.150
So if we take out voiceover,
we take out the user

00:35:36.440 --> 00:35:39.490
out of this scenario,
we can put in UIAutomation

00:35:39.490 --> 00:35:40.890
and these UI tests.

00:35:41.020 --> 00:35:43.980
So the UI tests are
essentially mimicking a user,

00:35:43.980 --> 00:35:48.130
or simulating a user with a script,
and that's interpreted by

00:35:48.130 --> 00:35:53.290
the UIAutomation framework,
which then drives your application

00:35:53.300 --> 00:35:55.830
through the accessibility layer.

00:35:58.400 --> 00:36:02.300
So the way it works,
just using JavaScript syntax,

00:36:02.300 --> 00:36:05.100
you get a reference to the device.

00:36:05.130 --> 00:36:09.810
Local target is essentially the
root element in UIAutomation.

00:36:10.840 --> 00:36:13.960
This is a reference to your app process.

00:36:13.990 --> 00:36:15.800
And then we get to some UI views.

00:36:15.800 --> 00:36:20.070
So app.mainwindow will get a
reference to basically everything

00:36:20.070 --> 00:36:21.990
that's on the screen here.

00:36:23.100 --> 00:36:25.850
In the case of our application,
we have a web view within a scroll view,

00:36:25.870 --> 00:36:30.840
so we get the first one of those in each,
and it's everything essentially

00:36:30.840 --> 00:36:32.470
except for the title bar.

00:36:32.700 --> 00:36:35.280
And within that web view, we can say,
"Give me the first text field," and

00:36:35.290 --> 00:36:37.710
it'll get a reference to that one.

00:36:38.580 --> 00:36:43.310
Or select the button that
matches the test sheet value,

00:36:43.380 --> 00:36:45.400
or test sheet name.

00:36:46.400 --> 00:36:49.740
You can also use it to
inspect the interface.

00:36:49.760 --> 00:36:52.570
So give me the label of the first image.

00:36:52.580 --> 00:36:54.360
In this case,
it's that little asterisk image,

00:36:54.360 --> 00:36:57.290
and we just added an alt attribute,
so it says it returns a

00:36:57.290 --> 00:36:59.160
string value of asterisk.

00:37:00.770 --> 00:37:03.470
You can check whether a
button is enabled or disabled,

00:37:03.540 --> 00:37:06.460
whether a control is enabled or disabled.

00:37:06.580 --> 00:37:11.090
And you can also check other
status of items within the DOM.

00:37:11.110 --> 00:37:13.200
So in this case,
we had that cancel button

00:37:13.200 --> 00:37:14.460
that was in the sheet.

00:37:14.460 --> 00:37:17.200
We called checkIsValid,
but we explicitly hid it

00:37:17.220 --> 00:37:19.020
when it was off screen,
so in this case it's

00:37:19.020 --> 00:37:20.060
going to return false.

00:37:20.090 --> 00:37:24.300
If you called this same method when
the sheet was displaying on screen,

00:37:24.300 --> 00:37:25.780
it would return true.

00:37:27.340 --> 00:37:28.440
You can trigger user events.

00:37:28.440 --> 00:37:30.490
So once you have a
reference to an element,

00:37:30.500 --> 00:37:31.900
you can tap it.

00:37:31.990 --> 00:37:37.780
You can also do more explicit
events or more specific events like

00:37:38.090 --> 00:37:39.820
touch and hold for two seconds.

00:37:39.850 --> 00:37:43.740
In this case, it would bring up the paste
menu on that phrase field.

00:37:45.250 --> 00:37:46.860
And you can simulate
some other events too,

00:37:46.860 --> 00:37:51.590
such as shaking the device or
changing the device orientation.

00:37:53.460 --> 00:37:56.820
Now as you're writing a test,
the first thing you want to do is

00:37:56.820 --> 00:37:58.960
use UIAlogger to start the test.

00:37:58.960 --> 00:38:02.570
We're going to get a reference to a
test name that we can use a couple

00:38:02.570 --> 00:38:04.980
times when we complete the test as well.

00:38:05.050 --> 00:38:07.920
We call log start,
and if you run multiple tests,

00:38:07.990 --> 00:38:12.400
it's going to encapsulate all of the
output of one test into a container.

00:38:14.980 --> 00:38:17.950
At some point, you're going to want to
output some information to the

00:38:18.040 --> 00:38:20.890
console or back to instruments.

00:38:20.980 --> 00:38:24.600
So you can call logDebug, logMessage,
logWarning, and logError.

00:38:24.730 --> 00:38:28.210
logError will cause an explicit failure.

00:38:30.560 --> 00:38:36.400
This one is not a UIA logger method,
but it can be called on any UIA element.

00:38:36.400 --> 00:38:38.390
So in this case,
I'm just calling it on the entire device.

00:38:38.460 --> 00:38:41.560
LogElementTree will output a
hierarchical list of everything

00:38:41.620 --> 00:38:43.400
that's in the view at the moment.

00:38:43.460 --> 00:38:47.350
You can also capture screenshots
or portions of screenshots.

00:38:49.340 --> 00:38:51.790
And then at some point,
you're going to want to,

00:38:51.830 --> 00:38:54.100
you're going to catch some
explicit failure case,

00:38:54.120 --> 00:39:00.060
so you will call log fail
or otherwise log pass.

00:39:00.110 --> 00:39:02.480
And I'll demo how this works.

00:39:11.560 --> 00:39:15.500
And we can choose our automation
instrument from this list.

00:39:15.500 --> 00:39:22.480
Collapse that a little bit.

00:39:22.580 --> 00:39:25.500
Now up in the toolbar,
I can choose my target.

00:39:25.500 --> 00:39:28.840
In this case,
I'm going to select the iPad and the

00:39:28.840 --> 00:39:31.460
application that we're running here.

00:39:32.250 --> 00:39:36.480
And also in the left-hand column,
we can choose a script.

00:39:36.530 --> 00:39:39.840
I'm going to add sample.js.

00:39:39.870 --> 00:39:43.020
Just to show you what it looks like,
I'm going to pull down this

00:39:43.020 --> 00:39:45.640
trace log and move it to script.

00:39:45.680 --> 00:39:48.120
And here we've got some JavaScript.

00:39:48.150 --> 00:39:52.520
So I've got a few references
to the app window and web view.

00:39:52.840 --> 00:39:54.320
A couple of hard-coded strings here.

00:39:54.320 --> 00:39:57.780
This would be better to pull
from a localized strings file.

00:39:58.380 --> 00:39:59.990
This one I didn't talk
about in the slides,

00:40:00.060 --> 00:40:03.660
but this is essentially a way to,
if you get an alert during

00:40:03.770 --> 00:40:06.000
your automation test,
you don't want it to cause a failure,

00:40:06.000 --> 00:40:10.200
so this can have the framework
dismiss that alert for you.

00:40:11.450 --> 00:40:13.800
I've got a helper function
that just resets the UI by

00:40:13.800 --> 00:40:15.160
clicking on the first tab.

00:40:15.160 --> 00:40:16.390
And here's where I get to my tests.

00:40:16.390 --> 00:40:19.390
So the first one is test labels.

00:40:20.500 --> 00:40:24.400
What it does is it goes through
all of each one of the tabs,

00:40:24.500 --> 00:40:30.630
checks to see if the tab is valid,
then taps the tab, takes a screenshot.

00:40:33.100 --> 00:40:36.580
Then once it's tapped that tab,
it loops through all of

00:40:36.730 --> 00:40:39.500
the elements in the view,
makes sure they have a label.

00:40:39.500 --> 00:40:41.960
If we have something that
doesn't have a label,

00:40:42.030 --> 00:40:45.630
it's going to capture a portion
of the screenshot that just has

00:40:45.630 --> 00:40:49.090
where that element is on screen,
and then log an error,

00:40:49.170 --> 00:40:50.620
which is going to fail us.

00:40:50.860 --> 00:40:54.500
We're going to then cause
a pass or a failure.

00:40:55.190 --> 00:40:58.930
The second test, Test Sheet,
is just going to loop

00:40:58.930 --> 00:41:00.870
through this for loop twice.

00:41:00.940 --> 00:41:05.590
It's going to tap the Test Sheet button,

00:41:05.890 --> 00:41:09.500
And then tap the cancel button
and take screenshots after that.

00:41:09.510 --> 00:41:13.540
And here you can see we're recalling
these tests after a short delay.

00:41:13.700 --> 00:41:16.950
So I'm going to go ahead and
switch back over to the iPad view.

00:41:16.950 --> 00:41:19.360
So you can see this
running on the device.

00:41:19.440 --> 00:41:21.820
I'm going to click record.

00:41:27.900 --> 00:41:28.740
Test has started.

00:41:28.790 --> 00:41:30.960
It's looping through the first page.

00:41:30.960 --> 00:41:33.270
Taps on the second tab.

00:41:35.730 --> 00:41:40.350
The fourth tab resets the UI,
and it's going to show the

00:41:40.420 --> 00:41:41.970
sheet and hide it twice.

00:41:46.370 --> 00:41:48.140
Cancel button.

00:41:48.160 --> 00:41:50.600
And our test is done.

00:41:50.620 --> 00:41:53.540
So this is what it looks
like on the desktop.

00:41:53.570 --> 00:41:55.700
You can see that we've got

00:41:56.120 --> 00:41:58.600
One pass and one failure.

00:41:58.600 --> 00:42:00.310
Obviously the failure
is more interesting,

00:42:00.340 --> 00:42:01.980
but I'll just show you
what the pass looks like.

00:42:01.980 --> 00:42:07.540
So this is the test sheet test.

00:42:08.000 --> 00:42:10.940
Takes a screenshot before
it tests the sheet,

00:42:11.120 --> 00:42:13.620
then while the sheet is up,
and then wants to make sure

00:42:13.620 --> 00:42:15.930
that the sheet is gone again.

00:42:15.990 --> 00:42:18.490
And that just looped through twice,
but that's less interesting.

00:42:18.500 --> 00:42:22.080
What we want to find out is
why did this other one fail?

00:42:23.420 --> 00:42:26.860
So you can see through here we've got,
we made sure the first tab is visible,

00:42:26.860 --> 00:42:33.190
we tapped it, we clicked tab foo,
and then we hit this error.

00:42:36.500 --> 00:42:40.110
Right before we hit the error,
we got a missing label log,

00:42:40.110 --> 00:42:43.190
which I put in there explicitly,
and we can see that we've got

00:42:43.260 --> 00:42:44.880
a portion of a screenshot.

00:42:45.600 --> 00:42:48.080
It's just this text field.

00:42:48.090 --> 00:42:50.800
So, how did this happen, right?

00:42:50.800 --> 00:42:53.280
Didn't we hear it,
voiceover said phrase text field

00:42:53.280 --> 00:42:54.920
when we were doing it before?

00:42:54.920 --> 00:43:00.720
So I'm going to switch back to Xcode,
figure out where that error is,

00:43:00.720 --> 00:43:02.490
go to the markup.

00:43:04.600 --> 00:43:08.810
Oh, and sure enough, right here,
this input is not

00:43:08.810 --> 00:43:11.210
associated with its label.

00:43:11.460 --> 00:43:13.400
So how did VoiceOver get it before?

00:43:13.520 --> 00:43:16.920
What you're hearing there is some of the
built-in heuristics in the screen reader.

00:43:16.920 --> 00:43:19.560
So it said there's no
label associated with this,

00:43:19.560 --> 00:43:21.710
I'm going to look around and
find something that's nearby.

00:43:21.810 --> 00:43:23.920
Okay,
I see this phrase text that's nearby it.

00:43:24.120 --> 00:43:26.520
That's probably what the
user meant as a label.

00:43:26.540 --> 00:43:29.860
Our job is to give the user
the best experience possible,

00:43:29.860 --> 00:43:32.910
whether or not the code of the
application is in the best shape.

00:43:33.030 --> 00:43:35.460
So in some cases,
we can guess what the label is.

00:43:35.550 --> 00:43:37.360
It's always better to
explicitly label those,

00:43:37.360 --> 00:43:39.680
though, so we're going to do that now.

00:43:48.770 --> 00:43:53.200
I'm actually going to use something
different than a label element.

00:43:53.200 --> 00:43:56.690
So here we've got phrase,
it's just a span with an ID.

00:43:56.830 --> 00:44:01.300
Another way we can label something is
using the aria-labelledby property.

00:44:04.700 --> 00:44:08.530
And this essentially is an
ID reference to its label.

00:44:08.550 --> 00:44:11.340
It's the reverse relationship
of the HTML label tag,

00:44:11.340 --> 00:44:15.000
so which is an ID reference
from the label to its element.

00:44:15.870 --> 00:44:17.680
So these are just three
different ways to label things.

00:44:17.680 --> 00:44:20.360
All of them work well with VoiceOver.

00:44:20.360 --> 00:44:22.510
I'm going to save this out.

00:44:22.780 --> 00:44:26.540
We'll rebuild it again, but first,
that's going to make our first test pass.

00:44:26.540 --> 00:44:29.690
I want to show you how you can
catch a logic error as well.

00:44:29.790 --> 00:44:37.030
So I'm going to go to my JavaScript file,
find out where we showed the sheet,

00:44:37.230 --> 00:44:39.700
and just throw an early return.

00:44:40.010 --> 00:44:43.290
Just throw an early return.

00:44:43.290 --> 00:44:48.680
We're going to rebuild
this on the device.

00:45:04.750 --> 00:45:06.700
And now I'm going to run this test again,
and this time I'm going to leave

00:45:06.770 --> 00:45:09.510
it on the desktop so you can see
what it looks like as the test

00:45:09.510 --> 00:45:12.700
is running from instruments.

00:45:12.820 --> 00:45:15.000
So our test is starting.

00:45:18.460 --> 00:45:21.600
Here it takes the first
screenshot of the view,

00:45:21.610 --> 00:45:25.140
taps on the second tab, okay,
we made it through that first error,

00:45:25.230 --> 00:45:26.960
get the screenshots
for each one of these,

00:45:27.120 --> 00:45:29.700
and we've got a pass for the first test.

00:45:29.730 --> 00:45:31.960
Second test is about
to dismiss the sheet,

00:45:31.960 --> 00:45:35.080
it's got a screenshot, wait,
the sheet's not showing,

00:45:35.130 --> 00:45:38.670
it's waiting around, and then okay,
so we try to tap on an

00:45:38.670 --> 00:45:42.140
element that wasn't there.

00:45:42.600 --> 00:45:44.360
So you can see down
here we've got an error.

00:45:44.360 --> 00:45:47.270
We want to correct any script errors,
so in this case we actually called a

00:45:47.270 --> 00:45:49.000
method on an object that didn't exist.

00:45:49.000 --> 00:45:51.170
So this is a script failure.

00:45:51.700 --> 00:45:54.080
So I'm going to go
ahead and stop the test,

00:45:54.080 --> 00:45:57.700
and then just double click
down here on the error message.

00:45:57.740 --> 00:46:01.170
That's going to take
us to the script file.

00:46:01.630 --> 00:46:04.500
We can see somewhere down here,
sure enough,

00:46:04.500 --> 00:46:09.360
we tried to call web.buttons,
grab the cancel button label, and tap it.

00:46:09.410 --> 00:46:11.350
That cancel button was
not showing at the time,

00:46:11.350 --> 00:46:14.670
it was not even valid,
it was in the accessibility framework,

00:46:14.670 --> 00:46:15.950
so it doesn't exist.

00:46:16.010 --> 00:46:18.270
A better way to do this is to
use the method that I showed

00:46:18.330 --> 00:46:20.620
you earlier in the slides,
which is to check whether

00:46:20.620 --> 00:46:22.390
or not this is valid,
and then tap it.

00:46:22.520 --> 00:46:24.200
If it's valid, tap it.

00:46:24.200 --> 00:46:28.540
If it's not valid,
and you expect it to be valid,

00:46:28.540 --> 00:46:30.080
log a failure.

00:46:30.080 --> 00:46:33.640
And so that's a demo of how to use
UIAutomation with instruments on iOS.

00:46:33.640 --> 00:46:38.520
Thanks.

00:46:43.120 --> 00:46:45.350
If you have more questions,
Vicky is the Internet and

00:46:45.350 --> 00:46:49.090
Web Technologies Evangelist,
and you guys, oh, yes, let's hear it.

00:46:49.120 --> 00:46:52.060
Jury is the Developer Tools Evangelist.

00:46:52.100 --> 00:46:55.330
If you want to find out more
about Apple Accessibility,

00:46:55.330 --> 00:47:00.100
you can go online to
Apple.com/accessibility.

00:47:00.160 --> 00:47:02.550
And if you want to find out
more about UIAutomation on iOS,

00:47:02.550 --> 00:47:04.100
search developer.apple.com.

00:47:04.100 --> 00:47:08.070
But before you leave the room, guys,
I want to give you a few takeaways.

00:47:08.110 --> 00:47:10.100
We covered a lot of things here.

00:47:10.220 --> 00:47:13.100
We covered how to make your
application more accessible,

00:47:13.100 --> 00:47:16.100
how to use these devices
with assistive technology.

00:47:16.100 --> 00:47:19.050
We covered how to automate your apps.

00:47:19.050 --> 00:47:22.070
But if there's just a couple
things I want you to take away,

00:47:22.190 --> 00:47:24.100
it's that, first of all,
fixing accessibility

00:47:24.100 --> 00:47:26.100
bugs are usually really,
really easy.

00:47:26.100 --> 00:47:28.940
I think in the entire presentation,
including the automation

00:47:28.940 --> 00:47:32.090
scripts that we added,
it was probably 30 lines of code total

00:47:32.100 --> 00:47:36.980
in this existing application that
already worked for sighted users.

00:47:38.030 --> 00:47:39.480
The other thing is that you
should be testing already.

00:47:39.590 --> 00:47:43.710
We all hate using buggy applications,
so one way to catch more bugs

00:47:43.810 --> 00:47:46.050
is to automate that testing.

00:47:46.170 --> 00:47:48.030
And accessibility makes it easier.

00:47:48.170 --> 00:47:52.120
If you make your application accessible,
then it's essentially scriptable.

00:47:52.230 --> 00:47:55.450
But first and foremost,
accessibility is not about code,

00:47:55.450 --> 00:47:58.280
it's not about compliance,
it's about the people.

00:47:58.490 --> 00:47:59.860
So if you think about it
from the terms of code,

00:47:59.940 --> 00:48:01.310
then you're going to forget something.

00:48:01.320 --> 00:48:05.500
You're not going to use the device and
figure out that you've got essentially a

00:48:05.500 --> 00:48:07.580
usability error with the screen reader.

00:48:07.660 --> 00:48:10.100
If you think about compliance,
maybe you'll get past it,

00:48:10.100 --> 00:48:12.560
but you're going to be doing
the bare minimum possible,

00:48:12.560 --> 00:48:15.400
and that's not the right
way to use accessibility.

00:48:15.400 --> 00:48:18.510
Take pride in your work,
and realize that all users

00:48:18.510 --> 00:48:22.120
need to use these devices,
all users want to use your applications,

00:48:22.120 --> 00:48:24.340
and make them as accessible as possible.