WEBVTT

00:00:11.940 --> 00:00:15.260
Good afternoon.

00:00:15.370 --> 00:00:19.600
Welcome to Customizing the
Appearance of UIKit Controls.

00:00:23.970 --> 00:00:25.080
My name is Chris Parker.

00:00:25.170 --> 00:00:26.900
I'm an iOS Frameworks Engineer.

00:00:26.900 --> 00:00:28.900
I work on UIKit.

00:00:28.900 --> 00:00:32.460
And we're going to spend the next hour or
so talking about all the stuff that we've

00:00:32.460 --> 00:00:38.540
added to iOS 5 that allows you to get
your custom look into your applications.

00:00:38.680 --> 00:00:41.890
So our standard look is
pretty straightforward,

00:00:41.980 --> 00:00:42.660
right?

00:00:42.660 --> 00:00:44.870
This is mail on the iPhone.

00:00:44.870 --> 00:00:49.340
We've got that sort of blue-gray
look at the top for the

00:00:49.380 --> 00:00:51.910
navigation bars and the toolbars.

00:00:52.150 --> 00:00:56.800
That color scheme is pushed throughout
the application as you navigate using

00:00:56.800 --> 00:00:59.540
push and pop and view controllers.

00:00:59.540 --> 00:01:03.230
The toolbar buttons are
all that white etched look.

00:01:03.260 --> 00:01:05.680
And, you know,
it's a very straightforward,

00:01:05.730 --> 00:01:07.110
it's a very clean, basic look.

00:01:07.110 --> 00:01:09.830
And it's a good starting point
for a lot of applications.

00:01:10.010 --> 00:01:13.730
But now that we've seen so many
applications on the store and all of the

00:01:13.730 --> 00:01:17.040
really custom artwork things that people
are doing to support their features and

00:01:17.040 --> 00:01:20.820
to really distinguish your applications,
it's clear that we've needed a little

00:01:20.820 --> 00:01:25.540
more to be able to give you guys a
lot more help in customizing UIKit.

00:01:25.540 --> 00:01:29.050
The iPad has a very silver look to it,
right?

00:01:29.050 --> 00:01:32.670
The toolbars and nav bars
are all that gray look.

00:01:32.670 --> 00:01:35.440
All the gray tint color is
pushed through it as well.

00:01:35.440 --> 00:01:36.180
Same thing.

00:01:36.180 --> 00:01:38.950
As you push and pop
navigation controllers,

00:01:38.950 --> 00:01:41.550
you get, you know, that same gray bar.

00:01:41.550 --> 00:01:44.980
You'd like to be able to
customize all of that stuff too.

00:01:45.100 --> 00:01:48.180
So I thought we'd start with sort
of a very basic application as

00:01:48.180 --> 00:01:50.660
an example here on the slides.

00:01:50.660 --> 00:01:53.490
You might be creating, say,
a control application

00:01:53.490 --> 00:01:54.760
for a conference room.

00:01:54.760 --> 00:01:57.240
So you'll have things like the
level of the house lights or the

00:01:57.240 --> 00:02:01.030
talk progress or the voltage that
we've got wired up to the chairs.

00:02:01.030 --> 00:02:06.300
Yeah, you thought those power
strips are all for you guys,

00:02:06.430 --> 00:02:07.520
right?

00:02:07.520 --> 00:02:10.860
And, you know,
the projector being on or the demo

00:02:10.970 --> 00:02:14.700
computers being on and the bar
button items that appear there.

00:02:14.810 --> 00:02:17.040
And your designer comes
to you and they say,

00:02:17.040 --> 00:02:19.450
you know, I've got a really great idea.

00:02:19.450 --> 00:02:23.520
Let's push a different color scheme
through your entire application.

00:02:23.570 --> 00:02:23.940
Let's do that.

00:02:23.940 --> 00:02:29.260
So we've added tint color to almost
every single control in UIKit.

00:02:29.260 --> 00:02:32.550
So if you've got a color scheme
that you want to push through it,

00:02:32.550 --> 00:02:33.810
you can do this now.

00:02:36.050 --> 00:02:40.500
So this includes things like the
navigation bar and toolbar colors,

00:02:40.640 --> 00:02:47.050
the text that's in those buttons,
the tracks for all the different

00:02:47.050 --> 00:02:50.660
UI sliders and progress indicators,
the activity view,

00:02:50.660 --> 00:02:53.210
UI activity indicator view,
right just to the right

00:02:53.210 --> 00:02:54.440
of the talk progress bar.

00:02:54.440 --> 00:02:56.300
You can color those now, too.

00:02:57.600 --> 00:03:00.100
And you can get a, you know,
you can choose your color scheme.

00:03:00.100 --> 00:03:03.600
We do take the tint color that you
give us for all of these things and,

00:03:03.660 --> 00:03:06.450
you know, we might massage the color a
little bit one way or the other

00:03:06.450 --> 00:03:08.940
depending on what the background
of the control originally was.

00:03:09.100 --> 00:03:12.200
But you can get a nice blue look
also just by pushing UI color

00:03:12.200 --> 00:03:13.830
blue color all the way through.

00:03:14.410 --> 00:03:19.090
You can also do some really terrible,
awful things.

00:03:20.300 --> 00:03:23.960
Don't ship this, please.

00:03:23.960 --> 00:03:27.560
So, you know, when your designer says,
"Wow, maybe you shouldn't use quite

00:03:27.740 --> 00:03:30.590
those colors," they probably
know what they're talking about.

00:03:30.680 --> 00:03:37.070
We've also gone through and put
in support for going from this,

00:03:37.390 --> 00:03:42.130
which is again our very basic look,
to something more like this.

00:03:42.220 --> 00:03:46.950
And that includes image support in
almost every single control in UIKit.

00:03:52.990 --> 00:03:58.900
So here is a UI navigation bar with
a different image as its background.

00:03:58.900 --> 00:04:02.860
All of the tracks that are
here for the UI slider,

00:04:02.860 --> 00:04:06.740
the button has a different color,
but the chair voltage slider there has

00:04:06.740 --> 00:04:08.850
a different image for its minimum track.

00:04:09.120 --> 00:04:11.040
The talk progress bar has an image.

00:04:11.040 --> 00:04:13.780
The buttons all have their own images.

00:04:13.780 --> 00:04:17.220
These are all things that
are built in right now.

00:04:18.160 --> 00:04:21.420
And the first thing to
talk about here is navbar.

00:04:21.420 --> 00:04:25.850
Set background image for bar metrics.

00:04:27.110 --> 00:04:35.240
Pre-iOS 5, we've seen some fairly novel
approaches to getting this to work.

00:04:35.240 --> 00:04:37.550
We do support this.

00:04:37.600 --> 00:04:38.520
It's not obvious.

00:04:38.600 --> 00:04:41.170
If you need to do this kind of
thing with a navigation bar,

00:04:41.170 --> 00:04:44.410
the way it works pre-iOS
4.0 is you would create your

00:04:44.500 --> 00:04:48.540
navigation controller in a nib,
select the navigation bar in that nib,

00:04:48.540 --> 00:04:51.140
and set its custom
class to your subclass.

00:04:51.140 --> 00:04:53.770
And then when that whole
thing comes up out of the nib,

00:04:53.770 --> 00:04:56.660
you'll get your navigation bar in there.

00:04:56.680 --> 00:04:59.040
So you don't have to resort to
the method swizzling and the

00:04:59.040 --> 00:05:00.510
category smashing to do this.

00:05:00.670 --> 00:05:05.090
But in iOS 5.0 now, you just have to call
setBackgroundImage for bar metrics

00:05:05.090 --> 00:05:07.640
and we'll take care of it for you.

00:05:07.640 --> 00:05:09.410
The bar metrics are just an enum.

00:05:09.410 --> 00:05:14.200
UI bar metrics default is the
44-point high UI navigation bar that

00:05:14.200 --> 00:05:19.520
you get on the phone in portrait
and on the iPad in all orientations,

00:05:19.600 --> 00:05:20.000
right?

00:05:20.000 --> 00:05:23.120
The iPad's big enough that we
don't have to shrink that bar.

00:05:23.120 --> 00:05:25.800
UI bar metrics landscape phone
is the one where when you rotate

00:05:25.800 --> 00:05:28.410
the phone to landscape phone,
we make the navigation bar thinner

00:05:28.410 --> 00:05:30.810
because we want to get as much
space as possible for the content

00:05:30.880 --> 00:05:34.260
of the navigation controller and not
for the navigation Chrome itself,

00:05:34.260 --> 00:05:35.260
right?

00:05:35.260 --> 00:05:39.620
So we've also gone ahead and allowed
you to do title text attributes.

00:05:39.680 --> 00:05:41.880
So not only do we're putting
images in here for customization,

00:05:41.950 --> 00:05:44.980
you're also going to be able to
get your own fonts and colors and

00:05:45.140 --> 00:05:47.890
things like that into the nav bar.

00:05:51.830 --> 00:05:54.950
And it's not shown in
this particular slide,

00:05:55.070 --> 00:05:58.800
but left bar button items
and right bar button items.

00:05:58.800 --> 00:06:03.040
These are properties where you can
set an array of bar button items

00:06:03.040 --> 00:06:06.290
rather than just one on each side.

00:06:10.450 --> 00:06:14.040
And finally, also, Left Item Supplement
Back Button is kind of neat.

00:06:14.120 --> 00:06:17.290
As you push and pop view controllers,
the back button,

00:06:17.290 --> 00:06:19.240
since you could only have one,
you had pretty much the

00:06:19.240 --> 00:06:20.400
back button and that was it.

00:06:20.540 --> 00:06:23.840
You can set this property and
as you push view controllers in,

00:06:23.920 --> 00:06:26.730
if they have left items,
they will show up to the right

00:06:26.730 --> 00:06:27.900
of the back button there.

00:06:27.940 --> 00:06:31.210
So you can start putting buttons
up next to the back button and

00:06:31.210 --> 00:06:33.400
have those dynamically come and go.

00:06:33.650 --> 00:06:35.400
There's not a lot of
space up in the navbar.

00:06:35.400 --> 00:06:36.400
You can see that right now.

00:06:36.400 --> 00:06:40.220
So this is sort of a
used judiciously feature.

00:06:42.520 --> 00:06:44.980
For bar button items,
you can do the same thing.

00:06:44.980 --> 00:06:47.080
Set background image
for state bar metrics.

00:06:47.080 --> 00:06:50.140
And for the back button,
you can also set the back button

00:06:50.280 --> 00:06:52.720
background image for state bar metrics.

00:06:52.720 --> 00:06:57.390
So you'll be able to wedge in your
own images for all of these buttons.

00:06:57.400 --> 00:07:02.940
So as your designer comes up with
their snow leopard print flavor of

00:07:02.940 --> 00:07:06.060
bar button items and they want to
put something specific in there,

00:07:06.060 --> 00:07:09.200
you'll be able to actually
accommodate that just by taking the

00:07:09.200 --> 00:07:11.180
images in and using them directly.

00:07:11.860 --> 00:07:14.460
Marian Goldeen,
our iOS Frameworks resident

00:07:14.460 --> 00:07:17.960
mountain biker who puts us all
to shame with her effort in

00:07:17.960 --> 00:07:20.390
getting into work every morning,
is going to show you some

00:07:20.540 --> 00:07:24.290
of the customizing instances
API that we've added to UIKit.

00:07:24.300 --> 00:07:26.530
So, Marian, for the demo.

00:07:32.030 --> 00:07:33.000
Thank you, Chris.

00:07:33.070 --> 00:07:37.560
And we'll have our demo
showing up here in a minute,

00:07:37.560 --> 00:07:37.560
I think.

00:07:39.900 --> 00:07:41.900
That looks better.

00:07:41.900 --> 00:07:42.660
All right.

00:07:42.700 --> 00:07:43.900
Thank you.

00:07:43.910 --> 00:07:47.100
So first I'm going to just walk
you around this application,

00:07:47.100 --> 00:07:49.340
this demo application,
to get you oriented.

00:07:49.430 --> 00:07:51.220
It's a simple application.

00:07:51.260 --> 00:07:57.340
It's a faux astronomy application
using images from the Hubble telescope.

00:07:58.540 --> 00:08:02.680
And as you see, it's in a tab bar
controller with two tabs.

00:08:02.750 --> 00:08:05.410
The first tab is just a
regular old view controller.

00:08:05.410 --> 00:08:11.250
We have a toolbar at the top,
and we have the beginnings of our

00:08:11.250 --> 00:08:15.220
theme with dark bars and reddish text.

00:08:15.590 --> 00:08:18.790
The title is a custom
view bar button item,

00:08:18.790 --> 00:08:21.790
which is a label that's been customized.

00:08:21.860 --> 00:08:24.840
And if we go over to the
second view controller,

00:08:24.920 --> 00:08:27.720
we see that we have a
navigation controller,

00:08:27.740 --> 00:08:31.560
and we have white text up there,
which is unfortunate.

00:08:32.050 --> 00:08:36.140
And the same thing,
it's got white text in the buttons,

00:08:36.170 --> 00:08:38.840
the next button and the back button.

00:08:39.680 --> 00:08:43.210
And for the title,
you know on iOS 4 we could do the

00:08:43.330 --> 00:08:47.200
same thing that we did in the toolbar,
which is we could take a UI label

00:08:47.200 --> 00:08:51.740
and customize it and use it as a
custom view for the title view.

00:08:51.830 --> 00:08:54.120
We're a little more stuck
for the button items,

00:08:54.180 --> 00:08:58.560
and it's also kind of a pain to do
that for every single view controller.

00:08:58.730 --> 00:09:02.190
So let's do it using our
title text attributes.

00:09:04.420 --> 00:09:07.260
Now we have to go find our code.

00:09:07.370 --> 00:09:10.800
And in application
didFinishLaunchingWithOptions

00:09:10.800 --> 00:09:15.980
in the delegate method,
in the delegate, we have--

00:09:16.770 --> 00:09:19.110
That's where our navigation
controller is set up,

00:09:19.110 --> 00:09:24.120
and it's a good place to set the title
text attributes on our navigation bar.

00:09:24.600 --> 00:09:27.360
In this case,
I'm only interested in the text color.

00:09:27.410 --> 00:09:32.750
You can set text color, shadow color,
shadow offset, and also the font.

00:09:33.780 --> 00:09:38.690
And we need to do the same thing
for the navigation bar button items.

00:09:39.180 --> 00:09:41.540
Those are set up in the second
view controller because,

00:09:41.600 --> 00:09:45.100
as you recall, the bar button items are
associated with the navigation

00:09:45.160 --> 00:09:46.670
item for the view controller.

00:09:46.780 --> 00:09:49.200
And I took a shortcut,
and I've only got one

00:09:49.200 --> 00:09:51.540
view controller class,
but you could possibly

00:09:51.540 --> 00:09:53.560
have more than one.

00:09:54.040 --> 00:09:56.760
And to customize the
back bar button item,

00:09:56.820 --> 00:10:01.070
we need to make a custom
back bar button item.

00:10:01.080 --> 00:10:03.060
This is a template.

00:10:03.090 --> 00:10:07.300
We take certain things from it
to construct your back item.

00:10:07.530 --> 00:10:12.680
And one of the things we do take from
it are the title text attributes.

00:10:13.240 --> 00:10:22.630
And we set them twice because I want one
color for the normal state of the control

00:10:23.880 --> 00:10:28.140
And I want a slightly brighter color
because my standard color has a

00:10:28.200 --> 00:10:32.460
diminished alpha to give it a sort
of a diminished state because I want

00:10:32.460 --> 00:10:38.380
a quiet UI for the highlighted
or pressed state of the control.

00:10:38.470 --> 00:10:42.230
And we want to do the same
thing for the next item.

00:10:43.390 --> 00:10:44.940
And it's exactly the same thing.

00:10:45.020 --> 00:10:48.830
Set title text attributes for state.

00:10:48.860 --> 00:10:51.680
And let's take a look at how it looks.

00:10:58.450 --> 00:11:00.740
Go over to our navigation bar.

00:11:00.780 --> 00:11:07.420
And sure enough, nice and red,
just like we wanted for all of the views.

00:11:08.470 --> 00:11:11.900
Well, that takes care of the top bars.

00:11:11.960 --> 00:11:16.220
But looking down at the tab bar,
it's blue.

00:11:16.330 --> 00:11:17.910
It's not red.

00:11:18.080 --> 00:11:22.900
We're OK with the unselected
tab bar item with that gray,

00:11:22.900 --> 00:11:25.640
but we want red for the
selected tint color,

00:11:25.660 --> 00:11:28.860
and we want red for that
selected text color.

00:11:28.980 --> 00:11:30.780
Once again, we can take care of it.

00:11:30.840 --> 00:11:34.510
We have to remember
where our instances are.

00:11:34.880 --> 00:11:42.280
The tab bar controller is again
set up in the application delegate.

00:11:42.790 --> 00:11:44.700
Let's go back to that.

00:11:44.700 --> 00:11:47.810
The application did finish launching.

00:11:49.010 --> 00:11:52.160
And you can get the tab bar
from the tab bar controller.

00:11:52.170 --> 00:11:58.220
And you can set its selected image tint
color to red color or any color you like.

00:11:58.240 --> 00:12:01.000
And we'll do our best to
make it look nice for you.

00:12:01.040 --> 00:12:06.150
And the tab bar items,
we have one for each view controller.

00:12:06.440 --> 00:12:08.970
One for the navigation
controller that's set up here.

00:12:09.200 --> 00:12:12.690
Also,
an application did finish launching.

00:12:12.990 --> 00:12:15.600
And we're setting the
title text attributes,

00:12:15.680 --> 00:12:18.660
this time just once for
the selected control state,

00:12:18.660 --> 00:12:23.900
which is the state that the tab
bar item is in when it is selected.

00:12:24.120 --> 00:12:27.840
And we need to set the same
thing on the other tab bar item

00:12:27.840 --> 00:12:30.330
for the first view controller.

00:12:32.870 --> 00:12:36.220
Here in Init with NibName,
where the tab bar item is set up,

00:12:36.230 --> 00:12:39.720
is a good place to also set
its title text attributes.

00:12:39.820 --> 00:12:42.590
So now let's take a look at that tab bar.

00:12:47.460 --> 00:12:49.310
and hooray!

00:12:49.760 --> 00:12:50.360
It's red.

00:12:50.570 --> 00:12:51.180
Yay!

00:12:51.300 --> 00:12:53.030
Yes.

00:12:55.100 --> 00:12:57.260
Well, that looks good,
and it's all sort of red.

00:12:57.260 --> 00:13:01.540
It actually matches that nice
image of the supernova remnant.

00:13:01.560 --> 00:13:05.400
But suppose we have some controls
for scanning the universe,

00:13:05.400 --> 00:13:07.580
and we don't want them
to be blue and white,

00:13:07.670 --> 00:13:10.010
so let's customize them.

00:13:14.360 --> 00:13:16.580
All those controls are set up
in the first view controller.

00:13:16.580 --> 00:13:20.450
I should point out to you
that in order to set them up,

00:13:20.550 --> 00:13:23.950
I have IB outlets for all of them.

00:13:24.140 --> 00:13:28.530
I might want IB outlets for
them for other reasons also,

00:13:28.530 --> 00:13:32.790
but I definitely need them
to customize them this way.

00:13:35.170 --> 00:13:39.020
And so we set the on tint
color for the scan switch.

00:13:39.100 --> 00:13:40.860
We set the color for the spinner.

00:13:40.860 --> 00:13:45.200
The progress view,
we can set the progress tint

00:13:45.200 --> 00:13:46.800
color and the track tint color.

00:13:46.800 --> 00:13:48.760
You'll notice I'm using
the same color for both.

00:13:48.920 --> 00:13:51.030
In this case,
we adjusted a little bit so that it'll

00:13:51.030 --> 00:13:52.740
actually look a little different.

00:13:53.240 --> 00:13:57.240
For the slider,
we're a little more prosaic,

00:13:57.240 --> 00:14:03.160
and you set all three colors, the thumb,
the minimum track, the maximum track,

00:14:03.160 --> 00:14:04.920
and you just set them up.

00:14:04.980 --> 00:14:08.650
Now, the segmented control is
what I'm going to do next,

00:14:08.650 --> 00:14:12.470
and tint color works on the
segmented control in the bars,

00:14:12.510 --> 00:14:18.100
but we haven't applied it to the
segmented control in Lucentive

00:14:18.100 --> 00:14:20.520
View like you saw there.

00:14:20.520 --> 00:14:23.220
But what you can do is you can
customize the look of your app controls.

00:14:23.220 --> 00:14:27.630
So I'm going to customize its
background images completely,

00:14:27.730 --> 00:14:31.690
and so my designer alter ego
created some images that I can

00:14:31.690 --> 00:14:34.290
use for the segment background.

00:14:34.510 --> 00:14:38.260
And I'm setting it for
the normal control state.

00:14:38.270 --> 00:14:42.590
And in this case,
the bar metrics don't apply to

00:14:42.590 --> 00:14:44.540
this particular segment of control.

00:14:44.540 --> 00:14:46.900
If it were in a navigation
bar on the phone,

00:14:46.900 --> 00:14:48.620
it could very well apply.

00:14:48.620 --> 00:14:52.730
But since it doesn't apply,
I'm using UI Bar Metrics default.

00:14:53.910 --> 00:14:58.520
I also want to set this
for control state selected.

00:14:58.540 --> 00:15:01.660
And a moment here,
because Sigma Control is

00:15:01.660 --> 00:15:02.530
a little complicated.

00:15:02.670 --> 00:15:04.000
It doesn't just have a background.

00:15:04.000 --> 00:15:06.100
It also has the divider image.

00:15:06.180 --> 00:15:12.460
And the divider image-- in our case,
I'm using the same divider

00:15:12.500 --> 00:15:14.480
image in all cases.

00:15:14.490 --> 00:15:16.600
No, thank you, Xcode.

00:15:16.600 --> 00:15:18.090
All right.

00:15:19.300 --> 00:15:23.460
But in a more complicated image,
you might have a case where the divider

00:15:23.460 --> 00:15:27.220
image would actually be different
for shadows or whatever purpose,

00:15:27.390 --> 00:15:31.480
depending on which side
there was a selected image.

00:15:31.690 --> 00:15:35.270
So that's what this
for left segment state,

00:15:35.420 --> 00:15:37.560
right segment state
arguments are all about.

00:15:37.650 --> 00:15:40.400
In my case,
it's more simple and it doesn't matter,

00:15:40.490 --> 00:15:42.810
so they both get UI control state normal.

00:15:43.390 --> 00:15:47.540
And similar to the bar button items,
I set the title text attributes.

00:15:47.680 --> 00:15:50.080
So let's see how that looks.

00:15:56.050 --> 00:15:59.600
Much better,
much more like the rest of the app.

00:15:59.680 --> 00:16:01.500
And I feel like, hey,
this is pretty good.

00:16:01.500 --> 00:16:02.840
It's all black and red.

00:16:02.850 --> 00:16:03.600
I'm good to go.

00:16:03.600 --> 00:16:06.620
And then my designer says, well,
actually,

00:16:06.620 --> 00:16:10.800
those images for the segmented control,
they're all flat.

00:16:10.800 --> 00:16:14.420
And I want a consistent design
language through this app.

00:16:14.490 --> 00:16:17.100
And I want other images.

00:16:17.100 --> 00:16:18.980
I don't like this shiny bar.

00:16:18.980 --> 00:16:23.720
I don't like this shiny selection
indicator image in the tab bar.

00:16:23.720 --> 00:16:25.920
I don't like these shiny buttons.

00:16:25.960 --> 00:16:27.820
I don't like these shiny buttons up here.

00:16:27.830 --> 00:16:29.700
Here's a bucket of flat artwork.

00:16:29.780 --> 00:16:31.750
Please put this into your app.

00:16:31.750 --> 00:16:33.680
Why, certainly, say I.

00:16:38.320 --> 00:16:38.920
Let's see.

00:16:39.020 --> 00:16:41.400
We've got a background
image for the toolbar,

00:16:41.400 --> 00:16:43.800
and here we are in our
first view controller,

00:16:43.960 --> 00:16:45.640
and it's got an outlet for the toolbar.

00:16:45.640 --> 00:16:50.560
And it's actually the same background
image for the navbar and the toolbar.

00:16:50.560 --> 00:16:56.630
Now, the toolbar has a special thing,
toolbar position.

00:16:57.360 --> 00:16:57.900
Take a moment here.

00:16:58.000 --> 00:17:00.740
Toolbars can be at the top
of your app or at the bottom,

00:17:00.740 --> 00:17:03.070
particularly on the iPad.

00:17:03.220 --> 00:17:08.540
And my artwork doesn't care,
so I have UI toolbar position any.

00:17:08.540 --> 00:17:11.610
But of course,
you could also have top or bottom if you

00:17:11.720 --> 00:17:14.410
had specific artwork for those positions.

00:17:14.720 --> 00:17:19.330
So we have the toolbar,
and we also have some other bars.

00:17:19.390 --> 00:17:22.530
We have a navigation
bar background image.

00:17:22.570 --> 00:17:25.030
Again, the bar metrics.

00:17:25.160 --> 00:17:27.990
And we have a tab bar background image.

00:17:28.220 --> 00:17:32.600
No bar metrics for the tab bar
because it's the same size.

00:17:32.660 --> 00:17:36.100
And we have the tab bar
selection indicator image.

00:17:36.210 --> 00:17:39.550
And there was only a couple more,
the back button and the next button.

00:17:39.590 --> 00:17:41.930
So let's take care of those.

00:17:46.200 --> 00:17:48.680
And here's where we got
the title text attributes.

00:17:48.740 --> 00:17:53.390
Notice with the back item,
we have set back button background image.

00:17:53.780 --> 00:17:58.560
And we're doing a normal
state and a pressed state.

00:17:58.610 --> 00:18:00.790
And for the next item,
we have background image,

00:18:00.880 --> 00:18:06.110
just not back button background image,
but just background image.

00:18:06.160 --> 00:18:10.910
And that should complete our
customization of this application.

00:18:16.830 --> 00:18:17.560
And there you go.

00:18:17.560 --> 00:18:18.680
You see the flat images.

00:18:18.730 --> 00:18:20.600
We still have our nice red colors.

00:18:20.620 --> 00:18:24.150
And perhaps you notice the--
can you see it well enough,

00:18:24.280 --> 00:18:29.200
the flat image down there around the tab?

00:18:29.240 --> 00:18:32.030
And also, maybe you can see these
better up here at the top.

00:18:32.270 --> 00:18:37.360
And you see we have different
ones for the pressed states.

00:18:37.360 --> 00:18:40.280
And now we have-- thank you.

00:18:43.000 --> 00:18:46.100
This is kind of an overview
of the customization.

00:18:46.100 --> 00:18:52.660
It is not at all a complete list of
the customization methods that we have.

00:18:52.880 --> 00:18:56.360
Please feel free to read the headers and
look for things that you might want to

00:18:56.360 --> 00:18:58.330
do because it's very likely to be there.

00:18:58.330 --> 00:19:03.840
But we have more in store for you,
so I'd like Chris to come back and give

00:19:03.840 --> 00:19:07.150
us some more talking with some slides.

00:19:13.780 --> 00:19:15.240
We were going to do the
reading header thing,

00:19:15.240 --> 00:19:16.930
but I heard Craig did
that joke on Monday,

00:19:17.120 --> 00:19:20.220
so I'm not going to do that here.

00:19:20.630 --> 00:19:24.210
Quick show of hands,
how many of you completely lost

00:19:24.390 --> 00:19:28.560
track of where Marian was in the
view controller stack customizing

00:19:28.560 --> 00:19:30.960
all of those various UI elements?

00:19:32.800 --> 00:19:34.800
Excellent.

00:19:34.800 --> 00:19:35.400
Don't feel bad.

00:19:35.400 --> 00:19:37.280
I get lost with it, too.

00:19:37.350 --> 00:19:42.660
It turns out that if we're going to write
customization API to customize the entire

00:19:42.660 --> 00:19:45.700
look of an application all at once,
it's really hard.

00:19:46.740 --> 00:19:49.140
If you've used other
frameworks that do this kind of

00:19:49.140 --> 00:19:52.240
customization for look and feel,
there's lots of different

00:19:52.240 --> 00:19:53.560
axes you can control.

00:19:53.560 --> 00:19:58.340
There are lots of sort of out-of-band
things that you call in order to get that

00:19:58.480 --> 00:20:03.480
custom look in terms of theme files and
things like that into an application.

00:20:03.480 --> 00:20:06.480
We wanted to try and make this
as easy as possible because it

00:20:06.570 --> 00:20:09.890
also turns out that using those
customization APIs after you've

00:20:09.990 --> 00:20:12.030
built all of those things up is hard.

00:20:12.080 --> 00:20:13.760
So it's hard for us to write.

00:20:13.850 --> 00:20:15.820
It's hard for you guys to use.

00:20:15.820 --> 00:20:17.480
So we wanted to do...
We wanted to do three things.

00:20:17.480 --> 00:20:20.540
We wanted to make this API as
easy as possible to provide a

00:20:20.720 --> 00:20:24.350
consistent look in your applications,
and that look should support

00:20:24.470 --> 00:20:26.140
your application features.

00:20:26.160 --> 00:20:30.620
And we looked at what we were doing
with all of the different customization

00:20:30.810 --> 00:20:34.650
in UIKit on a per-class basis and
tried to work all of this out,

00:20:34.650 --> 00:20:36.800
and it was really difficult.

00:20:36.800 --> 00:20:43.250
So we went back and looked at how
we configure individual instances.

00:20:43.280 --> 00:20:44.560
So this is a UI slider.

00:20:44.560 --> 00:20:46.200
You saw Marian's demo.

00:20:46.880 --> 00:20:50.220
Where she was customizing it by
calling set minimum track tint color,

00:20:50.220 --> 00:20:51.910
and you pass it a color,
and we go ahead and

00:20:51.910 --> 00:20:54.770
color that slider red.

00:20:56.300 --> 00:20:59.590
But if you want to do this for every
single slider in your application,

00:20:59.590 --> 00:21:01.770
well, there are a couple of different
ways we could have approached it.

00:21:01.810 --> 00:21:08.200
You could wrap this method in a useR
theme for every single different

00:21:08.200 --> 00:21:11.100
customization for your classes.

00:21:11.100 --> 00:21:16.700
Or we went ahead and introduced this idea
of what's called the Appearance Proxy.

00:21:16.700 --> 00:21:20.320
So you will send the appearance
message to the UISlider class.

00:21:20.590 --> 00:21:24.800
That gives you back a proxy object that's
going to stand in for all of the future

00:21:24.800 --> 00:21:28.930
customizations you're going to do for,
in this case, a UISlider.

00:21:29.100 --> 00:21:32.850
You'll send that object the
setMinimumTrack tint color,

00:21:32.850 --> 00:21:36.280
and every UISlider you create
in your application now

00:21:36.280 --> 00:21:38.240
will have that tint color.

00:21:42.900 --> 00:21:45.540
So if you know how to
customize one instance,

00:21:45.560 --> 00:21:50.670
a specific instance of a control,
you now know how to customize

00:21:50.800 --> 00:21:52.740
every single one of them.

00:21:53.000 --> 00:21:54.660
Again,
this is called the Appearance Proxy.

00:21:54.840 --> 00:21:58.820
If you've done any of the desktop
programming on the AppKit,

00:21:58.870 --> 00:22:01.200
they have a similar concept
with the Animator Proxy.

00:22:01.270 --> 00:22:03.630
You load up all the different
animations you want.

00:22:03.640 --> 00:22:06.340
And when you commit the animations,
the proxy plays those back.

00:22:06.380 --> 00:22:09.440
That's what this is basically doing here,
but it's for appearance and for

00:22:09.440 --> 00:22:11.190
the customizations we've put.

00:22:11.240 --> 00:22:14.860
And all of these methods for like
set minimum track tint color,

00:22:14.920 --> 00:22:17.480
they all participate in this system.

00:22:17.700 --> 00:22:20.570
The header is uiappearance.h.

00:22:20.570 --> 00:22:24.290
We've defined a single protocol
called the UIAppearanceProtocol,

00:22:24.300 --> 00:22:27.600
and we've applied this to
UIView and a few other classes.

00:22:27.600 --> 00:22:30.140
So anything that conforms
to the UIAppearanceProtocol,

00:22:30.140 --> 00:22:33.460
you can send the
AppearanceClass method to.

00:22:33.460 --> 00:22:37.640
That gives you the proxy object to send
all of your different customizations.

00:22:37.640 --> 00:22:42.720
And we've also gone through and
tagged the methods that are currently

00:22:42.720 --> 00:22:44.610
supported with UIAppearanceSelector.

00:22:44.650 --> 00:22:47.630
And this is just a little pound
to find that tells you which

00:22:47.630 --> 00:22:51.200
things we've worked on and tested
out to make sure that they work.

00:22:51.320 --> 00:22:54.660
We're sprinkling this through
additional methods as we go,

00:22:54.660 --> 00:22:57.780
so this will start appearing
in more and more places.

00:22:57.870 --> 00:23:01.470
But please do try all of
these things out for that.

00:23:01.640 --> 00:23:05.550
And this system is going to let
us do something a lot cleaner than

00:23:05.550 --> 00:23:07.500
what Marian was showing you earlier.

00:23:07.640 --> 00:23:10.650
And so she's going to show you more
about AppearanceProxy basics and

00:23:10.680 --> 00:23:13.400
how to configure your application.

00:23:19.800 --> 00:23:20.800
Thank you.

00:23:20.930 --> 00:23:24.130
So for this demo,
I'm going to pretty much go through that

00:23:24.430 --> 00:23:27.020
app that I just went through before,
and this time I'm going to

00:23:27.020 --> 00:23:30.790
do all the customizations
using the Appearance Proxy.

00:23:30.860 --> 00:23:35.720
I've actually adjusted the app just
a little bit and put two navigation

00:23:35.720 --> 00:23:40.150
controllers where I haven't set
the bar style yet because I'm

00:23:40.150 --> 00:23:42.320
going to set them both at once.

00:23:42.780 --> 00:23:46.260
And I just want to take a minute
and look at the pictures so you can

00:23:46.260 --> 00:23:48.530
see there's some neat-o pictures.

00:23:48.650 --> 00:23:50.730
Great website, hubblesite.org.

00:23:51.500 --> 00:23:52.660
Anyway...

00:23:54.460 --> 00:23:59.540
So let's get started and customize
it using the Appearance Proxy.

00:24:01.510 --> 00:24:04.900
So in this case,
I'm going to just stay inside one method.

00:24:04.900 --> 00:24:07.460
In the application delegate,
the application did

00:24:07.460 --> 00:24:09.590
finish launching method.

00:24:10.070 --> 00:24:13.940
And as I recall, I started with the bars,
the navigation bars.

00:24:13.940 --> 00:24:20.750
So let's set the bar style on
the navigation bar appearance.

00:24:21.050 --> 00:24:23.480
Similarly,
we'll set the title text attributes.

00:24:23.670 --> 00:24:26.910
I'm going to take care of doing
the bar customization that I did at

00:24:26.910 --> 00:24:29.580
the beginning of the demo before.

00:24:30.190 --> 00:24:33.180
And we need to set--

00:24:33.800 --> 00:24:39.400
The tab bar selected image tint color.

00:24:39.490 --> 00:24:42.100
And I remember the bar button items.

00:24:42.100 --> 00:24:45.090
They had title text attributes.

00:24:47.770 --> 00:24:50.740
Those title text attributes on the
UI bar button item appearance will be

00:24:50.740 --> 00:24:56.490
applied to all the bar button items,
including the back button.

00:24:58.740 --> 00:25:03.580
And so we've got the navigation bar,
the tab bar,

00:25:03.590 --> 00:25:05.500
and the title text attributes.

00:25:05.510 --> 00:25:11.940
And, ah, we needed the tab bar item
title text attributes.

00:25:12.490 --> 00:25:15.760
So once again,
you notice it particularly simplifies for

00:25:15.760 --> 00:25:18.890
those bar items in this particular demo.

00:25:18.930 --> 00:25:20.910
Let's take a look.

00:25:23.610 --> 00:25:24.180
And there we go.

00:25:24.180 --> 00:25:29.040
We have our selected image tint colors,
and our navigation bar

00:25:29.100 --> 00:25:31.540
has been customized.

00:25:31.560 --> 00:25:36.010
After we did that,
we took care of these controls.

00:25:36.220 --> 00:25:39.080
So let's take care of these controls.

00:25:42.100 --> 00:25:44.490
In this case,
we don't need any outlets for this,

00:25:44.520 --> 00:25:47.500
although, like I said,
we might need them for something else.

00:25:47.680 --> 00:25:51.560
So we want our switches to
have that on tint color.

00:25:51.620 --> 00:25:54.850
We want our activity indicator
views to have a color.

00:25:55.160 --> 00:25:57.900
Take care of the progress view.

00:25:58.920 --> 00:26:00.980
The slider.

00:26:00.980 --> 00:26:06.090
And we can do the background images and
such on the segmented control as well.

00:26:06.490 --> 00:26:09.320
So here we go,
background image for normal

00:26:09.490 --> 00:26:13.770
state and selected state,
the divider image,

00:26:13.770 --> 00:26:16.250
and the title text attributes.

00:26:16.350 --> 00:26:19.190
So this should take care of our controls.

00:26:25.410 --> 00:26:26.910
And there we go, all nice and red.

00:26:26.940 --> 00:26:32.300
And of course, last but not least was the
flat images for the bars.

00:26:32.330 --> 00:26:34.610
Let's take care of those.

00:26:41.470 --> 00:26:43.400
The navigation bar.

00:26:43.400 --> 00:26:46.200
The toolbar.

00:26:46.200 --> 00:26:48.500
Counting on my fingers here.

00:26:50.140 --> 00:26:52.340
The tab bar.

00:26:52.480 --> 00:26:57.100
So the tab bar has both the background
image and the selection indicator image.

00:26:57.190 --> 00:26:59.790
That belongs to the tab bar.

00:27:00.190 --> 00:27:05.980
And then we have the background
image for UI bar button items.

00:27:05.980 --> 00:27:12.380
So this is the square image.

00:27:12.380 --> 00:27:12.380
And then we have--

00:27:12.590 --> 00:27:16.350
The back button background
image for UI bar button item,

00:27:16.590 --> 00:27:20.110
and that's the pointing image.

00:27:24.800 --> 00:27:25.460
That covers it.

00:27:25.460 --> 00:27:27.950
I don't see any more gray code in there,
so I think I got it all.

00:27:27.950 --> 00:27:35.260
And yep, we've got all of our flat
images all in one place.

00:27:35.650 --> 00:27:39.580
And the customization will
continue if I change the app.

00:27:39.670 --> 00:27:43.190
I don't have to worry about
putting additional instance calls

00:27:43.460 --> 00:27:45.400
on every new instance that I add.

00:27:48.060 --> 00:27:49.990
And that's a simple way to
use the Appearance Proxy,

00:27:50.040 --> 00:27:52.570
but there's a more
complicated way to use it,

00:27:52.570 --> 00:27:52.790
too.

00:27:53.120 --> 00:27:57.950
And Chris has some slides to help
you get acquainted with that.

00:28:06.100 --> 00:28:10.100
So there are a lot of
really slick things here.

00:28:10.210 --> 00:28:13.540
But the appearance proxy lets you
consolidate the repeated code of

00:28:13.540 --> 00:28:16.840
taking an instance and configuring it,
and taking an instance

00:28:16.940 --> 00:28:19.160
and configuring it,
and put all of that logic in

00:28:19.160 --> 00:28:21.100
one place so you can do it once.

00:28:21.100 --> 00:28:22.020
And you can break these up.

00:28:22.180 --> 00:28:23.630
So for instance,
if you know that you're never

00:28:23.630 --> 00:28:26.390
going to load a particular
control until much later,

00:28:26.500 --> 00:28:29.550
you can call it just before you load
that control and then go ahead and do it.

00:28:29.690 --> 00:28:32.390
So if there are places where
you're worried about performance

00:28:32.390 --> 00:28:35.650
or you just don't want to do
all of that right in one place,

00:28:35.660 --> 00:28:37.800
you can do it on an on-demand basis.

00:28:37.920 --> 00:28:42.730
It starts taking effect right
after you call these things.

00:28:44.100 --> 00:28:47.960
So your designer comes along and says,
hey, you know what?

00:28:47.960 --> 00:28:48.780
We've got these buttons.

00:28:48.780 --> 00:28:53.230
And I want them to have the
default look all the time,

00:28:53.230 --> 00:28:56.710
but I want them to have a different
look only when they're contained

00:28:56.710 --> 00:28:58.540
in this other view controller.

00:28:58.540 --> 00:29:01.210
And in this case,
I'm going to put a button

00:29:01.490 --> 00:29:05.220
into a navigation controller,
and we want that to always

00:29:05.310 --> 00:29:09.110
have the red text color if it's
in a navigation controller,

00:29:09.430 --> 00:29:11.890
but we want the default
color at all other times.

00:29:12.700 --> 00:29:16.700
So the only other method in the
Appearance Proxy protocol is

00:29:16.700 --> 00:29:19.010
Appearance When Contained In.

00:29:25.580 --> 00:29:29.070
And this is a way that you can do
fine-grain control over how the

00:29:29.070 --> 00:29:32.610
appearance of your app changes depending
on what views and view controllers

00:29:33.010 --> 00:29:34.730
these things are all contained in.

00:29:34.780 --> 00:29:38.010
It takes a nil-terminated
list of classes,

00:29:38.010 --> 00:29:41.990
and those classes will conform to
the UIAppearanceContainer class.

00:29:42.110 --> 00:29:46.040
And this is an empty protocol
that we use to tag the views and

00:29:46.170 --> 00:29:50.870
view controllers that participate
in this containment system.

00:29:50.970 --> 00:29:55.050
And it's as simple to use as
the Appearance Proxy by default.

00:29:55.320 --> 00:30:01.430
So here is the button code to
illustrate the concept that I just

00:30:01.430 --> 00:30:03.100
showed you in graphics there.

00:30:03.150 --> 00:30:07.460
UIButtonAppearanceWhenContainedInUINav
igationControllerClass,

00:30:07.520 --> 00:30:09.700
setTitleColor,
red color for control state,

00:30:09.740 --> 00:30:10.800
UI control state normal.

00:30:10.910 --> 00:30:15.330
So again, the same configuration API for
an instance gets applied

00:30:15.490 --> 00:30:17.810
to this containment system.

00:30:18.020 --> 00:30:22.140
And then when we go ahead and actually
put that button into the nav controller,

00:30:22.140 --> 00:30:23.340
it changes color.

00:30:23.370 --> 00:30:24.780
You can do more complicated things.

00:30:24.870 --> 00:30:29.460
Like you can set the appearance
when contained in a custom view

00:30:29.990 --> 00:30:32.720
controller in another view controller.

00:30:32.790 --> 00:30:36.450
So you can set up hierarchies
for your appearance changes.

00:30:36.480 --> 00:30:41.300
So in this case,
this is an appearance proxy being

00:30:41.300 --> 00:30:45.830
asked for that when the button
is in a custom view controller,

00:30:45.830 --> 00:30:48.220
which is itself inside
a navigation controller,

00:30:48.350 --> 00:30:49.430
that should change.

00:30:49.470 --> 00:30:54.420
So here's the button with a
bare custom view controller.

00:30:54.420 --> 00:30:56.820
into it, nothing happens.

00:30:56.950 --> 00:30:59.970
Put that whole thing into
a UI navigation controller,

00:30:59.970 --> 00:31:02.300
and the title color turns red.

00:31:07.380 --> 00:31:10.080
So when your designer says, well,
I want just this corner of the

00:31:10.080 --> 00:31:14.800
application to look different,
you'll be able to do that.

00:31:14.820 --> 00:31:15.880
You know they're thinking about it.

00:31:15.960 --> 00:31:19.210
You know they're out there
in front of Photoshop going,

00:31:19.210 --> 00:31:21.120
oh, you know what we could do?

00:31:23.150 --> 00:31:26.560
So the way to read this is
almost the way I read it before,

00:31:26.560 --> 00:31:30.060
which is it helps if you put the
when contained in between each of

00:31:30.060 --> 00:31:31.940
the classes that you're passing in.

00:31:31.940 --> 00:31:34.950
So you would read this as the button's
appearance when contained in a

00:31:34.950 --> 00:31:38.340
custom view controller when contained
in a UI navigation controller.

00:31:38.340 --> 00:31:41.620
It sounds a lot like most of our
selectors when you read it out,

00:31:41.620 --> 00:31:45.680
but it's very descriptive and it'll
help you get the containment idea.

00:31:46.710 --> 00:31:50.490
This works based on the outermost
containment for composition.

00:31:50.490 --> 00:31:55.350
So if you have some competing
containers where you might have A,

00:31:55.350 --> 00:32:00.520
B, and C, and if B and C are further out,
the outermost containment

00:32:00.720 --> 00:32:02.320
winds up winning.

00:32:02.320 --> 00:32:04.030
It'll take some experimentation.

00:32:04.100 --> 00:32:07.820
It's worth opening up Xcode and creating
a couple of different view controllers

00:32:07.820 --> 00:32:11.470
and putting them inside of each other
to see exactly how this stuff plays out,

00:32:11.470 --> 00:32:14.260
but we'll have some
documentation for this as well.

00:32:15.280 --> 00:32:20.020
Marian's going to show you now
about how to use containment to

00:32:20.350 --> 00:32:24.540
tweak the look of your application
in different circumstances.

00:32:29.160 --> 00:32:34.680
Well, my Scanning the Universe app
has had an upgrade.

00:32:34.680 --> 00:32:39.190
And now when I bring up my controls,
I get a new little item up here.

00:32:39.440 --> 00:32:42.000
I actually want to just
call this out here.

00:32:42.060 --> 00:32:46.100
That's a plain toolbar,
but an item that's been tinted.

00:32:46.100 --> 00:32:46.910
It's not white.

00:32:47.090 --> 00:32:49.320
Just take note.

00:32:49.450 --> 00:32:53.560
So there's our control panel.

00:32:53.620 --> 00:32:56.880
You notice we're getting those red
looks from the Appearance Proxy,

00:32:56.910 --> 00:33:01.810
but our designers have given us
an Emerald City look to apply

00:33:02.310 --> 00:33:05.530
only in these control panels.

00:33:05.650 --> 00:33:11.630
And we've got three of them for Auriga,
Bootes, and Cygnus.

00:33:11.710 --> 00:33:15.600
And they all have to be green.

00:33:16.100 --> 00:33:21.450
The view for this view controller
is a controls view class.

00:33:21.620 --> 00:33:25.190
So this is a trivial subclass of UIView,
and I'm going to use

00:33:25.190 --> 00:33:27.900
it for my containment.

00:33:32.070 --> 00:33:39.920
So here's our back in the application
did finish launching method in the

00:33:39.920 --> 00:33:42.620
Appearance Containment App Delegate.

00:33:42.620 --> 00:33:46.500
We have all that stuff
from the previous demo.

00:33:46.520 --> 00:33:49.720
And now we have our
contained appearances.

00:33:49.920 --> 00:33:52.060
And the first one,
this is just the plain old Appearance

00:33:52.180 --> 00:33:58.730
Proxy so that the controls view actually
has a background color that is green.

00:33:58.990 --> 00:34:01.350
And the next one, we want our labels.

00:34:01.720 --> 00:34:03.520
They've got their own color.

00:34:03.590 --> 00:34:07.580
But we want them when contained
in the controls view class.

00:34:07.630 --> 00:34:10.160
I want to say a word here,
which is that UILabel is

00:34:10.210 --> 00:34:11.500
a pretty general class.

00:34:11.500 --> 00:34:16.740
And there are subclasses lying
around where you might be surprised.

00:34:16.920 --> 00:34:21.210
So if you just say UILabel
appearance and change some stuff,

00:34:21.490 --> 00:34:23.110
you might get some
changes you didn't expect.

00:34:23.320 --> 00:34:27.050
So you would proceed with caution and
probably always want to use containment

00:34:27.060 --> 00:34:32.360
if you were sending messages to
an appearance proxy for UILabel.

00:34:32.520 --> 00:34:35.170
Similarly for UISwitch.

00:34:36.100 --> 00:34:38.100
UI slider.

00:34:38.670 --> 00:34:40.570
And then UI button here.

00:34:40.940 --> 00:34:44.620
You notice I'm setting
a background image.

00:34:44.680 --> 00:34:49.580
The particular button I'm using in this
control panel doesn't accept tint color.

00:34:49.670 --> 00:34:52.880
Some of our buttons do,
but you can set the background

00:34:52.880 --> 00:34:53.720
image on any of them.

00:34:53.720 --> 00:34:56.840
I believe that's not new,
but we're sending it to

00:34:56.840 --> 00:34:58.760
the Appearance Proxy.

00:34:59.100 --> 00:35:02.080
So we have a normal state
and a pressed state,

00:35:02.150 --> 00:35:04.200
and then title color.

00:35:04.280 --> 00:35:07.670
And let's take a look.

00:35:16.400 --> 00:35:17.100
And it's green.

00:35:17.100 --> 00:35:20.520
You notice that the red
switch down there stayed red,

00:35:20.520 --> 00:35:23.110
and these switches are green.

00:35:25.000 --> 00:35:30.080
We're all happy about that,
and then our designer says, "Well,

00:35:31.100 --> 00:35:35.450
I want the Bootes View Controller to
be blue because it's the

00:35:35.450 --> 00:35:37.100
booties' blue view controller.

00:35:37.120 --> 00:35:38.100
Okay.

00:35:38.320 --> 00:35:42.100
And you say, "Well,
but you want Auriga and Cygnus

00:35:42.100 --> 00:35:44.920
to still be green." They're like,
"Yes."

00:35:45.900 --> 00:35:51.310
That content view, the controls view,
is contained in the view controller,

00:35:51.310 --> 00:35:54.300
and each of these three view
controllers is their own class,

00:35:54.420 --> 00:35:57.900
so we can use the containment
in the Bootes view controller to

00:35:57.900 --> 00:36:02.180
control the appearance of that pane.

00:36:06.500 --> 00:36:08.840
So we just basically run through
the same thing except with the

00:36:08.840 --> 00:36:14.780
different colors and images for
the appearances when contained in

00:36:14.830 --> 00:36:17.310
the BoOT's ViewController class.

00:36:20.130 --> 00:36:25.200
So in this case, these controls,
even though they are contained

00:36:25.240 --> 00:36:28.670
in the controls view,
they are also contained in

00:36:28.740 --> 00:36:29.990
the Boötes view controller.

00:36:30.000 --> 00:36:33.440
And that's the more external container.

00:36:33.440 --> 00:36:37.400
So it's the one that
will rule for these ones.

00:36:40.850 --> 00:36:42.090
So let's look at that.

00:36:42.200 --> 00:36:47.220
And of course,
the first one that we look at

00:36:47.720 --> 00:36:50.720
is the Bootes ViewController,
supposedly.

00:36:50.800 --> 00:36:52.080
There we go.

00:36:52.190 --> 00:36:54.180
And it's blue.

00:36:54.360 --> 00:36:55.130
Hooray.

00:36:55.490 --> 00:36:57.720
And as you saw--

00:37:01.100 --> 00:37:05.140
and Signes are also green.

00:37:05.140 --> 00:37:08.390
And everything's working as planned.

00:37:08.800 --> 00:37:12.600
And then our designer has
another idea and says,

00:37:12.600 --> 00:37:17.170
the three fates, Clotho, Atropos,
and Lachesis, are much more important

00:37:17.170 --> 00:37:20.070
than the three musketeers,
Athos, Porthos, and Eremis,

00:37:20.130 --> 00:37:24.230
and they deserve a switch
color all of their very own.

00:37:24.700 --> 00:37:26.320
Well, of course, you're like, no problem.

00:37:26.320 --> 00:37:28.040
Containment will do it.

00:37:28.040 --> 00:37:32.320
And because you were precognitively
designing your demo app,

00:37:32.400 --> 00:37:35.460
you've already got your
switches in their own view.

00:37:35.460 --> 00:37:39.280
So there's an invisible subview
here containing those switches.

00:37:39.280 --> 00:37:41.700
And I've called it
Important Controls View.

00:37:41.700 --> 00:37:45.050
And like Controls View,
it's another trivial subclass of UI view

00:37:45.100 --> 00:37:47.180
being used purely for containment.

00:37:49.440 --> 00:37:52.810
And I say, OK, how about that?

00:37:53.120 --> 00:37:56.140
The ones that are in the
Port and View Controller

00:37:58.120 --> 00:38:00.400
They're going to be this important color.

00:38:00.460 --> 00:38:03.350
And I think I'm going to be good,
but you might be seeing that

00:38:03.350 --> 00:38:06.190
other gray text and thinking,
huh.

00:38:07.120 --> 00:38:08.090
And so I go and I look.

00:38:08.230 --> 00:38:08.730
Did it work?

00:38:08.730 --> 00:38:11.510
It did not work.

00:38:12.150 --> 00:38:15.040
And the reason it didn't work
is because for this containment,

00:38:15.040 --> 00:38:20.030
it's the outermost container that's
ruling when the specificity is the same.

00:38:20.040 --> 00:38:23.070
So these switches,
the three fate switches,

00:38:23.090 --> 00:38:26.390
are contained in the
important views controller,

00:38:26.750 --> 00:38:30.020
important controls view,
but they're also contained

00:38:30.020 --> 00:38:33.100
in the controls view,
which is the outermost,

00:38:33.100 --> 00:38:35.800
and so that appearance is winning.

00:38:36.120 --> 00:38:41.110
So this is one place where
we'd use the specificity.

00:38:41.300 --> 00:38:45.950
Because if they are also
contained in something that

00:38:46.080 --> 00:38:49.460
contains the controls view,
then we'll be good.

00:38:49.490 --> 00:38:53.610
And those three view controllers, Oraiga,
Bootes, and Cygnus,

00:38:53.610 --> 00:38:56.020
are all subclasses of a
common view controller called

00:38:56.020 --> 00:38:58.570
a controls view controller.

00:38:58.960 --> 00:39:00.320
Say that three times fast.

00:39:00.320 --> 00:39:07.670
And so if we extend our containment
so that we want the switch that's

00:39:07.800 --> 00:39:10.980
contained in the important controls
view class when it's contained in

00:39:10.980 --> 00:39:14.840
a controls view controller class,
we want it to be this important color.

00:39:14.840 --> 00:39:18.000
So let's look at this
wonderful importance.

00:39:28.930 --> 00:39:29.390
There they are.

00:39:29.390 --> 00:39:32.900
They're yellow,
and it's the same for all three panels.

00:39:32.900 --> 00:39:37.240
That.

00:39:37.240 --> 00:39:42.650
And, of course,
Cygnus is just a repeat of Auriga.

00:39:43.790 --> 00:39:46.040
Now, at this point, I could be done.

00:39:46.140 --> 00:39:47.940
I've pretty much showed
you the containment.

00:39:47.940 --> 00:39:52.300
But I have one little extra thing
that if you've been to What's New in

00:39:52.390 --> 00:39:56.000
Cocoa Touch and some other talks,
you might have heard about.

00:39:56.000 --> 00:39:59.430
And I just wanted to throw
it in there to remind you,

00:39:59.540 --> 00:40:03.160
which is that we have places
all over UIKit now where you

00:40:03.260 --> 00:40:05.450
can set background images.

00:40:06.800 --> 00:40:13.260
So much everywhere you can set an image,
you can set an animated image.

00:40:13.830 --> 00:40:19.620
And that's-- the animated
images is pretty nifty.

00:40:19.760 --> 00:40:22.430
A bunch of images,
I don't know if you can read that,

00:40:22.690 --> 00:40:26.210
but they're all enumerated,
and I just say I want my Cygnus button

00:40:26.270 --> 00:40:31.210
animated image duration of one second,
and I have one for...

00:40:32.230 --> 00:40:35.090
One for normal and one for pressed.

00:40:35.100 --> 00:40:40.390
And then I can have a
nice pulsing button.

00:40:40.800 --> 00:40:42.590
It's kind of fun.

00:40:44.560 --> 00:40:46.200
for the Cygnus button.

00:40:48.150 --> 00:40:50.280
Okay, so I'm--

00:40:51.500 --> 00:40:54.150
I'm really not quite done.

00:40:54.210 --> 00:40:56.880
Because you guys are saying, yay,
that button's pulsing.

00:40:57.020 --> 00:40:58.940
And I'm saying, oh, no.

00:40:58.970 --> 00:41:01.950
Because the center of that
button is going translucent.

00:41:02.090 --> 00:41:04.740
So what's that white stuff behind it?

00:41:04.740 --> 00:41:06.080
It's supposed to be green behind it.

00:41:06.190 --> 00:41:10.040
This one's supposed to be
subtle because it's not pressed.

00:41:10.060 --> 00:41:13.460
And that one, when you touch it,
is supposed to be more dramatic.

00:41:13.490 --> 00:41:16.610
But it's less,
and there's something blue behind it.

00:41:16.680 --> 00:41:20.560
Well, what's going on is I just
set that image on a rounded,

00:41:20.560 --> 00:41:21.700
racked button.

00:41:21.720 --> 00:41:23.270
And it has its own drawing.

00:41:23.550 --> 00:41:26.280
And we're seeing a little
bit of a collision here.

00:41:26.420 --> 00:41:29.280
So if you see something like this,
and you want things to

00:41:29.280 --> 00:41:37.700
uncollide in your buttons,
it's a good idea to set up your button--

00:41:48.200 --> 00:41:52.430
and John Ebrecht set it up as a custom
button because you are customizing it.

00:41:52.430 --> 00:41:55.860
And then you won't have to worry
about UIKit drawing getting in

00:41:55.860 --> 00:41:58.580
there and fighting with what
you want to have happening.

00:42:09.610 --> 00:42:11.940
Okay, and so now it's more subtle.

00:42:11.940 --> 00:42:13.960
Actually,
I'm not sure if you can see it very well,

00:42:14.020 --> 00:42:15.000
but it is pulsing.

00:42:15.270 --> 00:42:19.130
You can see and what I wanted,
where you have a more

00:42:19.130 --> 00:42:21.110
vivid pulse on the pressed.

00:42:21.110 --> 00:42:25.140
You can see that more,
and we don't have the rounded rect

00:42:25.260 --> 00:42:27.820
fighting with the custom drawing.

00:42:29.420 --> 00:42:33.120
So I think that's a good overview
of the new stuff we have in store

00:42:33.230 --> 00:42:35.540
for the appearance customization.

00:42:35.590 --> 00:42:39.680
And Chris has a few more slides
to point out what's going

00:42:39.780 --> 00:42:41.710
on behind the scenes a bit.

00:42:46.100 --> 00:44:23.500
[Transcript missing]

00:44:23.700 --> 00:44:25.700
And it does update in real time.

00:44:25.700 --> 00:44:28.400
It happens only at the
hierarchy change point,

00:44:28.440 --> 00:44:28.640
right?

00:44:28.640 --> 00:44:30.720
So if you're going to be
dynamically changing this stuff,

00:44:30.800 --> 00:44:34.110
you'll have to take the view out of
the view hierarchy and put it back

00:44:34.110 --> 00:44:35.840
in in order to get it to happen.

00:44:36.000 --> 00:44:40.980
So we've spent a bunch of time in pushing
all of these different customization

00:44:41.080 --> 00:44:47.160
APIs all the way through UIKit,
but your designer then says, "Hey,

00:44:47.250 --> 00:44:48.300
you know what?

00:44:48.610 --> 00:44:52.180
I've got this button,
and I want it to have the same color

00:44:52.180 --> 00:44:57.330
no matter where it appears in the UI.

00:44:57.600 --> 00:44:58.560
Right, so we've got this button.

00:44:58.560 --> 00:45:00.150
This app button isn't
making anybody nervous,

00:45:00.200 --> 00:45:03.660
is it?

00:45:04.370 --> 00:45:08.900
And if I call Customization API on
that particular instance-- remember,

00:45:08.900 --> 00:45:11.970
we've got all these other customization
rules going on for buttons.

00:45:12.120 --> 00:45:13.480
They're getting tinted.

00:45:13.520 --> 00:45:15.240
There's an animated image on the back.

00:45:15.310 --> 00:45:18.440
But I'm going to go ahead and call
Set Title Color for Control State on

00:45:18.550 --> 00:45:21.570
this particular instance of the button.

00:45:21.870 --> 00:45:26.260
Now, when I, you know,
it goes ahead and it's, okay, it's green.

00:45:26.260 --> 00:45:28.480
I've updated that color.

00:45:28.510 --> 00:45:31.140
Now, when I go ahead and put that
into the navigation controller,

00:45:31.220 --> 00:45:33.900
if we think back to the
original containment example,

00:45:33.900 --> 00:45:37.280
this has a custom view controller
inside a nav controller.

00:45:37.280 --> 00:45:40.960
We're saying any button that
appears in there is going to be red.

00:45:42.510 --> 00:45:44.150
Well,
you take this button that you customized

00:45:44.220 --> 00:45:46.450
individually and put it in there,
it's not going to be red.

00:45:46.520 --> 00:45:51.600
It's going to stay green because we
also keep track of all of the individual

00:45:51.650 --> 00:45:56.410
instance customizations you do,
and we keep our hands off them.

00:45:56.700 --> 00:46:00.000
So you'll be able to actually say,
for this button only,

00:46:00.020 --> 00:46:03.170
ignore all the rules and
make sure it's always green.

00:46:03.340 --> 00:46:06.900
So you'll be able to also
customize individual instances.

00:46:10.020 --> 00:46:12.630
So we pushed all this stuff
through into the headers.

00:46:12.690 --> 00:46:16.080
We've got lots and lots and lots
of customization opportunities now.

00:46:16.180 --> 00:46:20.250
So you should be able to get your
custom look into your application

00:46:20.260 --> 00:46:24.200
and customize it really easy
using the Appearance Proxy.

00:46:24.320 --> 00:46:27.560
We've also provided a really
sophisticated containment model so

00:46:27.760 --> 00:46:30.750
that you can tune the appearance
of your application based on

00:46:30.960 --> 00:46:34.000
context and the containment
hierarchy of your view controllers.

00:46:34.000 --> 00:46:38.250
And we've also put all of the image
stuff in there so you can completely

00:46:38.400 --> 00:46:43.200
customize your look and push all of those
images into every single UIKit control.

00:46:43.200 --> 00:46:45.990
So we're here in the labs
for the rest of the week.

00:46:46.090 --> 00:46:49.670
You can also get more information from
our Application Frameworks Evangelist,

00:46:49.670 --> 00:46:50.440
Bill Dudney.

00:46:51.130 --> 00:46:53.300
There will be docs in the iOS
Development Center about all

00:46:53.300 --> 00:46:55.660
of the appearance stuff that
we've talked about today.

00:46:55.660 --> 00:46:58.000
And, you know,
come see us in the labs with all

00:46:58.000 --> 00:46:59.760
your questions and your code.

00:46:59.760 --> 00:47:00.670
We'd love to talk to you.

00:47:00.950 --> 00:47:01.730
Thank you very much.