WEBVTT

00:00:11.390 --> 00:00:12.300
Good afternoon, everyone.

00:00:12.300 --> 00:00:13.180
How are you doing?

00:00:13.180 --> 00:00:17.500
Having a good conference?

00:00:17.690 --> 00:00:17.930
Okay.

00:00:18.090 --> 00:00:20.970
Well, I'm Brent Shank and I'm a software
engineer on the Xcode team.

00:00:21.190 --> 00:00:24.160
And we're really excited today to
talk to you about Source Control.

00:00:24.160 --> 00:00:25.190
We love Source Control.

00:00:25.190 --> 00:00:26.070
It's what we work on.

00:00:26.070 --> 00:00:28.400
And we have a lot of interesting
things to show you today.

00:00:28.450 --> 00:00:30.690
Before we do that,
I'd like to get a show of hands.

00:00:30.860 --> 00:00:34.720
How many people in the
audience are using Subversion?

00:00:35.030 --> 00:00:36.590
Okay, good.

00:00:36.820 --> 00:00:38.800
How about Git?

00:00:38.850 --> 00:00:40.190
All right,
so it's really about half and half.

00:00:40.360 --> 00:00:40.690
That's great.

00:00:40.760 --> 00:00:43.350
Well, as you know,
Xcode has great support for

00:00:43.410 --> 00:00:45.520
both Git and Subversion,
and we'll show you some

00:00:45.520 --> 00:00:46.410
of those features today.

00:00:46.490 --> 00:00:46.730
So...

00:00:48.820 --> 00:00:49.640
Thank you.

00:00:49.820 --> 00:00:51.920
So what are we going to talk about today?

00:00:52.230 --> 00:00:55.850
Well, this is really an advanced talk,
but before we get into some

00:00:55.850 --> 00:00:59.040
of those more advanced topics,
you need to know about the basic

00:00:59.090 --> 00:01:01.270
Source Control features in Xcode 4.

00:01:01.330 --> 00:01:03.020
So I'm going to go over those.

00:01:03.090 --> 00:01:06.080
And then we'll get into deeper
topics like sharing your code,

00:01:06.140 --> 00:01:09.000
working collaboratively,
and we'll also talk about

00:01:09.000 --> 00:01:10.300
using branches effectively.

00:01:10.370 --> 00:01:13.540
Historically,
branches have been kind of a difficult

00:01:13.930 --> 00:01:16.940
part of Source Control in general,
and what we've done in Xcode

00:01:17.050 --> 00:01:18.400
4 is we made it really easy.

00:01:18.400 --> 00:01:20.430
So you no longer have to
be afraid of branches,

00:01:20.430 --> 00:01:24.400
and we're going to show you how
to use them effectively in Xcode.

00:01:24.400 --> 00:01:25.540
So, introduction.

00:01:25.540 --> 00:01:28.160
Let's talk about Source Control in
general in Xcode.

00:01:28.160 --> 00:01:30.060
And let's talk about editing.

00:01:30.390 --> 00:01:34.790
Now, why is editing a relevant topic when
we're talking about Source Control?

00:01:34.790 --> 00:01:35.630
Well, you'll see.

00:01:35.630 --> 00:01:38.080
Then we're going to talk
about committing changes.

00:01:38.080 --> 00:01:41.430
This is probably the most common
thing you do with Source Control.

00:01:41.870 --> 00:01:45.350
We'll talk about viewing history and all
the great ways Xcode helps you do that.

00:01:45.440 --> 00:01:48.800
And finally, we're going to touch on
managing repositories.

00:01:48.970 --> 00:01:51.590
And really the best way for
me to talk about these things

00:01:51.590 --> 00:01:53.440
is to show you write in Xcode.

00:01:53.440 --> 00:01:55.610
So, I'm going to give you a demo.

00:01:59.680 --> 00:02:02.040
So I've cloned a project
from a Git repository here.

00:02:02.130 --> 00:02:03.970
It's an iOS project.

00:02:04.340 --> 00:02:06.270
I'm going to open it in Xcode.

00:02:06.270 --> 00:02:10.040
And some of the things you're going to
see today are new in Xcode 4.1 and 4.2.

00:02:10.040 --> 00:02:12.780
I'll try to point those
out as we get to them.

00:02:13.040 --> 00:02:14.910
So we're going to talk about editing.

00:02:15.000 --> 00:02:19.210
And before we do that, like I said,
this project already

00:02:19.210 --> 00:02:20.290
has some modifications.

00:02:20.300 --> 00:02:23.430
It already has some files that have
some kind of source control status.

00:02:23.440 --> 00:02:25.800
So they've been modified, added,
or deleted.

00:02:26.120 --> 00:02:29.590
And it'd be really nice to see all
of those files that have changes.

00:02:29.640 --> 00:02:31.980
And I can do that by using
the Project Navigator.

00:02:32.050 --> 00:02:36.310
And I'm showing you this because this is
a way I like to work in Xcode in general.

00:02:36.380 --> 00:02:38.540
So in the Project Navigator,
you notice the filter

00:02:38.610 --> 00:02:39.620
bar at the bottom here.

00:02:39.620 --> 00:02:40.610
I can zoom in on that.

00:02:40.620 --> 00:02:43.060
And it's got a number of controls.

00:02:43.060 --> 00:02:45.360
The middle one here is
the source control filter.

00:02:45.360 --> 00:02:47.100
Let me zoom out.

00:02:47.140 --> 00:02:49.090
And when I click that,
it's going to show me the

00:02:49.090 --> 00:02:49.090
source control filter.

00:02:49.090 --> 00:02:49.090
And

00:02:49.210 --> 00:02:51.730
It's going to filter the list of files
down to show you only the things that

00:02:51.760 --> 00:02:53.740
have some kind of Source Control status.

00:02:53.860 --> 00:02:55.670
Now,
I really like working with this filter

00:02:55.740 --> 00:02:58.780
all the time because it means when
I'm working on a particular task,

00:02:58.980 --> 00:03:01.500
every time I edit a file,
it shows up in this list.

00:03:01.580 --> 00:03:03.060
So if you're working
with a large project,

00:03:03.060 --> 00:03:06.890
this is really a quick way to
navigate changes in a particular

00:03:06.890 --> 00:03:08.960
task that you're working on.

00:03:09.040 --> 00:03:10.040
So let's talk about editing.

00:03:10.180 --> 00:03:13.260
So again, why is editing relevant in
a talk about Source Control?

00:03:13.370 --> 00:03:16.560
Well, usually when you're editing,
you're editing in a vacuum.

00:03:16.650 --> 00:03:18.770
You're in a file,
you don't know who changed it,

00:03:18.940 --> 00:03:21.850
you don't know why they changed it,
or you've landed on a

00:03:21.850 --> 00:03:24.380
particular line of code,
and again, you don't know who

00:03:24.380 --> 00:03:27.200
changed that line of code,
why or when.

00:03:27.420 --> 00:03:31.680
And by telling you these things,
we really, we feel we enrich and enhance

00:03:31.680 --> 00:03:33.560
your editing experience.

00:03:33.640 --> 00:03:36.050
So how do we bring that
stuff into the editor?

00:03:36.200 --> 00:03:38.720
Well, as you know,
Xcode has three kinds of editors.

00:03:38.720 --> 00:03:41.220
The,
I'm in the standard editor right now,

00:03:41.440 --> 00:03:45.260
which shows me just one editor
in the workspace window.

00:03:45.390 --> 00:03:47.980
There's also the assistant editor,
which you've probably used to

00:03:47.980 --> 00:03:50.920
wire up your user interface
to your source code files.

00:03:51.020 --> 00:03:55.870
And finally, there's the version editor,
and I will select that now.

00:03:55.970 --> 00:03:58.250
So there are three modes
in the version editor.

00:03:58.340 --> 00:04:00.660
The first is the comparison view.

00:04:00.750 --> 00:04:03.970
The second is blame view,
and the third is log view.

00:04:04.110 --> 00:04:05.910
And let's talk about
each of those right now.

00:04:06.020 --> 00:04:08.560
So right now, I'm in the comparison view.

00:04:08.680 --> 00:04:11.320
And to make it more interesting,
I'm going to select a file

00:04:11.320 --> 00:04:13.160
that has modifications.

00:04:13.260 --> 00:04:19.150
And when I do that, I see side by side,
two versions of the same file.

00:04:19.250 --> 00:04:21.800
Now in Xcode 4,
the file in the leftmost editor

00:04:22.220 --> 00:04:25.380
represents your document,
my document in this case.

00:04:25.450 --> 00:04:27.060
So this is the document
that I'm working on.

00:04:27.230 --> 00:04:28.430
It has changes to it.

00:04:28.730 --> 00:04:31.760
I haven't yet committed
it back to the repository.

00:04:31.860 --> 00:04:35.480
On the right-hand side is another
version of the same document.

00:04:35.590 --> 00:04:38.230
Now in most cases,
this represents the previous

00:04:38.230 --> 00:04:40.760
version to the one you're
looking at on the left-hand side,

00:04:40.760 --> 00:04:43.110
or the most current
version on the server.

00:04:43.230 --> 00:04:46.140
But in most cases,
you can actually choose the revision

00:04:46.140 --> 00:04:48.440
that's displayed in either editor here.

00:04:48.560 --> 00:04:50.940
And you can do that in one of two ways.

00:04:51.060 --> 00:04:54.380
You notice at the bottom of the editors,
we have jump bars.

00:04:54.500 --> 00:04:57.570
And when you open those,
you see there are many different

00:04:57.580 --> 00:04:59.340
revisions for this particular file.

00:04:59.490 --> 00:05:02.240
And if I want to switch to one,
I just select.

00:05:02.370 --> 00:05:05.440
And now it loaded up that
revision in the rightmost editor,

00:05:05.540 --> 00:05:07.170
and it's comparing it
to the one on the left.

00:05:07.270 --> 00:05:10.070
And since it's an older revision,
you would expect to see more changes,

00:05:10.080 --> 00:05:11.530
and there are.

00:05:11.660 --> 00:05:14.170
What's really powerful about this,
though,

00:05:14.170 --> 00:05:18.360
is you can select a file not just in the
current branch that you're working on.

00:05:18.470 --> 00:05:21.800
You can select a branch -- a
revision from any arbitrary

00:05:21.800 --> 00:05:24.230
branch in your repository.

00:05:24.380 --> 00:05:26.260
So this is really powerful stuff.

00:05:26.360 --> 00:05:29.000
You can do cross-branch
comparisons right in Xcode really,

00:05:29.000 --> 00:05:29.840
really quickly.

00:05:29.860 --> 00:05:30.600
I do this all the time.

00:05:30.600 --> 00:05:31.940
It's really great.

00:05:32.020 --> 00:05:35.800
So that's one way to change
revisions in the comparison view.

00:05:35.930 --> 00:05:38.360
The other way is using the timeline.

00:05:38.480 --> 00:05:40.460
All we need to do is bring
up the timeline view.

00:05:40.460 --> 00:05:43.410
And this should be familiar
to you from Time Machine.

00:05:43.540 --> 00:05:45.860
The long bars here represent dates.

00:05:46.030 --> 00:05:48.510
And the short bars represent revisions.

00:05:48.640 --> 00:05:52.060
So when I roll over a short bar,
I see everything that's relevant

00:05:52.060 --> 00:05:53.820
about that particular revision.

00:05:53.980 --> 00:05:56.260
When, who, and why.

00:05:56.270 --> 00:05:59.020
And if I want to load that in the editor,
I just click.

00:05:59.180 --> 00:06:00.360
Okay.

00:06:00.450 --> 00:06:02.120
Let's try that again.

00:06:02.300 --> 00:06:02.580
There we go.

00:06:02.720 --> 00:06:06.220
And I've loaded that revision in the
side of the editor that I clicked on.

00:06:06.220 --> 00:06:09.170
So a couple different ways to
choose revisions in the comparison

00:06:09.170 --> 00:06:10.780
editor -- in the comparison view.

00:06:10.810 --> 00:06:14.040
So we start with that because we're
going to see the comparison view in

00:06:14.100 --> 00:06:15.720
many other contexts in source control.

00:06:15.720 --> 00:06:19.100
So now let's talk about blame view.

00:06:19.220 --> 00:06:21.330
Blame view is really powerful.

00:06:21.570 --> 00:06:23.420
Well, what does it provide?

00:06:23.520 --> 00:06:25.980
It shows you who changed
each line in the file,

00:06:25.980 --> 00:06:27.290
when they changed it, and why.

00:06:27.380 --> 00:06:31.030
And so you can see as I scroll
through the file here,

00:06:31.150 --> 00:06:34.070
I see many changes by Ian, my friend Ian.

00:06:34.080 --> 00:06:36.320
Commit messages for everything.

00:06:36.380 --> 00:06:38.020
Well, why is this useful?

00:06:38.020 --> 00:06:40.100
Isn't this just noise in the editor?

00:06:40.240 --> 00:06:44.100
Well, it's actually really powerful
because if you've ever started

00:06:44.140 --> 00:06:47.730
editing in a source file,
that maybe you haven't edited in before,

00:06:47.760 --> 00:06:50.720
or you've found -- you've landed on
a line of code that you need to edit,

00:06:50.850 --> 00:06:54.680
and you don't really get what's going on,
well, right now, you know exactly who was

00:06:54.680 --> 00:06:56.110
responsible for that change.

00:06:56.360 --> 00:06:59.220
So you can get in touch
with him right here.

00:06:59.600 --> 00:07:01.440
You can see what the message was.

00:07:01.560 --> 00:07:06.780
At least for me, this really enhances and
enriches my editing experience.

00:07:06.920 --> 00:07:12.330
So something new and very cool that we've
added in Xcode 4.1 is you see this little

00:07:12.330 --> 00:07:14.730
gear icon over here in the blame view?

00:07:14.740 --> 00:07:18.360
When you click that,
you get a little info panel,

00:07:18.360 --> 00:07:21.840
and it shows you everything
that you see in the blame view.

00:07:21.840 --> 00:07:23.740
This is really great if the
commit message is really long.

00:07:23.740 --> 00:07:26.300
Before in Xcode 4.0, we cut this off.

00:07:26.380 --> 00:07:27.710
You couldn't copy and paste it.

00:07:27.820 --> 00:07:29.750
So you can get to the whole thing here.

00:07:29.920 --> 00:07:32.700
But you might notice,
you can see on the screen up there,

00:07:32.770 --> 00:07:36.580
that when the info panel is displayed,
the editor highlights every line

00:07:36.580 --> 00:07:38.730
that was changed in that revision.

00:07:38.940 --> 00:07:43.010
So this is just an incredible way
to see the entire scope of change

00:07:43.010 --> 00:07:45.300
made by a particular revision.

00:07:45.300 --> 00:07:47.260
And you can see that
by clicking the mouse.

00:07:47.320 --> 00:07:50.230
You can see the whole thing as
I scroll and as I scroll down there.

00:07:50.420 --> 00:07:52.300
So this is really -- I love it.

00:07:52.300 --> 00:07:55.300
You notice this right-facing
arrow button here?

00:07:55.330 --> 00:07:57.290
I'll show that to you in the log view.

00:07:57.360 --> 00:07:59.200
But when I click that,
that will actually take me

00:07:59.250 --> 00:08:02.280
back to the comparison view,
so I get that side-by-side

00:08:02.300 --> 00:08:04.300
view of this file again.

00:08:04.310 --> 00:08:06.300
So that's blame.

00:08:06.300 --> 00:08:09.300
And now let's talk about log.

00:08:09.300 --> 00:08:11.300
So what does log view provide?

00:08:11.300 --> 00:08:15.140
Well, this just provides you the
entire history of the file,

00:08:15.160 --> 00:08:15.160
every change that's ever
been made in the file.

00:08:15.230 --> 00:08:18.590
And again, it tells you the important
things -- who made the change,

00:08:18.600 --> 00:08:21.160
when they made the change,
and why they made the change.

00:08:21.490 --> 00:08:23.160
Well, why is this useful?

00:08:23.350 --> 00:08:26.160
Well, if you work in a legacy code base,
or maybe just a big code base

00:08:26.160 --> 00:08:29.160
that has -- it's very deep,
there are lots of things going on in it,

00:08:29.160 --> 00:08:32.300
sometimes you command-click
and you end up in a file that

00:08:32.300 --> 00:08:34.160
you've never been in before.

00:08:34.300 --> 00:08:37.670
And I find log view really
helpful in that case,

00:08:38.160 --> 00:08:41.160
because if I see that no one has changed
the file in five years or ten years,

00:08:41.160 --> 00:08:43.680
I know it's a pretty good sign
that I should get out of there

00:08:43.680 --> 00:08:45.020
and not change it either.

00:08:45.020 --> 00:08:49.530
So I talked about this
right-facing button here,

00:08:49.530 --> 00:08:54.020
arrow button, and if I click that,
which I'll do here,

00:08:54.020 --> 00:08:56.120
this will take me back
to the comparison view,

00:08:56.120 --> 00:08:59.020
and it will load up that version of
the file in the left-hand editor,

00:08:59.020 --> 00:09:03.020
and then the version previous to
that in the right-most editor.

00:09:03.020 --> 00:09:06.520
So really quick and easy ways
to scrub through the history

00:09:06.520 --> 00:09:08.510
of a particular source file.

00:09:08.790 --> 00:09:10.760
Oh,
I forgot to mention the most important

00:09:10.830 --> 00:09:13.360
thing about this view over here,
and about all of these.

00:09:13.360 --> 00:09:15.560
These are not just read-only views.

00:09:15.560 --> 00:09:16.680
These are not just toys.

00:09:16.680 --> 00:09:17.820
They're actually real editors.

00:09:17.820 --> 00:09:21.760
So you can see over here,
again I'm in the comparison view,

00:09:21.760 --> 00:09:25.040
I see a diff here
because there's a change,

00:09:25.040 --> 00:09:26.270
a difference between these two files.

00:09:26.280 --> 00:09:27.860
I can delete that right there.

00:09:27.920 --> 00:09:29.500
It's actually a live editor.

00:09:29.500 --> 00:09:32.280
I have code completion,
I have quick help,

00:09:32.360 --> 00:09:35.600
I have everything I could
expect in the editor.

00:09:35.600 --> 00:09:37.820
I have the find bar, the jump bar,
everything.

00:09:38.400 --> 00:09:40.190
And again,
you'll see this is useful in other

00:09:40.190 --> 00:09:41.680
contexts too when we get there.

00:09:41.680 --> 00:09:46.940
So I encourage you to use the
Version editor as your day-to-day editor,

00:09:46.940 --> 00:09:51.470
because it provides all this rich history
of your repository right in the editor.

00:09:51.480 --> 00:09:54.660
So, we've talked about editing
and how Source Control can

00:09:54.660 --> 00:09:56.720
enhance the editing experience.

00:09:56.720 --> 00:09:58.280
Now let's talk about committing.

00:09:58.280 --> 00:10:02.100
You probably commit, well,
maybe you commit more than

00:10:02.230 --> 00:10:04.230
anything else every day.

00:10:04.240 --> 00:10:05.780
And how do we do that in Xcode?

00:10:05.780 --> 00:10:09.540
Well, you might be thinking to yourself,
"Why commit from Xcode?

00:10:09.540 --> 00:10:12.920
Why don't I just keep using Terminal
like I've done for years?" Well,

00:10:12.920 --> 00:10:16.710
if you're like me and you've ever
perpetrated a commit blunder,

00:10:16.780 --> 00:10:17.990
we've all done this, right?

00:10:18.100 --> 00:10:21.790
You leave in some debug logging
statement and your QA person tells you

00:10:21.790 --> 00:10:26.360
that you slowed your app down by 50%,
or you've inadvertently changed a file,

00:10:26.360 --> 00:10:30.170
committed a file that you didn't mean to,
or maybe you've even broken the build.

00:10:30.300 --> 00:10:32.460
We do that at Apple,
we get in big trouble.

00:10:32.570 --> 00:10:36.260
It's easy to do these things when you
commit from Terminal because especially

00:10:36.450 --> 00:10:40.730
if you're working on a big task,
you might have 25 files, a lot of files,

00:10:40.730 --> 00:10:41.800
a lot of changes.

00:10:41.800 --> 00:10:43.300
And when you do a diff
on the command line,

00:10:43.300 --> 00:10:45.990
it's hard to see everything that
you've--every change that you've made.

00:10:46.020 --> 00:10:48.960
So, but when you do it in Xcode,
when you do it in a

00:10:48.960 --> 00:10:52.330
graphical environment,
you get a much better user experience

00:10:52.430 --> 00:10:55.290
and you can make sure that you're
committing exactly what you want.

00:10:55.400 --> 00:10:58.600
So to do that from Xcode,
I'll go to the File menu,

00:10:58.600 --> 00:11:02.500
I'll select the Source Control submenu
and select Commit.

00:11:02.600 --> 00:11:05.370
So this is the commit sheet.

00:11:06.000 --> 00:11:07.600
There are two major parts of it.

00:11:07.720 --> 00:11:10.530
There's the Navigator area on the left,
and there's the

00:11:10.530 --> 00:11:14.380
Version editor on the right,
the comparison view.

00:11:14.570 --> 00:11:16.260
There are three navigators.

00:11:16.330 --> 00:11:20.950
The first one is the Project View,
and that represents all the files that

00:11:20.950 --> 00:11:24.160
have some kind of source control status,
and it shows them to you as they would

00:11:24.160 --> 00:11:29.640
appear in the Project Navigator in Xcode,
so organized by groups and whatnot.

00:11:29.800 --> 00:11:32.390
The second navigator is
the File System View,

00:11:32.390 --> 00:11:36.600
and that shows you all the files that
have some kind of source control status

00:11:36.770 --> 00:11:38.300
as they appear in the file system.

00:11:38.380 --> 00:11:42.460
So the blue folders represent
actual directories on disk.

00:11:43.050 --> 00:11:46.200
And finally,
the third navigator is the flat view,

00:11:46.210 --> 00:11:48.280
and it just shows you a flat
alphabetical list of files.

00:11:48.280 --> 00:11:52.480
Now, all the navigators have a
number of things in common.

00:11:52.480 --> 00:11:56.810
They all have a column of
checkboxes along the left-hand side,

00:11:56.820 --> 00:12:01.350
and they all have a column of
status cells on the right-hand side.

00:12:01.380 --> 00:12:03.270
Well, what does a checkbox mean?

00:12:03.280 --> 00:12:06.320
The checkbox means that if it's checked,
this file is going to be

00:12:06.320 --> 00:12:08.120
committed as part of this commit.

00:12:08.300 --> 00:12:11.010
If it's unchecked, the file will not be.

00:12:11.880 --> 00:12:13.450
I'll uncheck my class.h here.

00:12:13.460 --> 00:12:17.310
And the status cells on the right-hand
side show you what kind of change has

00:12:17.310 --> 00:12:19.140
been made to that particular file.

00:12:19.140 --> 00:12:23.340
So you're probably familiar with this
from the command line tools you use.

00:12:23.340 --> 00:12:25.980
So A means it's been added,
M means it's been modified,

00:12:25.980 --> 00:12:29.640
and when I select a modified file,
I see the change that's made there.

00:12:29.640 --> 00:12:33.890
We also show you files
that are unversioned,

00:12:33.900 --> 00:12:37.020
so files that your
Source Control repository

00:12:37.020 --> 00:12:38.700
doesn't yet know about.

00:12:39.070 --> 00:12:41.400
Those up here with the
question mark here.

00:12:41.660 --> 00:12:46.510
A new feature we've added in Xcode
4.1 is you can actually include that,

00:12:46.510 --> 00:12:51.000
add that file or directory to the commit
just by clicking the checkbox right here.

00:12:51.000 --> 00:12:54.810
And another thing we've added
in Xcode 4.1 is we now show you

00:12:54.880 --> 00:12:58.630
files in this list that Xcode
manages but that don't necessarily

00:12:58.630 --> 00:13:00.750
appear in the project navigator.

00:13:00.760 --> 00:13:02.690
So things like your breakpoints file.

00:13:02.690 --> 00:13:05.780
Whenever you add a breakpoint in Xcode,
Xcode keeps track of that

00:13:05.780 --> 00:13:07.280
in this breakpoints file.

00:13:07.970 --> 00:13:09.640
And there's also a user
data directory here.

00:13:09.680 --> 00:13:11.170
Xcode stores some other stuff there.

00:13:11.180 --> 00:13:13.860
We definitely recommend you
add some of this stuff to

00:13:13.860 --> 00:13:15.660
Source Control and not others.

00:13:15.660 --> 00:13:18.730
We can talk about that more
specifically in the labs.

00:13:18.740 --> 00:13:22.310
So let's, oh,
another thing we added in Xcode 4.1,

00:13:22.350 --> 00:13:24.470
we have a contextual menu here.

00:13:24.480 --> 00:13:28.590
So you can discard changes
to a particular document and

00:13:28.660 --> 00:13:30.960
other interesting things.

00:13:30.960 --> 00:13:34.430
So again, we're in the comparison view.

00:13:34.430 --> 00:13:35.560
We have that loaded here.

00:13:35.560 --> 00:13:37.290
And I said before, it's a real editor.

00:13:37.840 --> 00:13:40.970
So if you want to add a
comment here before you commit,

00:13:40.970 --> 00:13:42.120
you can do that.

00:13:42.120 --> 00:13:45.400
Or if you find a log message,
like I mentioned before,

00:13:45.400 --> 00:13:50.170
a very common scenario, you can actually,
let's just assume that

00:13:50.170 --> 00:13:51.770
one is not commented out.

00:13:51.950 --> 00:13:54.100
You can actually delete that
right here before you commit.

00:13:54.100 --> 00:13:57.670
So this is kind of your last sanity
check before you commit these

00:13:57.760 --> 00:13:59.820
files to your source repository.

00:13:59.820 --> 00:14:03.300
So what's going to happen when
I press the commit button?

00:14:03.300 --> 00:14:05.220
Well, Xcode just doesn't blindly commit.

00:14:05.220 --> 00:14:07.580
It's going to do a number
of integrity checks.

00:14:07.580 --> 00:14:09.560
It's going to make sure that,
especially if you're using subversion,

00:14:09.560 --> 00:14:12.960
that no conflicts will be
created by your check-in.

00:14:12.960 --> 00:14:16.920
So if all goes well,
I'm going to add a commit message here.

00:14:16.920 --> 00:14:18.190
Okay.

00:14:19.850 --> 00:14:22.760
If all goes well,
when I click the Commit button,

00:14:22.930 --> 00:14:25.310
these check boxes will turn
into green check marks,

00:14:25.470 --> 00:14:28.430
the sheet will disappear,
and I will feel confident that

00:14:28.430 --> 00:14:30.450
I committed exactly what I wanted to do.

00:14:30.500 --> 00:14:31.900
So let's commit now.

00:14:32.000 --> 00:14:33.180
There we go.

00:14:33.280 --> 00:14:39.100
And you can see the list of files
that have Source Control status

00:14:39.100 --> 00:14:43.410
has gone down dramatically because
I've committed a bunch of files,

00:14:43.410 --> 00:14:43.410
so now my project is
back in a clean state.

00:14:43.680 --> 00:14:45.460
So that's committing.

00:14:45.520 --> 00:14:47.640
Now let's talk about
viewing history and logs.

00:14:47.800 --> 00:14:51.390
And we have a number of
facilities in Xcode 4 to do that.

00:14:51.550 --> 00:14:55.260
Well, the first thing I want to do
is I want to find the log for

00:14:55.260 --> 00:14:58.300
the thing that I just did,
for the large commit that I just made.

00:14:58.510 --> 00:15:02.230
And I can do that from the Logs
Navigator right in the Workspace window.

00:15:02.440 --> 00:15:05.890
So I'll select the Log Navigator,
and that's the last log in the list here.

00:15:05.960 --> 00:15:08.370
And you can see I have a couple
of commits that I've made

00:15:08.470 --> 00:15:09.830
over time to this project.

00:15:09.890 --> 00:15:13.430
I'll select the topmost one,
and I have to be in the standard

00:15:13.430 --> 00:15:15.880
editor for that to show me the log.

00:15:16.150 --> 00:15:17.100
There we go.

00:15:17.110 --> 00:15:19.880
And so I see a list of all the
files that were part of that commit.

00:15:19.940 --> 00:15:23.510
Now, if it's your team's policy
to paste the entire--the full

00:15:23.510 --> 00:15:26.200
transcript of that commit,
maybe in your bug tracking

00:15:26.200 --> 00:15:28.140
system or something,
I commonly do that.

00:15:28.140 --> 00:15:31.350
You can actually get to the full Git or
Subversion transcript right here.

00:15:31.350 --> 00:15:34.270
You just need to find this button on
the right-hand side and that shows

00:15:34.270 --> 00:15:37.290
you the raw--the full transcript
for the commit that we just made.

00:15:37.580 --> 00:15:40.820
So, if that's part of your
company's workflow,

00:15:40.820 --> 00:15:42.560
you can get to it there.

00:15:42.580 --> 00:15:47.090
But there's a much--so that's for--that's
viewing the log for the last commit.

00:15:47.130 --> 00:15:50.380
Wouldn't it be great if we could view
history for the entire repository

00:15:50.380 --> 00:15:51.660
that this project is backed by?

00:15:51.660 --> 00:15:53.740
Well, of course we can do that in Xcode.

00:15:53.900 --> 00:15:56.490
We do that in the Repositories Organizer.

00:15:56.600 --> 00:15:59.030
I'll go over there,
open the Organizer window,

00:15:59.030 --> 00:16:02.000
make sure the Repositories
Organizer is selected.

00:16:02.000 --> 00:16:02.540
So what do we have here?

00:16:02.540 --> 00:16:06.910
Well, this is where Xcode displays all
the repositories it knows about.

00:16:06.910 --> 00:16:09.090
How does Xcode learn about a repository?

00:16:09.100 --> 00:16:12.720
Well, anytime you open a project
that's backed by Source Control,

00:16:12.900 --> 00:16:14.520
Xcode will auto-discover that.

00:16:14.630 --> 00:16:17.830
It will figure out what repository
is backing it and it will add

00:16:17.830 --> 00:16:19.520
it to this list over here.

00:16:19.750 --> 00:16:22.730
You can see I just have one
repository in the list right now.

00:16:22.730 --> 00:16:25.110
I've only opened one project in Xcode.

00:16:25.340 --> 00:16:27.760
You can also add a repository
using the plus button down

00:16:27.810 --> 00:16:29.720
at the bottom of the window.

00:16:29.730 --> 00:16:34.200
We'll go into these branches and
remotes more--in more detail later.

00:16:34.250 --> 00:16:37.210
The blue folder here though,
that represents the working--what we

00:16:37.210 --> 00:16:41.850
call the working copy and that's just the
on-disk representation of the repository,

00:16:41.850 --> 00:16:43.610
of what you've checked out.

00:16:43.610 --> 00:16:45.480
And this isn't just a static list here.

00:16:45.580 --> 00:16:48.050
You can actually double-click
these things and open them

00:16:48.050 --> 00:16:50.400
in the appropriate editor.

00:16:50.400 --> 00:16:53.630
Let me go back and select the top
of this repository because we're

00:16:53.630 --> 00:16:55.470
talking about logs and viewing logs.

00:16:55.580 --> 00:16:57.540
So what's over here on
the right-hand side?

00:16:57.690 --> 00:17:00.650
Well,
this is a log of the entire repository.

00:17:00.740 --> 00:17:04.910
So you can see the commit that
I just made is right here.

00:17:05.050 --> 00:17:09.120
And commits that my coworkers
have made are also over here.

00:17:09.120 --> 00:17:12.140
Well, this is actually--there's
a lot more here.

00:17:12.140 --> 00:17:14.770
Let's look at this
commit that Kevin made.

00:17:15.000 --> 00:17:16.490
He just changed one file.

00:17:16.600 --> 00:17:18.780
And if I want to see all
the changes that he made,

00:17:18.780 --> 00:17:21.090
I can just double-click that.

00:17:21.640 --> 00:17:24.400
And what we see here,
this looks a lot like the commit sheet.

00:17:24.400 --> 00:17:26.610
In fact,
this looks exactly like the commit

00:17:26.610 --> 00:17:29.300
sheet would have looked or did
look when Kevin made this commit.

00:17:29.300 --> 00:17:30.800
So I see a list of files over here.

00:17:30.800 --> 00:17:32.500
In this case, it's just one file.

00:17:32.500 --> 00:17:34.810
A list of files that
was part of this change,

00:17:34.810 --> 00:17:36.390
the kind of change it was.

00:17:36.390 --> 00:17:39.100
And again,
I see the comparison view over here to

00:17:39.100 --> 00:17:41.570
see exactly what those differences are.

00:17:42.460 --> 00:17:46.540
One of my favorite hidden features here
is you can bring up the contextual menu

00:17:46.550 --> 00:17:47.980
and you can copy the source changes.

00:17:47.980 --> 00:17:51.110
And this is great if you're
suspicious about something in

00:17:51.110 --> 00:17:54.480
this commit or you have a question
and you need to get in touch with

00:17:54.500 --> 00:17:56.220
that person who made the commit.

00:17:56.220 --> 00:17:58.440
And in fact,
you can do that right from Xcode.

00:17:58.440 --> 00:18:02.570
You can notice I have a bunch
of people paired already.

00:18:02.570 --> 00:18:03.710
I'm paired.

00:18:03.710 --> 00:18:06.960
My friend Kerry is paired here
because I see his picture.

00:18:06.960 --> 00:18:11.040
But Kevin, he's just this sad blank
man silhouette icon here.

00:18:11.040 --> 00:18:11.900
He's not yet paired.

00:18:12.460 --> 00:18:18.120
I can do that by clicking the icon there,
choosing Kevin's card.

00:18:18.140 --> 00:18:19.740
And what does this mean?

00:18:19.740 --> 00:18:23.600
Well, now it means right from Xcode,
both from the repository

00:18:23.600 --> 00:18:27.920
organizer and from the blame view,
I can get in touch with Kevin.

00:18:27.920 --> 00:18:30.600
So in this case, I can say,
I want to send an email to Kevin.

00:18:30.600 --> 00:18:35.790
And I'm going to paste in those changes
I just copied from the review file sheet.

00:18:35.840 --> 00:18:37.870
So this is a really powerful workflow.

00:18:37.870 --> 00:18:41.910
It's a quick and easy way to learn more
about a change a particular person made.

00:18:42.460 --> 00:18:46.290
Or prove that you made a change that
you actually insisted that you did.

00:18:46.670 --> 00:18:49.180
So there it is.

00:18:49.180 --> 00:18:50.060
We've talked.

00:18:50.130 --> 00:18:51.850
I'm going to go back.

00:18:55.370 --> 00:18:56.060
There we go.

00:18:56.150 --> 00:18:57.350
So what have we talked about?

00:18:57.530 --> 00:19:00.890
We have talked about editing and
how your editing experience can

00:19:00.890 --> 00:19:03.040
be enhanced by Source Control.

00:19:03.280 --> 00:19:07.440
We talked about committing changes and
why Xcode is the best place to do that.

00:19:07.440 --> 00:19:09.440
We've talked about viewing
history and all the different

00:19:09.450 --> 00:19:10.690
ways you can do that in Xcode.

00:19:10.780 --> 00:19:13.450
And finally,
we've talked about managing repositories.

00:19:13.560 --> 00:19:15.870
So now that you know all that,
you have all the basics you need

00:19:15.870 --> 00:19:18.900
to know to jump into more advanced
topics of Source Control in Xcode.

00:19:18.990 --> 00:19:21.360
And for that,
I'm going to bring up Kevin Lindeman

00:19:21.360 --> 00:19:22.910
to talk about sharing code.

00:19:25.150 --> 00:19:27.360
Thank you, Brent.

00:19:27.360 --> 00:19:28.900
My name is Kevin,
and the first thing I'm going

00:19:28.900 --> 00:19:32.130
to talk to all of you about
today is sharing your code.

00:19:32.750 --> 00:19:37.090
So I'm sure that all of you at some point
have created a new project in Xcode.

00:19:37.180 --> 00:19:40.040
Starting with Xcode 4,
you now have the ability to

00:19:40.040 --> 00:19:42.540
immediately start using Source Control.

00:19:42.610 --> 00:19:44.240
Now what does that mean exactly?

00:19:44.310 --> 00:19:48.340
That means that Xcode will create
a Git repository at the base of

00:19:48.340 --> 00:19:51.610
your new project and commit all
the files associated with that

00:19:51.610 --> 00:19:54.390
project to this new Git repository.

00:19:54.970 --> 00:19:57.850
This means that you have immediate
access to all of the great

00:19:57.920 --> 00:20:01.360
Source Control features built
into Xcode 4 that we just saw.

00:20:02.010 --> 00:20:06.340
But now that you have a Git repository,
what do you usually want to do with it?

00:20:06.410 --> 00:20:07.900
Well,
you want to be able to configure remotes.

00:20:08.010 --> 00:20:10.890
So new in Xcode 4.1,
we have enabled the ability to

00:20:10.890 --> 00:20:14.680
configure remotes directly from
within the repository organizer.

00:20:14.850 --> 00:20:18.270
This means now you can share your code.

00:20:19.120 --> 00:20:22.080
So then you want to push
those changes to this remote,

00:20:22.080 --> 00:20:25.100
and Xcode 4.1 has also
improved upon this ability.

00:20:25.120 --> 00:20:28.100
So why don't we see a quick demo of this?

00:20:28.100 --> 00:20:36.890
All right,
so I'm going to switch to my user.

00:20:43.100 --> 00:20:44.980
And here we have the
Xcode Welcome Window.

00:20:44.980 --> 00:20:48.530
So I'm going to create a new project.

00:20:48.990 --> 00:20:52.060
I just want a Cocoa application,
so I'll click Next,

00:20:52.060 --> 00:20:56.210
and I'm going to name it
My Awesome Application.

00:20:56.900 --> 00:20:59.240
and click the Next button.

00:20:59.310 --> 00:21:02.940
Now here we see the option for putting
this project under Source Control.

00:21:02.990 --> 00:21:04.650
We want to do this,
so I'm going to leave it

00:21:04.650 --> 00:21:06.780
checked and click Create.

00:21:08.330 --> 00:21:13.990
So now we have our new Xcode project,
but if I go up to the organizer,

00:21:14.550 --> 00:21:18.230
And look in the Repositories section,
we see that the project that I just

00:21:18.230 --> 00:21:23.270
created has already been auto-discovered
as having a Git repository backing it,

00:21:23.290 --> 00:21:26.640
including the initial commit
that Xcode did of all the files

00:21:26.640 --> 00:21:28.570
that are part of that project.

00:21:29.460 --> 00:21:31.880
So now I want to be able to share
all of this with my friends.

00:21:32.040 --> 00:21:37.710
So I've actually created a
GitHub repository for my project.

00:21:40.320 --> 00:21:42.740
How many of you use GitHub?

00:21:42.740 --> 00:21:44.120
All right, great.

00:21:44.130 --> 00:21:45.480
So.

00:21:46.380 --> 00:21:49.030
says that I need to set
up a remote for this URL,

00:21:49.030 --> 00:21:52.020
so I'm going to copy it and
go to the New Remote section

00:21:52.110 --> 00:21:54.560
in the Repository Organizer.

00:21:54.560 --> 00:21:56.350
Since this is a new project,
we don't actually have

00:21:56.360 --> 00:21:58.870
any remotes set up yet,
so I'm going to click

00:21:58.950 --> 00:22:00.250
the Add Remote button.

00:22:00.910 --> 00:22:04.560
and name it Origin and paste
in the URL that I got from

00:22:04.860 --> 00:22:07.180
GitHub and click Create.

00:22:07.250 --> 00:22:10.440
So now we have a new
remote for our repository.

00:22:10.460 --> 00:22:13.140
And we see here at the bottom,
there's a section listing

00:22:13.140 --> 00:22:15.740
information about this remote,
including a username or

00:22:15.780 --> 00:22:17.280
password if you need it.

00:22:17.770 --> 00:22:20.970
So now that I have a remote set up,
I want to go back to the workspace

00:22:21.210 --> 00:22:26.210
and now push all of this content onto
GitHub so everyone can have access to it.

00:22:26.380 --> 00:22:31.800
So I'll go to the File, Source Control,
Push menu option.

00:22:32.860 --> 00:22:35.240
And now this has changed
a little bit in Xcode 4.1.

00:22:35.290 --> 00:22:39.070
We have seen that we now have
this remote that we have set up.

00:22:39.190 --> 00:22:41.730
And it sees that we have
a master branch locally,

00:22:41.730 --> 00:22:42.980
but not remotely yet.

00:22:43.150 --> 00:22:45.510
So it gives us the option to
create it when we push it.

00:22:45.690 --> 00:22:47.990
So I will push.

00:22:48.570 --> 00:22:50.960
And it's pushing the changes.

00:22:51.040 --> 00:22:52.340
And the push was successful.

00:22:52.440 --> 00:22:54.960
So now if I go back to GitHub,
where it just had all

00:22:54.960 --> 00:23:00.000
the setup information,
and I reload, now all of my new

00:23:00.010 --> 00:23:02.700
project is up on GitHub.

00:23:13.510 --> 00:23:14.960
So now that we've been
able to share our project,

00:23:14.960 --> 00:23:17.190
let's talk a bit about
a more advanced topic,

00:23:17.240 --> 00:23:19.500
branching and merging.

00:23:20.150 --> 00:23:23.240
First off, branches are great.

00:23:23.370 --> 00:23:26.740
Your repository is, by nature, a tree.

00:23:26.800 --> 00:23:28.700
It has a trunk,

00:23:29.190 --> 00:23:32.880
This is hopefully where you have
all of your most stable changes,

00:23:32.950 --> 00:23:34.540
everything that you want to ship.

00:23:34.720 --> 00:23:37.490
But you might want to work
on some large feature,

00:23:37.550 --> 00:23:39.300
or a bug fix.

00:23:39.300 --> 00:23:44.660
So we can have a couple of branches,
a bug fix branch, a task branch,

00:23:44.710 --> 00:23:45.900
a release branch.

00:23:45.980 --> 00:23:50.190
These are all things where we go to
work on large implementations that we

00:23:50.190 --> 00:23:52.450
don't want to put on our trunk yet.

00:23:54.170 --> 00:23:58.410
So, branches help isolate your changes.

00:23:58.610 --> 00:24:02.080
By isolating your changes onto a branch,
it means that later on when you

00:24:02.080 --> 00:24:05.290
want to go through and look at
all the history that went into

00:24:05.290 --> 00:24:07.890
making some large feature work,
it's all right there

00:24:07.890 --> 00:24:09.130
in the branch history.

00:24:09.260 --> 00:24:13.070
If you've been working on the same
branch that everyone else is working on,

00:24:13.070 --> 00:24:16.880
you end up just being confused because
all of your commits are intermixed

00:24:16.880 --> 00:24:18.800
with everyone else's commits.

00:24:19.430 --> 00:24:23.680
But then, you can also help reduce
regressions by working on branches.

00:24:23.700 --> 00:24:28.620
If you're working on a branch,
you end up being able to less

00:24:29.020 --> 00:24:34.010
likely destabilize other people's
work on their main branch because,

00:24:34.470 --> 00:24:37.110
you know, who wants to implement
some huge thing and,

00:24:37.110 --> 00:24:39.440
you know,
not be completely done at the end

00:24:39.540 --> 00:24:42.790
of the day and then everyone else
is broke for the rest of the day

00:24:42.800 --> 00:24:45.080
and everyone just gets upset at you.

00:24:46.840 --> 00:24:49.120
It also helps simplify code reviews.

00:24:49.220 --> 00:24:54.010
So if all of your work is on a branch,
it means that you can have all of your

00:24:54.450 --> 00:24:59.000
coworkers just check out your branch,
take a look at all the history,

00:24:59.270 --> 00:25:01.730
build and run your changes,
and it's not messing with all of

00:25:01.730 --> 00:25:05.090
their other work on all of their
own branches and on the main trunk.

00:25:08.130 --> 00:25:10.590
So let's talk about what one of
these task branches that I mentioned

00:25:10.600 --> 00:25:13.340
looks like at the repository level.

00:25:13.810 --> 00:25:15.700
So here we have our repository.

00:25:15.730 --> 00:25:16.500
It has two commits.

00:25:16.500 --> 00:25:17.890
The blue dots are the commits.

00:25:17.890 --> 00:25:22.560
And master,
as Git would call its main trunk branch,

00:25:22.720 --> 00:25:25.620
is pointing at the topmost commit,
so it has all the content of that

00:25:25.620 --> 00:25:27.710
commit and all the commits below it.

00:25:27.930 --> 00:25:30.760
So I can create a task branch,
and it starts off with having

00:25:30.760 --> 00:25:33.200
all the same content as
master does at that point.

00:25:33.240 --> 00:25:36.110
You are branching off of master.

00:25:36.800 --> 00:25:39.690
But now I can commit to my task
branch and it has a little bit more

00:25:39.690 --> 00:25:42.340
content than the master branch does.

00:25:42.430 --> 00:25:47.450
But everyone else can still commit
to master and I can commit to task.

00:25:47.630 --> 00:25:50.590
And then I can merge my task
branch into master later on

00:25:50.950 --> 00:25:53.160
when I know that I'm all done.

00:25:53.160 --> 00:25:56.740
Now master has all the content of both
the task branch and the master branch.

00:26:01.100 --> 00:26:04.780
So what am I going to actually
show you inside of Xcode?

00:26:04.780 --> 00:26:08.170
I'm going to show you how
you can create branches,

00:26:08.480 --> 00:26:10.950
how you can switch branches,

00:26:11.590 --> 00:26:14.260
And then later on we'll talk about
how you can end up merging those

00:26:14.260 --> 00:26:16.330
changes back into your master branch.

00:26:17.860 --> 00:26:20.800
So in order to show this,
this is my repository setup.

00:26:20.850 --> 00:26:23.480
I have a local Git repository
and a remote Git repository.

00:26:23.780 --> 00:26:26.750
They start off with all
of the same content.

00:26:27.760 --> 00:26:31.140
I'm going to try building and then
see that there's a build error,

00:26:31.150 --> 00:26:34.900
so I'm going to commit a fix to my
local repository that fixes that.

00:26:34.940 --> 00:26:36.020
I'm just going to do it to master.

00:26:36.160 --> 00:26:36.930
It's a simple fix.

00:26:36.930 --> 00:26:38.700
I know that everyone's
going to want it right now,

00:26:38.700 --> 00:26:40.400
so I'm not going to
create a branch just yet.

00:26:40.510 --> 00:26:45.290
But since everyone wants this fix,
I'm going to push it up to the remote.

00:26:46.500 --> 00:26:52.220
Now I can create my branch and it's
going to have that fix right away.

00:26:52.370 --> 00:26:55.400
And I can commit a few features.

00:26:55.450 --> 00:26:58.540
And I remember that some of my
coworkers wanted to review my changes,

00:26:58.580 --> 00:27:02.730
so I'm going to push my branch to the
remote and notice that it doesn't stomp

00:27:02.820 --> 00:27:04.880
on all the content of the master branch.

00:27:04.940 --> 00:27:08.460
I now have my own copy of my
Kevin task branch on the remote

00:27:08.470 --> 00:27:10.230
that everyone can check out.

00:27:10.230 --> 00:27:14.050
So let's take a look at this.

00:27:23.700 --> 00:27:33.100
Launch Xcode.

00:27:33.100 --> 00:27:33.100
I don't actually want to work on
my awesome application anymore.

00:27:33.100 --> 00:27:33.100
I want to work on my best friend.

00:27:35.440 --> 00:27:39.790
So I'm going to build,
and unfortunately I have

00:27:39.790 --> 00:27:41.470
some build failures.

00:27:43.040 --> 00:27:46.670
So I'm kind of curious at why
the main master isn't building.

00:27:46.950 --> 00:27:49.160
You know, it should be the most stable,
right?

00:27:49.190 --> 00:27:53.560
So I'm going to take a look at the
Version editor and look in Blame view.

00:27:53.600 --> 00:27:56.280
Well,
I see that our friend Sarah Lightwater

00:27:56.310 --> 00:27:59.080
must have just accidentally
miscommitted this change.

00:27:59.100 --> 00:28:03.310
It looks like she was switching to using
some new block-based UI view transitions

00:28:03.780 --> 00:28:05.520
and must have just misspelled this.

00:28:05.570 --> 00:28:08.910
But now that I looked at Blame,
I can talk to her about it later.

00:28:09.530 --> 00:28:14.560
So we see here that we have a fixit hint,
and fixits say that it has a

00:28:14.560 --> 00:28:16.700
suggestion to fix our problem.

00:28:16.750 --> 00:28:21.270
So I'm going to take its
suggestions because I like it.

00:28:26.970 --> 00:28:28.900
So let's try building
and running this now.

00:28:28.900 --> 00:28:33.870
Great, looks like the build succeeded.

00:28:37.260 --> 00:28:39.430
Alright, so what sort of an
application do we have here?

00:28:39.530 --> 00:28:41.030
It's just a simple tile matching game.

00:28:41.040 --> 00:28:44.790
There's 16 tiles,
8 different pairs of our best friend.

00:28:44.930 --> 00:28:46.800
What are our best friends?

00:28:46.860 --> 00:28:48.200
Our dogs, of course.

00:28:48.200 --> 00:28:56.970
So if I pick this dog and number 10,
it wasn't the same dog,

00:28:56.970 --> 00:28:56.970
so it flips it back over.

00:28:56.970 --> 00:28:56.970
But if I pick the same dog...

00:29:02.930 --> 00:29:07.300
We see here there's actually a pattern.

00:29:07.670 --> 00:29:10.790
They kind of appear
in all the same spots.

00:29:15.200 --> 00:29:20.600
If I go all the way to the end,
I should have won this game.

00:29:20.610 --> 00:29:23.140
So I want to make the dogs
appear randomly and I also

00:29:23.140 --> 00:29:24.940
want to make the game winnable.

00:29:24.940 --> 00:29:28.820
So that sounds to me like a
perfect job for a task branch.

00:29:29.700 --> 00:29:34.840
So now that I see that it built,
I'm going to commit my build failure fix,

00:29:34.960 --> 00:29:36.400
since everyone wants it.

00:29:36.490 --> 00:29:40.830
So I bring up the commit sheet,
put in a handy dandy commit message,

00:29:40.830 --> 00:29:47.450
"Fixed build failure," and
click the commit button.

00:29:50.600 --> 00:29:53.100
All right, the commit is complete,
and now I know that

00:29:53.280 --> 00:29:56.100
everyone wanted this change,
so I'm going to push my

00:29:56.100 --> 00:29:58.080
changes up to the remote.

00:29:58.620 --> 00:30:01.780
So we see here that since
this isn't a new repository,

00:30:01.950 --> 00:30:05.050
master already exists on the remote,
it doesn't give me the option to create,

00:30:05.200 --> 00:30:07.780
it's just going to push the new
changes up that don't exist on

00:30:07.780 --> 00:30:09.700
the master on the remote yet.

00:30:09.820 --> 00:30:13.340
So I click push,
and the push was successful.

00:30:13.420 --> 00:30:17.790
Now everyone on our team
has access to this new fix.

00:30:18.760 --> 00:30:23.050
So now I want to create my branch,
so I go to the Repository Organizer,

00:30:23.050 --> 00:30:27.120
and go to the My Best Friend Repository,
and click Branches.

00:30:27.120 --> 00:30:29.340
So we see that there is
a master branch already,

00:30:29.390 --> 00:30:32.780
but I want to create my own,
so I click Add Branch.

00:30:32.780 --> 00:30:35.360
So it gives us an
option to put in a name.

00:30:35.360 --> 00:30:38.260
I'm going to name it Kevin Task.

00:30:38.260 --> 00:30:41.200
Now it also asks us what the
starting point should be.

00:30:41.200 --> 00:30:45.680
That means that we are going to
branch off of the starting point,

00:30:45.680 --> 00:30:48.670
and in this case master,
since we only have one branch.

00:30:49.180 --> 00:30:51.860
If we know that we want to immediately
start working on this branch,

00:30:51.860 --> 00:30:54.800
we can automatically switch this
branch once the branch is created,

00:30:54.870 --> 00:30:57.010
but I want to show you how
you can switch otherwise,

00:30:57.110 --> 00:30:59.080
so I'm not going to select that.

00:30:59.100 --> 00:31:01.200
I'll click Create,
and now we see that the

00:31:01.200 --> 00:31:04.900
new branch is in the list,
and I can even get the history for it.

00:31:05.070 --> 00:31:07.820
It's all the same history as
master since I just branched.

00:31:07.940 --> 00:31:11.300
So now if I go to the working copy,
the blue folders,

00:31:11.300 --> 00:31:15.800
there's a switch branch icon here at the
bottom right of the repository organizer.

00:31:15.840 --> 00:31:18.320
If I click that,
it says that master is my current

00:31:18.320 --> 00:31:21.200
branch and that I have a second branch,
Kevin Task.

00:31:21.260 --> 00:31:24.560
I want to switch to that,
so I click that one and click OK.

00:31:24.680 --> 00:31:28.640
We also see up here that the
current branch has been updated to

00:31:28.960 --> 00:31:31.090
Kevin Task for this working copy.

00:31:31.680 --> 00:31:33.570
Alright,
so now I'm in the perfect spot to

00:31:33.570 --> 00:31:35.680
start fixing some of these problems.

00:31:35.750 --> 00:31:38.710
I also remember that in an
earlier conversation with Brent,

00:31:38.820 --> 00:31:42.670
he really didn't like that this
"show alternate image" code here,

00:31:42.960 --> 00:31:46.100
which ends up being called
whenever we tap on a tile,

00:31:46.240 --> 00:31:48.030
is creating an NSRA every time.

00:31:48.250 --> 00:31:51.850
He says that can be easily
solved with a dispatch once.

00:31:52.040 --> 00:31:55.490
Now I unfortunately don't remember
how the syntax of dispatch once works,

00:31:55.540 --> 00:31:59.680
what sort of other variables
you will need to set it up.

00:31:59.790 --> 00:32:02.400
So I'm just going to start
typing dispatch once.

00:32:02.670 --> 00:32:04.660
Now we see here that code
completion has come up,

00:32:04.760 --> 00:32:09.770
and it sees that there is a code snippet
that it found in our snippet library

00:32:09.860 --> 00:32:12.750
that we can see based on this icon.

00:32:13.210 --> 00:32:17.550
This will set up a dispatch once for
us without even having to look at

00:32:17.550 --> 00:32:19.880
any of the documentation or anything.

00:32:20.130 --> 00:32:22.750
So I select that one,
and it already set up the

00:32:22.800 --> 00:32:24.640
dispatch_once token for me.

00:32:24.650 --> 00:32:32.980
And so I want to go in here and make this
a static NSRA that starts off as nil,

00:32:33.000 --> 00:32:36.540
since I'm going to be modifying
it inside of the dispatch_once.

00:32:37.100 --> 00:32:41.900
And then make the images
equal to that array.

00:32:41.900 --> 00:32:43.300
All right.

00:32:43.560 --> 00:32:46.100
But images isn't really
a good name for this.

00:32:46.350 --> 00:32:47.340
It's a static NSRA.

00:32:47.610 --> 00:32:52.390
So I'm going to actually
edit all in scope.

00:32:52.830 --> 00:32:56.160
So now, every time I type,
it's editing all uses of this

00:32:56.160 --> 00:32:57.920
variable inside of the scope.

00:32:57.920 --> 00:33:01.240
So I want to call that underbar S images.

00:33:03.270 --> 00:33:06.200
That's one good fix down,
so I'm going to commit it.

00:33:06.200 --> 00:33:10.880
Give it a commit message.

00:33:10.880 --> 00:33:14.370
"Made show alternate image.

00:33:14.560 --> 00:33:19.510
Use dispatch once." And click commit.

00:33:21.990 --> 00:33:25.750
Now I can go and move on
to the meat of my features.

00:33:25.840 --> 00:33:30.790
So the first thing that
I need to do is find the

00:33:31.150 --> 00:33:34.820
random identifier method that picks
where it wants to put the dogs.

00:33:34.890 --> 00:33:38.240
This doesn't look really random,
so I'm going to fix this.

00:33:38.240 --> 00:33:42.010
Now, I actually fixed this bug earlier,
and I made a code snippet for it.

00:33:42.010 --> 00:33:46.410
So I go into the utilities,
scroll down in the code snippet library,

00:33:46.570 --> 00:33:49.270
and drag in my code snippet.

00:33:50.600 --> 00:33:53.550
I don't need this old random identifier.

00:33:53.970 --> 00:33:58.080
And so this should pair up
the dogs completely randomly.

00:33:58.350 --> 00:34:01.490
So now I need to modify tap tile,
which is called whenever

00:34:01.500 --> 00:34:05.600
the tiles are tapped,
so that the game is winnable.

00:34:05.670 --> 00:34:09.690
So I also have a snippet for that,
so I'll drag that one in.

00:34:15.020 --> 00:34:19.140
So now, all the features that I wanted
should be implemented.

00:34:19.190 --> 00:34:20.800
Let's give it a quick try.

00:34:20.990 --> 00:34:22.830
So I'll build it and run it.

00:34:25.700 --> 00:34:31.580
So 1 and 9, look,
it looks like they were different dogs.

00:34:32.100 --> 00:34:34.770
I'm not very good at this game,
especially once it's random,

00:34:34.780 --> 00:34:37.730
so I'm actually not going
to try to win it right now.

00:34:37.930 --> 00:34:39.400
So I'm just going to commit this.

00:34:39.420 --> 00:34:41.850
Kerry's going to end up taking a
look at this in a minute anyways.

00:34:41.850 --> 00:34:45.570
So I will commit this.

00:34:47.600 --> 00:34:54.930
Made the game winnable,
also made dogs appear randomly.

00:34:54.940 --> 00:34:57.040
And click commit.

00:35:01.470 --> 00:35:04.130
Now all my code is finished,
I want to share this

00:35:04.130 --> 00:35:06.250
with all my coworkers,
so I need to push this new

00:35:06.250 --> 00:35:07.800
branch up to the remote.

00:35:07.960 --> 00:35:12.250
So I will go to the File, Source Control,
Push menu item again,

00:35:12.260 --> 00:35:15.700
and it sees that we have Kevin task
locally but not remotely.

00:35:15.800 --> 00:35:18.830
We have master remotely,
so it wouldn't create that,

00:35:18.990 --> 00:35:22.060
but I want to create a copy
of this branch on the remote.

00:35:22.160 --> 00:35:24.200
So I'm going to push it.

00:35:24.690 --> 00:35:25.840
And the push was successful.

00:35:25.860 --> 00:35:28.540
So now all my coworkers have access
to this branch and they can take a

00:35:28.540 --> 00:35:31.030
look at it and review my changes.

00:35:35.920 --> 00:35:39.070
So what did we just show you?

00:35:39.150 --> 00:35:41.840
We showed you how to create new
projects and immediately start using

00:35:41.840 --> 00:35:44.440
Source Control so you can use all the
great Source Control features like the

00:35:44.440 --> 00:35:46.710
Version editor and the Commit sheet.

00:35:47.520 --> 00:35:53.960
I also talked about how to share your
code and how to use branches effectively.

00:35:53.960 --> 00:35:56.900
So now Kerry Hazelgren will come
up and finish our application.

00:35:59.500 --> 00:36:00.740
Thanks, Kevin.

00:36:00.770 --> 00:36:01.260
Hello, everyone.

00:36:01.260 --> 00:36:02.640
My name is Kerry.

00:36:02.640 --> 00:36:06.080
And I am going to show you the
second half of sharing your code,

00:36:06.110 --> 00:36:11.650
which is getting changes that other
people have made into your repository.

00:36:12.140 --> 00:36:15.390
Now, as part of this,
I'll be showing you a new feature in 4.1,

00:36:15.390 --> 00:36:19.160
which is how to create a tracking branch,
or also known as a

00:36:19.160 --> 00:36:20.710
remote tracking branch.

00:36:20.750 --> 00:36:23.800
It's a local branch in your
repository that tracks a remote

00:36:23.800 --> 00:36:25.920
branch in a remote repository.

00:36:27.400 --> 00:36:30.400
Also going to show you
how to resolve conflicts,

00:36:30.450 --> 00:36:34.300
because whenever you're pulling
in changes from other sources,

00:36:34.410 --> 00:36:37.210
eventually you're going
to hit a conflict.

00:36:38.030 --> 00:36:41.160
And then I'm also going to
share the final results.

00:36:41.240 --> 00:36:44.990
So this is my local repository,
and these are an overview of the

00:36:45.030 --> 00:36:46.700
changes that I'm going to be making.

00:36:46.700 --> 00:36:49.600
And in my subsequent demo,
I'll show you how to do

00:36:49.670 --> 00:36:51.430
these things in Xcode 4.

00:36:51.810 --> 00:36:54.900
So, firstly, I'm going to pull the
change that Kevin made,

00:36:54.930 --> 00:36:57.080
the fix,
the build--fix to the build errors

00:36:57.220 --> 00:36:59.250
that he made on the master branch.

00:36:59.470 --> 00:37:01.690
Then I'm going to make
a new commit of my own.

00:37:02.010 --> 00:37:05.560
Now, I know the best practice is not to
make changes on the master branch,

00:37:05.680 --> 00:37:09.100
but I'm a manager,
that's just how I roll.

00:37:11.300 --> 00:37:13.300
So I'm going to pull Kevin's branch.

00:37:13.300 --> 00:37:16.440
I'm going to create a remote
tracking branch which pulls down

00:37:16.450 --> 00:37:20.570
the contents of his branch into
a local branch in my repository.

00:37:21.120 --> 00:37:24.370
And finally, I will merge the results,
resolving any conflicts

00:37:24.390 --> 00:37:28.700
that might happen,
and push the completed

00:37:28.840 --> 00:37:32.060
app up to our remote.

00:37:32.080 --> 00:37:34.280
So let's see how to do that.

00:37:35.350 --> 00:37:41.000
So we open up Xcode,
and I go to my copy of my best friend.

00:37:41.160 --> 00:37:45.090
Now, the first thing I need to
do is pull Kevin's fix.

00:37:45.160 --> 00:37:48.290
So I go to File, Source Control.

00:37:48.470 --> 00:37:50.010
Pull.

00:37:50.010 --> 00:37:54.090
And we see that I'm going
to pull from Origin Master.

00:37:55.670 --> 00:38:00.940
The poll was successful,
so I should be able to build now.

00:38:01.340 --> 00:38:02.760
Great.

00:38:03.210 --> 00:38:09.480
Now the change that I'm going to
make is to make the game winnable.

00:38:09.600 --> 00:38:11.470
Now I know,

00:38:11.640 --> 00:38:13.570
you're probably thinking,
didn't Kevin already do that?

00:38:13.620 --> 00:38:17.350
Well, he did,
but I was out of the office.

00:38:17.360 --> 00:38:18.980
I think I went golfing.

00:38:18.980 --> 00:38:19.940
I took a long lunch.

00:38:19.940 --> 00:38:23.670
I took my dog for a walk and forgot
that I had told him to do that.

00:38:23.840 --> 00:38:26.300
So I'm going to make a
change in the same location.

00:38:26.300 --> 00:38:29.050
Now, this is actually a very common
scenario where you've got groups

00:38:29.150 --> 00:38:30.320
of people working together.

00:38:30.320 --> 00:38:34.410
We're editing the same source code,
and a conflict happens.

00:38:34.420 --> 00:38:37.390
So I'm going to drag in
a snippet of code here.

00:38:37.400 --> 00:38:43.850
Similar to the one Kevin did,
But it'll make the game winnable.

00:38:45.600 --> 00:38:50.640
And just go ahead and commit that change,
because, again, I'm a manager.

00:38:50.640 --> 00:38:53.160
I know you guys test and
build and run your code,

00:38:53.160 --> 00:38:55.190
but I'm just going to
go ahead and commit it.

00:39:06.760 --> 00:39:10.980
Now, the thing that I need to do next is
to create a remote tracking branch.

00:39:11.070 --> 00:39:15.650
And I'll show you how to do that,
because that's new in Xcode 4.1.

00:39:16.320 --> 00:39:24.650
So what I do is I go to the Organizer
and Repositories tab and select Remotes.

00:39:24.830 --> 00:39:27.920
Firstly, actually, let me show you,
if we look at our branches,

00:39:27.920 --> 00:39:29.860
our local branches, I only have one.

00:39:29.860 --> 00:39:31.340
That's the master branch.

00:39:31.390 --> 00:39:35.010
But if I select my origin
remote and open it up,

00:39:35.010 --> 00:39:37.920
I can see that on the remote
there are two branches.

00:39:38.000 --> 00:39:41.210
So Kevin Task is the one
that I want to track.

00:39:41.210 --> 00:39:45.700
So I just select it and then come
down here and say Track Branch.

00:39:45.730 --> 00:39:47.930
Now I can give it a
different name if I want,

00:39:47.930 --> 00:39:49.760
but I'll just leave it the same.

00:39:49.800 --> 00:39:53.990
And I do not want to switch to
this branch because I'm going to

00:39:54.170 --> 00:39:56.600
merge it into my current branch.

00:39:56.620 --> 00:39:57.570
So I click Create.

00:39:57.620 --> 00:40:00.970
And if I go back to branches,
I can see that it's already there.

00:40:03.740 --> 00:40:07.060
Now I am ready to merge it.

00:40:07.190 --> 00:40:11.700
So I go to File, Source Control, Merge.

00:40:11.840 --> 00:40:17.680
And the way that merging works in Xcode
is that you always merge the branch that

00:40:17.860 --> 00:40:21.750
you select into your current branch.

00:40:21.850 --> 00:40:26.730
And the UI here reminds me that
my current branch is on master.

00:40:26.860 --> 00:40:30.600
So I'm merging Kevin Task into
the master branch.

00:40:30.750 --> 00:40:32.730
I'll hit Choose there.

00:40:32.980 --> 00:40:36.860
And what we see looks very
similar to the commit UI with

00:40:36.860 --> 00:40:39.330
some important differences.

00:40:39.770 --> 00:40:42.470
First thing I notice is that
next to my file name here,

00:40:42.470 --> 00:40:46.630
I have this red C marker,
status indicator.

00:40:46.730 --> 00:40:52.560
And that means that in this file,
there is at least one conflict.

00:40:52.830 --> 00:40:56.820
And I can see that conflict here in the
Version editor because it's highlighted

00:40:56.820 --> 00:40:59.670
in red rather than the normal blue.

00:41:01.800 --> 00:41:05.670
Another important difference
is that on the left-hand side,

00:41:05.690 --> 00:41:07.240
this is not my local document.

00:41:07.370 --> 00:41:10.010
This is actually the merged document.

00:41:10.110 --> 00:41:14.260
It's the document that you will
have once the merge is completed.

00:41:14.450 --> 00:41:16.140
So why do we show you that?

00:41:16.140 --> 00:41:22.200
Well, the idea is that you will edit this
document and resolve your merges however

00:41:22.360 --> 00:41:28.110
you want so that the final result is the
way the document will be or the way that

00:41:28.110 --> 00:41:30.910
you want it to be when the merge is done.

00:41:34.760 --> 00:41:37.080
Now, you're probably thinking,
"Wait a second.

00:41:37.250 --> 00:41:41.000
How can there be conflicts when
we haven't even merged yet?" Now,

00:41:41.000 --> 00:41:46.050
this is an important distinction
that Xcode makes over any other

00:41:46.050 --> 00:41:48.600
tool you probably have used.

00:41:48.740 --> 00:41:52.000
For example,
if you go to the command line

00:41:52.110 --> 00:41:56.010
and do a Subversion update,
the update will--

00:41:56.130 --> 00:42:00.270
Operation will complete and then you'll
have conflicts in your source code.

00:42:00.620 --> 00:42:03.320
Like these funky little chevron
characters that stop your

00:42:03.320 --> 00:42:07.280
project from building or your
source code from compiling.

00:42:07.370 --> 00:42:14.530
Xcode 4 has the ability to identify
conflicts that would occur and asks you

00:42:14.540 --> 00:42:20.110
to resolve them ahead of time so that
you get no conflicts when you're done.

00:42:20.270 --> 00:42:23.440
So the end result is
if you always update,

00:42:23.440 --> 00:42:27.100
pull, or merge from Xcode,
you will never get a

00:42:27.100 --> 00:42:28.230
conflict in your source code.

00:42:36.300 --> 00:42:39.050
Okay,
so how do we actually resolve this merge?

00:42:39.170 --> 00:42:41.060
There's a little question
mark here in the middle,

00:42:41.060 --> 00:42:44.150
and this is Xcode saying,
"You haven't yet made a decision on how

00:42:44.150 --> 00:42:48.450
you want to resolve it." There's one of
four different ways that you can do that,

00:42:48.460 --> 00:42:52.170
represented by the segmented
control here at the bottom.

00:42:52.770 --> 00:42:56.550
You can choose right,
meaning the changes that are incoming,

00:42:56.690 --> 00:42:59.960
and if I choose that,
I can see that the changes on the right

00:43:00.090 --> 00:43:03.030
are reflected in my merged document.

00:43:03.150 --> 00:43:06.480
Or, of course, I can choose left,
meaning my own changes.

00:43:06.580 --> 00:43:12.060
I can also choose both of them,
left then right, in that order,

00:43:12.060 --> 00:43:14.240
or right then left.

00:43:14.450 --> 00:43:16.950
And for those of you who
like to use arrow keys,

00:43:17.040 --> 00:43:17.770
the arrow keys work.

00:43:17.940 --> 00:43:22.480
If you hit left, it'll choose the left,
left, left, hitting the arrow key twice,

00:43:22.600 --> 00:43:27.100
chooses left then right,
and vice versa for the right side.

00:43:27.100 --> 00:43:30.020
So as far as this conflict's concerned,
I'm going to choose my changes

00:43:30.020 --> 00:43:31.990
because I like my changes.

00:43:35.100 --> 00:43:39.100
Once the conflicts are all resolved,
then I can merge.

00:43:39.100 --> 00:43:40.860
Okay.

00:43:41.100 --> 00:43:46.100
So now we should be able to
build and run and win the game,

00:43:46.100 --> 00:43:48.910
though I may need some
of your help to do so.

00:43:56.720 --> 00:43:58.960
Clicking at random here.

00:43:58.960 --> 00:44:00.740
Oh, one and two.

00:44:00.740 --> 00:44:02.390
There we go.

00:44:07.100 --> 00:44:27.800
[Transcript missing]

00:44:39.100 --> 00:44:57.300
[Transcript missing]

00:45:03.400 --> 00:45:06.210
For my last act,
I will just push these changes

00:45:06.240 --> 00:45:08.160
all up to the remote repository.

00:45:08.160 --> 00:45:10.400
Here we go.

00:45:10.400 --> 00:45:14.270
Yay,
now we can submit it to the App Store.

00:45:17.810 --> 00:45:20.640
Okay, so what I just showed you,
showed you how to create a

00:45:20.640 --> 00:45:25.240
remote tracking branch so that
you can grab code from remote

00:45:25.240 --> 00:45:27.910
branches on a remote repository.

00:45:28.410 --> 00:45:31.260
How to resolve conflicts, very important.

00:45:31.270 --> 00:45:34.370
And how to share the final results.

00:45:35.820 --> 00:45:38.650
So in conclusion,
what have we learned today?

00:45:39.010 --> 00:45:41.330
I think we've shown that Xcode
contains some very powerful

00:45:41.330 --> 00:45:44.450
Source Control features,
and yet they work with you,

00:45:44.610 --> 00:45:46.960
and they're very easy to use.

00:45:47.690 --> 00:45:51.870
You can easily share code with others
by configuring multiple remotes that

00:45:52.060 --> 00:45:55.890
you can push and pull from multiple
repositories and really take advantage

00:45:56.000 --> 00:45:59.880
of the distributed nature of Git.

00:46:02.200 --> 00:46:05.330
also showed you how
branching works in Xcode.

00:46:05.600 --> 00:46:08.610
And branching, if you've been afraid of
using branching in the past,

00:46:08.640 --> 00:46:14.910
I think you should give Xcode a try
in its branching workflow because it's

00:46:14.910 --> 00:46:21.140
really very powerful and you don't,
you know,

00:46:21.140 --> 00:46:21.970
you want to be isolating your changes on
a branch and not breaking your coworkers.

00:46:22.350 --> 00:46:27.280
And also we showed you how Xcode
lets you eliminate conflicts

00:46:27.480 --> 00:46:28.720
before they actually happen.

00:46:28.950 --> 00:46:30.100
It's amazing.

00:46:30.160 --> 00:46:32.410
Let's see Terminal do that.

00:46:34.770 --> 00:46:37.800
For more information,
you can contact Michael Jurowicz.

00:46:37.880 --> 00:46:40.880
He's our Developer Tools evangelist.

00:46:40.910 --> 00:46:42.690
Thank you very much.