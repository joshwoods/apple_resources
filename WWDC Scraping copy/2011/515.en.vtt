WEBVTT

00:00:10.530 --> 00:00:11.960
Hello, everyone.

00:00:12.070 --> 00:00:13.640
My name is Alexey Proskuryakov.

00:00:13.710 --> 00:00:17.360
I am an engineer on Safari and
WebKit team at Apple.

00:00:17.470 --> 00:00:22.630
Welcome to session 515,
Using HTML5 Offline Storage.

00:00:22.780 --> 00:00:26.300
There are more and more mobile
devices on the web these days,

00:00:26.420 --> 00:00:31.960
and I'm talking about notebooks, tablets,
and, of course, mobile phones.

00:00:32.670 --> 00:00:36.800
These devices are commonly connected
to the Internet over wireless networks,

00:00:36.800 --> 00:00:41.170
and wireless networks are
not as fast as wired ones.

00:00:42.210 --> 00:00:47.980
Even worse than that,
they're sometimes offline.

00:00:48.520 --> 00:00:50.560
And these are not new problems.

00:00:50.670 --> 00:00:55.620
You get offline when you're
on an airplane or when you're

00:00:55.660 --> 00:00:58.100
in a garage in a basement.

00:00:58.210 --> 00:01:01.070
But now user expectations are changing.

00:01:02.140 --> 00:01:06.380
Your users are likely to get
frustrated when there is no signal

00:01:06.600 --> 00:01:09.740
and they cannot use their apps.

00:01:09.870 --> 00:01:13.580
They have grown very dependent
on their mobile devices.

00:01:15.020 --> 00:01:21.880
So if they see something like this,
they won't be happy.

00:01:21.970 --> 00:01:24.880
And what does that mean
to you as a developer?

00:01:26.240 --> 00:01:31.380
Well, obviously you want your site
to load and work as fast as

00:01:31.380 --> 00:01:33.770
possible on mobile devices.

00:01:34.890 --> 00:01:38.420
And that means that users will be
more likely to come back to your site,

00:01:38.590 --> 00:01:41.710
more likely to use your
web application often.

00:01:43.550 --> 00:01:47.520
If at all possible,
you also want to work offline

00:01:47.930 --> 00:01:51.470
so that users could be more
dependent on your web application,

00:01:51.470 --> 00:01:54.140
and again, they would use it more often.

00:01:54.180 --> 00:01:56.880
And finally, you don't want to spend
too much time on that.

00:01:56.920 --> 00:01:58.740
You have a lot of other work to do.

00:01:59.030 --> 00:02:01.860
You don't want to
rewrite your whole site.

00:02:02.520 --> 00:02:04.600
to embrace the new technologies.

00:02:04.610 --> 00:02:09.860
And you want your site to work
in all modern browsers on both

00:02:10.430 --> 00:02:12.990
desktop and mobile platforms.

00:02:15.310 --> 00:02:19.680
So these are the technologies that
I'm going to talk about today.

00:02:19.760 --> 00:02:24.140
First, I'm going to give an overview
of the technologies that are

00:02:24.140 --> 00:02:26.160
available for offline use.

00:02:26.210 --> 00:02:29.140
I'm going to talk about
development tools and debugging,

00:02:29.260 --> 00:02:35.610
since this is key to bringing your app
to the market in time and in great shape.

00:02:36.100 --> 00:02:39.140
And of course, I'm going to talk about
what's new in Safari.

00:02:39.250 --> 00:02:44.100
And there are quite a few very
nice new features in this area.

00:02:44.280 --> 00:02:50.200
So I'll start with talking
about storing resources.

00:02:50.560 --> 00:02:53.960
And what do I mean by
it when I say resources?

00:02:53.990 --> 00:02:57.620
Let's have a look at how
a web application looks,

00:02:57.620 --> 00:02:58.690
what it has inside.

00:02:58.880 --> 00:03:02.820
Well, the web application consists
of a number of files,

00:03:02.950 --> 00:03:08.500
like HTML files, CSS style sheets,
JavaScript files, images,

00:03:08.500 --> 00:03:11.740
like Bing images and JPEG images.

00:03:13.340 --> 00:03:16.440
It also needs to store some
data on a user's computer.

00:03:16.540 --> 00:03:20.700
It can be as little data as
credentials to connect to the server,

00:03:20.810 --> 00:03:25.290
or it can store preferences.

00:03:25.740 --> 00:03:31.290
If it's a game, it can store high scores
or users' progress.

00:03:31.440 --> 00:03:36.770
If it's a word processing application,
it can store a whole document offline.

00:03:38.730 --> 00:03:41.330
And being a web application,
it obviously needs the

00:03:41.390 --> 00:03:44.170
connection to the cloud,
a connection to the Internet,

00:03:44.170 --> 00:03:46.600
so that users could
share their documents,

00:03:46.730 --> 00:03:50.110
share their high scores and achievements.

00:03:50.320 --> 00:03:52.060
That's what a web application is.

00:03:52.160 --> 00:03:55.600
These files is what I call
application resources,

00:03:55.840 --> 00:03:59.220
files from the top part of that chart.

00:04:01.730 --> 00:04:04.150
When working offline,
you want all of these resources to

00:04:04.160 --> 00:04:07.400
be available on the user's computer.

00:04:07.520 --> 00:04:11.120
So kind of like the regular HTTP cache,
but with the regular HTTP cache,

00:04:11.180 --> 00:04:18.430
there's no guarantee that the browser
won't evict some of the resources,

00:04:18.430 --> 00:04:18.430
no guarantee that it will
download all of them.

00:04:19.160 --> 00:04:21.400
You want more control over caching.

00:04:21.500 --> 00:04:23.810
So how do you do that?

00:04:23.940 --> 00:04:30.610
Let's have a look at the main
HTML file of your web application.

00:04:31.230 --> 00:04:32.060
Say index HTML.

00:04:32.060 --> 00:04:36.480
And here's what you need to change
to start using offline cache.

00:04:36.480 --> 00:04:38.990
It's basically just one line.

00:04:38.990 --> 00:04:45.810
And of course, if it's one line to start
using a new technology,

00:04:45.950 --> 00:04:48.540
And this line is a reference
to a different file.

00:04:48.620 --> 00:04:51.410
And obviously,
all the magic is inside that file.

00:04:51.580 --> 00:04:53.700
Let's have a look at that file.

00:04:54.560 --> 00:04:58.540
The application manifest file
can live anywhere on your server.

00:04:58.540 --> 00:05:03.760
In this example, it lives alongside,
in the same directory as index.html,

00:05:03.760 --> 00:05:05.910
but you can provide...

00:05:06.100 --> 00:05:18.900
[Transcript missing]

00:05:19.690 --> 00:05:23.020
All these resources will be
downloaded and stored on a

00:05:23.020 --> 00:05:27.040
user's computer for offline use
or just for use as in a cache.

00:05:30.800 --> 00:05:33.800
There's one thing missing here.

00:05:33.890 --> 00:05:38.990
I talked about HTML files, scripts,
images.

00:05:40.360 --> 00:05:44.730
But you have told us very clearly
that a modern web application

00:05:45.660 --> 00:05:48.540
actually needs media files.

00:05:48.600 --> 00:05:50.850
When you're writing a game,

00:05:51.280 --> 00:05:53.200
It needs sounds.

00:05:53.240 --> 00:05:57.450
And I'm very happy to say it,
that Safari now supports media

00:05:57.550 --> 00:05:59.200
files in offline application cache.

00:06:07.680 --> 00:06:12.440
Let's have another look at the
diagram of a web application.

00:06:12.540 --> 00:06:17.340
Besides resources, there is offline data,
and there is connection to the Internet.

00:06:17.460 --> 00:06:21.290
What are the technologies that
enable each of these boxes?

00:06:21.560 --> 00:06:25.000
I have already talked about
HTML5 application cache a little.

00:06:25.120 --> 00:06:28.600
For offline data,
it's local storage and SQL database.

00:06:28.650 --> 00:06:34.040
I will be talking about these in
more detail later in this session.

00:06:34.540 --> 00:06:38.500
And for network connection,
it's XML HTTP request,

00:06:38.500 --> 00:06:41.740
a technology that you're
all very familiar with.

00:06:41.770 --> 00:06:45.940
And it works, just like always,
with one exception.

00:06:45.940 --> 00:06:47.680
It doesn't work.

00:06:49.770 --> 00:06:54.260
All network access is blocked in
web applications that use offline

00:06:54.260 --> 00:06:56.700
application cache by default.

00:06:56.730 --> 00:06:58.430
And this is actually a good thing.

00:06:58.480 --> 00:07:00.770
It makes development easier.

00:07:01.470 --> 00:07:04.940
When you are creating your
offline application manifest,

00:07:05.000 --> 00:07:07.970
you don't want to disconnect
from the network just to

00:07:08.060 --> 00:07:10.870
test if everything is there,
how it works.

00:07:11.350 --> 00:07:14.140
I've been talking about how
frustrating it is to users

00:07:14.440 --> 00:07:16.490
to disconnect from the Net.

00:07:16.490 --> 00:07:19.940
And obviously it's just as
frustrating to you as a developer.

00:07:19.940 --> 00:07:24.350
You don't want to lose your email,
your instant messaging connections.

00:07:24.550 --> 00:07:28.540
This is why application cache blocks
all network access by default,

00:07:28.660 --> 00:07:30.600
making development easier.

00:07:30.670 --> 00:07:33.240
And of course,
there are ways to work around that,

00:07:33.350 --> 00:07:37.360
and I'm going to be talking
about these right now.

00:07:38.900 --> 00:07:42.570
So this is the same application
cache manifest file that lives

00:07:42.710 --> 00:07:45.600
somewhere on your web server.

00:07:45.710 --> 00:07:49.800
But now there is one more section,
a network section.

00:07:51.760 --> 00:07:54.360
In this example,
we have a web application

00:07:54.360 --> 00:07:58.830
that wants to use Flickr API,
the Flickr Web API that's

00:07:58.830 --> 00:08:01.560
exposed via URLs on the web.

00:08:01.690 --> 00:08:06.100
And adding Flickr URL to
network section achieves that.

00:08:06.290 --> 00:08:09.710
But there's a number of
URLs used by Flickr API.

00:08:10.250 --> 00:08:15.780
And it would be difficult or
even impossible to list them all.

00:08:15.900 --> 00:08:20.740
This is why the network
section is checked by prefix.

00:08:20.860 --> 00:08:23.530
All resources that match

00:08:24.220 --> 00:08:29.500
Let's start with the same string
that you have in the network section.

00:08:29.520 --> 00:08:31.840
Can be retrieved from the network.

00:08:31.890 --> 00:08:36.870
So just adding this single line
enables access to the whole Flickr API.

00:08:39.190 --> 00:08:42.940
And that's just perfect
for an application that is

00:08:42.950 --> 00:08:45.050
designed to work offline.

00:08:45.190 --> 00:08:47.610
You list all of your resources.

00:08:47.810 --> 00:08:52.670
In the first section,
you list a few prefix strings

00:08:53.730 --> 00:08:57.200
for network connection,
and you're done.

00:08:57.300 --> 00:09:01.430
It's not as easy for applications
that use offline application

00:09:01.430 --> 00:09:05.670
cache just for caching that are
not intended to work offline.

00:09:05.790 --> 00:09:09.800
They have a lot of resources that
need to be retrieved from the network,

00:09:09.890 --> 00:09:15.090
and listing them all would be
time-consuming and error-prone.

00:09:15.470 --> 00:09:19.340
We think that you have better
things to do with your time.

00:09:19.360 --> 00:09:22.630
And happily,
the HTML5 Working Group agrees.

00:09:22.710 --> 00:09:27.010
So now there is a way to specify
that all resources can be accessed

00:09:27.010 --> 00:09:29.090
from the network by default.

00:09:29.560 --> 00:09:33.010
Just put an asterisk
in the network section,

00:09:33.010 --> 00:09:35.290
and now the technology
is perfect for caching.

00:09:35.300 --> 00:09:38.740
So this is basically all.

00:09:38.900 --> 00:09:42.270
You need to do about offline
application cache to start using it.

00:09:42.270 --> 00:09:46.020
And there's just one more technology
that I'm going to talk about a little.

00:09:46.030 --> 00:09:50.090
And that's the fallback section.

00:09:52.340 --> 00:09:56.130
So,
say you have some images or some other

00:09:56.130 --> 00:10:01.280
resources that you would like to access
from the network when working online,

00:10:01.280 --> 00:10:05.100
but that are not essential for
the operation of your application.

00:10:05.220 --> 00:10:09.350
For example, some preview images.

00:10:10.560 --> 00:10:17.980
So if you create an image
tag with a link to that,

00:10:18.920 --> 00:10:22.840
And the user is offline,
they will get a broken image icon.

00:10:22.840 --> 00:10:25.360
That's not a great user experience.

00:10:26.930 --> 00:10:30.470
To avoid that,
you obviously use this fallback section.

00:10:30.490 --> 00:10:36.030
Lines in this section have two parts.

00:10:36.100 --> 00:10:39.800
The first part is a URL that
might be accessed online,

00:10:39.800 --> 00:10:43.220
but if it's not available,
a URL from the right part for a

00:10:43.220 --> 00:10:46.900
resource that is cached inside
the application cache is used.

00:10:47.600 --> 00:10:51.720
So in my example,
you could use a black image as a

00:10:52.030 --> 00:10:56.640
fallback or an image that says "Preview
not available," something like this.

00:10:56.860 --> 00:10:59.630
Anything is better than
a broken image icon.

00:11:02.840 --> 00:11:09.690
So these technologies are all standard,
supported in most modern browsers,

00:11:09.690 --> 00:11:14.500
and the browsers are deployed
on computers of a lot of users.

00:11:14.500 --> 00:11:18.280
But you can do more if you target iOS.

00:11:21.770 --> 00:11:26.770
There is a number of Apple-specific
tags that you can put in your

00:11:26.840 --> 00:11:31.900
HTML file to customize the behavior
of your application on iOS.

00:11:32.150 --> 00:11:35.970
For example,
you can say that you would like Safari to

00:11:36.100 --> 00:11:38.940
hide its user interface elements.

00:11:39.570 --> 00:11:44.240
Or you can specify an icon to use
when the user puts a link to your

00:11:44.240 --> 00:11:47.690
application onto their home screen.

00:11:49.600 --> 00:11:53.000
I won't be talking about these a lot.

00:11:53.050 --> 00:11:56.500
They are very well documented
on Apple developer's site.

00:11:56.630 --> 00:12:02.060
And there was a great session earlier
this week called Hidden Web App Gems.

00:12:02.190 --> 00:12:04.710
And if you haven't had
a chance to attend that,

00:12:04.810 --> 00:12:07.100
I highly recommend watching a video.

00:12:07.220 --> 00:12:14.610
So here's how having an application cache
affects the behavior of your application,

00:12:14.610 --> 00:12:15.090
what you can achieve by
having an application cache.

00:12:17.510 --> 00:12:21.830
And that's a static picture.

00:12:22.100 --> 00:12:26.610
The dynamic picture is that you want to
deploy new versions of your application.

00:12:27.200 --> 00:12:31.140
You want to redesign,
do any changes you like,

00:12:31.220 --> 00:12:33.490
like you did before.

00:12:34.570 --> 00:12:40.480
And the main design principle
here is that the process of

00:12:40.480 --> 00:12:41.660
application cache updating

00:12:42.980 --> 00:12:47.500
Never leaves you with a mix
of old and new resources.

00:12:47.750 --> 00:12:52.100
You obviously don't want to have
a mix of those after a redesign.

00:12:52.390 --> 00:12:54.190
And that has...

00:12:54.610 --> 00:12:56.000
Always been a problem.

00:12:56.000 --> 00:13:01.500
You have to rename the resources to
avoid taking no resource from a cache.

00:13:01.620 --> 00:13:04.600
You need to specify
cache headers and so on.

00:13:04.720 --> 00:13:09.460
The application cache solves
that in an easier way.

00:13:09.460 --> 00:13:11.710
So how does it achieve that?

00:13:13.220 --> 00:13:18.580
When a browser starts loading a page
and it sees that there is an offline

00:13:19.120 --> 00:13:24.050
cache manifest linked from that page,
it downloads it and checks if

00:13:24.050 --> 00:13:27.690
the content of the application
cache manifest has changed.

00:13:28.590 --> 00:13:30.950
If it hasn't changed,
the browser decides that

00:13:30.950 --> 00:13:35.280
the application is the same,
and it just uses resources

00:13:35.330 --> 00:13:37.130
that are stored locally.

00:13:38.950 --> 00:13:42.200
What does that mean
to you as a developer?

00:13:42.200 --> 00:13:45.760
That means that if you
change some resource,

00:13:45.760 --> 00:13:49.070
like change a CSS style
sheet or edit an image,

00:13:50.980 --> 00:13:54.240
You won't see it right after loading.

00:13:54.420 --> 00:13:56.510
That's because the browser
sees that application cache

00:13:56.510 --> 00:13:58.200
manifest hasn't changed.

00:13:58.280 --> 00:14:01.580
It doesn't even check
for your new resources.

00:14:01.770 --> 00:14:05.610
And to avoid that,
you will want to edit the

00:14:05.780 --> 00:14:07.580
manifest file a little.

00:14:07.800 --> 00:14:11.290
What I like is adding a
comment with a version number.

00:14:12.010 --> 00:14:14.920
That way,
the browser will check all the resources

00:14:15.040 --> 00:14:17.540
and download those that are new.

00:14:17.640 --> 00:14:19.910
So the user has opened the page.

00:14:20.200 --> 00:14:23.240
The browser has downloaded
all the new resources for an

00:14:23.250 --> 00:14:25.000
updated application cache.

00:14:25.000 --> 00:14:28.150
What happens next?

00:14:29.000 --> 00:14:32.000
And perhaps surprisingly,
nothing happens.

00:14:32.050 --> 00:14:37.420
The browser keeps both old and new
versions of your web application

00:14:38.070 --> 00:14:42.690
and continues using the old one on
the pages that are already open.

00:14:43.130 --> 00:14:46.360
And this is a case of the
same design principle.

00:14:46.540 --> 00:14:49.620
The user has already opened the page.

00:14:49.970 --> 00:14:53.300
They already have some of
their sources on the page.

00:14:53.450 --> 00:14:56.900
You don't want for a button that's loaded
right after the application cache update

00:14:56.900 --> 00:14:58.830
has been finished to look differently.

00:14:58.830 --> 00:15:05.120
So the next time the user
opens the application,

00:15:05.120 --> 00:15:08.210
it's then when they will use
the new application cache.

00:15:09.170 --> 00:15:13.140
And I think that's what
most web applications want.

00:15:13.170 --> 00:15:17.030
But just in case you really need
to update to the new look or new

00:15:17.030 --> 00:15:21.130
behavior as soon as possible,
there's a JavaScript call for that.

00:15:22.590 --> 00:15:24.440
Just swap cache.

00:15:24.450 --> 00:15:27.100
And I don't really know
what's the use case for that,

00:15:27.100 --> 00:15:28.420
so I'm not giving an example.

00:15:28.660 --> 00:15:30.580
But there are ways to do that.

00:15:30.740 --> 00:15:33.550
So what does this mean for users?

00:15:33.640 --> 00:15:37.400
Application cache update is
completely transparent in Safari.

00:15:37.440 --> 00:15:40.350
And that's exactly what the users want

00:15:40.610 --> 00:15:43.840
If the web application is using
application cache just for that,

00:15:43.840 --> 00:15:46.440
for caching,
users don't need to know that

00:15:46.440 --> 00:15:50.000
the cache is being updated,
that it has been updated.

00:15:50.120 --> 00:15:52.500
Why would they be interested in that?

00:15:52.640 --> 00:15:55.850
An application that's
designed to work offline,

00:15:57.190 --> 00:16:01.260
You might have reasons to
tell the user what's going on,

00:16:01.300 --> 00:16:09.340
to show downloading progress,
or to tell that now it's okay

00:16:09.340 --> 00:16:10.730
to disconnect from the network
since the application cache

00:16:10.730 --> 00:16:10.730
has been fully downloaded.

00:16:10.850 --> 00:16:12.580
And there are ways to do that.

00:16:12.670 --> 00:16:18.480
There are DOM events that are dispatched
that you can use them for custom UI,

00:16:18.570 --> 00:16:20.520
for progress.

00:16:20.750 --> 00:16:23.220
And with this,
I would like to invite my colleague

00:16:23.340 --> 00:16:27.930
Andy Este for a demo of using
application cache and using DOM events

00:16:27.980 --> 00:16:29.680
for custom UI with application cache.

00:16:29.680 --> 00:16:30.890
Welcome, Andy.

00:16:30.900 --> 00:16:32.110
Thank you.

00:16:34.040 --> 00:16:34.540
Thanks, Alexey.

00:16:34.540 --> 00:16:37.240
So some of my favorite
web apps are games,

00:16:37.240 --> 00:16:37.890
like I said.

00:16:37.900 --> 00:16:40.720
I have a game here called
The Legend of Sadness.

00:16:40.720 --> 00:16:43.560
It's written in the style of
these great 8-bit Nintendo games,

00:16:43.560 --> 00:16:47.700
and it's written using Canvas,
all modern HTML5 technologies.

00:16:47.700 --> 00:16:49.620
It's especially great on the iPad.

00:16:49.620 --> 00:16:52.800
In iOS 5, we have these great
Canvas speed improvements,

00:16:52.800 --> 00:16:54.360
and it works really well.

00:16:54.360 --> 00:16:57.070
But, you know,
I use my iPad a lot of places where

00:16:57.080 --> 00:17:00.190
I don't have a data connection,
where I'm offline.

00:17:00.840 --> 00:17:03.440
And it would be great to, you know,
still be able to play a game

00:17:03.440 --> 00:17:04.630
like this in those cases.

00:17:04.640 --> 00:17:09.310
So let's see how we can use the
techniques that Alexey taught us to make

00:17:09.310 --> 00:17:12.420
this web application available offline.

00:17:12.420 --> 00:17:17.520
So let me switch to the machine
that hosts this application.

00:17:19.180 --> 00:17:22.940
I've gone ahead and prepared
a cache manifest file.

00:17:23.100 --> 00:17:26.040
My first line, as Alexey mentioned,
is the signature.

00:17:26.040 --> 00:17:27.090
It's cache manifest.

00:17:27.250 --> 00:17:29.700
I went ahead and included
a version comment.

00:17:29.760 --> 00:17:33.230
Then I simply listed all the
sub-resources of the game.

00:17:33.260 --> 00:17:34.680
There's about 42 of them.

00:17:34.730 --> 00:17:37.480
It's a mixture of JavaScript and
images and style sheets,

00:17:37.510 --> 00:17:39.250
etc.

00:17:40.680 --> 00:17:43.950
All we need to do once we have
the cache manifest created is

00:17:43.950 --> 00:17:50.230
add one line to our HTML tag,
one attribute called manifest,

00:17:50.230 --> 00:17:54.420
and point it to the URL of
the cache manifest file.

00:17:56.540 --> 00:17:58.640
So I'll save that.

00:17:58.710 --> 00:18:01.780
And I'm going to switch back to the iPad,
and we'll reload the site,

00:18:01.910 --> 00:18:06.530
and we'll see what happens now that the
main resource has a manifest attribute.

00:18:06.550 --> 00:18:12.140
I've added some logging to the game
so that we can see what events fire.

00:18:15.980 --> 00:18:19.340
So let me reload.

00:18:19.340 --> 00:18:22.180
And so here's the logging.

00:18:22.200 --> 00:18:24.420
The first event that fires
is an event called checking.

00:18:24.420 --> 00:18:28.460
And every time there's a cache manifest,
there's a manifest attribute,

00:18:28.460 --> 00:18:29.660
the checking event will fire.

00:18:29.660 --> 00:18:34.740
And that indicates that the process of
updating the cache manifest has begun.

00:18:34.750 --> 00:18:37.800
And what it does is it downloads
the manifest file and sees if it has

00:18:37.860 --> 00:18:40.120
changed since the last time we saw it.

00:18:40.120 --> 00:18:42.100
In this case,
this is the first time we saw it.

00:18:42.280 --> 00:18:46.090
So we're going to download all
the resources that are listed in

00:18:46.090 --> 00:18:49.260
that cache manifest file and cache
them in the application cache.

00:18:49.280 --> 00:18:54.290
So the event we get when that downloading
begins is an event called downloading.

00:18:54.400 --> 00:18:58.080
And I say we download them,
but we do it in a very smart way.

00:18:58.120 --> 00:19:00.720
If that file is in the
HTTP cache and is still fresh,

00:19:00.780 --> 00:19:01.920
we'll just pull it from there.

00:19:02.090 --> 00:19:04.200
If it's not fresh,
we'll make a conditional request.

00:19:04.200 --> 00:19:07.540
So we're not necessarily doubling
the network traffic just because

00:19:07.540 --> 00:19:10.200
we're using the application cache.

00:19:10.210 --> 00:19:12.940
As we go and download resources,
the event that fires for each

00:19:12.940 --> 00:19:14.660
resource is a progress event.

00:19:14.860 --> 00:19:18.270
And something that's new in iOS
5 is this progress event has

00:19:18.270 --> 00:19:21.240
two helpful properties on it.

00:19:21.280 --> 00:19:24.760
The first property says the number of the
resource that is currently downloading.

00:19:24.760 --> 00:19:27.780
And the second property says the total
number of resources that will download.

00:19:27.830 --> 00:19:32.040
So that's how I can display this 0, 1,
2 of 43 indication.

00:19:32.240 --> 00:19:35.140
And that would be really useful if you
wanted to implement a progress bar,

00:19:35.140 --> 00:19:37.160
for instance, or some other kind of UI.

00:19:37.160 --> 00:19:41.040
So I'm just going to scroll through
all these progress events that fired.

00:19:41.160 --> 00:19:44.040
Finally, we've successfully downloaded
and cached all these resources.

00:19:44.040 --> 00:19:46.360
So the event that fires
is the cached event.

00:19:46.380 --> 00:19:48.400
And that says this resource
is now in the cache.

00:19:48.400 --> 00:19:51.740
And the next time you go to the site,
it'll be served from the application

00:19:51.740 --> 00:19:54.760
cache instead of from the web.

00:19:54.770 --> 00:19:56.500
So I'm going to close this dialogue.

00:19:56.550 --> 00:19:58.610
I still have the start
screen of this game up.

00:19:58.620 --> 00:20:02.200
And as Alexei mentioned, it's cached,
but it's not being used yet.

00:20:02.200 --> 00:20:06.160
It's not being used until the
next time that I load the page.

00:20:06.160 --> 00:20:09.280
So let me go ahead and refresh
so I can use the cached version.

00:20:09.300 --> 00:20:10.480
Now, events fire again.

00:20:10.480 --> 00:20:13.420
A checking event again fires.

00:20:13.420 --> 00:20:16.110
And Safari looked at the manifest
file and said it hasn't changed.

00:20:16.130 --> 00:20:17.260
So there's no need for an update.

00:20:17.260 --> 00:20:20.180
So the event that fires
in that case is no update.

00:20:20.740 --> 00:20:21.500
I'm going to close this.

00:20:21.590 --> 00:20:24.670
And the game implements a
progress bar as it's loading,

00:20:24.720 --> 00:20:26.470
and it looks like it's stuck.

00:20:26.610 --> 00:20:27.740
It's kind of stuck halfway through.

00:20:27.740 --> 00:20:31.030
Perhaps some resource has failed to load.

00:20:31.040 --> 00:20:34.700
Another thing Alexey mentioned is that
network access is blocked by default.

00:20:34.700 --> 00:20:39.010
So even though my iPad is online,
it can't access any resources

00:20:39.040 --> 00:20:41.380
that aren't explicitly listed
in that cache manifest file.

00:20:41.380 --> 00:20:43.120
So maybe I missed a resource.

00:20:43.120 --> 00:20:46.510
Let's go back to the machine
hosting this and take a look.

00:20:48.960 --> 00:20:54.590
So a helpful debug technique to
use in this case is to use Safari.

00:20:54.660 --> 00:20:57.820
And if I load this in Safari,

00:21:04.500 --> 00:21:09.480
So if I load it in Safari,
I see the same state

00:21:09.540 --> 00:21:10.680
that I saw on the iPad.

00:21:10.680 --> 00:21:12.500
What I can do is look
at the Activity window,

00:21:12.500 --> 00:21:15.980
and the Activity window will list
all the subresources that are loaded.

00:21:15.980 --> 00:21:18.500
And sure enough,
it's indicating that there's this

00:21:18.500 --> 00:21:20.230
one resource that was canceled.

00:21:20.230 --> 00:21:22.340
It was not allowed to
load from the network.

00:21:22.340 --> 00:21:24.540
That's probably the one that
my game needs but is missing

00:21:24.540 --> 00:21:25.740
from the cache manifest.

00:21:25.740 --> 00:21:28.140
So I'm going to go ahead and add that.

00:21:31.780 --> 00:21:34.700
I'm going to add it right here.

00:21:34.750 --> 00:21:39.340
Resources, tllbundle.js.

00:21:39.360 --> 00:21:40.700
OK, that looks good.

00:21:40.800 --> 00:21:44.940
So let me switch back to the iPad,
and let's see what happens now.

00:21:48.050 --> 00:21:50.730
So I'm going to reload again.

00:21:50.820 --> 00:21:53.400
So another checking event fires,
as I expect.

00:21:53.420 --> 00:21:56.220
And this time,
the cache manifest file has changed.

00:21:56.220 --> 00:21:57.610
I added that line.

00:21:57.940 --> 00:21:59.800
So because the cache
manifest file changed,

00:21:59.800 --> 00:22:04.030
every single resource gets revalidated
and potentially redownloaded,

00:22:04.610 --> 00:22:08.310
which is why you see, again,
another downloading event and more

00:22:08.450 --> 00:22:11.520
progress events for each sub-resource.

00:22:11.540 --> 00:22:14.250
And at the end, once this is all done,
the cached event was

00:22:14.310 --> 00:22:16.460
fired the first time,
but every subsequent time,

00:22:16.610 --> 00:22:18.040
an event fires called update ready.

00:22:18.040 --> 00:22:22.280
And update ready means that the update
is now cached and will be served

00:22:22.280 --> 00:22:23.980
the next time you load the page.

00:22:23.980 --> 00:22:24.850
I'll close out of this.

00:22:24.860 --> 00:22:29.860
Of course, I'm still in the state where
my application has this error.

00:22:29.890 --> 00:22:32.060
But here's what I'm going to do now.

00:22:32.060 --> 00:22:32.900
I'm going to reload it.

00:22:32.900 --> 00:22:34.780
But before I reload it,
I want to disconnect from the network.

00:22:34.780 --> 00:22:37.400
I really want to be sure that
this is actually working even

00:22:37.400 --> 00:22:39.740
without a data connection.

00:22:39.770 --> 00:22:43.490
What I'm going to do before that to make
this even a little nicer is I'm going

00:22:43.490 --> 00:22:46.810
to add this app to the home screen.

00:22:47.530 --> 00:22:48.960
And I'll, yeah, sure, call it that.

00:22:49.040 --> 00:22:53.930
I included the right link
tag that can give an icon.

00:22:53.930 --> 00:22:55.760
So now, instead of launching it
through Mobile Safari,

00:22:55.760 --> 00:22:57.890
I can click it from the home screen,
just like any other app.

00:22:57.960 --> 00:23:00.250
So let me go into settings.

00:23:00.250 --> 00:23:05.700
I'm going to go to Wi-Fi,
and I'm going to disconnect from Wi-Fi.

00:23:06.480 --> 00:23:07.600
So I don't have a 3G connection.

00:23:07.600 --> 00:23:08.970
I don't have a Wi-Fi connection.

00:23:08.990 --> 00:23:10.560
I'm decidedly offline.

00:23:10.560 --> 00:23:14.070
I'm going to go and launch my demo app.

00:23:14.430 --> 00:23:15.980
And something interesting happens here.

00:23:15.980 --> 00:23:17.950
I'm offline,
but there is still a manifest

00:23:18.030 --> 00:23:20.220
attribute on the main resource.

00:23:20.220 --> 00:23:23.460
So I'm going to still try to
update my application cache.

00:23:23.460 --> 00:23:24.920
So a checking event will fire.

00:23:24.920 --> 00:23:27.980
Of course, I'm offline,
so Safari can't download the

00:23:27.980 --> 00:23:30.420
cache manifest file and compare
it to the one that has cache.

00:23:30.420 --> 00:23:32.540
So the event that fires in
that case is called error,

00:23:32.540 --> 00:23:34.780
but this error is totally
expected when you're offline.

00:23:34.780 --> 00:23:37.690
And Safari will continue to serve
the most recent version of the

00:23:37.690 --> 00:23:39.720
application out of the cache manifest.

00:23:39.720 --> 00:23:42.000
I'm sorry, out of the application cache.

00:23:42.340 --> 00:23:44.320
So I'll close that, and there we go.

00:23:44.320 --> 00:23:44.980
There's the game.

00:23:44.980 --> 00:23:47.550
I'm totally offline,
and it's working great,

00:23:47.590 --> 00:23:50.090
being served from the application cache.

00:23:50.100 --> 00:23:52.440
Okay, well, back to Alexey.

00:23:58.780 --> 00:24:00.590
Thanks, Andy.

00:24:00.730 --> 00:24:04.800
So you can see that these DOM events
really provide a lot of insight into

00:24:04.800 --> 00:24:07.010
what's going inside the browser,
what's going on with

00:24:07.310 --> 00:24:09.320
the application cache.

00:24:09.720 --> 00:24:16.390
So I have said it earlier that
users don't care what's going

00:24:16.400 --> 00:24:20.400
on with application cache if
it's used just for caching.

00:24:20.450 --> 00:24:22.710
And that wasn't true.

00:24:23.060 --> 00:24:25.470
Actually,
users care about everything that's stored

00:24:26.010 --> 00:24:31.730
inside their browser on their computers,
and that's because of privacy.

00:24:32.420 --> 00:24:35.970
Anything that's stored
permanently inside the browser

00:24:36.390 --> 00:24:39.060
can be used for user tracking.

00:24:39.070 --> 00:24:42.760
And the most famous example of that is,
of course, cookies.

00:24:43.000 --> 00:24:46.620
But everything else is
really just the same.

00:24:46.650 --> 00:24:50.650
And this is why people demand
to have ways to see what's

00:24:50.910 --> 00:24:52.900
stored inside their browser.

00:24:52.940 --> 00:25:00.030
And they want to have ways to remove
all the traces that a certain site

00:25:00.210 --> 00:25:02.860
has left inside their browser.

00:25:03.110 --> 00:25:07.700
So let's have a look at
what UI Safari has for that.

00:25:08.290 --> 00:25:11.700
Why does that matter
to you as a developer?

00:25:11.780 --> 00:25:15.620
I think there are two reasons.

00:25:15.620 --> 00:25:15.620
First of all,

00:25:16.120 --> 00:25:23.770
You're going to use all the same
UI when developing your web application.

00:25:23.770 --> 00:25:23.770
You will want

00:25:24.270 --> 00:25:29.890
So start with a clean state to remove
everything to the original situation.

00:25:31.380 --> 00:25:34.930
And secondly,
you will want to provide guidance

00:25:34.930 --> 00:25:40.300
to your users so that you could
tell what they should expect,

00:25:40.390 --> 00:25:42.460
help them if something goes wrong.

00:25:42.570 --> 00:25:47.540
So here is a new pane in
Safari settings on iOS.

00:25:48.030 --> 00:25:50.300
It's new in iOS 5.

00:25:51.030 --> 00:25:55.440
It lists all sites that have
stored data on the computer,

00:25:55.440 --> 00:26:01.840
on the iPad or iPhone or Apple touch,
and how much data the site has stored.

00:26:02.210 --> 00:26:04.460
And this is actually
an interesting example.

00:26:04.560 --> 00:26:07.690
You can see that YouTube,
the mobile YouTube site,

00:26:07.720 --> 00:26:11.900
has stored about half a megabyte of data.

00:26:12.040 --> 00:26:15.020
And you can bet that
it's not all cookies.

00:26:15.740 --> 00:26:19.480
And yes, I have checked,
and the mobile YouTube site uses

00:26:19.480 --> 00:26:22.320
application cache and local storage,
which is cool.

00:26:22.390 --> 00:26:26.280
And if the user wants to delete all that,
they just tap this button.

00:26:26.280 --> 00:26:33.510
The desktop version of Safari has
a new privacy pane in Preferences.

00:26:34.230 --> 00:26:37.170
And the part that's
interesting to us here,

00:26:37.170 --> 00:26:38.010
it's basically the same.

00:26:38.020 --> 00:26:42.800
It lists all the sites that have
stored data on the computer.

00:26:43.350 --> 00:26:47.230
You can see that there are a
lot more sites than in iOS,

00:26:47.230 --> 00:26:51.890
since all sites that have regular
cache data are also listed.

00:26:51.910 --> 00:26:56.410
This can actually also
be used for tracking.

00:26:56.960 --> 00:27:01.300
And there are ways to remove the
data for some or all of the sites.

00:27:01.310 --> 00:27:07.080
Besides the privacy controls,
there are some general maintenance

00:27:07.160 --> 00:27:09.580
controls that are interesting to us here.

00:27:09.710 --> 00:27:12.900
The user can reset
Safari to a clean state.

00:27:12.920 --> 00:27:17.900
This is the Safari application menu,
the main menu of the browser.

00:27:18.010 --> 00:27:20.180
Or the user can empty cache.

00:27:20.320 --> 00:27:26.590
And this command empties both HTTP cache
and application caches for all sites.

00:27:26.890 --> 00:27:32.750
Which is interesting because the user
can delete your application cache,

00:27:32.750 --> 00:27:32.750
your resources,

00:27:33.230 --> 00:27:39.030
Without deleting your
other locally stored data.

00:27:39.150 --> 00:27:41.570
So your application needs to
be prepared for that situation.

00:27:41.570 --> 00:27:46.210
So I have talked about application cache.

00:27:47.490 --> 00:27:50.640
for storing resources.

00:27:50.660 --> 00:27:53.440
I have talked about
connecting to the cloud.

00:27:53.470 --> 00:27:57.190
And the last part is storing
and synchronizing data.

00:27:57.480 --> 00:28:01.640
As you have seen in the
keynote and throughout WWDC,

00:28:01.850 --> 00:28:08.750
Mac OS X Lion now supports autosave,
meaning that the user doesn't need to

00:28:08.860 --> 00:28:12.180
save documents if they don't want to.

00:28:12.330 --> 00:28:15.200
They can just close the application,
reboot the computer,

00:28:15.330 --> 00:28:19.260
start the application again,
and their documents will come back.

00:28:19.310 --> 00:28:21.380
The same has been

00:28:21.790 --> 00:28:27.560
the situation with the best
web apps for quite a while now.

00:28:27.580 --> 00:28:31.550
Users of web apps expect

00:28:31.760 --> 00:28:34.600
That they don't want to
save the application,

00:28:34.600 --> 00:28:38.380
their data, and that their data

00:28:38.760 --> 00:28:42.980
will not disappear if something
bad happens and they need

00:28:42.990 --> 00:28:44.500
to restart the browser.

00:28:44.570 --> 00:28:48.490
Obviously, you cannot save to the
server when working offline.

00:28:48.680 --> 00:28:54.260
But even when working online,
constantly saving after each keystroke

00:28:54.310 --> 00:28:58.840
would be prohibitively expensive.

00:28:58.870 --> 00:29:01.960
It would kill the performance.

00:29:02.020 --> 00:29:04.460
So we have a trade-off to make.

00:29:04.890 --> 00:29:08.030
We want to store all users' data.

00:29:08.440 --> 00:29:13.370
We want to store it on the remote server
because users can start working on

00:29:13.370 --> 00:29:17.790
their MacBook and then switch to iPad
and they expect the data to be there.

00:29:17.880 --> 00:29:22.800
But you also cannot save all the time
because that's just not going to work.

00:29:22.850 --> 00:29:27.700
We think that the question to ask
yourself here for your specific

00:29:27.780 --> 00:29:32.270
web application is how much data,
how much work your users

00:29:32.560 --> 00:29:37.820
would be prepared to lose
without getting too unhappy.

00:29:38.780 --> 00:29:42.430
For example, with a game,
it might be just fine to be returned

00:29:42.470 --> 00:29:44.660
to the beginning of a level.

00:29:44.690 --> 00:29:48.870
If something wrong happens,
then you need to restart the browser.

00:29:49.880 --> 00:29:54.380
With the word processing application,
it's more likely that people won't stand

00:29:54.720 --> 00:29:58.980
losing more than a few seconds of work,
maybe half a minute.

00:29:59.190 --> 00:30:02.020
I don't know.

00:30:02.020 --> 00:30:02.020
So the answer

00:30:02.310 --> 00:30:08.820
It depends completely on what users
of your web application expect.

00:30:09.480 --> 00:30:17.840
And when you need to save very often,
you can try saving locally first.

00:30:19.120 --> 00:30:22.960
And then uploading the data in
larger chunks to the server.

00:30:23.020 --> 00:30:27.830
Then the user won't lose their work.

00:30:28.590 --> 00:30:31.840
And also, they will be able to
switch between machines,

00:30:31.840 --> 00:30:33.220
between computers.

00:30:33.310 --> 00:30:39.180
So you save locally when offline,
or to improve performance.

00:30:39.790 --> 00:30:42.850
What to do when the user is
about to close a window to

00:30:42.940 --> 00:30:45.070
close your web application.

00:30:45.990 --> 00:30:50.950
In that case,
there are some DOM events dispatched.

00:30:51.860 --> 00:30:55.400
If you get one of those,
you know that the user is going

00:30:55.560 --> 00:30:58.450
to leave your web application,
to close the window,

00:30:58.540 --> 00:31:00.370
to navigate to another site.

00:31:00.900 --> 00:31:05.600
And that's the time to fully
synchronize the data immediately.

00:31:05.770 --> 00:31:10.840
So what are the technologies
that you use to store data?

00:31:11.400 --> 00:31:17.860
Traditionally, you've been using cookies,
but those have a number of limitations.

00:31:17.930 --> 00:31:22.490
First of all,
cookies are severely limited in size.

00:31:23.830 --> 00:31:27.330
And even if you can store a cookie,
that doesn't mean that

00:31:27.330 --> 00:31:28.600
it will stay there.

00:31:28.720 --> 00:31:33.560
The size limit is per domain,
and if the limit is exceeded,

00:31:33.730 --> 00:31:36.700
the browser can evict old cookies.

00:31:36.810 --> 00:31:40.700
This is not a way to write
reliable applications.

00:31:40.800 --> 00:31:46.290
Besides, all cookies are sent to the
server with each HTTP request.

00:31:46.720 --> 00:31:49.260
And we have seen that for
many web applications,

00:31:49.340 --> 00:31:53.570
the size of cookies dominates
the size of the request.

00:31:54.030 --> 00:31:58.660
Meaning that cookies materially
affect the performance of accessing

00:31:58.660 --> 00:32:00.810
resources from the network.

00:32:02.950 --> 00:32:08.160
And besides,
cookies are a really old technology,

00:32:08.160 --> 00:32:14.410
and they don't quite match the
modern model of web security.

00:32:14.490 --> 00:32:18.560
They have a different notion of
domain that makes them difficult

00:32:18.670 --> 00:32:20.510
to program with securely.

00:32:20.670 --> 00:32:24.690
So we're not saying that cookies
are deprecated in any way,

00:32:24.690 --> 00:32:25.160
no.

00:32:25.710 --> 00:32:29.360
You're still going to use cookies,
for example, for authentication, sure.

00:32:29.360 --> 00:32:33.600
But we don't think that storing
data in cookies makes sense anymore.

00:32:33.600 --> 00:32:37.110
So what are the replacement technologies?

00:32:38.410 --> 00:32:41.040
First of all, it's local storage.

00:32:41.130 --> 00:32:43.720
It's a very simple API.

00:32:43.840 --> 00:32:47.800
You can use it pretty much as a
drop-in replacement for cookies.

00:32:47.850 --> 00:32:50.970
It just stores key value pairs,

00:32:51.390 --> 00:32:54.140
It has the same security
model as the rest of the web,

00:32:54.140 --> 00:32:56.930
origin-based security.

00:32:57.030 --> 00:33:00.510
And let's have a look at the code,
how it's done.

00:33:02.510 --> 00:33:04.260
You can see it's really simple.

00:33:04.310 --> 00:33:08.280
There is a local storage object
defined in global object.

00:33:08.290 --> 00:33:10.950
It's just provided to you by the browser.

00:33:11.090 --> 00:33:14.220
And you set a property on that,
just like you do with the

00:33:14.320 --> 00:33:17.090
property of any JavaScript object.

00:33:17.450 --> 00:33:19.720
There's nothing different here.

00:33:19.740 --> 00:33:21.760
The difference is that when
the browser is restarted,

00:33:21.840 --> 00:33:23.140
the property is still here.

00:33:23.150 --> 00:33:24.820
It's stored persistently.

00:33:24.820 --> 00:33:26.800
And the values are all strings.

00:33:26.800 --> 00:33:29.140
But you can store...

00:33:30.880 --> 00:33:32.960
Any objects by serializing them to JSON.

00:33:32.960 --> 00:33:38.640
However, if you find yourself
saving objects into JSON,

00:33:38.640 --> 00:33:44.010
it might be a moment to consider using
a more powerful and flexible mechanism,

00:33:44.010 --> 00:33:45.700
which is SQL Database.

00:33:46.700 --> 00:33:51.210
A full SQL database,
a full SQL engine inside

00:33:51.220 --> 00:33:55.150
your browser with everything,
with tables for structured data storage,

00:33:55.190 --> 00:33:58.260
with triggers for
maintaining data integrity,

00:33:58.820 --> 00:34:02.220
with indexes for high performance.

00:34:02.600 --> 00:34:05.620
And the API is designed
for performance too,

00:34:05.640 --> 00:34:08.300
even when dealing with
huge amounts of data.

00:34:08.300 --> 00:34:12.730
The reason is that the
API is all asynchronous.

00:34:13.200 --> 00:34:17.060
You tell the browser what you
want to do with the database.

00:34:17.260 --> 00:34:20.200
You provide a function
to call when it's done.

00:34:20.690 --> 00:34:23.420
And while it's working,
the browser doesn't freeze,

00:34:23.420 --> 00:34:24.660
your web application doesn't freeze.

00:34:24.660 --> 00:34:27.510
It's very good for performance.

00:34:28.920 --> 00:34:31.130
And of course,
the API has the same security

00:34:31.140 --> 00:34:33.280
model as the rest of the web.

00:34:33.300 --> 00:34:37.430
Only sites with the same
origin can access the database.

00:34:37.940 --> 00:34:39.500
Let's have a look at the code.

00:34:39.520 --> 00:34:45.290
You can see that it's much more code,
but it's quite manageable.

00:34:45.350 --> 00:34:47.750
What are the interesting parts here?

00:34:48.860 --> 00:34:51.160
Here's the SQL statement.

00:34:51.160 --> 00:34:53.400
I'm asking the browser to
select names and company

00:34:53.500 --> 00:34:56.300
affiliations of all WWC attendees.

00:34:56.690 --> 00:35:00.460
And when it's done,
a callback function is called.

00:35:00.490 --> 00:35:04.090
And in this function,
I have access to all

00:35:04.090 --> 00:35:06.360
the rows of the result.

00:35:06.390 --> 00:35:08.690
The data is already structured.

00:35:08.690 --> 00:35:11.000
I don't need to deserialize it.

00:35:11.760 --> 00:35:15.800
And if something goes wrong, for example,
if there's no WWDC attendees

00:35:16.320 --> 00:35:20.190
table inside your browser,
then an error function is called.

00:35:20.250 --> 00:35:22.190
It's quite simple, in fact.

00:35:22.530 --> 00:35:25.850
And with this,
I would like to invite Andy back with

00:35:25.850 --> 00:35:29.720
a demo of using HTML5 Data Storage.

00:35:30.910 --> 00:35:32.540
Thanks, Alexey.

00:35:35.720 --> 00:35:38.660
So here I am on Twitter.com.

00:35:38.690 --> 00:35:39.500
I like to use Twitter a lot.

00:35:39.610 --> 00:35:43.150
I follow a lot of people on Twitter,
and I have this problem where

00:35:43.780 --> 00:35:49.800
I often have too much data to
consume in sort of one sitting.

00:35:49.800 --> 00:35:53.820
So it would be great if we could use
some of the techniques that Alexey has

00:35:53.820 --> 00:35:58.260
been talking about to maybe cache this
information so that I can read it later,

00:35:58.260 --> 00:36:00.420
possibly even when I'm offline.

00:36:00.760 --> 00:36:03.540
So in the first demo,
we talked about using the

00:36:03.540 --> 00:36:08.260
application cache to cache resources,
but that's not really appropriate here.

00:36:08.260 --> 00:36:12.680
The resources of this page are things
like its icon and the scripts and style

00:36:12.680 --> 00:36:16.590
sheets and other images that it uses,
things that either don't

00:36:17.000 --> 00:36:19.650
change or change infrequently,
maybe when a new version

00:36:19.650 --> 00:36:20.730
of the site is rolled out.

00:36:20.760 --> 00:36:23.370
But that doesn't really describe
the data in the timeline.

00:36:23.380 --> 00:36:25.430
The data in the timeline
is constantly changing.

00:36:25.430 --> 00:36:27.760
Every second, every minute,
there's new data.

00:36:27.760 --> 00:36:31.210
So the application cache is not an
appropriate technique to use there.

00:36:31.210 --> 00:36:34.780
The appropriate techniques
are the two data storage

00:36:35.190 --> 00:36:39.720
mechanisms that Alexey mentioned,
local storage and SQL storage.

00:36:39.720 --> 00:36:42.970
So what I've done here is I've
written a Safari extension to

00:36:42.970 --> 00:36:46.480
try to cache this information,
and I'm not going to go into a lot

00:36:46.480 --> 00:36:48.710
of detail of the extension itself.

00:36:48.790 --> 00:36:51.840
I hope you all saw the extensions
session that was right before this,

00:36:51.940 --> 00:36:54.280
and if you didn't,
please watch the video online.

00:36:54.280 --> 00:36:55.760
It goes into great detail.

00:36:55.760 --> 00:36:59.200
But what I'll do is just... focus
on the part of the extension

00:36:59.200 --> 00:37:00.790
that deals with offline storage.

00:37:00.840 --> 00:37:02.920
So let me show you what I've done.

00:37:03.020 --> 00:37:07.490
I've written an extension that
injects a script into Twitter.com.

00:37:07.710 --> 00:37:14.350
And it basically extracts the
timeline from the DOM and sends to

00:37:14.360 --> 00:37:19.340
my global page an object that is a
JavaScript array of dictionaries.

00:37:19.340 --> 00:37:21.430
And the array is there's
one entry per tweet,

00:37:21.430 --> 00:37:25.300
and each tweet is a dictionary that has
properties for things like the username,

00:37:25.300 --> 00:37:29.300
the content of the tweet, the message,
etc.

00:37:29.300 --> 00:37:33.150
So once I have that,
it's really simple to store

00:37:33.150 --> 00:37:35.640
this information offline.

00:37:35.640 --> 00:37:37.220
Now, I could use SQL storage.

00:37:37.220 --> 00:37:40.800
I could write a schema,
and I could write SQL queries

00:37:40.800 --> 00:37:43.870
to insert this data into SQL,
and that would work really well,

00:37:43.870 --> 00:37:44.970
and it would be really performant.

00:37:45.170 --> 00:37:46.950
You know, I'm kind of lazy in this case.

00:37:47.000 --> 00:37:49.130
I didn't want to go
through all that work.

00:37:49.180 --> 00:37:51.260
I wanted to do something
that was really simple.

00:37:51.260 --> 00:37:53.730
So I decided to use local storage,
and local storage is

00:37:53.800 --> 00:37:54.960
not a bad choice here.

00:37:54.960 --> 00:37:56.870
We're dealing with, you know,
tweets contain small

00:37:56.870 --> 00:37:57.940
amounts of information.

00:37:57.940 --> 00:38:00.300
So we're dealing with
something that could easily

00:38:00.300 --> 00:38:01.960
be cacheable in local storage.

00:38:03.700 --> 00:38:06.680
So what I've done was I set
one property called num_tweets.

00:38:06.720 --> 00:38:09.940
It simply stores the length
of the Twitter array,

00:38:10.000 --> 00:38:10.690
the timeline array.

00:38:10.840 --> 00:38:15.450
And then I iterate that array,
and I store a value for the name,

00:38:15.450 --> 00:38:19.300
the username,
and the contents of the message.

00:38:19.330 --> 00:38:21.850
And I just use a convention
for the key values of sort of

00:38:21.850 --> 00:38:25.840
the property I'm interested in,
followed by an index into the array

00:38:25.840 --> 00:38:28.040
so that I can pull it back later.

00:38:28.130 --> 00:38:30.190
I could also,
another way I could do this is

00:38:30.190 --> 00:38:33.470
I could serialize the entire
array of dictionaries into JSON.

00:38:33.480 --> 00:38:35.780
And then store that
in a property as well.

00:38:35.920 --> 00:38:38.930
So once we've done that,
we can really do a lot of things with

00:38:38.930 --> 00:38:41.330
that data now that it's in local storage.

00:38:41.410 --> 00:38:45.130
What I did was I created an
extension popover that simply

00:38:45.130 --> 00:38:47.580
lists this information in a list.

00:38:47.640 --> 00:38:49.970
And I'm clearly not a designer.

00:38:50.150 --> 00:38:52.890
Maybe I should go to the
CSS talk to make this look good.

00:38:53.070 --> 00:38:55.240
But, you know,
it conveys the right information.

00:38:55.240 --> 00:38:58.860
It's a list of tweets, and it's not just
available on Twitter.com.

00:38:58.860 --> 00:39:01.310
It's available, you know,
anywhere when I'm in Safari,

00:39:01.310 --> 00:39:02.380
even when I'm offline.

00:39:03.420 --> 00:39:05.110
And this isn't bad,
but I think we can make

00:39:05.110 --> 00:39:06.100
it a little better.

00:39:06.100 --> 00:39:10.320
There's some more information that's
in my timeline that I'd be interested

00:39:10.320 --> 00:39:12.240
in including in this popover.

00:39:12.240 --> 00:39:14.830
The most interesting
piece of information,

00:39:14.830 --> 00:39:17.360
I think, is the user's profile picture.

00:39:17.360 --> 00:39:21.420
It adds some visual
richness to the popover.

00:39:21.420 --> 00:39:24.920
It also gives my eyes a way to
instantly kind of identify tweets from

00:39:24.920 --> 00:39:27.040
certain users that I like to follow.

00:39:27.040 --> 00:39:30.370
So let's see how I can do that.

00:39:30.380 --> 00:39:33.340
It seems like it might not be possible
with a simple key value store.

00:39:33.340 --> 00:39:37.070
But there's some tricks we can do
by incorporating other technologies

00:39:37.170 --> 00:39:39.090
in HTML5 to achieve that effect.

00:39:39.180 --> 00:39:41.300
So I'm going to open another file here.

00:39:41.300 --> 00:39:46.210
What I have here is a helper function,
and it's called encode and store image.

00:39:46.320 --> 00:39:47.780
And it takes two parameters.

00:39:47.780 --> 00:39:48.930
It takes two arguments.

00:39:48.940 --> 00:39:54.120
It takes a URL to one of
those images and then a key,

00:39:54.120 --> 00:39:57.660
which is the key into local storage
where I want to store the result.

00:39:57.660 --> 00:40:00.790
Now, I could just store the
URL directly and just load it

00:40:00.790 --> 00:40:02.740
in my extension popover later.

00:40:02.740 --> 00:40:03.320
But that's not going to happen.

00:40:03.320 --> 00:40:04.450
But that wouldn't work if I was offline.

00:40:04.460 --> 00:40:07.070
And I'm certainly interested in
making all this work seamlessly

00:40:07.070 --> 00:40:08.300
both online and offline.

00:40:08.300 --> 00:40:09.750
So I'm going to use another trick.

00:40:09.820 --> 00:40:14.390
I'm going to create an image object and
give that image object an onload handler.

00:40:14.400 --> 00:40:17.680
And what that onload handler is
going to do is get a reference to a

00:40:17.680 --> 00:40:21.260
Canvas element that I've created in
the global page so it's not visible.

00:40:21.260 --> 00:40:23.090
I'm going to get the
context of that image,

00:40:23.090 --> 00:40:24.870
and I'm going to draw the image into it.

00:40:24.920 --> 00:40:27.710
And once I've done that,
I can extract back out

00:40:27.770 --> 00:40:29.220
of Canvas a data URL.

00:40:29.220 --> 00:40:31.680
And a data URL is like any other URL.

00:40:31.680 --> 00:40:33.300
You can use it in place.

00:40:33.300 --> 00:40:34.540
You can use it in place of any other URL.

00:40:34.540 --> 00:40:38.800
But the contents of the URL is
the image base64 encoded.

00:40:38.800 --> 00:40:41.030
So the URL is the image itself.

00:40:42.810 --> 00:40:44.940
So once I do that,
I store it in local storage using

00:40:44.940 --> 00:40:46.820
the key that I've passed in.

00:40:46.870 --> 00:40:48.830
And now that I have that
onload handler set up,

00:40:48.900 --> 00:40:51.160
all I need to do is set the
image's source property to

00:40:51.160 --> 00:40:52.930
the URL I'm just loading.

00:40:52.950 --> 00:40:54.950
The network will load that image,
and sometime later,

00:40:54.950 --> 00:40:58.040
my onload handler will get
called and do all this work.

00:40:58.370 --> 00:41:04.480
So let's add this into my global page.

00:41:04.480 --> 00:41:09.060
And then let's call it.

00:41:11.460 --> 00:41:16.110
So I'm just going to-- the images
URL is passed along in this dictionary.

00:41:16.300 --> 00:41:18.820
So whoops.

00:41:20.500 --> 00:41:20.940
Nice.

00:41:20.940 --> 00:41:22.260
There we go.

00:41:22.970 --> 00:41:24.170
Okay.

00:41:24.170 --> 00:41:28.940
So now let's take a look at,
so first let me,

00:41:28.940 --> 00:41:31.180
I need to reload my extension.

00:41:34.020 --> 00:41:35.250
So I'm going to reload my extension.

00:41:35.380 --> 00:41:39.840
I'm going to go to, you know, apple.com.

00:41:39.840 --> 00:41:43.290
And sure enough, I can click this,
and now I have images,

00:41:43.290 --> 00:41:48.660
and this is all available offline
using a very simple key value approach.

00:41:48.660 --> 00:41:50.490
So, okay, back to you, Alexey.

00:41:55.070 --> 00:41:55.440
Thanks, Andy.

00:41:55.440 --> 00:42:01.560
It's pretty cool technology,
and it also shows the difference

00:42:01.560 --> 00:42:02.760
between data and resources.

00:42:04.300 --> 00:42:07.800
You shouldn't think of all
images as resources necessarily.

00:42:07.800 --> 00:42:10.550
And you don't need to update
your application cache,

00:42:10.550 --> 00:42:13.470
basically your application,
just to add some data,

00:42:13.470 --> 00:42:14.920
like in this example.

00:42:14.920 --> 00:42:19.500
So we have talked about
a number of technologies.

00:42:22.180 --> 00:42:28.300
Those were HTML5 Replication Cache,
two technologies for data storage,

00:42:28.950 --> 00:42:33.520
And how HTML5 application cache
interacts with network requests,

00:42:33.550 --> 00:42:35.300
with XMLHCP requests.

00:42:35.550 --> 00:42:38.910
And this is quite a bit to swallow.

00:42:40.510 --> 00:42:46.400
And a lot of developers have told us,
and we have experienced that ourselves,

00:42:46.460 --> 00:42:51.210
that when you start using all this,
suddenly nothing works.

00:42:51.310 --> 00:42:54.280
And it used to be pretty
difficult to debug.

00:42:55.750 --> 00:42:56.680
It's getting better.

00:42:56.760 --> 00:42:59.580
Let's talk about debugging
offline applications,

00:42:59.780 --> 00:43:02.860
how you actually bring all
these technologies to market.

00:43:05.740 --> 00:43:08.780
What do you do if nothing works?

00:43:08.890 --> 00:43:12.780
Well, now you do just what you do
with any other technology.

00:43:12.780 --> 00:43:15.790
You go to Web Inspector and check
Web Inspector console first.

00:43:15.840 --> 00:43:20.300
We have added a number of error
messages for application cache update,

00:43:20.400 --> 00:43:23.880
and if something goes wrong here,
if nothing works,

00:43:23.880 --> 00:43:28.670
it's almost certain that there will be a
message in Web Inspector explaining why.

00:43:31.710 --> 00:43:37.420
For a deeper look,
you go to Web Inspector Resources pane,

00:43:37.460 --> 00:43:40.490
and we'll have a look at those very soon.

00:43:42.030 --> 00:43:47.000
And I have said it before,
but I will repeat it.

00:43:47.030 --> 00:43:49.800
Progressive events that are dispatched

00:43:49.930 --> 00:43:52.490
And you can handle them from your
JavaScript to provide a lot of

00:43:52.490 --> 00:43:55.590
insight into what is going on there.

00:43:56.610 --> 00:44:00.000
You can use those to
provide UI or to debug.

00:44:00.090 --> 00:44:01.900
They are really helpful.

00:44:02.010 --> 00:44:05.100
So what does Web Inspector look like?

00:44:05.200 --> 00:44:08.540
The resources pane has been redesigned.

00:44:08.640 --> 00:44:14.290
All the data that's stored locally has
been gathered into this single pane.

00:44:16.070 --> 00:44:20.640
And the first part of it is SQL database.

00:44:20.700 --> 00:44:27.860
You can see all the databases that
your site have created and stored.

00:44:27.950 --> 00:44:31.120
There is a nice visual representation.

00:44:31.240 --> 00:44:34.810
But there's also this
little known secret.

00:44:35.970 --> 00:44:41.310
You can type in any SQL statement,
and it will be executed,

00:44:41.310 --> 00:44:42.910
and the results will be
presented graphically.

00:44:42.920 --> 00:44:46.390
In this example, I select...

00:44:46.620 --> 00:44:54.490
All entries from WWDC web track sessions
that have "offline" in the name.

00:44:54.850 --> 00:44:57.720
There's only one,
so I'm glad you're all here to

00:44:57.720 --> 00:44:59.640
learn about offline technologies.

00:44:59.640 --> 00:45:03.140
It's a really powerful tool.

00:45:06.950 --> 00:45:09.580
Of course, we display local storage.

00:45:09.580 --> 00:45:15.220
Just the same nice
graphical representation.

00:45:15.220 --> 00:45:19.370
And you can edit values
in local storage as well.

00:45:22.040 --> 00:45:25.760
In this case, I'm editing a preference.

00:45:25.850 --> 00:45:30.390
But if your game stores a
high score in local storage,

00:45:30.390 --> 00:45:34.510
you should be prepared to the
more advanced of your users

00:45:34.510 --> 00:45:37.290
gaining incredibly high scores.

00:45:40.810 --> 00:45:44.180
Of course, we do display cookies.

00:45:44.210 --> 00:45:47.270
And again,
it's all laid out quite nicely.

00:45:47.400 --> 00:45:51.130
You can see it here because
all the columns are so small,

00:45:51.130 --> 00:45:57.460
but all the information
is readily available.

00:45:57.460 --> 00:46:01.370
And what's really new here is
the application cache pane.

00:46:04.800 --> 00:46:09.810
Now that we support the
asterisk in the network section,

00:46:10.050 --> 00:46:13.860
It has become even more
important to see what exactly is

00:46:13.860 --> 00:46:16.270
inside your application cache.

00:46:17.240 --> 00:46:20.120
You can see it just by
testing your application,

00:46:20.140 --> 00:46:22.790
seeing if it works.

00:46:22.970 --> 00:46:26.220
So here's the list of all the resources.

00:46:26.920 --> 00:46:30.470
They have the explanation why
they're there in the type column.

00:46:30.500 --> 00:46:33.650
It's not always obvious,
since you don't normally add a

00:46:33.840 --> 00:46:39.400
manifest file to your cache or the
resource from fallback section.

00:46:40.260 --> 00:46:43.300
And at the first glance,
it might be surprising that they're here,

00:46:43.350 --> 00:46:45.300
they're there.

00:46:45.310 --> 00:46:49.090
The type column explains why.

00:46:49.190 --> 00:46:53.060
So we think that this
set of debugging tools

00:46:55.600 --> 00:47:05.000
[Transcript missing]

00:47:08.870 --> 00:47:12.190
So to recap,
I've been talking about a number

00:47:12.200 --> 00:47:14.730
of offline web technologies.

00:47:14.980 --> 00:47:18.840
And we think that these are becoming

00:47:19.140 --> 00:47:20.610
Very important.

00:47:20.960 --> 00:47:25.900
If you have previously optimized
your site for mobile platforms,

00:47:25.900 --> 00:47:29.500
this is great.

00:47:29.520 --> 00:47:32.370
But it might not be enough anymore.

00:47:33.410 --> 00:47:38.440
People want the applications
to work even faster.

00:47:38.610 --> 00:47:41.100
They want them to be dependable.

00:47:41.750 --> 00:47:45.300
They want to play a
web-based game in airplane.

00:47:45.300 --> 00:47:46.750
Why not?

00:47:49.150 --> 00:47:51.800
and all the technologists are there.

00:47:51.810 --> 00:47:57.410
If you have previously tried
using them and found them lacking,

00:47:58.880 --> 00:48:02.000
We think that you should try again.

00:48:02.040 --> 00:48:04.000
The platform has become more powerful.

00:48:04.210 --> 00:48:09.020
The specifications have been expanded.

00:48:09.090 --> 00:48:11.980
The implementations have improved a lot.

00:48:12.870 --> 00:48:15.260
And developer tools
have become much better,

00:48:15.390 --> 00:48:19.320
making it more practical to
work on these technologies.

00:48:20.140 --> 00:48:24.160
And speaking of that,
Safari has great development tools.

00:48:24.220 --> 00:48:28.470
We think that this is exactly what's
needed to work on these applications.

00:48:32.450 --> 00:48:36.720
For more information,
please contact Vicky Merlin,

00:48:36.750 --> 00:48:38.920
who is a Safari and
Web Technologies Evangelist at Apple.

00:48:41.170 --> 00:48:45.740
All these technologies
are open standards.

00:48:45.740 --> 00:48:49.970
And if you want maximum detail,
you can go to the standards

00:48:50.060 --> 00:48:52.440
themselves on WattWG and W3C sites.

00:48:55.320 --> 00:48:58.850
There's also great documentation
on Safari Development Center on

00:48:58.850 --> 00:49:00.030
developer.apple.com.

00:49:00.040 --> 00:49:02.640
I personally like this
documentation a lot.

00:49:05.660 --> 00:49:09.340
To discuss the technologies
and to ask questions,

00:49:09.350 --> 00:49:11.990
please go to Apple Developer Forums.

00:49:13.350 --> 00:49:17.760
And also you can go to
WebKit Open Source Project.

00:49:17.780 --> 00:49:20.080
WebKit is the basis.

00:49:20.480 --> 00:49:24.140
under Safari,
the open source rendering engine.

00:49:24.140 --> 00:49:29.530
And their project has a mailing list
and an IRC channel if you prefer

00:49:29.760 --> 00:49:32.490
these methods of communication.

00:49:36.410 --> 00:49:40.260
I recommend,
I have already mentioned that,

00:49:40.260 --> 00:49:42.690
a session that

00:49:43.050 --> 00:49:45.360
was earlier in the week.

00:49:45.380 --> 00:49:49.480
Session about hidden gems for web apps.

00:49:49.500 --> 00:49:50.990
And thank you.