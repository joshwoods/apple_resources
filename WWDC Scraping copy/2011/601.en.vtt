WEBVTT

00:00:11.780 --> 00:00:15.010
Ladies and gentlemen,
please welcome Vice President,

00:00:15.010 --> 00:00:18.610
OS Software, Craig Federighi.

00:00:25.720 --> 00:00:26.960
Hello everybody.

00:00:26.960 --> 00:00:28.310
Did you have a good morning?

00:00:28.310 --> 00:00:32.700
Yeah, that was some pretty nice stuff.

00:00:32.700 --> 00:00:37.160
Well, I am thrilled to be able to kick
off the technical session here at,

00:00:37.270 --> 00:00:39.730
and we're going the other direction.

00:00:39.740 --> 00:00:40.470
Let's go this way.

00:00:40.470 --> 00:00:42.000
Let's go forward today.

00:00:42.000 --> 00:00:46.260
So I'm here to kick off the
technical sessions here at WWDC.

00:00:46.260 --> 00:00:48.540
Now this morning,
we heard a lot of pretty

00:00:48.540 --> 00:00:52.160
astounding claims about the amount,
the number of new developer

00:00:52.160 --> 00:00:53.860
APIs that were available.

00:00:53.860 --> 00:01:01.920
1,500 new APIs for iOS 5 and a
staggering 3,000 new APIs for Lion.

00:01:01.920 --> 00:01:04.420
Now I know a lot of you in the
audience are engineers like

00:01:04.420 --> 00:01:05.890
me and are detail oriented.

00:01:05.910 --> 00:01:07.120
You want to get to the bottom of this.

00:01:07.120 --> 00:01:09.840
You want to learn about every
single one of these APIs.

00:01:09.840 --> 00:01:12.290
We have this hall, I think,
all afternoon,

00:01:12.290 --> 00:01:15.310
and I think there's no time
like the present to dig in.

00:01:15.310 --> 00:01:22.910
I want to start alphabetically
with the Accelerate framework.

00:01:25.210 --> 00:01:26.490
Accelerate.

00:01:26.490 --> 00:01:31.140
We're going to start with the
first header in Accelerate.

00:01:31.200 --> 00:01:34.220
This is alpha.h.

00:01:34.220 --> 00:01:45.510
So, V image alpha blend planar 8
takes the following arguments.

00:01:45.510 --> 00:01:45.510
No, alright.

00:01:45.510 --> 00:01:45.510
Seriously, okay.

00:01:45.510 --> 00:01:45.510
Let's work our way through.

00:01:48.900 --> 00:01:50.290
Craig Federighi, very nice crowd.

00:01:50.290 --> 00:01:51.660
All right, let's seriously,
let's step back.

00:01:51.660 --> 00:01:57.770
So our users love the beautiful devices,
these physical objects that we make.

00:01:57.850 --> 00:01:59.590
But I think as Steve said
it best this morning,

00:01:59.590 --> 00:02:03.050
as software people,
I think we feel it's the software

00:02:03.290 --> 00:02:05.940
that's really the soul of these systems.

00:02:05.990 --> 00:02:10.380
These excellent applications,
whether they be for the Mac, the iPhone,

00:02:10.490 --> 00:02:13.790
or the iPad, are really, I think,
what embody the true

00:02:13.790 --> 00:02:15.890
experience of our platforms.

00:02:16.620 --> 00:02:19.430
And we're going to talk today
about these set of platforms.

00:02:19.650 --> 00:02:22.450
This is what this week is really about,
the platforms that let you

00:02:22.450 --> 00:02:23.850
create these great apps.

00:02:23.890 --> 00:02:28.280
And I want to start by talking about
our desktop and mobile platforms

00:02:28.280 --> 00:02:30.430
and really how they came to be.

00:02:30.440 --> 00:02:33.070
You know,
because most companies in our industry

00:02:33.260 --> 00:02:36.070
have started down this path of saying,
you know,

00:02:36.070 --> 00:02:38.610
there are two totally separate monoliths.

00:02:38.700 --> 00:02:41.090
And in fact,
they put a wall between them and

00:02:41.090 --> 00:02:43.480
caused them to grow apart over time.

00:02:43.480 --> 00:02:46.330
This is bad for users and
ultimately bad for developers.

00:02:46.370 --> 00:02:47.340
So what are the two different
platforms that we're talking about?

00:02:47.340 --> 00:02:48.290
And what are the two developers
who want to target these platforms?

00:02:48.290 --> 00:02:51.600
Well, from the start,
we took a very different

00:02:51.600 --> 00:02:53.620
path with MacÂ OSÂ X and iOS.

00:02:53.620 --> 00:02:56.170
As we all know,
iOS was actually born out of

00:02:56.310 --> 00:02:58.280
the foundations of MacÂ OSÂ X.

00:02:58.280 --> 00:03:01.050
And over time,
we've taken innovations and

00:03:01.050 --> 00:03:04.700
inspirations from iOS and
brought them back to the Mac.

00:03:04.750 --> 00:03:08.550
But these platforms actually
sit on a common base of code.

00:03:08.570 --> 00:03:12.810
And so at this point, as we innovate,
those innovations actually

00:03:12.810 --> 00:03:14.460
feed both platforms.

00:03:16.060 --> 00:03:45.780
So what is that platform?

00:03:45.780 --> 00:03:45.780
Well, it starts down, of course,
at the bottom with Core OS,

00:03:45.780 --> 00:03:45.780
all the Unix stuff,
including some really awesome

00:03:45.780 --> 00:03:45.780
capabilities around power management,
some really differentiated

00:03:45.780 --> 00:03:45.780
security architecture.

00:03:45.780 --> 00:03:45.780
But as developers,
we usually start interfacing

00:03:45.780 --> 00:03:45.780
at the level of core services,
things like the foundation

00:03:45.780 --> 00:03:45.780
set of object-oriented APIs,
grand central dispatch, core data,

00:03:45.780 --> 00:03:45.780
higher-level networking interfaces.

00:03:45.780 --> 00:03:45.780
You move up the stack
into graphics and media,

00:03:45.780 --> 00:03:45.780
and you have things like
our 2D drawing model,

00:03:45.780 --> 00:03:45.780
Quartz, and core graphics.

00:03:45.780 --> 00:03:50.230
Core media for audio and video,
OpenGL ES and OpenGL,

00:03:50.230 --> 00:03:52.610
and then WebKit for HTML5.

00:03:52.620 --> 00:03:55.810
These layers are all completely
common across these platforms.

00:03:55.810 --> 00:03:59.740
It's when you get to the highest
level of Cocoa and Cocoa Touch where

00:03:59.740 --> 00:04:03.110
the frameworks actually diverge,
but for good reason,

00:04:03.110 --> 00:04:07.120
because we believe that fundamentally
the requirements of a Mac and

00:04:07.120 --> 00:04:11.140
of a touchscreen device like an
iPhone and iPad are different.

00:04:11.140 --> 00:04:15.500
And so the view system, the controls,
the navigation mechanisms necessarily

00:04:15.500 --> 00:04:18.530
should be different for those layers.

00:04:19.160 --> 00:04:22.870
Now we also then have a set
of common tools and languages

00:04:23.120 --> 00:04:24.820
that serve both platforms.

00:04:24.820 --> 00:04:28.440
Our investment in things like Xcode,
LLVM and instruments help with

00:04:28.720 --> 00:04:32.660
innovations across this entire stack.

00:04:32.960 --> 00:04:38.010
Now if you look at Lion and iOS 5,
there have been a lot of cases where

00:04:38.050 --> 00:04:42.280
technologies that premiered on one
actually now are available on the other.

00:04:42.280 --> 00:04:44.690
And I want to go through a few of
these because it's pretty interesting.

00:04:44.750 --> 00:04:48.010
At the Core OS level,
sandboxing is something that

00:04:48.010 --> 00:04:52.310
actually started in iOS 5 and now
as we'll talk about later has come

00:04:52.310 --> 00:04:56.330
to the Mac while some security
features like our SSL transport

00:04:56.330 --> 00:04:59.150
has become public API now in iOS 5.

00:04:59.210 --> 00:05:01.990
At the core services layer,
take something like core location.

00:05:02.000 --> 00:05:06.070
Of course, originally pioneered on iOS,
now on the Mac and the Mac's

00:05:06.070 --> 00:05:11.040
accelerate framework has now
come in its full glory to iOS 5.

00:05:11.040 --> 00:05:15.210
At the graphics and media layer,
in iOS 4, we saw the introduction of

00:05:15.250 --> 00:05:20.360
AV Foundation with video editing,
playback, there's audio and video.

00:05:20.460 --> 00:05:23.360
It's now come the full API set
to Lion while core image,

00:05:23.360 --> 00:05:27.840
as you heard this morning,
has come from the Mac to iOS.

00:05:27.840 --> 00:05:29.680
Even when you get to the
top of the stack where the

00:05:29.680 --> 00:05:33.100
frameworks are actually distinct,
there are inspirations and design

00:05:33.170 --> 00:05:35.420
patterns that have fed across both.

00:05:35.420 --> 00:05:37.700
So in the case if you're
a Cocoa Touch developer,

00:05:37.700 --> 00:05:39.900
you know about the view-based table view.

00:05:39.900 --> 00:05:42.060
If you've ever then tried to go to Cocoa,
you said, "Hold on,

00:05:42.070 --> 00:05:45.980
what's all this NSL stuff?" Well now,
we have a view-based table view in Cocoa.

00:05:45.980 --> 00:05:47.980
Yeah, that's a good thing.

00:05:48.030 --> 00:05:48.980
Yeah, yeah.

00:05:48.980 --> 00:05:49.980
Check it out.

00:05:49.980 --> 00:05:51.340
It makes animations much easier.

00:05:51.340 --> 00:05:53.120
It's really phenomenal.

00:05:53.120 --> 00:05:56.080
And in Cocoa Touch,
we brought basically NS document

00:05:56.150 --> 00:05:58.140
over for document-based apps.

00:05:58.140 --> 00:05:59.110
This is great as well.

00:05:59.230 --> 00:06:00.120
But of course, there are also apps.

00:06:00.140 --> 00:06:01.100
I'm going to show you a couple of them.

00:06:01.100 --> 00:06:05.420
But there are also innovations that are
at the bottom of all of these things,

00:06:05.420 --> 00:06:08.990
things like Grand Central Dispatch and
the new Cloud APIs that are concurrently

00:06:08.990 --> 00:06:11.390
becoming available for both platforms.

00:06:11.400 --> 00:06:15.360
So as we built this platform--

00:06:15.760 --> 00:06:16.750
What did we build it out of?

00:06:16.760 --> 00:06:18.040
What was our philosophy?

00:06:18.040 --> 00:06:19.940
The things that really
went to make it up.

00:06:19.940 --> 00:06:22.430
Did we choose something
like Carbon fiber,

00:06:22.560 --> 00:06:24.990
sort of a high performance
but cantankerous material?

00:06:25.260 --> 00:06:26.480
Or did we choose steel?

00:06:26.480 --> 00:06:28.520
It's reliable but it sure is heavy.

00:06:28.520 --> 00:06:32.220
Or did we use duct tape and bailing wire?

00:06:32.220 --> 00:06:34.210
Never, never.

00:06:34.240 --> 00:06:37.010
What actually we took approach
focused really on pragmatism.

00:06:37.070 --> 00:06:41.060
It's this balance of
idealism and realism.

00:06:41.060 --> 00:06:45.240
You know, we would not compromise on
true object orientation.

00:06:45.240 --> 00:06:48.780
We've always needed a dynamic runtime.

00:06:48.780 --> 00:06:52.110
And we make extensive use throughout
our object oriented frameworks of

00:06:52.110 --> 00:06:55.680
design patterns like delegation,
notification, key value coding,

00:06:55.680 --> 00:06:58.510
key value observer,
model view controller and so forth.

00:06:58.570 --> 00:07:02.830
But at the same time we needed a
system native language that had the

00:07:02.860 --> 00:07:07.500
performance and efficiency required
for our full range of products.

00:07:07.500 --> 00:07:08.800
How did we do that?

00:07:08.930 --> 00:07:10.290
Well with Objective C.

00:07:10.570 --> 00:07:13.100
Now how's that worked out?

00:07:13.100 --> 00:07:13.960
Effectively pretty well.

00:07:13.960 --> 00:07:19.030
We've been able to scale Objective C from
powerful many core desktop platforms

00:07:19.510 --> 00:07:25.980
down to the most demanding sort of small
memory relatively low power devices

00:07:25.980 --> 00:07:30.520
and get fantastic battery life and
responsiveness out of these platforms.

00:07:30.520 --> 00:07:35.500
But this has come at one cost
that all of us collectively bear.

00:07:35.770 --> 00:07:38.140
And that's manual memory management.

00:07:38.190 --> 00:07:42.940
Right, we've all done this and we've all
made a few mistakes along the way.

00:07:43.010 --> 00:07:47.360
In fact, Apple's been making this
tremendous investment over time

00:07:47.860 --> 00:07:49.500
in Xcode and developer tools.

00:07:49.560 --> 00:07:53.290
And those of you who've run our
static analyzer have actually

00:07:53.290 --> 00:07:56.260
seen that the static analyzer
will point out things for you.

00:07:56.260 --> 00:07:59.960
Like you should have retained here
or you should have released there.

00:07:59.960 --> 00:08:02.780
And maybe it occurred to
you as it occurred to us.

00:08:02.890 --> 00:08:06.480
If it can tell me that,
why can't it just do it for me?

00:08:06.630 --> 00:08:09.580
Well, it turns out later today you're
going to hear about how we brought

00:08:09.580 --> 00:08:13.410
the speed of explicit object
management and combined it with the

00:08:13.410 --> 00:08:16.320
simplicity of garbage collection.

00:08:16.340 --> 00:08:18.690
This is going to be very big.

00:08:22.900 --> 00:08:25.100
Andreas isn't going to be
happy that I spilled the beans,

00:08:25.100 --> 00:08:27.860
but he's going to talk about
it more in the next talk.

00:08:27.940 --> 00:08:30.790
And also, after that,
you're going to get a fantastic

00:08:30.860 --> 00:08:33.680
talk about a number of technologies
and graphics and media.

00:08:33.680 --> 00:08:36.440
These will be much better talks than
the one you're experiencing right now.

00:08:36.440 --> 00:08:40.670
I will be covering the
rest of our frameworks.

00:08:40.700 --> 00:08:46.450
And so I want to talk about the platforms
that we are delivering here at WWDC,

00:08:46.450 --> 00:08:49.460
and in particular,
how they enable you to build great apps.

00:08:49.570 --> 00:08:52.510
You know,
all of you have really set the bar for

00:08:52.510 --> 00:08:57.680
customers in terms of what they expect
from a great application experience.

00:08:57.690 --> 00:09:00.500
And I want to look at the new
capabilities that we brought to our

00:09:00.590 --> 00:09:03.670
platforms through that lens of how
they help you continue to develop

00:09:03.670 --> 00:09:08.270
an experience that delivers on users
and exceeds users' expectations.

00:09:08.280 --> 00:09:10.730
So what do our users expect?

00:09:10.780 --> 00:09:16.120
Well, they want apps that are simple,
that provide immersive experiences,

00:09:16.120 --> 00:09:19.890
that are fast and responsive,
that are secure and

00:09:19.890 --> 00:09:21.860
increasingly that are connected.

00:09:21.880 --> 00:09:24.580
Well, let's start with simplicity.

00:09:24.580 --> 00:09:27.900
We've all seen user
interfaces look like this.

00:09:27.920 --> 00:09:32.320
It's really easy to make a mistake
and really hard to know how to

00:09:32.320 --> 00:09:36.740
accomplish the basic task that
you're put to inside this UI.

00:09:36.760 --> 00:09:41.610
We really would seek to develop
something a little more like this.

00:09:46.440 --> 00:09:48.100
I think even I might be able to do this.

00:09:48.100 --> 00:09:51.370
And to some extent,
I think we've started to achieve that.

00:09:51.440 --> 00:09:53.120
You know,
if any of you have young children,

00:09:53.120 --> 00:09:55.660
you've seen a one or two
or three-year-old pick

00:09:55.660 --> 00:09:58.760
up an iPhone or an iPad,
they become immersed in that

00:09:58.760 --> 00:10:01.100
device with no teaching whatsoever.

00:10:01.100 --> 00:10:04.430
It's just, it's immediate and visceral
how to work with that.

00:10:04.460 --> 00:10:10.080
And so we've taken some of our learnings
here and applied them to the Mac in

00:10:10.080 --> 00:10:13.520
terms of the full-screen gestures
that you heard about this morning.

00:10:14.560 --> 00:10:16.540
So, of course, for the Mac,
things are different.

00:10:16.540 --> 00:10:21.040
We don't believe in a touchscreen
Mac where I keep my arms suspended like

00:10:21.040 --> 00:10:23.700
this all day and smudging up my screen.

00:10:23.700 --> 00:10:26.560
It's just not the right
way to work with a Mac.

00:10:26.610 --> 00:10:28.860
We have these fantastic
multi-touch trackpads.

00:10:28.910 --> 00:10:31.510
When you have those fantastic
multi-touch trackpads,

00:10:31.510 --> 00:10:34.540
you can do things to simplify,
like taking away scrollers.

00:10:34.540 --> 00:10:37.580
And so now we have overlay scroll bars.

00:10:37.640 --> 00:10:42.620
These are controls that are not
visible when you're not scrolling.

00:10:42.720 --> 00:10:44.720
But in fact, they're configurable.

00:10:44.720 --> 00:10:46.720
Now, most of the time,
you don't have to do anything.

00:10:46.720 --> 00:10:49.800
If you're using NSScrollView,
you're going to get overlay

00:10:49.810 --> 00:10:52.220
scrollers by default,
unless your user is using

00:10:52.220 --> 00:10:54.450
a non-multi-touch device,
in which case you'll

00:10:54.580 --> 00:10:55.720
get legacy scrollers.

00:10:55.730 --> 00:10:58.720
But if you have the need,
you can request legacy scrollers.

00:10:58.720 --> 00:11:00.830
There's another case in which
you would get legacy scrollers,

00:11:00.900 --> 00:11:04.720
and I don't think any of us want to be in
the legacy camp if we don't have to be.

00:11:04.720 --> 00:11:09.650
And that's when you have controls
that you put in the scroll alley.

00:11:09.720 --> 00:11:12.200
We've all seen apps that say, "Well,
we're wasting all the space in

00:11:12.200 --> 00:11:14.680
the app." "We're wasting space
for a scroll alley anyway,

00:11:14.780 --> 00:11:18.140
so let's put the magnification
control and the view selector." Well,

00:11:18.140 --> 00:11:21.570
if you do that, of course,
we have no choice but to fill the

00:11:21.570 --> 00:11:23.720
remaining area with scroll bars.

00:11:23.720 --> 00:11:25.720
So this is something that
you want to get rid of.

00:11:25.720 --> 00:11:28.720
These are no longer what you want.

00:11:28.720 --> 00:11:31.530
Now,
one of the more controversial changes

00:11:31.990 --> 00:11:37.560
that we've made for Lion is we've changed
the mapping of the scrolling direction.

00:11:38.000 --> 00:11:42.430
Now, it turns out that if you look
at really the way it works,

00:11:42.440 --> 00:11:48.220
and let's say Snow Leopard or on a PC,
you push up on the scroll bar,

00:11:48.270 --> 00:11:49.920
not because you're
pushing the content up,

00:11:49.960 --> 00:11:53.420
but actually because you're
pushing the scroll bar up,

00:11:53.450 --> 00:11:56.090
which is going to push the content down.

00:11:56.150 --> 00:12:00.520
It's in fact exactly the opposite
of dealing with your content.

00:12:00.520 --> 00:12:02.330
You're moving the viewport,
you're not moving the content.

00:12:02.420 --> 00:12:05.930
Well, in Lion, we said no,

00:12:06.150 --> 00:12:07.900
We're going to say when
you move your finger up,

00:12:07.900 --> 00:12:09.980
you're pushing the content up.

00:12:10.030 --> 00:12:15.080
That's the most natural thing and it
turns out it feels great as soon as

00:12:15.080 --> 00:12:17.810
you flip your brain entirely around.

00:12:19.400 --> 00:12:24.110
So, there was a time we flipped it
around internally of course and

00:12:24.140 --> 00:12:25.890
people started running and they said,
you know I think there's

00:12:25.890 --> 00:12:26.780
something fundamental here.

00:12:26.800 --> 00:12:28.790
I think there's something about a
trackpad where it really just has to

00:12:28.890 --> 00:12:30.980
work backwards and it's you know the
people are never going to get it.

00:12:30.980 --> 00:12:31.740
It's going to be impossible.

00:12:31.740 --> 00:12:35.740
It turns out and I implore
you all to do this.

00:12:35.740 --> 00:12:36.970
Give it a week.

00:12:36.970 --> 00:12:38.670
Try.

00:12:38.880 --> 00:12:41.810
Your brain will flip and then
you won't be able to use your

00:12:41.810 --> 00:12:43.780
snow leopard machines anymore.

00:12:44.050 --> 00:12:45.410
So give it a try.

00:12:45.540 --> 00:12:46.440
It's really great.

00:12:46.450 --> 00:12:49.730
Most of the time, as a developer,
you don't have to do anything

00:12:49.930 --> 00:12:53.120
in order to react to the
change in scrolling direction.

00:12:53.120 --> 00:12:55.770
But there are some cases where you do.

00:12:56.000 --> 00:12:59.200
If you have a place where
you're interpreting scroll

00:12:59.200 --> 00:13:03.650
events to physically model,
let's say, moving a slider, well,

00:13:03.650 --> 00:13:07.470
when we-- or a play head, for instance,
on a playback tool, well,

00:13:07.470 --> 00:13:11.310
then when we flip the scroll direction,
suddenly the user moving their

00:13:11.310 --> 00:13:14.640
fingers right is going to
cause your control to go left.

00:13:14.910 --> 00:13:17.620
For those rare cases,
we have an API that let you be

00:13:17.730 --> 00:13:20.830
aware of the scrolling direction
and adapt to it directly.

00:13:20.840 --> 00:13:23.610
But normally,
you don't have to worry about this.

00:13:24.090 --> 00:13:27.560
There's another area where we've
simplified by taking something away,

00:13:27.570 --> 00:13:30.000
and that's with navigation gestures.

00:13:30.000 --> 00:13:34.430
Previously in Snow Leopard, for instance,
you had navigation gestures

00:13:34.430 --> 00:13:37.000
usually took three or four
fingers to move between pages.

00:13:37.000 --> 00:13:40.000
We've taken a finger away,
not with a cleaver or anything,

00:13:40.000 --> 00:13:43.880
but we've just taken the necessity
to have those fingers away

00:13:43.980 --> 00:13:47.000
by making the scroll gesture
capable of doing navigation.

00:13:47.000 --> 00:13:49.730
So if you move your fingers to scroll,
you in fact are going

00:13:49.840 --> 00:13:51.000
to be able to navigate.

00:13:51.000 --> 00:13:53.990
But you may be asking, "Well, hold on,
that's the scroll gesture.

00:13:54.020 --> 00:13:58.020
What about scrolling?" Well,
let me give you a quick demonstration

00:13:58.240 --> 00:14:00.090
to show you how it works.

00:14:01.130 --> 00:14:02.560
And while I'm at it,
I'm just going to show you a couple

00:14:02.560 --> 00:14:06.600
of other things about scrolling.

00:14:06.770 --> 00:14:08.940
So I'm going to bring up a web page here.

00:14:08.940 --> 00:14:12.640
Let's bring up the
Wikipedia page about Lion.

00:14:12.670 --> 00:14:15.880
So of course, I can push my content up,
pull it down.

00:14:15.880 --> 00:14:17.480
I can flick and I get momentum.

00:14:17.480 --> 00:14:18.540
It's all a lot of fun.

00:14:18.600 --> 00:14:21.020
I can bounce at the top like this.

00:14:21.040 --> 00:14:24.420
One thing, this is-- on the Mac,
you can often have very long documents.

00:14:24.420 --> 00:14:26.090
And you could, of course,
wheel away and scroll and

00:14:26.120 --> 00:14:29.260
scroll and scroll and scroll,
which works great most of the time.

00:14:29.260 --> 00:14:31.810
But one thing we didn't mention
this morning is that if you do

00:14:31.810 --> 00:14:34.990
need to get at your scroll bar,
in fact, you can.

00:14:35.230 --> 00:14:38.400
So if I start scrolling and then
I move toward the scroll thumb,

00:14:38.460 --> 00:14:40.260
it stays visible.

00:14:40.280 --> 00:14:42.800
When I get to it, the alley appears.

00:14:42.840 --> 00:14:46.610
And I can click and move very quickly,
scroll my whole document

00:14:46.610 --> 00:14:48.480
end to end very quickly.

00:14:48.480 --> 00:14:51.250
Now note, though,
this isn't truly a hover area.

00:14:51.280 --> 00:14:53.400
I can't go over here and just
hover and have it come up.

00:14:53.400 --> 00:14:56.220
Because there could be content in
the underlying document that I'm

00:14:56.290 --> 00:14:58.880
trying to get at and the scroll
bar would keep getting in the way.

00:14:58.880 --> 00:15:01.340
So you actually start
scrolling with your fingers.

00:15:01.370 --> 00:15:02.920
And then you just move toward the alley.

00:15:02.920 --> 00:15:05.160
And you can manipulate the scroll bar.

00:15:05.200 --> 00:15:08.040
Now I want to show you a little
bit about that scroll to navigate.

00:15:08.040 --> 00:15:10.880
We're going to drill in here on a site.

00:15:10.920 --> 00:15:15.620
And I'm going to drill down to
another page within this site.

00:15:15.830 --> 00:15:18.060
and I'm going to scroll, okay?

00:15:18.060 --> 00:15:20.980
And as I scroll to the side,
what you're going to see is what actually

00:15:20.980 --> 00:15:23.060
happens is I start pulling the page.

00:15:23.060 --> 00:15:24.640
I start navigating, right?

00:15:24.640 --> 00:15:26.780
I pull and I navigate.

00:15:26.930 --> 00:15:30.940
But what happens if I zoom in such
that I have horizontal scrolling?

00:15:30.940 --> 00:15:32.970
You see now there's a
horizontal scroll bar there.

00:15:33.070 --> 00:15:36.270
Well, now as I scroll,
I actually hit the end.

00:15:36.550 --> 00:15:37.620
I'm actually scrolling, right?

00:15:37.620 --> 00:15:41.930
If I go here, I hit the end,
but now that I'm at the end,

00:15:42.730 --> 00:15:45.080
I pull aside and I'm navigating.

00:15:45.100 --> 00:15:50.000
95% of the time,
your user has content that

00:15:50.000 --> 00:15:52.150
isn't horizontally scrolling,
and they just flick, flick,

00:15:52.150 --> 00:15:52.840
flick to navigate.

00:15:52.880 --> 00:15:54.760
But if they find themselves
in a condition like this

00:15:54.860 --> 00:15:58.600
where they're scrolling,
they scroll, and then they keep pulling

00:15:58.720 --> 00:16:00.470
through and they navigate.

00:16:00.580 --> 00:16:05.860
So that's how that works with
scrolling and navigation in Lion.

00:16:06.000 --> 00:16:09.830
Let's go back to a moment to the slides.

00:16:11.000 --> 00:19:32.500
[Transcript missing]

00:19:33.070 --> 00:19:34.460
So how do you implement versions?

00:19:34.460 --> 00:19:36.420
Well, pretty much use NSDocument.

00:19:36.420 --> 00:19:40.850
But if your main document window in
the application is what shows up in

00:19:40.850 --> 00:19:43.240
that time machine-like versions UI.

00:19:43.310 --> 00:19:47.370
And so when you're in there,
if your app has needs where it

00:19:47.370 --> 00:19:50.070
doesn't make sense to have this
operation appear in versions,

00:19:50.260 --> 00:19:54.500
you can do a version-specific UI,
or changes specific to versions,

00:19:54.690 --> 00:19:57.520
by listening for the notifications
that tell you that that's

00:19:57.520 --> 00:19:59.960
actually the context for your UI.

00:20:00.040 --> 00:20:02.800
So let's talk now about
immersive experiences.

00:20:02.800 --> 00:20:06.810
We know the iPad, for instance,
has great full-screen

00:20:06.820 --> 00:20:07.680
immersive experience.

00:20:07.680 --> 00:20:10.310
And we took that lesson
and brought it to the Mac.

00:20:10.320 --> 00:20:14.130
And you've seen that in apps like
Preview that take a windowed interface

00:20:14.830 --> 00:20:18.950
and provide a context where you're
completely immersed in the app.

00:20:19.370 --> 00:20:21.760
Well,
you've heard about how full screen is

00:20:21.790 --> 00:20:24.620
now system-wide capability in Lion.

00:20:24.690 --> 00:20:27.900
There's some important differences if you
have a full app that supports full screen

00:20:27.900 --> 00:20:30.130
currently when you move it to Lion.

00:20:30.260 --> 00:20:32.750
For one,
full screen is no longer the system

00:20:32.750 --> 00:20:35.890
global mode where the idea is the
user can't do anything until they

00:20:35.940 --> 00:20:38.090
exit out of full screen because
they're just they're locked in full

00:20:38.090 --> 00:20:39.390
screen then they have to get out.

00:20:39.460 --> 00:20:44.150
So things like the menu bar in the
dock need to stay accessible at all

00:20:44.400 --> 00:20:48.290
times even when you're in full screen.

00:20:49.220 --> 00:20:53.380
You also have a lot of options about
how standard controls behave when

00:20:53.380 --> 00:20:55.360
you're in full screen to adapt your UI.

00:20:55.360 --> 00:20:58.600
And I want to show you a couple of
examples of how things like the toolbars

00:20:58.600 --> 00:21:02.650
can behave differently depending
on the right context for the app.

00:21:02.810 --> 00:21:05.350
So let's take a quick look at that.

00:21:07.270 --> 00:21:12.420
I'm going to start with a really
simple full screen experience.

00:21:12.480 --> 00:21:14.860
And that is iCal.

00:21:14.860 --> 00:21:15.820
I'm going to take iCal.

00:21:15.820 --> 00:21:19.380
You know,
so iCal has a toolbar here that actually

00:21:19.380 --> 00:21:21.990
is useful all the time pretty much.

00:21:22.000 --> 00:21:25.310
If I'm looking at my calendar,
I probably want access to these controls.

00:21:25.430 --> 00:21:28.150
So when I go full screen,
we see that in this case,

00:21:28.160 --> 00:21:29.760
the toolbar stays visible.

00:21:30.000 --> 00:21:32.600
I can get at all of these controls.

00:21:33.470 --> 00:21:37.310
But if I want to get, for instance,
at my menu bar as I go up,

00:21:37.310 --> 00:21:41.000
it isn't just that the menu comes down,
it's that the whole toolbar comes down.

00:21:41.080 --> 00:21:44.520
So this happens automatically
if you're using NS Toolbar,

00:21:44.520 --> 00:21:46.720
but if your controls are just
tiled into the top of your window

00:21:46.720 --> 00:21:48.690
and we don't know about them,
we can't animate them down.

00:21:48.750 --> 00:21:52.760
So you're going to want to make
sure you put everything that needs

00:21:52.760 --> 00:21:54.960
to move down into your toolbar.

00:21:55.150 --> 00:21:56.530
We also have popovers.

00:21:56.580 --> 00:22:00.060
So this is now a standard control,
the popover control.

00:22:00.060 --> 00:22:01.980
And you want to think about,
in many cases,

00:22:01.980 --> 00:22:05.260
as your app goes full screen,
that instead of using floating palettes,

00:22:05.450 --> 00:22:07.960
which could then stay and clutter
the full screen experience,

00:22:08.000 --> 00:22:09.340
that you transition to popovers.

00:22:09.340 --> 00:22:12.040
And there are really
simple APIs for doing that.

00:22:12.040 --> 00:22:15.500
Now, if you look at an
application here like Safari,

00:22:15.500 --> 00:22:19.300
notice right now Safari is
actually showing my bookmarks bar.

00:22:19.520 --> 00:22:21.970
If I take that full screen--

00:22:22.490 --> 00:22:25.040
Notice that the bookmarks bar
actually disappears because

00:22:25.050 --> 00:22:29.540
Safari has put that part of its view
in what's called the accessory view.

00:22:29.540 --> 00:22:33.100
It's a new API in the toolbar such
that it's only revealed when the

00:22:33.100 --> 00:22:35.790
rest of the toolbar is animated down.

00:22:35.790 --> 00:22:39.800
So you can have certain controls that you
tuck away while in full screen but make

00:22:39.800 --> 00:22:42.140
them accessible on demand to your users.

00:22:42.140 --> 00:22:43.690
So that's another alternative.

00:22:44.240 --> 00:22:48.100
But the most ambitious area
where you'll see us using in full

00:22:48.230 --> 00:22:50.280
screen is something like preview.

00:22:50.650 --> 00:22:54.130
So here in preview you see
I have right now a sidebar up.

00:22:54.130 --> 00:22:57.130
I have a single page
view of this document.

00:22:57.140 --> 00:22:59.620
And now I'm going to
take this full screen.

00:22:59.620 --> 00:23:03.320
And the first thing I want you to
notice is the custom transition as

00:23:03.320 --> 00:23:07.430
we move from full from a single page
view to a facing pages wide view.

00:23:09.510 --> 00:23:15.240
You see that the page actually swept
out from behind into a transition

00:23:15.240 --> 00:23:16.240
where now we have facing pages.

00:23:16.240 --> 00:23:17.820
Let's go out and you'll
watch it tuck away.

00:23:17.820 --> 00:23:20.900
And as it tucks away,
it actually even fades back

00:23:20.900 --> 00:23:23.010
in the sidebar and the chrome.

00:23:23.020 --> 00:23:24.070
So let's watch that again.

00:23:26.610 --> 00:23:29.200
But these controls,
you notice also now I'm completely

00:23:29.200 --> 00:23:33.420
focused on the content because
Preview has opted to hide its toolbars

00:23:33.420 --> 00:23:37.770
completely and to hide its sidebars.

00:23:37.800 --> 00:23:40.380
So depending on your app,
in Keynote when I'm editing,

00:23:40.380 --> 00:23:43.060
I want to have my sidebar
actually available all the time,

00:23:43.060 --> 00:23:44.420
but in Preview it doesn't.

00:23:44.520 --> 00:23:45.700
It doesn't make sense.

00:23:45.700 --> 00:23:48.560
So this is really the kind of
tradeoff decision that you have

00:23:48.650 --> 00:23:51.610
to make as you design your app,
but we've provided all the

00:23:51.670 --> 00:23:55.470
framework ability for you to set
those policies in a sensible way.

00:23:58.780 --> 00:24:00.760
So how do you implement full screen apps?

00:24:00.820 --> 00:24:04.720
Well, there are APIs in NS Application to
say that your app supports full screen.

00:24:04.720 --> 00:24:08.280
You can identify which windows
are capable of going full screen.

00:24:08.390 --> 00:24:11.460
For instance,
Mail's main window goes full screen,

00:24:11.530 --> 00:24:15.080
but there's no full screen control
on each of its composed windows.

00:24:15.160 --> 00:24:16.270
So you have that choice.

00:24:16.530 --> 00:24:18.860
And as I mentioned,
a lot of APIs are on Toolbar and so

00:24:18.950 --> 00:24:20.670
forth to handle revealing behavior.

00:24:20.870 --> 00:24:25.110
We also in WebKit now have
JavaScript APIs for going full

00:24:25.110 --> 00:24:27.920
screen for your web apps as well.

00:24:28.000 --> 00:24:30.690
Now, in iOS,

00:24:31.060 --> 00:24:35.030
Of course, immersive experiences often
are all about immersive games,

00:24:35.090 --> 00:24:38.200
extremely responsive,
high performance games.

00:24:38.200 --> 00:24:41.600
This often means coding in OpenGL ES.

00:24:41.650 --> 00:24:45.180
And there's a lot of boilerplate code
that's been necessary traditionally

00:24:45.180 --> 00:24:47.880
to get your app all set up for OpenGL.

00:24:47.900 --> 00:24:49.110
Well, no longer.

00:24:49.210 --> 00:24:51.660
This afternoon you'll hear about GL Kit.

00:24:51.660 --> 00:24:55.060
That, yeah, GL Kit makes it--

00:24:55.310 --> 00:25:01.900
Really a few lines of code to get your
context all right to do your OpenGL game.

00:25:02.250 --> 00:25:05.380
We also have UI kit skinning.

00:25:05.490 --> 00:25:09.890
So you're building a game and yeah,
this is important.

00:25:12.300 --> 00:25:14.900
Because you built a
game with a custom look,

00:25:14.950 --> 00:25:17.590
and you don't want to have to reinvent
the wheel in terms of implementing

00:25:17.590 --> 00:25:21.460
custom controls that match the look
of the environment of your game.

00:25:21.670 --> 00:25:26.080
Well, now with UIKit Skinning,
you can set custom images, tint colors,

00:25:26.090 --> 00:25:29.700
and set the custom look of those
controls to appear either globally

00:25:29.700 --> 00:25:33.660
across your app or contextually
based on where you are in the app.

00:25:33.680 --> 00:25:36.680
We're going to hear more
about this this afternoon.

00:25:36.680 --> 00:25:40.120
So another value that users--
another expectations of users

00:25:40.120 --> 00:25:41.640
is that our apps are fast.

00:25:41.670 --> 00:25:45.640
They want blazingly fast performance,
and they don't want to wait.

00:25:45.640 --> 00:25:49.880
Now, we have all kinds of computational
power at our disposal.

00:25:49.880 --> 00:25:51.730
We have very fast CPUs.

00:25:51.880 --> 00:25:53.740
Often we have multiple cores.

00:25:53.900 --> 00:25:57.000
It's not for lack of computation
often that we're waiting.

00:25:57.190 --> 00:26:00.670
It's because we may be tying up
the main thread doing something

00:26:00.900 --> 00:26:03.940
while at the same time we're just
squandering the rest of our resources.

00:26:03.940 --> 00:26:06.520
Well,
we all know the solution to this problem.

00:26:06.540 --> 00:26:08.900
We just need to multi-thread
our application.

00:26:08.920 --> 00:26:11.610
Can identify the parallel bits
and isolate them in threads.

00:26:11.680 --> 00:26:12.750
We can lock all our data.

00:26:12.760 --> 00:26:14.910
We can write ourselves
a custom thread manager.

00:26:15.050 --> 00:26:18.600
This is hard to do,
and it's even harder to get right.

00:26:18.690 --> 00:26:22.780
And so back in Snow Leopard and iOS 4,
we introduced GCD.

00:26:22.860 --> 00:26:25.970
And you really have to make
this just a fundamental part of

00:26:25.970 --> 00:26:28.020
your app development technique.

00:26:28.090 --> 00:26:31.520
You break your code
down into small blocks.

00:26:31.520 --> 00:26:32.260
It's block based.

00:26:32.340 --> 00:26:36.370
And then there's a very low overhead,
high performance scheduler that will

00:26:36.370 --> 00:26:41.890
scale up and scale down based on the
computational resources available to you.

00:26:42.850 --> 00:26:49.930
So we did this in development
of the iPad and iOS 4,

00:26:50.640 --> 00:26:53.900
and that was a single core machine,
single core CPU for the iPad.

00:26:53.920 --> 00:26:58.070
But because we built with GCD,
when we introduced the iPad 2,

00:26:58.070 --> 00:27:02.800
we saw instant benefits in terms of
excellent utilization of both cores.

00:27:02.870 --> 00:27:06.120
And in fact,
our use of GCD ended up being a huge

00:27:06.120 --> 00:27:10.180
part of why the iPad 2 provides an
experience that's roughly twice as

00:27:10.180 --> 00:27:12.440
fast as that of the original iPad.

00:27:12.930 --> 00:27:16.630
So if you use GCD, you get a lot of that
parallelism for free.

00:27:16.730 --> 00:27:21.760
Well,
GCD is improved now for iOS 5 and Lion.

00:27:21.930 --> 00:27:26.600
You have now the ability to do serialized
scheduling of background I/O and also

00:27:26.600 --> 00:27:28.710
to manage private concurrent queues.

00:27:28.810 --> 00:27:32.710
So if you are not using GCD,
it's time to start.

00:27:32.910 --> 00:27:36.900
Another area new to iOS is Core Image.

00:27:36.940 --> 00:27:39.700
This is GPU accelerated image processing.

00:27:39.810 --> 00:27:45.170
We brought a base set of 17 filters,
things like red eye detection,

00:27:45.170 --> 00:27:48.840
face detection, color correction,
and so forth.

00:27:48.840 --> 00:27:52.970
And these can actually be composed
in a variety of ways and built

00:27:52.970 --> 00:27:56.800
into an optimized image processing
pipeline that executes in the

00:27:56.800 --> 00:27:59.580
GPU to give you results really fast.

00:27:59.990 --> 00:28:03.280
Now another kind of processing
that we can parallelize very well

00:28:03.500 --> 00:28:05.870
is with the Accelerate framework,
which we heard about earlier

00:28:06.010 --> 00:28:07.370
at the beginning of the talk.

00:28:07.400 --> 00:28:10.940
This,
our image processing algorithms that,

00:28:10.970 --> 00:28:15.980
and matrix processing algorithms that
we've hand tuned in assembly code

00:28:15.980 --> 00:28:18.120
optimized for our specific platforms.

00:28:18.120 --> 00:28:22.130
And they take advantage of the actual
vector instructions in ways that

00:28:22.130 --> 00:28:24.780
mere mortals I think never could do.

00:28:24.780 --> 00:28:26.900
We have a handful of people in
the world who know how to do this.

00:28:26.930 --> 00:28:30.370
And they've done it to these
algorithms in the Accelerate framework.

00:28:30.480 --> 00:28:33.160
So if you have an algorithm
that's covered by Accelerate,

00:28:33.160 --> 00:28:35.120
you really want to
take advantage of this.

00:28:35.500 --> 00:28:39.980
We see performance advantages relative
to naive implementations of as much

00:28:39.980 --> 00:28:42.540
as 10x for Accelerate algorithms.

00:28:42.640 --> 00:28:45.300
And we brought the full set now to iOS.

00:28:45.580 --> 00:28:47.730
Now of course,
no matter how much you take advantage

00:28:47.730 --> 00:28:51.210
of these technologies up front,
to really optimize your app,

00:28:51.210 --> 00:28:52.760
you need to measure.

00:28:52.920 --> 00:28:57.640
instruments let you get a great view
of the performance of your application.

00:28:57.750 --> 00:29:01.560
It does performance sampling
of both memory use and CPU,

00:29:01.670 --> 00:29:07.150
provides ways to create rerunable
UI automation scenarios so you can test

00:29:07.150 --> 00:29:09.340
your app under different circumstances.

00:29:09.430 --> 00:29:13.620
And now for iOS 5 and Lion,
we have retained cycle debugging

00:29:13.790 --> 00:29:16.920
to help you find leaks and
set up weak references.

00:29:17.030 --> 00:29:20.430
And for iOS,
we also brought SysTrace to iOS to

00:29:20.430 --> 00:29:21.960
give you better debugging information.

00:29:22.040 --> 00:29:27.120
And as you'll hear later this afternoon,
fantastic OpenGL performance tools

00:29:27.240 --> 00:29:30.430
to give you a level of insight into
your OpenGL performance that I think

00:29:30.430 --> 00:29:32.920
you've never seen on any platform.

00:29:33.320 --> 00:29:35.260
I want to talk now about security.

00:29:35.330 --> 00:29:40.580
We all know that iOS has a sandboxing
model that allows applications to be

00:29:40.580 --> 00:29:45.080
kept so that each of them has access only
to their data and we're an application

00:29:45.390 --> 00:29:47.660
to run wild or become compromised.

00:29:47.660 --> 00:29:51.730
The only damage you can do is to its
own data because its data is locked with

00:29:51.730 --> 00:29:53.930
it in the sandbox and it can't get out.

00:29:54.920 --> 00:29:57.030
Well,
we want to bring sandboxing to line,

00:29:57.050 --> 00:30:00.540
but you have to say, well,
this is a really challenging problem

00:30:00.540 --> 00:30:04.150
because here we have applications,
which you see at the top that have

00:30:04.340 --> 00:30:07.960
access or need to have access to
files that the user is organized into

00:30:08.010 --> 00:30:10.180
common places in the file system.

00:30:10.180 --> 00:30:12.900
They may have a bunch of
documents in their desktop

00:30:12.900 --> 00:30:14.640
or in their documents folder.

00:30:14.760 --> 00:30:18.480
In fact, a single document may be used
by multiple applications.

00:30:18.480 --> 00:30:21.440
You may first open an image in
an image editor and then you

00:30:21.520 --> 00:30:24.540
may open it in preview later,
so they all need access.

00:30:24.660 --> 00:30:28.150
So how can we accomplish
the get the benefits of

00:30:28.180 --> 00:30:30.660
sandboxing inside of a Mac app?

00:30:30.700 --> 00:30:33.970
Well, what we've done is when you
sandbox your application,

00:30:33.970 --> 00:30:36.780
it in fact is in a sandbox
and it has some private data,

00:30:36.780 --> 00:30:40.730
the equivalent to what would be until
the library application support and

00:30:40.730 --> 00:30:43.090
preferences and caches and so forth.

00:30:43.140 --> 00:30:46.170
But it doesn't actually have
access to its documents.

00:30:46.230 --> 00:30:49.860
So if it tries to go out and grab a
particular path in the file system,

00:30:49.990 --> 00:30:50.580
it can't.

00:30:50.660 --> 00:30:53.530
So how do we let the user actually
get at the files they want?

00:30:53.590 --> 00:30:54.560
Well, if the user does something.

00:30:54.660 --> 00:30:59.300
Like opening the open panel, save panel,
dragging a file in finder on

00:30:59.410 --> 00:31:03.940
top of an app icon or a window,
we contact something called PowerBox.

00:31:03.940 --> 00:31:08.060
PowerBox is a privileged system process
that displays its UI such that it

00:31:08.060 --> 00:31:11.780
looks like it's running inside the app,
but it's actually not.

00:31:11.940 --> 00:31:16.430
And it knows that, oh, the user actually,
this user explicitly tried

00:31:16.480 --> 00:31:18.250
to access that RTF file.

00:31:18.260 --> 00:31:21.460
And when it does,
then the PowerBox is able to

00:31:21.460 --> 00:31:23.800
dynamically extend the file.

00:31:23.800 --> 00:31:27.870
So it can extend that application
sandbox to poke a hole in it such

00:31:27.920 --> 00:31:30.110
that it can access just that file.

00:31:30.280 --> 00:31:32.400
So at this point,
the user has the view that

00:31:32.490 --> 00:31:36.100
actually TextEdit can access any
document they want to open when

00:31:36.100 --> 00:31:40.950
in fact at the security level,
TextEdit can only access that

00:31:40.950 --> 00:31:44.230
one file that the user has
asked or granted the permission,

00:31:44.310 --> 00:31:47.720
if you will,
for sandbox for TextEdit to access.

00:31:47.880 --> 00:31:49.720
Works really well.

00:31:49.720 --> 00:31:53.710
So yeah, it's pretty good.

00:31:54.400 --> 00:31:57.100
Now, how do you set up a sandbox in Lion?

00:31:57.280 --> 00:32:01.700
Well, it's set up with
entitlements like an iOS,

00:32:01.710 --> 00:32:04.010
and as I mentioned,
it prevents really either an

00:32:04.050 --> 00:32:06.280
app that has programming errors,
let's assume there are no

00:32:06.280 --> 00:32:08.430
malicious apps out there,
but one that has programming errors

00:32:08.470 --> 00:32:09.800
or one that's become compromised.

00:32:09.880 --> 00:32:14.510
You know, had a security vulnerability,
someone compromised that app,

00:32:14.510 --> 00:32:17.880
took it over,
and now it's maybe doing bad things.

00:32:18.510 --> 00:32:20.200
You can sandbox your apps really easily.

00:32:20.200 --> 00:32:25.180
In fact, we've taken third party
apps without source code

00:32:25.530 --> 00:32:28.840
applied the entitlements to them and
been able to run them in the sandbox in

00:32:28.840 --> 00:32:32.460
many cases without modification because
a lot of in a lot of cases these power

00:32:32.730 --> 00:32:35.550
matter just setting your entitlements and
things like power box work transparently

00:32:35.610 --> 00:32:39.960
for you But you do need to make sure
that if you've hard-coded paths in

00:32:40.020 --> 00:32:45.350
your UI Instead of use the proper query
api's you know things change when you're

00:32:45.350 --> 00:32:47.840
in the sandbox those paths won't be
accessible where you think they are

00:32:47.840 --> 00:32:51.250
You need to code sign your app which
you can do in Xcode and you need to

00:32:51.250 --> 00:32:54.990
set the minimum set of Entitlements that
are necessary for your app to function

00:32:55.000 --> 00:32:59.210
So what are these entitlements there
things like does this app need to have

00:32:59.210 --> 00:33:01.460
power box to let user open documents?

00:33:01.460 --> 00:33:04.420
You know if it's a game the answer
may well be no all the data is

00:33:04.420 --> 00:33:07.220
already stored in the sandbox There's
no need to go outside the sandbox

00:33:07.220 --> 00:33:10.550
Does it need to access common media
like movies or pictures or music

00:33:10.550 --> 00:33:12.320
does it need access to the network?

00:33:12.320 --> 00:33:15.130
Does it need access to the
mic or the camera or personal

00:33:15.130 --> 00:33:17.020
identity of personal information?

00:33:17.020 --> 00:33:19.900
All of these are expressible as
entitlements and you can set them

00:33:19.980 --> 00:33:25.040
up in Xcode There are also are A set
of temporary exception entitlements

00:33:25.040 --> 00:33:28.450
Okay These are entitlements that
because we recognize you've written

00:33:28.460 --> 00:33:32.330
your applications in the past and they
may be do have certain coding practices

00:33:32.340 --> 00:33:36.100
that in the near term Won't work
in the sandbox you can ask for very

00:33:36.100 --> 00:33:39.720
specific Holes up front to be placed
in your sandbox to do things that are

00:33:40.030 --> 00:33:42.490
not generally safe in the sandbox model

00:33:44.460 --> 00:33:50.340
We will be requiring six months from
when Lion ships for apps submitted

00:33:50.390 --> 00:33:52.310
to the app store to be sandboxed.

00:33:52.310 --> 00:33:54.720
And you need to justify your entitlement.

00:33:54.760 --> 00:33:57.960
So if you write a screen
saver and you say,

00:33:57.960 --> 00:34:03.060
well, I need access to the address book
and the calendar and the microphone,

00:34:03.060 --> 00:34:05.280
then you should just tell us
why it is that your screen

00:34:05.280 --> 00:34:06.590
saver needs those things.

00:34:06.620 --> 00:34:08.820
I'm sure you have a great reason.

00:34:08.820 --> 00:34:10.610
But if you don't,
then that will be a problem

00:34:10.620 --> 00:34:12.440
for getting the app accepted.

00:34:12.440 --> 00:34:15.140
And if you use any of these
temporary entitlements,

00:34:15.140 --> 00:34:17.740
you need to tell us why they're needed.

00:34:17.840 --> 00:34:20.160
And those temporary exceptions,
of course, are temporary.

00:34:20.190 --> 00:34:23.800
This is just a transition strategy
so you can get your app clean,

00:34:23.800 --> 00:34:27.420
running in the sandbox in
the safest way possible.

00:34:27.420 --> 00:34:30.760
So another security feature,
data protection in iOS.

00:34:30.760 --> 00:34:34.340
By default, if a user has a PIN,
all the data is encrypted

00:34:34.340 --> 00:34:36.200
at the device level.

00:34:36.200 --> 00:34:39.620
But you have an additional
capability with data protection

00:34:39.770 --> 00:34:41.600
to lock the data to an own device.

00:34:41.600 --> 00:34:45.420
Only the user is actually logged
in with their PIN currently.

00:34:45.420 --> 00:34:50.120
So it unlocks on the fly and
relocks when the user is logged

00:34:50.120 --> 00:34:53.340
effectively not past the PIN screen.

00:34:53.340 --> 00:34:56.510
We now have support in Core Data to
make it really easy for your

00:34:56.510 --> 00:35:01.210
Core Data apps to take advantage,
to allow offer your users this additional

00:35:01.210 --> 00:35:03.880
level of protection if it makes sense.

00:35:04.640 --> 00:35:11.210
FileVault2 FileVault2 is a
completely new implementation.

00:35:11.210 --> 00:35:16.740
It's based on a new volume
format called Core Storage and

00:35:16.740 --> 00:35:19.910
it encrypts the entire drive.

00:35:19.910 --> 00:35:25.910
You cannot boot your Mac when
you're using this without first

00:35:25.920 --> 00:35:29.580
actually entering your password.

00:35:29.580 --> 00:35:34.480
We have a new feature called FileVault2.

00:35:34.580 --> 00:35:37.990
It's a login screen that makes it look
like you're logging into your Mac,

00:35:37.990 --> 00:35:39.870
but actually it hasn't even booted yet.

00:35:40.000 --> 00:35:42.260
And when you do,
we unlock the drive and boot.

00:35:42.260 --> 00:35:45.660
So there's no way that secure files,
files you want to keep protected,

00:35:45.700 --> 00:35:48.540
can leak outside of the domain
of the encryption because the

00:35:48.580 --> 00:35:50.330
entire drive is encrypted.

00:35:50.420 --> 00:35:52.450
You may say, well,
I'm a little worried about that because

00:35:52.450 --> 00:35:53.790
that means everything's encrypted.

00:35:53.790 --> 00:35:55.490
Maybe I'm going to pay
a big performance cost.

00:35:55.490 --> 00:35:59.930
But in fact, we have incredibly optimized
algorithms that take advantage of

00:35:59.950 --> 00:36:04.420
the special encryption instruction
sets and the latest Intel processors.

00:36:04.420 --> 00:36:04.460
And we have a new feature
called FileVault2.

00:36:04.510 --> 00:36:07.520
To make encryption basically
completely transparent.

00:36:07.520 --> 00:36:10.970
And so if you have a laptop and you
care about protecting your data,

00:36:10.970 --> 00:36:13.190
FileVault2 is a phenomenal solution.

00:36:13.190 --> 00:36:15.660
And I personally run with it exclusively.

00:36:15.660 --> 00:36:16.880
So our final.

00:36:17.050 --> 00:36:18.470
Yes, run with it.

00:36:18.480 --> 00:36:19.650
It's great.

00:36:21.100 --> 00:36:26.140
So our final area of user
expectation is around connectivity.

00:36:26.140 --> 00:36:30.040
Now you saw earlier today
Twitter and the tweet sheet.

00:36:30.070 --> 00:36:32.820
So the real important story
here is that within settings,

00:36:32.820 --> 00:36:33.850
you have single sign-on.

00:36:33.920 --> 00:36:36.850
Your user sets up once for Twitter,
and then all the apps that need to

00:36:36.850 --> 00:36:40.730
use Twitter can access that without
requiring specific sign-on from the user.

00:36:40.890 --> 00:36:43.690
If you want to let them
tweet URLs and images,

00:36:43.690 --> 00:36:45.300
well, you can just use the tweet sheet.

00:36:45.370 --> 00:36:51.290
But you also have arbitrary
API access using TW request to make

00:36:51.290 --> 00:36:52.850
other Twitter requests as well.

00:36:52.890 --> 00:36:56.160
So it's a really convenient way to
add Twitter to your applications.

00:36:56.160 --> 00:36:59.430
Of course, the big story around being
connected is around iCloud.

00:36:59.470 --> 00:37:04.660
And iCloud is about storing your data
in the cloud and making it wirelessly

00:37:04.660 --> 00:37:08.300
available on all of your devices.

00:37:08.390 --> 00:37:13.250
But it's also about being built in to
applications so that users actually don't

00:37:13.400 --> 00:37:16.640
have to think about the cloud at all.

00:37:16.640 --> 00:37:21.370
Each application has a private
piece of the cloud where it can

00:37:21.370 --> 00:37:25.790
store its data and keep its data
available across all devices that

00:37:25.880 --> 00:37:27.620
are running that application.

00:37:27.650 --> 00:37:31.280
Cloud storage breaks into two
fundamental capabilities-- the key

00:37:31.280 --> 00:37:33.920
value store and mobile documents.

00:37:33.960 --> 00:37:38.080
So the key value store is like
a dictionary in the sky or an

00:37:38.080 --> 00:37:41.540
NS mutable dictionary in the sky.

00:37:41.540 --> 00:37:42.780
It's meant for small data.

00:37:42.780 --> 00:37:45.460
So it has a limited number of keys
and a limited size of these keys.

00:37:45.460 --> 00:37:47.960
We're talking tens of kilobytes
that you have to work with here.

00:37:47.960 --> 00:37:50.740
And it's really meant for
things like what page am

00:37:50.740 --> 00:37:51.580
I currently on in my notebook?

00:37:51.580 --> 00:37:55.120
What level am I on in
this game right now?

00:37:55.120 --> 00:37:58.180
And this data is actually
synchronized asynchronously.

00:37:58.180 --> 00:38:00.730
It's synchronized with the devices,
whether or not they're

00:38:00.730 --> 00:38:03.640
currently running your app,
such that when you then start

00:38:03.640 --> 00:38:07.620
that app on another device,
the data is already there and available.

00:38:07.620 --> 00:38:10.240
So this is really easy to use,
really convenient.

00:38:10.240 --> 00:38:14.250
And you should really have all of
those kinds of app settings available

00:38:14.370 --> 00:38:17.500
here with the key value store.

00:38:17.500 --> 00:38:21.160
The other big one, of course,
is the dictionary store,

00:38:21.160 --> 00:38:23.000
or the mobile documents.

00:38:23.000 --> 00:38:26.080
This lets you have your
documents available everywhere.

00:38:26.080 --> 00:38:31.720
Your app writes its documents into
cloud storage in a private sandbox.

00:38:31.720 --> 00:38:33.950
And then the data is
automatically transferred

00:38:34.270 --> 00:38:36.680
asynchronously up to the cloud.

00:38:36.680 --> 00:38:41.300
And the actual metadata about the file is
transferred asynchronously from the data.

00:38:41.300 --> 00:38:44.180
And this is important for responsiveness,
because if you make an update,

00:38:44.180 --> 00:38:47.350
for instance,
on your iPhone or create a new document,

00:38:47.350 --> 00:38:50.500
both the metadata and the data
can get stored up in the cloud.

00:38:50.500 --> 00:38:54.970
And the metadata can move down
automatically to all devices.

00:38:55.000 --> 00:38:57.060
So they all know about
the existence of the file,

00:38:57.060 --> 00:38:59.090
what the current version is,
and so forth.

00:38:59.180 --> 00:39:02.140
But the actual data,
which is the large part,

00:39:02.170 --> 00:39:04.520
can move later or only when it's needed.

00:39:04.520 --> 00:39:07.610
The user could pull it down on demand,
if that's the way you want to do it.

00:39:07.780 --> 00:39:13.280
And while it can pull from the cloud,
as well, if two machines or two

00:39:13.280 --> 00:39:16.760
devices are on the same LAN,
when it comes time to get data,

00:39:16.830 --> 00:39:20.030
it can actually pull it across the
LAN without taking the additional

00:39:20.030 --> 00:39:22.730
bandwidth to go up to the internet.

00:39:28.230 --> 00:39:33.500
So the data is encrypted for both
transfer and it's encrypted and

00:39:33.500 --> 00:39:34.820
storage when it's stored with us.

00:39:34.860 --> 00:39:38.340
It's stored in a geographical
location that's close to the user.

00:39:38.340 --> 00:39:41.590
So you aren't sending all your data
to Cupertino if you're in Germany.

00:39:41.600 --> 00:39:44.840
It's going to be a low latency
connection to get to your data.

00:39:44.840 --> 00:39:49.200
And, you know, once your users stored
your data in the cloud,

00:39:49.200 --> 00:39:52.060
you may want to provide them
the ability to share it.

00:39:52.180 --> 00:39:56.740
And so there's an API to actually
get URLs that you can then hand out

00:39:56.740 --> 00:40:01.370
through email or whatever in your app
so that they can then pass that off to

00:40:01.380 --> 00:40:05.740
friends or family and they can download
documents that are stored in the cloud.

00:40:05.740 --> 00:40:08.500
Yeah, it's useful.

00:40:11.700 --> 00:40:14.120
So how do you enable cloud storage?

00:40:14.260 --> 00:40:16.560
Well, first of all, give users a choice.

00:40:16.720 --> 00:40:19.440
The expectation is,
and you saw this in Roger's iWork demo,

00:40:19.440 --> 00:40:21.440
that when the app starts up,
it's going to say,

00:40:21.500 --> 00:40:23.800
do you want to put your
documents in cloud storage?

00:40:23.800 --> 00:40:25.270
Maybe they do, maybe they don't.

00:40:25.400 --> 00:40:26.020
Give them a choice.

00:40:26.060 --> 00:40:28.580
If they choose yes,
and I think most of them will,

00:40:28.580 --> 00:40:32.300
you can request entitlements to cloud
storage that will give you access to

00:40:32.300 --> 00:40:34.320
your cloud storage sandbox folder.

00:40:34.760 --> 00:40:38.780
And then, well, if you're using our new
UI document support in iOS 5,

00:40:38.780 --> 00:40:41.410
or if you're already
using NS Document on Lion,

00:40:41.410 --> 00:40:45.890
you have built-in support to actually get
that document and put it in the cloud.

00:40:45.890 --> 00:40:47.230
It's really easy.

00:40:47.240 --> 00:40:50.260
If you insist on not doing that,
you can roll your own.

00:40:50.260 --> 00:40:53.570
Again, we have APIs in NS File Manager,
NS File Presenter,

00:40:53.570 --> 00:40:57.070
and File Coordinator that help
you coordinate when data can come

00:40:57.070 --> 00:41:00.880
in from the cloud and when you're
making modifications to the document

00:41:00.880 --> 00:41:04.740
so that you don't get smashed by
edits happening in another way.

00:41:04.760 --> 00:41:08.130
This is because the system actually
has really smart policies around

00:41:08.130 --> 00:41:11.580
helping you resolve conflicts,
automatically resolve conflicts,

00:41:11.580 --> 00:41:13.600
should concurrent editing occur.

00:41:13.600 --> 00:41:16.880
Also, if you're a core data app,
there's great news,

00:41:16.890 --> 00:41:21.490
because core data makes it possible for
you to have your core data database,

00:41:21.490 --> 00:41:24.200
or perhaps for a shoebox app,
for instance,

00:41:24.200 --> 00:41:27.180
automatically synced via iCloud storage.

00:41:31.000 --> 00:41:33.030
Go Core Data.

00:41:33.030 --> 00:41:37.760
So as I mentioned,
the storage for your is normally

00:41:37.760 --> 00:41:41.630
on a per application basis,
and that's normally keyed by the

00:41:41.690 --> 00:41:43.430
bundle ID of your application.

00:41:43.440 --> 00:41:47.630
That's what gives you access to
your particular piece of the cloud.

00:41:47.800 --> 00:41:50.760
But you may have an application
on the Mac that has a different

00:41:50.760 --> 00:41:53.740
bundle ID than the copy of your
application available for iOS.

00:41:53.740 --> 00:41:55.860
And in that case,
they're different bundle IDs.

00:41:55.860 --> 00:41:58.760
And we have a mechanism that lets
you actually collect those two and

00:41:58.760 --> 00:42:00.940
allow them to access the same area.

00:42:00.940 --> 00:42:04.080
Or you might have a lite version,
a free version of your app,

00:42:04.100 --> 00:42:06.060
and a pro version of your app.

00:42:06.060 --> 00:42:07.940
And you may want to allow
users to upgrade without having

00:42:07.950 --> 00:42:11.620
them suddenly unable to access
their common cloud storage.

00:42:11.620 --> 00:42:15.900
And so there are APIs to let you do
that kind of collection of multiple

00:42:16.100 --> 00:42:19.080
applications data under a common domain.

00:42:19.080 --> 00:42:21.420
That domain must be tied to your company,
though.

00:42:21.600 --> 00:42:24.840
So this isn't about ganging
together multiple apps across

00:42:24.840 --> 00:42:27.660
vendors and providing access.

00:42:27.660 --> 00:42:29.560
So you've built your great app.

00:42:29.560 --> 00:42:32.170
You've taken advantage of all of these
platform APIs and the ones you're

00:42:32.170 --> 00:42:33.770
going to hear about later today.

00:42:33.790 --> 00:42:36.660
And whether you did it
for love or for money,

00:42:36.660 --> 00:42:40.360
the chances are that you want to
get it out to a lot of people.

00:42:40.610 --> 00:42:42.320
And you want to get it to market.

00:42:42.320 --> 00:42:44.200
Well, how do we do this?

00:42:44.360 --> 00:42:46.420
Well, of course,
we have these great app stores.

00:42:46.420 --> 00:42:47.420
We made some enhancements.

00:42:47.420 --> 00:42:50.940
You heard about earlier today in-app
purchase on the Mac App Store.

00:42:50.940 --> 00:42:52.020
We now have Store Kit.

00:42:52.070 --> 00:42:54.210
And the APIs are extremely
similar for in-app purchase

00:42:54.210 --> 00:42:56.880
to what you're used to on iOS,
pretty much identical.

00:42:56.880 --> 00:42:58.460
We support delta updates.

00:42:58.460 --> 00:42:59.320
It just works.

00:42:59.320 --> 00:43:02.780
You submit your package
just as you did before.

00:43:02.780 --> 00:43:06.710
We compute the deltas ourselves as part
of our ingest process into the app store.

00:43:06.760 --> 00:43:10.230
And we'll give your users just the
changes when they go to do downloads.

00:43:10.320 --> 00:43:13.200
We've also enabled push notifications.

00:43:13.200 --> 00:43:18.480
You also heard-- I'm going to tell
you about how we have Newsstand.

00:43:18.490 --> 00:43:18.820
If you have a
subscription-based application,

00:43:18.820 --> 00:43:23.500
there are APIs to allow you to
get those much more elegantly

00:43:23.520 --> 00:43:25.620
in front of your users.

00:43:25.620 --> 00:43:30.000
But if you're in this marketplace,
you really want to go global.

00:43:30.000 --> 00:43:34.200
We have over 90 countries supported
by the app store and over 41

00:43:34.200 --> 00:43:36.280
languages with millions of users.

00:43:36.280 --> 00:43:40.120
And if you've talked to developers who've
taken their app and focused on making

00:43:40.120 --> 00:43:45.200
it available to non-English languages,
they're going to be able to get that.

00:43:45.200 --> 00:43:46.200
So we've got a lot of
different ways to do that.

00:43:46.200 --> 00:43:47.110
We've got a lot of
different ways to do that.

00:43:47.200 --> 00:43:47.200
We've got a lot of
different ways to do that.

00:43:47.200 --> 00:43:48.040
We've got a lot of
different ways to do that.

00:43:48.040 --> 00:43:48.200
We've got a lot of
different ways to do that.

00:43:48.200 --> 00:43:49.040
We've got a lot of
different ways to do that.

00:43:49.130 --> 00:43:49.200
We've got a lot of
different ways to do that.

00:43:49.200 --> 00:43:49.200
We've got a lot of different ways

00:43:50.630 --> 00:43:53.420
There's really a phased
approach to making your app

00:43:53.480 --> 00:43:56.370
available to other locales.

00:43:56.540 --> 00:44:00.200
First, localize the metadata for your
application in the app store.

00:44:00.410 --> 00:44:02.310
People are going to have a
lot better time finding it if,

00:44:02.360 --> 00:44:04.900
in fact, they can read what in the heck
your app is when they look at

00:44:04.910 --> 00:44:06.660
the description in the app store.

00:44:06.780 --> 00:44:08.160
You can then internationalize your app.

00:44:08.260 --> 00:44:12.340
There are system APIs that make sort of
common things easy to do internationally.

00:44:12.390 --> 00:44:13.820
If you take advantage of them,
you're covered.

00:44:13.820 --> 00:44:16.740
And then you get down to
translation of the content and

00:44:16.810 --> 00:44:18.530
the templates of your document.

00:44:18.630 --> 00:44:21.130
Well,
sometimes that translation is going to

00:44:21.130 --> 00:44:23.480
affect the layout of the application.

00:44:23.730 --> 00:44:27.920
And we have new technology
in Lion that allows you,

00:44:27.920 --> 00:44:30.660
when you localize the app,
to have a lot of that layout

00:44:30.660 --> 00:44:32.100
done for you automatically.

00:44:32.310 --> 00:44:34.360
It's actually called Auto Layout.

00:44:34.440 --> 00:44:39.490
So, if you've set up -- yes,
Auto Layout is fantastic.

00:44:39.500 --> 00:44:41.760
If you've set up, let's say,
something in interface builder like

00:44:41.760 --> 00:44:43.720
this -- and you know when you drag
something in interface builder,

00:44:43.720 --> 00:44:45.650
you get those little guides
that come out that kind of say,

00:44:45.650 --> 00:44:47.440
"Oh, okay, you look like you're
about the right distance.

00:44:47.440 --> 00:44:48.760
I know these two things seem to be
different." And you can see that

00:44:48.760 --> 00:44:49.180
they're all connected together.

00:44:49.300 --> 00:44:52.160
Well, now,
those automatically establish constraints

00:44:52.190 --> 00:44:55.640
or relationships between the controls
or the borders of the documents.

00:44:55.690 --> 00:44:58.740
So, now, you save something like
this that's a placeholder.

00:44:58.820 --> 00:45:01.730
And when you fill it with real text,

00:45:02.070 --> 00:45:04.360
For instance, as the English text,
when I put the German text

00:45:04.360 --> 00:45:07.420
and things get bigger,
it actually can cause the entire

00:45:07.840 --> 00:45:11.590
UI to adjust the panel to get taller,
for instance.

00:45:16.120 --> 00:45:19.700
If the user picks, for instance,
a right-to-left language,

00:45:19.700 --> 00:45:23.650
it in fact can actually mirror the UI.

00:45:26.090 --> 00:45:30.180
Auto Layout is really useful
technology whether or not you're

00:45:30.180 --> 00:45:35.080
using it for localization,
but it's great for localization as well.

00:45:35.280 --> 00:45:37.080
So those are app stores.

00:45:37.170 --> 00:45:41.820
We hope you commercialize your app
or give it away very successfully.

00:45:41.880 --> 00:45:46.600
And hopefully you can get one of these
checks from Apple for a bazillion

00:45:46.600 --> 00:45:49.010
simoleons or whatever it may be.

00:45:49.180 --> 00:45:53.820
And if not, at least get a lot of
love from your users.

00:45:54.220 --> 00:45:58.060
So this has been just skimming
the surface of some of what's

00:45:58.060 --> 00:45:59.940
new on our three platforms.

00:45:59.960 --> 00:46:05.010
We have two great talks coming
this afternoon around the dev

00:46:05.010 --> 00:46:09.650
tools and around graphics,
and a whole host of sessions available

00:46:09.650 --> 00:46:12.010
to you for the rest of the week.

00:46:12.140 --> 00:46:16.690
Thank you very much and
have a fantastic WWDC.