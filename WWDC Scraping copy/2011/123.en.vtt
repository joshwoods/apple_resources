WEBVTT

00:00:17.080 --> 00:00:22.410
Good morning, and welcome to Improving
the Stability of Your Apps.

00:00:22.470 --> 00:00:25.040
My name is Jim Turner,
and I'm an iOS binary

00:00:25.040 --> 00:00:27.300
compatibility engineer.

00:00:27.850 --> 00:00:32.230
And we're going to have a
conversation today about why we want

00:00:32.710 --> 00:00:34.800
to have your apps be more stable.

00:00:34.870 --> 00:00:37.900
Why do we have a presentation about this?

00:00:38.020 --> 00:00:41.780
Well, we understand that your time
as a developer is incredibly

00:00:41.780 --> 00:00:45.430
important and very short usually.

00:00:45.430 --> 00:00:48.910
And we want you to be using that time to

00:00:49.110 --> 00:00:53.060
Creating better features in your
applications or creating great new

00:00:53.060 --> 00:00:57.220
applications and not spending so
much time fighting bugs or generally

00:00:57.320 --> 00:01:00.780
fighting the iOS development ecosystem.

00:01:00.820 --> 00:01:05.860
We want the applications and the code
that you write today to run really well,

00:01:05.900 --> 00:01:09.290
not only on the devices we
ship now and in the future,

00:01:09.380 --> 00:01:14.530
but on older devices and users that
are running older versions of iOS.

00:01:15.140 --> 00:01:17.600
Now, we're not going to be able to
discuss absolutely everything

00:01:17.600 --> 00:01:20.000
that you can do to increase the
stability of your application.

00:01:20.000 --> 00:01:24.330
So for the next hour,
we're going to cover four things.

00:01:24.320 --> 00:01:27.700
First, binary compatibility.

00:01:27.810 --> 00:01:31.970
What is it and how do you ensure
that your app remains compatible?

00:01:35.820 --> 00:01:40.080
Second, coding for tomorrow,
how to make good choices when you

00:01:40.080 --> 00:01:44.270
use the API to ensure that your
app remains stable in the future.

00:01:45.280 --> 00:01:46.960
Anticipating the user.

00:01:47.060 --> 00:01:49.850
Thinking about some of the issues
that your users are going to encounter

00:01:50.080 --> 00:01:52.430
when they use your application.

00:01:52.680 --> 00:01:54.140
and finally, testing.

00:01:54.150 --> 00:01:57.000
What to test, how to test,
and if you've never

00:01:57.000 --> 00:02:01.780
created a test plan before,
we'll go over creating a real basic one.

00:02:01.920 --> 00:02:04.750
So let's get started with
binary compatibility.

00:02:06.160 --> 00:02:09.000
The term usually means
that an application,

00:02:09.000 --> 00:02:13.720
if it's adhering to the rules of the API,
should not be negatively or

00:02:13.720 --> 00:02:18.640
adversely affected when the operating
system that it runs on changes.

00:02:18.790 --> 00:02:22.510
Now for your users, though,
this means something slightly different.

00:02:22.780 --> 00:02:26.750
It means that while your application
is being updated and the user is

00:02:26.750 --> 00:02:29.950
updating their version of iOS,
or maybe they're updating

00:02:29.950 --> 00:02:32.680
their device hardware,
their experience should not be

00:02:32.890 --> 00:02:34.880
negatively or adversely affected.

00:02:34.880 --> 00:02:37.940
Now, my group is the Binary
Compatibility Group,

00:02:37.940 --> 00:02:41.620
and what we do is we test binary
compatibility for you guys.

00:02:41.720 --> 00:02:46.530
While we're creating new features in iOS,
we use your applications to see that

00:02:46.530 --> 00:02:50.970
the changes we're making are not
breaking features that you expect.

00:02:52.070 --> 00:02:56.490
So literally what we do is
we put your applications on--

00:02:57.160 --> 00:03:06.180
The Next Great Thing.

00:03:06.180 --> 00:03:06.180
And if you guys are
doing your part right,

00:03:06.180 --> 00:03:06.180
it just works.

00:03:06.180 --> 00:03:06.180
This is Carl.

00:03:06.180 --> 00:03:06.180
He's in The Next Great Thing.

00:03:06.470 --> 00:03:11.860
So what are some of the things that you
can actually do to ensure compatibility?

00:03:11.910 --> 00:03:15.840
Well, one of the first things that most
developers have an issue with when

00:03:15.840 --> 00:03:18.640
they first come to iOS is what
kind of device am I actually on?

00:03:18.640 --> 00:03:21.430
Am I on an iPhone or an iPad?

00:03:21.500 --> 00:03:23.900
So when I was developing
this presentation,

00:03:23.900 --> 00:03:27.770
I went and searched the internet for
how do I know which device I'm on?

00:03:28.010 --> 00:03:31.030
Yeah,
I'm going to show you the code I found.

00:03:31.030 --> 00:03:32.940
And I want you to know
before I even show it to you,

00:03:32.940 --> 00:03:35.380
this is not what we want you doing.

00:03:36.940 --> 00:03:41.720
What you're seeing here is-- raise
your hand if you have this in your app.

00:03:41.900 --> 00:03:46.040
How many of you-- what you're seeing
here is that someone's using syscontrol,

00:03:46.040 --> 00:03:48.540
my name, and they're looking for
the hardware machine type.

00:03:48.590 --> 00:03:53.180
And they're looking at the first seven
characters to see if it equals iPad 1,

00:03:53.180 --> 00:03:53.800
1.

00:03:53.800 --> 00:03:57.110
And if it matches, we're on an iPad,
right?

00:03:57.250 --> 00:03:58.830
Not exactly.

00:03:58.940 --> 00:04:02.880
And let me show you why
this is a really bad idea.

00:04:03.620 --> 00:04:06.440
And remember,
the My Group likes to put your

00:04:06.440 --> 00:04:08.100
applications on the next great thing.

00:04:08.100 --> 00:04:09.280
Carl.

00:04:09.380 --> 00:04:13.900
So we took some of your applications,
we put it on the iPad 2, comma, 1,

00:04:13.900 --> 00:04:16.200
and this is what some of you guys did.

00:04:16.220 --> 00:04:19.180
You rendered in one fourth
the size because you thought

00:04:19.180 --> 00:04:20.550
you were on an iPhone.

00:04:21.150 --> 00:04:24.550
This is what binary
compatibility doesn't look like.

00:04:24.780 --> 00:04:28.630
So the issue here is that you need to
realize that you don't necessarily care

00:04:28.630 --> 00:04:30.620
which kind of device you're actually on.

00:04:30.620 --> 00:04:33.900
You care more about are you
on an iPhone-sized device

00:04:33.900 --> 00:04:35.600
or an iPad-sized device?

00:04:35.900 --> 00:04:38.800
And to that end,
we've made a function available,

00:04:38.820 --> 00:04:42.620
UI user interface idiom,
that will tell you that information.

00:04:42.660 --> 00:04:46.360
If you use this, you will always know,
and we will always be correctly knowing,

00:04:46.370 --> 00:04:48.810
which device you're actually on.

00:04:49.830 --> 00:04:53.580
So another thing that a lot of developers
want to do is use the great new features

00:04:53.580 --> 00:04:56.730
that we throw into every version of iOS.

00:04:56.750 --> 00:04:58.030
Lots of new and shiny stuff.

00:04:58.180 --> 00:05:01.150
But you have users who aren't
going to be upgrading to iOS 5.

00:05:01.150 --> 00:05:02.780
Or they can't.

00:05:02.820 --> 00:05:04.140
Or they're running old hardware.

00:05:04.300 --> 00:05:08.130
But you still want to support
them in the same application.

00:05:08.430 --> 00:05:10.950
So take, for example, Core Image.

00:05:11.200 --> 00:05:13.760
Our incredibly powerful
image manipulation framework

00:05:14.100 --> 00:05:16.880
is now available in iOS 5.

00:05:16.930 --> 00:05:20.310
And you want to use this framework,
but you still want to support your

00:05:20.310 --> 00:05:23.780
users that are running 4.1 or 4.2.

00:05:24.120 --> 00:05:25.700
How do you go about doing this?

00:05:25.730 --> 00:05:29.530
Well, the answer is weak linking your
frameworks and checking for

00:05:29.610 --> 00:05:31.000
class availability at runtime.

00:05:31.000 --> 00:05:33.800
And this is a fairly simple process,
but it's two steps,

00:05:33.950 --> 00:05:36.350
so some people get tripped up by it.

00:05:36.470 --> 00:05:40.210
First, to do weak linking,
I'm going to show you a screenshot of

00:05:40.480 --> 00:05:43.000
what Xcode looks like to do weak linking.

00:05:43.340 --> 00:05:45.700
And here I have a project.

00:05:46.140 --> 00:05:49.140
Here I have a project that has the
Core Image framework already linked,

00:05:49.180 --> 00:05:50.500
already added into it.

00:05:50.520 --> 00:05:53.820
And if you look right here,
I changed the required

00:05:53.940 --> 00:05:55.180
pop-up to optional.

00:05:55.220 --> 00:05:56.180
That's it.

00:05:56.210 --> 00:05:59.920
At runtime, the linker now knows that if
Core Image is not available,

00:05:59.940 --> 00:06:01.690
it just doesn't worry about it.

00:06:01.860 --> 00:06:06.300
The problem though is that if you
still try to use a Core Image class,

00:06:06.320 --> 00:06:08.540
your application is going to crash.

00:06:08.680 --> 00:06:13.300
So to check for class availability,
you need to use NSObject's class method.

00:06:13.300 --> 00:06:15.940
Here we're trying to see
if CI Image is available.

00:06:15.940 --> 00:06:17.400
We send it the class method.

00:06:17.400 --> 00:06:20.890
And if we get back a non-nil answer,
CI Image is available.

00:06:21.030 --> 00:06:24.940
And this is safe going
forward and backwards.

00:06:27.670 --> 00:06:32.340
Another issue users, developers,
excuse me, have a problem with,

00:06:32.340 --> 00:06:35.180
we see it in binary compatibility a lot,
and developer technical

00:06:35.180 --> 00:06:37.600
support sees it too,
is orientation.

00:06:37.720 --> 00:06:41.410
And there's one specific problem that
seems to crop up over and over again,

00:06:41.620 --> 00:06:44.520
and that is, how do you start your
application in landscape,

00:06:44.570 --> 00:06:47.370
and how do you only support landscape?

00:06:47.770 --> 00:06:50.860
This isn't a terribly
difficult problem to solve,

00:06:50.860 --> 00:06:54.640
but a lot of people try stabbing at the
status bar first to make this happen,

00:06:54.640 --> 00:06:58.760
and it's not the right answer.

00:06:58.820 --> 00:07:02.670
You need to start off by editing
your project's Info.plist.

00:07:04.620 --> 00:07:08.620
And the first key you're going to look
for is supported interface orientations.

00:07:08.620 --> 00:07:09.490
Now, this is an array.

00:07:09.580 --> 00:07:11.490
And in this array,
you're going to enter in each

00:07:11.490 --> 00:07:14.610
orientation that you want
your application to support.

00:07:16.760 --> 00:07:20.310
The second key you're looking for
is initial interface orientation,

00:07:20.310 --> 00:07:24.740
and this is the orientation you want your
application to be initially launched in.

00:07:24.820 --> 00:07:26.400
Now,
it's important that you actually make

00:07:26.590 --> 00:07:31.600
the initial orientation interface
orientation match the first elements in

00:07:31.600 --> 00:07:34.660
the supported interface orientations.

00:07:34.710 --> 00:07:37.480
But once you do that,
your application should launch

00:07:37.540 --> 00:07:39.160
in the correct orientation.

00:07:39.210 --> 00:07:43.440
But we're going to ask your application
at runtime what orientations it supports,

00:07:43.450 --> 00:07:47.480
so we need to go a little bit further
and edit some of your view controllers.

00:07:48.420 --> 00:07:50.620
Now,
every view controller in your application

00:07:50.710 --> 00:07:54.000
needs to know how to answer the question,
should auto rotate to

00:07:54.080 --> 00:07:57.740
interface orientation,
especially the one designated

00:07:57.740 --> 00:07:59.750
as your root view controller.

00:08:00.420 --> 00:08:04.500
So continuing with our example,
if we pass in the interface

00:08:04.570 --> 00:08:09.720
orientation parameter we give you to
UI interface orientation is landscape,

00:08:09.730 --> 00:08:12.090
and if you return the answer,
your application now

00:08:12.090 --> 00:08:13.230
does the right thing.

00:08:13.240 --> 00:08:18.600
It'll launch in landscape,
and it will only rotate to landscape.

00:08:19.160 --> 00:08:22.700
And finally, if you're an OpenGL user,
you should really check out GLKit.

00:08:22.700 --> 00:08:24.640
It's a new framework in iOS 5.

00:08:24.640 --> 00:08:27.340
It has a whole bunch of fun stuff in it,
but it also should help you

00:08:27.340 --> 00:08:30.490
with some of the orientation
issues you might be having.

00:08:33.130 --> 00:08:35.410
Finally,
there's some other features that you

00:08:35.410 --> 00:08:39.100
can have your application configure that
have nothing to do with your source code.

00:08:39.150 --> 00:08:43.360
Things like Wi-Fi needs to remain
active while my application is running,

00:08:43.360 --> 00:08:47.980
or I want to share documents with my
application and with iTunes on the host.

00:08:47.980 --> 00:08:51.880
Or I absolutely have to have a gyroscope.

00:08:52.000 --> 00:08:54.340
My app doesn't work without it.

00:08:54.650 --> 00:08:57.980
These are all done by editing
your project's Info.plist.

00:08:58.020 --> 00:09:01.520
So going right back to it,
to support continuous Wi-Fi,

00:09:01.540 --> 00:09:06.560
you add the key application uses Wi-Fi,
and set its value to a Boolean yes.

00:09:07.430 --> 00:09:09.670
To do file sharing,
the key is application

00:09:09.670 --> 00:09:12.600
supports iTunes file sharing,
and it's a Boolean value again.

00:09:12.600 --> 00:09:16.380
And finally,
to restrict your application to

00:09:16.380 --> 00:09:19.750
a specific device capability,
you need to add the key

00:09:19.750 --> 00:09:21.200
required device capabilities.

00:09:21.200 --> 00:09:22.260
And this is a dictionary.

00:09:22.260 --> 00:09:25.030
And for each capability
you want to restrict on,

00:09:25.030 --> 00:09:27.740
you add another Boolean
value for yes or no.

00:09:27.740 --> 00:09:31.960
There's an important thing to note
about required device capabilities here.

00:09:31.980 --> 00:09:34.870
And that is,
if you don't have a preference

00:09:34.980 --> 00:09:38.270
about which capability,
like you don't really care if the

00:09:38.380 --> 00:09:41.820
device has a Javascript or not,
don't set any value at all.

00:09:41.840 --> 00:09:44.470
Because a value of no here
does not mean the same thing

00:09:44.560 --> 00:09:46.220
as a value that doesn't exist.

00:09:47.720 --> 00:09:49.550
There's quite a few other things
that you can actually do by

00:09:49.550 --> 00:09:52.450
editing your project's Info.plist,
so I encourage you to check out the

00:09:52.450 --> 00:09:57.450
documentation to see if any of the
other items apply to your application.

00:09:58.000 --> 00:10:00.090
So with that,
I'd like to bring up Jake Behrens from

00:10:00.090 --> 00:10:04.460
Developer Technical Support to talk about
coding your application for tomorrow.

00:10:09.350 --> 00:10:10.300
Thanks, Jim.

00:10:10.300 --> 00:10:20.370
So what if I told you that
I've been sent from the future

00:10:20.580 --> 00:10:24.290
And in this future,
I've seen your app crash.

00:10:24.540 --> 00:10:28.660
I've seen you overburdened
with stacks of crash logs.

00:10:28.730 --> 00:10:33.970
And I've seen your app become
quite unstable and incompatible

00:10:34.010 --> 00:10:37.450
with future software and hardware.

00:10:38.020 --> 00:10:42.560
Over the next 25 minutes,
I'm going to show you some techniques and

00:10:42.570 --> 00:10:48.120
some things to keep in mind so that you
can ensure that this future is destroyed

00:10:48.820 --> 00:10:50.900
and will probably cease to exist.

00:10:51.050 --> 00:10:54.400
So my name is Jake Behrens,
and I'm an engineer in

00:10:54.400 --> 00:10:56.650
Developer Technical Support.

00:10:57.100 --> 00:11:00.580
And I work with developers
like yourselves every day,

00:11:00.620 --> 00:11:05.500
troubleshooting issues within
your code and applications.

00:11:05.570 --> 00:11:08.000
And this is coding for tomorrow.

00:11:08.630 --> 00:11:13.160
So I'm going to talk
about three things today.

00:11:13.300 --> 00:11:15.640
First, custom functionality.

00:11:15.830 --> 00:11:19.800
How do we implement custom
functionality properly in a

00:11:19.800 --> 00:11:23.120
supported way so that you can get
assistance when something goes wrong?

00:11:23.160 --> 00:11:27.780
Then I'm going to talk about some
things that you can do that take a

00:11:28.070 --> 00:11:33.230
small amount of time but make a huge
impact on your project going forward.

00:11:34.060 --> 00:11:37.980
And then finally,
we're going to cover crash reports.

00:11:38.190 --> 00:11:41.280
How to make them more informational,
how to read them,

00:11:41.280 --> 00:11:45.670
and how to get the most out of them so
that you can ensure that your application

00:11:45.970 --> 00:11:48.150
updates are going to be compatible.

00:11:48.180 --> 00:11:50.830
So let's start.

00:11:53.750 --> 00:11:57.400
With custom functionality,
this is achieved typically by

00:11:57.400 --> 00:12:02.540
extending existing classes that
we ship in our public frameworks.

00:12:02.620 --> 00:12:05.300
But when you create this
custom functionality,

00:12:05.360 --> 00:12:08.460
you want to make sure that
you're not only thinking about

00:12:08.790 --> 00:12:13.760
the future of your software,
but the future of our software.

00:12:13.850 --> 00:12:18.770
What's that user experience going to
look like when your user runs your

00:12:18.770 --> 00:12:21.940
application for the first time on iOS 5?

00:12:22.070 --> 00:12:23.450
Is it going to crash?

00:12:23.560 --> 00:12:25.240
Is it going to hang?

00:12:25.290 --> 00:12:29.540
And even further down the line,
when they run it on new hardware,

00:12:29.610 --> 00:12:31.500
what's that experience going to be?

00:12:31.570 --> 00:12:35.590
Maybe you haven't had time to issue
an update for the new hardware.

00:12:35.810 --> 00:12:38.650
Is it going to be stable and compatible?

00:12:38.760 --> 00:12:41.250
So really, this comes down to your users.

00:12:41.390 --> 00:12:46.100
You want to ensure that they've got
the best possible user experience.

00:12:46.300 --> 00:12:48.670
So let's look at an example.

00:12:49.350 --> 00:12:54.020
Here I've got a list of products,
and maybe we want to customize

00:12:54.020 --> 00:12:56.200
the UI navigation bar.

00:12:56.200 --> 00:13:00.590
Here's a hint, it's the bar at the top.

00:13:00.950 --> 00:13:04.790
You're in a meeting with a client or
your manager comes to you and they say,

00:13:04.800 --> 00:13:10.800
you know, look,
the custom look and feel of iOS is great.

00:13:10.800 --> 00:13:13.950
But this application is for our company.

00:13:14.150 --> 00:13:17.680
And we really want to mesh
the branding with our company.

00:13:17.780 --> 00:13:21.900
So couldn't we make it
a little more orange?

00:13:21.900 --> 00:13:25.310
Well, yeah, you can.

00:13:25.590 --> 00:13:28.070
But there are some
ways you could do this,

00:13:28.070 --> 00:13:32.860
and I'm going to go through two ways
that you probably don't want to do this,

00:13:32.860 --> 00:13:37.010
and then two ways that are
probably going to be a better way.

00:13:37.360 --> 00:13:40.470
So how can we achieve this functionality?

00:13:40.650 --> 00:13:46.090
Well, we could start with...

00:13:46.530 --> 00:13:48.640
Maybe a category.

00:13:48.780 --> 00:13:52.340
But a category can be dangerous in this.

00:13:52.440 --> 00:13:56.040
So for those of you in the
audience new to Objective-C,

00:13:56.110 --> 00:14:01.180
a category is a great way
to extend an existing class.

00:14:01.550 --> 00:14:04.480
- So, I'm going to talk about
the implementation of the

00:14:04.640 --> 00:14:06.100
StableTools application.

00:14:06.100 --> 00:14:10.460
So, the StableTools application is a
very common application that you

00:14:10.510 --> 00:14:12.630
don't have the implementation for.

00:14:12.750 --> 00:14:17.890
But the issue here is that we've
implemented our own DrawRect,

00:14:17.900 --> 00:14:22.220
and a lot of you may think, okay,
I'm overriding DrawRect,

00:14:22.370 --> 00:14:25.720
but you're not overriding,
you're replacing DrawRect.

00:14:25.900 --> 00:14:28.400
So,
any performance tuning that we've done

00:14:28.400 --> 00:14:32.260
within the project is what you do,
and so you could run into issues here.

00:14:32.280 --> 00:14:35.550
The other problem here is that, well,
since this is a category,

00:14:35.550 --> 00:14:40.050
this applies to every instance of
UI navigation bar within your project.

00:14:40.340 --> 00:14:44.540
So, every single bar is
going to look like this,

00:14:44.570 --> 00:14:49.370
which may not be the exact
user experience you want.

00:14:49.710 --> 00:14:52.170
So, what's another way we could do this?

00:14:52.400 --> 00:14:56.930
Oh, and also, with categories,
since you've implemented

00:14:57.320 --> 00:15:00.780
this via a category,
if the original implementation

00:15:00.900 --> 00:15:04.320
was done with a category,
which one runs at runtime?

00:15:04.400 --> 00:15:05.770
It's undefined.

00:15:05.900 --> 00:15:09.460
So,
what's another way that we could do this?

00:15:09.520 --> 00:15:13.400
Well, I've seen some people do this.

00:15:15.240 --> 00:15:19.260
Yeah, this is really bad.

00:15:19.320 --> 00:15:25.340
So not only have you,
what this is is method swizzling.

00:15:25.340 --> 00:15:29.060
And so you're digging into the
classes method list and you're saying,

00:15:29.060 --> 00:15:33.500
yeah, that method, yeah,
don't do your own implementation,

00:15:33.500 --> 00:15:34.290
do mine.

00:15:34.310 --> 00:15:35.960
I know what I'm doing, right?

00:15:36.480 --> 00:15:41.450
So what this does is suddenly,
like within the category, well,

00:15:41.450 --> 00:15:46.250
you've got it at runtime now,
but you've killed any performance

00:15:46.340 --> 00:15:48.620
tuning that we did in ours.

00:15:48.620 --> 00:15:51.940
And you have no way to get back
to the original implementation.

00:15:51.940 --> 00:15:55.730
And really, at the end of the day,
this is just a big hack.

00:15:55.730 --> 00:15:57.630
You really don't want this.

00:15:57.630 --> 00:16:00.360
Because when you write
into me and you say,

00:16:00.360 --> 00:16:04.460
hey, I've got this issue with my
UI navigation bar on the new OS,

00:16:04.460 --> 00:16:05.680
I don't know.

00:16:05.680 --> 00:16:06.460
It's just not being good.

00:16:06.480 --> 00:16:08.640
It's just not being called or, you know,
it's just not working.

00:16:08.640 --> 00:16:11.500
Well, I can't really help you because,
you know,

00:16:11.550 --> 00:16:13.740
this is really not a good thing to do.

00:16:13.740 --> 00:16:14.920
You're just hacking the system.

00:16:14.920 --> 00:16:18.510
So you want to make sure that
you do it in a supported way.

00:16:18.520 --> 00:16:20.870
So what does that look like?

00:16:20.880 --> 00:16:24.030
Funny enough, a subclass.

00:16:24.120 --> 00:16:29.760
So we can subclass UI navigation
bar and implement our draw rect.

00:16:29.860 --> 00:16:35.040
And you'll notice here that I've
set up the image in init with coder.

00:16:35.680 --> 00:16:39.750
So we won't run into the issue where,
you know, possibly we're having to

00:16:39.750 --> 00:16:43.510
recreate the image when draw
rect gets called multiple times.

00:16:43.540 --> 00:16:46.390
So now I know what you're saying.

00:16:46.390 --> 00:16:47.650
You're saying, look, Jake.

00:16:49.080 --> 00:16:52.650
I've read the documentation,
and I know that the navigation

00:16:52.650 --> 00:16:56.050
bar property on UI Navigation
Controller is read-only.

00:16:56.310 --> 00:16:58.780
So it's great that you
wrote this subclass,

00:16:58.880 --> 00:17:01.670
but how do I actually implement this?

00:17:01.780 --> 00:17:06.530
Well,
the secret here is by utilizing the nib.

00:17:06.740 --> 00:17:11.160
So you can select the
UI navigation bar within your nib,

00:17:11.160 --> 00:17:15.140
and then you can set the
class of that UI navigation

00:17:15.440 --> 00:17:18.080
bar to your custom subclass.

00:17:18.210 --> 00:17:21.800
So now, like I said,
you've got it only in specific

00:17:21.800 --> 00:17:24.100
instances that you wanted.

00:17:24.210 --> 00:17:26.180
So this is great.

00:17:26.450 --> 00:17:30.440
So now going forward into the future,
it's even better.

00:17:30.480 --> 00:17:33.900
In iOS 5,
we have the Appearance Proxy API.

00:17:33.980 --> 00:17:38.140
So this is one line of code now,
totally supported.

00:17:38.200 --> 00:17:43.140
No categories, no hacking,
no subclassing, it just works.

00:17:43.140 --> 00:17:47.760
And so you can do this with
setBackgroundImage for bar metrics.

00:17:47.790 --> 00:17:51.630
And I would also suggest that if
you didn't catch polishing your app

00:17:51.720 --> 00:17:55.500
or customizing the appearance of
UIKit control sessions this week,

00:17:55.550 --> 00:17:56.970
catch the repeats.

00:17:57.060 --> 00:18:00.420
Polishing your app will be today,
and then customizing the appearance

00:18:00.500 --> 00:18:03.200
of UIKit controls will be tomorrow.

00:18:03.280 --> 00:18:06.190
Great sessions that dive a
little bit deeper into this.

00:18:07.100 --> 00:20:47.300
[Transcript missing]

00:20:47.370 --> 00:20:49.930
In this kind of situation,
if a certain framework is

00:20:49.930 --> 00:20:53.540
very essential to the core
functionality of your application,

00:20:53.600 --> 00:20:56.700
you want to make sure that you
at least take five minutes and

00:20:56.700 --> 00:20:59.660
go through the headers for all
those classes in that framework.

00:21:00.960 --> 00:21:03.660
Because in some specific instances,
there are additional insights.

00:21:03.660 --> 00:21:06.550
You know,
a lot of this is in the class reference,

00:21:06.600 --> 00:21:10.530
but every once in a while,
you get something with, well,

00:21:10.530 --> 00:21:13.050
if it returns this value,
this is kind of the situation

00:21:13.050 --> 00:21:16.040
that we were thinking of,
or, well, we kind of anticipated that

00:21:16.100 --> 00:21:18.420
it would be used this way,
when maybe you're trying

00:21:18.420 --> 00:21:19.650
to use it another way.

00:21:19.660 --> 00:21:22.480
So this can kind of give you
a little bit more insight.

00:21:25.460 --> 00:21:29.160
And now,
there's a great amount of awesome

00:21:29.290 --> 00:21:30.840
code out there on the internet.

00:21:30.890 --> 00:21:35.150
And man, before I came to Apple,
if a client was breathing down my neck,

00:21:35.150 --> 00:21:37.860
it was awesome to be like, "Yeah,
I need that functionality.

00:21:38.070 --> 00:21:38.670
Yes, that does it.

00:21:38.820 --> 00:21:39.870
Okay, ship it.

00:21:39.870 --> 00:21:44.020
Awesome!" Well, before you do that,
you should probably

00:21:44.060 --> 00:21:45.320
read through the code.

00:21:45.380 --> 00:21:48.320
Because in some cases,
if it's an older framework,

00:21:48.590 --> 00:21:51.160
you could run into an issue
where they're calling a private

00:21:51.160 --> 00:21:52.440
API and you didn't even know.

00:21:52.440 --> 00:21:55.280
So then you get rejected and you're like,
"Oh, man,

00:21:55.280 --> 00:22:00.240
I waited seven days and now I just
got to fix this." Another issue is

00:22:00.390 --> 00:22:05.160
you don't want to add in a 5-meg
framework to do a photo gallery.

00:22:05.230 --> 00:22:08.970
Or a thousand lines of code
to reimplement UI button

00:22:09.180 --> 00:22:11.520
with some faux CSS styling.

00:22:11.640 --> 00:22:14.530
So you really want to take
some ownership of this code.

00:22:14.880 --> 00:22:18.720
Anything that ships within your
application is your responsibility.

00:22:18.800 --> 00:22:23.240
When your users come back and say,
"It's crashing," you really can't say,

00:22:23.310 --> 00:22:25.810
yeah, use this framework.

00:22:25.960 --> 00:22:28.860
probably shouldn't use it,
so sorry about that.

00:22:29.040 --> 00:22:32.220
They just know that the application
that they know and love and use

00:22:32.220 --> 00:22:35.550
every day suddenly doesn't work
quite the way they intended it to.

00:22:35.740 --> 00:22:39.400
And so you want to make sure
that you're analyzing the code,

00:22:39.400 --> 00:22:42.390
you're profiling it,
you're putting it through all the ringers

00:22:42.390 --> 00:22:44.980
that you would put your own code through.

00:22:48.270 --> 00:22:52.200
So now you've made your
code more compatible,

00:22:52.200 --> 00:22:56.920
you've made it more stable,
now you've got crash logs.

00:22:57.310 --> 00:22:59.470
So I hate to be the
bearer of bad news here,

00:22:59.590 --> 00:23:02.200
but your application's
probably going to crash.

00:23:02.200 --> 00:23:04.940
My applications crashed
before I came to Apple.

00:23:05.320 --> 00:23:06.190
Now they don't.

00:23:06.190 --> 00:23:07.200
No, no, no, I'm just kidding.

00:23:07.410 --> 00:23:08.190
They still crash.

00:23:08.200 --> 00:23:13.110
So you've got all these crash logs.

00:23:13.240 --> 00:23:14.130
Well, let's start at the beginning.

00:23:14.190 --> 00:23:18.200
How did we prepare for
getting these crash logs?

00:23:18.200 --> 00:23:20.770
Well, when you finally got the
build and you're like,

00:23:20.770 --> 00:23:24.130
all right, I'm ready to go,
we're going to throw this out,

00:23:24.220 --> 00:23:29.200
before you give it to your beta testers,
before you submit it to the app store,

00:23:29.200 --> 00:23:33.200
do the build and archive
from within Xcode.

00:23:33.220 --> 00:23:36.860
What this does is it sets aside,
it does that build and it sets

00:23:36.860 --> 00:23:39.190
aside the binary and the DSIM file.

00:23:39.200 --> 00:23:42.800
And what happens here is that the
binary is your application and the

00:23:42.800 --> 00:23:48.200
DSIM is kind of like a mapping of
these addresses to these symbols.

00:23:48.200 --> 00:23:50.100
Or your code.

00:23:50.210 --> 00:23:53.550
And so get this, back it up,
co-locate that back up,

00:23:53.550 --> 00:23:57.200
do everything possible to
make sure that you have that.

00:23:57.620 --> 00:24:00.180
Because this is going to help
you make your crash log much

00:24:00.180 --> 00:24:02.200
more informative going forward.

00:24:02.210 --> 00:24:03.190
And we'll get to that in a moment.

00:24:03.190 --> 00:24:06.980
So you've done your preparation.

00:24:07.330 --> 00:24:08.940
Now, where do I find them?

00:24:08.960 --> 00:24:11.190
Well,
you can get them off your test device

00:24:11.560 --> 00:24:15.970
because I know you're not running the
newest seed on your personal device,

00:24:15.970 --> 00:24:16.570
right?

00:24:17.010 --> 00:24:18.440
Well, maybe.

00:24:18.600 --> 00:24:21.240
So, get them off your test device.

00:24:21.280 --> 00:24:24.360
You can also get them in
iTunes Connect when your

00:24:24.360 --> 00:24:26.680
application is in there.

00:24:26.710 --> 00:24:30.080
Also,
if you have a user contact you directly,

00:24:30.120 --> 00:24:32.440
maybe they say, you know,
I've got your app,

00:24:32.440 --> 00:24:36.310
it changed my life before I was lonely,
now I've got a kid, a dog, and kids,

00:24:36.510 --> 00:24:37.600
it's great.

00:24:37.670 --> 00:24:40.160
Well, you can point them to
this directory and say,

00:24:40.200 --> 00:24:44.760
okay, pass me up these crash
logs and I'll take a look.

00:24:44.810 --> 00:24:48.820
You can also read technical note
TN2151 on the reference library

00:24:49.180 --> 00:24:53.600
to get the other directories
from the other operating systems.

00:24:54.350 --> 00:24:57.200
So now you've got them,
and your user has emailed

00:24:57.200 --> 00:24:59.700
you crash reports,
and you're like, "All right, let's go,

00:24:59.700 --> 00:25:03.350
let's get this done."
And it looks like this.

00:25:03.900 --> 00:25:05.900
I don't read hex.

00:25:06.190 --> 00:25:09.940
But remember when we did the
build and archive before?

00:25:09.970 --> 00:25:11.170
Well now we're gonna use that.

00:25:11.300 --> 00:25:14.420
So what you can do is you can
take this crash log and you

00:25:14.480 --> 00:25:19.220
can drop it into the device log
section of the organizer in Xcode.

00:25:19.240 --> 00:25:21.440
And it goes, okay,
you did the build and archive,

00:25:21.510 --> 00:25:23.720
so I've got the DSIM,
I've got the binary,

00:25:23.750 --> 00:25:27.130
and now I can make this look like this.

00:25:27.490 --> 00:25:29.500
So much more informative.

00:25:29.530 --> 00:25:31.800
Now this is fully symbolicated.

00:25:31.810 --> 00:25:36.620
And realize sometimes you might see them,
especially from app review

00:25:36.660 --> 00:25:40.820
or maybe iTunes Connect,
where our code is symbolicated,

00:25:40.860 --> 00:25:43.010
but your code isn't symbolicated.

00:25:43.370 --> 00:25:46.300
So you wanna make sure that
you do this just to be sure.

00:25:46.310 --> 00:25:48.950
And I'm gonna show you
how you can make sure.

00:25:49.090 --> 00:25:52.060
So you've got this and you're like, okay,
well this is a lot of information,

00:25:52.100 --> 00:25:54.440
so how do I kind of sift through this?

00:25:54.470 --> 00:25:57.450
Well,
the first thing you wanna look at is

00:25:57.450 --> 00:26:00.120
exception codes and exception types.

00:26:00.130 --> 00:26:04.800
This is gonna give you kind of a general
idea of what you're dealing with.

00:26:04.800 --> 00:26:08.440
And the more you read crash logs,
the more you're gonna say, oh, okay,

00:26:08.580 --> 00:26:10.440
it's that kind of thing, okay,
I got that.

00:26:10.440 --> 00:26:13.240
I know kind of where this is going.

00:26:13.240 --> 00:26:17.140
Another thing to look at
is which thread crashed.

00:26:17.140 --> 00:26:19.880
So in this example, it's thread zero.

00:26:19.880 --> 00:26:23.000
And if you've ever heard, you know,
don't block the main thread,

00:26:23.150 --> 00:26:24.620
that's thread zero.

00:26:24.710 --> 00:26:29.260
So now we know which thread crashed,
and we can scroll down

00:26:29.530 --> 00:26:31.240
and get to that thread.

00:26:31.250 --> 00:26:33.440
So we're there.

00:26:33.440 --> 00:26:34.800
No.

00:26:35.630 --> 00:26:38.310
Since we're here,
we want to start looking

00:26:38.410 --> 00:26:39.880
through the backtrace.

00:26:40.040 --> 00:26:43.080
So you want to follow down the
backtrace until you get to the

00:26:43.200 --> 00:26:45.650
first instance of your application.

00:26:45.760 --> 00:26:50.080
So you can see here at frame 10,
on the left-hand side is my application.

00:26:50.080 --> 00:26:57.020
And on the right-hand side,
it's mapped the addresses to symbols.

00:26:57.020 --> 00:26:59.750
And so it says, okay,
in my application view

00:26:59.750 --> 00:27:03.470
controller's viewed load method,
something happened.

00:27:03.480 --> 00:27:10.850
And it even has more information for you,
which is in the implementation file,

00:27:10.850 --> 00:27:13.000
it was at line 36.

00:27:13.530 --> 00:27:19.530
So, great, now you know almost right
where things went wrong.

00:27:19.680 --> 00:27:25.300
You know what line of code was last
executed before everything went south,

00:27:25.300 --> 00:27:28.670
but we can still gain a little
bit more insight if we start

00:27:28.800 --> 00:27:30.300
following up the backtrace.

00:27:30.300 --> 00:27:34.280
So, on frame 9,
you'll see objected index was

00:27:34.350 --> 00:27:37.300
called on an immutable NSArray.

00:27:37.300 --> 00:27:40.300
That's what the I after
the NSArray stands for.

00:27:40.300 --> 00:27:46.010
And so, okay, now we're at line 36,
objected index, NSArray,

00:27:46.050 --> 00:27:50.200
we've got a lot more info,
and then at frame 8,

00:27:50.480 --> 00:27:52.300
you can see the exception was thrown.

00:27:52.300 --> 00:27:56.560
So, alright, let's look at the code.

00:27:56.760 --> 00:27:59.360
So if we go to Xcode,
we're in my application view

00:27:59.360 --> 00:28:03.280
controller's view to load method,
and we look at line 36.

00:28:03.320 --> 00:28:06.040
Ugh, I'm so embarrassed.

00:28:06.270 --> 00:28:11.040
So what I did was I created
an NSArray with nil values,

00:28:11.040 --> 00:28:14.660
and then I'm calling
object at index zero,

00:28:14.690 --> 00:28:16.430
which doesn't exist.

00:28:16.640 --> 00:28:18.600
So it crashed.

00:28:18.640 --> 00:28:20.840
There's another potential crash
that could have happened here,

00:28:20.840 --> 00:28:24.210
which is I released it and
then I was calling it again,

00:28:24.220 --> 00:28:26.020
which is a problem.

00:28:26.140 --> 00:28:31.080
So I could have hit that,
but since this was all I was doing,

00:28:31.100 --> 00:28:34.520
the memory hadn't been overwritten yet.

00:28:34.520 --> 00:28:36.910
And then I wasn't even
setting it to anything.

00:28:37.070 --> 00:28:39.540
So yeah, I just really didn't.

00:28:39.540 --> 00:28:40.890
I must have been sleeping.

00:28:41.160 --> 00:28:46.230
So now I know exactly where
I needed to fix my code from

00:28:46.420 --> 00:28:48.280
looking at the crash report.

00:28:48.300 --> 00:28:50.300
I was able to symbolicate it.

00:28:50.320 --> 00:28:53.190
I was able to find out
exactly what needed to happen

00:28:53.530 --> 00:28:55.560
and what the problem was.

00:28:57.220 --> 00:29:00.830
So as we're reading through,
there are some common

00:29:00.940 --> 00:29:02.360
exceptions that we can find.

00:29:02.520 --> 00:29:08.140
So on Mac and iOS, you can see exe crash,
which was our example.

00:29:08.140 --> 00:29:10.660
And this is kind of your
standard crash exception.

00:29:10.700 --> 00:29:13.280
Hey, something in the logic
went a little weird,

00:29:13.280 --> 00:29:14.700
so something happened.

00:29:14.700 --> 00:29:19.210
An exe bad access usually refers
to some memory mismanagement.

00:29:19.210 --> 00:29:21.360
Something happened there.

00:29:21.360 --> 00:29:24.500
And then on iOS specifically,
we have ate bad food,

00:29:24.690 --> 00:29:28.800
which means that the watchdog
timer killed your application.

00:29:28.800 --> 00:29:33.270
Maybe it didn't launch in time,
or maybe it didn't terminate in time.

00:29:33.270 --> 00:29:37.290
And then we also have deadfall,
which means that it just was so

00:29:37.290 --> 00:29:41.610
unresponsive that the user had
to force quit the application.

00:29:43.730 --> 00:29:47.560
So, these exceptions are great,
but how do we kind of avoid these?

00:29:47.730 --> 00:29:49.440
Well, here's some quick tips.

00:29:49.460 --> 00:29:53.000
On exe crash, like I said,
these are usually logic issues.

00:29:53.000 --> 00:29:57.630
So, follow back through and see,
you know, where something went wrong.

00:29:57.630 --> 00:30:00.990
In my case, I was setting an array to
nil and then trying to call

00:30:00.990 --> 00:30:02.620
an index that didn't exist.

00:30:03.520 --> 00:30:07.800
With exe bad access,
make sure your ownership is in place if

00:30:07.900 --> 00:30:10.910
you're manually managing your memory.

00:30:10.910 --> 00:30:14.550
So,
you can basically remember this as narc.

00:30:14.560 --> 00:30:20.680
If you're calling new, alloc, retain,
or copy, you own that now.

00:30:20.820 --> 00:30:22.820
So, you need to dispose of it properly.

00:30:22.820 --> 00:30:27.150
But going forward, I would really,
really suggest that you check out

00:30:27.150 --> 00:30:30.690
our automatic reference counting,
which our teams have

00:30:30.690 --> 00:30:32.340
done an amazing job on.

00:30:32.400 --> 00:30:33.400
And this will help you.

00:30:33.520 --> 00:30:37.080
Get past these trivial
memory management issues.

00:30:37.120 --> 00:30:40.350
Another thing to look
at is thread access.

00:30:40.370 --> 00:30:44.250
So, you know, in my example,
we looked at thread zero had crashed.

00:30:44.250 --> 00:30:48.010
Well, if we've done a multi-threaded
application and we see a

00:30:48.010 --> 00:30:51.700
crash on another thread,
that may clue us in as to, oh, okay,

00:30:51.790 --> 00:30:55.080
maybe I should check out some
of my threading code because

00:30:55.080 --> 00:30:59.150
I create one here and this is the
kind of issue that has happened.

00:30:59.160 --> 00:31:01.500
And you also want to make
sure that you're not,

00:31:01.500 --> 00:31:03.500
you know, trying to mutate an array.

00:31:03.520 --> 00:31:06.020
On one thread while you're
trying to release it on another.

00:31:06.020 --> 00:31:08.060
That can lead to sadness.

00:31:08.060 --> 00:31:12.860
So, then with ate bad food,
I've seen some over-eager

00:31:12.860 --> 00:31:18.070
developers who are like,
wow, main window is awesome.

00:31:18.070 --> 00:31:20.640
I'm just going to put all my
view controllers in there.

00:31:20.640 --> 00:31:22.920
And I'm going to put all
my resources in there.

00:31:22.920 --> 00:31:27.810
Well, the problem here is that that's
loaded when your application launches.

00:31:27.820 --> 00:31:32.560
And so,
all of those objects are being loaded.

00:31:32.560 --> 00:31:33.470
And it just makes sense.

00:31:33.520 --> 00:31:34.930
It may take a really long time.

00:31:34.940 --> 00:31:39.160
So, what the watchdog does is it
stands by to the side and it says,

00:31:39.160 --> 00:31:41.930
okay, we're loading an application.

00:31:42.020 --> 00:31:44.220
We're loading.

00:31:44.220 --> 00:31:45.510
We're loading.

00:31:45.900 --> 00:31:47.300
Yeah, we're still loading.

00:31:47.300 --> 00:31:49.080
What is he doing?

00:31:49.160 --> 00:31:50.080
No, kill it.

00:31:50.090 --> 00:31:51.430
Just kill it.

00:31:51.700 --> 00:31:53.240
And we do.

00:31:53.280 --> 00:31:58.180
Another thing here is to watch all the
initialization code that you're doing in

00:31:58.180 --> 00:32:00.820
applicationDidFinishLaunchingWithOptions.

00:32:00.870 --> 00:32:03.800
You want to try and return from
this method as quickly as possible

00:32:03.830 --> 00:32:07.310
so that your application is
responsive and the system knows that,

00:32:07.350 --> 00:32:08.350
okay, the application's up.

00:32:08.470 --> 00:32:09.770
We're doing stuff.

00:32:09.840 --> 00:32:10.820
We're going.

00:32:11.090 --> 00:32:14.640
If you have initialization code in here,
make sure you're not doing

00:32:14.640 --> 00:32:16.360
things like initWithURL.

00:32:16.400 --> 00:32:19.580
Maybe you're trying to ping a
server and it's just not responding

00:32:19.600 --> 00:32:21.160
and it's just sitting there.

00:32:21.210 --> 00:32:24.980
Well, the watchdog timer is going
to come along and say,

00:32:25.030 --> 00:32:29.430
"Nah, we're not waiting on that anymore,"
and it's going to dump your app.

00:32:29.510 --> 00:32:31.040
So,

00:32:31.460 --> 00:32:36.860
The things to take away is that you
can change this future that I am from.

00:32:36.920 --> 00:32:40.040
You can correct your clever code.

00:32:40.100 --> 00:32:46.560
And for those of you who are new, well,
when you see this clever code,

00:32:46.570 --> 00:32:48.240
there's usually a better way.

00:32:48.290 --> 00:32:50.840
And for those of you who are
veterans in the audience,

00:32:50.880 --> 00:32:52.560
I know you guys wouldn't
put a code like that in,

00:32:52.560 --> 00:32:53.660
right?

00:32:53.710 --> 00:32:54.830
Right?

00:32:54.940 --> 00:32:56.010
Maybe.

00:32:56.140 --> 00:32:59.220
So you want to check out if
there's a better way to do these.

00:32:59.270 --> 00:33:01.580
And then make sure that
you're taking ownership.

00:33:01.620 --> 00:33:04.550
Everything that ships within
your application is yours.

00:33:04.740 --> 00:33:06.380
It's your responsibility.

00:33:06.430 --> 00:33:10.180
If you're pulling in static libraries,
you want to make sure that you either

00:33:10.180 --> 00:33:14.080
have access to that source or you
have a support channel so that you

00:33:14.080 --> 00:33:17.580
can say when you get a crash log back
and a crash is happening in there,

00:33:17.720 --> 00:33:20.900
you can try and resolve
that as quickly as possible.

00:33:20.950 --> 00:33:24.580
And then finally,
if you do incur a crash,

00:33:24.630 --> 00:33:27.700
knowing your crash reports and
knowing how to symbolicate those,

00:33:27.840 --> 00:33:31.970
how to prepare for these, you know,
issues is really, really important.

00:33:32.190 --> 00:33:35.110
I mean, this is how you're going to
issue the next update of your

00:33:35.170 --> 00:33:36.690
application for your users.

00:33:36.790 --> 00:33:40.980
And you want to make sure that you
can do that quickly and effectively.

00:33:41.120 --> 00:33:42.760
So with that, thank you.

00:33:43.020 --> 00:33:45.510
And I'm going to pass back off to Jim.

00:33:51.760 --> 00:33:54.150
Thank you, future Jake.

00:33:54.190 --> 00:33:57.210
Did you leave the lottery
numbers up here for next week?

00:33:57.220 --> 00:33:58.610
No.

00:34:02.240 --> 00:34:05.870
So let's talk about you taking a step
back out of your role as a developer

00:34:06.580 --> 00:34:09.900
and putting yourself into the role
of your users for a little while and

00:34:09.960 --> 00:34:12.130
thinking about some of the issues
that they're going to encounter

00:34:12.740 --> 00:34:14.680
while they use your application.

00:34:14.740 --> 00:34:17.590
Specifically, four things here.

00:34:17.760 --> 00:34:21.420
The first is upgrades
to your application.

00:34:22.640 --> 00:34:25.740
Not only to your application, actually,
but to the device and to the

00:34:25.740 --> 00:34:27.650
operating system as well.

00:34:28.130 --> 00:34:30.440
Second, the network.

00:34:30.470 --> 00:34:32.440
The network has a mind of its own.

00:34:32.440 --> 00:34:35.110
Some people think it looks
like this green thing.

00:34:35.260 --> 00:34:38.850
We need to help the user understand
what's going wrong when the

00:34:39.100 --> 00:34:40.960
network doesn't cooperate.

00:34:41.350 --> 00:34:43.300
Third, targeting devices.

00:34:43.370 --> 00:34:48.110
How to ensure that the user experiences
exactly what you intended them to.

00:34:48.230 --> 00:34:50.240
And finally, knowing your customers.

00:34:50.330 --> 00:34:54.850
Thinking about the properties of the
user themselves and not just basically

00:34:54.850 --> 00:34:57.470
what features they would like to see.

00:34:58.550 --> 00:35:01.980
Now, upgrades to your application are
normally a very benign process.

00:35:02.230 --> 00:35:04.700
The user goes to the store,
they download it to the device,

00:35:04.820 --> 00:35:08.090
they launch it, and it works just fine.

00:35:08.890 --> 00:35:12.800
It's during this relaunch process that
your application needs to be mindful of

00:35:13.030 --> 00:35:17.560
upgrading the data that it created on
behalf of the user that it still manages.

00:35:17.640 --> 00:35:20.360
And specifically, there's three areas.

00:35:20.420 --> 00:35:21.030
User defaults.

00:35:21.150 --> 00:35:24.390
If you're saving a lot of
user data in preferences,

00:35:24.460 --> 00:35:27.230
which is fine,
you need to make sure that the

00:35:27.530 --> 00:35:31.770
keys that you were using before are
still supported in the next version.

00:35:31.880 --> 00:35:35.070
And if they're not,
or for some reason you can't use them,

00:35:35.070 --> 00:35:37.720
that they need to be
upgraded or migrated.

00:35:37.820 --> 00:35:40.440
You don't want your user to have
to reconfigure your application

00:35:40.600 --> 00:35:42.810
every time they upgrade it.

00:35:43.270 --> 00:35:44.550
Second is Core Data.

00:35:44.550 --> 00:35:50.490
Core Data is our persistence framework,
and honestly, it expects to be upgraded.

00:35:50.490 --> 00:35:53.290
And to that end,
it works very hard to make

00:35:53.290 --> 00:35:57.720
what could be a very painful
process as painless as possible.

00:35:58.170 --> 00:36:01.960
Usually, if your data models aren't
very complicated or you don't

00:36:02.090 --> 00:36:05.040
have a lot of significant
changes from version to version,

00:36:05.230 --> 00:36:08.480
providing the data models from
each version of your application

00:36:08.830 --> 00:36:11.870
is enough for us to infer a
migration map on your behalf,

00:36:11.870 --> 00:36:14.310
and we'll just do the migration for you.

00:36:14.500 --> 00:36:17.280
However, if you have a really
complicated data model,

00:36:17.280 --> 00:36:21.800
or you've made a large number of
changes from one version to the next,

00:36:21.820 --> 00:36:24.430
you can still do the upgrade,
but it's going to be more on you.

00:36:24.440 --> 00:36:26.750
You're going to have to
provide your own migration map.

00:36:26.840 --> 00:36:30.800
You may actually have to interact with
an NS Migration Manager a little bit,

00:36:30.800 --> 00:36:34.410
but it's totally possible to do
really complicated migrations.

00:36:35.340 --> 00:36:39.820
We mentioned this because, unfortunately,
a lot of developers now seem to

00:36:39.820 --> 00:36:43.880
think the route that forcing their
users to upgrade the application

00:36:43.880 --> 00:36:48.070
or reinstall the application is
the preferred method to upgrade it.

00:36:48.160 --> 00:36:52.110
This is a really bad user experience,
and it makes the users lose all the

00:36:52.110 --> 00:36:54.320
data they have created beforehand.

00:36:57.070 --> 00:37:00.080
And finally, the third thing,
custom databases.

00:37:00.170 --> 00:37:03.950
If you're using SQLite directly,
maybe you have a XML store

00:37:03.960 --> 00:37:07.060
or a flat text file even,
or maybe your company has a

00:37:07.100 --> 00:37:12.100
proprietary binary format database,
ensure that those get upgraded as well.

00:37:14.000 --> 00:37:17.420
Upgrades on the devices and
for the operating system,

00:37:17.420 --> 00:37:21.240
again, your applications probably
don't necessarily care

00:37:21.240 --> 00:37:22.280
when the device upgrades.

00:37:22.280 --> 00:37:25.560
Again,
you'll get relaunched and you'll be fine.

00:37:25.560 --> 00:37:28.900
But if you think about it,
your application could actually be

00:37:28.900 --> 00:37:33.730
shut down on an original iPhone running
iOS 3.1.3 and through the restore

00:37:33.800 --> 00:37:38.600
process be brought back up on an iOS
5 device or iPhone 4 running iOS 5.

00:37:39.290 --> 00:37:42.690
That is a huge difference
in functionality from

00:37:42.850 --> 00:37:45.440
not only just the device,
what the device can do,

00:37:45.450 --> 00:37:46.740
and what the OS can actually do.

00:37:46.740 --> 00:37:51.470
So your application finds itself in
a very strange but brand new world.

00:37:51.480 --> 00:37:53.250
The environment is totally different.

00:37:53.280 --> 00:37:57.440
And this becomes important for you
guys when you're restoring your

00:37:57.440 --> 00:37:59.730
application's last known state.

00:37:59.760 --> 00:38:03.840
Now, state saving is something that
you're doing as necessary and

00:38:03.840 --> 00:38:06.920
every time that we're calling
application did enter background.

00:38:06.920 --> 00:38:09.260
And it's the information
that you need to know.

00:38:09.280 --> 00:38:12.420
To bring your application
back up to the same reasonable

00:38:12.420 --> 00:38:14.260
point that the user left it in.

00:38:14.280 --> 00:38:19.070
But if you're saving transient data,
information like about which networks

00:38:19.130 --> 00:38:24.130
are available or what type of network
the user was last on or URL resources

00:38:24.230 --> 00:38:25.710
that may or may not be there anymore.

00:38:25.720 --> 00:38:29.460
You need to verify that this information
is still saying when you relaunch.

00:38:29.480 --> 00:38:32.470
Sometimes we see it that you
just blindly restore the state.

00:38:32.700 --> 00:38:36.550
It's totally wrong and
the application crashes.

00:38:37.250 --> 00:38:39.300
A final note about
upgrades to the devices,

00:38:39.370 --> 00:38:42.130
new devices out of the
box have no content.

00:38:42.240 --> 00:38:45.990
If your application is expecting
address book records and you

00:38:46.090 --> 00:38:49.700
start blindly indexing into them,
what actually happens?

00:38:49.750 --> 00:38:53.440
Be prepared to handle the state
where there are no records or no

00:38:53.440 --> 00:38:56.460
content available to your application.

00:38:58.530 --> 00:38:59.440
The network.

00:38:59.500 --> 00:39:03.240
The network, like I said,
it has a mind of its own.

00:39:03.240 --> 00:39:07.250
And it usually chooses to foist
its anger upon your customer at the

00:39:07.250 --> 00:39:11.490
exact point in time that they really
need to get the data that's in it.

00:39:11.840 --> 00:39:15.270
And what we advise is that
you hope for the best here,

00:39:15.270 --> 00:39:16.680
but you really need to expect the worst.

00:39:16.680 --> 00:39:19.620
And when you're in that
absolute worst case scenario,

00:39:19.620 --> 00:39:22.210
you need to handle errors as
gracefully as you possibly can.

00:39:22.220 --> 00:39:25.190
Now, the error handlers in our
protocols are optional,

00:39:25.410 --> 00:39:28.550
or usually marked as optional,
but they're really not.

00:39:28.610 --> 00:39:33.160
It's the last chance that you have to
undo any network state or clean up any

00:39:33.160 --> 00:39:38.100
problems that you may have encountered
during your network transmission.

00:39:38.580 --> 00:39:40.230
So, the error handlers are optional,
or usually marked as optional,

00:39:40.230 --> 00:39:40.750
but they're really not.

00:39:40.830 --> 00:39:42.490
It's the last chance that you have to
undo any network state or clean up any

00:39:42.490 --> 00:39:44.590
problems that you may have encountered
during your network transmission.

00:39:46.580 --> 00:39:48.500
Something we suggest that
you do before you even send

00:39:48.500 --> 00:39:52.380
your network request though,
is to test for reachability.

00:39:52.830 --> 00:39:56.000
Reachability is the knowledge to
know if your request is actually

00:39:56.000 --> 00:39:59.690
going to leave the physical device
before you even make it and in

00:39:59.810 --> 00:40:04.210
which network it's going to take.

00:40:04.210 --> 00:40:04.210
Is it going to be on Wi-Fi or
is it going to be on cellular?

00:40:04.620 --> 00:40:08.730
We have some great sample code that shows
you how to use the Reachability API,

00:40:08.730 --> 00:40:11.100
but there are two things that
you need to remember about it.

00:40:11.120 --> 00:40:14.270
Is that the first,
it does not indicate availability.

00:40:14.380 --> 00:40:17.640
Just because we say that your
request is going to leave the device,

00:40:17.680 --> 00:40:19.870
doesn't mean it's actually
going to get anywhere.

00:40:19.960 --> 00:40:23.020
If your server's not up and
running and providing data,

00:40:23.030 --> 00:40:24.970
it's still not gonna work.

00:40:25.210 --> 00:40:29.920
Second is that domain name, excuse me,
that reachability requires

00:40:30.220 --> 00:40:31.340
domain name resolution.

00:40:31.380 --> 00:40:36.400
And DNS is not exactly the
fastest thing on the planet.

00:40:36.530 --> 00:40:39.720
So the first time you make
a request to reachability,

00:40:39.720 --> 00:40:41.430
it's probably going to
give you the answer of,

00:40:41.430 --> 00:40:42.860
I don't know.

00:40:42.900 --> 00:40:46.210
You need to wait until we call you back
with the real state of reachability

00:40:46.410 --> 00:40:49.090
before you decide how to proceed.

00:40:50.540 --> 00:40:54.630
And finally, disabling UI that's bound
to a network function.

00:40:54.740 --> 00:40:57.100
This is fine,
but you want to be very careful

00:40:57.100 --> 00:40:58.780
about how you go about doing it.

00:40:58.820 --> 00:41:00.880
A lot of times,
we'll see an application start up,

00:41:00.880 --> 00:41:05.320
and it immediately blitz this
loading view on top of all of its UI.

00:41:05.320 --> 00:41:08.280
And reachability fails,
or the network isn't present,

00:41:08.290 --> 00:41:10.320
or some other transient error happens.

00:41:10.320 --> 00:41:15.000
And now I'm stuck with an
application that's a loading screen.

00:41:15.030 --> 00:41:19.110
Disabling UI, just do it for the controls
and components that are

00:41:19.110 --> 00:41:20.720
bound to the network itself.

00:41:20.720 --> 00:41:24.090
And let the user try to use as much
of your application as they can

00:41:24.090 --> 00:41:26.520
that doesn't require the network.

00:41:26.520 --> 00:41:32.670
Targeting devices.

00:41:36.960 --> 00:41:39.120
Users do not buy simulators, guys.

00:41:39.280 --> 00:41:40.260
They buy devices.

00:41:40.350 --> 00:41:41.080
They buy iPhones.

00:41:41.080 --> 00:41:41.960
They buy iPads.

00:41:42.200 --> 00:41:45.660
I looked for a guy holding
his laptop to his ear.

00:41:45.660 --> 00:41:47.900
I could not find an image of it.

00:41:47.950 --> 00:41:52.220
If you're not testing your application,
if you're not building your application

00:41:52.220 --> 00:41:55.900
for a physical device and you're
only testing in the simulator,

00:41:55.970 --> 00:41:57.440
this is a real problem.

00:41:58.120 --> 00:42:01.810
The simulator does not emulate the
actual experience that the user is

00:42:01.810 --> 00:42:06.200
going to encounter when they run your
application on their actual device.

00:42:06.320 --> 00:42:11.500
There is no substitute for testing
and developing on real hardware.

00:42:12.280 --> 00:42:14.600
But while you're developing
for the current hardware and

00:42:14.600 --> 00:42:17.440
the current version of iOS,
we want you to understand that

00:42:17.600 --> 00:42:21.000
there are users that are not
going to be able to upgrade with

00:42:21.110 --> 00:42:22.470
you for one reason or another.

00:42:22.610 --> 00:42:24.870
So while you're developing
for the new hotness,

00:42:24.930 --> 00:42:28.170
we want you to have a plan in
place to figure out how to handle

00:42:28.180 --> 00:42:31.970
those users that are going to
be not coming along for the ride.

00:42:32.970 --> 00:42:37.470
As the gap between the oldest version of
iOS that you're going to support widens

00:42:37.640 --> 00:42:42.200
from the version that you're targeting,
it becomes increasingly difficult

00:42:42.260 --> 00:42:43.510
to satisfy both of these ends.

00:42:43.520 --> 00:42:47.430
And eventually what's going to happen
is that the end that has the most

00:42:47.430 --> 00:42:51.670
of your customers is going to start
going to have a degraded performance

00:42:51.680 --> 00:42:55.000
because you're still trying to
support this end of the long tail

00:42:55.000 --> 00:42:56.990
where there's only a few users left.

00:42:58.240 --> 00:43:01.610
You need to take a hard look at your
application when you get in this

00:43:01.640 --> 00:43:05.940
situation and see if these users over
here really are still worth supporting.

00:43:05.940 --> 00:43:09.620
Now, I'm not telling you you should go
and dump all your old customers.

00:43:09.620 --> 00:43:10.780
That's not what I'm saying.

00:43:10.780 --> 00:43:13.980
But what I'm saying is if you're going
to develop an application that targets

00:43:14.220 --> 00:43:18.200
older devices and older versions of iOS,
you need to key specifically on

00:43:18.530 --> 00:43:20.870
responsiveness when you come to this.

00:43:20.880 --> 00:43:24.560
When you're thinking about features,
if that feature works awesome

00:43:24.560 --> 00:43:28.100
on an iPhone 4 but runs for junk
on an iPhone 3G or an iPhone.

00:43:28.370 --> 00:43:33.170
You need to make sure that they get
the same experience as if you were

00:43:33.290 --> 00:43:39.500
actually developing that application for
them and not just as an afterthought.

00:43:39.530 --> 00:43:42.210
If you can't do that,
consider dropping features or maybe

00:43:42.570 --> 00:43:46.680
toning them back a little bit so they get
a really good user experience as well.

00:43:49.610 --> 00:43:50.960
Finally, knowing your customer.

00:43:51.020 --> 00:43:54.120
And this is more than just knowing
which device they're on or which

00:43:54.120 --> 00:43:55.620
features they're asking for.

00:43:55.670 --> 00:43:59.990
It's realizing that some users,
they're not as technically

00:44:00.060 --> 00:44:01.340
savvy as everyone in this room.

00:44:01.340 --> 00:44:02.610
Kind of like my father-in-law.

00:44:02.610 --> 00:44:05.830
Or maybe they don't
speak the same language.

00:44:05.830 --> 00:44:09.640
Maybe like your father-in-law
or my wife some days.

00:44:11.240 --> 00:44:12.940
You need to think about these things.

00:44:12.940 --> 00:44:15.370
Things that have nothing
really to do with the technical

00:44:15.370 --> 00:44:17.680
aspect of your application,
but they still are a part

00:44:17.760 --> 00:44:19.240
of application development.

00:44:19.240 --> 00:44:21.550
And specifically,
there is one thing that you can

00:44:21.650 --> 00:44:25.120
actually do and implement in your
application that will actually pay you

00:44:25.120 --> 00:44:27.250
a dividend the more you actually add it.

00:44:27.260 --> 00:44:29.760
And that is accessibility.

00:44:31.330 --> 00:44:35.170
Accessibility is enabling your
application to be usable by those with

00:44:35.180 --> 00:44:38.000
special needs or physical disabilities.

00:44:38.170 --> 00:44:43.840
And I'll tell you that we are incredibly
proud of how accessible iOS has become.

00:44:43.840 --> 00:44:47.040
I mean, if you think about it,
we make a device that literally is

00:44:47.040 --> 00:44:49.680
two pieces of glass and three buttons.

00:44:49.840 --> 00:44:52.150
And yet people who have never
seen the thing can actually

00:44:52.250 --> 00:44:53.840
still use it every single day.

00:44:53.840 --> 00:44:57.420
I mean, even future Jake and his future
whatever iPhone that he has still

00:44:57.420 --> 00:44:59.670
has to think that's pretty cool.

00:45:00.520 --> 00:45:04.140
We give you the power to
enable your application to be

00:45:04.140 --> 00:45:07.500
just as assistive as iOS is.

00:45:07.580 --> 00:45:11.520
If you're using standard UI kit controls,
you get most of this for free.

00:45:11.620 --> 00:45:16.400
When the UI becomes a little ambiguous,
you can help us with some hints.

00:45:16.450 --> 00:45:18.400
But for the most part, it just works.

00:45:18.660 --> 00:45:23.660
Now, if you're providing an entirely
custom view and custom controls,

00:45:23.660 --> 00:45:27.720
you need to support the
UI accessibility protocols.

00:45:27.990 --> 00:45:29.570
Now, what's the payoff for this?

00:45:29.840 --> 00:45:34.170
Why, besides other having more
customers for your application,

00:45:34.620 --> 00:45:38.260
The payoff here is that the more
accessible you make your application,

00:45:38.260 --> 00:45:40.420
the more automatable it becomes.

00:45:40.560 --> 00:45:43.490
The automation system that
we have in iOS is completely

00:45:43.600 --> 00:45:46.060
dependent upon accessibility.

00:45:46.180 --> 00:45:50.110
So the more accessible you are,
the more automatable you become and

00:45:50.110 --> 00:45:52.480
the more easy it is to test your UI.

00:45:53.390 --> 00:45:55.830
There is a great talk on
accessibility going on right

00:45:55.910 --> 00:45:58.380
now about 20 yards that way.

00:45:58.400 --> 00:46:00.970
I would highly recommend that
you check it out on the videos.

00:46:01.120 --> 00:46:06.350
They have done fantastic things
with accessibility in iOS.

00:46:08.470 --> 00:46:12.270
Now we're at the part of the talk
where you're probably sitting in the

00:46:12.270 --> 00:46:13.980
audience and you're thinking that,
oh my god,

00:46:13.980 --> 00:46:16.300
I had that iPad 1.1 check in there.

00:46:16.300 --> 00:46:17.450
I should probably get rid of that.

00:46:17.530 --> 00:46:20.900
And you listened to what Jake had
to say and you probably have all

00:46:20.930 --> 00:46:24.690
these crash reports that you probably
should go and gather up and actually

00:46:24.930 --> 00:46:26.880
fix what's actually happening.

00:46:29.720 --> 00:46:32.170
And you maybe think, well, actually,
accessibility would be kind

00:46:32.200 --> 00:46:33.540
of cool to add to my app.

00:46:33.690 --> 00:46:37.460
So you go home,
and you bundle up an update,

00:46:37.470 --> 00:46:40.020
and you put it off to the store,
and we approve it.

00:46:40.080 --> 00:46:42.540
And you get to see those three
words that everyone loves to see,

00:46:42.540 --> 00:46:42.750
right?

00:46:42.880 --> 00:46:44.420
Ready for sale.

00:46:44.420 --> 00:46:45.060
Woo-hoo!

00:46:45.080 --> 00:46:45.620
Right?

00:46:45.750 --> 00:46:47.240
It's a party.

00:46:47.260 --> 00:46:49.980
You guys actually let go of balloons,
right?

00:46:50.910 --> 00:46:54.910
Users start downloading your update,
they start posting reviews,

00:46:54.910 --> 00:46:59.300
and you start seeing these reviews, like,
"Oh, this app was awesome.

00:46:59.430 --> 00:47:02.220
Now with the update,
it doesn't work anymore." Okay,

00:47:02.220 --> 00:47:03.990
that's not good.

00:47:04.060 --> 00:47:05.300
Oh, here we go.

00:47:05.300 --> 00:47:08.580
I love this app, but since I updated it,
it won't start.

00:47:08.620 --> 00:47:09.600
It keeps crashing.

00:47:09.600 --> 00:47:11.590
Well, that doesn't happen for
me in the simulator.

00:47:11.630 --> 00:47:13.690
Okay.

00:47:13.700 --> 00:47:14.670
Oh, great.

00:47:14.750 --> 00:47:16.500
"Every update makes this game worse.

00:47:16.500 --> 00:47:18.490
They want their money back." Fabulous.

00:47:18.520 --> 00:47:20.300
It can't get any worse, right?

00:47:22.000 --> 00:47:22.920
That's nice.

00:47:22.920 --> 00:47:26.000
OK, great.

00:47:26.000 --> 00:47:29.040
I'm not even quite sure what this
actually-- I think it means I need

00:47:29.040 --> 00:47:30.320
to make a salad with eggplants.

00:47:30.320 --> 00:47:31.760
I have no idea.

00:47:31.760 --> 00:47:32.660
It's not usable.

00:47:32.660 --> 00:47:34.450
It's not useful.

00:47:34.660 --> 00:47:36.230
How did we get to this point?

00:47:36.240 --> 00:47:40.130
If you've done everything we've told
you to do up to what we said so far,

00:47:40.150 --> 00:47:42.060
what happened here?

00:47:42.060 --> 00:47:47.100
What component did we miss that makes
your application stand the best chance

00:47:47.100 --> 00:47:50.460
of being truly stable and a really
great experience for your users?

00:47:50.460 --> 00:47:54.510
And we'll get you reviews that
will instead look like this.

00:47:57.800 --> 00:48:00.300
A component is testing.

00:48:00.300 --> 00:48:04.150
Every application you ship
that you deliver to the

00:48:04.150 --> 00:48:06.100
App Store needs to be tested.

00:48:06.100 --> 00:48:09.350
I don't care if it has a single
button and makes fart noises,

00:48:09.440 --> 00:48:13.640
or it has a million buttons and connects
to every social network on the planet.

00:48:13.640 --> 00:48:15.550
It needs to be tested.

00:48:15.610 --> 00:48:16.800
Why does it need to be tested?

00:48:16.800 --> 00:48:19.830
Because you don't want to see
reviews that have eggplants in them,

00:48:19.830 --> 00:48:20.420
for one.

00:48:20.460 --> 00:48:24.940
But if you ship bugs,
that means you have to fix them.

00:48:24.940 --> 00:48:28.180
Your users are going to find them,
and they're going to submit bug reports,

00:48:28.180 --> 00:48:30.520
and they're going to demand
that you fix this stuff.

00:48:30.580 --> 00:48:34.720
So you're fixing bugs instead of
adding features to your application.

00:48:34.800 --> 00:48:38.980
Most importantly,
testing finds regressions.

00:48:38.980 --> 00:48:43.420
Regressions are changes to your code
that break existing functionality.

00:48:43.420 --> 00:48:46.440
This is something internally
that we focus on a lot.

00:48:46.440 --> 00:48:49.830
When we make a change,
we want to know that we haven't

00:48:49.830 --> 00:48:52.740
broken something that already exists.

00:48:53.190 --> 00:48:55.540
So you may be saying, testing is hard.

00:48:55.540 --> 00:48:56.860
I don't want to do testing.

00:48:56.930 --> 00:48:58.440
Well, I understand that.

00:48:58.440 --> 00:49:02.220
Testing can be a little difficult,
but a little bit goes a long ways.

00:49:02.250 --> 00:49:04.340
And if you've never
actually done testing,

00:49:04.340 --> 00:49:05.920
if you've never really
tested your application,

00:49:05.920 --> 00:49:07.270
you may have no idea where to even start.

00:49:07.330 --> 00:49:10.110
So let's walk through a
very simple test plan,

00:49:10.110 --> 00:49:14.310
but it should give you some ideas of
how you can go about getting started

00:49:14.310 --> 00:49:16.580
with testing your application.

00:49:17.910 --> 00:49:20.870
First off, you start with the tools.

00:49:20.880 --> 00:49:21.690
Maybe.

00:49:21.870 --> 00:49:24.180
And the first tool that we're
gonna start off with is Xcode.

00:49:24.210 --> 00:49:26.480
It's the tool that you
guys all know already.

00:49:26.500 --> 00:49:30.400
And not only does Xcode
run your unit tests,

00:49:30.470 --> 00:49:31.490
which,

00:49:31.850 --> 00:49:33.730
You're all running unit tests, right?

00:49:33.880 --> 00:49:36.100
It runs the Static Analyzer.

00:49:36.110 --> 00:49:39.940
And we've talked a lot about
the Static Analyzer this week.

00:49:39.940 --> 00:49:41.840
And if you haven't been
in any of the sessions,

00:49:41.860 --> 00:49:44.550
it's basically a tool that
will walk through every single

00:49:44.680 --> 00:49:48.600
code path in your application,
and it finds things that the

00:49:48.600 --> 00:49:50.700
compiler just isn't gonna see.

00:49:50.910 --> 00:49:55.860
Strange return values, dead code stores,
things that are dependent on

00:49:55.890 --> 00:49:57.740
branches in your application.

00:49:57.750 --> 00:50:00.880
It's a fabulous tool that you
should run early and often,

00:50:00.890 --> 00:50:04.160
but you also need to
understand that when the,

00:50:04.160 --> 00:50:06.340
the analyzer will return a
certain number of errors,

00:50:06.340 --> 00:50:09.870
and if you get like 20 of them,
fix just the first one

00:50:09.870 --> 00:50:11.020
and rerun it again.

00:50:11.020 --> 00:50:13.640
It has kind of a cascade effect,
that you'll find that if

00:50:13.640 --> 00:50:16.830
you fix one and rerun it,
a lot of the other errors

00:50:16.830 --> 00:50:18.930
will most likely go away.

00:50:21.270 --> 00:50:23.550
Second is Instruments.

00:50:23.570 --> 00:50:25.570
Now,
Instruments really is about the biggest

00:50:25.570 --> 00:50:29.290
gun that you have in your arsenal to
shipping a really great application.

00:50:29.400 --> 00:50:32.010
It does dozens of different things.

00:50:32.220 --> 00:50:34.830
But for the sake of this test plan,
we're only going to

00:50:34.920 --> 00:50:36.120
discuss three of them.

00:50:36.120 --> 00:50:38.860
And the first one is allocations.

00:50:39.190 --> 00:50:43.900
Allocations analyzes the memory
lifecycle of blocks in your code.

00:50:43.900 --> 00:50:46.980
Basically,
it watches as objects come and go.

00:50:47.100 --> 00:50:49.500
But allocations usually
isn't run by itself.

00:50:49.500 --> 00:50:52.700
It's ran with leaks,
which checks for memory,

00:50:52.700 --> 00:50:54.460
abandoned memory in the heap.

00:50:56.640 --> 00:51:02.220
Allocations analyzes the memory
lifecycle of blocks in your code.

00:51:02.240 --> 00:51:06.200
Basically,
it watches as objects come and go.

00:51:06.200 --> 00:51:09.920
But allocations usually
isn't run by itself.

00:51:10.020 --> 00:51:13.880
It's ran with leaks,
which checks for memory,

00:51:14.090 --> 00:51:16.720
abandoned memory in the heap.

00:51:17.460 --> 00:51:20.160
And finally, it's Time Profiler.

00:51:20.160 --> 00:51:24.060
Time Profiler is a great tool to
let you see what your application is

00:51:24.060 --> 00:51:26.000
doing while it's actually doing it.

00:51:26.080 --> 00:51:28.980
And so your application
becomes slow or unresponsive,

00:51:29.010 --> 00:51:33.010
if you fire it up in Time Profiler,
you can see where those cycles are going.

00:51:34.500 --> 00:51:36.100
The next component is automation.

00:51:36.310 --> 00:51:39.860
And like I mentioned before,
automation is our ability to simulate

00:51:39.860 --> 00:51:43.000
user input into your application,
either via an actual

00:51:43.130 --> 00:51:44.900
device or on the simulator.

00:51:45.080 --> 00:51:50.100
And it allows you to do basic
UI interaction and UI regression testing.

00:51:50.200 --> 00:51:53.610
If you have a really complicated
navigation controller layout and

00:51:53.610 --> 00:51:56.690
you are meant to make changes to it,
if you record an automation

00:51:56.840 --> 00:52:00.120
first through it,
you can make sure that changes to it

00:52:00.120 --> 00:52:02.620
aren't going to break how it works.

00:52:03.300 --> 00:52:08.000
Automation is part of Instruments,
and it's part of the Automation plugin.

00:52:08.040 --> 00:52:12.330
And both of these have actually
received feature upgrades for iOS 5.

00:52:12.410 --> 00:52:17.840
And starting with Automation,
we can now record scripts for you.

00:52:17.900 --> 00:52:21.430
And this is really nice because
previously you've had to--

00:52:24.430 --> 00:52:27.450
Everyone clapping in here realizes
before you've had to type all this

00:52:27.520 --> 00:52:30.240
stuff in by hand and try to figure
out where you're at in the hierarchy.

00:52:30.270 --> 00:52:32.620
Now you just plug in a device
and tap out where you want to go

00:52:32.620 --> 00:52:35.920
and we'll figure it out for you.

00:52:35.970 --> 00:52:40.460
Second is the instrument supports
a command line interface.

00:52:40.720 --> 00:52:44.950
Meaning that you can run any saved trace,
or that doesn't even

00:52:44.960 --> 00:52:47.400
need to be automation,
and you can integrate it with any

00:52:47.400 --> 00:52:53.200
existing shell scripts or any existing
automation or build plans that you have.

00:52:54.240 --> 00:52:56.660
There was a great talk on
what's new in automation,

00:52:56.740 --> 00:52:57.400
if I can click the button.

00:52:57.400 --> 00:53:00.060
That was yesterday in Marina.

00:53:00.220 --> 00:53:01.700
Check it out on the videos.

00:53:01.700 --> 00:53:04.030
They did some awesome
stuff with iOS 5 as well.

00:53:06.800 --> 00:54:47.800
[Transcript missing]

00:54:49.560 --> 00:54:51.630
With the iPhone,
it's the same exact test,

00:54:51.630 --> 00:54:54.200
but I want you to stay
on the cellular network.

00:54:54.240 --> 00:54:55.700
And again,
you do this because you want to see

00:54:55.700 --> 00:55:00.530
how your application responds to being
on an entirely different network.

00:55:00.970 --> 00:55:04.650
Once you've got these tests complete,
you can actually be reasonably assured

00:55:04.660 --> 00:55:09.440
that your new application runs well on
the old version of iOS that you support.

00:55:09.440 --> 00:55:11.650
You may still have issues,
but for the most part,

00:55:11.810 --> 00:55:12.820
you've got it covered.

00:55:12.820 --> 00:55:16.780
Now, moving on to the next version,
the current version of iOS,

00:55:16.780 --> 00:55:19.640
what I want you to do is
install the oldest version of

00:55:19.640 --> 00:55:21.610
your application that you can.

00:55:21.620 --> 00:55:26.500
Now, this may not actually be possible,
because sometimes it just won't go.

00:55:26.970 --> 00:55:31.460
But a new feature in Xcode with 4.2
is that you can actually save off the

00:55:31.460 --> 00:55:36.590
application's sandbox and then restore it
onto a device to perform this very test,

00:55:36.700 --> 00:55:38.360
and that test is to
upgrade your application.

00:55:38.360 --> 00:55:40.890
So if you have an old
device learning 4.1,

00:55:41.000 --> 00:55:43.700
you can plug in into Xcode,
pull off the sandbox,

00:55:43.700 --> 00:55:47.970
and stick it on the iOS 5 device,
and then you can perform your upgrade.

00:55:47.980 --> 00:55:50.540
And you're upgrading to see
if core data gets upgraded,

00:55:50.660 --> 00:55:52.320
your user defaults stay the same.

00:55:52.320 --> 00:55:55.320
And then the test from
there is exactly the same.

00:55:55.360 --> 00:55:56.890
You're going somewhere else.

00:55:56.960 --> 00:55:58.160
you're testing on Wi-Fi.

00:55:58.380 --> 00:56:00.290
Test like a user.

00:56:00.590 --> 00:56:03.710
And as you can guess, wash, rinse,
and repeat with the iPhone,

00:56:03.860 --> 00:56:06.130
it's the same exact test.

00:56:07.570 --> 00:56:11.400
And like I said in the beginning,
this isn't really all that much,

00:56:11.510 --> 00:56:15.160
but it tests a lot of
functionality in your application.

00:56:15.160 --> 00:56:17.580
Functionality that your users,
that's the first thing

00:56:17.580 --> 00:56:18.100
they're going to see.

00:56:18.100 --> 00:56:20.310
They're going to use your
application in the coffee shop,

00:56:20.340 --> 00:56:22.400
or they're going to use it
traveling down the interstate.

00:56:22.420 --> 00:56:26.200
So doing these tests gives you a
reasonably good assumption of what

00:56:26.200 --> 00:56:29.470
the user is going to see in your app,
and will find all those

00:56:29.480 --> 00:56:30.980
bugs before they do.

00:56:32.310 --> 00:56:35.960
So wrapping up here today,
what's the things we talked about?

00:56:36.020 --> 00:56:39.420
We talked about not caring so
much about which device you're on,

00:56:39.440 --> 00:56:42.340
but querying the API to know
what you should be doing with

00:56:42.460 --> 00:56:44.870
what OS that you're running on.

00:56:45.400 --> 00:56:50.250
Jake talked about making good choices
with the API that you're using,

00:56:50.250 --> 00:56:54.390
and that when the machines take over in
the future and enslave all of humanity,

00:56:54.450 --> 00:56:58.800
your app still runs pretty well.

00:56:59.880 --> 00:57:03.060
Stepping back out of your role as a
developer and stepping into the role

00:57:03.060 --> 00:57:06.150
as a user and trying to think of the
issues that they're going to encounter,

00:57:06.180 --> 00:57:07.730
because you guys are users too.

00:57:07.750 --> 00:57:10.440
And you really should be
making applications that are

00:57:10.440 --> 00:57:12.100
really great for yourselves.

00:57:12.100 --> 00:57:14.200
And finally, testing.

00:57:14.230 --> 00:57:18.120
Test plans aren't incredibly sexy,
but they are a required part of

00:57:18.120 --> 00:57:22.250
application development and really
are the best bet to getting really

00:57:22.250 --> 00:57:26.390
great reviews and providing a
really great user experience.

00:57:26.400 --> 00:57:27.840
I'd like to thank you guys for your time.

00:57:27.840 --> 00:57:30.160
If you need to talk about us anymore,
send Bill an email or

00:57:30.160 --> 00:57:31.400
read the documentation.

00:57:31.400 --> 00:57:33.600
Or if you have any questions,
come up here and ask us,

00:57:33.620 --> 00:57:35.200
and we'd be happy to help you out.