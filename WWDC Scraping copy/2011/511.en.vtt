WEBVTT

00:00:09.800 --> 00:00:12.500
Good morning.

00:00:12.680 --> 00:00:17.320
I'm Justin Garcia, and I work on the iOS
keyboards and text team.

00:00:17.420 --> 00:00:22.370
And before we get started,
I'd like to say thank you.

00:00:23.240 --> 00:00:26.100
I've had a chance to meet
some of you this week,

00:00:26.100 --> 00:00:29.180
and I've seen some of the amazing things
that you guys have been working on,

00:00:29.330 --> 00:00:33.200
and it's been both
inspiring and humbling.

00:00:33.230 --> 00:00:34.440
So again, thank you.

00:00:34.470 --> 00:00:35.700
So what are we talking about today?

00:00:35.700 --> 00:00:38.830
Well, today's about four things.

00:00:39.690 --> 00:00:43.140
First,
today's about getting rid of markup.

00:00:43.260 --> 00:00:47.770
No, not for you, for your users.

00:00:48.250 --> 00:00:54.850
I went to Blogger.com a few days ago and
used their rich text editing toolbar.

00:00:55.760 --> 00:00:59.740
And when you use their
rich text editing toolbar,

00:00:59.740 --> 00:01:02.380
it inserts tags.

00:01:02.830 --> 00:01:07.850
It's 2011,
and end users are still seeing tags.

00:01:08.140 --> 00:01:09.300
Wikipedia does this too.

00:01:09.370 --> 00:01:11.600
So today is about getting
rid of markup for users.

00:01:11.600 --> 00:01:14.370
We shouldn't be
subjecting people to this.

00:01:16.550 --> 00:01:17.530
Well, what are we going to do instead?

00:01:17.530 --> 00:01:20.820
Well,
we're going to build a WYSIWYG editor.

00:01:20.860 --> 00:01:24.230
But what is it that users want to see,
and what is it that users want to edit?

00:01:24.240 --> 00:01:25.580
What kind of text?

00:01:25.610 --> 00:01:30.170
Well, they want to edit the kind of
text that they see in print books,

00:01:30.170 --> 00:01:32.860
the kind of text that they read.

00:01:32.930 --> 00:01:35.370
So topography is important.

00:01:38.300 --> 00:01:42.110
Number three,
you saw it on Monday in the demo,

00:01:42.120 --> 00:01:43.700
and you want it in your app.

00:01:44.040 --> 00:01:45.990
Talking about rich text editing,
but we're talking about

00:01:46.000 --> 00:01:48.700
more than just bold,
italic, and underline.

00:01:48.870 --> 00:01:53.410
We're talking about any arbitrary
DOM operation or CSS text effect

00:01:53.480 --> 00:01:56.170
that you can dream up in your app.

00:01:58.220 --> 00:02:02.640
And four, we're talking about a
desktop caliber experience.

00:02:02.700 --> 00:02:03.590
What does that mean?

00:02:03.640 --> 00:02:09.090
Well, iMovie for iPad,
the new Photos app for iPad and iPhone,

00:02:09.140 --> 00:02:10.860
where you can edit your photos.

00:02:10.860 --> 00:02:14.330
These are desktop caliber
experiences for the iPad.

00:02:14.350 --> 00:02:17.860
That's what we want to build today.

00:02:17.860 --> 00:02:19.980
So how are we going to do this?

00:02:21.750 --> 00:02:23.580
Well, first let's look at some
examples from the desktop.

00:02:23.700 --> 00:02:28.120
These are desktop text editors,
and this is what we

00:02:28.180 --> 00:02:29.760
want to strive towards.

00:02:31.760 --> 00:02:35.540
This is Google Docs running in Safari.

00:02:35.540 --> 00:02:40.050
This is a full-fledged,
powerful text editor that coincidentally

00:02:40.050 --> 00:02:42.340
uses the same technology that
we're talking about here today.

00:02:42.340 --> 00:02:47.440
It uses WebKit's editability features.

00:02:47.440 --> 00:02:51.480
On top of that, Sandbox by Corellia.

00:02:51.480 --> 00:02:56.880
And this is a website and blogging tool.

00:02:56.880 --> 00:02:59.280
Both of these are great examples.

00:03:06.510 --> 00:03:10.020
So what's the feature
set that we want to have?

00:03:10.120 --> 00:03:12.380
Well, it all starts, of course,
with beautiful typography.

00:03:12.380 --> 00:03:17.470
We're going to have multi-styled text.

00:03:19.380 --> 00:03:25.060
Multiple columns, custom backgrounds,
anything that you're used to

00:03:25.060 --> 00:03:28.380
building into your page layouts,
we're going to have in our editor.

00:03:29.700 --> 00:03:36.280
transparency, draggable images,
and of course, HTML export.

00:03:38.470 --> 00:03:40.740
So here's what we're going to build.

00:03:40.750 --> 00:03:43.510
This is a picture of the native app.

00:03:43.930 --> 00:03:45.920
And we'll talk about that in the
second part of the presentation.

00:03:45.920 --> 00:03:49.940
The first part will be about
building a web application.

00:03:54.410 --> 00:03:56.540
So what are the alternatives?

00:03:56.580 --> 00:04:00.250
What can we use besides
WebKit before we get started?

00:04:01.900 --> 00:04:04.920
Well, Mobile Notes uses a UI text view.

00:04:04.930 --> 00:04:09.440
This is one option you have on iOS,
but it's not very powerful.

00:04:09.460 --> 00:04:13.440
You can have style text,
but you can only have a single style.

00:04:15.730 --> 00:04:19.190
Of course, it doesn't support HTML,
JavaScript, CSS,

00:04:19.190 --> 00:04:22.840
so the page layouts are very basic.

00:04:22.960 --> 00:04:25.390
And there's no HTML export.

00:04:26.920 --> 00:04:33.040
Second option is to build your own
custom text layout engine on iOS that

00:04:33.050 --> 00:04:35.840
implements the UI text input protocol.

00:04:35.850 --> 00:04:39.640
I've seen many developers
do this using Cortex.

00:04:39.720 --> 00:04:43.130
But as web developers,
you want to leverage

00:04:43.560 --> 00:04:48.040
What you know to build beautiful
page layouts for your customers,

00:04:48.040 --> 00:04:50.270
instead of learning core text.

00:04:52.420 --> 00:04:55.000
So this is what we're going to do.

00:04:55.000 --> 00:04:57.760
We're going to use the
new features in iOS,

00:04:57.760 --> 00:05:01.480
the new WebKit editing features in iOS,
to build this editor.

00:05:01.550 --> 00:05:05.540
First,
we're going to build a web application.

00:05:05.540 --> 00:05:08.020
And then second,
we're going to embed that web application

00:05:08.020 --> 00:05:11.260
into a UIWebView to build a native app.

00:05:11.260 --> 00:05:12.920
And both of these are standalone options.

00:05:12.980 --> 00:05:21.050
So before we dive into
the code of the web app,

00:05:21.070 --> 00:05:22.950
Let me give you a quick demo.

00:05:32.380 --> 00:05:34.300
So here it is running in mobile Safari.

00:05:34.300 --> 00:05:40.290
Two column layout.

00:05:42.000 --> 00:05:47.490
I place the cursor up in the title,
and it has single line enforcement.

00:05:47.500 --> 00:05:50.620
So I'm hitting Return,
and it's just like a single

00:05:50.630 --> 00:05:54.410
line text field on iOS for
those iOS developers out there.

00:05:56.390 --> 00:05:59.160
And right now,
there's only a single control

00:05:59.700 --> 00:06:02.380
in the toolbar for bold.

00:06:02.390 --> 00:06:03.690
But we're going to add
more in just a moment.

00:06:03.880 --> 00:06:10.680
Select some text here.

00:06:16.310 --> 00:06:21.800
All my edits are saved
automatically as I enter characters.

00:06:28.400 --> 00:06:35.400
[Transcript missing]

00:06:41.240 --> 00:06:46.230
So the new content editable
DOM attribute in iOS 5,

00:06:46.230 --> 00:06:50.200
you can add to any element in
your document to make it editable.

00:06:50.260 --> 00:06:52.500
And we'll see that in a moment.

00:06:53.010 --> 00:06:55.660
You can position the
cursor programmatically

00:06:55.690 --> 00:06:58.180
with window.getSelection.

00:06:59.000 --> 00:07:01.620
to guide the user through the document.

00:07:01.790 --> 00:07:06.010
You're gonna use the new exec command
on document to perform arbitrary

00:07:06.610 --> 00:07:09.900
DOM operations in CSS text effects.

00:07:11.540 --> 00:07:17.190
You're going to validate editing
UI with query command enabled.

00:07:20.330 --> 00:07:24.160
and you're gonna have print caliber
topography with two new CSS attributes,

00:07:24.240 --> 00:07:29.320
excuse me,
two new CSS properties in iOS 5.

00:07:31.680 --> 00:07:34.940
You can validate and format input
using JavaScript event handlers.

00:07:34.940 --> 00:07:50.990
And we're going to save user edits on key
up in my demo using an XML HTTP request.

00:07:56.390 --> 00:07:59.530
So content editable,
what does this look like?

00:07:59.600 --> 00:08:01.350
It's really simple.

00:08:01.830 --> 00:08:06.190
You can either add it to the document
element to make everything editable,

00:08:06.190 --> 00:08:10.950
or you can create editable pockets by
adding it individually to elements.

00:08:16.870 --> 00:08:19.100
We're going to position the
selection programmatically to guide

00:08:19.100 --> 00:08:24.640
the user through the document using
the window.getSelection method.

00:08:24.690 --> 00:08:28.570
Here I am setting it in the
editable div that I just created.

00:08:32.010 --> 00:08:36.400
Here's my toolbar with two extra buttons.

00:08:36.600 --> 00:08:39.640
Create link and highlight.

00:08:39.640 --> 00:08:42.390
We'll talk about how to
implement those in a moment.

00:08:44.440 --> 00:08:45.900
And these all use exec command.

00:08:45.920 --> 00:08:48.960
So here's Bold being
implemented using exec command.

00:08:49.120 --> 00:08:51.310
It's pretty simple.

00:08:51.620 --> 00:08:54.580
Here's Create Link.

00:08:54.860 --> 00:09:04.810
And all these exec commands are undoable.

00:09:11.260 --> 00:09:16.200
is going to point you to documentation
that lists all the exact commands

00:09:16.200 --> 00:09:18.300
at the end of the presentation.

00:09:23.400 --> 00:09:24.840
So validating UI.

00:09:24.850 --> 00:09:29.580
I want a bold button that looks
depressed when you're in bold text,

00:09:29.590 --> 00:09:32.120
and is undepressed when
you're not in bold text.

00:09:32.140 --> 00:09:33.320
How do we do that?

00:09:33.330 --> 00:09:36.620
Well,
we're gonna use query command enabled,

00:09:36.640 --> 00:09:39.870
and pass it the editing operation
that we're interested in.

00:09:43.190 --> 00:09:47.710
So I talked about improved
typography features in iOS 5.

00:09:48.130 --> 00:09:52.340
Here's a text example without
ligatures and kerning.

00:09:52.380 --> 00:09:54.660
You can see that the i,
the dot over the i,

00:09:54.660 --> 00:09:58.600
runs into the top of the f.

00:09:58.620 --> 00:10:01.330
We apply this new CSS property.

00:10:01.810 --> 00:10:03.000
We get some tightening.

00:10:03.030 --> 00:10:05.190
We get a ligature for FI.

00:10:05.370 --> 00:10:06.940
And that's really simple.

00:10:07.090 --> 00:10:10.400
You just use text rendering
optimized legibility.

00:10:17.370 --> 00:10:18.170
So what's wrong with this?

00:10:18.200 --> 00:10:21.390
Well, this is justified text.

00:10:21.760 --> 00:10:25.390
And in a print book,
you'd have hyphenation to

00:10:25.390 --> 00:10:30.450
improve the spacing between
the words and that second line.

00:10:30.510 --> 00:10:35.940
And we can get that in WebKit using the
new CSS auto-hyphenation for English.

00:10:36.160 --> 00:10:39.280
And here's the finished result.

00:10:39.280 --> 00:10:45.260
And this is just WebKit hyphens auto.

00:10:49.210 --> 00:10:51.930
So you may have seen
drop caps in the demo.

00:10:51.940 --> 00:10:55.490
This isn't new to iOS 5.

00:10:56.230 --> 00:10:59.600
But you might be interested
in how I implemented that.

00:10:59.600 --> 00:11:03.520
You just use the first letters,
CSS pseudo element.

00:11:10.090 --> 00:11:13.180
So how did I do that
single line validation?

00:11:13.200 --> 00:11:18.890
I kept the title and the date
from accepting new lines.

00:11:22.500 --> 00:11:28.190
I'll just check to see if the
element is a title or a date.

00:11:28.850 --> 00:11:34.230
I verified that the user
isn't inserting a new line.

00:11:34.250 --> 00:11:35.960
It's pretty simple.

00:11:40.730 --> 00:11:43.720
called that element, or excuse me,
I called that function on every key down.

00:11:43.720 --> 00:11:52.460
Now you noticed that I reloaded the
page and the user edits were saved.

00:11:52.460 --> 00:11:54.380
How did I do that?

00:11:54.390 --> 00:11:57.080
Well, there are a couple different
ways of doing this.

00:11:58.260 --> 00:12:02.580
I chose to use an XML HTTP request,
and I send the entire source

00:12:02.580 --> 00:12:05.190
of the document to my PHP file.

00:12:05.200 --> 00:12:08.500
And this works pretty well, but

00:12:09.710 --> 00:12:13.840
You'd like to be able to do this when the
user doesn't have an internet connection.

00:12:13.840 --> 00:12:16.160
You'd like to be able to do this offline.

00:12:16.250 --> 00:12:21.200
So you should go and check out
Alexei's talk this afternoon on HTML5

00:12:21.200 --> 00:12:23.590
offline storage if you're interested.

00:12:23.600 --> 00:12:29.750
So let's dive into the code.

00:12:40.120 --> 00:12:41.230
So this was my original.

00:12:41.340 --> 00:12:48.480
I'm going to open up
my uneditable document.

00:12:51.740 --> 00:12:54.800
to quickly add contenteditable
equals true to the elements that

00:12:54.800 --> 00:12:57.010
I'm interested in making editable.

00:13:10.790 --> 00:13:12.700
Let me just reload the page.

00:13:12.700 --> 00:13:18.910
And here we go.

00:13:18.960 --> 00:13:21.000
Let's add two more editing
controls to the toolbar.

00:13:21.000 --> 00:13:23.490
Let's add Create Link and Highlight.

00:13:36.500 --> 00:13:37.500
Nice.

00:13:37.500 --> 00:13:44.440
So here we have two
more editing operations.

00:13:44.440 --> 00:13:47.040
Let's add the exec commands for those.

00:13:47.080 --> 00:13:49.100
Create link and highlight.

00:13:52.640 --> 00:13:56.310
Now you've noticed, you may have noticed,
that highlight doesn't use

00:13:56.310 --> 00:13:57.520
exec command highlight.

00:13:57.520 --> 00:13:59.400
There's no such exec
command for highlight.

00:13:59.490 --> 00:14:01.870
So I've used italic.

00:14:03.140 --> 00:14:07.700
And then I'll go into my CSS and
change the default style for italic.

00:14:07.760 --> 00:14:14.060
Let's reload the page.

00:14:14.780 --> 00:14:16.240
Nice.

00:14:21.400 --> 00:14:24.610
Let's select San Francisco.

00:14:24.720 --> 00:14:30.320
And let's highlight.

00:14:30.320 --> 00:14:34.190
There you go,
you get a nice orange highlight.

00:14:36.640 --> 00:14:38.300
So let's do single line enforcement.

00:14:38.300 --> 00:14:44.790
Because you notice that if I hit return,
I get a carriage return.

00:14:57.970 --> 00:14:59.840
I showed you the code earlier.

00:14:59.840 --> 00:15:05.140
It just verifies that the inserted
character isn't a new line.

00:15:05.140 --> 00:15:07.170
Reload the page.

00:15:15.250 --> 00:15:17.740
And I'm hitting return,
and it's a single line.

00:15:17.760 --> 00:15:24.820
And you may have noticed that we
have some really dirty looking

00:15:24.820 --> 00:15:25.800
justified text down here.

00:15:25.800 --> 00:15:32.460
There's huge spaces between these words,
spots, Grimeer, and let's fix this with

00:15:32.460 --> 00:15:34.330
WebKit hyphens auto.

00:15:43.810 --> 00:15:47.830
And let's dismiss the
keyboard so it doesn't crash.

00:15:48.120 --> 00:15:48.620
And there it is.

00:15:48.620 --> 00:15:49.640
It's all cleaned up.

00:15:49.690 --> 00:15:50.930
Real nice.

00:15:50.940 --> 00:15:55.700
So what's next?

00:15:59.150 --> 00:16:01.700
So I've hand-rolled this editor.

00:16:01.700 --> 00:16:04.640
I wrote my own JavaScript.

00:16:04.640 --> 00:16:07.680
But if you don't want to do that,
there are two very excellent

00:16:07.680 --> 00:16:11.990
JavaScript editing libraries
with cross-browser support,

00:16:11.990 --> 00:16:13.910
TinyMCE and CKEditor.

00:16:19.800 --> 00:16:22.590
and the authors of these two
JavaScript libraries have been

00:16:22.590 --> 00:16:27.860
excellent contributors to WebKit,
our open source WebKit engine.

00:16:32.430 --> 00:16:37.020
So now we're going to embed this
web application into a native app,

00:16:37.020 --> 00:16:41.490
and get this beautiful native experience
with a customized editing call-out bar

00:16:41.500 --> 00:16:44.950
instead of a JavaScript CSS toolbar.

00:16:45.040 --> 00:16:49.870
So let's do that.

00:17:00.100 --> 00:17:12.100
[Transcript missing]

00:17:14.170 --> 00:17:17.730
I'm using the native call-out bar.

00:17:17.770 --> 00:17:19.940
And here are my three
editing operations-- bold,

00:17:19.940 --> 00:17:22.410
highlight, and create link.

00:17:32.930 --> 00:17:36.300
So let's talk about how we
did this at a high level.

00:17:36.300 --> 00:17:38.240
So we leveraged the
entire web application.

00:17:38.240 --> 00:17:40.570
We embed it in a UIWebView.

00:17:41.970 --> 00:17:47.850
And then we extend the system editing
menu instead of using a CSS toolbar.

00:17:49.610 --> 00:17:54.200
And in your native application,
you can use native UI widgets,

00:17:54.210 --> 00:17:58.860
like sliders, to adjust the font size.

00:17:59.290 --> 00:18:04.720
A native application is going to let
you import photos from a user's device,

00:18:04.780 --> 00:18:07.220
and images can become draggable.

00:18:12.700 --> 00:18:17.200
So embedding the web application
into a UIWebView is pretty simple.

00:18:17.200 --> 00:18:20.400
Here I just grabbed
my application bundle.

00:18:21.670 --> 00:18:27.940
I get the index file that you saw us
working on in the web application,

00:18:27.960 --> 00:18:29.390
and I load it into the UIWebView.

00:18:29.400 --> 00:18:36.890
So now we're going to extend
that system editing menu.

00:18:43.410 --> 00:18:46.640
So I build a UI menu item.

00:18:46.650 --> 00:18:48.110
I give it a bold selector.

00:18:48.210 --> 00:18:54.510
I add this to an array.

00:18:57.830 --> 00:19:02.720
And then I add,
and then I set UI menu controllers

00:19:02.960 --> 00:19:07.070
menu items property to that array.

00:19:10.350 --> 00:19:14.340
What's the code for the
bold selector look like?

00:19:14.420 --> 00:19:18.600
How do we perform document.exec
command from a WebView,

00:19:18.630 --> 00:19:20.660
UIWebView, excuse me?

00:19:21.350 --> 00:19:23.700
Well,
we use string by evaluating JavaScript.

00:19:23.710 --> 00:19:27.530
We pass it arbitrary
JavaScript to execute.

00:19:31.190 --> 00:19:35.050
And then we've got to
validate that bold item.

00:19:35.350 --> 00:19:39.780
Some fields, for instance,
might not accept bold.

00:19:39.830 --> 00:19:41.590
Here's how you do that.

00:19:47.770 --> 00:19:49.500
I talked about UI widgets.

00:19:49.570 --> 00:19:52.540
Here I am using a slider
to adjust the font size.

00:19:52.560 --> 00:19:54.820
I grab the slider, I get its value.

00:19:55.000 --> 00:20:01.900
I determine a font size on the range,
max font size to min font size.

00:20:04.550 --> 00:20:08.520
And then I set the font
size of the body element,

00:20:08.520 --> 00:20:11.600
again using string by
evaluating JavaScript.

00:20:14.800 --> 00:20:16.690
So importing photos from a user's device.

00:20:16.700 --> 00:20:27.300
I've added a button to send the
user to their iPhoto library.

00:20:30.000 --> 00:20:32.850
I insert it with this method,
insert image.

00:20:32.890 --> 00:20:41.100
And I build a div around the image,
and then I insert it with insert HTML,

00:20:41.110 --> 00:20:44.520
the insert HTML exec command.

00:20:49.200 --> 00:20:52.500
And then I perform that exec command
using string by evaluating JavaScript.

00:20:52.500 --> 00:21:02.080
Now I call insert image from
image picker controller did

00:21:02.150 --> 00:21:04.810
finish picking media with info.

00:21:06.130 --> 00:21:11.080
I verify that what the user chose
was an image and not a movie.

00:21:11.150 --> 00:21:16.150
I get the image, I write it to file,
and then I insert it with the

00:21:16.150 --> 00:21:18.190
method that I just showed you.

00:21:20.200 --> 00:21:21.570
Now, what about draggable images?

00:21:21.600 --> 00:21:28.670
So first, we perform touch tracking
at the app level.

00:21:29.770 --> 00:21:33.920
Then we send that touch
coordinate to the web application,

00:21:33.920 --> 00:21:36.930
again using string by
evaluating JavaScript.

00:21:37.310 --> 00:21:40.580
In order to find the DOM location
where we want to insert the image,

00:21:40.670 --> 00:21:42.250
we call caret_range for point.

00:21:42.410 --> 00:21:44.430
We pass it a coordinate.

00:21:45.100 --> 00:21:49.350
Then we created a DOM range to
create a selection object so that

00:21:49.350 --> 00:21:51.710
exec command can be performed.

00:21:51.920 --> 00:21:56.090
We remove the image from its old
location using exec command delete,

00:21:56.100 --> 00:21:58.500
and then we reinsert
it using insert HTML.

00:21:58.500 --> 00:22:03.340
And all of this is undoable,
so the user can undo a drag.

00:22:03.340 --> 00:22:10.230
So let's look at some
of the native app code.

00:22:17.590 --> 00:22:20.300
Here I am in my UIWebView subclass.

00:22:20.300 --> 00:22:25.860
And I've implemented Bold, Highlight,
and Create Link,

00:22:25.890 --> 00:22:29.890
and these all perform exec
command operations using string

00:22:29.890 --> 00:22:32.110
by evaluating JavaScript.

00:22:32.140 --> 00:22:36.500
Create Link is a little trickier,

00:22:37.010 --> 00:22:40.840
So it calls an operation that
I've implemented in my web

00:22:40.840 --> 00:22:43.390
application called Create Link.

00:23:01.980 --> 00:23:07.460
So here I am validating each menu item,
bold, highlight, and create link.

00:23:15.450 --> 00:23:21.860
So for more information on exec commands,
check out Mozilla's documentation.

00:23:23.070 --> 00:23:24.970
And if you don't find what
you're looking for there,

00:23:24.970 --> 00:23:28.860
or on Apple Developer Forums,
email Vicki Murley, our Internet and

00:23:28.860 --> 00:23:30.930
Web Technologies Evangelist.

00:23:34.300 --> 00:23:37.220
The text processing that we
did today was very basic.

00:23:37.220 --> 00:23:40.160
If you're interested in learning more,
you want to check out Doug Davidson's

00:23:40.260 --> 00:23:43.060
talk this afternoon at 3:15.

00:23:44.660 --> 00:23:47.740
Internationalization is a
big topic for a text editor.

00:23:47.740 --> 00:23:53.570
So you're gonna wanna check out
Brent's talk tomorrow at 10.

00:23:55.120 --> 00:23:58.610
And if you're interested in
embedding the web application into

00:23:58.610 --> 00:24:01.480
a UIWebView to build a native app,
you want to check out

00:24:01.720 --> 00:24:03.500
What's New in Cocoa Touch.

00:24:03.540 --> 00:24:05.940
That's today at 4:30.

00:24:07.770 --> 00:24:11.380
So we talked about why you should
use WebKit-based rich text editing.

00:24:11.410 --> 00:24:14.290
You learned how to get started,
and how to take the next steps.

00:24:14.380 --> 00:24:18.700
Thank you.